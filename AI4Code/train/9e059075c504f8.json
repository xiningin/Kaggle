{"cell_type":{"c2d9371d":"code","5fde73f1":"code","e454f7b4":"code","b7d28209":"code","3cf13bd8":"code","dd94e60d":"code","67455e7e":"code","e54ac213":"code","cebddf9b":"code","a8e934bf":"code","4d1f5f74":"code","d90ad6ef":"code","91875352":"code","02836960":"code","9f973b7d":"code","d3b8a865":"code","6bd44e83":"code","34b39222":"code","8aaa71a1":"code","b0df06fc":"code","4637f7a2":"code","861ee2f7":"code","7d11682a":"code","e32c07c7":"code","0588a8dc":"code","0982f6d8":"code","ff4c5827":"code","cff708c3":"code","ba920dde":"code","576df900":"code","f77ee6ca":"code","77af8795":"code","acc722b0":"code","e7794e14":"code","9db91433":"code","bc097c83":"code","f6c1778f":"code","e9132b2c":"code","cb25f558":"code","d21c4f48":"code","f74de552":"code","bf4c113b":"code","b97de26b":"code","5264795e":"code","1023db92":"code","7bc714b4":"code","05407975":"code","09680288":"code","af8c97e2":"code","00d0fc5a":"code","9b148aa4":"code","2ab503ab":"code","c36e4820":"code","e93e5ba6":"code","a4368d98":"code","2492a4da":"code","186fd1d4":"code","85521e94":"code","32b9c0cb":"code","ee063be1":"code","82f32af4":"code","778e67e3":"code","943c094f":"code","fccdecd1":"code","f26e5732":"code","882a8584":"code","a2b8d043":"code","22bfdce3":"code","955f2c6a":"code","02a4fa73":"code","7076032d":"code","837d4c39":"code","724bc92c":"code","313e3518":"code","115e040f":"code","1977256e":"code","5497757f":"code","5233a174":"code","c06681d5":"code","f2d3d67c":"code","83b1795f":"code","5f67aee0":"code","8ff75786":"code","3471a6eb":"code","ca58fd97":"code","7c2d765e":"code","527e1b60":"code","f1be0f48":"code","687f75bf":"code","4f453fb0":"code","d957d7c0":"code","459259e2":"code","b8d51e6e":"code","5fcb5bdc":"code","b051c2c3":"code","330f55e9":"code","f49e54ed":"code","aea6dcc2":"code","a911be79":"code","da832009":"code","e7d2d77d":"code","4d1db780":"code","32db2006":"code","50595f92":"code","522c2974":"code","1e937204":"code","d60baa79":"code","6e188737":"code","79451c25":"code","357b80d2":"code","26b330cd":"code","7bbb92a4":"code","0b8f4163":"code","5d50c1cb":"code","68d3dfb6":"code","9f5e026b":"code","52eb9b39":"code","30e1943d":"code","2e2c2cd8":"code","1b568aea":"code","e0348f30":"code","3845d9c5":"code","f7554a3b":"code","7ea1f8a3":"code","721f25a3":"code","8c8671ca":"code","758a58aa":"code","f2514594":"code","00c26e51":"code","3041266f":"code","9fa539ad":"code","50d8c540":"code","9d2654e1":"code","d9c408f9":"code","e4398dc4":"code","a29bc723":"code","17b68b91":"code","c6b87d38":"code","1354c3eb":"code","9a4491a6":"code","596ec4d3":"code","3f8ea0ff":"code","02f5f10c":"code","3f7de25a":"code","03503544":"code","ff8d3922":"code","9dc7d594":"code","a6993533":"code","b8d18269":"code","4e2c2750":"code","290a239d":"code","1f4bd45c":"markdown","bc84e2c6":"markdown","1e9bd9eb":"markdown","904362c2":"markdown","972db361":"markdown","9f911293":"markdown"},"source":{"c2d9371d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')","5fde73f1":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","e454f7b4":"def plot_feature(df,col):\n    plt.figure(figsize=(14,6))\n    plt.subplot(1,2,1)\n    if df[col].dtype == 'int64':\n        df[col].value_counts().sort_index().plot()\n    else:\n        mean = df.groupby(col)['price'].mean()\n        df[col] = df[col].astype('category')\n        levels = mean.sort_values().index.tolist()\n        df[col].cat.reorder_categories(levels,inplace=True)\n        df[col].value_counts().plot()\n    plt.xticks(rotation=45)\n    plt.xlabel(col)\n    plt.ylabel('Counts')\n    plt.subplot(1,2,2)\n    \n    if df[col].dtype == 'int64' or col == 'price':\n        mean = df.groupby(col)['price'].mean()\n        std = df.groupby(col)['price'].std()\n        mean.plot()\n        plt.fill_between(range(len(std.index)),mean.values-std.values,mean.values + std.values, \\\n                        alpha=0.1)\n    else:\n        sns.boxplot(x = col,y='price',data=df)\n    plt.xticks(rotation=45)\n    plt.ylabel('Sales')\n    plt.show()    ","b7d28209":"def missingdata(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    ms=pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    ms= ms[ms[\"Percent\"] > 0]\n    f,ax =plt.subplots(figsize=(8,6))\n    plt.xticks(rotation='90')\n    fig=sns.barplot(ms.index, ms[\"Percent\"],color=\"green\",alpha=0.8)\n    plt.xlabel('Features', fontsize=15)\n    plt.ylabel('Percent of missing values', fontsize=15)\n    plt.title('Percent missing data by feature', fontsize=15)\n    return ms","3cf13bd8":"def plot_learning_curve(estimator, title, X, y, ylim=None, cv=None,\n                        n_jobs=1, train_sizes=np.linspace(.1, 1.0, 5)):\n    plt.figure()\n    plt.title(title)\n    if ylim is not None:\n        plt.ylim(*ylim)\n    plt.xlabel(\"Training examples\")\n    plt.ylabel(\"Score\")\n    train_sizes, train_scores, test_scores = learning_curve(\n        estimator, X, y, cv=cv, n_jobs=n_jobs, train_sizes=train_sizes)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    plt.grid()\n\n    plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n                     train_scores_mean + train_scores_std, alpha=0.1,\n                     color=\"r\")\n    plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n                     test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n    plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n             label=\"Training score\")\n    plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n             label=\"Validation score\")\n\n    plt.legend(loc=\"best\")\n    return plt","dd94e60d":"df = pd.read_csv('\/kaggle\/input\/housing-simple-regression\/Housing.csv')","67455e7e":"df.head()","e54ac213":"sns.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","cebddf9b":"df.isnull().sum()","a8e934bf":"df.info()","4d1f5f74":"df.describe()","d90ad6ef":"df.corr()","91875352":"plt.figure(figsize=(15,6))\nsns.heatmap(df.corr(),annot=True,cmap='Blues')\nplt.show()","02836960":"plt.figure(figsize=(15,6))\nsns.heatmap(df.corr(),annot=False,cmap='viridis')\nplt.show()","9f973b7d":"plt.figure(figsize=(15,6))\nsns.heatmap(df.corr(),annot=True,cmap='Reds')\nplt.show()","d3b8a865":"df1 = df.copy()\ndf2 = df.copy()","6bd44e83":"df1.head()","34b39222":"for col in df1:\n    plot_feature(df1,col)\n    plt.show()","8aaa71a1":"df2.head()","b0df06fc":"df2.columns","4637f7a2":"num = ['area','bedrooms','bathrooms','stories','parking']","861ee2f7":"cat = ['mainroad','guestroom','basement','hotwaterheating','airconditioning','prefarea','furnishingstatus']","7d11682a":"num","e32c07c7":"cat","0588a8dc":"plt.style.use('ggplot')\nfor col in num:\n    plt.figure(figsize=(15,6))\n    sns.barplot(x=col,y=df2['price'],data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","0982f6d8":"for col in cat:\n    plt.figure(figsize=(15,6))\n    sns.barplot(x=col,y=df2['price'],data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","ff4c5827":"for col in num:\n    plt.figure(figsize=(15,6))\n    sns.boxplot(x=col,y=df2['price'],data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","cff708c3":"for col in cat:\n    plt.figure(figsize=(15,6))\n    sns.boxplot(x=col,y=df2['price'],data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","ba920dde":"for col in num:\n    plt.figure(figsize=(15,6))\n    sns.violinplot(x=col,y=df2['price'],data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","576df900":"for col in cat:\n    plt.figure(figsize=(15,6))\n    sns.violinplot(x=col,y=df2['price'],data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","f77ee6ca":"for col in num:\n    plt.figure(figsize=(15,6))\n    sns.jointplot(x=col,y=df2['price'],data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","77af8795":"for col in num:\n    plt.figure(figsize=(15,6))\n    sns.jointplot(x=col,y=df2['price'],data=df2,kind='hex',color='g')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","acc722b0":"for col in num:\n    plt.figure(figsize=(15,6))\n    sns.stripplot(x=col,y=df2['price'],data=df2,jitter=True,edgecolor='gray',size=10,palette='winter',orient='v')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","e7794e14":"for col in num:\n    plt.figure(figsize=(15,6))\n    sns.factorplot(x=col,y='price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","9db91433":"for col in num:\n    plt.figure(figsize=(15,6))\n    sns.residplot(x=col,y='price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","bc097c83":"for col in num:\n    plt.figure(figsize=(15,6))\n    sns.distplot(df2[col],color='red')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","f6c1778f":"for col in num:\n    plt.figure(figsize=(15,6))\n    plt.plot(col,'price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","e9132b2c":"for col in num:\n    plt.figure(figsize=(15,6))\n    plt.bar(col,'price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","cb25f558":"for col in cat:\n    plt.figure(figsize=(15,6))\n    plt.bar(col,'price',data=df2,color='B')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","d21c4f48":"for col in num:\n    plt.figure(figsize=(15,6))\n    sns.lineplot(x=col,y='price',data=df2)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","f74de552":"import scipy.stats as st\nfor col in num:\n    plt.figure(figsize=(18,9))\n    st.probplot(df2[col],plot=plt)\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","bf4c113b":"for col in num:\n    plt.figure(figsize=(15,6))\n    sns.barplot(x=col,y='price',data=df2)\n    sns.pointplot(x=col,y='price',data=df2,color='Black')\n    plt.tight_layout()\n    plt.show()","b97de26b":"for col in cat:\n    plt.figure(figsize=(15,6))\n    sns.barplot(x=col,y='price',data=df2)\n    sns.pointplot(x=col,y='price',data=df2,color='Black')\n    plt.tight_layout()\n    plt.show()","5264795e":"for col in num:\n    plt.figure(figsize=(15,6))\n    sns.boxplot(x=col,y='price',data=df2)\n    sns.pointplot(x=col,y='price',data=df2,color='Black')\n    plt.tight_layout()\n    plt.show()","1023db92":"for col in cat:\n    plt.figure(figsize=(15,6))\n    sns.boxplot(x=col,y='price',data=df2)\n    sns.pointplot(x=col,y='price',data=df2,color='Black')\n    plt.tight_layout()\n    plt.show()","7bc714b4":"for col in cat:\n    plt.figure(figsize=(15,6))\n    sns.boxenplot(x=col,y='price',data=df2)\n    sns.pointplot(x=col,y='price',data=df2,color='Black')\n    plt.tight_layout()\n    plt.show()","05407975":"for col in cat:\n    plt.figure(figsize=(15,6))\n    sns.boxplot(x=col,y='price',data=df2)\n    #sns.pointplot(x=col,y='price',data=df2,color='Black')\n    sns.stripplot(x=col,y='price',data=df2,jitter=True,edgecolor='gray')\n    plt.tight_layout()\n    plt.show()","09680288":"for col in cat:\n    plt.figure(figsize=(15,6))\n    sns.boxenplot(x=col,y='price',data=df2)\n    sns.pointplot(x=col,y='price',data=df2,color='Black')\n    sns.stripplot(x=col,y='price',data=df2,jitter=True,edgecolor='gray')\n    plt.tight_layout()\n    plt.show()","af8c97e2":"for col in num:\n    plt.figure(figsize=(18,9))\n    plt.scatter(x=col,y='price',data=df2)\n    plt.tight_layout()\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.axhline(15,color='Black')\n    plt.axvline(50,color='Black')\n    plt.show()","00d0fc5a":"for col in num:\n    plt.figure(figsize=(18,9))\n    sns.kdeplot(data=df2[col])\n    plt.tight_layout()\n    plt.show()","9b148aa4":"for col in num:\n    plt.figure(figsize=(12,7))\n    plt.plot(df2[col].value_counts())\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","2ab503ab":"plt.style.use('dark_background')\nfor col in num:\n    plt.figure(figsize=(12,7))\n    df2.plot(x=col,y='price')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","c36e4820":"plt.style.use('ggplot')\nfor col in cat:\n    plt.figure(figsize=(12,7))\n    df2.plot(x=col,y='price')\n    plt.xlabel(col)\n    plt.ylabel('price')\n    plt.tight_layout()\n    plt.show()","e93e5ba6":"sns.pairplot(df2)\nplt.show()","a4368d98":"plt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\nsns.boxplot(df2.price)\nplt.subplot(1,2,2)\nsns.distplot(df2.price,bins=20)\nplt.show()","2492a4da":"q = df2.price.describe()\nprint(q)\nIQR    = q['75%'] - q['25%']\nUpper  = q['75%'] + 1.5 * IQR\nLower  = q['25%'] - 1.5 * IQR\nprint(\"the upper and lower outliers are {} and {}\".format(Upper,Lower))","186fd1d4":"rows =2\n\ncols = 2\n\nfig,ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,5))\n\ncol = df2[num].columns\n\nindex = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.distplot(df2[col[index]],ax=ax[i][j])\n        index = index + 1\n        \nplt.tight_layout()\n","85521e94":"rows = 2\ncols = 2\n\nfig,ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,5))\n\ncol = df2[num].columns\n\nindex = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.regplot(x=df2[col[index]],y=df2['price'],ax=ax[i][j])\n        index = index + 1\n        \nplt.tight_layout()","32b9c0cb":"df.head()","ee063be1":"def binary_mapping(x):\n    return x.map({'yes':1,'no':0})","82f32af4":"map = ['mainroad','guestroom','basement','hotwaterheating','airconditioning','prefarea']","778e67e3":"map","943c094f":"df[map] = df[map].apply(binary_mapping)","fccdecd1":"df.head()","f26e5732":"cat = ['furnishingstatus']","882a8584":"cat","a2b8d043":"df = pd.get_dummies(df,cat,drop_first=True)","22bfdce3":"df.head()","955f2c6a":"from sklearn.preprocessing import MinMaxScaler\nscalar = MinMaxScaler()\ndf_columns = df.columns\ndf = scalar.fit_transform(df)\ndf = pd.DataFrame(df)\ndf.columns = df_columns\ndf.head()","02a4fa73":"X = df.drop(['price'],axis=1)","7076032d":"y = df[['price']]","837d4c39":"X.head()","724bc92c":"y.head()","313e3518":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn import metrics\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport time\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import learning_curve\nimport statsmodels.api as sm\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.model_selection import KFold\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.feature_selection import RFE","115e040f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","1977256e":"cross_val_score(LinearRegression(),X_train,y_train).mean()","5497757f":"cross_val_score(RandomForestRegressor(n_estimators=100),X_train,y_train).mean()","5233a174":"cross_val_score(SVR(),X_train,y_train).mean()","c06681d5":"cross_val_score(GradientBoostingRegressor(),X_train,y_train).mean()","f2d3d67c":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","83b1795f":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train,y_train)\npred = rf.predict(X_test)\nr2_score(y_test,pred)","5f67aee0":"gb = GradientBoostingRegressor()\ngb.fit(X_train,y_train)\npred = gb.predict(X_test)\nr2_score(y_test,pred)","8ff75786":"svm = SVR()\nsvm.fit(X_train,y_train)\npred = svm.predict(X_test)\nr2_score(y_test,pred)","3471a6eb":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","ca58fd97":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","7c2d765e":"df.corr()","527e1b60":"plt.figure(figsize=(15,8))\nsns.heatmap(df.corr(),annot=True,cmap='Blues')\nplt.show()","f1be0f48":"rf.feature_importances_","687f75bf":"feature_importance = pd.Series(rf.feature_importances_,index=X_train.columns)\nfeature_importance.sort_values()\nfeature_importance.plot(kind='barh',figsize=(8,6))\nplt.show()","4f453fb0":"plt.figure(figsize=(7,8))\nfeatures = X_train.columns\nimportances = rf.feature_importances_\nindices = np.argsort(importances)\nplt.title('Feature Importances')\nplt.barh(range(len(indices)), importances[indices], color='Black', align='center')\nplt.yticks(range(len(indices)), [features[i] for i in indices])\nplt.xlabel('Relative Importance')\nplt.show()","d957d7c0":"fe = SelectFromModel(RandomForestRegressor(n_estimators=100))","459259e2":"fe.fit(X_train,y_train)","b8d51e6e":"fe.get_support()","5fcb5bdc":"a = X_train.columns[fe.get_support()]","b051c2c3":"a","330f55e9":"lr = LinearRegression()\nlr.fit(X_train[a],y_train)\npred = lr.predict(X_test[a])\nr2_score(y_test,pred)","f49e54ed":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train[a],y_train)\npred = rf.predict(X_test[a])\nr2_score(y_test,pred)","aea6dcc2":"gb = GradientBoostingRegressor()\ngb.fit(X_train[a],y_train)\npred = gb.predict(X_test[a])\nr2_score(y_test,pred)","a911be79":"svm = SVR()\nsvm.fit(X_train[a],y_train)\npred = svm.predict(X_test[a])\nr2_score(y_test,pred)","da832009":"def run_Linear(X_train, X_test, y_train, y_test):\n    clf = LinearRegression()\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","e7d2d77d":"def run_randomForest(X_train, X_test, y_train, y_test):\n    clf = RandomForestRegressor(n_estimators=100, random_state=100, n_jobs=-1)\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","4d1db780":"def run_Gradient(X_train, X_test, y_train, y_test):\n    clf = GradientBoostingRegressor(n_estimators=100, random_state=100)\n    clf.fit(X_train, y_train)\n    pred = clf.predict(X_test)\n    print('R2 Score: ', r2_score(y_test, pred))\n    print('MSE:',metrics.mean_squared_error(pred,y_test))\n    rms = np.sqrt(metrics.mean_squared_error(pred, y_test))\n    print('RMSE:',rms)","32db2006":"X_train.shape","50595f92":"for index in range(1,14):\n    fe = RFE(LinearRegression(), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_Linear(X_train_b, X_test_b, y_train, y_test)\n    print()","522c2974":"for index in range(1,14):\n    fe = RFE(RandomForestRegressor(n_estimators=100, random_state=100), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_randomForest(X_train_b, X_test_b, y_train, y_test)\n    print()","1e937204":"for index in range(1,14):\n    fe = RFE(GradientBoostingRegressor(random_state=100), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_Gradient(X_train_b, X_test_b, y_train, y_test)\n    print()","d60baa79":"fe = RFE(LinearRegression(), n_features_to_select = 12)\nfe.fit(X_train, y_train)\nX_train_b = fe.transform(X_train)\nX_test_b = fe.transform(X_test)\nprint('Selected Feature: ', 12)\nrun_randomForest(X_train_b, X_test_b, y_train, y_test)\nprint()","6e188737":"fe.get_support()","79451c25":"a = X_train.columns[fe.get_support()]","357b80d2":"a","26b330cd":"lr = LinearRegression()\nlr.fit(X_train[a],y_train)\npred = lr.predict(X_test[a])\nr2_score(y_test,pred)","7bbb92a4":"rf = RandomForestRegressor(n_estimators=100)\nrf.fit(X_train[a],y_train)\npred = rf.predict(X_test[a])\nr2_score(y_test,pred)","0b8f4163":"gb = GradientBoostingRegressor()\ngb.fit(X_train[a],y_train)\npred = gb.predict(X_test[a])\nr2_score(y_test,pred)","5d50c1cb":"svm = SVR()\nsvm.fit(X_train[a],y_train)\npred = svm.predict(X_test[a])\nr2_score(y_test,pred)","68d3dfb6":"X_train_sm = sm.add_constant(X_train[a])\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","9f5e026b":"lr = LinearRegression()\nrfe = RFE(lr, 8)             \nrfe = rfe.fit(X_train, y_train)\nprint(rfe.support_)          \nprint(rfe.ranking_) ","52eb9b39":"b=X_train.columns[rfe.get_support()]\nb","30e1943d":"lr = LinearRegression()\nlr.fit(X_train[b],y_train)\npred = lr.predict(X_test[b])\nr2_score(y_test,pred)","2e2c2cd8":"folds = KFold(n_splits = 5, shuffle = True, random_state = 100)\n\n\nhyper_params = [{'n_features_to_select': list(range(1, 14))}]\n\nlm = LinearRegression()\nlm.fit(X_train, y_train)\nrfe = RFE(lm)             \n\nmodel_cv = GridSearchCV(estimator = rfe, \n                        param_grid = hyper_params, \n                        scoring= 'r2', \n                        cv = folds, \n                        verbose = 1,\n                        return_train_score=True)      \n\nmodel_cv.fit(X_train, y_train) ","1b568aea":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results","e0348f30":"plt.figure(figsize=(16,6))\nplt.plot(cv_results[\"param_n_features_to_select\"], cv_results[\"mean_test_score\"])\nplt.plot(cv_results[\"param_n_features_to_select\"], cv_results[\"mean_train_score\"])\nplt.xlabel('number of features')\nplt.ylabel('r-squared')\nplt.title(\"Optimal Number of Features\")\nplt.legend(['test score', 'train score'], loc='upper left')\nplt.show()","3845d9c5":"lr = LinearRegression()\nrfe = RFE(lr, 10)           \nrfe = rfe.fit(X_train, y_train)\nprint(rfe.support_)          \nprint(rfe.ranking_) ","f7554a3b":"a = X_train.columns[fe.get_support()]","7ea1f8a3":"a","721f25a3":"lr = LinearRegression()\nlr.fit(X_train[a],y_train)\npred = lr.predict(X_test[a])\nr2_score(y_test,pred)","8c8671ca":"X_train_sm = sm.add_constant(X_train[a])\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","758a58aa":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","f2514594":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","00c26e51":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","3041266f":"X_train.drop('bedrooms',axis=1,inplace=True)\nX_test.drop('bedrooms',axis=1,inplace=True)","9fa539ad":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","50d8c540":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","9d2654e1":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","d9c408f9":"X_train.drop('furnishingstatus_semi-furnished',axis=1,inplace=True)\nX_test.drop('furnishingstatus_semi-furnished',axis=1,inplace=True)","e4398dc4":"lr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)","a29bc723":"X_train_sm = sm.add_constant(X_train)\nlr = sm.OLS(y_train,X_train_sm).fit()\nlr.summary()","17b68b91":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","c6b87d38":"for index in range(1,12):\n    fe = RFE(LinearRegression(), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_Linear(X_train_b, X_test_b, y_train, y_test)\n    print()","1354c3eb":"for index in range(1,12):\n    fe = RFE(RandomForestRegressor(n_estimators=100, random_state=100), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_randomForest(X_train_b, X_test_b, y_train, y_test)\n    print()","9a4491a6":"for index in range(1,12):\n    fe = RFE(GradientBoostingRegressor(random_state=100), n_features_to_select = index)\n    fe.fit(X_train, y_train)\n    X_train_b = fe.transform(X_train)\n    X_test_b = fe.transform(X_test)\n    print('Selected Feature: ', index)\n    run_Gradient(X_train_b, X_test_b, y_train, y_test)\n    print()","596ec4d3":"folds = KFold(n_splits = 5, shuffle = True, random_state = 100)\n\n\nhyper_params = [{'n_features_to_select': list(range(1, 12))}]\n\nlm = LinearRegression()\nlm.fit(X_train, y_train)\nrfe = RFE(lm)             \n\nmodel_cv = GridSearchCV(estimator = rfe, \n                        param_grid = hyper_params, \n                        scoring= 'r2', \n                        cv = folds, \n                        verbose = 1,\n                        return_train_score=True)      \n\nmodel_cv.fit(X_train, y_train) ","3f8ea0ff":"cv_results = pd.DataFrame(model_cv.cv_results_)\ncv_results","02f5f10c":"plt.figure(figsize=(16,6))\nplt.plot(cv_results[\"param_n_features_to_select\"], cv_results[\"mean_test_score\"])\nplt.plot(cv_results[\"param_n_features_to_select\"], cv_results[\"mean_train_score\"])\nplt.xlabel('number of features')\nplt.ylabel('r-squared')\nplt.title(\"Optimal Number of Features\")\nplt.legend(['test score', 'train score'], loc='upper left')\nplt.show()","3f7de25a":"rows = 3\ncols = 3\n\nfig,ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,5))\n\ncol = X_train.columns\n\nindex = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.regplot(x=df[col[index]],y=df['price'],ax=ax[i][j])\n        index = index + 1\n        \nplt.tight_layout()","03503544":"plt.style.use('default')\nlr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)\ntitle = \"Learning Curve (Linear Regression)\"\ncv = 5\nplot_learning_curve(lr, title, X_train, \n                    y_train, ylim=(0.1, 1.0), cv=cv, n_jobs=-1);","ff8d3922":"title = \"Learning Curve (Random Forest)\"\ncv = 5\nplot_learning_curve(rf, title, X_train, \n                    y_train, ylim=(0.1, 1.0), cv=cv, n_jobs=-1);","9dc7d594":"title = \"Learning Curve (Gradient Boosting)\"\ncv = 5\nplot_learning_curve(gb, title, X_train, \n                    y_train, ylim=(0.1, 1.0), cv=cv, n_jobs=-1);","a6993533":"title = \"Learning Curve (SVM)\"\ncv = 5\nplot_learning_curve(svm, title, X_train, \n                    y_train, ylim=(0.1, 1.0), cv=cv, n_jobs=-1)","b8d18269":"plt.figure(figsize=(10,5))\nplt.style.use('default')\nlr = LinearRegression()\nlr.fit(X_train,y_train)\npred = lr.predict(X_test)\nr2_score(y_test,pred)\nplt.scatter(y_test,pred)\nplt.show()","4e2c2750":"plt.figure(figsize=(10,5))\nsns.distplot(y_test-pred)\nplt.show()","290a239d":"plt.figure(figsize=(13,5))\nc = [i for i in range(1,165,1)]\nfig = plt.figure() \nplt.plot(c,y_test, color=\"blue\", linewidth=2.5, linestyle=\"-\") \nplt.plot(c,pred, color=\"red\",  linewidth=2.5, linestyle=\"-\") \nfig.suptitle('Actual and Predicted', fontsize=20)               \nplt.xlabel('Index', fontsize=18)                               \nplt.ylabel('Price', fontsize=16)\nplt.show()","1f4bd45c":"# Model Building ","bc84e2c6":"# EDA","1e9bd9eb":"# feature importance \/ engineering","904362c2":"# Learning Curve","972db361":"# Data","9f911293":"# Preprocessing"}}