{"cell_type":{"ab139c86":"code","249ed6c6":"code","35f09e45":"code","3e7352c8":"code","1b89896c":"code","ca0d9ffd":"code","f8766ddf":"code","a8888f04":"code","1e345607":"code","77d36773":"code","ac6adb39":"code","07f2437d":"code","aae4fe54":"code","03d90e3f":"code","3763e1aa":"code","e67813d2":"code","d93cf287":"code","ea4910be":"code","214f99e4":"code","7e148b29":"code","2385c0df":"code","d10e5f27":"code","7b806776":"code","a911c283":"code","5c5b522d":"code","cb7e99f8":"code","5538ed15":"code","972678aa":"code","5f1a8eff":"code","f1546e33":"code","f6faee40":"code","21bea582":"code","a0cd8801":"code","d5df5a9f":"code","01dc6009":"code","7375163c":"code","00eb4816":"code","0166c29f":"code","4678dbde":"code","7af061a8":"code","e9d0e2b2":"code","003f952f":"code","b491ec82":"code","3c5d4733":"code","27ec3e69":"code","5b6a8847":"code","988253fa":"code","e11f15be":"code","f10de80d":"code","56bd19df":"code","5ce7d6d8":"code","ec7a77ff":"code","3f5b78f7":"code","761e5c61":"code","a4058a6a":"code","cd12ca92":"code","2c8a02f3":"code","cc80d87d":"code","c7dc4aa5":"code","4d3b8aa9":"code","40bf76cf":"code","3f412feb":"code","54f04701":"code","3ea65754":"code","fe93d2e8":"code","a71ecad7":"code","702126af":"code","618330c2":"code","3b4d48c9":"code","78e70cd2":"code","f2d044e9":"code","94a64e6e":"code","9828e310":"code","fd1b74e0":"code","59dd1b70":"code","95df2187":"code","262b115a":"code","65cb096b":"code","3c82f48a":"code","138790e3":"code","6e49eb86":"code","4b16ecea":"code","a8e1439a":"code","0ba5fe1c":"code","a84cd9a0":"code","39ae821f":"code","7706d54e":"code","56dd25e7":"code","a6b8e08e":"code","a16b108a":"code","c5b5dcfd":"code","d56b757c":"code","46775f15":"code","475190ec":"code","386049d3":"code","b3dbdbdd":"code","fec74ccf":"code","e8f3e284":"code","f5360ae4":"code","d15e0b7e":"code","53f72f1a":"code","e19c232a":"code","e82f2cbb":"code","98af9b9b":"code","13659074":"code","dd910257":"code","0d0b1d70":"code","30310d9d":"code","2d572dbe":"code","2ba0f678":"code","138a0a51":"code","15abb536":"code","32f5a405":"code","0d6ce6b7":"code","328b950b":"code","3f8190a5":"code","55996506":"code","03cd1ab3":"code","c0cf4bd2":"code","997289c8":"code","4c1ea184":"code","30a5d0f1":"code","102de479":"code","01b254b1":"code","3d45e706":"code","69887a3e":"markdown","31a60ca3":"markdown","8e90d799":"markdown"},"source":{"ab139c86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","249ed6c6":"import seaborn as sns\nfrom scipy import stats\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.preprocessing import StandardScaler","35f09e45":"import keras\nfrom keras.engine.input_layer import Input\nfrom keras.layers import Dense, Activation, Dropout, Add, PReLU, LeakyReLU\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.optimizers import SGD, Adadelta, Adagrad, Adam, RMSprop, Adamax, Nadam\nfrom keras.models import Model\nfrom keras.regularizers import l1, l2, l1_l2\nfrom keras.callbacks import EarlyStopping","3e7352c8":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\ndf_train.head()","1b89896c":"df_train.describe()","ca0d9ffd":"df_train_pp = pd.DataFrame(df_train[\"Id\"], columns = [\"Id\"])\ndf_test_pp = pd.DataFrame(df_test[\"Id\"], columns = [\"Id\"])","f8766ddf":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"MSSubClass\"]], columns = [\"MSSubClass\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"MSSubClass\"]], columns = [\"MSSubClass\"]).corr()[\"SalePrice\"])","a8888f04":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"MSSubClass\"]], columns = [\"MSSubClass\"])[[\"MSSubClass_30\", \"MSSubClass_60\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"MSSubClass\"]], columns = [\"MSSubClass\"])[[\"MSSubClass_30\", \"MSSubClass_60\"]]], axis = 1)","1e345607":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"MSZoning\"]], columns = [\"MSZoning\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"MSZoning\"]], columns = [\"MSZoning\"]).corr()[\"SalePrice\"])","77d36773":"sns.heatmap(pd.concat([\n    df_train[[\"SalePrice\"]],\n    pd.get_dummies(df_train[[\"MSZoning\"]], columns = [\"MSZoning\"]) + np.expand_dims(pd.get_dummies(df_train[[\"MSZoning\"]], columns = [\"MSZoning\"])[\"MSZoning_C (all)\"].values, axis = -1),\n], axis = 1).corr())\nprint(pd.concat([\n    df_train[[\"SalePrice\"]],\n    pd.get_dummies(df_train[[\"MSZoning\"]], columns = [\"MSZoning\"]) + np.expand_dims(pd.get_dummies(df_train[[\"MSZoning\"]], columns = [\"MSZoning\"])[\"MSZoning_C (all)\"].values, axis = -1),\n], axis = 1).corr()[\"SalePrice\"])","ac6adb39":"df_train_pp = pd.concat([df_train_pp, (pd.get_dummies(df_train[[\"MSZoning\"]], columns = [\"MSZoning\"]) + np.expand_dims(pd.get_dummies(df_train[[\"MSZoning\"]], columns = [\"MSZoning\"])[\"MSZoning_C (all)\"].values, axis = -1))[[\"MSZoning_RL\", \"MSZoning_RM\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, (pd.get_dummies(df_test[[\"MSZoning\"]], columns = [\"MSZoning\"]) + np.expand_dims(pd.get_dummies(df_test[[\"MSZoning\"]], columns = [\"MSZoning\"])[\"MSZoning_C (all)\"].values, axis = -1))[[\"MSZoning_RL\", \"MSZoning_RM\"]]], axis = 1)","07f2437d":"sns.heatmap(df_train[[\"SalePrice\", \"LotFrontage\", \"LotArea\"]].corr())\nprint(df_train[[\"SalePrice\", \"LotFrontage\", \"LotArea\"]].corr()[\"SalePrice\"])","aae4fe54":"'''\ndf_temp = df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean())\ndef convert_LotFrontage(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean()).map(convert_LotFrontage)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"LotFrontage\"].fillna(df_test[\"LotFrontage\"].mean()).map(convert_LotFrontage)], axis = 1)\n'''","03d90e3f":"print(np.expand_dims(df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean()).values, axis = 1))","3763e1aa":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean()).values, axis = 1)), columns = [\"LotFrontage\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"LotFrontage\"].fillna(df_test[\"LotFrontage\"].mean()).values, axis = 1)), columns = [\"LotFrontage\"])], axis = 1)","e67813d2":"'''\ndf_temp = df_train[\"LotArea\"].fillna(df_train[\"LotArea\"].mean())\ndef convert_LotArea(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"LotArea\"].fillna(df_train[\"LotArea\"].mean()).map(convert_LotArea)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"LotArea\"].fillna(df_test[\"LotArea\"].mean()).map(convert_LotArea)], axis = 1)\n'''","d93cf287":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"LotArea\"].fillna(df_train[\"LotArea\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"LotArea\"].fillna(df_train[\"LotArea\"].mean()).values, axis = 1)), columns = [\"LotArea\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"LotArea\"].fillna(df_test[\"LotArea\"].mean()).values, axis = 1)), columns = [\"LotArea\"])], axis = 1)","ea4910be":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"Street\", \"Alley\"]], columns = [\"Street\", \"Alley\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"Street\", \"Alley\"]], columns = [\"Street\", \"Alley\"]).corr()[\"SalePrice\"])","214f99e4":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"LotShape\"]], columns = [\"LotShape\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"LotShape\"]], columns = [\"LotShape\"]).corr()[\"SalePrice\"])","7e148b29":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"LotShape\"]], columns = [\"LotShape\"])[[\"LotShape_IR1\", \"LotShape_Reg\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"LotShape\"]], columns = [\"LotShape\"])[[\"LotShape_IR1\", \"LotShape_Reg\"]]], axis = 1)","2385c0df":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"LandContour\"]], columns = [\"LandContour\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"LandContour\"]], columns = [\"LandContour\"]).corr()[\"SalePrice\"])","d10e5f27":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"Utilities\"]], columns = [\"Utilities\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"Utilities\"]], columns = [\"Utilities\"]).corr()[\"SalePrice\"])","7b806776":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"LotConfig\"]], columns = [\"LotConfig\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"LotConfig\"]], columns = [\"LotConfig\"]).corr()[\"SalePrice\"])","a911c283":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"LandSlope\"]], columns = [\"LandSlope\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"LandSlope\"]], columns = [\"LandSlope\"]).corr()[\"SalePrice\"])","5c5b522d":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"Neighborhood\"]], columns = [\"Neighborhood\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"Neighborhood\"]], columns = [\"Neighborhood\"]).corr()[\"SalePrice\"])","cb7e99f8":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"Neighborhood\"]], columns = [\"Neighborhood\"])[[\"Neighborhood_NoRidge\", \"Neighborhood_NridgHt\", \"Neighborhood_StoneBr\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"Neighborhood\"]], columns = [\"Neighborhood\"])[[\"Neighborhood_NoRidge\", \"Neighborhood_NridgHt\", \"Neighborhood_StoneBr\"]]], axis = 1)","5538ed15":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"Condition1\", \"Condition2\"]], columns = [\"Condition1\", \"Condition2\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"Condition1\", \"Condition2\"]], columns = [\"Condition1\", \"Condition2\"]).corr()[\"SalePrice\"])","972678aa":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"BldgType\"]], columns = [\"BldgType\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"BldgType\"]], columns = [\"BldgType\"]).corr()[\"SalePrice\"])","5f1a8eff":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"HouseStyle\"]], columns = [\"HouseStyle\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"HouseStyle\"]], columns = [\"HouseStyle\"]).corr()[\"SalePrice\"])","f1546e33":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"HouseStyle\"]], columns = [\"HouseStyle\"])[[\"HouseStyle_2Story\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"HouseStyle\"]], columns = [\"HouseStyle\"])[[\"HouseStyle_2Story\"]]], axis = 1)","f6faee40":"sns.heatmap(df_train[[\"SalePrice\", \"OverallQual\", \"OverallCond\"]].corr())\nprint(df_train[[\"SalePrice\", \"OverallQual\", \"OverallCond\"]].corr()[\"SalePrice\"])","21bea582":"'''\ndf_temp = df_train[\"OverallQual\"].fillna(df_train[\"OverallQual\"].mean())\ndef convert_OverallQual(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"OverallQual\"].fillna(df_train[\"OverallQual\"].mean()).map(convert_OverallQual)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"OverallQual\"].fillna(df_test[\"OverallQual\"].mean()).map(convert_OverallQual)], axis = 1)\n'''","a0cd8801":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"OverallQual\"].fillna(df_train[\"OverallQual\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"OverallQual\"].fillna(df_train[\"OverallQual\"].mean()).values, axis = 1)), columns = [\"OverallQual\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"OverallQual\"].fillna(df_test[\"OverallQual\"].mean()).values, axis = 1)), columns = [\"OverallQual\"])], axis = 1)","d5df5a9f":"sns.heatmap(df_train[[\"SalePrice\", \"YearBuilt\", \"YearRemodAdd\"]].corr())\nprint(df_train[[\"SalePrice\", \"YearBuilt\", \"YearRemodAdd\"]].corr()[\"SalePrice\"])","01dc6009":"'''\ndf_temp = df_train[\"YearBuilt\"].fillna(df_train[\"YearBuilt\"].mean())\ndef convert_YearBuilt(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"YearBuilt\"].fillna(df_train[\"YearBuilt\"].mean()).map(convert_YearBuilt)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"YearBuilt\"].fillna(df_test[\"YearBuilt\"].mean()).map(convert_YearBuilt)], axis = 1)\n'''","7375163c":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"YearBuilt\"].fillna(df_train[\"YearBuilt\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"YearBuilt\"].fillna(df_train[\"YearBuilt\"].mean()).values, axis = 1)), columns = [\"YearBuilt\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"YearBuilt\"].fillna(df_test[\"YearBuilt\"].mean()).values, axis = 1)), columns = [\"YearBuilt\"])], axis = 1)","00eb4816":"'''\ndf_temp = df_train[\"YearRemodAdd\"].fillna(df_train[\"YearRemodAdd\"].mean())\ndef convert_YearRemodAdd(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"YearRemodAdd\"].fillna(df_train[\"YearRemodAdd\"].mean()).map(convert_YearRemodAdd)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"YearRemodAdd\"].fillna(df_test[\"YearRemodAdd\"].mean()).map(convert_YearRemodAdd)], axis = 1)\n'''","0166c29f":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"YearRemodAdd\"].fillna(df_train[\"YearRemodAdd\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"YearRemodAdd\"].fillna(df_train[\"YearRemodAdd\"].mean()).values, axis = 1)), columns = [\"YearRemodAdd\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"YearRemodAdd\"].fillna(df_test[\"YearRemodAdd\"].mean()).values, axis = 1)), columns = [\"YearRemodAdd\"])], axis = 1)","4678dbde":"sns.heatmap(pd.concat([df_train[[\"SalePrice\"]], df_train[[\"YearBuilt\", \"YearRemodAdd\"]].max(axis = 1)], axis = 1).corr())\nprint(pd.concat([df_train[[\"SalePrice\"]], df_train[[\"YearBuilt\", \"YearRemodAdd\"]].max(axis = 1)], axis = 1).corr()[\"SalePrice\"])","7af061a8":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"RoofStyle\", \"RoofMatl\"]], columns = [\"RoofStyle\", \"RoofMatl\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"RoofStyle\", \"RoofMatl\"]], columns = [\"RoofStyle\", \"RoofMatl\"]).corr()[\"SalePrice\"])","e9d0e2b2":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"RoofStyle\"]], columns = [\"RoofStyle\"])[[\"RoofStyle_Gable\", \"RoofStyle_Hip\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"RoofStyle\"]], columns = [\"RoofStyle\"])[[\"RoofStyle_Gable\", \"RoofStyle_Hip\"]]], axis = 1)","003f952f":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"Exterior1st\", \"Exterior2nd\"]], columns = [\"Exterior1st\", \"Exterior2nd\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"Exterior1st\", \"Exterior2nd\"]], columns = [\"Exterior1st\", \"Exterior2nd\"]).corr()[\"SalePrice\"])","b491ec82":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"Exterior1st\", \"Exterior2nd\"]], columns = [\"Exterior1st\", \"Exterior2nd\"])[[\"Exterior1st_VinylSd\", \"Exterior2nd_VinylSd\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"Exterior1st\", \"Exterior2nd\"]], columns = [\"Exterior1st\", \"Exterior2nd\"])[[\"Exterior1st_VinylSd\", \"Exterior2nd_VinylSd\"]]], axis = 1)","3c5d4733":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"MasVnrType\", \"MasVnrArea\"]], columns = [\"MasVnrType\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"MasVnrType\", \"MasVnrArea\"]], columns = [\"MasVnrType\"]).corr()[\"SalePrice\"])","27ec3e69":"'''\ndf_temp = df_train[\"MasVnrArea\"].fillna(df_train[\"MasVnrArea\"].mean())\ndef convert_MasVnrArea(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"MasVnrArea\"].fillna(df_train[\"MasVnrArea\"].mean()).map(convert_MasVnrArea)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"MasVnrArea\"].fillna(df_test[\"MasVnrArea\"].mean()).map(convert_MasVnrArea)], axis = 1)\n'''","5b6a8847":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"MasVnrArea\"].fillna(df_train[\"MasVnrArea\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"MasVnrArea\"].fillna(df_train[\"MasVnrArea\"].mean()).values, axis = 1)), columns = [\"MasVnrArea\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"MasVnrArea\"].fillna(df_test[\"MasVnrArea\"].mean()).values, axis = 1)), columns = [\"MasVnrArea\"])], axis = 1)","988253fa":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"MasVnrType\"]], columns = [\"MasVnrType\"])[[\"MasVnrType_None\", \"MasVnrType_Stone\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"MasVnrType\"]], columns = [\"MasVnrType\"])[[\"MasVnrType_None\", \"MasVnrType_Stone\"]]], axis = 1)","e11f15be":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"ExterQual\", \"ExterCond\"]], columns = [\"ExterQual\", \"ExterCond\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"ExterQual\", \"ExterCond\"]], columns = [\"ExterQual\", \"ExterCond\"]).corr()[\"SalePrice\"])","f10de80d":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"ExterQual\"]], columns = [\"ExterQual\"])[[\"ExterQual_Ex\", \"ExterQual_Gd\", \"ExterQual_TA\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"ExterQual\"]], columns = [\"ExterQual\"])[[\"ExterQual_Ex\", \"ExterQual_Gd\", \"ExterQual_TA\"]]], axis = 1)","56bd19df":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"Foundation\"]], columns = [\"Foundation\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"Foundation\"]], columns = [\"Foundation\"]).corr()[\"SalePrice\"])","5ce7d6d8":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"Foundation\"]], columns = [\"Foundation\"])[[\"Foundation_BrkTil\", \"Foundation_CBlock\", \"Foundation_PConc\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"Foundation\"]], columns = [\"Foundation\"])[[\"Foundation_BrkTil\", \"Foundation_CBlock\", \"Foundation_PConc\"]]], axis = 1)","ec7a77ff":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\"]], columns = [\"BsmtQual\", \"BsmtCond\", \"BsmtExposure\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\"]], columns = [\"BsmtQual\", \"BsmtCond\", \"BsmtExposure\"]).corr()[\"SalePrice\"])","3f5b78f7":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"BsmtQual\", \"BsmtExposure\"]], columns = [\"BsmtQual\", \"BsmtExposure\"])[[\"BsmtQual_Ex\", \"BsmtQual_Gd\", \"BsmtQual_TA\", \"BsmtExposure_Gd\", \"BsmtExposure_No\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"BsmtQual\", \"BsmtExposure\"]], columns = [\"BsmtQual\", \"BsmtExposure\"])[[\"BsmtQual_Ex\", \"BsmtQual_Gd\", \"BsmtQual_TA\", \"BsmtExposure_Gd\", \"BsmtExposure_No\"]]], axis = 1)","761e5c61":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"BsmtFinType1\", \"BsmtFinSF1\", \"BsmtFinType2\", \"BsmtFinSF2\", \"BsmtUnfSF\", \"TotalBsmtSF\"]], columns = [\"BsmtFinType1\", \"BsmtFinType2\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"BsmtFinType1\", \"BsmtFinSF1\", \"BsmtFinType2\", \"BsmtFinSF2\", \"BsmtUnfSF\", \"TotalBsmtSF\"]], columns = [\"BsmtFinType1\", \"BsmtFinType2\"]).corr()[\"SalePrice\"])","a4058a6a":"'''\ndf_temp = df_train[\"BsmtFinSF1\"].fillna(df_train[\"BsmtFinSF1\"].mean())\ndef convert_BsmtFinSF1(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"BsmtFinSF1\"].fillna(df_train[\"BsmtFinSF1\"].mean()).map(convert_BsmtFinSF1)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"BsmtFinSF1\"].fillna(df_test[\"BsmtFinSF1\"].mean()).map(convert_BsmtFinSF1)], axis = 1)\n'''","cd12ca92":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"BsmtFinSF1\"].fillna(df_train[\"BsmtFinSF1\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"BsmtFinSF1\"].fillna(df_train[\"BsmtFinSF1\"].mean()).values, axis = 1)), columns = [\"BsmtFinSF1\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"BsmtFinSF1\"].fillna(df_test[\"BsmtFinSF1\"].mean()).values, axis = 1)), columns = [\"BsmtFinSF1\"])], axis = 1)","2c8a02f3":"'''\ndf_temp = df_train[\"BsmtUnfSF\"].fillna(df_train[\"BsmtUnfSF\"].mean())\ndef convert_BsmtUnfSF(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"BsmtUnfSF\"].fillna(df_train[\"BsmtUnfSF\"].mean()).map(convert_BsmtUnfSF)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"BsmtUnfSF\"].fillna(df_test[\"BsmtUnfSF\"].mean()).map(convert_BsmtUnfSF)], axis = 1)\n'''","cc80d87d":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"BsmtUnfSF\"].fillna(df_train[\"BsmtUnfSF\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"BsmtUnfSF\"].fillna(df_train[\"BsmtUnfSF\"].mean()).values, axis = 1)), columns = [\"BsmtUnfSF\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"BsmtUnfSF\"].fillna(df_test[\"BsmtUnfSF\"].mean()).values, axis = 1)), columns = [\"BsmtUnfSF\"])], axis = 1)","c7dc4aa5":"'''\ndf_temp = df_train[\"TotalBsmtSF\"].fillna(df_train[\"TotalBsmtSF\"].mean())\ndef convert_TotalBsmtSF(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"TotalBsmtSF\"].fillna(df_train[\"TotalBsmtSF\"].mean()).map(convert_TotalBsmtSF)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"TotalBsmtSF\"].fillna(df_test[\"TotalBsmtSF\"].mean()).map(convert_TotalBsmtSF)], axis = 1)\n'''","4d3b8aa9":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"TotalBsmtSF\"].fillna(df_train[\"TotalBsmtSF\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"TotalBsmtSF\"].fillna(df_train[\"TotalBsmtSF\"].mean()).values, axis = 1)), columns = [\"TotalBsmtSF\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"TotalBsmtSF\"].fillna(df_test[\"TotalBsmtSF\"].mean()).values, axis = 1)), columns = [\"TotalBsmtSF\"])], axis = 1)","40bf76cf":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"BsmtFinType1\"]], columns = [\"BsmtFinType1\"])[[\"BsmtFinType1_GLQ\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"BsmtFinType1\"]], columns = [\"BsmtFinType1\"])[[\"BsmtFinType1_GLQ\"]]], axis = 1)","3f412feb":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"Heating\", \"HeatingQC\"]], columns = [\"Heating\", \"HeatingQC\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"Heating\", \"HeatingQC\"]], columns = [\"Heating\", \"HeatingQC\"]).corr()[\"SalePrice\"])","54f04701":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"HeatingQC\"]], columns = [\"HeatingQC\"])[[\"HeatingQC_Ex\", \"HeatingQC_TA\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"HeatingQC\"]], columns = [\"HeatingQC\"])[[\"HeatingQC_Ex\", \"HeatingQC_TA\"]]], axis = 1)","3ea65754":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"CentralAir\"]], columns = [\"CentralAir\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"CentralAir\"]], columns = [\"CentralAir\"]).corr()[\"SalePrice\"])","fe93d2e8":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"CentralAir\"]], columns = [\"CentralAir\"])[[\"CentralAir_Y\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"CentralAir\"]], columns = [\"CentralAir\"])[[\"CentralAir_Y\"]]], axis = 1)","a71ecad7":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"Electrical\"]], columns = [\"Electrical\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"Electrical\"]], columns = [\"Electrical\"]).corr()[\"SalePrice\"])","702126af":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"Electrical\"]], columns = [\"Electrical\"])[[\"Electrical_SBrkr\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"Electrical\"]], columns = [\"Electrical\"])[[\"Electrical_SBrkr\"]]], axis = 1)","618330c2":"sns.heatmap(df_train[[\"SalePrice\", \"1stFlrSF\", \"2ndFlrSF\"]].corr())\nprint(df_train[[\"SalePrice\", \"1stFlrSF\", \"2ndFlrSF\"]].corr()[\"SalePrice\"])","3b4d48c9":"'''\ndf_temp = df_train[\"1stFlrSF\"].fillna(df_train[\"1stFlrSF\"].mean())\ndef convert_1stFlrSF(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"1stFlrSF\"].fillna(df_train[\"1stFlrSF\"].mean()).map(convert_1stFlrSF)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"1stFlrSF\"].fillna(df_test[\"1stFlrSF\"].mean()).map(convert_1stFlrSF)], axis = 1)\n'''","78e70cd2":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"1stFlrSF\"].fillna(df_train[\"1stFlrSF\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"1stFlrSF\"].fillna(df_train[\"1stFlrSF\"].mean()).values, axis = 1)), columns = [\"1stFlrSF\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"1stFlrSF\"].fillna(df_test[\"1stFlrSF\"].mean()).values, axis = 1)), columns = [\"1stFlrSF\"])], axis = 1)","f2d044e9":"'''\ndf_temp = df_train[\"2ndFlrSF\"].fillna(df_train[\"2ndFlrSF\"].mean())\ndef convert_2ndFlrSF(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"2ndFlrSF\"].fillna(df_train[\"2ndFlrSF\"].mean()).map(convert_2ndFlrSF)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"2ndFlrSF\"].fillna(df_test[\"2ndFlrSF\"].mean()).map(convert_2ndFlrSF)], axis = 1)\n'''","94a64e6e":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"2ndFlrSF\"].fillna(df_train[\"2ndFlrSF\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"2ndFlrSF\"].fillna(df_train[\"2ndFlrSF\"].mean()).values, axis = 1)), columns = [\"2ndFlrSF\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"2ndFlrSF\"].fillna(df_test[\"2ndFlrSF\"].mean()).values, axis = 1)), columns = [\"2ndFlrSF\"])], axis = 1)","9828e310":"sns.heatmap(df_train[[\"SalePrice\", \"LowQualFinSF\"]].corr())\nprint(df_train[[\"SalePrice\", \"LowQualFinSF\"]].corr()[\"SalePrice\"])","fd1b74e0":"sns.heatmap(df_train[[\"SalePrice\", \"GrLivArea\"]].corr())\nprint(df_train[[\"SalePrice\", \"GrLivArea\"]].corr()[\"SalePrice\"])","59dd1b70":"'''\ndf_temp = df_train[\"GrLivArea\"].fillna(df_train[\"GrLivArea\"].mean())\ndef convert_GrLivArea(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"GrLivArea\"].fillna(df_train[\"GrLivArea\"].mean()).map(convert_GrLivArea)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"GrLivArea\"].fillna(df_test[\"GrLivArea\"].mean()).map(convert_GrLivArea)], axis = 1)\n'''","95df2187":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"GrLivArea\"].fillna(df_train[\"GrLivArea\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"GrLivArea\"].fillna(df_train[\"GrLivArea\"].mean()).values, axis = 1)), columns = [\"GrLivArea\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"GrLivArea\"].fillna(df_test[\"GrLivArea\"].mean()).values, axis = 1)), columns = [\"GrLivArea\"])], axis = 1)","262b115a":"sns.heatmap(df_train[[\"SalePrice\", \"BsmtFullBath\", \"BsmtHalfBath\", \"FullBath\", \"HalfBath\"]].corr())\nprint(df_train[[\"SalePrice\", \"BsmtFullBath\", \"BsmtHalfBath\", \"FullBath\", \"HalfBath\"]].corr()[\"SalePrice\"])","65cb096b":"'''\ndf_temp = df_train[\"BsmtFullBath\"].fillna(df_train[\"BsmtFullBath\"].mean())\ndef convert_BsmtFullBath(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"BsmtFullBath\"].fillna(df_train[\"BsmtFullBath\"].mean()).map(convert_BsmtFullBath)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"BsmtFullBath\"].fillna(df_test[\"BsmtFullBath\"].mean()).map(convert_BsmtFullBath)], axis = 1)\n'''","3c82f48a":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"BsmtFullBath\"].fillna(df_train[\"BsmtFullBath\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"BsmtFullBath\"].fillna(df_train[\"BsmtFullBath\"].mean()).values, axis = 1)), columns = [\"BsmtFullBath\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"BsmtFullBath\"].fillna(df_test[\"BsmtFullBath\"].mean()).values, axis = 1)), columns = [\"BsmtFullBath\"])], axis = 1)","138790e3":"'''\ndf_temp = df_train[\"FullBath\"].fillna(df_train[\"FullBath\"].mean())\ndef convert_FullBath(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"FullBath\"].fillna(df_train[\"FullBath\"].mean()).map(convert_FullBath)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"FullBath\"].fillna(df_test[\"FullBath\"].mean()).map(convert_FullBath)], axis = 1)\n'''","6e49eb86":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"FullBath\"].fillna(df_train[\"FullBath\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"FullBath\"].fillna(df_train[\"FullBath\"].mean()).values, axis = 1)), columns = [\"FullBath\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"FullBath\"].fillna(df_test[\"FullBath\"].mean()).values, axis = 1)), columns = [\"FullBath\"])], axis = 1)","4b16ecea":"'''\ndf_temp = df_train[\"HalfBath\"].fillna(df_train[\"HalfBath\"].mean())\ndef convert_HalfBath(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"HalfBath\"].fillna(df_train[\"HalfBath\"].mean()).map(convert_HalfBath)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"HalfBath\"].fillna(df_test[\"HalfBath\"].mean()).map(convert_HalfBath)], axis = 1)\n'''","a8e1439a":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"HalfBath\"].fillna(df_train[\"HalfBath\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"HalfBath\"].fillna(df_train[\"HalfBath\"].mean()).values, axis = 1)), columns = [\"HalfBath\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"HalfBath\"].fillna(df_test[\"HalfBath\"].mean()).values, axis = 1)), columns = [\"HalfBath\"])], axis = 1)","0ba5fe1c":"sns.heatmap(df_train[[\"SalePrice\", \"BedroomAbvGr\"]].corr())\nprint(df_train[[\"SalePrice\", \"BedroomAbvGr\"]].corr()[\"SalePrice\"])","a84cd9a0":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"KitchenAbvGr\", \"KitchenQual\"]], columns = [\"KitchenQual\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"KitchenAbvGr\", \"KitchenQual\"]], columns = [\"KitchenQual\"]).corr()[\"SalePrice\"])","39ae821f":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"KitchenQual\"]], columns = [\"KitchenQual\"])[[\"KitchenQual_Ex\", \"KitchenQual_Gd\", \"KitchenQual_TA\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"KitchenQual\"]], columns = [\"KitchenQual\"])[[\"KitchenQual_Ex\", \"KitchenQual_Gd\", \"KitchenQual_TA\"]]], axis = 1)","7706d54e":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"Functional\"]], columns = [\"Functional\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"Functional\"]], columns = [\"Functional\"]).corr()[\"SalePrice\"])","56dd25e7":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"Fireplaces\", \"FireplaceQu\"]], columns = [\"FireplaceQu\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"Fireplaces\", \"FireplaceQu\"]], columns = [\"FireplaceQu\"]).corr()[\"SalePrice\"])","a6b8e08e":"'''\ndf_temp = df_train[\"Fireplaces\"].fillna(df_train[\"Fireplaces\"].mean())\ndef convert_Fireplaces(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"Fireplaces\"].fillna(df_train[\"Fireplaces\"].mean()).map(convert_Fireplaces)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"Fireplaces\"].fillna(df_test[\"Fireplaces\"].mean()).map(convert_Fireplaces)], axis = 1)\n'''","a16b108a":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"Fireplaces\"].fillna(df_train[\"Fireplaces\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"Fireplaces\"].fillna(df_train[\"Fireplaces\"].mean()).values, axis = 1)), columns = [\"Fireplaces\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"Fireplaces\"].fillna(df_test[\"Fireplaces\"].mean()).values, axis = 1)), columns = [\"Fireplaces\"])], axis = 1)","c5b5dcfd":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"FireplaceQu\"]], columns = [\"FireplaceQu\"])[[\"FireplaceQu_Ex\", \"FireplaceQu_Gd\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"FireplaceQu\"]], columns = [\"FireplaceQu\"])[[\"FireplaceQu_Ex\", \"FireplaceQu_Gd\"]]], axis = 1)","d56b757c":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"GarageType\", \"GarageYrBlt\", \"GarageFinish\", \"GarageCars\", \"GarageArea\", \"GarageQual\", \"GarageCond\"]], columns = [\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"GarageType\", \"GarageYrBlt\", \"GarageFinish\", \"GarageCars\", \"GarageArea\", \"GarageQual\", \"GarageCond\"]], columns = [\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\"]).corr()[\"SalePrice\"])","46775f15":"'''\ndf_temp = df_train[\"GarageYrBlt\"].fillna(df_train[\"GarageYrBlt\"].mean())\ndef convert_GarageYrBlt(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"GarageYrBlt\"].fillna(df_train[\"GarageYrBlt\"].mean()).map(convert_GarageYrBlt)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"GarageYrBlt\"].fillna(df_test[\"GarageYrBlt\"].mean()).map(convert_GarageYrBlt)], axis = 1)\n'''","475190ec":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"GarageYrBlt\"].fillna(df_train[\"GarageYrBlt\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"GarageYrBlt\"].fillna(df_train[\"GarageYrBlt\"].mean()).values, axis = 1)), columns = [\"GarageYrBlt\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"GarageYrBlt\"].fillna(df_test[\"GarageYrBlt\"].mean()).values, axis = 1)), columns = [\"GarageYrBlt\"])], axis = 1)","386049d3":"'''\ndf_temp = df_train[\"GarageCars\"].fillna(df_train[\"GarageCars\"].mean())\ndef convert_GarageCars(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"GarageCars\"].fillna(df_train[\"GarageCars\"].mean()).map(convert_GarageCars)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"GarageCars\"].fillna(df_test[\"GarageCars\"].mean()).map(convert_GarageCars)], axis = 1)\n'''","b3dbdbdd":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"GarageCars\"].fillna(df_train[\"GarageCars\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"GarageCars\"].fillna(df_train[\"GarageCars\"].mean()).values, axis = 1)), columns = [\"GarageCars\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"GarageCars\"].fillna(df_test[\"GarageCars\"].mean()).values, axis = 1)), columns = [\"GarageCars\"])], axis = 1)","fec74ccf":"'''\ndf_temp = df_train[\"GarageArea\"].fillna(df_train[\"GarageArea\"].mean())\ndef convert_GarageArea(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"GarageArea\"].fillna(df_train[\"GarageArea\"].mean()).map(convert_GarageArea)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"GarageArea\"].fillna(df_test[\"GarageArea\"].mean()).map(convert_GarageArea)], axis = 1)\n'''","e8f3e284":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"GarageArea\"].fillna(df_train[\"GarageArea\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"GarageArea\"].fillna(df_train[\"GarageArea\"].mean()).values, axis = 1)), columns = [\"GarageArea\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"GarageArea\"].fillna(df_test[\"GarageArea\"].mean()).values, axis = 1)), columns = [\"GarageArea\"])], axis = 1)","f5360ae4":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\"]], columns = [\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\"])[[\"GarageType_Attchd\", \"GarageType_BuiltIn\", \"GarageType_Detchd\", \"GarageFinish_Fin\", \"GarageFinish_Unf\", \"GarageQual_TA\", \"GarageCond_TA\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\"]], columns = [\"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\"])[[\"GarageType_Attchd\", \"GarageType_BuiltIn\", \"GarageType_Detchd\", \"GarageFinish_Fin\", \"GarageFinish_Unf\", \"GarageQual_TA\", \"GarageCond_TA\"]]], axis = 1)","d15e0b7e":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"PavedDrive\"]], columns = [\"PavedDrive\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"PavedDrive\"]], columns = [\"PavedDrive\"]).corr()[\"SalePrice\"])","53f72f1a":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"PavedDrive\"]], columns = [\"PavedDrive\"])[[\"PavedDrive_N\", \"PavedDrive_Y\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"PavedDrive\"]], columns = [\"PavedDrive\"])[[\"PavedDrive_N\", \"PavedDrive_Y\"]]], axis = 1)","e19c232a":"sns.heatmap(df_train[[\"SalePrice\", \"WoodDeckSF\", \"OpenPorchSF\", \"EnclosedPorch\", \"3SsnPorch\", \"ScreenPorch\"]].corr())\nprint(df_train[[\"SalePrice\", \"WoodDeckSF\", \"OpenPorchSF\", \"EnclosedPorch\", \"3SsnPorch\", \"ScreenPorch\"]].corr()[\"SalePrice\"])","e82f2cbb":"'''\ndf_temp = df_train[\"WoodDeckSF\"].fillna(df_train[\"WoodDeckSF\"].mean())\ndef convert_WoodDeckSF(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"WoodDeckSF\"].fillna(df_train[\"WoodDeckSF\"].mean()).map(convert_WoodDeckSF)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"WoodDeckSF\"].fillna(df_test[\"WoodDeckSF\"].mean()).map(convert_WoodDeckSF)], axis = 1)\n'''","98af9b9b":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"WoodDeckSF\"].fillna(df_train[\"WoodDeckSF\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"WoodDeckSF\"].fillna(df_train[\"WoodDeckSF\"].mean()).values, axis = 1)), columns = [\"WoodDeckSF\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"WoodDeckSF\"].fillna(df_test[\"WoodDeckSF\"].mean()).values, axis = 1)), columns = [\"WoodDeckSF\"])], axis = 1)","13659074":"'''\ndf_temp = df_train[\"OpenPorchSF\"].fillna(df_train[\"OpenPorchSF\"].mean())\ndef convert_OpenPorchSF(value, temp = df_temp):\n    minValue = temp.min()\n    maxValue = temp.max()\n    preprocessed = (value - minValue) \/ (maxValue - minValue)\n    return preprocessed\n\ndf_train_pp = pd.concat([df_train_pp, df_train[\"OpenPorchSF\"].fillna(df_train[\"OpenPorchSF\"].mean()).map(convert_OpenPorchSF)], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, df_test[\"OpenPorchSF\"].fillna(df_test[\"OpenPorchSF\"].mean()).map(convert_OpenPorchSF)], axis = 1)\n'''","dd910257":"scaler = StandardScaler()\nscaler.fit(np.expand_dims(df_train[\"OpenPorchSF\"].fillna(df_train[\"OpenPorchSF\"].mean()).values, axis = 1))\ndf_train_pp = pd.concat([df_train_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_train[\"OpenPorchSF\"].fillna(df_train[\"OpenPorchSF\"].mean()).values, axis = 1)), columns = [\"OpenPorchSF\"])], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.DataFrame(scaler.transform(np.expand_dims(df_test[\"OpenPorchSF\"].fillna(df_test[\"OpenPorchSF\"].mean()).values, axis = 1)), columns = [\"OpenPorchSF\"])], axis = 1)","0d0b1d70":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"PoolArea\", \"PoolQC\"]], columns = [\"PoolQC\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"PoolArea\", \"PoolQC\"]], columns = [\"PoolQC\"]).corr()[\"SalePrice\"])","30310d9d":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"Fence\"]], columns = [\"Fence\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"Fence\"]], columns = [\"Fence\"]).corr()[\"SalePrice\"])","2d572dbe":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"MiscFeature\", \"MiscVal\"]], columns = [\"MiscFeature\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"MiscFeature\", \"MiscVal\"]], columns = [\"MiscFeature\"]).corr()[\"SalePrice\"])","2ba0f678":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"MoSold\", \"YrSold\"]], columns = [\"MoSold\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"MoSold\", \"YrSold\"]], columns = [\"MoSold\"]).corr()[\"SalePrice\"])","138a0a51":"sns.heatmap(pd.get_dummies(df_train[[\"SalePrice\", \"SaleType\", \"SaleCondition\"]], columns = [\"SaleType\", \"SaleCondition\"]).corr())\nprint(pd.get_dummies(df_train[[\"SalePrice\", \"SaleType\", \"SaleCondition\"]], columns = [\"SaleType\", \"SaleCondition\"]).corr()[\"SalePrice\"])","15abb536":"df_train_pp = pd.concat([df_train_pp, pd.get_dummies(df_train[[\"SaleType\", \"SaleCondition\"]], columns = [\"SaleType\", \"SaleCondition\"])[[\"SaleType_New\", \"SaleType_WD\", \"SaleCondition_Partial\"]]], axis = 1)\ndf_test_pp = pd.concat([df_test_pp, pd.get_dummies(df_test[[\"SaleType\", \"SaleCondition\"]], columns = [\"SaleType\", \"SaleCondition\"])[[\"SaleType_New\", \"SaleType_WD\", \"SaleCondition_Partial\"]]], axis = 1)","32f5a405":"df_train_pp.head()","0d6ce6b7":"df_train_pp = df_train_pp.drop([\"Id\"], axis = 1)\ndf_test_pp = df_test_pp.drop([\"Id\"], axis = 1)","328b950b":"df_train_prices = df_train[\"SalePrice\"]","3f8190a5":"na_train_x = df_train_pp.values\nna_train_y = df_train_prices.values\nna_test_x = df_test_pp.values\nna_test_id = np.expand_dims(df_test[\"Id\"].values, axis = -1)","55996506":"X_train, X_test, Y_train, Y_test = train_test_split(na_train_x, na_train_y, test_size = 0.1)","03cd1ab3":"input_units = na_train_x.shape[1]","c0cf4bd2":"def build_model(input_units = input_units):\n    input_layer = Input((input_units,))\n    \n    x = Dense(units = 512, activity_regularizer=l1_l2())(input_layer)\n    x = LeakyReLU()(x)\n    #x = BatchNormalization()(x)\n    x = Dropout(0.3)(x)\n    \n    x = Dense(units = 256, activity_regularizer=l1_l2())(x)\n    x = LeakyReLU()(x)\n    #x = BatchNormalization()(x)\n    x = Dropout(0.3)(x)\n    \n    x = Dense(units = 128, activity_regularizer=l1_l2())(x)\n    x = LeakyReLU()(x)\n    #x = BatchNormalization()(x)\n    x = Dropout(0.3)(x)\n    \n    x = Dense(units = 64, activity_regularizer=l1_l2())(x)\n    x = LeakyReLU()(x)\n    #x = BatchNormalization()(x)\n    x = Dropout(0.3)(x)\n    \n    x = Dense(units = 32, activity_regularizer=l1_l2())(x)\n    x = LeakyReLU()(x)\n    #x = BatchNormalization()(x)\n    x = Dropout(0.25)(x)\n    \n    x = Dense(units = 16, activity_regularizer=l1_l2())(x)\n    x = LeakyReLU()(x)\n    x = Dropout(0.2)(x)\n    \n    x = Dense(units = 8, activity_regularizer=l1_l2())(x)\n    x = LeakyReLU()(x)\n    x = Dropout(0.15)(x)\n    \n    x = Dense(units = 4, activity_regularizer=l1_l2())(x)\n    x = LeakyReLU()(x)\n    \n    x = Dense(units = 2, activity_regularizer=l1_l2())(x)\n    x = LeakyReLU()(x)\n    \n    x = Dense(units = 1)(x)\n    \n    model = Model(inputs = input_layer, outputs = x)\n    model.compile(optimizer = Nadam(), loss = 'mean_squared_error', metrics = ['mean_absolute_error'])\n    return model","997289c8":"kf = KFold(n_splits = 10, shuffle = True)\nall_loss = []\nall_val_loss = []\nall_mae = []\nall_val_mae = []\nepochs = 10000","4c1ea184":"'''\nfor train_index, val_index in kf.split(X_train, Y_train):\n    train_data = X_train[train_index]\n    train_label = Y_train[train_index]\n    val_data = X_train[val_index]\n    val_label = Y_train[val_index]\n    \n    model = build_model()\n    earlystopping_callback = EarlyStopping(monitor = 'val_loss', patience=100, verbose=1, mode='auto')\n    history = model.fit(x = train_data, y = train_label, epochs = epochs, batch_size = 200, validation_data = (val_data, val_label), callbacks = [earlystopping_callback])\n    \n    loss = history.history[\"loss\"]\n    val_loss = history.history[\"val_loss\"]\n    mae = history.history[\"mean_absolute_error\"]\n    val_mae = history.history[\"val_mean_absolute_error\"]\n    \n    all_loss.append(loss)\n    all_val_loss.append(val_loss)\n    all_mae.append(mae)\n    all_val_mae.append(val_mae)\n\naverage_all_loss = np.mean([i[-1] for i in all_loss])\naverage_all_val_loss = np.mean([i[-1] for i in all_val_loss])\naverage_all_mae = np.mean([i[-1] for i in all_mae])\naverage_all_val_mae = np.mean([i[-1] for i in all_val_mae])\n\nprint(\"Loss: {}, Val_Loss: {}, MAE: {}, Val_MAE: {}\".format(average_all_loss, average_all_val_loss, average_all_mae, average_all_val_mae))\n'''","30a5d0f1":"model = build_model()\nearlystopping_callback = EarlyStopping(monitor = 'val_loss', patience=20, verbose=1, mode='auto')\nhistory = model.fit(x = X_train, y = Y_train, epochs = epochs, batch_size = 100, validation_data = (X_test, Y_test), callbacks = [earlystopping_callback])","102de479":"model = build_model()\nearlystopping_callback = EarlyStopping(monitor = 'val_loss', patience=50, verbose=1, mode='auto')\nhistory = model.fit(x = na_train_x, y = na_train_y, epochs = epochs, batch_size = 100, validation_split = 0.1, callbacks = [earlystopping_callback])","01b254b1":"predict = model.predict(na_test_x)","3d45e706":"na_output = np.concatenate([na_test_id, predict], axis = 1)\noutput = pd.DataFrame(na_output.astype(np.uint32), columns = [\"Id\", \"SalePrice\"])\noutput.to_csv(\"submission.csv\", index = False)\noutput.head(300)","69887a3e":"Id: ---  \nMSSubClass: Quantative  \nMSZoning: Quantative  \nLotFrontage: Qualitative  \nLotArea: Qualitative  \nStreet: Quantative   \nAlley: Quantative  \nLotShape: Quantative  \nLandContour: Quantative  \nUtilities: Quantative  \nLotConfig: Quantative  \nLandSlope: Quantative  \nNeighborhood: Quantative  \nCondition1: Quantative  \nCondition2: Quantative  \nBldgType: Quantative  \nHouseStyle: Quantative  \nOverallQual: Qualitative  \nOverallCond: Qualitative  \nYearBuilt: Qualitative, but having offset  \nYearRemodAdd: Qualitative, but having offset  \nRoofStyle: Quantative  \nRoofMatl: Quantative  \nExterior1st: Quantative  \nExterior2nd: Quantative  \nMasVnrType: Quantative  \nMasVnrArea: Qualitative  \nExterQual: Qualitative  \nExterCond: Qualitative  \nFoundation: Quantative  \nBsmtQual: Qualitative  \nBsmtCond: Qualitative  \nBsmtExposure: Quantative  \nBsmtFinType1: Quantative  \nBsmtFinSF1: Qualitative  \nBsmtFinType2: Quantative  \nBsmtFinSF2: Qualitative  \nBsmtUnfSF: Qualitative, 1+2+Un  \nTotalBsmtSF: Qualitative  \nHeating: Quantative  \nHeatingQC: Quantative  \nCentralAir: Quantative  \nElectrical: Quantative  \n1stFlrSF: Qualitative  \n2ndFlrSF: Qualitative  \nLowQualFinSF: Qualitative  \nGrLivArea: Qualitative  \nBsmtFullBath: Qualitative  \nBsmtHalfBath: Qualitative  \nFullBath: Qualitative  \nHalfBath: Qualitative  \nBedroomAbvGr: Qualitative  \nKitchenAbvGr: Qualitative  \nKitchenQual: Qualitative  \nTotRmsAbvGrd: Qualitative  \nFunctional: Quantative  \nFireplaces: Qualitative  \nFireplaceQu: Quantative  \nGarageType: Quantative  \nGarageYrBlt: Qualitative, but having offset  \nGarageFinish: Quantative  \nGarageCars: Qualitative  \nGarageArea: Qualitative  \nGarageQual: Quantative  \nGarageCond: Quantative  \nPavedDrive: Quantative  \nWoodDeckSF: Qualitative  \nOpenPorchSF: Qualitative  \nEnclosedPorch: Qualitative  \n3SsnPorch: Qualitative  \nScreenPorch: Qualitative  \nPoolArea: Qualitative  \nPoolQC: Quantative  \nFence: Quantative  \nMiscFeature: Quantative  \nMiscVal: Qualitative  \nMoSold: Quantative  \nYrSold: Qualitative, but having offset  \nSaleType: Quantative  \nSaleCondition: Quantative  \nSalePrice","31a60ca3":"RM (+ RL)","8e90d799":"Class 30, 60 and others"}}