{"cell_type":{"1cd20d54":"code","9b5b09aa":"code","793e61d7":"code","18b6c395":"code","e0061c2f":"code","c0237771":"code","e031069f":"code","50eb780e":"code","66ecb674":"code","6c179933":"code","3e10e36a":"code","18b9e5d2":"code","809e8912":"code","846a2a64":"code","3689a4ed":"code","1357bd67":"code","4a88c8dc":"code","6b3eb6f7":"code","f8b6e77e":"code","d2212d49":"code","730b4b84":"code","e56e9bc4":"code","9b2bbb0e":"code","d7696440":"code","dc184dec":"code","567cb892":"code","a7f499be":"code","31ee947a":"code","3f14e4e6":"code","a5bc9453":"code","d1714089":"code","3fccee1d":"code","494746d7":"code","b38e8908":"code","626bb140":"code","902ad184":"markdown","e788a81b":"markdown","e8ba883f":"markdown"},"source":{"1cd20d54":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b5b09aa":"df=pd.read_csv(r'\/kaggle\/input\/fake-news-content-detection\/train.csv')","793e61d7":"df.head()","18b6c395":"df.shape","e0061c2f":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","c0237771":"df.info()","e031069f":"df.describe()","50eb780e":"sns.countplot(df['Labels'])","66ecb674":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport nltk\nfrom nltk.corpus import stopwords\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn import naive_bayes\nfrom sklearn.metrics import roc_auc_score","6c179933":"df.head()","3e10e36a":"train_qs = pd.Series(df['Text'].tolist()).astype(str)","18b9e5d2":"##word cloud for the text\nfrom wordcloud import WordCloud\ncloud = WordCloud(width=1300, height=950).generate(\" \".join(train_qs.astype(str)))\nplt.figure(figsize=(15, 10))\nplt.imshow(cloud)\nplt.axis('off')","809e8912":"train_q = pd.Series(df['Text_Tag'].tolist()).astype(str)","846a2a64":"## word cloud for text_tag\ncloud = WordCloud(width=1300, height=950).generate(\" \".join(train_q.astype(str)))\nplt.figure(figsize=(15, 10))\nplt.imshow(cloud)\nplt.axis('off')","3689a4ed":"stopset=set(stopwords.words('english'))\nvector=TfidfVectorizer(use_idf=True,lowercase=True,strip_accents='ascii',stop_words=stopset)","1357bd67":"vector.fit(df)","4a88c8dc":"y=df.Labels\nx=vector.fit_transform(df.Text)\n","6b3eb6f7":"print(x.shape)\nprint(y.shape)","f8b6e77e":"print(x)","d2212d49":"## we can get the feature name of required index\nprint(vector.get_feature_names()[1129])\nprint(vector.get_feature_names()[10000])\nprint(vector.get_feature_names()[3425])","730b4b84":"##most repeated words\nmax(vector.get_feature_names())","e56e9bc4":"x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=4,test_size=0.33)","9b2bbb0e":"print(x_train.shape)\nprint(y_test.shape)","d7696440":"clf = naive_bayes.MultinomialNB()\nmodel=clf.fit(x_train, y_train)","dc184dec":"pp=model.predict(x_test)\npp","567cb892":"sns.countplot(pp)","a7f499be":"from sklearn.metrics import accuracy_score,confusion_matrix,classification_report","31ee947a":"from sklearn.tree import DecisionTreeClassifier\ntr= DecisionTreeClassifier()","3f14e4e6":"tr.fit(x_train,y_train)","a5bc9453":"pt=tr.predict(x_test)\npt","d1714089":"sns.countplot(pt)","3fccee1d":"import xgboost","494746d7":"xgb=xgboost.XGBClassifier()\nxgb.fit(x_train,y_train)","b38e8908":"px=xgb.predict(x_test)","626bb140":"sns.countplot(px)","902ad184":"### we can see the perfect gaussian distribution of the predicted values","e788a81b":"### so here we can consider this data set as a balanced data set","e8ba883f":"### meaning of the label\n* Half-True - 2\n* False - 1\n* Mostly-True - 3\n* True - 5\n* Barely-True - 0\n* Not-Known - 4"}}