{"cell_type":{"4d18d3d2":"code","717d9373":"code","818d1e7d":"code","cf172baa":"code","fff81d62":"code","636d8da8":"code","a5c95161":"code","9cd049db":"code","092dde8c":"code","94dbef50":"code","32ce77ce":"code","2c49aaaa":"code","441a61d2":"code","5be79264":"code","4a6e4f03":"code","661bf73e":"code","6f2f7b53":"code","775d77df":"code","fb93181e":"code","dd9bb949":"code","84d88749":"code","0d72628e":"code","a88caebb":"code","f2b7a5d2":"code","497dc6be":"code","c43f3191":"code","45a7f2a2":"code","50ca2d6d":"code","64e3145c":"code","8f2c493a":"code","45582188":"code","61a11fe7":"code","6d942814":"code","529c6eff":"code","ce2f5ae2":"code","dfe3220f":"code","4295d61b":"code","9018b835":"code","294c0326":"code","59688076":"code","ce816fd6":"code","7a7c61b8":"code","f3c33659":"code","c548aafc":"code","5bddfbe8":"code","28b10556":"code","1a7b076f":"code","ca804d5e":"code","e729355f":"code","8a2377a9":"code","0ea05601":"code","52d8faeb":"code","460263fc":"code","a9769f76":"code","25c524f3":"code","9876de68":"code","ada2a6b3":"code","4750c7f4":"code","1b5940d2":"code","376966c2":"code","3d9737ac":"code","259c3b3d":"code","c75844ec":"code","890d021b":"code","83902d6e":"code","27e29a39":"code","2f3c922e":"code","32904f8f":"code","1a21b29c":"code","ff734c14":"code","c31aa0d4":"code","817d8263":"code","41958cb9":"code","3599b36e":"code","d47ec01c":"code","dc4e9cd7":"code","1386d0ee":"code","178115d0":"code","80e6eb17":"code","f48525b5":"code","748fae0b":"code","53353692":"code","0c8f1bb0":"code","eb556f18":"code","2fff9983":"code","4f48bc3d":"code","8c4af32a":"code","502747f2":"code","d2b6ba9f":"code","89ffd797":"code","591f836e":"code","50615a03":"code","2d903746":"markdown","f1954b01":"markdown","0c1b74a3":"markdown","4cc343fe":"markdown","c60114d4":"markdown","bc5dc4cc":"markdown","5b2eaa76":"markdown","b24491a3":"markdown","a671cdc2":"markdown","85f09d4e":"markdown","d10f1f2e":"markdown","5c785d87":"markdown","919d062c":"markdown","ec71517c":"markdown","d7128b8b":"markdown","2296d4d5":"markdown","01843bba":"markdown","9119c6ad":"markdown","d0a87adc":"markdown","120b6b45":"markdown","216ff9bd":"markdown","88754aa4":"markdown","1fa3dd69":"markdown","6d5210d0":"markdown","35e14219":"markdown","225f8ef7":"markdown","02fa5883":"markdown","e4bab980":"markdown","b5681b87":"markdown","07d3ed12":"markdown","71822de2":"markdown","c31aeb14":"markdown","18217546":"markdown","93a8a96f":"markdown","f831dce4":"markdown","1f71387f":"markdown","8235ece6":"markdown","b53a13f0":"markdown","a3f6191c":"markdown","461fd531":"markdown","d7320247":"markdown","b5557217":"markdown","fab0f164":"markdown","5ae2b962":"markdown","f93bc4df":"markdown"},"source":{"4d18d3d2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid')\n\nimport seaborn as sns\nfrom collections import Counter\n\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","717d9373":"train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_PassengerId = test_df['PassengerId']","818d1e7d":"train_df.columns","cf172baa":"train_df.head()","fff81d62":"train_df.describe()","636d8da8":"train_df.info()","a5c95161":"def bar_plot(variable):\n    \"\"\"\n    input: varible ex: 'sex'\n    output: bar plot& value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical varible(value\/sample)\n    varValue = var.value_counts()\n    \n    #visualize\n    plt.figure(figsize=(9,3))\n    plt.bar(varValue.index,varValue)\n    plt.xticks(varValue.index,varValue.index.values)\n    plt.ylabel('Frequency')\n    plt.title(variable)\n    plt.show()\n    print('{}: \\n {}'.format(variable,varValue))\n    ","9cd049db":"category1 = ['Survived','Sex','Pclass','Embarked','SibSp','Parch']\n\nfor c in category1:\n    bar_plot(c)","092dde8c":"category2 = ['Cabin','Name','Ticket']\nfor c in category2:\n    print('{} \\n'.format(train_df[c].value_counts()))","94dbef50":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable],bins=50)\n    plt.xlabel(variable)\n    plt.ylabel('Frequency')\n    plt.title('{} distribution with hist'.format(variable))\n    plt.show()","32ce77ce":"numericVar = ['Fare','Age','PassengerId']\nfor n in numericVar:\n    plot_hist(n)","2c49aaaa":"# Pclass - Survived\ntrain_df[['Pclass','Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by='Survived',ascending=False)","441a61d2":"# Sex - Survived\ntrain_df[['Sex','Survived']].groupby(['Sex'], as_index = False).mean().sort_values(by='Survived',ascending=False)","5be79264":"# Sibsp - Survived\ntrain_df[['SibSp','Survived']].groupby(['SibSp'], as_index = False).mean().sort_values(by='Survived',ascending=False)","4a6e4f03":"# Parch - Survived\ntrain_df[['Parch','Survived']].groupby(['Parch'], as_index = False).mean().sort_values(by='Survived',ascending=False)","661bf73e":"def detect_outliers(df,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n    ","6f2f7b53":"# find outliers\ntrain_df.loc[detect_outliers(train_df,['Age','SibSp','Parch','Fare'])]","775d77df":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,['Age','SibSp','Parch','Fare']),axis=0).reset_index(drop =True )","fb93181e":"# concat datasets\ntrain_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","dd9bb949":"train_df.head()","84d88749":"# which columns \ntrain_df.columns[train_df.isnull().any()]","0d72628e":"# \ntrain_df.isnull().sum()","a88caebb":"train_df[train_df['Embarked'].isnull()]","f2b7a5d2":"train_df.boxplot(column='Fare',by='Embarked')\nplt.show()","497dc6be":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","c43f3191":"train_df[train_df['Fare'].isnull()]","45a7f2a2":"np.mean(train_df[train_df['Pclass']==3]['Fare'])","50ca2d6d":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","64e3145c":"train_df[train_df[\"Fare\"].isnull()]","8f2c493a":"list1 = ['SibSp', 'Parch', 'Age', 'Fare' , 'Survived']\nsns.heatmap(train_df[list1].corr(),annot=True,fmt='.2f');","45582188":"g = sns.factorplot(x='SibSp',y='Survived',data= train_df,kind='bar',size=6)\nplt.show()","61a11fe7":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","6d942814":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", kind = \"bar\", data = train_df, size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","529c6eff":"g = sns.FacetGrid(train_df,col='Survived')\ng.map(sns.distplot,'Age',bins=25)\nplt.show()","ce2f5ae2":"g = sns.FacetGrid(train_df,col='Survived',row='Pclass',size=2)\ng.map(plt.hist,'Age',bins=25)\ng.add_legend()\nplt.show()","dfe3220f":"g= sns.FacetGrid(train_df, row='Embarked',size=2)\ng.map(sns.pointplot, 'Pclass','Survived','Sex')\ng.add_legend()\nplt.show()","4295d61b":"g= sns.FacetGrid(train_df, row='Embarked',col='Survived',size=2.5)\ng.map(sns.barplot, 'Sex','Fare')\ng.add_legend()\nplt.show()","9018b835":"train_df[train_df['Age'].isnull()]","294c0326":"sns.factorplot(x='Sex',y='Age',data=train_df,kind='box');","59688076":"sns.factorplot(x='Sex',y='Age', hue='Pclass',data=train_df,kind='box');","ce816fd6":"sns.factorplot(x='Parch',y='Age',data=train_df,kind='box');\nsns.factorplot(x='SibSp',y='Age',data=train_df,kind='box');","7a7c61b8":"train_df['Sex']= [1 if i=='male' else 0 for i in train_df['Sex']]","f3c33659":"sns.heatmap(train_df[['Age','Sex','SibSp','Parch','Pclass']].corr(),annot=True);","c548aafc":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) &(train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"])& (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","5bddfbe8":"train_df[train_df[\"Age\"].isnull()]","28b10556":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","1a7b076f":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","ca804d5e":"train_df[train_df[\"Fare\"].isnull()]","e729355f":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","8a2377a9":"train_df[train_df[\"Fare\"].isnull()]","0ea05601":"train_df['Name'].head(10)","52d8faeb":"name = train_df[\"Name\"]\ntrain_df[\"Title\"] = [i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","460263fc":"train_df['Title'].head(10)","a9769f76":"sns.countplot(x='Title',data=train_df)\nplt.xticks(rotation=60)\nplt.show()","25c524f3":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","9876de68":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","ada2a6b3":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","4750c7f4":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","1b5940d2":"train_df.head()","376966c2":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","3d9737ac":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1","259c3b3d":"train_df.head()","c75844ec":"g = sns.factorplot(x = \"Fsize\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","890d021b":"train_df[\"family_size\"] = [1 if i < 5 else 0 for i in train_df[\"Fsize\"]]","83902d6e":"train_df.head(10)","27e29a39":"sns.countplot(x = \"family_size\", data = train_df)\nplt.show()","2f3c922e":"g = sns.factorplot(x = \"family_size\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","32904f8f":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"])\ntrain_df.head()","1a21b29c":"train_df[\"Embarked\"].head()","ff734c14":"sns.countplot(x = \"Embarked\", data = train_df)\nplt.show()","c31aa0d4":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","817d8263":"train_df[\"Ticket\"].head(20)","41958cb9":"a = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","3599b36e":"tickets = []\nfor i in list(train_df.Ticket):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","d47ec01c":"train_df[\"Ticket\"].head(20)","dc4e9cd7":"train_df.head()","1386d0ee":"train_df = pd.get_dummies(train_df, columns= [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","178115d0":"sns.countplot(x = \"Pclass\", data = train_df)\nplt.show()","80e6eb17":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Pclass\"])\ntrain_df.head()","f48525b5":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","748fae0b":"train_df.drop(labels = [\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","53353692":"train_df.columns","0c8f1bb0":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","eb556f18":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"],axis = 1, inplace = True)","2fff9983":"test.head()","4f48bc3d":"train = train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis = 1)\ny_train = train[\"Survived\"]\nX_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size = 0.33, random_state = 42)\nprint(\"X_train\",len(X_train))\nprint(\"X_test\",len(X_test))\nprint(\"y_train\",len(y_train))\nprint(\"y_test\",len(y_test))\nprint(\"test\",len(test))","8c4af32a":"logreg = LogisticRegression()\nlogreg.fit(X_train, y_train)\nacc_log_train = round(logreg.score(X_train, y_train)*100,2) \nacc_log_test = round(logreg.score(X_test,y_test)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))\nprint(\"Testing Accuracy: % {}\".format(acc_log_test))","502747f2":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","d2b6ba9f":"cv_result = []\nbest_estimators = []\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(X_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","89ffd797":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","591f836e":"votingC = VotingClassifier(estimators = [(\"dt\",best_estimators[0]),\n                                        (\"rfc\",best_estimators[2]),\n                                        (\"lr\",best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\nvotingC = votingC.fit(X_train, y_train)\nprint(accuracy_score(votingC.predict(X_test),y_test))","50615a03":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","2d903746":"## Pclass-Survived","f1954b01":"# Visualization\n\n\nCorrelation between SibSp, Parch, Age, Fare and Survived","0c1b74a3":"### Categorical Variable","4cc343fe":"# Variable Description\n\n1. PassengerId: unique id number to each passenger\n2. Survived: passenger survice(1) or died(0)\n3. Pclass: passenger class\n4. Name: name\n5. Sex: gender of passenger\n6. Age: age of passenger\n7. SibSp: number of siblings\/spouses\n8. Parch: number of parents\/children\n9. Ticket: ticket number\n10. Fare: amount of money spent on ticket\n11. Cabin: cabin category\n12. Embarked: port where passenger embarked(C=Cherbourg, Q=Qeenstown, S=Southampton) ","c60114d4":"Sex is not informative for age prediction, age distribution seems to be same.","bc5dc4cc":"## Parch-Survived","5b2eaa76":"Age is not correlated with sex but it is correlated with parch,sibsp and pclass","b24491a3":"## Feature Engineering","a671cdc2":"## Embarked-Sex-Fare-Survived","85f09d4e":"## Hyperparameter Tuning gridsearch,cross validation","d10f1f2e":"## Univarite Variable Analysis\n\n* Categorical Variable : Survived,Sex,Pclass,Embarked,Cabin,Name,Ticket,Sibsp and Parch\n* Numerical Variable: Fare,age and passengerId","5c785d87":"## Pclass-Survived-Age","919d062c":"### Ticket","ec71517c":"* Having a lot of SibSp have less chance to survive.\n* If sibsp == 0 or 1 or 2 , passenger has more change to survive.\n* We can consider a new feature describing these categories.","d7128b8b":"* age <= 10 has a high survival rate,\n* oldest passengers (80) survived,\n* large number of 20 years old did not survive\n* most passengers are in 15-35 age rage,\n* use age feature in training\n* use age distribution for missing value of age","2296d4d5":"* Passengers who pay higher fare have better survival. Fare can be used as categorical  for training.","01843bba":"### Prediction and Submission","9119c6ad":"Fare feature seems to have correlation with survived feature(0.26)","d0a87adc":"* float64(2) = Fare and Age\n* int64(5)  = Pclass, sibsp, parch, passengerId and survived \n* object(5) = Cabin, embarked, ticket, name and sex","120b6b45":" # Fill Missing Value","216ff9bd":"### Pclass","88754aa4":"## Find Missing Value","1fa3dd69":"### Family Size","6d5210d0":"### Ensemble Modeling","35e14219":"* Sibsp and parch can be used for new feature extraction with th = 3\n* small famlies have more change to survive.\n* there is a std in survivak of passenger with parch=3","225f8ef7":"## Modelling","02fa5883":"* Female passengers have much better survival than males.\n* Males have better survival rate in pclass 3 in C\n* Embarked and sex will be used in training","e4bab980":"# Outlier Detection","b5681b87":"### Simple Logistic Regression","07d3ed12":"# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","71822de2":"First class passengers are older than 2nd and 2nd is older than 3rd.","c31aeb14":"## Embarked-Sex-Pclass-Survived","18217546":"### Train-Test Split","93a8a96f":"### Drop Passenger Id and Cabin","f831dce4":"# Missing Value","1f71387f":"## Fill Missing Value: Age Feature","8235ece6":"## Age-Survived","b53a13f0":"### Name-Title","a3f6191c":"Small familes have more chance to survive than large families.","461fd531":"## SibSp-Survived","d7320247":"### Embarked","b5557217":"# Load and Check Data","fab0f164":"### Sex","5ae2b962":"### Numerical Variable","f93bc4df":"* pclass is important feature for model trainig"}}