{"cell_type":{"0e09d790":"code","c7a3ee37":"code","c86347aa":"code","f0ee4fd0":"code","0262aa35":"code","d69d981f":"code","85f68041":"code","4a301208":"code","b2cfd998":"code","dac305e2":"code","c9350b1c":"code","bee1af95":"code","b2f2b367":"code","2e114ccb":"code","111b1b7a":"code","803c8b21":"markdown"},"source":{"0e09d790":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c7a3ee37":"import pandas as pd\nimport folium\ndf=pd.read_csv(\"\/kaggle\/input\/covid19-corona-virus-india-dataset\/covid19_data_map.csv\")\ndf.head()","c86347aa":"df.describe()","f0ee4fd0":"df.describe(include='all')","0262aa35":"df.info()","d69d981f":"df.dtypes\n","85f68041":"df.isnull().values.any()","4a301208":"df.isnull().sum()","b2cfd998":"\n\n#show columns\nfor i,col in enumerate(df.columns):\n    print(i+1,\". column is \",col)\n\n","dac305e2":"df['Deaths**'].value_counts()","c9350b1c":"import matplotlib.pyplot as plt\nimport seaborn as sns\nplt.figure(figsize=(7,7))\nax=sns.barplot(x=df['Deaths**'].value_counts().index,\n              y=df['Deaths**'].value_counts().values,\n              palette=sns.cubehelix_palette(120))\nplt.xlabel('Deaths')\nplt.ylabel('Frequency')\nplt.title('Show of Deaths frequencyBar Plot')\nplt.show()","bee1af95":"missing_data=df.isnull()\nfor column in missing_data.columns.values.tolist():\n    print(column)\n    print(missing_data[column].value_counts())\n    print(\"\")","b2f2b367":"f, ax = plt.subplots(figsize=(12, 8))\n\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Total Confirmed cases*\", y=\"Name of State \/ UT\", data=df,\n            label=\"Confirmed\", color=\"b\")\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Cured\/Discharged\/Migrated*\", y=\"Name of State \/ UT\", data=df,\n            label=\"Recovered\", color=\"g\")\n# Add a legend and informative axis label\nax.legend(ncol=2, loc=\"lower right\", frameon=True)\nsns.despine(left=True, bottom=True)","2e114ccb":"x=df['Total Confirmed cases*'].sum()\ny=df['Deaths**'].sum()\nz=df['Cured\/Discharged\/Migrated*'].sum()\nplt.figure(figsize=(10,5))\nlabels=['Confirmed','Deaths','Recovered']\ncolors=['pink','red','silver']\nexplode=[0.5,0,0]\nvalues=[x,y,z]\n\nplt.pie(values,labels=labels,colors=colors,explode=explode,autopct='%1.1f%%',shadow=True)\nplt.legend(['Confirmed','Deaths','Recovered'] , loc=0)\nplt.axis('equal')\nplt.tight_layout()\nplt.show()","111b1b7a":"labels = ('Confirmed','Deaths','Recovered')\nx_index = [0,1,2]\n# indexes is the first parameter \nplt.bar(x_index, [x,y,z], width = 0.8, align='center', alpha=1.0)\nplt.xticks(x_index, labels)\nplt.xlabel('cases')\nplt.ylabel('Count')\nplt.title('India covid 19')\nplt.show()","803c8b21":"![ind2.gif](attachment:ind2.gif)\n**Corona-Virus-Analytics-Tracking India**"}}