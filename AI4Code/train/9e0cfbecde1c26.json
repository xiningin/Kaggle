{"cell_type":{"43faca31":"code","ba31db83":"code","9075c1d9":"code","5a3487f4":"code","5fa4f0f8":"code","78940192":"code","dff028a8":"code","12d5817e":"code","d0b03e27":"code","3f08a58c":"code","4cffc511":"code","75b7e5bf":"code","7f4cd795":"code","bce5aadd":"code","09709984":"code","f3291597":"code","1abcdba5":"code","52ca7b93":"code","9af20918":"code","6ad2e6a1":"code","eb1c9d5d":"code","862399a6":"code","9962e83a":"code","a8f8a6ea":"code","5d8dabf3":"code","a42bc96b":"code","1e2c930a":"code","83034a96":"code","d040c63f":"code","8b622860":"code","b50e434c":"code","17cb1195":"code","003ec215":"code","70e5a57b":"code","13b413ce":"code","b38abe95":"code","21bd083f":"code","433bd466":"code","0b8d4b68":"code","7e9da315":"code","aa5295ae":"code","e1593eea":"code","1041c3f2":"code","b55a3f3d":"code","18803bae":"code","54077265":"code","dc3430c6":"markdown","24cfbdb8":"markdown","a0df4278":"markdown","e159eda2":"markdown","ff460d65":"markdown","2ccbf484":"markdown","b1dc3f62":"markdown","a5e859cd":"markdown","73ea54f7":"markdown","60730cd8":"markdown","28c84322":"markdown","9f6f7791":"markdown"},"source":{"43faca31":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ba31db83":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nimport statsmodels.api as sm\nfrom scipy import stats\nstats.chisqprob=lambda chisq,df:stats.chi2.sf(chisq,df)","9075c1d9":"raw_data=pd.read_csv('..\/input\/titanic\/train.csv')\nraw_test_data=pd.read_csv('..\/input\/titanic\/test.csv')","5a3487f4":"raw_data.tail()","5fa4f0f8":"raw_data.isnull().sum()","78940192":"raw_test_data.isnull().sum()","dff028a8":"raw_data2=raw_data.drop(['Cabin'],axis=1)\nraw_test_data2=raw_test_data.drop(['Cabin'],axis=1)\nraw_data2.tail()","12d5817e":"raw_data2['Survived'].value_counts()\nsns.countplot(raw_data2['Survived'],palette='RdBu_r')\nplt.title('Survived and Deceased',fontsize=15)","d0b03e27":"table=pd.crosstab(raw_data2.Sex,raw_data2.Survived)\ntable.div(table.sum(1).astype(float),axis=0).plot(kind='bar',stacked=True)","3f08a58c":"sns.countplot(x='Survived',hue='Pclass',data=raw_data2,palette='winter')","4cffc511":"sns.jointplot(x=raw_data2['Survived'],y=raw_data2['Age'],kind='kde')","75b7e5bf":"plt.figure(figsize=(15,4))\nraw_data2.Age.hist(bins=20,color='darkred',alpha=0.4)","7f4cd795":"plt.figure(figsize=(15,8))\nsns.boxplot(x=raw_data2['Pclass'],y=raw_data2['Age'],hue=raw_data2['Survived'],palette='mako_r')\n    ","bce5aadd":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n\n        if Pclass == 1:\n            return 37\n\n        elif Pclass == 2:\n            return 29\n\n        else:\n            return 24\n\n    else:\n        return Age\n        ","09709984":"\nraw_data2['Age'] = raw_data2[['Age','Pclass']].apply(impute_age,axis=1)\nraw_test_data2['Age'] = raw_test_data2[['Age','Pclass']].apply(impute_age,axis=1)","f3291597":"raw_data2.isnull().sum()","1abcdba5":"raw_test_wn=raw_test_data2.fillna(raw_test_data2['Fare'].median())","52ca7b93":"raw_test_wn=raw_test_data2.dropna(how='any')\nraw_test_wn.isnull().sum()","9af20918":"raw_data2['Embarked']=raw_data2['Embarked'].fillna('S')","6ad2e6a1":"raw_data2['Sex'] = raw_data2['Sex'].map({'male': 0,'female': 1})\nraw_test_wn['Sex'] = raw_test_wn['Sex'].map({'male': 0,'female': 1})","eb1c9d5d":"raw_test_wn.head()","862399a6":"raw_data3=raw_data2.drop(['Name','Ticket'],axis=1)\nraw_test_3=raw_test_wn.drop(['Name','Ticket'],axis=1)","9962e83a":"data_final=pd.get_dummies(raw_data3)\ndata_final","a8f8a6ea":"TEST=pd.get_dummies(raw_test_3)","5d8dabf3":"x=data_final.drop(['Survived'],axis=1)\ny=data_final['Survived']","a42bc96b":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import RFE\nlogreg=LogisticRegression()\nrfe=RFE(logreg,20)\nrfe=rfe.fit(x,y.values.ravel())\nprint(rfe.support_)\nprint(rfe.ranking_)","1e2c930a":"results=sm.Logit(y,x).fit()\nresults.summary()","83034a96":"final=x.drop(['PassengerId','Parch','Fare'],axis=1)\nX=final\nX","d040c63f":"Final_test=TEST.drop(['PassengerId','Parch','Fare'],axis=1)\nFinal_test","8b622860":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)","b50e434c":"logreg=LogisticRegression()\nlogreg.fit(x_train,y_train)","17cb1195":"y_predict=logreg.predict(x_test)\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\ncm=confusion_matrix(y_test,y_predict)\n\nsns.heatmap(cm,annot=True)","003ec215":"accuracy_score(y_test,y_predict)*100","70e5a57b":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_predict))","13b413ce":"from sklearn.tree import DecisionTreeClassifier\ntree_class=DecisionTreeClassifier(max_leaf_nodes=70000,random_state=0)\ntree_class.fit(x_train,y_train)\nY_pred_tree=tree_class.predict(x_test)\ncm_tree=confusion_matrix(Y_pred_tree,y_test)\nsns.heatmap(cm_tree,annot=True)\naccuracy_score(y_test,Y_pred_tree)*100","b38abe95":"print(classification_report(y_test,Y_pred_tree))","21bd083f":"from sklearn.ensemble import RandomForestClassifier\nclassifier_forest=RandomForestClassifier()\nclassifier_forest.fit(x_train,y_train)\npred_forest=classifier_forest.predict(x_test)\ncm_forest=confusion_matrix(y_test,pred_forest)\nsns.heatmap(cm_forest,annot=True)\naccuracy_score(y_test,pred_forest)*100","433bd466":"print(classification_report(y_test,pred_forest))","0b8d4b68":"from sklearn.naive_bayes import GaussianNB\nclassifier_nb=GaussianNB()\nclassifier_nb.fit(x_train,y_train)\npred_nb=classifier_nb.predict(x_test)\ncm_nb=confusion_matrix(y_test,pred_nb)\nsns.heatmap(cm_nb,annot=True)\naccuracy_score(y_test,pred_nb)*100\n","7e9da315":"from sklearn.svm import SVC\nclassifier_svc=SVC(kernel='linear',random_state=0)\nclassifier_svc.fit(x_train,y_train)\npred_svc=classifier_svc.predict(x_test)\ncm_svc=confusion_matrix(y_test,pred_svc)\nsns.heatmap(cm_svc,annot=True)\naccuracy_score(y_test,pred_svc)*100\n","aa5295ae":"classifier_randomforest=RandomForestClassifier(random_state=0)\nclassifier_randomforest.fit(X,y)","e1593eea":"final_result=classifier_randomforest.predict(Final_test)","1041c3f2":"Submission=pd.DataFrame()\nSubmission['PassengerID']=TEST['PassengerId'].values\nSubmission['Survived']=final_result","b55a3f3d":"Submission.to_csv(r'C:\\Users\\user\\Music\\Projects\\classification prob (logistic regression)\\Titanic\\submit.csv')","18803bae":"submit=pd.read_csv(r'C:\\Users\\user\\Music\\Projects\\classification prob (logistic regression)\\Titanic\\submit.csv',index_col=0)","54077265":"submit","dc3430c6":"**Naive Bayes**","24cfbdb8":"**SVC**","a0df4278":"**EDA**","e159eda2":"Getting Dummies","ff460d65":"Feature Selection using RFE","2ccbf484":"Checking for null values","b1dc3f62":"RandomForestClassifier is more accurate than other models so we will select this model for testing the data","a5e859cd":"Feature Selection using Logit","73ea54f7":"Splitting the Dataset","60730cd8":"Model Using RandomForestClassifier","28c84322":"Training Model using Logistic Regression","9f6f7791":"Model using DecisionTreeClassifier"}}