{"cell_type":{"63df6a57":"code","5906e96f":"code","300ebb63":"code","090bbfce":"code","631f9f35":"code","43b38a81":"code","8a156f32":"code","e8e6ce7f":"code","b6eb1664":"code","72012857":"code","67e478a0":"code","aa6a9c58":"code","9b5eeaa3":"code","75363975":"code","25e34aec":"code","898b5414":"code","c2a4859f":"code","7d32a45d":"code","38808611":"code","c76f278a":"code","2b94892b":"code","45db9990":"code","e0015f06":"code","2c11c64f":"code","39677f1a":"code","923fc837":"code","8319b012":"code","0e33c295":"code","1d2548c1":"code","c2b037a3":"code","c7e15211":"code","b9029b3a":"code","e94b7d49":"code","18b45de7":"code","cba439c7":"code","3e8053a9":"code","7562e360":"code","739dc4b6":"code","097e196c":"code","185f8e2a":"code","ed8915dc":"code","03637dd3":"code","80c54328":"code","41ab76c3":"code","57f47dea":"code","5729d582":"code","4969d2ed":"code","4fa4ea97":"code","4415e6ff":"code","4dea2a12":"code","7e9ddc00":"code","6a20056a":"code","c160ac83":"code","dcc38a9c":"code","82a4e7a7":"code","3dcb8219":"code","92e1e201":"code","407c8218":"code","1eb2b72c":"code","50770a4a":"code","43d98346":"code","9cb5aee0":"code","592acf28":"code","9ddc101b":"code","473a2417":"code","727ca106":"code","69e9e07c":"code","f6426339":"code","a3add984":"code","14cbcfb9":"code","69e57766":"code","757a5d08":"code","9e9ac8d2":"code","208abbb4":"code","143b925c":"code","528ea434":"code","eb11bf2e":"code","9d09893d":"code","b98aa8f3":"code","2d17f441":"code","80121098":"code","d97e60b6":"code","eff11520":"code","7dc0a3f6":"code","e57e53ce":"code","8811d16f":"code","3392fb60":"code","73ae378b":"code","087e4be5":"code","fe951218":"code","9645aded":"code","3cc34e74":"code","9cbdf98d":"code","ab1b848b":"code","398dedda":"code","3a94c778":"code","2112b67e":"code","948902aa":"code","acec4e9f":"code","44adac87":"code","ce641cd4":"code","ef61a512":"code","fd73028a":"code","afc88c61":"code","c8459c77":"code","1ca6e61f":"code","f8b44e1c":"code","c2acf7b1":"markdown","3b066f13":"markdown","45df0213":"markdown","426eb6ac":"markdown","fdc31c4f":"markdown","6d8da7f4":"markdown","07739e09":"markdown","eaedd3f6":"markdown","415da478":"markdown","1e9ca2d0":"markdown"},"source":{"63df6a57":"# import libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix, accuracy_score","5906e96f":"# load dataset\ndf = pd.read_csv('..\/input\/covid19-case-surveillance-public-use-dataset\/COVID-19_Case_Surveillance_Public_Use_Data.csv')\ndf.head()","300ebb63":"#replace value Missing with NAN\ndf.replace('Missing', np.nan, inplace=True)","090bbfce":"df.info()","631f9f35":"df.isnull().sum()","43b38a81":"plt.figure(figsize=(16,8))\nsns.heatmap(df.isnull())","8a156f32":"df['symptomatic_yn'] = np.where(df.onset_dt.isnull(), 'No', 'Yes')\ndf[0:10][['symptomatic_yn','onset_dt']]","e8e6ce7f":"df['tested_yn'] = np.where(df[['pos_spec_dt']].isnull(), 'No', 'Yes')\ndf[:][['tested_yn','pos_spec_dt']]","b6eb1664":"# drop columns 'onset_dt', 'pos_spec_dt' \ndf.drop(['onset_dt', 'pos_spec_dt'], axis=1, inplace=True)","72012857":"df['cdc_report_dt'] = pd.to_datetime(df['cdc_report_dt'])","67e478a0":"df.set_index('cdc_report_dt', inplace=True)\ndf.head()","aa6a9c58":"df = df.dropna(thresh=7)","9b5eeaa3":"df.shape","75363975":"plt.figure(figsize=(16,8))\nsns.heatmap(df.isnull())","25e34aec":"df.isnull().sum()","898b5414":"df['symptomatic_yn'].value_counts()","c2a4859f":"df['tested_yn'].value_counts()","7d32a45d":"df['current_status'].value_counts()","38808611":"df['sex'].value_counts()","c76f278a":"df['age_group'].value_counts()","2b94892b":"df['Race and ethnicity (combined)'].value_counts()","45db9990":"df['hosp_yn'].value_counts()","e0015f06":"df['icu_yn'].value_counts()","2c11c64f":"df['death_yn'].value_counts()","39677f1a":"df['medcond_yn'].value_counts()","923fc837":"#df['month'] = pd.DatetimeIndex(df['cdc_report_dt']).month\n#df['day'] = pd.DatetimeIndex(df['cdc_report_dt']).day\n#df['month_year'] = pd.to_datetime(df['cdc_report_dt']).dt.to_period('M')","8319b012":"x = df.groupby(df.index.month).count()['current_status']\nsns.barplot(x=x.index, y=x.values);\nplt.xticks(rotation=90);","0e33c295":"d = df.groupby([df.index]).sex.value_counts().sort_index().unstack()","1d2548c1":"plt.figure(figsize=(20,8))\nd.Female.plot(color='b');\nd.Male.plot(color='r');\nplt.xticks(rotation=0);\nplt.xlabel('date', fontsize=18)\nplt.ylabel('number of cases per day', fontsize=18)\nplt.legend(['Male', 'Female'])","c2b037a3":"#x_male = df_male.groupby('month').count()['cdc_report_dt']\n#x_female = df_female.groupby('month').count()['cdc_report_dt']\n#sns.lineplot(x=x_male.index, y=x_male.values, color='b');\n#sns.lineplot(x=x_female.index, y=x_female.values, color='r');\n#plt.xticks(rotation=90);\n#plt.legend(['Male', 'Female'])","c7e15211":"sns.histplot(data=df, x=\"age_group\");\nplt.xticks(rotation=60);","b9029b3a":"sns.histplot(data=df, x=\"Race and ethnicity (combined)\");\nplt.xticks(rotation=90);","e94b7d49":"sns.histplot(data=df, x=\"sex\");\nplt.xticks(rotation=45);","18b45de7":"sns.histplot(data=df, x=\"day\");\nplt.xticks(rotation=90);","cba439c7":"sns.histplot(data=df, x=\"hosp_yn\");\nplt.xticks(rotation=90);","3e8053a9":"sns.histplot(data=df, x=\"icu_yn\");\nplt.xticks(rotation=90);","7562e360":"sns.histplot(data=df, x=\"medcond_yn\");\nplt.xticks(rotation=90);","739dc4b6":"sns.histplot(data=df, x=\"death_yn\");\nplt.xticks(rotation=90);","097e196c":"df['age_group'].replace('Unknown', np.nan, inplace=True)\ndf.dropna(subset=['age_group'], inplace=True)","185f8e2a":"df.shape","ed8915dc":"# drop rows with Missing and Unknown and Other values from 'sex' column\n#df.drop(df.loc[(df['sex'].isnull()) | (df['sex']=='Missing') | (df['sex']=='Unknown') | (df['sex']=='Other')].index, inplace=True)\n#df['sex'].value_counts()","03637dd3":"# drop rows with Missing and Unknown and Other values from 'Race and ethnicity (combined)' column\n#df.drop(df.loc[df['Race and ethnicity (combined)']=='Missing'].index, inplace=True)\n#df['Race and ethnicity (combined)'].value_counts()","80c54328":"plt.xticks(rotation=90)\nsns.countplot(df['age_group'],hue='death_yn',data=df)","41ab76c3":"plt.xticks(rotation=90)\nsns.countplot(df['month'],hue='death_yn',data=df)","57f47dea":"sns.countplot(df['month'],hue='hosp_yn',data=df);","5729d582":"sns.countplot(df['age_group'],hue='hosp_yn',data=df);\nplt.xticks(rotation=90);","4969d2ed":"sns.countplot(df['death_yn'],hue='hosp_yn',data=df);","4fa4ea97":"sns.countplot(df['icu_yn'],hue='hosp_yn',data=df);","4415e6ff":"sns.countplot(df['month'],hue='icu_yn',data=df);","4dea2a12":"sns.countplot(df['month'],hue='medcond_yn',data=df);","7e9ddc00":"age = ['0 - 9 Years', '10 - 19 Years', '20 - 29 Years', '30 - 39 Years', '40 - 49 Years',\n       '50 - 59 Years', '60 - 69 Years', '70 - 79 Years', '80+ Years']\n\ndef create_list(value):\n    range_age = []\n    for old in value:\n        sam = []\n        range_old = old\n        len_old_yes = len(df[(df['death_yn'] == 'Yes') & (df['age_group'] == old)])\n        len_old_no = len(df[(df['death_yn'] == 'No') & (df['age_group'] == old)])\n        sam.append(range_old)\n        sam.append(len_old_yes)\n        sam.append(len_old_no)\n        range_age.append(sam)\n    return range_age\n\n## convert list to DataFrame\nnew_df = pd.DataFrame(create_list(age), columns=['year', 'Death', 'Alive'])","6a20056a":"## Plot pie chart Dearth\nplt.figure(figsize=(15, 15))\nplt.subplot(121)\nexplode = (0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1)  # explode 1st slice\nplt.pie(new_df['Death'], startangle = 90, explode=explode, autopct='%1.0f%%', shadow=True)\nplt.legend(labels=new_df['year'])\nplt.title(\"Death in 2020\/11\/10 to 2020\/11\/14\")\n\n## Plot pie chart Alive\nplt.subplot(122)\nplt.pie(new_df['Alive'], startangle = 90, explode=explode, autopct='%1.0f%%', shadow=True)\nplt.legend(labels=new_df['year'])\nplt.title(\"Alive in 2020\/11\/10 to 2020\/11\/14\")\nplt.show()\n\n## Show Table\nfig, ax = plt.subplots()\nax.table(cellText=new_df.values, colLabels=new_df.columns, loc=\"center\")\nax.axis('off')\nfig.tight_layout()\nplt.show()","c160ac83":"sns.countplot('current_status',hue='death_yn',data=df);","dcc38a9c":"sns.countplot('current_status',hue='hosp_yn',data=df);","82a4e7a7":"sns.countplot('current_status',hue='icu_yn',data=df);","3dcb8219":"df['age'] = df['age_group'].replace({'0 - 9 Years':0, '10 - 19 Years':1, '20 - 29 Years':2, '30 - 39 Years':3, '40 - 49 Years':4,\n       '50 - 59 Years':5, '60 - 69 Years':6, '70 - 79 Years':7, '80+ Years':8})","92e1e201":"df_encoded = pd.get_dummies(df, columns=[\"current_status\", \"sex\", \"symptomatic_yn\", \"tested_yn\"], drop_first=True)\ndf_encoded.head()","407c8218":"df_encoded.shape","1eb2b72c":"df_encoded.drop('age_group', axis=1, inplace=True)","50770a4a":"df_encoded.isnull().sum()","43d98346":"# use RandomForestClassifier to fill the misiing values of 'hosp_yn'\nrf_hosp = RandomForestClassifier(n_estimators=10)\n\ndf_hosp = pd.get_dummies(df_encoded, columns=[\"icu_yn\", \"death_yn\", \"medcond_yn\", 'Race and ethnicity (combined)'])\ntrain_hosp = df_hosp.loc[(df_encoded['hosp_yn'].notnull())]  # known hosp values\ntest_hosp = df_hosp.loc[(df_encoded['hosp_yn'].isnull())]  # all nan hosp values\n\nfeatures = train_hosp.drop(['hosp_yn'], axis=1)\nlabel = train_hosp['hosp_yn']\nX_train, X_val, y_train, y_val = train_test_split(features, label, test_size=.2, random_state=42)\nX_test = test_hosp.drop(['hosp_yn'], axis=1)\n\nrf_hosp.fit(X_train, y_train)\n\nprint(rf_hosp.score(X_train, y_train))\nprint(rf_hosp.score(X_val, y_val))","9cb5aee0":"# for hosp_yn column\nprint(confusion_matrix(y_val, rf_hosp.predict(X_val)))\nprint(classification_report(y_val, rf_hosp.predict(X_val)))","592acf28":"df_encoded.loc[(df_encoded['hosp_yn'].isnull(), 'hosp_yn')] = rf_hosp.predict(X_test)","9ddc101b":"sns.histplot(data=df_encoded, x=\"hosp_yn\", color='r');\nsns.histplot(data=df, x=\"hosp_yn\", color='b');\nplt.xticks(rotation=90);","473a2417":"# use RandomForestClassifier to fill the misiing values of 'medcond_yn'\nrf_medcond = RandomForestClassifier(n_estimators=10)\n\ndf_medcond = pd.get_dummies(df_encoded, columns=[\"icu_yn\", \"death_yn\", \"hosp_yn\", 'Race and ethnicity (combined)'])\ntrain_medcond = df_medcond.loc[(df_encoded['medcond_yn'].notnull())]  # known medcond values\ntest_medcond = df_medcond.loc[(df_encoded['medcond_yn'].isnull())] # all nan medcond values\n\nfeatures = train_medcond.drop(['medcond_yn'], axis=1)\nlabel = train_medcond['medcond_yn']\nX_train, X_val, y_train, y_val = train_test_split(features, label, test_size=.2, random_state=42)\nX_test = test_medcond.drop(['medcond_yn'], axis=1)\n\nrf_medcond.fit(X_train, y_train)\n\nprint(rf_medcond.score(X_train, y_train))\nprint(rf_medcond.score(X_val, y_val))","727ca106":"# for medcond_yn column\nprint(confusion_matrix(y_val, rf_medcond.predict(X_val)))\nprint(classification_report(y_val, rf_medcond.predict(X_val)))","69e9e07c":"df_encoded.loc[(df_encoded['medcond_yn'].isnull(), 'medcond_yn')] = rf_medcond.predict(X_test)","f6426339":"#df_encoded['medcond_yn'].value_counts()","a3add984":"sns.histplot(data=df_encoded, x=\"medcond_yn\", color='r');\nsns.histplot(data=df, x=\"medcond_yn\", color='b');\nplt.xticks(rotation=90);","14cbcfb9":"# use RandomForestClassifier to fill the misiing values of 'icu_yn'\nrf_icu = RandomForestClassifier(n_estimators=10)\n\ndf_icu = pd.get_dummies(df_encoded, columns=[\"medcond_yn\", \"death_yn\", \"hosp_yn\",'Race and ethnicity (combined)'])\ntrain_icu = df_icu.loc[(df_encoded['icu_yn'].notnull())]  # known icu values\ntest_icu = df_icu.loc[(df_encoded['icu_yn'].isnull())]  # all nan icu values\n\nfeatures = train_icu.drop('icu_yn', axis=1)\nlabel = train_icu['icu_yn']\nX_train, X_val, y_train, y_val = train_test_split(features, label, test_size=.2, random_state=42)\nX_test = test_icu.drop('icu_yn', axis=1)\n\nrf_icu.fit(X_train, y_train)\n\nprint(rf_icu.score(X_train, y_train))\nprint(rf_icu.score(X_val, y_val))","69e57766":"# for icu_yn column\nprint(confusion_matrix(y_val, rf_icu.predict(X_val)))\nprint(classification_report(y_val, rf_icu.predict(X_val)))","757a5d08":"df_encoded.loc[(df_encoded['icu_yn'].isnull(), 'icu_yn')] = rf_icu.predict(X_test)","9e9ac8d2":"#df_encoded['icu_yn'].value_counts()","208abbb4":"sns.histplot(data=df_encoded, x=\"icu_yn\", color='r');\nsns.histplot(data=df, x=\"icu_yn\", color='b');\nplt.xticks(rotation=90);","143b925c":"# use RandomForestClassifier to fill the misiing values of 'Race and ethnicity (combined)'\nrf_race = RandomForestClassifier(n_estimators=10)\n\ndf_race = pd.get_dummies(df_encoded, columns=[\"icu_yn\", \"death_yn\", \"medcond_yn\", 'hosp_yn'])\ntrain_race = df_race.loc[(df_encoded['Race and ethnicity (combined)'].notnull())]  # known hosp values\ntest_race = df_race.loc[(df_encoded['Race and ethnicity (combined)'].isnull())]  # all nan hosp values\n\nfeatures = train_race.drop(['Race and ethnicity (combined)'], axis=1)\nlabel = train_race['Race and ethnicity (combined)']\nX_train, X_val, y_train, y_val = train_test_split(features, label, test_size=.2, random_state=42)\nX_test = test_race.drop(['Race and ethnicity (combined)'], axis=1)\n\nrf_race.fit(X_train, y_train)\n\nprint(rf_race.score(X_train, y_train))\nprint(rf_race.score(X_val, y_val))","528ea434":"# for Race column\nprint(confusion_matrix(y_val, rf_race.predict(X_val)))\nprint(classification_report(y_val, rf_race.predict(X_val)))","eb11bf2e":"df_encoded.loc[(df_encoded['Race and ethnicity (combined)'].isnull(), 'Race and ethnicity (combined)')] = rf_race.predict(X_test)","9d09893d":"sns.histplot(data=df_encoded, x=\"Race and ethnicity (combined)\", color='r');\nsns.histplot(data=df, x=\"Race and ethnicity (combined)\", color='b');\nplt.xticks(rotation=90);","b98aa8f3":"# use RandomForestClassifier to fill the misiing values of 'death_yn'\nrf_death = RandomForestClassifier(n_estimators=10)\n\ndf_death = pd.get_dummies(df_encoded, columns=[\"medcond_yn\", \"icu_yn\", \"hosp_yn\", 'Race and ethnicity (combined)'])\ntrain_death = df_death.loc[(df_encoded['death_yn'].notnull())]  \ntest_death = df_death.loc[(df_encoded['death_yn'].isnull())]  \n\nfeatures = train_death.drop('death_yn', axis=1)\nlabel = train_death['death_yn']\nX_train, X_val, y_train, y_val = train_test_split(features, label, test_size=.2, random_state=42)\nX_test = test_death.drop('death_yn', axis=1)\n\nrf_death.fit(X_train, y_train)\n\nprint(rf_death.score(X_train, y_train))\nprint(rf_death.score(X_val, y_val))","2d17f441":"# for death_yn column\nprint(confusion_matrix(y_val, rf_death.predict(X_val)))\nprint(classification_report(y_val, rf_death.predict(X_val)))","80121098":"df_encoded.loc[(df_encoded['death_yn'].isnull(), 'death_yn')] = rf_death.predict(X_test)","d97e60b6":"df_encoded['death_yn'].value_counts()","eff11520":"sns.histplot(data=df_encoded, x=\"death_yn\", color='r');\nsns.histplot(data=df, x=\"death_yn\", color='b');\nplt.xticks(rotation=90);","7dc0a3f6":"df_encoded.head()","e57e53ce":"df_encoded.to_csv('final_data.csv', index=False)","8811d16f":"# #df_final = pd.read_csv('final_data.csv')\ndf_final = df_encoded\ndf_final.head()","3392fb60":"df_final.isnull().sum()","73ae378b":"df_final = pd.get_dummies(df_final, columns=['hosp_yn','icu_yn','medcond_yn', 'Race and ethnicity (combined)'], drop_first=True)\ndf_final.head()","087e4be5":"df_final.shape","fe951218":"features = df_final.drop('death_yn', axis=1)\nlabel = df_final['death_yn']\nX_train, X_test, y_train, y_test = train_test_split(features, label, test_size=0.2, random_state=42)","9645aded":"models = []","3cc34e74":"\ndef evaluate_models(y_true, y_pred):\n    cm = confusion_matrix(y_true, y_pred)\n    print(classification_report(y_true, y_pred))\n    acc = accuracy_score(y_true, y_pred)\n    return cm, acc\n    ","9cbdf98d":"def plot_cm(cm, title=''):\n    sns.heatmap(cm, annot=True, fmt='d', xticklabels=['No', 'Unknown', 'Yes'], yticklabels=['No', 'Unknown', 'Yes'], cmap=plt.cm.Blues)\n    plt.title(title)\n    plt.show()","ab1b848b":"rf = RandomForestClassifier(n_estimators=10)\nrf.fit(X_train, y_train)\nprint(rf.score(X_train, y_train))\nprint(rf.score(X_test, y_test))","398dedda":"y_pred_rf = rf.predict(X_test)\ncm_rf, acc_rf = evaluate_models(y_test, y_pred_rf)\nplot_cm(cm_rf, 'Random Forest Confusion Matrix ')\nmodels.append(['Random Forest', acc_rf])","3a94c778":"from sklearn.ensemble import AdaBoostClassifier\nclf = AdaBoostClassifier()\nclf.fit(X_train, y_train)\ny_pred_ada = clf.predict(X_test)","2112b67e":"cm_ada, acc_ada = evaluate_models(y_test, y_pred_ada)\nplot_cm(cm_ada, 'AdaBoost Classifier Confusion Matrix ')\nmodels.append(['AdaBoost', acc_ada])","948902aa":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(X_train, y_train)\ny_pred_dtc = dtc.predict(X_test)","acec4e9f":"cm_dt, acc_dt = evaluate_models(y_test, y_pred_dtc)\nplot_cm(cm_dt, 'Decision Tree Confusion Matrix')\nmodels.append(['Decision Tree', acc_dt])","44adac87":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\n# from tensorflow.python.ops.numpy_ops import np_utils\nfrom tensorflow.python.keras.utils import np_utils","ce641cd4":"pmap = {'No':0,'Unknown':1,'Yes':2}\ndf_final['death'] = df_final['death_yn'].map(pmap)\ndf_final.head()","ef61a512":"features_nn = df_final.drop(['death_yn', 'death'], axis=1)\nlabel_nn = df_final['death']\ny = np_utils.to_categorical(label_nn)\nX_train_nn, X_test_nn, y_train_nn, y_test_nn = train_test_split(features_nn, y, test_size=0.2, random_state=42)","fd73028a":"y_train_nn.shape","afc88c61":"model = Sequential()\nmodel.add(Dense(128, input_dim=X_train_nn.shape[1], activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(32, activation='relu'))\nmodel.add(Dense(16, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(y_train_nn.shape[1], activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.fit(X_train_nn, y_train_nn, epochs=10, batch_size=64)\neva_train = model.evaluate(X_train_nn, y_train_nn)\neva_train","c8459c77":"y_pred_nn = model.predict(X_test_nn)\ny_test_nn = y_test_nn.argmax(1)\ny_pred_nn = np.argmax(y_pred_nn, axis=1)","1ca6e61f":"cm_nn, acc_nn = evaluate_models(y_test_nn, y_pred_nn)\nplot_cm(cm_nn, 'Neural Network Confusion Matrix')\nmodels.append(['Neural Network', acc_nn])","f8b44e1c":"# plt.figure(figsize=(7, 5))\nfor model in models:\n    plt.bar(model[0], model[1])\n\nplt.xlabel('Models')\nplt.ylabel(\"Accuracy\")\nplt.title('Compare Models')\nplt.show()","c2acf7b1":"## Data Visulization","3b066f13":"## Classification Models","45df0213":"from this pie chart shown that most of dead people were older that 50 years old although the percentage of cases were from young people.","426eb6ac":"**AdaBoost Classifier**","fdc31c4f":"**Neural Network**","6d8da7f4":"## Data Preprossing ","07739e09":"from this figures shown that the high percentage of people who went to hospital in the first months, and most of people who wnt to hospital were older than 60 years old, and most of dead people went to hospital, and all of people who went to icu also went to hospital wich make sense. ","eaedd3f6":"**Random Forest Classifier**","415da478":"## Data Exploration","1e9ca2d0":"**Decision Tree**"}}