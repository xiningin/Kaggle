{"cell_type":{"7a5fcf78":"code","ae610808":"code","493910c1":"code","384fc35b":"code","8d78a282":"code","628e300f":"code","7701d27d":"code","9ac2c7f3":"code","6f901458":"code","da89e843":"code","82495409":"code","62bcdffc":"code","924ad4b9":"code","36269362":"code","36bc68d9":"code","ecc18327":"code","e13e4923":"code","b73e1c1a":"code","5f8672b2":"code","f0c67edd":"code","4341510f":"code","f4b8aff1":"code","a4b71b31":"code","3688330e":"code","77e8cae3":"code","e60607eb":"code","583c80fc":"code","b98a25b8":"code","51d3497e":"code","60fa6d00":"code","aa6c2ae1":"code","678f7346":"code","2308e5c5":"code","78b17ccb":"code","da63e17b":"code","8069f96a":"code","30eafc03":"code","dbe67492":"code","6f102cc0":"code","e328f51a":"code","a0de92bb":"code","bab76e4d":"code","c28bc087":"code","2fa45344":"code","5c2c2d8d":"markdown","af07c286":"markdown","978a1e78":"markdown","c652f320":"markdown","f2ec73ac":"markdown","1ef7621b":"markdown","72fe8212":"markdown","fb4917c1":"markdown","911c6447":"markdown"},"source":{"7a5fcf78":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ae610808":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","493910c1":"df=pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")\ndf.head()","384fc35b":"df.columns","8d78a282":"df.info()","628e300f":"df.describe()","7701d27d":"df.shape","9ac2c7f3":"df.isnull().sum()","6f901458":"df=df.drop(labels=[\"Unnamed: 32\"],axis=1)","da89e843":"df.isnull().sum()","82495409":"from sklearn.preprocessing import LabelEncoder\nen=LabelEncoder()\ndf['diagnosis']=en.fit_transform(df['diagnosis'])","62bcdffc":"df.head(10)","924ad4b9":"plt.figure(figsize = (20, 15))\nsns.set(style=\"darkgrid\")\nplotnumber = 1\n\nfor column in df:\n    if plotnumber <= 30:\n        ax = plt.subplot(5, 6, plotnumber)\n        sns.histplot(df[column],kde=True)\n        plt.xlabel(column)\n        \n    plotnumber += 1\nplt.show()","36269362":"plt.figure(figsize = (20, 15))\nplotnumber = 1\n\nfor column in df:\n    if plotnumber <= 30:\n        ax = plt.subplot(5, 6, plotnumber)\n        sns.boxplot(x=df[column])\n        plt.xlabel(column)\n       \n    plotnumber += 1\nplt.title(\"Distribution\")\nplt.show()","36bc68d9":"plt.figure(figsize = (30, 15))\nsns.heatmap(df.corr(),annot=True)","ecc18327":"sns.pairplot(df,\n             x_vars=[\n                          'area_worst',\n                     'smoothness_worst',\n                  'compactness_worst',\n                     'concavity_worst',\n                     'concave points_worst',\n                        'symmetry_worst',\n                      'fractal_dimension_worst'],\n             y_vars=[\"diagnosis\"])","e13e4923":"sns.pairplot(df,\n             x_vars=[  'concavity_se', \n                     'concave points_se',\n                     'symmetry_se',\n                     'fractal_dimension_se',\n                     'radius_worst', \n                     'texture_worst',\n                  'perimeter_worst'],\n             y_vars=[\"diagnosis\"])","b73e1c1a":"sns.pairplot(df,\n             x_vars=[\n                     'fractal_dimension_mean',\n                       'radius_se', \n                     'texture_se', \n                     'perimeter_se',\n                     'area_se',\n                     'smoothness_se',\n                    'compactness_se'],\n                y_vars=[\"diagnosis\"])","5f8672b2":"sns.pairplot(df,\n             x_vars=['radius_mean', \n                           'texture_mean', \n                              'area_mean', \n                     'smoothness_mean',\n                     'compactness_mean', \n                     'concavity_mean',\n                  'concave points_mean',\n                     'symmetry_mean'],\n                      y_vars=[\"diagnosis\"])","f0c67edd":"c={\"Agg_of_all\":(df[\"radius_mean\"]+df[\"texture_mean\"]+df[\"perimeter_mean\"]+df[\"area_mean\"]+df[\"smoothness_mean\"]+df[\"compactness_mean\"]+\n                df[\"concavity_mean\"]+df[\"concave points_mean\"]+df[\"symmetry_mean\"]+df[\"fractal_dimension_mean\"]+df[\"radius_se\"]+df[\"texture_se\"]+\n                df[\"perimeter_se\"]+df[\"area_se\"]+df[\"smoothness_se\"]+df[\"compactness_se\"]+df[\"concavity_se\"]+df[\"concave points_se\"]+\n                df[\"fractal_dimension_se\"]+df[\"symmetry_se\"]+df[\"radius_worst\"]+df[\"texture_worst\"]+df[\"perimeter_worst\"]+df[\"area_worst\"]+\n                df[\"smoothness_worst\"]+df[\"compactness_worst\"]+df[\"concavity_worst\"]+df[\"concave points_worst\"]+df[\"symmetry_worst\"]+df[\"fractal_dimension_worst\"]),\"diagnosis\":df[\"diagnosis\"]}\ndata_1 = pd.DataFrame(data=c)","4341510f":"data_1.head()","f4b8aff1":"data_1[\"Agg_of_all\"]=(data_1[\"Agg_of_all\"]-data_1[\"Agg_of_all\"].min())\/(data_1[\"Agg_of_all\"].max()-data_1[\"Agg_of_all\"].min())","a4b71b31":"data_1.head()","3688330e":"sns.scatterplot(data = data_1, x=\"Agg_of_all\",y=\"diagnosis\",legend='auto')","77e8cae3":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n","e60607eb":"def claculate_vif(dataset):\n    vif=pd.DataFrame()\n    vif_features = dataset.columns\n    vif[\"vif_values\"] = [variance_inflation_factor(dataset.values,i) for i in range (dataset.shape[1])]\n    return vif","583c80fc":"features = df[['radius_mean', 'texture_mean', \n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']]\nclaculate_vif(features)","b98a25b8":"X=df[['radius_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean',\n       'radius_se', 'texture_se', 'perimeter_se', 'area_se', 'smoothness_se',\n       'compactness_se', 'concavity_se', 'concave points_se', 'symmetry_se',\n       'fractal_dimension_se', 'radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']]\nY=df[\"diagnosis\"]","51d3497e":"from sklearn.model_selection import train_test_split\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.3,random_state=500)","60fa6d00":"#scaling data\n\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","aa6c2ae1":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression()\nclassifier.fit(X_train,Y_train)","678f7346":"y_pred = classifier.predict(X_test)\n","2308e5c5":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nprint(accuracy_score(Y_test, classifier.predict(X_test)))","78b17ccb":"print(confusion_matrix(Y_test, y_pred))","da63e17b":"print(classification_report(Y_test, y_pred))","8069f96a":"from sklearn.neighbors import KNeighborsClassifier\nclassifier=KNeighborsClassifier(n_neighbors =5, metric=\"minkowski\",p=2)\nclassifier.fit(X_train,Y_train)","30eafc03":"y_pred = classifier.predict(X_test)","dbe67492":"from sklearn.metrics import confusion_matrix,classification_report\ncm = confusion_matrix(Y_test,y_pred)\nprint(cm)","6f102cc0":"print(classification_report(Y_test,y_pred))","e328f51a":"from sklearn.svm import SVC\nsvc_model = SVC()\nsvc_model.fit(X_train,Y_train)","a0de92bb":"y_pred_svc = svc_model.predict(X_test)","bab76e4d":"from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\nprint(accuracy_score(Y_test, y_pred_svc))","c28bc087":"print(confusion_matrix(Y_test, y_pred_svc))\n","2fa45344":"print(classification_report(Y_test, y_pred))","5c2c2d8d":"### So the agg_of_all above 0.2 are generally Cancer with Malignancy\u00b6\n","af07c286":"### Checking for outliers\n","978a1e78":"# Thanks!","c652f320":"### Import Modules","f2ec73ac":"### Above graph doesn't tell much about the diagnosis","1ef7621b":"### Feature Engineering:Normalizing the Data","72fe8212":"### Visualize The Data","fb4917c1":"### Read The Dataset","911c6447":"### Check The Correlation "}}