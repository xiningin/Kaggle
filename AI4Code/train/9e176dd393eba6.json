{"cell_type":{"bce48161":"code","368e2a68":"code","e49f9ee6":"code","b6b1dc46":"code","48bbe78f":"code","526974a4":"code","158f56cb":"code","f1009346":"code","dde43069":"code","08ce383e":"code","b8d0023e":"code","64ec206c":"code","a4040533":"code","8ed5be1b":"code","89c8a68e":"code","99bfc949":"code","aef5a5fb":"code","e43aaa8e":"code","0858aca9":"code","6051c705":"code","4dbea331":"code","d787fb5f":"code","a1c54a17":"markdown","0d39cf67":"markdown","e22b9563":"markdown","e1b42cf0":"markdown","9668f343":"markdown","27d7e202":"markdown","b23941ff":"markdown","790130aa":"markdown","95c38d2d":"markdown","0cf94726":"markdown","7b3bddc3":"markdown","60b03be4":"markdown","53ad7031":"markdown","87b6ccfe":"markdown","8bd87655":"markdown","043eb03f":"markdown","f0b378db":"markdown","558afcaa":"markdown","4109feab":"markdown","ae94627c":"markdown","ac215d8f":"markdown","b7ea8677":"markdown","01e0e984":"markdown","e4fc0609":"markdown","fb1bedef":"markdown","1ab82e3f":"markdown"},"source":{"bce48161":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\nfrom sklearn import preprocessing                            \nfrom sklearn.decomposition import PCA, FastICA\n\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom keras.models import Sequential \nfrom keras import models, utils,backend\nimport keras.utils \nfrom keras.optimizers import Adam   \nfrom keras import layers \nfrom keras.layers import Activation, Dense ,Dropout, BatchNormalization, Input,LeakyReLU\nfrom keras.utils import np_utils\nfrom keras.callbacks import EarlyStopping ,ModelCheckpoint,ReduceLROnPlateau\nfrom sklearn.model_selection import StratifiedKFold\nfrom keras.models import model_from_json  \n\n\nimport sys\nsys.path.append('..\/input\/iterative-stratification\/iterative-stratification-master')\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns","368e2a68":"trainf = pd.read_csv('\/kaggle\/input\/lish-moa\/train_features.csv')\ntestf = pd.read_csv('\/kaggle\/input\/lish-moa\/test_features.csv')\nsub = pd.read_csv('..\/input\/lish-moa\/sample_submission.csv')\ntargets = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_scored.csv')\ntargets1 = pd.read_csv('\/kaggle\/input\/lish-moa\/train_targets_nonscored.csv')\n\ntrain = trainf[trainf.cp_type != 'ctl_vehicle'].drop(columns=['cp_type'])\ntest = testf[testf.cp_type != 'ctl_vehicle'].drop(columns=['cp_type'])\nAtrain = train\nAtest = test","e49f9ee6":"train.head()","b6b1dc46":"test.head()","48bbe78f":"# Lets see size and check for Nulls\nprint('Train dataset',train.shape)\nprint('Test dataset',test.shape)\nmissing_train=(train.isnull().sum()).sum()\nmissing_test=(test.isnull().sum()).sum()\nprint('Missing values in train set:',missing_train,'Missing values in test set:',missing_test)","526974a4":"categ_feat_train = train.select_dtypes(include=['object'])\nnum_feat_train = train.select_dtypes(exclude=['object'])\nprint('Numerical features',len(num_feat_train.columns))\nprint('Categorical features',len(categ_feat_train.columns))\nprint(categ_feat_train.columns)","158f56cb":"matplotlib.rc('figure', figsize=(20, 12))\nfig, ax =plt.subplots(2,3)\nsns.countplot(x='cp_type', data=trainf,ax=ax[0,0])\nax[0,0].set_title('TRAIN- Compound \/ control treatment', fontsize=14, weight='bold')\nsns.countplot(x='cp_dose', data=trainf,ax=ax[0,1])\nax[0,1].set_title('TRAIN- Doses  Low \/ High', fontsize=14,weight='bold')\nsns.countplot(x='cp_time', data=trainf,ax=ax[0,2])\nax[0,2].set_title('TRAIN- Treatment duration (hours)', fontsize=14,weight='bold')\nsns.countplot(x='cp_type', data=testf,ax=ax[1,0])\nax[1,0].set_title('TEST- Compound \/ control treatment', fontsize=14, weight='bold')\nsns.countplot(x='cp_dose', data=testf,ax=ax[1,1])\nax[1,1].set_title('TEST- Doses  Low \/ High', fontsize=14,weight='bold')\nsns.countplot(x='cp_time', data=testf,ax=ax[1,2])\nax[1,2].set_title('TEST- Treatment duration (hours)', fontsize=14,weight='bold')\nplt.show()","f1009346":"matplotlib.rc('figure', figsize=(20, 4))\nfig, ax =plt.subplots(1,4)\nfig.suptitle('Genes distributions', fontsize=16)\nsel_genes = [7,16,33,66]\ni=0\nfor item in sel_genes:\n    train.hist(column=['g-'+ str(item)], ax=ax[i])\n    i+=1\nplt.show()","dde43069":"matplotlib.rc('figure', figsize=(20, 4))\nfig.suptitle('Genes distributions G-0 to G-771', fontsize=16)\nsel_genes = list(range(0, 771))\nfor item in sel_genes:\n    sns.kdeplot(data=train['g-'+ str(item)], shade=False,legend=False)\nplt.show()","08ce383e":"matplotlib.rc('figure', figsize=(20, 4))\nfig, ax =plt.subplots(1,4)\nfig.suptitle('Cells distributions', fontsize=16)\nsel_cells = [7,16,30,45]\ni=0\nfor item in sel_cells:\n    train.hist(column=['c-'+ str(item)], ax=ax[i])\n    i+=1\nplt.show()","b8d0023e":"matplotlib.rc('figure', figsize=(20, 4))\nfig.suptitle('Cells distributions c-0 to c-771', fontsize=16)\nsel_cells = list(range(0, 99))\nfor item in sel_cells:\n    sns.kdeplot(data=train['c-'+ str(item)], shade=False,legend=False)\nplt.show()","64ec206c":"Cells = [c for c in train.columns if \"c-\" in c]\nplt.figure(figsize=(10,6))\nsns.heatmap(train[Cells].corr(), cmap='viridis')\nplt.title('Cell viability correlations (Train set)', fontsize=14, weight='bold')\nplt.show()","a4040533":"targets.head()","8ed5be1b":"targets.columns","89c8a68e":"target_classes1 = targets.drop(['sig_id'], axis=1).astype(bool).sum(axis=1).reset_index()\ntarget_classes1.columns = ['Sig_Ids', 'activations']\ntarget_classes1 = target_classes1.groupby(['activations'])['Sig_Ids'].count().reset_index()\ntarget_classes2 = targets1.drop(['sig_id'], axis=1).astype(bool).sum(axis=1).reset_index()\ntarget_classes2.columns = ['Sig_Ids', 'activations']\ntarget_classes2 = target_classes2.groupby(['activations'])['Sig_Ids'].count().reset_index()\nmatplotlib.rc('figure', figsize=(8, 5))\nfig, ax =plt.subplots(1,2)\nsns.barplot(x=\"activations\", y=\"Sig_Ids\", data=target_classes1, ax=ax[0]).set_title('Scored targets')\nsns.barplot(x=\"activations\", y=\"Sig_Ids\", data=target_classes2, ax=ax[1]).set_title('NonScored targets')\nplt.show()","99bfc949":"\nfrom sklearn.feature_selection import VarianceThreshold\n\ncombo = pd.concat([train, test], axis=0)\ncols=combo.columns.tolist()\nthr = VarianceThreshold(0.95)  \nVT_ALL = thr.fit_transform(combo[cols[4:]])\ncateg= combo.iloc[:, :4]","aef5a5fb":"from sklearn.preprocessing import QuantileTransformer\n\nQUA = QuantileTransformer(n_quantiles=250, output_distribution='normal')\nVT_ALL = QUA.fit_transform(VT_ALL)","e43aaa8e":"all_ica = FastICA(n_components=300,max_iter=200)\nVT_ALL_ica=all_ica.fit_transform(VT_ALL)\n\nVT_ALL_ica_df = pd.DataFrame(VT_ALL_ica , columns=[\"VTICA\" + str(i) for i in range(300)], index=combo.index)\ncateg= combo.iloc[:, :4]\n\n\nnew_combo= pd.concat([categ,VT_ALL_ica_df], axis=1 )\ntrain = new_combo[ : train.shape[0]]\ntest = new_combo[-test.shape[0] : ]\n","0858aca9":"train['cp_time'] = train['cp_time'].map( {24: 1, 48: 2, 72: 3} ).astype(int)\n#train = pd.get_dummies(train, columns = [\"cp_type\"], prefix=\"CPTP\",drop_first=True)\ntrain = pd.get_dummies(train, columns = [\"cp_dose\"], prefix=\"CPD\", drop_first=True)\n\ntest['cp_time'] = test['cp_time'].map( {24: 1, 48: 2, 72: 3} ).astype(int)\n#test = pd.get_dummies(test, columns = [\"cp_type\"], prefix=\"CPTP\",drop_first=True)\ntest = pd.get_dummies(test, columns = [\"cp_dose\"], prefix=\"CPD\",drop_first=True)","6051c705":"from sklearn.model_selection import train_test_split \nfrom sklearn.metrics import accuracy_score\n\ny = targets.drop(['sig_id'], axis=1)\nX = train.values\nXtest = test.values\n\n","4dbea331":"from skmultilearn.problem_transform import LabelPowerset\nfrom scipy.sparse import issparse, csr_matrix\nfrom skmultilearn.ensemble import RakelD\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\n\nclf=SVC(kernel='rbf',C=9,probability=True)\nclassifier1 = RakelD(base_classifier=clf ,\n                    base_classifier_require_dense=[True, True],labelset_size=3)\n\nclassifier1.fit(X,y)","d787fb5f":"y_pred = classifier1.predict_proba(csr_matrix(Xtest))\ny_pred0=y_pred.toarray()\nfinal_df = pd.DataFrame(y_pred0, index =[Atest.index]) \nsub.loc[Atest.index,1:] = final_df.values\nsub.to_csv('submission.csv', index=False)","a1c54a17":"# <font color='blue'>  Rakel-d <\/font>\n\nRandom k-Labelsets is a method that generates random subsets of labels, training a multiclass classifier for each subset introduced [here](https:\/\/intelligence.csd.auth.gr\/wp-content\/uploads\/2019\/03\/tsoumakas-tkde10.pdf). This way problems like the huge number of label combinations as well as problems identifying new unseen labels, are mostly avoided.For RAkELd you have to select two main parameters. The base_classifier and number of labels in a subset.\n\n### Base_classifier selection\n\nI examined RandomForest and SVM for base_classifier and finally selected the second one after testing various hyperparameters for both. Tuning SVM plays an important role in final result so as for kernel I tested using 'linear' and 'poly' with degree from 3 to 8 but both performed poorly compared to rbf. For regularization parameter C, I used values from 1 to 20 ending up to 9 for best score.\n\n### Number of labels\n\nOriginal paper suggests three as the magic number for labels, I also tried up to 6 with no better results so decided to keep it as suggested. Rakel is a very promising solution but computationaly expencive too, needs hours to provide a solution ! Dimensionality reduction techniques did help to overcome this drawback, reducing feature space.","0d39cf67":"### <font color='blue'> Loading datasets <\/font>","e22b9563":"There is a clear high correlation between cell viabilities that has to be examined. ","e1b42cf0":"## <font color='blue'> Cell features analysis <\/font>\n\nThese features are related to cell viability, high negative cell viability values reflect a high numbers of cell deaths and low values high survival rates. Their distributions are skewed with a normal-like look but with heavy negative tails and peaks at -10 probably due to experiment data normalization procedure. ","9668f343":"# <font color='blue'> Introduction  <\/font>\n\nThere has been a change in drug discovery procedure in the last years,to a more targeted model based on the understanding of the underlying biological mechanism of a disease. Scientists seek to identify a protein target associated with a disease and develop a molecule that can modulate that protein target. Mechanism-of-action (MoA) is a label that describes the biological activity of a given molecule. One approach is to treat a sample of human cells with the drug and then analyze the cellular responses with algorithms that search for similarity to known patterns in large genomic databases, such as libraries of gene expression or cell viability patterns of drugs with known MoAs. For this competition, we will be predicting the probability that the sample(sig_id) had a positive response for each MoA target , given various inputs such as gene expression data and cell viability data. The data is based on a new technology that measures simultaneously (within the same samples) human cells\u2019 responses to drugs in a pool of 100 different cell types (thus solving the problem of identifying ex-ante, which cell types are better suited for a given drug). Drugs can have multiple MoA annotations, so the task is formally a multi-label classification problem. The solution presented examines Rakeld classifier [5] from Scikit-multilearn,a library for multi-label classification.","27d7e202":"The targets we have to predict are basically probabilities of activation for each of various proteins-targets. This is a multi-label problem since one sample can be classified to multiple targets or none. The main target types as we can see are activators, inhibitors, receptors agonists and antagonists, agents, stimulants. \n\n* Receptors are chemical structures, composed of protein, that receive and transduce signals that may be integrated into biological systems.[1] These signals are typically chemical messengers which bind to a receptor and cause some form of cellular\/tissue response, e.g. a change in the electrical activity of a cell.\n * Agonists are chemicals that bind to a receptors and activate them to produce a biological response.  \n * An antagonist blocks the action of the agonist, while an inverse agonist causes an action opposite to that of the agonist.\n* Activators : They are proteins that increase transcription of a gene or set of genes. Activators are considered to have positive control over gene expression, as they function to promote gene transcription and, in some cases, are required for the transcription of genes to occur. Most activators are DNA-binding proteins that bind to enhancers  \n* Inhibitors  : An enzyme inhibitor is a molecule that binds to an enzyme and decreases its activity\n   \n  \n\n","b23941ff":"## Using ICA to reduce dimensionality\n\nI examined both PCA and ICA to perform an initial reduction in the dimensionality of the input dataset while still preserving most of the important data structure. There is work presenting the use of ICA in dimensionality reduction, deconvolution, data pre-processing, meta-analysis, and others applied to different data types (transcriptome, methylome, proteome, single-cell data) like [this one](https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC6771121\/) and also references that ICA can be selected over PCA depending on the case. My best results were with ICA so I will use it in this kernel. Determining the optimal number of independent components is a difficult task and is selected by trials, [this article ](https:\/\/bmcgenomics.biomedcentral.com\/articles\/10.1186\/s12864-017-4112-9) can be very informative.\n<img src=\"https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC6771121\/bin\/ijms-20-04414-g001.jpg\" width=\"600\">\n","790130aa":"### <font color='blue'> Cell correlation analysis <\/font>\nLet's explore how cells are correlated.","95c38d2d":"### <font color='blue'>     Missing Values<\/font>","0cf94726":"There are two target files containing MOAs of interest, the first one (train_targets_scored.csv) contains features that are scored and an auxiliary one (train_targets_nonscored.csv) having elements that are not scored . Let's see what type of features they have","7b3bddc3":"<a id=\"s1\"><\/a>\n### <font color='blue'> Importing libraries <\/font>","60b03be4":"## <font color='blue'> Removing uninformative features <\/font>\n\nThe fewer and more useful features we have, the better for our models. An interesting idea could be to try to find and remove any \"uninformative\" genes in our data sets like those ones with very low expression values in most samples or those whose expression values shows small variation throughout samples. Removing those feature could help our models perform better and faster. We have to remember though that what we see comes after z-score and data quantile normalization so we have to do some \"reverse enginineering\", but there is no way to get back to values before transformations since statistics like mean and std are lost. So we will use data as is and try VarianceThreshold to detect and remove low variance features (we have already scaled our data). Target variability was set to 90% with trial and error. ","53ad7031":"## <font color='blue'>Genes correlation analysis <\/font>\n\nIt would probably be useful to examine if there is any pairwise correlation (suggesting  a biological relationship) between genes, such that changes in the expression levels of one gene correspond to changes in the expression level of another gene.\nThere are references though like [this ](https:\/\/www.frontiersin.org\/articles\/10.3389\/fmicb.2015.00650\/full) , suggesting that \u201c \u2026. computation of pairwise gene associations (correlation; mutual information) produces unexpectedly large variation in estimates of pairwise gene association\u2014regardless of the metric used, the organism under study, or the number and source of the samples probably due to sampling bias.\u201d And also \u201c\u2026.many individual genes show small differences in absolute gene expression levels across the set of samples. These small differences are due mainly to \u201cnoise\u201d instead of \u201csignal\u201d attributable to environmental or genetic perturbations. \nSo we will not examine corellations but we can keep that ICA as we shall see later could be used as a helpful denoising step even though it might be sightly biased towards highly expressed genes.","87b6ccfe":"### <font color='blue'>  Cp_type, cp_time and cp_dose features <\/font>\nThere are three categorical features cp_type,cp_time and cp_dose. Let us see how their values are distributed in the training dataset. ","8bd87655":"We will load two data sets, train and test. Train data set is used for model training and test data set will be the unseen data used to make predictions, lets see now how they look like.","043eb03f":"<a id=\"s3\"><\/a>\n## <font color='blue'> Exploring the data<\/font>","f0b378db":"As we can see doses and treatment duration times are distributed equally but only 8% of the samples are treated with a control perturbation. Distributions are similar both in training and test sets ,probably indicating that they follow same experiment setup (since each combo of drug-timing-dose can be viewed as one independent experiment, so there are 6 independent realizations per drug, although some drugs have been profiled more than once). ","558afcaa":"We can see that numbers of activations differ for scored and non_scored datasets, but in any case more than 90% of the drugs activate zero or one of the target columns.","4109feab":"<img src=\"https:\/\/cdn.pixabay.com\/photo\/2016\/11\/30\/12\/17\/cells-1872666_960_720.jpg\" width=\"600\">\n<i> Image by <a href=\"https:\/\/pixabay.com\/users\/qimono-1962238\/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1872666\">Arek Socha<\/a> from <a href=\"https:\/\/pixabay.com\/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=1872666\">Pixabay<\/a> <\/i>","ae94627c":"## <font color='blue'> REFERENCES <\/font>  \nThere are really many inspiring notebooks and discussions published for this contest covering various aspects, that helped me a lot in to build this kernel to mention a few:\n\n* [1] https:\/\/www.kaggle.com\/c\/lish-moa\/discussion\/184005\n* [2] https:\/\/www.kaggle.com\/isaienkov\/mechanisms-of-action-moa-prediction-eda\n* [3] https:\/\/www.kaggle.com\/rahulsd91\/moa-label-smoothing\n* [4] https:\/\/www.kaggle.com\/nayuts\/moa-pytorch-nn-pca-rankgauss\n* [5] Random k-Labelsets for Multilabel Classification G. Tsoumakas and I. Katakis and I. \n     Vlahavas,IEEE Trans. on Knowledge & Data Engineering vol23 p.1079-1089,2011,ISSN 1041-4347\n    \nThank you very much for your time reading this kernel. Please feel free to leave your comments and suggestions about how I can improve this work. And don't forget , if you found something that you liked or gave you an idea, do UPVOTE!\n        \n    ","ac215d8f":"## <font color='blue'> Gene features  <\/font>\n \nThe role of genes is to encode proteins who dictate how a cell functions. So, genes expressed in a particular cell determine what that cell can do. We can see that genes expression values in our data sets show normal like distribution, with zero mean as random following plots show.","b7ea8677":"# <font color='blue'> Dimensionality reduction <\/font>","01e0e984":"So, there are 876 columns in train and test sets, three of them categorical, and there are no missing values. \n\n* sig_id is the unique primary key of the sample \n* Features with g- : are gene expression levels and there are 772 of them (from g-0 to g-771) \n* Features with c- : are cell viability measurements for each cell line, there are 100 of them (from c-0 to g-99) \n* Features with cp_:  \n  cp_type: samples are treated with a compound(trt_cp) or with a control perturbation (ctl_vehicle) that has no MoAs.   \n  cp_time: duration of the treatment (24, 48 or 72 hours)  \n  cp_dose: dosage of the treatment low\/high (D1\/D2)\n","e4fc0609":"# <font color='blue'>  Categorical Data <\/font>\n In the following part we shall convert all categorical features into dummy\/indicator variables","fb1bedef":"<a id=\"s4\"><\/a>\n## <font color='blue'> Targets <\/font>","1ab82e3f":"## <font color='blue'>  Quantile Transformation <\/font>\n\nIt might be helpful for our models to change distributions using QuantileTransformer, that provides non-linear transformations in which distances between marginal outliers and inliers are shrunk. StandardScaler and MinMaxScaler were also tested but since they are very sensitive to outliers, I didn't use them."}}