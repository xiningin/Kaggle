{"cell_type":{"5dcf09e2":"code","1ca7bc07":"code","307d11ee":"code","03b7cdc4":"code","fc89400f":"code","82624441":"code","6b2135d9":"code","ad41906e":"code","cd14ee41":"code","c0a00053":"code","1cb104bd":"code","07d50afb":"code","31d18ac9":"code","0ca948b0":"code","9a301056":"code","1354e51c":"code","3314f003":"code","c59933b1":"code","a56a670e":"code","4a571d96":"code","d08e3028":"code","4731342a":"code","e51817c5":"code","e7e61826":"markdown","647ffea2":"markdown","27156f3e":"markdown","1191f61f":"markdown","cd8ad813":"markdown","7f1ed8ec":"markdown","c3c981b1":"markdown","c5f0a236":"markdown","4e5229b6":"markdown","0e2b4323":"markdown","64248046":"markdown","adf28e93":"markdown"},"source":{"5dcf09e2":"#Tratamento de dados\n%matplotlib inline\nimport pandas as pd\nimport numpy as np\nimport sklearn \nimport os\n\n#M\u00e9todos de classifica\u00e7\u00e3o\n#a. Berouli Naive-Bayes\nfrom sklearn.naive_bayes import BernoulliNB\n#b. Random Forest\nfrom sklearn.ensemble import RandomForestClassifier\n#c. Logist Regression\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import datasets, linear_model\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import cross_val_score","1ca7bc07":"#cwd = os.getcwd()\n#os.listdir(cwd)","307d11ee":"#base_file = (r\"C:\\Users\\adria\\Documents\\POLI USP\\7\u00ba Semestre\\PMR3508\\1_trabalho\\train_data.csv\")","03b7cdc4":"#base_adult = pd.read_csv(base_file, \n                                         #names=[ \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\"Occupation\", \n                                                        #\"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\n                                                        #\"Hours per week\", \"Country\", \"Target\"],      \n                                        #sep=r'\\s*,\\s*',\n                                        #engine='python',\n                                        #na_values = \"?\")","fc89400f":"#test_file = (r\"C:\\Users\\adria\\Documents\\POLI USP\\7\u00ba Semestre\\PMR3508\\1_trabalho\\test_data.csv\")","82624441":"#test_adult = pd.read_csv(test_file, \n                                         #names=[ 'Id', \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\"Occupation\", \n                                                        #\"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \"Capital Loss\",\n                                                        #\"Hours per week\", \"Country\", \"Target\"],      \n                                        #sep=r'\\s*,\\s*',\n                                        #engine='python',\n                                        #na_values = \"?\")","6b2135d9":"base_adult = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/train_data.csv\",\n                         names=[ \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\n                                                        \"Occupation\", \"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \n                                                        \"Capital Loss\",\"Hours per week\", \"Country\", \"Target\"], \n                        sep = r'\\s*,\\s*',\n                        engine = 'python',\n                        na_values = \"?\")\n\ntest_adult = pd.read_csv(\"\/kaggle\/input\/adult-pmr3508\/test_data.csv\",\n                         names=[ \"Age\", \"Workclass\", \"fnlwgt\", \"Education\", \"Education-Num\", \"Martial Status\",\n                                                        \"Occupation\",\"Relationship\", \"Race\", \"Sex\", \"Capital Gain\", \n                                                        \"Capital Loss\", \"Hours per week\", \"Country\", \"Target\"], \n                        sep = r'\\s*,\\s*',\n                        engine = 'python',\n                        na_values = \"?\")","ad41906e":"#Nesta c\u00e9lula, preencheu-se os espa\u00e7os em branco das vari\u00e1veis que tinham sua caegoria com frequ\u00eancia maior que 50%  com essa maior frequ\u00eancia.\nbase_adult[\"Workclass\"] = base_adult[\"Workclass\"].fillna('Private')\nbase_adult[\"Race\"] = base_adult[\"Race\"].fillna('White')\nbase_adult[\"Sex\"] = base_adult[\"Sex\"].fillna('Male')\nbase_adult[\"Capital Gain\"] = base_adult[\"Capital Gain\"].fillna('0')\nbase_adult[\"Capital Loss\"] = base_adult[\"Capital Loss\"].fillna('0')\nbase_adult[\"Country\"] = base_adult[\"Country\"].fillna('United-States')\nbase_adult[\"Target\"] = base_adult[\"Target\"].fillna('<=50K ') ","cd14ee41":"#Aqui, ap\u00f3s o preenchimento de alguns dados, elimina-se todas as linhas que tenham dados faltantes\nnadult = base_adult.dropna()","c0a00053":"adult_treated = nadult.apply(preprocessing.LabelEncoder().fit_transform)","1cb104bd":"adult_treated = adult_treated.drop(adult_treated.index[0]) #Aqui elimina-se a linha \"intrusa\" observada acima","07d50afb":"#Agora comecei a repetir o tratamento dado na base de aprendizado na base objeto\ntest_adult[\"Workclass\"] = test_adult[\"Workclass\"].fillna('Private')\ntest_adult[\"Race\"] = test_adult[\"Race\"].fillna('White')\ntest_adult[\"Sex\"] = test_adult[\"Sex\"].fillna('Male')\ntest_adult[\"Capital Gain\"] = test_adult[\"Capital Gain\"].fillna(0)\ntest_adult[\"Capital Loss\"] = test_adult[\"Capital Loss\"].fillna(0)\ntest_adult[\"Country\"] = test_adult[\"Country\"].fillna('United-States')\ntest_adult[\"Target\"] = test_adult[\"Target\"].fillna('<=50K ') ","31d18ac9":"natest = test_adult.dropna()","0ca948b0":"test_treated = nadult.apply(preprocessing.LabelEncoder().fit_transform)","9a301056":"test_treated = test_treated.drop(test_treated.index[0]) #Aqui elimina-se a linha \"intrusa\" observada acima","1354e51c":"adult_parametro = adult_treated\naux = adult_parametro.astype(np.int)\n\ncorr_mat = aux.corr()\nf, ax = plt.subplots(figsize=(20, 13))\nsns.heatmap(corr_mat, vmax=.7, square=True, cmap=\"coolwarm\", annot = True)","3314f003":"Xadult = adult_treated[[\"Age\", \"Martial Status\", \"Relationship\",\"Sex\", \"Education-Num\",\"Capital Gain\", \"Capital Loss\", \"Hours per week\"]]\nYadult = adult_treated.Target\n\nXtestAdult = test_treated[[\"Age\", \"Martial Status\", \"Relationship\", \"Sex\", \"Education-Num\",\"Capital Gain\", \"Capital Loss\", \"Hours per week\"]]\nYtestAdult = test_treated.Target","c59933b1":"# a. Implementa\u00e7\u00e3o Bernoulli Naive-Bayes\nclf = BernoulliNB()\nclf.fit(Xadult, Yadult )","a56a670e":"scoresB = cross_val_score(clf, Xadult, Yadult, cv = 10)\nscoresB","4a571d96":"# b. Random Forest\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(Xadult, Yadult)","d08e3028":"rfc_pred = rfc.predict(XtestAdult)\nprint('Accuracy: ',accuracy_score(YtestAdult, rfc_pred))","4731342a":"#c. Regrss\u00e3o Log\u00edstica\nlogmodel = LogisticRegression()\nlogmodel.fit(Xadult,Yadult)","e51817c5":"log_pred = logmodel.predict(XtestAdult)\nprint('Accuracy: ',accuracy_score(YtestAdult, log_pred))","e7e61826":"Sendo assim, o melhor m\u00e9todo dentre os quatro testados (considerando o m\u00e9todo KNN da primeira entrega) \u00e9 o de Random Forest. Isso se deve ao fato de que esse tem um tempo de processamento que, embora seja maior do que os de Regress\u00e3o Log\u00edstica e Nayve Bayes com o m\u00e9todo de Bernoulli \u00e9 aceit\u00e1vel e bem menor que o m\u00e9todo KNN com valida\u00e7\u00e3o cruzada. Al\u00e9m disso, dentre os m\u00e9todos esse \u00e9 o que apresente amior acur\u00e1cia, mesmo com um processamento dos dados supostamente de menor qualidade em rela\u00e7\u00e3o ao m\u00e9todo KNN com valida\u00e7\u00e3o cruzada, corroborando ainda mais para a escolha do m\u00e9todo de Random Forest para an\u00e1lise de dados nesse caso.","647ffea2":"Nome: Adriano Augusto Antongiovanni\nN\u00baUSP: 10333511","27156f3e":"VI - An\u00e1lise dos Resultados","1191f61f":"IV. Sele\u00e7\u00e3o de dados apra an\u00e1lise","cd8ad813":"III. Tratamento de Dados\nMuito do que foi feito aqui \u00e9 o tratamento de dados proposto no exerc\u00edcio anterior. Caso haja algo diferente, ser\u00e1 destacado.","7f1ed8ec":"II. Importar Dados","c3c981b1":"COMPARA\u00c7\u00c3O DE M\u00c9TODOS DE CLASSIFICA\u00c7\u00c3O BASE ADULT","c5f0a236":"V. Aplica\u00e7\u00e3o de M\u00e9todos de An\u00e1lise de Dados\nOs classificadores testados ser\u00e3o:\na. Bernoulli Naive-Bayes\nb. Random Forest\nc. Regress\u00e3o Log\u00edstica","4e5229b6":"I. Importar Bibliotecas","0e2b4323":"A an\u00e1lise em rela\u00e7\u00e3o ao primeiro trabalho n\u00e3o \u00e9 significativa, uma vez que o tratamento dos dados foi muito mais profundo no primeiro trabalho, resultando numa acur\u00e1cia para o m\u00e9todo KNN com valida\u00e7\u00e3o cruzada de 0.85270. ","64248046":"Nenhum dos m\u00e9todos utilizados apresenta tempo de execu\u00e7\u00e3o significativamente maior do que outro. Isso significa que o crit\u00e9rio de escolha entre um m\u00e9todo e outro deve se basear apenas em qual acur\u00e1cia esse m\u00e9todo apresenta.","adf28e93":"Neste sentido, as acur\u00e1cias obtidas com a Regress\u00e3o Log\u00edsitca (0.78383) e Nayve Bayes com o m\u00e9todo de Bernoulli (0.79589), apesar de menores, n\u00e3o descartam nescessariamente esses m\u00e9todos em rela\u00e7\u00e3o ao KNN, mas sim podem descartar o m\u00e9todo utilizado para tratamento dos dados neste segundo exerc\u00edcio, al\u00e9m do pr\u00f3prio fato do m\u00e9todo KNN ter um tempo de processamento consider\u00e1velmente superior que esses. De qualquer maneira, mesmo com esse suposto tratamento pior de dados, o m\u00e9todo Random Forest teve acur\u00e1cia superior a todos os citados anteriormente (0.91952)."}}