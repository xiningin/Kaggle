{"cell_type":{"53cbfff4":"code","3af457a4":"code","ef17429c":"code","9db55e0e":"code","cda0dabe":"code","40e58b86":"code","aeb19f88":"code","5360c1bf":"code","e7f26291":"code","cf2acc98":"code","90afaa3c":"code","4d64f8ff":"code","0942a332":"code","99a5f1a4":"code","acc9f1aa":"code","aa33fefb":"code","b3623b22":"code","6427a0e7":"code","44aafd57":"code","27a4e23e":"code","4b0f9b63":"code","0d7ba34e":"code","13a0734c":"code","16a66cb7":"code","5ccc3732":"code","0084b1c8":"code","d26524fb":"code","a7e9dfde":"code","39ca4f7f":"code","acdbfee8":"code","6bb09464":"code","530dd0fe":"code","1e01d02e":"code","be08acb7":"code","340de9a5":"code","42f66b9b":"code","d6520371":"code","b4399980":"code","095d6fa5":"code","5c00810f":"code","6de51a3f":"code","46544fde":"code","ca817a64":"code","bcb93935":"code","c24a4d69":"code","56cb984e":"code","6c7a7108":"code","3b2b4c1b":"code","abb28d7e":"code","dab8a5db":"code","c29ac473":"code","13d30344":"code","30192533":"code","a9d6f7d0":"code","e987548e":"code","d34f1b0e":"code","369fd8d5":"code","f932a69a":"code","bd7bf024":"code","cd34ee26":"code","daa5617f":"code","d05d3f9e":"code","723b4a9a":"code","e440b545":"code","4c2dfed4":"code","5cd55215":"code","ad5e4be2":"code","61dc6f9d":"code","a5e417b4":"code","a287e489":"code","2a70e57c":"code","e1464982":"code","d743c2db":"code","141e5497":"code","313bc795":"code","c6a56135":"code","e8ecfe87":"code","e0d06579":"code","77ef13d4":"code","f8f654eb":"code","bb4a0441":"code","c699fecf":"code","da087257":"code","f42234e6":"code","fed51bd1":"code","8d189d41":"code","e47826f7":"code","842a62dc":"code","49f4a226":"code","24a60d0b":"code","16cafe1c":"code","d64f6682":"code","9859848d":"code","67587f7c":"code","122c7e90":"code","91b97ba0":"code","2b1fc215":"code","3c24bbc0":"code","ec8215e0":"code","49f7ef0c":"code","ab058ed3":"code","c902016b":"code","25641401":"code","e5de825f":"code","daa50d55":"code","01e494db":"code","f15e27ef":"code","567266a5":"code","ceee7dc2":"code","4c566fbc":"code","66ffc7ef":"code","17931711":"code","2e02ad9c":"code","5ca90ca9":"code","badb16ca":"code","29c3398a":"code","9f35a39c":"code","206555f4":"code","f40096e4":"code","e66dc122":"code","5b927054":"markdown","ab3e71b8":"markdown","4a5d46e5":"markdown","37ee83a1":"markdown","c7e466c9":"markdown","57dd0b75":"markdown"},"source":{"53cbfff4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport zipfile\nimport os\nimport glob, re","3af457a4":"# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ef17429c":"# ZIP\u3067\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u4e00\u901a\u308a\u8aad\u307f\u8fbc\u307f\npath_list = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path_list.append(os.path.join(dirname, filename))\n        \npath_list.sort()\nprint(path_list)\nair_reserve = pd.read_csv(path_list[0])\nair_store_info = pd.read_csv(path_list[1])\nair_visit_data = pd.read_csv(path_list[2])\ndate_info = pd.read_csv(path_list[3])\nhpg_reserve = pd.read_csv(path_list[4])\nhpg_store_info = pd.read_csv(path_list[5])\nsample_submission = pd.read_csv(path_list[6])\nstore_id_relation = pd.read_csv(path_list[7])","9db55e0e":"air_reserve","cda0dabe":"air_store_info","40e58b86":"air_visit_data","aeb19f88":"date_info","5360c1bf":"hpg_reserve","e7f26291":"hpg_store_info","cf2acc98":"sample_submission","90afaa3c":"store_id_relation","4d64f8ff":"# sample_submittion\u306e\u4e2d\u8eab\u3092\u78ba\u8a8d\n# air_\u30b9\u30c8\u30a2ID_\u65e5\u4ed8 \u306e\u60c5\u5831\u304b\u3089\u3001\u6765\u5ba2\u6570\u3092\u4e88\u6e2c\u3057\u3066\u6b32\u3057\u3044\n# \u982d\u304b\u308920\u4ef6\nprint(sample_submission.head(20))\n\n# (\u884c\u6570\u3001\u5217\u6570)\nsample_submission.shape","0942a332":"# \u5143\u3005\u306e\u3082\u306e\u306f\u6b8b\u3057\u3066\u304a\u304f\ntest_data = sample_submission\n\n# \u5143\u3005\u306eID\u304b\u3089store_id\u3068visit_date\u3092\u5207\u308a\u51fa\u3059\ntest_data['store_id'] = test_data['id'].str[:20]\ntest_data['visit_date'] = test_data['id'].str[21:]\n# \u73fe\u6642\u70b9\u3067\u306f visitors \u306b\u610f\u5473\u304c\u306a\u3044\u306e\u3067\u5207\u308a\u51fa\u3057\ntest_data.drop(['visitors'], axis=1, inplace=True)\n# \u65e5\u4ed8\u306e\u578b\u3092object\u304b\u3089datetime\u306b\u5909\u63db\ntest_data['visit_date'] = pd.to_datetime(test_data['visit_date'])\n# \u5ff5\u306e\u305f\u3081\u30ab\u30e9\u30e0\u60c5\u5831\u306e\u78ba\u8a8d\ntest_data.info()\n# \u30d8\u30c3\u30c0\u30fc\u60c5\u5831\u3082\u307f\u3066\u304a\u304f\ntest_data.head()","99a5f1a4":"# air_visit_data \u306e\u524d\u51e6\u7406\n# Air\u30ec\u30b8\u306e\u5404\u30ec\u30b9\u30c8\u30e9\u30f3\u306e\u65e5\u4ed8\u3068\u5b9f\u5ba2\u6570\u306e\u30c7\u30fc\u30bf\n# -> \u4e88\u6e2c\u3059\u3079\u304d\u30ec\u30b9\u30c8\u30e9\u30f3\u306e\u904e\u53bb\u306e\u5ba2\u6570\u30c7\u30fc\u30bf  (\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u306e\u904e\u53bb\u306evimps\u3068\u4f3c\u3066\u308b\uff1f)\n\n# visit_date\u3092\u65e5\u4ed8\u65b9\u306b\u3059\u308b\nair_visit_data['visit_date'] = pd.to_datetime(air_visit_data['visit_date'])\nair_visit_data.head()","acc9f1aa":"# (\u884c\u6570\u3001\u5217\u6570)\nair_visit_data.info()","aa33fefb":"# \u3042\u308b\u30ec\u30b9\u30c8\u30e9\u30f3\uff08air_00a91d42b08b08d9\uff09\u306e\u5b9f\u5ba2\u6570\u3092\u78ba\u8a8d\n## \u6761\u4ef6\u306b\u5408\u3046\u3082\u306e\u3092\u9078\u629e\nstore_sample = air_visit_data[air_visit_data['air_store_id'] == 'air_00a91d42b08b08d9']\n\n## \u57fa\u672c\u7d71\u8a08\u91cf\u306e\u78ba\u8a8d\n## \u5e73\u574726.08\u4eba\u3001\u6700\u592799\u4eba\u306a\u3069\u306e\u60c5\u5831\nstore_sample.describe()","b3623b22":"# visit_date\u306e\u78ba\u8a8d\n# \u88ab\u308a\u306a\u3057\u305d\u3046\uff08\u89e3\u8aac\u3067\u306ffirst, last\u3082\u3042\u308b\u304c\u3053\u3061\u3089\u3067\u306f\u8868\u793a\u3055\u308c\u3066\u3044\u306a\u3044\uff09 -> date\u578b\u306b\u3057\u3066\u3044\u306a\u3044\u3060\u3051\u3067\u3057\u305f\n# 2016\u5e747\u67081\u65e5\u301c2017\u5e744\u670822\u65e5\u306e\u30c7\u30fc\u30bf\u3092\u5143\u306b\u30012017\u5e744\u6708\u6700\u7d42\u9031\u301c2017\u5e745\u6708\u672b\u65e5\u307e\u3067\u306e\u5404\u65e5\u306e\u6765\u5e97\u6570\u3092\u4e88\u6e2c\nstore_sample.visit_date.describe()","6427a0e7":"# \u72d9\u3044\u3092\u5b9a\u3081\u308b\ntarget_df = air_visit_data\ntarget_df.info()\ndate_info['calendar_date'] = pd.to_datetime(date_info['calendar_date'])\ndate_info.info()","44aafd57":"target_df =  pd.merge(target_df, date_info, how='left', left_on='visit_date', right_on='calendar_date').drop(columns='calendar_date')\n# \u65e5\u4ed8\u304b\u3089\u66dc\u65e5\u3092\u7b97\u51fa (0-6, 0:monday\u3068\u3057\u3066\u6570\u5024\u306b\u5909\u63db\u3055\u308c\u308b)\n# one_hot = pd.get_dummies(target_df['day_of_week'])\n# target_df = target_df.join(one_hot).drop(columns='day_of_week')\ntarget_df['visit_date'] = pd.to_datetime(target_df['visit_date'])\ntarget_df","27a4e23e":"target_df","4b0f9b63":"import pandas.tseries.offsets as offsets\n\n# \u7fcc\u65e5\u304c\u4f11\u65e5\u304b\u30d5\u30e9\u30b0\u3068\u3001\u571f\u65e5\u542b\u3081\u3066\u4f11\u307f\u304b\u30d5\u30e9\u30b0\u306b\u5909\u66f4\n# \u6fc0\u70c8\u306b\u9045\u3044\u306e\u3067\u306a\u3093\u3068\u304b\u3067\u304d\u305d\u3046\nfor index, row in target_df.iterrows():\n    tommorow = row['visit_date'] + offsets.Day()\n    # \u571f\u65e5\u306f\u305d\u3082\u305d\u3082\u4f11\u65e5\n    if row['day_of_week'] == 'Saturday' or row['day_of_week'] == 'Sunday':\n        target_df.loc[index, 'holiday_flg'] = 0\n    if index + 1 < len(target_df):\n        row_next = target_df.loc[index + 1]\n        if row_next['air_store_id'] == row['air_store_id'] and (row_next['holiday_flg'] == 1 or row['day_of_week'] == 'Saturday'):\n            target_df.loc[index, 'tomorrow_holiday_flg'] = 1\n            continue\n    target_df.loc[index, 'tomorrow_holiday_flg'] = 0","0d7ba34e":"target_df.head(30)","13a0734c":"test_data.info()","16a66cb7":"test_data =  pd.merge(test_data, date_info, how='left', left_on='visit_date', right_on='calendar_date').drop(columns='calendar_date')\n# \u65e5\u4ed8\u304b\u3089\u66dc\u65e5\u3092\u7b97\u51fa (0-6, 0:monday\u3068\u3057\u3066\u6570\u5024\u306b\u5909\u63db\u3055\u308c\u308b)\n# one_hot = pd.get_dummies(test_data['day_of_week'])\n# test_data = test_data.join(one_hot).drop(columns='day_of_week')\ntest_data['visit_date'] = pd.to_datetime(test_data['visit_date'])\ntest_data","5ccc3732":"# \u7fcc\u65e5\u304c\u4f11\u65e5\u304b\u30d5\u30e9\u30b0\u3068\u3001\u571f\u65e5\u542b\u3081\u3066\u4f11\u307f\u304b\u30d5\u30e9\u30b0\u306b\u5909\u66f4\n# \u6fc0\u70c8\u306b\u9045\u3044\u306e\u3067\u306a\u3093\u3068\u304b\u3067\u304d\u305d\u3046\nfor index, row in test_data.iterrows():\n    tommorow = row['visit_date'] + offsets.Day()\n    # \u571f\u65e5\u3060\u3063\u305f\u3089\u30d5\u30e9\u30b0\u3092\u6d88\u3059\n    if row['day_of_week'] == 'Saturday' or row['day_of_week'] == 'Sunday':\n        test_data.loc[index, 'holiday_flg'] = 0\n    if index + 1 < len(test_data):\n        row_next = test_data.loc[index + 1]\n        if row_next['store_id'] == row['store_id'] and (row_next['holiday_flg'] == 1 or row['day_of_week'] == 'Saturday'):\n            test_data.loc[index, 'tomorrow_holiday_flg'] = 1\n            continue\n    test_data.loc[index, 'tomorrow_holiday_flg'] = 0","0084b1c8":"test_data","d26524fb":"train_data = target_df.copy()\ntrain_data","a7e9dfde":"# \u4e00\u65e6\u4fdd\u5b58\ntrain_data.to_csv('\/kaggle\/working\/train_data.csv')\ntest_data.to_csv('\/kaggle\/working\/test_data.csv')\n","39ca4f7f":"# \u8aad\u307f\u76f4\u3057\ntrain_data = pd.read_csv('\/kaggle\/working\/train_data.csv')\ntest_data = pd.read_csv('\/kaggle\/working\/test_data.csv')\ntrain_data['visit_date'] = pd.to_datetime(train_data['visit_date'])\ntest_data['visit_date'] = pd.to_datetime(test_data['visit_date'])","acdbfee8":"mean_data = train_data.groupby(['air_store_id', 'day_of_week', 'holiday_flg', 'tomorrow_holiday_flg']).agg({'visitors':'median'}).reset_index()\nmean_data.columns = ['air_store_id', 'day_of_week', 'holiday_flg', 'tomorrow_holiday_flg','median_visitors_all']\nmean_data\n\n# # train_data(\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf)\u304b\u3089air_store_id\u3068dow\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066visitors\u306e\u4e2d\u592e\u5024\uff08median\uff09\u3092\u7b97\u51fa\n# agg_data = train_data.groupby(['air_store_id', 'dow']).agg({'visitors':'median'}).reset_index()\n\n# # agg_data\u306e\u30ab\u30e9\u30e0\u540d\u3092\u3064\u3051\u308b\n# agg_data.columns = ['air_store_id', 'dow', 'visitors']\n# agg_data['visitors']= agg_data['visitors']\n \n# # agg_data\u3092\u78ba\u8a8d\n# agg_data.head(12)","6bb09464":"print(date_info)\n\n# data_info\u306e\u795d\u65e5\u30d5\u30e9\u30b0\u304c1\uff08\u30aa\u30f3\uff09\u306e\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\ndate_info[date_info['holiday_flg'] == 1].head(10)\n\n# \u571f\u65e5\u3067\u3082\u795d\u65e5\u3067\u3042\u308c\u3070\u795d\u65e5\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u308b\u304c\u3001\u571f\u65e5\u306f\u57fa\u672c\u7684\u306b\u4f11\u65e5\u306a\u306e\u3067\u795d\u65e5\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\n# \u571f\u65e5\u306e\u5834\u5408\u306f\u30d5\u30e9\u30b0\u30920\u306b\u3059\u308b\u3068\u3044\u3046\u51e6\u7406\u3092\u884c\u3046 (\u571f\u65e5\u304b\u3064\u795d\u65e5\u306e\u65e5\u4ed8\u3092\u53d6\u5f97\u3057\u3001\u30d5\u30e9\u30b0\u30920\u306b\u3059\u308b)\nweekend_hdays = date_info.apply((lambda x:(x.day_of_week=='Sunday' or x.day_of_week=='Saturday') and x.holiday_flg==1), axis=1)\ndate_info.loc[weekend_hdays, 'holiday_flg'] = 0","530dd0fe":"# \u65b0\u3057\u3044\u65e5\u4ed8\u306b\u3088\u308a\u5927\u304d\u3044\u91cd\u307f\u3092\u4e0e\u3048\u308b\n# date_info.index\u306e\u5024\u304c\u5c0f\u3055\u3044\uff1d\u3088\u308a\u6614\u306e\u30c7\u30fc\u30bf\ndate_info['weight'] = (date_info.index + 1) \/ len(date_info) \n \n#\u30d8\u30c3\u30c0\u30fc\u3068\u30c6\u30a4\u30eb\u306e\u60c5\u5831\u3092\u51fa\u3057\u3066\u78ba\u8a8d\nprint(date_info.head())\ndate_info.tail()","1e01d02e":"# air_visit_data\u3068\u91cd\u307f\u3092\u8ffd\u52a0\u3057\u305fdate_info\u3092\u30de\u30fc\u30b8\u3055\u305b\u3066visit_data\u3092\u4f5c\u6210\n# visit_data\u304b\u3089\u4e0d\u5fc5\u8981\u306acalendar_date\u3092\u843d\u3068\u3059\nvisit_data = train_data.merge(date_info, left_on=['visit_date'], right_on='calendar_date', how='left', suffixes=['','_y'])\nvisit_data.drop('calendar_date', axis=1, inplace=True)\nvisit_data.drop('day_of_week_y', axis=1, inplace=True)\nvisit_data.drop('holiday_flg_y', axis=1, inplace=True)\n# visit_data\u306e\u5b9f\u5ba2\u6570\u306bnp.log1p\u306e\u5bfe\u6570\u95a2\u6570\u3092\u4f7f\u3063\u3066\u51e6\u7406\n# \u306a\u305c\uff1f\nvisit_data['visitors'] = visit_data.visitors.map(pd.np.log1p)\n# visit_data\u306e\u78ba\u8a8d\nvisit_data","be08acb7":"# wmean\uff08\u91cd\u307f\u4ed8\u304d\u5e73\u5747\uff09\u306e\u5f0f\u3092\u683c\u7d0d\nwmean = lambda x:( (x.weight * x.visitors).sum() \/ x.weight.sum() )\n# \u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066\u91cd\u307f\u4ed8\u304d\u5e73\u5747\u3092\u7b97\u51fa\nvisitors = visit_data.groupby(\n['air_store_id', 'day_of_week', 'holiday_flg', 'tomorrow_holiday_flg']).apply(wmean).reset_index()\nvisitors.rename(columns={0:'weighted_visitors_all'}, inplace=True) \n# \u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\nvisitors\n\n# air_00a91d42b08b08d9 Monday\n# \u795d\u65e5\u30d5\u30e9\u30b0\u3042\u308a\u3001\u306a\u3057\u3067\u91cd\u307f\u304c\u9055\u3046\u305f\u3081\u3001\u5fae\u5999\u306b\u9055\u3046\u8a08\u7b97\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u308b","340de9a5":"agg_data = pd.merge(mean_data, visitors, on=['air_store_id', 'day_of_week', 'holiday_flg', 'tomorrow_holiday_flg'])\nagg_data['median_visitors_all'] = agg_data.median_visitors_all.map(pd.np.log1p)\nagg_data","42f66b9b":"train_data","d6520371":"agg_data","b4399980":"merged_df = pd.merge(train_data, agg_data, on=['air_store_id','day_of_week','holiday_flg','tomorrow_holiday_flg'], how='left')\nmerged_df = merged_df.drop('Unnamed: 0', axis=1)\nmerged_df","095d6fa5":"test_data","5c00810f":"test_data = test_data.drop('Unnamed: 0', axis=1)\n","6de51a3f":"test_data.rename(columns={'store_id':'air_store_id'}, inplace=True)\nmerged_test_data = pd.merge(test_data, agg_data, on=['air_store_id','day_of_week','holiday_flg','tomorrow_holiday_flg'], how='left').drop('id',axis=1)\nmerged_test_data","46544fde":"train = merged_df.copy()\ntrain","ca817a64":"test = merged_test_data.copy()\ntest","bcb93935":"# \u65e5\u4ed8\u304b\u3089\u66dc\u65e5\u3092\u7b97\u51fa (0-6, 0:monday\u3068\u3057\u3066\u6570\u5024\u306b\u5909\u63db\u3055\u308c\u308b)\none_hot = pd.get_dummies(train['day_of_week'])\ntrain = train.join(one_hot)\ntrain = train.drop('day_of_week',axis=1)\ntrain","c24a4d69":"one_hot = pd.get_dummies(test['day_of_week'])\ntest = test.join(one_hot)\ntest = test.drop('day_of_week',axis=1)","56cb984e":"train.describe()","6c7a7108":"test.describe()","3b2b4c1b":"# \u6b20\u640d\u5024\u3092\u5e73\u5747\u5024\u3067\u57cb\u3081\u308b\ntest['median_visitors_all'] = test['median_visitors_all'].fillna(2.772849)\ntest['weighted_visitors_all'] = test['weighted_visitors_all'].fillna(2.727645)\ntest.describe()","abb28d7e":"train","dab8a5db":"test","c29ac473":"train['date_year'] = train['visit_date'].dt.year\ntrain['date_month'] = train['visit_date'].dt.month\ntrain['date_day'] = train['visit_date'].dt.day\ntrain","13d30344":"test['date_year'] = test['visit_date'].dt.year\ntest['date_month'] = test['visit_date'].dt.month\ntest['date_day'] = test['visit_date'].dt.day\ntest","30192533":"train['date_year'] = train['date_year'] - 2016.5\ntrain","a9d6f7d0":"test['date_year'] = test['date_year'] - 2016.5\ntest","e987548e":"train['date_month'] = train.date_month.map(pd.np.log1p)\ntrain['date_day'] = train.date_day.map(pd.np.log1p)\ntrain['visitors'] = train.visitors.map(pd.np.log1p)\ntest['date_month'] = test.date_month.map(pd.np.log1p)\ntest['date_day'] = test.date_day.map(pd.np.log1p)","d34f1b0e":"train","369fd8d5":"test","f932a69a":"train_df = train[train['visit_date'] <= '2017-01-28'].reset_index().drop('index',axis=1).drop('visit_date',axis=1)\nvalid = train[train['visit_date'] > '2017-01-28'].reset_index().drop('index',axis=1).drop('visit_date',axis=1)\nprint(train_df)\ntrain_df","bd7bf024":"train_df_y = train_df['visitors']\nvalid_y = valid['visitors']\ntrain_df_y","cd34ee26":"train_df_X = train_df.copy().drop(['visitors','air_store_id'], axis=1)\nvalid_X = valid.copy().drop(['visitors','air_store_id'], axis=1)\ntest_df = test.copy().drop(['air_store_id', 'visit_date'], axis=1)\nprint(test_df)\nvalid_X","daa5617f":"import lightgbm as lgb\n\nlgb_train = lgb.Dataset(train_df_X, train_df_y)\nlgb_eval = lgb.Dataset(valid_X, valid_y)\nparams = {'metric': 'rmse','max_depth' : -1}\ngbm = lgb.train(params,\n               lgb_train,\n               valid_sets=(lgb_train, lgb_eval),\n               num_boost_round=10000,\n               early_stopping_rounds=100,\n               verbose_eval=50)\nlgb.plot_importance(gbm, height=0.5, figsize=(8,16))\n\nvalid_y_pred = gbm.predict(valid_X)\n\ny_pred = gbm.predict(test_df)\ny_pred","d05d3f9e":"len(y_pred)","723b4a9a":"submission = sample_submission.drop(['store_id','visit_date'],axis=1)\nsubmission = pd.concat([submission, pd.Series(y_pred)],axis=1)\nsubmission = submission.rename(columns={0:'visitors'})\nsubmission['visitors'] = submission.visitors.map(pd.np.expm1)\nsubmission\n \n# # \u63d0\u51fa\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u898f\u5b9a\u306b\u5408\u3046\u3088\u3046\u306b\u51e6\u7406\u3057\u3066sub_file\u3078\u683c\u7d0d\n# submission = submission[['id', 'visitors']]\n# final['visitors'][final['visitors'] ==0] = submission['visitors'][final['visitors'] ==0]\n# sub_file = final.copy()\n \n# # \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\n# sub_file.head()","e440b545":"submission.to_csv('\/kaggle\/working\/submission.csv', index=False)","4c2dfed4":"import xgboost as xgb\n\nfit_params = {\n    'eval_metric': 'rmse',\n    'eval_set': [[train_df_X,train_df_y]]\n    }\n \n#\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306e\u7bc4\u56f2\nparams = {\n    'learning_rate': list(np.arange(0.05, 0.41, 0.05)),\n    'max_depth': list(np.arange(3, 11, 1))\n}\n","5cd55215":"from sklearn.model_selection import GridSearchCV\n\ndef GSfit(params):\n    regressor = xgb.XGBRegressor(n_estimators=100)\n    grid = GridSearchCV(regressor, params, cv=3, scoring='neg_mean_squared_error',verbose=2)\n    grid.fit(train_df_X,train_df_y)\n    return grid","ad5e4be2":"grid = GSfit(params)\ngrid_best_params = grid.best_params_\ngrid_scores_df = pd.DataFrame(grid.cv_results_)","61dc6f9d":"#\u95a2\u6570\u306e\u51e6\u7406\u3067\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\n#\u30c7\u30fc\u30bf\u53ef\u8996\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#\u4e88\u6e2c\u5024\u3068\u6b63\u89e3\u5024\u3092\u63cf\u5199\u3059\u308b\u95a2\u6570\ndef True_Pred_map(pred_df):\n    RMSE = np.sqrt(mean_squared_error(pred_df['true'], pred_df['pred']))\n    R2 = r2_score(pred_df['true'], pred_df['pred']) \n    plt.figure(figsize=(8,8))\n    ax = plt.subplot(111)\n    ax.scatter('true', 'pred', data=pred_df)\n    ax.set_xlabel('True Value', fontsize=15)\n    ax.set_ylabel('Pred Value', fontsize=15)\n    ax.set_xlim(pred_df.min().min()-0.1 , pred_df.max().max()+0.1)\n    ax.set_ylim(pred_df.min().min()-0.1 , pred_df.max().max()+0.1)\n    x = np.linspace(pred_df.min().min()-0.1, pred_df.max().max()+0.1, 2)\n    y = x\n    ax.plot(x,y,'r-')\n    plt.text(0.1, 0.9, 'RMSE = {}'.format(str(round(RMSE, 5))), transform=ax.transAxes, fontsize=15)\n    plt.text(0.1, 0.8, 'R^2 = {}'.format(str(round(R2, 5))), transform=ax.transAxes, fontsize=15)","a5e417b4":"pred_df = pd.concat([valid_y.reset_index(drop=True), pd.Series(valid_y_pred)], axis=1)\npred_df.columns = ['true', 'pred']\n\nTrue_Pred_map(pred_df)","a287e489":"print(grid_best_params)","2a70e57c":"model = grid.best_estimator_ \nvalid_y_pred = model.predict(valid_X)\ny_pred = model.predict(test_df)\n\npred_df = pd.concat([valid_y.reset_index(drop=True), pd.Series(valid_y_pred)], axis=1)\npred_df.columns = ['true', 'pred']\n\nTrue_Pred_map(pred_df)","e1464982":"xgb_submission = sample_submission.drop(['store_id','visit_date'],axis=1)\nxgb_submission = pd.concat([xgb_submission, pd.Series(y_pred)],axis=1)\nxgb_submission = xgb_submission.rename(columns={0:'visitors'})\nxgb_submission['visitors'] = xgb_submission.visitors.map(pd.np.expm1)\nxgb_submission\n \n# # \u63d0\u51fa\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u898f\u5b9a\u306b\u5408\u3046\u3088\u3046\u306b\u51e6\u7406\u3057\u3066sub_file\u3078\u683c\u7d0d\n# submission = submission[['id', 'visitors']]\n# final['visitors'][final['visitors'] ==0] = submission['visitors'][final['visitors'] ==0]\n# sub_file = final.copy()\n \n# # \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\n# sub_file.head()","d743c2db":"submission","141e5497":"submission_merge = submission.copy()\nsubmission_merge = pd.merge(submission_merge, xgb_submission,on='id',suffixes=['','_y'])\nsubmission_merge['mean_visitors'] = round((submission_merge['visitors'] + submission_merge['visitors_y']) \/ 2)\nsubmission_merge = submission_merge.drop(['visitors', 'visitors_y'], axis=1)\nsubmission_merge = submission_merge.rename(columns={'mean_visitors':'visitors'})\nsubmission_merge","313bc795":"submission_merge.to_csv('\/kaggle\/working\/submission_merge.csv', index=False)","c6a56135":"# sample_submission\u306eID\u3092\u30ec\u30b9\u30c8\u30e9\u30f3ID\u3084\u65e5\u4ed8\u306b\u5206\u3051\u308b\nsample_submission['air_store_id'] = sample_submission.id.map(lambda x: '_'.join(x.split('_')[:-1]))\nsample_submission['calendar_date'] = sample_submission.id.map(lambda x: x.split('_')[2])\n \n# \u91cd\u307f\u4ed8\u304d\u5e73\u5747\u3067\u4e88\u6e2c\u3057\u305fvisitors\u3068sample_submission\u3092\u30de\u30fc\u30b8\u3059\u308b\n# \u795d\u65e5\u30c7\u30fc\u30bf\u3092\u540c\u6642\u306b\u30de\u30fc\u30b8\u3057\u3001\u795d\u65e5\u30d5\u30e9\u30b0\u3067\u7d10\u4ed8\u3051\u308b\nsample_submission.drop('visitors', axis=1, inplace=True)\nsample_submission = sample_submission.merge(date_info, on='calendar_date', how='left')\nsample_submission = sample_submission.merge(\n    visitors, on=['air_store_id', 'day_of_week', 'holiday_flg'], how='left')\n \n# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u78ba\u8a8d\nsample_submission.head()","e8ecfe87":"# \u300cair_store_id\u300d\u3068\u300cday_of_week\u300d\u306e\u307f\u3067\u6b20\u640d\u30c7\u30fc\u30bf\u306b\u91cd\u307f\u5e73\u5747\u3092\u5165\u308c\u308b\nmissings = sample_submission.visitors.isnull()\nsample_submission.loc[missings, 'visitors'] = sample_submission[missings].merge(\n    visitors[visitors.holiday_flg==0], on=('air_store_id', 'day_of_week'), how='left')['visitors_y'].values\n \n# \u6539\u3081\u3066\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nmissing_values_table(sample_submission)\n\n# \u307e\u3060\u4f59\u3063\u3066\u3044\u308b\u306e\u3067\u3001air_store_id\u3060\u3051\u3067\u7d10\u4ed8\u3051\u308b","e0d06579":"# \u300cair_store_id\u300d\u306e\u307f\u306e\u91cd\u307f\u4ed8\u304d\u5e73\u5747\u3092\u8a08\u7b97\u3057\u3066\u6b20\u640d\u30c7\u30fc\u30bf\u3078\u5165\u308c\u308b\nmissings = sample_submission.visitors.isnull()\nsample_submission.loc[missings, 'visitors'] = sample_submission[missings].merge(\n    visitors[['air_store_id', 'visitors']].groupby('air_store_id').mean().reset_index(), \n    on='air_store_id', how='left')['visitors_y'].values\n \n# \u6b20\u640d\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\nmissing_values_table(sample_submission)\n\n# \u5168\u90e8\u57cb\u307e\u3063\u3066\u3044\u308b","77ef13d4":"# visitors\u3092np.expm1\u3067\u51e6\u7406\u3057\u3066\u5b9f\u5ba2\u6570\u3078\u623b\u3059\nsample_submission['visitors'] = sample_submission.visitors.map(pd.np.expm1)\n \n# \u63d0\u51fa\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u898f\u5b9a\u306b\u5408\u3046\u3088\u3046\u306b\u51e6\u7406\u3057\u3066sub_file\u3078\u683c\u7d0d\nsample_submission = sample_submission[['id', 'visitors']]\nfinal['visitors'][final['visitors'] ==0] = sample_submission['visitors'][final['visitors'] ==0]\nsub_file = final.copy()\n \n# \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nsub_file.head()","f8f654eb":"# train(\u5b66\u7fd2\u7528\u30c7\u30fc\u30bf)\u304b\u3089air_store_id\u3068dow\u3092\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066visitors\u306e\u4e2d\u592e\u5024\uff08median\uff09\u3092\u7b97\u51fa\nagg_data = train.groupby(['air_store_id', 'dow']).agg({'visitors':'median'}).reset_index()\n\n# agg_data\u306e\u30ab\u30e9\u30e0\u540d\u3092\u3064\u3051\u308b\nagg_data.columns = ['air_store_id', 'dow', 'visitors']\nagg_data['visitors']= agg_data['visitors']\n \n# agg_data\u3092\u78ba\u8a8d\nagg_data.head(12)","bb4a0441":"# test\u30c7\u30fc\u30bf\u306eair_store_id\u3092\u4fdd\u5b58\u3057\u3001\u5f8c\u3067train\u306b\u9069\u5fdc\u3055\u305b\u308b\nstore_id = []\n\nfor i in test_data['store_id'].unique():\n  store_id += [i]\n\nprint(store_id)","c699fecf":"# ID\u3092\u51e6\u7406\u3059\u308b(test)\nfor index, name in enumerate(store_id):\n  test_data.replace(name, index, inplace = True)","da087257":"test_data['date_year'] = test_data['visit_date'].dt.year\ntest_data['date_month'] = test_data['visit_date'].dt.month\ntest_data['date_day'] = test_data['visit_date'].dt.day\ntest_data = test_data.drop('visit_date',axis=1)\ntest_data","f42234e6":"train_data","fed51bd1":"train_data = pd.merge(train_data, pd.DataFrame(store_id, columns=[\"air_store_id\"]), \n                                    how='inner', on='air_store_id')","8d189d41":"train_data","e47826f7":"# ID\u3092\u51e6\u7406\u3059\u308b(train)\nfor index, name in enumerate(store_id):\n  train_data.replace(name, index, inplace = True)","842a62dc":"train_data['visit_date'] = pd.to_datetime(train_data['visit_date'])\ntrain_data","49f4a226":"train_data['date_year'] = train_data['visit_date'].dt.year\ntrain_data['date_month'] = train_data['visit_date'].dt.month\ntrain_data['date_day'] = train_data['visit_date'].dt.day\ntrain_data = train_data.drop('visit_date',axis=1)\ntrain_data","24a60d0b":"test_data = test_data.drop(columns='id')","16cafe1c":"# \u578b\u3092\u76f4\u3059\ntrain_data = train_data.astype('int64')\ntest_data = test_data.astype('int64')","d64f6682":"train_data","9859848d":"test_data","67587f7c":"train_data.to_csv('train_data.csv')\ntest_data.to_csv('test_data.csv')","122c7e90":"train_df = pd.read_csv('train_data.csv')\ntest_df = pd.read_csv('test_data.csv')","91b97ba0":"# \u76ee\u7684\u5909\u6570\ny = train_df['visitors']\n# \u8aac\u660e\u5909\u6570\nX = train_df.drop(columns=['visitors', 'Unnamed: 0'])\n\n# \u3044\u3089\u306a\u3044\u5217\u3092\u6d88\u3059\ntest_df = test_df.drop(columns=['Unnamed: 0'])\ntest_df = test_df.rename(columns={'store_id': 'air_store_id'})\ntest_df","2b1fc215":"X","3c24bbc0":"import xgboost\n\nestimator = xgboost.XGBRegressor()\nestimator.fit(X,y)","ec8215e0":"y_test = estimator.predict(test_df)","49f7ef0c":"print(y_test)","ab058ed3":"sample_submission = pd.read_csv(path_list[6])\nsample_submission","c902016b":"submission = sample_submission.copy()\nsubmission = submission.drop('visitors', axis=1)\nsubmission","25641401":"submission[\"visitors\"] = y_test","e5de825f":"submission","daa50d55":"submission.to_csv('submission.csv', index=None)","01e494db":"# \u4e00\u65e6\u63d0\u51fa\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n# \u5404\u66dc\u65e5\u306e\u6765\u5ba2\u6570\u306e\u4e2d\u592e\u5024\u3092\u4e88\u6e2c\u5024\u3068\u3057\u3066\u63d0\u51fa\u3059\u308b\n\n# test_df\u3068agg_data\u306estoreid_id\u3001dow\u3092\u3059\u308a\u5408\u308f\u305bmerge\u3055\u305b\u308b\nmerged = pd.merge(submission_data, agg_data, how='left', left_on=['store_id', 'dow'], right_on=['air_store_id', 'dow'])\n \n# id\u3068visitors\u3060\u3051\u3092final\u3078\u683c\u7d0d\nfinal = merged[['id', 'visitors']]\n \n# final\u306e\u30d8\u30c3\u30c0\u30fc\u60c5\u5831\nfinal.head()","f15e27ef":"# NaN\u3092\u63a2\u3057\u3066\u30c6\u30fc\u30d6\u30eb\u306b\u3059\u308b\u95a2\u6570\ndef missing_values_table(df): \n        mis_val = df.isnull().sum()\n        mis_val_percent = 100 * df.isnull().sum()\/len(df)\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n        mis_val_table_ren_columns = mis_val_table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        return mis_val_table_ren_columns \n \n# final\u306eNaN\u3092\u78ba\u8a8d (3.5%\u7a0b\u5ea6\u304c\u6b20\u640d\u5024)\nmissing_values_table(final)","567266a5":"# \u3068\u308a\u3042\u3048\u305a\u6b20\u640d\u5024\u306b\u306f0\u3092\u5165\u308c\u308b\nfinal.fillna(0, inplace=True)\n\n# \u5ff5\u306e\u305f\u3081\u78ba\u8a8d\nmissing_values_table(final)","ceee7dc2":"path_list = []\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        path_list.append(os.path.join(dirname, filename))\n        \npath_list.sort()\nprint(path_list)\nair_reserve = pd.read_csv(path_list[0])\nair_store_info = pd.read_csv(path_list[1])\nair_visit_data = pd.read_csv(path_list[2])\ndate_info = pd.read_csv(path_list[3])\nhpg_reserve = pd.read_csv(path_list[4])\nhpg_store_info = pd.read_csv(path_list[5])\nsample_submission = pd.read_csv(path_list[6])\nstore_id_relation = pd.read_csv(path_list[7])\n\nprint(date_info)","4c566fbc":"print(date_info)\n\n# data_info\u306e\u795d\u65e5\u30d5\u30e9\u30b0\u304c1\uff08\u30aa\u30f3\uff09\u306e\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\ndate_info[date_info['holiday_flg'] == 1].head(10)\n\n# \u571f\u65e5\u3067\u3082\u795d\u65e5\u3067\u3042\u308c\u3070\u795d\u65e5\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u308b\u304c\u3001\u571f\u65e5\u306f\u57fa\u672c\u7684\u306b\u4f11\u65e5\u306a\u306e\u3067\u795d\u65e5\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\n# \u571f\u65e5\u306e\u5834\u5408\u306f\u30d5\u30e9\u30b0\u30920\u306b\u3059\u308b\u3068\u3044\u3046\u51e6\u7406\u3092\u884c\u3046 (\u571f\u65e5\u304b\u3064\u795d\u65e5\u306e\u65e5\u4ed8\u3092\u53d6\u5f97\u3057\u3001\u30d5\u30e9\u30b0\u30920\u306b\u3059\u308b)\nweekend_hdays = date_info.apply((lambda x:(x.day_of_week=='Sunday' or x.day_of_week=='Saturday') and x.holiday_flg==1), axis=1)\ndate_info.loc[weekend_hdays, 'holiday_flg'] = 0","66ffc7ef":"# \u65b0\u3057\u3044\u65e5\u4ed8\u306b\u3088\u308a\u5927\u304d\u3044\u91cd\u307f\u3092\u4e0e\u3048\u308b\n# date_info.index\u306e\u5024\u304c\u5c0f\u3055\u3044\uff1d\u3088\u308a\u6614\u306e\u30c7\u30fc\u30bf\ndate_info['weight'] = (date_info.index + 1) \/ len(date_info) \n \n#\u30d8\u30c3\u30c0\u30fc\u3068\u30c6\u30a4\u30eb\u306e\u60c5\u5831\u3092\u51fa\u3057\u3066\u78ba\u8a8d\nprint(date_info.head())\ndate_info.tail()","17931711":"# air_visit_data\u3068\u91cd\u307f\u3092\u8ffd\u52a0\u3057\u305fdate_info\u3092\u30de\u30fc\u30b8\u3055\u305b\u3066visit_data\u3092\u4f5c\u6210\n# visit_data\u304b\u3089\u4e0d\u5fc5\u8981\u306acalendar_date\u3092\u843d\u3068\u3059\nvisit_data = air_visit_data.merge(date_info, left_on='visit_date', right_on='calendar_date', how='left')\nvisit_data.drop('calendar_date', axis=1, inplace=True)\n# visit_data\u306e\u5b9f\u5ba2\u6570\u306bnp.log1p\u306e\u5bfe\u6570\u95a2\u6570\u3092\u4f7f\u3063\u3066\u51e6\u7406\n# \u306a\u305c\uff1f\nvisit_data['visitors'] = visit_data.visitors.map(pd.np.log1p)\n# visit_data\u306e\u78ba\u8a8d\nvisit_data.head(10)","2e02ad9c":"# wmean\uff08\u91cd\u307f\u4ed8\u304d\u5e73\u5747\uff09\u306e\u5f0f\u3092\u683c\u7d0d\nwmean = lambda x:( (x.weight * x.visitors).sum() \/ x.weight.sum() )\n# \u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u3066\u91cd\u307f\u4ed8\u304d\u5e73\u5747\u3092\u7b97\u51fa\nvisitors = visit_data.groupby(\n['air_store_id', 'day_of_week', 'holiday_flg']).apply(wmean).reset_index()\nvisitors.rename(columns={0:'visitors'}, inplace=True) \n# \u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\nvisitors.head(10)\n\n# air_00a91d42b08b08d9 Monday\n# \u795d\u65e5\u30d5\u30e9\u30b0\u3042\u308a\u3001\u306a\u3057\u3067\u91cd\u307f\u304c\u9055\u3046\u305f\u3081\u3001\u5fae\u5999\u306b\u9055\u3046\u8a08\u7b97\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u308b","5ca90ca9":"# sample_submission\u306eID\u3092\u30ec\u30b9\u30c8\u30e9\u30f3ID\u3084\u65e5\u4ed8\u306b\u5206\u3051\u308b\nsample_submission['air_store_id'] = sample_submission.id.map(lambda x: '_'.join(x.split('_')[:-1]))\nsample_submission['calendar_date'] = sample_submission.id.map(lambda x: x.split('_')[2])\n \n# \u91cd\u307f\u4ed8\u304d\u5e73\u5747\u3067\u4e88\u6e2c\u3057\u305fvisitors\u3068sample_submission\u3092\u30de\u30fc\u30b8\u3059\u308b\n# \u795d\u65e5\u30c7\u30fc\u30bf\u3092\u540c\u6642\u306b\u30de\u30fc\u30b8\u3057\u3001\u795d\u65e5\u30d5\u30e9\u30b0\u3067\u7d10\u4ed8\u3051\u308b\nsample_submission.drop('visitors', axis=1, inplace=True)\nsample_submission = sample_submission.merge(date_info, on='calendar_date', how='left')\nsample_submission = sample_submission.merge(\n    visitors, on=['air_store_id', 'day_of_week', 'holiday_flg'], how='left')\n \n# \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u78ba\u8a8d\nsample_submission.head()","badb16ca":"# sample_submission\u306e\u6b20\u640d\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\nmissing_values_table(sample_submission)\n\n# \u795d\u65e5\u30d5\u30e9\u30b0\u3067\u7d10\u3065\u304b\u306a\u304b\u3063\u305f\u3082\u306e\u304c\u4f59\u3063\u3066\u3044\u308b","29c3398a":"# \u300cair_store_id\u300d\u3068\u300cday_of_week\u300d\u306e\u307f\u3067\u6b20\u640d\u30c7\u30fc\u30bf\u306b\u91cd\u307f\u5e73\u5747\u3092\u5165\u308c\u308b\nmissings = sample_submission.visitors.isnull()\nsample_submission.loc[missings, 'visitors'] = sample_submission[missings].merge(\n    visitors[visitors.holiday_flg==0], on=('air_store_id', 'day_of_week'), how='left')['visitors_y'].values\n \n# \u6539\u3081\u3066\u6b20\u640d\u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nmissing_values_table(sample_submission)\n\n# \u307e\u3060\u4f59\u3063\u3066\u3044\u308b\u306e\u3067\u3001air_store_id\u3060\u3051\u3067\u7d10\u4ed8\u3051\u308b","9f35a39c":"# \u300cair_store_id\u300d\u306e\u307f\u306e\u91cd\u307f\u4ed8\u304d\u5e73\u5747\u3092\u8a08\u7b97\u3057\u3066\u6b20\u640d\u30c7\u30fc\u30bf\u3078\u5165\u308c\u308b\nmissings = sample_submission.visitors.isnull()\nsample_submission.loc[missings, 'visitors'] = sample_submission[missings].merge(\n    visitors[['air_store_id', 'visitors']].groupby('air_store_id').mean().reset_index(), \n    on='air_store_id', how='left')['visitors_y'].values\n \n# \u6b20\u640d\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\nmissing_values_table(sample_submission)\n\n# \u5168\u90e8\u57cb\u307e\u3063\u3066\u3044\u308b","206555f4":"# \u5185\u5bb9\u3092\u78ba\u8a8d\nsample_submission","f40096e4":"# visitors\u3092np.expm1\u3067\u51e6\u7406\u3057\u3066\u5b9f\u5ba2\u6570\u3078\u623b\u3059\nsample_submission['visitors'] = sample_submission.visitors.map(pd.np.expm1)\n \n# \u63d0\u51fa\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u898f\u5b9a\u306b\u5408\u3046\u3088\u3046\u306b\u51e6\u7406\u3057\u3066sub_file\u3078\u683c\u7d0d\nsample_submission = sample_submission[['id', 'visitors']]\nfinal['visitors'][final['visitors'] ==0] = sample_submission['visitors'][final['visitors'] ==0]\nsub_file = final.copy()\n \n# \u30c7\u30fc\u30bf\u306e\u78ba\u8a8d\nsub_file.head()","e66dc122":"# \u7b97\u8853\u5e73\u5747\u3092np.mean\u3067\u7b97\u51fa\nsub_file['visitors'] = np.mean([final['visitors'], sample_submission['visitors']], axis = 0)\nsub_file.to_csv('sub_math_mean_1.csv', index=False)\n \n# \u76f8\u4e57\u5e73\u5747\u3092\u7b97\u51fa\nsub_file['visitors'] = (final['visitors'] * sample_submission['visitors']) ** (1\/2)\nsub_file.to_csv('sub_geo_mean_1.csv', index=False)\n \n# \u8abf\u548c\u5e73\u5747\u3092\u7b97\u51fa\nsub_file['visitors'] = 2\/(1\/final['visitors'] + 1\/sample_submission['visitors'])\nsub_file.to_csv('sub_hrm_mean_1.csv', index=False)","5b927054":"### \u3053\u306e\u554f\u984c\u3067\u3084\u3063\u3066\u6b32\u3057\u3044\u3053\u3068\n- 2016\u5e747\u67081\u65e5\u301c2017\u5e744\u670822\u65e5\u306e\u30c7\u30fc\u30bf\u3092\u5143\u306b\u30012017\u5e744\u6708\u6700\u7d42\u9031\u301c2017\u5e745\u6708\u672b\u65e5\u307e\u3067\u306e\u5404\u65e5\u306e\u6765\u5e97\u6570\u3092\u4e88\u6e2c\u3059\u308b\n\n","ab3e71b8":"# \u4e0a\u8a18\u3067\u51fa\u3057\u305f\u4e2d\u592e\u5024\u3001\u52a0\u91cd\u5e73\u5747\u306e\u3055\u3089\u306b\u5e73\u5747\u3092\u3068\u3063\u3066\u63d0\u51fa\n- \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u306e\u8003\u3048\u65b9\n- \u8907\u6570\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3089\u306e\u30e2\u30c7\u30eb\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u30de\u30fc\u30b8\u3057\u3066\u6700\u7d42\u7d50\u679c\u3068\u3059\u308b","4a5d46e5":"# \u3088\u308a\u826f\u3044\u4e88\u6e2c\u306b\u3059\u308b\u305f\u3081\u3001\u91cd\u307f\u4ed8\u304d\u5e73\u5747\u3092\u7b97\u51fa\n- \u795d\u65e5\u3068\u66dc\u65e5\u306b\u6ce8\u76ee\u3057\u3001\u3053\u3053\u3067\u91cd\u307f\u3092\u3064\u3051\u308b\n- \u307e\u305f\u3001\u76f4\u8fd1\u306e\u30c7\u30fc\u30bf\u3092\u91cd\u8996\u3055\u305b\u308b\u3088\u3046\u306a\u91cd\u307f\u4ed8\u3051\u3092\u884c\u3046","37ee83a1":"# \u63d0\u51fa\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\u7528\u306b\u30b5\u30f3\u30d7\u30eb\u63d0\u51fa\u30c7\u30fc\u30bf\u3092\u524d\u51e6\u7406\u3057\u3066\u304a\u304f","c7e466c9":"# \u6642\u7cfb\u5217\u7cfb\u30b3\u30f3\u30da\u3067\u5fc5\u8981\u306a\u3053\u3068\n- \u4eca\u56de\u306e\u624b\u6cd5\n    - \u6a5f\u68b0\u5b66\u7fd2\u306a\u3069\u3092\u4f7f\u308f\u305a\u3001\u5358\u7d14\u306a\u5e73\u5747\u306e\u307f\u3067\u3084\u3063\u305f\n    - \u57fa\u672c\u7684\u306b\u6642\u7cfb\u5217\u7cfb\u3060\u304b\u3089\u301c\u301c\u3092\u7279\u6b8a\u306b\u4f7f\u7528\u3059\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u306f\u306a\u304f\u3001kaggle\u5e38\u9023\u306e\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\u3084LightGBM\u3001XGBoost\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306a\u3069\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u3088\u3046\u3060\u3002\uff08https:\/\/www.hirayuki.com\/kaggle-zakki\/read-ion-switching-kernel-2 \uff09\n- \u9069\u5207\u306a\u524d\u51e6\u7406\n    - \u66dc\u65e5\u3084\u795d\u65e5\u306a\u3069\u3001\u6642\u671f\u7684\u306a\u30c7\u30fc\u30bf\u3092\u7279\u5fb4\u91cf\u306b\u3046\u307e\u304f\u52a0\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\uff08\u3053\u3053\u304c\u4e00\u756a\u3060\u3044\u3058\u305d\u3046\uff09\n        - 2\u65e5\u524d\u30011\u65e5\u524d\u306e\u5e73\u5747\u5024\u30841\u9031\u9593\u524d\u306e\u30c7\u30fc\u30bf\u306a\u3069\u3092\u7279\u5fb4\u91cf\u306b\u843d\u3068\u3057\u8fbc\u307f\u3001\u5b66\u7fd2\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\n    - \u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u975e\u5b9a\u5e38\u904e\u7a0b\u304c\u591a\u3044\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u306e\u4e88\u6e2c\u306f\u96e3\u3057\u3044\uff1f\uff08https:\/\/tjo.hatenablog.com\/entry\/2019\/09\/18\/190000 \uff09\n- \u9069\u5207\u306across validation\n    - \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306a\u306e\u3067\u3001\u4ea4\u5dee\u691c\u8a3c\u3082\u6642\u7cfb\u5217\u3092\u5b88\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\uff08\u901a\u5e38\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u3066\u4f7f\u3063\u305f\u308a\u3067\u304d\u308b\u304c\u3001\u305d\u308c\u304c\u3067\u304d\u306a\u3044\uff09\n    -> \u904e\u5b66\u7fd2\u306b\u306a\u308a\u304c\u3061\n    - \u3046\u307e\u304f\u6642\u7cfb\u5217\u3092\u58ca\u3055\u305a\u4ea4\u5dee\u691c\u8a3c\u304c\u3067\u304d\u308b\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u3001\u904e\u5b66\u7fd2\u306b\u306a\u3089\u306a\u3044\u3088\u3046\u306b\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u3053\u3068\u3082\u6642\u7cfb\u5217\u89e3\u6790\u3067\u306f\u91cd\u8981\n    \n- \u57fa\u672c\u7684\u306a\u65b9\u91dd\n    - \u7dda\u5f62\u5206\u6790(kNN, \u30ed\u30b8\u30b9\u30c6\u30a3\u30af\u30b9\u56de\u5e30\u306a\u3069\uff1f\uff09\u3067\u3060\u3044\u3058\u305d\u3046\u306a\u7279\u5fb4\u91cf\u3092\u898b\u7a4d\u3082\u308a\u3001\u305d\u308c\u306b\u5bfe\u3057\u3066lightGBM\u306a\u3069\u8907\u6570\u306e\u30e2\u30c7\u30eb\u3067\u5b66\u7fd2\u3092\u884c\u3046\u3002\u6700\u5f8c\u306b\u7d50\u679c\u3092\u30de\u30fc\u30b8\u3057\u3066\u63d0\u51fa\u3068\u3044\u3046\u6d41\u308c\u304c\u57fa\u672c\u306b\u306a\u3063\u3066\u3044\u305d\u3046\u3002x","57dd0b75":"# \u7279\u5fb4\u91cf\u3092\u4f5c\u3063\u3066\u3044\u304f\n\n### \u8aac\u660e\u5909\u6570\n\u5e97ID\u3001\u66dc\u65e5\u3001\u305d\u306e\u66dc\u65e5\u306e\u6765\u5ba2\u6570\u5e73\u5747\u3001\u4f11\u65e5\u304b\u3069\u3046\u304b\u3001\u7fcc\u65e5\u304c\u4f11\u307f\u304b\u3069\u3046\u304b\u3001\u6708\u672b\u304b\u3069\u3046\u304b\uff08\uff1f\uff09\n\n### \u76ee\u7684\u5909\u6570\n\u6765\u5ba2\u6570"}}