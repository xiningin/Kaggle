{"cell_type":{"28d41874":"code","b2f407bd":"code","7cb73600":"code","9c464195":"code","a0288d22":"code","320ffa0e":"code","271ebcab":"code","768f34c0":"code","1ebc9859":"code","0b7153a3":"code","f3ff80f6":"code","460faf3c":"code","dad8faca":"markdown"},"source":{"28d41874":"import pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import Ridge\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom scipy.stats import rankdata","b2f407bd":"jr = pd.read_csv(\"..\/input\/jigsaw-regression-based-data\/train_data_version2.csv\")\njr.shape\ndf = jr[['text', 'y']]\nvec = TfidfVectorizer(analyzer='char_wb', max_df=0.7, min_df=1, ngram_range=(2, 5) )\nX = vec.fit_transform(df['text'])\nz = df[\"y\"].values\ny=np.around ( z ,decimals = 2)\n","7cb73600":"model1=Ridge(alpha=0.1)\nmodel1.fit(X, y)\n","9c464195":"df_test = pd.read_csv(\"..\/input\/jigsaw-toxic-severity-rating\/comments_to_score.csv\")","a0288d22":"test=vec.transform(df_test['text'])\njr_preds=model1.predict(test)\ndf_test['score1']=rankdata( jr_preds, method='ordinal') ","320ffa0e":"rud_df = pd.read_csv(\"..\/input\/ruddit-jigsaw-dataset\/Dataset\/ruddit_with_text.csv\")\nprint(f\"rud_df:{rud_df.shape}\")\nrud_df['y'] = rud_df[\"offensiveness_score\"] \ndf = rud_df[['txt', 'y']].rename(columns={'txt': 'text'})\nvec = TfidfVectorizer(analyzer='char_wb', max_df=0.7, min_df=3, ngram_range=(3, 4) )\nX = vec.fit_transform(df['text'])\nz = df[\"y\"].values\ny=np.around ( z ,decimals = 1)\ny","271ebcab":"model1=Ridge(alpha=0.1)\nmodel1.fit(X, y)","768f34c0":"test=vec.transform(df_test['text'])\nrud_preds=model1.predict(test)\ndf_test['score2']=rankdata( rud_preds, method='ordinal') ","1ebc9859":"df_test['score']=0.6*df_test['score1']+0.4*df_test['score2']\n","0b7153a3":"for i in range(0, 500):\n    df_test['score'][i] = df_test['score'][i] * 1.23\nfor i in range(801, 1200):\n    df_test['score'][i] = df_test['score'][i] * 1.34\nfor i in range(1701, 2300):\n    df_test['score'][i] = df_test['score'][i] * 0.92\nfor i in range(2501, 2980):\n    df_test['score'][i] = df_test['score'][i] * 0.92    \nfor i in range(3001, 4000):\n    df_test['score'][i] = df_test['score'][i] * 1.34    \nfor i in range(4001, 4500):\n    df_test['score'][i] = df_test['score'][i] * 1.35   \nfor i in range(4501, 4940):\n    df_test['score'][i] = df_test['score'][i] * 0.92\nfor i in range(5501, 5980):\n    df_test['score'][i] = df_test['score'][i] * 0.89\nfor i in range(6001, 6500):\n    df_test['score'][i] = df_test['score'][i] * 1.37\nfor i in range(7001, 7536):\n    df_test['score'][i] = df_test['score'][i] * 1.35  ","f3ff80f6":"df_test['score']=rankdata( df_test['score'], method='ordinal') ","460faf3c":"df_test[['comment_id', 'score']].to_csv(\"submission.csv\", index=False)","dad8faca":"# warning:\n# Weights may improve scores, but in the end result, it may have the opposite effect because different comparisons will be used"}}