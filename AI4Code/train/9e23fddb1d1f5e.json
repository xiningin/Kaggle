{"cell_type":{"92269f76":"code","b8115677":"code","f59b2e46":"code","ae1d12da":"code","60dd411c":"code","226db4e9":"code","1af4f19f":"code","645c300f":"code","09fb4691":"code","4c982896":"code","14d73020":"code","342e092e":"code","4479ee6d":"code","d84a4095":"code","70e39169":"code","822158a9":"code","2ea9a7d6":"code","4e60f8f2":"code","4de66f16":"code","2c6dd527":"code","7c1aa73a":"code","6e537838":"code","e8dedb0d":"code","070c1d6c":"code","30fb1917":"code","a3c517f2":"code","4ed6e877":"code","87bd3f04":"code","0f49ccc3":"code","76c65e11":"code","e8b57815":"code","993ebcaa":"code","f4ffb466":"code","99897ae3":"code","4b4d803b":"code","552d1cac":"code","1bd3d2b3":"code","4e3d1dc9":"code","5ff5a8f6":"code","d9d7f59c":"code","a53918ca":"code","19408202":"code","8538273c":"code","9214dfee":"code","94ef8623":"code","94ca5647":"code","931f84f3":"code","27a612b0":"code","59ca79b2":"code","bc294daa":"code","3838f13f":"code","2f766bfb":"code","76bd19a0":"code","4f91b112":"code","10abd2ab":"code","a04b5503":"code","d52dbbf8":"code","6f54618f":"code","b3a1ca4f":"code","d254bb35":"code","e2ce4042":"code","c77b36f4":"code","791467ed":"code","e8f9664f":"markdown","07c6853d":"markdown","064bea9f":"markdown","93b41584":"markdown","4469af54":"markdown","7130b42d":"markdown","1b681f63":"markdown","06e1f120":"markdown","7384384e":"markdown","dbb21d5f":"markdown","2510270a":"markdown","6434d38b":"markdown","1b18eb89":"markdown","6f3573d6":"markdown","b060daee":"markdown","1b6d637d":"markdown","efe9a775":"markdown"},"source":{"92269f76":"import numpy as np\nimport pandas as pd\n# data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# # import library for machine learning\nfrom sklearn import preprocessing, model_selection, metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error, r2_score, mean_squared_error\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV","b8115677":"df = pd.read_csv('..\/input\/kickstarter-projects\/ks-projects-201801.csv')\ndf.head(5)","f59b2e46":"print('Shape of the file')\nprint('-'*30)\nprint(df.shape)\nprint('')\nprint('number of NaN value')\nprint('-'*30)\nprint(df.isnull().sum())","ae1d12da":"df = df.dropna()\nprint('Shape of the file after removing NaN values')\nprint('-'*30)\nprint(df.shape)","60dd411c":"df.dtypes","226db4e9":"# datetime conversions\ndf['deadline'] = pd.to_datetime(df['deadline'], errors='coerce')\ndf['launched'] = pd.to_datetime(df['launched'], errors='coerce')\nprint(df['deadline'].dtypes)\nprint(df['launched'].dtypes)","1af4f19f":"# Print unique values for categorical variables:\nprint('category: ', df['category'].unique(), \"\\n\")\nprint('main_category', df['main_category'].unique(), \"\\n\")\nprint('currency', df['currency'].unique(), \"\\n\")\nprint('state', df['state'].unique(), \"\\n\")          \nprint('country', df['country'].unique(), \"\\n\")\n","645c300f":"df1 = df.groupby(['main_category','category']).size().reset_index().rename(columns={0:'count'})\ndf1","09fb4691":"df_art= df1.loc[df1['main_category'] == 'Art']\nprint('category: ', df_art['category'].unique(), \"\\n\")\ndf_art","4c982896":"df.loc[(df['category'] == 'Digital Art')|(df['category'] == 'Mixed Media')|(df['category'] == 'Video Art')|\n       (df['category'] == 'Performance Art')|(df['category'] == 'Public Art'), 'category'] = 'ephemeral'\ndf.loc[(df['category'] == 'Ceramics')|(df['category'] == 'Conceptual Art')|(df['category'] == 'Illustration')|\n       (df['category'] == 'Installations')|(df['category'] == 'Painting')|\n       (df['category'] == 'Sculpture')|(df['category'] == 'Textiles'), 'category'] = 'permanent'","14d73020":"df_Comics= df1.loc[df1['main_category'] == 'Comics']\nprint('category: ', df_Comics['category'].unique(), \"\\n\")\ndf_Comics","342e092e":"df.loc[(df['category'] == 'Comic Books')|(df['category'] == 'Comics')|(df['category'] == 'Graphic Novels')|\n       (df['category'] == 'Anthologies'), 'category'] = 'paper'","4479ee6d":"df_Publishing = df1.loc[df1['main_category'] == 'Publishing']\nprint('category: ', df_Publishing['category'].unique(), \"\\n\")\ndf_Publishing","d84a4095":"df['category'] = df['category'].replace(['Zines', 'Letterpress','Academic','Periodicals','Radio & Podcasts','Publishing',\n                                        'Anthologies','Translations'], 'genre defined')\n\ndf['category'] = df['category'].replace(['Art Books', \"Children's Books\",'Nonfiction',\"Young Adult\",'Calendars',\n                                        'Comedy','Fiction','Literary Spaces','Literary Journals','Poetry'], 'genre defined')","70e39169":"df_FV = df1.loc[df1['main_category'] == 'Film & Video']\nprint('category: ', df_FV['category'].unique(), \"\\n\")\ndf_FV","822158a9":"df['category'] = df['category'].replace(['Action', 'Drama','Comedy','Family','Fantasy','Horror','Narrative Film',\n                                         'Music Videos','Romance','Science Fiction','Documentary','Thrillers'], 'genre defined')\n\ndf['category'] = df['category'].replace(['Festivals', 'Film & Video','Movie Theaters','Television','Experimental','Shorts'], 'genre not defined')","2ea9a7d6":"df_Music = df1.loc[df1['main_category'] == 'Music']\nprint('category: ', df_Music['category'].unique(), \"\\n\")\nlist_music = df_Music.columns\ndf_Music.sort_values(by=['count'])","4e60f8f2":"df['category'] = df['category'].replace(['Blues','Chiptune','Classical Music','Comedy','Electronic Music','Faith','Jazz','Kids','Latin',\n                          'Metal','Punk','R&B','World Music','Music'], 'genre not defined')","4de66f16":"df_Food = df1.loc[df1['main_category'] == 'Food']\nprint('category: ', df_Food['category'].unique(), \"\\n\")\n\ndf_Food.sort_values(by=['count'])","2c6dd527":"df.loc[(df['category'] == 'Food Trucks'),'category'] = 'Restaurants'\n\ndf['category'] = df['category'].replace(['Community Gardens','Events',\"Farmer's Markets\",'Farms','Spaces'], 'events\/places')\ndf['category'] = df['category'].replace(['Bacon','Cookbooks','Small Batch','Vegan'], 'other')\n","7c1aa73a":"df_Design = df1.loc[df1['main_category'] == 'Design']\nprint('category: ', df_Design['category'].unique(), \"\\n\")\n\ndf_Design.sort_values(by=['count'])","6e537838":"df['category'] = df['category'].replace(['Typography','Civic Design','Interactive Design' ,'Architecture'], 'other')","e8dedb0d":"df_Crafts = df1.loc[df1['main_category'] == 'Crafts']\nprint('category: ', df_Crafts['category'].unique(), \"\\n\")\n\ndf_Crafts.sort_values(by=['count'])","070c1d6c":"df['category'] = df['category'].replace(['Candles','Crochet','Embroidery','Glass','Knitting','Letterpress','Pottery','Printing','Quilts',\n                 'Stationery','Taxidermy','Weaving'], 'other')","30fb1917":"df_Games = df1.loc[df1['main_category'] == 'Games']\nprint('category: ', df_Games['category'].unique(), \"\\n\")\n\ndf_Games.sort_values(by=['count'])","a3c517f2":"df['category'] = df['category'].replace(['Games', 'Gaming Hardware','Live Games',\n                                         'Mobile Games','Playing Cards','Puzzles'], 'other')","4ed6e877":"df_Fashion = df1.loc[df1['main_category'] == 'Fashion']\nprint('category: ', df_Fashion['category'].unique(), \"\\n\")\n\ndf_Fashion.sort_values(by=['count'])","87bd3f04":"df['category'] = df['category'].replace(['Accessories','Childrenswear','Couture','Footwear',\n                                         'Jewelry','Pet Fashion','Ready-to-wear'], 'other')","0f49ccc3":"df_Theater = df1.loc[df1['main_category'] == 'Theater']\nprint('category: ', df_Theater['category'].unique(), \"\\n\")\n\ndf_Theater.sort_values(by=['count'])","76c65e11":"cat_to_change = df_Theater['category'].unique()\ndf['category'] = df['category'].replace(cat_to_change, 'Theater')\n","e8b57815":"df_Photography = df1.loc[df1['main_category'] == 'Photography']\nprint('category: ', df_Photography['category'].unique(), \"\\n\")\n\ndf_Photography.sort_values(by=['count'])","993ebcaa":"df['category'] = df['category'].replace(['Animals','Fine Art','Nature','People','Places'], 'Photography')","f4ffb466":"df_Technology = df1.loc[df1['main_category'] == 'Technology']\nprint('category: ', df_Technology['category'].unique(), \"\\n\")\n\ndf_Technology.sort_values(by=['count'])","99897ae3":"df['category'] = df['category'].replace(['3D Printing','Camera Equipment','DIY Electronics','Fabrication Tools',\n                                         'Flight','Gadgets','Makerspaces','Robots','Sound','Space Exploration',\n                                         'Wearables'], 'other')   \n\ndf['category'] = df['category'].replace(['Software','Hardware'], 'Computer')","4b4d803b":"df_Dance = df1.loc[df1['main_category'] == 'Dance']\nprint('category: ', df_Dance['category'].unique(), \"\\n\")\n\ndf_Dance.sort_values(by=['count'])","552d1cac":"df['category'] = df['category'].replace(['Residencies','Workshops','Spaces','Performances'], 'Dance')","1bd3d2b3":"df_Journalism = df1.loc[df1['main_category'] == 'Journalism']\nprint('category: ', df_Journalism['category'].unique(), \"\\n\")\n\ndf_Journalism.sort_values(by=['count'])","4e3d1dc9":"cat_to_change = df_Journalism['category'].unique()\ndf['category'] = df['category'].replace(cat_to_change, 'Journalism')","5ff5a8f6":"print('category: ', df['category'].unique(), \"\\n\")","d9d7f59c":"# calcul period open in second\ndf['period open'] = (df['deadline'] - df['launched'])\/ np.timedelta64(1, 's')\n\n# calcul ratio reached\ndf['ratio_goal'] = df['usd_pledged_real']\/df['goal']","a53918ca":"df.tail(2)","19408202":"# remove unwanted columns\ndf = df.drop(columns=['ID','usd_goal_real','currency'])\n# remove unrealistic date\ndf = df[df['launched'] != '1970-01-01 01:00:00'] ","8538273c":"# Create a 'num_chars' feature\ndf['num_chars'] = df['name'].apply(len)","9214dfee":"# Function that returns number of words in string\ndef word_count(string):\n    # Split the string into words\n    words = string.split()\n    # Return length of words list\n    return len(words)\n\n# Create num_words feature in df\ndf['num_words'] = df['name'].apply(word_count)","94ef8623":"#Function that returns average word length\ndef avg_word_length(x):\n    # Split the string into words\n    words = x.split()\n    # Compute length of each word and store in a separate list\n    word_lengths = [len(word) for word in words]\n    # Compute average word length\n    avg_word_length = sum(word_lengths)\/len(words)\n    # Return average word length\n    return(avg_word_length)","94ca5647":"# Create a new feature avg_word_length\ndf['avg_word_length'] = df['name'].apply(avg_word_length)","931f84f3":"#Function that returns number of capitalize letter\ndef numb_capitalize_letter(x):\n    # initialize count variable\n    count_cap_word =0\n    # Split the string into words\n    words = x.split()\n    # Compute length of each word and store in a separate list       \n    for word in words:\n        count =0\n        for i in word:\n            if i.isupper():\n                count += 1\n        length_words = len(word)\n        if length_words == count:\n            count_cap_word +=1\n    \n    return(count_cap_word)","27a612b0":"# Create a new feature avg_word_length\ndf['nb_upper_word'] = df['name'].apply(numb_capitalize_letter)","59ca79b2":"df.head(6)","bc294daa":"pie_ax=df['state'].value_counts(normalize=True).plot.pie(figsize=(9,9),explode=(0,0.07,0,0,0),\n                                                              legend=True,shadow=True, autopct='%1.1f%%' ,\n                                                              pctdistance=0.75, radius=1.05, wedgeprops = {'linewidth': 0.1}, \n                                                              textprops = {'fontsize': 14})\n\npie_ax.set_title('Projects state distribution', fontsize=16, weight='bold')\npie_ax.legend(fancybox=True, shadow=True, title='State', fontsize=11)\npie_ax.set_ylabel(\"\")\nplt.show()","3838f13f":"df_success_and_failed = df.loc[(df['state'] == 'successful')|(df['state'] == 'failed')]\n\nfig= plt.subplots(figsize=(12,15))\n\nax = sns.countplot(y=\"category\", data=df_success_and_failed,\n                   order = df_success_and_failed['category'].value_counts().index,\n                   hue=\"state\")\nax.set_yticklabels(ax.get_yticklabels(),fontsize=15)\nax.set_ylabel('category',fontsize=20)\nax.set_xlabel('Count',fontsize=20)\n\nplt.show()","2f766bfb":"df_success_and_failed = df.loc[(df['state'] == 'successful')|(df['state'] == 'failed')]\n\nfig= plt.subplots(figsize=(15,5))\n\nax = sns.countplot(x=\"main_category\", data=df_success_and_failed,\n                   order = df_success_and_failed['main_category'].value_counts().index,\n                   hue=\"state\")\nax.set_xticklabels(ax.get_xticklabels(),fontsize=12,rotation=45)\nax.set_ylabel('category',fontsize=14)\nax.set_xlabel('Count',fontsize=14)\n\nplt.show()","76bd19a0":"# create new column for month and year\ndf['year']  = pd.DatetimeIndex(df['launched']).year\ndf['month'] = pd.DatetimeIndex(df['launched']).month\ndf['count']= 1\ndf_month  = df.groupby(['year','month','state'])['count'].sum()\n\n# get the date as index\ndf_month  = df_month.reset_index()\ndf_month['date']  = pd.to_datetime(df_month.assign(Day=1).loc[:, ['year','month','Day']])\ndf_month  = df_month.set_index('date')\n\n\n# plot evolution project according to state\nfig, ax = plt.subplots(figsize=(10,5))\nplt.title('Number of projects launched vs state ',size=18, y=1.06) \n\nax.plot(df_month.index, df_month[\"count\"],color='darkblue')\nax.set_xlabel('Time',fontsize=15)\nax.set_ylabel('total number of project launched', color='darkblue',fontsize=15)\nax.tick_params(axis='both', which='major', labelsize=14)\nax.tick_params('y', colors='darkblue')\n\n\nplt.show()","4f91b112":"df_month_sucess  = df_month[df_month['state']=='successful']\ndf_month_failed  = df_month[df_month['state']=='failed']\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.title('Number of projects launched vs state ',size=18, y=1.06) \n\nax.plot(df_month_sucess.index, df_month_sucess[\"count\"],color='darkblue')\nax.set_xlabel('Time',fontsize=15)\nax.set_ylabel('total number of project launched', color='darkblue',fontsize=15)\nax.tick_params(axis='both', which='major', labelsize=14)\nax.tick_params('y', colors='darkblue')\n\n\nax2 = ax.twinx()  #specify that the two lines share the same x-axis\nax2.plot(df_month_failed.index,df_month_failed[\"count\"],color='green')\n# ax2.set_ylabel('Moment seismic', color='green',fontsize=15)\nax2.tick_params('y', colors='green')\nax2.tick_params(axis='both', which='major', labelsize=14)\n\nplt.show()","10abd2ab":"# df_month_sucess.shape\ndf_month['ratio_month'] = df_month_sucess['count'] \/(df_month_sucess['count']+ df_month_failed['count'])\ndf_month.head()","a04b5503":"df_month.drop_duplicates(subset=['year', 'month'], keep= 'first')\ndf_month\n\nfig, ax = plt.subplots(figsize=(10,5))\nplt.title('evolution percentage project funded per month',size=18, y=1.06) \n\nax.plot(df_month.index, df_month[\"ratio_month\"],color='darkblue')\nax.set_xlabel('Time',fontsize=15)\nax.set_ylabel('ratio_month', color='darkblue',fontsize=15)\nax.tick_params(axis='both', which='major', labelsize=14)\nax.tick_params('y', colors='darkblue')","d52dbbf8":"# drop unwanted columns:\ndf_ML =df.drop(columns=['launched','deadline','count','name','country'])\n\n# keep target variables with only \"successful\" and \"failed\"\ndf_ML = df_ML[(df_ML['state'] == 'successful')|(df_ML['state'] == 'failed')]\n\n# get dummies target variables\ndf_ML = pd.get_dummies(df_ML,drop_first = True)","6f54618f":"df_ML.head()","b3a1ca4f":"from sklearn.model_selection import train_test_split\n\nX = df_ML.drop(['state_successful'],axis=1)\ny = df_ML['state_successful'].values\nX_train, X_test, y_train, y_test = train_test_split(X, y,test_size = .3, random_state=42)\n\nprint('Shape of X_train :'+\" \"+str(X_train.shape))\nprint('Shape of X_test :'+\" \"+str(X_test.shape))","d254bb35":"from sklearn.preprocessing import RobustScaler\nscaler= RobustScaler()\n# transform \"x_train\"\nX_train = scaler.fit_transform(X_train)\n# transform \"x_test\"\nX_test = scaler.transform(X_test)","e2ce4042":"from sklearn.metrics import classification_report,accuracy_score \nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.tree import DecisionTreeClassifier","c77b36f4":"# Initiat a classification decision tree\nDT_clf = DecisionTreeClassifier(random_state=42)\n\n# fit the model\nDT_clf.fit(X_train , y_train)\n\n# make prediction\ny_predict = DT_clf.predict(X_test)\n\nprint('Accuracy of the training model:'+\" \"+str(DT_clf.score(X_train, y_train)))\nprint('Accuracy of the model:'+\" \"+str(accuracy_score(y_true=y_test, y_pred=y_predict)))","791467ed":"print(confusion_matrix(y_test, y_predict))\nprint(classification_report(y_test, y_predict))","e8f9664f":"## 1.7: Drop columns and rows","07c6853d":"## 3.3: evolution over time","064bea9f":"<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:#7ca4cd; border:0' role=\"tab\" aria-controls=\"home\"><center>2: NLP ON COLUMN 'NAME'<\/center><\/h3>","93b41584":"### Average word length","4469af54":"## <a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:#7ca4cd; border:0' role=\"tab\" aria-controls=\"home\"><center>4: MACHINE LEARNING<\/center><\/h3>","7130b42d":"### Number of words","1b681f63":"## 1.3: Verify dtypes:","06e1f120":"## 3.2: Target variable vs explanatory variables ","7384384e":"## 1.6: Feature engineering","dbb21d5f":"## 1.2: replace nan values","2510270a":"## 1.4: Verify Value consistency","6434d38b":"## 3.1: Analysing target variable: 'state'","1b18eb89":"<a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:#7ca4cd; border:0' role=\"tab\" aria-controls=\"home\"><center>1: LOAD AND CLEAN THE DATA<\/center><\/h3>","6f3573d6":"# Kickstarter Campaign Success Prediction\nWill a kickstarter campaign meet its goal? Let's use machine learning to predict kickstarter campaign sucess based on the campaign's features","b060daee":"## <a id=\"top\"><\/a>\n\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:#7ca4cd; border:0' role=\"tab\" aria-controls=\"home\"><center>3: EDA<\/center><\/h3>","1b6d637d":"## 2.1: Basic features\n### Number of letters","efe9a775":"## 1.5: Collapse to many categories into a few"}}