{"cell_type":{"6a809878":"code","b6297b80":"code","9acc62b6":"code","274640c2":"code","4bf8a0f5":"code","20e67ae1":"code","d0b1d72f":"code","91081643":"code","7da28fd4":"code","5feccc39":"code","11a25425":"code","b05df9cd":"code","98aec259":"code","e1c116b9":"code","b86707a2":"code","061df44a":"markdown","a603752f":"markdown","c2b69f18":"markdown","176a1d6f":"markdown","b963914f":"markdown","f1a38e9b":"markdown","9000a08b":"markdown","69c09c39":"markdown"},"source":{"6a809878":"# importing necessary libraries\nimport numpy as np\nimport pandas as pd\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go","b6297b80":"# Loading dataset\ndf_train = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv')\ndf_test  = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv')\nsubms  =   pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv')","9acc62b6":"# First look at the data\nprint('\\n *** Train data ***')\nprint(df_train.head())\nprint('\\n --------------------------------------------------------------------- \\n')\nprint ('\\n *** Test data ***')\nprint(df_test.head())\nprint('\\n --------------------------------------------------------------------- \\n')\nprint('\\n *** Shape of Train data ***')\nprint(df_train.shape)\nprint('\\n --------------------------------------------------------------------- \\n')\nprint('\\n *** Shape of Test data ***')\nprint(df_test.shape)\nprint('\\n --------------------------------------------------------------------- \\n')\nprint('\\n *** Info ***')\nprint(df_train.info())\nprint('\\n --------------------------------------------------------------------- \\n')\nprint('\\n *** Columns in the data *** \\n')\nprint(df_train.columns)\nprint('\\n --------------------------------------------------------------------- \\n')\nprint('\\n *** Description of the data *** \\n')\nprint(df_train.describe())\nprint('\\n --------------------------------------------------------------------- \\n')\nprint('\\n *** Data types ***')\nprint(df_train.dtypes)\nprint('\\n --------------------------------------------------------------------- \\n')","274640c2":"# Checking for missing values\nprint('\\n Missing values in train dataset \\n')\nprint(df_train.isnull().sum())\nprint('\\n ------------------------------------ \\n')\nprint('\\n Missing values in test dataset \\n')\nprint(df_test.isnull().sum())","4bf8a0f5":"# Time frame\nprint('*** Time frame for train data ***')\nprint('Beginning date', df_train['date'].min())\nprint('Ending date', df_train['date'].max())\nprint('\\n ------------------------------------ \\n')\nprint('*** Time frame for test data ***')\nprint('Beginning date', df_test['date'].min())\nprint('Ending date', df_test['date'].max())                                 ","20e67ae1":"print('Unique features in train data')\nprint(df_train.nunique())\nprint('\\n ------------------------------------ \\n')\nprint('Unique features in test data')\nprint(df_test.nunique())","d0b1d72f":"print('Checking features in train data')\nprint(df_train['date'].value_counts())\nprint('\\n ------------------------------------ \\n')\nprint(df_train['country'].value_counts())\nprint('\\n ------------------------------------ \\n')\nprint(df_train['store'].value_counts())\nprint('\\n ------------------------------------ \\n')\nprint(df_train['product'].value_counts())","91081643":"grp = df_train.groupby(['date','store']).agg({'num_sold':'sum'}).reset_index()\nfig = px.line(grp, x = 'date', y = 'num_sold', color='store')\nfig.update_layout(title='Sales by Date and Store type')\nfig.show()","7da28fd4":"train_KMart = df_train[df_train.store == 'KaggleMart']\ntrain_KRama = df_train[df_train.store == 'KaggleRama']\n\ngrp_KMart = train_KMart.groupby(['date','product']).agg({'num_sold':'sum'}).reset_index()\nfig = px.line(grp_KMart, x = 'date', y = 'num_sold', color='product')\nfig.update_layout(title='KaggleMart sales by Date and Products')\nfig.show()","5feccc39":"grp_KRama = train_KRama.groupby(['date','product']).agg({'num_sold':'sum'}).reset_index()\nfig = px.line(grp_KRama, x = 'date', y = 'num_sold', color='product')\nfig.update_layout(title='KaggleRama  sales by Date and Products')\nfig.show()","11a25425":"grp_KMart = train_KMart.groupby(['date','country']).agg({'num_sold':'sum'}).reset_index()\nfig = px.line(grp_KMart, x = 'date', y = 'num_sold', color='country')\nfig.update_layout(title='KaggleMart sales by Date and Country')\nfig.show()","b05df9cd":"grp_KRama = train_KRama.groupby(['date','country']).agg({'num_sold':'sum'}).reset_index()\nfig = px.line(grp_KRama, x = 'date', y = 'num_sold', color='country')\nfig.update_layout(title='KaggleRama  sales by Date and Country')\nfig.show()","98aec259":"# converting date feature from string to datetime data type\ndf_train['date'] = pd.to_datetime(df_train.date)\ndf_test['date'] = pd.to_datetime(df_test.date)","e1c116b9":"def feat1(df):\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['dayofmonth'] = df['date'].dt.day\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['weekend']=(df['dayofweek']\/\/5 == 1)       \n    df['weekend']=df['weekend'].astype('int')  \n    df['week']=df['date'].dt.isocalendar().week     \n    df['week'][df['week']>52]=52                    \n    df['week']=df['week'].astype('int')\n    return df\n\ndf_train = feat1(df_train)\ndf_test = feat1(df_test)","b86707a2":"def hbar(col):\n    temp = df_train.groupby(col).agg({'num_sold':'mean'}).reset_index()\n    temp = temp.sort_values(col, ascending=False)\n    c = {\n        'y' : list(temp['num_sold']),\n        'x' : list(temp[col]),\n        'title' : 'Average sales by ' +col}\n    trace = go.Bar(y=c['y'], x=c['x'], orientation='v')\n    layout = go.Layout(title=c['title'], xaxis_title=\"\", yaxis_title=\"\", width=650)\n    fig = go.Figure([trace], layout=layout)\n    fig.update_xaxes(tickangle=45, tickfont=dict(color='crimson'))\n    fig.update_yaxes(tickangle=0, tickfont=dict(color='crimson'))\n    fig.show()\n    return trace\n    \ntrace1 = hbar('dayofweek') \ntrace2 = hbar('month') \ntrace3 = hbar('year')","061df44a":"# Loading libraries and data","a603752f":"# First look at the data","c2b69f18":"**Inference**\n* Sales of hats is high compared to mugs and stickers in both the stores\n* Sales of stickers is consistent except for the spikes during end of year\n* High fluctuation is noticed in the sales of hats. Sales increases during the March - June every year and also during year end ","176a1d6f":"**Inference**\n* KaggleRama sells more products than KaggleMart\n* Sales increase is noticed at the end of each year","b963914f":"# Visualization","f1a38e9b":"**Inference**\n* Sales increases during weekend and on friday\n* Max sales is noticed during December \n* July - Nov sales is low\n* Sales of products increase year on year","9000a08b":"**Inference**\n* Sales is high in Norway compared to other two countries","69c09c39":"**Inference**\n* Sales data is given for 1461 days starting from 2015-01-01 to 2018-12-31 <br>\n* Sales for the year 2019 has to be predicted \n* Each date has 18 entries (3 countries * 3 products * 2 stores)\n* There are no missing values"}}