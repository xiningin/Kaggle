{"cell_type":{"bc0d2da4":"code","81227c8e":"code","c1e6b58a":"code","b77f4551":"code","b6f84471":"code","eb13f3c1":"code","b80fdf92":"code","517b9c74":"code","0cd49cc9":"code","bff081bd":"code","b689e535":"code","bdcacdba":"code","b9ca449c":"code","1c2f787e":"code","d724036e":"code","80f70780":"code","883d4b68":"code","8f03cfd7":"code","586f4045":"code","1ffd05b8":"code","be0d4db8":"code","17071ac7":"code","15c70948":"code","1a5cda87":"code","3b08ccf2":"code","2070fbf7":"code","10f1184f":"code","c8310223":"code","7dcb2d84":"code","69e7d1b3":"code","40bd8923":"code","9cf9a3f1":"code","df3da130":"code","1a8e5eec":"code","b051cb97":"code","ef3c8cbc":"code","0df47b01":"code","2c145ebc":"code","2870917b":"code","64f81384":"code","fc5e2157":"code","aaedb6a2":"code","a0580555":"code","bd4433b0":"code","d737df71":"code","c1df94f7":"code","5861ae9e":"code","08b70033":"code","5761032f":"code","07dcc88e":"code","03a636e7":"code","216a9c2b":"code","0b6f825d":"code","ce52c4c8":"code","df21c221":"code","69d9961d":"code","3abdb58e":"code","c288b61b":"code","2d48ccc3":"code","dc957bcb":"code","6b6993dd":"markdown","d94ff594":"markdown","3337fb1e":"markdown","a6d7d079":"markdown","9302cb19":"markdown","bb570653":"markdown","520663be":"markdown","dfbd63fd":"markdown"},"source":{"bc0d2da4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","81227c8e":"deep=pd.read_csv('..\/input\/deep-learning-az-ann\/Churn_Modelling.csv')","c1e6b58a":"deep.head(10)","b77f4551":"deep.info()","b6f84471":"deep = deep.drop(['RowNumber','CustomerId','Surname'], axis=1)\n","eb13f3c1":"deep.head(10)","b80fdf92":"deep.describe().T","517b9c74":"deep.nunique()","0cd49cc9":"deep.Tenure.value_counts()","bff081bd":"deep.Geography.value_counts()","b689e535":"deep['Exited'].value_counts(normalize=True)","bdcacdba":"deep.isnull().sum()","b9ca449c":"for i in deep.columns:\n    if (deep[i].dtype=='object'):\n        print(i)\n        print(deep[i].value_counts())\n        print('\\n')\n   ","1c2f787e":"for i in deep.columns:\n    if (deep[i].dtype!='object'):\n        print(i)\n        print(deep[i].value_counts())\n        print('\\n')","d724036e":"for i in deep.columns:\n    if(deep[i].dtype=='object'):\n        deep[i]=pd.Categorical(deep[i]).codes","80f70780":"deep.info()","883d4b68":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","8f03cfd7":"plt.figure(figsize=(15,15))\ndeep[['Age','Balance','CreditScore', 'Tenure', 'EstimatedSalary']].boxplot(vert=0)","586f4045":"sns.pairplot(deep)","1ffd05b8":"# construct heatmap with only continuous variables\nplt.figure(figsize=(10,8))\nsns.set(font_scale=1.2)\nsns.heatmap(deep[['Age','Balance','CreditScore', 'Tenure', 'EstimatedSalary']].corr(), annot=True)","be0d4db8":"from sklearn.model_selection import train_test_split","17071ac7":"X=deep.drop(['Exited'],axis=1)","15c70948":"Y=deep['Exited']","1a5cda87":"#split data into 70% training and 30% test data\nX_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size= 0.30, random_state=0)","3b08ccf2":"# Checking dimensions on the train and test data\nprint('X_train: ',X_train.shape)\nprint('X_test: ',X_test.shape)\nprint('Y_train: ',Y_train.shape)\nprint('Y_test: ',Y_test.shape)","2070fbf7":"from sklearn.preprocessing import StandardScaler","10f1184f":"#Initialize an object for StandardScaler\nsc = StandardScaler()","c8310223":"#Scale the training data\nX_train = sc.fit_transform(X_train)","7dcb2d84":"X_train","69e7d1b3":"X_test = sc.transform(X_test)","40bd8923":"X_test","9cf9a3f1":"from sklearn.neural_network import MLPClassifier","df3da130":"clf = MLPClassifier(hidden_layer_sizes=100, max_iter=5000,\n                     solver='sgd', verbose=True,  random_state=21,tol=0.001)","1a8e5eec":"# Fit the model on the training data\nclf.fit(X_train, Y_train)","b051cb97":"y_pred = clf.predict(X_train)","ef3c8cbc":"y_pred","0df47b01":"from sklearn.metrics import confusion_matrix,classification_report","2c145ebc":"confusion_matrix(Y_train,y_pred)","2870917b":"clf.score(X_train,Y_train)","64f81384":"print(classification_report(Y_train, y_pred))","fc5e2157":"# AUC and ROC for the training data\n# predict probabilities\nprobs = clf.predict_proba(X_train)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# calculate AUC\nfrom sklearn.metrics import roc_auc_score\nauc = roc_auc_score(Y_train, probs)\nprint('AUC: %.3f' % auc)\n# calculate roc curve\nfrom sklearn.metrics import roc_curve\nfpr, tpr, thresholds = roc_curve(Y_train, probs)\nplt.plot([0, 1], [0, 1], linestyle='--')\n# plot the roc curve for the model\nplt.plot(fpr, tpr, marker='.')\n# show the plot\nplt.show()","aaedb6a2":"y_pred_test = clf.predict(X_test)","a0580555":"clf.score(X_test,Y_test)","bd4433b0":"confusion_matrix(Y_test, y_pred_test)","d737df71":"print(classification_report(Y_test, y_pred_test))","c1df94f7":"# AUC and ROC for the test data\n\n# predict probabilities\nprobs = clf.predict_proba(X_test)\n# keep probabilities for the positive outcome only\nprobs = probs[:, 1]\n# calculate AUC\nauc = roc_auc_score(Y_test, probs)\nprint('AUC: %.3f' % auc)\n# calculate roc curve\nfpr, tpr, thresholds = roc_curve(Y_test, probs)\nplt.plot([0, 1], [0, 1], linestyle='--')\n# plot the roc curve for the model\nplt.plot(fpr, tpr, marker='.')\n# show the plot\nplt.show()","5861ae9e":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = {\n    'hidden_layer_sizes': [100,200,300,500],\n    'max_iter': [5000,2500,7000,6000],\n    'solver': ['sgd','adam'],\n    'tol': [0.01],\n}\n\nnncl = MLPClassifier(random_state=1)\n\ngrid_search = GridSearchCV(estimator = nncl, param_grid = param_grid, cv = 10)","08b70033":"grid_search.fit(X_train, Y_train)","5761032f":"grid_search.best_params_","07dcc88e":"best_grid=grid_search.best_estimator_","03a636e7":"ytrain_predict = best_grid.predict(X_train)\nytest_predict = best_grid.predict(X_test)","216a9c2b":"confusion_matrix(Y_train,ytrain_predict)","0b6f825d":"clf.score(X_train,Y_train)","ce52c4c8":"print(classification_report(Y_train,ytrain_predict))","df21c221":"#from sklearn.metrics import roc_curve,roc_auc_score\nrf_fpr, rf_tpr,_=roc_curve(Y_train,best_grid.predict_proba(X_train)[:,1])\nplt.plot(rf_fpr,rf_tpr, marker='x', label='NN')\nplt.plot(np.arange(0,1.1,0.1),np.arange(0,1.1,0.1))\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nplt.show()\nprint('Area under Curve is', roc_auc_score(Y_train,best_grid.predict_proba(X_train)[:,1]))","69d9961d":"confusion_matrix(Y_test,ytest_predict)","3abdb58e":"clf.score(X_test,Y_test)","c288b61b":"print(classification_report(Y_test,ytest_predict))","2d48ccc3":"clf.score(X_test,Y_test)","dc957bcb":"#from sklearn.metrics import roc_curve,roc_auc_score\nrf_fpr, rf_tpr,_=roc_curve(Y_test,best_grid.predict_proba(X_test)[:,1])\nplt.plot(rf_fpr,rf_tpr, marker='x', label='NN')\nplt.plot(np.arange(0,1.1,0.1),np.arange(0,1.1,0.1))\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC')\nplt.show()\nprint('Area under Curve is', roc_auc_score(Y_test,best_grid.predict_proba(X_test)[:,1]))","6b6993dd":"**This is a very basic approach to ANN **","d94ff594":"**Data dictionary**\n\n\nRowNumber\n\nCustomerId:Bank ID of the Customer\n\nSurname: Customer\u2019s Surname\n\nCreditScore\t: Current Credit score of the customer\n\nGeography:Current country of the customer\n\nGender:Customer\u2019s Gender\n\nAge:Customer\u2019s Age\n\nTenure:Customer\u2019s duration association with bank in years\t\n\nBalance:Current balance in the bank account.\n\nNumOfProducts\n\nHasCrCard:1 denotes customer has a credit card and 0 denotes customer does not have a credit card\t\n\nIsActiveMember:1 denotes customer is an active member and 0 denotes customer is not an active member\n\nEstimated:Customer\u2019s approx. salary\n\nSalary:Salary of Customer\n\nExited:Target Variable(1 denotes customer has exited the bank and 0 denotes otherwise)\n","3337fb1e":"\n\nQuestion:\n\nBased on the data, build a model to predict when the customer will exit the bank. Split the data into Train and Test dataset (70:30), build the model on Train data-set and test the model on Test-dataset. Secondly provide recommendations to the bank so that they can retain the customers who are on the verge of exiting.","a6d7d079":"**The accuracy of the train and test data is approximately equal after grid search and that is approximately 86%.\n\nWe can tune the model more if we want to by using the dropped variables and check their affect on data.**","9302cb19":"**We have checked the date for missing values,outliers and other EDA.We can go ahead with the train and test of ANN model.**","bb570653":"We will Start With EDA","520663be":"Do upvote thanks :)","dfbd63fd":"**We can Use GRID SEARCH to tune the model.**"}}