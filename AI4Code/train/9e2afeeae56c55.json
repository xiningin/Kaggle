{"cell_type":{"d5178f41":"code","27f6e973":"code","3ef956e8":"code","2b7743a9":"code","15cc0a2e":"code","1a70341c":"code","98b7ec37":"code","23f4de46":"code","9b136d12":"code","02d51db4":"code","389b7251":"code","a1c4e3a8":"code","c2f8d7e8":"code","a7d56904":"code","b67bbe08":"code","d5a86404":"code","9f7e7648":"code","eb77f775":"code","52b5227b":"code","17568bd7":"code","75ca25e8":"code","fef7c794":"code","d89498bc":"code","49017a57":"code","46c2ad59":"code","5733626f":"code","51457cea":"code","f0c7f702":"code","3e2fee2a":"code","c4206391":"code","bec5aff9":"code","bbd0ce3c":"code","4c26958b":"code","104accaf":"code","d2d6dbd4":"code","2ac23b09":"code","000a339c":"code","f19c25f3":"code","38b8f559":"code","6516c404":"code","7b0fc636":"code","3b56c9be":"code","6eb08af4":"code","8b0e1f12":"code","b6521d7d":"code","51f934df":"code","3281e134":"code","c266baf7":"code","e19c912c":"code","dd24b3fe":"code","1b132695":"code","bb7dd643":"code","215b2244":"code","5613f9b7":"code","8d9d865e":"code","7988a497":"code","b409e380":"code","06246214":"markdown","d15b16d3":"markdown","7e2b0034":"markdown","1a91dd1e":"markdown","f49b0d87":"markdown","4c683ce8":"markdown","82c0730a":"markdown","dfdc8de1":"markdown","eb53c772":"markdown","7d69061e":"markdown","e4fe94be":"markdown","9658bdc1":"markdown","26bd230d":"markdown","ab362722":"markdown","f0bc5feb":"markdown","9d22242e":"markdown","d52730f8":"markdown","7525c63f":"markdown","400c34e7":"markdown","48f9413f":"markdown","032e9048":"markdown","a9729e10":"markdown","bf872ee0":"markdown","f5105631":"markdown","8dec6bd7":"markdown","195ceaae":"markdown","c42218a4":"markdown","c45c9a96":"markdown","4f3e3772":"markdown","79d961ab":"markdown","b66e66ab":"markdown","5fae1143":"markdown","803902f0":"markdown","b99a9515":"markdown","ed1639d3":"markdown","808ceaf3":"markdown","65e2fc19":"markdown","e5543e80":"markdown"},"source":{"d5178f41":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","27f6e973":"emissions = pd.read_csv('\/kaggle\/input\/co2-emission-by-vehicles\/CO2 Emissions_Canada.csv')\nemissions.head()","3ef956e8":"emissions.columns","2b7743a9":"renamed_col = {\n    'Vehicle Class': 'vehicle_class',\n    'Engine Size(L)': 'engine_size',\n    'Fuel Type': 'fuel_type',\n    'Fuel Consumption City (L\/100 km)': 'fuel_cons_city',\n    'Fuel Consumption Hwy (L\/100 km)': 'fuel_cons_hwy',\n    'Fuel Consumption Comb (L\/100 km)': 'fuel_cons_comb',\n    'Fuel Consumption Comb (mpg)': 'mpgfuel_cons_comb',\n    'CO2 Emissions(g\/km)': 'co2'\n}\nemissions.rename(renamed_col, axis='columns', inplace=True)","15cc0a2e":"emissions.keys()","1a70341c":"emissions.info()","98b7ec37":"emissions.describe().transpose()","23f4de46":"import seaborn as sns \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom plotly import express as px, graph_objects as go\nfrom plotly.subplots import make_subplots","9b136d12":"emissions.Make.unique()","02d51db4":"f, ax = plt.subplots(figsize=(25,7))\nsns.set_theme(style=\"darkgrid\")\n\nx = emissions.Make.value_counts().sort_values()\n\nax = sns.barplot(data=emissions,x='Make',y='co2')\nplt.title('Vehicles and their Co2 emissions')\nplt.xticks(rotation=35)\nplt.show()","389b7251":"f, ax = plt.subplots(figsize=(25,7))\nsns.set_theme(style=\"darkgrid\")\n\nx = emissions.Make.value_counts().sort_values()\n\nax = sns.barplot(data=emissions,x='Make',y='co2', hue='Cylinders')\nplt.title('Number of cylinders in respective vehicles')\nplt.xticks(rotation=35)\nplt.show()","a1c4e3a8":"df = emissions.copy()\n\nrenamed_col = {\n    'Vehicle Class': 'vehicle_class',\n    'Engine Size(L)': 'engine_size',\n    'Fuel Type': 'fuel_type',\n    'Fuel Consumption City (L\/100 km)': 'fuel_cons_city',\n    'Fuel Consumption Hwy (L\/100 km)': 'fuel_cons_hwy',\n    'Fuel Consumption Comb (L\/100 km)': 'fuel_cons_comb',\n    'Fuel Consumption Comb (mpg)': 'mpgfuel_cons_comb',\n    'CO2 Emissions(g\/km)': 'co2'\n}\ndf.rename(renamed_col, axis='columns', inplace=True)","c2f8d7e8":"df[df.co2 == df.co2.max()]","a7d56904":"df[df.Make == 'SMART']","b67bbe08":"fig = px.histogram(df, x=\"Cylinders\")\nfig.update_layout(title_text='Cylinders in Vehicles',xaxis_title=\"Cylinders \",yaxis_title=\"Number_of_vehicles \",title_x=0.5)\nfig.show()","d5a86404":"df.Cylinders.value_counts(normalize=True)","9f7e7648":"df.Cylinders.value_counts()","eb77f775":"lamborghini = df[df.Make == 'LAMBORGHINI']\nlamborghini_models = lamborghini.groupby('Model').count().reset_index().sort_values('Make', ascending=False)\nlamborghini_models\nf, ax = plt.subplots(figsize=(25,7))\nsns.set_theme(style=\"whitegrid\")\nax = sns.barplot(data=lamborghini_models, y='Make',x='Model')\nplt.title('Number of models in Lamborghini')\nplt.xticks(rotation=90)\nplt.show()","52b5227b":"plt.figure(figsize = (15,8))\nsns.boxplot(x=\"Make\", y=\"co2\", data=df)\nplt.xticks(rotation = 90)\nplt.show()","17568bd7":"df.head()","75ca25e8":"sns.jointplot(\n    data=df,\n    x=\"fuel_cons_city\", y=\"co2\", hue=\"fuel_type\",\n    kind=\"kde\"\n)\nplt.show()","fef7c794":"transmission_distr =df['Transmission'].value_counts().reset_index()\nfig = px.pie(transmission_distr, values='Transmission', names='index')\nfig.update_layout(title=\"Transmission Distribution\")\nfig.show()","d89498bc":"plt.figure(figsize = (15,8))\nsns.countplot(y=\"fuel_type\", data=df, hue='Cylinders')\nplt.title('Distribution of Fuel-Type')\nplt.show()","49017a57":"fig = go.Figure(data=go.Violin(y=df[\"fuel_cons_city\"],\n                               box_visible=True,\n                               line_color='white',\n                               meanline_visible=True,\n                               fillcolor='blue', opacity=0.4,\n                               x0='Fuel Consumption City'))\n\nfig.show()","46c2ad59":"df.head(3)","5733626f":"city=df.fuel_cons_city\nhighway = df.fuel_cons_hwy\ncity_hwy_df = df[['fuel_cons_city', 'fuel_cons_hwy', 'fuel_type','co2']]\ncity_hwy_df.head()","51457cea":"fig = plt.figure(figsize = (10,20))\nax = fig.add_subplot(2,1,1)\nax = plt.hist(city, color=\"orange\", label=\"Fuel Consumption in city\", density=True, alpha=0.5)\nax = plt.hist(highway, color=\"blue\", label=\"Fuel Consumption in Highway\", density=True, alpha=0.5)\nax = plt.legend()\nplt.show()","f0c7f702":"sns.kdeplot(\n   data=city_hwy_df, x=\"fuel_cons_hwy\", hue=\"fuel_type\",\n   fill=True, common_norm=False, palette=\"crest\",\n   alpha=.5, linewidth=0,\n)","3e2fee2a":"sns.histplot(city_hwy_df, x=\"fuel_cons_hwy\", hue=\"fuel_type\", element=\"poly\")\nplt.title('Fuel types used in Highways')\nplt.show()","c4206391":"sns.histplot(city_hwy_df, x=\"fuel_cons_city\", hue=\"fuel_type\", element=\"step\")\nplt.title('Fuel types used in City')\nplt.show()","bec5aff9":"df.head()","bbd0ce3c":"sns.histplot(data=df, x=\"mpgfuel_cons_comb\", bins=30)\nplt.title('Combined Fuel consumption in (L\/100km)')\nplt.show()","4c26958b":"sns.histplot(data=df, x=\"fuel_cons_comb\", bins=30)\nplt.title('Combined Fuel consumption in mpg')\nplt.show()","104accaf":"sns.histplot(df, x=\"engine_size\", y=\"co2\")","d2d6dbd4":"cor = df.corr()\nsns.heatmap(cor)","2ac23b09":"df.corr()","000a339c":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import (StandardScaler, \n                                   PolynomialFeatures)","f19c25f3":"slr = LinearRegression()","38b8f559":"y_col = \"co2\"\n\nX = df.drop(y_col, axis=1)\ny = df[y_col]","6516c404":"X = df[['engine_size']]","7b0fc636":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=72018) #split into train and test parts","3b56c9be":"s = StandardScaler()\nX_train_s = s.fit_transform(X_train)","6eb08af4":"slr.fit(X_train_s, y_train)\nX_test_s = s.transform(X_test)\ny_pred = slr.predict(X_test_s)","8b0e1f12":"#Accuracy and MSE\nprint(f'R2 score is {r2_score(y_pred,y_test)}')\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_pred - y_test) ** 2))","b6521d7d":"mlr = LinearRegression()\nX = df[['engine_size', 'Cylinders', 'fuel_cons_comb']]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=72018) #split into train and test parts\nX_train_sm = s.fit_transform(X_train)\nmlr.fit(X_train_sm, y_train)\nX_test_sm = s.transform(X_test)\ny_pred_sm = mlr.predict(X_test_sm)","51f934df":"#Accuracy and MSE\nprint(f'R2 score is {r2_score(y_pred_sm,y_test)}')\nprint(\"Residual sum of squares (MSE): %.2f\" % np.mean((y_pred_sm - y_test) ** 2))","3281e134":"print(f'Co-efficients are {mlr.coef_}')\nprint(f'Intercept is {mlr.intercept_}')","c266baf7":"from sklearn.model_selection import cross_val_score\nRcross = cross_val_score(slr, X_train_s, y_train, cv=4)\nprint(\"The mean of the folds are\", Rcross.mean(), \"and the standard deviation is\" , Rcross.std())","e19c912c":"from sklearn.model_selection import cross_val_score\nRcross = cross_val_score(mlr, X_train_sm, y_train, cv=4)\nprint(\"The mean of the folds are\", Rcross.mean(), \"and the standard deviation is\" , Rcross.std())","dd24b3fe":"from sklearn.linear_model import Lasso\nfrom sklearn.preprocessing import PolynomialFeatures","1b132695":"pf = PolynomialFeatures(degree=2, include_bias=False,)\nX_pf = pf.fit_transform(X)\nX_pf_ss = s.fit_transform(X_pf)","bb7dd643":"lasso = Lasso()\nlasso.fit(X_pf_ss, y)\nlasso.coef_ ","215b2244":"r2_score(y,lasso.predict(X_pf_ss))","5613f9b7":"las01 = Lasso(alpha = 0.1)\nlas01.fit(X_pf_ss, y)\nprint('sum of coefficients:', abs(las01.coef_).sum() )\nprint('number of coefficients not equal to 0:', (las01.coef_!=0).sum())","8d9d865e":"las1 = Lasso(alpha = 1)\nlas1.fit(X_pf_ss, y)\nprint('sum of coefficients:',abs(las1.coef_).sum() )\nprint('number of coefficients not equal to 0:',(las1.coef_!=0).sum())","7988a497":"from sklearn.linear_model import Ridge","b409e380":"r = Ridge(alpha = 0.001)\nX_train_s = s.fit_transform(X_train)\nr.fit(X_train_s, y_train)\nX_test_s = s.transform(X_test)\ny_pred_r = r.predict(X_test_s)\n\n# Calculating r2 score\nr.coef_","06246214":"<img src=\"https:\/\/media.giphy.com\/media\/HwvXsuDiQLaiQ\/giphy.gif\">","d15b16d3":"**Lookss like there are no missing values and the data-types are appropriate** :D \nThe dataset contains 7385 observations with 12 columns, with data-types float,int and object.","7e2b0034":"# 65% accuracy","1a91dd1e":"# Determine the most used fuel_type which has key role in the co2 emisssions","f49b0d87":"**conclusion- choose alpha = 1**","4c683ce8":"# Plotting Transmission Distribution","82c0730a":"# Copy our dataframe to a new variable","dfdc8de1":"**cross validation for multiple linear regr**","eb53c772":"# view the median, IQR for various type of vehicles","7d69061e":"# Simple Linear Regression","e4fe94be":"# Ridge","9658bdc1":"# Rename columns as there are many gaps, which creates un-necessary errors","26bd230d":"# Import lib for visualisations\n","ab362722":"# 43.5% of the vehicles have 4 cylinders followed by 6 cylinders and 8. Only 3  vehicles have highest number of cylinders - 16","f0bc5feb":"![](http:\/\/https:\/\/www.google.com\/url?sa=i&url=http%3A%2F%2Fjoyreactor.com%2Ftag%2Fgif%2Fbest%2F450&psig=AOvVaw0viirU0t1DG_QCEVFfZk4W&ust=1616887773681000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCIjVmL2Oz-8CFQAAAAAdAAAAABAW)","9d22242e":"# Cross-Validation\n","d52730f8":"# EDA\n*We will explore the features by statistical distributions to find any outliers or skewness.From the EDA, we get to know which features will be relevant in the predictions of the target variable and thus we can stop considering less relevant features*                                                                \n**EDA let's you get to know about your dataset. So, try as much explorations which will result in better assumptions in creating the model**","7525c63f":"**Bugatti has highest co2 emissions more than 500 while SMART seems to have lwest of 150**","400c34e7":"# We trained upto 86% accurately predicting model","48f9413f":"# Retrieve the maximum co2 emissions and their make","032e9048":"# Fuel consumption in City and Highway","a9729e10":"# Correlations in the data","bf872ee0":"*There are different model evaluation metrics\nhttps:\/\/towardsdatascience.com\/what-are-the-best-metrics-to-evaluate-your-regression-model-418ca481755b, we will calculate the metrics given in this blog-post*\n1. Mean absolute error - It is the mean of the absolute value of the errors.\n2. Mean Squared Error - This is the popular metric and it is the mean of the squared error.\n3. RMSE -  This calculates the accuracy of the model.","f5105631":"# Interesting, highest co2 emitter Bugetti seems to have maximum num of cylinders - 16.. We will see how these variables correlate","8dec6bd7":"**we could see that all models of Rolls-royce has emissions more than 350. Some models(outliers) in Mercedes-Benz and FORD are competing with the maximum emissions**","195ceaae":"# Data-analysis","c42218a4":"![](http:\/\/www.google.com\/url?sa=i&url=http%3A%2F%2Fjoyreactor.com%2Ftag%2Fgif%2Fbest%2F450&psig=AOvVaw0viirU0t1DG_QCEVFfZk4W&ust=1616887773681000&source=images&cd=vfe&ved=0CAIQjRxqFwoTCIjVmL2Oz-8CFQAAAAAdAAAAABAW)","c45c9a96":"# **Obviously as one would expect, Fuel consumption in Highways are higher**","4f3e3772":"# As we see from the histograms, the distribution is near symmetrical and less skewed. SO,we need not apply Log transformations..","79d961ab":"# DATASET DESCRIPTION\nThis dataset captures the details of how CO2 emissions by a vehicle can vary with the different features. The columns of this dataset are \n1. Model\n2. Make\t\n3. Engine Size(L)\t\n4. Cylinders\n5. Fuel Type\n6. Fuel Consumption City (L\/100 km)\n7. Fuel Consumption Hwy (L\/100 km)\t\n8. Fuel Consumption Comb (mpg and L\/100 km)\n9. Vehicle class\n10. Transmission","b66e66ab":"# Introduce Polynomial features","5fae1143":"# Why not start with the 1st column 'Make'","803902f0":"**The polynomial features will make model complex. It is better to use regularization techniques like Lasso, Ridge to see at what point the model overfits and the accuracy starts declining. You would want to stop training your model there**\nREferences: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.Ridge.html","b99a9515":"# Multiple Linear Regression","ed1639d3":"# Columns","808ceaf3":"# Fuel types Z and X are used dominantly both in highways and city which are         \"Premium gasoline\" and \"regular gasoline\" ","65e2fc19":"# Different alpha values","e5543e80":"# Distributions of Combined Fuel consumption in (L\/100km)  and mpg"}}