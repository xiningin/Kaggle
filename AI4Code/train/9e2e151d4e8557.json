{"cell_type":{"132cca0d":"code","f1d9b219":"code","78a84234":"code","307d49cc":"code","6293b0cc":"code","d99f974a":"code","c3f426c2":"code","d2f5216f":"code","559ce6e4":"code","d60d5713":"code","db08e8c6":"code","04187db3":"code","74473473":"code","43f4895e":"code","1892a062":"code","98c8ba2b":"markdown","0781b494":"markdown","050ad3ea":"markdown","ddd39f8b":"markdown","2af97023":"markdown","786be918":"markdown","d4de4fbb":"markdown"},"source":{"132cca0d":"import numpy as np\nimport pandas as pd \nfrom sklearn.model_selection import KFold,StratifiedKFold","f1d9b219":"train_data =  pd.read_csv('..\/input\/titanic\/train.csv')\ntrain_data.head(2)","78a84234":"test_data = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_data.head(2)","307d49cc":"train_data.shape, test_data.shape","6293b0cc":"train_data['Survived'].value_counts()","d99f974a":"kf = KFold(n_splits=5, shuffle=True, random_state=21) # we will create 5 folds since dataset is not that large, if we had huge dataset we could have made 10 folds. ","c3f426c2":"for fold, (train_indices, valid_indices) in enumerate(kf.split(train_data)):\n    train_data.loc[valid_indices,'fold'] = fold # this randomly assigns one of the values [0,1,2,3,4] to each row :- Thus it divides training set in 5 parts","d2f5216f":"train_data.head(2) # fold column contains float type","559ce6e4":"train_data.fold = train_data.fold.astype(int) # convert fold column to int type","d60d5713":"train_data.head(2)","db08e8c6":"for i in range(5): \n    t = train_data.loc[train_data['fold']==i,'Survived'].value_counts()\n    print(f\"For fold {i} class ratio is: {t[0]\/t[1]}\")","04187db3":"skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=21)","74473473":"for fold, (train_indices, valid_indices) in enumerate(skf.split(train_data,train_data.Survived)):\n    #print(fold)\n    train_data.loc[valid_indices,'fold'] = fold\ntrain_data.fold = train_data.fold.astype(int) # convert fold column to int types\n","43f4895e":"for i in range(5):  \n    t = train_data.loc[train_data['fold']==i,'Survived'].value_counts()\n    print(f\"For fold {i} class ratio is: {t[0]\/t[1]}\")","1892a062":"train_data.to_csv('TITANIC_Folds.csv',index=False)","98c8ba2b":"<a id=\"0\"><\/a>\n# <p style=\"background-color:#B721FF;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">INTRODUCTION<\/p>\n<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">In this notebook we will create folds which we will use later while training our model.\n    This is a part of the notebook series <i>\"My_Complete_Pipeline_for_any_ML_Competition\"<\/i> where we are building complete pipeline. You can go to the first notebook of the series from below.<\/p>\n    \n[https:\/\/www.kaggle.com\/raj401\/my-complete-pipeline-for-any-ml-competition](https:\/\/www.kaggle.com\/raj401\/my-complete-pipeline-for-any-ml-competition)\n<a id='top'><\/a>\n<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<p style=\"background-color:#B721FF;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">TABLE OF CONTENTS<\/p>   \n    \n* [1. IMPORTING LIBRARIES](#1)\n    \n* [2. READ DATASETS](#2)\n\n* [3. CREATE FOLDS](#3)\n   * [3.1 KFold](#3.1)\n   * [3.2 STRATIFIED-KFold](#3.2)\n    \n    \n* [4. SAVE FOLDS](#4)\n    \n* [5. CONCLUSION](#5)\n    \n* [6. END](#6)\n\n<a id=\"1\"><\/a>\n# <p style=\"background-color:#B721FF;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">IMPORTING LIBRARIES<\/p>","0781b494":"<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">We see it is unbalanced class i.e. no of data points in class survived and no of data points in class not survived are not same. So we can't just use KFold split, we have to use stratified KFold split. This is because Stratified KFold ensures that each fold has same proportion of classes. In case of Balanced class we don't have to worry about this and can use KFold there. \n<br>\nHence Stratified KFold is an improved version of KFold split so be it balance or unbalance class it is advised to use Stratified KFold.\n<br> To show what I am saying we will do both KFold split as well as Stratified KFold split.<\/p>\n<a id=\"3.1\"><\/a>\n<p style=\"background-color:#B721FF;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">KFOLD<\/p>\n","050ad3ea":"<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">Now the ratio of labels in each fold are quite stable as expected. Let's save this Stratified KFold splits data now to use it later.<\/p>\n\n<a id=\"4\"><\/a>\n# <p style=\"background-color:#B721FF;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">SAVE FOLDS<\/p>","ddd39f8b":"<a id=\"1\"><\/a>\n# <p style=\"background-color:#B721FF;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">LOADING DATA<\/p>","2af97023":"<a id=\"5\"><\/a>\n## <p style=\"background-color:#B721FF;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">CONCLUSION<\/p>\n<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">Next we will do many types of feature engineering and train different modes. <\/p>\n\n**<span style=\"color:#444160;\"> Thanks!<\/span>**\n<a id=\"6\"><\/a>\n## <p style=\"background-color:#B721FF;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">END<\/p>","786be918":"<a id=\"3\"><\/a>\n# <p style=\"background-color:#B721FF;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">CREATE FOLDS<\/p>\n<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">There are many ways to create folds. \n<br> 1.You can either create folds from before hand by creating a new columns of folds and use it everywhere to make your validation predictions and OOF predictions. or,\n<br> 2. You can call each time KFold or Stratified KFold and make the splits while training a model.\n<br> If these things are not clear don't worry we will cover these things in orderly way.<br>\nI will be following method one, but there is no much difference between the two methods only difference is in the time of making split.\n<br>\nNote:- Just that in case1 you don't have to care about splits everytime, while in case2 you have to make exactly same split each time you train a model i.e. you have to use same random state while splitting.\n<br>\n    <b> Let's first see how target label is distributed <\/b><\/p>","d4de4fbb":"<p style=\"font-family:newtimeroman;font-size:120%;color:#444160;\">We see ratio of classes in each fold are quite varying, this may make our model overfit. So next we will do Stratified KFold and see the difference.<\/p>\n<a id=\"3.2\"><\/a>\n<p style=\"background-color:#B721FF;font-family:newtimeroman;color:#444160;font-size:150%;text-align:center;border-radius:20px 60px;\">STRATIFIED-KFOLD<\/p>"}}