{"cell_type":{"0280825b":"code","9d2e990e":"code","cb3dd0a2":"code","2a33c28c":"code","2ddc077b":"code","bf0369b4":"code","fd902a23":"code","bb22503c":"code","b8950a23":"code","478e455e":"code","a197b289":"code","2077adb4":"code","1a5b3d30":"code","e763721f":"code","52c762bb":"code","b18cc0db":"code","7cf84759":"code","4437ff2c":"code","4428d4b5":"code","82865fe6":"code","03dbc43e":"code","9602c271":"code","16dc8d4b":"code","d10331bc":"code","bb18c45c":"code","5362f5a6":"code","45619ca4":"code","2aa562b9":"code","04fd80e4":"code","3a8f6173":"code","81edd9f1":"code","5e2d985e":"code","45567b61":"code","b70652db":"code","80907427":"code","8d1a95f6":"markdown","7c7175ff":"markdown","b06b5173":"markdown","471d5a56":"markdown","d87b2baf":"markdown","63bc729d":"markdown","199af0ab":"markdown","695feeeb":"markdown","bca844c2":"markdown","959ab0b6":"markdown","3c867b90":"markdown","b03ed1b2":"markdown","a211a4e4":"markdown","447f34a8":"markdown","fb6689fe":"markdown"},"source":{"0280825b":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","9d2e990e":"# Train data\ntraindata = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntraindata.drop(['PassengerId','Name','Ticket','Cabin'],axis=1,inplace=True)\ntraindata.head()","cb3dd0a2":"# Test data\ntestdata = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntestdata.drop(['Name','Ticket','Cabin'],axis=1,inplace=True)\ntestdata.info()","2a33c28c":"traindata['Age'].fillna(traindata['Age'].mean(),inplace=True)\ntestdata['Age'].fillna(testdata['Age'].mean(),inplace=True)\n\ntraindata[\"Age\"]=np.log(traindata[\"Age\"])\ntestdata[\"Age\"]=np.log(testdata[\"Age\"])","2ddc077b":"traindata['Fare'].fillna(traindata['Fare'].mean(),inplace=True)\ntestdata['Fare'].fillna(testdata['Fare'].mean(),inplace=True)","bf0369b4":"traindata['Embarked'].fillna(traindata['Embarked'].mode()[0],inplace=True)\ntestdata['Embarked'].fillna(testdata['Embarked'].mode()[0],inplace=True)","fd902a23":"traindata.isnull().sum()","bb22503c":"testdata.isnull().sum()","b8950a23":"traindata['Sex']=traindata['Sex'].map({'male':0,'female':1})\ntestdata['Sex']=testdata['Sex'].map({'male':0,'female':1})","478e455e":"traindata['Embarked']=traindata['Embarked'].map({'S':0,'C':1,'Q':2})\ntestdata['Embarked']=testdata['Embarked'].map({'S':0,'C':1,'Q':2})","a197b289":"traindata.head()","2077adb4":"testdata.head()","1a5b3d30":"X = traindata.iloc[:,1:].values\ny = traindata.iloc[:,0].values","e763721f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","52c762bb":"X_train","b18cc0db":"X_test","7cf84759":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","4437ff2c":"X_train","4428d4b5":"X_test","82865fe6":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(random_state = 0)\nlr.fit(X_train, y_train)","03dbc43e":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = lr.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","9602c271":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)\nknn.fit(X_train, y_train)","16dc8d4b":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = knn.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","d10331bc":"from sklearn.svm import SVC\nsvm = SVC(kernel = 'linear', random_state = 0)\nsvm.fit(X_train, y_train)","bb18c45c":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = svm.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","5362f5a6":"from sklearn.svm import SVC\nksvm = SVC(kernel = 'rbf', random_state = 0)\nksvm.fit(X_train, y_train)","45619ca4":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = ksvm.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","2aa562b9":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(X_train, y_train)","04fd80e4":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = nb.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","3a8f6173":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\ndt.fit(X_train, y_train)","81edd9f1":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = dt.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","5e2d985e":"from sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators = 100, criterion = 'entropy', random_state = 0)\nrfc.fit(X_train, y_train)","45567b61":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = rfc.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","b70652db":"test_X = testdata.iloc[:,1:].values\ny_result = rfc.predict(sc.transform(test_X))","80907427":"result = pd.DataFrame(columns=['PassengerId','Survived'])\nresult['PassengerId'] = testdata['PassengerId']\nresult['Survived'] = pd.DataFrame(y_result)\nresult.to_csv('result.csv',index=False)","8d1a95f6":"# Training the Random Forest Classification model on the Training set","7c7175ff":"## Importing the libraries","b06b5173":"# Training the Logistic regression model on the Training set","471d5a56":"## Importing the dataset","d87b2baf":"## Feature Scaling","63bc729d":"# Splitting the dataset into the Training set and Test set","199af0ab":"# Training the Naive Bayes model on the Training set","695feeeb":"# Training the Kernel SVM model on the Training set","bca844c2":"# Encoding categorical data","959ab0b6":"# Taking care of missing data","3c867b90":"# Features and dependent variable","b03ed1b2":"# Training the KNN model on the Training set","a211a4e4":"# Training the SVM model on the Training set","447f34a8":"# Training the Decision Tree Classification model on the Training set","fb6689fe":"# Predicting the results using chosen model (Random Forest Calssification)"}}