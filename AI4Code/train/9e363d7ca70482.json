{"cell_type":{"054047f7":"code","f2301ddf":"code","0a5885db":"code","c9709269":"code","8f9fb555":"code","99a1be85":"code","32a12ff9":"markdown","b5983c19":"markdown","389fd2a2":"markdown","8205d2a0":"markdown","cd39f38c":"markdown","ffe49c53":"markdown","3f0f7947":"markdown","af29e24f":"markdown"},"source":{"054047f7":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\n%matplotlib inline \nimport cv2 as cv","f2301ddf":"FACE_DETECTION_FOLDER = \"..\/\/input\/\/cat-face-detection\/\/\"\n#Frontal cat face detector\nfrontal_cascade_path = os.path.join(FACE_DETECTION_FOLDER,'haarcascade_frontalcatface.xml')","0a5885db":"class CatFaceDetector():\n    '''\n    Class for Cat Face Detection\n    '''\n    def __init__(self,object_cascade_path):\n        '''\n        param: object_cascade_path - path for the *.xml defining the parameters for cat face detection algorithm\n        source of the haarcascade resource is: https:\/\/github.com\/opencv\/opencv\/tree\/master\/data\/haarcascades\n        '''\n\n        self.objectCascade=cv.CascadeClassifier(object_cascade_path)\n\n\n    def detect(self, image, scale_factor=1.15,\n               min_neighbors=1,\n               min_size=(30,30)):\n        '''\n        Function return rectangle coordinates of cat face for given image\n        param: image - image to process\n        param: scale_factor - scale factor used for cat face detection\n        param: min_neighbors - minimum number of parameters considered during cat face detection\n        param: min_size - minimum size of bounding box for object detected\n        '''\n        bbox=self.objectCascade.detectMultiScale(image,\n                                                scaleFactor=scale_factor,\n                                                minNeighbors=min_neighbors,\n                                                minSize=min_size)\n        return bbox","c9709269":"#Detector for cat frontal face detectiob created\nfcfd=CatFaceDetector(frontal_cascade_path)","8f9fb555":"def detect_cat_face(image, scale_factor, min_neighbors, min_size):\n    '''\n    Cat Face detection function\n    Identify frontal cat face and display the detected marker over the image\n    param: image - the image extracted from the video\n    param: scale_factor - scale factor parameter for `detect` function of ObjectDetector object\n    param: min_neighbors - min neighbors parameter for `detect` function of ObjectDetector object\n    param: min_size - minimum size parameter for f`detect` function of ObjectDetector object\n    '''\n    \n    image_gray=cv.cvtColor(image, cv.COLOR_BGR2GRAY)\n\n    cat_face=fcfd.detect(image_gray,\n                   scale_factor=scale_factor,\n                   min_neighbors=min_neighbors,\n                   min_size=min_size)\n\n    for x, y, w, h in cat_face:\n        #detected cat face shown in color image\n        cv.circle(image,(int(x+w\/2),int(y+h\/2)),(int((w + h)\/4)),(0, 127,255),3)\n        #cv.rectangle(image,(x,y),(x+w, y+h),(255, 127,0),3)\n\n    # image\n    fig = plt.figure(figsize=(10,10))\n    ax = fig.add_subplot(111)\n    image = cv.cvtColor(image, cv.COLOR_BGR2RGB)\n    ax.imshow(image)","99a1be85":"# cat image\nimg_source = cv.imread(os.path.join(FACE_DETECTION_FOLDER,\"cat.jpg\"))\n# detect face and show cat face marker over image\ndetect_cat_face(image=img_source,scale_factor=1.15, min_neighbors=1, min_size=(30, 30)) ","32a12ff9":"# Data preparation\n\n## Load packages  \n\nWe start by loading the packages.","b5983c19":"We import a cat image and we use the Cat Face Detector function (**cat_face_detect**) to detect the cat face.","389fd2a2":"# Cat Face Detection\n\nThe class CatFaceDetector initialize the cascade classifier (using the imported resource for cat face detection). The function detect uses a method of the CascadeClassifier to detect objects into images - in this case the cat face.","8205d2a0":"## Load Haar Cascade resource\n\nHere we load the Haar Cascade resource for Cat Face detection.","cd39f38c":"We initialize an object of type CatFaceDetector.","ffe49c53":"# More inspiration\n\nUse these resources to start tagging your favorite cat pictures.   \n\nHave fun!","3f0f7947":"We define a function for cat face detection. The detected cat face is marked with an orange circle.","af29e24f":"# Introduction\n\nFrom [Face Detection using OpenCV](https:\/\/www.kaggle.com\/serkanpeldek\/face-detection-with-opencv) by @serkanpeldek we got and slightly modified the functions to extract the cat face.\n"}}