{"cell_type":{"d0cc940a":"code","8fadda20":"code","37b1039b":"code","ec3f32ae":"code","e5ea4907":"code","ebac1afa":"code","9bdc79e8":"code","05e166a9":"code","30bf106f":"code","7fae565e":"code","1da76b39":"code","ae89b757":"code","42687fcb":"code","6124428b":"code","e9c7cae1":"code","13ed0484":"code","8db97906":"code","0dec6033":"code","f2ae64b0":"code","0af8d769":"code","c79cbb8c":"code","8a8f9314":"code","2286e4e9":"code","bc8d1c04":"code","3477b3f4":"code","a99aa98a":"code","d3c4eca5":"code","6036d186":"code","50a3336b":"code","4e1b695a":"code","741f3b3a":"code","71c2b8a6":"code","5a1941cc":"code","3a70cae4":"code","341513d0":"code","ef258740":"code","85ffd7c7":"code","5cf3a029":"code","b53ec674":"code","4cc9c902":"code","2e12ff49":"code","b77f2277":"code","a1dca169":"code","3f11cdd2":"code","1bb71b44":"code","ff61a3fa":"code","ec931f3d":"code","de9e5aa9":"code","6e850de0":"code","5552c512":"code","f8d93e08":"code","884ae82b":"code","8ca7b2d2":"code","d9c6fc99":"code","20f29dec":"code","3d7615e5":"code","7fcdbd65":"code","0bf4327c":"code","7a5fc4cb":"code","2b4259a0":"code","7ad7c314":"code","14c80cc5":"code","867024d1":"code","718a335d":"code","3227cc90":"code","05020b51":"code","02f8fbae":"code","78d66079":"code","97479ff6":"code","66bb36bb":"code","da23b4e7":"code","89302f4e":"code","00b040ec":"code","a7f19a70":"code","b4cb59b5":"code","596fa10c":"code","f39c1a6b":"code","5ce43f8d":"code","2671f172":"code","82b1e7f0":"code","52028bfc":"code","6abd1701":"code","4903475c":"code","cc057357":"code","41ad94a1":"code","adc08c0e":"code","d6a5dc71":"code","bd66bef7":"code","0cb03f05":"code","e1dede70":"code","8176286c":"code","fd5a647e":"code","20283a9e":"code","55213f71":"code","2b40066b":"code","c3b80c24":"code","993aab8a":"code","2d934b6d":"code","63ae4344":"code","bee1e1ec":"code","ae1759c3":"code","7ecace5b":"code","5408e113":"code","01b4e572":"code","50d00958":"code","c466c42b":"code","a191eb30":"code","ce55ee9b":"markdown","99d7b445":"markdown","ce2b939d":"markdown","7998f247":"markdown","ad097033":"markdown","b1cde7bb":"markdown","79cff194":"markdown","a1cb6d4b":"markdown","efff2f44":"markdown","c532c26f":"markdown","ecc2041b":"markdown","c278c569":"markdown","b7fd592d":"markdown","e6c0e80b":"markdown","16ec506d":"markdown","02a602a6":"markdown","f4199cc8":"markdown","063ad033":"markdown","dc02c365":"markdown","6823b51c":"markdown"},"source":{"d0cc940a":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\")\n\nimport seaborn as sns\n\nfrom collections import Counter\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","8fadda20":"train_df = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain_df","37b1039b":"test_df = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest_df","ec3f32ae":"train_df.columns","e5ea4907":"train_df.info()","ebac1afa":"test_df.info()","9bdc79e8":"train_df.shape","05e166a9":"test_df.shape","30bf106f":"test_df.columns","7fae565e":"def bar_plot(variable):\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable\n    varValue = var.value_counts()\n   \n    # visualize\n    plt.figure(figsize= (9, 3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    \n    print(\"{}: \\n{}\".format(variable, varValue))","1da76b39":"category1 = [\"Survived\", \"Sex\", \"Pclass\", \"Embarked\", \"SibSp\", \"Parch\"]\nfor c in category1:\n    bar_plot(c)","ae89b757":"def plot_hist(variable):\n    plt.hist(train_df[variable],bins= 50)\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} distribution with hist\".format(variable))\n    plt.show()","42687fcb":"numericVar = [\"Fare\",\"Age\",\"PassengerId\"]\nfor n in numericVar:\n    plot_hist(n)","6124428b":"# Pclass vs Survived\ntrain_df[[\"Pclass\", \"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by= \"Survived\", ascending= False) ","e9c7cae1":"# Sex vs Survived\ntrain_df[[\"Sex\", \"Survived\"]].groupby([\"Sex\"], as_index = False).mean().sort_values(by= \"Survived\", ascending= False)","13ed0484":"# SibSp vs Survived\ntrain_df[[\"SibSp\", \"Survived\"]].groupby([\"SibSp\"], as_index = False).mean().sort_values(by= \"Survived\", ascending= False)","8db97906":"# Parch vs Survived\ntrain_df[[\"Parch\", \"Survived\"]].groupby([\"Parch\"], as_index = False).mean().sort_values(by= \"Survived\", ascending= False)","0dec6033":"train_df.describe()","f2ae64b0":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile Q1\n        Q1 = np.percentile(df[c], 25)\n        # 3st quartile Q3\n        Q3 = np.percentile(df[c], 75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indices\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indices\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","0af8d769":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","c79cbb8c":"# drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"]), axis = 0).reset_index(drop= True)","8a8f9314":"train_df.shape","2286e4e9":"train_df.loc[detect_outliers(train_df, [\"Age\", \"SibSp\", \"Parch\", \"Fare\"])]","bc8d1c04":"test_df.info()","3477b3f4":"train_df_len = len(train_df)\ntrain_df_len","a99aa98a":"train_df = pd.concat([train_df, test_df], axis = 0).reset_index(drop= True)","d3c4eca5":"train_df.shape","6036d186":"train_df.isnull().sum()","50a3336b":"test_df","4e1b695a":"train_df[train_df[\"Embarked\"].isnull()]","741f3b3a":"train_df.boxplot(column= \"Fare\", by= \"Embarked\")\nplt.show()","71c2b8a6":"train_df[\"Embarked\"] = train_df[\"Embarked\"].fillna(\"C\")","5a1941cc":"train_df[train_df[\"Fare\"].isnull()]","3a70cae4":"train_df[\"Fare\"] = train_df[\"Fare\"].fillna(np.mean(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]))","341513d0":"train_df[train_df[\"Fare\"].isnull()]","ef258740":"list1 = [\"SibSp\", \"Parch\", \"Age\", \"Fare\", \"Survived\"]","85ffd7c7":"sns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")\nplt.show()","5cf3a029":"g = sns.factorplot( x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","b53ec674":"g = sns.factorplot( x = \"Parch\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","4cc9c902":"g = sns.factorplot( x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","2e12ff49":"g = sns.FacetGrid(train_df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins= 25)\nplt.show()","b77f2277":"train_df[train_df[\"Age\"].isnull()]","a1dca169":"sns.factorplot(x = \"Sex\", y= \"Age\", hue= \"Pclass\", data = train_df, kind= \"box\")\nplt.show()","3f11cdd2":"sns.factorplot(x= \"Parch\", y= \"Age\", data= train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y= \"Age\", data = train_df, kind = \"box\")\nplt.show()","1bb71b44":"sns.heatmap(train_df[[\"Age\", \"Sex\", \"SibSp\", \"Parch\", \"Pclass\"]].corr(), annot= True)\nplt.show()","ff61a3fa":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\n\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","ec931f3d":"train_df[train_df[\"Age\"].isnull()]","de9e5aa9":"train_df.head()","6e850de0":"train_df.drop(labels = [\"PassengerId\", \"Cabin\", \"Ticket\", \"Name\"], axis= 1, inplace= True)","5552c512":"train_df.columns","f8d93e08":"train_df.Sex","884ae82b":"train_df[\"Sex\"] = train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Sex\"])\ntrain_df.head()","8ca7b2d2":"train_df[\"Embarked\"] = train_df[\"Embarked\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns= [\"Embarked\"])\ntrain_df.head()","d9c6fc99":"from sklearn.model_selection import train_test_split","20f29dec":"from sklearn.linear_model import LogisticRegression","3d7615e5":"train_df_len","7fcdbd65":"train_df.shape","0bf4327c":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"], axis = 1, inplace = True)","7a5fc4cb":"test.shape","2b4259a0":"train_df.shape","7ad7c314":"train= train_df[:train_df_len]\nX_train = train.drop(labels = \"Survived\", axis= 1)\ny_train = train[\"Survived\"]","14c80cc5":"X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size= 0.2, random_state= 42)\nprint(\"X_train\", len(X_train))\nprint(\"X_test\", len(X_test))\nprint(\"y_train\", len(y_train))\nprint(\"y_test\", len(y_test))\nprint(\"test\", len(test))","867024d1":"print(\"X_train\", X_train.shape)\nprint(\"X_test\", X_test.shape)\nprint(\"y_train\", y_train.shape)\nprint(\"y_test\", y_test.shape)\nprint(\"test\", test.shape)","718a335d":"y_train","3227cc90":"y_test","05020b51":"X_train","02f8fbae":"X_test","78d66079":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler()","97479ff6":"X_train = scale.fit_transform(X_train)\nX_test = scale.transform(X_test)","66bb36bb":"X_train","da23b4e7":"X_test","89302f4e":"from sklearn.linear_model import LogisticRegression","00b040ec":"log_model = LogisticRegression()","a7f19a70":"log_model.fit(X_train, y_train)","b4cb59b5":"log_model.coef_","596fa10c":"log_model.intercept_","f39c1a6b":"# y = -0.66 - 1.03 * Pclass - 0.64 * Age -0.27*SibSp -0.042*Parch + 0.01*Fare + 0.63 * Sex_0 - 0.63* Sex_1 + 0.12*Embarked_C + 0.04 * Embarked_Q - 0.13 *  Embarked_S","5ce43f8d":"train_df.columns","2671f172":"y_pred = log_model.predict(X_test)\ny_pred","82b1e7f0":"y_train_pred = log_model.predict(X_train)","52028bfc":"y_train_pred","6abd1701":"from sklearn.metrics import precision_score, recall_score, accuracy_score, f1_score","4903475c":"accuracy_score(y_test, y_pred)","cc057357":"accuracy_score(y_train, y_train_pred)","41ad94a1":"precision_score(y_test, y_pred)","adc08c0e":"precision_score(y_train, y_train_pred)","d6a5dc71":"recall_score(y_test, y_pred)","bd66bef7":"recall_score(y_train, y_train_pred)","0cb03f05":"f1_score(y_test, y_pred, average = \"weighted\")","e1dede70":"f1_score(y_train, y_train_pred, average = \"weighted\")","8176286c":"from sklearn.metrics import confusion_matrix, plot_confusion_matrix","fd5a647e":"confusion_matrix(y_test, y_pred)","20283a9e":"plot_confusion_matrix(log_model, X_test, y_test)","55213f71":"plot_confusion_matrix(log_model, X_test, y_test, normalize= \"all\")","2b40066b":"f1_score(y_test, y_pred, average = \"weighted\")","c3b80c24":"f1_score(y_train, y_train_pred, average = \"weighted\")","993aab8a":"from sklearn.model_selection import cross_val_score, cross_validate","2d934b6d":"model = LogisticRegression()","63ae4344":"scores = cross_val_score(model, X_train, y_train, cv= 10)\nprint(\"Cross- validation mean of accuracy scores\", scores.mean())\nprint(\"\")\nprint(scores)","bee1e1ec":"scores = cross_val_score(model, X_test, y_test, cv= 10)\nprint(\"Cross- validation mean of accuracy scores\", scores.mean())\nprint(\"\")\nprint(scores)","ae1759c3":"model = LogisticRegression()\n\nscores = cross_validate(model, X_train, y_train, scoring = [\"accuracy\", \"precision_weighted\", \"recall_weighted\", \n                                                               \"f1_weighted\"], cv = 10)\ndf_scores = pd.DataFrame(scores, index= range(1, 11))\ndf_scores","7ecace5b":"df_scores.mean()[2:]","5408e113":"model = LogisticRegression()\n\nscores = cross_validate(model, X_test, y_test, scoring = [\"accuracy\", \"precision_weighted\", \"recall_weighted\", \n                                                               \"f1_weighted\"], cv = 10)\ndf_scores = pd.DataFrame(scores, index= range(1, 11))\ndf_scores","01b4e572":"df_scores.mean()[2:]","50d00958":"from sklearn.metrics import classification_report","c466c42b":"print(classification_report(y_test, y_pred))","a191eb30":"print(classification_report(y_train, y_train_pred))","ce55ee9b":"Pclass -- Survived","99d7b445":"## Missing Values\n    * find missing values\n    * fill missing values","ce2b939d":"## Fill M\u0130ssing : Age Feature","7998f247":"## Load and Check Dataset","ad097033":"## Feature Engineering","b1cde7bb":"## Embarked","79cff194":"## Visualization\n\ncorrelatin between SibS -- Parch -- Age -- Fare -- Survived","a1cb6d4b":"Parch -- Survived","efff2f44":"Precision quantifies the number of positive class predictions that actually belong to the positive class.\nRecall quantifies the number of positive class predictions made out of all positive examples in the dataset.\nF-Measure provides a single score that balances both the concerns of precision and recall in one number.\n\naccuracy_score = R2_score","c532c26f":"### Fill Missing Values\n    * Embarked has 2 missing values\n    * fare has only 1","ecc2041b":"ya\u015f cinsiyetle ili\u015fkili de\u011fil, fakat parch, sibsp ve pclass","c278c569":"## Outlier Detection","b7fd592d":"## Logistic Reggression","e6c0e80b":"## Age -- Survived","16ec506d":"## Numerical Variable","02a602a6":"## EDA","f4199cc8":"##  Modeling","063ad033":"## Basic Data Analysis","dc02c365":"## Train - Test split","6823b51c":"SibSp -- Survived"}}