{"cell_type":{"5178da54":"code","aeee25fe":"code","42648c89":"code","df6314bc":"code","0182b772":"code","532f47e8":"code","6d06c9c2":"code","503e3b7a":"code","ac3d6557":"code","afad952f":"code","70e0d68e":"code","17ca8712":"code","ae11dece":"code","59642ba7":"code","e050b68c":"code","006bd731":"code","b3c7f1e9":"code","b881bb6a":"code","44cc8d14":"code","8d79d510":"code","786653ba":"code","8e7c3644":"code","26960828":"code","51775fdb":"code","e235ff2b":"code","d9ec15ca":"code","1cd73c53":"code","5957cb65":"code","ef0c39d3":"code","38417411":"markdown","d8cc6ad1":"markdown","77fc2d85":"markdown","ed6a82a1":"markdown","cd3a2a2a":"markdown","d3b12eb1":"markdown"},"source":{"5178da54":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aeee25fe":"dataset = pd.read_csv(\"\/kaggle\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv\")","42648c89":"dataset.head()","df6314bc":"dataset.columns","0182b772":"# Input columns:\ndataset.iloc[:,:-1]","532f47e8":"# Output column:\ndataset['DEATH_EVENT']","6d06c9c2":"categorical_columns = ['anaemia', 'diabetes', 'high_blood_pressure', 'sex', 'smoking', 'DEATH_EVENT']\nnumerical_columns = ['age', 'creatinine_phosphokinase', 'ejection_fraction', \n                     'platelets', 'serum_creatinine', 'serum_sodium', 'time'],","503e3b7a":"dataset.corr()","ac3d6557":"import seaborn as sns\nsns.countplot(x=\"DEATH_EVENT\", data=dataset)","afad952f":"from imblearn.over_sampling import SMOTE\noversampling_func = SMOTE(random_state=42)","70e0d68e":"# To oversample the dataset needs to split into X and y\nX = dataset.iloc[:,:-1]\ny = dataset[[\"DEATH_EVENT\"]]","17ca8712":"print(\"Size of dataset before oversampling: \"+str(len(X)))","ae11dece":"X_smote, y_smote = oversampling_func.fit_resample(X, y)","59642ba7":"smote_dataset = pd.concat((X_smote,y_smote),axis=1) # X_smote and y_smote are combined to create the countplot below","e050b68c":"sns.countplot(x=\"DEATH_EVENT\", data=smote_dataset)","006bd731":"print('Size of SMOTE dataset: '+str(len(X_smote)))","b3c7f1e9":"smote_dataset.corr()","b881bb6a":"features = [\"age\", \"serum_creatinine\", \"serum_sodium\", \"time\", \"ejection_fraction\"]\ninput_data = smote_dataset[features]\noutput_data = smote_dataset[\"DEATH_EVENT\"]","44cc8d14":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(input_data, output_data, test_size = 0.2, random_state = 1)","8d79d510":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","786653ba":"scaler.fit(X_train)\nX_train = scaler.transform(X_train)\nX_test = scaler.transform(X_test)","8e7c3644":"X_train[0:5]  # Training data after scaling","26960828":"X_test[0:5]  # Testing data after scaling","51775fdb":"from sklearn.metrics import confusion_matrix, accuracy_score","e235ff2b":"# Random Forest Classifier\nfrom sklearn.ensemble import RandomForestClassifier\nrf_clf = RandomForestClassifier(max_depth=15, random_state = 42)\nrf_clf.fit(X_train, y_train)\ny_pred = rf_clf.predict(X_test)\nrf_acc = accuracy_score(y_test, y_pred)\nprint(\"Accuracy of Random Forest Classifier: \"+str(accuracy_score(y_test, y_pred)))","d9ec15ca":"# Iterating through various K Nearest Neighbours Classifiers \nfrom sklearn.neighbors import KNeighborsClassifier\nacc_list = []\nmax_val = 0\nfor neighbours in range(1,41):\n    knn_clf = KNeighborsClassifier(n_neighbors=neighbours)\n    knn_clf.fit(X_train, y_train)\n    y_pred = knn_clf.predict(X_test)\n    accuracy_val = accuracy_score(y_test, y_pred)\n    acc_list.append(int(accuracy_val))\n    print(str(neighbours)+\": \"+str(accuracy_val))\n    if accuracy_val > max_val:\n        no_of_neighbours = neighbours\n        max_val = accuracy_val\n        \nprint(\"Optimal number of neighbours: \"+str(no_of_neighbours)+\" with accuracy \"+str(max_val))\nknn_acc = max_val","1cd73c53":"from sklearn.svm import SVC\nsvc_clf = SVC(random_state=42)\nsvc_clf.fit(X_train, y_train)\ny_pred = svc_clf.predict(X_test)\nprint(\"Accuracy of SVM classifier \"+str(accuracy_score(y_test, y_pred)))\nsvc_acc = accuracy_score(y_test, y_pred)","5957cb65":"acc_list=[svc_acc,knn_acc,rf_acc]","ef0c39d3":"print(\"Maximum Accuracy achieved: \"+str(max(acc_list)))\nprint(\"Accuracy of various classifiers:\")\nprint(\"* SVM Classifier: \"+str(svc_acc))\nprint(\"* KNN Classifier: \"+str(knn_acc))\nprint(\"* Random Forest Classifier: \"+str(rf_acc))","38417411":"Significant correlation with DEATH_EVENT observed for the following features:\n* Age: 0.253729\n* Serum creatinine: 0.294278 \n* Serum sodium: -0.195204\n* Time:  -0.526964\n* Ejection Fraction: -0.268603 ","d8cc6ad1":"SMOTE is used to oversample X and y, and are saved into new data frames X_smote and y_smote.","77fc2d85":"Only the significant features observed in the correlation are captured here. ","ed6a82a1":"Since the features like age, serum_sodium, serum_creatinine are on different scales, the data is scaled, using StandardScaler. ","cd3a2a2a":"Significant correlation with DEATH_EVENT observed for the following features:\n\n* Age\n* Serum creatinine\n* Serum sodium\n* Time\n* Ejection Fraction","d3b12eb1":"The number of deaths are half that of the number of patients alive, i.e. 100 deaths against 200 alive.\nThis data needs to be balanced, via oversampling of the minority class(deaths) or undersampling the majority class(alive).\n\nHere, we use the SMOTE technique to oversample the minority class.\n"}}