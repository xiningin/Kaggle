{"cell_type":{"5d539bd7":"code","30e92bf0":"code","995fecdd":"code","806d1f90":"code","88267cde":"code","4f489c35":"code","c40f6d9c":"code","0925b14c":"code","e03e9c98":"code","3bfb468a":"code","932824cc":"code","9fae71f9":"code","5f635c8d":"code","3aa150d3":"code","f174ca3a":"code","7c2c8d98":"code","69c94dd1":"code","3505a9f8":"code","0b85f29c":"code","1c0d77fe":"code","61a161ad":"code","0799186b":"code","422c0e9c":"code","6e830de3":"code","b9d82589":"code","1a591edf":"markdown","d65495e7":"markdown","c1e11841":"markdown","1573691e":"markdown","859ddd06":"markdown","8e880229":"markdown","573a60fc":"markdown","bb6d5278":"markdown","d8ebee56":"markdown","ede4206d":"markdown","751dd226":"markdown"},"source":{"5d539bd7":"# This command makes sure that we can see plots we create as part of the notebook & without having to save & read files\n%matplotlib inline ","30e92bf0":"import sys\nfrom logging import info\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport sklearn\nfrom sklearn import datasets, neighbors, preprocessing\n\n# Let's print what versions of the libraries we're using\nprint(f\"python\\t\\tv {sys.version.split(' ')[0]}\\n===\")\nfor lib_ in [np, pd, sns, sklearn, ]:\n    sep_ = '\\t' if len(lib_.__name__) > 8 else '\\t\\t'\n    print(f\"{lib_.__name__}{sep_}v {lib_.__version__}\"); del sep_","995fecdd":"# The digits dataset\ndigits = datasets.load_digits()","806d1f90":"digits.images.shape","88267cde":"digits.target","4f489c35":"def plot_handwritten_digit(the_image, label): # plot_handwritten_digit<-function(the_image, label)\n    plt.figure(figsize=(2, 2))\n    plt.axis('off')\n    plt.imshow(the_image, cmap=plt.cm.gray_r, interpolation='nearest')\n    plt.title('Training: %i' % label)","c40f6d9c":"# this will show us the pixel values\nimage_num = 1000\ndigits.images[image_num]","0925b14c":"# and then we can plot them\nplot_handwritten_digit(digits.images[image_num], digits.target[image_num])","e03e9c98":"fig, axes = plt.subplots(10, 10, figsize=(8, 8),\n                         subplot_kw={'xticks':[], 'yticks':[]},\n                         gridspec_kw=dict(hspace=0.1, wspace=0.1))\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(digits.images[i], cmap='binary', interpolation='nearest')\n    ax.text(0.05, 0.05, str(digits.target[i]),\n            transform=ax.transAxes, color='green')\n","3bfb468a":"n_samples = len(digits.images)\ndata = digits.images.reshape((n_samples, 64))\nlabels = digits.target","932824cc":"data.shape","9fae71f9":"data_scaled = preprocessing.scale(data)\ndata_scaled","5f635c8d":"data.mean(axis=0)","3aa150d3":"data_scaled.mean(axis=0)","f174ca3a":"n_train = int(0.9*n_samples)\n\nX_train = data[:n_train]\ny_train = labels[:n_train]\nX_test = data[n_train:]\n# re-shape this back so we can plot it again as an image\ntest_images = X_test.reshape((len(X_test), 8, 8))\ny_test = labels[n_train:]","7c2c8d98":"X_train.shape","69c94dd1":"knn = neighbors.KNeighborsClassifier(n_neighbors=5)","3505a9f8":"knn.fit(X_train, y_train)","0b85f29c":"pred_labels = knn.predict(X_test)\npred_labels","1c0d77fe":"pred_probs = knn.predict_proba(X_test)\npred_probs","61a161ad":"test_num = 11\nplot_handwritten_digit(test_images[test_num], y_test[test_num])\nprint(\"true label is %s\" % y_test[test_num])\nprint(\"predicted label is %s\" % pred_labels[test_num])\nprint(\"predicted probabilities are %s\" % pred_probs[test_num])","0799186b":"np.where(pred_labels != y_test)","422c0e9c":"test_num = 41\nplot_handwritten_digit(test_images[test_num], y_test[test_num])\nprint(\"true label is %s\" % y_test[test_num])\nprint(\"predicted label is %s\" % pred_labels[test_num])\nprint(\"predicted probabilities are %s\" % pred_probs[test_num])","6e830de3":"test_num = 43\nplot_handwritten_digit(test_images[test_num], y_test[test_num])\nprint(\"true label is %s\" % y_test[test_num])\nprint(\"predicted label is %s\" % pred_labels[test_num])\nprint(\"predicted probabilities are %s\" % pred_probs[test_num])","b9d82589":"for test_num in np.where(pred_labels != y_test)[0]:\n    print(f\"true label is {y_test[test_num]}\"\n          f\"\\npredicted label is {pred_labels[test_num]}\"\n         )\n    print(\"predicted probabilities are %s\" % pred_probs[test_num])\n    plot_handwritten_digit(test_images[test_num], y_test[test_num])\n    plt.show()\n\n","1a591edf":"# Lecture 1: k-Nearest Neighbors and Handwritten Digit Classification","d65495e7":"Make a training set and a test set.  We'll use the nearest neighbors from the training set to classify each image from the test set.","c1e11841":"Scikit-learn classifiers generally have a standard programming interface.  You construct the class:","1573691e":"The dataset consists of 1,797 images, each 8 pixels by 8 pixels.  The \"target\" field has the label, telling us the true digit the image represents.","859ddd06":"You fit it to your data:","8e880229":"In this example, we'll use k-NN to classify 8x8 pixel images of hand-written digits.  The k-NN classifier is park of scikit-learn:\n* [http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier)\n\n---\nForked from: https:\/\/github.com\/cmmalone\/UChicago_ML","573a60fc":"Instead of each image being 8x8 pixels, we flatten it to just be a single row of 64 numbers:","bb6d5278":"If we need to standardize the features (make them all have mean zero and standard deviation one), this is how we do it:","d8ebee56":"Here, we define a function that takes an image and the true label and plots it for us:","ede4206d":"And you predict on new data:","751dd226":"Let's find examples where the predicted label is wrong:"}}