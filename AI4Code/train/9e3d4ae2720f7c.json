{"cell_type":{"557bd449":"code","dd4b0236":"code","83ba16e2":"code","d17251fe":"code","35769fc8":"code","6d1e4ba3":"code","69ba6f91":"code","b5e23d6b":"code","ee1656a7":"code","d2d55338":"code","51048534":"code","ff8c7de6":"code","f13eafc8":"code","8dc80b13":"code","5d6cbf7e":"code","e70b23ae":"code","06b627cf":"code","cf0793b1":"code","ef7a0820":"code","fa0c5a8b":"code","65878660":"code","80fecbe8":"code","a2975c02":"code","7fb98f4f":"code","a54f1749":"code","35e50d41":"code","5ae3e3d5":"code","5d33f51f":"code","67aa3e76":"code","789254a6":"code","95258281":"markdown","f40acdbb":"markdown","18d08f4e":"markdown","fa39f3ce":"markdown","e2a7349c":"markdown","9b7ca9ac":"markdown","a2a65012":"markdown","1cca84de":"markdown","4d244b1a":"markdown","25cc7bcb":"markdown","0fa29b8e":"markdown","d8f5053d":"markdown","cb13bd84":"markdown","3b70327c":"markdown","b6416b22":"markdown","2ef8e485":"markdown","b42eaa54":"markdown","a6dda9e7":"markdown","9646d2e2":"markdown","4cac34f2":"markdown"},"source":{"557bd449":"%matplotlib inline\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_context(\"notebook\")\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport glob\nfilelist = glob.glob(\"..\/input\/stock-data-dow-jones\/*.csv\")\n\n# Load data\nAAPL = pd.read_csv('..\/input\/stock-data-dow-jones\/AAPL.csv', sep=',', index_col=0, parse_dates=True)\ncols = ['open', 'high', 'low', 'close', 'volume']\nAAPL = AAPL[cols].copy()\nAAPL = AAPL[AAPL.index>='2015-01-01']\n\ndf_stocks = pd.DataFrame()\n\nfor i in filelist:\n    tmp = pd.read_csv(i)\n    tmp['symbol'] = i.split('\/')[-1].split('.')[0]\n    df_stocks = df_stocks.append(tmp)\n\ncols = ['date', 'close', 'volume', 'symbol']\ndf_stocks = df_stocks[cols].copy()\ndf_stocks['date'] = pd.to_datetime(df_stocks['date'])\n\n# create new dataframe with just closing price for each stock\ndf = df_stocks.pivot(index='date', columns='symbol', values='close')\n\n# subset data since 2015\ndf = df[df.index>='2015-01-01']\ndf.tail()","dd4b0236":"plt.figure(figsize=(15,7))\ntop = plt.subplot2grid((4,4), (0, 0), rowspan=3, colspan=4)\nbottom = plt.subplot2grid((4,4), (3,0), rowspan=1, colspan=4)\ntop.plot(AAPL.index, AAPL['close']) \nbottom.bar(AAPL.index, AAPL['volume']) \n \n# set the labels\ntop.axes.get_xaxis().set_visible(False)\ntop.set_title('AAPL')\ntop.set_ylabel('Closing Price')\nbottom.set_ylabel('Volume');","83ba16e2":"plt.figure(figsize=(15,7))\nsns.distplot(AAPL['close'].dropna(), bins=50, color='purple');","d17251fe":"# simple moving averages\nsma5 = AAPL['close'].rolling(5).mean() #5 days\nsma100 = AAPL['close'].rolling(100).mean() #100 days\n \nAAPL_sma = pd.DataFrame({'AAPL': AAPL['close'], 'SMA 5': sma5, 'SMA 100': sma100})\nAAPL_sma.plot(figsize=(15, 7), legend=True, title='AAPL');","35769fc8":"df.plot(figsize=(15,8))\nplt.ylabel('Price');","6d1e4ba3":"returnfstart = df.apply(lambda x: x \/ x[0])\nreturnfstart.plot(figsize=(15,7)).axhline(1, lw=1, color='black')\nplt.ylabel('Return From Start Price');","69ba6f91":"df.pct_change().plot(figsize=(15,7))\nplt.axhline(0, color='black', lw=1)\nplt.ylabel('Daily Percentage Return');","b5e23d6b":"# Resample df to business months, take last observation as value \nmonthly = df.resample('BM').apply(lambda x: x[-1])\n\n# Calculate the monthly percentage change\nmonthly.pct_change().plot(figsize=(15,7))\nplt.axhline(0, color='black', lw=1)\nplt.ylabel('Monthly Percentage Return');","ee1656a7":"# Resample df to quarters, take the mean as value per quarter\nquarter = df.resample('4M').mean()\n\n# Calculate the quarterly percentage change\nquarter.pct_change().plot(figsize=(15,7))\nplt.axhline(0, color='black', lw=1)\nplt.ylabel('Quarterly Percentage Return');","d2d55338":"sns.jointplot('AAPL', 'NKE', df, kind='reg', color='seagreen');","51048534":"# Compute the correlation matrix\ncorr = df.corr()\n\n# Generate a mask for the upper triangle\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(10, 10))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5});","ff8c7de6":"fig = sns.PairGrid(df[['AAPL', 'NKE', 'WBA']].dropna())\n# define top, bottom and diagonal plots\nfig.map_upper(plt.scatter, color='purple')\nfig.map_lower(sns.kdeplot, cmap='cool_d')\nfig.map_diag(sns.distplot, bins=30);","f13eafc8":"daily_pct_c = df\/ df.shift(1) -1\ndaily_pct_c.hist(bins=50, figsize=(15,20))\nplt.show()\n\ndisplay(daily_pct_c.describe())","8dc80b13":"cum_daily_return = (1 + daily_pct_c).cumprod()\n\ncum_daily_return.plot(figsize=(12,8))\nplt.ylabel('Cumulative Daily Returns');\nplt.axhline(1, color='black', lw=1)\nplt.show()","5d6cbf7e":"# Resample the cumulative daily return to cumulative monthly return \ncum_monthly_return = cum_daily_return.resample(\"M\").mean()\n\ncum_monthly_return.plot(figsize=(12,8))\nplt.ylabel('Cumulative Monthly Returns');\nplt.axhline(1, color='black', lw=1)\nplt.show()","e70b23ae":"# Define the minumum of periods to consider \nmin_periods = 75 \n\n# Calculate the volatility\nvol = daily_pct_c.rolling(min_periods).std() * np.sqrt(min_periods) \n\n# Plot the volatility\nvol.plot(figsize=(10, 8))\n\n# Show the plot\nplt.show()","06b627cf":"AAPL.head()","cf0793b1":"# Initialize the short and long windows\nshort_window = 40\nlong_window = 100\n\n# Initialize the `signals` DataFrame with the `signal` column\nsignals = pd.DataFrame(index=AAPL.index)\nsignals['signal'] = 0.0\n\n# Create short simple moving average over the short window\nsignals['short_mavg'] = AAPL['close'].rolling(window=short_window, min_periods=1, center=False).mean()\n\n# Create long simple moving average over the long window\nsignals['long_mavg'] = AAPL['close'].rolling(window=long_window, min_periods=1, center=False).mean()\n\n# Create signals\nsignals['signal'][short_window:] = np.where(signals['short_mavg'][short_window:] \n                                            > signals['long_mavg'][short_window:], 1.0, 0.0)   \n\n# Generate trading orders\nsignals['positions'] = signals['signal'].diff()","ef7a0820":"# Initialize the plot figure\nfig = plt.figure(figsize=(10, 8))\n\n# Add a subplot and label for y-axis\nax1 = fig.add_subplot(111,  ylabel='Price in $')\n\n# Plot the closing price\nAAPL['close'].plot(ax=ax1, color='grey', lw=2.)\n\n# Plot the short and long moving averages\nsignals[['short_mavg', 'long_mavg']].plot(ax=ax1, lw=2.)\n\n# Plot the buy signals\nax1.plot(signals.loc[signals.positions == 1.0].index, \n         signals.short_mavg[signals.positions == 1.0],\n         '^', markersize=10, color='m')\n         \n# Plot the sell signals\nax1.plot(signals.loc[signals.positions == -1.0].index, \n         signals.short_mavg[signals.positions == -1.0],\n         'v', markersize=10, color='k')\n         \n# Show the plot\nplt.show()","fa0c5a8b":"# Set the initial capital\ninitial_capital= float(100000.0)\n\n# Create a DataFrame `positions`\npositions = pd.DataFrame(index=signals.index).fillna(0.0)\n\n# Buy a 100 shares\npositions['AAPL'] = 100*signals['signal']   \n  \n# Initialize the portfolio with value owned   \nportfolio = positions.multiply(AAPL['close'], axis=0)\n\n# Store the difference in shares owned \npos_diff = positions.diff()\n\n# Add `holdings` to portfolio\nportfolio['holdings'] = (positions.multiply(AAPL['close'], axis=0)).sum(axis=1)\n\n# Add `cash` to portfolio\nportfolio['cash'] = initial_capital - (pos_diff.multiply(AAPL['close'], axis=0)).sum(axis=1).cumsum()   \n\n# Add `total` to portfolio\nportfolio['total'] = portfolio['cash'] + portfolio['holdings']\n\n# Add `returns` to portfolio\nportfolio['returns'] = portfolio['total'].pct_change()","65878660":"fig = plt.figure(figsize=(10, 8))\n\nax1 = fig.add_subplot(111, ylabel='Portfolio value in $')\n\n# Plot the equity curve in dollars\nportfolio['total'].plot(ax=ax1, lw=2.)\n\n# Plot the \"buy\" trades against the equity curve\nax1.plot(portfolio.loc[signals.positions == 1.0].index, \n         portfolio.total[signals.positions == 1.0],\n         '^', markersize=10, color='m')\n\n# Plot the \"sell\" trades against the equity curve\nax1.plot(portfolio.loc[signals.positions == -1.0].index, \n         portfolio.total[signals.positions == -1.0],\n         'v', markersize=10, color='k')\n\n# Show the plot\nplt.show()","80fecbe8":"# Isolate the returns of your strategy\nreturns = portfolio['returns']\n\n# annualized Sharpe ratio\nsharpe_ratio = np.sqrt(252) * (returns.mean() \/ returns.std())\n\n# Print the Sharpe ratio\nprint(np.round(sharpe_ratio,2))","a2975c02":"# Define a trailing 252 trading day window\nwindow = 252\n\n# Calculate the max drawdown in the past window days for each day\nrolling_max = AAPL['close'].rolling(window, min_periods=1).max()\ndaily_drawdown = AAPL['close']\/rolling_max - 1.0\n\n# Calculate the minimum (negative) daily drawdown\nmax_daily_drawdown = daily_drawdown.rolling(window, min_periods=1).min()\n\n# Plot the results\ndaily_drawdown.plot()\nmax_daily_drawdown.plot()\n\n# Show the plot\nplt.show()","7fb98f4f":"# Get the number of days in `aapl`\ndays = (AAPL.index[-1] - AAPL.index[0]).days\n\n# Calculate the CAGR \ncagr = ((((AAPL['close'][-1]) \/ AAPL['close'][1])) ** (365.0\/days)) - 1\n\n# Print CAGR\nprint(np.round(cagr,3))","a54f1749":"# Drop the columns\nph_df = AAPL.drop(['open', 'high', 'low','volume'], axis=1)\nph_df.reset_index(inplace=True)\nph_df.rename(columns={'close': 'y', 'date': 'ds'}, inplace=True)\nph_df['ds'] = pd.to_datetime(ph_df['ds'])\nph_df.head()","35e50d41":"from fbprophet import Prophet\nm = Prophet()\nm.fit(ph_df)\n\n# Create Future dates\nfuture_prices = m.make_future_dataframe(periods=365)\n\n# Predict Prices\nforecast = m.predict(future_prices)\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","5ae3e3d5":"fig = m.plot(forecast)\nax1 = fig.add_subplot(111)\nax1.set_title(\"AAPL Stock Price Forecast\", fontsize=16)\nax1.set_xlabel(\"Date\", fontsize=12)\nax1.set_ylabel(\"Close Price\", fontsize=12)\nplt.show()","5d33f51f":"fig2 = m.plot_components(forecast)\nplt.show()","67aa3e76":"# Monthly Data Predictions\nm = Prophet(changepoint_prior_scale=0.01).fit(ph_df)\nfuture = m.make_future_dataframe(periods=12, freq='M')\nfcst = m.predict(future)\nfig = m.plot(fcst)\nplt.title(\"Monthly Prediction \\n 1 year time frame\", fontsize=16)\nplt.xlabel(\"Date\", fontsize=12)\nplt.ylabel(\"Close Price\", fontsize=12)\n\nplt.show()","789254a6":"fig = m.plot_components(fcst)\nplt.show()","95258281":"Compound Annual Growth Rate (CAGR)","f40acdbb":"Cumulative daily returns","18d08f4e":"Just looking at the chart, you can see that the relationship is somewhat linear. Strongly correlated stocks can be used in pair trading","fa39f3ce":"PairGrid can be used for paired comparisons with flexibility on the type of charts being plotted. For this case, a scatterplots, kde plots and histograms are plotted.","e2a7349c":"#### Monthly Predictions","9b7ca9ac":"Because of stocks overlapping each other, it is a little hard to make any comparisons here. It is better to have some hard numbers so lets do some correlation plots.\n\n**Correlation Plots**","a2a65012":"Another way is the plot the daily percentage change of stock price.","1cca84de":"Volatility Calculation","4d244b1a":"Plot a Histogram of the Daily Closing Price","25cc7bcb":"As each stock has different prices, it is difficult to compare between them to visualise any relationships. Some transformation can help to normalise this issue.\n\n**Normalizing multiple stocks**\n\nDividing all the closing price to the first closing price in the period.","0fa29b8e":"Plot Daily Closing Price of multiple stocks","d8f5053d":"### Building a trading strategy","cb13bd84":"Chart Simple Moving Average","3b70327c":"Maximum Drawdown","b6416b22":"#### Evaluating Moving Average Crossover Strategy\nSharpe Ratio","2ef8e485":"### Forecast stock price","b42eaa54":"# Workflow for visualizing and analyzing stocks\nBasics for handling and analyzing stock market data\n\n### 1. Import Multiple Stock Data","a6dda9e7":"Distribution of daily percentage change","9646d2e2":"### 2. Visualizing Stock Data\nPlot the Daily Closing Price and Volume of a Stock","4cac34f2":"### Backtesting a strategy"}}