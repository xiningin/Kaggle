{"cell_type":{"b90da9b4":"code","413b747d":"code","8b1b3935":"code","b9f6a618":"code","3097ac5b":"code","f99f0c60":"code","11bd573f":"code","56f3e873":"code","37c2ac57":"code","bb4abd1c":"code","4e587caf":"code","d734f901":"code","a4b1866f":"code","f47911fb":"code","8d354725":"code","50fa08dc":"code","8163dfb7":"code","0dc9b3a0":"code","d1010200":"code","49f498a9":"code","8d6246f7":"code","a219f104":"code","c32f6256":"code","127f4aaf":"code","21afa5cc":"code","2f55d487":"code","53ea9415":"code","142a51ec":"code","e0a64479":"code","9ea617e7":"code","eb9f8e52":"code","0c7537ca":"code","bef7611b":"code","8628455f":"code","7d3ed02f":"code","bd184bb9":"markdown"},"source":{"b90da9b4":"!wget https:\/\/datahack-prod.s3.amazonaws.com\/test_file\/Test_jPKyvmK.csv\n!wget https:\/\/datahack-prod.s3.amazonaws.com\/train_file\/Train_eP48B9k.csv\n!wget https:\/\/datahack-prod.s3.amazonaws.com\/sample_submission\/SampleSubmission_XkIpo3X.csv","413b747d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n!pip install rfpimp\n!pip install catboost\nfrom sklearn.metrics import mean_absolute_error,accuracy_score\nimport lightgbm as lgb\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import StratifiedKFold,KFold,GridSearchCV,GroupKFold,train_test_split,StratifiedShuffleSplit\nfrom rfpimp import *\nfrom tqdm import tqdm\nfrom catboost import *\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.preprocessing import LabelEncoder","8b1b3935":"train = pd.read_csv('Train_eP48B9k.csv')\ntest = pd.read_csv('Test_jPKyvmK.csv')\nsub = pd.read_csv('SampleSubmission_XkIpo3X.csv')","b9f6a618":"train.head(5)","3097ac5b":"test.head(5)","f99f0c60":"df=train.append(test,ignore_index=True)","11bd573f":"df.isnull().sum(),df.nunique()","56f3e873":"df['id']=df.id.str.extract('(\\d+)').astype(int)","37c2ac57":"df['customer_age']=df['customer_age'].fillna(method='bfill')","bb4abd1c":"df['marital']=df['marital'].fillna('other')","4e587caf":"df['balance']=df['balance'].fillna(df['balance'].mean())","d734f901":"df['personal_loan']=df['personal_loan'].fillna('other')","a4b1866f":"df['num_contacts_in_campaign']=df['num_contacts_in_campaign'].fillna(-1)","f47911fb":"df['days_since_prev_campaign_contact']=df['days_since_prev_campaign_contact'].fillna(method='bfill')\ndf['days_since_prev_campaign_contact']=df['days_since_prev_campaign_contact'].fillna(method='ffill')","8d354725":"df['last_contact_duration']=df['last_contact_duration'].fillna(method='bfill')","50fa08dc":"x=['job_type','marital','education','default','housing_loan','personal_loan','communication_type','month','prev_campaign_outcome']\nfrom sklearn.preprocessing import LabelEncoder\nfor i in x:\n  le = LabelEncoder()\n  df[i] = le.fit_transform(df[i])\n  df[i]=df[i]+1","8163dfb7":"df.head()","0dc9b3a0":"x=['job_type','marital','education','default','housing_loan','personal_loan','communication_type','month','prev_campaign_outcome']\ndf = pd.get_dummies(df, columns=x)","d1010200":"train = df[df['term_deposit_subscribed'].isnull()==False]\ntest = df[df['term_deposit_subscribed'].isnull()==True]\ndel test['term_deposit_subscribed']","49f498a9":"#bad_labels = train[train['term_deposit_subscribed'] == 0].sample(15000).index\n#train = train[~train.index.isin(bad_labels)]","8d6246f7":"train['term_deposit_subscribed'].value_counts()","a219f104":"train_df=train.copy()\ntest_df=test.copy()","c32f6256":"from math import sqrt \nfrom sklearn.metrics import f1_score","127f4aaf":"X = train_df.drop(labels=['term_deposit_subscribed'], axis=1)\ny = train_df['term_deposit_subscribed'].values\n\n#from imblearn.over_sampling import SMOTE\n#sm = SMOTE(random_state=2)\n#X, y = sm.fit_sample(X, y.ravel())\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_cv, y_train, y_cv = train_test_split(X, y, test_size=0.25, random_state=101)","21afa5cc":"X_train.shape, y_train.shape, X_cv.shape, y_cv.shape","2f55d487":"categorical_features_indices = np.where(X_train.dtypes == 'category')[0]\ncategorical_features_indices","53ea9415":"from catboost import CatBoostClassifier\ncat = CatBoostClassifier(loss_function='MultiClass', \n                         eval_metric='TotalF1', \n                         classes_count=2,\n                         depth=10,\n                         random_seed=121, \n                         iterations=1000, \n                         learning_rate=0.1,\n                         leaf_estimation_iterations=1,\n                         l2_leaf_reg=1,\n                         bootstrap_type='Bayesian', \n                         bagging_temperature=1, \n                         random_strength=1,\n                         od_type='Iter', \n                         border_count=100,\n                        #task_type = 'GPU',\n                         od_wait=500)\ncat.fit(X_train, y_train, verbose=100,\n        use_best_model=True,\n        cat_features=categorical_features_indices,\n        eval_set=[(X_train, y_train),(X_cv, y_cv)],\n        plot=False)\npredictions = cat.predict(X_cv)\nprint('accuracy:', f1_score(y_cv, predictions, average='binary'))","142a51ec":"print('accuracy:', f1_score(y_cv, predictions, average='binary'))","e0a64479":"import seaborn as sns\nfeature_imp = pd.DataFrame(sorted(zip(cat.feature_importances_, X.columns), reverse=True)[:50], \n                           columns=['Value','Feature'])\nplt.figure(figsize=(15,15))\nsns.barplot(x=\"Value\", y=\"Feature\", data=feature_imp.sort_values(by=\"Value\", ascending=False))\nplt.title('Catboost Features')\nplt.tight_layout()\nplt.show()","9ea617e7":"Xtest = test_df","eb9f8e52":"from sklearn.model_selection import KFold\n\nerrcat = []\ny_pred_totcat = []\n\nfold = KFold(n_splits=10, shuffle=True, random_state=101)\n\nfor train_index, test_index in fold.split(X):\n    X_train, X_test = X.loc[train_index], X.loc[test_index]\n    y_train, y_test = y[train_index], y[test_index]\n    \n    cat = CatBoostClassifier(loss_function='MultiClass', \n                         eval_metric='TotalF1', \n                         classes_count=2,\n                         depth=6,\n                         random_seed=121, \n                         iterations=3500, \n                         learning_rate=0.1,\n                         leaf_estimation_iterations=1,\n                         l2_leaf_reg=1,\n                         bootstrap_type='Bayesian', \n                         bagging_temperature=0.8, \n                         random_strength=1,\n                         od_type='Iter', \n                         border_count=100,\n                         od_wait=500)\n    cat.fit(X_train, y_train, eval_set=[(X_test, y_test)], verbose=0, early_stopping_rounds=200, cat_features=categorical_features_indices)\n\n    y_pred_cat = cat.predict(X_test)\n    print(\"Accuracy: \", f1_score(y_test,y_pred_cat, average='binary'))\n\n    errcat.append(f1_score(y_test,y_pred_cat, average='binary'))\n    p = cat.predict(Xtest)\n    y_pred_totcat.append(p)","0c7537ca":"np.mean(errcat,0)","bef7611b":"cat_final = np.mean(y_pred_totcat,0).round().astype(int)\ncat_final","8628455f":"xxx = pd.DataFrame(data=cat_final, columns=['term_deposit_subscribed'])","7d3ed02f":"submission = pd.DataFrame({\n        \"id\":sub['id'],\n        \"term_deposit_subscribed\": xxx['term_deposit_subscribed']\n    })\nsubmission.to_csv('.\/submission.csv', index=False)\nprint(submission)","bd184bb9":"# F2"}}