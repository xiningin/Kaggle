{"cell_type":{"88894038":"code","4ce53dd7":"code","10ba16f3":"code","28395bbc":"code","0beae0a1":"code","b3679dcd":"code","5edd38b4":"code","335b3bbc":"code","b49b32b0":"code","e9bf0ab7":"code","0dc81993":"code","355c36c6":"code","d6d55f0b":"code","a2eb88fe":"code","27f7aadb":"code","6042f931":"code","39e9f923":"code","833c92a7":"code","2b562ae2":"code","8e0b22a2":"code","b67427c3":"code","c3eb95b4":"code","80b11747":"code","b9363bfd":"code","50e90c53":"code","452a2852":"code","ebeb79fe":"code","2a4edc51":"code","7c7a2451":"code","c2ff6bfa":"code","3e63464b":"code","9889b6f2":"code","96975046":"code","1720e9e3":"code","494d9785":"code","a2b84997":"code","776a15ff":"code","9e5c3054":"code","d9f52b49":"code","8ff54178":"code","a5b4608d":"code","4b43420c":"code","eb53f1de":"code","b48b23f9":"code","6d267c6a":"code","52896b8e":"code","af175dde":"code","12d0fd4b":"code","dd9ed63c":"code","a4a3523d":"code","36d6e4df":"code","fb17462b":"code","6df7ecae":"code","334957e2":"code","4c13fec0":"code","1a05e261":"code","e6829835":"code","ef6529f8":"code","501fca2d":"code","6bbbb808":"code","a73df0cb":"code","a960ae42":"code","e490d034":"code","df624ccf":"code","bc1f3706":"code","9e3571bb":"code","c2d6a55f":"code","4d38096d":"code","62e232a5":"code","4cdb432c":"code","2f490760":"code","894b06af":"code","a7168461":"code","2c6d8cd5":"code","af848a2a":"code","bade0ae1":"code","5b87e427":"code","63d0cd8d":"code","a1773d45":"code","258e9af2":"code","c8021268":"code","484ef354":"markdown","ba304b03":"markdown","bd4ff9f1":"markdown","fb0a6f74":"markdown","0875c5c3":"markdown","3efa896f":"markdown","e8f3abb2":"markdown","071239d3":"markdown","cb41a4b6":"markdown"},"source":{"88894038":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n\nimport warnings # just for ignoring annoying warnings\nwarnings.filterwarnings('ignore')","4ce53dd7":"TARGET = 'Survived'\nID = 'PassengerId'","10ba16f3":"dataset = pd.read_csv('..\/input\/train.csv')","28395bbc":"dataset.head()","0beae0a1":"desc = dataset.describe()\ndesc","b3679dcd":"numerical_columns = [\n    'Pclass',\n    'Age',\n    'SibSp',\n    'Parch',\n    'Fare'\n]","5edd38b4":"for col in numerical_columns:\n    dataset[col].hist()\n    plt.title(col + \" distribution\")\n    plt.show();\n    \n    st = dataset[[col, TARGET]].groupby(col, as_index=False).mean()\n    plt.bar(st[col], st[TARGET])\n    plt.title(col + \" survival count\")\n    plt.show();\n\ndel st","335b3bbc":"numerical_dataset = numerical_columns + [TARGET]\nnumerical_dataset = dataset[numerical_dataset]\nnumerical_dataset.corr()","b49b32b0":"numerical_dataset = numerical_dataset.drop('Survived', axis=1)","e9bf0ab7":"numerical_dataset.head()","0dc81993":"categorical_variables = [\n    'Sex',\n    'Embarked'\n]","355c36c6":"categorical_dataset = dataset[categorical_variables + [TARGET]]\ncategorical_dataset.head()","d6d55f0b":"for col in categorical_dataset.columns:\n    print(categorical_dataset[col].value_counts())\n    print(\"\\n\")","a2eb88fe":"categorical_dataset = categorical_dataset.drop('Survived', axis=1)","27f7aadb":"num_feat_dataset = pd.DataFrame()","6042f931":"num_feat_dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1","39e9f923":"num_feat_dataset['FamilySize'].hist()","833c92a7":"cat_feat_dataset = pd.DataFrame()","2b562ae2":"cat_feat_dataset[TARGET] = dataset[TARGET]","8e0b22a2":"cat_feat_dataset['IsAlone'] = np.ones(dataset.shape[0])","b67427c3":"cat_feat_dataset['IsAlone'].loc[num_feat_dataset['FamilySize'] > 1] = 0","c3eb95b4":"cat_feat_dataset['AgeBin'] = pd.qcut(dataset['Age'].fillna(dataset['Age'].mean()).astype(int), 5)","80b11747":"cat_feat_dataset['FareBin'] = pd.qcut(dataset['Fare'].fillna(dataset['Fare'].mean()).astype(int), 4)","b9363bfd":"cat_feat_dataset['Title'] = dataset['Name'].str.extract(r',\\s([A-Z].*)\\.')","50e90c53":"cat_feat_dataset['Title'].value_counts()","452a2852":"conditions = [\n    cat_feat_dataset['Title'] == 'Mr',\n    cat_feat_dataset['Title'] == 'Mrs',\n    cat_feat_dataset['Title'] == 'Miss',\n    cat_feat_dataset['Title'] == 'Master',\n    cat_feat_dataset['Title'] == 'Dr',\n    cat_feat_dataset['Title'] == 'Rev'\n]\n\nchoices = [6, 5, 4, 3, 2, 1]\n\ncat_feat_dataset['Title'] = np.select(conditions, choices, default=0)","ebeb79fe":"st = cat_feat_dataset[['Title', TARGET]].groupby('Title', as_index=False).mean()\nplt.bar(st['Title'], st[TARGET]);","2a4edc51":"dataset['Cabin'][dataset['Cabin'].isna()].shape","7c7a2451":"cat_feat_dataset['HasCabinInfo'] = dataset['Cabin'].isnull()","c2ff6bfa":"st = cat_feat_dataset[['HasCabinInfo', TARGET]].groupby('HasCabinInfo', as_index=False).mean()\nplt.bar(st['HasCabinInfo'], st[TARGET]);","3e63464b":"cat_feat_dataset['Deck'] = dataset['Cabin'].str.slice(0,1)","9889b6f2":"cat_feat_dataset['Deck'].value_counts()","96975046":"st = cat_feat_dataset[['Deck', TARGET]].groupby('Deck', as_index=False).mean()\nplt.bar(st['Deck'], st[TARGET]);","1720e9e3":"conditions = [\n    (cat_feat_dataset['Deck'] == 'A') | (cat_feat_dataset['Deck'] == 'B') | (cat_feat_dataset['Deck'] == 'C'),\n    (cat_feat_dataset['Deck'] == 'D') | (cat_feat_dataset['Deck'] == 'E'),\n    (cat_feat_dataset['Deck'] == 'F') | (cat_feat_dataset['Deck'] == 'G') | (cat_feat_dataset['Deck'] == 'T')\n]\n\nchoices = [1, 2, 3]\n\ncat_feat_dataset['Deck'] = np.select(conditions, choices, default=0)","494d9785":"cat_feat_dataset['CabinPos'] = dataset[\"Cabin\"].str.slice(1,5).str.extract(\"([0-9]+)\", expand=False).astype(\"float\")","a2b84997":"cat_feat_dataset['CabinPos'].hist()","776a15ff":"cat_feat_dataset['CabinPos'] = pd.qcut(cat_feat_dataset['CabinPos'], 3)","9e5c3054":"cat_feat_dataset['CabinPos'].value_counts()","d9f52b49":"cat_feat_dataset[['CabinPos', TARGET]].groupby('CabinPos', as_index=False).mean()","8ff54178":"cat_feat_dataset[['CabinPos', 'Deck', TARGET]].groupby(['CabinPos', 'Deck'], as_index=False).mean()","a5b4608d":"cat_feat_dataset = cat_feat_dataset.drop(TARGET, axis=1)","4b43420c":"cat_feat_dataset['CabinPos'] = cat_feat_dataset['CabinPos'].astype(str)","eb53f1de":"cat_feat_dataset.head()","b48b23f9":"numerical_dataset = pd.concat([numerical_dataset, num_feat_dataset], axis=1)\ncategorical_dataset = pd.concat([categorical_dataset, cat_feat_dataset], axis=1)","6d267c6a":"for col in categorical_dataset.columns:\n    print(col)\n    print(categorical_dataset[categorical_dataset[col].isna()].index)","52896b8e":"for col in numerical_dataset.columns:\n    print(col)\n    print(numerical_dataset[numerical_dataset[col].isna()].index)","af175dde":"dataset[dataset['Age'].isna()].head()","12d0fd4b":"numerical_dataset['Age'] = numerical_dataset['Age'].fillna(dataset['Age'].mean())","dd9ed63c":"rows_to_drop = [\n    61, 829\n]","a4a3523d":"categorical_dataset = categorical_dataset.drop(categorical_dataset.index[rows_to_drop])","36d6e4df":"numerical_dataset = numerical_dataset.drop(numerical_dataset.index[rows_to_drop])","fb17462b":"numerical_scaler = StandardScaler()\nnumerical_scaler.fit(numerical_dataset)","6df7ecae":"numerical_dataset = numerical_scaler.transform(numerical_dataset)\nnumerical_dataset = pd.DataFrame(numerical_dataset)","334957e2":"one_hot_encoder = OneHotEncoder(handle_unknown='ignore')\none_hot_encoder.fit(categorical_dataset)","4c13fec0":"categorical_dataset = one_hot_encoder.transform(categorical_dataset)","1a05e261":"categorical_dataset = pd.DataFrame(categorical_dataset.toarray())","e6829835":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.gaussian_process import GaussianProcessClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import BaggingClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV","ef6529f8":"X = pd.concat([numerical_dataset, categorical_dataset], axis=1)\ny = dataset[TARGET]","501fca2d":"y = y.drop(y.index[rows_to_drop])","6bbbb808":"X = X.fillna(0)","a73df0cb":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=42)","a960ae42":"ran = RandomForestClassifier(random_state=1)\nknn = KNeighborsClassifier()\nlog = LogisticRegression()\nxgb = XGBClassifier()\ngbc = GradientBoostingClassifier()\nsvc = SVC(probability=True)\next = ExtraTreesClassifier()\nada = AdaBoostClassifier()\ngnb = GaussianNB()\ngpc = GaussianProcessClassifier()\nbag = BaggingClassifier()","e490d034":"X_train.columns = range(X_train.columns.shape[0])","df624ccf":"models = [ran, knn, log, xgb, gbc, svc, ext, ada, gnb, gpc, bag]         \nscores = []\nnames = []\n\nfor model in models:\n    model_name = model.__class__.__name__\n    \n    model.fit(X_train, y_train)\n    acc = cross_val_score(model, X_train, y_train, scoring = \"accuracy\", cv = 10)\n    scores.append(acc.mean())\n    names.append(model_name)","bc1f3706":"results = pd.DataFrame({\n    'Model': names,\n    'Score': scores\n})\nresults = results.sort_values(by='Score', ascending=False).reset_index(drop=True)\nresults.head(len(models))","9e3571bb":"final_model = VotingClassifier(\n    estimators=[(model.__class__.__name__, model) for model in models],\n    voting='soft'\n)","c2d6a55f":"final_model.fit(X_train, y_train)","4d38096d":"import pickle","62e232a5":"with open('model.pkl', 'wb') as f:\n    pickle.dump(final_model, file=f)","4cdb432c":"test_dataset = pd.read_csv('..\/input\/test.csv')","2f490760":"test_numset = test_dataset[numerical_columns]\ntest_numset['FamilySize'] = test_numset['SibSp'] + test_numset['Parch'] + 1","894b06af":"test_catset = test_dataset[categorical_variables]\ntest_catset['IsAlone'] = np.ones(test_dataset.shape[0])\ntest_catset['IsAlone'].loc[test_numset['FamilySize'] > 1] = 0\n\ntest_catset['AgeBin'] = pd.qcut(test_numset['Age'].fillna(test_numset['Age'].mean()).astype(int), 5)\ntest_catset['FareBin'] = pd.qcut(test_numset['Fare'].fillna(test_numset['Fare'].mean()).astype(int), 4)\n\ntest_catset['Title'] = test_dataset['Name'].str.extract(r',\\s([A-Z].*)\\.')\nconditions = [\n    test_catset['Title'] == 'Mr',\n    test_catset['Title'] == 'Mrs',\n    test_catset['Title'] == 'Miss',\n    test_catset['Title'] == 'Master',\n    test_catset['Title'] == 'Dr',\n    test_catset['Title'] == 'Rev'\n]\n\nchoices = [6, 5, 4, 3, 2, 1]\n\ntest_catset['Title'] = np.select(conditions, choices, default=0)\n\ntest_catset['HasCabinInfo'] = test_dataset['Cabin'].isnull()\n\ntest_catset['Deck'] = test_dataset['Cabin'].str.slice(0,1)\n\nconditions = [\n    (test_catset['Deck'] == 'A') | (test_catset['Deck'] == 'B') | (test_catset['Deck'] == 'C'),\n    (test_catset['Deck'] == 'D') | (test_catset['Deck'] == 'E'),\n    (test_catset['Deck'] == 'F') | (test_catset['Deck'] == 'G') | (test_catset['Deck'] == 'T')\n]\n\nchoices = [1, 2, 3]\n\ntest_catset['Deck'] = np.select(conditions, choices, default=0)\n\ntest_catset['CabinPos'] = test_dataset[\"Cabin\"].str.slice(1,5).str.extract(\"([0-9]+)\", expand=False).astype(\"float\")\ntest_catset['CabinPos'] = pd.qcut(test_catset['CabinPos'], 3)\ntest_catset['CabinPos'] = test_catset['CabinPos'].astype(str)","a7168461":"test_numset = numerical_scaler.transform(test_numset)\ntest_numset = pd.DataFrame(test_numset)","2c6d8cd5":"test_catset = one_hot_encoder.transform(test_catset)\ntest_catset = pd.DataFrame(test_catset.toarray())","af848a2a":"X = pd.concat([test_numset, test_catset], axis=1)","bade0ae1":"X = X.fillna(0)","5b87e427":"X.columns = range(X.columns.shape[0])","63d0cd8d":"y = final_model.predict(X)","a1773d45":"y.shape, test_dataset['PassengerId'].shape","258e9af2":"submission = pd.DataFrame({\n    'PassengerId': test_dataset['PassengerId'],\n    'Survived': y\n})\nsubmission.head()","c8021268":"submission.to_csv('.\/submission.csv', index=False)","484ef354":"# Titanic: Machine Learning from Disaster\n\n[Link to Kaggle Competition](https:\/\/www.kaggle.com\/c\/titanic)\n\nAuthor: Diego Rodrigues [@polaroidz](https:\/\/github.com\/polaroidz)","ba304b03":"### Feature Engineering - Categorical","bd4ff9f1":"### Categorical Variables","fb0a6f74":"### Numerical Variables","0875c5c3":"### Submission","3efa896f":"### Feature Engineering - Numerical","e8f3abb2":"### Applying Transformations","071239d3":"### Model","cb41a4b6":"### Missing Values"}}