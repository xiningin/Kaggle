{"cell_type":{"3c73ae20":"code","7a53c8ab":"code","d36c1954":"code","2a5c0462":"code","8c5bb83c":"code","e9fd6988":"code","385048b3":"code","93271d25":"code","c385a06c":"code","a4158c1c":"code","0c257dce":"code","67ba643b":"code","068e1f98":"markdown"},"source":{"3c73ae20":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set(style=\"white\")\nsns.set(style=\"whitegrid\", color_codes=True)\nfrom sklearn import preprocessing\nplt.rc(\"font\", size=14)\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\nfrom sklearn.decomposition import PCA\nfrom sklearn import metrics\nimport statsmodels.api as sm\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7a53c8ab":"#Loading the dataset\ndf= pd.read_csv(\"\/kaggle\/input\/bda-2019-ml-test\/Train_Mask.csv\")\nX = df.drop(\"flag\",1)   #Feature Matrix\ny = df[\"flag\"]          #Target Variable\ndf.shape","d36c1954":"#Checking for class imbalance\nprint(df['flag'].value_counts())\nsns.countplot(x='flag',data=df)\nplt.show()\ncount_anomaly = len(df[df['flag']==0])\ncount_normal = len(df[df['flag']==1])\npct_anomaly = count_anomaly\/(count_anomaly+count_normal)\nprint(\"percentage of anomaly:\", pct_anomaly*100)\npct_normal = count_normal\/(count_anomaly+count_normal)\nprint(\"percentage of normal:\", pct_normal*100)\nprint(\"There is no class imbalance\")","2a5c0462":"#Checking for missing values\nif df.shape==df.notnull().shape:\n    print (\" No missing values\")\nelse:\n    print(\" There are missing values\")","8c5bb83c":"#Backward Elimination to remove unimportant features\ncols = list(X.columns)\npmax = 1\nwhile (len(cols)>0):\n    p= []\n    X_1 = X[cols]\n    X_1 = sm.add_constant(X_1)\n    model = sm.OLS(y,X_1).fit()\n    p = pd.Series(model.pvalues.values[1:],index = cols)      \n    pmax = max(p)\n    feature_with_p_max = p.idxmax()\n    if(pmax>0.05):\n        cols.remove(feature_with_p_max)\n    else:\n        break\nselected_features_BE = cols\nprint(selected_features_BE)","e9fd6988":"#The new feature matrix\nnew_x = pd.DataFrame(df[selected_features_BE],columns=selected_features_BE)\nnew_x.head()","385048b3":"#Check for multicollinearity\ncor= new_x.corr()\nsns.heatmap(cor)\nprint(\"Multicollinearity exists\")","93271d25":"#Fitting a logistic model\nX_train, X_test, y_train, y_test = train_test_split(new_x, y, test_size=0.3)\n#Principal Component Analysis to combat multicollinearity\nmodel_pca = PCA(n_components=5)\nnew_train = model_pca.fit_transform(X_train)\nnew_test  = model_pca.fit_transform(X_test)\nlogreg=LogisticRegression()\nlogreg.fit(new_train,y_train)","c385a06c":"#f1 score of logistic model\ny_pred=logreg.predict(new_test)\nprint(classification_report(y_test,y_pred))","a4158c1c":"#Implementing model on test data\ntest=pd.read_csv(\"..\/input\/bda-2019-ml-test\/Test_Mask_Dataset.csv\")\nmodel_pca = PCA(n_components=5)\ntest= model_pca.fit_transform(test)\npred=logreg.predict(test)","0c257dce":"#Sample imputation\nsub=pd.read_csv(\"..\/input\/bda-2019-ml-test\/Sample Submission.csv\")\nsub['flag']=pred\nsub","67ba643b":"#Creation of submission file\nsub.to_csv(\"Sample Submission5.csv\",index=False)","068e1f98":"**The method being used to detect anomalies in the production line is Logistic Regression. The output is a binary one and hence the above decision was made. Since the assumption of no multicollinearity of the Logistic Regression model was being violated, Principal Component Analysis was used to eliminate it. But before this, some routine checks like class imbalance and missing values were made in order to prepare the data for analysis.**"}}