{"cell_type":{"c272636b":"code","ac05d2cc":"code","000104d9":"code","a4c9f8fd":"code","d591ac40":"code","edc1d0f7":"code","05b67853":"code","75a3452c":"code","6108b385":"code","12b35db8":"code","6687ddae":"code","a883261e":"code","1f0da135":"code","a86814a2":"code","262350bb":"code","97c99f83":"code","b0481f21":"code","2d08306c":"code","d2f49358":"code","01a6a0b3":"code","2515bf4e":"code","3789d273":"code","a4e694f6":"code","2588b1ba":"code","3d257ca8":"code","c3e7a054":"code","865cbde7":"code","cff2119c":"code","fa0c620e":"code","8e9ca1f7":"markdown","2ef64a23":"markdown","fd5b9fb1":"markdown","583f6e08":"markdown","27dfae5b":"markdown","1375b080":"markdown","c4c6ab8f":"markdown","99310eee":"markdown","393f8f83":"markdown","8d235a7a":"markdown"},"source":{"c272636b":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nimport lightgbm as lgb\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ac05d2cc":"tp_df = pd.read_csv(\"..\/input\/recognizing-faces-in-the-wild\/train_true_positive_features.csv\")\ntn_df = pd.read_csv(\"..\/input\/recognizing-faces-in-the-wild\/train_true_negative_features.csv\")\ndf = pd.concat([tp_df, tn_df])\ndf = df.reset_index(drop = True)","000104d9":"df.shape","a4c9f8fd":"df.tail()","d591ac40":"df['is_related'].value_counts()","edc1d0f7":"df['age_diff'] = (df['p1_age'] - df['p2_age']).abs()\n\ndf['age_ratio'] = df['p1_age'] \/df['p2_age']\ndf[df['age_ratio'] < 1]['age_ratio'] = df['p2_age'] \/ df['p1_age']\n\ndf['different_gender'] = (df['p1_gender'] - df['p2_gender']).abs()\n\ndf['same_emotion'] = 0\ndf.loc[df[df['p1_dominant_emotion'] == df['p2_dominant_emotion']].index, 'same_emotion'] = 1\n\n#--------------------------------------\n\ndf['cosine_avg'] = (df['vgg_cosine'] + df['facenet_cosine'] + df['openface_cosine'])\/3\ndf['euclidean_l2_avg'] = (df['vgg_euclidean_l2'] + df['facenet_euclidean_l2'] + df['openface_euclidean_l2'])\/3\n\ndf['vgg_ratio'] = df['vgg_euclidean_l2'] \/ df['vgg_cosine']\ndf['facenet_ratio'] = df['facenet_euclidean_l2'] \/ df['facenet_cosine'] \ndf['openface_ratio'] = df['openface_euclidean_l2'] \/ df['openface_cosine']\n\ndf['vgg_over_facenet_cosine'] = df['vgg_cosine'] \/ df['facenet_cosine']\ndf['vgg_over_facenet_euclidean'] = df['vgg_euclidean_l2'] \/ df['facenet_euclidean_l2']\n\ndf['vgg_over_openface_cosine'] = df['vgg_cosine'] \/ df['openface_cosine']\ndf['vgg_over_openface_cosine'] = df['vgg_euclidean_l2'] \/ df['openface_euclidean_l2']\n\ndf['facenet_over_openface_cosine'] = df['facenet_cosine'] \/ df['openface_cosine']\ndf['facenet_over_openface_euclidean'] = df['facenet_euclidean_l2'] \/ df['openface_euclidean_l2']","05b67853":"df = df.drop(columns=[ 'person1', 'person2'\n                      , 'p1_age', 'p2_age', 'p1_dominant_age', 'p2_dominant_age', 'p1_gender', 'p2_gender'\n                      , 'p1_dominant_emotion', 'p2_dominant_emotion'\n                      , 'p1_angry', 'p2_angry'\n                      , 'p1_disgust', 'p2_disgust'\n                      , 'p1_fear', 'p2_fear'\n                      , 'p1_happy', 'p2_happy'\n                      , 'p1_sad', 'p2_sad'\n                      , 'p1_surprise', 'p2_surprise'\n                      , 'p1_neutral', 'p2_neutral'\n                      , 'vgg_euclidean', 'facenet_euclidean', 'openface_euclidean'\n                     ])","75a3452c":"x = df.drop(columns=['is_related'])\ny = df['is_related']","6108b385":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.30)","12b35db8":"x_test, x_cross_val, y_test, y_cross_val = train_test_split(x_test, y_test, test_size=0.50)","6687ddae":"print(\"Distributions for train, validation and cross validation sets\")\nprint(\"Train:\\n\",y_train.value_counts()\/y_train.value_counts().sum())\nprint(\"Validation:\\n\",y_test.value_counts()\/y_test.value_counts().sum())\nprint(\"Cross Validation:\\n\",y_cross_val.value_counts()\/y_cross_val.value_counts().sum())","a883261e":"train_data = lgb.Dataset(x_train, label=y_train)\ntest_data = lgb.Dataset(x_test, label=y_test)","1f0da135":"params = {\n    'boosting_type': 'gbdt',\n    'objective': 'multiclass',\n    'num_class': 2,\n    'metric': 'multi_logloss',\n    'learning_rate': 0.1,\n    'num_leaves': 64,\n    'verbose': 2\n}","a86814a2":"model = lgb.train(params\n                  , train_data\n                  , valid_sets=test_data, early_stopping_rounds=50\n                  , num_boost_round=500 \n                 )","262350bb":"y_pred = model.predict(x_train)\npredictions = []\nfor i in range(0,y_pred.shape[0]):\n    predictions.append(np.argmax(y_pred[i]))\n\naccuracy = accuracy_score(predictions, y_train)\nprint(\"accuracy on train set: \",accuracy)\n\ncm = confusion_matrix(y_train, predictions)\nprint(\"confusion matrix: \\n\",cm)","97c99f83":"y_pred = model.predict(x_test)\npredictions = []\nfor i in range(0,y_pred.shape[0]):\n    predictions.append(np.argmax(y_pred[i]))\n    \naccuracy = accuracy_score(predictions, y_test)\nprint(\"accuracy on test set: \",accuracy)\n\ncm = confusion_matrix(y_test, predictions)\nprint(\"confusion matrix: \\n\",cm)","b0481f21":"y_pred = model.predict(x_cross_val)\n\npredictions = []\nfor i in range(0,y_pred.shape[0]):\n    predictions.append(np.argmax(y_pred[i]))\n\naccuracy = accuracy_score(predictions, y_cross_val)\nprint(\"accuracy on cross val set: \",accuracy)\n\ncm = confusion_matrix(y_cross_val, predictions)\nprint(\"confusion matrix: \\n\",cm)","2d08306c":"ax = lgb.plot_importance(model, max_num_features=10)\nplt.show()\n\nfig_size = [50, 30]\nplt.rcParams[\"figure.figsize\"] = fig_size\n\nplt.show()","d2f49358":"test_df = pd.read_csv(\"..\/input\/recognizing-faces-in-the-wild\/testset_features.csv\")","01a6a0b3":"tmp = test_df.drop(columns=['img_pair', 'is_related'])","2515bf4e":"tmp['age_diff'] = (tmp['p1_age'] - tmp['p2_age']).abs()\n\ntmp['age_ratio'] = tmp['p1_age'] \/tmp['p2_age']\ntmp[tmp['age_ratio'] < 1]['age_ratio'] = tmp['p2_age'] \/ tmp['p1_age']\n\ntmp['different_gender'] = (tmp['p1_gender'] - tmp['p2_gender']).abs()\n\ntmp['same_emotion'] = 0\ntmp.loc[tmp[tmp['p1_dominant_emotion'] == tmp['p2_dominant_emotion']].index, 'same_emotion'] = 1\n\n#--------------------------------------\n\ntmp['cosine_avg'] = (tmp['vgg_cosine'] + tmp['facenet_cosine'] + tmp['openface_cosine'])\/3\ntmp['euclidean_l2_avg'] = (tmp['vgg_euclidean_l2'] + tmp['facenet_euclidean_l2'] + tmp['openface_euclidean_l2'])\/3\n\ntmp['vgg_ratio'] = tmp['vgg_euclidean_l2'] \/ tmp['vgg_cosine']\ntmp['facenet_ratio'] = tmp['facenet_euclidean_l2'] \/ tmp['facenet_cosine'] \ntmp['openface_ratio'] = tmp['openface_euclidean_l2'] \/ tmp['openface_cosine']\n\ntmp['vgg_over_facenet_cosine'] = tmp['vgg_cosine'] \/ tmp['facenet_cosine']\ntmp['vgg_over_facenet_euclidean'] = tmp['vgg_euclidean_l2'] \/ tmp['facenet_euclidean_l2']\n\ntmp['vgg_over_openface_cosine'] = tmp['vgg_cosine'] \/ tmp['openface_cosine']\ntmp['vgg_over_openface_cosine'] = tmp['vgg_euclidean_l2'] \/ tmp['openface_euclidean_l2']\n\ntmp['facenet_over_openface_cosine'] = tmp['facenet_cosine'] \/ tmp['openface_cosine']\ntmp['facenet_over_openface_euclidean'] = tmp['facenet_euclidean_l2'] \/ tmp['openface_euclidean_l2']","3789d273":"tmp = tmp.drop(columns=['vgg_euclidean', 'facenet_euclidean', 'openface_euclidean'\n                      , 'p1_age', 'p2_age'\n                      , 'p1_dominant_age', 'p2_dominant_age'\n                      , 'p1_gender', 'p2_gender'\n                      , 'p1_dominant_emotion', 'p2_dominant_emotion'\n                      , 'p1_angry', 'p2_angry'\n                      , 'p1_disgust', 'p2_disgust'\n                      , 'p1_fear', 'p2_fear'\n                      , 'p1_happy', 'p2_happy'\n                      , 'p1_sad', 'p2_sad'\n                      , 'p1_surprise', 'p2_surprise'\n                      , 'p1_neutral', 'p2_neutral'\n                       ])","a4e694f6":"tmp.shape[1] == x_train.shape[1]","2588b1ba":"predictions = model.predict(tmp)","3d257ca8":"prediction_classes = []\nfor i in predictions:\n    #prediction_classes.append(np.argmax(i))\n    \n    is_related = i[1]\n    prediction_classes.append(is_related)","c3e7a054":"test_df['is_related'] = prediction_classes","865cbde7":"result_set = test_df[['img_pair', 'is_related']]","cff2119c":"result_set.head()","fa0c620e":"result_set.to_csv(\"submission.csv\", index=False)","8e9ca1f7":"# Accuracies","2ef64a23":"It seems that the model has 72.62% accuracy on training set, 70.90% accuracy on validation set and 70.95% accuracy on cross validation set. We can clearly say that it would not be overfitted!","fd5b9fb1":"This notebook got **77.20%** accuracy as a public score. Besides, it has a 72.62% accuracy on training set, 70.90% accuracy on validation set and 70.95% accuracy on cross validation set. We can clearly say that it is a generalized model and it is not over-fitted!\n\nI have used 3 different face recognition models: VGG-Face, Facenet and OpenFace. These models find the embeddings of faces. Finding distances between embeddings can give a clue to find related ones. Herein, I included both cosine or euclidean distances as a feature. I expect that GBM classifier would find the weights for these models and metrics.\n\nI also added some additional features such as age, gender and emotion.\n\nBesides, only related ones are shared as a training set. I've generated data for unrelated ones and store in the file 'train_true_negative_features.csv'. On the other hands, related ones are stored in 'train_true_positive_features.csv' whereas test set is stored in 'testset_features.csv'.\n\nYou can directly load these files and skip preprocessing steps. If you wonder how these similarities calculated, the following links might help you.\n\n**Face Recognition models:**\n\nVGG-Face: https:\/\/sefiks.com\/2018\/08\/06\/deep-face-recognition-with-keras\/\n\nFacenet: https:\/\/sefiks.com\/2018\/09\/03\/face-recognition-with-facenet-in-keras\/\n\nOpenFace: https:\/\/sefiks.com\/2019\/07\/21\/face-recognition-with-openface-in-keras\/\n\n**Additional Features:**\n\nAge and gender: https:\/\/sefiks.com\/2019\/02\/13\/apparent-age-and-gender-prediction-in-keras\/ \n\nEmotion: https:\/\/sefiks.com\/2018\/01\/01\/facial-expression-recognition-with-keras\/\n","583f6e08":"See the distribution for related and unrelated ones","27dfae5b":"# Predictions for test set and submission","1375b080":"# Expand features\n\nI've found the following features helpful.","c4c6ab8f":"# Expand features for the test set, too","99310eee":"# Model","393f8f83":"# Feature importance","8d235a7a":"# Train test split"}}