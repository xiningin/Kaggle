{"cell_type":{"2dda92e4":"code","cc79cc41":"code","7829aae9":"code","0b75a960":"code","ba81c255":"code","4f45251e":"code","85f47c97":"code","d1492faf":"code","8f4fdcf0":"code","2232e05d":"code","d2099118":"code","f7f662b0":"code","f5d4e5ad":"code","011dfb2e":"code","b2625947":"code","ee1a1e3a":"code","221bb218":"code","583713bb":"code","2bb37d30":"code","7a391a62":"code","0b1cb040":"code","f640cc49":"code","215a1361":"code","1d43af97":"code","495d04cf":"code","c043fa7d":"code","10e4df1f":"code","ba8a2209":"code","46cc8a02":"code","395efdc8":"code","83d69e4c":"code","020d920c":"code","01c8a3fb":"code","62d3d90c":"code","f854d95c":"code","90ae0074":"code","929cc662":"code","8c4572da":"code","1277bb2e":"code","1760db84":"code","a66b0744":"code","68a38f25":"code","61c7f86b":"code","2268eac5":"code","1057cfff":"code","934678b3":"code","22c97df7":"code","485cebf2":"code","adf4c229":"code","9dce050a":"code","de3c1269":"code","3ff1bbf7":"code","ab32e285":"code","1264fd80":"code","98025692":"code","27a9a5be":"code","5fe65da8":"code","1eb552fa":"code","a49346a2":"code","5de82daa":"code","e480161d":"code","23e9c38b":"code","7ed50726":"code","d109d90e":"code","446323db":"code","e298554b":"code","08d349d8":"code","ef2a9535":"code","53cca105":"code","4894034f":"code","c50f2064":"code","7806cd79":"code","e4556766":"code","7ec9a432":"code","5dd39cd1":"code","b5c0fb27":"code","75e513cf":"code","d645de4d":"code","9276cd53":"code","3bfc82da":"code","44576f15":"code","1809d272":"code","8d133bb8":"code","42c85fcd":"code","1bf96b67":"code","837993ad":"code","dbf3eaaf":"code","14934d26":"code","2e5b635e":"code","de19b4ad":"code","bcbcc649":"code","ba9f7861":"code","5fe9a084":"code","0495ec42":"code","034e8cce":"code","92e4a729":"code","2ce7df6d":"code","8bb57be3":"code","20dd2242":"code","10ccd410":"code","ca867731":"code","4758f25e":"code","978d7f83":"code","5d25690c":"code","593cfb3f":"code","3a920f65":"code","d8e0722d":"code","2c480896":"code","3dcff9ba":"code","2677f655":"code","b01fe9f6":"code","33814edd":"code","997e433a":"code","b83c146e":"code","8d28d58c":"code","1e87c3f8":"code","f6719489":"markdown","00b68467":"markdown","34498a73":"markdown","f9873302":"markdown","a00d58a0":"markdown","d673de17":"markdown","d8ce6201":"markdown","82b31985":"markdown","ea226417":"markdown","13ac3e6d":"markdown","33705692":"markdown","3466ff43":"markdown","a6bb0fc3":"markdown","4bbeeeda":"markdown","bb2cbbaa":"markdown","ad6b7619":"markdown","8329f891":"markdown","9fa8761b":"markdown","580d56c7":"markdown","30a6d32e":"markdown","2d104f91":"markdown","a94f2610":"markdown","a617e57c":"markdown"},"source":{"2dda92e4":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","cc79cc41":"data=pd.read_csv(\"..\/input\/ml-lab-exam\/traindata_SJC.csv\")","7829aae9":"data","0b75a960":"data=data.rename(columns={\"Unnamed: 0\":\"ClaimNumber\",\"Unnamed: 1\":\"DateTimeOfAccident\",\"Unnamed: 3\":\"Age\",\"Unnamed: 4\":\"Gender\",\"Unnamed: 5\":\"MaritalStatus\",\"Unnamed: 6\":\"DependentChildren\",\"Unnamed: 8\":\"WeeklyWages\",\"Unnamed: 9\":\"PartTimeFullTime\",\"Unnamed: 10\":\"HoursWorkedPerWeek\",\"Unnamed: 12\":\"ClaimDescription\",\"Unnamed: 13\":\"InitialIncurredCalimsCost\",\"Unnamed: 14\":'UltimateIncurredClaimCost'},inplace=False)\ndata=data.drop([0,1])","ba81c255":"data.columns","4f45251e":"data.info()","85f47c97":"data.isnull().sum()","d1492faf":"data['MaritalStatus'].value_counts()","8f4fdcf0":"data_mode=data[data!=' ?']","2232e05d":"data_mode['MaritalStatus']=data_mode['MaritalStatus'].fillna(data_mode['MaritalStatus'].mode()[0])","d2099118":"data_mode.isnull().sum()","f7f662b0":"data.isnull().sum().sort_values(ascending=False)\/len(data)\n#percentage of missing values","f5d4e5ad":"data['WeeklyWages'].fillna(data['WeeklyWages'].mean(),inplace=True)","011dfb2e":"data['HoursWorkedPerWeek'].fillna(data['HoursWorkedPerWeek'].mean(),inplace=True)","b2625947":"data.isnull().sum()","ee1a1e3a":"data.shape","221bb218":"sns.catplot(data=data,x='Age',col='Gender',kind='box')","583713bb":"sns.catplot(data=data,x='WeeklyWages',col='Gender',kind='violin')\n#HERE WEEKLY WAGE OF MEN IS SLIGHTLTY THAN THAT OF WOMEN","2bb37d30":"sns.pairplot(data=data,diag_kind=\"kde\")","7a391a62":"sns.countplot(data=data,x='Gender')","0b1cb040":"sns.countplot(data=data,hue='Gender',x='DependentChildren')","f640cc49":"sns.catplot(data=data,x='Gender',row='PartTimeFullTime',hue='Age',kind='count')","215a1361":"plt.subplots(figsize=(10, 7))\nsns.scatterplot(data=data, x=\"InitialIncurredCalimsCost\",y=\"UltimateIncurredClaimCost\")\nplt.show()","1d43af97":"# Generate a list of numerical variables, remove claim cost variables\nnum_list = [c for c in data.columns if((data[c].dtype != np.object) and not \"Cost\" in c)] \n# plot histograms\nfor name in num_list:\n    f, ax = plt.subplots(figsize=(10, 5))\n    nbins = min(data[name].value_counts().count(),70)\n    plt.hist(data=data, x=name, bins=nbins)\n    plt.xlabel(name)\n    plt.show()","495d04cf":"plt.figure(figsize=(20,7))\nsns.countplot(data=data,x=\"PartTimeFullTime\")","c043fa7d":"data.columns","10e4df1f":"# List of features with to many different values\nnum_list_bins =['HoursWorkedPerWeek','WeeklyWages']\n\n# plot binned plot boxplots for 'UltimateIncurredClaimCost'\nfor name in num_list_bins:\n    f, ax = plt.subplots(figsize=(14, 5))\n    data['bin_'] = pd.cut(data[name], 8)\n    sns.boxplot(x='bin_', y='UltimateIncurredClaimCost', data=data)\n    plt.xlabel(name)\n    plt.show()\n\ndata.drop(['bin_'],axis=1,inplace=True)","ba8a2209":"data.plot.box(figsize=(15,6))","46cc8a02":"sns.boxplot(data=data,x='Age',hue='Gender')","395efdc8":"sns.boxplot(data=data,x='Age',hue='Gender')","83d69e4c":"sns.boxplot(data=data,x='DependentChildren')","020d920c":"sns.boxplot(data=data,x='DependentsOther')\n","01c8a3fb":"sns.boxplot(data=data,x='WeeklyWages')","62d3d90c":"sns.boxplot(data=data,x='HoursWorkedPerWeek')","f854d95c":"sns.boxplot(data=data,x='InitialIncurredCalimsCost')","90ae0074":"sns.boxplot(data=data,x='UltimateIncurredClaimCost')","929cc662":"data['WeeklyWages']=np.square(data['WeeklyWages'])","8c4572da":"data['HoursWorkedPerWeek']=np.log10(data['HoursWorkedPerWeek'])","1277bb2e":"sns.boxplot(data=data,x='HoursWorkedPerWeek')","1760db84":"sns.boxplot(data=data,x='WeeklyWages')","a66b0744":"#data=data[data.UltimateIncurredClaimCost<np.quantile(data['UltimateIncurredClaimCost'],0.80)]","68a38f25":"data.isnull().sum()","61c7f86b":"import sklearn.preprocessing as pre\nimport sklearn.model_selection as ms","2268eac5":"le=pre.LabelEncoder()","1057cfff":"list_df=['Age','WeeklyWages','Gender','MaritalStatus','PartTimeFullTime','HoursWorkedPerWeek',\n        'ClaimDescription']","934678b3":"for x in list_df:\n  data[x]=le.fit_transform(data[x].astype(str))","22c97df7":"data.info()","485cebf2":"corrmat = data.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, annot=True, square=True, cmap='rainbow')\nplt.show()","adf4c229":"data.isnull().sum()","9dce050a":"data.head()","de3c1269":"cols = ['Age', 'Gender','MaritalStatus','DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredCalimsCost']\nX = data[cols]\ny = data['UltimateIncurredClaimCost']","3ff1bbf7":"from sklearn.model_selection import train_test_split ","ab32e285":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1\/3, random_state =400)","1264fd80":"print(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","98025692":"from sklearn.linear_model import LinearRegression\nlin_reg = LinearRegression(normalize=True)\nlin_reg.fit(X_train,y_train)","27a9a5be":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)","5fe65da8":"import sklearn.metrics as mt","1eb552fa":"y_pred = regressor.predict(X_test)","a49346a2":"y_pred","5de82daa":"regressor.score(X_train,y_train)","e480161d":"regressor.score(X_test,y_test)","23e9c38b":"from sklearn.metrics import mean_squared_error","7ed50726":"np.sqrt(mean_squared_error(y_test,y_pred))","d109d90e":"#pip  install xgboost","446323db":"#pip install lightgbm","e298554b":"#pip install catboost","08d349d8":"from sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom catboost import CatBoostRegressor\nimport time","ef2a9535":"# CatBoostRegressor\ntic = time.time()\nCGB = CatBoostRegressor(logging_level='Silent')    \nCGB.fit(X_train, y_train)\nprint(\"time (sec):\" + \"%6.0f\" % (time.time() - tic))\nresult = mean_squared_error(y_test, CGB.predict(X_test))","53cca105":"CGB.fit(X_train,y_train)\ntest_score=CGB.score(X_test,y_test)\ntrain_score=CGB.score(X_train,y_train)\ny_pred_xgb=CGB.predict(X_test)\nprint(\"\\nThe test score is:\" ,test_score)\nprint(\"\\nThe train score is:\" ,train_score)","4894034f":"(pd.Series(CGB.feature_importances_, index=X.columns).nlargest(20).plot(kind='barh'))  \nplt.show()","c50f2064":"# XGBRegressor: Hyperparameter tuning with RandomizedSearchCV\ntic = time.time()\nparam_grid ={'learning_rate': [0.02,0.025], 'max_depth': [5,6,7],'n_estimators': [500],'colsample_bytree': [0.9], 'subsample': [0.7], 'tree_method': [\"hist\"] } \nXGB_random_search = RandomizedSearchCV(XGBRegressor(),param_grid, scoring='neg_mean_squared_error', cv=4,  n_iter=5, random_state=123)\nXGB_random_search.fit(X_train,y_train)\nprint(\"Best parameters:\",XGB_random_search.best_params_)\nXGB = XGBRegressor(**XGB_random_search.best_params_)    \nXGB.fit(X_train, y_train)\nprint(\"time (sec):\" + \"%6.0f\" % (time.time() - tic))\nresult = mean_squared_error(y_test, XGB.predict(X_test))\nprint(\"MSE:\" + \"%6.2f\" % result)","7806cd79":"XGB.fit(X_train,y_train)\ntest_score=XGB.score(X_test,y_test)\ntrain_score=XGB.score(X_train,y_train)\ny_pred_xgb=XGB.predict(X_test)\nprint(\"\\nThe test score is:\" ,test_score)\nprint(\"\\nThe train score is:\" ,train_score)","e4556766":"np.sqrt(mean_squared_error(y_test,y_pred_xgb))","7ec9a432":"tic = time.time()\nparam_grid ={'learning_rate': [0.02,0.025], 'n_estimators': [500], 'num_leaves': [30,40,50],'feature_fraction': [0.7]} \nLGB_random_search = RandomizedSearchCV(LGBMRegressor(),param_grid, scoring='neg_mean_squared_error', cv=4,  n_iter=5, random_state=123)\nLGB_random_search.fit(X_train,y_train)\nprint(\"Best parameters:\",LGB_random_search.best_params_)\nLGB = LGBMRegressor(**LGB_random_search.best_params_)    \nLGB.fit(X_train, y_train)\nprint(\"time (sec):\" + \"%6.0f\" % (time.time() - tic))\nresult = mean_squared_error(y_test, LGB.predict(X_test))","5dd39cd1":"LGB.fit(X_train,y_train)\ntest_score=LGB.score(X_test,y_test)\ntrain_score=LGB.score(X_train,y_train)\ny_pred_lgb=LGB.predict(X_test)\nprint(\"\\nThe test score is:\" ,test_score)\nprint(\"\\nThe train score is:\" ,train_score)","b5c0fb27":"y_pred_lgb","75e513cf":"a=np.sqrt(mean_squared_error(y_test,y_pred_xgb))\na","d645de4d":"(pd.Series(LGB.feature_importances_, index=X.columns).nlargest(20).plot(kind='barh'))  \nplt.show()","9276cd53":"pd.Series(XGB.feature_importances_, index=X.columns).nlargest(20).plot(kind='barh')\nplt.show()","3bfc82da":"from sklearn.model_selection import train_test_split\nx_train1, x_test1, y_train1, y_test1 = train_test_split(X, y, test_size = 0.3, random_state =30)\nprint(x_train1.shape)\nprint(x_test1.shape)\nprint(y_train1.shape)\nprint(y_test1.shape)","44576f15":"from sklearn.preprocessing import StandardScaler","1809d272":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score\n# creating the model\nreg = LinearRegression()","8d133bb8":"reg.fit(x_train1, y_train1)","42c85fcd":"y_pred1 = reg.predict(x_test1)\n\n# Calculating the r2 score\nr2 = r2_score(y_test1, y_pred1)\nprint(\"r2 score :\", r2)","1bf96b67":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\n\nregressor = RandomForestRegressor(n_estimators = 10, random_state = 0)\nregressor.fit(x_train1, y_train1)\n\n# Predicting a new result\ny_pred = regressor.predict(x_test1)\nregressor.score(x_train1,y_train1)","837993ad":"np.sqrt(mean_squared_error(y_test1,y_pred1))","dbf3eaaf":"regressor.score(x_test1,y_test1)","14934d26":"test=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv\")","2e5b635e":"test","de19b4ad":"test.columns","bcbcc649":"test.info()","ba9f7861":"test.isnull().sum()","5fe9a084":"test_mode=data[test!=' ?']","0495ec42":"test['MaritalStatus']=test['MaritalStatus'].fillna(test['MaritalStatus'].mode()[0])","034e8cce":"test.isnull().sum()","92e4a729":"data['WeeklyWages'].fillna(data['WeeklyWages'].mean(),inplace=True)","2ce7df6d":"data['HoursWorkedPerWeek'].fillna(data['HoursWorkedPerWeek'].mean(),inplace=True)","8bb57be3":"test['WeeklyWages']=np.square(test['WeeklyWages'])","20dd2242":"test['HoursWorkedPerWeek']=np.log10(test['HoursWorkedPerWeek'])","10ccd410":"sns.boxplot(data=test,x='HoursWorkedPerWeek')\n","ca867731":"sns.boxplot(data=test,x='WeeklyWages')","4758f25e":"test.isnull().sum()","978d7f83":"import sklearn.preprocessing as pre\nimport sklearn.model_selection as ms","5d25690c":"le=pre.LabelEncoder()","593cfb3f":"list_df=['Age','WeeklyWages','Gender','MaritalStatus','PartTimeFullTime','HoursWorkedPerWeek',\n        'ClaimDescription']","3a920f65":"for x in list_df:\n  test[x]=le.fit_transform(test[x].astype(str))","d8e0722d":"test.info()","2c480896":"data.info()","3dcff9ba":"cols = ['Age', 'Gender','MaritalStatus','DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredCalimsCost']\nXa= test[cols]\n","2677f655":"Xa.head()","b01fe9f6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1\/3, random_state =200)","33814edd":"#regressor.predict(Xa)","997e433a":"LGB.predict(Xa)","b83c146e":"sub=pd.read_csv('..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv')\nsub['UltimateIncurredClaimCost'] = LGB.predict(Xa)\nsub.to_csv('LGB.csv', index = False)\nsub.head(5)\nprint(np.mean(sub['UltimateIncurredClaimCost']))","8d28d58c":"#CGB.predict(Xa)","1e87c3f8":"#regressor.predict(Xa)","f6719489":"Martial Status is categorical variable and the missing values is treated by replacement with mode","00b68467":"i used xgboost for prediction, thus i used that for modeling","34498a73":"# EDA ","f9873302":" Ploting bar graph of newmerical variables","a00d58a0":"Linear Regression","d673de17":"sub=pd.read_csv('C:\/Users\/Jerry\/Downloads\/New folder (10)\/sample_submission.csv')\nsub['UltimateIncurredClaimCost'] = regressor.predict(Xa)\nsub.to_csv('submission_linearReg.csv', index = False)\nsub.head(5)\nprint(np.mean(sub['UltimateIncurredClaimCost']))","d8ce6201":"sub=pd.read_csv('C:\/Users\/Jerry\/Downloads\/New folder (10)\/sample_submission.csv')\nsub['UltimateIncurredClaimCost'] = regressor.predict(Xa)\nsub.to_csv('Random Forest.csv', index = False)\nsub.head(5)\nprint(np.mean(sub['UltimateIncurredClaimCost']))","82b31985":"I used LGB for uploading so i am not using other models for computing","ea226417":"**XG Bosst is used for prediction as boosing give more accuracy to others, so errors gets reduced**","13ac3e6d":"# Feauture Engineering","33705692":"Binning","3466ff43":"# Random Forest","a6bb0fc3":"There are 3 variables with missing values in the data set","4bbeeeda":"sub=pd.read_csv('C:\/Users\/Jerry\/Downloads\/New folder (10)\/sample_submission.csv')\nsub['UltimateIncurredClaimCost'] = CGB.predict(Xa)\nsub.to_csv('cgb.csv', index = False)\nsub.head(5)\nprint(np.mean(sub['UltimateIncurredClaimCost']))","bb2cbbaa":"# XGBOOST","ad6b7619":"x_train1, x_test1, y_train1, y_test1 = train_test_split(X, y, test_size = 0.3, random_state =30)","8329f891":"cols = ['Age', 'Gender','MaritalStatus','DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredCalimsCost']\nXa= test[cols]","9fa8761b":"# Missing Values","580d56c7":"# Outliers","30a6d32e":"Here Outliers are significant in WeeklyWages,HoursWorkedPerWeek,InitialIncurredCalimsCost,UltimateIncurredClaimCost","2d104f91":"All the variables other than the dependent variables are converted to Integer values ,Helps in doing regression","a94f2610":"Missing values of Neumerical Variables -'Weekly Wages and Hours worked per week ', is replaced with mean values","a617e57c":"DATA TRANSFORMATION"}}