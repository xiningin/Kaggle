{"cell_type":{"6977dc95":"code","16d2e43a":"code","f3cebd75":"code","025cec0d":"code","216e6b7e":"code","ab3bb605":"code","163fe039":"code","d6088774":"code","3c33a4d7":"code","f9d33fc1":"code","323a042e":"code","f308178a":"code","352c366e":"code","1b410060":"code","290d79c3":"code","73183711":"code","24491d2e":"code","137e809f":"code","a35ca5d9":"code","9c18f18a":"code","793bb492":"code","6af885c3":"code","06f9b944":"code","17c49451":"code","a367d959":"code","24760876":"code","140a03e3":"code","2eed9426":"code","9d077aa5":"code","57565660":"code","5c5ef28d":"code","80711161":"code","cd20ce3d":"code","aa0ee838":"code","bbcca95f":"code","329d847a":"code","684f92c4":"code","b250febc":"code","d6ebfb8b":"code","1ba18234":"markdown"},"source":{"6977dc95":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import VotingRegressor, AdaBoostRegressor, ExtraTreesRegressor,GradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.model_selection import train_test_split\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","16d2e43a":"input_train_df = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","f3cebd75":"input_train_df.head()","025cec0d":"input_train_df.isnull().sum()","216e6b7e":"input_train_df.shape","ab3bb605":"input_train_df.Embarked.value_counts()","163fe039":"input_train_df['age'] = input_train_df['Age'].fillna(input_train_df['Age'].mean())\ninput_train_df.isnull().sum()","d6088774":"## Title Extraction\n\nfirst_name = input_train_df.Name[0]\nprint(first_name)","3c33a4d7":"first_name.split(', ')[1].split('.')[0]","f9d33fc1":"def title(name):\n    if name.split(', ')[1].split('.')[0] not in ['Mr','Miss','Mrs','Master']:\n        return 'Other'\n    else:\n        return name.split(', ')[1].split('.')[0]","323a042e":"def MakeDateModelReady(df):\n    start_df = df.drop(columns=['PassengerId', 'Cabin','Ticket']) ## Cabin is missing almost all the data and PassengerID is not useful\n    \n    dummy_sex_df = pd.get_dummies(df.Sex)\n    \n    start_df = start_df.drop(columns=['Sex'])\n    \n    dummy_embarked_df = pd.get_dummies(df.Embarked)\n    \n    start_df = start_df.drop(columns=['Embarked'])\n    \n    dummy_title_df = pd.get_dummies(df.Name.apply(lambda x: title(x)))\n    \n    dummy_first_letter_last_name = pd.get_dummies(df.Name.apply(lambda x: x[0].lower()))\n    \n    start_df['name_len'] = df.Name.apply(lambda x: len(x))\n    \n    start_df = start_df.drop(columns=['Name'])\n    \n    Fare_mean = start_df.Fare.mean()\n    \n    start_df.Fare.fillna(Fare_mean)\n    \n    start_df['scaled_fare'] = df.Fare.apply(lambda x: (x - df.Fare.mean())\/df.Fare.std())\n    \n    start_df = start_df.drop(columns=['Fare'])\n    \n    start_df['group_including_person'] = df.Parch + df.SibSp + 1\n    \n    start_df = start_df.drop(columns=['Parch','SibSp'])\n    \n    Age_mean = start_df.Age.mean()\n    \n    start_df['age'] = start_df['Age'].fillna(Age_mean)\n    \n    start_df = start_df.drop(columns=['Age'])\n    \n    end_df = pd.concat([start_df, dummy_embarked_df, dummy_title_df, dummy_sex_df, dummy_first_letter_last_name], axis=1)\n    \n    return end_df","f308178a":"X = MakeDateModelReady(input_train_df).drop(columns=['Survived'])\ny = input_train_df['Survived']\n\nprint(X.shape)\nprint(y.shape)","352c366e":"X.isnull().sum()","1b410060":"train_x, test_x, train_y, test_y = train_test_split(X,y)","290d79c3":"adar = AdaBoostRegressor(n_estimators=25, learning_rate=0.001, loss='linear')\nextr = ExtraTreesRegressor(n_estimators=100, max_depth=25, min_samples_split=5)\nrfr = RandomForestRegressor(n_estimators=100, max_depth=25, min_samples_split=5)\ngbr = GradientBoostingRegressor(n_estimators=25, learning_rate=0.001)\n\nvote_reg = VotingRegressor([('adar',adar), ('extr', extr), ('rfr', rfr), ('gbr',gbr)] )","73183711":"adar.fit(train_x,train_y)","24491d2e":"extr.fit(train_x,train_y)","137e809f":"rfr.fit(train_x,train_y)","a35ca5d9":"gbr.fit(train_x,train_y)","9c18f18a":"vote_reg.fit(train_x,train_y)","793bb492":"from sklearn.metrics import confusion_matrix","6af885c3":"adar_pred = adar.predict(test_x)\nadar_pred_whole = [1 if x > .5 else 0 for x in adar_pred]\nconfusion_matrix(test_y, adar_pred_whole)","06f9b944":"extr_pred = extr.predict(test_x)\nextr_pred_whole = [1 if x > .5 else 0 for x in extr_pred]\nconfusion_matrix(test_y, extr_pred_whole)","17c49451":"rfr_pred = rfr.predict(test_x)\nrfr_pred_whole = [1 if x > .5 else 0 for x in rfr_pred]\nconfusion_matrix(test_y, rfr_pred_whole)","a367d959":"gbr_pred = gbr.predict(test_x)\ngbr_pred_whole = [1 if x > .5 else 0 for x in gbr_pred]\nconfusion_matrix(test_y, gbr_pred_whole)","24760876":"vote_reg_pred = vote_reg.predict(test_x)\nvote_reg_pred_whole = [1 if x > .5 else 0 for x in vote_reg_pred]\nconfusion_matrix(test_y, vote_reg_pred_whole)","140a03e3":"from sklearn.linear_model import ElasticNetCV, BayesianRidge, LassoCV, LogisticRegression","2eed9426":"encv = ElasticNetCV()\nencv.fit(train_x,train_y)\nencv_pred = encv.predict(test_x)\nencv_pred_whole = [1 if x > .5 else 0 for x in encv_pred]\nconfusion_matrix(test_y, encv_pred_whole)","9d077aa5":"brr = BayesianRidge()\nbrr.fit(train_x,train_y)\nbrr_pred = encv.predict(test_x)\nbrr_pred_whole = [1 if x > .5 else 0 for x in brr_pred]\nconfusion_matrix(test_y, brr_pred_whole)","57565660":"lcvr = LassoCV()\nlcvr.fit(train_x,train_y)\nlcvr_pred = lcvr.predict(test_x)\nlcvr_pred_whole = [1 if x > .5 else 0 for x in lcvr_pred]\nconfusion_matrix(test_y, lcvr_pred_whole)","5c5ef28d":"test_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_df.columns","80711161":"pid = test_df.PassengerId","cd20ce3d":"test_df_for_model=MakeDateModelReady(test_df)\ntest_df_for_model['scaled_fare'] = test_df_for_model['scaled_fare'].fillna(0)\ntest_df_for_model['u'] = test_df_for_model.apply(lambda x: 0, axis =1)\ntest_df_for_model['y'] = test_df_for_model.apply(lambda x: 0, axis =1)","aa0ee838":"print(test_df_for_model.columns)\nprint(X.columns)\nprint(test_df_for_model.shape)\nprint(X.shape)","bbcca95f":"preds = vote_reg.predict(test_df_for_model)\n","329d847a":"preds_whole = [1 if x > .5 else 0 for x in preds]","684f92c4":"sub_df = pd.DataFrame.from_dict({'PassengerId':pid, 'Survived':preds_whole})","b250febc":"sub_df.Survived.value_counts()","d6ebfb8b":"sub_df.to_csv('sub.csv',index=False)","1ba18234":"I am going to to build a function to set up the data frame. it will be comprised of all the steps I take to fix the data into a useful form.\n\nPart One - We need to remove passengerid, it is a unique identifier so it is not going to assist us in the data\n\nPart Two - We need to create dummy categorical variables for categorical variables\n\nPart Three - We need to create some features, I am going to use title, length of alphabetical characters in the name, and total members in the persons group\n\nPart Four - We need to remove features which are missing a majority of the values or which we created dummy variables for, scale or normalize variables with a lot of variance\n\nPart Five - We need to seperate the survived variable from the other variables, and create a train and test split\n\nPart Six - Running the different models on the data\n\nFinally - Evaluating the model\n\n... Ready ... Set ... Go..."}}