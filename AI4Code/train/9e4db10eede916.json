{"cell_type":{"25539258":"code","02e8d4a8":"code","1fe4d55e":"code","3e1a9484":"code","cbae167c":"code","6add6d21":"code","c68d37b0":"code","84de95c4":"code","8f5f4be7":"code","6a707370":"code","2d5c1f10":"code","8da571bd":"code","02d00b15":"code","bf9b5683":"markdown","f69ea360":"markdown","491b6ae7":"markdown","e5c4b8db":"markdown"},"source":{"25539258":"import keras\nfrom keras.models import Sequential,Input,Model\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D, Activation\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import regularizers\n\nfrom skimage import io, transform\n\nimport os, glob\n\nimport os\nimport cv2\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix","02e8d4a8":"train_images = glob.glob(\"..\/input\/fingers\/train\/*.png\")\ntest_images = glob.glob(\"..\/input\/fingers\/test\/*.png\")","1fe4d55e":"X_train = []\nX_test = []\ny_train = []\ny_test = []\n    \nfor img in train_images:\n    img_read = io.imread(img)\n    # Most images are already of size (128,128) but it is always better to ensure they all are\n    img_read = transform.resize(img_read, (128,128), mode = 'constant')\n    X_train.append(img_read)\n    # The info about the number of fingers and the fact that this is a right or left hand is in two characters of the path\n    y_train.append(img[-6:-4])\n    \nfor img in test_images:\n    img_read = io.imread(img)\n    img_read = transform.resize(img_read, (128,128), mode = 'constant')\n    X_test.append(img_read)\n    y_test.append(img[-6:-4])","3e1a9484":"y_train[:5]","cbae167c":"io.imshow(X_train[0])\nplt.show()\nio.imshow(X_train[1])\nplt.show()\nio.imshow(X_train[2])\nplt.show()\nio.imshow(X_train[3])\nplt.show()","6add6d21":"X_train = np.array(X_train)\nX_test = np.array(X_test)","c68d37b0":"print(X_train.shape,X_test.shape)","84de95c4":"X_train = np.expand_dims(X_train, axis=3)\nX_test = np.expand_dims(X_test, axis=3)","8f5f4be7":"label_to_int={\n    '0R' : 0,\n    '1R' : 1,\n    '2R' : 2,\n    '3R' : 3,\n    '4R' : 4,\n    '5R' : 5,\n    '0L' : 6,\n    '1L' : 7,\n    '2L' : 8,\n    '3L' : 9,\n    '4L' : 10,\n    '5L' : 11\n}","6a707370":"temp = []\nfor label in y_train:\n    temp.append(label_to_int[label])\ny_train = temp.copy()\n\ntemp = []\nfor label in y_test:\n    temp.append(label_to_int[label])\ny_test = temp.copy()","2d5c1f10":"y_train = keras.utils.to_categorical(y_train, num_classes = 12)\ny_test = keras.utils.to_categorical(y_test, num_classes = 12)","8da571bd":"weight_decay = 1e-4\n\nnum_classes = 12\n\nmodel = Sequential()\n\nmodel.add(Conv2D(64, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay), input_shape=(128,128,1)))\nmodel.add(Activation('elu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('elu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.2))\n \nmodel.add(Conv2D(128, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('elu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('elu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n \nmodel.add(Conv2D(128, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('elu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128, (4,4), padding='same', kernel_regularizer=regularizers.l2(weight_decay)))\nmodel.add(Activation('elu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.4))\n \nmodel.add(Flatten())\nmodel.add(Dense(128, activation=\"linear\"))\nmodel.add(Activation('elu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer=keras.optimizers.Adam(0.0003), metrics=['accuracy'])\n \nmodel.summary()","02d00b15":"model.fit(x = X_train,y = y_train, batch_size=64, validation_data = (X_test,y_test), epochs = 5)","bf9b5683":"## Creating the network","f69ea360":"## Importing the images","491b6ae7":"Those are the labels, the number indicates the number of fingers and the letter indicates the orientation.\n\nNow let's look at some images.","e5c4b8db":"We need to use one hot encoding on the labels to use a CNN."}}