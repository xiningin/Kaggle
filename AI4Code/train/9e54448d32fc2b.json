{"cell_type":{"e5e485f3":"code","c3926231":"code","c75c3866":"code","0b986598":"code","d9c7e3c0":"code","2acba338":"code","fd3a2c12":"code","071d45a8":"code","fbd48019":"markdown","848f346f":"markdown","3e375af5":"markdown","8a194d8f":"markdown","828cc764":"markdown","14462146":"markdown","76dd3424":"markdown","ec7389de":"markdown"},"source":{"e5e485f3":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nimport sklearn.model_selection as model_selection\nfrom sklearn.neighbors import KNeighborsClassifier\n\ndf = pd.read_csv(\"..\/input\/lecture06risk\/ClassifyRisk.csv\")\ndf","c3926231":"from sklearn.preprocessing import OrdinalEncoder\nencoder = OrdinalEncoder(categories = [['n','y']]) # create an encoder with order\ndf['mortgage'] = encoder.fit_transform(df['mortgage'].values.reshape(-1, 1)) # fit encoder with data and transfer data \ndf","c75c3866":"from sklearn.preprocessing import OrdinalEncoder\nencoder = OrdinalEncoder(categories = [['bad loss','good risk']]) # create an encoder with order\ndf['risk'] = encoder.fit_transform(df['risk'].values.reshape(-1, 1)) # fit encoder with data and transfer data \ndf","0b986598":"df = pd.get_dummies(df,prefix   =['marital_status'], columns = ['marital_status'])\ndf ","d9c7e3c0":"column_name = 'risk'\ncolumn_0 = df.pop(column_name)\ndf.insert(0, column_name, column_0)\ndf.head(5)","2acba338":"X = df.iloc[:,1:]\ny = df.iloc[:,0] \nprint(\"Features X\\n\",X[0:5])\nprint(\"Target y\\n\", y[0:5])","fd3a2c12":"X_train, X_test, y_train, y_test = model_selection.train_test_split(X, y, test_size = 0.3, random_state = 4)\n#normalisation\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()  \nscaler.fit(X_train)\nX_train = scaler.transform(X_train) \nX_test = scaler.transform(X_test)\n\n#import metrics model to check the accuracy \nfrom sklearn import metrics\n#Run k=1 through 25 and record testing accuracy  \nk_list = []\nscores_list = [] \n \nfor k in range(1,26):\n        knn = KNeighborsClassifier(n_neighbors=k,weights=\"distance\", metric=\"euclidean\")\n        knn.fit(X_train,y_train)\n        y_pred=knn.predict(X_test) \n        k_list.append(k)\n        accuracy = metrics.accuracy_score(y_test,y_pred)\n        print(k, 'accuracy',accuracy)\n        scores_list.append(metrics.accuracy_score(y_test,y_pred))\n","071d45a8":"#plot score\nimport matplotlib.pyplot as plt\nplt.plot(k_list,scores_list)\nplt.xlabel('k')\nplt.ylabel('accuracy')\nplt.show()\n","fbd48019":"* Visualize the change of `accuracy` over `k` using `pyplot.plot`\n\n*Question: which k is the best?*","848f346f":"* Try different combintations of `n_neighbors, weights, metric` in `KNeighborsClassifier` and find out the best combination.\n\n`KNeighborsClassifier(n_neighbors=?,weights=?, metric=?)`\n\nQuestion: which parameter setting is the best in terms of the model accuracy?\n","3e375af5":"## Activity: Predict credit risk by KNN \nIn this lab, you will build a KNN model to predict customers' `credit risk` based on historical data \n\n* Read Lecture Jupyter Notebook: Part 5 Case Study: KNN for predicting credit risk\n* Create KNN model with $k=1, \\cdots, 25$\n* Print the accuracy of these models respectively\n\n*Question: for which $k$, kNN has the best accuracy?*\n","8a194d8f":"# Lab 06 k-Nearest Neighbor Method for classification\n \nCOMP20121 Machine Learning for Data Analytics\n\nAuthor: [Jun He](https:\/\/sites.google.com\/site\/hejunhomepage\/) ","828cc764":"## Resources\/references\n1. sklearn.neighbors.KNeighborsClassifier: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neighbors.KNeighborsClassifier.html\n2. Seaborn plotting: https:\/\/seaborn.pydata.org\/ \n","14462146":"*Train the KNN model on training data and then predict on test data with   $k=1, \\cdots, 25$. \n* Tip: use a `For` loop.  Record the accuracy in a list.  \n\n*Question: how to creare a `For` loop?* Google search \"python wiki for loop\"","76dd3424":"## Reflect\nBriefly note what you\u2019ve learnt, found easy and found challenging in your Jupyter notebook. Keep these notes safe and maintain a reflective log for each lab session.","ec7389de":"## Learning objectives\n* Learn Sklean implementation of KNN classification \n* Learn data transformation from categorical variables to numeric ones \n* Learn data normalisation   "}}