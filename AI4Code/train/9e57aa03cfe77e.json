{"cell_type":{"04e61292":"code","d03eba59":"code","b27ea43f":"code","407874c3":"code","a7d85054":"code","db4cf59e":"code","28775ea3":"code","4c02b668":"code","26b72b6d":"code","bb11bb93":"code","2daa0020":"code","2a28e8ab":"code","f1e67945":"code","0d597123":"code","a5bf15a4":"code","8e375212":"code","9da34926":"code","9c82aaf6":"code","4fac4f22":"code","988f07b2":"code","04464a57":"code","3c435902":"code","c6e3fc36":"markdown","6256bd6f":"markdown","e40d7e47":"markdown","873b92e9":"markdown","4f2c9d64":"markdown","ef299d25":"markdown","c5c121eb":"markdown","68dd47c2":"markdown","20cab533":"markdown","4d3e1004":"markdown","73d62da3":"markdown","04b443b6":"markdown","b10fd893":"markdown","426c8300":"markdown","571746d4":"markdown","3de36401":"markdown","8bb6b52d":"markdown","7fd39a01":"markdown","24531d73":"markdown"},"source":{"04e61292":"import pandas as pd\nimport numpy as np\nimport copy\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression  # For Logistic Regression\nfrom sklearn.ensemble import RandomForestClassifier # For RFC\nfrom sklearn.svm import SVC                               #For SVM\nfrom sklearn.metrics import matthews_corrcoef    \nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import confusion_matrix,classification_report\nfrom sklearn.metrics import accuracy_score,roc_curve,auc\nsns.set(style=\"ticks\", color_codes=True)","d03eba59":"df = pd.read_csv(\"..\/input\/phishing-data\/combined_dataset.csv\")","b27ea43f":"df.head()","407874c3":"df.isnull().sum()\ndf.isna().sum()","a7d85054":"df.describe()","db4cf59e":"df.info()","28775ea3":"sns.countplot(df['label'])","4c02b668":"df.corr()\ndf.corr()['label'].sort_values()","26b72b6d":"#plt.figure(figsize = ('8','8'))\nsns.heatmap(df.corr(),annot=True)","bb11bb93":"#sns.pairplot(df)","2daa0020":"X= df.drop(['label', 'domain'], axis=1)\nY= df.label","2a28e8ab":"x_train, x_test, y_train, y_test = train_test_split(X,Y,test_size=0.40)\nprint(\"Training set has {} samples.\".format(x_train.shape[0]))\nprint(\"Testing set has {} samples.\".format(x_test.shape[0]))","f1e67945":"#create logistic regression object\nLogReg=LogisticRegression()\n\n#Train the model using training data \nLogReg.fit(x_train,y_train)\n\n\n#Test the model using testing data\ny_pred = LogReg.predict(x_test)","0d597123":"cm=confusion_matrix(y_test,y_pred)\nsns.heatmap(cm,annot=True)","a5bf15a4":"print(\"f1 score is \",f1_score(y_test,y_pred,average='weighted'))\nprint(\"matthews correlation coefficient is \",matthews_corrcoef(y_test,y_pred))\nprint(\"The accuracy Logistic Regression on testing data is: \",100.0 *accuracy_score(y_test,y_pred))","8e375212":"LogReg1=LogisticRegression(random_state= 0, multi_class='multinomial' , solver='newton-cg')\n#Train the model using training data \nLogReg1.fit(x_train,y_train)\n\n\n#Test the model using testing data\ny_pred_log = LogReg1.predict(x_test)\n\ncm=confusion_matrix(y_test,y_pred_log)\nsns.heatmap(cm,annot=True)\nprint(\"f1 score is \",f1_score(y_test,y_pred_log,average='weighted'))\nprint(\"matthews correlation coefficient is \",matthews_corrcoef(y_test,y_pred_log))\nprint(\"The accuracy Logistic Regression on testing data is: \",100.0 *accuracy_score(y_test,y_pred_log))","9da34926":"fpr,tpr,thresh = roc_curve(y_test,y_pred_log)\nroc_auc = accuracy_score(y_test,y_pred_log)\n\n# Plot ROC curve for Logistic Regression\nplt.plot(fpr,tpr,'orange',label = 'Logistic Regression')\nplt.legend(\"Logistic Regression\", loc='lower right')\nplt.xlabel(\"False positive rate\")\nplt.ylabel(\"True positive rate\")\nplt.legend(loc='lower right')","9c82aaf6":"#create RFC object\nRFClass = RandomForestClassifier()\n#Train the model using training data \nRFClass.fit(x_train,y_train)\n\n#Test the model using testing data\ny_pred_rfc = RFClass.predict(x_test)\n\ncm=confusion_matrix(y_test,y_pred_rfc)\nsns.heatmap(cm,annot=True)\nprint(\"f1 score is \",f1_score(y_test,y_pred_rfc,average='weighted'))\nprint(\"matthews correlation coefficient is \",matthews_corrcoef(y_test,y_pred_rfc))\nprint(\"The accuracy Random forest classifier on testing data is: \",100.0 *accuracy_score(y_test,y_pred_rfc))","4fac4f22":"fpr,tpr,thresh = roc_curve(y_test,y_pred_rfc)\nroc_auc = accuracy_score(y_test,y_pred_rfc)\n\n# Plot ROC curve for Logistic Regression\nplt.plot(fpr,tpr,'orange',label = 'Random Forest Classification')\nplt.legend(\"Logistic Regression\", loc='lower right')\nplt.xlabel(\"False positive rate\")\nplt.ylabel(\"True positive rate\")\nplt.legend(loc='lower right')","988f07b2":"#create SVM object\n\nsvc = SVC()\n\nsvc.fit(x_train,y_train)\ny_pred_svc = svc.predict(x_test)\n\ncm=confusion_matrix(y_test,y_pred_svc)\nsns.heatmap(cm,annot=True)\nprint(\"f1 score is \",f1_score(y_test,y_pred_svc,average='weighted'))\nprint(\"matthews correlation coefficient is \",matthews_corrcoef(y_test,y_pred_svc))\nprint(\"The accuracy SVC on testing data is: \",100.0 *accuracy_score(y_test,y_pred_svc))","04464a57":"fpr,tpr,thresh = roc_curve(y_test,y_pred_svc)\nroc_auc = accuracy_score(y_test,y_pred_svc)\n\n# Plot ROC curve for SVC\nplt.plot(fpr,tpr,'orange',label = 'Random Forest Classification')\nplt.legend(\"Logistic Regression\", loc='lower right')\nplt.xlabel(\"False positive rate\")\nplt.ylabel(\"True positive rate\")\nplt.legend(loc='lower right')","3c435902":"print(\"The accuracy Logistic Regression on testing data is: \",100.0 *accuracy_score(y_test,y_pred_log))\nprint(\"The accuracy Random forest classifier on testing data is: \",100.0 *accuracy_score(y_test,y_pred_rfc))\nprint(\"The accuracy SVC on testing data is: \",100.0 *accuracy_score(y_test,y_pred_svc))","c6e3fc36":"### Feature Selection \n- Taking all the features in count ","6256bd6f":"## 2: Random Forest Classifier","e40d7e47":"- activeDuration and valid has very less co-relation with target (can be ignored)","873b92e9":"- Split the data as training and testing data - 60% train size, 40% test size","4f2c9d64":"# EDA","ef299d25":"## 1.1 Logistic Regression\n  - As in target feature we have only 2 value (0 or 1)","c5c121eb":"# Objective :  Based on the given features, classify the website as legitimate website or phishing website link","68dd47c2":"## Loding complete data in Panda's Dataframe","20cab533":"## Prepration Of Data","4d3e1004":"## 3: SVM","73d62da3":"### Heat Map","04b443b6":"## 1.2 Logistic Regression\n        - With Parameter adjustment","b10fd893":"- No null Value","426c8300":"### Co-relation matrix","571746d4":"# Importing Required Libraries\n\n- **Pandas** :  For data processing, CSV file I\/O (e.g. pd.read_csv)\n- **Numpy**  :  For linear algebra\n- **Matplotlib** : For Data visualization\n- **sklearn.model_selection**  : For spliting data in Train & Test\n- **sklearn.linear_mode.LogisticRegression**   : For Logistic Regression \n- **sklearn.metrics**  : Evaluation metrics ","3de36401":"### Model Training","8bb6b52d":"- Result\/target are distribute in aprox 4-6 ratio","7fd39a01":"- ##### Model Testing\n   - matthews_corrcoef\n   - accuracy_score\n   - f1_score\n   - confusion matrix","24531d73":"The description of data are as follows:\n- Domain: The URL itself.\n- Ranking: Page Ranking\n- isIp: Is there an IP address in the weblink\n- valid: This data is fetched from google's whois API that tells us more about the current status of the URL's registration.\n- activeDuration: Also from whois API. Gives the duration of the time since the registration up until now.\n- urlLen: It is simply the length of the URL\n- is@: If the link has a '@' character then it's value = 1\n- isredirect: If the link has double dashes, there is a chance that it is a redirect. 1-> multiple dashes present together.\n- haveDash: If there are any dashes in the domain name.\n- domainLen: The length of just the domain name.\n- noOfSubdomain: The number of subdomains preset in the URL.\n- Labels: 0 -> Legitimate website , 1 -> Phishing Link\/ Spam Link"}}