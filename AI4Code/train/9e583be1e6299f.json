{"cell_type":{"9c673c2b":"code","f5e772ba":"code","83823825":"code","b5d3dc90":"code","db1fc5cc":"code","e076ce6e":"code","489866e3":"code","dc3851c2":"code","b77063b2":"code","5cbbb4d1":"code","180ab188":"code","d61c832e":"code","0aa8ee12":"code","de09f6c5":"code","d1f313e9":"code","5035c493":"code","8ac4800a":"code","a552626b":"code","d7998958":"code","c8b22175":"code","3d6656c0":"code","dd299378":"markdown","4b0a7587":"markdown"},"source":{"9c673c2b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f5e772ba":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport copy\nfrom nltk.corpus import stopwords","83823825":"fake = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/True.csv')\ntrue = pd.read_csv('\/kaggle\/input\/fake-and-real-news-dataset\/Fake.csv')","b5d3dc90":"fake.head()","db1fc5cc":"true.head()","e076ce6e":"fake.groupby('subject').describe()","489866e3":"true.groupby('subject').describe()","dc3851c2":"fake.count()","b77063b2":"true.count()","5cbbb4d1":"fake['fake'] = 1\ntrue['fake'] = 0","180ab188":"merge = pd.merge(fake, true, how='outer')\ndf = merge.copy()","d61c832e":"df.count()","0aa8ee12":"df['lenght'] = df['title'].apply(len)","de09f6c5":"sns.countplot(df['lenght'], hue='fake', data=df)","d1f313e9":"df.hist(column='lenght', by='fake', figsize=(20,5), bins=50)","5035c493":"import string\n\ndef text_process(title):\n    \n    nop = [char for char in title if char not in string.punctuation]\n    \n    nop = ''.join(nop)\n    \n    return [word for word in nop.split() if word in word.lower() not in stopwords.words('english')]","8ac4800a":"from sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report, confusion_matrix","a552626b":"piplineTitle = Pipeline([\n    ('bow', CountVectorizer(analyzer=text_process)),\n    ('tfidf', TfidfTransformer()),\n    ('classifier', MultinomialNB()),\n])","d7998958":"X_train, X_test, y_train, y_test = train_test_split(df['title'], df['fake'], test_size=0.2, random_state=42)","c8b22175":"piplineTitle.fit(X_train, y_train)","3d6656c0":"prediction = piplineTitle.fit(X_train, y_train).predict(X_test)\n\nprint('Classification report', classification_report(prediction, y_test))","dd299378":"Lets Try with Ttitle only","4b0a7587":"******Modeling**"}}