{"cell_type":{"fcebc578":"code","3caed2ce":"code","14b48404":"code","9385350d":"code","89f45775":"code","bcb4773f":"code","042db530":"code","0cecb29b":"code","2b31acff":"code","22765bfe":"code","88087877":"code","2fac96ee":"code","f72d075d":"code","7e4c4f5b":"code","5873f07f":"code","4217f9b9":"code","15fb8bb5":"code","01d5facb":"code","b8d0fe24":"code","54ac4ebb":"code","13dfdadb":"code","998c0ea7":"code","b2f74fa7":"code","ddd33780":"code","4e4f21e6":"code","97fe5f5a":"code","7afb2905":"code","ff744730":"code","69a318fb":"code","bee33006":"markdown","9c1ccff2":"markdown","a1d51125":"markdown","452bca4c":"markdown","d72724dd":"markdown","60910c24":"markdown","889e7f85":"markdown","95145b06":"markdown","04ca3c0a":"markdown","f9a88d89":"markdown","74430c0a":"markdown","8541fdfe":"markdown","1013f5af":"markdown","1fa03589":"markdown","3a234d57":"markdown","7e9507d5":"markdown","7fb06afa":"markdown","b56594bf":"markdown","6c36d661":"markdown","ebae9dfa":"markdown","1f03a952":"markdown","ec8e26b0":"markdown"},"source":{"fcebc578":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.metrics import r2_score \nfrom sklearn.metrics import mean_squared_error\nimport seaborn as sns\n","3caed2ce":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","14b48404":"#Training Data \ndata=pd.read_csv('\/kaggle\/input\/training-data\/DATA.csv')\n\n\ndata.shape \n\n#Viewing the training data\ndata.head()","9385350d":"#Test Data\ntest=pd.read_csv('\/kaggle\/input\/testdata\/Book1.csv')\ntest.shape\n\n#Viewing the test data\ntest.head()","89f45775":"def fahr_to_celsius(temp_fahr):\n    \"\"\"Convert Fahrenheit to Celsius\n    \n    Return Celsius conversion of input\"\"\"\n    temp_celsius = (temp_fahr - 32) * 5 \/ 9\n    return temp_celsius\n\n#Converting the temperature \ndata[\"temperature_C\"] = fahr_to_celsius(data[\"Temperature\"])\n\n#rounding off the temperatures to 1 decimal point\ndata[\"temperature_C\"]=round(data[\"temperature_C\"],1)\n\ndata.head()","bcb4773f":"#Replacing the 72.8 value with NaN\ndata=data.replace(to_replace=-72.8,value=np.nan)\n\n#Using Forward Fill Method to handle missing data\ndata=data.fillna(method='ffill') ","042db530":"data['day'] = data[data.columns[0:3]].apply(\n    lambda x: '-'.join(x.dropna().astype(str)),\n    axis=1)\n\ndata=data.set_index(data['day'])\ndata=data.drop(columns=['day'])\n\ndata.head()","0cecb29b":"data=data.iloc[:-133,:]","2b31acff":"#Choosing the dependent (y) and independent variables (x)\nx=data.iloc[:,[0,1,2]]\ny=data.iloc[:,4]","22765bfe":"x.head()","88087877":"y.head()","2fac96ee":"train_x, test_x, train_y, test_y = train_test_split(x,y,test_size=0.2,random_state=0)\ntrain_x.shape\ntest_x.shape","f72d075d":"#n_estimators can be 10,100,1000\nregressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\nregressor.fit(train_x, train_y)\n","7e4c4f5b":"#Predicting the results for test_x\npred = regressor.predict(test_x)\n","5873f07f":"# Using r2_score and mean squared error for evaluation\nr2_score(test_y, pred)\n","4217f9b9":"mean_squared_error(test_y,pred)","15fb8bb5":"y_pred = regressor.predict(test)\ny_pred=pd.DataFrame(y_pred)\n","01d5facb":"#Joining the predicted results with the test dataset \ntest=pd.concat([test,y_pred],axis=1)\n\n#Changing the index to date\ntest['day'] = test[test.columns[0:3]].apply(\n    lambda x: '-'.join(x.dropna().astype(str)),\n    axis=1\n)\n\ntest=test.set_index(test['day'])\ntest=test.drop(columns=['day'])","b8d0fe24":"test.head()","54ac4ebb":"#Formatting the actual and predicted values\nactual=pd.read_csv('\/kaggle\/input\/training-data\/DATA.csv').iloc[-133:,:]\npredicted=test.iloc[0:133,3]\npredicted=predicted.to_frame()\n\nactual['day'] = actual[actual.columns[0:3]].apply(\n    lambda x: '-'.join(x.dropna().astype(str)),\n    axis=1\n)\n\nactual=actual.set_index(actual['day'])\nactual=actual.drop(columns=['day'])\nactual[\"temperature_C\"] = fahr_to_celsius(actual[\"Temperature\"])\nactual[\"temperature_C\"]=round(actual[\"temperature_C\"],1)","13dfdadb":"#Plotting using line plot\na=sns.lineplot(x=actual.index,y=actual['temperature_C'],color='red') \nb=sns.lineplot(x=predicted.index,y=predicted[0]) ","998c0ea7":"#Groupby data by year\nyear=data.groupby('Year').mean().iloc[:,-1]\nyear=year.to_frame()\nyear.head()","b2f74fa7":"plt.plot(year.index,year['temperature_C'],alpha=0.4,\n         color='red',linestyle='dashed',linewidth=2,\n         marker='o',markersize=5,markerfacecolor='blue',\n         markeredgecolor='blue')","ddd33780":"#Comparison\ngraph=sns.lineplot(x=year.index,y=year['temperature_C'],marker='o') \nplt.scatter(2020,y_pred[0].mean(),color='red') #2020 predicted\ngraph.axhline(year['temperature_C'].mean())","4e4f21e6":"z = np.polyfit(y=year['temperature_C'],x=year.index,deg=2)\n\np = np.poly1d(z)\nplt.scatter(x=year['temperature_C'],y=year.index)\nplt.plot(x,p(x),\"r--\")","97fe5f5a":"#Grouping data for every year month wise\nmonth=data.groupby(['Year','Month']).mean().iloc[:,-1]\nmonth=month.to_frame()\n\nmonth.reset_index(level=1, inplace=True)\n\nmonth.head()","7afb2905":"sns.boxplot(x=month['Month'], y=month['temperature_C'])","ff744730":"sns.set_color_codes()\nax = sns.distplot(data['temperature_C'],color='r')","69a318fb":"month=month.loc[month['Month'].isin(['3','6','9','12'])]\nsns.lineplot(month.index, 'temperature_C', ci=None, \n             hue='Month', data=month, marker='o')","bee33006":"The lines shows the average temperature of 1995-2020 and red point marks the predicted value of average temperature of 2020","9c1ccff2":"# **Weather Forecasting and Shift in Seasons using EDA**\n\n---\nThis notebook is divided into 2 major sections: EDA and Prediction\n","a1d51125":"Plotting frequency of temperature using Histogram","452bca4c":"Reading the train and test data","d72724dd":"Plotting the trend of 4 seasons in Delhi","60910c24":"On trying different combinations of Regression models and hyperparamters, we recieve the following results on using Random Forest Regressor","889e7f85":"Column 0 shows the predicted temperature values","95145b06":"We wish to have index in DD-MM-YYYY format so that the dataset can be comprehended easily. For this we create a 'Day' parameter and set it as index.","04ca3c0a":"The test datset has dates from 1st January 2020 to 31st December 2020. The three columns are Date, Month and Year. ","f9a88d89":"Plotting the trendline ","74430c0a":"## Predictions for 2020","8541fdfe":"![a.png](data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAYUAAAD8CAYAAACYebj1AAAACXBIWXMAAAsSAAALEgHS3X78AAAAO3pUWHRTb2Z0d2FyZQAACJnLTSwpyMkvyclMUihLLSrOzM9TMNYz0DPWUcgoKSmw0tfPhSvQyy9K1wcApx4Q8i+ifZwAACAASURBVHic7d17QFR1\/v\/x53AVFBSQwYEBkYuKCCJgqO2aZmhXL+B6idLSwtz97lpWLm3f7mWYXbSyC2VJfs1Ws8BKzXbbfhmlhuLdzFQUBhDkIqJchuH8\/iBnI0DuzIX345+cD3Nm3nPSeXHO+bzPR6UoioIQQggB2Ji6ACGEEOZDQkEIIYSRhIIQQggjCQUhhBBGEgpCCCGMJBSEEEIYSSgIIYQwklAQQghh1GIo5OTkMGHCBEJCQggNDWXVqlUAlJSUEBsbS3BwMLGxsZSWlgKwfv16wsPDCQ8PZ+zYsRw4cMD4Wtu3b2fIkCEEBQWRnJzcRR9JCCFEe6la6mjOz88nPz+fyMhILl68SFRUFGlpaaxduxZ3d3eSkpJITk6mtLSU5cuX8\/333xMSEoKbmxvbtm3jySefZPfu3RgMBgYPHsxXX32FVqtl1KhRbNiwgWHDhl21wP79++Pv79+Zn1kIIaxednY258+fb\/N2di09QaPRoNFoAHBxcSEkJASdTkd6ejrffPMNAPPmzWP8+PEsX76csWPHGrcdPXo0ubm5AOzZs4egoCACAgIAmD17Nunp6S2Ggr+\/P5mZmW3+YEII0ZNFR0e3a7s2XVPIzs4mKyuLmJgYzp07ZwwLjUZDYWFho+evWbOGm266CQCdToevr6\/xZ1qtFp1O1+T7pKSkEB0dTXR0NEVFRW0pUQghRAe0eKRwRUVFBfHx8axcuRJXV9cWn\/+f\/\/yHNWvW8N133wHQ1FkqlUrV5LaJiYkkJiYC7U87IYQQbdeqIwW9Xk98fDwJCQnExcUB4OXlRX5+PlB\/3UGtVhuff\/DgQe655x7S09Px8PAA6o8McnJyjM\/Jzc3F29u70z6IEEKIjmsxFBRFYcGCBYSEhLBkyRLj+JQpU0hNTQUgNTWVqVOnAnD27Fni4uJYt24dgwcPNj5\/1KhRnDhxgtOnT1NTU8NHH33ElClTOvvzCCGE6IAWTx9lZGSwbt06wsLCiIiIAGDZsmUkJSUxc+ZM1qxZg5+fH5s2bQLg6aefpri4mD\/\/+c\/1b2BnR2ZmJnZ2drz++utMnjwZg8HA\/PnzCQ0N7cKPJoQQoq1anJJqatHR0TL7SIjfScvSseLL4+SVVeLdz4mHJw9h2kgfU5clzEh7vztbfaFZCGEe0rJ0PPLJISr1BgB0ZZU88skhAAkG0WFymwshLMyKL48bA+GKSr2BFV8eN1FFwppIKAhhYfLKKts0LkRbSCgIYWG8+zm1aVyItpBQEMLCPDx5CE72tg3GnOxteXjyEBNVJKyJhIIQFmbaSB+ejwvDp58TKsCnnxPPx4XJRWYrob9wgdK9+0z2\/jL7SAgLNG2kj4SAldGXX6Tw31+T889NGCoruWbdWuxdXbq9DgkFIcyY9CNYN0VRuHDgIEeeeNo41i9iBN5TbjVJIICEghBmS\/oRrFddbS3FGT+Qt+UzKn45aRwf9sT\/4hY50oSVSSgIYbau1o8goWC56mprOf7CS5Ts3kMvb28C7rsXZ19f+g43j9v+SCgIYaakH8F6VOblkZf+GRcOHUYxGKgqOAdA5OsrUdnatrB195JQEMJMefdzQtdEAEg\/gmVQFIXyw0fQpX9G6Y\/\/vQdR74BBhPzvI7hFRzW7powpSSgIYaYenjykwTUFkH4ES5K99gPy0rZg5+qKx7VjKD96jMCFibiPvsYsw+AKCQUhzNSV6wYy+8gy6MsvUrD9SzzGjqFSpyMvbQsA0e++ha2jI4qimHUYXCGhIIQZk34E83c5N5e8LV9Q9J9vqKup4ez6DQD00gzAd\/YsbB0dgeaXHzY3EgpCiG5nDf0XiqJwfPmLFP+wC5W9PYpeD4CjWo3vrD+hnnCd2V1Ebg0JBSFEt7Lk\/os6vZ7Svftwj6m\/LqC\/cIF+kSMJXvxXVDYqin\/Yhfr6CdjY25u61HaTUBBCdCtL7L\/QX7hAwfYd5G\/djr6sjEH3LqBk9x7Kjx7DbVQUDv36AjBg8iQTV9pxEgpCiG5lSf0X+vJyzqxbT9E331JXU4O9Wz9UdnacfmcN9n374j\/\/LgbcaPlB8FsSCkKIbmXu\/ReKolBTUoKjhwc2jo6U7s3Cc8J4vG+7hQsHD3J2wz\/xmT4NzS03Ydurl6nL7XQSCkKIbmWu\/ReG6mqK\/t9O8rZ8hmIwELn6VarPnaNPYAB9ggJx9tXSa4AXnhPGY+fsbNJau5KEghCiW5lb\/0VNWRkFW7eTv+1LasvL6T1oEG6jYzj+4ssUf78L21696DsiHAAbe3uLvojcGhIKQohuZw79F0pdHSobG8qPHCNn48e4RUfhM\/U2yo8e4+xHG7FxcEAbPx3vqVNMdhtrU5BQEEL0GEpdHaX7ssjb8jl9Q4fhO+tPeIy+htAnH6NPUBB2fXpjqK7Ge8qt+EyfZpxV1F3MoX9DQkEIYfUM1dUUfv0N+Z99TqUuDwcPdzzGjKb6fDG5mz7m3L++xiduGgMT5uAeHYV7dFS312gu\/RsSCkIIq\/fL629y\/tud9A4MZPCS+3EdNhTdp1vY++57AHjFTjR5j4G59G9IKAghrE7FqVPkpX+O7+w\/4aTRoI2bxoAbJ+E6LASVSsVPyS9QvPtH1NdPwHfmDHp5qU1dstn0b0goCCGsglJXR8mPe8nb8hnlh49g06sX7jGjcNJocPDwoGjndzi4u+OkGcDAuXcwcN5cnDQDTF22kbn0b0goCCEsnmIwsP+Bh7h85iyOnv3xv2suXrE3AHBm\/QbyP\/sCQ1UVjp6eOGkG4OTtbeKKGzOX\/g0JBSGERao+X0zJ7j1obrkJla0tnteNo5eXGo8xo1HZ2pL7SRq5H3+C4dIlPMaMxnfOLHoP9DN12c0yl\/6NFkMhJyeHuXPnUlBQgI2NDYmJiSxevJiSkhJmzZpFdnY2\/v7+bNy4ETc3N3766Sfuvvtu9u3bx3PPPcdDDz1kfC1\/f39cXFywtbXFzs6OzMzMq7yzEEI0dvHEL+Rt+YzijB9QFIV+kSNx0gxAGz+dupoa4+2qq4uK6qedzplFn4BBJq66dcyhf0OlKIpytSfk5+eTn59PZGQkFy9eJCoqirS0NNauXYu7uztJSUkkJydTWlrK8uXLKSws5MyZM6SlpeHm5tYoFDIzM+nfv3+rC4yOjpbwEGbHHOaT9zSV+fn88upqyo8ew9bJCa\/YiWhuvYVeXmoM1dUUbN+BbvOnDE16GNdhISgGg0WuZ9BZ2vvd2eKRgkajQaPRAODi4kJISAg6nY709HS++eYbAObNm8f48eNZvnw5arUatVrNF1980eZihLAE5jKfvCeovVxJdVERvQf64dCvH4aqKgYtuBv1Dddj5+xMnV5P\/hdbydn0CfrSUvqGh2HrVH9hticHQke06ZpCdnY2WVlZxMTEcO7cOWNYaDQaCgsLW9xepVIxadIkVCoVCxcuJDExsX1VC2FC5jKf3JpVFRaS\/\/lWzn31bxzc3Rn5+kpsnZyIeOVF43MUReHgw49w6fRpXIeFMOShB+g7PNSEVVuHVodCRUUF8fHxrFy5EldX13a9WUZGBt7e3hQWFhIbG8vQoUMZN25co+elpKSQkpICQFFRUbveS4iuYi7zya1RxanT5H68meIfdgPQ\/9oxeE+5zbi+sWIwcP77XfQfW38x2Wf6VOz7utJ3RLjFrIFs7loVCnq9nvj4eBISEoiLiwPAy8uL\/Px8NBoN+fn5qNUtN394\/zoNTK1WM336dPbs2dNkKCQmJhqPIqKjo1v9YYToDuYyn9xaKAYDdbW12Do6UpmbS9n+A\/hMvQ3NLTfj6Nnf+Jyind+R89FGqvILsH00CfdrRuF53R9NXL31sWnpCYqisGDBAkJCQliyZIlxfMqUKaSmpgKQmprK1KlTr\/o6ly5d4uLFi8Y\/79ixg+HDh3ekdiFM4uHJQ3Cyb3i+2hzWA7A0tZcuoUvbwt77\/kL+Z\/XXID3GjmHUmhT875qLo2d\/lLo6zn+XQdbflnDilVexcXRk6D\/+jtso+WWxq7R4pJCRkcG6desICwsjIiICgGXLlpGUlMTMmTNZs2YNfn5+bNq0CYCCggKio6MpLy\/HxsaGlStXcvToUc6fP8\/06dMBqK2t5fbbb+fGG2\/swo8mRNcwl\/nklspQXU3+51vJ3fwJhkuXcR0eSu\/AAABs7OzA7jdfS4rCmfUfobK1YcjSh\/AYE4PKpsXfZUUHtDgl1dRkSqoQ1uX4ipc5\/10GbqOi8Zsziz6\/BgLUn5kozdxL\/udbGZr0MLZOTlQVFuLo4SGzidqoy6akCmEppHfAfJXtP4CTrxZHDw+0M+IYcOMk+ob99\/SxoiiUZe3n7If\/pOLECXoN8KLqXCG9\/QfSqxXXK0XnkVAQVkF6B8zTpdPZZK\/9gLL9B\/CeNoVBd8+j9yD\/Bs+pvXyZo08\/x8VjP+Ho2Z\/AvyxCff34+lNJotvJXhdWQXoHzEt10XnOfriBwv\/8P+x698Z\/\/l1obm54DbGqsJBeajV2zs70UqvxvO6PeN0w0erXQDZ3EgrCKkjvgHk5+9FGinZm4DNtCtoZcdj16WP82cXjP3P2w4+4cOQoUW+vxtHDg8FLFpuwWvFbEgrCKkjvgGnV6fUUbN+Ba2gIfQICGJgwB99ZMxpcD6j45SRnN\/yT0sy92Lm6MjBhToOwEOZBQkFYBXO5F31PoygKxRnfc2bdeqoKzuETP50+AQE4uLs1eF51cQkHHk7CztmZgXcmMODmm7BzlsA2RxIKwipI70D3Kz96jNPvpVJx4gTOA\/0Y9sT\/0m9khPHnl3NyKd2Xhc\/U23D0cGfo0ofoGz4cu969TVi1aImEgrAa5nAv+p6k7OAhakqKCfrrX1BPuM7YR1CZl0fOPzdR9O132Do64nndOBz69cVjTIyJKxatIaEgLIb0IZhWTWkpOR9tpF\/kSDxirsFn+lR8pk\/F1tHR+PMz6z6k8D\/fYGNnh8\/U2\/CJm4Z9O2+gKUxDQkFYBOlDMB1DZSW69M\/QfZqOotfjqFZDDMYwuLKYjcrWltLMTDS33Iw2fhoObm4tvLIwRxIKwiJIH4JpFO3M4PSa99CXluExdgwD77zduOh9dXEJuR9v5nL2GYYvewZ7V1ei3nnLGBbCMkkoCIsgfQjdR1EUqKtDZWuLoq+hl5cXQ5OW4jq0fiZXTVkZus2fUrB9B4rBgPqG66mrqcHW0VECwQpIKAiLIH0I3ePiiV\/IXvsB7teMwmfqbXiOvw7PCeONC9iU\/3ScI48\/RZ1ej3rCeHxnxtNrwAATVy06k4SCsAjSh9C1qgoKOLPuQ85\/l4F9377YT5wAgMrGhtqKCirz8nEZHEyfwAC8brgeza03G08jCesioSAsgvQhdJ38L7Zy+r1UVLa2aGfOwGf6NOycnai9dIm8z74gL\/0z7Ho7E\/X2G9jY2xOQeI+pSxZdSEJBWAzpQ+g8hupqFIMBO2dnnAcOrD8VNGcWjh7uGCoryf34E3SfplNbUYF7zDX43T5L1jPoISQUhNWQPoaWKXV1FH3zLWfWb8Bj9DUE3LuAvsND6Ts81PicC4cOc2bdetyio+oXwQkKNGHFortJKAirIH0MLSvbf4DstR9w6XQ2vQMDcY+5BoC6mhoKvvwKpa4On6m34TYqmhGvvEifgEEmrliYgoSCsArSx3B1OZs2c\/b\/PsRRrWbwg\/fT\/w\/XohgM5G\/bTu6mzdQUl+A2KhrvKbeiUqkkEHowCQVhFaSPobHq88UoBgO9vNT0\/8NYbBzs0dx8Ezb29pTtP8Avq9+kurAIl6FDCL7\/b\/QLDzN1ycIMSCgIqyB9DPUUg4EDD\/2dS6dOA+AxJoahSUtx0mjwvvUWDFVV2NjbY+fign3ffgQuWki\/kRHGPgQhbExdgBCd4eHJQ3Cybzg7pqf1MVw4cpTv42YaA6FfxAj8776r\/uLytzvJ+uv9nEpZA0CfwADCVzyPW+RICQTRgBwpCKvQk\/sYFIOBC4cOc+TJZ4xj4S8up09gAMW7dnPs2WVcPpuD80C\/BrevljAQTZFQEFajp\/Ux1FZc4sCDD1NVcA6AkMf+QV1VFR7XjkWlUpGz8WPOrt+Ak9aHwQ8tof+1Y1DZyMkBcXUSCsKsSK9B6+Rt+ZzTa943Ph784P24RUVSti+LSydP0ScoEPXECTiqPfH84x+k8Uy0moSCMBvSa9Cyc\/\/6N7+89kaDseh336ZSp+PQ3x\/l4vHj9B\/3R4Y8eD+OHh6ox19nokqFpZJQEGZDeg2ap794kez31lL49TfGsaD\/WYSTVsvPr6yi\/MhRHDw8CFy0EPWvN7MToj0kFITZkF6DxhRF4YcZs1FqawGwcXBg8JL7cR99DSqVitzNn1KZl09A4gK8JsViY29v4oqFpZNQEGZDeg0aqszL46flLxoDAcB\/\/l2c++pf1NXU4HndH9HcejOaW2+WxW1Ep5GpCMJsSK9BPUNlJdkf\/B\/7Fv2Vy9lngPomNLeokZx6K4WLP\/9MnV4PIKudiU4nRwrCbPTkXoPfqvjlJLrNn2Lb2xmHfv1w0vpQ\/MNubHv3xi9hDppbb8bO2dnUZQor1WIo5OTkMHfuXAoKCrCxsSExMZHFixdTUlLCrFmzyM7Oxt\/fn40bN+Lm5sZPP\/3E3Xffzb59+3juued46KGHjK+1fft2Fi9ejMFg4J577iEpKalLP5ywPD2t1+CKsv0HqMzLx3D5MtjYEPJoEn3DhmPTqxfFP+zCeeBAfKZOwa5Pb1OXKqycSlEU5WpPyM\/PJz8\/n8jISC5evEhUVBRpaWmsXbsWd3d3kpKSSE5OprS0lOXLl1NYWMiZM2dIS0vDzc3NGAoGg4HBgwfz1VdfodVqGTVqFBs2bGDYsGFXLTA6OprMzMzO+8RCmJGqwkL23ruo8Q9sbBh4x+1o46e3+TWl10NA+787W7ymoNFoiIyMBMDFxYWQkBB0Oh3p6enMmzcPgHnz5pGWlgaAWq1m1KhR2P9uFsSePXsICgoiICAABwcHZs+eTXp6epsLFsJaHFz6SJOBYOPggPdtt6CeeH2bX\/NKr4eurBKF\/\/Z6pGXpOqFi0RO06ZpCdnY2WVlZxMTEcO7cOTQaDVAfHIWFhVfdVqfT4evra3ys1WrZvXt3O0oWwrIZqqvZNfP2Jn+mueVmtDPicHB3a9drS6+H6KhWh0JFRQXx8fGsXLkSV1fXNr9RU2epmrshV0pKCikpKQAUFRW1+b2EMFelWfv5+eVVxsdhy5fh4OZGnb4GW8deOHr279DrS6+H6KhWhYJeryc+Pp6EhATi4uIA8PLyIj8\/H41GQ35+Pmq1+qqvodVqycnJMT7Ozc3F29u7yecmJiaSmJgI1J8XE8LSVZ07x97EPzceLyjAdWjnTbmVXg\/RUS1eU1AUhQULFhASEsKSJUuM41OmTCE1NRWA1NRUpk6detXXGTVqFCdOnOD06dPU1NTw0UcfMWXKlA6WL4T52\/c\/ixsFQu9Bg4h86\/VOvzeR9HqIjmrxSCEjI4N169YRFhZGREQEAMuWLSMpKYmZM2eyZs0a\/Pz82LRpEwAFBQVER0dTXl6OjY0NK1eu5OjRo7i6uvL6668zefJkDAYD8+fPJzQ0tGs\/nRAm1NzRwcjXXsHZz69L3lN6PURHtTgl1dRkSqqwROe\/\/4Hjy180Pg76n0X0DRtOrwEDTFiV6Ena+90pHc1CdJK6mhp++NOcRuMjV6\/CWattMCa9BMJcyb2PhOgEFadONwoER8\/+XPPBe00GgvQSCHMlRwpCdEBzRwfDHn8Ut6jIJreRXgJhziQUhGgHRVHQbf6UM+vWNxj3vG4cgYsSsXVqfgqo9BIIcyahIEQbVZ0rZG9iw9tTDJx3J9q4aa3aXnoJhDmTawpCtEH9NNOGgeCXMKfVgQDSSyDMmxwpCNEKVecKOZXyLqWZexuMNzWzqCXSSyDMmYSCEFeh1NWRt+Vzst9PbTDud\/tstH+KR2XTvoPtnrpuhDB\/EgqiQ6x5vv357zI4vuLlBmNesTcwaMFdV72QLIQlk1AQ7XZlvv2V6ZVX5tsDFh0MzU0zvWbdWuxdXUxQkRDdRy40i3a72nx7S1WSubfJQIhZnyqBIHoEOVIQ7WZN8+3r9Hp+mDG70XjwA4tRjx9ngoqEMA05UhDt1ty8ekubb3\/57NlGgdA7YBCjN34ogSB6HDlSEO328OQhDa4pgGXNt6\/T69n3579R\/bulZKPXpODY38NEVQlhWhIKot0seb59ZX4B++77S4MxZ\/+BRLy8ApWtbTNbCWH9JBREh1jafPs6vZ5dsxJQDA0vkA9NWorHmBgTVSWE+ZBQEGatM\/sgyg4e4shjTzYaH\/vJRjk6EOJXEgrCbHVWH0SdXs\/Jt1Io\/NfXDcbDkp\/DNWRo5xUshBWQUBBmqzPWHdBfuMCeufMbjPUJDiJ8RTIqlarTahXCWkgoCLPVkT6I6qLzZN6zsNF40F\/\/jNcNEztcmxDWSkJBmK32rjtw6NHHKT98pNH46H+ux7ZXr06rTwhrJM1rwmy1dd2BmrILZEyNbxQI4S88z7XpmyUQhGgFOVIQZqstfRAH\/\/4PLv7U8J5L\/SJGMPjB+7F3de2WeoWwBhIKwqy11AfR3D2Lhix9kP7Xju3K0oSwShIKwmKdfj+VvLQtjcYj31qNk2aACSpqH2tek0JYHgkFYXEUReH7aTMajQ9+8AE8x\/3BBBW1n7WuSSEsl1xoFhalePePTQZCVMqbFhcIYJ1rUgjLJkcKwmLsmn0HhsqGU1S1M+LwnT0TG3t7E1XVMda0JoWwDhIKwuxVFRSwd+FfGo2HPPYP3KOjTFBR52lvL4YQXUVOHwmzdurd9xsFgsvQIcRsWGfxgQBt78UQoqvJkYIwS4bqanbNvL3RePS7b+Po2d8EFXUNS16TQlinFkMhJyeHuXPnUlBQgI2NDYmJiSxevJiSkhJmzZpFdnY2\/v7+bNy4ETc3NxRFYfHixWzduhVnZ2fWrl1LZGQkALa2toSFhQHg5+fHli2NpxMKkffZ55x+9\/0GY04+3oQ+8ySOHta3IpqlrUkhrFuLoWBnZ8dLL71EZGQkFy9eJCoqitjYWNauXcvEiRNJSkoiOTmZ5ORkli9fzrZt2zhx4gQnTpxg9+7dLFq0iN27dwPg5OTE\/v37u\/xDCcuTlqVjxfafeGHXG41+Nuie+WhuuQmVjZztFKKrtfivTKPRGH\/Td3FxISQkBJ1OR3p6OvPmzQNg3rx5pKWlAZCens7cuXNRqVSMHj2asrIy8vPzu\/AjCEuXlqXj+X\/ubjIQIl59Be\/bbpFAEKKbtOlfWnZ2NllZWcTExHDu3Dk0Gg1QHxyFvy5+rtPp8PX1NW6j1WrR6XQAVFVVER0dzejRo40hIsSWj3bw8rH1DcZe1N7A0tF\/pvdAPxNVJUTP1OoLzRUVFcTHx7Ny5Upcr3KDMUVRGo1dWczk7NmzeHt7c+rUKa6\/\/nrCwsIIDAxs9PyUlBRSUlIAKCoqam2JwsIoisKhvz\/KguMNG7X+J2gWpfa9UV2oMlFlQvRcrTpS0Ov1xMfHk5CQQFxcHABeXl7G00L5+fmo1Wqg\/sggJyfHuG1ubi7e3t4Axv8GBAQwfvx4srKymny\/xMREMjMzyczMxNPTs50fTZiz6uJivp82g4u\/CYQ9Lv7cM\/gOSu17AzJXXwhTaDEUFEVhwYIFhISEsGTJEuP4lClTSE1NBSA1NZWpU6caxz\/44AMURWHXrl307dsXjUZDaWkp1dXVAJw\/f56MjAyGDRvWFZ9JmLmfXniJzPmJDcbe9rueVdrrqbR1AGSuvhCm0uLpo4yMDNatW0dYWBgREREALFu2jKSkJGbOnMmaNWvw8\/Nj06ZNANx8881s3bqVoKAgnJ2def\/9+qmFx44dY+HChdjY2FBXV0dSUpKEQg\/TVO+Bys6OqLffoCinipMyV18Ik1MpTV0EMCPR0dFkZmaaugzRQReOHOXwPx5rMDbytZU4+\/k2s4XpyS2thSVr73endDSLLqUoCll\/+RuVurwG4yNeXmH2gSC3tBY9kUz+Fl2mMi+P76fNaBAI6usnMObjj+gTGGDCylomt7QWPZUcKYgucSrlXfK\/2NZgbMjfH6L\/2DEmqqht5JbWoqeSUBCdSjEYyFq8hMqcXONYwMJ78YqdaFFrHsgtrUVPJaePRKcp3v0j38fNbBAI4S8uR3PzjRYVCCC3tBY9lxwpiE6RMTW+0VhUypv08lKboJqOk1tai55KQkF0SG1FBbsT5jUY85p0A4GLFlr8TezkltaiJ5JQ6KE6aw7+\/gcebvA49Okn6DcivLPKFEJ0MwmFHqgz5uBXFRRw6t33qf717rjBD\/wNz+vGGW9+KISwTJZ9fC\/apaNz8Iu+3cnehX+h9Mf6bsmBc+9APf46CQQhrIAcKfRA7Z2DrygK30+b0WDsmnVrsXd16bTahBCmJUcKPVBzc+2vNgffUFXVIBCctFquTd8sgSCElZFQ6IHaOge\/ZM+P7JqVYHwc\/uJyIlev6tIahRCmIaePeqC2zME\/9vwLlOzaDcDAOxPQzojr1lqFEN1LQqGHamkOflVhIXvvXWR8PHDuHWjjp3dHaUIIE5JQEI0UfLmDk2+8bXw8cvWrOGuliaslsv6CsAYSCsKoTq\/n9Jq1FGzbbhwb8\/FHFnffIlOQ9ReEtZALzQKA8qPH+GHGbGMgDLwzgbFpH0sgtJKsvyCshRwp9HCKopD9fip56Z8BYN+vHyNefgFHDw8TV2ZZZP0FYS0kFHqwutpafoifZXzsOX4cgx9YbMKKLJesvyCshZw+6sGOr3jZ+Oc+g4MJWJhowmosm6y\/IKyFHCn0QIqioC8royxrPwDamTPwmzPL4m91bUqy\/oKwFhIKPYhiMJC7+VNqiotx9vMFYMjSB+l\/7VgTV2YdZP0FYQ0kFHqI6uISTryyiguHDtN\/3B\/wmjwJt+goenl5tfs1yu57EQAAEnVJREFUZV6+ENZHQqEHKNt\/gOMvvkztxQoABibMwcbOrsOBIPPyhbA+chLZytVevsyRp541BoLXpBtw6ITppjIvXwjrJEcKVkoxGMDGBv2FC1BXB0BA4j0MuPnGTlkMR+blC2GdJBSsUO2lSxxf8TLuo6K4nJOLnUsfhix9iH7hYZ32HjIvXwjrJKePrExVQQEHl\/6Dsqz9qOwd8L97HiNeWtGpgQAyL18IayVHClbkwpGjHHtmGYbK+t\/g+\/\/hWmwdHbH1Unf6e8m8fCGsk4SClaguLubwPx4zPtbOnIFtL8cufU+Zly+E9Wnx9FFOTg4TJkwgJCSE0NBQVq2qX4axpKSE2NhYgoODiY2NpbS0FKjvlv3b3\/5GUFAQ4eHh7Nu3z\/haqampBAcHExwcTGpqahd9pJ5JX3bB+OchSx9kYMIci+xQTsvScW3y1wxK+oJrk78mLUtn6pKE6FFa\/Naws7PjpZde4tixY+zatYvVq1dz9OhRkpOTmThxIidOnGDixIkkJycDsG3bNk6cOMGJEydISUlh0aL61btKSkp46qmn2L17N3v27OGpp54yBoloH0NlJT8tf5GyAwc5\/d5aHPr3Z8QrKyy2Q\/lK74OurBKF\/\/Y+SDAI0X1aDAWNRkNkZCQALi4uhISEoNPpSE9PZ968eQDMmzePtLQ0ANLT05k7dy4qlYrRo0dTVlZGfn4+X375JbGxsbi7u+Pm5kZsbCzbt29v9n3F1VUXnedg0qMUf\/8DVQUFDF5yPyNeWk6fgABTl9Zu0vsghOm16ZpCdnY2WVlZxMTEcO7cOTQaDVAfHIWFhQDodDp8fX2N22i1WnQ6XbPjTUlJSSElJQWAoqKitn2iHuDi8Z85\/NiT1FVXg40NXrE3WOSpot+T3gchTK\/V3yQVFRXEx8ezcuVKXF1dm32eoiiNxlQqVbPjTUlMTCQzM5PMzEw8PT1bW2KPcOnMWQ4ufaQ+EICAe+ZDJzSjmYPmehyk90GI7tOqUNDr9cTHx5OQkEBcXBwAXl5e5OfnA5Cfn49aXT\/tUavVkpOTY9w2NzcXb2\/vZsdF2+jLyox\/Dn3mSTS33NQpHcrmQHofhDC9FkNBURQWLFhASEgIS5YsMY5PmTLFOIMoNTWVqVOnGsc\/+OADFEVh165d9O3bF41Gw+TJk9mxYwelpaWUlpayY8cOJk+e3EUfy7oYqqv55Y23uHw2hxOvrsbZz5eot1d3ekOaqU0b6cPzcWH49HNCBfj0c+L5uDCZ9ipEN2rxmkJGRgbr1q0jLCyMiIgIAJYtW0ZSUhIzZ85kzZo1+Pn5sWnTJgBuvvlmtm7dSlBQEM7Ozrz\/\/vsAuLu789hjjzFq1CgAHn\/8cdzd3bvqc1mNmpJSjj79HJdOn8ZlcDChTzyKQ39P7Jyt85SK9D4IYVoqpamT\/WYkOjqazMxMU5dhEhWnTnHw4UdQamtx8vEm8o3XTF2SxZC1HkRP197vTuloNlMXj\/\/MwaWPGB\/7zp5lwmosi6z1IET7Wf48RitV+et0XZWtLSNeXoHnuD+YuCLLIf0OQrSfhIIZqdPrObN+A5dzdZx8MwWXoUOIfi+FPoGW25BmCtLvIET7yekjM6G\/cIGjzz5Pxc8ncPbVEvr0E\/QJCsTG3t7UpVkcWetBiPaTIwUzcPnsWfbMnU\/FzydwGxWF57g\/4hoyVAKhnaTfQYj2kyMFE7tw+AiHH33c+Nj71ltMWI11kLUehGg\/CQUTUhSF0r31txa3dXJixCsrcPr1flKiY6TfQYj2kVAwgbraWgr\/9TXOA\/3QfZKG26hoBi9ZjJ2zs6lLaxfpCRDCekgodLPaigqOPf8C5YePMOzxRxn2+KP0GxlhsXc5lZ4AIayLhEI3qszLY9+ivwIw4KYbcYuKNHFFHXe1ngAJBSEsj2X+emqBLhw+YgwEAK\/YiSaspvNIT4AQ1kVCoRsodXXk\/LP+hoH2bv0YtfZdq2lIkzUQhLAuEgpdSDEYKN27j8L\/fMOFg4dQXz+B6HfewsHNzdSldRrpCRDCusg1hS5Se\/kyP7\/4MqV7swh\/4XmGJj2M++gYq1kQ5wrpCRDCukgodIGqc4XsTVwEgHbmDFyGDDZxRV1LegKEsB5WGwqmmjtffuwnDiU9anzsNXFCl7+nEEJ0FqsMBVPNna\/T6zn8v08A0Mtbw4iXXrDYhjQhRM9klReau\/t++kpdHZeys8n5aCNKbS2a224l8vVVEghCCItjlUcK3Tl33lBVxYmVr1K6N4uw5cvoExSEx5iYTn8fIYToDlYZCt11P\/3q4mIy5ycCMPDOBHoP8qdPwKBOfQ8hhOhOVnn6qDvmzl888YsxEAC8Jt1gddNNhRA9j1UeKXT13HlDZSUHH\/o7AH2CAglLfk4WxBFCWAWrDAXomrnziqKgLy3j1DtrgPoeBL\/bZ8sRghDCalhtKHS2upoaTrz2BuVHjjL07w\/hNekG3EZGmLqsFslaB0KItpBQaIWasjJ+nLcAAL87bqfP4GCLODqQtQ6EEG1llReaO1PFLyeNgQDgM\/U2iwgE6P5+DSGE5ZNQuAr9hQsceHApAP0iRjD2k43YODiYuKrWk7UOhBBtJaePmqAoCnVVVRx54hkABs67E23cNBNX1Xbd1a8hhLAeEgq\/U6fXc\/Ktd6jMycXvjjnY9+2LS3CQqctql4cnD2lwTQFkrQMhxNVJKPyGvrycPXfeDdRPN3WLHInKxnLPsMlaB0KItmoxFObPn8\/nn3+OWq3m8OHDABw4cID77ruPiooK\/P39Wb9+Pa6urtTU1LBw4UIyMzOxsbFh1apVjB8\/HoDx48eTn5+Pk1P9qYsdO3agVqu77pO1UcUvJ43XD1T29lbTfyBrHQgh2qLFX4Pvuusutm\/f3mDsnnvuITk5mUOHDjF9+nRWrFgBwDvvvAPAoUOH+Oqrr3jwwQepq6szbrd+\/Xr279\/P\/v37zSoQqs4VGgPB49oxjNm0wSoCoadKy9JxbfLXDEr6gmuTvyYtS2fqkoSwGC2Gwrhx43B3d28wdvz4ccaNGwdAbGwsmzdvBuDo0aNMnDgRALVaTb9+\/cjMzOzsmjtVbcUlDi59BIDAPy9k6NKHJBAs2JXeDF1ZJQr\/7c2QYBCiddp1wnz48OFs2bIFgE2bNpGTkwPAiBEjSE9Pp7a2ltOnT7N3717jzwDuvvtuIiIieOaZZ1AUpRPKbz\/FYODk2+9wes37DJybQOQbrzFg8iST1iQ6TnozhOiYdoXCe++9x+rVq4mKiuLixYs4\/Dp3f\/78+Wi1WqKjo7n\/\/vsZO3Ysdnb1ly3Wr1\/PoUOH2LlzJzt37mTdunXNvn5KSgrR0dFER0dTVFTUnhKvSl9ezvdxMynYuh07VxfUE8bj5OPd6e8jup\/0ZgjRMe0KhaFDh7Jjxw727t3LnDlzCAwMBMDOzo5XXnmF\/fv3k56eTllZGcHBwQD4+NRf7HRxceH2229nz549zb5+YmIimZmZZGZm4unp2Z4Sm3Xx+M\/GGUaOnv0ZdPc8i55hJBpqrgdDejOEaJ12fRsWFhYCUFdXx7PPPst9990HwOXLl7l06RIAX331FXZ2dgwbNoza2lrOnz8PgF6v5\/PPP2f48OGdUX+bVJw8Zbx+4BV7A9Hvvt3tNYiu1R1raQhhzVqckjpnzhy++eYbzp8\/j1ar5amnnqKiooLVq1cDEBcXx9131\/\/mXVhYyOTJk7GxscHHx8d4iqi6uprJkyej1+sxGAzccMMN3HvvvV34sRqrzMvj0D8eA2DwkvvxvO6P3fr+ontIb4YQHaNSTH3FtwXR0dEdmsGkGAyc+b8PcXBzw1Bdjfr6CTh6uLe8oRBCWLD2fndadUfzb295rbnlJgIS7zFxRUIIYd6s+grrlUDoHRgogSCEEK1g1UcKA+9MoK62Fr\/ZM01dihBCWASrDgXtjDhTlyCEEBbFqk8fCSGEaBsJBSGEEEYSCkIIIYwkFIQQQhhJKAghhDCSUBBCCGEkoSCEEMJIQkEIIYSR2d8Qr3\/\/\/vj7+zf786Kiok5fc6E7SN3dy1LrBsutXeruXr+vOzs727hkQVuYfSi0pKN3UTUVqbt7WWrdYLm1S93dq7PqltNHQgghjCQUhBBCGNk++eSTT5q6iI6KiooydQntInV3L0utGyy3dqm7e3VG3RZ\/TUEIIUTnkdNHQgghjMwyFHJycpgwYQIhISGEhoayatUqAB577DHCw8OJiIhg0qRJ5OXlNbm9ra0tERERREREMGXKlO4svdnar3jxxRdRqVTNThVLTU0lODiY4OBgUlNTu6NkoON1m2qfN1f3k08+iY+Pj7GmrVu3Nrn99u3bGTJkCEFBQSQnJ1tM3f7+\/oSFhREREUF0dHS31Q1X\/7vy2muvMWTIEEJDQ1m6dGmT25vbPofW1W2qfd5c3bNmzTL+PfH39yciIqLJ7du8vxUzlJeXp+zdu1dRFEUpLy9XgoODlSNHjigXLlwwPmfVqlXKwoULm9y+d+\/e3VJnU5qrXVEU5ezZs8qkSZMUPz8\/paioqNG2xcXFyqBBg5Ti4mKlpKREGTRokFJSUmL2dSuK6fZ5c3U\/8cQTyooVK666bW1trRIQEKCcPHlSqa6uVsLDw42fuat1pG5FUZSBAwc2+\/+iqzVX+9dff61MnDhRqaqqUhRFUc6dO9doW3Pc562pW1FMt8+v9m\/ziiVLlihPPfVUo23bs7\/N8khBo9EQGRkJgIuLCyEhIeh0OlxdXY3PuXTpEiqVylQlNqu52gEeeOABXnjhhWbr\/vLLL4mNjcXd3R03NzdiY2PZvn272ddtSleruyV79uwhKCiIgIAAHBwcmD17Nunp6V1ZrlFH6ja15mp\/8803SUpKwtHREQC1Wt1oW3Pc562p25Ra+ruiKAobN25kzpw5jbZtz\/42y1D4rezsbLKysoiJiQHg0UcfxdfXl\/Xr1\/P00083uU1VVRXR0dGMHj2atLS07iy3gd\/WvmXLFnx8fBgxYkSzz9fpdPj6+hofa7Vak3xRtLVuMI99\/vu\/K6+\/\/jrh4eHMnz+f0tLSRs83x\/0NLdcNoFKpmDRpElFRUaSkpHRnuQ38tvaff\/6ZnTt3EhMTw3XXXcePP\/7Y6PnmuM9bUzeYxz7\/\/d8VgJ07d+Ll5UVwcHCj57dnf5t1KFRUVBAfH8\/KlSuNRwnPPfccOTk5JCQk8Prrrze53dmzZ8nMzOTDDz\/k\/vvv5+TJk91ZNtCwdjs7O5577rlmQ+wKpYmJYN3923l76gbT7\/Pf\/11ZtGgRJ0+eZP\/+\/Wg0Gh588MFG25jb\/m5t3QAZGRns27ePbdu2sXr1ar799tturRsa115bW0tpaSm7du1ixYoVzJw5s9E+Nsd93pq6wfT7vKnvQ4ANGzY0eZQA7dvfZhsKer2e+Ph4EhISiIuLa\/Tz22+\/nc2bNze5rbe3NwABAQGMHz+erKysLq31935f+8mTJzl9+jQjRozA39+f3NxcIiMjKSgoaLCdVqslJyfH+Dg3N9f4Wcy5bjDtPm\/q74qXlxe2trbY2Nhw7733smfPnkbbmdv+bm3d8N\/9rVarmT59erPP6ypN1a7VaomLi0OlUnHNNddgY2PTaGKCOe7z1tQNpt3nzX0f1tbW8sknnzBr1qwmt2vX\/u6E6yCdrq6uTrnzzjuVxYsXNxj\/+eefjX9+9dVXlfj4+EbblpSUGC8YFRUVKUFBQd12IUtRmq\/9t5q7YFVcXKz4+\/srJSUlSklJieLv768UFxd3ZblGHanblPu8ubrz8vKMf3755ZeVWbNmNdpWr9crgwYNUk6dOmW8CHf48OEur1lROlZ3RUWFUl5ebvzzmDFjlG3btnVtwb\/RXO1vvvmm8thjjymKoijHjx9XtFqtUldX1+A55rjPW1O3Kff51f5tbtu2TRk3blyz27Znf5tlKOzcuVMBlLCwMGXEiBHKiBEjlC+++EKJi4tTQkNDlbCwMOXWW29VcnNzFUVRlB9\/\/FFZsGCBoiiKkpGRoQwfPlwJDw9Xhg8frrz77rtmUftv\/fbL9be1K4qirFmzRgkMDFQCAwOV9957zyLqNuU+b67uO+64Qxk+fLgSFham3HbbbcYvW51Op9x0003G7b\/44gslODhYCQgIUJ599lmLqPvkyZNKeHi4Eh4ergwbNqxb675a7dXV1UpCQoISGhqqjBw5Uvn3v\/\/dqHZFMb993pq6TbnPr\/Zvc968ecqbb77Z4Pkd3d\/S0SyEEMLIbK8pCCGE6H4SCkIIIYwkFIQQQhhJKAghhDCSUBBCCGEkoSCEEMJIQkEIIYSRhIIQQgij\/w8zBz0w44Xm4wAAAABJRU5ErkJggg==)","1013f5af":"Plotting the yearly average temperature and comparing it with predicted value of 2020 and mean of last 25 years","1fa03589":"Now we split the training data set further into train and test for prediction purposes","3a234d57":"For a better understanding, the temperature is converted to Celsius using the following function:","7e9507d5":"Using a box plot to show the variation in monthly temperature ","7fb06afa":"Importing essential Libraries","b56594bf":"As our training and test data set have some overlapping values, we slice the training datset such that it has the data from 1995-2019 (25 years).","6c36d661":"On scanning the data, we find some ambiguous values such as -99 F or 72.8 degree Celsius. As we know, it is not possible to have such a temperature, we consider this as missing data and handle it similarly.","ebae9dfa":"In the above graph, the red line shows the actual values and blue depicts the predicted ones","1f03a952":"The training dataset consists of Temperature in Delhi in Farenheit from 1st January 1995 to 12th May 2020. The 4 columns are Date, Month, Year and Temperature. The dependent variable is Temperature. ","ec8e26b0":"To analyse the accuracy of predictions we compare the Predicted v\/s actual temperature values for 1-1-20 to 12-05-20"}}