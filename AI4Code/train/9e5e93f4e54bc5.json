{"cell_type":{"8d33ea2a":"code","e0d181ce":"code","04f4481d":"code","741d5d29":"code","27eb2680":"code","e2a9478c":"code","ddef57bb":"code","3ddc1d95":"code","32f1d8a6":"code","42c2a377":"code","527a9cf9":"code","9e3cb551":"code","41a2c606":"code","a6e31b92":"code","041dd999":"code","f98d0561":"code","d4b0fb1a":"code","df5a83aa":"code","8df8cc62":"code","e4bc37fb":"code","8718d084":"code","9dd8840d":"code","dbbb24dc":"code","3687db09":"code","f5988f9a":"code","2e4d0c18":"code","327e0fff":"code","f35ee105":"code","a2b51f56":"code","0e34784c":"code","9fd45f9e":"code","a36315ce":"code","a3b70822":"code","7eae333b":"code","2cb35c07":"code","198f64f7":"code","06887e3b":"code","6e0e3084":"code","aa7a03fc":"code","f6bf88a9":"code","84cee9a1":"code","a85a4192":"code","d335fdcb":"code","f2c6ef1d":"code","7840f927":"code","66010c2d":"code","a1ea480d":"code","d4530e20":"code","16bfc53e":"code","fb413a0e":"code","0df81f53":"code","b0f0bd04":"code","2cbc6988":"code","c14f316e":"code","b9e7cd08":"code","f8c5e5d7":"code","56a36688":"markdown","e580948d":"markdown","14c6ae02":"markdown","59368d6f":"markdown","6be5b1ad":"markdown","510d4bf3":"markdown"},"source":{"8d33ea2a":"#importing Statements\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n%matplotlib inline\n    \nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split,GridSearchCV,RandomizedSearchCV\nfrom sklearn.linear_model import LinearRegression \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Lasso\nfrom sklearn.svm import SVR\nimport plotly.express as px\nimport plotly.graph_objs as go\n","e0d181ce":"df = pd.read_csv('..\/input\/directors\/directors1.csv')\ntm = pd.read_csv('..\/input\/directors\/directors1.csv')\n\ndf_1=df\n\ndf.head()","04f4481d":"df.info()","741d5d29":"df.isnull().sum()","27eb2680":"df.columns","e2a9478c":"#clening name\ndf.NAME.value_counts()","ddef57bb":"df1 = pd.get_dummies(df['NAME'] , drop_first=True)\ndf1.head()","3ddc1d95":"df.shape","32f1d8a6":"df.drop('NAME' , axis=1 , inplace=True)\ndf.head()","42c2a377":"df = pd.concat([df1,df] , axis=1)\ndf.head()","527a9cf9":"df['TYPE'].value_counts()","9e3cb551":"df1 = pd.get_dummies(df['TYPE'])\ndf1.head()","41a2c606":"df1.drop('SHORT FILM' , axis=1 , inplace=True)\ndf1.head()","a6e31b92":"df.drop('TYPE' ,  axis=1 , inplace=True)\ndf.head()","041dd999":"df = pd.concat([df1,df] , axis=1)\ndf.head()","f98d0561":"df['GENRE'].value_counts()","d4b0fb1a":"df1 = pd.get_dummies(df['GENRE'] , drop_first=True)\ndf1.head()","df5a83aa":"df.drop('GENRE' , axis=True , inplace=True)\ndf.head()","8df8cc62":"df = pd.concat( [df,df1] ,axis=1)\ndf.head()","e4bc37fb":"df.info()","8718d084":"df.drop('MOVIE TITLE' ,axis=1 , inplace=True)\ndf.info()","9dd8840d":"df_2=df_1.head(50)\n","dbbb24dc":"\nfig = px.sunburst(df_2, path=['YEAR OF MOVIE RELEASED','MOVIE TITLE','RATING'],\n                   values='RATING',\n                   title='MOVIE RATING')\nfig.show()","3687db09":"fig = px.sunburst(df_1, path=['YEAR OF MOVIE RELEASED','MOVIE TITLE','RATING'],\n                   values='RATING',\n                   title='MOVIE RATING')\nfig.show()","f5988f9a":"fig , ax = plt.subplots(figsize=(20,20))\nax = df.corr()['REACH'].plot.bar()\nax.set_xlabel('success')\nax.set_ylabel('Directors')\nax.set_title(\"correlated\")","2e4d0c18":"\nn = tm.drop_duplicates(['NAME'])\nna = n['NAME']\nyr = n['YEAR OF EXPERIENCE']\n#na,yr\nfig , ax = plt.subplots(figsize=(20,20))\nax = plt.bar(na,yr)\nplt.xticks(rotation ='vertical');\n#plt.set(xlabel=\"exp\", ylabel=\"Directors\")\n\n    ","327e0fff":"plt.bar(tm['GENRE'],tm['RATING'])\nplt.xticks(rotation ='vertical');\nplt.ylim(0,10);\nplt.title(\"Overall Rating of GENERE\")\nplt.xlabel(\"GENERE\")\nplt.ylabel(\"RATING\")","f35ee105":"tm[tm['RATING'] > 9.0]","a2b51f56":"plt.scatter(tm['YEAR OF EXPERIENCE'] , tm['RATING']);","0e34784c":"plt.bar(tm['YEAR OF EXPERIENCE'] , tm['RATING']);","9fd45f9e":"tm.GENRE.value_counts()","a36315ce":"def calcrating(name,ty):\n    t=tm[tm.NAME==name]\n    t1=t[t['GENRE'] == ty]\n    return t1['RATING'].mean()","a3b70822":"calcrating('S.J.SURYAH' , 'ROMANTIC'),set(tm['GENRE'])","7eae333b":"plt.figure(figsize=(20,20));\nplt.scatter(tm['RATING'] , tm['REACH'])\nplt.xlabel(\"RATING\")\nplt.ylabel(\"REACH\")\nplt.title(\"RATE AND REACH GRAPH\");\nplt.xlim(0,10)\nplt.ylim(10,100);\n\n","2cb35c07":"plt.figure(figsize=(20,20));\nplt.scatter( tm['YEAR OF MOVIE RELEASED'],tm['RATING'])\nplt.ylabel(\"RATING\")\nplt.xlabel(\"YEAR OF MOVIE RELEASED\")\nplt.title(\"RATE AND YEAR OF MOVIE RELEASED GRAPH\");\n#plt.ylim(1970,2020)\n#plt.xlim(10,100);","198f64f7":"#plt.figure(figsize=(10,10));\nplt.hist( tm['YEAR OF EXPERIENCE'] , bins= 7)\nplt.xlabel(\"experience\")\nplt.ylabel(\"reach\")\nplt.title(\"hist FOR YEAR OF EXPERIENC\");","06887e3b":"df.info()","6e0e3084":"df.describe()","aa7a03fc":"x = df.drop('REACH' , axis=1)\ny = df['REACH']","f6bf88a9":"xtr, xte , ytr ,yte = train_test_split(x,y,test_size=0.3)","84cee9a1":"mdl = {\n    'Linear':LinearRegression(),\n    'RandomForest':RandomForestRegressor(),\n    'Lasso':Lasso(),\n    'SVR':SVR()\n}","a85a4192":"ac = {}\ndef fit_and_acuracy(mdl , xtr , xte , ytr ,yte):\n    \n    for name,value in mdl.items():\n        value.fit(xtr,ytr)\n        ac[name] = value.score(xte,yte)*100\n     \n    return ac","d335fdcb":"fit_and_acuracy(mdl,xtr, xte , ytr ,yte)","f2c6ef1d":"x=[]\ny=[]\nfor ge , ty in ac.items():\n    \n    x.append(ge)\n    \n    y.append(ty)\n   \n    \nplt.bar(x,y)\nplt.xticks(rotation ='vertical')\nplt.xlabel(\"MODEL\")\nplt.ylabel(\"SCORE\")\nplt.title(\"SCORING OF MODEL\")\nplt.ylim(-100,100);\nplt.show()","7840f927":"m0 = RandomForestRegressor()\nm0.fit(xtr,ytr)\nplt.figure(figsize=(10,10))\nplt.scatter(xtr['RATING'],ytr)\nplt.plot(xtr['RATING'],m0.predict(xtr) , color='red')\nplt.xlabel('RATING')\nplt.ylabel('REACH')\nplt.title('RandomForestRegressor');\nplt.show()","66010c2d":"m1 = Lasso()\nm1.fit(xtr,ytr)\nplt.figure(figsize=(10,10))\nplt.scatter(xtr['RATING'],ytr)\nplt.plot(xtr['RATING'],m1.predict(xtr),color='red')\nplt.xlabel('RATING')\nplt.ylabel('REACH')\nplt.title('Lasso');\nplt.show()","a1ea480d":"print(df.head())","d4530e20":"m0.predict(xte)","16bfc53e":"m1.predict(xte)","fb413a0e":"tm.head()\nact = set(tm['NAME'])","0df81f53":"dic = {}\nfor i in act:\n    t = tm[tm['NAME'] == i ]\n    dic[i] = t['REACH'].mean()","b0f0bd04":"dic\nx1=list()\ny1=list()\nfor ge , ty in dic.items():\n    \n    x1.append(ge)\n    y1.append(ty)\n\n","2cbc6988":"data = go.Bar(x=x1,y=y1)\nfig = go.Figure(data=data)\nfig = go.Figure(data=data)\nfig.update_layout(\n    title=\"Reach  Director\",\n    xaxis_title=\"Director\",\n    yaxis_title=\"Reach\"\n    \n    \n)\nfig.show()","c14f316e":"dic = {}\nfor i in act:\n    t = tm[tm['NAME'] == i ]\n    t = t[t['GENRE'] =='ACTION']\n    dic[i] = t['REACH'].mean()\ndic\nx1=list()\ny1=list()\nfor ge , ty in dic.items():\n    \n    x1.append(ge)\n    y1.append(ty)\n    \n    \ndata = go.Bar(x=x1,y=y1,)\nfig = go.Figure(data=data)\nfig.update_layout(\n    title=\"Reach of ACTION Movie Director\",\n    xaxis_title=\"Director\",\n    yaxis_title=\"Reach\"\n    \n    \n)\nfig.show()\n","b9e7cd08":"dic = {}\nfor i in act:\n    t = tm[tm['NAME'] == i ]\n    t = t[t['GENRE'] =='ROMANTIC']\n    dic[i] = t['REACH'].mean()\ndic\nx1=list()\ny1=list()\nfor ge , ty in dic.items():\n    \n    x1.append(ge)\n    y1.append(ty)\n    \n    \ndata = go.Bar(x=x1,y=y1,)\nfig = go.Figure(data=data)\nfig.update_layout(\n    title=\"Reach of ROMANTIc Movie Director\",\n    xaxis_title=\"Director\",\n    yaxis_title=\"Reach\"\n    \n    \n)\nfig.show()\n","f8c5e5d7":"d=dict()\nj=input(\"Enter the Director Name:\")\nx=[]\ny=[]\n\nfor i in set(tm['GENRE']):\n    d[i]=calcrating(j,i)\n\nfor ge , ty in d.items():\n    \n    x.append(ge)\n    \n    y.append(ty)\n    \nplt.bar(x,y)\nplt.xticks(rotation ='vertical')\nplt.xlabel(\"GENRE\")\nplt.ylabel(\"Rating\")\nplt.title(j+\" movie rating\")\nplt.ylim(0,10);\n","56a36688":"collect data","e580948d":"Cleaning dataset","14c6ae02":"We predict whether  Director Film will success","59368d6f":"# Visualing how each feature correlated","6be5b1ad":"# Pyhackons\n*Logesh \n*Meiarasu\n*Muhil\n*Jithendiran","510d4bf3":"# SPLITING DATA"}}