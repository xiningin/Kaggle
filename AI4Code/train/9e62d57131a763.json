{"cell_type":{"b387aec4":"code","fcb4f68c":"code","a0fbb320":"code","48e2a9d8":"code","cd8ea971":"code","b804e599":"code","e8bbfa34":"code","4868440c":"code","c450a0e3":"code","15cd7760":"code","3514d8b9":"code","9a879efb":"code","d8bfa35c":"code","952ccbf9":"code","83a5e557":"code","5d85dd1b":"code","b0efbc35":"code","ec0c820b":"code","8f26f457":"code","fef6a2dc":"code","3a99a27f":"code","b677a6fe":"code","7c8e5697":"code","5a6a299f":"code","d0e4386a":"code","b3216441":"code","5f5cd825":"code","65815aaa":"code","b948b1c3":"code","cbd7f64c":"code","78a0eefd":"code","4ee88250":"code","9e55f075":"code","475235d0":"code","4e96e164":"code","b94d26ad":"code","03ec36eb":"code","36d4fd7f":"code","baf65c49":"code","fbde2d9e":"code","72b835f2":"code","62634a23":"code","e0e80897":"code","77ff5e0d":"code","1eaef3c4":"code","fc0fc7ce":"code","12064a86":"code","62f5b5cc":"code","47496d43":"code","1a213cee":"code","6fab58c3":"code","1f43d631":"code","3865363b":"code","6bb96f93":"code","b1716c95":"code","dbe12194":"code","6353b7f7":"code","4fbf72f7":"code","ab086f0c":"code","adcaa470":"code","396e6dc7":"code","663ac0b5":"code","b6ea8575":"code","555c52f5":"code","ae96c2ca":"markdown","219bef34":"markdown"},"source":{"b387aec4":"import pandas as pd\nimport numpy as np\nimport warnings\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nimport seaborn as sns\nfrom sklearn import preprocessing\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis,QuadraticDiscriminantAnalysis\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn import model_selection\n\nwarnings.filterwarnings('ignore')","fcb4f68c":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntrain.head()","a0fbb320":"test = pd.read_csv('..\/input\/titanic\/test.csv')\ntest.head()","48e2a9d8":"train.info()","cd8ea971":"test.info()","b804e599":"train.describe()","e8bbfa34":"test.describe()","4868440c":"fare_mean=train['Fare'].mean()#\u6570\u636e\u586b\u5145\ntest.loc[pd.isnull(test.Fare),'Fare'] = fare_mean\nembarked_mode=train['Embarked'].mode()\ntrain.loc[pd.isnull(train.Embarked),['Embarked']]=embarked_mode[0]\ntrain.loc[pd.isnull(train.Age),['Age']] = train['Age'].mean()\ntest.loc[pd.isnull(test.Age),['Age']]=train['Age'].mean()","c450a0e3":"label = train['Survived']\ntrain.drop('Survived',axis=1,inplace=True)\nX_train,X_test,Y_train,Y_test = train_test_split(train,label,test_size = 0.3,random_state = 1)\nX_train['Survived'] = Y_train \nX_test['Survived'] = Y_test ","15cd7760":"fig,(axis1,axis2)=plt.subplots(1,2,figsize=(15,5))\nsns.barplot('Sex','Survived',data=X_train,ax=axis1)\nsns.barplot('Sex','Survived',data=X_test,ax=axis2)","3514d8b9":"train['Sex']=train['Sex'].apply(lambda x:1 if x =='male' else 0)\ntest['Sex']=test['Sex'].apply(lambda x:1 if x =='male' else 0)\ntrain = pd.get_dummies(data =train,columns=['Sex'])\ntest=pd.get_dummies(data = test,columns=['Sex'])","9a879efb":"def Name_Title_Code(x):\n    if x == 'Mr.':\n        return 1\n    if (x == 'Mrs.') or (x=='Ms.') or (x=='Lady.') or (x == 'Mlle.') or (x =='Mme'):\n        return 2\n    if x == 'Miss':\n        return 3\n    if x == 'Rev.':\n        return 4\n    return 5","d8bfa35c":"X_train['Name_Title'] = X_train['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\nX_test['Name_Title'] = X_test['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])","952ccbf9":"X_train.groupby('Name_Title')['Survived'].count()","83a5e557":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,5))\nsns.barplot('Name_Title', 'Survived', data=X_train.sort_values('Name_Title'), ax=axis1) \nsns.barplot('Name_Title', 'Survived', data=X_test.sort_values('Name_Title'), ax=axis2) ","5d85dd1b":"def Name_Title_Code(x):\n    if x == 'Mr.':\n        return 1\n    if (x == 'Mrs.') or (x=='Ms.') or (x=='Lady.') or (x == 'Mlle.') or (x =='Mme'):\n        return 2\n    if x == 'Miss':\n        return 3\n    if x == 'Rev.':\n        return 4\n    return 5","b0efbc35":"train['Name_Title'] = train['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\ntest['Name_Title'] = test['Name'].apply(lambda x: x.split(',')[1]).apply(lambda x: x.split()[0])\ntrain['Name_Title'] = train['Name_Title'].apply(Name_Title_Code)\ntest['Name_Title'] = test['Name_Title'].apply(Name_Title_Code)","ec0c820b":"train = pd.get_dummies(columns = ['Name_Title'], data = train)\ntest = pd.get_dummies(columns = ['Name_Title'], data = test)","8f26f457":"train.head()","fef6a2dc":"X_train['Name_len'] = X_train['Name'].apply(lambda x: len(x))\nX_test['Name_len'] = X_test['Name'].apply(lambda x: len(x))","3a99a27f":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(20,10))\nsns.barplot('Name_len', 'Survived', data=X_train.sort_values(['Name_len']), ax=axis1) \nsns.barplot('Name_len', 'Survived', data=X_test.sort_values(['Name_len']), ax=axis2) \n","b677a6fe":"train['Name_len'] = train['Name'].apply(lambda x: len(x))\ntest['Name_len'] = test['Name'].apply(lambda x: len(x))","7c8e5697":"def Ticket_First_Let(x):\n    return x[0]","5a6a299f":"X_train['Ticket_First_Letter'] = X_train['Ticket'].apply(Ticket_First_Let)\nX_test['Ticket_First_Letter'] = X_test['Ticket'].apply(Ticket_First_Let)","d0e4386a":"X_train.groupby('Ticket_First_Letter')['Survived'].count()","b3216441":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,5))\nsns.barplot('Ticket_First_Letter', 'Survived', data=X_train.sort_values('Ticket_First_Letter'), ax=axis1) \nsns.barplot('Ticket_First_Letter', 'Survived', data=X_test.sort_values('Ticket_First_Letter'), ax=axis2)","5f5cd825":"def Ticket_First_Letter_Code(x):\n    if (x == '1'):\n        return 1\n    if x == '3':\n        return 2\n    if x == '4':\n        return 3\n    if x == 'C':\n        return 4\n    if x == 'S':\n        return 5\n    if x == 'P':\n        return 6\n    if x == '6':\n        return 7\n    if x == '7':\n        return 8\n    if x == 'A':\n        return 9\n    if x == 'W':\n        return 10\n    return 11","65815aaa":"train['Ticket_First_Letter'] = train['Ticket'].apply(Ticket_First_Let)\ntest['Ticket_First_Letter'] = test['Ticket'].apply(Ticket_First_Let)\ntrain['Ticket_First_Letter'].unique()","b948b1c3":"test['Ticket_First_Letter'].unique()","cbd7f64c":"train['Ticket_First_Letter'] = train['Ticket_First_Letter'].apply(Ticket_First_Letter_Code)\ntest['Ticket_First_Letter'] = test['Ticket_First_Letter'].apply(Ticket_First_Letter_Code)","78a0eefd":"train = pd.get_dummies(columns = ['Ticket_First_Letter'], data = train) \ntest = pd.get_dummies(columns = ['Ticket_First_Letter'], data = test)","4ee88250":" def cabin_num(train, test):\n    for i in [train, test]:\n        i['Cabin_num1'] = i['Cabin'].apply(lambda x: str(x).split(' ')[-1][1:])\n        i['Cabin_num1'].replace('an', np.NaN, inplace = True)\n        i['Cabin_num1'] = i['Cabin_num1'].apply(lambda x: int(x) if not pd.isnull(x) and x != '' else np.NaN)\n        i['Cabin_num'] = pd.qcut(train['Cabin_num1'],3)\n    train = pd.concat((train, pd.get_dummies(train['Cabin_num'], prefix = 'Cabin_num')), axis = 1)\n    test = pd.concat((test, pd.get_dummies(test['Cabin_num'], prefix = 'Cabin_num')), axis = 1)\n    del train['Cabin_num']\n    del test['Cabin_num']\n    del train['Cabin_num1']\n    del test['Cabin_num1']\n    return train, test\ntrain,test = cabin_num(train, test) ","9e55f075":"X_train['Cabin'] = X_train['Cabin'].fillna('Missing')\nX_test['Cabin'] = X_test['Cabin'].fillna('Missing')","475235d0":"def Cabin_First_Letter(x):\n    if x == 'Missing':\n        return 'XX'\n    return x[0]","4e96e164":"X_train['Cabin_First_Letter'] = X_train['Cabin'].apply(Cabin_First_Letter)\nX_test['Cabin_First_Letter'] = X_test['Cabin'].apply(Cabin_First_Letter) ","b94d26ad":"X_train.groupby('Cabin_First_Letter')['Survived'].count()","03ec36eb":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,5))\nsns.barplot('Cabin_First_Letter', 'Survived', data=X_train.sort_values('Cabin_First_Letter'), ax=axis1) \nsns.barplot('Cabin_First_Letter', 'Survived', data=X_test.sort_values('Cabin_First_Letter'), ax=axis2) ","36d4fd7f":"def Cabin_First_Letter_Code(x):\n    if x == 'XX':\n        return 1\n    if x == 'B':\n        return 2\n    if x == 'C':\n        return 3\n    if x == 'D':\n        return 4     \n    return 5","baf65c49":"train['Cabin'] = train['Cabin'].fillna('Missing')\ntest['Cabin'] = test['Cabin'].fillna('Missing')\ntrain['Cabin_First_Letter'] = train['Cabin'].apply(Cabin_First_Letter)\ntest['Cabin_First_Letter'] = test['Cabin'].apply(Cabin_First_Letter)","fbde2d9e":"train['Cabin_First_Letter'] = train['Cabin_First_Letter'].apply(Cabin_First_Letter_Code)\ntest['Cabin_First_Letter'] = test['Cabin_First_Letter'].apply(Cabin_First_Letter_Code)\ntrain = pd.get_dummies(columns = ['Cabin_First_Letter'], data = train) \ntest = pd.get_dummies(columns = ['Cabin_First_Letter'], data = test)","72b835f2":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,5))\nsns.barplot('Embarked', 'Survived', data=X_train.sort_values('Embarked'), ax=axis1) \nsns.barplot('Embarked', 'Survived', data=X_test.sort_values('Embarked'), ax=axis2)","62634a23":"train = pd.get_dummies(train,columns = ['Embarked'])\ntest = pd.get_dummies(test,columns = ['Embarked'])","e0e80897":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,5))\nsns.barplot('SibSp', 'Survived', data=X_train.sort_values('SibSp'), ax=axis1) \nsns.barplot('SibSp', 'Survived', data=X_test.sort_values('SibSp'), ax=axis2) ","77ff5e0d":"X_train['Fam_Size'] = X_train['SibSp']  + X_train['Parch'] \nX_test['Fam_Size'] = X_test['SibSp']  + X_test['Parch'] ","1eaef3c4":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,5))\nsns.barplot('Fam_Size', 'Survived', data=X_train.sort_values('Parch'), ax=axis1) \nsns.barplot('Fam_Size', 'Survived', data=X_test.sort_values('Parch'), ax=axis2) ","fc0fc7ce":"def Family_feature(train, test):\n    for i in [train, test]:\n        i['Fam_Size'] = np.where((i['SibSp']+i['Parch']) == 0 , 'Solo',\n                           np.where((i['SibSp']+i['Parch']) <= 3,'Nuclear', 'Big'))\n        del i['SibSp']\n        del i['Parch']\n    return train, test \ntrain, test  = Family_feature(train, test)\ntrain = pd.get_dummies(train,columns = ['Fam_Size']) \ntest =  pd.get_dummies(test,columns = ['Fam_Size']) ","12064a86":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,5))\nsns.barplot('Pclass', 'Survived', data=X_train.sort_values('Pclass'), ax=axis1) \nsns.barplot('Pclass', 'Survived', data=X_test.sort_values('Pclass'), ax=axis2) ","62f5b5cc":"train['Pclass_1']  = np.int32(train['Pclass'] == 1)  \ntrain['Pclass_2']  = np.int32(train['Pclass'] == 2)  \ntrain['Pclass_3']  = np.int32(train['Pclass'] == 3)  \ntest['Pclass_1']  = np.int32(test['Pclass'] == 1)  \ntest['Pclass_2']  = np.int32(test['Pclass'] == 2)  \ntest['Pclass_3']  = np.int32(test['Pclass'] == 3)  ","47496d43":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,5)) \nsns.distplot(X_train[X_train.Survived==1]['Age'].dropna().values, bins=range(0, 81, 6),color='red', ax=axis1) \nsns.distplot(X_train[X_train.Survived==0]['Age'].dropna().values, bins=range(0, 81, 6),color = 'blue', ax=axis1) \nsns.distplot(X_test[X_test.Survived==1]['Age'].dropna().values, bins=range(0, 81, 6),color='red', ax=axis2) \nsns.distplot(X_test[X_test.Survived==0]['Age'].dropna().values, bins=range(0, 81, 6),color = 'blue', ax=axis2)","1a213cee":"train['Small_Age'] = np.int32(train['Age'] <= 5)  \ntrain['Old_Age'] = np.int32(train['Age'] >= 65)  \ntrain['Middle_Age'] = np.int32((train['Age'] >= 15) & (train['Age'] <= 25))  \ntest['Small_Age'] = np.int32(test['Age'] <= 5)  \ntest['Old_Age'] = np.int32(test['Age'] >= 65)  \ntest['Middle_Age'] = np.int32((test['Age'] >= 15) & (test['Age'] <= 25))  ","6fab58c3":"X_train['Fare'] = X_train['Fare'] + 1\nX_test['Fare'] = X_test['Fare'] + 1\nX_train['Fare'] = X_train['Fare'].apply(np.log)\nX_test['Fare'] = X_test['Fare'].apply(np.log)","1f43d631":"fig, (axis1,axis2) = plt.subplots(1,2,figsize=(15,5)) \nsns.distplot(X_train[X_train.Survived==1]['Fare'].dropna().values, bins=range(0, 10, 1),color='red', ax=axis1) \nsns.distplot(X_train[X_train.Survived==0]['Fare'].dropna().values, bins=range(0, 10, 1),color = 'blue', ax=axis1) \nsns.distplot(X_test[X_test.Survived==1]['Fare'].dropna().values, bins=range(0, 10, 1),color='red', ax=axis2) \nsns.distplot(X_test[X_test.Survived==0]['Fare'].dropna().values, bins=range(0, 10, 1),color = 'blue', ax=axis2)","3865363b":"train['Fare'] = train['Fare'] + 1\ntest['Fare'] = test['Fare'] + 1\ntrain['Fare'] = train['Fare'].apply(np.log)\ntest['Fare'] = test['Fare'].apply(np.log) ","6bb96f93":"train['Fare_0_2'] = np.int32(train['Fare'] <= 2)\ntrain['Fare_2_3'] = np.int32((train['Fare'] > 2) & (train['Fare'] <= 3) )\ntrain['Fare_3_4'] = np.int32((train['Fare'] > 3) & (train['Fare'] <= 4) )\ntrain['Fare_4_5'] = np.int32((train['Fare'] > 4) & (train['Fare'] <= 5)) \ntrain['Fare_5_'] = np.int32(train['Fare'] > 5)\ntest['Fare_0_2'] = np.int32(test['Fare'] <= 2)\ntest['Fare_2_3'] = np.int32((test['Fare'] > 2) & (test['Fare'] <= 3) )\ntest['Fare_3_4'] = np.int32((test['Fare'] > 3) & (test['Fare'] <= 4) )\ntest['Fare_4_5'] = np.int32((test['Fare'] > 4) & (test['Fare'] <= 5)) \ntest['Fare_5_'] = np.int32(test['Fare'] > 5)","b1716c95":"train.head()","dbe12194":"train.drop(['Ticket','PassengerId','Name','Age','Cabin','Pclass'],axis = 1, inplace=True)\ntest.drop( ['PassengerId','Ticket','Name','Age','Cabin','Pclass'],axis =1, inplace=True)     ","6353b7f7":"X_train_ = train.loc[X_train.index]\nX_test_ = train.loc[X_test.index]\nY_train_ = label.loc[X_train.index]\nY_test_ = label.loc[X_test.index]\nX_test_ = X_test_[X_train_.columns]","4fbf72f7":"pd.set_option('display.max_columns',50)\ntrain.head()","ab086f0c":"test=test[train.columns]","adcaa470":"test.head()","396e6dc7":"rf_ = RandomForestClassifier(criterion='gini', \n                             n_estimators=700,#                              max_depth=5,\n                             min_samples_split=16,\n                             min_samples_leaf=1,\n                             max_features='auto',  \n                             random_state=10,\n                             n_jobs=-1) \nrf_.fit(X_train_,Y_train_) \nrf_.score(X_test_,Y_test_)","663ac0b5":"rf_.fit(train,label)","b6ea8575":"pd.concat((pd.DataFrame(train.columns, columns = ['variable']), \n           pd.DataFrame(rf_.feature_importances_, columns = ['importance'])), \n          axis = 1).sort_values(by='importance', ascending = False)[:20]","555c52f5":"submit = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmit.set_index('PassengerId',inplace=True)\nres_rf = rf_.predict(test)\nsubmit['Survived'] = res_rf\nsubmit['Survived'] = submit['Survived'].apply(int)\nsubmit.to_csv('submit.csv')","ae96c2ca":"EDA","219bef34":"model training"}}