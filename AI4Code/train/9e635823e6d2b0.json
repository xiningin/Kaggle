{"cell_type":{"1f3e5e7e":"code","e030bbaa":"code","1ff97e88":"code","87484d4c":"code","61a9ab73":"code","7b037209":"code","c539ad05":"code","4ce8ae9f":"code","20387565":"code","ebd5e38b":"code","051e71b9":"code","a00ce274":"code","e0cae6c1":"code","d61fa7c6":"code","23b8c753":"code","496a3a1e":"code","0b67afd8":"code","f90a0ea4":"code","ecc1c692":"code","120e64f7":"code","78819bd8":"code","5d6db5e0":"code","c09acdaa":"code","90786a16":"code","dca4e88b":"code","b12b3d1a":"code","28786a75":"code","c35a597f":"code","bcc57f66":"code","fc9d630a":"code","ad2cac0b":"code","dc98e466":"code","1c7360a1":"code","65df596b":"code","ae9965ca":"code","e8a1ecea":"code","338eae64":"code","8e842f14":"code","ddf0ff6e":"code","7fd73c18":"code","281691a5":"code","ea942735":"code","7d3477ad":"code","4acfb68a":"code","c0bc90cb":"code","2e3be3b2":"code","014482ef":"code","75a9018c":"code","96f5d76f":"code","481a6013":"code","54d8826b":"code","56581ef0":"code","b314d4fd":"code","7c71f217":"code","5f53b5ef":"code","81f55f2b":"code","b1857396":"code","7b905986":"code","89e2d1eb":"code","2da59fc3":"code","24684ac9":"code","dae39988":"code","2f52b915":"markdown","7b7f9bb0":"markdown","3529f3de":"markdown","7c4f1648":"markdown","15c47a0c":"markdown","8da0361d":"markdown","16f3161b":"markdown","4468160c":"markdown","33383721":"markdown"},"source":{"1f3e5e7e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\npd.set_option('display.max_columns',None)\n","e030bbaa":"df_train=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","1ff97e88":"df_train.head()","87484d4c":"df_train.head()","61a9ab73":"df_train.shape","7b037209":"df_test.shape","c539ad05":"df_train.columns","4ce8ae9f":"df_test.columns","20387565":"df_train.info()","ebd5e38b":"df_train.isnull().sum()","051e71b9":"df_train.corr()","a00ce274":"corr = df_train.corr()\nsns.set_context(\"notebook\", font_scale=1.0, rc={\"lines.linewidth\": 2.5})\nplt.figure(figsize=(36,18))\na = sns.heatmap(corr, annot=True, fmt='.2f')\nrotx = a.set_xticklabels(a.get_xticklabels(), rotation=90)\nroty = a.set_yticklabels(a.get_yticklabels(), rotation=30)","e0cae6c1":"df_train.describe().T ","d61fa7c6":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False)","23b8c753":"df_train.isnull().sum()","496a3a1e":"df_train.info()","0b67afd8":"df_train[\"LotFrontage\"] = df_train[\"LotFrontage\"].fillna(df_train[\"LotFrontage\"].mean())\ndf_train.drop([\"Alley\"],axis=1,inplace=True) #Aa alley has more than 3\/4 values are null values.so we drop the column","f90a0ea4":"df_train['MasVnrType']=df_train['MasVnrType'].fillna(df_train['MasVnrType'].mode()[0])\ndf_train['MasVnrArea']=df_train['MasVnrArea'].fillna(df_train['MasVnrArea'].mode()[0])\ndf_train['BsmtCond']=df_train['BsmtCond'].fillna(df_train['BsmtCond'].mode()[0])\ndf_train['BsmtQual']=df_train['BsmtQual'].fillna(df_train['BsmtQual'].mode()[0])\ndf_train['FireplaceQu']=df_train['FireplaceQu'].fillna(df_train['FireplaceQu'].mode()[0])\ndf_train['GarageType']=df_train['GarageType'].fillna(df_train['GarageType'].mode()[0])\ndf_train['GarageFinish']=df_train['GarageFinish'].fillna(df_train['GarageFinish'].mode()[0])\ndf_train['GarageQual']=df_train['GarageQual'].fillna(df_train['GarageQual'].mode()[0])\ndf_train['GarageCond']=df_train['GarageCond'].fillna(df_train['GarageCond'].mode()[0])\ndf_train['Electrical']=df_train['Electrical'].fillna(df_train['Electrical'].mode()[0])","ecc1c692":"df_train.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_train.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\n#I'm droping these columns because they contain more null values","120e64f7":"df_train.shape","78819bd8":"df_train.drop([\"Id\"],axis=1,inplace=True)\n#As id did'nt affect our target variable i'm going to delete it","5d6db5e0":"df_train.isnull().sum()","c09acdaa":"df_train['BsmtExposure']=df_train['BsmtExposure'].fillna(df_train['BsmtExposure'].mode()[0])\ndf_train['BsmtFinType2']=df_train['BsmtFinType2'].fillna(df_train['BsmtFinType2'].mode()[0])","90786a16":"sns.heatmap(df_train.isnull(),yticklabels=False,cbar=False,cmap='YlGnBu')","dca4e88b":"df_train.isnull().sum()","b12b3d1a":"df_train.dropna(inplace=True)\ndf_train.shape","28786a75":"#Categorical features handling\ncat_feature = [feature for feature in df_train.columns if df_train[feature].dtype==\"O\"]\nlen(cat_feature)","c35a597f":"def category_onehot_multcols(multcolumns):\n    df_final=final_df\n    i=0\n    for fields in multcolumns:\n        \n        print(fields)\n        df1=pd.get_dummies(final_df[fields],drop_first=True)\n        \n        final_df.drop([fields],axis=1,inplace=True)\n        if i==0:\n            df_final=df1.copy()\n        else:\n            \n            df_final=pd.concat([df_final,df1],axis=1)\n        i=i+1\n       \n        \n    df_final=pd.concat([final_df,df_final],axis=1)\n        \n    return df_final","bcc57f66":"main_df = df_train.copy()","fc9d630a":"main_df.head()","ad2cac0b":"df_test.head()\n","dc98e466":"sol = df_test[\"Id\"]\ndf_test.shape\n","1c7360a1":"test_num = [feature for feature in df_test.columns if df_test[feature].isnull().sum()>1]\ntest_num","65df596b":"df_test['MSZoning']=df_test['MSZoning'].fillna(df_test['MSZoning'].mode()[0])\ndf_test['LotFrontage']=df_test['LotFrontage'].fillna(df_test['LotFrontage'].mean())","ae9965ca":"df_test.drop(['Alley'],axis=1,inplace=True)\ndf_test.drop(['GarageYrBlt'],axis=1,inplace=True)\ndf_test.drop(['PoolQC','Fence','MiscFeature'],axis=1,inplace=True)\ndf_test.drop(['Id'],axis=1,inplace=True)\n#Dropping columns not present in train data","e8a1ecea":"df_test['Utilities']=df_test['Utilities'].fillna(df_test['Utilities'].mode()[0])\ndf_test['MasVnrType']=df_test['MasVnrType'].fillna(df_test['MasVnrType'].mode()[0])\ndf_test['MasVnrArea']=df_test['MasVnrArea'].fillna(df_test['MasVnrArea'].mode()[0])\ndf_test['BsmtCond']=df_test['BsmtCond'].fillna(df_test['BsmtCond'].mode()[0])\ndf_test['BsmtQual']=df_test['BsmtQual'].fillna(df_test['BsmtQual'].mode()[0])\ndf_test['BsmtExposure']=df_test['BsmtExposure'].fillna(df_test['BsmtExposure'].mode()[0])\ndf_test['BsmtFinType1']=df_test['BsmtFinType1'].fillna(df_test['BsmtFinType1'].mode()[0])\ndf_test['BsmtFinType2']=df_test['BsmtFinType2'].fillna(df_test['BsmtFinType2'].mode()[0])\ndf_test['BsmtFullBath']=df_test['BsmtFullBath'].fillna(df_test['BsmtFullBath'].mode()[0])\ndf_test['BsmtHalfBath']=df_test['BsmtHalfBath'].fillna(df_test['BsmtHalfBath'].mode()[0])\ndf_test['Functional']=df_test['Functional'].fillna(df_test['Functional'].mode()[0])\ndf_test['FireplaceQu']=df_test['FireplaceQu'].fillna(df_test['FireplaceQu'].mode()[0])\ndf_test['GarageType']=df_test['GarageType'].fillna(df_test['GarageType'].mode()[0])\ndf_test['GarageFinish']=df_test['GarageFinish'].fillna(df_test['GarageFinish'].mode()[0])\ndf_test['GarageQual']=df_test['GarageQual'].fillna(df_test['GarageQual'].mode()[0])\ndf_test['GarageCond']=df_test['GarageCond'].fillna(df_test['GarageCond'].mode()[0])\n","338eae64":"df_test.shape","8e842f14":"df_test.loc[:, df_test.isnull().any()].head()","ddf0ff6e":"df_test['Exterior1st']=df_test['Exterior1st'].fillna(df_test['Exterior1st'].mode()[0])\ndf_test['Exterior2nd']=df_test['Exterior2nd'].fillna(df_test['Exterior2nd'].mode()[0])\ndf_test['BsmtFinSF1']=df_test['BsmtFinSF1'].fillna(df_test['BsmtFinSF1'].mean())\ndf_test['BsmtFinSF2']=df_test['BsmtFinSF2'].fillna(df_test['BsmtFinSF2'].mean())\ndf_test['BsmtUnfSF']=df_test['BsmtUnfSF'].fillna(df_test['BsmtUnfSF'].mean())\ndf_test['TotalBsmtSF']=df_test['TotalBsmtSF'].fillna(df_test['TotalBsmtSF'].mean())\ndf_test['KitchenQual']=df_test['KitchenQual'].fillna(df_test['KitchenQual'].mode()[0])\ndf_test['GarageCars']=df_test['GarageCars'].fillna(df_test['GarageCars'].mean())\ndf_test['GarageArea']=df_test['GarageArea'].fillna(df_test['GarageArea'].mean())\ndf_test['SaleType']=df_test['SaleType'].fillna(df_test['SaleType'].mode()[0])\n","7fd73c18":"df_test.isnull().sum().any()","281691a5":"df_test.shape","ea942735":"df_train.shape","7d3477ad":"final_df = pd.concat([df_train,df_test],axis=0)","4acfb68a":"final_df.shape","c0bc90cb":"final_df = category_onehot_multcols(cat_feature)","2e3be3b2":"final_df.shape #After one hot encoding categorical data","014482ef":"final_df =final_df.loc[:,~final_df.columns.duplicated()]","75a9018c":"final_df.shape","96f5d76f":"train_df = final_df.iloc[:1422,:]\ntest_df = final_df.iloc[1422:,:]","481a6013":"test_df.head()","54d8826b":"train_df.head()","56581ef0":"test_df.drop([\"SalePrice\"],axis=1,inplace=True)","b314d4fd":"train_df[\"SalePrice\"]","7c71f217":"X_train=train_df.drop(['SalePrice'],axis=1)\ny_train=train_df['SalePrice']","5f53b5ef":"X_train=train_df.drop(['SalePrice'],axis=1)\ny_train=train_df['SalePrice']","81f55f2b":"from sklearn.linear_model import LinearRegression\nlr=LinearRegression()\nlr.fit(X_train,y_train)","b1857396":"y_tr=lr.predict(X_train)","7b905986":"lr.coef_","89e2d1eb":"lr.intercept_","2da59fc3":"y_pred = lr.predict(test_df)","24684ac9":"lst = sol\n  \n# list of int\nlst2 = list(y_pred)\n  \n# Calling DataFrame constructor after zipping\n# both lists, with columns specified\ndf = pd.DataFrame(list(zip(lst, lst2)),\n               columns =['id', 'SalePrice'])","dae39988":"df.to_csv('result.csv',index=False)","2f52b915":"**Here i'm filling null values with mean and mode for numerical columns and categorical columns respectively**","7b7f9bb0":"**Handling missing values**","3529f3de":"# Finding predictions for Test data and make .csv file","7c4f1648":"# Multiple Linear Regression","15c47a0c":"### Loading data sets","8da0361d":"#Handling training data","16f3161b":"**COncatinating train and test data to do one hot encoding for categorical data**","4468160c":"# Handling Test Data","33383721":"### Importing Libraries"}}