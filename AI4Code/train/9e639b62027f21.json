{"cell_type":{"8c9839f1":"code","bfd31616":"code","b9163a7c":"code","024aa1e5":"code","e4000c74":"code","34fb64ef":"code","d0c9a4d7":"code","a537538a":"code","ccb7ba92":"code","ca25ecf1":"code","65d996eb":"code","a9deafe4":"code","72c7bdf2":"code","e5cf9d5e":"code","79957d15":"code","946cd5f3":"code","2ba0468f":"code","adef9a27":"code","4c4a5b24":"code","731ef72d":"code","145f7c5f":"code","2d1d4140":"code","5a3804db":"code","8b43e3f7":"code","f81e2c80":"code","7119b72a":"code","08234fa3":"code","6356481a":"code","035e5593":"code","701a73c1":"code","8043f384":"markdown","54d6e55c":"markdown","7679cc75":"markdown","83765432":"markdown","2378afb7":"markdown"},"source":{"8c9839f1":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('ggplot')\nimport warnings\nwarnings.filterwarnings('ignore')\n\ntrain = pd.read_parquet('..\/input\/kaggle-pog-series-s01e01\/train.parquet')\ntest = pd.read_parquet('..\/input\/kaggle-pog-series-s01e01\/test.parquet')\nsubmission = pd.read_csv('..\/input\/kaggle-pog-series-s01e01\/sample_submission.csv')\n","bfd31616":"train['isTrain'] = True\ntest['isTrain'] = False\ndf = pd.concat([train, test]).reset_index(drop=True).copy()","b9163a7c":"df['trending_date'] = pd.to_datetime(df['trending_date'])\ndf['Total_Trending_Days']=df['video_id'].map(df.groupby('video_id')['id'].count().to_dict())\n    #should be calculated across train and test\ndf['min_trending_dt']=df['video_id'].map(df.groupby('video_id')['trending_date'].min().to_dict())\ndf['days_old'] = (df['trending_date'].dt.date - df['min_trending_dt'].dt.date).dt.days","024aa1e5":"df['video_initial_ratio']=df['video_id'].map(df[df['days_old']==0][['video_id','target']].set_index('video_id').squeeze(axis=1).to_dict())\n    \n\ndf['channel_mean_initial_ratio']=df['channelId'].map(df.groupby('channelId')['video_initial_ratio'].mean().to_dict())\ndf['channel_target_overall_avg']=df['channelId'].map(df.groupby('channelId')['target'].mean().to_dict())\n    \n\ndf['categoryId_mean_initial_ratio']=df['categoryId'].map(df.groupby('categoryId')['video_initial_ratio'].mean().to_dict())\ndf['category_target_overall_avg']=df['categoryId'].map(df.groupby('categoryId')['target'].mean().to_dict())\n\ndf['categoryId_cat'] = df['categoryId'].astype('category')\ndf['channelId_cat'] = df['channelId'].astype('category')\ndf['video_id_cat'] = df['video_id'].astype('category')","e4000c74":"df['channel_occurance'] = df['channelId'].map(df['channelId'].value_counts().to_dict())\ndf['channel_unique_video_count'] = df['channelId'].map(df.groupby('channelId')['video_id'].nunique().to_dict()) \ndf['video_occurance_count'] = df.groupby('video_id')['trending_date'].rank().astype('int')\n\n\ndf['publishedAt'] = pd.to_datetime(df['publishedAt'])\ndf['trending_date'] = pd.to_datetime(df['trending_date'], utc=True)","34fb64ef":"df['video_1_days_since_trend_ratio']=df['video_id'].map(df[df['days_old']==1][['video_id','target']].set_index('video_id').squeeze(axis=1).to_dict())\ndf['video_2_days_since_trend_ratio']=df['video_id'].map(df[df['days_old']==2][['video_id','target']].set_index('video_id').squeeze(axis=1).to_dict())\ndf['video_3_days_since_trend_ratio']=df['video_id'].map(df[df['days_old']==3][['video_id','target']].set_index('video_id').squeeze(axis=1).to_dict())\ndf['video_4_days_since_trend_ratio']=df['video_id'].map(df[df['days_old']==4][['video_id','target']].set_index('video_id').squeeze(axis=1).to_dict())\ndf['video_5_days_since_trend_ratio']=df['video_id'].map(df[df['days_old']==5][['video_id','target']].set_index('video_id').squeeze(axis=1).to_dict())\ndf['video_6_days_since_trend_ratio']=df['video_id'].map(df[df['days_old']==6][['video_id','target']].set_index('video_id').squeeze(axis=1).to_dict())\ndf['video_7_days_since_trend_ratio']=df['video_id'].map(df[df['days_old']==7][['video_id','target']].set_index('video_id').squeeze(axis=1).to_dict())","d0c9a4d7":"df['channel_trend_day_1_mean_ratio']=df['channelId'].map(df.groupby('channelId')['video_1_days_since_trend_ratio'].mean().to_dict())\ndf['channel_trend_day_2_mean_ratio']=df['channelId'].map(df.groupby('channelId')['video_2_days_since_trend_ratio'].mean().to_dict())\ndf['channel_trend_day_3_mean_ratio']=df['channelId'].map(df.groupby('channelId')['video_3_days_since_trend_ratio'].mean().to_dict())\ndf['channel_trend_day_4_mean_ratio']=df['channelId'].map(df.groupby('channelId')['video_4_days_since_trend_ratio'].mean().to_dict())\ndf['channel_trend_day_5_mean_ratio']=df['channelId'].map(df.groupby('channelId')['video_5_days_since_trend_ratio'].mean().to_dict())\ndf['channel_trend_day_6_mean_ratio']=df['channelId'].map(df.groupby('channelId')['video_6_days_since_trend_ratio'].mean().to_dict())\ndf['channel_trend_day_7_mean_ratio']=df['channelId'].map(df.groupby('channelId')['video_7_days_since_trend_ratio'].mean().to_dict())","a537538a":"df['video_age_seconds'] = (df['trending_date'] - df['publishedAt']).dt.total_seconds().astype('int')\ndf['Total_Trending_Days']=df['video_id'].map(df.groupby('video_id')['id'].count().to_dict())","ccb7ba92":"df['trending_dt_year']=df['trending_date'].dt.year\ndf['trending_dt_year']= df['trending_dt_year'].astype('category')\n\ndf['trending_dt_month']=df['trending_date'].dt.month\ndf['trending_dt_month']= df['trending_dt_month'].astype('category')\n\ndf['trending_dow'] = df['trending_date'].dt.day_name()\ndf['trending_dow']= df['trending_dow'].astype('category')","ca25ecf1":"df['publishedAt_year']=df['publishedAt'].dt.year\ndf['publishedAt_year']= df['publishedAt_year'].astype('category')\n\ndf['publishedAt_month']=df['publishedAt'].dt.month\ndf['publishedAt_month']= df['publishedAt_month'].astype('category')\n\ndf['published_dow'] = df['publishedAt'].dt.day_name()\ndf['published_dow']= df['published_dow'].astype('category')","65d996eb":"df['trending_dt_year_mean_VIR']=df['trending_dt_year'].map(df.groupby('trending_dt_year')['video_initial_ratio'].mean().to_dict())\ndf['trending_dt_year_mean_target']=df['trending_dt_year'].map(df.groupby('trending_dt_year')['target'].mean().to_dict())\n\n\ndf['trending_dt_month_mean_VIR']=df['trending_dt_month'].map(df.groupby('trending_dt_month')['video_initial_ratio'].mean().to_dict())\ndf['trending_dt_month_mean_target']=df['trending_dt_month'].map(df.groupby('trending_dt_month')['target'].mean().to_dict())\n\ndf['trending_dt_dow_mean_VIR']=df['trending_dow'].map(df.groupby('trending_dow')['video_initial_ratio'].mean().to_dict())\ndf['trending_dt_dow_mean_target']=df['trending_dow'].map(df.groupby('trending_dow')['target'].mean().to_dict())","a9deafe4":"df['trending_dt_year_mean_VIR']=df['trending_dt_year'].map(df.groupby('trending_dt_year')['video_initial_ratio'].mean().to_dict())\ndf['trending_dt_year_mean_target']=df['trending_dt_year'].map(df.groupby('trending_dt_year')['target'].mean().to_dict())","72c7bdf2":"df.loc[~(df['isTrain']),'tt_type']='Testt'\ndf.loc[(df['isTrain']),'tt_type']='Trainn'\ndf['tt_type'].value_counts()","e5cf9d5e":"sns.countplot(x=\"trending_dt_year\", hue='tt_type',data=df)","79957d15":"plt.subplot(1, 2, 1)\nax = sns.barplot(x=\"trending_dt_year\", y=\"video_initial_ratio\", data=df)\n\nplt.subplot(1, 2, 2)\nax = sns.barplot(x=\"trending_dt_year\", y=\"target\", data=df)\n\nplt.gcf().set_size_inches(12,5)\nplt.show()","946cd5f3":"plt.subplot(1, 2, 1)\nax = sns.barplot(x=\"trending_dt_month\", y=\"video_initial_ratio\",hue='trending_dt_year', data=df)\n\nplt.subplot(1, 2, 2)\nax = sns.barplot(x=\"trending_dt_month\", y=\"target\", hue='trending_dt_year',data=df)\n\nplt.gcf().set_size_inches(18,5)\nplt.show()","2ba0468f":"plt.subplot(1, 2, 1)\nax = sns.barplot(x=\"trending_dt_month\", y=\"days_old\",hue='trending_dt_year', data=df)\n\nplt.subplot(1, 2, 2)\nax = sns.barplot(x=\"days_old\", y=\"target\", hue='trending_dt_year',data=df)\n\nplt.gcf().set_size_inches(25,5)\nplt.show()","adef9a27":"plt.subplot(1, 2, 1)\nax = sns.barplot(x=\"trending_dow\", y=\"video_initial_ratio\", hue='trending_dt_year',data=df)\n\nplt.subplot(1, 2, 2)\nax = sns.barplot(x=\"trending_dow\", y=\"target\", hue='trending_dt_year',data=df)\n\nplt.gcf().set_size_inches(15,5)\nplt.show()","4c4a5b24":"features = ['comments_disabled', 'ratings_disabled', 'has_thumbnail', 'days_old',\n            'duration_seconds',\n            'video_age_seconds',\n            'channel_target_overall_avg',\n            'category_target_overall_avg',\n            'channel_mean_initial_ratio',\n            'Total_Trending_Days',\n            'categoryId_cat',\n            'channelId_cat',\n            'video_id_cat',\n            'channel_occurance',\n            'channel_unique_video_count',\n            'video_occurance_count',\n            'trending_dt_year',\n'trending_dt_month',\n'trending_dow',\n'trending_dt_year_mean_VIR',\n'trending_dt_year_mean_target',\n'trending_dt_month_mean_VIR',\n'trending_dt_month_mean_target',\n'trending_dt_dow_mean_VIR',\n'trending_dt_dow_mean_target',\n\n'publishedAt_year',\n'publishedAt_month',\n'published_dow',\n#             'video_1_days_since_trend_ratio',\n#             'video_2_days_since_trend_ratio',\n#             'video_3_days_since_trend_ratio',\n#             'video_4_days_since_trend_ratio',\n#             'video_5_days_since_trend_ratio',\n#             'video_6_days_since_trend_ratio',\n#             'video_7_days_since_trend_ratio',\n'channel_trend_day_1_mean_ratio',\n'channel_trend_day_2_mean_ratio',\n'channel_trend_day_3_mean_ratio',\n'channel_trend_day_4_mean_ratio',\n'channel_trend_day_5_mean_ratio',\n'channel_trend_day_6_mean_ratio',\n'channel_trend_day_7_mean_ratio']\n","731ef72d":"train_feats = df.query('isTrain').reset_index(drop=True).copy()\ntest_feats = df.query('isTrain == False').reset_index(drop=True).copy()","145f7c5f":"train_feats.columns","2d1d4140":"X=train_feats[features]\nY=train_feats['target']","5a3804db":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nxgb = XGBRegressor(n_estimators = 10000,enable_categorical=True,\n        tree_method='gpu_hist')\n# xgb.fit(X_tr[features], y_tr,\n#         verbose = 200)\n\n# preds = xgb.predict(X_val[features])","8b43e3f7":"import time\nfrom sklearn.model_selection import cross_validate\n\nt_start = time.time()\nscores = cross_validate(xgb, X, Y, cv=5, scoring=('neg_mean_absolute_error'), return_train_score=True)\n\nt_stop = time.time()\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","f81e2c80":"mean=scores['test_score'].mean()\nprint(\"{:.5f}\".format(mean))","7119b72a":"import time\n\nt_start = time.time()\nxgb.fit(X, Y,)\nt_stop = time.time()\n\nprint('Time elapsed: {:.3f} seconds'.format(t_stop - t_start))","08234fa3":"# import sklearn\n# sklearn.metrics.SCORERS.keys()","6356481a":"pred = xgb.predict(test_feats[features])","035e5593":"test['target'] = pred\ntest['target'] = [a if b == 0 else 0 for a, b, in zip(test['target'], test['ratings_disabled'])]","701a73c1":"output = test[['id', 'target']]\noutput.to_csv('submission.csv', index = False)","8043f384":"### Model 1 - Set Target and Features","54d6e55c":"### Model 1 - Train and Cross Validate XGB Model","7679cc75":"### Retrain with All Data","83765432":"### Feature Engineering","2378afb7":"### EDA - Trending Date"}}