{"cell_type":{"cd29dedf":"code","c6446bf0":"code","8cf5322b":"code","52149b85":"code","2004a290":"code","c786d748":"code","d8f0b3e4":"code","47eb49e9":"code","5a0dc6af":"code","57be40b6":"code","971ddacf":"code","44ae3396":"code","c20a4ce9":"code","a5f5ca99":"code","3c78e926":"markdown","20c3f8a2":"markdown","0d66e3a6":"markdown","6733dc62":"markdown","5ef09c6c":"markdown","97b1fccd":"markdown","3dfededd":"markdown","b9af1fc1":"markdown","2e2fe5e1":"markdown","30c7634c":"markdown"},"source":{"cd29dedf":"import os\nimport tensorflow as tf\nimport glob\nimport pathlib\nfrom tensorflow import keras\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Model\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.layers import Dense,Conv2D,Flatten","c6446bf0":"train=\"..\/input\/100-bird-species\/train\"\ntest=\"..\/input\/100-bird-species\/test\"\nvalid=\"..\/input\/100-bird-species\/valid\"","8cf5322b":"len(os.listdir(train))","52149b85":"def process(data):\n    path=pathlib.Path(data)#converting the dtring to path\n    filepaths=list(path.glob(r\"*\/*.jpg\"))#Going through all the subpaths \n    labels=list(map(lambda x: os.path.split(os.path.split(x)[0])[1],filepaths))#Separating the label from filepath and storing it\n    df1=pd.Series(filepaths,name='filepaths').astype(str)\n    df2=pd.Series(labels,name='labels')\n    df=pd.concat([df1,df2],axis=1)#Making the dataframe\n    return df","2004a290":"df_train=process(train)\ndf_test=process(test)\ndf_valid=process(valid)","c786d748":"df_test.head()","d8f0b3e4":"df_train=df_train.sample(frac=1).reset_index(drop=True)#Shuffling the dataframe so we can get random bird pictures\n fig,axes=plt.subplots(nrows=6,ncols=4,figsize=(12,12))\n\nfor i,ax in enumerate(axes.flat):\n    x=plt.imread(df_train['filepaths'][i])#reading the image\n    ax.imshow(x)\n    ax.set_title(df_train['labels'][i])\nplt.tight_layout()    \nplt.show()   ","47eb49e9":"train_generator=ImageDataGenerator( preprocessing_function=preprocess_input)\ntest_generator=ImageDataGenerator( preprocessing_function=preprocess_input)\nvalid_generator=ImageDataGenerator( preprocessing_function=preprocess_input)","5a0dc6af":"train_image=train_generator.flow_from_dataframe(dataframe=df_train,\n                                                x_col='filepaths',\n                                                y_col='labels',\n                                                target_size=(224,224),\n                                                batch_size=16,\n                                                subset='training',\n                                                random_seed=42)\n\ntest_image = test_generator.flow_from_dataframe(\n    dataframe=df_test,\n    x_col='filepaths',\n    y_col='labels',\n    target_size=(224,224),\n    batch_size=32\n)\n\nvalid_image = test_generator.flow_from_dataframe(\n    dataframe=df_valid,\n    x_col='filepaths',\n    y_col='labels',\n    subset='training',\n    target_size=(224,224),\n    batch_size=32\n)","57be40b6":"pretrained_model = ResNet50(\n    input_shape=(224,224, 3),\n    include_top=False,\n    weights='imagenet',\n    pooling='avg'\n)\npretrained_model.trainable = False#We don't want to train again th resnet","971ddacf":"inputs = pretrained_model.input\n\nx = Dense(120, activation='relu')(pretrained_model.output)\nx = Dense(120, activation='relu')(x)#adding some custom layers of our coice\n\noutputs = Dense(310, activation='softmax')(x)\n#output choice\nmodel = Model(inputs=inputs, outputs=outputs)","44ae3396":"model.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","c20a4ce9":"mo_fit=model.fit(train_image,validation_data=valid_image,epochs=5)","a5f5ca99":"pd.DataFrame(mo_fit.history)[['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\")\nplt.show()\npd.DataFrame(mo_fit.history)[['loss','val_loss']].plot()\nplt.title(\"Loss\")\nplt.show()","3c78e926":"## Data preprocesssing","20c3f8a2":"## Data augmentation","0d66e3a6":"The dataset is small so we are augmenting the data","6733dc62":"## Data Visualization","5ef09c6c":"## Reading the images from dataframe","97b1fccd":"## Model building","3dfededd":"## Import the necessary libraries","b9af1fc1":"**** If u like the notebook and found it helpfull then please upvote it as it helps me to keep writing like this notebook**","2e2fe5e1":"Not Bad! If we train for more epochs we can achieve better accuracy","30c7634c":"## Model Plotting"}}