{"cell_type":{"90bd56bc":"code","67e35801":"code","96486e8e":"code","8f22a852":"code","d57d18a5":"code","c4584ff7":"code","c5bf603f":"code","a6508139":"code","a047c870":"code","10e344d5":"code","24029b3e":"code","85d5fbee":"code","edcd7169":"code","50208ef7":"code","fe184a73":"code","4ae6eabc":"code","57669e4c":"code","e9dee1c1":"code","ceee2736":"code","93bbc562":"code","e49fa435":"code","aeba55e7":"code","8da5714a":"code","16161ac2":"markdown","aa7e2704":"markdown","cefefc36":"markdown","96b59b66":"markdown","debc68c1":"markdown","60db360b":"markdown","5a1bb204":"markdown","7953569d":"markdown","4c55ae0e":"markdown","27ce6f60":"markdown","e92303ae":"markdown","ba854cb1":"markdown","c3b39d26":"markdown","6dcab68b":"markdown"},"source":{"90bd56bc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","67e35801":"countries_dict = {} #dict to contain all countries DataFrames\nstandard = [ #standard for the field names for all countries\n    'total_tested', #Number of all tests performed in the counrtry - positive or negative\n    'newly_tested', #Number of tests performed THIS DAY in the counrtry - positive or negative\n    'total_swabed', #Number of all swabs taken\n    'total_positive', #Number of all positive test outcomes in the counrtry\n    'newly_positive', #Number of positive test outcomes in the counrtry FROM THIS DAY\n    'total_negative', #Number of all negative test outcomes in the counrtry\n    'newly_negative', #Number of negative test outcomes in the counrtry FROM THIS DAY\n    'tests_in_progress', #Number of swabs taken and waiting to finish testing\n    'total_active', #Number of patients currently infected\n    'total_ICU', #Number of patients currently in ICU\n    'total_dead', #Number of people who have died from COVID-19\n    'newly_dead', #Number of people who have died from COVID-19 THIS DAY\n    'total_recovered', #Number of people who have recovered from COVID-19\n    'newly_recovered', #Number of people who have recovered from COVID-19 THIS DAY\n    'total_home_confinement', #\u05d1\u05d9\u05d3\u05d5\u05d3 \u05d1\u05d9\u05ea\n    'total_hospitalized', # (\u05dc\u05d0 ICU) \u05db\u05de\u05d5\u05ea \u05d4\u05d7\u05d5\u05dc\u05d9\u05dd \u05d1\u05d0\u05e9\u05e4\u05d5\u05d6 \u05d1\u05d1\u05d9\u05ea \u05d7\u05d5\u05dc\u05d9\u05dd\n    'newly_hospitalized',\n    'totaL_vent' #\u05de\u05d5\u05e0\u05e9\u05de\u05d9\u05dd\n]\n\nstandard_to_legend_dict = {\n    'newly_positive':'No. of Positive Results',\n    'newly_dead':'No. of new deaths'\n}\n","96486e8e":"def drop_duplicate_columns(df):\n#     print(df)\n\n    return df.loc[:,~df.columns.duplicated()]","8f22a852":"for i in standard:\n    print(i)","d57d18a5":"def load_worldwide():\n    world = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv').dropna(how='all', axis='columns')\n    # print(world)\n    grouped_world = world.groupby(by = 'Country\/Region')\n    \n    # print(grouped_world.groups)\n    for name, group in grouped_world:\n#         world_countries[name] = group\n        group = group.rename(columns = {'ObservationDate':'date', 'total':'total_swabed', 'Confirmed':'total_positive',\n                            'Recovered':'total_recovered', 'Deaths':'total_dead'})\n        group = group.drop(columns = ['SNo', 'Province\/State', 'Country\/Region', 'Last Update'])\n        group = group.groupby(by = 'date').sum()\n\n        group.index = pd.to_datetime(group.index).strftime('%Y-%m-%d')\n        group['newly_dead'] = group['total_dead'].diff()\n        group['newly_positive'] = group['total_positive'].diff()\n        group['newly_recovered'] = group['total_recovered'].diff()\n        countries_dict[name] = group\n    print('world wide loaded')\nload_worldwide()","c4584ff7":"def load_korea():\n    korea = pd.read_csv('\/kaggle\/input\/korea-covid19-tests\/korea_covid19_tests - 1 (3).csv')\n#     list(korea.columns)\n    korea.index = korea['date']\n    korea.index = pd.to_datetime(korea.index).strftime('%Y-%m-%d')\n    del korea['date']\n#     print(korea.index)\n    # print(standard)\n#     korea.info()\n\n    \n    \n    korea = korea.rename(columns = {'total':'total_swabed', 'Confirmed_cases_total':'total_positive',\n                            'discharged':'total_recovered', 'isolated':'total_active',\n                            'Deceased':'total_dead', 'being_tested':'tests_in_progress', 'tested_negative':'total_negative'})\n\n    korea['total_tested'] = korea['total_positive'] + korea['total_negative']\n    korea['newly_tested'] = korea['total_tested'].diff()\n    korea['newly_negative'] = korea['total_negative'].diff()    \n    korea['newly_dead'] = korea['total_dead'].diff()\n    korea['newly_recovered'] = korea['total_recovered'].diff()\n    korea['newly_positive'] = korea['total_positive'].diff()\n    countries_dict['South Korea'] = pd.concat([countries_dict['South Korea'], korea], axis=1, sort = True)\n    countries_dict['South Korea'] = drop_duplicate_columns(countries_dict['South Korea'])\n#     countries_dict['Korea'].info()\n    print('korea loaded')\nload_korea()","c5bf603f":"def load_italy():\n    italy = pd.read_csv(\"..\/input\/covid19-in-italy\/covid19_italy_region.csv\")\n    italy = italy.groupby(by = 'Date').sum()\n#     print(standard)\n#     italy.info()\n\n    del italy['SNo'], italy['RegionCode'], italy['Latitude'], italy['Longitude']\n    italy = italy.rename(columns = {'TotalHospitalizedPatients':'total_hospitalized', 'Deaths':'total_dead',\n                                    'IntensiveCarePatients':'total_ICU', 'CurrentPositiveCases':'total_active',\n                                    'Recovered':'total_recovered', 'TestsPerformed':'total_tested',\n                                    'TotalPositiveCases':'total_positive','NewPositiveCases':'newly_positive',\n                                    'HomeConfinement':'total_home_confinement'})\n\n    italy['total_negative'] = italy['total_tested'] - italy['total_positive']\n    italy['newly_tested'] = italy['total_tested'].diff()\n    italy['newly_negative'] = italy['total_negative'].diff()\n    italy['newly_dead'] = italy['total_dead'].diff()\n    italy['newly_recovered'] = italy['total_recovered'].diff()\n    italy.index = pd.to_datetime(italy.index).strftime('%Y-%m-%d')\n    countries_dict['Italy'] = pd.concat([italy, countries_dict['Italy']], axis=1, sort=True)\n    countries_dict['Italy'] = drop_duplicate_columns(countries_dict['Italy'])\n    #c = c[~c.columns.duplicated(keep='first')]\n\n#     print(italy.index)\n#     countries_dict['Italy'].info()\n    \n    print('italy loaded')\nload_italy()","a6508139":"def load_usa():\n    usa = pd.read_csv(\"..\/input\/covid19-in-usa\/us_covid19_daily.csv\")\n    \n    usa.index = [pd.to_datetime(date, format ='%Y%m%d').strftime('%Y-%m-%d') for date in usa['date']]\n    \n    del usa['date']\n#     print(standard)\n#     usa.info()\n\n\n    usa = usa.rename(columns = {'positive':'total_positive', 'death':'total_dead', 'deathIncrease':'newly_dead', 'positiveIncrease':'newly_positive',\n                                'total':'total_swabed', 'negative':'total_negative', 'totalTestResults':'total_tested', 'negativeIncrease':'newly_negative', 'totalTestResultsIncrease':'newly_tested',\n                                'pending':'tests_in_progress', 'total':'total_swabed', 'hospitalized':'total_hospitalized', 'hospitalizedIncrease':'newly_hospitalized'})\n\n    del usa['states'], usa['posNeg'], usa['dateChecked']\n    \n    countries_dict['US'] = pd.concat([countries_dict['US'], usa], axis=1, sort = True)\n    countries_dict['US'] = drop_duplicate_columns(countries_dict['US'])\n\n#     countries_dict['US'].info()\n    print('usa loaded')\nload_usa()","a047c870":"def load_uk():\n    uk = pd.read_csv(\"\/kaggle\/input\/covid19uk\/data\/covid-19-totals-uk.csv\")\n    uk.index = uk['Date']\n#     print(uk.index)\n    del uk['Date']\n#     print(standard)\n#     uk.info()\n\n\n    uk = uk.rename(columns = {'ConfirmedCases':'total_positive', 'Deaths':'total_dead',\n                                'Tests':'total_tested'})\n\n    uk['total_negative'] = uk['total_tested'] - uk['total_positive']\n    uk['newly_tested'] = uk['total_tested'].diff()\n    uk['newly_negative'] = uk['total_negative'].diff()\n    uk['newly_positive'] = uk['total_positive'].diff()    \n    uk['newly_dead'] = uk['total_dead'].diff()\n\n    countries_dict['UK'] = pd.concat([uk, countries_dict['UK']], axis=1, sort = True)\n    countries_dict['UK'] = drop_duplicate_columns(countries_dict['UK'])\n#     countries_dict['UK'].info()\n    print('uk loaded')\nload_uk()","10e344d5":"def load_pakistan(): # not finished\n    pak = pd.read_csv(\"\/kaggle\/input\/corona-cases-in-pakistan\/Corona Pakistan.csv\")\n    \n#     print(standard)\n    \n    del pak['SNo'], pak['Global Cases'], pak['Global Deaths'], pak['Total Deaths in Italy'], pak['Total Cases in Italy'], pak['Returnees from China'],\\\n                pak['Returnees from Iran'], pak['Cumulative Travellers Screened'], pak['Cumulative Calls'], pak['New Calls'],\\\n                pak['Cumulative - Suspected Cases'], pak['New(Last 24 Hours) - Suspected Cases'], pak['Expired']\n    pak = pak.rename(columns = {'Reporting Date':'date', 'Cumulative Tests Performed':'total_tested', 'Cumulative Test Positive Cases':'total_positive',\n                                'Cumulative Tests Performed in Last 24 Hours':'newly_tested', 'Discharged':'total_recovered'})\n    pak['newly_positive'] = pak['total_positive'].diff()\n    pak['newly_recovered'] = pak['total_recovered'].diff()\n\n\n    pak.index = pak['date']\n    pak.index = pd.to_datetime(pak.index).strftime('%Y-%m-%d')\n#     print(pak.index)\n    del pak['date']\n#     print(pak.info())\n    print('loaded pakistan')\n    countries_dict['Pakistan'] = pak\nload_pakistan()  ","24029b3e":"def load_spain():\n    spain = pd.read_csv(\"\/kaggle\/input\/covid19spain\/covid19_Spain.csv\")\n    spain = spain.groupby(by = 'Date').sum()\n#     print(standard)\n\n    spain = spain.rename(columns = {'Total Infected':'total_positive', 'Death':'total_dead',\n                                'UCI':'total_ICU', 'Hospitalized':'total_hospitalized'})\n    del spain['Report'], spain['IA']\n    spain['newly_dead'] = spain['total_dead'].diff()\n    spain['newly_positive'] = spain['total_positive'].diff()\n    countries_dict['Spain'] = pd.concat([spain, countries_dict['Spain']], axis=1, sort = True)\n#     print(spain.index)\n    print('spain loaded')\n#     print(spain.info())\n\n# load_spain()","85d5fbee":"def load_brazil():\n    brazil = pd.read_csv(\"\/kaggle\/input\/corona-virus-brazil\/brazil_covid19.csv\")\n#     print(brazil)\n#     del brazil['hour']\n    brazil = brazil.groupby(by = 'date').sum()\n#     print(standard)\n#     brazil.info()\n    \n    brazil = brazil.rename(columns = {'cases':'total_positive', 'deaths':'total_dead'})\n#     print(brazil)\n    \n    countries_dict['Brazil'] = pd.concat([countries_dict['Brazil'], brazil], axis=1, sort = True)\n    countries_dict['Brazil'] = drop_duplicate_columns(countries_dict['Brazil'])\n#     brazil.info()\n    \nload_brazil()","edcd7169":"def load_swiss():\n    swiss = pd.read_csv(\"\/kaggle\/input\/openzh-covid-19\/COVID19_Fallzahlen_CH_total.csv\")\n    #['total_tested', 'newly_tested', 'total_swabed', 'total_positive', 'newly_positive', 'total_negative', 'newly_negative', 'tests_in_progress',\n    # 'total_active', 'total_ICU', 'total_dead', 'newly_dead', 'total_recovered', 'newly_recovered', 'total_home_confinement', 'total_hospitalized', 'newly_hospitalized']\n\n    del swiss['time'], swiss['abbreviation_canton_and_fl']\n    swiss = swiss.groupby(by = 'date').sum()\n    \n    swiss = swiss.rename(columns = {'ncumul_tested':'total_tested', 'ncumul_conf':'total_positive', 'ncumul_hosp':'total_hospitalized', 'ncumul_ICU':'total_ICU', 'ncumul_vent':'total_vent', 'ncumul_released':'total_recovered', 'ncumul_deceased':'total_dead'})\n    \n    swiss['total_negative'] = swiss['total_tested'] - swiss['total_positive']\n    swiss['newly_tested'] = swiss['total_tested'].diff()\n    swiss['newly_negative'] = swiss['total_negative'].diff()\n    swiss['newly_positive'] = swiss['total_positive'].diff()    \n    swiss['newly_dead'] = swiss['total_dead'].diff()\n    swiss['newly_hospitalized'] = swiss['total_hospitalized'].diff()\n    countries_dict['Switzerland'] = pd.concat([countries_dict['Switzerland'], swiss], axis=1, sort = True)\n    countries_dict['Switzerland'] = drop_duplicate_columns(countries_dict['Switzerland'])\n#     brazil.info()\n    \nload_swiss()","50208ef7":"def load_france():\n    france = pd.read_csv(\"\/kaggle\/input\/coronavirusdataset-france\/chiffres-cles.csv\")\n    #['total_tested', 'newly_tested', 'total_swabed', 'total_positive', 'newly_positive', 'total_negative', 'newly_negative', 'tests_in_progress',\n    # 'total_active', 'total_ICU', 'total_dead', 'newly_dead', 'total_recovered', 'newly_recovered', 'total_home_confinement', 'total_hospitalized', 'newly_hospitalized']\n\n    del swiss['time'], swiss['abbreviation_canton_and_fl']\n    swiss = swiss.groupby(by = 'date').sum()\n    \n    swiss = swiss.rename(columns = {'ncumul_tested':'total_tested', 'ncumul_conf':'total_positive', 'ncumul_hosp':'total_hospitalized', 'ncumul_ICU':'total_ICU', 'ncumul_vent':'total_vent', 'ncumul_released':'total_recovered', 'ncumul_deceased':'total_dead'})\n    \n    swiss['total_negative'] = swiss['total_tested'] - swiss['total_positive']\n    swiss['newly_tested'] = swiss['total_tested'].diff()\n    swiss['newly_negative'] = swiss['total_negative'].diff()\n    swiss['newly_positive'] = swiss['total_positive'].diff()    \n    swiss['newly_dead'] = swiss['total_dead'].diff()\n    swiss['newly_hospitalized'] = swiss['total_hospitalized'].diff()\n    countries_dict['Switzerland'] = pd.concat([countries_dict['Switzerland'], swiss], axis=1, sort = True)\n    countries_dict['Switzerland'] = drop_duplicate_columns(countries_dict['Switzerland'])\n    \nload_france()","fe184a73":"def load_all():\n    load_worldwide()\n    load_korea()\n    load_usa()\n    load_italy()\n    load_uk()\n#     load_spain()\n    load_pakistan()\n    load_brazil()\n    load_swiss()\n    \nload_all()","4ae6eabc":"def check_update_date(countries):\n    for country in countries:\n        print(country, countries[country].index[-1])","57669e4c":"def check_avilable_data(countries):\n    df = pd.DataFrame(index = standard)\n    for country in countries:\n        ones = {}\n        for i in countries[country].columns:\n            ones[i] = 1\n        ser = pd.Series(ones)\n        ser = ser.rename(country)\n        df[country]=ser\n    df.fillna(value=0, inplace=True)\n    df = df.astype(int)\n    df = df.style.background_gradient(cmap='Blues')\n    return df","e9dee1c1":"check_avilable_data(countries_dict)","ceee2736":"pd.to_datetime(countries_dict['US'].index, )","93bbc562":"def masterViz(country_name=countries_dict, viz=1, country_df=None):\n    if type(country_name) == list:\n        for country in country_name:\n            masterViz(country, viz)\n    elif type(country_name) == dict:\n        for country, di in country_name.items():\n            masterViz(country, viz)\n    else:\n        functions = {\n            1 : viz1, 'positives ratio' : viz1,\n            2 : viz2, 'swabs' : viz2,\n            3 : viz3, 'tests' : viz3\n        }\n        if country_df == None:\n            country_df = countries_dict[country_name]\n        try:\n            functions[viz](country_name, country_df)\n        except KeyError:\n            print('no such function')","e49fa435":"def vizTest(country_name, fields, axes=plt.subplots(nrows=1, ncols=1), figsize=(20,10)):\n    ofigsize = figsize\n    figsize = (figsize[0]*axes.get_geometry()[0], figsize[1]*axes.get_geometry()[1])\n    data = countries_dict[country_name][fields].sort_index()\n    ax = data.plot.area(figsize=figsize, linewidth=3, title = country_name, fontsize = figsize[0]\/axes.get_geometry()[0], stacked=False, ax=axes)\n    ax.set_title(country_name, fontsize=15)\n#     ax.set_yscale('log')\n    ax.legend([standard_to_legend_dict[field] for field in fields], loc='upper left')\n    ax.grid()\n#     ax.set_xticks(fontsize=10)\n    ax.set_xlabel('Date', fontsize = figsize[0]\/(1.5*axes.get_geometry()[0]))\n    ax.tick_params(axis='both', which='major', labelsize=figsize[0]\/(2*axes.get_geometry()[0]))\n#     print(data)\n    return ax\n        \n","aeba55e7":"fig, axes = plt.subplots(nrows=3, ncols=2)\nfig.tight_layout(pad=0.3)\nvizTest('Mainland China', ['newly_positive', 'newly_dead'], axes[0,0])\nvizTest('Singapore', ['newly_positive', 'newly_dead'], axes[0,1])\nvizTest('Hong Kong', ['newly_positive', 'newly_dead'], axes[1,0])\nvizTest('Taiwan', ['newly_positive', 'newly_dead'], axes[1,1])\nvizTest('Japan', ['newly_positive', 'newly_dead'], axes[2,0])\nvizTest('South Korea', ['newly_positive', 'newly_dead'], axes[2,1])","8da5714a":"fig, axes = plt.subplots(nrows=1, ncols=1)\nvizTest('Mainland China', ['newly_positive', 'newly_dead'], axes, figsize=(20,10))\nfig, axes = plt.subplots(nrows=1, ncols=1)\nvizTest('Singapore', ['newly_positive', 'newly_dead'], axes, figsize=(20,10))\nfig, axes = plt.subplots(nrows=1, ncols=1)\nvizTest('Hong Kong', ['newly_positive', 'newly_dead'], axes, figsize=(20,10))\nfig, axes = plt.subplots(nrows=1, ncols=1)\nvizTest('Taiwan', ['newly_positive', 'newly_dead'], axes, figsize=(20,10))\nfig, axes = plt.subplots(nrows=1, ncols=1)\nvizTest('Japan', ['newly_positive', 'newly_dead'], axes, figsize=(20,10))\nfig, axes = plt.subplots(nrows=1, ncols=1)\nvizTest('South Korea', ['newly_positive', 'newly_dead'], axes, figsize=(20,10))","16161ac2":">> spain","aa7e2704":"> > pakistan","cefefc36":">>Brazil","96b59b66":"> > USA","debc68c1":"> > UK","60db360b":"> > World wide","5a1bb204":"> **Vizualisations**","7953569d":"> > Italy","4c55ae0e":"> > Korea  ","27ce6f60":">>france","e92303ae":">>Load all","ba854cb1":"> > functios","c3b39d26":">> swiss","6dcab68b":"> **Data organizing and standardizing**"}}