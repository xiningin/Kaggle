{"cell_type":{"919163c5":"code","c17ea9cc":"code","76f6a14a":"code","ade53e79":"code","746e2682":"code","011f506a":"code","081b7577":"code","2187a1f6":"code","38e9c62f":"code","c3ab9a60":"code","133588c7":"code","d7b29496":"code","2d545816":"code","7c8ba58b":"code","4add2639":"code","8600a71f":"code","b545d4f6":"code","90bf9508":"code","c99692f0":"code","1e8e8603":"code","c5d176b2":"code","91dca801":"code","1079033e":"code","92cc3c9e":"code","cb148f7c":"code","a32c4fa4":"markdown","f0be619f":"markdown","feb54a54":"markdown"},"source":{"919163c5":"from fastai.tabular import *\nfrom fastai.callbacks import ReduceLROnPlateauCallback,EarlyStoppingCallback\nfrom sklearn.metrics import roc_auc_score\nimport joblib\nimport gc\nimport os\nprint(os.listdir(\"..\/input\"))","c17ea9cc":"class roc(Callback):\n    \n    def on_epoch_begin(self, **kwargs):\n        self.total = 0\n        self.batch_count = 0\n    \n    def on_batch_end(self, last_output, last_target, **kwargs):\n        preds = F.softmax(last_output, dim=1)\n        roc_score = roc_auc_score(to_np(last_target), to_np(preds[:,1]))\n        self.total += roc_score\n        self.batch_count += 1\n    \n    def on_epoch_end(self, num_batch, **kwargs):\n        self.metric = self.total\/self.batch_count","76f6a14a":"df = pd.read_csv('..\/input\/train.csv')\ndf_test = pd.read_csv('..\/input\/test.csv')","ade53e79":"df.shape","746e2682":"df_test.shape","011f506a":"df.head()","081b7577":"df_test.head()","2187a1f6":"from imblearn.over_sampling import RandomOverSampler\nros = RandomOverSampler()\ndf_resampled, y_resampled = ros.fit_sample(df, df['target'])\ndf_resampled = pd.DataFrame(df_resampled, columns = df.columns)\ndf['target'].mean(), df_resampled['target'].mean()","38e9c62f":"#df_resampled['var_0'].dtype","c3ab9a60":"#cols = df.columns\nnum_cols = df._get_numeric_data().columns\n#list(set(cols) - set(num_cols))\nnum_cols","133588c7":"df_resampled.shape","d7b29496":"dep_var = 'target'\ncont_names = num_cols[1:].tolist()\nprocs = [FillMissing, Categorify, Normalize]","2d545816":"df_resampled[cont_names] = df_resampled[cont_names].apply(pd.to_numeric)\ndf_resampled['target'] = df_resampled['target'].astype('int')","7c8ba58b":"test = TabularList.from_df(df_test, cont_names=cont_names)\ndata = (TabularList.from_df(df_resampled, cont_names=cont_names, procs=procs)\n                           .random_split_by_pct(0.1)\n                           .label_from_df(cols=dep_var)\n                           .add_test(test)\n                           .databunch())","4add2639":"data.show_batch(rows=10)","8600a71f":"learn = tabular_learner(data, layers=[256, 128], ps=[0,0], metrics=[accuracy], y_range=(0, 1)).to_fp16()","b545d4f6":"learn.lr_find()","90bf9508":"learn.recorder.plot()","c99692f0":"learn.fit_one_cycle(25, 1e-3)","1e8e8603":"learn.recorder.plot_losses()","c5d176b2":"learn.save('0')\n#learn.load('0')","91dca801":"probs, _ = learn.get_preds(ds_type=DatasetType.Test) ","1079033e":"len(pred)","92cc3c9e":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['target'] =  F.softmax(probs, dim=1)[:, 1].numpy()\nsubmission.to_csv('starter_submission.csv', index=False)","cb148f7c":"#y_pred = learn.get_preds(ds_type=DatasetType.Valid) \n#roc_auc_own(y_pred[0], y_pred[1])","a32c4fa4":"# Import modules and data","f0be619f":"# Balance class","feb54a54":"class CategoryList sets it to CrossEntropyFlat()\n\nclass MultiCategoryList sets it to BCEWithLogitsFlat()\n\nclass FloatList (for regression problems) sets it to MSELossFlat()"}}