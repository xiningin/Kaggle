{"cell_type":{"bc3d9bd5":"code","9515a0d6":"code","b69fd678":"code","aca54a91":"code","60dfbb60":"code","8e3814b3":"code","2a532d2d":"code","feec5d29":"code","1b7bb2a7":"code","eb692724":"code","3dd6ca58":"code","46357db6":"code","8930004c":"code","25251036":"code","dc7321e5":"code","5f184aa7":"code","0355c30c":"code","275c281b":"code","42e410a9":"code","345f8d53":"code","25159c66":"code","7ab76674":"code","1d6de484":"code","f384d62c":"code","5200b648":"code","03b061f5":"code","9fdce0f7":"code","8112a927":"code","8e3152d3":"code","a57678d6":"code","6149c5c5":"code","14cba5a2":"markdown","61129be5":"markdown","b59d0fa4":"markdown","2092e7f4":"markdown","85ffcd4b":"markdown","f8eeb496":"markdown","1e19a17a":"markdown","e6beb8cf":"markdown","757ed955":"markdown","842e25c1":"markdown","e9ffd43a":"markdown","cb4efd1e":"markdown","22313c43":"markdown","faec4713":"markdown","22b3b3cb":"markdown","903358f0":"markdown","a21d14f2":"markdown","3497b321":"markdown","0ac7a82c":"markdown","91c23e79":"markdown","ce60d9ec":"markdown","913ff2d8":"markdown","e97ce5c4":"markdown","1306ab0b":"markdown"},"source":{"bc3d9bd5":"import numpy as np\nimport pandas as pd\n# import matplotlib.pyplot as plt","9515a0d6":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv', decimal=',')\n# df_train.Age = df_train['Age'].astype(float)\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv', decimal=',')\n# df_test.Age = df_test['Age'].astype(float)\n\ndf_all = pd.concat([df_train, df_test], sort=False, copy=False, ignore_index=True)","b69fd678":"# show the infomation include column names, number of entries, number of non-null value, data type\nprint(df_train.info())\n","aca54a91":"# show the first 5 entries\ndf_train.head(6)","60dfbb60":"# show some basic statistical values, note that only the features with \"int64\" data type are discribed.\ndf_train.describe()","8e3814b3":"print(df_test.info())\n","2a532d2d":"df_test.head()","feec5d29":"df_all.info()","1b7bb2a7":"tmp = df_train.groupby('Survived').Pclass\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar()","eb692724":"tmp = df_train.groupby('Survived').Sex\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar()","3dd6ca58":"df_train.Age = df_train['Age'].astype(float)\ntmp = df_train.groupby('Survived').Age\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot(kind='bar', figsize=[20,5], sort_columns=True)\n#tmp.plot.hist(alpha=0.7, legend=True, bins=25)","46357db6":"tmp = df_train.groupby('Survived').Parch\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar()","8930004c":"tmp = df_train.groupby('Survived').SibSp\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar()","25251036":"tmp = df_train.groupby('Survived').Fare\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar(figsize=[20,5])","dc7321e5":"tmp = df_train.groupby('Survived').Embarked\n(tmp.value_counts()[1] \/ (tmp.value_counts()[1] + tmp.value_counts()[0])).fillna(0).plot.bar()\n","5f184aa7":"df_train.head(10)","0355c30c":"# create title columns\ndef makeTitle(df):\n    for index, row in df.iterrows():\n        pos_comma = row['Name'].find(',')\n        pos_point = row['Name'].find('.')\n        df.at[index, 'Title'] = (row['Name'][pos_comma+2:pos_point])\n        \n    titles = {\n        \"Capt\":       \"Officer\",\n        \"Col\":        \"Officer\",\n        \"Major\":      \"Officer\",\n        \"Jonkheer\":   \"Royalty\",\n        \"Don\":        \"Royalty\",\n        \"Sir\" :       \"Royalty\",\n        \"Dr\":         \"Officer\",\n        \"Rev\":        \"Officer\",\n        \"the Countess\":\"Royalty\",\n        \"Dona\":       \"Royalty\",\n        \"Mme\":        \"Mrs\",\n        \"Mlle\":       \"Miss\",\n        \"Ms\":         \"Mrs\",\n        \"Mr\" :        \"Mr\",\n        \"Mrs\" :       \"Mrs\",\n        \"Miss\" :      \"Miss\",\n        \"Master\" :    \"Master\",\n        \"Lady\" :      \"Royalty\"\n    }\n    df.Title = df.Title.map(titles)\n    \n    return df\n        \ntmp = makeTitle(df_train)\ntmp = tmp.groupby(['Survived', 'Title'])\n(tmp.size()[1] \/ (tmp.size()[1] + tmp.size()[0])).fillna(0).plot.bar()","275c281b":"import re\n\ndef getTicketNumber(df):\n    df = df.copy()\n    for index,row in df.iterrows():\n        if (row['Ticket'] == 'LINE'):\n            df.at[index, 'Ticket'] = -1\n        else:\n            ticketNum = re.sub('[^0-9]','', row['Ticket'])\n            df.at[index, 'Ticket'] = float(ticketNum)\n    df.astype({'Ticket': 'int32'}).dtypes\n    return df\n\ntmp = getTicketNumber(df_train)\ntmp = tmp.groupby(['Ticket']).agg({'PassengerId':'count', 'Survived':'mean'})\ntmp = tmp.rename(columns={\"PassengerId\": \"Count\", \"Survived\": \"Survived %\"})\nprint('Traveling in Group')\nprint('Average group size: ' + str(tmp[tmp['Count'] > 1].mean()['Count']))\nprint('Chances to survive in a group: ' + str(tmp[tmp['Count'] > 1].mean()['Survived %']))\nprint()\nprint('Traveling alone')\nprint('Average group size: ' + str(tmp[tmp['Count'] == 1].mean()['Count']))\nprint('Chances to survive in a group: ' + str(tmp[tmp['Count'] == 1].mean()['Survived %']))","42e410a9":"def fillingGaps(df):\n    for index, row in df.iterrows():\n        if (np.isnan(row.Age)):\n            df.loc[index, 'Age'] = df[(df.Sex == row.Sex) & (df.Pclass == row.Pclass)].Age.mean()\n\n    \n    return df\n# Since Age is in \"object\" type, we cannot calculate the mean value. We have cast the object to new type \"float\"\ndf_all.Age = df_all['Age'].astype(float)\ndf_all = fillingGaps(df_all)\ndf_all.info()","345f8d53":"df_all = makeTitle(df_all)\ndf_all = getTicketNumber(df_all)\ndf_all['travelingInGroup'] = df_all.duplicated(['Ticket'], keep=False) # Mark all duplicate ticket as True, otherwise false.\ndf_all.head(5)","25159c66":"def tranformData(df):  \n    df = df.copy()\n    for index in df.index:   \n        \n        #PClass\n        pClass = df.iloc[index].Pclass\n        if pClass == 1:\n            df.at[index,'Pclass_1'] = 1\n        elif pClass == 2:\n            df.at[index,'Pclass_2'] = 1\n        elif pClass == 3:\n            df.at[index,'Pclass_3'] = 1\n      \n        #Sex\n        sex = df.iloc[index].Sex\n        if(sex == 'male'):\n            df.at[index, 'Sex'] = 0\n        elif(sex == 'female'):\n            df.at[index, 'Sex'] = 1\n        \n        #Embarked\n        embarked = df.iloc[index].Embarked\n        if embarked == 'Q':\n            df.at[index, 'EmbarkedQ'] = 1\n        elif embarked == 'C':\n            df.at[index, 'EmbarkedC'] = 1\n        elif embarked == 'S':\n            df.at[index, 'EmbarkedS'] = 1\n\n    \n        #Title\n        title = df.iloc[index].Title\n        df.at[index, title] = 1\n        \n            \n    df = df.drop(columns=['Pclass', 'Title', 'Embarked'])\n    df = df.fillna(0);\n    \n    return df\n\ntmp = tranformData(df_all)\ndf_all = tmp\ndf_all.info()","7ab76674":"df_all.head(3)","1d6de484":"df_sub = df_all.drop(['Name', 'Cabin', 'PassengerId', 'Survived', 'Ticket'], 1)\ndf_sub.head(1)","f384d62c":"df_sub.info()\ndf_sub.Fare = df_sub['Fare'].astype(float)\ndf_sub.info()","5200b648":"y_train = df_train[:891].Survived\nX_train = df_sub[:891]\nX_test = df_sub[891:]","03b061f5":"from sklearn.model_selection import cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\n\ndef testRandomForestClassifier(X, y):\n    clf = RandomForestClassifier(n_estimators=20, max_depth=10, random_state=0)\n    result = cross_val_score(clf , X, y , cv=10) \n    print(result)\n    print(result.mean()) # output average \n    clf.fit(X,y)\n    return pd.DataFrame(clf.feature_importances_, index = X.columns, columns=['importance']).sort_values('importance',ascending=False)","9fdce0f7":"testRandomForestClassifier(X_train, y_train)","8112a927":"X_train = X_train.drop(['Master', 'Parch','EmbarkedC', 'EmbarkedQ', 'EmbarkedS'],1)\nX_test = X_test.drop(['Master', 'Parch','EmbarkedC', 'EmbarkedQ', 'EmbarkedS'],1)","8e3152d3":"X_train.info()","a57678d6":"testRandomForestClassifier(X_train, y_train)","6149c5c5":"clf = RandomForestClassifier(n_estimators=20, max_depth=10, random_state=0)\nclf.fit(X_train,y_train)\nresult = clf.predict(X_test)\nprint(result[0:10])\n","14cba5a2":"# Test Model","61129be5":"### Probability to survive if travelling in group.\n** (Group = all people in a group have the same ticket *number*) **","b59d0fa4":"### Probability to survive according to *Title*\n** We guess that people's titles in the \"Name\" column may be useful. So we create a feature named 'Title' and try to categorize the initial various titles in the Name.","2092e7f4":"# Split training and test Data","85ffcd4b":"### Probability to survive according to *SibSp*","f8eeb496":"### Probability to survive according to *Fare*","1e19a17a":"# Import python packages","e6beb8cf":"## final check before modeling data","757ed955":"### Probability to survive according to *Age*","842e25c1":"# Select feature for training\n** Now we can choose which features for training and drop the rest. **\n##### Chosen: \n* Sex\n* Age \n* Pclass \n* Title\n* TravelingInGroup \n* Fare \n* SibSp \n* Parch \n* Embarked\n\n##### Dropped: \n* Name\n* Cabin \n* PassengerId\n* Survived\n* Ticket\n","e9ffd43a":"## Check the basic information of data\n**Training Data**","cb4efd1e":"### Probability to survive according to *Pclass*","22313c43":"# Create new features\n* Title\n* Traveling in Group","faec4713":"# Data Transformation\n** We notice that the following features are categorical and in \"object\" type. Therefore, we need to encode them to numerics. The idea is using 1 or 0 to indicate one category.\n* Pclass\n* Sex\n* Embarked\n* Title","22b3b3cb":"# Load Training and Test Data\n","903358f0":"**Test Data**","a21d14f2":"# Exploratory Data Analysis: We want to know which features may be related to survival truth\n","3497b321":"### Probability to survive according to *Sex*\n","0ac7a82c":"**All Date**","91c23e79":"# Data pre-processing\n** Filling the age data gaps. We use the mean of the Ages from the entries with same Sex and Pclass value. **","ce60d9ec":"### Probability to survive according to *Parch*","913ff2d8":"## Remove some unimportant features \n> Features with small importance are sometime noise instead of qualified indicator. So removing some of them may improve your model. ","e97ce5c4":"### Probability to survive according to *Embarked*","1306ab0b":"# Train and Validate\n** We use cross validation to validate the performance (accuracy by default) of our model. **\n> Cross Validation reserves part of training dataset hidden during the training phase and use the reserved data to test the performance. "}}