{"cell_type":{"a1846591":"code","7407ca80":"code","87c90d65":"code","7fe55303":"code","dbc8472b":"code","2fa3e891":"code","dd5461b8":"code","c5742c40":"code","a4177dfc":"code","b54682c9":"code","435da14c":"code","8cfadb45":"code","a0a4c738":"code","ada4962d":"code","70246a36":"code","d8dfa417":"code","24e7a446":"code","5615b034":"code","cf2d0151":"code","0ace1ef9":"code","f1a5fd42":"code","579e950b":"code","dd02bb7d":"code","2b42866c":"code","100d404f":"code","b6d8db26":"code","3630fa0b":"code","3c71e3d2":"code","150a22d8":"code","b95138ee":"code","b20873be":"code","8d2899d3":"code","d402e173":"code","593d9ece":"code","1eb3040e":"code","6281a07b":"code","3a21427c":"code","97500d25":"code","eac16783":"code","17b7fc0c":"code","ccc99199":"code","5da5c822":"code","221f80e5":"code","95890898":"code","e3f7ad60":"markdown","44374f4f":"markdown","dafc7944":"markdown","08766ad0":"markdown","03d27ac9":"markdown","42558fb7":"markdown","bf0f9f2a":"markdown","1e806c42":"markdown","4c72af5f":"markdown","25c0e4a3":"markdown","a246a1c9":"markdown","c8e56820":"markdown","0ac2abea":"markdown","8337e699":"markdown","1028e626":"markdown","1d8f9e14":"markdown","cb31e1f3":"markdown","5b3905ac":"markdown","607182a6":"markdown","b3595ba1":"markdown","bcd6a399":"markdown","ba71a3b6":"markdown","c14639b2":"markdown"},"source":{"a1846591":"import matplotlib.pyplot as plt\nimport cufflinks as cf\nimport sklearn\nfrom sklearn import svm, preprocessing \nimport seaborn as sns\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport random\nimport plotly.graph_objs as go\nimport plotly.plotly as py\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\nimport os","7407ca80":"df = pd.read_csv('..\/input\/googleplaystore.csv')\ndf.info()","87c90d65":"df = df.drop_duplicates(subset=['App'], keep = 'first')  # Removing duplicates by app names.\ndf.head()","7fe55303":"print(df['Category'].unique())","dbc8472b":"df = df[df.Category != '1.9']","2fa3e891":"# finding which categories have more apps\ndf_catr = df.groupby('Category').count()['App'].sort_values(ascending = False).reset_index()","dd5461b8":"data = [go.Pie(\n            values=df_catr['App'],\n            labels=df_catr['Category'],\n#             orientation = 'h'\n)]\nlayout = go.Layout(\n    title = 'Number of Apps in the store per Caterory', \n)\nfig = go.Figure(data = data , layout = layout)\niplot(fig, filename='Pie')","c5742c40":"# checking for null values. \nprint(df['Rating'].isna().sum())","a4177dfc":"df['Rating'].mean()","b54682c9":"df['Rating'] = df.groupby('Category').transform(lambda x: x.fillna(x.mean()))['Rating']","435da14c":"df['Rating'].hist()\nplt.show()","8cfadb45":"df.Rating.describe()","a0a4c738":"# checking for Nan values \ndf['Reviews'].isna().sum()","ada4962d":"df['Reviews'] = pd.to_numeric(df['Reviews'])\ndf['Reviews'].describe()","70246a36":"df['Reviews'].hist()","d8dfa417":"df[df['Reviews'] >= 50000000]","24e7a446":"# First we need to preprocess the installs column and convert those strings into integer values. ","5615b034":"df['Installs'] = df['Installs'].str.replace(',', '')\ndf['Installs'] = df['Installs'].str.replace('+', '')\ndf['Installs'] = pd.to_numeric(df['Installs'])","cf2d0151":"df['Installs'].describe()","0ace1ef9":"df[df['Installs'] <100]['App'].count()","f1a5fd42":"df['Installs'].count()","579e950b":"data = [go.Histogram(x=df['Installs'], nbinsx = 500, marker=dict(color='#10BD22'))]\nlayout = go.Layout(\n    title = 'Distribution of number of Installs. ',\n    xaxis=dict(\n        title='#Installs'\n    ),\n    yaxis=dict(\n        title='Count'\n    )\n)\nfig = go.Figure(data = data , layout = layout)\n\niplot(fig, filename='histogram')","dd02bb7d":"top_installed = df.sort_values(by = ['Installs'], ascending = False)[:20]","2b42866c":"top_installed.groupby('Category')['App'].count().sort_values().plot.bar()","100d404f":"top_installed.groupby('Content Rating')['App'].count().sort_values().plot.bar()\nplt.show()","b6d8db26":"df['Type'].unique()","3630fa0b":"df.drop(df[df['Type'].isna()].index, inplace = True)","3c71e3d2":"sns.set(style=\"darkgrid\")\nsns.countplot(x=\"Type\", data = df)\nplt.show()","150a22d8":"top_paid = df[df['Type'] == 'Paid'].groupby('Category').count()['App'].sort_values(ascending = True).reset_index()","b95138ee":"data = [go.Bar(\n            x=top_paid['App'],\n            y=top_paid['Category'],\n            orientation = 'h'\n)]\nlayout = go.Layout(\n    title = 'Distribution of Paid apps in Categories', \n    xaxis = dict(\n        title = 'Count')\n)\nfig = go.Figure(data = data , layout = layout)\niplot(fig, filename='horizontal-bar')","b20873be":"data = [go.Histogram(x=df[df['Type'] == 'Paid']['Installs'], nbinsx = 500, marker=dict(color='#D389EC'))]\niplot(data, filename='histogram')","8d2899d3":"df[df['Type'] == 'Paid'].sort_values(by = 'Installs', ascending = False)[:20].groupby('Category').count()['App'].sort_values().plot.bar()","d402e173":"df['Price'] = df['Price'].str.replace('$', '')\ndf['Price'] = pd.to_numeric(df['Price'])","593d9ece":"data = [go.Histogram(x=df[df['Price']>0]['Price'],  nbinsx = 200, marker=dict(color='#37CDEA'))]\nlayout = go.Layout(\n    title = 'Distribution of price of Paid apps', \n    xaxis = dict(\n        title = 'Price in $')\n)\nfig = go.Figure(data = data , layout = layout)\niplot(fig, filename='histogram')","1eb3040e":"df[df['Price'] > 300]","6281a07b":"df[df['Size'] == 'Varies with device'].count()['App']  # number of apps having variable size","3a21427c":"fixed_size = df[df['Size'] != 'Varies with device']","97500d25":"# source : https:\/\/stackoverflow.com\/questions\/39684548\/convert-the-string-2-90k-to-2900-or-5-2m-to-5200000-in-pandas-dataframe\nfixed_size['Size'] = fixed_size['Size'].str.replace(r'[kM]+$', '', regex = True).astype(float) * \\\nfixed_size['Size'].str.extract(r'[\\d\\.]+([kM]+)', expand = False).fillna(1).replace(['k','M'], [10**0, 10**3]).astype(int)","eac16783":"fixed_size['Size'].describe()","17b7fc0c":"data = [go.Histogram(x = fixed_size['Size'],  nbinsx = 50, marker=dict(color='#FCB461'))]\nlayout = go.Layout(\n    title = 'Distribution of app size', \n    xaxis = dict(\n        title = 'Size in KB')\n)\nfig = go.Figure(data = data , layout = layout)\niplot(fig, filename='histogram')","ccc99199":"fixed_size['Size'].describe()","5da5c822":"plt.figure(figsize=(15,5))\nsns.scatterplot(x=\"Size\", y=\"Installs\", hue = 'Content Rating',size = 'Content Rating', data=fixed_size)\nplt.show()","221f80e5":"df_rating = df.groupby('Content Rating').count()['App'].reset_index()\ndf_rating","95890898":"data = [go.Pie(\n            values=df_rating['App'],\n            labels=df_rating['Content Rating'],\n#             orientation = 'h'\n)]\nlayout = go.Layout(\n    title = 'Number of Apps in different Content Rating', \n)\nfig = go.Figure(data = data , layout = layout)\niplot(fig, filename='Pie')","e3f7ad60":"### So there are 20 Apps which have the maximum number of installs(over 1B), lets see which categories these apps belogn to. ","44374f4f":"**Observations:** Every feature is of type object, that means we'll have to change some data types and also check for NaN values. ","dafc7944":"### Apps which have price less than 15\\$ have the most number of installs, but there are some apps having much higher price (>350\\****$) lets see what these are. ","08766ad0":"## **[2.6] Price**","03d27ac9":"## **[2.7] SIZE**","42558fb7":"## **[2.5] Type**","bf0f9f2a":"### We have some Sizes that varies with device and some are constant. lets see whats the distribution of fixed size anyways. ","1e806c42":"### On looking up, these apps are basically trolls, they have no content but exceptionally high price.The idea behind these apps is that if someone has a lot of money they will buy these apps to show that. What really interesting is that people do download these apps. smh\n","4c72af5f":"## **[2] Feature Analysis**","25c0e4a3":"## **[3] Conclusion:** \n1. Family and Gaming categories dominate the play store. \n2. Most of the apps have average rating of 4.5\n3. Social media and texting application have most number of downloads and reviews. \n4. Except some troll apps, average pricing is below 15 \\$, and these apps are mainly under gaming category.\n5. Mean app size is 20MB, number of apps significantly decrease as size decreases. \n6. Most of the apps are of 'Everyone' Rating. Although, 'Teen' apps have significantly high number of Installs. ","a246a1c9":"### **Observations:** So it can be seen that the max reviews apps in the store are mostly Social media\/texting apps. ","c8e56820":"### Mostly apps have very low number of reviews, but there are some apps having over 50M reviews. lets see which apps these are.","0ac2abea":"## **[2.1] Category** ","8337e699":"## **[2.4] Installs**","1028e626":"### Most of the are for everyone, although 18+ and unrated have least number of apps. ","1d8f9e14":"### Texting and social media apps have max number of downloads overall. ","cb31e1f3":"### **Observations:** - Size and Installs feature need some preprocessing. ","5b3905ac":"## **[2.3] Reviews**","607182a6":"## **[2.2] RATING**","b3595ba1":"### **Observations:** It is clear that users often dont give negative ratings as much they give positive ratings.  That is also obvious, as most of the times when we dont like an app, we directly uninstall it rather giving it a review. ","bcd6a399":"## **[1] Reading Data**","ba71a3b6":"## **[2.8] Rating**","c14639b2":"### Now we can fill the Null values with the overall mean of Ratings, but as the number of Null values are very high, this can distort the original distribution. hence we'll fill the null values with the mean of their respectve Categories, so it wont be same for every row. "}}