{"cell_type":{"3796ebcc":"code","0f430692":"code","8bdde2f0":"code","0b8a1240":"code","831260c6":"code","ee29f39e":"code","11912a18":"code","6de63f89":"code","7a12ae86":"code","9b7d3f08":"code","a0505815":"code","f5a79f95":"code","184c10c5":"code","c3435a3d":"code","9e24f0be":"code","d02c53fa":"code","2ff90949":"code","dd62327a":"code","0bedc44d":"code","3f5b5d58":"code","9d1730a2":"code","ff7988a2":"code","9010af7b":"code","707b4445":"code","465c0874":"code","08a9fa91":"code","89208012":"code","8d49fec1":"code","a323913f":"code","9fb24477":"code","f7aea9a3":"code","da9c8161":"code","daa97ec6":"code","dbc4827c":"code","309b9485":"code","b0831f1e":"code","3b85ba82":"code","ba6b5e31":"code","9c98791d":"code","b95017c7":"code","ab427434":"code","c691e42a":"code","dda5b5f1":"code","7d8cafad":"code","bad76a98":"code","b7f3afa1":"code","104f6142":"code","2154347c":"code","b9c8009f":"code","85096d39":"markdown","627ee463":"markdown","c4acd2d0":"markdown","1edb0145":"markdown","878a31aa":"markdown","886774fa":"markdown","43a6e537":"markdown","d120fdd8":"markdown","d80c7e80":"markdown","18975848":"markdown","965f7019":"markdown","c37ca1be":"markdown","b49e987b":"markdown","cf1ba2be":"markdown","7773a08a":"markdown","9dc1eda4":"markdown","9ca7d378":"markdown","1036e9f0":"markdown","dee7c211":"markdown","08f0a53f":"markdown","76617c00":"markdown","0eb75383":"markdown","f8888d8f":"markdown"},"source":{"3796ebcc":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f430692":"import matplotlib.pyplot as plt\nimport seaborn as sb\nimport plotly as py\nimport plotly.graph_objs as go\nimport plotly.express as px","8bdde2f0":"data=pd.read_csv('..\/input\/suicide-rates-overview-1985-to-2016\/master.csv')","0b8a1240":"data.head(10)","831260c6":"data.info()","ee29f39e":"data.tail(10)","11912a18":"data.describe()","6de63f89":"data.columns","7a12ae86":"data.shape","9b7d3f08":"suicide_in_countries = data.groupby('country')","a0505815":"country_suicide_series = suicide_in_countries['suicides_no'].sum()","f5a79f95":"country_suicide_series.head()","184c10c5":"data=pd.read_csv('..\/input\/suicide-rates-overview-1985-to-2016\/master.csv')","c3435a3d":"# 2016 y\u0131l\u0131na ait veriseti\nsene_2016 = data[(data['year'] == 2016)]\n\n# 2016 y\u0131l\u0131ndaki toplam intihar say\u0131s\u0131 (\u00fclke \u00e7ap\u0131nda)\nsene_2016 = sene_2016.groupby('country')[['suicides_no']].sum().reset_index()\n\n# De\u011ferleri artan d\u00fczende s\u0131ralad\u0131m\nsene_2016 = sene_2016.sort_values(by='suicides_no', ascending=False)","9e24f0be":"fig = px.bar(sene_2016, x=sene_2016['suicides_no'], y=sene_2016['country'], color=sene_2016['country'], color_discrete_sequence=px.colors.qualitative.Pastel)\n\nfig.update_layout(title={\n                         'text':'2016 y\u0131l\u0131nda intiharlar (\u00dclke baz\u0131nda)',\n                         'y':0.98,\n                         'x':0.5,\n                         'xanchor': 'center',\n                         'yanchor': 'top'},\n                  plot_bgcolor='white', \n                  height=1000,\n                  showlegend=False\n                 )\n\nfig.show()","d02c53fa":"trace1 = go.Bar(\n    y=country_suicide_series.values,\n    x=country_suicide_series.index,\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    title=\"Her \u00fclkede yap\u0131lan intihar say\u0131s\u0131\",\n    xaxis={\n        'title':\"\u00dclkeler\",\n    },\n    yaxis={\n        'title':\"\u0130ntihar Say\u0131s\u0131\",\n    }\n)\nfigure=go.Figure(data=data,layout=layout)\npy.offline.iplot(figure)","2ff90949":"plt.figure(figsize=(10,30))\nsb.set_style('dark')\nsb.barplot(country_suicide_series.values,country_suicide_series.index)\nplt.show()","dd62327a":"sb.barplot(genderwise_suicide.index , genderwise_suicide.suicides_no)\nplt.xlabel('Cinsiyet')\nplt.ylabel('\u0130ntihar Say\u0131s\u0131(m)')\nsb.set_style('white')","0bedc44d":"data = pd.read_csv('..\/input\/suicide-rates-overview-1985-to-2016\/master.csv')","3f5b5d58":"data.rename(columns={'gdp_per_capita ($)': 'gdp_per_capita'}, inplace = True)\ndata = data[['gdp_per_capita', 'suicides_no', 'sex']]\ndef t_c(df):\n    if df['sex'] == 'female':\n        return 0    \n    else:\n        return 1\ndata['sex'] = data.apply(t_c, axis=1)\ndata['gdp_per_capita'] \/= data['gdp_per_capita'].max()*0.01\ndata['suicides_no'] \/= data['suicides_no'].max()*0.01\ndata.head()","9d1730a2":"sb.scatterplot(data = data, y = 'suicides_no', x = 'gdp_per_capita', hue = 'sex')","ff7988a2":"X = data.iloc[:,0:2]\ny = data.iloc[:,2]\nh = lambda x: 1 \/ (1 + np.exp(-g(x)))\nX = np.concatenate((np.ones((X.shape[0], 1)) , X), axis = 1)\ntheta = np.zeros(X.shape[1])\n\nlr = 0.15 # learning rate\nepochs = 500\ncosts = []\nparas = []\n\ndef cal_cost(h, x, y):\n    return (-y * np.log(h) - (1-y) * np.log(1-h)).mean()    \n\ndef log_reg(h, x, y, theta, lr, epochs):\n    for i in range(epochs):\n        z = np.dot(X, theta)\n        h = 1\/(1 + np.exp(-z))\n        gradient = np.dot(X.T, (h - y)) \/ y.size\n        theta -= lr * gradient\n        cost = cal_cost(h, x, y)\n        costs.append(cost)\n        paras.append(theta)\n\n    print(costs[-5:])\n    print(paras[-5:])\n    \nlog_reg(h, X, y, theta, lr, epochs)","9010af7b":"def plot_line(theta, x):\n    y = lambda x: -(theta[0] + theta[1] * x)\/theta[2]\n    x_values = [i for i in range(int(min(x))-1, int(max(x))+2)]\n    y_values = [y(x) for x in x_values]\n    color = list(np.random.random(size=3))\n    plt.plot(x_values, y_values, c = color)","707b4445":"sb.scatterplot(data = data, y = 'suicides_no', x = 'gdp_per_capita', hue = 'sex')\nfor i,t in enumerate(paras):\n    if i%100 == 0: \n        plot_line(t, list(data.iloc[:, 0]))","465c0874":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score \n\nX = data.iloc[:,0:2]\nmodel = LogisticRegression()\nmodel.fit(X, y)\npredicted_classes = model.predict(X)\naccuracy = accuracy_score(y, predicted_classes)\nparameters = model.coef_\nintercept = model.intercept_\n\nprint(accuracy)\nprint(intercept, parameters)","08a9fa91":"sb.scatterplot(data = data, y = 'suicides_no', x = 'gdp_per_capita', hue = 'sex')\nplot_line([intercept, parameters[0][0], parameters[0][1]], list(data.iloc[:, 0]))","89208012":"data=pd.read_csv('..\/input\/suicide-rates-overview-1985-to-2016\/master.csv')","8d49fec1":"(data['suicides_no'][data['sex']=='male']).sum()","a323913f":"genderwise_suicide = data.pivot_table(index='sex' , aggfunc='sum')","9fb24477":"genderwise_suicide['suicides_no']","f7aea9a3":"data['suicides_no'].sum()","da9c8161":"import seaborn as sns","daa97ec6":"data = data.reset_index()","dbc4827c":"del data['country-year']\ndel data['HDI for year']\ndel data['suicides_no']\ndel data['population']\ndel data[' gdp_for_year ($) ']","309b9485":"header = ['country','year','sex','age','suicides\/100k pop','gdp_per_capita ($)','generation','region']","b0831f1e":"data = data.reindex(columns = header)","3b85ba82":"Europe = [\"Albania\",\"Russian Federation\",\"France\",\"Ukraine\",\"Germany\",\"Poland\",\"United Kingdom\",\n         \"Italy\",\"Spain\",\"Hungary\",\"Romania\",\"Belgium\",\"Belarus\",\"Netherlands\",\"Austria\",\n         \"Czech Republic\",\"Sweden\",\"Bulgaria\",\"Finland\",\"Lithuania\",\"Switzerland\",\"Serbia\",\n         \"Portugal\",\"Croatia\",\"Norway\",\"Denmark\",\"Slovakia\",\"Latvia\",\"Greece\",\"Slovenia\",\n         \"Turkey\",\"Estonia\",\"Georgia\",\"Albania\",\"Luxembourg\",\"Armenia\",\"Iceland\",\"Montenegro\",\n         \"Cyprus\",\"Bosnia and Herzegovina\",\"San Marino\",\"Malta\",\"Ireland\"]\nNorthAmerica = [\"United States\",\"Mexico\",\"Canada\",\"Cuba\",\"El Salvador\",\"Puerto Rico\",\n                \"Guatemala\",\"Costa Rica\",\"Nicaragua\",\"Belize\",\"Jamaica\"]\nSouthAmerica = [\"Brazil\",\"Colombia\", \"Chile\",\"Ecuador\",\"Uruguay\",\"Paraguay\",\"Argentina\",\n                \"Panama\",\"Guyana\",\"Suriname\"]\nMiddleEast = [\"Kazakhstan\",\"Uzbekistan\",\"Kyrgyzstan\",\"Israel\",\"Turkmenistan\",\"Azerbaijan\",\n              \"Kuwait\",\"United Arab Emirates\",\"Qatar\",\"Bahrain\",\"Oman\"]\nAsia = [\"Japan\",\"Republic of Korea\", \"Thailand\", \"Sri Lanka\",\"Philippines\",\"New Zealand\",\n        \"Australia\",\"Singapore\",\"Macau\",\"Mongolia\"]","ba6b5e31":"for i in range(0,len(data)):\n    if data.iloc[i,0] in Europe:\n        data.iloc[i,7] = \"Europe\"\n    elif data.iloc[i,0] in NorthAmerica:\n        data.iloc[i,7] = \"North America\"\n    elif data.iloc[i,0] in SouthAmerica:\n        data.iloc[i,7] = \"South America\"\n    elif data.iloc[i,0] in MiddleEast:\n        data.iloc[i,7] = \"Middle East\"\n    elif data.iloc[i,0] in Asia:\n        data.iloc[i,7] = \"Asia\"\n    else:\n        data.iloc[i,7] = \"Island Nation\"","9c98791d":"del data['country']","b95017c7":"suicide_cat = data[['sex','age','generation','region']]\none_hot_data = pd.get_dummies(suicide_cat)","ab427434":"year = data['year']\ngdp_per_cap = data['gdp_per_capita ($)']\nsuicide_per_100k = data['suicides\/100k pop']\ndata2 = pd.concat([year, gdp_per_cap, one_hot_data], axis=1)","c691e42a":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(data2, suicide_per_100k, test_size=0.4, random_state=42)","dda5b5f1":"X_cv, X_test, y_cv, y_test = train_test_split(X_test, y_test, test_size=0.5, random_state=42)","7d8cafad":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeRegressor","bad76a98":"params = {'max_leaf_nodes': list(range(93,95)), 'min_samples_split': list(range(6,8)), 'min_samples_leaf':list(range(2,4))}    \ngrid_search_cv = GridSearchCV(DecisionTreeRegressor(random_state=42),\n                              params, n_jobs=-1, verbose=1, cv=3)\n\ngrid_search_cv.fit(X_train, y_train)\nfrom sklearn.metrics import mean_squared_error\n\ny_pred = grid_search_cv.predict(X_cv)\ntree_reg_mse = mean_squared_error(y_cv, y_pred)\ntree_reg_rmse = np.sqrt(tree_reg_mse)\nprint(\"Karar A\u011fac\u0131 Regresyon(Decision Tree Regression) modelinde ayarlanan CV i\u00e7in K\u00f6k Ortalama Kare Hatas\u0131(Root-Mean-Squared):\",tree_reg_rmse)","b7f3afa1":"####################################","104f6142":"from pandas.plotting import scatter_matrix\nattributes = ['suicides\/100k pop','year','gdp_per_capita ($)']\nscatter_matrix(data[attributes], figsize=(12,8))","2154347c":"from sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression()\nlin_reg.fit(X_train,y_train)\n\ny_pred_lin_reg = lin_reg.predict(X_cv)\nlin_reg_mse = mean_squared_error(y_cv, y_pred_lin_reg)\nlin_reg_rmse = np.sqrt(lin_reg_mse)\nprint(\"Do\u011frusal regresyon modelinde ayarlanan CV i\u00e7in K\u00f6k Ortalama Karesi Hatas\u0131:\",lin_reg_rmse)","b9c8009f":"y_pred = grid_search_cv.predict(X_test)\ntree_reg_mse = mean_squared_error(y_test, y_pred)\ntree_reg_rmse = np.sqrt(tree_reg_mse)\nprint(\"Karar A\u011fac\u0131 Regresyon modelinde ayarlanan Test i\u00e7in K\u00f6k Ortalama Kare Hatas\u0131: :\",tree_reg_rmse)","85096d39":"**T\u00fcm null de\u011ferlerle yeni bir kategorik de\u011fi\u015fken \"Region\" olu\u015fturuyoruz.**","627ee463":"**\u00c7apraz Do\u011frulama k\u00fcmesi ve Test k\u00fcmesini olu\u015fturdum.**","c4acd2d0":"**Cinsiyete g\u00f6re intihar say\u0131s\u0131.**","1edb0145":"# **Da\u011f\u0131l\u0131m Grafikleri.**","878a31aa":"En iyi hiperparametreleri aramak i\u00e7in bir GridSearchCV kullan\u0131yoruz. Toplamda 21000 farkl\u0131 a\u011fa\u00e7 \u00f6rnekledik.\nDecisionTreeRegressor k\u00fct\u00fcphanesini ekliyoruz.\n","886774fa":"**\u00dclkelerin 2016 y\u0131l\u0131na ait intihar say\u0131lar\u0131.**","43a6e537":"**Cinsiyete g\u00f6re intihar say\u0131s\u0131.**","d120fdd8":"**LOJ\u0130ST\u0130K REGRESYON.**","d80c7e80":"**Datasete ait biilgiler.**","18975848":"**Datasete ait ilk 10 kay\u0131t.**","965f7019":"**Datasetteki s\u00fctunlar.**","c37ca1be":"**Datasete ait son 10 kay\u0131t.**","b49e987b":"**Sat\u0131r ve s\u00fctun say\u0131s\u0131.**","cf1ba2be":"# **Lineer Regresyon.**","7773a08a":"**K\u00fct\u00fcphaneler.**","9dc1eda4":"**Kodlama i\u00e7in kategorik de\u011fi\u015fkenlerimizi topluyoruz.**","9ca7d378":"**T\u00fcm farkl\u0131 \u00fclkeleri 6 b\u00f6lgeden birine manuel olarak atad\u0131m.**","1036e9f0":"**Verileri tekrar birle\u015ftirdim.**","dee7c211":"**\"Country\" dizin s\u00fctunudur, burada bir dizin s\u00fctunu olu\u015fturuyoruz.**","08f0a53f":"**Dataseti data de\u011fi\u015fkenine atad\u0131m.**","76617c00":"**Art\u0131k \"Country\"'e  ihtiyac\u0131m\u0131z olmad\u0131\u011f\u0131 i\u00e7in onu siliyoruz.**","0eb75383":"**\u0130htiyac\u0131m\u0131z olmayan s\u00fctunlar\u0131 siliyoruz.**","f8888d8f":"**Art\u0131k veriler temiz oldu\u011funa g\u00f6re, baz\u0131 modeller geli\u015ftirebiliriz.**\n**DecisionTreeRegression**"}}