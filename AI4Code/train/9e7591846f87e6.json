{"cell_type":{"88afb17c":"code","1b206360":"code","759fa8fd":"code","7694e79c":"code","952ce3ac":"code","9838b87b":"code","e36f52b6":"code","10ccbdbb":"code","45054e8a":"code","d2fbd014":"code","78a34f03":"code","f2dff9ec":"code","0f715169":"code","327e411c":"code","6eedf489":"code","e69e96f8":"markdown","cf681331":"markdown","45377039":"markdown","577d8982":"markdown","605369ca":"markdown","2d6a66d5":"markdown","b69a44ce":"markdown","74694d55":"markdown","3903dec2":"markdown","b6b7d2b0":"markdown","9288e7ae":"markdown","67db8419":"markdown"},"source":{"88afb17c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1b206360":"import matplotlib.pyplot as plt \n%matplotlib inline    \n#only for jupyter notebook  ","759fa8fd":"data = pd.Series([0,1,2,3,4,5])\nplt.plot(data,data**2)","7694e79c":"plt.plot(data,data**2)\nplt.xlabel('X axis ')\nplt.ylabel('Y axis ')","952ce3ac":"plt.plot(data,data**2)\nplt.xlabel('X axis')\nplt.ylabel('Y axis')\nplt.title('Square of numbers')","9838b87b":"plt.plot(data,data**3)\nplt.show()","e36f52b6":"plt.scatter(data,data**2)","10ccbdbb":"plt.scatter(data,data**2,alpha = 0.5,c ='Red')\nplt.scatter(data,data**3,alpha = 0.3,c = 'Blue' )","45054e8a":"#subplot(nrows,ncols,plot_number)\nplt.subplot(1,2,1)\nplt.plot(data,data**2)\nplt.subplot(1,2,2)\nplt.plot(data,data**3, color = 'Red')\n","d2fbd014":"fig = plt.figure()\nax = fig.add_axes([0.8,0.5,0.5,0.5])\nax.plot(data,data**2)  # left, bottom ,width,height\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_title('Square')","78a34f03":"fig = plt.figure()\naxes1 = fig.add_axes([0.8,0.8,0.8,0.8])\naxes2 = fig.add_axes([0.9,1.2,0.3,0.3])\n\naxes1.plot(data,data**2,color = 'Green')\naxes1.set_xlabel('X')\naxes1.set_ylabel('Y')\naxes1.set_title('square')\n\naxes2.plot(data,data**3,color = 'Red')\naxes2.set_xlabel('X')\naxes2.set_ylabel('Y')\naxes2.set_title('Cube')\n\naxes2.yaxis.labelpad = 2","f2dff9ec":"fig , ax = plt.subplots(1,2, figsize=(12,4))  # here 1 is refer to row and 2 is refer to columns so 1 row and two columns for subplots\nax[0].plot(data,data**2)\nax[0].set_xlabel('X axis label for first subplot ')\nax[0].set_ylabel('Y axis label for first subplot')\nax[0].set_title('Square is the title for first subplot')\n\nax[1].plot(data,data**3)\nax[1].set_xlabel('X axis label for second subplot ')\nax[1].set_ylabel('Y axis label for second subplot')\nax[1].set_title('Cube is the title for second subplot')","0f715169":"# dpi --- dots per inch or pixel per inch\nfig,ax = plt.subplots(figsize = (10,3),dpi = 100) \n# figsize = (width,height) and dpi = 100 dots per inch\nax.plot(data,data**2)","327e411c":"fig.savefig('figure1.png') # you can save figures in any extention for images like jpeg,jpg,.. etc.","6eedf489":"x = pd.Series(np.arange(10))\ny = x*3\nfig, ax  = plt.subplots(2,2,figsize = (12,6))\n\nfor i in range(len(ax)):\n    for j in range(len(ax)):\n        if i == 0  and j == 0:\n            ax[i][j].plot(x,y,color = 'green',label = 'x,y')\n            ax[i][j].plot(x*2,y*3,color = 'Red',label = 'x*2,y*3')\n            ax[i][j].set_xlabel('X')\n            ax[i][j].set_ylabel('Y')\n            ax[i][j].set_title('x,y ')\n            ax[i][j].legend(['x,y','x*2,y*3'])\n        elif i == 0 and j == 1:\n            ax[i][j].plot(x**2,y*2,color = 'Blue',label = 'x**2,y*2')\n            ax[i][j].plot(x**3,y*3,color = 'Orange',label = 'x**3,y*3')\n            ax[i][j].set_xlabel('X')\n            ax[i][j].set_ylabel('Y')\n            ax[i][j].set_title('x,y ')\n            ax[i][j].legend(['x**2,y*2','x**3,y*3'])\n        elif i == 1 and j == 0:\n            ax[i][j].plot(x*0.8,y*0.9,color = 'Purple',label = 'x*.8,y*.9')\n            ax[i][j].plot(x*0.4,y*0.6,color = 'Yellow',label = 'x*.4,y*.6')\n            ax[i][j].set_xlabel('X')\n            ax[i][j].set_ylabel('Y')\n            ax[i][j].set_title('x,y ')\n            ax[i][j].legend(['x*.8,y*.9','x*.4,y*.6'])\n        else:\n            ax[i][j].plot(x*2.5,y*1.5,color = 'Purple',label = 'x*2.5,y*1.5')\n            ax[i][j].plot(x*1.5,y*2.5,color = 'Yellow',label = 'x*1.5,y*2.5')\n            ax[i][j].set_xlabel('X')\n            ax[i][j].set_ylabel('Y')\n            ax[i][j].set_title('x,y ')\n            ax[i][j].legend(['x*2.5,y*1.5','x*1.5,y*2.5'])\nfig.tight_layout()","e69e96f8":"# subplot","cf681331":"# Matplotlib Object oriented methods ","45377039":"# Subplots","577d8982":"# scatter plot \nit requires two axis parameters ","605369ca":"# Importing matplotlib","2d6a66d5":"# adding title to plot","b69a44ce":"# Legends labels and titles ","74694d55":"# figure size and aspect ratio i.e dpi","3903dec2":"# adding xlabel and ylabel","b6b7d2b0":"# if you are not using jupyter notebook then you should write plt.show() for displaying plot and figure.","9288e7ae":"# alpha parameter ","67db8419":"# saving figures"}}