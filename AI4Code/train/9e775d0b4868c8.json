{"cell_type":{"8c6782be":"code","f0c1df0b":"code","a0e7b0bd":"code","ade9c691":"code","038f3efc":"code","0379f7e7":"code","cfdca5df":"code","8a0fb6e1":"code","27dfb179":"code","8b06e0c7":"code","ffafd5ce":"code","17ceb612":"code","1b822005":"code","a9105c91":"markdown","a8167965":"markdown","6d8f8ce1":"markdown"},"source":{"8c6782be":"import pandas as pd\nimport numpy as np\nimport torch\nimport torch.nn as nn\nimport seaborn as sns\n\nimport matplotlib.pyplot as plt\n\n!pip -q install --upgrade autogluon\n\nfrom autogluon.tabular import TabularDataset , TabularPredictor","f0c1df0b":"df = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ndf","a0e7b0bd":"df.columns","ade9c691":"df.describe()","038f3efc":"# copy the data\ndf_norm = df.copy()\n  \n# apply normalization techniques\nfor column in df_norm.columns[1:-1]:\n    df_norm[column] = df_norm[column]  \/ df_norm[column].abs().max()\n    \ndf_norm","0379f7e7":"df.plot.scatter( df.columns[1] , df.columns[2])","cfdca5df":"df1 = df[df.columns[1:10]]\ndf1\n\nsns.pairplot(df1 , corner=True )","8a0fb6e1":"g = sns.FacetGrid(df1, col=df.columns[1], col_wrap=4, height=2, ylim=(0, 10))\ng.map(sns.pointplot, df.columns[2], df.columns[3], order=[1, 2, 3 , 4 , 5], color=\".3\", ci=None)","27dfb179":"train_data = TabularDataset('..\/input\/tabular-playground-series-jun-2021\/train.csv')\n\ntrain_data = train_data.sample(n = 5000 , random_state = 8)\ntrain_data\n\nlabel = 'target'\nprint(train_data[label].describe())\n\nsave_path = '.\/'\npredictor = TabularPredictor(label = label , path = save_path , verbosity=3).fit(train_data)","8b06e0c7":"label = 'target'\neval_metric='log_loss'\nsave_path = '.\/AutoGlon\/'\ntimeLimit = 60 * 10   #30 minutes approx\nnum_trials = 10\nsearch_strategy = 'auto' \n\nhyperparameter_kwargs = {'num_trials': num_trials,\n                         'scheduler' : 'local',\n                         'searcher': search_strategy\n                        }\n\nmodels={'NN': {},\n        'GBM': [{'device':'gpu', 'extra_trees': True, 'ag_args': {'name_suffix': 'XT'}},{'device':'gpu'},'GBMLarge',],\n        'CAT': {'task_type':'GPU'},\n        'XGB': {'tree_method':'gpu_hist'},\n        'FASTAI': {}}\n\npredictor = TabularPredictor(label=label,\n                             eval_metric=eval_metric,\n                             path=save_path,\n                             verbosity=1) # 0 = Silent, 4 = Print every damn thing\n\npredictor.fit(df,\n              hyperparameters=models,\n              presets='best_quality',\n              keep_only_best=True,\n              num_bag_folds=5, num_bag_sets=1, num_stack_levels=1,\n              refit_full=True,\n              save_space=True,\n              hyperparameter_tune_kwargs=hyperparameter_kwargs,\n              time_limit=timeLimit)\n\nresults = predictor.fit_summary()\nresults","ffafd5ce":"predictor = TabularPredictor.load(save_path)\n\ny_test = TabularDataset('..\/input\/tabular-playground-series-jun-2021\/test.csv')\n\ny_pred = predictor.predict_proba(y_test)\ny_pred['id'] = y_test['id']\n\n\ny_pred.to_csv('submission.csv' , index = None)\n\ny_pred","17ceb612":"subsample_size = 500 \ny_eval = train_data.sample(n = 500 , random_state = 16)\n\n'''test_data_head = y_test[label]\ntest_data = y_test.drop(columns =[label])\ntest_data.head()\n\ny_pred = predictor.predict(test_data)\nprint(y_pred)\n\nperf = predictor.evaluate_predictions(y_true = test_data_head , y_pred = y_pred , auxiliary_metrics = True)\nperf'''\n\npredictor.leaderboard(y_eval , silent = True)","1b822005":"train_data = TabularDataset('..\/input\/tabular-playground-series-jun-2021\/train.csv')\n\nsub_train_data = train_data.sample(n = 500 , random_state = 18)\n\npredictor.feature_importance(sub_train_data)","a9105c91":"## Lets Go Deeper","a8167965":"## Train on partial data","6d8f8ce1":"# Training model using AutoML - AutoGluon"}}