{"cell_type":{"30f8924b":"code","4490a1d7":"code","e0aab369":"code","7bacd0d9":"code","a593521f":"code","125842c8":"code","effbfc02":"code","3690f527":"code","f739d994":"code","bc12c7de":"code","0a6e4cdd":"code","54456c02":"code","1557b7ae":"code","80f32c25":"code","7fc2babe":"code","d72b8e39":"code","aa1b32b2":"code","ae509091":"code","6401898e":"code","331bfc28":"code","9a6efbe2":"code","b64d1c04":"code","0c94c6b7":"code","3af45b8e":"code","4c077a4e":"code","7112501a":"code","03483c65":"code","794b0a5b":"code","c3c9196d":"code","0d6e99df":"code","9dddd6fe":"markdown","5b2b15c9":"markdown","d4c3ef00":"markdown","76a2472b":"markdown","aed9c1f3":"markdown","94968e3d":"markdown","08c39ee4":"markdown","43fe374c":"markdown","7a36dcc1":"markdown","eff44a8a":"markdown","b5f1272f":"markdown","93e41410":"markdown","4d4d701d":"markdown","426919ca":"markdown","7340440f":"markdown","2499f6be":"markdown","3ff6cf70":"markdown","ac627b76":"markdown","69492eab":"markdown","3f5400d8":"markdown","2acde47c":"markdown"},"source":{"30f8924b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.io as pio\nimport missingno as msno\nimport pandas_profiling\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4490a1d7":"#reading the data\ndf = pd.read_csv(\"\/kaggle\/input\/passenger-list-for-the-estonia-ferry-disaster\/estonia-passenger-list.csv\")\ndf.head()","e0aab369":"df.info()","7bacd0d9":"profile = pandas_profiling.ProfileReport(df)\nprofile","a593521f":"n = msno.bar(df,color='gold')","125842c8":"plt.rcParams['figure.figsize'] = (12,9)\n#plt.style.use('classic')\ncolor = plt.cm.hsv(np.linspace(0,1,20))\ndf['Country'].value_counts().plot.bar(color=color)\nplt.show()","effbfc02":"plt.rcParams['figure.figsize'] = (10,8)\n#plt.style.use('classic')\ncolor = plt.cm.hsv(np.linspace(0,1,20))\nsns.countplot(y = 'Country',palette ='Set3',hue='Survived',orient = 'h',data = df)\nplt.show()\n","3690f527":"plt.rcParams['figure.figsize']=(10,8)\n#plt.style.use(\"classic\")\ncolor = ['yellowgreen','gold']\nlabels =['Not Survived','Survived']\ndf['Survived'].value_counts().plot.pie(y=\"Survived\",colors=color,explode=(0,0.08),startangle=50,shadow=True,autopct=\"%0.1f%%\")\nplt.legend(labels,loc='best')\nplt.axis('on');","f739d994":"plt.rcParams['figure.figsize'] =(9,8)\nsns.catplot(x=\"Sex\", hue=\"Category\", col=\"Survived\",\n                data=df, kind=\"count\",\n                height=6, aspect=.7,palette='Set3')\nplt.show()","bc12c7de":"facet = sns.FacetGrid(df,hue=\"Survived\",aspect = 4)\nfacet.map(sns.kdeplot,\"Age\",shade = True)\nfacet.set(xlim = (0,df[\"Age\"].max()))\nfacet.add_legend()\nplt.show()","0a6e4cdd":"plt.rcParams['figure.figsize'] = (10,8)\n#plt.style.use('classic')\ncolor = plt.cm.hsv(np.linspace(0,1,20))\nsns.countplot(y = 'Country',palette ='Set3',hue='Category',orient = 'h',data = df)\nplt.show()","54456c02":"df.groupby(['Survived','Sex'])['Sex'].count()","1557b7ae":"df.groupby(['Survived','Sex'])['Sex'].count().plot();","80f32c25":"plt.rcParams['figure.figsize']=(10,8)\nplt.style.use(\"classic\")\ncolor = ['yellowgreen','gold','lightskyblue','coral']\ndf.groupby(['Survived','Sex'])['Sex'].count().plot.pie(colors=color,explode=(0,0.02,0.4,0.01),shadow=True,autopct = '%0.1f%%')\nplt.legend(labels,loc='best')\nplt.axis('on');","7fc2babe":"Country = pd.DataFrame(df[\"Country\"].value_counts().reset_index().values,columns=[\"country\",\"NumOfPassenger\"])\nCountry.head()","d72b8e39":"import plotly.express as px\nfig = px.choropleth(Country,   \n    locationmode='country names',\n    hover_name=\"country\",\n    color='country',\n    locations=Country.country,\n    hover_data = ['country','NumOfPassenger'],\n    featureidkey=\"Country.NumOfPassenger\",\n    labels=Country[\"NumOfPassenger\"],\n    title= \"Country with Number of Passengers\"\n)\nfig.show()\n","aa1b32b2":"df.head(2)","ae509091":"df.drop(['PassengerId','Firstname','Lastname'],axis=1,inplace=True)","6401898e":"mapping = {'Sweden': 'Sweden','Estonia':'Estonia','Latvia':'Latvia'}\ndf['Country'] = df['Country'].map(mapping)\ndf['Country'].fillna('Other',inplace=True)","331bfc28":"df['Age'] = df['Age'].apply(lambda x: 1 if (x>=0 and x<= 20)\n                                                      else (2 if x>20 and x<=40 else (3 if x>40 and x<=60 else 4)))","9a6efbe2":"df = pd.get_dummies(df,drop_first=True)","b64d1c04":"from sklearn.model_selection import train_test_split\nx = df.drop(['Survived'],axis=1)\ny = df['Survived']\nx_train,x_test,y_train,y_test = train_test_split(x,y,shuffle=True,test_size=0.2,random_state=0)","0c94c6b7":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","3af45b8e":"model_params  = {\n    \"decision_tree\":{\n        \"model\": DecisionTreeClassifier(),\n        \"params\":{\n            'criterion':[\"entropy\",\"gini\"],\n            \"max_depth\":[5,8,9]\n        }\n    },\n    \n    \"random_forest\":{\n        \"model\": RandomForestClassifier(),\n        \"params\":{\n            \"n_estimators\":[1,5,10,15,20,30],#20,30\n            \"max_depth\":[5,8,9,3,2]#3\n        }\n    },\n    \n    \"adaboost\":{\n        \"model\": AdaBoostClassifier(),\n        \"params\":{\n            \"n_estimators\":[1,5,10,15,20,30],\n            \"learning_rate\":[0.01,0.02,0.001,0.03],\n            \"random_state\":[0,100,10]\n        }\n    }\n    \n}","4c077a4e":"score=[]\nfor model_name,mp in model_params.items():\n    clf = GridSearchCV(mp[\"model\"],mp[\"params\"],cv=8,return_train_score=False)\n    clf.fit(x,y)\n    score.append({\n        \"Model\" : model_name,\n        \"Best_Score\": clf.best_score_,\n        \"Best_Params\": clf.best_params_\n    })\n    \ndf2 = pd.DataFrame(score,columns=[\"Model\",\"Best_Score\",\"Best_Params\"])\ndf2","7112501a":"from sklearn.model_selection import cross_val_score\nfrom lightgbm import LGBMClassifier\nlgb = LGBMClassifier(n_estimators=20,learning_rate=0.01,max_depth=3)\nlgb.fit(x_train,y_train)\nscores=cross_val_score(lgb,x,y,cv=10,scoring=\"accuracy\")\nscores.mean()","03483c65":"knn_score=[]\nfor k in range(1,16):\n    knn = KNeighborsClassifier(n_neighbors = k)\n    score=cross_val_score(knn,x,y,cv=10)\n    knn_score.append(score.mean())\n    \nknn_score","794b0a5b":"%matplotlib inline\nplt.figure(figsize=(26,12))\nplt.style.use('ggplot')\nplt.plot([k for k in range(1,16)],knn_score)\nfor i in range(1,16):\n    plt.text(i,knn_score[i-1],(i,knn_score[i-1]))\n    plt.xticks([i for i in range(1,16)])\nplt.title(\"K Neighbor Classifiers Value for different K\")\nplt.xlabel(\"k neighbors Value\")\nplt.ylabel(\"knn Score\")\nplt.show()","c3c9196d":"knn = KNeighborsClassifier(n_neighbors = 10)\nscore=cross_val_score(knn,x,y,cv=10)\nscore.mean()","0d6e99df":"from mlxtend.plotting import plot_confusion_matrix\nfrom sklearn.metrics import accuracy_score,confusion_matrix\nclasses_name = ['Not Survived','Survived']\nknn.fit(x_train,y_train)\ny_pred = knn.predict(x_test)\nmat = confusion_matrix(y_test,y_pred)\nplot_confusion_matrix(mat,figsize=(8,6),class_names=classes_name,show_normed=True)\nplt.xticks(rotation=0)\nplt.show()","9dddd6fe":">LightGBM","5b2b15c9":"> Most of the Crew People are from Estonia but highest number of Passengers are from Sweden","d4c3ef00":">Checking Null Values","76a2472b":">Plotting Confusion Matrix","aed9c1f3":">Importing necessary Libraries","94968e3d":">Let's see the report of our Dataset at a single Glance","08c39ee4":">Most of the People are from sweden","43fe374c":">MS Estonia was a cruise ferry built in 1979\/80 at the German shipyard Meyer Werft in Papenburg. The ship sank in 1994 in the Baltic Sea in one of the worst maritime disasters of the 20th century.It is the second-deadliest peacetime sinking of a European ship, after the RMS Titanic, and the deadliest peacetime shipwreck to have occurred in European waters, with 852 lives lost.","7a36dcc1":">Visualization \ud83d\udcca ","eff44a8a":">So we have no Null Values","b5f1272f":">Most of the People who Survived are Ages between 20 to 40 & most of the people with ages between 45 to 70 could not Survived from the disaster","93e41410":">Feature Engineering","4d4d701d":"> 46.4% Female could not Survived from the disaster & only 2.7% of the Female could Survived.And 39.7% Male could not Survived from the Disaster & 11.1% Male could Survived.","426919ca":">Mapping the Country","7340440f":">PassengerId,Firstname,Lastname column isn't necessary for our model building,so let's drop this Column","2499f6be":"---\n\n<h1 style=\"text-align: center;font-size: 40px;\">Estonia Disaster<\/h1>\n\n---\n\n<center><img src=\"https:\/\/www.marineinsight.com\/wp-content\/uploads\/2014\/09\/Estonia-ferry-1280x720.jpg\" width=\"500\" height=\"600\"><\/center>\n\n---","3ff6cf70":"><h3>Let's see country with number of Passengers<\/h3>","ac627b76":">KNN","69492eab":">Building our Model","3f5400d8":"> Number of Male & Female Survived & Not Survived","2acde47c":">We are getting Maximum accuracy at K = 10"}}