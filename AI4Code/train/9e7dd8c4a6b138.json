{"cell_type":{"4e7b1309":"code","67694032":"code","b48951ba":"code","042dfcc9":"code","ede0fb56":"code","e6b0e4b5":"code","35a575bd":"code","37716494":"code","985804f5":"code","94c20927":"code","11cdda32":"code","f2ddda92":"code","bab7a000":"code","c91aae32":"code","9a214fc0":"code","e65c87dc":"code","4261d2ca":"code","7cb13ed9":"code","0abc4b9d":"code","f6b9558c":"code","ee896da4":"code","73cf6d46":"code","2f8141c2":"code","b2026a61":"code","5c1e7882":"code","bf8c677d":"code","55b544c6":"code","5e66d8aa":"code","8ace4b0f":"markdown","b938f984":"markdown","b4f287c7":"markdown","c354bf84":"markdown","47a7ab41":"markdown","11f3d636":"markdown","3f9d02db":"markdown","4046aaf8":"markdown","82ddf57d":"markdown","56c29d7b":"markdown","a13afd7a":"markdown","5ae321d0":"markdown","687e22d3":"markdown","7f5fc9ae":"markdown","8150ba9e":"markdown","613282f4":"markdown","4c2fa47d":"markdown"},"source":{"4e7b1309":"import pandas as pd","67694032":"# Reading csv file from github repo\nadvertising = pd.read_csv('..\/input\/tvmarketingcsv\/tvmarketing.csv')","b48951ba":"# Display the first 5 rows\nadvertising.head()","042dfcc9":"# Display the last 5 rows\nadvertising.tail()","ede0fb56":"# Let's check the columns\nadvertising.info()","e6b0e4b5":"# Check the shape of the DataFrame (rows, columns)\nadvertising.shape","35a575bd":"# Let's look at some statistical information about the dataframe.\nadvertising.describe()","37716494":"# Visualise the relationship between the features and the response using scatterplots\nadvertising.plot(x='TV',y='Sales',kind='scatter')","985804f5":"# Putting feature variable to X\nX = advertising['TV']\n\n# Print the first 5 rows\nX.head()","94c20927":"# Putting response variable to y\ny = advertising['Sales']\n\n# Print the first 5 rows\ny.head()","11cdda32":"#random_state is the seed used by the random number generator, it can be any integer.\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7 , random_state=0000)","f2ddda92":"print(type(X_train))\nprint(type(X_test))\nprint(type(y_train))\nprint(type(y_test))","bab7a000":"train_test_split      \n#Press Tab+Shift to read the documentation","c91aae32":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","9a214fc0":"#It is a general convention in scikit-learn that observations are rows, while features are columns. \n#This is needed only when you are using a single feature; in this case, 'TV'.\n\nimport numpy as np\n#Simply put, numpy.newaxis is used to increase the dimension of the existing array by one more dimension,\nX_train = X_train[:, np.newaxis]\nX_test = X_test[:, np.newaxis]","e65c87dc":"print(X_train.shape)\nprint(y_train.shape)\nprint(X_test.shape)\nprint(y_test.shape)","4261d2ca":"# import LinearRegression from sklearn\nfrom sklearn.linear_model import LinearRegression\n\n# Representing LinearRegression as lr(Creating LinearRegression Object)\nlr = LinearRegression()\n\n# Fit the model using lr.fit()\nlr.fit(X_train, y_train)","7cb13ed9":"# Print the intercept and coefficients\nprint(lr.intercept_)\nprint(lr.coef_)","0abc4b9d":"# Making predictions on the testing set\ny_pred = lr.predict(X_test)","f6b9558c":"type(y_pred)","ee896da4":"y_test.shape # cheek the shape to generate the index for plot","73cf6d46":"# Actual vs Predicted\nimport matplotlib.pyplot as plt\nc = [i for i in range(1,61,1)]         # generating index \nfig = plt.figure()\nplt.plot(c,y_test, color=\"blue\", linewidth=2, linestyle=\"-\")\nplt.plot(c,y_pred, color=\"red\",  linewidth=2, linestyle=\"-\")\nfig.suptitle('Actual and Predicted', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                               # X-label\nplt.ylabel('Sales', fontsize=16)                       # Y-label","2f8141c2":"# Error terms\nc = [i for i in range(1,61,1)]\nfig = plt.figure()\nplt.plot(c,y_test-y_pred, color=\"blue\", linewidth=2, linestyle=\"-\")\nfig.suptitle('Error Terms', fontsize=20)              # Plot heading \nplt.xlabel('Index', fontsize=18)                      # X-label\nplt.ylabel('ytest-ypred', fontsize=16)                # Y-label","b2026a61":"from sklearn.metrics import mean_squared_error, r2_score\nmse = mean_squared_error(y_test, y_pred)","5c1e7882":"r_squared = r2_score(y_test, y_pred)","bf8c677d":"print('Mean_Squared_Error :' ,mse)\nprint('r_square_value :',r_squared)","55b544c6":"# this mse =7.9 means that this model is not able to match the 7.9 percent of the values\n# r2 means that your model is 72% is accurate on test data .","5e66d8aa":"import matplotlib.pyplot as plt\nplt.scatter(y_test,y_pred,c='blue')\nplt.xlabel('Y Test')\nplt.ylabel('Predicted Y')\nplt.grid()\n","8ace4b0f":"# Perfroming Simple Linear Regression","b938f984":"# Simple Linear Regression ","b4f287c7":"<a href=\"https:\/\/colab.research.google.com\/github\/devzohaib\/Simple-Linear-Regression\/blob\/master\/Case_study_Simple_Linear_Regression.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","c354bf84":"$y = 6.989 + 0.0464 \\times TV $<br>\n\nNow, let's use this equation to predict our sales.","47a7ab41":"Now, let's check the structure of the advertising dataset.","11f3d636":"Let's start with the following steps:\n\n1. Importing data using the pandas library\n2. Understanding the structure of the data","3f9d02db":"## Understanding the Data","4046aaf8":"## Performing Linear Regression","82ddf57d":"## Preparing X and y\n\n-  The scikit-learn library expects X (feature variable) and y (response variable) to be NumPy arrays.\n-  However, X can be a dataframe as Pandas is built over NumPy.","56c29d7b":"## Splitting Data into Training and Testing Sets","a13afd7a":"# Visualising Data Using Plot","5ae321d0":"#### Computing RMSE and R^2 Values\nRMSE is the standard deviation of the errors which occur when a prediction is made on a dataset. This is the same as MSE (Mean Squared Error) but the root of the value is considered while determining the accuracy of the model\n","687e22d3":"### Generic Steps in Model Building using ```sklearn```\n\nBefore you read further, it is good to understand the generic structure of modeling using the scikit-learn library. Broadly, the steps to build any model can be divided as follows: ","7f5fc9ae":"In this example we will consider sales based on 'TV' marketing budget. \n\nIn this notebook, we'll build a linear regression model to predict 'Sales' using 'TV' as the predictor variable.\n","8150ba9e":"## Coefficients Calculation","613282f4":"Equation of linear regression<br>\n$y = c + m_1x_1 + m_2x_2 + ... + m_nx_n$\n\n-  $y$ is the response\n-  $c$ is the intercept\n-  $m_1$ is the coefficient for the first feature\n-  $m_n$ is the coefficient for the nth feature<br>\n\nIn our case:\n\n$y = c + m_1 \\times TV$\n\nThe $m$ values are called the model **coefficients** or **model parameters**.","4c2fa47d":"## Predictions"}}