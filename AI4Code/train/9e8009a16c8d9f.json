{"cell_type":{"9769e087":"code","562a63e5":"code","9bb31609":"code","4cefe714":"code","4a45f6fb":"code","78c3235a":"code","87c1bf31":"code","9105f1ee":"code","4f0d97ed":"code","c08fe3bc":"code","4e1fd4cc":"code","93c88c80":"code","c919d29f":"code","dcab677a":"code","7824fafb":"code","65395ca0":"code","2b6ec777":"code","cd8d649f":"code","37269c76":"code","4562588c":"code","57caaea1":"code","7b4e554f":"code","7bd7748f":"code","ab0d9002":"code","5de98bab":"code","faa81246":"code","cea65aba":"code","8128d12c":"code","416b0c93":"code","02ae6976":"code","94d317ee":"code","80c8819b":"code","f53eeb83":"code","a985ba1e":"code","ad2de808":"code","c7097b55":"code","dcd4c642":"code","d068a235":"code","59a33919":"code","7490ea2c":"code","8104482b":"code","d9cb4bb3":"code","39cc1934":"code","cf694a58":"code","69f64c20":"code","a9ad4170":"code","49960cb7":"code","8e249995":"code","a101f064":"code","a437147d":"code","68e19629":"code","b3498006":"code","a4d765e7":"code","a190e077":"code","54ddfa08":"code","8d37fafb":"code","5afd7b35":"code","c8c2e041":"code","849528e6":"code","e201e735":"code","83c49615":"code","40100038":"code","9be13a38":"code","1d252a4e":"code","81088cc0":"code","623aa6cb":"code","f6cd5388":"code","e015c215":"code","6b0d6068":"code","47b561b6":"code","2c1b7a2a":"code","2b8c9fcc":"code","d70ad0d4":"code","d6320929":"code","5a2b7a84":"code","47ce54d7":"code","00901651":"code","061d6504":"code","47ca3352":"code","d559fc7c":"code","454a4af2":"code","9eb4c129":"code","76dd3d92":"code","7d098e63":"code","68525e18":"code","293a8f1e":"code","224053bb":"code","2ddb7f84":"code","619d4d80":"code","bbfd356d":"code","38a19d3a":"code","21367741":"code","a64c298c":"code","6807e3dd":"code","514becec":"code","42e991a3":"code","a1388dbe":"code","ee2da7ee":"code","261451e9":"code","42bff2e2":"code","6cca7b65":"code","04ab409b":"code","efd96405":"code","44163b4b":"code","fa7d30c0":"code","61d7d4dd":"code","63b7162b":"code","dbbba8a9":"code","21c5eb13":"code","f298fe0b":"code","22271fe3":"code","4bc3d66a":"code","90c98fd0":"code","56b8a971":"code","da782a31":"code","76e882a9":"code","301cdec4":"code","59dbff03":"code","35a86b62":"code","5c475b9b":"code","5756964a":"code","e90e7f42":"code","02d7b0ab":"code","4a3fcc21":"code","4f5283e7":"code","cfff5029":"code","42a46748":"code","bec2e39f":"code","083f8e28":"code","e69c9133":"code","424c227f":"code","f0a2fe3e":"code","b63a5dc9":"code","13492af5":"markdown","809917bb":"markdown","0c93114c":"markdown","f344656c":"markdown","c1193262":"markdown","34bc7cf9":"markdown","084d77ad":"markdown","344072e6":"markdown","fb4750fd":"markdown","d41beb6c":"markdown","4a02aba9":"markdown","d45e1ee6":"markdown","ab28633a":"markdown","33f46b89":"markdown","084fb391":"markdown","9c564abc":"markdown","470fa517":"markdown","6ecca918":"markdown","9366d727":"markdown","f3a75d0d":"markdown","c58e594a":"markdown","d5470150":"markdown","72dc272e":"markdown","83aed273":"markdown","ec857a0e":"markdown","e53eccdd":"markdown","79e319e2":"markdown","6c9cd7ff":"markdown","ffa56fd6":"markdown","ad474f1e":"markdown","43355cb5":"markdown","aeea736a":"markdown"},"source":{"9769e087":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","562a63e5":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings\nimport collections\nwarnings.filterwarnings(\"ignore\")\nfrom wordcloud import WordCloud,STOPWORDS \nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.offline import iplot\nfrom collections import Counter,OrderedDict\nfrom plotly.offline import iplot, init_notebook_mode\ninit_notebook_mode(connected = True)\nfrom sklearn.manifold import TSNE\nfrom sklearn.cluster import KMeans\nfrom plotly.subplots import make_subplots\nfrom sklearn.preprocessing import StandardScaler\nfrom matplotlib.offsetbox import (TextArea, DrawingArea, OffsetImage,\n                                  AnnotationBbox)\nimport pickle\nfrom scipy.stats import norm\nfrom math import sqrt\nfrom plotly.colors import n_colors\nfrom plotly.subplots import make_subplots\nfrom IPython.display import Image\nfrom colorama import Fore, Back, Style\ny_ = Fore.YELLOW\nr_ = Fore.RED\ng_ = Fore.GREEN\nb_ = Fore.BLUE\nm_ = Fore.MAGENTA\nsr_ = Style.RESET_ALL","9bb31609":"#l oad dataset\nmovies_data = pd.read_csv('..\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv')","4cefe714":"#l oad dataset\nmovies_datas = pd.read_csv('..\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv')","4a45f6fb":"#Understanding the data\nmovies_datas.head(25)","78c3235a":"movies_datas.columns","87c1bf31":"movies_datas.describe()","9105f1ee":"movies_datas.drop(['Unnamed: 0'], axis = 1,inplace=True) ","4f0d97ed":"movies_datas.isnull().sum()","c08fe3bc":"movies_datas.fillna(movies_datas.mean(axis=0),inplace=True)\nmovies_datas","4e1fd4cc":"movies_datas.isnull().sum()","93c88c80":"movies_data.mean()","c919d29f":"movies_data.update(movies_data[['Age']].fillna('all'))\nmovies_data.update(movies_data[['Directors', 'Genres', 'Country', 'Language']].fillna('Others'))\nmovies_data.update(movies_data[['Runtime']].fillna(93))\nmovies_data.update(movies_data[['IMDb']].fillna(5.91))\nmovies_data.update(movies_data[['Rotten Tomatoes']].fillna('50%'))\nmovies_data","dcab677a":"movies_data.isna().sum()\n","7824fafb":"pandas_profiling.ProfileReport(movies_data)","65395ca0":"#Total number of unique directors\nlen(movies_data['Directors'].unique())","2b6ec777":"len(movies_data['Genres'].unique())","cd8d649f":"len(movies_data['Language'].unique())","37269c76":"print('Minimum IMDb rating: ', movies_data['IMDb'].min())\nprint('Maximum IMDb rating: ', movies_data['IMDb'].max())","4562588c":"indian_movies = movies_datas[movies_datas.Country =='India']\nindian_movies","57caaea1":"print('Total number of Indian movies                : ',indian_movies['Title'].count() )\n","7b4e554f":"telugu_movies = movies_data[movies_data.Language =='Telugu']\ntelugu_movies","7bd7748f":"print('Total number of Telugu movies                : ',telugu_movies['Title'].count() )\n","ab0d9002":"netflix_movies = movies_datas[movies_datas['Netflix'] == 1]\nhulu_movies = movies_datas[movies_datas['Hulu'] == 1]\nprime_movies =movies_datas[movies_datas['Prime Video'] == 1]\ndisney_movies = movies_datas[movies_datas['Disney+'] == 1]","5de98bab":"def generate_word_cloud(text):\n    wordcloud = WordCloud(\n        width = 3000,\n        height = 2000,\n        background_color = 'black').generate(str(text))\n    fig = plt.figure(\n        figsize = (40, 30),\n        facecolor = 'k',\n        edgecolor = 'k')\n    plt.imshow(wordcloud, interpolation = 'bilinear')\n    plt.axis('off')\n    plt.tight_layout(pad=0)\n    plt.show()","faa81246":"netflix_titles = netflix_movies.Title[:500].values\ngenerate_word_cloud(netflix_titles)","cea65aba":"prime_titles = prime_movies.Title[:500].values\ngenerate_word_cloud(prime_titles)","8128d12c":"hulu_titles = hulu_movies.Title[:500].values\ngenerate_word_cloud(hulu_titles)","416b0c93":"top_Runtime = movies_datas.sort_values('Runtime',ascending = False).head(20)","02ae6976":"fig = px.bar(top_Runtime, x='Title', y='Runtime', color='Runtime', height=500, title='Runtime of the top 10 longest movies')\nfig.show()","94d317ee":"## Movie count Analysis","80c8819b":"yearly_movie_count = movies_data.groupby('Year')['Title'].count().reset_index().rename(columns = {'Title':'MovieCount'})","f53eeb83":"yearly_movie_count = yearly_movie_count.sort_values(by='MovieCount',ascending=False)","a985ba1e":"yearly_movie_count.head(30)","ad2de808":"fig = px.bar(yearly_movie_count[:30], x='Year', y='MovieCount', color='MovieCount', height=600)\nfig.show()","c7097b55":"netflix_movies_count = len(movies_datas[movies_datas['Netflix'] == 1].index)\nhulu_movies_count = len(movies_datas[movies_datas['Hulu'] == 1].index)\nprime_movies_count =len(movies_datas[movies_datas['Prime Video'] == 1].index)\ndisney_movies_count = len(movies_datas[movies_datas['Disney+'] == 1].index)\n\n\nprint(netflix_movies_count)\nprint(hulu_movies_count)\nprint(prime_movies_count)\nprint(disney_movies_count)","dcd4c642":"label=['Netflix','Hulu', 'Prime Video','Disney+']\ncount=[netflix_movies_count,hulu_movies_count,prime_movies_count,disney_movies_count]\nplatform = pd.DataFrame(\n    {'Platform': label,\n     'MovieCount': count,\n    })\nplatform","d068a235":"fig = px.pie(platform,names='Platform', values='MovieCount')\nfig.update_traces(rotation=45, pull=[0.1,0.03,0.03,0.03,0.03],textinfo=\"percent+label\", title='Movie Count per platform')\nfig.show()","59a33919":"movies_data['Genres'].value_counts().head(5)","7490ea2c":"top_5_genres = ['Drama','Documentary','Comedy', 'Comedy,Drama','Horror']\ntable = movies_data.loc[:,['Year','Genres','IMDb']]\ntable['AvgRating'] = table.groupby([table.Genres,table.Year])['IMDb'].transform('mean')\ntable.drop('IMDb', axis=1, inplace=True)\ntable = table[(table.Year>2009) & (table.Year<2020)]\ntable = table.loc[table['Genres'].isin(top_5_genres)]\ntable = table.sort_values('Year')","8104482b":"fig=px.bar(table,x='Genres', y='AvgRating', animation_frame='Year', \n           animation_group='Genres', color='Genres', hover_name='Genres', range_y=[0,10])\nfig.update_layout(showlegend=False)\nfig.show()","d9cb4bb3":"top_movies=movies_datas[movies_datas['IMDb']==9.3][['Title','Directors']]\ntop_movies","39cc1934":"runtime_top_movies=movies_datas.loc[movies_datas['IMDb']==9.3][['Title','Runtime']]\nruntime_top_movies","cf694a58":"movies_by_country = movies_data.groupby('Country')['Title'].count().reset_index().sort_values('Title',ascending = False).head(10).rename(columns = {'Title':'MovieCount'})\nfig = px.pie(movies_by_country,names='Country', values='MovieCount')\nfig.update_traces(rotation=180, pull=[0.1,0.03,0.03,0.03,0.03],textinfo=\"percent+label\", title='Movie Count per Country')\nfig.update_layout(showlegend=False)\nfig.show()\n","69f64c20":"lengthiest_movie=movies_datas.sort_values(by='Runtime',ascending=False).head(10)","a9ad4170":"fig=px.bar(lengthiest_movie,x='Title',y='IMDb',height=600,color='Title',range_y=[0,10])\nfig.update_layout(title='IMDb Ratings Lengthiest Movie')\nfig.show()","49960cb7":"movies_count_by_IMDB=movies_data.groupby('IMDb')['Title'].count().reset_index().sort_values('IMDb',ascending=False).head(10).rename(columns={'Title':'Count'})\nfig=px.pie(movies_count_by_IMDB,names='IMDb',values='Count')\nfig.update_traces(textinfo='percent+label',title='Movies Count based on IMDb Ratings')\nfig.show()","8e249995":"top5_netflix=movies_datas.loc[:,['Netflix','IMDb','Title','Year']]\ntop5_netflix=top5_netflix[top5_netflix['Netflix']==1]\ntop5_netflix=top5_netflix.sort_values('IMDb',ascending=False).head(5)\nfig=px.bar(top5_netflix,x='Title',y='IMDb',height=600,color='IMDb',range_y=[0,10])\nfig.update_layout(title='Top 5 Netflix Movies based on IMDb Rating')\nfig.show()","a101f064":"top5_hulu=movies_datas.loc[:,['Hulu','IMDb','Title','Year']]\ntop5_hulu=top5_hulu[top5_hulu['Hulu']==1]\ntop5_hulu=top5_hulu.sort_values('IMDb',ascending=False).head(5)\nfig=px.bar(top5_hulu,x='Title',y='IMDb',height=600,color='Title',range_y=[0,10])\nfig.update_layout(title='Top 5 Hulu Movies based on IMDb Rating')\nfig.show()","a437147d":"top5_prime=movies_datas.loc[:,['Prime Video','IMDb','Title','Year']]\ntop5_prime=top5_prime[top5_prime['Prime Video']==1]\ntop5_prime=top5_prime.sort_values('IMDb',ascending=False).head(5)\nfig=px.bar(top5_prime,x='Title',y='IMDb',height=600,color='Title',range_y=[0,10])\nfig.update_layout(title='Top 5 Prime Movies based on IMDb Rating')\nfig.show()","68e19629":"top5_disney=movies_datas.loc[:,['Disney+','IMDb','Title','Year']]\ntop5_disney=top5_disney[top5_disney['Disney+']==1]\ntop5_disney=top5_disney.sort_values('IMDb',ascending=False).head(5)\nfig=px.bar(top5_disney,x='Title',y='IMDb',height=600,color='Title',range_y=[0,10])\nfig.update_layout(title='Top 5 Disney Movies based on IMDb Rating')\nfig.show()","b3498006":"# Top 20 directors according to imdb rating\n","a4d765e7":"#top20_dir=data.groupby(['Directors','IMDb'])['Title'].count().reset_index().sort_values('IMDb',ascending=False).head(20)\ntop20_dir=movies_data.loc[:,['Directors','IMDb','Title','Year']].sort_values('IMDb',ascending=False)\n\ntop20_dir.head(20)","a190e077":"sum_age = movies_datas.groupby(\"Age\").sum()\nsum_age[[\"Netflix\",\"Hulu\",\"Prime Video\",\"Disney+\"]]","54ddfa08":"# number of moive produce each year per platform:\nsum_year = movies_datas.groupby(\"Year\").sum()\nsum_year[[\"Netflix\",\"Hulu\",\"Prime Video\",\"Disney+\"]]","8d37fafb":"df_roto = movies_datas[movies_datas['Rotten Tomatoes'].notnull()]","5afd7b35":"# convert str to float type for \"Rotten Tomatoes\" column:\ndf_roto['Rotten Tomatoes'] = df_roto['Rotten Tomatoes'].str.rstrip('%').astype('float')","c8c2e041":"df_roto.head(10)","849528e6":"# average IMDb rate on Disney+:\nno_disney = df_roto['Disney+'].sum()\ndisney_avg_imdb = round(df_roto.loc[df_roto['Disney+']==1]['IMDb'].mean(),1)\n# average IMDb rate on Hulu:\nno_hulu = df_roto['Hulu'].sum()\nhulu_avg_imdb = round(df_roto.loc[df_roto['Hulu']==1]['IMDb'].mean(),1)\n# average IMDb rate on Netflix:\nno_netflix = df_roto['Netflix'].sum()\nnetflix_avg_imdb = round(df_roto.loc[df_roto['Netflix']==1]['IMDb'].mean(),1)\n# average IMDb rate on Prime Video:\nno_prime = df_roto['Prime Video'].sum()\nprime_avg_imdb = round(df_roto.loc[df_roto['Prime Video']==1]['IMDb'].mean(),1)","e201e735":"# average Rotten Tomatoes rate on Disney+:\ndisney_avg_roto = round(df_roto.loc[df_roto['Disney+']==1]['Rotten Tomatoes'].mean(),1)\n# average Rotten Tomatoes rate on Hulu:\nhulu_avg_roto = round(df_roto.loc[df_roto['Hulu']==1]['Rotten Tomatoes'].mean(),1)\n# average Rotten Tomatoes rate on Netflix:\nnetflix_avg_roto = round(df_roto.loc[df_roto['Netflix']==1]['Rotten Tomatoes'].mean(),1)\n# average Rotten Tomatoes rate on Prime Video:\nprime_avg_roto = round(df_roto.loc[df_roto['Prime Video']==1]['Rotten Tomatoes'].mean(),1)","83c49615":"# create dataframe:\nno_platform = (no_netflix,no_hulu,no_prime,no_disney)\ncol_names = ('Netflix','Hulu','Prime Video','Disney+')\navg_imdb = (netflix_avg_imdb,hulu_avg_imdb,prime_avg_imdb,disney_avg_imdb)\navg_roto = (netflix_avg_roto,hulu_avg_roto,prime_avg_roto,disney_avg_roto)\nList = list(zip(col_names,no_platform,avg_imdb,avg_roto))\nCounts =  pd.DataFrame(data=List,columns=['Platform','Number of Movie','Average IDMb rate','Average % Rotten Tomattoes rate'])\nCounts","40100038":"px.bar(\n       x=movies_data['Age'].value_counts().index,\n       y=movies_data['Age'].value_counts().values,\n       labels = {'x': \"Age Restrictions\", 'y':\"Count\"}\n    )","9be13a38":"movies_datas.query('Netflix == 1 and Hulu == 1 and `Prime Video` == 1')['Title']","1d252a4e":"fig, ax = plt.subplots(figsize=(15,6))\nsns.barplot(movies_datas.dropna(axis=0,subset=[\"IMDb\"],inplace=False)[\"Year\"],movies_data.dropna(axis=0,subset=[\"IMDb\"],inplace=False)[\"IMDb\"],ax=ax)","81088cc0":"new_data=movies_datas.dropna(subset=[\"IMDb\"])\nnew_data.corr()","623aa6cb":"list_platforms=[\"Netflix\",\"Hulu\",\"Prime Video\",\"Disney+\"]\nfig,(ax1,ax2,ax3,ax4)=plt.subplots(1,4,sharey=True,figsize=(12,6))\nfig.subplots_adjust(hspace=0, wspace=0)\nax1.boxplot(new_data[\"IMDb\"][new_data[\"Netflix\"]==1])\nax1.title.set_text(\"Netflix\")\nax2.boxplot(new_data[\"IMDb\"][new_data[\"Hulu\"]==1])\nax2.title.set_text(\"Hulu\")\nax3.boxplot(new_data[\"IMDb\"][new_data[\"Prime Video\"]==1])\nax3.title.set_text(\"Prime Video\")\nax4.boxplot(new_data[\"IMDb\"][new_data[\"Disney+\"]==1])\nax4.title.set_text(\"Disney+\")","f6cd5388":"#Getting unique values of genres,directors and countries.\ngenres=movies_datas[\"Genres\"].unique()\ndirectors=movies_datas[\"Directors\"].unique()\ncountry=movies_datas['Country'].unique()\nprint(genres,directors,country)\n#But as we can observe data set each of these have more than a single entity for almost each row . To make sure we don't repeat them in our unique value list we will \n#pick only different values out.\nprint(len(genres),len(directors),len(country))\nfinal_genre=[]\nfor i in range(len(genres)):\n    lis=list(map(str,genres[i].split(\",\")))\n    for j in lis:\n        if j not in final_genre:\n            final_genre.append(j)","e015c215":"final_genre","6b0d6068":"movie_each_year= movies_datas.loc[movies_datas.groupby(\"Year\")[\"IMDb\"].idxmax()].reset_index()\nmovie_each_year.drop('index',axis=1,inplace=True)\nmovie_each_year.loc[:,['Title','Year','IMDb']].head(50)","47b561b6":"#Change of best movie rating over the years\nplt.figure(figsize=(10,5))\nsns.lineplot(x='IMDb',y='Year',data=movie_each_year)","2c1b7a2a":"#Effect of runtime on rating\nplt.figure(figsize=(10,5))\nsns.lineplot(x='Runtime',y='IMDb',data=movies_datas)","2b8c9fcc":"movies_datas['Service Provider'] = movies_datas.loc[:,['Netflix','Prime Video','Disney+','Hulu']].idxmax(axis=1)\nmovies_datas.drop(['Netflix','Prime Video','Disney+','Hulu'],axis=1)","d70ad0d4":"#Distribution of movie rating in each platform\nplt.figure(figsize=(15,8))\nsns.violinplot(x=movies_datas['IMDb'],y=movies_datas['Service Provider'])","d6320929":"#Average Runtime length of each ott platform\nmovies_datas.groupby(\"Service Provider\")[\"Runtime\"].mean()","5a2b7a84":"#Average IMDb rating of each ott platform\nmovies_datas.groupby(\"Service Provider\")[\"IMDb\"].mean()","47ce54d7":"#Top 10 movies\nmovies_datas.sort_values('IMDb',ascending=False)[:10].reset_index().drop(['ID','index','Country','Language','Type','Rotten Tomatoes'],axis=1)","00901651":"top_rated_movies = movies_data.sort_values('IMDb',ascending = False).head(10)\nfig = px.bar(top_rated_movies, x='Title', y='IMDb', color='IMDb', height=600)\nfig.show()","061d6504":"top_directors = movies_data.groupby('Directors')['Title'].count().reset_index().rename(columns = {'Title':'Movie Count'}).sort_values('Movie Count',ascending = False).head(10)\nfig = px.bar(top_directors, x='Directors', y='Movie Count', color='Movie Count', height=600)\nfig.show()\n","47ca3352":"#Top 10 movies of Disney\nmovies_datas[movies_datas['Service Provider']=='Disney+'].sort_values('IMDb',ascending=False)[:10].reset_index().drop(['ID','index','Country','Rotten Tomatoes','Language','Type'],axis=1)","d559fc7c":"#Extracting the countries\ncountry=[]\nfor i in range(len(movies_data)):\n    x=movies_data['Country'][i]\n    y=x.split(',')\n    for j in range(len(y)):\n        country.append(y[j])\n        \ncountry_c = Counter(country)\ncountry_c_15=OrderedDict(country_c.most_common()[:15])\n\n#Countries with most movies\ndata = [go.Bar(\n   x = list(country_c_15.keys()),\n   y = list(country_c_15.values())\n)]\nfig = go.Figure(data=data)\niplot(fig)","454a4af2":"#Most of the movies have about 90-100 minutes of runtime. Runtime is positively skewed since there are some movies with very large runtime.\nsns.distplot(movies_datas['Runtime']);","9eb4c129":"#IMDb ratings of the movies roughly follows normal distribution with mean of about 6.5\nsns.distplot(movies_datas['IMDb']);","76dd3d92":"movie_count_by_language = movies_data.groupby('Language')['Title'].count().reset_index().sort_values('Title',ascending = False).head(10).rename(columns = {'Title':'Movie Count'})\nfig = px.bar(movie_count_by_language, x='Language', y='Movie Count', color='Movie Count', height=600)\nfig.show()","7d098e63":"movies_by_country = movies_data.groupby('Country')['Title'].count().reset_index().sort_values('Title',ascending = False).head(10).rename(columns = {'Title':'Movie Count'})\nfig = px.bar(movies_by_country, x='Country', y='Movie Count', color='Movie Count', height=600)\nfig.show()","68525e18":"top_genres = movies_data.groupby('Genres')['Title'].count().reset_index().rename(columns = {'Title':'Movie Count'}).sort_values('Movie Count',ascending = False).head(10)\nfig = px.bar(top_genres, x='Genres', y='Movie Count', color='Movie Count', height=600)\nfig.show()","293a8f1e":"netflix_movies = movies_datas.loc[movies_data['Netflix'] == 1]\nhulu_movies = movies_datas.loc[movies_data['Hulu'] == 1]\nprime_video_movies = movies_datas.loc[movies_data['Prime Video'] == 1]\ndisney_movies = movies_data.loc[movies_data['Disney+'] == 1]","224053bb":"netflix_movies.drop(['Hulu', 'Prime Video', 'Disney+', 'Type','Genres'], axis = 1)\nhulu_movies.drop(['Netflix', 'Prime Video', 'Disney+', 'Type','Genres'], axis = 1)\nprime_video_movies.drop(['Hulu', 'Netflix', 'Disney+', 'Type','Genres'], axis = 1)\ndisney_movies.drop(['Hulu', 'Prime Video', 'Netflix', 'Type','Genres'], axis = 1)","2ddb7f84":"# Getting screenplay in hours\nnetflix_movies['screenplay'] = netflix_movies['Runtime']\/60\nhulu_movies['screenplay'] = hulu_movies['Runtime'] \/ 60\nprime_video_movies['screenplay'] = prime_video_movies['Runtime'] \/ 60\ndisney_movies['screenplay'] = disney_movies['Runtime'] \/ 60\n\n\n# Creating function to get screenplay of top 20 movies on desired platform\ndef top_20_sp(platform):\n    top_20_screenplay=netflix_movies.sort_values(by='screenplay',ascending=False).head(20)\n    plt.figure(figsize=(15,10))\n    sns.barplot(x='screenplay',y='Title',data=top_20_screenplay,hue='Country')\n    plt.legend(loc='lower right')\n    plt.xlabel('Total hours')\n    plt.ylabel('Movie')\n    plt.title('Top 20 movies by screenplay')\n    plt.show()\n    \ntop_20_sp(netflix_movies)\ntop_20_sp(disney_movies)\ntop_20_sp(prime_video_movies)\ntop_20_sp(hulu_movies)","619d4d80":"n = 30\n\ntop_ratings = movies_data.sort_values(by=\"IMDb\",ascending=False).reset_index().iloc[:n]\n\nfig = px.bar(top_ratings,\n             x = \"Title\", y='IMDb',\n             color='IMDb',\n             hover_data=[\"Directors\",\"IMDb\"],\n             title=f\"Top {n} best rated movies\",\n             height=1000,\n             color_continuous_scale=px.colors.sequential.Viridis)\nfig.show()","bbfd356d":"#We often hear that nowadays they don\u00b4t make films as they used to... as if today\u00b4s films were not as good as the ones filmed years ago. Let\u00b4s see if that's entirely true...\ndf_year = movies_data.groupby(\"Year\").mean()\ndf_year.drop([\"Unnamed: 0\",\"ID\",'Netflix', 'Hulu', 'Prime Video', 'Disney+', 'Type'],inplace=True,axis=1)\ndf_year[\"Movie Count\"] = movies_data.groupby(\"Year\").count()[\"ID\"]\ndf_year.head()","38a19d3a":"# Add a new column to our dataframe that indicates how many movies were made that year\n\n# Get a dictionary from the df_year dataframe, where keys=year and values=movies made\n\nd = df_year[\"Movie Count\"].to_dict()\nd.pop('IMDb', None)\nd.pop(\"Runtime\",None)\n\n# Create our new column using the map function\n\nmovies_datas['Movie Count'] = movies_data['Year'].map(d)\nmovies_datas.head()","21367741":"#From now on we can add visual information to our plots that will remind us of how many movies were made on a certain year\nx = movies_data[\"Year\"]\ny = movies_data[\"IMDb\"]\n\nplt.figure(figsize=(8,8))\nsns.scatterplot(x,y,data=movies_datas,hue=\"Movie Count\")","a64c298c":"Rating = df_year[\"IMDb\"]\nYear = df_year.index\n\nfig = px.line(df_year, x=Year, y=Rating, \n              line_shape=\"spline\", render_mode=\"svg\",\n              hover_name=movies_data.groupby(\"Year\").mean().index,\n              title=\"Average Movie Ratings 1902-2020\")\nfig.show()","6807e3dd":"fig = px.box(movies_data, x=\"Year\", y=\"IMDb\",color=\"Year\")\nfig.show()","514becec":"fig = px.scatter(movies_data,x=\"Runtime\", y=\"IMDb\",color=\"Year\",\n                 marginal_x=\"histogram\",\n                 marginal_y=\"histogram\",\n                 hover_name=\"Title\",hover_data=[\"Age\"])\nfig.show()","42e991a3":"height = 800\n\nfig2 = px.scatter(movies_data.dropna(),x=\"Runtime\", y=\"IMDb\",color=\"Age\",\n                marginal_x=\"histogram\",\n                hover_name=\"Title\",hover_data=[\"Year\"],\n                height=height)\n\nfig1 = px.scatter(movies_data.dropna(),x=\"Year\", y=\"IMDb\",color=\"Age\",\n                marginal_x=\"histogram\",\n                hover_name=\"Title\",hover_data=[\"Runtime\"],\n                height=height)\nfig1.show()\nfig2.show()","a1388dbe":"#Create a new dataframe specific for directors and the number of movies they directed\n\ndirectors = pd.DataFrame(movies_data.groupby([\"Directors\"]).count()[\"ID\"])\ndirectors[\"No. of Films\"] = directors[\"ID\"]\ndirectors.drop([\"ID\"],axis=1,inplace=True)","ee2da7ee":"n = 40\ndata = directors.sort_values(by=\"No. of Films\",ascending=False).reset_index().iloc[:n]\n\nfig = px.bar(data,\n             x = \"Directors\", y='No. of Films',\n             color='No. of Films',\n             title=f\"Top {n} directors with most directed movies\")\nfig.show()","261451e9":"# Directors who directed the best and worst IMDb ranked movies\n\nn = 30\nx=\"Directors\"\n\ndata1 = movies_data.groupby(by=\"Directors\").mean().sort_values(by=\"IMDb\",ascending=False).reset_index().iloc[:n]\ndata2 = movies_data.groupby(by=\"Directors\").mean().sort_values(by=\"IMDb\",ascending=True).reset_index().iloc[2:n]\n\n# For the worst IMDb average we droped the worst two because they had an average of 0 and it\u00b4s not considered representative\n\nfig = px.bar(data1,x=data1[\"Directors\"],y=data1[\"IMDb\"],color=\"IMDb\",\n             title=f\"Top {n} Directors with the highest averaged movie ratings\")\nfig.show()\n\nfig = px.bar(data2,x=data2[\"Directors\"],y=data2[\"IMDb\"],color=\"IMDb\",\n            title=f\"Top {n} Directors with the lowest averaged movie ratings\")\nfig.show()","42bff2e2":"# Directors who directed the longest and shortest movies\n\nn = 30\nx=\"Directors\"\n\ndata1 = movies_data.groupby(by=\"Directors\").mean().sort_values(by=\"Runtime\",ascending=False).reset_index().iloc[:n]\ndata2 = movies_data.groupby(by=\"Directors\").mean().sort_values(by=\"Runtime\",ascending=True).reset_index().iloc[:n]\n\n# For the worst IMDb average we droped the worst two because they had an average of 0 and it\u00b4s not considered representative\n\nfig = px.bar(data1,x=data1[\"Directors\"],y=data1[\"Runtime\"],color=\"Runtime\",\n             title=f\"Top {n} Directors with longest average runtime for directed movies\")\nfig.show()\n\nfig = px.bar(data2,x=data2[\"Directors\"],y=data2[\"Runtime\"],color=\"Runtime\",\n            title=f\"Top {n} Directors with shortest average runtime for directed movies\")\nfig.show()","6cca7b65":"# Let\u00b4s turn this into a dataframe so that we can plot it\n\ngenres = pd.DataFrame.from_dict(d, orient='index').reset_index()\ngenres[\"Genre\"] = genres[\"index\"]\ngenres[\"Count\"] = genres[0]\ngenres.drop([\"index\",0],axis=1,inplace=True)\ngenres.head()","04ab409b":"mixed_genres = []\nfor i in movies_data[\"Genres\"].dropna():\n    if \",\" in i:\n        mixed_genres.append(i)\n\nd = Counter(mixed_genres)\n\nprint(f\"We found a total of {len(d)} different genres\")\n\n# Create dataframe\n\ndf_mixedg = pd.DataFrame.from_dict(d, orient='index').reset_index()\ndf_mixedg[\"Genre\"] = df_mixedg[\"index\"]\ndf_mixedg[\"Count\"] = df_mixedg[0]\ndf_mixedg.drop([\"index\",0],axis=1,inplace=True)\ndf_mixedg.head()","efd96405":"n = 30\n\n# 3. Most common mixed genres.\n\nfig = px.pie(df_mixedg.sort_values(by=\"Count\",ascending=False).reset_index().iloc[:n], values='Count', names='Genre', \n             title=f\"Top {n} most common movie mixed genres\")\nfig.show()","44163b4b":"all_genres = []\n\nfor genre in movies_data[\"Genres\"].dropna():\n    movie_genres = genre.split(\",\")\n    for i in movie_genres:\n        all_genres.append(i)","fa7d30c0":"df_genre_year = pd.DataFrame(index=range(1902,2021),columns=Counter(all_genres).keys())\n#df_genre_year.astype(\"float64\")\ndf_genre_year.head()","61d7d4dd":"for year in range(1902,2021):\n    genre_year = []\n    for genres in movies_data[movies_data[\"Year\"]==year][\"Genres\"].dropna():\n        for i in genres.split(\",\"):\n            genre_year.append(i)\n\n    d1 = Counter(genre_year)\n    \n    if len(d)==0:\n        #df_genre_year.loc[year].fillna(0,inplace=True)\n        pass\n    \n    df_genre_year.loc[year] = pd.Series(d1)\n\n# Check some random years \n    \ndf_genre_year.loc[1928:1933]","63b7162b":"df_genre_year.plot(figsize=(14,10))","dbbba8a9":"movies_data.hist(color='brown',figsize=(10,10))","21c5eb13":"df_year = pd.DataFrame(movies_data.groupby(movies_data['Year']).Title.nunique())\ndf_year.nlargest(5,'Title')","f298fe0b":"## Let's build a search function\n\ndef NextMovie(ScoreMovie,GenreMovie,YearMovie,LanguageMovie):\n    possiblemovie1=movies_data.loc[movies_data['IMDb']>(ScoreMovie)]\n    possiblemovie2=possiblemovie1.loc[movies_data['Genres'].str.contains(GenreMovie, na=False)]\n    possiblemovie3=possiblemovie2.loc[movies_data['Year']>(YearMovie)]\n    possiblemovie4=possiblemovie3.loc[movies_data['Language'].str.contains(LanguageMovie, na=False)]\n    try:\n      print(possiblemovie4['Title'])\n    except:\n      print(\"I\\'m so sorry, no Title available, try to change parameters\")","22271fe3":"#On Which Platform is this Movie Available?\ndef Availability(title):\n    \n    NetflixAvailable=Netflix.loc[Netflix['Title']==(title)]\n    PrimeVideoAvailable=PrimeVideo.loc[PrimeVideo['Title']==(title)]\n    DisneyAvailable=PrimeVideo.loc[PrimeVideo['Title']==(title)]\n    HuluAvailable=PrimeVideo.loc[PrimeVideo['Title']==(title)]\n   \n        \n    if (len(NetflixAvailable) >0):\n            print('It is available on Netflix')\n    else:\n            print('It is not Available on Netflix')\n\n    if (len(PrimeVideoAvailable) >0):\n            print('It is available on PrimeVideo')\n    else:\n            print('It is not Available on PrimeVideo')\n\n    if (len(DisneyAvailable) >0):\n            print('It is available on Disney+')\n    else:\n            print('It is not Available on Disney+')\n\n    if (len(HuluAvailable) >0):\n            print('It is available on Hulu')\n    else:\n            print('It is not Available on Hulu')\n        ","4bc3d66a":"###Divide the DataSet according to the Platform\nNetflix=movies_data[movies_data['Netflix']>0][['Title','Age','IMDb','Year','Directors','Genres','Country','Language','Runtime']]\nPrimeVideo=movies_data[movies_data['Prime Video']>0][['Title','Age','IMDb','Year','Directors','Genres','Country','Language','Runtime']]\nHulu=movies_data[movies_data['Hulu']>0][['Title','Age','IMDb','Year','Directors','Genres','Country','Language','Runtime']]\nDisney=movies_data[movies_data['Disney+']>0][['Title','Age','IMDb','Year','Directors','Genres','Country','Language','Runtime']]","90c98fd0":"###Example\ntitle=input(\"Enter the title\")\nAvailability(title)","56b8a971":"movies_data = pd.melt(movies_data, id_vars = ['ID', 'Title', 'Year', 'Age', 'IMDb', 'Rotten Tomatoes', 'Type', 'Directors', 'Genres', 'Country', 'Language'], \n        value_vars = ['Netflix', 'Hulu', 'Prime Video', 'Disney+'], var_name = 'Streaming Platform')\nmovies_data = movies_data[movies_data['value'] == 1].drop(['value', 'Type'], axis = 1) #Type is being dropped here because the value will always be 0, since the whole dataset represents only movies\nmovies_data.head()","da782a31":"#Now, we have the data ready for some analysis, even though we can still do processing on the other rows, as Directors, Genres, Country and Language, but we will do that later.\n\n#So, which platform has the most movies to offer?\nmovies_count = movies_data.groupby('Streaming Platform', as_index = False).count()\nmovies_count = movies_count[['Streaming Platform', 'ID']].rename({'ID' : 'Count'}, axis = 'columns')\nmovies_count = movies_count.sort_values(by = 'Count', ascending = False)\ncolor_map={\n    \"Prime Video\": \"rgb(4, 165, 222)\",\n    \"Netflix\": \"rgb(223, 9, 18)\",\n    \"Hulu\": \"rgb(2, 228, 119)\",\n    \"Disney+\": \"rgb(0, 0, 0)\"\n}\n\nimport plotly.express as px\n\nfig = px.bar(movies_count, y='Streaming Platform', x=\"Count\", color=\"Streaming Platform\", orientation=\"h\",\n             color_discrete_map= color_map, text = \"Count\"\n            )\n\nfig.update_layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title=\"Number of movies offered by platform\",\n      xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Streaming Platform',\n        titlefont_size=16,\n        tickfont_size=14\n    ),\n    legend=dict(\n        x=1,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n)\n\nfig.show()","76e882a9":"#In this criteria we can see that Prime Video blows the competition away with almost 3\/4 of the total motives offered by the platforms, followed by Netflix. Let's see if quantity corresponds also to quality.\nlist_of_sp = movies_count['Streaming Platform'].tolist()\n\nmovies_df_not_null = movies_data[~movies_data['IMDb'].isnull()]\n\nfig = go.Figure()\n\nrows_counter = 0\nfor sp, clr in zip(list_of_sp, color_map.values()):\n        \n        fig.add_trace(go.Box(\n            x=movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['Streaming Platform'],\n            y=movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'],\n            name=sp,\n            boxpoints='all',\n            jitter=0.5,\n            whiskerwidth=0.2,\n            fillcolor=clr,\n            marker_size=2,\n            line_width=1)\n        )\n        \n        min_value = round(np.percentile(movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'], 0), 2)\n        first_quartile = round(np.percentile(movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'], 25), 2)\n        median = round(np.percentile(movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'], 50), 2)\n        third_quartile = round(np.percentile(movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'], 75), 2)\n        max_value = round(np.percentile(movies_df_not_null[movies_df_not_null['Streaming Platform'] == sp]['IMDb'], 100), 2)\n        \n        for y_desc, y_value in zip(('MinV: ', 'Q1: ', 'Med: ', 'Q3: ', 'MaxV: '), (min_value, first_quartile, median, third_quartile, max_value)):\n        \n            fig.add_annotation(\n                        x=rows_counter + 0.35,\n                        ax = 0,\n                        ay = 0,\n                        y=y_value,\n                        text=y_desc + str(y_value))\n\n        rows_counter += 1\n        \nfig.update_layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title='Distribution of movies IMDb score by streaming platform',\n    yaxis=dict(\n        title='IMDb score',\n        titlefont_size=16,\n        tickfont_size=14\n    ))\n\n        \nfig.show()","301cdec4":"#Even though the data did not show that much of a discrepancy between the platforms as the last analysis, now Disney+ emerged as victorious, with a better distribution, in general, of IMDb scores for its movies, followed by Netflix. But, let's say you are not so much of a hard user and will only watch 1 movie per week, resulting in 52 movies per year. Which platform has the best 52 movies?\nmovies_data.sort_values(by = 'IMDb', ascending = False, inplace = True)\nresults_list = {}\nfor sp in movies_count['Streaming Platform'].tolist():\n    sp_best_df = movies_data[movies_data['Streaming Platform'] == sp].head(n = 52)\n    IMDb_mean = round(sp_best_df['IMDb'].mean(), 2)\n    results_list[sp] = IMDb_mean\nbest_movies_df = pd.DataFrame.from_dict(results_list, orient = 'index', columns = ['AVG Score']).sort_values(by = 'AVG Score', ascending = True)\n","59dbff03":"fig = px.bar(best_movies_df, y=best_movies_df.index, x=\"AVG Score\", color=best_movies_df.index, orientation=\"h\",\n             color_discrete_map = color_map, text = \"AVG Score\"\n            )\n\nfig.update_layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title=\"Average score of the best 52 movies by platform\",\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Streaming Platform',\n        titlefont_size=16,\n        tickfont_size=14\n    ),\n    xaxis = dict(\n        range = [best_movies_df['AVG Score'].min() - 0.1, best_movies_df['AVG Score'].max() + 0.1],\n        title = \"Average Score\"\n    ),\n    legend=dict(\n        x=1,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)',\n        title = 'Streaming Platform'\n    ),\n)\n\nfig.show()","35a86b62":"#Since we are working with a small number of movies, we can work with the average, since no outliers will mess up the numbers. Now we see a different pattern, similar to the number of movies offered by platform. Prime Video leading with Netflix right behing, and Hulu and Disney+ almost drawn. Now, let's see how are genres distributed. First, let's get the data in a easier way do deal with.\ngenres_split = movies_data['Genres'].str.get_dummies(',')\ngenres_movie_df = pd.concat([movies_data, genres_split], axis = 1)\ngenres_movie_df = pd.melt(genres_movie_df, id_vars = ['ID', 'Title', 'Year', 'Age', 'IMDb', 'Rotten Tomatoes', 'Directors', 'Genres', 'Country', 'Language', 'Streaming Platform'], \n        value_vars = genres_split.columns, var_name = 'Genre')\ngenres_movie_df = genres_movie_df[genres_movie_df['value'] == 1].drop(['value', 'Genres'], axis = 1)\ngenres_movie_df.head()","5c475b9b":"genres_count = genres_movie_df.groupby('Genre', as_index = False).count()\ngenres_count = genres_count[['Genre', 'ID']].rename({'ID' : 'Count'}, axis = 'columns')\ngenres_count = genres_count.sort_values(by = 'Count', ascending = False)\n\nimport plotly.express as px\n\nfig = px.bar(genres_count.head(n = 15), y='Genre', x=\"Count\", color='Genre', orientation=\"h\", text = \"Count\"\n            )\n\nfig.update_layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title=\"Number of movies segmented by genre\",\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Movie genre',\n        titlefont_size=16,\n        tickfont_size=14\n    ),\n    legend=dict(\n        x=1,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n         bordercolor='rgba(255, 255, 255, 0)'\n    ),\n)\n\nfig.show()","5756964a":"countries_split = movies_data['Country'].str.get_dummies(',')\ncountries_movie_df = pd.concat([movies_data, countries_split], axis = 1)\ncountries_movie_df = pd.melt(countries_movie_df, id_vars = ['ID', 'Title', 'Year', 'Age', 'IMDb', 'Rotten Tomatoes', 'Directors', 'Genres', 'Language', 'Streaming Platform'], \n        value_vars = countries_split.columns, var_name = 'Country')\ncountries_movie_df = countries_movie_df[countries_movie_df['value'] == 1].drop(['value'], axis = 1)\ncountries_movie_df\n    ","e90e7f42":"countries_count = countries_movie_df.groupby('Country', as_index = False).count()\ncountries_count = countries_count[['Country', 'ID']].rename({'ID' : 'Count'}, axis = 'columns')\ncountries_count = countries_count.sort_values(by = 'Count', ascending = False)\n\nimport plotly.express as px\n\nfig = px.bar(countries_count.head(n = 15), y='Country', x=\"Count\", color='Country', orientation=\"h\", text = \"Count\"\n            )\n\nfig.update_layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title=\"Number of movies segmented by country\",\n    xaxis_tickfont_size=14,\n    yaxis=dict(\n        title='Movie genre',\n        titlefont_size=16,\n        tickfont_size=14\n    ),\n    legend=dict(\n        x=1,\n        y=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'\n    ),\n)\nfig.show()","02d7b0ab":"sns.kdeplot(movies_data['IMDb'],shade = True)\nplt.axvline(x = movies_data['IMDb'].median(),color = 'red',label = 'median')\nplt.legend()","4a3fcc21":"Lang = movies_datas.drop('Language', axis=1).join(\n    movies_data['Language'].str.split(',', expand=True).stack().reset_index(drop=True, level=1).rename('Language'))\n\nLang_count = Lang['Language'].value_counts().head(25).reset_index().set_index('index')\n","4f5283e7":"L_ratings = Lang.groupby('Language')['IMDb'].median()\nL_ratings = L_ratings.reset_index().set_index('Language')","cfff5029":"Top_10_lang = L_ratings.loc[['English','Hindi','Spanish','French','German','Italian'\n                                                      ,'Japanese','Korean','Mandarin','Russian'],'IMDb']\nTop_10_lang","42a46748":"Top_10_lang = Top_10_lang.reset_index().set_index('Language')\nEnglish = Lang.loc[Lang['Language']=='English','IMDb'].reset_index().set_index('index')","bec2e39f":"fig,axes = plt.subplots(1,2,figsize = (18,6))\n\nsns.kdeplot(English['IMDb'],ax = axes[1],shade = True)\nplt.axvline(English['IMDb'].median(),color = 'red')\n\nsns.barplot(x=Top_10_lang.index,y=Top_10_lang['IMDb'],ax = axes[0])\nplt.show()","083f8e28":"L_Netflix = Lang.loc[Lang['Netflix'] == 1,'Language'].value_counts().reset_index().set_index('index')\nL_Prime =  Lang.loc[Lang['Prime Video'] == 1,'Language'].value_counts().reset_index().set_index('index')\nL_Hulu = Lang.loc[Lang['Hulu'] == 1,'Language'].value_counts().reset_index().set_index('index')\nL_Disney = Lang.loc[Lang['Disney+'] == 1,'Language'].value_counts().reset_index().set_index('index')","e69c9133":"fig , axes = plt.subplots(2,2,figsize = (12,12))\n \nplt.subplots_adjust(hspace = 0.6,wspace = 0.5)    \n    \nL_Netflix.head(10).plot(kind = 'bar',ax = axes[0,0])\naxes[0,0].set_title('Netflix')\naxes[0,0].set_xlabel('')\naxes[0,0].set_ylabel('')\n\nL_Prime.head(10).plot(kind = 'bar',ax = axes[0,1])\naxes[0,1].set_title('Prime Video')\naxes[0,1].set_xlabel('')\naxes[0,1].set_ylabel('')\n\n\nL_Hulu.head(10).plot(kind = 'bar',ax = axes[1,0])\naxes[1,0].set_title('Hulu')\naxes[1,0].set_xlabel('')\naxes[1,0].set_ylabel('')\n\nL_Disney.head(10).plot(kind = 'bar',ax = axes[1,1])\naxes[1,1].set_title('Disney')\n\naxes[1,1].set_xlabel('')\naxes[1,1].set_ylabel('')\n\nfig.text(0.5, 0.004, 'Language', ha='center',fontsize = 'large')\nfig.text(0.004, 0.5, 'Count', va='center', rotation='vertical',fontsize = 'large')\nplt.show()\n\n","424c227f":"Genre = movies_datas.drop('Genres', axis=1).join(\n    movies_datas['Genres'].str.split(',', expand=True).stack().reset_index(drop=True, level=1).rename('Genre'))\nGenre_count = Genre['Genre'].value_counts().reset_index().set_index('index')","f0a2fe3e":"G_Netflix = Genre.loc[Genre['Netflix'] == 1,'Genre'].value_counts().reset_index().set_index('index')\nG_Prime =  Genre.loc[Genre['Prime Video'] == 1,'Genre'].value_counts().reset_index().set_index('index')\nG_Hulu = Genre.loc[Genre['Hulu'] == 1,'Genre'].value_counts().reset_index().set_index('index')\nG_Disney = Genre.loc[Genre['Disney+'] == 1,'Genre'].value_counts().reset_index().set_index('index')","b63a5dc9":"fig , axes = plt.subplots(2,2,figsize = (12,12))\n\n \nG_Netflix.head(10).plot(kind = 'bar',ax = axes[0,0],color = 'brown')\naxes[0,0].set_title('Netflix')\naxes[0,0].set_xlabel('')\naxes[0,0].set_ylabel('')\n\nG_Prime.head(10).plot(kind = 'bar',ax = axes[0,1],color = 'green')\naxes[0,1].set_title('Prime Video')\naxes[0,1].set_xlabel('')\n\nG_Hulu.head(10).plot(kind = 'bar',ax = axes[1,0],color = 'gray')\naxes[1,0].set_title('Hulu')\naxes[1,0].set_xlabel('')\naxes[1,0].set_ylabel('')\n\n\nG_Disney.head(10).plot(kind = 'bar',ax = axes[1,1])\naxes[1,1].set_title('Disney')\naxes[1,1].set_xlabel('')\n\nplt.tight_layout()\nfig.text(0.5, 0.004, 'Genre', ha='center',fontsize = 'large')\nfig.text(0.004, 0.5, 'Count', va='center', rotation='vertical',fontsize = 'large')\nplt.show()","13492af5":"# visualising the top 10 longest movies according to runtime","809917bb":"# Getting unique values of genres,directors and countries.\n","0c93114c":"# Distribution of movie rating in each platform\u00b6","f344656c":"# Top 5 movies on various platforms visualisation accordinng to imdb rating","c1193262":"# Average Runtime length of each ott platform","34bc7cf9":"# Average movie ratings from 1902-2020\n","084d77ad":"# Analysis of total count of movies in genres\u00b6","344072e6":"# Effect of runtime on rating","fb4750fd":"#  pie chart for distribution of movies on various platforms","d41beb6c":"# Top movies produced each year according to imdb in various years","4a02aba9":"# scatter plot of movies based on runtime and according to imdb rating and year","d45e1ee6":"****Dropping unncessary columns\n****","ab28633a":"# correlation of movies according to imdb\n","33f46b89":"# Top 10 movies","084fb391":"# number of movies produced each year per platform:","9c564abc":"# Please upvote if you liked my work****","470fa517":"# Average Runtime length of each ott platform\n","6ecca918":"# conclusion\nFrom the dataset it can be concluded that the distribution of movies on ott were on prime apart from other ott platforms and we were able to analyse the total number of movies and top 20 directors and top rated movies and we were able to develop a recommender system based on actors and genre and imdb rating","9366d727":"# IMDb ratings of the movies roughly follows normal distribution with mean of about 6.5","f3a75d0d":"# searching the movie on which platform it is present\n","c58e594a":"# Change of best movie rating over the years","d5470150":"# visualising top 20 movies according to screenplay\n ","72dc272e":"# Directors who directed the best and worst IMDb ranked movies","83aed273":"# Movies count by Language\u00b6","ec857a0e":"# Visualing of distribution of movies on various platforms with boxplot","e53eccdd":"# Data Analysis","79e319e2":"# pie chart for movie count for various countries","6c9cd7ff":"# Analysis of ages of people on various platforms","ffa56fd6":"# Lengthiest Movies according to IMDB runtime","ad474f1e":"# ****Filling the missingvalue with the mean","43355cb5":"# Most of the movies have about 90-100 minutes of runtime. Runtime is positively skewed since there are some movies with very large runtime.","aeea736a":"# Movies count by Language"}}