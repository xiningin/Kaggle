{"cell_type":{"4cc85ce4":"code","2bc85b5a":"code","64da9828":"code","fa509d7b":"code","29c01af8":"code","9c5b7e52":"code","2005076c":"code","9a1a64d3":"code","d74f4cea":"code","ae72465e":"code","67a65eb1":"code","beacc9fa":"code","1b10e661":"code","4873dcca":"code","d926c3b0":"code","1393a24c":"code","41a407b4":"code","5cec93ea":"code","9acce3f9":"code","44f8012d":"code","0a04df95":"code","0dbc1a5d":"code","a67fcd9f":"markdown","edeaa3f1":"markdown","d6e6d5bc":"markdown","87a98a4d":"markdown","f44afa1e":"markdown","5ccc2982":"markdown","73cc2a0c":"markdown","ba869af0":"markdown","ad060da4":"markdown","e7321830":"markdown","49bbcca9":"markdown","f401e92d":"markdown","4cc17e62":"markdown","0badd470":"markdown","b0bcd577":"markdown","573ad670":"markdown"},"source":{"4cc85ce4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(style=\"whitegrid\")\nimport scipy\nfrom scipy.stats import norm\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\nfrom sklearn.preprocessing import LabelBinarizer\nimport gc\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2bc85b5a":"# Install 7zip and unzip all files\n!apt install --assume-yes p7zip-full\n!7z x ..\/input\/mercari-price-suggestion-challenge\/train.tsv.7z -y\n!7z x ..\/input\/mercari-price-suggestion-challenge\/test.tsv.7z -y\n!7z x ..\/input\/mercari-price-suggestion-challenge\/test_stg2.tsv.zip -y\n!7z x ..\/input\/mercari-price-suggestion-challenge\/sample_submission.csv.7z -y\n!7z x ..\/input\/mercari-price-suggestion-challenge\/sample_submission_stg2.csv.zip -y","64da9828":"df_train = pd.read_csv('train.tsv',sep=\"\\t\", index_col=0)\ndf_train.head(10)","fa509d7b":"print(df_train.name.isna().sum())\nprint(df_train.name.isnull().sum())","29c01af8":"na_catg = (df_train.category_name.isna().sum()\/len(df_train))*100\n\nprint('Only ',round(na_catg, 3), \"% off all category_name data is missing\")\n\ndf_train['category_name'] = df_train['category_name'].fillna('missing')","9c5b7e52":"df_train[df_train['category_name'] == 'Electronics\/Computers & Tablets\/Components & Parts'].shape","2005076c":"def split_category_name(df):\n    # function from @Chris Defreitas\n    category_split = df['category_name'].str.split(r'\/', n=2, expand=True)\n    for i in [0,1,2]:\n        df['category_' + str(i)] = category_split[i]\n    return df","9a1a64d3":"df_train = split_category_name(df_train)\ndf_train.head()","d74f4cea":"electronics = df_train[df_train['category_0'] == 'Electronics']\nelectronics.shape","ae72465e":"electronics.describe()","67a65eb1":"a_brand = (electronics.brand_name.isna().sum()\/len(electronics))*100\n\nprint(round(a_brand, 3), \"% off all brand_name data is missing\")","beacc9fa":"# get the electronic brands\n_brands = electronics['brand_name'].value_counts().index.to_list()\n\n# remove brand with only 1 character\n_brands.remove('M')\n","1b10e661":"def check_brand_name(name, brand):\n    match = [b for b in _brands if b.lower() in name.lower()]\n    if match:\n        return match[0]\n    return brand","4873dcca":"df_brand_null = electronics[electronics['brand_name'].isna() == True]","d926c3b0":"for i in df_brand_null.index:\n    \n    name = electronics.loc[i, 'name']\n    \n    brand = electronics.loc[i, 'brand_name']\n    \n    # First we try with name columns value\n    res = check_brand_name(name, brand)\n    \n    if pd.isna(res):\n        description = electronics.loc[i, 'item_description']\n        res = check_brand_name(description, brand)\n        \n    electronics.at[i, 'brand_name'] = res\n","1393a24c":"na_brand = (electronics.brand_name.isna().sum()\/len(electronics))*100\n\nprint(round(na_brand, 3), \"% off all brand_name data is missing\")\n\nelectronics['brand_name'].fillna('missing', inplace=True)","41a407b4":"# plot the distribution\n\nplt.subplot(1, 2, 1)\n\n(electronics['price']).plot.hist(bins=50, figsize=(12, 6), edgecolor = 'white', range = [0, 200], color='g')\n\nplt.xlabel('price', fontsize=12)\nplt.title('Electronics Prices Distribution', fontsize=12)\n\nplt.subplot(1, 2, 2)\n\nnp.log(electronics['price']+1).plot.hist(bins=50, figsize=(12,6), edgecolor='white', color='g')\n\nplt.xlabel('log(price+1)', fontsize=12)\nplt.title('Electronics Prices Distribution', fontsize=12)\nplt.show()\n","5cec93ea":"for column in ['category_name', 'brand_name']:\n    electronics[column] = electronics[column].astype('category')\n\ncv = CountVectorizer()\nX_name = cv.fit_transform(electronics[\"name\"])\n\ncv2 = CountVectorizer()\nX_category = cv2.fit_transform(electronics[\"category_name\"])\n\ncount_descp = TfidfVectorizer(max_features=50000,\n                              ngram_range=(1, 3),\n                              stop_words=\"english\")\n\n# X_descp = count_descp.fit_transform(electronics[\"item_description\"])\n\nvect_brand = LabelBinarizer(sparse_output=True)\nX_brand = vect_brand.fit_transform(electronics[\"brand_name\"])\n\n# Dummy Encoders\nX_dummies = scipy.sparse.csr_matrix(pd.get_dummies(electronics[[\n    \"item_condition_id\", \"shipping\"]], sparse=True).values)\n\nX_dummies = X_dummies.astype(float)\n\nX = scipy.sparse.hstack((X_dummies, X_brand, X_category, X_name)).tocsr()","9acce3f9":"y = np.log1p(electronics['price']).values","44f8012d":"del df_train, electronics\ngc.collect()","0a04df95":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","0dbc1a5d":"from sklearn.linear_model import LinearRegression, Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\nmodels = {'linear_regression': LinearRegression(),\n          'random_forest': RandomForestRegressor(),\n          'Ridge': Ridge()}\n\nfor name, model in models.items():\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n\n    error = mean_squared_error(y_test, y_pred)\n    r2 = r2_score(y_test, y_pred)\n\n    print(name, ': ', 'MSE: ', error, 'R2: ', r2)","a67fcd9f":"Fill gaps in brand_name column, using the column **name** for the first, and after we try with the **item_description**","edeaa3f1":"### **Check caterogry_name missing values**","d6e6d5bc":"Let's see how many electronics there is in the table","87a98a4d":"**half of the dataset has no brand information, we can use the name column and the item_description to try fill this gaps**","f44afa1e":"### Check name column missing values","5ccc2982":"But we want any electronics, so we will separate the category in new columns","73cc2a0c":"### split train and test data","ba869af0":"### Check eletrocnincs missing values","ad060da4":"## Simple EDA","e7321830":"Clean memory","49bbcca9":"the name column is complete","f401e92d":"And now, we will seen how many electronics  are there","4cc17e62":"### **Electronics Price distribution**","0badd470":"get electronics null brands","b0bcd577":"And we reduce the bran_name missing data from 51% to 15.2%","573ad670":"### Encoding"}}