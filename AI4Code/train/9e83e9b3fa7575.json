{"cell_type":{"6b5ec755":"code","3f5e94b8":"code","b23b3320":"code","289b9050":"code","0a0fdf29":"code","ecfde39a":"code","c3ed3c6d":"code","fd1af2dd":"code","2affcee2":"code","920574fb":"code","23569ea7":"code","f0825ca8":"code","c86b570b":"code","bc25a119":"code","8c89011c":"code","bd2ef448":"markdown","6b9cb735":"markdown","d211294d":"markdown","ff2ee5c4":"markdown","fa0c6287":"markdown","0b0518a8":"markdown","5652263c":"markdown","9554c7af":"markdown"},"source":{"6b5ec755":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f5e94b8":"import pandas as pd\nimport numpy as np\nimport re\nimport plotly.express as px\nimport seaborn as sns\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\nstopwords = set(STOPWORDS)\nimport collections\nimport nltk\nfrom nltk.tokenize import sent_tokenize,word_tokenize\nimport matplotlib.pyplot as plt \nimport seaborn as sns \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\n\nnltk.download('punkt')","b23b3320":"train = pd.read_csv('\/kaggle\/input\/training-meta-info-nlp-tweets\/train_v3.csv')\ntest = pd.read_csv('\/kaggle\/input\/tweetstest-v3\/test_v3.csv')\ntrain['text'] = train['text'].astype(str)\ntest['text'] = test['text'].astype(str)","289b9050":"train","0a0fdf29":"feature_cols = ['Number_of_words',\t'Number_of_Sentences',\t'Number_of_Unique_Words',\t'Number_of_Stop_Words',\t'Number_of_Hashtage',\t'Number_of_Mentions',\t'Average_Word_Length']","ecfde39a":"X = train[feature_cols] # Features\ny = train.target","c3ed3c6d":"# split X and y into training and testing sets\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.1,random_state=0)","fd1af2dd":"# instantiate the model (using the default parameters)\nlogreg = LogisticRegression()\n\n# fit the model with data\nlogreg.fit(X_train,y_train)\n\n#\ny_pred=logreg.predict(X_test)","2affcee2":"cnf_matrix = metrics.confusion_matrix(y_test, y_pred)\ncnf_matrix\n","920574fb":"class_names=[0,1] # name  of classes\nfig, ax = plt.subplots()\ntick_marks = np.arange(len(class_names))\nplt.xticks(tick_marks, class_names)\nplt.yticks(tick_marks, class_names)\n# create heatmap\nsns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap=\"YlGnBu\" ,fmt='g')\nax.xaxis.set_label_position(\"top\")\nplt.tight_layout()\nplt.title('Confusion matrix', y=1.1)\nplt.ylabel('Actual label')\nplt.xlabel('Predicted label')","23569ea7":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))","f0825ca8":"y_pred_proba = logreg.predict_proba(X_test)[::,1]\nfpr, tpr, _ = metrics.roc_curve(y_test,  y_pred_proba)\nauc = metrics.roc_auc_score(y_test, y_pred_proba)\nplt.plot(fpr,tpr,label=\"data 1, auc=\"+str(auc))\nplt.legend(loc=4)\nplt.show()","c86b570b":"def threshold_prob(predictions,threshold):\n  arr = []\n  for p in predictions:\n    if p>threshold:\n      arr.append(1)\n    else:\n      arr.append(0)\n  return arr\n\n\npredicted_class = threshold_prob(logreg.predict_proba(X_test)[::,1],0.3)","bc25a119":"cnf_matrix = metrics.confusion_matrix(y_test, predicted_class)\ncnf_matrix\n","8c89011c":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))\nprint(\"Precision:\",metrics.precision_score(y_test, y_pred))\nprint(\"Recall:\",metrics.recall_score(y_test, y_pred))","bd2ef448":"I was curious about the amount of signal meta features would have in classifying tweets are real or fake.\nThe following features were extracted\n* Number_of_words\t\n* Number_of_Sentences\t\n* Number_of_Unique_Words\t\n* Number_of_Stop_Words\t\n* Number_of_Hashtage\t\n* Number_of_Mentions\t\n* Average_Word_Length\n\nI ran a logistic regression model (for simplicity) to understand the affect of meta features\nFor someone who wants to starts with a baseline model and does not want to deal with unstructured data, I believe this a fun way to start.\n*Results at the bottom*","6b9cb735":"Using Threshold of 0.3","d211294d":"* Accuracy: 0.6561679790026247\n* Precision: 0.6023166023166023\n* Recall: 0.49523809523809526","ff2ee5c4":"<center><img src=\"https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQMFvoMHABccfNgE2-0IQzuVhYci05TloJU4w&usqp=CAU\"><\/center>","fa0c6287":"<center><img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAQMAAADCCAMAAAB6zFdcAAAAeFBMVEUdofL\/\/\/8AnfKBwvaj0fgAmvEAnPEAmfEVn\/Lp9v7v+f75\/v\/P6vw\/rPTa7\/30+\/+02vlhufVNsvSUzvgyqPPK5\/zh8v1atvWt2vq84ftuvvao1PlGrfOExPcopPLY6\/yNyvcAk\/DE4\/t0wfaX0Pi43\/rQ5\/yVy\/hOHpQqAAAHi0lEQVR4nO2da3eqOhCGITYhqGChKFTUcrzs\/v9\/eIi621qVZEJIyF7zrtVvcnuazOQymQlCmD7qSb4LxquinFQr4DcFkB+vtoQR7vozJeKEBp\/TgRjEWURcf6CaOIkmiyEYfEZjbwE\/RdircQazDXP9WUDR0jCDOPCpEVxEiplJBlNPDMGt+M4kg51\/rUCIb8wxKL1sBq3Y1hSDV+r6W7QV\/THEwNdWIKRiEhQYfPrMQGWYoMDAt4HBrRQagpzBq98M6IcBBqWffvGviNw1yBn46xQukncGKYMPv7tC6x6lM0gpA8\/NQesZpEMEKQOvPaOQ3DtKGWx9Z0Dq3gwm3jN46c\/Ab9eIDISQATIQQgbIQAgZIAMhZIAMhJABMhBCBshACBkgAyFkgAyEkAEyEEIGyEAIGSADIWSADISQATIQQgbIQMhHBpwTxihjhJt5sn8MGNuV2+PpdDo22Y4yAw\/3jAGnyTH98exVvaEPHs9BaLxiwGk2v3t8ur6jwIIqB9zWCQNNaCy5J3CmkN9ExjH+toghsXJOGOQ6EDh9e\/oKNfv+VXFcAOPEHDAg27CAQ+DBsuMd0nPb4oysz7+CnSxywIDFYQy7IhAnj7rPpk4LGu0O79eIU1i4oH0GPGuvScHxfLHkLabV9y9SWAS1fQb03FrnMMfOUtlb\/FQBeiH7DHhwOVO4hFhuWkEQrIGNzD6D7HrZXP1NSdb5Ar\/UnOlypnz43joD9uXhUuVxAoccUm\/o1UEoOx\/7DPZfF8aFWlNgzwcG9zpEhPKymoYH5XZmn8GP00OzUsUo8ED9lH6a0LxZit9X6r7BOgNy4+ebRzOe31coHUU9a\/aeXk9xpwCTa5\/Bbd\/ey40CBfnFi6agV3LMIJyWskZbwBHMQINx+\/bgbsxbdydQ4RM4ggT2b7HO4H7+G2ddTYGBxkcXBLBBkn0Gpwe32BfPbaPCMdRbTWGtwIU9aB7epAqeTSCIbLb0SytwOgr7Y+X88V1mL7sn7kwxZ8lV7\/ATZvbnjb8dwzeF6nGPADFoNPIT2WfQdaJymZH7LgFiAJw2O2LwrDNcNK3yFsPNHUEMEi8YSMd9cZUFP\/ZOYDbREwZcvhowm9dZQaLzbhp9vKD+RJ4wuK6mSRXPq2adF7A1JF8YBKopui76F+1B+9A15LNA0tnDcuAX2j8qPW2vqZnODpZ1BrvzcJC+m\/nm34p18hBYZ5C0g2JKNGaDSoIsH7ljIG63nBTsv8dzp57a6+TosT9vvJj5eF\/vJffVUe1FO7hfRzKpgxc2kQ1kDS\/SimwYyxqKGc20Qlzs20S17J16WkUaCFysHwxoEPRSdjlYR4LsHgKlZRJdjJUV8\/nqSGcVyU080jBDxFYrvex1LtZQAPvIMFXeMAjIwcwn30kzoaeT9YOBZo26+c7dxOpC947UpJvM0k3MNt+BymAoSje3raO4dV6YbwmgOO0RMGidA3Q7Waqjbi5Ld+cXmOk1Re1iQA7PcLBcI9Doud610zy7PMfCWWawQ2gtHbhlwMU+GomSYwqLL3impX62b2c2sThmm6JIykNtZi7dI+m7s3bwNBRDT\/MeSd+dMQAFIculbw1c2gNgnFG39J2CSwYBO5r5\/LN6FQp06BsNTpzeeqX+d8iAK5dLk0lz\/WgEDMz1hj4G0TGDgJrZcqx7FkNxyoAztcikbvXsCa7PvXMTu4\/QEO2RMWi7Q2+bcOhdDsY1g3YG3c9FAs5ujZZB2x+aHvsNfeYJ42Eg0lZsdeeOsYkcHGNg0L4FTZq9Rp9YGCkfOg4G4kUYYztQaHKLQCOXxKNHj4VB6yKg1nHR2yteNBoGHLzObArBWBhwuoaag6mZjhCMhAGnOdAS6Bxfeyr3DDihJZhAuDdYIM0xA86jXaMxODgqnJf3ggFvveFhqbGsuOg8HDxyBoTws865\/4qs1ttsW+7MVgq0ymBTN2uhQ\/NySnUnCbOD6fqxVhnwTf9d1pPhRmCbQcCjrN9MOc0HKCJs2yZyttWnsDqYSJvpnIGYHGnOlAci4Cg+kT1IhynTMmND1Y11FJdGkxdIl4iPHYkyesvdvjMrKzUMqypng5bRdrnXxljSLLvDEOJ9k7CBzMCXHM8XSMQ3h2o+vR8wz+J9vS4ItVA82v28UbQHGmyySXN8OZ1O79XL23adJ2JtbeD\/\/1+NgIEQvyYQb8XMJRFX1EgYOBUyQAZCyAAZCCEDZCCEDJCBEDJABkLIABkIIQNkIIQMkIEQMkAGQsgAGQghA2QghAyQgRAyQAZCyAAZCCEDMwwshEkMKgMMYMVTRygiPUEjZfDpO4OuCjGKDHTT1Y1G7E9vBh++M4ikIfRSBuEAYdRWJU9yK2fQIz3TGKRQI1POwHODoFAUT84g9JuBQr5nBQZee0e5Z1RiEPrMQCXttwqDV39dQyQdHCgyCEtfWwJTKpysxECrNtQIxNWqQagx0M1x7VaqNQDUGISxhy2BqBaOU2QQzja+DROoctI6VQbtMEGjlqo7EUBRRHUGYVxGnpgFTqIJ4MA1gEEYrraEdZcuH4E4ocEnKKUtiEGrj3qS90rtObCKfALOOfA\/WT6ICSxMtGoAAAAASUVORK5CYII=\"><\/center>","0b0518a8":"The idea is to only use meta features like Word count, sentence count, hashtags, etc and understand the signal that can be extracted purely from meta features","5652263c":"Author - Mihir Ahuja\n\nData Citations - https:\/\/www.kaggle.com\/c\/nlp-getting-started\/overview\n\nNote - *Using only Meta Features can we classify tweets as Fake or Real?*","9554c7af":"As expected the model did not provide exceptional results.\nWith recall lower than 0.5\nTo understand the degree of impact of each meta features we can look at p-values of coefficients"}}