{"cell_type":{"2a342c95":"code","a2252149":"code","5186084a":"code","a6f17777":"code","0d0d1f6a":"markdown","c3e2e5db":"markdown","c5a3f6bc":"markdown"},"source":{"2a342c95":"search_string = \"Smartphone Decimeter\"","a2252149":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport warnings\nwarnings.filterwarnings('ignore')\n\ncomps = pd.read_csv('..\/input\/meta-kaggle\/Competitions.csv')\nour_competition  = comps[comps['Title'].str.contains(search_string,na=False)]\npd.set_option('display.max_columns', None)\nour_competition","5186084a":"CompetitionId       = our_competition[\"Id\"].squeeze()\nCompetitionIndex    = our_competition.index.values.astype(int)[0]\nall_teams           = pd.read_csv('..\/input\/meta-kaggle\/Teams.csv')\nteams               = all_teams[all_teams['CompetitionId']==CompetitionId]\nteams               = teams.assign(Medal=teams.Medal.fillna(0).astype(int))\nCOLOR_DICT          = {0: 'deepskyblue', 1: 'gold', 2: 'silver', 3: 'chocolate'}\nMEDAL_NAMES         = np.asarray([\"None\", \"Gold\", \"Silver\", \"Bronze\"])\nMEDAL_COLORS        = dict(zip(MEDAL_NAMES, COLOR_DICT.values()))\nrow                 = comps.loc[CompetitionIndex]\nteams               = teams.assign(Medal=MEDAL_NAMES[teams.Medal])\n\n# remove any teams with NaN scores\nLB_ranks            = teams[['Id','TeamName','PublicLeaderboardRank','PrivateLeaderboardRank', 'PublicLeaderboardSubmissionId', 'PrivateLeaderboardSubmissionId']].dropna(axis=0, how='any')\n\n# read in the file with the score data\nSubmissions         = pd.read_csv('..\/input\/meta-kaggle\/Submissions.csv')\n\ndef get_pub_score(PublicLeaderboardSubmissionId):\n    pub  = Submissions.query('Id == @PublicLeaderboardSubmissionId').PublicScoreLeaderboardDisplay.values[0]\n    return(pub)\n\ndef get_priv_score(PrivateLeaderboardSubmissionId):\n    priv = Submissions.query('Id == @PrivateLeaderboardSubmissionId').PrivateScoreLeaderboardDisplay.values[0]\n    return(priv)\n\nLB_ranks['PublicLeaderboardScore']  = LB_ranks.apply(lambda x: get_pub_score(x['PublicLeaderboardSubmissionId']),axis=1)\nLB_ranks['PrivateLeaderboardScore'] = LB_ranks.apply(lambda x: get_priv_score(x['PrivateLeaderboardSubmissionId']),axis=1)\n\n# make a new dataframe for writing out\nLB_ranks_and_scores = (LB_ranks[['Id','TeamName', 'PublicLeaderboardRank', 'PublicLeaderboardScore', 'PrivateLeaderboardRank','PrivateLeaderboardScore']]).set_index('Id')","a6f17777":"CompetitionId       = our_competition[\"Id\"].squeeze()\nCompetitionIndex    = our_competition.index.values.astype(int)[0]\nall_teams           = pd.read_csv('..\/input\/meta-kaggle\/Teams.csv')\nteams               = all_teams[all_teams['CompetitionId']==CompetitionId]\nteams               = teams.assign(Medal=teams.Medal.fillna(0).astype(int))\nCOLOR_DICT          = {0: 'deepskyblue', 1: 'gold', 2: 'silver', 3: 'chocolate'}\nMEDAL_NAMES         = np.asarray([\"None\", \"Gold\", \"Silver\", \"Bronze\"])\nMEDAL_COLORS        = dict(zip(MEDAL_NAMES, COLOR_DICT.values()))\nrow                 = comps.loc[CompetitionIndex]\nteams               = teams.assign(Medal=MEDAL_NAMES[teams.Medal])\n\n# remove any teams with NaN scores\nLB_ranks            = teams[['Id','TeamName','PublicLeaderboardRank','PrivateLeaderboardRank', 'PublicLeaderboardSubmissionId', 'PrivateLeaderboardSubmissionId']].dropna(axis=0, how='any')\n\n# read in the file with the score data\nSubmissions         = pd.read_csv('..\/input\/meta-kaggle\/Submissions.csv')\n\ndef get_pub_score(PublicLeaderboardSubmissionId):\n    pub  = Submissions.query('Id == @PublicLeaderboardSubmissionId').PublicScoreLeaderboardDisplay.values[0]\n    return(pub)\n\ndef get_priv_score(PrivateLeaderboardSubmissionId):\n    priv = Submissions.query('Id == @PrivateLeaderboardSubmissionId').PrivateScoreLeaderboardDisplay.values[0]\n    return(priv)\n\nLB_ranks['PublicLeaderboardScore']  = LB_ranks.apply(lambda x: get_pub_score(x['PublicLeaderboardSubmissionId']),axis=1)\nLB_ranks['PrivateLeaderboardScore'] = LB_ranks.apply(lambda x: get_priv_score(x['PrivateLeaderboardSubmissionId']),axis=1)\n\n# make a new dataframe for writing out\nLB_ranks_and_scores = (LB_ranks[['Id','TeamName', 'PublicLeaderboardRank', 'PublicLeaderboardScore', 'PrivateLeaderboardRank','PrivateLeaderboardScore']]).set_index('Id')\n\nfig = px.scatter(teams,\n                 title='Shakeup plot for: ' + row.Title,\n                 x='PublicLeaderboardRank',\n                 y='PrivateLeaderboardRank',\n                 hover_name='TeamName',\n                 hover_data=[\n                     'PublicLeaderboardRank',\n                     'PrivateLeaderboardRank',\n                     'Medal',\n                 ],\n                 color='Medal',\n                 color_discrete_map=MEDAL_COLORS)\nfig.update_traces(marker=dict(size=5))\nfig.update_layout(showlegend=False)\nfig.show()\n\n# save to a csv file\nLB_ranks_and_scores.to_csv(\"LB_ranks_and_scores.csv\", index=False)\n\n# Take a look at the Top 20 \nLB_ranks_and_scores.sort_values(by='PrivateLeaderboardRank', ascending=True).head(20)","0d0d1f6a":"Check that we have the correct competition:","c3e2e5db":"# Shakeup interactive scatterplot maker\n\nThis notebook is a *reductio* of the more detailed notebook [Meta Kaggle: Scatter Plot Competition Shake-up](https:\/\/www.kaggle.com\/jtrotman\/meta-kaggle-scatter-plot-competition-shake-up), written by [jtrotman](https:\/\/www.kaggle.com\/jtrotman). Here we produce an individual shakeup scatter plot of the [Google Smartphone Decimeter Challenge](https:\/\/www.kaggle.com\/c\/google-smartphone-decimeter-challenge) competition. This notebook also outputs the entire combined public and private leaderboards as a unified `csv` file.\n\nThis notebook is easily adaptable to any finished competition simply by using the pertinent `search_string`. (Note that it usually takes a few days between a competition finishing, and the data becoming publicly available in the [Meta Kaggle dataset](https:\/\/www.kaggle.com\/kaggle\/meta-kaggle)).","c5a3f6bc":"### And now the scatterplot, along with the 'Top 20' leaderboard"}}