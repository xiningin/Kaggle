{"cell_type":{"1c5500e0":"code","5d80571d":"code","dfd51d71":"code","2aa7755f":"code","080151ec":"code","37cd7fd7":"code","8acccea4":"code","6cd558a3":"code","b7506e18":"code","657ed86f":"code","aed1aaee":"code","68424e73":"markdown"},"source":{"1c5500e0":"import numpy as np\nimport pandas as pd\nimport xgboost as xgb\nfrom sklearn.svm import LinearSVC\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBClassifier","5d80571d":"#IMPORTANDO DATAFRAMES\ndatasuvived = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ndatatest = pd.read_csv('..\/input\/titanic\/test.csv')\ndatatrain = pd.read_csv('..\/input\/titanic\/train.csv')","dfd51d71":"SEED = 5\nnp.random.seed(SEED)","2aa7755f":"def transformar_sexo(valor):\n    if valor == 'female':\n        return 1\n    else:\n        return 0\ndatatrain['Sex_binario'] = datatrain['Sex'].map(transformar_sexo)\ndatatest['Sex_binario'] = datatest['Sex'].map(transformar_sexo)","080151ec":"def is_alone(x):\n    if  (x['SibSp'] + x['Parch'])  > 0:\n        return 0\n    else:\n        return 1\n\ndatatrain['Is_alone'] = datatrain.apply(is_alone, axis = 1)\ndatatest['Is_alone'] = datatest.apply(is_alone, axis = 1)","37cd7fd7":"#PREVIS\u00d5ES USANDO DUMMIES\ndados = ['Sex_binario', 'Age', 'Pclass', 'Fare','Is_alone','SibSp','Parch','Embarked']\nx_treino = datatrain[dados].fillna(-1)\ny_treino = datatrain['Survived']\n\nx_teste = datatest[dados].fillna(-1)\ny_teste = datasuvived['Survived']\n\ntreino_x = datatrain[dados].fillna(-1)\nteste_x = datatest[dados].fillna(-1)\n\nX_testeDummies = pd.get_dummies(teste_x).astype(int)\nXdummies = pd.get_dummies(treino_x).astype(int)\nYdummies = y_treino\n\nXdummies = Xdummies.drop('Embarked_-1', axis=1)\n\nX_teste = X_testeDummies.values\nX = Xdummies.values\nY = Ydummies.values\n\n#MODELO LINEAR SVC\nmodelo = LinearSVC(random_state=0)\nmodelo.fit(X,Y)\nprevisoes = modelo.predict(X_teste)\n\n#MODELO RANDOM FLOREST\nmodelorfc = RandomForestClassifier(n_estimators=100, n_jobs=-1, random_state=SEED)\nmodelorfc.fit(X,Y)\nprevisoes2 = modelorfc.predict(X_teste)\n\nacuracia = accuracy_score(y_teste, previsoes) * 100\nprint(\"A acur\u00e1cia foi %.2f%%\" % acuracia)\n\nacuracia2 = accuracy_score(y_teste, previsoes2) * 100\nprint(\"A acur\u00e1cia foi %.2f%%\" % acuracia2)","8acccea4":"#PREVIS\u00d5ES - MODELO LINEAR SVC\ndados2 = ['Sex_binario', 'Age', 'Pclass', 'Fare','Is_alone','SibSp','Parch']\nx_treino = datatrain[dados2].fillna(-1)\ny_treino = datatrain['Survived']\n\nx_teste = datatest[dados2].fillna(-1)\ny_teste = datasuvived['Survived']\n\nmodelo = LinearSVC(random_state=0)\nmodelo.fit(x_treino, y_treino)\nprevisoes = modelo.predict(x_teste)\n\nacuracia = accuracy_score(y_teste, previsoes) * 100\nprint(\"A acur\u00e1cia foi %.2f%%\" % acuracia)\n\n\n","6cd558a3":"#PREVIS\u00d5ES - MODELO RANDOM FLOREST\ndados2 = ['Sex_binario', 'Age', 'Pclass', 'Fare','Is_alone','SibSp','Parch']\nx_treino = datatrain[dados2].fillna(-1)\ny_treino = datatrain['Survived']\n\nx_teste = datatest[dados2].fillna(-1)\ny_teste = datasuvived['Survived']\n\nmodelorfc = RandomForestClassifier(n_estimators=100, n_jobs=-1, random_state=SEED)\nmodelorfc.fit(x_treino, y_treino)\nprevisoes2 = modelorfc.predict(x_teste)\n\nacuracia2 = accuracy_score(y_teste, previsoes2) * 100\nprint(\"A acur\u00e1cia foi %.2f%%\" % acuracia2)","b7506e18":"#BASELINE\nprevisoes_de_base = np.ones(418)\nacuracia = accuracy_score(y_teste, previsoes_de_base) * 100\nprint(\"A acur\u00e1cia do algoritmo de baseline foi %.2f%%\" % acuracia)","657ed86f":"# PREVIS\u00d5ES USANDO XGBOOTS\ndados2 = ['Sex_binario', 'Age', 'Pclass', 'Fare','Is_alone','SibSp','Parch']\nx_treino = datatrain[dados2].fillna(-1)\ny_treino = datatrain['Survived']\n\nx_teste = datatest[dados2].fillna(-1)\ny_teste = datasuvived['Survived']\n\ndata_dmatrix = xgb.DMatrix(data=X,label=Y)\nxg_reg = xgb.XGBClassifier(objective ='reg:linear', colsample_bytree = 0.2, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 100)\n\nxg_reg.fit(x_treino,y_treino)\n\npreds = xg_reg.predict(x_teste)\npred = [round(value) for value in preds]\naccuracy = accuracy_score(y_teste, pred)\n\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n\nsub = pd.Series(preds, index=datatest['PassengerId'], name='Survived')\nsub.to_csv(\"Titanic_Larissa5.csv\", header=True)\n","aed1aaee":"#PREVIS\u00d5ES - MODELO XGBOOTS + DUMMIES\ndados = ['Sex_binario', 'Age', 'Pclass', 'Fare','Is_alone','SibSp','Parch','Embarked']\nx_treino = datatrain[dados].fillna(-1)\ny_treino = datatrain['Survived']\n\nx_teste = datatest[dados].fillna(-1)\ny_teste = datasuvived['Survived']\n\ntreino_x = datatrain[dados].fillna(-1)\nteste_x = datatest[dados].fillna(-1)\n\nX_testeDummies = pd.get_dummies(teste_x).astype(int)\nXdummies = pd.get_dummies(treino_x).astype(int)\nYdummies = y_treino\n\nXdummies = Xdummies.drop('Embarked_-1', axis=1)\n\nX_teste = X_testeDummies.values\nX = Xdummies.values\nY = Ydummies.values\n\ndata_dmatrix = xgb.DMatrix(data=X,label=Y)\nxg_reg = xgb.XGBClassifier(objective ='reg:linear', colsample_bytree = 0.3, learning_rate = 0.1,\n                max_depth = 5, alpha = 10, n_estimators = 10)\n\nxg_reg.fit(X,Y)\n\npreds = xg_reg.predict(X_teste)\npred = [round(value) for value in preds]\naccuracy = accuracy_score(y_teste, pred)\n\nprint(\"Accuracy: %.2f%%\" % (accuracy * 100.0))\n\nsub = pd.Series(preds, index=datatest['PassengerId'], name='Survived')\nsub.to_csv(\"Titanic_Larissa4.csv\", header=True)","68424e73":"* 0 - n\u00e3o \n* 1 - sim"}}