{"cell_type":{"7e196994":"code","724e3fb0":"code","d835b5ff":"code","87b5d3ef":"code","af385026":"code","6b6cb66a":"code","e423484e":"code","186acac1":"code","db3da017":"code","ac6a8f37":"code","189875e3":"code","c2cf2083":"code","1eb58a8b":"code","81a9274a":"code","f6a17046":"code","fa69b185":"code","470ca129":"code","b72ff68a":"code","8e8b720c":"code","f84f1432":"code","d8a9823a":"code","1be4d425":"markdown","7d1bbe42":"markdown","08e66015":"markdown","efa80b6f":"markdown","0573f47b":"markdown","94ca746b":"markdown","ee93c57b":"markdown","f47de2ff":"markdown","c8658771":"markdown","0bb4ac39":"markdown","4227aedf":"markdown","3c2efe6a":"markdown","c8af1b8b":"markdown","ba945d8d":"markdown","b2e738d8":"markdown","be83d578":"markdown","4f6a6d0d":"markdown","6746b722":"markdown","8981135c":"markdown","35ae3f1e":"markdown"},"source":{"7e196994":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom pylab import subplot\nimport scipy.stats as stats\nfrom statsmodels.stats.weightstats import *\nfrom statsmodels.stats.proportion import proportion_confint\nfrom statsmodels.stats.weightstats import zconfint\nimport warnings\nwarnings.filterwarnings('ignore')","724e3fb0":"path = '..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv'\ndf = pd.read_csv(path)\ndf.head()","d835b5ff":"df.info()","87b5d3ef":"sns.countplot(df.DEATH_EVENT)\nplt.title('Classes in target feature')\nplt.show()","af385026":"df.describe()","6b6cb66a":"print('Count uniqie values of features')\nfor col in df.columns:\n    print(col, ':', df[col].nunique())","e423484e":"# function for analysis features\ndef research_bin(col):\n    \n    print(col.upper())\n    n1 = len(df[df.DEATH_EVENT == 1])\n    n0 = len(df[df.DEATH_EVENT == 0])\n    \n    prop_not_death = proportion_confint(df[df.DEATH_EVENT == 0][col].sum(), n0, method = 'wilson')\n    prop_death = proportion_confint(df[df.DEATH_EVENT == 1][col].sum(), n1, method = 'wilson')\n    print('95% confidence interval for a anaemia probability in \"death\" class:', prop_death)\n    print('95% confidence interval for a anaemia probability in \"alive\" class:', prop_not_death)  \n    \n    z = stats.norm.cdf(1-0.05\/2)\n    p1 = df[df.DEATH_EVENT == 1][col].sum()\/len(df[df.DEATH_EVENT == 1])\n    p0 = df[df.DEATH_EVENT == 0][col].sum()\/len(df[df.DEATH_EVENT == 0])\n\n    left_bound = p0 - p1 - np.sqrt(p0*(1-p0)\/n0 + p1*(1 - p1)\/n1)\n    right_bound = p0 - p1 + np.sqrt(p0*(1-p0)\/n0 + p1*(1 - p1)\/n1)\n    print(\"95% confidence interval for a difference between proportions:\", [round(left_bound, 5), round(right_bound, 5)])\n    P = float(p1*n1 + p0*n0) \/ (n1 + n0)\n    z_stat = (p0 - p1) \/ np.sqrt(P * (1 - P) * (1. \/ n1 + 1. \/ n0))\n    print(\"p-value of h0 (proportions are equal): \", round(2 * (1 - stats.norm.cdf(abs(z_stat))), 5))\n    \n    print('Criterion of chi2 (independence with target feature): p-value = {0}, chi2-statistic = {1}'.format(round(stats.chi2_contingency(pd.crosstab(df[col], \n                                                                                                             df[\"DEATH_EVENT\"]))[1], 5),\n                                                                         round(stats.chi2_contingency(pd.crosstab(df[col], \n                                                                                                             df[\"DEATH_EVENT\"]))[0], 5)))\n    print('Correlation of Matthew(with target feature):', round(np.sqrt(stats.chi2_contingency(pd.crosstab(df[col], df[\"DEATH_EVENT\"]))[0])\/2, 5))","186acac1":"bin_cols = ['anaemia', 'sex', 'smoking', 'diabetes', 'high_blood_pressure']\nfor col in bin_cols:\n    sns.countplot(df.DEATH_EVENT, hue = df[col])\n    plt.title(col.upper())\n    plt.show()\n    research_bin(col)","db3da017":"def analisys_num(col):\n    \n    plt.figure(figsize = (14, 5))\n    subplot(1, 2, 1)\n    sns.distplot(df[df.DEATH_EVENT == 1][col])\n    sns.distplot(df[df.DEATH_EVENT == 0][col])\n\n    subplot(1, 2, 2)\n    sns.boxplot(y = df[col], x = df.DEATH_EVENT)\n    plt.show()\n    \n    print('Statistic conclusion from data (%s):' % col.upper())\n    print('95% confidence interval for the mean in \"death\" class:', zconfint(df[df.DEATH_EVENT == 1][col]))\n    print('95% confidence interval for the mean in \"alive\" class:', zconfint(df[df.DEATH_EVENT == 0][col]))\n\n    print(\"p-value of h0 (distributions are equal, criterion 'mannwhitneyu'): \", stats.mannwhitneyu(df[df.DEATH_EVENT == 1][col], \n                                                                          df[df.DEATH_EVENT == 0][col])[1])\n\n    df['n'] = (df[col] - df[col].mean())\/df[col].std()\n    diff = df[df.DEATH_EVENT == 1]['n'].mean() - df[df.DEATH_EVENT == 0]['n'].mean()\n    print('Correlation (difference between expectations of two class):', diff)\n    ","ac6a8f37":"num_cols = ['creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium', 'time']\nfor col in num_cols:\n    analisys_num(col)\n    \ndel df['n']","189875e3":"# table of pair correlations\ndf[num_cols].corr()","c2cf2083":"plt.figure(figsize = (18, 4))\nsubplot(1, 3, 1)\nsns.distplot(df.serum_sodium, color = 'red')\n\nsubplot(1, 3, 2)\nsns.distplot(df.serum_creatinine, color = 'green')\n\nsubplot(1, 3, 3)\nsns.regplot(df.serum_sodium, df.serum_creatinine)\nplt.show()","1eb58a8b":"from itertools import combinations\ncomb = combinations(bin_cols, 2)\nfor i in comb:\n    print(\"Features:\", i, ', p_value(hypotesys of independence) = ', round(stats.chi2_contingency(pd.crosstab(df[i[0]], \n                                                                                                             df[i[1]]))[1], 5))\n# criterion chi2","81a9274a":"plt.figure(figsize = (18, 10))\nsubplot(2, 3, 1)\nsns.countplot(x = df.sex, hue = df.smoking)\n\nsubplot(2, 3, 2)\nsns.countplot(x = df.sex, hue = df.diabetes)\n\nsubplot(2, 3, 3)\nsns.countplot(x = df.diabetes, hue = df.smoking)\n\nsubplot(2, 3, 4)\nsns.countplot(x = df.anaemia, hue = df.smoking)\n\nsubplot(2, 3, 5)\nsns.countplot(x = df.sex, hue = df.high_blood_pressure)\n\nsubplot(2, 3, 6)\nsns.countplot(x = df.sex, hue = df.anaemia)\n\nplt.show()","f6a17046":"for bin_col in bin_cols:\n    print(bin_col.upper())\n    i = 0\n    for col in num_cols:\n        i += 1\n        df['n'] = (df[col] - df[col].mean())\/df[col].std()\n        diff = df[df[bin_col] == 1]['n'].mean() - df[df[bin_col] == 0]['n'].mean()\n        print('| {0} - {1} |'.format(col, bin_col), round(diff, 3)) \n    print('\\n')\n# correlations in pairs(binary - numerical)","fa69b185":"plt.figure(figsize = (12, 10))\nsubplot(2, 2, 1)\nsns.violinplot(y = df.time, x = df.high_blood_pressure)\n\nsubplot(2, 2, 2)\nsns.violinplot(y = df.platelets, x = df.sex)\n\nsubplot(2, 2, 3)\nsns.violinplot(y = df.time, x = df.anaemia)\n\nsubplot(2, 2, 4)\nsns.violinplot(y = df.creatinine_phosphokinase, x = df.anaemia)\nplt.tight_layout()\nplt.show()","470ca129":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import f1_score, roc_auc_score, accuracy_score, confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom  xgboost import XGBClassifier \nfrom sklearn.linear_model import LogisticRegression","b72ff68a":"X = df.drop('DEATH_EVENT', axis = 1)\ny = df['DEATH_EVENT']\n\ntrain_x, test_x, train_y, test_y = train_test_split(X, y, test_size = 0.2) \n\ndef model(cls):\n    cls.fit(train_x, train_y)\n    y_pred = cls.predict(test_x)\n    print('Accuracy-score: {0}, F1-score: {1}, ROC-AUC-score: {2}'.format(round(accuracy_score(y_pred, test_y), 5), \n                                                                       round(f1_score(y_pred, test_y), 5), \n                                                                          round(roc_auc_score(y_pred, test_y), 5)))\n    print('Confusion matrix:')\n    sns.heatmap(confusion_matrix(y_pred, test_y), annot = True, cmap = plt.cm.Blues)\n    plt.show()","8e8b720c":"logreg = LogisticRegression()\nprint('Logistic Regression')\nmodel(logreg)","f84f1432":"forcls = RandomForestClassifier()\nprint('Random Forest')\nmodel(forcls)","d8a9823a":"xgbcls = XGBClassifier(booster = 'gbtree')\nprint('Gradient booster classifier')\nmodel(xgbcls)","1be4d425":"<i>It's difficult to see any strikly dependency.\nProbably the reason for bad correlation of num features is competent reserch, because all these features give important information that can't be obtained through other features.<br>  \nNow check out binary features.","7d1bbe42":"<i>We have two group of features: binary(anaemia, sex, smoking, diabetes, high_blood_pressure) and numerical(other)","08e66015":"### Binary features","efa80b6f":"Results:\n* Logistic Regression - Accuracy-score: 0.83333, F1-score: 0.72222, ROC-AUC-score: 0.8267\n* Random Forest - Accuracy-score: 0.83333, F1-score: 0.72222, ROC-AUC-score: 0.8267\n* Gradient booster classifier - Accuracy-score: 0.86667, F1-score: 0.78947, ROC-AUC-score: 0.85714","0573f47b":"# Modeling","94ca746b":"# Data loading and general data inspection","ee93c57b":"# Visual and stats analysis(relationship with target features)","f47de2ff":"Conclusions(only about observed sample):\n* Male smoke a lot more than women.\n* Also we can see that diabetes is more common in females rather than males(possible reason - dietary preference in diferent sexes. For example women more like cake and sweets, etc).\n* Proportion people with such health problems as anaemia and high blood pressure is higher in female class(Feasible reason for this is both habits that is unusual for men or genetic differences)\n* There isn't relation between smoking and existence of health problems(anaemia, high pressure, diabetes). It's unusual, because smoking significantly damage health and can indirectly influence on other diseases.\n* Three disease in sample (anaemia, high pressure, diabetes) have strikly relations between each other.","c8658771":"## Dependency between not target features\n### Only numerical features","0bb4ac39":"Now, we can divide features into two group(relationship to a target feature):\n* High correlation(binary: high_blood_pressure, anaemia; numerical: ejection_fraction, serum_creatinine, serum_sodium, time) \n* Low correlation(binary: sex, smoking, diabets; numerical: platelets, creatinine_phosphokinase)","4227aedf":"<i>People with anaemia often have low count creatinine_phosphokinase in blood than other.<br>\nIt is possible that patients with high blood pressure or with a reduced count of erythrocytes were very closely monitored (since the risk of heart failure greatly increases, the correlation confirmed this). That way these people probably had more effective treatment or died faster then other, therefore the observation time becomes shorter.","3c2efe6a":"<i>Let's see on all features except target. Probably we'll find any interesting dependecy in features.","c8af1b8b":"<i>Based on features from first group we can assert about high risk of heart failure","ba945d8d":"### Numerical features(relationship with target feature)","b2e738d8":"### 'Mixed' pairs","be83d578":"<i>Based on correlation betweeen num features, here is nothing interesting. Except maybe serum_creatinine and serum_sodium.","4f6a6d0d":"### Only binary features","6746b722":"<i>We can observe low or medium correlation in next pair(other pairs has too low correlations): \n* time - high_blood_pressure\n* platelets - sex\n* time - anaemia\n* creatinine_phosphokinase - anaemia<br>\n\nLet's see on these distributions in classes","8981135c":"<i>There is something interesting.<br> \nPair ('sex', 'smoking') stands out from other pair and few pair has significult dependence(0.05 > p-value).<br>\nDrow the graphs and look at distribution this features.","35ae3f1e":"P.S.: Sorry for my English :)"}}