{"cell_type":{"a8f655b9":"code","55b01762":"code","0b7cee6e":"code","291cdceb":"code","2f494213":"code","270b4009":"code","07633b6d":"code","6ff82aa4":"code","3f4ff06b":"code","66608ffc":"code","8de50b77":"code","ea24e5c2":"code","01522169":"code","210f7fac":"code","4fa2fcb5":"code","dab08f1c":"code","0d837ea7":"code","29a60e9e":"code","5f05fd85":"code","5d0d9bd3":"code","08d0d6bd":"code","407b7ab4":"markdown","a222e2c7":"markdown","fa246046":"markdown","d2f9df87":"markdown","5b650142":"markdown","e8cf4956":"markdown","59518259":"markdown","2af36f32":"markdown","b7ac1dd5":"markdown","f2902395":"markdown","6cdc7900":"markdown","30e12a3d":"markdown","304c8f52":"markdown","826bf3c9":"markdown","d860d086":"markdown","cf6c1e2b":"markdown","b3d0ab19":"markdown","3771bea0":"markdown","e5493c71":"markdown","1ab0cbc4":"markdown"},"source":{"a8f655b9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","55b01762":"import pandas as pd\n\n# Importing the dataset\nbcell = pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_bcell.csv')\n\nbcell.head()","0b7cee6e":"sars = pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_sars.csv')\n\nsars.head()","291cdceb":"bs = pd.concat([bcell, sars], ignore_index=True)\n\nbs","2f494213":"from sklearn.model_selection import train_test_split\ntrain, test = train_test_split(bs, test_size=0.1)","270b4009":"!pip install pycaret","07633b6d":"from pycaret.classification import *\n\nexperiment = setup(\n    data = train \n    ,target = 'target'\n    ,ignore_features = ['parent_protein_id', 'protein_seq', 'peptide_seq']\n    ,normalize = True\n)","6ff82aa4":"compare_models()","3f4ff06b":"from sklearn.metrics import roc_auc_score\n\nbest_models = ['et','catboost','xgboost','lightgbm','rf']\n\ndf_Results = pd.DataFrame(columns=['Classification', 'Dataset', 'Model', 'AUC'])\n\nfor m in best_models:\n    \n    print('-----------------------------------------------------')\n    print('[START] - Processing model: ', m)\n    print('-----------------------------------------------------')\n    \n    mo = create_model(m)\n    \n    print('-----------------------------------------------------')\n    print('[START] - Tunning model: ', m)\n    print('-----------------------------------------------------')\n    \n    tu = tune_model(mo)\n    \n    print('-----------------------------------------------------')\n    print('[START] - Ensemble model: ', m)\n    print('-----------------------------------------------------')\n    \n    en = ensemble_model(mo)\n    \n    mo_pred = predict_model(mo, test)\n    mo_pred.dropna(inplace=True)\n    \n    tu_pred = predict_model(tu, test)\n    tu_pred.dropna(inplace=True)\n    \n    en_pred = predict_model(en, test)\n    en_pred.dropna(inplace=True)\n    \n    try:\n        df_Results.loc[len(df_Results)] = [m, 'Valid', 'Model', roc_auc_score(mo_pred['target'], mo_pred['Label'])]\n    except:\n        df_Results.loc[len(df_Results)] = [m, 'Valid', 'Model', 'NA']\n    try:\n        df_Results.loc[len(df_Results)] = [m, 'Valid', 'Tunned', roc_auc_score(tu_pred['target'], tu_pred['Label'])]\n    except:\n        df_Results.loc[len(df_Results)] = [m, 'Valid', 'Tunned', 'NA']\n    try:\n        df_Results.loc[len(df_Results)] = [m, 'Valid', 'Ensembled', roc_auc_score(en_pred['target'], en_pred['Label'])]\n    except:\n        df_Results.loc[len(df_Results)] = [m, 'Valid', 'Ensembled', 'NA']\n    \n    print('-----------------------------------------------------')\n    print('[FINISHED] - Model: ', m)\n    print('-----------------------------------------------------')","66608ffc":"print(df_Results.sort_values(by=['Dataset', 'AUC'], ascending=False))","8de50b77":"rf = create_model('rf')","ea24e5c2":"rf_tunned = tune_model(rf)","01522169":"plot_model(rf_tunned)","210f7fac":"plot_model(rf_tunned, 'confusion_matrix')","4fa2fcb5":"plot_model(rf_tunned, 'threshold')","dab08f1c":"plot_model(rf_tunned, 'error')","0d837ea7":"plot_model(rf_tunned, 'class_report')","29a60e9e":"plot_model(rf_tunned, 'feature')","5f05fd85":"covid = pd.read_csv('\/kaggle\/input\/epitope-prediction\/input_covid.csv')\n\ncovid.head()","5d0d9bd3":"pred_covid = predict_model(rf_tunned, covid)\n\npred_covid","08d0d6bd":"pred_covid.to_csv('submit.csv', index=False)","407b7ab4":"## Discrimination Threshold","a222e2c7":"## Split train and test data sets","fa246046":"## Run the model to make predictions over Covid-19 dataset","d2f9df87":"## Train and compare several ML models","5b650142":"## Feature importance","e8cf4956":"## Check ROC AUC for the best model","59518259":"## Class prediction error","2af36f32":"### Cehck best ROC AUC","b7ac1dd5":"### Test all models","f2902395":"## Check ROC AUC for the best 5 models","6cdc7900":"## Setup pycaret","30e12a3d":"## Check confusion matrix for the best model","304c8f52":"## Install pycaret","826bf3c9":"## Submit task","d860d086":"## Classification report","cf6c1e2b":"## Get data","b3d0ab19":"# Covid-19 prediction with pycaret","3771bea0":"## Get Covid-19 data","e5493c71":"## Create the best model","1ab0cbc4":"## Default kaggle get data"}}