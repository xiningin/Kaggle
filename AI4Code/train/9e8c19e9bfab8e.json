{"cell_type":{"9b25b9c5":"code","f603439c":"code","c98bddb3":"code","59800fa8":"code","a823d5eb":"code","2b68bc58":"code","b3e8d0f4":"code","4a11ce3d":"code","e9b06077":"code","2cf82c4a":"code","dab47825":"markdown","35e8d99d":"markdown","18e6771c":"markdown","6f88c12e":"markdown"},"source":{"9b25b9c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f603439c":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D","c98bddb3":"#generate random input data to train\nobservations = 1000\n\nxs=np.random.uniform(low=-10, high=10, size=(observations,1))\nzs=np.random.uniform(-10,10,(observations,1))\n\ninputs=np.column_stack((xs,zs))\n\nprint(inputs.shape)","59800fa8":"#create the targets\n#targets= f(x,z)=2*xs-3*zs+bias+noise\n\nnoise=np.random.uniform(-1,1,(observations,1))\ntargets= 2*xs-3*zs+5+noise\n\nprint(targets.shape)","a823d5eb":"#plot the training data\ntargets= targets.reshape(observations,)\nfig=plt.figure()\nax=fig.add_subplot(111, projection='3d')\nax.plot(xs,zs,targets)\nax.set_xlabel('xs')\nax.set_ylabel('zs')\nax.set_zlabel('targets')\nax.view_init(azim=100)\nplt.show()\ntargets=targets.reshape(observations,1)","2b68bc58":"#initialize variables\n#our initial weights & biases will picked randomly from the interval[-0.1,0.1]\ninit_range=0.1\n\nweights= np.random.uniform(-init_range,init_range,size=(2,1)) #w=2x1\nbiases= np.random.uniform(-init_range, init_range, size=1)    #b=1x1\n\nprint(weights)\nprint(biases)","b3e8d0f4":"#set a learning rate\n\nlearning_rate = 0.02 #different learning rates affects the speed of optimization\n","4a11ce3d":"for i in range(100):\n  outputs= np.dot(inputs,weights)+ biases #np.dot(A,B) is a method used for multiplying matrices.\n \n  deltas= outputs- targets\n\n  loss= np.sum(deltas**2)\/2\/observations\n  # division by a constant doesn't change the logic of a loss, as it is still lower for higher accuracy\n\n  print(loss) # we print loss on each step as we want to keep on eye whether it is decreasing\n\n  deltas_scaled = deltas\/observations\n\n  weights = weights - learning_rate* np.dot(inputs.T,deltas_scaled)\n             \n  biases = biases - learning_rate* np.sum(deltas_scaled)\n\n  ","e9b06077":"print(weights, biases) ","2cf82c4a":"# plots last outputs vs targets\n\nplt.plot(outputs,targets)\nplt.xlabel('outputs')\nplt.ylabel('targets')\nplt.show()","dab47825":"In the above code, np.dot(A,B) is a method used for multiplying matrices. We can also use A.dot(B) to perform the same operation. Biases is scalar it is added to each element of output matrices.Also, inputs.T is used to transpose a matrices, transpose of a matrices doesn't affect the information they hold.","35e8d99d":"play around the code & find the optimal number of iterations","18e6771c":"closer this plot is to 45 degree, closer the outputs & targets values are.","6f88c12e":" To train the model for each iteration \n 1. calculate the outputs\n 2. compare outputs to targets through loss \n 3. Print loss \n 4. Adjust weights & losses"}}