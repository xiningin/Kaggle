{"cell_type":{"f086ee88":"code","7d2157ac":"code","51715bb0":"code","931c90db":"code","675dd7b9":"code","dafa2df1":"code","cef32177":"code","53793b42":"code","d7136058":"code","a51441c5":"code","50fc6c9d":"code","8e77da38":"code","d938c938":"code","a40dacb0":"code","65d21c28":"code","abb0d378":"code","a81c3ce6":"code","e8409194":"code","77382a34":"code","778965c1":"code","32aaec87":"code","8ed83010":"markdown","f093ce02":"markdown"},"source":{"f086ee88":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.transforms as transforms\nimport matplotlib.gridspec as gridspec\nimport matplotlib.patches as patch\nimport seaborn as sns\nimport numpy as np\nimport math\nimport matplotlib\nimport re\nfrom matplotlib.patches import Patch\nimport bokeh\nfrom matplotlib_venn import venn3\nimport squarify","7d2157ac":"#Codes for my own color interpolation\n#string to int with 2 slots - hexadecimal to decimal\ndef hextodec(a):\n    x=0; clr=0; av=1\n    L=len(a)\n    \n    for i in range(L):\n        clr=ord(a[L-i-1])\n        if (clr>=65):\n            clr-=55\n        else:\n            clr-=48\n        x=x+av*clr\n        av*=16\n    return x\n\n#integer to string with 2 slots - decimal to hexadecimal\ndef dectohex(a):\n    l=[0]*2\n    \n    for i in range(2):\n        x=a%16\n        if (x<10):\n            l[1-i]=chr(x+48)\n        else:\n            l[1-i]=chr(x+55)\n        a=a\/\/16\n    return ''.join(l)\n\n#interpolation of colors - I take n colors between color a(hex - ex. '#EE8800'), and color b\ndef colorize(a, b, n):\n    l=[0]*n\n    d=[0]*3\n    a1=[0]*3\n    \n    for i in range(0,3,1):\n        f1=a[1+i*2:3+i*2]\n        f2=b[1+i*2:3+i*2]\n        a1[i]=f1=hextodec(f1)\n        f2=hextodec(f2)\n        d[i]=(f2-f1)\/\/n\n    \n    for i in range(0, n, 1):\n        l[i]='#'\n        for j in range(0, 3, 1):\n            l[i]+=dectohex(a1[j])\n            a1[j]+=d[j]\n    return l\n\n#Create 2 random colors with difference in 1 dimension equal diff - useful for interpolation\ndef gen_rand_colors(diff):\n    if (diff>128):\n        diff=128\n    \n    l=[0]*3\n    l2=[0]*3\n    \n    for i in range(0,3,1):\n        l[i]=l2[i]=np.random.randint(0,256)\n    x=np.random.randint(0,3)\n    if (l[x]<=255-diff):\n        l2[x]=l[x]+diff\n    else:\n        l2[x]=l[x]-diff\n    \n    s1='#'; s2='#'\n    for i in range(0,3,1):\n        s1+=dectohex(l[i])\n        s2+=dectohex(l2[i])\n    return (s1, s2)\n","51715bb0":"#Purifying the dataset\ndf=pd.read_csv('\/kaggle\/input\/H3Units.csv')\n\n#Creating new attribute - type of an unit\ndf['Type']='Warrior'\n#Devil and archdevil have property 'Teleporting' equivalent to flying\nk=df['Special_abilities'].str.contains('Flying|Teleporting')\nl=df['Special_abilities'].str.contains('Ranged')\ndf.loc[k,'Type']='Flying'\ndf.loc[l,'Type']='Ranged'","931c90db":"#Distriution #1 - boxplot - Distribution of prices (in gold) of units in certain castles\n#Boxplot: central line - mediana, box - interval between I and III quartile, curl - min(max_obs, Q3+IQR*2) and max(min_obs, Q1-IQR*2) where IQR - interquartile range\nf='Type'\ndf2=df.loc[:,['Unit_name', f, 'Gold']]\ndf3=df2.groupby([f], as_index=False).median().sort_values(by='Gold')\nk=df3[f]\n\nl1=[0]*len(k)\nl2=[0]*len(k)\nfor i in range(len(k)):\n    l1[i]=df2[df2[f]==k[k.index[i]]].loc[:,'Gold']\n    l2[i]=df2[df2[f]==k[k.index[i]]].loc[:,'Unit_name']\n\nfig, ax=plt.subplots(1,1)\nfig.set_size_inches(18,18)\nax.boxplot(l1, labels=k, whis=2)\n\nax.set_ylim(0, 5100)\nax.xaxis.set_tick_params(labelsize=20)\nax.yaxis.set_tick_params(labelsize=13)\nax.set_title('Distribution of prices (in gold) of units by types (not including 4 dragons)', fontsize=20)\n\n#Showing text description - outliers and number of observations\nfor i in range(len(l1)):\n    ax.text(x=1+i, y=l1[i].median(), s='#Obs: '+str(len(l1[i])), horizontalalignment='center', verticalalignment='bottom', fontsize=16)\n    #Quartiles and Interquartile range\n    Qr1=np.percentile(l1[i], 25)\n    Qr3=np.percentile(l1[i], 75)\n    IQR=Qr3-Qr1\n    #Detecting outliers and showing description\n    for j in range(len(l1[i])):\n        if (l1[i][l1[i].index[j]]>Qr3+IQR*1.75 and l1[i][l1[i].index[j]]<ax.get_ylim()[1]):\n            ax.text(x=1+i, y=l1[i][l1[i].index[j]], s=l2[i][l2[i].index[j]], horizontalalignment='center', fontsize=16)\n\nplt.show()","675dd7b9":"#Distribution #2 - density plot in 1 dimension - better version of histogram\n#De facto plummed histogram estimated from kernel density estimation\n#Size of 'bins' can be modelled by 'bw' parameters\nfig, ax=plt.subplots(3, 2)\nfig.set_size_inches(25,25)\n\nfor j in range(0, 6, 1):\n    fax=ax[j\/\/2][j%2]\n    sns.kdeplot(data=df.loc[:,df.columns[3+j]], ax=fax, shade=True, bw=1, alpha=0.6, color='#990000')\n    fax.set_title(df.columns[3+j], fontsize=16)\n    fax.get_legend().remove()\nfig.suptitle('Probability densities of certain values from randomly chosen units', fontsize=23)\nplt.show()","dafa2df1":"#Distribution #3 - Violin plot - enchances normal boxplot with densities\ndf2=df.copy()\ndf2['Level']=df2['Level'].apply(lambda x: re.sub('\\+.*', '', x))\n\nfig, ax=plt.subplots(1,1,figsize=(18,18))\nsns.violinplot(x='Level', y='Gold', data=df2[df2['Level']!='7'], inner='box')\nax.set_title('Prices of units divided by level (excluding 7th level)')\n\nplt.show()","cef32177":"#Distribution #4 + Distribution of variables #1 - scatterplot with histogram (jointplot)\nfig, ax=plt.subplots(1,1,figsize=(18,18))\ngs=gridspec.GridSpec(4,4)\nax.axis('off')\n\nax=[0]*4\nax[0] = fig.add_subplot(gs[0, 0:3])\nax[1] = fig.add_subplot(gs[0, 3])\nax[2] = fig.add_subplot(gs[1:4, 0:3])\nax[3] = fig.add_subplot(gs[1:4, 3])\n\n#Parameters of comparision\nParA='Attack'\nParB='Defence'\n\n#Creating upper histogram\nax[0].hist(ParA, bins=10, range=(0,51), data=df, alpha=0.7, color='#EE8800')\nax[0].set_xlim(0,50)\nax[0].set_xticks([])\nax[0].axis('off')\n#Placing upper histogram right above the scatterplot\nK=ax[0].get_position()\nwid=K.y1-K.y0\nhei=K.x1-K.x0\nax[0].set_position([K.x0, ax[2].get_position().y1, hei, wid])\n\n#Hiding plot in corner\nax[1].axis('off')\n\n#Creating right histogram\nax[3].hist(ParB, range=(0,51), data=df, orientation='horizontal', alpha=0.7, color='#EE8800')\nax[3].set_ylim(0,50)\nax[3].set_yticks([])\n#Placing upper histogram to the right of scatterplot\nK=ax[3].get_position()\nwid=K.y1-K.y0\nhei=K.x1-K.x0\nax[3].set_position([ax[2].get_position().x1, K.y0, hei, wid])\nax[3].axis('off')\n\n#Creating scatterplot\nax[2].scatter(ParA, ParB, data=df, color='#EE8800', alpha=0.5)\nax[2].set_xlabel(ParA)\nax[2].set_ylabel(ParB)\nax[2].set_xlim(0,max(df[ParA])+1)\nax[2].set_ylim(0,max(df[ParB])+1)\n\n\nfig.suptitle('Relationship between '+ParA+' and '+ParB)\n\nplt.show()","53793b42":"#Correlation #3 - heatmap with normalization (proportions from interval 0-1)\n#legend shows proportions (the ligter the color, the bigger the value)\ndef besserheatmap(df, ax, labels=2.312, ant=False):\n    #Proporiton - normalization of values in column - without it everything would be black, for max(health)=1000 has much bigger value than other stats\n    for i in range(0, df.shape[1], 1):\n        mn=df.iloc[:,i].max()\n        df.iloc[:,i]=df.iloc[:,i]\/mn\n    \n    #Creating map and scales on axis, fmt='d' - format to normal digit\n    sns.heatmap(data=df, ax=ax, annot=ant, fmt='d')\n    ax.yaxis.set_tick_params(labelrotation=0, labelsize=17)\n    ax.xaxis.set_tick_params(labelrotation=0, labelsize=15)\n    ax.set_ylim(df.shape[0], 0)\n    \n    #details on y axis\n    x=[0.5]*df.shape[0]\n    for i in range(1, len(x), 1):\n        x[i]=x[i-1]+1\n    ax.set_yticks(x)\n    ax.set_ylim(df.shape[0], 0)\n    \n    #Was argument 'labels' passed? completely ridiculous solution, but works\n    if (type(labels)!=type(2.13)):\n        ax.set_yticklabels(labels)\n    \n    \n\nfig, ax=plt.subplots(1,1)\nfig.set_size_inches(25,25)\n\ndf2=df[(df['Level']=='7') | (df['Level']=='7+')]\nGG=df2.loc[:,df.dtypes=='int64']\nlGG=df2.loc[:,'Unit_name']\nGG=GG.iloc[:,0:7]\n\nbesserheatmap(df=GG, ax=ax, labels=lGG, ant=GG.copy())\nax.set_title('Statistics of 7th level units 7 - comparision', fontsize=16)\n\nplt.show()","d7136058":"#Correlation #4 - Denstity plots, 3 methods - 2-dimensional histogram\/hex bins\/kde dentsity(contour(seaborn))\n#Appropriate for analysis of large datasets - not the case with this dataset, but on larger one points would create a cloud with unclear point concentration\n#Plot shows relation between Attack and defence\n\n#dictionary from documentation of LinearSegmentedColormap - Normal randomization would give me world painted by shades of grey\n#Creating own Cmap - dict (x,y1,y2) interpolates interval x[i-1]:x[i] -> y[i-1][2]:y[i][1]\ncdict = {'red':   [(0.0,  0.0, 0.0),\n                   (0.5,  1.0, 1.0),\n                   (1.0,  1.0, 1.0)],\n\n         'green': [(0.0,  0.0, 0.0),\n                   (0.25, 0.0, 0.0),\n                   (0.75, 1.0, 1.0),\n                   (1.0,  1.0, 1.0)],\n\n         'blue':  [(0.0,  0.0, 0.0),\n                   (1.0,  1.0, 1.0)]}\nz=matplotlib.colors.LinearSegmentedColormap(name='Kappa', segmentdata=cdict)\n\n\nX=df['Attack']\nY=df['Defence']\n#Gridspec - Allows me to divide plot as I like\ngs=gridspec.GridSpec(2,2)\nfig, ax=plt.subplots(2,2, figsize=(21,21))\n\nh1=ax[0][0].hist2d(X, Y, bins=(20, 20), cmap=z)\n\n#I search for max and min form all values on hist, then I create colorbar\nmn=1000; mx=0\nfor i in range(0, len(h1[0]), 1):\n    for j in range(0, len(h1[0][i]), 1):\n        mn=min(h1[0][i][j], mn)\n        mx=max(h1[0][i][j], mx)\n        \nZ = [[0,0],[0,0]]\nlevels = range(int(mn),int(mx)+1,1)\nMap1 = plt.contourf(Z, levels, cmap=z)\n#theoretically I should have hidden the plot above, but it is already hidden (plt.clear())\nfig.colorbar(Map1, ax=ax[0][0])\n\n\n#Analogous for hexbin\ng=ax[0][1].hexbin(X, Y, gridsize=(10,10), cmap=z)\ng=g.get_array()\nmn=1000; mx=0\nfor i in range(0, len(h1[0]), 1):\n    mn=min(g[i], mn)\n    mx=max(g[i], mx)\nlevels = range(int(mn),int(mx)+1,1)\nMap2 = plt.contourf(Z, levels, cmap=z)\nfig.colorbar(Map2, ax=ax[0][1])\n\n#Merging 2 parts of figure - now as ax[1][0], then plot - kdeplot w 2 wymiarach\nax[1][0]=plt.subplot(gs[1, :])\nsns.kdeplot(data=X, data2=Y, ax=ax[1][0], cmap=z, shade=True, cbar=True)\n\n#Titles of axes\nfor i in range(0, 3, 1):\n    ax[i\/\/2][i%2].set_xlabel('Attack')\n    ax[i\/\/2][i%2].set_ylabel('Defence')\n\nfig.suptitle('Correlation of attack and defence - 3 ways of showing')\n\n\nplt.show()","a51441c5":"#Correlation #5 - correlogram - enables me to analyse whole dataset in one plot - quite useful, and there rarely need for customization\nsns.pairplot(df, hue='Type', diag_kind='kde', plot_kws={'alpha':0.6})\nplt.show()","50fc6c9d":"#ranking #1 - Barplot - summed costs of employing all units with assumption of possessing castle\ndf2=df.copy()\ndf2['All']=df2['Growth']*df2['Gold']*2\nk=df2['Level'].str.contains('\\+')\ndf2=df2[k]\ndf2=df2.groupby(['Castle'], as_index=False).sum().sort_values(by='All')\n\nfig, ax=plt.subplots(1,1)\nfig.set_size_inches(18,18)\n\ncncs=df2.columns.get_loc('Castle')\ncnal=df2.columns.get_loc('All')\nfor i in range(0, df2.shape[0], 1):\n    Z=df2.iat[i, cnal]\n    #Drawing bar in certain point; color is dependat upon whether value in last column is greater than 7*4000\n    if (Z<28000):\n        ax.bar(x=i, height=Z, color='#666666', width=0.5)\n    else:\n        ax.bar(x=i, height=Z, color='#550000', width=0.5)\n    ax.text(x=i, y=Z-100, s=str(Z), horizontalalignment='center', verticalalignment='top', fontsize=14, color='white', weight='bold')\n    ax.text(x=i, y=Z, s=df2.iat[i, cncs], horizontalalignment='center', verticalalignment='bottom', fontsize=14)\n\n#ax.axis('off') # disabling axes - 2 methods - I haven't turned down a frame, so that there is point of reference\nax.get_yaxis().set_visible(False)\nax.set_xticks([])\nax.set_title('Costs of employing all upgraded units with the assumption of possessing castle\\nBy red color are marked such cities, that having capitol with only one city gives not enough money to employ all units', fontsize=16)\n\nplt.show()","8e77da38":"#ranking #2 - lolipop plot - narrow barchart with ending marked by a dot\n\n\ndf2=df.copy()\nk=df2['Special_abilities'].str.contains('Ranged\\(')\nl=df2['Level'].str.contains('\\+')\n\ndf2=df2[k&l]\ndf2['All']=1\ndf2=df2.groupby(['Castle'], as_index=False).sum().sort_values(by='All')\n\n\nfig, ax=plt.subplots(1,1)\nfig.set_size_inches(13,13)\n\nf=df2.columns.get_loc('All')\nfor i in range(df2.shape[0]):\n    #I create lolipop as merged bar and one scattered point - making such things in loop easens customization\n    Z=df2.iat[i,f]\n    ax.bar(x=i, height=Z, width=0.03, color='#550000')\n    ax.scatter(x=i, y=Z, color='#550000', s=300.1)\n\nax.set_xticks(range(0,9,1))\nax.set_yticks(range(0,4,1))\nax.set_xticklabels(df2['Castle'], ha='right')\nax.xaxis.set_tick_params(labelsize=18, labelrotation=30)\nax.yaxis.set_tick_params(labelsize=14)\nax.set_title('Number of enchanced units that are ranged', fontsize=16)\n#plt.grid(axis='y')\n\nplt.show()","d938c938":"#ranking #3 - Spider\n\n#allez-radius of a circle, n-number of radar's beams, m-number of circles, maxi-biggest nuber on a radar, subd-sequence with labels, ax-plot, incol-color of figure, legg-legend, lab-label\ndef spiderland(allez, n, m, maxi, subd, ax, incol='#EE0000', legg=[], lab='Nan'):\n    #Adding new object to a legend\n    legg.append(Patch(facecolor=incol, alpha=0.3, label=lab))\n    \n    deg=2*math.pi\/n\n    x=[0]*n\n    y=[allez]*n\n\n    #endpoints of radar lines\n    for i in range(1, n, 1):\n        x[i]=x[i-1]*math.cos(deg)-y[i-1]*math.sin(deg)\n        y[i]=x[i-1]*math.sin(deg)+y[i-1]*math.cos(deg)\n\n    #Radar\n    for i in range(n):\n        ax.plot([0, x[i]], [0, y[i]], color='#AAAAAA')\n\n    #filling triangles\n    i=1\n    while (i<n):\n        ax.fill([0, x[i-1]*int(subd[i-1])\/maxi, x[i]*int(subd[i])\/maxi], [0, y[i-1]*int(subd[i-1])\/maxi, y[i]*int(subd[i])\/maxi], alpha=0.3, color=incol)\n        i+=1\n    ax.fill([0, x[i-1]*int(subd[i-1])\/maxi, x[0]*int(subd[0])\/maxi], [0, y[i-1]*int(subd[i-1])\/maxi, y[0]*int(subd[0])\/maxi], alpha=0.3, color=incol)\n\n    #Text of labels at the end of radar lines\n    for i in range(n):\n        roth=i*deg*(180\/math.pi)\n        if (roth>90 and roth<270):\n            roth=180+roth\n        ax.text(x=x[i]*1.05, y=y[i]*1.05, s=subd.index[i], fontsize=15, color='#666666', rotation=roth, horizontalalignment='center', verticalalignment='center')\n\n\n    #Circles\n    crc=[0]*m\n    for i in range(m):\n        crc[i]=plt.Circle((0,0), allez*(i+1)\/m, color='#AAAAAA', fill=None)\n        ax.add_artist(crc[i])\n        ax.text(x=0, y=allez*(i+1)\/m, s=str(maxi*(i+1)\/m), fontsize=13, color='#888888')\n\n    ax.set_xlim(-2.3, 2.3)\n    ax.set_ylim(-2.3, 2.3)\n\nfig, ax=plt.subplots(1,1)\nfig.set_size_inches(19, 19)\n\nleggy=[]\nspiderland(2, 6, 10, 10, df[df['Unit_name']=='Goblin'].iloc[0,3:9], ax, incol='#00EE00', legg=leggy, lab='Goblin')\nspiderland(2, 6, 10, 10, df[df['Unit_name']=='Pikeman'].iloc[0,3:9], ax, incol='#0000EE', legg=leggy, lab='Pikeman')\nax.legend(handles=leggy)\nax.set_title('Spider - plot of statistics of some units in Heroes 3', fontsize=16)\nax.axis('off')\n\nplt.show()\n\n#print(df[df['Unit_name']=='Gnoll'].iloc[0,:][2:7])","a40dacb0":"#ranking #4 - parallelplots - better than spider, for instead of polar coordinates there are cartesian ones\n#Able to show data in any number of dimension (alike spider)\ndef drawparallels(ax, subd, legg=[], lab='', incol='#EE0000'):\n    for j in range(1, subd.shape[0], 1):\n        for i in range(1, subd.shape[1], 1):\n            ax.plot([i-1, i], [subd.iat[j,i-1], subd.iat[j,i]], color=incol)\n    \n    legg.append(Patch(facecolor=incol, label=lab)) \n    ax.set_xticks(range(0, subd.shape[1], 1))\n    ax.set_xticklabels(subd.columns)\n    ax.xaxis.set_tick_params(labelrotation=90)\n\n\nfig, ax=plt.subplots(1,1)\nfig.set_size_inches(18,18)\ncolors=['#EE0000', '#888800', '#990044', '#EE0088', '#0000EE', '#00EE88', '#000000']\nlg=[]\n\n#Parallelplot with levels in comment\n#for i in range(1, 8, 1):\n#    mdf=df[(df['Level']==str(i)) | (df['Level']==str(i)+'+')].iloc[:,[3,4,5,6,8]]\n#    drawparallels(ax, mdf, legg=lg, lab=str(i), incol=colors[i-1])\n\n#print(df[(df['Level']==str(i)) | (df['Level']==str(i)+'+')])\n\n\nk=df['Unit_name'].str.contains('Dragon$')\nk[k.isna()]=False\nk=k.astype('bool')\n\nmdf=df[np.invert(k)].iloc[:,[3,4,5,6,8]]\ndrawparallels(ax, mdf, legg=lg, lab='Not Dragon', incol=colors[6])\nmdf=df[k].iloc[:,[3,4,5,6,8]]\ndrawparallels(ax, mdf, legg=lg, lab='Dragon', incol=colors[0])\n\nax.legend(handles=lg)\nax.set_title('Parallelplot - Comparing statistics of dragons and not-dragons', fontsize=16)\nax.grid()\nplt.show()","65d21c28":"#Ranking #5 - circular barplot - sophisticated, problems analogous to those of splider\n#Plot shows ranking of speed of dragons and other units\n\nfig, ax=plt.subplots(1,1)\nfig.set_size_inches(18,18)\n\ndef dist(x1, x2, y1, y2):\n    return (math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)))\n\n#ax- axis, heights - heights of bars, colors - list\/element - by default all colors are the same, same with labels, Rad - radius of inner circle\ndef circlebar(ax, heights, colors='#EE0000', labels='', Rad=3):\n    if (type(colors)==type('star')):\n        colors=[colors]*len(heights)\n    if (type(labels)==type('star')):\n        labels=[labels]*len(heights)\n    N=len(heights)\n    \n    x=[0]*N\n    y=[Rad]*N\n    deg=2*math.pi\/N\n    degn=360\/N\n    \n    #Radar written by hand\n    for i in range(6, 25, 1):\n        f=plt.Circle((0,0), i, fill=None, color='#AAAAAA')\n        ax.add_artist(f)\n        ax.text(x=0, y=i, s=str(i-Rad), color='#555555')\n    \n    #Adding bars by rotation matrix: https:\/\/en.wikipedia.org\/wiki\/Rotation_matrix\n    #I don't use ax.bar, but geometric figures - it easens rotation\n    for i in range(1, N, 1):\n        x[i]=math.cos(deg)*x[i-1]-math.sin(deg)*y[i-1]\n        y[i]=math.sin(deg)*x[i-1]+math.cos(deg)*y[i-1]\n        f=plt.Rectangle(xy=(x[i],y[i]), width=dist(x[i-1],x[i],y[i-1],y[i]), height=heights[i],\n                        angle=(2*i-1)*degn\/2, color=colors[i])\n        ax.add_artist(f)\n        #ax.text(x=(x[i])*(2+heights[i])\/2, y=(y[i])*(2+heights[i])\/2, s=labels[i], fontsize=12, rotation=i*degn+90, verticalalignment='bottom', horizontalalignment='left')\n        ax.text(x=(x[i]+x[i-1])*(Rad+heights[i])\/(2*Rad), y=(y[i]+y[i-1])*(Rad+heights[i])\/(2*Rad), s=labels[i], fontsize=12, rotation=i*degn+90, verticalalignment='bottom', horizontalalignment='left')\n        \n    f=plt.Rectangle(xy=(x[0],y[0]), width=dist(x[N-1],x[0],y[N-1],y[0]), height=heights[0],\n                    angle=(-1)*degn\/2, color=colors[0])\n    ax.add_artist(f)\n    ax.text(x=x[i]*(2+heights[0])\/2, y=y[i]*(2+heights[0])\/2, s=labels[0], fontsize=12, rotation=0*degn+90)\n    \n    return\n\n\ndf2=df.copy()\ndf2.sort_values(by='Speed', inplace=True)\n\ndf2.index=range(0,df2.shape[0],1)\nk=df2['Unit_name'].str.contains('Dragon$')\n\ndf2['Coll']='#0000EE'\ndf2.loc[k,'Coll']='#EE0000'\ndf2['Lab']=''\ndf2.loc[k,'Lab']=df2.loc[k,'Unit_name']\n\ncirclebar(ax, heights=df2['Speed'], colors=df2['Coll'], labels=df2['Lab'])\n\nax.set_title('Comparing speed of dragons and other units in H3')\nax.set_xlim(-10,25)\nax.set_ylim(-10,25)\nax.axis('off')\n\nplt.show()","abb0d378":"#Part of a whole #1 - stacked barplot\n\nfig, ax=plt.subplots(1,1,figsize=(18,18))\n\ncols=colorize('#CC0000','#000000',7)\nlegg=[]\nfor i in range(7):\n    legg.append(Patch(facecolor=cols[i], label='Level '+str(i)))\n\n#Modifying dataframe df2, so that I can extract information about sorted castles and units inside them\ndf2=df.copy()\ndf2['Cost']=2*df2['Gold']*df2['Growth']\ndf2=df2[(df2['Level'].str.contains('\\+')) & (df2['Castle']!='Neutral')]\ndf2['Level']=df2['Level'].apply(lambda x: re.sub('\\+.*', '', x))\n\ns=df2.columns.get_loc('Cost')\ndf3=df2.groupby(['Castle'], as_index=False).sum().sort_values(by='Cost')\n\nfor i in range(len(df3)):    \n    summ=0\n    K=df2[df2['Castle']==df3.iat[i,df3.columns.get_loc('Castle')]]\n    \n    #Adding bars for single town - bottom allows me to stack these barplots\n    for j in range(len(K)):\n        ax.bar(x=i, bottom=summ, height=K.iat[j,s], width=0.85, color=cols[j])\n        #Adding endline in the end of a word, so that I have enough space to put text in bar\n        txt=re.sub('([a-z])([A-Z])', '\\g<1>\\n\\g<2>', K.iat[j,K.columns.get_loc('Unit_name')])\n        ax.text(x=i, y=summ+K.iat[j,s], s=txt+'\\n'+'('+str(K.iat[j,s])+')', verticalalignment='top', horizontalalignment='center', color='#FFFFFF', weight='bold', fontsize=10)\n        #Partial sums, that are defining bottom\n        summ+=K.iat[j,s]\nax.set_xticks(range(0, len(df3), 1))\nax.set_xticklabels(df3['Castle'])\nax.set_title('Costs of employing all upgraded units with the assumption of possessing castle\\nSingle stack is divided by levels of units (their cost shown in brackets)')\nax.legend(handles=legg)\nplt.show()","a81c3ce6":"#Part of a whole #2 - pie chart - worst possible plot, circular, enforces comparing areas (a purpose for which human eye don't work well) and ugly\n#On this plot I compare types of units in certain castles.\n\ndf2=df.copy()\ndf2['All']=1\n\ndf3=df2.groupby(['Castle', 'Type'], as_index=False).count()\n\nfig, ax=plt.subplots(3,3, figsize=(18,18))\ncastles=np.unique(df2['Castle'])\ncastles=castles[castles!='Neutral']\n\n#iteration over all axes\nfor i in range(0, 3, 1):\n    for j in range(0, 3, 1):\n        adf=df3[df3['Castle']==castles[i*3+j]]\n        fa=ax[i][j]\n        fa.set_title(castles[i*3+j])\n        #Only interesting thing on this plot: string formatting - function, that gets percents, spits formatted output\n        fa.pie(x=adf['All'], labels=adf['Type'], colors=['#FAEE66', '#FE4B03', '#856798'], autopct=lambda perc: ('%.2f%s: %d units' %(perc, '%', round(perc*sum(adf['All'])\/100,0))))\n        fa.axis('off')\n    \nax[0][2].legend()\nfig.suptitle('Types of units (all) in respective castles')\nplt.show()","e8409194":"#Part of a whole #3 - donut plot - better than pie chart, for compares length\n#Analogous plot as before, now without comparing casltes\ndf2=df.copy()\ndf2['All']=1\ndf3=df2.groupby(['Type'], as_index=False).count()\n\nfig, ax=plt.subplots(1,1,figsize=(18,18))\nax.pie(x=df3['All'], labels=df3['Type'], labeldistance=1.05, colors=['#AEFD6C', '#FF000D', '#017B92'], autopct=lambda perc: ('%.2f%s: (%d)' %(perc, '%', round(perc*sum(df3['All'])\/100,0))), pctdistance=0.82)\nf=plt.Circle((0,0), 0.9, color='#FFFFFF')\nax.add_artist(f)\nax.set_title('Division of types of all units')\n\nplt.show()","77382a34":"#Part of a whole #5 - Treeplot - allows me to analyze hierarchized sets (like dendrogram or sunburst)\n#Plot is imperfect - observation should go like a snake, so that castles would be shown purely hierarchically, though most crucial observations are visible still\n#I could have prettier plot, but I wanted to show customization of this plot\n\ndf2=df.copy()\ndf2['All']=1\ndf2['Kappa']=df2.index\n\ndf2=df2.groupby(['Castle'], as_index=False).sum().sort_values(by='Kappa')\n#print(df2)\n\n\nfig, ax=plt.subplots(1,1)\nfig.set_size_inches(24,24)\n\nclr=[]\nlg=[]\nZ=df2.columns.get_loc('All')\nW=df2.columns.get_loc('Castle')\nfor i in range(0, df2.shape[0], 1):\n    s1, s2=gen_rand_colors(90)\n    #clr.extend(colorize(s1, s2, df2.iat[i,Z])) #Interplotating by colors - rather not useful, effect is washy\n    clr.extend(colorize(s1, s1, df2.iat[i,Z]))\n    lg.append(Patch(facecolor=s1, label=df2.iat[i,W]))\n#print(len(clr))\n\nlb=df['Unit_name']+'\\n('+df['Gold'].astype(str)+')'\nfor i in range(0, len(lb), 1):\n    if (df.at[i,'Gold']<200):\n        lb[i]=df.at[i,'Unit_name']\n        \nsquarify.plot(sizes=df['Gold'], label=lb, alpha=0.8, ax=ax, color=clr, text_kwargs={'fontsize': 10}, bar_kwargs={'fill': True, 'edgecolor': '#888888'})\nax.set_title('Costs of single units in H3 with respect (color) to castles', fontsize=16)\nax.axis('off')\nax.legend(handles=lg)\n\nplt.show()","778965c1":"#Part of a whole #6 - Venn diagram - useful for showing logicznego iloczynu mi\u0119dzy kilkoma zbiorami\n#Plot shows count of three parameters of units and their cunjunctions\n#The only plot able to show relations between sets\n\ndf2=df.copy()\na=[0]*3\ngr=3\n\na[0]=df2['Unit_name'].str.contains('Dragon$')\na[1]=df2['Special_abilities'].str.contains('[sS]pell')\na[2]=df2['Special_abilities'].str.contains('Un(living|dead)', regex=True)\n\nz=pow(2,gr)\naef=[0]*z\n#Exponential generator of logic multiplies - I iterate over numbers from 0 to 2^k-1, where k is number of sets - every number represents conjunction\n#ex. 6 means 110 - I take logical multiplication of 1,2 set, 0 remains unused. Or 5 - 101 - 0. and 2nd set merged, 1st unused\n#That is how venn diagram works - I just delete 1st element (omega space, P(omega)=1 - whole reality)\nfor i in range(z):\n    f=[True]*df2.shape[0]\n    j=i\n    ij=0\n    \n    while (j>0):\n        if (j%2==1):\n            f=f&a[ij]\n        ij+=1\n        j=j\/\/2\n        \n    aef[i]=sum(f)\nfig, ax=plt.subplots(1,1, figsize=(14,14))\nvenn3(aef[1:z], set_labels=['Dragon','Spell Modificators', 'Not alive'], ax=ax)\nax.set_title('Number of of units depending on class they belong:\\n dragons\/ not living\/ units with spell modificators')\nplt.show()","32aaec87":"#Part of a whole #7 - sunburst - allow doing things impossible with simple pie\/donut - hierarchization\n#Dendrogram is usually considered better - cartesian, not polar, but I consider it less informative\n#Plot shows division of units with respect to castles\n\n#ax - axis, df - dataframe, cols - columns from most inner to most outer, leg - legend\ndef sunnburst(ax, df, cols, leg=[]):\n    df['All']=1\n    t1=0\n    Cl=len(cols)\n    summ=df.shape[0]\n    \n    #Creating new dataframe with color for wedges\n    colz=['Column', 'Value', 'Color', 'Used']    \n    allez=[] \n    for j in range(Cl):\n        tp=np.unique(df[cols[j]])\n        for i in range(0, len(tp),1):\n            c1, c1=gen_rand_colors(0)\n            allez.append([cols[j], tp[i], c1, 0])\n    dfendet=pd.DataFrame.from_records(allez, columns=colz)\n    \n    #Loop over all elements, that I hierarchize\n    for j in range(0, Cl, 1):\n        #Grouping, finding indexes: W - last column(for label), Z-count\n        df3=df.groupby(cols[0:Cl-j], as_index=False).sum()\n        Z=df3.columns.get_loc('All')\n        W=df3.columns.get_loc(cols[Cl-j-1])\n        t1=0\n        #Iterating over all observations in dataframe\n        for i in range(0, df3.shape[0], 1):\n            secsum=df3.iat[i,Z]\n            view=dfendet[(dfendet['Column']==cols[Cl-j-1])&(dfendet['Value']==df3.iat[i,W])]\n            colval=view.iat[0,2]\n            \n            #Adding wedge changing angle t1 - new beginning of hemicycle in degrees, dg and rad used to display text\n            f=patch.Wedge(center=(0,0), r=1+(Cl-j)*0.3, theta1=t1, theta2=t1+(secsum\/summ)*360, color=colval, alpha=0.5)\n            dg=(2*t1+(secsum\/summ)*360)\/2\n            rad=1+(Cl-j)*0.3-0.15\n            t1=t1+(secsum\/summ)*360\n            ax.add_artist(f)\n            \n            #Angle to show text\n            sdg=90+dg\n            if (sdg>90 and sdg<270):\n                sdg-=180\n            \n            #Most inner circle - show text. What's important, sin and cos work in radians - therefore conversion\n            if (j==Cl-1):\n                ax.text(x=rad*math.cos(dg*math.pi\/180), y=rad*math.sin(dg*math.pi\/180), s=df3.iat[i,W], rotation=sdg, verticalalignment='center', horizontalalignment='center')\n            #Outer circles - add to legend, add text - number of certain observations\n            else:\n                if (view.iat[0,3]==0):\n                    leg.append(Patch(facecolor=colval, label=view.iat[0,1]))\n                    dfendet.loc[(dfendet['Column']==cols[Cl-j-1])&(dfendet['Value']==df3.iat[i,W]),'Used']=1\n                ax.text(x=rad*math.cos(dg*math.pi\/180), y=rad*math.sin(dg*math.pi\/180), s=df3.iat[i,Z], rotation=sdg, verticalalignment='center', horizontalalignment='center') \n                \n            \n            \n        f=patch.Wedge(center=(0,0), r=1+(Cl-j-1)*0.3, theta1=0, theta2=360, color='white', alpha=1)\n        ax.add_artist(f)\n    ax.axis('off')\n    return\n\ndf2=df.copy()\nfig, ax=plt.subplots(1,1,figsize=(15,15))\nlg=[]\nsunnburst(ax=ax, df=df2, cols=['Castle', 'Type'], leg=lg)\nax.set_xlim(-2, 2)\nax.set_ylim(-2, 2)\nax.set_title('Division of units on flying\/shooting\/warriors\\n with respect to castle')\nax.legend(handles=lg)\nplt.show()","8ed83010":"Plots:\n\n1) Distribution - boxplot, densityplot, violin, histogram\n\n2) Distribution of multiple variables - scatter, bubble-scatter, heatmap, correlogram, densityplot\n\n3) Rankings - barplot, lolipop plot, spider, parallellines, circular barplot\n\n4) Part of a whole - stacked barplot, donut plot, pie chart, treemap, dendrogram, venn diagram, sunburst","f093ce02":"Primary purpose of this notebook is not to learn how to use matplotlib\/seaborn efficiently, but rather how\nto achieve any effect you want with these tools. \n\nMain source of possibilities for me was this site:\nhttps:\/\/python-graph-gallery.com\/"}}