{"cell_type":{"240200a9":"code","9ab0c370":"code","7eb892a1":"code","600bad19":"code","5e4f444c":"code","db84a870":"code","54617aa0":"code","2135a283":"code","7ebc350e":"code","f83a2864":"markdown","699192fb":"markdown","0f45b4e2":"markdown"},"source":{"240200a9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9ab0c370":"data = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')\n\ndata.head()","7eb892a1":"y = data.Outcome\nX = data.drop(['Outcome'], axis=1)\n\nX.head()","600bad19":"X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.9, \n                                                      test_size=0.1, random_state=0)","5e4f444c":"# Test different models\ndef model_select(X_train, X_valid, y_train, y_valid):\n    test_preds = []\n    for n in range(50, 401, 50):\n        model = RandomForestRegressor(n_estimators=n, random_state=0)\n        model.fit(X_train, y_train)\n        preds = model.predict(X_valid)\n        test_preds.append(str(n) + ' : ' + str(mean_absolute_error(y_valid, preds)))\n    return test_preds\n    \nmodel_select(X_train, X_valid, y_train, y_valid)","db84a870":"my_model = RandomForestRegressor(n_estimators=250, random_state=0)\n\nmy_model.fit(X, y)\n\ntest_preds = my_model.predict(X_valid)\n\nprint(my_model.score(X_valid, y_valid))\nprint(mean_absolute_error(y_valid, test_preds))","54617aa0":"from sklearn.tree import DecisionTreeClassifier\nfor i in range(1, 20):\n    dtc = DecisionTreeClassifier(max_depth=i, random_state=1)\n    dtc = dtc.fit(X_train, y_train)\n    print(str(i) + ' : ' + str(dtc.score(X_valid, y_valid)))","2135a283":"best_dtc = DecisionTreeClassifier(max_depth=5, random_state=1)\nbest_dtc.fit(X, y)\ndtc_preds = best_dtc.predict(X_valid)\nprint(best_dtc.score(X_valid, y_valid))\nprint(mean_absolute_error(y_valid, dtc_preds))","7ebc350e":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\n\nlr_model = LogisticRegression(random_state=1)\nlr_model.fit(X, y)\nlr_preds = lr_model.predict(X_valid)\nprint('ACCURACY: ' + str(100*accuracy_score(y_valid, lr_preds)))","f83a2864":"**RANDOM FOREST**","699192fb":"**LOGISTIC REGRESSION**","0f45b4e2":"**DECISION TREE**"}}