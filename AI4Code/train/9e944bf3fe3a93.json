{"cell_type":{"c1d6f11b":"code","e5f2e39a":"code","f6034ec0":"code","cdea9efa":"code","964b64fe":"code","50eeeb6c":"code","d0b5a858":"code","74206f3e":"code","5524b6af":"code","6ada09d7":"code","3d392645":"code","d2559697":"code","11fc6722":"code","c3157131":"code","73b6ed5d":"code","f1eb1eeb":"code","9f8979d0":"code","a1b1d15d":"code","1176794b":"code","f9616592":"code","5af49a77":"code","3edb04ea":"code","715b1a05":"code","08f09dc5":"code","16040666":"code","61446b00":"code","26d0a34f":"markdown"},"source":{"c1d6f11b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e5f2e39a":"!pip install findspark","f6034ec0":"!pip install pyspark","cdea9efa":"import findspark\nfrom pyspark.sql import SparkSession\nfrom pyspark.sql import functions as f\nfrom pyspark.ml.recommendation import ALS\nfrom pyspark.mllib.evaluation import RegressionMetrics, RankingMetrics\nfrom pyspark.ml.evaluation import RegressionEvaluator\n\nspark = SparkSession.builder.appName(\"movieRecommendationPySpark\").getOrCreate()\n","964b64fe":"path_ratings = '..\/input\/it2034ch1502-movie-recommendation-system\/ratings.csv'\npath_test = '..\/input\/it2034ch1502-movie-recommendation-system\/test.csv'\npath_movies = '..\/input\/it2034ch1502-movie-recommendation-system\/movies.csv'\npath_tags = '..\/input\/it2034ch1502-movie-recommendation-system\/tags.csv'","50eeeb6c":"train = spark.read.format(\"csv\").options(header = True, inferSchema = True).csv(path_ratings)","d0b5a858":"train.show(10, False)\ntrain.summary().show()","74206f3e":"als = ALS(\n          rank=200,\n          maxIter= 25,\n          regParam = 0.0479,\n          userCol=\"userId\", \n          itemCol=\"movieId\", \n          ratingCol=\"rating\"\n        )","5524b6af":"model = als.fit(train)","6ada09d7":"test = spark.read.format(\"csv\").options(header = True, inferSchema = True).csv(path_test).cache()\ntest.show(5)","3d392645":"predictions = model.transform(test).withColumnRenamed(\"prediction\",\"rating\")\npredictions.select(\"ratingId\", \"rating\").show(5)","d2559697":"movie = spark.read.format(\"csv\").options(header = True, inferSchema = True).csv(path_movies).cache()\ntag = spark.read.format(\"csv\").options(header = True, inferSchema = True).csv(path_tags).cache()","11fc6722":"genres_pred = predictions.join(movie,on = \"movieId\",how = \"left_outer\").select(\"ratingId\",\"userId\",\"movieId\",\"genres\",\"rating\")\ntag_pred = predictions.join(tag,on = [\"userId\",\"movieId\"],how = \"left_outer\").select(\"ratingId\",\"userId\",\"movieId\",\"tag\",\"rating\")\n\ngenres_train = train.join(movie,on = \"movieId\",how = \"left_outer\").select(\"userId\",\"movieId\",\"genres\",\"rating\")\ntag_train = train.join(tag,[\"userId\",\"movieId\"],how = \"left_outer\").select(\"userId\",\"movieId\",\"tag\",\"rating\")","c3157131":"tag_rating = tag_train.filter(f.col(\"tag\").isNotNull()).groupby(\"tag\",\"movieId\").agg(f.mean(f.col(\"rating\")).alias(\"tag_rating\"))\ngenres_rating = genres_train.withColumn(\"genres\",f.regexp_replace(\"genres\",\"\\[|\\]|\\'\",\"\"))\\\n.withColumn(\"genres\",f.split(\"genres\",\", \"))\\\n.withColumn(\"genres\",f.explode(\"genres\"))\\\n.groupby(\"genres\",\"userId\").agg(f.mean(f.col(\"rating\")).alias(\"genres_rating\"))","73b6ed5d":"genres_pred = genres_pred.na.fill(\"NaN\")\ngenres_pred = genres_pred.withColumn(\"genres\",f.regexp_replace(\"genres\",\"\\[|\\]|\\'\",\"\"))\\\n.withColumn(\"genres\",f.split(\"genres\",\", \"))\\\n.withColumn(\"genres\",f.explode(\"genres\"))","f1eb1eeb":"genres_rating_pred = genres_pred.join(genres_rating,on = [\"genres\",\"userId\"],how = \"left_outer\")\ngenres_rating_pred = genres_rating_pred.withColumn(\"rating\",\n                      f.when((f.col(\"rating\") == \"NaN\")&(f.col(\"genres_rating\").isNotNull()),genres_rating_pred.genres_rating)\n                      .otherwise(genres_rating_pred[\"rating\"]))","9f8979d0":"tag_pred = genres_rating_pred.join(tag,on = [\"userId\",\"movieId\"],how = \"left_outer\").select(\"ratingId\",\"userId\",\"movieId\",\"tag\",\"rating\")\ntag_rating_pred = tag_pred.join(tag_rating,on = [\"tag\",\"movieId\"],how = \"left_outer\")\n\ntag_rating_pred = tag_rating_pred.withColumn(\"rating\",\\\n                      f.when((f.col(\"rating\") == \"NaN\")&(f.col(\"tag_rating\").isNotNull()),tag_rating_pred.tag_rating)\n                      .otherwise(tag_rating_pred[\"rating\"]))","a1b1d15d":"user_rating = train.groupby(\"userId\").agg(f.mean(f.col(\"rating\")).alias(\"user_rating\"))","1176794b":"user_rating_pred = tag_rating_pred.join(user_rating,on = \"userId\",how = \"left_outer\")\n\nuser_rating_pred = user_rating_pred.withColumn(\"rating\",\\\n                      f.when((f.col(\"rating\") == \"NaN\")&(f.col(\"user_rating\").isNotNull()),user_rating_pred.user_rating)\n                      .otherwise(user_rating_pred[\"rating\"]))","f9616592":"movie_rating = train.groupby(\"movieId\").agg(f.mean(f.col(\"rating\")).alias(\"movie_rating\"))","5af49a77":"movie_rating_pred = user_rating_pred.join(movie_rating,on = \"movieId\",how = \"left_outer\")\n\nmovie_rating_pred = movie_rating_pred.withColumn(\"rating\",\\\n                      f.when((f.col(\"rating\") == \"NaN\")&(f.col(\"movie_rating\").isNotNull()),movie_rating_pred.movie_rating)\n                      .otherwise(movie_rating_pred[\"rating\"]))","3edb04ea":"result = movie_rating_pred.groupby(\"ratingId\").agg(f.mean(f.col(\"rating\")).alias(\"rating\"))","715b1a05":"mean = train.groupby(\"userId\").agg(f.mean(f.col(\"rating\")).alias(\"rating\")).agg({\"rating\":\"mean\"}).collect()[0][\"avg(rating)\"]\n\nprint(mean)","08f09dc5":"result = result.withColumn(\"rating\", \\\n              f.when(result[\"rating\"] < 0, 0.0)\n              .when(f.col(\"rating\") == \"NaN\",mean)\n              .otherwise(result[\"rating\"]))","16040666":"result = result.toPandas()\ndef Scale(df):\n    for i in range(df.shape[0]):\n        j = df.iloc[i,1]\n        k = int(j)\n        if j-k < 0.25:\n            df.iloc[i,1] = k\n        else:\n            if (j-k) < 0.75:\n                df.iloc[i,1] = k + 0.5\n            else:\n                df.iloc[i,1] = k + 1\n    return df\n\nresult.loc[result.rating > 5.0,\"rating\"] = 5.0","61446b00":"result.to_csv(\"result_v7.csv\",index = 0, header = True)","26d0a34f":"# Th\u00e0nh vi\u00ean:\n1. Nguy\u1ec5n D\u01b0\u01a1ng Kim V\u1ef9\n2. \u0110\u1ed7 Th\u1ecb Nh\u01b0 Ng\u1ecdc\n3. L\u00ea Th\u1ecb Qu\u1ef3nh Chi\n4. Nguy\u1ec5n V\u0103n T\u00e0i\n5. \u0110\u1ed7 Minh Ti\u1ebfn"}}