{"cell_type":{"2fa7063f":"code","0f07b8ff":"code","4738b96d":"code","90e43efe":"code","b5d53675":"code","37b3099b":"code","18255cdb":"code","96e4a569":"code","91d375ce":"code","fcc16a3c":"code","0d776756":"code","5b58e1cc":"code","ace7fa93":"code","617f5b58":"code","30cc1868":"code","57d050c4":"code","8f2099ac":"code","1f1ceee3":"code","3cf5d4d6":"code","6de2d381":"code","a27fec92":"code","3fb7dbdb":"code","8a31b334":"code","cfb50247":"code","4b783bba":"markdown","ee07954f":"markdown","68cc0ab3":"markdown","c646defb":"markdown","4801892c":"markdown","33e35eed":"markdown","de21721c":"markdown","36d634a3":"markdown","382451b3":"markdown","083818aa":"markdown"},"source":{"2fa7063f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0f07b8ff":"import gc\nimport random\nimport math\n\nfrom IPython import display as ipd\nfrom tqdm import tqdm\nimport dateutil.easter as easter\n\nfrom sklearn.manifold import TSNE\nfrom sklearn.decomposition import PCA\nfrom sklearn.preprocessing import MinMaxScaler, RobustScaler, LabelEncoder\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold, KFold,GroupKFold,RepeatedKFold\n\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, f1_score, confusion_matrix\nfrom sklearn.ensemble import RandomForestRegressor\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_theme(style=\"whitegrid\")\n\nimport tensorflow as tf\nimport tensorflow.keras as keras\n\nfrom tensorflow.keras.models import Sequential, Model\n\nfrom tensorflow.keras.layers import LSTM, Bidirectional, add, concatenate, GlobalMaxPooling1D, GlobalAveragePooling1D\nfrom tensorflow.keras.layers import Conv1D, Conv2D, MaxPooling1D, MaxPooling2D, Conv2DTranspose, AveragePooling1D, UpSampling1D\nfrom tensorflow.keras.layers import Dense, Input, Dropout, BatchNormalization, Activation, TimeDistributed\nfrom tensorflow.keras.layers import Multiply, Add, Concatenate, Flatten, Average, Lambda\n\nfrom tensorflow.keras.optimizers import Adam, SGD, Adadelta, Nadam\nfrom tensorflow.keras.callbacks import EarlyStopping, Callback, ModelCheckpoint, ReduceLROnPlateau\nfrom tensorflow.keras.constraints import unit_norm, max_norm\n\nfrom tensorflow.keras import backend as K\nfrom tensorflow_addons.optimizers import CyclicalLearningRate","4738b96d":"def seeding(SEED, use_tf=False):\n    np.random.seed(SEED)\n    random.seed(SEED)\n    os.environ['PYTHONHASHSEED'] = str(SEED)\n    os.environ['TF_CUDNN_DETERMINISTIC'] = str(SEED)\n    if use_tf:\n        tf.random.set_seed(SEED)\n    print('seeding done!!!')\n    \n## https:\/\/www.kaggle.com\/c\/tabular-playground-series-jan-2022\/discussion\/298201\ndef SMAPE(y_true, y_pred):\n    denominator = (y_true + np.abs(y_pred)) \/ 200.0\n    diff = np.abs(y_true - y_pred) \/ denominator\n    diff[denominator == 0] = 0.0\n    return np.mean(diff)    ","90e43efe":"RANDOM_SEED = 42\nDEBUG = True\n\nseeding(RANDOM_SEED)\n\ntrain = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/test.csv')\nsubmission = pd.read_csv('\/kaggle\/input\/tabular-playground-series-jan-2022\/sample_submission.csv')","b5d53675":"train.head()","37b3099b":"import dateutil.easter as easter\n\nholidays = pd.read_csv('..\/input\/k\/lucamassaron\/festivities-in-finland-norway-sweden\/nordic_holidays.csv')\nholidays.date = pd.to_datetime(holidays.date)\n\neaster_dates = []\nyears = [2015,2016,2017,2018,2019,2020]\nfor year in years:\n     easter_dates.append(easter.easter(year))\n\ndef add_holidays( df, holidays, easter_dates ):\n    df['holiday'] = 0\n    df['easter'] = 0\n    countries = ['Finland', 'Norway', 'Sweden']\n    for country in countries:\n        df.loc[ (df.date.isin(holidays.date)) & (df.country.isin(holidays.country)), 'holiday'] = 1\n\n    df.loc[ (df.date.isin(easter_dates)), 'easter'] = 1\n    return df\n    \ntrain = add_holidays( train, holidays, easter_dates )\ntest = add_holidays( test, holidays, easter_dates )","18255cdb":"def process_dates(df):\n    df.date = pd.to_datetime(df.date)\n    df['year'] = df.date.dt.year    \n    df['month'] = df.date.dt.month\n    df['week'] = df.date.dt.week\n    df['wd4'] = df.date.dt.dayofweek == 4\n    df['wd56'] = df.date.dt.dayofweek >= 5    \n    df['wd4'] = df['wd4'].astype(int)\n    df['wd56'] = df['wd56'].astype(int)\n    df['day'] = df.date.dt.day    \n\n    for k in [1, 2, 3, 12]:\n        df[f'sin{k}'] = np.sin(df.date.dt.dayofyear \/ 365 * 2 * math.pi * k)\n        df[f'cos{k}'] = np.cos(df.date.dt.dayofyear \/ 365 * 2 * math.pi * k)    \n\n    return df\n\ntrain = process_dates(train)\ntest = process_dates(test)","96e4a569":"gdp_growth = pd.read_csv('..\/input\/worldgdpgrowthbycountry20002020\/API_NY.GDP.MKTP.KD.ZG_DS2_en_csv_v2_3469438-fixed.csv')\ngdp_growth = gdp_growth[ gdp_growth['Country Name'].isin(['Sweden', 'Norway', 'Finland'])]\ngdp_growth.drop(['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code'], axis=1, inplace=True)\ngdp_growth = gdp_growth.T\ngdp_growth.columns = ['Finland', 'Norway', 'Sweden']\ngdp_growth.index = gdp_growth.index.astype(int)\n\npop_growth = pd.read_csv('..\/input\/worldpopulationgrowthbycountry20002020\/API_SP.POP.GROW_DS2_en_csv_v2_3469469-fixed.csv')\npop_growth = pop_growth[ pop_growth['Country Name'].isin(['Sweden', 'Norway', 'Finland'])]\npop_growth.drop(['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code'], axis=1, inplace=True)\npop_growth = pop_growth.T\npop_growth.columns = ['Finland', 'Norway', 'Sweden']\npop_growth.index = pop_growth.index.astype(int)\n\ngdp = pd.read_csv('..\/input\/worldgdpbycountry20002020\/API_NY.GDP.MKTP.CD_DS2_en_csv_v2_3469429.csv')\ngdp = gdp[ gdp['Country Name'].isin(['Sweden', 'Norway', 'Finland'])]\ngdp.drop(['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code', 'Unnamed: 65'], axis=1, inplace=True)\ngdp = gdp.T\ngdp.columns = ['Finland', 'Norway', 'Sweden']\ngdp.index = gdp.index.astype(int)\n\npop = pd.read_csv('..\/input\/worldpopulationbycountry20002020\/API_SP.POP.TOTL_DS2_en_csv_v2_3469297.csv')\npop = pop[ pop['Country Name'].isin(['Sweden', 'Norway', 'Finland'])]\npop.drop(['Country Name', 'Country Code', 'Indicator Name', 'Indicator Code', 'Unnamed: 65'], axis=1, inplace=True)\npop = pop.T\npop.columns = ['Finland', 'Norway', 'Sweden']\npop.index = pop.index.astype(int)","91d375ce":"def add_growth_features(df, gdp, pop, gdp_growth, pop_growth):\n    years = [2015,2016,2017,2018,2019,2020]\n    df['gdp_per_capita'] = 0\n    df['gdp_growth'] = 0\n    df['pop_growth'] = 0\n    for column in gdp.columns:\n        for year in years:\n            df.loc[ (df.year == year) & (df.country == column), 'gdp_per_capita'] = gdp[column][year]\/pop[column][year]\n            df.loc[ (df.year == year) & (df.country == column), 'gdp_growth'] = gdp_growth[column][year]\n            df.loc[ (df.year == year) & (df.country == column), 'pop_growth'] = pop_growth[column][year]\n    \n    df['gdp_per_capita'] = RobustScaler().fit_transform(df['gdp_per_capita'].values.reshape(-1, 1))\n    return df\n\ntrain = add_growth_features(train, gdp, pop, gdp_growth, pop_growth)\ntest = add_growth_features(test, gdp, pop, gdp_growth, pop_growth)","fcc16a3c":"weather = pd.read_csv('..\/input\/finland-norway-and-sweden-weather-data-20152019\/nordics_weather.csv')\nweather.date = pd.to_datetime(weather.date)\ntrain = train.merge( weather, how='inner', left_on=['date', 'country'], right_on=['date', 'country'])\ntest = test.merge( weather, how='inner', left_on=['date', 'country'], right_on=['date', 'country'])","0d776756":"# Feature engineering for holidays\ndef engineer_more(df):\n    \"\"\"Return a new dataframe with more engineered features\"\"\"\n\n    # End of year\n    new_df = pd.concat([df,\n                        pd.DataFrame({f\"dec{d}\":\n                                      ((df.date.dt.month == 12) & (df.date.dt.day == d)).astype(int)\n                                      for d in range(24, 32)}),\n                        pd.DataFrame({f\"n-dec{d}\":\n                                      ((df.date.dt.month == 12) & (df.date.dt.day == d) & (df.country == 'Norway')).astype(int)\n                                      for d in range(24, 32)}),\n                        pd.DataFrame({f\"f-jan{d}\":\n                                      ((df.date.dt.month == 1) & (df.date.dt.day == d) & (df.country == 'Finland')).astype(int)\n                                      for d in range(1, 14)}),\n                        pd.DataFrame({f\"jan{d}\":\n                                      ((df.date.dt.month == 1) & (df.date.dt.day == d) & (df.country == 'Norway')).astype(int)\n                                      for d in range(1, 10)}),\n                        pd.DataFrame({f\"s-jan{d}\":\n                                      ((df.date.dt.month == 1) & (df.date.dt.day == d) & (df.country == 'Sweden')).astype(int)\n                                      for d in range(1, 15)})],\n                       axis=1)\n    \n    # May\n    new_df = pd.concat([new_df,\n                        pd.DataFrame({f\"may{d}\":\n                                      ((df.date.dt.month == 5) & (df.date.dt.day == d)).astype(int) \n                                      for d in list(range(1, 10))}), #  + list(range(17, 25))\n                        pd.DataFrame({f\"may{d}\":\n                                      ((df.date.dt.month == 5) & (df.date.dt.day == d) & (df.country == 'Norway')).astype(int)\n                                      for d in list(range(19, 26))})],\n                       axis=1)\n    \n    # June and July\n    new_df = pd.concat([new_df,\n                        pd.DataFrame({f\"june{d}\":\n                                      ((df.date.dt.month == 6) & (df.date.dt.day == d) & (df.country == 'Sweden')).astype(int)\n                                      for d in list(range(8, 14))}),\n                       ],\n                       axis=1)\n    \n    # Last Wednesday of June\n    wed_june_date = df.date.dt.year.map({2015: pd.Timestamp(('2015-06-24')),\n                                         2016: pd.Timestamp(('2016-06-29')),\n                                         2017: pd.Timestamp(('2017-06-28')),\n                                         2018: pd.Timestamp(('2018-06-27')),\n                                         2019: pd.Timestamp(('2019-06-26'))})\n    new_df = pd.concat([new_df,\n                        pd.DataFrame({f\"wed_june{d}\": \n                                      ((df.date - wed_june_date == np.timedelta64(d, \"D\")) & (df.country != 'Norway')).astype(int)\n                                      for d in list(range(-4, 6))})],\n                       axis=1)\n    \n    # First Sunday of November\n    sun_nov_date = df.date.dt.year.map({2015: pd.Timestamp(('2015-11-1')),\n                                         2016: pd.Timestamp(('2016-11-6')),\n                                         2017: pd.Timestamp(('2017-11-5')),\n                                         2018: pd.Timestamp(('2018-11-4')),\n                                         2019: pd.Timestamp(('2019-11-3'))})\n    new_df = pd.concat([new_df,\n                        pd.DataFrame({f\"sun_nov{d}\": \n                                      ((df.date - sun_nov_date == np.timedelta64(d, \"D\")) & (df.country != 'Norway')).astype(int)\n                                      for d in list(range(0, 9))})],\n                       axis=1)\n    \n    # First half of December (Independence Day of Finland, 6th of December)\n    new_df = pd.concat([new_df,\n                        pd.DataFrame({f\"dec{d}\":\n                                      ((df.date.dt.month == 12) & (df.date.dt.day == d) & (df.country == 'Finland')).astype(int)\n                                      for d in list(range(6, 14))})],\n                       axis=1)\n\n    # Easter\n    easter_date = df.date.apply(lambda date: pd.Timestamp(easter.easter(date.year)))\n    new_df = pd.concat([new_df,\n                        pd.DataFrame({f\"easter{d}\": \n                                      ((df.date - easter_date == np.timedelta64(d, \"D\"))).astype(int)\n                                      for d in list(range(-2, 11)) + list(range(40, 48)) + list(range(50, 59))})],\n                       axis=1)\n    \n    return new_df\n\ntrain = engineer_more(train)\ntest = engineer_more(test)","5b58e1cc":"target = train.num_sold\ntarget_sqrt = np.log(train.num_sold)\ntrain.drop(['row_id','num_sold','date', 'year', 'day'], axis=1, inplace=True)\ntest.drop(['row_id', 'date', 'year', 'day'], axis=1, inplace=True)","ace7fa93":"features = list(test.columns)\nprint(list(features))","617f5b58":"country_encoder = LabelEncoder()\ntrain['country_enc'] = country_encoder.fit_transform(train['country'])\ntest['country_enc'] = country_encoder.transform(test['country'])\n\nstore_encoder = LabelEncoder()\ntrain['store_enc'] = store_encoder.fit_transform(train['store'])\ntest['store_enc'] = store_encoder.transform(test['store'])\n\nproduct_encoder = LabelEncoder()\ntrain['product_enc'] = product_encoder.fit_transform(train['product'])\ntest['product_enc'] = product_encoder.transform(test['product'])\n\n\ntrain.drop(['country','store','product'], axis=1, inplace=True)\ntest.drop(['country','store','product'], axis=1, inplace=True)","30cc1868":"scaler = RobustScaler()\ntrain_scaled = pd.DataFrame(scaler.fit_transform(train), columns=train.columns)\ntest_scaled = scaler.fit_transform(test)","57d050c4":"def create_model_cnn( units, X, optimizer=Adam()):\n    n_timesteps = 1\n    n_features  = X.shape[1]\n    model = Sequential([\n        Input(shape=(n_timesteps, n_features), dtype='float32'),\n        Conv1D(filters=units*4, kernel_size=5, activation='relu', name='Conv1D-1'),\n        Conv1D(filters=units*2, kernel_size=3, activation='relu', name='Conv1D-2'),\n        Conv1D(filters=units, kernel_size=2, activation='relu', name='Conv1D-3'),\n        MaxPooling1D(pool_size=4, name='MaxPool-4'),\n        Flatten(name='Flatten-5'),\n        Dense(units, activation='relu', name='Dense-6'),\n        Dense(1, name='Dense-7'),\n    ])\n    model.compile(optimizer = optimizer, loss = 'mape')\n    return model","8f2099ac":"def create_model( units, X, optimizer=Adam()):\n    n_timesteps = 1\n    n_features  = X.shape[1]    \n    model = Sequential([\n        Input(shape=(n_timesteps, n_features), dtype='float32'),\n        ##LSTM(units*4, return_sequences=True, batch_input_shape=(1, 1, X.shape[1])),\n        BatchNormalization(),\n        LSTM(units*4, return_sequences=True),\n        BatchNormalization(),\n        LSTM(units*4, return_sequences=True),\n        BatchNormalization(),\n        LSTM(units*4, return_sequences=True),\n        BatchNormalization(),\n        LSTM(units*4, return_sequences=True),\n        Dense(units, activation='linear'),\n        Dense(1),\n    ])  \n    model.compile(optimizer = optimizer, loss = 'mape')\n    return model","1f1ceee3":"UNITS = 32\nEPOCHS = 100\nBATCH_SIZE = 512\nTOTAL_SPLITS = 6\nN_REPEATS = 3\nLEARNING_RATE = 0.002123\n\nm = create_model(UNITS, train, Adam(learning_rate=LEARNING_RATE))\nm.summary()","3cf5d4d6":"%%time\n\ntf.keras.backend.clear_session()\nlr = ReduceLROnPlateau(monitor=\"val_loss\", factor=0.3, patience=7, verbose=1,  min_lr=1e-7)\nes = EarlyStopping(monitor=\"val_loss\", min_delta=1e-4, patience=30, verbose=1, mode=\"min\", restore_best_weights=True)\n\n\nscores = []\nmodels = []\nhistories = []\nfolds = RepeatedKFold(n_splits=TOTAL_SPLITS, n_repeats=N_REPEATS)\nfor fold_n, (train_index, valid_index) in enumerate(folds.split(train_scaled, target_sqrt)):\n    print('-'*15, '>', f'Fold {fold_n+1}', '<', '-'*15)\n    X_train, X_valid = train.iloc[train_index], train.iloc[valid_index]\n    y_train, y_valid = target_sqrt.iloc[train_index], target_sqrt.iloc[valid_index]    \n    \n    X_train = X_train.values.reshape( -1, 1, X_train.shape[1])\n    X_valid = X_valid.values.reshape( -1, 1, X_valid.shape[1])\n    \n    checkpoint_path = f'model_{fold_n}.h5'\n    checkpoint = tf.keras.callbacks.ModelCheckpoint(checkpoint_path, save_best_only=True)\n    callbacks = [es, checkpoint, lr]    \n    \n    optimizer = Adam(learning_rate=LEARNING_RATE)\n    model = create_model(UNITS, train, optimizer)\n    history = model.fit(X_train, y_train, validation_data=(X_valid, y_valid), batch_size = BATCH_SIZE, epochs = EPOCHS, \n                    verbose=1, shuffle=True, callbacks=callbacks)\n    \n    model.load_weights(checkpoint_path)\n    \n    oof_pred = model.predict(X_valid).reshape(-1)\n    oof_score = SMAPE(y_valid, oof_pred)\n    print(f'OOF SMAPE: {oof_score}')\n    \n    scores.append(oof_score)\n    models.append(model)\n    histories.append(history)","6de2d381":"print(f'OOF SMAPE: { np.mean(scores)}')","a27fec92":"xx = range(0, EPOCHS)\ncol_metrics = [\"loss\", \"val_loss\", \"lr\"]\n\nf, (ax1, ax2) = plt.subplots(nrows = 1, ncols = 2, figsize=(16, 8))\nfor hist in histories:\n    df = pd.DataFrame(hist.history, columns=col_metrics)\n    ax1.plot( df[[col_metrics[0], col_metrics[1]]])\nax2.plot( df[[col_metrics[2]]])\n\nplt.show()","3fb7dbdb":"train.shape","8a31b334":"## average predictions over all models\n\ntestX = test.values.reshape(len(test), 1, test.shape[1])\ny_pred = np.zeros(len(testX))\nfor model in models:\n    y_pred += model.predict(testX).reshape(-1)\n\ny_pred = y_pred \/ len(models)","cfb50247":"submission['num_sold'] = np.round(np.exp(y_pred)).astype(int)\nsubmission.to_csv('submission.csv', index=False, float_format='%.6f')\nsubmission.head(20)","4b783bba":"### Very simple date-based FE\n\nsin and cos addition is from notebook by Ambros M:\n\nhttps:\/\/www.kaggle.com\/ambrosm\/tpsjan22-03-linear-model","ee07954f":"### Data Load","68cc0ab3":"### Encode category columns ","c646defb":"## Adding AmbrosM more features function from:\n\nhttps:\/\/www.kaggle.com\/ambrosm\/tpsjan22-03-linear-model#Simple-feature-engineering-(without-holidays)\n\n(fixed for Keras)\nwitout thi","4801892c":"### Model and train","33e35eed":"### Adding GDP and population growth data\n\ndatasets: https:\/\/www.kaggle.com\/vladlee\/datasets","de21721c":"### Adding holidays info from notebook: festivities-in-finland-norway-sweden\n\nhttps:\/\/www.kaggle.com\/lucamassaron\/festivities-in-finland-norway-sweden\n\n###  Easter dates idea is from notebook:\n\nhttps:\/\/www.kaggle.com\/ambrosm\/tpsjan22-01-eda-which-makes-sense#Easter","36d634a3":"### Adding weather features from dataset:\n\nhttps:\/\/www.kaggle.com\/adamwurdits\/finland-norway-and-sweden-weather-data-20152019\n\nThanks to Adam Wurdits","382451b3":"### Plot metrics","083818aa":"### Utils"}}