{"cell_type":{"8f5988b4":"code","a22918a9":"code","54f42535":"code","598a39dd":"code","c2bdb54a":"code","117c32b4":"code","e4854677":"code","e3b998be":"code","3f4276f3":"code","739f59c1":"code","3934c098":"code","75ddc897":"code","50a3a131":"code","c1f0383e":"code","fe04298c":"code","9903db2f":"code","d33d4907":"code","137e8356":"code","ee2cb907":"code","cfa1edef":"code","9de6a6da":"code","96161d33":"code","e0d0e695":"code","03f11000":"code","976d5ab9":"code","afadf9cd":"code","99038dab":"code","0b135f19":"code","787c6524":"markdown","380c3e35":"markdown","6e205e3e":"markdown","e9068ce4":"markdown","40c2d63e":"markdown","9308d5d7":"markdown","ceaff764":"markdown","29ea3a2d":"markdown","5d82460b":"markdown","704e0c7e":"markdown","69ccff5b":"markdown","5f3d9e97":"markdown","6fcf2cf1":"markdown","ee63ae94":"markdown","a87a55c7":"markdown","8d91cf0a":"markdown","cc3547c1":"markdown","1ef5b508":"markdown","183f4f49":"markdown","d5741c70":"markdown","e66fb5cf":"markdown","7a174cd1":"markdown","7fa7dce9":"markdown","e47bcc29":"markdown","d2003a72":"markdown","eef132bd":"markdown","aabd1878":"markdown","73f0bc88":"markdown","2147eb31":"markdown"},"source":{"8f5988b4":"import pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n","a22918a9":"%%time\n# Read in data\ndtypes = {\n    \"row_id\": \"int64\",\n    \"timestamp\": \"int64\",\n    \"user_id\": \"int32\",\n    \"content_id\": \"int16\",\n    \"content_type_id\": \"boolean\",\n    \"task_container_id\": \"int16\",\n    \"user_answer\": \"int8\",\n    \"answered_correctly\": \"int8\",\n    \"prior_question_elapsed_time\": \"float32\", \n    'prior_question_had_explanation': 'boolean'\n}\n\n# reading the dataset from raw csv file\n!pip install ..\/input\/python-datatable\/datatable-0.11.0-cp37-cp37m-manylinux2010_x86_64.whl\nimport datatable as dt\ndf = dt.fread(\"..\/input\/riiid-test-answer-prediction\/train.csv\", max_nrows=30000000).to_pandas() #\n\n#df = pd.read_csv('..\/input\/riiid-test-answer-prediction\/train.csv', nrows=10**6 , dtype=dtypes)\n","54f42535":"df.info()","598a39dd":"df.head(15).T","c2bdb54a":"df.describe().T","117c32b4":"#discovering null values in data\ndf.isnull().sum()","e4854677":"#discovering unique values in data\ncols = df.columns\nfor c in cols: \n    print(f' The unique values in {c} :{df[c].nunique()}')","e3b998be":"# visualizing number of questions and lectures\nplt.figure(figsize=(10,5))\nax = sns.countplot(x=df['content_type_id'], palette=['#557799',\"#990000\"])\nax.set_xlabel('content Type (False:question**True:Lecture)',size=15)\nplt.title(\"number of questions and lectures\",size=15)\n\nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.0f}'.format(p.get_height()), (x.mean(), y), ha='center', va='bottom')","3f4276f3":"# getting just questions\ndf_questions=df[df.content_type_id==0]\ndf_questions.shape","739f59c1":"# Correct VS Incorrect answers\ndf_questions_correct = df_questions['answered_correctly'].value_counts().reset_index()\ndf_questions_correct.columns = ['answered_correctly','presentage']\ndf_questions_correct['presentage'] \/= len(df_questions)\ndf_questions_correct","3934c098":"# User answers (0,1,2 or 3)\ndf_questions_answer = df_questions['user_answer'].value_counts().reset_index()\ndf_questions_answer.columns = ['user_answer','presentage']\ndf_questions_answer['presentage'] \/= len(df_questions)\ndf_questions_answer","75ddc897":"# visualizing correct answer \nexplode = (0.1,0.1)\nfig, (ax1,ax2) = plt.subplots(1,2,figsize=(12,5))\nlabels = ('Correct', 'Incorrect')\nax1.pie(df_questions_correct['presentage'],explode=explode,labels = labels, autopct = '%.2f%%',startangle = 90, \n                                       colors=['#368f71',\"#d12c3a\"],textprops=dict(color=\"#000000\",size=14))\nax1.axis('equal')\nax1.set_title(\"Answered Correctly\" ,size=15) \n# # visualizing  user answer\nexplode = (0.1,0.1,0,0)\nax2.pie(df_questions_answer['presentage'],explode=explode,labels = df_questions_answer['user_answer'], autopct = '%.2f%%',startangle = 90 ,\n                                        colors=['#6381fc',\"#cccc00\",\"#d12c3a\",\"#368f71\"],textprops=dict(color=\"#000000\",size=14))\nax2.axis('equal')\nax2.set_title(\"Users Answer\",size=15) \n","50a3a131":"# visualizing user answer(0,1,2,or 3) vs Correct answer\nplt.figure(figsize=(10,6))\nax=sns.countplot(df_questions['user_answer'], hue=df_questions['answered_correctly'], palette=['#d12c3a',\"#368f71\"], alpha=1)\nax.set_xlabel('User answer 0,1,2 or 3',size=15)   \nax.legend(bbox_to_anchor=(1.1, 0.5),labels=['Incorrect','Correct'])\nplt.title('user answer vs correct answer', fontsize = 20)\nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.0f}'.format(p.get_height()), (x.mean(), y), ha='center', va='bottom')","c1f0383e":"# Grouping correct answer by users\ndf_questions_gby_user = df_questions.groupby('user_id').agg({'answered_correctly': 'sum', 'row_id':'count'})\ndf_questions_gby_user.columns = ['answered_correctly','All answers']\ndf_questions_gby_user","fe04298c":"# visualizing Correct answer by users\nplt.figure(figsize = (16,8))\nax=sns.distplot(df_questions_gby_user['answered_correctly'] \/df_questions_gby_user['All answers']*100,color='#557799',hist_kws={'alpha':1,\"linewidth\": 1}, kde_kws={\"color\": \"black\", \"lw\": 1, \"label\": \"\"})\nplt.title('Correct answers percentage by users', fontdict = {'size': 15})\nplt.xlabel('Percentage of correct answers', size = 15)","9903db2f":"nlargest = df_questions.content_id.value_counts().nlargest(20)\nfig = plt.figure(figsize=(18,6))\nax=nlargest.plot.bar(width=0.9,alpha=0.9,color='#557799')\nplt.title(\"The twenty most used questions\", size=15)\nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.0f}'.format(p.get_height()), (x.mean(), y), ha='center', va='bottom')","d33d4907":"%time\nnsmallest = df_questions.content_id.value_counts().nsmallest(20)\nfig = plt.figure(figsize=(18,6))\nax=nsmallest.plot.bar(width=0.9,alpha=0.9,color='#557799')\nplt.title(\"The twenty least used questions\",size=15)\nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.0f}'.format(p.get_height()), (x.mean(), y), ha='center', va='bottom')","137e8356":"dddd = df_questions.groupby('content_id').agg({'answered_correctly': 'sum', 'row_id':'count'})\ndddd['presentage']=dddd['answered_correctly'] \/ dddd['row_id']\ndddd=dddd.sort_values('presentage',ascending=True).head(20).reset_index()\ndddd.columns = ['Content Id','CorrectAnswer','All Rows','presentage %']\n\n\nfig, ax = plt.subplots(figsize=(17,5))\nax = sns.barplot(x=dddd['Content Id'], y=dddd['presentage %'],order = dddd['Content Id'], data=dddd)\nplt.xlabel('Questions (Content Id)',size = 15)\nplt.ylabel('presentage %',size = 15)\nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.2f}%'.format(p.get_height()), (x.mean(), y), ha='center', va='bottom')","ee2cb907":"dddd = df_questions.groupby('content_id').agg({'answered_correctly': 'sum', 'row_id':'count'})\ndddd['presentage']=dddd['answered_correctly'] \/ dddd['row_id']\ndddd=dddd.sort_values('presentage',ascending=False).head(20).reset_index()\ndddd.columns = ['Content Id','CorrectAnswer','All Rows','presentage %']\nfig, ax = plt.subplots(figsize=(17,5))\nax = sns.barplot(x=dddd['Content Id'], y=dddd['presentage %'],order = dddd['Content Id'], data=dddd)\nplt.xlabel('Questions (Content Id)',size = 15)\nplt.ylabel('presentage %',size = 15)\nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.2f}%'.format(p.get_height()), (x.mean(), y), ha='center', va='bottom')","cfa1edef":"#  Question elapsed time VS Answered Correctly\ndf_questions5=df_questions[(df_questions.prior_question_elapsed_time.notnull()) & (df_questions.prior_question_elapsed_time<15000)]\nplt.figure(figsize = (5,7))\nax=sns.violinplot(data=df_questions5, x=df_questions5.answered_correctly, y=df_questions5.prior_question_elapsed_time, hue=df_questions5.answered_correctly,\n                inner=\"quart\", linewidth=2,palette=['#d12c3a',\"#368f71\"],)\nax.legend(bbox_to_anchor=(0.6, 1.0))\nax.set_xlabel('Answered Correctly',size=15) \nax.set_ylabel('prior question elapsed time',size=15)\n","9de6a6da":"#  Answered Correctly for first question (time=0)\ndf_questions1=df_questions[df_questions.prior_question_elapsed_time.isnull()]\nplt.figure(figsize=(10,5))\nax = sns.countplot(x=df_questions1['answered_correctly'],  palette=['#d12c3a',\"#368f71\"])\nax.set_xlabel('Answered Correctly',size=15)\nax.set_ylabel('',size=15)\nplt.title(\"Answered Correctly for first question (time=0)\",size=15)\nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.0f}'.format(p.get_height()), (x.mean(), y), ha='center', va='bottom')","96161d33":"# Distribution of  prior question elapsed time\nplt.figure(figsize = (16,8))\nax=sns.distplot(df_questions['prior_question_elapsed_time'],color='#557799',hist_kws={'alpha':1,\"linewidth\": 1}, kde_kws={\"color\": \"black\", \"lw\": 1, \"label\": \"\"})\nplt.title('Distribution of  prior question elapsed time', fontdict = {'size': 15})\nplt.xlabel('prior question elapsed time', size = 15)","e0d0e695":"plt.figure(figsize = (16,8))\nax=sns.distplot(df_questions['timestamp']\/(31536000000\/365),color='#557799',hist_kws={'alpha':1,\"linewidth\": 1}, kde_kws={\"color\": \"black\", \"lw\": 1, \"label\": \"\"})\nplt.title('Distribution of  timestamp', fontdict = {'size': 15})\nplt.xlabel('timestamp', size = 15)","03f11000":"pq = df_questions.groupby(['prior_question_had_explanation']).agg({'answered_correctly': ['mean']}).reset_index()\npq.columns = ['prior_question_had_explanation','Percent answered correctly']\nexplode = (0.1,0)\nfig,ax = plt.subplots(figsize=(12,5))\nax.pie(pq['Percent answered correctly'],labels = pq['prior_question_had_explanation'],explode=explode, autopct = '%.2f%%',startangle = 90,\n                                        colors=[\"#d12c3a\",\"#368f71\"],textprops=dict(color=\"#000000\",size=14))\n\nax.set_title(\"Answered_correctly Vs Prior Question had explanation\",size=15) ","976d5ab9":"df_q=pd.read_csv('..\/input\/riiid-test-answer-prediction\/questions.csv')\ndf_q.sample(10).T","afadf9cd":"df_tag = df_q['tags'].str.split(' ').explode('tags').reset_index()\ndf_tag = df_tag['tags'].value_counts().reset_index()\ndf_tag.columns = ['tag', 'count']\ndf_tag = df_tag.sort_values(['count'])","99038dab":"df_tag=df_tag.tail(20)\nfig, ax = plt.subplots(figsize=(17,5))\nax = sns.barplot(x=df_tag['tag'], y=df_tag['count'],order = df_tag['tag'], data=df_tag)\nplt.xlabel('Tag',size = 15)\nplt.ylabel('Count',size = 15)\nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.0f}'.format(p.get_height()), (x.mean(), y), ha='center', va='bottom')","0b135f19":"%time\ndp = df_q['part'].value_counts().reset_index()\ndp.columns = ['part', 'count']\n\n\ndf_tag=df_tag.tail(20)\nfig, ax = plt.subplots(figsize=(17,5))\nax = sns.barplot(x=dp['part'], y=dp['count'], data=dp)\nplt.xlabel('Parts',size = 15)\nplt.ylabel('Count',size = 15)\nfor p in ax.patches:\n    x=p.get_bbox().get_points()[:,0]\n    y=p.get_bbox().get_points()[1,1]\n    ax.annotate('{:.0f}'.format(p.get_height()), (x.mean(), y), ha='center', va='bottom')","787c6524":"### correct answer AND  user answer","380c3e35":"### Distribution of  prior question elapsed time","6e205e3e":" ### Correct VS Incorrect answers","e9068ce4":"* **lecture_id:** foreign key for the train\/test content_id column, when the content type is lecture (1).\n* **part:** top level category code for the lecture.\n* **tag:** one tag codes for the lecture. The meaning of the tags will not be provided, but these codes are sufficient for clustering the lectures together.\n* **type_of:** brief description of the core purpose of the lecture","40c2d63e":" ### The twenty most used questions (content_id) ","9308d5d7":"<a id=\"1\"><\/a>\n# 1. Import libraries","ceaff764":"### The worst 20 percentage of correct answer for questions (content_id)","29ea3a2d":"* **row_id: (int64)** ID code for the row.\n* **timestamp: (int64)** the time in milliseconds between this user interaction and the first event completion from that user.\n* **user_id: (int32)** ID code for the user.\n* **content_id: (int16)** ID code for the user interaction\n* **content_type_id: (int8)** 0 if the event was a question being posed to the user, 1 if the event was the user watching a lecture.\n* **task_container_id: (int16)** Id code for the batch of questions or lectures. For example, a user might see three questions in a row before seeing the explanations for any of them. Those three would all share a task_container_id.\n* **user_answer: (int8)** the user's answer to the question, if any. Read -1 as null, for lectures.\n* **answered_correctly: (int8)** if the user responded correctly. Read -1 as null, for lectures.\n* **prior_question_elapsed_time: (float32)** The average time in milliseconds it took a user to answer each question in the previous question bundle, ignoring any lectures in between. Is null for a user's first question bundle or lecture. Note that the time is the average time a user took to solve each question in the previous bundle.\n* **prior_question_had_explanation: (bool)** Whether or not the user saw an explanation and the correct response(s) after answering the previous question bundle, ignoring any lectures in between. The value is shared across a single question bundle, and is null for a user's first question bundle or lecture. Typically the first several questions a user sees were part of an onboarding diagnostic test where they did not get any feedback.","5d82460b":"### Answered_correctly Vs Prior Question had explanation","704e0c7e":"### Correct answer by users","69ccff5b":"<a id=\"2\"><\/a>\n# 2. Train.csv","5f3d9e97":"### Top 20 used Tags","6fcf2cf1":"###Visualizing number of questions and lectures","ee63ae94":"### Distribution of Parts","a87a55c7":"### Answered Correctly for first question (time=0)","8d91cf0a":"### Question elapsed time VS Answered Correctly","cc3547c1":" ### The twenty least used questions (content_id) ","1ef5b508":"### Distribution of  timestamp","183f4f49":"### user answer(0,1,2,or 3) vs Correct answer","d5741c70":"* **question_id:** foreign key for the train\/test content_id column, when the content type is question (0).\n* **bundle_id:** code for which questions are served together.\n* **correct_answer:** the answer to the question. Can be compared with the train user_answer column to check if the user was right.\n* **part:** the relevant section of the TOEIC test.\n* **tags:** one or more detailed tag codes for the question. The meaning of the tags will not be provided, but these codes are sufficient for clustering the questions together.","e66fb5cf":"### User answers (0,1,2 or 3)","7a174cd1":"**In this competition, your challenge is to create algorithms for \"Knowledge Tracing,\" the modeling of student knowledge over time. The goal is to accurately predict how students will perform on future interactions. You will pair your machine learning skills using Riiid\u2019s EdNet data.**","7fa7dce9":"<a id=\"3\"><\/a>\n# 3. Questions.csv","e47bcc29":"# Contents\n* [1. Import libraries](#1)\n* [2. Train.csv](#2)\n* [3. Questions.csv](#3)\n* [4. Lectures.csv](#4)\n","d2003a72":"### Grouping correct answer by users","eef132bd":"![Capture.PNG](attachment:Capture.PNG)","aabd1878":"<a id=\"4\"><\/a>\n# 4. Lectures.csv","73f0bc88":"### The best 20 percentage of correct answer for questions (content_id)","2147eb31":"![Riiid.jpg](attachment:Riiid.jpg)"}}