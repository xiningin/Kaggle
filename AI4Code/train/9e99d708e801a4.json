{"cell_type":{"4747f0a7":"code","be8fb5b8":"code","958d6b14":"code","ed3d410f":"code","e7e1caf6":"code","3d546749":"code","839d0b87":"code","d59300ff":"code","85e6b0a2":"code","319e7f50":"code","66de1256":"code","66690477":"code","701ada76":"code","fbcc19b2":"code","30ac7e32":"code","448cb95f":"code","14c260c0":"code","42af55d6":"code","ab79c35e":"code","e146914c":"code","e124c351":"code","981b1794":"code","da1d5fc0":"code","89ad70ad":"code","7c518436":"code","0f7adfa8":"code","d1b1ee09":"code","164ba8ea":"code","bfbe45a8":"code","fd802aca":"code","39e7a175":"code","a5586031":"code","ae38f811":"code","0bf19b24":"code","d1d8b2d0":"code","51692951":"code","f1025d7b":"code","390aef5d":"code","0c7a4c98":"code","68473264":"code","4dfe1fe0":"code","22a35a65":"code","4f4d9aeb":"code","a032420c":"code","af267ebf":"code","9dce15c1":"code","50e0d18a":"code","524453fd":"code","7f25fa55":"code","2cfc29d6":"code","909b5dec":"code","8cf417ab":"code","099b36ed":"code","cc8b27f5":"code","6b812af0":"code","369a5e31":"code","e5ca58f0":"code","d20c1415":"code","2e7cc2de":"code","d789b618":"code","e24c8976":"markdown","75144b17":"markdown","ff79087d":"markdown","064baaac":"markdown","36ce64b4":"markdown","e3695392":"markdown","a6b0e161":"markdown","434d079f":"markdown","9ac33cfe":"markdown","e689953c":"markdown","b0a926c6":"markdown","a674e383":"markdown","fc3be2ee":"markdown","f7942bce":"markdown","5df684d7":"markdown","13ff47ee":"markdown","382d4a0b":"markdown","bec09c69":"markdown","6d8b4723":"markdown","f79daff1":"markdown","2026d4b2":"markdown","9c6cf347":"markdown","933ded8d":"markdown","a5e9340a":"markdown","920ffc2c":"markdown","8acb34af":"markdown","89721e66":"markdown","c39889db":"markdown","eb98826f":"markdown","9474f891":"markdown","42567384":"markdown","16f53ce9":"markdown","703f561c":"markdown","8fe2e132":"markdown","3969f495":"markdown","3bbbf843":"markdown"},"source":{"4747f0a7":"# import dependencies\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# adjust pandas & seaborn display preferences\npd.set_option('display.max_rows', None)\nsns.set(rc={'figure.figsize':(12,10)})\nsns.set_palette('pastel')","be8fb5b8":"# import the dataset\n\n# for purposes of this analysis, I used MS Excel to reformat the dataset into long format\n# and converted to a CSV file for simpler readibility in pandas. No data points were transformed\/reformatted in Excel\n \n\ndf = pd.read_csv('..\/input\/medicare-part-d-drug-spendingutilization-201519\/cms_data_mftr.csv')\n\ndf.head(5)","958d6b14":"df_indication = pd.read_csv('..\/input\/medicare-part-d-drug-spendingutilization-201519\/cms_data_drug_use.csv')\ndf_indication.head()","ed3d410f":"len(df)","e7e1caf6":"df.dtypes","3d546749":"df.head()","839d0b87":"# making a copy to keep the original raw dataset intact for future reference\n\ndf2 = df.copy()","d59300ff":"df.columns","85e6b0a2":"df2['Brand Name'] = df2['Brand Name'].str.strip()\ndf2['Generic Name'] = df2['Generic Name'].str.strip()\ndf2['Manufacturer'] = df2['Manufacturer'].str.strip()\ndf2['Total Spending'] = df2['Total Spending'].str.strip()\ndf2['Total Dosage Units'] = df2['Total Dosage Units'].str.strip()\ndf2['Total Claims'] = df2['Total Claims'].str.strip()\ndf2['Total \\nBeneficiaries'] = df2['Total \\nBeneficiaries'].str.strip()\ndf2['Average Spending Per Dosage Unit (Weighted)'] = df2['Average Spending Per Dosage Unit (Weighted)'].str.strip()\ndf2['Average \\nSpending Per Claim'] = df2['Average \\nSpending Per Claim'].str.strip()\ndf2['Average \\nSpending Per Beneficiary'] = df2['Average \\nSpending Per Beneficiary'].str.strip()\ndf2['Outlier \\nFlag'] = df2['Outlier \\nFlag'].str.strip()","319e7f50":"# beginning with total spending\n\ndf2['Total Spending'] = df2['Total Spending'].str.replace('$', '')\ndf2['Total Spending'] = df2['Total Spending'].str.replace(',', '')\ndf2['Total Spending'] = df2['Total Spending'].str[:-3]\n\n#df2['Total Spending'] = df2['Total Spending'].astype(float)\ndf2.head()","66de1256":"# replace non-empty cells containing a space or double-space with a zero value\n\ndf2 = df2.replace('', 0)\ndf2 = df2.replace(' ', 0)\ndf2.dtypes","66690477":"df2['Outlier \\nFlag'].value_counts()","701ada76":"df2['Total Dosage Units'] = df2['Total Dosage Units'].str.replace(',','').str.replace('$', '').str.strip().astype(float)\ndf2['Total Spending'] = df2['Total Spending'].astype(float)\ndf2['Total Claims'] = df2['Total Claims'].str.replace(',','').str.replace('$', '').str.strip().astype(float)\ndf2['Total \\nBeneficiaries'] = df2['Total \\nBeneficiaries'].str.replace('$', '').str.replace(',', '').str.strip().astype(float)\ndf2['Average Spending Per Dosage Unit (Weighted)'] = df2['Average Spending Per Dosage Unit (Weighted)'].str.replace('$', '').str.replace(',', '').str.strip().astype(float)\ndf2['Average \\nSpending Per Claim'] = df2['Average \\nSpending Per Claim'].str.replace('$', '').str.replace(',', '').str.strip().astype(float)\ndf2['Average \\nSpending Per Beneficiary'] = df2['Average \\nSpending Per Beneficiary'].str.replace('$', '').str.replace(',', '').str.strip().astype(float)\n#df2['Outlier \\nFlag'] = df2['Outlier \\nFlag'].str.strip().astype(int)","fbcc19b2":"df2.dtypes","30ac7e32":"df2.head(10)","448cb95f":"# original dataframe for comparison\n\ndf.head(10)","14c260c0":"df2.replace(np.NaN, 0, inplace=True)","42af55d6":"df2.isnull().sum()","ab79c35e":"df2['Total Spending'].describe()","e146914c":"df2['Total Claims'].describe()","e124c351":"fig = plt.figure(figsize=(12,5))\nax = sns.barplot(data=df2, x='Year', y='Total Spending', estimator=sum, ci=None)\nax.set_title('CMS Total Spending by Year', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110, s = '${}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')","981b1794":"fig = plt.figure(figsize=(12,5))\nax = sns.barplot(data=df2, x='Year', y='Total Claims', estimator=sum, ci=None)\nax.set_title('CMS Total Claims by Year', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '{}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')","da1d5fc0":"df_2015 = df2[df2['Year'] == 2015]\ndf_2016 = df2[df2['Year'] == 2016]\ndf_2017 = df2[df2['Year'] == 2017]\ndf_2018 = df2[df2['Year'] == 2018]\ndf_2019 = df2[df2['Year'] == 2019]","89ad70ad":"df_2015.sort_values(by='Total Spending', ascending=False).head()","7c518436":"fig = plt.figure(figsize=(16, 34)).tight_layout(w_pad=3.0, h_pad=3.0)\n\nplt.subplot(511)\nax = sns.barplot(data=df_2015.groupby(by=['Year', 'Brand Name'])['Total Spending'].sum().reset_index().sort_values(by='Total Spending', ascending=False).head(10), x='Brand Name', y='Total Spending', estimator=sum)\nax.set_title('CMS Top 10 Drug Spend in 2015', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '$ {}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')\n\nplt.subplot(512)\nax = sns.barplot(data=df_2016.groupby(by=['Year', 'Brand Name'])['Total Spending'].sum().reset_index().sort_values(by='Total Spending', ascending=False).head(10), x='Brand Name', y='Total Spending', estimator=sum)\nax.set_title('CMS Top 10 Drug Spend in 2016', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '$ {}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')\n\nplt.subplot(513)    \nax = sns.barplot(data=df_2017.groupby(by=['Year', 'Brand Name'])['Total Spending'].sum().reset_index().sort_values(by='Total Spending', ascending=False).head(10), x='Brand Name', y='Total Spending', estimator=sum)\nax.set_title('CMS Top 10 Drug Spend in 2017', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '$ {}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')\n\nplt.subplot(514)\nax = sns.barplot(data=df_2018.groupby(by=['Year', 'Brand Name'])['Total Spending'].sum().reset_index().sort_values(by='Total Spending', ascending=False).head(10), x='Brand Name', y='Total Spending', estimator=sum)\nax.set_title('CMS Top 10 Drug Spend in 2018', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '$ {}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')\n\nplt.subplot(515)\nax = sns.barplot(data=df_2019.groupby(by=['Year', 'Brand Name'])['Total Spending'].sum().reset_index().sort_values(by='Total Spending', ascending=False).head(10), x='Brand Name', y='Total Spending', estimator=sum)\nax.set_title('CMS Top 10 Drug Spend in 2019', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '$ {}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')\n\nplt.show()","0f7adfa8":"fig = plt.figure(figsize=(16, 34)).tight_layout(w_pad=3.0, h_pad=3.0)\n\nplt.subplot(511)\nax = sns.barplot(data=df_2015.groupby(by=['Year', 'Manufacturer'])['Total Spending'].sum().reset_index().sort_values(by='Total Spending', ascending=False).head(10), x='Manufacturer', y='Total Spending', estimator=sum, ci=None)\nax.set_title('CMS Top 10 Manufacturer Spend in 2015', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '$ {}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')\n\nplt.subplot(512)\nax = sns.barplot(data=df_2016.groupby(by=['Year', 'Manufacturer'])['Total Spending'].sum().reset_index().sort_values(by='Total Spending', ascending=False).head(10), x='Manufacturer', y='Total Spending', estimator=sum, ci=None)\nax.set_title('CMS Top 10 Manufacturer Spend in 2016', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '$ {}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')\n\nplt.subplot(513)    \nax = sns.barplot(data=df_2017.groupby(by=['Year', 'Manufacturer'])['Total Spending'].sum().reset_index().sort_values(by='Total Spending', ascending=False).head(10), x='Manufacturer', y='Total Spending', estimator=sum, ci=None)\nax.set_title('CMS Top 10 Manufacturer Spend in 2017', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '$ {}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')\n\nplt.subplot(514)\nax = sns.barplot(data=df_2018.groupby(by=['Year', 'Manufacturer'])['Total Spending'].sum().reset_index().sort_values(by='Total Spending', ascending=False).head(10), x='Manufacturer', y='Total Spending', estimator=sum, ci=None)\nax.set_title('CMS Top 10 Manufacturer Spend in 2018', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '$ {}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')\n\nplt.subplot(515)\nax = sns.barplot(data=df_2019.groupby(by=['Year', 'Manufacturer'])['Total Spending'].sum().reset_index().sort_values(by='Total Spending', ascending=False).head(10), x='Manufacturer', y='Total Spending', estimator=sum, ci=None)\nax.set_title('CMS Top 10 Manufacturer Spend in 2019', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '$ {}B'.format(round(p.get_height()\/1000000000, 2)),ha = 'center')\n\nplt.show()","d1b1ee09":"fig = plt.figure(figsize=(16, 40)).tight_layout(w_pad=3.0, h_pad=20.0)\n\nplt.subplot(511)\nax = sns.barplot(data=df_2015.groupby(by=['Year', 'Brand Name'])['Total Claims'].sum().reset_index().sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims', estimator=sum)\nax.set_title('CMS Top 10 Brands by Total Claims in 2015', fontsize=18)\nax.set_xlabel('')\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 2)),ha = 'center')\n\nfor item in ax.get_xticklabels():\n    item.set_rotation(12)\n\nplt.subplot(512)\nax = sns.barplot(data=df_2016.groupby(by=['Year', 'Brand Name'])['Total Claims'].sum().reset_index().sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims')\nax.set_title('CMS Top 10 Brands by Total Claims in 2016', fontsize=18)\nax.set_xlabel('')\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 2)),ha = 'center')\n\nfor item in ax.get_xticklabels():\n    item.set_rotation(12)\n    \nplt.subplot(513)    \nax = sns.barplot(data=df_2017.groupby(by=['Year', 'Brand Name'])['Total Claims'].sum().reset_index().sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims')\nax.set_title('CMS Top 10 Brands by Total Claims in 2017', fontsize=18)\nax.set_xlabel('')\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 2)),ha = 'center')\n\nfor item in ax.get_xticklabels():\n    item.set_rotation(12)\n    \nplt.subplot(514)\nax = sns.barplot(data=df_2018.groupby(by=['Year', 'Brand Name'])['Total Claims'].sum().reset_index().sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims')\nax.set_title('CMS Top 10 Brands by Total Claims in 2018', fontsize=18)\nax.set_xlabel('')\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 2)),ha = 'center')\n\nfor item in ax.get_xticklabels():\n    item.set_rotation(12)\n    \nplt.subplot(515)\nax = sns.barplot(data=df_2019.groupby(by=['Year', 'Brand Name'])['Total Claims'].sum().reset_index().sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims')\nax.set_title('CMS Top 10 Brands by Total Claims in 2019', fontsize=18)\nax.set_xlabel('')\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 2)),ha = 'center')\n\nfor item in ax.get_xticklabels():\n    item.set_rotation(12)\n    \nplt.show()","164ba8ea":"fig = plt.figure(figsize=(16, 34)).tight_layout(w_pad=3.0, h_pad=6.0)\n\nplt.subplot(511)\nax = sns.barplot(data=df_2015.groupby(by=['Year', 'Manufacturer'])['Total Claims'].sum().reset_index().sort_values(by='Total Claims', ascending=False).head(10), x='Manufacturer', y='Total Claims', estimator=sum, ci=None)\nax.set_title('CMS Top 10 Manufacturers by Total Claims in 2015', fontsize=18)\nax.set_xlabel('')\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 1)), ha = 'center')\n\nfor item in ax.get_xticklabels():\n    item.set_rotation(11)\n    \nplt.subplot(512)\nax = sns.barplot(data=df_2016.groupby(by=['Year', 'Manufacturer'])['Total Claims'].sum().reset_index().sort_values(by='Total Claims', ascending=False).head(10), x='Manufacturer', y='Total Claims', estimator=sum, ci=None)\nax.set_title('CMS Top 10 Manufacturers by Total Claims in 2016', fontsize=18)\nax.set_xlabel('')\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 1)), ha = 'center')\n\nfor item in ax.get_xticklabels():\n    item.set_rotation(11)\n    \nplt.subplot(513)    \nax = sns.barplot(data=df_2017.groupby(by=['Year', 'Manufacturer'])['Total Claims'].sum().reset_index().sort_values(by='Total Claims', ascending=False).head(10), x='Manufacturer', y='Total Claims', estimator=sum, ci=None)\nax.set_title('CMS Top 10 Manufacturers by Total Claims in 2017', fontsize=18)\nax.set_xlabel('')\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 1)), ha = 'center')\n    \nfor item in ax.get_xticklabels():\n    item.set_rotation(11)\n    \nplt.subplot(514)\nax = sns.barplot(data=df_2018.groupby(by=['Year', 'Manufacturer'])['Total Claims'].sum().reset_index().sort_values(by='Total Claims', ascending=False).head(10), x='Manufacturer', y='Total Claims', estimator=sum, ci=None)\nax.set_title('CMS Top 10 Manufacturers by Total Claims in 2018', fontsize=18)\nax.set_xlabel('')\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 1)), ha = 'center')\n\nfor item in ax.get_xticklabels():\n    item.set_rotation(11)\n    \nplt.subplot(515)\nax = sns.barplot(data=df_2019.groupby(by=['Year', 'Manufacturer'])['Total Claims'].sum().reset_index().sort_values(by='Total Claims', ascending=False).head(10), x='Manufacturer', y='Total Claims', estimator=sum, ci=None)\nax.set_title('CMS Top 10 Manufacturers by Total Claims in 2019', fontsize=18)\nax.set_xlabel('')\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 1)), ha = 'center')\n    \nfor item in ax.get_xticklabels():\n    item.set_rotation(11)\n    \nplt.show()","bfbe45a8":"aurobindo_2015 = df_2015[df_2015['Manufacturer'].str.match('.*[Aa]urobindo.*')]\naurobindo_2019 = df_2019[df_2019['Manufacturer'].str.match('.*[Aa]urobin.*')]\nprint('2015: ', len(aurobindo_2015))\nprint('2019: ', len(aurobindo_2019))","fd802aca":"fig = plt.figure(figsize=(16,5))\nax = sns.barplot(data=aurobindo_2015.sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims', estimator=sum, ci=None)\nax.set_title('Total Claims for Aurobindo Products in 2015', fontsize=20)\nax.set_xlabel('')\nfor item in ax.get_xticklabels():\n    item.set_rotation(14)\n    \nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 1)),ha = 'center')","39e7a175":"fig = plt.figure(figsize=(16,5))\nax = sns.barplot(data=aurobindo_2019.sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims', estimator=sum, ci=None)\nax.set_title('Total Claims for Aurobindo Products in 2019', fontsize=20)\nax.set_xlabel('')\nfor item in ax.get_xticklabels():\n    item.set_rotation(14)\n    \nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 1)),ha = 'center')","a5586031":"mylan_2015 = df_2015[df_2015['Manufacturer'].str.match('.*[Mm]ylan.*')]\nmylan_2019 = df_2019[df_2019['Manufacturer'].str.match('.*[Mm]ylan.*')]\nprint('2015: ', len(mylan_2015))\nprint('2019: ', len(mylan_2019))","ae38f811":"fig = plt.figure(figsize=(16,5))\nax = sns.barplot(data=mylan_2015.sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims', estimator=sum, ci=None)\nax.set_title('Total Claims for Mylan Products in 2015', fontsize=20)\nax.set_xlabel('')\nfor item in ax.get_xticklabels():\n    item.set_rotation(14)\n    \nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 1)),ha = 'center')","0bf19b24":"fig = plt.figure(figsize=(16,5))\nax = sns.barplot(data=mylan_2019.sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims', estimator=sum, ci=None)\nax.set_title('Total Claims for Mylan Products in 2019', fontsize=20)\nax.set_xlabel('')\nfor item in ax.get_xticklabels():\n    item.set_rotation(14)\n    \nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110, s = '{}M'.format(round(p.get_height()\/1000000, 1)),ha = 'center')","d1d8b2d0":"df_dupi = df2[df2['Generic Name'].str.match('^[Dd]upilu.*')== True]\ndf_dupi.head()","51692951":"fig = plt.figure(figsize=(12, 7))\n\nax = sns.barplot(data=df_dupi, x='Year', y='Total Spending')\nax.set_title('Total Spending on Dupixent by Year', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Total Spending', fontsize=18)\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110,s = '$ {}MM'.format(round(p.get_height()\/1000000, 2)),ha = 'center')","f1025d7b":"fig = plt.figure(figsize=(12, 7))\n\nax = sns.barplot(data=df_dupi, x='Year', y='Total Claims')\nax.set_title('Total Claims for Dupixent by Year', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Total Claims', fontsize=18)\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),y = p.get_height()+110, s = '{}'.format(round(p.get_height())), ha = 'center')","390aef5d":"df_dupi['Total Claims Per Beneficiary'] = df_dupi['Total Claims']\/df_dupi['Total \\nBeneficiaries']\ndf_dupi.fillna(0)","0c7a4c98":"fig = plt.figure(figsize=(12, 7))\n\nax = sns.barplot(data=df_dupi, x='Year', y='Total Claims Per Beneficiary')\nax.set_title('Total Claims per Beneficiary for Dupixent by Year', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Total Claims', fontsize=18)\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height(), s = '{}'.format(round(p.get_height(), 1)), ha = 'center')","68473264":"# df_dupi.head()","4dfe1fe0":"fig = plt.figure(figsize=(12, 6))\n\nax = sns.barplot(data=df_dupi, x='Year', y='Average \\nSpending Per Beneficiary')\nax.set_title('Average Spending per Beneficiary for Dupixent', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Average Spending per Beneficiary', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height()+110, s = '$ {}'.format(round(p.get_height(), 2)), ha = 'center')","22a35a65":"fig = plt.figure(figsize=(12, 6))\n\nax = sns.barplot(data=df_dupi, x='Year', y='Average \\nSpending Per Claim')\nax.set_title('Average Spending per Claim for Dupixent', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Average Spending per Claim', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height()+10, s = '$ {}'.format(round(p.get_height(), 2)), ha = 'center')","4f4d9aeb":"abacavir = df2[df2['Generic Name'].str.match('.*[Aa]bacavir.*')]\nabacavir.head(10)","a032420c":"abacavir['Brand Name'].value_counts()","af267ebf":"abacavir['Generic Name'].value_counts()","9dce15c1":"abacavir['Manufacturer'].value_counts()","50e0d18a":"fig = plt.figure(figsize=(12, 5))\n\nax = sns.barplot(data=df2[df2['Generic Name'].str.match('.*[Aa]bacavir.*')], x='Year', y='Total Spending', estimator=sum, ci=None)\nax.set_title('Total Spending on Abacavir (All Manufacturers \/ Products)', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Total Spending', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height()+10, s = '${}M'.format(round(p.get_height()\/1000000, 2)), ha = 'center')","524453fd":"fig = plt.figure(figsize=(12, 5))\n\nax = sns.barplot(data=df2[(df2['Generic Name'].str.match('.*[Aa]bacavir.*')) & (df2['Manufacturer'].str.match('.*[Vv]iiv.*'))], x='Year', y='Total Spending', estimator=sum, ci=None)\nax.set_title('Total Spending on Abacavir (Viiv Healthcare)', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Total Spending', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height()+10, s = '${}M'.format(round(p.get_height()\/1000000, 2)), ha = 'center')","7f25fa55":"fig = plt.figure(figsize=(12, 5))\n\nax = sns.barplot(data=df2[(df2['Generic Name'].str.match('.*[Aa]bacavir.*')) & ((df2['Manufacturer'].str.match('.*[Vv]iiv.*') == False))], x='Year', y='Total Spending', estimator=sum, ci=None)\nax.set_title('Total Spending on Abacavir (Excluding Viiv Healthcare)', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Total Spending', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height()+10, s = '${}M'.format(round(p.get_height()\/1000000, 2)), ha = 'center')","2cfc29d6":"fig = plt.figure(figsize=(16, 8))\n\nax = sns.barplot(data=df2[(df2['Generic Name'].str.match('.*[Aa]bacavir.*')) & (df2['Manufacturer'].str.match('.*[Vv]iiv.*'))], x='Year', y='Total Spending', hue = 'Brand Name', estimator=sum, ci=None)\nax.set_title('Total Spending on Abacavir by Brand Name (Viiv Healthcare)', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Total Spending', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2), y = p.get_height()+10, s = '${}M'.format(round(p.get_height()\/1000000)), ha = 'center', fontsize=10)","909b5dec":"fig = plt.figure(figsize=(16, 8))\n\nax = sns.barplot(data=df2[(df2['Generic Name'].str.match('.*[Aa]bacavir.*')) & (df2['Manufacturer'].str.match('.*[Vv]iiv.*'))], x='Year', y='Total Claims', hue = 'Brand Name', estimator=sum, ci=None)\nax.set_title('Total Claims for Abacavir by Brand Name (Viiv Healthcare)', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Total Spending', fontsize=18)\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),\n    y = p.get_height()+110,\n    s = '{}'.format(round(p.get_height())),\n    ha = 'center',\n    fontsize=10)","8cf417ab":"fig = plt.figure(figsize=(12, 7))\n\nax = sns.barplot(data=df2[(df2['Generic Name'].str.match('.*[Aa]bacavir.*')) & (df2['Generic Name'].str.match('.*Lamivud.*') == False)], x='Year', y='Total Spending', estimator=sum, ci=None)\nax.set_title('Total Spending on Abacavir \\n(Single Therapy)', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Total Spending', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),\n    y = p.get_height()+110,\n    s = '$ {}M'.format(round(p.get_height()\/1000000, 2)), \n    ha = 'center')","099b36ed":"fig = plt.figure(figsize=(12, 7))\n\nax = sns.barplot(data=df2[(df2['Generic Name'].str.match('.*[Aa]bacavir.*')) & (df2['Generic Name'].str.match('.*[Dd]olutegravir.*'))], x='Year', y='Total Spending', estimator=sum, ci=None)\nax.set_title('Total Spending on Abacavir \\n(Combination w\/ Dolutegravir)', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Total Spending', fontsize=18)\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),\n    y = p.get_height()+110,\n    s = '$ {}M'.format(round(p.get_height()\/1000000, 2)), \n    ha = 'center')","cc8b27f5":"fig = plt.figure(figsize=(12, 7))\n\nax = sns.barplot(data=df2[(df2['Generic Name'].str.match('.*[Aa]bacavir.*')) & (df2['Generic Name'].str.match('.*[Zz]idovudine.*'))], x='Year', y='Total Spending', estimator=sum, ci=None)\nax.set_title('Total Spending on Abacavir \\n(Combination w\/ Zidovudine)', fontsize=20)\nax.set_xlabel('Year', fontsize=18)\nax.set_ylabel('Total Spending', fontsize=18)\n\nfor p in ax.patches:\n    ax.text(x = p.get_x()+(p.get_width()\/2),\n    y = p.get_height()+110,\n    s = '$ {}M'.format(round(p.get_height()\/1000000, 2)), \n    ha = 'center')","6b812af0":"df_gilead = df2[df2['Manufacturer'].str.match('[Gg]ilead.')].groupby(by=['Manufacturer', 'Year', 'Brand Name', 'Generic Name'])['Total Spending', 'Total Claims'].sum().reset_index()\ndf_gilead.head()","369a5e31":"fig = plt.figure(figsize=(16, 6))\nbarsito = sns.barplot(data = df_gilead, x='Year', y='Total Spending', ci=None, estimator=sum)\nbarsito.set_title('Total Spending on Gilead Products by CMS \\n2015 - 2019 (in Billions of USD)', fontsize=20)\nbarsito.set_xlabel('Year', fontsize=18)\nbarsito.set_ylabel('Total Spending', fontsize=18)\n\nfor p in barsito.patches:\n    barsito.text(x = p.get_x()+(p.get_width()\/2),\n    y = p.get_height()+110, \n    s = '$ {}B'.format(round(p.get_height()\/1000000000, 2)),\n    ha = 'center')","e5ca58f0":"fig = plt.figure(figsize=(18, 44)).tight_layout(h_pad=4.0, w_pad=2.0)\n\nplt.subplot(511)\n\nbar1 = sns.barplot(data = df_gilead[df_gilead['Year'] == 2015].sort_values(by='Total Spending', ascending=False).head(10), x='Brand Name', y='Total Spending', estimator=sum, ci=None)\nbar1.set_title('Total Spending on Top 10 Gilead Products \\n2015 (in Billions of USD)', fontsize=20)\nbar1.set_xlabel('', fontsize=15)\nbar1.set_ylabel('Total Spending', fontsize=15)\nbar1.set_xticklabels(bar1.get_xticklabels(),fontsize=15)\n\nfor item in bar1.get_xticklabels():\n    item.set_rotation(0)\n\nfor p in bar1.patches:\n    height = p.get_height()\n    bar1.text(x = p.get_x()+(p.get_width()\/2), \n    y = height+10,\n    s = '${0:.2} B'.format(height\/1000000000),\n    ha = 'center',\n    fontsize=14)\n    \nplt.subplot(512)\n\nbar1 = sns.barplot(data = df_gilead[df_gilead['Year'] == 2016].sort_values(by='Total Spending', ascending=False).head(10), x='Brand Name', y='Total Spending', estimator=sum, ci=None)\nbar1.set_title('Total Spending on Top 10 Gilead Products \\n2016 (in Billions of USD)', fontsize=20)\nbar1.set_xlabel('', fontsize=15)\nbar1.set_ylabel('Total Spending', fontsize=15)\nbar1.set_xticklabels(bar1.get_xticklabels(),fontsize=15)\n\nfor item in bar1.get_xticklabels():\n    item.set_rotation(0)\n\nfor p in bar1.patches:\n    height = p.get_height()\n    bar1.text(x = p.get_x()+(p.get_width()\/2),\n    y = height+10, \n    s = '${0:.2} B'.format(height\/1000000000), \n    ha = 'center',\n    fontsize=14) \n\nplt.subplot(513)\n\nbar1 = sns.barplot(data = df_gilead[df_gilead['Year'] == 2017].sort_values(by='Total Spending', ascending=False).head(10), x='Brand Name', y='Total Spending', estimator=sum, ci=None)\nbar1.set_title('Total Spending on Top 10 Gilead Products \\n2017 (in Billions of USD)', fontsize=20)\nbar1.set_xlabel('', fontsize=15)\nbar1.set_ylabel('Total Spending', fontsize=15)\nbar1.set_xticklabels(bar1.get_xticklabels(),fontsize=15)\n\nfor item in bar1.get_xticklabels():\n    item.set_rotation(0)\n\nfor p in bar1.patches:\n    height = p.get_height()\n    bar1.text(x = p.get_x()+(p.get_width()\/2),\n    y = height+10, \n    s = '${0:.2} B'.format(height\/1000000000), \n    ha = 'center',\n    fontsize=14) \n\nplt.subplot(514)\n\nbar1 = sns.barplot(data = df_gilead[df_gilead['Year'] == 2018].sort_values(by='Total Spending', ascending=False).head(10), x='Brand Name', y='Total Spending', estimator=sum, ci=None)\nbar1.set_title('Total Spending on Top 10 Gilead Products \\n2018 (in Billions of USD)', fontsize=20)\nbar1.set_xlabel('', fontsize=15)\nbar1.set_ylabel('Total Spending', fontsize=15)\nbar1.set_xticklabels(bar1.get_xticklabels(),fontsize=15)\n\nfor item in bar1.get_xticklabels():\n    item.set_rotation(0)\n\nfor p in bar1.patches:\n    height = p.get_height()\n    bar1.text(x = p.get_x()+(p.get_width()\/2),\n    y = height+10, \n    s = '${0:.2} B'.format(height\/1000000000), \n    ha = 'center',\n    fontsize=14) \n\nplt.subplot(515)\n\nbar1 = sns.barplot(data = df_gilead[df_gilead['Year'] == 2019].sort_values(by='Total Spending', ascending=False).head(10), x='Brand Name', y='Total Spending', estimator=sum, ci=None)\nbar1.set_title('Total Spending on Top 10 Gilead Products \\n2019 (in Billions of USD)', fontsize=20)\nbar1.set_xlabel('', fontsize=15)\nbar1.set_ylabel('Total Spending', fontsize=15)\nbar1.set_xticklabels(bar1.get_xticklabels(),fontsize=15)\n\nfor item in bar1.get_xticklabels():\n    item.set_rotation(0)\n\nfor p in bar1.patches:\n    height = p.get_height()\n    bar1.text(x = p.get_x()+(p.get_width()\/2),\n    y = height+10, \n    s = '${0:.2} B'.format(height\/1000000000), \n    ha = 'center',\n    fontsize=14) ","d20c1415":"df_indication.head()","2e7cc2de":"list(df_indication[df_indication['Brand Name'].str.contains('.*[Hh]arvoni.*')]['Drug Uses**'])[0]","d789b618":"fig = plt.figure(figsize=(18, 44)).tight_layout(h_pad=4.0, w_pad=2.0)\n\nplt.subplot(511)\n\nbar1 = sns.barplot(data = df_gilead[df_gilead['Year'] == 2015].sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims', estimator=sum, ci=None)\nbar1.set_title('Total Claims for Top 10 Gilead Products \\n2015', fontsize=20)\nbar1.set_xlabel('', fontsize=15)\nbar1.set_ylabel('Total Claims', fontsize=15)\nbar1.set_xticklabels(bar1.get_xticklabels(),fontsize=15)\n\nfor item in bar1.get_xticklabels():\n    item.set_rotation(0)\n\nfor p in bar1.patches:\n    height = p.get_height()\n    bar1.text(x = p.get_x()+(p.get_width()\/2), \n    y = height+10,\n    s = '{0:.2}M'.format(height\/1000000), \n    ha = 'center',\n    fontsize=14)\n    \nplt.subplot(512)\n\nbar1 = sns.barplot(data = df_gilead[df_gilead['Year'] == 2016].sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims', estimator=sum, ci=None)\nbar1.set_title('Total Claims for Top 10 Gilead Products \\n2016', fontsize=20)\nbar1.set_xlabel('', fontsize=15)\nbar1.set_ylabel('Total Claims', fontsize=15)\nbar1.set_xticklabels(bar1.get_xticklabels(),fontsize=15)\n\nfor item in bar1.get_xticklabels():\n    item.set_rotation(0)\n\nfor p in bar1.patches:\n    height = p.get_height()\n    bar1.text(x = p.get_x()+(p.get_width()\/2), \n    y = height+10, \n    s = '{0:.2}M'.format(height\/1000000), \n    ha = 'center',\n    fontsize=14) \n\nplt.subplot(513)\n\nbar1 = sns.barplot(data = df_gilead[df_gilead['Year'] == 2017].sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims', estimator=sum, ci=None)\nbar1.set_title('Total Claims for Top 10 Gilead Products \\n2017 (in Billions of USD)', fontsize=20)\nbar1.set_xlabel('', fontsize=15)\nbar1.set_ylabel('Total Claims', fontsize=15)\nbar1.set_xticklabels(bar1.get_xticklabels(),fontsize=15)\n\nfor item in bar1.get_xticklabels():\n    item.set_rotation(0)\n\nfor p in bar1.patches:\n    height = p.get_height()\n    bar1.text(x = p.get_x()+(p.get_width()\/2), \n    y = height+10, \n    s = '{0:.2}M'.format(height\/1000000),\n    ha = 'center',\n    fontsize=14)\n\nplt.subplot(514)\n\nbar1 = sns.barplot(data = df_gilead[df_gilead['Year'] == 2018].sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims', estimator=sum, ci=None)\nbar1.set_title('Total Claims for Top 10 Gilead Products \\n2018', fontsize=20)\nbar1.set_xlabel('', fontsize=15)\nbar1.set_ylabel('Total Claims', fontsize=15)\nbar1.set_xticklabels(bar1.get_xticklabels(),fontsize=15)\n\nfor item in bar1.get_xticklabels():\n    item.set_rotation(0)\n\nfor p in bar1.patches:\n    height = p.get_height()\n    bar1.text(x = p.get_x()+(p.get_width()\/2), \n    y = height+150, \n    s = '{0:.2}M'.format(height\/1000000), \n    ha = 'center',\n    fontsize=14) \n\nplt.subplot(515)\n\nbar1 = sns.barplot(data = df_gilead[df_gilead['Year'] == 2019].sort_values(by='Total Claims', ascending=False).head(10), x='Brand Name', y='Total Claims', estimator=sum, ci=None)\nbar1.set_title('Total Claims for Top 10 Gilead Products \\n2019', fontsize=20)\nbar1.set_xlabel('', fontsize=15)\nbar1.set_ylabel('Total Claims', fontsize=15)\nbar1.set_xticklabels(bar1.get_xticklabels(),fontsize=15)\n\nfor item in bar1.get_xticklabels():\n    item.set_rotation(0)\n\nfor p in bar1.patches:\n    height = p.get_height()\n    bar1.text(x = p.get_x()+(p.get_width()\/2),\n    y = height+10,\n    s = '{0:.2}M'.format(height\/1000000),\n    ha = 'center',\n    fontsize=14)","e24c8976":"I also want to see how many claims are filed per beneficiary for each year, on average.","75144b17":"Triumeq seems to be the clear leader in the abacavir market, comprising the majority of speand each year with increasing spend in all years but 2019.  Triumeq is a triple therapy of abacavir in combination with Dolutegravir and Lamivudine - it seems there are several double and triple therapy combinations as well, all in combination with Lamivudine.  Let's take a look at any other trends in single vs combination therapies.","ff79087d":"Viiv Healthcare's dominance in the Part D abacavir market can be seen by the significant proportion of CMS spend on Viiv's abacavir products.  Let's see which brand is the highest selling among Viiv's abacavir portfolio.","064baaac":"It is interesting noting Harvoni's rapid decline in spend during these 5 years, with Eliquis rising significantly and Revlimid growing steadily in total spend. Now I want to look at the top 10 manufacturers by total spending across all their products.","36ce64b4":"It seems there are several brand name versions of abacavir which were reimbursed by CMS during this time period, including double and triple combination therapies.  Viiv Healthcare seems to dominate the Medicare Part D market in abacavir, with 4 brand name abacavir products reimbursed by CMS during this time. I'll first take a look across all brands\/manufacturers in totality, then get into a bit more detail.","e3695392":"# Dupixent Analysis","a6b0e161":"Now, instead of a specific brand name, I want to explore a generic molecule that has numerous manufacturers and brand names - I will take a look at abacavir, an antiviral treatment for HIV.","434d079f":"First off, I will strip all string values of any unnecessary white space that may interfere with the data cleaning. Then i'll get rid of any unneeded punctuation\/characters and convert to integer and float data types so I can analyze with pandas.","9ac33cfe":"Now I have all my correct data types - just have to take care of the missing values. After comparing with the original dataframe above, I think it is fair to assume the missing values mean there were no Medicare claims for that brand during that year.  I will go ahead and replace all null values with zeroes.","e689953c":"Let's see how many observations we have in the dataset.","b0a926c6":"# High-Level Overview","a674e383":"Within 5 years total CMS spend on Harvoni declined by over USD 6 billion.  From 2018 to 2019, Biktarvy, indicated for treatment of HIV, overtook all other Gilead products to reach highest total CMS spend at USD 1.1 billion. I want to see what Harvoni is indicated for, using the df_indication dataset.","fc3be2ee":"So now it looks like the 'Total Spending' column is almost ready to go, but it is still a string data type. I noticed there are some values that contain a single or double space instead of null (to indicate a missing value), so I will replace any such data points with zero values. Let's see the dataframe that results.","f7942bce":"From 2015 to 2019 the number of Medicare claims filed for Aurobindo products more than doubled, from ~40M claims to over 110M claims.  Claims for Mylan products dropped from 117M claims in 2015 to 57M claims in 2019. Let's see the top 10 Mylan and Aurobindo products by number of claims for 2015 and 2019.","5df684d7":"# Data Cleaning","13ff47ee":"Total CMS Part D spending increased from ~USD 134 billion in 2015 to ~USD 183 billion in 2019, while total number of claims increased by ~100 million during this time.","382d4a0b":"Now I want to look at the brand name drugs and manufacturers who had the highest number of CMS claims in the dataset.","bec09c69":"Gilead's Ranexa has led total claims across Gilead's portfolio since 2015, though total claims decreased by roughly two thirds in 2019 (1.2 million to 0.42 million).","6d8b4723":"# Abacavir Analysis","f79daff1":"Now I will clean each column and convert each to integer or float values to allow for analysis.","2026d4b2":"I see top drug by spend in 2015 was Gilead's Harvoni with ~$7 billion in total spending, roughly 2.5 times the amount of the number 2 product, AstraZeneca's Crestor. Now I will visualize some of the data to better understand some of the trends in CMS claims and spending.","9c6cf347":"It appears Harvoni is a treatment for chronic hepatitis C.  I now want to see the top 10 Gilead drugs by number of claims across the 5 year period.","933ded8d":"I will now take a look at a specific manufacturer, Gilead Sciences, a manufacturer of products in the HIV, hepatitis B\/C, and oncology spaces.","a5e9340a":"Now my dataframe is ready to analyze, with all the data clean and all missing values imputed.  Now I can get into some analyses.","920ffc2c":"Interesting that Gilead's total spend by 2019 was reduced to almost half of 2015's total spend of USD ~11.2 Billion.","8acb34af":"# Medicare Part D Spending and Utilization, Calendar Years 2015 - 2019","89721e66":"Total number of claims for Levothyroxine Sodium decreased from 2015 to 2019, though the drug remains Mylan's top drug by number of claims by a wide margin.","c39889db":"I see all the columns except for 'Year' are likely string types and not numerical values as needed to perform analyses on the data.  I will need to clean the data before proceeding with analysis.","eb98826f":"### First, I want to take a high-level overview of CMS' total spending for the years 2015 - 2019. I will plot overall spending and claims, the top 10 drugs by total spending and total number of claims for each year, then plot the top manufacturers by total spending and claims (across all brands) for each year.","9474f891":"# Gilead Analysis","42567384":"This concludes my exploratory analysis of the CMS Part D Spending and Utilization dataset - I hope you found some of these insights helpful.  There are a multitude of different insights that can be obtained from this data, which I intend to explore further in future iterations of this research.","16f53ce9":"## The objective of this project is to explore the 'Medicare Part D Drug Spending and Utilization, Calendar Years 2015 - 2019' dataset (available at: https:\/\/www.cms.gov\/Research-Statistics-Data-and-Systems\/Statistics-Trends-and-Reports\/Information-on-Prescription-Drugs\/MedicarePartD). I will first identify some high-level insights across the whole dataset, then take a deep-dive into some specific manufacturers and products.","703f561c":"Claims for Losartan Potassium more than doubled between 2015 and 2019, with Losartan Potassium being a clear leader in number of claims for Aurobindo in 2019.","8fe2e132":"It appears abacavir as a single therapy is a miniscule proportion of the CMS market compared to double and triple combination therapy abacavir, which is led by Viiv Healthcare by a wide margin. Total spending on single therapy Abacavir Sulfate and combination Zidovudine have decreased year over year since 2015, with combination Dolutegravir driving spend in this space.","3969f495":"###  I will now take a deeper look at some specific drugs and manufacturers to identify anything of interest.  I will first take a look at Dupixent (dupilumab), a monoclonal antibody developed by Sanofi & Regeneron indicated for atopic dermatitis, eosinophilic asthma and CRSwNP, with ongoing clinical trials in additional indications.","3bbbf843":"There are ~50,000 observations. Spread across 5 years (2015 - 2019), that's roughly 10,000 unique brand name drugs reimbursed by CMS each year on average. Let's take a look at what kind of data this dataset contains."}}