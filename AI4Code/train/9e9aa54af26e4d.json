{"cell_type":{"b1cf43f6":"code","db5e78f5":"code","19eaf57d":"code","19762504":"code","ad19eb0c":"code","58babeff":"code","bfdcf3f4":"code","f57b2098":"code","8c1dfcec":"code","1148762f":"code","5c4023ce":"code","d77af874":"code","6aa731b1":"code","8ad1b2a2":"code","35b74394":"code","d81d0e5e":"code","2d4b73ff":"code","21b0301a":"code","75fed524":"markdown","eff644a2":"markdown","35cea63c":"markdown","bc2d8ab9":"markdown","c9239ba9":"markdown","51209141":"markdown","baf974ba":"markdown","722eb747":"markdown","63317e49":"markdown","e0535556":"markdown","ee7a59a7":"markdown","083c1437":"markdown","5e1a88dc":"markdown","687f6c63":"markdown","6874fc39":"markdown","0989c6e2":"markdown","a7fc661c":"markdown","7587f5ad":"markdown","3016d057":"markdown","b61614d2":"markdown","0dad8971":"markdown","484e779c":"markdown","4f163efe":"markdown"},"source":{"b1cf43f6":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","db5e78f5":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","19eaf57d":"dataset_train = pd.read_csv('\/kaggle\/input\/google-stock-price\/Google_Stock_Price_Train.csv')\ntraining_set = dataset_train.iloc[:, 1:2].values","19762504":"from sklearn.preprocessing import MinMaxScaler\nsc = MinMaxScaler(feature_range = (0, 1))\ntraining_set_scaled = sc.fit_transform(training_set)","ad19eb0c":"X_train = []\ny_train = []\nfor i in range(60, 1258):\n    X_train.append(training_set_scaled[i-60:i, 0])\n    y_train.append(training_set_scaled[i, 0])\nX_train, y_train = np.array(X_train), np.array(y_train)","58babeff":"X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))","bfdcf3f4":"from keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import LSTM\nfrom keras.layers import Dropout\nfrom keras.layers import Activation","f57b2098":"regressor = Sequential()","8c1dfcec":"regressor.add(LSTM(units = 50, return_sequences = True, input_shape = (X_train.shape[1], 1)))\nregressor.add(Dropout(0.2))","1148762f":"regressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))","5c4023ce":"regressor.add(LSTM(units = 50, return_sequences = True))\nregressor.add(Dropout(0.2))","d77af874":"regressor.add(LSTM(units = 50))\nregressor.add(Dropout(0.2))","6aa731b1":"regressor.add(Dense(units = 1))","8ad1b2a2":"regressor.compile(optimizer = 'adam', loss = 'mean_squared_error')","35b74394":"regressor.fit(X_train, y_train, epochs = 200, batch_size = 32)","d81d0e5e":"dataset_test = pd.read_csv('\/kaggle\/input\/google-stock-price\/Google_Stock_Price_Test.csv')\nreal_stock_price = dataset_test.iloc[:, 1:2].values","2d4b73ff":"dataset_total = pd.concat((dataset_train['Open'], dataset_test['Open']), axis = 0)\ninputs = dataset_total[len(dataset_total) - len(dataset_test) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs = sc.transform(inputs)\nX_test = []\nfor i in range(60, 80):\n    X_test.append(inputs[i-60:i, 0])\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))\npredicted_stock_price = regressor.predict(X_test)\npredicted_stock_price = sc.inverse_transform(predicted_stock_price)","21b0301a":"plt.plot(real_stock_price, color = 'red', label = 'Real Google Stock Price')\nplt.plot(predicted_stock_price, color = 'blue', label = 'Predicted Google Stock Price')\nplt.title('Google Stock Price Prediction')\nplt.xlabel('Time')\nplt.ylabel('Google Stock Price')\nplt.legend()\nplt.show()","75fed524":"### Adding the first LSTM layer and some Dropout regularisation","eff644a2":"### Initialising the RNN","35cea63c":"### Adding the output layer","bc2d8ab9":"## Conclusion","c9239ba9":"### Importing the libraries","51209141":"### Feature Scaling","baf974ba":"### Creating a data structure with 60 timesteps and 1 output","722eb747":"### Fitting the RNN to the Training set","63317e49":"### Getting the real stock price of 2017","e0535556":"### Visualising the results","ee7a59a7":"# Stock Price Prediction","083c1437":"### Adding a second LSTM layer and some Dropout regularisation","5e1a88dc":"### Reshaping","687f6c63":"### Compiling the RNN","6874fc39":"### Importing the training set","0989c6e2":"#### Our model using LSTM and RNN gives fairly accurately result on how the stock price of google varies.","a7fc661c":"## Part 1 - Data Preprocessing","7587f5ad":"## Part 3 - Making the predictions and visualising the results","3016d057":"### Getting the predicted stock price of 2017","b61614d2":"### Adding a fourth LSTM layer and some Dropout regularisation","0dad8971":"### Importing the Keras libraries and packages","484e779c":"### Adding a third LSTM layer and some Dropout regularisation","4f163efe":"## Part 2 - Building and Training the RNN"}}