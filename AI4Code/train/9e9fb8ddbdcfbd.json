{"cell_type":{"f9a4cedf":"code","2035ccbb":"code","efc09bce":"code","93a08d25":"code","7aa16ea3":"code","18240773":"code","a4f27383":"code","5572c2fc":"code","6b95bdf3":"code","3e12b026":"code","4669bc87":"code","81a6a761":"code","956bc0b9":"code","b35662d7":"code","85d146c9":"code","24bd11ef":"code","caa8ff9e":"code","a64d7492":"code","c131244f":"code","d4a88591":"code","e22eb778":"markdown","01984fc4":"markdown","518004b4":"markdown","e0e4d43f":"markdown","a70b8cf3":"markdown"},"source":{"f9a4cedf":"import numpy as np\nimport pandas as pd\nimport sklearn.metrics as mtr\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 150)","2035ccbb":"from keras.layers import Dense\nfrom keras.models import Sequential\nfrom keras.callbacks import Callback, EarlyStopping","efc09bce":"import warnings\nwarnings.filterwarnings(\"ignore\")","93a08d25":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7aa16ea3":"train = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', usecols=['GameId', 'PlayId', 'Team', 'X', 'Y', 'S', 'A', 'Dis',\n                                                                               'Orientation', 'Dir', 'NflId', 'DisplayName', 'YardLine',\n                                                                               'Quarter', 'GameClock', 'PossessionTeam', 'Down', 'Distance',\n                                                                               'FieldPosition', 'NflIdRusher', 'OffenseFormation',\n                                                                               'OffensePersonnel', 'DefendersInTheBox', 'DefensePersonnel',\n                                                                               'PlayDirection', 'TimeHandoff', 'TimeSnap', 'Yards'])","18240773":"outcomes = train[['GameId','PlayId','Yards']].drop_duplicates()","a4f27383":"def create_features(df, deploy=False):\n    def new_X(x_coordinate, play_direction):\n        if play_direction == 'left':\n            return 120.0 - x_coordinate\n        else:\n            return x_coordinate\n\n    def new_line(rush_team, field_position, yardline):\n        if rush_team == field_position:\n            # offense starting at X = 0 plus the 10 yard endzone plus the line of scrimmage\n            return 10.0 + yardline\n        else:\n            # half the field plus the yards between midfield and the line of scrimmage\n            return 60.0 + (50 - yardline)\n\n    def new_orientation(angle, play_direction):\n        if play_direction == 'left':\n            new_angle = 360.0 - angle\n            if new_angle == 360.0:\n                new_angle = 0.0\n            return new_angle\n        else:\n            return angle\n\n    def euclidean_distance(x1,y1,x2,y2):\n        x_diff = (x1-x2)**2\n        y_diff = (y1-y2)**2\n\n        return np.sqrt(x_diff + y_diff)\n\n    def back_direction(orientation):\n        if orientation > 180.0:\n            return 1\n        else:\n            return 0\n\n    def update_yardline(df):\n        new_yardline = df[df['NflId'] == df['NflIdRusher']]\n        new_yardline['YardLine'] = new_yardline[['PossessionTeam','FieldPosition','YardLine']].apply(lambda x: new_line(x[0],x[1],x[2]), axis=1)\n        new_yardline = new_yardline[['GameId','PlayId','YardLine']]\n\n        return new_yardline\n\n    def update_orientation(df, yardline):\n        df['X'] = df[['X','PlayDirection']].apply(lambda x: new_X(x[0],x[1]), axis=1)\n        df['Orientation'] = df[['Orientation','PlayDirection']].apply(lambda x: new_orientation(x[0],x[1]), axis=1)\n        df['Dir'] = df[['Dir','PlayDirection']].apply(lambda x: new_orientation(x[0],x[1]), axis=1)\n\n        df = df.drop('YardLine', axis=1)\n        df = pd.merge(df, yardline, on=['GameId','PlayId'], how='inner')\n\n        return df\n\n    def back_features(df):\n        carriers = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','NflIdRusher','X','Y','Orientation','Dir','YardLine']]\n        carriers['back_from_scrimmage'] = carriers['YardLine'] - carriers['X']\n        carriers['back_oriented_down_field'] = carriers['Orientation'].apply(lambda x: back_direction(x))\n        carriers['back_moving_down_field'] = carriers['Dir'].apply(lambda x: back_direction(x))\n        carriers = carriers.rename(columns={'X':'back_X',\n                                            'Y':'back_Y'})\n        carriers = carriers[['GameId','PlayId','NflIdRusher','back_X','back_Y','back_from_scrimmage','back_oriented_down_field','back_moving_down_field']]\n\n        return carriers\n\n    def features_relative_to_back(df, carriers):\n        player_distance = df[['GameId','PlayId','NflId','X','Y']]\n        player_distance = pd.merge(player_distance, carriers, on=['GameId','PlayId'], how='inner')\n        player_distance = player_distance[player_distance['NflId'] != player_distance['NflIdRusher']]\n        player_distance['dist_to_back'] = player_distance[['X','Y','back_X','back_Y']].apply(lambda x: euclidean_distance(x[0],x[1],x[2],x[3]), axis=1)\n\n        player_distance = player_distance.groupby(['GameId','PlayId','back_from_scrimmage','back_oriented_down_field','back_moving_down_field'])\\\n                                         .agg({'dist_to_back':['min','max','mean','std']})\\\n                                         .reset_index()\n        player_distance.columns = ['GameId','PlayId','back_from_scrimmage','back_oriented_down_field','back_moving_down_field',\n                                   'min_dist','max_dist','mean_dist','std_dist']\n\n        return player_distance\n\n    def defense_features(df):\n        rusher = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','Team','X','Y']]\n        rusher.columns = ['GameId','PlayId','RusherTeam','RusherX','RusherY']\n\n        defense = pd.merge(df,rusher,on=['GameId','PlayId'],how='inner')\n        defense = defense[defense['Team'] != defense['RusherTeam']][['GameId','PlayId','X','Y','RusherX','RusherY']]\n        defense['def_dist_to_back'] = defense[['X','Y','RusherX','RusherY']].apply(lambda x: euclidean_distance(x[0],x[1],x[2],x[3]), axis=1)\n\n        defense = defense.groupby(['GameId','PlayId'])\\\n                         .agg({'def_dist_to_back':['min','max','mean','std']})\\\n                         .reset_index()\n        defense.columns = ['GameId','PlayId','def_min_dist','def_max_dist','def_mean_dist','def_std_dist']\n\n        return defense\n\n    def static_features(df):\n        static_features = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','X','Y','S','A','Dis','Orientation','Dir',\n                                                            'YardLine','Quarter','Down','Distance','DefendersInTheBox']].drop_duplicates()\n        static_features['DefendersInTheBox'] = static_features['DefendersInTheBox'].fillna(np.mean(static_features['DefendersInTheBox']))\n\n        return static_features\n    \n    def split_personnel(s):\n        splits = s.split(',')\n        for i in range(len(splits)):\n            splits[i] = splits[i].strip()\n\n        return splits\n\n    def defense_formation(l):\n        dl = 0\n        lb = 0\n        db = 0\n        other = 0\n\n        for position in l:\n            sub_string = position.split(' ')\n            if sub_string[1] == 'DL':\n                dl += int(sub_string[0])\n            elif sub_string[1] in ['LB','OL']:\n                lb += int(sub_string[0])\n            else:\n                db += int(sub_string[0])\n\n        counts = (dl,lb,db,other)\n\n        return counts\n\n    def offense_formation(l):\n        qb = 0\n        rb = 0\n        wr = 0\n        te = 0\n        ol = 0\n\n        sub_total = 0\n        qb_listed = False\n        for position in l:\n            sub_string = position.split(' ')\n            pos = sub_string[1]\n            cnt = int(sub_string[0])\n\n            if pos == 'QB':\n                qb += cnt\n                sub_total += cnt\n                qb_listed = True\n            # Assuming LB is a line backer lined up as full back\n            elif pos in ['RB','LB']:\n                rb += cnt\n                sub_total += cnt\n            # Assuming DB is a defensive back and lined up as WR\n            elif pos in ['WR','DB']:\n                wr += cnt\n                sub_total += cnt\n            elif pos == 'TE':\n                te += cnt\n                sub_total += cnt\n            # Assuming DL is a defensive lineman lined up as an additional line man\n            else:\n                ol += cnt\n                sub_total += cnt\n\n        # If not all 11 players were noted at given positions we need to make some assumptions\n        # I will assume if a QB is not listed then there was 1 QB on the play\n        # If a QB is listed then I'm going to assume the rest of the positions are at OL\n        # This might be flawed but it looks like RB, TE and WR are always listed in the personnel\n        if sub_total < 11:\n            diff = 11 - sub_total\n            if not qb_listed:\n                qb += 1\n                diff -= 1\n            ol += diff\n\n        counts = (qb,rb,wr,te,ol)\n\n        return counts\n    \n    def personnel_features(df):\n        personnel = df[['GameId','PlayId','OffensePersonnel','DefensePersonnel']].drop_duplicates()\n        personnel['DefensePersonnel'] = personnel['DefensePersonnel'].apply(lambda x: split_personnel(x))\n        personnel['DefensePersonnel'] = personnel['DefensePersonnel'].apply(lambda x: defense_formation(x))\n        personnel['num_DL'] = personnel['DefensePersonnel'].apply(lambda x: x[0])\n        personnel['num_LB'] = personnel['DefensePersonnel'].apply(lambda x: x[1])\n        personnel['num_DB'] = personnel['DefensePersonnel'].apply(lambda x: x[2])\n\n        personnel['OffensePersonnel'] = personnel['OffensePersonnel'].apply(lambda x: split_personnel(x))\n        personnel['OffensePersonnel'] = personnel['OffensePersonnel'].apply(lambda x: offense_formation(x))\n        personnel['num_QB'] = personnel['OffensePersonnel'].apply(lambda x: x[0])\n        personnel['num_RB'] = personnel['OffensePersonnel'].apply(lambda x: x[1])\n        personnel['num_WR'] = personnel['OffensePersonnel'].apply(lambda x: x[2])\n        personnel['num_TE'] = personnel['OffensePersonnel'].apply(lambda x: x[3])\n        personnel['num_OL'] = personnel['OffensePersonnel'].apply(lambda x: x[4])\n\n        # Let's create some features to specify if the OL is covered\n        personnel['OL_diff'] = personnel['num_OL'] - personnel['num_DL']\n        personnel['OL_TE_diff'] = (personnel['num_OL'] + personnel['num_TE']) - personnel['num_DL']\n        # Let's create a feature to specify if the defense is preventing the run\n        # Let's just assume 7 or more DL and LB is run prevention\n        personnel['run_def'] = (personnel['num_DL'] + personnel['num_LB'] > 6).astype(int)\n\n        personnel.drop(['OffensePersonnel','DefensePersonnel'], axis=1, inplace=True)\n        \n        return personnel\n\n    def combine_features(relative_to_back, defense, static, personnel, deploy=deploy):\n        df = pd.merge(relative_to_back,defense,on=['GameId','PlayId'],how='inner')\n        df = pd.merge(df,static,on=['GameId','PlayId'],how='inner')\n        df = pd.merge(df,personnel,on=['GameId','PlayId'],how='inner')\n\n        if not deploy:\n            df = pd.merge(df, outcomes, on=['GameId','PlayId'], how='inner')\n\n        return df\n    \n    yardline = update_yardline(df)\n    df = update_orientation(df, yardline)\n    back_feats = back_features(df)\n    rel_back = features_relative_to_back(df, back_feats)\n    def_feats = defense_features(df)\n    static_feats = static_features(df)\n    personnel = personnel_features(df)\n    basetable = combine_features(rel_back, def_feats, static_feats, personnel, deploy=deploy)\n    \n    return basetable","5572c2fc":"%time train_basetable = create_features(train, False)","6b95bdf3":"X = train_basetable.copy()\nyards = X.Yards\n\ny = np.zeros((yards.shape[0], 199))\nfor idx, target in enumerate(list(yards)):\n    y[idx][99 + target] = 1\n\nX.drop(['GameId','PlayId','Yards'], axis=1, inplace=True)","3e12b026":"scaler = StandardScaler()\nX = scaler.fit_transform(X)","4669bc87":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.15, random_state=12345)","81a6a761":"print(X_train.shape, X_val.shape)\nprint(y_train.shape, y_val.shape)","956bc0b9":"class Metric(Callback):\n    def __init__(self, model, callbacks, data):\n        super().__init__()\n        self.model = model\n        self.callbacks = callbacks\n        self.data = data\n\n    def on_train_begin(self, logs=None):\n        for callback in self.callbacks:\n            callback.on_train_begin(logs)\n\n    def on_train_end(self, logs=None):\n        for callback in self.callbacks:\n            callback.on_train_end(logs)\n\n    def on_epoch_end(self, batch, logs=None):\n        X_train, y_train = self.data[0][0], self.data[0][1]\n        y_pred = self.model.predict(X_train)\n        y_true = np.clip(np.cumsum(y_train, axis=1), 0, 1)\n        y_pred = np.clip(np.cumsum(y_pred, axis=1), 0, 1)\n        tr_s = ((y_true - y_pred) ** 2).sum(axis=1).sum(axis=0) \/ (199 * X_train.shape[0])\n        tr_s = np.round(tr_s, 6)\n        logs['tr_CRPS'] = tr_s\n\n        X_valid, y_valid = self.data[1][0], self.data[1][1]\n\n        y_pred = self.model.predict(X_valid)\n        y_true = np.clip(np.cumsum(y_valid, axis=1), 0, 1)\n        y_pred = np.clip(np.cumsum(y_pred, axis=1), 0, 1)\n        val_s = ((y_true - y_pred) ** 2).sum(axis=1).sum(axis=0) \/ (199 * X_valid.shape[0])\n        val_s = np.round(val_s, 6)\n        logs['val_CRPS'] = val_s\n        print('tr CRPS', tr_s, 'val CRPS', val_s)\n\n        for callback in self.callbacks:\n            callback.on_epoch_end(batch, logs)","b35662d7":"model = Sequential()\nmodel.add(Dense(512, input_dim=X.shape[1], activation='relu'))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(199, activation='softmax'))","85d146c9":"model.summary()","24bd11ef":"model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=[])","caa8ff9e":"es = EarlyStopping(monitor='val_CRPS', \n                   mode='min',\n                   restore_best_weights=True, \n                   verbose=2, \n                   patience=5)\nes.set_model(model)","a64d7492":"metric = Metric(model, [es], [(X_train,y_train), (X_val,y_val)])","c131244f":"%%time\nmodel.fit(X_train, y_train, callbacks=[metric], epochs=100, batch_size=1024)","d4a88591":"%%time\nfrom kaggle.competitions import nflrush\nenv = nflrush.make_env()\niter_test = env.iter_test()\n\nfor (test_df, sample_prediction_df) in iter_test:\n    basetable = create_features(test_df, deploy=True)\n    basetable.drop(['GameId','PlayId'], axis=1, inplace=True)\n    scaled_basetable = scaler.transform(basetable)\n    \n    y_pred = model.predict(scaled_basetable)\n    y_pred = np.clip(np.cumsum(y_pred, axis=1), 0, 1).tolist()[0]\n    \n    preds_df = pd.DataFrame(data=[y_pred], columns=sample_prediction_df.columns)\n    env.predict(preds_df)\n    \nenv.write_submission_file()","e22eb778":"## Functions for anchoring offense moving left from {0,0}","01984fc4":"Below class Metric based entirely on: https:\/\/www.kaggle.com\/kingychiu\/keras-nn-starter-crps-early-stopping\n<br><\/br>\nBelow early stopping entirely based on: https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/discussion\/112868#latest-656533","518004b4":"# Let's build NN","e0e4d43f":"# Time for the actual submission","a70b8cf3":"# Let's split our data into train\/val"}}