{"cell_type":{"4971a76a":"code","3e651467":"code","c19266ee":"code","9aa37f13":"code","03779339":"code","90a7b43a":"code","f4b8d893":"code","be429df3":"code","7dacfacc":"code","e06acff9":"code","0546ccf0":"code","2c7e4103":"code","1eb5f49c":"code","212a7027":"code","22651cb0":"code","83a1a332":"code","aa21642b":"code","ed2732f5":"code","7cba7821":"code","4f736196":"code","b0a8bbd5":"code","1c98ef60":"code","f650a327":"code","c04e87c1":"code","773f8b33":"code","269508a8":"code","29bee174":"markdown","6ba6b1da":"markdown","2b967212":"markdown","17756fb9":"markdown","45d9686a":"markdown","511b4d8a":"markdown","ba1b6fa9":"markdown","42c70ed8":"markdown","58ff8a72":"markdown","52861818":"markdown","c3bbd67f":"markdown","3ba467af":"markdown","96e2bccb":"markdown"},"source":{"4971a76a":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\n\nfrom sklearn import svm\nfrom sklearn.utils import shuffle\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split","3e651467":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')","c19266ee":"train.head()","9aa37f13":"train['Survived'].replace(1, \"Yes\",inplace=True)\ntrain['Survived'].replace(0, \"No\",inplace=True)\ntrain['Survived']","03779339":"plt.subplots(figsize=(10,10))\nsns.countplot('Sex',hue='Survived',data=train, palette='RdBu_r')\nplt.show()","90a7b43a":"plt.figure(figsize=[10,10])\nsns.distplot(train['Age'].dropna().values, bins=range(0,17), kde=False, color=\"#007598\")\nsns.distplot(train['Age'].dropna().values, bins=range(16, 33), kde=False, color=\"#7B97A0\")\nsns.distplot(train['Age'].dropna().values, bins=range(32, 49), kde=False, color=\"#06319B\")\nsns.distplot(train['Age'].dropna().values, bins=range(48,65), kde=False, color=\"#007598\")\nsns.distplot(train['Age'].dropna().values, bins=range(64,81), kde=False, color=\"#000000\",\n            axlabel='Age')\nplt.show()","f4b8d893":"train['Age_Category'] = pd.cut(train['Age'],\n                        bins=[0,16,32,48,64,81])\nplt.subplots(figsize=(10,10))\nsns.countplot('Age_Category',hue='Survived',data=train, palette='RdBu_r')\nplt.show()","be429df3":"train.loc[ train['Age'] <= 16, 'Age'] = 0\ntrain.loc[(train['Age'] > 16) & (train['Age'] <= 32), 'Age'] = 1\ntrain.loc[(train['Age'] > 32) & (train['Age'] <= 48), 'Age'] = 2\ntrain.loc[(train['Age'] > 48) & (train['Age'] <= 64), 'Age'] = 3\ntrain.loc[ train['Age'] > 64, 'Age'] = 4\n    \ntrain.head()","7dacfacc":"train.head()","e06acff9":"train['Family'] = train['SibSp'] + train['Parch'] + 1\ntrain['Alone'] = 0\ntrain.loc[train['Family'] == 1, 'Alone'] = 1","0546ccf0":"train.head()","2c7e4103":"train['Survived'].replace(\"Yes\", 1,inplace=True)\ntrain['Survived'].replace(\"No\", 0, inplace=True)\nsurvived = train[train['Survived'] == 1]\nnot_survived = train[train['Survived'] == 0]","1eb5f49c":"sns.barplot(x='Pclass', y='Survived', data=train, palette='RdBu_r');","212a7027":"train['Sex'].replace(\"male\", 0, inplace=True)\ntrain['Sex'].replace(\"female\", 1, inplace=True)","22651cb0":"train.head()","83a1a332":"train['Fare'] = train['Fare'].fillna(train['Fare'].median())\ntrain['FareBand'] = pd.qcut(train['Fare'], 4)\nprint (train[['FareBand', 'Survived']].groupby(['FareBand'], as_index=False).mean())","aa21642b":"train.loc[ train['Fare'] <= 7.91, 'Fare'] = 0\ntrain.loc[(train['Fare'] > 7.91) & (train['Fare'] <= 14.454), 'Fare'] = 1\ntrain.loc[(train['Fare'] > 14.454) & (train['Fare'] <= 31), 'Fare']   = 2\ntrain.loc[ train['Fare'] > 31, 'Fare'] = 3\ntrain['Fare'] = train['Fare'].astype(int)\n\ntrain.head()","ed2732f5":"train['Embarked'] = train['Embarked'].fillna('S')\ntrain['Embarked'] = train['Embarked'].map( {'S': 0, 'C': 1, 'Q': 2} ).astype(int)\ntrain.head()","7cba7821":"train = train.drop(['Name', 'SibSp', 'Parch', 'Ticket', 'Cabin', 'PassengerId', 'Age_Category', 'FareBand'], axis=1)","4f736196":"train['Age'] = train['Age'].fillna(2)\ntrain['Age'] = train['Age'].astype(int)\ntrain.head()","b0a8bbd5":"training, testing = train_test_split(train, test_size=0.2, random_state=0)","1c98ef60":"cols = ['Pclass', 'Sex', 'Age', 'Fare', 'Embarked', 'Family', 'Alone']\ntcols = np.append(['Survived'],cols)\ndf = training.loc[:,tcols].dropna()\n\nX = df.loc[:,cols]\ny = np.ravel(df.loc[:,['Survived']])\n\ndf_test = testing.loc[:,tcols].dropna()\nX_test = df_test.loc[:,cols]\ny_test = np.ravel(df_test.loc[:,['Survived']])","f650a327":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier()\nclf.fit(X, y)\ny_red_random_forest = clf.predict(X_test)\nacc_random_forest = round(clf.score(X, y)*100, 2)\nacc_random_forest","c04e87c1":"from sklearn.linear_model import LogisticRegression\nclf = LogisticRegression()\nclf.fit(X, y)\ny_pred_log_reg = clf.predict(X_test)\nacc_log_reg = round(clf.score(X, y) * 100, 2)\nacc_log_reg","773f8b33":"from sklearn.svm import SVC, LinearSVC\nclf = SVC()\nclf.fit(X, y)\ny_pred_svc = clf.predict(X_test)\nacc_linear_svc = round(clf.score(X, y) * 100, 2)\nprint (acc_linear_svc)","269508a8":"models = pd.DataFrame({\n    'Model': ['Logistic Regression', 'Linear SVC', 'Random Forest'],\n    'Score': [acc_log_reg, acc_linear_svc, acc_random_forest]})\n\nmodels.sort_values(by='Score', ascending=False)","29bee174":"#### Remove columns that don't correlate with Survival:","6ba6b1da":"### \u041b\u0438\u043d\u0435\u0439\u043d\u044b\u0439 SVM","2b967212":"### 2. Distribution by age group","17756fb9":"### \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f","45d9686a":"### 1. Distribution by gender","511b4d8a":"#### I've divided passengers into five age groups: 0-16, 16-32, 32-48, 48-64 and 64-81","ba1b6fa9":"### 5. Divide the dataset in random order into training and test in proportions (80 by 20).","42c70ed8":"### 6. I'll try different models:","58ff8a72":"### 3. Create a column \"Family\"which will store the number of family members who travel together (you need to add Parch and SibSp)","52861818":"#### I change the Survived value for clarity, now on the charts, Survived is displayed: yes or no, not 1 or 0","c3bbd67f":"#### I will replace in the Embarked column from 'S' to 0, 'C' to 1, 'Q' to 2","3ba467af":"### \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441 (random forest)","96e2bccb":"### 4. I will divide the cost of tickets into 4 categories."}}