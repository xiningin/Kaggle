{"cell_type":{"4cb565ac":"code","eaffb401":"code","a8b4abab":"code","d01cb942":"code","af4dd9c3":"code","cdcfbb79":"markdown"},"source":{"4cb565ac":"import os\nimport numpy as np \nimport pandas as pd \n\nSEED = 15\ndef all_seeds(s):\n    os.environ['PYTHONHASHSEED'] = str(s)\n    np.random.seed(s)\n    \nall_seeds(SEED)","eaffb401":"train_df = pd.read_csv('\/kaggle\/input\/casecade-cup-data-science-hackathon\/train_age_dataset.csv')\n\n#features\nx_tr = train_df\nx_tr = x_tr.drop(['age_group'],axis = 1)\n\n#labels\ny_tr = train_df[['age_group']]\n\ntest_df = pd.read_csv('\/kaggle\/input\/casecade-cup-data-science-hackathon\/test_age_dataset.csv')\n\nsample_df = pd.read_csv('\/kaggle\/input\/casecade-cup-data-science-hackathon\/sample_submission.csv')","a8b4abab":"from sklearn.metrics import classification_report\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import f1_score\nimport xgboost as xgb \n\nN_FOLDS = 5\nN_REPEAT = 2\n\ndef training(n_repeat = 1, n_folds = 5):\n    models = []\n    F1_scores = []\n    kfold = KFold(n_folds, shuffle = True)\n    \n    for fold, (train_index, test_index) in enumerate(kfold.split(x_tr), 1):\n        print('-'*85)\n        print(f'Repeat {n_repeat}, Fold {fold}')\n        \n        X_train = x_tr.values[train_index]\n        y_train = y_tr.values[train_index].ravel()\n        X_test = x_tr.values[test_index]\n        y_test = y_tr.values[test_index].ravel()\n        \n        model = xgb.XGBClassifier(n_estimators=300,\n                                  booster='gbtree',\n                                  eta=0.3,\n                                  reg_lambda=3,\n                                  max_depth=8,\n                                  min_child_weight=10,\n                                  random_state=8)\n        model.fit(X_train, y_train)\n        \n        y_pred = model.predict(X_test)\n        f1 = f1_score(y_test, y_pred, average=\"weighted\")\n        print(f'Weighted F1 score: {f1}')\n        print(classification_report(y_test, y_pred, labels=[1, 2, 3, 4]))\n        \n        models.append(model)\n        F1_scores.append(f1)\n    return models, np.mean(F1_scores)\n\nmodels = []\nmean_f1s = []\n\nfor i in range(1, N_REPEAT+1):\n    m, f = training(i, N_FOLDS)\n    print('-'*85)\n    models = models + m\n    mean_f1s.append(f)","d01cb942":"print(f\"Mean Weighted F1 score: {np.mean(mean_f1s)}\")","af4dd9c3":"from scipy import stats as s\ntest_pred = sample_df.copy()\ntest_pred.loc[:,['prediction']] = 0\n\npred = np.array([])\n\npred1=models[0].predict(test_df.values)\npred2=models[1].predict(test_df.values)\npred3=models[2].predict(test_df.values)\npred4=models[3].predict(test_df.values)\npred5=models[4].predict(test_df.values)\npred6=models[5].predict(test_df.values)\npred7=models[6].predict(test_df.values)\npred8=models[7].predict(test_df.values)\npred9=models[8].predict(test_df.values)\npred10=models[9].predict(test_df.values)\n\n\nfor i in range(0,len(test_df.values)):\n    pred = np.append(pred, s.mode([pred1[i], pred2[i], pred3[i], pred4[i], pred5[i],\n                                   pred6[i], pred7[i], pred8[i], pred9[i], pred10[i]\n                                  ])[0])\n\ntest_pred.loc[:,['prediction']] = pred.reshape(pred.shape[0],1)\ntest_pred = test_pred.astype(int)\ntest_pred.to_csv('submission.csv', index=False)\ntest_pred","cdcfbb79":"[Cascade Cup Data Science Hackathon](https:\/\/dphi.tech\/practice\/challenge\/46#problem)"}}