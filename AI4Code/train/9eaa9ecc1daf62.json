{"cell_type":{"1e814a47":"code","1cde9f47":"code","5778c84c":"code","5bab9a08":"code","6f0a5fa7":"code","d20fa05a":"code","866cc8cc":"code","e008fb5e":"code","a0125c53":"code","c55faae4":"code","6724a18d":"code","d1a29bb3":"code","a842ec29":"code","16852e56":"code","f6eb3976":"code","808c2683":"code","b1c47719":"code","1d6db30b":"code","4056eae2":"code","81deecbc":"code","d4255c90":"code","80e64ef5":"code","1a14d871":"code","8d31c2cd":"code","bf5ee35a":"code","0393892a":"code","c42def9a":"code","f0f0b3de":"code","c3b66201":"code","0f245501":"code","a8327968":"code","aee759a3":"code","eb7f5981":"code","c2e390ab":"code","ae3a853d":"markdown","1c7b595c":"markdown","a54fc9ef":"markdown","6002a12a":"markdown","bfbf53f2":"markdown","4eead799":"markdown","323fc247":"markdown","15c3a2f0":"markdown","420b0ec7":"markdown","e03d5bd2":"markdown","557166a2":"markdown","c9250707":"markdown","f029e570":"markdown","ba750c7f":"markdown","0850500c":"markdown","923375cb":"markdown","a0c7b734":"markdown"},"source":{"1e814a47":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport gc\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfpath = '\/kaggle\/input\/santa-workshop-tour-2019\/family_data.csv'\ndata = pd.read_csv(fpath, index_col='family_id')\n\nfpath = '\/kaggle\/input\/santa-workshop-tour-2019\/sample_submission.csv'\nsubmission = pd.read_csv(fpath, index_col='family_id')","1cde9f47":"family_size_dict = data[['n_people']].to_dict()['n_people']\nm,_ = data.shape \n\ncols = [f'choice_{i}' for i in range(10)]\nchoice_dict = data[cols].T.to_dict()\n\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\n# from 100 to 1\ndays = list(range(N_DAYS,0,-1))","5778c84c":"data.head()","5bab9a08":"plt.figure(figsize=(16,9))\nsns.countplot(data['n_people'])","6f0a5fa7":"plt.figure(figsize=(16,9))\nsns.distplot(data['choice_0'],bins=100,kde=False)\nplt.title('Preferred Choice of each Family')","d20fa05a":"plt.figure(figsize=(16,9))\nsns.distplot(data['choice_9'],bins=100,kde=False)\nplt.title('Least Preferred Choice for each Family')","866cc8cc":"def weekday(days):\n    weekday = []\n    for day in days:\n        if day%7==2:\n            weekday.append('Monday')\n        elif day%7==1:\n            weekday.append('Tuesday')\n        elif day%7==0:\n            weekday.append('Wednesday')\n        elif day%7==6:\n            weekday.append('Thursday')\n        elif day%7==5:\n            weekday.append('Friday')\n        elif day%7==4:\n            weekday.append('Saturday')\n        else:\n            weekday.append('Sunday')\n    return weekday\nweekday_list = [weekday(data[cols].values[i][:].tolist()) for i in range(5000)]\nweekday_list = pd.DataFrame(weekday_list,columns = ['weekday_'+cols[i] for i in range(10)])\nweekday_list","e008fb5e":"plt.figure(figsize=(16,9))\nsns.countplot(weekday_list['weekday_choice_0'],order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])","a0125c53":"plt.figure(figsize=(16,9))\nsns.countplot(weekday_list['weekday_choice_9'],order=['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'])","c55faae4":"#lets set a difficulty score per choice, 0 is weekdays, 1 is weekends, 2 is christmas eve\ndef difficulty(days):\n    dif = []\n    for day in days:\n        wd = weekday([day])\n        if day == 1 or day == 2 or day == 3:\n            dif.append(1)\n        elif wd[0]=='Monday' or wd[0]=='Tuesday' or wd[0]=='Wednesday' or wd[0]=='Thursday':\n            dif.append(0)\n        else:\n            dif.append(1)\n    return dif\n\ndif_list = [difficulty(data[cols].values[i][:].tolist()) for i in range(5000)]\ndif_list = pd.DataFrame(dif_list,columns = ['difficulty_'+cols[i] for i in range(10)])\ndif_sum = pd.DataFrame(np.sum(dif_list,axis=1),columns=['dif_sum'])\n#data = pd.concat([data,dif_sum],axis=1)\nplt.figure(figsize=(16,9))\nsns.countplot(dif_sum['dif_sum'])\nplt.title(\"Number of difficult days per family\")\nprint(\"The mean number of difficult days per family is: {}\".format(np.mean(dif_sum['dif_sum'])))\nprint(\"Standard deviation of difficult days is: {}\".format(np.std(dif_sum['dif_sum'])))","6724a18d":"family_size = list(range(2,9))\ncost_per_family_size = np.zeros((11,len(family_size)))\ndef choice_cost(n,choice):\n    if choice == 0:\n        return 0\n    elif choice == 1:\n        return 50\n    elif choice == 2:\n        return 50 + 9 * n\n    elif choice == 3:\n        return 100 + 9 * n\n    elif choice == 4:\n        return 200 + 9 * n\n    elif choice == 5:\n        return 200 + 18 * n\n    elif choice == 6:\n        return 300 + 18 * n\n    elif choice == 7:\n        return 300 + 36 * n\n    elif choice == 8:\n        return 400 + 36 * n\n    elif choice == 9:\n        return 500 + 36 * n + 199 * n\n    else:\n        return 500 + 36 * n + 398 * n\nj = 0\nfor n in family_size:  \n    for i in range(11):\n        cost_per_family_size[i,j]=choice_cost(n,i)\n    j+=1\n\ncost_per_family_size = pd.DataFrame(cost_per_family_size.T,index = [str(x)+'_people' for x in range(2,9)],columns = ['choice_'+str(x) for x in range(11)])\ncost_per_family_size['n_people']=list(range(2,9))\ncost_per_family_size","d1a29bb3":"plt.figure(figsize=(16,9))\nfor i in range(11):\n    sns.lineplot(data=cost_per_family_size,x='n_people',y='choice_'+str(i))","a842ec29":"plt.figure(figsize=(16,9))\nfor i in range(2,9):\n    sns.lineplot(data=cost_per_family_size,x='n_people',y='choice_'+str(i))","16852e56":"sorted_families = []\ndaily_occupancy={i:0 for i in range(1,101)}\nanswer = np.zeros((m,3))\nfor j in range(4):\n    for i in range(m):\n        if difficulty(data.loc[i][['choice_'+str(j)]])==[0] and i not in sorted_families and daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+data.loc[i][['n_people']][0]<300:\n            sorted_families.append(i)\n            answer[i,0]=i\n            answer[i,1]=data.loc[i][['choice_'+str(j)]]\n            answer[i,2]=j\n            daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+=data.loc[i][['n_people']][0]","f6eb3976":"def daily_plot(answer):\n    def get_daily_occupancy(answer):\n        daily_occupancy={i:0 for i in range(0,101)}\n        for i in range(m):\n            daily_occupancy[int(answer[i,1])]+=data.loc[i]['n_people']\n        return daily_occupancy\n    daily_occupancy = get_daily_occupancy(answer)\n    plt.figure(figsize=(12,7))\n    fig = sns.lineplot(x=list(range(1,101)),y=[daily_occupancy[i] for i in range(1,101)])\n    ax = plt.axes()\n    x = np.linspace(0, 100, 100)\n    y= np.linspace(125,125,100)\n    ax.plot(x, y,color='green');\n    x = np.linspace(0, 100, 100)\n    y= np.linspace(300,300,100)\n    ax.plot(x, y,color='red')\ndaily_plot(answer)","808c2683":"for j in range(4,8):\n    for i in range(m):\n        if difficulty(data.loc[i][['choice_'+str(j)]])==[0] and i not in sorted_families and daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]<125:\n            sorted_families.append(i)\n            answer[i,0]=i\n            answer[i,1]=data.loc[i][['choice_'+str(j)]]\n            answer[i,2]=j\n            daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+=data.loc[i][['n_people']][0]\ndaily_plot(answer)","b1c47719":"for j in range(4):\n    for i in range(m):\n        if (difficulty(data.loc[i][['choice_'+str(j)]])==[1] or difficulty(data.loc[i][['choice_'+str(j)]])==[2]) and i not in sorted_families and daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+data.loc[i][['n_people']][0]<300:\n            sorted_families.append(i)\n            answer[i,0]=i\n            answer[i,1]=data.loc[i][['choice_'+str(j)]]\n            answer[i,2]=j\n            daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+=data.loc[i][['n_people']][0]\ndaily_plot(answer)","1d6db30b":"del sorted_families\nfor k,v in daily_occupancy.items():\n    if v<125:\n        for j in range(4):\n            for i in range(m):\n                if daily_occupancy[data.loc[i][['choice_'+str(int(answer[i,2]))]][0]]-data.loc[i][['n_people']][0]>=125 and data.loc[i][['choice_'+str(j)]][0]==k and daily_occupancy[k]<=125:\n                    answer[i,0]=i\n                    answer[i,1]=data.loc[i][['choice_'+str(j)]]\n                    answer[i,2]=j\n                    daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+=data.loc[i][['n_people']][0]\ndaily_plot(answer)","4056eae2":"def accounting(today,yesterday):\n    return max(0, (today-125.0) \/ 400.0 * today**(0.5 + abs(today-yesterday) \/ 50.0))\nacc_matrix = np.zeros((301,301))\nfor i, x in enumerate(range(1,300+1)):\n    for j, y in enumerate(range(1,300+1)):\n        acc_matrix[i,j] = np.log10(accounting(x,y))\n        \nplt.figure(figsize=(10,10))\nplt.imshow(np.clip(acc_matrix, 0, 4000))\nplt.xlim(125,300)\nplt.ylim(125,300)\nplt.title('log10(Accounting Cost)')\nplt.colorbar()","81deecbc":"'''Original Code from https:\/\/www.kaggle.com\/nickel\/santa-s-2019-fast-pythonic-cost-23-s thanks to Rafael Crescenzi'''\nimport numpy as np\nimport pandas as pd\nfrom numba import njit, prange\n\nfamily_size = data.n_people.values.astype(np.int8)\n\npenalties = np.asarray([\n    [\n        0,\n        50,\n        50 + 9 * n,\n        100 + 9 * n,\n        200 + 9 * n,\n        200 + 18 * n,\n        300 + 18 * n,\n        300 + 36 * n,\n        400 + 36 * n,\n        500 + 36 * n + 199 * n,\n        500 + 36 * n + 398 * n\n    ] for n in range(family_size.max() + 1)\n])\nfamily_cost_matrix = np.concatenate(data.n_people.apply(lambda n: np.repeat(penalties[n, 10], 100).reshape(1, 100)))\nfor fam in data.index:\n    for choice_order, day in enumerate(data.loc[fam].drop(\"n_people\")):\n        family_cost_matrix[fam, day - 1] = penalties[data.loc[fam, \"n_people\"], choice_order]\naccounting_cost_matrix = np.zeros((500, 500))\nfor n in range(accounting_cost_matrix.shape[0]):\n    for diff in range(accounting_cost_matrix.shape[1]):\n        accounting_cost_matrix[n, diff] = max(0, (n - 125.0) \/ 400.0 * n**(0.5 + diff \/ 50.0))","d4255c90":"@njit(fastmath=True)\ndef cost_function(prediction, family_size, family_cost_matrix, accounting_cost_matrix):\n    N_DAYS = family_cost_matrix.shape[1]\n    MAX_OCCUPANCY = 300\n    MIN_OCCUPANCY = 125\n    penalty = 0\n    daily_occupancy = np.zeros(N_DAYS + 1, dtype=np.int16)\n    for i, (pred, n) in enumerate(zip(prediction, family_size)):\n        daily_occupancy[pred - 1] += n\n        penalty += family_cost_matrix[i, pred - 1]\n\n    accounting_cost = 0\n    n_low = 0\n    n_high = 0\n    daily_occupancy[-1] = daily_occupancy[-2]\n    for day in range(N_DAYS):\n        n_next = daily_occupancy[day + 1]\n        n = daily_occupancy[day]\n        n_high += (n > MAX_OCCUPANCY) \n        n_low += (n < MIN_OCCUPANCY)\n        diff = abs(n - n_next)\n        accounting_cost += accounting_cost_matrix[n, diff]\n\n    return np.asarray([penalty, accounting_cost, n_low, n_high])","80e64ef5":"def get_cost_consolidated(prediction): \n    fc, ac, l, h = cost_function(prediction, family_size, family_cost_matrix, accounting_cost_matrix)\n    return (fc + ac) + (l + h) * 10000000\nprint(get_cost_consolidated(answer[:,1].astype(np.int8)))","1a14d871":"acc_day100 = np.zeros((300,1))\nfor i, x in enumerate(range(1,300+1)):\n    acc_day100[i] = accounting(x,x)\nplt.figure(figsize=(10,10))\nsns.lineplot(x=[i for i in range(1,301)],y=acc_day100[:,0])\nplt.title('Accounting Cost for day 100')\nplt.xlim(125,300)","8d31c2cd":"n = 0\nfor i in range(m):\n    n+=data.loc[i][['n_people']][0]\nprint(str(n)+\" total people to visit Santa\")","bf5ee35a":"sorted_families = {i:0 for i in range(m)}\ndaily_occupancy={i:0 for i in range(1,101)}\nanswer = np.zeros((m,2))\nprev_day = 125\ndiff = 1\nfactor = 7\nfor day in days:\n    for choice in range(4):\n        for i in range(m):\n            if data.loc[i][['choice_'+str(choice)]][0]==day and sorted_families[i]==0:\n                if daily_occupancy[day]+data.loc[i][['n_people']][0]<=300:\n                    if daily_occupancy[day]-prev_day<diff and daily_occupancy[day]-prev_day<diff*factor:\n                        sorted_families[i]=1\n                        answer[i,0]=i\n                        answer[i,1]=day\n                        daily_occupancy[day]+=data.loc[i][['n_people']][0]\n                    elif daily_occupancy[day]<125:\n                        sorted_families[i]=1\n                        answer[i,0]=i\n                        answer[i,1]=day\n                        daily_occupancy[day]+=data.loc[i][['n_people']][0]\n    prev_day = daily_occupancy[day]\ndaily_plot(answer)","0393892a":"diff_normalizer = 1\ndiff = 2\ncount=sum([sorted_families[i]==1 for i in range(m)])\nwhile count<m:\n    daily_occupancy[101]=daily_occupancy[100]\n    for j in range(9):\n        for i in range(m):\n            daily_occupancy[101]=daily_occupancy[100]\n            if sorted_families[i]==0:\n                if daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+data.loc[i][['n_people']][0]<=300:\n                    if abs(daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]-daily_occupancy[data.loc[i][['choice_'+str(j)]][0]+1])<diff_normalizer*diff:\n                        sorted_families[i]=1\n                        answer[i,0]=i\n                        answer[i,1]=data.loc[i][['choice_'+str(j)]]\n                        daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+=data.loc[i][['n_people']][0]\n                    elif daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]<125:\n                        sorted_families[i]=1\n                        answer[i,0]=i\n                        answer[i,1]=data.loc[i][['choice_'+str(j)]]\n                        daily_occupancy[data.loc[i][['choice_'+str(j)]][0]]+=data.loc[i][['n_people']][0]\n    count=sum([sorted_families[i]==1 for i in range(m)])\n    print(\"{}# iteration -> {} families sorted with a combined cost of {}\".format(diff_normalizer,count,get_cost_consolidated(answer[:,1].astype(np.int8))))\n    diff_normalizer+=1\ndaily_plot(answer)","c42def9a":"def optimize(answer,n_iter=100,verbose=5,print_ = False,rd_seed=23):\n    import random\n    try:\n        new_answer=answer[:,1].copy()\n        best_score = get_cost_consolidated(new_answer[:].astype(np.int8))\n    except IndexError:\n        new_answer=answer.copy()\n        best_score = get_cost_consolidated(new_answer[:].astype(np.int8))\n    if print_:\n        print('Start score: {}'.format(best_score))\n    start_score = best_score\n    random.seed(rd_seed)\n    family_list = list(range(m))\n    for n in range(n_iter):\n        random.shuffle(days)\n        random.shuffle(family_list)\n        for day in days:\n            for i in family_list:\n                aux = new_answer[i]\n                new_answer[i]=day\n                new_score = get_cost_consolidated(new_answer[:].astype(np.int8))\n                if new_score<=best_score:\n                    try:\n                        answer[i,1]=day\n                    except:\n                        answer[i]=day\n                    best_score = new_score\n                else:\n                    new_answer[i]=aux\n        if not best_score == start_score:\n            start_score = best_score\n        else:\n            print(\"{}# early stopping best score: {}\".format(n+1,best_score))\n            break\n        if (n+1)%verbose==0 and print_:\n            print(\"{}# best score: {}\".format(n+1,best_score))\n    return answer","f0f0b3de":"def find_seed(answer):\n    start_answer = answer.copy()\n    best_score = get_cost_consolidated(answer[:,1].astype(np.int8))\n    best = 0\n    for i in range(1000):\n        new_answer = optimize(start_answer[:,1].copy(),n_iter=2000,verbose=5,print_=False,rd_seed = i)\n        new_score = get_cost_consolidated(new_answer[:].astype(np.int8))\n        if new_score<best_score:\n            best_score = new_score\n            best = i\n            print(best)\n    return best","c3b66201":"answer = optimize(answer,n_iter=2000,verbose=5,print_=True,rd_seed=23)","0f245501":"daily_plot(answer)\nget_cost_consolidated(answer[:,1].astype(np.int8))","a8327968":"'''Original code from : https:\/\/www.kaggle.com\/xhlulu\/santa-s-2019-stochastic-product-search'''\nfrom itertools import product\nfrom tqdm.notebook import tqdm\nchoice_matrix = data.loc[:, 'choice_0': 'choice_9'].values\ndef stochastic_product_search(top_k, fam_size, original, choice_matrix, \n                              disable_tqdm=False, verbose=10000,\n                              n_iter=500, random_state=2019):\n    \"\"\"\n    original (np.array): The original day assignments.\n    \n    At every iterations, randomly sample fam_size families. Then, given their top_k\n    choices, compute the Cartesian product of the families' choices, and compute the\n    score for each of those top_k^fam_size products.\n    \"\"\"\n    \n    best = original.copy()\n    best_score = get_cost_consolidated(best)\n    \n    np.random.seed(random_state)\n\n    for i in tqdm(range(n_iter), disable=disable_tqdm):\n        fam_indices = np.random.choice(range(choice_matrix.shape[0]), size=fam_size)\n        changes = np.array(list(product(*choice_matrix[fam_indices, :top_k].tolist())))\n\n        for change in changes:\n            new = best.copy()\n            new[fam_indices] = change\n\n            new_score = get_cost_consolidated(new)\n\n            if new_score < best_score:\n                best_score = new_score\n                best = new\n        \n        if new_score < best_score:\n            best_score = new_score\n            best = new\n    \n        if verbose and i % verbose == 0:\n            print(f\"Iteration #{i}: Best score is {best_score:.2f}\")\n    \n    print(f\"Final best score is {best_score:.2f}\")\n    return best\n\nfinal = stochastic_product_search(\n        top_k=4,\n        fam_size=3, \n        original=answer[:,1].astype(np.int8),\n        choice_matrix = choice_matrix,\n        disable_tqdm = False,\n        n_iter=1000000,\n        verbose=50000,\n        )","aee759a3":"aux = np.zeros((m,2))\naux[:,1]=final\nfinal = stochastic_product_search(\n        top_k=4,\n        fam_size=5, \n        original=final.astype(np.int8),\n        choice_matrix = choice_matrix,\n        disable_tqdm = False,\n        n_iter=250000,\n        verbose=5000,\n        )\ndaily_plot(aux)","eb7f5981":"final = stochastic_product_search(\n        top_k=3,\n        fam_size=8, \n        original=final.astype(np.int8),\n        choice_matrix = choice_matrix,\n        disable_tqdm = False,\n        n_iter=40000,\n        verbose=5000,\n        )\naux = np.zeros((m,2))\naux[:,1]=final\ndaily_plot(aux)","c2e390ab":"prediction = pd.Series(final.astype(np.int8), name=\"assigned_day\")\nprediction.index.name = \"family_id\"\nprediction.to_csv(\"submission.csv\", index=True, header=True)","ae3a853d":"**Each family has 10 main choices, which each choice is a day in the 100 day period they want to visit Santa, the higher tiers of preference for a certain day, the more we pay, so we are trying to optimize the most prefered choice we can give each family as to minimize costs. **","1c7b595c":"After weekend choice initialization, there's only 3 points below 125 participants, let's run a quick unoptimized swap just to get a baseline.\nWe need to start thinking about swaps because all families are sorted.","a54fc9ef":"**Santa's Workshop Kaggle Competition**\nThis competition is a scheduling optimization challenge where you have two major factors to consider:\n1. The preferred day for a family to visit has costs associated to it. Where the costs are as follows:\n    * choice_0: no consolation gifts\n    * choice_1: one 50 gift card to Santa's Gift Shop\n    * choice_2: one 50 gift card, and 25% off Santa's Buffet (value 9) for each family member\n    * choice_3: one 100 gift card, and 25% off Santa's Buffet (value 9) for each family member\n    * choice_4: one 200 gift card, and 25% off Santa's Buffet (value 9) for each family member\n    * choice_5: one 200 gift card, and 50% off Santa's Buffet (value 18) for each family member\n    * choice_6: one 300 gift card, and 50% off Santa's Buffet (value 18) for each family member\n    * choice_7: one 300 gift card, and free Santa's Buffet (value 36) for each family member\n    * choice_8: one 400 gift card, and free Santa's Buffet (value 36) for each family member\n    * choice_9: one 500 gift card, and free Santa's Buffet (value 36) for each family member, and 50% off North Pole Helicopter Ride tickets (value 199) for each family member\n    * otherwise: one 500 gift card, and free Santa's Buffet (value 36) for each family member, and free North Pole Helicopter Ride tickets (value 398) for each family member\n2. The daily occupancy from a previous day affects the next day's costs. By the following equation:\n![image.png](attachment:image.png)\n","6002a12a":"**This is a feature made to visualize how much families prefer weekends and days near christmas over weekdays.**\nWe show here that for 10 choices, on average, 7 of them are either near christmas or on the weekends (fridays, saturdays and sundays).\nThe choice between weekends and weekdays seem to follow a normal distribution with a mean of 7.2 and standard deviation of 1.4.","bfbf53f2":"Now every family is initialized by their preferred choice, going for weekdays first.\n\nWe can see that the value for each days attendance heavily fluctuates, which is really bad for the accounting cost, let's check that now.","4eead799":"We see now that even when trying to optimize based on choice is not enough even for a modest solution, we need to also take into account the previous days attendance.\n\nLet's try and redo the sorting taking into account a simple fitting function. We need to know the maximum cost for day 100 as it is the only day which is independant from the others.","323fc247":"Every weekday is now initialized between 125 and 300 persons per day, now let's try and do the same with the weekends.","15c3a2f0":"We need to make sure that the transition between days is as smooth as possible.\n\nLet's do a second run looping over less preferable choices to try and get every family sorted.","420b0ec7":"No choice overlaps family size, indicating that no matter the family size it's always better to prioritize choice over family size, and within the same choice category, prioritise family size.","e03d5bd2":"More to come!\nPlease leave a comment as i am learning.\n\nNext steps are:\n-Implement the stochastic sorting algorithm\n\nIf you liked the insights please upvote :)","557166a2":"We should definitely avoid choices 9 and no choices since they grow really quickly with family size.","c9250707":"We can probably initiate day 100 to any attendance since the maximum accounting cost is a little over 7. \n\nWe then could solve the next day establishing a maximum difference from the previous days.\n\nWe previously had a for loop over choice, let's try now doing a for loop for each day in sequence, and a while loop inside for each choice up until this difference criteria is met.","f029e570":"**All choices seem to follow the same distribution, the takeaways are:**\n*     Friday\/Saturday\/Sunday are busier overall\n*     Weekdays, even the ones near christmas, have lower preference overall.","ba750c7f":"**There are certain choices that we need to make that take into account the number of people, this will be further explored later**","0850500c":"After a simple greedy initialization of the four most preferred choices we have the graph above, indicating that just simply favouring those four main choices are not enough to comply with the minimum of 125 people on weekdays. Let's try now to correct the few points which are below the green line.","923375cb":"**You probably gain a lot from prioritizing choices in the weekdays Mon-Thu since most people's other choices are in the weekends**\n\nTuesday seems higher than it is because it is also christmas eve, which is the day with higher preference overall.\n\nIf you initialize your guess by getting the minimum ammount of people in each weekday with the minimum possible cost, the weekends should be easy enough to optimize.","a0c7b734":"Besides giving everyone their preferred choice, the above graph indicates that accounting costs rise exponentially with the difference between two consecutive days attendance."}}