{"cell_type":{"533d3a0d":"code","a91927e3":"code","81f129a9":"code","f3098b18":"code","8db11dfe":"code","fd4b1fe2":"code","cc71aad9":"code","db2baac8":"code","1908d7b8":"code","aac6b1ce":"code","afefd5e8":"code","7e3fd063":"code","6e849258":"code","19bf3df1":"code","dff51c33":"code","38c8e96c":"code","83f014c7":"code","a77ec181":"code","54107f8d":"code","72891fc8":"code","b0ea9109":"code","b0575a70":"code","f90a6f0d":"code","64f36aab":"code","f7f482d2":"code","43d7d92e":"code","4565cd4d":"code","9400e7b2":"code","d272befd":"code","6e214e65":"code","4c915e8b":"code","76c7ee54":"code","9deec2b5":"code","7e94a93e":"code","9e34dd26":"code","1b209050":"code","82b5611f":"code","683bf1c9":"code","ce46d43e":"code","25463390":"code","d49d9fa9":"code","0e9379bc":"code","ccfe8ea4":"code","8be22d7c":"code","cdb5a98b":"code","153b8470":"code","471bcea8":"code","0de4142f":"code","4acd6b03":"code","ef360dad":"code","03b60cd4":"code","5f2d2482":"code","b237f8be":"code","cf8bfb18":"code","7ca0161b":"code","3d6b8b16":"code","dd619c51":"code","afa196e6":"code","d410e4f3":"code","78f2cd08":"code","8b38d53b":"code","2ff30fdb":"code","684c406c":"code","8120da38":"code","7e90b5dd":"code","463b3117":"code","561f4605":"code","e12e22c5":"code","15f43591":"code","a8f1d5a5":"code","7f0f9255":"code","7b12aa76":"code","e149fed6":"code","2d5c1a59":"code","2e1e6ddc":"code","60bfda02":"code","b1465b8b":"code","96abcc52":"code","346d20fb":"code","d6f6ade3":"code","1b2d0cbb":"code","43f73ddd":"code","9b965b84":"code","1bc98a4f":"code","54311be5":"code","d2815675":"code","811ca66d":"code","0faf3f3d":"code","debca283":"code","6afe0fdb":"code","021acedc":"code","d1b82eeb":"code","a05f331f":"code","2a72875b":"code","c0e0491f":"code","37f8fb16":"code","533c2aa9":"code","64464494":"code","95eac0ef":"code","3d5f7683":"code","9e2c1eac":"code","65aea93b":"code","f91ea697":"code","8a25982e":"code","4ff33cca":"code","5557ff31":"code","1ede1cbc":"code","0977d2c7":"code","98d79b48":"code","00e447d3":"code","7d4dffa7":"code","4e8697d4":"code","27724616":"code","7b0a8c3e":"code","cb278ffd":"code","8477b200":"code","a0e353d3":"code","81f09fdf":"code","abeffbb6":"code","87838ddf":"code","8068c1f6":"code","c1c10824":"code","1e3fed29":"code","7f837a90":"code","73854494":"code","0e8210f0":"code","3dc278ef":"code","a5d90335":"code","9bc43fc9":"code","d3908028":"code","1d16015e":"code","d5522c78":"code","c51e38f3":"code","aedc3a50":"code","65fb5de6":"code","a95e8b96":"code","26baa30e":"code","437f2f21":"code","fa60824a":"code","4da2a407":"code","a5e855b4":"markdown","b675ab7a":"markdown","7b068604":"markdown","b2ce0069":"markdown","58a094cd":"markdown","b60718ec":"markdown","feec80f5":"markdown","d1021446":"markdown","026ee5f0":"markdown","59005aa8":"markdown","ef9343b4":"markdown","87c4236c":"markdown","e97ad539":"markdown","9c902fe3":"markdown","e309d469":"markdown","e48255c0":"markdown","c5055d5c":"markdown","92f5cf19":"markdown","2eb27717":"markdown","aaaaa813":"markdown","b73f7352":"markdown","6d41af52":"markdown","e2cc6420":"markdown","49818adc":"markdown","fdbe9f89":"markdown","e36f5907":"markdown","33afb8b4":"markdown","731696e3":"markdown","132fb98a":"markdown","863d02d7":"markdown","49a9e9aa":"markdown","8bf0aad7":"markdown","5e5de59c":"markdown","2aae57aa":"markdown","7def48dd":"markdown"},"source":{"533d3a0d":"import warnings\nwarnings.simplefilter('ignore')","a91927e3":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a:\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split, learning_curve\n\n# \u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0438\u0437\u0430\u0446\u0438\u0438 (\u043a\u0430\u043a\u0438\u0435 \u043d\u0430\u0448\u0435\u043b)\n\nfrom sklearn.linear_model import LogisticRegression, LogisticRegressionCV\nfrom sklearn.neighbors import KNeighborsClassifier\nimport xgboost as xgb, lightgbm as lgbm, catboost as catb\nfrom sklearn.model_selection import KFold, StratifiedKFold, GridSearchCV, RandomizedSearchCV\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import VotingClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import BaggingClassifier\n\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 F1:\nfrom sklearn.metrics import classification_report, f1_score, precision_score, recall_score\n\n# \u0434\u043b\u044f \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0438\nfrom scipy.stats import chi2_contingency\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom scipy.stats import shapiro\nfrom scipy.stats import mannwhitneyu\nfrom scipy.stats import probplot","81f129a9":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043d\u0430\u0431\u043e\u0440\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445:\n\n# df = pd.read_csv('course_project_train.csv')\n# df_test = pd.read_csv('course_project_test.csv')\n\ndf = pd.read_csv('\/kaggle\/input\/654pds2courseproject\/course_project_train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/654pds2courseproject\/course_project_test.csv')","f3098b18":"# \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0432 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u043d\u0430\u0431\u043e\u0440 \u043d\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435 ID\n\ndf['ID'] = df.index.tolist()","8db11dfe":"df.head()","fd4b1fe2":"df.shape","cc71aad9":"df.info()","db2baac8":"df.describe().T","1908d7b8":"len(df) - df.count()","aac6b1ce":"len(df_test) - df_test.count()","afefd5e8":"# \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043c\u0436\u0434\u0443 \u0434\u0432\u0443\u043c\u044f \u0433\u0440\u0443\u043f\u043f\u0430\u043c\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0432 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430. \n# \u0435\u0441\u043b\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 0.05 - \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0442\u044c \u0432 \u043e\u0434\u0438\u043d\ndef corr_(val, x1, x2):\n    pay1_and_target_s = df.loc[df[val].isin([x1, x2]), ['ID', val, 'Credit Default']]#.sample(1000)\n    table = pay1_and_target_s.pivot_table(values='ID', index=val, columns='Credit Default', aggfunc='count')\n    chi2, p, dof, expected = chi2_contingency(table, correction=False)\n    print(p)\n    \n    \n# \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0432 \u0447\u0438\u0442\u0435\u0430\u043c\u043e\u043c \u0432\u0438\u0434\u0435\ndef get_classification_report(y_train_true, y_train_pred, y_test_true, y_test_pred):\n    print('TRAIN\\n\\n' + classification_report(y_train_true, y_train_pred))\n    print('TEST\\n\\n' + classification_report(y_test_true, y_test_pred))\n    print('CONFUSION MATRIX\\n')\n    print(pd.crosstab(y_test_true, y_test_pred))\n    \n    \ndef mis_values_report(df):\n    '''\u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0430'''\n    mis_val = df.isnull().sum()\n    perc_mis_val = 100 * df.isnull().sum() \/ len(df)\n    report = pd.concat([mis_val, perc_mis_val], axis=1)\n    report_columns = report.rename(columns = {0: '\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f', 1: '% \u043e\u0442 \u0432\u0441\u0435\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439'})\n    report_columns = report_columns[report_columns.iloc[:,1] != 0].sort_values('% \u043e\u0442 \u0432\u0441\u0435\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439', ascending=False).round(1)\n    print('\u0414\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c \u0438\u043c\u0435\u0435\u0442 ' + str(df.shape[1]) + ' \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432.\\n' + str(report_columns.shape[0]) + ' \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f')\n    return report_columns\n\n\ndef hist_qq(target_name):\n    plt.figure(figsize=(20,8))\n\n    ax1 = plt.subplot(121)\n    ax1.set_xlabel(target_name)\n    ax1.set_ylabel('Count')\n    ax1.set_title(f'{target_name} distribution')\n    df[target_name].hist()\n    plt.subplot(122)\n    probplot(df[target_name],dist='norm',plot=plt)\n\n    plt.show()\n    \n\n# # \u0431\u0430\u043b\u0430\u043d\u0441\u0435\u0440\u043e\u0432\u043a\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n# def balance_df_by_target(df, target_name):\n\n#     target_counts = df[target_name].value_counts()\n\n#     major_class_name = target_counts.argmax()\n#     minor_class_name = target_counts.argmin()\n\n#     disbalance_coeff = int(target_counts[major_class_name] \/ target_counts[minor_class_name]) - 1\n\n#     for i in range(disbalance_coeff):\n#         sample = df[df[target_name] == minor_class_name].sample(target_counts[minor_class_name])\n#         df = df.append(sample, ignore_index=True)\n\n#     return df.sample(frac=1) \n\n# \u0431\u0430\u043b\u0430\u043d\u0441\u0435\u0440\u043e\u0432\u043a\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0423\u041b\u0423\u0427\u0428\u0415\u041d\u041d\u0410\u042f\ndef balance_df_by_target(df, target_name, method='over'):\n\n    assert method in ['over', 'under', 'tomek', 'smote'], '\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u043c\u0435\u0442\u043e\u0434 \u0441\u044d\u043c\u043f\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f'\n    \n    target_counts = df[target_name].value_counts()\n\n    major_class_name = target_counts.argmax()\n    minor_class_name = target_counts.argmin()\n\n    disbalance_coeff = int(target_counts[major_class_name] \/ target_counts[minor_class_name]) - 1\n    if method == 'over':\n        for i in range(disbalance_coeff):\n            sample = df[df[target_name] == minor_class_name].sample(target_counts[minor_class_name])\n            df = df.append(sample, ignore_index=True)\n            \n    elif method == 'under':\n        df_ = df.copy()\n        df = df_[df_[target_name] == minor_class_name]\n        tmp = df_[df_[target_name] == major_class_name]\n        df = df.append(tmp.iloc[\n            np.random.randint(0, tmp.shape[0], target_counts[minor_class_name])\n        ], ignore_index=True)\n\n    elif method == 'tomek':\n        from imblearn.under_sampling import TomekLinks\n        tl = TomekLinks()\n        X_tomek, y_tomek = tl.fit_sample(df.drop(columns=target_name), df[target_name])\n        df = pd.concat([X_tomek, y_tomek], axis=1)\n    \n    elif method == 'smote':\n        from imblearn.over_sampling import SMOTE\n        smote = SMOTE()\n        X_smote, y_smote = smote.fit_sample(df.drop(columns=target_name), df[target_name])\n        df = pd.concat([X_smote, y_smote], axis=1)\n\n    return df.sample(frac=1) ","7e3fd063":"mis_values_report(df)","6e849258":"df['Home Ownership'].value_counts()","19bf3df1":"sns.countplot(x=\"Home Ownership\", hue='Credit Default', data=df)\nplt.show()","dff51c33":"df = pd.concat([df, pd.get_dummies(df['Home Ownership'], prefix='Home Ownership')], axis=1)\ndf_test = pd.concat([df_test, pd.get_dummies(df_test['Home Ownership'], prefix='Home Ownership')], axis=1)","38c8e96c":"df['Annual Income'].describe()","83f014c7":"hist_qq('Annual Income')","a77ec181":"# df.loc[df['Annual Income'].isnull(), 'Annual Income'] = 0\n# df_test.loc[df_test['Annual Income'].isnull(), 'Annual Income'] = 0","54107f8d":"# df.loc[(df['Annual Income'] > df['Annual Income'].quantile(.95)), :].shape","72891fc8":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 'Annual Income'\n\nFEATURE_NAMES = df.columns.drop('Annual Income').tolist()\ncorr_Annual_Income = df[FEATURE_NAMES + ['Annual Income']].corr().iloc[:-1, -1]\ncorr_Annual_Income = np.abs(corr_Annual_Income).sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_Annual_Income.values, y=corr_Annual_Income.index)\n\nplt.title('Correlation')\nplt.show()","b0ea9109":"# \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c 7 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (8-\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u0430\u043c \u0438\u043c\u0435\u0435\u0442 \u043c\u043d\u043e\u0433\u043e null)\nTARGET_FEATURE = list(corr_Annual_Income.index[0:6])","b0575a70":"# \u043e\u0442\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\ndata = df.loc[(df['Annual Income'].notnull()), TARGET_FEATURE + ['Annual Income']]#.sample(2000)\ndata","f90a6f0d":"data.info()","64f36aab":"%%time\n\n# \u0443\u0447\u0438\u043c\u0441\u044f \u043d\u0430 \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\n\nmodel_Annual_Income = LogisticRegression()\nmodel_Annual_Income.fit(data[TARGET_FEATURE], data['Annual Income'])","f7f482d2":"# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\n\ndf.loc[(df['Annual Income'].isnull()), ['Annual Income']] =\\\nmodel_Annual_Income.predict(df.loc[(df['Annual Income'].isnull()), TARGET_FEATURE])\n\ndf_test.loc[(df_test['Annual Income'].isnull()), ['Annual Income']] =\\\nmodel_Annual_Income.predict(df_test.loc[(df_test['Annual Income'].isnull()), TARGET_FEATURE])","43d7d92e":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\n\nshapiro(df['Annual Income'])","4565cd4d":"hist_qq('Annual Income')","9400e7b2":"Annual_Income_with_target_s = df[['Annual Income', 'Credit Default']]#.sample(1000)\nAnnual_Income_target_0 = df.loc[df['Credit Default'] == 0, ['Annual Income']]\nAnnual_Income_target_1 = df.loc[df['Credit Default'] == 1, ['Annual Income']]","d272befd":"mannwhitneyu(Annual_Income_target_0, Annual_Income_target_1)","6e214e65":"plt.figure(figsize=(8,5))\n\nsns.pointplot(x='Credit Default', y='Annual Income', data=Annual_Income_with_target_s, capsize=.1)\nplt.title('Confidence intervals (95 %) for Annual Income')\n\nplt.show()","4c915e8b":"hist_qq('Annual Income')","76c7ee54":"# \u043e\u0431\u0440\u0435\u0437\u0430\u0435\u043c \u0445\u0432\u043e\u0441\u0442\n\ndf.loc[df['Annual Income'] > df['Annual Income'].quantile(.99), ['Annual Income']] =\\\n            df['Annual Income'].quantile(.99)  #df['Annual Income'].median()\n\ndf_test.loc[df_test['Annual Income'] > df_test['Annual Income'].quantile(.99), ['Annual Income']] = \\\n            df_test['Annual Income'].quantile(.99) #df_test['Annual Income'].median()","9deec2b5":"hist_qq('Annual Income')","7e94a93e":"df['Years in current job'].value_counts()","9e34dd26":"sns.countplot(x=\"Years in current job\", data=df)\nplt.show()","1b209050":"# \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043e\u0442 \u0441\u0442\u0430\u0436\u0430 \u043d\u0430 \u043c\u0435\u0441\u0442\u0435\nsns.set(style='darkgrid')\nplt.figure(figsize=(10,6))\nsns.countplot(df['Years in current job'], order = df['Years in current job'].value_counts().index)","82b5611f":"df['Years in current job'] = df['Years in current job'].map({\n                                                            '10+ years':'10', \n                                                            '9 years':'9',\n                                                            '8 years':'8',\n                                                            '7 years':'7',\n                                                            '6 years':'6',\n                                                            '5 years':'5',\n                                                            '4 years':'4',\n                                                            '3 years':'3',\n                                                            '2 years':'2',\n                                                            '1 year':'1',\n                                                            '< 1 year':'0'\n                                                            }).astype(float)\n\ndf.loc[df['Years in current job'].isnull(), 'Years in current job'] = 11\n\n\n\ndf_test['Years in current job'] = df_test['Years in current job'].map({\n                                                            '10+ years':'10', \n                                                            '9 years':'9',\n                                                            '8 years':'8',\n                                                            '7 years':'7',\n                                                            '6 years':'6',\n                                                            '5 years':'5',\n                                                            '4 years':'4',\n                                                            '3 years':'3',\n                                                            '2 years':'2',\n                                                            '1 year':'1',\n                                                            '< 1 year':'0'\n                                                            }).astype(float)\n\ndf_test.loc[df_test['Years in current job'].isnull(), 'Years in current job'] = 11","683bf1c9":"sns.countplot(x=\"Years in current job\", hue='Credit Default', data=df)\nplt.show()","ce46d43e":"plt.figure(figsize=(10, 8))\nsns.pointplot(x='Years in current job', y='Credit Default', data=df, capsize=.1,);","25463390":"df['Tax Liens'].value_counts()","d49d9fa9":"df['Number of Open Accounts'].describe()","0e9379bc":"hist_qq('Number of Open Accounts')","ccfe8ea4":"df.loc[(df['Number of Open Accounts'] > df['Number of Open Accounts'].quantile(.95)), :].shape","8be22d7c":"df.loc[df['Number of Open Accounts'] > df['Number of Open Accounts'].quantile(.95), ['Number of Open Accounts']] =\\\n            df['Number of Open Accounts'].median()\n\ndf_test.loc[df_test['Number of Open Accounts'] > df_test['Number of Open Accounts'].quantile(.95),  \\\n            ['Number of Open Accounts']] = df_test['Number of Open Accounts'].median()","cdb5a98b":"hist_qq('Number of Open Accounts')","153b8470":"df['Years of Credit History'].value_counts()","471bcea8":"df['Years of Credit History'].hist()","0de4142f":"# 40 \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 - \u044d\u0442\u043e \u0443\u0436\u0435 \u043c\u043d\u043e\u0433\u043e\n# \u0432\u0441\u0435, \u0447\u0442\u043e \u0431\u043e\u043b\u044c\u0448\u0435 40 - \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 40\n\ndf.loc[df['Years of Credit History'] > 40, ['Years of Credit History']] = 40\n\ndf_test.loc[df_test['Years of Credit History'] > 40, ['Years of Credit History']] = 40","4acd6b03":"df['Years of Credit History'].hist()","ef360dad":"df['Maximum Open Credit'].describe()","03b60cd4":"hist_qq('Maximum Open Credit')","5f2d2482":"# df.loc[(df['Maximum Open Credit'] > df['Maximum Open Credit'].quantile(.95)), :].shape","b237f8be":"df.loc[df['Maximum Open Credit'] > df['Maximum Open Credit'].quantile(.95), ['Maximum Open Credit']] =\\\n            df['Maximum Open Credit'].quantile(.95)\n\ndf_test.loc[df_test['Maximum Open Credit'] > df_test['Maximum Open Credit'].quantile(.95), ['Maximum Open Credit']] =\\\n            df_test['Maximum Open Credit'].quantile(.95)","cf8bfb18":"hist_qq('Maximum Open Credit')","7ca0161b":"df['Number of Credit Problems'].value_counts()","3d6b8b16":"df['Bankruptcies'].value_counts()","dd619c51":"df.loc[df['Bankruptcies'].isnull(), 'Bankruptcies'] = 0\ndf_test.loc[df_test['Bankruptcies'].isnull(), 'Bankruptcies'] = 0","afa196e6":"# df['Months since last delinquent'].describe()","d410e4f3":"hist_qq('Months since last delinquent')","78f2cd08":"df['Months since last delinquent NULL'] = df['Months since last delinquent'].isnull()\ndf.loc[df['Months since last delinquent'].isnull(), 'Months since last delinquent'] = 0\n# df['Months since last delinquent'].fillna(0, inplace=True)\n\ndf_test['Months since last delinquent NULL'] = df_test['Months since last delinquent'].isnull()\ndf_test.loc[df_test['Months since last delinquent'].isnull(), 'Months since last delinquent'] = 0","8b38d53b":"df['Purpose'].value_counts()","2ff30fdb":"df_test['Purpose'].value_counts()","684c406c":"df['Purpose'].value_counts().sort_values(ascending=True).plot(kind='barh', title='Purpose', figsize=(10,6))","8120da38":"purpose_cr_deafult = df[['Purpose','Credit Default']]\npd.crosstab(purpose_cr_deafult['Purpose'], purpose_cr_deafult['Credit Default']).plot \\\n(kind='bar', stacked=True, figsize=(10,6), title=\"Purpose \/ Credit Default\", )","7e90b5dd":"plt.figure(figsize=(10, 8))\nsns.pointplot(x='Purpose', y='Credit Default', data=df, capsize=.1,);","463b3117":"# df = pd.concat([df, pd.get_dummies(df['Purpose'], prefix='Purpose')], axis=1)\n# df_test = pd.concat([df_test, pd.get_dummies(df_test['Purpose'], prefix='Purpose')], axis=1)","561f4605":"# \u043f\u043e \u0433\u0440\u0430\u0444\u0438\u043a\u0443 \u0432\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u043d\u0430 4 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438\n\ndf['Purpose'] = df['Purpose'].map({\n                                'debt consolidation':'0', \n                                'other':'0',\n                                'home improvements':'0',\n                                'business loan':'1',\n                                'buy a car':'0',\n                                'medical bills':'0',\n                                'major purchase':'0',\n                                'take a trip':'0',\n                                'buy house':'0',\n                                'small business':'2',\n                                'wedding':'0',\n                                'moving':'0',\n                                'educational expenses':'3',\n                                'vacation':'0',\n                                'renewable energy':'0'\n                                }).astype(float)","e12e22c5":"# sns.countplot(x=\"Purpose\", hue='Credit Default', data=df)\n# plt.show()","15f43591":"df_test['Purpose'] = df_test['Purpose'].map({\n                                'debt consolidation':'0', \n                                'other':'0',\n                                'home improvements':'0',\n                                'business loan':'1',\n                                'buy a car':'0',\n                                'medical bills':'0',\n                                'major purchase':'0',\n                                'take a trip':'0',\n                                'buy house':'0',\n                                'small business':'2',\n                                'wedding':'0',\n                                'moving':'0',\n                                'educational expenses':'3',\n                                'vacation':'0',\n                                'renewable energy':'0'\n                                }).astype(float)","a8f1d5a5":"sns.countplot(x=\"Purpose\", hue='Credit Default', data=df)\nplt.show()","7f0f9255":"df['Term'].value_counts()","7b12aa76":"sns.countplot(x=\"Term\", data=df)\nplt.show()","e149fed6":"df['Term'] = df['Term'].map({'Short Term':'1', 'Long Term':'0'}).astype(float)\ndf_test['Term'] = df_test['Term'].map({'Short Term':'1', 'Long Term':'0'}).astype(float)","2d5c1a59":"sns.countplot(x=\"Term\", hue='Credit Default', data=df)\nplt.show()","2e1e6ddc":"corr_('Term',0,1)","60bfda02":"df['Current Loan Amount'].value_counts()\n# df['Current Loan Amount BIG'].value_counts()","b1465b8b":"df['Current Loan Amount'].describe()","96abcc52":"hist_qq('Current Loan Amount')","346d20fb":"# \u0432\u044b\u043d\u043e\u0441 \u0431\u043e\u043b\u044c\u0448\u0438\u0445 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e\n\ndf['Current Loan Amount BIG'] = df['Current Loan Amount'] == 99999999\ndf_test['Current Loan Amount BIG'] = df_test['Current Loan Amount'] == 99999999","d6f6ade3":"df.loc[df['Current Loan Amount'] == 99999999, ['Current Loan Amount']] = None\ndf_test.loc[df_test['Current Loan Amount'] == 99999999, ['Current Loan Amount']] = None","1b2d0cbb":"df.loc[df['Current Loan Amount'].isnull(), 'Current Loan Amount'] = df['Current Loan Amount'].mean() #median()\ndf_test.loc[df_test['Current Loan Amount'].isnull(), 'Current Loan Amount'] = df_test['Current Loan Amount'].mean() #median()","43f73ddd":"hist_qq('Current Loan Amount')","9b965b84":"df['Current Credit Balance'].describe()","1bc98a4f":"hist_qq('Current Credit Balance')","54311be5":"# \u0432\u044b\u0431\u0440\u043e\u0441\u044b\n\ndf.loc[df['Current Credit Balance'] > df['Current Credit Balance'].quantile(.95), :].shape","d2815675":"df.loc[df['Current Credit Balance'] > df['Current Credit Balance'].quantile(.95), \\\n       ['Current Credit Balance']] = df['Current Credit Balance'].quantile(.95) #df['Current Credit Balance'].mean()\n\ndf_test.loc[df_test['Current Credit Balance'] > df_test['Current Credit Balance'].quantile(.95), \\\n       ['Current Credit Balance']] = df_test['Current Credit Balance'].quantile(.95) #df_test['Current Credit Balance'].mean()","811ca66d":"# df['Monthly Debt'].value_counts()","0faf3f3d":"df['Monthly Debt'].hist()","debca283":"df_test['Monthly Debt'].hist()","6afe0fdb":"df.loc[df['Monthly Debt'] > df['Monthly Debt'].quantile(.99), \\\n       ['Monthly Debt']] = df['Monthly Debt'].mean()\n\ndf_test.loc[df_test['Monthly Debt'] > df_test['Monthly Debt'].quantile(.99), \\\n       ['Monthly Debt']] = df_test['Monthly Debt'].mean()","021acedc":"df_test['Monthly Debt'].hist()","d1b82eeb":"df['Credit Score'].describe()","a05f331f":"hist_qq('Credit Score')","2a72875b":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a \u043a\u043e\u0440\u0440\u0435\u043b\u0438\u0440\u0443\u044e\u0442 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0441 'Credit Score'\n\nFEATURE_NAMES = df.columns.drop('Credit Score').tolist()\ncorr_Credit_Score = df[FEATURE_NAMES + ['Credit Score']].corr().iloc[:-1, -1]\ncorr_Credit_Score = np.abs(corr_Credit_Score).sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_Credit_Score.values, y=corr_Credit_Score.index)\n\nplt.title('Correlation')\nplt.show()","c0e0491f":"# \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c 7 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0432\u043b\u0438\u044f\u044e\u0449\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (8-\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441\u0430\u043c \u0438\u043c\u0435\u0435\u0442 \u043c\u043d\u043e\u0433\u043e null)\n# TARGET_FEATURE = list(corr_Credit_Score.index[0:15])\n\nTARGET_FEATURE = [\n#                  'Credit Default',\n                 'Current Loan Amount BIG',\n                 'Current Loan Amount',\n                 'Term',\n                 'Annual Income',\n#                  'ID',\n                 'Home Ownership_Home Mortgage',\n                 'Bankruptcies',\n                 'Home Ownership_Own Home',\n                 'Maximum Open Credit',\n                 'Number of Credit Problems',\n                 'Purpose',\n                 'Home Ownership_Rent',\n                 'Years of Credit History',\n                 'Years in current job'\n                 ]","37f8fb16":"# \u043e\u0442\u0431\u0438\u0440\u0430\u0435\u043c \u043d\u0430\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f\ndata = df.loc[(df['Credit Score'].notnull()), TARGET_FEATURE + ['Credit Score']]#.sample(2000)\n# data","533c2aa9":"data.info()","64464494":"%%time\n\n# \u0443\u0447\u0438\u043c\u0441\u044f \u043d\u0430 \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438\n\nmodel_Credit_Score = LogisticRegression()\nmodel_Credit_Score.fit(data[TARGET_FEATURE], data['Credit Score'])","95eac0ef":"# \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438\n\ndf.loc[(df['Credit Score'].isnull()), ['Credit Score']] =\\\nmodel_Credit_Score.predict(df.loc[(df['Credit Score'].isnull()), TARGET_FEATURE])\n\ndf_test.loc[(df_test['Credit Score'].isnull()), ['Credit Score']] =\\\nmodel_Credit_Score.predict(df_test.loc[(df_test['Credit Score'].isnull()), TARGET_FEATURE])","3d5f7683":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u043a\u0430\u043a\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\n# shapiro(df['Credit Score'])","9e2c1eac":"# hist_qq('Credit Score')","65aea93b":"df.loc[(df['Credit Score'] < 700), 'Credit Score'] = 0\ndf.loc[(df['Credit Score'] >= 700) & (df['Credit Score'] < 740), 'Credit Score'] = 1\n# df.loc[(df['Credit Score'] >= 720) & (df['Credit Score'] < 740), 'Credit Score'] = 2\ndf.loc[(df['Credit Score'] >= 740) & (df['Credit Score'] <= 750), 'Credit Score'] = 2\ndf.loc[(df['Credit Score'] >= 750) & (df['Credit Score'] <= 800), 'Credit Score'] = 3\ndf.loc[(df['Credit Score'] > 800), 'Credit Score'] = 4\n\n# df['Credit Score NULL'] = df['Credit Score'].isnull()\n# df.loc[df['Credit Score'].isnull(), 'Credit Score'] = 4\n\n# df.loc[df['Credit Score'].isnull(), 'Credit Score'] = df['Credit Score'].median()\n# df_test.loc[df_test['Credit Score'].isnull(), 'Credit Score'] = df_test['Credit Score'].median()\n\n\ndf_test.loc[(df_test['Credit Score'] < 700), 'Credit Score'] = 0\ndf_test.loc[(df_test['Credit Score'] >= 700) & (df_test['Credit Score'] < 740), 'Credit Score'] = 1\ndf_test.loc[(df_test['Credit Score'] >= 740) & (df_test['Credit Score'] <= 750), 'Credit Score'] = 2\ndf_test.loc[(df_test['Credit Score'] >= 750) & (df_test['Credit Score'] <= 800), 'Credit Score'] = 3\ndf_test.loc[(df_test['Credit Score'] > 800), 'Credit Score'] = 4\n\n# df_test['Credit Score NULL'] = df_test['Credit Score'].isnull()\n# df_test.loc[df_test['Credit Score'].isnull(), 'Credit Score'] = 4","f91ea697":"sns.countplot(x=\"Credit Score\", hue='Credit Default', data=df)\nplt.show()","8a25982e":"df['No problems'] = (df['Tax Liens'] == 0) & (df['Bankruptcies'] == 0) & (df['Number of Credit Problems'] == 0)\ndf_test['No problems'] = (df_test['Number of Credit Problems'] == 0) \\\n                                & (df_test['Bankruptcies'] == 0) & (df_test['Tax Liens'] == 0)","4ff33cca":"df['No problems'].value_counts()","5557ff31":"sns.countplot(x=\"No problems\", hue='Credit Default', data=df)\nplt.show()","1ede1cbc":"df['Credit Default'].value_counts()","0977d2c7":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c train\n\ndf.info()","98d79b48":"# \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u043c Purpose \u0432\u043e FLOAT, \u043f\u043e\u0442\u043e\u043c\u0443-\u0447\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b \u043e\u0442\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 object\n\n# df['Home Ownership'] = df['Home Ownership'].astype(float)\n# df_test['Home Ownership'] = df_test['Home Ownership'].astype(float)\n\ndf['Purpose'] = df['Purpose'].astype(float)\ndf_test['Purpose'] = df_test['Purpose'].astype(float)\n","00e447d3":"# \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b\n\nCOL_SELECTED = [\n#     'Months since last delinquent NULL',\n    'Current Loan Amount BIG',\n#     'Credit Score NULL',\n    'No problems',\n    \n#         'Home Ownership', - \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043e \u043d\u0430 dummies\n        'Annual Income',\n        'Years in current job',\n#         'Tax Liens',      - \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n        'Number of Open Accounts',\n        'Years of Credit History',\n        'Maximum Open Credit',\n#         'Number of Credit Problems',      - \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \n#         'Months since last delinquent',\n#         'Bankruptcies',      - \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n        'Purpose',\n        'Term',\n        'Current Loan Amount',\n        'Current Credit Balance',\n        'Monthly Debt',\n        'Credit Score',\n    \n        'Home Ownership_Have Mortgage',\n        'Home Ownership_Home Mortgage',\n        'Home Ownership_Own Home',\n        'Home Ownership_Rent',\n    \n#         'Purpose_business loan',\n#         'Purpose_buy a car',\n#         'Purpose_buy house',\n#         'Purpose_debt consolidation',\n#         'Purpose_educational expenses',\n#         'Purpose_home improvements',\n#         'Purpose_major purchase',\n#         'Purpose_medical bills',\n#         'Purpose_moving',\n#         'Purpose_other',\n# #         'Purpose_renewable energy', # \u043d\u0435\u0442 \u043d\u0430 teste\n#         'Purpose_small business',\n#         'Purpose_take a trip',\n#         'Purpose_vacation',\n#         'Purpose_wedding'\n                         ]","7d4dffa7":"# \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0441\u0442\u043e\u043b\u0431\u0446\u044b (\u0447\u0442\u043e\u0431\u044b \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c)\n\nCOL_SELECTED_NUM = [\n        'Annual Income',\n        'Years in current job',\n        'Number of Open Accounts',\n        'Years of Credit History',\n        'Maximum Open Credit',\n        'Current Loan Amount',\n        'Current Credit Balance',\n        'Monthly Debt',\n        'Credit Score',\n                         ]","4e8697d4":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u043e\u0445\u043e\u0436\u0435-\u043b\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u044b\u0445 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u0435\u043b\u0435\u0439 \u043d\u0430 train \u0438 test\n\nfrom scipy.stats import mannwhitneyu\n\n# p > 5% - \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e\u0445\u043e\u0436\u0438\nfigsize = (6, 3)\nfor col in COL_SELECTED_NUM:\n    plt.figure(figsize=figsize)\n    sns.set(font_scale=0.8)\n    sns.kdeplot(df[col], shade=True, label='train', color='r')\n    sns.kdeplot(df_test[col], shade=True, label='test', color='g')\n    print(col)\n    print(mannwhitneyu(df[col], df_test[col]))\n    plt.legend()\n    plt.title(col)\n    plt.show()","27724616":"# \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0432\u043b\u0438\u044f\u043d\u0438\u044f \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\n\ncorr_with_target = df[COL_SELECTED + ['Credit Default']].corr().iloc[:-1, -1].sort_values(ascending=False)\nplt.figure(figsize=(10, 8))\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\nplt.title('Correlation with target variable')\nplt.show()","7b0a8c3e":"# \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438\n\nplt.figure(figsize = (25,20))\n\nsns.set(font_scale=1.4)\n\ncorr_matrix = df[COL_SELECTED].corr()\ncorr_matrix = np.round(corr_matrix, 2)\ncorr_matrix[np.abs(corr_matrix) < 0.3] = 0\n\nsns.heatmap(corr_matrix, annot=True, linewidths=.5, cmap='GnBu')\n\nplt.title('Correlation matrix')\nplt.show()","cb278ffd":"# # \u043d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u0435 \u0434\u0430\u0435\u0442 \u043f\u0440\u0438\u0440\u043e\u0441\u0442\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u043e\n\n# scaler = StandardScaler()\n\n# df_norm = df.copy()\n# df_norm[COL_SELECTED_NUM] = scaler.fit_transform(df_norm[COL_SELECTED_NUM])\n\n# df = df_norm.copy()\n","8477b200":"X = df[COL_SELECTED]\ny = df['Credit Default']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, \n                                                    shuffle=True,\n#                                                     stratify=y,\n                                                    test_size=0.30, \n                                                    random_state=21)","a0e353d3":"# \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043d\u0435 \u0434\u0430\u0435\u0442 \u043f\u0440\u0438\u0440\u043e\u0441\u0442\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u0442 \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043e\u0442\u043a\u043b\u044e\u0447\u0435\u043d\u043e\n# \u043a \u0442\u043e\u043c\u0443 \u0436\u0435 \u0432 \u0442\u0435\u0445 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0432 \u0438\u0442\u043e\u0433\u0435, \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445\n\n# # \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f\n# disbalance = y_train.value_counts()[0] \/ y_train.value_counts()[1]\n# disbalance","81f09fdf":"# # \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n\n# df_for_balancing = pd.concat([X_train, y_train], axis=1)\n# df_balanced = balance_df_by_target(df_for_balancing, 'Credit Default')\n# df_balanced['Credit Default'].value_counts()","abeffbb6":"# X_train = df_balanced.drop(columns='Credit Default')\n# y_train = df_balanced['Credit Default']","87838ddf":"# # \u0441\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c\n# disbalance = y_train.value_counts()[0] \/ y_train.value_counts()[1]\n# disbalance","8068c1f6":"def pred_model(model):\n    model.fit(X_train, y_train)\n    y_test_pred = model.predict(X_test)\n\n    print(model, '  --  ', f1_score(y_test, y_test_pred))\n#     get_classification_report(y_train, y_train_pred, y_test, y_test_pred)    ","c1c10824":"# frozen_params = {\n#      'class_weights':[1, 3.3], \n#      'silent':True,\n#      'random_state':21,\n# #      'cat_features':CAT_FEATURE_NAMES,\n#      'eval_metric':'F1',\n#      'early_stopping_rounds':20\n# }","1e3fed29":"# def evaluate_preds(model, X_train, X_test, y_train, y_test):\n#     y_train_pred = model.predict(X_train)\n#     y_test_pred = model.predict(X_test)\n\n#     get_classification_report(y_train, y_train_pred, y_test, y_test_pred)","7f837a90":"# model = catb.CatBoostClassifier(**frozen_params,\n#                                 iterations=300,\n#                                 max_depth=7, \n# #                                 l2_leaf_reg=.5,\n#                                 reg_lambda=0.5\n#                                 )\n\n# model.fit(X_train, y_train, plot=True, eval_set=(X_test, y_test))\n# evaluate_preds(model, X_train, X_test, y_train, y_test)","73854494":"# params = {\n#     'reg_lambda': np.linspace(0.1, 4, 80)\n# }","0e8210f0":"# model = catb.CatBoostClassifier(**frozen_params,\n#                                 iterations=300,\n#                                 max_depth=7)","3dc278ef":"# cv = StratifiedKFold(n_splits=3, random_state=21, shuffle=True)","a5d90335":"# grid_search = model.randomized_search(params, X_train, y_train, n_iter=50, cv=cv, stratified=True, plot=True, refit=True)","9bc43fc9":"# grid_search","d3908028":"# %%time\n\n# evaluate_preds(model, X_train, X_test, y_train, y_test)","1d16015e":"# def show_learning_curve_plot(estimator, X, y, cv=3, n_jobs=-1, train_sizes=np.linspace(.1, 1.0, 5)):\n\n#     #Determines cross-validated training and test scores for different training set sizes.\n#     train_sizes, train_scores, test_scores = learning_curve(estimator, X, y, \n#                                                             cv=cv, \n#                                                             scoring='f1',\n#                                                             train_sizes=train_sizes, \n#                                                             n_jobs=n_jobs)\n#     train_scores_mean = np.mean(train_scores, axis=1)\n#     train_scores_std = np.std(train_scores, axis=1)\n#     test_scores_mean = np.mean(test_scores, axis=1)\n#     test_scores_std = np.std(test_scores, axis=1)\n\n#     plt.figure(figsize=(15,8))\n#     plt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n#                      train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n#     plt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n#                      test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n#     plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n#              label=\"Training score\")\n#     plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n#              label=\"Cross-validation score\")\n\n#     plt.title(f\"Learning curves ({type(estimator).__name__})\")\n#     plt.xlabel(\"Training examples\")\n#     plt.ylabel(\"Score\")     \n#     plt.legend(loc=\"best\")\n#     plt.grid()\n#     plt.show()","d5522c78":"# show_learning_curve_plot(model, X, y)","c51e38f3":"# def show_feature_importances(feature_names, feature_importances, get_top=None):\n#     feature_importances = pd.DataFrame({'feature': feature_names, 'importance': feature_importances})\n#     feature_importances = feature_importances.sort_values('importance', ascending=False)\n       \n#     plt.figure(figsize = (20, len(feature_importances) * 0.355))\n    \n#     sns.barplot(feature_importances['importance'], feature_importances['feature'])\n    \n#     plt.xlabel('Importance')\n#     plt.title('Importance of features')\n#     plt.show()\n    \n#     if get_top is not None:\n#         return feature_importances['feature'][:get_top].tolist()","aedc3a50":"# important_features_top = show_feature_importances(X_train.columns, model.feature_importances_, get_top=23)","65fb5de6":"# important_features_top","a95e8b96":"# %%time\n\n# frozen_params = {\n#      'class_weights':[1, 3.1], \n#      'silent':True,\n#      'random_state':21,\n# #      'cat_features':NEW_CAT_FEATURE_NAMES,\n#      'eval_metric':'F1',\n#      'early_stopping_rounds':20\n# }\n\n# final_model = catb.CatBoostClassifier(**frozen_params,\n#                                       iterations=300,\n#                                       max_depth=7,\n#                                       reg_lambda=0.5)\n\n# final_model.fit(X_train[important_features_top], y_train)\n\n# evaluate_preds(final_model, X_train[important_features_top], X_test[important_features_top], y_train, y_test)","26baa30e":"for model in [\n#             \u041b\u043e\u0433\u0438\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u044f\n            LogisticRegression(C = 0.1, class_weight = 'balanced', penalty = 'l1', solver = 'liblinear', max_iter = 50),     \n            xgb.XGBClassifier(eval_metric=\"logloss\", max_depth=50, reg_lambda=1, random_state=21),\n            KNeighborsClassifier(), # \u041a-\u0431\u043b\u0438\u0436\u0430\u0439\u0448\u0438\u0445 \u0441\u043e\u0441\u0435\u0434\u0435\u0439\n            BaggingClassifier(), # \u0411\u0435\u0433\u0433\u0438\u043d\u0433\n            RandomForestClassifier(), # \u0421\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u043b\u0435\u0441    \n#             \u0414\u0435\u0440\u0435\u0432\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0439\n            DecisionTreeClassifier(random_state=21, class_weight={0:1, 1:3.3}, max_depth=4),\n            lgbm.LGBMClassifier(class_weight={0:1, 1:3.3}, random_state=21),\n            catb.CatBoostClassifier(class_weights=[1, 3.3], silent=True),\n            AdaBoostClassifier(),    \n            SVC(C=0.05, kernel='rbf'), # \u041c\u0435\u0442\u043e\u0434 \u043e\u043f\u043e\u0440\u043d\u044b\u0445 \u0432\u0435\u043a\u0442\u043e\u0440\u043e\u0432\n            GaussianNB(),\n            ExtraTreesClassifier(random_state=42, bootstrap=True, min_samples_split=0.3, class_weight='balanced'),\n            GradientBoostingClassifier(learning_rate=7, random_state=42), # \u0411\u0443\u0441\u0442\u0438\u043d\u0433\n            Perceptron(class_weight='balanced')    \n]:\n        pred_model(model)","437f2f21":"# \u0430\u043d\u0441\u0430\u043c\u0431\u043b\u044c \u043d\u0430 \u043b\u0443\u0447\u0448\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u044f\u0445\n\nmodel_vote = VotingClassifier(\n    estimators=[\n#         ('Logistic Regression', \n#                  LogisticRegression(C = 5, class_weight = 'balanced', penalty = 'l1', solver = 'liblinear', max_iter = 50)),\n#         ('XGBoost', xgb.XGBClassifier(eval_metric=\"logloss\", use_label_encoder=False, random_state=21)),\n#         ('K-Neighbours', KNeighborsClassifier()),\n#         ('DecisionTree', DecisionTreeClassifier(random_state=21,\n#                                     class_weight={0:1, 1:3.6},\n#                                     max_depth=4\n#                                     )),\n        ('LightGBM', lgbm.LGBMClassifier(class_weight={0:1, 1:3.3}, random_state=21)),\n        ('CatBooster', \n                            catb.CatBoostClassifier(class_weights=[1, 3.3], \n                                    depth=3,\n                                    iterations=400,\n#                                     l2_leaf_reg=300,\n#                                     cat_features=CAT_FEATURE_NAMES,\n                                    silent=True, \n#                                     early_stopping_rounds=20, #  \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0443\u0442 \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0435 \u0432\u043b\u0438\u044f\u044e\u0442\n#                                     use_best_model=True,\n#                                     random_state=21\n                                    )),\n#         ('Ada Boost', AdaBoostClassifier()),\n#         ('SVM', SVC()),\n#         ('Naive Bayes', GaussianNB()),\n        ('Extra Tree', \n                ExtraTreesClassifier(random_state=42, bootstrap=True, min_samples_split=0.3, class_weight='balanced')),\n#         ('Gradient Boosting', GradientBoostingClassifier(learning_rate=7, random_state=42)),\n#         ('Perceptron', Perceptron(class_weight='balanced'))\n    ],\n#     voting='hard',\n    voting='soft', # \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0438 \u0432 \u0438\u0442\u043e\u0433\u0435 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0447\u0438\u0442\u043e-\u0442\u043e \u0432\u0440\u043e\u0434\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e\n    weights=[1,1.5,1],\n    n_jobs=-1)\n\nmodel_vote.fit(X_train, y_train)\n\ny_train_pred = model_vote.predict(X_train)\ny_test_pred = model_vote.predict(X_test)\n\nprint('VOTE:: ')\nprint(f1_score(y_test, y_test_pred))\n# get_classification_report(y_train, y_train_pred, y_test, y_test_pred)","fa60824a":"# \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e \u043c\u043e\u0434\u0435\u043b\u044c CatBoost\n\nmodel_catb = catb.CatBoostClassifier(class_weights=[1, 3.3],\n                                    depth=3,\n                                    iterations=400, \n#                                     l2_leaf_reg=300,\n#                                     cat_features=CAT_FEATURE_NAMES,\n                                    silent=True, \n#                                     early_stopping_rounds=20, #  \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0442\u0443\u0442 \u043d\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0435 \u0432\u043b\u0438\u044f\u044e\u0442\n#                                     use_best_model=True,\n#                                     random_state=21\n                                    )\n\n# frozen_params = {\n#      'class_weights':[1, 3.3], \n#      'silent':True,\n#      'random_state':21,\n# #      'cat_features':CAT_FEATURE_NAMES,\n#      'eval_metric':'F1',\n#      'early_stopping_rounds':20\n# }\n\n# model_catb = catb.CatBoostClassifier(**frozen_params,\n#                                 iterations=400,\n#                                 max_depth=7, \n# #                                 depth=12,\n# #                                 l2_leaf_reg=.5,\n#                                 reg_lambda=0.5\n#                                 )\n\nmodel_catb.fit(X_train, y_train)\n# model_catb.fit(X_train, y_train, eval_set=(X_test, y_test))\n\ny_train_pred = model_catb.predict(X_train)\ny_test_pred = model_catb.predict(X_test)\n\nprint('CatBoost:: ')\nprint(f1_score(y_test, y_test_pred))\n# get_classification_report(y_train, y_train_pred, y_test, y_test_pred)","4da2a407":"# # # # \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\n\n# df_test[\"Credit Default\"] = model_vote.predict(df_test[COL_SELECTED])\n# df_test[\"Credit Default\"] = model_catb.predict(df_test[COL_SELECTED])\n\n\n# df_test['ID'] = df_test.index.tolist()\n# df_test['ID'] = df_test['ID']\n# df_test1 = df_test[['Credit Default', 'ID']]\n\n# df_test1.to_csv(r'__Vote_01_9_.csv', index=False)\n# df_test1.to_csv(r'___Cat_best_.csv', index=False)","a5e855b4":"## \u041e\u0431\u0437\u043e\u0440 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439. Credit Default <a name=17_cd>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","b675ab7a":"### Number of Open Accounts - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432 <a name=\"5_nooa\"><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","7b068604":"### \u0421\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0443\u0440\u0433\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c VotingClassifier","b2ce0069":"### Months since last delinquent - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 <a name=9_msld>\n    \n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","58a094cd":"### \u041d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c CatBoost\n\u0437\u0430\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u043b, \u0447\u0442\u043e\u0431\u044b \u043c\u0435\u043d\u044c\u0448\u0435 \u043c\u0435\u0441\u0442\u0430 \u0437\u0430\u043d\u0438\u043c\u0430\u043b\u043e","b60718ec":"## \u041d\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 <a name=norm>\n    \n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","feec80f5":"## \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 <a name=\"nulls\"><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","d1021446":"## \u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 trein \u0438 test. \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439. <a name=20_learn>\n    \n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","026ee5f0":"## \u0421\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c <a name=look>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","59005aa8":"### Term - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430 - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430 <a name=12_t>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","ef9343b4":"### Annual Income - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434 <a name=\"2_ai\"><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","87c4236c":"### \u0417\u0430\u0434\u0430\u0447\u0430\n\n\u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f, \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043e \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u0445 \u0431\u0430\u043d\u043a\u0430, \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442, \u0434\u043b\u044f \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0433\u043e\u0432\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 \u043f\u043e \u0442\u0435\u043a\u0443\u0449\u0435\u043c\u0443 \u043a\u0440\u0435\u0434\u0438\u0442\u0443. \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u043e\u0433\u043d\u043e\u0437 \u0434\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432 \u0438\u0437 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0433\u043e \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430.\n\n### \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430\n\nF1-score (sklearn.metrics.f1_score)\n\n### \u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f \u043a \u0440\u0435\u0448\u0435\u043d\u0438\u044e\n\n\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043c\u0435\u0442\u0440\u0438\u043a\u0430: F1 > 0.5\n\u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u0434\u043b\u044f \u0433\u043b\u0430\u0432\u043d\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 (1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430 \u043f\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u0443)","e97ad539":"### Tax Liens - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f <a name=\"4_tl\"><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","9c902fe3":"### \u041d\u0435\u0431\u043e\u043b\u044c\u0448\u0438\u0435 \u043f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f:\n    \n    1. \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0432\u044b\u043d\u043e\u0441\u0438\u043b \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e, \u043c\u043d\u0435 \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0442\u0430\u043a(\u0442.\u0435. \u0438\u0434\u0442\u0438 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443) \u043f\u043e\u0442\u043e\u043c\u0443-\u0447\u0442\u043e \u043d\u0430\u0433\u043b\u044f\u0434\u043d\u0435\u0435. \n    2. \u0412 \u0442\u0435\u043a\u0441\u0442\u0435 \u0435\u0441\u0442\u044c \u0437\u0430\u043a\u043a\u043e\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0435\u0438. \u042d\u0442\u043e \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u0435 \u0448\u0442\u0443\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435, \u043e\u0434\u043d\u0430\u043a\u043e, \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0434\u0430\u044e\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0445\u0443\u0436\u0435 \u043b\u0443\u0447\u0448\u0435\u0433\u043e.\n    3. \u0427\u0442\u043e \u043f\u043e-\u043c\u043e\u0435\u043c\u0443, \u043c\u043e\u0436\u043d\u043e \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c: \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 Annual Income \u0438 Credit Score \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u041b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438. \u0422\u0430\u043c \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 \u043e\u0446\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u043e\u043f R2 - \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0438\u0437\u043a\u043e\u0435.","e309d469":"## \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044f\u0445 <a name=21_learn1>\n    \n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","e48255c0":"## `\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u043f\u0443\u0441\u043a\u0438 \u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u041b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0420\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438`","c5055d5c":"## \u041e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 <a name='view'>\n    \n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","92f5cf19":"## \u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 <a name=\"work\"><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","2eb27717":"## \u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a <a name=\"new\"><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","aaaaa813":"### Monthly Debt - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433 <a name=15_md>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","b73f7352":"### Credit Score - \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 <a name=16_cs>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","6d41af52":"### Years of Credit History - \u043a\u043e\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 <a name=\"6_yoch\"><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","e2cc6420":"### Years in current job - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b <a name=\"3_yicj\"><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","49818adc":"### Purpose - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430 <a name=11_p>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","fdbe9f89":" \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432\u0441\u0435\u0433\u043e\n \n**[\u0421\u043c\u043e\u0442\u0440\u0438\u043c \u041f\u0440\u043e\u043f\u0443\u0441\u043a\u0438](#nulls)**\n\n**[\u0421\u043b\u0443\u0436\u0435\u0431\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438](#work)**\n\n**\u041e\u0431\u0437\u043e\u0440 \u0414\u0430\u043d\u043d\u044b\u0445:**\n\n* **[Home Ownership](#1_hw)** - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435 `\u0432 dummies`\n* **[Annual Income](#2_ai)** - \u0433\u043e\u0434\u043e\u0432\u043e\u0439 \u0434\u043e\u0445\u043e\u0434 (**1557 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**) `\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u043a\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u041b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438` + \u043d\u0435\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0440\u0435\u0437\u0430\u0435\u043c \u0445\u0432\u043e\u0441 (99 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438)\n* **[Years in current job](#3_yicj)** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b (**371 \u043f\u0440\u043e\u043f\u0443\u0441\u043a**) `\u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 + \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0443\u044e`\n* **[Tax Liens](#4_tl)** - \u043d\u0430\u043b\u043e\u0433\u043e\u0432\u044b\u0435 \u043e\u0431\u0440\u0435\u043c\u0435\u043d\u0435\u043d\u0438\u044f **\u0438\u0434\u0435\u0442 \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a**\n* **[Number of Open Accounts](#5_nooa)** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u0441\u0447\u0435\u0442\u043e\u0432 `\u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c > 95 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438 \u043c\u0435\u043d\u044f\u0435\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u0443`\n* **[Years of Credit History](#6_yoch)** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u043e\u0439 \u0438\u0441\u0442\u043e\u0440\u0438\u0438 `\u0431\u043e\u043b\u044c\u0448\u0435 40 \u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 40`\n* **[Maximum Open Credit](#7_moc)** - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442 `\u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c > 95 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438 \u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 = 95 \u043a\u0432\u0430\u043d\u0442`\n* **[Number of Credit Problems](#8_nocp)** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c **\u0438\u0434\u0435\u0442 \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a**\n* **[Months since last delinquent](#9_msld)** - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 (**4071 \u043f\u0440\u043e\u043f\u0443\u0441\u043a**) `null \u0432 0 + \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446.`\n* **[Bankruptcies](#10_b)** - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430 (**14 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**) `null \u0432 0` + **\u0438\u0434\u0435\u0442 \u0432 \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a**\n* **[Purpose](#11_p)** - \u0446\u0435\u043b\u044c \u043a\u0440\u0435\u0434\u0438\u0442\u0430 `\u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 + \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0447\u0442\u043e\u0431\u044b \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c 4`\n* **[Term](#12_t)** - \u0441\u0440\u043e\u043a \u043a\u0440\u0435\u0434\u0438\u0442\u0430 `\u0432 2 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438`\n* **[Current Loan Amount](#13_cla)** - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 `\u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c > 95 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438 \u043c\u0435\u043d\u044f\u0435\u043c \u0441\u0440\u0435\u0434\u043d\u044e\u044e` + `\u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u043e\u0442\u0434\u0435\u043b\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e`\n* **[Current Credit Balance](#14_ccb)** - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 `\u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c > 95 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0438 \u043c\u0435\u043d\u044f\u0435\u043c \u043d\u0430 = 95 \u043a\u0432\u0430\u043d\u0442`\n* **[Monthly Debt](#15_md)** - \u0435\u0436\u0435\u043c\u0435\u0441\u044f\u0447\u043d\u044b\u0439 \u0434\u043e\u043b\u0433 `\u043c\u0435\u043d\u044f\u0435\u043c >99 \u043f\u0440\u043e\u0446 \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435..`\n* **[Credit Score](#16_cs)** - \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (**1557 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**) `\u0417\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u043a\u0438 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u041b\u0438\u043d\u0435\u0439\u043d\u043e\u0439 \u0440\u0435\u0433\u0440\u0435\u0441\u0441\u0438\u0438 + \u0434\u0435\u043b\u0438\u043c \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 + null \u0432 \u043e\u0442\u0434\u0435\u043b\u043d\u0443\u044e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044e`\n* **[Credit Default](#17_cd)** - \u0444\u0430\u043a\u0442 \u043d\u0435\u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u0441\u0442\u0432 (0 - \u043f\u043e\u0433\u0430\u0448\u0435\u043d \u0432\u043e\u0432\u0440\u0435\u043c\u044f, 1 - \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0430) \n\n**[\u041d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a](#new)** - \u0432\u043c\u0435\u0441\u0442\u043e `Tax Liens`, `Number of Credit Problems` \u0438 `Bankruptcies` \u0434\u0435\u043b\u0430\u044e \u043e\u0434\u0438\u043d \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0430 \u044d\u0442\u0438 \u0438\u0441\u043a\u043b\u044e\u0447\u0430\u044e\n\n**[\u0421\u043c\u043e\u0442\u0440\u0438\u043c, \u0447\u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u043e\u0441\u044c \u043f\u043e\u0441\u043b\u0435 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0434\u0430\u043d\u043d\u044b\u0445](#look)**\n\n**[\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445](#norm) + \u041e\u0442\u0431\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f CatBoost** `\u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u043e, \u043f\u043e\u0442\u043e\u043c\u0443-\u0447\u0442\u043e \u0441 \u043d\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0445\u0443\u0436\u0435`\n\n**[\u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \/ test. \u0411\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439](#20_learn)** `\u0441 \u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u043a\u043e\u0439 \u0445\u0443\u0436\u0435 - \u0432\u044b\u043a\u043b\u044e\u0447\u0435\u043d\u043e`\n\n**[\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044f\u0445](#21_learn1)**\n","e36f5907":"### Number of Credit Problems - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u0431\u043b\u0435\u043c \u0441 \u043a\u0440\u0435\u0434\u0438\u0442\u043e\u043c <a name=\"8_nocp\"><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","33afb8b4":"# \u041a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u043f\u043e \u043a\u0443\u0440\u0441\u0443: \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Python \u0434\u043b\u044f Data Science. \u041f\u0440\u043e\u0434\u043e\u043e\u043b\u0436\u0435\u043d\u0438\u0435","731696e3":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445","132fb98a":"### Home Ownership - \u0434\u043e\u043c\u043e\u0432\u043b\u0430\u0434\u0435\u043d\u0438\u0435 <a name=\"1_hw\"><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","863d02d7":"### Bankruptcies - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430 <a name=10_b>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","49a9e9aa":"### Maximum Open Credit - \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043a\u0440\u0435\u0434\u0438\u0442 <a name=\"7_moc\"><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","8bf0aad7":"# \u041e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u0435 <a name='index'>","5e5de59c":"### Current Credit Balance - \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0431\u0430\u043b\u0430\u043d\u0441 <a name=14_ccb>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","2aae57aa":"## \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0432\u0441\u0435\u0433\u043e <a name='load'><\/a>\n\n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)","7def48dd":"### Current Loan Amount - \u0442\u0435\u043a\u0443\u0449\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043a\u0440\u0435\u0434\u0438\u0442\u0430 <a name=13_cla>\n    \n[\u043a \u043e\u0433\u043b\u0430\u0432\u043b\u0435\u043d\u0438\u044e](#index)"}}