{"cell_type":{"8a896f69":"code","1cc1f7c6":"code","fee51119":"code","c1ec035d":"code","852442e3":"code","d8ad4054":"code","251c4a64":"code","b90cc302":"code","527b1548":"code","ef9359e6":"code","b0f46d4e":"code","88b2ca42":"code","13b54955":"code","a3b6868a":"code","d3bd6b10":"code","2a98144a":"code","98cb3dd3":"code","e8730d31":"code","8513709d":"code","839bb6f4":"code","771f8d40":"code","5fab96e0":"code","8ca8a5df":"code","33285759":"code","18d85264":"code","3562807b":"code","2604e97a":"code","2c32d9bc":"code","9b012507":"code","c84806f6":"code","a9e57cb4":"code","4263e0d5":"code","a3059911":"code","207f39cf":"code","e876a726":"code","7f10d8fd":"code","f10e53b9":"code","bd052190":"code","62bd116d":"code","0c70091f":"code","623a5246":"code","50125842":"markdown"},"source":{"8a896f69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","1cc1f7c6":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.preprocessing import LabelBinarizer\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom wordcloud import WordCloud,STOPWORDS\nfrom nltk.stem import WordNetLemmatizer\nfrom nltk.tokenize import word_tokenize,sent_tokenize\nfrom bs4 import BeautifulSoup\nimport re,string,unicodedata\nfrom nltk.tokenize.toktok import ToktokTokenizer\nfrom nltk.stem import LancasterStemmer,WordNetLemmatizer\nfrom sklearn.linear_model import LogisticRegression,SGDClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom string import punctuation\nfrom nltk import pos_tag\nfrom nltk.corpus import wordnet\nimport keras\nfrom keras.layers import Dense\nfrom keras.models import Sequential","fee51119":"df = pd.read_csv(\"..\/input\/real-or-fake-fake-jobposting-prediction\/fake_job_postings.csv\")","c1ec035d":"df.head()","852442e3":"df.describe()","d8ad4054":"df.isna().sum()","251c4a64":"plt.figure(figsize = (10,10))\ncorr = df.corr()\nsns.heatmap(corr , mask=np.zeros_like(corr, dtype=np.bool) , cmap=sns.diverging_palette(-100,0,as_cmap=True) , square = True)","b90cc302":"del df['salary_range']\ndel df['job_id']","527b1548":"df.head()","ef9359e6":"df.fillna(\" \",inplace = True)","b0f46d4e":"df['text'] = df['title'] + ' ' + df['location'] + ' ' + df['department'] + ' ' + df['company_profile'] + ' ' + df['description'] + ' ' + df['requirements'] + ' ' + df['benefits'] + ' ' + df['employment_type'] + ' ' + df['required_education'] + ' ' + df['industry'] + ' ' + df['function'] ","88b2ca42":"df.text[0]","13b54955":"del df['title']\ndel df['location']\ndel df['department']\ndel df['company_profile']\ndel df['description']\ndel df['requirements']\ndel df['benefits']\ndel df['employment_type']\ndel df['required_experience']\ndel df['required_education']\ndel df['industry']\ndel df['function']","a3b6868a":"df.head()","d3bd6b10":"stop = set(stopwords.words('english'))\npunctuation = list(string.punctuation)\nstop.update(punctuation)","2a98144a":"def get_simple_pos(tag):\n    if tag.startswith('J'):\n        return wordnet.ADJ\n    elif tag.startswith('V'):\n        return wordnet.VERB\n    elif tag.startswith('N'):\n        return wordnet.NOUN\n    elif tag.startswith('R'):\n        return wordnet.ADV\n    else:\n        return wordnet.NOUN","98cb3dd3":"lemmatizer = WordNetLemmatizer()\ndef lemmatize_words(text):\n    final_text = []\n    for i in text.split():\n        if i.strip().lower() not in stop:\n            pos = pos_tag([i.strip()])\n            word = lemmatizer.lemmatize(i.strip(),get_simple_pos(pos[0][1]))\n            final_text.append(word.lower())\n    return \" \".join(final_text)      ","e8730d31":"df.text = df.text.apply(lemmatize_words)","8513709d":"plt.figure(figsize = (20,20)) # Text that is not fraudulent(0)\nwc = WordCloud(width = 1600 , height = 800 , max_words = 3000).generate(\" \".join(df[df.fraudulent == 0].text))\nplt.imshow(wc , interpolation = 'bilinear')","839bb6f4":"plt.figure(figsize = (20,20)) # Text that is fraudulent(1)\nwc = WordCloud(width = 1600 , height = 800 , max_words = 3000).generate(\" \".join(df[df.fraudulent == 1].text))\nplt.imshow(wc , interpolation = 'bilinear')","771f8d40":"sns.set(style=\"darkgrid\")\nsns.countplot(x = \"fraudulent\" , data = df)","5fab96e0":"train_text , test_text ,train_category , test_category = train_test_split(df.text,df.fraudulent , test_size = 0.2 , random_state = 0)","8ca8a5df":"cv=CountVectorizer(min_df=0,max_df=1,binary=False,ngram_range=(1,3))\n#transformed train reviews\ncv_train_reviews=cv.fit_transform(train_text)\n#transformed test reviews\ncv_test_reviews=cv.transform(test_text)\n\nprint('BOW_cv_train:',cv_train_reviews.shape)\nprint('BOW_cv_test:',cv_test_reviews.shape)","33285759":"tv=TfidfVectorizer(min_df=0,max_df=1,use_idf=True,ngram_range=(1,3))\n#transformed train reviews\ntv_train_reviews=tv.fit_transform(train_text)\n#transformed test reviews\ntv_test_reviews=tv.transform(test_text)\nprint('Tfidf_train:',tv_train_reviews.shape)\nprint('Tfidf_test:',tv_test_reviews.shape)","18d85264":"#training the model\nmnb=MultinomialNB()\n#fitting the nb for bag of words\nmnb_bow=mnb.fit(cv_train_reviews,train_category)\nprint(mnb_bow)\n#fitting the nb for tfidf features\nmnb_tfidf=mnb.fit(tv_train_reviews,train_category)\nprint(mnb_tfidf)","3562807b":"#Predicting the model for bag of words\nmnb_bow_predict=mnb.predict(cv_test_reviews)\n#Predicting the model for tfidf features\nmnb_tfidf_predict=mnb.predict(tv_test_reviews)","2604e97a":"#Accuracy score for bag of words\nmnb_bow_score=accuracy_score(test_category,mnb_bow_predict)\nprint(\"mnb_bow_score :\",mnb_bow_score)\n#Accuracy score for tfidf features\nmnb_tfidf_score=accuracy_score(test_category,mnb_tfidf_predict)\nprint(\"mnb_tfidf_score :\",mnb_tfidf_score)","2c32d9bc":"mnb_bow_report = classification_report(test_category,mnb_bow_predict,target_names = ['0','1'])\nprint(mnb_bow_report)\nmnb_tfidf_report = classification_report(test_category,mnb_tfidf_predict,target_names = ['0','1'])\nprint(mnb_tfidf_report)","9b012507":"cm_cv = confusion_matrix(test_category,mnb_bow_predict)\ncm_tv = confusion_matrix(test_category,mnb_tfidf_predict)\ncm_cv , cm_tv","c84806f6":"cm_cv = pd.DataFrame(cm_cv, index=[0,1], columns=[0,1])\ncm_cv.index.name = 'Actual'\ncm_cv.columns.name = 'Predicted'\ncm_tv = pd.DataFrame(cm_tv, index=[0,1], columns=[0,1])\ncm_tv.index.name = 'Actual'\ncm_tv.columns.name = 'Predicted'","a9e57cb4":"plt.figure(figsize = (10,10))\nsns.heatmap(cm_cv,cmap= \"Blues\",annot = True, fmt='')","4263e0d5":"plt.figure(figsize = (10,10))\nsns.heatmap(cm_tv,cmap= \"Blues\",annot = True, fmt='')","a3059911":"model = Sequential()\nmodel.add(Dense(units = 100 , activation = 'relu' , input_dim = cv_train_reviews.shape[1]))\nmodel.add(Dense(units = 50 , activation = 'relu'))\nmodel.add(Dense(units = 25 , activation = 'relu'))\nmodel.add(Dense(units = 10 , activation = 'relu'))\nmodel.add(Dense(units = 1 , activation = 'sigmoid'))\nmodel.compile(optimizer = 'adam' , loss = 'binary_crossentropy' , metrics = ['accuracy'])\nmodel.summary()","207f39cf":"model.fit(cv_train_reviews,train_category , epochs = 5)","e876a726":"pred_cv = model.predict(cv_test_reviews)\npred_cv[:5]","7f10d8fd":"pred_cv = np.around(pred_cv , decimals = 0)\npred_cv[:5]","f10e53b9":"accuracy_score(pred_cv,test_category)","bd052190":"cv_report = classification_report(test_category,pred_cv,target_names = ['0','1'])\nprint(cv_report)","62bd116d":"cm_cv = confusion_matrix(test_category,pred_cv)\ncm_cv","0c70091f":"cm_cv = pd.DataFrame(cm_cv, index=[0,1], columns=[0,1])\ncm_cv.index.name = 'Actual'\ncm_cv.columns.name = 'Predicted'","623a5246":"plt.figure(figsize = (10,10))\nsns.heatmap(cm_cv,cmap= \"Blues\",annot = True, fmt='')","50125842":"**The dataset is highly imbalanced**"}}