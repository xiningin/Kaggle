{"cell_type":{"bd491fec":"code","26193858":"code","e0cf8bdd":"code","1f02f594":"code","e027f661":"code","4b7d2fcd":"code","ca5c7ffa":"code","72187b23":"code","7598f511":"code","61a321b5":"code","0790e14d":"code","d50d33d8":"code","920e7ad3":"code","f84f5985":"code","99b6c1e7":"code","495bc532":"code","69ecffc6":"code","37289729":"code","95b33f59":"code","1406a8c2":"code","51df8932":"code","589728e3":"code","9a2afe96":"code","d7ce55a7":"code","1a069081":"code","80960756":"code","ba414eb3":"code","5337435d":"code","9f54e5e2":"code","94ccc103":"code","e036c69d":"code","d776ad33":"markdown","fcd19e13":"markdown","70a44df3":"markdown","b5928466":"markdown","b4855d9a":"markdown","bad5b273":"markdown","682b0e6b":"markdown","d095969c":"markdown","5a7f4056":"markdown","201ee72a":"markdown","8e492e8f":"markdown","fb141b26":"markdown","50d20e0c":"markdown","81ea60a1":"markdown"},"source":{"bd491fec":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\n\nsns.set_style(\"darkgrid\")\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nmy_data=pd.read_csv('..\/input\/fifa19\/data.csv',index_col=0)\n\n#df_test = pd.read_csc(\"Titanic\")\n# Any results you write to the current directory are saved as output.\n%matplotlib inline","26193858":"my_data.head()","e0cf8bdd":"#my_data.info()","1f02f594":"#my_data.isna().count()","e027f661":"# Missing Data.\n\nimport missingno as msno\nmsno.bar(my_data.sample(18207))","4b7d2fcd":"#Relationship between 'Age' and 'Potential'.\n\nsns.set_style('darkgrid')\n\nsns.lmplot(x='Age', y=\"Potential\", data=my_data, \n           aspect=2,palette=\"coolwarm\")","ca5c7ffa":"#difference between ages.\n\nplt.figure(figsize=(10,8))\nsns.countplot(x ='Age',data=my_data, palette='coolwarm')","72187b23":"#'Preferred Fot' left or right.\n\nplt.figure(figsize=(10,8))\nsns.countplot(x ='Preferred Foot',data=my_data, palette='BrBG')","7598f511":"#Visualisation all 'Position'.\n\nplt.figure(figsize=(12,8))\nsns.set_style('whitegrid')\nsns.countplot(x='Position',data=my_data, palette='coolwarm')\n","61a321b5":"#Relation between 'Age' and 'Agility'.\n\nsns.set_style('whitegrid')\ng = sns.JointGrid(x='Age', y='Agility',data=my_data, height=8)\ng = g.plot_joint(plt.scatter, color=\"0.8\", edgecolor=\"purple\", )\ng = g.plot_marginals(sns.distplot, kde=True, color=\".5\")","0790e14d":"plt.figure(figsize=(12,8))\nsns.regplot(x = 'Age', y = 'Potential', data = my_data, marker=None)","d50d33d8":"nat=pd.value_counts(my_data['Nationality'])\nnat=nat.head(10)\n\nsns.set_style('darkgrid')\nplt.figure(figsize=(12,8))\nplt.plot(nat, marker=\".\", markersize=20, markerfacecolor='red')\nplt.ylabel('N\u00ba Players')","920e7ad3":"import folium\n\n\ndf = pd.DataFrame({\n    \"lat\": [-15.7744227,51.5287352, 52.5069312,41.3948976, -34.6154611, \n           48.8589507,48.8591341,4.6486259,35.5062897, 52.1950964 ],\n    \n    \"long\": [-48.0772903, -0.3817841,13.1445471, 2.0787274,-58.5733844,\n            2.2770198,2.2770196,-74.2478958,138.6484981,3.0364464  ],\n    \n    \"name\": ['Brasil - approximately 800','England  - approximately 1600 ',\n             'Germany  - approximately 1200',\n             'Spain  - approximately 1050',\n             'Argentina  - approximately 950',\n             'France  - approximately 900', 'Italy  - approximately 750',\n             'Colombia  - approximately 600','Japan  - approximately 450',\n             'Netherlands  - approximately 420' ]\n})\n\nm = folium.Map(location=None, tiles=\"Mapbox Bright\", zoom_start=10)\n\n\nfor x in range (0,len(df)):\n    \n    folium.Marker(\n        location=[df.iloc[x]['lat'],df.iloc[x]['long']],\n        popup =df.iloc[x]['name'],\n        tooltip=df.iloc[x]['name']\n    ).add_to(m)\n    \nm","f84f5985":"my_data['Wage'] = my_data['Wage'].map(lambda x: x.lstrip('\u20ac').rstrip('K'))\nmy_data['Value'] = my_data['Value'].map(lambda x: x.lstrip('\u20ac').rstrip('M').rstrip('K'))\n\nmy_data['Wage'].astype('int64')\nmy_data['Value'].astype('float')\n\n\nmy_data.info()\n","99b6c1e7":"my_data.drop(['ID', 'Name', 'Photo', 'Nationality', 'Flag', \n       'Club', 'Club Logo',\n       'Preferred Foot', 'International Reputation',\n       'Work Rate', 'Body Type', 'Real Face', 'Position', \n        'Joined', 'Loaned From', 'Contract Valid Until',\n       'Height', 'Weight', 'LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW',\n       'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM',\n       'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB', 'Crossing',\n       'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'SprintSpeed', 'Reactions', 'Balance',\n       'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes', 'Release Clause'], axis=1,inplace=True)\n","495bc532":"my_data.columns","69ecffc6":"import missingno as msno\nmsno.matrix(my_data)","37289729":"my_data['Weak Foot'].fillna(my_data['Weak Foot'].mean(), inplace=True)\nmy_data['Acceleration'].fillna(my_data['Acceleration'].mean(), inplace=True)\nmy_data['Agility'].fillna(my_data['Agility'].mean(), inplace=True)\nmy_data['ShotPower'].fillna(my_data['ShotPower'].mean(), inplace=True)\nmy_data['Aggression'].fillna(my_data['Aggression'].mean(), inplace=True)\nmy_data['Dribbling'].fillna(my_data['Dribbling'].mean(), inplace=True)\nmy_data['Jersey Number'].fillna(my_data['Jersey Number'].mean(), inplace=True)\nmy_data['Skill Moves'].fillna(my_data['Skill Moves'].mean(), inplace=True)\n","95b33f59":"msno.matrix(my_data)","1406a8c2":"X = my_data.drop(['Potential'], axis=1)\ny = my_data['Potential']","51df8932":"from sklearn.model_selection import train_test_split","589728e3":"X_train,X_test, y_train,y_test = train_test_split(X,y, test_size=0.3, random_state=101)","9a2afe96":"from sklearn.linear_model import LinearRegression","d7ce55a7":"lm = LinearRegression()","1a069081":"lm.fit(X_train,y_train)","80960756":"lm.coef_","ba414eb3":"predict = lm.predict(X_test)","5337435d":"plt.figure(figsize=(12,8))\nsns.regplot(y_test,predict, marker='*', color='green' )\nplt.xlabel(\"Potential\", fontsize=12 )\nplt.ylabel('datas of hability and market value', fontsize=12)","9f54e5e2":"plt.figure(figsize=(12,8))\nsns.distplot(y_test-predict)\nplt.title(\"Distribution Plot - Waste\")\n\n# if the Waste Distribution is Normal Distribution, so the Linear Regression its correct.\n","94ccc103":"from sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_test, predict))\nprint('MSE:', metrics.mean_squared_error(y_test, predict))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, predict)))","e036c69d":"lm.score(X,y)","d776ad33":"<h1> Linear Regression<\/h1>","fcd19e13":"Folium's References:  The Python Graph Gallery\n[https:\/\/python-graph-gallery.com\/](https:\/\/python-graph-gallery.com\/)\n            ","70a44df3":"<h3>Relationship between 'Age' and 'Potential<\/h3>","b5928466":"<h3>Missing Data<\/h3>","b4855d9a":"<h3>Visualisation all 'Positions<\/h3>","bad5b273":"<h3>Main nationalities<\/h3>","682b0e6b":"<h3>Relation between 'Age' and 'Agility'<\/h3>","d095969c":"<h3>Correlation between potential and age<\/h3>","5a7f4056":"<h1>Data treatment for machine learning<\/h1>","201ee72a":"<h2>Geographical distribution main nationalities FIFA.<h2>","8e492e8f":"<h3>Difference between ages<\/h3>","fb141b26":"<h3>Correlation between potential and age<\/h3>","50d20e0c":"<h2>Model report<\/h2>","81ea60a1":"<h3>Preferred Foot' left or right.<\/h3>\n"}}