{"cell_type":{"f4b1c067":"code","e75fd65c":"code","26dbb869":"code","ec02e873":"code","e3d00c80":"code","043b5872":"code","8acb9c47":"code","d7989aee":"code","086f67e0":"code","c1e32192":"code","d1654d98":"code","63c08343":"code","e90c8465":"code","77352fc8":"code","34dc1f6e":"code","cf9311eb":"code","17ae75cd":"code","cfa783a5":"code","aadf269b":"code","2b8a37ed":"code","71294530":"code","00c28988":"code","a45459bc":"code","5c45a252":"code","81382d32":"code","87ebedd3":"code","efed3117":"code","6c24348b":"code","a55f776d":"code","a2a41a57":"code","1461fd9e":"code","d5a6bb45":"code","d0bf73b1":"code","e2a46deb":"code","0441bfe0":"code","b23f234f":"code","51ce401c":"code","c31e27f8":"code","c28362d4":"code","9f59deb4":"code","3e57e405":"code","190995a4":"code","bd0c20d0":"code","9f0f5316":"code","7b67cba0":"code","aac7cbd9":"code","6e468a4d":"code","7b910ebe":"code","bc4e67ae":"code","8aa6e21d":"code","5b6ce638":"markdown","96dcd58e":"markdown","9ee0fe53":"markdown","d9a3ba74":"markdown","5752a838":"markdown","c3e3ae29":"markdown","10daa507":"markdown","42cd887c":"markdown","673009ba":"markdown","16625156":"markdown","69c20240":"markdown","31e9ebec":"markdown","b171aa0c":"markdown","16ba76d6":"markdown","70043ee1":"markdown","acefee8c":"markdown","e2cb16ba":"markdown","0c4236ee":"markdown","38577958":"markdown","91d1084b":"markdown","a17df66a":"markdown","10ec1a32":"markdown","1b747fcf":"markdown","99a115dd":"markdown","37bfc4b0":"markdown"},"source":{"f4b1c067":"!pip install seaborn","e75fd65c":"# for data manipulation\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# for visualization\nfrom matplotlib import pyplot as plt\n# to include graphs inline within the frontends next to code\nimport seaborn as sns\n\n# preprocessing functions and evaluation models\nfrom sklearn.preprocessing import OneHotEncoder, MinMaxScaler, StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV,RandomizedSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.dummy import DummyClassifier\n\n# machine learning models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier,ExtraTreesClassifier\nfrom xgboost import XGBClassifier","26dbb869":"submission_sample = pd.read_csv('..\/input\/forest-cover-type-prediction\/sampleSubmission.csv')\ntrain = pd.read_csv('..\/input\/forest-cover-type-prediction\/train.csv')\ntest = pd.read_csv('..\/input\/forest-cover-type-prediction\/test.csv')","ec02e873":"print(\"Number of rows and columns in the train dataset are:\", train.shape)","e3d00c80":"train.head()","043b5872":"train.tail()","8acb9c47":"train.dtypes","d7989aee":"print(list(enumerate(train.columns)))","086f67e0":"train.iloc[:,1:10].describe()","c1e32192":"train.nunique()","d1654d98":"train.isna().sum()","63c08343":"def outlier_function(df, col_name):\n    ''' this function detects first and third quartile and interquartile range for a given column of a dataframe\n    then calculates upper and lower limits to determine outliers conservatively\n    returns the number of lower and uper limit and number of outliers respectively\n    '''\n    first_quartile = np.percentile(np.array(df[col_name].tolist()), 25)\n    third_quartile = np.percentile(np.array(df[col_name].tolist()), 75)\n    IQR = third_quartile - first_quartile\n                      \n    upper_limit = third_quartile+(3*IQR)\n    lower_limit = first_quartile-(3*IQR)\n    outlier_count = 0\n                      \n    for value in df[col_name].tolist():\n        if (value < lower_limit) | (value > upper_limit):\n            outlier_count +=1\n    return lower_limit, upper_limit, outlier_count\n","e90c8465":"# loop through all columns to see if there are any outliers\nfor i in train.columns:\n    if outlier_function(train, i)[2] > 0:\n        print(\"There are {} outliers in {}\".format(outlier_function(train, i)[2], i))","77352fc8":"trees = train[(train['Horizontal_Distance_To_Fire_Points'] > outlier_function(train, 'Horizontal_Distance_To_Fire_Points')[0]) &\n              (train['Horizontal_Distance_To_Fire_Points'] < outlier_function(train, 'Horizontal_Distance_To_Fire_Points')[1])]\ntrees.shape","34dc1f6e":"size=10\nUni = []\nfor i in range(size+1,len(train.columns)-1):\n    Uni.append(pd.unique(train[train.columns[i]].values))\n","cf9311eb":"Uni","17ae75cd":"train.iloc[:,11:15].sum(axis=1).sum()","cfa783a5":"train.iloc[:,15:55].sum(axis=1).sum()","aadf269b":"plt.figure(figsize=(15,10))\nsns.countplot(train['Cover_Type'])\nplt.xlabel(\"Type of Cpver\", fontsize=12)\nplt.ylabel(\"Rows Count\", fontsize=12)\nplt.show()","2b8a37ed":"fig, axes = plt.subplots(nrows = 2,ncols = 5,figsize = (25,15))\ng= sns.FacetGrid(train, hue='Cover_Type',height=5)\n(g.map(sns.distplot,train.columns[1],ax=axes[0][0]))\n(g.map(sns.distplot, train.columns[2],ax=axes[0][1]))\n(g.map(sns.distplot, train.columns[3],ax=axes[0][2]))\n(g.map(sns.distplot, train.columns[4],ax=axes[0][3]))\n(g.map(sns.distplot, train.columns[5],ax=axes[0][4]))\n(g.map(sns.distplot, train.columns[6],ax=axes[1][0]))\n(g.map(sns.distplot, train.columns[7],ax=axes[1][1]))\n(g.map(sns.distplot, train.columns[8],ax=axes[1][2]))\n(g.map(sns.distplot, train.columns[9],ax=axes[1][3]))\n(g.map(sns.distplot, train.columns[10],ax=axes[1][4]))\nplt.close(2)\nplt.legend()","71294530":"size=10\nfig, axes = plt.subplots(nrows = 2,ncols = 5,figsize = (25,10))\nfor i in range(0,size):\n    row = i \/\/ 5\n    col = i % 5\n    ax_curr = axes[row, col]\n    sns.boxplot(x=\"Cover_Type\", y=train.columns[i], data=train,ax=ax_curr);","00c28988":"sns.pairplot(train, hue='Cover_Type', vars=train.columns[1:11])","a45459bc":"# Bivariate EDA\npd.crosstab(train.Soil_Type31, train.Cover_Type)","5c45a252":"#Convert dummy features back to categorical\nx = train.iloc[:,15:55]\ny = train.iloc[:,11:15]\ny = pd.DataFrame(y)\nx = pd.DataFrame(x)\ns2 = pd.Series(x.columns[np.where(x!=0)[1]])\ns3 = pd.Series(y.columns[np.where(y!=0)[1]])\ntrain['soil_type'] = s2\ntrain['Wilderness_Area'] = s3\ntrain.head()","81382d32":"# Create a new dataset exluding dummies variable for Mutivariate EDA\ndf_viz = train.iloc[:, 0:15]\ndf_viz = df_viz.drop(['Wilderness_Area1', 'Wilderness_Area2', 'Wilderness_Area3', \n                      'Wilderness_Area4'], axis = 1)\ndf_viz.head()","87ebedd3":"plt.figure(figsize=(15,10))\npd.crosstab(train.Wilderness_Area, train.Cover_Type).plot.bar(figsize=(10,10),stacked = True)","efed3117":"#plt.figure(figsize=(30,30))\npd.crosstab(train.soil_type, train.Cover_Type).plot.bar(figsize=(20,10),stacked = True)","6c24348b":"corr = df_viz.corr()\n\n# plot the heatmap\nplt.figure(figsize=(14,12))\ncolormap = plt.cm.RdBu\nsns.heatmap(corr,linewidths=0.1, \n            square=False, cmap=colormap, linecolor='white', annot=True)\nplt.title('Pearson Correlation of Numeric Features', size=14)","a55f776d":"train=trees","a2a41a57":"def add_feature(data):   \n    data['Ele_minus_VDtHyd'] = data.Elevation-data.Vertical_Distance_To_Hydrology\n    data['Ele_plus_VDtHyd'] = data.Elevation+data.Vertical_Distance_To_Hydrology\n    data['Distanse_to_Hydrolody'] = (data['Horizontal_Distance_To_Hydrology']**2+data['Vertical_Distance_To_Hydrology']**2)**0.5\n    data['Hydro_plus_Fire'] = data['Horizontal_Distance_To_Hydrology']+data['Horizontal_Distance_To_Fire_Points']\n    data['Hydro_minus_Fire'] = data['Horizontal_Distance_To_Hydrology']-data['Horizontal_Distance_To_Fire_Points']\n    data['Hydro_plus_Road'] = data['Horizontal_Distance_To_Hydrology']+data['Horizontal_Distance_To_Roadways']\n    data['Hydro_minus_Road'] = data['Horizontal_Distance_To_Hydrology']-data['Horizontal_Distance_To_Roadways']\n    data['Fire_plus_Road'] = data['Horizontal_Distance_To_Fire_Points']+data['Horizontal_Distance_To_Roadways']\n    data['Fire_minus_Road'] = data['Horizontal_Distance_To_Fire_Points']-data['Horizontal_Distance_To_Roadways']\n    return data","1461fd9e":"train = add_feature(train)\ntest = add_feature(test)","d5a6bb45":"#X_train = train.drop(['Id','Cover_Type','soil_type','Wilderness_Area'], axis = 1)\nX_train = train.drop(['Id','Cover_Type'], axis = 1)\ny_train = train.Cover_Type\nX_test = test.drop(['Id'], axis = 1)","d0bf73b1":"%%time \n\nlr_pipe = Pipeline(\n    steps = [\n        ('scaler', MinMaxScaler()),\n        ('classifier', LogisticRegression(solver='lbfgs', n_jobs=-1))\n    ]\n)\n\nlr_param_grid = {\n    'classifier__C': [1, 10, 100,1000],\n}\n\n\nnp.random.seed(1)\ngrid_search = GridSearchCV(lr_pipe, lr_param_grid, cv=5, refit='True')\ngrid_search.fit(X_train, y_train)\n\nprint(grid_search.best_score_)\nprint(grid_search.best_params_)\n","e2a46deb":"%%time \n\nrf_pipe = Pipeline(\n    steps = [\n        ('classifier', RandomForestClassifier(n_estimators=500))\n    ]\n)\n\nparam_grid = {\n       'classifier__min_samples_leaf': [1,4,7],\n    'classifier__max_depth': [34,38,32],\n}\n\nnp.random.seed(1)\nrf_grid_search = GridSearchCV(rf_pipe, param_grid, cv=5, refit='True', n_jobs=-1)\nrf_grid_search.fit(X_train, y_train)\n\nprint(rf_grid_search.best_score_)\nprint(rf_grid_search.best_params_)","0441bfe0":"rf_model = rf_grid_search.best_estimator_\n\ncv_score = cross_val_score(rf_model, X_train, y_train, cv = 5)\nprint(cv_score)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (cv_score.mean(), cv_score.std() * 2))","b23f234f":"rf = rf_grid_search.best_estimator_.steps[0][1]","51ce401c":"feat_imp = rf.feature_importances_\nfeat_imp_df = pd.DataFrame({\n    'feature':X_train.columns,\n    'feat_imp':feat_imp\n})\n\nfeat_imp_df.sort_values(by='feat_imp', ascending=False).head(10)","c31e27f8":"sorted_feat_imp_df = feat_imp_df.sort_values(by='feat_imp', ascending=True)\nplt.figure(figsize=[6,6])\nplt.barh(sorted_feat_imp_df.feature[-20:], sorted_feat_imp_df.feat_imp[-20:])\nplt.show()","c28362d4":"%%time \n\nxgd_pipe = Pipeline(\n    steps = [\n        ('classifier', XGBClassifier(n_estimators=50, subsample=0.5))\n    ]\n)\n\nparam_grid = {\n    'classifier__learning_rate' : [0.45],\n    'classifier__min_samples_split' : [8, 16, 32],\n    'classifier__min_samples_leaf' : [2],\n    'classifier__max_depth': [15]\n    \n}\n\nnp.random.seed(1)\nxgd_grid_search = GridSearchCV(xgd_pipe, param_grid, cv=5,\n                              refit='True', verbose = 10, n_jobs=-1)\nxgd_grid_search.fit(X_train, y_train)\n\nprint(xgd_grid_search.best_score_)\nprint(xgd_grid_search.best_params_)","9f59deb4":"xgd_model = xgd_grid_search.best_estimator_\n\ncv_score = cross_val_score(xgd_model, X_train, y_train, cv = 5)\nprint(cv_score)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (cv_score.mean(), cv_score.std() * 2))","3e57e405":"xrf_pipe = Pipeline(\n    steps = [\n        ('classifier', ExtraTreesClassifier(n_estimators=500,random_state=0, criterion = 'entropy'))\n    ]\n)\n\n\nxrf_param_grid = {\n    'classifier__min_samples_leaf': [1,4,7],\n    'classifier__max_depth': [34,38,32],\n}\n\nnp.random.seed(1)\nxrf_grid_search = GridSearchCV(xrf_pipe, xrf_param_grid, cv=5, refit='True', n_jobs=-1)\nxrf_grid_search.fit(X_train, y_train)\n\nprint(xrf_grid_search.best_score_)\nprint(xrf_grid_search.best_params_)","190995a4":"xrf_model = xrf_grid_search.best_estimator_\n\ncv_score = cross_val_score(xrf_model, X_train, y_train, cv = 5)\nprint(cv_score)\nprint(\"Accuracy: %0.2f (+\/- %0.2f)\" % (cv_score.mean(), cv_score.std() * 2))","bd0c20d0":"final_model = xrf_grid_search.best_estimator_.steps[0][1]\nfinal_model.fit(X_train, y_train)\n\n\n\n\n\n\n","9f0f5316":"y_pred = final_model.predict(X_test)","7b67cba0":"print(len(test.Id))","aac7cbd9":"print(len(y_pred))","6e468a4d":"from collections import Counter\nCounter(y_pred)","7b910ebe":"submission_sample.head()","bc4e67ae":"submission = pd.DataFrame({'Id': test.Id,\n                           'Cover_Type': y_pred})\nsubmission.head()","8aa6e21d":"submission.to_csv('submission.csv', index=False)","5b6ce638":"# Logistics regression****","96dcd58e":"# Feature Engineering","9ee0fe53":"Wilderness_Area and Soil_Type1-40 having only binary values and only one soil_type out of 40 soil types or wilderness_area out of 4 types being equal to 1, shows that they are one-hot-encoded columns.\n\nOne important thing about trees, they can only belong to one soil type or one wilderness area.\n\n","d9a3ba74":"We will take closer look to below 4 columns:\n* \n* Horizontal_Distance_To_Hydrology\n* Vertical_Distance_To_Hydrology\n* Horizontal_Distance_To_Roadways\n* Horizontal_Distance_To_Fire_Points\nWe are not going to consider other columns for potential outlier elimination because their data range is already fixed between 0 and 255 (e.g. Hillsahde columns) or they seem like one-hot-encoded columns (e.g. Soil type and Wilderness areas).\n\nRecall the data ranges of those 4 columns:\n\n* Horizontal_Distance_To_Hydrology: 0, 1343\n* Vertical_Distance_To_Hydrology: -146, 554\n* Horizontal_Distance_To_Roadways: 0, 6890\n* Horizaontal_Distance_To_Firepoints: 0, 6993\nHorizaontal_Distance_To_Firepoints having the highest number of outliers and widest data range.\n\n\n\n","5752a838":"There are some correlation pairs with strong negative and positive correlations. Please look at the graph, the darker the color, more the correlation","c3e3ae29":"Observations:\n\n* Soil Type 18,19,21,25,26,27,28,34,36,37,8 and 9 are vary rarely oberved\n* Soil 10 is observed maximum number of times (>2200 occurences)\n* Soil types in Cover Type 3 anad cover type 6 are similar. Look at the Brown and Green bar from the graph\n* Soil types in Cover Type 1 and 2 are similar. Look at orange and blue bars","10daa507":"Checking If Wilderness Area and Soil Type are binary or not?","42cd887c":"Observations from cleaning and understanding data:\n\n* Train dataset has 15120 rows and 56 columns.\n* Each column has numeric (integer\/float) datatype.\n* There are no NA in the dataset.Thus dataset is properly formatted.\n* 4 columns had outliers.\n* Cover_Type is our label\/target column.","673009ba":"Observations:\n\n* Forest \"Cover_Type\" 1 and 7 have higher \"Elevation\" than others while 4 has lowest among the all.\n* All Forest \"Cover_Type\" are spreded out in \"Aspect\".\n* Forest Cover Type 1, 2 and 7 have higher Horizontal_Distance_To_Roadways.\n* There is not much variation in distribution of Forest Cover Type for each of the other features.\n* Other features have almost same level of distribution of Forest Cover Types.","16625156":"Distribution of Trees","69c20240":"# ****ExtraTree Random Forest","31e9ebec":"# Random Forest****","b171aa0c":"Distribution and relationship of continuous variables (Elevation, Aspect, Slope, Distance and Hillsahde columns)","16ba76d6":"Looking at distribution plots above, it is observed that distribution of numerical variables is not normal. Some of them are right skewed and some of them are left skewed. Distribution of Aspects seems like binary.\n\nIn conclusion, we have to scale our numerical variables before they go in model.","70043ee1":"# Cleaning and Understanding Data","acefee8c":"Distribution of trees shows perfect uniform distribution.\n\nHere are the 7 types of the trees, numbered from 1 to 7 in the Cover_Type column:\n\n1) Spruce\/Fir\n\n2) Lodgepole Pine\n\n3) Ponderosa Pine\n\n4) Cottonwood\/Willow\n\n5) Aspen\n\n6) Douglas-fir\n\n7) Krummholz","e2cb16ba":"Yes, Wilderness Areas and Soil Types have binary values.","0c4236ee":"* In this competition you are asked to predict the forest cover type (the predominant kind of tree cover) from strictly cartographic variables (as opposed to remotely sensed data).\n* The data is in raw form (not scaled) and contains binary columns of data for qualitative independent variables such as wilderness areas and soil type.","38577958":"Observations:\n\n* Wildnerss Area 2 is very rare compared to other types and is observed on,y in Cover Type 1 and 7 mainly.\n* All Forest Cover Type 4 have Wildnerss Area 4 only\n* Wildneress Area 4 is mainly obeserved in Cover Type 3, 4 and 6.\n* Wildnerss Area 3 is observed in all Cover Types except cover type 4.","91d1084b":"# Loading Packages","a17df66a":"# Loading Data","10ec1a32":"# Exploratory Data Analysis","1b747fcf":"Checking Outliers","99a115dd":"Check if Tree belong to multiple soil types and wilderness areas ?","37bfc4b0":"# ****Gradient Boosting"}}