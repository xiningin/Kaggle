{"cell_type":{"39b0154c":"code","6d648cba":"code","b15816d8":"code","8327eb27":"code","b0e3a3e9":"code","3633b04c":"code","b73659e9":"code","c7521a82":"code","2d3cc9bf":"code","9319991c":"code","b66a7f72":"code","6a073623":"code","e740e4d0":"code","60e0f546":"code","f44dc5b2":"code","b12ab371":"code","a266b912":"code","3e9ceefe":"code","709805ef":"code","91d7205d":"code","db8dd140":"code","0d687c56":"markdown","d2425b3a":"markdown","5e9843f8":"markdown","c7f3001a":"markdown","61f80860":"markdown","ccdbff74":"markdown","6dd82350":"markdown","2a17d168":"markdown"},"source":{"39b0154c":"from IPython.display import HTML\nHTML(\"\"\"\n<style>\nh1,h2,h3 {\n\tmargin: 1em 0 0.5em 0;\n\tfont-weight: 600;\n\tfont-family: 'Titillium Web', sans-serif;\n\tposition: relative;  \n\tfont-size: 36px;\n\tline-height: 40px;\n\tpadding: 15px 15px 15px 2.5%;\n\tcolor: #13003A;\n\tbox-shadow: \n\t\tinset 0 0 0 1px rgba(53,86,129, 0.4), \n\t\tinset 0 0 5px rgba(53,86,129, 0.5),\n\t\tinset -285px 0 35px white;\n\tborder-radius: 0 10px 0 15px;\n\tbackground: #fff\n    \n}\n<\/style>\n\"\"\")","6d648cba":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b15816d8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.preprocessing import OneHotEncoder\nimport category_encoders as ce\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn import model_selection\nimport lightgbm as lgbm\nimport xgboost as xgb\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import StackingClassifier, VotingClassifier\nimport optuna\nimport tqdm\nimport warnings\nimport sklearn.exceptions\nwarnings.filterwarnings('ignore', category=DeprecationWarning)\nwarnings.filterwarnings('ignore', category=FutureWarning)\nwarnings.filterwarnings('ignore', category=RuntimeWarning)\nwarnings.filterwarnings('ignore', category=UserWarning)\nwarnings.filterwarnings(\"ignore\", category=sklearn.exceptions.UndefinedMetricWarning)\n","8327eb27":"train = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/test.csv')","b0e3a3e9":"train.head()","3633b04c":"test.head()","b73659e9":"train.info()","c7521a82":"test.info()","2d3cc9bf":"fig, ax = plt.subplots(figsize=(12, 6))\nsns.countplot(x='target', data=train)\nax.set_title('Target Distribution')\n","9319991c":"train.drop(columns=['id']).describe().T.style.bar(subset=['mean'], color='#606ff2')\\\n                            .background_gradient(subset=['std'], cmap='PuBu')\\\n                            .background_gradient(subset=['50%'], cmap='PuBu')","b66a7f72":"test.drop(columns=['id']).describe().T.style.bar(subset=['mean'], color='#606ff2')\\\n                            .background_gradient(subset=['std'], cmap='PuBu')\\\n                            .background_gradient(subset=['50%'], cmap='PuBu')","6a073623":"le = LabelEncoder()\ntrain['target'] = le.fit_transform(train['target'])\ntrain.columns\ncols = list(train.columns)\ncols.remove(\"target\")\ncols.remove(\"id\")","e740e4d0":"not_features = ['id', 'target']\nfeatures = []\nfor feat in train.columns:\n    if feat not in not_features:\n        features.append(feat)\nprint(features)","60e0f546":"scaler = StandardScaler()\ntrain[features] = scaler.fit_transform(train[features])\ntest[features] = scaler.transform(test[features])","f44dc5b2":"X=train.drop(['target','id'],axis=1)\nY=train['target']","b12ab371":"def objective(trial,data=X,target=Y):\n    \n    X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=0.2,random_state=42)\n    params = {'iterations':trial.suggest_int(\"iterations\", 4000, 25000),\n              'od_wait':trial.suggest_int('od_wait', 500, 2300),\n             'loss_function':'MultiClass',\n              'task_type':\"GPU\",\n              'eval_metric':'MultiClass',\n              'leaf_estimation_method':'Newton',\n              'bootstrap_type': 'Bernoulli',\n              'learning_rate' : trial.suggest_uniform('learning_rate',0.02,1),\n              'reg_lambda': trial.suggest_uniform('reg_lambda',1e-5,100),\n              'subsample': trial.suggest_uniform('subsample',0,1),\n              'random_strength': trial.suggest_uniform('random_strength',10,50),\n              'depth': trial.suggest_int('depth',1,15),\n              'min_data_in_leaf': trial.suggest_int('min_data_in_leaf',1,30),\n              'leaf_estimation_iterations': trial.suggest_int('leaf_estimation_iterations',1,15),\n               }\n    model = CatBoostClassifier(**params)  \n    model.fit(X_train,y_train,eval_set=[(X_test,y_test)],early_stopping_rounds=100,verbose=False)\n        \n    y_preds = model.predict_proba(X_test)\n\n\n    log_loss_multi = log_loss(y_test, y_preds)\n    \n    return log_loss_multi","a266b912":"OPTUNA_OPTIMIZATION = True\n\nstudy = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=100)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial: score {}, params {}'.format(study.best_trial.value, study.best_trial.params))","3e9ceefe":"if OPTUNA_OPTIMIZATION:\n    display(optuna.visualization.plot_optimization_history(study))\n    display(optuna.visualization.plot_slice(study))\n    display(optuna.visualization.plot_parallel_coordinate(study))","709805ef":"cat_params = study.best_trial.params\ncat_params['loss_function'] = 'MultiClass'\ncat_params['eval_metric'] = 'MultiClass'\ncat_params['bootstrap_type']= 'Bernoulli'\ncat_params['leaf_estimation_method'] = 'Newton'\ncat_params['random_state'] = 42\ncat_params['task_type']='GPU'\ntest_preds=None\n\nkf = StratifiedKFold(n_splits = 10 , shuffle = True , random_state = 42)\nfor fold, (tr_index , val_index) in enumerate(kf.split(X.values , Y.values)):\n    \n    print(\"-\" * 50)\n    print(f\"Fold {fold + 1}\")\n    \n    x_train,x_val = X.values[tr_index] , X.values[val_index]\n    y_train,y_val = Y.values[tr_index] , Y.values[val_index]\n        \n    eval_set = [(x_val, y_val)]\n    \n    model =CatBoostClassifier(**cat_params)\n    model.fit(x_train, y_train, eval_set = eval_set, verbose = False)\n    \n    train_preds = model.predict(x_train)    \n    val_preds = model.predict_proba(x_val)\n    \n    print(log_loss(y_val, val_preds))\n    \n    if test_preds is None:\n        test_preds = model.predict_proba(test[cols].values)\n    else:\n        test_preds += model.predict_proba(test[cols].values)\n\nprint(\"-\" * 50)\ntest_preds \/= 10","91d7205d":"submission = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/sample_submission.csv\")\nsubmission['Class_1']=test_preds[:,0]\nsubmission['Class_2']=test_preds[:,1]\nsubmission['Class_3']=test_preds[:,2]\nsubmission['Class_4']=test_preds[:,3]\nsubmission['Class_5']=test_preds[:,4]\nsubmission['Class_6']=test_preds[:,5]\nsubmission['Class_7']=test_preds[:,6]\nsubmission['Class_8']=test_preds[:,7]\nsubmission['Class_9']=test_preds[:,8]\nsubmission.head()","db8dd140":"submission.to_csv(\"sub.csv\",index=False)","0d687c56":"<h1 style=\"background-color:#ABFF9B;font-size:20px;color:#00033E;font-weight : bold\">\ud83c\udf00 Optuna Objective:<\/h1>","d2425b3a":"<h1 style=\"background-color:#ABFF9B;font-size:20px;color:#00033E;font-weight : bold\">Catboost Model:<\/h1>","5e9843f8":"<h1 style=\"background-color:#ABFF9B;font-size:20px;color:#00033E;font-weight : bold\">\u2705 Importing Required Libraries<\/h1>","c7f3001a":"<h1 style=\"background-color:#ABFF9B;font-size:20px;color:#00033E;font-weight : bold\">\u2692 Data Transformation: <\/h1>","61f80860":"<br>\n<h1 style = \"font-size:30px; font-family:cursive ; font-weight : bold; color : #0331A8; text-align: center; border-radius: 10px 15px;\"> \ud83d\ude80Catboost with Optuna Starter \ud83d\ude80 <\/h1>\n<br>","ccdbff74":"![Upvote!](https:\/\/img.shields.io\/badge\/Upvote-If%20you%20like%20my%20work-07b3c8?style=for-the-badge&logo=kaggle)","6dd82350":"<h1 style=\"background-color:#ABFF9B;font-size:20px;color:#00033E;font-weight : bold\">\ud83d\udd0d Basic Data Exploration:<\/h1>","2a17d168":"<h1 style=\"background-color:#ABFF9B;font-size:20px;color:#00033E;font-weight : bold\">\ud83d\udcc1 Submission:<\/h1>"}}