{"cell_type":{"5089ea36":"code","fad39f81":"code","279fa363":"code","0f01725d":"code","f460ba84":"code","bbafa566":"code","9fa2f9fa":"code","090cce5e":"code","7c2993f5":"code","e2f30ffc":"code","c7a4dc2d":"code","e2271f92":"code","ba1223df":"code","2d547995":"code","d944aca9":"code","7b5b3594":"code","025128a9":"code","76390d70":"code","a7865df0":"code","fc5ff89a":"code","3a5e2a7c":"code","6c4da4c8":"code","f0b7a20e":"code","07be0c11":"code","8bb8cfbe":"code","3f32c216":"code","370cab3d":"code","8497d0e7":"code","ecb8534a":"code","b12f689a":"code","49968bb4":"code","02eee65b":"code","15ef938f":"code","18f571ea":"code","650ad0ef":"code","7b34d74c":"code","5e69977f":"code","304c94c0":"code","0003ca9f":"code","a8d04e02":"code","b5a982e6":"code","7825dca3":"code","660c64dd":"code","1efa20b7":"markdown","f1fe625c":"markdown","11c2c6c7":"markdown","92358f2a":"markdown","25b3f9cd":"markdown","b38a43c4":"markdown","644036cc":"markdown","b9926a39":"markdown","f8d66898":"markdown","83d97cf2":"markdown","ae2ad5fb":"markdown","0bcd9d97":"markdown","b1fee0d8":"markdown","1de673e2":"markdown"},"source":{"5089ea36":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","fad39f81":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pylab import rcParams\nimport pandas as pd\nimport joblib\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix, accuracy_score, roc_curve, auc","279fa363":"# Exibir gr\u00e1ficos dentro do Jupyter Notebook\n%matplotlib inline\n\n# Definir tamanho padr\u00e3o para os gr\u00e1ficos\nrcParams['figure.figsize'] = 17, 4","0f01725d":"dataset_original = pd.read_csv('..\/input\/data-train-competicao-ml-1-titanic\/train.csv')\n\n# Eliminar o identificador dos passageiros\ndataset = dataset_original.drop(['PassengerId'], axis=1)","f460ba84":"dataset.head()","bbafa566":"dataset.dtypes","9fa2f9fa":"# [0] = Quantidade de inst\u00e2ncias\n# [1] = Quantidade de atributos\nprint(\"O dataset cont\u00e9m \", dataset.shape[0], \"inst\u00e2ncias e \", dataset.shape[1], \" atributos.\")","090cce5e":"# .sample() Mostra uma amostra aleat\u00f3ria\n# .head() Mostra as primeiras inst\u00e2ncias\n# .tail() Mostra as \u00faltimas inst\u00e2ncias\ndataset.sample(5)","7c2993f5":"# Somente atributos num\u00e9ricos s\u00e3o considerados\ndataset.describe()","e2f30ffc":"# Quantidade absoluta\ntotalNulos = (dataset.isnull()).sum()\ntotalNulos","c7a4dc2d":"# Percentual\npercentualNulos = (totalNulos \/ len(dataset)) * 100\npercentualNulos","e2271f92":"# Apenas atributos int e float\nnumericos = (dataset.select_dtypes(include=['int64', 'float64'])).columns","ba1223df":"# Apenas atributos object (string)\ncategoricos = (dataset.select_dtypes(include=['object'])).columns\n\n# N\u00e3o considerar os atributos textuais Name, Ticket e Cabin entre os atributos categ\u00f3ricos \ncategoricos = categoricos.drop(['Name', 'Ticket', 'Cabin'])","2d547995":"fig, ax = plt.subplots(ncols=len(numericos), nrows=1)\nplt.suptitle(\"Boxplots dos Atributos Num\u00e9ricos\")\n\n# Gr\u00e1fico para cada atributo num\u00e9rico\nfor i in range(0, len(numericos)):\n    feature = numericos[i]\n    sns.boxplot(dataset[feature], ax=ax[i], orient='vertical')","d944aca9":"fig, ax = plt.subplots(ncols=len(numericos), nrows=1)\nplt.suptitle(\"Histogramas dos Atributos Num\u00e9ricos\")\n\n# Histograma para cada atributo num\u00e9rico\nfor i in range(0, len(numericos)):\n    feature = numericos[i]\n    ax[i].set_title(feature)\n    dataset[feature].plot(kind='hist', ax=ax[i])","7b5b3594":"fig, ax = plt.subplots(ncols=len(categoricos), nrows=1)\nplt.suptitle(\"Gr\u00e1ficos de Barra dos Atributos Categ\u00f3ricos\")\n\n# Gr\u00e1fico para cada atributo categ\u00f3rico\nfor i in range(0, len(categoricos)):\n    feature = categoricos[i]\n    ax[i].set_title(feature)\n    dataset[feature].value_counts().plot(kind='bar', ax=ax[i])","025128a9":"# Somente atributos num\u00e9ricos s\u00e3o considerados\nplt.suptitle(\"Gr\u00e1fico de Calor das Correla\u00e7\u00f5es entre os Atributos Num\u00e9ricos\")\nsns.heatmap(dataset.corr(), annot=True, cmap='Blues')","76390d70":"dataset_original.shape","a7865df0":"# removendo features que n\u00e3o ser\u00e3o utilizadas no treinamento\ndataset = dataset_original.drop(['Name', 'Ticket', 'Cabin', 'PassengerId', 'Sex', 'Embarked'], axis=1)\ndataset.head()","fc5ff89a":"# divis\u00e3o do dataset em treino e teste\ntrain, test_split = train_test_split(dataset.copy(), test_size=0.3)","3a5e2a7c":"train.isnull().sum()","6c4da4c8":"# Para as inst\u00e2ncias onde Age \u00e9 nulo, imputar a m\u00e9dia (29.97)\ntrain.loc[train['Age'].isnull(), 'Age'] = train.mean()['Age']","f0b7a20e":"train.isnull().sum()","07be0c11":"# separando o target do treinamento\nX = train.drop(['Survived'], axis=1)\ny = train['Survived']","8bb8cfbe":"# treinamento do modelo com Random Forest\nmodel = RandomForestClassifier()\nmodel.fit(X, y)","3f32c216":"y_pred = model.predict(X)","370cab3d":"# acur\u00e1cia\naccuracy_score(y, y_pred)","8497d0e7":"print(classification_report(y, y_pred))","ecb8534a":"# Imputar valores nulos usando padr\u00f5es do conjunto de treino\ntest_split.loc[dataset['Age'].isnull(), 'Age'] = 29.97","b12f689a":"test_split.head()","49968bb4":"X_test = test_split.drop(['Survived'], axis=1)\ny_test = test_split['Survived']","02eee65b":"y_pred = model.predict(X_test)\ny_proba = model.predict_proba(X_test)","15ef938f":"# gerando a matriz confus\u00e3o\ncm = confusion_matrix(y_test, y_pred)\n\nsns.heatmap(cm, annot=True, cmap='Blues', fmt='g')\nplt.title('Matriz de Confus\u00e3o')\nplt.ylabel('True label')\nplt.xlabel('Predicted label')","18f571ea":"accuracy_score(y_test, y_pred)","650ad0ef":"print(classification_report(y_test, y_pred))","7b34d74c":"fp, tp, thresholds = roc_curve(y_test, y_proba[:, 1])","5e69977f":"# Gerando a Curva ROC\nplt.plot(fp, tp)\n\nplt.plot([0, 1], [0, 1], '--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.0])\n\nplt.xlabel('Falso Positivo')\nplt.ylabel('Verdadeiro Positivo')\nplt.title('Curva ROC')","304c94c0":"# \u00c1rea sob a curva ROC\nauc(fp, tp)","0003ca9f":"validation = pd.read_csv('..\/input\/data-train-competicao-ml-1-titanic\/test.csv')\nvalidation.head()","a8d04e02":"# Descartar colunas textuais e identificador\nidentificador = validation[['PassengerId']]\nvalidation.drop(['Name', 'Ticket', 'Cabin', 'PassengerId', 'Sex', 'Embarked'], axis=1, inplace=True)\n\n# Imputar valores nulos usando padr\u00f5es do conjunto de treino\nvalidation.loc[validation['Age'].isnull(), 'Age'] = 29.97","b5a982e6":"y_pred = model.predict_proba(validation)\ny_pred = y_pred[:, 1]","7825dca3":"resultado = pd.concat([identificador, pd.DataFrame(y_pred, columns=['Survived'])], axis=1)\nresultado.head()","660c64dd":"# gerando arquivos para submiss\u00e3o na competi\u00e7\u00e3o\nresultado.to_csv('submission.csv', index=False)","1efa20b7":"## Pr\u00e9-Processamento","f1fe625c":"### Predi\u00e7\u00e3o com dataset de teste para submiss\u00e3o na competi\u00e7\u00e3o","11c2c6c7":"### Avalia\u00e7\u00e3o do modelo com o dataframe de testes","92358f2a":"O gr\u00e1fico de calor mostra que as vari\u00e1veis mais correlacionadas s\u00e3o Pclass e Fare (negativamente) e SibSp e Parch (positivamente).","25b3f9cd":"### An\u00e1lise explorat\u00f3ria para conhecer o dataset","b38a43c4":"Existiam mais homens do que mulheres a bordo e a maioria dos passageiros embarcaram em \"S\" (Southampton)\n","644036cc":"### Treinamento do modelo","b9926a39":"### Configura\u00e7\u00e3o de par\u00e2metros","f8d66898":"Os boxplots acima mostra ainda mais claramente a exist\u00eancia de outliers para Age, SibSp, Parch e Fare, principalmente para as 3 \u00faltimas. Em etapas posteriores, pode ser que seja necess\u00e1rio realizar algum tratamento nas inst\u00e2ncias que apresentam esse tipo de comportamento.","83d97cf2":"### Listagem os arquivos armazenados na sess\u00e3o do kaggle","ae2ad5fb":"### Carregando o dataset de treino","0bcd9d97":"Analisando as distribui\u00e7\u00f5es, temos que:\n\n    Existiam mais passageiros na terceira classe do que nas outras 2\n    A vari\u00e1vel Age \u00e9 a que mais se aproxima de uma Distribui\u00e7\u00e3o Normal\n    SibSp, Parch e Fare possuem, em sua maioria, valores pequenos","b1fee0d8":"# Baseline - [Data Train] Competi\u00e7\u00e3o ML #1 - Titanic\n\n### Para o notebook completo seguindo o m\u00e9todo CRISP-DM acesse: https:\/\/github.com\/wandersondsm\/Competicao-ML-1---Data-Train\n\n### Espero que todos se divirtam e assim possamos aprender juntos!\n### Para troca de ideias e discurs\u00f5es sobre a competi\u00e7\u00e3o, entre na comunidade no telegram: https:\/\/t.me\/thedatatrain\n\n\n#### Autor: Wanderson Marques - wdsmarques@gmail.com","1de673e2":"### Todos os imports necess\u00e1rios para o projeto"}}