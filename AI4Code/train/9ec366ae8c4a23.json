{"cell_type":{"b08a09db":"code","aab617db":"code","65116bc5":"code","b0edb073":"code","c44d33be":"code","2d84de6b":"code","64d354a6":"code","2ff5afef":"code","e29408e8":"code","635ef537":"code","292f4c8a":"code","8db9ad68":"code","8e283749":"markdown","e439e5ce":"markdown","651e62b2":"markdown","d64a5d70":"markdown","fee49cda":"markdown","6dc6f0d1":"markdown","0084f6d5":"markdown","c7935839":"markdown","a126057d":"markdown","f3aa4c7a":"markdown","8b7f6d79":"markdown","7e4af850":"markdown","2b5a491a":"markdown"},"source":{"b08a09db":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt \nimport math\nfrom keras import optimizers\nfrom keras.models import Sequential,load_model\nfrom keras.layers import Dense\nfrom keras.layers import LSTM, Dropout, BatchNormalization\nfrom sklearn.metrics import mean_squared_error\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aab617db":"data = pd.DataFrame()\n\nf = pd.read_csv(\"..\/input\/cryptocurrency-historical-data\/bitcoin.csv\", delimiter=';')\ndata = data.append(f)\ndata.head()","65116bc5":"dataOpen = data.loc[:,[\"Open\"]].values\ndataVolume= data.loc[:,[\"Volume\"]].values\/100000  #Volume de\u011ferleri \u00e7ok y\u00fcksek oldu\u011fu i\u00e7in t\u00fcm de\u011ferli kapsayacak bir k\u00fc\u00e7\u00fcltme i\u015flemi yap\u0131yoruz\nprint(dataOpen)\nprint(dataVolume)","b0edb073":"dataOpen=np.flip(dataOpen,0)\ndataVolume=np.flip(dataVolume,0)\ndataOpen","c44d33be":"X_data = []\ny_data = []\ntimesteps = 50\nfor i in range(timesteps, 1670):\n    X_data.append(dataOpen[i-timesteps:i, 0])\n    X_data.append(dataVolume[i-timesteps:i, 0]) \n    y_data.append(dataOpen[i, 0])\nX_data, y_data = np.array(X_data), np.array(y_data)\nX_data","2d84de6b":"X_data = X_data.flatten()\nX_data = np.reshape(X_data, (1620, 1,100))\nX_data.shape","64d354a6":"Xtest=X_data[1500:]\nytest=y_data[1500:]\nX_train=X_data[:1500]\ny_train=y_data[:1500]\n\n","2ff5afef":"\nmodel = Sequential()\nmodel.add(LSTM(2400,activation='relu',return_sequences=True, input_shape=(1,100))) # 10 lstm neuron(block)\nmodel.add(Dense(2400))\nmodel.add(LSTM(2400,activation='relu',return_sequences=True))\nmodel.add(Dense(2400))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(2400))\nmodel.add(LSTM(2400,activation='relu',return_sequences=True))\nmodel.add(Dense(2400))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(2400,activation='relu',return_sequences=True))\nmodel.add(Dense(1400))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(2400,activation='relu',return_sequences=True))\nmodel.add(Dense(1400))\nmodel.add(LSTM(2400,activation='relu',return_sequences=True))\nmodel.add(Dense(1400))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(2400,activation='relu',return_sequences=True))\nmodel.add(Dense(1400))\nmodel.add(Dense(1))\n\nmodel.compile(loss='mean_squared_error', optimizer='Adamax')\nmodel.fit(X_train, y_train, epochs=200, batch_size=1)","e29408e8":"model.save(\".\/tahminModel\")","635ef537":"trainPredict = model.predict(X_train)\n\n\ntrainScore = math.sqrt(mean_squared_error(y_train, trainPredict[:,0]))\n    \nprint('Train Score: %.2f RMSE' % (trainScore))\nprint(math.sqrt(mean_squared_error(y_train, trainPredict[:,0])))\nplt.plot(y_train,label=\"real\")\nplt.plot(trainPredict[:,0],label=\"pre\")\nplt.show()","292f4c8a":"testPredict = model.predict(Xtest)\n\n\ntestScore = math.sqrt(mean_squared_error(ytest, testPredict[:,0]))\n    \nprint('Test Score: %.2f RMSE' % (testScore))\nprint(math.sqrt(mean_squared_error(ytest, testPredict[:,0])))\nplt.plot(ytest,label=\"real\")\nplt.plot(testPredict[:,0],label=\"pre\")\nplt.show()","8db9ad68":"dogru =0\nyanlis =0\n\nfor i in range(1,120):\n\n    if testPredict[i]> testPredict[i-1] and ytest[i]>ytest[i-1]:\n        dogru+=1\n    elif testPredict[i]< testPredict[i-1] and ytest[i]<ytest[i-1]:\n        dogru+=1\n    else:\n        yanlis+=1\nprint(\"Model \",dogru,\" kez fiyatlarda art\u0131\u015f\u0131 ve azalmay\u0131 do\u011fru bilmi\u015f, \",yanlis,\" kez ise fiyat art\u0131\u015f ve azal\u0131\u015flar\u0131nda tahminlerinde hata yapm\u0131\u015ft\u0131r.\")\nprint(\"Model %\",(61\/119)*100,\" oranla g\u00fcnl\u00fck fiyat de\u011fi\u015fimini do\u011fru tahmin etmi\u015ftir.\")","8e283749":"**Modelimizi olu\u015fturuyoruz ve e\u011fitiyoruz**","e439e5ce":"**Bir g\u00fcnl\u00fck tahmine kar\u015f\u0131l\u0131k gelmek \u00fczere \u00f6nceki g\u00fcnlere ait 50 tane a\u00e7\u0131l\u0131\u015f de\u011feri ve 50 tane hacim de\u011feri i\u00e7eren veri seti olu\u015fturuyoruz**","651e62b2":"**Gelecekten ge\u00e7mi\u015fe akan verilerimizi ters \u00e7evirerek kullan\u0131labilir hale getiriyoruz**","d64a5d70":"Modelimizi kaydediyoruz","fee49cda":"**verimizi i\u00e7eren numpy dizisinin boyutlar\u0131n\u0131 d\u00fczenliyoruz**","6dc6f0d1":"**Gerekli k\u00fct\u00fcphaneleri dahil ediyoruz**","0084f6d5":"**E\u011fitim verimiz i\u00e7in yap\u0131lan tahminleri de\u011ferlendiriyoruz**","c7935839":"**Verimizi E\u011fitim ve test olarak ikiye ay\u0131r\u0131yoruz**","a126057d":"**Modelin g\u00fcnl\u00fck fiyat art\u0131\u015f ve azal\u0131\u015flar\u0131n\u0131 tahmin edebilme yetene\u011fini \u00f6l\u00e7\u00fcyoruz**","f3aa4c7a":"**Test verimiz i\u00e7in yap\u0131lan tahminleri de\u011ferlendiriyoruz**","8b7f6d79":"**Kullanaca\u011f\u0131m\u0131z veri setini projemize dahil ediyoruz**","7e4af850":"**Veriseti i\u00e7erisinden bizim ihtiyac\u0131m\u0131z olan \"A\u00e7\u0131l\u0131\u015f\" ve \"Hacim\" de\u011ferlerini numpy array i\u00e7erisine at\u0131yoruz**","2b5a491a":"# #LSTM Derin \u00d6\u011frenme Y\u00f6ntemi ile Bitcoin Piyasas\u0131nda Fiyat Tahmini"}}