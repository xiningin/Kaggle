{"cell_type":{"04222452":"code","cff5792d":"code","bedcb368":"code","ce3592ec":"code","4c6e417a":"code","9475895c":"code","a6a63cdf":"code","73e403a6":"code","2d205e9c":"code","8fa19bfe":"code","4c9329ba":"code","80f33305":"code","e2012bda":"code","41d3062d":"code","aee86ac7":"code","cef11679":"code","7e71eaa3":"code","b4fc7623":"code","10e82d72":"code","1ba24a4d":"code","45b378c0":"code","941e8fda":"code","c2b611e1":"code","a93be0a7":"code","56d70109":"code","8e58b947":"code","268fa29b":"code","fb76310a":"code","236c642e":"code","85ae16fc":"code","e1dd7ff2":"code","951b036b":"code","477f372e":"code","852e748d":"code","d7179006":"code","0dab6056":"code","88045113":"code","49e01bc0":"code","518f0ec8":"code","420126b3":"code","b34a58a8":"code","a5517b09":"code","5f2f56a2":"code","233521a7":"code","20625a11":"code","cc77d8f8":"code","9e604759":"code","05ad16cf":"code","ccd0c3ee":"code","ad453aa4":"code","abc064f8":"code","5624ee37":"code","ea840194":"code","6355a9cb":"code","26d35156":"code","7667a1ef":"code","f84960bb":"code","9b7f788b":"code","eb8b835e":"code","019ee0e3":"code","8c3e481c":"code","ae542b1f":"code","ad0a2009":"code","948dc887":"code","a0b1fc0b":"code","5f082c42":"code","4833c7b8":"markdown","bc004256":"markdown","5aaaf269":"markdown","b36be199":"markdown","3389ccd5":"markdown","ec0ec79e":"markdown","38931693":"markdown","b86862f8":"markdown","9122850a":"markdown","ba28f381":"markdown","631a79a4":"markdown","315f42ec":"markdown","45bc9582":"markdown","8dd7907e":"markdown","df725995":"markdown","73d4d94b":"markdown","04f573a2":"markdown","685d929e":"markdown","def5f20b":"markdown","960d69e0":"markdown","5312b7fb":"markdown","1cc4881c":"markdown","2d22f6df":"markdown","1c483c2f":"markdown","ebabe1f2":"markdown","ca28418d":"markdown","0aadebbb":"markdown","477c3df4":"markdown","972df625":"markdown","cc33a603":"markdown","08cff95d":"markdown","fbd97a8c":"markdown","a1785328":"markdown","32b6d86c":"markdown","9346004e":"markdown","117334c7":"markdown"},"source":{"04222452":"!pip install pyreadr","cff5792d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pylab as pl\nfrom scipy.stats import spearmanr\nfrom scipy.optimize import curve_fit\nfrom scipy.optimize import minimize\nimport itertools\nimport time\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\n\nplt.style.use('ggplot')\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bedcb368":"np.random.seed(29)","ce3592ec":"import pyreadr\n\nresult = pyreadr.read_r('\/kaggle\/input\/modeldata\/simple_model_data-2.Rds')\ndf = result[None]\npd.set_option('display.max_columns', None)\ndf.head()","4c6e417a":"def Gompertz(t, theta1, theta2, theta3):\n    '''\n    theta1: The asymptote.\n    theta2: The displacement along the x-axis.\n    theta3: The growth rate.\n    '''\n    f = theta1 * np.exp(-theta2 * np.exp(-theta3 * t))\n    return f","9475895c":"country_aggs = pd.DataFrame(df.groupby(['Country'],as_index=False).agg({'total_deaths_per_million':['max'],'total_cases':['max'],'total_deaths':['max']}))\ncountry_aggs.columns = ('Country','Total_deaths_per_million','TotalConfirmedCases','TotalFatalities')\n#country_aggs = country_aggs.dropna()\n#country_aggs = country_aggs[country_aggs['TotalFatalities'] >= 50]\ncountry_aggs.head(2)\ndisplay(country_aggs.shape)","a6a63cdf":"country_aggs","73e403a6":"df.Country.unique()","2d205e9c":"df = df.merge(country_aggs, on='Country', how='inner')\ndf.head()","8fa19bfe":"# import datetime as dt\n\n# def date_day_diff(d1, d2):\n#     delta = dt.datetime.strptime(d1, \"%Y-%m-%d\") - dt.datetime.strptime(d2, \"%Y-%m-%d\")\n#     return delta.days\n\n# log_regions = []\n\n# for index, region in df.iterrows():\n#     co = region['Country']\n#     rdata = df[df['Country']==co]\n#     t = rdata['date'].values\n#     t = [float(date_day_diff(d.isoformat(), t[0].isoformat())) for d in t]\n#     y_ = rdata['total_deaths'].values\n\n#     try:\n#         popt_, pcov_ = curve_fit(f = Gompertz, xdata = t,ydata = y_,p0 = [3 * max(y_), 1, 1],maxfev = 2000)\n#     except:\n#         popt_, pcov_ = curve_fit(f = Gompertz, xdata = t,ydata = y_,p0 = [3 * max(y_), 1, 1],maxfev = 10000)\n#     log_regions.append((co,popt_))\n\n# print(\"All done!\")","4c9329ba":"# log_regions = pd.DataFrame(log_regions)\n# log_regions.columns = ('Country','est')\n# log_regions.head(1)","80f33305":"%%javascript\nIPython.OutputArea.prototype._should_scroll = function(lines) {\n    return false;\n}","e2012bda":"# top_co = country_aggs[country_aggs['TotalFatalities'] >= 1000]['Country']\n\n# for co in top_co:    \n#     T = np.arange(0, 400, 1).tolist()\n#     country = co\n#     popt = list(df[df[\"Country\"] == country]['total_deaths'])\n#     popt_ = list(log_regions[log_regions[\"Country\"] == country]['est'])[0]\n\n#     yfit_ = []\n#     for x in T:\n#         fit = Gompertz(x, popt_[0],popt_[1],popt_[2])\n#         yfit_.append(fit)\n\n#     #print(yfit_)\n#     fig, ax = plt.subplots(1, 1, figsize=(15, 5))\n#     ax.plot(popt, label=\"Actual Fatalities\",linestyle=\"\",marker=\"o\")\n#     ax.plot(T, yfit_, label=\"Fitted Fatalities\")\n#     ax.title.set_text(country)\n#     plt.legend(loc=\"upper left\")\n# plt.show()","41d3062d":"# #placeholder\n# df['total_deaths_forecast'] = 0\n# #df['row_number'] = df.groupby(['Country']).cumcount()\n# df.head(1)","aee86ac7":"# T = np.arange(0, 300, 1).tolist()\n\n# for index, region in df.iterrows():\n#     co = region['Country']\n#     #print(co)\n#     rdata = df[df['Country']==co]\n#     popt = list(rdata[rdata[\"Country\"] == co]['total_deaths'])\n#     popt_ = list(log_regions[log_regions[\"Country\"] == co]['est'])[0]\n\n#     yfit_ = []\n#     for x in T:\n#         fit = Gompertz(x, popt_[0],popt_[1],popt_[2])\n#         yfit_.append(fit)\n#     df['total_deaths_forecast'] = np.where(df['Country'] == co,max(yfit_),df['total_deaths_forecast'])\n\n# print(\"All done!\")","cef11679":"# df[df[\"Country\"] == 'Italy'].head(2)","7e71eaa3":"df = df[(df.Country.isin([\"Morocco\",\"Algeria\",\"Tunisia\",\"Cameroon\",\"Coted'Ivoire\",\"Djibouti\",\"Ghana\",\"Guinea\",\"Guinea-Bissau\",\"Mali\",\"Nigeria\",\"Senegal\",\"Somalia\",\"Argentina\",\"Costa Rica\",\"Cuba\",\"DominicanRepublic\",\"Ecuador\",\"Mexico\",\n\"Panama\",\"PuertoRico\",\"Canada\",\"UnitedStates\",\"Kazakhstan\",\"Kyrgyzstan\",\"Uzbekistan\",\"China\",\"Japan\",\"SouthKorea\",\"Indonesia\",\"Malaysia\",\"Philippines\",\"Singapore\",\"Thailand\",\"Iran\",\"Maldives\",\"Sri Lanka\",\"Armenia\",\"Azerbaijan\",\"Iraq\",\"Israel\",\n\"Lebanon\",\"Saudi Arabia\",\"Turkey\",\"UnitedArabEmirates\",\"Belarus\",\"Bulgaria\",\"Czechia\",\"Hungary\",\"Moldova\",\"Poland\",\"Romania\",\"Russia\",\"Slovakia\",\"Ukraine\",\"Denmark\",\"Estonia\",\"Finland\",\"Iceland\",\"Ireland\",\"Latvia\",\"Lithuania\",\"Norway\",\n\"Sweden\",\"UnitedKingdom\",\"Albania\",\"BosniaandHerzegovina\",\"Croatia\",\"Greece\",\"Italy\",\"Macedonia\",\"Portugal\",\"Serbia\",\"Slovenia\",\"Spain\",\"Austria\",\"Belgium\",\"France\",\"Germany\",\"Luxembourg\",\"Netherlands\",\"Switzerland\",\"Australia\",\"NewZealand\"]))]\n","b4fc7623":"country_aggs = pd.DataFrame(df.groupby(['Country'],as_index=False).agg({'total_deaths_per_million':['max'],'total_cases':['max'],'total_deaths':['max'],'Obesity_rate':['max'],'Median_Age':['max'],'gdp_estimate_ppp':['max'],'age_adjusted_risk':['max'],'Inequality_spatial_transformed':['max'],'StringencyIndex':['max'],'gov_response_at_0.1_deaths_per_million':['max'],'days_since_outbreak':['max'],'area':['max'],'population_size':['max'],'peak_deaths_already_occurred_indicator':['max'],'total_cases_per_million':['max']}))\ncountry_aggs['CaseFatalityRate'] = country_aggs['total_deaths']\/country_aggs['total_cases']\ncountry_aggs.columns = ('Country','Total_deaths_per_million','TotalConfirmedCases','TotalFatalities','Obesity_rate','Median_Age','gdp_estimate_ppp','age_adjusted_risk','Inequality_spatial_transformed','StringencyIndex','gov_response_at_0.1_deaths_per_million','days_since_outbreak','area','population_size','peak_deaths_already_occurred_indicator','total_cases_per_million','CaseFatalityRate')\n#country_aggs['intercept'] = 1\n#country_aggs = country_aggs.dropna()\n#country_aggs = country_aggs[(country_aggs['TotalFatalities'] >= 50) & (country_aggs['peak_deaths_already_occurred_indicator'] == 1)]\n#country_aggs = country_aggs[country_aggs['peak_deaths_already_occurred_indicator'] == 1]\ncountry_aggs.head(2)","10e82d72":"#sum(country_aggs['peak_deaths_already_occurred_indicator'])","1ba24a4d":"display(country_aggs.shape)","45b378c0":"disease = pd.read_csv(\"\/kaggle\/input\/disease-stats\/diseaseLUP.CSV\")\ndisease.columns = (\"Country\",\"Year\",\"Meningitis\",\"Lower_respiratory_infections\",\"Protein_energy_malnutrition\",\"Cardiovascular_diseases\",\"Dementia\",\"Kidney_disease\",\"Respiratory_diseases\",\"Liver_diseases\",\"Digestive_diseases\",\"Hepatitis\",\"Cancers\",\"Parkinson_disease\",\"Fire\",\"Drowning\",\"Homicide\",\"HIV_AIDS\",\"Drug_use_disorders\",\"Tuberculosis\",\"Road_injuries\",\"Maternal_disorders\",\"Neonatal_disorders\",\"Alcohol_use_disorders\",\"Diarrheal_diseases\",\"Hot_Cold_exposure\",\"Nutritional_deficiencies\",\"Suicide\",\"Diabetes\",\"Poisonings\")\ndisease = disease.drop(disease.index[0])\ndisease['Country'] = disease['Country'].str.replace(\" \",\"\")\npd.set_option('display.max_columns', None)\ndisease.head(10)","941e8fda":"def fuzzy_merge(df_1, df_2, key1, key2, threshold=80, limit=1):\n    \"\"\"\n    :param df_1: the left table to join\n    :param df_2: the right table to join\n    :param key1: key column of the left table\n    :param key2: key column of the right table\n    :param threshold: how close the matches should be to return a match, based on Levenshtein distance\n    :param limit: the amount of matches that will get returned, these are sorted high to low\n    :return: dataframe with boths keys and matches\n    \"\"\"\n    s = df_2[key2].tolist()\n\n    m = df_1[key1].apply(lambda x: process.extract(x, s, limit=limit))    \n    df_1['matches'] = m\n\n    m2 = df_1['matches'].apply(lambda x: ', '.join([i[0] for i in x if i[1] >= threshold]))\n    df_1['matches'] = m2\n\n    return df_1","c2b611e1":"from fuzzywuzzy import fuzz\nfrom fuzzywuzzy import process","a93be0a7":"fuzzy_merge(country_aggs, disease, 'Country', 'Country', threshold=80)\ndisease.columns = (\"matches\",\"Year\",\"Meningitis\",\"Lower_respiratory_infections\",\"Protein_energy_malnutrition\",\"Cardiovascular_diseases\",\"Dementia\",\"Kidney_disease\",\"Respiratory_diseases\",\"Liver_diseases\",\"Digestive_diseases\",\"Hepatitis\",\"Cancers\",\"Parkinson_disease\",\"Fire\",\"Drowning\",\"Homicide\",\"HIV_AIDS\",\"Drug_use_disorders\",\"Tuberculosis\",\"Road_injuries\",\"Maternal_disorders\",\"Neonatal_disorders\",\"Alcohol_use_disorders\",\"Diarrheal_diseases\",\"Hot_Cold_exposure\",\"Nutritional_deficiencies\",\"Suicide\",\"Diabetes\",\"Poisonings\")\ncountry_aggs_ = pd.merge(country_aggs, disease, on='matches', how='inner')\n#country_aggs_ = country_aggs_.dropna()\npd.set_option('display.max_rows', None)\ncountry_aggs_.head(10)","56d70109":"country_aggs_['Density_overall'] = (np.power((country_aggs_['population_size'])\/(country_aggs_['area']),0.15))\ncountry_aggs_['PopulationFatality'] = country_aggs_['TotalFatalities']\/country_aggs_['population_size']\n#country_aggs_['Total_deaths_per_million_forecast'] = country_aggs_['total_deaths_forecast']\/(country_aggs_['population_size']\/1000000.0)","8e58b947":"display(country_aggs_.shape)\nsum(country_aggs_['peak_deaths_already_occurred_indicator'])","268fa29b":"country_aggs_[['Country','Total_deaths_per_million','age_adjusted_risk']].sort_values('Total_deaths_per_million',ascending = False)","fb76310a":"country_aggs_['Total_deaths_per_million'].describe()","236c642e":"def corrdot(*args, **kwargs):\n    corr_r = args[0].corr(args[1], 'pearson')\n    corr_text = f\"{corr_r:2.2f}\".replace(\"0.\", \".\")\n    ax = plt.gca()\n    ax.set_axis_off()\n    marker_size = abs(corr_r) * 10000\n    ax.scatter([.5], [.5], marker_size, [corr_r], alpha=0.6, cmap=\"coolwarm\",\n               vmin=-1, vmax=1, transform=ax.transAxes)\n    font_size = abs(corr_r) * 40 + 5\n    ax.annotate(corr_text, [.5, .5,],  xycoords=\"axes fraction\",\n                ha='center', va='center', fontsize=font_size)\n","85ae16fc":"#dataset = country_aggs_[['Total_deaths_per_million_forecast',\"Lower_respiratory_infections\",\"Protein_energy_malnutrition\",\"Cardiovascular_diseases\",\"Respiratory_diseases\",\"HIV_AIDS\",\"Tuberculosis\",\"Diabetes\"]]\ncountry_aggs_['Total_deaths_per_million_log'] = np.log(country_aggs_['Total_deaths_per_million'])\ndataset = country_aggs_[['Total_deaths_per_million_log',\"Lower_respiratory_infections\",\"Cardiovascular_diseases\",\"Respiratory_diseases\",\"HIV_AIDS\",\"Tuberculosis\"]]\nsns.set(style='white', font_scale=1.0)\n\ng = sns.PairGrid(dataset, aspect=1.4, diag_sharey=False)\ng.map_lower(sns.regplot, lowess=True, ci=False, line_kws={'color': 'black'})\ng.map_diag(sns.distplot, kde_kws={'color': 'black'})\ng.map_upper(corrdot)\nplt.show()","e1dd7ff2":"disease.head()","951b036b":"country_aggs_['Tuberculosis_Rank'] = country_aggs_['Tuberculosis'].rank()\ncountry_aggs_[\"Lower_respiratory_infections_Rank\"] = country_aggs_['Lower_respiratory_infections'].rank()\ncountry_aggs_[\"Cardiovascular_diseases_Rank\"] = country_aggs_['Cardiovascular_diseases'].rank()\ncountry_aggs_[\"Respiratory_diseases_Rank\"] = country_aggs_['Respiratory_diseases'].rank()\ncountry_aggs_[\"HIV_AIDS_Rank\"] = country_aggs_['HIV_AIDS'].rank()\ncountry_aggs_[\"Hepatitis_Rank\"] = country_aggs_['Hepatitis'].rank()\ncountry_aggs_[\"Diarrheal_diseases_Rank\"] = country_aggs_['Diarrheal_diseases'].rank()\n##\ncountry_aggs_['Hygiene_Rank_'] = country_aggs_[['Hepatitis_Rank','Tuberculosis_Rank','Diarrheal_diseases_Rank','HIV_AIDS_Rank']].mean(axis=1)\ncountry_aggs_['Dread_Disease_Rank'] = country_aggs_[['Lower_respiratory_infections_Rank','Cardiovascular_diseases_Rank','Respiratory_diseases_Rank','HIV_AIDS_Rank']].mean(axis=1)\n#Dec\ncountry_aggs_[\"Lower_respiratory_infections_Dec\"] = pd.qcut(country_aggs_['Lower_respiratory_infections'], 10, labels=False)\ncountry_aggs_[\"Total_deaths_per_million_Dec\"] = pd.qcut(country_aggs_['Total_deaths_per_million'], 10, labels=False)\n#Hygiene\ncountry_aggs_['Tuberculosis_Dec'] = pd.qcut(country_aggs_['Tuberculosis'], 10, labels=False)\ncountry_aggs_[\"HIV_AIDS_Dec\"] = pd.qcut(country_aggs_['HIV_AIDS'], 10, labels=False)\ncountry_aggs_[\"Hepatitis_Dec\"] = pd.qcut(country_aggs_['Hepatitis'], 10, labels=False)\ncountry_aggs_[\"Diarrheal_diseases_Dec\"] = pd.qcut(country_aggs_['Diarrheal_diseases'], 10, labels=False)\n#Comorbid\ncountry_aggs_[\"Cardiovascular_diseases_Dec\"] = pd.qcut(country_aggs_['Cardiovascular_diseases'], 10, labels=False)\ncountry_aggs_[\"Respiratory_diseases_Dec\"] = pd.qcut(country_aggs_['Respiratory_diseases'], 10, labels=False)\ncountry_aggs_[\"Kidney_disease_Dec\"] = pd.qcut(country_aggs_['Kidney_disease'], 10, labels=False)\ncountry_aggs_[\"Dementia_Dec\"] = pd.qcut(country_aggs_['Dementia'], 10, labels=False)\ncountry_aggs_[\"Diabetes_Dec\"] = pd.qcut(country_aggs_['Diabetes'], 10, labels=False)\n\ncountry_aggs_['Hygiene_Dec_'] = country_aggs_[['Hepatitis_Dec','Tuberculosis_Dec','Diarrheal_diseases_Dec','HIV_AIDS_Dec']].mean(axis=1)\ncountry_aggs_['Comorbid_Dec'] = country_aggs_[['Cardiovascular_diseases_Dec','Respiratory_diseases_Dec','Kidney_disease_Dec','Dementia_Dec','Diabetes_Dec']].mean(axis=1)","477f372e":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\ncountry_aggs_['Tuberculosis_mm'] = 0\ncountry_aggs_['HIV_AIDS_mm'] = 0\ncountry_aggs_['Hepatitis_mm'] = 0\ncountry_aggs_['Diarrheal_diseases_mm'] = 0\n\ncountry_aggs_['Cardiovascular_diseases_mm'] = 0\ncountry_aggs_['Respiratory_diseases_mm'] = 0\ncountry_aggs_['Kidney_disease_mm'] = 0\ncountry_aggs_['Dementia_mm'] = 0\ncountry_aggs_['Diabetes_mm'] = 0\n\n\ncountry_aggs_[['Tuberculosis_mm', 'HIV_AIDS_mm', 'Hepatitis_mm', 'Diarrheal_diseases_mm']] = scaler.fit_transform(country_aggs_[['Tuberculosis', 'HIV_AIDS', 'Hepatitis', 'Diarrheal_diseases']])\ncountry_aggs_[['Cardiovascular_diseases_mm', 'Respiratory_diseases_mm', 'Kidney_disease_mm', 'Dementia_mm','Diabetes_mm']] = scaler.fit_transform(country_aggs_[['Cardiovascular_diseases', 'Respiratory_diseases', 'Kidney_disease', 'Dementia','Diabetes']])\n\ncountry_aggs_['Tuberculosis_mm'] = country_aggs_['Tuberculosis_mm']*100.0\ncountry_aggs_['HIV_AIDS_mm'] = country_aggs_['HIV_AIDS_mm']*100.0\ncountry_aggs_['Hepatitis_mm'] = country_aggs_['Hepatitis_mm']*100.0\ncountry_aggs_['Diarrheal_diseases_mm'] = country_aggs_['Diarrheal_diseases_mm']*100.0\n\ncountry_aggs_['Cardiovascular_diseases_mm'] = country_aggs_['Cardiovascular_diseases_mm']*100.0\ncountry_aggs_['Respiratory_diseases_mm'] = country_aggs_['Respiratory_diseases_mm']*100.0\ncountry_aggs_['Kidney_disease_mm'] = country_aggs_['Kidney_disease_mm']*100.0\ncountry_aggs_['Dementia_mm'] = country_aggs_['Dementia_mm']*100.0\ncountry_aggs_['Diabetes_mm'] = country_aggs_['Diabetes_mm']*100.0\n\ncountry_aggs_['Hygiene_mm'] = country_aggs_[['Hepatitis_mm','Tuberculosis_mm','Diarrheal_diseases_mm','HIV_AIDS_mm']].mean(axis=1)\ncountry_aggs_['Comorbid_mm'] = country_aggs_[['Cardiovascular_diseases_mm','Respiratory_diseases_mm','Kidney_disease_mm','Dementia_mm','Diabetes_mm']].max(axis=1)","852e748d":"pd.set_option('display.max_rows', None)\ncountry_aggs_[['Tuberculosis', 'HIV_AIDS', 'Hepatitis', 'Diarrheal_diseases']].describe()","d7179006":"(country_aggs_['Hygiene_mm']).describe()","0dab6056":"display(country_aggs_['Obesity_rate'].corr(country_aggs_['Comorbid_Dec']))\ndisplay(country_aggs_['Obesity_rate'].corr(country_aggs_['Hygiene_Dec_']))","88045113":"country_aggs_['Dread_Disease_Rank_'] = country_aggs_[['Lower_respiratory_infections_Rank','Cardiovascular_diseases_Rank','Respiratory_diseases_Rank','HIV_AIDS_Rank']].sum(axis=1)","49e01bc0":"dataset = country_aggs_[['Total_deaths_per_million','Hepatitis','Tuberculosis','Diarrheal_diseases','HIV_AIDS','Hygiene_Dec_']]\n#adhoc = country_aggs_[country_aggs_['Total_deaths_per_million'] < 300]\n#dataset = adhoc[['Total_deaths_per_million','Hepatitis_Dec','Tuberculosis_Dec','Diarrheal_diseases_Dec','HIV_AIDS_Dec','Hygiene_Dec_']]\n\nsns.set(style='white', font_scale=1.0)\n\ng = sns.PairGrid(dataset, aspect=1.4, diag_sharey=False)\ng.map_lower(sns.regplot, lowess=True, ci=False, line_kws={'color': 'black'})\ng.map_diag(sns.distplot, kde_kws={'color': 'black'})\ng.map_upper(corrdot)\nplt.show()","518f0ec8":"dataset = country_aggs_[['Total_deaths_per_million','Cardiovascular_diseases_Dec','Respiratory_diseases_Dec','Kidney_disease_Dec','Dementia_Dec','Diabetes_Dec','Comorbid_Dec']]\nsns.set(style='white', font_scale=1.0)\n\ng = sns.PairGrid(dataset, aspect=1.4, diag_sharey=False)\ng.map_lower(sns.regplot, lowess=True, ci=False, line_kws={'color': 'black'})\ng.map_diag(sns.distplot, kde_kws={'color': 'black'})\ng.map_upper(corrdot)\nplt.show()","420126b3":"q_low = country_aggs_[\"Total_deaths_per_million\"].quantile(0.05)\nq_hi  = country_aggs_[\"Total_deaths_per_million\"].quantile(0.95)\n\ndisplay(q_low)\ndisplay(q_hi)\n\n# create filtered subset in case:\ncountry_aggs_filtered = country_aggs_[(country_aggs_[\"Total_deaths_per_million\"] < q_hi) & (country_aggs_[\"Total_deaths_per_million\"] > q_low)]\ndisplay(country_aggs_filtered.shape)\n# create dummy var:\ncountry_aggs_['Dummy_outlier'] = np.where(country_aggs_.Total_deaths_per_million < q_hi,0,1)\ncountry_aggs_['Dummy_outlier_lower'] = np.where(country_aggs_.Total_deaths_per_million < q_low,1,0)","b34a58a8":"#Quick inspection\ncountry_aggs_[['Country','Total_deaths_per_million','TotalConfirmedCases','TotalFatalities','Dummy_outlier']].sort_values('Total_deaths_per_million',ascending =False).head(10)","a5517b09":"X = country_aggs_[['Obesity_rate','age_adjusted_risk','gdp_estimate_ppp','Tuberculosis','HIV_AIDS','Cardiovascular_diseases_mm','Dummy_outlier']]\nX.isna().sum()","5f2f56a2":"#regression imputation\n#obesity\nobesity_model = ols(formula = 'Obesity_rate ~ Total_deaths_per_million_log + age_adjusted_risk + gdp_estimate_ppp  + Tuberculosis + HIV_AIDS  + Cardiovascular_diseases_mm + Dummy_outlier', data=country_aggs_).fit()\nobesity_model.summary()\ncountry_aggs_['Obesity_rate_pred'] = obesity_model.predict(country_aggs_[['Total_deaths_per_million_log','age_adjusted_risk','gdp_estimate_ppp','Tuberculosis','HIV_AIDS','Cardiovascular_diseases_mm','Dummy_outlier']])\ncountry_aggs_.Obesity_rate.fillna(country_aggs_.Obesity_rate_pred, inplace=True)\n\n# gdp est ppp\ngdp_est_ppp_model = ols(formula = 'gdp_estimate_ppp ~ Obesity_rate + Total_deaths_per_million_log + age_adjusted_risk  + Tuberculosis + HIV_AIDS + Cardiovascular_diseases_mm + Dummy_outlier', data=country_aggs_).fit()\ngdp_est_ppp_model.summary()\ncountry_aggs_['gdp_est_ppp_model_pred'] = gdp_est_ppp_model.predict(country_aggs_[['Obesity_rate','Total_deaths_per_million_log','age_adjusted_risk','Tuberculosis','HIV_AIDS','Cardiovascular_diseases_mm','Dummy_outlier']])\ncountry_aggs_.gdp_estimate_ppp.fillna(country_aggs_.gdp_est_ppp_model_pred, inplace=True)","233521a7":"X = country_aggs_[['Obesity_rate','age_adjusted_risk','gdp_estimate_ppp','Tuberculosis','HIV_AIDS','Cardiovascular_diseases_mm','Dummy_outlier']]\nX.isna().sum()","20625a11":"from statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom patsy import dmatrices\n# Break into left and right hand side; y and X\ny, X = dmatrices(\"Total_deaths_per_million ~ Obesity_rate + age_adjusted_risk + gdp_estimate_ppp  + Tuberculosis + HIV_AIDS +Density_overall +Cardiovascular_diseases_mm + Dummy_outlier\", data=country_aggs_, return_type=\"dataframe\")\n\n# For each Xi, calculate VIF\n\ndef calc_vif(X):\n# Calculating VIF\n    vif = pd.DataFrame()\n    vif[\"variables\"] = X.columns\n    vif[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n    return(vif)\ncalc_vif(X)\n\n# first value is intercept, ignore.","cc77d8f8":"from statsmodels.formula.api import ols\n#adhoc = country_aggs_[country_aggs_['Total_deaths_per_million_log'] <1000]\n#model_custom = ols(formula = 'np.log(Total_deaths_per_million) ~  age_adjusted_risk + population_size + Density_overall * Obesity_rate : Median_Age  + np.power(UV_radiation,10) + gdp_estimate_ppp + np.power(Inequality_spatial_transformed,7) + np.power(StringencyIndex,7) + gov_response_fraction_DPM ', data=country_aggs_).fit()\nmodel_custom = ols(formula = 'Total_deaths_per_million ~ Obesity_rate + age_adjusted_risk + gdp_estimate_ppp  + Tuberculosis + HIV_AIDS + Density_overall + Cardiovascular_diseases_mm + Dummy_outlier', data=country_aggs_).fit()\n\nmodel_custom.summary()","9e604759":"country_aggs_['Obesity_rate_med'] = country_aggs_.Obesity_rate > country_aggs_.Obesity_rate.median()\ncountry_aggs_['Obesity_rate_med'] = np.where(country_aggs_.Obesity_rate_med == False, \"Below Median\", \"Above Median\")\nsns.lmplot(x='Hygiene_Dec_', y='Total_deaths_per_million_log', hue='Obesity_rate_med', data=country_aggs_, ci=None, size=5, aspect=2.5)\nplt.title('Interaction between obesity and hygiene');","05ad16cf":"country_aggs_['Obesity_rate_med'] = country_aggs_.Obesity_rate > country_aggs_.Obesity_rate.median()\ncountry_aggs_['Obesity_rate_med'] = np.where(country_aggs_.Obesity_rate_med == False, \"Below Median\", \"Above Median\")\nsns.lmplot(x='gdp_estimate_ppp', y='Total_deaths_per_million_log', hue='Obesity_rate_med', data=country_aggs_, ci=None, size=5, aspect=2.5)\nplt.title('Interaction between obesity and income estimate');","ccd0c3ee":"def fit_linear_reg(X,Y):\n    #Fit linear regression model and return RSS and R squared values\n    model_k = linear_model.LinearRegression(fit_intercept = True)\n    model_k.fit(X,np.log(Y))\n    RSS = mean_squared_error(np.log(Y),model_k.predict(X)) * len(Y)\n    R_squared = model_k.score(X,np.log(Y))\n    return RSS, R_squared\n    ","ad453aa4":"#Importing tqdm for the progress bar\nfrom tqdm import tqdm_notebook\nfrom tqdm.notebook import trange\n\nX = country_aggs_[['age_adjusted_risk','Obesity_rate','Tuberculosis','HIV_AIDS','Cardiovascular_diseases_mm','Dummy_outlier','gdp_estimate_ppp']]\nY = country_aggs_[['Total_deaths_per_million']]\nk = 10\nRSS_list, R_squared_list, feature_list = [],[], []\nnumb_features = []\n\n#Looping over k = 1 to k = 11 features in X\nfor k in trange(1,len(X.columns) + 1, desc = 'Loop...'):\n\n    #Looping over all possible combinations: from 11 choose k\n    for combo in itertools.combinations(X.columns,k):\n        tmp_result = fit_linear_reg(X[list(combo)],Y)   #Store temp result \n        RSS_list.append(tmp_result[0])                  #Append lists\n        R_squared_list.append(tmp_result[1])\n        feature_list.append(combo)\n        numb_features.append(len(combo))   \n\n#Store in DataFrame\ndf = pd.DataFrame({'numb_features': numb_features,'RSS': RSS_list, 'R_squared':R_squared_list,'features':feature_list})","abc064f8":"df_max = df[df.groupby('numb_features')['R_squared'].transform(max) == df['R_squared']]\ndisplay(df_max.head(15))","5624ee37":"df['min_RSS'] = df.groupby('numb_features')['RSS'].transform(min)\ndf['max_R_squared'] = df.groupby('numb_features')['R_squared'].transform(max)\ndf[df['numb_features'] == 1].sort_values('R_squared', ascending=False).head(20)","ea840194":"\nfig = plt.figure(figsize = (16,6))\nax = fig.add_subplot(1, 2, 1)\n\nax.scatter(df.numb_features,df.RSS, alpha = .2, color = 'darkblue' )\nax.set_xlabel('# Features')\nax.set_ylabel('RSS')\nax.set_title('RSS - Best subset selection')\nax.plot(df.numb_features,df.min_RSS,color = 'r', label = 'Best subset')\nax.legend()\n\nax = fig.add_subplot(1, 2, 2)\nax.scatter(df.numb_features,df.R_squared, alpha = .2, color = 'darkblue' )\nax.plot(df.numb_features,df.max_R_squared,color = 'r', label = 'Best subset')\nax.set_xlabel('# Features')\nax.set_ylabel('R squared')\nax.set_title('R_squared - Best subset selection')\nax.legend()\n\nplt.show()","6355a9cb":"from statsmodels.formula.api import ols\n#model_custom = ols(formula = 'np.log(Total_deaths_per_million) ~  age_adjusted_risk + population_size + Density_overall * Obesity_rate : Median_Age  + np.power(UV_radiation,10) + gdp_estimate_ppp + np.power(Inequality_spatial_transformed,7) + np.power(StringencyIndex,7) + gov_response_fraction_DPM ', data=country_aggs_).fit()\n#model_custom = ols(formula = 'np.log(Total_deaths_per_million_forecast) ~  Tuberculosis + age_adjusted_risk + Obesity_rate + gdp_estimate_ppp', data=country_aggs_).fit()\nmodel_custom = ols(formula = '(Total_deaths_per_million_log) ~  Obesity_rate + Hygiene_mm + Comorbid_Dec + age_adjusted_risk + Dummy_outlier + np.log(total_cases_per_million) + Dummy_outlier_lower', data=country_aggs_).fit()\n#model_custom = ols(formula = '(Total_deaths_per_million) ~  Obesity_rate:Hygiene_mm + Comorbid_Dec + age_adjusted_risk + Dummy_outlier + Dummy_outlier_lower + np.power(Inequality_spatial_transformed,7) + gdp_estimate_ppp', data=country_aggs_).fit()\nmodel_custom.summary()","26d35156":"from sklearn.metrics import mean_squared_error, mean_absolute_error\n# See our Squared Mean Error score and Root Mean Squared Error:\n\n# train rmse\nmse = mean_squared_error(country_aggs_['Total_deaths_per_million'], model_custom.fittedvalues)\nrmse = np.sqrt(mse)\n# See our Mean Absolute Error\nprint(f\"_________________________________\")\nprint(f\"Mean Absolute Error\")\nprint(f\"---------------------------------\")\nprint(f\"the train MAE is: {mse}\")\nprint(f\"_________________________________\")\nprint(f\"Root Mean Square Error (RMSE)\")\nprint(f\"---------------------------------\")\nprint(f\"the train_rmse is: {rmse}\")\nprint(f\"_________________________________\")","7667a1ef":"country_aggs_['Total_deaths_per_million_pred'] = np.exp(model_custom.fittedvalues)\nx_ = country_aggs_['Total_deaths_per_million_pred']\ny_ = country_aggs_['Total_deaths_per_million']\ncountries = country_aggs_['Country']\n\nfig, ax = plt.subplots(figsize=(20,20))\n\nax.set_xlabel('Predicted Values', fontsize=14)\nax.set_ylabel('Actual Values', fontsize=14)\nax.set_title('COVID-19 Total_deaths_per_million Predictions by Country', fontsize=18)\n\nplt.scatter(x_,y_,color = \"blue\")\nfor label, xx, yy in zip(countries, x_, y_):\n    plt.annotate(label, xy = (xx, yy),fontsize = 9)\nplt.grid(True)\n\nplt.ylim(0,800)\nplt.xlim(0,800)\nplt.plot([0, 800], [0, 800], '--k') \nplt.show()","f84960bb":"country_aggs__ = country_aggs_[country_aggs_['Total_deaths_per_million'] <= 200]\n","9b7f788b":"\nx_ = country_aggs__['Total_deaths_per_million_pred']\ny_ = country_aggs__['Total_deaths_per_million']\ncountries = country_aggs__['Country']\n\nfig, ax = plt.subplots(figsize=(15,15))\n\nax.set_xlabel('Predicted Values', fontsize=14)\nax.set_ylabel('Actual Values', fontsize=14)\nax.set_title('COVID-19 Total_deaths_per_million Predictions by Country', fontsize=18)\n\nplt.scatter(x_,y_,color = \"blue\")\nfor label, xx, yy in zip(countries, x_, y_):\n    plt.annotate(label, xy = (xx, yy),fontsize = 9)\nplt.grid(True)\nplt.ylim(0,200)\nplt.plot([0, 200], [0, 200], '--k') \nplt.show()","eb8b835e":"pd.set_option('display.max_rows', None)\ncountry_aggs_[['Country','Total_deaths_per_million','Total_deaths_per_million_pred','TotalConfirmedCases','TotalFatalities']].sort_values('Total_deaths_per_million',ascending =False)","019ee0e3":"from sklearn.model_selection import train_test_split\ndf = country_aggs_[['Total_deaths_per_million','age_adjusted_risk','Median_Age','Tuberculosis','Hygiene_mm','Comorbid_mm','Obesity_rate']]\ndf = df.dropna()\nX = df[['age_adjusted_risk','Median_Age','Tuberculosis','Hygiene_mm','Comorbid_mm','Obesity_rate']]\ny = np.log(df[['Total_deaths_per_million']])\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)\nX_test","8c3e481c":"model_holdout = sm.OLS(y_train,X_train).fit()\nmodel_holdout.summary()\n# Calculate our y hat (how our model performs against the test data held off)\ny_hat_test = model_holdout.predict(X_test)\ny_hat_train = model_holdout.predict(X_train)\nmodel_holdout.summary()","ae542b1f":"# sns.distplot(country_aggs_['StringencyIndex'])\n# plt.show()","ad0a2009":"# country_aggs[['Country','StringencyIndex']].head(10)","948dc887":"from sklearn.metrics import mean_squared_error, mean_absolute_error\n# See our Squared Mean Error score and Root Mean Squared Error:\ntest_mse = mean_squared_error(y_test, np.exp(y_hat_test))\ntest_rmse = np.sqrt(test_mse)\n# train rmse\ntrain_mse = mean_squared_error(y_train, np.exp(y_hat_train))\ntrain_rmse = np.sqrt(train_mse)\n# See our Mean Absolute Error\ntest_mae = mean_absolute_error(y_test, np.exp(y_hat_test))\ntrain_mae = mean_absolute_error(y_train, np.exp(y_hat_train))\nprint(f\"_________________________________\")\nprint(f\"Mean Absolute Error\")\nprint(f\"---------------------------------\")\nprint(f\"the test MAE is: {test_mae}\")\nprint(f\"the train MAE is: {train_mae}\")\nprint(f\"_________________________________\")\nprint(f\"Root Mean Square Error (RMSE)\")\nprint(f\"---------------------------------\")\nprint(f\"the test_rmse is: {test_rmse}\")\nprint(f\"the train_rmse is: {train_rmse}\")\nprint(f\"_________________________________\")","a0b1fc0b":"x_ = np.exp(y_hat_test)\ny_ = y_test\n#countries = country_aggs__['Country']\n\nfig, ax = plt.subplots(figsize=(15,15))\n\nax.set_xlabel('Predicted Values', fontsize=14)\nax.set_ylabel('Actual Values', fontsize=14)\nax.set_title('COVID-19 Total_deaths_per_million Predictions by Country', fontsize=18)\n\nplt.scatter(x_,y_,color = \"blue\")\n#for label, xx, yy in zip(countries, x_, y_):\n#    plt.annotate(label, xy = (xx, yy),fontsize = 9)\nplt.grid(True)\n\nplt.plot([0, 800], [0, 800], '--k') \nplt.show()","5f082c42":"country_aggs_['fittedvalues_holdout'] = np.exp(model_holdout.predict(X))\npd.set_option('display.max_rows', None)\ncountry_aggs_[['Country','Total_deaths_per_million','Total_deaths_per_million_pred','fittedvalues_holdout','TotalConfirmedCases','TotalFatalities']].sort_values('Total_deaths_per_million',ascending=False)","4833c7b8":"Test a country:","bc004256":"1. This book explores modeling the population fatality rate (in either raw form, ie fatalities\/population, or in adjusted form, ie total deaths per million) using linear regression. The question of whether your traditional SEIR model applies in this pandemic (COVID-19) is a serious one. Many a SEIR model has got the preditcion way off. In particular it looks at the following features as possible predictors of fatality rates:\n\n* Median age by country\n* Number of coronavirus tests, cases, and fatalities by country\n* Obesity rates by country and gender\n* Risk-adjusted age of countries using deaths per 100 000 by age group and population pyramids. We use Sweden, Netherlands and Italy's statistics.\n* Government response data --ruled out after testing\n* GDP (PPP) for each country\n* Population density at highest level\n* Cigarette consumption --ruled out after testing\n* UV Radiation - https:\/\/apps.who.int\/gho\/data\/node.main.164 - Exposure to solar ultraviolet (UV) radiation. Possible proxy for Vitamin D? --ruled out after testing\n* Disease levels by country\n\nMore on the variables can be found here:https:\/\/github.com\/Eighty20\/covid-19-analysis\n\nWhile the final model can only account for roughly 60% of the variance, we must remember that there are many flaws with virus testing and data collection. An example of this would be the blind spot of asymptomatic people who dont present symtpoms or come forward.\n\nThe notebook is split into roughly 4 parts:\n\n    1. Data hydration and munging\n    2. Distribution and correlation plots\n        * general distribution plots\n        * disease correlation plot\n    3. Start modeling\n        * Model selection based on simple forward selection across the features\n        * Custom model\n        * Holdout model on simple linear regression\n            ** do lockdown regulations help much in keeping fatalities down?\n    4. Single country forecast\n\nData up to date as of 19 May 2020. Will update periodically.","5aaaf269":"Add in UV data: --ruled out","b36be199":"The above interaction is interprested as follows:\n\nWhen Obesity_rate is below the median, then there is a strong inverse relationship between response variable and hygiene proxy. However, when Obesity_rate is above the median, then there exists a weak positive relationship between response and hygiene.","3389ccd5":"# Start linear modeling\n\nHelper function for fitting linear regression:","ec0ec79e":"Zoom in a bit:","38931693":"# Data hydration and munging\nRead in the data. Data obtained from wonderful dataset here: https:\/\/github.com\/Eighty20\/covid-19-analysis","b86862f8":"Observe output of loop, rank by RSS and R_Squared:","9122850a":"# Outlier handling?\n\nCreate dummy for outliers top side.","ba28f381":"The above plot shows that disease prevalence in a country can account for some of the variance in the response variable. Let's try another approach to attempt to get better predictive ability out of the data. Let's create ranks for each of them and then test a combined rank:","631a79a4":"Correlation plot helper function:","315f42ec":"# Build custom model and calculate coefficients:","45bc9582":"# Hold out model:","8dd7907e":"Aggregate the data to the level of the country. Moreover, I am dropping countries with NA's, although I should probably look at imputing via regression at some point. This leaves us with 91 countries:","df725995":"The above interaction is interprested as follows:\n\nWhen Obesity_rate is below the median, then there is a strong positive relationship between response variable and income level. However, when Obesity_rate is above the median, then there exists a much weaker positive relationship response and income.","73d4d94b":"# Check for multicollinearity\n\nIn chapter 3 of the book \"An Introduction to Statistical Learning with Applications in R\", it is said that \"The smallest possible value for VIF is 1, which indicates the complete absence of collinearity. Typically in practice there is a small amount of collinearity among the predictors. As a rule of thumb, a VIF value that exceeds 5 or 10 indicates a problematic amount of collinearity\" - Gareth James , Daniela Witten , Trevor Hastie, and Robert Tibshirani.","04f573a2":"# Missing Data handling?\n\nregression imputation","685d929e":"Create merge function using fuzzy match:","def5f20b":"Assess fit:","960d69e0":"Add in cigarette data for possible use: --ruled out","5312b7fb":"Single variable prediction for importance:","1cc4881c":"Full table of rates and fitted rates:","2d22f6df":"Plot best subset:","1c483c2f":"Transform some variables after inspection:","ebabe1f2":"# Do lockdown regulations help much?\n\nThe Stringency Index in the model above stems from the work done on government response to the pandemic by the University of Oxford:\nhttps:\/\/www.bsg.ox.ac.uk\/research\/research-projects\/coronavirus-government-response-tracker\n\nThe stringency index used in the above model, in laymans terms, reflects to what level the government intervened to enforce social distancing amongst people, across borders, and more.\n\nAcording to the model run above, the StringencyIndex has a p-value of 0.7 odd, which is far from being significant in any way in explaining the variance in the response variable (that is the total deaths per million forecast).\n\nIn the below plot, the higher the index, the more intensive the regulations:","ca28418d":"Higiene variable:","0aadebbb":"Add in disease data:","477c3df4":"Comorbidity variable:","972df625":"Match the two:","cc33a603":"Create X and y and then loop over forward variable selection and record fit results:","08cff95d":"Compare test vs train errors. Ideally should be close to each other:","fbd97a8c":"# Feature engineering\n\nsimple ranking and deciles for testing:","a1785328":"Observe number of countries we are left with:","32b6d86c":"# Distribution and correlation plots\nObserve distribution of designated response variable:","9346004e":"MinMax scaling and scoring:","117334c7":"Calculate peak Total Deaths:"}}