{"cell_type":{"ddd9e09b":"code","5197ad22":"code","0e4b42a3":"code","99f2f8b6":"code","9a67b785":"code","f7812da7":"code","f69f12f3":"code","dafea850":"code","d5446ab7":"code","e1b208cf":"code","ae581b37":"code","5b233dab":"code","6dadde7c":"code","4f130b40":"code","6ded42fd":"code","7912a344":"code","5e700db6":"code","6c2c2037":"code","c1d52f90":"code","ebfd9d92":"code","5d110f48":"code","8cf39d51":"code","adabb5d0":"code","4f47c825":"code","c7048630":"code","6c3f46f7":"code","18479b2f":"code","4dd1f73e":"code","0f5bb1c5":"code","0354c8b1":"markdown","38c8ae5e":"markdown"},"source":{"ddd9e09b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5197ad22":"import numpy as np\nfrom numpy import array\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.basemap import Basemap\n\nfrom numpy import array\nfrom matplotlib import cm\nfrom matplotlib.dates import date2num\nfrom mpl_toolkits.basemap import Basemap\n\nfrom matplotlib.patches import Polygon\nfrom matplotlib.collections import PatchCollection\nfrom matplotlib.colors import Normalize","0e4b42a3":"df=pd.read_csv('..\/input\/ataljalyojana\/Atal Jal 31 March 2021 .xlsx - Sheet1.csv')\n","99f2f8b6":"df['Well Depth']=df['Well Depth'].replace(np.nan, 0)\n","9a67b785":"df['State']=df['State'].str.lower()\n","f7812da7":"fig=plt.figure(figsize=(20,20))\nmap=Basemap(width=1200000,height=900000,llcrnrlon=67,llcrnrlat=6, urcrnrlon=97, urcrnrlat=37, projection='lcc', lat_0=28, lon_0=77.)\nmap.drawmapboundary()\n#map.drawcounties()\nmap.drawcoastlines(linewidth=4, color='blue')\nmap.drawcountries(linewidth=4, color='red')\nmap.readshapefile('..\/input\/india-shape\/India_Districts_ADM2_GADM', 'india-shape')\nmap.drawlsmask(land_color='0.8', ocean_color='#7777ff', lakes=True)\nmap.shadedrelief()\n\nlg=array(df['Longitude'])\nlt=array(df['Latitude'])\npt=array(df['Well Depth'])\n\nx, y = map(lg, lt)\nwell_depth = df['Well Depth'].apply(lambda x: int(x))\nplt.scatter(x, y,s=well_depth,marker='*', cmap=cm.Dark2, linewidths=3)\nplt.title(\"Map of India with Longitute and Latitude \")\n\nplt.show()","f69f12f3":"fig=plt.figure(figsize=(20,20))\nmap=Basemap(width=1200000,height=900000,resolution='l',llcrnrlon=67,llcrnrlat=6, urcrnrlon=97, urcrnrlat=37, projection='lcc', lat_0=28, lon_0=77.)\nmap.drawmapboundary()\n#map.drawcounties()\nmap.drawcoastlines(linewidth=4, color='blue')\nmap.drawcountries(linewidth=2, color='black')\nmap.readshapefile('..\/input\/indian-states\/india_administrative_state_boundary', 'indian-states')\nmap.drawlsmask(land_color='0.8', ocean_color='#7777ff', lakes=True)\nmap.shadedrelief()\n#map.drawrivers(linewidth=2, linestyle='dotted', color='red')\n#map.drawlsmask(land_color='0.8', ocean_color='#7777ff', lakes=True)\nmap.etopo()\nmap.warpimage()\nmap.drawmeridians(range(0, 360, 10))\nmap.drawparallels(range(-90, 100, 1), linewidth=2, dashes=[4, 2], labels=[1,0,0,1], color='r', zorder=0 )\nmap.shadedrelief()\n\nlg=array(df['Longitude'])\nlt=array(df['Latitude'])\npt=array(df['Well Depth'])\n\nx, y = map(lg, lt)\nwell_depth = df['Well Depth'].apply(lambda x: int(x))\nplt.scatter(x, y,s=well_depth,marker='*', cmap=cm.Dark2, linewidths=3)\nplt.title(\"Map of India with Longitute and Latitude \")\n\nplt.show()","dafea850":"url='https:\/\/raw.githubusercontent.com\/Jurk06\/project-at-isi\/main\/data.csv'\ndf=pd.read_csv(url)","d5446ab7":"df.head()","e1b208cf":"fig=plt.figure(figsize=(20,20))\nmap=Basemap(width=1200000,height=900000,resolution='l',llcrnrlon=67,llcrnrlat=6, urcrnrlon=97, urcrnrlat=37, projection='lcc', lat_0=28, lon_0=77.)\nmap.drawmapboundary()\n#map.drawcounties()\nmap.drawcoastlines(linewidth=4, color='blue')\nmap.drawcountries(linewidth=2, color='black')\nmap.readshapefile('..\/input\/indian-states\/india_administrative_state_boundary', 'indian-states')\nmap.drawlsmask(land_color='0.8', ocean_color='#7777ff', lakes=True)\nmap.shadedrelief()\n#map.drawrivers(linewidth=2, linestyle='dotted', color='red')\n#map.drawlsmask(land_color='0.8', ocean_color='#7777ff', lakes=True)\nmap.etopo()\nmap.warpimage()\nmap.drawmeridians(range(0, 360, 10))\nmap.drawparallels(range(-90, 100, 1), linewidth=2, dashes=[4, 2], labels=[1,0,0,1], color='r', zorder=0 )\nmap.shadedrelief()\n\nlg=array(df['Longitude'])\nlt=array(df['Latitude'])\npt=array(df['Well Depth'])\n\nx, y = map(lg, lt)\nwell_depth = df['Well Depth'].apply(lambda x: int(x\/20))\nplt.scatter(x, y,s=well_depth,marker='.', cmap=cm.Dark2, linewidths=3)\nplt.title(\"Map of India with Longitute and Latitude \")\n\nplt.show()","ae581b37":"def plot_map(sizes, colorbarValue):\n\n    plt.figure(figsize=(19,20))\n    f, ax = plt.subplots(figsize=(19, 20))\n\n    # Setting up Basemap\n    map = Basemap(width=5000000, height=3500000, resolution='l', projection='aea', llcrnrlon=69,\n                  llcrnrlat=6, urcrnrlon=99, urcrnrlat=36, lon_0=78, lat_0=20, ax=ax)\n                  \n    # draw map boundaries\n    map.drawmapboundary()\n    map.drawcountries()\n    map.drawcoastlines()\n    map.readshapefile('..\/input\/indian-states\/india_administrative_state_boundary', 'indian-states')\n\n\n    # plotting cities on map using previously derived coordinates\n    x, y = map(array(df[\"Longitude\"]), array(df[\"Latitude\"]))\n    cs = map.scatter(x, y, s=sizes, marker=\"o\" ,c=sizes, cmap=cm.Dark2, alpha=0.5)\n\n    # adding colorbar\n    cbar = map.colorbar(cs, location='right',pad=\"5%\")\n    cbar.ax.set_yticklabels(colorbarValue)\n    plt.show()","5b233dab":"well_sizes = df[\"Well Depth\"].apply(lambda x: int(x\/10))\ncolorbarValue = np.linspace(df[\"Well Depth\"].min(), df[\"Well Depth\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(well_sizes, colorbarValue)","6dadde7c":"pd.crosstab(index=df['State'], columns=df['Well Depth'], margins=True)","4f130b40":"pre_well_sizes = df[\"Pre_2015\"].apply(lambda x: int(x\/10))\ncolorbarValue = np.linspace(df[\"Pre_2015\"].min(), df[\"Pre_2015\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(pre_well_sizes, colorbarValue)","6ded42fd":"pst_well_sizes = df[\"Pst_2015\"].apply(lambda x: int(x\/10))\ncolorbarValue = np.linspace(df[\"Pst_2015\"].min(), df[\"Pst_2015\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(pst_well_sizes, colorbarValue)","7912a344":"pd.crosstab(index=df['State'], columns=df['Pre_2016'], margins=True)","5e700db6":"pre_well_sizes = df[\"Pre_2016\"].apply(lambda x: int(x\/10))\ncolorbarValue = np.linspace(df[\"Pre_2016\"].min(), df[\"Pre_2016\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(pre_well_sizes, colorbarValue)","6c2c2037":"pd.crosstab(index=df['State'], columns=df['Pst_2016'], margins=True)","c1d52f90":"pre_well_sizes = df[\"Pst_2016\"].apply(lambda x: int(x\/10))\ncolorbarValue = np.linspace(df[\"Pst_2016\"].min(), df[\"Pst_2016\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(pre_well_sizes, colorbarValue)","ebfd9d92":"pd.crosstab(index=df['State'], columns=df['Pre_2017'], margins=True)","5d110f48":"pre_well_sizes = df[\"Pre_2017\"].apply(lambda x: int(x\/10))\ncolorbarValue = np.linspace(df[\"Pre_2017\"].min(), df[\"Pre_2017\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(pre_well_sizes, colorbarValue)","8cf39d51":"pd.crosstab(index=df['State'], columns=df['Pst_2017'], margins=True)","adabb5d0":"pre_well_sizes = df[\"Pst_2017\"].apply(lambda x: int(x\/10))\ncolorbarValue = np.linspace(df[\"Pst_2017\"].min(), df[\"Pst_2017\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(pre_well_sizes, colorbarValue)","4f47c825":"pd.crosstab(index=df['State'], columns=df['Pre_2018'], margins=True)","c7048630":"pre_well_sizes = df[\"Pre_2018\"].apply(lambda x: int(x\/10))\ncolorbarValue = np.linspace(df[\"Pre_2018\"].min(), df[\"Pre_2018\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(pre_well_sizes, colorbarValue)","6c3f46f7":"pd.crosstab(index=df['State'], columns=df['Pst_2018'], margins=True)","18479b2f":"pre_well_sizes = df[\"Pst_2018\"].apply(lambda x: int(x\/10))\ncolorbarValue = np.linspace(df[\"Pst_2018\"].min(), df[\"Pst_2018\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(pre_well_sizes, colorbarValue)","4dd1f73e":"pd.crosstab(index=df['State'], columns=df['Pre_2019'], margins=True)","0f5bb1c5":"pre_well_sizes = df[\"Pre_2019\"].apply(lambda x: int(x\/10))\ncolorbarValue = np.linspace(df[\"Pre_2019\"].min(), df[\"Pre_2019\"].max(), \n                            num=10)\ncolorbarValue = colorbarValue.astype(int)\n\nplot_map(pre_well_sizes, colorbarValue)","0354c8b1":"# Reading the processed data","38c8ae5e":"# Plotiing the pre_2015"}}