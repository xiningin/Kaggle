{"cell_type":{"9a0ffa43":"code","b42d1f82":"code","f5bed932":"code","3c5e7628":"code","81296d88":"code","a78f5ea6":"code","902ff6c6":"code","aa293c93":"markdown","2e5e18ec":"markdown","4eed6aca":"markdown"},"source":{"9a0ffa43":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b42d1f82":"!pip install xlrd==1.2.0","f5bed932":"from tqdm.auto import tqdm\nfrom ast import literal_eval\ntqdm.pandas()\nimport numpy as np\n# mapping\nxl_file = pd.ExcelFile(\"\/kaggle\/input\/grapheme-filter\/grapheme_mapping.xlsx\")\nmapping_df = xl_file.parse('Sheet1') \nmapping_df=mapping_df[[\"grapheme\",\"takla\"]]\n# translit\nxl_file = pd.ExcelFile(\"..\/input\/grapheme-filter\/transliterated_en.xlsx\")\ntranslit_df = xl_file.parse('Sheet1') \ntranslit_df=translit_df[[\"word\",\"english\"]]\n# word2grapheme\nw2g=pd.read_csv(\"..\/input\/grapheme-filter\/word2grapheme.csv\")\nw2g.graphemes=w2g.graphemes.progress_apply(lambda x: literal_eval(x))\n# roots\nroots=pd.read_csv(\"..\/input\/grapheme-filter\/classes.csv\")\nroots=roots.loc[roots.component_type==\"grapheme_root\"]\nroots=roots.component.tolist()\n","3c5e7628":"# # clean \n# known=mapping_df.grapheme.tolist()\n# w2g[\"known\"]=w2g.graphemes.progress_apply(lambda x: x if set(x)<=set(known) else np.nan)\n# w2g.dropna(inplace=True)\n# w2g[\"takla\"]=w2g.graphemes.progress_apply(lambda x: \"\".join([mapping_df.takla.loc[mapping_df.grapheme == g].tolist()[0] for g in x]))\n# w2g","81296d88":"co=0\nfor r in roots:\n    print(f\"'{r}',\",end=' ')\n    co+=1\n    if co%20==0:\n        print()\n","a78f5ea6":"root='\u09a8\u09cd\u09a6'\nnum_examples=5","902ff6c6":"_df=w2g.copy()\n_df=_df.sample(frac=1)\n# get words\n_df.graphemes=w2g.graphemes.progress_apply(lambda x: x if root in x else np.nan)\n_df.dropna(inplace=True)\n# filter unknown\nknown=mapping_df.grapheme.tolist()\n_df[\"known\"]=_df.graphemes.progress_apply(lambda x: x if set(x)<=set(known) else np.nan)\n_df.dropna(inplace=True)\n\n# locate roots\ndef locate_root(x):\n    if x[0]==root:\n        return \"start\"\n    elif x[-1]==root:\n        return \"end\"\n    else:\n        return \"middle\"\n_df[\"location\"]=_df.graphemes.progress_apply(lambda x: locate_root(x))\n# take n examples    \ns_df=_df.loc[_df.location==\"start\"]\ns_df=s_df.head(num_examples)\ne_df=_df.loc[_df.location==\"end\"]\ne_df=e_df.head(num_examples)\nm_df=_df.loc[_df.location==\"middle\"]\nm_df=m_df.head(num_examples)\n# takla\ndf=pd.concat([s_df,e_df,m_df],ignore_index=True)\ndf[\"takla\"]=df.graphemes.progress_apply(lambda x: \"\".join([mapping_df.takla.loc[mapping_df.grapheme == g].tolist()[0] for g in x]))\ndf","aa293c93":"# Ignore-2 \/takla operation","2e5e18ec":"# Select a root from previous cell output","4eed6aca":"# Ignore"}}