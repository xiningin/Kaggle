{"cell_type":{"c5b62ce3":"code","92a8f469":"code","94cc7885":"code","32ebea95":"code","1593d647":"code","93067edb":"code","f057c435":"code","eb4a66a6":"code","b2759b9e":"code","017309b8":"code","6d69abfd":"code","1d1e89f4":"markdown","f4be0478":"markdown","111fc334":"markdown","154ae475":"markdown","0bc3896b":"markdown","fe50ffca":"markdown","f38c2026":"markdown"},"source":{"c5b62ce3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfrom sklearn.metrics import accuracy_score, cohen_kappa_score\nimport random\nfrom tqdm.notebook import tqdm\n\nrandom.seed(42)\nnp.random.seed(42)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\ndata_dir = \"\/kaggle\/input\/data-science-bowl-2019\/\"\ndf_labels = pd.read_csv(os.path.join(data_dir, \"train_labels.csv\"))\n# Any results you write to the current directory are saved as output.","92a8f469":"probas = df_labels.accuracy_group.value_counts(normalize=True)\nprobas.head()","94cc7885":"df_gt_simulated = np.random.choice(probas.index.values, 7000, p=probas.values)","32ebea95":"pd.Series(df_gt_simulated).value_counts(normalize=True)","1593d647":"df_pred_simulated = df_gt_simulated.copy()\ncohen_kappa_score(df_gt_simulated, df_pred_simulated, weights='quadratic')","93067edb":"inds_to_shuffle = np.random.choice(range(len(df_gt_simulated)), int(len(df_gt_simulated) * 0.6))\ndf_pred_simulated[inds_to_shuffle] = np.random.permutation(df_pred_simulated[inds_to_shuffle])\ncohen_kappa_score(df_gt_simulated, df_pred_simulated, weights='quadratic'), accuracy_score(df_gt_simulated, df_pred_simulated)","f057c435":"scores = []\nfor t, p in zip(np.split(df_gt_simulated, 7), np.split(df_pred_simulated, 7)):\n    score = cohen_kappa_score(t, p, weights='quadratic')\n    print(\"fold score: \", score)\n    scores.append(score)\nprint(\"Mean score: \", np.mean(scores))","eb4a66a6":"min(scores), max(scores)","b2759b9e":"real_kappas = []\nfold_kappas = []\nfor t in tqdm(range(100, 1, -1)):\n    df_pred_simulated = df_gt_simulated.copy()\n    inds_to_shuffle = np.random.choice(range(len(df_gt_simulated)), int(len(df_gt_simulated) * t \/ 100))\n    df_pred_simulated[inds_to_shuffle] = np.random.permutation(df_pred_simulated[inds_to_shuffle])\n    real_kappa = cohen_kappa_score(df_gt_simulated, df_pred_simulated, weights='quadratic')\n    scores = []\n    for t, p in zip(np.split(df_gt_simulated, 7), np.split(df_pred_simulated, 7)):\n        scores.append(cohen_kappa_score(t, p, weights='quadratic'))\n    for s in scores:\n        real_kappas.append(real_kappa)\n        fold_kappas.append(s)","017309b8":"pd.DataFrame({\"real_kappas\": real_kappas, \"fold_kappas\": fold_kappas}).plot.scatter(x=\"real_kappas\", y=\"fold_kappas\", grid=True)","6d69abfd":"pd.DataFrame({\"real_kappas\": real_kappas, \"fold_kappas\": fold_kappas}).groupby(\"real_kappas\").agg(['min', 'max']).plot()","1d1e89f4":"Generate private test set simulation","f4be0478":"Shuffle part of predictions to simulate a non-overfit model with realistic accuracy","111fc334":"How much does this trust interval change over the real value for kappa?","154ae475":"**How much should we trust public LB for DSBowl competition?**\n\nWe have 1000 samples in public test and around 7000 in full test set. So let's simulate the model fit to the complete set with a certain kappa and see, how does the score vary on different folders choosen as public LB.\n","0bc3896b":"Conclusions:\n* In this competition it is very easy to overfit to public LB and that will backfire badly.\n* Hold-out set validation means virtually nothing here.\n* CV can be trusted. In case there is no leaks or train\/test domain differences.","fe50ffca":"Check the target distribution for train set.","f38c2026":"The model that would score 0.55 on private can give from 0.527 to 0.571 on public"}}