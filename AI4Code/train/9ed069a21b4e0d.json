{"cell_type":{"6e6db55b":"code","2cdf1bdb":"code","eb73ec48":"code","65671f24":"code","7785f12d":"code","ecbf8fb8":"code","e9c2e54c":"code","caad548f":"code","85e38487":"code","020ca9a9":"code","b0fffd75":"code","20a07591":"code","a5c7ee02":"code","d21b82f2":"code","595c7e5e":"code","70b07827":"code","dfe02d0a":"code","585adc41":"code","8786dfcd":"code","284c6ec7":"code","13d7335f":"code","0e003ece":"code","a084d55a":"code","3ead6df6":"code","149ff96b":"code","d21c8718":"code","e3ad4a12":"code","4a674fb6":"code","77bb0ed7":"code","0de42fd9":"code","eb3d7807":"code","d67444c3":"code","523a6e06":"code","f48a0cf7":"code","50936653":"code","5865ef1c":"code","c0fe4293":"code","b197ca8c":"code","d215bec9":"code","7a1c28e5":"code","dbc1ab07":"code","2d99a617":"code","32d184df":"code","cd2cfb10":"code","e9dcf4b3":"code","191606f1":"code","6e724a44":"code","62bf309d":"code","ca9f8278":"code","5e5cb964":"code","1c050080":"code","337bf3b7":"code","8c3a0a5e":"code","1d76335c":"code","0b668076":"code","48a84a9f":"code","6e29d5b9":"code","a9f8a1bf":"code","400c9a30":"code","49d3595e":"code","42bf9e38":"code","b265e9f1":"code","faad1aea":"code","9380b367":"code","3779e156":"code","fececa8d":"code","e01ff18c":"code","08f98837":"code","6704a523":"code","48442409":"code","8329cb6c":"code","8329ffc4":"code","a0ac89cf":"code","f463bd52":"code","b383fff2":"code","b102ac8e":"code","add1dbf0":"code","c6470e0d":"code","90dad41f":"code","c11caa07":"code","f2279377":"code","b0a9ec6e":"code","9a8e3980":"code","2545668e":"code","7c473f26":"code","47f95761":"code","f19fe78b":"code","afceafa4":"code","e23bf421":"code","bed9ea1f":"code","370a48eb":"code","fb461da0":"code","ccd72f41":"code","dcf4e9b6":"code","37cbe89f":"code","6d917ec8":"code","189535c1":"code","c552e5e7":"code","f71603a2":"code","41d0cfa2":"code","e4edccee":"code","59dd7d70":"code","921ff4a4":"code","dc18386e":"code","5d0fdf08":"code","a5a1818d":"code","838ea57f":"code","a3ebb616":"code","dc6c2bfc":"code","5307b606":"code","87b51f1d":"code","373ddbb8":"code","674242b5":"code","90837104":"code","b5760204":"code","9c3be052":"code","1bf06555":"code","199c731a":"code","e4dd73e0":"code","0d6811f2":"code","af79c9ab":"code","b0ecd4f3":"code","2c86b18a":"code","0763d6f4":"code","5c5bae40":"code","9cb347c7":"code","27e3340b":"code","1bba338a":"code","3925fbf1":"code","5d8f2e1b":"code","2c3885a9":"code","13491935":"code","5f46368a":"code","9324cee8":"code","b8a847b8":"code","484e6d2c":"code","1d323846":"code","397faaf8":"code","6ea09337":"code","66d6dd59":"code","43a60f36":"code","2bf75c94":"code","4863df09":"code","72cf0f70":"code","98ba50a6":"code","55382988":"code","6bac7362":"code","e06d8542":"code","69cb92ff":"code","90e53984":"code","b7ee45a1":"code","84961ba8":"code","39b3544c":"code","087fe261":"code","a751bd00":"code","e96c7de4":"code","be60b60b":"code","38a3c4dc":"code","0a5250bf":"code","0e13d4ae":"code","eb2ffc2e":"code","28061334":"code","79916db5":"code","582cdd42":"code","e2eb2a6f":"code","6b2bc283":"code","27fc2839":"code","4ce5be3a":"code","3299f70f":"code","3c50a4ab":"code","b2dad9e8":"code","23741153":"code","7c729e40":"code","b1cf530e":"code","92eb4bbf":"code","8712fc69":"code","5919a487":"code","e458609a":"code","1d4eb395":"code","f539aa5b":"code","53d54e24":"code","51663116":"code","9c96d225":"code","2b18229e":"code","661dc70c":"code","74764635":"code","a08d9f87":"code","d650b21e":"code","c60d3239":"code","6117c5b5":"code","cd0bdfd2":"code","2f74569c":"code","d5a2b305":"code","eca83a2e":"code","17f7f350":"code","2a33c878":"code","b800c5eb":"code","22433e32":"code","c7ab3dfd":"code","00326e42":"code","f3041d36":"code","ba88b7a3":"code","656c7202":"code","1f63cebb":"code","f14ee536":"code","819e8758":"code","a0e455c8":"code","467eb01b":"code","94dadf72":"code","ef602fb8":"code","ba31267b":"code","591e114e":"code","e45870d9":"code","ee9cd81e":"code","e0f4448f":"code","e074254a":"code","b1a0679a":"code","84a09f2c":"code","037385fb":"code","daa377cd":"code","c3d7bd23":"code","d146076c":"code","021a6573":"code","d1687f87":"code","aac5363d":"code","93359aff":"code","41367668":"code","3016e11f":"code","44661646":"code","bdfc2324":"code","5d4befcb":"code","a133002b":"code","d2ad293f":"code","99953ef3":"code","cccafa18":"code","8b3eeff7":"code","7f21b912":"code","1bc1e976":"code","1e775c50":"code","82ca1ec6":"code","919d8378":"code","7582bff7":"code","9950de9b":"code","06a9df71":"code","11a908ac":"code","790b5950":"code","ace48c2b":"code","64386904":"code","32dc147c":"code","3e37eace":"code","ee799487":"code","6f296ba9":"code","6f81a12a":"code","6745300d":"code","21661c84":"code","01382ccd":"code","e1593e63":"code","6b1a10bb":"code","80f8f796":"code","c5b299cf":"code","baada434":"code","8f1c8385":"code","e9c1ff37":"code","07742486":"code","f8934f99":"code","63f923c5":"code","d51ecfef":"code","5a75c48e":"code","a18a2eb9":"code","3d4a95e3":"code","a3befe24":"code","2957a4d5":"code","8b5514b6":"code","4a6a3276":"code","729cacf7":"code","87ff85de":"code","2a79808d":"code","119ac427":"code","c1caaa1f":"code","d6c92a81":"code","1d565912":"code","03315ba6":"code","1709a49e":"code","da684476":"code","1014f933":"code","d45ca210":"code","a17efacb":"code","6241d25a":"code","7990a8cb":"code","6b6b932f":"code","63b92913":"code","7c2f4c1a":"code","2c4f7406":"code","88b64bd2":"code","8f35ca85":"code","1b76dc9d":"code","fa4b606b":"code","dd80ce0c":"code","5ddee09b":"code","b507b93b":"code","192546f3":"code","060e6a9f":"code","0d51a50a":"code","41fe0f8d":"code","e56c0467":"code","275880c0":"code","d8e74ed0":"code","f34cf408":"code","d10c4f1c":"code","8d1094df":"code","73c41100":"code","1d54f095":"code","d6136f69":"code","3e0bc81e":"code","198e9085":"code","d1692c56":"code","3fbb6f77":"code","9e5894b1":"code","f5b3f162":"code","2c399eeb":"code","2fb754f6":"code","946a8467":"code","ed087729":"code","88109476":"code","75464b0e":"code","51b85096":"code","d107df33":"code","f05af1d9":"code","f3e06a88":"code","29953e40":"code","568f75f6":"code","2c8f0dde":"code","92755938":"code","62ff07f3":"code","87445722":"code","1e9226c2":"code","7fbd0efa":"code","1764d49f":"code","4d64ccfe":"code","25f7ad82":"code","fc1fcb45":"code","3a49d73e":"code","a95410f9":"code","805ee31d":"code","7fc12055":"code","d6417112":"code","9b442cb7":"code","dfcd7df4":"code","0f2b8f2f":"code","a869e5e6":"code","bac7ac64":"code","97d8d491":"code","53d2b86a":"code","8f9724ce":"code","05cd4bdd":"code","e39b9630":"code","3b038c6e":"code","18e5ad3b":"markdown","d31fcd13":"markdown","5b542941":"markdown","652fea39":"markdown","32ba1879":"markdown","e4300ef2":"markdown","74f6c029":"markdown","b68ff5f5":"markdown","420cea40":"markdown","7b680c3d":"markdown","d214989c":"markdown","8e414753":"markdown"},"source":{"6e6db55b":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns                         # Importing Important Libraries","2cdf1bdb":"df_train = pd.read_csv(\"..\/input\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/test.csv\")     # Getting test and train data","eb73ec48":"df_train.head(6)","65671f24":"df_test.head(6)","7785f12d":"df_train.columns    #list of columns in train","ecbf8fb8":"df_test.columns            #list of columns in test","e9c2e54c":"df_train.info() # to see datatypes and check null values","caad548f":"df_train.describe()  #to check how varies with respect to each columns and any outliers ","85e38487":"# Custom function for initial checks\ndef DF_initial_observations(df):\n    '''Gives basic details of columns in a dataframe : Data types, distinct values, NAs and sample'''\n    if isinstance(df, pd.DataFrame):\n        total_na=0\n        for i in range(len(df.columns)):        \n            total_na+= df.isna().sum()[i]\n        print('Dimensions : %d rows, %d columns' % (df.shape[0],df.shape[1]))\n        print(\"Total NA values : %d\" % (total_na))\n        print('%38s %10s     %10s %10s %15s' % ('Column name', ' Data Type', '# Distinct', ' NA values', ' Sample value'))\n        for i in range(len(df.columns)):\n            col_name = df.columns[i]\n            sampl = df[col_name].sample(1)\n            sampl.apply(pd.Categorical)\n            sampl_p = str(sampl.iloc[0,])\n            print('%38s %10s :   %10d  %10d %15s' % (df.columns[i],df.dtypes[i],df.nunique()[i],df.isna().sum()[i], sampl_p))\n    else:\n        print('Expected a DataFrame but got a %15s ' % (type(data)))","020ca9a9":"DF_initial_observations(df_train)","b0fffd75":"# Correlation matrix - linear relation among independent attributes and with the Target attribute\n\nsns.set(style=\"white\")\n\n# Compute the correlation matrix\ncorreln = df_train.corr()\n\n# Generate a mask for the upper triangle\n#mask = np.zeros_like(correln, dtype=np.bool)\n#mask[np.triu_indices_from(mask)] = True\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(correln,  cmap=cmap, vmax=.3, #mask=mask,\n            linewidths=.8, cbar_kws={\"shrink\": .9})","20a07591":"np.corrcoef(df_train[[\"GarageCars\", \"GarageArea\"]])","a5c7ee02":"df_train.corr().style.format(\"{:.2}\").background_gradient(cmap=plt.get_cmap('coolwarm'), axis=1)","d21b82f2":"df_train.corr()[[\"GarageCars\", \"1stFlrSF\", \"LotFrontage\", \"YrSold\"]] #df_train[df_train.columns[1:]].corr()[\"GarageCars\"][:]","595c7e5e":"plt.boxplot(df_train[\"LotArea\"])","70b07827":"df_train[\"LotFrontage\"].unique()","dfe02d0a":"df_train[\"Neighborhood\"].unique()","585adc41":"df_train_NAmes = df_train.loc[df_train[\"Neighborhood\"]== \"NAmes\"]","8786dfcd":"df_train_NAmes","284c6ec7":"df_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='NAmes') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='NAmes']['LotFrontage']), df_train['LotFrontage'])","13d7335f":"df_train[\"LotFrontage\"].isna().sum()","0e003ece":"df_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='Sawyer') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='Sawyer']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='NWAmes') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='NWAmes']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='SawyerW') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='SawyerW']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='CollgCr') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='CollgCr']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='Gilbert') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='Gilbert']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='IDOTRR') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='IDOTRR']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='Crawfor') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='Crawfor']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='ClearCr') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='ClearCr']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='NPkVill') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='NPkVill']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='Timber') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='Timber']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='BrkSide') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='BrkSide']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='Veenker') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='Veenker']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='OldTown') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='OldTown']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='Somerst') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='Somerst']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='Mitchel') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='Mitchel']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='Edwards') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='Edwards']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='Blmngtn') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='Blmngtn']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='StoneBr') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='StoneBr']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='MeadowV') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='MeadowV']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='NoRidge') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='NoRidge']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='SWISU') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='SWISU']['LotFrontage']), df_train['LotFrontage'])\ndf_train['LotFrontage'] = np.where(((df_train['Neighborhood']=='NridgHt') & (df_train['LotFrontage'].isna())), np.nanmedian(df_train[df_train['Neighborhood']=='NridgHt']['LotFrontage']), df_train['LotFrontage'])","a084d55a":"a = df_train[[\"Neighborhood\",\"LotFrontage\"]]\nnulls = a[a.isnull().any(axis=1)]","3ead6df6":"nulls","149ff96b":"df_train[\"BsmtQual\"].value_counts()","d21c8718":"maxi_BsmtQual = df_train[\"BsmtQual\"].value_counts().index.tolist()\nmaxi_BsmtQual[0]","e3ad4a12":"df_train[\"BsmtQual\"].unique()","4a674fb6":"df_train[\"BsmtQual\"] = df_train[\"BsmtQual\"].replace(np.nan, maxi_BsmtQual[0])","77bb0ed7":"df_train[\"BsmtQual\"].unique()","0de42fd9":"df_train[\"BsmtCond\"].value_counts()","eb3d7807":"maxi_BsmtCond = df_train[\"BsmtCond\"].value_counts().index.tolist()\nmaxi_BsmtCond[0]","d67444c3":"df_train[\"BsmtCond\"].unique()","523a6e06":"df_train[\"BsmtCond\"] = df_train[\"BsmtCond\"].replace(np.nan, maxi_BsmtCond[0])","f48a0cf7":"df_train[\"BsmtCond\"].unique()","50936653":"df_train[\"BsmtExposure\"].value_counts()\n","5865ef1c":"df_train[\"BsmtExposure\"].unique()","c0fe4293":"maxi_BsmtExposure = df_train[\"BsmtExposure\"].value_counts().index.tolist()\nmaxi_BsmtExposure[0]","b197ca8c":"df_train[\"BsmtExposure\"] = df_train[\"BsmtExposure\"].replace(np.nan,maxi_BsmtExposure[0] )","d215bec9":"df_train[\"BsmtExposure\"].unique()","7a1c28e5":"df_train[\"BsmtExposure\"].isna().sum()","dbc1ab07":"df_train[\"BsmtFinType1\"].unique()","2d99a617":"df_train[\"BsmtFinType1\"].value_counts()","32d184df":"maxi_BsmtFinType1 = df_train[\"BsmtFinType1\"].value_counts().index.tolist()\nmaxi_BsmtFinType1[0]","cd2cfb10":"df_train[\"BsmtFinType1\"] = df_train[\"BsmtFinType1\"].replace(np.nan, maxi_BsmtFinType1[0])","e9dcf4b3":"df_train[\"BsmtFinType1\"].unique()","191606f1":"df_train[\"BsmtFinType2\"].unique()","6e724a44":"df_train[\"BsmtFinType2\"].value_counts()","62bf309d":"maxi_BsmtFinType2 = df_train[\"BsmtFinType2\"].value_counts().index.tolist()\nmaxi_BsmtFinType2[0]","ca9f8278":"df_train[\"BsmtFinType2\"] = df_train[\"BsmtFinType2\"].replace(np.nan, maxi_BsmtFinType2[0])","5e5cb964":"df_train[\"BsmtFinType2\"].unique()","1c050080":"df_train[\"Electrical\"].unique()","337bf3b7":"df_train[\"Electrical\"].value_counts()","8c3a0a5e":"maxi_Electrical = df_train[\"Electrical\"].value_counts().index.tolist()\nmaxi_Electrical[0]","1d76335c":"df_train[\"Electrical\"] = df_train[\"Electrical\"].replace(np.nan, maxi_Electrical[0])","0b668076":"df_train[\"Electrical\"].unique()","48a84a9f":"df_train[\"FireplaceQu\"].unique()","6e29d5b9":"df_train[\"FireplaceQu\"].value_counts()","a9f8a1bf":"df_train[df_train[\"FireplaceQu\"].isnull()]","400c9a30":"b = df_train[[\"FireplaceQu\",\"Neighborhood\", \"2ndFlrSF\", \"Fireplaces\"]]\nnulls_FireplaceQu = b[b.isnull().any(axis=1)]","49d3595e":"nulls_FireplaceQu","42bf9e38":"nulls_FireplaceQu[\"Fireplaces\"].unique()","b265e9f1":"df_train[\"Fireplaces\"].value_counts()","faad1aea":"df_train[\"FireplaceQu\"] = df_train[\"FireplaceQu\"].replace(np.nan, \"unknown\")","9380b367":"df_train[\"FireplaceQu\"].value_counts()","3779e156":"df_train[\"GarageType\"].unique()","fececa8d":"df_train[\"GarageType\"].value_counts()","e01ff18c":"c = df_train[[\"GarageType\",\"Neighborhood\", \"GarageArea\", \"GarageCars\", \"GarageYrBlt\"]]\nnulls_GarageType = c[c.isnull().any(axis=1)]","08f98837":"nulls_GarageType","6704a523":"nulls_GarageType[\"GarageCars\"].value_counts()","48442409":"df_train[\"GarageCars\"].value_counts()","8329cb6c":"nulls_GarageType[\"GarageYrBlt\"].unique()","8329ffc4":"df_train[\"GarageYrBlt\"].unique()","a0ac89cf":"d = df_train[[\"GarageYrBlt\",\"Neighborhood\", \"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\"]]\nnulls_GarageYrBlt = d[d.isnull().any(axis=1)]","f463bd52":"nulls_GarageYrBlt","b383fff2":"df_train[\"GarageYrBlt\"] = df_train[\"GarageYrBlt\"].replace(np.nan, \"unknown\")\ndf_train[\"GarageType\"] = df_train[\"GarageType\"].replace(np.nan, \"unknown\")\ndf_train[\"GarageFinish\"] = df_train[\"GarageFinish\"].replace(np.nan, \"unknown\")\ndf_train[\"GarageQual\"] = df_train[\"GarageQual\"].replace(np.nan, \"unknown\")\ndf_train[\"GarageCond\"] = df_train[\"GarageCond\"].replace(np.nan, \"unknown\")","b102ac8e":"DF_initial_observations(df_train)","add1dbf0":"df_train1 = df_train.drop([\"PoolQC\", \"Fence\", \"MiscFeature\", \"Alley\"], axis = 1)","c6470e0d":"e = df_train1[[\"Id\",\"MasVnrType\",\"MasVnrArea\", \"Foundation\", \"Exterior1st\", \"Exterior2nd\"]]\nnulls_MasVnr = e[e.isnull().any(axis=1)]","90dad41f":"nulls_MasVnr","c11caa07":"masvar  =df_train1[(df_train1[\"Foundation\"] == 'PConc') & (df_train1['Exterior1st'] == 'VinylSd') & (df_train1['Exterior2nd'] == 'VinylSd' ) ]","f2279377":"masvar","b0a9ec6e":"df_masvar = masvar[['MasVnrType','MasVnrArea','Foundation','Exterior1st','Exterior2nd']]","9a8e3980":"df_masvar[\"MasVnrType\"].value_counts()","2545668e":"maxi_MasVnrType = df_masvar[\"MasVnrType\"].value_counts().index.tolist()\nmaxi_MasVnrType[0]","7c473f26":"df_train1['MasVnrType'] = np.where((df_train1['MasVnrType'].isna()) & (df_train1[\"Foundation\"] == 'PConc') & (df_train1['Exterior1st'] == 'VinylSd') & (df_train1['Exterior2nd'] == 'VinylSd' ),\nmaxi_MasVnrType[0], df_train1['MasVnrType'])","47f95761":"maxi_MasVnrArea = df_masvar[\"MasVnrArea\"].value_counts().index.tolist()\nmaxi_MasVnrArea[0]","f19fe78b":"df_train1['MasVnrArea'] = np.where((df_train1['MasVnrArea'].isna()) & (df_train1[\"Foundation\"] == 'PConc') & (df_train1['Exterior1st'] == 'VinylSd') & (df_train1['Exterior2nd'] == 'VinylSd' ),\nmaxi_MasVnrArea[0], df_train1['MasVnrArea'])","afceafa4":"maxi_MasVnrType_final = df_train1[\"MasVnrType\"].value_counts().index.tolist()\nmaxi_MasVnrType_final[0]","e23bf421":"df_train1[\"MasVnrType\"] = df_train1[\"MasVnrType\"].replace(np.nan, maxi_MasVnrType_final[0])","bed9ea1f":"maxi_MasVnrArea_final = df_train1[\"MasVnrArea\"].value_counts().index.tolist()\nmaxi_MasVnrArea_final[0]","370a48eb":"df_train1[\"MasVnrArea\"] = df_train1[\"MasVnrArea\"].replace(np.nan, maxi_MasVnrArea_final[0])","fb461da0":"DF_initial_observations(df_train1)","ccd72f41":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df_train1[cols], size = 2.5)\nplt.show();","dcf4e9b6":"df_train1[\"MiscVal\"].describe()","37cbe89f":"plt.boxplot(df_train1[\"MiscVal\"])\nplt.show()","6d917ec8":"plt.boxplot(df_train1[\"GrLivArea\"])","189535c1":"df_train1[\"WoodDeckSF\"].describe()","c552e5e7":"plt.boxplot(df_train1[\"WoodDeckSF\"])","f71603a2":"plt.boxplot(df_train1[\"3SsnPorch\"])","41d0cfa2":"var = '3SsnPorch'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","e4edccee":"df_train1[df_train1[\"3SsnPorch\"]==508.0000000]\ndf_train_out =df_train1[df_train1[\"3SsnPorch\"] != 508.0000000]","59dd7d70":"plt.boxplot(df_train1[\"LotFrontage\"])\nplt.show()","921ff4a4":"var1 = 'LotFrontage'\ndata = pd.concat([df_train['SalePrice'], df_train[var1]], axis=1)\ndata.plot.scatter(x=var1, y='SalePrice', ylim=(0,800000));","dc18386e":"var2 = 'MasVnrArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var2]], axis=1)\ndata.plot.scatter(x=var2, y='SalePrice', ylim=(0,800000));","5d0fdf08":"var3 = 'BsmtFinSF1'\ndata = pd.concat([df_train['SalePrice'], df_train[var3]], axis=1)\ndata.plot.scatter(x=var3, y='SalePrice', ylim=(0,800000));","a5a1818d":"var4 = 'BsmtFinSF2'\ndata = pd.concat([df_train['SalePrice'], df_train[var4]], axis=1)\ndata.plot.scatter(x=var4, y='SalePrice', ylim=(0,800000));","838ea57f":"var5 = 'ScreenPorch'\ndata = pd.concat([df_train['SalePrice'], df_train[var5]], axis=1)\ndata.plot.scatter(x=var5, y='SalePrice', ylim=(0,800000));","a3ebb616":"df_train1[(df_train1['MiscVal'] == 15500.000000) | (df_train1['GrLivArea'] == 5642.000000) | (df_train1['LotFrontage'] == 313.000000) |(df_train1['LotArea'] == 215245.000000) | (df_train1['MasVnrArea'] == 1600.000000) |(df_train1['BsmtFinSF1'] == 5644.000000)\n| (df_train1['BsmtFinSF2'] == 1474.000000) | (df_train1['TotalBsmtSF'] == 6110.000000) | (df_train1['1stFlrSF'] == 4692.000000)\n    | (df_train1['LowQualFinSF'] == 572.000000) | (df_train1['WoodDeckSF'] == 857.000000)\n    | (df_train1['EnclosedPorch'] == 552.000000) | (df_train1['PoolArea'] == 738.000000) | (df_train1['3SsnPorch'] == 508.000000)]","dc6c2bfc":"fina_train = df_train1[(df_train1[\"MiscVal\"] != 15500.000000) & (df_train1[\"GrLivArea\"] != 5642.000000 ) & (df_train1[\"LotFrontage\"] != 313.000000) & (df_train1[\"LotArea\"] != 215245.000000) & (df_train1[\"MasVnrArea\"] != 1600.000000) & (df_train1[\"BsmtFinSF1\"] != 5644.000000) & (df_train[\"BsmtFinSF2\"] != 1474.000000) & (df_train1[\"TotalBsmtSF\"] != 6110.000000) & (df_train1[\"1stFlrSF\"] != 4692.000000) & (df_train1[\"LowQualFinSF\"] != 572.000000) & (df_train1[\"WoodDeckSF\"] != 857.000000) & (df_train1[\"EnclosedPorch\"] != 552.000000) & (df_train1[\"PoolArea\"] != 738.000000) & (df_train1[\"3SsnPorch\"] != 508.000000)]","5307b606":"fina_train.shape","87b51f1d":"df_train1.shape","373ddbb8":"df_train.shape","674242b5":"fina_train[\"Street\"].unique()","90837104":"fina_train['HouseStyle'].unique()","b5760204":"sns.barplot(fina_train['HouseStyle'],fina_train['SalePrice'])","9c3be052":"sns.barplot(fina_train[\"MSSubClass\"], fina_train[\"SalePrice\"])","1bf06555":"sns.barplot(fina_train[\"MSZoning\"], fina_train[\"SalePrice\"])","199c731a":"sns.barplot(fina_train[\"OverallQual\"], fina_train[\"SalePrice\"])","e4dd73e0":"sns.barplot(fina_train[\"BldgType\"], fina_train[\"SalePrice\"])","0d6811f2":"sns.barplot(fina_train[\"RoofStyle\"], fina_train[\"SalePrice\"])","af79c9ab":"sns.barplot(fina_train[\"Foundation\"], fina_train[\"SalePrice\"])","b0ecd4f3":"sns.barplot(fina_train[\"FullBath\"], fina_train[\"SalePrice\"])","2c86b18a":"sns.barplot(fina_train[\"HalfBath\"], fina_train[\"SalePrice\"])","0763d6f4":"col_name=\"Neighborhood\"\ncol_value=np.sort(fina_train[col_name].unique()).tolist()\nplt.figure(figsize=(16,8))\nsns.stripplot(x=col_name,y=\"SalePrice\", data=fina_train,order=col_value,linewidth=.6)\nplt.xticks(rotation=45)\nplt.xlabel(\"Neighborhood\")\nplt.ylabel(\"SalePrice\")\nplt.title(\"neighborhood with salesprice\")\nplt.show()","5c5bae40":"col_name=\"Neighborhood\"\ncol_value=np.sort(fina_train[col_name].unique()).tolist()\nplt.figure(figsize=(16,8))\nsns.violinplot(x=col_name,y=\"SalePrice\", data=fina_train,order=col_value,linewidth=.6)\nplt.xticks(rotation=45)\nplt.xlabel(\"Neighborhood\")\nplt.ylabel(\"SalePrice\")\nplt.title(\"neighborhood with salesprice\")\nplt.show()","9cb347c7":"col_name=\"Neighborhood\"\ncol_value=np.sort(fina_train[col_name].unique()).tolist()\nplt.figure(figsize=(16,8))\nsns.boxplot(x=col_name,y=\"SalePrice\", data=fina_train,order=col_value,linewidth=.6)\nplt.xticks(rotation=45)\nplt.xlabel(\"Neighborhood\")\nplt.ylabel(\"SalePrice\")\nplt.title(\"neighborhood with salesprice\")\nplt.show()","27e3340b":"fina_train.dtypes","1bba338a":"fina_train[\"MSZoning\"].value_counts()","3925fbf1":"fina_train[\"MSZoning\"] = fina_train[\"MSZoning\"].replace(\"RL\", 5)\nfina_train[\"MSZoning\"] = fina_train[\"MSZoning\"].replace(\"RM\", 4)\nfina_train[\"MSZoning\"] = fina_train[\"MSZoning\"].replace(\"FV\", 3)\nfina_train[\"MSZoning\"] = fina_train[\"MSZoning\"].replace(\"RH\", 2)\nfina_train[\"MSZoning\"] = fina_train[\"MSZoning\"].replace(\"C (all)\", 1)","5d8f2e1b":"fina_train[\"MSZoning\"].unique()","2c3885a9":"fina_train[\"Street\"].value_counts()","13491935":"fina_train[\"Street\"] = fina_train[\"Street\"].map({\"Pave\" :1 , \"Grvl\" : 0}).astype(int)","5f46368a":"fina_train[\"Street\"].unique()","9324cee8":"fina_train[\"LotShape\"].value_counts()","b8a847b8":"fina_train['LotShape'] = fina_train[\"LotShape\"].map({'Reg':3, 'IR1':2,'IR2':1,'IR3':0 }).astype(int)","484e6d2c":"fina_train[\"LotShape\"].unique()","1d323846":"fina_train['LandContour'].value_counts()","397faaf8":"fina_train[\"LandContour\"] = fina_train[\"LandContour\"].map({\"Lvl\" : 3, \"Bnk\" : 2, \"HLS\" : 1, \"Low\" : 0}).astype(int)","6ea09337":"fina_train[\"LandContour\"].unique()","66d6dd59":"fina_train['Utilities'].value_counts()","43a60f36":"fina_train['Utilities'] = fina_train[\"Utilities\"].map({'AllPub':1, 'NoSeWa':0 }).astype(int)","2bf75c94":"fina_train['LandSlope'] = fina_train[\"LandSlope\"].map({'Gtl':0, 'Mod':1, 'Sev':2 }).astype(int)","4863df09":"fina_train['BldgType'].unique()","72cf0f70":"fina_train['BldgType'] = fina_train[\"BldgType\"].map({'1Fam':0, '2fmCon':1, 'Duplex':2, 'TwnhsE':3,\n'Twnhs':4}).astype(int)","98ba50a6":"fina_train['HouseStyle'].unique()","55382988":"fina_train['HouseStyle'] = fina_train[\"HouseStyle\"].map({'2Story':3, '1Story':0, '1.5Fin':2, '1.5Unf':1,\n'SFoyer':6, 'SLvl':7, '2.5Unf':4, '2.5Fin':5  }).astype(int)","6bac7362":"fina_train[\"ExterQual\"].unique()","e06d8542":"fina_train[\"ExterQual\"] = fina_train[\"ExterQual\"].map({\"Ex\" : 3, \"Gd\" : 2, \"TA\" : 1, \"Fa\" : 0 }).astype(int)","69cb92ff":"fina_train[\"ExterQual\"].unique()","90e53984":"fina_train[\"ExterCond\"].unique()","b7ee45a1":"fina_train[\"ExterCond\"] = fina_train[\"ExterCond\"].map({\"Ex\" : 4, \"Gd\" : 3, \"TA\" : 2, \"Fa\" : 1, \"Po\" : 0}).astype(int)","84961ba8":"fina_train[\"BsmtQual\"].unique()","39b3544c":"fina_train[\"BsmtQual\"] = fina_train[\"BsmtQual\"].map({\"Ex\" : 3, \"Gd\" : 2, \"TA\" : 1, \"Fa\" : 0 }).astype(int)","087fe261":"fina_train[\"KitchenQual\"].unique()","a751bd00":"fina_train[\"KitchenQual\"] = fina_train[\"KitchenQual\"].map({\"Ex\" : 3, \"Gd\" : 2, \"TA\" : 1, \"Fa\" : 0 }).astype(int)","e96c7de4":"fina_train[\"Functional\"].value_counts()","be60b60b":"fina_train[\"Functional\"] = fina_train[\"Functional\"].map({\"Typ\" : 6, \"Min1\" : 5, \"Maj1\" : 2, \"Min2\" : 4, \"Mod\" : 3, \"Maj2\" : 1, \"Sev\" : 0}).astype(int)","38a3c4dc":"fina_train[\"FireplaceQu\"].unique()","0a5250bf":"fina_train[\"FireplaceQu\"] = fina_train[\"FireplaceQu\"].map({\"unknown\" : 0, \"Ex\" : 5, \"Gd\" : 4, \"TA\" : 3, \"Fa\" : 2, \"Po\" : 1}).astype(int)","0e13d4ae":"fina_train[\"GarageYrBlt\"].unique()","eb2ffc2e":"fina_train[\"GarageYrBlt\"] = fina_train[\"GarageYrBlt\"].replace(\"unknown\", 0).astype(float)","28061334":"fina_train[\"GarageFinish\"].unique()","79916db5":"fina_train[\"GarageFinish\"] = fina_train[\"GarageFinish\"].map({\"RFn\" : 2, \"Unf\" : 1, \"Fin\" : 3, \"unknown\" : 0}).astype(int)","582cdd42":"fina_train[\"GarageQual\"].unique()","e2eb2a6f":"fina_train[\"GarageQual\"] = fina_train[\"GarageQual\"].map({\"unknown\" : 0, \"Ex\" : 5, \"Gd\" : 4, \"TA\" : 3, \"Fa\" : 2, \"Po\" : 1}).astype(int)","6b2bc283":"fina_train[\"GarageCond\"].unique()","27fc2839":"fina_train[\"GarageCond\"] = fina_train[\"GarageCond\"].map({\"unknown\" : 0, \"Ex\" : 5, \"Gd\" : 4, \"TA\" : 3, \"Fa\" : 2, \"Po\" : 1}).astype(int)","4ce5be3a":"fina_train[\"PavedDrive\"].unique()","3299f70f":"fina_train[\"PavedDrive\"] = fina_train[\"PavedDrive\"].map({\"Y\" : 2, \"N\" : 0, \"P\" : 1}).astype(int)","3c50a4ab":"fina_train[\"BsmtCond\"].unique()","b2dad9e8":"fina_train[\"BsmtCond\"] = fina_train[\"BsmtCond\"].map({ \"Gd\" : 3, \"TA\" : 2, \"Fa\" : 1, \"Po\" : 0 }).astype(int)","23741153":"fina_train[\"BsmtExposure\"].unique()","7c729e40":"fina_train[\"BsmtExposure\"] = fina_train[\"BsmtExposure\"].map({ \"Gd\" : 3, \"No\" : 0, \"Mn\" : 1, \"Av\" : 2 }).astype(int)","b1cf530e":"fina_train[\"BsmtFinType1\"].unique()","92eb4bbf":"fina_train[\"BsmtFinType1\"] = fina_train[\"BsmtFinType1\"].map({\"GLQ\" : 5, \"ALQ\" : 4, \"Unf\" : 0, \"Rec\" : 2, \"BLQ\" : 3, \"LwQ\" : 1}).astype(int)","8712fc69":"fina_train[\"BsmtFinType2\"].unique()","5919a487":"fina_train[\"BsmtFinType2\"] = fina_train[\"BsmtFinType2\"].map({\"GLQ\" : 5, \"ALQ\" : 4, \"Unf\" : 0, \"Rec\" : 2, \"BLQ\" : 3, \"LwQ\" : 1}).astype(int)","e458609a":"fina_train[\"BsmtFinType2\"].unique()","1d4eb395":"fina_train[\"HeatingQC\"].unique()","f539aa5b":"fina_train[\"HeatingQC\"] = fina_train[\"HeatingQC\"].map({\"Ex\" : 4, \"Gd\" : 3, \"TA\" : 2, \"Fa\" : 1, \"Po\" : 0}).astype(int)","53d54e24":"fina_train[\"CentralAir\"].unique()","51663116":"fina_train[\"CentralAir\"] = fina_train[\"CentralAir\"].map({\"Y\" : 1, \"N\" : 0}).astype(int)","9c96d225":"final_train = fina_train.drop(['SalePrice'], axis=1)\ny = fina_train['SalePrice']","2b18229e":"dummy_final_train = pd.get_dummies(final_train, columns= [\"LotConfig\", \"Neighborhood\", \"Condition1\" , \"Condition2\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\", \"Heating\", \"Electrical\",\"RoofStyle\" ,  \"MasVnrType\", \"Foundation\", \"GarageType\", \"SaleType\" , \"SaleCondition\"])\n","661dc70c":"final_train = pd.concat([final_train, dummy_final_train], axis = 1)","74764635":"final_train = final_train.drop([\"LotConfig\", \"Neighborhood\", \"Condition1\", \"Condition2\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\", \"Heating\", \"Electrical\", \"RoofStyle\",  \"MasVnrType\", \"Foundation\", \"GarageType\", \"SaleType\", \"SaleCondition\"], axis = 1)","a08d9f87":"final_train.shape","d650b21e":"final_train.dtypes","c60d3239":"df_test.describe()","6117c5b5":"# Custom function for initial checks\ndef DF_initial_observations(df):\n    '''Gives basic details of columns in a dataframe : Data types, distinct values, NAs and sample'''\n    if isinstance(df, pd.DataFrame):\n        total_na=0\n        for i in range(len(df.columns)):        \n            total_na+= df.isna().sum()[i]\n        print('Dimensions : %d rows, %d columns' % (df.shape[0],df.shape[1]))\n        print(\"Total NA values : %d\" % (total_na))\n        print('%38s %10s     %10s %10s %15s' % ('Column name', ' Data Type', '# Distinct', ' NA values', ' Sample value'))\n        for i in range(len(df.columns)):\n            col_name = df.columns[i]\n            sampl = df[col_name].sample(1)\n            sampl.apply(pd.Categorical)\n            sampl_p = str(sampl.iloc[0,])\n            print('%38s %10s :   %10d  %10d %15s' % (df.columns[i],df.dtypes[i],df.nunique()[i],df.isna().sum()[i], sampl_p))\n    else:\n        print('Expected a DataFrame but got a %15s ' % (type(data)))","cd0bdfd2":"DF_initial_observations(df_test)","2f74569c":"df_test[\"MSZoning\"].unique()","d5a2b305":"f = df_test[[\"Neighborhood\", \"MSZoning\"]]\nf_nulls = f[f.isnull().any(axis = 1)]","eca83a2e":"f_nulls","17f7f350":"f_mode_IDOTRR = f[f[\"Neighborhood\"]== \"IDOTRR\"][\"MSZoning\"].value_counts().index.tolist()","2a33c878":"f_mode_IDOTRR[0]","b800c5eb":"f_mode_Mitchel = f[f[\"Neighborhood\"]== \"Mitchel\"][\"MSZoning\"].value_counts().index.tolist()","22433e32":"f_mode_Mitchel[0]","c7ab3dfd":"df_test[\"MSZoning\"] = np.where((df_test[\"MSZoning\"].isna()) & (df_test[\"Neighborhood\"] == \"IDOTRR\"), f_mode_IDOTRR[0], df_test[\"MSZoning\"])\ndf_test[\"MSZoning\"] = np.where((df_test[\"MSZoning\"].isna()) & (df_test[\"Neighborhood\"] == \"Mitchel\"), f_mode_Mitchel[0], df_test[\"MSZoning\"])","00326e42":"g = df_test[[\"Neighborhood\", \"LotFrontage\"]]\nnulls_Lot = g[g.isna().any(axis=1)]","f3041d36":"nulls_Lot[\"Neighborhood\"].unique()","ba88b7a3":"df_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='Sawyer') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='Sawyer']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='Gilbert') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='Gilbert']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='Somerst') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='Somerst']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='NWAmes') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='NWAmes']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='OldTown') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='OldTown']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='BrkSide') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='BrkSide']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='SWISU') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='SWISU']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='ClearCr') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='ClearCr']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='Edwards') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='Edwards']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='CollgCr') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='CollgCr']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='Mitchel') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='Mitchel']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='NoRidge') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='NoRidge']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='SawyerW') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='SawyerW']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='Veenker') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='Veenker']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='Crawfor') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='Crawfor']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='Timber') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='Timber']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='Blmngtn') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='Blmngtn']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='IDOTRR') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='IDOTRR']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='MeadowV') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='MeadowV']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='NridgHt') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='NridgHt']['LotFrontage']), df_test['LotFrontage'])\ndf_test['LotFrontage'] = np.where(((df_test['Neighborhood']=='NAmes') & (df_test['LotFrontage'].isna())), np.nanmedian(df_test[df_test['Neighborhood']=='NAmes']['LotFrontage']), df_test['LotFrontage'])","656c7202":"df_test[\"Exterior1st\"].unique()","1f63cebb":"maxi_Ext1st = df_test[\"Exterior1st\"].value_counts().index.tolist()\nmaxi_Ext1st[0]","f14ee536":"df_test[\"Exterior1st\"] = df_test[\"Exterior1st\"].replace(np.nan, maxi_Ext1st[0])","819e8758":"maxi_Ext2nd = df_test[\"Exterior2nd\"].value_counts().index.tolist()\nmaxi_Ext2nd[0]","a0e455c8":"df_test[\"Exterior2nd\"] = df_test[\"Exterior2nd\"].replace(np.nan, maxi_Ext2nd[0])","467eb01b":"test_mas = df_test[['MasVnrType','MasVnrArea','Foundation','Exterior1st','Exterior2nd']]","94dadf72":"nulls_mas = test_mas[test_mas.isnull().any(axis =1)]","ef602fb8":"nulls_mas","ba31267b":"df_test_Pconc = df_test[(df_test[\"Foundation\"] == \"PConc\") & (df_test[\"Exterior1st\"] == \"VinylSd\") & (df_test[\"Exterior2nd\"] == \"VinylSd\") ]","591e114e":"df_test_Pconc[[\"MasVnrType\", \"MasVnrArea\", \"Foundation\", \"Exterior1st\", \"Exterior2nd\"]]","e45870d9":"df_test_mastype = df_test_Pconc[\"MasVnrType\"].value_counts().index.tolist()","ee9cd81e":"df_test_mastype[0]","e0f4448f":"df_test['MasVnrType'] = np.where((df_test['MasVnrType'].isna()) & (df_test[\"Foundation\"] == 'PConc') & (df_test['Exterior1st'] == 'VinylSd') & (df_test['Exterior2nd'] == 'VinylSd' ),\ndf_test_mastype[0], df_test['MasVnrType'])","e074254a":"df_test_masarea = df_test_Pconc[\"MasVnrArea\"].value_counts().index.tolist()","b1a0679a":"df_test_masarea[0]","84a09f2c":"df_test['MasVnrArea'] = np.where((df_test['MasVnrArea'].isna()) & (df_test[\"Foundation\"] == 'PConc') & (df_test['Exterior1st'] == 'VinylSd') & (df_test['Exterior2nd'] == 'VinylSd' ),\ndf_test_masarea[0], df_test['MasVnrArea'])","037385fb":"nulls_mas1 = test_mas[test_mas.isnull().any(axis =1)]","daa377cd":"nulls_mas1","c3d7bd23":"df_test_mast = df_test[\"MasVnrType\"].value_counts().index.tolist()\ndf_test_mast[0]","d146076c":"df_test[\"MasVnrType\"] = df_test[\"MasVnrType\"].replace(np.nan, df_test_mast[0])","021a6573":"df_test_masa = df_test[\"MasVnrArea\"].value_counts().index.tolist()\ndf_test_masa[0]","d1687f87":"df_test[\"MasVnrArea\"] = df_test[\"MasVnrArea\"].replace(np.nan, df_test_masa[0])","aac5363d":"df_test[\"MasVnrArea\"].isnull().sum()","93359aff":"df_test_bsmt = df_test[[\"Foundation\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\"]]","41367668":"nulls_bsmt = df_test_bsmt[df_test_bsmt.isnull().any(axis = 1)]","3016e11f":"nulls_bsmt","44661646":"df_test_bsmt_f = df_test[(df_test[\"Foundation\"] == \"Slab\")]","bdfc2324":"bsmt_slab = df_test_bsmt_f[[\"Foundation\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\"]]","5d4befcb":"bsmt_slab","a133002b":"df_test['BsmtQual'] = np.where((df_test['BsmtQual'].isna()) & (df_test[\"Foundation\"] == 'Slab'), \"unknown\", df_test['BsmtQual'])\ndf_test['BsmtCond'] = np.where((df_test['BsmtCond'].isna()) & (df_test[\"Foundation\"] == 'Slab'), \"unknown\", df_test['BsmtCond'])\ndf_test['BsmtExposure'] = np.where((df_test['BsmtExposure'].isna()) & (df_test[\"Foundation\"] == 'Slab'), \"unknown\", df_test['BsmtExposure'])\ndf_test['BsmtFinType1'] = np.where((df_test['BsmtFinType1'].isna()) & (df_test[\"Foundation\"] == 'Slab'), \"unknown\", df_test['BsmtFinType1'])\ndf_test['BsmtFinType2'] = np.where((df_test['BsmtFinType2'].isna()) & (df_test[\"Foundation\"] == 'Slab'), \"unknown\", df_test['BsmtFinType2'])","d2ad293f":"df_test[\"BsmtQual\"].isnull().sum()","99953ef3":"df_test_bsmt_cb = df_test[(df_test[\"Foundation\"] == \"CBlock\")]","cccafa18":"bsmt_cblock = df_test_bsmt_cb[[\"Foundation\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\"]]","8b3eeff7":"bsmt_cblock","7f21b912":"bsmt_qual_mode = bsmt_cblock[\"BsmtQual\"].value_counts().index.tolist()\nbsmt_qual_mode[0]","1bc1e976":"df_test['BsmtQual'] = np.where((df_test['BsmtQual'].isna()) & (df_test[\"Foundation\"] == 'CBlock'), bsmt_qual_mode[0], df_test['BsmtQual'])","1e775c50":"bsmt_cond_mode = bsmt_cblock[\"BsmtCond\"].value_counts().index.tolist()\nbsmt_cond_mode[0]","82ca1ec6":"df_test['BsmtCond'] = np.where((df_test['BsmtCond'].isna()) & (df_test[\"Foundation\"] == 'CBlock'), bsmt_cond_mode[0], df_test['BsmtCond'])","919d8378":"bsmt_Exp_mode = bsmt_cblock[\"BsmtExposure\"].value_counts().index.tolist()\nbsmt_Exp_mode[0]","7582bff7":"df_test['BsmtExposure'] = np.where((df_test['BsmtExposure'].isna()) & (df_test[\"Foundation\"] == 'CBlock'), bsmt_Exp_mode[0], df_test['BsmtExposure'])","9950de9b":"bsmt_fin1_mode = bsmt_cblock[\"BsmtFinType1\"].value_counts().index.tolist()\nbsmt_fin1_mode[0]","06a9df71":"bsmt_fin2_mode = bsmt_cblock[\"BsmtFinType2\"].value_counts().index.tolist()\nbsmt_fin2_mode[0]","11a908ac":"df_test['BsmtFinType1'] = np.where((df_test['BsmtFinType1'].isna()) & (df_test[\"Foundation\"] == 'CBlock'), bsmt_fin1_mode[0], df_test['BsmtFinType1'])\ndf_test['BsmtFinType2'] = np.where((df_test['BsmtFinType2'].isna()) & (df_test[\"Foundation\"] == 'CBlock'), bsmt_fin2_mode[0], df_test['BsmtFinType2'])","790b5950":"nulls_bsmt","ace48c2b":"df_test_bsmt_Pc = df_test[(df_test[\"Foundation\"] == \"PConc\")]","64386904":"bsmt_PConc = df_test_bsmt_Pc[[\"Foundation\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\"]]","32dc147c":"bsmt_PConc","3e37eace":"bsmt_pc_qual_mode = bsmt_PConc[\"BsmtQual\"].value_counts().index.tolist()\nbsmt_pc_qual_mode[0]","ee799487":"bsmt_pc_Cond_mode = bsmt_PConc[\"BsmtCond\"].value_counts().index.tolist()\nbsmt_pc_Cond_mode[0]","6f296ba9":"bsmt_pc_Ex_mode = bsmt_PConc[\"BsmtExposure\"].value_counts().index.tolist()\nbsmt_pc_Ex_mode[0]","6f81a12a":"bsmt_pc_fin1_mode = bsmt_PConc[\"BsmtFinType1\"].value_counts().index.tolist()\nbsmt_pc_fin1_mode[0]","6745300d":"bsmt_pc_fin2_mode = bsmt_PConc[\"BsmtFinType2\"].value_counts().index.tolist()\nbsmt_pc_fin2_mode[0]","21661c84":"df_test['BsmtQual'] = np.where((df_test['BsmtQual'].isna()) & (df_test[\"Foundation\"] == 'PConc'), bsmt_pc_qual_mode[0], df_test['BsmtQual'])\ndf_test['BsmtCond'] = np.where((df_test['BsmtCond'].isna()) & (df_test[\"Foundation\"] == 'PConc'), bsmt_pc_Cond_mode[0], df_test['BsmtCond'])\ndf_test['BsmtExposure'] = np.where((df_test['BsmtExposure'].isna()) & (df_test[\"Foundation\"] == 'PConc'), bsmt_pc_Ex_mode[0], df_test['BsmtExposure'])\ndf_test['BsmtFinType1'] = np.where((df_test['BsmtFinType1'].isna()) & (df_test[\"Foundation\"] == 'PConc'), bsmt_pc_fin1_mode[0], df_test['BsmtFinType1'])\ndf_test['BsmtFinType2'] = np.where((df_test['BsmtFinType2'].isna()) & (df_test[\"Foundation\"] == 'PConc'), bsmt_pc_fin2_mode[0], df_test['BsmtFinType2'])","01382ccd":"df_test_bsmt_BT = df_test[(df_test[\"Foundation\"] == \"BrkTil\")]","e1593e63":"bsmt_BT = df_test_bsmt_BT[[\"Foundation\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\"]]","6b1a10bb":"bsmt_BT","80f8f796":"bsmt_BT_qual_mode = bsmt_BT[\"BsmtQual\"].value_counts().index.tolist()\nbsmt_BT_qual_mode[0]","c5b299cf":"bsmt_BT_Cond_mode = bsmt_BT[\"BsmtCond\"].value_counts().index.tolist()\nbsmt_BT_Cond_mode[0]","baada434":"bsmt_BT_Ex_mode = bsmt_BT[\"BsmtExposure\"].value_counts().index.tolist()\nbsmt_BT_Ex_mode[0]","8f1c8385":"bsmt_BT_fin1_mode = bsmt_BT[\"BsmtFinType1\"].value_counts().index.tolist()\nbsmt_BT_fin1_mode[0]","e9c1ff37":"bsmt_BT_fin2_mode = bsmt_BT[\"BsmtFinType2\"].value_counts().index.tolist()\nbsmt_BT_fin2_mode[0]","07742486":"df_test['BsmtQual'] = np.where((df_test['BsmtQual'].isna()) & (df_test[\"Foundation\"] == 'BrkTil'), bsmt_BT_qual_mode[0], df_test['BsmtQual'])\ndf_test['BsmtCond'] = np.where((df_test['BsmtCond'].isna()) & (df_test[\"Foundation\"] == 'BrkTil'), bsmt_BT_Cond_mode[0], df_test['BsmtCond'])\ndf_test['BsmtExposure'] = np.where((df_test['BsmtExposure'].isna()) & (df_test[\"Foundation\"] == 'BrkTil'), bsmt_BT_Ex_mode[0], df_test['BsmtExposure'])\ndf_test['BsmtFinType1'] = np.where((df_test['BsmtFinType1'].isna()) & (df_test[\"Foundation\"] == 'BrkTil'), bsmt_BT_fin1_mode[0], df_test['BsmtFinType1'])\ndf_test['BsmtFinType2'] = np.where((df_test['BsmtFinType2'].isna()) & (df_test[\"Foundation\"] == 'BrkTil'), bsmt_BT_fin2_mode[0], df_test['BsmtFinType2'])","f8934f99":"df_test_bsmt_st = df_test[(df_test[\"Foundation\"] == \"Stone\")]","63f923c5":"bsmt_st = df_test_bsmt_st[[\"Foundation\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\", \"BsmtFinType2\"]]","d51ecfef":"bsmt_st","5a75c48e":"bsmt_st_qual_mode = bsmt_st[\"BsmtQual\"].value_counts().index.tolist()\nbsmt_st_qual_mode[0]","a18a2eb9":"df_test['BsmtQual'] = np.where((df_test['BsmtQual'].isna()) & (df_test[\"Foundation\"] == 'Stone'), bsmt_st_qual_mode[0], df_test['BsmtQual'])","3d4a95e3":"DF_initial_observations(df_test)","a3befe24":"garage = df_test[[\"GarageYrBlt\",\"Neighborhood\", \"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\"]]\nnulls_Garage = garage[garage.isnull().any(axis=1)]","2957a4d5":"nulls_Garage","8b5514b6":"df_test[\"GarageYrBlt\"] = df_test[\"GarageYrBlt\"].replace(np.nan, \"unknown\")\ndf_test[\"GarageType\"] = df_test[\"GarageType\"].replace(np.nan, \"unknown\")\ndf_test[\"GarageFinish\"] = df_test[\"GarageFinish\"].replace(np.nan, \"unknown\")\ndf_test[\"GarageQual\"] = df_test[\"GarageQual\"].replace(np.nan, \"unknown\")\ndf_test[\"GarageCond\"] = df_test[\"GarageCond\"].replace(np.nan, \"unknown\")","4a6a3276":"df_test[\"FireplaceQu\"] = df_test[\"FireplaceQu\"].replace(np.nan, \"unknown\")","729cacf7":"df_test[\"SaleType\"].value_counts()\nsal_type_mode = df_test[\"SaleType\"].value_counts().index.tolist()\nsal_type_mode[0]","87ff85de":"df_test[\"SaleType\"] = df_test[\"SaleType\"].replace(np.nan, sal_type_mode[0])\n","2a79808d":"df_test['Utilities'].value_counts()","119ac427":"utilities_mode = df_test[\"Utilities\"].value_counts().index.tolist()\nutilities_mode[0]\n\ndf_test[\"Utilities\"] = df_test[\"Utilities\"].replace(np.nan, utilities_mode[0])","c1caaa1f":"bsmt_fin1 = df_test[\"BsmtFinType1\"].value_counts().index.tolist()\nbsmt_fin1[0]","d6c92a81":"bsmt_fin2 = df_test[\"BsmtFinType2\"].value_counts().index.tolist()\nbsmt_fin2[0]","1d565912":"bsmt_unf = df_test[\"BsmtUnfSF\"].value_counts().index.tolist()\nbsmt_unf[0]","03315ba6":"bsmt_totalsf = df_test[\"TotalBsmtSF\"].value_counts().index.tolist()\nbsmt_totalsf[0]","1709a49e":"bsmt_fullbath = df_test[\"BsmtFullBath\"].value_counts().index.tolist()\nbsmt_fullbath[0]","da684476":"bsmt_halfbath = df_test[\"BsmtHalfBath\"].value_counts().index.tolist()\nbsmt_halfbath[0]","1014f933":"kitchenqual = df_test[\"KitchenQual\"].value_counts().index.tolist()\nkitchenqual[0]","d45ca210":"functional = df_test[\"Functional\"].value_counts().index.tolist()\nfunctional[0]","a17efacb":"garage_cars = df_test[\"GarageCars\"].value_counts().index.tolist()\ngarage_cars[0]","6241d25a":"garage_area = df_test[\"GarageArea\"].value_counts().index.tolist()\ngarage_area[0]","7990a8cb":"bsmt_finsf = df_test[\"BsmtFinSF1\"].value_counts().index.tolist()\nbsmt_finsf[0]","6b6b932f":"bsmt_finsf2 = df_test[\"BsmtFinSF2\"].value_counts().index.tolist()\nbsmt_finsf2[0]","63b92913":"df_test[\"BsmtFinType1\"] = df_test[\"BsmtFinType1\"].replace(np.nan, bsmt_fin1[0])\ndf_test[\"BsmtFinType2\"] = df_test[\"BsmtFinType2\"].replace(np.nan,bsmt_fin2[0])\ndf_test[\"BsmtFinSF1\"] = df_test[\"BsmtFinSF1\"].replace(np.nan, bsmt_finsf[0])\ndf_test[\"BsmtFinSF2\"] = df_test[\"BsmtFinSF2\"].replace(np.nan, bsmt_finsf2[0])","7c2f4c1a":"df_test[\"BsmtUnfSF\"] = df_test[\"BsmtUnfSF\"].replace(np.nan, bsmt_unf[0])\ndf_test[\"TotalBsmtSF\"] = df_test[\"TotalBsmtSF\"].replace(np.nan, bsmt_totalsf[0])\ndf_test[\"BsmtFullBath\"] = df_test[\"BsmtFullBath\"].replace(np.nan, bsmt_fullbath[0])\ndf_test[\"BsmtHalfBath\"] = df_test[\"BsmtHalfBath\"].replace(np.nan, bsmt_halfbath[0])\ndf_test[\"KitchenQual\"] = df_test[\"KitchenQual\"].replace(np.nan, kitchenqual[0])\ndf_test[\"Functional\"] = df_test[\"Functional\"].replace(np.nan, functional[0])\ndf_test[\"GarageCars\"] = df_test[\"GarageCars\"].replace(np.nan, garage_cars[0])\ndf_test[\"GarageArea\"]= df_test[\"GarageArea\"].replace(np.nan, garage_area[0])","2c4f7406":"df_test[\"BsmtFinType1\"].isnull().sum()","88b64bd2":"# Custom function for initial checks\ndef DF_initial_observations(df):\n    '''Gives basic details of columns in a dataframe : Data types, distinct values, NAs and sample'''\n    if isinstance(df, pd.DataFrame):\n        total_na=0\n        for i in range(len(df.columns)):        \n            total_na+= df.isna().sum()[i]\n        print('Dimensions : %d rows, %d columns' % (df.shape[0],df.shape[1]))\n        print(\"Total NA values : %d\" % (total_na))\n        print('%38s %10s     %10s %10s %15s' % ('Column name', ' Data Type', '# Distinct', ' NA values', ' Sample value'))\n        for i in range(len(df.columns)):\n            col_name = df.columns[i]\n            sampl = df[col_name].sample(1)\n            sampl.apply(pd.Categorical)\n            sampl_p = str(sampl.iloc[0,])\n            print('%38s %10s :   %10d  %10d %15s' % (df.columns[i],df.dtypes[i],df.nunique()[i],df.isna().sum()[i], sampl_p))\n    else:\n        print('Expected a DataFrame but got a %15s ' % (type(data)))","8f35ca85":"DF_initial_observations(df_test)","1b76dc9d":"final_test = df_test.drop(['Alley','PoolQC','Fence','MiscFeature'], axis=1)","fa4b606b":"final_test.shape","dd80ce0c":"final_test.describe()","5ddee09b":"final_test['LotShape'].value_counts()","b507b93b":"final_test['LotShape'] = final_test[\"LotShape\"].map({'Reg':3, 'IR1':2,'IR2':1,'IR3':0 }).astype(int)","192546f3":"final_test[\"MSZoning\"].value_counts()","060e6a9f":"final_test[\"MSZoning\"] = final_test[\"MSZoning\"].replace(\"RL\", 5)\nfinal_test[\"MSZoning\"] = final_test[\"MSZoning\"].replace(\"RM\", 4)\nfinal_test[\"MSZoning\"] = final_test[\"MSZoning\"].replace(\"FV\", 3)\nfinal_test[\"MSZoning\"] = final_test[\"MSZoning\"].replace(\"RH\", 2)\nfinal_test[\"MSZoning\"] = final_test[\"MSZoning\"].replace(\"C (all)\", 1)","0d51a50a":"final_test[\"Street\"].value_counts()","41fe0f8d":"final_test[\"Street\"] = final_test[\"Street\"].map({\"Pave\" :1 , \"Grvl\" : 0}).astype(int)","e56c0467":"final_test['LandContour'].value_counts()","275880c0":"final_test[\"LandContour\"] = final_test[\"LandContour\"].map({\"Lvl\" : 3, \"Bnk\" : 2, \"HLS\" : 1, \"Low\" : 0}).astype(int)","d8e74ed0":"final_test['Utilities'].value_counts()","f34cf408":"final_test['Utilities'] = final_test[\"Utilities\"].map({'AllPub':1 }).astype(int)","d10c4f1c":"final_test['LandSlope'] = final_test[\"LandSlope\"].map({'Gtl':0, 'Mod':1, 'Sev':2 }).astype(int)","8d1094df":"final_test['BldgType'] = final_test[\"BldgType\"].map({'1Fam':0, '2fmCon':1, 'Duplex':2, 'TwnhsE':3,\n'Twnhs':4}).astype(int)","73c41100":"final_test['HouseStyle'].unique()","1d54f095":"final_test['HouseStyle'] = final_test[\"HouseStyle\"].map({'2Story':3, '1Story':0, '1.5Fin':2, '1.5Unf':1,\n'SFoyer':6, 'SLvl':7, '2.5Unf':4, '2.5Fin':5  }).astype(int)","d6136f69":"final_test[\"BsmtExposure\"].value_counts()","3e0bc81e":"final_test[\"ExterQual\"] = final_test[\"ExterQual\"].map({\"Ex\" : 3, \"Gd\" : 2, \"TA\" : 1, \"Fa\" : 0 }).astype(int)\nfinal_test[\"ExterCond\"] = final_test[\"ExterCond\"].map({\"Ex\" : 4, \"Gd\" : 3, \"TA\" : 2, \"Fa\" : 1, \"Po\" : 0}).astype(int)\nfinal_test[\"BsmtQual\"] = final_test[\"BsmtQual\"].map({\"Ex\" : 4, \"Gd\" : 3, \"TA\" : 2, \"Fa\" : 1, \"unknown\" : 0}).astype(int)\nfinal_test[\"KitchenQual\"] = final_test[\"KitchenQual\"].map({\"Ex\" : 3, \"Gd\" : 2, \"TA\" : 1, \"Fa\" : 0 }).astype(int)","198e9085":"final_test[\"Functional\"] = final_test[\"Functional\"].map({\"Typ\" : 6, \"Min1\" : 5, \"Maj1\" : 2, \"Min2\" : 4, \"Mod\" : 3, \"Maj2\" : 1, \"Sev\" : 0}).astype(int)","d1692c56":"final_test[\"FireplaceQu\"] = final_test[\"FireplaceQu\"].map({\"unknown\" : 0, \"Ex\" : 5, \"Gd\" : 4, \"TA\" : 3, \"Fa\" : 2, \"Po\" : 1}).astype(int)","3fbb6f77":"final_test[\"GarageYrBlt\"] = final_test[\"GarageYrBlt\"].replace(\"unknown\", 0).astype(float)","9e5894b1":"final_test[\"GarageFinish\"] = final_test[\"GarageFinish\"].map({\"RFn\" : 2, \"Unf\" : 1, \"Fin\" : 3, \"unknown\" : 0}).astype(int)","f5b3f162":"final_test[\"GarageQual\"] = final_test[\"GarageQual\"].map({\"unknown\" : 0, \"Ex\" : 5, \"Gd\" : 4, \"TA\" : 3, \"Fa\" : 2, \"Po\" : 1}).astype(int)","2c399eeb":"final_test[\"GarageCond\"] = final_test[\"GarageCond\"].map({\"unknown\" : 0, \"Ex\" : 5, \"Gd\" : 4, \"TA\" : 3, \"Fa\" : 2, \"Po\" : 1}).astype(int)","2fb754f6":"final_test[\"PavedDrive\"] = final_test[\"PavedDrive\"].map({\"Y\" : 2, \"N\" : 0, \"P\" : 1}).astype(int)","946a8467":"final_test[\"BsmtCond\"] = final_test[\"BsmtCond\"].map({ \"Gd\" : 4, \"TA\" : 3, \"Fa\" : 2, \"Po\" : 1, \"unknown\" : 0 }).astype(int)","ed087729":"final_test[\"BsmtExposure\"] = final_test[\"BsmtExposure\"].map({ \"Gd\" : 4, \"No\" : 1, \"Mn\" : 2, \"Av\" : 3 , \"unknown\" : 0}).astype(int)","88109476":"final_test[\"BsmtFinType1\"] = final_test[\"BsmtFinType1\"].map({\"GLQ\" : 6, \"ALQ\" : 5, \"Unf\" : 1, \"Rec\" : 3, \"BLQ\" : 4, \"LwQ\" : 2, \"unknown\" : 0}).astype(int)","75464b0e":"final_test[\"CentralAir\"].value_counts()","51b85096":"final_test[\"BsmtFinType2\"] = final_test[\"BsmtFinType2\"].map({\"GLQ\" : 6, \"ALQ\" : 5, \"Unf\" : 1, \"Rec\" : 3, \"BLQ\" : 4, \"LwQ\" : 2, \"unknown\" : 0}).astype(int)","d107df33":"final_test[\"HeatingQC\"] = final_test[\"HeatingQC\"].map({\"Ex\" : 4, \"Gd\" : 3, \"TA\" : 2, \"Fa\" : 1, \"Po\" : 0}).astype(int)","f05af1d9":"final_test[\"CentralAir\"] = final_test[\"CentralAir\"].map({\"Y\" : 1, \"N\" : 0}).astype(int)","f3e06a88":"DF_initial_observations(final_test)","29953e40":"DF_initial_observations(final_train)","568f75f6":"dummy_final_test = pd.get_dummies(final_test, columns= [\"LotConfig\", \"Neighborhood\", \"Condition1\", \"Condition2\", \"RoofStyle\" , \"RoofMatl\", \"MasVnrType\", \"Foundation\", \"Exterior1st\", \"Exterior2nd\", \"Heating\", \"Electrical\" ,\"GarageType\", \"SaleType\", \"SaleCondition\"])","2c8f0dde":"final_test = pd.concat([final_test, dummy_final_test], axis = 1)","92755938":"final_test = final_test.drop([\"LotConfig\", \"Neighborhood\", \"Condition1\", \"Condition2\",  \"RoofStyle\", \"RoofMatl\",  \"MasVnrType\", \"Exterior1st\", \"Exterior2nd\", \"Heating\", \"Electrical\", \"Foundation\", \"GarageType\", \"SaleType\", \"SaleCondition\"], axis = 1)","62ff07f3":"missing_cols = set(final_train)- set(final_test)\nfor col in missing_cols:\n    final_test[col] = 0","87445722":"final_test.shape","1e9226c2":"final_train.shape","7fbd0efa":"DF_initial_observations(final_test)","1764d49f":"DF_initial_observations(final_train)","4d64ccfe":"x = final_train","25f7ad82":"from sklearn.model_selection import train_test_split\nx_train, x_val, y_train, y_val = train_test_split(x,y)","fc1fcb45":"\nx_train_scaled = x_train.copy()\nx_val_scaled = x_val.copy()\nx_test_scaled = final_test.copy()\n\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nscaler.fit(x_train_scaled)\nx_train_scaled_1 = scaler.transform(x_train_scaled)\nx_val_scaled_1 = scaler.transform(x_val_scaled)\nx_test_scaled_1 = scaler.transform(x_test_scaled)","3a49d73e":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\n\nrf_parm = dict(n_estimators = [20,30,50, 70, 100], max_features = [10, 15, 20, 30])","a95410f9":"rc = RandomForestRegressor()\nrf_grid = GridSearchCV(estimator = rc, param_grid = rf_parm)","805ee31d":"rf_grid.fit(x_train_scaled_1,y_train)","7fc12055":"rf_grid.best_score_","d6417112":"rf_grid.best_params_","9b442cb7":"rc_best = RandomForestRegressor(n_estimators = 100,  max_features = 20)","dfcd7df4":"rc_best.fit(x_train_scaled_1, y_train)\nrc_tr_pred = rc_best.predict(x_train_scaled_1)\nrc_val_pred = rc_best.predict(x_val_scaled_1)\nrc_test_pred = rc_best.predict(x_test_scaled_1)","0f2b8f2f":"from sklearn.metrics import r2_score\n\nprint(r2_score(y_train, rc_tr_pred))\nprint(r2_score(y_val, rc_val_pred))    # Accuracy Scores for Train and Validation Data","a869e5e6":"print(rc_test_pred) #Final Sale Price Predictions for Test Data","bac7ac64":"from sklearn.ensemble import GradientBoostingRegressor\n\ngbrt = GradientBoostingRegressor(random_state=42)\ngbrt_grid = GridSearchCV(estimator=gbrt, param_grid=dict(n_estimators= [2,5,7,8,9,10,11,15,20], max_depth= [1,2,3,4,5,6,7,8,9,10], learning_rate= [0.01,0.1,1,10,100]))","97d8d491":"gbrt_grid.fit(x_train_scaled_1,y_train)","53d2b86a":"gbrt_grid.best_score_","8f9724ce":"gbrt_grid.best_params_","05cd4bdd":"gbrt_best = GradientBoostingRegressor(n_estimators=20, max_depth = 5, learning_rate=0.1, random_state=42)\ngbrt_best.fit(x_train_scaled_1, y_train)","e39b9630":"y_test_predict = gbrt_best.predict(x_test_scaled_1)","3b038c6e":"y_test_predict","18e5ad3b":"### VISUALISATION","d31fcd13":"### Data Preprocessing for Test Data","5b542941":"#### Changing dtypes of Test Data","652fea39":"##### Dealing with nulls Values in Basement Features","32ba1879":"### Train Data","e4300ef2":"Applying Random Forest","74f6c029":"#### Deleting Columns as thye have extreme null values","b68ff5f5":"Scaling the data","420cea40":"#### Creating Dummy Values","7b680c3d":"#### Clearing Outliers","d214989c":"#### Removing Outliers","8e414753":"Gradient Boosting"}}