{"cell_type":{"618662bf":"code","97be4b99":"code","292196ce":"code","16a43ced":"code","96243d97":"code","589bf1e4":"code","5a3b4500":"code","3dcaad60":"code","c1fa97e6":"markdown"},"source":{"618662bf":"import os\nimport glob\nimport shutil\nimport numpy as np\nimport pandas as pd\nfrom tqdm.notebook import tqdm\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","97be4b99":"seed=42\nnp.random.seed(seed)\ntf.random.set_seed(seed)","292196ce":"train = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest  = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\nsub   = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv') ","16a43ced":"#Train Data\nuin, uout, R, C, pressure = [],[],[],[],[]\n\nfor ix in tqdm(train['breath_id'].unique()):\n    rdf = train[train['breath_id']==ix]\n    uin.append(np.array(rdf['u_in']).reshape(-1, 80))\n    uout.append(np.array(rdf['u_out']).reshape(-1, 80))\n    R.append(np.array(rdf['R']).reshape(-1, 80))\n    C.append(np.array(rdf['C']).reshape(-1, 80))\n    pressure.append(np.array(rdf['pressure']).reshape(-1, 80))\n    \nuin=np.array(uin).reshape(-1, 80)\nuout=np.array(uout).reshape(-1, 80)\nR=np.array(R).reshape(-1, 80)\nC=np.array(C).reshape(-1, 80)\npressure=np.array(pressure).reshape(-1, 80)\n\nX = np.stack([uin, uout, R, C], axis=-1)\nY = pressure \nprint(X.shape, Y.shape)","96243d97":"#Test Data\nt_uin, t_uout, t_R, t_C = [],[],[],[]\n\nfor ix in tqdm(test['breath_id'].unique()):\n    rdf = test[test['breath_id']==ix]\n    t_uin.append(np.array(rdf['u_in']).reshape(-1, 80))\n    t_uout.append(np.array(rdf['u_out']).reshape(-1, 80))\n    t_R.append(np.array(rdf['R']).reshape(-1, 80))\n    t_C.append(np.array(rdf['C']).reshape(-1, 80))\n    \nt_uin=np.array(t_uin).reshape(-1, 80)\nt_uout=np.array(t_uout).reshape(-1, 80)\nt_R=np.array(t_R).reshape(-1, 80)\nt_C=np.array(t_C).reshape(-1, 80)\n\nt_X = np.stack([t_uin, t_uout, t_R, t_C], axis=-1)\nprint(t_X.shape)","589bf1e4":"from tensorflow.keras.layers import Dense, LSTM, Input, Activation\ndef create_model():\n    ipt = Input(shape=(80, 4))\n    x = LSTM(150, return_sequences=True)(ipt)\n    x = LSTM(100, return_sequences=True)(x)\n    x = LSTM(80, return_sequences=True)(x)\n    x = Dense(80, activation='relu')(x)\n    x = Dense(40, activation='relu')(x)\n    x = Dense(1)(x)\n    #x = LSTM(150, return_sequences=True)(ipt)\n    #x = LSTM(100, return_sequences=True)(x)\n    #x = LSTM(80, return_sequences=False)(x)\n    #x = Dense(80, activation='relu')(x)\n    \n    return tf.keras.models.Model(ipt, x)","5a3b4500":"#5-FOLD CV\nfrom sklearn.model_selection import KFold\n\nk=5\npreds = np.zeros((sub.shape[0], 1), dtype=np.float64)\nkfold = KFold(n_splits=k)\nfor i, (train_index, val_index) in enumerate(kfold.split(np.arange(X.shape[0]))):\n    print(f\"STARTING FOLD -> {i+1}\")\n    x_train = X[train_index]\n    y_train = Y[train_index]\n    x_val = X[val_index]\n    y_val = Y[val_index]\n    \n    model = create_model()\n    mc_cb = tf.keras.callbacks.ModelCheckpoint(f'.\/fold_{i}_weights.h5', save_weights_only=True, save_best_only=True, \n                                           monitor='val_loss', mode='min')\n    model.compile(loss='mae', optimizer=tf.keras.optimizers.Adam(lr=0.0005))\n    history = model.fit(x_train, y_train, epochs=150, batch_size=64, \n                        validation_data = (x_val, y_val), callbacks=[mc_cb], verbose=0)\n    pd.DataFrame(history.history).plot()\n    plt.grid(True)\n    plt.show()\n    model.load_weights(f'.\/fold_{i}_weights.h5')\n    print(\"Validation Loss: \", model.evaluate(x_val, y_val))\n    #prediction\n    preds += model.predict(t_X).reshape(-1, 1) \npreds\/=k","3dcaad60":"#submission\nsub['pressure'] = preds\nsub.to_csv('submission.csv', index=False)\nsub.head(10)","c1fa97e6":"**<h2><font color='red'>This is a LSTM starter <\/h2>**\n**<h2>I will definately add Cross Validation strategy in future which will make the LB score better and I will keep updating the hyper-parameters!<br>Thank You<\/h2>**\n**<h2><font color='red'>PLEASE DON'T FORGET TO UPVOTE<\/h2>**"}}