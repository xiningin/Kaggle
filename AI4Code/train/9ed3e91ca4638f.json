{"cell_type":{"af2ff2b8":"code","83c01b89":"code","e3a67ad7":"code","515b0c3a":"code","3766f6e6":"code","8f38265c":"code","a17890a6":"code","08d17c8c":"code","6b206a9d":"code","83e03dd6":"code","60aac1b6":"code","b48f1f91":"code","d8c1f24a":"code","86c5b902":"code","231ea7d3":"code","d68276de":"code","3335b53b":"code","db2c5750":"code","27581a8f":"code","61edb827":"code","37538756":"code","cc8b96e3":"code","54a1bbc9":"code","5313351a":"code","266ca8c8":"code","1a71384a":"code","8ed4fa9a":"code","f7057320":"code","fe8e58d0":"code","5f0cf2cb":"code","2bd3b77b":"code","84bef058":"code","05232515":"code","96e386ce":"code","41bec6e1":"code","0f941275":"code","78a71eb1":"code","b65fbc77":"code","7504134b":"code","e1fbfc90":"code","c8efe531":"code","87269587":"code","1a172ac3":"code","1498986a":"code","363ece22":"code","df86e355":"code","a1383f11":"markdown","0984effa":"markdown","8bc9e8c6":"markdown","8d631747":"markdown","4c79f067":"markdown","eb34c221":"markdown","05ffacdb":"markdown","95bba12e":"markdown","17a37551":"markdown","bff0a721":"markdown","8fe3ff30":"markdown","712f2a30":"markdown","750a8121":"markdown","fe7e1b64":"markdown","1686df6a":"markdown","c0d30142":"markdown","c851e97e":"markdown","aaabe246":"markdown","33052e66":"markdown","f021d62c":"markdown","7d62cd9a":"markdown","d95eae26":"markdown","fbb1fb73":"markdown","8c9ceb2d":"markdown","2c102263":"markdown","2f7b56a0":"markdown","bc70abe2":"markdown","e48c2145":"markdown","8d2abc62":"markdown","4d17b06f":"markdown","6b536d1e":"markdown","f03a38d4":"markdown","0741ba9e":"markdown","1790a489":"markdown","581e7745":"markdown","3260530d":"markdown","dfc6ae14":"markdown","a1d8fa9a":"markdown","dfa9b061":"markdown"},"source":{"af2ff2b8":"import pandas as pd\nimport numpy as np\nimport requests\nfrom pandas.io.json import json_normalize\nfrom sklearn.cluster import KMeans\nfrom matplotlib import cm\nfrom matplotlib import colors\n\nfrom geopy.geocoders import Nominatim\nfrom geopy.extra.rate_limiter import RateLimiter\n\n# !conda install -c conda-forge folium=0.5.0 --yes\nimport folium","83c01b89":"# @hidden_cell\nCLIENT_ID = 'JTFC2YRZFN5HFUVSE5PXBOEPFOLWQO02VFGOC42KUA13SRLM' # your Foursquare ID\nCLIENT_SECRET = 'KL1JALAN1PY4XO0CGAD2IMZB153UM1THKPUOG0B22OU04VRV' # your Foursquare Secret\nVERSION = '20180604'\nLIMIT = 30\n\nprint(\"Foursquare credentials initialized\")","e3a67ad7":"list=[]\ndfs = pd.read_html('https:\/\/en.wikipedia.org\/wiki\/B_postcode_area',header=0)\nbir = dfs[1]\nbir.head()","515b0c3a":"bir['Post town'].value_counts()","3766f6e6":"bir = bir[bir['Post town'] == 'BIRMINGHAM']\nbir['Post town'].value_counts()","8f38265c":"bir.isnull().sum()","a17890a6":"bir.dropna(subset=['Coverage'],inplace=True)\nbir.isnull().sum()","08d17c8c":"locator = Nominatim(user_agent=\"myGeocoder\")\n\n# 1 - conveneint function to delay between geocoding calls\ngeocode = RateLimiter(locator.geocode, min_delay_seconds=1)\n\n# 2- - create location column\nbir['location'] = bir['Coverage'].apply(geocode)","6b206a9d":"# 3 - create longitude, laatitude and altitude from location column (returns tuple)\nbir['point'] = bir['location'].apply(lambda loc: tuple(loc.point) if loc else None)\n\n# 4 - drop null values\nbir.dropna(subset=['location','point'],inplace=True)\n\n# 5 - split point column into latitude, longitude and altitude columns\nbir[['latitude', 'longitude', 'altitude']] = pd.DataFrame(bir['point'].tolist(), index=bir.index)","83e03dd6":"bir.head(3)","60aac1b6":"bir.isnull().sum()","b48f1f91":"bir.drop(columns=['Postcode district','Post town','Local authority area','location','point','altitude'], inplace=True)\nbir.rename({'Coverage':'Neighborhood'},axis=1,inplace=True)","d8c1f24a":"bir.head()","86c5b902":"list=[]\ndfs = pd.read_html('https:\/\/en.wikipedia.org\/wiki\/M_postcode_area',header=0)\nman = dfs[1]\nman.head()","231ea7d3":"man['Post town'].value_counts()","d68276de":"man = man[man['Post town'] == 'MANCHESTER']\nman['Post town'].value_counts()","3335b53b":"man.isnull().sum()","db2c5750":"man['location'] = man['Coverage'].apply(geocode)\nman['point'] = man['location'].apply(lambda loc: tuple(loc.point) if loc else None)\nman[['latitude', 'longitude', 'altitude']] = pd.DataFrame(man['point'].tolist(), index=man.index)","27581a8f":"man.drop(columns=['Postcode district','Post town','Local authority area','location','point','altitude'], inplace=True)\nman.head(3)","61edb827":"man.isnull().sum()","37538756":"man.dropna(subset=['latitude','longitude'],inplace=True)\nman.isnull().sum()","cc8b96e3":"man.rename({'Coverage':'Neighborhood'},axis=1,inplace=True)","54a1bbc9":"man.head()","5313351a":"def getNearbyVenues(names, latitudes, longitudes, radius=500):\n    \n    venues_list=[]\n    for name, lat, lng in zip(names, latitudes, longitudes):\n            \n        # create the API request URL\n        url = 'https:\/\/api.foursquare.com\/v2\/venues\/explore?&client_id={}&client_secret={}&v={}&ll={},{}&radius={}&limit={}'.format(\n            CLIENT_ID, \n            CLIENT_SECRET, \n            VERSION, \n            lat, \n            lng, \n            radius, \n            LIMIT)\n            \n        # make the GET request\n        results = requests.get(url).json()['response']['groups'][0]['items']\n        \n        # return only relevant information for each nearby venue\n        venues_list.append([( \n            v['venue']['name'],\n            v['venue']['categories'][0]['name']) for v in results])\n\n    nearby_venues = pd.DataFrame([item for venue_list in venues_list for item in venue_list])\n    nearby_venues.columns = ['Venue','Venue Category']\n    \n    return(nearby_venues)","266ca8c8":"bir_venues = getNearbyVenues(names=bir['Neighborhood'],\n                             latitudes=bir['latitude'],\n                             longitudes=bir['longitude']\n                            )","1a71384a":"bir_venues.head()","8ed4fa9a":"print(\"Number of places of interest:\", format(bir_venues.shape[0]))","f7057320":"bir_top = bir_venues['Venue Category'].value_counts()[0:10]\nbir_top","fe8e58d0":"man_venues = getNearbyVenues(names=man['Neighborhood'],\n                             latitudes=man['latitude'],\n                             longitudes=man['longitude']\n                            )","5f0cf2cb":"man_venues.head()","2bd3b77b":"print(\"Number of places of interest:\", format(man_venues.shape[0]))","84bef058":"man_top = man_venues['Venue Category'].value_counts()[0:10]\nman_top","05232515":"a = (bir_venues['Venue Category']==\"Zoo\").sum(), (man_venues['Venue Category']==\"Zoo\").sum() \nprint(\"Number of zoos in Birmingham and Manchester: \",a)","96e386ce":"bir_onehot = pd.get_dummies(bir_venues[['Venue Category']], prefix=\"\", prefix_sep=\"\")\n\n# add neighborhood column back to dataframe\nbir_onehot['Neighborhood'] = bir['Neighborhood'] \n\nbir_onehot.set_index(\"Neighborhood\",inplace=True)\n\nbir_onehot.head(3)","41bec6e1":"# Group by neighborhood\nbir_grouped = bir_onehot.groupby('Neighborhood').mean().reset_index()\n\ndef return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)\n    \n    return row_categories_sorted.index.values[0:num_top_venues]\n\nnum_top_venues = 10\n\nindicators = ['st', 'nd', 'rd']\n\n# create columns according to number of top venues\ncolumns = ['Neighborhood']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\n\n# create a new dataframe\nneighborhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighborhoods_venues_sorted['Neighborhood'] = bir_grouped['Neighborhood']\n\nfor ind in np.arange(bir_grouped.shape[0]):\n    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(bir_grouped.iloc[ind, :], num_top_venues)\n\nneighborhoods_venues_sorted.head(3)","0f941275":"kclusters = 3\n\nbir_grouped_clustering = bir_grouped.drop('Neighborhood', 1)\n\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(bir_grouped_clustering)\n\nkmeans.labels_","78a71eb1":"# New dataframe that includes the cluster as well as the top 10 venues for each neighborhood\n\n# Drop old 'Cluster Labels' column if it exists\nif \"Cluster Labels\" in neighborhoods_venues_sorted.columns:\n    neighborhoods_venues_sorted = neighborhoods_venues_sorted.drop('Cluster Labels', axis=1)\n\n# add clustering labels\nneighborhoods_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)\n\nbir_merged = bir\n\n# merge toronto_grouped with toronto_data to add latitude\/longitude for each neighborhood\nbir_merged = bir_merged.join(neighborhoods_venues_sorted.set_index('Neighborhood'), on='Neighborhood')\n\nbir_merged.head(3)","b65fbc77":"bir_merged.set_index('Neighborhood',inplace=True)\nbir_merged.drop(['Handsworth','Yardley'],inplace=True)\nbir_merged.reset_index(inplace=True)\nbir_merged.head(2)","7504134b":"# Birmingham's coordinates\nlat = 52.4862\nlon = -1.8904\nmap_clusters = folium.Map(location=[lat,lon], zoom_start=10)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(bir_merged['latitude'], bir_merged['longitude'], bir_merged['Neighborhood'], bir_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n       \nmap_clusters","e1fbfc90":"b1 = bir_merged.loc[bir_merged['Cluster Labels'] == 0, :]\nb1 = b1[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nb1","c8efe531":"b2 = bir_merged.loc[bir_merged['Cluster Labels'] == 1, :]\nb2 = b2[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nb2","87269587":"b3 = bir_merged.loc[bir_merged['Cluster Labels'] == 2, :]\nb3 = b3[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nb3","1a172ac3":"man_onehot = pd.get_dummies(man_venues[['Venue Category']], prefix=\"\", prefix_sep=\"\")\nman_onehot['Neighborhood'] = man['Neighborhood'] \nman_onehot.set_index(\"Neighborhood\",inplace=True)\nman_grouped = man_onehot.groupby('Neighborhood').mean().reset_index()\ndef return_most_common_venues(row, num_top_venues):\n    row_categories = row.iloc[1:]\n    row_categories_sorted = row_categories.sort_values(ascending=False)   \n    return row_categories_sorted.index.values[0:num_top_venues]\nnum_top_venues = 10\nindicators = ['st', 'nd', 'rd']\ncolumns = ['Neighborhood']\nfor ind in np.arange(num_top_venues):\n    try:\n        columns.append('{}{} Most Common Venue'.format(ind+1, indicators[ind]))\n    except:\n        columns.append('{}th Most Common Venue'.format(ind+1))\nneighborhoods_venues_sorted = pd.DataFrame(columns=columns)\nneighborhoods_venues_sorted['Neighborhood'] = man_grouped['Neighborhood']\nfor ind in np.arange(man_grouped.shape[0]):\n    neighborhoods_venues_sorted.iloc[ind, 1:] = return_most_common_venues(man_grouped.iloc[ind, :], num_top_venues)\n\nkclusters = 3\nman_grouped_clustering = man_grouped.drop('Neighborhood', 1)\nkmeans = KMeans(n_clusters=kclusters, random_state=0).fit(man_grouped_clustering)\n\nif \"Cluster Labels\" in neighborhoods_venues_sorted.columns:\n    neighborhoods_venues_sorted = neighborhoods_venues_sorted.drop('Cluster Labels', axis=1)\nneighborhoods_venues_sorted.insert(0, 'Cluster Labels', kmeans.labels_)\nman_merged = man\nman_merged = man_merged.join(neighborhoods_venues_sorted.set_index('Neighborhood'), on='Neighborhood')\n\n# Manchester's coordinates\nlat = 53.4808\nlon = -2.2426\nmap_clusters = folium.Map(location=[lat,lon], zoom_start=10)\n\n# set color scheme for the clusters\nx = np.arange(kclusters)\nys = [i + x + (i*x)**2 for i in range(kclusters)]\ncolors_array = cm.rainbow(np.linspace(0, 1, len(ys)))\nrainbow = [colors.rgb2hex(i) for i in colors_array]\n\n# add markers to the map\nmarkers_colors = []\nfor lat, lon, poi, cluster in zip(man_merged['latitude'], man_merged['longitude'], man_merged['Neighborhood'], man_merged['Cluster Labels']):\n    label = folium.Popup(str(poi) + ' Cluster ' + str(cluster), parse_html=True)\n    folium.CircleMarker(\n        [lat, lon],\n        radius=5,\n        popup=label,\n        color=rainbow[cluster-1],\n        fill=True,\n        fill_color=rainbow[cluster-1],\n        fill_opacity=0.7).add_to(map_clusters)\n       \nmap_clusters","1498986a":"m1 = man_merged.loc[man_merged['Cluster Labels'] == 0, :]\nm1 = m1[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nm1","363ece22":"m2 = man_merged.loc[man_merged['Cluster Labels'] == 1, :]\nm2 = m2[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nm2","df86e355":"m3 = man_merged.loc[man_merged['Cluster Labels'] == 2, :]\nm3 = m3[['Neighborhood','1st Most Common Venue','2nd Most Common Venue','3rd Most Common Venue','4th Most Common Venue']]\nm3","a1383f11":"Train kmeans model","0984effa":"> # Code","8bc9e8c6":"># Top 10 categories in Birmingham","8d631747":"### Cluster 1","4c79f067":"Birmingham neighborhoods:\n\n    -\tIf you are an Indian, check out Edgbaston, Buckland End, Kingshearst and Hamstead.\n    -\tIf close access to coffee shops is a must for you, check out the City Centre, Vauxhall, Stirchley and West Heath.\n    -\tIf you like non-veg, many neighborhoods in Birmingham have Fried Chicken Joints.","eb34c221":"### Cluster 3","05ffacdb":"There is one null value. Drop it.","95bba12e":"## Data\n\nI will use Foursquare to explore both the cities. This should help a person select the city they\u2019d like to live in.\n\nI will then use Foursquare to explore the neighborhoods to help the person select a place to call home.\n\nI will get the list of postal codes and neighborhoods from the following:\n\nBirmingham - https:\/\/en.wikipedia.org\/wiki\/B_postcode_area\n\nManchester - https:\/\/en.wikipedia.org\/wiki\/M_postcode_area\n\nI will use geocoder to get the latitudes and longitudes needed.","17a37551":"## Birmingham","bff0a721":"### Cluster 1","8fe3ff30":"> # Results\n\nTop 10 Venue Categories:\n\nSimilarities\n\n    \u2022\tPubs\n    \u2022\tIndian Restaurants\n    \u2022\tCoffee Shops & Cafes\n    \u2022\tBars\n    \u2022\tRestaurants\n    \u2022\tSupermarkets\nDifferences\n\n    \u2022\tBirmingham has more Fast Food Restaurants, Italian Restaurants and Soccer Stadiums.\n    \u2022\tManchester has more Parks, Hotels and Grocery Stores.","712f2a30":"Let's drop 'Post town', 'Local authority area', 'location', 'point' and 'altitude'.","750a8121":"> # Introduction\n\nWhen we think of UK, we think of London. Although a great place to visit, London isn\u2019t necessarily affordable by everyone as a place to live. Due to this, many prefer living in a city close to London so that not only can they live in a bigger house for a lower rent, and save on many other things while earning a decent income, but also can drop in London within an hour or two. Smart.\n\nA problem with this approach is that if you just want a quick night-out, maybe go to a fancy restaurant, or visit a museum, or a park, you shouldn\u2019t have to sit in a train for over an hour, every single time. The city you choose should have things to do that you prefer.\n\nWhat then, is the next best thing? \n\nA quick Google search revealed people prefer either Birmingham or Manchester. Many say Birmingham\u2019s better, even better than London, while many side with Manchester. \n\nBut which one\u2019s better for you?\n","fe7e1b64":"#### Observations\n\n- If you are an Indian, check out Edgbaston, Buckland End, Kingshearst and Hamstead.\n- If close access to coffee shops is a must for you, check out the City Centre, Vauxhall, Stirchley and West Heath.\n- If you like non-veg, many neighborhoods in Birmingham have Fried Chicken Joints.","1686df6a":"### Cluster 2","c0d30142":"Manchester neighborhoods:\n\n    -\tIf you want close access to a Bar and a Flea Market, check out Deansgate, Tyldesly and Whitefield.\n    -\tIf you're just visiting Manchester and want to live in a hotel, check out Stretford and Trafford Park.\n    -\tIf you're a Vegan, almost all neighborhoods will be fine.","c851e97e":"# No zoo?! Dealbreaker.","aaabe246":"Group by 'Neighborhood'","33052e66":"## Prepare Birmingham dataset","f021d62c":"#### Observations:\n\n#### **Similarities**\n* Pubs\n* Indian Restaurants\n* Coffee Shops & Cafes\n* Bars\n* Restaurants\n* Supermarkets\n\n#### **Differences**\n* Birmingham has more Fast Food Restaurants, Italian Restaurants and Soccer Stadiums.\n* Manchester has more Parks, Hotels and Grocery Stores.\n","7d62cd9a":"># Top 10 categories in Manchester","d95eae26":"I will create clusters of neighborhoods based on its Top 10 Venue Categories. For that, I need to\n\n- One hot encode the Venue Categories\n- Find the top 10 categories\n- Group by Neighborhoods","fbb1fb73":"## Disclaimer\n\nI am doing this project to learn. Needless to say, I strongly advise you against using this to make a major life decision!\n\nBut yes, feel free to go through the notebook and let me know what you think.","8c9ceb2d":"### Cluster 2","2c102263":"No nulls. Now add coordinates.","2f7b56a0":"## Manchester","bc70abe2":"After running the below visualization, I noticed two circle spots outside Birmingham. They must be a mistake. Let's drop them.","e48c2145":"# Brummy or Mancunian - Which one are you? [Birmingham|Manchester]","8d2abc62":"## Discussion\n\nThere are many ways we could improve this project:\n\n1) **Better Clustering** - I used K-Means, and I also tried Agglomerative Hierarchical Clustering and Density-Based Clustering. None of them gave good results. In both cases, cluster 1 has the most values. They are outliers, which is not ideal. There must ways to improve the dataset and the clustering algorithms.\n        \n2) **Using Crime Data** - Getting insights into this would definitely help make a better decision. \n        \n3) **Using Population Data** - Getting details about the population would be very helpful. Is it a young city\/neighborhood or more suitable for the elderly? Are there any neighborhoods where you can find people from your home country?\n        \n4) **Using Weather Data** - Manchester\u2019s in the North of England. How is the weather up there compared to Birmingham?","4d17b06f":"># Cluster the neighborhoods","6b536d1e":"Now, let's add the coordinates.","f03a38d4":"## Conclusion\nThis project is of course not something you could use alone to make a life decision. For this to reach that level, a lot of improvements need to be moved, some of which have been mentioned above.\nI did this project to learn and apply my skills in a clustering problem, and I must say, I learnt a lot. Also learnt a few new things about the two cities. \n","0741ba9e":"Let's select only Birmingham.","1790a489":"> # Methodology\n\n1)\tCreating datasets\n\n    \u2022\tCreate the Birmingham and Manchester datasets using the above links. \n\n    \u2022\tAdd latitudes and longitudes to the neighborhoods. \n\n    \u2022\tRemove null values and unnecessary columns.\n\n2)\tExploration\n\n    \u2022\tDefine a function to get nearby venues and their categories \u2013 based on the name of the neighborhood and its coordinates.\n\n    \u2022\tCall this function for Birmingham and Manchester. \n\n    \u2022\tSelect the top 10 venues with their categories for each neighborhood, in each city.\n\n3)\tClustering the neighborhoods\n\n    \u2022\tOne hot encode the venue categories and find its 10 most common venues for each neighborhood.\n\n    \u2022\tGroup the dataset by neighborhoods for clustering.\n\n    \u2022\tDefine the Kmeans model.\n\n    \u2022\tFit the model using the data frame having the values of the 10 most common venues for each neighborhood. \n        This will give you a label for each cluster.\n\n    \u2022\tAdd these labels to your data frame for each neighborhood.\n\n4)\tVisualize the clusters\n\n    \u2022\tUse folium to visualize the clusters on a map.\n\n    \u2022\tPass the latitude and longitude values for the respective cities. \n\n        \uf0e8\tBirmingham: lat = 52.4862 | lon = -1.8904\n\n        \uf0e8\tManchester: lat = 53.4808 | lon = -2.2426\n\n    \u2022\tAdd a CircleMarker to the map for each cluster with the name of the neighborhood and cluster on it.\n\n5)\tExplore the clusters\n\n    \u2022\tCreate a separate dataframe for each cluster and see what the common venues are in that cluster.\n\n    \u2022\tAnalyze, and make observations. For what kind of people would a particular cluster of neighborhoods be suitable for?","581e7745":"One-hot encode 'Venue Category'","3260530d":"#### Observations\n\n- If you want close access to a Bar and a Flea Market, check out Deansgate, Tyldesly and Whitefield.\n- If you're just visiting Manchester and want to live in a hotel, check out Stretford and Trafford Park.\n- If you're a Vegan, almost all neighborhoods will be fine.","dfc6ae14":"## Prepare Manchester dataset","a1d8fa9a":"## Let's explore!\n\nFirst, let's explore each city. Mainly, what is trending in that city, or, what the top venues are in that city. This will help you undertand what kind of a city that is, and if it is for you. For example, if you are a foodie, and Manchester has many good restaurants, then you know where to go.","dfa9b061":"### Cluster 3"}}