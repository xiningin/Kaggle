{"cell_type":{"e7acdca1":"code","424575e5":"code","c3da4ef4":"code","df909d23":"code","a5be6d49":"code","dd87879e":"code","d353a8f1":"code","b3c6cdb1":"code","d247f5c0":"code","a10c9868":"code","cff26da1":"code","d6cba4ce":"code","a246a74b":"code","4beb3383":"code","f51406e5":"code","f4a18486":"code","ea9e1188":"code","a8e6f1ed":"code","95f806fb":"code","5b055e3c":"code","1eb973d0":"code","0a366515":"code","317a6e85":"markdown","a5f8f556":"markdown","2c05736c":"markdown","ef1ef4c9":"markdown","f0a2619e":"markdown","f73046a6":"markdown","9aaeea0f":"markdown","808f30a6":"markdown","a943a10a":"markdown"},"source":{"e7acdca1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","424575e5":"import pandas as pd\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nprint(\"Setup Complete\")","c3da4ef4":"ru_videos_filepath = \"..\/input\/youtube-new\/RUvideos.csv\"\nca_videos_filepath = \"..\/input\/youtube-new\/CAvideos.csv\"\nde_videos_filepath = \"..\/input\/youtube-new\/DEvideos.csv\"\nfr_videos_filepath = \"..\/input\/youtube-new\/FRvideos.csv\"\ngb_videos_filepath = \"..\/input\/youtube-new\/GBvideos.csv\"\nin_videos_filepath = \"..\/input\/youtube-new\/INvideos.csv\"\njp_videos_filepath = \"..\/input\/youtube-new\/JPvideos.csv\"\nkr_videos_filepath = \"..\/input\/youtube-new\/KRvideos.csv\"\nmx_videos_filepath = \"..\/input\/youtube-new\/MXvideos.csv\"\nus_videos_filepath = \"..\/input\/youtube-new\/USvideos.csv\"\n\n# Read the file into a variable \n\nv_ru = pd.read_csv(ru_videos_filepath, parse_dates=True)\nv_ca = pd.read_csv(ca_videos_filepath, parse_dates=True) \nv_de = pd.read_csv(de_videos_filepath, parse_dates=True) \nv_fr = pd.read_csv(fr_videos_filepath, parse_dates=True)\nv_gb = pd.read_csv(gb_videos_filepath, parse_dates=True)\nv_in = pd.read_csv(in_videos_filepath, parse_dates=True)\nv_jp = pd.read_csv(jp_videos_filepath, parse_dates=True)\nv_kr = pd.read_csv(kr_videos_filepath, parse_dates=True)\nv_mx = pd.read_csv(mx_videos_filepath, parse_dates=True)\nv_us = pd.read_csv(us_videos_filepath, parse_dates=True)\n\n\n\n\n","df909d23":"# Add column with name of country in all datasets\nv_ru['country'] = 'RU'\nv_ca['country'] = 'CA'\nv_de['country'] = 'DE'\nv_fr['country'] = 'FR'\nv_gb['country'] = 'GB'\nv_in['country'] = 'IN'\nv_jp['country'] = 'JP'\nv_kr['country'] = 'KR'\nv_mx['country'] = 'MX'\nv_us['country'] = 'US'","a5be6d49":"all_video = pd.concat([v_ru, v_ca, v_de, v_fr, v_gb, v_gb, v_in, v_jp, v_kr, v_mx, v_us])\nall_video.info()","dd87879e":"all_video[pd.isnull(all_video.views)]\n","d353a8f1":"all_video[pd.isnull(all_video.comment_count)]","b3c6cdb1":"all_video['len_call'] = all_video.title.apply(lambda p:len(p))","d247f5c0":"sns.lmplot(x='len_call', y='views',hue = 'country', data = all_video)","a10c9868":"col=['views','likes','dislikes','comment_count']\nall_video[col].corr()\nplt.figure(figsize=(10,6))\nsns.heatmap(all_video[col].corr(), annot=True, fmt= '.2f')","cff26da1":"plt.figure(figsize = (10,5))\n#sns.scatterplot(x=all_video['views'], y=all_video['likes'],hue = all_video['country'])\nsns.lmplot(x=\"views\", y=\"likes\", hue=\"country\", data=all_video)","d6cba4ce":"all_video['views'] = all_video['views'].fillna(0)\nall_video['likes'] = all_video['likes'].fillna(0)\nall_video['dislikes'] = all_video['dislikes'].fillna(0)\nall_video['comment_count'] = all_video['comment_count'].fillna(0)","a246a74b":"all_video=all_video[~all_video['likes'].isin([0,np.inf])]\nall_video=all_video[~all_video['views'].isin([0,np.inf])]\nall_video=all_video[~all_video['dislikes'].isin([0,np.inf])]\nall_video=all_video[~all_video['comment_count'].isin([0,np.inf])]\n","4beb3383":"import numpy as np\nall_video['likeslog']=np.log10(all_video['likes'])\nall_video['viewslog']=np.log10(all_video['views'])\nall_video['commentlog']=np.log10(all_video['comment_count'])","f51406e5":"plt.figure(figsize=(12,12))\nsns.scatterplot(all_video['viewslog'],all_video['likeslog'],hue=all_video[\"country\"])\nsns.despine(bottom=True, left=True)\nplt.xlabel('viewslog')\nplt.ylabel('likeslog') \nplt.show()","f4a18486":"sns.kdeplot(data=all_video['viewslog'], label=\"views\", shade=True)\nsns.kdeplot(data=all_video['likeslog'], label=\"likes\", shade=True)\nsns.kdeplot(data=all_video['commentlog'], label=\"comment_count\", shade=True)\n\n# Add title\nplt.title(\"Distribution of comment likes adn views\")\nplt.xlabel('np.log(count)')\n\n# Force legend to appear\nplt.legend()","ea9e1188":"sns.jointplot(x=all_video['viewslog'], y=all_video['commentlog'], kind=\"kde\")","a8e6f1ed":"col = ['video_error_or_removed','comments_disabled','ratings_disabled']\nall_video[col] = all_video[col].fillna(0).astype(int)\n\n","95f806fb":"col = ['views','likes','dislikes','comment_count']\nsns.set_style('whitegrid')\nsns.lmplot(x='likes', y='dislikes',hue = 'country', data = all_video)\n","5b055e3c":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import classification_report\n\n\n\ncol_x=['views','comment_count','dislikes','video_error_or_removed','ratings_disabled']\ny = all_video.likes\nX = all_video[col_x]\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.8, test_size=0.2,\n                                                                random_state=42)","1eb973d0":"def get_mae(n_estimators,learning_rate,train_X, val_X, train_y, val_y):\n    my_model = XGBRegressor(n_estimators=n_estimators, learning_rate=learning_rate)\n    my_model.fit(X_train, y_train, \n             early_stopping_rounds=5, \n             eval_set=[(X_test, y_test)], \n             verbose=False)\n    preds_val = my_model.predict(X_test)\n    mae = mean_absolute_error(y_test, preds_val)\n    return(mae)\n\nfor n_estimators in [5, 50, 100, 500,1000]:\n    for learning_rate in [0.01, 0.03, 0.05, 0.07, 0.09] :\n        my_mae = get_mae(n_estimators,learning_rate, X_train, X_test, y_train, y_test)\n        print(\"n_estimators nodes: %d \\t learning_rate:%.2f  \\t Mean Absolute Error:  %d\" %(n_estimators,learning_rate, my_mae))\n","0a366515":"model = XGBRegressor(n_estimators=1000, learning_rate=0.09)\nmodel.fit(X_train, y_train, \n             early_stopping_rounds=5, \n             eval_set=[(X_test, y_test)], \n             verbose=False)\npreds_val = model.predict(X_test)\nmae = mean_absolute_error(y_test, preds_val)\n","317a6e85":"The idea was found on the Internet that the length of the video title can correlate with the number of views, i.e. the larger the title, the less desire to watch the video","a5f8f556":"Converting boolean values to integers for further use in the training set","2c05736c":"# Task2","ef1ef4c9":"The scatter plot also supports the above thesis.","f0a2619e":"# Task5","f73046a6":"As can be seen from the figure, for each country there is a stable positive relationship between the number of views and the number of likes. Which is also confirmed by the correlation matrix","9aaeea0f":"**Modeling**","808f30a6":"# Task1","a943a10a":"As you can see from the graph and the correlation matrix, there is a relationship between the cells, that is, they affect the target variable"}}