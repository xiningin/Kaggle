{"cell_type":{"f6b1a9df":"code","373a5e28":"code","64d8d772":"code","57578e67":"code","cdb19fdc":"code","efb012de":"code","87c5f16e":"code","ccdc468d":"code","af8f74b6":"code","5a0348f0":"code","aea16ccb":"code","ac0d3a37":"code","712f17ea":"code","95d9633e":"code","3b9df5a7":"code","925dd7bf":"code","0cb034e7":"code","71ae4a4f":"code","43e3230b":"code","fd078e87":"code","cf290468":"markdown"},"source":{"f6b1a9df":"import pydicom\nimport glob\nimport pandas as pd\nimport ast\nimport os","373a5e28":"image = pd.read_csv('..\/input\/siim-covid19-detection\/train_image_level.csv')\nimage['StudyInstanceUID'] = image['StudyInstanceUID'] + '_study'\nimage","64d8d772":"study = pd.read_csv('..\/input\/siim-covid19-detection\/train_study_level.csv')\nstudy = study.set_index(['id'])\nstudy","57578e67":"labels = study.loc[image['StudyInstanceUID'].to_numpy()].reset_index()\nlabels","cdb19fdc":"df = pd.merge(image.rename(columns={'id': 'image_id'}), labels, how='inner', left_on='StudyInstanceUID', right_on='id')\ndf = df.drop_duplicates()\ndf = df.reset_index(drop=True)\ndf = df.drop(['StudyInstanceUID', 'label', 'id'], axis=1)\ndf['image_id'] = df['image_id'].apply(lambda x: x[:-6])\ndf","efb012de":"paths = glob.glob('..\/input\/siim-covid19-detection\/train\/*\/*\/*.dcm')\n\nimage_idx = [os.path.split(path)[1][:-4] for path in paths]\nimage_idx[:5]","87c5f16e":"paths_df = pd.DataFrame({'image_id': image_idx, 'Path': paths})\npaths_df","ccdc468d":"data = df.merge(paths_df, left_on='image_id', right_on='image_id')\ndata","af8f74b6":"def get_wh(path):\n    ds = pydicom.dcmread(path)\n    # .Rows = height .Columns = width\n    return {'w': ds.Columns, 'h': ds.Rows}","5a0348f0":"# this cell is executed for a long time\nwh = pd.DataFrame(list(data['Path'].apply(get_wh)))\nwh","aea16ccb":"data[['w', 'h']] = wh\ndata","ac0d3a37":"data['boxes'] = data['boxes'].apply(lambda x: ast.literal_eval(x) if not pd.isna(x) else x)\ndata = data.explode('boxes').reset_index(drop=True)\ndata","712f17ea":"data.loc[data['boxes'].isna(), 'boxes'] = str(dict(x=0, y=0, width=0, height=0))\ndata","95d9633e":"def str_to_dict(s):\n    if type(s) is str:\n        s = ast.literal_eval(s)\n    return s","3b9df5a7":"data['boxes'] = data['boxes'].apply(str_to_dict)","925dd7bf":"xywh = pd.DataFrame(list(data['boxes']))\nxywh","0cb034e7":"data[['x', 'y', 'width', 'height']] = xywh\ndata","71ae4a4f":"data['x'] = data['x'] \/ data['w'] * 512\ndata['y'] = data['y'] \/ data['h'] * 512\ndata['width'] = data['width'] \/ data['w'] * 512\ndata['height'] = data['height'] \/ data['h'] * 512\ndata","43e3230b":"df_to_save = data.drop(['boxes', 'w', 'h'], axis=1).rename(columns={'width': 'w', 'height': 'h'})\ndf_to_save","fd078e87":"df_to_save.to_csv('train.csv', index=False)","cf290468":"In this notebook I created a .csv file, which consists of 10 columns: labels for the type of disease,the image id, the path of the .dcm file in the file system, the coordinates and size of the bounding boxes.The entries in the table are repeated because there can be several bounding boxes for one picture. Coordinates of bounding boxes are calculated for the size of pictures 512\u0445512. You can change the coordinates and sizes of the bounding boxes by making elementary proportions :)"}}