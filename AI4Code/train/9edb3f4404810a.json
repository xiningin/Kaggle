{"cell_type":{"2d2cd820":"code","c51a4f32":"code","473951d7":"code","373a37a3":"code","2130e63d":"code","0bdb992d":"code","92e1efee":"code","115cdc35":"code","89d51f16":"code","b1e99901":"code","16f14a72":"code","43a41753":"code","795370ff":"code","784b2456":"code","6449588f":"code","18dc765b":"code","6b6b694f":"code","45ba8c80":"code","7e876dad":"code","cbff4e2f":"code","fc1f2a74":"code","9113faf0":"code","f322b927":"code","884ac1f4":"code","947e91c6":"code","fd592843":"code","381aa293":"code","92de7d36":"code","0b08f1e6":"code","8eee9398":"code","1fedd108":"code","019e43fb":"code","05733d03":"code","3d7fad0a":"code","144b0e3f":"code","e2c11d15":"code","1ed91926":"code","b46a02e6":"code","8ce160bb":"code","5cf2cc0d":"code","b7a1a88a":"markdown","284be237":"markdown","d6026d16":"markdown","fddd618b":"markdown","05aa9d44":"markdown","0d4d2497":"markdown","286ef39f":"markdown","edbd3040":"markdown","48e43ead":"markdown","51c224de":"markdown","ef1217d4":"markdown","32f6b8ff":"markdown","ed98f29f":"markdown","a20dbc34":"markdown","726fb8d1":"markdown","307dd871":"markdown","77ba950e":"markdown","706f6b51":"markdown","717cc82d":"markdown","7fc8127b":"markdown"},"source":{"2d2cd820":"#!pip install sidetable\nimport pandas as pd\nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt \n#import sidetable\nimport scipy.cluster.hierarchy as sch\nfrom sklearn.cluster import AgglomerativeClustering\nfrom scipy.cluster.hierarchy import dendrogram, linkage\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.cluster import KMeans\nfrom sklearn.preprocessing import LabelEncoder\n","c51a4f32":"data=pd.read_csv(\"..\/input\/movies-on-netflix-prime-video-hulu-and-disney\/MoviesOnStreamingPlatforms_updated.csv\")","473951d7":"data.drop(columns=\"Unnamed: 0\",inplace=True)\n","373a37a3":"data.head()","2130e63d":"data.info()","0bdb992d":"data.isna().mean()*100","92e1efee":"import missingno as msno\n%matplotlib inline\nmsno.matrix(data)","115cdc35":"data.drop([\"Age\",\"Type\"],axis=1,inplace=True)\ndata.dropna(axis=0,inplace=True,how=\"any\")\ndata[\"ID\"]=[i for i in range(len(data))]\ndata.set_index(\"ID\",inplace=True)","89d51f16":"data","b1e99901":"data[\"IMDb\"] = [float(score[0:3]) for score in data[\"IMDb\"]]\ndata[\"Rotten Tomatoes\"] = [float(score[0:2]) for score in data[\"Rotten Tomatoes\"]]","16f14a72":"data","43a41753":"genres=[]\nfor s in data.Genres.dropna():\n  l=s.split(sep=\",\")\n  for s2 in l:\n    if not( s2 in genres ):\n      genres.append(s2)\nprint(genres)\nprint(len(genres))","795370ff":"country=[]\nfor s in data.Country.dropna():\n  l=s.split(sep=\",\")\n  for s2 in l:\n    if not( s2 in country ):\n      country.append(s2)\nprint(country)\nprint(len(country))","784b2456":"language=[]\nfor s in data.Language.dropna():\n  l=s.split(sep=\",\")\n  for s2 in l:\n    if not( s2 in language ):\n      language.append(s2)\nprint(language)\nprint(len(language))","6449588f":"plt.figure(figsize=(10,6))\nplt.title(\"Distribution of IMDb Ratings\", fontsize=15)\nsns.distplot(data['IMDb'])","18dc765b":"plt.figure(figsize=(10,6))\nplt.title(\"Movie Length Distribution\", fontsize=15)\nsns.distplot(data.Runtime)","6b6b694f":"data[['IMDb','Directors']].groupby('Directors').agg(['mean','count']).sort_values(by=('IMDb','mean'), ascending=False)","45ba8c80":"directors = data[['IMDb','Directors']].groupby('Directors').agg(['mean','count'])\ndirectors[directors[('IMDb', 'count')] > 5].sort_values(by=('IMDb','mean'), ascending=False).head(10)","7e876dad":"streams = ['Netflix', 'Hulu', 'Prime Video', 'Disney+']\ndict_a = {}\nfor stream in streams:\n    a = data[['IMDb', stream]].groupby([stream]).agg(['mean',\n        'count']).iloc[1,:].values\n    dict_a[stream] = a\n    df_stream = pd.DataFrame(dict_a, \n                index=['Avg_IMDb','Number of Moviews'])\ndf_stream","cbff4e2f":"data.corr()","fc1f2a74":"sns.heatmap(data.corr(),\n            xticklabels=data.columns,\n            yticklabels=data.columns\n           )","9113faf0":"df=data\ndf[\"Score\"]=2\nfor i,n in enumerate(df.IMDb):\n  if 0<=n<3.0:\n    df.loc[i,\"Score\"]=0\n  elif 3.0<=n<5.0:\n    df.loc[i,\"Score\"]=1\n  elif 5.0<=n<8.0:\n    df.loc[i,\"Score\"]=2\n  elif 8.0<=n<9.0:\n    df.loc[i,\"Score\"]=3\n  elif 9.0<=n<10.0:\n    df.loc[i,\"Score\"]=4","f322b927":"data","884ac1f4":"df=data\ndf[\"ScoreROTTEN\"]=2\nfor i,n in enumerate(df[\"Rotten Tomatoes\"]):\n      n=n\/10  \n      if 0<=n<3.0:\n        df.loc[i,\"ScoreROTTEN\"]=0\n      elif 3.0<=n<5.0:\n        df.loc[i,\"ScoreROTTEN\"]=1\n      elif 5.0<=n<8.0:\n        df.loc[i,\"ScoreROTTEN\"]=2\n      elif 8.0<=n<9.0:\n        df.loc[i,\"ScoreROTTEN\"]=3\n      elif 9.0<=n<10.0:\n        df.loc[i,\"ScoreROTTEN\"]=4","947e91c6":"df[\"ScoreROTTEN\"]","fd592843":"df.isna().sum()","381aa293":"genres=[]\nfor s in data.Genres:\n  s=str(s)\n  l=s.split(sep=\",\")\n  for s2 in l:\n    if not( s2 in genres ):\n      genres.append(s2)\n      data[s2]=0\nprint(genres)\nprint(len(genres))\nlt=[]\nfor i,s in enumerate(data.Genres):\n  s=str(s)\n  if s!= \"nan\" :\n    l=s.split(sep=\",\")\n    for s2 in l:\n      data.loc[i,s2]=1","92de7d36":"data\n","0b08f1e6":"from sklearn.preprocessing import LabelEncoder\nencoder =LabelEncoder()\n#dirators and name\ndata[\"Directors\"]=encoder.fit_transform(data[\"Directors\"])\ndata[\"Title\"]=encoder.fit_transform(data[\"Title\"])\ndata[\"Country\"]=encoder.fit_transform(data[\"Country\"])\ndata[\"Language\"]=encoder.fit_transform(data[\"Language\"])\ndata[\"Genres\"]=encoder.fit_transform(data[\"Genres\"])","8eee9398":"df.columns","1fedd108":"x=df[['Title', 'Year', 'Netflix', 'Hulu', 'Prime Video', 'Disney+',\n       'Directors', 'Genres', 'Country', 'Language', 'Runtime','Action', 'Adventure', 'Sci-Fi', 'Thriller', 'Comedy', 'Western',\n       'Animation', 'Family', 'Biography', 'Drama', 'Music', 'War', 'Crime',\n       'Fantasy', 'Romance', 'History', 'Mystery', 'Horror', 'Sport',\n       'Documentary', 'Musical', 'News', 'Short', 'Reality-TV', 'Film-Noir',\n       'Talk-Show']]\n\ny=df['Score']\ny2=df['ScoreROTTEN']\n","019e43fb":"y2","05733d03":"from sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score\n\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=100) #split our data with test size of 20% \n\nknn=KNeighborsClassifier(n_neighbors=22) #build our knn classifier\nknn.fit(x_train,y_train) #Training KNN classifier\ny_pred=knn.predict(x_test)  #Testing\nprint('Acuuracy=',accuracy_score(y_pred,y_test))\n","3d7fad0a":"n_neighbors=30\nscores=[]\nx_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=30)\nfor k in range(1,30):\n    knn=KNeighborsClassifier(n_neighbors-k)\n    knn.fit(x_train,y_train)\n    y_pred=knn.predict(x_test)\n    print('Acuuracy=',accuracy_score(y_pred,y_test))\n","144b0e3f":"from sklearn.model_selection import train_test_split\nfrom sklearn import tree   \nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","e2c11d15":"#splitting data\nx_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.20,random_state=10)\n\n#applying tree algorithm\ntree1 = tree.DecisionTreeClassifier()  \ntree1.fit(x_train, y_train)   #fitting our model\ny_pred=tree1.predict(x_test)   # evaluating our model\nprint(\"score:{}\".format(accuracy_score(y_test, y_pred)))","1ed91926":"from sklearn import datasets\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier #Importing Random Forest Classifier\nfrom sklearn import metrics  # Importing metrics to test accuracy","b46a02e6":"max=0 \nfor i in range(1,40):\n  clf=RandomForestClassifier(n_estimators=i)  #Creating a random forest with 100 decision trees\n  clf.fit(x_train, y_train)  #Training our model\n  y_pred=clf.predict(x_test) #testing our model\n  if ( max < metrics.accuracy_score(y_test, y_pred)):\n    max=metrics.accuracy_score(y_test, y_pred)\n  print(\"Accuracy:\", metrics.accuracy_score(y_test, y_pred),\" i= \",i)  #Measuring the accuracy of our model","8ce160bb":"print(max)","5cf2cc0d":"data.info()","b7a1a88a":"## Let's Discover the Data:","284be237":"**Seems like there is a lot of missing values let's see the percentages :**","d6026d16":"# let's see some visualisation:","fddd618b":"Let's see those with a better count of films:","05aa9d44":"Soo the majority of the scores are between 5 and 8. \nso a question comes here : which of the directors is the best rated? ","0d4d2497":"What about the corrolation: ","286ef39f":"Let's see the genres that we have :","edbd3040":"# Data Preparation","48e43ead":"## Some viz:","51c224de":"let's see now the platforms:\nwhich platform host the best films ?","ef1217d4":"So Finally we can say that the best algorithm the knn neighboors worked fine withe an accuracy of 84 % .","32f6b8ff":"Let's see the countries that we have :","ed98f29f":"* The Age column lack a lot of values so let's drop it.\n* We will replace the rating IMDb by the mean.\n* The other missing values are with low percentages so let's drop them\n\n","a20dbc34":"So the Knn algorithme gave us an intresting result. \nLet's try the random forest classifier but the addition of the other features may overfit...","726fb8d1":"let's see the distribution of the IMDb score","307dd871":"**In this Paper I will be predecting the range of the IMDb Score rating of movies according to the features in the data **\nI achieved a 0.83 accuracy you can follow along the code\n","77ba950e":"seems like there isn't any obvious interesting corrolation for the moment ","706f6b51":"# Library Calling :","717cc82d":"## Data Cleaning","7fc8127b":"Let's see the languages that we have :"}}