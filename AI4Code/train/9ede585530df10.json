{"cell_type":{"e9c50f1c":"code","4b4bd64a":"code","71a56503":"code","d81e39c9":"code","f47107e7":"code","6ab1a0e5":"code","b5705696":"code","53bf17ed":"code","943de4b5":"code","799476c1":"code","06e23522":"code","80ddd493":"code","3c0590f4":"code","20fd3e07":"code","002dff5b":"markdown","161bba83":"markdown","d8d423f7":"markdown","53fe2bfa":"markdown","64c34cc0":"markdown","dc3a5c9a":"markdown","e9e5a9d3":"markdown","1aee4c36":"markdown","f0a1bc11":"markdown","c66e7d02":"markdown","8d21a630":"markdown","814b7b9c":"markdown","d8fd80d6":"markdown","52a0f45a":"markdown","40dc973a":"markdown","d3fb7740":"markdown"},"source":{"e9c50f1c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4b4bd64a":"df = pd.read_csv('..\/input\/covid-vaccination-forecast\/vaccinations_us.csv')\ndf.info()","71a56503":"df.head()","d81e39c9":"df.tail()","f47107e7":"import plotly_express as px\nfig = px.scatter(df,x = 'date', y = 'people_vaccinated', title=\"People vaccinated in USA\",labels={\n                     \"people_vaccinated\": \"People Vaccinated (Million)\" },)\nfig.show()","6ab1a0e5":"df1 = df[['date', 'people_vaccinated']]\ndf1['date'] = pd.to_datetime(df1['date'])\ndf1.columns = ['ds', 'y']\ndf1.head()","b5705696":"df1.info()","53bf17ed":"train_size = 80\ntest_size = df1.shape[0] - train_size\ndf_train = df1.head(train_size)\ndf_test = df1.tail(test_size)\nprint(df_train.shape, df_test.shape)","943de4b5":"from fbprophet import Prophet\nm = Prophet()\nm.fit(df_train)","799476c1":"future = m.make_future_dataframe(periods=12, freq='W')\nfuture.tail()","06e23522":"forecast = m.predict(future)\npd.options.display.float_format = '{:20,.0f}'.format\nforecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","80ddd493":"import matplotlib.pyplot as plt\nfrom matplotlib.ticker import FuncFormatter\ndef millions(x, pos):\n    'The two args are the value and tick position'\n    return '%1.1f Million' % (x * 1e-6)\n\n\nformatter = FuncFormatter(millions)\n\nimport matplotlib.dates as mdates\nmonthyearFmt = mdates.DateFormatter('%B %Y')\nlocator = mdates.AutoDateLocator(minticks=3, maxticks=7)\n\nfig = m.plot(forecast, xlabel='Date', ylabel='People Vaccinated')\nax = fig.gca()\nax.yaxis.set_major_formatter(formatter)\nax.xaxis.set_major_formatter(monthyearFmt)\nax.xaxis.set_major_locator(locator)\nax.scatter(df_test['ds'], df_test['y'], color='r', label='Actual data', marker='x')\nax.annotate('Model trained to this date',(df_train.iloc[-1]['ds'],df_train.iloc[-1]['y']), xytext=(0.2, 0.4), textcoords='axes fraction', arrowprops = dict(facecolor='green',color='green'))\nax.legend(loc='lower right', ncol=4)\nax.title.set_text('Vaccination Forecast for USA')\nplt.show()","3c0590f4":"test_pred = df_test[['ds']].copy()\ntest_pred = m.predict(test_pred)\ntest_pred[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()","20fd3e07":"def mean_absolute_percentage_error(y_true, y_pred): \n    \"\"\"Calculates MAPE given y_true and y_pred\"\"\"\n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100\n\nmean_absolute_percentage_error(y_true=df_test['y'], y_pred=test_pred['yhat'])","002dff5b":"The MAPE is still low, but is starting to get worse. My earlier MAPE was at 0.8%","161bba83":"I'm going to use the 1st 80 data points to train the model, and the rest of the points to validate the model later","d8d423f7":"The 1st reported date is on 20th Dec.","53fe2bfa":"The predict method will assign each row in future a predicted value which it names yhat. If you pass in historical dates, it will provide an in-sample fit. The forecast object here is a new dataframe that includes a column yhat with the forecast, as well as columns for components and uncertainty intervals.","64c34cc0":"Let's plot the forecast!","dc3a5c9a":"The input to Prophet is always a dataframe with two columns: ds and y. The ds (datestamp) column should be of a format expected by Pandas, ideally YYYY-MM-DD for a date or YYYY-MM-DD HH:MM:SS for a timestamp. The y column must be numeric, and represents the measurement we wish to forecast.","e9e5a9d3":"Let's see the graph of people vaccinated to date!","1aee4c36":"Use the trained model to get predictions on the test data","f0a1bc11":"## FBProphet Model","c66e7d02":"Create Prophet object","8d21a630":"Let's check the Mean Absolute Percentage Error (MAPE) of the model on the validated data ","814b7b9c":"US has 144 data entries so far, The last reported date is on 26th May, so we have ~5 mth of actual data so far.","d8fd80d6":"## Dataset updated to 26th May. Vaccination forecast model is built using 1st 80 data points","52a0f45a":"Overall we can see a clear uptrend, but the actual data from May is starting to divert away from the forecast, showing slowing growth.","40dc973a":"1. Let's see the predictions for the next 12 weeks","d3fb7740":"Predictions are then made on a dataframe with a column ds containing the dates for which a prediction is to be made. You can get a suitable dataframe that extends into the future a specified number of days using the helper method Prophet.make_future_dataframe. By default it will also include the dates from the history, so we will see the model fit as well."}}