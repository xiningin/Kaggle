{"cell_type":{"870f139e":"code","a0affd3f":"code","162de601":"code","aa682be8":"code","f4fd2cd9":"code","ea9b0a7f":"code","0734d458":"code","e71aac41":"code","c3aab2ee":"code","9ae4e931":"code","87a48b63":"code","05bc7058":"code","3cbe5909":"code","8e102201":"code","91cb4ca0":"code","34df1214":"code","c1a54e93":"code","859d3f3b":"code","8ae0b32e":"code","eca10191":"code","ca1bedd3":"code","fe6da889":"code","8ea5a4ea":"code","05ebe938":"code","22fd1fa8":"code","3e9bcd9d":"code","2b9c1e40":"code","940af215":"code","e1a7e3de":"code","bc6e6275":"code","870962d3":"code","c8303984":"code","3326ce37":"code","518e0dca":"code","70c732b0":"code","f944fc48":"code","638d7d83":"code","0f5d2299":"code","08b70d54":"code","3ae90177":"code","86474d66":"code","11f0230e":"code","c0aeb141":"markdown","a7e3846b":"markdown","f08f4387":"markdown","692984fe":"markdown","4e1c5032":"markdown","c36cfdb4":"markdown","f33489d8":"markdown","4864aa62":"markdown","2919b032":"markdown","8501d872":"markdown","9bf9bcde":"markdown","6b1716dd":"markdown","2a81e060":"markdown","f84d4e30":"markdown","7f20b7be":"markdown","190453f8":"markdown","0f4b0da2":"markdown","5a2912bf":"markdown","8c7a43f6":"markdown","1a745a5f":"markdown","2c0aa6de":"markdown","2a5e125b":"markdown"},"source":{"870f139e":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a0affd3f":"train = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/train.csv', index_col='row_id')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/test.csv',)\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-jan-2022\/sample_submission.csv')\nprint(\"--Done--\")","162de601":"train.sample(2)","aa682be8":"test.sample(2)","f4fd2cd9":"print(f'Shape of Training Dataset: {train.shape}')\nprint(f'Shape of Test Dataset: {test.shape}')","ea9b0a7f":"train.describe()","0734d458":"train.info()","e71aac41":"train.isna().sum().sum()","c3aab2ee":"train_store = train['store'].value_counts()\ntrain_country = train['country'].value_counts()\ntrain_product = train['product'].value_counts()\ntest_store = test['store'].value_counts()\ntest_country = test['country'].value_counts()\ntest_product = test['product'].value_counts()","9ae4e931":"def visualize(x_axis, y_axis, title):\n    \"\"\"Defining a function that visualizes that plots a barplot given the x, y and the title of the plot\"\"\"\n    fig, ax = plt.subplots(figsize=(15, 5))\n    ax.spines[[\"right\", \"top\"]].set_visible(False)\n    sns.barplot(x_axis, y_axis, alpha=0.8, palette='ocean')\n    plt.title(title,fontweight='bold')\n    ax.set_box_aspect(2.5\/len(ax.patches))\n    for p in ax.patches:\n        x = p.get_x() + p.get_width() \/ 2 \n        y = p.get_y() + p.get_height() + (p.get_height() * -0.5)\n        value = (p.get_height())\n        ax.text(x, y, value, ha=\"center\", fontweight='bold')   \n    plt.show()","87a48b63":"visualize(train_store.index, train_store.values, 'Distribution count of items from stores - Train')\nvisualize(test_store.index, test_store.values, 'Distribution count of items from stores - Test')","05bc7058":"visualize(train_country.index, train_country.values, 'Distribution count of items for Countries - Train')\nvisualize(test_country.index, test_country.values, 'Distribution count of items for Countries - Test')","3cbe5909":"visualize(train_product.index, train_product.values, 'Distribution count of products - Train')\nvisualize(test_product.index, test_product.values, 'Distribution count of products - Test')","8e102201":"train['date'] = pd.to_datetime(train['date'], format='%Y-%m-%d')\ntrain.info()","91cb4ca0":"fig, ax = plt.subplots(figsize=(20, 7))\ng_time = train.groupby(['date']).sum().reset_index()\nsns.lineplot(g_time.date, g_time.num_sold, color='crimson', alpha=0.8)\nax.spines[[\"top\", \"right\"]].set_visible(False)\nplt.grid(linestyle='-.', alpha=0.3, color='b')\n\nplt.title('Trend of sold items by day', fontweight='bold', fontsize=18)\nplt.xlabel('Date',fontsize=15, fontweight='bold')\nplt.ylabel('Items Sold',fontsize=15, fontweight='bold')\nplt.show()","34df1214":"g_country = train.groupby(['country']).sum().reset_index()\nvisualize(g_country.country, g_country.num_sold, 'Sold items by Country')","c1a54e93":"g_store = train.groupby(['store']).sum().reset_index()\nvisualize(g_store.store, g_store.num_sold, 'Sold items by Store')","859d3f3b":"g_product = train.groupby(['product']).sum().reset_index()\nfig, ax = plt.subplots(figsize=(15, 5))\nax = sns.barplot(x=\"product\", y='num_sold', data=g_product, alpha=0.8, saturation=3, palette='ocean')\nax.set_box_aspect(2.5\/len(ax.patches))\nfor p in ax.patches:\n    x = p.get_x() + p.get_width() \/ 2 \n    y = p.get_y() + p.get_height() + (p.get_height() * -0.5)\n    value = (p.get_height())\n    ax.text(x, y, value, ha=\"center\", fontweight='bold')   \nplt.title('Sold items by Product', fontsize = 16, fontweight='bold')\nplt.show()","8ae0b32e":"train['year'] = train['date'].dt.year\ntrain['month'] = train['date'].dt.month_name()\ntrain['day'] = train['date'].dt.day_name()\ntrain.sample(2)","eca10191":"g_year = train.groupby('year').sum().reset_index()\nfig, ax = plt.subplots(figsize=(20, 5))\nax = sns.lineplot(g_year.year, g_year.num_sold, linewidth=3, color='crimson',)\nax.spines[['top', 'right']].set_visible(False)\nplt.grid(linestyle='-.', alpha=0.3, color='b')\n\nplt.title(\"Yearly trend of sales\", fontsize = 16, fontweight='bold')\nplt.xticks(g_year.year.tolist())\nplt.xlabel('Year',fontsize=15, fontweight='bold')\nplt.ylabel('Items Sold',fontsize=15, fontweight='bold')\nplt.show()","ca1bedd3":"g_month = train.groupby('month').sum().reset_index()\nmonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\ng_month['month'] = pd.Categorical(g_month['month'], categories=months, ordered=True)\ng_month.sort_values('month', inplace=True)\n\n\nfig, ax = plt.subplots(figsize=(20, 5))\nax = sns.lineplot(g_month.month, g_month.num_sold, linewidth=3, color='dodgerblue', sort=False)\nax.spines[['top', 'right']].set_visible(False)\nplt.grid(linestyle='-.', alpha=0.3, color='b')\n\nplt.title(\"Monthly trend of sales\", fontsize = 16, fontweight='bold')\nplt.xlabel('Month',fontsize=15, fontweight='bold')\nplt.ylabel('Items Sold',fontsize=15, fontweight='bold')\nplt.show()","fe6da889":"g_day = train.groupby('day').sum().reset_index()\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thrusday', 'Friday', 'Saturday', 'Sunday']\ng_day['day'] = pd.Categorical(g_day['day'], categories=days, ordered=True)\ng_day.sort_values('day', inplace=True)\n\n\nfig, ax = plt.subplots(figsize=(20, 5))\nax = sns.lineplot(g_day.day, g_day.num_sold, linewidth=3, color='green', sort=False)\nax.spines[['top', 'right']].set_visible(False)\nplt.grid(linestyle='-.', alpha=0.3, color='b')\n\nplt.title(\"Daily trend of sales\", fontsize = 16, fontweight='bold')\nplt.xlabel('Days',fontsize=15, fontweight='bold')\nplt.ylabel('Items Sold',fontsize=15, fontweight='bold')\nplt.show()","8ea5a4ea":"count_year = train.groupby(['year', 'country']).sum().reset_index()\n\n\nfig, ax = plt.subplots(figsize=(20, 5))\nax = sns.lineplot(count_year.year, count_year.num_sold, hue=count_year.country,palette=['orange', 'purple', 'seagreen'], linewidth=3)\nax.spines[['top', 'right']].set_visible(False)\nplt.grid(linestyle='-.', alpha=0.3, color='b')\n\nplt.title(\"Yearly trend of sales based on Country\", fontsize = 16, fontweight='bold',)\nplt.xlabel('Year',fontsize=15, fontweight='bold')\nplt.ylabel('Items Sold',fontsize=15, fontweight='bold')\nplt.xticks(g_year.year.tolist())\nplt.show()","05ebe938":"count_month = train.groupby(['month', 'country']).sum().reset_index()\ncount_month['month'] = pd.Categorical(count_month['month'], categories=months, ordered=True)\ncount_month.sort_values('month', inplace=True)\n\nfig, ax = plt.subplots(figsize=(20, 5))\nax = sns.lineplot(count_month.month, count_month.num_sold, hue=count_month.country, palette=['orange', 'purple', 'seagreen'], linewidth=3)\nax.spines[['top', 'right']].set_visible(False)\nplt.title(\"Monthly trend of sales based on Country\", fontsize = 16, fontweight='bold',)\nplt.xlabel('Month',fontsize=15, fontweight='bold')\nplt.grid(linestyle='-.', alpha=0.3, color='b')\n\nplt.ylabel('Items Sold',fontsize=15, fontweight='bold')\nplt.show()","22fd1fa8":"count_day = train.groupby(['day', 'country']).sum().reset_index()\ncount_day['day'] = pd.Categorical(count_day['day'], categories=days, ordered=True)\ncount_day.sort_values('day', inplace=True)\n\nfig, ax = plt.subplots(figsize=(20, 5))\nax = sns.lineplot(count_day.day, count_day.num_sold, hue=count_day.country, palette=['orange', 'purple', 'seagreen'], linewidth=3)\nax.spines[['top', 'right']].set_visible(False)\nplt.grid(linestyle='-.', alpha=0.3, color='b')\n\nplt.title(\"Daily trend of sales based on Country\", fontsize = 16, fontweight='bold',)\nplt.xlabel('Days',fontsize=15, fontweight='bold')\nplt.ylabel('Items Sold',fontsize=15, fontweight='bold')\nplt.show()","3e9bcd9d":"roll = train.rolling(window = 18).sum()\ng_time['roll'] = roll.num_sold\n\nfig, ax = plt.subplots(figsize=(20, 7))\nplt.grid(linestyle='-.', alpha=0.3, color='b')\nsns.lineplot(x='date', y='num_sold', data = g_time, color='crimson', alpha=0.8,)\nsns.lineplot(x='date', y='roll', data = g_time, color='black', alpha=0.8, linewidth=3)\nax.spines[[\"top\", \"right\"]].set_visible(False)\nplt.title('Trend of sold items by day vs Rolling average by day', fontweight='bold', fontsize=18)\nplt.xlabel('Date',fontsize=15, fontweight='bold')\nplt.ylabel('Items Sold',fontsize=15, fontweight='bold')\nplt.show()","2b9c1e40":"from xgboost import XGBRegressor\nimport lightgbm as lgb","940af215":"train['day_of_year'] = train.date.dt.dayofyear\ntrain['day_of_month'] = train.date.dt.days_in_month\ntrain['day_date'] = train.date.dt.day","e1a7e3de":"test['date'] = pd.to_datetime(test['date'], format='%Y-%m-%d')\n\n\ntest['day_of_year'] = test.date.dt.dayofyear\ntest['day_of_month'] = test.date.dt.days_in_month\ntest['day_date'] = test.date.dt.day\ntest['year'] = test['date'].dt.year\ntest['month'] = test['date'].dt.month_name()\ntest['day'] = test['date'].dt.day_name()","bc6e6275":"catergorical_cols = train.select_dtypes('object').columns.tolist()\ndf_train = pd.get_dummies(train, columns=catergorical_cols)\ndf_test = pd.get_dummies(test, columns=catergorical_cols)","870962d3":"df_train['high_value'] = 0\nfor i in range(len(df_train.num_sold)):\n    if df_train.num_sold.loc[i] <= 200:\n        df_train['high_value'].loc[i] = 1\n    elif 200 < df_train.num_sold.loc[i] <= 500:\n        df_train['high_value'].loc[i] = 2\n    elif 500 < df_train.num_sold.loc[i] <= 800:\n        df_train['high_value'].loc[i] = 3\n    else:\n        df_train['high_value'].loc[i] = 4\n    \ndf_train.high_value.value_counts()","c8303984":"df_test['high_value'] = 0\nfor i in range(df_test.shape[0]):\n    if df_train.day_of_year.loc[i] == df_test.day_of_year.loc[i]:\n        df_test.high_value.loc[i] = df_train.high_value.loc[i]\n\n        \ndf_test.high_value.value_counts()","3326ce37":"X_train = df_train.loc[:21038]\nX_valid = df_train.loc[21038:]\ny_train = X_train.pop('num_sold')\ny_valid = X_valid.pop('num_sold')","518e0dca":"X_train = X_train.drop('date', axis=1)\nX_valid = X_valid.drop('date', axis=1)\ndf_test = df_test.drop(['row_id', 'date'], axis=1)","70c732b0":"print(f'Shape of X_train : {X_train.shape}')\nprint(f'Shape of X_valid : {X_valid.shape}')\nprint(f'Shape of y_train : {y_train.shape}')\nprint(f'Shape of y_valid : {y_valid.shape}')\nprint(f'Shape of df_test : {df_test.shape}')","f944fc48":"def smape(actual, predicted):\n    numerator = np.abs(predicted - actual)\n    denominator = (np.abs(actual) + np.abs(predicted)) \/ 2\n    return np.mean(numerator \/ denominator)*100","638d7d83":"params = {\n    'lambda': 0.0027558604139151484, \n    'alpha': 0.011141013575816665, \n    'eta': 0.027747047243310157, \n    'colsample_bytree': 0.7, \n    'subsample': 1.0, \n    'learning_rate': 0.016, \n    'n_estimators': 2000, \n    'max_depth': 15, \n    'min_child_weight': 31\n}","0f5d2299":"model = XGBRegressor(**params,)\nmodel.fit(X_train, y_train, verbose=False, eval_set=[(X_valid, y_valid)],\n         early_stopping_rounds = 100)\npredictions = model.predict(X_valid)\n\nscore = smape(y_valid, predictions)\nscore","08b70d54":"lgb_params = {\n    'objective': 'mae',\n    'n_estimators': 20000,\n    'random_state': 42,\n    'learning_rate': 5e-3,\n    'subsample': 0.6,\n    'subsample_freq': 1,\n    'colsample_bytree': 0.4,\n    'reg_alpha': 10.0,\n    'reg_lambda': 1e-1,\n    'min_child_weight': 256,\n    'min_child_samples': 20,\n}\n\nmodel_lgb = lgb.LGBMRegressor(**lgb_params)\nmodel_lgb.fit(X_train,\n          y_train,\n          eval_set = [(X_valid, y_valid)],\n          eval_metric = 'mape',\n          early_stopping_rounds = 200,\n          verbose = False,\n         )\npredictions_lgb = model_lgb.predict(X_valid)\n\nscore = smape(y_valid, predictions_lgb)\nscore","3ae90177":"submission","86474d66":"test_predictions = model.predict(df_test)\nsubmission['num_sold'] = test_predictions\nsubmission","11f0230e":"submission.to_csv('submission2.csv', index=False)\nprint(\"--Done--\")","c0aeb141":"A trend of increase in sales is seen at the start of weekends","a7e3846b":"> We see a Linear increase of sales starting from 2016","f08f4387":"Kaggle Hat is the most sold product followed by Kaggle Mug and finally Kaggle Sticker","692984fe":"### Defining the Metric","4e1c5032":"#### Observations:\n- Labels are equally distributed for Training and Test set for Country, Products and Store","c36cfdb4":"### Breaking the `date` column to Year, Month and Days ","f33489d8":" ### ---Will be updating the model---\n \n \n Special Mentions to notebooks:\n  - https:\/\/www.kaggle.com\/mhslearner\/tps-jan-2022-time-series-forcasting\n  - [HyperParameters taken from Notebook](https:\/\/www.kaggle.com\/rhythmcam\/tps-01-22-xgboost-optuna-basic)","4864aa62":"### Creating the Model","2919b032":"> It's probably a minor change but Finland seems to increase quicker than Sweden w.r.t sales. It might just be a possibilty that it overtakes in the upcoming years ","8501d872":"## In-Depth Analysis","9bf9bcde":"Norway wins the race of sales followed by Sweden and a close third, Finland","6b1716dd":"This is interesting. \n\n- We know that there was a massive increase of sales around the end of the year **December, January**\n- We can also see there are two heads there is another surge in sales around the **March, April, May** period probabaly due to *Easter* and *St.Patricks day*\n- We see a drop in sales from **June till September**","2a81e060":"### Preprocessing the data","f84d4e30":"#### Observations:\n- We have a large enough dataset to train our model\n- Creating a validation set would be a issue\n- We have a numerical column which is the `target` variable else everything is currently categorical. We will be changing the date to a datetime object as we need to analyse trends in the dataset\n- There are no null values in the dataset. Peace.","7f20b7be":"Pretty similar conclusions from the data we see from Monthly and Daily","190453f8":"# Creating the Model","0f4b0da2":"### Feature Engineering","5a2912bf":"KaggleRama undoubtedly has a strong marketing team, I'm convinced.","8c7a43f6":"## Loading the Datasets","1a745a5f":"## Exploratory Data Analysis","2c0aa6de":"We have successfully converted the `date` column to a datetime object","2a5e125b":"> We see that there is a surge of sales as we increase yearly but a common trend of massive surges are noted on the start of every year."}}