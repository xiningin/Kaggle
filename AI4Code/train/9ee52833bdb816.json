{"cell_type":{"fbd74abb":"code","f96a5411":"code","ee5f1660":"code","530d97a2":"code","d41f3042":"code","486745db":"code","79f3e8a0":"code","fe201c81":"code","3198788e":"code","012d0c41":"code","f379bd8f":"code","6f70ee05":"code","cb25fa00":"code","4773fc58":"code","50942ace":"code","62d22f90":"code","607cf62c":"code","eeee5667":"code","2685b935":"code","d53df408":"code","07bcba5b":"code","d4921d75":"code","71dcf136":"code","7fee4886":"code","d2bd93c9":"code","4ae1dcbc":"code","a0e7ba47":"code","9509b76c":"code","0fa16f7c":"code","d4311ebe":"code","df1b904d":"code","72021602":"code","d7bf4cf8":"code","5a700eec":"code","c3b93db7":"code","36e1b5a9":"code","34e297d7":"code","5bd13a70":"code","738fc82f":"code","b4cc4a1a":"code","982e7dbb":"code","c3e71678":"code","eec23668":"code","856f99cf":"code","f5d08bc9":"code","37a412be":"code","a711b4a1":"code","76406be0":"code","4b3283e0":"code","f2fb407b":"code","3123303d":"code","7151000b":"code","d23cbb97":"code","ad0701ff":"code","bd94c229":"code","0f139d89":"code","308a0f8c":"code","b5cb5389":"code","0ff26f3d":"code","7c675731":"code","fff24cce":"code","ce7bf6d2":"code","c35730b0":"code","279da0b5":"code","e8f0d8a6":"code","58c01bce":"code","bec73463":"code","67015db4":"code","8359f3a9":"markdown","72fe075f":"markdown","ced4d628":"markdown","28c493a6":"markdown","830ec92e":"markdown","11d7d234":"markdown","57295030":"markdown","1f8ced1c":"markdown","69baa6fb":"markdown","f6fd853d":"markdown","5433a7f9":"markdown","14d46ddc":"markdown","9eabce40":"markdown","1655c4b6":"markdown","d52c9e54":"markdown","cd889d21":"markdown","51cf8906":"markdown","4c8084f8":"markdown","7b9300fe":"markdown","f404818a":"markdown","5f7a7c7c":"markdown","bdd6e36c":"markdown","ac43c3ec":"markdown","434e871f":"markdown","e98075c2":"markdown","3f58d386":"markdown","b0cc48f5":"markdown","cdde294f":"markdown","0c445037":"markdown","af597269":"markdown","ccf7c00b":"markdown","ef3749a2":"markdown","2539318d":"markdown","82b7594a":"markdown","0ecca40f":"markdown","704919ec":"markdown","dea592f9":"markdown","7061a7f8":"markdown","c7c67c86":"markdown","5bcfca0f":"markdown","d194ecb8":"markdown","09a8ab30":"markdown"},"source":{"fbd74abb":"#%tensorflow_version 2.x\nimport tensorflow\ntensorflow.__version__\n## ignore warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.patches import Rectangle\nfrom tqdm import tqdm, tqdm_notebook\nimport seaborn as sns\nimport pydicom as dcm\nfrom glob import glob\nfrom skimage.transform import resize\nfrom skimage import io, measure\nimport cv2, random\n\nimport tensorflow as tf\nfrom tensorflow import keras","f96a5411":"!ls ..\/input","ee5f1660":"train_labels= pd.read_csv('..\/input\/stage_2_train_labels.csv')\nprint('First five rows of Training set:\\n', train_labels.head())\nprint(train_labels.iloc[0])","530d97a2":"print(train_labels.iloc[4])","d41f3042":"# Number of entries in Train label dataframe:\nprint('The train_label dataframe has {} rows and {} columns.'.format(train_labels.shape[0], train_labels.shape[1]))","486745db":"# Number of duplicates in patientId:\nprint('Number of unique patientId are: {}'.format(train_labels['patientId'].nunique()))","79f3e8a0":"train_labels.drop_duplicates('patientId').shape[0]\n","fe201c81":"one = train_labels[train_labels.Target == 1].drop_duplicates('patientId').shape[0]\nzero = train_labels[train_labels.Target == 0].drop_duplicates('patientId').shape[0]\ntotal = train_labels.drop_duplicates('patientId').shape[0]","3198788e":"print(f'No of entries which has Pneumonia: {one} i.e., {round(one\/total*100, 0)}%')\nprint(f'No of entries which don\\'t have Pneumonia: {zero} i.e., {round(zero\/total, 0)}%')\n_ = train_labels.drop_duplicates('patientId').drop_duplicates('patientId')['Target'].value_counts().plot(kind = 'pie', autopct = '%.0f%%', labels = ['Negative', 'Positive'], figsize = (10, 6))","012d0c41":"# Checking nulls in bounding box columns:\nprint('Number of nulls in bounding box columns: {}'.format(train_labels[['x', 'y', 'width', 'height']].isnull().sum().to_dict()))","f379bd8f":"bounding_box = train_labels.groupby('patientId').size().to_frame('number_of_boxes').reset_index()\ntrain_labels = train_labels.merge(bounding_box, on = 'patientId', how = 'left')\nprint('Number of patientIds per bounding box in the dataset: ')\n(bounding_box.groupby('number_of_boxes').size().to_frame('number_of_patientId').reset_index().set_index('number_of_boxes').sort_values(by = 'number_of_boxes'))","6f70ee05":"class_labels = pd.read_csv('..\/input\/stage_2_detailed_class_info.csv')\nprint('First five rows of Class label dataset are:\\n', class_labels.head())","cb25fa00":"# Number of entries in class_label dataframe:\nprint('The class_label dataframe has {} rows and {} columns.'.format(class_labels.shape[0], class_labels.shape[1]))","4773fc58":"# Number of duplicates in patients:\nprint('Number of unique patientId are: {}'.format(class_labels['patientId'].nunique()))","50942ace":"def get_feature_distribution(data, feature):\n  # Count for each label\n  label_counts = data[feature].value_counts()\n  # Count the number of items in each class\n  total_samples = len(data)\n  print(\"Feature: {}\".format(feature))\n  for i in range(len(label_counts)):\n    label = label_counts.index[i]\n    count = label_counts.values[i]\n    percent = int((count \/ total_samples) * 10000) \/ 100\n    print(\"{:<30s}: {} which is {}% of the total data in the dataset\".format(label, count, percent))","62d22f90":"get_feature_distribution(class_labels, 'class')","607cf62c":"figsize = (10, 6)\n_ = class_labels['class'].value_counts().sort_index(ascending = False).plot(kind = 'pie', autopct = '%.0f%%').set_ylabel('')","eeee5667":"# Checking nulls in class_labels:\nprint('Number of nulls in class columns: {}'.format(class_labels['class'].isnull().sum()))","2685b935":"# Checking whether each patientId has only one type of class or not\nclass_labels.groupby(['patientId'])['class'].nunique().max()","d53df408":"# Merging the two dataset - 'train_labels' and 'class_labels':\ntraining_data = pd.concat([train_labels, class_labels['class']], axis = 1)\nprint('After merging, the dataset looks like: \\n')\ntraining_data.head()","07bcba5b":"print('After merge, the dataset has {} rows and {} columns.'.format(training_data.shape[0], training_data.shape[1]))","d4921d75":"fig, ax = plt.subplots(nrows = 1, figsize = (12, 6))\ntemp = training_data.groupby('Target')['class'].value_counts()\ndata_target_class = pd.DataFrame(data = {'Values': temp.values}, index = temp.index).reset_index()\nsns.barplot(ax = ax, x = 'Target', y = 'Values', hue = 'class', data = data_target_class, palette = 'Set3')\nplt.title('Class and Target for Chest Exams')","71dcf136":"fig, ax = plt.subplots(1, 1, figsize = (7, 7))\ntarget_1 = training_data[training_data['Target'] == 1]\ntarget_sample = target_1.sample(2000)\ntarget_sample['xc'] = target_sample['x'] + target_sample['width'] \/ 2\ntarget_sample['yc'] = target_sample['y'] + target_sample['height'] \/ 2\nplt.title('Centers of Lung Opacity Rectangles (brown) over rectangles (yellow)\\nSample Size: 2000')\ntarget_sample.plot.scatter(x = 'xc', y = 'yc', xlim = (0, 1024), ylim = (0, 1024), ax = ax, alpha = 0.8, marker = '.', color = 'brown')\n\nfor i, crt_sample in target_sample.iterrows():\n    ax.add_patch(Rectangle(xy=(crt_sample['x'], crt_sample['y']),\n                width=crt_sample['width'],height=crt_sample['height'],alpha=3.5e-3, color=\"yellow\"))","7fee4886":"sample_patientId = train_labels['patientId'][0]\ndcm_file = '..\/input\/stage_2_train_images\/'+'{}.dcm'.format(sample_patientId)\ndcm_data = dcm.read_file(dcm_file)\n\nprint('Metadata of the image consists of \\n', dcm_data)\n","d2bd93c9":"import os","4ae1dcbc":"print('Number of images in training images folders are: {}.'.format(len(os.listdir('..\/input\/stage_2_train_images'))))","a0e7ba47":"training_image_path = '..\/input\/stage_2_train_images\/'\n\nimages = pd.DataFrame({'path': glob(os.path.join(training_image_path, '*.dcm'))})\nimages['patientId'] = images['path'].map(lambda x:os.path.splitext(os.path.basename(x))[0])\nprint('Columns in the training images dataframe: {}'.format(list(images.columns)))","9509b76c":"# Merging the images dataframe with training_data dataframe\ntraining_data = training_data.merge(images, on = 'patientId', how = 'left')\nprint('After merging the two dataframe, the training_data has {} rows and {} columns.'.format(training_data.shape[0], training_data.shape[1]))","0fa16f7c":"print('The training_data dataframe as of now stands like\\n')\ntraining_data.head()","d4311ebe":"columns_to_add = ['Modality', 'PatientAge', 'PatientSex', 'BodyPartExamined', 'ViewPosition', 'ConversionType', 'Rows', 'Columns', 'PixelSpacing']\n\ndef parse_dicom_data(data_df, data_path):\n  for col in columns_to_add:\n    data_df[col] = None\n  image_names = os.listdir('..\/input\/stage_2_train_images\/')\n  \n  for i, img_name in tqdm_notebook(enumerate(image_names)):\n    imagepath = os.path.join('..\/input\/stage_2_train_images\/', img_name)\n    data_img = dcm.read_file(imagepath)\n    idx = (data_df['patientId'] == data_img.PatientID)\n    data_df.loc[idx, 'Modality'] = data_img.Modality\n    data_df.loc[idx, 'PatientAge'] = pd.to_numeric(data_img.PatientAge)\n    data_df.loc[idx, 'PatientSex'] = data_img.PatientSex\n    data_df.loc[idx, 'BodyPartExamined'] = data_img.BodyPartExamined\n    data_df.loc[idx, 'ViewPosition'] = data_img.ViewPosition\n    data_df.loc[idx, 'ConversionType'] = data_img.ConversionType\n    data_df.loc[idx, 'Rows'] = data_img.Rows\n    data_df.loc[idx, 'Columns'] = data_img.Columns\n    data_df.loc[idx, 'PixelSpacing'] = str.format(\"{:4.3f}\", data_img.PixelSpacing[0])","df1b904d":"parse_dicom_data(training_data, '..\/input\/stage_2_train_images\/')","72021602":"print('So after parsing the information from the dicom images, our training_data dataframe has {} rows and {} columns and it looks like:\\n'.format(training_data.shape[0], training_data.shape[1]))\ntraining_data.head()","d7bf4cf8":"# Saving the training_data for further use:\ntraining_data.to_pickle('training_data.pkl')","5a700eec":"print('Modality for the images obtained is: {} \\n'.format(training_data['Modality'].unique()[0]))","c3b93db7":"print('The images obtained are of {} areas.'.format(training_data['BodyPartExamined'].unique()[0]))","36e1b5a9":"get_feature_distribution(training_data.drop_duplicates('patientId'), 'ViewPosition')","34e297d7":"print('The distribution of View Position when there is an evidence of Pneumonia:\\n')\n_ = training_data.drop_duplicates('patientId').loc[training_data['Target'] == 1, 'ViewPosition'].value_counts().sort_index(ascending = False).plot(kind = 'pie', autopct = '%.0f%%').set_ylabel('')","5bd13a70":"print('Plot x and y centers of bounding box')\nbboxes = training_data[training_data['Target'] == 1]\nbboxes['xw'] = bboxes['x'] + bboxes['width']\/2\nbboxes['yh'] = bboxes['y'] + bboxes['height']\/2\n\ng = sns.jointplot(x = bboxes['xw'], y = bboxes['yh'], data = bboxes,\n                  kind = 'hex', alpha = 0.5, size = 8)\nplt.suptitle('Bounding Box location when there is an evidence of Pneumonia')\nplt.tight_layout()\nplt.subplots_adjust(top = 0.95)","738fc82f":"def bboxes_scatter(data, color_point, color_window, text):\n  fig, ax = plt.subplots(1, 1, figsize = (7, 7))\n  plt.title('Plotting centers of Lung Opacity\\n{}'.format(text))\n  data.plot.scatter(x = 'xw', y = 'yh', xlim = (0, 1024), ylim = (0, 1024), ax = ax, alpha = 0.8, marker = \".\", color = color_point)\n  for i, crt_sample in data.iterrows():\n    ax.add_patch(Rectangle(xy = (crt_sample['x'], crt_sample['y']), width = crt_sample['width'], height = crt_sample['height'], alpha = 3.5e-3, color = color_window))","b4cc4a1a":"data_PA = bboxes[bboxes['ViewPosition'] == 'PA'].sample(1000)\ndata_AP = bboxes[bboxes['ViewPosition'] == 'AP'].sample(1000)\n\nbboxes_scatter(data_PA, 'green', 'yellow', 'ViewPosition = PA')","982e7dbb":"bboxes_scatter(data_AP, 'blue', 'red', 'ViewPosition = AP')","c3e71678":"print('Conversion Type for the data in Training Data: ', training_data['ConversionType'].unique()[0])","eec23668":"print(f'The training images has {training_data.Rows.unique()[0]} rows and {training_data.Columns.unique()[0]} columns.')","856f99cf":"def drawgraphs(data_file, columns, hue = False, width = 15, showdistribution = True):\n  if (hue):\n    print('Creating graph for: {} and {}'.format(columns, hue))\n  else:  \n    print('Creating graph for : {}'.format(columns))\n  length = len(columns) * 6\n  total = float(len(data_file))\n\n  fig, axes = plt.subplots(nrows = len(columns) if len(columns) > 1 else 1, ncols = 1, figsize = (width, length))\n  for index, content in enumerate(columns):\n    plt.title(content)\n\n    currentaxes = 0\n    if (len(columns) > 1):\n      currentaxes = axes[index]\n    else:\n      currentaxes = axes\n\n    if (hue):\n      sns.countplot(x = columns[index], data = data_file, ax = currentaxes, hue = hue)\n    else:\n      sns.countplot(x = columns[index], data = data_file, ax = currentaxes)\n\n    if(showdistribution):\n      for p in (currentaxes.patches):\n        height = p.get_height()\n        if (height > 0 and total > 0):\n          currentaxes.text(p.get_x() + p.get_width()\/2., height + 3, '{:1.2f}%'.format(100*height\/total), ha = \"center\")","f5d08bc9":"get_feature_distribution(training_data.drop_duplicates('patientId'), 'PatientSex')","37a412be":"drawgraphs(data_file = training_data.drop_duplicates('patientId'), columns = ['PatientSex'], hue = 'class', width = 20, showdistribution = True)","a711b4a1":"drawgraphs(data_file = training_data.drop_duplicates('patientId'), columns = ['PatientSex'], hue = 'Target', width = 20, showdistribution = True)","76406be0":"data_male = bboxes[bboxes['PatientSex'] == 'M'].sample(1000)\ndata_female = bboxes[bboxes['PatientSex'] == 'F'].sample(1000)\n\nbboxes_scatter(data_male, \"darkblue\", \"blue\", \"Patients Sex: Male\")","4b3283e0":"bboxes_scatter(data_female, \"red\", \"magenta\", \"Patients Sex: Female\")","f2fb407b":"print('The minimum and maximum recorded age of the patients are {} and {} respectively.'.format(training_data['PatientAge'].min(), training_data['PatientAge'].max()))","3123303d":"age_25 = np.percentile(training_data['PatientAge'], 25)\nage_75 = np.percentile(training_data['PatientAge'], 75)\niqr_age = age_75 - age_25\ncutoff_age = 1.5 * iqr_age\n\nlow_lim_age = age_25 - cutoff_age\nupp_lim_age = age_75 + cutoff_age\n\noutlier_age = [x for x in training_data['PatientAge'] if x < low_lim_age or x > upp_lim_age]\nprint('The number of outliers in `PatientAge` out of 30277 records are: ', len(outlier_age))\nprint('\\nThe ages which are in the outlier categories are:', outlier_age)\n\nfig = plt.figure(figsize = (10, 6))\nsns.boxplot(training_data['PatientAge'], orient = 'h').set_title('Outliers in PatientAge')","7151000b":"drawgraphs(data_file = training_data.drop_duplicates('patientId'), columns = ['PatientAge'], width = 20, showdistribution = True)","d23cbb97":"print('Removing the outliers from `PatientAge`')\ntraining_data['PatientAge'] = training_data['PatientAge'].clip(training_data['PatientAge'].min(), 100)\ntraining_data['PatientAge'].describe().astype(int)","ad0701ff":"print('Distribution of `PatientAge`: Overall and Target = 1')\nfig = plt.figure(figsize = (10, 6))\n\nax = fig.add_subplot(121)\ng = (sns.distplot(training_data['PatientAge']).set_title('Distribution of PatientAge'))\n\nax = fig.add_subplot(122)\ng = (sns.distplot(training_data.drop_duplicates('patientId').loc[training_data['Target'] == 1, 'PatientAge']).set_title('Distribution of PatientAge vs PnuemoniaEvidence'))","bd94c229":"custom_array = np.linspace(0, 100, 11)\ntraining_data['PatientAgeBins'] = pd.cut(training_data['PatientAge'], custom_array)\ntraining_data.drop_duplicates('patientId')['PatientAgeBins'].value_counts()","0f139d89":"print('After adding the bin column, the dataset turns out to be:\\n')\ntraining_data.head()","308a0f8c":"drawgraphs(data_file = training_data.drop_duplicates('patientId'), columns = ['PatientAgeBins'], width = 20, showdistribution = True)","b5cb5389":"drawgraphs(data_file = training_data.drop_duplicates('patientId'), columns = ['PatientAgeBins'], hue = 'PatientSex', width = 20, showdistribution = True)","0ff26f3d":"drawgraphs(data_file = training_data.drop_duplicates('patientId'), columns = ['PatientAgeBins'], hue = 'class', width = 20, showdistribution = True)","7c675731":"drawgraphs(data_file = training_data.drop_duplicates('patientId'), columns = ['PatientAgeBins'], hue = 'Target', width = 20, showdistribution = True)","fff24cce":"data_age_19 = bboxes[bboxes['PatientAge'] < 20]\ndata_age_20_34 = bboxes[(bboxes['PatientAge'] >= 20) & (bboxes['PatientAge'] < 35)]\ndata_age_35_49 = bboxes[(bboxes['PatientAge'] >= 35) & (bboxes['PatientAge'] < 50)]\ndata_age_50_64 = bboxes[(bboxes['PatientAge'] >= 50) & (bboxes['PatientAge'] < 65)]\ndata_age_65 = bboxes[bboxes['PatientAge'] >= 65]\n\nbboxes_scatter(data_age_19,'blue', 'red', 'Patient Age: 1-19 years')","ce7bf6d2":"bboxes_scatter(data_age_20_34, 'blue', 'red', 'Patient Age: 20-34 years')","c35730b0":"bboxes_scatter(data_age_35_49, 'blue', 'red', 'Patient Age: 35-49 years')","279da0b5":"bboxes_scatter(data_age_50_64, 'blue', 'red', 'Patient Age: 50-64 years')","e8f0d8a6":"bboxes_scatter(data_age_65, 'blue', 'red', 'Patient Age: 65+ years')","58c01bce":"def show_dicom_images(data, df, img_path):\n  img_data = list(data.T.to_dict().values())\n  f, ax = plt.subplots(3, 3, figsize = (16, 18))\n  \n  for i, row in enumerate(img_data):\n    image = row['patientId'] + '.dcm'\n    path = os.path.join(img_path, image)\n    data = dcm.read_file(path)\n    rows = df[df['patientId'] == row['patientId']]\n    age = rows.PatientAge.unique().tolist()[0]\n    sex = data.PatientSex\n    part = data.BodyPartExamined\n    vp = data.ViewPosition\n    modality = data.Modality\n    data_img = dcm.dcmread(path)\n    ax[i\/\/3, i%3].imshow(data_img.pixel_array, cmap = plt.cm.bone)\n    ax[i\/\/3, i%3].axis('off')\n    ax[i\/\/3, i%3].set_title('ID: {}\\nAge: {}, Sex: {}, Part: {}, VP: {}, Modality: {}\\nTarget: {}, Class: {}\\nWindow: {}:{}:{}:{}'\\\n                            .format(row['patientId'], age, sex, part,\n                                    vp, modality, row['Target'],\n                                    row['class'], row['x'],\n                                    row['y'], row['width'],\n                                    row['height']))\n    box_data = list(rows.T.to_dict().values())\n    \n    for j, row in enumerate(box_data):\n      ax[i\/\/3, i%3].add_patch(Rectangle(xy = (row['x'], row['y']),\n                                        width = row['width'], height = row['height'],\n                                        color = 'blue', alpha = 0.15))\n  plt.show()","bec73463":"show_dicom_images(data = training_data.loc[(training_data['Target'] == 0)].sample(9),\n                  df = training_data, img_path = '..\/input\/stage_2_train_images\/')","67015db4":"show_dicom_images(data = training_data.loc[(training_data['Target'] == 1)].sample(9),\n                  df = training_data, img_path = '..\/input\/stage_2_train_images\/')","8359f3a9":"Thus, we can see that the centers for the bounding box are spread out evenly across the Lungs. Though a large portion of the bounding box have their centers at the centers of the Lung, but some centers of the box are also located at the edges of lung. ","72fe075f":"As seen above, two View Positions that are in the training dataset are AP (Anterior\/Posterior) and PA (Posterior\/Anterior). These type of X-rays are mostly used to obtain the front-view. Apart from front-view, a lateral image is usually taken to complement the front-view.\n- **Posterior\/Anterior (PA)**: Here the chest radiograph is acquired by passing the X-Ray beam from the patient's posterior (back) part of the chest  to the anterior (front) part. While obtaining the image patient is asked to stand with their chest against the film. In this image, the hear is on the right side of the image as one looks at it. These are of higher quality and assess the heart size more accurately\n- **Anterior\/Posterior (AP)**: At times it is not possible for radiographers to acquire a PA chest X-ray. This is usually because the patient is too unwell to stand. In these images the size of Heart is exaggerated.","ced4d628":"Thus, the dataset contains information about 26684 patients (which is same as that of the train_labels dataframe).","28c493a6":"- **stage_2_detailed_class_info.csv**\n\nIt provides detailed information about the type of positive or negative class for each image.\n","830ec92e":"Here, we can see that the maximum number of patient are of 58 years old. In order to have a more clear idea, we will introduce a new column where the patients will be placed in an age group like (0, 10), (10, 20) etc.","11d7d234":"Thus, we can say that the ages like 148, 150, 151, 153 and 155 are mistakes. We can trim these outlier values to a somewhat lower value say 100 so that the max age of the patient will be 100.","57295030":"#### Plotting DICOM Images","1f8ced1c":"- Target = 0","69baa6fb":"Thus, we can see that the number of Male patients suffering from Pneumonia is greater when compared with that of Females.","f6fd853d":"#### Conversion Type","5433a7f9":"#### Target and Class","14d46ddc":"Some information about the data field present in the 'stage_2_train_labels.csv' are:\n*   **patientId** - A patientId. Each patientId corresponds to a unique image (which we will see a little bit later) \n*   **x** - The upper-left x coordinate of the bounding box\n*   **y** - The upper-left y coordinate of the bounding box\n*   **width** - The width of the bounding box\n*   **height** - The height of the bounding box\n*   **Target** - The binary Target indicating whether this sample has evidence of pneumonia or not.","9eabce40":"We can see that the centers of the box are spread across the entire region of the Lungs. Both of the cases (PA and AP) seem to have outliers in them.  ","1655c4b6":"Thus, we can say that each patientId is associated with only 1 class.","d52c9e54":"### Conclusion\n- The training dataset (both of the csv files and the training image folder) contains information of 26684 patients (unique)\n- Out of these 26684 unique patients some of these have multiple entries in the both of the csv files\n- Most of the recorded patient belong to Target = 0 (i.e., they don't have Pneumonia)\n- Some of the patients have more than one bounding box. The maximum being 4\n- The classes \"No Lung Opacity \/ Not Normal\" and \"Normal\" is associated with Target = 0 whereas \"Lung Opacity\" belong to Target = 1\n- The images are present in dicom format, from which information like PatientAge, PatientSex, ViewPosition etc are obtained\n- There are two ways from which images were obtained: AP and PA. The age ranges from 1-155 (which were further clipped to 100)\n- The centers of the bounding box are spread out over the entire region of the lungs. But there are some centers which are outliers.","cd889d21":"#### Modality","51cf8906":"#### Bounding Box Distribution","4c8084f8":"As the above subplots are of the images which belong to either \"Normal\" or \"No Lung Opacity \/ Not Normal\", hence no bounding box is observed.","7b9300fe":"Thus, we can see that number of nulls in bounding box columns are equal to the number of 0's we have in the Target column.","f404818a":"Thus, the dataset contains information about 30227 patients. Out of these 26684 patients, some of them have multiple entries in the dataset.","5f7a7c7c":"#### Rows and Columns","bdd6e36c":"Most of the standard headers containing patient identifable information have been anonymized (removed) so we are left with a relatively sparse set of metadata. The primary field we will be accessing is the underlying pixel data as follows:\n\nFrom the above sample we can see that dicom file contains some of the information that can be used for further analysis such as sex, age, body part examined (which should be mostly chest), view position and modality. Size of this image is 1024 x 1024 (rows x columns).","ac43c3ec":"In the above subplots, we can see that the area covered by the box (in blue colour) depicts the area of interest i.e., the area in which the opacity is observed in the Lungs.","434e871f":"- Target = 1","e98075c2":"As you can see, each row in the CSV file contains a `patientId` (one unique value per patient), a target (either 0 or 1 for absence or presence of pneumonia, respectively) and the corresponding abnormality bounding box defined by the upper-left hand corner (x, y) coordinate and its corresponding width and height. In this particular case, the patient does *not* have pneumonia and so the corresponding bounding box information is set to `NaN`. See an example case with pnuemonia here:","3f58d386":"Some information about the data field present in the 'stage_2_detailed_class_info.csv' are:\n*   **patientId** - A patientId. Each patientId corresponds to a unique image\n*   **class** - Have three values depending what is the current state of the patient's lung: 'No Lung Opacity \/ Not Normal', 'Normal' and 'Lung Opacity'.\n\n","b0cc48f5":"Thus, we can see that the maximum number of patients belong to the age group of (50, 60] whereas the least belong to (90, 100]","cdde294f":"Thus, there are 23286 unique patients which have only one entry in the dataset. It also has the patientsbounding box, 3266 with 2 bounding box, 119 with 3 bounding box and 13 with 4 bounding box coordinates.","0c445037":"# Overview of DICOM files and medical images\n\nMedical images are stored in a special format known as DICOM files (`*.dcm`). They contain a combination of header metadata as well as underlying raw image arrays for pixel data. In Python, one popular library to access and manipulate DICOM files is the `pydicom` module. To use the `pydicom` library, first find the DICOM file for a given `patientId` by simply looking for the matching file in the `stage_2_train_images\/` folder, and the use the `pydicom.read_file()` method to load the data:","af597269":"Thus, **Target = 1** is associated with only **class = Lung Opacity** whereas **Target = 0** is associated with only **class = No Lung Opacity \/ Not Normal** as well as **Normal**.","ccf7c00b":"One important thing to keep in mind is that a given `patientId` may have **multiple** boxes if more than one area of pneumonia is detected (see below for example images).","ef3749a2":"#### Patient Age","2539318d":"From the above three plots we can infer that the maximum percentage of Male and Females, Patients with \u201cNo Lung Opacity \/ Not Normal\u201d as well as \u201cLung Opacity\u201d classes and Patients having Pneumonia all lies in the [50, 60] age group.","82b7594a":"The several key items in this folder:\n* `stage_2_train_labels.csv`: CSV file containing training set patientIds and  labels (including bounding boxes)\n* `stage_2_detailed_class_info.csv`: CSV file containing detailed labels (explored further below)\n* `stage_2_train_images\/`:  directory containing training set raw image (DICOM) files\n\nLet's go ahead and take a look at the first labels CSV file first:","0ecca40f":"Thus, none of the columns in class_labels has an empty row. ","704919ec":"#### Patient Sex","dea592f9":"Thus, from the above pie chart it is clear that out of unique 26684 entries in the dataset, there are 20672 (i.e., 77%) entries in the dataset which corresponds to the entries of the patient Not having Pnuemonia whereas 6012 (i.e., 23%) entries corresponds to Positive case of Pneumonia.","7061a7f8":"### EDA on this saved training data:","c7c67c86":"#### Understanding Different Positions","5bcfca0f":"#### Body Part Examined","d194ecb8":"The centres for the bounding box in both the cases are spread out evenly across the entire lung with a slight number of outliers.","09a8ab30":"Thus, we can see that in the training images folder we have just 26684 images which is same as that of unique patientId's present in either of the csv files. Thus, we can say that **each of the unique patientId's present in either of the csv files corresponds to an image present in the folder**."}}