{"cell_type":{"4ce8ab74":"code","cf76ab60":"code","831340ba":"code","71974ac7":"code","76304095":"code","87ad45de":"code","71363c18":"code","9f9f5947":"code","6b4bae84":"code","924e4a41":"code","c4a98af8":"code","9b10cee6":"code","994c3df8":"code","093a6c9c":"code","22f02d41":"code","0e7d3f31":"code","718d1f9f":"code","77ee704d":"code","9167fd27":"code","8757910b":"code","6ef88c9e":"code","5ada3ca4":"code","c9ff7a51":"code","c97c79d7":"code","049b7e86":"code","13d1c0d3":"markdown","ed85b6b5":"markdown"},"source":{"4ce8ab74":"import seaborn as sns\nfrom matplotlib import pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder\nfrom sklearn.model_selection import train_test_split, KFold, StratifiedKFold, cross_val_score, RepeatedStratifiedKFold\nfrom sklearn.metrics import accuracy_score\nfrom lightgbm import LGBMClassifier","cf76ab60":"train_data = pd.read_csv('..\/input\/janatahack-healthcare-ii\/JanataHack_HealthCare_II_train.csv')\ntest_data = pd.read_csv('..\/input\/janatahack-healthcare-ii\/JanataHack_HealthCare_II_test.csv')\ntrain_data.head()","831340ba":"train_data.columns = train_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')\ntest_data.columns = test_data.columns.str.lower().str.strip().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')","71974ac7":"train_data.head()","76304095":"print('Train Data Shape: ', train_data.shape)\nprint('Test Data Shape: ', test_data.shape)\ntrain_data.head()","87ad45de":"train_data.dtypes","71363c18":"train_data.isnull().sum()","9f9f5947":"train_data.nunique()","6b4bae84":"train_data.columns","924e4a41":"# Unique values for all the columns\nfor col in train_data.columns[~(train_data.columns.isin(['case_id', 'patientid', 'admission_deposit']))].tolist():\n    print(\" Unique Values --> \" + col, ':', len(train_data[col].unique()), ': ', train_data[col].unique())","c4a98af8":"i = 1\nfor column in train_data.columns[~(train_data.columns.isin(['case_id', 'patientid', 'admission_deposit']))].tolist():\n    plt.figure(figsize = (60, 10))\n    plt.subplot(4, 4, i)\n    sns.barplot(x = train_data[column].value_counts().index, y = train_data[column].value_counts())\n    i += 1\n    plt.show()","9b10cee6":"sns.boxplot(x = 'visitors_with_patient', data = train_data)\nsns.despine()","994c3df8":"plt.figure(figsize = (20, 6))\nsns.barplot(x = train_data.groupby(['severity_of_illness'])['visitors_with_patient'].value_counts().index, y = train_data.groupby(['severity_of_illness'])['visitors_with_patient'].value_counts())\nplt.xticks(rotation = 90)\nsns.despine()","093a6c9c":"train_data = train_data.fillna('NaN')\ntest_data = test_data.fillna('NaN')\n\nfor column in train_data.columns[~(train_data.columns.isin(['case_id', 'stay']))].tolist():\n\n    le = LabelEncoder()\n\n    if column == 'city_code_patient':\n        train_data['city_code_patient'] = train_data['city_code_patient'].astype('str')\n        test_data['city_code_patient'] = test_data['city_code_patient'].astype('str')\n        train_data['city_code_patient'] = le.fit_transform(train_data['city_code_patient'])\n        test_data['city_code_patient'] = le.fit_transform(test_data['city_code_patient'])\n    \n    elif column == 'bed_grade':\n        bedGrade = {1: '1',2: '2', 3: '3', 4: '4', np.nan: '5'}\n        train_data['bed_grade'] = train_data['bed_grade'].map(bedGrade)\n        test_data['bed_grade'] = test_data['bed_grade'].map(bedGrade)\n        train_data['bed_grade'] = train_data['bed_grade'].fillna('NaN')\n        test_data['bed_grade'] = test_data['bed_grade'].fillna('NaN')\n    \n    else:\n        train_data[column] = le.fit_transform(train_data[column])\n        test_data[column] = le.fit_transform(test_data[column])","22f02d41":"train_data.head()","0e7d3f31":"train_data.shape","718d1f9f":"ss = StandardScaler()\n\nfor column in train_data.columns[~(train_data.columns.isin(['case_id', 'stay']))].tolist():\n    train_data[[column]] = ss.fit_transform(train_data[[column]])\n    test_data[[column]] = ss.fit_transform(test_data[[column]])","77ee704d":"train_data.head()","9167fd27":"train_data.dropna(inplace=True)\nX=train_data.drop(['stay','case_id'],axis=1).astype('float32')\ny=train_data['stay']\n","8757910b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)","6ef88c9e":"import lightgbm as lgb\nlgbc = lgb.LGBMClassifier(random_state=1)\n\nlgbc.fit(X_train, y_train)\n\ny_pred_test = lgbc.predict(X_test)\ny_prob_test = lgbc.predict_proba(X_test)[:,1]\n\ny_pred_train = lgbc.predict(X_train)\ny_prob_train = lgbc.predict_proba(X_train)[:,1]\n\nprint('Accuracy on Train Set: ', accuracy_score(y_train, y_pred_train))\nprint('Accuracy on Test Set: ', accuracy_score(y_test, y_pred_test))","5ada3ca4":"# Hyperparameter Tuning\nfrom sklearn.model_selection import RandomizedSearchCV\n\nfrom scipy.stats import randint as sp_randint\n\nlgbc = lgb.LGBMClassifier(random_state=1)\n\nparams = {'n_estimators': sp_randint(5,10),\n          'max_depth' : sp_randint(2,10),\n          'min_child_samples' : sp_randint(1,20),\n          'num_leaves' : sp_randint(5,10)}\n\nrand_search_lgbc = RandomizedSearchCV(lgbc, param_distributions=params, random_state=1, cv=3)\n\nrand_search_lgbc.fit(X_train, y_train)\n\nrand_search_lgbc.best_params_","c9ff7a51":"# Passing best parameter for the Hyperparameter Tuning\nlgbc_ht = lgb.LGBMClassifier(**rand_search_lgbc.best_params_, random_state=1)\n\nlgbc_ht.fit(X_train, y_train)\n\ny_pred_test = lgbc_ht.predict(X_test)\ny_prob_test = lgbc_ht.predict_proba(X_test)[:,1]\n\ny_pred_train = lgbc_ht.predict(X_train)\ny_prob_train = lgbc_ht.predict_proba(X_train)[:,1]\n\nprint('Accuracy on Train Set: ', accuracy_score(y_train, y_pred_train))\nprint('Accuracy on Test Set: ', accuracy_score(y_test, y_pred_test))","c97c79d7":"test_data = test_data.fillna(method='ffill')","049b7e86":"lgbc.fit(X_train, y_train)\n\npredictions = lgbc.predict(test_data[test_data.columns[~(test_data.columns.isin(['case_id']))].tolist()].values)\nsubmission = pd.DataFrame({'case_id': test_data['case_id'], 'Stay': predictions.ravel()})\nsubmission.to_csv('LGBM_predict.csv', index = False)\nsubmission.head()","13d1c0d3":"## Exploratory Data Analysis","ed85b6b5":"#### Since the Accuracy dropped to 37.05 from 42.22 after tuning, we will use default params "}}