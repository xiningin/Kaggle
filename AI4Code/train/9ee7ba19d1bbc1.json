{"cell_type":{"00447412":"code","f664f91b":"code","90beccd9":"code","e04bf06b":"code","9fdc3770":"code","fcc95c5f":"code","74c2816b":"code","72e2a7e0":"code","9d5272e6":"code","0704834f":"code","249bbb10":"code","ed5c26c5":"code","ed3f7296":"markdown","294d29d9":"markdown","b811ecfa":"markdown"},"source":{"00447412":"import pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(10,6)})\nsns.set(font_scale=1.3)\nplt.style.use('fivethirtyeight')\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\n\nfrom sklearn.ensemble import GradientBoostingClassifier, AdaBoostClassifier, ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingRegressor, AdaBoostRegressor, ExtraTreesRegressor\nfrom sklearn.ensemble import BaggingClassifier, RandomForestClassifier\nfrom sklearn.ensemble import BaggingRegressor, RandomForestRegressor\nfrom sklearn.tree import DecisionTreeClassifier, ExtraTreeClassifier\nfrom xgboost import XGBClassifier, XGBRegressor, XGBRFRegressor\nfrom sklearn.metrics import accuracy_score, confusion_matrix, r2_score\n\nimport warnings\nwarnings.filterwarnings('ignore')","f664f91b":"train = pd.read_csv('..\/input\/mobile-price-classification\/train.csv')","90beccd9":"train.head()","e04bf06b":"# The dataset don't have missing values\ntrain.info()","9fdc3770":"# We can see that the ram variable has a strong positive correlation\nplt.figure(figsize=(18,15))\nsns.heatmap(train.corr(), cmap=plt.cm.Reds, cbar_kws={'shrink': .6}, square=True, annot=True, fmt='.2f', linewidths=.8)\nplt.show()","fcc95c5f":"columns = train.columns\nplt.subplots(figsize=(20,50))\nlength = len(columns)\n\nfor i, j in zip(columns, range(length)):\n    plt.subplot((length\/2), 3, j+1)\n    plt.subplots_adjust(wspace=.2, hspace=.5)\n    sns.distplot(train[i])\n    plt.title(i)","74c2816b":"plt.subplots(figsize=(20,50))\nfor i, j in zip(columns, range(length)):\n    plt.subplot((length\/2), 3, j+1)\n    plt.subplots_adjust(wspace=.2, hspace=.4)\n    sns.boxplot(y=train[i])\n    plt.title(i)","72e2a7e0":"plt.subplots(figsize=(20,50))\nfor i, j in zip(columns, range(length)):\n    plt.subplot((length\/2), 3, j+1)\n    plt.subplots_adjust(wspace=.2, hspace=.6)\n    sns.scatterplot(x=train['price_range'],y=train[i])\n    plt.title(i)","9d5272e6":"x = train.drop('price_range', axis=1)\ny = train['price_range']\n\n# Normalization\nx = x\/255","0704834f":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=.2)","249bbb10":"colunas = ['Modelo','Acuracy']\nresultado = pd.DataFrame(columns=colunas)\n\nmodels = []\n\nmodels.append(('GradientBoostingClassifier', GradientBoostingClassifier()))\nmodels.append(('AdaBoostClassifier', AdaBoostClassifier()))\nmodels.append(('ExtraTreesClassifier', ExtraTreesClassifier()))\nmodels.append(('BaggingClassifier', BaggingClassifier()))\nmodels.append(('RandomForestClassifier', RandomForestClassifier()))\nmodels.append(('DecisionTreeClassifier', DecisionTreeClassifier()))\nmodels.append(('ExtraTreeClassifier', ExtraTreeClassifier()))\nmodels.append((\"XGBClassifier\", XGBClassifier()))\n\nfor name, model in models:\n    model.fit(x_train,y_train)\n    y_pred=model.predict(x_test)\n    acc = accuracy_score(y_test, y_pred)\n    resultado = resultado.append(pd.DataFrame([[name, acc]], columns=colunas))\n    \nresultado.sort_values(by=['Acuracy'], ascending=False, inplace=True)\nresultado","ed5c26c5":"colunas = ['Modelo','R2']\nresultado = pd.DataFrame(columns=colunas)\n\nmodels = []\n\nmodels.append(('GradientBoostingRegressor', GradientBoostingRegressor()))\nmodels.append(('AdaBoostRegressor', AdaBoostRegressor()))\nmodels.append(('ExtraTreesRegressor', ExtraTreesRegressor()))\nmodels.append(('BaggingRegressor', BaggingRegressor()))\nmodels.append(('RandomForestRegressor', RandomForestRegressor()))\nmodels.append((\"XGBRegressor\", XGBRegressor()))\nmodels.append((\"XGBRFRegressor\", XGBRFRegressor()))\n\nfor name, model in models:\n    model.fit(x_train,y_train)\n    y_pred=model.predict(x_test)\n    acc = r2_score(y_test, y_pred)\n    resultado = resultado.append(pd.DataFrame([[name, acc]], columns=colunas))\n    \nresultado.sort_values(by=['R2'], ascending=False, inplace=True)\nresultado","ed3f7296":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Model<p>","294d29d9":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Input<\/p>","b811ecfa":"# <p style=\"background-color:#80ccff; font-family:newtimeroman; font-size:150%; text-align:center; border-radius:  80px 5px; padding-top:8px; padding-bottom:8px;\">Exploratory Analysis<\/p>"}}