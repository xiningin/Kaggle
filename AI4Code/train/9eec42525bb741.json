{"cell_type":{"8a7998c3":"code","b16d5dce":"markdown"},"source":{"8a7998c3":"#!\/usr\/bin\/env python\n# coding: utf-8\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.cluster.util import cosine_distance\nimport numpy as np\nimport networkx as nx\n \ndef read_article(file_name):\n    file = open(file_name, \"r\")\n    filedata = file.readlines()\n    article = filedata[0].split(\". \")\n    sentences = []\n\n    for sentence in article:\n        print(sentence)\n        sentences.append(sentence.replace(\"[^a-zA-Z]\", \" \").split(\" \"))\n    sentences.pop() \n    \n    return sentences\n\ndef sentence_similarity(sent1, sent2, stopwords=None):\n    if stopwords is None:\n        stopwords = []\n \n    sent1 = [w.lower() for w in sent1]\n    sent2 = [w.lower() for w in sent2]\n \n    all_words = list(set(sent1 + sent2))\n \n    vector1 = [0] * len(all_words)\n    vector2 = [0] * len(all_words)\n \n    # build the vector for the first sentence\n    for w in sent1:\n        if w in stopwords:\n            continue\n        vector1[all_words.index(w)] += 1\n \n    # build the vector for the second sentence\n    for w in sent2:\n        if w in stopwords:\n            continue\n        vector2[all_words.index(w)] += 1\n \n    return 1 - cosine_distance(vector1, vector2)\n \ndef build_similarity_matrix(sentences, stop_words):\n    # Create an empty similarity matrix\n    similarity_matrix = np.zeros((len(sentences), len(sentences)))\n \n    for idx1 in range(len(sentences)):\n        for idx2 in range(len(sentences)):\n            if idx1 == idx2: #ignore if both are same sentences\n                continue \n            similarity_matrix[idx1][idx2] = sentence_similarity(sentences[idx1], sentences[idx2], stop_words)\n\n    return similarity_matrix\n\n\ndef generate_summary(file_name, top_n=5):\n    nltk.download(\"stopwords\")\n    stop_words = stopwords.words('english')\n    summarize_text = []\n\n    # Step 1 - Read text anc split it\n    sentences =  read_article(file_name)\n\n    # Step 2 - Generate Similary Martix across sentences\n    sentence_similarity_martix = build_similarity_matrix(sentences, stop_words)\n\n    # Step 3 - Rank sentences in similarity martix\n    sentence_similarity_graph = nx.from_numpy_array(sentence_similarity_martix)\n    scores = nx.pagerank(sentence_similarity_graph)\n\n    # Step 4 - Sort the rank and pick top sentences\n    ranked_sentence = sorted(((scores[i],s) for i,s in enumerate(sentences)), reverse=True)    \n    print(\"Indexes of top ranked_sentence order are \", ranked_sentence)    \n\n    for i in range(top_n):\n      summarize_text.append(\" \".join(ranked_sentence[i][1]))\n\n    # Step 5 - Offcourse, output the summarize texr\n    print(\"Summarize Text: \\n\", \". \".join(summarize_text))\nload_dir = \"\/kaggle\/input\/msfttextfile\/\"\n# let's begin\ngenerate_summary(load_dir + \"msft.txt\", 2)","b16d5dce":"Text Summarizer\nIgnore the first two lines in output that begin with '[ntlk]'"}}