{"cell_type":{"4c0b3de2":"code","9e55fec6":"code","a9757e0a":"code","ffb771b5":"code","c9c6866c":"code","4185039d":"code","77640cc7":"code","91927c27":"code","c6b0e07b":"code","655e8289":"code","f6da42a3":"code","1f775d37":"code","5898e945":"code","4f9cd20d":"code","1b8cc65f":"code","d53b6387":"code","0c010744":"code","af63b06e":"code","7d5902ee":"code","a10b2740":"code","2c23c18a":"code","b88dc509":"code","507b9281":"code","0137ec0d":"code","f7d0e9ac":"code","d2da08ab":"code","40a494f0":"code","dfbf3127":"code","7cf34bb3":"code","7aae1499":"code","fc7a55d9":"code","0e498266":"code","b502d95c":"code","d25cb78e":"code","bf4d49bb":"code","3da70bfa":"code","7912da49":"code","7bff41b5":"code","d71d1a7e":"code","51fd8293":"code","9a33f98c":"code","d9bf7077":"code","7301260b":"code","66681f10":"code","b2a9a9c4":"code","eaa240f7":"code","119f7deb":"code","a23a1ac8":"code","282b39a7":"code","163e459a":"code","79f010be":"code","edd9c04a":"code","bfc6311a":"code","53c88875":"code","7211e3d4":"code","532a788a":"code","d2218bd5":"code","2cc2b998":"code","40aec3cd":"code","8cab5f73":"code","00839121":"code","9a56cf63":"code","63881c5b":"code","0161d220":"code","0268fc59":"code","ebda770a":"code","998c128f":"code","4d06a5c5":"code","2d50e015":"code","d2fa9a52":"code","0f0f7ff8":"code","c8ff1a78":"code","bc14d871":"code","9ac60813":"code","558434f0":"code","f76bd0da":"code","7a27228a":"code","482f1568":"code","fad292c9":"code","8131a102":"code","d7a67ae1":"code","9807db10":"markdown","b22d25cd":"markdown","be076490":"markdown","5ed4a8b6":"markdown","1b6c5e41":"markdown","b58ef6f8":"markdown","f48b9b39":"markdown","c3ffc7f4":"markdown","f71f505e":"markdown","c992cb4f":"markdown","7a02cb17":"markdown","8a16fe8d":"markdown","ceffd56d":"markdown"},"source":{"4c0b3de2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9e55fec6":"pip install PyCaret","a9757e0a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)","ffb771b5":"\ntrain_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv', sep=',')\ntest_df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', sep=',')\n","c9c6866c":"test_df.tail()","4185039d":"train_df.tail()","77640cc7":"print(train_df.info())\nprint(\"rows = \", len(train_df))\nprint(\"columns = \", len(train_df.columns))\nprint(train_df.shape)","91927c27":"print(test_df.info())\nprint(\"rows = \", len(test_df))\nprint(\"columns = \", len(test_df.columns))\nprint(test_df.shape)","c6b0e07b":"train_df.describe()","655e8289":"#train_\u8cea\u7684\u5909\u6570\u3068\u91cf\u7684\u5909\u6570\u306b\u5206\u5225---------------------------------------------------------------------------------------------------\nQual_train_df = train_df[[\"MSZoning\", \"Street\", \"Alley\",\"LotShape\",\"LandContour\",\n                                 \"Utilities\", \"LotConfig\",\"LandSlope\", \"Neighborhood\", \"Condition1\", \"Condition2\",\n                                 \"BldgType\", \"HouseStyle\", \"RoofStyle\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\",\n                                 \"MasVnrType\",\"ExterQual\", \"ExterCond\", \"Foundation\", \"BsmtQual\", \"BsmtCond\",\n                                 \"BsmtExposure\", \"BsmtFinType1\",\"BsmtFinType2\", \"Heating\", \"HeatingQC\", \"CentralAir\", \n                                 \"Electrical\",\"KitchenQual\", \"Functional\", \"FireplaceQu\", \"GarageType\", \n                                 \"GarageQual\",\"GarageFinish\", \"GarageCond\",\"PavedDrive\", \"PoolQC\", \"Fence\",\n                                 \"MiscFeature\", \"SaleType\", \"SaleCondition\"]]\nQant_train_df = train_df.drop(columns= [\"Id\", \"MSZoning\", \"Street\", \"Alley\",\"LotShape\", \"LotShape\", \"LotShape\",\"LandContour\",\n                                 \"Utilities\", \"LotConfig\",\"LandSlope\", \"Neighborhood\", \"Condition1\", \"Condition2\",\n                                 \"BldgType\", \"HouseStyle\", \"RoofStyle\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\",\n                                 \"MasVnrType\",\"ExterQual\", \"ExterCond\", \"Foundation\", \"BsmtQual\", \"BsmtCond\",\n                                 \"BsmtExposure\", \"BsmtFinType1\",\"BsmtFinType2\", \"Heating\", \"HeatingQC\", \"CentralAir\", \n                                 \"Electrical\",\"KitchenQual\", \"Functional\", \"FireplaceQu\", \"GarageType\", \n                                 \"GarageQual\",\"GarageFinish\", \"GarageCond\",\"PavedDrive\", \"PoolQC\", \"Fence\",\n                                 \"MiscFeature\", \"SaleType\", \"SaleCondition\", \"SalePrice\"], axis = 1)\nID_train = pd.DataFrame()\nID_train [\"Id\"] =  train_df[\"Id\"]\nY_train = train_df[\"SalePrice\"]\n#------------------------------------------------------------------------------------------------------------------------------\n\n#test_\u8cea\u7684\u5909\u6570\u3068\u91cf\u7684\u5909\u6570\u306b\u5206\u5225----------------------------------------------------------------------------------------------------\nQual_test_df = test_df[[\"MSZoning\", \"Street\", \"Alley\",\"LotShape\",\"LandContour\",\n                                 \"Utilities\", \"LotConfig\",\"LandSlope\", \"Neighborhood\", \"Condition1\", \"Condition2\",\n                                 \"BldgType\", \"HouseStyle\", \"RoofStyle\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\",\n                                 \"MasVnrType\",\"ExterQual\", \"ExterCond\", \"Foundation\", \"BsmtQual\", \"BsmtCond\",\n                                 \"BsmtExposure\", \"BsmtFinType1\",\"BsmtFinType2\", \"Heating\", \"HeatingQC\", \"CentralAir\", \n                                 \"Electrical\",\"KitchenQual\", \"Functional\", \"FireplaceQu\", \"GarageType\", \n                                 \"GarageQual\",\"GarageFinish\", \"GarageCond\",\"PavedDrive\", \"PoolQC\", \"Fence\",\n                                 \"MiscFeature\", \"SaleType\", \"SaleCondition\"]]\nQant_test_df = test_df.drop(columns = [\"Id\",\"MSZoning\", \"Street\", \"Alley\",\"LotShape\", \"LotShape\", \"LotShape\",\"LandContour\",\n                                 \"Utilities\", \"LotConfig\",\"LandSlope\", \"Neighborhood\", \"Condition1\", \"Condition2\",\n                                 \"BldgType\", \"HouseStyle\", \"RoofStyle\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\",\n                                 \"MasVnrType\",\"ExterQual\", \"ExterCond\", \"Foundation\", \"BsmtQual\", \"BsmtCond\",\n                                 \"BsmtExposure\", \"BsmtFinType1\",\"BsmtFinType2\", \"Heating\", \"HeatingQC\", \"CentralAir\", \n                                 \"Electrical\",\"KitchenQual\", \"Functional\", \"FireplaceQu\", \"GarageType\", \n                                 \"GarageQual\",\"GarageFinish\", \"GarageCond\",\"PavedDrive\", \"PoolQC\", \"Fence\",\n                                 \"MiscFeature\", \"SaleType\", \"SaleCondition\"], axis = 1)\nID_test = pd.DataFrame()\nID_test [\"Id\"] =  test_df[\"Id\"]\n#--------------------------------------------------------------------------------------------------------------------------------","f6da42a3":"#\u6570\u304c\u8457\u3057\u304f\u5c11\u306a\u3044\u5909\u6570\u306e\u524a\u9664\n\nQual_train_df = Qual_train_df.drop(columns = [\"Alley\",\"PoolQC\", \"Fence\", \"MiscFeature\"], axis = 1)\nQual_test_df = Qual_test_df.drop(columns = [\"Alley\",\"PoolQC\", \"Fence\", \"MiscFeature\"], axis = 1)","1f775d37":"print(Qual_train_df[\"MSZoning\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\n#print(Qual_train_df[\"Street\"].value_counts())\n#print(Qual_train_df[\"LotShape\"].value_counts())\n#print(Qual_train_df[\"LandContour\"].value_counts())\nprint(Qual_train_df[\"Utilities\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\n#print(Qual_train_df[\"LotConfig\"].value_counts())\n#print(Qual_train_df[\"LandSlope\"].value_counts())\n#print(Qual_train_df[\"Neighborhood\"].value_counts())\n#print(Qual_train_df[\"Condition1\"].value_counts())\n#print(Qual_train_df[\"Condition2\"].value_counts())\n#print(Qual_train_df[\"HouseStyle\"].value_counts())\n#print(Qual_train_df[\"RoofStyle\"].value_counts())\n#print(Qual_train_df[\"RoofMatl\"].value_counts())\nprint(Qual_train_df[\"Exterior1st\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"Exterior2nd\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"MasVnrType\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\n#print(Qual_train_df[\"ExterQual\"].value_counts())\n#print(Qual_train_df[\"ExterCond\"].value_counts())\n#print(Qual_train_df[\"Foundation\"].value_counts())\nprint(Qual_train_df[\"BsmtQual\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"BsmtCond\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"BsmtExposure\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"BsmtFinType1\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"BsmtFinType2\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\n#print(Qual_train_df[\"Heating\"].value_counts())\n#print(Qual_train_df[\"HeatingQC\"].value_counts())\n#print(Qual_train_df[\"CentralAir\"].value_counts())\nprint(Qual_train_df[\"Electrical\"].value_counts())\nprint(Qual_train_df[\"KitchenQual\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"Functional\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"FireplaceQu\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"GarageType\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"GarageFinish\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"GarageQual\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"GarageCond\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\nprint(Qual_train_df[\"SaleType\"].value_counts())#\u6b20\u640d\u5024\u3042\u308a\n#print(Qual_train_df[\"SaleCondition\"].value_counts())","5898e945":"Qual_train_df[\"MSZoning\"] = Qual_train_df[\"MSZoning\"].fillna(\"RL\")\nQual_test_df[\"MSZoning\"] = Qual_test_df[\"MSZoning\"].fillna(\"RL\")\nprint(\"nullnum is \", Qual_train_df[\"MSZoning\"].isnull().sum())","4f9cd20d":"#1459\u500b\u304c\u201dALLPub\u201d\u306a\u306e\u3067\u5909\u6570\u7684\u306b\u610f\u5473\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\nQual_train_df[\"Utilities\"] = Qual_train_df[\"Utilities\"].fillna(\"AllPub\")\nQual_test_df[\"Utilities\"] = Qual_test_df[\"Utilities\"].fillna(\"AllPub\")\nprint(\"nullnum is \", Qual_train_df[\"Utilities\"].isnull().sum())","1b8cc65f":"Qual_train_df[\"Exterior1st\"] = Qual_train_df[\"Exterior1st\"].fillna(\"VinylSd\")\nQual_test_df[\"Exterior1st\"] = Qual_test_df[\"Exterior1st\"].fillna(\"VinylSd\")\nprint(\"nullnum is \", Qual_train_df[\"Exterior1st\"].isnull().sum())","d53b6387":"Qual_train_df[\"Exterior2nd\"] = Qual_train_df[\"Exterior2nd\"].fillna(\"VinylSd\")\nQual_test_df[\"Exterior2nd\"] = Qual_test_df[\"Exterior2nd\"].fillna(\"VinylSd\")\nprint(\"nullnum is \", Qual_train_df[\"Exterior2nd\"].isnull().sum())","0c010744":"Qual_train_df[\"MasVnrType\"] = Qual_train_df[\"MasVnrType\"].fillna(\"None\")\nQual_test_df[\"MasVnrType\"] = Qual_test_df[\"MasVnrType\"].fillna(\"None\")\nprint(\"nullnum is \", Qual_train_df[\"MasVnrType\"].isnull().sum())","af63b06e":"Qual_train_df[\"BsmtQual\"] = Qual_train_df[\"BsmtQual\"].fillna(\"TA\")\nQual_test_df[\"BsmtQual\"] = Qual_test_df[\"BsmtQual\"].fillna(\"TA\")\nprint(\"nullnum is \", Qual_train_df[\"BsmtQual\"].isnull().sum())","7d5902ee":"Qual_train_df[\"BsmtCond\"] = Qual_train_df[\"BsmtCond\"].fillna(\"TA\")\nQual_test_df[\"BsmtCond\"] = Qual_test_df[\"BsmtCond\"].fillna(\"TA\")\nprint(\"nullnum is \", Qual_train_df[\"BsmtCond\"].isnull().sum())","a10b2740":"Qual_train_df[\"BsmtExposure\"] = Qual_train_df[\"BsmtExposure\"].fillna(\"No\")\nQual_test_df[\"BsmtExposure\"] = Qual_test_df[\"BsmtExposure\"].fillna(\"No\")\nprint(\"nullnum is \", Qual_train_df[\"BsmtExposure\"].isnull().sum())","2c23c18a":"Qual_train_df[\"BsmtFinType1\"] = Qual_train_df[\"BsmtFinType1\"].fillna(\"Unf\")\nQual_test_df[\"BsmtFinType1\"] = Qual_test_df[\"BsmtFinType1\"].fillna(\"Unf\")\nprint(\"nullnum is \", Qual_train_df[\"BsmtFinType1\"].isnull().sum())","b88dc509":"Qual_train_df[\"BsmtFinType2\"] = Qual_train_df[\"BsmtFinType2\"].fillna(\"Unf\")\nQual_test_df[\"BsmtFinType2\"] = Qual_test_df[\"BsmtFinType2\"].fillna(\"Unf\")\nprint(\"nullnum is \", Qual_train_df[\"BsmtFinType2\"].isnull().sum())","507b9281":"Qual_train_df[\"KitchenQual\"] = Qual_train_df[\"KitchenQual\"].fillna(\"TA\")\nQual_test_df[\"KitchenQual\"] = Qual_test_df[\"KitchenQual\"].fillna(\"TA\")\nprint(\"nullnum is \", Qual_train_df[\"KitchenQual\"].isnull().sum())","0137ec0d":"Qual_train_df[\"Functional\"] = Qual_train_df[\"Functional\"].fillna(\"Typ\")\nQual_test_df[\"Functional\"] = Qual_test_df[\"Functional\"].fillna(\"Typ\")\nprint(\"nullnum is \", Qual_train_df[\"Functional\"].isnull().sum())","f7d0e9ac":"Qual_train_df[\"FireplaceQu\"] = Qual_train_df[\"FireplaceQu\"].fillna(\"Gd\")\nQual_test_df[\"FireplaceQu\"] = Qual_test_df[\"FireplaceQu\"].fillna(\"Gd\")\nprint(\"nullnum is \", Qual_train_df[\"FireplaceQu\"].isnull().sum())","d2da08ab":"Qual_train_df[\"GarageType\"] = Qual_train_df[\"GarageType\"].fillna(\"Attchd\")\nQual_test_df[\"GarageType\"] = Qual_test_df[\"GarageType\"].fillna(\"Attchd\")\nprint(\"nullnum is \", Qual_train_df[\"GarageType\"].isnull().sum())","40a494f0":"Qual_train_df[\"GarageFinish\"] = Qual_train_df[\"GarageFinish\"].fillna(\"Unf\")\nQual_test_df[\"GarageFinish\"] = Qual_test_df[\"GarageFinish\"].fillna(\"Unf\")\nprint(\"nullnum is \", Qual_train_df[\"GarageFinish\"].isnull().sum())","dfbf3127":"Qual_train_df[\"GarageQual\"] = Qual_train_df[\"GarageQual\"].fillna(\"TA\")\nQual_test_df[\"GarageQual\"] = Qual_test_df[\"GarageQual\"].fillna(\"TA\")\nprint(\"nullnum is \", Qual_train_df[\"GarageQual\"].isnull().sum())","7cf34bb3":"Qual_train_df[\"GarageCond\"] = Qual_train_df[\"GarageCond\"].fillna(\"TA\")\nQual_test_df[\"GarageCond\"] = Qual_test_df[\"GarageCond\"].fillna(\"TA\")\nprint(\"nullnum is \", Qual_train_df[\"GarageCond\"].isnull().sum())","7aae1499":"Qual_train_df[\"SaleType\"] = Qual_train_df[\"SaleType\"].fillna(\"WD\")\nQual_test_df[\"SaleType\"] = Qual_test_df[\"SaleType\"].fillna(\"WD\")\nprint(\"nullnum is \", Qual_train_df[\"SaleType\"].isnull().sum())","fc7a55d9":"Qual_train_df[\"Electrical\"] = Qual_train_df[\"Electrical\"].fillna(\"TA\")\nQual_test_df[\"Electrical\"] = Qual_test_df[\"Electrical\"].fillna(\"TA\")\nprint(\"nullnum is \", Qual_train_df[\"Electrical\"].isnull().sum())","0e498266":"print(Qant_train_df.isnull().sum())\nprint(Qant_test_df.isnull().sum())","b502d95c":"Qant_train_df.describe()","d25cb78e":"fig = plt.figure (figsize = (40, 10))\n\nax1 = fig.add_subplot(2, 12, 1)\nax1.set_xlabel(\"LotFrontage\")\nax1.set_ylabel(\"SalePrice\")\nplt.scatter(Qant_train_df[\"LotFrontage\"], Y_train)\n\nax2 = fig.add_subplot(2, 12, 2)\nax2.set_xlabel(\"MasVnrArea\")\nplt.scatter(Qant_train_df[\"MasVnrArea\"], Y_train)\n\n\nax3 = fig.add_subplot(2, 12, 3)\nax3.set_xlabel(\"BsmtFinSF1\")\nplt.scatter(Qant_train_df[\"BsmtFinSF1\"], Y_train)\n\n\nax4 = fig.add_subplot(2, 12, 4)\nax4.set_xlabel(\"BsmtFinSF2\")\nplt.scatter(Qant_train_df[\"BsmtFinSF2\"], Y_train)\n\nax5 = fig.add_subplot(2, 12, 5)\nax5.set_xlabel(\"BsmtUnfSF\")\nplt.scatter(Qant_train_df[\"BsmtUnfSF\"], Y_train)\n\nax6 = fig.add_subplot(2, 12, 6)\nax6.set_xlabel(\"TotalBsmtSF\")\nplt.scatter(Qant_train_df[\"TotalBsmtSF\"], Y_train)\n\nax7 = fig.add_subplot(2, 12, 7)\nax7.set_xlabel(\"BsmtFullBath\")\nplt.scatter(Qant_train_df[\"BsmtFullBath\"], Y_train)\n\nax8 = fig.add_subplot(2, 12, 8)\nax8.set_xlabel(\"BsmtHalfBath\")\nplt.scatter(Qant_train_df[\"BsmtHalfBath\"], Y_train)\n\nax9 = fig.add_subplot(2, 12, 9)\nax9.set_xlabel(\"GarageYrBlt\")\nplt.scatter(Qant_train_df[\"GarageYrBlt\"], Y_train)\n\nax10 = fig.add_subplot(2, 12, 10)\nax10.set_xlabel(\"GarageCars\")\nplt.scatter(Qant_train_df[\"GarageCars\"], Y_train)\n\n\nax11 = fig.add_subplot(2, 12, 11)\nax11.set_xlabel(\"GarageArea\")\nplt.scatter(Qant_train_df[\"GarageArea\"], Y_train)\n","bf4d49bb":"#\u5e73\u5747\u5024\u3067\u88dc\u5b8c\nQant_train_df[\"LotFrontage\"] = Qant_train_df[\"LotFrontage\"].fillna(Qant_train_df[\"LotFrontage\"].mean())\nQant_test_df[\"LotFrontage\"] = Qant_test_df[\"LotFrontage\"].fillna(Qant_test_df[\"LotFrontage\"].mean())\nprint(\"nullnum is \", Qant_train_df[\"LotFrontage\"].isnull().sum())","3da70bfa":"#\u4e2d\u592e\u5024\u3067\u88dc\u5b8c\nQant_train_df[\"MasVnrArea\"] = Qant_train_df[\"MasVnrArea\"].fillna(Qant_train_df[\"MasVnrArea\"].median())\nQant_test_df[\"MasVnrArea\"] = Qant_test_df[\"MasVnrArea\"].fillna(Qant_test_df[\"MasVnrArea\"].median())\nprint(\"nullnum is \", Qant_train_df[\"MasVnrArea\"].isnull().sum())","7912da49":"#\u4e2d\u592e\u5024\u3067\u88dc\u5b8c\nQant_train_df[\"BsmtFinSF1\"] = Qant_train_df[\"BsmtFinSF1\"].fillna(Qant_train_df[\"BsmtFinSF1\"].median())\nQant_test_df[\"BsmtFinSF1\"] = Qant_test_df[\"BsmtFinSF1\"].fillna(Qant_test_df[\"BsmtFinSF1\"].median())\nprint(\"nullnum is \", Qant_train_df[\"BsmtFinSF1\"].isnull().sum())","7bff41b5":"#\u4e2d\u592e\u5024\u3067\u88dc\u5b8c\nQant_train_df[\"BsmtFinSF2\"] = Qant_train_df[\"BsmtFinSF2\"].fillna(Qant_train_df[\"BsmtFinSF2\"].median())\nQant_test_df[\"BsmtFinSF2\"] = Qant_test_df[\"BsmtFinSF2\"].fillna(Qant_test_df[\"BsmtFinSF2\"].median())\nprint(\"nullnum is \", Qant_train_df[\"BsmtFinSF2\"].isnull().sum())","d71d1a7e":"#\u5e73\u5747\u5024\u3067\u88dc\u5b8c\nQant_train_df[\"TotalBsmtSF\"] = Qant_train_df[\"TotalBsmtSF\"].fillna(Qant_train_df[\"TotalBsmtSF\"].mean())\nQant_test_df[\"TotalBsmtSF\"] = Qant_test_df[\"TotalBsmtSF\"].fillna(Qant_test_df[\"TotalBsmtSF\"].mean())\nprint(\"nullnum is \", Qant_train_df[\"TotalBsmtSF\"].isnull().sum())","51fd8293":"#\u5e73\u5747\u5024\u3067\u88dc\u5b8c\nQant_train_df[\"BsmtUnfSF\"] = Qant_train_df[\"BsmtUnfSF\"].fillna(Qant_train_df[\"BsmtUnfSF\"].mean())\nQant_test_df[\"BsmtUnfSF\"] = Qant_test_df[\"BsmtUnfSF\"].fillna(Qant_test_df[\"BsmtUnfSF\"].mean())\nprint(\"nullnum is \", Qant_train_df[\"BsmtUnfSF\"].isnull().sum())","9a33f98c":"#\u5e73\u5747\u5024\u3067\u88dc\u5b8c\nQant_train_df[\"BsmtFullBath\"] = Qant_train_df[\"BsmtFullBath\"].fillna(Qant_train_df[\"BsmtFullBath\"].mean())\nQant_test_df[\"BsmtFullBath\"] = Qant_test_df[\"BsmtFullBath\"].fillna(Qant_test_df[\"BsmtFullBath\"].mean())\nprint(\"nullnum is \", Qant_train_df[\"BsmtFullBath\"].isnull().sum())","d9bf7077":"#\u5e73\u5747\u5024\u3067\u88dc\u5b8c\nQant_train_df[\"BsmtHalfBath\"] = Qant_train_df[\"BsmtHalfBath\"].fillna(Qant_train_df[\"BsmtHalfBath\"].mean())\nQant_test_df[\"BsmtHalfBath\"] = Qant_test_df[\"BsmtHalfBath\"].fillna(Qant_test_df[\"BsmtHalfBath\"].mean())\nprint(\"nullnum is \", Qant_train_df[\"BsmtHalfBath\"].isnull().sum())","7301260b":"#\u5e73\u5747\u5024\u3067\u88dc\u5b8c\nQant_train_df[\"GarageYrBlt\"] = Qant_train_df[\"GarageYrBlt\"] - 1900\nQant_test_df[\"GarageYrBlt\"] = Qant_test_df[\"GarageYrBlt\"] - 1900\nQant_train_df[\"GarageYrBlt\"] = Qant_train_df[\"GarageYrBlt\"].fillna(Qant_train_df[\"GarageYrBlt\"].mean())\nQant_test_df[\"GarageYrBlt\"] = Qant_test_df[\"GarageYrBlt\"].fillna(Qant_train_df[\"GarageYrBlt\"].mean())\nprint(\"nullnum is \", Qant_train_df[\"GarageYrBlt\"].isnull().sum())","66681f10":"#\u4e2d\u592e\u5024\u3067\u88dc\u5b8c\nQant_train_df[\"GarageArea\"] = Qant_train_df[\"GarageArea\"].fillna(Qant_train_df[\"GarageArea\"].median())\nQant_test_df[\"GarageArea\"] = Qant_test_df[\"GarageArea\"].fillna(Qant_test_df[\"GarageArea\"].median())\nprint(\"nullnum is \", Qant_train_df[\"GarageArea\"].isnull().sum())","b2a9a9c4":"#\u5e73\u5747\u5024\u3067\u88dc\u5b8c\nQant_train_df[\"GarageCars\"] = Qant_train_df[\"GarageCars\"].fillna(Qant_train_df[\"LotFrontage\"].mean())\nQant_test_df[\"GarageCars\"] = Qant_test_df[\"GarageCars\"].fillna(Qant_test_df[\"LotFrontage\"].mean())\nprint(\"nullnum is \", Qant_train_df[\"GarageCars\"].isnull().sum())","eaa240f7":"print(Qual_train_df.isnull().sum())\nprint(Qual_test_df.isnull().sum())\nprint(Qant_train_df.isnull().sum())\nprint(Qant_test_df.isnull().sum())","119f7deb":"Qual_train_df.head(1460)","a23a1ac8":"Qant_train_df.head(1460)","282b39a7":"Qual_test_df.head(1460)","163e459a":"Qant_test_df.head(1460)","79f010be":"#one-hot-encording\nQual_train_df_dummy = pd.get_dummies(Qual_train_df)\nQual_test_df_dummy = pd.get_dummies(Qual_test_df)","edd9c04a":"Qual_train_df_dummy.info(240)","bfc6311a":"Qual_test_df_dummy.info(240)","53c88875":"Qual_train_df_dummy.drop(columns = [\"Utilities_NoSeWa\", \"Condition2_RRAe\", \"Condition2_RRAn\", \"Condition2_RRNn\",\n                                   \"HouseStyle_2.5Fin\", \"RoofMatl_ClyTile\", \"RoofMatl_Membran\", \"RoofMatl_Metal\",\n                                   \"RoofMatl_Roll\",\"Exterior1st_ImStucc\", \"Exterior1st_Stone\", \n                                    \"Exterior2nd_Other\", \"Heating_Floor\", \"Heating_OthW\", \n                                   \"Electrical_Mix\", \"Electrical_TA\", \"GarageQual_Ex\"], inplace = True)","7211e3d4":"#\u5e74\u4ee3\u3092\u4fee\u6b63\nQant_train_df[\"YearBuilt\"] = Qant_train_df[\"YearBuilt\"] - 1900\nQant_test_df[\"YearBuilt\"] = Qant_test_df[\"YearBuilt\"] - 1900\nQant_train_df[\"YrSold\"] = Qant_train_df[\"YrSold\"] - 1900\nQant_test_df[\"YrSold\"] = Qant_test_df[\"YrSold\"] - 1900\n","532a788a":"Qant_train_df_standard = Qant_train_df\nQant_test_df_standard = Qant_test_df\n#Qant_train_df_standard = pd.DataFrame(Qant_train_df_standard)","d2218bd5":"#\u6a19\u6e96\u5316\u524d\u306f\u4e2d\u5fc3\u304c0\u3067\u306a\u3044\uff08\"LotFrontage\"\uff09\nQant_train_df_standard = Qant_train_df_standard.values\nhist1 = Qant_train_df_standard[:,2]\nplt.hist(hist1, bins=50)","2cc2b998":"#\u91cf\u7684\u5909\u6570\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(Qant_train_df_standard)\nscaler.fit(Qant_test_df.values)\nQant_train_df_standard = scaler.transform(Qant_train_df_standard)\nQant_test_df_standard = scaler.transform(Qant_test_df)\nQant_train_df_standard[:,2].mean(),Qant_train_df_standard[:,2].std()","40aec3cd":"#\u6a19\u6e96\u5316\u8de1\u306f\u4e2d\u5fc3\u304c0\uff08\"LotFrontage\"\uff09\nhist2 = Qant_train_df_standard[:,2]\nplt.hist(hist2, bins=50)","8cab5f73":"#Qant_train_df_standard = pd.DataFrame(Qant_train_df_standard, dtype = np.float32)\n#Qant_test_df_standard = pd.DataFrame(Qant_test_df_standard, dtype = np.float32)\n#Qant_train_df_standard.drop(Qant_train_df_standard.columns[np.isnan(Qant_train_df_standard).any()], axis=1)\n#Qant_test_df_standard.drop(Qant_test_df_standard.columns[np.isnan(Qant_test_df_standard).any()], axis=1)","00839121":"#\u76f8\u95a2\u3092\u898b\u3066\u307f\u308b\nimport seaborn as sns\nQant_train_df_standard = pd.DataFrame(Qant_train_df_standard)\nQant_test_df_standard = pd.DataFrame(Qant_test_df_standard)\nsns.heatmap(Qant_train_df_standard.corr())","9a56cf63":"Qant_train_df_standard.head()","63881c5b":"Qant_test_df_standard.tail()","0161d220":"Qual_train_df_dummy.tail()","0268fc59":"Qual_test_df_dummy.tail()","ebda770a":"X_train = pd.concat([Qant_train_df_standard, Qual_train_df_dummy],axis = 1)\nX_test = pd.concat([Qant_test_df_standard, Qual_test_df_dummy],axis = 1)","998c128f":"X_train.info()","4d06a5c5":"Y_train= np.log(Y_train)","2d50e015":"print(len(X_train))\nprint(len(Y_train))\nprint(len(X_test))","d2fa9a52":"print(X_train.shape)\nprint(Y_train.shape)\nprint(X_test.shape)","0f0f7ff8":"X_train = X_train.values\nY_train = Y_train.values\nX_test = X_test.values","c8ff1a78":"from sklearn.model_selection import train_test_split\nx_train, x_Val, y_train, y_Val = train_test_split(X_train, Y_train, test_size = 0.33)","bc14d871":"from sklearn.neural_network import MLPRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\nfrom sklearn.svm import LinearSVR\nfrom sklearn.linear_model import Perceptron\n\"\"\"\n#Perceptron\nperceptron = Perceptron()\nperceptron.fit(x_train, y_train)\nprint(\"perceptron(Train) = \", round(perceptron.score(x_train, y_train) * 100, 2))\nprint(\"perceptron(Test) = \", round(perceptron.score(x_Val,y_Val) * 100, 2))\n\"\"\"\n#Neural Network\nMLP = MLPRegressor()\nMLP.fit(x_train, y_train)\nprint(\"MLP(Train) = \", round(MLP.score(x_train, y_train) * 100, 2))\nprint(\"MLP(Test) = \", round(MLP.score(x_Val, y_Val) * 100, 2))\n\n#Linear Regression\nlinreg = LinearRegression()\nlinreg = linreg.fit(x_train, y_train)\nprint(\"Linreg(Train) = \", round(linreg.score(x_train, y_train) * 100, 2))\nprint(\"Linreg(Test) = \", round(linreg.score(x_Val, y_Val) * 100, 2))\n\n#ridge\u56de\u5e30 \nrid = Ridge(alpha = 1, solver = \"cholesky\")\nrid = rid.fit(x_train, y_train)\nprint(\"Ridreg(Train) = \", round(rid.score(x_train, y_train) * 100, 2))\nprint(\"Ridreg(Test) = \", round(rid.score(x_Val, y_Val) * 100, 2))\n\n#Lasso\u56de\u5e30\nLas = Lasso(alpha = 0.1)\nLas = Las.fit(x_train, y_train)\nprint(\"Lasreg(Train) = \", round(Las.score(x_train, y_train) * 100, 2))\nprint(\"Lasreg(Test) = \", round(Las.score(x_Val, y_Val) * 100, 2))\n\n#ElasticNet\nEla = ElasticNet(alpha = 0.1, l1_ratio = 0.6)\nEla = Ela.fit(x_train, y_train)\nprint(\"Elasticreg(Train) = \", round(Ela.score(x_train, y_train) * 100, 2))\nprint(\"Elasticreg(Test) = \", round(Ela.score(x_Val, y_Val) * 100, 2))\n\n#SVMrig\nlinear_svr = LinearSVR(epsilon = 1.5)\nlinear_svr.fit(x_train, y_train)\nprint(\"linear_svr(Train) = \", round(linear_svr.score(x_train, y_train) * 100, 2))\nprint(\"linear_svr(Test) = \", round(linear_svr.score(x_Val, y_Val) * 100, 2))\n\n","9ac60813":"from sklearn.metrics import mean_squared_error, r2_score\ny_pred_MLP = MLP.predict(x_Val)\nprint(f'RMSE: {mean_squared_error(y_Val, y_pred_MLP, squared = False)}')\nprint(f'\\nScore: {r2_score(y_Val, y_pred_MLP)}')","558434f0":"import time\nfrom keras.engine.topology import Input\nfrom keras.models import Model\nfrom keras.layers import Activation, Dropout,Dense, BatchNormalization, Flatten, LeakyReLU\nfrom keras.optimizers import Adam\nfrom keras.callbacks import Callback, EarlyStopping\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.utils import np_utils, plot_model, to_categorical\n\n\ndef model(input_size = (x_train.shape[1])):\n    inputs = Input(shape = input_size)\n    fltn = Flatten()(inputs)\n    den1 = Dense(512)(fltn)\n    act1 = LeakyReLU()(den1)\n    den2 = Dense(256)(act1)\n    act2 = LeakyReLU()(den2)\n    den3 = Dense(128)(act2)    \n    act3 = LeakyReLU()(den3)\n    den4 = Dense(64)(act3)\n    act4 = LeakyReLU()(den4)    \n    drp5 = Dropout(rate=0.5)(act4)    \n    den_out = Dense(1)(drp5)\n    outs = Activation(activation = \"relu\")(den_out)\n    model = Model(inputs = inputs, outputs = outs)\n    model.compile(optimizer =Adam(lr=1e-4), loss = 'mean_squared_error', metrics = ['mse'])\n    print(model.summary())\n    return model\n\n\nstartTime = time.time()\nearly_stopping = EarlyStopping(monitor='val_loss', patience=2, verbose=1, mode='auto')\nmodel = model()\nstartTime = time.time()\nhistory = model.fit(x_train, y_train, batch_size=128, epochs=100,\n                    verbose=1, callbacks=[early_stopping], validation_data=(x_Val, y_Val))\nscore = model.evaluate(x_train, y_train, verbose=1)\nprint('Validation loss:', score[0])\nprint('Valdation accuracy:', score[1])\nprint(\"Comptation time:{0:.3f}sec\".format(time.time()- startTime))\n\nplt.figure(figsize = (20,10))\nplt.subplot(1, 2, 1)\nplt.plot(history.history[\"loss\"], color=\"black\", label = \"training\")\nplt.plot(history.history[\"val_loss\"], color = \"cornflowerblue\", label=\"Val\")\nplt.ylim(0, 10)\nplt.legend()\nplt.grid()\nplt.xlabel('epoch')\nplt.ylabel('loss')\n\n\nplt.subplot(1, 2, 2)\nplt.plot(history.history[\"mse\"], \"black\", label = \"training\")\nplt.plot(history.history[\"val_mse\"], \"cornflowerblue\", label=\"Val\")\nplt.ylim(0, 1)\nplt.legend()\nplt.grid()\nplt.xlabel('epoch')\nplt.ylabel('acc')\nplt.show()","f76bd0da":"y_pred = model.predict(x_Val)","7a27228a":"from sklearn.metrics import mean_squared_error, r2_score\nprint(f'RMSE: {mean_squared_error(y_Val, y_pred, squared = False)}')\nprint(f'\\nScore: {r2_score(y_Val, y_pred)}')","482f1568":"Y_PRED = model.predict(X_test)","fad292c9":"Y_submission = np.exp(Y_PRED)","8131a102":"submission_df = pd.DataFrame()\nsubmission_df[\"Id\"] = test_df[\"Id\"]\nsubmission_df['SalePrice'] = Y_submission\nsubmission_df[\"Id\"]=submission_df[\"Id\"].astype(\"int32\")\nsubmission_df.tail()","d7a67ae1":"submission_df.to_csv('submission.csv', index=False)","9807db10":"# \u30c7\u30fc\u30bf\u3092\u773a\u3081\u3066\u307f\u308b\npandas\u3092\u6d3b\u7528  \ndf.info, df.columns, df.unique...etc\n\n### \u884c\u6570 = 81\n### \u5217\u6570 = 1460","b22d25cd":"# NaN\u5024\u3092\u88dc\u5b8c\u3059\u308b  \n# \u65b9\u91dd2\n\uff081\uff09\u8cea\u7684\u5909\u6570\u306f\u6700\u983b\u5024\u3067\u57cb\u3081\u308b  \n\uff082\uff09\u91cf\u7684\u5909\u6570\u306f\u9069\u5b9c\u3001\u51e6\u7406\u3059\u308b\n\u2192\u6700\u983b\u5024\u3001\u5e73\u5747\u5024\u3001\u4e2d\u592e\u5024\u306e\u3069\u308c\u3067\u57cb\u3081\u308b\u304b\u3002","be076490":"# \u30e2\u30b8\u30e5\u30fc\u30eb\u8aad\u307f\u8fbc\u307f","5ed4a8b6":"# \u524d\u51e6\u7406\n## (1)\u8cea\u7684\u5909\u6570\u2192one hot encording\n## (2)\u91cf\u7684\u5909\u6570\u2192\u6b63\u898f\u5316\u3001\u6a19\u6e96\u5316","1b6c5e41":"# (2)\u91cf\u7684\u5909\u6570\u306f\u9069\u5b9c\u3001\u51e6\u7406\u3059\u308b \u2192\u6700\u983b\u5024\u3001\u5e73\u5747\u5024\u3001\u4e2d\u592e\u5024\u306e\u3069\u308c\u3067\u57cb\u3081\u308b\u304b\u3002","b58ef6f8":"# \u65b9\u91dd 1 \n## (1)\u8cea\u7684\u5909\u6570\uff08\u6570\u5024\u4ee5\u5916\uff09\u3068\u91cf\u7684\u5909\u6570\u306b\u5206\u3051\u308b\uff08\u6570\u5024\u30c7\u30fc\u30bf\uff09\n## (2)\u8457\u3057\u304f\u6570\u306e\u5c11\u306a\u3044\u30c7\u30fc\u30bf\u306f\u4f7f\u308f\u306a\u3044","f48b9b39":"# \u6700\u9069\u5316  \n## \u3068\u308a\u3042\u3048\u305a\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff08keras\uff09","c3ffc7f4":"### \u2192\"LotFrontage\", \"MasVnrArea\", \"BsmtFinSF1\", \"BsmtFinSF2\", \"BsmtUnfSF\", \"TotalBsmtSF\",\n### \"BsmtFullBath\", \"BsmtHalfBath\", \"GarageYrBlt\", \"GarageCars\", \"GarageArea\"\u3092\u88dc\u5b8c\u3059\u308b ","f71f505e":"## (2)\u91cf\u7684\u5909\u6570\u2192\u6b63\u898f\u5316\u3001\u6a19\u6e96\u5316","c992cb4f":"# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f","7a02cb17":"# \u308f\u304b\u308b\u3053\u3068\nNan\u5024\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3082\u306e\u304c\u3042\u308b\uff081460 non-null\u4ee5\u5916\u306e\u30c7\u30fc\u30bf\uff09\n\n# \u30c7\u30fc\u30bf\u30bf\u30a4\u30d7\u306e\u6307\u5b9a\u00b6\n\u5c11\u3057\u3067\u3082\u30c7\u30fc\u30bf\uff08\u30e1\u30e2\u30ea\u30fc\uff09\u30b5\u30a4\u30ba\u3092\u6291\u3048\u308b\u52aa\u529b\u3092\u3059\u308b\n\u521d\u671f\u72b6\u614b\u3067\u306f\u5168\u3066\u306e\u30c7\u30fc\u30bf\u306f8byte(float64)\u3042\u308b\u306e\u3067\u3001int8\/uint8(1byte), int16\/uint16\/float16(2byte), int32\/uint32\/float32(4byte)\u306b\u53ce\u3081\u308b\u3088\u3046cast\u3057\u3066\u3044\u304f\n\n# NA\u306e\u51e6\u7406\nNA\u306ffloat\u6271\u3044\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001int\u5206\u306b\u3064\u3044\u3066\u306ffillna\u304bdropna\u3057\u3066astype\u3067cast\u3057\u3066\u5bfe\u51e6\n## \u2192\u4e00\u5ea6\u30c7\u30fc\u30bf\u3092\u898b\u3066\u307f\u308b","8a16fe8d":"# (1)\u8cea\u7684\u5909\u6570\u306f\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\n## \u2192\u3068\u308a\u3042\u3048\u305a\u5909\u6570\u306e\u4e2d\u8eab\u3092\u898b\u3066\u307f\u308b","ceffd56d":"MSSubClass: Identifies the type of dwelling involved in the sale.\t\n\n        20\t1-STORY 1946 & NEWER ALL STYLES\n        30\t1-STORY 1945 & OLDER\n        40\t1-STORY W\/FINISHED ATTIC ALL AGES\n        45\t1-1\/2 STORY - UNFINISHED ALL AGES\n        50\t1-1\/2 STORY FINISHED ALL AGES\n        60\t2-STORY 1946 & NEWER\n        70\t2-STORY 1945 & OLDER\n        75\t2-1\/2 STORY ALL AGES\n        80\tSPLIT OR MULTI-LEVEL\n        85\tSPLIT FOYER\n        90\tDUPLEX - ALL STYLES AND AGES\n       120\t1-STORY PUD (Planned Unit Development) - 1946 & NEWER\n       150\t1-1\/2 STORY PUD - ALL AGES\n       160\t2-STORY PUD - 1946 & NEWER\n       180\tPUD - MULTILEVEL - INCL SPLIT LEV\/FOYER\n       190\t2 FAMILY CONVERSION - ALL STYLES AND AGES\n\n\nMSZoning          object\u3000\u4e00\u822c\u7684\u306a\u30a8\u30ea\u30a2\u306e\u7a2e\u5225  \n   A    Agriculture\n   \n   C    Commercial  \n   \n   FV   Floating Village Residential  \n   \n   I    Industrial  \n   \n   RH   Residential High Density  \n   \n   RL   Residential Low Density  \n   \n   RP   Residential Low Density Park   \n   \n   RM   Residential Medium Density  \n   \n   \nAlley             object\u3000\u8def\u5730\u3078\u306e\u30a2\u30af\u30bb\u30b9\uff08\u8217\u88c5\u304b\u7802\u5229\uff09  \n   \n   Grvl Gravel  \n   \n   Pave Paved  \n   \n   NA   No alley access  \n\nLotShape          object\u3000\u5168\u4f53\u7684\u306a\u6577\u5730\u306e\u5f62  \n   \n   Reg  Regular   \n   \n   IR1  Slightly irregular  \n   \n   IR2  Moderately Irregular  \n   \n   IR3  Irregular  \n  \nLandContour       object\u3000\u6577\u5730\u306e\u5e73\u5766\u3055  \n   \n   Lvl  Near Flat\/Level   \n   \n   Bnk  Banked - Quick and significant rise from street grade to building  \n   \n   HLS  Hillside - Significant slope from side to side  \n   \n   Low  Depression  \n\nUtilities         object\u3000\u30e9\u30a4\u30d5\u30e9\u30a4\u30f3\uff1f  \n   \n   AllPub   All public Utilities (E,G,W,& S)      \n   \n   NoSewr   Electricity, Gas, and Water (Septic Tank)  \n   \n   NoSeWa   Electricity and Gas Only  \n   \n   ELO  Electricity only     \n\nLotConfig         object\u3000\u5efa\u7269\u306e\u69cb\u6210  \n\u3000 \n   Inside   Inside lot  \n   \n   Corner   Corner lot  \n   \n   CulDSac  Cul-de-sac  \n   \n   FR2  Frontage on 2 sides of property  \n   \n   FR3  Frontage on 3 sides of property  \n\nLandSlope         object\u3000\u5efa\u7269\u306e\u50be\u659c  \n   \n   Gtl  Gentle slope  \n   \n   Mod  Moderate Slope  \n   \n   Sev  Severe Slope  \n\nNeighborhood      object\u3000\u5730\u57df  \n\nCondition1        object\u3000\u8fd1\u304f\u306e\u65bd\u8a2d  \n\nCondition2        object\u3000\u8fd1\u304f\u306e\u65bd\u8a2d\uff082\u3064\u4ee5\u4e0a\u3042\u308b\u5834\u5408\uff09  \n\nBldgType          object\u3000\u5efa\u7269\u306e\u30bf\u30a4\u30d7  \n   \n   1Fam Single-family Detached    \n   \n   2FmCon   Two-family Conversion; originally built as one-family dwelling  \n   \n   Duplx    Duplex  \n   \n   TwnhsE   Townhouse End Unit  \n   \n   TwnhsI   Townhouse Inside Unit  \n\nHouseStyle        object\u3000\u968e\u5efa\u3066\u3068\u5b8c\u6210\u5ea6\u5408\u3044  \n\nStreet            object\u3000\u9053\u3078\u306e\u30a2\u30af\u30bb\u30b9\uff08\u8217\u88c5\u304b\u7802\u5229\uff09  \n\nAlley             object\u3000\u8def\u5730\u3078\u306e\u30a2\u30af\u30bb\u30b9\uff08\u8217\u88c5\u304b\u7802\u5229\uff09\n\nRoofStyle         object\u3000\u5c4b\u6839\u306e\u5f62  \n\nRoofMatl          object\u3000\u5c4b\u6839\u306e\u7d20\u6750  \n\nExterior1st       object\u3000\u5916\u88c5\u6750  \n\nExterior2nd       object\u3000\u5916\u88c5\u6750\uff082\u3064\u4ee5\u4e0a\u3042\u308b\u5834\u5408\uff09 \n\nMasVnrType        object\u3000\u5185\u88c5\u6750  \n\nExterQual         object\u3000\u5916\u88c5\u306e\u8cea  \n\nExterCond         object\u3000\u73fe\u5728\u306e\u5916\u88c5\u306e\u72b6\u614b  \n\nFoundation        object\u3000\u57fa\u790e\u306e\u7a2e\u985e  \n\nBsmtQual          object\u3000\u5730\u4e0b\u5ba4\u306e\u9ad8\u3055  \n\nBsmtCond          object\u3000\u5730\u4e0b\u5ba4\u306e\u8cea  \n\nBsmtExposure      object\u3000\u3069\u308c\u3060\u3051\u5730\u4e0a\u306b\u51fa\u3066\u308b\u304b\u3000 \n\nBsmtFinType1      object\u3000\u5730\u4e0b\u5ba4\u306e\u5b8c\u6210\u3057\u305f\u9818\u57df\u306e\u8cea  \n\nBsmtFinType2      object\u3000\u5730\u4e0b\u5ba4\u306e\u5b8c\u6210\u3057\u305f\u9818\u57df\u306e\u72b6\u614b\uff08\u3082\u30572\u30bf\u30a4\u30d7\u3042\u308b\u306a\u3089\uff09 \n\nHeating           object\u3000\u6696\u623f\u306e\u7a2e\u985e  \n\nHeatingQC         object\u3000\u6696\u623f\u306e\u8cea  \n\nCentralAir        object\u3000\u30a2\u30b3\u30f3\u304c\u4e2d\u592e\u5236\u5fa1\u304b\u5426\u304b  \n\nElectrical        object\u3000\u96fb\u6c17\u306e\u30b7\u30b9\u30c6\u30e0  \n\nKitchenQual       object\u3000\u30ad\u30c3\u30c1\u30f3\u306e\u30af\u30aa\u30ea\u30c6\u30a3\u30fc  \n\nFunctional        object\u3000\u6a5f\u80fd\u6027  \n\nFireplaceQu       object\u3000\u6696\u7089\u306e\u8cea  \n\nGarageType        object\u3000\u30ac\u30ec\u30fc\u30b8\u306e\u5834\u6240  \n\nGarageFinish      object\u3000\u30ac\u30ec\u30fc\u30b8\u306e\u5185\u88c5\u306e\u5b8c\u6210\u72b6\u614b  \n\nGarageQual        object\u3000\u30ac\u30ec\u30fc\u30b8\u306e\u8cea  \n\nGarageCond        object\u3000\u30ac\u30ec\u30fc\u30b8\u306e\u72b6\u614b  \n\nPavedDrive        object\u3000\u8eca\u5eab\u304b\u3089\u9053\u8def\u307e\u3067\u306e\u9053\u306e\u8217\u88c5\u72b6\u614b  \n\nPoolQC            object\u3000\u30d7\u30fc\u30eb\u306e\u8cea  \n\nFence             object\u3000\u30d5\u30a7\u30f3\u30b9\u306e\u6750\u8cea  \n\nMiscFeature       object\u3000\u305d\u306e\u4ed6\u306e\u7279\u5fb4  \n\nSaleType          object\u3000\u652f\u6255\u3044\u65b9\u6cd5  \n\nSaleCondition     object\u3000\u58f2\u308a\u65b9\u306e\u7a2e\u985e  \n\nId                 int64 -  \n\nMSSubClass         int64\u3000\u5efa\u7269\u306e\u7b49\u7d1a  \n\nLotFrontage      float64\u3000\u9053\u304b\u3089\u6577\u5730\u307e\u3067\u306e\u8ddd\u96e2  \n\nLotArea            int64\u3000\u6577\u5730\u9762\u7a4d   \n\nOverallQual        int64\u3000\u5efa\u7269\u306e\u6750\u6599\u306e\u8cea\u3000\u3000\n\n  10   Very Excellent  \n   \n   9    Excellent  \n   \n   8    Very Good  \n   \n   7    Good  \n   \n   6    Above Average  \n   \n   5    Average  \n   \n   4    Below Average  \n   \n   3    Fair  \n   \n   2    Poor  \n   \n   1    Very Poor  \n\nOverallCond        int64\u3000\u5bb6\u306e\u8cea  \n\nYearBuilt          int64\u3000\u5efa\u8a2d\u5e74  \n\nYearRemodAdd       int64\u3000\u5efa\u3066\u66ff\u3048\u5e74\u3000 \n\nMasVnrArea       float64\u3000\u5185\u88c5\u9762\u7a4d   \n\nBsmtFinSF1         int64\u3000\u5b8c\u6210\u3057\u305f\u5730\u4e0b\u5ba4\u306e\u9762\u7a4d  \n\nBsmtFinSF2         int64\u3000\u5b8c\u6210\u3057\u305f\u5730\u4e0b\u5ba4\u306e\u9762\u7a4d  \n\nBsmtUnfSF          int64\u3000\u5b8c\u6210\u306e\u5730\u4e0b\u5ba4\u306e\u9762\u7a4d  \n\nTotalBsmtSF        int64\u3000\u5730\u4e0b\u5ba4\u306e\u5ef6\u3079\u5e8a\u9762\u7a4d  \n\n1stFlrSF           int64\u3000\u4e00\u968e\u306e\u9762\u7a4d  \n\n2ndFlrSF           int64\u3000\u4e8c\u968e\u306e\u9762\u7a4d  \n\nLowQualFinSF       int64\u3000\u4f4e\u54c1\u8cea\u3067\u4ed5\u4e0a\u3052\u305f\u9762\u7a4d  \n\nGrLivArea          int64\u3000\u4f4f\u5c45\u30a8\u30ea\u30a2\u306e\u5ef6\u3079\u5e8a\u9762\u7a4d  \n\nBsmtFullBath       int64\u3000\u5730\u4e0b\u306e\u30d0\u30b9\u30eb\u30fc\u30e0\u306e\u6570  \n\nBsmtHalfBath       int64\u3000\u5730\u4e0b\u306e\u30b7\u30e3\u30ef\u30fc\u30eb\u30fc\u30e0\u306e\u6570  \n\nFullBath           int64\u3000\u5730\u4e0a\u304b\u3089\u4e0a\u306e\u968e\u306e\u30d0\u30b9\u30eb\u30fc\u30e0   \n\nHalfBath           int64\u3000\u5730\u4e0a\u304b\u3089\u4e0a\u306e\u968e\u306e\u30b7\u30e3\u30ef\u30fc   \n\nBedroomAbvGr       int64\u3000\u5730\u4e0a\u304b\u3089\u4e0a\u306e\u30d9\u30c3\u30c8\u30eb\u30fc\u30e0\u306e\u6570  \n\nKitchenAbvGr       int64\u3000\u5730\u4e0a\u304b\u3089\u4e0a\u306e\u30ad\u30c3\u30c1\u30f3\u306e\u6570  \n\nTotRmsAbvGrd       int64\u3000\u5730\u4e0a\u968e\u306e\u90e8\u5c4b\u306e\u6570  \n\nFireplaces         int64\u3000\u6696\u7089\u306e\u6570  \n\nGarageYrBlt      float64\u3000\u30ac\u30ec\u30fc\u30b8\u304c\u3067\u304d\u3066\u304b\u3089\u306e\u5e74\u6570  \n\nGarageCars         int64\u3000\u30ac\u30ec\u30fc\u30b8\u306e\u30b5\u30a4\u30ba\uff08\u53f0\u6570\uff09 \n\nGarageArea         int64\u3000\u30ac\u30ec\u30fc\u30b8\u306e\u9762\u7a4d  \n\nWoodDeckSF         int64\u3000\u30a6\u30c3\u30c9\u30c7\u30c3\u30ad\u306e\u9762\u7a4d  \n\nOpenPorchSF        int64\u3000\u7384\u95a2\u306e\u5916\u9762\u7a4d\uff08\u30d5\u30ed\u30f3\u30c8\u30dd\u30fc\u30c1\uff09  \n\nEnclosedPorch      int64\u3000\u7384\u95a2\u306e\u9762\u7a4d\uff08\u56f2\u308f\u308c\u305f\u30dd\u30fc\u30c1\uff1f\uff09 \n\n3SsnPorch          int64\u30003\u30b7\u30fc\u30ba\u30f3\u904a\u3079\u3061\u3083\u3046\u304f\u3089\u3044\u3067\u304b\u3044\u30dd\u30fc\u30c1\uff1f  \n\nScreenPorch        int64\u3000\u30ac\u30e9\u30b9\u5f35\u308a\u306e\u56f2\u308f\u308c\u305f\u30dd\u30fc\u30c1  \n\nPoolArea           int64\u3000\u30d7\u30fc\u30eb\u306e\u9762\u7a4d  \n\nMiscVal            int64\u3000\u305d\u306e\u4ed6\u306e\u7279\u6027\u306e\u4fa1\u683c  \n\nMoSold             int64\u3000\u6708\u306e\u58f2\u308a\u4e0a\u3052\u6570  \n\nYrSold             int64\u3000\u5e74\u9593\u58f2\u308a\u4e0a\u3052  \n\nSalePrice          int64\u3000  \n"}}