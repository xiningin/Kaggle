{"cell_type":{"596f8865":"code","45f0ecf5":"code","6cad50a4":"code","94079028":"code","a3c58dd0":"code","8611d0a8":"code","2434d325":"code","3e9fe745":"code","77128f69":"code","7a11da7d":"code","eacc7bc6":"code","5ee29fc0":"code","5bf77d31":"code","238b58d9":"code","9e7fc1a0":"code","927fa934":"code","d7a8c334":"code","baf93bcb":"code","d949fdac":"code","5bd9d68b":"code","fb79e72b":"code","9d865439":"code","8553e7d9":"code","e8e7443c":"markdown","3a9d89d1":"markdown","7515c0d4":"markdown","96fdb0e0":"markdown","e9d8b1d1":"markdown","5830e774":"markdown","59035452":"markdown","f324ed6f":"markdown","b06dce0a":"markdown","b20e7f8b":"markdown","d873f82d":"markdown","0b14e1b2":"markdown","4113916d":"markdown","52a9a241":"markdown","a1e27cc0":"markdown","96e7cbfd":"markdown"},"source":{"596f8865":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        break\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","45f0ecf5":"img_dir = '..\/input\/image-classification\/images\/images'\nval_dir = '..\/input\/image-classification\/validation\/validation'","6cad50a4":"! pip install -q tf-nightly","94079028":"import matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport PIL\nimport tensorflow as tf\n\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.models import Sequential\ntf.__version__","a3c58dd0":"# change as you want\nimage_size = (180, 180)\nimg_height = 180\nimg_width = 180\nbatch_size = 32\n#32","8611d0a8":"train_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    directory=img_dir,\n    validation_split=0.2,\n    subset=\"training\",\n    seed=1007,\n    image_size=image_size,\n    batch_size=batch_size,\n    shuffle=True\n)","2434d325":"train_ds.class_names","3e9fe745":"val_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    directory=img_dir,\n    validation_split=0.2,\n    subset=\"validation\",\n    seed=1007,\n    image_size=image_size,\n    batch_size=batch_size,\n    shuffle=True\n)","77128f69":"test_ds = tf.keras.preprocessing.image_dataset_from_directory(\n    directory=val_dir,\n    validation_split=0.9999,\n    subset=\"validation\",\n    seed=1007,\n    image_size=image_size,\n    batch_size=batch_size,\n    shuffle=True\n)","7a11da7d":"# put your code here \nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(15, 15))\nfor images, labels in train_ds.take(1):\n  for i in range(9):\n    ax = plt.subplot(3, 3, i + 1)\n    plt.imshow(images[i].numpy().astype(\"uint8\"))\n    plt.title(train_ds.class_names[labels[i]])\n    plt.axis(\"off\")","eacc7bc6":"for image_batch, labels_batch in train_ds:\n  print(image_batch.shape)\n  print(labels_batch.shape)\n  break","5ee29fc0":"# put your code here\nnum_classes = 4\n\nmodel = Sequential([\n  layers.experimental.preprocessing.Rescaling(1.\/255, input_shape=(img_height, img_width, 3)),\n  layers.Conv2D(4, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Dropout(0.2),\n  layers.Conv2D(8, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Dropout(0.2),\n  layers.Conv2D(16, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Dropout(0.2),\n  layers.Conv2D(32, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Dropout(0.2),\n  layers.Conv2D(64, 3, padding='same', activation='relu'),\n  layers.MaxPooling2D(),\n  layers.Dropout(0.2),\n  layers.Flatten(),\n  layers.Dense(128, activation='relu'),\n  layers.Dense(num_classes)\n])","5bf77d31":"model.compile(optimizer='adam',\n              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              metrics=['accuracy'])","238b58d9":"model.summary()","9e7fc1a0":"epochs=30\nhistory = model.fit(\n  train_ds,\n  validation_data=val_ds,\n  epochs=epochs,\n  #batch_size = batch_size\n)","927fa934":"print('Done')","d7a8c334":"# put your code here\nacc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\n\nloss=history.history['loss']\nval_loss=history.history['val_loss']\n\nepochs_range = range(epochs)\n\nplt.figure(figsize=(8, 8))\nplt.subplot(1, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(1, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","baf93bcb":"!mkdir -p saved_modelimg\nmodel.save('saved_modelimg\/my_modelimg') ","d949fdac":"# my_model directory\n!ls saved_modelimg\n\n# Contains an assets folder, saved_model.pb, and variables folder.\n!ls saved_modelimg\/my_modelimg","5bd9d68b":"new_model = tf.keras.models.load_model('saved_modelimg\/my_modelimg')\n\n# Check its architecture\nnew_model.summary()","fb79e72b":"test_dir = '..\/input\/image-classification\/test\/test\/classify'\nos.listdir(test_dir)","9d865439":"# put your code here \nfrom keras.preprocessing import image\nlist_img = os.listdir(test_dir)\nimgIs =  '..\/input\/image-classification\/test\/test\/classify\/'+list_img[1]\ntest_image = []#image.load_img(imgIs, target_size=(img_height, img_width))\ninfo = []\nfor i in list_img:\n    test_image = image.load_img('..\/input\/image-classification\/test\/test\/classify\/'+i, target_size=(img_height, img_width))\n    img_array = keras.preprocessing.image.img_to_array(test_image)\n    img_array = tf.expand_dims(img_array, 0) # Create a batch\n    predictions = model.predict(img_array)\n    score = tf.nn.softmax(predictions[0])\n    info.append([img_array,score])\n    \nj=0\nfor images, labels in info:\n    plt.figure(figsize=(15, 15))\n    ax = plt.subplot(3, 3, j + 1)\n    plt.imshow(images[0].numpy().astype(\"uint8\"))\n    plt.title(\"This image most likely belongs to {} with a {:.2f} percent confidence.\".format(train_ds.class_names[np.argmax(labels)], 100 * np.max(score)))\n    plt.axis(\"off\")","8553e7d9":"# put your code here \n\n##sunflower_url2 = \"https:\/\/storage.googleapis.com\/download.tensorflow.org\/example_images\/592px-Red_sunflower.jpg\"\nsunflower_url = \"https:\/\/upload.wikimedia.org\/wikipedia\/commons\/6\/6a\/Mona_Lisa.jpg\"\n\nsunflower_path = tf.keras.utils.get_file('image11', origin=sunflower_url)\n\nimg = keras.preprocessing.image.load_img(\n    sunflower_path, target_size=(img_height, img_width)\n)\nimg_array = keras.preprocessing.image.img_to_array(img)\nimg_array = tf.expand_dims(img_array, 0) # Create a batch\n\npredictions = model.predict(img_array)\nscore = tf.nn.softmax(predictions[0])\n\nprint(\n    \"This image most likely belongs to {} with a {:.2f} percent confidence.\"\n    .format(train_ds.class_names[np.argmax(score)], 100 * np.max(score))\n)\n\nplt.figure(figsize=(5, 5))\nplt.imshow(img_array[0].numpy().astype(\"uint8\"))\n#plt.title(train_ds.class_names[labels[i]])\nplt.axis(\"off\")","e8e7443c":"# model","3a9d89d1":"# test on some images from \n\n```..\/input\/image-classification\/test\/test\/classify```","7515c0d4":"# test on 3 external images","96fdb0e0":"# validation data","e9d8b1d1":"# visualize (plot) some images from training data with their labels","5830e774":"# import TF & check the version ","59035452":"# plot error and accuracy (train and validation)","f324ed6f":"# Install TF nighlty","b06dce0a":"# Model summary","b20e7f8b":"# Data Directories","d873f82d":"# Compile the model","0b14e1b2":"# image size and batch size","4113916d":"# training data","52a9a241":"# test data","a1e27cc0":"# Train the model","96e7cbfd":"# Save model"}}