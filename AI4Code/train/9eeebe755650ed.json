{"cell_type":{"1fe6b65d":"code","d742ed88":"code","84076784":"code","ea855741":"code","d1c70c34":"code","d4ce21ef":"code","b460f635":"code","d4ed00f4":"code","8507d192":"code","61cebb5b":"code","e849dca4":"code","bf4ac8c6":"code","35c3e68c":"code","46b2ea4d":"code","64c13f55":"code","03f45281":"code","bbead6cc":"code","b17f05b0":"code","76109c6b":"code","e27d653e":"code","d9159f4f":"code","44fc8738":"markdown","cd290620":"markdown","58a7afb2":"markdown","496590c2":"markdown","34e5dfa4":"markdown","d043093c":"markdown","a11c7160":"markdown","f877f917":"markdown","0d461cb6":"markdown","dc77a7dd":"markdown","57fa3369":"markdown","c701985a":"markdown","75df7cd4":"markdown"},"source":{"1fe6b65d":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport os\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")\nprint(os.listdir(\"..\/input\"))","d742ed88":"df = pd.read_csv(r'..\/input\/heart.csv')\ndf.head()","84076784":"df.shape","ea855741":"df.isnull().sum()","d1c70c34":"df.dtypes","d4ce21ef":"df.describe()","b460f635":"plt.style.use('fivethirtyeight')","d4ed00f4":"sns.pairplot(df , hue = 'target' ,\n             vars = ['age' , 'trestbps' , 'chol' , 'thalach' , 'oldpeak'] )\nplt.show()","8507d192":"plot_data = ['cp' , 'fbs' , 'restecg' , 'exang' , 'slope' , 'ca' ,'thal' , 'target']\nplt.figure(1 , figsize = (15 , 10))\nn = 0\nfor i in plot_data:\n    n += 1\n    plt.subplot(2 , 4 , n)\n    plt.subplots_adjust(hspace= 0.5 , wspace =0.5)\n    sns.countplot(x = i , hue = 'sex' , data = df )\n    plt.legend()\nplt.show()","61cebb5b":"plot_data = ['cp' , 'fbs' , 'restecg' , 'exang' , 'slope' , 'ca' ,'thal' , 'sex']\nplt.figure(1 , figsize = (15 , 10))\nn = 0\nfor i in plot_data:\n    n += 1\n    plt.subplot(2 , 4 , n)\n    plt.subplots_adjust(hspace= 0.5 , wspace =0.5)\n    sns.countplot(x = i , hue = 'target' , data = df )\n    plt.legend()\nplt.show()","e849dca4":"plt.figure(1 , figsize = (15 , 5))\nsns.distplot(a = df['age'] , bins = 40 , color = 'red' )\nplt.title('Histogram of Age')\nplt.show()","bf4ac8c6":"plot_data = ['trestbps' , 'chol' , 'thalach' , 'oldpeak' ]\nplt.figure(1 , figsize = (15 , 8))\nn = 0\nfor x in plot_data:\n    n += 1\n    plt.subplot(2 , 2 , n)\n    sns.distplot(a = df[x] , bins = 50  , color = 'red')  \n    \nplt.show()","35c3e68c":"plot_data = ['trestbps' , 'chol' , 'thalach' , 'oldpeak' ]\nplt.figure(1 , figsize = (15 , 8))\nn = 0\nfor x in plot_data:\n    n += 1\n    plt.subplot(2 , 2 , n)\n    sns.distplot(a = df[x][df['sex'] == 1] , bins = 50  , color = 'red' , label = 'male')\n    sns.distplot(a = df[x][df['sex'] == 0] , bins = 50 , label ='female' )\n    plt.legend()\n    \nplt.show()","46b2ea4d":"plot_data = ['trestbps' , 'chol' , 'thalach' , 'oldpeak' ]\nplt.figure(1 , figsize = (15 , 8))\nn = 0\nfor x in plot_data:\n    n += 1\n    plt.subplot(2 , 2 , n)\n    sns.distplot(a = df[x][df['target'] == 1] , bins = 50  , color = 'red' ,\n                 label = 'heart disease = True')\n    sns.distplot(a = df[x][df['target'] == 0] , bins = 50 ,\n                 label ='heart disease = False' )\n    plt.legend()\n    \nplt.show()","64c13f55":"plt.figure(1 , figsize = (15 , 10 ))\nplt.subplot(2 , 1 , 1)\nplt.scatter(x = 'age' , y = 'trestbps' , data = df.where(df['trestbps'] <= 135) ,\n            s = 200)\nplt.scatter(x = 'age' , y = 'trestbps' , data = df.where(df['trestbps'] > 135) ,\n            s = 200)\nplt.scatter(x = 'age' , y = 'trestbps' , data = df.where(df['trestbps'] < 83) ,\n            s = 200)\nfor critical in [84 , 136]:\n    plt.plot(df['age'] , np.ones((df.shape[0] , 1))*critical , 'r-' , alpha = 0.5)\n\nplt.annotate('dangerously high blood pressure line.', xy=(30, 135), xytext=(28, 160),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            )\nplt.annotate('dangerously low blood pressure line.', xy=(76, 84), xytext=(68, 100),\n            arrowprops=dict(facecolor='black', shrink=0.05),\n            )\nplt.xlabel('age')\nplt.ylabel('resting blood pressure')\n\nplt.subplot(2 , 1 , 2)\nplt.scatter(x = 'age' , y = 'trestbps' , s = 200 , data = df[df['target'] == 0] ,\n            label = 'Heart disease == False' , alpha = 0.5)\nplt.scatter(x = 'age' , y = 'trestbps' , s = 200 , data = df[df['target'] == 1] ,\n           label = 'Heart disease == True' , alpha = 0.5)\nplt.xlabel('age')\nplt.ylabel('resting blood pressure')\nplt.legend()\nplt.show()","03f45281":"plt.figure(1 , figsize = (15 , 10))\nplt.subplot(2, 1 , 1)\nplt.scatter(x = 'age' , y = 'chol' , data = df , s = 200 ,\n           alpha = 0.5 , label = 'normal serum cholesterol')\nplt.scatter(x = 'age' , y = 'chol' , data = df.where(df['chol'] > 200) , s = 200 ,\n           alpha = 0.5 , label = 'high serum cholesterol')\nplt.plot(df['age'] , np.ones((df.shape[0] , 1))*221 , 'r-' , alpha =0.5 )\nplt.annotate('danger line', xy=(32, 221), xytext=(30,400 ),\n            arrowprops=dict(facecolor='black', shrink=0.05)\n            )\nplt.xlabel('age')\nplt.ylabel('serum cholesterol in mg')\nplt.legend()\n\nplt.subplot(2 , 1 , 2)\nplt.subplots_adjust(hspace = 0.5 , wspace = 0.5)\nfor i in [0 , 1]:\n    plt.scatter(x = 'age' , y = 'chol' , data = df.where(df['target'] == i) , s = 200 , \n               alpha = 0.5 , label = i )\nplt.xlabel('age')\nplt.ylabel('serum cholesterol in mg')\nplt.title('0 = No Heart disease , 1 = Heart disease')\nplt.legend()\nplt.show()","bbead6cc":"def bpm_issue(age , thalach):\n    bpm = []\n    for a , t in zip(age , thalach):\n        if t > (220 - a):\n            bpm.append(1)\n        else :\n            bpm.append(0)\n    return bpm\nbpm = bpm_issue(df['age'] , df['thalach'])\ndf['bpm'] = bpm","b17f05b0":"plt.figure(1 , figsize = (15 , 10))\nplt.subplot(2 , 1 , 1)\nplt.scatter(x = 'age' , y = 'thalach' , data = df[df['bpm'] == 0],\n            label = 'normal' , alpha = 0.5 , s = 200)\nplt.scatter(x = 'age' , y = 'thalach' , data = df[df['bpm'] == 1],\n            label = 'dangerously high heart beat rate' , s = 200)\nplt.xlabel('age')\nplt.ylabel('maximum heart rate achieved')\nplt.legend()\nplt.subplot(2 , 1 , 2 )\nplt.scatter(x = 'age' , y = 'thalach' , data = df[df['target'] == 0],\n           label = 'heart disease = False' , alpha = 0.5 , s = 200)\n\nplt.scatter(x = 'age' , y = 'thalach' , data = df[df['target'] == 1],\n           label = 'heart disease = True' , alpha = 0.5 , s = 200)\nplt.xlabel('age')\nplt.ylabel('maximum heart rate achieved')\nplt.legend()\nplt.show()","76109c6b":"plt.figure(1 , figsize  = (15 , 10))\nplt.subplot(2 , 1 , 1)\nplt.scatter(x = 'age' , y = 'oldpeak' , data = df.where(df['oldpeak'] >= 2) , s = 200,\n           alpha = 0.5 , label = 'normal')\nplt.plot(df['age'] , np.ones((df.shape[0] , 1))*2 , '-')\nplt.scatter(x = 'age' , y = 'oldpeak' , data = df.where(df['oldpeak'] < 2) , s = 200,\n           alpha = 0.5 , label = 'does not indicates a reversible ischaemia')\n\nplt.annotate('ST depression of at least 2 mm to significantly indicate reversible ischaemia.', \n             xy=(30, 2), xytext=(30, 4),arrowprops=dict(facecolor='black', shrink=0.05))\nplt.xlabel('age')\nplt.ylabel('oldpeak')\nplt.legend()\n\nplt.subplot(2 , 1 , 2)\nplt.scatter(x = 'age' ,y = 'oldpeak' , data = df.where(df['target'] == 0 ) , s = 200 ,\n           marker = 'o' , alpha = 0.5 , label = 'heart disease == False')\nplt.scatter(x = 'age' ,y = 'oldpeak' , data = df.where(df['target'] == 1 ) , s = 200 ,\n           marker = '+' , label = 'heart disease == True' )\nplt.xlabel('age')\nplt.ylabel('oldpeak')\nplt.legend()\nplt.show()","e27d653e":"from sklearn.ensemble import RandomForestClassifier as rfc\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix , accuracy_score , classification_report\nx = df.iloc[: , :-1].values\ny = df.iloc[: , -1].values\nx_train , x_test , y_train , y_test = train_test_split(x , y ,\n                                                      test_size = 0.3,\n                                                      random_state = 134)\n# import random\n# def tunner(n_estimators = [] , max_features = [] , \n#           max_dept = [] , min_samples_split = [] , \n#           min_samples_leaf = []  , iteration = 20 ):\n#     acc = []\n#     iterr = []\n#     params = dict()\n#     for i in range(iteration):\n#         algo = rfc(min_samples_split = random.choice(min_samples_split) ,\n#                   min_samples_leaf = random.choice(min_samples_leaf) , \n#                   max_depth = random.choice(max_dept) , \n#                   max_features = random.choice(max_features), \n#                   n_estimators = random.choice(n_estimators))\n#         algo.fit(x_train , y_train)\n#         pred =  algo.predict(x_test)\n#         acc.append(accuracy_score(y_test , pred))\n#         iterr.append(i)\n#         params[i] = algo.get_params()\n    \n#     print('Best Params :\\n{}\\nAccuracy\\n{}'.format(params.get(acc.index(max(acc))),\n#                                                    max(acc)))\n   \n\n# tunner(n_estimators = [  1000 , 500 , 100 , 10 , 50 ],\n#        max_features = [9 , 7 , 2 , 3 , 12 , 13 , 5],\n#        max_dept = [8 , 9 , 5 , 20 , 16 , 14 , 30],\n#        min_samples_split = [2 , 10 , 3, 5 , 6],\n#        min_samples_leaf = [2 , 10 , 3 , 5 , 6],\n#       iteration = 20)\n'''\noutput of tunner()\nBest Params :\n{'bootstrap': True, 'class_weight': None, 'criterion': 'gini', 'max_depth': 5,\n'max_features': 12, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0,\n'min_impurity_split': None, 'min_samples_leaf': 5, 'min_samples_split': 5,\n'min_weight_fraction_leaf': 0.0, 'n_estimators': 50, 'n_jobs': None, \n'oob_score': False, 'random_state': None, 'verbose': 0, 'warm_start': False}\n\nAccuracy\n0.945054945054945\n'''","d9159f4f":"algo = rfc(bootstrap = True , class_weight = None , criterion = 'gini' , max_depth = 5,\n          max_features = 12 , max_leaf_nodes = None , min_impurity_decrease = 0.0 , \n          min_impurity_split = None , min_samples_leaf = 5 , min_samples_split = 5 , \n          min_weight_fraction_leaf = 0.0 , n_estimators = 50 , n_jobs = None , \n          oob_score = False , random_state = None , verbose = 0 , warm_start = False )\n\nalgo.fit(x_train , y_train)\npreds = algo.predict(x_test)\n\nprint('confusion matrix :  \\n{}\\n\\nreport : \\n{}\\n\\naccuracy : {}'.format(confusion_matrix(y_test , preds),\n                                                                     classification_report(y_test,preds),\n                                                                     accuracy_score(y_test , preds)))","44fc8738":"## Correlation Plot","cd290620":"## Resting Blood pressure ( trestbps ) : -\nBlood pressure refers to the force exerted by circulating blood on the walls of blood vessels and constitutes one of the principal vital signs. The pressure of the circulating blood decreases as blood moves through arteries, arterioles, capillaries, and veins; the term blood pressure generally refers to arterial pressure, i.e., the pressure in the larger arteries, arteries being the blood vessels which take blood away from the heart.\n\n<b>Age    Female   Male<\/b> <br>\n25-29\t120\/80\t121\/80 <br>\n30-35\t122\/81\t123\/82 <br>\n36-39\t123\/82\t124\/83 <br>\n40-45\t124\/83\t125\/83 <br>\n46-49\t126\/84\t127\/84 <br>\n50-55\t129\/85\t128\/85 <br>\n56-59\t130\/86\t131\/87 <br>\n60+\t13     4\/84\t    135\/88 <br>","58a7afb2":"# Predictive Modeling\n### Algorithm used : -  Random Forest Classifier \n### Technique used to select parameters : - \nRandom selection of  hyper - parameters from a list of hyper - parameters and settling down with the hyper -  parameters which gives a high Accuracy in predict step on test dataset . (As there is no minor class in this problem there is no hesitation using accuracy to select parameters and then check the confusion matrix.)","496590c2":"## Histograms of trestbps , chol , thalach and oldpeak w.r.t sex","34e5dfa4":"## Histogram of trestbps , chol , thalach and oldpeak","d043093c":"## ST depression ( oldpeak )\nST depression refers to a finding on an electrocardiogram,[1][2] wherein the trace in the ST segment is abnormally low below the baseline.\n\nST segment depression may be determined by measuring the vertical distance between the patient's trace and the isoelectric line at a location 2-3 millimeters from the QRS complex.\n\nIt is significant if it is more than 1 mm in V5-V6, or 1.5 mm in AVF or III.\n\nIn a cardiac stress test, an ST depression of at least 1 mm after adenosine administration indicates a reversible ischaemia, while an exercise stress test requires an ST depression of at least 2 mm to significantly indicate reversible ischaemia.","a11c7160":"## Maximum heart rate achieved ( thalach )\nAn estimate of a person's maximum age-related heart rate can be obtained by subtracting the person's age from 220. For example, for a 50-year-old person, the estimated maximum age-related heart rate would be calculated as 220 - 50 years = 170 beats per minute (bpm).","f877f917":"## Serum Cholesterol ( chol )\nCholesterol is a type of body fat, or lipid. A serum cholesterol level is a measurement of certain elements in the blood, including the amount of high- and low-density lipoprotein cholesterol (HDL and LDL) in a person's blood.\n\n### Females aged 20 and older\t125\u2013200 mg\/dL\t\n### Males aged 20 and older\t      125\u2013200 mg\/dL","0d461cb6":"## Histograms of trestbps , chol , thalach and oldpeak w.r.t target","dc77a7dd":"## Histograms","57fa3369":"## Some informative count plots w.r.t target ","c701985a":"## Some informative count plots w.r.t to sex","75df7cd4":"<center><h1>Heart Disease analysis and Predictive modeling<\/h1><\/center>"}}