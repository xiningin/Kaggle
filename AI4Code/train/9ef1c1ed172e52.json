{"cell_type":{"c4b2b873":"code","7ab92fdb":"code","400439f0":"code","d2b2b249":"code","cf7e486a":"code","dccd6997":"code","79d8b75b":"code","93df30d7":"code","d2f21665":"code","7fd82541":"code","c32a602a":"code","d63711d5":"code","9565f9fc":"code","53d6e3ba":"code","7e016c80":"code","f77ffa5e":"code","18fd352d":"code","ff7af96e":"code","0bdf6064":"code","bf4b2be6":"code","5fc5c9d6":"code","3cbbaaef":"code","a3bd7d62":"code","d1cc67d4":"code","2c34da08":"code","d428d070":"code","b4e6d69b":"code","c7cdb9f9":"code","74e7c11a":"code","4d2e6ea4":"code","2c78edc8":"code","6bc9faa2":"code","a147ed85":"code","9e60f67c":"code","e3ee4217":"code","419ecca7":"code","fb1ec14e":"code","2edfee83":"code","e55a14a1":"markdown","2d0fd2e1":"markdown"},"source":{"c4b2b873":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7ab92fdb":"import pandas as pd\nimport numpy as np\nimport plotly.express as px\nimport matplotlib.pyplot as plt\n","400439f0":"book_example = pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=0')\ntrade_example =  pd.read_parquet('..\/input\/optiver-realized-volatility-prediction\/trade_train.parquet\/stock_id=0')\nstock_id = '0'\nbook_example = book_example[book_example['time_id']==5]\nbook_example.loc[:,'stock_id'] = stock_id\ntrade_example = trade_example[trade_example['time_id']==5]\ntrade_example.loc[:,'stock_id'] = stock_id","d2b2b249":"book_example","cf7e486a":"plt.plot(book_example['seconds_in_bucket'], book_example['bid_price1'] )  # Plot the chart\nplt.show() ","dccd6997":"trade_example.head()","79d8b75b":"#Weighted Avg. Price\n\nbook_example['wap'] = (book_example['bid_price1'] * book_example['ask_size1'] +\n                                book_example['ask_price1'] * book_example['bid_size1']) \/ (\n                                       book_example['bid_size1']+ book_example['ask_size1'])","93df30d7":"book_example","d2f21665":"plt.plot(book_example['seconds_in_bucket'], book_example['wap'] )  # Plot the chart\nplt.show() ","7fd82541":"def log_return(list_stock_prices):\n    return np.log(list_stock_prices).diff() ","c32a602a":"book_example['log_return'] = log_return(book_example['wap'])\nbook_example = book_example[~book_example['log_return'].isnull()]","d63711d5":"book_example.head()","9565f9fc":"plt.plot(book_example['seconds_in_bucket'], book_example['log_return'] )  # Plot the chart\nplt.show() ","53d6e3ba":"def realized_volatility(series_log_return):\n    return np.sqrt(np.sum(series_log_return**2))\nrealized_vol = realized_volatility(book_example['log_return'])\nprint(f'Realized volatility for stock_id 0 on time_id 5 is {realized_vol}')","7e016c80":"import os\nfrom sklearn.metrics import r2_score\nimport glob\nlist_order_book_file_train = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/*')","f77ffa5e":"list_order_book_file_train","18fd352d":"def realized_volatility_per_time_id(file_path, prediction_column_name):\n    df_book_data = pd.read_parquet(file_path)\n    df_book_data['wap'] =(df_book_data['bid_price1'] * df_book_data['ask_size1']+df_book_data['ask_price1'] * df_book_data['bid_size1'])  \/ (\n                                      df_book_data['bid_size1']+ df_book_data[\n                                  'ask_size1'])\n    df_book_data['log_return'] = df_book_data.groupby(['time_id'])['wap'].apply(log_return)\n    df_book_data = df_book_data[~df_book_data['log_return'].isnull()]\n    df_realized_vol_per_stock =  pd.DataFrame(df_book_data.groupby(['time_id'])['log_return'].agg(realized_volatility)).reset_index()\n    df_realized_vol_per_stock = df_realized_vol_per_stock.rename(columns = {'log_return':prediction_column_name})\n    stock_id = file_path.split('=')[1]\n    df_realized_vol_per_stock['row_id'] = df_realized_vol_per_stock['time_id'].apply(lambda x:f'{stock_id}-{x}')\n    return df_realized_vol_per_stock[['row_id',prediction_column_name]]","ff7af96e":"df_book_data1 = pd.read_parquet('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet\/stock_id=97')\ndf_book_data1\ndf_book_data1['wap'] =(df_book_data1['bid_price1'] * df_book_data1['ask_size1']+df_book_data1['ask_price1'] * df_book_data1['bid_size1'])  \/ (\n                                      df_book_data1['bid_size1']+ df_book_data1[\n                                  'ask_size1'])","0bdf6064":"df_book_data1['log_return'] = df_book_data1.groupby(['time_id'])['wap'].apply(log_return)\n","bf4b2be6":"df_book_data1 = df_book_data1[~df_book_data1['log_return'].isnull()]\ndf_realized_vol_per_stock1 =  pd.DataFrame(df_book_data1.groupby(['time_id'])['log_return'].agg(realized_volatility)).reset_index()\n","5fc5c9d6":"df_realized_vol_per_stock1 = df_realized_vol_per_stock1.rename(columns = {'log_return':'pred'})\ndf_realized_vol_per_stock1['row_id'] = df_realized_vol_per_stock1['time_id'].apply(lambda x:f'{stock_id}-{x}')\n\n\ndf_realized_vol_per_stock1","3cbbaaef":"def past_realized_volatility_per_stock(list_file,prediction_column_name):\n    df_past_realized = pd.DataFrame()\n    for file in list_file:\n        df_past_realized = pd.concat([df_past_realized,\n                                     realized_volatility_per_time_id(file,prediction_column_name)])\n    return df_past_realized\n\ndf_past_realized_train = past_realized_volatility_per_stock(list_file=list_order_book_file_train,\n                                                           prediction_column_name='pred')\n","a3bd7d62":"df_past_realized_train","d1cc67d4":"train['row_id'] = train['stock_id'].astype(str) + '-' + train['time_id'].astype(str)\ntrain = train[['row_id','target']]\n","2c34da08":"train","d428d070":"df_joined = train.merge(df_past_realized_train[['row_id','pred']], on = ['row_id'], how = 'left')","b4e6d69b":"df_joined","c7cdb9f9":"from sklearn.metrics import r2_score\ndef rmspe(y_true, y_pred):\n    return  (np.sqrt(np.mean(np.square((y_true - y_pred) \/ y_true))))\nR2 = round(r2_score(y_true = df_joined['target'], y_pred = df_joined['pred']),3)\nRMSPE = round(rmspe(y_true = df_joined['target'], y_pred = df_joined['pred']),3)\nprint(f'Performance of the naive prediction: R2 score: {R2}, RMSPE: {RMSPE}')\n","74e7c11a":"list_order_book_file_test = glob.glob('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_test.parquet\/*')\ndf_naive_pred_test = past_realized_volatility_per_stock(list_file=list_order_book_file_test,\n                                                           prediction_column_name='target')\ndf_naive_pred_test.to_csv('submission.csv',index = False)","4d2e6ea4":"\n\nbook_train = pd.read_parquet('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_train.parquet')\nbook_test = pd.read_parquet('\/kaggle\/input\/optiver-realized-volatility-prediction\/book_test.parquet')\ntrade_test = pd.read_parquet('\/kaggle\/input\/optiver-realized-volatility-prediction\/trade_test.parquet')\ntrade_train = pd.read_parquet('\/kaggle\/input\/optiver-realized-volatility-prediction\/trade_test.parquet')\n","2c78edc8":"train= pd.read_csv(\"\/kaggle\/input\/optiver-realized-volatility-prediction\/train.csv\")\ntest= pd.read_csv(\"\/kaggle\/input\/optiver-realized-volatility-prediction\/test.csv\")","6bc9faa2":"book_train\nbook_train1=book_train[book_train['stock_id']==0]\nbook_train2=book_train1[book_train1['time_id']==5]\n","a147ed85":"book_train2","9e60f67c":"book_test","e3ee4217":"trade_train","419ecca7":"trade_test","fb1ec14e":"train","2edfee83":"test","e55a14a1":"# Sample Submission","2d0fd2e1":"# Example"}}