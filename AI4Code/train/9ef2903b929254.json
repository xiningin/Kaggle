{"cell_type":{"d290aafe":"code","493201c1":"code","e19e6005":"code","3955cfd0":"code","6b831f41":"code","28c5416c":"code","42f894a6":"code","a5d033e4":"code","448dbe93":"code","7ba15471":"code","63ddf74e":"code","6d6d4516":"code","3dd311cd":"code","5ce9c770":"code","f9838239":"code","b28b2882":"code","ea940f51":"code","b260750e":"code","892fe0da":"code","4ad21ed9":"code","a70c871c":"code","fa33d1e8":"code","a834662d":"code","28597d7e":"code","1665864f":"code","14dbd5c0":"code","ada09c9b":"code","c3abab5c":"code","37095de2":"markdown"},"source":{"d290aafe":"import pandas as pd\nfrom sklearn.feature_extraction.text import TfidfTransformer\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport nltk\nimport re\nnltk.download('stopwords')\nfrom nltk.corpus import stopwords","493201c1":"df =pd.read_csv(\"..\/input\/All_movies.csv\")","e19e6005":"df.head()","3955cfd0":"df.drop(columns=[\"Unnamed: 0\",\"Rating\"],inplace=True)","6b831f41":"df1=df.copy()","28c5416c":"df1[\"Actors\"]=[x.lower().replace(' ','') for x in df1['Actors']]\ndf1[\"Director\"]=[x.lower().replace(' ','') for x in df1['Director']]","42f894a6":"df1[\"details\"]=df1[\"Genre\"]+\" \"+df1[\"Director\"]+\" \"+df1[\"Actors\"]+\" \"+df1[\"Description\"]","a5d033e4":"df1.drop(columns=['Genre', 'Director', 'Actors',\"Description\"],inplace=True)","448dbe93":"df1.head()","7ba15471":"import string","63ddf74e":"df1[\"details\"]=df1[\"details\"].apply(lambda x: x.lower())","6d6d4516":"stopwords=set(stopwords.words('english'))","3dd311cd":"def clean(text):\n  text1=\" \".join([x for x in text.split() if x not in stopwords])\n  text1=re.sub(\"[^a-zA-Z]+\",\" \",text1)\n  text1=re.sub(' +', ' ', text1)\n  text1 = re.sub(r\"\\s+[a-zA-Z]\\s+\", ' ', text1)\n  text1 = re.sub(r'\\s+', ' ', text1)\n  return text1","5ce9c770":"df1[\"details\"]=df1[\"details\"].apply(lambda x: clean(x))","f9838239":"df1[\"details\"][0]","b28b2882":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidf_vectorizer = TfidfVectorizer()","ea940f51":"from sklearn.metrics.pairwise import cosine_similarity\ntfidf = tfidf_vectorizer.fit_transform(df1[\"details\"])","b260750e":"import operator","892fe0da":"movies=list(df[\"Title\"])\n#years=list(df[\"Year\"])","4ad21ed9":"movie_name=list(df1[\"Title\"].to_numpy())","a70c871c":"def similar_func(movie_in_func):                               \n\n  similarity={}\n  for f in range(len(movies)):\n    if movie_in_func == movies[f] :\n      index=f\n\n  for f in range(len(movies)):\n    if f!=index:\n      score= cosine_similarity(tfidf[index], tfidf[f]).astype(\"float\")[0][0]\n      similarity[f]=score\n\n  similarity_sort=sorted(similarity.items(), key=operator.itemgetter(1),reverse=True)\n  return(similarity_sort)","fa33d1e8":"def recommended_movies(movie_in):\n  rating={}\n  #movie_in=['Zindagi Na Milegi Dobara','Game Night']                                         #Input movies                                                                              #Input movies index\n\n  for f in range(len(movies)):\n    rating[f]=[] \n\n  for f in range(len(movie_in)):\n    movie_list = similar_func(movie_in[f])\n\n    for x in range(len(movie_list)):\n      rating[movie_list[x][0]].append(movie_list[x][1])\n\n    for y in range(len(movies)):\n      if movie_in[f] == movies[y] :\n        index=y\n    \n    rating[index].append(-100)\n\n  rating_sum={}                                            \n  for f in range(len(movies)):\n    rating_sum[f]= []\n  \n\n  for f in range(len(movies)):\n    a= rating[f]\n    sum_=0\n    for x in range(len(a)):\n      sum_ = sum_ + a[x]\n  \n    rating_sum[f] = sum_\n\n  #n=10\n  similarity_sort=sorted(rating_sum.items(), key=operator.itemgetter(1),reverse=True)\n  #print(\"You should watch these movies \\n\")\n  #for x in range(n):\n    #name=movies[similarity_sort[x][0]]\n    #year=years[similarity_sort[x][0]]\n    #score1=similarity_sort[x][1]\n    #print(\"Movie name  \" ,name,\"       SCORE  \",score1)\n    #print(\"------------------------------------------------------------------------------\")\n  return similarity_sort\n","a834662d":"movie_user_1=['Badla','Super 30','Article 15'] \nmovie_user_2=['Article 15','Kesari','Andhadhun']  ","28597d7e":"user1=recommended_movies(movie_user_1)\nuser2=recommended_movies(movie_user_2)","1665864f":"u=3 #number of movies to be recommended","14dbd5c0":"def similar_movie(similarity_sort,similarity_sort1):\n  list_of_movies=[]\n  list_of_movies_index=[]\n  r=0\n  i=0\n  for f in range(10,558,20):\n    for x in range(r,f):\n      for y in range(r,f):\n        if similarity_sort[x][0] == similarity_sort1[y][0] and i<u:\n          #print(similarity_sort[x][0],similarity_sort1[y][0])\n          list_of_movies_index.append(similarity_sort[x][0])\n          i=i+1\n\n    if i==3:\n      break\n    r=f\n    \n  list_of_movies = [movies[x] for x in list_of_movies_index]\n  return list_of_movies","ada09c9b":"movies_list = similar_movie(user1,user2)","c3abab5c":"movies_list                                                             #These are the recommended movies for user1 and user2 ","37095de2":"This notebook provide a basic model which can find comman movies for two users by taking the choices of each users."}}