{"cell_type":{"11958f3e":"code","46db2d8b":"code","81ffc914":"code","a11fe9e1":"code","53ba880d":"code","185935db":"code","9f3cb7af":"code","06a1279f":"code","1d2eea3e":"code","ce9a310c":"code","3c5c6d40":"code","fea66229":"code","7faa92a4":"code","51778252":"code","e3f1dd3b":"code","4450fbaf":"code","39b1a3d2":"code","e5e29125":"code","642ca677":"code","eb3c7264":"code","d5696bbc":"code","940de374":"code","611b570e":"code","62af3174":"code","aa077205":"code","f34a9c8b":"code","aaa7a03c":"code","cc8befb9":"code","dfd11c96":"code","43d2cded":"markdown","0c0b8b9e":"markdown","6fed6433":"markdown","dd99ba29":"markdown","057da208":"markdown","12e33a27":"markdown","4f1c83c2":"markdown","8df782a4":"markdown","7e3c0f2c":"markdown","a9e01bcf":"markdown","71d13926":"markdown","9d0cad47":"markdown","fe7e9bfc":"markdown","052891de":"markdown","10c1bee2":"markdown","2939c002":"markdown","696222d3":"markdown","f59a2639":"markdown"},"source":{"11958f3e":"!pip install openpyxl","46db2d8b":"!pip install xlrd","81ffc914":"import pandas as pd\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('display.width', 500)\npd.set_option('display.expand_frame_repr', False)\nfrom mlxtend.frequent_patterns import apriori, association_rules","a11fe9e1":"df_ = pd.read_excel(\"..\/input\/online-retail-2\/online_retail_II.xlsx\", sheet_name=\"Year 2010-2011\")\ndf=df_.copy()","53ba880d":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit","185935db":"def replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit","9f3cb7af":"def retail_data_prep(dataframe):\n    dataframe.dropna(inplace=True)\n    dataframe = dataframe[~dataframe[\"Invoice\"].str.contains(\"C\", na=False)]\n    dataframe = dataframe[dataframe[\"Quantity\"] > 0]\n    dataframe = dataframe[dataframe[\"Price\"] > 0]\n    replace_with_thresholds(dataframe, \"Quantity\")\n    replace_with_thresholds(dataframe, \"Price\")\n    return dataframe","06a1279f":"df = retail_data_prep(df)","1d2eea3e":"df_ger = df[df['Country'] == \"Germany\"]","ce9a310c":"# Description   NINE DRAWER OFFICE TIDY   SET 2 TEA TOWELS I LOVE LONDON    SPACEBOY BABY GIFT SET\n# Invoice\n# 536370                              0                                 1                       0\n# 536852                              1                                 0                       1\n# 536974                              0                                 0                       0\n# 537065                              1                                 0                       0\n# 537463                              0                                 0                       1\n","3c5c6d40":"df_ger.groupby([\"Invoice\", \"Description\"]).agg({\"Quantity\":\"sum\"}).unstack().fillna(0).iloc[0:5,0:5]","fea66229":"df_ger.groupby([\"Invoice\", \"Description\"]).agg({\"Quantity\":\"sum\"}).\\\nunstack().fillna(0).\\\napplymap(lambda x: 1 if x>0 else 0).iloc[0:5,0:5]","7faa92a4":"def create_invoice_product_df(dataframe, id=False):\n    if id:\n        return dataframe.groupby(['Invoice', \"StockCode\"])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)\n    else:\n        return dataframe.groupby(['Invoice', 'Description'])['Quantity'].sum().unstack().fillna(0). \\\n            applymap(lambda x: 1 if x > 0 else 0)","51778252":"ger_inv_pro_df = create_invoice_product_df(df_ger, id=True)","e3f1dd3b":"frequent_itemsets = apriori(ger_inv_pro_df, min_support=0.01, use_colnames=True)\nfrequent_itemsets.sort_values(\"support\", ascending=False).head(10)","4450fbaf":"rules = association_rules(frequent_itemsets, metric=\"support\", min_threshold=0.01)","39b1a3d2":"rules.sort_values(\"support\", ascending=False).head(10)","e5e29125":"rules.sort_values(\"lift\", ascending=False).head(10)","642ca677":"def check_id(dataframe, stock_code):\n    product_name = dataframe[dataframe[\"StockCode\"] == stock_code][[\"Description\"]].values[0].tolist()\n    print(product_name)","eb3c7264":"check_id(df_ger, 21987)","d5696bbc":"check_id(df_ger, 23235)","940de374":"check_id(df_ger, 22747)","611b570e":"def arl_recommender(rules_df, product_id, rec_count=1):\n    sorted_rules = rules_df.sort_values(\"lift\", ascending=False)\n    recommendation_list = []\n    for i, product in enumerate(sorted_rules[\"antecedents\"]):\n        for j in list(product):\n            if j == product_id:\n                recommendation_list.append(list(sorted_rules.iloc[i][\"consequents\"])[0])\n\n    return recommendation_list[0:rec_count]","62af3174":"arl_recommender(rules, 21987, 2)","aa077205":"arl_recommender(rules, 23235, 2)","f34a9c8b":"arl_recommender(rules, 22747, 2)","aaa7a03c":"check_id(df_ger, 21988)\ncheck_id(df_ger, 21086)","cc8befb9":"check_id(df_ger, 23243)","dfd11c96":"check_id(df_ger, 22746)\ncheck_id(df_ger, 22745)","43d2cded":"For products with id 23235","0c0b8b9e":"* antecedent support: X-possibilities alone\n* consequent support: Y-possibilities alone\n* support: The possibility of the two being seen together\n* confidence: Probability of purchasing Y when X is received\n* lift: When X is received, the probability of purchasing Y increases by the given value.\n* leverage: Leverage effect. It's similar to lift, but the lift is more commonly used. \n* conviction: Expected frequency of X without Y","6fed6433":"Threshold value is determined for outlier values.","dd99ba29":"**Names of products given IDs**\n\nUser 1 product ID: 21987\n\nUser 2 product ID: 23235\n\nUser 3 product ID: 22747\n","057da208":"# Association Rule Learning\nAssociation rule learning is a rule-based method for discovering relations between variables in large datasets. In the case of retail POS (point-of-sale) transactions analytics, our variables are going to be the retail products. It essentially discovers strong associations (rules) with some \u201cstrongness\u201d level, which is represented by several parameters.\nDifferent statistical algorithms have been developed to implement association rule mining, and Apriori is one such algorithm. \n\n****Theory of Apriori Algorithm****\n\nThere are three major components of Apriori algorithm:\n\n* Support\n* Confidence\n* Lift","12e33a27":"Columns are created based on matrix id values, i.e. StockCodes","4f1c83c2":"The data set is reduced by Germany.","8df782a4":"For products with id 21987","7e3c0f2c":"For products with id 22747 ","a9e01bcf":"****Data preprocessing****\n\nFunction that cleans the retail data set","71d13926":"**To recommend products to users who are in the process of throwing products in the basket**","9d0cad47":"****The status we want the data to come from: (binary encode operation)****","fe7e9bfc":"Fillna(0) is used to type zero in places that say nan. To indicate if it's in the shopping cart or not","052891de":"All other metrics are calculated using assosiation_rules","10c1bee2":"Function that replaces outliers with threshold values according to threshold values","2939c002":"Bringing product Id that can be recommended according to product id from the rule table","696222d3":"**Names of recommended products**","f59a2639":"****Creation of assosiation rules****\n\nThe apriori function is used for the possibilities of all possible product combinations.\n\nmin_support= Specified treshold value\n\nOnly supports calculated with apriori"}}