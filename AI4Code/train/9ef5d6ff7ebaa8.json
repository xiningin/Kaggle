{"cell_type":{"520dcb13":"code","bcd3b8c2":"code","1e20951b":"code","0b0ba104":"code","d3d0ad00":"code","a1026568":"code","53b110df":"code","43ade727":"code","6e7ded5f":"code","bb6904b9":"code","dcde9c3d":"code","c7ba6fb3":"markdown","476577d0":"markdown","0a25c7b2":"markdown","c20b6eda":"markdown","32eef64a":"markdown","f1cb072b":"markdown","33aec5c0":"markdown","30d0b706":"markdown","2dbb73a8":"markdown","862a3780":"markdown","89ff36e0":"markdown","decc12d7":"markdown","aa9d9bca":"markdown"},"source":{"520dcb13":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.metrics import ConfusionMatrixDisplay\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.optimizers import Adam\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom sklearn.preprocessing import LabelEncoder","bcd3b8c2":"df = pd.read_csv('..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\ndf.head()","1e20951b":"# gender\ngender_label_encoder = LabelEncoder()\ngender_label_encoder.fit(df['gender'])\ndf['gender'] =  gender_label_encoder.transform(df['gender'])\n\n# smoking_status\nsmoking_label_encoder = LabelEncoder()\nsmoking_label_encoder.fit(df['smoking_status'])\ndf['smoking_status'] =  smoking_label_encoder.transform(df['smoking_status'])","0b0ba104":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nnormalized_array = scaler.fit_transform(df[['age','bmi','avg_glucose_level']])\nnormalized_df = pd.DataFrame(normalized_array, columns=['age','bmi','avg_glucose_level'])\ndf[['age', 'bmi', 'avg_glucose_level']] = normalized_df","d3d0ad00":"df = df.dropna()\ndf = df.reset_index()","a1026568":"df","53b110df":"# Defining X and y\nX = df[['gender', 'age', 'hypertension', 'avg_glucose_level', 'bmi', 'smoking_status']]\ny = df['stroke']\n\n# Train test split\nX_train, X_val, y_train, y_val = train_test_split(X, y, random_state=1) # random_state=1 for same results every time.\n\ninput_shape = [X_train.shape[1]]","43ade727":"model = keras.Sequential([\n    # input layer\n    layers.BatchNormalization(input_shape=input_shape),\n    # hidden layer 1\n    layers.Dense(units=256, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(rate=0.4),\n    # hidden layer 2\n    layers.Dense(units=128, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(rate=0.4),\n    # hidden layer 3\n    layers.Dense(units=64, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(rate=0.4),\n    # hidden layer 4\n    layers.Dense(units=32, activation='relu'),\n    layers.BatchNormalization(),\n    layers.Dropout(rate=0.4),\n    layers.Dense(units=3, activation='softmax')\n])\n\nmodel.compile(\n    optimizer=Adam(learning_rate=0.0001),\n    loss='sparse_categorical_crossentropy',\n    metrics=['accuracy']\n)","6e7ded5f":"history = model.fit(\n    X_train, y_train,\n    validation_data=(X_val, y_val),\n    batch_size=512,\n    epochs=700,\n)","bb6904b9":"### Loss Graph\nhistory_df = pd.DataFrame(history.history)\nhistory_df.loc[:, ['loss', 'val_loss']].plot(title=\"Learning Curve: Loss over Epochs\")\nplt.ylabel(\"Loss\")\nplt.xlabel(\"Epochs\")\nplt.legend(['Training Loss', 'Validation Loss'])\n\n### Accuracy Graph\nhistory_df.loc[:, ['accuracy', 'val_accuracy']].plot(title=\"Learning Curve: Accuracy over Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.xlabel(\"Epochs\")\nplt.legend(['Training Accuracy', 'Validation Accuracy'])","dcde9c3d":"label_names = [\"Had no stroke\", \"Had stroke\"] # 0 patient had no stroke, 1 patient had stroke\ny_actual = y_train.to_numpy()\ny_pred = model.predict(X_train, verbose=0)\ny_pred = np.argmax(y_pred, axis=-1)\n\nprint(\"On {} samples of untrained(test) dataset:\".format(len(y_pred)))\nprint(\"Prediction:\")\nprint(y_pred)\nprint(\"Actual:\")\nprint(y_actual)\n\n### Classification Report\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_actual,y_pred, target_names=label_names))\n\n### Confusion Matrix Graph\ncm = confusion_matrix(y_true=y_actual, y_pred=y_pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label_names)\ndisp.plot()\nplt.title('Confusion Matrix')","c7ba6fb3":"## \ud83d\udcc8 Evaluation of the Model's Performance","476577d0":"## \ud83d\ude82 Data preprocessing","0a25c7b2":"### 2. Normalizing values\nI want to normalize `age`, `bmi`, and `avg_glucose_level`","c20b6eda":"\n### 2. Training the model\n\n##### Results of Training\nLearning Curve showing Loss and Accuracy during training.","32eef64a":"# We start t","f1cb072b":"### Final Normalized Dataset:","33aec5c0":"## \u2702 Defining X and y and train test split","30d0b706":"## Importing the dataset","2dbb73a8":"## My Evaluation\n### Tasks I did to preprocess the **dataset** to increase model performance:\n    - FeatureScaling with MinMax scaler for all values \n    - Dropped NaN values\n    - Limited the features to only: `gender`, `age`, `hypertension`, `heart_disease`, `avg_glucose_level`, `bmi`, `smoking_status` which are the main causes toward stroke.\n    \n### Improvements I did on the neural network to increase model performance:\n    - Batch No increase\n    - Increase in layers\n    - These improvements reduced overfitting\n    \n- With these improvements, the model would steadily perform above **95% accuracy**.\n- At one point it also reached **100% accuracy**.","862a3780":"### 1. Encoding ordinal features: (using LabelEncoder)","89ff36e0":"I decided to use the features: `gender`, `age`, `hypertension`, `heart_disease`, `avg_glucose_level`, `bmi`, `smoking_status`\nto predict the label: `stroke`","decc12d7":"### 1. Creating and compiling the model","aa9d9bca":"### 3. Removing NaN values and resetting index"}}