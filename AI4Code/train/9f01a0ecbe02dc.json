{"cell_type":{"88e49461":"code","9add5512":"code","063d5ed6":"code","546bd0f5":"code","1d2a8c98":"code","a30dd127":"code","09fd4f6d":"code","b98043c9":"code","905e9d47":"code","d4344a9b":"code","675c29bc":"code","84759e56":"code","c5ce542e":"code","c84bb222":"code","2b4f72b6":"code","be58dd90":"code","9a98e2e5":"code","12771ddc":"code","134ac194":"code","f923ba48":"code","b017e6a2":"code","8f836195":"code","2e743a9c":"code","a82b5d9b":"markdown","388c27b8":"markdown","370133fa":"markdown","d2d26f70":"markdown","f1cc6584":"markdown","04cf2101":"markdown","2a95ad67":"markdown","4985aedf":"markdown","a48e44ad":"markdown","c0ebc5ff":"markdown","3ad0a7e0":"markdown","787ca9e3":"markdown","1e43b3ce":"markdown","ee23661e":"markdown","6cb7b9e5":"markdown"},"source":{"88e49461":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots","9add5512":"data = pd.read_csv(\"..\/input\/world-happiness-report-2021\/world-happiness-report.csv\")\ndata.fillna(0, inplace=True)\ndata.info()","063d5ed6":"data.rename(columns={\"Country name\" : \"country\",\n                    \"Life Ladder\" : \"ladder_score\",\n                    \"Log GDP per capita\" : \"gdp_per_capita\",\n                    \"Social support\" : \"social_support\",\n                    \"Healthy life expectancy at birth\" : \"life_expectancy\",\n                    \"Freedom to make life choices\" : \"freedom\",\n                    \"Generosity\" : \"generosity\",\n                    \"Perceptions of corruption\" : \"corruption\",\n                    \"Positive affect\" : \"positive_affect\",\n                    \"Negative affect\" : \"negative_affect\"},\n           inplace=True)","546bd0f5":"data.describe()","1d2a8c98":"data.head(20)","a30dd127":"data_ = pd.read_csv(\"..\/input\/world-happiness-report-2021\/world-happiness-report-2021.csv\")\ndata_.head(3)","09fd4f6d":"data_.rename(columns={\"Regional indicator\" : \"region\", \"Country name\" : \"country\"},inplace=True)\n\ndata[\"region\"] = np.nan\n\nfor i,country in enumerate(data_.country):\n    if data[\"country\"].eq(country).any(0):\n        ind = data.index[data.eq(country).any(1)]\n        data[\"region\"][ind] = data_.region[i]\n        \ndata.head(10)","b98043c9":"data.isna().sum()","905e9d47":"data.region.unique()","d4344a9b":"null = data[data[\"region\"].isnull()]\nnull['country'].unique()","675c29bc":"region_list = []\n\nfor country in data['country']:\n    if country == \"Angola\":\n        region_list.append(\"Sub-Saharan Africa\")\n    if country == \"Belize\":\n        region_list.append(\"Latin America and Caribbean\")\n    if country == \"Bhutan\":\n        region_list.append(\"South Asia\")\n    if country == \"Central African Republic\":\n        region_list.append(\"Sub-Saharan Africa\")\n    if country == \"Congo (Kinshasa)\":\n        region_list.append(\"Sub-Saharan Africa\")\n    if country == \"Cuba\":\n        region_list.append(\"Latin America and Caribbean\")\n    if country == \"Djibouti\":\n        region_list.append(\"Middle East and North Africa\")\n    if country == \"Guyana\":\n        region_list.append(\"Latin America and Caribbean\") \n    if country == \"Oman\":\n        region_list.append(\"Middle East and North Africa\")  \n    if country == \"Qatar\":\n        region_list.append(\"Middle East and North Africa\") \n    if country == \"Somalia\":\n        region_list.append(\"Middle East and North Africa\") \n    if country == \"Somaliland region\":\n        region_list.append(\"Sub-Saharan Africa\") \n    if country == \"South Sudan\":\n        region_list.append(\"Sub-Saharan Africa\") \n    if country == \"Sudan\":\n        region_list.append(\"Middle East and North Africa\")  \n    if country == \"Suriname\":\n        region_list.append(\"Latin America and Caribbean\") \n    if country == \"Syria\":\n        region_list.append(\"Middle East and North Africa\") \n    if country == \"Trinidad and Tobago\":\n        region_list.append(\"Latin America and Caribbean\")     \n        \n        \nfor i,j in zip(null.index,range(len(null))):\n    data[\"region\"][i] = region_list[j]","84759e56":"data.isnull().sum()","c5ce542e":"fig = px.box(data, x=\"ladder_score\",color_discrete_sequence = ['red'],hover_data=[\"country\"])\nfig.update_layout(width=900,height=450,\nxaxis_title_text = 'Ladder Score',\ntemplate='plotly_dark')\nfig.show()","c84bb222":"fig = px.box(data, x=\"freedom\",color_discrete_sequence = ['mediumspringgreen'],hover_data=[\"country\"])\nfig.update_layout(width=900,height=450,\nxaxis_title_text = 'Freedom',\ntemplate='plotly_dark')\nfig.show()","2b4f72b6":"fig = px.box(data[[\"corruption\",\"country\"]][data[\"corruption\"] > 0], x=\"corruption\",color_discrete_sequence = ['darkviolet'],hover_data=[\"country\"])\nfig.update_layout(width=900,height=450,\nxaxis_title_text = 'Corruption',\ntemplate='plotly_dark')\nfig.show()","be58dd90":"fig = px.box(data[[\"social_support\",\"country\"]][data[\"social_support\"] > 0], x=\"social_support\",color_discrete_sequence = ['darkorange'],hover_data=[\"country\"])\nfig.update_layout(width=900,height=450,\nxaxis_title_text = 'Social Support',\ntemplate='plotly_dark')\nfig.show()","9a98e2e5":"group = data.groupby('country', as_index=False).mean().sort_values(by='ladder_score',ascending=False)\n\nfig = make_subplots(rows=1, cols=2,\n                   subplot_titles=['The Happiest 10 Countries', 'The Unhappiest 10 Countries'])\nfig.append_trace(go.Bar(x=group['ladder_score'].head(10),\n                       y=group[\"country\"].head(10),\n                        orientation='h',\n                       marker={'color': '#3366ff','line': dict(color='#3366ff', width=1)},\n                       ), 1,1\n                )\nfig.append_trace(go.Bar(x=group['ladder_score'].tail(10),\n                       y=group['country'].tail(10),\n                        orientation='h',\n                        marker={'color': '#ff9933','line': dict(color='#ff9933', width=1)},\n                       ), 1,2\n                )\nfig.update_layout(\n    template='plotly_dark',\n    showlegend=False)\nfig.show()","12771ddc":"gdp = data.groupby('country', as_index=False).mean().sort_values(by='gdp_per_capita',ascending=False)\nx = gdp[gdp['gdp_per_capita'] > 0].tail(10)\n\nfig = make_subplots(rows=1, cols=2,\n                   subplot_titles=['The Highest 10 Countries as GDP per capita', 'The Lowest 10 Countries as GDP per capita'])\nfig.append_trace(go.Bar(x=gdp['gdp_per_capita'].head(10),\n                       y=gdp[\"country\"].head(10),\n                        orientation='h',\n                       marker={'color': '#ccccff','line': dict(color='#ccccff', width=1)},\n                       ), 1,1\n                )\nfig.append_trace(go.Bar(x=x['gdp_per_capita'],\n                       y=gdp['country'].tail(10),\n                        orientation='h',\n                        marker={'color': '#99ccff','line': dict(color='#99ccff', width=1)},\n                       ), 1,2\n                )\nfig.update_layout(\n    template='plotly_dark',\n    showlegend=False,\n    title_font_size=16)\nfig.show()","134ac194":"free = data.groupby(\"country\",as_index=False).mean().groupby([\"country\",\"freedom\"], as_index=False).mean().sort_values(by='freedom', ascending=False)\n\nfig = make_subplots(rows=1, cols=2,\n                   subplot_titles=['Top 10 Countries as freedom', 'The Lowest 10 Countries as freedom'])\nfig.append_trace(go.Bar(x=free['freedom'].head(10),\n                       y=free[\"country\"].head(10),\n                        orientation='h'\n                       ), 1,1\n                )\nfig.append_trace(go.Bar(x=free['freedom'].tail(10),\n                       y=free['country'].tail(10),\n                        orientation='h'\n                       ), 1,2\n                )\nfig.update_layout(\n    template='ggplot2',\n    showlegend=False)\nfig.show()","f923ba48":"corruption = data.groupby([\"country\"],as_index=False).mean().sort_values(by=\"corruption\", ascending=False)\nx = corruption[corruption['corruption'] > 0].tail(10)\n\nfig = make_subplots(rows=1, cols=2,\n                   subplot_titles=['Top 10 Countries as corruption', 'The Lowest 10 Countries as corruption'])\nfig.append_trace(go.Bar(x=corruption['corruption'].head(10),\n                       y=corruption[\"country\"].head(10),\n                        orientation='h'\n                       ), 1,1\n                )\nfig.append_trace(go.Bar(x=x['corruption'].tail(10),\n                       y=corruption['country'].tail(10),\n                        orientation='h'\n                       ), 1,2\n                )\nfig.update_layout(\n    template='seaborn',\n    showlegend=False)\nfig.show()","b017e6a2":"fig = px.scatter(data, y=\"life_expectancy\", x=\"gdp_per_capita\", size=\"ladder_score\", color=\"region\",\n           hover_name=\"country\", animation_frame=\"year\", animation_group=\"country\", log_x=True, size_max=12, template=\"ggplot2\", title=\"GDP per capita by regions\")\nfig.show()","8f836195":"for region in data.region.unique():\n    fig = px.scatter(data[data[\"region\"]==region], y=\"life_expectancy\", x=\"gdp_per_capita\", size=\"ladder_score\", color=\"country\",\n           hover_name=\"country\", animation_frame=\"year\", animation_group=\"country\", log_x=True, size_max=15, template=\"plotly_dark\", title=region)\n    fig.show()","2e743a9c":"for region in data.region.unique():\n    fig = px.scatter(data[data[\"region\"]==region], y=\"ladder_score\", x=\"gdp_per_capita\", size=\"freedom\", color=\"country\",\n           hover_name=\"country\", animation_frame=\"year\", animation_group=\"country\", log_x=False, size_max=15, template=\"plotly_dark\", title=region)\n    fig.show()","a82b5d9b":"#### I'm using the code cell below to insert region feature from second dataframe (named data_) to first dataframe (named as data.) The loop checks entries in country columns and if they are same countries, the entry corresponding to region at that moment is assigned first dataframe's region column's proper index that is corresponding country's matched.\n\n#### TR: 2.dataframedeki region \u00f6zelli\u011fini ilk (data) dataframe'ine eklemek i\u00e7in a\u015fa\u011f\u0131daki kod par\u00e7as\u0131n\u0131 kullan\u0131yorum. country kolonlar\u0131ndaki girdiler s\u0131ras\u0131yla kontrol edilerek e\u015fit oldu\u011fu durumda 2.dataframeden regiona kar\u015f\u0131l\u0131k gelen girdiyi ilk dataframede e\u015fit oldu\u011fu durumun indeksinde region kolonuna ekler.","388c27b8":"##### This data is great for exploratory data analysis and data visualization. And for this purpose I want to realize my first implementation with plotly library which is really cool.\n\n##### Bu veriseti ke\u015fifsel veri analizi ve veri g\u00f6rselle\u015ftirmesi i\u00e7in \u00e7ok iyi veriseti. Ben de bu ama\u00e7la baya\u011f\u0131 haval\u0131 grafikler \u00e7izmeyi m\u00fcmk\u00fcn k\u0131lan plotly k\u00fct\u00fcphanesiyle ilk uygulamam\u0131 ger\u00e7ekle\u015ftirmek istiyorum.","370133fa":"# Expolartory Data Analysis","d2d26f70":"# Loading Data","f1cc6584":"#### These plots shows that it is possible to say that the higher gdp_per_capita, the higher life expectancy.\n\n#### Bu animasyonlu grafikleri b\u00f6lge b\u00f6lge inceleyince gdp per capita artt\u0131k\u00e7a life expectancy i\u00e7in de art\u0131\u015f oldu\u011fu g\u00f6r\u00fclmekte.","04cf2101":"# World Happines Report EDA","2a95ad67":"# Importing Libraries","4985aedf":"# Filling NaN entries","a48e44ad":"####  There is NaN values in region column and I will fill them with proper region by searching their locations\n \n#### TR: region kolonunda NaN girdiler var ve bunlar\u0131 \u00fclkelerin konumlar\u0131na g\u00f6re uygun b\u00f6lgeyi se\u00e7ip NaN girdiyi dolduraca\u011f\u0131m.\n\n","c0ebc5ff":"### Overview","3ad0a7e0":"#### Checking if there is null entries after merging.\n\n#### Birle\u015ftirdikten sonra null girdi oldu mu diye kontrol ediyorum.","787ca9e3":"#### * *Since there is no missing values, skipping to visualization.*","1e43b3ce":"#### GDP per capita and Life expectancy","ee23661e":"#### GDP per capita \/ Ladder Score","6cb7b9e5":"### Regional Analysis"}}