{"cell_type":{"713627ee":"code","9eba83f9":"code","b17df121":"code","bf5e7360":"code","8ad151a8":"code","c9b78daf":"code","d36e7338":"code","7147776d":"code","0d3af08b":"code","a93d1858":"code","09f2a6c0":"code","002d8774":"code","13ef7b46":"code","8f281596":"code","6842e16b":"code","aff2ed02":"code","3c4ea03c":"code","bc7b314e":"code","eab3bd7b":"code","7d2cf5d9":"code","80948fe6":"code","210fc808":"code","4b7adbd4":"code","c173e3b4":"code","b7c88826":"code","45f4a417":"code","084ace38":"code","90490a2a":"code","756accfd":"code","2b333fc4":"code","ba492f94":"code","eca89e81":"code","679eb3fa":"code","02406b02":"code","377e32cc":"code","b8c5fc75":"code","1d7e0e9a":"code","d2331e27":"code","392fea29":"code","86ce13fe":"code","6a7d4824":"code","c7688841":"code","b7e3dd7d":"code","ea51932d":"code","04b87217":"markdown","2be3f2f3":"markdown","5dad74ea":"markdown","4edd4f6d":"markdown","0c839313":"markdown","99a4dfc2":"markdown","be885119":"markdown","c93ac49a":"markdown","c7b74c45":"markdown","fc3e1df9":"markdown","1220fe2c":"markdown","53597cfe":"markdown","6ed98d1f":"markdown","54f76368":"markdown","8810001f":"markdown"},"source":{"713627ee":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9eba83f9":"import plotly.express as px\nimport seaborn as sns\nimport matplotlib.pyplot as plt","b17df121":"players = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2021\/players.csv\")\nplayers.head()","bf5e7360":"df = players.groupby('collegeName')['nflId'].count().reset_index(name = 'counts')\ndf = df.sort_values(by = 'counts', ascending = False)\nfig = px.bar(df[:20], x='collegeName', y='counts', color = 'collegeName')\nfig.update_layout(title_text=\"Top 20 Colleges where players from\")\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","8ad151a8":"df = players.groupby('collegeName')['nflId'].count().reset_index(name = 'counts')\ndf = df.sort_values(by = 'counts', ascending = False)\nfig = px.bar(df[:20], x='collegeName', y='counts', color = 'collegeName')\nfig.update_layout(title_text=\"Top 20 Colleges where players from\")\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","c9b78daf":"players.height = players.height.str.replace('-','*12+').apply(lambda x: eval(x))\ndf = players.groupby('height')['nflId'].count().reset_index(name = 'counts')\ndf = df.sort_values(by = 'counts', ascending = False)\nfig = px.bar(df, x='height', y='counts', color = 'height')\nfig.update_layout(title_text=\"Average height in Inches: \"+ str(round(players.height.mean(),2)))\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","d36e7338":"df = players.groupby('weight')['nflId'].count().reset_index(name = 'counts')\nfig = px.bar(df, x='weight', y='counts')\nfig.update_layout(title_text=\"Average weight in Pounds: \"+ str(round(players.weight.mean(),2)))\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","7147776d":"players.birthDate = pd.to_datetime(players.birthDate)\nplayers['birthyear'] = players['birthDate'].dt.year\ndf = players.groupby('birthyear')['nflId'].count().reset_index(name = 'counts')\nfig = px.bar(df, x='birthyear', y='counts', color = 'birthyear')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","0d3af08b":"df = players.groupby('position')['nflId'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='position', y='counts', color = 'position')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","a93d1858":"p_he = players.groupby(['position','height'])['nflId'].count().reset_index(name = 'counts')\nfig = px.scatter(p_he, x=\"height\", y=\"position\", size = 'counts', color = 'counts')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","09f2a6c0":"p_we = players.groupby(['position','weight'])['nflId'].count().reset_index(name = 'counts')\nfig = px.scatter(p_we, x=\"weight\", y=\"position\", size = 'counts', color = 'counts')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","002d8774":"p_clg = players.groupby(['collegeName','position'])['nflId'].count().reset_index(name = 'counts')\nfig = px.scatter(p_clg, x=\"collegeName\", y=\"position\", size = 'counts', color = 'counts')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","13ef7b46":"plays = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2021\/plays.csv\")\npd.set_option('display.max_columns',50)\nplays.head()","8f281596":"df = plays.groupby(\"offenseFormation\")['playId'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='offenseFormation', title='Offense Formation Count')\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","6842e16b":"yardline = plays.groupby('yardlineNumber')['playId'].count().reset_index(name = 'counts').sort_values(by='counts', ascending = False)\nfig = px.bar(yardline[:10], x='yardlineNumber', y='counts', color = 'yardlineNumber')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","aff2ed02":"df = plays.groupby(\"yardlineSide\")['playId'].count().reset_index(name = 'counts')\nfig = px.bar(df, x='yardlineSide', y='counts', color = 'yardlineSide')\nfig.update_layout(\n    autosize=False,\n    width=950,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","3c4ea03c":"df = plays.groupby(\"quarter\")['playId'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='quarter', title='Quarter Count')\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","bc7b314e":"df = plays.groupby(\"down\")['playId'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='down', title='Down Count')\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","eab3bd7b":"df = plays.groupby(\"yardsToGo\")['playId'].count().reset_index(name = 'counts')\nfig = plt.figure(figsize=(15,10))\nax = fig.add_axes([0,0,1,1])\nax = sns.barplot(x=\"yardsToGo\", y=\"counts\", data=df)\nax.set_xticklabels(ax.get_xticklabels(), rotation=40, ha=\"right\")\nax.set_title('Yards to go')\nplt.show()","7d2cf5d9":"df = plays.groupby(\"playType\")['playId'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='playType', title='playType Count')\nfig.update_layout(\n    autosize=False,\n    width=800,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","80948fe6":"fig = plt.figure(figsize=(12,8))\nax = fig.add_axes([0,0,1,1])\ncr = plays.groupby(\"passResult\")['playId'].count().reset_index(name = 'counts')\nax = sns.barplot(x=\"passResult\", y=\"counts\", data=cr)","210fc808":"fig = plt.figure(figsize=(12,8))\nax = fig.add_axes([0,0,1,1])\ncr = plays.groupby(\"offensePlayResult\")['playId'].count().reset_index(name = 'counts')\ncr = cr.sort_values(by= 'counts', ascending = False)\nax = sns.barplot(x=\"offensePlayResult\", y=\"counts\", data=cr[:20])","4b7adbd4":"df = plays.groupby(\"isDefensivePI\")['playId'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='isDefensivePI', title='isDefensivePI Count')\nfig.show()","c173e3b4":"games = pd.read_csv(\"\/kaggle\/input\/nfl-big-data-bowl-2021\/games.csv\")\ngames.head()","b7c88826":"df = games.groupby('homeTeamAbbr')['gameId'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='homeTeamAbbr', y='counts', color = 'homeTeamAbbr')\nfig.show()","45f4a417":"df = games.groupby('visitorTeamAbbr')['gameId'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='visitorTeamAbbr', y='counts', color = 'visitorTeamAbbr')\nfig.update_layout(\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","084ace38":"df = games.groupby('gameDate')['gameId'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='gameDate', y='counts', color = 'gameDate')\nfig.update_layout(\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","90490a2a":"df = games.groupby('gameTimeEastern')['gameId'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='gameTimeEastern', y='counts', color = 'gameTimeEastern')\nfig.update_layout(\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","756accfd":"df = games.groupby('week')['gameId'].count().reset_index(name = 'counts')\ndf = df.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='week', y='counts', color = 'week')\nfig.update_layout(\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","2b333fc4":"week = pd.DataFrame()\nfor a in range(1,18):\n    dd = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2021\/week'+str(a)+'.csv')\n    dd['week'] = 'week'+str(a)\n    week = pd.concat([week,dd])","ba492f94":"game_wk = week.groupby(['week'])['gameId'].nunique().reset_index(name = 'counts')\ndf = game_wk.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='week', y='counts', color = 'week')\nfig.update_layout(\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","eca89e81":"game_wk = week.groupby(['week'])['playId'].nunique().reset_index(name = 'counts')\ndf = game_wk.sort_values(by  = 'counts', ascending = False)\nfig = px.bar(df, x='week', y='counts', color = 'week')\nfig.update_layout(\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","679eb3fa":"df = week.groupby(\"team\")['team'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='team', title='Team Counts')\nfig.show()","02406b02":"df = week.groupby(\"playDirection\")['playDirection'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='playDirection', title='playDirection Counts')\nfig.show()","377e32cc":"df = week.groupby(\"route\")['route'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='route', title='Route Counts')\nfig.show()","b8c5fc75":"df = week.groupby(\"position\")['position'].count().reset_index(name = 'counts')\nfig = px.pie(df, values='counts', names='position', title='Position Counts')\nfig.show()","1d7e0e9a":"week['time'] = pd.to_datetime(week['time'])\nweek['date']=week['time'].dt.date","d2331e27":"week['month'] = week['time'].dt.month\nmonth_game = week.groupby('month')['gameId'].nunique().reset_index(name = 'counts')\nmonth_game['month'] = month_game['month'].astype(str)\nfig = px.bar(month_game, x='month', y='counts', color = 'month')\nfig.update_layout(title = 'Number of games played in a month',\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","392fea29":"week['hour']=week['time'].dt.hour\nhr = week.groupby('hour')['hour'].count().reset_index(name = 'counts')\nfig = px.bar(hr, x='hour', y='counts', color = 'hour')\nfig.update_layout(\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","86ce13fe":"week['day']=week['time'].dt.day\nhr = week.groupby('day')['day'].count().reset_index(name = 'counts')\nfig = px.bar(hr, x='day', y='counts', color = 'day')\nfig.update_layout(\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","6a7d4824":"week.head()","c7688841":"hr = week.groupby('event')['event'].count().reset_index(name = 'counts')\nhr.drop(hr[hr.event == 'None'].index, inplace=True)\nhr = hr.sort_values(by=['counts'])\nfig = px.bar(hr, x='event', y='counts', color = 'event')\nfig.update_layout(\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","b7e3dd7d":"big = hr.nlargest(5,'counts')\nfig = px.bar(big, x='event', y='counts', color = 'event')\nfig.update_layout(\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","ea51932d":"sm = hr.nsmallest(5,'counts')\nfig = px.bar(sm, x='event', y='counts', color = 'event')\nfig.update_layout(\n    autosize=False,\n    width=900,\n    height=650,\n    margin=dict(\n        l=50,\n        r=50,\n        b=50,\n        t=50,\n        pad=4\n    ),\n    paper_bgcolor=\"LightSteelBlue\",\n)\nfig.show()","04b87217":"### Most happened 5 events","2be3f2f3":"## Players","5dad74ea":"Highest number of play begins at 25th yardline","4edd4f6d":"Higher number of games played on Sunday","0c839313":"This competition uses NFL\u2019s Next Gen Stats data, which includes the position and speed of every player on the field during each play. You\u2019ll employ player tracking data for all drop-back pass plays from the 2018 regular season. The goal of submissions is to identify unique and impactful approaches to measure defensive performance on these plays. There are several different directions for participants to \u2018tackle\u2019 (ha)\u2014which may require levels of football savvy, data aptitude, and creativity","99a4dfc2":"## Libraries","be885119":"************ Notebook under construction ************","c93ac49a":"Number of games played in each week","c7b74c45":"**Clemson, Texas tech** those 2 colleges porvides highest number of players in the place of **WR**","fc3e1df9":"![image.png](attachment:image.png)","1220fe2c":"**Most players are young talents.**","53597cfe":"Almost all the games played in the night time only","6ed98d1f":"## Plays","54f76368":"## Games","8810001f":"Collecting and Concatinating Week datasets"}}