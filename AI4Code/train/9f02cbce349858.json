{"cell_type":{"57c636c1":"code","5260f672":"code","bc22853d":"code","7fc1d074":"code","34006a85":"code","480cf602":"code","5c456fc7":"code","0dafed9a":"code","43010eb9":"code","1757e1f8":"code","b856b80f":"code","1b59ae31":"code","cbb30930":"code","ae4be1db":"code","8bf2c6e5":"code","ad182e3e":"code","953e6dee":"code","adb50464":"code","76688ec5":"code","995f0838":"code","0d34251a":"code","9de6f32a":"code","fe60cb92":"code","1b48ea59":"code","58bcf268":"code","3f4b5aec":"markdown","d99a7525":"markdown","e192b5d1":"markdown","dd24fe9b":"markdown","5b53f283":"markdown","93d0b1b3":"markdown","d0986b52":"markdown","663cdf47":"markdown","b1c184e2":"markdown","aba3f0bc":"markdown","cf44dbbb":"markdown","d82ef43e":"markdown","5e39a39e":"markdown","1fa15e5a":"markdown","83cdca2f":"markdown","2f6da7a3":"markdown","3ebd9cfd":"markdown","6905bf72":"markdown","03543e9a":"markdown","66e4d3b3":"markdown","13734e3e":"markdown","1792ff10":"markdown","f0ab3897":"markdown","2e04b1b3":"markdown","86b38684":"markdown","ff9cbe06":"markdown","53bcd787":"markdown","6fb318ea":"markdown"},"source":{"57c636c1":"weight = int(input('Weight: ')) # Kg\nheight = float(input('Height: ')) # Cm\n\nbmi = (weight \/ height) ** 2\n\nif bmi < 18.5:\n    print(\"Underweight\")\nelif bmi >= 18.5 and bmi <= 25:\n    print(\"Normal\")\nelif bmi >= 25 and bmi <= 30:\n    print(\"Overweight\")\nelse:\n    print(\"Obesity\")","5260f672":"many_data = int(input('How Many Data? '))\n\nscore_with_name = {}\n\nfor i in range(many_data):\n    input_name = input('Name: ')\n    input_score = int(input('Score: '))\n\n    score_with_name[input_score] = score_with_name.get(input_score, []) + [input_name]\n\nscore_sorted = sorted(list(score_with_name.keys()))\n\nlow_score, high_score = score_sorted[0], score_sorted[-1]\n\nprint(f'\\nThe name with the high score: {score_with_name[high_score]}, the score is {high_score}\\n')\n\nprint(f'The name with the low score: {score_with_name[low_score]}, the score is {low_score}\\n')","bc22853d":"phone = input(\"Phone : \")\n\nnum = {\n    \"0\": \"Zero\",\n    \"1\": \"One\",\n    \"2\": \"Two\",\n    \"3\": \"Three\",\n    \"4\": \"Four\",\n    \"5\": \"Five\",\n    \"6\": \"Six\",\n    \"7\": \"Seven\",\n    \"8\": \"Eight\",\n    \"9\": \"Nine\"\n}\n\noutput = \"\"\n\nfor ch in phone:\n\toutput += num.get(ch) + \" \"\n\nprint(output)","7fc1d074":"# Stack Wrapper Class\n\nclass Stack(): # LIFO = last in first out\n    def __init__(self): \n        self.stack = list()\n\n    def push(self, item): # Push an item onto the stack\n        self.stack.append(item)\n\n    def pop(self): # Pop an item off of the stack\n        if len(self.stack) > 0:\n            return self.stack.pop()\n        else:\n            return None\n\n    def peek(self): # get an item on top of stack, without removing it\n        if len(self.stack) > 0:\n            return self.stack[len(self.stack)-1]\n        else:\n            return None\n\n    def __str__(self): # magic funct that for changing the bool to str\n        return str(self.stack)\n\nmystack = Stack()\nmystack.push(4)\nmystack.push(5)\nmystack.push(6)\nmystack.pop()\nprint(mystack)","34006a85":"def perimeter_square_area(width, length):\n    around = 2 * (width + length)\n    large = (width * length)\n    return around, large\n\ncircumference_result, broad_result = perimeter_square_area(10, 20)\nprint(f'Circumference result: {circumference_result}, Broad Result: {broad_result}')","480cf602":"weight = int(input(\"Weight : \"))\nunit = input(\"(L)bs or (K)g : \")\n\nif unit.upper() == \"L\":\n    converted = weight * 0.45\n    print(f\"You are {converted}\")\nelse:\n    converted = weight \/ 0.45\n    print(f\"You are {converted}\")","5c456fc7":"import random\n\nclass Dice:\n    def roll(self):\n        first = random.randint(1, 6)\n        second = random.randint(1, 6)\n        return first, second\n\ndice = Dice()\nprint(dice.roll())","0dafed9a":"color = input(\"Enter a color : \") \nplural_noun = input(\"Enter a plural noun : \") \nverb = input(\"Enter a verb : \") \nadjective = input(\"Enter a adjective : \") \n\nprint(\"-\" * 10) \n\nprint(\"roses are \" + color) \nprint(plural_noun + \" are blue\") \nprint(\"when the chicken goes \" + verb) \nprint(\"your grandma is \" + adjective) ","43010eb9":"def number():\n    print(\"\")\n    num1 = float(input(\"Enter first number : \"))\n    op = input(\"Enter operator : \")\n    num2 = float(input(\"Enter second number : \"))\n\n    if op == \"+\":\n        print(\"\")\n        print(num1 + num2)\n    elif op == \"-\":\n        print(\"\")\n        print(num1 - num2)\n    elif op == \"\/\":\n        print(\"\")\n        print(num1 \/ num2)\n    elif op == \"*\":\n        print(\"\")\n        print(num1 * num2)\n    else:\n        print(\"\")\n        print(\"Invalid operator\")\n\n\nif __name__ == '__main__':\n    number()","1757e1f8":"secret_word = \"you\"\nguess = \"\"\nguess_count = 0\nguess_limit = 3\nout_of_guess = False\n\nwhile guess != secret_word and not(out_of_guess):\n    if guess_count < guess_limit:\n        guess = input(\"Enter guess : \").lower()\n        guess_count += 1\n    else:\n        out_of_guess = True\n\nif out_of_guess:\n    print(\"Out of guesses, YOU LOSE!\")\nelse:\n    print(\"YOU WIN!\")","b856b80f":"larger_so_far = -1\nprint('Before', larger_so_far)\n\nfor value_large in [9, 41, 13, 3, 74, 15]:\n    if value_large > larger_so_far:\n        larger_so_far = value_large\n    print(larger_so_far, value_large)\n\nprint('Larger so far ', larger_so_far)","1b59ae31":"smallest = None\nprint('Before', smallest)\n\nfor value_small in [9, 41, 13, 3, 74, 15]:\n    if smallest is None:\n        smallest = value_small\n    elif value_small < smallest:\n        smallest = value_small\n    print(smallest, value_small)\n    \nprint('After', smallest)","cbb30930":"total = count = average = 0\n\nwhile True:\n    num_input = input('Enter a number: ')\n    if num_input == 'done':\n        print(f'Total: {total}, Count: {count}, Average: {average}')\n        break\n    try:\n        count += int(num_input)\n        total += 1\n        average = total\/count\n    except ValueError:\n        print('Invalid input')","ae4be1db":"fruit, index = 'banana', 0\n\nwhile index < len(fruit):\n    letter = fruit[index]\n    print(f'index: {index}, letter: {letter}\\n')\n    index += 1\n\n# Prettier way\nfor letter in fruit:\n    print(f'prettier: {letter}\\n')\n\n# Loop and counting\nword, count = 'banana', 0\n\nfor letter in word:\n    if letter == 'a':\n        count += 1\nprint(f'loops: {count}\\n')","8bf2c6e5":"str = 'X-DSPAM-Confidence: 0.8475'\npos = str.find(' ')\nvalue = float(str[pos:])\nprint(value)\nprint(type(value))","ad182e3e":"n = int(input('Input Number: '))\n\nfor i in range(1, n+1):\n    if (n % i == 0):\n        print(i, 'is factor from ',n)\n    else:\n        print(i, 'is not a factor from ',n)","953e6dee":"n = int(input('Input Number: '))\n\nfor i in range(0, n+1):\n    if (i % 2):\n        print(i, \"is an even number of \", n)\n    else:\n        print(i, \"is an odd number of\", n)","adb50464":"def step(x):\n    tmp = 0\n    if x >= 0:\n        tmp = 1\n    return tmp\n\nstep(10)","76688ec5":"def relu(x):\n    tmp = 0\n    if x > 0:\n        tmp = x\n    return tmp\n\nrelu(10)","995f0838":"def plus(x, y):\n    print(x + y)\n    \nplus(10, 20)","0d34251a":"def binary_search(list, item):\n    low = 0\n    high = len(list)-1\n    \n    while low <= high:\n        mid = (low + high) \/\/ 2\n        guess = list[mid]\n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n\nmylist = [1, 3, 5, 7, 9]\nprint(f'the number is in index: {binary_search(mylist, 7)}')","9de6f32a":"n = input('')\n\nlist_word = n.split(' ')\n\nlongest_word = list_word[0]\n\nfor word in list_word[0:]:\n    if len(word) > len(longest_word):\n        longest_word = word\n\nprint(f'longest word: {longest_word}')","fe60cb92":"student = ['Guido Van Rossum', 'Steve Jobs', 'Elon Musk', 'Bill Gates']","1b48ea59":"for i in range(len(student)-1):\n    for j in range(i+1, len(student)):\n        if student[i].split()[-1] > student[j].split()[-1]:\n            student[i], student[j] = student[j], student[i]\n            \nprint(f'sorted: {student}')","58bcf268":"sorted_student = sorted(student, key=lambda x: x.split()[-1])\n\nprint(f'sorted: {student}')","3f4b5aec":"> # **1. BMI Converter**","d99a7525":"> # **7. Dice Roll**","e192b5d1":"> # **2. Data Entry**","dd24fe9b":"> # **3. Convert Number into Text**","5b53f283":"> # **11. Finding the Large Number**","93d0b1b3":"> # **16. Determine the Number is a Factor or Not**","d0986b52":"> # **17. Determine Odd or Even Numbers**","663cdf47":"> # **13. Counting a Number**","b1c184e2":"> # **10. Guessing Games**","aba3f0bc":"> # **14. Looping Through Strings**","cf44dbbb":"> ### **Step 2**","d82ef43e":"> # **12. Finding the Smallest Number**","5e39a39e":"> # **19. Binary Search**","1fa15e5a":"> # **20. Longest Word Search Program**","83cdca2f":"> # **21. Sorted Word From The Last Names**","2f6da7a3":"> # **6. Weight Converter**","3ebd9cfd":"> ## **That's it, I'll add more simple python program asap, don't forget to give me an upvote if you like it!**","6905bf72":"> ### **Step 1**","03543e9a":"> # **18. Functions and Procedures**","66e4d3b3":"> ### **1. Step Function**","13734e3e":"> # **4. Stack**","1792ff10":"> # **5. Perimeter and Square Area**","f0ab3897":"> # **15. Change the String into Float**","2e04b1b3":"> # **8. Madlibs**","86b38684":"> # **9. Calculator**","ff9cbe06":"> ### **3. Procedure**","53bcd787":"> # **Welcome!**\n\n> **I have created 22 simple python program that may be useful for you, if there that I have a mistake in my code, please give me a feedback, so I can fix it asap, thanks in advance!**","6fb318ea":"> ### **2. RelU Function**"}}