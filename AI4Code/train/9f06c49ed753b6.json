{"cell_type":{"4ca6bb4b":"code","7af570ce":"code","a810e3d8":"code","d39e8605":"code","f7ace78c":"code","9876b23e":"code","782df317":"code","ac9373d1":"code","6bb1551b":"code","6d8e6336":"code","a218ab64":"code","f9c41afe":"code","7f824b30":"code","dc8b63b2":"code","4300e050":"code","f67c7ad4":"code","3c88d340":"code","59f34593":"code","c3335469":"code","8b8ddfce":"code","d53880cf":"code","ee0c9f9e":"code","a15151cc":"code","c940360a":"code","1b030c00":"code","49ec9baa":"markdown"},"source":{"4ca6bb4b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","7af570ce":"test_data = pd.read_csv('\/kaggle\/input\/learn-together\/test.csv')\n\ntrain_data = pd.read_csv('\/kaggle\/input\/learn-together\/train.csv')","a810e3d8":"test_data.columns","d39e8605":"test_data.shape","f7ace78c":"train_data.columns","9876b23e":"train_data_1 = train_data[[\n                         'Elevation',\n                         'Slope',\n                         'Aspect',\n                         'Hillshade_Noon',\n                        'Cover_Type']].copy()\ntrain_data_1.head()","782df317":"train_data_1.shape","ac9373d1":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","6bb1551b":"train_data_1.plot.scatter(x='Elevation', y='Hillshade_Noon', c='Pink', figsize=(24,18))","6d8e6336":"train_data_1.plot.scatter(x='Elevation', y='Slope', c='Green', figsize=(24,18))","a218ab64":"train_data_1.plot.scatter(x='Cover_Type', y='Hillshade_Noon', c='DarkBlue', figsize=(24,18))","f9c41afe":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import classification_report,confusion_matrix","7f824b30":"sns.pairplot(train_data_1,hue='Cover_Type')","dc8b63b2":"X = train_data_1.drop('Cover_Type',axis=1)\ny = train_data_1['Cover_Type']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)","4300e050":"dtree = DecisionTreeClassifier()","f67c7ad4":"dtree.fit(X_train,y_train)","3c88d340":"predictions = dtree.predict(X_test)","59f34593":"# Evaluation of Decision tree \nprint(classification_report(y_test,predictions))","c3335469":"from sklearn.model_selection import train_test_split","8b8ddfce":"print(confusion_matrix(y_test,predictions))","d53880cf":"rfc = RandomForestClassifier(n_estimators=500)","ee0c9f9e":"rfc.fit(X_train,y_train)","a15151cc":"predictions = rfc.predict(X_test)","c940360a":"print(classification_report(y_test,predictions))","1b030c00":"print(confusion_matrix(y_test,predictions))","49ec9baa":"**Training Random Forest Model**"}}