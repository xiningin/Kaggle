{"cell_type":{"86e92f46":"code","702e4cfa":"code","bf69f866":"code","ea3bc8f2":"code","16e7508a":"code","27717f91":"code","533e2c0c":"code","3b045fcf":"code","11ef59af":"code","cb9bab84":"markdown"},"source":{"86e92f46":"from sklearn import datasets\nfrom sklearn import svm\nimport numpy as np\nimport matplotlib.pyplot as plt ","702e4cfa":"iris_dataset = datasets.load_iris()\nprint (\"Iris data set Description :: \", iris_dataset['DESCR'])\nprint (\"Iris feature data :: \", iris_dataset['data'])\nprint (\"Iris target :: \", iris_dataset['target'])","bf69f866":"def visuvalize_sepal_data():\n\tiris = datasets.load_iris()\n\tX = iris.data[:, :2]  # we only take the first two features.\n\ty = iris.target\n\tplt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm)\n\tplt.xlabel('Sepal length')\n\tplt.ylabel('Sepal width')\n\tplt.title('Sepal Width & Length')\n\tplt.show()\n \nvisuvalize_sepal_data()","ea3bc8f2":"def visuvalize_petal_data():\n\tiris = datasets.load_iris()\n\tX = iris.data[:, 2:]  # we only take the last two features.\n\ty = iris.target\n\tplt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm)\n\tplt.xlabel('Petal length')\n\tplt.ylabel('Petal width')\n\tplt.title('Petal Width & Length')\n\tplt.show()\n\nvisuvalize_petal_data()","16e7508a":"iris = datasets.load_iris()\nX = iris.data[:, :2]  # we only take the Sepal two features.\ny = iris.target\nC = 1.0  # SVM regularization parameter","27717f91":"# SVC with linear kernel\nsvc = svm.SVC(kernel='linear', C=C).fit(X, y)\n# LinearSVC (linear kernel)\nlin_svc = svm.LinearSVC(C=C).fit(X, y)\n# SVC with RBF kernel\nrbf_svc = svm.SVC(kernel='rbf', gamma=0.7, C=C).fit(X, y)\n# SVC with polynomial (degree 3) kernel\npoly_svc = svm.SVC(kernel='poly', degree=3, C=C).fit(X, y)","533e2c0c":"h = .02  # step size in the mesh\n \n# create a mesh to plot in\nx_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1\ny_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h),\n\t                     np.arange(y_min, y_max, h))","3b045fcf":"# title for the plots\ntitles = ['SVC with linear kernel',\n\t   'LinearSVC (linear kernel)',\n\t    'SVC with RBF kernel',\n\t    'SVC with polynomial (degree 3) kernel']","11ef59af":"for i, clf in enumerate((svc, lin_svc, rbf_svc, poly_svc)):\n\t # Plot the decision boundary. For that, we will assign a color to each\n\t # point in the mesh [x_min, x_max]x[y_min, y_max].\n\t plt.subplot(2, 2, i + 1)\n\t plt.subplots_adjust(wspace=0.4, hspace=0.4)\n \n\t Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])\n \n\t # Put the result into a color plot\n\t Z = Z.reshape(xx.shape)\n\t plt.contourf(xx, yy, Z, cmap=plt.cm.coolwarm, alpha=0.8)\n \n\t # Plot also the training points\n\t plt.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.coolwarm)\n\t plt.xlabel('Sepal length')\n\t plt.ylabel('Sepal width')\n\t plt.xlim(xx.min(), xx.max())\n\t plt.ylim(yy.min(), yy.max())\n\t plt.xticks(())\n\t plt.yticks(())\n\t plt.title(titles[i])\n \nplt.show()","cb9bab84":"<h1 align=\"center\">Assignment<\/h1>\n<h3 align=\"center\">Faisal Akhtar<\/h3>\n<h3 align=\"center\">Roll No.: 17\/1409<\/h3>\n<p>Machine Learning - B.Sc. Hons Computer Science - VIth Semester<\/p>\n<p>Using SVM, perform classification on Iris Datset.<\/p>"}}