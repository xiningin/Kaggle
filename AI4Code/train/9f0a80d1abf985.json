{"cell_type":{"2fd4bc33":"code","ce955735":"code","02f7ff95":"code","bca84f8f":"code","fc148c63":"code","a389f3c9":"code","13a9df19":"code","18552b68":"code","ed987836":"code","a2120c41":"code","f898b711":"code","a62ff417":"code","a3a4b48b":"code","3ece0407":"code","034da92d":"code","1893219c":"code","32cc5caf":"code","e6e450f7":"code","ae38d74e":"code","fb5f0a9c":"code","2d9fe3b8":"code","17f7054b":"code","06db550c":"code","0914b6a2":"code","4b4492e7":"code","7c30c3c6":"code","0a9ceb60":"code","8a9e1de7":"code","02119a77":"code","17a8d008":"code","8bc27871":"code","83eb6f9a":"code","8b3bc91d":"code","68dc56ef":"code","34145297":"code","37dc478b":"code","cc0d2559":"code","53e2fbf1":"code","22be587e":"code","cc6a875c":"code","47a3048c":"code","3b0e4f16":"code","3c53e4be":"code","c5467853":"code","4a6b74e7":"code","77c2f3e0":"code","eca876e2":"code","538f6d2e":"code","985334be":"code","7b5f2264":"code","98086353":"code","9daf51ef":"code","fbccc8e3":"code","9dc2176c":"code","656f2ef6":"code","a63bf149":"code","80313063":"code","2a904daf":"code","be8dec38":"code","d63f2b9d":"code","d04fba87":"code","ecc58eb0":"code","599b3137":"code","ab9951f9":"code","1ee28bcc":"code","c9abda00":"code","fd1a6684":"code","450b99a6":"code","8c38849c":"code","eeda2302":"code","006c3da4":"code","9108a335":"code","961281b4":"code","c741c7e2":"code","a21ecdd4":"code","16a380bd":"code","866cf65a":"code","9e76f728":"code","f4910d8a":"code","cf37c1fb":"code","a8b44579":"code","27e5dd91":"code","15e7bb0c":"code","e6806a53":"code","2151530d":"code","eeafd236":"code","611dd9c2":"code","14650864":"markdown","60e6e52c":"markdown","a4f983b5":"markdown","75efffcf":"markdown","d7704576":"markdown","f8b46473":"markdown","6fc1927a":"markdown","9cecd49e":"markdown","4b0a4168":"markdown","19e44510":"markdown","95a791ff":"markdown","8b9f5101":"markdown","4e6262d2":"markdown","da31df56":"markdown","3b41b37e":"markdown","56425bc9":"markdown","3f6b7b69":"markdown","0009660d":"markdown","21d041bf":"markdown","ec9a93f1":"markdown","51313a38":"markdown","a215e6de":"markdown","24b393f8":"markdown","4d3a5b24":"markdown","283b60cf":"markdown","993d5e5f":"markdown","ca966ef1":"markdown","5e6dd7ec":"markdown","1c8495ac":"markdown","b7018320":"markdown","d272ae98":"markdown","b3b89d34":"markdown","649c2ccf":"markdown","9d53243e":"markdown","daabbe44":"markdown","5ead4513":"markdown","18420f1f":"markdown","aadc1554":"markdown"},"source":{"2fd4bc33":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ce955735":"import numpy as np\nimport pandas as pd\npd.set_option('display.max_rows', 11000)\nimport matplotlib.pyplot as plt\nimport seaborn as sns","02f7ff95":"brand_data_org = pd.read_csv('\/kaggle\/input\/used-car-dataset-ford-and-mercedes\/merc.csv')","bca84f8f":"# Using a copy to play on the safe side, making sure the inital Dataframe won't be modified","fc148c63":"brand_data = brand_data_org.copy()","a389f3c9":"brand_data.info()","13a9df19":"# no nulls with appropriate data types","18552b68":"brand_data.describe(include='all')","ed987836":"fig, axes = plt.subplots(figsize=(15,8),nrows=2, ncols=3)\nsns.histplot(brand_data['year'],ax=axes[0,0])\nsns.histplot(brand_data['mileage'],ax=axes[0,1])\nsns.histplot(brand_data['tax'],ax=axes[0,2])\nsns.histplot(brand_data['mpg'],ax=axes[1,0])\nsns.histplot(brand_data['engineSize'],ax=axes[1,1])\nsns.histplot(brand_data['price'],ax=axes[1,2])","a2120c41":"fields_correlation = sns.heatmap(brand_data.corr(), cmap=\"YlGnBu\", annot=True)","f898b711":"sns.pairplot(brand_data, kind=\"reg\",plot_kws={'line_kws':{'color':'red'}, 'scatter_kws': {'alpha': 0.1}},diag_kind=\"hist\")","a62ff417":"year_mile_avgprice=pd.DataFrame\nyear_mile_avgprice=year_mile_avgprice({'mean_price' : brand_data.groupby( [\"year\",'mileage'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)","a3a4b48b":"import itertools\nmarker = itertools.cycle((',', '+', '.', 'o', '*','s','p','X','d','h','v','^','<','>','1','2','3','4','8','|','_','x')) \nyear_set=sorted(set(year_mile_avgprice['year']), reverse=True)\nplt.figure(figsize=(17,8))\nfor year in year_set:\n     selected_data = year_mile_avgprice.loc[year_mile_avgprice['year'] == year]\n     plt.scatter(selected_data['mileage'], selected_data['mean_price'],marker = next(marker), label=year)\nplt.xlabel('mileage')\nplt.ylabel('mean price')\nplt.legend()","3ece0407":"brand_data.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","034da92d":"brand_data.boxplot(column=['mileage'], by=['fuelType'],figsize=(15,5),vert=0)","1893219c":"brand_data.boxplot(column=['mpg'], by=['fuelType'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","32cc5caf":"brand_data.boxplot(column=['mpg'], by=['transmission'],figsize=(15,5),patch_artist = True,notch =False,vert=0)","e6e450f7":"brand_data.boxplot(column=['mpg'], by=['engineSize'],figsize=(15,5))","ae38d74e":"fig, axes = plt.subplots(figsize=(20,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).count()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).count()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).count()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).count()['price']\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'Count')\nvis_ftyp.plot(ax=axes[0,1],kind='bar',title = 'Count')\nvis_engS.plot(ax=axes[1,0],kind='bar',title = 'Count')\nvis_trans.plot(ax=axes[1,1],kind='bar',rot=360,title = 'Count')","fb5f0a9c":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Automatic']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","2d9fe3b8":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Semi-Auto']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","17f7054b":"df=pd.DataFrame\ndf=brand_data[brand_data['transmission']=='Manual']\ndf=df[df['fuelType']!='Other']\ndf=df[df['engineSize']>0]\nplt.figure(figsize=(15,5))\nplot01 = sns.boxplot(x='engineSize', y='mpg', hue='fuelType', notch=False, data=df, palette='bright')","06db550c":"brand_data.boxplot(column=['price'], by=['year'],figsize=(15,5))","0914b6a2":"brand_data.boxplot(column=['price'], by=['model'],figsize=(15,5),rot=45)","4b4492e7":"fig, axes = plt.subplots(figsize=(15,12),nrows=2, ncols=2)\nvis_models = brand_data.groupby(['model']).mean()['price'].sort_values(ascending=False)\nvis_trans = brand_data.groupby(['transmission']).mean()['price'].sort_values(ascending=False)\nvis_ftyp = brand_data.groupby(['fuelType']).mean()['price'].sort_values(ascending=False)\nvis_engS = brand_data.groupby(['engineSize']).mean()['price'].sort_values(ascending=False)\nvis_models.plot(ax=axes[0,0],kind='bar',title = 'mean price')\nvis_engS.plot(ax=axes[0,1],kind='bar',title = 'mean price')\nvis_trans.plot(ax=axes[1,0],kind='bar',rot=360,title = 'mean price')\nvis_ftyp.plot(ax=axes[1,1],kind='bar',rot=360,title = 'mean price')","7c30c3c6":"# As concluded above that tax and mpg has no correlation with price or any other feature\n# Tax and mpg columns will be dropped","0a9ceb60":"brand_notax=brand_data.drop(['tax'], axis=1)","8a9e1de7":"brand_notaxmpg=brand_notax.drop(['mpg'], axis=1)","02119a77":"brand_notaxmpg.head()","17a8d008":"## there are some zero entries in the mileage. We are concerned with used cars\n## Accordingly we will delete any car below 50 mileage records","8bc27871":"mile_min = 50\nbrand_mile = brand_notaxmpg[brand_notaxmpg['mileage']>=mile_min]","83eb6f9a":"sns.histplot(brand_mile['mileage'])","8b3bc91d":"## we will try to remove the mileage outliers by keeping the records upto 99% quartile","68dc56ef":"mile_skewness=brand_mile['mileage'].skew(axis = 0, skipna = True)","34145297":"if mile_skewness>1:\n    q = brand_mile['mileage'].quantile(0.99)\n    brand_mile= brand_mile[brand_mile['mileage']<q]\nelif mile_skewness<-1:\n    q = brand_mile['mileage'].quantile(0.01)\n    brand_mile= brand_mile[brand_data_mile['mileage']>q]","37dc478b":"sns.histplot(brand_mile['mileage'])","cc0d2559":"sns.histplot(brand_mile['year'])","53e2fbf1":"## we will try to remove the year outliers by keeping the records above 1% quartile","22be587e":"brand_year=brand_mile.copy()\nyear_skewness=brand_year['year'].skew(axis = 0, skipna = True)","cc6a875c":"if year_skewness>1:\n    q = brand_year['year'].quantile(0.99)\n    brand_year= brand_year[brand_year['year']<q]\nelif year_skewness<-1:\n    q = brand_year['year'].quantile(0.01)\n    brand_year= brand_year[brand_year['year']>q]","47a3048c":"sns.histplot(brand_year['year'])","3b0e4f16":"sns.histplot(brand_year['engineSize'])","3c53e4be":"brand_engsZ=brand_year.copy()","c5467853":"brand_engsZ = brand_engsZ[brand_engsZ.engineSize != 0]\nbrand_engsZ = brand_engsZ[brand_engsZ.engineSize < 5]","4a6b74e7":"sns.histplot(brand_engsZ['engineSize'])","77c2f3e0":"brand_fuel=brand_engsZ.copy()\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Other']\nbrand_fuel = brand_fuel[brand_fuel.fuelType != 'Hybrid']","eca876e2":"vis_ftyp = brand_fuel.groupby(['fuelType']).count()['price'].sort_values(ascending=False)","538f6d2e":"vis_ftyp.plot(kind='bar')\nplt.show()","985334be":"brand_Trans=brand_fuel.copy()\nbrand_Trans = brand_Trans[brand_Trans.transmission != 'Other']","7b5f2264":"vis_trans = brand_Trans.groupby(['transmission']).count()['price'].sort_values(ascending=False)","98086353":"vis_trans.plot(kind='bar')\nplt.show()","9daf51ef":"brand_models=brand_Trans.copy()","fbccc8e3":"vis_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)","9dc2176c":"vis_models.plot(kind='bar')\nplt.show()","656f2ef6":"# there are still some models with very few records\n# I will filter those model with only 1 record for now","a63bf149":"brand_model_count=pd.DataFrame\n\nbrand_model_count=brand_model_count({'counts' : brand_models.groupby( [ \"model\"] ).size()}).reset_index()\n\nmin_count=1\n\ncounts_sum=brand_model_count['counts'].sum(axis=0)\nbrand_model_count.drop(brand_model_count[brand_model_count.counts >= min_count].index, inplace=True)\n\na=brand_model_count['model'].tolist()\n\nfor i in range (0,len(a)):\n    brand_models.drop(brand_models[brand_models.model == a[i]].index,inplace=True)\n\nvis_audi_models = brand_models.groupby(['model']).count()['price'].sort_values(ascending=False)\n\nvis_audi_models.plot(kind='bar')\nplt.show()","80313063":"sns.histplot(brand_models['price'])","2a904daf":"brand_models.boxplot(column=['price'],figsize=(15,5),patch_artist = True,notch ='True',vert=0)","be8dec38":"# After these processing no remarkable effect is noticed on the price boxplot compared to the pervious one","d63f2b9d":"price_skewness=brand_models['price'].skew(axis = 0, skipna = True)\nprice_skewness","d04fba87":"# price is still highly skewed, we will try to visualize price with model and year for more better spotting of outliers","ecc58eb0":"brand_models.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","599b3137":"# we need to remove price outliers based on model type and year (Assuming that those are the most effective features).\n# we are going to calculate filter between 90% & 95% of each model_year price distribution \n# and exclude the rest in case the price variation is high (coefficient of varitaion >0.7)","ab9951f9":"model_cstat=pd.DataFrame\nmodel_mstat=pd.DataFrame\nmodel_sdstat=pd.DataFrame\nmodel_cstat=model_cstat({'cnt_price' : brand_models.groupby( [ \"model\",\"year\"] ).count()[\"price\"]}).reset_index()\nmodel_mstat=model_mstat({'mean_price' : brand_models.groupby( [ \"model\",\"year\"] ).mean()[\"price\"]}).reset_index()\nmodel_sdstat=model_sdstat({'std_price' : brand_models.groupby( [ \"model\",\"year\"] ).std()[\"price\"]}).reset_index()\nmodel_stats1 = pd.merge(model_cstat, model_mstat, on=[\"model\", \"year\"])\nmodel_stats2 = pd.merge(model_stats1, model_sdstat, on=[\"model\", \"year\"])\n\nmodel_stats2['std_price'] = model_stats2['std_price'].fillna(0)\n\nmodels_prices=brand_models.copy()\n\nmodels_prices = models_prices.merge(model_stats2, how='inner', left_on=[\"model\", \"year\"], right_on=[\"model\",\"year\"])\nx=1.5\ny=0.7\nmodels_prices['var_coeff']=models_prices['std_price']\/models_prices['mean_price']\nmodels_prices['price_L95']=models_prices['mean_price']-x*models_prices['std_price']\nmodels_prices['price_R95']=models_prices['mean_price']+x*models_prices['std_price']\nmodels_prices['price_L95'] =models_prices['price_L95'].astype(int)\nmodels_prices['price_R95'] =models_prices['price_R95'].astype(int)\n\ndef drop_price(models_prices):\n\n    if (models_prices['var_coeff']>y) and (models_prices['cnt_price'] <4):\n        return 'drop'\n    elif (models_prices['price'] > models_prices['price_R95']) or (models_prices['price'] < models_prices['price_L95']):\n        return 'drop'\n    else:\n        return 'keep'\nmodels_prices['drop_price'] = models_prices.apply(drop_price, axis = 1)\nmodels_prices = models_prices[models_prices.drop_price !='drop']","1ee28bcc":"models_prices.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","c9abda00":"price_skewness=models_prices['price'].skew(axis = 0, skipna = True)\nprice_skewness","fd1a6684":"models_prices = models_prices[models_prices.price <100000]\nprice_skewness=models_prices['price'].skew(axis = 0, skipna = True)\nprice_skewness","450b99a6":"models_prices.boxplot(column=['price'], by=['model','year'],figsize=(15,5),rot=90)","8c38849c":"# Let us calculate the percentage of records removed out of the original dataset","eeda2302":"data_removed_perct=100*(len(brand_data)-len(models_prices))\/len(brand_data)\ndata_removed_perct","006c3da4":"# Data removed is a bit high but accepted","9108a335":"Brand_preprocessed=models_prices.copy()","961281b4":"Brand_preprocessed=Brand_preprocessed.reset_index(drop=True)","c741c7e2":"Brand_preprocessed.info()","a21ecdd4":"Brand_preprocessed.columns.values","16a380bd":"cols=['price','model', 'year', 'transmission', 'mileage', 'fuelType',\n      'engineSize', 'cnt_price', 'mean_price', 'std_price',\n      'var_coeff', 'price_L95', 'price_R95', 'drop_price']","866cf65a":"brand_arranged=Brand_preprocessed.copy()\nbrand_arranged=Brand_preprocessed[cols]","9e76f728":"brand_arranged=brand_arranged.drop(['cnt_price', 'mean_price', 'std_price',\n       'var_coeff', 'price_L95', 'price_R95', 'drop_price'], axis=1)","f4910d8a":"brand_arranged.describe(include='all')","cf37c1fb":"year_model_mmile=pd.DataFrame\nyear_model_mmile=year_model_mmile({'mean_mileage' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"mileage\"]}).reset_index().sort_values(by='year',ascending=True)","a8b44579":"model_set=sorted(set(year_model_mmile['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mmile.loc[year_model_mmile['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_mileage'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean mileage')\nplt.legend()","27e5dd91":"## Generally, mileage is higher for older cars","15e7bb0c":"year_model_mprice=pd.DataFrame\nyear_model_mprice=year_model_mprice({'mean_price' : brand_arranged.groupby( [\"year\",'model'] ).mean()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mprice.loc[year_model_mprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['mean_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('mean price')\nplt.legend()\nplt.show()","e6806a53":"year_model_mnprice=pd.DataFrame\nyear_model_mnprice=year_model_mnprice({'min_price' : brand_arranged.groupby( [\"year\",'model'] ).min()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mnprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mnprice.loc[year_model_mnprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['min_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('min price')\nplt.legend()\nplt.show()","2151530d":"year_model_mxprice=pd.DataFrame\nyear_model_mxprice=year_model_mxprice({'max_price' : brand_arranged.groupby( [\"year\",'model'] ).max()[\"price\"]}).reset_index().sort_values(by='year',ascending=True)\n\nmodel_set=sorted(set(year_model_mxprice['model']))\nplt.figure(figsize=(17,8))\nfor model in model_set:\n     selected_data = year_model_mxprice.loc[year_model_mxprice['model'] == model]\n     plt.plot(selected_data['year'], selected_data['max_price'],marker = next(marker), label=model)\nplt.xlabel('year')\nplt.ylabel('max price')\nplt.legend()\nplt.show()","eeafd236":"brand_final=brand_arranged.drop(['year'], axis=1)","611dd9c2":"# The remaining brands has been explored and preproceesed in the same manner and saved as csv\n\n  # https:\/\/www.kaggle.com\/enginsights\/vw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/vauxhall-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/bmw-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/audi-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/hyundai-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/skoda-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/toyota-preprocessing-and-exploration\n  # https:\/\/www.kaggle.com\/enginsights\/ford-preprocessing-and-exploration\n\n# All CSVs of processed data of all brands will be imported to separate notebook where a regression model is applied\n\n# Please refer to 100K UK Used Cars Model\n\n  # https:\/\/www.kaggle.com\/enginsights\/100k-uk-used-cars-model","14650864":"### mileage vs mean price [grouped by year]","60e6e52c":"### Tax feature","a4f983b5":"# Packages","75efffcf":"## Dropping Unwanted Fields","d7704576":"## Re-arranging Columns","f8b46473":"### mpg, fuel type and transmission","6fc1927a":"# Loading Data","9cecd49e":"## Further Exploration of Data (Categorical Features and Outliers Visulaization)","4b0a4168":"### Price","19e44510":"### mpg and transmission","95a791ff":"### Year Feature","8b9f5101":"### Correlogram for additional visulatization of the relation between each two features ","4e6262d2":"### Engine Size feature","da31df56":"### Transmission","3b41b37e":"### mpg and engine size","56425bc9":"## Brand","3f6b7b69":"### Fuel Type and Mileage","0009660d":"### Price","21d041bf":"### Year-Model Vs Mean Mileage","ec9a93f1":"## Copying Datasets","51313a38":"## Additional Graphs after Processing Data","a215e6de":"# Exploring Dataset","24b393f8":"## Finding Correlations","4d3a5b24":"### Data Fields Distribution Graphs","283b60cf":"### Count of Features","993d5e5f":"### Year-Model vs Max Price","ca966ef1":"### Year-Model vs Mean Price","5e6dd7ec":"## Data Exploration","1c8495ac":"### Model","b7018320":"### price and year ","d272ae98":"## Preprocessing","b3b89d34":"### Year-Model vs Min Price","649c2ccf":"### Fuel Type and mpg","9d53243e":"### Mean Price vs Other Features","daabbe44":"### Preocessing Checkpoint","5ead4513":"### Fuel Type","18420f1f":"### Price and model","aadc1554":"### Mileage feature"}}