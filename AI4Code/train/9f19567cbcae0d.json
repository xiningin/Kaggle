{"cell_type":{"05e27c24":"code","105d53c0":"code","676288c1":"code","51274e68":"code","31b60825":"code","17b772e8":"code","5ff7dfc9":"code","b0dd13d4":"code","9c13249b":"code","bcdcaa1a":"code","7264de92":"code","bc2ab895":"code","a0a5f6b8":"code","4aaed910":"code","0151362a":"code","08caac93":"code","f37ccbef":"code","d0a45838":"code","86ce2db4":"code","d51d0534":"code","7e42a774":"code","bda20895":"code","1647992e":"code","174f322a":"code","ef38464a":"code","d32ded1b":"code","8700dd6f":"code","6b02bc67":"code","3697b5db":"code","4ea13908":"code","90288d7e":"code","a1a72956":"code","abf6574d":"code","4cb2bd30":"code","e3510837":"code","b70295c5":"code","c7682f16":"code","4c5e75ef":"code","e7c7da23":"code","5f791edf":"code","a0b651f0":"code","9c9367cd":"code","d7a30576":"code","f3cbb041":"code","198871ba":"code","7566ed44":"code","ceb713bf":"code","f5aef5b7":"code","fe686482":"code","35a730c8":"code","01d3d9fc":"code","8c03b3da":"code","c6736ce3":"code","654a82e8":"code","09453702":"code","3d0a1660":"code","2667a8ce":"code","885dfa15":"code","95a898f1":"code","afa1b1aa":"code","c1bfed28":"code","eb5043d2":"code","25d52240":"code","5cfacebf":"code","9feb72e8":"code","49403621":"code","39e0e6c0":"code","604bd8fe":"code","6793f4ec":"code","b67938d5":"code","e5d64f96":"code","a8c1a9f3":"code","6ceb7926":"code","ce0b59d8":"code","d4a0e8d5":"code","ec4f6cd7":"code","85586302":"code","802b7c08":"code","b26b8348":"code","702d9c78":"code","0414c90d":"code","21968f50":"code","eaa0dc26":"code","ece477c7":"code","feddcd56":"code","7a92408a":"code","7702125a":"code","05ff9fea":"code","69863dc4":"code","533934bb":"code","d21d1757":"code","e103c630":"code","7cbc6594":"code","88722696":"code","6beff3b5":"code","6b204ae1":"code","049a1cea":"code","184f7f4f":"code","0d36cf52":"code","12281bcb":"code","9673529a":"code","53bcb13e":"code","4b966a48":"code","9c95f5b3":"code","ed1fb38b":"code","c588956c":"code","cacf1743":"code","337a9d89":"code","0fb74449":"markdown","7351ade4":"markdown","454c4fea":"markdown","23dd443d":"markdown","0f97fb37":"markdown","6e76cc04":"markdown","337a9431":"markdown","da065f80":"markdown","9a9e2128":"markdown","12b465ea":"markdown","93ded74e":"markdown","832597b3":"markdown","574e5936":"markdown","6acbf092":"markdown","b8e43845":"markdown","5248e929":"markdown","f5d2385a":"markdown","b500d3af":"markdown","2d97ae1a":"markdown","07b6973a":"markdown","9deb44c4":"markdown","c7dba529":"markdown","bfcfaa92":"markdown","907be84c":"markdown","b58b9ea2":"markdown","fb23838e":"markdown","38caedc2":"markdown","6f772901":"markdown","d6309a86":"markdown","15240115":"markdown","1d8f56cb":"markdown","3ad285b8":"markdown","e77d6fd9":"markdown","83772a13":"markdown"},"source":{"05e27c24":"!pip install pydotplus","105d53c0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport xgboost as xgb\nimport statsmodels.api as sm\nfrom plotnine import *\n%matplotlib inline\nfrom collections import Counter\nfrom xgboost import XGBRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.ensemble import GradientBoostingRegressor\n\nfrom ipywidgets import Image\nfrom io import StringIO\nimport graphviz\nfrom sklearn.tree import export_graphviz","676288c1":"df = pd.read_csv('..\/input\/amphibians-data-set\/dataset.csv',delimiter=';')\nnew_header = df.iloc[0]\ndf = df[1:]\ndf.columns = new_header","51274e68":"df.head()","31b60825":"df.info()","17b772e8":"df.describe()","5ff7dfc9":"for feature in df.columns:\n    print(feature,df[feature].isnull().sum(),'of',df.shape[0],'values are missing')","b0dd13d4":"numerical_variables = ['ID','SR','NR']\ncategorical_variables = list(set(df.columns)-set(numerical_variables))","9c13249b":"category2 = [\"SUR1\", \"SUR2\", \"SUR3\"]\nfor c in category2:\n    print(\"{} \\n\".format(df[c].value_counts()))","bcdcaa1a":"ds = df.copy()  ","7264de92":"def bar_plot(variable):\n    # get feature\n    var = ds[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (6,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    #print(\"{}: \\n {}\".format(variable,varValue))","bc2ab895":"for i in categorical_variables:\n    bar_plot(i)","a0a5f6b8":"ds.columns","4aaed910":"species = ['Green frogs','Brown frogs','Common toad','Fire-bellied toad','Tree frog',\\\n    'Common newt','Great crested newt']\ndf['Species'] = df[species].astype(np.int).sum(axis=1)\ndf=df.drop(species, axis=1)","0151362a":"data_copy = df.copy()\n\ndata_copy['Motorway'] = data_copy['Motorway'].replace('A1', 1)\ndata_copy['Motorway'] = data_copy['Motorway'].replace('S52', 2)\ndata_copy = data_copy.apply(pd.to_numeric) \ndata_copy = data_copy.drop(['ID'],axis=1)\nplt.figure(figsize=(16, 6))\nax = sns.heatmap(data_copy.corr(),vmin=-1,vmax=1, annot=True)","08caac93":"df.head()","f37ccbef":"data = df.copy()\n\ndata['Motorway'] = data['Motorway'].replace('A1', 1)\ndata['Motorway'] = data['Motorway'].replace('S52', 2)\n\n#ax = sns.heatmap(data, annot=True)","d0a45838":"data = data.apply(pd.to_numeric) ","86ce2db4":"data = data.drop(['ID'],axis=1)","d51d0534":"def detect_outliers(df2,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(df2[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(df2[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n\n        # detect outlier and their indeces\n        outlier_list_col = df2[(df2[c] < Q1 - outlier_step) | \\\n                               (df2[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers","7e42a774":"df.loc[detect_outliers(data,data.columns)]","bda20895":"df.drop(detect_outliers(data,data.columns),inplace=True)","1647992e":"df2 = df.copy() #Using df2 to label encoding","174f322a":"for i in species:\n    try:\n        categorical_variables.remove(i)\n    except:\n        continue\ncategorical_variables.remove('Motorway')","ef38464a":"df2[categorical_variables] = df[categorical_variables].astype('int')","d32ded1b":"df2['TR'].replace({1:'natural reservoirs', 2:'recently formed', 5:'technological',\n                   7:'garden',11:'trenches', 12:'wet meadows', 14:'river valleys',\n                   15:'small watercourses'}, inplace=True)\ndf2['VR'].replace({0:'no vegetation', 1:'patches at the edges', 2:'heavily overgrown',\n                   3:'some part devoid of vegetation',4:'reservoirs completely overgrown'},\\\n                  inplace=True)\nfor i in ['SUR1','SUR2','SUR3']:\n    df2[i].replace({1:'forest areas', 2:'meadows', 4:'gardens',\n                   6:'industrial areas',10:'river valleys', 7:'orchards', 9:'roads',\n                   14:'agricultural'}, inplace=True)\ndf2['UR'].replace({0:'unused', 1:'scenic', 3:'technological'}, inplace=True)\ndf2['FR'].replace({0:'lack', 1:'intense fishing', 2:'breeding reservoirs',\\\n                   3:'remove',4:'remove'}, inplace=True)\ndf2['OR'].replace({25:'poor access', 50:'low access', 75:'medium access',100:'large access',\\\n                   99:'remove',80:'remove'}, inplace=True)\ndf2['RR'].replace({0:'<50 m', 1:'50-100 m', 2:'100-200 m',5:'200-500 m',9:'500-1000 m',\\\n                   10:'>10000'}, inplace=True)\ndf2['BR'].replace({0:'<50 m', 1:'50-100 m', 2:'100-200 m',5:'200-500 m',9:'500-1000 m',\\\n                   10:'>10000'}, inplace=True)\ndf2['MR'].replace({0:'Clean', 1:'slightly littered', 2:'heavily littered'}, inplace=True)\ndf2['CR'].replace({1:'Natural', 2:'Concrete'}, inplace=True)","8700dd6f":"df2.head()","6b02bc67":"df3 = pd.get_dummies(df2.drop(['ID','SR','NR','Species'],axis=1))\nframes = [df2[['ID','SR','NR','Species']],df3]\ndf_res = pd.concat(frames,axis=1)","3697b5db":"df_res.head()","4ea13908":"#%%time\nbinary_data=df_res.loc[:,'TR_garden':]\n\nfor i, col in enumerate(binary_data.columns):\n    plt.figure(i,figsize=(6,4))\n    sns.countplot(x=col, hue=df_res['Species'] ,data=df_res, palette=\"rainbow\")\n    plt.show()","90288d7e":"numerical = df_res[[\"SR\",\"NR\",\"Species\"]]\ncategorical=df_res.drop([\"SR\",\"ID\",\"NR\",\"Species\"],axis=1)\n\nscaler = StandardScaler()\nnumerical = pd.DataFrame(scaler.fit_transform(numerical))\nnumerical.columns = [\"SR\",\"NR\",\"Species\"]","a1a72956":"df_new = pd.concat([df['ID'],numerical, categorical], axis=1, join='inner')","abf6574d":"df_new.head()","4cb2bd30":"binary_data=df_new.loc[:,'TR_garden':]","e3510837":"df[categorical_variables] = df[categorical_variables].astype('int')\ndf['SR'] = df['SR'].astype('int')\ndf['NR'] = df['NR'].astype('int')\ndata=df.drop([\"ID\"],axis=1)","b70295c5":"data.head()","c7682f16":"plt.figure(figsize=(7,4))\n#sns.heatmap(data.corr())\nsns.heatmap(data.corr(),cmap='magma',linecolor='white',annot=False,linewidths=1)","4c5e75ef":"df_new = df_new.drop([\"TR_garden\",\"Motorway_A1\",\"Motorway_S52\",\"FR_remove\",\\\n                   \"OR_remove\"],axis=1)","e7c7da23":"y=df_new['Species']\nx=df_new.drop([\"Species\"],axis=1)\nX=pd.DataFrame(x)","5f791edf":"df.head()","a0b651f0":"y = df[\"Species\"]\nx = df.drop([\"Species\",\"ID\",\"Motorway\"],axis=1)","9c9367cd":"x.head()","d7a30576":"plt.figure(figsize=(7,5))\nsns.distplot(y)\nplt.show()","f3cbb041":"x_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2,random_state=42)","198871ba":"xgb = XGBRegressor().fit(x_train, y_train)","7566ed44":"models_accuracy = {}\ny_pred = xgb.predict(x_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","ceb713bf":"xgb","f5aef5b7":"xgb_grid = {\n    'colsample_bytree': [0.4, 0.5, 0.6, 0.9 ,1],\n    'n_estimators': [100, 200, 500, 1000],\n    'max_depth': [2, 3, 4, 5, 6],\n    'learning_rate': [0.1, 0.01, 0.5]\n}","fe686482":"xgb = XGBRegressor()\nxgb_cv = GridSearchCV(xgb, \n                     param_grid = xgb_grid,\n                     cv=10,\n                     n_jobs = -1,\n                     verbose = 2)\nxgb_cv.fit(x_train, y_train)","35a730c8":"xgb_cv.best_params_","01d3d9fc":"xgb_tuned = XGBRegressor(colsample_bytree = 0.4,\n                         learning_rate = 0.01,\n                         max_depth = 2,\n                         n_estimators = 500)\nxgb_tuned = xgb_tuned.fit(x_train, y_train)","8c03b3da":"y_pred = xgb_tuned.predict(x_test)\nmodels_accuracy['xgboost_label_encoding'] = np.sqrt(mean_squared_error(y_test, y_pred))","c6736ce3":"Importance=pd.DataFrame({\"Importance\":xgb_tuned.feature_importances_*100},\n                       index = x_train.columns)","654a82e8":"Importance","09453702":"Importance.sort_values(by=\"Importance\",\n                      axis=0,\n                      ascending=True).plot(kind=\"barh\",color=\"green\")\nplt.xlabel(\"Importance level of values\")","3d0a1660":"model=sm.OLS(xgb_tuned.predict(x_test), x_test)\nmodel.fit().summary()","2667a8ce":"df.head()","885dfa15":"x.head()","95a898f1":"rf = RandomForestRegressor(n_estimators=100,max_depth=3,random_state=42)\nrf.fit(x_train,y_train)","afa1b1aa":"mae = mean_absolute_error(rf.predict(x_test),y_test)\nmse = mean_squared_error(rf.predict(x_test),y_test)\nrmse = np.sqrt(mse)\n\nprint(\"mean absolute error: %.2f\" % mae)\nprint(\"mean squared error: %.2f\" % mse)\nprint(\"root mean squared error: %.2f\" % rmse)","c1bfed28":"d_tree99 = rf.estimators_[99]    #estimator \u2116100\ndot_data = StringIO()\nexport_graphviz(d_tree99, feature_names = x.columns,\n               out_file = dot_data, filled = True, rounded=True)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(value = graph.create_png())","eb5043d2":"rf_params = {\"max_depth\":[2,5,8,10],\n             \"max_features\":[2,5,8],\n             \"n_estimators\":[10,500,1000],\n             \"min_samples_split\":[2,5,10]}","25d52240":"rf_model = RandomForestRegressor()\nrf_cv_model = GridSearchCV(rf_model,         #hyperparameter tuning\n                        rf_params,\n                        cv=10,       # number of folds\n                        n_jobs=-1,   #``-1`` means using all processors\n                        verbose=2)   #Controls the verbosity: the higher, the more messages.","5cfacebf":"rf_cv_model.fit(x_train,y_train)\nprint(\"Best parameters: \" + str(rf_cv_model.best_params_))","9feb72e8":"rf_tuned = RandomForestRegressor(max_depth=10,\n                                  max_features=8,\n                                  min_samples_split=10,\n                                  n_estimators=1000)\nrf_tuned.fit(x_train,y_train)","49403621":"mae=mean_absolute_error(rf_tuned.predict(x_test),y_test)\nmse=mean_squared_error(rf_tuned.predict(x_test),y_test)\nrmse=np.sqrt(mse)\nmodels_accuracy['random_forest_label_encoding'] = rmse\nprint(\"mean_absolute_error: %.2f\"%mae)\nprint(\"mean squared error: %.2f\" %mse)\nprint(\"root mean squared error: %.2f\" %rmse)","39e0e6c0":"print(r2_score(y_test,rf_tuned.predict(x_test)))","604bd8fe":"Importance=pd.DataFrame({\"Importance\":rf_tuned.feature_importances_*100},\n                       index=x_train.columns)","6793f4ec":"Importance.sort_values(by=\"Importance\",\n                      axis=0,\n                      ascending=True).plot(kind=\"barh\",color=\"green\")\nplt.xlabel(\"Importance level of values\")","b67938d5":"model2=sm.OLS(rf_tuned.predict(x_test),x_test)\nmodel2.fit().summary()","e5d64f96":"y=df_new['Species']\nx=df_new.drop([\"Species\",'ID'],axis=1)\nX=pd.DataFrame(x)","a8c1a9f3":"X.head()","6ceb7926":"X_train, X_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=42)","ce0b59d8":"rf2=RandomForestRegressor(n_estimators=100,max_depth=3,random_state=42)\nrf2.fit(X_train,y_train)","d4a0e8d5":"mae = mean_absolute_error(rf2.predict(X_test),y_test)\nmse = mean_squared_error(rf2.predict(X_test),y_test)\nrmse = np.sqrt(mse)\n\nprint(\"mean absolute error: %.2f\" % mae)\nprint(\"mean squared error: %.2f\" % mse)\nprint(\"root mean squared error: %.2f\" % rmse)","ec4f6cd7":"d_tree99 = rf2.estimators_[99]\ndot_data = StringIO()\nexport_graphviz(d_tree99, feature_names = X.columns,\n               out_file = dot_data, filled = True, rounded=True)\ngraph = pydotplus.graph_from_dot_data(dot_data.getvalue())\nImage(value = graph.create_png())","85586302":"rf2_params = {\"max_depth\":[2,5,8,10],\n             \"max_features\":[2,5,8],\n             \"n_estimators\":[10,500,1000],\n             \"min_samples_split\":[2,5,10]}","802b7c08":"rf2_model = RandomForestRegressor()\nrf2_cv_model = GridSearchCV(rf2_model,\n                        rf2_params,\n                        cv=10,\n                        n_jobs=-1,\n                        verbose=2)\n","b26b8348":"rf2_cv_model.fit(X_train,y_train)\nprint(\"Best parameters: \" + str(rf2_cv_model.best_params_))","702d9c78":"rf2_tuned = RandomForestRegressor(max_depth=8,\n                                  max_features=5,\n                                  min_samples_split=5,\n                                  n_estimators=10)\nrf2_tuned.fit(X_train,y_train)","0414c90d":"mae = mean_absolute_error(rf2_tuned.predict(X_test),y_test)\nmse = mean_squared_error(rf2_tuned.predict(X_test),y_test)\nrmse = np.sqrt(mse)\nmodels_accuracy['random_forest_one-hot_encoding'] = rmse\nprint(\"mean absolute error: %.2f\" % mae)\nprint(\"mean squared error: %.2f\" % mse)\nprint(\"root mean squared error: %.2f\" % rmse)","21968f50":"Importance=pd.DataFrame({\"Importance\":rf2_tuned.feature_importances_*100},\n                       index=X_train.columns)","eaa0dc26":"Importance.sort_values(by=\"Importance\",\n                      axis=0,\n                      ascending=True).tail(10).plot(kind=\"barh\",color=\"green\")\nplt.xlabel(\"Importance level of values\")","ece477c7":"## from sklearn.metrics import r2_score\nprint(r2_score(y_test,rf2_tuned.predict(X_test)))","feddcd56":"model=sm.OLS(rf2_tuned.predict(X_test),X_test)\nmodel.fit().summary()","7a92408a":"gbm_model = GradientBoostingRegressor()\ngbm_model.fit(X_train, y_train)","7702125a":"y_pred = gbm_model.predict(X_test)\nnp.sqrt(mean_squared_error(y_test, y_pred))","05ff9fea":"gbm_params = {\n    \"learning_rate\": [0.01, 0.1, 0.2],\n    'max_depth': [3,5,8,50,100],\n    'n_estimators': [200, 500, 1000, 2000],\n    'subsample': [1, 0.5, 0.75],\n}","69863dc4":"gbm = GradientBoostingRegressor()\ngbm_cv_model = GridSearchCV(gbm, gbm_params, cv=10, n_jobs = -1, verbose =2)\ngbm_cv_model.fit(X_train, y_train)","533934bb":"gbm_cv_model.best_params_","d21d1757":"gbm_tuned = GradientBoostingRegressor(learning_rate = 0.01,\n                                      max_depth = 5,\n                                      n_estimators = 200,\n                                      subsample = 0.5)\ngbm_tuned = gbm_tuned.fit(X_train, y_train)","e103c630":"y_pred = gbm_tuned.predict(X_test)\nmodels_accuracy['gradient_boosting_one-hot_encoding'] =\\\n    np.sqrt(mean_squared_error(y_test, y_pred))","7cbc6594":"Importance=pd.DataFrame({\"Importance\":gbm_tuned.feature_importances_*100},\n                       index= X_train.columns)","88722696":"Importance.sort_values(by=\"Importance\",\n                      axis=0,\n                      ascending=True).tail(10).plot(kind=\"barh\",color=\"green\")\nplt.xlabel(\"Importance level of values\")\nplt.show()","6beff3b5":"## from sklearn.metrics import r2_score\nprint(r2_score(y_test,gbm_tuned.predict(X_test)))","6b204ae1":"model=sm.OLS(gbm_tuned.predict(X_test),X_test)\nmodel.fit().summary()","049a1cea":"y = df[\"Species\"]\nx = df.drop([\"Species\",\"ID\",\"Motorway\"],axis=1)\nx_train, x_test, y_train, y_test=train_test_split(x,y,test_size=0.2,random_state=42)","184f7f4f":"gbm_model2 = GradientBoostingRegressor()\ngbm_model2.fit(x_train, y_train)","0d36cf52":"y_pred2 = gbm_model2.predict(x_test)\nnp.sqrt(mean_squared_error(y_test, y_pred2))","12281bcb":"gbm_params = {\n    \"learning_rate\": [0.01, 0.1, 0.2],\n    'max_depth': [3,5,8,50,100],\n    'n_estimators': [200, 500, 1000, 2000],\n    'subsample': [1, 0.5, 0.75],\n}","9673529a":"gbm2 = GradientBoostingRegressor()\ngbm_cv_model2 = GridSearchCV(gbm2, gbm_params, cv=10, n_jobs = -1, verbose =2)\ngbm_cv_model2.fit(x_train, y_train)","53bcb13e":"gbm_cv_model2.best_params_","4b966a48":"gbm_tuned2 = GradientBoostingRegressor(learning_rate = 0.01,\n                                      max_depth = 3,\n                                      n_estimators = 200,\n                                      subsample = 0.5)\ngbm_tuned2 = gbm_tuned2.fit(x_train, y_train)","9c95f5b3":"y_pred2 = gbm_tuned2.predict(x_test)\nmodels_accuracy['gradient_boosting_label_encoding'] = \\\n    np.sqrt(mean_squared_error(y_test, y_pred2))","ed1fb38b":"Importance=pd.DataFrame({\"Importance\":gbm_tuned2.feature_importances_*100},\n                       index=x_train.columns)","c588956c":"Importance.sort_values(by=\"Importance\",\n                      axis=0,\n                      ascending=True).plot(kind=\"barh\",color=\"green\")\nplt.xlabel(\"Importance level of values\")\nplt.show()","cacf1743":"model2=sm.OLS(gbm_tuned2.predict(x_test), x_test)\nmodel2.fit().summary()","337a9d89":"models_accuracy","0fb74449":"## XGBoost with Label Encoding","7351ade4":"## Checking for outliers","454c4fea":"RMSE = 1.5419139624348617","23dd443d":"Type of water reservoirs **(TR)** is the most significant feature. Far from it are percentage access from the edges of the reservoir to undeveloped areas **(OR)** and number of water reservoirs in habitat **(NR)**.","0f97fb37":"- mean absolute error: 1.31\n- mean squared error: 2.49\n- root mean squared error: 1.58","6e76cc04":"## Labelling categorical data","337a9431":"### One-Hot Encoding","da065f80":"### Label Encoding","9a9e2128":"Numerical Variables: ID, SR, NR, OR. <br>\nCategorical Variables: all the rest. Some of them are ordinal.","12b465ea":"We have no missing values in our dataset.","93ded74e":"## Random Forest","832597b3":"RMSE = 1.8810549053444434","574e5936":"Surface of water reservoir **(SR)** is the most significant feature. Not far from it is the type of water reservoir **(TR)**.","6acbf092":"- Highly positively correlated features:<br>NR and SR, FR and UR, RR and BR.\n- Highly negatively correlated features:<br>UR and VR, FR and VR. \n- Species are weakly correlated with VR, SUR1, SUR2, RR, BR.","b8e43845":"### One-Hot Encoding","5248e929":"One-hot encoding models are more accurate than models with label encoding. The lowest root-mean-square error is done by Random Forest prediction.","f5d2385a":"RMSE = 1.203","b500d3af":"### Label Encoding","2d97ae1a":"RMSE = 1.089","07b6973a":"RMSE = 1.719","9deb44c4":"## Gradient Boosting","c7dba529":"RMSE:\n- Xgboost Label encoding: 1.5419,\n- Random forest Label encoding: 1.5682,\n- Random forest One-hot encoding: 1.0693,\n- Gradient boosting One-hot encoding: 1.0948,\n- Gradient boosting Label encoding: 1.5272","bfcfaa92":"Surface of water reservoir **(SR)** is the most significant feature. Number of water reservoirs in habitat **(NR)** is the second.","907be84c":"- mean_absolute_error: 1.27\n- mean squared error: 2.42\n- root mean squared error: 1.56","b58b9ea2":"# Modelling","fb23838e":"RMSE = 1.554","38caedc2":"Remake plotnine visualization","6f772901":"# EDA","d6309a86":"Surface of water reservoir (**SR**) is the most significant feature. ","15240115":"- mean absolute error: 0.84\n- mean squared error: 1.10\n- root mean squared error: 1.05","1d8f56cb":"- df - is the dataset made for Label encoding\n- df_new - is the dataset made for One-hot encoding","3ad285b8":"Surface of water reservoir (**SR**) is the most significant feature. Not far from it is the type of water reservoir (**TR**).","e77d6fd9":"- mean absolute error: 0.80\n- mean squared error: 1.05\n- root mean squared error: 1.02","83772a13":"R-squared is 0.1369."}}