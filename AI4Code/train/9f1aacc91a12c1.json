{"cell_type":{"aba344d3":"code","b4303257":"code","8ff325fc":"code","d4f5c969":"code","02c00f61":"code","d9d5778c":"code","f82e75fa":"code","dedabbfe":"code","e46f33f4":"code","2e73602b":"code","03d3518a":"code","e3a341fc":"code","f7d2f957":"code","4da34583":"code","bf054024":"code","b213eb61":"code","2a9e70f0":"code","2f70db65":"code","6415babd":"code","3500821c":"code","b64a9206":"code","1c2f5417":"code","83a60717":"code","6167a41e":"code","60bb2d24":"code","57510303":"code","6d877312":"code","1b55c22f":"code","12900c79":"code","d95f6aa0":"code","ca0606a9":"code","5a3eb6e5":"code","c9cf43fa":"markdown","8688658a":"markdown","6f6a845b":"markdown","a6bed0dd":"markdown","d6227bb0":"markdown","692fbabd":"markdown","4b71e28a":"markdown","29de53e8":"markdown","e0ce9cc5":"markdown","0005b9fb":"markdown","739968c3":"markdown","290d33d0":"markdown","c9086071":"markdown","e0933c91":"markdown","8229b526":"markdown","0df8553a":"markdown","18ab8dfc":"markdown","dc909da7":"markdown","daf02621":"markdown"},"source":{"aba344d3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n%matplotlib inline","b4303257":"df = pd.read_csv('..\/input\/annual-energy-consumption-from-singapore-buildings\/listing-of-building-energy-performance-data-for-commercial-buildings.csv')","8ff325fc":"df.head()","d4f5c969":"df.info()","02c00f61":"df.isnull().sum()","d9d5778c":"sns.heatmap(df.isnull())","f82e75fa":"df = df.dropna(subset = ['buildingaddress','2017energyuseintensity','2018energyusintensity']).reset_index(drop=True)","dedabbfe":"df = df.drop(['buildingname','buildingsize','voluntarydisclosure'], axis=1).reset_index(drop=True)","e46f33f4":"df.isnull().sum()","2e73602b":"df[['greenmarkrating','greenmarkyearaward']]","03d3518a":"def splitpostalcode(address):\n    code = address.split(', ')[1].split(' ')[1]\n    return code","e3a341fc":"df['postalcode'] = df['buildingaddress'].apply(lambda x : splitpostalcode(x))","f7d2f957":"df['postalcode']","4da34583":"df['grossfloorarea'] = df['grossfloorarea'].str.replace(',','').astype(int)","bf054024":"df['buildingtype'].unique()","b213eb61":"df['buildingtype'] = df['buildingtype'].apply(lambda x : 'University' if x == 'Univerisity' else x)","2a9e70f0":"df = df.rename(columns={'2018energyusintensity':'2018energyuseintensity'})","2f70db65":"df","6415babd":"color_2_types = ['DarkGray','LawnGreen']\ncolor_rating = dict(Certified='DarkGreen', Legislated='Red', Gold='Gold', GoldPlus='DarkGoldenRod', NotCertified='Black', Platinum='#e5e4e2')","3500821c":"def newLegend(fig, newNames):\n    for item in newNames:\n        for i, elem in enumerate(fig.data[0].labels):\n            if elem == item:\n                fig.data[0].labels[i] = newNames[item]\n    return(fig)","b64a9206":"fig = px.pie(df, \n             names='greenmarkstatus',\n             color_discrete_sequence=color_2_types, \n             title='Composition Green Building in Singapore', \n            )\n\nfig.update_traces(textposition='inside', \n                  textinfo='percent+label+value',\n                  textfont_size=16, \n                  showlegend=False,\n                  )\n\nfig = newLegend(fig = fig, \n                newNames = dict(No='Normal Building',\n                                Yes='GreenBuilding',\n                               )\n               )\nfig.show()","1c2f5417":"data1 = df[df['greenmarkstatus'] == 'Yes'].groupby('buildingtype').count()\ndata2 = df[df['greenmarkstatus'] == 'No'].groupby('buildingtype').count()\n\nfig = go.Figure()\nfig.add_trace(go.Bar(x=data1.index,\n                     y=data1['greenmarkstatus'],\n                     name='Green Building',\n                     marker_color='LawnGreen',\n                    )\n             )\n\nfig.add_trace(go.Bar(x=data2.index,\n                     y=data2['greenmarkstatus'],\n                     name='Normal Building',\n                     marker_color='DarkGray',\n                    )\n             )\n\nfig.update_layout(barmode='group',\n                  xaxis=dict(categoryorder='total descending'),\n                  yaxis=dict(tickvals=[0,150,300]),\n                  title='Building Type Wise Green Building',\n                 )\n\nfig.show()","83a60717":"data = df[df['greenmarkstatus'] == 'Yes'].groupby(['greenmarkrating','buildingtype']).count().reset_index()\n\nfig = px.treemap(data, \n                 path=['greenmarkrating', 'buildingtype'], \n                 values='greenmarkstatus',\n                 color='greenmarkrating',\n                 color_discrete_map=color_rating,\n                 title='Rating Wise Green Building'\n                )\n\nfig.update_layout(uniformtext_minsize=14, \n                  uniformtext_mode='hide',\n                 )\n\nfig.show()","6167a41e":"data = df.groupby('greenmarkyearaward').count().reset_index()\n\nfig = px.scatter(df, \n                 x=data['greenmarkyearaward'], \n                 y=data['greenmarkstatus'], \n                 text=data['greenmarkstatus'], \n                 size_max=16,\n                 trendline=True,\n                 range_y=[0,65],\n                 title='Year Wise Number of Green Building',\n                )\n\nfig.add_shape(\n            type=\"rect\",\n            x0=2016.5,\n            y0=0,\n            x1=2018.5,\n            y1=65,\n            line=dict(width=0,\n                     ),\n            fillcolor=\"DarkOrange\",\n            opacity=0.3,\n        )\n\n\nfig.update_traces(textposition='top center',\n                  textfont_size=16,\n                  marker=dict(symbol=[20], \n                              color='LawnGreen',\n                              size=8,\n                             ),                 \n                 )\n\nfig.update_layout(yaxis=dict(tickvals=[0,30,60],\n                             title=''),\n                  xaxis=dict(tickvals=[2006,2008,2010,2012,2014,2016,2017,2018],\n                             title=''),\n                 )\n\nfig.show()","60bb2d24":"data = df[df['greenmarkstatus']=='Yes'].sort_values('greenmarkyearaward', ascending=False)\n\nfig = px.parallel_categories(data,\n                             dimensions=['greenmarkyearaward', 'greenmarkrating','buildingtype'],\n                             labels=dict(greenmarkyearaward='Year', \n                                              greenmarkrating='Rating', \n                                              buildingtype='Type'),\n                             title='Green Building at Singapore',\n                            )\nfig.show()","57510303":"colors = ['DarkGreen', 'Gold', 'DarkGoldenRod', 'Red', 'Black', '#e5e4e2']\n\nx_data=['2017','2018']\ny_data = df.fillna('NotCertified').groupby('greenmarkrating').mean()[['2017energyuseintensity','2018energyuseintensity']].reset_index()\n\nfig = go.Figure()\n\nfor i in range(0, 6):\n    fig.add_trace(go.Scatter(x=x_data, \n                             y=y_data.iloc[i][['2017energyuseintensity','2018energyuseintensity']], \n                             mode='lines+markers',\n                             name=y_data.iloc[i]['greenmarkrating'],\n                             line=dict(color=colors[i], width=4),\n                             marker=dict(size=16),\n                            )\n                 )\n    \n    \nfig.update_layout(xaxis=dict(range=['2017','2018'], \n                             nticks=2, \n                             linecolor='Black', \n                             tickfont=dict(size=16)\n                            ),\n                  yaxis=dict(range=[230,320], \n                             tickvals=[230,280,320],\n                             linecolor='Black', \n                             tickcolor='Grey', \n                             mirror='allticks', \n                             title='Energy Intensity',\n                             tickfont=dict(size=16)\n                            ),\n                  showlegend=True,\n                  width=800,\n                  height=600,\n                  title='Energy Use Intensity from 2017-2018'\n                  )\n\nfig.show()","6d877312":"data = df\ndata['percent'] = (data['2018energyuseintensity']-data['2017energyuseintensity'])\/data['2017energyuseintensity']*100\ndata = data.fillna('NotCertified')\n\nfig = px.box(data,\n                   x=\"percent\", \n                   title='Percentage Diference between 2017 and 2018', \n                   color='greenmarkrating',\n                   color_discrete_map=color_rating,\n                  )\n\nfig.update_layout(xaxis=dict(title='Difference Energy Usage (%)'),\n                  yaxis=dict(visible=False))\nfig.show()","1b55c22f":"import folium\nimport math\nfrom folium import Choropleth, Circle, Marker\nfrom folium.plugins import HeatMap, MarkerCluster","12900c79":"sing = pd.read_csv('..\/input\/sg-postal-code\/SG.txt',sep='\\t', lineterminator='\\n', error_bad_lines=False, header=None)\nsing = sing.drop([3,4,5,6,7,8,11], axis=1)\nsing.columns = ['Country', 'Postal_Code', 'Address', 'Lat', 'Long']\nsing.drop_duplicates(subset =\"Postal_Code\",  keep = False, inplace = True)","d95f6aa0":"def getlongtitude (postal):\n    long = sing[sing['Postal_Code'] == int(postal)]['Long'].values\n    if len(long) == 1:\n        return long[0]\n    else:\n        return np.nan\n\ndef getlatitude (postal):\n    lat = sing[sing['Postal_Code'] == int(postal)]['Lat'].values\n    if len(lat) == 1:\n        return lat[0]\n    else:\n        return np.nan","ca0606a9":"df = pd.concat([df, df['postalcode'].apply(lambda x: pd.Series({'Long':getlongtitude(x), 'Lat':getlatitude(x)}))], axis=1)","5a3eb6e5":"data = df.dropna()\n# Create the map\nm_3 = folium.Map(location=[1.283333, 103.833333], tiles='cartodbpositron', zoom_start=11)\n\n# Add points to the map\nmc = MarkerCluster()\nfor idx, row in data.iterrows():\n    if not math.isnan(row['Long']) and not math.isnan(row['Lat']):\n        mc.add_child(Marker([row['Lat'], row['Long']]))\nm_3.add_child(mc)","c9cf43fa":"> # Main Point\n\nWe have data about list of green building in Singapore.\nAlso energy usage from 2017 to 2018.\nSingapore has masterplan of green building from 2005 until 2030.\nLet's see the progress of green builidngs in Singapore.","8688658a":"So every greenmarkrating's value is null, greenmarkyearaward also null.\n<br>\nWe can leave them now.\n<br>\nNext, we are going to extract address to get postal code.","6f6a845b":"# About the Green Building Masterplan at Singapore\n\n> The launch of the BCA Green Mark scheme in 2005 formed the backbone of Singapore\u2019s first Green Building Masterplan, which encouraged, enabled and engaged industry stakeholders in adopting new green buildings. The Green Building Masterplan, which was first rolled out in 2006, has also been continually updated since its inception. The first edition targeted new buildings, to encourage developers to embed sustainability as part of a building\u2019s life cycle from the onset. As the Built Environment sector began to embrace the idea of sustainable buildings, BCA expanded its reach to target the greening of the larger stock of existing buildings and engage building occupants to change their energy consumption behaviour. The target is to have \u201cat least 80% of buildings (by floor area) in Singapore to be green by 2030\u201d.\n\nSource : https:\/\/www1.bca.gov.sg\/buildsg\/sustainability\/green-building-masterplans","a6bed0dd":"Import and check data","d6227bb0":"# Thank You\n\nThank you for your attention.\nIf you think this notebook is useful please upvote.\nAlso you can comment, so we can make this notebook better.","692fbabd":"![](https:\/\/cdnassets.hw.net\/2c\/ef\/d61e2793421b8c2220093fe049c0\/gbb-3.jpg)","4b71e28a":"Check null values again.","29de53e8":"Check greenmarkrating and greenmarkyearaward.","e0ce9cc5":"grossfloorare's column type is object, we should change it into float.","0005b9fb":"> # Visualization","739968c3":"> # Conclusion\n\n* 30.8% buildings at Singapore are green building.\n* Less than half of quantity of each building type are green building.\n* There is significant reduction amount of green building added from 2017 to 2018.\n* In average usage from 2017.<br>\n    Not Certified building has decreased by 2.7<br>\n    Platinum building has increased by 9.4<br>\n    Gold builidng has decreased by 10.8<br>","290d33d0":"I think building address, energy use on 2017 and 2018 are curcial.\n<br>\nSo we will drop row that have null values on those columns.","c9086071":">#  Import library and data","e0933c91":"Also, we don't building's name, building size (Large or Small) and Voluntary Disclosure.","8229b526":"# BONUS","0df8553a":"Change grossfloorarea type","18ab8dfc":"Create Variable for colors and def newLegend for change name on legend","dc909da7":"Actually a little typo on columns name and value in building type ('Univerisity')","daf02621":"> # Data Cleaning"}}