{"cell_type":{"8bdc1e31":"code","4e1b05f1":"code","fc6a70c0":"code","4c460d9a":"code","f229a5dd":"code","188040b6":"code","24d8fb62":"code","700c2ab8":"code","872490c9":"code","696456c4":"code","ed81bf50":"code","425a6885":"code","32d91965":"code","5d738cd1":"code","f6e9de23":"code","c3991d1a":"code","94dab247":"code","25350aeb":"code","67fa1e3f":"code","569391d5":"code","dd294a59":"code","5548412c":"code","d4cfa04a":"code","b77efead":"code","023f5b3a":"code","03c20377":"code","8a59750a":"code","09db36d2":"code","4ba62c51":"code","cdc8e85b":"code","88fc7717":"code","86a0b050":"code","186ad666":"code","9daa7dc1":"code","98a9ccd3":"code","ff2b7443":"code","c1653fda":"code","8d217899":"code","71632af1":"code","7291ff07":"code","f4bdf920":"code","0efab01d":"code","15be8c66":"code","4e13a106":"code","bfb1707c":"code","5be56b57":"code","fdbbf387":"code","ed6ae152":"code","7dd310aa":"code","68827926":"code","8c7d2e3f":"code","f54fdba2":"code","ec14f5a5":"code","654e39e0":"code","de8259c8":"code","8690573c":"code","e24e7caf":"code","417682d7":"code","64a0c9ca":"code","521d69bd":"code","f5bcf2d7":"code","3ef6e2a3":"code","f12bea4d":"code","14369004":"code","a774ce1c":"code","e3d01432":"code","dcc76852":"markdown","68fb5590":"markdown","04136955":"markdown","f014a940":"markdown","94096ff5":"markdown"},"source":{"8bdc1e31":"import pandas as pd\nimport numpy as np\n\nitem_cat = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv\")\nitems = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/items.csv\")\nsales_train = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv\")\nsample_sub = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/sample_submission.csv\")\nshops = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/shops.csv\")\ntest = pd.read_csv(\"..\/input\/competitive-data-science-predict-future-sales\/test.csv\")","4e1b05f1":"item_cat.head(10)","fc6a70c0":"item_cat.shape","4c460d9a":"items.head(10)","f229a5dd":"items.shape","188040b6":"sales_train.head(10)","24d8fb62":"sales_train.shape","700c2ab8":"sample_sub.head(10)","872490c9":"sample_sub.shape","696456c4":"shops.head(10)","ed81bf50":"shops.shape","425a6885":"test.head(10)","32d91965":"test.shape","5d738cd1":"df = pd.merge(sales_train, items, on=\"item_id\")\ndf = pd.merge(df, item_cat, on=\"item_category_id\")\ndf = pd.merge(df, shops, on=\"shop_id\")\ndf","f6e9de23":"df[\"date\"] = pd.to_datetime(df[\"date\"])","c3991d1a":"df.info()","94dab247":"df = df.sort_values('date', ascending=True)","25350aeb":"df.drop_duplicates(keep=False, inplace=True)","67fa1e3f":"df.describe()","569391d5":"df.isna().sum() # null veri yok","dd294a59":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nf, ax = plt.subplots(figsize=(10, 8))\ncorr = df.corr()\nsns.heatmap(corr, mask=np.zeros_like(corr, dtype=np.bool), cmap=sns.diverging_palette(220, 10, as_cmap=True),\n            square=True, ax=ax)","5548412c":"plt.figure(figsize=(10, 16))\nsns.countplot(y=df[\"item_category_name\"])","d4cfa04a":"plt.figure(figsize=(10, 16))\nsns.countplot(y=df[\"shop_name\"])","b77efead":"plt.figure(figsize=(12, 8))\nsns.distplot(df.groupby('date_block_num').sum()['item_cnt_day'])","023f5b3a":"plt.figure(figsize=(12, 8))\nsns.boxplot(df[\"item_cnt_day\"])","03c20377":"plt.figure(figsize=(12, 8))\nsns.boxplot(df[\"item_price\"])","8a59750a":"# U\u00e7 de\u011ferleri veri setinden \u00e7\u0131kard\u0131k\ndf = df[df[\"item_cnt_day\"].between(df[\"item_cnt_day\"].quantile(.15), df[\"item_cnt_day\"].quantile(.85))] # without outliers\ndf = df[df[\"item_price\"].between(df[\"item_price\"].quantile(.15), df[\"item_price\"].quantile(.85))] # without outliers\ndf.shape","09db36d2":"total_day = df[\"date\"].unique().shape # g\u00fcn say\u0131s\u0131\ntotal_day","4ba62c51":"train_i = int(total_day[0] * 0.9) # %90 train - %10 test\ntrain_i","cdc8e85b":"df['date'].min().date(), df['date'].max().date()","88fc7717":"df.head()","86a0b050":"df.describe()","186ad666":"# D\u00fckkanlar\u0131n toplam sat\u0131\u015f adedi\ndf[[\"shop_id\", \"item_cnt_day\"]].groupby([\"shop_id\"]).sum()","9daa7dc1":"# D\u00fckkanlar\u0131n g\u00fcnl\u00fck toplam sat\u0131\u015f adedi\ndf[[\"shop_id\", \"date\", \"item_cnt_day\"]].groupby([\"shop_id\", \"date\"]).sum()","98a9ccd3":"df[\"item_id\"].min(), df[\"item_id\"].max(), len(df[\"item_id\"].unique())","ff2b7443":"df[\"date\"][0].strftime('%m-%Y')","c1653fda":"df_m = df.copy()","8d217899":"df_m[\"date\"] = df_m[\"date\"].apply(lambda x: x.strftime('%m-%Y'))\ndf_m","71632af1":"df_m[[\"date\", \"item_id\", \"item_price\", \"item_cnt_day\"]].groupby([\"date\", \"item_id\"]).sum()","7291ff07":"df_m.head()","f4bdf920":"df_n = df_m.groupby([\"date\", \"item_id\",\"shop_id\"]).sum().reset_index()\ndf_n = df_n[['date','item_id','shop_id','item_cnt_day']]\ndf_n","0efab01d":"df_n[\"item_cnt_day\"].clip(0.,20.,inplace=True)\ndf_n","15be8c66":"df_n = df_n.pivot_table(index=['item_id','shop_id'], columns='date',values='item_cnt_day',fill_value=0).reset_index()\ndf_n","4e13a106":"df_test = pd.merge(test,df_n,on=['item_id','shop_id'], how='left').fillna(0)\ndf_test = df_test.drop(labels=['ID','item_id','shop_id'],axis=1)\ndf_test","bfb1707c":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 1))","5be56b57":"item_price = scaler.fit_transform(df_m[\"item_price\"].values.reshape(-1,1))\nitem_price","fdbbf387":"df2 = df_m.groupby([\"date\",\"item_id\",\"shop_id\"]).mean().reset_index()\ndf2 = df2[['date','item_id','shop_id','item_price']].pivot_table(index=['item_id','shop_id'], columns='date',values='item_price',fill_value=0).reset_index()\ndf2","ed6ae152":"price = pd.merge(test,df2,on=['item_id','shop_id'], how='left').fillna(0)\nprice = price.drop(labels=['ID','item_id','shop_id'],axis=1)\nprice","7dd310aa":"df_test","68827926":"y_train = df_test[\"10-2015\"]\nx_sales = df_test.drop(labels=[\"10-2015\"],axis=1)\nx_sales = x_sales.values.reshape((x_sales.shape[0], x_sales.shape[1], 1))\nx_prices = price.drop(labels=[\"10-2015\"],axis=1)\nx_prices= x_prices.values.reshape((x_prices.shape[0], x_prices.shape[1], 1))\nX = np.append(x_sales,x_prices,axis=2)\ny = y_train.values.reshape((y_train.shape[0], 1))","8c7d2e3f":"X.shape, y.shape","f54fdba2":"df_test = df_test.drop(labels=[\"01-2013\"],axis=1)\nx_test_sales = df_test.values.reshape((df_test.shape[0], df_test.shape[1], 1))\nx_test_prices = price.drop(labels=[\"01-2013\"],axis=1)\nx_test_prices = x_test_prices.values.reshape((x_test_prices.shape[0], x_test_prices.shape[1], 1))\ndf_test = np.append(x_test_sales,x_test_prices,axis=2)","ec14f5a5":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.10, random_state=1, shuffle=False)","654e39e0":"import tensorflow as tf\nprint(tf.__version__)\ngpus = tf.config.experimental.list_physical_devices('GPU')\nif gpus:\n    try:\n        # Currently, memory growth needs to be the same across GPUs\n        for gpu in gpus:\n            tf.config.experimental.set_memory_growth(gpu, True)\n        logical_gpus = tf.config.experimental.list_logical_devices('GPU')\n        print(len(gpus), \"Physical GPUs,\", len(logical_gpus), \"Logical GPUs\")\n    except RuntimeError as e:\n        # Memory growth must be set before GPUs have been initialized\n        print(e)","de8259c8":"from keras.models import Sequential\nfrom keras.layers import Conv1D, MaxPooling1D, LSTM, Dense, Dropout, Flatten, Bidirectional, TimeDistributed, ConvLSTM2D\nfrom keras.optimizers import SGD\nfrom keras.losses import Huber\n\nmodel = Sequential([\n            Conv1D(filters=32, kernel_size=5,\n                      strides=1, padding=\"causal\",\n                      activation=\"relu\",\n                      input_shape=[X_train.shape[1], X_train.shape[2]]),\n            Bidirectional(LSTM(64, return_sequences=True)),\n            Dropout(0.3),\n            TimeDistributed(Dense(64, activation=\"relu\")),\n            Dropout(0.3),\n            TimeDistributed(Dense(32, activation=\"relu\")),\n            TimeDistributed(Dense(1))\n])\n\nmodel.compile(loss=Huber(),\n              optimizer=\"adam\",\n              metrics=[\"mse\"])\nmodel.summary()","8690573c":"from keras.utils.vis_utils import plot_model\n\nplot_model(model, to_file='model_plot.png', show_shapes=True, show_layer_names=True)","e24e7caf":"%%time\nwith tf.device('\/device:GPU:0'):\n    hist = model.fit(X_train, y_train,validation_data=(X_valid, y_valid), \n                     batch_size=256, \n                     verbose=1, epochs=300)","417682d7":"y_sub = model.predict(df_test)","64a0c9ca":"y_pred = model.predict(X_valid)","521d69bd":"y_valid.shape","f5bcf2d7":"from sklearn.metrics import mean_squared_error\n\nrmse = np.sqrt(mean_squared_error(y_valid, y_pred[:,0]))\nrmse","3ef6e2a3":"sample_sub","f12bea4d":"y_valid.shape, y_pred.shape, y_sub.shape","14369004":"plt.plot(hist.history['loss'], label='train')\nplt.plot(hist.history['val_loss'], label='validation')\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Mean Square Error\")\nplt.legend()\nplt.show()","a774ce1c":"submission = pd.DataFrame(y_sub[:,-1],columns=['item_cnt_month'])\nsubmission.to_csv('submission.csv',index_label='ID')","e3d01432":"submission","dcc76852":"## 3. Veri \u00f6n i\u015fleme","68fb5590":"## 2. Verilerin g\u00f6zlenmesi","04136955":"# Gelecek Sat\u0131\u015f Tahmini\n## 1. Verilerin okunmas\u0131","f014a940":"## 4. Ke\u015fif\u00e7i veri analizi","94096ff5":"### U\u00e7 de\u011ferlerin tespiti"}}