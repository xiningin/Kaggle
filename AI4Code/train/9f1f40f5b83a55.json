{"cell_type":{"8a47bbbd":"code","478c9cd2":"code","4c758b00":"code","c83ddb04":"code","0c0c0af8":"code","53f4f19f":"code","26f142bb":"code","8af51c0c":"code","e7e7926f":"code","5ccafc76":"code","2aeb4505":"code","089647e5":"code","c7cd12a8":"code","0f75a34e":"code","5eff3336":"code","396245dd":"code","a0dd8f1e":"code","635c0fbc":"code","84631bf6":"code","794485a2":"markdown"},"source":{"8a47bbbd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","478c9cd2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport os\nimport rasterio as rio\nimport folium","4c758b00":"def plot_points_on_map(dataframe,begin_index,end_index,latitude_column,latitude_value,longitude_column,longitude_value,zoom):\n    df = dataframe[begin_index:end_index]\n    location = [latitude_value,longitude_value]\n    plot = folium.Map(location=location,zoom_start=zoom)\n    for i in range(0,len(df)):\n        popup = folium.Popup(str(df.primary_fuel[i:i+1]))\n        folium.Marker([df[latitude_column].iloc[i],df[longitude_column].iloc[i]],popup=popup).add_to(plot)\n    return(plot)","c83ddb04":"def overlay_image_on_puerto_rico(file_name,band_layer):\n    band = rio.open(file_name).read(band_layer)\n    m = folium.Map([lat, lon], zoom_start=8)\n    folium.raster_layers.ImageOverlay(\n        image=band,\n        bounds = [[18.6,-67.3,],[17.9,-65.2]],\n        colormap=lambda x: (1, 0, 0, x),\n    ).add_to(m)\n    return m\n","0c0c0af8":"def plot_scaled(file_name):\n    vmin, vmax = np.nanpercentile(file_name, (5,95))  # 5-95% stretch\n    img_plt = plt.imshow(file_name, cmap='gray', vmin=vmin, vmax=vmax)\n    plt.show()","53f4f19f":"def split_column_into_new_columns(dataframe,column_to_split,new_column_one,begin_column_one,end_column_one):\n    for i in range(0, len(dataframe)):\n        dataframe.loc[i, new_column_one] = dataframe.loc[i, column_to_split][begin_column_one:end_column_one]\n    return dataframe","26f142bb":"power_plants=pd.read_csv('\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/gppd\/gppd_120_pr.csv')","8af51c0c":"power_plants = split_column_into_new_columns(power_plants,'.geo','latitude',50,66)\npower_plants = split_column_into_new_columns(power_plants,'.geo','longitude',31,48)\npower_plants['latitude'] = power_plants['latitude'].astype(float)\na = np.array(power_plants['latitude'].values.tolist()) # 18 instead of 8\npower_plants['latitude'] = np.where(a < 10, a+10, a).tolist() \nlat=18.200178; lon=-66.664513\nplot_points_on_map(power_plants,0,425,'latitude',lat,'longitude',lon,9)","e7e7926f":"power_plants_df =power_plants.sort_values('capacity_mw',ascending=False).reset_index()\n","5ccafc76":"power_plants_df[['name','latitude','longitude','primary_fuel','capacity_mw','estimated_generation_gwh']]","2aeb4505":"image = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/gldas\/gldas_20180702_1500.tif'\nimage_band = rio.open(image).read(3)\nplot_scaled(image_band)\n\nimage = '\/kaggle\/input\/ds4g-environmental-insights-explorer\/eie_data\/gfs\/gfs_2018072118.tif'\nimage_band = rio.open(image).read(3)\nplot_scaled(image_band)\n\noverlay_image_on_puerto_rico(image,band_layer=3)","089647e5":"from kaggle_secrets import UserSecretsClient\nfrom google.oauth2.credentials import Credentials\nimport ee\nimport folium","c7cd12a8":"def add_ee_layer(self, ee_image_object, vis_params, name):\n  # https:\/\/github.com\/google\/earthengine-api\/blob\/master\/python\/examples\/ipynb\/ee-api-colab-setup.ipynb\n  map_id_dict = ee.Image(ee_image_object).getMapId(vis_params)\n  folium.raster_layers.TileLayer(\n    tiles = map_id_dict['tile_fetcher'].url_format,\n    attr = 'Map Data &copy; <a href=\"https:\/\/earthengine.google.com\/\">Google Earth Engine<\/a>',\n    name = name,\n    overlay = True,\n    control = True\n  ).add_to(self)","0f75a34e":"def plot_ee_data_on_map(dataset,column,begin_date,end_date,minimum_value,maximum_value,latitude,longitude,zoom):\n    # https:\/\/github.com\/google\/earthengine-api\/blob\/master\/python\/examples\/ipynb\/ee-api-colab-setup.ipynb\n    folium.Map.add_ee_layer = add_ee_layer\n    vis_params = {\n      'min': minimum_value,\n      'max': maximum_value,\n      'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']}\n    my_map = folium.Map(location=[latitude,longitude], zoom_start=zoom, height=500)\n    s5p = ee.ImageCollection(dataset).filterDate(\n        begin_date, end_date)\n    my_map.add_ee_layer(s5p.first().select(column), vis_params, 'Color')\n    my_map.add_child(folium.LayerControl())\n    display(my_map)\n","5eff3336":"ee.Authenticate()","396245dd":"!cat ~\/.config\/earthengine\/credentials","a0dd8f1e":"user_secret = \"earth_engine\" # Your user secret, defined in the add-on menu of the notebook editor\nrefresh_token = '1\/\/0eD5j0K8ku_huCgYIARAAGA4SNwF-L9Ir9BaJSkVwzCcscdLpMSgDtqx5nDEb7fNiZJywieYPHKxh1j0H5dZu_ahn8PerVQqf4SU'\ncredentials = Credentials(\n        None,\n        refresh_token=refresh_token,\n        token_uri=ee.oauth.TOKEN_URI,\n        client_id=ee.oauth.CLIENT_ID,\n        client_secret=ee.oauth.CLIENT_SECRET,\n        scopes=ee.oauth.SCOPES)\nee.Initialize(credentials=credentials)","635c0fbc":"dataset = \"COPERNICUS\/S5P\/NRTI\/L3_NO2\"\ncolumn = 'absorbing_aerosol_index'\nbegin_date = '2018-07-08'\nend_date = '2018-07-14'\nminimum_value = 0.0000000001\nmaximum_value = 1\nlatitude = 60.17\nlongitude = 25.94\nzoom = 5\nplot_ee_data_on_map(dataset,column,begin_date,end_date,minimum_value,maximum_value,latitude,longitude,zoom)","84631bf6":"dataset = \"NOAA\/GFS0P25\"\ncolumn = 'temperature_2m_above_ground'\nbegin_date = '2018-07-08'\nend_date = '2018-07-14'\nminimum_value = 0\nmaximum_value = 50\nlatitude = 18.20\nlongitude = -66.66\nzoom = 1\nplot_ee_data_on_map(dataset,column,begin_date,end_date,minimum_value,maximum_value,latitude,longitude,zoom)\n\ndataset = \"NASA\/GLDAS\/V021\/NOAH\/G025\/T3H\"\ncolumn = 'Tair_f_inst'\nbegin_date = '2018-07-08'\nend_date = '2018-07-14'\nminimum_value = 270\nmaximum_value = 310\nlatitude = 18.20\nlongitude = -66.66\nzoom = 6\nplot_ee_data_on_map(dataset,column,begin_date,end_date,minimum_value,maximum_value,latitude,longitude,zoom)","794485a2":"THis kernel is  same as https:\/\/www.kaggle.com\/paultimothymooney\/how-to-get-started-with-the-earth-engine-data"}}