{"cell_type":{"70cc65c0":"code","acf58039":"code","2a28c94b":"code","25cca0c9":"code","0340ec7f":"code","6616d9d8":"code","de09e53f":"code","5f4ad7f7":"code","3ffe2fba":"code","f37541ee":"code","6e032d06":"code","d3a4a7bc":"code","30adf18f":"code","17423429":"markdown","6077d380":"markdown","5ad86f04":"markdown","c37ecd48":"markdown","e96a4505":"markdown","4e8405db":"markdown"},"source":{"70cc65c0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","acf58039":"#traindata \nfrom sklearn.model_selection import train_test_split\n\ndata = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\", index_col='Id')\nX_test_full = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col='Id')\ny = data.SalePrice\nX = data.drop(\"SalePrice\", axis=1)\n\n#split X,y\n\nX_train_full, X_valid_full, y_train, y_valid = train_test_split(X, y, train_size = 0.8, test_size = 0.2, \n                                                                 random_state = 0)\n\n#drop columns with NaN values\n#col_nans = [col for col in X_train_full.columns if X_train_full[col].isnull().any()]\n#X_train_full.drop(col_nans, axis=1, inplace=True)\n#X_valid_full.drop(col_nans, axis=1, inplace=True)\n\n#cardinal columns (Lowest unique values in categ cols)\n\nlow_card_cols = [col for col in X_train_full.columns if X_train_full[col].nunique() < 10 and \n                 X_train_full[col].dtype == 'object']\n\n#numerical columns\nnum_cols = [col for col in X_train_full.columns if X_train_full[col].dtype in ['int64', 'float64']]\n\n#combine the columns\nmy_cols = low_card_cols + num_cols\n\nX_train = X_train_full[my_cols].copy()\nX_valid = X_valid_full[my_cols].copy()\nX_test = X_test_full[my_cols].copy()","2a28c94b":"X_train.head()","25cca0c9":"print(X_train.shape, X_valid.shape, X_test.shape)","0340ec7f":"X_train.isnull().sum().sum()","6616d9d8":"# function for calculating the score\n\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\ndef score_data(X_train, X_valid, y_train, y_valid):\n    model = RandomForestRegressor(n_estimators = 550, random_state = 0)\n    model.fit(X_train, y_train)\n    preds = model.predict(X_valid)\n    return mean_absolute_error(preds, y_valid)\n","de09e53f":"from sklearn.impute import SimpleImputer\n\n# here we need to seperately impute for catgorical and numerical on both train and test sets\n#starting with numarical imputation on train and test\nimpute_numerical = SimpleImputer(strategy='constant')\n#train numericals\nX_train_num = pd.DataFrame(impute_numerical.fit_transform(X_train[num_cols])) \nX_valid_num = pd.DataFrame(impute_numerical.transform(X_valid[num_cols]))\n#put columns back\nX_train_num.columns = num_cols\nX_valid_num.columns = num_cols\n\n#test_numericals\nX_test_num = pd.DataFrame(impute_numerical.transform(X_test[num_cols]))\nX_test_num.columns = num_cols","5f4ad7f7":"#categorical imputation\nimpute_categorical = SimpleImputer(strategy='most_frequent')\n#train set\nX_train_obj = pd.DataFrame(impute_categorical.fit_transform(X_train[low_card_cols]))\nX_valid_obj = pd.DataFrame(impute_categorical.transform(X_valid[low_card_cols]))\n#put columns back\nX_train_obj.columns = low_card_cols\nX_valid_obj.columns = low_card_cols\n\n#test set\nX_test_obj = pd.DataFrame(impute_categorical.transform(X_test[low_card_cols]))\nX_test_obj.columns = low_card_cols","3ffe2fba":"#Now its time to one hot encode the categorical datasets above of train , valid and test.\n\nfrom sklearn.preprocessing import OneHotEncoder\n\nOH_encoder = OneHotEncoder(handle_unknown = 'ignore', sparse = False)\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(X_train_obj[low_card_cols]))\nOH_cols_valid = pd.DataFrame(OH_encoder.transform(X_valid_obj[low_card_cols]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(X_test_obj[low_card_cols]))\n\n#put index back \n\nOH_cols_train.index = X_train_obj.index\nOH_cols_valid.index = X_valid_obj.index\nOH_cols_test.index = X_test_obj.index\n\n#remove categorical columns by replacing them with one hot encoded columns\n","f37541ee":"#Now all categorical columns are encoded into numerical one's so now we need to combine the OH cols with our rest of \n#numerical columsn to form a single dataset for train, valid and test\n\nX_train_oh = pd.concat([X_train_num , OH_cols_train], axis=1)\nX_valid_oh = pd.concat([X_valid_num , OH_cols_valid], axis=1)\nX_test_oh = pd.concat([X_test_num , OH_cols_test], axis=1)","6e032d06":"#calculate the score\n\nprint('The MAE score : ')\nprint(score_data(X_train_oh, X_valid_oh, y_train, y_valid))","d3a4a7bc":"#prediction on test data\n\nmodel = RandomForestRegressor(n_estimators = 550, random_state = 0)\nmodel.fit(X_train_oh, y_train)\npreds_test = model.predict(X_test_oh)","30adf18f":"# Save test predictions to file\noutput = pd.DataFrame({'Id': X_test_full.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","17423429":"### Save submission","6077d380":"### One Hot Encoding","5ad86f04":"### Calculating the score on train data","c37ecd48":"### Now prediction on test data","e96a4505":"### Now, the NaN values must be replaced","4e8405db":"# Here both cateorical and numerical columns are used,NaNs are imputed"}}