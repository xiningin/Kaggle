{"cell_type":{"b07f7502":"code","fdb97001":"code","8236caa7":"code","5cda135f":"code","56f777cd":"code","34c1ff82":"code","818036ea":"code","9d54b7f0":"code","3aff932f":"code","12d7e353":"code","e6694f09":"code","c24778b0":"code","4a9d318e":"code","17a87018":"code","fb76cced":"code","2f7a786a":"code","3bbc3c59":"code","a0029755":"code","d3c77733":"code","8eb5b8cc":"code","48852f0f":"code","2535f0de":"code","77254e8e":"code","46023992":"code","47323c08":"code","46c77fd5":"code","1f620557":"code","3b521bb9":"code","33656b24":"code","e09813cb":"code","83c8e369":"code","611d56bf":"code","20891627":"code","62641a67":"code","17cf11aa":"code","27c82641":"code","afea62a7":"code","dfcab9ef":"code","d7bb5a9b":"code","51b66961":"code","e0c76b5b":"code","2ce899b4":"code","542960c8":"code","2a48a092":"code","dd4c186b":"code","96229bb9":"code","8fc10047":"code","3f0d0351":"code","b2b9f5cd":"code","3de40373":"markdown","45a56745":"markdown","852aa13a":"markdown","878a015f":"markdown","2bf63793":"markdown","dfce2012":"markdown","6c1a1a40":"markdown","d0679678":"markdown","92f573c3":"markdown","be9709c7":"markdown","e3ab9f3a":"markdown","ac914594":"markdown","c14a3eed":"markdown","140678f0":"markdown","048a97d0":"markdown","5823f79c":"markdown","c370591e":"markdown","f420b679":"markdown"},"source":{"b07f7502":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\nimport torchvision.transforms as T\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\nimport torchvision.transforms as transforms\n%matplotlib inline","fdb97001":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv'   # Contains dummy labels for test image","8236caa7":"data_df = pd.read_csv(TRAIN_CSV)\ndata_df.head()","5cda135f":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","56f777cd":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)\n    \ndef show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))\n    \ndef show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break\n        \ndef get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\ndef try_batch(dl):\n    for images, labels in dl:\n        print('images.shape:', images.shape)\n        out = model(images)\n        print('out.shape:', out.shape)\n        print('out[0]:', out[0])\n        break","34c1ff82":"class HumanProteinDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)","818036ea":"#imagenet_stats = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\nimagenet_stats = ([0.0793, 0.0530, 0.0545], [0.1290, 0.0886, 0.1376])\n\ntrain_tfms = T.Compose([\n    T.RandomCrop(512, padding=8, padding_mode='reflect'),\n#     T.RandomResizedCrop(256, scale=(0.5,0.9), ratio=(1, 1)), \n#     T.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1),\n    T.RandomHorizontalFlip(), \n    T.RandomRotation(10),\n    T.ToTensor(), \n#    T.Normalize(*imagenet_stats,inplace=True), \n    T.RandomErasing(inplace=True)\n])\n\nvalid_tfms = T.Compose([\n    #T.Resize(224), \n    T.ToTensor(), \n#    T.Normalize(*imagenet_stats)\n])","9d54b7f0":"np.random.seed(42)\nmsk = np.random.rand(len(data_df)) < 0.9\n\ntrain_df = data_df[msk].reset_index()\nval_df = data_df[~msk].reset_index()\n\ntrain_ds = HumanProteinDataset(train_df, TRAIN_DIR, transform=train_tfms)\nval_ds = HumanProteinDataset(val_df, TRAIN_DIR, transform=valid_tfms)\n\n#transform = transforms.Compose([transforms.Resize(224),transforms.ToTensor()])\n#dataset = HumanProteinDataset(TRAIN_CSV, TRAIN_DIR, transform=transform)","3aff932f":"len(train_ds), len(val_ds)","12d7e353":"torch.manual_seed(10)","e6694f09":"val_pct = 0.1\nval_size = int(val_pct * len(train_df))\ntrain_size = len(train_df) - val_size","c24778b0":"train_ds, val_ds = random_split(dataset, [train_size, val_size])\nlen(train_ds), len(val_ds)","4a9d318e":"batch_size = 64","17a87018":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=2, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)","fb76cced":"show_batch(train_dl)","2f7a786a":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","3bbc3c59":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)\n        acc = F_score(out, targets)\n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_score']))","a0029755":"class ProteinCnnModel2(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet18(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Sequential(\n                      nn.Linear(num_ftrs, 256),\n                      nn.ReLU(),\n                      nn.Dropout(0.5),\n                      nn.Linear(256, 10)\n                        )\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True\n    ","d3c77733":"model = ProteinCnnModel2()\nmodel","8eb5b8cc":"class DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","48852f0f":"device = get_default_device()\ndevice","2535f0de":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","77254e8e":"try_batch(train_dl)","46023992":"from tqdm.notebook import tqdm","47323c08":"\"\"\"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    optimizer = opt_func(model.parameters(), lr)\n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            optimizer.step()\n            optimizer.zero_grad()\n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history\"\"\"\n\n@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up cutom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","46c77fd5":"model = to_device(ProteinCnnModel2(), device)","1f620557":"history = evaluate(model, val_dl)\nhistory","3b521bb9":"model.freeze()","33656b24":"epochs = 5\nmax_lr = 0.01\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","e09813cb":"history = fit_one_cycle(epochs, max_lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","83c8e369":"d = history.copy()\nd.update(history)","611d56bf":"model.unfreeze()","20891627":"%%time\nhistory = fit_one_cycle(epochs, 0.001, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","62641a67":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","17cf11aa":"def plot_scores(history):\n    scores = [x['val_score'] for x in history]\n    plt.plot(scores, '-x')\n    plt.xlabel('epoch')\n    plt.ylabel('score')\n    plt.title('F1 score vs. No. of epochs');\nplot_scores(history)","27c82641":"def plot_losses(history):\n    train_losses = [x.get('train_loss') for x in history]\n    val_losses = [x['val_loss'] for x in history]\n    plt.plot(train_losses, '-bx')\n    plt.plot(val_losses, '-rx')\n    plt.xlabel('epoch')\n    plt.ylabel('loss')\n    plt.legend(['Training', 'Validation'])\n    plt.title('Loss vs. No. of epochs');\nplot_losses(history)","afea62a7":"test_df = pd.read_csv(TEST_CSV)\ntest_dataset = HumanProteinDataset(test_df, TEST_DIR, transform=valid_tfms)","dfcab9ef":"img, target = test_dataset[0]\nimg.shape","d7bb5a9b":"predict_single(test_dataset[100][0])","51b66961":"predict_single(test_dataset[74][0])","e0c76b5b":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=2, pin_memory=True), device)","2ce899b4":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","542960c8":"test_preds = predict_dl(test_dl, model)","2a48a092":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.head()","dd4c186b":"sub_fname = 'resnet18_submission.csv'","96229bb9":"submission_df.to_csv(sub_fname, index=False)","8fc10047":"!pip install jovian --upgrade","3f0d0351":"import jovian","b2b9f5cd":"jovian.commit(project='zerogans-protein-competition')","3de40373":"## Creating a submission file","45a56745":"If your kernel runs out of memory here, you might need to reduce your batch size.","852aa13a":"# **Utility functions**","878a015f":"You can also use the \"Save Version\" button on Kaggle itself, to save a copy on your Kaggle profile.","2bf63793":"## Model","dfce2012":"We can now save it batck to CSV, and download the file from the sidebar (check the output folder)","6c1a1a40":"Next, let's create a test dataset using the `submission.csv` file. Note that the file contains dummy labels (always `'0'`). We'll use the same transforms we used for the training set.","d0679678":"## Creating Datasets & Data Loaders\n\nWe can now create a custom dataset by extending the `Dataset` class from PyTorch. We need to define the `__len__` and `__getitem__` methods to create a dataset. We'll also provide the option of adding transforms into the constructor.","92f573c3":"## Training the model","be9709c7":"Let us know create a submission file with these predictions","e3ab9f3a":"### Data Loaders","ac914594":"## Making predictions & submission\n\nTo start with, let's create a helper function to make a prediction on a single image.","c14a3eed":"### Training & Validation sets\n\nAs a good practice, we should split the data into training and validation datasets. Let's fix a seed for PyTorch (to ensure we always get the same validation set), and create the datasets using `random_split`.","140678f0":"## Exploring the Data","048a97d0":"## Human Protein Multi Label Image Classification ","5823f79c":"You can now upload this submission file here: https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g\/submit","c370591e":"Let's try predicting the labels for some sample images","f420b679":"## Save to Jovian"}}