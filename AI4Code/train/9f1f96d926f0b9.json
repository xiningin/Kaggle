{"cell_type":{"0abc1bfb":"code","412cc23e":"code","944900e1":"code","30cf6cfd":"code","01bfe594":"code","a5b6bed9":"code","ba633cc6":"code","0acd9a22":"code","0033d8b9":"code","e481b087":"code","791f745f":"code","870faf0c":"code","d2f8dbc6":"code","ee4982f7":"code","b3055f16":"code","1ebb9943":"code","27bcdfcf":"code","318811e2":"code","6413418b":"code","3dfde108":"code","d35f56fe":"code","5879a81d":"code","9b8eb275":"code","918538d4":"code","3db803a3":"code","87b937c0":"code","8f555d96":"code","23908291":"code","9ede6344":"code","1bdac404":"code","0bbf70ff":"code","44d2a5dd":"code","2345824e":"code","56f6d0dd":"code","ec03389f":"code","eeb9b238":"code","85ea4b4e":"code","927f5f6c":"code","0103f0ee":"code","a65f3b62":"code","2d900e1f":"code","6c5126aa":"code","70832930":"code","533c3aa1":"code","f7464a09":"code","05a9e55e":"code","6c475607":"code","e3ec282d":"code","5dde4642":"code","6af03b98":"code","b700870f":"code","29869a1e":"code","789e3e98":"code","9ad543aa":"code","b4b27492":"code","e0d8986e":"code","cb54371d":"code","2411842b":"code","89087a1a":"code","75a2c34f":"code","fc28fb3e":"code","8c086b48":"code","e23a8e9c":"code","4efaadfa":"code","e5c26d4d":"code","c25626d9":"code","25864c29":"code","f8a07794":"code","6e44d763":"code","9c185230":"code","7a1c0b38":"code","2bf734e5":"code","54e308bc":"code","075f1156":"code","c3df2255":"code","05c2a81b":"code","4bd452a0":"code","46715202":"code","c69a1a6a":"code","43cdd07e":"code","d199f281":"code","c7d2492d":"code","1dc600f3":"code","34c5ea82":"code","674ba9be":"code","bd6d1dde":"code","43ac63a0":"code","c840c200":"code","c7f10fc0":"code","f3cc73fa":"code","2bff943c":"code","a81bfadf":"code","8e06d5df":"code","30a2cdf3":"code","0d84c65f":"code","7907d186":"code","e3cb346f":"code","89442620":"code","07e97e14":"code","61b4974b":"code","ef495e96":"markdown","8055cdcc":"markdown","e5dedf01":"markdown","5e99653e":"markdown","b5c85e89":"markdown","06c38511":"markdown","8f4821b0":"markdown","823760e5":"markdown","f0977524":"markdown"},"source":{"0abc1bfb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nfrom collections import Counter\nfrom sklearn.ensemble import RandomForestRegressor\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","412cc23e":"train_df=pd.read_csv(\"..\/input\/train.csv\",nrows=1000000)\ntest_df=pd.read_csv(\"..\/input\/test.csv\")","944900e1":"train_df.shape","30cf6cfd":"train_df.columns","01bfe594":"train_df.head()","a5b6bed9":"train_df.info()","ba633cc6":"train_df.describe()","0acd9a22":"test_df.info()","0033d8b9":"test_df.describe()","e481b087":"train_df.isnull().sum()","791f745f":"#Drop the missing values record\ntrain_df= train_df.drop(train_df[train_df.isnull().any(1)].index, axis = 0)","870faf0c":"train_df.info()","d2f8dbc6":"Counter(train_df['fare_amount']<0)","ee4982f7":"#Drop the negative fare record\ntrain_df= train_df.drop(train_df[train_df['fare_amount']<0].index, axis = 0)\ntrain_df.shape","b3055f16":"train_df.describe()","1ebb9943":"Counter(train_df['passenger_count']>6)","27bcdfcf":"train_df= train_df.drop(train_df[train_df['passenger_count']>6].index, axis = 0)\ntrain_df.shape","318811e2":"Counter(train_df['pickup_latitude']<-90)","6413418b":"Counter(train_df['pickup_latitude']>90)","3dfde108":"#We need to drop these outliers\ntrain_df = train_df.drop(((train_df[train_df['pickup_latitude']<-90])|(train_df[train_df['pickup_latitude']>90])).index, axis=0)","d35f56fe":"train_df.shape","5879a81d":"Counter(train_df['pickup_longitude']<-180)","9b8eb275":"Counter(train_df['pickup_longitude']>180)","918538d4":"#We need to drop these outliers\ntrain_df = train_df.drop((train_df[train_df['pickup_longitude']<-180]).index, axis=0)","3db803a3":"train_df.shape","87b937c0":"train_df.dtypes","8f555d96":"train_df.head(3)","23908291":"train_df['key']=pd.to_datetime(train_df['key'])\ntrain_df['pickup_datetime']=pd.to_datetime(train_df['pickup_datetime'])","9ede6344":"train_df.dtypes","1bdac404":"test_df.dtypes","0bbf70ff":"train_df.head()","44d2a5dd":"test_df['key']=pd.to_datetime(test_df['key'])\ntest_df['pickup_datetime']=pd.to_datetime(test_df['pickup_datetime'])","2345824e":"test_df.dtypes","56f6d0dd":"test_df.head()","ec03389f":"train_df.head()","eeb9b238":"data=[train_df,test_df]\nfor i in data:\n    i['date']=i['pickup_datetime'].dt.day\n    i['month']=i['pickup_datetime'].dt.month\n    i['day_of_week']=i['pickup_datetime'].dt.dayofweek\n    i['hour']=i['pickup_datetime'].dt.hour\n    i['year']=i['pickup_datetime'].dt.year\n    ","85ea4b4e":"train_df.head()","927f5f6c":"train_df.describe()","0103f0ee":"def sphere_distance(lat1,long1,lat2,long2):\n    data=[train_df,test_df]\n    for i in data:\n        R=6367\n        phi1 = np.radians(i[lat1])\n        phi2 = np.radians(i[lat2])\n        delta_phi = np.radians(i[lat2]-i[lat1])\n        delta_lambda = np.radians(i[long2]-i[long1])\n        a = np.sin(delta_phi \/ 2.0) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda \/ 2.0) ** 2\n        c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))\n        d = (R * c)\n        i['S_Distance'] = d\n    return d #in Kilometer","a65f3b62":"sphere_distance('pickup_latitude', 'pickup_longitude', 'dropoff_latitude', 'dropoff_longitude')","2d900e1f":"train_df.head()","6c5126aa":"plt.hist(train_df['passenger_count'], bins=15)\nplt.xlabel('No. of Passengers')\nplt.ylabel('Frequency')","70832930":"plt.scatter(x=train_df['passenger_count'], y=train_df['fare_amount'],s=2.0)\nplt.xlabel('No. of Passengers')\nplt.ylabel('Fare')","533c3aa1":"plt.scatter(x=train_df['date'], y=train_df['fare_amount'])\nplt.xlabel('Date')\nplt.ylabel('Fare')","f7464a09":"plt.hist(train_df['hour'],bins=50)\nplt.xlabel('Date')\nplt.ylabel('Fare')","05a9e55e":"plt.hist(train_df['day_of_week'],bins=20)\nplt.xlabel('Date')\nplt.ylabel('Fare')","6c475607":"plt.scatter(x=train_df['day_of_week'], y=train_df['fare_amount'])\nplt.xlabel('Date of week')\nplt.ylabel('Fare')","e3ec282d":"len(train_df)","5dde4642":"train_df.sort_values(['S_Distance','fare_amount'], ascending=False)","6af03b98":"dis_0 = train_df.loc[(train_df['S_Distance'] == 0), ['S_Distance']]\ndis_1 = train_df.loc[(train_df['S_Distance'] > 0) & (train_df['S_Distance'] <= 10), ['S_Distance']]\ndis_2 = train_df.loc[(train_df['S_Distance'] > 10) & (train_df['S_Distance'] <= 50), ['S_Distance']]\ndis_3 = train_df.loc[(train_df['S_Distance'] > 50) & (train_df['S_Distance'] <= 100), ['S_Distance']]\ndis_4 = train_df.loc[(train_df['S_Distance'] > 100) & (train_df['S_Distance'] <= 200), ['S_Distance']]\ndis_5 = train_df.loc[(train_df['S_Distance'] > 200) & (train_df['S_Distance'] <= 300), ['S_Distance']]\ndis_6 = train_df.loc[(train_df['S_Distance'] > 300) & (train_df['S_Distance'] <= 500), ['S_Distance']]\ndis_7 = train_df.loc[(train_df['S_Distance'] > 500), ['S_Distance']]\ndis_0['bins']='0'\ndis_1['bins']='0-10'\ndis_2['bins']='11-50'\ndis_3['bins']='51-100'\ndis_4['bins']='101-200'\ndis_5['bins']='201-300'\ndis_6['bins']='301-500'\ndis_7['bins']='>500'\ndis_bin=pd.concat([dis_0,dis_1,dis_2,dis_3,dis_4,dis_5,dis_6,dis_7])\ndis_bin","b700870f":"x=Counter(dis_bin['bins'])\nx","29869a1e":"train_df.loc[((train_df['pickup_latitude']==0) & (train_df['pickup_longitude']==0))&((train_df['dropoff_latitude']!=0) & (train_df['dropoff_longitude']!=0)) & (train_df['fare_amount']==0)]","789e3e98":"train_df.loc[((train_df['pickup_latitude']==0) & (train_df['pickup_longitude']==0))&((train_df['dropoff_latitude']!=0) & (train_df['dropoff_longitude']!=0)) & (train_df['fare_amount']==0)]","9ad543aa":"train_df = train_df.drop(train_df.loc[((train_df['pickup_latitude']==0) & (train_df['pickup_longitude']==0))&((train_df['dropoff_latitude']!=0) & (train_df['dropoff_longitude']!=0)) & (train_df['fare_amount']==0)].index, axis=0)","b4b27492":"train_df.shape","e0d8986e":"#dropoff latitude and longitude = 0\ntrain_df = train_df.drop(train_df.loc[((train_df['pickup_latitude']==0) & (train_df['pickup_longitude']==0))&((train_df['dropoff_latitude']!=0) & (train_df['dropoff_longitude']!=0)) & (train_df['fare_amount']==0)].index, axis=0)\n","cb54371d":"train_df.shape","2411842b":"high_distance = train_df.loc[(train_df['S_Distance']>200)&(train_df['fare_amount']!=0)]","89087a1a":"high_distance","75a2c34f":"high_distance.shape","fc28fb3e":"high_distance['S_Distance'] = high_distance.apply(\n    lambda row: (row['fare_amount'] - 2.50)\/1.56,\n    axis=1\n)","8c086b48":"high_distance","e23a8e9c":"train_df.update(high_distance)","4efaadfa":"train_df","e5c26d4d":"train_df[train_df['S_Distance']==0]","c25626d9":"train_df[(train_df['S_Distance']==0)&(train_df['fare_amount']==0)]","25864c29":"train_df = train_df.drop(train_df[(train_df['S_Distance']==0)&(train_df['fare_amount']==0)].index, axis = 0)","f8a07794":"#Between 6AM and 8PM on Mon-Fri\nrush_hour = train_df.loc[(((train_df['hour']>=6)&(train_df['hour']<=20)) & ((train_df['day_of_week']>=1) & (train_df['day_of_week']<=5)) & (train_df['S_Distance']==0) & (train_df['fare_amount'] < 2.5))]\nrush_hour","6e44d763":"train_df=train_df.drop(rush_hour.index,axis=0)","9c185230":"train_df.shape","7a1c0b38":"non_rush_hour = train_df.loc[(((train_df['hour']<6)|(train_df['hour']>20)) & ((train_df['day_of_week']>=1)&(train_df['day_of_week']<=5)) & (train_df['S_Distance']==0) & (train_df['fare_amount'] < 3.0))]","2bf734e5":"non_rush_hour","54e308bc":"non_rush_hour = train_df.loc[(((train_df['hour']<6)|(train_df['hour']>20)) & ((train_df['day_of_week']>=1)&(train_df['day_of_week']<=5)) & (train_df['S_Distance']==0) & (train_df['fare_amount'] < 3.0))]\nnon_rush_hour","075f1156":"train_df.loc[(train_df['S_Distance']!=0) & (train_df['fare_amount']==0)]","c3df2255":"scenario_3 = train_df.loc[(train_df['S_Distance']!=0) & (train_df['fare_amount']==0)]\nscenario_3","05c2a81b":"scenario_3 = train_df.loc[(train_df['S_Distance']!=0) & (train_df['fare_amount']==0)]","4bd452a0":"scenario_3['fare_amount'] = scenario_3.apply(\n    lambda row: ((row['S_Distance'] * 1.56) + 2.50), axis=1\n)","46715202":"scenario_3['fare_amount']","c69a1a6a":"train_df.loc[(train_df['S_Distance']==0) & (train_df['fare_amount']!=0)]","43cdd07e":"scenario_4 = train_df.loc[(train_df['S_Distance']==0) & (train_df['fare_amount']!=0)]","d199f281":"scenario_4","c7d2492d":"len(scenario_3)","1dc600f3":"len(scenario_4)","34c5ea82":"scenario_4.loc[(scenario_4['fare_amount']<=3.0)&(scenario_4['S_Distance']==0)]","674ba9be":"scenario_4.loc[(scenario_4['fare_amount']>3.0)&(scenario_4['S_Distance']==0)]","bd6d1dde":"scenario_4_sub = scenario_4.loc[(scenario_4['fare_amount']>3.0)&(scenario_4['S_Distance']==0)]","43ac63a0":"len(scenario_4_sub)","c840c200":"scenario_4_sub['S_Distance'] = scenario_4_sub.apply(\nlambda row: ((row['fare_amount']-2.50)\/1.56), axis=1\n)","c7f10fc0":"train_df.update(scenario_4_sub)","f3cc73fa":"len(train_df)","2bff943c":"train_df.columns","a81bfadf":"test_df.columns","8e06d5df":"train_df = train_df.drop(['key','pickup_datetime'], axis = 1)\ntest_df = test_df.drop(['key','pickup_datetime'], axis = 1)","30a2cdf3":"train_df.columns","0d84c65f":"test_df.columns","7907d186":"x_train = train_df.iloc[:,train_df.columns!='fare_amount']\ny_train = train_df['fare_amount'].values\nx_test = test_df","e3cb346f":"x_train.shape","89442620":"y_train.shape","07e97e14":"rg=RandomForestRegressor()\nrg.fit(x_train,y_train)\ny_predict=rg.predict(x_test)\ny_predict","61b4974b":"submission = pd.read_csv('..\/input\/sample_submission.csv')\nsubmission['fare_amount'] = y_predict\nsubmission.to_csv('submission_1.csv', index=False)\nsubmission.head(10)","ef495e96":"Now EDA for affecting fare_amount since our output variable is fare_amount so we can do Bivariate analysis and the observation could be:\n* Does date time effect the fare price?\n* Does passenger counts effect the fare price?\n* Does distance effects the fair price?\n* Does day of the week effect the fare price?\n\nTo finding these assumtion we will find the surface distance between two points: Longitude and Latitude","8055cdcc":"key and pickup_datetime seems to be datetime colume","e5dedf01":"Exploratory Data Analysis\n* Explore datasets like size,dimensions, variables, variable types, mean, median, mode etc\n* Checking missing or nan values,\n* Chceking outliers\n","5e99653e":"In Passenger_count field the maximum passenger is 208 hance this is not correct. More than 6 passenger in a taxi(sedan or suv) is not making sense in ideal case,so we will drop the record which have more than six passenger","b5c85e89":"Does the date and time of pickup affect the fair","06c38511":"There are 38 field with negative value since fare will never be negative, so it is good to drop the records","8f4821b0":"****Does distance effects the fair price****\nIt is confirm that distance will always affect the fair price.","823760e5":"Does number of passenger affect the fare","f0977524":"Does day of the week affect fare"}}