{"cell_type":{"c8eeca9e":"code","2660fd1f":"code","14163da7":"code","bbbd81bb":"code","255769f2":"code","dd1eb5e4":"code","32ae1231":"code","1fc3ad44":"code","a2b7d70d":"code","54cebd6b":"code","8d5624a9":"code","21b50d94":"code","5b7db01b":"code","b91e6e50":"code","7f021ec1":"code","f9e6105b":"code","51dd7dd7":"code","b7a75071":"code","a811b8c6":"code","b7be33dc":"code","25cc6824":"code","fa82027a":"code","53c31c56":"code","85eac199":"markdown","723a56ef":"markdown","db93cc5f":"markdown","9b9c93bd":"markdown","bdeea3b7":"markdown","78cc823d":"markdown","e11b88f5":"markdown","d9ed6c13":"markdown","eda05861":"markdown","dcf9ab7e":"markdown","7dcfbd4b":"markdown","fd660353":"markdown"},"source":{"c8eeca9e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2660fd1f":"train = pd.read_csv('..\/input\/train_V2.csv')","14163da7":"train.head()","bbbd81bb":"plt.figure(figsize=(15,10))\nsns.countplot(x='kills',data=train,palette='RdBu_r')","255769f2":"sns.jointplot(x=\"winPlacePerc\", y=\"kills\", data=train, height=10, ratio=3)\nplt.show()","dd1eb5e4":"kills = train.copy()\n\nkills['killsCategories'] = pd.cut(kills['kills'], [-1, 0, 2, 5, 10, 60], labels=['0_kills','1-2_kills', '3-5_kills', '6-10_kills', '10+_kills'])\n\nplt.figure(figsize=(15,8))\nsns.boxplot(x=\"killsCategories\", y=\"winPlacePerc\", data=kills)\nplt.show()","32ae1231":"sns.jointplot(x=\"winPlacePerc\", y=\"heals\", data=train, height=10, ratio=3)\nplt.show()","1fc3ad44":"sns.jointplot(x=\"winPlacePerc\", y=\"boosts\", data=train, height=10, ratio=3)\nplt.show()","a2b7d70d":"x,y = plt.subplots(figsize=(15, 15))\nsns.heatmap(train.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=y)\nplt.show()","54cebd6b":"train['playersJoined'] = train.groupby('matchId')['matchId'].transform('count')\n","8d5624a9":"data = train.copy()\ndata = data[data['playersJoined']>49]\nplt.figure(figsize=(15,10))\nsns.countplot(data['playersJoined'])\nplt.title(\"Players Joined\",fontsize=15)\nplt.show()","21b50d94":"train.head()","5b7db01b":"train = train.drop(['Id','groupId','matchId','playersJoined'],axis=1)","b91e6e50":"train['winPlacePerc']=pd.to_numeric(train['winPlacePerc'],errors = 'coerce')\n","7f021ec1":"train = pd.get_dummies(train,columns=['matchType'])","f9e6105b":"train.head()","51dd7dd7":"train = train.dropna(how = 'any')\n","b7a75071":"from sklearn.model_selection import train_test_split\nX= train.drop('winPlacePerc',axis= 1)\ny= train['winPlacePerc']","a811b8c6":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size =.3, random_state = 101)\n","b7be33dc":"from sklearn.linear_model import LinearRegression\nlinear_model = LinearRegression()\nlinear_model.fit(X_train,y_train)","25cc6824":"linear_model.score(X_train,y_train)\n","fa82027a":"predictions = linear_model.predict(X_test)\n","53c31c56":"from sklearn.metrics import mean_squared_error\nlinear_model_mse = mean_squared_error(predictions,y_test)\nlinear_model_mse","85eac199":"Hence, it is clear that killing has a correlation with winning.\n****\nLet us group these players based on the number of people killed.\n\n","723a56ef":"We now split our data into train and test data.","db93cc5f":"As we can see, we get a mean squared error of 0.015. Great work!\n","9b9c93bd":"We now build our model using Linear Regression.","bdeea3b7":"So in our case we have to check the target variable winPlacePerc. There are a few variables with medium to high correlation with the target variable, with walkDistance having highest positive correlation of 0.8 and killPlace having highest negative correlation of -0.7. \n****\nIn a game of PUBG, a maximum of 100 players can join at any time. But not everytime all 100 players are there in the game. There is no variable that gives us the number of players joined. So lets create one.","78cc823d":"As we can see, we get an accuracy of 83.98% which is quiet good. Now let us check our model on the testing data.","e11b88f5":"Based on this variable, you could do feature engineering to improve accuracy of your model. For feature engineering you could refer to this notebook - https:\/\/www.kaggle.com\/deffro\/eda-is-fun\n****\nI will now build the model with the help of linear regression.","d9ed6c13":"**Exploratory Data Analysis\n**\n****\nLet us first check the kill count of players in each match","eda05861":"Now, there is one categorical column, i.e., matchType. So we have to convert that column to numeric entry.","dcf9ab7e":"As seen, there are many players with 0 kills and the number of people with more kills keeps on decreasing. The maximum kills in a single match is 72.\nNow, let us see how no. of kills depends upon the win placement.","7dcfbd4b":"Clearly, healing and boosting are correlated to winPlacePerc.\n****\nLet us now check the correlation of all variables with one another.","fd660353":"Now, let us check how boosting and healing are correlated with win place percentage."}}