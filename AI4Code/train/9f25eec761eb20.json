{"cell_type":{"b77072d8":"code","093c7216":"code","03348d25":"code","e3cc0c25":"code","aa5cfc4f":"code","66dfcb70":"code","331813ed":"code","5be3e0c6":"code","5d6dcdb1":"code","1f6ca72b":"code","f9b82154":"code","4ba10432":"code","d890500f":"code","c3a5f3f2":"code","0155cd8b":"code","ed6340ba":"code","fb66d1b7":"code","fb5a13ed":"markdown","a8046453":"markdown","82f6303c":"markdown","1841a9dc":"markdown","3cbc855b":"markdown","f8215d64":"markdown","7ad5bc03":"markdown","a54bdc0d":"markdown","57365c38":"markdown","1dd162e1":"markdown","7d1d0ec6":"markdown","2f602d53":"markdown"},"source":{"b77072d8":"!pip install -q gmaps","093c7216":"import numpy as np\nimport pandas as pd\nimport gmaps\nfrom geopy.geocoders import Nominatim\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom math import radians, sin, cos, asin, sqrt\nfrom private_data import gmap_api_key\nimport warnings\nwarnings.filterwarnings('ignore')","03348d25":"data = pd.read_csv(\"\/kaggle\/input\/shinkansen-stations-in-japan\/Shinkansen_stations_inJapan.csv\")","e3cc0c25":"def get_location(address):\n    geolocator = Nominatim(user_agent=\"null\")\n    location = geolocator.geocode(address)\n    if location:\n        return [location.address, location.latitude, location.longitude]\n    else:\n        return None","aa5cfc4f":"def add_coordinates(df):\n    locs = []\n    for k in range(df[\"Station Name\"].shape[0]):\n        if get_location(df[\"Station Name\"].iloc[k] + \" station, \" + df[\"Prefecture\"].iloc[k] + \", japan\") == None:\n            locs.append(get_location(df[\"Station Name\"].iloc[k] + \" station\"))\n        else:\n            locs.append(get_location(df[\"Station Name\"].iloc[k] + \" station, \" + df[\"Prefecture\"].iloc[k] + \", japan\"))\n    locs = np.array(locs)\n    df[\"Location retrieved at\"] = locs[:,0]\n    df[\"Latitude\"] = locs[:,1]\n    df[\"Longitude\"] = locs[:,2]\n    return df","66dfcb70":"data.Shinkansen_Line = data.Shinkansen_Line.apply(lambda x: x.replace(\"_Shinkansen\", \"\"))\ndata.Shinkansen_Line = data.Shinkansen_Line.apply(lambda x: x.replace(\"-Shinknsen\", \"\"))\ndata.Company = data.Company.apply(lambda x: x.replace(\"_\", \" \"))\ndata.rename(columns={\"Station_Name\": \"Station Name\",\n                     \"Shinkansen_Line\": \"Shinkansen Line\",\n                     \"Distance from Tokyo st\": \"Distance from Tokyo station [km]\"}, inplace=True)\ndata['Station Name'] = data['Station Name'].replace(['Kurobe-Unazukionsen'],'Shin-kurobe')\ndata.loc[87, \"Station Name\"] = '\u98ef\u5c71\u99c5'","331813ed":"data = add_coordinates(data)","5be3e0c6":"data_A = data[~data[\"Shinkansen Line\"].str.contains(\",\")].copy()\n\ndata_doubles = data[data[\"Shinkansen Line\"].str.contains(\",\")].reset_index().drop([\"index\"], axis=1).copy()\n\ndouble_lines_series_1 = []\ndouble_lines_series_2 = []\n\nfor k in data_doubles[\"Shinkansen Line\"]:\n    double_lines_series_1.append(k[k.find(\",\")+1:])\n    double_lines_series_2.append(k[:k.find(\",\")])\n    \ndouble_lines_series_1 = pd.Series(double_lines_series_1)\ndouble_lines_series_2 = pd.Series(double_lines_series_2)\n\ndata_doubles1 = data_doubles.copy()\ndata_doubles2 = data_doubles.copy()\n\ndata_doubles1[\"Shinkansen Line\"] = double_lines_series_1\ndata_doubles2[\"Shinkansen Line\"] = double_lines_series_2\n\ndata_B = pd.concat([data_doubles1, data_doubles2], axis=0, ignore_index=True)\n\ndata = pd.concat([data_A, data_B], axis=0, ignore_index=True)","5d6dcdb1":"def gmaps_segments(df, color):\n    segments = []\n    for k in range(df.shape[0]-1):\n        segments.append(\n            gmaps.Line(\n                start=(float(df[\"Latitude\"].iloc[k]), float(df[\"Longitude\"].iloc[k])),\n                end=(float(df[\"Latitude\"].iloc[k+1]), float(df[\"Longitude\"].iloc[k+1])),\n                stroke_weight=3.0,\n                stroke_color=color,\n                stroke_opacity=1\n                      )\n                               )\n    return segments","1f6ca72b":"shinkansen_lines = dict()\nline_colors = {\"Tokaido\": '#0068B6',\n               \"Sanyo\": '#0B416A',\n               \"Tohoku\": '#059646',\n               \"Joetsu\": '#38614A',\n               \"Yamagata\": '#66B68A',\n               \"Akita\": '#99CFB1',\n               \"Hokuriku\": '#BC5127',\n               \"Kyushu\": '#FF1E23',\n               \"Hokkaido\": '#8DC21F'}","f9b82154":"shinkansen_lines = dict()\nfor line in data[\"Shinkansen Line\"].unique():\n    seg = data[data[\"Shinkansen Line\"]==line].sort_values(by=\"Distance from Tokyo station [km]\", ascending=True).copy()\n    shinkansen_lines[line] = gmaps_segments(seg, line_colors[line])","4ba10432":"def add_gmaps_layer(figure, segments):\n    for k, v in segments.items():\n        figure.add_layer(gmaps.drawing_layer(features=v))\n    return","d890500f":"gmaps.configure(api_key=gmap_api_key)\nlayout={'width': '900px',\n        'height': '900px',\n        'padding': '3px',\n        'margin': \"0px 0px 0px 50px\",\n        'border': '0px solid black'}\nfig = gmaps.figure(map_type=\"TERRAIN\", center=(39, 138), zoom_level=6, layout=layout, display_toolbar=False)\nadd_gmaps_layer(fig, shinkansen_lines)\nfig","c3a5f3f2":"def haversine_distance(lon1, lat1, lon2, lat2):\n    \"\"\"\n    Compute distance between two pairs of (lat, lng)\n    \"\"\"\n    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])\n    dlon = lon2 - lon1\n    dlat = lat2 - lat1\n    a = sin(dlat \/ 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon \/ 2) ** 2\n    return 2 * 6371 * asin(sqrt(a))","0155cd8b":"lines_sizes = dict()\n\nfor line in list(data[\"Shinkansen Line\"].unique()):\n    data_t = data[data[\"Shinkansen Line\"] == line].sort_values(by=\"Distance from Tokyo station [km]\").reset_index().copy()\n    dists = 0\n    for k in range(len(data_t)-1):\n        d = haversine_distance(float(data_t.loc[k, 'Longitude']), \n                               float(data_t.loc[k, 'Latitude']),\n                               float(data_t.loc[(k+1), 'Longitude']),\n                               float(data_t.loc[(k+1), 'Latitude']))\n        dists += d\n    lines_sizes[line] = dists","ed6340ba":"line_km = pd.DataFrame(lines_sizes, index=[0]).T.reset_index().rename(columns={\"index\": \"Shinkansen Line\", 0: \"Size [km]\"})\nline_km = line_km.sort_values(by=\"Size [km]\", ascending=True)\nline_km[\"Line color\"] = line_km[\"Shinkansen Line\"].map(line_colors)","fb66d1b7":"fig = plt.figure(figsize=(12,6))\nclrs = line_colors.values()\nax = sns.barplot(y = \"Shinkansen Line\", x=\"Size [km]\", data=line_km, palette=list(line_km[\"Line color\"]), orient=\"h\");\nax.tick_params(axis='both', which='major', labelsize=15, labelrotation=12.)\nplt.rc('axes', labelsize=20)\nplt.xlim(0, 750)\nplt.grid()\nplt.title(\"Shinkansen lines length [km]\", fontdict={\"fontsize\":20}, pad=30)\nax.set_axisbelow(True)","fb5a13ed":"<div style=\"font-size:14pt; color:royalblue; font-variant:small-caps; font-weight:700\">There are stations that belongs to two different Shinkansen lines<\/div><br><div style=\"font-size:14pt; color:black; font-variant:small-caps; font-weight:100\">We are here separating them<\/div>","a8046453":"<div style=\"font-size:14pt; color:black; font-variant:small-caps; font-weight:100\">The following function will define segments corresponding to the path between two train station<\/div>","82f6303c":"<div style=\"font-size:25pt; color:royalblue; font-variant:small-caps; font-weight:700\">Data cleaning<\/div><br><div style=\"font-size:14pt; color:black; font-variant:small-caps; font-weight:100\">Again we need to change manually several locations so that we get the correct address coordinates<\/div>","1841a9dc":"<div style=\"font-size:25pt; color:royalblue; font-variant:small-caps; font-weight:700\">Adding coordinates<\/div>","3cbc855b":"<div style=\"font-size:25pt; color:royalblue; font-variant:small-caps; font-weight:700\">The Shinkansen lines path on the map<\/div><br><div style=\"font-size:14pt; color:black; font-variant:small-caps; font-weight:100\">Sadly the google maps do not show on Kaggle notebook (or I didn't find the way to do it), thus this is a simple image but it will work fine if you download the notebook and run it on a Jupyter Notebook (not Jupyter lab)<\/div>","f8215d64":"<div style=\"font-size:14pt; color:black; font-variant:small-caps; font-weight:100\">The next function is tweaked so it can get the correct address each time ..<\/div>","7ad5bc03":"<div style=\"font-size:14pt; color:black; font-variant:small-caps; font-weight:100\">This function will add segments to the map<\/div>","a54bdc0d":"<div style=\"font-size:25pt; color:royalblue; font-variant:small-caps; font-weight:700\">Importing data<\/div>","57365c38":"<div style=\"font-size:14pt; color:black; font-variant:small-caps; font-weight:100\">Here we create the segments to be plotted on the map<\/div>","1dd162e1":"<img src=\"https:\/\/imgur.com\/VXlJ6iZ.jpg\">","7d1d0ec6":"<div style=\"font-size:14pt; color:black; font-variant:small-caps; font-weight:100\">Here are defined the shinkansen lines colors<\/div>","2f602d53":"<div style=\"font-size:25pt; color:royalblue; font-variant:small-caps; font-weight:700\">Functions retrieving location<\/div>"}}