{"cell_type":{"555d6bb4":"code","c11368b1":"code","8abb2cc0":"code","df67df9e":"code","52339ef1":"code","66a4662d":"code","0caf4f5b":"code","58ef74af":"markdown"},"source":{"555d6bb4":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as colors\nimport matplotlib.cm as cmx\nimport seaborn as sns\nsns.set()\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nfrom sklearn.model_selection import GroupKFold\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestRegressor\n\ntrain = pd.read_csv('..\/input\/train.csv', index_col='id')\ntest = pd.read_csv('..\/input\/test.csv', index_col='id')\n\nstructures = pd.read_csv('..\/input\/structures.csv')\n\ndef map_atom_info(df, atom_idx):\n    df = pd.merge(df, structures, how = 'left',\n                  left_on  = ['molecule_name', f'atom_index_{atom_idx}'],\n                  right_on = ['molecule_name',  'atom_index'])\n    \n    df = df.drop('atom_index', axis=1)\n    df = df.rename(columns={'atom': f'atom_{atom_idx}',\n                            'x': f'x_{atom_idx}',\n                            'y': f'y_{atom_idx}',\n                            'z': f'z_{atom_idx}'})\n    return df\n\ntrain = map_atom_info(train, 0)\ntrain = map_atom_info(train, 1)\n\ntest = map_atom_info(test, 0)\ntest = map_atom_info(test, 1)","c11368b1":"%%time\n# This block is SPPED UP\n\ntrain_p_0 = train[['x_0', 'y_0', 'z_0']].values\ntrain_p_1 = train[['x_1', 'y_1', 'z_1']].values\ntest_p_0 = test[['x_0', 'y_0', 'z_0']].values\ntest_p_1 = test[['x_1', 'y_1', 'z_1']].values\n\ntrain['dist_speedup'] = np.linalg.norm(train_p_0 - train_p_1, axis=1)\ntest['dist_speedup'] = np.linalg.norm(test_p_0 - test_p_1, axis=1)","8abb2cc0":"train.head(5)","df67df9e":"train['same_atom'] = (train['atom_0'] == train['atom_1']).astype('int')","52339ef1":"train_part = train.loc[:10000]","66a4662d":"train.plot.scatter(x = 'dist_speedup', y = 'scalar_coupling_constant', c = 'same_atom',\n                       cmap = 'summer', alpha = 0.4)\nplt.show()","0caf4f5b":"list_type = list(set(train['type']))\ncNorm  = colors.Normalize(vmin=0, vmax=len(list_type))\ncmap_plot = plt.get_cmap('Set1')\nscalarMap = cmx.ScalarMappable(norm=cNorm, cmap=cmap_plot)\n\nfor i in range(len(list_type)):\n    indx = train['type'] == list_type[i]\n    plt.scatter(x = train.loc[indx, 'dist_speedup'], y = train.loc[indx, 'scalar_coupling_constant'],\n               color = scalarMap.to_rgba(i), label = list_type[i], alpha = 0.4)\n    \nplt.xlabel('dist_speedup')\nplt.ylabel('scalar_coupling_constant')\nplt.legend(loc='upper right')\nplt.show()","58ef74af":"## It turns out very segmented pattern!\n## Hope its helps"}}