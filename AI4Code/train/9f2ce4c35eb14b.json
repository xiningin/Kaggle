{"cell_type":{"ecee2a93":"code","ed68d80d":"code","09a2ac72":"code","3e820971":"code","d66d5a20":"code","e706f89a":"code","21f09c0b":"code","5b2bc7ee":"code","f7bdd51b":"code","e3b36672":"code","0962af98":"code","372c7916":"code","a683b380":"code","6f6000a2":"code","b0826569":"code","f50dc80d":"code","704e5131":"code","54c74842":"code","20af254e":"code","b7dcf5d5":"code","dbbd95a4":"code","c8d08e18":"code","c3d6e2a7":"code","0e3fafc8":"code","f7760da6":"code","6faa6fde":"code","f77566a4":"code","4d2e2382":"code","41712da7":"markdown","b4d22211":"markdown","9575f348":"markdown","2faf4cfc":"markdown","b0694273":"markdown","5a8700be":"markdown","2ebb2406":"markdown","fa31dec5":"markdown","b4c4d9a9":"markdown","9e3822ad":"markdown","8f43fd1f":"markdown","0bc7a1dd":"markdown","67a82564":"markdown"},"source":{"ecee2a93":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# # For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom scipy import stats\nimport statsmodels.api as sm\n\nimport matplotlib.pyplot as plt # plotting\n%matplotlib inline\nimport seaborn as sns # plotting\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n# # Input data files are available in the \"..\/input\/\" directory.\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n     for filename in filenames:\n         print(os.path.join(dirname, filename))\n\n# # Any results you write to the current directory are saved as output.","ed68d80d":"base_url = '\/kaggle\/input\/web-traffic-time-series-forecasting\/'\n\ntrain_1 = pd.read_csv(base_url+'train_1.csv')\n# train_2 = pd.read_csv(base_url+'train_2.csv')","09a2ac72":"train_1.shape","3e820971":"train_1.head()","d66d5a20":"trainT = train_1.drop('Page', axis=1).T\ntrainT.columns = train_1.Page.values\ntrainT.head()","e706f89a":"metallica = pd.DataFrame(trainT['Metallica_es.wikipedia.org_all-access_all-agents'])\nmetallica.head()","21f09c0b":"print (metallica.shape)","5b2bc7ee":"\nprint (metallica.isnull().sum())","f7bdd51b":"metallica.plot(figsize=(15, 6))\nplt.show()","e3b36672":"def statistics(x): \n    # Determining rolling statistics\n    rolmean = x.rolling(window=22, center=False).mean()\n    rolstd = x.rolling(window=12, center=False).std() \n    \n    # Plot rolling statistics\n    orig = plt.plot(x.values, color='blue', label='Original') \n    mean = plt.plot(rolmean.values, color='red', label='Rolling Mean') \n    std = plt.plot(rolstd.values, color='black', label='Rolling Std')\n    plt.legend(loc='best')\n    plt.title('Rolling Mean & Standard Deviation')\n    plt.show(block=False)","0962af98":"statistics(metallica)","372c7916":"metallica.index  = pd.to_datetime(metallica.index)\nmetallica.tail()","a683b380":"from statsmodels.tsa.stattools import adfuller\n\nadf_test = adfuller(metallica)\n\nadf_test\n\nprint \"ADF = \" + str(adf_test[0])\nprint \"p-value = \" +str(adf_test[1])","6f6000a2":"metallica_log = np.log1p(metallica)\nplt.plot(metallica_log.values, color='green')\nplt.show()","b0826569":"from statsmodels.tsa.seasonal import seasonal_decompose\ndecomposition = seasonal_decompose( metallica_log.values, model=\"multiplicative\", freq=7 )\ntrend = decomposition.trend\nseasonal = decomposition.seasonal\nresidual = decomposition.resid\n\nplt.subplot(411)\nplt.title('Observed = Trend + Seasonality + Residuals')\nplt.plot( metallica_log.values, label='Observed' )\nplt.legend(loc='best')\n\nplt.subplot(412)\nplt.plot(trend, label='trend')\nplt.legend(loc='best')\n\nplt.subplot(413)\nplt.plot(seasonal, label='seasonal')\nplt.legend(loc='best')\n\nplt.subplot(414)\nplt.plot(residual, label='residual')\nplt.legend(loc='best')\n\nplt.tight_layout()\nplt.show()","f50dc80d":"metallica_log_diff = metallica_log - metallica_log.shift()\nplt.plot( metallica_log_diff.values )\nplt.show()","704e5131":"metallica_log_diff.tail()","54c74842":"metallica_log_diff.dropna(inplace=True)\nstatistics(metallica_log_diff)","20af254e":"from statsmodels.tsa.stattools import acf, pacf \nfrom statsmodels.tsa.arima_model import ARIMA\nimport itertools","b7dcf5d5":"p = d = q = range(0, 2)\npdq = list(itertools.product(p, d, q))\nseasonal_pdq = [(x[0], x[1], x[2], 7) for x in list(itertools.product(p, d, q))]\nprint('Examples of parameter combinations for Seasonal ARIMA...')\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))\nprint('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))\nprint('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))","dbbd95a4":"results_aic_min = 10000\n\nfor param in pdq:\n    for param_seasonal in seasonal_pdq:\n        try:\n            mod = sm.tsa.statespace.SARIMAX(metallica_log,\n                                            order=param,\n                                            seasonal_order=param_seasonal,\n                                            enforce_stationarity=False,\n                                            enforce_invertibility=False)\n            results = mod.fit()\n            \n            if results.aic < results_aic_min:\n                results_aic_min = results.aic\n\n            print('ARIMA{}x{} - AIC:{}'.format(param, param_seasonal, results.aic))\n            \n                      \n        except:\n            continue\n\nprint(results_aic_min)","c8d08e18":"mod = sm.tsa.statespace.SARIMAX(metallica_log,\n                                order=(1, 1, 1),\n                                seasonal_order=(0, 0, 0, 7),\n                                enforce_stationarity=False,\n                                enforce_invertibility=False)\nresults = mod.fit()\nprint(results.summary().tables[1])","c3d6e2a7":"results.plot_diagnostics(figsize=(16, 8))\nplt.show()","0e3fafc8":"metallica_log.index  = pd.to_datetime(metallica_log.index)\nmetallica_log.tail()","f7760da6":"pred = results.get_prediction(start=pd.to_datetime('2016-10-31'), dynamic=False)\npred_ci = pred.conf_int()\nax = metallica_log['2015':].plot(label='observed')\npred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.2)\nax.set_xlabel('Date')\nax.set_ylabel('Metallica Wikipedia Article Visits')\nplt.legend()\nplt.show()","6faa6fde":"y_forecasted = pred.predicted_mean\ny_truth = metallica_log['2016-10-31':]\nprint(y_forecasted.shape, y_truth.iloc[:,0].shape)","f77566a4":"mse = ((y_forecasted - y_truth.iloc[:,0]) ** 2).mean()\nprint('The Mean Squared Error of our forecasts is {}'.format(round(mse, 2)))","4d2e2382":"pred_uc = results.get_forecast(steps=60)\npred_ci = pred_uc.conf_int()\nax = metallica_log.plot(label='observed', figsize=(14, 7))\npred_uc.predicted_mean.plot(ax=ax, label='Forecast')\nax.fill_between(pred_ci.index,\n                pred_ci.iloc[:, 0],\n                pred_ci.iloc[:, 1], color='k', alpha=.25)\nax.set_xlabel('Date')\nax.set_ylabel('Furniture Sales')\nplt.legend()\nplt.show()","41712da7":"## Data description","b4d22211":"## EDA and Stationarity","9575f348":"## Creating Matallica ES and basic plots","2faf4cfc":"## Parameter ('grid') search","b0694273":"# Metallica Spain Tour [Econometric]\n### Based on Wikipedia Web Page Traffic","5a8700be":"## Producing and visualizing forecasts (extrapulation)","2ebb2406":"## RUN ARIMA","fa31dec5":"## Decomposing and Smoothing","b4c4d9a9":"#### Train Data Content - 145.063 rows representing different Wikipedia URL pages, 551 columns\n#### first column is the URL page and then each column represents a value of the number of visits to the page in that day\n#### dates from 2015-07-01 to 2016-12-31 (1.5 year, total of 550 days)","9e3822ad":"#### Output suggests that ARIMA (1, 1, 1)x(0, 0, 0, 7)  yields the lowest AIC:-534.2781046089091","8f43fd1f":"## Data","0bc7a1dd":"## Fitting","67a82564":"## Validating forecast (interpulation)"}}