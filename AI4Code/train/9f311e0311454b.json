{"cell_type":{"f41bb773":"code","5c897538":"code","04c616a5":"code","4b14a609":"code","e6513bc0":"code","845c7a00":"markdown","92ef5479":"markdown","a1ec99d9":"markdown"},"source":{"f41bb773":"from kaggle_environments import make\n\nenv = make(\"connectx\", debug=True)","5c897538":"%%writefile submission.py\n\n# We can import where we normally would.\nimport time\n\n# We can have global variables to store persistent state across turns.\nturn = -1\n\n# We can define our helper functions at the top level, which makes them easier to debug.\ndef increment(turn, config):\n    return (turn + 1) % config.columns\n\n\n# Our agent. This function needs to be the last one in the file, \n# so keep it at the bottom of this cell. \ndef agent_sequential(obs, config):\n    global turn\n    \n    # Set a deadline so we return before the timeout. Be sure to include a buffer \n    # so you never accidently go over!\n    deadline = time.time() + config.actTimeout - 0.5\n    \n    while time.time() < deadline:\n        # Do lots of very important calculuations\n        pass\n    \n    # Just drop our next piece in column turn % 7. This will go from left to right\n    # across the board.\n    turn = increment(turn, config)\n        \n    return turn","04c616a5":"# Validate submission file. This code is from the \"Intro to Game AI and Reinforcement Learning\" course.\n# https:\/\/www.kaggle.com\/alexisbcook\/play-the-game\n\nimport sys\nfrom kaggle_environments import utils\n\nout = sys.stdout\nsubmission = utils.read_file(\"\/kaggle\/working\/submission.py\")\nagent = utils.get_last_callable(submission)\nsys.stdout = out\n\nenv = make(\"connectx\", debug=True)\nenv.run([agent, \"random\"])\nprint(\"Success!\" if env.state[0].status == env.state[1].status == \"DONE\" else \"Failed...\")","4b14a609":"%run submission.py ","e6513bc0":"# Two agents play one game round\nenv.run([agent_sequential, \"random\"]);\n# Show the game\nenv.render(mode=\"ipython\")","845c7a00":"# ConnectX Beginner Tips: Persistent Sate & Timeouts\n\nSome of the info in the starter notebooks is out-of-date, so I thougt I'd share some tips that will make it easier to get started. These are all things that tripped me up in the beginning.\n\n1. **Your agent functions don't have to be standalone.** You can write a python file with definitions at the top level as you normally would. Just make sure your agent function is the last definition in the file.\n\n\n2. **You can use global variables for persistent state.** This lets you store data across turns. For example, if you want to try Q-learning, you can save your value estimates and improve them as the game progresses.\n\n\n3. **Use `config.actTimeout` to get as much work done during your turn as possible.** You can also use config.timeout, which is the older name. They are the same (at least for now).\n\n\nAny additional tips are appreciated!\n\n\nThe rest of this notebook illustrates a simple agent that keeps track of its turn number to drop its pieces from left to right.","92ef5479":"The next cell loads up our agent since we never actually evaluated the code in cell [2].","a1ec99d9":"The next cell contains the code for our agent. We write out the whole cell to \"submission.py\" using the `%%writefile` magic. Be sure to comment out `%%writefile` when you're working, otherwise executing the cell doesn't actually evaluate the code."}}