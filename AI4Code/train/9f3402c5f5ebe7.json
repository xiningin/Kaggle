{"cell_type":{"4cd1b44c":"code","3ab7a988":"code","0372c19d":"code","960fdb5a":"code","f9397456":"code","c9b6de1c":"code","7a9d298a":"code","0da6464d":"code","4d4f714c":"code","dfba0133":"code","35b13a2d":"code","669d3230":"code","bb5528f3":"markdown","f3ff929b":"markdown","0f87d89e":"markdown","71ada674":"markdown","c60c23cf":"markdown","b7eedfcc":"markdown","0766b2ae":"markdown","dc61740b":"markdown","e411c3a4":"markdown","f887ec1d":"markdown","d4a76604":"markdown","cc324d9f":"markdown","21132d63":"markdown","b984ebda":"markdown","621b2719":"markdown","8a6a5ff3":"markdown","bff19ac6":"markdown","c4476221":"markdown","5db84d2f":"markdown"},"source":{"4cd1b44c":"import pandas as pd\nimport folium          #  folium libraries\nfrom   folium.plugins import MarkerCluster\n\ntry:\n    import geocoder    #  geocoder\nexcept:\n    ! pip install geocoder\n    import geocoder    #  geocoder\n\n\n#  Kaggle directories\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","3ab7a988":"geocoder.arcgis('dallas, texas').latlng    # get lat & lng coord","0372c19d":"def arc_latlng(location):\n    g = geocoder.arcgis('{}'.format(location))\n    lat_lng_coords = g.latlng\n    print(location,lat_lng_coords)\n    return lat_lng_coords\n\narc_latlng('dallas, texas')     #  test arc_latlng","960fdb5a":"#  location list\n#  10001 is the zip code of Manhattan, New York, US\n#  M9B   is a postal code in Toronto, Canada\n#  Everest is Mt. Everest in Nepal\nlocation = ['10001','Tokyo','Sydney','Beijing','Karachi','Dehli', 'Everest','M9B','Eiffel Tower','Sao Paulo','Moscow']\n\n\n#  call get_latlng function\nloc_latlng = [arc_latlng(location) for location in location]\n\n\n#  create dataframe for the results\ndf = pd.DataFrame(data = loc_latlng, columns = {'Latitude','Longitude'})\ndf.columns = ['Latitude','Longitude']  #  correct column order\ndf['Location'] = location              #  add location names","f9397456":"invalid_loc = ['london','berlin','0902iuey7','999paris']  # 3 & 4 are invalid\ninvalid_latlng = [arc_latlng(invalid_loc) for invalid_loc in invalid_loc]","c9b6de1c":"df","7a9d298a":"#  center map on mean of Latitude\/Longitude\nmap_world = folium.Map(location=[df.Latitude.mean(), df.Longitude.mean()], tiles = 'stamenterrain', zoom_start = 2)\n\n#  add Locations to map\nfor lat, lng, label in zip(df.Latitude, df.Longitude, df.Location):\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        fill=True,\n        color='Blue',\n        fill_color='Yellow',\n        fill_opacity=0.6\n        ).add_to(map_world)\n\n#  display interactive map\nmap_world\n\n#  save map to local machine, open in any browser\n#  map_world.save(\"C:\\\\ ... <path> ... \\map_world_NYC.html\")","0da6464d":"locationNYC = ['Empire State Building','Central Park','Wall Street','Brooklyn Bridge','Statue of Liberty','Rockefeller Center', 'Guggenheim Museum','Metlife Building','Times Square','United Nations Headquarters','Carnegie Hall']\nlocNYC_latlng = [arc_latlng(locationNYC) for locationNYC in locationNYC]\n\ndfNY = pd.DataFrame(data = locNYC_latlng, columns = {'Latitude','Longitude'})\ndfNY.columns = ['Latitude','Longitude']\ndfNY['Location'] = locationNYC","4d4f714c":"map_world_NYC = folium.Map(location=[df.Latitude.mean(), df.Longitude.mean()],\n                       tiles = 'openstreetmap', \n                       zoom_start = 1)\n\n#  CIRCLE MARKERS\n#------------------------------\nfor lat, lng, label in zip(df.Latitude, df.Longitude, df.Location):\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        popup=label,\n        fill=True,\n        color='black',\n        fill_color='red',\n        fill_opacity=0.6\n        ).add_to(map_world_NYC)\n#------------------------------\n\n    \n#  MARKERS CLUSTERS\n#------------------------------\nmarker_cluster = MarkerCluster().add_to(map_world_NYC)\nfor lat, lng, label in zip(dfNY.Latitude, dfNY.Longitude, dfNY.Location):\n    folium.Marker(location=[lat,lng],\n            popup = label,\n            icon = folium.Icon(color='green')\n    ).add_to(marker_cluster)\n\nmap_world_NYC.add_child(marker_cluster)\n#------------------------------\n\n#  display map\nmap_world_NYC         ","dfba0133":"dfs = pd.read_csv('..\/input\/suicide-rates-overview-1985-to-2016\/master.csv')  # suicide rates dataset\n\ndfs = dfs[dfs['year'] == 2013]\ndfs = dfs[['country','year','suicides\/100k pop']].groupby('country').sum()\ndfs.reset_index(inplace=True)\n\n#  update names to match names in geoJSON file\ndfs.replace({\n        'United States':'United States of America',\n        'Republic of Korea':'South Korea',\n        'Russian Federation':'Russia'},\n        inplace=True)\n\ndfs.head()","35b13a2d":"world_geo = os.path.join('..\/input\/worldcountries', 'world-countries.json')","669d3230":"world_choropelth = folium.Map(location=[0, 0], tiles='Cartodb Positron',zoom_start=2)\n\nworld_choropelth.choropleth(\n    geo_data=world_geo,\n    data=dfs,\n    columns=['country','suicides\/100k pop'],\n    key_on='feature.properties.name',\n    fill_color='YlOrRd',\n    fill_opacity=0.7, \n    line_opacity=0.2,\n    legend_name='Suicide rates per 100k Population (2013)')\n\n# display map\nworld_choropelth","bb5528f3":"###  1.1  Search with ArcGIS<a id=\"arc_search\"><\/a>\nUse **\".latlng\"** extension with **geocoder.arcgis** to get the latitude and longitude.","f3ff929b":"This is a short tutorial\/quick start guide on how to obtain location data using **ArcGIS**, create interactive and Choropleth maps with **Folium**.<br>\n  -  **ArcGIS** is a great utility in geocoder for obtaining the latitude and longitude  of a location.   \nwebsite:  https:\/\/www.esri.com\/en-us\/arcgis\/about-arcgis\/overview\n<br><br>\n  -  **Folium** is a Python library for creating interactive maps.   \nwebsite:  https:\/\/python-visualization.github.io\/folium\/\n\n\n## Table Of Content\n1. [ArcGIS](#arc)<br>\n1.1  [Search with ArcGIS](#arc_search)<br>\n1.2  [Define ArcGIS Function](#arc_func)<br>\n1.3  [Execute ArcGIS Function](#arc_exec)<br>\n1.4  [Invalid Location and ArcGIS](#arc_invalid)<br>\n2. [Folium Maps](#fol)<br>\n      2.1 [World Map](#fol_world)<br>\n      2.2 [Markers](#fol_marker)<br>\n3. [Choropleth Maps](#choro)<br>\n3.1  [Create Dataframe](#choro_df)<br>\n3.2  [Read geoJSON File](#choro_json)<br>\n3.3  [Create Choropleth Map](#choro_plot)<br>\n\n\n-  - -\n * **Lat\/Lng Conversion**:  Folium works with **decimal** values for Latitude and Longitude.  Use the formula below if Latitude and Longitude are only available in degree\/minutes\/seconds:\n    \n    `Latitude  (dec) = degrees + (minutes\/60) + (seconds\/3600)`<br>\n    `Longitude (dec) = degrees + (minutes\/60) + (seconds\/3600)`\n<br>\n\n * **Install Folium**:  Jupyter supports folium.  For other applications\/IDE (e.g. PyCharm, Spyder, Sublime, etc.), use \"pip install folium --upgrade\" or respective \"install\" variations.\n\n<br>\nI will keep adding more info\/code as I go along.  Please upvote if you found this useful :-)","0f87d89e":"###  3.1  Create Dataframe<a id=\"choro_df\"><\/a>\n`suicide rates from 1986 to 2016` dataset will be used to create a dataframe that contains 'country' and 'suicides\/100k pop' for the year 2013.\n\n  *  Some of country names will be updated to match the geoJSON file\n  *  Once the data for 2013 has been created, the 'year' column can be ignored\n  *  Data is available for only a limited number of countries","71ada674":"###  2.1  Markers<a id=\"fol_mark\"><\/a>\n**CircleMarker** and **MarkerCluster** are two of the most common markers in Folium.  CircleMarker was used in the previous example.  Let's create a dataframe to use with MarkerCluster with locations around New York City.","c60c23cf":"###  1.3  Execute ArcGIS Function<a id=\"arc_exec\"><\/a>\nUse the get_latlng function to get the latitude and longitude of several locations and save the information in a dataframe.  ARCGIS can take location names, zip\/postal codes, landmark, etc.   \n<br>\nSometimes, the dataframe columns do not maintain their order.  Verify that the column order is correct after dataframe is created.","b7eedfcc":"###  2.1  World Map<a id=\"fol_world\"><\/a>\nPlotting the locations from ArcGIS section.","0766b2ae":"###  3.2  Read geoJSON File<a id=\"choro_json\"><\/a>\n`world-countries` dataset will be used for the geoJSON file.\n\nThe geoJSON file contains the shape of the country in multiple latitude\/logitude entries:\n`{\"type\":\"Feature\",\"properties\":{\"name\":\"Austria\"},\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[16.979667,48.123497],[16.903754,47.714866],...<deleted>`\n\nNOTE:  Choropleth map will use the object `feature.properties.name` as a key.","dc61740b":"[top](#top)\n\n---\n#  1.  ArcGIS <a id=\"arc\"><\/a>","e411c3a4":"[top](#top)\n\n---\n# 3.  Choropleth Maps <a id=\"choro\"><\/a>\n\n**Choropleth maps** provide a visualization of statistical measurements, such as population density or per-capita income, overlaid on a geographic area.  A **geoJSON** file that defines the areas\/boundaries of the state, county, or country is required.","f887ec1d":"###  1.4  Invalid Location and ArcGIS<a id=\"arc_invalid\"><\/a>\nInvalid location will return a ***\"None\"*** value and will throw an error when creating the dataframe.","d4a76604":"###  1.2  Define ArcGIS Function<a id=\"arc_func\"><\/a>\nDefine function to get latitude and longitude.","cc324d9f":"#  GEOCODER (ArcGIS), Folium and Choropleth Maps<a id=\"top\"><\/a>\n---","21132d63":"###   Import Libraries","b984ebda":"###  EXTRA\nAvailble **Folium 'tiles':**<br>\ntiles = 'cartodbdark_matter',<br>\n'cartodbpositron',<br>\n'cartodbpositronnolabels',<br>\n'cartodbpositrononlylabels',<br>\n'cloudmade',<br>\n'mapbox',<br>\n'mapboxbright',<br>\n'mapboxcontrolroom',<br>\n'openstreetmap',<br>\n'stamenterrain',<br>\n'stamentoner',<br>\n'stamentonerbackground',<br>\n'stamentonerlabels',<br>\n'stamenwatercolor'.<br>\n<br><br>\nAvailble **Folium 'fill_color':**<br>\nfill_color = default 'blue'<br>\nhttps:\/\/www.kaggle.com\/asimislam\/python-colors-color-cmap-palette\n\n---\n[top](#top)","621b2719":"Note the following components in the Folium map:\n\n  *  **location** - lat\/lng can be any valid value\n  *  **tiles** - style of map\n  *  **zoom_start** - higher the number, closer the zoom\n  *  **popup** - text when a marker is clicked","8a6a5ff3":"Create Folium map with:\n*  **CircleMarker** with world locations\n*  **MarkerCluster** with New York landmarks \n\nZoom in on New York City to see the cluster open up.  Click on the icon for landmark names.","bff19ac6":"[top](#top)\n\n---\n#  2.  Folium Maps <a id=\"fol\"><\/a>","c4476221":"###  3.3  Create Choropleth Map<a id=\"choro_plot\"><\/a>\nChoropleth Map is created for *'suicides\/100k pop'* per *'country'*.\n\nNote the following components in the Choropleth Map:\n  *  **geo_data** - geoJSON file\n  *  **data** - dataframe for suicide rates\n  *  **columns**  - dataframe columns 'country' and 'suicides\/100k pop'\n  *  **key_on**  - from geoJSON file: `feature.properties.name`","5db84d2f":"*Again, dataframe creation will fail because of the* \"None\"."}}