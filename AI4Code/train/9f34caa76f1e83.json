{"cell_type":{"982ffa03":"code","d6f54127":"code","c6be22b0":"code","ba1730ca":"code","31e802fb":"code","2e6e1c5b":"code","8e6dbd77":"code","1dd579cc":"code","e0fd9367":"code","19983f1b":"code","6deac4a2":"code","82acc168":"code","2a440830":"code","3f699441":"code","c7b2cc20":"code","f8ad2011":"code","8ba51ed9":"code","fb78f5f4":"code","4c2ddb4a":"code","5ef9be6c":"code","14734fb4":"code","3fd61866":"code","5d6bb413":"code","7df6d123":"code","fb4a122f":"code","4bba93fd":"code","525355d9":"code","eaad6ada":"code","7c58fa6e":"code","cdf4d12b":"code","fc481dd1":"code","a1c0b7dc":"code","36b6a288":"code","31611a8a":"code","773f135a":"code","e44b295a":"code","c27f960d":"code","590f5c92":"code","c9dee858":"code","b6fccb45":"code","f693c912":"code","3f6ca825":"code","92fefad1":"code","45c96b32":"code","c3ddefba":"code","ed635bfe":"code","dcebbe2a":"code","c20924a0":"code","77d3560a":"code","8befea35":"code","910df205":"code","3c47d8b1":"markdown","3a6a20a9":"markdown","ce057714":"markdown","29f05bd0":"markdown","761f5924":"markdown","e0479ef3":"markdown","cebbd203":"markdown","e80e8f88":"markdown","58fe9b46":"markdown","edc9ceb9":"markdown","9c1981c0":"markdown","8872aa3d":"markdown","3cb052d3":"markdown","f19c2cbb":"markdown","c8eacd41":"markdown","6773f2a2":"markdown"},"source":{"982ffa03":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as time\nimport datetime as datetime\nimport deltatime as deltatime\n\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d6f54127":"# Importando os dados para DataFrames\ndfLondomMale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Male_Elite_London.csv\", delimiter=',', encoding ='unicode_escape')\ndfLondomFemale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Female_Elite_London.csv\", delimiter=',', encoding ='unicode_escape')\n\ndfBostonMale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Male_Elite_Boston.csv\")\ndfBostonFemale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Female_Elite_Boston.csv\")\n\ndfNYMale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Male_Elite_New_York.csv\", delimiter=',', encoding ='unicode_escape')\ndfNYFemale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Female_Elite_New_York.csv\")\n\ndfChicagoMale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Male_Elite_Chicago.csv\", delimiter=',', encoding ='unicode_escape')\ndfChicagoFemale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Female_Elite_Chicago.csv\")\n\ndfBerlinMale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Male_Elite_Berlin.csv\", delimiter=',', encoding ='unicode_escape')\ndfBerlinFemale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Female_Elite_Berlin.csv\", delimiter=',', encoding ='unicode_escape')\n\ndfTokioMale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Male_Elite_Tokyo.csv\", delimiter=',', encoding ='unicode_escape')\ndfTokioFemale = pd.read_csv(\"\/kaggle\/input\/world-marathon-majors\/Female_Elite_Tokyo.csv\")","c6be22b0":"# Altera\u00e7\u00e3o dos nomes dos campos - para portugu\u00eas\ndfLondomMale.rename(columns={'Year':'Ano'}, inplace=True)\ndfLondomMale.rename(columns={'Athlete':'NomeAtleta'}, inplace=True)\ndfLondomMale.rename(columns={'Nationality':'Nacionalidade'}, inplace=True)\ndfLondomMale.rename(columns={'Time(h:m:s)':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfLondomMale['Sexo'] = \"M\"\ndfLondomMale['Prova'] = \"Londres\"\n\n# Deletando o campo State, n\u00e3o ser\u00e1 utilizado nesse estudo\ndel dfLondomMale['Notes']\n\ndfLondomMale.info()","ba1730ca":"dfLondomMale.shape","31e802fb":"# Altera\u00e7\u00e3o dos nomes dos campos - para portugu\u00eas\ndfLondomFemale.rename(columns={'Year':'Ano'}, inplace=True)\ndfLondomFemale.rename(columns={'Athlete':'NomeAtleta'}, inplace=True)\ndfLondomFemale.rename(columns={'Nationality':'Nacionalidade'}, inplace=True)\ndfLondomFemale.rename(columns={'Time(h:m:s)':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfLondomFemale['Sexo'] = \"F\"\ndfLondomFemale['Prova'] = \"Londres\"\n\n# Deletando o campo State, n\u00e3o ser\u00e1 utilizado nesse estudo\ndel dfLondomFemale['Notes']\n\n\ndfLondomFemale.info()","2e6e1c5b":"dfLondomFemale.shape","8e6dbd77":"# Altera\u00e7\u00e3o dos nomes dos campos - para portugu\u00eas\ndfBostonMale.rename(columns={'Year':'Ano'}, inplace=True)\ndfBostonMale.rename(columns={'Athlete':'NomeAtleta'}, inplace=True)\ndfBostonMale.rename(columns={'Country\/State or Province':'Nacionalidade'}, inplace=True)\ndfBostonMale.rename(columns={'Time':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfBostonMale['Sexo'] = \"M\"\ndfBostonMale['Prova'] = \"Boston\"\n\n# Deletando os campos State e Notes, n\u00e3o ser\u00e1 utilizado nesse estudo\ndel dfBostonMale['State']\ndel dfBostonMale['Notes']\n\ndfBostonMale.info()","1dd579cc":"dfBostonMale.shape","e0fd9367":"dfBostonFemale.info()","19983f1b":"# Altera\u00e7\u00e3o dos nomes dos campos - para portugu\u00eas\ndfBostonFemale.rename(columns={'Year':'Ano'}, inplace=True)\ndfBostonFemale.rename(columns={'Athlete':'NomeAtleta'}, inplace=True)\ndfBostonFemale.rename(columns={'Country\/State':'Nacionalidade'}, inplace=True)\ndfBostonFemale.rename(columns={'Time':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfBostonFemale['Sexo'] = \"F\"\ndfBostonFemale['Prova'] = \"Boston\"\n\n# Deletando os campos State e Notes, n\u00e3o ser\u00e1 utilizado nesse estudo\ndel dfBostonFemale['State']\ndel dfBostonFemale['Notes']\n\ndfBostonFemale.info()","6deac4a2":"dfBostonFemale.shape","82acc168":"# Altera\u00e7\u00e3o dos nomes dos campos - para portugu\u00eas\ndfNYMale.rename(columns={'Year':'Ano'}, inplace=True)\ndfNYMale.rename(columns={'Winner':'NomeAtleta'}, inplace=True)\ndfNYMale.rename(columns={'Country':'Nacionalidade'}, inplace=True)\ndfNYMale.rename(columns={'Time':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfNYMale['Sexo'] = \"M\"\ndfNYMale['Prova'] = \"Nova Iorque\"\n\n# Deletando o campo Notes, n\u00e3o ser\u00e1 utilizado nesse estudo\ndel dfNYMale['Notes']\n\ndfNYMale.info()","2a440830":"dfNYMale.shape","3f699441":"# Altera\u00e7\u00e3o dos nomes dos campos - para portugu\u00eas\ndfNYFemale.rename(columns={'Year':'Ano'}, inplace=True)\ndfNYFemale.rename(columns={'Winner':'NomeAtleta'}, inplace=True)\ndfNYFemale.rename(columns={'Country':'Nacionalidade'}, inplace=True)\ndfNYFemale.rename(columns={'Time':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfNYFemale['Sexo'] = \"F\"\ndfNYFemale['Prova'] = \"Nova Iorque\"\n\n# Deletando o campo Notes, n\u00e3o ser\u00e1 utilizado nesse estudo\ndel dfNYFemale['Notes']\n\ndfNYFemale.info()","c7b2cc20":"dfNYFemale.shape","f8ad2011":"# Altera\u00e7\u00e3o dos nomes dos campos - para portugu\u00eas\ndfChicagoMale.rename(columns={'Year':'Ano'}, inplace=True)\ndfChicagoMale.rename(columns={'Athlete':'NomeAtleta'}, inplace=True)\ndfChicagoMale.rename(columns={'Country':'Nacionalidade'}, inplace=True)\ndfChicagoMale.rename(columns={'Time':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfChicagoMale['Sexo'] = \"M\"\ndfChicagoMale['Prova'] = \"Chicago\"\n\ndfChicagoMale.info()","8ba51ed9":"dfChicagoMale.shape","fb78f5f4":"# Altera\u00e7\u00e3o dos nomes dos campos - para portugu\u00eas\ndfChicagoFemale.rename(columns={'Year':'Ano'}, inplace=True)\ndfChicagoFemale.rename(columns={'Athlete':'NomeAtleta'}, inplace=True)\ndfChicagoFemale.rename(columns={'Country':'Nacionalidade'}, inplace=True)\ndfChicagoFemale.rename(columns={'Time':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfChicagoFemale['Sexo'] = \"F\"\ndfChicagoFemale['Prova'] = \"Chicago\"\n\ndfChicagoFemale.info()","4c2ddb4a":"dfChicagoFemale.shape","5ef9be6c":"dfBerlinMale.rename(columns={'Year':'Ano'}, inplace=True)\ndfBerlinMale.rename(columns={'Athlete':'NomeAtleta'}, inplace=True)\ndfBerlinMale.rename(columns={'Country':'Nacionalidade'}, inplace=True)\ndfBerlinMale.rename(columns={'Time':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfBerlinMale['Sexo'] = \"M\"\ndfBerlinMale['Prova'] = \"Berlin\"\n\ndfBerlinMale.info()","14734fb4":"dfBerlinMale.shape","3fd61866":"# Altera\u00e7\u00e3o dos nomes dos campos - para portugu\u00eas\ndfBerlinFemale.rename(columns={'Year':'Ano'}, inplace=True)\ndfBerlinFemale.rename(columns={'Athlete':'NomeAtleta'}, inplace=True)\ndfBerlinFemale.rename(columns={'Country':'Nacionalidade'}, inplace=True)\ndfBerlinFemale.rename(columns={'Time':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfBerlinFemale['Sexo'] = \"F\"\ndfBerlinFemale['Prova'] = \"Berlin\"\n\ndfBerlinFemale.info()","5d6bb413":"dfBerlinFemale.shape","7df6d123":"# Altera\u00e7\u00e3o dos nomes dos campos - para portugu\u00eas\ndfTokioMale.rename(columns={'Year':'Ano'}, inplace=True)\ndfTokioMale.rename(columns={'Athlete':'NomeAtleta'}, inplace=True)\ndfTokioMale.rename(columns={'Country':'Nacionalidade'}, inplace=True)\ndfTokioMale.rename(columns={'Time':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfTokioMale['Sexo'] = \"M\"\ndfTokioMale['Prova'] = \"T\u00f3quio\"\n\ndfTokioMale.info()","fb4a122f":"dfTokioMale.shape","4bba93fd":"# Altera\u00e7\u00e3o dos nomes dos campos - para portugu\u00eas\ndfTokioFemale.rename(columns={'Year':'Ano'}, inplace=True)\ndfTokioFemale.rename(columns={'Athlete':'NomeAtleta'}, inplace=True)\ndfTokioFemale.rename(columns={'Country':'Nacionalidade'}, inplace=True)\ndfTokioFemale.rename(columns={'Time':'Tempo-hhmmss'}, inplace=True)\n\n# Criar os campo \"Sexo\" (M - Masculino e F - Feminino) e \"Prova\" (Nome da prova)\ndfTokioFemale['Sexo'] = \"F\"\ndfTokioFemale['Prova'] = \"T\u00f3quio\"\n\ndfTokioFemale.info()","525355d9":"dfTokioFemale.shape","eaad6ada":"df = dfLondomMale\ndf = df.append(dfLondomFemale, ignore_index=True)\ndf = df.append(dfBostonMale, ignore_index=True)\ndf = df.append(dfBostonFemale, ignore_index=True)\ndf = df.append(dfNYMale, ignore_index=True)\ndf = df.append(dfNYFemale, ignore_index=True)\ndf = df.append(dfChicagoMale, ignore_index=True)\ndf = df.append(dfChicagoFemale, ignore_index=True)\ndf = df.append(dfBerlinMale, ignore_index=True)\ndf = df.append(dfBerlinFemale, ignore_index=True)\ndf = df.append(dfTokioMale, ignore_index=True)\ndf = df.append(dfTokioFemale, ignore_index=True)\ndf.info()\n","7c58fa6e":"df.shape","cdf4d12b":"#Criando a variavel tempo do tipo\ndf['Tempo'] = pd.to_timedelta(df['Tempo-hhmmss'])\ndf.info()","fc481dd1":"# Ordenando os Dados por ano, prova e sexo\ndf = df.sort_values(['Ano', 'Prova', 'Sexo'])\ndf.head(600)","a1c0b7dc":"# verificando o per\u00edodo que est\u00e1 sendo estudado \ndf = df.sort_values(['Ano', 'Prova', 'Sexo'])\nmenorAno = df['Ano'].values.min()\nmaiorAno = df['Ano'].values.max()\nprint('Per\u00edodo analisado :', menorAno, maiorAno)","36b6a288":"df['Sexo'].value_counts()","31611a8a":"# Verificando a prova mais Antiga\nMenorAno = df['Ano'].values.min()\ndfProvaAntiga = df[df['Ano'] == MenorAno]\nProva = dfProvaAntiga['Prova'].values\nprint(\"Prova mais antiga ocorreu em : \" , Prova , \" no ano de \" , str(MenorAno))","773f135a":"# Segregando Masculino\ndfMas = df[df['Sexo'] == 'M']\ndfMas.info()","e44b295a":"# Segregando Feminino\ndfFem = df[df['Sexo'] == 'F']\ndfFem.info()","c27f960d":"# Verificando em que ano as mulheres come\u00e7aram a participar dessas provas\nMenorAno = dfFem['Ano'].values.min()\nprint(MenorAno)","590f5c92":"# Dados completos da prova\ndfFem[dfFem['Ano']==dfFem['Ano'].values.min()]","c9dee858":"# Melhor tempo das mulheres\ndfFem[dfFem['Tempo-hhmmss'] == dfFem['Tempo-hhmmss'].values.min()]","b6fccb45":"# Atleta masculino que mais ganhou provas\ndfMas[['NomeAtleta', 'Prova']].groupby(['NomeAtleta']).count().nlargest(1, 'Prova')","f693c912":"#Quais provas ele ganhou\ndfMas[dfMas['NomeAtleta'] == 'Bill Rodgers']\n","3f6ca825":"# Pa\u00eds que mais ganhou provas\ndfMas[['Nacionalidade', 'Prova']].groupby(['Nacionalidade']).count().nlargest(1, 'Prova')","92fefad1":"# 5 pa\u00edses \ndfMas[['Nacionalidade', 'Prova']].groupby(['Nacionalidade']).count().nlargest(5, 'Prova')","45c96b32":"# Melhor tempo dos homens\ndfRecordista = dfMas[dfMas['Tempo-hhmmss'] == dfMas['Tempo-hhmmss'].values.min()]\nprint(dfRecordista)","c3ddefba":"#Quais provas o recodista ganhou\nnome = dfRecordista['NomeAtleta'].values\nnome = nome[0]\ndfRecordista = dfMas[dfMas['NomeAtleta'] == nome]\ndfRecordista","ed635bfe":"# Melhor tempo dos homens\ndfNaoRecordista = dfMas[dfMas['Tempo-hhmmss'] == dfMas['Tempo-hhmmss'].values.max()]\nprint(dfNaoRecordista)","dcebbe2a":"%matplotlib inline","c20924a0":"# Observando os tempos do recordista em ns\nsns.barplot(y='Tempo' ,x='Prova', data=dfRecordista)","77d3560a":"# Observando os tempos do recordista em ns\nsns.barplot(y='Tempo' ,x='Prova', data=dfMas)","8befea35":"# box-plot das provas que Recordista ganhou\nsns.violinplot(y='Ano', x='Prova', data=dfRecordista)","910df205":"# Gr\u00e1fico apresenta os anos de participa\u00e7\u00e3o do recordista\nplt.figure(figsize=(15,5))\nsns.pointplot(x='Ano', y='Prova', data=dfRecordista, color='green')\nplt.title('Os anos que recordista foi campe\u00e3o e prova')\nplt.locator_params(axis='y', nbins=30) #diminuindo a escala de y\nplt.grid(True, color='grey')","3c47d8b1":"### Atleta que mais ganhou provas (Masculino)","3a6a20a9":"## Analisando os dados","ce057714":"## Unificando todos DataFrames em um s\u00f3","29f05bd0":"# Trabalho - Wolrd Marathon Majors\n### Os dados que ser\u00e3o tratados nesse trabalho s\u00e3o os resultados das maratonas de Londres, Boston, Nova Iorque, Berlin e T\u00f3quio, que s\u00e3o consideradas as maiores maratonas.","761f5924":"## Tratando os dados da Maratona de Berlin","e0479ef3":"## Tratando os dados da Maratona de Chicago","cebbd203":"## Tratando os dados da Maratona de Londres","e80e8f88":"### Gr\u00e1fico das an\u00e1lises","58fe9b46":"# Analisando atletas do sexo \"MASCULINO\"","edc9ceb9":"### Recordista Masculino","9c1981c0":"### Os dados coletados do sexo feminino n\u00e3o est\u00e3o coerentes\n### A atual recordista femina tem o tempo de 2:14.04 e nos dados coletados informa tempo de 02:03:45\n### Por esses motivos mais adiante vamos trabalhar apenas com os dados dos atletas do sexo Masculino","8872aa3d":"### Pa\u00eds que mais ganhou provas","3cb052d3":"## Tratando os dados da Maratona de Boston","f19c2cbb":"# Analisando atletas do sexo \"FEMININO\"","c8eacd41":"## Tratando os dados da Maratona de Nova Iorque","6773f2a2":"## Tratando os dados da Maratona de T\u00f3quio"}}