{"cell_type":{"a5297160":"code","0c73fdc8":"code","6c5c34b3":"code","79a72975":"code","6dfb7fc8":"code","fe4420de":"code","032b4056":"code","1694787b":"code","76582bf4":"code","c080e298":"code","5db3c328":"code","e83896d3":"code","5cb1827a":"code","eb17cd79":"code","f7ce2873":"code","e5521f5d":"code","fcd64699":"code","a3a27a9d":"code","7f8b241b":"markdown","9fdbffee":"markdown","ac402828":"markdown","71631f5a":"markdown"},"source":{"a5297160":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0c73fdc8":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport seaborn as sns","6c5c34b3":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/test.csv')\nsubmit = pd.read_csv('..\/input\/covid19-global-forecasting-week-5\/submission.csv')","79a72975":"print(\"length of train\", len(train))\nprint(\"length of test\", len(test))\nprint(\"length of submit\", len(submit))","6dfb7fc8":"train.describe()","fe4420de":"train = train.drop(['County','Province_State','Country_Region','Target'],axis=1) \ntest = test.drop(['County','Province_State','Country_Region','Target'],axis=1)\ntrain.head()","032b4056":"test_date_min = test['Date'].min()\ntest_date_max = test['Date'].max()\ntrain['Date']=pd.to_datetime(train['Date'])\ntest['Date']=pd.to_datetime(test['Date'])\ntest['Date']=test['Date'].dt.strftime(\"%Y%m%d\")\ntrain['Date']=train['Date'].dt.strftime(\"%Y%m%d\").astype(int)","1694787b":"test.drop(['ForecastId'],axis=1,inplace=True)\ntest.index.name = 'Id'\ntest.head()","76582bf4":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.ensemble import RandomForestRegressor\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV, KFold\n","c080e298":"X = train.drop(['TargetValue', 'Id'], axis=1)\ny = train[\"TargetValue\"]\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 101)","5db3c328":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\n# params1={\n#  \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n#  \"n_estimators\"     : [100,300,500,700,800,1000],\n# }\nmodel = RandomForestRegressor(n_estimators=800,n_jobs=-1,max_depth=10)\n# random_search0=RandomizedSearchCV(model,param_distributions=params1,n_iter=5,n_jobs=-1,cv=5,verbose=3)\nmodel.fit(X_train, y_train)\n\n\nfrom sklearn.metrics import r2_score\n# y_pred2 = model.predict(X_test)\nprint(r2_score(y_test,model.predict(X_test)))","e83896d3":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nimport xgboost\nreg =xgboost.XGBRegressor(n_estimators=800,n_jobs=-1)\n\n# params={\n#  \"learning_rate\"    : [0.10, 0.25,0.50] ,\n#  \"max_depth\"        : [ 5, 8, 10],\n#  \"gamma\"            : [ 0.0, 0.1, 0.3, 0.4 ],\n#  \"n_estimators\"     : [400,700,1000]\n# }\n\n# random_search=RandomizedSearchCV(reg,param_distributions=params,n_iter=5,n_jobs=-1,cv=5,verbose=3)\nreg.fit(X_train, y_train)\n\nprint(r2_score(y_test,reg.predict(X_test)))","5cb1827a":"from sklearn.ensemble import StackingRegressor\nfrom sklearn.linear_model import LogisticRegression\n\nestimators = [('c1',model),('c2',reg)]\n\nreg_stack = StackingRegressor(\n     estimators=estimators,n_jobs=-1\n )\n\nreg_stack.fit(X_train, y_train)\n\nprint(r2_score(y_test,reg_stack.predict(X_test)))","eb17cd79":"predictions = reg_stack.predict(test)\n\npred_list = [int(x) for x in predictions]\n\noutput = pd.DataFrame({'Id': test.index, 'TargetValue': pred_list})\nprint(output)","f7ce2873":"a=output.groupby(['Id'])['TargetValue'].quantile(q=0.05).reset_index()\nb=output.groupby(['Id'])['TargetValue'].quantile(q=0.5).reset_index()\nc=output.groupby(['Id'])['TargetValue'].quantile(q=0.95).reset_index()","e5521f5d":"a.columns=['Id','q0.05']\nb.columns=['Id','q0.5']\nc.columns=['Id','q0.95']\na=pd.concat([a,b['q0.5'],c['q0.95']],1)\na['q0.05']=a['q0.05'].clip(0,10000)\na['q0.5']=a['q0.5'].clip(0,10000)\na['q0.95']=a['q0.95'].clip(0,10000)\na","fcd64699":"a['Id'] =a['Id']+ 1\na\n","a3a27a9d":"sub=pd.melt(a, id_vars=['Id'], value_vars=['q0.05','q0.5','q0.95'])\nsub['variable']=sub['variable'].str.replace(\"q\",\"\", regex=False)\nsub['ForecastId_Quantile']=sub['Id'].astype(str)+'_'+sub['variable']\nsub['TargetValue']=sub['value']\nsub=sub[['ForecastId_Quantile','TargetValue']]\nsub.reset_index(drop=True,inplace=True)\nsub.to_csv(\"submission.csv\",index=False)\nsub.head()","7f8b241b":"## Stacking Xgboost and random forest","9fdbffee":"# For best reults i used Stacking regression of XGBOOST and Randomforest which is demonstrated below...","ac402828":"## Random forest","71631f5a":"## XGboost"}}