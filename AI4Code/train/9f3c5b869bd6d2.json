{"cell_type":{"c880f136":"code","389e712a":"code","0c256a0b":"code","1d479222":"code","66b79dd8":"code","1ab37635":"code","809044e8":"code","2258f921":"code","a3041145":"code","b7558ba8":"code","c9e052ab":"code","c6e18be3":"code","a5641ccd":"code","3f244e28":"code","a5e013c3":"code","f4b1b782":"code","16869995":"code","bae73319":"code","454b5a1d":"code","7c38d257":"code","582073ed":"code","8eb026d8":"code","c3c85b9a":"code","02d5cf13":"code","562ae341":"code","650d42b7":"code","5c3700ff":"code","16bf4e64":"code","860b45f7":"code","f3905664":"markdown","5b5fb2dd":"markdown","9883b623":"markdown","1b33edc3":"markdown","bd692d23":"markdown","71608e9f":"markdown","56ba384a":"markdown"},"source":{"c880f136":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy as sp\nimport warnings\nimport os \nwarnings.filterwarnings(\"ignore\")\nimport datetime\n","389e712a":"data=pd.read_csv('\/kaggle\/input\/breast-cancer-wisconsin-data\/data.csv')\n","0c256a0b":"data.head()      #displaying the head of dataset they gives the 1st to 5 rows of the data","1d479222":"data.describe()      #description of dataset ","66b79dd8":"data.info()","1ab37635":"data.shape       #569 rows and 33 columns","809044e8":"data.columns     #displaying the columns of dataset","2258f921":"data.value_counts","a3041145":"data.dtypes","b7558ba8":"data.isnull().sum()","c9e052ab":"data.drop('Unnamed: 32', axis = 1, inplace = True)\n","c6e18be3":"data","a5641ccd":"data.corr()","3f244e28":"plt.figure(figsize=(18,9))\nsns.heatmap(data.corr(),annot = True, cmap =\"Accent_r\")\n\n\n\n","a5e013c3":"sns.barplot(x=\"id\", y=\"diagnosis\",data=data[160:190])\nplt.title(\"Id vs Diagnosis\",fontsize=15)\nplt.xlabel(\"Id\")\nplt.ylabel(\"Diagonis\")\nplt.show()\nplt.style.use(\"ggplot\")\n","f4b1b782":"sns.barplot(x=\"radius_mean\", y=\"texture_mean\", data=data[170:180])\nplt.title(\"Radius Mean vs Texture Mean\",fontsize=15)\nplt.xlabel(\"Radius Mean\")\nplt.ylabel(\"Texture Mean\")\nplt.show()\nplt.style.use(\"ggplot\")\n","16869995":" \nmean_col = ['diagnosis','radius_mean', 'texture_mean', 'perimeter_mean',\n       'area_mean', 'smoothness_mean', 'compactness_mean', 'concavity_mean',\n       'concave points_mean', 'symmetry_mean', 'fractal_dimension_mean']\n\nsns.pairplot(data[mean_col],hue = 'diagnosis', palette='Accent')\n","bae73319":"sns.violinplot(x=\"smoothness_mean\",y=\"perimeter_mean\",data=data)","454b5a1d":"plt.figure(figsize=(14,7))\nsns.lineplot(x = \"concavity_mean\",y = \"concave points_mean\",data = data[0:400], color='green')\nplt.title(\"Concavity Mean vs Concave Mean\")\nplt.xlabel(\"Concavity Mean\")\nplt.ylabel(\"Concave Points\")\nplt.show()\n\n","7c38d257":"worst_col = ['diagnosis','radius_worst', 'texture_worst',\n       'perimeter_worst', 'area_worst', 'smoothness_worst',\n       'compactness_worst', 'concavity_worst', 'concave points_worst',\n       'symmetry_worst', 'fractal_dimension_worst']\n\nsns.pairplot(data[worst_col],hue = 'diagnosis', palette=\"CMRmap\")","582073ed":"# Getting Features\n\nx = data.drop(columns = 'diagnosis')\n\n# Getting Predicting Value\ny = data['diagnosis']\n","8eb026d8":"\n#train_test_splitting of the dataset\nfrom sklearn.model_selection import train_test_split \nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)\n","c3c85b9a":"print(len(x_train))\n","02d5cf13":"print(len(x_test))","562ae341":"print(len(y_train))","650d42b7":"print(len(y_test))","5c3700ff":"from sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier(max_depth=6, random_state=123)\n\ndtree.fit(x_train,y_train)\n\n#y_pred = dtree.predict(x_test)\n","16bf4e64":"y_pred=dtree.predict(x_test)\nfrom sklearn.metrics import classification_report,confusion_matrix,accuracy_score,mean_squared_error\nprint(classification_report(y_test,y_pred))\nprint(confusion_matrix(y_test,y_pred))\nprint(\"Training Score: \",dtree.score(x_train,y_train)*100)\n\n","860b45f7":"print(accuracy_score(y_test,y_pred)*100)","f3905664":"# MODELS","5b5fb2dd":"**So we have to drop the Unnamed: 32 coulumn which contains NaN values**","9883b623":"#  DECISION TREE CLASSIFIER","1b33edc3":"# TRAINING AND TESTING DATA","bd692d23":"# LOADING THE DATASET","71608e9f":"# VISUALIZING THE DATA","56ba384a":"# IMPORTING THE LIBRARIES"}}