{"cell_type":{"2ab44201":"code","f54c8a6f":"code","76021527":"code","e1680c52":"code","2c6db576":"code","8481e2bd":"code","f2a01bd1":"code","3cf4cc2b":"code","736d3076":"code","2773577e":"code","049f6495":"code","a7252e83":"code","c9fa3301":"code","c50de5bf":"code","3586e164":"code","afae4359":"markdown","3a92de41":"markdown","917cc5fa":"markdown","d9947130":"markdown","c60f9baf":"markdown","23b83245":"markdown","2562ac9a":"markdown","b139f4c4":"markdown","46798302":"markdown","e7f2f4fc":"markdown","0ef34c76":"markdown","460e9cc3":"markdown","76c9006a":"markdown","81750099":"markdown","15c13822":"markdown","e8e65cf8":"markdown","92c865a0":"markdown","018b5ac8":"markdown","e36b7786":"markdown","cebfd2d2":"markdown"},"source":{"2ab44201":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport warnings \nfrom sklearn.utils import shuffle\nfrom sklearn.tree import DecisionTreeClassifier\nwarnings.filterwarnings('ignore')\nos.listdir('..\/input\/testtraindata\/')","f54c8a6f":"base_train_dir = '..\/input\/testtraindata\/Train_Set\/'\nbase_test_dir = '..\/input\/testtraindata\/Test_Set\/'","76021527":"test_data = pd.DataFrame(columns = ['activity','ax','ay','az','gx','gy','gz'])\nfiles = os.listdir(base_test_dir)\nfor f in files:\n    df = pd.read_csv(base_test_dir+f)\n    df['activity'] = (f.split('.')[0].split('_')[-1])+' '\n    test_data = pd.concat([test_data,df],axis = 0)\ntest_data.activity.unique()","e1680c52":"print(test_data.info())\nprint('Shape: ',test_data.shape)","2c6db576":"train_data = pd.DataFrame(columns = ['activity','ax','ay','az','gx','gy','gz'])\ntrain_folders = os.listdir(base_train_dir)\n\nfor tf in train_folders:\n    files = os.listdir(base_train_dir+tf)\n    for f in files:\n        df = pd.read_csv(base_train_dir+tf+'\/'+f)\n        train_data = pd.concat([train_data,df],axis = 0)\ntrain_data.activity.unique()","8481e2bd":"print(train_data.info())\nprint('Shape: ',train_data.shape)","f2a01bd1":"dataset = pd.concat([train_data, test_data], axis = 0, ignore_index=True)\nprint(dataset.activity.unique())","3cf4cc2b":"dataset = shuffle(dataset)\ndataset.reset_index(drop = True,inplace = True)\ndataset.head()","736d3076":"df_dummies = pd.get_dummies(dataset['activity'])\ndf_dummies.head()","2773577e":"final_dataset = pd.concat([df_dummies, dataset], axis = 1)\nfinal_dataset.drop(['activity','walking '],axis = 1,  inplace = True)\nfinal_dataset.head()","049f6495":"import matplotlib.pyplot as plt\nimport seaborn as sns\nf,ax = plt.subplots(figsize = (8,10))\nsns.set(style= 'whitegrid')\nplt.subplot(2,1,1)\ndfa = dataset.groupby('activity', as_index=False)['ax','ay','az'].mean()\ndfa = dfa.melt('activity')\nsns.barplot(dfa.variable,dfa.value, hue = dfa.activity)\nplt.subplot(2,1,2)\ndfg = dataset.groupby('activity', as_index=False)['gx','gy','gz'].mean()\ndfg = dfg.melt('activity')\nsns.barplot(dfg.variable,dfg.value, hue = dfg.activity)","a7252e83":"X = np.array(final_dataset.iloc[:,3:])\ny = np.array(final_dataset.iloc[:,:3])\n\nprint('X: ',X.shape)\nprint('y: ', y.shape)","c9fa3301":"from sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\n#from sklearn.model_selection import train_test_split\n#X_train, X_val, y_train, y_val  = train_test_split(X,y, test_size = 0.2)\n#model.fit(X_train,y_train)\n#model.score(X_test,y_test)\nfrom sklearn.model_selection import cross_val_score\nprint('Cross Val Accuracy: {:0.2f}'.format(cross_val_score(model,X,y, cv = 5).mean()*100) + '%')","c50de5bf":"final_dataset = pd.concat([df_dummies, dataset], axis = 1)\nfinal_dataset.drop(['activity'],axis = 1,  inplace = True)\nX = np.array(final_dataset.iloc[:,4:])\ny = np.array(final_dataset.iloc[:,:4])\n\nprint('X: ',X.shape)\nprint('y: ', y.shape)","3586e164":"\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\n\n#model_lr = LogisticRegression()\nmodel_nb = GaussianNB()\nmodel_dt = DecisionTreeClassifier()\n\n#print('Cross Val Accuracy (LR): {:0.2f}'.format(cross_val_score(model_lr,X,y, cv = 5).mean()*100) + '%')\n#print('Cross Val Accuracy (NB): {:0.2f}'.format(cross_val_score(model_nb,X,y, cv = 5).mean()*100) + '%')\nprint('Cross Val Accuracy (DT): {:0.2f}'.format(cross_val_score(model_dt,X,y, cv = 5).mean()*100) + '%')","afae4359":"*Follow same steps as above*","3a92de41":"*Shuffle the data randomly*","917cc5fa":"*The above graph roughly tells that different axis of accelerometer and gyroscope produce different values as we do an activity. For eg. while walking all the axis of gyroscope give higher readings than the rest*","d9947130":"**Our dataset is ready and we can now use it however we want**","c60f9baf":"*We can from here use Linear models like Logistic Regression, Decision Tress, etc. or we can also make a ANN to solve the problem*","23b83245":"*Combine everything together and we can here remove one dependent variable since its value can be determined by other 3 variables*","2562ac9a":"**Let us check with some other models too**","b139f4c4":"*We can use Label Encoder and One Hot Encoder also, for simplicity here I am using get_dummies method*","46798302":"*Add data from different files to one*","e7f2f4fc":"*Accuracy is again quite high, that means to differentiate between differnt activities is not that difficult, according to the dataset*","0ef34c76":"**Import the data to a python readable format**","460e9cc3":"*Convert categorical variable to integer format*","76c9006a":"****Cheers****","81750099":"*Other models can also be used*","15c13822":"*Therefore, the dataset is quite simplified and we don't need to use Neural Networks for it*","e8e65cf8":"*Let us use Random Forest algorithm and check the accuracy*","92c865a0":"**Random Forest gives us a great accuracy of nearly 100%**","018b5ac8":"**Since we will use Cross Validation technique, let us combine the test and training set**","e36b7786":"*Check for missing values*","cebfd2d2":"*Lets see how values differ as we do an activity*"}}