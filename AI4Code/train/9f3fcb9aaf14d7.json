{"cell_type":{"980722ee":"code","25f8c9f5":"code","b3b7efb4":"code","306eecbd":"code","0a31f6c5":"code","d21abec6":"code","39bee900":"code","2c661f10":"code","9f585689":"code","b9c6d50d":"code","716640f7":"code","495eb5c8":"code","88b48047":"code","5b0819a6":"code","d03b58a2":"markdown","3e8b3827":"markdown","4d7d215e":"markdown","4b92ae06":"markdown","ef398f92":"markdown","1adc1590":"markdown","02f73436":"markdown","9a7e7dbd":"markdown","f98b22b5":"markdown"},"source":{"980722ee":"import numpy as np\nimport pandas as pd\nimport os\nimport keras\nfrom keras.layers import Conv2D, MaxPool2D, Flatten, Dense, Dropout, BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras import regularizers\nfrom sklearn.model_selection import train_test_split\nimport cv2\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nprint(os.listdir(\"..\/input\"))","25f8c9f5":"train_dir = '..\/input\/asl_alphabet_train\/asl_alphabet_train'\ntest_dir = '..\/input\/asl_alphabet_test\/asl_alphabet_test'","b3b7efb4":"def load_unique():\n    size_img = 64,64 \n    images_for_plot = []\n    labels_for_plot = []\n    for folder in os.listdir(train_dir):\n        for file in os.listdir(train_dir + '\/' + folder):\n            filepath = train_dir + '\/' + folder + '\/' + file\n            image = cv2.imread(filepath)\n            final_img = cv2.resize(image, size_img)\n            final_img = cv2.cvtColor(final_img, cv2.COLOR_BGR2RGB)\n            images_for_plot.append(final_img)\n            labels_for_plot.append(folder)\n            break\n    return images_for_plot, labels_for_plot\n\nimages_for_plot, labels_for_plot = load_unique()\nprint(\"unique_labels = \", labels_for_plot)\n\nfig = plt.figure(figsize = (15,15))\ndef plot_images(fig, image, label, row, col, index):\n    fig.add_subplot(row, col, index)\n    plt.axis('off')\n    plt.imshow(image)\n    plt.title(label)\n    return\n\nimage_index = 0\nrow = 5\ncol = 6\nfor i in range(1,(row*col)):\n    plot_images(fig, images_for_plot[image_index], labels_for_plot[image_index], row, col, i)\n    image_index = image_index + 1\nplt.show()","306eecbd":"labels_dict = {'A':0,'B':1,'C':2,'D':3,'E':4,'F':5,'G':6,'H':7,'I':8,'J':9,'K':10,'L':11,'M':12,\n                   'N':13,'O':14,'P':15,'Q':16,'R':17,'S':18,'T':19,'U':20,'V':21,'W':22,'X':23,'Y':24,\n                   'Z':25,'space':26,'del':27,'nothing':28}\n\ndef load_data():\n    \"\"\"\n    Loads data and preprocess. Returns train and test data along with labels.\n    \"\"\"\n    images = []\n    labels = []\n    size = 64,64\n    print(\"LOADING DATA FROM : \",end = \"\")\n    for folder in os.listdir(train_dir):\n        print(folder, end = ' | ')\n        for image in os.listdir(train_dir + \"\/\" + folder):\n            temp_img = cv2.imread(train_dir + '\/' + folder + '\/' + image)\n            temp_img = cv2.resize(temp_img, size)\n            images.append(temp_img)\n            labels.append(labels_dict[folder])\n    \n    images = np.array(images)\n    images = images.astype('float32')\/255.0\n    \n    labels = keras.utils.to_categorical(labels)\n    \n    X_train, X_test, Y_train, Y_test = train_test_split(images, labels, test_size = 0.05)\n    \n    print()\n    print('Loaded', len(X_train),'images for training,','Train data shape =',X_train.shape)\n    print('Loaded', len(X_test),'images for testing','Test data shape =',X_test.shape)\n    \n    return X_train, X_test, Y_train, Y_test","0a31f6c5":"X_train, X_test, Y_train, Y_test = load_data()","d21abec6":"def create_model():\n    \n    model = Sequential()\n    \n    model.add(Conv2D(16, kernel_size = [3,3], padding = 'same', activation = 'relu', input_shape = (64,64,3)))\n    model.add(Conv2D(32, kernel_size = [3,3], padding = 'same', activation = 'relu'))\n    model.add(MaxPool2D(pool_size = [3,3]))\n    \n    model.add(Conv2D(32, kernel_size = [3,3], padding = 'same', activation = 'relu'))\n    model.add(Conv2D(64, kernel_size = [3,3], padding = 'same', activation = 'relu'))\n    model.add(MaxPool2D(pool_size = [3,3]))\n    \n    model.add(Conv2D(128, kernel_size = [3,3], padding = 'same', activation = 'relu'))\n    model.add(Conv2D(256, kernel_size = [3,3], padding = 'same', activation = 'relu'))\n    model.add(MaxPool2D(pool_size = [3,3]))\n    \n    model.add(BatchNormalization())\n    \n    model.add(Flatten())\n    model.add(Dropout(0.5))\n    model.add(Dense(512, activation = 'relu', kernel_regularizer = regularizers.l2(0.001)))\n    model.add(Dense(29, activation = 'softmax'))\n    \n    model.compile(optimizer = 'adam', loss = keras.losses.categorical_crossentropy, metrics = [\"accuracy\"])\n    \n    print(\"MODEL CREATED\")\n    model.summary()\n    \n    return model\n\ndef fit_model():\n    model_hist = model.fit(X_train, Y_train, batch_size = 64, epochs = 5, validation_split = 0.1)\n    return model_hist ","39bee900":"model = create_model()\ncurr_model_hist = fit_model()","2c661f10":"plt.plot(curr_model_hist.history['acc'])\nplt.plot(curr_model_hist.history['val_acc'])\nplt.legend(['train', 'test'], loc='lower right')\nplt.title('accuracy plot - train vs test')\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.show()\n\nplt.plot(curr_model_hist.history['loss'])\nplt.plot(curr_model_hist.history['val_loss'])\nplt.legend(['training loss', 'validation loss'], loc = 'upper right')\nplt.title('loss plot - training vs vaidation')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.show()","9f585689":"evaluate_metrics = model.evaluate(X_test, Y_test)\nprint(\"\\nEvaluation Accuracy = \", \"{:.2f}%\".format(evaluate_metrics[1]*100),\"\\nEvaluation loss = \" ,\"{:.6f}\".format(evaluate_metrics[0]))","b9c6d50d":"def load_test_data():\n    images = []\n    names = []\n    size = 64,64\n    for image in os.listdir(test_dir):\n        temp = cv2.imread(test_dir + '\/' + image)\n        temp = cv2.resize(temp, size)\n        images.append(temp)\n        names.append(image)\n    images = np.array(images)\n    images = images.astype('float32')\/255.0\n    return images, names\n\ntest_images, test_img_names = load_test_data()","716640f7":"# make predictions on an image and append it to the list (predictions).\npredictions = [model.predict_classes(image.reshape(1,64,64,3))[0] for image in test_images]","495eb5c8":"def get_labels_for_plot(predictions):\n    predictions_labels = []\n    for i in range(len(predictions)):\n        for ins in labels_dict:\n            if predictions[i] == labels_dict[ins]:\n                predictions_labels.append(ins)\n                break\n    return predictions_labels\n\npredictions_labels_plot = get_labels_for_plot(predictions)","88b48047":"predfigure = plt.figure(figsize = (13,13))\ndef plot_image_1(fig, image, label, prediction, predictions_label, row, col, index):\n    fig.add_subplot(row, col, index)\n    plt.axis('off')\n    plt.imshow(image)\n    title = \"prediction : [\" + str(predictions_label) + \"] \"+ \"\\n\" + label\n    plt.title(title)\n    return\n\nimage_index = 0\nrow = 5\ncol = 6\nfor i in range(1,(row*col-1)):\n    plot_image_1(predfigure, test_images[image_index], test_img_names[image_index], predictions[image_index], predictions_labels_plot[image_index], row, col, i)\n    image_index = image_index + 1\nplt.show()","5b0819a6":"model.save('asl_predictor.h5')","d03b58a2":"**DEFINING MODEL**","3e8b3827":"As we can see the predictions are correct for almost all the images. Thus the model performs well on the test set.","4d7d215e":"**LOADING DATA**\n1. Defining a dictionary which contains labels and its mapping to a number which acts as class label.\n2. loading image data and labels and then mapping those labels to the dictionary defined before.\n3. Normalizing image data.\n4. converting labels to one hot format.\n5. creating training and test data by splitting original data into 95% of training data and 5% testing data.","4b92ae06":"PLOTTING THE TEST DATA ALONG WITH THE PREDICTION MADE BY THE MODEL","ef398f92":"**Plotting one image from each class :**","1adc1590":"**COMPILING THE MODEL AND FITTING THE TRAINING DATA**","02f73436":"**Plotting the model performance metrics to check model performance.**","9a7e7dbd":"Loading the test data Provided. \n* The test data contains images with the image name as the class, to which the image belongs to.\n* we will load the data and check if the predition is correct for the image.","f98b22b5":"**EVALUATING THE TRAINED MODEL ON THE TEST DATA SPLIT **"}}