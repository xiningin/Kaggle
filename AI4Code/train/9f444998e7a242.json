{"cell_type":{"c88d5b54":"code","41c8657b":"code","00b8c6c9":"code","847fa08f":"code","15133432":"code","e2340375":"code","522e654e":"code","c20d601a":"code","8d3c3244":"code","b270d4e8":"code","344f409a":"code","77f0caec":"code","6ead1caa":"code","776a1d94":"code","0dd33a03":"code","fadd91c3":"code","3d35a54f":"code","e1b4fdfe":"code","bb85b069":"code","374ecf3e":"code","5c2e9e63":"code","6a08af45":"code","4b9334fd":"code","2ed5c39f":"code","ed89f6a4":"code","ec08851c":"code","97938775":"code","6b794db9":"code","1c5b477f":"code","4d9fd564":"code","c57e5dda":"code","2be77b17":"code","2dcb0273":"code","81af4d6a":"markdown","d87f9956":"markdown","55de12b4":"markdown","458596b8":"markdown","da02537b":"markdown","a99eedf2":"markdown","f4933a83":"markdown","3792dfb7":"markdown","96b3ba56":"markdown","f3392832":"markdown","83f9f0cb":"markdown","6a6491f6":"markdown","95fdb513":"markdown","1bf7ea4e":"markdown","df25de15":"markdown","d7b67387":"markdown","c71df819":"markdown","fc2115cc":"markdown","21af7175":"markdown","2989f8ae":"markdown","ca16055e":"markdown","953c7d55":"markdown","1991344a":"markdown","6fa635ce":"markdown","ce3da3a0":"markdown","0f68d55a":"markdown","2b1e3c53":"markdown","646d47f3":"markdown","8f74268c":"markdown","d4f51b5d":"markdown","95f6c8d2":"markdown","8b4d1e2f":"markdown","e09ee339":"markdown","cc012cdb":"markdown","e5807e3f":"markdown","743f02d1":"markdown","cbd4f2ff":"markdown","b3c88e0a":"markdown","002b2ddd":"markdown","6d221e92":"markdown","6f0a0773":"markdown","25a2061d":"markdown","d2984e65":"markdown","b8de6b79":"markdown","7b288af0":"markdown","2a47b91a":"markdown","14a50c0c":"markdown","c80a3d9b":"markdown","06f7cf70":"markdown"},"source":{"c88d5b54":"#importing the python libraries - pandas and numpy \nimport pandas as pd\nimport numpy as np","41c8657b":"#Importing & reading the dataset\n#This creates a dataframe from the CSV file:\ndf=pd.read_csv(\"..\/input\/TCS.NS.csv\",index_col='Date')","00b8c6c9":"df","847fa08f":"#Checking if any column has any empty value:\ndf.isna().sum()","15133432":"#dropping the empty data entries:\ndf.dropna(inplace=True)\ndf.isna().sum()","e2340375":"df","522e654e":"#Importing the matplot library for data visualization\nimport matplotlib.pyplot as plt\n%matplotlib inline","c20d601a":"#this selects the 'Adj Close' column\nclose=df['Adj Close']\n\n#This converts the date strings in the index into pandas datetime format:\nclose.index=pd.to_datetime(close.index)\nclose","8d3c3244":"#Plot the price series for visual inspection:\nclose.plot()","b270d4e8":"product = {'month' : [1,2,3,4,5,6,7,8,9,10,11,12],'demand':[290,260,288,300,310,303,329,340,316,330,308,310]}\ndfe = pd.DataFrame(product)\ndfe.head()\n","344f409a":"for i in range(0,dfe.shape[0]-2):\n    dfe.loc[dfe.index[i+2],'SMA_3'] = np.round(((dfe.iloc[i,1]+ dfe.iloc[i+1,1] +dfe.iloc[i+2,1])\/3),1)\ndfe.head()    ","77f0caec":"dfe['pandas_SMA_3'] = np.round(dfe.iloc[:,1].rolling(window=3).mean(),1)\ndfe.head()\n","6ead1caa":"for i in range(0,dfe.shape[0]-3):\n    dfe.loc[dfe.index[i+3],'SMA_4'] = np.round(((dfe.iloc[i,1]+ dfe.iloc[i+1,1] +dfe.iloc[i+2,1]+dfe.iloc[i+3,1])\/4),1)\ndfe.head()    ","776a1d94":"dfe['pandas_SMA_4'] = dfe.iloc[:,1].rolling(window=4).mean()\ndfe.head()","0dd33a03":"sma_50=close.rolling(window=50).mean()\nsma_50","fadd91c3":"#As we expect the first 49 values of the sma_50 series are empty\nsma_50.iloc[45:55]","3d35a54f":"#To mprove our plot appearence ,we can use a pre-defined style \nplt.style.use('fivethirtyeight')","e1b4fdfe":"#Our Chart size\nplt.figure(figsize = (13,7))\n\n#Plotting 'Adj Close' Price and SMA_50 lines\nplt.plot(close,label='TCS Adj Close',linewidth=3)\nplt.plot(sma_50,label='50 day Rolling SMA',linewidth=1.5)\n\n#Adding title, labels on the axis:\n#Legend on the left-upper corner\nplt.xlabel('Date')\nplt.ylabel('TCS Adjusted Closing Price ($)')\nplt.title('Pot of Adj Close v\/s Simple_MA_50')\nplt.legend()\n","bb85b069":"sma_20 = close.rolling(window=20).mean()\n\nplt.figure(figsize=(15,8))\n\n#Plotting 'AdjClose' price with 2 SMA's ie. sma_20 & sma_50\nplt.plot(close,label='TCS Adj Close',linewidth=3)\nplt.plot(sma_20,label='20 day Rolling SMA',linewidth=1.5)\nplt.plot(sma_50,label='50 day Rolling SMA',linewidth=1.5)\n\nplt.xlabel('DATE')\nplt.ylabel('Adjusted Closing Price ($)')\nplt.title('Plot of Adjusted Closing Price V\/S Simple Moving Averages')","374ecf3e":"priceSma_df = pd.DataFrame({\n      'Adj Close' : close,\n      'SMA 20' : sma_20,\n      'SMA 50' : sma_50\n     })\npriceSma_df","5c2e9e63":"priceSma_df.plot()\nplt.show()","6a08af45":"plt.figure(figsize = (12,6))\n#Plotting the Adjusted Price and two SMAs for The Corona Period:\nplt.plot(priceSma_df['2019-10-01':'2020-05-28']['Adj Close'], label='TCS Adj Close', linewidth = 2)\nplt.plot(priceSma_df['2019-10-01':'2020-05-28']['SMA 20'], label='20 days rolling SMA', linewidth = 1.5)\nplt.plot(priceSma_df['2019-10-01':'2020-05-28']['SMA 50'], label='50 days rolling SMA', linewidth = 1.5)\nplt.xlabel('Date')\nplt.ylabel('Adjusted closing price ($)')\nplt.title('Price with Two Simple Moving Averages - The Corona Period')\nplt.legend()\nplt.show()","4b9334fd":"sma_200=close.rolling(window=200).mean()\npriceSma_df['SMA 200']=sma_200\npriceSma_df","2ed5c39f":"#defining the start and end dates beforehand to avoid complexity:\nstart='2015-01-01'\nend='2020-05-28'\n\nplt.figure(figsize=(12,7))\n\n#Plotting the Adjusted Closing Price with SMA_50 & SMA_200\nplt.plot(priceSma_df[start:end]['Adj Close'],label='TCS Adj Closing Price',linewidth=3)\nplt.plot(priceSma_df[start:end]['SMA 200'],label='200 day rolling SMA',linewidth=1)\nplt.plot(priceSma_df[start:end]['SMA 50'],label='50 day rolling SMA',linewidth=1)\n\nplt.xlabel('Date')\nplt.ylabel('Adjusted closing price {$}')\nplt.title('Price with SMA_200 and SMA_50')\nplt.legend()\n\nplt.show()\n\n","ed89f6a4":"cma_50 = close.expanding(min_periods=50).mean()\ncma_50","ec08851c":"#So, we can see that the last row value of CMA is just the average(mean) of all the previous data up until the last data point.\nclose.mean()","97938775":"plt.style.use('fivethirtyeight')\n#Our Chart size\nplt.figure(figsize = (13,7))\n\n#Plotting 'Adj Close' Price and SMA_50 lines\nplt.plot(close,label='TCS Adj Close',linewidth=3)\nplt.plot(cma_50,label='50 day Expanding CMA',linewidth=1.5)\nplt.plot(sma_50,label='50 day Rolling SMA',linewidth=1.5)\n\n#Adding title, labels on the axis:\n#Legend on the left-upper corner\nplt.xlabel('Date')\nplt.ylabel('TCS Adjusted Closing Price ($)')\nplt.title('Pot of Adj Close & Cumulative_MA_50 V\/S Simple_MA_50')\nplt.legend()","6b794db9":"ema_50 = close.ewm(span=50,adjust=False).mean()\nema_50","1c5b477f":"plt.style.use('fivethirtyeight')\n#Our Chart size\nplt.figure(figsize = (13,7))\n\n#Plotting 'Adj Close' Price and SMA_50 lines\nplt.plot(close,label='TCS Adj Close',linewidth=3)\nplt.plot(cma_50,label='50 day Expanding CMA',linewidth=1.5)\nplt.plot(sma_50,label='50 day Rolling SMA',linewidth=1.5)\nplt.plot(ema_50,label='50 day Exponential EMA',linewidth=2.5)\n\n#Adding title, labels on the axis:\n#Legend on the left-upper corner\nplt.xlabel('Date')\nplt.ylabel('TCS Adjusted Closing Price ($)')\nplt.title('Pot of Adj Close & Cumulative_MA_50 V\/S Simple_MA_50 V\/S Exponential_MA_50')\nplt.legend()","4d9fd564":"plt.figure(figsize = (12,6))\n#Plotting the Adjusted Price & SMA V\/S CMA V\/S EMA for The Corona Period:\nplt.plot(close['2019-10-01':'2020-05-28'], label='TCS Adj Close', linewidth = 2)\nplt.plot(sma_50['2019-10-01':'2020-05-28'], label='50 days rolling SMA', linewidth = 1.5)\nplt.plot(cma_50['2019-10-01':'2020-05-28'], label='50 days expanding CMA', linewidth = 1.5)\nplt.plot(ema_50['2019-10-01':'2020-05-28'], label='50 days exponential CMA', linewidth = 1.5)\n\nplt.xlabel('Date')\nplt.ylabel('Adjusted closing price ($)')\nplt.title('Price with Various Moving Averages - The Corona Period')\nplt.legend()\nplt.show()","c57e5dda":"ema_20 = close.ewm(span=20,adjust=True).mean()\nema_20","2be77b17":"ema_5 = close.ewm(span=5,adjust=True).mean()\nema_5","2dcb0273":"plt.figure(figsize = (12,6))\n#Plotting the Adjusted Price & SMA V\/S CMA V\/S EMA for The Corona Period:\nplt.plot(close['2019-10-01':'2020-05-28'], label='TCS Adj Close', linewidth = 5)\nplt.plot(sma_20['2019-10-01':'2020-05-28'], label='20 days rolling SMA', linewidth = 1.5)\nplt.plot(ema_20['2019-10-01':'2020-05-28'], label='20 days exponential EMA', linewidth = 1.5,color='green')\nplt.plot(ema_5['2019-10-01':'2020-05-28'], label='5 days exponential EMA', linewidth = 2.5,color='red')\n\nplt.xlabel('Date')\nplt.ylabel('Adjusted closing price ($)')\nplt.title('Price with SMA_20 & EMA_20 & EMA_5- The Corona Period')\nplt.legend()\nplt.show()","81af4d6a":"Nothing is looking clear here, we're confused !!\n\nOk, Let's zoom in little bit and see what's there","d87f9956":"This domain uses a **sliding window** to take the average over a set number of time periods. It is an eqaully weighted mean of the previous *n* data.","55de12b4":"Moving averages, as all technical indicators, are based on the price series of a financial instrument.\nIn our example, we consider the daily price series of the **Tata Consultancy Services Limited\n** (symbol: TCS.NS). ","458596b8":"Now, everything seems set for us.\n\nPheww, Ok..Let's do it!!","da02537b":"There are multiple Time Series Analysis techniques as mentioned below:\n* Naive Approach\n* Simple Average\n* Moving Average\n* Singe Exponential Smoothing\n* Holt's linear trend method\n* Holt's Winter seasonal method\n* ARIMA","a99eedf2":"I think we are now ready to move to a real dataset.","f4933a83":"**We can also use SMA 200 and SMA 50 to determine long-term investment:**","3792dfb7":"Pandas makes calculating a 50-day moving average easy. Using the rolling() method we set a 50-day window, on which we calculate the arithmetic average (mean) using the mean() method:","96b3ba56":"# Simple Moving Average(SMA):","f3392832":"Unlike **SMA** and **CMA**, ***Exponential moving average ***gives more weight to the **recent prices** and as a result of which, it can be a better model or better capture the movement of the trend in a faster way. EMA's reaction is directly proportional to the pattern of the data.","83f9f0cb":"The above output shows how our dataframe look like:\n\nIt has 6 columns in total, i.e. Open, High, Low, Close, Adjusted Close prices and a Volume column as well.\nWe will use the **Adjusted Close Price** series which reflects the dividends,stock splits & various corporate events that affect the stock returns.","6a6491f6":"For a sanity check, let's also use the pandas in-built rolling function and see if it matches with our custom python based simple moving average.","95fdb513":"Ok, can't actually spot the difference between SMA and EMA.\n\nLet's take EMA for 20 days So that we could spot the deviation of EMA towards the recent dataset.","1bf7ea4e":"This was a good starting point on how we can calculate the moving averages of our data and make sense of it.\n\nBut still, there is still a lot to experiment..\n\nKudos !!!","df25de15":"Our dataset has a stock record of upto 5 years. So, using Pandas built-in library does a lot of help.","d7b67387":"# **INTRODUCTION**","c71df819":"Wow! So as we can observe from the graph above, that the Exponential Moving Average (EMA) does a superb job in capturing the pattern of the data with respect to the SMA.","fc2115cc":"# Cumulative Moving Average(CMA):","21af7175":"Assume that there is a demand for a product and it is observed for 12 months (1 Year), and we need to find moving averages for 3 and 4 months window periods.","2989f8ae":"**Using 20 day Rolling SMA & 50 day Rolling SMA**","ca16055e":"There are various types of moving averages:\n\n* Simple Moving Average**(SMA):**\n* Cumulative Moving Average**(CMA):**\n* Exponential Moving Average**(EMA):**","953c7d55":"**Our Dataset:**","1991344a":"**Implementing CMA on a Time Series Data**","6fa635ce":"Unlike **Simple moving average** which drops the oldest observation as the new one gets added, **Cumulative moving average** considers all prior observations. **CMA** is not a very good technique for analyzing trends and smoothing out the data. The reason being, it averages out all of the previous data up until the current data point, so an equally weighted average of the sequence of n values:","ce3da3a0":"Now that we have the plot of the **\"Adj Price\"** series, we can identify the short-term fluctuations while focusing on the longer trends.","0f68d55a":"**Analysing the dataset using SMA 50 & SMA 200:**","2b1e3c53":"Since EMAs give a higher weight on recent data than on older data, they are more responsive to the latest price changes as compared to SMAs, which makes the results from EMAs more timely and hence EMA is more preferred over other techniques.","646d47f3":"We should if not must, move on to our next method, EMA:","8f74268c":"In this article,the main topic of our concern would be  The **Moving Average** Technique. The moving average is one of the simplest technical indicators, yet it can be used and combined in many different ways to provide the backbone of trading systems and frameworks for investment decision making.","d4f51b5d":"And yet another ema for 5 days to compare the two EMAs","95f6c8d2":"**We can easily point out that CMA is not a very good technique for analyzing trends**","8b4d1e2f":"We want to use moving averages to make investment decisions - to decide when to BUY\/SELL shares in TCS.","e09ee339":"Hello !! I'm Abhishek let's talk about Time Series.\n\nMost of us would be knowing about the new buzz in the market i.e. Cryptocurrency and people investing in their coins.\n\nThe real talk is whether investing money in such a volatile currency safe or not? We can't be 100% sure of Investing in these coins but we indeed can generate an approximate value-based algorithm to secure our investment.\n\nOne such technique is **Time Series Analysis.**","cc012cdb":"We now load the data into a DataFrame. I have obtained a CSV file of daily data for TCS from Yahoo!Finance.\n\nYou can download it here: https:\/\/finance.yahoo.com\/quote\/TCS.NS\/history?p=TCS.NS","e5807e3f":"Besides Cryptocurrencies, there are multiple important areas where time series analysis is used \u2013 **forecasting Sales, Call Volume in a Call Center, Solar activity, Ocean tides, Stock market behaviour**, and many others.","743f02d1":"Let us take an example to understand the concept of SMA.\n\nFirst, we create a dummy time series data and try implementing SMA using just Python.","cbd4f2ff":"In the above plot,we can use a technique called \"Double Crossover Method\" to determine when to SELL\/BUY stock.\n\nWithin the above setting , a \"BUY\" signal is generated whenever the '20_day SMA'(shorter MA) crosses the '50_day SMA'(longer) from \"Below\".\n\nLike that, a \"SELL\" signal is generated whenever the '20_day SMA'(shorter) crosses the '50_day SMA'(longer) from \"Above\".","b3c88e0a":"We can spot that the number of rows reduced to \"1228\" after dropping empty data entries.","002b2ddd":"Let's calculate SMA for a window size of 3, which means we will consider three values each time to calculate the moving average, and for every new value, the oldest value will be ignored.","6d221e92":"As you can see, our chart is getting a bit crowded.\n\nIt would be better if we build a new dataframe that includes Adjusted Price and the Moving Averages:","6f0a0773":"# How To Use Moving Average to predict when to buy or sell a stock :","25a2061d":"# **Implementing SMA on Time Series Data**","d2984e65":"It can be seen how the long term SMA 200 helps us to identify the trend in a very smooth manner.","b8de6b79":"Let's also quickly calculate the simple moving average for a window_size of 4.","7b288af0":"# The Moving Average","2a47b91a":"# Types of Moving Averages:","14a50c0c":"To implement this, we will use pandas iloc function, since the demand column is what we need, we will fix the position of that in the iloc function while the row will be a variable i which we will keep iterating until we reach the end of the dataframe.","c80a3d9b":"Enough of theory,I'm done......\n\nOK, Let's jump to the practical implementation of the **Exponential moving average **","06f7cf70":"# **Exponential Moving Average(EMA):**"}}