{"cell_type":{"adce9f8e":"code","790af7d6":"code","0c88fee4":"code","7cb6d3de":"code","276d65dc":"code","b5301c04":"code","5c6bef7a":"code","0f93582f":"code","b3f08875":"code","f5ea77f4":"code","2faa7f41":"code","9a635e1b":"code","b3735a2d":"code","52dd4075":"code","10b439be":"code","99d00e6d":"code","66416ce5":"code","fab72719":"code","3d8e5d15":"code","7055e58e":"code","76ed3d09":"code","bc2de7ba":"code","a9e37541":"code","d46f80b5":"code","fd13258a":"code","5c25ba8a":"code","90a221e5":"code","c378dcae":"code","479f69d5":"code","036135d1":"code","f6045126":"code","f701da85":"code","1ffac154":"code","1f8c6183":"code","a4d8e527":"code","83d78aa3":"code","1979a4bf":"code","9a7d4348":"code","5f7045c1":"code","6ad4f5be":"code","f49144c4":"code","89387c87":"code","550915c5":"code","7f8b5ab0":"code","5a5a9b00":"code","5a5eddb3":"code","4a0f777d":"code","82de91f4":"code","f59d2b5c":"code","84a50f46":"code","5e62687f":"code","064f7044":"code","3283239b":"code","af0cd9e0":"code","3828d829":"code","34659167":"code","164066f6":"code","61326bfc":"code","3fe3ae13":"code","77a29b54":"code","88ababe0":"code","265794da":"code","61911ded":"code","2704b729":"code","565fec7f":"code","dea79da3":"code","f379500f":"code","3664c135":"code","cb8e82fe":"code","6258142b":"code","aabb46e5":"code","a3ab1ee6":"code","a53fbfc5":"code","5545b3f4":"code","3fe116b7":"code","cbaeb4fd":"code","916e0c64":"code","c2d3686c":"code","d28b7b09":"code","bb4774df":"code","5f64ee02":"code","7e1e9892":"code","f054a013":"code","5e54cd76":"code","91ed0e2d":"code","81accb82":"code","b743afaa":"code","0bb0b71c":"code","2f036a8b":"code","06f9bc13":"code","febfe182":"code","b6ef65d9":"code","29653d35":"code","59f073dc":"code","b94e8537":"code","8e21c2d3":"code","37e73f35":"code","14f5e256":"code","3d5057d2":"code","b15532cd":"code","4eb69d6b":"code","b199aaa5":"code","f09efa5b":"code","f56bede7":"code","d201b8ff":"code","6b4cdc7b":"code","190f7ac9":"code","0b11d32e":"code","3732f51f":"code","4c1dc663":"code","5a728c80":"code","878a1f16":"code","d20f419c":"code","8abb3dcd":"code","b089761f":"code","c9f765b1":"code","5dc699b1":"code","5a8caa30":"code","bcbf4b0c":"code","0c95c2d8":"code","9c114b70":"code","e32f90a7":"code","b09c4bb8":"code","64511743":"code","4f979960":"code","d24beb78":"code","e00128e0":"code","a0cd6189":"code","888550ca":"code","4bf3e4c8":"code","3b5df0be":"code","289a4151":"code","54f5a33f":"code","bce75f85":"code","93a16379":"code","c8e94287":"code","c5e23e93":"code","21c548f9":"code","b154e866":"code","a9f7f57f":"code","1ba5190a":"code","b38ff288":"code","814ae174":"code","ab7ec264":"code","8ff3d27b":"code","c4551c30":"code","a87a12bc":"code","a9751166":"code","d643f1a2":"code","72bb9c2d":"code","918a77c6":"code","4e7a8a26":"code","5c972116":"code","ce1a65bd":"code","f6a9d111":"code","fe49de29":"code","40770eee":"code","68ca3999":"code","35eb4385":"code","7a8aa3ad":"code","95ececba":"code","3c7e2f49":"code","23df5c95":"code","189a1b57":"code","99422f69":"code","c1bd19fa":"code","dfbf14dc":"code","ef241397":"code","1e1faf71":"code","259222bd":"code","a2c3ffaa":"markdown","322edbee":"markdown","ad656c18":"markdown","86f093d8":"markdown","12855b34":"markdown","57e5d3cc":"markdown","a6bb6bd6":"markdown","7929e671":"markdown","62383b41":"markdown","7ee1df9b":"markdown","1061b28c":"markdown","733e5f90":"markdown","d3c6826f":"markdown","a4faf37d":"markdown","1ff1687b":"markdown","e2813fd7":"markdown","7b6612df":"markdown","22510f35":"markdown","737d2e66":"markdown","be450738":"markdown","a4ac1183":"markdown","c21f905f":"markdown","a38aedc7":"markdown","6f0701db":"markdown","869f5c51":"markdown","3509911d":"markdown"},"source":{"adce9f8e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","790af7d6":"pd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\nimport warnings\nwarnings.filterwarnings('ignore')","0c88fee4":"# import customer data\ncustomer_df = pd.read_csv('\/kaggle\/input\/logisticregression-telecomcustomer-churmprediction\/customer_data.csv')","7cb6d3de":"# import churn_data\nchurn_df = pd.read_csv('\/kaggle\/input\/logisticregression-telecomcustomer-churmprediction\/churn_data.csv')","276d65dc":"# import internet data\ninternet_df = pd.read_csv('\/kaggle\/input\/logisticregression-telecomcustomer-churmprediction\/internet_data.csv')","b5301c04":"customer_df.head()","5c6bef7a":"customer_df.shape","0f93582f":"churn_df.head()","b3f08875":"churn_df.shape","f5ea77f4":"internet_df.head()","2faa7f41":"internet_df.shape","9a635e1b":"# join all the columns by customer ID\nprint(len(np.setdiff1d(customer_df.customerID, internet_df.customerID)))\nprint(len(np.setdiff1d(customer_df.customerID, churn_df.customerID)))","b3735a2d":"#merge customer and churn dataframes into df1\ndf1 = pd.merge(customer_df, churn_df, how='inner', on='customerID')","52dd4075":"# merge df1 and internet dataframes to telecom df\ntelecom_df = pd.merge(internet_df, df1, how='inner', on='customerID')","10b439be":"# explore final df\ntelecom_df.head()","99d00e6d":"telecom_df.shape","66416ce5":"telecom_df.columns","fab72719":"# check the data types \ntelecom_df.info()","3d8e5d15":"# analyze customerID\ntelecom_df.customerID.nunique()","7055e58e":"# analyze MultipleLines\ntelecom_df.MultipleLines.value_counts()","76ed3d09":"# analyze OnlineSecurity\ntelecom_df.OnlineSecurity.value_counts()","bc2de7ba":"# analyze InternetService\ntelecom_df.InternetService.value_counts()","a9e37541":"# analyze OnlineBackup\ntelecom_df.OnlineBackup.value_counts()","d46f80b5":"#analyze DeviceProtection    \ntelecom_df.DeviceProtection.value_counts()","fd13258a":"# analye TechSupport         \ntelecom_df.TechSupport.value_counts()","5c25ba8a":"# analye StreamingTV\ntelecom_df.StreamingTV.value_counts()","90a221e5":"# analyze StreamingMovies\ntelecom_df.StreamingMovies.value_counts()","c378dcae":"# analyze gender\ntelecom_df.gender.value_counts()","479f69d5":"# analyze SeniorCitizen\ntelecom_df.SeniorCitizen.value_counts()","036135d1":"# analyze partner\ntelecom_df.Partner.value_counts()","f6045126":"# analyze dependetns\ntelecom_df.Dependents.value_counts()","f701da85":"# analyze tenure\nnp.sort(telecom_df.tenure.unique())","1ffac154":"# analyze phone services\ntelecom_df.PhoneService.value_counts()","1f8c6183":"telecom_df.Contract.value_counts()","a4d8e527":"# analyze paperless billing\ntelecom_df.PaperlessBilling.value_counts()","83d78aa3":"# analyze paymentmethod\ntelecom_df.PaymentMethod.value_counts()","1979a4bf":"telecom_df.Churn.value_counts()","9a7d4348":"# convert 'total charges to float'\ntelecom_df['TotalCharges'] = pd.to_numeric(telecom_df['TotalCharges'],errors='coerce')","5f7045c1":"telecom_df.TotalCharges.dtype","6ad4f5be":"# import required visual libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","f49144c4":"def category_plot(df_src, df_by, h_v='h'):\n    frequency_table(df_src)\n    fig, ax = plt.subplots(1,2,figsize=(10,5))\n    ax[1] = sns.countplot(x=df_src, hue=df_by, ax=ax[1], palette=\"Set3\")\n    ax[1].set(xlabel=df_src.name, ylabel=df_by.name, title = df_src.name + ' vs ' + df_by.name + ' plot')\n    values = df_src.value_counts(normalize=True)* 100\n    ax[0] = sns.countplot(x=df_src, palette='Set3', ax=ax[0])\n    ax[0].set(xlabel=df_src.name, ylabel = 'Count', title= 'Frequency Plot')\n    if(h_v == 'v'):\n        ax[0].set_xticklabels(ax[0].get_xticklabels(), rotation=45)\n        ax[1].set_xticklabels(ax[1].get_xticklabels(), rotation=45)\n        \n    plt.show()","89387c87":"def get_percent(value, total, round_number = 2):\n    return round(100 * value \/ total, round_number)","550915c5":"def frequency_table(df,with_percent=True, with_margins=False):\n    freq_df = pd.crosstab(index=df, columns=\"count\", margins=with_margins).reset_index()\n    if with_percent:\n        freq_df['percent(%)'] = get_percent(freq_df['count'] , df.shape[0])\n    print(freq_df)","7f8b5ab0":"categorial_columns = telecom_df.select_dtypes(['object']).columns\ncategorial_columns","5a5a9b00":"# univariant analyis on MultipleLines\ncategory_plot(telecom_df.MultipleLines, telecom_df.Churn)","5a5eddb3":"# univariant analyis on InternetServices\ncategory_plot(telecom_df.InternetService, telecom_df.Churn)","4a0f777d":"# univariant analyis on OnlineSecurity\ncategory_plot(telecom_df.OnlineSecurity, telecom_df.Churn)","82de91f4":"# univariant analyis on OnlineBackup\ncategory_plot(telecom_df.OnlineBackup, telecom_df.Churn)","f59d2b5c":"# univariant analyis on DeviceProtection\ncategory_plot(telecom_df.DeviceProtection, telecom_df.Churn)","84a50f46":"# univariant analyis on TechSupport\ncategory_plot(telecom_df.TechSupport, telecom_df.Churn)\n","5e62687f":"# univariant analyis on StreamingTV\ncategory_plot(telecom_df.StreamingTV, telecom_df.Churn)","064f7044":"# univariant analyis on Streaming Movies\ncategory_plot(telecom_df.StreamingMovies, telecom_df.Churn)","3283239b":"# univariant analyis on Partner\ncategory_plot(telecom_df.Partner, telecom_df.Churn)","af0cd9e0":"# univariant analyis on Dependents\ncategory_plot(telecom_df.Dependents, telecom_df.Churn)","3828d829":"# univariant analyis on PhoneService\ncategory_plot(telecom_df.PhoneService, telecom_df.Churn)","34659167":"# univariant analyis on Contract\ncategory_plot(telecom_df.Contract, telecom_df.Churn)","164066f6":"# univariant analyis on Contract\ncategory_plot(telecom_df.PaperlessBilling, telecom_df.Churn)","61326bfc":"# univariant analyis on Contract\ncategory_plot(telecom_df.PaymentMethod, telecom_df.Churn, h_v='v')","3fe3ae13":"# check for nan in the data set\ntelecom_df.isnull().sum()","77a29b54":"# drop the columns of Total charges as the number of observations are very less\ntelecom_df = telecom_df[~np.isnan(telecom_df.TotalCharges)]","88ababe0":"telecom_df.isnull().sum()","265794da":"def get_boxplot(df,ax):\n    ax = sns.boxplot(df, ax=ax, palette=\"Reds\", \n                       medianprops = dict(linestyle='-', linewidth=2, color='Yellow'),\n                     width = 0.4, notch=True,\n                     boxprops = dict(linestyle='-', linewidth=2))\n    return ax","61911ded":"def dist_plot(df, plots=1):\n    fig, ax = plt.subplots(1,2, figsize=(10,4))\n    ax[0] = get_boxplot(df, ax[0])\n    ax[1] = sns.distplot(df, ax=ax[1], kde_kws={\"color\": \"y\"},  hist_kws={\"histtype\": \"step\", \"color\": \"k\"})\n    ax[1].axvline(x = df.mean(), color = 'r', linewidth=1.5, linestyle='--', label='mean')\n    ax[1].axvline(x = df.median(), color = 'g', linewidth=1.5, linestyle='--', label='median')\n    ax[1].set(xlabel = df.name, ylabel='frequency', title='Histogram of ' + df.name)\n    plt.legend()\n    plt.tight_layout()","2704b729":"dist_plot(telecom_df.TotalCharges)","565fec7f":"dist_plot(telecom_df.MonthlyCharges)","dea79da3":"dist_plot(telecom_df.tenure)","f379500f":"set(telecom_df.dtypes)","3664c135":"# List of variables to map\n\nvarlist =  ['PhoneService', 'PaperlessBilling', 'Churn', 'Partner', 'Dependents']\n\n# Defining the map function\ndef binary_map(x):\n    return x.map({'Yes': 1, \"No\": 0})\n\n# Applying the function to the housing list\ntelecom_df[varlist] = telecom_df[varlist].apply(binary_map)","cb8e82fe":"telecom_df.head()","6258142b":"telecom_df.columns","aabb46e5":"# create dummies for the other categorical variables\n# Creating dummy variables for the variable 'MultipleLines'\nml = pd.get_dummies(telecom_df['MultipleLines'], prefix='MultipleLines')\n# Dropping MultipleLines_No phone service column\nml1 = ml.drop(['MultipleLines_No phone service'], 1)\n#Adding the results to the master dataframe\ntelecom_df = pd.concat([telecom_df,ml1], axis=1)","a3ab1ee6":"iss = pd.get_dummies(telecom_df.InternetService)\niss = iss.drop(['No'], axis=1)\ntelecom_df = pd.concat([telecom_df, iss], axis=1)","a53fbfc5":"\n\n# Creating dummy variables for the variable 'OnlineSecurity'.\nos = pd.get_dummies(telecom_df['OnlineSecurity'], prefix='OnlineSecurity')\nos1 = os.drop(['OnlineSecurity_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom_df = pd.concat([telecom_df,os1], axis=1)","5545b3f4":"\n# Creating dummy variables for the variable 'DeviceProtection'. \ndp = pd.get_dummies(telecom_df['DeviceProtection'], prefix='DeviceProtection')\ndp1 = dp.drop(['DeviceProtection_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom_df = pd.concat([telecom_df,dp1], axis=1)","3fe116b7":"# Creating dummy variables for the variable 'TechSupport'. \nts = pd.get_dummies(telecom_df['TechSupport'], prefix='TechSupport')\nts1 = ts.drop(['TechSupport_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom_df = pd.concat([telecom_df,ts1], axis=1)\n","cbaeb4fd":"# Creating dummy variables for the variable 'StreamingTV'.\nst =pd.get_dummies(telecom_df['StreamingTV'], prefix='StreamingTV')\nst1 = st.drop(['StreamingTV_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom_df = pd.concat([telecom_df,st1], axis=1)\n","916e0c64":"# Creating dummy variables for the variable 'StreamingMovies'. \nsm = pd.get_dummies(telecom_df['StreamingMovies'], prefix='StreamingMovies')\nsm1 = sm.drop(['StreamingMovies_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom_df = pd.concat([telecom_df,sm1], axis=1)","c2d3686c":"# Defining the map function\ndef gender_map(x):\n    return x.map({'Female': 1, \"Male\": 0})\n\n# Applying the function to the housing list\ntelecom_df['gender'] = telecom_df[['gender']].apply(gender_map)","d28b7b09":"cc = pd.get_dummies(telecom_df.Contract)\n# Adding the results to the master dataframe\ntelecom_df = pd.concat([telecom_df,cc], axis=1)\n","bb4774df":"# Creating dummy variables for the variable 'OnlineBackup'.\nob = pd.get_dummies(telecom_df['OnlineBackup'], prefix='OnlineBackup')\nob1 = ob.drop(['OnlineBackup_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom_df = pd.concat([telecom_df,ob1], axis=1)","5f64ee02":"pm = pd.get_dummies(telecom_df.PaymentMethod)\n# Adding the results to the master dataframe\ntelecom_df = pd.concat([telecom_df,pm], axis=1)","7e1e9892":"telecom_df.head()","f054a013":"telecom_df.columns","5e54cd76":"# drop the original columns\ntelecom_df = telecom_df.drop(['MultipleLines', 'InternetService', 'OnlineSecurity','OnlineBackup', \n                              'DeviceProtection', 'TechSupport','StreamingTV', 'StreamingMovies'], axis=1)","91ed0e2d":"telecom_df = telecom_df.drop(['PaymentMethod', 'Contract',], axis=1)","81accb82":"telecom_df.head()","b743afaa":"# import required libraries\nfrom sklearn.model_selection import train_test_split","0bb0b71c":"# Create dependent and independent data frames\nX = telecom_df.drop(['customerID', 'Churn'], axis=1)\nY = telecom_df['Churn']","2f036a8b":"X.shape","06f9bc13":"Y.shape","febfe182":"# perform train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, train_size=0.7, test_size=0.3, random_state = 100)","b6ef65d9":"# import Standard Scaler from preprocesing module\nfrom sklearn.preprocessing import StandardScaler","29653d35":"scaler = StandardScaler()","59f073dc":"scale_columns = ['MonthlyCharges', 'tenure', 'TotalCharges']\nX_train[scale_columns] = scaler.fit_transform(X_train[scale_columns])","b94e8537":"X_train.head()","8e21c2d3":"def rate(df):\n    print(df.name,  ' Rate : ', round(100 * sum(df) \/ len(df), 2), '%')","37e73f35":"# check churn rate in the data set.\nrate(y_train)","14f5e256":"# check co-realtion between the variables\nplt.figure(figsize=(30,20))\nsns.heatmap(X_train.corr(), annot=True)\nplt.show()","3d5057d2":"#drop co-realted columns\ncorelated_cols = ['MultipleLines_No', 'OnlineSecurity_No', 'OnlineBackup_No', 'DeviceProtection_No', 'TechSupport_No', \n                 'StreamingTV_No', 'StreamingMovies_No']\nX_train = X_train.drop(corelated_cols, axis=1)\nX_test = X_test.drop(corelated_cols, axis=1)","b15532cd":"import statsmodels.api as sm","4eb69d6b":"def get_lrm(y_train, x_train):\n    lrm = sm.GLM(y_train, (sm.add_constant(x_train)), family = sm.families.Binomial())\n    lrm = lrm.fit()\n    print(lrm.summary())\n    return lrm","b199aaa5":"# running the logistic regression model once\nlrm_1 =get_lrm(y_train, X_train)","f09efa5b":"X_train.shape","f56bede7":"# using RFE remove some features.\n# import required libraries\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression","d201b8ff":"lg_reg = LogisticRegression()\nrfe = RFE(lg_reg, 15)\nrfe = rfe.fit(X_train, y_train)","6b4cdc7b":"rfe_df = pd.DataFrame({'columns': list(X_train.columns), 'rank' : rfe.ranking_, 'support' : rfe.support_ }).sort_values(by='rank', ascending=True)\nrfe_df","190f7ac9":"# get supported columns\nrfe_columns = X_train.columns[rfe.support_]\nrfe_columns","0b11d32e":"# import vif from statsmodel\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","3732f51f":"def calculate_vif(df):\n    vif = pd.DataFrame()\n    vif['Features'] = df.columns\n    vif['vif'] = [variance_inflation_factor(df.values, i) for i in range(df.shape[1])]\n    vif['vif'] = round(vif['vif'],2)\n    vif = vif.sort_values(by='vif', ascending=False)\n    print(vif)","4c1dc663":"# model 1 \nX_train_lg_1 = X_train[rfe_columns]\nlog_reg_1 = get_lrm(y_train, X_train_lg_1)","5a728c80":"X_train_lg_2 = X_train_lg_1.drop(['Credit card (automatic)'], axis=1)","878a1f16":"# model 2\nlog_reg_2 = get_lrm(y_train, X_train_lg_2)","d20f419c":"calculate_vif(X_train_lg_2)","8abb3dcd":"# drop Month-to-Month as it it highly co-realted\nX_train_lg_3 = X_train_lg_2.drop(['Month-to-month'], axis=1)","b089761f":"# model 3\nlog_reg_3 = get_lrm(y_train, X_train_lg_3)","c9f765b1":"calculate_vif(X_train_lg_3)","5dc699b1":"# drop 'TotalCharges' as it is hightly co-realted with other features\nX_train_lg_4 = X_train_lg_3.drop(['TotalCharges'], axis=1)","5a8caa30":"# model 4\nlog_reg_4 = get_lrm(y_train, X_train_lg_4)","bcbf4b0c":"# drop DSL, as it is insignificat\nX_train_lg_5 = X_train_lg_4.drop(['DSL'], axis=1)","0c95c2d8":"log_reg_5 = get_lrm(y_train, X_train_lg_5)","9c114b70":"# drop fiber optic as it is insignificant\nX_train_lg_6 = X_train_lg_5.drop(['Fiber optic'], axis=1)","e32f90a7":"log_reg_6 = get_lrm(y_train, X_train_lg_6)","b09c4bb8":"# looks all features are significant, lets check VIF\ncalculate_vif(X_train_lg_6)","64511743":"# predict the values from the model\ny_train_pred = log_reg_6.predict(sm.add_constant(X_train_lg_6))\ny_train_pred[:10]","4f979960":"y_train_pred_values = y_train_pred.values.reshape(-1)\ny_train_pred_values[:10]","d24beb78":"X_train_lg_6.columns","e00128e0":"# create a data frame having actual, customerid and predicted\nchurn_df = pd.DataFrame({'Churn_actual': y_train.values, 'Churn_prob' : y_train_pred_values})\nchurn_df['Cust_ID'] = y_train.index\nchurn_df.head()","a0cd6189":"def calc_predict(row, tresh):\n    if row >= tresh:\n        return 1\n    else: \n        return 0","888550ca":"# lets keep treshold as 0.5, just for check.  This step is just to understand the behaviour for one treshold.\nchurn_df['Churn_Pred'] = churn_df.Churn_prob.apply(lambda row: 1 if row >= 0.5 else 0)","4bf3e4c8":"churn_df.head()","3b5df0be":"from sklearn import metrics","289a4151":"# All the features are significate and there is no co-realtion between the variables.  \n# calucate the confusion matrix.\ncnf_matrix = metrics.confusion_matrix(churn_df.Churn_actual, churn_df.Churn_Pred)\ncnf_matrix","54f5a33f":"# calculate the accuracy\nprint('Accuracy of the model : ', metrics.accuracy_score(churn_df.Churn_actual, churn_df.Churn_Pred))","bce75f85":"print('Recall : ', metrics.recall_score(churn_df.Churn_actual, churn_df.Churn_Pred))","93a16379":"print('Precision : ', metrics.precision_score(churn_df.Churn_actual, churn_df.Churn_Pred))","c8e94287":"tn = cnf_matrix[0,0]\nfn = cnf_matrix[1,0]\nfp = cnf_matrix[0,1]\ntp = cnf_matrix[1,1]","c5e23e93":"# Sensistivity , True Positive rate\nprint('Sensitivity (True Positive Rate) TP \/ TP + FN : ', tp \/ (tp + fn))","21c548f9":"# specificity, \nprint('Specificity TN \/ (TN + FP) : ', tn \/ (tn + fp))","b154e866":"# False positive rate\nprint('False positive rate FP \/ (TN + FP) : ', fp \/ (tn+fp))","a9f7f57f":"def draw_roc_curve(actual, probs):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs, drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.legend(loc=\"lower right\")\n    plt.show()","1ba5190a":"draw_roc_curve(churn_df.Churn_actual, churn_df.Churn_prob)","b38ff288":"# to the predict for different tresholds\ntresholds = [float(x)\/10 for x in range(10)]\ntresholds.append(0.45)\ntresholds.append(0.55)\ntresholds = sorted(tresholds)\nfor i in sorted(tresholds):\n    churn_df[i] = churn_df.Churn_prob.map(lambda row: 1 if row > i else 0)\nchurn_df.head()","814ae174":"optimal_df = pd.DataFrame(columns=['prob', 'accuracy', 'sensitivity', 'specificity'])\nfor i in tresholds:\n    cm = metrics.confusion_matrix(churn_df.Churn_actual, churn_df[i])\n    tn = cm[0,0]\n    fn = cm[1,0]\n    fp = cm[0,1]\n    tp = cm[1,1]\n    accuracy = (tn + tp) \/ (tn + tp + fp + fn)\n    specificity = tn \/ (tn + fp)\n    sensitivity = tp \/ (tp + fn)\n    optimal_df.loc[i] = [i, accuracy, sensitivity, specificity]","ab7ec264":"optimal_df","8ff3d27b":"# plot the curve\noptimal_df.plot(x = 'prob', y=['accuracy', 'sensitivity', 'specificity'])\nplt.show()","c4551c30":"# from the above curve, optimal value\noptimal_value = 0.3","a87a12bc":"churn_df['final_pred'] = churn_df.Churn_prob.map(lambda x: 1 if x > 0.3 else 0)\nchurn_df.head()","a9751166":"# calcualte the accuracy\nfinal_accuracy = metrics.accuracy_score(churn_df.Churn_actual, churn_df.final_pred)\nprint('Final Accuracy : ', final_accuracy)","d643f1a2":"# calcualte the other parameters\nfinal_cm = metrics.confusion_matrix(churn_df.Churn_actual, churn_df.final_pred)\nprint('Confusion matric \\n', final_cm)","72bb9c2d":"tn = final_cm[0,0]\nfn = final_cm[1,0]\nfp = final_cm[0,1]\ntp = final_cm[1,1]\n\nsensitivity = tp \/ (tp + fn)\nspecificity = tn \/ (tn + fp)\nfalse_positive_rate = 1 - specificity\npositive_predictive_rate = tp \/ (tp + fp)\nnegative_predictive_rate = tn \/ (tn + fn)\n","918a77c6":"print('optimal treshold : ', optimal_value)\nprint('sensitivity : ', sensitivity)\nprint('specificity : ', specificity)\nprint('false_positive_rate : ', false_positive_rate)\nprint('positive_predictive_rate : ', positive_predictive_rate)\nprint('negative_predictive_rate : ', negative_predictive_rate)","4e7a8a26":"con_cm = metrics.confusion_matrix(churn_df.Churn_actual, churn_df.Churn_Pred)\ncon_cm","5c972116":"# recall\nrecall = con_cm[1,1] \/ (con_cm[1,1] + con_cm[1,0])\nprint('Recall : ', recall)","ce1a65bd":"# precision\nprecision = con_cm[1,1] \/ (con_cm[1,1] + con_cm[0,1])\nprint('precision : ', precision)","f6a9d111":"# precision and recall trade off\nfrom sklearn.metrics import precision_recall_curve","fe49de29":"p, r, tresholds = precision_recall_curve(churn_df.Churn_actual, churn_df.Churn_prob)","40770eee":"plt.plot(tresholds, p[:-1], 'g-')\nplt.plot(tresholds, r[:-1], 'r-')\nplt.show()","68ca3999":"X_test[scale_columns] = scaler.transform(X_test[scale_columns])","35eb4385":"X_test = X_test[X_train_lg_6.columns]\nX_test.head()","7a8aa3ad":"# predict the X_test\ny_test_pred = log_reg_6.predict(sm.add_constant(X_test))","95ececba":"test_pred_df = pd.DataFrame(y_test)\ntest_pred_df.head()","3c7e2f49":"y_test_df = pd.DataFrame(y_test_pred)\ny_test_df['CustID'] = y_test_df.index\ny_test_df.head()","23df5c95":"y_test_df.reset_index(drop= True, inplace=True)\ntest_pred_df.reset_index(drop=True, inplace=True)","189a1b57":"test_pred_final_df = pd.concat([ test_pred_df, y_test_df], axis=1)\ntest_pred_final_df.head()","99422f69":"test_pred_final_df= test_pred_final_df.rename(columns={0 : 'Churn_Prob', 'Churn': 'Churn_Actual'})\ntest_pred_final_df.head()","c1bd19fa":"test_pred_final_df['Churn_final_pred'] = test_pred_final_df.Churn_Prob.map(lambda x : 1 if x > 0.42 else 0)\ntest_pred_final_df.head()","dfbf14dc":"test_accuracy = metrics.accuracy_score(test_pred_final_df.Churn_Actual, test_pred_final_df.Churn_final_pred)\nprint('Test accuracy : ', test_accuracy)","ef241397":"test_cm = metrics.confusion_matrix(test_pred_final_df.Churn_Actual, test_pred_final_df.Churn_final_pred)\ntest_cm","1e1faf71":"print('Test Sensitivity : ', test_cm[1,1] \/ (test_cm[1,1] + test_cm[1,0]))\nprint('Test Specificity : ', test_cm[0,0] \/ (test_cm[0,0] + test_cm[0,1]))","259222bd":"print('Final model parameters : ', X_train_lg_6.columns)","a2c3ffaa":"Observations:\n- Most of the Churn cases are the subscibers who do the payment method by Electronic check","322edbee":"Observations:\n- All variables are significant\n- check VIF of the variables","ad656c18":"Step10 : **Calculate Precision and Recall**","86f093d8":"Lets explore the data","12855b34":"Observations\n- Churn rate for Fiber optic customers are more when compared to DSL and No service provder.","57e5d3cc":"Observations\n- Churn rate is higher for the subscribers who are not subscribe to Tech support.","a6bb6bd6":"Step 3: **Exploratory Data analysis**","7929e671":"Step 5: **Train Test Split**","62383b41":"No nulls in the data, data is clean","7ee1df9b":"Step 4: Data preparation","1061b28c":"No missing data based on the customer ID, we can merge the data based on customerID","733e5f90":"Observations:\n- Churn rate is higher for the subscriber who doesn't have a partner","d3c6826f":"Observations\n- Churn rate is high for subscribers having no device protection. ","a4faf37d":"Observations:\n- Churn rate is higher for the subscribers who doen't have online security.","1ff1687b":"Step 9: **Find the optimal value**","e2813fd7":"Step 12: **Make predictions on test data set**","7b6612df":"perform univariant analysis to understand the churn","22510f35":"Observations\n- Churn rate is higher for the subscribers who doesn't have dependents","737d2e66":"Step2 : **Understanding Data**","be450738":"Step 7 : **Model Building (Logistic Regression)**","a4ac1183":"Observations:\n- pvalue of Credit card (automatic) is > sig_level.  Drop the feature","c21f905f":"Step 6: **Feature Scaling**","a38aedc7":"Step 8 : **ROC Curve**","6f0701db":"Step 1:   **Read data from Sources**","869f5c51":"Observations\n- Churn rate is higher for the subscribers having month to month contract","3509911d":"Observations:\n- Subscribers having no online back are more prone to Churn"}}