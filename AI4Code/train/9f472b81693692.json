{"cell_type":{"c3182235":"code","6813ddb7":"code","7189a230":"code","167962b7":"code","85609a95":"code","a3a22167":"code","8a0aee6c":"code","fca3098f":"code","2ef9f69b":"code","aad91d54":"code","108ca795":"code","803fdf21":"code","6acfb31d":"code","2519de20":"code","2eaf7d04":"code","53761ab8":"code","aaf27e9b":"code","ded5d888":"code","359201b7":"code","8abdc947":"code","0dfc70ec":"code","ac339b80":"code","42c6fc32":"code","b9f52db0":"code","55693756":"code","45d97309":"code","ecd9cc5a":"code","748175dc":"code","42209f97":"code","b830b6f8":"code","619ae51d":"code","3deb89ea":"code","8a9ac31f":"code","469185e8":"code","baaa8e8e":"code","7e6b88c2":"code","141a71f9":"code","6ac4683e":"code","011d3940":"code","95e9ddaf":"code","a0851d41":"code","eb1deaa0":"code","43a81102":"code","ad8cb7fb":"code","9393a031":"code","e131bd79":"code","3350c341":"code","351b78ac":"code","d5428a5f":"code","89b5786c":"code","09d044bd":"code","4abd2036":"code","136ba862":"code","f71fa8f7":"code","eea3dc8f":"code","022932bc":"code","7aa4bf93":"code","8899a8cc":"code","84454bd1":"code","a4dc876a":"code","957cd458":"code","aa0929df":"code","006c5dc2":"markdown","1ccd622e":"markdown","909d9139":"markdown","86f6f944":"markdown","627ad086":"markdown","910e3aa5":"markdown","52f7e613":"markdown","d1b4d4d6":"markdown","bf35b047":"markdown"},"source":{"c3182235":"#GENERAL\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport random\n#PATH PROCESS\nimport os\nimport os.path\nfrom pathlib import Path\nimport glob\n#IMAGE PROCESS\nfrom PIL import Image\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nimport cv2\nfrom keras.applications.vgg16 import preprocess_input, decode_predictions\nfrom keras.preprocessing import image\nimport skimage\nfrom skimage.feature import hessian_matrix, hessian_matrix_eigvals\nfrom scipy.ndimage.filters import convolve\nfrom skimage import data, io, filters\n#SCALER & TRANSFORMATION\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import MinMaxScaler\nfrom keras.utils.np_utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras import regularizers\nfrom sklearn.preprocessing import LabelEncoder\n#ACCURACY CONTROL\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, roc_auc_score, roc_curve\nfrom sklearn.model_selection import GridSearchCV, cross_val_score\nfrom sklearn.metrics import mean_squared_error, r2_score\n#OPTIMIZER\nfrom keras.optimizers import RMSprop,Adam,Optimizer,Optimizer, SGD\n#MODEL LAYERS\nfrom tensorflow.keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization,MaxPooling2D,BatchNormalization,\\\n                        Permute, TimeDistributed, Bidirectional,GRU, SimpleRNN, LSTM, GlobalAveragePooling2D, SeparableConv2D, ZeroPadding2D, \\\nConvolution2D, Reshape, GaussianNoise\nfrom keras import models\nfrom keras import layers\nimport tensorflow as tf\nfrom keras.applications import VGG16,VGG19,inception_v3\nfrom keras import backend as K\nfrom keras.utils import plot_model\nfrom keras.models import load_model\nfrom keras.regularizers import l1,l2,L1L2\n#SKLEARN CLASSIFIER\nfrom xgboost import XGBClassifier, XGBRegressor\nfrom lightgbm import LGBMClassifier, LGBMRegressor\nfrom catboost import CatBoostClassifier, CatBoostRegressor\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor\nfrom sklearn.neural_network import MLPClassifier, MLPRegressor\nfrom sklearn.neighbors import KNeighborsClassifier, KNeighborsRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.cross_decomposition import PLSRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import ElasticNetCV\n#IGNORING WARNINGS\nfrom warnings import filterwarnings\nfilterwarnings(\"ignore\",category=DeprecationWarning)\nfilterwarnings(\"ignore\", category=FutureWarning) \nfilterwarnings(\"ignore\", category=UserWarning)","6813ddb7":"Galaxy_Train_Path = Path(\"..\/input\/mapping-dark-matter-image-set\/DARK MATTER\/galaxy\/training\")\nStar_Train_Path = Path(\"..\/input\/mapping-dark-matter-image-set\/DARK MATTER\/star\/training\")","7189a230":"Galaxy_IMG_Path = list(Galaxy_Train_Path.glob(r\"*.png\"))\nStar_IMG_Path = list(Star_Train_Path.glob(r\"*.png\"))","167962b7":"Galaxy_IMG_Series = pd.Series(Galaxy_IMG_Path,name=\"PNG\").astype(str)\nStar_IMG_Series = pd.Series(Star_IMG_Path,name=\"PNG\").astype(str)","85609a95":"print(Galaxy_IMG_Series.head(-1))","a3a22167":"print(Star_IMG_Series.head(-1))","8a0aee6c":"plt.style.use(\"classic\")","fca3098f":"Example_Galaxy_IMG = Galaxy_IMG_Series[45]\nExample_Star_IMG = Star_IMG_Series[45]","2ef9f69b":"Reading_Galaxy_IMG = cv2.imread(Example_Galaxy_IMG)\nReading_Galaxy_IMG = cv2.cvtColor(Reading_Galaxy_IMG,cv2.COLOR_BGR2RGB)","aad91d54":"Reading_Star_IMG = cv2.imread(Example_Star_IMG)\nReading_Star_IMG = cv2.cvtColor(Reading_Star_IMG,cv2.COLOR_BGR2RGB)","108ca795":"figure = plt.figure(figsize=(12,12))\nprint(\"GALAXY\")\nplt.xlabel(Reading_Galaxy_IMG.shape)\nplt.ylabel(Reading_Galaxy_IMG.size)\nplt.imshow(Reading_Galaxy_IMG)","803fdf21":"figure = plt.figure(figsize=(12,12))\nprint(\"STAR\")\nplt.xlabel(Reading_Star_IMG.shape)\nplt.ylabel(Reading_Star_IMG.size)\nplt.imshow(Reading_Star_IMG)","6acfb31d":"figure = plt.figure(figsize=(12,12))\n\n_,threshold_Galaxy = cv2.threshold(Reading_Galaxy_IMG,200,255,cv2.THRESH_BINARY_INV)\n\nprint(\"GALAXY\")\nplt.xlabel(threshold_Galaxy.shape)\nplt.ylabel(threshold_Galaxy.size)\nplt.imshow(threshold_Galaxy)","2519de20":"figure = plt.figure(figsize=(12,12))\n\n_,threshold_Star = cv2.threshold(Reading_Star_IMG,200,255,cv2.THRESH_BINARY_INV)\n\nprint(\"STAR\")\nplt.xlabel(threshold_Star.shape)\nplt.ylabel(threshold_Star.size)\nplt.imshow(threshold_Star)","2eaf7d04":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(12,12))\n\nprint(\"GALAXY\")\nfor indexing,ax in enumerate(axis.flat):\n    IMG_Reading = cv2.imread(Galaxy_IMG_Series[indexing])\n    ax.set_xlabel(IMG_Reading.shape)\n    ax.set_ylabel(IMG_Reading.size)\n    ax.imshow(IMG_Reading)\nplt.tight_layout()\nplt.show()","53761ab8":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(12,12))\n\nprint(\"STAR\")\nfor indexing,ax in enumerate(axis.flat):\n    IMG_Reading = cv2.imread(Star_IMG_Series[indexing])\n    ax.set_xlabel(IMG_Reading.shape)\n    ax.set_ylabel(IMG_Reading.size)\n    ax.imshow(IMG_Reading)\nplt.tight_layout()\nplt.show()","aaf27e9b":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(12,12))\n\nprint(\"GALAXY\")\nfor indexing,ax in enumerate(axis.flat):\n    IMG_Reading = cv2.imread(Galaxy_IMG_Series[indexing])\n    _,threshold_Galaxy = cv2.threshold(IMG_Reading,200,255,cv2.THRESH_BINARY_INV)\n    ax.set_xlabel(threshold_Galaxy.shape)\n    ax.set_ylabel(threshold_Galaxy.size)\n    ax.imshow(threshold_Galaxy)\nplt.tight_layout()\nplt.show()","ded5d888":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(12,12))\n\nprint(\"STAR\")\nfor indexing,ax in enumerate(axis.flat):\n    IMG_Reading = cv2.imread(Star_IMG_Series[indexing])\n    _,threshold_Star = cv2.threshold(IMG_Reading,200,255,cv2.THRESH_BINARY_INV)\n    ax.set_xlabel(threshold_Star.shape)\n    ax.set_ylabel(threshold_Star.size)\n    ax.imshow(threshold_Star)\nplt.tight_layout()\nplt.show()","359201b7":"figure = plt.figure(figsize=(12,12))\n\n_,threshold_Galaxy = cv2.threshold(Reading_Galaxy_IMG,200,255,cv2.THRESH_BINARY_INV)\nCanny_Galaxy = cv2.Canny(threshold_Galaxy,10,100)\ncontours_Galaxy,_ = cv2.findContours(Canny_Galaxy,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n\nfor cnt_Galaxy in contours_Galaxy:\n    x,y,w,h = cv2.boundingRect(cnt_Galaxy)\n    cv2.rectangle(Reading_Galaxy_IMG,(x,y),(x+w,y+h),(255,0,0),1)\n\nprint(\"GALAXY\")\nplt.xlabel(Reading_Galaxy_IMG.shape)\nplt.ylabel(Reading_Galaxy_IMG.size)\nplt.imshow(Reading_Galaxy_IMG)","8abdc947":"figure = plt.figure(figsize=(12,12))\n\n_,threshold_Star_E = cv2.threshold(Reading_Star_IMG,200,255,cv2.THRESH_BINARY_INV)\nCanny_Star_E = cv2.Canny(threshold_Star_E,10,100)\ncontours_Star_E,_ = cv2.findContours(Canny_Star_E,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n\nfor cnt_Star_E in contours_Star_E:\n    x_s,y_s,w_s,h_s = cv2.boundingRect(cnt_Star_E)\n    cv2.rectangle(Reading_Star_IMG,(x_s,y_s),(x_s+w_s,y_s+h_s),(255,0,0),1)\n\nprint(\"STAR\")\nplt.xlabel(Reading_Star_IMG.shape)\nplt.ylabel(Reading_Star_IMG.size)\nplt.imshow(Reading_Star_IMG)","0dfc70ec":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(12,12))\n\nprint(\"GALAXY\")\nfor indexing,ax in enumerate(axis.flat):\n    IMG_Reading = cv2.imread(Galaxy_IMG_Series[indexing])\n    _,threshold_Galaxy = cv2.threshold(IMG_Reading,200,255,cv2.THRESH_BINARY_INV)\n    Canny_Galaxy = cv2.Canny(threshold_Galaxy,10,100)\n    contours_Galaxy,_ = cv2.findContours(Canny_Galaxy,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n\n    for cnt_Galaxy in contours_Galaxy:\n        x,y,w,h = cv2.boundingRect(cnt_Galaxy)\n        cv2.rectangle(IMG_Reading,(x,y),(x+w,y+h),(255,0,0),1)\n        \n    ax.set_xlabel(IMG_Reading.shape)\n    ax.set_ylabel(IMG_Reading.size)\n    ax.imshow(IMG_Reading)\nplt.tight_layout()\nplt.show()","ac339b80":"figure,axis = plt.subplots(nrows=5,ncols=5,figsize=(12,12))\n\nprint(\"STAR\")\nfor indexing,ax in enumerate(axis.flat):\n    IMG_Reading = cv2.imread(Star_IMG_Series[indexing])\n    _,threshold_Star = cv2.threshold(IMG_Reading,200,255,cv2.THRESH_BINARY_INV)\n    Canny_Star = cv2.Canny(threshold_Star,10,100)\n    contours_Star,_ = cv2.findContours(Canny_Star,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)\n\n    for cnt_Star in contours_Star:\n        x,y,w,h = cv2.boundingRect(cnt_Star)\n        cv2.rectangle(IMG_Reading,(x,y),(x+w,y+h),(255,0,0),1)\n        \n    ax.set_xlabel(IMG_Reading.shape)\n    ax.set_ylabel(IMG_Reading.size)\n    ax.imshow(IMG_Reading)\nplt.tight_layout()\nplt.show()","42c6fc32":"Galaxy_Train = Galaxy_IMG_Series[:10000]\nGalaxy_Test = Galaxy_IMG_Series[10000:20000]\nGalaxy_Test = Galaxy_Test.reset_index()","b9f52db0":"Star_Train = Star_IMG_Series[:10000]\nStar_Test = Star_IMG_Series[10000:20000]\nStar_Test = Star_Test.reset_index()","55693756":"print(Galaxy_Train.head(-1))","45d97309":"print(Galaxy_Test.head(-1))","ecd9cc5a":"print(Star_Train.head(-1))","748175dc":"print(Star_Test.head(-1))","42209f97":"Transformation_Galaxy_Train = []\n\nfor Galaxy_IMG in Galaxy_Train:\n    \n    IMG_G = cv2.imread(Galaxy_IMG)\n    IMG_G = IMG_G \/ 255.\n    Transformation_Galaxy_Train.append(IMG_G)","b830b6f8":"Transformation_Galaxy_Test = []\n\nfor Galaxy_IMG_Test in Galaxy_Test[\"PNG\"]:\n    \n    IMG_G_Test = cv2.imread(Galaxy_IMG_Test)\n    IMG_G_Test = IMG_G_Test \/ 255.\n    Transformation_Galaxy_Test.append(IMG_G_Test)","619ae51d":"Transformation_Star_Train = []\n\nfor Star_IMG in Star_Train:\n    \n    IMG_S = cv2.imread(Star_IMG)\n    IMG_S = IMG_S \/ 255.\n    Transformation_Star_Train.append(IMG_S)","3deb89ea":"Transformation_Star_Test = []\n\nfor Star_IMG_Test in Star_Test[\"PNG\"]:\n    \n    IMG_S_Test = cv2.imread(Star_IMG_Test)\n    IMG_S_Test = IMG_S_Test \/ 255.\n    Transformation_Star_Test.append(IMG_S_Test)","8a9ac31f":"print(Transformation_Galaxy_Train[4].shape)\nprint(Transformation_Galaxy_Test[4].shape)\nprint(Transformation_Star_Train[4].shape)\nprint(Transformation_Star_Test[4].shape)","469185e8":"X_Train_Galaxy = np.asarray(Transformation_Galaxy_Train)\nX_Test_Galaxy = np.asarray(Transformation_Galaxy_Test)\nX_Train_Star = np.asarray(Transformation_Star_Train)\nX_Test_Star = np.asarray(Transformation_Star_Test)","baaa8e8e":"print(X_Train_Galaxy.shape)\nprint(X_Test_Galaxy.shape)\nprint(X_Train_Star.shape)\nprint(X_Test_Star.shape)","7e6b88c2":"Encoder_G = Sequential()\n#\nEncoder_G.add(Flatten(input_shape=(48,48,3)))\n#\nEncoder_G.add(Dense(1000,activation=\"relu\"))\nEncoder_G.add(Dense(900,activation=\"relu\"))\nEncoder_G.add(Dense(800,activation=\"relu\"))\nEncoder_G.add(Dense(700,activation=\"relu\"))\nEncoder_G.add(Dense(600,activation=\"relu\"))\nEncoder_G.add(Dense(500,activation=\"relu\"))\nEncoder_G.add(Dense(400,activation=\"relu\"))\nEncoder_G.add(Dense(300,activation=\"relu\"))\nEncoder_G.add(Dense(200,activation=\"relu\"))\nEncoder_G.add(Dense(100,activation=\"relu\"))\nEncoder_G.add(Dense(50,activation=\"relu\"))\nEncoder_G.add(Dense(25,activation=\"relu\"))\nEncoder_G.add(Dense(15,activation=\"relu\"))\n#\nEncoder_G.add(Dense(7,activation=\"relu\"))","141a71f9":"Decoder_G = Sequential()\n#\nDecoder_G.add(Dense(15,activation=\"relu\",input_shape=[7]))\n#\nDecoder_G.add(Dense(25,activation=\"relu\"))\nDecoder_G.add(Dense(50,activation=\"relu\"))\nDecoder_G.add(Dense(100,activation=\"relu\"))\nDecoder_G.add(Dense(200,activation=\"relu\"))\nDecoder_G.add(Dense(300,activation=\"relu\"))\nDecoder_G.add(Dense(400,activation=\"relu\"))\nDecoder_G.add(Dense(500,activation=\"relu\"))\nDecoder_G.add(Dense(600,activation=\"relu\"))\nDecoder_G.add(Dense(700,activation=\"relu\"))\nDecoder_G.add(Dense(800,activation=\"relu\"))\nDecoder_G.add(Dense(900,activation=\"relu\"))\nDecoder_G.add(Dense(1000,activation=\"relu\"))\n#\nDecoder_G.add(Dense(48*48*3,activation=\"sigmoid\"))\n#\nDecoder_G.add(Reshape([48,48,3]))","6ac4683e":"Auto_Encoder_Galaxy = Sequential([Encoder_G,Decoder_G])","011d3940":"print(Auto_Encoder_Galaxy.summary())","95e9ddaf":"print(Auto_Encoder_Galaxy.layers)","a0851d41":"Auto_Encoder_Galaxy.compile(loss=\"binary_crossentropy\",optimizer=\"rmsprop\",metrics=[\"accuracy\"])","eb1deaa0":"AE_G_Model = Auto_Encoder_Galaxy.fit(X_Train_Galaxy,X_Train_Galaxy,epochs=5,batch_size=20)","43a81102":"Prediction_Galaxy_IMG = Auto_Encoder_Galaxy.predict(X_Test_Galaxy[:20])","ad8cb7fb":"prediction_img_number = 2\nprint(\"NORMAL\")\nplt.imshow(X_Test_Galaxy[prediction_img_number])\nplt.show()\nprint(\"AUTO-ENCODER OUTPUT\")\nplt.imshow(Prediction_Galaxy_IMG[prediction_img_number])","9393a031":"prediction_img_number = 10\nprint(\"NORMAL\")\nplt.imshow(X_Test_Galaxy[prediction_img_number])\nplt.show()\nprint(\"AUTO-ENCODER OUTPUT\")\nplt.imshow(Prediction_Galaxy_IMG[prediction_img_number])","e131bd79":"figure,axis = plt.subplots(nrows=5,ncols=4,figsize=(10,10))\n\nfor Pr_Image,ax in enumerate(axis.flat):\n    ax.imshow(Prediction_Galaxy_IMG[Pr_Image])","3350c341":"TEST_IMG = X_Test_Galaxy[1]\nAUTOENCODER_OUTPUT = Prediction_Galaxy_IMG[1]\n\nIMGs_List_Predict = [TEST_IMG,AUTOENCODER_OUTPUT]\n\nfigure,axis = plt.subplots(nrows=1,ncols=2,figsize=(10,10))\n\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(IMGs_List_Predict[i])\nplt.tight_layout()\nplt.show()","351b78ac":"TEST_IMG = X_Test_Galaxy[1]\nAUTOENCODER_OUTPUT = Prediction_Galaxy_IMG[10]\n\nIMGs_List_Predict = [TEST_IMG,AUTOENCODER_OUTPUT]\n\nfigure,axis = plt.subplots(nrows=1,ncols=2,figsize=(10,10))\n\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(IMGs_List_Predict[i])\nplt.tight_layout()\nplt.show()","d5428a5f":"Encoder_S = Sequential()\n#\nEncoder_S.add(Flatten(input_shape=(48,48,3)))\n#\nEncoder_S.add(Dense(400,activation=\"relu\"))\nEncoder_S.add(Dense(300,activation=\"relu\"))\nEncoder_S.add(Dense(200,activation=\"relu\"))\nEncoder_S.add(Dense(100,activation=\"relu\"))\nEncoder_S.add(Dense(50,activation=\"relu\"))\nEncoder_S.add(Dense(25,activation=\"relu\"))\nEncoder_S.add(Dense(15,activation=\"relu\"))\n#\nEncoder_S.add(Dense(7,activation=\"relu\"))","89b5786c":"Decoder_S = Sequential()\n#\nDecoder_S.add(Dense(15,activation=\"relu\",input_shape=[7]))\n#\nDecoder_S.add(Dense(25,activation=\"relu\"))\nDecoder_S.add(Dense(50,activation=\"relu\"))\nDecoder_S.add(Dense(100,activation=\"relu\"))\nDecoder_S.add(Dense(200,activation=\"relu\"))\nDecoder_S.add(Dense(300,activation=\"relu\"))\nDecoder_S.add(Dense(400,activation=\"relu\"))\n#\nDecoder_S.add(Dense(48*48*3,activation=\"sigmoid\"))\n#\nDecoder_S.add(Reshape([48,48,3]))","09d044bd":"Auto_Encoder_Star = Sequential([Encoder_S,Decoder_S])","4abd2036":"print(Auto_Encoder_Star.summary())","136ba862":"print(Auto_Encoder_Star)","f71fa8f7":"Auto_Encoder_Star.compile(loss=\"binary_crossentropy\",optimizer=\"rmsprop\",metrics=[\"accuracy\"])","eea3dc8f":"AE_S_Model = Auto_Encoder_Star.fit(X_Train_Star,X_Train_Star,epochs=5,batch_size=20)","022932bc":"Prediction_Star_IMG = Auto_Encoder_Galaxy.predict(X_Test_Star[:20])","7aa4bf93":"prediction_img_number = 11\nprint(\"NORMAL\")\nplt.imshow(X_Test_Star[prediction_img_number])\nplt.show()\nprint(\"AUTO-ENCODER OUTPUT\")\nplt.imshow(Prediction_Star_IMG[prediction_img_number])","8899a8cc":"prediction_img_number = 1\nprint(\"NORMAL\")\nplt.imshow(X_Test_Star[prediction_img_number])\nplt.show()\nprint(\"AUTO-ENCODER OUTPUT\")\nplt.imshow(Prediction_Star_IMG[prediction_img_number])","84454bd1":"figure,axis = plt.subplots(nrows=5,ncols=4,figsize=(10,10))\n\nfor Pr_Image,ax in enumerate(axis.flat):\n    ax.imshow(Prediction_Star_IMG[Pr_Image])","a4dc876a":"TEST_IMG = X_Test_Star[1]\nAUTOENCODER_OUTPUT = Prediction_Star_IMG[1]\n\nIMGs_List_Predict = [TEST_IMG,AUTOENCODER_OUTPUT]\n\nfigure,axis = plt.subplots(nrows=1,ncols=2,figsize=(10,10))\n\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(IMGs_List_Predict[i])\nplt.tight_layout()\nplt.show()","957cd458":"TEST_IMG = X_Test_Star[19]\nAUTOENCODER_OUTPUT = Prediction_Star_IMG[19]\n\nIMGs_List_Predict = [TEST_IMG,AUTOENCODER_OUTPUT]\n\nfigure,axis = plt.subplots(nrows=1,ncols=2,figsize=(10,10))\n\nfor i, ax in enumerate(axis.flat):\n    ax.imshow(IMGs_List_Predict[i])\nplt.tight_layout()\nplt.show()\nplt.savefig(\"output\")","aa0929df":"print(Prediction_Star_IMG[1].dtype)","006c5dc2":"# PACKAGES AND LIBRARIES","1ccd622e":"# AUTO-ENCODER FOR GALAXY","909d9139":"# TO SERIES","86f6f944":"# HISTORY","627ad086":"# DATA PROCESS","910e3aa5":"# VISUALIZATION","52f7e613":"#### CONTENT\n\n* The universe isn't behaving. Or at least, that's the view of many of the world's leading scientists: the universe behaves as if there is far more matter than we can observe. And that's important, because it means either that vital scientific theories are wrong, or that there are whole new types of stuff that we haven't yet discovered.\n\n* The aim is to measure the shapes of galaxies to reconstruct the gravitational lensing signal in the presence of noise and a known Point Spread Function. The signal is a very small change in the galaxies\u2019 ellipticity, an exactly circular galaxy image would be changed into an ; however real galaxies are not circular.\n\n* The galaxy images are convolved or smoothed with a kernel that would act to turn a single point into a blurry image. Part of the challenge is to attempt to remove or account for that blurring effect.","d1b4d4d6":"# AUTO-ENCODER FOR STAR","bf35b047":"# PATH"}}