{"cell_type":{"aac66839":"code","a3a78579":"code","2ac2d1a5":"code","d706930d":"code","a35ae8c1":"code","ea043325":"code","ecea3bad":"code","07e92b28":"code","f810146c":"code","f000f2bf":"code","6edbb90a":"code","43c45ed4":"code","c8a2c6e6":"code","ee748818":"code","a22400cf":"code","9955a79f":"code","3879304e":"code","e4619da1":"code","551c4d2e":"code","bd85156f":"code","83b7750a":"code","2e294727":"code","6a2cc8da":"code","c804b199":"code","51b74dd5":"code","0b3de51e":"code","3ebe0578":"code","830b6dde":"code","6d702120":"code","1aac412b":"code","ec09c71f":"code","c9a8aba8":"code","12ff9a14":"code","38b8c673":"code","fa92edb1":"code","a6787fd6":"code","29b5fd3f":"code","9bde646b":"code","97f932ba":"code","502c9076":"code","d52adef0":"code","aedd8e09":"code","0f9166b2":"code","41934c16":"code","e757e05e":"code","980f8296":"code","5a774cc6":"code","f9992a28":"code","3f7be543":"code","dfa6b885":"code","0bc9cee5":"code","0403cb30":"code","f364bf20":"code","bdd77d5a":"code","31a38fc1":"code","f5c0c7ce":"code","860310c9":"code","4310ee22":"code","c708a475":"code","78fc966e":"code","d6789cdc":"code","56973f19":"markdown","633e40cf":"markdown","acdbf80d":"markdown","88b598f1":"markdown","66388be4":"markdown","3ce39495":"markdown","80fb4386":"markdown","aa5bba5a":"markdown","39f59e69":"markdown","dd98d41a":"markdown","dd322ccb":"markdown","57fc9624":"markdown"},"source":{"aac66839":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt","a3a78579":"df = pd.read_csv(\"\/kaggle\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv\")","2ac2d1a5":"df.head()","d706930d":"df.isna().sum()","a35ae8c1":"df.info()","ea043325":"df.loc[488]","ecea3bad":"df[df['TotalCharges'] == \" \"]","07e92b28":"indexes = df[df['TotalCharges'] == \" \"][\"TotalCharges\"].index","f810146c":"for i in indexes:\n    df.at[i, \"TotalCharges\"] = \"0.0\"","f000f2bf":"df[\"TotalCharges\"] = df[\"TotalCharges\"].astype(float)","6edbb90a":"df.describe()","43c45ed4":"df.describe(exclude=\"number\").T","c8a2c6e6":"cat_feats = [x for x in df.columns if df[x].dtype == \"object\" and x != \"customerID\"]\nnum_feats = [x for x in df.columns if df[x].dtype != \"object\"]","ee748818":"cat_feats","a22400cf":"sns.countplot(x=df[\"Churn\"])","9955a79f":"fig = plt.figure(figsize=(18, 30))\n\nfor i, col in enumerate(cat_feats):\n    plt.subplot(10, 3, i+1)\n    sns.countplot(x=df[col])\n    plt.tight_layout()\nfig.show()","3879304e":"fig = plt.figure(figsize=(15, 40))\n\nfor i, col in enumerate(num_feats):\n    plt.subplot(10, 2, i+1)\n    sns.boxplot(x=\"Churn\", y=col, data=df)\n    plt.tight_layout()\nfig.show()","e4619da1":"plt.figure(figsize=(15, 6))\nsns.boxplot(data=df, x=\"Contract\", y=\"TotalCharges\", hue=\"Churn\")\nplt.legend(loc=(1.1, 0.5));","551c4d2e":"df[\"Churn\"] = df[\"Churn\"].apply(lambda x: 0 if x==\"No\" else 1)","bd85156f":"num_feats.append(\"Churn\")","83b7750a":"sns.heatmap(df[num_feats].corr(), annot=True)","2e294727":"cat_feats.remove(\"Churn\")","6a2cc8da":"df[num_feats]","c804b199":"dummies_df = pd.get_dummies(df[cat_feats], drop_first=True)\nnew_df = pd.concat([dummies_df, df[num_feats]], axis=1)\nnew_df.head()","51b74dd5":"new_df = new_df.sample(frac=1).reset_index(drop=True)","0b3de51e":"df[\"tenure\"].unique()","3ebe0578":"plt.figure(figsize=(14,5))\nsns.histplot(data=df[\"tenure\"], bins=60);","830b6dde":"sns.displot(data=df, x=\"tenure\", bins=70, col=\"Contract\", row=\"Churn\")","6d702120":"plt.figure(figsize=(10, 4), dpi=200)\nsns.scatterplot(x=df[\"MonthlyCharges\"], y=df[\"TotalCharges\"], hue=df[\"Churn\"], alpha=0.5,\n                linewidth=0.3, palette=\"Dark2\");","1aac412b":"df.groupby([\"Churn\", \"tenure\"]).count().transpose()[0]","ec09c71f":"yes_churn = df.groupby([\"Churn\", \"tenure\"]).count().transpose()[1]\nno_churn = df.groupby([\"Churn\", \"tenure\"]).count().transpose()[0]","c9a8aba8":"churn_rate = 100 * yes_churn \/ (no_churn + yes_churn)\nchurn_rate.head()","12ff9a14":"plt.figure(figsize=(10,4))\nchurn_rate.transpose()[\"customerID\"].plot()\nplt.ylabel(\"Churn percentage\");","38b8c673":"def cohort(tenure):\n    if tenure < 13:\n        return \"0-12 Months\"\n    elif tenure < 25:\n        return \"12-24 Months\"\n    elif tenure < 49:\n        return \"24-48 Months\"\n    else:\n        return \"Over 48 Months\"","fa92edb1":"df[\"tenure_cohort\"] = df[\"tenure\"].apply(cohort)","a6787fd6":"df[[\"tenure\", \"tenure_cohort\"]]","29b5fd3f":"plt.figure(figsize=(10, 4), dpi=200)\nsns.scatterplot(x=df[\"MonthlyCharges\"], y=df[\"TotalCharges\"], hue=df[\"tenure_cohort\"], alpha=0.5,\n                linewidth=0.3, palette=\"Dark2\");","9bde646b":"plt.figure(figsize=(10,4))\nsns.countplot(data=df, x='tenure_cohort',hue=\"Churn\", palette=\"Dark2\");","97f932ba":"sns.catplot(data=df, x=\"tenure_cohort\", hue=\"Churn\", kind=\"count\",\n            col=\"Contract\");","502c9076":"new_df.head()","d52adef0":"from sklearn.metrics import roc_auc_score, accuracy_score, classification_report, confusion_matrix","aedd8e09":"from sklearn.model_selection import StratifiedKFold\n\nnew_df[\"kfold\"] = -1\n\nskf = StratifiedKFold(n_splits=5)\n\nfor fold, (train_idx, valid_idx) in enumerate(skf.split(new_df, new_df[\"Churn\"])):\n    new_df.loc[valid_idx, \"kfold\"] = fold","0f9166b2":"def run_training(df, algo, fold):\n    \n    train_df = df[df.kfold != fold].reset_index(drop=True)\n    valid_df = df[df.kfold == fold].reset_index(drop=True)\n    \n    xtrain = train_df.drop([\"Churn\", \"kfold\"], axis=1)\n    xvalid = valid_df.drop([\"Churn\", \"kfold\"], axis=1)\n\n    ytrain = train_df.Churn.values\n    yvalid = valid_df.Churn.values\n    \n    model = algo\n    model.fit(xtrain, ytrain)\n    preds = model.predict(xvalid)\n    \n    fold_acc = accuracy_score(yvalid, preds)\n    print(f\"fold={fold}, acc={fold_acc}\")\n    \n    return fold_acc, model, preds","41934c16":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import plot_confusion_matrix","e757e05e":"y = new_df[\"Churn\"].values","980f8296":"acc = []\nall_preds = []\nfor f in range(5):\n    dt = DecisionTreeClassifier()\n    fold_acc, dt, preds = run_training(new_df, dt, f)\n    acc.append(fold_acc)\n    all_preds.append(preds)\n\nprint(f\"Mean Acc={np.mean(acc)}\")\n\nall_pred = np.hstack(all_preds)\nprint(confusion_matrix(y, all_pred))\nprint(classification_report(y, all_pred))","5a774cc6":"feat_imp = pd.DataFrame(dt.feature_importances_, index=new_df.drop([\"Churn\", \"kfold\"], axis=1).columns, columns=[\"Feat_Imp\"])\nfeat_imp = feat_imp[feat_imp[\"Feat_Imp\"] > 0].sort_values(by=[\"Feat_Imp\"])\nfeat_imp.style.background_gradient(cmap=\"coolwarm\")","f9992a28":"plt.figure(figsize=(14, 5), dpi=150)\nsns.barplot(data=feat_imp, x=feat_imp.index, y=\"Feat_Imp\", palette=\"coolwarm\")\nplt.xticks(rotation=90);","3f7be543":"from sklearn.ensemble import RandomForestClassifier\n\nacc = []\nall_preds = []\nfor f in range(5):\n    rfc = RandomForestClassifier(n_estimators=200)\n    fold_acc, dt, preds = run_training(new_df, rfc, f)\n    acc.append(fold_acc)\n    all_preds.append(preds)\n\nprint(f\"Mean Acc={np.mean(acc)}\")\n\nall_pred = np.hstack(all_preds)\nprint(confusion_matrix(y, all_pred))\nprint(classification_report(y, all_pred))","dfa6b885":"from sklearn.ensemble import AdaBoostClassifier, GradientBoostingClassifier","0bc9cee5":"acc = []\nall_preds = []\nfor f in range(5):\n    ada_model = AdaBoostClassifier(n_estimators=200)\n    fold_acc, dt, preds = run_training(new_df, ada_model, f)\n    acc.append(fold_acc)\n    all_preds.append(preds)\n\nprint(f\"Mean Acc={np.mean(acc)}\")\n\nall_pred = np.hstack(all_preds)\nprint(confusion_matrix(y, all_pred))\nprint(classification_report(y, all_pred))","0403cb30":"acc = []\nall_preds = []\nfor f in range(5):\n    gbc_model = GradientBoostingClassifier(n_estimators=200)\n    fold_acc, dt, preds = run_training(new_df, gbc_model, f)\n    acc.append(fold_acc)\n    all_preds.append(preds)\n\nprint(f\"Mean Acc={np.mean(acc)}\")\n\nall_pred = np.hstack(all_preds)\nprint(confusion_matrix(y, all_pred))\nprint(classification_report(y, all_pred))","f364bf20":"from xgboost import XGBClassifier\n\nacc = []\nall_preds = []\nfor f in range(5):\n    xgb_model = XGBClassifier(use_label_encoder=False)\n    fold_acc, dt, preds = run_training(new_df, xgb_model, f)\n    acc.append(fold_acc)\n    all_preds.append(preds)\n\nprint(f\"Mean Acc={np.mean(acc)}\")\n\nall_pred = np.hstack(all_preds)\nprint(confusion_matrix(y, all_pred))\nprint(classification_report(y, all_pred))","bdd77d5a":"from sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.preprocessing import StandardScaler","31a38fc1":"new_df","f5c0c7ce":"def run_training2(df, algo, fold):\n    \n    train_df = df[df.kfold != fold].reset_index(drop=True)\n    valid_df = df[df.kfold == fold].reset_index(drop=True)\n    \n    xtrain = train_df.drop([\"Churn\", \"kfold\"], axis=1)\n    xvalid = valid_df.drop([\"Churn\", \"kfold\"], axis=1)\n    \n    scaler = StandardScaler()\n    x_train = scaler.fit_transform(xtrain)\n    xvalid = scaler.transform(xvalid)\n\n    ytrain = train_df.Churn.values\n    yvalid = valid_df.Churn.values\n    \n    model = algo\n    model.fit(xtrain, ytrain)\n    preds = model.predict(xvalid)\n    \n    fold_acc = accuracy_score(yvalid, preds)\n    print(f\"fold={fold}, acc={fold_acc}\")\n    \n    return fold_acc, model, preds","860310c9":"acc = []\nall_preds = []\nfor f in range(5):\n    lrcv_model = LogisticRegressionCV(max_iter=100000)\n    fold_acc, lr, preds = run_training2(new_df, lrcv_model, f)\n    acc.append(fold_acc)\n    all_preds.append(preds)\n\nprint(f\"Mean Acc={np.mean(acc)}\")\n\nall_pred = np.hstack(all_preds)\nprint(confusion_matrix(y, all_pred))\nprint(classification_report(y, all_pred))","4310ee22":"from sklearn.svm import SVC","c708a475":"acc = []\nall_preds = []\nfor f in range(5):\n    svc_model = SVC(C=1000)\n    fold_acc, svc, preds = run_training(new_df, svc_model, f)\n    acc.append(fold_acc)\n    all_preds.append(preds)\n\nprint(f\"Mean Acc={np.mean(acc)}\")\n\nall_pred = np.hstack(all_preds)\nprint(confusion_matrix(y, all_pred))\nprint(classification_report(y, all_pred))","78fc966e":"from sklearn.neighbors import KNeighborsClassifier","d6789cdc":"acc = []\nall_preds = []\nfor f in range(5):\n    knn_model = KNeighborsClassifier(n_neighbors=10)\n    fold_acc, svc, preds = run_training(new_df, knn_model, f)\n    acc.append(fold_acc)\n    all_preds.append(preds)\n\nprint(f\"Mean Acc={np.mean(acc)}\")\n\nall_pred = np.hstack(all_preds)\nprint(confusion_matrix(y, all_pred))\nprint(classification_report(y, all_pred))","56973f19":"## Churn Analysis","633e40cf":"**GradientBoosting**","acdbf80d":"**KNeighborsClassifer**","88b598f1":"**AdaBoost**","66388be4":"**SupportVectorClassifier**","3ce39495":"**LogisticRegression**","80fb4386":"**XGBoost**","aa5bba5a":"### Creating cohorts based on tenure","39f59e69":"## Creating a model","dd98d41a":"**Random Forest**","dd322ccb":"![image.png](attachment:image.png)","57fc9624":"### Broader Cohort Groups\n\n- '0-12 Months'\n- '12-24 Months'\n- '24-48 Months'\n- 'Over 48 Months'"}}