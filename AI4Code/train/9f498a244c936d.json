{"cell_type":{"e484c09e":"code","f1c3c560":"code","e4b86657":"code","266ab893":"code","ac1f0929":"code","79de4d8f":"code","a08f2092":"code","5a632b57":"code","4c396f2c":"code","d8a3028d":"code","59c74030":"code","e77a1cd5":"code","59f9f7d1":"code","58b07a12":"code","cd8aee6e":"code","28be15f1":"code","74af8331":"code","496bb523":"code","f41b33bf":"code","3d94e079":"code","ded3dcee":"markdown","1d3d2c8a":"markdown","8058b022":"markdown","95f75bf0":"markdown","3d3d508c":"markdown","f944964d":"markdown","5745a9e9":"markdown","7228ac5c":"markdown","a4feb17f":"markdown","8ae1dd69":"markdown"},"source":{"e484c09e":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f1c3c560":"train = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_train.csv')\ntest = pd.read_csv('..\/input\/sign-language-mnist\/sign_mnist_test.csv')\ntrain.head()","e4b86657":"train.shape","266ab893":"from IPython.display import Image\nImage(\"..\/input\/sign-language-mnist\/amer_sign2.png\")","ac1f0929":"labels = train['label'].values\nunique_val = np.array(labels)\nnp.unique(unique_val)","79de4d8f":"plt.figure(figsize = (18,8))\nsns.countplot(x =labels)","a08f2092":"from sklearn.preprocessing import LabelBinarizer\nlabel_binrizer = LabelBinarizer()\nlabels = label_binrizer.fit_transform(labels)\nlabels","5a632b57":"train.drop('label', axis = 1, inplace = True)\nimages = train.values","4c396f2c":"plt.style.use('grayscale')\nfig, axs = plt.subplots(1, 5, figsize=(15, 4), sharey=True)\nfor i in range(5): \n        axs[i].imshow(images[i].reshape(28,28))\nfig.suptitle('Grayscale images')","d8a3028d":"images =  images\/255","59c74030":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(images, labels, test_size = 0.3, stratify = labels, random_state = 7)","e77a1cd5":"x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)\nx_test = x_test.reshape(x_test.shape[0], 28, 28, 1)","59f9f7d1":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout","58b07a12":"num_classes = 24\nbatch_size = 125\nepochs = 50","cd8aee6e":"# CNN MODEL\nmodel = Sequential()\nmodel.add(Conv2D(64, kernel_size=(4,4), activation = 'relu', input_shape=(28, 28 ,1), padding='same' ))\nmodel.add(Dropout(0.4))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(Conv2D(64, kernel_size = (4, 4), activation = 'relu', padding='same' ))\nmodel.add(Dropout(0.4))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(Conv2D(64, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(Dropout(0.4))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\n\nmodel.add(Flatten())\nmodel.add(Dense(128, activation = 'relu'))\nmodel.add(Dense(num_classes, activation = 'softmax'))\nmodel.compile(loss = keras.losses.categorical_crossentropy, optimizer='nadam',\n              metrics=['accuracy'])","28be15f1":"from keras.preprocessing.image import ImageDataGenerator\ntrain_datagen = ImageDataGenerator(shear_range = 0.25,\n                                   zoom_range = 0.15,\n                                   rotation_range = 15,\n                                   brightness_range = [0.15, 1.15],\n                                   width_shift_range = [-2,-1, 0, +1, +2],\n                                   height_shift_range = [ -1, 0, +1],\n                                   fill_mode = 'reflect')\ntest_datagen = ImageDataGenerator()","74af8331":"history = model.fit(x_train, y_train, validation_data = (x_test, y_test), epochs=epochs, batch_size=batch_size)","496bb523":"plt.style.use('ggplot')\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.ylim(0.80, 1.05)\nplt.title(\"Accuracy\")\nplt.xlabel('epoch')\nplt.ylabel('accuracy')\nplt.legend(['train','test'])\nplt.show()","f41b33bf":"test_labels = test['label']\ntest.drop('label', axis = 1, inplace = True)\ntest_images = test.values\/255\ntest_images = np.array([np.reshape(i, (28, 28)) for i in test_images])\ntest_images = np.array([i.flatten() for i in test_images])\ntest_labels = label_binrizer.fit_transform(test_labels)\ntest_images = test_images.reshape(test_images.shape[0], 28, 28, 1)\ntest_images.shape","3d94e079":"# predictions\ny_pred = model.predict(test_images)\nfrom sklearn.metrics import accuracy_score\ny_pred = y_pred.round()\naccuracy_score(test_labels, y_pred)","ded3dcee":"## Splitting the data into train and test data\n\nThe data is split evenly based on the lables using stratify into training and testing data. 70% of the data is used for training while the remaining 20% is used for testing.","1d3d2c8a":"There are total of 24 different classes. We will be using batch size of 125. The neural network will run 50 epochs before stopping.","8058b022":"Final Accuracy generated from the model","95f75bf0":"## Loading the data","3d3d508c":"We are building a three layered CNN network each having 64 units, activation function as ReLU, zero padding on all sides, followed by a dropout layer and maxpooling layer. A final softmax activation layer is used for prediction.","f944964d":"## Neural Network Model Details","5745a9e9":"To generalize the model to a higher degree for more robust predictions, we will be using ImageDataGenerator having different settings ","7228ac5c":"## Data Processing","a4feb17f":"## Results","8ae1dd69":"## Data Exploration"}}