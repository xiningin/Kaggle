{"cell_type":{"aad2f325":"code","8e256c97":"code","ffde79e4":"code","6a49daab":"code","102a3b04":"code","8c670ce2":"code","eafa1201":"code","e3c93a63":"code","b74f6791":"code","6be8bf5d":"code","67452da5":"code","a7987fed":"code","2351d1cd":"code","e5823cf5":"code","c2d6c0c0":"code","ee85a7bf":"code","394de449":"code","e3c989bd":"code","ed8874ec":"code","05461a6f":"code","0d21ba19":"code","be0ebd30":"code","33ece3a7":"code","911d1874":"code","9e38c87d":"code","418a7497":"code","ec4335e0":"code","bcc9d121":"code","f7a9636c":"code","c92baf5a":"code","bcf008fc":"code","4a90e4a0":"code","255f7125":"code","88f48732":"code","4eebbbf4":"code","6fe720ec":"code","398fcb0e":"code","3a7a9225":"code","443d5f12":"code","b502e75b":"code","4b3b261b":"code","c7dbecd9":"code","7a1fdd0e":"markdown","6ee014fe":"markdown","f527305a":"markdown","0c844539":"markdown","134b999d":"markdown","1fc6d2be":"markdown","fb903cc1":"markdown","45eb61c2":"markdown","bfd18276":"markdown","b71fe3bf":"markdown","73f3ef4b":"markdown","88533c95":"markdown","5d560cad":"markdown","fe2019da":"markdown","a8aa5234":"markdown","52610740":"markdown"},"source":{"aad2f325":"from IPython.core.display import display, HTML\ndisplay(HTML(\"<style>.container { width:100% !important; }<\/style>\"))","8e256c97":"import os\nfrom pylab import *\nimport seaborn as sns\nimport pandas as pd\nfrom collections import Counter","ffde79e4":"sns.set()","6a49daab":"df = pd.read_csv(\"..\/input\/creditcardfraud\/creditcard.csv\")\ndf","102a3b04":"df.info()","8c670ce2":"df.columns","eafa1201":"plt.figure(figsize=(20, 20))\nc = 1\nfor col in list(df.columns[0:-1]):\n    plt.subplot(6, 5, c)\n    plt.boxplot(df[col])\n    plt.legend([col])\n    c+=1\n    ","e3c93a63":"sns.distplot(df.Time);","b74f6791":"sns.boxenplot(y=df.Amount)","6be8bf5d":"sns.countplot(x=\"Class\", data=df)","67452da5":"counter = Counter(df[\"Class\"])\n\nprint(f\"\"\"\n# NotFraud: {counter[0]}\n# Fraud: {counter[1]}\n\n# ratio: {counter[1]\/counter[0]}\n\"\"\")","a7987fed":"corr = df.corr()\ncorr.style.background_gradient(cmap='coolwarm').set_precision(2)","2351d1cd":"sns.pairplot(data=df, x_vars=[\"V17\", \"V20\"], y_vars=['Amount']);","e5823cf5":"sns.pairplot(data=df, x_vars=[\"V2\", \"V5\"], y_vars=['Amount']);","c2d6c0c0":"sns.pairplot(data=df, x_vars=[\"V3\"], y_vars=['Time']);","ee85a7bf":"from sklearn.model_selection import train_test_split","394de449":"df_X, df_y = df[list(df.columns[:-1])], df[\"Class\"]\n\nX_train, X_test, y_train, y_test = train_test_split(df_X, df_y, test_size=0.2, random_state=3)","e3c989bd":"# train data ratio of n_frad \/ n_not_fraud\ncounter = Counter(y_train)\nprint(f\"train data ratio of n_frad \/ n_not_fraud: {counter[1]\/counter[0]}\")","ed8874ec":"# test data ratio of n_frad \/ n_not_fraud\ncounter = Counter(y_test)\nprint(f\"test data: {counter}\", end=\"\\n\\n\")\nprint(f\"test data ratio of n_frad \/ n_not_fraud: {counter[1]\/counter[0]}\")","05461a6f":"from imblearn.over_sampling import SMOTE","0d21ba19":"X_samp, y_samp = SMOTE(random_state=1).fit_sample(X_train, y_train)","be0ebd30":"print(f\"\"\"\nX_samp.shape: {X_samp.shape}\ny_samp.shape: {y_samp.shape}\n\"\"\")","33ece3a7":"counter = Counter(y_samp)\n\nprint(f\"\"\"\n* After SMOTE\n\n# NotFraud: {counter[0]}\n# Fraud: {counter[1]}\n\n-> Now it's balanced!\n\"\"\")","911d1874":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report","9e38c87d":"random_forest_clf = RandomForestClassifier(n_estimators=100,n_jobs=-1)","418a7497":"random_forest_clf.fit(X_samp, y_samp)","ec4335e0":"import tensorflow as tf\nfrom tensorflow.keras.layers import Dense, BatchNormalization\nfrom sklearn.preprocessing import StandardScaler","bcc9d121":"# input data scaling for training stability\n\nscalerX = StandardScaler()\nsc_X_samp = scalerX.fit_transform(X_samp)","f7a9636c":"tf.keras.backend.clear_session()","c92baf5a":"input_layer = tf.keras.Input(shape=(30,))\n\nhl = Dense(64, activation=\"relu\", kernel_initializer=\"he_normal\")(input_layer)\nhl = BatchNormalization()(hl)\n\nhl = Dense(64, activation=\"relu\", kernel_initializer=\"he_normal\")(hl)\nhl = BatchNormalization()(hl)\n\nhl = Dense(64, activation=\"relu\", kernel_initializer=\"he_normal\")(hl)\nhl = BatchNormalization()(hl)\n\nhl = Dense(64, activation=\"relu\", kernel_initializer=\"he_normal\")(hl)\nhl = BatchNormalization()(hl)\n\noutput_layer = Dense(1, activation=\"sigmoid\")(hl)\n\nmodel = tf.keras.Model(inputs=[input_layer], outputs=[output_layer])","bcf008fc":"model.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", \n              metrics=[tf.keras.metrics.Precision(name='precision'), tf.keras.metrics.Recall(name='recall')])","4a90e4a0":"model.summary()","255f7125":"hist = model.fit(sc_X_samp, y_samp, batch_size=2**14, epochs=20, validation_split=0.1)","88f48732":"# training result plot\n\nplt.plot(hist.history[\"loss\"], label=\"loss\")\nplt.legend();","4eebbbf4":"# training result plot\n\nplt.plot(hist.history[\"precision\"], label=\"precision\")\nplt.plot(hist.history[\"recall\"], label=\"recall\")\nplt.plot(hist.history[\"val_precision\"], label=\"val_precision\")\nplt.plot(hist.history[\"val_recall\"], label=\"val_recall\")\nplt.legend();","6fe720ec":"from sklearn.metrics import classification_report, confusion_matrix","398fcb0e":"# on training dataset\n\ny_pred = random_forest_clf.predict(X_samp)\nprint(classification_report(y_samp, y_pred))","3a7a9225":"# on test dataset\n\ny_pred = random_forest_clf.predict(X_test)\nprint(classification_report(y_test, y_pred))","443d5f12":"fi = pd.DataFrame()\n\nfi['features'] = list(X_samp.columns)\nfi['values'] = random_forest_clf.feature_importances_\n\nfi = fi.sort_values(by=\"values\", ascending=False);\n\nsns.catplot(x=\"features\", y=\"values\", data=fi, kind=\"bar\", \n            aspect=4, height=4);","b502e75b":"# on test dataset\n\ny_pred = model.predict(scalerX.transform(X_test))","4b3b261b":"print(classification_report(y_test, np.round(y_test)))","c7dbecd9":"confusion_matrix(y_test, np.round(y_test), labels=[0, 1])","7a1fdd0e":"## Check data distribution","6ee014fe":"There's a huge gap between a number of NOT fraud and fraud data <br>\n-> Imbalanced Dataset","f527305a":"## Split data (for training & testing)","0c844539":"## Oversampling (to fix the imbalanced data)","134b999d":"Confirmed that training dataset and test dataset are proportionally split with respect to 'n_frad \/ n_not_fraud'","1fc6d2be":"## Test","fb903cc1":"From the above graph, <br>\nthe most influential variables for the detection are: V14, V10, V12, V4, ... (in order)","45eb61c2":"<b> Neural Network","bfd18276":"<b>Random Forest","b71fe3bf":"## Analysis Using MA models","73f3ef4b":"<b>Neural Network","88533c95":"<b> Random Forest","5d560cad":"<b> correlation matrix","fe2019da":"From the correlation matrix: <br>\n- Amount has a positive-linear tendency with V17, V20\n- Amount has a negative-linear tendency with V2, V5\n- Time has a negative-linear tendency with V3","a8aa5234":"<b>\nThe feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-senstive learning.<br>\nFeature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.\n<\/b>","52610740":"## Find a linear relationship"}}