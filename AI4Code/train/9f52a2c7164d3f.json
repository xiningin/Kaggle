{"cell_type":{"12d1b02c":"code","7dbacfb7":"code","4e6689df":"code","cf739278":"code","f7a131b7":"code","dd887a34":"code","2fc276fe":"code","05e5edd3":"code","4a009fc6":"code","fbabf1ef":"code","254dd885":"code","b16949fb":"code","980b3103":"code","076bf5a5":"code","5e46328c":"code","b2e59c56":"code","8bf9210e":"code","f3bddebb":"code","e4c50f39":"code","95db913b":"code","f1d21171":"code","3d6ee2fa":"code","7a37b12d":"code","6a583333":"markdown","5df2e8b7":"markdown","e99921e5":"markdown"},"source":{"12d1b02c":"# Source libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport matplotlib\nimport warnings\n\nimport statsmodels.api as sm\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nfrom statsmodels.tsa.holtwinters import ExponentialSmoothing\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error, mean_absolute_percentage_error\n\nwarnings.filterwarnings('ignore')\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = 15, 7","7dbacfb7":"# Load raw data\ndf_raw = pd.read_csv(\"\/kaggle\/input\/time-series-datasets\/monthly-beer-production-in-austr.csv\", \n                   parse_dates=['Month'], index_col='Month')\ndf_raw.columns = ['Production']","4e6689df":"# Basic prediction settings\nseasonal_period = 12     # what is the length of seasonal cycle\ntuning_test_period_years = 3  # number of months for parameter tuning\ntuning_test_period_months = 12 * tuning_test_period_years # number of months for parameter tuning\n\nuse_data_till_year = 1969\ntrain_data_till_year = use_data_till_year - tuning_test_period_years","cf739278":"# change type from number to string \nuse_data_till_year = str(use_data_till_year)\ntrain_data_till_year = str(train_data_till_year)\n\n# Select only data till specified year (including)\ndf_till_1969 = df_raw.loc[df_raw.index < use_data_till_year]\n\n# Test-train data split\ndf_train = df_till_1969[df_till_1969.index < train_data_till_year]\ndf_test = df_till_1969[df_till_1969.index >= train_data_till_year]","f7a131b7":"# Train-test split plot\nplt.plot(df_train)\nplt.plot(df_test)","dd887a34":"# Grid search parameter tuning - 1st iteration - broad search\n\nsmoothing_levels = [0.3, 0.5, 0.7, 0.9]\nsmoothing_trends = [0.01, 0.1, 0.3]\nsmoothing_seasonal = [0.01, 0.1, 0.3, 0.5, 0.7, 0.9]\n\ncomponent_type = ['add', 'mul']\ndampening = [0.95, 0.98, 0.99, 1]\n\ndf_tuning = pd.DataFrame(columns=['level', 'trend', 'seasonal', 'component', 'dampening', 'RMSE'])\n\nfor i in smoothing_levels:\n    for j in smoothing_trends:\n        for k in smoothing_seasonal:\n            for l in component_type:\n                for m in dampening:\n            \n                    tmp_model = (ExponentialSmoothing(df_train,\n                                                       trend=l, \n                                                       seasonal=l,\n                                                       seasonal_periods=seasonal_period,\n                                                       damped_trend = True)\n                                   .fit(smoothing_level=i,\n                                       smoothing_trend=j,\n                                       smoothing_seasonal=k,\n                                       damping_trend = m))\n\n                    tmp_forecast = tmp_model.forecast(tuning_test_period_months)\n\n                    df_tuning = df_tuning.append({'level': i, 'trend': j, 'seasonal': k, 'component': l, 'dampening': m, \n                                                  'RMSE': np.sqrt(mean_squared_error(df_test, tmp_forecast))}, \n                                                 ignore_index=True)    ","2fc276fe":"df_tuning.sort_values(by='RMSE').head(20)","05e5edd3":"# Grid search parameter tuning - 2nd iteration - finer view\n\nsmoothing_levels = [0.3, 0.5, 0.7, 0.9]\nsmoothing_trends = [0.01, 0.05, 0.1, 0.2, 0.3]\nsmoothing_seasonal = [0.01, 0.03, 0.05, 0.07, 0.1, 0.2, 0.3, 0.4]\ncomponent_type = ['mul']\ndampening = [0.95, 0.96, 0.97, 0.98, 0.99, 1]\n\ndf_tuning2 = pd.DataFrame(columns=['level', 'trend', 'seasonal', 'component', 'dampening', 'RMSE'])\n\nfor i in smoothing_levels:\n    for j in smoothing_trends:\n        for k in smoothing_seasonal:\n            for l in component_type:\n                for m in dampening:\n            \n                    tmp_model = (ExponentialSmoothing(df_train,\n                                                       trend=l, \n                                                       seasonal=l,\n                                                       seasonal_periods=seasonal_period,\n                                                       damped_trend = True)\n                                   .fit(smoothing_level=i,\n                                       smoothing_trend=j,\n                                       smoothing_seasonal=k,\n                                       damping_trend = m))\n\n                    tmp_forecast = tmp_model.forecast(tuning_test_period_months)\n\n                    df_tuning2 = df_tuning2.append({'level': i, 'trend': j, 'seasonal': k, 'component': l, 'dampening': m, \n                                                  'RMSE': np.sqrt(mean_squared_error(df_test, tmp_forecast))}, \n                                                 ignore_index=True) ","4a009fc6":"df_tuning2.sort_values(by='RMSE').head(20)","fbabf1ef":"prediction_horizon = 5 * 12  # Predict 5 years\n\nfinal_model = (ExponentialSmoothing(df_till_1969,\n                                   trend='mul',\n                                   seasonal='mul',\n                                   seasonal_periods=seasonal_period,\n                                   damped_trend = True)\n               .fit(smoothing_level=0.9,\n                   smoothing_trend=0.05,\n                   smoothing_seasonal=0.1,\n                   damping_trend = 0.99))\n\n","254dd885":"# Final prediction for 5 years\nforecast_1 = final_model.forecast(5 * 12)\n\n# Final prediction for 20 years\nforecast_2 = final_model.forecast(20 * 12)","b16949fb":"# Plot 5 years forecast\nforecast_1.plot()","980b3103":"# Plot 20 years forecast\nforecast_2.plot()","076bf5a5":"# full time series\ndf_raw.plot(figsize=(15, 7))\nforecast_1.plot()\nplt.title('Beer Production - 5 year forecast')\nplt.ylabel('megalitres')\nplt.show()","5e46328c":"# full time series\ndf_raw.plot(figsize=(15, 7))\nforecast_2.plot()\nplt.title('Beer Production - 20 year forecast')\nplt.ylabel('megalitres')\nplt.show()","b2e59c56":"forecast_1 = forecast_1.to_frame()\nforecast_1.columns = ['prediction']\n\nforecast_2 = forecast_2.to_frame()\nforecast_2.columns = ['prediction']","8bf9210e":"forecast_1_w_actuals = forecast_1.join(df_raw)\nforecast_2_w_actuals = forecast_2.join(df_raw)","f3bddebb":"forecast_2_w_actuals","e4c50f39":"# Forecast 1 - Final Accuracy - Error measures \nnp.sqrt(mean_squared_error(forecast_1_w_actuals.Production, forecast_1_w_actuals.prediction))","95db913b":"# Forecast 1 - Final Accuracy - Error measures \nnp.sqrt(mean_squared_error(forecast_2_w_actuals.Production, forecast_2_w_actuals.prediction))","f1d21171":"# MAPE computation, just copied from here: https:\/\/stackoverflow.com\/questions\/47648133\/mape-calculation-in-python\ndef mean_absolute_percentage_error(y_true, y_pred): \n    y_true, y_pred = np.array(y_true), np.array(y_pred)\n    return np.mean(np.abs((y_true - y_pred) \/ y_true)) * 100","3d6ee2fa":"mean_absolute_percentage_error(forecast_1_w_actuals.Production, forecast_1_w_actuals.prediction)","7a37b12d":"mean_absolute_percentage_error(forecast_2_w_actuals.Production, forecast_2_w_actuals.prediction)","6a583333":"# Importing Data\n- Dataset: Australian beer production on 1956 - 1995","5df2e8b7":"## Fast-forward into the \"future\"","e99921e5":"### Did anyone got a better RMSE than\n\n 8.21  for forecast 1 or\n28.53  for forecast 2 ?\n"}}