{"cell_type":{"bb5f51ff":"code","b3442e5a":"code","8c6d4f5b":"code","35d56369":"code","c03605f7":"code","fbbe5c30":"code","89d68a23":"code","6ebd79bf":"code","fbf42b5d":"code","a009c55b":"code","845d5adf":"code","2e5a6ace":"code","63289a90":"code","47bdc0a1":"code","3e13ddb1":"code","f931ab30":"code","610d38b8":"code","346cbe95":"code","0dc4d979":"code","f5356ee4":"code","fa1ae991":"code","b76ff859":"code","8877f7b9":"code","a38879c2":"code","f0742cbb":"code","eb629307":"code","d2409ed0":"code","4358c92c":"code","cf85fde3":"code","b4ffeecc":"code","6cf30e32":"code","9f866d8d":"code","f62dca7a":"code","037140a6":"code","4296aa40":"code","366c2635":"code","0032bf36":"code","b659e3c2":"code","837271ba":"code","04e4d961":"code","745d5e45":"code","74b8f723":"markdown","217289d5":"markdown","98865152":"markdown","858e933b":"markdown","b153dc68":"markdown","d57a1448":"markdown","c4ebe8df":"markdown","32cf114b":"markdown","87160576":"markdown","1dd8050c":"markdown","14c678fd":"markdown","c411b3d9":"markdown","aee0bcac":"markdown","1c73a21f":"markdown","5750bd45":"markdown","3e88a3f0":"markdown","abcd7f2d":"markdown","f908d336":"markdown","51e2c028":"markdown","6407a513":"markdown","7e3d151b":"markdown","b5db0b4d":"markdown","9bdf7bc2":"markdown","dddde8f5":"markdown","f654eab4":"markdown","afe19a47":"markdown","618f95cc":"markdown","059d26b5":"markdown","2f6560f3":"markdown","1153f5d0":"markdown","4fea355d":"markdown","646b3251":"markdown","0c530fc6":"markdown","4d8c988a":"markdown","47e5e398":"markdown","74a5b6bb":"markdown","451d883a":"markdown"},"source":{"bb5f51ff":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.ensemble import RandomForestClassifier\nfrom collections import Counter","b3442e5a":"sns.set(style='white', context='notebook', palette='deep')","8c6d4f5b":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","35d56369":"train = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\n\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","c03605f7":"df_all =  pd.concat([train, test], axis=0).reset_index(drop=True)","fbbe5c30":"train.head()","89d68a23":"train.shape","6ebd79bf":"train.info()","fbf42b5d":"# View issing values matrix\nimport missingno as msno\n\nmsno.matrix(train)","a009c55b":"train.isnull().sum()","845d5adf":"train.describe()","2e5a6ace":"plt.figure(figsize=(15,8))\ncor=train.corr()\nsns.heatmap(cor,annot=True,cmap=\"Blues\")\nplt.show()","63289a90":"test.shape","47bdc0a1":"test.isnull().sum()","3e13ddb1":"plt.figure(figsize=(15,8))\ncor=test.corr()\nsns.heatmap(cor,annot=True,cmap=\"Blues\")\nplt.show()","f931ab30":"df_all.Fare.fillna(test.Fare.mean(), inplace=True)","610d38b8":"df_all.Embarked.value_counts()","346cbe95":"df_all.Embarked.fillna('S', inplace=True)\ndf_all.isnull().sum()","0dc4d979":"df_all_correlation = df_all.corr().abs().unstack().sort_values(kind=\"quicksort\", ascending=False).reset_index()\ndf_all_correlation.rename(columns={\"level_0\": \"col-1\", \"level_1\": \"col-2\", 0: 'Coefficient'}, inplace=True)\ndf_all_correlation[df_all_correlation['col-1'] == 'Age']","f5356ee4":"df_all.groupby(['Sex', 'Pclass'])['Age'].median()","fa1ae991":"df_all['Age'] = df_all.groupby(['Sex', 'Pclass'])['Age'].apply(lambda x: x.fillna(x.median()))","b76ff859":"df_all.drop([\"Ticket\",\"PassengerId\"],axis=1,inplace=True)","8877f7b9":"df_all.drop(\"Cabin\",axis=1,inplace=True)","a38879c2":"def age_group(age):\n    a = ''\n    if (age<=1):\n        a = 'infant'\n    elif (age<=4):\n        a = 'toddler'\n    elif (age<=14):\n        a = 'child'\n    elif (age<=19):\n        a='teenager'\n    elif (age <= 25):\n        a = 'young_adult'\n    elif (age <= 65):\n        a = 'middle_age'\n    else :\n        a = 'old'\n    \n    return a\n\ndf_all['age_group'] = df_all.Age.map(age_group)\ndf_all","f0742cbb":"df_all['Family_Size'] = df_all['SibSp'] + df_all['Parch'] + 1\ndf_all.head()","eb629307":"def familyGroup(size):\n    a = ''\n    if(size<=1):\n        a='alone'\n    elif (size<=4):\n        a='small'\n    else:\n        a='large'\n    return a\n\ndf_all['family_group'] = df_all.Family_Size.map(familyGroup)\ntrain","d2409ed0":"df_all=df_all.copy()\ndf_all['Title'] = df_all.Name.str.extract(' ([A-Za-z]+)\\.')\n\npd.crosstab(df_all['Title'], df_all['Sex'])","4358c92c":"df_all['Title'] = df_all['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Title_Other')\ndf_all['Title'] = df_all['Title'].replace('Mlle', 'Miss')\ndf_all['Title'] = df_all['Title'].replace('Ms', 'Miss')\ndf_all['Title'] = df_all['Title'].replace('Mme', 'Mrs')","cf85fde3":"df_all.drop(['Name'], axis=1,inplace=True)\npd.crosstab(df_all['Title'], df_all['Sex'])","b4ffeecc":"sns.factorplot('Pclass','Survived',order=[1,2,3], data=df_all,size=5)","6cf30e32":"df_all=df_all.copy()","9f866d8d":"pclass_dummies  = pd.get_dummies(df_all['Pclass'])\npclass_dummies.columns = ['Class_1','Class_2','Class_3']\npclass_dummies.drop(['Class_3'], axis=1, inplace=True)\n\ndf_all.drop(['Pclass'],axis=1,inplace=True)\n\ndf_all = df_all.join(pclass_dummies)\ndf_all","f62dca7a":"df_all=df_all.copy()\n\nsns.factorplot('Embarked','Survived', data=df_all,size=4,aspect=3)\n\nfig, (axis1,axis2,axis3) = plt.subplots(1,3,figsize=(15,5))\nsns.countplot(x='Embarked', data=df_all, ax=axis1)\nsns.countplot(x='Survived', hue=\"Embarked\", data=df_all, order=[1,0], ax=axis2)\n\n\nembark_perc = df_all[[\"Embarked\", \"Survived\"]].groupby(['Embarked'],as_index=False).mean()\nsns.barplot(x='Embarked', y='Survived', data=embark_perc,order=['S','C','Q'],ax=axis3)\n\n\n\nembark_dummies_titanic  = pd.get_dummies(df_all['Embarked'])","037140a6":"embark_dummies_titanic.drop(['S'], axis=1, inplace=True)\n\ndf_all = df_all.join(embark_dummies_titanic)\ndf_all.drop(['Embarked'], axis=1,inplace=True)","4296aa40":"df_all['Fare'] = pd.qcut(df_all['Fare'], 13)\ndf_all","366c2635":"df_all.isnull().sum()","0032bf36":"non_numeric_features_list = ['Sex', 'Fare', 'age_group', 'Title', 'family_group']\nfor feature in non_numeric_features_list:\n    df_all[feature] = LabelEncoder().fit_transform(df_all[feature])\ndf_all","b659e3c2":"# define training and testing sets\ntrain_X=df_all.copy()[:len(train)]\ntrain_Y=train_X.pop(\"Survived\")\ntest_X  = df_all.copy()[len(train):]\ntest_X.pop(\"Survived\")\n","837271ba":"train_X = StandardScaler().fit_transform(train_X)\ntest_X = StandardScaler().fit_transform(test_X)","04e4d961":"clf = RandomForestClassifier(n_estimators=100)","745d5e45":"clf = RandomForestClassifier(n_estimators=100)\n\nclf.fit(train_X, train_Y)\n\npred_Y = clf.predict(test_X)\n\nprint(clf.score(train_X, train_Y))\n\nclf.score(train_X, train_Y)\nsubmission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": pred_Y.astype(int)\n    })\nsubmission.to_csv('submission.csv', index=False)","74b8f723":"**For the ease of data pre processing and feature engineering, Join Train and Test data**","217289d5":"### **Ticket & PassengerId**\n\n**Ticket and PassengerId do not provide any usefull importnat for the prediction**","98865152":"## **Feature Engineering**","858e933b":"**S column can be droped since it contributes to low survival percentage**","b153dc68":"Above graph show that class 3 has low survival rate","d57a1448":"**Analyse Test Data**","c4ebe8df":"### **Pclass**","32cf114b":"### **Scaling with StandardScalar**","87160576":"**From above correlation table, we can see that, Age and Pclass have hgh correlation.So, we can get the median age of the Pclass to missing age.**","1dd8050c":"**Categorical features**\n1. Survived\n2. Sex\n3. Embarked\n\n**Ordinal**\n1. Pclass\n\n**Continous**\n1. Fare\n\n**Discrete**\n1. SibSp\n2. Parc\n3. Age","14c678fd":"**Shape of train data**","c411b3d9":"**Check correlation of test data**","aee0bcac":"### **Columns and short description**\n\n1. **PassengerId**: An unique index for passenger rows.\n2. **Survived**: 1 stands for survived and 0 stands for not survived (target variable)\n3. **Pclass**: Ticket classes:\n    * First class\n    * Second class\n    * Third class\n4. **Name**: Passenger's name. Name contains title like \"Mr\"\/Mrs and surname.\n5. **Sex**: Passenger's sex. It's either Male or Female.\n6. **Age**: Passenger's age.\n7. **SibSp**: Number of siblings or spouses travelling with each passenger.\n8. **Parch**: Number of parents or children travelling with each passenger.\n9. **Ticket**: Ticket number.\n10. **Fare**: Ticket price.\n11. **Cabin**: Cabin number of the passenger.\n12. **Embarked**: Port name where passenger was boarded. C = Cherbourg Q = Queenstown S = Southampton","1c73a21f":"### **Fare** \n\n**Create Bins for Fare**","5750bd45":"**Check for null value**","3e88a3f0":"# Feature Engineering task","abcd7f2d":"### **Age**","f908d336":"**Train and Test data**","51e2c028":"### **Cabin**\n\n* Cabin has 1014 missing values which is more than 70%\n* Need to drop 'Cabin'","6407a513":"### **Family Size**\n\n**Create a new feature named as \"Family_Size\" by clculating sum of no.of siblings and no.of parents**\n","7e3d151b":"### **Age**\n\n**Create a new attribute as \"Age Group\" according to below logic**","b5db0b4d":"**Importing needed libraries and packages**","9bdf7bc2":"### **Names**\n\n**Split the titles from the names**","dddde8f5":"### **Embarked**","f654eab4":"### **Embark**","afe19a47":"### **Fare**\n\n**Fill missing values of Fare column with mean of that column**","618f95cc":"## **Model Prediction**","059d26b5":"## **RandomForest Model**","2f6560f3":"**Check correlation of the data**","1153f5d0":"##  **Exploratory Analysis**\n\n**Analyse Training Data**","4fea355d":"**Introduce new dummy variables for Pclass column, & drop 3rd class as it has the lowest average of survived passengers**","646b3251":"## **Data Cleaning**\n\n### **Filling Missing values**","0c530fc6":"**Fill missing values in Embarked column with most frequent value (\"S\")**","4d8c988a":"## **Encoding** ","47e5e398":"**Count embark values**","74a5b6bb":"**Replace less common features with 'Title_Other'**","451d883a":"**Creating a new feature named as \"family_group\" according to the no.of members in the family.**"}}