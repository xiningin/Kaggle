{"cell_type":{"c87de3e8":"code","bb42f613":"code","77043944":"code","737e3a58":"code","5968faa8":"code","b73fb194":"code","3c6cb734":"code","4e4c9257":"code","feeed78d":"code","81afe760":"code","6d9c7cb7":"code","531e6628":"code","26374f3e":"code","f0da4c96":"markdown","d2f5f256":"markdown","66f263de":"markdown","29fc36f5":"markdown","b8e6753c":"markdown"},"source":{"c87de3e8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n\n# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bb42f613":"raw_data = pd.read_csv('\/kaggle\/input\/chicago-crime-for-da-train-question\/Crimes_-_2001_to_present.csv', dtype={'ID': int, 'Case Number': object,'Date': object, 'Block': object, 'IUCR': object,'Primary Type': object,'Description': object,'Location, Description':object, 'Arrest': bool,'Domestic': bool,'Beat': int,'District': float,'Ward': float,'Community Area': float,'FBI Code': object,'X Coordinate': float,'Y Coordinate': float,'Year': int,'Updated On': object,'Latitude': float, 'Longitude': float,'Location': object})","77043944":"raw_data.head()","737e3a58":"raw_data.info()","5968faa8":"raw_data = raw_data.drop(['ID', 'Case Number', 'Date', 'IUCR', 'X Coordinate', 'Y Coordinate', 'Updated On','Latitude', 'Longitude', 'Location'], axis = 1)","b73fb194":"raw_data.head()","3c6cb734":"raw_data.describe()","4e4c9257":"raw_data.describe(include=[np.object])","feeed78d":"raw_data.describe(include=[np.bool])","81afe760":"raw_data['Arrest'] = raw_data['Arrest'].map( {True: 1, False: 0} ).astype(int)\nraw_data['Domestic'] = raw_data['Domestic'].map( {True: 1, False: 0} ).astype(int)","6d9c7cb7":"raw_data.head()","531e6628":"raw_data['Primary Type'].unique()","26374f3e":"raw_data['Location Description'].unique()","f0da4c96":"Dropping columns with no bearing to crime and beat:","d2f5f256":"We need to ennumerate the data for Arrest and Domestic numerically now. We will let 0 represent False and 1 represent True","66f263de":"Primary Type is the type of crime committed...let's see what different types of crimes there are:","29fc36f5":"We must make a delineation between what is a \"relevant\" crime to use and what isn't...","b8e6753c":"Now, let's look at Location Description and ennumerate it:"}}