{"cell_type":{"6d10fd1b":"code","253dcd34":"code","184467c7":"code","fda99a11":"code","b290ddc8":"code","44a0e2f1":"code","04c6e850":"code","f0ff09bb":"code","34e66035":"code","7065c48a":"code","b5da9425":"code","381e04c4":"code","478f1def":"code","bd3adf80":"code","0085ea8f":"markdown","83219761":"markdown","258eea22":"markdown","6d77cba0":"markdown","e38a63c2":"markdown","fd66952f":"markdown","02dbaa84":"markdown","47c5b302":"markdown","bb050ec6":"markdown","b87fbf09":"markdown","e763b77a":"markdown"},"source":{"6d10fd1b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sb\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","253dcd34":"df_train = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/train.csv')\nprint('Train Data Shape: ', df_train.shape)\ndf_train.head()","184467c7":"df_test = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/test.csv')\nprint('Test Data Shape: ', df_test.shape)\ndf_test.head()","fda99a11":"class_map = pd.read_csv('\/kaggle\/input\/bengaliai-cv19\/class_map.csv')\nprint('Test Data Shape: ', class_map.shape)\nclass_map.head()","b290ddc8":"HEIGHT = 137\nWIDTH = 236\n\ndef load_npa(file):\n    df = pd.read_parquet(file)\n    return df.iloc[:, 1:].values.reshape(-1, HEIGHT, WIDTH)\n","44a0e2f1":"## loading one of the parquest file for analysis\ndummy_images = load_npa('\/kaggle\/input\/bengaliai-cv19\/train_image_data_0.parquet')\nprint(\"Shape of loaded files: \", dummy_images.shape)\nprint(\"Number of images in loaded files: \", dummy_images.shape[0])\nprint(\"Shape of first loaded image: \", dummy_images[0].shape)\nprint(\"\\n\\nFirst image looks like:\\n\\n\", dummy_images[0])","04c6e850":"## View the pixel values as image\nplt.imshow(dummy_images[0], cmap='Greys')","f0ff09bb":"f, ax = plt.subplots(5, 5, figsize=(16, 8))\nfor i in range(5):\n    for j in range(5):\n        ax[i][j].imshow(dummy_images[i*5+j], cmap='Greys')","34e66035":"df_train.head()","7065c48a":"print(\"Unique Grapheme-Root in train data: \", df_train.grapheme_root.nunique())\nprint(\"Unique Vowel-Diacritic in train data: \", df_train.vowel_diacritic.nunique())\nprint(\"Unique Consonant-Diacritic in train data: \", df_train.consonant_diacritic.nunique())\nprint(\"Unique Grapheme (Combination of three) in train data: \", df_train.grapheme.nunique())","b5da9425":"### Majority of Images per Grapheme count is below 180. Only 1 grapheme has 283 images in it.\nimages_per_grapheme = df_train.groupby('grapheme')[['image_id']].count().reset_index().reset_index()\nsb.catplot(x='index', y='image_id', data=images_per_grapheme)","381e04c4":"images_per_grapheme_root = df_train.groupby('grapheme_root')[['image_id']].count().reset_index().reset_index()\nsb.catplot(x='index', y='image_id', data=images_per_grapheme_root)\n","478f1def":"images_per_grapheme_diacritic = df_train.groupby('vowel_diacritic')[['image_id']].count().reset_index()\nsb.catplot(x='vowel_diacritic', y='image_id', data=images_per_grapheme_diacritic)","bd3adf80":"images_per_grapheme_diacritic = df_train.groupby('consonant_diacritic')[['image_id']].count().reset_index()\nsb.catplot(x='consonant_diacritic', y='image_id', data=images_per_grapheme_diacritic)","0085ea8f":"### If you find this kernel usefull, Do upvote.","83219761":"## Class-Map File","258eea22":"##### Some More images from loaded data","6d77cba0":"# Above Plots can be used to observe class imbalance at different levels","e38a63c2":"## Train Data Analysis\n### Number of Samples: 200840\n#### File Contains:\n* image_id: the foreign key for the parquet files\n* grapheme_root: the first of the three target classes\n* vowel_diacritic: the second target class\n* consonant_diacritic: the third target class\n* grapheme: the complete character. Provided for informational purposes only, you should not need to use this.","fd66952f":"## Train File","02dbaa84":"## Test File","47c5b302":"### Thanks for reading.","bb050ec6":"### Image Utils","b87fbf09":"### Must say hard to tell anything by looking at this image... Better Way to look at it","e763b77a":"# Image Data\nImage Data in in parquet files and contrain grayscale images of below mentioned dimentions. If you want to read more about this file format then try: \nhttps:\/\/acadgild.com\/blog\/parquet-file-format-hadoop\nNote that the file it self conatins values of all the 32332 pixels (137*236) in each row coresponding to a image.  \n###### Image Height = 137\n###### Image Width = 236"}}