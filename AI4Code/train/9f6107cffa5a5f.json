{"cell_type":{"9cafad6e":"code","c725d554":"code","8993a7ca":"code","f1b160ee":"code","daeef382":"code","c6656cf8":"code","e7bda46b":"code","384054ba":"code","776b04d0":"code","35889d7d":"code","2c42cf0b":"code","56f38c55":"code","17a346fb":"code","2d4ed35b":"code","f0837efa":"code","6a3e397a":"code","dc0fdd3e":"code","657f4655":"code","a6cc3bf5":"code","884b1997":"code","4327b80c":"code","4b97db08":"code","36f36d25":"code","522a26d2":"code","e5163e2b":"code","853513da":"code","3c62dfcd":"code","c53c440d":"code","397f3093":"code","488d4dd3":"code","a795fefc":"code","d51d9d60":"code","e12993b4":"code","7edd172e":"code","7d545c5f":"code","a17002b9":"markdown","81e2ea92":"markdown","8ba43e46":"markdown","198b1675":"markdown","e501687b":"markdown","adc4af7f":"markdown","6ca9a07a":"markdown","c0f1ac8b":"markdown","d78e8020":"markdown","37c58669":"markdown","1338ca10":"markdown","66e4a96f":"markdown","9af7caac":"markdown","48f9dd79":"markdown"},"source":{"9cafad6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c725d554":"data = pd.read_csv('\/kaggle\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv')\nprint(data.shape)\ndata.head()","8993a7ca":"data['quality'].unique()","f1b160ee":"data['quality'] =  data['quality'] -3","daeef382":"data['quality'].value_counts()","c6656cf8":"data['quality'] = data['quality'].replace([0,1],2)\ndata['quality'] = data['quality'].replace(5,4)","e7bda46b":"print(data['quality'].unique())\ndata['quality'] = data['quality'] - 2","384054ba":"import matplotlib.pyplot as plt\nfor col in data.columns:\n    fig = plt.figure()\n    fig.suptitle(col,fontsize = 14)\n    plt.hist(data[col].tolist())\n    plt.show()","776b04d0":"def plot_cols(data,col):\n    fig,axs = plt.subplots(3,figsize = (15,15))\n    fig.suptitle(col+\"distribution in different qualities\")\n    for i in range(3):\n        axs[i].hist(data[data['quality']==i][col].tolist())","35889d7d":"plot_cols(data,'fixed acidity')","2c42cf0b":"plot_cols(data,'volatile acidity')","56f38c55":"plot_cols(data,'citric acid')","17a346fb":"plot_cols(data,'residual sugar')","2d4ed35b":"plot_cols(data,'chlorides')","f0837efa":"plot_cols(data,'free sulfur dioxide')","6a3e397a":"plot_cols(data,'total sulfur dioxide')","dc0fdd3e":"plot_cols(data,'density')","657f4655":"plot_cols(data,'pH')","a6cc3bf5":"plot_cols(data,'sulphates')","884b1997":"plot_cols(data,'alcohol')","4327b80c":"from scipy import stats","4b97db08":"dist = getattr(stats,'norm')\nrow_list = []\nfor col in data.columns:\n    if col == 'quality':\n        continue\n    curr_dict = {}\n    curr_dict['column'] = col\n    parameter = dist.fit(data[col])\n    curr_dict['mean'] = parameter[0]\n    curr_dict['variance'] = parameter[1]\n    test_stat,p_val = stats.kstest(data[col],'norm',parameter)\n    curr_dict['test_statistics'] = test_stat\n    curr_dict['p-value'] = p_val\n    curr_dict['Is_normal'] = (curr_dict['test_statistics']<1.36)*1.0\n    row_list.append(curr_dict)\nnormal_fit_df = pd.DataFrame(row_list)","36f36d25":"normal_fit_df","522a26d2":"def value_capper(x,low_val,up_val):\n    if x<low_val:\n        return low_val\n    elif x>up_val:\n        return up_val\n    return x","e5163e2b":"normal_fit_df['sd'] = normal_fit_df['variance']**0.5\nnormal_fit_df['upper_val'] = normal_fit_df['mean'] + 1.96*normal_fit_df['sd']\nnormal_fit_df['lower_val'] = normal_fit_df['mean'] - 1.96*normal_fit_df['sd']\nfor col in data.columns:\n    if col == 'quality':\n        continue\n    data[col] = data[col].apply(\n                                lambda x : value_capper(x,\n                                normal_fit_df[normal_fit_df['column']==col]['upper_val'].tolist()[0],\n                                normal_fit_df[normal_fit_df['column']==col]['lower_val'].tolist()[0])\n                                )","853513da":"normal_fit_df","3c62dfcd":"!pip install mord","c53c440d":"from sklearn.model_selection import train_test_split\ntrain_data, test_data = train_test_split(data,test_size = 0.2,shuffle = True,stratify = data['quality'])\nX_train = train_data.drop('quality',axis = 1)\nX_test = test_data.drop('quality',axis = 1)\nY_train = train_data['quality']\nY_test = test_data['quality']\nprint(X_train.shape,Y_train.shape,X_test.shape,Y_test.shape)","397f3093":"Y_test","488d4dd3":"import mord\nfrom sklearn.metrics import classification_report as clr\nord_reg = mord.OrdinalRidge(alpha=10.0, fit_intercept=True, \n                            normalize=False, copy_X=True, \n                            max_iter=10000, tol=0.0001, solver='auto')\nord_reg.fit(X_train,Y_train)\nprint(ord_reg.score(X_train,Y_train))\nprint(ord_reg.score(X_test,Y_test))\nprint(X_train.columns)\nprint(ord_reg.coef_)\npred_test = ord_reg.predict(X_test)\npred_test = [int(f) for f in pred_test]\npred_train = ord_reg.predict(X_train)\npred_train = [int(f) for f in pred_train]\nprint(clr(Y_train,pred_train))\nprint(clr(Y_test,pred_test))","a795fefc":"pred_test = ord_reg.predict(X_test)\nprint(pred_test)","d51d9d60":"from sklearn.ensemble import RandomForestClassifier as rfc\nclassifier = rfc(n_estimators = 128,max_depth = 3,\n                 class_weight = {0:1,1:1.1,2:1.9},\n                 max_features = 'auto',oob_score = True)\nY_train = [int(f) for f in Y_train]\nY_test = [int(f) for f in Y_test]\nclassifier.fit(X_train,Y_train)\npred_train = classifier.predict(X_train)                             \nprint(classifier.oob_score_)\nprint(clr(Y_train,pred_train))\npred_test = classifier.predict(X_test)\nprint(clr(Y_test,pred_test))","e12993b4":"import numpy as np\nfrom sklearn.utils import class_weight\nclass_weights = list(class_weight.compute_class_weight('balanced',\n                                             np.unique(train_data['quality']),\n                                             train_data['quality']))\n\nw_array = np.ones(len(Y_train), dtype = 'float')\nfor i in range(len(Y_train)):\n    w_array[i] = class_weights[Y_train[i]-1]","7edd172e":"w_array","7d545c5f":"import xgboost as xgb\nxgb = xgb.XGBClassifier(n_estimators = 100,\n                        learning_rate = 0.3,\n                        verbosity = 0,\n                        #max_depth = 5,it fixes the depth on its own.\n                        #num_parallel_tree = 32, this didn't improve performance\n                        random_state = 42)\nxgb.fit(X_train,Y_train,sample_weight = w_array)\npred_train = xgb.predict(X_train)\npred_test = xgb.predict(X_test)\nprint(clr(Y_train,pred_train))\nprint(clr(Y_test,pred_test))","a17002b9":"let's just normalize the quality to 0-5 from 3-8.","81e2ea92":"Hence, final quality standards are 0,1,2. We will now analyze the features and relation with the quality variable of them to get a understanding of the data.","8ba43e46":"## <a id = 'section3'>Modeling the data<\/a>:\nIn this section we will try out different modeling and analyse the results.","198b1675":"## <a id = 'section1'>Exploratory data analysis<\/a>","e501687b":"### fixed acidity and quality relation:","adc4af7f":"## <a id = 'section2'>outlier detection<\/a>:\nWe will now find outliers on feature level by fitting probability distributions on them. ","6ca9a07a":"so each of the features are basically from normal distribution with 95% confidence. Now, we will cap the feature values at 5 and 95 percentile values respectively at bottom and top.","c0f1ac8b":"## Red wine regression:\n![red wine](https:\/\/robbreport.com\/wp-content\/uploads\/2017\/06\/wine_domred1.jpg?w=1000)\nRed wine, often a sign of luxurious life have a variety of qualities and prices based on their qualities. There have been done some research on this topic in last decade; where [statistical modeling](https:\/\/arxiv.org\/pdf\/1402.3646.pdf) and [classification algorithms](https:\/\/ieeexplore.ieee.org\/abstract\/document\/9104095) have been used and discussed.<br\/>\nIn this notebook, we will perform some EDA of the data, then perform outlier detection, feature assumption fitting and different other things; and will test regression model of wine quality using multiple regression models.<br\/>\nHere are the different sections of the notebook.<br\/>\n(1) [Exploratory data analysis and data understanding](#section1)<br\/>\n(2) [Outlier detection](#section2)<br\/>\n(3) [modeling](#section3)<br\/>\n<br\/>\nResources:<br\/>\n(2) [modeling with regression models](#section2)<br\/>\n<br\/>\n(1) [Ordinal regression using mord api](https:\/\/pythonhosted.org\/mord\/reference.html#mord.OrdinalRidge)<br\/>\n(2)[mord regression github code](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.Ridge.html)<br\/>\n(3)[sklearn ridge regression](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.Ridge.html)<br\/>","d78e8020":"so in case of random forest, after tuning also, although we reached 50% around accuracy as similar as ordinal regression; we have improved the f1-scores in this case. But still it is far from acceptable accuracy; so let's check some other models as well. We will try out the xgboost.","37c58669":"Let's analyze each feature into a bit of details to get better understanding of the feature and the predicate variable i.e. the quality.","1338ca10":"Clearly, class 0,1 and 5 are very low in number. We will merge 0,1 with 2; and merge 4 with 5.","66e4a96f":"check the quality values","9af7caac":"## Ordinal regression","48f9dd79":"The result of ordinalRidge is basically the negative of mean_squared_error from the fitted regression. The performance is very bad in the 3rd class. Also, clearly some of the features are not getting captured enough because of the linear relation. "}}