{"cell_type":{"243fa9cc":"code","766536c9":"code","0ab2219b":"code","0897ba12":"code","fc096f0b":"code","29ea3213":"code","695296de":"code","04721c13":"code","b5f4815b":"code","641aeee8":"code","46fa473e":"code","3e40cc28":"code","7dde97c9":"code","69bb1cb3":"code","77d44ba2":"code","16873330":"code","f528020f":"code","fd1cabac":"code","74c376db":"code","39f7ef5d":"code","cf58a931":"code","be9ecaa0":"code","f1648656":"code","b195ba54":"code","bad2a009":"code","0987e8ca":"code","e7a730ba":"code","4cdf924e":"code","3c5a18b4":"code","a7b079ff":"code","a5dd3ed1":"code","7581da03":"code","29a03adb":"code","3c3258cd":"code","ed1c7f3d":"code","0689f26c":"code","65424af7":"code","9f6653aa":"code","74f76f28":"code","3f823431":"code","a55c611c":"code","1f663e8e":"code","102f8aaa":"code","19c7044b":"code","9b4ece6d":"code","03416ad7":"code","e45ccc4b":"code","43a13ea5":"code","35f19808":"code","90a45781":"code","976393e0":"code","21304a73":"code","e99d60d6":"code","75f9805b":"code","aa97bdee":"code","9db2dc7d":"code","59127c6f":"code","869c5899":"code","f4fdd039":"code","3715c4fe":"code","f6301b02":"code","08a64a04":"code","fe8cfb93":"code","1627d464":"code","591c27a6":"code","9d35d986":"code","63d94047":"code","9857d062":"code","5faa9645":"code","e83fbaba":"code","71f09d6c":"code","260b0449":"code","5eac4d93":"code","bb7f221e":"code","23cbf1aa":"code","a5a690ca":"code","45d5de3b":"code","8a2cdfe6":"code","b150fa0e":"code","8711082f":"code","333d8c1b":"code","c32a814d":"code","16eea3c0":"code","a61a0ff9":"code","a5e7c03d":"code","2efa6b69":"code","8e9e83e9":"code","c122731c":"code","36f6ad29":"code","aef03495":"code","ec49f2d0":"code","50f20af8":"code","fe5ddedd":"code","0af1eacb":"code","5688d777":"code","29310715":"code","357862f4":"code","c1128d23":"code","b2fc91fa":"code","631c3cce":"code","e5a8457e":"code","d55b8ac2":"code","c5087b00":"code","5fe7af94":"code","3734f77f":"code","2b2c6a84":"code","b6d88986":"code","125287fc":"code","11a7df7b":"code","d928356d":"code","167b91f9":"code","3e0e7379":"code","4c0608c0":"code","ccda88bd":"code","46244057":"code","ddf3fa41":"code","a3d90286":"code","6c687adf":"code","bcfb8170":"code","938d7e54":"code","ac7c2f0e":"code","b37c7d54":"code","2789dfeb":"code","fb21941f":"code","86b24b4e":"code","6e677461":"code","36e4db25":"code","700e0d9c":"code","4e99f26e":"code","1f66a53a":"code","28dc070c":"code","5cd170bd":"code","99406c8a":"code","73ea4c1b":"code","605cb876":"code","40389777":"code","d9688891":"code","1a9cd627":"code","722bfafb":"code","39fea689":"code","4c6eeaa0":"code","fd12aa45":"code","a5e7f95e":"code","ab53bedc":"code","33293b2e":"code","76aa907b":"code","82628988":"code","def52c20":"code","08643fff":"code","3136eab4":"code","513c87f5":"code","9972f515":"code","14b42d45":"code","b4e2611b":"code","49970248":"code","8e31f30c":"code","7a5c2b1a":"code","60dc850e":"code","d6dcebcd":"code","b5491f63":"code","f79c7cc9":"code","e3efe9b1":"code","987100a7":"code","81e8bdea":"code","fe3d0fd7":"code","047f1bde":"code","92b96e81":"code","c09678ee":"code","6e973459":"code","52bdfd59":"code","21473435":"code","6b07d875":"code","ea5084da":"code","9355f9d5":"code","05a781e3":"code","97a023ce":"code","9e60df80":"code","cbc57d5a":"code","d62245f3":"code","0526c084":"code","005c21f2":"code","7e96e102":"code","381a8a59":"code","8f4ed650":"code","7471be09":"code","67a2a720":"markdown","df957e0e":"markdown","7152126d":"markdown","d8f114dd":"markdown","212b8b07":"markdown","78e9e12e":"markdown","c86c04b5":"markdown","a3ccd21b":"markdown","2926a132":"markdown","77b977d0":"markdown","a8506ae9":"markdown","950f40cc":"markdown","a8033f67":"markdown","7046256c":"markdown","af402d2b":"markdown","cf1bdb4b":"markdown","93b8f5ec":"markdown","54249533":"markdown","0857c2ed":"markdown","3f2d6b25":"markdown","a40e9ac0":"markdown","ed89fd9f":"markdown","c72a8de0":"markdown","ef173d82":"markdown","3f79d37d":"markdown","9420d9ce":"markdown","6ac5f64a":"markdown","2231e8b7":"markdown","de5ba071":"markdown","ecba8d2c":"markdown","8b90735d":"markdown","668a68ff":"markdown","615ebb77":"markdown","1c0bd1ad":"markdown","9f704ba9":"markdown","96272770":"markdown","5d00d98f":"markdown","8026d7d3":"markdown","a36bf21d":"markdown","ce2ee1b2":"markdown","ddb2436f":"markdown","359325ca":"markdown","76783538":"markdown","59ad8d3f":"markdown","924b596b":"markdown","96ec505b":"markdown","ca9951b7":"markdown","86af1628":"markdown","916bef86":"markdown","1f9b4283":"markdown","1e0b48c4":"markdown","1aa49972":"markdown","884e567b":"markdown","e94e64a2":"markdown","de922483":"markdown","ed94f532":"markdown","43ae3051":"markdown","ff1d96a8":"markdown","af73d250":"markdown","a009d656":"markdown","86e9c562":"markdown","626189c5":"markdown","2be2be1e":"markdown","04032126":"markdown"},"source":{"243fa9cc":"import numpy as np \nimport pandas as pd \nimport os\nimport warnings\nwarnings.filterwarnings(\"ignore\")","766536c9":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly as py\nimport plotly.graph_objs as go \nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.express as px\nimport datetime\nfrom plotly.subplots import make_subplots","0ab2219b":"import kaggle_secrets\nimport requests\nimport json","0897ba12":"altadata_io_api_key = kaggle_secrets.UserSecretsClient().get_secret(\"altadata_io_api_key\")\nproduct_code_0 = 'en_01_ercot_04'\nproduct_code_1 = 'en_08_eiaxx_01'\nproduct_code_2 = 'ev_01_altab_04'","fc096f0b":"def generate_hours_range(start_date, finish_date):\n    diff = finish_date - start_date\n    hours = int(diff.total_seconds() \/ (60*60))\n    generated_date_list = [start_date + datetime.timedelta(hours=x) for x in range(0, (hours + 1))]\n    return generated_date_list\ndef generate_fif_minutes_range(start_date, finish_date):\n    diff = finish_date - start_date\n    fif_minutes = int(diff.total_seconds() \/ (60*15))\n    generated_date_list = [start_date + datetime.timedelta(minutes=15*x) for x in range(0, (fif_minutes + 1))]\n    return generated_date_list\ndef generate_day_range(start_date, finish_date):\n    diff = finish_date - start_date\n    days = int(diff.total_seconds() \/ (60*60*24))\n    generated_date_list = [start_date + datetime.timedelta(days=x) for x in range(0, (days+1))]\n    return generated_date_list\ndef detect_outlier(dataframe, value_column, date_column):\n    outliers = pd.DataFrame()\n    threshold = 6\n    new_df_index = 0\n    data = dataframe[value_column].to_list()\n    mean_1 = np.mean(data)\n    std_1 = np.std(data)\n    ind = []\n    for index, datum in enumerate(data):\n        z_score = (datum - mean_1) \/ std_1\n        if np.abs(z_score) > threshold:\n            outliers.at[new_df_index, value_column] = datum\n            outliers.at[new_df_index, date_column] = dataframe[date_column].iloc[index]\n            ind.append(index)\n            new_df_index += 1\n    outliers.insert(0,'ind',ind,True)\n    return outliers","29ea3213":"data_0 = pd.DataFrame()\nfor i in range (1,392):\n    url_0 = f'https:\/\/www.altadata.io\/data\/api\/{product_code_0}?api_key={altadata_io_api_key}&settlement_point_name=HB_SOUTH&opr_ts_gte=2015-01-01&\/?format=json&page={i}'\n    data_0 = data_0.append(pd.read_json(json.dumps(requests.get(url_0).json())))","695296de":"data_0.info()","04721c13":"data_0.settlement_point_name.value_counts()","b5f4815b":"data_0.head()","641aeee8":"data_0.tail()","46fa473e":"data_0.sort_values(by=['settlement_point_price'],ascending=False)","3e40cc28":"data_0.describe(include='all')","7dde97c9":"missing = []\nfor i in data_0.opr_ts:\n    d1 = datetime.datetime.strptime(i,\"%Y-%m-%dT%H:%M:%S.000+0000\")\n    new_format = \"%Y-%m-%d %H:%M:%S\"\n    missing.append(d1.strftime(new_format))\ndata_0.insert(0,'date',missing,True)","69bb1cb3":"data_0.info()","77d44ba2":"x = datetime.datetime(2015, 1, 1)\ny = datetime.datetime(2020, 7, 28)\ngenerated_date_list = generate_fif_minutes_range(x,y)\ncheck_df_date_list = pd.to_datetime(data_0['date'].values)\ndifference_date_list = set(generated_date_list) - set(check_df_date_list)\ndif_date = list(difference_date_list)","16873330":"data_0 = data_0[['date','settlement_point_price']]\ndata_0.info()","f528020f":"for i in dif_date:\n    data_0 = data_0.append({'date' : i} , ignore_index=True)","fd1cabac":"data_0.tail()","74c376db":"data_0.date = pd.to_datetime(data_0.date)\ndata_0 = data_0.sort_values(by='date')","39f7ef5d":"new_index = []\nfor i in range(0,len(data_0)):\n    new_index.append(i)\ndata_0.insert(0,'ind',new_index,True)\ndata_0.index = data_0.ind\ndata_0.tail()","cf58a931":"data_0.info()","be9ecaa0":"trace_0 = go.Scatter(x = data_0.date,y = data_0.settlement_point_price.interpolate(method ='linear', limit_direction ='forward'), name = \"Interpolation Point Price\",\n                       line = dict(color = '#173F5F'), opacity = 1.0)\ntrace_1 = go.Scatter(x = data_0.date,y = data_0.settlement_point_price, name = \"Point Price\",\n                       line = dict(color = '#17BECF'), opacity = 1.0)\ndata = [trace_0,trace_1]\nlayout = dict( title = 'HB_SOUTH Price & Interpolation Price')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'HB_SOUTH-Price-Interpolation')","f1648656":"data_0.settlement_point_price = data_0.settlement_point_price.interpolate(method ='linear', limit_direction ='forward')","b195ba54":"data_0.info()","bad2a009":"m = 0\nmeann = []\nfor i in range(0,len(data_0),4):\n    for j in range(0,4):\n        m = float(m+data_0.settlement_point_price[i+j])\n    meann.append(float(m\/4)) # for 15. minutes\n    meann.append(float(m\/4)) # for 30. minutes\n    meann.append(float(m\/4)) # for 45. minutes\n    meann.append(float(m\/4)) # for last minutes\n    m=0","0987e8ca":"data_0.insert(2,'meanprice',meann,True)\ndata_0.head(8)","e7a730ba":"data_0.describe(include='all')","4cdf924e":"data_1 = pd.DataFrame()\nfor j in range (1,4):\n    url_1 = f'https:\/\/www.altadata.io\/data\/api\/{product_code_1}?api_key={altadata_io_api_key}&date_gte=2015-01-01&\/?format=json&page={j}'\n    data_1 = data_1.append(pd.read_json(json.dumps(requests.get(url_1).json())))","3c5a18b4":"data_1.info()","a7b079ff":"data_1.head()","a5dd3ed1":"data_1.tail()","7581da03":"print('Is there a missing date value?:',format(str(data_1.date.isnull().values.any())))\nprint('Is there a missing Henry Hub NG Spot Price ?:',format(str(data_1.henry_hub_ng_spot_price.isnull().values.any())))\nprint('Is there a missing NG Futures Contract 1 Price ?:',format(str(data_1.ng_futures_contract1_price.values.any())))\nprint('Is there a missing NG Futures Contract 2 Price ?:',format(str(data_1.ng_futures_contract2_price.values.any())))\nprint('Is there a missing NG Futures Contract 3 Price ?:',format(str(data_1.ng_futures_contract3_price.values.any())))\nprint('Is there a missing NG Futures Contract 4 Price ?:',format(str(data_1.ng_futures_contract4_price.values.any())))","29a03adb":"data_1.describe(include='all')","3c3258cd":"fig = px.bar(data_1, x='date', y='henry_hub_ng_spot_price',title='Historical Daily Natural Gas Spot', labels={'henry_hub_ng_spot_price':'Henry Hub NG Spot Price','ng_futures_contract1_price':'Contract 1','ng_futures_contract2_price':'Contract 2','ng_futures_contract3_price':'Contract 3','ng_futures_contract4_price':'Contract 4',},color='henry_hub_ng_spot_price')\niplot(fig, filename = 'HenryHubNgSpotPrice')","ed1c7f3d":"generated_date_list = []\ncheck_df_date_list = []\ndifference_date_list = set()\ndif_date = []","0689f26c":"x = datetime.datetime(2015, 1, 1)\ny = datetime.datetime(2020, 8, 11)\ngenerated_date_list = generate_day_range(x,y)\ncheck_df_date_list = pd.to_datetime(data_1['date'].values)\ndifference_date_list = set(generated_date_list) - set(check_df_date_list)\ndif_date = list(difference_date_list)","65424af7":"for i in dif_date:\n    data_1 = data_1.append({'date' : i} , ignore_index=True)","9f6653aa":"data_1.info()","74f76f28":"data_1.tail()","3f823431":"data_1['date'] =pd.to_datetime(data_1.date)\ndata_1 = data_1.sort_values(by='date')","a55c611c":"new_index = []\nfor i in range(0,len(data_1)):\n    new_index.append(i)\ndata_1.insert(0,'ind',new_index,True)\ndata_1.index = data_1.ind\ndata_1.tail()","1f663e8e":"data_1.head()","102f8aaa":"data_1.henry_hub_ng_spot_price.describe()","19c7044b":"trace_1_0 = go.Scatter( x=data_1.date, y=data_1.henry_hub_ng_spot_price.interpolate(method ='linear', limit_direction ='forward'), name = \"Henry Hub NG Spot Price Interpolation\",\n                       line = dict(color = '#D50000'), opacity = 1.0)\ntrace_1_1 = go.Scatter( x = data_1.date,y = data_1.henry_hub_ng_spot_price, name = \"Henry Hub Missing Values\",\n                       line = dict(color = '#E68D20'), opacity = 1.0)\ndata = [trace_1_0,trace_1_1]\nlayout = dict( title = 'Henry Hub NG Spot Price - Interpolation')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'henry_hub_inerpolation')","9b4ece6d":"data_1.ng_futures_contract1_price.describe()","03416ad7":"trace_1_0 = go.Scatter( x=data_1.date, y=data_1.ng_futures_contract1_price.interpolate(method ='linear', limit_direction ='forward'), name = \"NG Futures Contract 1 Price Interpolation\",\n                       line = dict(color = '#1A237E'), opacity = 1.0)\ntrace_1_1 = go.Scatter( x = data_1.date,y = data_1.ng_futures_contract1_price, name = \"NG Futures Contract 1 Price Missing Values\",\n                       line = dict(color = '#00BCD4'), opacity = 1.0)\ndata = [trace_1_0,trace_1_1]\nlayout = dict( title = 'NG Futures Contract 1 Price')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'NG_Futures_Contract_1_Price')","e45ccc4b":"data_1.ng_futures_contract2_price.describe()","43a13ea5":"trace_1_0 = go.Scatter( x=data_1.date, y=data_1.ng_futures_contract2_price.interpolate(method ='linear', limit_direction ='forward'), name = \"NG Futures Contract 2 Price Interpolation\",\n                       line = dict(color = '#006400'), opacity = 1.0)\ntrace_1_1 = go.Scatter( x = data_1.date,y = data_1.ng_futures_contract2_price, name = \"NG Futures Contract 2 Price Missing Values\",\n                       line = dict(color = '#00FF7F'), opacity = 1.0)\ndata = [trace_1_0,trace_1_1]\nlayout = dict( title = 'NG Futures Contract 2 Price')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'NG_Futures_Contract_2_Price')","35f19808":"data_1.ng_futures_contract3_price.describe()","90a45781":"trace_1_0 = go.Scatter( x=data_1.date, y=data_1.ng_futures_contract3_price.interpolate(method ='linear', limit_direction ='forward'), name = \"NG Futures Contract 3 Price Interpolation\",\n                       line = dict(color = '#008080'), opacity = 1.0)\ntrace_1_1 = go.Scatter( x = data_1.date,y = data_1.ng_futures_contract3_price, name = \"NG Futures Contract 3 Price Missing Values\",\n                       line = dict(color = '#66CDAA'), opacity = 1.0)\ndata = [trace_1_0,trace_1_1]\nlayout = dict( title = 'NG Futures Contract 3 Price - Interpolation')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'NG_Futures_Contract_3_Price')","976393e0":"data_1.ng_futures_contract4_price.describe()","21304a73":"trace_1_0 = go.Scatter( x=data_1.date, y=data_1.ng_futures_contract4_price.interpolate(method ='linear', limit_direction ='forward'), name = \"NG Futures Contract 4 Price Interpolation\",\n                       line = dict(color = '#8A2BE2'), opacity = 1.0)\ntrace_1_1 = go.Scatter( x = data_1.date,y = data_1.ng_futures_contract4_price, name = \"NG Futures Contract 4 Price Missing Values\",\n                       line = dict(color = '#FF00FF'), opacity = 1.0)\ndata = [trace_1_0,trace_1_1]\nlayout = dict( title = 'NG Futures Contract 4 Price')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'NG_Futures_Contract_4_Price')","e99d60d6":"data_1.henry_hub_ng_spot_price = data_1.henry_hub_ng_spot_price.interpolate(method ='linear', limit_direction ='forward')\ndata_1.ng_futures_contract1_price = data_1.ng_futures_contract1_price.interpolate(method ='linear', limit_direction ='forward')\ndata_1.ng_futures_contract2_price = data_1.ng_futures_contract2_price.interpolate(method ='linear', limit_direction ='forward')\ndata_1.ng_futures_contract3_price = data_1.ng_futures_contract3_price.interpolate(method ='linear', limit_direction ='forward')\ndata_1.ng_futures_contract4_price = data_1.ng_futures_contract4_price.interpolate(method ='linear', limit_direction ='forward')\ndata_1.henry_hub_ng_spot_price = data_1.henry_hub_ng_spot_price.interpolate(method ='linear', limit_direction ='backward')\ndata_1.ng_futures_contract1_price = data_1.ng_futures_contract1_price.interpolate(method ='linear', limit_direction ='backward')\ndata_1.ng_futures_contract2_price = data_1.ng_futures_contract2_price.interpolate(method ='linear', limit_direction ='backward')\ndata_1.ng_futures_contract3_price = data_1.ng_futures_contract3_price.interpolate(method ='linear', limit_direction ='backward')\ndata_1.ng_futures_contract4_price = data_1.ng_futures_contract4_price.interpolate(method ='linear', limit_direction ='backward')\ndata_1.info()","75f9805b":"data_1.describe(include='all')","aa97bdee":"fig = px.bar(data_1, x='date', y='henry_hub_ng_spot_price',title='Historical Daily Natural Gas Spot',labels={'henry_hub_ng_spot_price':'Henry Hub NG Spot Price','ng_futures_contract1_price':'Contract 1','ng_futures_contract2_price':'Contract 2','ng_futures_contract3_price':'Contract 3','ng_futures_contract4_price':'Contract 4',},color='henry_hub_ng_spot_price')\niplot(fig)","9db2dc7d":"fig = px.scatter(data_1, x=\"date\", y=\"henry_hub_ng_spot_price\", color=\"henry_hub_ng_spot_price\", marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\") #trendline = \"lowess\"\nfig.show()","59127c6f":"fig = px.scatter(data_1, x=\"henry_hub_ng_spot_price\", y=\"ng_futures_contract1_price\", color=\"henry_hub_ng_spot_price\", marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\nfig.show()","869c5899":"fig = px.scatter(data_1, x=\"henry_hub_ng_spot_price\", y=\"ng_futures_contract2_price\", color=\"henry_hub_ng_spot_price\", marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\nfig.show()","f4fdd039":"fig = px.scatter(data_1, x=\"henry_hub_ng_spot_price\", y=\"ng_futures_contract3_price\", color=\"henry_hub_ng_spot_price\", marginal_y=\"violin\",marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\nfig.show()","3715c4fe":"fig = px.scatter(data_1, x=\"henry_hub_ng_spot_price\", y=\"ng_futures_contract4_price\", color=\"henry_hub_ng_spot_price\", marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\")\nfig.show()","f6301b02":"data_1.describe(include='all')","08a64a04":"data_2 = pd.DataFrame()\nfor k in range(1,95):\n    url_2 = f'https:\/\/www.altadata.io\/data\/api\/{product_code_2}?api_key={altadata_io_api_key}&station_id=72243012960&observation_local_time_gte=2015-01-01&\/?format=json&page={k}'\n    data_2 = data_2.append(pd.read_json(json.dumps(requests.get(url_2).json())))","fe8cfb93":"data_2 = data_2[['observation_local_time','wind_direction_angle','wind_direction','wind_type_code','wind_speed_ms','ceiling_height_dimension','visibility_distance_dimension','air_temp_c','dew_temp_c','relative_humidity','sea_level_pressure','precipitation_in_1_hr','sky_cond','weather_cond']]","1627d464":"data_2.info()","591c27a6":"data_2.head()","9d35d986":"data_2.tail()","63d94047":"data_2.describe(include='all')","9857d062":"date = []\nfor i in data_2.observation_local_time:\n    i = str(i)\n    d1 = datetime.datetime.strptime(i,\"%Y-%m-%d %H:%M:%S+00:00\")\n    new_format = \"%Y-%m-%d %H:%M:%S\"\n    date.append(d1.strftime(new_format))\ndata_2.insert(0,'date',date,True)","5faa9645":"generated_date_list = []\ncheck_df_date_list = []\ndifference_date_list = set()\ndif_date = []","e83fbaba":"x = datetime.datetime(2015, 1, 1)\ny = datetime.datetime(2020, 7, 20)\ngenerated_date_list = generate_hours_range(x,y)\ncheck_df_date_list = pd.to_datetime(data_2['date'].values)\ndifference_date_list = set(generated_date_list) - set(check_df_date_list)\ndif_date = list(difference_date_list)","71f09d6c":"for i in dif_date:\n    data_2 = data_2.append({'date' : i} , ignore_index=True)\ndata_2.date = pd.to_datetime(data_2.date)\ndata_2 = data_2.sort_values(by='date')","260b0449":"new_index = []\nfor i in range(0,len(data_2)):\n    new_index.append(i)\ndata_2.insert(0,'ind',new_index,True)\ndata_2.index = data_2.ind","5eac4d93":"data_2.info()","bb7f221e":"datehour = []\nfor i in data_2.date:\n    i=str(i)\n    d1 = datetime.datetime.strptime(i,\"%Y-%m-%d %H:%M:%S\")\n    new_format_date = \"%m-%d %H:%M:%S\"\n    datehour.append(d1.strftime(new_format_date))\ndata_2.insert(2,'datehour',datehour,True)","23cbf1aa":"missdate = pd.DataFrame()\nmissdate = data_2[data_2.air_temp_c.astype(str)=='nan']\nval = []\nfor i in missdate.datehour:\n    val.append(np.mean(data_2.air_temp_c[data_2.datehour == i]))","a5a690ca":"miss = pd.DataFrame()\nmiss.insert(0,'ind',missdate.ind,True)\nmiss.insert(1,'means',val,True)","45d5de3b":"data_2_1 = data_2.copy()\nfor i in miss.ind:\n    data_2_1.air_temp_c[i] = miss.means[miss.ind == i]","8a2cdfe6":"trace_0 = go.Scatter(x = data_2_1.date,y = data_2_1.air_temp_c, name = \"Filled Values of Air Temp C\",\n                       line = dict(color = '#173F5F'), opacity = 1.0)\ntrace_1 = go.Scatter(x = data_2.date,y = data_2.air_temp_c, name = \"Air Temp C\",\n                       line = dict(color = '#17BECF'), opacity = 1.0)\ndata = [trace_0,trace_1]\nlayout = dict( title = 'Air Temp C')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'air.html')","b150fa0e":"missdate = pd.DataFrame()\nmissdate = data_2[data_2.wind_direction_angle.astype(str)=='nan']\nval = []\nfor i in missdate.datehour:\n    val.append(np.mean(data_2.wind_direction_angle[data_2.datehour == i]))","8711082f":"miss = pd.DataFrame()\nmiss.insert(0,'ind',missdate.ind,True)\nmiss.insert(1,'means',val,True)","333d8c1b":"for i in miss.ind:\n    data_2_1.wind_direction_angle[i] = miss.means[miss.ind == i]","c32a814d":"trace_0 = go.Scatter(x = data_2_1.date,y = data_2_1.wind_direction_angle, name = \"Filled Values of Wind Direction Angle\",\n                       line = dict(color = '#173F5F'), opacity = 1.0)\ntrace_1 = go.Scatter(x = data_2.date,y = data_2.wind_direction_angle, name = \"Wind Direction Angle\",\n                       line = dict(color = '#17BECF'), opacity = 1.0)\ndata = [trace_0,trace_1]\nlayout = dict( title = 'Wind Direction Angle')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'wind-direction-angle.html')","16eea3c0":"missdate = pd.DataFrame()\nmissdate = data_2[data_2.wind_speed_ms.astype(str)=='nan']\nval = []\nfor i in missdate.datehour:\n    val.append(np.mean(data_2.wind_speed_ms[data_2.datehour == i]))","a61a0ff9":"miss = pd.DataFrame()\nmiss.insert(0,'ind',missdate.ind,True)\nmiss.insert(1,'means',val,True)","a5e7c03d":"for i in miss.ind:\n    data_2_1.wind_speed_ms[i] = miss.means[miss.ind == i]","2efa6b69":"trace_0 = go.Scatter(x = data_2_1.date,y = data_2_1.wind_speed_ms, name = \"Filled Values of Wind Speed MS\",\n                       line = dict(color = '#173F5F'), opacity = 1.0)\ntrace_1 = go.Scatter(x = data_2.date,y = data_2.wind_speed_ms, name = \"Wind Speed MS\",\n                       line = dict(color = '#17BECF'), opacity = 1.0)\ndata = [trace_0,trace_1]\nlayout = dict( title = 'Wind Speed MS')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'wind-speed-ms.html')","8e9e83e9":"missdate = pd.DataFrame()\nmissdate = data_2[data_2.ceiling_height_dimension.astype(str)=='nan']\nval = []\nfor i in missdate.datehour:\n    val.append(np.mean(data_2.ceiling_height_dimension[data_2.datehour == i]))","c122731c":"miss = pd.DataFrame()\nmiss.insert(0,'ind',missdate.ind,True)\nmiss.insert(1,'means',val,True)","36f6ad29":"for i in miss.ind:\n    data_2_1.ceiling_height_dimension[i] = miss.means[miss.ind == i]","aef03495":"trace_0 = go.Scatter(x = data_2_1.date,y = data_2_1.ceiling_height_dimension, name = \"Filled Values of Ceiling Height Dimension\",\n                       line = dict(color = '#173F5F'), opacity = 1.0)\ntrace_1 = go.Scatter(x = data_2.date,y = data_2.ceiling_height_dimension, name = \"Ceiling Height Dimension\",\n                       line = dict(color = '#17BECF'), opacity = 1.0)\ndata = [trace_0,trace_1]\nlayout = dict( title = 'Ceiling Height Dimension')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'ceiling-height-dimension.html')","ec49f2d0":"missdate = pd.DataFrame()\nmissdate = data_2[data_2.dew_temp_c.astype(str)=='nan']\nval = []\nfor i in missdate.datehour:\n    val.append(np.mean(data_2.dew_temp_c[data_2.datehour == i]))","50f20af8":"miss = pd.DataFrame()\nmiss.insert(0,'ind',missdate.ind,True)\nmiss.insert(1,'means',val,True)","fe5ddedd":"for i in miss.ind:\n    data_2_1.dew_temp_c[i] = miss.means[miss.ind == i]","0af1eacb":"trace_0 = go.Scatter(x = data_2_1.date,y = data_2_1.dew_temp_c, name = \"Filled Values of Dew Temp C\",\n                       line = dict(color = '#173F5F'), opacity = 1.0)\ntrace_1 = go.Scatter(x = data_2.date,y = data_2.dew_temp_c, name = \"Dew Temp C\",\n                       line = dict(color = '#17BECF'), opacity = 1.0)\ndata = [trace_0,trace_1]\nlayout = dict( title = 'Dew Temp C')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'dew-temp-c.html')","5688d777":"missdate = pd.DataFrame()\nmissdate = data_2[data_2.relative_humidity.astype(str)=='nan']\nval = []\nfor i in missdate.datehour:\n    val.append(np.mean(data_2.relative_humidity[data_2.datehour == i]))","29310715":"miss = pd.DataFrame()\nmiss.insert(0,'ind',missdate.ind,True)\nmiss.insert(1,'means',val,True)","357862f4":"for i in miss.ind:\n    data_2_1.relative_humidity[i] = miss.means[miss.ind == i]","c1128d23":"trace_0 = go.Scatter(x = data_2_1.date,y = data_2_1.relative_humidity, name = \"Filled Values of Relative Humidity\",\n                       line = dict(color = '#173F5F'), opacity = 1.0)\ntrace_1 = go.Scatter(x = data_2.date,y = data_2.relative_humidity, name = \"Relative Humidity\",\n                       line = dict(color = '#17BECF'), opacity = 1.0)\ndata = [trace_0,trace_1]\nlayout = dict( title = 'Relative Humidity')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'relative-humidity.html')","b2fc91fa":"missdate = pd.DataFrame\nmissdate = data_2[data_2.sea_level_pressure.astype(str)=='nan']\nval = []\nfor i in missdate.datehour:\n    val.append(np.mean(data_2.sea_level_pressure[data_2.datehour == i]))","631c3cce":"miss = pd.DataFrame()\nmiss.insert(0,'ind',missdate.ind,True)\nmiss.insert(1,'means',val,True)","e5a8457e":"for i in miss.ind:\n    data_2_1.sea_level_pressure[i] = miss.means[miss.ind == i]","d55b8ac2":"trace_0 = go.Scatter(x = data_2_1.date,y = data_2_1.sea_level_pressure, name = \"Filled Values of Sea Level Pressure\",\n                       line = dict(color = '#173F5F'), opacity = 1.0)\ntrace_1 = go.Scatter(x = data_2.date,y = data_2.sea_level_pressure, name = \"Sea Level Pressure\",\n                       line = dict(color = '#17BECF'), opacity = 1.0)\ndata = [trace_0,trace_1]\nlayout = dict( title = 'Sea Level Pressure')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'sea-level-pressure.html')","c5087b00":"missdate = pd.DataFrame()\nmissdate = data_2[data_2.precipitation_in_1_hr.astype(str)=='nan']\nval = []\nfor i in missdate.datehour:\n    val.append(np.mean(data_2.precipitation_in_1_hr[data_2.datehour == i]))","5fe7af94":"miss = pd.DataFrame()\nmiss.insert(0,'ind',missdate.ind,True)\nmiss.insert(1,'means',val,True)","3734f77f":"for i in miss.ind:\n    data_2_1.precipitation_in_1_hr[i] = miss.means[miss.ind == i]","2b2c6a84":"trace_0 = go.Scatter(x = data_2_1.date,y = data_2_1.precipitation_in_1_hr, name = \"Filling Precipitation in 1 Hour\",\n                       line = dict(color = '#173F5F'), opacity = 1.0)\ntrace_1 = go.Scatter(x = data_2.date,y = data_2.precipitation_in_1_hr, name = \"Precipitation in 1 Hour\",\n                       line = dict(color = '#17BECF'), opacity = 1.0)\ndata = [trace_0,trace_1]\nlayout = dict( title = 'Precipitation in 1 Hour')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'precipitation-in-1-hour.html')","b6d88986":"del data_2\ndata_2 = data_2_1.copy()\ndel data_2_1","125287fc":"data_2.info()","11a7df7b":"trace1 = go.Scatter(x = data_2.date, y = data_2.air_temp_c, mode = \"lines\", name = \"air temp c\", \n                    marker = dict(color = 'rgba(16, 112, 2, 1.0)'), text= data_2.wind_type_code)\ntrace2 = go.Scatter(x = data_2.date, y = data_2.dew_temp_c, mode = \"lines+markers\", name = \"dew temp c\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.5)'), text= data_2.wind_type_code)\ndata = [trace1, trace2]\nlayout = dict(title = 'Air Temp C & Dew Temp C', xaxis= dict(title= 'Local Time',ticklen= 5,zeroline= False))\nfig = dict(data = data, layout = layout)\niplot(fig,filename='airvsdew.html')","d928356d":"labels_wd = data_2.wind_direction.value_counts().index\nvalues_wd = data_2.wind_direction.value_counts().values\nfig = go.Figure(data=[go.Pie(labels=labels_wd, values=values_wd, textinfo='label+percent',\n                             insidetextorientation='radial')])\niplot(fig,filename='wd.html')","167b91f9":"labels_wtc = data_2.wind_type_code.value_counts().index\nvalues_wtc = data_2.wind_type_code.value_counts().values\nfig = go.Figure(data=[go.Pie(labels=labels_wtc, values=values_wtc,\n                           textinfo='label+percent',insidetextorientation='radial')])\niplot(fig,filename='wtc.html')","3e0e7379":"labels_sky = data_2.sky_cond.value_counts().index\nvalues_sky = data_2.sky_cond.value_counts().values\nfig = go.Figure([go.Bar(x=labels_sky, y=values_sky)])\niplot(fig,filename='sky-cond.html')","4c0608c0":"labels_weather = data_2.weather_cond.value_counts().index\nvalues_weather = data_2.weather_cond.value_counts().values\ntrace1 = go.Bar(\n                x = labels_weather,\n                y = values_weather,\n                name = \"Weather Condition\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = data_2.weather_cond)\ndata = [trace1]\nlayout = go.Layout(title='Weather Condition',barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig,filename='barchart-sky-whet-2.html')","ccda88bd":"data_2 = data_2[['date','datehour','wind_direction_angle','wind_speed_ms','ceiling_height_dimension','air_temp_c','dew_temp_c','relative_humidity','sea_level_pressure','precipitation_in_1_hr',]]\ndata_2.head()","46244057":"data_0 = data_0.loc[0:194591]\ndata_1 = data_1.loc[0:2026]\ndata_2 = data_2.loc[0:48648]","ddf3fa41":"hour = []\nmean_price = []\nm = 0\nfor i in range(0,len(data_0),4):\n    hour.append(data_0.date[i])\n    mean_price.append(data_0.meanprice[i])","a3d90286":"henry = []\ncon1 = []\ncon2 = []\ncon3 = []\ncon4 = []\ndate = []\nfor i in range(0,len(data_1)):\n    for j in range(0,24):\n        henry.append(data_1.henry_hub_ng_spot_price[i])\n        con1.append(data_1.ng_futures_contract1_price[i])\n        con2.append(data_1.ng_futures_contract2_price[i])\n        con3.append(data_1.ng_futures_contract3_price[i])\n        con4.append(data_1.ng_futures_contract4_price[i])\n        date.append(data_1.date[i])","6c687adf":"df = pd.DataFrame()\ndf.insert(0,'hour',hour,True)\ndf.insert(1,'mean_price',mean_price,True)\ndf.insert(2,\"henry\",henry,True)\ndf.insert(3,'ng_futures_contract1_price',con1,True)\ndf.insert(4,'ng_futures_contract2_price',con2,True)\ndf.insert(5,'ng_futures_contract3_price',con3,True)\ndf.insert(6,'ng_futures_contract4_price',con4,True)\ndf.insert(7,'wind_speed_ms',data_2.wind_speed_ms,True)\ndf.insert(8,'ceiling_height_dimension',data_2.ceiling_height_dimension,True)\ndf.insert(9,'air_temp_c',data_2.air_temp_c,True)\ndf.insert(10,'dew_temp_c',data_2.dew_temp_c,True)\ndf.insert(11,'relative_humidity',data_2.relative_humidity,True)\ndf.insert(12,'sea_level_pressure',data_2.sea_level_pressure,True)\ndf.insert(13,'precipitation_in_1_hr',data_2.precipitation_in_1_hr,True)\ndf.info()","bcfb8170":"df.info()","938d7e54":"df.head()","ac7c2f0e":"df.tail()","b37c7d54":"df.describe(include='all')","2789dfeb":"hourpeak = []\ndateday = []\ndatemonth = []\ndayyear = []\nfor i in df.hour:\n    i = str(i)\n    d1 = datetime.datetime.strptime(i,\"%Y-%m-%d %H:%M:%S\")\n    new_format_date_day = \"%m-%d\"\n    new_format_hour_peak = \"%H:00:00\"\n    new_format_date_month = \"%m\"\n    new_format_day_year = \"%Y-%m\"\n    hourpeak.append(d1.strftime(new_format_hour_peak))\n    dateday.append(d1.strftime(new_format_date_day))\n    datemonth.append(d1.strftime(new_format_date_month))\n    dayyear.append(d1.strftime(new_format_day_year))","fb21941f":"df.insert(2,'peakhour',hourpeak,True)\ndf.insert(3,'dateday',dateday,True)\ndf.insert(4,'month',datemonth,True)\ndf.insert(5,'dayyear',dayyear,True)","86b24b4e":"df.head()","6e677461":"outlier = detect_outlier(df, 'mean_price', 'hour')\noutlier.head(len(outlier))","36e4db25":"fig = px.histogram(df, x=\"mean_price\",marginal=\"box\")\niplot(fig, filename='first_histogram.html')","700e0d9c":"df = df.drop(df.index[c] for c in outlier.ind)\ntrace_0 = go.Scatter(x = df.hour,y = df.mean_price, name = \"Point Price\", line = dict(color = '#17BECF'), opacity = 1.0)\ndata = [trace_0]\nlayout = dict( title = 'HB_SOUTH Price')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'notoutlier.html')","4e99f26e":"fig = px.histogram(df, x=\"mean_price\",marginal=\"rug\")\niplot(fig, filename='non-outlier_histogram.html')","1f66a53a":"df.hour = pd.to_datetime(df.hour)\nhour = df['hour'].dt.hour\ndayofweek = df['hour'].dt.dayofweek\nquarter = df['hour'].dt.quarter\nmonth = df['hour'].dt.month\nyear = df['hour'].dt.year\ndayofyear = df['hour'].dt.dayofyear\ndayofmonth = df['hour'].dt.day\nweekofyear = df['hour'].dt.weekofyear","28dc070c":"df.insert(0,'hours',hour,True)\ndf.insert(1,'dayofweek',dayofweek,True)\ndf.insert(2,'quarter',quarter,True)\ndf.insert(3,'month',month,True)\ndf.insert(4,'year',year,True)\ndf.insert(5,'dayofyear',dayofyear,True)\ndf.insert(6,'dayofmonth',dayofmonth,True)\ndf.insert(7,'weekofyear',weekofyear,True)","5cd170bd":"new_index = []\nfor i in range(0,len(df)):\n    new_index.append(i)\ndf.insert(0,'ind',new_index,True)\ndf.info()","99406c8a":"ft = ['hour','mean_price','henry','wind_speed_ms','ceiling_height_dimension','air_temp_c','dew_temp_c','relative_humidity','sea_level_pressure','precipitation_in_1_hr']\ndata = df.copy()\ndata = data[ft]\ndata.hour = pd.to_datetime(data.hour)\nhour = data['hour'].dt.hour\ndayofweek = data['hour'].dt.dayofweek\nquarter = data['hour'].dt.quarter\nmonth = data['hour'].dt.month\nyear = data['hour'].dt.year\ndayofyear = data['hour'].dt.dayofyear\ndayofmonth = data['hour'].dt.day\nweekofyear = data['hour'].dt.weekofyear\ndata.insert(0,'hours',hour,True)\ndata.insert(1,'dayofweek',dayofweek,True)\ndata.insert(2,'quarter',quarter,True)\ndata.insert(3,'month',month,True)\ndata.insert(4,'year',year,True)\ndata.insert(5,'dayofyear',dayofyear,True)\ndata.insert(6,'dayofmonth',dayofmonth,True)\ndata.insert(7,'weekofyear',weekofyear,True)","73ea4c1b":"jan = data[data.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'january',x,True)\nfeb = data[data.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(2,'february',x,True)\nfeb = data[data.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(3,'march',x,True)\nfeb = data[data.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(4,'april',x,True)\nfeb = data[data.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(5,'may',x,True)\nfeb = data[data.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(6,'june',x,True)\nfeb = data[data.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(7,'july',x,True)\nfeb = data[data.month == 8]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(8,'august',x,True)\nfeb = data[data.month == 9]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(9,'september',x,True)\nfeb = data[data.month == 10]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(10,'october',x,True)\nfeb = data[data.month == 11]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(11,'november',x,True)\nfeb = data[data.month == 12]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(12,'december',x,True)\nft = ['january','february','march','april','may','june','july','august','september','october','november','december']\nplt.figure(figsize=(20,15))\nplt.title('Electricity price for the average hourly with monthly view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","605cb876":"jan = data[data.year == 2015]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'january',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(2,'february',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(3,'march',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(4,'april',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(5,'may',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(6,'june',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(7,'july',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 8]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(8,'august',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 9]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(9,'september',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 10]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(10,'october',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 11]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(11,'november',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 12]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nfirst.insert(12,'december',x,True)\nft = ['january','february','march','april','may','june','july','august','september','october','november','december']\nplt.figure(figsize=(20,15))\nplt.title('Electricity price for the average hourly with a monthly view for 2015')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","40389777":"jan = data[data.year == 2016]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nsecond = pd.DataFrame()\nsecond.insert(0,'hours',day,True)\nsecond.insert(1,'january',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(2,'february',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(3,'march',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(4,'april',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(5,'may',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(6,'june',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(7,'july',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 8]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(8,'august',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 9]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(9,'september',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 10]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(10,'october',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 11]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(11,'november',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 12]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(12,'december',x,True)\nft = ['january','february','march','april','may','june','july','august','september','october','november','december']\nplt.figure(figsize=(20,15))\nplt.title('Electricity price for the average hourly with a monthly view for 2016')\nax = sns.heatmap(second[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","d9688891":"jan = data[data.year == 2017]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nsecond = pd.DataFrame()\nsecond.insert(0,'hours',day,True)\nsecond.insert(1,'january',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(2,'february',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(3,'march',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(4,'april',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(5,'may',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(6,'june',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(7,'july',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 8]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(8,'august',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 9]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(9,'september',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 10]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(10,'october',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 11]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(11,'november',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 12]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(12,'december',x,True)\nft = ['january','february','march','april','may','june','july','august','september','october','november','december']\nplt.figure(figsize=(20,15))\nplt.title('Electricity price for the average hourly with a monthly view for 2017')\nax = sns.heatmap(second[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","1a9cd627":"jan = data[data.year == 2018]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nsecond = pd.DataFrame()\nsecond.insert(0,'hours',day,True)\nsecond.insert(1,'january',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(2,'february',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(3,'march',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(4,'april',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(5,'may',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(6,'june',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(7,'july',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 8]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(8,'august',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 9]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(9,'september',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 10]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(10,'october',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 11]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(11,'november',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 12]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(12,'december',x,True)\nft = ['january','february','march','april','may','june','july','august','september','october','november','december']\nplt.figure(figsize=(20,15))\nplt.title('Electricity price for the average hourly with a monthly view for 2018')\nax = sns.heatmap(second[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","722bfafb":"jan = data[data.year == 2019]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nsecond = pd.DataFrame()\nsecond.insert(0,'hours',day,True)\nsecond.insert(1,'january',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(2,'february',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(3,'march',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(4,'april',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(5,'may',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(6,'june',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(7,'july',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 8]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(8,'august',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 9]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(9,'september',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 10]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(10,'october',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 11]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(11,'november',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 12]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(12,'december',x,True)\nft = ['january','february','march','april','may','june','july','august','september','october','november','december']\nplt.figure(figsize=(20,15))\nplt.title('Electricity price for the average hourly with a monthly view for 2019')\nax = sns.heatmap(second[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","39fea689":"jan = data[data.year == 2020]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nsecond = pd.DataFrame()\nsecond.insert(0,'hours',day,True)\nsecond.insert(1,'january',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(2,'february',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(3,'march',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(4,'april',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(5,'may',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(6,'june',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.mean_price[feb.hours == i]))\nsecond.insert(7,'july',x,True)\nft = ['january','february','march','april','may','june','july']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a monthly view for 2020')\nax = sns.heatmap(second[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","4c6eeaa0":"jan = data[data.year == 2015]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'2015',x,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(2,'2016',x,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(3,'2017',x,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(4,'2018',x,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(5,'2019',x,True)\njan = data[data.year == 2020]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(6,'2020',x,True)\nft = ['2015','2016','2017','2018','2019','2020']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a January view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","fd12aa45":"jan = data[data.year == 2015]\njan = jan[jan.month == 2]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'2015',x,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 2]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(2,'2016',x,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 2]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(3,'2017',x,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 2]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(4,'2018',x,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 2]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(5,'2019',x,True)\njan = data[data.year == 2020]\njan = jan[jan.month == 2]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(6,'2020',x,True)\nft = ['2015','2016','2017','2018','2019','2020']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a February view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","a5e7f95e":"jan = data[data.year == 2015]\njan = jan[jan.month == 3]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'2015',x,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 3]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(2,'2016',x,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 3]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(3,'2017',x,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 3]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(4,'2018',x,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 3]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(5,'2019',x,True)\njan = data[data.year == 3020]\njan = jan[jan.month == 3]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(6,'2020',x,True)\nft = ['2015','2016','2017','2018','2019','2020']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a March view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","ab53bedc":"jan = data[data.year == 2015]\njan = jan[jan.month == 4]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'2015',x,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 4]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(2,'2016',x,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 4]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(3,'2017',x,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 4]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(4,'2018',x,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 4]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(5,'2019',x,True)\njan = data[data.year == 4020]\njan = jan[jan.month == 4]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(6,'2020',x,True)\nft = ['2015','2016','2017','2018','2019','2020']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a April view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","33293b2e":"jan = data[data.year == 2015]\njan = jan[jan.month == 6]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'2015',x,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 6]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(2,'2016',x,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 6]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(3,'2017',x,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 6]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(4,'2018',x,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 6]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(5,'2019',x,True)\njan = data[data.year == 6020]\njan = jan[jan.month == 6]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(6,'2020',x,True)\nft = ['2015','2016','2017','2018','2019','2020']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a June view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","76aa907b":"jan = data[data.year == 2015]\njan = jan[jan.month == 7]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'2015',x,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 7]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(2,'2016',x,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 7]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(3,'2017',x,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 7]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(4,'2018',x,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 7]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(5,'2019',x,True)\njan = data[data.year == 7020]\njan = jan[jan.month == 7]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(6,'2020',x,True)\nft = ['2015','2016','2017','2018','2019','2020']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a July view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","82628988":"jan = data[data.year == 2015]\njan = jan[jan.month == 8]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'2015',x,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 8]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(2,'2016',x,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 8]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(3,'2017',x,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 8]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(4,'2018',x,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 8]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(5,'2019',x,True)\njan = data[data.year == 8020]\njan = jan[jan.month == 8]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(6,'2020',x,True)\nft = ['2015','2016','2017','2018','2019','2020']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a August view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","def52c20":"jan = data[data.year == 2015]\njan = jan[jan.month == 9]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'2015',x,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 9]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(2,'2016',x,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 9]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(3,'2017',x,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 9]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(4,'2018',x,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 9]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(5,'2019',x,True)\njan = data[data.year == 9020]\njan = jan[jan.month == 9]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(6,'2020',x,True)\nft = ['2015','2016','2017','2018','2019','2020']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a September view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","08643fff":"jan = data[data.year == 2015]\njan = jan[jan.month == 10]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'2015',x,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 10]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(2,'2016',x,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 10]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(3,'2017',x,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 10]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(4,'2018',x,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 10]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(5,'2019',x,True)\njan = data[data.year == 2020]\njan = jan[jan.month == 10]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(6,'2020',x,True)\nft = ['2015','2016','2017','2018','2019','2020']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a October view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","3136eab4":"jan = data[data.year == 2015]\njan = jan[jan.month == 11]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'2015',x,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 11]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(2,'2016',x,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 11]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(3,'2017',x,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 11]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(4,'2018',x,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 11]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(5,'2019',x,True)\njan = data[data.year == 2020]\njan = jan[jan.month == 11]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(6,'2020',x,True)\nft = ['2015','2016','2017','2018','2019','2020']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a November view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","513c87f5":"jan = data[data.year == 2015]\njan = jan[jan.month == 12]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'2015',x,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 12]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(2,'2016',x,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 12]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(3,'2017',x,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 12]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(4,'2018',x,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 12]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(5,'2019',x,True)\njan = data[data.year == 2020]\njan = jan[jan.month == 12]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.mean_price[jan.hours == i]))\n    day.append(i)\nfirst.insert(6,'2020',x,True)\nft = ['2015','2016','2017','2018','2019','2020']\nplt.figure(figsize=(15,8))\nplt.title('Electricity price for the average hourly with a December view for years')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","9972f515":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(df.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap')\nplt.show()","14b42d45":"fig = go.Figure()\nfig.add_trace(go.Box(y=df.mean_price,name=\"Mean Price\"))\nfig.add_trace(go.Box(y=df.henry,name='Henry Hub NG Spot Price'))\nfig.add_trace(go.Box(y=df.wind_speed_ms,name='Wind Speed MS'))\nfig.add_trace(go.Box(y=df.ceiling_height_dimension,name='Ceiling Height Dimension'))\nfig.add_trace(go.Box(y=df.air_temp_c,name='Air Temp C'))\nfig.add_trace(go.Box(y=df.dew_temp_c,name='Dew Temp C'))\nfig.add_trace(go.Box(y=df.relative_humidity,name='Relative Humidity'))\nfig.add_trace(go.Box(y=df.sea_level_pressure,name=\"Sea Level Pressure\"))\nfig.add_trace(go.Box(y=df.precipitation_in_1_hr,name='Precipitation in 1 Hour'))\niplot(fig,filename='hist-features.html')","b4e2611b":"onpeak = df[df.hours > 6]\nonpeak = onpeak[onpeak.hours < 23]\nfig = px.histogram(onpeak, x=\"mean_price\",marginal=\"violin\")\niplot(fig, filename='onpeak_meanprice_histogram.html')","49970248":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(onpeak.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap')\nplt.show()","8e31f30c":"fig = px.scatter(onpeak, x=\"mean_price\", y=\"henry\", color=\"henry\", marginal_y=\"violin\", marginal_x=\"box\", trendline=\"ols\", template=\"simple_white\") #trendline = \"lowess\"\niplot(fig, filename = 'HenryHub-mean')","7a5c2b1a":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(df[['mean_price','henry','wind_speed_ms','ceiling_height_dimension','air_temp_c','dew_temp_c','relative_humidity','sea_level_pressure','precipitation_in_1_hr']].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap')\nplt.show()","60dc850e":"date = []\nfor i in df.hour:\n    i = str(i)\n    d1 = datetime.datetime.strptime(i,\"%Y-%m-%d %H:%M:%S\")\n    new_format = \"%m\"\n    date.append(d1.strftime(new_format))\ndf.insert(0,'months',date,True)","d6dcebcd":"dff=df[['months','hours','hour','mean_price','henry','wind_speed_ms','ceiling_height_dimension','air_temp_c','dew_temp_c','relative_humidity','sea_level_pressure','precipitation_in_1_hr']]\nf,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == \"01\"].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - January')\nplt.show()","b5491f63":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == '02'].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - February')\nplt.show()","f79c7cc9":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == '03'].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - March')\nplt.show()","e3efe9b1":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == '04'].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - April')\nplt.show()","987100a7":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == '05'].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - May')\nplt.show()","81e8bdea":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == '06'].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - June')\nplt.show()","fe3d0fd7":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == '07'].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - July')\nplt.show()","047f1bde":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == '08'].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - August')\nplt.show()","92b96e81":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == '09'].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - September')\nplt.show()","c09678ee":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == '10'].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - October')\nplt.show()","6e973459":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == '11'].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - November')\nplt.show()","52bdfd59":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(dff[dff.months == '12'].corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap - December')\nplt.show()","21473435":"del dff","6b07d875":"new_index = []\nfor i in range(0,len(df)):\n    new_index.append(i)\ndf.index = new_index","ea5084da":"measureheatmap = []\nfor i in range(0,len(df)):\n    measureheatmap.append(float(df.mean_price[i]*df.henry[i]))\ndf.insert(9,'measureheatmap',measureheatmap,True)\ndf.info()","9355f9d5":"df.head()","05a781e3":"print('Measuring Heat Map - Describe:')\nprint(df.measureheatmap.describe())","97a023ce":"trace_1_0 = go.Scatter( x = df.hour, y=df.measureheatmap, name = \"Measure Heat Map\", line = dict(color = '#332CA8'), opacity = 1.0)\ndata = [trace_1_0]\nlayout = dict( title = 'Measure Heat Map = Settlement Point Price X Henry Hub NG Spot Price')\nfig = dict(data=data, layout=layout)\niplot(fig, filename = 'measure-heatmap.html')","9e60df80":"fig = px.histogram(df, x=\"measureheatmap\",marginal=\"box\")\niplot(fig, filename='measure_heatmap_histogram.html')","cbc57d5a":"ft = ['hour','measureheatmap','henry','wind_speed_ms','ceiling_height_dimension','air_temp_c','dew_temp_c','relative_humidity','sea_level_pressure','precipitation_in_1_hr']\ndata = df.copy()\ndata = data[ft]\ndata.hour = pd.to_datetime(data.hour)\nhour = data['hour'].dt.hour\ndayofweek = data['hour'].dt.dayofweek\nquarter = data['hour'].dt.quarter\nmonth = data['hour'].dt.month\nyear = data['hour'].dt.year\ndayofyear = data['hour'].dt.dayofyear\ndayofmonth = data['hour'].dt.day\nweekofyear = data['hour'].dt.weekofyear\ndata.insert(0,'hours',hour,True)\ndata.insert(1,'dayofweek',dayofweek,True)\ndata.insert(2,'quarter',quarter,True)\ndata.insert(3,'month',month,True)\ndata.insert(4,'year',year,True)\ndata.insert(5,'dayofyear',dayofyear,True)\ndata.insert(6,'dayofmonth',dayofmonth,True)\ndata.insert(7,'weekofyear',weekofyear,True)\njan = data[data.year == 2015]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.measureheatmap[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'january',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(2,'february',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(3,'march',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(4,'april',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(5,'may',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(6,'june',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(7,'july',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 8]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(8,'august',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 9]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(9,'september',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 10]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(10,'october',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 11]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(11,'november',x,True)\nfeb = data[data.year == 2015]\nfeb = feb[feb.month == 12]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(12,'december',x,True)\nft = ['january','february','march','april','may','june','july','august','september','october','november','december']\nplt.figure(figsize=(20,15))\nplt.title('Measuring heatmap for the average hourly price with a monthly view for 2015')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","d62245f3":"ft = ['hour','measureheatmap','henry','wind_speed_ms','ceiling_height_dimension','air_temp_c','dew_temp_c','relative_humidity','sea_level_pressure','precipitation_in_1_hr']\ndata = df.copy()\ndata = data[ft]\ndata.hour = pd.to_datetime(data.hour)\nhour = data['hour'].dt.hour\ndayofweek = data['hour'].dt.dayofweek\nquarter = data['hour'].dt.quarter\nmonth = data['hour'].dt.month\nyear = data['hour'].dt.year\ndayofyear = data['hour'].dt.dayofyear\ndayofmonth = data['hour'].dt.day\nweekofyear = data['hour'].dt.weekofyear\ndata.insert(0,'hours',hour,True)\ndata.insert(1,'dayofweek',dayofweek,True)\ndata.insert(2,'quarter',quarter,True)\ndata.insert(3,'month',month,True)\ndata.insert(4,'year',year,True)\ndata.insert(5,'dayofyear',dayofyear,True)\ndata.insert(6,'dayofmonth',dayofmonth,True)\ndata.insert(7,'weekofyear',weekofyear,True)\njan = data[data.year == 2016]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.measureheatmap[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'january',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(2,'february',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(3,'march',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(4,'april',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(5,'may',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(6,'june',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(7,'july',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 8]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(8,'august',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 9]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(9,'september',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 10]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(10,'october',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 11]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(11,'november',x,True)\nfeb = data[data.year == 2016]\nfeb = feb[feb.month == 12]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(12,'december',x,True)\nft = ['january','february','march','april','may','june','july','august','september','october','november','december']\nplt.figure(figsize=(20,15))\nplt.title('Measuring heatmap for the average hourly price with a monthly view for 2016')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","0526c084":"ft = ['hour','measureheatmap','henry','wind_speed_ms','ceiling_height_dimension','air_temp_c','dew_temp_c','relative_humidity','sea_level_pressure','precipitation_in_1_hr']\ndata = df.copy()\ndata = data[ft]\ndata.hour = pd.to_datetime(data.hour)\nhour = data['hour'].dt.hour\ndayofweek = data['hour'].dt.dayofweek\nquarter = data['hour'].dt.quarter\nmonth = data['hour'].dt.month\nyear = data['hour'].dt.year\ndayofyear = data['hour'].dt.dayofyear\ndayofmonth = data['hour'].dt.day\nweekofyear = data['hour'].dt.weekofyear\ndata.insert(0,'hours',hour,True)\ndata.insert(1,'dayofweek',dayofweek,True)\ndata.insert(2,'quarter',quarter,True)\ndata.insert(3,'month',month,True)\ndata.insert(4,'year',year,True)\ndata.insert(5,'dayofyear',dayofyear,True)\ndata.insert(6,'dayofmonth',dayofmonth,True)\ndata.insert(7,'weekofyear',weekofyear,True)\njan = data[data.year == 2017]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.measureheatmap[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'january',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(2,'february',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(3,'march',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(4,'april',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(5,'may',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(6,'june',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(7,'july',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 8]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(8,'august',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 9]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(9,'september',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 10]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(10,'october',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 11]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(11,'november',x,True)\nfeb = data[data.year == 2017]\nfeb = feb[feb.month == 12]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(12,'december',x,True)\nft = ['january','february','march','april','may','june','july','august','september','october','november','december']\nplt.figure(figsize=(20,15))\nplt.title('Measuring heatmap for the average hourly price with a monthly view for 2017')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","005c21f2":"ft = ['hour','measureheatmap','henry','wind_speed_ms','ceiling_height_dimension','air_temp_c','dew_temp_c','relative_humidity','sea_level_pressure','precipitation_in_1_hr']\ndata = df.copy()\ndata = data[ft]\ndata.hour = pd.to_datetime(data.hour)\nhour = data['hour'].dt.hour\ndayofweek = data['hour'].dt.dayofweek\nquarter = data['hour'].dt.quarter\nmonth = data['hour'].dt.month\nyear = data['hour'].dt.year\ndayofyear = data['hour'].dt.dayofyear\ndayofmonth = data['hour'].dt.day\nweekofyear = data['hour'].dt.weekofyear\ndata.insert(0,'hours',hour,True)\ndata.insert(1,'dayofweek',dayofweek,True)\ndata.insert(2,'quarter',quarter,True)\ndata.insert(3,'month',month,True)\ndata.insert(4,'year',year,True)\ndata.insert(5,'dayofyear',dayofyear,True)\ndata.insert(6,'dayofmonth',dayofmonth,True)\ndata.insert(7,'weekofyear',weekofyear,True)\njan = data[data.year == 2018]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.measureheatmap[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'january',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(2,'february',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(3,'march',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(4,'april',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(5,'may',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(6,'june',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(7,'july',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 8]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(8,'august',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 9]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(9,'september',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 10]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(10,'october',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 11]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(11,'november',x,True)\nfeb = data[data.year == 2018]\nfeb = feb[feb.month == 12]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(12,'december',x,True)\nft = ['january','february','march','april','may','june','july','august','september','october','november','december']\nplt.figure(figsize=(20,15))\nplt.title('Measuring heatmap for the average hourly price with a monthly view for 2018')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","7e96e102":"ft = ['hour','measureheatmap','henry','wind_speed_ms','ceiling_height_dimension','air_temp_c','dew_temp_c','relative_humidity','sea_level_pressure','precipitation_in_1_hr']\ndata = df.copy()\ndata = data[ft]\ndata.hour = pd.to_datetime(data.hour)\nhour = data['hour'].dt.hour\ndayofweek = data['hour'].dt.dayofweek\nquarter = data['hour'].dt.quarter\nmonth = data['hour'].dt.month\nyear = data['hour'].dt.year\ndayofyear = data['hour'].dt.dayofyear\ndayofmonth = data['hour'].dt.day\nweekofyear = data['hour'].dt.weekofyear\ndata.insert(0,'hours',hour,True)\ndata.insert(1,'dayofweek',dayofweek,True)\ndata.insert(2,'quarter',quarter,True)\ndata.insert(3,'month',month,True)\ndata.insert(4,'year',year,True)\ndata.insert(5,'dayofyear',dayofyear,True)\ndata.insert(6,'dayofmonth',dayofmonth,True)\ndata.insert(7,'weekofyear',weekofyear,True)\njan = data[data.year == 2019]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.measureheatmap[jan.hours == i]))\n    day.append(i)\nfirst = pd.DataFrame()\nfirst.insert(0,'hours',day,True)\nfirst.insert(1,'january',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(2,'february',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(3,'march',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(4,'april',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(5,'may',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(6,'june',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(7,'july',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 8]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(8,'august',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 9]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(9,'september',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 10]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(10,'october',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 11]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(11,'november',x,True)\nfeb = data[data.year == 2019]\nfeb = feb[feb.month == 12]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nfirst.insert(12,'december',x,True)\nft = ['january','february','march','april','may','june','july','august','september','october','november','december']\nplt.figure(figsize=(20,15))\nplt.title('Measuring heatmap for the average hourly price with a monthly view for 2019')\nax = sns.heatmap(first[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","381a8a59":"jan = data[data.year == 2020]\njan = jan[jan.month == 1]\nday = []\nx = []\nfor i in range(0,24):\n    x.append(np.mean(jan.measureheatmap[jan.hours == i]))\n    day.append(i)\nsecond = pd.DataFrame()\nsecond.insert(0,'hours',day,True)\nsecond.insert(1,'january',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 2]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nsecond.insert(2,'february',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 3]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nsecond.insert(3,'march',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 4]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nsecond.insert(4,'april',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 5]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nsecond.insert(5,'may',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 6]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nsecond.insert(6,'june',x,True)\nfeb = data[data.year == 2020]\nfeb = feb[feb.month == 7]\nx = []\nfor i in range(0,24):\n    x.append(np.mean(feb.measureheatmap[feb.hours == i]))\nsecond.insert(7,'july',x,True)\nft = ['january','february','march','april','may','june','july']\nplt.figure(figsize=(15,8))\nplt.title('Measuring heatmap for the average hourly price with a monthly view for 2020')\nax = sns.heatmap(second[ft],linewidth=.5, annot=True, fmt=\"f\")\nplt.show()","8f4ed650":"onpeak = data[data.hours > 6]\nonpeak = onpeak[onpeak.hours < 23]\nfig = px.histogram(onpeak, x=\"measureheatmap\",marginal=\"violin\")\niplot(fig, filename='onpeak_measureheatmap.html')","7471be09":"f,ax = plt.subplots(figsize=(10, 6))\nsns.heatmap(onpeak.corr(), annot=True, linewidths=0.5,linecolor=\"red\", fmt= '.1f',ax=ax)\nplt.title('Heatmap')\nplt.show()","67a2a720":"# <a id=\"11\">1.1 Loading Libraries<\/a>\nUsed libraries in this study as follows:\n* NumPy\n* pandas\n* matplotlib\n* seaborn\n* plotly\n* kaggle_secrets\n* requests\n* JSON\n* DateTime ","df957e0e":"As the *settlement_point_name* column is unique, we can exclude this column from the analysis. ","7152126d":"# <a id=\"41\">4.1 UPLOAD DATA<\/a>","d8f114dd":"# NG Futures Contract 1 Price - Interpolation","212b8b07":"# SEA LEVEL PRESSURE","78e9e12e":"# NG Futures Contract 3 Price - Interpolation","c86c04b5":"# <a id=\"22\">2.2 EXAMINATION of DATA<\/a>\nAs the data is collected with 15 minutes intervals, we will look at the data and check if there are missing data at certain hours (4 records per hour) and\/or dates (96 records per day).","a3ccd21b":"# Henry Hub NG Spot Price - Interpolation","2926a132":"# <a id=\"23\">2.3 PREPARATION of DATA<\/a>\nAt this step of the process, the missing hours or dates are added, then the price for these respective hours and dates are interpolated. ","77b977d0":"Separating the date column, a new feature \u201cdate_0\u201d is derived from the existing \u201copr_ts\u201d: \n* opr_ts: YYYY-MM-DDTHH:MM:SS.000+0000 \n* date_0: YYYY-MM-DD HH:MM:SS ","a8506ae9":"As there are new rows inserted into the dataset, we sort the data as per the \u201cdate\u201d column, which sorts the data by the date and time. ","950f40cc":"For compatibility with the other two datasets used, we need to convert 15-mins electricity prices data to an hourly data. Once the conversion is done, these three datasets can be merged into one. ","a8033f67":"Once the missing hours \/ dates are added, it is time to fill the missing price values. ","7046256c":"# Air Temp C & Dew Temp C","af402d2b":"# <a id=\"1\">1. INTRODUCTION TO NOTEBOOK<\/a>\nWe will make our research based on three datasets available ALTADATA Marketplace: \n* [ERCOT (Texas) 15 Min. Real Time Market Prices](https:\/\/www.altadata.io\/product\/ercot-texas-15-min-real-time-market-electricity-prices-10da60da-6509-4b42-9a3c-567f03b94970) \n* [Historical Daily Natural Gas Spot and Futures Prices](https:\/\/www.altadata.io\/product\/historical-daily-natural-gas-spot-and-futures-prices-13e2b3e0-2ded-4e94-ba22-44f26fb2714a) \n* [Historical Surface Weather Data at 100 Airports](https:\/\/www.altadata.io\/product\/historical-surface-weather-data-at-100-airports-a3ae0b5a-e931-41d7-8bc5-6542814d06cb)<br>\n\nThe sample data used in this study is limited to Texas as a settlement point, which will be explained more in the next sections. ","cf1bdb4b":"# <a id =\"61\">6.1 CORRELATION of DATA<\/a>\nIn this section, we look for the correlation between some features of the data, such as: \n* Average Prices of Energy \n* Natural Gas Price \n* Wind Speed ms \n* Ceiling Height Dimension \n* Air Temp C \n* Dew Temp C \n* Relative Humidity \n* Sea Level Pressure \n* Precipitation in 1 Hour ","93b8f5ec":"# <a id=\"51\">5.1 EXAMINING DATA of MERGE<\/a>\nAfter merging all the datasets, we will examine the whole data again and re-analyze.","54249533":"# <a id=\"2\">2. ERCOT (Texas) 15 Min. Real Time Market Prices<\/a>\n15 minutes Settlement Point Prices (SPPs) for Load Zones and Hubs in $\/MWh\n# - Overview\nThis data product offers fifteen-minute interval prices for all Load Zones and Hubs in ERCOT (Texas).\nA price calculated for a Settlement Point for each Settlement Interval using Locational Marginal Price (LMP) data, Settlement Calculations for the Real-Time Energy Operations.\n\n# - Applications\n* Short-term commitments (forecast) of Settlement Point Prices (SPPs)\n* Seasonal average and distribution of price\n* Historical trade area and regional price analysis\n* Valuation of Power Purchase Agreements (PPA's)\n\n# - Columns\n* **opr_ts :** Operation Timestamp **(YYYY-MM-DD HH:MM:SS)**\n* **settlement_point_name :** Settlement Point Name **(HB_SOUTH)**\n* **settlement_point_price :** Settlement Point Price **$\/MWh**\n\n    [Read More ->](https:\/\/www.altadata.io\/product\/ercot-texas-15-min-real-time-market-prices-10da60da-6509-4b42-9a3c-567f03b94970)","0857c2ed":"# CEILING HEIGHT DIMENSION","3f2d6b25":"# <a id = \"7\">7. MEASURING HEATMAP<\/a>\nIn this section, we calculate the measuring heatmap. What does measuring heatmap mean? This is the multiplication of the energy prices and the natural gas prices. This is an important insight like the on-peak hours. Also, we visualize measuring heatmap in this section.","a40e9ac0":"The date of the data is deep-dived and any missing dates are searched, confirming the integrity of the data with full range. ","ed89fd9f":"# <a id = \"62\">6.2 CORRELATION of MONTHS<\/a>\nIn this section, we look at the correlation by months. This correlation includes same features as mentioned in the previous section.","c72a8de0":"# <a id = \"73\">7.3 VISUALIZATION<\/a>\nIn this section, we visualize correlation between measure heatmap and other features.","ef173d82":"# <a id = \"6\">6. CORRELATION BETWEEN ELECTRICITY PRICES, GAS PRICES, and THE WEATHER<\/a>\nIn this section, we examine the correlation between used datasets.","3f79d37d":"# <a id=\"72\">7.2 BY MONTHS, YEARS<\/a>\nIn this section, we visualize measuring heatmap by months and years.","9420d9ce":"# <a id=\"3\">3. Historical Daily Natural Gas Spot and Futures Prices<\/a>\nHistorical Henry Hub natural gas spot and futures prices.\n\n# - Overview\nThis product provides the historical natural gas prices for Henry Hub and contracts.\n\nHenry Hub is a natural gas pipeline located in Erath, Louisiana, the third-largest physical commodity futures contract in the world by volume, that serves as the official delivery location for futures contracts on the New York Mercantile Exchange (NYMEX). The hub is owned by Sabine Pipe Line LLC and has access to many of the major gas markets in the United States. The hub connects to four intrastate and nine interstate pipelines, including the Transcontinental, Acadian and Sabine pipelines.\n\nPrices are based on delivery at the Henry Hub in Louisiana. The natural gas liquids (NGPL) composite price is derived from daily Bloomberg spot price data for natural gas liquids at Mont Belvieu, Texas, weighted by gas processing plant production volumes of each product.\n\n# - Applications\n* Natural gas price forecast<br>\n* Short\/Long term energy outlook<br>\n* Investment decision support<br>\n* Comparison with other energy resources<br>\n\n# - Columns\n* **date :** Date **(YYYY-MM-DD)**<br>\n* **henry_hub_ng_spot_price:** Henry Hub NG Spot Price<br>\n* **ng_futures_contract1_price:** NG Futures Contract 1<br>\n* **ng_futures_contract2_price:** NG Futures Contract 2<br>\n* **ng_futures_contract3_price:** NG Futures Contract 3<br>\n* **ng_futures_contract4_price:** NG Futures Contract 4<br>\n\n    [Read More ->](https:\/\/www.altadata.io\/product\/historical-daily-natural-gas-spot-and-futures-prices-13e2b3e0-2ded-4e94-ba22-44f26fb2714a)","6ac5f64a":"# DEW TEMP C","2231e8b7":"# HENRY HUB NG SPOT PRICE - DATE","de5ba071":"# <a id=\"21\">2.1 UPLOAD DATA<\/a>\nAs mentioned earlier, the sample data used for this study is limited for Texas Settlement Point and the available date range is between 2015-01-01 and 2020-07-29.","ecba8d2c":"# <a id=\"#55\"> 5.5 ON-PEAK<\/a>\nIn this section, we examine another important insight, \"on-peak \". What does it mean? It is the time period when the electricity is used more, like peak hours. For this dataset, the \u201con-peak\u201d hours are between 7AM and 11PM.","8b90735d":"# WIND SPEED MS","668a68ff":"# <a id=\"53\">5.3 AVERAGE ENERGY PRICES by MONTHS and YEARS<\/a>\nIn this section, we create new insights, such as showing average hourly energy prices by months or years. ","615ebb77":"# HENRY HUB NG SPOT PRICE - NG FUTURES CONTRACT 3 PRICE","1c0bd1ad":"# SKY CONDITION","9f704ba9":"# <a id=\"52\">5.2 DETECTION of OUTLIER ENERGY PRICE<\/a>\nAs the gas and weather data is brought on the top of the electricity price data, now we can better comment on the outliers with these additional information we have for the given date and time. Outlier detection is based on whether the standard deviation is greater than 6. ","96272770":"# WIND DIRECTION ANGLE","5d00d98f":"# <a id=\"4\">4. HISTORICAL SURFACE WEATHER DATA at 100 AIRPORTS<\/a>\nHistorical hourly weather observations from 100 busiest airport station around the world\n\n# - OVERVIEW\nThis data product provides a long-term record of hourly weather observations from station networks at 100 busiest airport in the world.\n\nObservation sources include the World Meteorological Organization, Automated Surface Observing System, Automated Weather Observing Stations, US Climate Reference Network, and others.\n\nWeather elements observed include sky conditions, visibility, weather type, dry bulb, wet bulb, and dew point temperatures, relative humidity, wind speed and direction, wind gusts, station and sea level pressure, altimeter, and precipitation.\n\nYou can use this data either for climate change research or renewable investment projects or extreme event analysis.\n# - APPLICATIONS\n\n* Observe and analyze climate trends\n* Generate probability distributions for solar isolation and wind speed by location\n* Analyze frequency of extreme weather events\n* Correlate renewable energy production with resource availability at the plant location\n\n# - COLUMNS\n* **observation_local_time:** Observation Localtime\t**(YYYY-MM-DD HH:MM:SS)**\n* **wind_direction_angle:**\tWind Direction Angle\t\t\n* **wind_direction:** Wind Direction\t\n* **wind_type_code:** Wind Type Code\t\n* **wind_speed_ms:** Wind Speed\t\n* **ceiling_height_dimension:** Ceiling Height Dimension\t\n* **visibility_distance_dimension:** Visibility Distance Dimension\t\n* **air_temp_c:** Air Temp in Celsius **Celsius**\t\n* **dew_temp_c:** DEW Point Temperature\t**Degrees Celsius**\t\n* **relative_humidity:** Relative Humidity **Percent**\n* **sea_level_pressure:** Sea Level Pressure **Hectopascals**\n* **precipitation_in_1_hr:** Precipitation (1hr) **Millimeter**\n* **sky_cond:** Sky Condition\t\n* **weather_cond:** Weather Condition\t\n   [Read More ->](https:\/\/www.altadata.io\/product\/historical-surface-weather-data-at-100-airports-a3ae0b5a-e931-41d7-8bc5-6542814d06cb)","8026d7d3":"# WIND TYPE CODE","a36bf21d":"# HENRY HUB NG SPOT PRICE - NG FUTURES CONTRACT 1 PRICE","ce2ee1b2":"# <a id = \"71\">7.1 CALCULATION of MEASURING HEATMAP<\/a>\nMEASURING HEATMAP = ENERGY PRICES * NATURAL GAS PRICES","ddb2436f":"# <a id=\"5\">5. MERGE OF USED DATASETS<\/a>\nWhen merging the datasets, the combination will be based on the same date-time, so that in addition to the electricity price, the gas price and the weather data will be given for the same timeslot. ","359325ca":"# RELATIVE HUMIDITY","76783538":"# HENRY HUB NG SPOT PRICE - NG FUTURES CONTRACT 2 PRICE","59ad8d3f":"# WIND DIRECTION","924b596b":"# <a id=\"13\">1.3 Create Functions to Use<\/a>\nIn this section, you may find the functions created for this study. These functions are used for detecting the outliers and temporal deficiencies of the relevant data. ","96ec505b":"\u201c*settlement_point_price*\u201d column has 24 missing values. We use linear interpolation method to fill these missing values. You can see these missing values at the given plot for these dates: \n* 2015-03-08 \n* 2016-03-13 \n* 2017-03-12 \n* 2018-03-11 \n* 2019-03-10 \n* 2020-03-08 ","ca9951b7":"# <a id=\"33\">3.3 PREPARATION of DATA<\/a>\nAt this step of the process, the missing dates are added, then the price for these respective dates are interpolated. ","86af1628":"# WEATHER CONDITION","916bef86":"# HENRY HUB NG SPOT PRICE - NG FUTURES CONTRACT 4 PRICE","1f9b4283":"# <a id=\"34\">3.4 VISUALIZATION of DATA<\/a>","1e0b48c4":"# <a id=\"#54\">5.4 STATISTICAL ANALYSIS of MERGED DATA<\/a>\nIn this section, we examine statistical distributions of dataset features. ","1aa49972":"# NG Futures Contract 4 Price","884e567b":"Maximum settlement point price is 9000 and minimum settlement point price is -251. What do they mean? \n* An extraordinary event might have happened when it reached to the maximum price \n* The negativity at the minimum price can be due to the unsold produced electricity ","e94e64a2":"![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F5505749%2Fe69d0a5f57838b0fc4545f97d0695330%2Fsadasd%20-%20Kopya.png?generation=1599228560894476&alt=media)\n# DATA ANALYSIS ELECTRICITY PRICE FORECAST IN TEXAS\n**In this notebook we will analyze and model the Electricity Price Forecast in Texas, based on the historical data since January 2015. All datasets used in this study are proprietary of [ALTADATA](https:\/\/www.altadata.io\/).**\n\n**Content:**\n1. [Introduction to Notebook:](#1)\n    1. [Loading Libraries](#11)\n    1. [Setting Data with API Key](#12)\n    1. [Create Functions to Use](#13)\n1. [ERCOT (Texas) 15 Min. Real Time Market Prices:](#2)\n    1. [Upload Data](#21)\n    1. [Examination of Data](#22)\n    1. [Preparation of Data](#23)\n1. [Historical Daily Natural Gas Spot and Futures Prices:](#3)\n    1. [Upload Data](#31)\n    1. [Examination of Data](#32)\n    1. [Preparation of Data](#33)\n    1. [Visualization of Data](#34)  \n1. [Historical Surface Weather Data at 100 Airports:](#4)\n    1. [Upload Data](#41)\n    1. [Examination of Data](#42)\n    1. [Preparation of Data](#43)\n    1. [Visualization of Data](#44)  \n1. [Merge of Used Datasets:](#5)\n    1. [Examining Merge Data](#51)\n    1. [Detect the Outliers](#52)\n    1. [Average Energy Price for Months](#53)\n    1. [Average Energy Prices in Months](#54)\n    1. [Statistical Analysis of Merged Data](#55)\n    1. [Create Peak On](#56)\n1. [Correlation between electricity prices, gas prices and the weather:](#6)\n    1. [Correlation of Data](#61)\n    1. [Correlation by Months](#62)\n1. [Measuring Heatmap:](#7)\n    1. [Settlement point price X henry hub spot price](#71)\n    1. [By Months, Years, Hours ](#72)\n    1. [Visualization of Measuring Heatmap](#73)","de922483":"Once the data is uploaded, we will seek the answers to the below questions: \n* How many columns does it have? \n* What is the data type of the columns? \n* How many rows does it have? \n* Is there missing value? ","ed94f532":"# NG Futures Contract 2 Price - Interpolation","43ae3051":"# PRECIPITATION in 1 HOUR","ff1d96a8":"# <a id=\"31\">3.1 UPLOAD DATA<\/a>","af73d250":"# <a id=\"44\">4.4 VISUALIZATION of DATA<\/a>","a009d656":"# AIR TEMP C","86e9c562":"# <a id=\"42\">4.2 EXAMINATION of DATA<\/a>","626189c5":"# <a id=\"43\">4.3 PREPARATION of DATA<\/a>\nAt this step of the process, the missing hours are added, then the price for these respective hours are interpolated.","2be2be1e":"# <a id=\"32\">3.2 EXAMINATION of DATA<\/a>","04032126":"# <a id=\"12\">1.2 Setting Data with API Key<\/a>\nkaggles_secret is used for the data security and privacy. All used datasets have product codes given by ALTADATA. These codes are as follows:  <br>\n* ERCOT (Texas) 15 Min. Real Time Market Prices -> en_01_ercot_04<br>\n* Historical Daily Natural Gas Spot and Futures Prices -> en_08_eiaxx_01<br>\n* Historical Surface Weather Data at 100 Airports -> ev_01_altab_04<br>\n[for usage of kaggles secret->](https:\/\/www.youtube.com\/watch?v=6gkLPC14_tI)"}}