{"cell_type":{"08702fa4":"code","7a87d8c2":"code","a56ffbe4":"code","305d6362":"code","cc381b87":"code","5e369d48":"code","b2ee48ed":"code","d9f4c756":"code","5c9de950":"code","416fa34c":"code","b07d7dc2":"code","c767982b":"code","9dade176":"code","cb4f3e9b":"code","6e8d7465":"code","dc7398e3":"code","c91d4506":"code","117de706":"code","aba29156":"code","23be5fea":"code","7823e7f2":"code","4d5e2cc0":"code","af94d6d0":"code","c9fe2dd6":"code","7f89e702":"code","4bdb8f56":"code","017ff8e5":"code","4b059850":"code","0ec2ac84":"code","18c39d83":"code","b4925a89":"code","0bdf1e45":"code","e5cb9884":"code","a5c0f2a7":"code","2f90227b":"code","4bb74fad":"code","09333621":"code","80bdae32":"code","dcce4bfb":"code","7ce3238b":"code","477442e6":"code","a95ee628":"markdown","0b46a58a":"markdown","4e9254b0":"markdown","9b58350d":"markdown","99f3fb14":"markdown","398847f0":"markdown","21d31006":"markdown","78c9f175":"markdown"},"source":{"08702fa4":"# imports\n# pandas \nimport pandas as pd\n# numpy\nimport numpy as np\n# matplotlib \nimport matplotlib.pyplot as plt\n#%matplotlib inline\nplt.style.use('ggplot')\n# seaborn\nimport seaborn as sns","7a87d8c2":"df = pd.read_csv('https:\/\/raw.githubusercontent.com\/pawan-97\/Datasets\/FDS--LAB\/House_prices_prediction.csv')\n","a56ffbe4":"# Columns\nprint(\"\\n*** Columns ***\")\nprint(df.columns)","305d6362":"# info\nprint(\"\\n*** Structure ***\")\nprint(df.info())","cc381b87":"# summary\nprint(\"\\n*** Summary ***\")\nprint(df.describe())\n","5e369d48":"# head\nprint(\"\\n*** Head ***\")\nprint(df.head())\n","b2ee48ed":"df.columns","d9f4c756":"# drop cols\n# change as required\nprint(\"\\n*** Drop Cols ***\")\ndf = df.drop(['Id','Alley','FireplaceQu','PoolQC','Fence','MiscFeature'], axis=1)\nprint(\"Done ...\")\n","5c9de950":"# info\nprint(\"\\n*** Structure ***\")\nprint(df.info())","416fa34c":"# Categoric Columns\ncolumns = df.columns\ncat = []\nfor col in columns:\n  if df[col].dtypes=='object':\n    cat.append(col)\nprint(cat)","b07d7dc2":"# Uniques Values\nfor col in cat:\n  print(col ,':',len(df[col].unique()), df[col].unique())","c767982b":"# Convert Categoric to Numeric \ncat_col_to_numeric = pd.get_dummies(df, columns=cat,drop_first=False)","9dade176":"# Head \ncat_col_to_numeric.head()","cb4f3e9b":"cat_col_to_numeric.shape\n","6e8d7465":"# Dropping categoric columns from the data\ndf = df.drop(cat,axis=1)","dc7398e3":"# Concatenate\ndf_new = pd.concat([df,cat_col_to_numeric])","c91d4506":"df_new.head()","117de706":"df_new.shape","aba29156":"X = df_new.drop('SalePrice',axis=1)\ny = df_new['SalePrice']","23be5fea":"# Handling Null values\nfrom sklearn.impute import SimpleImputer\n\nimputer = SimpleImputer()\nimputer.fit(X)\n","7823e7f2":"X_imp = imputer.transform(X)","4d5e2cc0":"X_imp","af94d6d0":"# standardization \nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_imp)\nX_imp_stdz = scaler.transform(X_imp)","c9fe2dd6":"X_imp_stdz","7f89e702":"# regression summary for feature\nprint(\"\\n*** Regression Summary Again ***\")\nimport statsmodels.api as sm\nX_rs = sm.add_constant(X_imp_stdz)\n\nOlsSmry = sm.OLS(y, X_rs)\nLRModel = OlsSmry.fit()\nprint(LRModel.summary())\n\n","4bdb8f56":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_imp_stdz,y,test_size=0.2, random_state=0)","017ff8e5":"# imports \nprint(\"\\n*** Import Regression Libraries ***\")\n# normal linear regression\nfrom sklearn.linear_model import LinearRegression \n# ridge regression from sklearn library \nfrom sklearn.linear_model import Ridge \n# import Lasso regression from sklearn library \nfrom sklearn.linear_model import Lasso \n# import ElasticNet model \nfrom sklearn.linear_model import ElasticNet \nprint(\"Done ...\")\n\n# list model name list\nprint(\"\\n*** Init Models Lists ***\")\nlModels = []\nlModels.append((\"LinearRegression  \", LinearRegression()))\nlModels.append((\"RidgeRegression   \", Ridge(alpha = 10)))\nlModels.append((\"LassoRegression   \", Lasso(alpha = 1)))\nlModels.append((\"ElasticNet        \", ElasticNet(alpha = 1)))\nfor vModel in lModels:\n    print(vModel)\nprint(\"Done ...\")","4b059850":"# blank list to store results\nprint(\"\\n*** Cross Validation Init ***\")\nxvModNames = []\nxvRmseScrs = []\nxvSDScores = []\nprint(\"Done ...\")","0ec2ac84":"# cross validation\nfrom sklearn import model_selection\nfrom sklearn.model_selection import cross_val_score\n#import sklearn\n#print(sorted(sklearn.metrics.SCORERS.keys()))\nprint(\"\\n*** Cross Validation ***\")\n# iterate through the lModels\nfor vModelName, oModelObj in lModels:\n    # select xv folds\n    kfold = model_selection.KFold(n_splits=5, shuffle=True, random_state=707)\n    # actual corss validation\n    cvRmse = cross_val_score(oModelObj, X_imp_stdz, y, cv=kfold, scoring='neg_root_mean_squared_error')\n    # prints result of cross val ... scores count = lfold splits\n    print(vModelName,\":  \",cvRmse)\n    # update lists for future use\n    xvModNames.append(vModelName)\n    xvRmseScrs.append(cvRmse.mean())\n    xvSDScores.append(cvRmse.std())\n","18c39d83":"# cross val summary\nprint(\"\\n*** Cross Validation Summary ***\")\n# header\nmsg = \"%16s: %10s %8s\" % (\"Model\", \"xvRM      \", \"xvStdDev\")\nprint(msg)\n# for each model\nfor i in range(0,len(lModels)):\n    # print rmse mean & std\n    msg = \"%10s: %5.7f %5.7f\" % (xvModNames[i], xvRmseScrs[i], xvSDScores[i])\n    print(msg)\n","b4925a89":"# find model with best xv accuracy & print details\nprint(\"\\n*** Best XV RMSE Model ***\")\nxvIndex = xvRmseScrs.index(max(xvRmseScrs))\nprint(\"Index      : \",xvIndex)\nprint(\"Model Name : \",xvModNames[xvIndex])\nprint(\"XVRMSE     : \",xvRmseScrs[xvIndex])\nprint(\"XVStdDev   : \",xvSDScores[xvIndex])\nprint(\"Model      : \",lModels[xvIndex])\n\n","0bdf1e45":"# imports metrics\nprint(\"\\n*** Import Metrics ***\")\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nprint(\"Done ...\")\n ","e5cb9884":"# regression model\nprint(\"\\n*** Regression Model ***\")\n# create model\nmodel = ElasticNet()\n# fit or train the model\nmodel.fit(X_train, y_train) \nprint(\"Done ...\")","a5c0f2a7":"# predict train dataset \nprint(\"\\n*** Predict - Train Data ***\")\np_train = model.predict(X_train)\nprint(p_train)","2f90227b":"# predict test dataset\nprint(\"\\n*** Predict - Test Data ***\")\np_test = model.predict(X_test)\nprint(p_test)\n","4bb74fad":"# R-Square\nprint('\\n*** R-Square ***')\nr2 = r2_score(y_train, p_train)\nprint(r2)\n","09333621":"# adj r-square  \nprint('\\n*** Adj R-Square ***')\nadj_r2 = (1 - (1 - r2) * ((X_train.shape[0] - 1) \/ \n          (X_train.shape[0] - X_train.shape[1] - 1)))\nprint(adj_r2)","80bdae32":"# mae \nprint(\"\\n*** Mean Absolute Error ***\")\nmae = mean_absolute_error(y_test, p_test)\nprint(mae)","dcce4bfb":"# mse \nprint(\"\\n*** Mean Squared Error ***\")\nmse = mean_squared_error(y_test, p_test)\nprint(mse)\n","7ce3238b":"print(\"\\n*** Root Mean Squared Error ***\")\nrmse = np.sqrt(mse)\nprint(rmse)","477442e6":"# scatter index\n# scatter index less than 1; the predictions are decent\nprint('\\n*** Scatter Index ***')\nsi = rmse\/y_test.mean()\nprint(si)\n\n\n","a95ee628":"### Regression - Cross Validation","0b46a58a":"### X and y\n","4e9254b0":"### Split Train & Test","9b58350d":"### EDA","99f3fb14":"### Model Evaluation - Test Data","398847f0":"### Evaluate test data with best model","21d31006":"### Data Transformation","78c9f175":"### Read Data "}}