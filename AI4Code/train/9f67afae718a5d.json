{"cell_type":{"60cbc391":"code","51c88e9f":"code","ff60bd85":"code","af7f2c2d":"code","5166e631":"code","f76b5e6f":"code","32f079ad":"code","997ec992":"code","261463d2":"code","2a83eeef":"code","c1ee75e0":"code","dbdecb6d":"code","cf2e3cfd":"code","30d2cfcb":"code","e6fdd8a5":"code","45c62752":"code","f11cc744":"code","1984ed67":"code","2cfdd5a9":"code","49e46305":"code","dd58be5d":"markdown","8a7fdfcd":"markdown","e3bc4503":"markdown","be0624bd":"markdown"},"source":{"60cbc391":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","51c88e9f":"train = pd.read_json(\"..\/input\/train.json\")\ntest  = pd.read_json(\"..\/input\/test.json\")\nsample_sub = pd.read_csv(\"..\/input\/sample_submission.csv\")","ff60bd85":"from sklearn.preprocessing import MultiLabelBinarizer\ndef count_ingredients():\n    mlb = MultiLabelBinarizer()\n    df = pd.DataFrame(mlb.fit_transform(train['ingredients']),columns=mlb.classes_, index=train.index)\n    df = pd.concat([train,df],axis=1)\n    df = df.drop(\"ingredients\",axis =1)\n    df = df.drop(\"id\",axis =1)\n    df = df.groupby('cuisine').sum()\n    return df","af7f2c2d":"df = count_ingredients()\ndf.head()","5166e631":"dd = pd.DataFrame(np.where(df>0, 1, 0),columns = df.columns)\nfor_only_one = dd.drop([col for col, val in dd.sum().iteritems() if val >=2], axis=1).columns\nfor_only_one_final = df[for_only_one].drop([col for col, val in df[for_only_one].sum().iteritems() if val <3], axis=1).columns","f76b5e6f":"only_one = df[for_only_one_final].transpose()\ndf[for_only_one_final]","32f079ad":"df_only_one = pd.DataFrame(columns=train.cuisine.unique())\n\ndef one(cuisine):\n    for i in cuisine:\n        df_only_one[i] = [only_one[only_one[i]>0].loc[:,i].index.tolist()]\n    return df_only_one.transpose()","997ec992":"df_only_one = one(train.cuisine.unique())\ndf_only_one.head(3)","261463d2":"common_ingredients = df.sum(axis =0).sort_values(ascending=False, axis=0).iloc[:10]\ncommon_ingredients","2a83eeef":"for_all = dd.drop([col for col, val in dd.sum().iteritems() if val <20], axis=1).columns\nfor_all_final = df[for_all].drop([col for col, val in df[for_all].sum().iteritems() if val <1], axis=1).columns","c1ee75e0":"((df[for_all_final].max() - df[for_all_final].min())\/df[for_all_final].max()*100 < 92).unique()","dbdecb6d":"def jojo(list):\n  new_words = [word for word in list if word in df[for_only_one_final].columns]\n  return len(new_words)","cf2e3cfd":"test['jojo'] = test[[\"ingredients\"]].apply(lambda x: jojo(*x), axis=1)","30d2cfcb":"def new_data(list):\n  new_words = [word for word in list if word in k]\n  if len(new_words) > 0:\n    return j\n  else:\n    return","e6fdd8a5":"for j in df_only_one.index:\n  k = df_only_one.loc[j,:]\n  k = sum(k,[])\n  test[j] = test[test[\"jojo\"]>0][[\"ingredients\"]].apply(lambda x: new_data(*x), axis=1)","45c62752":"test[\"cuisine\"] = test[(test[\"jojo\"]>0)].iloc[:,3:-1].apply(lambda x: ' '.join(x.dropna()), axis=1)","f11cc744":"test = test.drop(test.iloc[:,2:-1],axis =1)","1984ed67":"test = test.drop(\"ingredients\",axis = 1)\ntest_to_train = test.dropna()\ntest.head()","2cfdd5a9":"test = test.fillna(\"italian\")","49e46305":"test.to_csv(\"submission.csv\",index = False)","dd58be5d":"**Filled unknown values with \"italian\"**","8a7fdfcd":"**Seeing how many unique items of training data is unique for test data**","e3bc4503":"**Checking items which are used by  only one cuisine but are minimum used thrice **","be0624bd":"**Checking if I can drop values which are used in all cuisines**\n\nDifference between min and max of any item is greater then min. 91% . So dropping common items is not good idea."}}