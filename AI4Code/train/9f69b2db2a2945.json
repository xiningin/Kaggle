{"cell_type":{"231d6fb9":"code","aa9548e0":"code","e35921d0":"code","ddd17890":"code","520ea13c":"code","207c31d9":"code","45042242":"code","0e216eee":"code","8ed592ac":"code","0f1bba15":"code","5ac4846a":"code","bfe609b5":"code","73ae01cc":"code","45395e1f":"code","1396b50d":"code","a16002a3":"code","444633e1":"code","26318fdb":"code","d1b3894d":"code","bac93767":"code","a87836f0":"code","f7151fe4":"code","719cf54c":"code","92a176ee":"code","3a7d8afb":"code","c645dbeb":"code","a64f0127":"code","5336e288":"code","26910116":"code","8d6384f5":"code","83a1e454":"code","1c01cad9":"code","9a128df1":"code","f9663006":"code","548a9e40":"code","2615f504":"code","f8efed83":"code","79879ec5":"code","60648dc3":"code","9caf31c2":"code","99f256f8":"code","faf0dc0c":"code","87859d82":"code","9daa3931":"code","d05d1d77":"code","834e3da0":"code","14f9e8f3":"code","d544e2f7":"code","4f697a4c":"code","6ad28263":"code","c3e270ad":"code","52d401ea":"code","5463eb2d":"code","a9b54486":"code","8239b7d3":"code","5a1af490":"code","af7ea53b":"code","fb70a205":"code","a0e42814":"code","a8cec850":"code","e6f48c3a":"code","0eb269e6":"code","e0c23d7b":"code","df84bf83":"code","bf2bf841":"code","0446421f":"code","ca11f2a1":"code","48153fec":"code","0207aa07":"code","45430c5e":"code","e4cfdc59":"code","3c8b8b13":"code","d173468f":"code","c73d2704":"code","0102f533":"code","1916ecb7":"code","13b23ac5":"code","26e1d931":"code","d93eee73":"code","45dcb3da":"code","54ebf4c4":"code","d578c459":"code","9402284e":"code","6e2b27ee":"code","11aa4d96":"code","290e58af":"code","db2e3da0":"code","4dbbe445":"code","8c98f7ab":"code","f6c98c27":"code","23c6f4a6":"code","9fd4da37":"code","bc5e239b":"code","56ee302e":"code","4dfe18e0":"code","992f0c41":"code","c7f28296":"code","d6697f88":"code","e9b0daa2":"code","8fd790a6":"code","26751a56":"code","7aae7e29":"code","942f075e":"code","dfb2d26f":"code","a278e60d":"code","8ee18a93":"code","d5a747da":"code","01c65223":"code","fd457162":"code","b666807e":"code","3f4a4bbe":"code","2a071eae":"code","69997637":"code","c941efe6":"code","c5cb3729":"code","85612c6e":"code","8580a962":"code","afa74b18":"code","0023d454":"code","9163b9de":"code","f42ebf2f":"code","a3e19f93":"code","cea741d7":"code","514770c2":"code","e430c4ea":"code","0d6f66f4":"code","eef9ebc0":"code","3be0045a":"code","1ac26e7c":"code","3ed992d9":"code","f9b2a4bf":"code","4e12333f":"code","5f6dfab4":"code","37057d7a":"code","062b6bc4":"code","dccf32cc":"code","f8fa47bd":"code","007253a7":"code","3c4522c8":"code","98973b9e":"code","c00cb185":"code","341b9f4b":"code","a55adebf":"code","583a15b4":"code","52b39789":"code","f0b0d35d":"code","175e53ab":"code","b78268f9":"code","23ff7f9e":"code","52f57fdc":"code","bc0af9aa":"code","96c7841e":"code","16d41394":"code","7b9a6703":"code","3c0c4b44":"code","000d9361":"code","b7ead7ee":"code","d698a400":"code","7a6f839b":"code","01f0f9fa":"code","aa859578":"code","db076071":"code","35710bbc":"code","f044a135":"code","fc12b31b":"code","13813362":"code","eb05efec":"code","ca48e775":"code","052aa035":"code","cc0406fb":"code","ae3d31c9":"code","89dafe96":"code","944bfdc5":"code","e1c3371b":"code","7611ee5a":"code","ae01ac19":"code","afdab192":"code","3a2a20ce":"code","313b44b5":"code","4bfbdd66":"code","485a2476":"code","124b10ad":"code","2be01b4a":"code","bfc503fa":"code","f37a40e8":"markdown","9e076010":"markdown","4a3d581b":"markdown","41a0c019":"markdown","26b0ce9c":"markdown","aaf7b258":"markdown","d8365bfc":"markdown","068c865e":"markdown","0ae2105f":"markdown","c9b60110":"markdown","c75456ca":"markdown","433ceaa3":"markdown","5ee6d4aa":"markdown","77e409d5":"markdown","015101a7":"markdown","a0d06e4c":"markdown","7bb3b8ee":"markdown","7c82bac7":"markdown","e2e7d042":"markdown","72f71ae0":"markdown","0dd2dda0":"markdown","8ee2f6fd":"markdown","fd8ddc5a":"markdown","9a78bf53":"markdown","71a763b2":"markdown","68ad53d0":"markdown","bac22441":"markdown","e7be8260":"markdown","0d961300":"markdown","e66ab235":"markdown","e60d8e7c":"markdown","663d1a04":"markdown","6997cb48":"markdown","1364fd28":"markdown","ba6d0628":"markdown","1735c9be":"markdown","d4b35119":"markdown","c866005e":"markdown","52a4c24b":"markdown","7d4a07d6":"markdown","4a6c72c0":"markdown","222a3bef":"markdown","88c4c9d8":"markdown","c30e1854":"markdown","a6243759":"markdown","3bbe0f6f":"markdown","7154a16d":"markdown","0c7f5daf":"markdown","3593ba5e":"markdown"},"source":{"231d6fb9":"# import the basic libraries we will use in this kernel\nimport os\nimport numpy as np\nimport pandas as pd\nimport pickle\n\nimport time\nimport datetime\nfrom datetime import datetime\nimport calendar\n\nfrom sklearn import metrics\nfrom math import sqrt\nimport gc\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\nfrom sklearn.preprocessing import LabelEncoder\n\nimport itertools\nimport warnings\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\nwarnings.filterwarnings(\"ignore\") # specify to ignore warning messages","aa9548e0":"# Resample the sales by this parameter\nPERIOD = \"M\"\n# SHOPS = [8, 11, 14, 25, 28, 31, 33, 36, 37, 40, 41, 42, 44, 51, 52, 54, 59]\n\nSHOPS = [8, 14, 37, 41, 59]\n\n# this is help us change faster between Kaggle and local machine\nLOCAL = False\n\nif LOCAL:\n    PATH = os.getcwd()\nelse:\n    PATH = '..\/input\/competitive-data-science-predict-future-sales\/'\n    PATH_EXTERNAL = \"..\/input\/group-by-df\/\"","e35921d0":"# prints the local files\ndef print_files():\n    \n    '''\n    Prints the files that are in the current working directory.\n    '''\n    \n    cwd = \"..\/input\/competitive-data-science-predict-future-sales\/\"\n    \n    for f, ff, fff in os.walk(cwd):\n        for file in fff:\n            if file.split(\".\")[1] in [\"pkl\", \"csv\"]:\n                print(file)","ddd17890":"print_files()","520ea13c":"# reduces the memory of a dataframe\ndef reduce_mem_usage(df, verbose = True):\n    \n    '''\n    Reduces the space that a DataFrame occupies in memory.\n\n    This function iterates over all columns in a df and downcasts them to lower type to save memory.\n    '''\n    \n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose:\n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'\\\n              .format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))","207c31d9":"## load all the df we have\n#shops_df = pd.read_csv(os.path.join(PATH, \"shops.csv\"))\n#items_df = pd.read_csv(os.path.join(PATH, \"items.csv\"))\n#items_category_df = pd.read_csv(os.path.join(PATH, \"item_categories.csv\"))\n#sales_df = pd.read_csv(os.path.join(PATH, \"sales_train.csv\"))\n#test_df = pd.read_csv(os.path.join(PATH, \"test.csv\"))\n##sub = pd.read_csv(os.path.join(PATH, \"sample_submission.csv\"))","45042242":"#\n#\n## we have seen in our EDA that we have some duplicate shops, let's correct them.\n#shops_df.loc[shops_df.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\n#shops_df['city'] = shops_df['shop_name'].str.split(' ').map(lambda x: x[0])\n#shops_df.loc[shops_df.city == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\n#shops_df['city_code'] = LabelEncoder().fit_transform(shops_df['city'])\n#shops_df.head()","0e216eee":"#shops_df[shops_df[\"shop_id\"].isin([0, 57])]","8ed592ac":"## \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\n#sales_df.loc[sales_df.shop_id == 0, 'shop_id'] = 57\n#test_df.loc[test_df.shop_id == 0, 'shop_id'] = 57\n#\n## \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\n#sales_df.loc[sales_df.shop_id == 1, 'shop_id'] = 58\n#test_df.loc[test_df.shop_id == 1, 'shop_id'] = 58\n#\n## \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\n#sales_df.loc[sales_df.shop_id == 10, 'shop_id'] = 11\n#test_df.loc[test_df.shop_id == 10, 'shop_id'] = 11","0f1bba15":"#items_category_df['split'] = items_category_df['item_category_name'].str.split('-')\n#items_category_df['type'] = items_category_df['split'].map(lambda x: x[0].strip())\n#items_category_df['type_code'] = LabelEncoder().fit_transform(items_category_df['type'])\n#\n## if subtype is nan then type\n#items_category_df['subtype'] = items_category_df['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\n#items_category_df['subtype_code'] = LabelEncoder().fit_transform(items_category_df['subtype'])\n#\n#items_category_df.head()","5ac4846a":"#sales_df.head()","bfe609b5":"## we have negative prices and some outlier\n## let's replace the data with the mean value and also filter all the outliers\n#mean = sales_df[(sales_df[\"shop_id\"] == 32) & (sales_df[\"item_id\"] == 2973) & (sales_df[\"date_block_num\"] == 4) & (sales_df[\"item_price\"] > 0)][\"item_price\"].mean()\n#sales_df.loc[sales_df.item_price < 0, 'item_price'] = mean\n#\n#sales_df = sales_df[sales_df[\"item_price\"] < np.percentile(sales_df[\"item_price\"], q = 100)]\n#sales_df = sales_df[sales_df[\"item_cnt_day\"] < np.percentile(sales_df[\"item_cnt_day\"], q = 100)]","73ae01cc":"#sales_df.info()","45395e1f":"#type(sales_df[\"date\"].iloc[0])","1396b50d":"# convert to datetime the date column\n# specify the format since otherwise it might give some problems\n#sales_df[\"date\"] = pd.to_datetime(sales_df[\"date\"], format = \"%d.%m.%Y\")","a16002a3":"## max date in sales is 31.10.2015.\n## In the Kaggle competition we are asked to predict the sales for the next month\n## this means the sales of November\n#min_date = sales_df[\"date\"].min()\n#max_date_sales = sales_df[\"date\"].max()","444633e1":"#min_date","26318fdb":"#max_date_sales","d1b3894d":"#max_date_test = datetime(2015, 11, 30)","bac93767":"#date_range = pd.date_range(min_date, max_date_test, freq = \"D\")\n#date_range","a87836f0":"#len(date_range)","f7151fe4":"#shops = sorted(list(shops_df[\"shop_id\"].unique()))\n#\n## only items present in test\n#items = sorted(list(items_df[\"item_id\"].unique()))\n#\n#cartesian_product = pd.MultiIndex.from_product([date_range, shops, items], names=[\"date\", \"shop_id\", \"item_id\"])\n#len(cartesian_product)","719cf54c":"#cartesian_product","92a176ee":"#date_range = pd.date_range(min_date, max_date_test, freq = \"W\")\n#date_range","3a7d8afb":"#len(date_range)","c645dbeb":"#shops = sorted(list(shops_df[\"shop_id\"].unique()))\n#\n## only items present in test\n#items = sorted(list(items_df[items_df[\"item_id\"].isin(test_df[\"item_id\"].unique())][\"item_id\"].unique()))\n#\n#cartesian_product = pd.MultiIndex.from_product([date_range, shops, items], names=[\"date\", \"shop_id\", \"item_id\"])\n#len(cartesian_product)","a64f0127":"#PERIOD","5336e288":"#date_range = pd.date_range(min_date, max_date_sales, freq = PERIOD)\n#date_range","26910116":"#len(date_range)","8d6384f5":"## only items present in test\n#items = sorted(list(test_df[\"item_id\"].unique()))\n#\n#cartesian_product = pd.MultiIndex.from_product([date_range, SHOPS, items], names = [\"date\", \"shop_id\", \"item_id\"])\n#len(cartesian_product)\n#\n##Son 3 iterables en los cuales te dicen cuales son los items que quieres tener","83a1e454":"#len(date_range) * len(SHOPS) * len(items)","1c01cad9":"#cartesian_product","9a128df1":"#gc.collect()","f9663006":"#st = time.time()\n## set index\n#sales_df[\"revenue\"] = sales_df[\"item_cnt_day\"]*sales_df[\"item_price\"]\n#gb_df = sales_df.set_index(\"date\")\n## groupby shop_id and item_id\n#gb_df = gb_df.groupby([\"shop_id\", \"item_id\"])\n## resample the sales to a weekly basis\n#gb_df = gb_df.resample(PERIOD).agg({'item_cnt_day': np.sum, \"item_price\": np.mean, \"revenue\":np.sum})\n## convert to dataframe and save the full dataframe\n#gb_df.reset_index(inplace = True)\n## save the groupby dataframe\n#gb_df.to_pickle(os.path.join(PATH, \"GROUP_BY_DF.pkl\"))\n#et = time.time()\n#print(\"Total time in minutes to preprocess took {}\".format((et - st)\/60))\n","548a9e40":"## read the groupby dataframe\n#gb_df = pd.read_pickle(os.path.join(PATH_EXTERNAL, \"GROUP_BY_DF.pkl\"))","2615f504":"#SHOPS","f8efed83":"#gb_df = gb_df[(gb_df['shop_id']==8) | (gb_df['shop_id']==14)]","79879ec5":"#gb_df","60648dc3":"#gb_df.isnull().sum()","9caf31c2":"#gb_df.fillna(0, inplace = True)","99f256f8":"#full_df = pd.DataFrame(index = cartesian_product).reset_index()\n#full_df = pd.merge(full_df, gb_df, on = ['date','shop_id', \"item_id\"], how = 'left')\n#\n#full_df[\"item_cnt_day\"].sum()","faf0dc0c":"#full_df.head()","87859d82":"#full_df.shape","9daa3931":"#full_df.head()","d05d1d77":"## add shops_df information\n#full_df = pd.merge(full_df, shops_df, on = \"shop_id\")\n#full_df.head()","834e3da0":"## add items_df information\n#full_df = pd.merge(full_df, items_df, on = \"item_id\")\n#full_df.head()","14f9e8f3":"## add items_category_df information\n#full_df = pd.merge(full_df, items_category_df, on = \"item_category_id\")\n#full_df.head()","d544e2f7":"#full_df.isnull().sum()","4f697a4c":"#full_df.fillna(0, inplace = True)","6ad28263":"## We will clip the value in this line.\n## This means that the values greater than 20, will become 20 and lesser than 20\n#full_df[\"item_cnt_day\"] = np.clip(full_df[\"item_cnt_day\"], 0, 20)","c3e270ad":"#reduce_mem_usage(full_df)","52d401ea":"#full_df","5463eb2d":"class FeatureGenerator(object):\n    \n    '''\n    This is a helper class that takes a df and a list of features and creates sum, mean, \n    lag features and variation (change over month) features.\n    \n    '''\n    \n    def __init__(self, full_df,  gb_list):\n        \n        '''\n        Constructor of the class.\n        gb_list is a list of columns that must be in full_df.\n        '''\n        \n        self.full_df = full_df\n        self.gb_list = gb_list\n        # joins the gb_list, this way we can dinamically create new columns\n        # [\"date, \"shop_id] --> date_shop_id\n        self.objective_column_name = \"_\".join(gb_list)\n\n    @staticmethod\n    def reduce_mem_usage(df, verbose = True):\n        \n        '''\n        Reduces the space that a DataFrame occupies in memory.\n        This is a static method of FeatureGenerator class (we can use it outside the class).\n        \n        This function iterates over all columns in a df and downcasts them to lower type to save memory.\n        '''\n        \n        numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n        start_mem = df.memory_usage().sum() \/ 1024**2    \n        for col in df.columns:\n            col_type = df[col].dtypes\n            if col_type in numerics:\n                c_min = df[col].min()\n                c_max = df[col].max()\n                if str(col_type)[:3] == 'int':\n                    if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)  \n                else:\n                    if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                        df[col] = df[col].astype(np.float16)\n                    elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                        df[col] = df[col].astype(np.float32)\n                    else:\n                        df[col] = df[col].astype(np.float64)    \n        end_mem = df.memory_usage().sum() \/ 1024**2\n        if verbose:\n            print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'\\\n                  .format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n            \n    def generate_gb_df(self):\n        \n        '''\n        This function thakes the full_df and creates a groupby df based on the gb_list.\n        It creates 2 columns: \n            1. A sum column for every date and gb_list\n            2. Mean columns for every_date and gb_list\n            \n        The resulting df (gb_df_) is assigned back to the FeatureGenerator class as an attribute.\n        '''\n\n        def my_agg(full_df_, args):\n            \n            '''\n            This function is used to perform multiple operations over a groupby df and returns a df\n            without multiindex.\n            '''\n            \n            names = {\n                '{}_sum'.format(args):  full_df_['item_cnt_day'].sum(),\n                '{}_mean'.format(args): full_df_['item_cnt_day'].mean()\n            }\n\n            return pd.Series(names, index = [key for key in names.keys()])\n        \n        # the args is used to pass additional argument to the apply function\n        gb_df_ = self.full_df.groupby(self.gb_list).apply(my_agg, args = (self.objective_column_name)).reset_index()\n\n        self.gb_df_ = gb_df_\n\n        \n    def return_gb_df(self):  \n        \n        '''\n        This function takes the gb_df_ created in the previous step (generate_gb_df) and creates additional features.\n        We create 4 lag features (values from the past).\n        And 6 variation features: 3 with absolute values and 3 with porcentual change.\n        '''\n        \n        def generate_shift_features(self, suffix):\n            \n            '''\n            This function is a helper function that takes the gb_df_ and a suffix (sum or mean) and creates the\n            additional features.\n            '''\n\n            # dinamically creates the features\n            # date_shop_id --> date_shop_id_sum if suffix is sum\n            # date_shop_id --> date_shop_id_mean if suffix is mean\n            name_ = self.objective_column_name + \"_\" + suffix\n\n            self.gb_df_['{}_shift_1'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(1))\n            \n            self.gb_df_['{}_shift_2'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(2))\n            \n            self.gb_df_['{}_shift_3'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(3))\n            \n            self.gb_df_['{}_shift_6'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(6))\n            \n            # notice taht in var_3 we use shift(4), we do this because we want to capture the variation of 3 months\n            # and not the variation of month - 3\n\n            self.gb_df_['{}_var_1'.format(name_)] = self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(1) - x.shift(2))\n            self.gb_df_['{}_var_2'.format(name_)] = self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(1) - x.shift(3))\n            self.gb_df_['{}_var_3'.format(name_)] = self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(1) - x.shift(4))\n\n            self.gb_df_['{}_var_pct_1'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(2))\/x.shift(2))\n            \n            self.gb_df_['{}_var_pct_2'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(3))\/x.shift(3))\n            \n            self.gb_df_['{}_var_pct_3'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(4))\/x.shift(4))\n            \n            self.gb_df_.fillna(-1, inplace = True)\n\n            self.gb_df_.replace([np.inf, -np.inf], -1, inplace = True)\n        \n        # call the generate_shift_featues function with different suffix (sum and mean)\n        generate_shift_features(self, suffix = \"sum\")\n        generate_shift_features(self, suffix = \"mean\")\n        \n        FeatureGenerator.reduce_mem_usage(self.gb_df_)\n    \n        return self.gb_df_\n        ","a9b54486":"#Modificado\n\nclass FeatureGenerator(object):\n    \n    '''\n    This is a helper class that takes a df and a list of features and creates sum, mean, \n    lag features and variation (change over month) features.\n    \n    '''\n    \n    def __init__(self, full_df,  gb_list):\n        \n        '''\n        Constructor of the class.\n        gb_list is a list of columns that must be in full_df.\n        '''\n        \n        self.full_df = full_df\n        self.gb_list = gb_list\n        # joins the gb_list, this way we can dinamically create new columns\n        # [\"date, \"shop_id] --> date_shop_id\n        self.objective_column_name = \"_\".join(gb_list)\n\n    @staticmethod\n    def reduce_mem_usage(df, verbose = True):\n        \n        '''\n        Reduces the space that a DataFrame occupies in memory.\n        This is a static method of FeatureGenerator class (we can use it outside the class).\n        \n        This function iterates over all columns in a df and downcasts them to lower type to save memory.\n        '''\n        \n        numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n        start_mem = df.memory_usage().sum() \/ 1024**2    \n        for col in df.columns:\n            col_type = df[col].dtypes\n            if col_type in numerics:\n                c_min = df[col].min()\n                c_max = df[col].max()\n                if str(col_type)[:3] == 'int':\n                    if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                        df[col] = df[col].astype(np.int8)\n                    elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                        df[col] = df[col].astype(np.int16)\n                    elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                        df[col] = df[col].astype(np.int32)\n                    elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                        df[col] = df[col].astype(np.int64)  \n                else:\n                    if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                        df[col] = df[col].astype(np.float16)\n                    elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                        df[col] = df[col].astype(np.float32)\n                    else:\n                        df[col] = df[col].astype(np.float64)    \n        end_mem = df.memory_usage().sum() \/ 1024**2\n        if verbose:\n            print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'\\\n                  .format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n            \n    def generate_gb_df(self):\n        \n        '''\n        This function thakes the full_df and creates a groupby df based on the gb_list.\n        It creates 2 columns: \n            1. A sum column for every date and gb_list\n            2. Mean columns for every_date and gb_list\n            \n        The resulting df (gb_df_) is assigned back to the FeatureGenerator class as an attribute.\n        '''\n\n        def my_agg(full_df_, args):\n            \n            '''\n            This function is used to perform multiple operations over a groupby df and returns a df\n            without multiindex.\n            '''\n            \n            names = {\n                '{}_sum'.format(args):  full_df_['sales'].sum(),\n                '{}_mean'.format(args): full_df_['sales'].mean()\n            }\n\n            return pd.Series(names, index = [key for key in names.keys()])\n        \n        # the args is used to pass additional argument to the apply function\n        gb_df_ = self.full_df.groupby(self.gb_list).apply(my_agg, args = (self.objective_column_name)).reset_index()\n\n        self.gb_df_ = gb_df_\n\n        \n    def return_gb_df(self):  \n        \n        '''\n        This function takes the gb_df_ created in the previous step (generate_gb_df) and creates additional features.\n        We create 4 lag features (values from the past).\n        And 6 variation features: 3 with absolute values and 3 with porcentual change.\n        '''\n        \n        def generate_shift_features(self, suffix):\n            \n            '''\n            This function is a helper function that takes the gb_df_ and a suffix (sum or mean) and creates the\n            additional features.\n            '''\n\n            # dinamically creates the features\n            # date_shop_id --> date_shop_id_sum if suffix is sum\n            # date_shop_id --> date_shop_id_mean if suffix is mean\n            name_ = self.objective_column_name + \"_\" + suffix\n\n            self.gb_df_['{}_shift_1'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(1))\n            \n            self.gb_df_['{}_shift_2'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(2))\n            \n            self.gb_df_['{}_shift_3'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(3))\n            \n            self.gb_df_['{}_shift_6'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(6))\n            \n            # notice taht in var_3 we use shift(4), we do this because we want to capture the variation of 3 months\n            # and not the variation of month - 3\n\n            self.gb_df_['{}_var_1'.format(name_)] = self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(1) - x.shift(2))\n            self.gb_df_['{}_var_2'.format(name_)] = self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(1) - x.shift(3))\n            self.gb_df_['{}_var_3'.format(name_)] = self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: x.shift(1) - x.shift(4))\n\n            self.gb_df_['{}_var_pct_1'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(2))\/x.shift(2))\n            \n            self.gb_df_['{}_var_pct_2'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(3))\/x.shift(3))\n            \n            self.gb_df_['{}_var_pct_3'.format(name_)] =\\\n            self.gb_df_.groupby(self.gb_list[1:])[name_].transform(lambda x: (x.shift(1) - x.shift(4))\/x.shift(4))\n            \n            self.gb_df_.fillna(-1, inplace = True)\n\n            self.gb_df_.replace([np.inf, -np.inf], -1, inplace = True)\n        \n        # call the generate_shift_featues function with different suffix (sum and mean)\n        generate_shift_features(self, suffix = \"sum\")\n        generate_shift_features(self, suffix = \"mean\")\n        \n        FeatureGenerator.reduce_mem_usage(self.gb_df_)\n    \n        return self.gb_df_\n        ","8239b7d3":"def generate_shift_features(df, column_name, gb_list):\n    \n    df['{}_shift_1'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(1))\n    df['{}_shift_2'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(2))\n    df['{}_shift_3'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(3))\n    df['{}_shift_6'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(6))\n    \n    df['{}_var_1'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(1) - x.shift(2))\n    df['{}_var_2'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(1) - x.shift(3))\n    df['{}_var_3'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(1) - x.shift(4))\n    \n    df['{}_var_pct_1'.format(column_name)]\\\n    = df.groupby(gb_list)[column_name].transform(lambda x: (x.shift(1) - x.shift(2))\/x.shift(2))\n    df['{}_var_pct_2'.format(column_name)]\\\n    = df.groupby(gb_list)[column_name].transform(lambda x: (x.shift(1) - x.shift(3))\/x.shift(3))\n    df['{}_var_pct_3'.format(column_name)]\\\n    = df.groupby(gb_list)[column_name].transform(lambda x: (x.shift(1) - x.shift(4))\/x.shift(4))\n    \n    df.fillna(-1, inplace = True)\n\n    df.replace([np.inf, -np.inf], -1, inplace = True)\n\n    reduce_mem_usage(df)","5a1af490":"def generate_shift_features_no_grouper(df, column_name):\n    \n    df['{}_shift_1'.format(column_name)] = df[column_name].shift(1)\n    df['{}_shift_2'.format(column_name)] = df[column_name].shift(2)\n    df['{}_shift_3'.format(column_name)] = df[column_name].shift(3)\n    df['{}_shift_4'.format(column_name)] = df[column_name].shift(4)\n    df['{}_shift_5'.format(column_name)] = df[column_name].shift(5)\n    df['{}_shift_6'.format(column_name)] = df[column_name].shift(6)\n    df['{}_shift_8'.format(column_name)] = df[column_name].shift(8)\n    df['{}_shift_12'.format(column_name)] = df[column_name].shift(12)\n    \n    df['{}_var_1'.format(column_name)] = df[column_name].shift(1) - df[column_name].shift(2)\n    df['{}_var_2'.format(column_name)] = df[column_name].shift(1) - df[column_name].shift(3)\n    df['{}_var_3'.format(column_name)] = df[column_name].shift(1) - df[column_name].shift(4)\n    \n    df['{}_var_pct_1'.format(column_name)]\\\n    = (df[column_name].shift(1) - df[column_name].shift(2))\/df[column_name].shift(2)\n    df['{}_var_pct_2'.format(column_name)]\\\n    = (df[column_name].shift(1) - df[column_name].shift(3))\/df[column_name].shift(3)\n    df['{}_var_pct_3'.format(column_name)]\\\n    = (df[column_name].shift(1) - df[column_name].shift(4))\/df[column_name].shift(4)\n    \n    df.fillna(-1, inplace = True)\n\n    df.replace([np.inf, -np.inf], -1, inplace = True)\n\n    reduce_mem_usage(df)","af7ea53b":"#full_df.head()","fb70a205":"#st = time.time()\n#\n#def my_agg(x):\n#    names = {\n#        'month_mean': x['item_cnt_day'].mean(),\n#        'month_sum':  x['item_cnt_day'].sum()\n#    }\n#\n#    return pd.Series(names, index=[key for key in names.keys()])\n#\n#month_sales_features = full_df.groupby([\"date\"]).apply(my_agg).reset_index()\n#\n#column_name = \"month_sum\"\n#generate_shift_features_no_grouper(month_sales_features, column_name = column_name)\n#\n#column_name = \"month_mean\"\n#generate_shift_features_no_grouper(month_sales_features, column_name = column_name)\n#\n#et = time.time()\n#\n#(et - st)\/60","a0e42814":"#month_sales_features.head()","a8cec850":"#st = time.time()\n#\n#gb_list = [\"date\", \"shop_id\"]\n#\n#fe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n#\n#fe_generator.generate_gb_df()\n#\n#shop_sales_features = fe_generator.return_gb_df()\n#\n#et = time.time()\n#\n#(et - st)\/60","e6f48c3a":"#shop_sales_features","0eb269e6":"#shop_sales_features.shape","e0c23d7b":"#shop_sales_features[shop_sales_features[\"shop_id\"] == 8].T","df84bf83":"#st = time.time()\n#\n#gb_list = [\"date\", \"item_id\"]\n#\n#fe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n#\n#fe_generator.generate_gb_df()\n#\n#item_sales_features = fe_generator.return_gb_df()\n#\n#et = time.time()\n#\n#(et - st)\/60","bf2bf841":"#item_sales_features","0446421f":"#item_sales_features.shape","ca11f2a1":"#item_sales_features[item_sales_features[\"item_id\"] == 30].T","48153fec":"#st = time.time()\n#\n#gb_list = [\"date\", \"item_category_id\"]\n#\n#fe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n#\n#fe_generator.generate_gb_df()\n#\n#month_item_category_features = fe_generator.return_gb_df()\n#\n#et = time.time()\n#\n#(et - st)\/60","0207aa07":"#month_item_category_features.shape","45430c5e":"#month_item_category_features[month_item_category_features[\"item_category_id\"] == 2].T","e4cfdc59":"#st = time.time()\n#\n#gb_list = [\"date\", \"type_code\"]\n#\n#fe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n#\n#fe_generator.generate_gb_df()\n#\n#month_type_code_features = fe_generator.return_gb_df()\n#\n#et = time.time()\n#\n#(et - st)\/60","3c8b8b13":"#month_type_code_features.shape","d173468f":"#month_type_code_features[month_type_code_features[\"type_code\"] == 1].T","c73d2704":"#st = time.time()\n#\n#gb_list = [\"date\", \"subtype_code\"]\n#\n#fe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n#\n#fe_generator.generate_gb_df()\n#\n#month_subtype_code_features = fe_generator.return_gb_df()\n#\n#et = time.time()\n#\n#(et - st)\/60","0102f533":"#month_subtype_code_features.shape","1916ecb7":"#month_subtype_code_features[month_subtype_code_features[\"subtype_code\"] == 1].T","13b23ac5":"#st = time.time()\n#\n#gb_list = [\"date\", \"shop_id\",\"type_code\"]\n#\n#fe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n#\n#fe_generator.generate_gb_df()\n#\n#month_shop_type_code_features = fe_generator.return_gb_df()\n#\n#et = time.time()\n#\n#(et - st)\/60","26e1d931":"#month_shop_type_code_features.shape","d93eee73":"#filter_1 = month_shop_type_code_features[\"shop_id\"] == 8\n#filter_2 = month_shop_type_code_features[\"type_code\"] == 1\n#month_shop_type_code_features[filter_1 & filter_2].T","45dcb3da":"#st = time.time()\n#\n#gb_list = [\"date\", \"shop_id\",\"subtype_code\"]\n#\n#fe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n#\n#fe_generator.generate_gb_df()\n#\n#month_shop_subtype_code_features = fe_generator.return_gb_df()\n#\n#et = time.time()\n#\n#(et - st)\/60","54ebf4c4":"#month_shop_subtype_code_features.shape","d578c459":"#filter_1 = month_shop_subtype_code_features[\"shop_id\"] == 8\n#filter_2 = month_shop_subtype_code_features[\"subtype_code\"] == 1\n#month_shop_subtype_code_features[filter_1 & filter_2].T","9402284e":"#st = time.time()\n#\n#gb_list = [\"date\",\"city_code\"]\n#\n#fe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n#\n#fe_generator.generate_gb_df()\n#\n#month_city_features = fe_generator.return_gb_df()\n#\n#et = time.time()\n#\n#(et - st)\/60","6e2b27ee":"#month_city_features.shape","11aa4d96":"#month_city_features[month_city_features[\"city_code\"] == 4].T","290e58af":"#st = time.time()\n#\n#gb_list = [\"date\",\"city_code\",\"item_id\"]\n#\n#fe_generator = FeatureGenerator(full_df = full_df, gb_list = gb_list)\n#\n#fe_generator.generate_gb_df()\n#\n#month_city_item_id_features = fe_generator.return_gb_df()\n#\n#et = time.time()\n#\n#(et - st)\/60","db2e3da0":"#month_city_item_id_features.shape","4dbbe445":"#filter_1 = month_city_item_id_features[\"city_code\"] == 4\n#filter_2 = month_city_item_id_features[\"item_id\"] == 30\n#month_city_item_id_features[filter_1 & filter_2].T","8c98f7ab":"#st = time.time()\n#\n#gb_list = [\"shop_id\", \"item_id\"]\n#\n#column_name = \"item_cnt_day\"\n#generate_shift_features(full_df, column_name = column_name, gb_list = gb_list)\n#\n#et = time.time()\n#\n#(et - st)\/60","f6c98c27":"#st = time.time()\n#\n#gb_list = [\"shop_id\", \"item_id\"]\n#\n#column_name = \"item_price\"\n#generate_shift_features(full_df, column_name = column_name, gb_list = gb_list)\n#\n#et = time.time()\n#\n#(et - st)\/60","23c6f4a6":"#st = time.time()\n#\n#gb_list = [\"shop_id\", \"item_id\"]\n#\n#column_name = \"revenue\"\n#generate_shift_features(full_df, column_name = column_name, gb_list = gb_list)\n#\n#et = time.time()\n#\n#(et - st)\/60","9fd4da37":"#full_df[\"year\"] = full_df[\"date\"].dt.year\n#full_df[\"month\"] = full_df[\"date\"].dt.month\n#full_df[\"days_in_month\"] = full_df[\"date\"].dt.days_in_month\n#full_df[\"quarter_start\"] = full_df[\"date\"].dt.is_quarter_start\n#full_df[\"quarter_end\"] = full_df[\"date\"].dt.days_in_month","bc5e239b":"#holidays_next_month = {\n#    12:8,\n#    1:1,\n#    2:1,\n#    3:0,\n#    4:2,\n#    5:1,\n#    6:0,\n#    7:0,\n#    8:0,\n#    9:0,\n#    10:1,\n#    11:0\n#}\n#\n#holidays_this_month = {\n#    1:8,\n#    2:1,\n#    3:1,\n#    4:0,\n#    5:2,\n#    6:1,\n#    7:0,\n#    8:0,\n#    9:0,\n#    10:0,\n#    11:1,\n#    12:0\n#}\n#\n#full_df[\"holidays_next_month\"] = full_df[\"month\"].map(holidays_next_month)\n#full_df[\"holidays_this_month\"] = full_df[\"month\"].map(holidays_this_month)","56ee302e":"#def extract_number_weekends(test_month):\n#    saturdays = len([1 for i in calendar.monthcalendar(test_month.year, test_month.month) if i[5] != 0])\n#    sundays = len([1 for i in calendar.monthcalendar(test_month.year, test_month.month) if i[6] != 0])\n#    return saturdays + sundays\n#\n#full_df[\"total_weekend_days\"] = full_df[\"date\"].apply(extract_number_weekends)\n#\n#date_diff_df = full_df[full_df[\"item_cnt_day\"] > 0][[\"shop_id\", \"item_id\", \"date\", \"item_cnt_day\"]].groupby([\"shop_id\", \"item_id\"])\\\n#[\"date\"].diff().apply(lambda timedelta_: timedelta_.days).to_frame()\n#\n#date_diff_df.columns = [\"date_diff_sales\"]\n#\n#full_df = pd.merge(full_df, date_diff_df, how = \"left\", left_index=True, right_index=True)\n#\n#full_df.fillna(-1, inplace = True)","4dfe18e0":"#city_population = {\\\n#'\u042f\u043a\u0443\u0442\u0441\u043a':307911, \n#'\u0410\u0434\u044b\u0433\u0435\u044f':141970,\n#'\u0411\u0430\u043b\u0430\u0448\u0438\u0445\u0430':450771, \n#'\u0412\u043e\u043b\u0436\u0441\u043a\u0438\u0439':326055, \n#'\u0412\u043e\u043b\u043e\u0433\u0434\u0430':313012, \n#'\u0412\u043e\u0440\u043e\u043d\u0435\u0436':1047549,\n#'\u0412\u044b\u0435\u0437\u0434\u043d\u0430\u044f':1228680, \n#'\u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439':107560, \n#'\u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d':1228680, \n#'\u041a\u0430\u0437\u0430\u043d\u044c':1257391, \n#'\u041a\u0430\u043b\u0443\u0433\u0430':341892,\n#'\u041a\u043e\u043b\u043e\u043c\u043d\u0430':140129,\n#'\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a':1083865, \n#'\u041a\u0443\u0440\u0441\u043a':452976, \n#'\u041c\u043e\u0441\u043a\u0432\u0430':12678079,\n#'\u041c\u044b\u0442\u0438\u0449\u0438':205397, \n#'\u041d.\u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434':1252236,\n#'\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a':1602915 , \n#'\u041e\u043c\u0441\u043a':1178391, \n#'\u0420\u043e\u0441\u0442\u043e\u0432\u041d\u0430\u0414\u043e\u043d\u0443':1125299, \n#'\u0421\u041f\u0431':5398064, \n#'\u0421\u0430\u043c\u0430\u0440\u0430':1156659,\n#'\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434':104579, \n#'\u0421\u0443\u0440\u0433\u0443\u0442':373940, \n#'\u0422\u043e\u043c\u0441\u043a':572740, \n#'\u0422\u044e\u043c\u0435\u043d\u044c':744554, \n#'\u0423\u0444\u0430':1115560, \n#'\u0425\u0438\u043c\u043a\u0438':244668,\n#'\u0426\u0438\u0444\u0440\u043e\u0432\u043e\u0439':1228680, \n#'\u0427\u0435\u0445\u043e\u0432':70548, \n#'\u042f\u0440\u043e\u0441\u043b\u0430\u0432\u043b\u044c':608353\n#}\n#\n#city_income = {\\\n#'\u042f\u043a\u0443\u0442\u0441\u043a':70969, \n#'\u0410\u0434\u044b\u0433\u0435\u044f':28842,\n#'\u0411\u0430\u043b\u0430\u0448\u0438\u0445\u0430':54122, \n#'\u0412\u043e\u043b\u0436\u0441\u043a\u0438\u0439':31666, \n#'\u0412\u043e\u043b\u043e\u0433\u0434\u0430':38201, \n#'\u0412\u043e\u0440\u043e\u043d\u0435\u0436':32504,\n#'\u0412\u044b\u0435\u0437\u0434\u043d\u0430\u044f':46158, \n#'\u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439':54122, \n#'\u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d':46158, \n#'\u041a\u0430\u0437\u0430\u043d\u044c':36139, \n#'\u041a\u0430\u043b\u0443\u0433\u0430':39776,\n#'\u041a\u043e\u043b\u043e\u043c\u043d\u0430':54122,\n#'\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a':48831, \n#'\u041a\u0443\u0440\u0441\u043a':31391, \n#'\u041c\u043e\u0441\u043a\u0432\u0430':91368,\n#'\u041c\u044b\u0442\u0438\u0449\u0438':54122, \n#'\u041d.\u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434':31210,\n#'\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a':37014 , \n#'\u041e\u043c\u0441\u043a':34294, \n#'\u0420\u043e\u0441\u0442\u043e\u0432\u041d\u0430\u0414\u043e\u043d\u0443':32067, \n#'\u0421\u041f\u0431':61536, \n#'\u0421\u0430\u043c\u0430\u0440\u0430':35218,\n#'\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434':54122, \n#'\u0421\u0443\u0440\u0433\u0443\u0442':73780, \n#'\u0422\u043e\u043c\u0441\u043a':43235, \n#'\u0422\u044e\u043c\u0435\u043d\u044c':72227, \n#'\u0423\u0444\u0430':35257, \n#'\u0425\u0438\u043c\u043a\u0438':54122,\n#'\u0426\u0438\u0444\u0440\u043e\u0432\u043e\u0439':46158, \n#'\u0427\u0435\u0445\u043e\u0432':54122, \n#'\u042f\u0440\u043e\u0441\u043b\u0430\u0432\u043b\u044c':34675\n#}\n#\n#full_df[\"city_population\"] = full_df[\"city\"].map(city_population)\n#\n#full_df[\"city_income\"] = full_df[\"city\"].map(city_income)\n#\n#full_df[\"price_over_income\"] = full_df[\"item_price\"]\/full_df[\"city_income\"]","992f0c41":"#full_df.rename(columns = {\"item_cnt_day\":\"sales\"}, inplace = True)","c7f28296":"#full_df.shape","d6697f88":"#full_df = pd.merge(full_df, shop_sales_features, on = [\"date\", \"shop_id\"], how = \"left\")\n#\n#\n#full_df = pd.merge(full_df, item_sales_features, on = [\"date\", \"item_id\"], how = \"left\")\n#\n#\n#full_df = pd.merge(full_df, month_sales_features, on = [\"date\"], how = \"left\")\n#\n#\n#full_df = pd.merge(full_df, month_item_category_features, on = [\"date\", \"item_category_id\"], how = \"left\")\n#\n#\n#full_df = pd.merge(full_df, month_type_code_features, on = [\"date\", \"type_code\"], how = \"left\")\n#\n#\n#full_df = pd.merge(full_df, month_subtype_code_features, on = [\"date\", \"subtype_code\"], how = \"left\")\n#\n#\n#full_df = pd.merge(full_df, month_shop_type_code_features, on = [\"date\", \"shop_id\", \"type_code\"], how = \"left\")\n#\n#\n#full_df = pd.merge(full_df, month_shop_subtype_code_features, on = [\"date\", \"shop_id\", \"subtype_code\"], how = \"left\")\n#\n#\n#full_df = pd.merge(full_df, month_city_features, on = [\"date\", \"city_code\"], how = \"left\")\n#\n#\n#full_df = pd.merge(full_df, month_city_item_id_features, on = [\"date\", \"city_code\", \"item_id\"], how = \"left\")\n","e9b0daa2":"#full_df.shape","8fd790a6":"#full_df.head()","26751a56":"## delete dfs with features\n#del shop_sales_features, item_sales_features, month_sales_features, month_item_category_features,\\\n#month_type_code_features, month_subtype_code_features, month_shop_type_code_features,\\\n#month_shop_subtype_code_features, month_city_features, month_city_item_id_features","7aae7e29":"## delete all the previous df\n#del shops_df, items_df, items_category_df, sales_df, test_df, sub, cartesian_product, gb_df\n#gc.collect()","942f075e":"# st = time.time()\n\n# full_df.to_pickle(os.path.join(PATH, \"FULL_DF_ONLY_TEST_ALL_FEATURES.pkl\"))\n\n# et = time.time()\n\n# (et - st)\/60","dfb2d26f":"FULL_DF_PATH = \"..\/input\/full-df-only-test-all-features\/\"","a278e60d":"full_df = pd.read_pickle(os.path.join(FULL_DF_PATH, \"FULL_DF_ONLY_TEST_ALL_FEATURES.pkl\"))","8ee18a93":"full_df.head()","d5a747da":"SHOPS = [8, 14, 37, 41, 59]","01c65223":"full_df = full_df[full_df[\"shop_id\"].isin(SHOPS)]","fd457162":"# delete all the columns where lags features are - 1 (shift(6))\nfull_df = full_df[full_df[\"date\"] > np.datetime64(\"2013-06-30\")]","b666807e":"cols_to_drop = [\n\n'revenue',\n'shop_name',\n'city',\n'item_name',\n'item_category_name',\n'split',\n'type',\n'subtype',\n    \n'date_shop_id_sum',\n'date_shop_id_mean',\n\n'date_item_id_sum',\n'date_item_id_mean',\n\n'month_mean',\n'month_sum',\n\n'date_item_category_id_sum',\n'date_item_category_id_mean',\n\n'date_type_code_sum',\n'date_type_code_mean',\n\n'date_subtype_code_sum',\n'date_subtype_code_mean',\n\n'date_shop_id_type_code_sum',\n'date_shop_id_type_code_mean',\n\n'date_shop_id_subtype_code_sum',\n'date_shop_id_subtype_code_mean',\n\n'date_city_code_sum',\n'date_city_code_mean',\n\n'date_city_code_item_id_sum',\n'date_city_code_item_id_mean'\n    \n]","3f4a4bbe":"full_df.drop(cols_to_drop, inplace = True, axis = 1)","2a071eae":"# split the data into train, validation and test dataset\ntrain_index = sorted(list(full_df[\"date\"].unique()))[:-2]\n\nvalida_index = [sorted(list(full_df[\"date\"].unique()))[-2]]\n\ntest_index = [sorted(list(full_df[\"date\"].unique()))[-1]]","69997637":"X_train = full_df[full_df[\"date\"].isin(train_index)].drop(['sales', \"date\"], axis=1)\nY_train = full_df[full_df[\"date\"].isin(train_index)]['sales']\n\nX_valida = full_df[full_df[\"date\"].isin(valida_index)].drop(['sales', \"date\"], axis=1)\nY_valida = full_df[full_df[\"date\"].isin(valida_index)]['sales']\n\nX_test = full_df[full_df[\"date\"].isin(test_index)].drop(['sales', \"date\"], axis = 1)\nY_test = full_df[full_df[\"date\"].isin(test_index)]['sales']","c941efe6":"gc.collect()","c5cb3729":"st = time.time()\n\nmodel = XGBRegressor(seed = 175)\n\nmodel_name = str(model).split(\"(\")[0]\n\nday = str(datetime.now()).split()[0].replace(\"-\", \"_\")\nhour = str(datetime.now()).split()[1].replace(\":\", \"_\").split(\".\")[0]\nt = str(day) + \"_\" + str(hour)\n\nmodel.fit(X_train, Y_train, eval_metric = \"rmse\", \n    eval_set = [(X_train, Y_train), (X_valida, Y_valida)], \n    verbose = True, \n    early_stopping_rounds = 10)\n\net = time.time()\n\nprint(\"Training took {} minutes!\".format((et - st)\/60))","85612c6e":"#pickle.dump(model, open(\"{}_{}.dat\".format(model_name, t), \"wb\"))","8580a962":"#model = pickle.load(open(\"{}_{}.dat\".format(model_name, t), \"rb\"))","afa74b18":"importance = model.get_booster().get_score(importance_type = \"gain\")\n\nimportance = {k: v for k, v in sorted(importance.items(), key = lambda item: item[1])}","0023d454":"fig, ax = plt.subplots(figsize=(15, 30))\nplot_importance(model, importance_type = \"gain\", ax = ax)\nplt.savefig(\"{}_{}_plot_importance.png\".format(model_name, t))","9163b9de":"Y_valida_pred = model.predict(X_valida)","f42ebf2f":"metrics.r2_score(Y_valida, Y_valida_pred)","a3e19f93":"rmse_valida = sqrt(metrics.mean_squared_error(Y_valida, Y_valida_pred))\nrmse_valida","cea741d7":"Y_test_predict = model.predict(X_test)","514770c2":"Y_test_predict.sum()","e430c4ea":"Y_test_predict.max()","0d6f66f4":"Y_test.head()","eef9ebc0":"Y_test.sum()","3be0045a":"Y_test.max()","1ac26e7c":"rmse_test = sqrt(metrics.mean_squared_error(Y_test, Y_test_predict))\nrmse_test","3ed992d9":"perfect_rmse = sqrt(metrics.mean_squared_error(Y_test, Y_test))\nperfect_rmse","f9b2a4bf":"# import the basic libraries we will use in this kernel\nimport os\nimport numpy as np\nimport pandas as pd\nimport pickle\n\nimport time\nimport datetime\nfrom datetime import datetime\nimport calendar\n\nfrom sklearn import metrics\nfrom math import sqrt\nimport gc\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom xgboost import XGBRegressor\nfrom xgboost import plot_importance\n\nfrom sklearn.preprocessing import LabelEncoder\n\nimport itertools\nimport warnings\n\nimport statsmodels.api as sm\nfrom statsmodels.tsa.stattools import adfuller\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\nwarnings.filterwarnings(\"ignore\") # specify to ignore warning messages","4e12333f":"FULL_DF_PATH = \"..\/input\/full-df-only-test-all-features\/\"\nfull_df = pd.read_pickle(os.path.join(FULL_DF_PATH, \"FULL_DF_ONLY_TEST_ALL_FEATURES.pkl\"))","5f6dfab4":"pd.set_option('display.max_columns', 500)\npd.set_option('display.max_rows', 500)","37057d7a":"SHOPS = [8, 14, 37, 41, 59]\nfull_df = full_df[full_df[\"shop_id\"].isin(SHOPS)]","062b6bc4":"full_df.shape","dccf32cc":"# reduces the memory of a dataframe\ndef reduce_mem_usage(df, verbose = True):\n    \n    '''\n    Reduces the space that a DataFrame occupies in memory.\n\n    This function iterates over all columns in a df and downcasts them to lower type to save memory.\n    '''\n    \n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose:\n        print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'\\\n              .format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n\ndef generate_shift_features_no_grouper(df, column_name):\n    \n    df['{}_shift_1'.format(column_name)] = df[column_name].shift(1)\n    df['{}_shift_2'.format(column_name)] = df[column_name].shift(2)\n    df['{}_shift_3'.format(column_name)] = df[column_name].shift(3)\n    df['{}_shift_4'.format(column_name)] = df[column_name].shift(4)\n    df['{}_shift_5'.format(column_name)] = df[column_name].shift(5)\n    df['{}_shift_6'.format(column_name)] = df[column_name].shift(6)\n    df['{}_shift_8'.format(column_name)] = df[column_name].shift(8)\n    df['{}_shift_12'.format(column_name)] = df[column_name].shift(12)\n    \n    df['{}_var_1'.format(column_name)] = df[column_name].shift(1) - df[column_name].shift(2)\n    df['{}_var_2'.format(column_name)] = df[column_name].shift(1) - df[column_name].shift(3)\n    df['{}_var_3'.format(column_name)] = df[column_name].shift(1) - df[column_name].shift(4)\n    \n    df['{}_var_pct_1'.format(column_name)]\\\n    = (df[column_name].shift(1) - df[column_name].shift(2))\/df[column_name].shift(2)\n    df['{}_var_pct_2'.format(column_name)]\\\n    = (df[column_name].shift(1) - df[column_name].shift(3))\/df[column_name].shift(3)\n    df['{}_var_pct_3'.format(column_name)]\\\n    = (df[column_name].shift(1) - df[column_name].shift(4))\/df[column_name].shift(4)\n    \n    df.fillna(-1, inplace = True)\n\n    df.replace([np.inf, -np.inf], -1, inplace = True)\n\n    reduce_mem_usage(df)\n    \ndef generate_shift_features(df, column_name, gb_list):\n    \n    df['{}_shift_1'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(1))\n    df['{}_shift_2'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(2))\n    df['{}_shift_3'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(3))\n    df['{}_shift_4'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(4))\n    df['{}_shift_5'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(5))\n    df['{}_shift_6'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(6))\n    \n    df['{}_var_1'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(1) - x.shift(2))\n    df['{}_var_2'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(1) - x.shift(3))\n    df['{}_var_2_3'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(2) - x.shift(3))\n    df['{}_var_3'.format(column_name)] = df.groupby(gb_list)[column_name].transform(lambda x: x.shift(1) - x.shift(4))\n    \n    df['{}_var_pct_1'.format(column_name)]\\\n    = df.groupby(gb_list)[column_name].transform(lambda x: (x.shift(1) - x.shift(2))\/x.shift(2))\n    df['{}_var_pct_2'.format(column_name)]\\\n    = df.groupby(gb_list)[column_name].transform(lambda x: (x.shift(1) - x.shift(3))\/x.shift(3))\n    df['{}_var_pct_3'.format(column_name)]\\\n    = df.groupby(gb_list)[column_name].transform(lambda x: (x.shift(1) - x.shift(4))\/x.shift(4))\n    \n    df.fillna(-1, inplace = True)\n\n    df.replace([np.inf, -np.inf], -1, inplace = True)\n\n    reduce_mem_usage(df)","f8fa47bd":"st = time.time()\n\ngenerate_shift_features(full_df, column_name = 'sales', gb_list = ['shop_id'])\n\net = time.time()\n\n(et - st)\/60","007253a7":"full_df.head()","3c4522c8":"df_max_shop_id_item_id = full_df.groupby(['shop_id','item_id'])['sales'].max()\ndf_mean_shop_id_item_id = full_df.groupby(['shop_id','item_id'])['sales'].mean()\n","98973b9e":"\ndf_max_shop_id_item_id = df_max_shop_id_item_id.to_frame()\ndf_max_shop_id_item_id.columns=  ['max_shop_id_item_id']\n\ndf_mean_shop_id_item_id = df_mean_shop_id_item_id.to_frame()\ndf_mean_shop_id_item_id.columns=  ['mean_shop_id_item_id']\n","c00cb185":"\nfull_df = pd.merge(full_df, df_max_shop_id_item_id, on = [\"shop_id\",'item_id'], how = \"left\")\n\nfull_df = pd.merge(full_df, df_mean_shop_id_item_id, on = [\"shop_id\",'item_id'], how = \"left\")\n\n","341b9f4b":"st = time.time()\n\ngenerate_shift_features(full_df, column_name = 'max_shop_id_item_id', gb_list = [\"shop_id\", 'item_id'])\n\ngenerate_shift_features(full_df, column_name = 'mean_shop_id_item_id', gb_list = [\"shop_id\",'item_id'])\n\net = time.time()\n\n(et - st)\/60\n","a55adebf":"full_df.drop(['max_shop_id_item_id','mean_shop_id_item_id'],axis = 1 ,inplace = True)","583a15b4":"#Import the original df to calculate the mean of the sales by each month ","52b39789":"LOCAL = False\n\nif LOCAL:\n    PATH = os.getcwd()\nelse:\n    PATH = '..\/input\/competitive-data-science-predict-future-sales\/'\n    PATH_EXTERNAL = \"..\/input\/group-by-df\/\"\n\n\n# load all the df we have\nshops_df = pd.read_csv(os.path.join(PATH, \"shops.csv\"))\nitems_df = pd.read_csv(os.path.join(PATH, \"items.csv\"))\nitems_category_df = pd.read_csv(os.path.join(PATH, \"item_categories.csv\"))\nsales_df = pd.read_csv(os.path.join(PATH, \"sales_train.csv\"))\ntest_df = pd.read_csv(os.path.join(PATH, \"test.csv\"))\n#sub = pd.read_csv(os.path.join(PATH, \"sample_submission.csv\"))\n\n\n\n# we have seen in our EDA that we have some duplicate shops, let's correct them.\nshops_df.loc[shops_df.shop_name == '\u0421\u0435\u0440\u0433\u0438\u0435\u0432 \u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"', 'shop_name'] = '\u0421\u0435\u0440\u0433\u0438\u0435\u0432\u041f\u043e\u0441\u0430\u0434 \u0422\u0426 \"7\u042f\"'\nshops_df['city'] = shops_df['shop_name'].str.split(' ').map(lambda x: x[0])\nshops_df.loc[shops_df.city == '!\u042f\u043a\u0443\u0442\u0441\u043a', 'city'] = '\u042f\u043a\u0443\u0442\u0441\u043a'\nshops_df['city_code'] = LabelEncoder().fit_transform(shops_df['city'])\nshops_df.head()\n\nshops_df[shops_df[\"shop_id\"].isin([0, 57])]\n\n# \u042f\u043a\u0443\u0442\u0441\u043a \u041e\u0440\u0434\u0436\u043e\u043d\u0438\u043a\u0438\u0434\u0437\u0435, 56\nsales_df.loc[sales_df.shop_id == 0, 'shop_id'] = 57\ntest_df.loc[test_df.shop_id == 0, 'shop_id'] = 57\n\n# \u042f\u043a\u0443\u0442\u0441\u043a \u0422\u0426 \"\u0426\u0435\u043d\u0442\u0440\u0430\u043b\u044c\u043d\u044b\u0439\"\nsales_df.loc[sales_df.shop_id == 1, 'shop_id'] = 58\ntest_df.loc[test_df.shop_id == 1, 'shop_id'] = 58\n\n# \u0416\u0443\u043a\u043e\u0432\u0441\u043a\u0438\u0439 \u0443\u043b. \u0427\u043a\u0430\u043b\u043e\u0432\u0430 39\u043c\u00b2\nsales_df.loc[sales_df.shop_id == 10, 'shop_id'] = 11\ntest_df.loc[test_df.shop_id == 10, 'shop_id'] = 11\n\nitems_category_df['split'] = items_category_df['item_category_name'].str.split('-')\nitems_category_df['type'] = items_category_df['split'].map(lambda x: x[0].strip())\nitems_category_df['type_code'] = LabelEncoder().fit_transform(items_category_df['type'])\n\n# if subtype is nan then type\nitems_category_df['subtype'] = items_category_df['split'].map(lambda x: x[1].strip() if len(x) > 1 else x[0].strip())\nitems_category_df['subtype_code'] = LabelEncoder().fit_transform(items_category_df['subtype'])\n\nitems_category_df.head()\n\n# we have negative prices and some outlier\n# let's replace the data with the mean value and also filter all the outliers\nmean = sales_df[(sales_df[\"shop_id\"] == 32) & (sales_df[\"item_id\"] == 2973) & (sales_df[\"date_block_num\"] == 4) & (sales_df[\"item_price\"] > 0)][\"item_price\"].mean()\nsales_df.loc[sales_df.item_price < 0, 'item_price'] = mean\n\nsales_df = sales_df[sales_df[\"item_price\"] < np.percentile(sales_df[\"item_price\"], q = 100)]\nsales_df = sales_df[sales_df[\"item_cnt_day\"] < np.percentile(sales_df[\"item_cnt_day\"], q = 100)]\n\n# convert to datetime the date column\n# specify the format since otherwise it might give some problems\nsales_df[\"date\"] = pd.to_datetime(sales_df[\"date\"], format = \"%d.%m.%Y\")\n\n\n# Select only the shops inside \"SHOPS\"         SHOPS = [8, 14, 37, 41, 59]\nsales_df = sales_df[sales_df[\"shop_id\"].isin(SHOPS)]","f0b0d35d":"sales_df.head()","175e53ab":"sales_df['shop_id'].value_counts()","b78268f9":"sales_df = sales_df.set_index(\"date\")","23ff7f9e":"sales_df.head()","52f57fdc":"sales_df['sales'] = sales_df['item_price'] * sales_df['item_cnt_day']","bc0af9aa":"sales_df.head()","96c7841e":"sales_df","16d41394":"sales_df = sales_df.groupby(['shop_id','item_id'])","7b9a6703":"sales_df = sales_df.resample('M').agg({'sales':np.mean})","3c0c4b44":"sales_df.rename(columns = {'sales':'AVG_Monthly_sales'}, inplace = True)","000d9361":"sales_df_no_index = sales_df.reset_index()","b7ead7ee":"sales_df_prueba = sales_df.copy(deep = True)","d698a400":"sales_df_prueba.head()","7a6f839b":"#sales_df_prueba\ndf_rolling_window_1 = sales_df_prueba['AVG_Monthly_sales'].rolling(window=2).mean()\ndf_rolling_window_2 = sales_df_prueba['AVG_Monthly_sales'].rolling(window=3).mean()\ndf_rolling_window_3 = sales_df_prueba['AVG_Monthly_sales'].rolling(window=6).mean()\ndf_rolling_window_4 = sales_df_prueba['AVG_Monthly_sales'].rolling(window=12).mean()","01f0f9fa":"df_rolling_window_1 = df_rolling_window_1.to_frame()\ndf_rolling_window_1.columns=  ['Mean_Sales_rolling_window_shift_1']\n\ndf_rolling_window_2 = df_rolling_window_2.to_frame()\ndf_rolling_window_2.columns=  ['Mean_Sales_rolling_window_three_months_shift_1']\n\ndf_rolling_window_3 = df_rolling_window_3.to_frame()\ndf_rolling_window_3.columns=  ['Mean_Sales_rolling_window_four_months_shift_1']\n\ndf_rolling_window_4 = df_rolling_window_4.to_frame()\ndf_rolling_window_4.columns=  ['Mean_Sales_rolling_window_five_months_shift_1']","aa859578":"df_rolling_window_1 = df_rolling_window_1.shift(1)\n\ndf_rolling_window_2 = df_rolling_window_2.shift(1)\n\ndf_rolling_window_3 = df_rolling_window_3.shift(1)\n\ndf_rolling_window_4 = df_rolling_window_4.shift(1)","db076071":"full_df = pd.merge(full_df, df_rolling_window_1, on = ['shop_id','item_id','date'], how = \"left\")\n\nfull_df = pd.merge(full_df, df_rolling_window_2, on = ['shop_id','item_id','date'], how = \"left\")\n\nfull_df = pd.merge(full_df, df_rolling_window_3, on = ['shop_id','item_id','date'], how = \"left\")\n\nfull_df = pd.merge(full_df, df_rolling_window_4, on = ['shop_id','item_id','date'], how = \"left\")","35710bbc":"full_df.head()","f044a135":"full_df.fillna(0,inplace = True)","fc12b31b":"#As the column AVG_Monthly_sales and the rest are self explanatory, they are going to be deleted\n\n#full_df.drop(['AVG_Monthly_sales','AVG_2_Months','AVG_3_Months','AVG_6_Months','AVG_12_Months'],axis = 1,inplace = True)","13813362":"##Rolling window of the month\n#\n##Doing the feature with the shift(1) is no longer self-explanatory\n#\n#df_rolling_window = sales_df.groupby(['shop_id','date'])['AVG_Monthly_sales']\n#\n##two months\n#df_rolling_window_1 = df_rolling_window.rolling(window=2).mean()\n#df_rolling_window_2 = df_rolling_window.rolling(window=2).max()\n#\n##three months\n#df_rolling_window_3 = df_rolling_window.rolling(window=3).mean()\n#df_rolling_window_4 = df_rolling_window.rolling(window=3).max()\n#\n##six months\n#df_rolling_window_5 = df_rolling_window.rolling(window=6).mean()\n#df_rolling_window_6 = df_rolling_window.rolling(window=6).max()","eb05efec":"#df_rolling_window_1 = df_rolling_window_1.to_frame()\n#df_rolling_window_1.columns=  ['Mean_Sales_rolling_window_shift_2_mean']\n#\n#df_rolling_window_2 = df_rolling_window_2.to_frame()\n#df_rolling_window_2.columns=  ['Mean_Sales_rolling_window_shift_2_max']\n#\n#\n#df_rolling_window_3 = df_rolling_window_3.to_frame()\n#df_rolling_window_3.columns=  ['Mean_Sales_rolling_window_shift_3_mean']\n#\n#df_rolling_window_4 = df_rolling_window_4.to_frame()\n#df_rolling_window_4.columns=  ['Mean_Sales_rolling_window_shift_3_max']\n#\n#\n#df_rolling_window_5 = df_rolling_window_5.to_frame()\n#df_rolling_window_5.columns=  ['Mean_Sales_rolling_window_shift_6_mean']\n#\n#df_rolling_window_6 = df_rolling_window_6.to_frame()\n#df_rolling_window_6.columns=  ['Mean_Sales_rolling_window_shift_6_max']","ca48e775":"#full_df = pd.merge(full_df, df_rolling_window_1, on = ['shop_id','date'], how = \"left\")\n\n#full_df.drop('key_0',axis=1,inplace = True)","052aa035":"#full_df = pd.merge(full_df, df_rolling_window_1, on = df_rolling_window_1.index.to_numpy(), how = \"left\")\n#\n#full_df.drop('key_0',axis=1,inplace = True)\n#\n#\n#full_df = pd.merge(full_df, df_rolling_window_2, on = df_rolling_window_2.index.to_numpy(), how = \"left\")\n#\n#full_df.drop('key_0',axis=1,inplace = True)\n#\n#\n#\n#full_df = pd.merge(full_df, df_rolling_window_3, on = df_rolling_window_3.index.to_numpy(), how = \"left\")\n#\n#full_df.drop('key_0',axis=1,inplace = True)\n#\n#\n#\n#full_df = pd.merge(full_df, df_rolling_window_4, on = df_rolling_window_4.index.to_numpy(), how = \"left\")\n#\n#full_df.drop('key_0',axis=1,inplace = True)\n#\n#\n#\n#full_df = pd.merge(full_df, df_rolling_window_5, on = df_rolling_window_5.index.to_numpy(), how = \"left\")\n#\n#full_df.drop('key_0',axis=1,inplace = True)\n#\n#\n#\n#full_df = pd.merge(full_df, df_rolling_window_6, on = df_rolling_window_6.index.to_numpy(), how = \"left\")\n#\n#full_df.drop('key_0',axis=1,inplace = True)\n#\n#full_df.fillna(-1,inplace = True)\n#\n#reduce_mem_usage(full_df)","cc0406fb":"gc.collect()","ae3d31c9":"cols_to_drop = [\n\n'revenue',\n'shop_name',\n'city',\n'item_name',\n'item_category_name',\n'split',\n'type',\n'subtype',\n    \n'date_shop_id_sum',\n'date_shop_id_mean',\n\n'date_item_id_sum',\n'date_item_id_mean',\n\n'month_mean',\n'month_sum',\n\n'date_item_category_id_sum',\n'date_item_category_id_mean',\n\n'date_type_code_sum',\n'date_type_code_mean',\n\n'date_subtype_code_sum',\n'date_subtype_code_mean',\n\n'date_shop_id_type_code_sum',\n'date_shop_id_type_code_mean',\n\n'date_shop_id_subtype_code_sum',\n'date_shop_id_subtype_code_mean',\n\n'date_city_code_sum',\n'date_city_code_mean',\n\n'date_city_code_item_id_sum',\n'date_city_code_item_id_mean'\n    \n]","89dafe96":"full_df.drop(cols_to_drop, inplace = True, axis = 1)","944bfdc5":"full_df.head()","e1c3371b":"# split the data into train, validation and test dataset\ntrain_index = sorted(list(full_df[\"date\"].unique()))[:-2]\n\nvalida_index = [sorted(list(full_df[\"date\"].unique()))[-2]]\n\ntest_index = [sorted(list(full_df[\"date\"].unique()))[-1]]","7611ee5a":"X_train = full_df[full_df[\"date\"].isin(train_index)].drop(['sales', \"date\"], axis=1)\nY_train = full_df[full_df[\"date\"].isin(train_index)]['sales']\n\nX_valida = full_df[full_df[\"date\"].isin(valida_index)].drop(['sales', \"date\"], axis=1)\nY_valida = full_df[full_df[\"date\"].isin(valida_index)]['sales']\n\nX_test = full_df[full_df[\"date\"].isin(test_index)].drop(['sales', \"date\"], axis = 1)\nY_test = full_df[full_df[\"date\"].isin(test_index)]['sales']","ae01ac19":"gc.collect()","afdab192":"st = time.time()\n\nmodel = XGBRegressor(seed = 175)\n\nmodel_name = str(model).split(\"(\")[0]\n\nday = str(datetime.now()).split()[0].replace(\"-\", \"_\")\nhour = str(datetime.now()).split()[1].replace(\":\", \"_\").split(\".\")[0]\nt = str(day) + \"_\" + str(hour)\n\nmodel.fit(X_train, Y_train, eval_metric = \"rmse\", \n    eval_set = [(X_train, Y_train), (X_valida, Y_valida)], \n    verbose = True, \n    early_stopping_rounds = 10)\n\net = time.time()\n\nprint(\"Training took {} minutes!\".format((et - st)\/60))","3a2a20ce":"importance = model.get_booster().get_score(importance_type = \"gain\")\n\nimportance = {k: v for k, v in sorted(importance.items(), key = lambda item: item[1])}","313b44b5":"fig, ax = plt.subplots(figsize=(15, 30))\nplot_importance(model, importance_type = \"gain\", ax = ax)\nplt.savefig(\"{}_{}_plot_importance.png\".format(model_name, t))","4bfbdd66":"Y_valida_pred = model.predict(X_valida)","485a2476":"metrics.r2_score(Y_valida, Y_valida_pred)","124b10ad":"rmse_valida = sqrt(metrics.mean_squared_error(Y_valida, Y_valida_pred))\nrmse_valida","2be01b4a":"Y_test_predict = model.predict(X_test)","bfc503fa":"rmse_test = sqrt(metrics.mean_squared_error(Y_test, Y_test_predict))\nrmse_test","f37a40e8":"## Date and item_id features","9e076010":"#### Date and sub_type_code features","4a3d581b":"#### Date, city and item_id features","41a0c019":"## Add additional features to our full sales df","26b0ce9c":"## 1. Mover sales solamente por shop_id","aaf7b258":"## Create a groupby df with all the sales for shop_id and item_id grouped by months","d8365bfc":"Let's create a weekly range and see how many rows it will produce.","068c865e":"# cosas para hacer aqui tienes que imputarle el precio medio de cadda uno en los nulos o algo diferente para que no sea 0 ","0ae2105f":"#### Date and type_code features","c9b60110":"# Homework\n\nCreate new features to improve the model performance.","c75456ca":"## 2. Max and mean values for each shop_id & item_id shifts","433ceaa3":"# Some helper functions","5ee6d4aa":"#### Date, shop and sub_type features","77e409d5":"#### Date and city features","015101a7":"If we try to build our model with all the shops and item_id on a weekly basis we have a total of 46 million rows.\nThis makes the modeling part on a local machine very difficult.","a0d06e4c":"## 3. Rolling windows mean by shop_id","7bb3b8ee":"#### Date, shop and type features","7c82bac7":"### City population and mean_income per city","e2e7d042":"0.87 million rows, we CAN work with this on a local machine.\n\nWe have created monthly date_range, if we want to join this with our sales data, we must \"resample\" our data to a monthly date_range aswell.","72f71ae0":"### Adding holiday data","0dd2dda0":"The idea of this section is very simple. We have seen in our EDA part that there are a lot of missing values.\nOur model will benefit a lot if we can supply it a training data, with the missing values being zero. This way, it can learn from more amount of data.\n\nIn order to do so, we must perform a cartesian operation over dates x shops x items_id to generate all the possible combinations of months x shops and x items sales.\n\nIn this kernel we will only generate this type of features for the items that are present in TEST only.\n\nThis will reduce the amount of calculations required. If you have enough memory, we can do this for all possible combinations.","8ee2f6fd":"Now that we have the sales_df resampled by months, and we have created a cartesian product (all possible combinations of months, shop_id and item_id), let's merge the df.","fd8ddc5a":"## Correct the shop names and id","9a78bf53":"## Date and shop_id features","71a763b2":"Our model will benefit a lot if we can train it with the highest granularity (daily sales).\n\nHowever, as we can see doing this on a local machine is almost impossible since we have more than 1.4 BILLION rows.\nIf we add 10 featrues (columns) this means that our total DataFrame will have more than 10.4 BILLIONS instances.","68ad53d0":"## Join full sales df with all the features generated","bac22441":"In order to replicate the Kaggle competition, we will create a smaller DataFrame with only selected shops and train the model on a Monthly basis:\n\n--> 5 shops with most sales\n\n--> 5 shops with the lowest sales\n\n--> 6 shops with middle sales\n\n# La nueva selecci\u00f3n son 5 tiendas.\n","e7be8260":"# Preprocessing of the data before features generation","0d961300":"We will be working with a DataFrame resampled by Months. We must resample the sales_df.","e66ab235":"<h1>Table of Contents<span class=\"tocSkip\"><\/span><\/h1>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Import-of-libraries\" data-toc-modified-id=\"Import-of-libraries-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;<\/span>Import of libraries<\/a><\/span><\/li><li><span><a href=\"#Some-global-variables\" data-toc-modified-id=\"Some-global-variables-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;<\/span>Some global variables<\/a><\/span><\/li><li><span><a href=\"#Some-helper-functions\" data-toc-modified-id=\"Some-helper-functions-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;<\/span>Some helper functions<\/a><\/span><\/li><li><span><a href=\"#Preprocessing-of-the-data-before-features-generation\" data-toc-modified-id=\"Preprocessing-of-the-data-before-features-generation-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;<\/span>Preprocessing of the data before features generation<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Correct-the-shop-names-and-id\" data-toc-modified-id=\"Correct-the-shop-names-and-id-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;<\/span>Correct the shop names and id<\/a><\/span><\/li><li><span><a href=\"#Generate-item_category_features\" data-toc-modified-id=\"Generate-item_category_features-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;<\/span>Generate item_category_features<\/a><\/span><\/li><li><span><a href=\"#Remove-the-huge-price-and-item-sales-outliers\" data-toc-modified-id=\"Remove-the-huge-price-and-item-sales-outliers-4.3\"><span class=\"toc-item-num\">4.3&nbsp;&nbsp;<\/span>Remove the huge price and item sales outliers<\/a><\/span><\/li><li><span><a href=\"#Generate-a-full-df-with-all-data-and-records\" data-toc-modified-id=\"Generate-a-full-df-with-all-data-and-records-4.4\"><span class=\"toc-item-num\">4.4&nbsp;&nbsp;<\/span>Generate a full df with all data and records<\/a><\/span><\/li><li><span><a href=\"#Create-a-groupby-df-with-all-the-sales-for-shop_id-and-item_id-grouped-by-months\" data-toc-modified-id=\"Create-a-groupby-df-with-all-the-sales-for-shop_id-and-item_id-grouped-by-months-4.5\"><span class=\"toc-item-num\">4.5&nbsp;&nbsp;<\/span>Create a groupby df with all the sales for shop_id and item_id grouped by months<\/a><\/span><\/li><li><span><a href=\"#Join-the-full_df-with-gb_df\" data-toc-modified-id=\"Join-the-full_df-with-gb_df-4.6\"><span class=\"toc-item-num\">4.6&nbsp;&nbsp;<\/span>Join the full_df with gb_df<\/a><\/span><\/li><li><span><a href=\"#Add-additional-features-to-our-full-sales-df\" data-toc-modified-id=\"Add-additional-features-to-our-full-sales-df-4.7\"><span class=\"toc-item-num\">4.7&nbsp;&nbsp;<\/span>Add additional features to our full sales df<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#FeatureGenerator-class\" data-toc-modified-id=\"FeatureGenerator-class-4.7.1\"><span class=\"toc-item-num\">4.7.1&nbsp;&nbsp;<\/span>FeatureGenerator class<\/a><\/span><\/li><li><span><a href=\"#Generate-additional-features-as,-mean-and-total-sales-for-shop_id-,-item_id,-city-...-for-every-month\" data-toc-modified-id=\"Generate-additional-features-as,-mean-and-total-sales-for-shop_id-,-item_id,-city-...-for-every-month-4.7.2\"><span class=\"toc-item-num\">4.7.2&nbsp;&nbsp;<\/span>Generate additional features as, mean and total sales for shop_id , item_id, city ... for every month<\/a><\/span><ul class=\"toc-item\"><li><span><a href=\"#Date-features\" data-toc-modified-id=\"Date-features-4.7.2.1\"><span class=\"toc-item-num\">4.7.2.1&nbsp;&nbsp;<\/span>Date features<\/a><\/span><\/li><li><span><a href=\"#Date-and-shop_id-features\" data-toc-modified-id=\"Date-and-shop_id-features-4.7.2.2\"><span class=\"toc-item-num\">4.7.2.2&nbsp;&nbsp;<\/span>Date and shop_id features<\/a><\/span><\/li><li><span><a href=\"#Date-and-item_id-features\" data-toc-modified-id=\"Date-and-item_id-features-4.7.2.3\"><span class=\"toc-item-num\">4.7.2.3&nbsp;&nbsp;<\/span>Date and item_id features<\/a><\/span><\/li><li><span><a href=\"#Date-and-item_category-features\" data-toc-modified-id=\"Date-and-item_category-features-4.7.2.4\"><span class=\"toc-item-num\">4.7.2.4&nbsp;&nbsp;<\/span>Date and item_category features<\/a><\/span><\/li><li><span><a href=\"#Date-and-type_code-features\" data-toc-modified-id=\"Date-and-type_code-features-4.7.2.5\"><span class=\"toc-item-num\">4.7.2.5&nbsp;&nbsp;<\/span>Date and type_code features<\/a><\/span><\/li><li><span><a href=\"#Date-and-sub_type_code-features\" data-toc-modified-id=\"Date-and-sub_type_code-features-4.7.2.6\"><span class=\"toc-item-num\">4.7.2.6&nbsp;&nbsp;<\/span>Date and sub_type_code features<\/a><\/span><\/li><li><span><a href=\"#Date,-shop-and-type-features\" data-toc-modified-id=\"Date,-shop-and-type-features-4.7.2.7\"><span class=\"toc-item-num\">4.7.2.7&nbsp;&nbsp;<\/span>Date, shop and type features<\/a><\/span><\/li><li><span><a href=\"#Date,-shop-and-sub_type-features\" data-toc-modified-id=\"Date,-shop-and-sub_type-features-4.7.2.8\"><span class=\"toc-item-num\">4.7.2.8&nbsp;&nbsp;<\/span>Date, shop and sub_type features<\/a><\/span><\/li><li><span><a href=\"#Date-and-city-features\" data-toc-modified-id=\"Date-and-city-features-4.7.2.9\"><span class=\"toc-item-num\">4.7.2.9&nbsp;&nbsp;<\/span>Date and city features<\/a><\/span><\/li><li><span><a href=\"#Date,-city-and-item_id-features\" data-toc-modified-id=\"Date,-city-and-item_id-features-4.7.2.10\"><span class=\"toc-item-num\">4.7.2.10&nbsp;&nbsp;<\/span>Date, city and item_id features<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Shift-features-of-shop_id-and-item_id-sales\" data-toc-modified-id=\"Shift-features-of-shop_id-and-item_id-sales-4.7.3\"><span class=\"toc-item-num\">4.7.3&nbsp;&nbsp;<\/span>Shift features of shop_id and item_id sales<\/a><\/span><\/li><li><span><a href=\"#Shift-features-of-shop_id-and-item_id-price\" data-toc-modified-id=\"Shift-features-of-shop_id-and-item_id-price-4.7.4\"><span class=\"toc-item-num\">4.7.4&nbsp;&nbsp;<\/span>Shift features of shop_id and item_id price<\/a><\/span><\/li><li><span><a href=\"#Shift-features-of-shop_id-and-item_id-revenue\" data-toc-modified-id=\"Shift-features-of-shop_id-and-item_id-revenue-4.7.5\"><span class=\"toc-item-num\">4.7.5&nbsp;&nbsp;<\/span>Shift features of shop_id and item_id revenue<\/a><\/span><\/li><li><span><a href=\"#Datetime-features\" data-toc-modified-id=\"Datetime-features-4.7.6\"><span class=\"toc-item-num\">4.7.6&nbsp;&nbsp;<\/span>Datetime features<\/a><\/span><\/li><li><span><a href=\"#Adding-holiday-data\" data-toc-modified-id=\"Adding-holiday-data-4.7.7\"><span class=\"toc-item-num\">4.7.7&nbsp;&nbsp;<\/span>Adding holiday data<\/a><\/span><\/li><li><span><a href=\"#City-population-and-mean_income-per-city\" data-toc-modified-id=\"City-population-and-mean_income-per-city-4.7.8\"><span class=\"toc-item-num\">4.7.8&nbsp;&nbsp;<\/span>City population and mean_income per city<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Join-full-sales-df-with-all-the-features-generated\" data-toc-modified-id=\"Join-full-sales-df-with-all-the-features-generated-4.8\"><span class=\"toc-item-num\">4.8&nbsp;&nbsp;<\/span>Join full sales df with all the features generated<\/a><\/span><\/li><\/ul><\/li><li><span><a href=\"#Basic-model-train\" data-toc-modified-id=\"Basic-model-train-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;<\/span>Basic model train<\/a><\/span><\/li><li><span><a href=\"#Feature-importance\" data-toc-modified-id=\"Feature-importance-6\"><span class=\"toc-item-num\">6&nbsp;&nbsp;<\/span>Feature importance<\/a><\/span><\/li><li><span><a href=\"#Predict-and-model-evaluation\" data-toc-modified-id=\"Predict-and-model-evaluation-7\"><span class=\"toc-item-num\">7&nbsp;&nbsp;<\/span>Predict and model evaluation<\/a><\/span><\/li><li><span><a href=\"#Homework\" data-toc-modified-id=\"Homework-8\"><span class=\"toc-item-num\">8&nbsp;&nbsp;<\/span>Homework<\/a><\/span>","e60d8e7c":"# Some global variables","663d1a04":"### Shift features of shop_id and item_id sales","6997cb48":"### Shift features of shop_id and item_id price","1364fd28":"#### Date and item_category features","ba6d0628":"## Join the full_df with gb_df","1735c9be":"### Shift features of shop_id and item_id revenue","d4b35119":"## Date features","c866005e":"## Generate a full df with all data and records","52a4c24b":"## Rolling window for other periods","7d4a07d6":"## Generate item_category_features","4a6c72c0":"# Feature importance","222a3bef":"# Predict and model evaluation","88c4c9d8":"### Datetime features","c30e1854":"# Generate additional features as, mean and total sales for shop_id , item_id, city ... for every month","a6243759":"# Basic model train","3bbe0f6f":"## Remove the huge price and item sales outliers","7154a16d":"# Import of libraries","0c7f5daf":"### FeatureGenerator class","3593ba5e":"As we can see, we have some duplicate shop names, let's manually clean them."}}