{"cell_type":{"245c42b6":"code","1105b21c":"code","4683a8f4":"code","b0f0b63b":"code","c97fe15c":"code","d4e10338":"code","21a36deb":"code","7853a248":"code","30f446c1":"code","ac56dc22":"code","77d834b0":"code","d65b0d8a":"code","380e1fa8":"code","3e88373e":"code","bf903227":"code","5e31dd1a":"code","3f8d489f":"code","37f7267e":"code","4772e631":"code","29a871a1":"code","c950b587":"code","b3fcaad4":"code","8af94a48":"code","90d492db":"code","f1df7112":"code","e56c1a96":"code","36fc3bb8":"code","7f134801":"code","12401e90":"code","54e568ac":"code","e3e3f405":"code","dac35760":"code","2528a3db":"code","ad79938b":"code","2925e00f":"code","7ed71681":"code","ca47aef8":"code","28f7d672":"code","e100248e":"code","39b6a627":"code","b36b1566":"markdown","3e56549e":"markdown","e2bbe913":"markdown","a54ff2be":"markdown","41e0cfd8":"markdown","c3272fd7":"markdown","5c54c758":"markdown","356f8e33":"markdown","134ce84e":"markdown","6305bfab":"markdown","ae2e774d":"markdown","24448a08":"markdown","15fbf7fb":"markdown","7049fc22":"markdown","2ca5cc5a":"markdown","8698df03":"markdown","6b53a93a":"markdown","05bc7d0e":"markdown","7344d5b7":"markdown","ff049de8":"markdown","468a4c78":"markdown","b78619d1":"markdown","6c752fa4":"markdown","de8a3c8b":"markdown","20e70ee4":"markdown","da036c8d":"markdown","256b5696":"markdown","4eb92ae0":"markdown","6424cfb0":"markdown","140a4e04":"markdown","2c35c31f":"markdown","389eae65":"markdown","86791f9d":"markdown","7178c03b":"markdown","a1b97107":"markdown","fccb821b":"markdown","83a2613c":"markdown","97cf4495":"markdown","24e7a99f":"markdown","9673f50d":"markdown","ee7b4f9b":"markdown","7345bc7b":"markdown","199f79d6":"markdown","e344c466":"markdown","4a58e2e7":"markdown","cab15ba8":"markdown"},"source":{"245c42b6":"!pip install jovian opendatasets --upgrade --quiet\n\n!pip install numpy pandas matplotlib.pyplot seaborn  --upgrade --quite\n\n!pip install plotly --upgrade ","1105b21c":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport opendatasets as od\nimport os\n\n\nimport plotly.express as px\n\n%matplotlib inline","4683a8f4":"import matplotlib.style as style\n\nstyle.use('seaborn-poster')\nstyle.use(\"fivethirtyeight\")\nplt.rcParams['font.family'] = 'serif'\nsns.set(rc={'axes.facecolor':'black', 'figure.facecolor':'black', 'axes.grid' : True})","b0f0b63b":"od.download('https:\/\/www.kaggle.com\/zusmani\/pakistans-largest-ecommerce-dataset')","c97fe15c":"ecommerce = pd.read_csv('.\/pakistans-largest-ecommerce-dataset\/Pakistan Largest Ecommerce Dataset.csv',\n                       comment=',' )","d4e10338":"ecommerce.shape","21a36deb":"ecommerce.head()","7853a248":"ecommerce = ecommerce.dropna(how='all', axis=1)","30f446c1":"ecommerce.describe()","ac56dc22":"total = ecommerce[ecommerce.grand_total < 0].status.value_counts().to_dict()\n\ntotal_df = pd.DataFrame(list(total.items()), columns=['Order Status', 'Counts'])\n\nplt.figure(figsize=(20,10))\nax = sns.barplot(data=total_df, x='Order Status', y='Counts', palette='bright')\nax.bar_label(container = ax.containers[0], padding = 0, fontsize = 22, color='white')\nplt.xticks( fontsize=20)\nplt.yticks( fontsize=20)\nplt.xlabel('Order Status', fontsize=24, labelpad=24, color='white')\nplt.ylabel('Counts', fontsize=24, labelpad=24, color='white');\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white');","77d834b0":"ecommerce = ecommerce[ecommerce.grand_total > 0]","d65b0d8a":"plt.figure(figsize=(20,10))\n\nstatus = ecommerce.status.value_counts()\nstatus_df = pd.DataFrame(list(status.items()), columns=['Order Status', 'Counts'])\n\nax = sns.barplot(data = status_df, x= 'Order Status', y = \"Counts\", palette = \"bright\")\nax.bar_label(container = ax.containers[0], padding = 0, fontsize = 20, color='white')\nplt.xticks( fontsize=20)\nplt.yticks( fontsize=20)\nplt.xlabel('Order Status', fontsize=24, labelpad=24, color='white')\nplt.ylabel('Counts', fontsize=24, labelpad=24, color='white');\nplt.xticks(rotation=90, ha='center');\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white');","380e1fa8":"ecommerce.status = ecommerce.status.replace({'complete': 'Completed',\n                                             'received': 'Completed',\n                                             'cod': 'Completed',\n                                             'paid': 'Completed',\n                                             'closed': 'Completed',\n                                             'exchange': 'Completed',\n                                             'canceled': 'Canceled',\n                                             'order_refunded': 'Canceled',\n                                             'refund': 'Canceled',\n                                             'fraud': 'Canceled',\n                                             'payment_review': 'Pending',\n                                             'pending': 'Pending',\n                                             'processing': 'Pending',\n                                             'holded': 'Pending',\n                                             'pending_paypal': 'Pending'})\n","3e88373e":"status_updated = ecommerce.status.value_counts()\n\nstatus_updated_df = pd.DataFrame(list(status_updated.items()), columns=['Order Status', 'Counts'])\n\nplt.figure(figsize=(20,10))\nax = sns.barplot(data=status_updated_df, x='Order Status', y='Counts', palette='bright')\nax.bar_label(container = ax.containers[0], padding = 0, fontsize = 20, color='white')\nplt.xticks( fontsize=20)\nplt.yticks( fontsize=20)\nplt.xlabel('Order Staus', fontsize=24, labelpad=24, color='white')\nplt.ylabel('Counts', fontsize=24, labelpad=24, color='white');\nplt.xticks(rotation=90, ha='center');\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white');","bf903227":"canceled = ecommerce[ecommerce.status == 'Canceled']","5e31dd1a":"ecommerce = ecommerce[(ecommerce.status == 'Completed') | (ecommerce.status == 'Pending')]\nstatus_updated = ecommerce.status.value_counts()\n\nstatus_updated_df = pd.DataFrame(list(status_updated.items()), columns=['Order Status', 'Counts'])\n\nplt.figure(figsize=(20,10))\nax = sns.barplot(data=status_updated_df, x='Order Status', y='Counts', palette='bright')\nax.bar_label(container = ax.containers[0], padding = 0, fontsize = 20, color='white')\nplt.xticks( fontsize=20)\nplt.yticks( fontsize=20)\nplt.xlabel('Order Staus', fontsize=24, labelpad=24, color='white')\nplt.ylabel('Counts', fontsize=24, labelpad=24, color='white');\nplt.xticks(rotation=90, ha='center');\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white');","3f8d489f":"missing_values = ecommerce.isna().sum().sort_values(ascending=False)\n\nmissing_values_df = pd.DataFrame(list(missing_values.items()), columns=['Column', 'Missing_Values'])\n\nplt.figure(figsize=(20,10))\n\nax = sns.barplot(data=missing_values_df, x = 'Column', y = 'Missing_Values', palette='bright')\nax.bar_label(container = ax.containers[0], padding = 0, fontsize = 20, color='white')\nplt.xticks( fontsize=20)\nplt.yticks( fontsize=20)\nax.set_xlabel('Column', fontsize=24, labelpad=24, color='white')\nax.set_ylabel('Missing Values', fontsize=24, labelpad=24, color='white');\nplt.xticks(rotation=90, ha='center');\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white');","37f7267e":"ecommerce = ecommerce.drop(['created_at', 'sku', 'sales_commission_code', 'Customer Since', 'M-Y'], axis=1)\n\necommerce = ecommerce.dropna()","4772e631":"number_of_orders = ecommerce.groupby('Customer ID')['increment_id'].nunique().sort_values(ascending=False)\n\nnumber_of_orders_df = pd.DataFrame(list(number_of_orders.items()), columns=['Customer ID', 'Number of Orders'])\n\na = number_of_orders_df[number_of_orders_df['Number of Orders'] == 1].value_counts().sum()\nb = number_of_orders_df[number_of_orders_df['Number of Orders'] != 1].value_counts().sum()\n\n\ndata = {'Order': ['One Order', 'More than One Order'], 'Customer_Counts': [a, b]}\n\norder_counts = pd.DataFrame.from_dict(data)\n\nfig = px.pie(order_counts, \n             values = order_counts.Customer_Counts, \n             names = order_counts.Order,\n             template = 'plotly_dark')\nfig.update_traces(textposition='inside', textinfo='percent+label', textfont_size=20,\n                  marker = dict(line = dict(color = 'white', width = 6)))\nfig.show()","29a871a1":"number_of_prod = ecommerce.groupby('Customer ID')['category_name_1'].nunique().sort_values(ascending=False)\n\nnumber_of_prod_df = pd.DataFrame(list(number_of_prod.items()), columns=['Customer ID', 'Number of Products'])\n\na = number_of_prod_df[number_of_prod_df['Number of Products'] == 1].value_counts().sum()\nb = number_of_prod_df[number_of_prod_df['Number of Products'] != 1].value_counts().sum()\n\ndata = {'Order': ['One Category', 'More than One Category'], 'Customer_Counts': [a, b]}\n\ncategory_counts = pd.DataFrame.from_dict(data)\n\nfig = px.pie(category_counts, \n             values = category_counts.Customer_Counts, \n             names = category_counts.Order,\n             template = 'plotly_dark')\nfig.update_traces(textposition='inside', textinfo='percent+label', textfont_size=20,\n                  marker = dict(line = dict(color = 'white', width = 6)))\nfig.show()","c950b587":"a = ecommerce['Customer ID'].nunique() + canceled ['Customer ID'].nunique()\nb = canceled ['Customer ID'].nunique()\n\ndata = {'Customers': ['Total Customers', 'Those Who Canceled'], 'Customer_Counts': [a, b]}\n\ncustomer_counts = pd.DataFrame.from_dict(data)\n\n\nc = ecommerce['increment_id'].nunique() + canceled ['increment_id'].nunique()\nd = canceled ['increment_id'].nunique()\n\ndata = {'Orders': ['Total Orders', 'Canceled Orders'], 'Order_Counts': [c, d]}\n\norder_counts = pd.DataFrame.from_dict(data)\n\n\nsns.set(rc={'axes.facecolor':'black', 'figure.facecolor':'black', 'axes.grid' : True})\n\nfig, ax = plt.subplots(1,2, figsize = (20,10))\nsns.barplot(ax = ax[0], data = customer_counts, x=customer_counts.Customers, y=customer_counts.Customer_Counts, palette= 'bright')\nsns.barplot(ax = ax[1], data = order_counts, x=order_counts.Orders, y=order_counts.Order_Counts, palette= 'bright')\n\nax[0].set_title(\"Customers Who Canceled\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[0].set_xlabel(\"Customers\", fontsize = 24, labelpad = 15, color='white')\nax[0].set_ylabel(\"Counts\", fontsize = 24, labelpad = 15, color='white')\nax[0].tick_params(axis='x', colors='white', labelsize=20)\nax[0].tick_params(axis='y', colors='white', labelsize=20)\n\n\nax[1].set_title(\"Canceled Orders\", fontsize = 28, pad = 30, color='red', fontweight='bold')\nax[1].set_xlabel(\"Orders\", fontsize = 24, labelpad = 15, color='white')\nax[1].set_ylabel(\"Counts\", fontsize = 24, labelpad = 15, color='white')\nax[1].tick_params(axis='x', colors='white', labelsize=20)\nax[1].tick_params(axis='y', colors='white', labelsize=20);\n\nplt.tight_layout(pad=2);\n","b3fcaad4":"canceled = canceled.dropna()\nfig = px.treemap(canceled, \n                 path=['category_name_1'], template='plotly_dark')\nfig.update_traces(textfont_color='yellow',textfont_size=16, selector=dict(type='treemap'))\nfig.show()","8af94a48":"ecommerce['Working Date'] = pd.to_datetime(ecommerce['Working Date'])\nref_date = ecommerce['Working Date'].max()\necommerce['Date'] = ecommerce['Working Date'].apply(lambda x: x.date())\necommerce['Most_Recent_Purchase'] = ecommerce.groupby('Customer ID')['Date'].transform(max)\necommerce['Recency'] = (ref_date.date() - ecommerce.Most_Recent_Purchase).astype('timedelta64[D]')","90d492db":"ecommerce = ecommerce.drop('Most_Recent_Purchase', axis=1)","f1df7112":"ecommerce['Frequency'] = ecommerce.groupby('Customer ID')['increment_id'].transform('nunique')","e56c1a96":"ecommerce['Monetary'] = ecommerce.groupby('Customer ID')['grand_total'].transform(sum)","36fc3bb8":"RFM_df = ecommerce[['Customer ID', 'Recency', 'Frequency', 'Monetary']].drop_duplicates()\nRFM_df.head()","7f134801":"RFM_quantiles = RFM_df[['Recency', 'Frequency', 'Monetary']].quantile(q = [0.25, 0.5, 0.75])\n\nRFM_df.loc[(RFM_df['Recency'] <= RFM_quantiles.Recency[0.25]), 'Rscore'] = 4.0\nRFM_df.loc[(RFM_df['Recency'] > RFM_quantiles.Recency[0.25]) & (RFM_df.Recency <= RFM_quantiles.Recency[0.5]), 'Rscore'] = 3.0\nRFM_df.loc[(RFM_df['Recency'] > RFM_quantiles.Recency[0.5]) & (RFM_df.Recency <= RFM_quantiles.Recency[0.75]), 'Rscore'] = 2.0\nRFM_df.loc[(RFM_df['Recency'] > RFM_quantiles.Recency[0.75]), 'Rscore'] = 1.0\n\nRFM_df.loc[(RFM_df['Frequency'] <= RFM_quantiles.Frequency[0.25]), 'Fscore'] = 1.0\nRFM_df.loc[(RFM_df['Frequency'] > RFM_quantiles.Frequency[0.25]) & (RFM_df['Frequency'] <= RFM_quantiles.Frequency[0.5]), 'Fscore'] = 2.0\nRFM_df.loc[(RFM_df['Frequency'] > RFM_quantiles.Frequency[0.5]) & (RFM_df['Frequency'] <= RFM_quantiles.Frequency[0.75]), 'Fscore'] = 3.0\nRFM_df.loc[(RFM_df['Frequency'] > RFM_quantiles.Frequency[0.75]), 'Fscore'] = 4.0\n\nRFM_df.loc[(RFM_df['Monetary'] <= RFM_quantiles.Monetary[0.25]), 'Mscore'] = 1.0\nRFM_df.loc[(RFM_df['Monetary'] > RFM_quantiles.Monetary[0.25]) & (RFM_df['Monetary'] <= RFM_quantiles.Monetary[0.5]), 'Mscore'] = 2.0\nRFM_df.loc[(RFM_df['Monetary'] > RFM_quantiles.Monetary[0.5]) & (RFM_df['Monetary'] <= RFM_quantiles.Monetary[0.75]), 'Mscore'] = 3.0\nRFM_df.loc[(RFM_df['Monetary'] > RFM_quantiles.Monetary[0.75]), 'Mscore'] = 4.0\n\nRFM_df['RFM_score'] = RFM_df.Rscore + RFM_df.Fscore + RFM_df.Mscore","12401e90":"RFM_df.loc[(RFM_df['RFM_score'] == 12.0), 'Cluster'] = 'Champions'\nRFM_df.loc[(RFM_df['RFM_score'] == 11.0), 'Cluster'] = 'Loyal Customers'\nRFM_df.loc[(RFM_df['RFM_score'] >= 9.0) & (RFM_df['RFM_score'] <= 10.0), 'Cluster'] = 'Promising Customers'\nRFM_df.loc[(RFM_df['RFM_score'] >= 7.0) & (RFM_df['RFM_score'] <= 8.0), 'Cluster'] = 'At Risk'\nRFM_df.loc[(RFM_df['RFM_score'] >= 4.0) & (RFM_df['RFM_score'] <= 6.0), 'Cluster'] = 'Hibernating'\nRFM_df.loc[(RFM_df['RFM_score'] == 3.0), 'Cluster'] = 'Lost Customers'","54e568ac":"plt.figure(figsize=(20,10))\n\nax = sns.boxplot(data=RFM_df, x='Cluster', y = 'Recency', palette='bright');\nplt.xticks( fontsize=20)\nplt.yticks( fontsize=20)\nplt.xlabel('Clusters', fontsize=30, labelpad=30, color='white')\nplt.ylabel('Recency', fontsize=30, labelpad=30, color='white');\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white');","e3e3f405":"frequency = RFM_df.groupby('Cluster')['Frequency'].sum()\nfrequency_df = pd.DataFrame(list(frequency.items()), columns=['Cluster', 'Number_of_Purchases'])\n\nplt.figure(figsize=(20,10))\n\nax = sns.barplot(data=frequency_df, x='Cluster', y='Number_of_Purchases', palette='bright')\nax.bar_label(container = ax.containers[0], padding = 0, fontsize = 22, color='white')\nplt.xticks( fontsize=20)\nplt.yticks( fontsize=20)\nplt.xlabel('Clusters', fontsize=30, labelpad=24, color='white')\nplt.ylabel('No. of Purchases', fontsize=30, labelpad=24, color='white');\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white');","dac35760":"frequency = RFM_df.groupby('Cluster')['Monetary'].mean()\nfrequency_df = pd.DataFrame(list(frequency.items()), columns=['Cluster', 'Spendings'])\n\nplt.figure(figsize=(20,10))\n\nax = sns.barplot(data=frequency_df, x='Cluster', y='Spendings', palette='bright')\nax.bar_label(container = ax.containers[0], padding = 0, fontsize = 22, color='white')\nplt.xticks( fontsize=20)\nplt.yticks( fontsize=20)\nplt.xlabel('Clusters', fontsize=30, labelpad=24, color='white')\nplt.ylabel('Spendings', fontsize=30, labelpad=24, color='white');\nax.tick_params(axis='x', colors='white')\nax.tick_params(axis='y', colors='white');","2528a3db":"cluster_mapping = pd.Series(RFM_df.Cluster.values, index=RFM_df['Customer ID']).to_dict()\n\necommerce['Cluster'] = ecommerce['Customer ID'].map(cluster_mapping)","ad79938b":"cluster_counts = RFM_df.Cluster.value_counts()\n\ncluster_counts_df = pd.DataFrame(list(cluster_counts.items()), columns=['Cluster', 'Number_of_Customers'])\n\n\nfig = px.pie(cluster_counts_df, \n             values = cluster_counts_df.Number_of_Customers, \n             names = cluster_counts_df.Cluster,\n             template = 'plotly_dark')\nfig.update_traces(textposition='inside', textinfo='percent+label', textfont_size=20,\n                  marker = dict(line = dict(color = 'white', width = 6)))\nfig.show()","2925e00f":"fig = px.treemap(ecommerce, \n                 path=['Cluster','category_name_1'], template='plotly_dark', height=1000)\nfig.update_traces(textfont_color='yellow', textfont_size=16, selector=dict(type='treemap'))\nfig.show()","7ed71681":"cluster1 = ecommerce[ecommerce.Cluster == 'Champions'].groupby('category_name_1')['grand_total'].sum().to_frame().reset_index()\ncluster1.columns = ['Category', 'Grand_Total_Cluster1']\n\ncluster2 = ecommerce[ecommerce.Cluster == 'Loyal Customers'].groupby('category_name_1')['grand_total'].sum().to_frame().reset_index()\ncluster2.columns = ['Category', 'Grand_Total_Cluster2']\n\ncluster3 = ecommerce[ecommerce.Cluster == 'Promising Customers'].groupby('category_name_1')['grand_total'].sum().to_frame().reset_index()\ncluster3.columns = ['Category', 'Grand_Total_Cluster3']\n\ncluster4 = ecommerce[ecommerce.Cluster == 'At Risk'].groupby('category_name_1')['grand_total'].sum().to_frame().reset_index()\ncluster4.columns = ['Category', 'Grand_Total_Cluster4']\n\ncluster5 = ecommerce[ecommerce.Cluster == 'Hibernating'].groupby('category_name_1')['grand_total'].sum().to_frame().reset_index()\ncluster5.columns = ['Category', 'Grand_Total_Cluster5']\n\ncluster6 = ecommerce[ecommerce.Cluster == 'Lost Customers'].groupby('category_name_1')['grand_total'].sum().to_frame().reset_index()\ncluster6.columns = ['Category', 'Grand_Total_Cluster6']\n\nmerged = cluster1.merge(cluster2, how='left').merge(cluster3, how='left').merge(cluster4, how='left').merge(cluster5, how='left').merge(cluster6, how='left')","ca47aef8":"sns.set(rc={'axes.facecolor':'black', 'figure.facecolor':'black', 'axes.grid' : True})\n\nfig, ax = plt.subplots(3,2, figsize = (20,20))\nsns.barplot(ax = ax[0,0], data = cluster1, y=cluster1.Category, x=cluster1.Grand_Total_Cluster1, palette= 'bright')\nsns.barplot(ax = ax[0,1], data = cluster2, y=cluster2.Category, x=cluster2.Grand_Total_Cluster2, palette= 'bright')\nsns.barplot(ax = ax[1,0], data = cluster3, y=cluster3.Category, x=cluster3.Grand_Total_Cluster3, palette= 'bright')\nsns.barplot(ax = ax[1,1], data = cluster4, y=cluster4.Category, x=cluster4.Grand_Total_Cluster4, palette= 'bright')\nsns.barplot(ax = ax[2,0], data = cluster5, y=cluster5.Category, x=cluster5.Grand_Total_Cluster5, palette= 'bright')\nsns.barplot(ax = ax[2,1], data = cluster6, y=cluster6.Category, x=cluster6.Grand_Total_Cluster6, palette= 'bright')\n\nax[0,0].set_title(\"Cluster 1 - Champions\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[0,0].set_xlabel(\"Amount Spent\", fontsize = 20, labelpad = 15, color='white')\nax[0,0].set_ylabel(\"Category\", fontsize = 20, labelpad = 15, color='white')\nax[0,0].tick_params(axis='x', colors='white')\nax[0,0].tick_params(axis='y', colors='white')\n\nax[0,1].set_title(\"Cluster 2 - Loyal Customers\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[0,1].set_xlabel(\"Amount Spent\", fontsize = 20, labelpad = 15, color='white')\nax[0,1].set_ylabel(\"Category\", fontsize = 20, labelpad = 15, color='white')\nax[0,1].tick_params(axis='x', colors='white')\nax[0,1].tick_params(axis='y', colors='white')\n\nax[1,0].set_title(\"Cluster 3 - Promising Customers\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[1,0].set_xlabel(\"Amount Spent\", fontsize = 20, labelpad = 15, color='white')\nax[1,0].set_ylabel(\"Category\", fontsize = 20, labelpad = 15, color='white')\nax[1,0].tick_params(axis='x', colors='white')\nax[1,0].tick_params(axis='y', colors='white')\n\nax[1,1].set_title(\"Cluster 4 - At Risk\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[1,1].set_xlabel(\"Amount Spent\", fontsize = 20, labelpad = 15, color='white')\nax[1,1].set_ylabel(\"Category\", fontsize = 20, labelpad = 15, color='white')\nax[1,1].tick_params(axis='x', colors='white')\nax[1,1].tick_params(axis='y', colors='white')\n\nax[2,0].set_title(\"Cluster 5 - Hibernating\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[2,0].set_xlabel(\"Amount Spent\", fontsize = 20, labelpad = 15, color='white')\nax[2,0].set_ylabel(\"Category\", fontsize = 20, labelpad = 15, color='white')\nax[2,0].tick_params(axis='x', colors='white')\nax[2,0].tick_params(axis='y', colors='white')\n\nax[2,1].set_title(\"Cluster 6 - Lost Customers\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[2,1].set_xlabel(\"Amount Spent\", fontsize = 20, labelpad = 15, color='white')\nax[2,1].set_ylabel(\"Category\", fontsize = 20, labelpad = 15, color='white')\nax[2,1].tick_params(axis='x', colors='white')\nax[2,1].tick_params(axis='y', colors='white')\n\nplt.tight_layout(pad=2);","28f7d672":"cluster1_payment = ecommerce[ecommerce.Cluster == 'Champions'].payment_method.value_counts().to_frame().reset_index()\ncluster1_payment.columns = ['Category', 'Payment_Method_Cluster1']\n\ncluster2_payment = ecommerce[ecommerce.Cluster == 'Loyal Customers'].payment_method.value_counts().to_frame().reset_index()\ncluster2_payment.columns = ['Category', 'Payment_Method_Cluster2']\n\ncluster3_payment = ecommerce[ecommerce.Cluster == 'Promising Customers'].payment_method.value_counts().to_frame().reset_index()\ncluster3_payment.columns = ['Category', 'Payment_Method_Cluster3']\n\ncluster4_payment = ecommerce[ecommerce.Cluster == 'At Risk'].payment_method.value_counts().to_frame().reset_index()\ncluster4_payment.columns = ['Category', 'Payment_Method_Cluster4']\n\ncluster5_payment = ecommerce[ecommerce.Cluster == 'Hibernating'].payment_method.value_counts().to_frame().reset_index()\ncluster5_payment.columns = ['Category', 'Payment_Method_Cluster5']\n\ncluster6_payment = ecommerce[ecommerce.Cluster == 'Lost Customers'].payment_method.value_counts().to_frame().reset_index()\ncluster6_payment.columns = ['Category', 'Payment_Method_Cluster6']\n\nmerged_payment = cluster1_payment.merge(cluster2_payment, how='left').merge(cluster3_payment, how='left').merge(cluster4_payment, how='left').merge(cluster5_payment, how='left').merge(cluster6_payment, how='left')","e100248e":"sns.set(rc={'axes.facecolor':'black', 'figure.facecolor':'black', 'axes.grid' : True})\n\nfig, ax = plt.subplots(3,2, figsize = (20,20))\nsns.barplot(ax = ax[0,0], data = cluster1_payment, y=cluster1_payment.Category, x=cluster1_payment.Payment_Method_Cluster1, palette= 'bright')\nsns.barplot(ax = ax[0,1], data = cluster2_payment, y=cluster2_payment.Category, x=cluster2_payment.Payment_Method_Cluster2, palette= 'bright')\nsns.barplot(ax = ax[1,0], data = cluster3_payment, y=cluster3_payment.Category, x=cluster3_payment.Payment_Method_Cluster3, palette= 'bright')\nsns.barplot(ax = ax[1,1], data = cluster4_payment, y=cluster4_payment.Category, x=cluster4_payment.Payment_Method_Cluster4, palette= 'bright')\nsns.barplot(ax = ax[2,0], data = cluster5_payment, y=cluster5_payment.Category, x=cluster5_payment.Payment_Method_Cluster5, palette= 'bright')\nsns.barplot(ax = ax[2,1], data = cluster6_payment, y=cluster6_payment.Category, x=cluster6_payment.Payment_Method_Cluster6, palette= 'bright')\n\nax[0,0].set_title(\"Cluster 1 - Champions\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[0,0].set_xlabel(\"Payment Method\", fontsize = 20, labelpad = 15, color='white')\nax[0,0].set_ylabel(\"Counts\", fontsize = 20, labelpad = 15, color='white')\nax[0,0].tick_params(axis='x', colors='white')\nax[0,0].tick_params(axis='y', colors='white')\n\nax[0,1].set_title(\"Cluster 2 - Loyal Customers\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[0,1].set_xlabel(\"Payment Method\", fontsize = 20, labelpad = 15, color='white')\nax[0,1].set_ylabel(\"Counts\", fontsize = 20, labelpad = 15, color='white')\nax[0,1].tick_params(axis='x', colors='white')\nax[0,1].tick_params(axis='y', colors='white')\n\nax[1,0].set_title(\"Cluster 3 - Promising Customers\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[1,0].set_xlabel(\"Payment Method\", fontsize = 20, labelpad = 15, color='white')\nax[1,0].set_ylabel(\"Counts\", fontsize = 20, labelpad = 15, color='white')\nax[1,0].tick_params(axis='x', colors='white')\nax[1,0].tick_params(axis='y', colors='white')\n\nax[1,1].set_title(\"Cluster 4 - At Risk\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[1,1].set_xlabel(\"Payment Method\", fontsize = 20, labelpad = 15, color='white')\nax[1,1].set_ylabel(\"Counts\", fontsize = 20, labelpad = 15, color='white')\nax[1,1].tick_params(axis='x', colors='white')\nax[1,1].tick_params(axis='y', colors='white')\n\nax[2,0].set_title(\"Cluster 5 - Hibernating\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[2,0].set_xlabel(\"Payment Method\", fontsize = 20, labelpad = 15, color='white')\nax[2,0].set_ylabel(\"Counts\", fontsize = 20, labelpad = 15, color='white')\nax[2,0].tick_params(axis='x', colors='white')\nax[2,0].tick_params(axis='y', colors='white')\n\nax[2,1].set_title(\"Cluster 6 - Lost Customers\", fontsize = 26, pad = 30, color='red', fontweight='bold')\nax[2,1].set_xlabel(\"Payment Method\", fontsize = 20, labelpad = 15, color='white')\nax[2,1].set_ylabel(\"Counts\", fontsize = 20, labelpad = 15, color='white')\nax[2,1].tick_params(axis='x', colors='white')\nax[2,1].tick_params(axis='y', colors='white')\n\nplt.tight_layout(pad=2);","39b6a627":"from plotly.subplots import make_subplots\nimport plotly.graph_objects as go\n\ncompleted_orders = ecommerce[ecommerce.status == 'Completed'].Cluster.value_counts().to_frame().reset_index()\ncompleted_orders.columns = ['Cluster', 'Order_Counts']\n\npending_orders = ecommerce[ecommerce.status == 'Pending'].Cluster.value_counts().to_frame().reset_index()\npending_orders.columns = ['Cluster', 'Order_Counts']\n\n\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]], subplot_titles=['Completed Orders', 'Pending Orders'])\n\nfig.add_trace(go.Pie(labels=completed_orders.Cluster, values=completed_orders.Order_Counts),1, 1)\n\nfig.add_trace(go.Pie(labels=pending_orders.Cluster, values=pending_orders.Order_Counts),1, 2)\n\n\nfig.update_traces(textposition='inside', textinfo='percent+label', textfont_size=20,\n                  marker = dict(line = dict(color = 'white', width = 6)))\n\nfig.update_layout(template='plotly_dark', height=600, width=1000)\nfig.show()\n","b36b1566":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Order Status by Clusters <\/h1><a id=0><\/a>","3e56549e":"***Insights:***\n\nAbout 2\/3rd of customers have only one order while 1\/3rd of customers have placed more than one orders","e2bbe913":"***Insights:***\n\nTransactions with negative grand total are not only the canceled and refunded orders but some completed orders also have negative grand total, so we will drop these rows from the data","a54ff2be":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:400%;text-align:center;border-radius: 100px 100px; color:bisque\"> Customer Segmentation <\/h1><a id=0><\/a>","41e0cfd8":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Grouping of Orders Status <\/h1><a id=0><\/a>","c3272fd7":"![RFM-6.jpg](attachment:RFM-6.jpg)","5c54c758":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Canceled Orders <\/h1><a id=0><\/a>","356f8e33":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Clusters Distribution <\/h1><a id=0><\/a>","134ce84e":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Recency <\/h1><a id=0><\/a>\n\nTo calculate the Recency we will follow the steps below:\n\n1. Convert the Working Date column to datetime format\n2. Set the reference date as the lastest date in the data\n3. Filter out the most recent purchase date for each customer\n4. Calculate the Recency by subtracting most recent purchase date from the reference date\n5. Drop the most recent purchase date column","6305bfab":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Monetary <\/h1><a id=0><\/a>","ae2e774d":"***Insights:***\n\n1. Most of the customers are Hibernating or lie in the At Risk group i.e. 40% and 23% respectively\n2. Promising, Loyal and Champion customers who spent the most money and made the most purchaseses, are jointly about 27% of total customers","24448a08":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  RFM Table <\/h1><a id=0><\/a>","15fbf7fb":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\"> Payment Method by Clusters <\/h1><a id=0><\/a>","7049fc22":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:400%;text-align:left; color:bisque\">  1. Data Preparation <\/h1><a id=0><\/a>","2ca5cc5a":"<h1 style=font-size:150%;text-align:left;color:#682F2F> In this Notebook, I have included the following <\/h1><a id=0><\/a>\n                                                                   \n<h1 style=font-size:140%;text-align:left;color:#682F2F>   1.  Data Preparation <\/h1><a id=0><\/a>\n\n\n<h1 style=font-size:130%;text-align:left;color:#682F2F>  \n                                                                                                                \n- Data Statistics                                                        \n- Grand Total\n- Order Status\n- Grouping of Order Status\n- Droping Canceled Orders\n- Missing Values\n\n<h1 style=font-size:140%;text-align:left;color:#682F2F>  2.  Preliminary Investigations <\/h1><a id=0><\/a>\n\n<h1 style=font-size:130%;text-align:left;color:#682F2F>                                                          \n                                                        \n- Orders Per Customer\n- Orders Per Category\n- Canceled Orders\n- Famous Category: Canceled Orders    \n\n\n<h1 style=font-size:140%;text-align:left;color:#682F2F>  3.  RFM Modelling <\/h1><a id=0><\/a>\n                                                        \n<h1 style=font-size:130%;text-align:left;color:#682F2F>                                                          \n                                                        \n- Recency\n- Frequency\n- Monetary\n- RFM Table\n- RFM Scores\n- Customer Segmentation: RFM Score\n- Interpretation of Clusters                                                         \n\n\n<h1 style=font-size:140%;text-align:left;color:#682F2F>  4.  Exploratory Data Analysis <\/h1><a id=0><\/a>\n\n<h1 style=font-size:130%;text-align:left;color:#682F2F>                                                          \n                                                        \n- Clusters Distribution\n- Famous Product Categories: Cluster Wise\n- Spending Habits by Clusters\n- Payment Method by Clusters\n- Orders by Clusters\n\n\n<h1 style=font-size:140%;text-align:left;color:#682F2F>   5.  Inferences and Conclusions <\/h1><a id=0><\/a> \n                                                                                                        ","8698df03":"***Insights:***\n\nAbout 72% of customers bought products from only one category while 28% purchased products from more than one categories","6b53a93a":"***Insights:***\n\nWe will drop Canceled and \/N orders as we only want to investigate Completed or In process orders","05bc7d0e":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Customers Segmentation: RFM Score <\/h1><a id=0><\/a>","7344d5b7":"***Insights:***\n\n1. 45% of the customers canceled their orders\n2. 50 % of the orders were canceled","ff049de8":"![RGM_Segments.jpg](attachment:RGM_Segments.jpg)","468a4c78":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Interpretation of Clusters <\/h1><a id=0><\/a>","b78619d1":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:400%;text-align:left; color:bisque\">  4. Exploratory Data Analysis <\/h1><a id=0><\/a>\n\nLets's map the clusters on the original data and perform exploratory data analysis to gain meaningful insights","6c752fa4":"***Insights:***\n\nSome of these are similar in meaning, so we can group them under the same categories","de8a3c8b":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Famous Product Categories: Clusters Wise <\/h1><a id=0><\/a>","20e70ee4":"***Insights:***\n\nChampions, Loyal and Promising customers ordered the most ","da036c8d":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Data Statistics <\/h1><a id=0><\/a>","256b5696":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:400%;text-align:left; color:bisque\">  5. Inferences and Conclusions <\/h1><a id=0><\/a>\n\n1. 65% of customers placed only one order\n\n\n2. Products from only one category were ordered by 72% of customers\n\n\n3. About 45% of customers canceled their orders\n\n\n4. Half of the orders were canceled\n\n\n5. Among the different groups of customers, Champions, Loyal and Promising customers spent the highest amount of money, bought more frequently and in the near past\n\n\n6. 40% of the customers fall in the Hibernating group\n\n\n7. Most famous product categories among all clusters are: Mobiles & Tablets, Men's Fashion, Women's Fashion, Superstores and Appliances\n\n\n8. Customers from the clusters spent most of their money on Mobiles & Tablets, Men's Fashion, Appliances, Entertainment and Women's Fashion\n\n\n9. Cash on delivery (cod), Payaxis, Easypay and Jazzwallet are the most famous payment methods among all the clusters","4eb92ae0":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Orders Per Category <\/h1><a id=0><\/a>","6424cfb0":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Orders Per Customer <\/h1><a id=0><\/a>","140a4e04":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Frequency <\/h1><a id=0><\/a>","2c35c31f":"***Insights:***\n\nThe minimum value of grand total is negative which can't be true","389eae65":"***Insights:***\n\n1. sales_commission_code column has lot of missing values. We will drop this column from the data as this is not required for our analysis \n\n\n2. After that we will drop the rows with NAN values\n","86791f9d":"***Insights:***\n\n1. Mobiles & Tablets are the most famous products among the Champions and Loyal customers \n2. Men's fashion is the most selling category among the Promising, At Risk, Hibernating and Lost Customers\n3. Mobiles & Tablets is the second best selling category among the Promising, At Risk, Hibernating and Lost customer groups\n4. Appliances, Superstore and Women's Fashion are the other top selling categories","7178c03b":"***Insights:***\n\nCash on delivery (cod), Payaxis, Easypay and Jazzwallet are the most famous payment methods among all the clusters","a1b97107":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Grand Total <\/h1><a id=0><\/a>\n\nLet's investigate the grand total to find the reasons for the negative values. Lets check if the negative grand total corresponds to the canceled or refunded orders","fccb821b":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  RFM Scores <\/h1><a id=0><\/a>","83a2613c":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Famous Category: Canceled Orders <\/h1><a id=0><\/a>","97cf4495":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Order Status <\/h1><a id=0><\/a>\n\nLet' explore the status column to check the different categories of the order statuses","24e7a99f":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Missing Values <\/h1><a id=0><\/a>","9673f50d":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Droping Canceled Orders <\/h1><a id=0><\/a>","ee7b4f9b":"While reading the csv file, there are some unnamed and dummy columns which gets created because of some extra commas in the csv file. Let's drop them from the data","7345bc7b":"***Insights:***\n\n1. The two biggest spending groups, Champions and Loyal customers, spent most of their money on Mobiles & Tablets, Appliances and Entertainment\n2. Fairly good spending groups, Promising and At Risk customers, spent money also on Men's and Women's Fashion apart from Mobile & Tablets, Appliances and Entertainment\n3. Least spending clusters, Hibernatinga nd Lost customers, have spent more on Mobiles & Tablets and Men's Fashion","199f79d6":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:400%;text-align:left; color:bisque\">  3. RFM Modelling <\/h1><a id=0><\/a>\n\nRFM (**Recency, Frequency, Monetary**) is the method to segment the customers into different clusters based on their past purchasing behavior. Companies often deploy this to get to know their customers well. This helps them to respond to the ever changing customers requirement timely and plan better and effective strategy","e344c466":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:300%;text-align:left; color:bisque\">  Spending Habits by Clusters <\/h1><a id=0><\/a>","4a58e2e7":"<h1 style=\"background-color:#682F2F\n;font-family:newtimeroman;font-size:400%;text-align:left; color:bisque\">  2. Preliminary Investigations <\/h1><a id=0><\/a>","cab15ba8":"***Insights:***\n\nMost of the orders were canceled from Mobile & tablets, Men's Fashion and Appliances"}}