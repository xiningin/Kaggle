{"cell_type":{"36dbeef1":"code","08d01625":"code","00dda62f":"code","ccc6b0ab":"code","d25ff8ab":"code","cb01afcc":"code","4683528b":"code","783c5f6a":"code","6b6e7a80":"code","ca092a7a":"code","068aaaaf":"code","78e06688":"code","75a677a7":"code","90dad215":"code","3aa04b5b":"code","3e045864":"code","2c6b2c0b":"code","172302b2":"code","bac259bc":"code","1deb6d74":"code","c7f2c25b":"code","fabd7038":"code","b640deff":"code","13bdedaa":"code","de4c71e7":"code","b812e6e9":"code","a3e072f8":"code","5d4eab3b":"code","afb61509":"code","72f6f5b8":"code","2f4c7185":"code","8af15808":"code","5ead49dc":"code","0ea8fd88":"code","92fb69d2":"code","2bf31a4b":"code","9b7ab29b":"code","f700c3dd":"code","30e756e7":"code","d5629153":"code","ad5a7357":"code","3b5b3162":"code","76c11f45":"code","4f059949":"code","687a237c":"code","7964f9c3":"code","67f2cd5a":"code","54b69bf5":"code","65fe3d21":"code","77fffbdb":"code","1254c57e":"code","33cb422f":"code","7c84f8e8":"code","6829d031":"code","54e9a287":"code","cf5c83db":"code","a4a22894":"code","e212741d":"code","3adef332":"code","d30e57f3":"code","31d2f71b":"code","504d4232":"code","267e4365":"code","d835b987":"code","c1d25898":"code","ef2e7105":"code","b1f05670":"code","5cf88b62":"code","687d0758":"code","4da55b1d":"code","cccb8cdd":"code","45559e2b":"code","64675a69":"code","27ec866a":"code","f2b1460d":"code","490eaf14":"code","4fdae5a5":"code","b0fc7d00":"code","99f44ec9":"code","a0fff919":"code","4b8225e0":"code","c83713ae":"code","80bed30b":"code","fe97880a":"code","1dbc73dd":"code","3ac3afbd":"code","00ac1470":"code","93d6472a":"code","cc5f8e85":"code","42baee7a":"code","717bca0d":"code","9522389a":"code","9e4af584":"code","39efa8d1":"code","b7f289b8":"code","cc5cba31":"code","7cb4ac7f":"code","f2d100dd":"code","fde65a73":"code","3fb9bb72":"code","3bf11455":"code","abaa2e80":"code","0bb41b12":"code","09fa6993":"code","a1f442c5":"code","d138104a":"code","29545b8c":"code","82ae7be4":"code","5628cd5f":"code","81b5fe99":"code","6348bedc":"code","9ff32b5c":"code","3748bddc":"code","555487e0":"code","6222c6e1":"code","fe155819":"code","4577f2eb":"code","d78a4925":"code","ad923dbd":"markdown","4f1a9457":"markdown","96b6f7fe":"markdown","833fe21e":"markdown","31134b10":"markdown","5e5642d5":"markdown","46c282cb":"markdown","297d6beb":"markdown","6b9cdb27":"markdown","68d3fec4":"markdown","c4fa8e2b":"markdown","03a938c8":"markdown","54107c09":"markdown","0f692b14":"markdown","dc204b39":"markdown","4802858d":"markdown","5b5c9b50":"markdown","50d8971a":"markdown","720f0f6c":"markdown","08e29bfa":"markdown","9e81fe93":"markdown","00a05080":"markdown","394b6fc0":"markdown","b2fc70a9":"markdown","5210803d":"markdown"},"source":{"36dbeef1":"## importing libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","08d01625":"import warnings\nwarnings.filterwarnings('ignore')","00dda62f":"#reading dataset\ndf = pd.read_csv(r'..\/input\/ibm-hr-analytics-attrition-dataset\/WA_Fn-UseC_-HR-Employee-Attrition.csv')\ndf.head()","ccc6b0ab":"df.info()","d25ff8ab":"df.shape","cb01afcc":"df.columns","4683528b":"categorical_features = [feature for feature in df.columns if df[feature].dtype == 'O']\nlen(categorical_features)","783c5f6a":"numerical_features = [feature for feature in df.columns if feature not in categorical_features]\nlen(numerical_features)","6b6e7a80":"#Checking value counts for categorical variables\nfor col in categorical_features:\n    print(df[col].value_counts())   ","ca092a7a":"#Drop column Over18 as all values are Yes\ndf.drop('Over18', axis = 1, inplace = True)","068aaaaf":"#Checking number of distinct values for numerical variables\nfor col in numerical_features:\n    print(col, df[col].nunique())","78e06688":"#Drop these as there are only 1 type of value in whole variable\ndf.drop(['EmployeeCount','StandardHours'], axis = 1, inplace = True)","75a677a7":"categorical_features = [feature for feature in df.columns if df[feature].dtype == 'O']\nlen(categorical_features)","90dad215":"numerical_features = [feature for feature in df.columns if feature not in categorical_features]\nlen(numerical_features)","3aa04b5b":"# getting list of discrete numerical features\ndiscrete_numerical_features = []\nfor col in numerical_features:\n    if (df[col].nunique()<11):\n        discrete_numerical_features.append(col)","3e045864":"len(discrete_numerical_features)","2c6b2c0b":"numerical_features = [feature for feature in numerical_features if feature not in discrete_numerical_features]\nlen(numerical_features)","172302b2":"df.describe()","bac259bc":"df.describe(include = ['O'])","1deb6d74":"Attrition_mapping = {\"Yes\": 1, \"No\": 0}\ndf['Attrition'] = df['Attrition'].map(Attrition_mapping)","c7f2c25b":"sns.countplot(df['Attrition'])","fabd7038":"attrition = df[(df['Attrition'] != 0)]\nno_attrition = df[(df['Attrition'] == 0)]\nprint('Percentage of Attrition: {}'.format(len(attrition)\/len(df)))","b640deff":"df[['Gender', 'Attrition']].groupby(['Gender'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","13bdedaa":"df[['BusinessTravel', 'Attrition']].groupby(['BusinessTravel'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","de4c71e7":"df[['Department', 'Attrition']].groupby(['Department'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","b812e6e9":"df[['EducationField', 'Attrition']].groupby(['EducationField'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","a3e072f8":"df[['JobRole', 'Attrition']].groupby(['JobRole'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","5d4eab3b":"df[['MaritalStatus', 'Attrition']].groupby(['MaritalStatus'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","afb61509":"df[['OverTime', 'Attrition']].groupby(['OverTime'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","72f6f5b8":"sns.set_style('whitegrid')\nsns.distplot(df['Age'], bins = 10)","2f4c7185":"g = sns.FacetGrid(df, col='Attrition')\ng.map(plt.hist, 'Age', bins=15)","8af15808":"sns.distplot(df['MonthlyIncome'], bins = 15)","5ead49dc":"sns.set_style('whitegrid')\ng = sns.FacetGrid(df, col='Attrition')\ng.map(plt.hist, 'MonthlyIncome', bins=15)","0ea8fd88":"sns.distplot(df['DistanceFromHome'], bins = 15)","92fb69d2":"sns.set_style('whitegrid')\ng = sns.FacetGrid(df, col='Attrition')\ng.map(plt.hist, 'DistanceFromHome', bins=15)","2bf31a4b":"sns.distplot(df['DailyRate'])","9b7ab29b":"sns.set_style('whitegrid')\ng = sns.FacetGrid(df, col='Attrition')\ng.map(plt.hist, 'DailyRate', bins=15)","f700c3dd":"sns.boxplot(df['Attrition'],df['DailyRate'])","30e756e7":"sns.distplot(df['MonthlyRate'])","d5629153":"sns.set_style('whitegrid')\ng = sns.FacetGrid(df, col='Attrition')\ng.map(plt.hist, 'MonthlyRate', bins=15)","ad5a7357":"sns.boxplot(df['Attrition'],df['MonthlyRate'])","3b5b3162":"sns.distplot(df['HourlyRate'])","76c11f45":"sns.set_style('whitegrid')\ng = sns.FacetGrid(df, col='Attrition')\ng.map(plt.hist, 'HourlyRate', bins=15)","4f059949":"sns.boxplot(df['Attrition'],df['HourlyRate'])","687a237c":"sns.distplot(df['PercentSalaryHike'])","7964f9c3":"sns.boxplot(df['Attrition'],df['PercentSalaryHike'])","67f2cd5a":"numerical_features","54b69bf5":"sns.distplot(df['YearsAtCompany'])","65fe3d21":"sns.set_style('whitegrid')\ng = sns.FacetGrid(df, col='Attrition')\ng.map(plt.hist, 'YearsAtCompany', bins=15)","77fffbdb":"sns.boxplot(df['Attrition'],df['YearsAtCompany'])","1254c57e":"sns.set_style('whitegrid')\ng = sns.FacetGrid(df, col='Attrition')\ng.map(plt.hist, 'YearsInCurrentRole', bins=15)","33cb422f":"sns.set_style('whitegrid')\ng = sns.FacetGrid(df, col='Attrition')\ng.map(plt.hist, 'YearsSinceLastPromotion', bins=15)","7c84f8e8":"sns.set_style('whitegrid')\ng = sns.FacetGrid(df, col='Attrition')\ng.map(plt.hist, 'YearsWithCurrManager', bins=15)","6829d031":"sns.set_style('whitegrid')\ng = sns.FacetGrid(df, col='Attrition')\ng.map(plt.hist, 'TotalWorkingYears', bins=15)","54e9a287":"grid = sns.FacetGrid(df, col='Attrition', row='MaritalStatus', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.8, bins=15)\ngrid.add_legend();","cf5c83db":"df[['Education', 'Attrition']].groupby(['Education'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","a4a22894":"df[['EnvironmentSatisfaction', 'Attrition']].groupby(['EnvironmentSatisfaction'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","e212741d":"df[['JobInvolvement', 'Attrition']].groupby(['JobInvolvement'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","3adef332":"df[['JobLevel', 'Attrition']].groupby(['JobLevel'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","d30e57f3":"df[['JobSatisfaction', 'Attrition']].groupby(['JobSatisfaction'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","31d2f71b":"df[['NumCompaniesWorked', 'Attrition']].groupby(['NumCompaniesWorked'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","504d4232":"sns.countplot(df['NumCompaniesWorked'], hue = df['Attrition'])","267e4365":"df[['PerformanceRating', 'Attrition']].groupby(['PerformanceRating'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","d835b987":"df[['RelationshipSatisfaction', 'Attrition']].groupby(['RelationshipSatisfaction'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","c1d25898":"df[['StockOptionLevel', 'Attrition']].groupby(['StockOptionLevel'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","ef2e7105":"df[['TrainingTimesLastYear', 'Attrition']].groupby(['TrainingTimesLastYear'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","b1f05670":"df[['WorkLifeBalance', 'Attrition']].groupby(['WorkLifeBalance'], as_index=False).mean().sort_values(by='Attrition', ascending=False)","5cf88b62":"numerical_features","687d0758":"plt.figure(figsize = (12,6))\nsns.countplot(df['TotalWorkingYears'], hue = df['Attrition'])","4da55b1d":"#Drop these as there are only 1 type of value in whole variable\ndf.drop(['HourlyRate', 'MonthlyRate','DailyRate','PerformanceRating'], axis = 1, inplace = True)","cccb8cdd":"from scipy.stats import norm, skew\nnumerical_features.remove('EmployeeNumber')\nnumerical_features.remove('HourlyRate')\nnumerical_features.remove('MonthlyRate')\nnumerical_features.remove('DailyRate')\nskewed_feat = df[numerical_features].apply(lambda x: skew(x.dropna())).sort_values(ascending = False)\nskewness = pd.DataFrame({'Skew' :skewed_feat})\nskewness.head(10)","45559e2b":"skewness = skewness[abs(skewness) > 0.75]\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlamda = 0.15\nfor feat in skewed_features:\n    df[feat] = boxcox1p(df[feat],lamda)","64675a69":"df['New_feature'] = (df['Gender'].astype(str) + '_' + df['MaritalStatus'].astype(str))","27ec866a":"df.drop(['Gender', 'MaritalStatus'], axis = 1, inplace = True)","f2b1460d":"df.info()","490eaf14":"df.shape","4fdae5a5":"df.head()","b0fc7d00":"#Checking correaltions between variables\nfrom matplotlib import rcParams\nrcParams.update({'figure.autolayout': True})\nk_corr_matrix1 =df.corr()\nplt.figure(figsize=(20,14))\nsns.heatmap(k_corr_matrix1, annot=True, cmap=plt.cm.RdBu_r)\nplt.title('Heatmap for Correlation between Features')","99f44ec9":"# with the following function we can select highly correlated features\n# it will remove the first feature that is correlated with anything other feature\n\ndef correlation(dataset, threshold):\n    col_corr = set()  # Set of all the names of correlated columns\n    corr_matrix = dataset.corr()\n    for i in range(len(corr_matrix.columns)):\n        for j in range(i):\n            if abs(corr_matrix.iloc[i, j]) > threshold: # we are interested in absolute coeff value\n                colname = corr_matrix.columns[i]  # getting the name of column\n                col_corr.add(colname)\n    return col_corr","a0fff919":"corr_features = correlation(df, 0.7)\nlen(set(corr_features))","4b8225e0":"corr_features","c83713ae":"corr_features.remove('MonthlyIncome')\ncorr_features.remove('TotalWorkingYears')","80bed30b":"corr_features.update(['JobLevel'])","fe97880a":"corr_features","1dbc73dd":"df.drop(corr_features, axis=1, inplace = True)","3ac3afbd":"df.shape","00ac1470":"categorical_features = [feature for feature in df.columns if df[feature].dtype == 'O']\nlen(categorical_features)","93d6472a":"#Label-Encoding ordinal categorical features \nfrom sklearn.preprocessing import LabelEncoder\nfor c in categorical_features:\n    lbl = LabelEncoder() \n    lbl.fit(list(df[c].values)) \n    df[c] = lbl.transform(list(df[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(df.shape))","cc5f8e85":"from sklearn.model_selection import train_test_split\nId_train = df['EmployeeNumber']\nX = df.drop(['Attrition', 'EmployeeNumber'], axis = 1)\ny = df['Attrition']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify = y)","42baee7a":"from sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier","717bca0d":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import KFold\ncv = StratifiedKFold(n_splits = 5, random_state = None, shuffle = False)","9522389a":"# Using random forest on balanced dataset\nrf = RandomForestClassifier()\nparam_grid=dict(n_estimators= [120, 300, 500, 800, 1200],max_depth=range(1,20), min_samples_split = [1, 2, 5, 10, 15, 100],\n               min_samples_leaf = [1,2,5,10], max_features = ['log2', 'sqrt', None])\ngrid_rf = RandomizedSearchCV(rf, param_grid, cv=cv, scoring = 'f1_macro')\ngrid_rf.fit(X_train,y_train)","9e4af584":"# Check out best parameters and best score\nprint(grid_rf.best_score_)\nprint(grid_rf.best_params_)","39efa8d1":"# Using random forest on balanced dataset\nrf = RandomForestClassifier(class_weight={0:1,1:5}, random_state = 42)\nparam_grid=dict(n_estimators= [120, 300, 500, 800, 1200],max_depth=range(1,20), min_samples_split = [1, 2, 5, 10, 15, 100],\n               min_samples_leaf = [1,2,5,10], max_features = ['log2', 'sqrt', None])\ngrid_rf = RandomizedSearchCV(rf, param_grid, cv=cv, scoring = 'f1_macro')\ngrid_rf.fit(X_train,y_train)","b7f289b8":"# Check out best parameters and best score\nprint(grid_rf.best_score_)\nprint(grid_rf.best_params_)","cc5cba31":"import scikitplot as skplt\ny_test_pred = grid_rf.predict(X_test)\nskplt.metrics.plot_confusion_matrix(y_test, y_test_pred)","7cb4ac7f":"from sklearn.metrics import classification_report","f2d100dd":"print(classification_report(y_test, y_test_pred))","fde65a73":"from sklearn.metrics import roc_auc_score\nroc_auc_score(y_test, y_test_pred)","3fb9bb72":"from sklearn import metrics\nfpr,tpr,threshold=metrics.roc_curve(y_test, y_test_pred)\nrou_auc=metrics.auc(fpr,tpr)\nplt.title(\"Reciever Operating Characteristic\")\nplt.plot(fpr,tpr,\"orange\",label=\"AUC-0.4f\" % rou_auc)\nplt.legend(loc=\"lower right\")\nplt.plot([0,1],[0,1],color=\"darkblue\",linestyle=\"--\")\nplt.ylabel(\"tpr\")\nplt.xlabel(\"fpr\")\nplt.show()","3bf11455":"import xgboost\n# Using xgboost on balanced dataset\nxg = xgboost.XGBClassifier(scale_pos_weight = 5, random_state = 2) #scale_pos_weight for balancing dataset internally\n# Hyper-parameters to be tuned\nparam_grid = dict(eta = [0.01,0.015, 0.025, 0.05, 0.1], learning_rate = [0.05, 0.1, 0.15, 0.2, 0.25, 0.3],\n                  max_depth = [3,5,7,9,12,15,17,25], min_child_weight = [1,3,5,7], gamma = [0.05,0.1,0.3,0.5,0.7,0.9,1.0], \n                  colsample_bytree = [0.6, 0.7, 0.8, 0.9, 1.0], subsample = [0.6, 0.7, 0.8, 0.9, 1.0],\n                  alpha = [0, 0.1, 0.5, 1.0])\ngrid_xg = RandomizedSearchCV(xg, param_grid, cv=cv, scoring = 'f1_macro')\ngrid_xg.fit(X_train,y_train)","abaa2e80":"# Check out best parameters and best score\nprint(grid_xg.best_score_)\nprint(grid_xg.best_params_)","0bb41b12":"y_test_pred = grid_xg.predict(X_test)\nskplt.metrics.plot_confusion_matrix(y_test, y_test_pred)","09fa6993":"print(classification_report(y_test, y_test_pred))","a1f442c5":"roc_auc_score(y_test, y_test_pred)","d138104a":"from sklearn import metrics\nfpr,tpr,threshold=metrics.roc_curve(y_test, y_test_pred)\nrou_auc=metrics.auc(fpr,tpr)\nplt.title(\"Reciever Operating Characteristic\")\nplt.plot(fpr,tpr,\"orange\",label=\"AUC-0.4f\" % rou_auc)\nplt.legend(loc=\"lower right\")\nplt.plot([0,1],[0,1],color=\"darkblue\",linestyle=\"--\")\nplt.ylabel(\"tpr\")\nplt.xlabel(\"fpr\")\nplt.show()","29545b8c":"from imblearn.ensemble import EasyEnsembleClassifier \neec = EasyEnsembleClassifier(base_estimator = xgboost.XGBClassifier(), random_state=42)\neec.fit(X_train, y_train)","82ae7be4":"y_pred = eec.predict(X_test)","5628cd5f":"skplt.metrics.plot_confusion_matrix(y_test, y_pred)","81b5fe99":"print(classification_report(y_test, y_pred))","6348bedc":"roc_auc_score(y_test, y_pred)","9ff32b5c":"from sklearn import metrics\nfpr,tpr,threshold=metrics.roc_curve(y_test, y_pred)\nrou_auc=metrics.auc(fpr,tpr)\nplt.title(\"Reciever Operating Characteristic\")\nplt.plot(fpr,tpr,\"orange\",label=\"AUC-0.4f\" % rou_auc)\nplt.legend(loc=\"lower right\")\nplt.plot([0,1],[0,1],color=\"darkblue\",linestyle=\"--\")\nplt.ylabel(\"tpr\")\nplt.xlabel(\"fpr\")\nplt.show()","3748bddc":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nparam_grid = dict(C = [0.001, 0.01,1, 10, 100], penalty = ['l1', 'l2'])\ngrid_lr = RandomizedSearchCV(lr, param_grid, cv=cv, scoring = 'f1_macro')\ngrid_lr.fit(X_train,y_train)","555487e0":"# Check out best parameters and best score\nprint(grid_lr.best_score_)\nprint(grid_lr.best_params_)","6222c6e1":"skplt.metrics.plot_confusion_matrix(y_test, y_pred)","fe155819":"y_pred = grid_lr.predict(X_test)\nprint(classification_report(y_test, y_pred))","4577f2eb":"roc_auc_score(y_test, y_pred)","d78a4925":"from sklearn import metrics\nfpr,tpr,threshold=metrics.roc_curve(y_test, y_pred)\nrou_auc=metrics.auc(fpr,tpr)\nplt.title(\"Reciever Operating Characteristic\")\nplt.plot(fpr,tpr,\"orange\",label=\"AUC-0.4f\" % rou_auc)\nplt.legend(loc=\"lower right\")\nplt.plot([0,1],[0,1],color=\"darkblue\",linestyle=\"--\")\nplt.ylabel(\"tpr\")\nplt.xlabel(\"fpr\")\nplt.show()","ad923dbd":"roc_auc_score(y_test, y_pred)","4f1a9457":"Sales Representatives have higher attrition rate","96b6f7fe":"People working over time have higher attrition rate","833fe21e":"People with Marital Status as Single have much higher chance of attrition","31134b10":"from sklearn.svm import SVC\nsvm = SVC()\nparam_grid = dict(C = [0.001,0.01, 1, 10], gamma = ['auto'], class_weight = ['balanced'])\ngrid_svm = RandomizedSearchCV(svm, param_grid, cv=cv, scoring = 'f1_macro')\ngrid_svm.fit(X_train,y_train)","5e5642d5":"This feature can be eliminated as they have equal attrition and only 2 ratings","46c282cb":"Discuss With Nitin Sir","297d6beb":"y_pred = grid_knn.predict(X_test)\nprint(classification_report(y_test, y_pred))","6b9cdb27":"People with age 28-34 have higher attrition rate","68d3fec4":"Doesn't have much significance as it's almost uniform attrition at different daily, monthly and hourly rate - these are just features extracted from salary itself","c4fa8e2b":"# Check out best parameters and best score\nprint(grid_knn.best_score_)\nprint(grid_knn.best_params_)","03a938c8":"People with Marital Status as 'Single' and too within age group of 28-34 has higher attrition rate","54107c09":"Removed job level instead of Monthly Income as both are highly correlated and any one of them can be dropeed","0f692b14":"Males have higher attrition rate than woman","dc204b39":"Freshers at particular company have higher attrition rate","4802858d":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier()\nparam_grid = dict(n_neighbors = range(1,25), p = [2, 3])\ngrid_knn = RandomizedSearchCV(knn, param_grid, cv=cv, scoring = 'f1_macro')\ngrid_knn.fit(X_train,y_train)","5b5c9b50":"This column have similar distribution so, can be eliminated","50d8971a":"Sales and HR dept have higher attrition rate than R&D","720f0f6c":"People having Monthly Income greater than 10000 have rarest chance of leaving a company and may be considered as outliers","08e29bfa":"People travel more frequently have much higher attrition rate than others","9e81fe93":"Environmental Satisfaction, Job Satisfaction, Job Level Plays Huge role in Attrition Rate of the Employees","00a05080":"y_pred = grid_svm.predict(X_test)\nprint(classification_report(y_test, y_pred))","394b6fc0":"# Check out best parameters and best score\nprint(grid_svm.best_score_)\nprint(grid_svm.best_params_)","b2fc70a9":"Bachelors and below bachelors have higher attrition rate","5210803d":"Discuss with Nitin Sir"}}