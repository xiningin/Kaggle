{"cell_type":{"e78fc393":"code","6fba8d7e":"code","af8a7a87":"code","3ebf3715":"code","de45d689":"code","e3bdd2e6":"code","40dcf1ec":"code","6d7ea8b6":"code","f1a97e19":"code","6847cec9":"code","c8e32a12":"code","6ccb9853":"code","beb747c1":"code","f9b91533":"code","26964a94":"code","fb9e1390":"code","99bccb08":"code","3e145606":"code","a4acbbab":"code","66e73018":"code","08a3d1a4":"code","1b8ed46b":"code","88c53f25":"code","445a33cd":"code","4dc50809":"code","fa23856e":"code","134d7578":"code","40d2e864":"code","4eb10542":"markdown","e39f2bc0":"markdown","6b824710":"markdown","88006be8":"markdown","9e796fa8":"markdown","c152d73f":"markdown","0ef9e331":"markdown","13d62ce3":"markdown","ad5efd98":"markdown","53194c49":"markdown","4c1fd400":"markdown"},"source":{"e78fc393":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6fba8d7e":"#read data\ndata=pd.read_csv(\"\/kaggle\/input\/youtube-new\/USvideos.csv\")\ndata.head()\n","af8a7a87":"# indexing using square brackets\ndata[\"likes\"][0]","3ebf3715":"#using column attribute and row label\ndata.likes[0]","de45d689":"#using loc accessor\ndata.loc[1,[\"likes\"]]","e3bdd2e6":"#selecting only some columns\ndata[[\"likes\",\"dislikes\"]].head()","40dcf1ec":"#slicing and indexing series\ndata.loc[1:10,\"likes\":\"comment_count\"]","6d7ea8b6":"#reverse slicing\ndata.loc[10:1:-1,\"likes\":\"comment_count\"]","f1a97e19":"#from something to end\ndata.loc[1:10,\"ratings_disabled\":]","6847cec9":"#creating boolean series\nboolean=data.likes>500000\ndata[boolean]","c8e32a12":"#combining filters\ndata[(data.likes>5000000) &(data.views>500000)]","6ccb9853":"#filtering column based others\ndata.likes[data.views>500000]","beb747c1":"#plain python function \ndef div(n):\n    return n\/2\ndata.likes.apply(div)","f9b91533":"data[\"new_column\"]=data.likes+data.views\ndata.head()","26964a94":"#our index name is this:\nprint(data.index.name)\n#lets change it\ndata.index.name=\"index name\"\ndata.head()","fb9e1390":"data=pd.read_csv(\"\/kaggle\/input\/youtube-new\/USvideos.csv\")\ndata.head()","99bccb08":"data1=data.set_index([\"likes\",\"dislikes\"])\ndata1.head()","3e145606":"dic = {\"treatment\":[\"A\",\"A\",\"B\",\"B\"],\"gender\":[\"F\",\"M\",\"F\",\"M\"],\"response\":[10,45,5,9],\"age\":[15,4,72,65]}\ndf = pd.DataFrame(dic)\ndf","a4acbbab":"#pivoting\ndf.pivot(index=\"treatment\",columns=\"gender\",values=\"response\")","66e73018":"df1=df.set_index([\"treatment\",\"gender\"])\ndf1","08a3d1a4":"#level determines indexes\ndf1.unstack(level=0)","1b8ed46b":"df1.unstack(level=1)","88c53f25":"df","445a33cd":"pd.melt(df,id_vars=\"treatment\",value_vars=[\"age\",\"response\"])","4dc50809":"df","fa23856e":"df.groupby(\"treatment\").mean()","134d7578":"df.groupby(\"treatment\").age.max()","40d2e864":"df.groupby(\"treatment\")[[\"age\",\"response\"]].min()","4eb10542":"**SLICING DATA FRAME**","e39f2bc0":"**TRANSFORMING DATA**","6b824710":"**PIVOTING DATA FRAMES**","88006be8":"**MELTING DATA FRAME**","9e796fa8":"**HIERARCHICAL INDEXING**","c152d73f":"# MANIPULATING DATA FRAMES WITH PANDAS","0ef9e331":"**STACKING and UNSTACKING DATAFRAME**","13d62ce3":"**INDEX OBJECTS AND LABELED DATA**","ad5efd98":"**CATEGORICALS AND GROUPBY**","53194c49":"* INDEXING DATA FRAMES","4c1fd400":"**FILTERING DATA FRAMES**"}}