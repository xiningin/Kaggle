{"cell_type":{"ce78d817":"code","138203fe":"code","76aecac6":"code","ed80f979":"code","e0c99aea":"code","9cf015f4":"code","7d2dc7bb":"code","41dae01c":"code","85fe1b27":"markdown","25453a10":"markdown","3ec9ce13":"markdown","d092658c":"markdown","7e3af0d5":"markdown","5cf36d1c":"markdown","3c71216f":"markdown"},"source":{"ce78d817":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom numba import njit\n\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 150)","138203fe":"data = pd.read_csv('..\/input\/santa-workshop-tour-2019\/family_data.csv')\nsub = pd.read_csv(\"..\/input\/submission-79913\/79913_submission.csv\", index_col='family_id', dtype=np.uint16)\n\n# I'll add the submission assigned day to the family dataset\ndata['assigned_day'] = sub['assigned_day']","76aecac6":"# Constants\nN_DAYS = 100\nMAX_OCCUPANCY = 300\nMIN_OCCUPANCY = 125\n\nfamily_size = data.n_people.values\ndays_array = np.arange(N_DAYS, 0, -1)\nchoice_dict = data.loc[:, 'choice_0': 'choice_9'].T.to_dict()\n\nchoice_array_num = np.full((data.shape[0], N_DAYS + 1), -1)\nfor i, choice in enumerate(data.loc[:, 'choice_0': 'choice_9'].values):\n    for d, day in enumerate(choice):\n        choice_array_num[i, day] = d\n        \npenalties_array = np.array([\n    [\n        0,\n        50,\n        50 + 9 * n,\n        100 + 9 * n,\n        200 + 9 * n,\n        200 + 18 * n,\n        300 + 18 * n,\n        300 + 36 * n,\n        400 + 36 * n,\n        500 + 36 * n + 199 * n,\n        500 + 36 * n + 398 * n\n    ]\n    for n in range(family_size.max() + 1)\n])","ed80f979":"@njit(fastmath=True) # fast math makes it a bit quicker, but less accurate\ndef cost_function_detailed(prediction, penalties_array, family_size, days):\n    penalty = 0\n\n    # We'll use this to count the number of people scheduled each day\n    daily_occupancy = np.zeros((len(days)+1))\n    N = family_size.shape[0]\n    \n    # Looping over each family; d is the day, n is size of that family, \n    # and choice is their top choices\n    for i in range(N):\n        # add the family member count to the daily occupancy\n        n = family_size[i]\n        d = prediction[i]\n        choice = choice_array_num[i]\n        \n        daily_occupancy[d] += n\n\n        # Calculate the penalty for not getting top preference\n        penalty += penalties_array[n, choice[d]]\n\n    choice_cost = penalty\n        \n    # for each date, check total occupancy\n    #  (using soft constraints instead of hard constraints)\n    relevant_occupancy = daily_occupancy[1:]\n    incorrect_occupancy = np.any(\n        (relevant_occupancy > MAX_OCCUPANCY) | \n        (relevant_occupancy < MIN_OCCUPANCY)\n    )\n    \n    if incorrect_occupancy:\n        penalty += 100000000\n\n    # Calculate the accounting cost\n    # The first day (day 100) is treated special\n    init_occupancy = daily_occupancy[days[0]]\n    accounting_cost = (init_occupancy - 125.0) \/ 400.0 * init_occupancy**(0.5)\n    # using the max function because the soft constraints might allow occupancy to dip below 125\n    accounting_cost = max(0, accounting_cost)\n    \n    # Loop over the rest of the days, keeping track of previous count\n    yesterday_count = init_occupancy\n    for day in days[1:]:\n        today_count = daily_occupancy[day]\n        diff = np.abs(today_count - yesterday_count)\n        accounting_cost += max(0, (today_count - 125.0) \/ 400.0 * today_count**(0.5 + diff \/ 50.0))\n        yesterday_count = today_count\n\n    penalty += accounting_cost\n\n    return penalty, choice_cost, accounting_cost","e0c99aea":"def calculate_df(original_df, pred):\n    new_df = original_df.copy()\n    new_df['assigned_day'] = pred\n    new_df['choice'] = 0\n    for c in range(10):\n        new_df.loc[new_df[f'choice_{c}'] == new_df['assigned_day'], 'choice'] = c\n    \n    new_df['choice_cost'] = new_df.apply(lambda x: penalties_array[x['n_people']][x['choice']], axis=1)\n    \n    for c in range(10):\n        new_df[f'n_people_{c}'] = np.where(new_df[f'choice_{c}'] == new_df['assigned_day'], new_df['n_people'], 0)\n        \n    for c in range(1, 10):\n        d = c -1\n        new_df[f'n_people_{c}'] = new_df[f'n_people_{d}'] + new_df[f'n_people_{c}']\n        \n    aggdata = new_df.groupby(by=['assigned_day'])['n_people', 'n_people_0', 'n_people_1', 'n_people_2', 'n_people_3', 'n_people_4', 'n_people_5', 'n_people_6', 'n_people_7', 'n_people_8', 'n_people_9', 'choice_cost'].sum().reset_index()\n    \n    daily_occupancy = aggdata['n_people'].values\n    accounting_cost_daily = np.zeros(len(daily_occupancy))\n    for day in range(N_DAYS-1, -1, -1):\n        if day == 99:\n            n_next = 125.0\n        else:\n            n_next = daily_occupancy[day + 1]\n        n = daily_occupancy[day]\n        diff = abs(n - n_next)\n        accounting_cost_daily[day] = max(0, (n-125.0) \/ 400.0 * n**(0.5 + diff \/ 50.0))\n\n    aggdata['accounting_cost'] = accounting_cost_daily\n    aggdata['total_cost'] = aggdata['choice_cost'] + aggdata['accounting_cost']\n    aggdata['accounting_cost']=aggdata['accounting_cost'].astype(int)\n    aggdata['total_cost']=aggdata['total_cost'].astype(int)\n   \n    new_df = pd.merge(left=new_df, right=aggdata[['assigned_day', 'n_people']].rename(columns={'n_people': 'n_people_per_day'}), on='assigned_day')\n    \n    return new_df, aggdata","9cf015f4":"# You cann choose your ranges here\nMIN_OCCUPANCY = 0\nMAX_OCCUPANCY = 300\nMIN_COST = 0\nMAX_COST = 2000","7d2dc7bb":"def plot_both(data, pred):\n    _, adata3 = calculate_df(data.copy(), pred.copy())\n\n    f, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 18), sharey=True)\n    sns.set_color_codes(\"pastel\")\n\n    sns.barplot(x='n_people_9', y='assigned_day', data=adata3, label='choice_9', orient='h', color='m', ax=ax1)\n    sns.barplot(x='n_people_8', y='assigned_day', data=adata3, label='choice_8', orient='h', color='grey', ax=ax1)\n    sns.barplot(x='n_people_7', y='assigned_day', data=adata3, label='choice_7', orient='h', color='orange', ax=ax1)\n    sns.barplot(x='n_people_6', y='assigned_day', data=adata3, label='choice_6', orient='h', color='olive', ax=ax1)\n    sns.barplot(x='n_people_5', y='assigned_day', data=adata3, label='choice_5', orient='h', color='k', ax=ax1)\n    sns.barplot(x='n_people_4', y='assigned_day', data=adata3, label='choice_4', orient='h', color='r', ax=ax1)\n    sns.barplot(x='n_people_3', y='assigned_day', data=adata3, label='choice_3', orient='h', color='y', ax=ax1)\n    sns.barplot(x='n_people_2', y='assigned_day', data=adata3, label='choice_2', orient='h', color='g', ax=ax1)\n    sns.barplot(x='n_people_1', y='assigned_day', data=adata3, label='choice_1', orient='h', color='c', ax=ax1)\n    sns.barplot(x='n_people_0', y='assigned_day', data=adata3, label='choice_0', orient='h', color='b', ax=ax1)\n    ax1.axvline(125, color=\"k\", clip_on=False)\n    ax1.axvline(300, color=\"k\", clip_on=False)\n    ax1.axvline(210, color=\"k\", clip_on=False, linestyle='--')\n    ax1.legend(ncol=2, loc=\"lower right\", frameon=True)\n    ax1.set(xlabel=\"Occupancy\")\n    ax1.set_xlim(MIN_OCCUPANCY, MAX_OCCUPANCY)\n\n    total_cost, choice_cost, acc_cost = cost_function_detailed(pred, penalties_array, family_size, days_array)\n    \n    sns.set_color_codes(\"deep\")\n    sns.barplot(x='total_cost', y='assigned_day', data=adata3, label='total_cost', orient='h', color='k', ax=ax2)\n    sns.barplot(x='choice_cost', y='assigned_day', data=adata3, label='choice_cost', orient='h', color='r', ax=ax2)\n    sns.barplot(x='accounting_cost', y='assigned_day', data=adata3, label='accounting_cost', orient='h', color='y', ax=ax2)\n    ax2.legend(ncol=2, loc=\"lower right\", frameon=True)\n    ax2.set(xlabel=f\"Costs: {choice_cost:.0f} + {acc_cost:.0f} = {total_cost:.0f}\")\n    ax2.set_xlim(MIN_COST, MAX_COST)","41dae01c":"plot_both(data.copy(), data['assigned_day'].values)","85fe1b27":"All the data manipulations from the previous version are wrapped up here","25453a10":"**Version 2**\nI have improved the plotting to make it into function that show the cost as well.\n\n\nThis was all started by an interesting suggestion by @hengck23. \nhttps:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/119654#latest-684807","3ec9ce13":"The main plotting function","d092658c":"The cost function is from https:\/\/www.kaggle.com\/xhlulu\/santa-s-2019-300x-faster-cost-function-37-s","7e3af0d5":"**The new plot!**","5cf36d1c":"Lets read in the family data and a sample submission.","3c71216f":"I hope this helps, be sure to upvote https:\/\/www.kaggle.com\/c\/santa-workshop-tour-2019\/discussion\/119654#latest-684807 as this is based off @hengck23 suggestion"}}