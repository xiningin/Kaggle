{"cell_type":{"cd743d6f":"code","4d091b58":"code","c4621be2":"code","0e9ad8dc":"code","46f34222":"code","1aa33622":"code","3c2de326":"code","95720995":"code","9658171a":"code","c2dc770a":"code","8a33952e":"code","d56c76e2":"code","25476132":"code","dc03f0fa":"code","c37a1dc1":"code","4e377a9b":"code","6f939791":"code","70d9c1ba":"code","8346178e":"code","5ed49c48":"code","81b7f9ce":"code","3f302c74":"code","cd7159b4":"code","23fe4700":"code","636bab38":"code","bc4bcafd":"code","aa0a160f":"code","7b0d1ff5":"code","d23b2c72":"code","b30516a8":"code","3fbf39db":"code","4abb3417":"code","33a1f77a":"code","a695d0df":"markdown","6885386d":"markdown","4a011fb4":"markdown","1402f0ea":"markdown","d1f920ba":"markdown"},"source":{"cd743d6f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4d091b58":"import pandas as pd\nimport numpy as np","c4621be2":"train = pd.read_csv('\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_train.csv')\ntest = pd.read_csv('\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_test.csv')","0e9ad8dc":"train.info()","46f34222":"test.info()","1aa33622":"train['Date'] = pd.to_datetime(train['Date'])\ntest['Date'] = pd.to_datetime(test['Date'])","3c2de326":"train.head(5)","95720995":"train.tail(5)","9658171a":"train['Date'] = train['Date'].astype('int64')\ntest['Date'] = test['Date'].astype('int64')","c2dc770a":"train.tail(5)","8a33952e":"train.info()","d56c76e2":"train.iloc[:,-3].sample(3)","25476132":"X = train.iloc[:,-3]\nprint(X.shape)\nX = np.array(X).reshape(-1,1)\nprint(X.shape)","dc03f0fa":"Y = train.iloc[:,-2:]\nprint(Y.shape)\nY.sample(3)","c37a1dc1":"from sklearn.model_selection import train_test_split \ntrainX , valX, trainY, valY = train_test_split(X, Y, random_state=1)","4e377a9b":"y1Train = trainY.iloc[:,0]\nprint(y1Train.shape)\ny1Train.sample(3)","6f939791":"y2Train = trainY.iloc[:,1]\ny2Train.sample(3)","70d9c1ba":"y1Val = valY.iloc[:,0]\ny1Val.sample(3)","8346178e":"y2Val = valY.iloc[:,1]\ny2Val.sample(3)","5ed49c48":"print(trainX.shape)","81b7f9ce":"from sklearn.tree import DecisionTreeRegressor\nlrModel1 = DecisionTreeRegressor(random_state = 27)\n%time lrModel1.fit(trainX, y1Train)","3f302c74":"%time y1Pred = lrModel1.predict(valX)\nprint(y1Pred[:,])","cd7159b4":"from sklearn.metrics import mean_absolute_error\n\nprint(\"Accuracy in train set : \", lrModel1.score(trainX, y1Train))\nprint(\"RMSE : \", mean_absolute_error(y1Val, y1Pred)**(0.5))","23fe4700":"lrModel2 = DecisionTreeRegressor(random_state = 27)\n%time lrModel2.fit(trainX.reshape(-1, 1), y2Train)\n\n%time y2Pred = lrModel2.predict(valX)\n\nprint(\"Accuracy in train set : \", lrModel2.score(trainX, y2Train))\nprint(\"RMSE : \", mean_absolute_error(y2Val, y2Pred)**(0.5))","636bab38":"print(test.shape)\ntest.sample(3)","bc4bcafd":"forecastID = test.iloc[:,0]","aa0a160f":"test.iloc[:,-1].sample(3)","7b0d1ff5":"test = np.array(test.iloc[:,-1]).reshape(-1,1)","d23b2c72":"%time finalPred1 = lrModel1.predict(test)\nprint(finalPred1[:,])","b30516a8":"%time finalPred2 = lrModel2.predict(test)\nprint(finalPred2[:,])","3fbf39db":"outputFile = pd.DataFrame({\"ForecastId\": forecastID,\n                           \"ConfirmedCases\": (finalPred1+0.5).astype('int'),\n                           \"Fatalities\": (finalPred2+0.5).astype('int')})","4abb3417":"outputFile.sample(3)","33a1f77a":"outputFile.to_csv(\"submission.csv\", index=False)","a695d0df":"## date output seggregation","6885386d":"## model1 training : ConfirmedCases","4a011fb4":"## train-test split","1402f0ea":"## model2 training : Fatalities","d1f920ba":"## taking on test data"}}