{"cell_type":{"3190dc88":"code","00e86e23":"code","08a3dba0":"code","86610f64":"code","208ae2cf":"code","c341d4ea":"code","2aba74fc":"code","ef559558":"code","50de2135":"code","57887068":"code","6c7bb9f1":"code","727595f4":"code","d44cdcd2":"code","cc4e4485":"code","8ca2406e":"code","ca84b787":"code","e390ad59":"code","0fbce26d":"code","7f086c96":"code","754f545d":"code","d48a22b6":"code","a263e42d":"code","9b29f770":"code","b1bd6a3c":"code","66c50a52":"code","d849aa5f":"code","ceddf4aa":"code","da3467da":"code","b01ad91f":"code","67c6238c":"code","22412f56":"code","0214d823":"code","1aae2232":"code","4440c992":"code","103ccc5e":"code","168ebab8":"code","1b06bcb5":"code","7bc27f81":"code","49ea7200":"code","4b7144f6":"code","d25ce2d9":"code","dbd574ec":"code","f3eabedf":"code","38fb889a":"code","568cdbaf":"code","7a92e88a":"code","e57e94bf":"code","6d49d149":"code","56d4fd21":"code","983aa14e":"code","aab3f09e":"code","1183d9c5":"code","576bda31":"code","e69e4d84":"code","94a4f2b8":"code","d2ffaaad":"code","0001645e":"code","a38fec2d":"code","9b8eae05":"code","252792e0":"code","3ffd77af":"code","949c6895":"code","c277c5fd":"code","50390292":"code","d9bae26c":"code","e69c6b88":"code","6674af8e":"code","332f3522":"code","3f35fa5e":"code","d871a4cf":"code","2f9723e1":"code","191394ea":"code","889f92fc":"code","97ae43d8":"code","0d33ab48":"code","c3105f37":"code","515ce867":"code","9aa4fbed":"code","0944e7ee":"code","a4c947d9":"code","5adc3c9b":"code","90746433":"code","b3dd097f":"code","f734e073":"code","9e0fe860":"code","e22bbe5a":"code","c2c7a1f1":"code","bda5cd7c":"code","29747b37":"code","bc90e89c":"code","f3cf0e12":"code","00df8ac0":"code","1fa232f9":"code","587a601f":"code","4c4d0613":"code","67bbd774":"code","6d94296f":"code","534395ce":"code","9e0a36aa":"code","869b5841":"code","20c82529":"code","00897cf9":"code","f4a20d3f":"code","1f7d58e8":"code","55895cd2":"code","935713a0":"code","e0ed741f":"code","a1b4f136":"code","a0e16604":"code","fd4ec7ad":"code","66040111":"code","11d03d1e":"code","b369435e":"code","b2202735":"code","f5aac4f4":"code","48467a06":"code","dab7d20b":"code","0818b3ab":"code","1a677502":"code","a23051df":"code","af2dbb2f":"code","0e5265cf":"code","3597a0d5":"code","98584cfe":"code","2d774527":"code","5e88f1bd":"code","f3ffa041":"code","4c1f643e":"code","cdeb4442":"code","d8699e9c":"code","5aca6618":"code","cee03bf0":"code","2394541e":"code","4c47ec92":"code","a17becbe":"code","e73e8baa":"code","28fc8d08":"code","84fd4a9b":"code","847a19aa":"code","83454e1a":"code","a057b6c2":"code","dea293c6":"code","ffc9f6ae":"code","3942dd04":"code","582a9c98":"code","845fec29":"code","ff4a5d74":"code","0f1d33e6":"code","b31b54bd":"code","e6475307":"code","1fc1f8f4":"code","be9b8d77":"code","563d689a":"code","2beece7a":"code","a0c4edef":"code","da241bf3":"code","0a1babfb":"code","e6bb10c9":"code","f2699eba":"code","71cbdc21":"code","e3e95d56":"code","37908400":"markdown","64dd0b23":"markdown","6f0486f8":"markdown","e2e49744":"markdown","ea4773f3":"markdown","05db8e2e":"markdown","c0441222":"markdown","3967f64f":"markdown","b043c010":"markdown","0924dad5":"markdown","df2cd973":"markdown","144fb0a9":"markdown","6c7aa563":"markdown","eca713b9":"markdown","8321781e":"markdown","2fa51f62":"markdown","ce920bad":"markdown","9210500b":"markdown","6b95775d":"markdown","6c77541f":"markdown","96202c9c":"markdown","6217190d":"markdown","52a2a140":"markdown","fa3b5e4d":"markdown","11032cd4":"markdown","03b81338":"markdown","2e827faa":"markdown","ca32c51f":"markdown","6accef29":"markdown","69879ae8":"markdown","54e87767":"markdown","a5c3977f":"markdown","aa25130a":"markdown","edfe1fb8":"markdown","c0d9d3f8":"markdown","e39642b1":"markdown","851169bf":"markdown","5e84f547":"markdown","016695e6":"markdown","61a0aed3":"markdown","905e24f1":"markdown","1621a99a":"markdown"},"source":{"3190dc88":"import numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold, GridSearchCV, TimeSeriesSplit,cross_val_predict\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm_notebook as tqdm\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.feature_extraction.text import TfidfVectorizer,CountVectorizer\nfrom sklearn.feature_extraction import text\nfrom sklearn.decomposition import SparsePCA\nfrom lightgbm import LGBMClassifier","00e86e23":"#\u30cf\u30f3\u30ba\u30aa\u30f3\u306e\u30b9\u30e0\u30fc\u30ba\u306a\u9032\u884c\u306e\u305f\u3081\u306b\u5168\u4f53\u306e20\u5206\u306e1\u3060\u3051\u8aad\u307f\u8fbc\u3080\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n#\u5b9f\u969b\u306b\u8ab2\u984c\u3067\u30e2\u30c7\u30ea\u30f3\u30b0\u3059\u308b\u969b\u306b\u306f\"skiprows=lambda x: x%20!=0\"\u3092\u524a\u9664\u3057\u3066\u304f\u3060\u3055\u3044\u3002\ndf_train = pd.read_csv('..\/input\/homework-for-students2\/train.csv', index_col=0,parse_dates=['issue_d','earliest_cr_line'])\ndf_test = pd.read_csv('..\/input\/homework-for-students2\/test.csv', index_col=0,parse_dates=['issue_d','earliest_cr_line'])\n# df_spi = pd.read_csv('..\/input\/homework-for-students2\/spi.csv',parse_dates=['date'])","08a3dba0":"len(df_train)","86610f64":"# df_train = df_train[df_train.issue_d.dt.year>=2015]\ny_train = df_train.loan_condition\nX_train = df_train.drop(['loan_condition'],axis=1)\nX_test = df_test.copy()\nX_train2 = X_train.copy()\nX_test2 = X_test.copy()","208ae2cf":"df_train.describe()","c341d4ea":"df_test.describe()","2aba74fc":"df_train.corr()","ef559558":"df_test.corr()","50de2135":"len(df_train)","57887068":"df_train.purpose.nunique()","6c7bb9f1":"df_test.purpose.nunique()","727595f4":"X_train[X_train.grade=='A'].loan_amnt.hist(bins=40)","d44cdcd2":"f = 'loan_amnt'\n\nplt.figure(figsize=[7,7])\ndf_train.loc[(df_train.loan_condition==0),f].hist(density=True, alpha=0.5, bins=50)\ndf_train.loc[(df_train.loan_condition==1),f].hist(density=True, alpha=0.5, bins=50)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","cc4e4485":"f = 'loan_amnt'\n\nplt.figure(figsize=[7,7])\ndf_train[f].hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","8ca2406e":"f = 'annual_inc'\n\nplt.figure(figsize=[7,7])\nnp.log1p(df_train.loc[(df_train.loan_condition==0),f]).hist(density=True, alpha=0.5, bins=50)\nnp.log1p(df_train.loc[(df_train.loan_condition==1),f]).hist(density=True, alpha=0.5, bins=50)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","ca84b787":"f = 'installment'\n\nplt.figure(figsize=[7,7])\ndf_train[f].hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","e390ad59":"X_train2.isnull().sum()","0fbce26d":"X_test2.isnull().sum()","7f086c96":"X_train.emp_title.head()","754f545d":"#\u30c6\u30ad\u30b9\u30c8\u306a\u306e\u3067\u3001\u4e00\u65e6\u524a\u9664\nX_train2.drop('emp_title',axis=1,inplace=True)\nX_test2.drop('emp_title',axis=1,inplace=True)","d48a22b6":"TXT_train = df_train.emp_title\nTXT_test = X_test.emp_title\nTXT_train.fillna('#',inplace=True)\nTXT_test.fillna('#',inplace=True)\nTXT_temp = TXT_train.append(TXT_test)","a263e42d":"x = 15\ntfidf = TfidfVectorizer(max_features=x,stop_words=['of','inc','and'],ngram_range=(1,2))\ntfidf.fit(TXT_temp)\nTXT_train = tfidf.transform(TXT_train)\nTXT_test = tfidf.transform(TXT_test)","9b29f770":"tfidf.get_feature_names()","b1bd6a3c":"# pca = SparsePCA(n_components=15, normalize_components=True, random_state=20)\n# TXT_train = pca.fit_transform(TXT_train.todense())\n# TXT_test = pca.transform(TXT_test.todense())","66c50a52":"# TXT_train = pd.DataFrame(TXT_train,columns=range(0,15),index=X_train2.index)\n# TXT_test = pd.DataFrame(TXT_test,columns=range(0,15),index=X_test2.index)\n# X_train2 = pd.concat([X_train2,TXT_train],axis=1)\n# X_test2 = pd.concat([X_test2,TXT_test],axis=1)","d849aa5f":"TXT_train = pd.DataFrame(TXT_train.todense(),columns=tfidf.get_feature_names(),index=X_train2.index)\nTXT_test = pd.DataFrame(TXT_test.todense(),columns=tfidf.get_feature_names(),index=X_test2.index)\nX_train2 = pd.concat([X_train2,TXT_train],axis=1)\nX_test2 = pd.concat([X_test2,TXT_test],axis=1)","ceddf4aa":"# X_train2.analyst.mean(),X_test2.analyst.mean()","da3467da":"# X_train2.teacher.mean(),X_test2.teacher.mean()","b01ad91f":"# X_train2['sum_emp_title'] = 0\n# X_test2['sum_emp_title'] = 0\n# for i in range(0,x):\n#     temp = X_train2.iloc[:,30+i].apply(lambda x: 0 if x == 0 else i + 1)\n#     X_train2['sum_emp_title'] += temp*(i+1)\n#     temp = X_test2.iloc[:,30+i].apply(lambda x: 0 if x == 0 else i + 1)\n#     X_test2['sum_emp_title'] += temp*(i+1)","67c6238c":"# X_train2.drop(X_train2.iloc[:,30:30+x],axis=1,inplace=True)\n# X_test2.drop(X_test2.iloc[:,30:30+x],axis=1,inplace=True)","22412f56":"X_train.emp_length.unique()","0214d823":"#\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3067\u52a0\u5de5","1aae2232":"X_train.annual_inc.hist(bins=20)","4440c992":"X_test[X_test.annual_inc.isnull()]","103ccc5e":"x = X_train2.annual_inc.median()\nX_train2.annual_inc.fillna(x,inplace=True)\nX_test2.annual_inc.fillna(x, inplace=True)","168ebab8":"X_train2.title.unique()","1b06bcb5":"X_test.title.unique()","7bc27f81":"X_train2.title.fillna('#',inplace=True)\nX_test2.title.fillna('#',inplace=True)","49ea7200":"X_train2.title = X_train2.title.str.lower()\nX_test2.title = X_test2.title.str.lower()","4b7144f6":"X_train2.title = X_train2.title.str.strip()\nX_test2.title = X_test2.title.str.strip()","d25ce2d9":"X_train2.title.nunique()","dbd574ec":"temp = X_train2.groupby('title',as_index=False).loan_amnt.count()","f3eabedf":"X_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='debt_consolidation'),'title'] = 'debt consolidation'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='other'),'title'] = 'other'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='major_purchase'),'title'] = 'major purchase'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='credit_card'),'title'] = 'credit card refinancing'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='home_improvement'),'title'] = 'home improvement'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='small_business'),'title'] = 'business'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='medical'),'title'] = 'medical expenses'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='car'),'title'] = 'car financing'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='moving'),'title'] = 'moving and relocation'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='vacation'),'title'] = 'vacation'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='house'),'title'] = 'home improvement'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='renewable_energy'),'title'] = 'green loan'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='wedding'),'title'] = 'major purchase'\nX_train2.loc[(~X_train2.title.isin(X_test2.title.unique()))&(X_train2.purpose=='educational'),'title'] = 'major purchase'","38fb889a":"X_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='debt_consolidation'),'title'] = 'debt consolidation'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='other'),'title'] = 'other'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='major_purchase'),'title'] = 'major purchase'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='credit_card'),'title'] = 'credit card refinancing'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='home_improvement'),'title'] = 'home improvement'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='small_business'),'title'] = 'business'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='medical'),'title'] = 'medical expenses'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='car'),'title'] = 'car financing'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='moving'),'title'] = 'moving and relocation'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='vacation'),'title'] = 'vacation'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='house'),'title'] = 'home improvement'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='renewable_energy'),'title'] = 'green loan'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='wedding'),'title'] = 'major purchase'\nX_test2.loc[(~X_test2.title.isin(X_test2.title.unique()))&(X_test2.purpose=='educational'),'title'] = 'major purchase'","568cdbaf":"# X_train2.title.replace({'consolidation debt':'debt consolidation'\n#                   , '\\tdebt_consolidation':'debt consolidation'\n#                   ,'loan consolidation':'debt consolidation'\n#                   ,'consolidation loan':'debt consolidation'\n#                  , 'yay, debt consolidation!': 'debt consolidation'\n#                  , 'debt consolidation loan': 'debt consolidation'\n#                  , 'consolidation': 'debt consolidation'\n#                         , '2012 consolidation': 'debt consolidation'\n#                         , '2012consolidation': 'debt consolidation'\n#                         , '2012 consolidation loan': 'debt consolidation'\n#                         , '2013 consolidation': 'debt consolidation'\n#                         , '2013 consolidation loan': 'debt consolidation'\n#                         , 'consolidate debt': 'debt consolidation'\n#                         , 'consolidate': 'debt consolidation'\n#                         , 'bill consolidation': 'debt consolidation'\n#                         , 'consolidate bills': 'debt consolidation'\n#                         , 'debtcon': 'debt consolidation'\n#                         , '#1 debit consolidation': 'debt consolidation'\n#                         , 'consolidating debt': 'debt consolidation'\n#                         , 'debt consolidate': 'debt consolidation'\n#                         , 'my debt consolidation': 'debt consolidation'\n#                         , 'bill consolidation loan': 'debt consolidation'\n#                         , 'my debt consolidation loan': 'debt consolidation'\n#                         , 'debt consolodation': 'debt consolidation'\n#                         , 'debt consolidator': 'debt consolidation'\n#                         , 'debt_consolidation': 'debt consolidation'\n#                         , 'debtconsolidation': 'debt consolidation'\n#                         , 'dept consolidation': 'debt consolidation'\n#                         , '2013 debt consolidation': 'debt consolidation'\n#                         , 'debit consolidation': 'debt consolidation'\n#                         , 'consolidated debt': 'debt consolidation'\n#                         , 'debt cons.': 'debt consolidation'\n#                         , 'debt cons': 'debt consolidation'\n#                         , 'debt con': 'debt consolidation'\n#                         , 'debt consol': 'debt consolidation'\n#                         , 'consolidate my debt': 'debt consolidation'\n#                  , 'wedding': 'wedding loan'\n#                         , 'wedding expenses': 'wedding loan'\n#                         , 'wedding fund': 'wedding loan'\n#                         , 'wedding help': 'wedding loan'\n#                  , 'credit card intersest relief': 'credit card refinancing'\n#                   , 'credit card payoffs.': 'credit card refinancing'\n#                   , 'credit card debt': 'credit card refinancing'\n#                         , 'credit cards': 'credit card refinancing'\n#                         , 'refinance credit card': 'credit card refinancing'\n#                         , 'refinance cc': 'credit card refinancing'\n#                         , 'cc refi loan': 'credit card refinancing'\n#                         , 'credit card refinance loan': 'credit card refinancing'\n#                         , 'refinance credit card debt': 'credit card refinancing'\n#                         , 'credit card loan': 'credit card refinancing'\n#                         , 'credit card refi': 'credit card refinancing'\n#                         , 'credit card': 'credit card refinancing'\n#                         , 'credit refi': 'credit card refinancing'\n#                         , 'ccrefi': 'credit card refinancing'\n#                         , 'credit refinancing': 'credit card refinancing'\n#                         , 'ccrefinance': 'credit card refinancing'\n#                         , 'credit': 'credit card refinancing'\n#                         , 'card refi': 'credit card refinancing'\n#                         , 'cc refinance': 'credit card refinancing'\n#                         , 'cc refi': 'credit card refinancing'\n#                         , 'refinance credit cards': 'credit card refinancing'\n#                         , 'card refinance': 'credit card refinancing'\n#                         , 'credit refinance': 'credit card refinancing'\n#                         , 'cards': 'credit card refinancing'\n#                         , 'credit card refinance': 'credit card refinancing'\n#                         , 'cc loan': 'credit card refinancing'\n#                         , 'cc': 'credit card refinancing'\n#                         , 'credit loan': 'credit card refinancing'\n#                   , 'refinance': 'credit card refinancing'\n#                  , 'home improvement loan': 'home improvement'\n#                         , 'home': 'home improvement'\n#                         , 'home improvements': 'home improvement'\n#                         , 'homeimprovement': 'home improvement'\n#                         , 'roof': 'home improvement'\n#                         , 'roof loan': 'home improvement'\n#                         , 'roof replacement': 'home improvement'\n#                         , 'house loan': 'home improvement'\n#                         , 'bathroom': 'home improvement'\n#                         , 'bathroom remodel': 'home improvement'\n#                         , 'home repair': 'home improvement'\n#                         , 'pool loan': 'home improvement'\n#                         , 'home improvment': 'home improvement'\n#                         , 'pool heater': 'home improvement'\n#                         , 'home loan': 'home improvement'\n#                         , 'buying a house': 'home buying'\n#                         , 'major purchase loan': 'major purchase'\n#                         , 'moving loan': 'moving and relocation'\n#                         , 'moving': 'moving and relocation'\n#                         , 'small business loan': 'business'\n#                         , 'small business': 'business'\n#                         , 'small_business': 'business'\n#                         , 'business loan': 'business'\n#                         , 'business inventory': 'business'\n#                         , 'business expenses': 'business'\n#                         , 'business expansion': 'business'\n#                         , 'working capital': 'business'\n#                         , 'medical': 'medical expenses'\n#                         , 'medical bills': 'medical expenses'\n#                         , 'medical loan': 'medical expenses'\n#                         , 'car': 'car financing'\n#                         , 'car payoff': 'car financing'\n#                         , 'car loan': 'car financing'\n#                         , 'car repair': 'car financing'\n#                         , 'buy a car': 'car financing'\n#                         , 'car repairs': 'car financing'\n#                         , 'car purchase': 'car financing'\n#                         , 'used car loan': 'car financing'\n#                         , 'relocating': 'moving and relocation'\n#                         , 'relocation fund': 'moving and relocation'\n#                         , 'vacation loan': 'vacation'\n#                         , 'other loan': 'other'\n#                  , 'auto loan': 'loan'\n#                         , 'loan 1': 'loan'\n#                         , 'loan1': 'loan'\n#                         , 'loan2': 'loan'\n#                         , 'myloan': 'loan'\n#                         , 'my loan': 'loan'\n#                        , 'cc consolidation': 'credit card consolidation'\n#                        , 'credit consolidation': 'credit card consolidation'\n#                         , 'credit card consolidation loan': 'credit card consolidation'\n#                         , 'credit card debt consolidation': 'credit card consolidation'\n#                         , 'consolidate credit card debt': 'credit card consolidation'\n#                         , 'cc debt consolidation': 'credit card consolidation'\n#                         , 'card consolidation': 'credit card consolidation'\n#                         , 'cc debt consolidation loan': 'credit card consolidation'\n#                         , 'consolidate credit cards': 'credit card consolidation'\n#                         , 'cc consolidate': 'credit card consolidation'\n#                        , 'credit card pay off': 'credit card payoff'\n#                         , 'cc payoff': 'credit card payoff'\n#                         , 'ccpayoff': 'credit card payoff'\n#                        , 'pay off credit cards': 'credit card payoff'\n#                         , 'pay off credit card': 'credit card payoff'\n#                         , 'credit card payoff loan': 'credit card payoff'\n#                         , 'credit payoff': 'credit card payoff'\n#                         , 'payoff credit cards': 'credit card payoff'\n#                         , 'payoff credit card': 'credit card payoff'\n#                         , 'paying off credit cards': 'credit card payoff'\n#                         , 'card payoff': 'credit card payoff'\n#                         , 'credit pay off': 'credit card payoff'\n#                        , 'pay off': 'payoff'\n#                         , 'payoffs': 'payoff'\n#                         , 'pay it off': 'payoff'\n#                         , 'payoff loan': 'payoff'\n#                        , 'personal': 'personal loan'\n#                         , 'personalloan': 'personal loan'\n#                         , 'my personal loan': 'personal loan'\n#                        , 'lending club': 'lending club loan'\n#                         , 'lendingclub': 'lending club loan'\n#                         , 'lendingclub loan': 'lending club loan'\n#                         , 'lc loan': 'lending club loan'\n#                         , 'lending loan': 'lending club loan'\n#                        , 'pool': 'pool loan'\n#                         , 'swimming pool': 'pool loan'\n#                        , 'freedom': 'freedom loan'\n#                         , 'financial freedom': 'freedom loan'\n#                        , 'new life': 'new start'\n#                        , 'new beginning': 'new start'\n#                        , 'new beginnings': 'new start'\n#                        , 'fresh start': 'new start'\n#                         , 'a new life': 'new start'\n#                        , 'a new beginning': 'new start'\n#                        , 'a fresh start': 'new start'\n#                         , 'a new start': 'new start'\n#                        , 'get out of debt!': 'get out of debt'\n#                        , 'getting out of debt': 'get out of debt'},inplace=True)\n# X_train2.loc[X_train2.title.str.contains('(debt)'),'title'] = 'debt consolidation'\n# X_train2.loc[X_train2.title.str.contains('(credit card refinance|credit card refinancing)'),'title'] = 'debt consolidation'\n# X_train2.loc[X_train2.title.str.contains('(wedding)'),'title'] = 'wedding loan'\n# X_train2.loc[X_train2.title.str.contains('(vacation)'),'title'] = 'vacation'\n# X_train2.loc[X_train2.title.str.contains('(work)'),'title'] = 'business'","7a92e88a":"X_train2.title.nunique()","e57e94bf":"# X_train2.groupby('title').loan_amnt.count().plot(kind='bar')","6d49d149":"X_test2.groupby('title').loan_amnt.count().plot(kind='bar')","56d4fd21":"# #\u30c6\u30ad\u30b9\u30c8\u306a\u306e\u3067\u3001\u4e00\u65e6\u524a\u9664\n# X_train2.drop('title',axis=1,inplace=True)\n# X_test2.drop('title',axis=1,inplace=True)","983aa14e":"# TXT_train = df_train.title\n# TXT_test = X_test.title\n# TXT_train.fillna('#',inplace=True)\n# TXT_test.fillna('#',inplace=True)\n# TXT_train.replace({'cards':'card','credit card':'card'},regex=True,inplace=True)\n# TXT_test.replace({'cards':'card','credit card':'card'},regex=True,inplace=True)","aab3f09e":"# x = 10\n# tfidf = TfidfVectorizer(max_features=x,stop_words=['of','inc','and','2012','2013'],ngram_range=(2,2))\n# TXT_train = tfidf.fit_transform(TXT_train)\n# TXT_test = tfidf.transform(TXT_test)","1183d9c5":"# tfidf.get_feature_names()","576bda31":"# TXT_train = pd.DataFrame(TXT_train.todense(),columns=tfidf.get_feature_names(),index=X_train2.index)\n# TXT_test = pd.DataFrame(TXT_test.todense(),columns=tfidf.get_feature_names(),index=X_test2.index)\n# X_train2 = pd.concat([X_train2,TXT_train],axis=1)\n# X_test2 = pd.concat([X_test2,TXT_test],axis=1)","e69e4d84":"# X_train2['sum_title'] = 0\n# X_test2['sum_title'] = 0\n# for i in range(0,x):\n#     temp = X_train2.iloc[:,30+i].apply(lambda x: 0 if x == 0 else i + 1)\n#     X_train2['sum_title'] += temp\n#     temp = X_test2.iloc[:,30+i].apply(lambda x: 0 if x == 0 else i + 1)\n#     X_test2['sum_title'] += temp","94a4f2b8":"# X_train2.drop(X_train2.iloc[:,30:30+x],axis=1,inplace=True)\n# X_test2.drop(X_test2.iloc[:,30:30+x],axis=1,inplace=True)","d2ffaaad":"f = 'delinq_2yrs'\n\nplt.figure(figsize=[7,7])\ndf_train[f].hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","0001645e":"X_train2.delinq_2yrs.fillna(0,inplace=True)\nX_test2.delinq_2yrs.fillna(0,inplace=True)","a38fec2d":"# f = 'dti'\n\n# plt.figure(figsize=[7,7])\n# np.log1p(df_train[f]).hist(density=True, alpha=0.5, bins=50)\n# # test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\n# np.log1p(df_test[f]).hist(density=True, alpha=0.5, bins=50)\n# plt.xlabel(f)\n# plt.ylabel('density')\n# plt.show()","9b8eae05":"temp = pd.concat([X_train2,X_test2])\nx = temp.dti.median()\nX_train2.dti.fillna(x,inplace=True)\nX_test2.dti.fillna(x, inplace=True)","252792e0":"#\u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0\u3067\u52a0\u5de5","3ffd77af":"f = 'inq_last_6mths'\n\nplt.figure(figsize=[7,7])\ndf_train[f].hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","949c6895":"x = temp.inq_last_6mths.median()\nX_train2.inq_last_6mths.fillna(x,inplace=True)\nX_test2.inq_last_6mths.fillna(x, inplace=True)","c277c5fd":"#delinq_2yrs>=1\u306e\u5834\u5408\u306emths_since_last_delinq\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nX_train[X_train.delinq_2yrs>=1].mths_since_last_delinq.hist(bins=20)","50390292":"#delinq_2yrs=0\u306e\u5834\u5408\u306emths_since_last_delinq\u306e\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nX_train[X_train.delinq_2yrs==0].mths_since_last_delinq.hist(bins=20)","d9bae26c":"x = temp[temp.delinq_2yrs==1].mths_since_last_delinq.mean()\nX_train2.loc[(X_train2.delinq_2yrs==0) & (X_train2.mths_since_last_delinq.isnull()),'mths_since_last_delinq'] = 9999\nX_train2.loc[(X_train2.delinq_2yrs>=1) & (X_train2.mths_since_last_delinq.isnull()),'mths_since_last_delinq'] = x","e69c6b88":"X_test2.loc[(X_test.delinq_2yrs==0) & (X_test2.mths_since_last_delinq.isnull()),'mths_since_last_delinq'] = 9999\nX_test2.loc[(X_test.delinq_2yrs>=1) & (X_test2.mths_since_last_delinq.isnull()),'mths_since_last_delinq'] = x","6674af8e":"f = 'mths_since_last_record'\n\nplt.figure(figsize=[7,7])\ndf_train[f].hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","332f3522":"X_train[['pub_rec','mths_since_last_record']].head()","3f35fa5e":"X_train2.mths_since_last_record.fillna(-1,inplace=True)\nX_test2.mths_since_last_record.fillna(-1,inplace=True)","d871a4cf":"f = 'mths_since_last_major_derog'\n\nplt.figure(figsize=[7,7])\ndf_train[f].hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","2f9723e1":"X_train[['pub_rec','mths_since_last_major_derog']].head()","191394ea":"X_train2.mths_since_last_major_derog.fillna(-1,inplace=True)\nX_test2.mths_since_last_major_derog.fillna(-1,inplace=True)","889f92fc":"f = 'open_acc'\n\nplt.figure(figsize=[7,7])\ndf_train[f].hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","97ae43d8":"X_train2.open_acc.fillna(0,inplace=True)\nX_test2.open_acc.fillna(0,inplace=True)","0d33ab48":"X_train.pub_rec.hist(bins=20)","c3105f37":"X_train2.pub_rec.fillna(0,inplace=True)\nX_test2.pub_rec.fillna(0, inplace=True)","515ce867":"f = 'revol_util'\n\nplt.figure(figsize=[7,7])\ndf_train[f].hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","9aa4fbed":"X_train[X_train.revol_util.isnull()][['revol_util','revol_bal']].head(10)","0944e7ee":"X_train2.revol_util.fillna(0,inplace=True)\nX_test2.revol_util.fillna(0, inplace=True)","a4c947d9":"f = 'total_acc'\n\nplt.figure(figsize=[7,7])\ndf_train[f].hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","5adc3c9b":"X_train2.total_acc.fillna(0,inplace=True)\nX_test2.total_acc.fillna(0, inplace=True)","90746433":"f = 'collections_12_mths_ex_med'\n\nplt.figure(figsize=[7,7])\ndf_train[f].hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\ndf_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","b3dd097f":"X_train2.collections_12_mths_ex_med.fillna(0,inplace=True)\nX_test2.collections_12_mths_ex_med.fillna(0, inplace=True)","f734e073":"X_train.acc_now_delinq.hist(bins=20)","9e0fe860":"X_train2.acc_now_delinq.fillna(0,inplace=True)\nX_test2.acc_now_delinq.fillna(0, inplace=True)","e22bbe5a":"X_train.tot_coll_amt.hist(bins=20)","c2c7a1f1":"X_train2.tot_coll_amt.fillna(0,inplace=True)\nX_test2.tot_coll_amt.fillna(0,inplace=True)","bda5cd7c":"X_train.tot_cur_bal.hist(bins=20)","29747b37":"X_train2.tot_cur_bal.fillna(0,inplace=True)\nX_test2.tot_cur_bal.fillna(0,inplace=True)","bc90e89c":"X_train.emp_length.unique()","f3cf0e12":"X_train2['emp_length'] = X_train.emp_length.replace({'< 1':'0'},regex=True)\nX_train2.emp_length.replace({'years':'','year':''},regex=True,inplace=True)\nX_train2['emp_length'] = X_train2.emp_length.replace({'\\+':''},regex=True).astype(float)","00df8ac0":"X_test2['emp_length'] = X_test.emp_length.replace({'< 1':'0'},regex=True)\nX_test2.emp_length.replace({'years':'','year':''},regex=True,inplace=True)\nX_test2['emp_length'] = X_test2.emp_length.replace({'\\+':''},regex=True).astype(float)","1fa232f9":"#emp_length\u304c\u6b20\u640d\u5024\u306e\u3082\u306e\u306f\u7121\u8077\u3068\u8003\u3048\u3089\u308c\u308b\nX_train2.emp_length.fillna(-1,inplace=True)\nX_test2.emp_length.fillna(-1,inplace=True)","587a601f":"f = 'emp_length'\n\nplt.figure(figsize=[7,7])\nX_train2[f].hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\nX_test2[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","4c4d0613":"X_train2['issue_d_year'] = X_train.issue_d.dt.year\nX_train2['issue_d_month'] = X_train.issue_d.dt.month\nX_test2['issue_d_year'] = X_test.issue_d.dt.year\nX_test2['issue_d_month'] = X_test.issue_d.dt.month\nX_train2.drop(['issue_d'],axis=1,inplace=True)\nX_test2.drop(['issue_d'],axis=1,inplace=True)","67bbd774":"X_train2['issue_d'] = (X_train2.issue_d_year.astype('str').str.zfill(4) + X_train2.issue_d_month.astype('str').str.zfill(2)).astype(int)\nX_test2['issue_d'] = (X_test2.issue_d_year.astype('str').str.zfill(4) + X_test2.issue_d_month.astype('str').str.zfill(2)).astype(int)","6d94296f":"# X_train2.drop(['issue_d_year','issue_d_month'],axis=1,inplace=True)\n# X_test2.drop(['issue_d_year','issue_d_month'],axis=1,inplace=True)","534395ce":"X_train2['zip_code'] = X_train.zip_code.str[:-2].astype(int)\nX_test2['zip_code'] = X_test.zip_code.str[:-2].astype(int)","9e0a36aa":"X_train2['earliest_cr_line_year'] = X_train.earliest_cr_line.dt.year\nX_train2['earliest_cr_line_month'] = X_train.earliest_cr_line.dt.month\nX_test2['earliest_cr_line_year'] = X_test.earliest_cr_line.dt.year\nX_test2['earliest_cr_line_month'] = X_test.earliest_cr_line.dt.month\nX_train2.drop(['earliest_cr_line'],axis=1,inplace=True)\nX_test2.drop(['earliest_cr_line'],axis=1,inplace=True)","869b5841":"X_train2.earliest_cr_line_year.fillna(0,inplace=True)\nX_test2.earliest_cr_line_year.fillna(0,inplace=True)\nX_train2.earliest_cr_line_month.fillna(0,inplace=True)\nX_test2.earliest_cr_line_month.fillna(0,inplace=True)","20c82529":"X_train2.earliest_cr_line_year = X_train2.earliest_cr_line_year.astype(int)\nX_train2.earliest_cr_line_month = X_train2.earliest_cr_line_month.astype(int)\nX_test2.earliest_cr_line_year = X_test2.earliest_cr_line_year.astype(int)\nX_test2.earliest_cr_line_month = X_test2.earliest_cr_line_month.astype(int)","00897cf9":"X_train2['earliest_cr_line'] = (X_train2.earliest_cr_line_year.astype('str').str.zfill(4) + X_train2.earliest_cr_line_month.astype('str').str.zfill(2)).astype(int)\nX_test2['earliest_cr_line'] = (X_test2.earliest_cr_line_year.astype('str').str.zfill(4) + X_test2.earliest_cr_line_month.astype('str').str.zfill(2)).astype(int)","f4a20d3f":"# X_train2.drop(['earliest_cr_line_year','earliest_cr_line_month'],axis=1,inplace=True)\n# X_test2.drop(['earliest_cr_line_year','earliest_cr_line_month'],axis=1,inplace=True)","1f7d58e8":"X_train2['loan_by_inc'] = X_train2.loan_amnt \/ X_train2.annual_inc\nX_test2['loan_by_inc'] = X_test2.loan_amnt \/ X_test2.annual_inc","55895cd2":"X_train2.loc[X_train2.loan_by_inc==np.inf,'loan_by_inc'] = 9999\nX_test2.loc[X_test2.loan_by_inc==np.inf,'loan_by_inc'] = 9999","935713a0":"temp = pd.concat([X_train2, y_train],axis=1)\ntemp[temp.loan_by_inc>1]","e0ed741f":"X_test2.loan_by_inc.hist(bins=20)","a1b4f136":"X_train2.loan_by_inc.hist(bins=20)","a0e16604":"X_train2['installment_by_inc'] = X_train2.installment \/ X_train2.annual_inc\nX_test2['installment_by_inc'] = X_test2.installment \/ X_test2.annual_inc","fd4ec7ad":"X_train2.loc[X_train2.installment_by_inc==np.inf,'installment_by_inc'] = 9999\nX_test2.loc[X_test2.installment_by_inc==np.inf,'installment_by_inc'] = 9999","66040111":"X_test2.installment_by_inc.hist(bins=20)","11d03d1e":"X_train2.installment_by_inc.hist(bins=20)","b369435e":"# X_train2['loan_by_installment'] = X_train2.loan_amnt \/ X_train2.installment\n# X_test2['loan_by_installment'] = X_test2.loan_amnt \/ X_test2.installment","b2202735":"# X_test2.loan_by_installment.hist(bins=20)","f5aac4f4":"# X_train2.loan_by_installment.hist(bins=20)","48467a06":"# f = 'purpose'\n# nf = 'mean_loan_purpose'\n# x = X_train2.groupby(f).loan_amnt.mean()\n# X_train2[nf] = X_train2[f].map(x)\n# X_test2[nf] = X_test2[f].map(x)","dab7d20b":"# f = 'mean_loan_purpose'\n# nf = 'diff_loan_mean_loan_purpose'\n# X_train2[nf] = X_train2.loan_amnt - X_train2[f]\n# X_test2[nf] = X_test2.loan_amnt - X_test2[f]","0818b3ab":"# X_train2[X_train2[nf].isnull()]= 9999\n# X_test2[X_test2[nf].isnull()] = 9999","1a677502":"f = 'issue_d'\nnf = 'count_issue_d'\n\nX_train2[nf] = X_train2[f].map(X_train2.groupby(f).loan_amnt.count())    \nX_test2[nf] = X_test2[f].map(X_test2.groupby(f).loan_amnt.count())","a23051df":"# temp = df_train.groupby('issue_d').loan_amnt.count()\n# temp.plot(x='issue_d',y='loan_amnt')","af2dbb2f":"# temp = df_test.groupby('issue_d').loan_amnt.count()\n# temp.plot(x='issue_d',y='loan_amnt')","0e5265cf":"# f = 'home_ownership'\n# nf = 'rate_home_ownership'\n# skf = StratifiedKFold(n_splits=5, random_state=51, shuffle=True)\n# # skf = TimeSeriesSplit(n_splits=5)\n# X_train2[nf] = np.nan\n# for i, (train_ix, val_ix) in enumerate(skf.split(X_train2,y_train)):\n# #     X_train2.sort_values('issue_d')[nf].iloc[val_ix] = X_train2.sort_values('issue_d').iloc[val_ix][f].map(df_train.sort_values('issue_d').iloc[train_ix].groupby(f).loan_condition.mean())\n#     X_train2[nf].iloc[val_ix] = X_train2.iloc[val_ix][f].map(df_train.iloc[train_ix].groupby(f).loan_condition.mean())\n    \n# X_test2[nf] = X_test2[f].map(df_train.groupby(f).loan_condition.mean())","3597a0d5":"f = 'addr_state'\nnf = 'rate_addr_state'\nskf = StratifiedKFold(n_splits=5, random_state=51, shuffle=True)\n# skf = TimeSeriesSplit(n_splits=5)\nX_train2[nf] = np.nan\nfor i, (train_ix, val_ix) in enumerate(skf.split(X_train2,y_train)):\n#     X_train2.sort_values('issue_d')[nf].iloc[val_ix] = X_train2.sort_values('issue_d').iloc[val_ix][f].map(df_train.sort_values('issue_d').iloc[train_ix].groupby(f).loan_condition.mean())\n    X_train2[nf].iloc[val_ix] = X_train2.iloc[val_ix][f].map(df_train.iloc[train_ix].groupby(f).loan_condition.mean())\n    \nX_test2[nf] = X_test2[f].map(df_train.groupby(f).loan_condition.mean())","98584cfe":"X_train2[nf].fillna(0,inplace=True)\nX_test2[nf].fillna(0,inplace=True)","2d774527":"# X_train2.drop([f],axis=1,inplace=True)\n# X_test2.drop([f],axis=1,inplace=True)","5e88f1bd":"f = 'purpose'\nnf = 'rate_purpose'\nskf = StratifiedKFold(n_splits=5, random_state=51, shuffle=True)\n# skf = TimeSeriesSplit(n_splits=5)\nX_train2[nf] = np.nan\nfor i, (train_ix, val_ix) in enumerate(skf.split(X_train2,y_train)):\n#     X_train2.sort_values('issue_d')[nf].iloc[val_ix] = X_train2.sort_values('issue_d').iloc[val_ix][f].map(df_train.sort_values('issue_d').iloc[train_ix].groupby(f).loan_condition.mean())\n    X_train2[nf].iloc[val_ix] = X_train2.iloc[val_ix][f].map(df_train.iloc[train_ix].groupby(f).loan_condition.mean())\n    \nX_test2[nf] = X_test2[f].map(df_train.groupby(f).loan_condition.mean())","f3ffa041":"X_train2[nf].fillna(0,inplace=True)\nX_test2[nf].fillna(0,inplace=True)","4c1f643e":"# X_train2.drop([f],axis=1,inplace=True)\n# X_test2.drop([f],axis=1,inplace=True)","cdeb4442":"# for i, (train_ix, val_ix) in enumerate(skf.split(X_train2,y_train, groups=X_train2.issue_d)):\n#     print(X_train2.sort_values('issue_d')['issue_d'].iloc[train_ix].head(1))\n#     print(X_train2.sort_values('issue_d')['issue_d'].iloc[train_ix].tail(1))\n#     print(X_train2.sort_values('issue_d')['issue_d'].iloc[val_ix].head(1))\n#     print(X_train2.sort_values('issue_d')['issue_d'].iloc[val_ix].tail(1))","d8699e9c":"f = 'zip_code'\nnf = 'rate_zip_code'\nskf = StratifiedKFold(n_splits=5, random_state=51, shuffle=True)\n# skf = TimeSeriesSplit(n_splits=5)\ntemp = pd.concat([X_train2,y_train],axis=1)\nX_train2[nf] = np.nan\nfor i, (train_ix, val_ix) in enumerate(skf.split(X_train2,y_train)):\n#     X_train2.sort_values('issue_d')[nf].iloc[val_ix] = X_train2.sort_values('issue_d').iloc[val_ix][f].map(df_train.sort_values('issue_d').iloc[train_ix].groupby(f).loan_condition.mean())\n    X_train2[nf].iloc[val_ix] = X_train2.iloc[val_ix][f].map(temp.iloc[train_ix].groupby(f).loan_condition.mean())\n    \nX_test2[nf] = X_test2[f].map(temp.groupby(f).loan_condition.mean())","5aca6618":"X_train2[nf].fillna(0,inplace=True)\nX_test2[nf].fillna(0,inplace=True)","cee03bf0":"# f = 'zip_code'\n# nf = 'dti_by_zip_code'\n# X_train2[nf] = np.nan\n# X_train2[nf] = X_train2[f].map(temp.groupby(f).dti.mean())    \n# X_test2[nf] = X_test2[f].map(temp.groupby(f).dti.mean())\n# X_train2[nf].fillna(0,inplace=True)\n# X_test2[nf].fillna(0,inplace=True)","2394541e":"encoder = LabelEncoder()\nX_train2['grade'] = encoder.fit_transform(X_train2['grade'])\nX_test2['grade'] = encoder.transform(X_test2['grade'])\nencoder = LabelEncoder()\nX_train2['sub_grade'] = encoder.fit_transform(X_train2['sub_grade'])\nX_test2['sub_grade'] = encoder.transform(X_test2['sub_grade'])","4c47ec92":"# dtype\u304cobject\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\ncats = []\nfor col in X_train2.columns:\n    if X_train2[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train2[col].nunique())","a17becbe":"encoder = OrdinalEncoder(cols=cats)\nX_train2[cats] = encoder.fit_transform(X_train2[cats])\nX_test2[cats] = encoder.transform(X_test2[cats])","e73e8baa":"# X_train2['category_loan_amnt'] = np.nan\n# X_train2.loc[X_train2.loan_amnt<=5000,'category_loan_amnt'] = 0\n# X_train2.loc[(X_train2.loan_amnt>5000)&(X_train2.loan_amnt<=7500),'category_loan_amnt'] = 1\n# X_train2.loc[(X_train2.loan_amnt>7500)&(X_train2.loan_amnt<=10000),'category_loan_amnt'] = 2\n# X_train2.loc[(X_train2.loan_amnt>10000)&(X_train2.loan_amnt<=12500),'category_loan_amnt'] = 3\n# X_train2.loc[(X_train2.loan_amnt>12500)&(X_train2.loan_amnt<=15000),'category_loan_amnt'] = 4\n# X_train2.loc[(X_train2.loan_amnt>15000)&(X_train2.loan_amnt<=17500),'category_loan_amnt'] = 5\n# X_train2.loc[(X_train2.loan_amnt>17500)&(X_train2.loan_amnt<=20000),'category_loan_amnt'] = 6\n# X_train2.loc[(X_train2.loan_amnt>20000)&(X_train2.loan_amnt<=25000),'category_loan_amnt'] = 7\n# X_train2.loc[(X_train2.loan_amnt>25000)&(X_train2.loan_amnt<=30000),'category_loan_amnt'] = 8\n# X_train2.loc[(X_train2.loan_amnt>30000),'category_loan_amnt'] = 9","28fc8d08":"# X_test2['category_loan_amnt'] = np.nan\n# X_test2.loc[X_test2.loan_amnt<=5000,'category_loan_amnt'] = 0\n# X_test2.loc[(X_test2.loan_amnt>5000)&(X_test2.loan_amnt<=7500),'category_loan_amnt'] = 1\n# X_test2.loc[(X_test2.loan_amnt>7500)&(X_test2.loan_amnt<=10000),'category_loan_amnt'] = 2\n# X_test2.loc[(X_test2.loan_amnt>10000)&(X_test2.loan_amnt<=12500),'category_loan_amnt'] = 3\n# X_test2.loc[(X_test2.loan_amnt>12500)&(X_test2.loan_amnt<=15000),'category_loan_amnt'] = 4\n# X_test2.loc[(X_test2.loan_amnt>15000)&(X_test2.loan_amnt<=17500),'category_loan_amnt'] = 5\n# X_test2.loc[(X_test2.loan_amnt>17500)&(X_test2.loan_amnt<=20000),'category_loan_amnt'] = 6\n# X_test2.loc[(X_test2.loan_amnt>20000)&(X_test2.loan_amnt<=25000),'category_loan_amnt'] = 7\n# X_test2.loc[(X_test2.loan_amnt>25000)&(X_test2.loan_amnt<=30000),'category_loan_amnt'] = 8\n# X_test2.loc[(X_test2.loan_amnt>30000),'category_loan_amnt'] = 9","84fd4a9b":"# X_train2['grade_loan_amnt'] = X_train2.grade*10 + X_train2.category_loan_amnt\n# X_test2['grade_loan_amnt'] = X_test2.grade*10 + X_test2.category_loan_amnt","847a19aa":"# X_train2.drop('category_loan_amnt',axis=1,inplace=True)\n# X_test2.drop('category_loan_amnt',axis=1,inplace=True)","83454e1a":"X_train2['annual_inc'] = np.log1p(X_train2.annual_inc)\nX_test2['annual_inc'] = np.log1p(X_test2.annual_inc)","a057b6c2":"f = 'annual_inc'\n\nplt.figure(figsize=[7,7])\nnp.log1p(df_train[f]).hist(density=True, alpha=0.5, bins=20)\n# test\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u53ef\u8996\u5316\u3092\u8a18\u5165\u3057\u3066\u307f\u307e\u3057\u3087\u3046\nnp.log1p(df_test[f]).hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","dea293c6":"# X_train2['new_grade'] = X_train2['grade']*10 + X_train2['sub_grade']\n# X_test2['new_grade'] = X_test2['grade']*10 + X_test2['sub_grade']","ffc9f6ae":"X_temp = pd.concat([X_train2,y_train],axis=1)\n#X_temp.groupby('grade_mul_teacher').loan_condition.mean()","3942dd04":"# params = {'max_depth':[3,5,7],\n#           'n_estimators':[100,150,200],\n#          }\n# grid = GridSearchCV(estimator=GradientBoostingClassifier(),param_grid=params,cv=3,scoring='roc_auc')\n# grid.fit(X_train2,y_train)","582a9c98":"# #sub_grade\u524a\u9664\n# X_train2.drop('sub_grade',axis=1,inplace=True)\n# X_test2.drop('sub_grade',axis=1,inplace=True)","845fec29":"len(X_train2)","ff4a5d74":"# scores = []\n# clf = GradientBoostingClassifier(random_state=71,n_estimators=170,max_depth=3,learning_rate=0.1)","0f1d33e6":"# x = 201511\n# train_temp = pd.concat([X_train2,y_train],axis=1)\n# X_train3 = train_temp[(train_temp.issue_d<x)].drop('loan_condition',axis=1)\n# y_train3 = train_temp.loc[(train_temp.issue_d<x),'loan_condition']\n# X_val3 = train_temp[train_temp.issue_d>=x].drop('loan_condition',axis=1)\n# y_val3 = train_temp.loc[train_temp.issue_d>=x,'loan_condition']\n# clf.fit(X_train3, y_train3)\n# y_pred = clf.predict_proba(X_val3)[:,1]\n# scores.append(roc_auc_score(y_val3, y_pred))\n# print(scores)","b31b54bd":"# x1 = 201509\n# x2 = 201511\n# train_temp = pd.concat([X_train2,y_train],axis=1)\n# X_train3 = train_temp[(train_temp.issue_d<x1)].drop('loan_condition',axis=1)\n# y_train3 = train_temp.loc[(train_temp.issue_d<x1),'loan_condition']\n# X_val3 = train_temp[(train_temp.issue_d>=x1)&(train_temp.issue_d<x2)].drop('loan_condition',axis=1)\n# y_val3 = train_temp.loc[(train_temp.issue_d>=x1)&(train_temp.issue_d<x2),'loan_condition']\n# clf.fit(X_train3, y_train3)\n# y_pred = clf.predict_proba(X_val3)[:,1]\n# scores.append(roc_auc_score(y_val3, y_pred))\n# print(scores)","e6475307":"# x1 = 201507\n# x2 = 201509\n# train_temp = pd.concat([X_train2,y_train],axis=1)\n# X_train3 = train_temp[(train_temp.issue_d<x1)].drop('loan_condition',axis=1)\n# y_train3 = train_temp.loc[(train_temp.issue_d<x1),'loan_condition']\n# X_val3 = train_temp[(train_temp.issue_d>=x1)&(train_temp.issue_d<x2)].drop('loan_condition',axis=1)\n# y_val3 = train_temp.loc[(train_temp.issue_d>=x1)&(train_temp.issue_d<x2),'loan_condition']\n# clf.fit(X_train3, y_train3)\n# y_pred = clf.predict_proba(X_val3)[:,1]\n# scores.append(roc_auc_score(y_val3, y_pred))\n# print(scores)","1fc1f8f4":"# x1 = 201505\n# x2 = 201507\n# train_temp = pd.concat([X_train2,y_train],axis=1)\n# X_train3 = train_temp[(train_temp.issue_d<x1)].drop('loan_condition',axis=1)\n# y_train3 = train_temp.loc[(train_temp.issue_d<x1),'loan_condition']\n# X_val3 = train_temp[(train_temp.issue_d>=x1)&(train_temp.issue_d<x2)].drop('loan_condition',axis=1)\n# y_val3 = train_temp.loc[(train_temp.issue_d>=x1)&(train_temp.issue_d<x2),'loan_condition']\n# clf.fit(X_train3, y_train3)\n# y_pred = clf.predict_proba(X_val3)[:,1]\n# scores.append(roc_auc_score(y_val3, y_pred))\n# print(scores)","be9b8d77":"# x1 = 201503\n# x2 = 201505\n# train_temp = pd.concat([X_train2,y_train],axis=1)\n# X_train3 = train_temp[(train_temp.issue_d<x1)].drop('loan_condition',axis=1)\n# y_train3 = train_temp.loc[(train_temp.issue_d<x1),'loan_condition']\n# X_val3 = train_temp[(train_temp.issue_d>=x1)&(train_temp.issue_d<x2)].drop('loan_condition',axis=1)\n# y_val3 = train_temp.loc[(train_temp.issue_d>=x1)&(train_temp.issue_d<x2),'loan_condition']\n# clf.fit(X_train3, y_train3)\n# y_pred = clf.predict_proba(X_val3)[:,1]\n# scores.append(roc_auc_score(y_val3, y_pred))\n# print(scores)","563d689a":"# print(np.mean(scores))\n# print(scores)","2beece7a":"# X_train2.drop({'installment','grade'},axis=1,inplace=True)\n# X_test2.drop({'installment','grade'},axis=1,inplace=True)","a0c4edef":"X_train2.drop('title',axis=1,inplace=True)\nX_test2.drop('title',axis=1,inplace=True)","da241bf3":"scores = []\ny_pred_test = 0\nclf_lgbm0 = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1,\n                                importance_type='split', learning_rate=0.05, max_depth=-1,\n                                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                                n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                                random_state=71, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\nclf_lgbm1 = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.9,\n                                importance_type='split', learning_rate=0.05, max_depth=-1,\n                                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                                n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                                random_state=71, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\nclf_lgbm2 = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.8,\n                                importance_type='split', learning_rate=0.05, max_depth=-1,\n                                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                                n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                                random_state=71, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\nclf_lgbm3 = LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=0.7,\n                                importance_type='split', learning_rate=0.05, max_depth=-1,\n                                min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,\n                                n_estimators=9999, n_jobs=-1, num_leaves=15, objective=None,\n                                random_state=71, reg_alpha=0.0, reg_lambda=0.0, silent=True,\n                                subsample=1.0, subsample_for_bin=200000, subsample_freq=0)\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\nfor i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train2, y_train))):\n    X_train_, y_train_ = X_train2.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train2.values[test_ix], y_train.values[test_ix]\n    clf_lgbm0.fit(X_train_, y_train_, early_stopping_rounds=50, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred_lgbm0 = pd.DataFrame(clf_lgbm0.predict_proba(X_val)[:,1])\n    y_pred_test += pd.DataFrame(clf_lgbm0.predict_proba(X_test2)[:,1]).rank()\/20\n    clf_lgbm1.fit(X_train_, y_train_, early_stopping_rounds=50, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred_lgbm1 = pd.DataFrame(clf_lgbm1.predict_proba(X_val)[:,1])\n    y_pred_test += pd.DataFrame(clf_lgbm1.predict_proba(X_test2)[:,1]).rank()\/20\n    clf_lgbm2.fit(X_train_, y_train_, early_stopping_rounds=50, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred_lgbm2 = pd.DataFrame(clf_lgbm2.predict_proba(X_val)[:,1])\n    y_pred_test += pd.DataFrame(clf_lgbm2.predict_proba(X_test2)[:,1]).rank()\/20\n    clf_lgbm3.fit(X_train_, y_train_, early_stopping_rounds=50, eval_metric='auc', eval_set=[(X_val, y_val)])\n    y_pred_lgbm3 = pd.DataFrame(clf_lgbm3.predict_proba(X_val)[:,1])\n    y_pred_test += pd.DataFrame(clf_lgbm3.predict_proba(X_test2)[:,1]).rank()\/20\n    y_pred = (1\/4)*(y_pred_lgbm0.rank() + y_pred_lgbm1.rank() + y_pred_lgbm2.rank() + y_pred_lgbm3.rank())\/len(y_pred_lgbm1)\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n    print('CV Score of Fold_%d is %f' % (i, score))","0a1babfb":"print(np.mean(scores))\nprint(scores)","e6bb10c9":"# # \u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3001test\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3059\u308b\n# clf = GradientBoostingClassifier(random_state=71,n_estimators=170,max_depth=3,learning_rate=0.1)\n# clf.fit(X_train2, y_train)\n\n# y_pred = clf.predict_proba(X_test2)[:,1]","f2699eba":"y_pred = y_pred_test\/len(y_pred_test)","71cbdc21":"y_pred.index = X_test2.index","e3e95d56":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\n# \u3053\u3061\u3089\u3082\u30b9\u30e0\u30fc\u30ba\u306a\u9032\u884c\u306e\u305f\u3081\u306b20\u5206\u306e\uff11\u306b\u9593\u5f15\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u672c\u756a\u3067\u306f\"skiprows=lambda x: x%20!=0\"\u3092\u524a\u9664\u3057\u3066\u7528\u3044\u3066\u304f\u3060\u3055\u3044\u3002\nsubmission = pd.read_csv('..\/input\/homework-for-students2\/sample_submission.csv', index_col=0)\n\nsubmission.loan_condition = y_pred\nsubmission.to_csv('submission.csv')","37908400":"## mths_since_last_delinq","64dd0b23":"## emp_title","6f0486f8":"## collections_12_mths_ex_med","e2e49744":"## grade_loan_amnt","ea4773f3":"# \u7279\u5fb4\u91cf\u30a8\u30f3\u30b8\u30cb\u30a2\u30ea\u30f3\u30b0","05db8e2e":"## pub_rec","c0441222":"## tot_cur_bal","3967f64f":"## annual_inc","b043c010":"## emp_length","0924dad5":"## mths_since_last_record","df2cd973":"## earliest_cr_line","144fb0a9":"## annual_inc","6c7aa563":"## new_grade","eca713b9":"## loan_by_installment","8321781e":"## title","2fa51f62":"## loan_by_inc","ce920bad":"## inq_last_6mths","9210500b":"## rate_purpose","6b95775d":"## tot_coll_amt","6c77541f":"## dti_by_zip_code","96202c9c":"## installment_by_inc","6217190d":"## dti","52a2a140":"## revol_util","fa3b5e4d":"## rate_home_ownership","11032cd4":"## \u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","03b81338":"## rate_addr_state","2e827faa":"# \u6b20\u640d\u5024","ca32c51f":"## delinq_2yrs","6accef29":"## total_acc","69879ae8":"## count_issue_d","54e87767":"## category_loan_amnt","a5c3977f":"## diff_loan_mean_loan_purpose","aa25130a":"## acc_now_delinq","edfe1fb8":"## mths_since_last_major_derog","c0d9d3f8":"## mean_loan_purpose","e39642b1":"## emp_length","851169bf":"## issue_d","5e84f547":"## zip_code","016695e6":"## earliest_cr_line_year","61a0aed3":"# \u30e2\u30c7\u30ea\u30f3\u30b0","905e24f1":"## rate_zip_code","1621a99a":"## open_acc"}}