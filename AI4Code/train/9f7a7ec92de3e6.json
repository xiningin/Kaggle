{"cell_type":{"a1dce1f1":"code","4b522a40":"code","db7b5916":"code","75363e3d":"code","3182cae0":"code","d10a9b61":"code","f80e410c":"code","bd79ed8b":"code","1d3511be":"code","0085cbfa":"code","4aeb5018":"code","e28db989":"code","e66a8c55":"code","71d0619c":"code","3ef48685":"code","d9072ad5":"code","e7963234":"code","dd592374":"code","2c2172c0":"code","d0831ab2":"code","15667e71":"code","cfa9db14":"code","559c1691":"code","cbbe0bf0":"markdown","c9c70735":"markdown","cccb0564":"markdown","d02b75d2":"markdown","1ef35c13":"markdown"},"source":{"a1dce1f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4b522a40":"# the of our data is 'data'\ndata = pd.read_csv('..\/input\/pokemon.csv')","db7b5916":"# information about our data\ndata.info()","75363e3d":"# corelation between datas\ndata.corr()","3182cae0":"#correlation map\nf,ax = plt.subplots(figsize=(14, 14))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","d10a9b61":"# to see top 5 data\ndata.head()","f80e410c":"data.columns","bd79ed8b":"# Scatter Plot \n# x = attack, y = defense\ndata.plot(kind='scatter', x='Attack', y='Defense',alpha = 0.8,color = 'cyan')\nplt.xlabel('Attack')              # label = name of label\nplt.ylabel('Defence')\nplt.title('Attack Defense Scatter Plot')            # title = title of plot","1d3511be":"# Line Plot\n# To seperate plots we have used plt.subplot()\nplt.subplot(2,1,1)\ndata.Attack.plot(kind='line', color='red', label='Attack', grid=True, alpha=1, linestyle='-.')\nplt.legend(loc='upper right')\nplt.xlabel('No')\nplt.ylabel('Attack')\n\nplt.subplot(2,1,2)\ndata.HP.plot(kind='line', color='purple', label='HP', linestyle='-')\nplt.legend(loc='upper right')\nplt.ylabel('HP')\n\n","0085cbfa":"# Histogram plot\ndata.Generation.plot(kind='hist', color='green', label='Generation', bins=20, figsize=(9,9))\nplt.show()","4aeb5018":"# to clean the plot use .clf()\ndata.Speed.plot(kind='line')\nplt.clf()","e28db989":"# Example\ndictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","e66a8c55":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\n\n# to add elements\ndictionary['turkey'] = 'istanbul'\ndictionary['greece'] = 'athens'\n\n# to see keys and values\ndictionary.items()","71d0619c":"#to delete item\ndel dictionary['spain']              # remove entry with key 'spain'\ndictionary.items()","3ef48685":"# to check item\nprint('something' in dictionary)     # False: it means that there is no 'something'","d9072ad5":"# to update 2 dictionaries\ndictionary.items()\n# 2nd dictionary\ndict2 = {'Italy': 'Rome',\n         'France': 'Paris',\n        'usa': 'toronto'}\n# update\ndictionary.update(dict2)\ndictionary.items()","e7963234":"# delete dictionary\ndel dictionary\n# it gives error, becasue the dictionary has been deleted \nprint(dictionary)","dd592374":"# if we write a comparison statement into the print function, it will give us truth of that\n# for example\nprint(2==3) # False\nprint(5==5) # True\nprint(6<8) # True\nprint(6<=8) # True\nprint(3!=1) # True\nprint(7>3) # True\nprint(6!=6) # False","2c2172c0":"# we can use this info also in the if - while statements\nif 5<6:\n    print('it is true')\nelse: \n    print('it is false')","d0831ab2":"# 1) pokemons who have higher defense value than 190\nstrong_pokemons = data.Defense > 190\ndata[strong_pokemons]","15667e71":"# 2) To use two conditions: There are only 2 pokemons who have higher defence value than 199 and higher attack value than 120\n# using numpy logical_and module\nawesome_pokemons = np.logical_and(data.Defense > 199, data.Attack > 120)\ndata [awesome_pokemons]","cfa9db14":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i < 4 :\n    print('i is: ',i)\n    i +=1 \nprint('i is outside while loop and equal to {}'.format(i))","559c1691":"# Stay in loop if i is in listt\nlistt = [1,2,3,4,5]\nfor i in listt:\n    print('i is: {}'.format(i))\nprint('*'*30)\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index,value in enumerate(listt):\n    print('index: {} value: {}'.format(index, value))\nprint('*'*30)   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We have learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key, value in dictionary.items():\n    print('dictionary key is: {}'.format(key), end=' ')\n    print('dictionary value for this key is: {}'.format(value))\nprint('*'*30)\n\n# For pandas we can achieve index and value\nfor index, value in data.Defense[0].iterrows():\n    print('index: {} and value: {} of the first defense value'.format(index,value))","cbbe0bf0":"**Comparison Operators**\nequal: ==\ngreater than: >\nsmaller than: <\nnot equal: !=\ngreater than or equal to: >=","c9c70735":"**How to Read Data**\n- we will use pandas\n-method: read_csv('the path of the data folder')","cccb0564":"**WHILE and FOR LOOPS**\nsome basic loops","d02b75d2":"**Dictionary**\n*-Importance*: Similar to Datasets and therefore easy to analyse\n**Some functions that can be used for dictionaries**\n-keys()\n-values()\n-items()\n-del\n-clear()\n-update()\n\n","1ef35c13":"***filtering data using pandas***"}}