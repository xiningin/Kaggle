{"cell_type":{"18acf079":"code","102d3cfa":"code","c1a88f6a":"code","3f02a2b9":"code","63b5b5da":"code","df1de3ec":"code","b33c5705":"code","f979d335":"code","cd82a897":"code","ec87107c":"code","ed8746f0":"code","79876eb2":"code","5f67a9c7":"code","44a3dcfc":"code","462171d7":"code","ccc9ea19":"markdown","9ef26522":"markdown","86db7e97":"markdown","b0e01f33":"markdown","e826e07b":"markdown","531aff19":"markdown","a95ceb20":"markdown","5c44a06b":"markdown","66e5291b":"markdown","e7cd7ea5":"markdown","fa809420":"markdown","9f3d2407":"markdown","4edb8779":"markdown","14b87453":"markdown","2e597679":"markdown","a221bc97":"markdown","3f402da3":"markdown"},"source":{"18acf079":"# install these libraries if you don't already have them\n# !pip install facebook_scraper\n# !pip install vaderSentiment\n# !pip install openpyxl\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom collections import defaultdict\nfrom collections.abc import Iterable\nfrom facebook_scraper import get_posts \nfrom vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer\nfrom wordcloud import WordCloud, STOPWORDS\nimport spacy\nfrom spacy.matcher import PhraseMatcher\nimport statsmodels.api as sm","102d3cfa":"listposts = []\n\nfor post in get_posts('TransportForNSW', \n                      pages=3,\n                      options={'comments': True}):\n    listposts.append(post)\n    \nprint('Number of posts: {}'.format(len(listposts)))    ","c1a88f6a":"columns = ['post_id', \n           'time',  \n           'text', \n           'likes',\n           'comments', \n           'shares', \n           'comments_full']\n\ndf_posts = pd.DataFrame(listposts)[columns]","3f02a2b9":"analyzer = SentimentIntensityAnalyzer()\n\nlist_comments = []\nfor index, row in df_posts.iterrows():\n    post_id = row['post_id']\n    if isinstance(row['comments_full'], Iterable):\n        for comment in row['comments_full']:\n            dict_temp = {}\n            dict_temp['post_id'] = post_id\n            dict_temp['comment'] = comment['comment_text']\n            dict_temp['sentiment'] = analyzer.polarity_scores(\n                comment['comment_text'])['compound']\n            list_comments.append(dict_temp)        \n\ndf_comments = pd.DataFrame(list_comments)","63b5b5da":"posts_sentiment = df_comments.groupby('post_id').mean()\n\ndf_posts = df_posts.join(posts_sentiment, on=['post_id'])\n\ndf_posts.drop(columns=['comments_full'], inplace=True)\ndf_posts.fillna(0.0, inplace=True)\n\nwith pd.ExcelWriter('..\/TfNSW_FB_new.xlsx') as writer:\n    df_posts.to_excel(writer, sheet_name='posts_data', index_label='ID')\n    df_comments.to_excel(writer, sheet_name='posts_comments', index_label='ID')\n    ","df1de3ec":"# Load data from exisiting files to save time\ndf_posts = pd.read_excel('..\/input\/facebook-posts-transport-for-nsw\/TfNSW_FB.xlsx', sheet_name='posts_data')\ndf_comments = pd.read_excel('..\/input\/facebook-posts-transport-for-nsw\/TfNSW_FB.xlsx', sheet_name='posts_comments')","b33c5705":"# print out dataframe for posts \ndf_posts.head()","f979d335":"# print out dataframe for comments \ndf_comments.head()","cd82a897":"# merge all texts in posts\npost_text = ' '.join(df_posts['text'])\npost_text = post_text.replace('\\n', '') # remove blank lines characters\n\n# update stopwords\nstopwords = set(STOPWORDS)\nstopwords.update(['https', 'gov', 'au', 'nsw', 's', 're'])\n\n# Generate a word cloud image\nwordcloud = WordCloud(random_state=1, \n                      collocations=True, \n                      stopwords=stopwords,\n                      max_words=60,\n                      background_color='black',\n                      colormap ='rainbow',\n                      contour_color='steelblue').generate(post_text)\n\n# Function to display word cloud img via matplotlib\ndef plot_cloud(wordcloud):\n    plt.figure(figsize=(10, 6))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis('off')\n\n# plot world cloud    \nplot_cloud(wordcloud)","ec87107c":"# list of common products \/ services\nproducts = ['train', 'bus', 'ferry', 'light rail', 'metro', \n            'road', 'bridge', 'westconnex', 'walk', 'cycling']\n\n# Load the SpaCy model\nnlp = spacy.load(\"en_core_web_sm\")\n\n# Create the PhraseMatcher object. The tokenizer is the first argument. Use attr = 'LOWER' to make consistent capitalization\nmatcher = PhraseMatcher(nlp.vocab, attr='LOWER')\n\n# Only run nlp.make_doc to speed things up\nprod_tokens = [nlp.make_doc(text) for text in products]\n\n# Add the item patterns to the matcher\nmatcher.add(\"TfNSWProducts\", prod_tokens)","ed8746f0":"# Use defaultdict to create dictionary of sentiment scores by product\n# If a key doesn't exist in item_ratings, the key is added with an empty list as the value.\nproduct_sentiment = defaultdict(list)\nproduct_likes = defaultdict(list)\n\n# add sentiment scores from posts to each product\nfor idx, post in df_posts.iterrows():\n    doc = nlp(post.loc['text'])\n    \n    # Using the matcher created before\n    matches = matcher(doc)\n    \n    # Create a set of the items found in the review text\n    found_products = set()\n    for match_id, start, end in matches:\n        product = doc[start:end].text.lower() # remove case sensitives\n        found_products.add(product)\n    \n    # add sentiment scores to each products found in post\n    for product in found_products:\n        product_sentiment[product].append(post.sentiment)\n        product_likes[product].append(post.likes)","79876eb2":"# Calculate the mean sentiment score for each product\nmean_sentiment = {}\n\nfor product, score in product_sentiment.items():\n    avg_score = sum(score) \/ len(score)\n    mean_sentiment[product] = avg_score\n\n# create dataframe for sentiment scores by product    \ndf_prod_sentiment = pd.DataFrame(mean_sentiment, index=['sentiment']).transpose()\ndf_prod_sentiment = df_prod_sentiment.sort_values(by=['sentiment'], ascending=False)\n\n# plot sentiment score by products\ndf_prod_sentiment.plot(kind='bar', legend=False, ylabel='Sentiment score')","5f67a9c7":"# Calculate the avg number of likes  for each product\nmean_likes = {}\n\nfor product, likes in product_likes.items():\n    avg_likes = sum(likes) \/ len(likes)\n    mean_likes[product] = avg_likes\n\n# create dataframe for sentiment scores by product    \ndf_prod_likes = pd.DataFrame(mean_likes, index=['likes']).transpose()\ndf_prod_likes = df_prod_likes.sort_values(by=['likes'], ascending=False)\n\n# plot sentiment score by products\ndf_prod_likes.plot(kind='bar', legend=False, ylabel='Number of Likes')","44a3dcfc":"df_posts_new = df_posts # create a new df to incorporate new features\n\n# create df for product term counts by FB posts\ndf_product_terms = pd.DataFrame(columns=products, index=df_posts_new.index)\ndf_product_terms.fillna(0, inplace=True) # remove NA in order to add increments\n\n# count product term matches for each posts\nfor idx, post in df_posts_new.iterrows():\n    doc = nlp(post.loc['text'])\n    \n    # Using the matcher created before\n    matches = matcher(doc)\n    \n    # Create a set of the items found in the review text\n    for match_id, start, end in matches:\n        product = doc[start:end].text.lower() # remove case sensitives\n        df_product_terms.loc[idx, product] += 1","462171d7":"# add product term counts to df\ndf_posts_new = df_posts_new.join(df_product_terms)\n\n# predictors and target variable\nfeatures = ['likes', 'comments', 'shares'] + products\nX = df_posts_new[features]\ny = df_posts_new['sentiment']\n\n# fit OLS model using statmodels api\nX = sm.add_constant(X, prepend=False) # add constant term\nmodel = sm.OLS(y, X).fit()\nprint(model.summary())","ccc9ea19":"* On average, posts related to 'walk' has the highest sentiment score at 0.12 (slightly possitive). Followed by 'Light rail' and 'Metro'.","9ef26522":"# Data Processing","86db7e97":"* Using OLS model to identify which characteristics of FB Posts are good predictors for sentiment scores (for Transport NSW  public page)\n* I decided to use parametric model for explainability. OLS is chosen for quick computational time.","b0e01f33":"## Statistical model for Transport for NSW FB Post's Sentiment","e826e07b":"# Scrape posts and comments from Facebook\n\n* Set **'comments' = True or a number (limit)** to scrape post comments\n* Increase pages to capture more posts\n* Doc for importing posts from public facebook page: https:\/\/github.com\/kevinzg\/facebook-scraper","531aff19":"# Text Analysis with Spacy - Popularity of Products \/ Services\n* Which TfNSw services \/ products are liked the most and the least?","a95ceb20":"* Copy Raw Facebook posts data into dataframe\n* Select only columns to be used for text analysis","5c44a06b":"*There are much more we could do with rich text data from these FB posts. Please feel free to make a suggestion here or come up with your own way of analysis!*\n\n*Thank you for reading!*","66e5291b":"* The below code shows routine for OLS model fit using statsmodels.api\n* Based on p-values, **number of likes and comments** are strong predictors of sentiment scores, as well as number of mentions for the following modes: **light rail, road, bridge, walk**.","e7cd7ea5":"* On average, posts related to 'bus' have highest number of likes (~60). Followed by 'Metro' and 'Ferry'.\n* Coincidentally, these modes typically have highest Customer Satisfaction ratings - per publication from TfNSW's annual surveys.","fa809420":"# Import Libraries","9f3d2407":"* Create new data frame for all FB comments\n* Add sentiment scores from VADER library\n* Documentation for VADER sentiment scores: https:\/\/github.com\/cjhutto\/vaderSentiment","4edb8779":"# Introduction\n\nThis is an example workflow for *extracting Facebook posts and performing sentiment and other text-based analysis* on those posts. This routine can be used for any public Facebook page - and could be useful for understanding responses, sentiment of customers \/ audience toward company products or public issues.\n\nIn this example, I am using Transport for NSW public page - which happens to be where I work :) Here are some of the key features:\n* Extracting FB posts and comments using **facebook_scraper**\n* Sentiment scores using **vaderSentiment** (specialised in social media sentiment)\n* Sentiment analysis for key products \/ services using **Spacy** library\n* Use linear OLS model to investigate which posts' characteristics are strong predictors of sentiment using **statsmodels.api**","14b87453":"* Generate word cloud for all post texts","2e597679":"# Texts Summary - Word Cloud analysis","a221bc97":"* Calculate mean comments' sentiment scores for each posts\n* Add post sentiment data to data frame\n* Save all data to Excel file - for later use","3f402da3":"## Sentiment scores and likes - based on content from FB Posts "}}