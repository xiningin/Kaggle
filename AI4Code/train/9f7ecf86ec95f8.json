{"cell_type":{"cdf2247b":"code","9e34c7fb":"code","f7096130":"code","bc3c64df":"code","5aa693a3":"code","886f1a34":"markdown","030e246e":"markdown","2bf8c6cf":"markdown","94d06536":"markdown","46c37bad":"markdown","8db5902c":"markdown"},"source":{"cdf2247b":"#Notice the colour change for Boolean type\n\nx = True\ny = False \nprint(x)\nprint(y)\nprint(type(x))","9e34c7fb":"# Your code goes here try some comparison operations\nx = 3\nprint(x == 3)\n\nprint(x > 6)\n\ny = 45\nprint(y != 45)\n\nprint(6.0 == 6)\n\nprint('6' == 6)","f7096130":"# Your code goes here\nx = True\ny = False \nprint(x and y)\n\nx = True\ny = False\nprint(x or y)\n\ny = True\n\nprint(x and y)\n\nprint(not x)\n\nx = 5\ny = 6\nprint(x == 7 or y < 2)","bc3c64df":"# Your code goes here try different values of x and see what you get\nx = 5\n#x = - 2\n#x = \"Howdy\"\n\nif x == 0:\n    print(x, \"is zero\")\nelif x > 0:\n    print(x, \"is positive\")\nelif x < 0:\n    print(x, \"is negative\")\nelse:\n    print(x, \"is unlike anything I've ever seen...\")","5aa693a3":"# Your code goes here \n\nx = 35\n\nif(x % 3 == 0 and x % 5 == 0):\n    print(\"FizzBuzz\")\nelif (x % 3 ==0):\n    print(\"Fizz\")\nelif (x % 5 ==0):\n    print(\"Buzz\")\nelse:\n    print(\"Not a multiple of neither 3 nor 5\")","886f1a34":" # Cafe 4 - Booleans and Conditionals","030e246e":"# 4. Conditionals\nWhile useful enough in their own right, booleans really start to shine when combined with conditional statements, using the keywords `if`, `elif`, and `else`.\n\nConditional statements, often referred to as if-then statements, allow the programmer to execute certain pieces of code depending on some Boolean condition. A basic example of a Python conditional statement is this:","2bf8c6cf":"# 1. Boolean Types\n| Name           | Type   | Description                                                  |\n|----------------|--------|--------------------------------------------------------------|\n| Integer        | Int    |Whole numbers: 45, -5, 670                                    |\n| Float          | Float  |Numbers with a decimal point: 2.3, 4.6, 100.0                 |\n| String         | Str    |Ordered sequence of characters: \u201cSammy\u201d, \u201cHello\u201d, \u201c2000\"      |\n| **Boolean**    | **Bool**   |**Logical value (True or False)**                         |\n| List           | List   |Ordered sequence of objects: [10, \u201chello\u201d, 200.5]             |\n| Dictionarie    | Dict   |Unordered Key\/value pairs: {\u201ckey\u201d: \u201cvalue\u201d, \u201cname\u201d: \u201cFrankie\u201d}|\n| Tuple          | Tup    |Ordered immutable sequence of objects: (10, \u201chello\u201d, 200.5)   |\n| Set            | Set    |Unordered collection of unique objects: {\u201ca\u201d, \u201cb\u201d}            |\n\n<span style=\"display:none\"><\/span>\n\n","94d06536":"# Putting It All Together\n\nWrite a Python program that creates a variable, stores a number of your choice and and does the following checks:\n\n#For a multiple of 3, print \"Fizz\"\n#For a multiple of 5, print \"Buzz\"\n#For a multiple of both 3 and 5, print \"FizzBuzz\"\n\n","46c37bad":"# 3. Boolean Logic \n\n[https:\/\/medium.com\/i-math\/intro-to-truth-tables-boolean-algebra-73b331dd9b94](http:\/\/)\n\n| X            | Y              |      X AND Y    |      X OR Y     | NOT X|\n|--------------|----------------|------------------------------------------|\n| ``False``    | ``False``      | ``False``       | ``False``  | ``True`` |\n| ``False``    | ``True``       | ``False``       | ``True``   | ``True`` |\n| ``True``     | ``False``      | ``False``       | ``True``   | ``False``|\n| ``True``     | ``True ``      | ``True``         | ``True``  | ``False``|\n\n<span style=\"display:none\"><\/span>","8db5902c":"# 2. Comparison Operations \n\nRather than putting True or False directly in our code, we usually get boolean values from boolean operators. These are operators that answer yes\/no questions. We'll go through some of these operators below. Comparison operations compare two values or variables and ONLY return a boolean type - True or False. \n\n| Operator     | Description               | \n|--------------|---------------------------|\n| ``a == b``   | a equal to b              | \n| ``a != b``   | a not equal to b          | \n| ``a < b``    | a less than b             | \n| ``a <= b``   | a less than or equal to b |\n| ``a > b``    | a greater than b          | \n| ``a >= b``   | a greater than or equal to b | \n\n"}}