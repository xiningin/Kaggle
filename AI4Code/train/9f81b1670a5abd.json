{"cell_type":{"a22797ce":"code","f8c8978b":"code","3c627021":"code","6114f1fa":"code","eccd7ff7":"code","05c567b2":"code","0c5d2846":"code","f2965e42":"code","4342121e":"code","ab908e0a":"code","3e36f0f1":"code","1571546d":"code","f59be581":"code","417cae9b":"markdown"},"source":{"a22797ce":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport torch\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8c8978b":"train = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntrain.head()\ntest.head()","3c627021":"y_label = train['label']\ntrain = train.drop('label',axis =1)\ny_label.head()","6114f1fa":"print(y_label.shape)\nprint(train.shape)","eccd7ff7":"#normalize\ntrain_n = (train\/255)-0.5\ntest_n = (test\/255)-0.5\nXtrain = train_n.values.reshape(-1,28,28,1)\nXtest = test_n.values.reshape(-1,28,28,1)\nprint(Xtrain.shape)\nprint(Xtest.shape)","05c567b2":"y_dummy = pd.get_dummies(y_label)\ny_dummy.shape","0c5d2846":"from keras.models import Sequential\nfrom keras.layers import Input, Add, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=3, activation='relu', input_shape=(28, 28, 1)))\nmodel.add(Conv2D(64, kernel_size=3, activation='relu'))\nmodel.add(Flatten())\nmodel.add(Dense(10, activation='softmax'))","f2965e42":"model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])","4342121e":"model.fit(Xtrain,y_dummy,epochs=3,batch_size=64)","ab908e0a":"final = model.predict(Xtest)\nfinal.shape","3e36f0f1":"final = np.argmax(final,axis=1)\nfinal.shape","1571546d":"submission = pd.DataFrame({'Label':final,'ImageId':pd.Series(range(1,28001))})\nsubmission.head()","f59be581":"submission.to_csv('DigitRecCNN',index=False)","417cae9b":"#reading the data\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\ntrain.head()\ntest.head()"}}