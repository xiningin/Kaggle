{"cell_type":{"026ea675":"code","c3ad6029":"code","3cbdc37a":"code","0242bda9":"code","551b94c2":"code","17977b3e":"code","89e47064":"code","91047956":"code","6550958b":"code","cc9cb07a":"code","21c225bc":"code","530d2f6b":"code","39767d88":"code","6da1a912":"code","253cb79a":"code","885bcb43":"code","d8d974f6":"code","d7515b32":"code","1efb0d17":"code","e7c00654":"code","905dac30":"code","d24805a5":"code","17b98df1":"code","8cf170e4":"code","a87d5fa2":"code","b351b594":"code","473e66b1":"code","942aca6b":"code","9b24ab9f":"code","3798e7dd":"code","857d706e":"code","0de40cbe":"code","4f6936a5":"code","8a3da38f":"code","981055ab":"code","7b396309":"code","9ac393db":"code","a4661543":"code","641b44f4":"code","793066e9":"code","66ff4716":"code","fc7cef77":"code","3460335c":"code","42fa6924":"code","5ab3c247":"code","8ac9103a":"code","eb43df07":"code","6be37946":"code","d38d475e":"code","46e7e29f":"code","a300f091":"code","0a1c7c9c":"code","14a0fedf":"code","a308f314":"code","3f6b5c69":"code","b6f056eb":"code","0d168f5d":"code","e4807885":"code","8af8ec26":"code","f8a8004b":"code","a358dd7f":"code","75268725":"code","dc8a177d":"code","7b2a3258":"code","f5460bf9":"code","2b17720e":"code","d2e08ba2":"code","6d2d5d8c":"code","12c95bb9":"code","5f4ef211":"code","5fad8948":"code","579d8ec9":"code","ac551251":"code","9d86b454":"code","e5a440c0":"code","67e665f6":"code","da8347c7":"code","c73fd54b":"code","bb92b6a2":"code","8cf5ab7a":"code","16102290":"code","088f1c6f":"code","21c874fc":"code","d8721fca":"code","93515e97":"code","fce6b8e8":"code","922667ad":"code","8ec12214":"code","e13d1693":"code","888e5e45":"code","6107a149":"code","34a443a8":"code","bc5eda76":"code","8db30fee":"code","0c402656":"code","829cdf1b":"code","bf984c57":"code","d6bb5285":"code","c8de880a":"code","4cbf5b64":"code","a8add2c6":"code","1d5c7fed":"code","c89469e4":"code","d3732581":"code","2fc42126":"code","69dcc090":"code","f2270763":"code","18645bc1":"code","dea5a9bb":"code","434eb625":"code","65c05b57":"code","ca65fae1":"code","b318901c":"code","44bc1078":"code","4bf8f977":"code","1dd3643b":"code","02a4c677":"code","e1b3cbb2":"code","a15ffeb3":"code","7e86c43c":"code","a5b0147e":"code","dbb55492":"code","ecf6f1db":"code","b4c1c3fd":"code","7af8d363":"markdown","29460134":"markdown","5374cd84":"markdown","8deda46b":"markdown","02bade99":"markdown","ffe6b95e":"markdown","6a65e3c4":"markdown","453cb6c5":"markdown","64d8db93":"markdown","a2f38717":"markdown","73f8e7e0":"markdown","3c18fe35":"markdown","c06cd024":"markdown","9f0ddfec":"markdown","1dc4979c":"markdown","441e8788":"markdown","f7888aeb":"markdown","ea4484ed":"markdown","964a3cf7":"markdown","3d63216e":"markdown","9da4342f":"markdown","04c380c0":"markdown","9587e54e":"markdown","37d880de":"markdown","8a047264":"markdown","fff968c5":"markdown","4a01f1b2":"markdown","9cd0738a":"markdown","3da64b13":"markdown","3f959ec5":"markdown","5bcbcbfb":"markdown","cde9018e":"markdown","6f0f46c8":"markdown","a0650a72":"markdown","75747c14":"markdown","a69e80e7":"markdown","db31b1e7":"markdown","6e37245f":"markdown","9ff04b33":"markdown","8db1eb52":"markdown","02d43b16":"markdown","176e543f":"markdown","a31f8aef":"markdown","0e69ec6d":"markdown","4683f1d2":"markdown","054e0acb":"markdown","623b4319":"markdown","5b8c5479":"markdown","ea76db44":"markdown","f2d55ce2":"markdown","e6fe2723":"markdown","eb848fce":"markdown","73312e21":"markdown","150f5451":"markdown","f90b672d":"markdown","c60b6f90":"markdown","51ac71f7":"markdown","f46161c6":"markdown","2b3a9618":"markdown","4547a018":"markdown","a428039a":"markdown","f8f097ba":"markdown","c081a321":"markdown","953534e9":"markdown","6b0646e1":"markdown"},"source":{"026ea675":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import preprocessing\n\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\n\nfrom string import punctuation\nimport datetime\nimport re","c3ad6029":"from IPython.display import Image\nimport os\n!ls ..\/input\/","3cbdc37a":"train_df = pd.read_csv(\"..\/input\/nfl-big-data-bowl-2020\/train.csv\", low_memory=False)\ntrain_df.head()","0242bda9":"# https:\/\/www.kaggle.com\/kabure\/extensive-eda-and-modeling-xgb-hyperopt\n\ndef resumetable(df):\n    print(f\"Dataset Shape: {df.shape}\")\n    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n    summary['First Value'] = df.loc[0].values\n    summary['Second Value'] = df.loc[1].values\n    summary['Third Value'] = df.loc[2].values\n\n    for name in summary['Name'].value_counts().index:\n        summary.loc[summary['Name'] == name, 'Entropy'] = round(stats.entropy(df[name].value_counts(normalize=True), base=2),2) \n\n    return summary\n\n## Function to reduce the DF size\ndef reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n","551b94c2":"resumetable(train_df)[:]","17977b3e":"## Reducting memory\ntrain_df = reduce_mem_usage(train_df)","89e47064":"train_df.shape","91047956":"print(\"Total number of games : \",train_df.GameId.nunique())\nprint(\"Total number of HandOff's : \",train_df.PlayId.nunique())\nprint(\"Total number of uniq players : \", train_df.NflId.nunique())","6550958b":"### Checking Train data sorted by PlayId and Team.\n\n# https:\/\/www.kaggle.com\/hukuda222\/nfl-simple-model-using-lightgbm\n\nok = True\nfor i in range(0,509762,22):\n    p=train_df[\"PlayId\"][i]\n    for j in range(1,22):\n        if(p!=train_df[\"PlayId\"][i+j]):\n            ok=False\n            break\nprint(\"train data is sorted by PlayId.\" if ok else \"train data is not sorted by PlayId.\")\nok = True\nfor i in range(0,509762,11):\n    p=train_df[\"Team\"][i]\n    for j in range(1,11):\n        if(p!=train_df[\"Team\"][i+j]):\n            ok=False\n            break\n            \nprint(\"train data is sorted by Team.\" if ok else \"train data is not sorted by Team.\")","cc9cb07a":"print(\"Total number of games : \",train_df.GameId.nunique())\nprint(\"Average number of HandOff's in every game : \", train_df.GameId.value_counts().mean())\nprint(\"Max number of HandOff's in one game : \", train_df.GameId.value_counts().max())\nprint(\"Min number of HandOff's in one game : \", train_df.GameId.value_counts().min())","21c225bc":"print(\"Total number of HandOff's : \",train_df.PlayId.nunique())\nprint(\"Every HandOff have \", int(train_df.PlayId.value_counts().mean()), \"Players Data\")","530d2f6b":"playId_groupby = train_df.groupby(\"PlayId\")","39767d88":"print(\"Total number of Teams :\", train_df.Team.value_counts())\nprint(\"Every PlayId have \", playId_groupby[\"Team\"].value_counts().max() , \"players from each category\")","6da1a912":"plt.figure()\nsns.countplot(train_df[\"Team\"])\nplt.title(\"Away and Home team countplot\")\nplt.show()","253cb79a":"print(\"Total number of positions of X : \", train_df.X.shape[0])\nprint(\"Total number of positions of Y : \", train_df.Y.shape[0])\nprint(\"*\"*50)\nprint(\"max of X : \", train_df.X.max())\nprint(\"max of Y : \", train_df.Y.max())\nprint(\"*\"*50)\nprint(\"min of X : \", train_df.X.min())\nprint(\"min of Y : \", train_df.Y.min())\nprint(\"*\"*50)\nprint(\"mean of X : \", train_df.X.values.mean())\nprint(\"mean of Y : \", train_df.Y.values.mean())","885bcb43":"plt.figure(figsize=(16,6))\nplt.subplot(121)\nsns.distplot(train_df.X)\nplt.vlines(train_df.X.values.mean(), plt.ylim()[0], plt.ylim()[1], color='r', linestyles='--');\nplt.text(train_df.X.values.mean()-8, plt.ylim()[1]-0.001, \"Mean of X\", size=15, color='r')\nplt.title(\"X axis Distribution\")\nplt.subplot(122)\nsns.distplot(train_df.Y)\nplt.vlines(train_df.Y.values.mean(), plt.ylim()[0], plt.ylim()[1], color='r', linestyles='--');\nplt.title(\"Y axis Distribution\")\nplt.text(train_df.Y.values.mean()-8, plt.ylim()[1]-0.003, \"Mean of Y\", size=15, color='r')","d8d974f6":"plt.figure(figsize=(16,12))\nsns.scatterplot(train_df[\"X\"], train_df[\"Y\"])\nplt.xlabel('X axis', fontsize=12)\nplt.ylabel('Y axis', fontsize=12)\nplt.title(\"Players positions\", fontsize=20)\nplt.show()","d7515b32":"# https:\/\/www.kaggle.com\/robikscube\/nfl-big-data-bowl-plotting-player-position\n\ndef create_football_field(linenumbers=True,\n                          endzones=True,\n                          highlight_line=False,\n                          highlight_line_number=50,\n                          highlighted_name='Line of Scrimmage',\n                          fifty_is_los=False,\n                          figsize=(12*2, 6.33*2)):\n    \"\"\"\n    Function that plots the football field for viewing plays.\n    Allows for showing or hiding endzones.\n    \"\"\"\n    rect = patches.Rectangle((0, 0), 120, 53.3, linewidth=0.1,\n                             edgecolor='r', facecolor='darkgreen', zorder=0)\n\n    fig, ax = plt.subplots(1, figsize=figsize)\n    ax.add_patch(rect)\n\n    plt.plot([10, 10, 10, 20, 20, 30, 30, 40, 40, 50, 50, 60, 60, 70, 70, 80,\n              80, 90, 90, 100, 100, 110, 110, 120, 0, 0, 120, 120],\n             [0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3,\n              53.3, 0, 0, 53.3, 53.3, 0, 0, 53.3, 53.3, 53.3, 0, 0, 53.3],\n             color='white')\n    if fifty_is_los:\n        plt.plot([60, 60], [0, 53.3], color='gold')\n        plt.text(62, 50, '<- Player Yardline at Snap', color='gold')\n    # Endzones\n    if endzones:\n        ez1 = patches.Rectangle((0, 0), 10, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ez2 = patches.Rectangle((110, 0), 120, 53.3,\n                                linewidth=0.1,\n                                edgecolor='r',\n                                facecolor='blue',\n                                alpha=0.2,\n                                zorder=0)\n        ax.add_patch(ez1)\n        ax.add_patch(ez2)\n    plt.xlim(0, 120)\n    plt.ylim(-5, 58.3)\n    plt.axis('off')\n    if linenumbers:\n        for x in range(20, 110, 10):\n            numb = x\n            if x > 50:\n                numb = 120 - x\n            plt.text(x, 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white')\n            plt.text(x - 0.95, 53.3 - 5, str(numb - 10),\n                     horizontalalignment='center',\n                     fontsize=20,  # fontname='Arial',\n                     color='white', rotation=180)\n    if endzones:\n        hash_range = range(11, 110)\n    else:\n        hash_range = range(1, 120)\n\n    for x in hash_range:\n        ax.plot([x, x], [0.4, 0.7], color='white')\n        ax.plot([x, x], [53.0, 52.5], color='white')\n        ax.plot([x, x], [22.91, 23.57], color='white')\n        ax.plot([x, x], [29.73, 30.39], color='white')\n\n    if highlight_line:\n        hl = highlight_line_number + 10\n        plt.plot([hl, hl], [0, 53.3], color='yellow')\n        plt.text(hl + 2, 50, '<- {}'.format(highlighted_name),\n                 color='yellow')\n    return fig, ax\n\ncreate_football_field()\nplt.show()","1efb0d17":"# https:\/\/www.kaggle.com\/sudalairajkumar\/simple-exploration-notebook-nfl\n\nimport math\ndef get_dx_dy(angle, dist):\n    cartesianAngleRadians = (450-angle)*math.pi\/180.0\n    dx = dist * math.cos(cartesianAngleRadians)\n    dy = dist * math.sin(cartesianAngleRadians)\n    return dx, dy\n\nplay_id = 20181007011551\nfig, ax = create_football_field()\ntrain_df.query(\"PlayId == @play_id and Team == 'away'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='orange', s=50, legend='Away')\ntrain_df.query(\"PlayId == @play_id and Team == 'home'\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='blue', s=50, legend='Home')\ntrain_df.query(\"PlayId == @play_id and NflIdRusher == NflId\") \\\n    .plot(x='X', y='Y', kind='scatter', ax=ax, color='red', s=100, legend='Rusher')\nrusher_row = train_df.query(\"PlayId == @play_id and NflIdRusher == NflId\")\nyards_covered = rusher_row[\"Yards\"].values[0]\n\nx = rusher_row[\"X\"].values[0]\ny = rusher_row[\"Y\"].values[0]\nrusher_dir = rusher_row[\"Dir\"].values[0]\nrusher_speed = rusher_row[\"S\"].values[0]\ndx, dy = get_dx_dy(rusher_dir, rusher_speed)\n\nax.arrow(x, y, dx, dy, length_includes_head=True, width=0.3)\nplt.title(f'Play # {play_id} and yard distance is {yards_covered}', fontsize=20)\nplt.legend()\nplt.show()\n","e7c00654":"print(\"Total number of  S : \", train_df.S.shape[0])\nprint(\"Total number of  A : \", train_df.A.shape[0])\nprint(\"*\"*50)\nprint(\"max of S : \", train_df.S.max())\nprint(\"max of A : \", train_df.A.max())\nprint(\"*\"*50)\nprint(\"min of S : \", train_df.S.min())\nprint(\"min of A : \", train_df.A.min())\nprint(\"*\"*50)\nprint(\"mean of S : \", train_df.S.values.mean())\nprint(\"mean of A : \", train_df.A.values.mean())","905dac30":"plt.figure(figsize=(16,6))\nplt.subplot(121)\nsns.distplot(train_df.S)\nplt.vlines(train_df.S.values.mean(), plt.ylim()[0], plt.ylim()[1], color='r', linestyles='--');\nplt.text(train_df.S.values.mean(), plt.ylim()[1]-0.01, \"Mean of S\", size=15, color='r')\nplt.title(\"Speed('S') Distribution\")\nplt.subplot(122)\nsns.distplot(train_df.A)\nplt.vlines(train_df.A.values.mean(), plt.ylim()[0], plt.ylim()[1], color='r', linestyles='--');\nplt.text(train_df.A.values.mean(), plt.ylim()[1]-0.02, \"Mean of A\", size=15, color='r')\nplt.title(\"Acceleration('A') Distribution\")\nplt.show()","d24805a5":"print(\"Total number of  Dis : \", train_df.Dis.shape[0])\nprint(\"*\"*50)\nprint(\"max of Dis : \", train_df.Dis.max())\nprint(\"*\"*50)\nprint(\"min of Dis : \", train_df.Dis.min())\nprint(\"*\"*50)\nprint(\"mean of Dis : \", train_df.Dis.values.mean())","17b98df1":"plt.figure(figsize=(16,6))\nsns.distplot(train_df.Dis)\nplt.vlines(train_df.Dis.values.mean(), plt.ylim()[0], plt.ylim()[1], color='r', linestyles='--');\nplt.text(train_df.Dis.values.mean(), plt.ylim()[1]-0.01, \"Mean of Dis\", size=15, color='r')\nplt.title(\"Distance(Dis) distribution\")\nplt.show()","8cf170e4":"print(\"Total number of  Orientation : \", train_df.Orientation.shape[0])\nprint(\"*\"*50)\nprint(\"max of Orientation : \", train_df.Orientation.max())\nprint(\"*\"*50)\nprint(\"min of Orientation : \", train_df.Orientation.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", train_df.Orientation.isna().sum())","a87d5fa2":"drop_na_Orientation = train_df.Orientation.dropna()","b351b594":"plt.figure(figsize=(16,6))\nsns.distplot(drop_na_Orientation)\nplt.vlines(drop_na_Orientation.values.mean(), plt.ylim()[0], plt.ylim()[1], color='r', linestyles='--');\nplt.text(drop_na_Orientation.values.mean(), plt.ylim()[1]-0.0002, \"Mean of Orienataion\", size=15, color='r')\nplt.title(\"Orientation distribution\")\nplt.show()","473e66b1":"print(\"Total number of  Dir : \", train_df.Dir.shape[0])\nprint(\"*\"*50)\nprint(\"max of Dir : \", train_df.Dir.max())\nprint(\"*\"*50)\nprint(\"min of Dir : \", train_df.Dir.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", train_df.Dir.isna().sum())","942aca6b":"drop_na_Dir = train_df.Dir.dropna()","9b24ab9f":"plt.figure(figsize=(16,6))\nsns.distplot(drop_na_Dir)\nplt.vlines(drop_na_Dir.values.mean(), plt.ylim()[0], plt.ylim()[1], color='r', linestyles='--');\nplt.text(drop_na_Dir.values.mean(), plt.ylim()[1]-0.0002, \"Mean of Dir\", size=15, color='r')\nplt.title(\"Direction(Dir) distribution\")\nplt.show()","3798e7dd":"print(\"Total number unique players : \", train_df.NflId.nunique())\nprint(\"*\"*50)\nprint(\"max number of times PlayId player id is : \", train_df.NflId.value_counts().index[0] , \"number of HandOffs is : \", train_df.NflId.value_counts().values[0])\nprint(\"*\"*50)\nprint(\"min number of times PlayId player id is : \", train_df.NflId.value_counts().index[-1] , \"number of HandOffs is : \", train_df.NflId.value_counts().values[-1])\nprint(\"*\"*50)\nprint(\"Number of missing values : \", train_df.NflId.isna().sum())","857d706e":"print(\"Total number unique player names : \", train_df.DisplayName.nunique())\nprint(\"*\"*50)\nprint(\"max of number of times PlayId player name is : \", train_df.DisplayName.value_counts().index[0] , \"number of HandOffs is : \", train_df.DisplayName.value_counts().values[0])\nprint(\"*\"*50)\nprint(\"min of number of times PlayId player name is : \", train_df.DisplayName.value_counts().index[-1] , \"number of HandOffs is : \", train_df.DisplayName.value_counts().values[-1])\nprint(\"*\"*50)\nprint(\"Number of missing values : \", train_df.DisplayName.isna().sum())","0de40cbe":"print(\"Total number unique player numbers : \", train_df.JerseyNumber.nunique())\nprint(\"*\"*50)\nprint(\"max of number of times PlayId player number is : \", train_df.JerseyNumber.value_counts().index[0] , \"number of HandOffs is : \", train_df.JerseyNumber.value_counts().values[0])\nprint(\"*\"*50)\nprint(\"min of number of times PlayId player number is : \", train_df.JerseyNumber.value_counts().index[-1] , \"number of HandOffs is : \", train_df.JerseyNumber.value_counts().values[-1])\nprint(\"*\"*50)\nprint(\"Number of missing values : \", train_df.JerseyNumber.isna().sum())","4f6936a5":"print(\"Total number unique seasons : \", train_df.Season.nunique())\n\nprint(\"Those are : \\n\", train_df.Season.value_counts())","8a3da38f":"train_dff = train_df[::22]\nprint(\"Total number of  YardLine : \", train_dff.YardLine.shape[0])\nprint(\"*\"*50)\nprint(\"max of YardLine : \", train_dff.YardLine.max())\nprint(\"*\"*50)\nprint(\"min of YardLine : \", train_dff.YardLine.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", train_dff.YardLine.isna().sum())","981055ab":"plt.figure()\nsns.distplot(train_dff.YardLine)\nplt.title(\"Distribution of YardLine\")\nplt.show()","7b396309":"Quarter = train_df.Quarter[: : 22]","9ac393db":"sns.countplot(Quarter)","a4661543":"GameClock = train_df.GameClock[::22]","641b44f4":"GameClock.value_counts()[:5]","793066e9":"train_df.loc[train_df['PossessionTeam'] == 'ARZ', 'PossessionTeam'] = 'ARI'\ntrain_df.loc[train_df['PossessionTeam'] == 'BLT', 'PossessionTeam'] = 'BAL'\ntrain_df.loc[train_df['PossessionTeam'] == 'CLV', 'PossessionTeam'] = 'CLE'\ntrain_df.loc[train_df['PossessionTeam'] == 'HST', 'PossessionTeam'] = 'HOU'","66ff4716":"PossessionTeam = train_df.PossessionTeam[::22]","fc7cef77":"plt.figure(figsize=(15,10))\nsns.countplot(y=PossessionTeam)\nplt.title(\"PossessionTeam countplot\")\nplt.show()","3460335c":"train_dff = train_df[::22]\nprint(\"Total number of  Downs : \", train_dff.Down.shape[0])\nprint(\"*\"*50)\nprint(\"max of HandOffs done on Down : \", train_dff.Down.value_counts().keys()[0], \" are : \",train_dff.Down.value_counts().values[0] )\nprint(\"*\"*50)\nprint(\"min of HandOffs done on Down : \", train_dff.Down.value_counts().keys()[-1], \" are : \",train_dff.Down.value_counts().values[-1] )\nprint(\"*\"*50)\nprint(\"Number of missing values : \", train_dff.Down.isna().sum())","42fa6924":"plt.figure()\nsns.countplot(x=train_dff.Down)\nplt.title(\"Down countplot\")\nplt.show()","5ab3c247":"train_dff = train_df[::22]\nprint(\"Total number of  Distances : \", train_dff.Distance.shape[0])\nprint(\"*\"*50)\nprint(\"max of Distance : \", train_dff.Distance.max())\nprint(\"*\"*50)\nprint(\"min of Distance : \", train_dff.Distance.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", train_dff.YardLine.isna().sum())","8ac9103a":"plt.figure(figsize=(15,10))\nsns.countplot(y=train_dff.Distance)\nplt.title(\"PossessionTeam countplot\")\nplt.show()","eb43df07":"FieldPosition = train_df.FieldPosition[::22]","6be37946":"plt.figure(figsize=(15,10))\nsns.countplot(y=FieldPosition)\nplt.title(\"FieldPosition countplot\")\nplt.show()","d38d475e":"HomeScoreBeforePlay = train_df[\"HomeScoreBeforePlay\"][::22]","46e7e29f":"print(\"max of HomeScoreBeforePlay : \", HomeScoreBeforePlay.max())\nprint(\"*\"*50)\nprint(\"min of HomeScoreBeforePlay : \", HomeScoreBeforePlay.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", HomeScoreBeforePlay.isna().sum())","a300f091":"plt.figure()\nsns.distplot(HomeScoreBeforePlay)\nplt.title(\"Distribution of HomeScoreBeforePlay\")\nplt.show()","0a1c7c9c":"VisitorScoreBeforePlay = train_df[\"VisitorScoreBeforePlay\"][::22]\n\nprint(\"max of HomeScoreBeforePlay : \", VisitorScoreBeforePlay.max())\nprint(\"*\"*50)\nprint(\"min of HomeScoreBeforePlay : \", VisitorScoreBeforePlay.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", VisitorScoreBeforePlay.isna().sum())","14a0fedf":"plt.figure()\nsns.distplot(VisitorScoreBeforePlay)\nplt.title(\"Distribution of VisitorScoreBeforePlay\")\nplt.show()","a308f314":"NflIdRusher = train_df.NflIdRusher[::22]\nprint(\"Total number of unique NflIdRyshers : \", NflIdRusher.nunique())\nprint(\"*\"*50)\nprint(\"max times HandOff for NflIdRusher ID is : \", NflIdRusher.value_counts().keys()[0] , \"Number of times is :\", NflIdRusher.value_counts().values[0])\nprint(\"*\"*50)\nprint(\"min times HandOff for NflIdRusher ID is : \", NflIdRusher.value_counts().keys()[-1] , \"Number of times is :\", NflIdRusher.value_counts().values[-1])\nprint(\"*\"*50)\nprint(\"Number of missing values : \", NflIdRusher.isna().sum())","3f6b5c69":"OffenseFormation = train_df.OffenseFormation[::22] ","b6f056eb":"print(\"Number of missing values : \", OffenseFormation.isna().sum())","0d168f5d":"plt.figure()\nsns.countplot(y=OffenseFormation)\nplt.title(\"OffenseFormation countplot\")\nplt.show()","e4807885":"import tqdm as tqdm","8af8ec26":"OffensePersonnel = train_df.OffensePersonnel[::22]","f8a8004b":"unique_OffensePersonnel = []\nfor row in OffensePersonnel:\n    result = ''.join([i for i in row.replace(',','') if not i.isdigit()]).strip()\n    for per in result.split():\n        if per not in unique_OffensePersonnel:\n            unique_OffensePersonnel.append(per)\nunique_OffensePersonnel","a358dd7f":"train_df.OffensePersonnel[:5]","75268725":"OffensePersonnel_df = pd.DataFrame(0 ,columns=unique_OffensePersonnel, index=train_df.index)\nfor ind,personnel in enumerate(train_df.OffensePersonnel):\n    pos = personnel.split(',')\n    for i in pos:\n        col = i[-2:]\n        OffensePersonnel_df.loc[ind][col] = int(i[-4])","dc8a177d":"OffensePersonnel_df = OffensePersonnel_df.add_prefix(\"offense_\")","7b2a3258":"OffensePersonnel_df.head()","f5460bf9":"train_df = pd.merge(train_df , OffensePersonnel_df, how=\"left\", left_index=True, right_index=True)","2b17720e":"DefendersInTheBox = train_df.DefendersInTheBox[::22]\n\nprint(\"Total number of  DefendersInTheBox : \", DefendersInTheBox.shape[0])\nprint(\"*\"*50)\nprint(\"max of Dir : \", DefendersInTheBox.max())\nprint(\"*\"*50)\nprint(\"min of Dir : \", DefendersInTheBox.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", DefendersInTheBox.isna().sum())","d2e08ba2":"plt.figure()\nsns.distplot(DefendersInTheBox.dropna())\nplt.title(\"Distribution of DefendersInTheBox\")\nplt.show()","6d2d5d8c":"plt.figure()\nsns.countplot(y=DefendersInTheBox.dropna())\nplt.title(\"DefendersInTheBox countplot\")\nplt.show()","12c95bb9":"DefensePersonnel = train_df.DefensePersonnel[::22]","5f4ef211":"unique_DefensePersonnel = []\nfor row in DefensePersonnel:\n    result = ''.join([i for i in row.replace(',','') if not i.isdigit()]).strip()\n    for per in result.split():\n        if per not in unique_DefensePersonnel:\n            unique_DefensePersonnel.append(per)\nunique_DefensePersonnel","5fad8948":"train_df.DefensePersonnel[:5]","579d8ec9":"DefensePersonnel_df = pd.DataFrame(0 ,columns=unique_DefensePersonnel, index=train_df.index)\nfor ind,personnel in enumerate(train_df.DefensePersonnel):\n    pos = personnel.split(',')\n    for i in pos:\n        col = i[-2:]\n        DefensePersonnel_df.loc[ind][col] = int(i[-4])","ac551251":"DefensePersonnel_df = DefensePersonnel_df.add_prefix(\"defense_\")","9d86b454":"train_df = pd.merge(train_df , DefensePersonnel_df, how=\"left\", left_index=True, right_index=True)","e5a440c0":"train_df.PlayDirection.value_counts()","67e665f6":"train_df[\"TimeHandoff\"] = train_df[\"TimeHandoff\"].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))","da8347c7":"train_df.TimeHandoff[::22][:5]","c73fd54b":"train_df['TimeSnap'] = train_df['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))","bb92b6a2":"train_df.TimeSnap[::22][:5]","8cf5ab7a":"Yards = train_df.Yards[::22]","16102290":"print(\"max Yards : \", Yards.max())\nprint(\"*\"*50)\nprint(\"min Yards : \", Yards.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", Yards.isna().sum())","088f1c6f":"plt.figure()\nsns.distplot(Yards)\nplt.title(\"Distribution of Yards\")\nplt.show()","21c874fc":"train_df.PlayerHeight[:5]","d8721fca":"# https:\/\/www.kaggle.com\/bgmello\/neural-networks-feature-engineering-for-the-win\n\ntrain_df['PlayerHeight'] = train_df['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))","93515e97":"print(\"max PlayerHeight : \", train_df.PlayerHeight.max())\nprint(\"*\"*50)\nprint(\"min PlayerHeight : \", train_df.PlayerHeight.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", train_df.PlayerHeight.isna().sum())","fce6b8e8":"plt.figure()\nsns.distplot(train_df.PlayerHeight)\nplt.title(\"Distribution of player height\")\nplt.show()","922667ad":"print(\"max PlayerWeight : \", train_df.PlayerWeight.max())\nprint(\"*\"*50)\nprint(\"min PlayerWeight : \", train_df.PlayerWeight.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", train_df.PlayerWeight.isna().sum())","8ec12214":"plt.figure()\nsns.distplot(train_df.PlayerWeight)\nplt.title(\"Distribution of player weight\")\nplt.show()","e13d1693":"train_df[\"PlayerBirthDate\"] = train_df[\"PlayerBirthDate\"].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))","888e5e45":"train_df.PlayerBirthDate[:5]","6107a149":"print(\"Total number of unique PlayerCollegeName : \", train_df.PlayerCollegeName.nunique())\nprint(\"*\"*50)\nprint(\"max number of players from : \", train_df.PlayerCollegeName.value_counts().keys()[0] , \" and Number of players :\", train_df.PlayerCollegeName.value_counts().values[0])\nprint(\"*\"*50)\nprint(\"min number of players from : \", train_df.PlayerCollegeName.value_counts().keys()[-1] , \" and Number of players :\", train_df.PlayerCollegeName.value_counts().values[-1])\nprint(\"*\"*50)\nprint(\"Number of missing values : \", train_df.PlayerCollegeName.isna().sum())","34a443a8":"HomeTeamAbbr = train_df.HomeTeamAbbr[::22]\nplt.figure(figsize=(15,10))\nsns.countplot(y=HomeTeamAbbr)\nplt.title(\"HomeTeamAbbr countplot\")\nplt.show()","bc5eda76":"VisitorTeamAbbr = train_df.VisitorTeamAbbr[::22]\nplt.figure(figsize=(15,10))\nsns.countplot(y=VisitorTeamAbbr)\nplt.title(\"VisitorTeamAbbr countplot\")\nplt.show()","8db30fee":"Week = train_df.Week[::22]","0c402656":"plt.figure(figsize=(15,10))\nsns.countplot(y=Week)\nplt.title(\"Week countplot\")\nplt.show()","829cdf1b":"Stadium = train_df.Stadium[::22].str.lower()","bf984c57":"print(\"Total number of unique Stadiums : \", Stadium.nunique())\nprint(\"*\"*50)\nprint(\"max number of plays in Stadium is : \", Stadium.value_counts().keys()[0] , \" and Number of played :\", Stadium.value_counts().values[0])\nprint(\"*\"*50)\nprint(\"min number of plays in Stadium is : \", Stadium.value_counts().keys()[-1] , \" and Number of played :\", Stadium.value_counts().values[-1])\nprint(\"*\"*50)\nprint(\"Number of missing values : \", Stadium.isna().sum())","d6bb5285":"Location = train_df.Location[::22].str.lower()","c8de880a":"print(\"Total number of unique Location : \", Location.nunique())\nprint(\"*\"*50)\nprint(\"max number of plays in Location is : \", Location.value_counts().keys()[0] , \" and Number of played :\", Location.value_counts().values[0])\nprint(\"*\"*50)\nprint(\"min number of plays in Location is : \", Location.value_counts().keys()[-1] , \" and Number of played :\", Location.value_counts().values[-1])\nprint(\"*\"*50)\nprint(\"Number of missing values : \", Location.isna().sum())","4cbf5b64":"train_df.StadiumType[::22].value_counts()","a8add2c6":"def clean_StadiumType(txt):\n    if pd.isna(txt):\n        return np.nan\n    txt = txt.lower()\n    txt = ''.join([c for c in txt if c not in punctuation])\n    txt = re.sub(' +', ' ', txt)\n    txt = txt.replace('outside', 'outdoor')\n    txt = txt.replace('outdor', 'outdoor')\n    txt = txt.replace('outddors', 'outdoor')\n    txt = txt.replace('outdoors', 'outdoor')\n    txt = txt.replace('oudoor', 'outdoor')\n    txt = txt.replace('indoors', 'indoor')\n    txt = txt.replace('ourdoor', 'outdoor')\n    txt = txt.replace('retractable', 'rtr.')\n    txt = txt.replace('dome','domed')\n    txt = txt.replace('retr roofclosed', 'retr roof closed')\n    txt = txt.replace('retr roofopen', 'retr roof open')\n    txt = txt.replace('domeddd', 'domed')\n    txt = txt.replace('domedd closed', 'domed closed')\n    txt = txt.replace('closed domed', 'domed closed')\n    txt = txt.replace('domed closedd', 'domed closed')\n    txt = txt.replace('domedd', 'domed')\n    return txt","1d5c7fed":"train_df['StadiumType'] = train_df['StadiumType'].apply(clean_StadiumType)","c89469e4":"train_df.Turf.value_counts()","d3732581":"#from https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/discussion\/112681#latest-649087\ngrass_labels = ['grass', 'natural grass', 'natural', 'naturall grass']\ntrain_df['Grass'] = np.where(train_df.Turf.str.lower().isin(grass_labels), 1, 0)","2fc42126":"train_df.GameWeather.unique()","69dcc090":"train_df['GameWeather'] = train_df['GameWeather'].str.lower()\nindoor = \"indoor\"\ntrain_df['GameWeather'] = train_df['GameWeather'].apply(lambda x: indoor if not pd.isna(x) and indoor in x else x)\ntrain_df['GameWeather'] = train_df['GameWeather'].apply(lambda x: x.replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly') if not pd.isna(x) else x)\ntrain_df['GameWeather'] = train_df['GameWeather'].apply(lambda x: x.replace('clear and sunny', 'sunny and clear') if not pd.isna(x) else x)\ntrain_df['GameWeather'] = train_df['GameWeather'].apply(lambda x: x.replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)","f2270763":"train_df['GameWeather'].unique()","18645bc1":"from collections import Counter\nweather_count = Counter()\nfor weather in train_df['GameWeather']:\n    if pd.isna(weather):\n        continue\n    for word in weather.split():\n        weather_count[word]+=1\n        \nweather_count.most_common()[:15]","dea5a9bb":"Temperature = train_df.Temperature[::22]\n\nprint(\"max of Temperature : \", Temperature.max())\nprint(\"*\"*50)\nprint(\"min of Temperature : \", Temperature.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", Temperature.isna().sum())","434eb625":"plt.figure()\nsns.distplot(Temperature.dropna())\nplt.title(\"Distribution of Temperature\")\nplt.show()","65c05b57":"Humidity = train_df.Humidity[::22]\n\nprint(\"max of Humidity : \", Humidity.max())\nprint(\"*\"*50)\nprint(\"min of Humidity : \", Humidity.min())\nprint(\"*\"*50)\nprint(\"Number of missing values : \", Humidity.isna().sum())","ca65fae1":"plt.figure()\nsns.distplot(Humidity.dropna())\nplt.title(\"Distribution of Humidity\")\nplt.show()","b318901c":"train_df['WindSpeed'].value_counts()","44bc1078":"train_df['WindSpeed'] = train_df['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)","4bf8f977":"#let's replace the ones that has x-y by (x+y)\/2\n# and also the ones with x gusts up to y\ntrain_df['WindSpeed'] = train_df['WindSpeed'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\ntrain_df['WindSpeed'] = train_df['WindSpeed'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)","1dd3643b":"def str_to_float(txt):\n    try:\n        return float(txt)\n    except:\n        return -1","02a4c677":"train_df['WindSpeed'] = train_df['WindSpeed'].apply(str_to_float)","e1b3cbb2":"train_df.WindSpeed.value_counts()","a15ffeb3":"train_df['WindDirection'].value_counts()","7e86c43c":"def clean_WindDirection(txt):\n    if pd.isna(txt):\n        return np.nan\n    txt = txt.lower()\n    txt = ''.join([c for c in txt if c not in punctuation])\n    txt = txt.replace('from', '')\n    txt = txt.replace(' ', '')\n    txt = txt.replace('north', 'n')\n    txt = txt.replace('south', 's')\n    txt = txt.replace('west', 'w')\n    txt = txt.replace('east', 'e')\n    return txt","a5b0147e":"train_df['WindDirection'] = train_df['WindDirection'].apply(clean_WindDirection)","dbb55492":"train_df['WindDirection'].value_counts()","ecf6f1db":"def transform_WindDirection(txt):\n    if pd.isna(txt):\n        return np.nan\n    \n    if txt=='n':\n        return 0\n    if txt=='nne' or txt=='nen':\n        return 1\/8\n    if txt=='ne':\n        return 2\/8\n    if txt=='ene' or txt=='nee':\n        return 3\/8\n    if txt=='e':\n        return 4\/8\n    if txt=='ese' or txt=='see':\n        return 5\/8\n    if txt=='se':\n        return 6\/8\n    if txt=='ses' or txt=='sse':\n        return 7\/8\n    if txt=='s':\n        return 8\/8\n    if txt=='ssw' or txt=='sws':\n        return 9\/8\n    if txt=='sw':\n        return 10\/8\n    if txt=='sww' or txt=='wsw':\n        return 11\/8\n    if txt=='w':\n        return 12\/8\n    if txt=='wnw' or txt=='nww':\n        return 13\/8\n    if txt=='nw':\n        return 14\/8\n    if txt=='nwn' or txt=='nnw':\n        return 15\/8\n    return np.nan","b4c1c3fd":"train_df['WindDirection'] = train_df['WindDirection'].apply(transform_WindDirection)","7af8d363":"## 30.TimeSnap\n- `TimeSnap` - UTC time of the snap\n- A snap (colloquially called a \"hike\", \"snapback\", or \"pass from center\") is the backwards passing of the ball in American and Canadian football at the start of play from scrimmage.","29460134":"## 8.Dis\n- distance traveled from prior time point, in yards\n\n- `Dis` measures time covered in the most recent window of player tracking data. Given that tracking data roughly covers 10 frames per second, `Dis` corresponds to distance traveled in the recent 0.1 seconds. Note that speed and acceleration are directly calculated using `Dis` (this is done in the data pre-processing) [link](https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/discussion\/112246)","5374cd84":"## 6.S && 7.A\n\n- S : speed in yards\/second\n- A : acceleration in yards\/second^2\n\n- S is the speed of player when HandOff happend\n- A is the acceleration of player when HandOff happend","8deda46b":"## 28.PlayDirection\n\n- `PlayDirection`- direction the play is headed\n- It have two categorys : left and right\n- If `PlayDirection` is right, so offense is from left to right.\n- [link](https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/discussion\/112997#latest-650782)","02bade99":"## 26.DefendersInTheBox\n\n- `DefendersInTheBox`- number of defenders lined up near the line of scrimmage, spanning the width of the offensive line\n- In American football, an eight-in-the-box defense is a defensive alignment in which 8 of the 11 defensive players are close to the line of scrimmage. \n","ffe6b95e":"- using X and Y features we identify where the play exactly in field when HandOff happend","6a65e3c4":"## 44.GameWeather\n- `GameWeather` - description of the game weather","453cb6c5":"### Football Field Plot","64d8db93":"## Exploratery Data Analysis \n\n- Total number of columns 49\n- EDA based on columns by columns\n","a2f38717":"## 15.Quarter\n- game quarter (1-5, 5 == overtime)\n- Football games last for a total of 60 minutes in professional and college play and are divided into two halves of 30 minutes and four quarters of 15 minutes. High school football games are 48 minutes in length with two halves of 24 minutes and four quarters of 12 minutes. The two halves are separated by a halftime period, and the first and third quarters are followed by a short break.\n\n- If a game is tied at the end of four quarters, overtime is played. In overtime, the coin is tossed to determine which team will possess the ball first. The winner of the coin toss can choose to give the ball or receive the ball. If the first possession results in a field goal, the other team is given possession to match or better the field goal, therefore continuing the game. \n","73f8e7e0":"## 31.Yards\n- `Yards` - the yardage gained on the play (you are predicting this)\n- the number of yards gained or lost on every play\n- every 22 lines in the train data stand for one play. the format of the submission is a little different than just the number of yards, for every possible outcome of the play - you need to provide the probability of this outcome.","3c18fe35":"## 46.Humidity\n\n- `Humidity` - humidity","c06cd024":"- most of in between -5 to 20 Yards","9f0ddfec":"- We need to create groupby using \"PlayId\"","1dc4979c":"## 25.OffensePersonnel\n`OffensePersonnel`- Offensive team positional grouping","441e8788":"## 22.VisitorScoreBeforePlay\n- `VisitorScoreBeforePlay`-visitor team score before play started ","f7888aeb":"## 19.Distance\n- `Distance`- yards needed for a first down\n- Distance is the yards the team needs to make a first down\n- Distance is how far away the team is from getting a first down.","ea4484ed":"## 24.OffenseFormation\n- `OffenseFormation`- offense formation\n- A formation in football refers to the position players line up in before the start of a down. There are both offensive and defensive formations and there are many formations in both categories. Sometimes, formations are referred to as packages.\n- video [link](https:\/\/www.youtube.com\/watch?v=PSP42z4yHOQ)","964a3cf7":"## 34.PlayerWeight\n- `PlayerWeight` - player weight (lbs)","3d63216e":"## 29.TimeHandoff\n\n- `TimeHandoff`-UTC time of the handoff\n-  for what time the handoff of done","9da4342f":"## 40.Stadium\n- stadium where the game is being played","04c380c0":"### Ball Carrier Direction Analysis\n\nLet us take the playid '20181007011551' to start with.\n\n- We will plot the home team using blue color and away team using orange color.\n- Ball carrier is plotted using red color\n- Direction of movement of the ball carrier is shown using arrow\n- Yards covered (target) variable is avilable in the title","9587e54e":"- We can see there are some values that are not standardized(e.g. 12mph), we are going to remove mph from all our values.","37d880de":"## 41.Location\n\n- `Location` - city where the game is being player","8a047264":"## 17.PossessionTeam\n\n- team with possession\n- Both teams' captains run out to midfield for the coin toss. One team wins and the announcer bellows that that team will start with \"possession.\"\n- In football, each team goes back and forth with 'possessions.' All that means is that each team's offense gets a chance to control the football. When a team's offense has the ball, they are considered to have 'possession' because they are dictating the scoring. Now, if that team turns the ball over, scores, or punts it away and suddenly the other team's offense comes on the field, that team now has the 'possession.'\n\n**Note:** In traing data same team can have multiple different abbreviations. There are a few columns like `HomeTeamAbbr` or `PossessionTeam` and e.g. Baltimore has BAL abbreviation in the former and BLT in the latter. [link](https:\/\/www.kaggle.com\/statsbymichaellopez\/nfl-tracking-initial-wrangling-voronoi-areas)","fff968c5":"## 42.StadiumType\n\n- `StadiumType` - description of the stadium environment","4a01f1b2":"## 39.Week\n- `Week` - week into the season\n- The National Football League (NFL) regular season begins on the weekend following the first Monday of September (i.e, the weekend following the Labor Day holiday) and ends in December or early January. It consists of 256 games, where each team (32 total) plays 16 games during a 17-week period.","9cd0738a":"## 15.YardLine\n\n- the yard line of the line of scrimmage\n- a line of scrimmage is an imaginary transverse line (across the width of the football field) beyond which a team cannot cross until the next play has begun. Its location is based on the spot where the ball is placed after the end of the most recent play and following the assessment of any penalty yards.\n\n![Imgur](https:\/\/i.imgur.com\/Jxpxcuz.jpg)\n\n- Blue line is line of scrimmage\n- On a kickoff, the ball is placed at the 35-yard line of the kicking team in professional and college play and at the 40-yard line in high school play. The ball may be drop-kicked or place-kicked. If a place kick is chosen, the ball can be placed on the ground or a tee; a holder may be used in either case. On a safety kick, the kicking team kicks the ball from their own 20-yard line. They can punt, drop-kick or place-kick the ball, but a tee may not be used in professional play. Any member of the receiving team may catch or advance the ball. The ball may be recovered by the kicking team once it has gone at least ten yards and has touched the ground or has been touched by any member of the receiving team","3da64b13":"## 49.WindDirection\n\n- `WindDirection` - wind direction\n","3f959ec5":"## 37.HomeTeamAbbr\n\n- `HomeTeamAbbr` - home team abbreviation","5bcbcbfb":"## 23.NflIdRusher\n- the `NflId` of the rushing player\n- Rushing is an action taken by the offense that means to advance the ball by running with it, as opposed to passing or kicking\n- Any rushing player is called a rusher.\n- PlayerId, who is carrying ball","cde9018e":"## 16.GameClock\n- time on the game clock\n- this feature tells us when the HandOff started that particular time","6f0f46c8":"## 45.Temperature\n- `Temperature` - temperature (deg F)","a0650a72":"### This is my First Kernel :) please give boost for me, with your valuble upvoting\n\n## Thankyou :)","75747c14":"- we observe most of players Speed < 6 yards per sec when HandOff happend\n- we observe most of players Acceleration < 4 yards per sec^2 when HandOff happend","a69e80e7":"## 10.Dir\n- angle of player motion (deg)\n- the angle of player moving when the HandOff made","db31b1e7":"## 2.PlayId\n- A unique play identifier\n- In every game(GameId) have many number of handOff's \n- Every HandOff identify using PlayId\n- Every PlayId have 22 datapoints\n- Every datapoint represents player data in that perticlur HandOff in field\n- Every HandOff happened 22 players in ground(field)","6e37245f":"### Data Format\n\nThe shape of train data is 509762 x 49.\n\n**Key Points :**\n\n- A game played by two teams, Offensive and Defensive each team have 11 players at that time of play.\n- total 22 players in field.\n- This dataset contains Next Gen Stats tracking data for running plays\n- When the ball is handed off (`TimeHandoff`) to forecast the yardage gained on thet play (`PlayId`).\n- When the ball is handedOff, in that particular time 22 players in field, represented as `PlayId`\n- In that perticular time we have all 22 players data.\n- using those players data we want to predict \"How many yards will an NFL player gain after receiving a handoff?\"","9ff04b33":"## 43.Turf\n- `Turf`- description of the field surface","8db1eb52":"### 1. GameId\n\n- A unique game identifier\n- Every game have unique GameId\n- In every game we have many number of handOff's","02d43b16":"## 21.HomeScoreBeforePlay\n- home team score before play started\n- score before receiving that particular handoff","176e543f":"### Loading data","a31f8aef":"## 32.PlayerHeight\n- `PlayerHeight` - player height (ft-in)","0e69ec6d":"## 38.VisitorTeamAbbr\n- `VisitorTeamAbbr` - visitor team abbreviation","4683f1d2":"## 27.DefensePersonnel\n\n- `DefensePersonnel`- defensive team positional grouping","054e0acb":"## 18.Down\n- `Down` - the down(1-4)\n- Downs are the most fundamental, and confusing, part of the NFL rulebook. The attacking team, or offence, needs to move the ball forward in chunks of at least 10 yards, which is why the pitch has yardage markings. They have four chances, or downs, to gain those 10 yards","623b4319":"> Training data was sorted","5b8c5479":"## 3.Team\n- home or away\n- This is categorical feature\n- Every `PlayId` have 22 datapoints(players)\n- 11 from home and 11 from away\n- We already seen that train data sorted by Team","ea76db44":"## 12.DisplayName && 13.JerseyNamber\n\n- DisplayName : player's name for each player\n- JerseyNumber : jersey number for each player","f2d55ce2":"- We observe that most of HandOff's are done in 1,2,3,4 Quarters\n- In 5th Quarter very less HandOff's","e6fe2723":"## 4.X && 5.Y\n- X : player position along tha long axis of the field.\n- Y : player position along the sort axis of the field\n\n![Imgur](https:\/\/i.imgur.com\/ZMyTDks.jpg)\n\n- From X and Y we know the player position in field.\n- Each and every player have they own positions when HandOff happend.","eb848fce":"## 20.FieldPosition\n- `FieldPossition`- which side of the field the play is happening on\n","73312e21":"## 35.PlayerBirthDate\n\n- `PlayerBirthDate` - birth date (mm\/dd\/yyyy)","150f5451":"## 48.WindSpeed\n- `WindSpeed` - wind speed in miles\/hour","f90b672d":"- Players position like Tsuname, those covers all over the place","c60b6f90":"## 36.PlayerCollegeName\n- `PlayerCollegeName` - where the player attended college","51ac71f7":"## 11.NflId\n- a unique identifier of the player\n- train data we want to identify player uniquely using `NflId` feature\n- During the regular season, each team is allowed a maximum of 53 players on its roster; only 46 of these may be active (eligible to play) on game days.\n- Each team play with 11 players at that time of play.","f46161c6":"### In this competition you will predict How many yards will an NFL player gain after receiving a handoff ?\n\n![Imgur](https:\/\/i.imgur.com\/bwHiMwM.gif)\n\n**Handoff :** An exchange made by handing the ball to a teammate\n\n\n\n![Imgur](https:\/\/i.imgur.com\/iMmwaLO.png)\n\n**Yards :** 1 yard = 0.9144 metre\n\n- **The rectangular field of play of American football games measures 100 yards (91.44 m) long between the goal lines, and 160 feet (48.8 m) (53 1\u20443 yards) wide. In addition, there are end zones extending another 10 yards (9.144 m) past the goal lines to the \"end lines\", for a total length of 120 yards (109.7 m). When the \"football field\" is used as unit of measurement, it is usually understood to mean 100 yards (91.44 m), although technically the full length of the official field, including the end zones, is 120 yards (109.7 m).**\n\n\n\n\n\n","2b3a9618":"- Down 1 have higher HandOff's\n- Down 4 have hower HandOff's","4547a018":"- Let's now look at the most common words we have in the weather description","a428039a":"## 9.Orientation\n\n- Orientation of player (deg)\n- this angle of player, direction of player","f8f097ba":"## Knowing the data","c081a321":"We are going to apply the following preprocessing:\n\n- Lower case\n- N\/A Indoor, N\/A (Indoors) and Indoor => indoor Let's try to cluster those together.\n- coudy and clouidy => cloudy\n- party => partly\n- sunny and clear => clear and sunny\n- skies and mostly => \"\"","953534e9":"- We observe that, those two distributions look linke identical it self\n- Because of it very posible that two team player positions opposite to each other","6b0646e1":"## 14.Season\n\n- year of the season\n- this is time series data"}}