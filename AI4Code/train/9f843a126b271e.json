{"cell_type":{"59f620c7":"code","6daaf837":"code","de9d74ea":"code","bf26c465":"code","973863c5":"code","6e5a4133":"code","d36becbf":"code","4fefb47d":"code","f488a530":"code","51af7f3d":"code","6001d6ca":"code","5dddd843":"code","b0257eec":"code","21d05a68":"code","8c801167":"code","01aa12a4":"code","0ac4fe4b":"code","3f981695":"code","76708d0b":"code","65d7c2a2":"code","2d227377":"markdown","35e77996":"markdown","56b26531":"markdown","f0323f7b":"markdown","8fc2f714":"markdown","ba4a4867":"markdown"},"source":{"59f620c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6daaf837":"!pip uninstall kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6","de9d74ea":"!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!ls -lha kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json","bf26c465":"! kaggle competitions download -c lol-prediction","973863c5":"!unzip lol-prediction.zip","6e5a4133":"import torch\nimport torch.optim as optim\nimport torch.nn.functional as F\nimport pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler # For Normalization","d36becbf":"device = torch.device(\"cuda\")","4fefb47d":"torch.manual_seed(484)\ntorch.cuda.manual_seed_all(484)","f488a530":"x_train = pd.read_csv('lol.x_train.csv', index_col=0)\ny_train = pd.read_csv('lol.y_train.csv', index_col=0)\nx_test = pd.read_csv('lol.x_test.csv', index_col=0)","51af7f3d":"x_train = np.array(x_train)\nx_test = np.array(x_test)\n","6001d6ca":"x_train = torch.FloatTensor(x_train)\ny_train = torch.FloatTensor(y_train)\nx_test = torch.FloatTensor(x_test)","5dddd843":"from torch.utils.data import TensorDataset\nfrom torch.utils.data import DataLoader","b0257eec":"train_set = TensorDataset(x_train, y_train)","21d05a68":"data_loader = DataLoader(dataset=train_set,\n                         batch_size=10000,\n                         shuffle=True)","8c801167":"# DNN \ubaa8\ub378 \uad6c\ucd95\nlinear1 = torch.nn.Linear(48, 32).to(device)\nlinear2=torch.nn.Linear(32,32).to(device)\nlinear3 = torch.nn.Linear(32, 1).to(device)\n\nrelu = torch.nn.ReLU()\nsigmoid = torch.nn.Sigmoid()\ndropout=torch.nn.Dropout(p=0.3)\n\ntorch.nn.init.xavier_uniform_(linear1.weight)\ntorch.nn.init.xavier_uniform_(linear2.weight)\ntorch.nn.init.xavier_uniform_(linear3.weight)\n\n\nmodel = torch.nn.Sequential(linear1, relu,dropout,\n                            linear2,relu,dropout,\n                            linear3, sigmoid)\n\nmodel","01aa12a4":"cost = torch.nn.BCELoss().to(device)\noptimizer = torch.optim.SGD(model.parameters(), lr=0.1)","0ac4fe4b":"epochs = 60\nfor epoch in range(1, epochs+1):\n    avg_cost = 0\n    total_batch = len(data_loader)\n\n    for x, y in data_loader: \n         # batch loop\n        x = x.to(device)\n        y = y.to(device)\n\n        optimizer.zero_grad()\n        hypothesis = model(x)\n        cost_val = cost(hypothesis, y)\n        cost_val.backward()\n        optimizer.step()\n\n        avg_cost += cost_val\n    \n    avg_cost \/= total_batch\n\n    if epoch % 10 == 1 or epoch == epochs:\n        print('Epoch {:4d}\/{} Cost: {:.6f}'.format(epoch, epochs, avg_cost.item()))","3f981695":"with torch.no_grad(): # Don't Calculate Gradient\n    model.eval()\n    x_test = x_test.to(device)\n\n    pred = model(x_test)","76708d0b":"pred[pred>=0.5] = 1.0\npred[pred<=0.5] = 0.0\npred = pred.detach().cpu().numpy()\npred = pred.astype(np.uint32)\nid=np.array([i for i in range(pred.shape[0])]).reshape(-1, 1).astype(np.uint32)\nresult=np.hstack([id, pred])\n\nsubmit = pd.DataFrame(result, columns=['id', 'blueWins'])\nsubmit.to_csv('submit.csv', index=False)","65d7c2a2":"!kaggle competitions submit -c lol-prediction -f submit.csv -m \"17011885\"","2d227377":"\ucf54\ub4dc \ubd88\ub7ec\uc624\ub294 \uacfc\uc815\uacfc \ud30c\ub77c\ubbf8\ud130 \uacb0\uc815\uc740 \uae30\uc874 \ubca0\uc774\uc2a4\ub77c\uc778\uacfc \uac19\uac8c \uc9c4\ud589\ud558\uc600\uc2b5\ub2c8\ub2e4.","35e77996":"\uac10\uc0ac\ud569\ub2c8\ub2e4.","56b26531":"DNN\uc744 \uc218\uc815\ud55c \ubd80\ubd84\uc785\ub2c8\ub2e4.\nlinear1\uacfc linear2\ub85c\ub9cc \uc774\ub8e8\uc5b4\uc84c\ub358 \uae30\uc874 \ucf54\ub4dc\uc5d0\uc11c linear3\uae4c\uc9c0 Layer\uc744 \ud55c\uce35 \ub354 \uc313\uc544\uc92c\uc2b5\ub2c8\ub2e4.\n\ndropout\uc744 \uc9c0\uc815\ud574\uc8fc\uc5b4 \uc815\uaddc\ud654\ub97c \ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.\nlinear\uac12\uc5d0 \ucd08\uae30\ud654\uac00 \ub418\uc5b4\uc788\uc9c0 \uc54a\uc544 xavier_uniform_\uc744 \uc774\uc6a9\ud574 \ucd08\uae30\ud654\ub97c \ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.","f0323f7b":"# baseline\uacfc \ucc28\ubcc4\uc810:\n\n1. 2\uacc4\uce35 NN\uc744 3\uacc4\uce35 NN\uc73c\ub85c \ubcc0\ud658\uc2dc\ud0b4.\n2. model squential \uc5d0\uc11c dropout\uc744 \ud1b5\ud574 \uc815\uaddc\ud654\ub97c \ud574\uc90c\uc73c\ub85c\uc368 \uc131\ub2a5\uc744 \ud5a5\uc0c1\uc2dc\ucf30\ub2e4.\n3. Xavier \ucd08\uae30\ud654\ub97c \ud574\uc8fc\uc5c8\ub2e4. \n\n\nhttps:\/\/www.youtube.com\/watch?v=AriwZjrNptQ","8fc2f714":"\uae30\uc874 \ubca0\uc774\uc2a4\ub77c\uc778\uacfc \ud559\uc2b5\uc744 \uac19\uac8c \uc2dc\ucf30\uc2b5\ub2c8\ub2e4.","ba4a4867":"\uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud574 \uc0ac\uc6a9\ud55c dropout\uc73c\ub85c test\ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc62c \ub54c model.eval()\uc744 \uc218\uc815\ud588\uc2b5\ub2c8\ub2e4."}}