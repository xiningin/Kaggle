{"cell_type":{"d64c560b":"code","7697d2d8":"code","3eefb301":"code","69f14fc0":"code","92b216c6":"code","4e69bb83":"code","4e40a61a":"code","c8dbe662":"code","d67531b0":"code","0be0a991":"code","fd5437cb":"code","62d6624c":"code","94e01c39":"code","3fbb1bfc":"code","60f11a78":"code","0f478c68":"code","eeff231f":"markdown","7c0eb7c6":"markdown","8a4ee56b":"markdown","510cde87":"markdown","6b965d2a":"markdown","5585f2d5":"markdown","7de1225e":"markdown","0bd42dcb":"markdown","586d3773":"markdown","bd8a2094":"markdown","7c339f09":"markdown","b69bb07b":"markdown","b3e1d573":"markdown"},"source":{"d64c560b":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers\nimport matplotlib.pyplot as plt\nimport tensorflow_addons as tfa\nfrom tensorflow.keras import layers","7697d2d8":"class Config:\n    input_size = 32\n    input_shape = [input_size, input_size, 3]\n    learning_rate = 0.001\n    weight_decay = 0.0001\n    batch_size = 256\n    num_classes = 10\n    num_epochs = 100\n    image_size = 72\n    patch_size = 6\n    num_patches = (image_size \/\/ patch_size) ** 2\n    projection_dim = 64\n    num_heads = 4\n    transformer_units = [\n        projection_dim * 2,\n        projection_dim\n    ]\n    transformer_layers = 8\n    mlp_head_units = [2048, 1024]","3eefb301":"def sample_images(images, row_count, column_count):\n    fig, axs = plt.subplots(row_count, column_count, figsize=(10,10))\n    for i in range(row_count):\n        for j in range(column_count):\n            axs[i,j].imshow(images[i * column_count + j])\n            axs[i,j].axis('off')\n    plt.show()","69f14fc0":"(train_data, train_labels),(test_data, test_labels)  = keras.datasets.cifar10.load_data()\n(train_data.shape, train_labels.shape),(test_data.shape, test_labels.shape) ","92b216c6":"indices = np.random.choice(train_data.shape[0], 100)\nsample_images(train_data[indices], 10, 10)","4e69bb83":"augmentation_layer = tf.keras.Sequential([\n    keras.layers.Input(Config.input_shape),\n    keras.layers.experimental.preprocessing.Normalization(),\n    keras.layers.experimental.preprocessing.Resizing(Config.image_size, Config.image_size),\n    keras.layers.experimental.preprocessing.RandomRotation(factor=0.02),\n    keras.layers.experimental.preprocessing.RandomZoom(height_factor=0.2, width_factor=0.2),\n])","4e40a61a":"augmentation_layer.layers[0].adapt(train_data)","c8dbe662":"def mlp(x, hidden_units, dropout_rate):\n    for units in hidden_units:\n        x = layers.Dense(units, activation=tf.nn.gelu)(x)\n        x = layers.Dropout(dropout_rate)(x)\n    return x","d67531b0":"class Patches(layers.Layer):\n    def __init__(self, patch_size):\n        super(Patches, self).__init__()\n        self.patch_size = patch_size\n        \n    def call(self, images):\n        batch_size = tf.shape(images)[0]\n        patches = tf.image.extract_patches(\n            images = images,\n            sizes=[1, self.patch_size, self.patch_size, 1],\n            strides=[1, self.patch_size, self.patch_size, 1],\n            rates=[1, 1, 1, 1],\n            padding=\"VALID\",\n        )\n        patch_dims = patches.shape[-1]\n        patches = tf.reshape(patches, [batch_size, -1, patch_dims])\n        return patches","0be0a991":"import matplotlib.pyplot as plt\n\nplt.figure(figsize=(4, 4))\nimage = train_data[np.random.choice(range(train_data.shape[0]))]\nprint(image.shape)\nplt.imshow(np.squeeze(image).astype(\"uint8\"))\nplt.axis(\"off\")\n\nresized_image = tf.image.resize(\n    tf.convert_to_tensor([image]), size=(Config.image_size, Config.image_size)\n)\nprint(resized_image.shape)\npatches = Patches(Config.patch_size)(resized_image)\nprint(f\"Image size: {Config.image_size} X {Config.image_size}\")\nprint(f\"Patch size: {Config.patch_size} X {Config.patch_size}\")\nprint(f\"Patches per image: {patches.shape[1]}\")\nprint(f\"Elements per patch: {patches.shape[-1]}\")\n\nn = int(np.sqrt(patches.shape[1]))\nplt.figure(figsize=(4, 4))\nfor i, patch in enumerate(patches[0]):\n    ax = plt.subplot(n, n, i + 1)\n    patch_img = tf.reshape(patch, (Config.patch_size, Config.patch_size, 3))\n    plt.imshow(patch_img.numpy().astype(\"uint8\"))\n    plt.axis(\"off\")","fd5437cb":"class PatchEncoder(layers.Layer):\n    \n    def __init__(self, num_patches, projection_dim):\n        super(PatchEncoder, self).__init__()\n        self.num_patches = num_patches\n        self.projection = layers.Dense(projection_dim)\n        self.position_embedding = layers.Embedding(\n            input_dim=num_patches, output_dim=projection_dim\n        )\n    def call(self, patch):\n        positions = tf.range(start=0, limit=self.num_patches, delta=1)\n        encoded = self.projection(patch) + self.position_embedding(positions)\n        return encoded\n        ","62d6624c":"def create_vision_transformer():\n    # Inputs\n    inputs = layers.Input(shape=Config.input_shape)\n    # Data Augmentation\n    augmented = augmentation_layer(inputs)\n    # Patches\n    patches = Patches(Config.patch_size)(augmented)\n    encoder_patches = PatchEncoder(Config.num_patches, Config.projection_dim)(patches)\n    \n    for _ in range(Config.transformer_layers):\n        # Layer Normalization 1\n        x1 = layers.LayerNormalization(epsilon=1e-6)(encoder_patches)\n        # Multi-Head Attention Layer\n        attention_output = layers.MultiHeadAttention(\n            num_heads=Config.num_heads, \n            key_dim=Config.projection_dim,\n            dropout=0.1\n        )(x1, x1)\n        # Skip Connnection 1\n        x2 = layers.Add()([attention_output, encoder_patches])\n        \n        # Layer Normalization 2\n        x3 = layers.LayerNormalization(epsilon=1e-6)(x2)\n        \n        # MLP\n        x3 = mlp(x3, hidden_units=Config.transformer_units, dropout_rate=0.1)\n        \n        # Skip Connnection 2\n        encoder_patches = layers.Add()([x3, x2])\n    \n    representation = layers.LayerNormalization(epsilon=1e-6)(encoder_patches)\n    representation = layers.Flatten()(representation)\n    representation = layers.Dropout(0.5)(representation)\n    \n    features = mlp(representation, hidden_units=Config.mlp_head_units, dropout_rate=0.5)\n    \n    outputs = layers.Dense(Config.num_classes)(features)\n    \n    model = keras.Model(inputs=inputs, outputs=outputs)\n    return model","94e01c39":"keras.backend.clear_session()\nvit_classifier = create_vision_transformer()\nvit_classifier.summary()","3fbb1bfc":"optimizer = tfa.optimizers.AdamW(\n    learning_rate=Config.learning_rate,\n    weight_decay=Config.weight_decay\n)\nvit_classifier.compile(\n    loss=keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n    optimizer=optimizer,\n    metrics=[\"accuracy\"]\n)\ncheckpoint_path = \"model.h5\"\ncheckpoint = keras.callbacks.ModelCheckpoint(\n    checkpoint_path,\n    monitor=\"val_accuracy\",\n    save_best_only=True,\n    save_weights_only=True\n)","60f11a78":"history = vit_classifier.fit(train_data, train_labels, epochs=30, batch_size=Config.batch_size, validation_data=(test_data, test_labels), callbacks=[checkpoint])","0f478c68":"pd.DataFrame(history.history).plot()","eeff231f":"### Patch Encoder Layer","7c0eb7c6":"## Training","8a4ee56b":"### MLP","510cde87":"## Setup","6b965d2a":"### Build the Model","5585f2d5":"### Data Augmentation","7de1225e":"## Model Development","0bd42dcb":"### Sample Images","586d3773":"### Patch Creation Layer","bd8a2094":"## Utilities","7c339f09":"# Cifar10 Classification: Vision Transformer\n","b69bb07b":"## Import and preprcess dataset","b3e1d573":"## Configuration"}}