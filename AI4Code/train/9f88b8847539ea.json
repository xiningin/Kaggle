{"cell_type":{"6c34d5d1":"code","59002c61":"code","6872c5b4":"code","fb1619c1":"code","73e906b3":"code","c0a98020":"code","4c500592":"code","d01c6678":"code","be0edb59":"code","ca63adfb":"code","3102253c":"code","9ccd4f34":"code","ef55e2d2":"code","67682d9f":"code","4b94c42d":"code","21661266":"markdown","2be7c1f8":"markdown","51fbd526":"markdown","cff20be9":"markdown","e0c38ae7":"markdown"},"source":{"6c34d5d1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","59002c61":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import randint\n\n# Model Selection\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Logistic Regression Model\nfrom sklearn.linear_model import LogisticRegression\n\n# Random Forest Model\nfrom sklearn.ensemble import RandomForestClassifier\n\n# Evaluate Model\nfrom sklearn.metrics import roc_curve, roc_auc_score, confusion_matrix, classification_report","6872c5b4":"# Loading Data\nX_train = pd.read_csv(\"..\/input\/ecommerce-shipping-data-competition-form\/X_train.csv\", index_col=\"ID\")\nX_test = pd.read_csv(\"..\/input\/ecommerce-shipping-data-competition-form\/X_test.csv\", index_col=\"ID\")\ny_train = pd.read_csv(\"..\/input\/ecommerce-shipping-data-competition-form\/y_train.csv\", index_col=\"ID\")\ny_test = pd.read_csv(\"..\/input\/ecommerce-shipping-data-competition-form\/test_label\/y_test.csv\", index_col=\"ID\")\nX_train.head()","fb1619c1":"X_train.info()","73e906b3":"X_train.isna().sum()","c0a98020":"print(y_train.value_counts())\nprint(y_test.value_counts())","4c500592":"for col in X_train.columns :\n    print(X_train[col].value_counts())","d01c6678":"# Spliting Categorical Variables\nX_train_ctg = X_train[\n    [\n        \"Warehouse_block\",\n        \"Mode_of_Shipment\",\n        \"Gender\",\n    ]\n]\n\n# Replace Values\nX_train.Product_importance.replace(\n    {\n        \"high\":3,\n        \"medium\":2,\n        \"low\":1,\n    },\n    inplace=True\n)\nX_train.Customer_care_calls.replace(\"$7\",7, inplace=True)\nX_train.Customer_care_calls = pd.to_numeric(X_train.Customer_care_calls)\n\nX_train_others = X_train.drop(columns = [\n        \"Warehouse_block\",\n        \"Mode_of_Shipment\",\n        \"Gender\",\n    ]\n)\n# One-hot Encoding\nX_train_ctg = pd.get_dummies(X_train_ctg)\n\n# Concat\nX_train = pd.concat([X_train_others,X_train_ctg], axis=1)\n\nX_train.head()","be0edb59":"# Spliting Categorical Variables\nX_test_ctg = X_test[\n    [\n        \"Warehouse_block\",\n        \"Mode_of_Shipment\",\n        \"Gender\",\n    ]\n]\n\n# Replace Values\nX_test.Product_importance.replace(\n    {\n        \"high\":3,\n        \"medium\":2,\n        \"low\":1,\n    },\n    inplace=True\n)\nX_test.Customer_care_calls.replace(\"$7\",7, inplace=True)\nX_test.Customer_care_calls = pd.to_numeric(X_test.Customer_care_calls)\n\nX_test_others = X_test.drop(columns = [\n        \"Warehouse_block\",\n        \"Mode_of_Shipment\",\n        \"Gender\",\n    ]\n)\n# One-hot Encoding\nX_test_ctg = pd.get_dummies(X_test_ctg)\n\n# Concat\nX_test = pd.concat([X_test_others,X_test_ctg], axis=1)\n\nX_train.info()","ca63adfb":"X_train.describe()","3102253c":"fig, axes = plt.subplots(1,2,figsize=(12,5))\nX_train.boxplot(column=\"Discount_offered\", ax=axes[0])\nX_train[np.ravel(y_train==0)].hist(column=\"Discount_offered\", bins=30, ax=axes[1], color='r', alpha=0.5)\nX_train[np.ravel(y_train==1)].hist(column=\"Discount_offered\", bins=30, ax=axes[1], color='b', alpha=0.5)\nplt.show()","9ccd4f34":"plt.figure(figsize=(20,20))\nfor num, col in enumerate(X_train.columns):\n    plt.subplot(4,5, num+1)\n    plt.hist(X_train[col][np.ravel(y_train==0)], color=\"blue\", alpha=0.3, label=0)\n    plt.hist(X_train[col][np.ravel(y_train==1)], color=\"red\", alpha=0.3, label=1)\n    plt.legend()\n    plt.title(col)\nplt.show()","ef55e2d2":"logistic = LogisticRegression(C=2, max_iter=1000)\nmodel = logistic.fit(X_train, np.ravel(y_train))\npred_train = model.predict(X_train)\npred_test = model.predict(X_test)\n\n# Model Metrics\nprint(f\"Test data R^2 Score: {model.score(X_test, np.ravel(y_test)):.3f}\")\nprint(confusion_matrix(y_test, pred_test))\nprint(classification_report(y_test, pred_test))\nprint(f\"ROC AUC Score: {roc_auc_score(y_test, model.decision_function(X_test)):.3f}\")","67682d9f":"randomforest = RandomForestClassifier(random_state=100, n_jobs=-1)\nmodel = randomforest.fit(X_train, np.ravel(y_train))\npred_test = model.predict(X_test)\npred_test_proba = model.predict_proba(X_test)\nprint(f\"R^2 Score : {model.score(X_test, np.ravel(y_test)):.3f}\")\nprint(classification_report(y_test, pred_test))\nprint(f\"ROC AUC Score : {roc_auc_score(y_test, pred_test_proba[:,1]):.3f}\")","4b94c42d":"submission = pd.DataFrame( \n    pred_test_proba[:,1],\n    index = X_test.index,\n    columns = [\"Reached.on.Time_Y.N\"]\n)\nsubmission.to_csv(\"result.csv\")\nsubmission.head()","21661266":"# **Libraries**","2be7c1f8":"# **Random Forest**","51fbd526":"# **Logistic Regression**","cff20be9":"# **EDA**","e0c38ae7":"# **Submission**"}}