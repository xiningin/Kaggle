{"cell_type":{"5013d118":"code","6c714341":"code","7db816d9":"code","fc3e976c":"code","1ac60b38":"code","bc057ce1":"code","6243aa5a":"code","960e0976":"code","5e2be8d2":"code","22908a56":"code","ce6d3b15":"code","b8d7ef45":"code","4e5e6861":"code","a74e03f2":"code","57cf5e41":"code","2d64b098":"code","f6ec2222":"code","1b807a86":"code","102103d8":"code","302bdb99":"code","eac1ec46":"code","515800cf":"code","16a53b49":"code","af810fdc":"code","ce0e9b97":"code","68262ad7":"code","654f3bca":"code","ffa53103":"code","9865b769":"code","fe6c43e2":"code","7a9adb91":"code","74559ce3":"code","ebf45cb9":"code","454055dd":"code","9589ccce":"markdown","6b33c2ed":"markdown","4d2ef729":"markdown","738d8a4d":"markdown","046cf3bc":"markdown","ef979579":"markdown","b44311fe":"markdown","af1de157":"markdown","c624f9c6":"markdown","5607c5e8":"markdown","e65553d3":"markdown"},"source":{"5013d118":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Tensorflow packages\nimport tensorflow as tf\nfrom tensorflow import keras\nimport tensorflow_hub as hub\n\n# SKlearn packages\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle, class_weight\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# setting max width option\npd.set_option('display.max_colwidth', -1)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\ndef dir_watch(dirname):\n    for dirname, _, filenames in os.walk(dirname):\n        for filename in filenames:\n            print(os.path.join(dirname, filename))\n\n# input dir\ndir_watch('\/kaggle\/input\/')\n        ","6c714341":"# Load the dataset from csv file\ncfpb_data = pd.read_csv('\/kaggle\/input\/us-consumer-finance-complaints\/consumer_complaints.csv')","7db816d9":"cfpb_data.isnull().sum()","fc3e976c":"non_na_complaints = np.where(~cfpb_data['consumer_complaint_narrative'].isna())","1ac60b38":"len(non_na_complaints[0])","bc057ce1":"cfpb_extract = cfpb_data.loc[non_na_complaints]\n\n# Reset the index\ncfpb_extract.reset_index(inplace=True)","6243aa5a":"cfpb_extract.info()","960e0976":"# Interested fields\nkey_cols = ['product', 'consumer_complaint_narrative']\n\ncfpb_extract[key_cols][:3]","5e2be8d2":"cfpb_extract['product'].value_counts()","22908a56":"# Plot the target variable\ncfpb_extract['product'].value_counts().plot(kind='bar')","ce6d3b15":"# Train and test data will be taken as 80\/20 ratio\nX_train_full, X_test_full = train_test_split(cfpb_extract[key_cols], test_size=0.2, random_state=111)\n\n# Split the train data into further as 60\/20 ratio\nX_train, X_valid = train_test_split(X_train_full, test_size=0.2, random_state=111)","b8d7ef45":"print(f\"Shape of X_train: {X_train.shape}, X_valid: {X_valid.shape}\" )","4e5e6861":"class_weights = list(class_weight.compute_class_weight('balanced',\n                                                      np.unique(cfpb_extract['product']),\n                                                      cfpb_extract['product']))\n\n\nclass_weights","a74e03f2":"# Converting list to dictionary object\nweights = {}\n\nfor inx, weight in enumerate(class_weights):\n    weights[inx] = weight","57cf5e41":"X_train['consumer_complaint_narrative'][:2]","2d64b098":"train_tensor = tf.data.Dataset.from_tensor_slices((X_train['consumer_complaint_narrative'].values, X_train['product'].values))\ntest_tensor = tf.data.Dataset.from_tensor_slices((X_test_full['consumer_complaint_narrative'].values, X_test_full['product'].values))\nvalid_tensor = tf.data.Dataset.from_tensor_slices((X_valid['consumer_complaint_narrative'].values, X_valid['product'].values))","f6ec2222":"for corpus, target in train_tensor.take(5):\n    print(\"\\nTarget: {} \\nData: {}\".format(target, corpus))","1b807a86":"products = np.unique(cfpb_extract['product'])\n\nproducts","102103d8":"\n# Method to define target static hash\ndef target_encoding(unique_targets):\n    \n    key_tensor = tf.constant(unique_targets) # class names in text format\n    value_tensor = tf.constant(np.arange(0, len(unique_targets))) # index values from 0 to length of the classes\n    \n    hash_table = tf.lookup.StaticHashTable(\n                    tf.lookup.KeyValueTensorInitializer(\n                        keys = key_tensor, \n                        values = value_tensor), -1\n                )\n    \n    return hash_table\n\n# Target encoded table\ntarget_encoded = target_encoding(products)\n\n# TF function will get build in the TensorFlow graph\n@tf.function\ndef target_enc(t):\n    return target_encoded.lookup(t)\n\n\ndef display_batchwise(dataset, bsize=5):\n    for data, label in dataset.take(bsize):\n        print(\"Data:{}\\nTarget:{}\\n\".format(data.numpy(), label.numpy()))\n        \ndef one_hot_labelencoding(text, label):\n    return text, tf.one_hot(target_enc(label), 11)","302bdb99":"next(iter(train_tensor))","eac1ec46":"# Transform the labels into binary variables\ntrain_data_f = train_tensor.map(one_hot_labelencoding)\nvalid_data_f = valid_tensor.map(one_hot_labelencoding)\ntest_data_f = test_tensor.map(one_hot_labelencoding)","515800cf":"train_data, train_labels = next(iter(train_data_f.batch(5)))","16a53b49":"train_data, train_labels","af810fdc":"pretrained_url = 'https:\/\/tfhub.dev\/google\/tf2-preview\/nnlm-en-dim128\/1'\n\n# Hub layer for embedding the text corpus\nhub_layer = hub.KerasLayer(pretrained_url, output_shape=[128], \n                          input_shape=[], \n                          dtype=tf.string, \n                          trainable=True)\n\n# Look at the hub layer\nhub_layer(train_data[:1])","ce0e9b97":"def build_model(embed_layer, output_shape):\n    model = tf.keras.Sequential()\n    \n    model.add(embed_layer)\n    \n    for unit in [128, 128, 64, 32]:\n        model.add(tf.keras.layers.Dense(unit, activation='relu'))\n        model.add(tf.keras.layers.Dropout(0.3))\n    \n    model.add(tf.keras.layers.Dense(output_shape, activation='softmax'))\n    \n    return model\n","68262ad7":"output_shape = len(products)\n\n# NN model\nmodel = build_model(hub_layer, output_shape)\n\nmodel.summary()","654f3bca":"# Train the model with train and validation set\n\nmodel.compile(loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n             optimizer='adam',\n             metrics=['accuracy'])","ffa53103":"# Shuffle the train data\n# shuffle_buffer_size = 50000\ntrain_data_f = train_data_f.shuffle(60000).batch(512) \nvalid_data_f = valid_data_f.shuffle(20000).batch(512)\ntest_data_f = test_data_f.batch(512)","9865b769":"# fit the data on the model\nhistory = model.fit(train_data_f,\n                    epochs=10,\n                    validation_data=valid_data_f,\n                    class_weight=weights,\n                   verbose=1)","fe6c43e2":"results = model.evaluate(test_data_f)","7a9adb91":"test_data, test_labels = next(iter(test_data_f))","74559ce3":"y_preds = model.predict(test_data)","ebf45cb9":"y_preds.argmax(axis=1)","454055dd":"from sklearn.metrics import classification_report\n\nprint(classification_report(test_labels.numpy().argmax(axis=1), y_preds.argmax(axis=1)))","9589ccce":"\n<a id=\"target_encoding\"><\/a>\n## Target Encoding\n\nWe will create a [**StaticHashTable**](https:\/\/gist.github.com\/venkat-krish\/a21808db141c58bea87bc309fccaa042) for our target variables. A sample code for creation of static hash table can be found [here](https:\/\/gist.github.com\/venkat-krish\/a21808db141c58bea87bc309fccaa042)","6b33c2ed":"<a id=\"train_model\"><\/a>\n\n## Train model","4d2ef729":"<a id=\"data_to_tensor\"><\/a>\n## Convert Dataset into Tensors\n\nIn this step, we are converting the data into a tensors. Tensor datastructure is required for training the neural network model.\n\n`tf.data.Dataset.from_tensor_slices(tuple)` [Click here](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/data\/Dataset) for more on `tf.data`\n\nOur dependent variable is `product` and the independent variable is `consumer_complaint_narrative`.","738d8a4d":"<a id=\"load_data\"><\/a>\n\n## Load and Extract Data","046cf3bc":"<a id=\"compute_weights\"><\/a>\n## Handling imbalanced class data\n\nOne of the key techniques to handle imbalanced class data is, **computing the class weights**. We can compute the class weights. The weightage of the class is given based on the number of samples available in the dataset. We will use the `sklearn.utils.class_weight` modules `compute_class_weight` method to calculate the weights of the class.\n\nThe higher sample classes will have lesser weight and lower sampled classes will have higher weights. ","ef979579":"<a id=\"transfer_learning\"><\/a>\n## Transfer Learning using TF.Hub\n\n\nTensorflow Hub is a way to share pre-trained model components. In this notebook we will use the **NNLM English 128 dim** ([source](https:\/\/tfhub.dev\/google\/tf2-preview\/nnlm-en-dim128\/1)) model for embedding our text corpus data.","b44311fe":"<a id=\"split_data\"><\/a>\n\n\n## Split the dataset\n\n### Train, Holdout and Dev Split\nThe dataset will be splited into 3 portions as 60\/20\/20 ratio. One for train the model, one for validation(holdout) and one for test(dev) the model.","af1de157":"## Import Libraries","c624f9c6":"<a id=\"predict_data\"><\/a>\n## Predict the test data","5607c5e8":"## Extract Data\n\nWe will extract notnull values of consumer complaint narrative records for the training. ","e65553d3":"<div style=\"background-color:#3c7852; display:block; padding:10px;\"><h1 style=\"color:#fff\">Multiclass Text Classification using Tf.Hub<\/h1><\/div>\n<div style=\"padding:3px;\">&nbsp;<\/div>\n\n## What is Transfer Learning?\n\nTransfer learning is a process of using pre-trained model on similar type of data(text, images). TensorFlow has a framework to leverage the pre-trained model network and components in a new model to get trained and receive more knowledge about the data. \n\n## Dataset\n\nIn this kernel we are going to explore a problem on multiclass text classification with Deep Learning model. If the target or response variable contains more than one class label then the data is considered as multinomial or multiclass dataset. \n\n\nThe dataset is a collection of various consumer complaints about finance products and services sent to companies for response. \n\n## Key Variables\n\nIn this dataset,  `Issue` is a textual description field which conveys the complaints about the finance product and service. The `product` is a target variable which will be classified based on the consumer issue description. \n\n\n<div style=\"background-color:#e0d52f; display:block; padding:10px;margin-botton:4px;\"><h2 style=\"color:#000\">Table of content<\/h2><\/div>\n<div style=\"padding:3px;\">&nbsp;<\/div>\n\n* [Load and extract dataset](#load_data)\n* [Split Train\/Holdout and Dev Set](#split_data)\n* [Handling Imbalanced Data](#compute_weights)\n* [Data to Tensors](#data_to_tensor)\n* [Target Encoding](#target_encoding)\n* [Transfer Learning](#transfer_learning)\n* [Train Model](#train_model)\n* [Predict Data](#predict_data)\n"}}