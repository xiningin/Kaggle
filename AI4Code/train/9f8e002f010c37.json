{"cell_type":{"0ec0e74b":"code","d39186f2":"code","9a6d07a5":"code","54979c81":"code","6b4e7e27":"code","a3bab903":"code","cb7edccd":"code","1516c377":"code","19a84749":"code","b4ffd5f4":"code","d4d15fbf":"code","1b483ce4":"code","a4905fb6":"code","2fccc201":"code","c7930c76":"markdown","be1efddc":"markdown","7e29e3e2":"markdown","2e69da48":"markdown","8f88784c":"markdown"},"source":{"0ec0e74b":"#loading the necessary libaries\nfrom keras.datasets import mnist\nfrom tensorflow import keras\nimport numpy as np\nimport matplotlib.pyplot as plt","d39186f2":"#spliting the data in training and testing\n(X_train, y_train), (X_test, y_test) = mnist.load_data()","9a6d07a5":"#changing data types from int to float\nX_train = X_train.astype('float32')\nX_test = X_test.astype('float32')","54979c81":"#using keras inbuild categorical function\nY_train = keras.utils.to_categorical(y_train, num_classes=10)\nY_test = keras.utils.to_categorical(y_test, num_classes=10)","6b4e7e27":"#Reshaping the images into 1D\/keras.layers.Flatten() can also be used alternatively\nX_train_new = X_train.reshape(60000, 28*28)\nX_test_new = X_test.reshape(10000, 28*28)","a3bab903":"#normalizing the data (z=(x-\u00b5)\/\u03c3), where \u00b5=mean and \u03c3=standard deviation\nX_train_normalize = (X_train_new-np.mean(X_train_new))\/np.std(X_train_new)\nX_test_normalize = (X_test_new-np.mean(X_test_new))\/np.std(X_test_new)","cb7edccd":"#Building the keras training model\nmodel = keras.models.Sequential([\n        keras.layers.Dense(512, activation='relu', input_shape=(784,)),\n        keras.layers.Dropout(0.2),\n        keras.layers.Dense(120, activation='relu'),\n        keras.layers.Dropout(0.2),\n        keras.layers.Dense(10,activation='softmax')\n])","1516c377":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","19a84749":"#Finally fitting and training the model with 30 epochs and batch_size-128\nmodel.fit(X_train_normalize,Y_train, epochs=30, batch_size=128, validation_data=(X_test_normalize, Y_test))","b4ffd5f4":"#Evaluating the model\nmodel.evaluate(X_test_normalize,Y_test)","d4d15fbf":"y_predct = model.predict_classes(X_test_normalize)","1b483ce4":"#Taking a random image\nprint('Actual number is {}'.format(np.argmax(Y_test[6669])))\nprint('Predicted number is {}'.format(y_predct[6669]))\nplt.imshow(X_test[6669])\nplt.show()","a4905fb6":"#Taking a random image\nprint('Actual number is {}'.format(np.argmax(Y_test[5483])))\nprint('Predicted number is {}'.format(y_predct[5483]))\nplt.imshow(X_test[5483])\nplt.show()","2fccc201":"random_num = np.random.randint(10000)\nprint('random checking for {}'.format(random_num))\nprint('***********************************')\nprint('Actual number is {}'.format(np.argmax(Y_test[random_num])))\nprint('Predicted number is {}'.format(y_predct[random_num]))\nplt.imshow(X_test[random_num])\nplt.show()","c7930c76":"Here we are using the keras inbuild dataset of mnist","be1efddc":"# Digit Recognition with Keras(98% accuracy)","7e29e3e2":"Let's test the models predictions manually","2e69da48":"As we have 10 classes(0-9) hence we are going to convert them into categories. It is almost like scikit-learns Onehot encoding","8f88784c":"# Our model is well trained and predicting accurate numbers. \n\n# ****If you find this notebook useful please give an upvote.****"}}