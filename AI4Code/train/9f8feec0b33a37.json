{"cell_type":{"af2fa273":"code","303b886d":"code","5ef5577b":"code","a697d461":"code","14b8dd91":"code","86cc9d21":"code","b8d033e0":"code","ffed3f01":"code","91410758":"code","769c4bf2":"code","c79a7280":"code","9aa84225":"code","d38e6837":"code","c2e512ac":"code","6d100f22":"code","2fd1511b":"code","fc03c146":"code","b135377e":"code","bbe27059":"code","b2945195":"code","0dd33fa1":"code","e7d5ffec":"code","3173b338":"code","a173f7af":"code","bc2c3ced":"code","01f3a34d":"code","579e4959":"code","dcf4738e":"code","2b06169e":"code","6e8c8ef6":"code","38ab3552":"code","86726e84":"markdown","536dd17f":"markdown","d6d1909b":"markdown","07d0c2d1":"markdown","902314dd":"markdown","b67e46b5":"markdown","9f0c2766":"markdown","21225707":"markdown","85093185":"markdown","0cacdd5f":"markdown","0e61fc1b":"markdown","0e9792c9":"markdown","a50389a3":"markdown"},"source":{"af2fa273":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcTFee5y7x26Dk1OsT5wm-tzmtAtw6LOM01ivzbPqSebL5f-pDBH',width=400,height=400)","303b886d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","5ef5577b":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadsbiodiversitycsv\/biodiversity.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'biodiversity.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","a697d461":"df.head()","14b8dd91":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQ1IAv88iaDWWF9IYc43RvcHDIyM9Nw9CuL1DUf3qdjtW0NicOn',width=400,height=400)","86cc9d21":"df.dtypes","b8d033e0":"df[\"ZoneID\"].plot.hist()\nplt.show()","ffed3f01":"plt.figure(figsize=(10,5))\nsns.heatmap(df.isnull(),cbar=False,yticklabels='',cmap='viridis')","91410758":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTEhUSExMWFRUXGB0aGBcYFxgZHxggHR4fIBoYHh8aHSggGB0nGxgdITEhJSstLi4uHyAzODMsNyktLisBCgoKDg0OGxAQGi4lICUuLS0uKy8tLS0tLS8rLy0vLzAwLi8vLy0uLy0tLS8vNS0tLS8tLS0tLS0wLS0tLS0uLf\/AABEIARMAtwMBIgACEQEDEQH\/xAAbAAABBQEBAAAAAAAAAAAAAAAEAAECAwUGB\/\/EAEAQAAIBAgQEAwUGBAUEAgMAAAECEQMhAAQSMQUiQVETYXEGMkKBkRQjUqGx8AdiwdEVFjOC4UNykqIkshdEc\/\/EABoBAAMBAQEBAAAAAAAAAAAAAAABAwIEBQb\/xAAzEQACAgEDAQYFAwMFAQAAAAAAAQIRIQMSMUEEIlFhgfATcZGhwTKx4RRS0TNCQ6LxI\/\/aAAwDAQACEQMRAD8AwKYjzwSyjVPSJ+g\/4xFFIH7via3H5f1\/rj6bqeDeCvtiyMS0dYNsWKoPph2ZopQjtub3+IgGfoY+fbF2jFVNG1QIkxNz1AA9dsX5ehACzMC5j59yZvfznENOSi6LatyV+AvDmY3Am3Xy+eJ0q4c6+jSbDv8A0vh6qSIi5tOrSVBmT9P6+eGUhWWkbFpAItuZgfWb+mM\/EfxHnHAbF8NePIz0l0xMq0Bbecn5QOmFS6gEyDY\/8H5AzvinJ12FQ0XEoZIIvcm3zhpPe+1sFUmgqzCNQPaAeg+o\/UdsSjPdK2VlFxjtHRdUQInp\/wAn998UGqASYmAPnvadp\/4wU1TTqZbG8DeDBgxO1utu\/nRRoEsbbkGPQAEfUTbvij1c0vfJJQSzL3wPVBmL+8dR9egmNrd7R1xTUMNJJ0gR1MEzf9+WCc1ZeUyTYdZO5Hrv+WB9ZPIV5tyJsQRHSbRIv2N+6i9kVDqOffk5pUmPXqrq0gGd4A1RfqbAfPF9ZiwAtyzHS0zuO0\/uMDiKY5hIBsdtyBpJJvAJ9Z8pxfUn0PW230EY3GVtp9DM41Tj1Beadv39f6dMMyGx1CCdhubdfp08vk5jUATMyLAX77naJ\/IYsNOD026GRvbEZPe0k+GWXcTbXKHaqdAQC2qSflA\/U\/XEqGXZjABnfy7\/ADNtv2bMtSDEDoT53np+nScd3k8pSkUPDIUKCWYAazt6mTvYfQ4zrdpjp4XUWnouWX0OV4RwIORqBggzbYqbjzkER6HGpxnhyqFNJb6GAiJvAn89\/LG\/Ty8LUTZiD18tIYdpH0P1ISzrbXYLcjsI6xYyOvW+OKeu5cnRHTUco5MZTM1Ipqu3oAsCI7Cx\/PDY3uFVqioJl2ceJEBdKMeUdgST9F8sLDj2l1hGpaKv+TjqaYjIBvYHv3\/5wRRAIkQfzxKrQEG0j+m1++\/649qbo8qKsEpsyNudH4t9+jeXme1+hNhMFgJAGw\/oPK4gegxPLqy\/dm\/4GPxd0PmP+ehGKq1RAyqZGoEwR7sXBM7CDMja46GObUkkr6nTppt1WCddSzKALgAhu99522P6Ym9Ez4YbSxBJIOrqOnQwRB7Rvh69bS4EiNWjVI+l9jYbxuPmNxCsVqypMTBMCQfh63BHL1vHljnlqqMlXqXhpOUXfoGrTJgNM6pJEHTpmDtMEx02LdpFSjZGBmAyFjeeUFSZhtJcGBeJ7SSK6FlaIJIlTETYTuZIPkRM\/LFFTLAzRddMsWpm8qbQ8mYi8gm4JAkAgcmrq6rdt0mdGlDSUaStosr5WysJDLBEg9rg9YuQe0+WGakKqLy2tYx5grMe8Df1HXDvTYgEMsaoeT8WwJ7gmfXpvi2WFQBrDmnrvpltpWywGPr0xeeskqXil8+pDT0W3b838ugmy6mTogkC5EmYAiSfLFWvYgyTaZMR38rwbd\/Q4LcMJFO4ZCzEqNl6gCJJ5T2n82y2RAUMWDHcWMQZCsBF1KzzdfnghqQlLu+AtSE4p7wUVYEDU+q0gEwSYE2Oq7GAJIEDreioSE8UGNNzb3hClluJJvE+XmMaNTMENuRykqFDDbYSBvAHu9dVjGKxFVWpltTG026+6L9QpW9zJAjGN9TtNFNrccplIpLdzsXgHqCfdFxew69SPIlyZ1baepNo3kwJ7z12m98RqgxoaFUEgRBkFo1dCOW\/oFN9NicpkXNI6oUrqRuo3IBiL6iBf17HAtRzi3LzE4KLVeQF4ZYJpFiJmJKiASf\/AK+UwDGD8tkHqsqhStwDtaLlRuGiYnuDgrhGWVRL3JI0ghZAEmRb3jAYDz3gW1cg6Ui1Q0xZeRbDyYA2MljpJgERcLeZT7RU91+huOncdqXqHZfh1NNAUDVri8gzeel4HOLbr2vifFqlyFIBpVKbf7VhnHkSGPyWcCZbNrW01EYG3LpGlgtwYKmXQsA2neQd5XA9euvhtqU6WkimoupmCzEW3K73sPnyT1N2S8dPbg3q33bDcszG1toLT5AbekYyOI5kEsPe1uFI\/kReePUjT6tijL8SLArDPVSmoF1O5ZZBHuk6N97z0ggcRzADMsctJFmQYYyFUTvbQD3uuG5WZ206NHM5sS1KCDOpyCCT0gDsDpHkBhYx8xxAUlIZdQkWgBQNvjiY2mP1wsbbXVjjpykrSM9KUXA9R\/X1xMQYjZpv59P6\/pi\/LQ1lIJ7Azg48KaNiJ2I6Hf16fuTj6GclWTxYRdmPTryxVgLWk9zdW8p2BHUEdpZcorNULCTAgQL9gdgeo9LdZxrvwvmlgAzKQFJHMAGJUTZoI1Rf4rXwJUyxp1HkEwRztMRsR03ix7xvOOKc4S7vvqdkYyS3L3wZApgDlRXhXuZJbSQAxMXa49TOLEAIRgL7sCIgCARvIQamPYaptci3ao2m69QVsGlV8SN2kTa8W9BQ+YXwtegsyKbFgARcCTIkEgbgT2tjk3pQz7o6drlNV7sKynEF1Kq+5a5B6nniQRa9ukR5kTP5Op4jEjnQwyLFxIVWWOuog76rd97arBXDrMQ0gRH\/AHAkC4i9rj1jGhRQVNJIEhdBXUYMCyMbb7WA2E+c5W9t5NKoN1gzOGZgwr2Gozp1bMJHWIkqV7AwcEa\/vAIMQV2mNTQDeQPzuPMDAfKGNNTGq8EzGpdWsdryp\/7V31YK4ZSJkatK6goImJAgdJPMB9R54lB76j6UN91t+qYRmkCLAljJklQbNu09+5PZScTTPDSwUgBVURcaDC7TBZSJbtYkRJJHrvY64EagSU0yTYNqMgSZ36gWxZVo6m06lLGzkLzA2InmJU9bMPhgDF9SNPcvIlpyVU8gpcMHYlSxRmmD0E\/CVC\/DYAX740HcqPs4MksJdTpKqYE2WDAAvaCVOwOI16OmnBEOSQCLkyY1CFkNBgx1B6WxXwtiztHKscpO8SYInpLDcWEXEYhqOmvP8lId6\/L8BOZzKELoWAsh1FhbYRsQSDe\/vwJmxNIqXLCadxIWOYFrEgiJ8IKZ97zFhjEzisFJ8RTqDGrCza3PA6iwIG0idsE5eiTUBJGlgSSC4BhwoA6XAa5sdRvtgU1\/uHODSwaGcadY0iKcRBiwkyTumxFvxCbHAVGZ0VDoF6hAUqfdA0mbEbMJHUixEYLq5RzXpFVTQVLVCwBOkQCRJgsutSCf5iZ2wAWBOhmIfxF1VGdTITURMWkuzwDGwEGYxyzrkvCVJIkX01A71KrhSWqaSU1rBCAAQIRLGT8TxGx2crxFabPFI01UadgkX9dzKj\/b0AGAspkAwK0yVNN3bxdHiG5IVUYiFbRflOm4sZg6NelTOXqIaaIWBVXOhUEDSAJa5F5EmDqEm2NacuprVSeDC\/xjRVqPp\/1CW0ERZbIL22UEDuYviGcqFqYEwObUTAEnTpCj0UEH07DB65dfsjVQZ0LJJVgNW0EqIMlo8go+SObo+D7jAqpVgZAUAcz6iACWIKgdoEbztSzTJSWbSMOrl9ZHMSfiLA2kbcpAA5RaNxvaMLB\/F6VJeRF0GYYwTB96BAIbf0HnbD4r3eqGnJ8Oi6Quk1aSwZgvDKSOgIBIPXmC2vg\/iGeUmnSQ6dTQ6FoIvcQbwVDwVsYEGMdLSybrqqzzNt4jMbAkhAt9Ai8iWPUWCjI4rw+nVUGkoBMaFdGQBrct4hNIB5ZESR1npnryf6iC0ox\/SgLJZtWVXZTMEFDqIBUnmAB5W1CdW8FT6UV8u4bSoarSPQsGZJiFDMZ8PUJjcEgA7DGgHopT8V106ReL3JUwp6lkAN9wZ6yNKoaVUCVCsoDKULajcsUGkgVAALrN\/URiGprQ6cm9OE1dvGTjwpaqFkiNYnSSQwIkAC9hJuLb7RirjfD9LIA2hTDyLLKtDMTEWIAE35ibnbSoUWXN1CQXLUyyXSSzimphtn1SwkAdI3ONPjNalNJ0A8RRUOnT+JdZYggAMpRSRIggGwKk8q1LhXgyqSUrRj8G4SS1YNUp2Kh2E8xtGlhJpspb3HSRYSYLAp8gFdlmJUgEwLhdS3WFJJabSfI4OXIaj4yMJLHVv7t4ZbShLqlxqH5jA+ez0toZohhoFjuJVgT78eQG8C0y5a8ttC+HFytLJz\/Gci9BacnlJksFaFs0EEG8ENHcWvGK8nmWptcly4BsAACo2j4jIghesdzG7nw7CpSddTsqqihxGpXYa1NpE1A3Sx+ETGfn6dI5qg2llptQercFg2hG5ibatUgxcdNsZ09WpWvfRmnC40wT7Tq1KwAa92JIAMS1x+I+6YvHSMXjLuhU0UVFJjSW1GbnW0W1EgLabSfPBOfyUeCiaixpyCNUp+FVtpYkqRYXgnyxlLxInkVArFVHhxLAKJBke6CCRBLEGxjfF9XUvN5RKOnS4ww3isDSruSSTKq0AgEBhax3gyNQ1SIMYKOWRAtZNWk6ufSeqHUb7yRT3AiAfTL0HxB4gklWVBoCKADpIH4RMT20SY6SzeeqoNBKkVtVRT1QiPEBGxWendu1jN21uQX0DVpNrUlVsoXmLAbrKX926wWgzpM7HD5MLLKF8NEYkqNgr6QCeUkqNakgxIK+YJWUziEUy+oSEcmCxMEguIkty\/qB1xOvnlrOGCSNJZwQQCqliFgKTvUU7gWE4xJ9LHFu+CviGabxTUAFOn4YpmpIe8k1FGnlEhhv+COt6eDcJRkupNQgub6dJ1KxBY+6JLGNx5zGB+Hg1Ms1JHmpVRRo1BtOvZtIJKBYkEiI7lrGcSzWlPCQk06Ygd6hG7H1ODR0p62ptXzbfT30RSc4wjYXlWpINAzKCo2oOEbVqYtMqogEmxIg3EbYty6cqKjU6xDFuYsGiZCqhtbe3UDbfHkef4iSVci7O8qxZlAhSGUA2ZZPT1noZ\/mKFIVFprOoKDAUkQdGxWd\/We+KPs8Y8Td+lfSk\/uLfJ9Pf1\/B3HHsxARFUqxqltJ5SRq5V5bAl2DSAYjYjDcRzRLspprTkahy+6VGkgMeisjAeobm1YyMhxFeIJUR3IrUFJ1jSTVpXuwi7IxBNgSDa5s9HOFwxU1NVQgMSATB6AwCDI0dAAJG+J6bbbvlGmqRZnswVEOXUE+6CLrcwIW3MZJuSYk4fCr5WQAG0vtL7Rvcm5HlG\/rJfHTRNSR6Fw6k6c9S7rIDmCdPQyBzEj0I2G5JzeH5R21PUqFmTmp6SdK6t1CgnRp5gYJIDC4up0TV1qfEVgoIJC1JkA\/CFp6iOt4NiNtx6yrTqWkAioBp0aSOWxsAQLnVGoHcxdnNK6awJN5d5DalJGpRUCGpUXQzECwA5e0EbQI94+WB+C5wKvhuT4elTqOmFYsy+G5a8XGlt7i5icAeMknWQjsDp5ZBMczCdpYMdP0nfAfA86FquohUq6aokKIDcrIu2ochIPSbjfHMncrNvCohnCKedKAoV5NJYn4yRduk9+5nrdcW4kCKikD4XtUDBQWlxPKSt6kWnmvY3yc6\/hZwILr914kxIk1BCnlK2pE2\/lvGCeOUCKfh2moIBcq4p6SOZbyNzJtF95MTqr8DcEnzyGcL4zS8JeQtpUKwIkMEaBMwFfQ\/ugc2rqwAW3PZum1FiCGqLTFVmJBhjtGklRYvME7CSbYyfY3Mp4FSmyI4nUTpjlZQZmI5SCAAbGNsBZ\/VTasC7Uy9JyFCqFqE\/ANTNpkTAN5jph4wjMsnQZnOK9eqikEIFYJrADhdbwLHWC0EzuBc3jAXE305qjRsyJVqAMAFmm7FoJJuIaoI6iYxi8AzIZ8zVKakgU9gBu8KBBaeVFCgSYNtsV+0XENVekcxFOmGk00YEBbqVMSHa4CgAAAfFvhKPAJ178TZzPEhUqBKbeGtQ6tesmaaCFNNX06jpS1WSGKmzRcPgWWbW8aHpy7SbsdSoIJsSQAbzBg94F\/Cqv2tzIqU8uskNDCoxUABSxUwAxtsQTIJIxXlCRw9iQyzRqtOlA0FmhjEMCCgMGbFrRgfJrFZRt8JzINVDmJBpIdLCIfZSes3pC3ck22NNTIpms0FUaggJLCAGIVXeBZXEvSv2Ld8EZAqwzFlIVE1W9xtOoe\/a5JIB6N5nGNwmp4dTMlVqaCrItSmJ06mDTeBdFAtflH8xD3PakySirwQ4VnNJSlVCgUkZoEiRNPQYb3hNUrv8JBEGcXZmAKrlyKtUilpWyFbaiGn3lZzefeVpBFsVZ\/PL4zVKlNAVU3Dsw1kqHgxJuGsDBDRJGxWYpFjRoSxqqqlgVHLq1OzRpBJLEmGF+95xOVt2WUa5NfLVtTjf7ui5p6tNpsGWJKgjuSdvLGFxasaYCgTIvv1t0xDh2fWnVB5Vo+I9I7kqFQBmDDp94pnqAO044\/jPEa2XrvRrszOpCgsx5hMq62Igi9u+Onsmq9PfB8uvovf3JSgp1LorM6pTNSqAwkc07iTyz0BjEqWUUBDpUXPT+U\/XGfl89DqxI+K56TF\/yxaOI8q8yyGMC20ET+eL2OjqPZw6eK5SLag6NFpBRp\/ofljXyY061O4cayGUawdLBu25IPoe2M\/2XKeKeIEg06KlENwGquIAFuilie0jF9ckObFabcplj02J7fF27QIxBZ1ZSXkvXL\/KHK9qRoZyoUBhSCRcMygC4MwGgkmbg9bgYWM3NK5XULBTBgssm0GJjYjp54WOjJNRR2GTzxKk8yjoUK8o81a4GwNiDttivMcQ9zSrOpclarmoEQkQFIsFUmLqCJtsMY4bQDXqDWVCkaoXwyDducmGLLpJmNrCZwd4TPSJrM2tkY6FNpQjlsQNXqDcG5kY4tSckrZ1KMUyORoo9KmzuzVG94BhAiDIUWAsDJlr95BWUpsq0iQSyoum2mW5iikNYHkIj+YkRNheEE+A8ksCmkbmAS2mwuI9225YdpNytNAkQTTVDAG3hyxNrXs0bmYtfGFKsmZd7BRxF3+1KDd6i0pmBBpPVLFR2AqXBvI674I4nnkJqUXF2KKDtBmJVoMKehixJ6bB8RzoNQVJUOiOBEEyfDGrs0gi\/WWsLk2+GwWqahh9S6FO8TCgC4\/Gb+d8anq7UycY5VgmRzq0kpMt0hpBUNYStrzNtpJhekYqzmTJFSnpJC06kSdQIAhYvOsSRqmxUnaDiHs7mQSqkMlSnqC7EEBS3xe8IWT+GBBAgAvN1CtKiV0wFamRFkEjlvzW1BSYiN7knGF3X78ze61Rj+zlqaPBc3lJMMWVSp5QZFm3jrF5ws2UqJVr1p1aZRVhV1QFa5mQOYlYjcnbEuHM9FAwUM+jSrAWDMCvzOkkAGRzbDfFuazS08mRVRyGVhCGNpUTrUhWZQ7WnY3DRjVu8GHwbq5aiMsWpoKf3Tml4mgTLUwhXWJNhcnuOwOIZJ\/\/AI\/hgKQaTqzjSmoNJdiy7+8RYAWjsMPlMoml3AISnTZwxYQVKr4RMzAVQCLRKnAXstWpOoY3UtyU2SRpFNeaACdcq3oPUy1bfgjN2mUUOKVTNVaYU5goGAZjJWnN7XhF9ebfrgyrn3oeIgBB8XkIQ7sKagMpTaAN2ESLcxxi5LWmhUsTXMlix206QZsFK6jAiwj1khZWXxmMkeIxUyssSQSIsNR6wAXA2jDcW3g1GuodX0FWbU5VIAkEc1RpZIJ\/AWYjuTg7M8TBbMVF8QsQoQnlIAgnmUqQzLpEk2iPXI4vSRcr4NFg5qVDUkmCBZQo1bHSuzHYnAlfNVDlqpUroRxrIAYVGYwUQ25VWBIHNfzwlG3gLaKOE5guqBiVBYqxkCZkED\/bKmdoXG\/xoZPNJToV0KMiAJUpqdafyhTPiU9oWZE7DGRSrEVKADFtJnUSLQUENcAmJEnz3i1\/EqtVWd2f7xQqLqVDpLiYJMiCHBBB6iNjh7FLIJ0Z9P8Ah\/SaPDz9FwfdlghP+1hI2P0OJ\/5KydAhsznNQ38OjDswvu0QosZPlhVOFM5epTDlQYpslNjNrNFJSAp1GwA6dMFcYyjo9JGlUUwCx5oADONgSRcE9xa8YXeb27\/2KblV7QjK5nxWU0wKOVy4inSQnrJt1qOwUkk9fnNuYquyowUEg6o\/GQNXwiwKIRPTWPmNw3K1NBFMgGkOdrlWB23BidJuPxbwbLLM4qjKrTHjKSDq5VAKkqDzCeWBpHY3gzi2kkokp28luZreGdSqAHprEANcQRcgQxRyD0hB3GFirO+z9ZKTprBai8REgCEj3QTBFYeQII7YfFHJiUUbPDs3TZGZtC6VY1QVBIKyZmDKaASCCN\/pLNKqVFBkypE8sqAh0fSooM9RtcSedXNlDUQs1wbkd9lsZFwbnoT0gYv4znWaNdMjYoBpEhRN7kifpf68UnJujppVYf7PZ5adGozMQF1EEWaOdBtuFnVtMgHzOrlKswSoP3QLKIVRJbUQF90EggC87wevIuyfZ5TTIrHULfeL4moCARcoIi0+WCKeelF1kgoYi8sFaVNu3iD0M7XxnbhmI8l+ZN6TMoKpmEpOTBDKyshOreQVVuxMGDOBeG5xhl3dyT94OYFjLaYe5vs0kbTqPW78Z4lNKrTET4yVAIHLzsTaJbYGw6jvGKMvUWnlJGliyu8HQQ2om5Vp1dBci8D1009tGUaGSzcOupCusHQRy6SaNW25aCDHon1Hzef5KsLZqwIg6uYldRYAmzFFk+Td4wqQJaNTjlOgrBNwwN4MSCw67nrfGWaqiqaYJnw2Y1NN3c2B726enkJEsmbNbhp1VW0MQooIyuQSAxClQRvELsTChdpMYjXU5gmmwJCUGdg4MK4DBZge9NRifP8AKj2dq+EaiuQZpgaQDYSVJFrjQq\/LV6YNy\/EHV8y6L4rVCEAtfTJgDodbsI8jjXDwCWCzO12oo9NwCHy\/hPzTAFlEAxOkNe0TgLhXEg2XRdQEvyAQCsBaarA6Qk9AT26Z3+Ia6VbNMIJbkWfi8ViE+jLc9vLA\/spnggqKS2kMGH8oWYM+oBtcwY86RTUaMx5D6OcqLABkIEJ2IYlbmxCxN\/SJ7Y1aTms6AKQwbRTYtIIQA6mKgGdTLCwegJAGOaqVAqwAEOhVYmIJAURExOkwSPPtizIZpjoCtoCISxYgaoIZitokwLXMyb4Xmb2qy3jmaZ1pqYWoRYqwUaTqlYEb6gL7XEGcBZx3NKmqkhWdmsbCCJJGy6VdBfrPfFeecDSwMxTEdJARjP8A5acPrGltKCRTUar8pd9WoAkg8qKp9fLGtNUjKeDfooqVKhpKCUKqk3JJGpjq2LQSd9wLY1sxxTK5Y6c2tE5kt4nh6GZaIIARXiQ7hVFrAWtYHGV\/D7PyXLoDToU3rk9JTSyKI3PLPzI645TOIWd6lRtTs5LmASSxknf97YzpRT1Knwvv794HT2Y5O\/qe21J\/\/wBth5KHWPkoAxTU9uKQGmpUFdOqVEZp7wxWQY6zjgkyje6VJPa3ffz2OKWy5mCv1H9+nnj0pavZ5R2\/DjXyOeOhqKW7c\/qeh+LRTLPmskwakxCsKk6qTamJBtddLBVmLbknGXQAp06LByGbUajzIZtJNMmLzysO3NOxwN7AsBmWy3wZqm1M\/wDcFLI\/kVZSB64Cz1Ryi\/dhTIKsAQd53sfmB18refH9TjfHHyf+KOprCZ0nFeJnxC9MtDIqmCCwZZMT30kzYWCz0wsci+YYjcgESF1GD2Msdow2KUgWEG5SrFQyNKkEOQB06DoJG3XcxjTDa9LFjqILAkm287mNgBYdMZDGFg7ss73aAYUm8Ax+cYro1maIaABJ23g6Y8rD6R6c7VlLRdwzLZioXFAiVJBuApttDDaT1HXGrVWroZ6ehgurXocPEc0QLkyOt9sQ9h2P2ivJ3AMfS\/6YnkycjRqVKkMapimqXBsxBLbCQZ+R3xx62vNajhGrW2l43yQc5XSMjM1WYGqF0qQoNo1RBLHz1D122ws9XJoVDNxqgQLS8qJiYAIMTvfpgulw\/RkkqGi1ZqhAFMahAg3Om+y\/UjGknAqYrCiQ3g1KWsCSCpQqCvmCHG97Ys+16Ueel\/bkctRWZ1HMuQNJ3EaRPUNB9Ocn5C+M3PuRWMXaCAf9rkDy5oAjaBjoeCihVaqlMVFelYOTZulhMRKixvGAq+WigmbNF6tSqRFNS0IpEzyiZgAT5j5pdpgpVTvivnky5KyOS4pANTUoRWb5GVA9Re07SfmRSzbUaU6oIptUYAj3jpcbzHMT+WCaXs7RDNl5bS6mokm42DA2vBKkdbntgbgvC1r0W1yGK6Qkm7UzzEzuNRUH0GBdr0drl0x9\/bBzTRiZoMMtTT4g+skXiymfUaiPM4ORYll1yVJmOt9o6jSsn0jrIdOqoy6PXL89RtIQgEBE5iJtOqFk7b7gY26QStlqlZab0jSQ6ZYlXWNRGwB2vG2LT11BZTq6vpyDdGXxDILTy1Cq7atYW20cuomSbmBHTfFnCqYqxRVtBJZdV26ajad+4tuMH8Yen9jyjOhcSulA2gGV6kAwoE7eWJ5fhqUs1lqtKfDrSYMHSfDJ36giPmPpyrtL+G93Pep4rF++Bb2kc\/xWn4bVKQOrw4VWi86kbz6SPri1KzihUqMwYEiRcEEgAOIs1kI7C++NarwhatXOVqgZ1pudKKSCzBZiRfqP3uHxXhwGUp1xTNMghWpkkxfSpGrm7WPfyxfS7VCoxfLpX5tX7xQKSD\/YBVL1csTevSq0hbbUh69OZYgG588YGoSQV5lB1AyLzH5eUdcOc668ytpqE6wbSumNMW3Liem3yxu5vI\/4h\/8AJyoVcwy6q+WmG1RetSBPMpJBI3B9can3Z7nw\/sdOk7VGHl6RUNUWZ5Vg7jWDq6dtMHqGwQ5LcyAQGgCxMLFr3J9OpnGXnswyQGUo4IuykEEG4gjsR0n6xjS4bwmvmGNKijOQdJMEBQCwMtJA92JY9fITuWO82bT6I1vYekFzgrOCFoo9diIhdCkGY2MsBp364z+I1JU6pYAjVBg+WkxANz9MaGczNPKUGydF\/FZxOYrgjTK3FGmY5lFyT1J9QOezmcmB26Gb+Z6bCMLTTcnLxpL5L\/0zN4KzpBKltene0dfdv1uTI7DCxSK8GAJ1KJ7yD6YWOglgIGYLMpMe\/vGwtA+thhZapzkQNOk\/pN\/z+mAg\/TsR8vIfTFlCrciekf2\/rjFA3g2vY\/ilKjVdqzhAUUCQTJ2Ow\/lxdwfjNFqNbLZl9Khj4bwTYkkRANwbjyMYb2K9j1z6Zuo+Y8Bcqi1GPheLI5y0DWtwE+c4xuO0Msjr9nzRrh\/fJoNR0EbCGZtU7z0xDU7HCbcm3br0rwJuObN0cQpVcquXauKVWkeViWCuFkAyNgQdjeRij2ezlHL5ktUzGtfDYaucqCWXlBIlrDeIxzakm5i1yJjaD+pGK6rHQAQRblJB5ttv1wf0kdso26fy6+gOJ1nsvxOjSeu1R9KsSFMMdUsew\/XEKfEqeYydOga3gVqUQWLBWAEAah3B9ZGDP4nez+X4fm1oUC\/htRSqdbajJZxvAtAGB6nsplqK5Y57NVKD5tBVphKIdKSMeRqrGopuDJCgkDfpgl2OLk5W7x9sA4mZwzODL5ikxreKBZ3GoqA0hgNV2AEGY3HljYPGaQzqNTb7lQ2ow12qHU5uJsY6fDjLyns3UbJPn9aHL0qvhbkO7MwFh8I01Jkn++MtGIVn6HYxA22HnbD1Oywm7l4V7+obbOkHFcr9uViR4KBghKmA7nWzwRI5mK7WjyxdSz9KM5TfNo7Vg2hjq0qCGCrMbjVsPlN447LqHOxLCSYFzt+mKzJkiWMHaTA72xh9ii8W+EunR3+\/ItiOrz2fo1cvQoLVRalJUMuCEJ0kESQbgkG4\/PBVXj9Hx8qqvNGhIapBALaCogRJ27dcQ9vPZ2hk6HD6lAuTmcv4j6mDCSKZ5bWEse+ORqkqvMIaZgiCI2\/PDfYocNvr\/wBuR7Udjl+PUDUzVFnK06xLJVANiUAPSRsDPkcc\/m6EaV+0rVJbZC7W6sS1hEbCd\/LGUQS3eSRYbnsPyt547Ov7OUF4J\/iA1iucwaJBPLpk\/DG8Dv3xvT7NHTdxfh4dMAo0cnVqyZuRss9th84GL8vUIioJDASGDEEdJBFwYP1GBadOdJY8oH1J6fnjb4FwOrmgXlaNBLNWqtpRbiFH42ge6PKSLYtOSislIq3gMo+22eAKmsKsWXxaVKoevVlJJsOuB+J+1WbrgpUzDGnHMoCot7EQgAYX642OKcA4ZltK1M1WrtGonLtQCyxIiDqIaxsTtgMcEyNcaMrnDTqbinmwiB9hAqJyye0SflOIJaS72yvPabuV1f3ObDSszpAkR5f3tvioVdVgNjE+RjfE+L5GrQqNQrIUqA3B9bR0I6yLHA1Nysjyx0qmrRNltRJa02F4EkfucLFSv3674WGIVExPp\/fD0T2OKw1j8sRFhgoZ6x\/BuoFy\/GG0hwuWBKtMNy1jpMEGDtYg4u\/hPxFcxVznh5WjQIyTjTRD85LCDDsxkbWPXHmnDeN5igtVaFZqa1l01Asc4AIAMz0ZvrhcJ4vXylUVstVak8adSxcHcEEEMLCxG4GHYj1r2AyNOpwbJU8wo8KpxEAhtnEtpUzuDUULHXbAHt17T0KVXiuSzH2ms1WBSptTQU8uyKTTen96SFgqSQokDbHnnEva7PV1ZK2aqOrOHIJHvCIaw5YgRERifEvbPP5il4NbMu6kaSCF1MBcKzBdTCehOADr\/wCPFuJUwbTlaf8A9qn9savsb7T0s2uW4PxPJiqCirl6sQyqUBpk9RKR94p2iRuceYcZ4tXzbipmKrVX06dTxYAkgWAsCxPzwb\/nbPrSFEZpwiJ4awEDKkQEFQLrURaJwAekV6denwTMZXL16jkcSbK0m1wdGoIqSIAU9QIHMcafD6dZafFcjncyc01LJ63pikqUaBKFlWmbXggiFUCB128b4b7RZrL0HoUazJSqGWSFIJgDUNQOlrDmEGw7DGh\/+QeJs2s5uoToKGVpwQYkMNMObbmT54LA9PzPH6+Xb2cSiwUV6VBKvKpNRW8FSpJEgAMTY7wegxd7XxksjxXMZL7qs2cVHqJAamCKZKgi6glyfWoceN1\/aPNM1AtXctlgPAJ0\/dQBAW38q\/TFmV9tc\/Teq65l9VYjxZCsHgQCQwKyAN4nAB7L7R8NzmY\/w+rRqJlWp5B6laqaYJpAikW8NQLPYgaYgahI2L5esK7ez+ZYtUqM9VTVqIqu66G94KSOk7n1ucePUvbriCVEcZurqRCisSGhWiVIYENJVTebicM3txxHlX7U58NzUQkKSjEGSp0yohiIFhNhhgeu8A401XNcVilSV+HLmfsiqtwzs\/iVDM6nZqSmf5mHXHNcZztWv7MUqtdi7nNiXb3qgBZZY\/EbaZPRRjzvIe0Gao5hs3SrOldixaoIlixlgwjSwJuQRExi3iXtPnK9M0qtd3pswfRyhdQAggKABAgQIGEBXwXhjZvNUsuDAcwT+FQJdvkoOOm\/iDWDrQy9Gn4VKlqFNGYKCLQ51EDUQCb3knviv+Eip9tqaztl6snt7oP\/AKzhv4krSNaj4VYVvu21MI3We1p8sRjnVz0X73kpxpvxZi5B6wg6qc7S1VICr2lxfm2nAvF1qO4LtSkCAVqIZEmJ5jf\/AIxTlGKaAAdRWp9WGlfzAxHO5g1H2gKmmwInqLEnqYxaMpbq6GHFVfU6zh1Js\/kKtGoQ9bKDXQqSGJQCXoE7sIkr2iLDfip2PfHoH8HcqrZmoTqOiIjSBDBgxYEzECLTvjz1RtiUaWpKK4w\/rf8AizUk9qbGaYwsS+WFipgfECeuJDfDMLxhDY6NG+2LAbwcaHCuFJVphjU0s1TQBa8aJgTJMVCbW5b74Ko8HpNp5nGopHuWDoXgnyCEfQ4jLXgrszaMCe+FP9\/yxurwWmQH1tpIuBoJE1RTS4sQeY2\/Dhn4EsO6M50oxErN1NQQY2BFJvmQMH9Rp+IWjJVrj0xS5ufXGrleHr49amzHTS1XlVnS4XdrDfFicKpm5apZVZiFEHxPD0gHuPFuOsdJs\/jQQWZLmw9cRU\/1x0GZ9nwo1FyVUc0AC4R3YD5KsH+Y9sS\/y0o\/6h2qdBupIUb9VVj6g4x\/VaVci3I5rfDHGxneEBHWkhYuXVZKjTzzpuNjbbrftg0ezSknnYcxgFYOnQjBiDsZqBT5kY2+0aaVtj3I5zVtiQW+CuKZRabLoJIYEjVEiHZDtvdJ+eBU2OKKSkrQxw398Oo3P788Vx\/TE6lrYYGp7JcYGVzdKswmmCVqDujDS\/rYk+oGNH2i4b4OZCkAUWBahUpCRUQ3RwWMMdge1\/KeVmcdHwP2l8Ol9mzNIZjLTKqTpekTu1JxdZ6rsfKTM5pxlvir8Ua5VF2U4fTdzHiMFVY50pm7PJNiDcAfPFHGcnTR1YFwWUkjUr3BWLgAd\/njXonhrcyZ6pTn4a+WZ2A3iaJ0m5PTEMxnuGUtLTVzrrOldBoUpke9JLtttseuMx181tf0f5x9zWxbeckuAAZPL5jPnVNUGjlNVmZmBD1IFtKqd+9scUz9saXHeN1s1UD1SLCFRRpSmo2RF+EYy1WxONwi7cpcv3RlvoiU\/rhYiTh8UMjk4aob\/wBMSGIhZvgGwzJZSs4TR+OE51U6+WSoJBmNNx5dsFplc2WB59TEMDrANgoB3sQKiiP5oxVkeKmkgQKTDlxzEC+kQwFm9y3acEf5iqG5RTzITvuoWf8AyKKT6Y5p\/FvEVRjJFsnmz1JLAf8AVWLFSFPNY6qikA9WxH7HmyARrgDxBziwYFtQvuQW87kYkPaBz7yAgEEAsbafDKj0BpzH8zbb4nQ9pHAA0K0abknZVVY9DBP+44z\/APav0r36hkiuXzfiAlmFRoQE1VDGdLBfek2dSe03wy0c2NJDsIIVQaqgjX7oALTeP\/XyxP8AzCxuUvrDWdgCQqC42b\/T+UnFTcefVqKKW5b\/AMyI6ho7k1C3qMCWr\/avfqGSiu1emVBZ1M25+qkp36XX0npi4ZPNao1X16f9ZDLknl965mo3\/ke+I8R4n4ugtTAdfiBsby3L5sScXVvaJywYBh94KhHiMdUX0\/8Abaw6Y0\/iUu6vP8BkgaOZOn7yQCdJ8ZDeJYjm2EyT0vh0yuZUKA8ABlH3ywAAGbZvd0gN6RhqfG2VAjanILEk1G5gw0sCOp02B6Ypp8UgrpTSAzEBWZSNSBLMNiNMz1M2i2CtT+1e78wyRfLV6pdmJdksSXBuJMC\/NZWMCdsVZnLNTYq0ahYgMrREyDpJgyNsFDixDVDoWXYsALBGKssx1EObdwPMEbOZxqrtUYmSTAJJ0gkkKJ6CdsbjvumlQ1YOoxCoZOJziBXpiwx9PTrhMegxOjSJYKoJYkBQLkk2A8zOPRuH0KHDGSnyNmhzV67LrFAdadPs3wl73keQnPU20llsaXU5LI+xmfqDUmUq6ehZdE+muJwJxPgOZy3+vl6lMfiZTHybY\/XHY5LOVaylqtdnZ4AHMSQbkSbC4EgR8QuNr8nx2rSBpoxYAQyOfEpsIgApMGQATpuZOJOeqvD7\/v8AwFxPN5k4bVM46z2l4PSeic7lV8NQ+nMUD\/0WJhWTqaTHbsbeQ5I+uLac1NWgaoTYWERhY2IcdcLpbCXDoYjAMPekBlVbSNRrsCesBEMekk4rroBRpEASTUk94KxPpfE6edAU0nTWhbWIbSVaIkGDuLEEHYYh9sDETTBRVKqmprEzzSDJOoz2sBtiKUr9WzIbmcvNHXRFJ6Ypr4gAHiU2trYzzRqm4lYPTAPBUDZiirAFTUQEHqCwBGJLn1Ct4dMIzpoY6iRFpgHYtF7nrEYimbCV1qogUI4YJJIEEECTfcYSjJRcfnX8gkar5WUXlpFvtCgFApCKZ5agWxBMRPZr9MCZjhgDAu4TxHYKFWwCvp1G\/KuoQAJNsQp8V02p0woNRajSSdRUkqs9FknYfPD1OK6mGumGKOzLcgDU2oq1uZdRnobm+MKOqnjj098+7FkNr8MK0hT1w2mq9RdO5pMQRM9IgdNzgPK8GZ6YqA8pRmICliIfQAB8RJ9IE9sOOOsSC6hoWoH3GsVWJbb3TLWjDf4xyCl4Q8LQVK6jJGvWDPRg3WI3tGElrJV5+Xn\/ABQZL6+SNLL1pvq8FhIgwTUsQdjIIjyxHI0f\/jI6ilq8dgWqeHGnQhjn6STte+ATnAEemtMKrlDuSRo1fWdXl0xE5s+CKUCA5eet1Cx\/643sn18fxQUzSz3CqZzASk8eLzUlgxDToBJMrq6WMSJi8TzFAsqwFkZRTdZP+pFuzSd+098B0eKkGm5QGpSUKjTa3uEiLlZtcbCZ6x\/xVojSJ8EUpk9HD6\/WRjGzVx5BTLk4UprGh4oFQHTGk6dW2gNO+rlkgDAGYpQitsWJ5esLAn6yP9pwbmM34ryEC1ajAl9ZA1E3YD4ZNySSBfbA\/Gc54tZnERJ0wIETvHSSS3qTikN9q\/Xj3n8Dybf8O0AzbVmGr7NRq1wvdkXl\/wDYg\/IYAOYLVXdiJJJJN5LG89JuWmN74M\/h3UX7U1BjpGZo1cvq2g1F5d\/5gB6kYHpUipFEqw0t94I5g4s4EekfXB\/yP5L8m3+lG7lfaN6Dip4aQWAC6dIAQnUBCwLNePpvNFXNLUZW8KC8nSi2CrzSASSdIVu1p6RgXipYVSgBKmCuoEGCLqC0kCQfWJ7YMWgGRk5DVQchBgLplj0MyZtHQXgEF7lyTwaXsu\/i52plyhSnXp1KVQOeY6gShJ6vMHYfFjzbHfexjMc02cqatOVR6lQkCJVCqLv7xJ2jpjgYwaf+pL5L65\/FFP8AahzhYRwsXMkhiJw\/TEDhDLmuBiNM74SDCQ74BCQf3\/f5YYk\/8YkhgE4j54AJJ2+eGm+FS74fYjABBRhyb4QGLAL\/AL+WACPYYdhJxHtia9\/I\/v64QEY\/PElECcJBO+ErTPaRgAabnEY3xYwxUomcMB6blSGUkEGQQYIM2IPQ2x6Hkq9HiZV9aUs7AD03OlK5G1VOniRuhsenXHnZwyDE9TT3ZTp+I0+h3vHcjXpDw2SqNmSUNo1DQbRJ8ptp72Eyns\/m62phTNGmolq1b7tFvdize9Am6zjHyXtVnqQC083WVeg8RiB6TtgPi3FsxXP31epV6jW7MB6A2HyxNQ1OMfPP7fyOom17QcWo06P2HKMXplg1euRBruNgB0pL0HU38zy58sRxNhti0IKCpCbsiRhYkrdcPjQiO+Gw4BwxOGBMHbDRBw2JTsfI\/phAPHKB3OIVG6DYYsdhAxSBOAC0GAPrhDcYiv8AYYft++2ACSYYMMLp+\/LDU1vgAcC2HUzM4T9IvGHpiJwgHbaMQSfzxJT+++G1GcACb+mIk9MLEVGGAouMInph5xHAA2HxJVnbDMsYYEcTbocQjEsACOFhlwsACU4d98Rw7YAHI2xLr++2IHYYkuEAxM4dNye04cL+uITaMAEgLfMYcCfrhiLeeH2B9cADr28zhTHrhdZ+mIHfABYgw7Hl9cJRb54jUF\/XCAYNsexxZlqBqVFpiNTMFEmBJsJPQeeKumEHuCN53wwNtPZXMke6FkSATE+7MWj4huRse2GpezGYYBkUOCuoFTuCCRYgEEwYkCY8sZLV2GzNtG52Gw9BiyrmnMy7EmJJYknre974ADaHs9VZajSgFN2RtTRzLExbqSAMWp7J5hm0qFO0kEwslgJtPw\/mvfAOWzzKSzF2BFxrYSbbkG9rYl\/iQOksHZhufFe8i\/oS18MCz\/Aa240nmCGDsxKjSZ\/\/AKLcSPPFlLgdVxylG902JFnMIbqN4J8gLxiqpxFCYKOYsPvXMCZEekdsSbig6+Lcm3jNs3vD+s9euACVb2erKDq0iEZ41SSq7sCBBFxF7zItjKAxqLxRAIVagEzAqv8AO09pv54ypwAOMLDkx64fCAqw\/TEcW6vLDArxIdMRxJDcYAHpmxxEG+HGFSF74QEnbDvtGIHYYkmxwAS0\/v5YgBtiQ6fvoMJrADrgATvMjthi0jC074aLYAIgYlG2Ixh8ADth5\/rhdcNG+ABmOEi3xNR1wvPAAzNG2\/XFZOJDDtbrgAioxM2xGcKcAEThYeMLDAjiQwsLAAwxJsLCwgGG3zwwwsLDAl29cOOuHwsICa9MNGGwsICKn9MONjh8LDAguHqD9Bh8LAAhvhLvh8LABW5viZ2+WFhYAFsMQTfCwsADMcIYWFhgJsLCwsAH\/9k=',width=400,height=400)","769c4bf2":"clean_df = df.fillna(value=0)\nplt.figure(figsize=(10,5))\nsns.heatmap(clean_df.isnull(),cbar=False,yticklabels='',cmap='viridis')","c79a7280":"corrs = df.corr()\ncorrs","9aa84225":"plt.figure(figsize = (20, 8))\n\n# Heatmap of correlations\nsns.heatmap(corrs, cmap = plt.cm.RdYlBu_r, vmin = -0.25, annot = True, vmax = 0.6)\nplt.title('BIODIVERSITY');","d38e6837":"import plotly.express as px\n\n# Grouping it by Zone ID and RCAC Score I\nplot_data = df.groupby(['ZoneID', 'RCACScoreI'], as_index=False).DescID.sum()\n\nfig = px.bar(plot_data, x='ZoneID', y='DescID', color='RCACScoreI')\nfig.update_layout(\n    title_text='Biodiversity',\n    height=500, width=1000)\nfig.show()","c2e512ac":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRdTVj4N3H68-FyvC3y4yXdEppqIcLYpAGDgDGNyAXi88Dqmk0S',width=400,height=400)","6d100f22":"import plotly.express as px\n\n# Grouping it by Zone ID and RCACScore I\nplot_data = df.groupby(['ZoneID', 'DescID'], as_index=False).RCACScoreI.sum()\n\nfig = px.line_polar(plot_data, theta='ZoneID', r='RCACScoreI', color='DescID')\nfig.update_layout(\n    title_text='Biodiversity',\n    height=500, width=1000)\nfig.show()","2fd1511b":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRO44GqqL-OzpwiwOCzsX0L6JVWXsaDWt6VuaP6nCUYadqOeezc',width=400,height=400)","fc03c146":"#sample codes from Mikey_Mtk @motokinakamura https:\/\/www.kaggle.com\/motokinakamura\/treemap-with-plotly\nfig = go.Figure(go.Treemap(\n    labels = [\"Eve\",\"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parents = [\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\"]\n))\n\nfig.show()","b135377e":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSTex-os7MwOXI--cg03-YMtETbxwA4c99znEXtBt-b_YiI2XeR',width=400,height=400)","bbe27059":"#codes from Mikey_Mtk @motokinakamura https:\/\/www.kaggle.com\/motokinakamura\/treemap-with-plotly\n#make a df it's grouped by \"Genre\"\ngb_ZoneID =df.groupby(\"ZoneID\").sum()\n\ngb_ZoneID.head()","b2945195":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQiIlLnqbe-aHS8oW2_saswSjXl4EFPx85-JOQ88bpI_v0tUlnv',width=400,height=400)","0dd33fa1":"# codes from Mikey_Mtk @motokinakamura https:\/\/www.kaggle.com\/motokinakamura\/treemap-with-plotly\nZoneID = list(gb_ZoneID.index)\nbiodiver = list(gb_ZoneID.DescID)\n\nprint(ZoneID)\nprint(biodiver)","e7d5ffec":"#codes from Mikey_Mtk @motokinakamura https:\/\/www.kaggle.com\/motokinakamura\/treemap-with-plotly\n#first treemap\ntest_tree = go.Figure(go.Treemap(\n    labels =  ZoneID,\n    parents=[\"\"]*len(ZoneID),\n    values =  biodiver,\n    textinfo = \"label+value\"\n))\n\ntest_tree.show()","3173b338":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcQtmZIssQWb1N_nZwIss0D1RFkjQs94vk8r07-qQeEoi4OcYbH5',width=400,height=400)","a173f7af":"#codes from Mikey_Mtk @motokinakamura https:\/\/www.kaggle.com\/motokinakamura\/treemap-with-plotly\n#second treemap\ntest_tree_blue = go.Figure(go.Treemap(\n    labels =  ZoneID,\n    parents=[\"\"]*len(ZoneID),\n    values =  biodiver,\n    textinfo = \"label+value\",\n    marker_colorscale = 'greens'\n))\n\ntest_tree_blue.show()","bc2c3ced":"df.plot(subplots=True, figsize=(10, 10), sharex=False, sharey=False)\nplt.show()","01f3a34d":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/62e528761d0685343e1c-f3d1b99a743ffa4142d9d7f1978d9686.ssl.cf2.rackcdn.com\/files\/78845\/width668\/image-20150421-9038-1cjmpav.jpg',width=400,height=400)","579e4959":"df.plot.area(y=['DescID','Version'],alpha=0.4,figsize=(12, 6));","dcf4738e":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.ZoneDescription)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"green\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","2b06169e":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcR00q67clgrjDWPiJW7yue41Docqru3HioLp0Bs2QydS080lXWp',width=400,height=400)","6e8c8ef6":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.LGA)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"blue\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","38ab3552":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSDpQl3rCxWYw0OBXtnA4-ve2fvaWeBELB8-4VuaFLGXciFqoVe',width=400,height=400)","86726e84":"Golden Plains Shire is responsible for managing 1834 kilometres of road reserves. Road reserves are not only used for transport but also act as service corridors, in fire prevention, recreation, and occasionally agricultural pursuits. Native vegetation on roadsides is important flora and fauna habitat and landscape character. \n\nIn 2014, Golden Plains Shire acquired funding through the Victorian Adaptation and Sustainability Partnership (VASP) to undertake Councils \u2018Building Adaptive Capacity on Roadsides\u2019 project. The Project was designed to identify significant environmental assets on roadsides, improve roadside management practices and reduce Council\u2019s risk of potential breaches against Federal and State environmental legislation. Although all due care has been taken to ensure that this data is correct, no warranty is expressed or implied by the Golden Plains Shire in it's use.https:\/\/data.gov.au\/data\/dataset\/golden-plains-roadside-biodiversity","536dd17f":"Image theaustralian.com.au - Sorry, 90% of Australia's coal needs to stay in the ground.","d6d1909b":"Image grlc.vic.gov.au","07d0c2d1":"Image issuu.com","902314dd":"Image sbms.org.au","b67e46b5":"Kaggle Notebook Runner: Mar\u00edlia Prata @mpwolke","9f0c2766":"Image arcgis.com","21225707":"Data Cleaning","85093185":"Image nap.edu -  The uncertainty in assessing environmental effects, are also pointed out in the following areas:\n\nGHG emissions\n\nAir quality\n\nWater quality\n\nWater quantity and consumptive use\n\nSoil\n\nBiodiversity\n\nEcosystem services\n\nThe uses of regional environmental assessments of biofuel production as an illustration since the effects of biofuel production are location-specific, and conclusions drawn from regional environmental assessments could differ from an assessment of cumulative effects across the nation.https:\/\/www.nap.edu\/read\/13105\/chapter\/7","0cacdd5f":"Image appadvice.com","0e61fc1b":"Image twitter.com - We should diversify to avoid unexpected bad situations.","0e9792c9":"Image unesdoc.unesco.org","a50389a3":"Image dereelspokes.com"}}