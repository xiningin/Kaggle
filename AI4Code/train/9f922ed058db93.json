{"cell_type":{"e01497f0":"code","09ef47cf":"code","7a62bf83":"code","c2b9a126":"code","3cc5a75a":"code","8a87ca2c":"code","d425810a":"code","d4d62f71":"code","bbc8cca3":"code","95c2cd85":"code","344cc8a1":"code","c5d6ceb8":"code","2d1d5e85":"code","79341aeb":"code","167d7947":"code","a3fc363d":"code","f687cc09":"code","f3faadc6":"code","e41d73b5":"code","25e7bc4d":"code","623b4838":"code","a910a14c":"code","84b8009b":"code","15b45b46":"code","e9daad51":"code","17fddb0e":"code","8ee779ef":"code","e767580e":"code","be219379":"code","6b06e8d3":"code","a15e6d7f":"code","ff5fb04b":"code","756ade05":"code","a2349ad1":"code","846fe350":"code","93d486f8":"code","a28b1a07":"code","0282f48d":"code","28388607":"code","17e48bc7":"code","9907c836":"code","f466d74f":"code","31ea666b":"code","ba2b1f0f":"code","6d2bc4bc":"code","a0851613":"code","ccc4d6de":"code","d69cef27":"code","5540f61f":"code","169e4426":"code","55af9935":"code","3255a910":"code","d861c016":"code","9c654a10":"code","e5beea6e":"code","ed859b89":"code","7ac1cc6f":"code","78616f19":"code","15144de9":"code","65927636":"code","c87968fe":"code","696c93a1":"code","59340ce6":"code","22badd26":"code","7c3aae1e":"code","411f1c27":"code","92ca66ac":"code","a16b3e3f":"code","cedc0c87":"code","83126715":"code","c9dbf6ee":"code","7384d8fe":"code","eca79437":"code","00d30475":"code","e04aa6f7":"code","d382f1a1":"code","8f3ccf6f":"code","fb98f0da":"code","013521c3":"code","12791f41":"code","2ebd7754":"code","186ae074":"code","97a84a2a":"code","63e4f3d8":"code","9b3a033e":"code","5e95d2e4":"code","3febf5b0":"code","da2f6a0a":"code","c9e1b306":"code","64e6d61c":"code","1f763652":"code","2f6d89df":"code","74bc8408":"code","27d4038d":"code","ce451ee0":"code","3b0d31d2":"code","6341ec8b":"code","09189bfb":"code","3dbd4104":"code","09b0972a":"code","2e2e2301":"code","019b48bc":"code","4fd62fb1":"code","ac336e55":"code","30af0bd7":"code","2278c420":"code","3a222f83":"code","48e58360":"code","64ffaf81":"code","036cc1c4":"code","9b9da363":"code","4f704034":"code","28ad18e8":"code","2a888672":"code","db9ebdd6":"code","14a203e0":"code","59d7fbe5":"code","c4cb27a9":"code","b1c35097":"code","c2571421":"code","b6ce622d":"code","fbc5a36f":"code","ddb3e3a1":"code","cde2588d":"code","0db3413a":"code","173cd10c":"code","d31c3e48":"code","05b46cd7":"code","77329aa5":"code","1e8fc161":"code","3bcd977d":"code","5d4c0fa2":"code","b2b3ff28":"code","1bcf822e":"code","c3a69c31":"code","1344788a":"code","de54c68e":"code","b74d7842":"code","b0e3a255":"code","a3a20452":"code","5218403c":"code","abf0b461":"code","b9499433":"code","064a781e":"code","408374e3":"code","23610bbe":"code","3f7e6029":"code","68e3920f":"code","13e6db2a":"code","eca92641":"code","d3b22bee":"code","20a6f83d":"code","f0aa5283":"code","989c8594":"code","26bffb6d":"code","dd420a09":"code","babe5ca0":"code","d4bba017":"code","2a673315":"code","a6ebfbe1":"code","41f72a6b":"code","736ebea8":"code","e7530e90":"code","970df348":"code","4da950d9":"code","e4e2dad8":"code","d203f464":"code","df4b9c69":"code","160ae9e4":"code","9367f25b":"code","15d4591f":"code","78e85bfd":"code","dbe101ae":"code","2ea86f57":"code","cee193aa":"code","159c92b2":"code","a8cc7d29":"code","ff909d5d":"code","6b272107":"code","f3c15002":"code","e20bc596":"code","992a26f0":"code","94b34e71":"code","cf553e0b":"code","8ca55d4a":"code","66747e61":"code","e73781a2":"code","6ffda3e5":"code","3c39a1cc":"code","299b4cb6":"code","a7ab80c5":"code","860237de":"code","395d502a":"code","1d026ef8":"code","57602903":"code","92bce413":"code","5aa55d8f":"code","d1768fa9":"code","72faa614":"code","251a61df":"code","4c4715a5":"code","6be102ee":"code","9c0d8960":"code","aad1de3a":"code","faf94494":"code","9743f2b1":"code","73a4d9bb":"code","fb4a6aba":"code","d14a32f2":"code","c1d288ce":"code","67575008":"code","ec15c70f":"code","61bb0d69":"code","6c892cf9":"code","e33546c8":"code","9b8538d5":"code","040dc457":"code","97f8e04d":"code","889162cc":"code","d58b697e":"code","e1cb889f":"code","10f96a80":"code","13be11f2":"code","19368eaa":"code","ffb10afc":"code","548bf251":"code","85e29aa5":"code","7bc72bac":"markdown","3ddb210f":"markdown","b1254d09":"markdown","036ade68":"markdown","b36d9fa7":"markdown","81171e30":"markdown","46584b23":"markdown","4ad6a6b7":"markdown","315a8e72":"markdown","69dceae5":"markdown","5986793c":"markdown","d80dae65":"markdown","f71b723f":"markdown","a15f3fea":"markdown","5bbe4bd3":"markdown","3da12b00":"markdown","9a7be888":"markdown","aca4bf0a":"markdown","b60cdadc":"markdown","430a5a91":"markdown","fe630389":"markdown","fc67e024":"markdown","6b73a1c2":"markdown","b1df228e":"markdown","af36fd88":"markdown","730bc8b8":"markdown","845229e4":"markdown","851d0c6d":"markdown","2efc3ce2":"markdown","b31c9964":"markdown","e0326236":"markdown","08c9c257":"markdown","241891f5":"markdown","c704b4cd":"markdown","fc30bddc":"markdown","2be12f32":"markdown","7a219d66":"markdown","eda9567a":"markdown","a51fcd5b":"markdown"},"source":{"e01497f0":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","09ef47cf":"df = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')","7a62bf83":"df.head()","c2b9a126":"sns.histplot(data=df, x = 'SalePrice',kde=True)","3cc5a75a":"df.isna().sum()","8a87ca2c":"df.info()","d425810a":"df.corr()['SalePrice'].sort_values()[:-1]","d4d62f71":"len(df.corr()['SalePrice'].sort_values()[:-1])","bbc8cca3":"df.drop(['Alley','PoolQC','MiscFeature'] , axis=1, inplace=True)","95c2cd85":"df['Street'].unique()","344cc8a1":"df['RoofStyle'].unique()","c5d6ceb8":"df[df['MasVnrType'].isna() == True]['MasVnrType']","2d1d5e85":"df['Fireplaces'].describe()","79341aeb":"df['Fireplaces'].mode()","167d7947":"len(df[df['Fireplaces']==0])","a3fc363d":"df[df['FireplaceQu'].isna() == True]['Fireplaces'].median()","f687cc09":"df[df['FireplaceQu'].isna() == True]['Fireplaces'].mode()","f3faadc6":"df[df['FireplaceQu'].isna() == True]['Fireplaces'].mean()","e41d73b5":"df[df['Fireplaces']==0]['FireplaceQu'].mean()","25e7bc4d":"df.drop(['FireplaceQu'] , axis=1 , inplace=True)","623b4838":"df.drop(['Fence'] , axis=1 , inplace=True)","a910a14c":"df.info()","84b8009b":"df.corr()['LotFrontage'].sort_values()","15b45b46":"df['LotFrontage'].describe()","e9daad51":"df['LotFrontage'].mode()","17fddb0e":"sns.scatterplot(data=df , x = 'LotFrontage',y = 'SalePrice')","8ee779ef":"plt.figure(figsize=(12,6))\nsns.scatterplot(data=df , y = 'LotFrontage',x = '1stFlrSF')","e767580e":"plt.figure(figsize=(12,6))\nsns.scatterplot(data=df , y = 'LotFrontage',x = 'LotArea')\n# not a good metric as values are quite uneven","be219379":"plt.figure(figsize=(12,10))\nsns.boxplot(data=df , x = 'LotShape', y ='LotFrontage' , hue = 'LandContour')\n# this gives the most detailed info as all the categories and hue are present","6b06e8d3":"plt.figure(figsize=(12,10))\nsns.boxplot(data=df , x = 'LotConfig', y ='LotFrontage' , hue = 'LandContour')","a15e6d7f":"plt.figure(figsize=(12,10))\nsns.boxplot(data=df , x = 'LandSlope', y ='LotFrontage' , hue = 'LandContour')","ff5fb04b":"plt.figure(figsize=(12,10))\nsns.boxplot(data=df , x = 'LotConfig', y ='LotFrontage' , hue = 'LandContour')","756ade05":"plt.figure(figsize=(12,10))\nsns.boxplot(data=df , x = 'BldgType', y ='LotFrontage' , hue = 'LotConfig')","a2349ad1":"df['1stFlrSF'].describe()","846fe350":"def FlrSF(x):\n    if x in range(300,500):\n        return 1\n    elif x in range(500,700):\n        return 2\n    elif x in range(700,900):\n        return 3\n    elif x in range(900,1100):\n        return 4\n    elif x in range(1100,1300):\n        return 5\n    elif x in range(1300,1500):\n        return 6\n    elif x in range(1500,1700):\n        return 7\n    elif x in range(1700,1900):\n        return 8\n    elif x in range(1900,2100):\n        return 9\n    elif x in range(2100,2300):\n        return 10\n    elif x in range(2300,2500):\n        return 11\n    elif x in range(2500,2700):\n        return 12\n    elif x in range(2700,2900):\n        return 13\n    elif x in range(2900,3100):\n        return 14\n    elif x in range(3100,3300):\n        return 15\n    elif x in range(3300,3500):\n        return 16\n    elif x in range(3500,3700):\n        return 17\n    elif x in range(3700,3900):\n        return 18\n    elif x in range(3900,4100):\n        return 19\n    elif x in range(4100,4300):\n        return 20\n    elif x in range(4300,4500):\n        return 21\n    elif x in range(4500,4700):\n        return 22","93d486f8":"df['AreaCat'] = df['1stFlrSF'].apply(lambda x: FlrSF(x))","a28b1a07":"plt.figure(figsize=(12,6))\nsns.boxplot(data = df , x = 'AreaCat' , y = 'LotFrontage' , hue = 'LotShape' )","0282f48d":"for i in range(1,12):\n    for j in list(df['LotShape'].unique()):\n        print(f\"for AreaCat {i} and LotShape {j}, the LotFrontage is: \")\n        print(df[(df['AreaCat']==i) & (df['LotShape']==j)]['LotFrontage'].median())        ","28388607":"plt.figure(figsize=(12,6))\nsns.boxplot(data = df , x = 'AreaCat' , y = 'LotFrontage')","17e48bc7":"for i in range(1,23):\n    print(f\"For AreaCat {i} the Lot Frontage median is :\")\n    print(df[(df['AreaCat']==i)]['LotFrontage'].median())","9907c836":"def LFImputer(cols):\n    lf = cols[0]\n    ac = cols[1]\n    if pd.isnull(lf):\n        if ac == 1:\n            return 21\n        elif ac == 2:\n            return 52\n        elif ac == 3:\n            return 60\n        elif ac == 4:\n            return 66\n        elif ac == 5:\n            return 74.5\n        elif ac == 6:\n            return 75\n        elif ac == 7:\n            return 75\n        elif ac == 8:\n            return 80\n        elif ac == 9:\n            return 89.5\n        elif ac == 10:\n            return 90.5\n        elif ac == 11:\n            return 104\n        elif ac == 12:\n            return 80\n        elif ac == 13: # there was only one case for ac==13 and that too the value was missing, so I put in 70 as 70 is the median of the entire column\n            return 70\n        elif ac == 15:\n            return 130\n        elif ac == 22:\n            return 313\n    else:\n        return lf","f466d74f":"df['LotFrontage'] = df[['LotFrontage' , 'AreaCat']].apply(LFImputer , axis=1)","31ea666b":"df['LotFrontage'].isna().sum()","ba2b1f0f":"df.info()","6d2bc4bc":"df['MasVnrArea'].describe()","a0851613":"df.corr()['MasVnrArea'].sort_values()[:-1]","ccc4d6de":"sns.boxplot(data=df,x='MasVnrType',y='MasVnrArea')","d69cef27":"df.groupby('OverallQual').median()['MasVnrArea']","5540f61f":"df[df['MasVnrArea'].isna() == True]['OverallQual']","169e4426":"def MVAImpute(cols):\n    mva = cols[0]\n    oq = cols[1]\n    if pd.isnull(mva):\n        if oq == 6:\n            return 0\n        elif oq == 7:\n            return 14\n        elif oq == 8:\n            return 176\n        elif oq == 10:\n            return 420\n    else:\n        return mva","55af9935":"df['MasVnrArea'] = df[['MasVnrArea','OverallQual']].apply(MVAImpute , axis=1)","3255a910":"df['MasVnrArea'].isnull().sum()","d861c016":"df.groupby('MasVnrType').median()['OverallQual']","9c654a10":"df[df['MasVnrType'].isna() == True]['OverallQual']","e5beea6e":"def MVTImpute(cols):\n    mvt = cols[0]\n    oq = cols[1]\n    if pd.isnull(mvt):\n        if oq == 6:\n            return 'BrkCmn'\n        elif oq == 7:\n            return 'BrkFace'\n        elif oq == 8:\n            return 'Stone'\n        elif oq == 10:\n            return 'Stone'\n    else:\n        return mvt","ed859b89":"df['MasVnrType'] = df[['MasVnrType','OverallQual']].apply(MVTImpute , axis=1)","7ac1cc6f":"df['MasVnrType'].isna().sum()","78616f19":"df.info()","15144de9":"df.corr()['GarageYrBlt'].sort_values()[:-1]","65927636":"def GYBImpute(cols):\n    gyb = cols[0]\n    yb = cols[1]\n    if pd.isnull(gyb):\n        return yb\n    else:\n        return gyb","c87968fe":"df['GarageYrBlt'] = df[['GarageYrBlt','YearBuilt']].apply(GYBImpute , axis=1)","696c93a1":"df['GarageYrBlt'].isna().sum()","59340ce6":"df.info()","22badd26":"df.groupby('BsmtQual').mean()['OverallQual']\n# 0 = NA\n# 0-2 = Po\n# 2-4 = Fa\n# 4-6 = TA\n# 6-8 = Gd\n# 8-10 = Ex","7c3aae1e":"df['OverallQual'].describe()","411f1c27":"df[df['BsmtQual'].isna()==True]['OverallQual']","92ca66ac":"def Bsmtqualimputer(cols):\n    bq = cols[0]\n    oq = cols[1]\n    if pd.isnull(bq):\n        if oq == 0:\n            return 'NA'\n        elif oq in [1,2]:\n            return 'Po'\n        elif oq in [3,4]:\n            return 'Fa'\n        elif oq in [5,6]:\n            return 'TA'\n        elif oq in [7,8]:\n            return 'Gd'\n        elif oq in [9,10]:\n            return 'Ex'\n    else:\n        return bq","a16b3e3f":"df['BsmtQual'] = df[['BsmtQual','OverallQual']].apply(Bsmtqualimputer, axis=1)","cedc0c87":"df['BsmtQual'].isna().sum()","83126715":"df.groupby('BsmtCond').mean()['OverallCond']","c9dbf6ee":"df[df['BsmtCond'].isna()==True]['OverallCond']","7384d8fe":"df['BsmtCond'] = df[['BsmtCond' , 'OverallCond']].apply(Bsmtqualimputer, axis=1)","eca79437":"df['BsmtCond'].isna().sum()","00d30475":"df.drop(['AreaCat'],axis=1,inplace=True)","e04aa6f7":"df.info()","d382f1a1":"df[df['BsmtExposure'].isna()==True]['BsmtQual']\n# Gd and Ex -> Gd\n# TA  -> Av\n# Fa -> Mn\n# Po -> No\n# NA -> NA","8f3ccf6f":"def exposerimputer(cols):\n    expose = cols[0]\n    bq = cols[1]\n    if pd.isnull(expose):\n        if ((bq == 'Gd') | (bq =='Ex')):\n            return 'Gd'\n        elif bq=='TA':\n            return 'Av'\n        elif bq=='Fa':\n            return 'Mn'\n        elif bq == 'Po':\n            return 'No'\n        elif bq=='NA':\n            return 'NA'\n    else:\n        return expose      ","fb98f0da":"df['BsmtExposure'] = df[['BsmtExposure','BsmtQual']].apply(exposerimputer,axis=1)","013521c3":"df['BsmtExposure'].isna().sum()","12791f41":" ''''\n\n       GLQ\tGood Living Quarters\n       ALQ\tAverage Living Quarters\n       BLQ\tBelow Average Living Quarters\t\n       Rec\tAverage Rec Room\n       LwQ\tLow Quality\n       Unf\tUnfinshed\n       NA\tNo Basement\n       \n        Ex\tExcellent\n       Gd\tGood\n       TA\tTypical - slight dampness allowed\n       Fa\tFair - dampness or some cracking or settling\n       Po\tPoor - Severe cracking, settling, or wetness\n       NA\tNo Basement\n\nNA -> NA\nPo -> Unf,LwQ  \nFa -> Rec , BLQ\nTA ->  ALQ\nEx, Gd -> GLQ\n'''","2ebd7754":"df[df['BsmtFinType1'].isna() == True]['BsmtCond']","186ae074":"def BFTimputer(cols):\n    bft = cols[0]\n    bc = cols[1]\n    if pd.isnull(bft):\n        if ((bc == 'Ex') | (bc=='Gd')):\n            return 'GLQ'\n        elif bc == 'TA':\n            return 'ALQ'\n        elif bc == 'Fa':\n            return 'BLQ'\n        elif bc == 'Po':\n            return 'LwQ'\n        elif bc == 'NA':\n            return 'NA'\n    else:\n        return bft        ","97a84a2a":"df['BsmtFinType1'] = df[['BsmtFinType1','BsmtCond']].apply(BFTimputer , axis = 1)","63e4f3d8":"df['BsmtFinType1'].isna().sum()","9b3a033e":"df['BsmtFinType2'] = df[['BsmtFinType2','BsmtCond']].apply(BFTimputer , axis = 1)","5e95d2e4":"df['BsmtFinType2'].isna().sum()","3febf5b0":"df[df['Electrical'].isnull() == True]","da2f6a0a":"df.info()","c9e1b306":"from sklearn.impute import SimpleImputer","64e6d61c":"elec_imputer = SimpleImputer(missing_values=np.nan , strategy='most_frequent')","1f763652":"df['Electrical'] =  elec_imputer.fit_transform(df['Electrical'].values.reshape(-1,1))[: , 0]","2f6d89df":"df['Electrical']","74bc8408":"df['Electrical'].isna().sum()","27d4038d":"df.info()","ce451ee0":"df['GarageQual'] = df[['GarageQual' , 'OverallQual']].apply(Bsmtqualimputer , axis=1)","3b0d31d2":"df['GarageCond'] = df[['GarageCond','OverallCond']].apply(Bsmtqualimputer , axis=1)","6341ec8b":"df.info()","09189bfb":"df.groupby('GarageType').max()['MSSubClass']","3dbd4104":"df[df['GarageType'].isna()==True]['BldgType']","09b0972a":"df[df['BldgType']=='1Fam']['GarageType'].mode() # Attchd","2e2e2301":"df[df['BldgType']=='2FmCon']['GarageType'].mode()","019b48bc":"df[df['BldgType']=='TwnhsE']['GarageType'].mode()","4fd62fb1":"df[df['BldgType']=='TwnhsI']['GarageType'].mode()","ac336e55":"df[df['GarageType']=='CarPort']['BldgType'].mode() # Duplex or 1Fam","30af0bd7":"df[df['GarageType']=='Detchd']['BldgType'].mode() # 1Fam","2278c420":"df['GarageType'].mode()","3a222f83":"garage_type_imputer = SimpleImputer(missing_values=np.nan , strategy='most_frequent')\ndf['GarageType'] =  elec_imputer.fit_transform(df['GarageType'].values.reshape(-1,1))[: , 0]","48e58360":"df['GarageType'].isna().sum()","64ffaf81":"garage_finish_imputer = SimpleImputer(missing_values=np.nan , strategy='most_frequent')\ndf['GarageFinish'] =  elec_imputer.fit_transform(df['GarageFinish'].values.reshape(-1,1))[: , 0]","036cc1c4":"df['GarageFinish'].isna().sum()","9b9da363":"df.info()","4f704034":"df.select_dtypes(include=['object']).columns","28ad18e8":"df2 = df.copy","2a888672":"df2 = pd.get_dummies(data = df , columns = ['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities','LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'SaleType', 'SaleCondition'] , drop_first=True)","db9ebdd6":"AOL = list(df2.select_dtypes(include=['uint8']).columns)\n# collecting all the columns having dtype 'uint8' under a list variable AOL","14a203e0":"df2.drop('Id',axis=1,inplace=True)","59d7fbe5":"df2[AOL] = df2[AOL].astype(np.int64)\n# converting all the uint8 type to int64","c4cb27a9":"df2.info(verbose=True,null_counts=True)","b1c35097":"X = df2.drop('SalePrice',axis=1)","c2571421":"y = df2['SalePrice']","b6ce622d":"from sklearn.model_selection import train_test_split","fbc5a36f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","ddb3e3a1":"from sklearn.preprocessing import StandardScaler","cde2588d":"sc = StandardScaler()","0db3413a":"X_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","173cd10c":"from sklearn.svm import SVR","d31c3e48":"svr = SVR()","05b46cd7":"svr.fit(X_train,y_train)","77329aa5":"pred_svr = svr.predict(X_test)","1e8fc161":"from sklearn.metrics import mean_squared_error,mean_absolute_error, r2_score","3bcd977d":"print(mean_absolute_error(y_test,pred_svr))","5d4c0fa2":"print(np.sqrt(mean_squared_error(y_test,pred_svr)))","b2b3ff28":"from sklearn.model_selection import GridSearchCV","1bcf822e":"parameters = [{'C':[1,0.1,0.01,0.001,0.0001,10,100,1000,10000 ] , 'kernel': ['linear' ,'rbf', 'poly']  , 'gamma' : [1,0.1,0.01,0.001,0.0001,10,100,1000,10000 ]}] ","c3a69c31":"grid_search = GridSearchCV(estimator=svr , param_grid= parameters , verbose = 3 , refit=True  , n_jobs = -1)","1344788a":"#grid_search.fit(X_train,y_train)","de54c68e":"#grid_search.best_params_","b74d7842":"#grid_search.best_score_","b0e3a255":"#pred_grid_search = grid_search.predict(X_test)","a3a20452":"#print(mean_absolute_error(y_test,pred_svr))\n#print(np.sqrt(mean_squared_error(y_test,pred_svr)))","5218403c":"svr = SVR(kernel='linear' , C=100 , gamma=1)","abf0b461":"svr.fit(X_train,y_train)","b9499433":"pred_svr_best = svr.predict(X_test)","064a781e":"print(mean_absolute_error(y_test,pred_svr))\nprint(np.sqrt(mean_squared_error(y_test,pred_svr)))","408374e3":"from sklearn.tree import DecisionTreeRegressor","23610bbe":"dtree = DecisionTreeRegressor(random_state=42 , splitter='best', max_depth=10, criterion='mse')","3f7e6029":"dtree.fit(X_train , y_train)","68e3920f":"pred_dtree = dtree.predict(X_test)","13e6db2a":"print(mean_absolute_error(y_test,pred_dtree))\nprint(np.sqrt(mean_squared_error(y_test,pred_dtree)))","eca92641":"df2['SalePrice'].describe()","d3b22bee":"37000\/181000","20a6f83d":"from sklearn.model_selection import cross_val_score","f0aa5283":"rmse_dtree = cross_val_score(estimator=dtree , X = X_train, y = y_train , cv=10 , scoring= 'r2') ","989c8594":"print(rmse_dtree.mean())","26bffb6d":"rmse_svr = cross_val_score(estimator=svr , X = X_train, y = y_train , cv=10 , scoring= 'r2') ","dd420a09":"print(rmse_svr.mean())","babe5ca0":"import statsmodels.api as sm\nresults = sm.OLS(y_test , pred_dtree).fit()\nresults.summary()","d4bba017":"results = sm.OLS(y_test , pred_svr_best).fit()\nresults.summary()","2a673315":"from sklearn.ensemble import RandomForestRegressor","a6ebfbe1":"rf = RandomForestRegressor(random_state=42 , n_estimators = 10)","41f72a6b":"rf.fit(X_train,y_train)","736ebea8":"pred_rf = rf.predict(X_test)","e7530e90":"print(mean_absolute_error(y_test , pred_rf))","970df348":"print(np.sqrt(mean_squared_error(y_test,pred_rf)))","4da950d9":"print(r2_score(y_test,pred_rf))","e4e2dad8":"from catboost import CatBoostRegressor","d203f464":"cb = CatBoostRegressor()","df4b9c69":"cb.fit(X_train,y_train)","160ae9e4":"pred_cb = cb.predict(X_test)","9367f25b":"print(mean_absolute_error(y_test , pred_cb))","15d4591f":"print(np.sqrt(mean_squared_error(y_test , pred_cb)))","78e85bfd":"print(r2_score(y_test,pred_cb))","dbe101ae":"err = cross_val_score(estimator=cb , X = X_train, y = y_train , cv = 10 , scoring='r2')","2ea86f57":"print(err.mean())","cee193aa":"df_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","159c92b2":"df_test.head()","a8cc7d29":"df_test.drop(['Alley','PoolQC','MiscFeature'] , axis=1, inplace=True)","ff909d5d":"df_test.drop(['FireplaceQu'] , axis=1 , inplace=True)","6b272107":"df_test.drop(['Fence'] , axis=1 , inplace=True)","f3c15002":"df_test['AreaCat'] = df['1stFlrSF'].apply(lambda x: FlrSF(x))","e20bc596":"df_test['LotFrontage'] = df_test[['LotFrontage' , 'AreaCat']].apply(LFImputer , axis=1)\ndf_test['MasVnrArea'] = df_test[['MasVnrArea','OverallQual']].apply(MVAImpute , axis=1)\ndf_test['MasVnrType'] = df_test[['MasVnrType','OverallQual']].apply(MVTImpute , axis=1)\ndf_test['GarageYrBlt'] = df_test[['GarageYrBlt','YearBuilt']].apply(GYBImpute , axis=1)\ndf_test['BsmtQual'] = df_test[['BsmtQual','OverallQual']].apply(Bsmtqualimputer, axis=1)\ndf_test['BsmtCond'] = df_test[['BsmtCond' , 'OverallCond']].apply(Bsmtqualimputer, axis=1)\ndf_test.drop(['AreaCat'],axis=1,inplace=True)\ndf_test['BsmtExposure'] = df_test[['BsmtExposure','BsmtQual']].apply(exposerimputer,axis=1)\ndf_test['BsmtFinType1'] = df_test[['BsmtFinType1','BsmtCond']].apply(BFTimputer , axis = 1)\ndf_test['BsmtFinType2'] = df_test[['BsmtFinType2','BsmtCond']].apply(BFTimputer , axis = 1)\ndf_test['Electrical'] =  elec_imputer.fit_transform(df_test['Electrical'].values.reshape(-1,1))[: , 0]\ndf_test['GarageQual'] = df_test[['GarageQual' , 'OverallQual']].apply(Bsmtqualimputer , axis=1)\ndf_test['GarageCond'] = df_test[['GarageCond','OverallCond']].apply(Bsmtqualimputer , axis=1)\ndf_test['GarageType'] =  elec_imputer.fit_transform(df_test['GarageType'].values.reshape(-1,1))[: , 0]\ndf_test['GarageFinish'] =  elec_imputer.fit_transform(df_test['GarageFinish'].values.reshape(-1,1))[: , 0]","992a26f0":"df_test.info()","94b34e71":"df_test = pd.get_dummies(data = df_test , columns = ['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities','LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond', 'SaleType',\n       'PavedDrive', 'SaleCondition'] , drop_first=True)\n\nAOL = list(df_test.select_dtypes(include=['uint8']).columns)\ndf_test.drop('Id',axis=1,inplace=True)\ndf_test[AOL] = df_test[AOL].astype(np.int64)\n","cf553e0b":"df_test.info(verbose=True , null_counts=True)","8ca55d4a":"THEimputer = SimpleImputer(missing_values=np.nan , strategy='median')","66747e61":"THEimputer.fit(df_test.iloc[: , :])","e73781a2":"df_test.iloc[: , :] = THEimputer.transform(df_test.iloc[: , :])","6ffda3e5":"df_test.info(verbose=True , null_counts=True)","3c39a1cc":"#X_new = sc.transform(df_test)","299b4cb6":"df2.info(verbose=True)","a7ab80c5":"df_test.info(verbose=True)","860237de":"len(df_test.columns) - 1","395d502a":"len(df2.columns) - 17","1d026ef8":"A = df2.drop(['Utilities_NoSeWa' , 'Condition2_RRAe' , 'Condition2_RRAn' , 'Condition2_RRNn' , 'HouseStyle_2.5Fin' , 'RoofMatl_CompShg'  , 'RoofMatl_Membran' , 'RoofMatl_Metal' , 'RoofMatl_Roll' , 'Exterior1st_ImStucc' , \n'Exterior1st_Stone' , 'Exterior2nd_Other' , 'BsmtCond_Gd' , 'Heating_GasA' , 'Heating_OthW' , 'Electrical_Mix' , 'GarageQual_Fa'] , axis = 1 )","57602903":"len(A.columns)","92bce413":"A.columns","5aa55d8f":"A.drop('SalePrice',axis=1,inplace=True)","d1768fa9":"A_train, A_test, B_train, B_test = train_test_split(A, y, test_size=0.3, random_state=42)","72faa614":"len(A_test.columns)","251a61df":"len(df_test.columns)","4c4715a5":"df_test.info(verbose=True)","6be102ee":"A_train.info(verbose=True)","9c0d8960":"df2.corr()['SalePrice'].sort_values()[:-1]","aad1de3a":"df_test3 = df_test.drop(['MasVnrType_None' , 'BsmtQual_TA'],axis=1)","faf94494":"len(df_test3.columns)","9743f2b1":"len(A_test.columns)","73a4d9bb":"len(A_train.columns)","fb4a6aba":"A_train = sc.fit_transform(A_train)\nA_test = sc.transform(A_test)","d14a32f2":"cat_boost_reg = CatBoostRegressor()","c1d288ce":"cat_boost_reg.fit(A_train , B_train)","67575008":"pred_cat_boost = cat_boost_reg.predict(A_test)","ec15c70f":"print(r2_score(B_test , pred_cat_boost))","61bb0d69":"print(np.sqrt(mean_squared_error(B_test , pred_cat_boost)))","6c892cf9":"err_cat_boost = cross_val_score(estimator=cat_boost_reg , X = A_train , y = B_train , cv =10)","e33546c8":"print(err_cat_boost.mean())","9b8538d5":"len(A_test)","040dc457":"len(df_test3.columns)","97f8e04d":"Z = sc.transform(df_test3)","889162cc":"pred_test = cat_boost_reg.predict(Z)","d58b697e":"pred_test","e1cb889f":"len(pred_test)","10f96a80":"pred_test_series = pd.Series(pred_test)","13be11f2":"THETEST = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","19368eaa":"Final = pd.concat([THETEST , pred_test_series] , axis=1)","ffb10afc":"Final.columns = ['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition' , 'Predicted Values']","548bf251":"Final","85e29aa5":"Final.to_csv('Final.csv')","7bc72bac":"# 1) SVR","3ddb210f":"# I think we can use the same function which we used to impute BsmtQual as Garage's quality also contributes to overall quality","b1254d09":"# I think the above BsmtQual imputer fucntion will also work on BsmtCond","036ade68":"# Let's assume BsmtQual depends on OverallQual of the house \n","b36d9fa7":"# I think the quality of basement affects the exposure of the basement (since the quality expresses the height which in turn is resposible for the exposure), if the exposure in the basement is good then the quality are great as well and inverse is true also\n# Let's map BsmtExposure on basementQual","81171e30":"# CONFIRMED...BEST MODEL - CATBOOSTREGRESSION","46584b23":"\n# Let's start filling GarageQual parameter , let's assosciate GarageQual with OverallQual","4ad6a6b7":"# LET'S RETRAIN OUR MODEL SO THAT IT FITS OUR TEST DATA","315a8e72":"# 2) Decision Tree Regression","69dceae5":"# ALL THE MISSING VALUES HAVE NOW BEEN FILLED","5986793c":"# FILLING IN THE MISSING VALUES IN df_test","d80dae65":"# Since there are too many missing values with hue=LotShape ,  so we'll avoid using any hue in order to avoid any more missing values","f71b723f":"# Let's fill the most frequent value in Electrical as only i value is missing","a15f3fea":"# NOW WE'LL TURN ALL THE CATEGORICAL COLUMNS INTO DUMMY VARIABLE COLUMNS AND MAKE THEM INTEGER TYPE FOR FURTHER SCALING AND MODELLING","5bbe4bd3":"# LET's TAKE SUMMARY OF BOTH THE MODELS","3da12b00":"# My hunch is BsmtFinType1 also depends upon the condition of the overall house...but the mean value of each category is too close, hence can't draw fine lines of distinctions ","9a7be888":"# UP TILL NOW SVR has high R2 value but high rmse as well, whereas, DecisionTree has lower r2 but lower rmse also","aca4bf0a":"# 3) RANDOM FOREST REGRESSION","b60cdadc":"# RMSE of 37078, is kinda okay...but let's explore more models","430a5a91":"# I think imputing Attchd for all the missing value will be ok as there is no fixed trend in this case\n# I believed garage type depended upon bldg type which substantiates that missing values can be filled with Attchd","fe630389":"# I don't think that FireplaceQu (fireplace quality) is that important as around 50% homes (690 homes in total) don't have it\n# Because of this making dummies out FireplaceQu will cost memory..Hence I'll drop it out","fc67e024":"# SINCE THERE'S A MISMATCH OF NUMBER OF COLUMNS, IT SEEMS WE'VE TO NOW IMPLEMENT PCA AND LIMIT THE VALUES","6b73a1c2":"# same thing can be approximated for BsmtFinType2...My Guess","b1df228e":"# Imputing is practically sensible only when less than 5% (at max) are missing values, incase of Fence 80% is missing\n# hence deleting the Fence column","af36fd88":"# CATBOOST OUTPERFORMED EVEN RANDOMFOREST....CATBOOST TURNS OUT TO BE THE BEST MODEL","730bc8b8":"# RANDOM FOREST OUTPERFORMED SVR AND DECISION TREE","845229e4":"# ALL THE MISSING VALUES HAVE NOW BEEN FIXED","851d0c6d":"# LET'S IMPLEMENT ALL THESE THINGS WHICH I'VE DONE TILL NOW TO OUR TEST SET","2efc3ce2":"# Let's work a bit on the 1stFlrSF as it is directly related to ","b31c9964":"# BsmtCond is directly propotional to OverallCond as quality of basement is usually the same as that of house","e0326236":"# LET'S TRY CATBOOST","08c9c257":"# Implementing K-FOLD CROSS VALIDATION","241891f5":"# FITTING IN THE BEST PARAMETERS FOR SVR","c704b4cd":"# GarageYrBlt is highly correlated to YearBuilt, there is a high chance that garage was built along with the house","fc30bddc":"# MAKING X & y and doing train_test_split","2be12f32":"# FINDING ALL THE COLUMNS WHICH ARE CATEGORICAL","7a219d66":"# All quantitative missing values are filled, let's jump to filling missing categorical values","eda9567a":"# IMPLEMENTING REGRESSION MODELS","a51fcd5b":"# SVR MODEL IS NOT GOOD IN THIS CASE, EVEN AFTER TUNING IT DIDN'T IMPROVE MUCH AND THE TUNING ALSO COST A LOT OF TIME"}}