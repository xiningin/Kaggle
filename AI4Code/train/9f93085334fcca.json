{"cell_type":{"c0c00497":"code","95863a3f":"code","94f4a53d":"code","392f8cd0":"code","8b1c55a9":"code","d384ac49":"code","f7e6be3d":"code","0e83091a":"code","49d0a42a":"code","df0219d7":"code","9ffdb968":"code","b018dec0":"code","27f5ee1f":"code","9fbb6871":"code","81ad6063":"code","3439a6cf":"code","540f6e20":"code","55cb7221":"code","508239cc":"code","60c8de92":"code","d0187ca3":"code","108ea2d5":"code","99b8a387":"code","8007fe35":"code","63798594":"code","9c99c682":"code","2d5caef2":"code","590835df":"code","3b7a2845":"code","0dc35b35":"code","532547b3":"code","e12f2204":"code","8ed18f1a":"code","a9f39fd3":"code","0e4458d4":"code","f972e213":"code","f814ef6e":"code","fd4df1c4":"code","ed51ce82":"code","afa144ae":"code","75c30824":"code","c0942917":"code","8f9b2cd7":"code","5ac96cfc":"code","a0a2b20e":"code","e808a3fb":"code","7b0be7a6":"code","ad205a32":"markdown"},"source":{"c0c00497":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","95863a3f":"training = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntesting = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","94f4a53d":"training.head()","392f8cd0":"training.describe()","8b1c55a9":"correlations = training.corr()\ncorrelations = correlations[\"SalePrice\"].sort_values(ascending=False)\ncorrelations","d384ac49":"training_null = pd.isnull(training).sum()\ntesting_null = pd.isnull(testing).sum()\nnull = pd.concat([training_null,testing_null],axis =1 , keys = ['Training','Testing'])","f7e6be3d":"print(null)","0e83091a":"null_many = null[null.sum(axis=1)>200]\nnull_few = null[(null.sum(axis=1)>0) & (null.sum(axis=1)<200)]\nprint(null_many)","49d0a42a":"null_objects = [\"Alley\", \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"MasVnrType\",\"BsmtFinType1\", \"BsmtFinType2\", \"FireplaceQu\", \"GarageType\", \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"PoolQC\", \"Fence\", \"MiscFeature\"]","df0219d7":"for i in null_objects:\n    training[i].fillna('None', inplace = True)\n    testing[i].fillna('None', inplace = True)","9ffdb968":"training_null = pd.isnull(training).sum()\ntesting_null = pd.isnull(testing).sum()\nnull = pd.concat([training_null,testing_null],axis =1 , keys = ['Training','Testing'])","b018dec0":"print(null)","27f5ee1f":"null_many = null[null.sum(axis=1)>200]\nnull_few = null[(null.sum(axis=1)>0) & (null.sum(axis=1)<200)]\nprint(null_many)","9fbb6871":"training.drop('LotFrontage', axis=1, inplace = True)\ntesting.drop('LotFrontage', axis=1, inplace = True)","81ad6063":"null_few","3439a6cf":"from sklearn.preprocessing import Imputer\nImputer = Imputer(strategy = 'median')","540f6e20":"training[\"GarageYrBlt\"].fillna(training[\"GarageYrBlt\"].median(), inplace = True)\ntesting[\"GarageYrBlt\"].fillna(testing[\"GarageYrBlt\"].median(), inplace = True)\ntraining[\"MasVnrArea\"].fillna(training[\"MasVnrArea\"].median(), inplace = True)\ntesting[\"MasVnrArea\"].fillna(testing[\"MasVnrArea\"].median(), inplace = True)","55cb7221":"train_types = training.dtypes\ntest_types = testing.dtypes","508239cc":"num_train = train_types[(train_types==int) | (train_types==float)]\ncat_train = train_types[train_types==object]\nnum_test = test_types[(test_types==int) | (test_types==float)]\ncat_test = test_types[test_types==object]\nnum_trainval = list(num_train.index)\nnum_testval = list(num_test.index)\ncat_trainval = list(cat_train.index)\ncat_testval = list(cat_test.index)","60c8de92":"fill_num = []\n\nfor i in num_trainval:\n    if i in list(null_few.index):\n        fill_num.append(i)","d0187ca3":"print(fill_num)","108ea2d5":"for i in fill_num:\n    training[i].fillna(training[i].median(), inplace=True)\n    testing[i].fillna(testing[i].median(), inplace=True)","99b8a387":"fill_cat = []\n\nfor i in cat_trainval:\n    if i in list(null_few.index):\n        fill_cat.append(i)","8007fe35":"print(fill_cat)","63798594":"def most_common_term(a):\n    a = list(a)\n    return max(set(a), key = a.count)\nmost_common = [\"Electrical\", \"Exterior1st\", \"Exterior2nd\", \"Functional\", \"KitchenQual\", \"MSZoning\", \"SaleType\", \"Utilities\"]\n\ncounter = 0\nfor i in fill_cat:\n    most_common[counter] = most_common_term(training[i])\n    counter += 1","9c99c682":"most_common_dictionary = {fill_cat[0]: [most_common[0]], fill_cat[1]: [most_common[1]], fill_cat[2]: [most_common[2]], fill_cat[3]: [most_common[3]],\n                          fill_cat[4]: [most_common[4]], fill_cat[5]: [most_common[5]], fill_cat[6]: [most_common[6]], fill_cat[7]: [most_common[7]]}\nmost_common_dictionary","2d5caef2":"counter = 0\nfor i in fill_cat:  \n    training[i].fillna(most_common[counter], inplace=True)\n    testing[i].fillna(most_common[counter], inplace=True)\n    counter += 1","590835df":"training_null = pd.isnull(training).sum()\ntesting_null = pd.isnull(testing).sum()\n\nnull = pd.concat([training_null, testing_null], axis=1, keys=[\"Training\", \"Testing\"])\nnull[null.sum(axis=1) > 0]","3b7a2845":"sns.distplot(training['SalePrice'])","0dc35b35":"sns.distplot(np.log(training['SalePrice']))","532547b3":"training[\"newprice\"] = np.log(training[\"SalePrice\"])","e12f2204":"print(cat_trainval)","8ed18f1a":"for i in cat_trainval:\n    feature_set = set(training[i])\n    for j in feature_set:\n        feature_list= list(feature_set)\n        training.loc[training[i]==j,i] = feature_list.index(j)\n        \nfor i in cat_testval:\n    feature_set = set(testing[i])\n    for j in feature_set:\n        feature_list= list(feature_set)\n        testing.loc[testing[i]==j,i] = feature_list.index(j)           ","a9f39fd3":"training.head()","0e4458d4":"testing.info()","f972e213":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score, mean_squared_error\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.model_selection import train_test_split","f814ef6e":"X_train = training.drop(['Id','SalePrice','newprice'],axis=1)\nY_train = training['newprice'].values\nX_test = testing.drop(['Id'],axis=1)","fd4df1c4":"train_X, val_X, train_Y, val_Y = train_test_split(X_train,Y_train,random_state=0)","ed51ce82":"model = DecisionTreeRegressor(random_state=1)\nmodel.fit(train_X, train_Y)\nval_predict = model.predict(val_X)\nr2_model = r2_score(val_Y, val_predict) \nmse_model = mean_squared_error(val_Y, val_predict)\nprint(r2_model)\nprint(mse_model)\nscores_model = cross_val_score(model, train_X, train_Y, scoring=\"r2\")\nprint(\"Cross Validation Score: \" ,np.mean(scores_model))","afa144ae":"linreg = LinearRegression()\nlinreg.fit(train_X, train_Y)\nval_predict = model.predict(val_X)\nr2_linreg = r2_score(val_Y, val_predict) \nmse_linreg = mean_squared_error(val_Y, val_predict)\nprint(r2_linreg)\nprint(mse_linreg)\nscores_linreg = cross_val_score(linreg, train_X, train_Y, scoring=\"r2\")\nprint(\"Cross Validation Score: \" ,np.mean(scores_linreg))","75c30824":"lasso = Lasso()\nlasso.fit(train_X, train_Y)\nval_predict = model.predict(val_X)\nr2_lasso = r2_score(val_Y, val_predict) \nmse_lasso = mean_squared_error(val_Y, val_predict)\nprint(r2_lasso)\nprint(mse_lasso)\nscores_lasso = cross_val_score(lasso, train_X, train_Y, scoring=\"r2\")\nprint(\"Cross Validation Score: \" ,np.mean(scores_lasso))","c0942917":"ridge = Ridge()\nridge.fit(train_X, train_Y)\nval_predict = model.predict(val_X)\nr2_ridge = r2_score(val_Y, val_predict) \nmse_ridge = mean_squared_error(val_Y, val_predict)\nprint(r2_ridge)\nprint(mse_ridge)\nscores_ridge = cross_val_score(ridge, train_X, train_Y, scoring=\"r2\")\nprint(\"Cross Validation Score: \" ,np.mean(scores_ridge))","8f9b2cd7":"random = RandomForestRegressor()\nrandom.fit(train_X, train_Y)\nval_predict = model.predict(val_X)\nr2_random = r2_score(val_Y, val_predict) \nmse_random = mean_squared_error(val_Y, val_predict)\nprint(r2_random)\nprint(mse_random)\nscores_random = cross_val_score(random, train_X, train_Y, scoring=\"r2\")\nprint(\"Cross Validation Score: \" ,np.mean(scores_random))","5ac96cfc":"model_performances = pd.DataFrame({'Model': [\"Linear Regression\", \"Ridge\", \"Lasso\", \"Decision Tree Regressor\", \"Random Forest Regressor\"],\n                                  \"R Squared\": [r2_linreg, r2_ridge, r2_lasso, r2_model, r2_random],\n                                  \"MSE\": [mse_linreg,mse_ridge, mse_lasso, mse_model, mse_random],\n                                  \"Cross_val\": [np.mean(scores_linreg), np.mean(scores_ridge),np.mean(scores_lasso),np.mean(scores_model),np.mean(scores_random)]})\nmodel_performances.sort_values(by='Cross_val', ascending = False)\n","a0a2b20e":"ridge.fit(X_train, Y_train)","e808a3fb":"submission_predictions = np.exp(ridge.predict(X_test))","7b0be7a6":"submission = pd.DataFrame({'Id': testing['Id'],\n                          'SalePrice': submission_predictions})\nsubmission.to_csv(\"Housing_prices.csv\", index=False)\nprint(submission.shape)","ad205a32":"It appears that the target, SalePrice, is very skewed and a transformation like a logarithm would make it more normally distributed. Machine Learning models tend to work much better with normally distributed targets, rather than greatly skewed targets. By transforming the prices, we can boost model performance."}}