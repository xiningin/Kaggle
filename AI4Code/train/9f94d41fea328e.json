{"cell_type":{"21945fee":"code","0d52ee1f":"code","b4f9b2de":"code","93b2a8ca":"code","f49a025a":"code","7dc8a7e1":"code","8da65840":"code","39d31ccf":"code","4ef42b9b":"markdown","89bdfbec":"markdown","bd0f3f4a":"markdown","295dd4ae":"markdown","80f8d98d":"markdown","9865f262":"markdown","60d6b84c":"markdown","a80376e2":"markdown","b7e18cba":"markdown"},"source":{"21945fee":"import time\nimport numpy as np\nimport multiprocessing\nfrom joblib import delayed, Parallel, parallel_backend","0d52ee1f":"cores = multiprocessing.cpu_count()","b4f9b2de":"size = [101, 1001, 10001, 20001, 30001, 40001, 50001]\nrepPar = [0]*len(size)\nrepSeq = [0]*len(size)","93b2a8ca":"def Prim(i):\n             chech_vec = list(range(2,(i)))\n             P = np.mod(i , chech_vec)\n             if any(P == 0):\n                  return \"n\"\n             else:\n                  return \"y\"","f49a025a":"z = 0\nfor j in size:\n             start = time.time()\n             if __name__ == \"__main__\":\n                   with parallel_backend(\"loky\", inner_max_num_threads=2):\n                           PrimNum = Parallel(n_jobs = cores)(delayed(Prim)(i) for i in range(3,j))\n             end = time.time()\n             repPar[z] = end - start\n             z += 1","7dc8a7e1":"s = 0  \nfor j in size:\n             PrimNum = [0]*j\n             start = time.time()\n             for i in range(3,j):\n                  PrimNum[i] = Prim(i)\n             end = time.time()\n             repSeq[s] = end - start\n             s += 1","8da65840":"import matplotlib\nfrom matplotlib import pyplot as plt","39d31ccf":"plt.figure(figsize=(12,9))\nplt.plot(size, repPar, label='parallel')\nplt.plot(size, repSeq, label='sequential')\nplt.ylabel('seconds elapsed')\nplt.xlabel('number of prime numbers')\nplt.legend(loc = 'best')\nplt.show()","4ef42b9b":"This notebook shows you how to run a parallel loop using python. For this example, the calculation of prime numbers is used. \n\n![https:\/\/thumbs.gfycat.com\/PlumpHighlevelHammerheadbird-small.gif](https:\/\/thumbs.gfycat.com\/PlumpHighlevelHammerheadbird-small.gif)\n\nFirstly, lets import some libraries","89bdfbec":"You can see the enormous improvement of speed.\n\nThank you for reading.\n\n<p style=\"font-size:10pt;\">Source:<\/p>\n\n<p style=\"font-size:10pt;\">The gif is from https:\/\/thumbs.gfycat.com\/PlumpHighlevelHammerheadbird-small.gif <\/p>","bd0f3f4a":"Detecting the cores. *For local machine -1 core*:","295dd4ae":"Next step is to define the content of the loop as a function:","80f8d98d":"Importing visualization library:","9865f262":"Define vectors with different number of prime numbers","60d6b84c":"Ploting a chart with the time elapsed:","a80376e2":"Lets run the loop. For simplification, the test starts from 3 instead of 2:","b7e18cba":"Lets run the corresponding for-loop for comparison:"}}