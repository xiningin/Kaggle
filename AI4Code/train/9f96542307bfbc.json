{"cell_type":{"f89238a3":"code","f7f14179":"code","4d5e24af":"code","e2dc955e":"code","7372eaf5":"code","11c3c689":"code","6599afb3":"code","f4c093e5":"code","ad33eae0":"code","11b8192b":"code","9f900047":"code","08b06a04":"code","7857fd07":"markdown","86f6d180":"markdown","c9f0855d":"markdown","3943f13a":"markdown","6f956a79":"markdown","8dc2195f":"markdown"},"source":{"f89238a3":"import numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\n\nfrom datetime import datetime\nfrom sklearn.metrics import classification_report","f7f14179":"IMAGE_SIZE = 224\nDIRECTORY = \"data\/\"\n\nIMAGE_SHAPE = (IMAGE_SIZE, IMAGE_SIZE)\nTRAINING_DATA = str(DIRECTORY + \"train\")\nTESTING_DATA =str(DIRECTORY + \"test\")","4d5e24af":"train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    horizontal_flip=True,\n    width_shift_range=0.1,\n    height_shift_range=0.1,\n    rotation_range=30,\n    shear_range=0.3,\n    zoom_range=0.25,\n    rescale=1.\/255,\n    validation_split=0.2\n)\n\ntest_datagen = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale = 1.\/255)","e2dc955e":"train_generator = train_datagen.flow_from_directory(\n    TRAINING_DATA,\n    subset = \"training\",\n    shuffle = True,\n    target_size = IMAGE_SHAPE\n)\n\nvalid_generator = train_datagen.flow_from_directory(\n    TRAINING_DATA,\n    subset =\"validation\",\n    shuffle = False,\n    target_size = IMAGE_SHAPE\n)\n\ntest_generator = test_datagen.flow_from_directory(\n    TESTING_DATA,\n    shuffle = False,\n    target_size = IMAGE_SHAPE\n)","7372eaf5":"# from tensorflow.keras.applications.vgg16 import VGG16\n# from tensorflow.keras.applications.resnet_v2 import ResNet50V2\n# from tensorflow.keras.applications.efficientnet import EfficientNetB0\nfrom tensorflow.keras.applications.densenet import DenseNet121\n# from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\n\nbase_model = DenseNet121(weights=\"imagenet\", include_top=False, input_shape = (IMAGE_SIZE, IMAGE_SIZE, 3))\n\nfor layer in base_model.layers:\n    layer.trainable = False\n\nfor layer in base_model.layers[-3:]:    \n    print(layer.name)\n    layer.trainable = True","11c3c689":"from tensorflow.keras import Sequential\n\nmodel = Sequential([\n    base_model,\n#     tf.keras.layers.Flatten(), ## This gives 82% accuracy on test set\n    tf.keras.layers.GlobalAveragePooling2D(), ## This gives 84% accuracy on test set\n    tf.keras.layers.Dense(train_generator.num_classes, activation = \"softmax\")\n])\n\nmodel.summary()","6599afb3":"optimizer = tf.keras.optimizers.Adam(learning_rate = 1e-4)\nmodel.compile(\n    optimizer = optimizer,\n    loss = \"categorical_crossentropy\",\n    metrics = [\"accuracy\"]\n)","f4c093e5":"%%time\n\nes = tf.keras.callbacks.EarlyStopping(monitor = \"val_accuracy\", mode=\"max\", patience= 11, verbose=1, restore_best_weights=True)\nrlr = tf.keras.callbacks.ReduceLROnPlateau(monitor = \"val_accuracy\",patience = 5,verbose = 1, min_lr=5e-6,mode=\"max\",factor=0.2)\nlog = \"logs\/\" + datetime.now().strftime(\"%Y%m%d-%H%M%S\")\ntb = tf.keras.callbacks.TensorBoard(log_dir = log, update_freq = 100)\ncp = tf.keras.callbacks.ModelCheckpoint(\"checkpoints\/\", monitor = \"val_accuracy\", verbose = 1, save_best_only = True, save_weights_only = False)\n\nhistory = model.fit(\n        train_generator,\n        batch_size=32, \n        epochs=500, \n        validation_data= valid_generator,\n        callbacks=[es, rlr, tb, cp]\n)","ad33eae0":"# Accuracy\n\ntrain_eval = model.evaluate(train_generator, verbose = 2)\nval_eval = model.evaluate(valid_generator, verbose = 2)\ntest_eval = model.evaluate(test_generator, verbose = 2)\n\nprint(f\"Train Score: {train_eval[1]})\nprint(f\"Validation Score: {val_eval[1]})\nprint(f\"Test Score: {test_eval[1]})","11b8192b":"# Classification Report (Accuracy, Precision, Recall, F1)\n\npredIdxs = model.predict(test_generator)\npredIdxs = np.argmax(predIdxs, axis=1)\nprint(classification_report(test_generator.labels, predIdxs,\n                            target_names= test_generator.class_indices))","9f900047":"# Loss Plot\n\nplt.subplot(211)\nplt.title(\"Loss\")\nplt.plot(history.history[\"loss\"], label=\"train\")\nplt.plot(history.history[\"val_loss\"], label=\"test\")\nplt.legend()\n\n# Accuracy Plot\n\nplt.subplot(212)\nplt.title(\"Accuracy\")\nplt.plot(history.history[\"accuracy\"], label=\"train\")\nplt.plot(history.history[\"val_accuracy\"], label=\"test\")\nplt.legend()\n\nplt.show()","08b06a04":"# Save Model\n\nmodel.save(\"outputs\/model.h5\")\n\n# Load Model\n\nmodel = tf.keras.models.load_model(\"outputs\/model.h5\")","7857fd07":"## Model","86f6d180":"Used Pranshu15's image data generator, [here's the link](https:\/\/www.kaggle.com\/pranshu15\/tensorflow-keras-mobilenetv2-77\n).","c9f0855d":"## Split Data + Augmentation","3943f13a":"## Save \/ Load Results","6f956a79":"# TensorFlow (Keras) - DenseNet121 - 84%\n\nA beginner friendly notebook.\n\nThe code was written on JupyterLab and has not been fully tested on Kaggle. Other than moving images to their respective train and test folders, everything else should work and be used to replicate the results.","8dc2195f":"## Results"}}