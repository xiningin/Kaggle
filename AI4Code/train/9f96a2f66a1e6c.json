{"cell_type":{"99ba5d20":"code","cb22c405":"code","9994f3fd":"code","f1f91647":"code","7feeebf3":"code","ca0664cd":"code","3e155aed":"code","3964e543":"code","c6fe753f":"code","a1b558dd":"code","c63f3c37":"code","ebdef11f":"code","a269b328":"code","e3da5070":"code","3ee2a274":"code","4ba514ec":"code","04d52862":"code","cccfedad":"code","d36f41b3":"code","12683f90":"code","460c47fd":"code","4698eb95":"code","3add3cd6":"code","33e7016d":"code","5ced3594":"code","d70d1126":"code","a80f8204":"code","5deb8972":"code","13482a87":"code","67745011":"code","a0bd4ad9":"code","36907558":"code","726d3e82":"code","5ed8844a":"code","35c6b759":"code","13615546":"code","81f58f9c":"code","653c4769":"code","40215aa9":"code","d65fe1d9":"code","5cac90c0":"code","6f3c8290":"markdown","723316d8":"markdown","c43f9e90":"markdown","a2464fca":"markdown","048d14b3":"markdown","2693445d":"markdown","42bdeb5a":"markdown","0d33f124":"markdown","d7e7ea13":"markdown","e5b4bd22":"markdown","4dea4826":"markdown"},"source":{"99ba5d20":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","cb22c405":"df = pd.read_csv(\"..\/input\/world-happiness\/2019.csv\")\ndf.head()","9994f3fd":"df.shape","f1f91647":"df.drop(['Overall rank','Country or region'],axis=1,inplace=True)","7feeebf3":"df.describe()","ca0664cd":"df.info()","3e155aed":"df.isnull().sum()","3964e543":"sns.distplot(df['GDP per capita'])","c6fe753f":"sns.distplot(df['Social support'])","a1b558dd":"sns.distplot(df['Healthy life expectancy'])","c63f3c37":"sns.distplot(df['Freedom to make life choices'])","ebdef11f":"sns.distplot(df['Generosity'])","a269b328":"sns.distplot(df['Perceptions of corruption'])","e3da5070":"sns.heatmap(df.corr(),annot=True)","3ee2a274":"X = df.drop('Score',axis=1)\ny = df['Score']","4ba514ec":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()","04d52862":"X = pd.DataFrame(scaler.fit_transform(X),columns=X.columns)","cccfedad":"X.head()","d36f41b3":"from sklearn.model_selection import train_test_split","12683f90":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3)","460c47fd":"from sklearn.linear_model import LinearRegression,Ridge\nLR = LinearRegression(normalize=True)\nR = Ridge(alpha=0.5)","4698eb95":"LR.fit(X_train,y_train)","3add3cd6":"print(LR.score(X_test,y_test))","33e7016d":"y_pred = LR.predict(X_test)","5ced3594":"from sklearn import metrics\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","d70d1126":"plt.scatter(y_test,y_pred)","a80f8204":"sns.distplot(y_test-y_pred)","5deb8972":"# This is For Linear Regression\nax1 = sns.distplot(df['Score'],hist=False, color='r', label='Actual value')\nsns.distplot(y_pred,hist=False,color='b',label='Predicted value',ax=ax1)\nplt.title(\"Actual vs Predicted\")\nplt.xlabel(\"Price\")\nplt.ylabel(\"Proportion of Price\")\nplt.show()","13482a87":"R.fit(X_train,y_train)","67745011":"print(R.score(X_test,y_test))","a0bd4ad9":"y_predR = R.predict(X_test)","36907558":"plt.scatter(y_test,y_predR)","726d3e82":"sns.distplot(y_test-y_predR)","5ed8844a":"# This is For Rigde Regression\nax1 = sns.distplot(df['Score'],hist=False, color='r', label='Actual value')\nsns.distplot(y_predR,hist=False,color='b',label='Predicted value',ax=ax1)\nplt.title(\"Actual vs Predicted\")\nplt.xlabel(\"Price\")\nplt.ylabel(\"Proportion of Price\")\nplt.show()","35c6b759":"from sklearn.ensemble import RandomForestRegressor\nRFR = RandomForestRegressor()","13615546":"RFR.fit(X_train,y_train)","81f58f9c":"print(RFR.score(X_test,y_test))","653c4769":"y_predRFR = RFR.predict(X_test)","40215aa9":"plt.scatter(y_test,y_predRFR)","d65fe1d9":"sns.distplot(y_test- y_predRFR)","5cac90c0":"ax1 = sns.distplot(df['Score'],hist=False, color='r', label='Actual value')\nsns.distplot(y_predRFR,hist=False,color='b',label='Predicted value',ax=ax1)\nplt.title(\"Actual vs Predicted\")\nplt.xlabel(\"Price\")\nplt.ylabel(\"Proportion of Price\")\nplt.show()","6f3c8290":"# Check Null Values","723316d8":"# Using Minimax Scaler as Dataset Contents some Skewness","c43f9e90":"# Separate For Scaling down the Dataset","a2464fca":"# Using Ridge Regression","048d14b3":"# Splitting Dataset","2693445d":"# Using Random Forest Regression","42bdeb5a":"# Loading Dataset","0d33f124":"# Exploratory Data Analysis","d7e7ea13":"# Importing Library","e5b4bd22":"# Model Training Using Linear Regression","4dea4826":"# Correlation"}}