{"cell_type":{"a667cee6":"code","cc618a73":"code","1a18747f":"code","fbf85f96":"code","2b68e30b":"code","bd100cda":"code","86f86a77":"code","965a6b20":"code","851dd5cf":"code","eadd7206":"code","5486baf4":"code","a16dc24e":"code","53d11172":"code","6330658c":"code","1bbd3483":"code","5198461c":"code","a8489e26":"code","936520b4":"code","6d6c6069":"code","12ea9391":"code","e0d7f2f5":"code","3a150fc7":"code","4727e8ec":"code","f88c2675":"code","0f0bb980":"code","6594410e":"code","04c64fb4":"code","d5172d79":"code","928ea5b3":"code","61c8a432":"code","712d9b0a":"code","25861dc1":"code","c2c28ee7":"code","fe9d98a3":"code","e7403cf2":"code","eed5642e":"code","25ca08d9":"code","5a17e773":"code","83555f66":"code","4c79731b":"code","c2d44670":"code","7f32c809":"code","2f3f2782":"code","9883af5f":"markdown","2e57db73":"markdown","95221a76":"markdown","d28511ca":"markdown","1932c986":"markdown"},"source":{"a667cee6":"# Importing Libraries(Technologies)\nfrom math import sqrt\nfrom pandas_datareader import data \nimport matplotlib.pyplot as plt\nimport scipy\nimport pandas as pd\nimport datetime as dt\nimport urllib.request,json\nimport os\nimport numpy as np\nimport tensorflow as tf\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n#import sweetviz\nfrom keras.models import Sequential\nfrom keras.layers import Dense,LSTM","cc618a73":"!pip install sweetviz","1a18747f":"df=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndftest=pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","fbf85f96":"df.shape,dftest.shape","2b68e30b":"df.head()","bd100cda":"dftest.head()","86f86a77":"df.describe()","965a6b20":"df.dtypes","851dd5cf":"df.info()","eadd7206":"my_report = sweetviz.analyze([df, \"Train\"],target_feat='SalePrice')\nmy_report.show_html('Report.html')","5486baf4":"df.isnull().sum().sort_values(ascending=False)","a16dc24e":"#Total null values\ndf.isnull().values.sum()","53d11172":"cat=df.select_dtypes(include='object').columns\nprint(cat)","6330658c":"num=df.select_dtypes(include=['int64','float64']).columns\nprint(num)","1bbd3483":"df['YrSold'].median()","5198461c":"#filling na values with mode\nfor x in cat: \n  df[x]=df[x].fillna(df[x].value_counts().index[0])\n  dftest[x]=dftest[x].fillna(dftest[x].value_counts().index[0])\n","a8489e26":"#filling na values with median\nfor x in num:\n  df[x]=df[x].fillna(df[x].median())\n  if x!='SalePrice':\n    dftest[x]=dftest[x].fillna(dftest[x].median())\n","936520b4":"import matplotlib.pyplot as plt\nfig,a =  plt.subplots(7,7,figsize=(16,16))\nk=0\nfig.tight_layout(pad=3.0)\n\nfor x in range(0,7):\n  for y in range(0,7):\n    a[x][y].bar(df[cat[k]].unique(),df.groupby(cat[k])['SalePrice'].mean())\n    a[x][y].set_title(cat[k])\n    a[x][y].tick_params(axis='x', labelrotation=90 )\n    k+=1\n    if(k>42):\n      break","6d6c6069":"ordinal=['MSZoning', 'Street', 'Alley', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'PoolQC', 'Fence', 'MiscFeature',\n       'SaleType', 'SaleCondition']","12ea9391":"for f in ordinal:\n  s=df.groupby(f)['SalePrice'].mean().sort_values()\n  pre={}\n  x=0\n  for rownum,(indx,val) in enumerate(s.iteritems()):\n    pre[indx]=x\n    x+=1\n  df[f+'coded']=df[f].map(pre)\n  dftest[f+'coded']=dftest[f].map(pre)\n  df=df.drop(columns=[f],axis=1)\n  dftest=dftest.drop(columns=[f],axis=1)\n","e0d7f2f5":"df.head()","3a150fc7":"pearsoncorr = df.corr(method='pearson')\nabs(pearsoncorr['SalePrice'])","4727e8ec":"df_num=df[num]","f88c2675":"X=df.drop(columns=['SalePrice'],axis=1)\ny=df['SalePrice']","0f0bb980":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)","6594410e":"import xgboost as xgb\nfrom sklearn.metrics import mean_squared_error","04c64fb4":"# Hyper Parameter Optimization\n\nparams={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3,5,6,8,10,13,15],\n \"min_child_weight\" : [ 1, 3, 5, 7,9 ,11,14,19],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ,0.5],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7,0.9 ],\n \"num_boost_round\": [10, 25, 50,80],\n  \"n_estimators\" :[50,100,200,500,1000,2000] \n}","d5172d79":"xg_reg = xgb.XGBRegressor()","928ea5b3":"def timer(start_time=None):\n    if not start_time:\n        start_time = datetime.now()\n        return start_time\n    elif start_time:\n        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n        tmin, tsec = divmod(temp_sec, 60)\n        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))","61c8a432":"from sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nrandom_search=RandomizedSearchCV(xg_reg,param_distributions=params,n_iter=5,n_jobs=1,cv=2,verbose=3)","712d9b0a":"from datetime import datetime\n# Here we go\nstart_time = timer(None) # timing starts from this point for \"start_time\" variable\nrandom_search.fit(X_train,y_train)\ntimer(start_time) # timing ends here for \"start_time\" variable","25861dc1":"random_search.best_params_","c2c28ee7":"random_search.best_estimator_","fe9d98a3":"random_search.best_score_","e7403cf2":"xgbr=xgb.XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=0.5, gamma=0.4,\n             importance_type='gain', learning_rate=0.05, max_delta_step=0,\n             max_depth=8, min_child_weight=5, missing=None, n_estimators=2000,\n             n_jobs=1, nthread=None, num_boost_round=10, objective='reg:linear',\n             random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=1,\n             seed=None, silent=None, subsample=1, verbosity=1)","eed5642e":"xgbr.fit(X_train,y_train)\ny=xgbr.predict(X_test)","25ca08d9":"rmse = np.sqrt(mean_squared_error(y_test, y))\nprint(\"RMSE: %f\" % (rmse))","5a17e773":"from sklearn.metrics import r2_score\nr2_score(y_test,y)","83555f66":"pd.DataFrame({\n    'actual':y_test,\n    'predicted':y\n})","4c79731b":"y=xgbr.predict(dftest)","c2d44670":"dataf=pd.DataFrame({\n    'Id':dftest['Id'],\n    'SalePrice':y\n})","7f32c809":"dataf.head()","2f3f2782":"dataf.to_csv('house_prices_submission.csv',index=False)","9883af5f":"# Training And Optimizing hyperparameters","2e57db73":"Parameters list for randomized grid cv search","95221a76":"An easy Approach to the house prices problem.","d28511ca":"# **Exploratory Data Analysis**","1932c986":"# Feature Engineering"}}