{"cell_type":{"3eb19f56":"code","e89b6e11":"code","2ca33cc6":"code","a27a3697":"code","c269d9f4":"code","198661c7":"code","c88b8b5b":"code","893f2228":"code","e711b8db":"code","32de05fe":"code","c3432cb2":"code","de48acff":"code","0da73693":"code","3f80fe3b":"code","da051283":"code","51e0a4c2":"code","969b7ec8":"code","0f94aada":"code","ef9c1069":"code","8dffa161":"code","20212e59":"code","96c32b03":"code","c9f9b4fd":"code","2b97b19c":"code","8cb61f7b":"code","3b0c36e2":"code","360a55f2":"code","b56322f5":"code","29a0626b":"code","06870340":"code","230c3f9a":"markdown","1e1210af":"markdown","781a454b":"markdown","0d937362":"markdown","113effa6":"markdown","69cf7af7":"markdown","8bcfb666":"markdown","7b81db23":"markdown","26b56061":"markdown","a36c402a":"markdown"},"source":{"3eb19f56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e89b6e11":"data = pd.read_csv('\/kaggle\/input\/global-co2-emissions\/CO2Emission_LifeExp.csv')\ndata.head()","2ca33cc6":"# indexing using square brackets\ndata[\"Population\"][122]","a27a3697":"# using column attribute and row label\ndata.Population[122]","c269d9f4":"# using loc accessor\ndata.loc[11,[\"CO2Emissions\"]]","198661c7":"# Selecting only some columns\ndata[[\"LifeExpectancy\",\"Percapita\"]]","c88b8b5b":"print(type(data[\"Population\"]))     # series\nprint(type(data[[\"Percapita\"]]))   # data frames","893f2228":"# Slicing and indexing series\ndata.loc[1:10,\"Percapita\":\"Population\"] ","e711b8db":"# Reverse slicing \ndata.loc[10:1:-1,\"Percapita\":\"Population\"] ","32de05fe":"# From something to end\ndata.loc[1:5,\"CO2Emissions\":] ","c3432cb2":"boolean = data.LifeExpectancy > 83\ndata[boolean]","de48acff":"first_filter = data.Percapita < 3\nsecond_filter = data.Population > 100000000\ndata[first_filter & second_filter]","0da73693":"# Filtering column based others\ndata.Population[data.LifeExpectancy < 55]","3f80fe3b":"def div(n):\n    return n**2\n\ndata.Population.apply(div)\n","da051283":"# Or we can use lambda function\ndata.Population.apply(lambda n : n\/2)","51e0a4c2":"# Defining column using other columns\ndata3 = data\ndata3[\"total\"] = (data3.LifeExpectancy)*0.1 + data3.Population\ndata3.head()","969b7ec8":"print(data3.index.name)\n\ndata.index.name = \"index_name\"\ndata.head()","0f94aada":"data.head()","ef9c1069":"data = pd.read_csv('\/kaggle\/input\/global-co2-emissions\/CO2Emission_LifeExp.csv')\ndata.head()","8dffa161":"data1 = data.set_index([\"Code\",\"Percapita\"]) \ndata1.head(20)","20212e59":"dic = {'model': ['mercedes','mercedes','audi','audi'], 'class': ['A','S','S','A'],\n       'speed' : [200, 300, 350, 150], 'prod' : [2020, 2018, 2019, 1990]}\n\ndf = pd.DataFrame(dic)\ndf","96c32b03":"# pivoting\ndf.pivot(index=\"model\",columns = \"class\",values=\"speed\")","c9f9b4fd":"df1 = df.set_index(['model', 'class'])\ndf1","2b97b19c":"# level determines indexes\ndf1.unstack(level=1)","8cb61f7b":"df2 = df1.swaplevel(0,1)\ndf2","3b0c36e2":"# df.pivot(index=\"model\",columns = \"class\",values=\"prod\")\npd.melt(df,id_vars=\"model\",value_vars=[\"speed\",\"prod\"])\n","360a55f2":"df","b56322f5":"df.groupby('class').mean()","29a0626b":"df.groupby('class').speed.mean()","06870340":"df.groupby(\"model\")[\"speed\",\"prod\"].min()","230c3f9a":"# MANIPULATING DATA FRAMES WITH PANDAS","1e1210af":"**HIERARCHICAL INDEXING**","781a454b":"**STACKING and UNSTACKING DATAFRAME**","0d937362":"**TRANSFORMING DATA**","113effa6":"**PIVOTING DATA FRAMES**","69cf7af7":"**\nFILTERING DATA FRAMES**","8bcfb666":"**MELTING DATA FRAMES**","7b81db23":"**SLICING DATA FRAME**","26b56061":"Country: Unique Identifier\n\nCode: Country Code\n\nCO2Emissions: CO2 Emission by country (tons, 2016)\n\nYearlyChange: Yearly CO2 Emission Change in Percentage\n\nPercapita: CO2 Emission Per Capita\n\nPopulation: Population of the Country (2016)\n\nLifeExpectancy: Life Expectancy of the Country (2016)","a36c402a":"**INDEX OBJECTS AND LABELED DATA**"}}