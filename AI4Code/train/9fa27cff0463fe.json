{"cell_type":{"fe5e55a3":"code","af855ca4":"code","03cc081f":"code","e644f968":"code","2fc1a1c0":"code","3d239822":"code","f00344aa":"code","3641fe65":"code","d8a948cf":"code","c119c12f":"code","dfae9df2":"code","5d21ea44":"markdown","801099fe":"markdown","28130d53":"markdown","f51d7d2f":"markdown","66483c32":"markdown","cff0a52f":"markdown","ceb6e580":"markdown","d20bb04e":"markdown","e7deed5e":"markdown"},"source":{"fe5e55a3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","af855ca4":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import GridSearchCV\nfrom joblib import dump as save_model\nfrom joblib import load as load_weights\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error","03cc081f":"dataset = pd.read_excel('..\/input\/concrete-comprehensive-strength\/Concrete_Data.xls')\nprint ('The Shape of Dataset: ',dataset.shape)\ndataset.head()","e644f968":"print ('>>>>> Data Types        ')\nprint(dataset.dtypes)\nprint ('----------------------------------')\nprint ('>>>>> Counts of Missing values')\nprint (dataset.isna().sum())\nprint ('----------------------------------')\n# print ('         Numbers of unique values')\n# print ([[col,len (df[col].unique())] for col in df.columns])","2fc1a1c0":"# Select the target and features\nX = dataset.drop (columns=['Concrete compressive strength(MPa, megapascals) '])\ny = dataset['Concrete compressive strength(MPa, megapascals) ']\nX.shape","3d239822":"# split the data to train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\nprint ('Shape of Train dataset (Features): ',X_train.shape)\nprint ('Shape of Train dataset (Target)  : ',y_train.shape)\nprint ('Shape of Test dataset (Features) : ',X_test.shape)\nprint ('Shape of Test dataset (Target)   : ',y_test.shape)","f00344aa":"# take an object from the class\nModel = XGBRegressor()\n\nparam_grid=dict()\n# GridSearchModel to obtain the best parameter\nGridSearchModel = GridSearchCV(Model,param_grid=param_grid,cv= 5,return_train_score=True)\n\n# fit (train) the model\nGridSearchModel.fit(X_train, y_train)\n\n# Showing Results\nprint('Best Score is :', GridSearchModel.best_score_)\nprint('Best Parameters are :', GridSearchModel.best_params_)","3641fe65":"best_model = GridSearchModel.best_estimator_\n\nbest_model.fit(X_train,y_train)\n\nprint ('Train score: ',best_model.score(X_train,y_train))\n\nprint ('Train score: ',best_model.score(X_test,y_test))","d8a948cf":"predictions = best_model.predict(X_test)","c119c12f":"# mean absolute error \nprint ('Mean Absolute Error (MAE): ',mean_absolute_error(y_test, predictions))\nprint ('--------------------------------------------')\nprint ('Mean Squared Error (MSE): ',mean_squared_error(y_test, predictions))","dfae9df2":"save_model(best_model , '.\/concrete_weights.sav')","5d21ea44":"## Check to the missing value and data types","801099fe":"# The best Model","28130d53":"## Read the dataset","f51d7d2f":"# Model Evaluation\n\n* mean absolute error \n* mean squared error","66483c32":"Great! \n\n*No missing and categorical variables*","cff0a52f":"# Separate the data\n\nTarget, Features, Train and Test","ceb6e580":"# Prepare and train the model\n\n* XGBRegressor model will be selected.","d20bb04e":"# Save the model","e7deed5e":"# Import Libraries"}}