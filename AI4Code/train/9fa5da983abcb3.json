{"cell_type":{"7eb17679":"code","6994e23e":"code","951d9bbd":"code","ec638f7c":"code","57767b67":"code","9ea47b42":"code","df2bf56f":"code","9b860c5c":"code","2603b616":"code","47796e09":"code","b481b0b5":"code","633d1635":"code","d3fd60e0":"code","52451712":"code","f0ed0594":"code","7534af7b":"code","2ec27a87":"code","c60a855e":"code","d173de2f":"markdown"},"source":{"7eb17679":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport tensorflow as tf","6994e23e":"df=pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ndf.head()","951d9bbd":"df_test=pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\").values\ndf_test[0:5]","ec638f7c":"X=df.drop([\"label\"],axis=\"columns\").values\nY=df[\"label\"].values\nX=X\/255.0","57767b67":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2)","9ea47b42":"X=X.reshape(len(X),28,28,-1)\nx_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2)","df2bf56f":"from keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(\n        featurewise_center=False,  \n        samplewise_center=False,  \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False,  \n        zca_whitening=False,  \n        rotation_range=15,  \n        zoom_range = 0.15,  \n        width_shift_range=0.1,  \n        height_shift_range=0.1, \n        horizontal_flip=False,  \n        vertical_flip=False) \n\ndatagen.fit(x_train)","9b860c5c":"reduce_lr = tf.keras.callbacks.LearningRateScheduler(lambda x: 1e-3 * 0.95 ** x)","2603b616":"model = tf.keras.models.Sequential([\n        tf.keras.layers.Conv2D(16,(3,3),padding='same',activation='relu',input_shape=(28,28,1)),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.MaxPooling2D(),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Conv2D(32,(3,3),padding='same',activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.MaxPooling2D(),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Conv2D(64,(3,3),padding='same',activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Conv2D(64,(3,3),padding='same',activation='relu'),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(1024, activation=\"relu\"),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dropout(0.2),\n        tf.keras.layers.Dense(512, activation=\"relu\"),\n        tf.keras.layers.BatchNormalization(),\n        tf.keras.layers.Dense(10, activation=\"softmax\")\n    ])\n\n\n\n\n# optimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer='adam',\n                  loss='sparse_categorical_crossentropy',\n                  metrics=['accuracy'])\nmodel.summary()    ","47796e09":"batch_size = 64\nepochs = 30\nhistory = model.fit_generator(datagen.flow(x_train, y_train, batch_size = batch_size), epochs = epochs, \n                              validation_data = (x_test, y_test), verbose=2, \n                              steps_per_epoch=x_train.shape[0] \/\/ batch_size,\n                              callbacks=[reduce_lr])","b481b0b5":"model.save('model.h5')","633d1635":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title(\"Model Loss\")\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend(['Train', 'Test'])\nplt.show()","d3fd60e0":"plt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('Model Accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend(['Train','Test'])\nplt.show()","52451712":"model.evaluate(x_test,y_test)","f0ed0594":"from sklearn.metrics import accuracy_score\ny_pred=model.predict(x_test)\ny_preds=[np.argmax(pred) for pred in y_pred]\naccuracy_score(y_preds,y_test)","7534af7b":"from sklearn.metrics import confusion_matrix\nconfusion_mtx = confusion_matrix(y_test,y_preds) \nconfusion_mtx","2ec27a87":"df_test=df_test.reshape(len(df_test),28,28,-1)\na_pred=model.predict((df_test)\/255.0)\na_preds=[np.argmax(pred) for pred in a_pred]\n    \nsamp=pd.read_csv(\"..\/input\/digit-recognizer\/sample_submission.csv\")\nsamp[\"Label\"]=a_preds\nsamp.head()","c60a855e":"samp.to_csv(\"outputCNN.csv\",index=False)","d173de2f":"# Data Augumentation"}}