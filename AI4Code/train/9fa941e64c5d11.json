{"cell_type":{"395cd33b":"code","f3808e1a":"code","5da0f4f9":"code","57bbd1f9":"code","ab6fa819":"code","c251014f":"code","cd57fd4f":"code","3aa97625":"code","a20cf198":"code","1593068e":"code","69814c9d":"code","9fccae34":"code","e6a4cf3a":"code","34eed6be":"code","e24fc798":"code","7fc1f430":"code","a9336625":"code","8766ed69":"code","6e0dd579":"code","58fc11dc":"code","54e6766e":"code","2a757f4d":"code","5f008621":"code","55388620":"code","e74de7a5":"code","5241a1c7":"code","b7b74009":"code","9cfec1c9":"code","db78e4e9":"code","b7f98151":"code","c9b86015":"code","363c2d9c":"code","a8bdc45c":"code","eed02696":"code","788ea219":"code","195d6368":"code","63710656":"code","aa565f3f":"markdown","6dad1118":"markdown","7048620a":"markdown","5f4e903b":"markdown","cf74acdf":"markdown","8bf19c63":"markdown","07eb9086":"markdown","64d86b53":"markdown","ad9ea89e":"markdown","1a2bc24a":"markdown","6958e542":"markdown","1f1d1242":"markdown","70d0c6e1":"markdown","d0644fea":"markdown","00f957ac":"markdown","3108601b":"markdown","75afcd24":"markdown","13c4be9a":"markdown","cce3236d":"markdown","7638a1a2":"markdown","76751abe":"markdown","14674a83":"markdown","17b867e9":"markdown","2cbe7a65":"markdown","169ab7db":"markdown","d6b3dadf":"markdown","ade72e23":"markdown","6bc667d7":"markdown","f4a6796b":"markdown"},"source":{"395cd33b":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.under_sampling import TomekLinks\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\nimport warnings\nwarnings.filterwarnings('ignore')","f3808e1a":"data = pd.read_csv('..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\ndata.head()","5da0f4f9":"data.describe()","57bbd1f9":"data.info()","ab6fa819":"data.shape","c251014f":"data.drop('salary', axis=1, inplace=True)","cd57fd4f":"grid = sns.PairGrid(data= data, hue='status')\ngrid = grid.map_upper(plt.scatter)\ngrid = grid.map_diag(sns.kdeplot, shade=True)\ngrid = grid.map_lower(sns.kdeplot)\nplt.title('Distribution of the features')","3aa97625":"cat_feats = ['gender', 'ssc_b', 'hsc_b', 'hsc_s', 'degree_t', 'workex', 'specialisation']\n\nfig, axes = plt.subplots(2, 4, figsize=(20, 15))\n\nsns.countplot(data.gender, hue=data.status, ax=axes[0][0])\nsns.countplot(data.ssc_b, hue=data.status, ax=axes[0][1])\nsns.countplot(data.hsc_b, hue=data.status, ax=axes[0][2])\nsns.countplot(data.hsc_s, hue=data.status, ax=axes[0][3])\nsns.countplot(data.degree_t, hue=data.status, ax=axes[1][0])\nsns.countplot(data.workex, hue=data.status, ax=axes[1][1])\nsns.countplot(data.specialisation, hue=data.status, ax=axes[1][2])","a20cf198":"num_feats = ['ssc_p', 'hsc_p', 'degree_p', 'etest_p', 'mba_p']\n\nfig1, axes1 = plt.subplots(2, 3, figsize=(15, 10))\n\nsns.boxplot(data.status, data.ssc_p, ax=axes1[0][0])\nsns.boxplot(data.status, data.hsc_p, ax=axes1[0][1])\nsns.boxplot(data.status, data.degree_p, ax=axes1[0][2])\nsns.boxplot(data.status, data.etest_p, ax=axes1[1][0])\nsns.boxplot(data.status, data.mba_p, ax=axes1[1][1])","1593068e":"data.gender.value_counts()","69814c9d":"data.ssc_b.value_counts()","9fccae34":"data.hsc_b.value_counts()","e6a4cf3a":"data.hsc_s.value_counts()","34eed6be":"data.degree_t.value_counts()","e24fc798":"data.workex.value_counts()","7fc1f430":"data.specialisation.value_counts()","a9336625":"encoder = LabelEncoder()\n\ndata['gender'] = encoder.fit_transform(data['gender'])\ndata['ssc_b'] = encoder.fit_transform(data['ssc_b'])\ndata['hsc_b'] = encoder.fit_transform(data['hsc_b'])\ndata['hsc_s'] = encoder.fit_transform(data['hsc_s'])\ndata['degree_t'] = encoder.fit_transform(data['degree_t'])\ndata['workex'] = encoder.fit_transform(data['workex'])\ndata['specialisation'] = encoder.fit_transform(data['specialisation'])\n\ndata.head()","8766ed69":"#encode target labels.\ndef encode(col):\n    if col[0] == 'Placed':\n        return 1\n    else:\n        return 0\n    \ndata['status'] = data[['status']].apply(encode, axis=1)","6e0dd579":"train_data, test_data = train_test_split(data, test_size=0.2, stratify=data.status)\n\nprint('train size : ' + str(train_data.shape[0]))\nprint('test size : ' + str(test_data.shape[0]))","58fc11dc":"sns.countplot(train_data.status)","54e6766e":"train_data.status.value_counts()","2a757f4d":"test_data.head()","5f008621":"train_labels = pd.DataFrame(train_data.status, columns=['status'])\ntrain_data.drop('status', axis=1, inplace=True)\n\ntest_labels = pd.DataFrame(test_data.status, columns=['status'])\ntest_data.drop('status', axis=1, inplace=True)\n\nsampler = TomekLinks()\ntrain_res, labels_res = sampler.fit_resample(train_data, train_labels)","55388620":"labels_res.status.value_counts()","e74de7a5":"corr = pd.concat([train_res, labels_res], axis=1).corr()\nplt.figure(figsize=(15, 15))\nsns.heatmap(corr, cmap='YlGnBu', annot=True)","5241a1c7":"extra_tree_forest = ExtraTreesClassifier() \n  \nextra_tree_forest.fit(train_res, labels_res) \n\nfeature_importance = extra_tree_forest.feature_importances_ \n\nplt.figure(figsize=(15, 15))\nplt.bar(train_res.columns, feature_importance) \nplt.xlabel('Feature Labels') \nplt.ylabel('Feature Importances') \nplt.title('Comparison of different Feature Importances') \nplt.show()","b7b74009":"def print_metrics(predicts, true_labels):\n    print('Accuracy : ' + str(round(accuracy_score(predicts, true_labels), 2)))\n    print('Precision : ' + str(round(precision_score(predicts, true_labels), 2)))\n    print('Recall : ' + str(round(recall_score(predicts, true_labels), 2)))\n    print('f1score : ' + str(round(f1_score(predicts, true_labels), 2)))","9cfec1c9":"test_data.reset_index(inplace=True, drop=True)\ntest_labels.reset_index(inplace=True, drop=True)\n\ntrain_res.reset_index(inplace=True, drop=True)\nlabels_res.reset_index(inplace=True, drop=True)\n\ntrain_res.drop('index', axis=1, inplace=True)\nlabels_res.drop('index', axis=1, inplace=True)\ntest_data.drop('index', axis=1, inplace=True)\ntest_labels.drop('index', axis=1, inplace=True)","db78e4e9":"def scale_data(train, test, num_cols):\n    scaler = MinMaxScaler(feature_range=(0, 3))\n\n    temp_data = train.copy()\n    temp_test = test.copy()\n\n    scaled_data = pd.DataFrame(scaler.fit_transform(temp_data[num_cols]), columns = num_cols)\n    temp_data.drop(num_cols, axis=1, inplace=True)\n    final_data = pd.concat([temp_data, scaled_data], axis=1)\n\n    scaled_test = pd.DataFrame(scaler.fit_transform(temp_test[num_cols]), columns = num_cols)\n    temp_test.drop(num_cols, axis=1, inplace=True)\n    final_test = pd.concat([temp_test, scaled_test], axis=1)\n    \n    return final_data, final_test","b7f98151":"logistic = LogisticRegression()\nlog_data, log_test = scale_data(train_res, test_data, num_feats + ['sl_no'])\nlogistic.fit(log_data, labels_res)\npreds = logistic.predict(log_test)\nprint_metrics(preds, test_labels)\n\nlog_matrix = confusion_matrix(preds, test_labels)","c9b86015":"dtc = DecisionTreeClassifier()\ndtc.fit(train_res, labels_res)\npreds = dtc.predict(test_data)\nprint_metrics(preds, test_labels)\n\ndtc_matrix = confusion_matrix(preds, test_labels)","363c2d9c":"rfc = RandomForestClassifier()\nrfc.fit(train_res, labels_res)\npreds = rfc.predict(test_data)\nprint_metrics(preds, test_labels)\n\nrfc_matrix = confusion_matrix(preds, test_labels)","a8bdc45c":"fig, axes2 = plt.subplots(1, 3, figsize=(20, 5))\n\nsns.heatmap(log_matrix, cmap='YlGnBu', annot=True, ax=axes2[0])\nsns.heatmap(dtc_matrix, cmap='YlGnBu', annot=True, ax=axes2[1])\nsns.heatmap(rfc_matrix, cmap='YlGnBu', annot=True, ax=axes2[2])\n\naxes2[0].set_title(\"Logistic Regression\")\naxes2[1].set_title(\"Decision Tree\")\naxes2[2].set_title(\"Random Forest\")","eed02696":"logistic_tune = LogisticRegression()\nlog_data, log_test = scale_data(train_res, test_data, num_feats + ['sl_no'])\n\nparams = {\n    'penalty' : ['l1', 'l2'],\n    'max_iter' : [80, 90, 100, 110, 120]\n}\n\nsearch = RandomizedSearchCV(logistic_tune, params, n_iter=20, cv=6, random_state=21)\n\nbest_model = search.fit(log_data, labels_res)\nbest_logistic = LogisticRegression(**best_model.best_estimator_.get_params())\nbest_logistic.fit(log_data, labels_res)\npreds = best_logistic.predict(log_test)\nprint_metrics(preds, test_labels)\n\nlog_matrix = confusion_matrix(preds, test_labels)","788ea219":"dtc_tune = DecisionTreeClassifier()\n\nparams = {\n    'max_depth' : [6, 7, 8],\n    'max_features' : [7, 8, 9]    \n}\n\nsearch = RandomizedSearchCV(dtc_tune, params, n_iter=50, cv=8, random_state=21)\n\nbest_model = search.fit(train_res, labels_res)\nbest_dtc = DecisionTreeClassifier(**best_model.best_estimator_.get_params())\nbest_dtc.fit(train_res, labels_res)\npreds = best_dtc.predict(test_data)\nprint_metrics(preds, test_labels)\n\ndtc_matrix = confusion_matrix(preds, test_labels)","195d6368":"rfc_tune = RandomForestClassifier()\n\nparams = {\n    'n_estimators' : [160, 170, 180],\n    'max_depth' : [6, 7, 8],\n    'max_features' : [5, 6, 7],\n    'bootstrap' : [True],\n    'min_samples_leaf' : [2, 3]    \n}\n\nsearch = RandomizedSearchCV(rfc_tune, params, n_iter=40, cv=8, random_state=21)\n\nbest_model = search.fit(train_res, labels_res)\nbest_rfc = RandomForestClassifier(**best_model.best_estimator_.get_params())\nbest_rfc.fit(train_res, labels_res)\npreds = best_rfc.predict(test_data)\nprint_metrics(preds, test_labels)\n\nrfc_matrix = confusion_matrix(preds, test_labels)","63710656":"fig, axes3 = plt.subplots(1, 3, figsize=(20, 5))\n\nsns.heatmap(log_matrix, cmap='YlGnBu', annot=True, ax=axes3[0])\nsns.heatmap(dtc_matrix, cmap='YlGnBu', annot=True, ax=axes3[1])\nsns.heatmap(rfc_matrix, cmap='YlGnBu', annot=True, ax=axes3[2])\n\naxes3[0].set_title(\"Logistic Regression Tuned\")\naxes3[1].set_title(\"Decision Tree Tuned\")\naxes3[2].set_title(\"Random Forest Tuned\")","aa565f3f":"# Model Training Without Tuning.","6dad1118":"## Random Forest","7048620a":"### After sampling.\n1. Size of class 1 : 106\n2. Size of class 0 : 54\n\n12 examples from the majority class were dropped off.","5f4e903b":"### Just 31% of the dataset constitutes the negative (not placed) samples. This makes the dataset slightly imbalanced.\n\nAs the size of the train data is vary small, downsampling would reduce the size of the dataset further. Hence I guess upsampling technique would work better here.\n\n## Data Imbalance Handling Techniques Resources.\n\n1. Basic Techniques: https:\/\/www.analyticsvidhya.com\/blog\/2020\/07\/10-techniques-to-deal-with-class-imbalance-in-machine-learning\/\n2. Geometric Smote: https:\/\/towardsdatascience.com\/handling-imbalanced-data-using-geometric-smote-770b49d5c7b5\n3. ADASYN: https:\/\/towardsdatascience.com\/adasyn-adaptive-synthetic-sampling-method-for-imbalanced-data-602a3673ba16","cf74acdf":"Lets get a sense of the numerical features","8bf19c63":"# Model Training with Parameter Tuning.","07eb9086":"# About the data.\nThere are various features in the data regarding the candidate everything from the class 10th till the MBA. To predict if the candidate will get placed or not.\n\n1. sl_no : Serial Number.\n2. gender : Sex of the candidate.\n3. ssc_p : Class 10th percentage.\n4. ssc_b : Class 10th board of education.\n5. hsc_p : Class 12th percentage.\n6. hsc_b : Class 12th board of education.\n7. hsc_s : Field of study in Class 12th.\n8. degree_p : Degree percentage.\n9. degree_t : Undergrad field of education.\n10. workex : Years of work experience.\n11. etest_p : Employability test percentage.\n12. specialisation : Field of study during Post Graduation.\n13. mba_p : MBA percentage.\n14. status : placed\/not placed.","64d86b53":"## Confusion Matrix","ad9ea89e":"## Conclusions from the above plots.\n\n1. Males have performed a lot better during the interview process than females.\n2. The board of study of class 10 and 12 actually donot matter.\n3. A company will need people who have good amount of knoweledge with respect to how to manage a company, manage the financial part of the company, etc. Another set of people who can work on the technology part. Hence Management and Technology become the two major parts on which the company relies on. We see that these two fields have better job opportunities than the rest of them.\n4. Definitely a person who has prior experience will have better chance of getting placed.\n5. Most frequently asked question, HR of Finance in MBA? Looking at the plot above its clear that Finance has better opportunities than HR. But HR is definitely a position where you earn a lot of respect.","1a2bc24a":"# Data Analysis.","6958e542":"## Logistic Regression","1f1d1242":"# Data Imbalance.","70d0c6e1":"## Decision Tree","d0644fea":"## Observation.\n1. All the numerical features are almost symmetrically distributed with respect to the mean.\n2. Placed candidates have higher class 10, class 12, and degree percentages.","00f957ac":"# Summary\n\nThe dataset size was 215. Split the dataset into 80% train and 20% test set. After analysis the dataset was trained on three different models and tested on the same. The test accuracies were as shown below.\n\n### Logistic Regression\n1. Without tuning : 95%\n2. With tuning : 95%\n\n### Decision Tree\n1. Without tuning : 70%\n2. With tuning : 79%\n\n### Random Forest\n1. Without tuning : 86%\n2. With tuning : 86%\n\nLogistic Regression and Random Forest showed no improvment after tuning them as they were already in their best with default parameter values. But could see some significant improvement in the Decision Tree.","3108601b":"## Logistic Regression","75afcd24":"### Problem is to predict if the candidate will get placed or not.","13c4be9a":"# Exploring Categories.\n\nHandling categorical features seems to be the most important part of analysis and preprocessing.","cce3236d":"# Correlation and Feature Importance.","7638a1a2":"## Conclusions.\n1. There is signigicant difference between the distribution of the ssc_p, hsc_p, and degree_p of placed and not placed candidates. Done this mean marks matter? Not exactly, as the dataset is very small and yeah its true for this set of examples.\n2. Whereas etest_p and mba_p should have mattered more than the anything else. But that does not seem to be true here.\n\n#### Hence conclusion, marks matters but will never be the deciding factor. What matters is the knoweledge one has gained and the field in which he is working on.","76751abe":"## What can we infer from this?\n1. Features representing the percentage seem to have very high importance ni this problem.\n2. ssc_p (Class 10 percentage) is the most important feature.\n3. Board of education have very less importance as seen before.\n4. ssc_p, hsc_p, and degree_p are high positive correlation with each other. This says that most of the candidates were consistent in their performance from class 10 till the post graduation. Some candidates might have improved or deproved their performance.\n5. Usually serial number of the candidate does not have influence over if the candidate has to be selected or not. But the model could find some pattern in that feature. This might help the model accuracy.\n\nLets train now!!","14674a83":"Less candidates have got work experience. Hence having a work experience will give and edge over other candidates.","17b867e9":"## Confusion Matrix","2cbe7a65":"## Encoding Categorical Features.","169ab7db":"## Thank you for completing the notebook. Hope you like it. If you got to learn something from this notebook consider dropping a like. If an expert is reading this notebook to review it, do like as this would encourage me to learn more and improve myself.\n\n## Also do have a look at my another notebook on Red Wine Quality Prediction.\nhttps:\/\/www.kaggle.com\/nayakroshan\/red-wine-quality-prediction-accuracy-0-98","d6b3dadf":"# Train Test Split.","ade72e23":"## Pairplot.\nSource to learn about pairplot: https:\/\/towardsdatascience.com\/visualizing-data-with-pair-plots-in-python-f228cf529166","6bc667d7":"## Random Forest","f4a6796b":"## Decision Tree"}}