{"cell_type":{"4c4d10d6":"code","a584750a":"code","80bd98fb":"code","46567e8d":"code","5d981620":"code","0d703dc4":"code","a0a0e71f":"code","c2db0c26":"code","3c91c267":"code","cbbb1a74":"code","07f16a46":"code","0d63eeb1":"code","b574a4e7":"code","05ef2f26":"code","a0b4cdd4":"code","f4179c3d":"code","88247bc5":"code","75f82f7f":"code","914b6832":"code","ec67c4a8":"code","cfe77296":"code","66caabe1":"markdown","a9064a51":"markdown","0dadf1bc":"markdown","728bb876":"markdown","9d93bd81":"markdown","38a4ab30":"markdown","ce96228b":"markdown","d0e6335b":"markdown","66eb941b":"markdown","f834c477":"markdown","35a28276":"markdown","58def159":"markdown","163e9142":"markdown","8048cbac":"markdown","944bd705":"markdown","10cd86a7":"markdown","ddec5e82":"markdown","ff9aeae7":"markdown","6acbc33b":"markdown","2ffcb058":"markdown","bd76542f":"markdown"},"source":{"4c4d10d6":"# Loading Fashion MNIST dataset\nimport tensorflow as tf\nfashion_mnist = tf.keras.datasets.fashion_mnist\n(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data()","a584750a":"X_train.shape, X_test.shape","80bd98fb":"class_names = [\"T-shirt \/ top\", \"Trouser\", \"Pullover\", \"Dress\",\n        \"Coat\", \"Sandal\", \"Shirt\", \"Sneaker\", \"Bag\", \"Ankle boot\"]","46567e8d":"import matplotlib.pyplot as plt\nplt.figure()\nplt.imshow (X_train[1])\nplt.colorbar()\nplt.grid(False)\nplt.show()","5d981620":"X_train = X_train \/ 255.0\nX_test = X_test \/ 255.0","0d703dc4":"model = tf.keras.Sequential ([\n   tf.keras.layers.Flatten (input_shape = (28, 28), name = \"Input\"),\n   tf.keras.layers.Dense (128, activation = 'relu', name = \"Hidden\"),\n   tf.keras.layers.Dense (10, name = \"Output\")\n])","a0a0e71f":"model.summary()","c2db0c26":"model.layers","3c91c267":"hidden = model.layers[1]\nprint(hidden.name)","cbbb1a74":"weights, biases = hidden.get_weights ()\nprint(weights)","07f16a46":"print(biases)","0d63eeb1":"weights.shape, biases.shape","b574a4e7":"model.compile(loss = tf.keras.losses.SparseCategoricalCrossentropy(\n                         from_logits = True),\n              optimizer = 'adam',\n              metrics = ['accuracy'])","05ef2f26":"history = model.fit (X_train, y_train, epochs = 10, validation_split = 0.1)","a0b4cdd4":"import pandas as pd\npd.DataFrame (history.history).plot (figsize = (8, 5))\nplt.grid(True)\nplt.show()","f4179c3d":"test_loss, test_acc = model.evaluate (X_test, y_test, verbose = 2)\nprint ('\\ nTest accuracy:', test_acc)","88247bc5":"probability_model = tf.keras.Sequential ([model, tf.keras.layers.Softmax()])","75f82f7f":"predictions = probability_model.predict(X_test)","914b6832":"predictions[0]","ec67c4a8":"import numpy as np\nnp.argmax(predictions[0])","cfe77296":"y_test[0]","66caabe1":"## <span style=\"color:OrangeRed\">Making a Prediction<\/span> \nYou can convert logits into possibilities by adding a softmax layer for easier interpretation.","a9064a51":"## <span style=\"color:OrangeRed\">Building the\u00a0Model<\/span>\nLet's start building the model.","0dadf1bc":"You can easily get a model's list of layers, to fetch a layer by its index, or you can fetch it by name:","728bb876":"Let's look at the shape and data type of the training and test set.","9d93bd81":"![Fashion MNIST](https:\/\/github.com\/zalandoresearch\/fashion-mnist\/blob\/master\/doc\/img\/fashion-mnist-sprite.png?raw=true)","38a4ab30":"The model predicted the first image as the ankle boot. Let's take a look at the actual label of the first image.","ce96228b":"Let's scale the inputs to increase the training speed and performance of the model.","d0e6335b":"## <span style=\"color:OrangeRed\">Training the\u00a0Model<\/span>\nNow we can train the model by calling the fit () method.","66eb941b":"# <span style=\"color:OrangeRed\">Image Classification with TensorFlow 2.x<\/span>\nIn this notebook, I will explain classifying images using deep neural networks with TensoFlow.","f834c477":"Note that 10 possibilities corresponding to each fashion item were returned. You can see the label with the highest probability using the argmax method in NumPy.","35a28276":"The fit () method returns a History object containing training parameters. history.history is in the form of a dictionary. This dictionary includes metric and loss measured after each epoch in training and validation sets. If you convert this dictionary structure to a Pandas DataFrame structure and use the plot () method, you can plot the training curve.","58def159":"### You can find more detailed explanations of this lesson on our [Medium](https:\/\/tirendazacademy.medium.com) page.\n\nDon't forget to follow us [LinkedIn](https:\/\/www.linkedin.com\/in\/tirendaz-academy), [Twitter](https:\/\/twitter.com\/TirendazAcademy) and [GitHub](https:\/\/github.com\/TirendazAcademy).","163e9142":"## <span style=\"color:OrangeRed\">Compiling the\u00a0Model<\/span>\nThe Loss function measures how accurately the model predicts during training. We want to minimize this function in order to direct the model in the right direction. The optimizer updates the model based on the loss function and the data it sees. The Metrics argument is used to monitor training and testing steps.","8048cbac":"As you can see, the model made the correct prediction.\n\n----","944bd705":"## <span style=\"color:OrangeRed\">Evaluating the\u00a0Model<\/span> \nLet's call evaluate () method and evaluate the model by using test set.","10cd86a7":"So the model predicted the label of each picture on the test set. Let's take a first predict.","ddec5e82":"Let's use the matplotlib library to see the second image.","ff9aeae7":"All parameters of a layer can be accessed with the get_weights () and set_weights () methods. Let's look at both the weights and the bias of the first layer.","6acbc33b":"\nThe model's summary() method shows all layers of the model with the names of the layers.","2ffcb058":"Let's estimate the test data based on this model.","bd76542f":"## <span style=\"color:OrangeRed\">Data Preprocessing<\/span>\nLet's assign the names of fashion items corresponding to these numbers to a variable."}}