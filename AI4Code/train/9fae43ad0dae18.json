{"cell_type":{"d42659f4":"code","46e66a81":"code","8ed36c17":"code","d1501860":"code","9f086a36":"code","731399da":"code","b441052a":"code","c9685bf5":"code","077e0430":"code","d92c974a":"code","934264ae":"code","12de43b3":"code","cb0bff64":"code","1073b2d1":"markdown","3231aa60":"markdown","577ffdd3":"markdown","6ddd47cd":"markdown","67afb118":"markdown","9f42ef51":"markdown","656ee2a3":"markdown","72f87752":"markdown","d691470b":"markdown","4f39d481":"markdown","7ab944ec":"markdown","86adbe3e":"markdown","b66c5246":"markdown","0f35a814":"markdown"},"source":{"d42659f4":"import pandas as pd\nimport pydicom\nimport glob\nimport ast\nimport numpy as np\nimport matplotlib.pyplot as plt","46e66a81":"pydicom.read_file('..\/input\/siim-covid19-detection\/train\/00e936c58da6\/fb532194f195\/b81969467c6b.dcm')","8ed36c17":"dfs = pd.read_csv('..\/input\/siim-covid19-detection\/train_study_level.csv')\ndata, fids = [], []\n\nfor i in range(len(dfs)):\n    study = dfs.id.iloc[i].split('_')[0]\n    files = glob.glob('..\/input\/siim-covid19-detection\/train\/'+study+'\/**\/*.dcm')\n    dcm_data = pydicom.read_file(files[0]) # fetch dicom data from first file in study\n    data.append([study, \n                dfs['Negative for Pneumonia'].iloc[i], \n                dfs['Typical Appearance'].iloc[i],\n                dfs['Indeterminate Appearance'].iloc[i],\n                dfs['Atypical Appearance'].iloc[i],\n                dcm_data.get('PatientSex'),\n                dcm_data.get('PatientID'),\n                dcm_data.get('PhotometricInterpretation'),\n                dcm_data.get('ImagerPixelSpacing')[0],\n                len(files)\n                ])\n    # create list of file IDs\n    flist = []\n    for f in files:\n        flist.append(f.split('\/')[-1].split('.')[0])\n    fids.append(flist)\n    \n# assemble DataFrame\ndf = pd.DataFrame(data, columns = ['Study', 'Negative for Pneumonia', 'Typical Appearance', \n                                   'Indeterminate Appearance', 'Atypical Appearance',\n                                   'PatientSex', 'PatientID', 'ImageType', 'PixelSpacing', 'StudyFileCount'])\n# count bounding boxes per image\nbcnt, fcnt = np.zeros(len(df), dtype=int), np.zeros(len(df), dtype=int)\n\ndfi = pd.read_csv('..\/input\/siim-covid19-detection\/train_image_level.csv')\nfor i in range(len(dfi)):\n    try:\n        cnt = len(ast.literal_eval(dfi.boxes[i]))\n    except:\n        cnt = 0\n    # accumulated # of bboxes per study\n    bcnt[df[df['Study']==dfi.StudyInstanceUID.iloc[i]].index.values[0]] += cnt\n    # number of images with bboxes per study\n    if cnt > 0:\n        fcnt[df[df['Study']==dfi.StudyInstanceUID.iloc[i]].index.values[0]] += 1\n\n# add last columns to DataFrame\ndf['HasBBoxes'] = (bcnt > 0)\ndf['FilesWithBBoxes'] = fcnt\ndf['TotalBBoxCount'] = bcnt\ndf['Group'] = np.zeros(len(df), dtype=int) # This will be our stratification column later on\ndf['FileIDs'] = fids\ndf.sample(15)","d1501860":"df.hist('PixelSpacing', bins=12)\nplt.title('PixelSpacing (unique values={})'.format(len(df.PixelSpacing.unique())));","9f086a36":"df['Resolution'] = pd.qcut(df['PixelSpacing'], q=3, labels=['High', 'Med', 'Low'])\ndf.sample(5)","731399da":"df.Resolution.value_counts()","b441052a":"idx = [\"Negative for Pneumonia\", \"Typical Appearance\", \"Indeterminate Appearance\", \"Atypical Appearance\"]\ntable = pd.pivot_table(df,\n                   index=idx,\n                   values=[],\n                   aggfunc=[len], margins=True, margins_name=\"Total\")\ntable['Group'] = np.arange(0, len(table), dtype=int)\ntable","c9685bf5":"idx = [\"Negative for Pneumonia\", \"Typical Appearance\", \"Indeterminate Appearance\", \"Atypical Appearance\", \"PatientSex\"]\ntable = pd.pivot_table(df,\n                       index=idx,\n                       values=[],\n                       aggfunc=[len], margins=True, margins_name=\"Total\")\ntable['Group'] = np.arange(0, len(table), dtype=int)\ntable","077e0430":"idx = [\"Negative for Pneumonia\", \"Typical Appearance\", \"Indeterminate Appearance\", \"Atypical Appearance\", \"PatientSex\", \"ImageType\"]\ntable = pd.pivot_table(df,\n                       index=idx,\n                       values=[],\n                       aggfunc=[len], margins=True, margins_name=\"Total\")\ntable['Group'] = np.arange(0, len(table), dtype=int)\ntable","d92c974a":"idx = index=[\"Negative for Pneumonia\", \"Typical Appearance\", \"Indeterminate Appearance\", \"Atypical Appearance\", \"PatientSex\", \"ImageType\", \"Resolution\"]\ntable = pd.pivot_table(df,\n                       index=idx,\n                       values=[],\n                       aggfunc=[len], margins=True, margins_name=\"Total\")\ntable['Group'] = np.arange(0, len(table), dtype=int)\ntable","934264ae":"def set_group(org_df, pivtable, indexes):\n    # loop through each group in the pivot table\n    for g in range(len(pivtable)-1):\n        # create query string for stratify group\n        qstr = ''\n        for i in range(len(indexes)):\n            qstr += '`'+indexes[i]+'` == '\n            if str(pivtable.index.get_level_values(i)[g]).isnumeric():\n                qstr += str(pivtable.index.get_level_values(i)[g])\n            else:\n                qstr += '\\\"'+str(pivtable.index.get_level_values(i)[g])+'\\\"'\n            if i < len(idx)-1:\n                qstr += ' and '\n        # assign group name\n        df.at[df.query(qstr).index, 'Group'] = g\n    return df","12de43b3":"# Assign the group names\ndf = set_group(df, table, idx)\ndf.to_pickle('dataset.pkl')","cb0bff64":"from sklearn.model_selection import StratifiedKFold\n\n# create columns names\ncols = []\nfor i in range(len(index)):\n    for j in range(len(df[index[i]].value_counts())):\n        cols.append(df[index[i]].value_counts().name+'='+str(df[index[i]].value_counts().index[j]))\ndfs = pd.DataFrame(columns = cols)\n# split and count examples per fold\nskf = StratifiedKFold(n_splits=5)\nfor train_index, test_index in skf.split(df, df.Group):\n    vals = []\n    for i in range(len(index)):\n        for j in range(len(df.iloc[train_index][index[i]].value_counts())):\n            vals.append(df.iloc[train_index][index[i]].value_counts()[j])\n    dfn = pd.DataFrame([vals], columns=cols)\n    \n    dfs=dfs.append(dfn, ignore_index = True)\ndfs","1073b2d1":"The smallest group has 8 examples (studies). Let's stop there, with 48 unique feature combinations. The last step now is to add the group number from the pivot table to our DataFrame. There is probably a more elegant way of doing this, but below we simply loop through each row in the pivot table while updating the Group column in the dataset DataFrame.","3231aa60":"Pandas has two functions to bin data. `cut` and `qcut`. `cut` is used when we want to specifically define the bin edges (typically uniform bin sizes), while `qcut` is used when we want about the same number of elements in each bin. Here we go for the latter, and bin the 'PixelSpacing' column into three bins called 'High', 'Med' and 'Low' representing image resolution in a new column called 'Resolution'.","577ffdd3":"We observe that the dataset has only 4 classes (one-hot encoded as it is), and a total of 6054 studies. Now, let's add the patient's sex:","6ddd47cd":"# Binning of continous data\nIn the dataframe above 'PixelSpacing' is a column that needs binning. Let's look at the histogram:","67afb118":"# Inspect dicom metadata\nNot all the fields are very interesting, so we only extract the ones we think could be useful in the stratification process. In this case we want the following properties:  \n  * Patient's Sex\n  * Patient ID\n  * Photometric Interpretation. The images are either 'MONOCHROME1' or 'MONOCHROME2' format. The difference between them is explained [here](http:\/\/dicom.nema.org\/medical\/dicom\/current\/output\/chtml\/part03\/sect_C.7.6.3.html#sect_C.7.6.3.1.2). \n  * Imager Pixel Spacing. This is a numerical value, good for practicing binning.\n  \nLet's take a look at what information is found in the DICOM files:","9f42ef51":"Still plenty of examples in each bin. Add image type to the features:","656ee2a3":"# Perform stratified K-Folds Split\nOnce we have grouped the data using pivot tables, splitting the data into K-Folds is straight forward. Here we use the StratifiedKFold function from scikit-learn:","72f87752":"Notice how the number of samples per feature is evenly distributed between the 5 folds.","d691470b":"# Collect all data into DataFrame\nBelow data is collected from the .csv-files as well as the DICOM files. Some of the studies have multiple images of the same patient - clearly we do not want to have images of the same patient across several folds (data leakage), so we keep the data on study level. At the same time we want to keep track of how many bounding boxes there are within each study as a potential stratification feature.","4f39d481":"Finally add resolution to the feature list:","7ab944ec":"Check the distribution of image resolutions - looks fine:","86adbe3e":"# Using pivot tables to assess stratification features\nNow that we have all the features represented in a DataFrame, and we can use the pandas Pivot Table function to explore stratification options. Which features to stratify on depends on e.g. what type of model to be trained etc. Generally we try to have at least as many examples (studies in this case) per stratification group as there a folds, say 5 folds. The pivot table is used to group and count the number of studies according to the features we select. Then a group number is assigned to each row in the pivot table, and this group number will be our stratification column in the end.  \n\nLet's start off with just the labels:","b66c5246":"# Summary\nIn this notebook we have seen how Pandas pivot tables can be a powerful tool for creating stratified K-Folds splits on a dataset when multiple features are considered.","0f35a814":"# Stratification\n\nCross Validation: Splits the data into k \"random\" folds.  \nStratified Cross Valiadtion: Splits the data into k folds, making sure each fold is an appropriate representative of the original data. (class distribution, mean, variance, etc).  \n\nSo it is straight forward to do a statified K-split on a dataset using a single feature (class label) using e.g. sklearn.model_selection.StratifiedKFold(). But what if we want to stratify on multiple features in addition to the label itself?  \n\nThe SIIM-FISABIO-RSNA COVID-19 Detection dataset has metadata from multiple sources: The .csv-files and the metadata found in the dicom format. In this notebook we will collect data from all the sources and create stratified splits based on multiple features.\n\n"}}