{"cell_type":{"b13c4f63":"code","f411474a":"code","15daa463":"code","82910fbb":"code","bca49dc9":"code","03401da4":"code","996516b1":"code","aa06bf08":"code","cd2f5521":"code","da0c4cf9":"code","e84e1b75":"code","2db86202":"code","e9b6088c":"code","812d32f8":"code","1a52fe2b":"code","3fb8115a":"code","b0cc5910":"code","53733892":"code","278dd3c9":"code","4cba02e4":"markdown"},"source":{"b13c4f63":"import re\nimport json\nimport math\nimport pprint\nimport requests\n# import pandas_profiling\nfrom scipy.stats import zscore\nfrom collections import defaultdict\nfrom urllib.request import urlopen, Request\n\nimport numpy as np\nimport pandas as pd\n# plotting stuff\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\ncolorMap = sns.light_palette(\"blue\", as_cmap=True)\nimport datatable as dt\n# misc\nimport missingno as msno\n# system\nimport warnings\nwarnings.filterwarnings('ignore')\n# garbage collector to keep RAM in check\nimport gc  \nimport matplotlib.gridspec as gridspec\n\n\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f411474a":"# Loading data\n\nfilename = \"\/kaggle\/input\/eommercesales\/Sales_2020.csv\"\n# Making the Data Global\nglobal data\ndata = pd.read_csv(filename, sep = ',')\ndata.head(5)","15daa463":"data['Orders'] = data.reset_index().index","82910fbb":"data[['brand','item_']] = data['Item'].str.split('-',expand=True)","bca49dc9":"data.head()","03401da4":"px.histogram(data, x = 'Person', width = 800, height = 500, title = 'Frequency of Orders vs Person')","996516b1":"px.histogram(data, x = 'brand', width = 800, height = 500, title = 'Frequency of Orders vs brand')","aa06bf08":"p_table = data[['Date', 'Orders']]\np_table['Date'] = pd.to_datetime(data.Date.iloc[:])\np_table = p_table.groupby(['Date'])['Orders'].count().reset_index()\np_table.head()","cd2f5521":"fig = px.scatter(p_table, x=\"Date\", y=\"Orders\",trendline=\"ols\")\nfig.update_layout(title='Overall Orders Trend Line')\nfig.show()","da0c4cf9":"from fbprophet import Prophet\nsales_pred = Prophet(interval_width = 0.95)\n# renaming the columns, since fbpropher requires each column to be used to be renamed as ds and y\nsales = p_table.rename(columns={'Date': 'ds', 'Orders': 'y'})\n# fitting the model\nsales_pred.fit(sales)\n\n# forecasting the number of sales for the next 12 Months\nsales_forecast = sales_pred.make_future_dataframe(periods=12, freq='MS')\nsales_forecast = sales_pred.predict(sales_forecast)\n\n# visualizing the predictions\nplt.figure(figsize=(12, 6))\nsales_pred.plot(sales_forecast, xlabel = 'Date', ylabel = 'Sales')\nplt.title('Orders Sales')","e84e1b75":"fig2 = sales_pred.plot_components(sales_forecast)\n","2db86202":"!pip install dataprep","e9b6088c":"from dataprep.eda import plot, plot_correlation, create_report, plot_missing","812d32f8":"plot(data)","1a52fe2b":"create_report(data.drop(['Comment'], axis=1))","3fb8115a":"plot(data, \"Amount\")","b0cc5910":"plot(data, \"Amount\",\"Item\")","53733892":"data","278dd3c9":"## Inprogress","4cba02e4":"# **Data Description**\n\nThis is Exploratory Data Analysis of sample Dataset of E-com store. This Dataset contains information about different Products ,prices of these product, Expected Usage for Each product(Forecast) and Actual Usage of each Product(Sales) .\n\n**My aim is to get the relation between products with respect to month. So that I can apply sale on products**"}}