{"cell_type":{"748f63c9":"code","fba646eb":"code","ff4233d0":"code","aad7e362":"code","90b22be0":"code","0612bffa":"code","ff9911ae":"code","b275e34f":"code","945cb393":"code","fd8ef10a":"code","2a8326c3":"code","8251734e":"code","fe94a5b7":"code","5ff63629":"code","fb6b3d80":"code","3bd41aa9":"code","af119850":"code","18445f91":"code","0bd4662e":"code","a8a56f35":"code","6ec18266":"code","74bf570b":"code","1bde8dca":"code","cbef8dd4":"code","acedb7f7":"code","2f08db02":"code","5543b32e":"code","f3f364b5":"code","75630501":"code","981122f1":"code","5c7edf2e":"code","7779734d":"code","de2ad259":"code","df7e3f55":"code","fc306d94":"code","9c8b4c36":"code","5ed6031b":"code","a8194d12":"code","f7d48418":"code","bf4681a3":"code","93d9903e":"code","028d5e64":"code","7db3b248":"markdown","4b90fec8":"markdown","70e26c41":"markdown","e70c0861":"markdown","70a05a62":"markdown","96b368b7":"markdown","e5008ba8":"markdown","9b490a7f":"markdown","f9e48974":"markdown","5c5865a6":"markdown","7e13ca42":"markdown","7ccf8d90":"markdown","d0afe7f5":"markdown","744ff63a":"markdown","a9b71768":"markdown","1a642f25":"markdown","d7410dd2":"markdown","4a153172":"markdown","5fd78a48":"markdown"},"source":{"748f63c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fba646eb":"import matplotlib.pyplot as plt\nimport seaborn as sns","ff4233d0":"import warnings\nwarnings.filterwarnings('ignore')","aad7e362":"df=pd.read_csv('\/kaggle\/input\/toronto-subway-delay-data\/Toronto-Subway-Delay-Jan-2014-Jun-2021.csv')\ndf_code=pd.read_csv('\/kaggle\/input\/toronto-subway-delay-data\/Toronto-Subway-Delay-Codes.csv')","90b22be0":"df","0612bffa":"df.dtypes","ff9911ae":"df.isnull().sum()","b275e34f":"from datetime import datetime as dt","945cb393":"df['Date']=pd.to_datetime(df['Date'])\ndf['Time']=pd.to_datetime(df['Time'])","fd8ef10a":"df['Year']=df['Date'].dt.year\ndf['Month']=df['Date'].dt.month\ndf['Days']=df['Date'].dt.day\ndf['Hour']=df['Time'].dt.hour","2a8326c3":"df","8251734e":"df_ts=df.groupby('Date')['Code'].count()\ndf_ts.plot(figsize=(30,10))","fe94a5b7":"from keras.models import Sequential\nfrom keras.layers import Dense, Dropout, LSTM","5ff63629":"df_ts=pd.DataFrame(df_ts)\ndf_ts=df_ts.reset_index()\ndf_ts=df_ts.rename(columns={'Code': 'Num'})\ndf_ts=df_ts.drop('Date',axis=1)","fb6b3d80":"from sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler(feature_range=(0, 1))","3bd41aa9":"dataset = df_ts\n\ntrain = dataset[0:2130]\nvalid = dataset[2130:]\n\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaled_data = scaler.fit_transform(dataset)\n\nx_train, y_train = [], []\nfor i in range(60,len(train)):\n    x_train.append(scaled_data[i-60:i,0])\n    y_train.append(scaled_data[i,0])\nx_train, y_train = np.array(x_train), np.array(y_train)\n\nx_train = np.reshape(x_train, (x_train.shape[0],x_train.shape[1],1))\n\nmodel = Sequential()\nmodel.add(LSTM(units=50, return_sequences=True, input_shape=(x_train.shape[1],1)))\nmodel.add(LSTM(units=50))\nmodel.add(Dense(1))\n\nmodel.compile(loss='mean_squared_error', optimizer='adam')\nmodel.fit(x_train, y_train, epochs=1, batch_size=1, verbose=2)\n\ninputs = df_ts[len(df_ts) - len(valid) - 60:].values\ninputs = inputs.reshape(-1,1)\ninputs  = scaler.transform(inputs)\n\nX_test = []\nfor i in range(60,inputs.shape[0]):\n    X_test.append(inputs[i-60:i,0])\nX_test = np.array(X_test)\n\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1],1))\npred_close2 = model.predict(X_test)\npred_close2 = scaler.inverse_transform(pred_close2)","af119850":"rms=np.sqrt(np.mean(np.power((valid-pred_close2),2)))\nrms","18445f91":"train = df_ts[:2130]\nvalid = df_ts[2130:]\nvalid['Predictions'] = pred_close2\nplt.figure(figsize=(30,10))\nplt.plot(train['Num'])\nplt.plot(valid[['Num','Predictions']])","0bd4662e":"train = df_ts[:2130]\nvalid = df_ts[2130:]\nplt.figure(figsize=(30,10))\nvalid['Predictions'] = pred_close2\nplt.plot(valid[['Num','Predictions']])","a8a56f35":"df_ts=df.groupby('Date')['Code'].count()\ndf_ts=pd.DataFrame(df_ts)\ndf_ts=df_ts.reset_index()","6ec18266":"from fbprophet import Prophet\nimport datetime\n\ndf_ts.rename(columns={'Code': 'y', 'Date': 'ds'}, inplace=True)\n\ntrain = df_ts[:2130]\nvalid = df_ts[2130:]\n\nmodel = Prophet()\nmodel.fit(train)\n\npred = model.make_future_dataframe(periods=608, freq = 'd')\nforecast = model.predict(pred)","74bf570b":"forecast_valid = forecast['yhat'][2130:]\nrms=np.sqrt(np.mean(np.power((np.array(valid['y'])-np.array(forecast_valid)),2)))\nrms","1bde8dca":"valid['Predictions'] = 0\nvalid['Predictions'] = forecast_valid.values\n\nplt.figure(figsize=(30,10))\nplt.plot(train['y'])\nplt.plot(valid[['y', 'Predictions']])","cbef8dd4":"plt.figure(figsize=(30,10))\nplt.plot(forecast[['trend','yhat_lower','yhat_upper']])","acedb7f7":"df_100delay=df.sort_values('Min Delay', ascending=False).head(100)","2f08db02":"df_100delay","5543b32e":"plt.figure(figsize=(12, 12))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df_100delay['Code'],y=df_100delay['Station'],hue=df_100delay['Line'],size=df_100delay['Min Delay'],data=df_100delay,sizes=(50,500))\nplt.setp(ax.get_xticklabels(), rotation=90)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","f3f364b5":"plt.figure(figsize=(12, 12))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df_100delay['Days'],y=df_100delay['Hour'],hue=df_100delay['Day'],size=df_100delay['Min Delay'],data=df_100delay,sizes=(50,500))\nplt.setp(ax.get_xticklabels(), rotation=90)\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","75630501":"df.groupby('Year')['Code'].count().plot.bar(figsize=(10,10))","981122f1":"df.groupby('Month')['Code'].count().plot.bar(figsize=(10,10))","5c7edf2e":"df.groupby('Days')['Code'].count().plot.bar(figsize=(20,10))","7779734d":"df.groupby('Day')['Code'].count().plot.bar(figsize=(10,10))","de2ad259":"df.groupby('Hour')['Code'].count().plot.bar(figsize=(20,10))","df7e3f55":"df.groupby('Station')['Code'].count().sort_values(ascending=False).head(100).plot.bar(figsize=(20,10))","fc306d94":"df.groupby('Code')['Code'].count().sort_values(ascending=False).head(50).plot.bar(figsize=(20,10))","9c8b4c36":"df.groupby('Line')['Code'].count().sort_values(ascending=False).head(50).plot.bar(figsize=(10,10))","5ed6031b":"df.groupby('Vehicle')['Code'].count().sort_values(ascending=False).head(50).plot.bar(figsize=(10,10))","a8194d12":"df1=pd.DataFrame(df.groupby(['Station','Code','Line'])['Code'].count())","f7d48418":"df1=df1.rename(columns={'Code': 'num'})\ndf1=df1.reset_index()","bf4681a3":"df1=df1.sort_values('num',ascending=False).head(100)","93d9903e":"df1","028d5e64":"plt.figure(figsize=(12, 12))\nplt.legend(fontsize=10)\nplt.tick_params(labelsize=10)\nax=sns.scatterplot(x=df1['Code'],y=df1['Station'],hue=df1['Line'],size=df1['num'],data=df1,sizes=(50,500))\nax.legend(loc='upper left',bbox_to_anchor=(1,1))","7db3b248":"# 9) Vehicles which have most frequent delay","4b90fec8":"# 1. Time Seriea Analysis","70e26c41":"# 7) Top 50 Delay Cause (Code) which cause most frequent delay","e70c0861":"# 1) Top 100 Longest Delay Analysis by Stations, Lines, Cause(Code) and Min Delay ","70a05a62":"# 8) Lines which have most frequent delay","96b368b7":"# 3. High Frequency Delay Analysis","e5008ba8":"# 2) Top 100 Longest Delay Analysis by Days,Weekday and Hour","9b490a7f":"# 3) Delay Frequency by Days","f9e48974":"# 2. Top 100 longest Delay Analysis","5c5865a6":"# 5) Delay Frequency by Hour","7e13ca42":"# 3) Prediction Model by Prophet","7ccf8d90":"# 1) Delay Frequency by Year(2021 includes only 6 months)","d0afe7f5":"![image.png](attachment:c82ab7fe-0ac9-43c4-9617-6b59ea5be6a0.png)\nBy Transportfan70 (Original by Craftwerker) - File:TTC_subway_map_2015.svg, CC BY-SA 4.0, https:\/\/commons.wikimedia.org\/w\/index.php?curid=64106028","744ff63a":"# 4) Delay Frequency by Day of Week","a9b71768":"# 6) Top 100 Stations which have most frequent delay","1a642f25":"# 2) Delay Frequency by Mpnth (July to December do not include 2021)","d7410dd2":"# 10) Delay Frequency Top 100 Analysis by Cause(Code), Station and Lines","4a153172":"# 1) Time Series","5fd78a48":"# 2) Prediction Model by RNN and LSTM"}}