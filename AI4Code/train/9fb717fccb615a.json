{"cell_type":{"935ae521":"code","2d87fc2b":"code","51219c1a":"code","1987574f":"code","9c3ebcc4":"code","b383a3cb":"code","2f356f49":"code","3d9ab2ad":"code","448950dd":"code","358673a0":"code","55107df3":"code","b280f4ff":"code","bb8265ba":"code","56f63099":"code","ada599b4":"code","54393565":"code","54f9fb3c":"code","d732fdf8":"code","ebad482a":"code","20b7bb6c":"code","edf5325d":"code","7bf48cc1":"code","4c3b822b":"code","d3719cea":"code","f64ad793":"code","1341b506":"code","db77b7d4":"code","6d811966":"code","df5a340e":"code","9b9f93b5":"code","968ef0a1":"code","f8cc4598":"code","8d42b2bf":"code","f55e829b":"code","0ddad926":"code","68df00be":"code","fe8fee7c":"code","19574791":"code","7df4b7d3":"code","bf004b6f":"code","e617107f":"code","06ba1891":"code","c482840b":"code","202d3aed":"code","1cc1ce05":"code","c7ee4254":"code","fb2c426c":"code","55b0d949":"code","d0edcfba":"code","b0cee9c9":"code","68e548d9":"code","6ec7fc4f":"code","516317b4":"code","169f2a9c":"code","8e13f420":"code","b8a09290":"code","9be5e713":"code","8abe7a80":"code","ae2b9faa":"code","76da4f44":"code","8cde4823":"code","90609478":"code","0617c613":"code","518ac238":"code","08a7cff5":"code","382ff704":"code","b6600670":"code","f852ad50":"code","829f75a5":"code","30622451":"code","fa026f27":"code","7dacba3d":"code","de620587":"code","4493d564":"code","42df2c01":"code","e56640e8":"code","1f21d5dc":"code","c6fab271":"code","2abd87a3":"code","40f8125c":"code","cdc894ce":"code","1edf9795":"code","e05f2894":"code","d35f5314":"code","06e351c8":"code","b26f5bb5":"code","0c820a68":"code","fa79cdb4":"code","52784c5a":"code","1473af55":"code","d6c32db8":"code","0ad9bd89":"code","4fadeb37":"code","dd6b6d74":"code","580f2a73":"code","f301b970":"code","8f77ca34":"code","a2b06d87":"code","683b3cea":"markdown","efc8f1c2":"markdown","82a7030a":"markdown","41257b46":"markdown","c6717ef4":"markdown","ee077533":"markdown","e655f43e":"markdown","d17f634f":"markdown","c6c96d50":"markdown","918bc7e7":"markdown","2a61b5de":"markdown","453f2912":"markdown","9f97f228":"markdown","a64dac46":"markdown","8be59739":"markdown","0ed32f82":"markdown","4207ede6":"markdown","892a186c":"markdown","f7516304":"markdown"},"source":{"935ae521":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2d87fc2b":"!pip install pycaret","51219c1a":"from pycaret.regression import *\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport sys\nimport warnings\nimport catboost as cb\nwarnings.filterwarnings(\"ignore\")\nsns.set()\nnp.set_printoptions(threshold=sys.maxsize)","1987574f":"#Training Dataset\npd.set_option(\"max_columns\",None)\ntrain_data=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/train.csv\")\ntrain_data.head()","9c3ebcc4":"#Testing Dataset\npd.set_option(\"max_columns\",None)\ntest_data=pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/test.csv\")\ntest_data.head()","b383a3cb":"#description of the data\ndescription_data=open(\"..\/input\/house-prices-advanced-regression-techniques\/data_description.txt\",'r')\nprint(description_data.read())","2f356f49":"#Analyse the the Columns\ntrain_data.columns   ","3d9ab2ad":"corr_mat=train_data.corr() \ncmap = sns.diverging_palette(230, 20, as_cmap=True) #custom diverging colormap\nf,ax =plt.subplots(figsize=(12,12)) #figSize\nsns.heatmap(corr_mat,cmap=cmap,cbar=True, xticklabels=corr_mat.columns,yticklabels=corr_mat.columns,square=True,vmax=1)","448950dd":"k = 10 #number of variables for heatmap\ncols = corr_mat.nlargest(k, 'SalePrice')['SalePrice'].index\ncorrm = np.corrcoef(train_data[cols].values.T)\nf1,ax1 =plt.subplots(figsize=(8,8))\nsns.set(font_scale=1.25)\nhm = sns.heatmap(corrm, cmap=cmap,cbar=True, annot=True, square=True, \n                 fmt='.2f', annot_kws={'size': 12}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()","358673a0":"train_data['SalePrice'].describe()","55107df3":"#plot the distribution plot\nsns.distplot(train_data['SalePrice'])\nplt.title('Distribution plot of SalePrice') \nplt.xlabel('SalePrice') # add x-label\nplt.show()","b280f4ff":"#skewness and Kurtosis\nprint('Skewness: ', train_data['SalePrice'].skew())\nprint('Kurtosis: ',train_data['SalePrice'].kurt())","bb8265ba":"#GrLivArea\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(data=train_data,x='GrLivArea',y='SalePrice')","56f63099":"#TotalBsmtSF\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(data=train_data,x='TotalBsmtSF',y='SalePrice')","ada599b4":"#OverallQual\nf, ax = plt.subplots(figsize=(8, 6))\nsns.lineplot(data=train_data,x='OverallQual',y='SalePrice')","54393565":"#YearBuilt\nf, ax = plt.subplots(figsize=(18, 6))\nsns.lineplot(data=train_data,x='YearBuilt',y='SalePrice')","54f9fb3c":"#GarageCars\nf, ax = plt.subplots(figsize=(14, 6))\nsns.boxplot(data=train_data,x='GarageCars',y='SalePrice')","d732fdf8":"#GarageArea\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(data=train_data,x='GarageArea',y='SalePrice')","ebad482a":"#1stFlrSF\nf, ax = plt.subplots(figsize=(8, 6))\nsns.scatterplot(data=train_data,x='1stFlrSF',y='SalePrice')","20b7bb6c":"#Fullbath\nf, ax = plt.subplots(figsize=(12, 6))\nsns.boxplot(data=train_data,x='FullBath',y='SalePrice')","edf5325d":"#TotRmsAbvGrd\nf, ax = plt.subplots(figsize=(8, 6))\nsns.boxplot(data=train_data,x='TotRmsAbvGrd',y='SalePrice')","7bf48cc1":"#For Train Data Set \ntotal = train_data.isnull().sum().sort_values(ascending=False)\npercent=(train_data.isnull().sum()\/len(train_data)*100).sort_values(ascending=False)\nmiss_data=pd.concat([total,percent],axis=1,keys=['Total_Null','Percent'])\nmiss_data.head(25)","4c3b822b":"train_data.shape","d3719cea":"#Dropping Missing Data where percentage > 2 as well those belong to Type 1,Type 2,Type 3\ntrain=train_data.drop((miss_data[miss_data['Percent']>2]).index,1)","f64ad793":"train.shape","1341b506":"#These Belong to Type1 and Type2\ntrain.drop('MasVnrArea',axis=1,inplace=True)\ntrain.drop('MasVnrType',axis=1,inplace=True)","db77b7d4":"train.shape","6d811966":"# Since only one Value is missing as for now lets delete that row only \ntrain=train.drop(train[train['Electrical'].isnull()].index)","df5a340e":"train.shape","9b9f93b5":"# Check for any missing Values\nif train.isnull().sum().max()>0:\n    print(\"Missing Values\")\nelse:\n    print('No Missing Values')","968ef0a1":"train.shape","f8cc4598":"numcols= [col for col in train.columns \n          if train[col].dtype in ['int64','float64']]\ncatcols= [col for col in train.columns \n          if train[col].dtype in ['object']]\n","8d42b2bf":"print(numcols)","f55e829b":"print(catcols)","0ddad926":"train.drop(catcols,axis=1,inplace=True) # Since all the catcols belong to either of Type1,Type2,Type3\ntrain.shape","68df00be":"train.head()","fe8fee7c":"var=['Id', 'MSSubClass', 'LotArea', 'OverallCond', 'YearRemodAdd', 'BsmtFinSF1', 'BsmtFinSF2', 'GarageArea','BsmtUnfSF', '2ndFlrSF', 'LowQualFinSF', 'BsmtFullBath', 'BsmtHalfBath', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'Fireplaces', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold']\ntrain.drop(var,axis=1,inplace=True)","19574791":"train.head()","7df4b7d3":"train.shape","bf004b6f":"#for Test data set ","e617107f":"#For Train Data Set \ntotal = test_data.isnull().sum().sort_values(ascending=False)\npercent=(test_data.isnull().sum()\/len(test_data)*100).sort_values(ascending=False)\nmiss_test_data=pd.concat([total,percent],axis=1,keys=['Total_Null','Percent'])\nmiss_test_data.head(40)","06ba1891":"test=test_data.drop((miss_test_data[miss_test_data['Total_Null']>1]).index,1)\ntest.shape\n","c482840b":"test.columns","202d3aed":"vari=['Id', 'MSSubClass', 'LotArea', 'Street', 'LotShape', 'LandContour',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'OverallCond',\n       'YearRemodAdd', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd',\n       'ExterQual', 'ExterCond', 'Foundation', 'BsmtFinSF1', 'BsmtFinSF2',\n       'BsmtUnfSF', 'Heating', 'HeatingQC', 'CentralAir',\n       'Electrical', '2ndFlrSF', 'LowQualFinSF', 'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual', 'Fireplaces', 'PavedDrive',\n       'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch',\n       'ScreenPorch', 'PoolArea', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition']\ntest.drop(vari,axis=1,inplace=True)","1cc1ce05":"test.shape","c7ee4254":"test.drop('GarageArea',axis=1,inplace=True) # Since it belongs to Type 3","fb2c426c":"test.head()","55b0d949":"test['GarageCars'].fillna(value = test['GarageCars'].median(),inplace = True)\ntest['TotalBsmtSF'].fillna(value = test['TotalBsmtSF'].median(),inplace = True)\n\n","d0edcfba":"test.head()","b0cee9c9":"test.shape","68e548d9":"# Check any missing Values\nif test.isnull().sum().max()>0:\n    print(\"Missing Values\")\nelse:\n    print('No Missing Values')","6ec7fc4f":"sns.boxplot(train['OverallQual'])","516317b4":"train.drop(train[train['OverallQual'] < 2].index, axis = 0, inplace = True)","169f2a9c":"train.shape","8e13f420":"#Here we are modifying the YearBuilt to YearOld  \ntrain['YearOld']=2020-train['YearBuilt']\ntrain.drop('YearBuilt',axis=1,inplace=True)\ntrain.head()","b8a09290":"test['YearOld']=2020-test['YearBuilt']\ntest.drop('YearBuilt',axis=1,inplace=True)\ntest.head()","9be5e713":"sns.boxplot(train['TotalBsmtSF'])","8abe7a80":"train.drop(train[train['TotalBsmtSF'] > 3500].index, axis = 0, inplace = True)\ntrain.shape","ae2b9faa":"sns.boxplot(train['1stFlrSF'])","76da4f44":"train.drop(train[train['1stFlrSF'] > 2500].index, axis = 0, inplace = True)\ntrain.shape","8cde4823":"sns.boxplot(train['GrLivArea'])","90609478":"train.drop(train[train['GrLivArea'] > 4000].index, axis = 0, inplace = True)\ntrain.shape","0617c613":"sns.boxplot(train['FullBath'])\n#No outlier","518ac238":"sns.boxplot(train['TotRmsAbvGrd'])","08a7cff5":"train.drop(train[train['TotRmsAbvGrd'] > 11].index, axis = 0, inplace = True)\ntrain.shape","382ff704":"train.head()","b6600670":"sns.boxplot(train['GarageCars'])","f852ad50":"train.drop(train[train['GarageCars'] > 3.5].index, axis = 0, inplace = True)\ntrain.shape","829f75a5":"sns.boxplot(train['YearOld'])","30622451":"train.drop(train[train['YearOld'] > 145].index, axis = 0, inplace = True)\ntrain.shape","fa026f27":"#Now no Outliers are present","7dacba3d":"train=train.reindex(columns=['OverallQual', 'TotalBsmtSF', '1stFlrSF', 'GrLivArea', 'FullBath',\n       'TotRmsAbvGrd', 'GarageCars', 'YearOld','SalePrice'])\n#train.head()\ntrain.shape","de620587":"train.head()","4493d564":"test.head()","42df2c01":"xtrain=train.drop('SalePrice',axis=1)\nxtrain.head()","e56640e8":"ytrain=train['SalePrice']","1f21d5dc":"xtest=test","c6fab271":"ytrain","2abd87a3":"from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()","40f8125c":"xtrain[:] = scaler.fit_transform(xtrain[:])","cdc894ce":"xtest[:] = scaler.fit_transform(xtest[:])","1edf9795":"xtrain.head()","e05f2894":"xtest.head()","d35f5314":"## comparing all models\nexperiment = setup(train,target=\"SalePrice\",normalize= True,use_gpu = True)","06e351c8":"compare_models()","b26f5bb5":"from sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import RFE\n# Running RFE with the output number of the variable equal to 35\nlm = LinearRegression()\nlm.fit(xtrain, ytrain)\n\nrfe = RFE(lm, 15)             # running RFE\nrfe = rfe.fit(xtrain, ytrain)","0c820a68":"list(zip(xtrain.columns,rfe.support_,rfe.ranking_))","fa79cdb4":"#RFE has taken it all ","52784c5a":"# Columns selected by RFE\ncols = xtrain.columns[rfe.support_]\ncols","1473af55":"from sklearn.ensemble import RandomForestRegressor\nrfreg = RandomForestRegressor(n_estimators=500,max_leaf_nodes=16,n_jobs=-1)","d6c32db8":"rfreg.fit(xtrain[cols],ytrain)\n","0ad9bd89":"yhat=rfreg.predict(xtest[cols])","4fadeb37":"train_dataset = cb.Pool(xtrain, ytrain)\ntest_dataset = cb.Pool(xtest)","dd6b6d74":"model = cb.CatBoostRegressor(loss_function='RMSE')","580f2a73":"grid = {'iterations': [100, 150, 200],\n        'learning_rate': [0.03, 0.1],\n        'depth': [2, 4, 6, 8],\n        'l2_leaf_reg': [0.2, 0.5, 1, 3]}\nmodel.grid_search(grid, train_dataset)","f301b970":"pred = model.predict(xtest)","8f77ca34":"finaloutput = pd.DataFrame({'Id': test_data.Id,'SalePrice':pred})\nfinaloutput.head(15)","a2b06d87":"finaloutput.to_csv('submission.csv',index = False)","683b3cea":"**Import the training and testing datasets**","efc8f1c2":"In this notebook, we will explore factors that impacted Saleprice of Ames houses. The goal is to make sense of provided Ames Housing dataset and turn these insights to predict the House Prices using Advanced regression techniques like random forest and gradient boosting.\nWhat I have done in this notebook is:\n1. Understanding the problem \n2. Study of the Independent and Dependent variable\n3. Data Cleaning \n4. Creating the Regression Model\n5. Prediction","82a7030a":"# 7: Scaling the data","41257b46":"## 4. Studying the relationship between the dependent and independent variable as per the heatmap","c6717ef4":"'SalePrice' is the independent variable. \n'OverallQual', 'GrLivArea', 'GarageCars','TotalBsmtSF', 'YearBuilt','GarageArea','1stFlrSF','FullBath','TotRmsAbvGrd'\nare the Dependent variables. Here, we are plotting the Scatter,box,line plots to get clear understanding of the variation of the independent variables with respect  to the SalePrice. ","ee077533":"From the heatmap above we can see that ***Overallqual, Glivarea , garagecars , garagearea, totalbsmntsf,1stFirSf***,  correlates the most with the ***SalePrice***. We can also see that ***yearbuilt, FullBath*** can also be considered as the potential independent variable for obtaining predictions. To get the clear picture about these independent variable, let's zoom in the heatmap and add the annotations. We are trying to get the top 10 variables who strongly corelates with the 'SalePrice'.  ","e655f43e":"# 9. Model","d17f634f":"### Now, lets remove all the numerical variables as per the Types: Type1,Type2,Type3","c6c96d50":"# 5. Data Cleaning - Handling Missing Data","918bc7e7":"Since Kurtosis is greater than 3 its Leptokurtic in nature which means outliers are present. ","2a61b5de":"From the above heatmap(zoomed style), OverallQual, Glivarea , garagecars , garagearea, totalbsmntsf, 1stFlrSF,'FullBath', TotRmsAbvGrd,Yearbuilt are strong correlations with SalePrice.  ","453f2912":"# 3.Study of the dependent variable-SalePrice ","9f97f228":"## 5. Removing all unwanted Variables as per **Type1,Type2,Type3** ","a64dac46":"# 2. PLOT THE CORRELATION MATRIX OF HEAT MAP STYLE ","8be59739":"# 6. Outliers","0ed32f82":"# 1. Importing data and Libraries","4207ede6":"We have to predict the Saleprice of the house and hence it is highly recommended to study the main focus of the notebook.","892a186c":"#### To find out which independent variables correlates with the salesprice(dependent variable)","f7516304":"Here comes the most important and time consuming step Data Cleaning. Missing Data is like the cavity in the data and its presence could be harmful while training the model. Hence we are removing the entire variable as per the following types,\n* Type 1: Variables which are not generally considered while buying the house.\n* Type 2: Variables that are not good enough to influence the SalePrice(as per HeatMap Analysis)\n* Type 3: Variables whose data is already described in any other Variable \n"}}