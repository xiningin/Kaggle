{"cell_type":{"6c7f7937":"code","3969745e":"code","366b8e95":"code","1fbb3131":"code","a1418efc":"code","cc75ea98":"code","e1779c98":"code","dc623d81":"code","74818a25":"code","bde99a17":"code","2f996e1e":"code","ab0a1b56":"code","f363cc0a":"code","82d66983":"code","03fc9486":"code","4bfaf256":"markdown","11def5d0":"markdown","b1ea541b":"markdown","f99efc34":"markdown","11c923f5":"markdown","c6296259":"markdown","e20c61b8":"markdown","68e51a8b":"markdown","761fb7bf":"markdown","3d7792de":"markdown","eb8bffe8":"markdown","f3168b98":"markdown","13a2a344":"markdown","67811bbe":"markdown","077e1908":"markdown","45e7b90a":"markdown","3e215083":"markdown","b87364a9":"markdown","ba479024":"markdown","436061c5":"markdown","90db3a39":"markdown","42d08038":"markdown","382d775d":"markdown"},"source":{"6c7f7937":"# Import Required packages \n#-------------------------\n\n# Import the Logistic Regression Module from Scikit Learn\nfrom sklearn.linear_model import LogisticRegression  \n\n# Import the IRIS Dataset to be used in this Kernel\nfrom sklearn.datasets import load_iris  \n\n# Load the Module to split the Dataset into Train & Test \nfrom sklearn.model_selection import train_test_split\n","3969745e":"# Load the data\nIris_data = load_iris()  \n","366b8e95":"# Split data\nXtrain, Xtest, Ytrain, Ytest = train_test_split(Iris_data.data, \n                                                Iris_data.target, \n                                                test_size=0.3, \n                                                random_state=4)  ","1fbb3131":"# Define the Model\nLR_Model = LogisticRegression(C=0.1,  \n                               max_iter=20, \n                               fit_intercept=True, \n                               n_jobs=3, \n                               solver='liblinear')\n\n# Train the Model\nLR_Model.fit(Xtrain, Ytrain)  ","a1418efc":"# Import pickle Package\n\nimport pickle\n","cc75ea98":"# Save the Modle to file in the current working directory\n\nPkl_Filename = \"Pickle_RL_Model.pkl\"  \n\nwith open(Pkl_Filename, 'wb') as file:  \n    pickle.dump(LR_Model, file)\n","e1779c98":"# Load the Model back from file\nwith open(Pkl_Filename, 'rb') as file:  \n    Pickled_LR_Model = pickle.load(file)\n\nPickled_LR_Model","dc623d81":"# Use the Reloaded Model to \n# Calculate the accuracy score and predict target values\n\n# Calculate the Score \nscore = Pickled_LR_Model.score(Xtest, Ytest)  \n# Print the Score\nprint(\"Test score: {0:.2f} %\".format(100 * score))  \n\n# Predict the Labels using the reloaded Model\nYpredict = Pickled_LR_Model.predict(Xtest)  \n\nYpredict","74818a25":"# Import Joblib Module from Scikit Learn\n\nfrom sklearn.externals import joblib\n","bde99a17":"# Save RL_Model to file in the current working directory\n\njoblib_file = \"joblib_RL_Model.pkl\"  \njoblib.dump(LR_Model, joblib_file)\n","2f996e1e":"# Load from file\n\njoblib_LR_model = joblib.load(joblib_file)\n\n\njoblib_LR_model","ab0a1b56":"# Use the Reloaded Joblib Model to \n# Calculate the accuracy score and predict target values\n\n# Calculate the Score \nscore = joblib_LR_model.score(Xtest, Ytest)  \n# Print the Score\nprint(\"Test score: {0:.2f} %\".format(100 * score))  \n\n# Predict the Labels using the reloaded Model\nYpredict = joblib_LR_model.predict(Xtest)  \n\nYpredict","f363cc0a":"# Import required packages\n\nimport json  \nimport numpy as np\n","82d66983":"class MyLogReg(LogisticRegression):\n\n    # Override the class constructor\n    def __init__(self, C=1.0, solver='liblinear', max_iter=100, X_train=None, Y_train=None):\n        LogisticRegression.__init__(self, C=C, solver=solver, max_iter=max_iter)\n        self.X_train = X_train\n        self.Y_train = Y_train\n\n    # A method for saving object data to JSON file\n    def save_json(self, filepath):\n        dict_ = {}\n        dict_['C'] = self.C\n        dict_['max_iter'] = self.max_iter\n        dict_['solver'] = self.solver\n        dict_['X_train'] = self.X_train.tolist() if self.X_train is not None else 'None'\n        dict_['Y_train'] = self.Y_train.tolist() if self.Y_train is not None else 'None'\n\n        # Creat json and save to file\n        json_txt = json.dumps(dict_, indent=4)\n        with open(filepath, 'w') as file:\n            file.write(json_txt)\n\n    # A method for loading data from JSON file\n    def load_json(self, filepath):\n        with open(filepath, 'r') as file:\n            dict_ = json.load(file)\n\n        self.C = dict_['C']\n        self.max_iter = dict_['max_iter']\n        self.solver = dict_['solver']\n        self.X_train = np.asarray(dict_['X_train']) if dict_['X_train'] != 'None' else None\n        self.Y_train = np.asarray(dict_['Y_train']) if dict_['Y_train'] != 'None' else None","03fc9486":"filepath = \"mylogreg.json\"\n\n# Create a model and train it\nmylogreg = MyLogReg(X_train=Xtrain, Y_train=Ytrain)  \nmylogreg.save_json(filepath)\n\n# Create a new object and load its data from JSON file\njson_mylogreg = MyLogReg()  \njson_mylogreg.load_json(filepath)  \njson_mylogreg  ","4bfaf256":"**Step - 1 ** : Import Packages","11def5d0":"Reload the saved Model using Joblib","b1ea541b":"Now , that Model has been Created and Trained , we might want to save the trained Model for future use.\n","f99efc34":"# Python : How to Save and Load ML Models\n\n\nPriyaranjan Mohanty","11c923f5":"**WHAT**\nOn various instances, while working on developing a Machine Learning Model, we'll need to save our prediction models to file, and then restore them in order to reuse our previous work to.\n\n\n**WHY**\nWe need to save and restore\/reload later our ML Model , so as to -\n\na) test our model on\/with new data, \n\nb) compare multiple models, \n\nc) or anything else. \n\n**object serialization**\nThis process \/ procedure of saving a ML Model is also known as object serialization - representing an object with a stream of bytes, in order to store it on disk, send it over a network or save to a database.\n\n**deserialization**\nWhile the restoring\/reloading of ML Model procedure is known as deserialization. \n\nIn this Kernel, we will explore 3 ways to Save and Reload ML Models in Python and scikit-learn, we will also discuss about the pros and cons of each method. ","c6296259":"Now , lets build the Logistic Regression Model on the IRIS Data\n\nNote : The Model creation in this Kernel is for demonstartion only and does not cover the details of Model Creation.","e20c61b8":"**Let's Reflect back on Pickle approach :**\n\nPROs of Pickle :\n\n1) save and restore our learning models is quick - we can do it in two lines of code. \n\n2) It is useful if you have optimized the model's parameters on the training data, so you don't need to repeat this step again. \n\n\nCONs of Pickle :\n\n1) it doesn't save the test results or any data. \n","68e51a8b":"**Approach 1 : Pickle approach**\n\nFollowing lines of code, the LR_Model which we created in the previous step is saved to file, and then loaded as a new object called Pickled_RL_Model. \n\nThe loaded model is then used to calculate the accuracy score and predict outcomes on new unseen (test) data.","761fb7bf":"**Let's Reflect back on Joblib approach :**\n\nPROs of Joblib :\n\n1) the Joblib library offers a bit simpler workflow compared to Pickle. \n\n2) While Pickle requires a file object to be passed as an argument, Joblib works with both file objects and string filenames. \n\n3) In case our model contains large arrays of data, each array will be stored in a separate file, but the save and restore procedure will remain the same. \n\n4) Joblib also allows different compression methods, such as 'zlib', 'gzip', 'bz2', and different levels of compression.\n","3d7792de":"**Approach 2 - Joblib** :\n\nThe Joblib Module is available from Scikit Learn package and is intended to be a replacement for Pickle, for objects containing large data. \n\nThis approach will save our ML Model in the pickle format only but we dont need to load additional libraries as the 'Pickling' facility is available within Scikit Learn package itself which we will use invariably for developing our ML models.\n\nIn following Python scripts , we will show how to Saev and reload ML Models using Joblib","eb8bffe8":"Now , lets develop a ML Model which we shall use to Save and Reload in this Kernel","f3168b98":"Next we create an object mylogreg, pass the training data to it, and save it to file. \n\nThen we create a new object json_mylogreg and call the load_json method to load the data from file.","13a2a344":"**Let's reflect back on the JSON approach**\n\nPROs :\n\nSince the data serialization using JSON actually saves the object into a string format, rather than byte stream, the 'mylogreg.json' file could be opened and modified with a text editor.\n\n\nCONs :\n\nAlthough this approach would be convenient for the developer, it is less secure since an intruder can view and amend the content of the JSON file. \n\nMoreover, this approach is more suitable for objects with small number of instance variables, such as the scikit-learn models, because any addition of new variables requires changes in the save and restore methods.","67811bbe":"Since we want to save all of this data in a single object, one possible way to do it is to create a new class which inherits from the model class, which in our example is LogisticRegression. The new class, called MyLogReg, then implements the methods save_json and load_json for saving and restoring to\/from a JSON file, respectively.","077e1908":"**Step - 3 **: Split the IRIS Data into Training & Testing Data","45e7b90a":"Save the Model using Joblib","3e215083":"Reload the Saved Model using Joblib ","b87364a9":"**Approach 3 - Manual Save and Restore to JSON ** :\n\nwhenever we want to have full control over the save and restore process, the best way is to build our own functions manually.\n\nThe Script following shows an example of manually saving and restoring objects using JSON. This approach allows us to select the data which needs to be saved, such as the model parameters, coefficients, training data, and anything else we need.\n\nFor simplicity, we'll save only three model parameters and the training data. Some additional data we could store with this approach is, for example, a cross-validation score on the training set, test data, accuracy score on the test data, etc.","ba479024":"**ML Model Creation**\n\nFor the purpose of Demo , we will create a basic Logistic Regression Model on IRIS Dataset.\n\nDataset used : IRIS \n\nModel        : Logistic Regression using Scikit Learn","436061c5":"We will be covering following 3 approaches of Saving and Reloading a ML Model -\n\n1) Pickle Approach\n\n2) Joblib Approach\n\n3) Manual Save and Restore to JSON approach","90db3a39":"Import the required Library for using Joblib","42d08038":"Import the required libraries","382d775d":"**Step - 2 **: Load the IRIS Data"}}