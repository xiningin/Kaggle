{"cell_type":{"c6872616":"code","c59ae3b2":"code","b4a29345":"code","5513219a":"code","6a5deb7e":"code","0c04cd41":"code","dc99b899":"code","2f04d13d":"code","b66ead55":"code","04426b87":"code","bbb22cc0":"code","f97ced00":"code","f09047b8":"code","941f0b27":"code","4668835c":"code","92042144":"code","fa574e6e":"code","5d80f181":"code","b9cd2673":"code","ecdb55ab":"code","dfcb182b":"code","9a336654":"code","f47c0266":"code","57ba9963":"code","5823d83d":"code","b0eb5390":"code","0dace10b":"code","9b58bb51":"code","1358b328":"code","f985a048":"code","ba1d556a":"code","372d7509":"code","f0240447":"code","14529f9b":"code","06e6d705":"code","e2263390":"markdown","533ac4f9":"markdown","869bd848":"markdown","14df6f8a":"markdown","27cf8a04":"markdown","449a2184":"markdown","b2bfbc8a":"markdown","f7d9ae02":"markdown","3a25bebb":"markdown","dc34adb7":"markdown","9e675d73":"markdown"},"source":{"c6872616":"# Importing Libraries:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c59ae3b2":"# Loading Train dataset:\ntrain_data = pd.read_csv('..\/input\/medical-insurance-dataset\/Train_Data.csv')\n# Top 5 records:\ntrain_data.head()","b4a29345":"# Shape of dataset:\ntrain_data.shape","5513219a":"# Cheacking for NaN Values (Missing Values):\ntrain_data.isnull().sum()","6a5deb7e":"# Insights of dataset:\ntrain_data.info()","0c04cd41":"# Description of dataset (Numerical):\ntrain_data.describe()","dc99b899":"# Description of dataset (Categorical):\ntrain_data.describe(include=['O'])","2f04d13d":"# Histrogram of Medical Insurance Charges:\nplt.figure(figsize=(8,5))\nsns.histplot(train_data['charges'], kde=True)\nplt.title('Medical Insurance Charges', fontsize=20)\nplt.show()","b66ead55":"# Boxplot of Medical Insurance Charges:\nplt.figure(figsize=(8,5))\nsns.boxplot(train_data['charges'])\nplt.title('Medical Insurance Charges (Boxplot)', fontsize=20)\nplt.show()","04426b87":"# Histrogram of Age:\nplt.figure(figsize=(8,5))\nsns.histplot(train_data['age'], kde=True)\nplt.title('Age', fontsize=20)\nplt.show()","bbb22cc0":"# Boxplot of Age:\nplt.figure(figsize=(8,5))\nsns.boxplot(train_data['age'])\nplt.title('Age (boxplot)', fontsize=20)\nplt.show()","f97ced00":"# Histrogram of Body Mass Index:\nplt.figure(figsize=(8,5))\nsns.histplot(train_data['bmi'], kde=True)\nplt.title('Body Mass Index', fontsize=20)\nplt.show()","f09047b8":"# Boxplot of Body Mass Index:\nplt.figure(figsize=(8,5))\nsns.boxplot(train_data['bmi'])\nplt.title('Body Mass Index (Boxplot)', fontsize=20)\nplt.show()","941f0b27":"# Histrogram of children:\nplt.figure(figsize=(8,5))\nsns.histplot(train_data['children'], kde=True)\nplt.title('childrens', fontsize=20)\nplt.show()","4668835c":"# Boxplot of children:\nplt.figure(figsize=(8,4))\nsns.boxplot(train_data['children'])\nplt.title('childrens (Boxplot)', fontsize=20)\nplt.show()","92042144":"# Value Counts:\nprint(\"Male   :\", train_data['sex'].value_counts()[0])\nprint(\"Female :\", train_data['sex'].value_counts()[1])\n\n# Visualization:\nplt.figure(figsize=(6,4))\nsns.countplot(train_data['sex'])\nplt.title('Sex', fontsize=20)\nplt.show()","fa574e6e":"# Value Counts:\nprint(\"Smokers     :\", train_data['smoker'].value_counts()[1])\nprint(\"Non-Smokers :\", train_data['smoker'].value_counts()[0])\n\n# Visualization:\nsns.countplot(train_data['smoker'])\nsns.countplot(train_data['smoker'])\nplt.title('Smokers', fontsize=20)\nplt.show()","5d80f181":"# Value Counts:\nprint(\"South-East region :\", train_data['region'].value_counts()[0])\nprint(\"North-West region :\", train_data['region'].value_counts()[1])\nprint(\"South-West region :\", train_data['region'].value_counts()[2])\nprint(\"North-East region :\", train_data['region'].value_counts()[3])\n\n# Visualization:\nsns.countplot(train_data['region'])\nsns.countplot(train_data['region'])\nplt.title('Regions', fontsize=20)\nplt.show()","b9cd2673":"# top 5 records:\ntrain_data.head()","ecdb55ab":"# Rounding up & down Age:\ntrain_data['age'] = round(train_data['age'])","dfcb182b":"# top 5 records, after rounding up & down Age:\ntrain_data.head()","9a336654":"# Encoding:\ntrain_data = pd.get_dummies(train_data, drop_first=True)","f47c0266":"# top 2 records, after encoding:\ntrain_data.head(2)","57ba9963":"# Columns of dataset:\ntrain_data.columns","5823d83d":"# Rearranging columns to see better: \ntrain_data = train_data[['age','sex_male','smoker_yes','bmi','children','region_northwest','region_southeast','region_southwest','charges']]\ntrain_data.head(2)","b0eb5390":"# Splitting Independent & Dependent Feature:\nX = train_data.iloc[:, :-1]\ny = train_data.iloc[:, -1]","0dace10b":"# top 2 records of Independent feature:\nX.head(2)","9b58bb51":"# top 2 records of Dependent Feature:\ny.head(2)","1358b328":"# Train Test Split:\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2, random_state=0)","f985a048":"# Importing Performance Metrics:\nfrom sklearn.metrics import mean_squared_error, r2_score","ba1d556a":"# Linear Regression:\nfrom sklearn.linear_model import LinearRegression\nLinearRegression = LinearRegression()\nLinearRegression = LinearRegression.fit(X_train, y_train)\n\n# Prediction:\ny_pred = LinearRegression.predict(X_test)\n\n# Scores:\nprint(r2_score(y_test, y_pred))\nprint(mean_squared_error(y_test, y_pred))","372d7509":"# Ridge:\nfrom sklearn.linear_model import Ridge\nRidge = Ridge()\nRidge = Ridge.fit(X_train, y_train)\n\n# Prediction:\ny_pred = Ridge.predict(X_test)\n\n# Scores:\nprint(r2_score(y_test, y_pred))\nprint(mean_squared_error(y_test, y_pred))","f0240447":"# Lasso:\nfrom sklearn.linear_model import Lasso\nLasso = Lasso()\nLasso = Lasso.fit(X_train, y_train)\n\n# Prediction:\ny_pred = Lasso.predict(X_test)\n\n# Scores:\nprint(r2_score(y_test, y_pred))\nprint(mean_squared_error(y_test, y_pred))","14529f9b":"# Random Forest Regressor:\nfrom sklearn.ensemble import RandomForestRegressor\nRandomForestRegressor = RandomForestRegressor()\nRandomForestRegressor = RandomForestRegressor.fit(X_train, y_train)\n\n# Prediction:\ny_pred = RandomForestRegressor.predict(X_test)\n\n# Scores:\nprint(r2_score(y_test, y_pred))\nprint(mean_squared_error(y_test, y_pred))","06e6d705":"# Creating a pickle file for the classifier\nimport pickle\nfilename = 'MedicalInsuranceCost.pkl'\npickle.dump(RandomForestRegressor, open(filename, 'wb'))","e2263390":"<a id=\"6\"><\/a>\n# <p style=\"background-color:#615154;font-family:newtimeroman;color:#CABFC1;font-size:250%;text-align:center;border-radius:40px 40px;\">Medical Insurance Cost Predictor<\/p>","533ac4f9":"#### Sex:","869bd848":" \n<p style=\"background-color:#CABFC1;font-family:newtimeroman;font-size:200%;text-align:left;\"> \ud83d\udcccThis notebook is beginner friendly and contains an end to end deployed project.<br>\n     \ud83d\udcccCreating a notebook is one thing and deploying the notebook to make it useful in real life is another.\n<\/p>\n\n\ud83d\udccc  https:\/\/medical-ins-cost-predict.herokuapp.com\/\n\n\n\ud83d\udccc https:\/\/github.com\/raj-gupta1\/medical-insurance-cost-predictor\n\n\n\ud83d\udccc **Algorithms used:**  \n    1.Linear Regression<br>\n    2. Ridge<br>\n    3. Lasso<br>\n    4. Polynomial Regression<br>\n    5. Random Forest regressor\n    \n    \n\ud83d\udccc**Tools used:-** \n* Flask\n* Google Colab\n* Pycharm\n* Heroku\n* Github\n\n\n\ud83d\udccc**Libraries used:-** \n* Numpy\n* pandas\n* Matplotlib\n* flask\n* scikit-learn\n\n","14df6f8a":"#### Region:","27cf8a04":"#### Smokers:","449a2184":"#### children:","b2bfbc8a":"#### Age:","f7d9ae02":"# Model Building:","3a25bebb":"#### Medical Insurance Charges:","dc34adb7":"#### Body Mass Index:","9e675d73":"<img src=\"https:\/\/i.ibb.co\/FYBkxBT\/Screenshot-2021-10-28-194050.jpg\"> \n<img src=\"https:\/\/i.ibb.co\/dbRXRT0\/Screenshot-2021-10-28-194215.jpg\"> "}}