{"cell_type":{"dbab7926":"code","ee45d687":"code","097e6287":"code","6382807e":"code","4d15ff5b":"code","6e34dca1":"code","09f92de7":"code","a2d38e80":"code","43462b09":"code","2160d6e3":"code","2517d1c7":"code","3e15f9b3":"code","2926cb51":"code","88444d93":"code","caca5e74":"code","224ce633":"code","2b5f8953":"code","0a9848ee":"code","d10efc27":"code","e6a70190":"code","d6ac3a42":"code","9bc629a8":"code","643822c9":"code","d03ae42d":"code","69e3b5b7":"code","a82e7be9":"code","eb592aa8":"code","7c16ba0d":"code","9391d17b":"code","2a34e853":"code","9bf56a9b":"code","f7275a97":"code","5238d8e1":"code","eb0d21f8":"code","347db4ab":"markdown","81d1b79b":"markdown","2f2d4e65":"markdown","9a298b9d":"markdown","f5e9e7c8":"markdown","aeced548":"markdown","515f9ad4":"markdown","7a44daa9":"markdown","a506f649":"markdown","6d8b1de2":"markdown"},"source":{"dbab7926":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","ee45d687":"train_img=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest=pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")","097e6287":"train_img.tail(10)","6382807e":"Y=train_img['label']","4d15ff5b":"X=train_img.drop(labels='label',axis=1)\nX","6e34dca1":"Y","09f92de7":"g = sns.countplot(Y)\n\nY.value_counts()","a2d38e80":"X.isnull().any().describe()","43462b09":"test.isnull().any().describe()","2160d6e3":"X = X\/ 255.0\ntest= test \/ 255.0","2517d1c7":"X","3e15f9b3":"X = X.values.reshape(-1,28,28,1)\ntest= test.values.reshape(-1,28,28,1)","2926cb51":"X","88444d93":"Y","caca5e74":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D","224ce633":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.1,random_state=42)","2b5f8953":"x_train.shape","0a9848ee":"x_test.shape","d10efc27":"from tensorflow.keras import datasets, layers, models","e6a70190":"from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D, BatchNormalization","d6ac3a42":"model = Sequential()\n\nmodel.add(Conv2D(filters = 16, kernel_size = (3, 3), activation='relu',\n                 input_shape = (28, 28, 1)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 16, kernel_size = (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPool2D(strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Conv2D(filters = 32, kernel_size = (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters = 32, kernel_size = (3, 3), activation='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(MaxPool2D(strides=(2,2)))\nmodel.add(Dropout(0.25))\n\nmodel.add(Flatten())\nmodel.add(Dense(512, activation='relu'))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation='softmax'))","9bc629a8":"model.summary()","643822c9":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=25)","d03ae42d":"test_loss, test_acc = model.evaluate(x_test, y_test)","69e3b5b7":"print(test_acc)","a82e7be9":"print(test_loss)","eb592aa8":"test","7c16ba0d":"results=model.predict(test)","9391d17b":"results.shape","2a34e853":"results","9bf56a9b":"classes= model.predict_classes(test)\nclasses","f7275a97":"results = pd.Series(classes,name=\"Label\")","5238d8e1":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission","eb0d21f8":"submission.to_csv(\"submit5.csv\",index=False)","347db4ab":"# SPLITTING THE DATASET","81d1b79b":"So there are no null values.\n","2f2d4e65":"# Train and test images (28px x 28px) has been stock into pandas.Dataframe as 1D vectors of 784 values. We reshape all data to 28x28x1 3D matrices.\n\n# Keras requires an extra dimension in the end which correspond to channels. MNIST images are gray scaled so it use only one channel. For RGB images, there is 3 channels, we would have reshaped 784px vectors to 28x28x3 3D matrices.","9a298b9d":"#     # NORMALISING THE PIXEL VALUES","f5e9e7c8":"# CHECKING FOR NULL VALUES","aeced548":"# LOADING THE DATASETS","515f9ad4":"# If one component of shape is the special value -1, the size of that dimension is computed so that the total size remains constant. In particular, a shape of [-1] flattens into 1-D. At most one component of shape can be -1.","7a44daa9":"# TEST ACCURACY","a506f649":"# SUBMISSION","6d8b1de2":"# CNN MODEL"}}