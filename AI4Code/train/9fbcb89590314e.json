{"cell_type":{"469e6774":"code","02803c3a":"code","caa7bf35":"code","9bafded8":"code","804fc2a9":"code","e9f353c2":"code","d8c3bc32":"code","0c6e3a4e":"code","8e952cc7":"code","d6024cdd":"code","03ed5314":"code","f79346a5":"code","4087e6c1":"code","408ea52d":"code","912f5773":"markdown","d70508d1":"markdown","5b6876da":"markdown","e3612ff4":"markdown","f10b26a0":"markdown","8d5f7eaa":"markdown","15807722":"markdown","553f157b":"markdown","3450815c":"markdown"},"source":{"469e6774":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nimport warnings\nwarnings.filterwarnings('ignore')","02803c3a":"df = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","caa7bf35":"df","9bafded8":"df.age.describe()","804fc2a9":"_,ax = plt.subplots(3,4,figsize = (20,15))\nax = ax.flatten()\nfor i in range (0,df.shape[1]-1):\n    sns.kdeplot(df.iloc[:,i],ax = ax[i])","e9f353c2":"plt.figure(figsize=(20,10))\nsns.heatmap(df.corr(),annot = True,square = False,yticklabels = False,linewidth = 1,linecolor = 'black')","d8c3bc32":"_,ax = plt.subplots(3,4,figsize = (25,15))\nax = ax.flatten()\nfor i in range (0,df.shape[1]-1):\n    sns.violinplot(x = df.DEATH_EVENT,y = df.iloc[:,i],ax = ax[i],split=True,scale=\"count\", inner=\"quartile\",palette=\"Set2\")","0c6e3a4e":"#Converting age in different grops\nfor i in range(0,df.shape[0]):\n    if 40 <= df.iloc[i,0] < 58 :\n        df.iloc[i,0] = 0\n    elif 58 <= df.iloc[i,0] < 76 :\n        df.iloc[i,0] = 1\n    elif 76 <= df.iloc[i,0] < 96 :\n        df.iloc[i,0] = 2","8e952cc7":"x = df.drop(['DEATH_EVENT'],axis = 1)","d6024cdd":"y = df.DEATH_EVENT","03ed5314":"x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)","f79346a5":"h = []\nfor i in np.arange(0,100):\n    rfc = RandomForestClassifier(random_state=i)\n    rfc.fit(x_train,y_train)\n    acc = accuracy_score(y_test,rfc.predict(x_test))\n    h.append(acc)\nmax(h),np.mean(h)\n\nplt.figure(figsize=(15,6))\nplt.axhline(y = np.mean(h), color = 'g',linestyle = '-')\nplt.plot(np.arange(0,100),h)\nplt.annotate('Max',(h.index(max(h)),max(h)),xytext = (10,0.79),arrowprops=dict(arrowstyle='->', color='red',  linewidth=3, mutation_scale=30))\nplt.annotate('Mean',(58,np.mean(h)),xytext = (57,0.76),arrowprops=dict(arrowstyle='->', color='red',  linewidth=3, mutation_scale=30))","4087e6c1":"h = []\nfor i in np.arange(0,100):\n    x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=i)\n    xgb = XGBClassifier(max_depth= 4,reg_alpha=10,learning_rate= 0.01,verbosity = 0)\n    xgb.fit(x_train,y_train)\n    acc = accuracy_score(y_test,xgb.predict(x_test))\n    h.append(acc)\nmax(h),np.mean(h)\n\nplt.figure(figsize=(15,6))\nplt.axhline(y = np.mean(h), color = 'g',linestyle = '-')\nplt.plot(np.arange(0,100),h)\nplt.annotate('Max(91.67%)',(h.index(max(h)),max(h)),xytext = (10,0.91),arrowprops=dict(arrowstyle='->', color='red',  linewidth=3, mutation_scale=30))\nplt.annotate('Mean',(60,np.mean(h)),xytext = (60,0.90),arrowprops=dict(arrowstyle='->', color='red',  linewidth=3, mutation_scale=30))","408ea52d":"h = []\nfor i in np.arange(0,100):\n    x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=i)\n    lgb = LGBMClassifier(max_depth= 4,reg_alpha=10,learning_rate= 0.01)\n    lgb.fit(x_train,y_train)\n    acc = accuracy_score(y_test,lgb.predict(x_test))\n    h.append(acc)\nmax(h),np.mean(h)\n\nplt.figure(figsize=(15,6))\nplt.axhline(y = np.mean(h), color = 'g',linestyle = '-')\nplt.plot(np.arange(0,100),h)\nplt.annotate('Max(96.67%)',(h.index(max(h)),max(h)),xytext = (30,0.95),arrowprops=dict(arrowstyle='->', color='red',  linewidth=3, mutation_scale=30))\nplt.annotate('Mean',(60,np.mean(h)),xytext = (60,0.90),arrowprops=dict(arrowstyle='->', color='red',  linewidth=3, mutation_scale=30))","912f5773":"<h1 id=\"heading7\">\n<span style=\"font-size:22px;\">XGBoost<\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading7\" target ='_self'><\/a>\n<\/h1>","d70508d1":"<h1 id=\"heading6\">\n<span style=\"font-size:22px;\">Random Forest with variable random_state.<\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading6\" target ='_self'><\/a>\n<\/h1>","5b6876da":"\n<span style=\"font-size:18px;\">Just change in random_state turn out to be a large variation.\n For more random_state examples visit my notebook https:\/\/www.kaggle.com\/alampalsingh\/heartattack-93-acc-with-variable-random-state<\/span>\n","e3612ff4":"<span style=\"font-size:18px;\">**\ud83d\ude44 Huge variation isn't it.**","f10b26a0":"<h1 id=\"heading3\">\n<span style=\"font-size:22px;\">Loading Data<\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading3\" target ='_self'><\/a>\n<\/h1>","8d5f7eaa":"<center><img src ='https:\/\/delhi.apollohospitals.com\/blog\/wp-content\/uploads\/2021\/01\/Heart-Failure.jpg' width ='700px'>\n<\/center>\n<img src='https:\/\/i.imgur.com\/SZQXq1q.png' width = '600px' align = 'right'>","15807722":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:#101820FF;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n\n<p style=\"padding: 10px;color:#F6B042;font-size:120%;\">This is the maximum accuracy that I have got. If you find this notebook helpful don't forget to upvote.\ud83d\ude00<\/p>","553f157b":"<span style=\"font-size:22px;\">**Skewness**","3450815c":"<h1 id=\"heading8\">\n<span style=\"font-size:22px;\">LightGBM with variable random_state.<\/span>\n<a class=\"anchor-link\" href=\"https:\/\/www.kaggle.com\/alampalsingh\/notebook004d896e8c#heading8\" target ='_self'><\/a>\n<\/h1>\n"}}