{"cell_type":{"b962c610":"code","22fcea87":"code","381746d8":"code","f09bd551":"code","b78c9e74":"code","3bb8145a":"code","06096beb":"code","907a192c":"code","288a772b":"code","31ef3c92":"code","029407a0":"code","c6405f32":"code","ccd0debb":"code","b4b9aa5c":"code","44407aac":"code","8908f174":"code","d2d95bf5":"code","b0730686":"code","d873888f":"code","55f6479b":"code","77de874f":"code","d0eac592":"code","44a7d75b":"code","64fecfd8":"code","3871dffe":"code","2fd1fbba":"code","7aee8c50":"code","339d4527":"markdown","30b196c3":"markdown","0233dcac":"markdown","e92635c3":"markdown","a3c48004":"markdown","80af0248":"markdown","4998f626":"markdown","6fdc2118":"markdown","16fe08fc":"markdown","96f95fb2":"markdown","b8dfad05":"markdown","ce9dd782":"markdown","490fd6e4":"markdown"},"source":{"b962c610":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# machine learning\nimport time\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom xgboost import XGBRegressor\n","22fcea87":"train_df = pd.read_csv('..\/input\/train.csv')\ntest_df = pd.read_csv('..\/input\/test.csv')\n#verticalStack = pd.concat([surveySub, surveySubLast10], axis=0)\n#combined_df= pd.concat([train_df,test_df],axis=0,sort=False)","381746d8":"sns.heatmap(train_df.isnull())","f09bd551":"train_df.Age.isnull().sum(),train_df.shape\ntest_df.Age.isnull().sum(),train_df.shape\n","b78c9e74":"import math\nmath.ceil(train_df.Age.mean(skipna=True))","3bb8145a":"train_df.Age.fillna(value= 30  ,inplace=True)\ntest_df.Age.fillna(value= 30  ,inplace=True)\ntest_df.Fare.fillna(value=36,inplace=True)","06096beb":"train_df.head()","907a192c":"# droping string values that is difficult to process\ntrain_df.drop(['Cabin','Ticket','Name','PassengerId'],axis=1,inplace=True)\ntest_df.drop(['Cabin','Ticket','Name','PassengerId'],axis=1,inplace=True)\n","288a772b":"train_df.dtypes","31ef3c92":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ntrain_df['Sex']=le.fit_transform(train_df.Sex)\ntest_df['Sex']=le.fit_transform(test_df.Sex)\n#combined_df['Embarked']=le.fit_transform(combined_df.Embarked)","029407a0":"train_df.head()","c6405f32":"train_df.Embarked.value_counts()","ccd0debb":"train_df=train_df.merge(pd.get_dummies(train_df.Embarked,prefix='Embarked'),how='right',on=pd.get_dummies(train_df.Embarked,prefix='Embarked').index)\ntest_df=test_df.merge(pd.get_dummies(test_df.Embarked,prefix='Embarked'),how='right',on=pd.get_dummies(test_df.Embarked,prefix='Embarked').index)","b4b9aa5c":"train_df.shape","44407aac":"test_df.shape","8908f174":"train_df.head()","d2d95bf5":"train_df.drop(['key_0','Embarked'],axis=1,inplace=True)\ntest_df.drop(['key_0','Embarked'],axis=1,inplace=True)","b0730686":"train_df.head()","d873888f":"X=train_df.drop('Survived',axis=1)\ny=train_df.Survived","55f6479b":"from sklearn.model_selection import  train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","77de874f":"models =[DecisionTreeClassifier,GaussianNB,RandomForestClassifier,SVC,LogisticRegression,KNeighborsClassifier,SGDClassifier]","d0eac592":"for model in models :\n    pipeline = make_pipeline( model())\n\n    pipeline.fit(X_train, y_train)\n    predictions = pipeline.predict(X_test)\n\n    print('-------------',model,'-----------')\n    print(classification_report(predictions,y_test))\n    print('MAE:',mean_absolute_error(predictions,y_test))\n    ","44a7d75b":"pipeline_rf = make_pipeline( RandomForestClassifier(random_state=42)\n                           )\n\npipeline_rf.fit(X_train, y_train)\npredictions_rf = pipeline_rf.predict(X_test)\n    \nprint(classification_report(predictions_rf,y_test))\nprint('MAE:',mean_absolute_error(predictions_rf,y_test))","64fecfd8":"train_x=train_df.drop('Survived',axis=1)\n\ntrain_y=train_df.Survived","3871dffe":"pipeline_final = make_pipeline( RandomForestClassifier(random_state=42)\n                           )\n\npipeline_final.fit(train_x, train_y)\npredictions_final = pipeline_final.predict(test_df)\n    \n#print(classification_report(predictions_final,y_test))\n#print('MAE:',mean_absolute_error(predictions_final,y_test))","2fd1fbba":"test_df = pd.read_csv('..\/input\/test.csv')\n","7aee8c50":"output = pd.DataFrame({'PassengerId': test_df.PassengerId,'Survived': predictions_final})\noutput.to_csv('submission.csv', index=False)","339d4527":"### imputing missing values in Age colum by mean value","30b196c3":"## importing Data","0233dcac":"> #### handling varies Dtypes ","e92635c3":"**Categorical: Survived, Sex, and Embarked. Ordinal: Pclass**\n\n**Continous: Age, Fare. Discrete: SibSp, Parch.**","a3c48004":"## trying out different models","80af0248":"## preparing X and Y ","4998f626":"## some imports","6fdc2118":"### checking for missing values","16fe08fc":"## splitting data","96f95fb2":"> random forest gave best results followed up by logistic regression ","b8dfad05":"# creating final model ","ce9dd782":"# Creating Output","490fd6e4":" ###  handling string values that may be used in future but for now dropping those"}}