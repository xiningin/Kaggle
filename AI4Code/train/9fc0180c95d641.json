{"cell_type":{"c4f31bc3":"code","bb7a554b":"code","c8aabff8":"code","225fe268":"code","596c2c00":"code","fc0d110e":"code","9ef64c15":"code","8e097c49":"code","e892586b":"code","32cd85a2":"code","d5527e3b":"code","0ce61cbc":"code","be6d3cb1":"code","6f4c83c3":"code","a13d0873":"markdown"},"source":{"c4f31bc3":"# Assignment 1.2 - Functions for everything.py\n# You may work with a partner on this assignment\n# By Christianna Grace Macasaet\n# 30 points\n\n# rule - complete the following 7 functions\n# rule - add appropriate print\/execute statements to run\/test each function\n# note - you may copy\/paste from your previous assignments as appropriate\n\n# complete the following 7 code cells","bb7a554b":"# FIRST FUNCTION: MADLIB VERSION 1\ndef madlibV1(): \n    # this function will, when called ask the user for several strings and then print a madlib using those words\n    # input and print statements will be *inside* the function definition\n    # this is worse code than the next problem\n\nprint (\"Hey there, friend!\")\nprint (\"This is a fun madlib that you can complete by yourself or with friends!\")\nprint (\"Just answer the questions and provide the information asked below and enjoy your story once you finish!\")\nprint (\"HAVE FUN!\")\nprint (\"\\n\\n\\n\")\n\ndef madlibV1(): \n    name = input(\"Let's start with your name! Please enter your name below: \\n\")\n    print (\"Next, we'll need your pronouns!\\n\")\n    p_pronoun = input(\"Please enter the possessive pronoun first (his, her, their, etc.): \\n\")\n    s_pronoun = input(\"Now, please enter your subject pronoun (he, she, they, etc.): \\n\")\n    o_pronoun = input(\"Please enter your opbject pronoun (him, her, them, etc.: \\n\")\n    r_pronoun = input(\"Lastly, please enter your reflexive pronoun (himself, herself, themself, etc.): \\n\")\n    print (\"Great! Now it's time for the story words!\\n\")\n    title_adj = input(\"Please enter an adjective: \\n\")\n    adj_1 = input(\"Please enter another adjective: \\n\")\n    kingdom_name = input(\"Please enter a name for your kingdom: \\n\")\n    adv_1 = input(\"Please enter another adjective: \\n\")\n    verb_1 = input(\"Please enter a verb ending with -ing: \\n\")\n    noise_1 = input(\"Please enter an onomotopoeia (a word that is written the way it sounds): \\n\")\n    verb_2 = input(\"Please enter a verb in the past tense (walked, jumped, etc.): \\n\")\n    adj_2 = input(\"Please enter an adjective once again: \\n\")\n    verb_3 = input(\"Please enter a verb ending with -ing: \\n\")\n    adj_3 = input(\"Please enter an adjective: \\n\")\n    color_1 = input(\"Please enter a color: \\n\")\n    creature = input(\"Please enter the name of a mystical creature: \\n\")\n    tool = input(\"Please enter a the name of any battle tool: \\n\")\n    adj_4 = input(\"Please enter an adjective: \\n\")\n    adj_5 = input(\"Please enter an adjective: \\n\")\n    body_part = input(\"Please enter a part of your mystical creature's body: \\n\")\n    adv_2 = input(\"Please enter an adverb: \\n\")\n    adv_3 = input(\"Please enter an adverb: \\n\")\n    print (\"\\n\\n\\n\")\n    print (\"The\", title_adj, \"Adventures of\", name)\n    print (\"How the Battle Ends\\n\")\n    print (\"On one\", adj_1, \"night in the kingdom of\\n\", kingdom_name + \",\", name, \"was\", adv_1, verb_1, \"in the castle. Then suddenly, there was a loud\\n\", noise_1, \"that didn't sound like thunder.\", name, verb_2, \"to the balcony, and what\\n\", s_pronoun, \"saw was\", adj_2 + \".\", verb_3, \"in front of\", p_pronoun, \"was a\\n\", adj_3 + \",\", color_1,creature + \".\", name, \"grabbed\", p_pronoun, tool, \"to defend\\n\", r_pronoun, \"against the\", adj_4, \"The\", creature, \"and\\n\", name, \"fought while in pursuit of each other until they reached the end of\\n\", kingdom_name + \"'s\", adj_5, \"woods\" + \".\", \"Finally, the perfect opening for a final strike opened up for\\n\", name + \".\", \"However, right before\", s_pronoun, \"was going to end the battle,\", name, \"noticed that the\\n\", creature, \"had a vine tightly wrapped around its\", body_part + \".\", \"Instead of slashing the\\n\", creature + \",\", name, adv_2, \"cut off the vine and the\", creature, \"made a sound of pure joy. The\\n\", creature + \"'s\", \"eyes looked at\", name, \"with gratefulness, and before going back to its home, the\\n\", creature, adv_3, \"bowed its head to\", o_pronoun + \".\", \"At last, the battle ended, but with friendship, rather than violence.\")\n\nmadlibV1()","c8aabff8":"# SECOND FUNCTION: MADLIB VERSION 2\ndef madlibV2(___, ___, ___, ...):\n# this function will take in several strings and then return a madlib using those words\n# input and print statements will be in main code after this function is defined\n# this is better code than the previous problem\n\n# note: madlibV1 uses input, V2 takes in variables\n# note: madlibV1 uses 'print', V2 uses 'return'\n# the actual content of the madlibs may be the same as each other, or different from each other\n\nprint (\"Hey there, friend!\")\nprint (\"This is a fun madlib that you can complete by yourself or with friends!\")\nprint (\"Just answer the questions and provide the information asked below and enjoy your story once you finish!\")\nprint (\"HAVE FUN!\")\nprint (\"\\n\\n\\n\")\n\ndef madlibV2():\n    return print (\"The\", title_adj, \"Adventures of\", name, \"How the Battle Ends\\n\", \"On one\", adj_1, \"night in the kingdom of\\n\", kingdom_name + \",\", name, \"was\", adv_1, verb_1, \"in the castle. Then suddenly, there was a loud\\n\", noise_1, \"that didn't sound like thunder.\", name, verb_2, \"to the balcony, and what\\n\", s_pronoun, \"saw was\", adj_2 + \".\", verb_3, \"in front of\", p_pronoun, \"was a\\n\", adj_3 + \",\", color_1,creature + \".\", name, \"grabbed\", p_pronoun, tool, \"to defend\\n\", r_pronoun, \"against the\", adj_4, \"The\", creature, \"and\\n\", name, \"fought while in pursuit of each other until they reached the end of\\n\", kingdom_name + \"'s\", adj_5, \"woods\" + \".\", \"Finally, the perfect opening for a final strike opened up for\\n\", name + \".\", \"However, right before\", s_pronoun, \"was going to end the battle,\", name, \"noticed that the\\n\", creature, \"had a vine tightly wrapped around its\", body_part + \".\", \"Instead of slashing the\\n\", creature + \",\", name, adv_2, \"cut off the vine and the\", creature, \"made a sound of pure joy. The\\n\", creature + \"'s\", \"eyes looked at\", name, \"with gratefulness, and before going back to its home, the\\n\", creature, adv_3, \"bowed its head to\", o_pronoun + \".\", \"At last, the battle ended, but with friendship, rather than violence.\")\n\nword1 = input(\"Let's start with your name! Please enter your name below: \\n\")\nword2 = input(\"Please enter the possessive pronoun first (his, her, their, etc.): \\n\")\nword3 = input(\"Now, please enter your subject pronoun (he, she, they, etc.): \\n\")\nword4 = input(\"Please enter your opbject pronoun (him, her, them, etc.: \\n\")\nword5 = input(\"Lastly, please enter your reflexive pronoun (himself, herself, themself, etc.): \\n\")\nword6 = input(\"Please enter an adjective: \\n\")\nword7 = input(\"Please enter another adjective: \\n\")\nword8 = input(\"Please enter a name for your kingdom: \\n\")\nword9 = input(\"Please enter another adjective: \\n\")\nword10 = input(\"Please enter a verb ending with -ing: \\n\")\nword11 = input(\"Please enter an onomotopoeia (a word that is written the way it sounds): \\n\")\nword12 = input(\"Please enter a verb in the past tense (walked, jumped, etc.): \\n\")\nword13 = input(\"Please enter an adjective once again: \\n\")\nword14 = input(\"Please enter a verb ending with -ing: \\n\")\nword15 = input(\"Please enter an adjective: \\n\")\nword16 = input(\"Please enter a color: \\n\")\nword17 = input(\"Please enter the name of a mystical creature: \\n\")\nword18 = input(\"Please enter a the name of any battle tool: \\n\")\nword19 = input(\"Please enter an adjective: \\n\")\nword20 = input(\"Please enter an adjective: \\n\")\nword21 = input(\"Please enter a part of your mystical creature's body: \\n\")\nword22 = input(\"Please enter an adverb: \\n\")\nword23 = input(\"Please enter an adverb: \\n\")\nprint (madlibV2(word1, word2, word3, word4, word5, word6, word7, word8, word9, word10, word11, word12, word13, word14, word15, word16, word17, word18, word19, word20, word21, word22, word23))\n","225fe268":"# THIRD FUNCTION: REVERSE A STRING \ndef reverse_string(word): \n    # this function takes in a string, named 'word' and returns that string backwards\n    # [print (reverse_string(\"kittens\"))] should print [\"snettik\"]\n    # do this using the algorithm you built in last week's assignment\n\ndef reverse_string(word):\n    word = input(\"What word would you like to reverse?: \")\n    return word[::-1]\n\nreverse_string(word)","596c2c00":"# FOURTH FUNCTION: FORMULA VERSION 1\ndef formulaV1(...): \n    # you may use an appropriate function name instead\n    # this function takes in numbers as needed and returns a result\n    # this may be a formula you implemented earlier or a new one\n\ndef slope_v1(x_1, y_1, x_2, y_2):\n    while True:\n        print (\"\\n\\nWith just two points, this program will use the Slope Formula to solve for the slope for you!\")\n        print (\"All you need to do is answer the questions and find the slope of your line!\")\n        print (\"\\n\")\n        x_1 = float(input(\"What is the x-value of the first point?\\n\"))\n        y_1 = float(input(\"What is the y-value of the first point?\\n\"))\n        x_2 = float(input(\"What is the x-value of the second point?\\n\"))\n        y_2 = float(input(\"What is the y-value of the second point?\\n\"))\n        rise = float(y_2 - y_1)\n        run = float(x_2 - x_1)\n        slope = (rise \/ run)\n        print (\"\\n\")\n        print (\"Here's your slope!:\")\n        print (slope)\n        print (\"\\n\\n\")\n        play_again = input(\"\\nEnter again? Yes or No: \")\n        if play_again == \"No\":\n            print (\"Thanks!\")\n            break\n\nslope_v1('x_1', 'y_1', 'x_2', 'y_2')","fc0d110e":"# FIFTH FUNCTION: YES OR NO\ndef yes_or_no():\n    # this function asks \"do you want to play again, yes or no?\"\n    # and returns your answer - yes\/no\n    # for any other answer this will re-ask until you give an acceptable answer\n\ndef yes_or_no():\n    while True:\n        print (\"This neat program will solve one of the given formulas for you!\")\n        print (\"You can choose from: \")\n        print (\"The Slope Formula, Area of a Rectangle,\") \n        print (\"Slope-Intercept Form, or stopping the program completely.\")\n        print (\"\")\n        print (\"Instructions: \")\n        print (\"To make the program find the Slope, enter SLOPE\")\n        print (\"To make the program find the area of a rectangle, enter AREA\")\n        print (\"To make the program find a function's slope-intercept form, enter INTERCEPT\")\n        print (\"To make the program stop and end, enter STOP\")\n        print (\"\\nIMPORTANT NOTE: Entering anything besides the mentioned above will\\nreturn invalid and repeats the question.\\n\")\n        choice = input(\"What would you like to solve for?: \")\n        if choice != \"SLOPE\" and choice != \"AREA\" and choice != \"INTERCEPT\" and choice != \"STOP\":\n                print (\"Invalid response, please try again.\")\n                print (\"\\n\\n\\n\\n\")\n    # When true, this condition will solve for the slope with the given values.\n        if choice == \"SLOPE\": \n            print (\"Great choice! Let's solve for the slope now!\")\n            print (\"All you'll need is 2 points of the function!\")\n            x1 = float(input(\"What is the x-value of your first point?: \"))\n            y1 = float(input(\"What is the y-value of your first point?: \"))\n            x2 = float(input(\"What is the x-value of your second point?: \"))\n            y2 = float(input(\"What is the y-value of your second point?: \"))\n            numerator = (y2 - y1)\n            denominator = (x2 - x1)\n            slope = (numerator \/ denominator)\n            print (\"The slope is: \")\n            print (slope)\n            print (\"\\n\\n\\n\")\n    # When true, this condition will solve for the area of a rectangle with the... \n    # given values.\n        if choice == \"AREA\":\n            print (\"Awesome! Let's solve for the area of a rectangle now!\")\n            print (\"All you'll need is the length and width of the rectangle!\")\n            length = float(input(\"What is the length of one side of the rectangle?: \"))\n            width = float(input(\"What is the width of one side of the rectangle?: \"))\n            area = (length * width)\n            print (\"The area of the rectangle is: \")\n            print (area)\n            print (\"\\n\\n\\n\")\n    # When true, this condition will solve for the intercept form of a function...\n    # with the provided slope and vertex values.\n        if choice == \"INTERCEPT\":\n            print (\"Yay! Let's solve for the slope-intercept form of a function!\")\n            print (\"All you'll need is the slope and vertex of the function!\")\n            slope = float(input(\"What is the slope of the function?: \"))\n            vertex_x = float(input(\"What is the x-value of the vertex?: \"))\n            vertex_y = float(input(\"what is the y-value of the vertex?: \"))\n            print (\"y =\", slope, \"x +\", vertex_y)\n            print (\"\\n\\n\\n\")\n    # When true, this condition will completely stop the program.\n        if choice == \"STOP\": \n            print (\"Hope this helped! Thanks a bunch!\")\n            break\nprint (yes_or_no())","9ef64c15":"# SIXTH FUNCTION: FORMULA VERSION 2\ndef formulaV2(...): \n    # you may use an appropriate function name instead\n    # this will solve the same formula as formulaV1\n    # ... and then ask \"do you want to solve another (yes\/no)?\"\n    # ... and only accept \"yes\" and \"no\", and otherwise re-ask\n    # to accomplish this, call functions formulaV1 and yes_or_no\n    # ... inside this function\n\n# function formula version 1\ndef slope_v1(x_1, y_1, x_2, y_2):\n    print (\"\\n\\nWith just two points, this program will use the Slope Formula to solve for the slope for you!\")\n    print (\"All you need to do is answer the questions and find the slope of your line!\")\n    print (\"\\n\")\n    x_1 = float(input(\"What is the x-value of the first point?\\n\"))\n    y_1 = float(input(\"What is the y-value of the first point?\\n\"))\n    x_2 = float(input(\"What is the x-value of the second point?\\n\"))\n    y_2 = float(input(\"What is the y-value of the second point?\\n\"))\n    rise = float(y_2 - y_1)\n    run = float(x_2 - x_1)\n    slope = (rise \/ run)\n    print (\"\\n\")\n    print (\"Here's your slope!:\")\n    print (slope)\n    print (\"\\n\\n\")\n\n# function formula yes or no\ndef yes_or_no():\n    while True:\n        print (\"\\n\\nWould you like to play again?\")\n        reply = input(\"Yes or No?: \")\n        if reply == (\"Yes\"):\n            slope_v1('x_1', 'y_1', 'x_2', 'y_2')\n        if reply == (\"No\"):\n            print (\"Thanks for playing!\")\n            break\n\n# actual function formula version 2\ndef slope_v2(slope_v1, yes_or_no):\n    slope_v1('x_1', 'y_1', 'x_2', 'y_2')\n    yes_or_no()\n    \nslope_v2(slope_v1, yes_or_no)","8e097c49":"# SEVENTH FUNCTION: \ndef redPrint(message) \n    # prints a message in red, and then sets the color back to normal if needed\n\n!pip install colorama \nfrom colorama import Fore, Style\n\ndef redPrint(message):\n    while True:\n        message = input(\"\\n\\nWhat would you like to enter?: \")\n        print (\"\\n\")\n        print (Fore.RED + message)\n        answer = input(\"\\n\\nWould you like to reset the color of the text back to black, Yes or No?: \")\n        if answer == \"Yes\":\n            print (\"\\nOk, here is your message reset back to black: \")\n            print (Fore.BLACK + message)\n            print (Fore.BLACK + \"Thanks!\")\n        elif answer == \"No\":\n            print (\"\\nOk, here is your message: \")\n            print (Fore.RED + message)\n            print (Fore.BLACK + \"Thanks!\")\n        play_again = input(\"\\n\\nWould you like to play again, Yes or No?: \")\n        if play_again == \"No\":\n            print (\"Thanks!\")\n            break\n\nredPrint('message')\n","e892586b":"def madlibv1():\n    # this function will, when called ask the user for several strings and then print a madlib using those words\n    color = input(\"please enter a color: \")\n    animal = input(\"please enter a plural animal: \")\n    adj = input(\"please enter an adjective: \")\n    response = color + \" \" + animal + \" are \" + adj\n    print (response)\n    \nmadlibv1()  ","32cd85a2":"def madlibv2(color, animal, adj):\n    # this function will take in several strings and then retrun a madlib using those words\n    return color + \" \" + animal + \" are \" + adj\n\nword1 = input(\"please enter a color:\\n\")\nword2 = input(\"please enter an animal (plural):\\n\")\nword3 = input(\"please enter an adjective:\\n\")\nprint (madlibv2(word1, word2, word3))\n","d5527e3b":"def distance_formula(x1, y1, x2, y2):\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** .5\n\nprint (distance_formula(3,4,6,8))","0ce61cbc":"def yes_or_no():\n    # this function asks \"do you want to play again, yes or no?\"\n    # and returns your answer - yes\/no\n    # for any other answer this will re-ask until you give an acceptable answer\n    while True:\n        response = input(\"would you like to play again? (yes or no): \").lower()\n        if response == \"yes\" or response == \"no\":\n            return response\n\nprint (yes_or_no())","be6d3cb1":"def distance_formula_V2():\n    while True:\n        print (\"solving distance formula for (x1, y1, x2, y2)\")\n        num1 = int(input(\"please enter x1: \"))\n        num2 = int(input(\"please enter y1: \"))\n        num3 = int(input(\"please enter x2: \"))\n        num4 = int(input(\"please enter y2: \"))\n        answer = distance_formula(num1, num2, num3, num4)\n        print (\"the distance is\", answer)\n        response = yes_or_no()\n        if response == 'no':\n            break\n    print (\"done, thank you\")\n        \ndistance_formula_V2()","6f4c83c3":"from colorama import Fore, Style\ndef blueprint(message):\n    print (Fore.BLUE + message)\n    print (Style.RESET_ALL) \n\nblueprint(\"hello world\")","a13d0873":"Examples begin here"}}