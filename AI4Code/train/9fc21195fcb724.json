{"cell_type":{"38cac23d":"code","242ee1b2":"code","1d26c39b":"code","da80edbd":"code","4768eb9a":"code","37b84f17":"code","f2582561":"markdown","190f8910":"markdown","5d295b19":"markdown","51509d02":"markdown"},"source":{"38cac23d":"# numpy\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport datatable as dt\n\n# garbage collector to keep RAM in check\nimport gc  \n\n# system\nimport warnings\nwarnings.filterwarnings('ignore')","242ee1b2":"# https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\ndef reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","1d26c39b":"%%time\ntrain_data = dt.fread('..\/input\/ubiquant-market-prediction\/train.csv')","da80edbd":"%%time\ntrain_data = train_data.to_pandas()","4768eb9a":"%%time\ntrain_data = reduce_mem_usage(train_data)","37b84f17":"train_data.to_pickle('train.pkl')","f2582561":"Credit:\n\nhttps:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage\n\nhttps:\/\/www.kaggle.com\/carlmcbrideellis\/jane-street-eda-of-day-0-and-feature-importance\n\nhttps:\/\/www.kaggle.com\/columbia2131\/speed-up-reading-csv-to-pickle","190f8910":"# 1. Load data\n#### The original train.csv is large: 18.557G with 3141411 rows. We should not use **pandas** to load this file. Indeed, we should use **datatable** to avoid OOM issue and speed up the loading process then convert the loaded data to pandas dataframe.","5d295b19":"# 3. Save the reduced dataframe","51509d02":"# 2. Reduce MEM usage"}}