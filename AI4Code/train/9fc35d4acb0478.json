{"cell_type":{"27ca6c7e":"code","dc019c81":"code","1bc46a0b":"code","67d0f16e":"code","677ecdca":"code","f18b46b3":"code","34fd231e":"code","c8589eae":"code","dc2dbf55":"code","08967bec":"code","c9b01a2a":"code","c3abac37":"code","abc70e5d":"markdown","2d800382":"markdown","d42a3ee3":"markdown","2950663a":"markdown","eb71dd57":"markdown"},"source":{"27ca6c7e":"import numpy as np\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Input,Conv2D,Conv2DTranspose,LeakyReLU,Flatten,Dense,Reshape,Activation\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.optimizers import Adam\nimport tensorflow.keras.backend as K\nfrom tensorflow.keras.datasets import mnist","dc019c81":"(x_train, _), (x_test, _) = mnist.load_data()\nx_train = np.expand_dims(x_train,axis=3)\nx_train = x_train\/255.0\nx_test = x_test\/255.0\nx_train.shape","1bc46a0b":"encoder_input = Input(shape=(28,28,1),name=\"input_encoder\")\nx = Conv2D(32,(3,3),padding='same',name='conv_0')(encoder_input)\nx = LeakyReLU()(x)\nx = Conv2D(64,(3,3),padding='same',strides=2,name='conv_1')(x)\nx = LeakyReLU()(x)\nx = Conv2D(64,(3,3),padding='same',strides=2,name='conv_2')(x)\nx = LeakyReLU()(x)\nx = Conv2D(64,(3,3),padding='same',name='conv_3')(x)\nx = LeakyReLU()(x)\nshape_before_flatten = x.shape[1:]\nx = Flatten()(x)\nencoder_output = Dense(2,name='encoder_output')(x)\nencoder = Model(inputs=encoder_input,outputs=encoder_output)","67d0f16e":"encoder.summary()","677ecdca":"decoder_input = Input(shape=(2,),name='decoder_input')\nx = Dense(np.prod(shape_before_flatten))(decoder_input)\nx = Reshape(shape_before_flatten)(x)\nx = Conv2DTranspose(64,(3,3),padding='same',strides=1,name='deconv_0')(x)\nx = LeakyReLU()(x)\nx = Conv2DTranspose(64,(3,3),padding='same',strides=2,name='deconv_1')(x)\nx = LeakyReLU()(x)\nx = Conv2DTranspose(32,(3,3),padding='same',strides=2,name='deconv_2')(x)\nx = LeakyReLU()(x)\nx = Conv2DTranspose(1,(3,3),padding='same',strides=1,name='deconv_3')(x)\ndecoder_output = Activation(\"sigmoid\")(x)\ndecoder = Model(inputs=decoder_input,outputs=decoder_output)","f18b46b3":"decoder.summary()","34fd231e":"model_input = encoder_input\nmodel_output = decoder(encoder_output)\nmodel = Model(model_input,model_output)\n\noptimizer = Adam(lr=1e-4)\ndef r_loss(y_true, y_pred):\n    return K.mean(K.square(y_true - y_pred), axis = [1,2,3])\nmodel.compile(optimizer=optimizer, loss = r_loss)","c8589eae":"model.summary()","dc2dbf55":"model.fit(\nx = x_train\n, y = x_train\n, batch_size = 32\n, shuffle = True\n, epochs = 10)","08967bec":"predictions=model.predict(x_test)","c9b01a2a":"fig = plt.figure(figsize=(10,10))\nfig.suptitle('True Images',fontsize=24)\nfor i in range(1,10):\n    ax = fig.add_subplot(3,3,i)\n    plt.imshow(x_test[i])","c3abac37":"fig = plt.figure(figsize=(10,10))\nfig.suptitle('predictions',fontsize=24)\nfor i in range(1,10):\n    ax = fig.add_subplot(3,3,i)\n    plt.imshow(predictions[i])","abc70e5d":"## **Encoder**","2d800382":"## **Dataset**","d42a3ee3":"## **AutoEncoder**","2950663a":"## **Decoder**","eb71dd57":"# **Predictions**"}}