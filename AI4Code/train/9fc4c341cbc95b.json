{"cell_type":{"53cc6592":"code","13e1fcae":"code","64033899":"code","764cda30":"code","e2be448d":"code","743d6f2e":"code","eebe1a31":"code","36050cf6":"code","8e3c6ca8":"code","e5868502":"code","cb73f981":"code","dc31ec09":"code","f427a61a":"code","052ae2b1":"code","caf11257":"code","c9809c0c":"code","73f47e48":"code","372bbf92":"code","b3163fa4":"code","56a851d2":"code","19c2e8ab":"code","15d5b071":"code","4b3a8c09":"code","a150a907":"code","3d35e902":"code","0b7a5e23":"code","ff590f6f":"code","f5dd09a5":"code","c896c606":"code","9940f3de":"code","0effed3f":"code","c3bbc8fd":"code","b12c4cfc":"code","ea6a9a53":"code","c106aa86":"code","46416df9":"code","5ec213f3":"code","910c9845":"code","56d258c2":"code","84d52dde":"code","911f97cb":"code","1e50a0cb":"code","c57271a7":"code","ecd8a2de":"code","b67105b9":"code","1536e287":"code","f866c276":"code","c2583484":"code","0f0656e6":"code","1553d0f8":"code","b94ad89d":"code","31b24d65":"code","01457a8b":"code","0b0c17d0":"code","a5f12d1b":"markdown"},"source":{"53cc6592":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport shap\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsRegressor\n\nfrom xgboost import XGBRegressor, XGBRFRegressor\nfrom lightgbm import LGBMRegressor\n\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","13e1fcae":"df = pd.read_csv('\/'.join([str(dirname),str(filename)]))","64033899":"df.describe()","764cda30":"def weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(x['total_revenue']*100, x['measurable_impressions'])*1000 , axis=1)","e2be448d":"df = df.drop(columns=['ad_type_id', 'revenue_share_percent', 'integration_type_id'])","743d6f2e":"df = df.loc[((df.CPM < df.CPM.quantile(0.95))&(df.CPM >= 0))]","eebe1a31":"plt.figure(figsize=(16,16))\nsns.heatmap(df.corr(), cmap='RdYlGn',  square=True, annot= True)","36050cf6":"X_train = df.loc[df.date<='2019-06-21'].reset_index(drop=True)\nX_test = df.loc[df.date>'2019-06-21'].reset_index(drop=True)","8e3c6ca8":"clmns = {'site_id': 'site',\n        'geo_id': 'geo',\n        'device_category_id': 'device',\n        'advertiser_id': 'advertist',\n        'os_id': 'OS',\n        'line_item_type_id':'line',\n        'monetization_channel_id': 'monetization', \n        'ad_unit_id': 'unit',\n        'total_impressions':'TI', \n        'viewable_impressions': 'VI', }\nX_train = X_train.rename(columns=clmns)\nX_test = X_test.rename(columns=clmns)","e5868502":"y_train = X_train['CPM']\ny_train_tr = X_train['total_revenue']\ny_train_mi = X_train['measurable_impressions']\nX_train = X_train.drop(columns=['CPM', 'total_revenue', 'measurable_impressions']).reset_index(drop=True)\ny_test = X_test['CPM']\ny_test_tr = X_test['total_revenue']\ny_test_mi = X_test['measurable_impressions']\nX_test = X_test.drop(columns=['CPM', 'total_revenue', 'measurable_impressions']).reset_index(drop=True)","cb73f981":"X_train = X_train.drop(columns=['date'])\nX_test = X_test.drop(columns=['date'])","dc31ec09":"rf = RandomForestRegressor(n_jobs=-1)\nrf.fit(X_train, y_train)","f427a61a":"predict_rf = rf.predict(X_test)","052ae2b1":"mean_squared_error(y_test, predict_rf)","caf11257":"xgbr = XGBRegressor(random_state=42, n_jobs=-1)\nxgbr.fit(X_train, y_train)\npredict_xgbr = xgbr.predict(X_test)","c9809c0c":"mean_squared_error(y_test, predict_xgbr)","73f47e48":"xgbrf = XGBRFRegressor(random_state=42, n_jobs=-1)\nxgbrf.fit(X_train, y_train)\npredict_xgbrf = xgbrf.predict(X_test)","372bbf92":"mean_squared_error(y_test, predict_xgbrf)","b3163fa4":"lgbmr = LGBMRegressor(n_jobs=-1, random_state=42)\nlgbmr.fit(X_train, y_train)\npredict_lgbmr = lgbmr.predict(X_test)","56a851d2":"mean_squared_error(y_test, predict_lgbmr)","19c2e8ab":"%%time\nxgbr = XGBRegressor(learning_rate=0.1, max_depth=6, n_estimators=1000, random_state=42, silent=True, n_jobs=-1)\nxgbr.fit(X_train[50000:], y_train[50000:], eval_set=[(X_train[:50000], y_train[:50000])], eval_metric='rmse', early_stopping_rounds=50, verbose=False)\npredict_xgbr = xgbr.predict(X_test)","15d5b071":"mean_squared_error(y_test, predict_xgbr)","4b3a8c09":"mean_squared_error(y_train, xgbr.predict(X_train))","a150a907":"print(xgbr.best_score**2)\nprint(xgbr.best_iteration)\nprint(xgbr.best_ntree_limit)","3d35e902":"pd.Series(xgbr.feature_importances_, index=X_train.columns).sort_values()","0b7a5e23":"%%time\nshap_test = shap.TreeExplainer(xgbr, algorithm='gradient')","ff590f6f":"%%time\nshap_test = shap_test.shap_values(X_train[:25000], tree_limit=700, check_additivity = False)","f5dd09a5":"%%time\nshap.summary_plot(shap_test, X_train[:25000],\n                       max_display=25, plot_size=(36, 16), axis_color='white')","c896c606":"X_train.hist(figsize=(24,16), bins=25)","9940f3de":"X_train.line.value_counts()","0effed3f":"X_test.line.value_counts()","c3bbc8fd":"%%time\nlgbr = LGBMRegressor(learning_rate=0.1, max_depth=13, n_estimators=1000, random_state=42, n_jobs=-1)\nlgbr.fit(X_train, y_train)\npredict_lgbr = lgbr.predict(X_test)","b12c4cfc":"mean_squared_error(y_test, predict_lgbr)","ea6a9a53":"mean_squared_error(y_train, lgbr.predict(X_train))","c106aa86":"pd.Series(lgbr.feature_importances_, index=X_train.columns).sort_values()","46416df9":"%%time\nshap_test = shap.TreeExplainer(lgbr, algorithm='gradient')","5ec213f3":"%%time\nshap_test = shap_test.shap_values(X_train[:25000], tree_limit=700, check_additivity = False)","910c9845":"%%time\nshap.summary_plot(shap_test, X_train[:25000],\n                       max_display=25, plot_size=(36, 16), axis_color='white')","56d258c2":"%%time\nlgbr_tr = LGBMRegressor(learning_rate=0.1, max_depth=13, n_estimators=1000, random_state=42, n_jobs=-1)\nlgbr_tr.fit(X_train, y_train_tr)\npredict_lgbr_tr = lgbr_tr.predict(X_test)","84d52dde":"mean_squared_error(y_test_tr, predict_lgbr_tr)","911f97cb":"mean_squared_error(y_train_tr, lgbr_tr.predict(X_train))","1e50a0cb":"%%time\nlgbr_mi = LGBMRegressor(learning_rate=0.1, max_depth=13, n_estimators=1000, random_state=42, n_jobs=-1)\nlgbr_mi.fit(X_train, y_train_mi)\npredict_lgbr_mi = np.vectorize(lambda x: int(x))(lgbr_mi.predict(X_test))","c57271a7":"mean_squared_error(y_test_mi, predict_lgbr_mi)","ecd8a2de":"mean_squared_error(y_train_mi, lgbr_mi.predict(X_train))","b67105b9":"recovered_cpm = [weird_division(predict_lgbr_tr[i]*100, predict_lgbr_mi[i])*1000 for i in range(predict_lgbr_tr.shape[0])]","1536e287":"mean_squared_error(y_test, recovered_cpm)","f866c276":"X_train['recoveret_tr'] = lgbr_tr.predict(X_train)\nX_test['recoveret_tr'] = lgbr_tr.predict(X_test)","c2583484":"%%time\nlgbr = LGBMRegressor(learning_rate=0.1, max_depth=13, n_estimators=1000, random_state=42, n_jobs=-1)\nlgbr.fit(X_train, y_train)\npredict_lgbr = lgbr.predict(X_test)","0f0656e6":"mean_squared_error(y_test, predict_lgbr)","1553d0f8":"pd.Series(lgbr.feature_importances_, index=X_train.columns).sort_values()","b94ad89d":"X_train['recoveret_mi'] = np.vectorize(lambda x: int(x))(lgbr_mi.predict(X_train.iloc[:,:-1]))\nX_test['recoveret_mi'] = np.vectorize(lambda x: int(x))(lgbr_mi.predict(X_test.iloc[:,:-1]))","31b24d65":"%%time\nlgbr = LGBMRegressor(learning_rate=0.1, max_depth=13, n_estimators=1000, random_state=42, n_jobs=-1)\nlgbr.fit(X_train, y_train)\npredict_lgbr = lgbr.predict(X_test)","01457a8b":"mean_squared_error(y_test, predict_lgbr)","0b0c17d0":"pd.Series(lgbr.feature_importances_, index=X_train.columns).sort_values()","a5f12d1b":"## Best score MSE = 2608 by sumple LGBMRegressor"}}