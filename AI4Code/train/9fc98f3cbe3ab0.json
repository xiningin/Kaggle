{"cell_type":{"e3d14d5e":"code","0464eab5":"code","fa94a944":"code","3dd21aa9":"code","1b791bcb":"code","38995d3b":"code","6b9ef372":"code","bbdd3a02":"code","ba91f3f3":"code","6c5062cd":"code","05faeaee":"code","22e5f706":"code","ed793ab7":"code","0c9175c2":"code","3232508f":"code","8d3ab25c":"code","171e10f9":"code","fc9fa660":"code","1a3ff9e7":"code","c9ea5766":"code","e88c9f84":"code","14cefda6":"code","bc895e04":"code","88196e4b":"code","da768aa6":"markdown","be88c8d9":"markdown","cb0d1797":"markdown"},"source":{"e3d14d5e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(10,10)})\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0464eab5":"raw = pd.read_csv(\"\/kaggle\/input\/chilled-eda\/chilled_water_cleaned.csv\", index_col = \"timestamp\", parse_dates = True)\nraw.head(3)","fa94a944":"raw = raw.resample(\"W\").mean()","3dd21aa9":"raw.head(3)","1b791bcb":"col = raw.columns\nprint(col[400:])","38995d3b":"#creating dataframe for a single site\n\npeacock = pd.DataFrame()\nP = [col for col in raw.columns if 'Peacock' in col]\npeacock[P] = raw[P]\n\nmoose = pd.DataFrame()\nM = [col for col in raw.columns if 'Moose' in col]\nmoose[M] = raw[M]\n \nbull = pd.DataFrame()\nB = [col for col in raw.columns if 'Bull' in col]\nbull[B] = raw[B]\n\nhog = pd.DataFrame()\nH = [col for col in raw.columns if 'Hog' in col]\nhog[H] = raw[H]\n\neagle = pd.DataFrame()\nE = [col for col in raw.columns if 'Eagle' in col]\neagle[E] = raw[E]\n\ncockatoo = pd.DataFrame()\nC = [col for col in raw.columns if 'Cockatoo' in col]\ncockatoo[C] = raw[C]\n\npanther = pd.DataFrame()\npan = [col for col in raw.columns if 'Panther' in col]\npanther[pan] = raw[pan]\n\nfox = pd.DataFrame()\nf = [col for col in raw.columns if 'Fox' in col]\nfox[f] = raw[f]\n\nbobcat = pd.DataFrame()\nbob = [col for col in raw.columns if 'Bobcat' in col]\nbobcat[bob] = raw[bob]\n\ncrow = pd.DataFrame()\ncr = [col for col in raw.columns if 'Crow' in col]\ncrow[cr] = raw[cr]\n\nsites = [peacock, moose, bull, hog, eagle, cockatoo, panther, fox, bobcat, crow]","6b9ef372":"panther.head(3)","bbdd3a02":"crow.head(2)","ba91f3f3":"eagle.head(2)","6c5062cd":"bobcat.head(2)","05faeaee":"panther.plot()","22e5f706":"eagle.plot()","ed793ab7":"#summing the total chilled water consumption per week\nfor site in sites:\n    site[\"Chilled_sum\"] = site.sum(axis = 1)","0c9175c2":"#checking sum correct\neagle.head(3)","3232508f":"bull.shape","8d3ab25c":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet\n\nfrom sklearn import metrics\n\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import SCORERS\n\nimport datetime as dt\n\nfrom sklearn.tree import DecisionTreeRegressor\n\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV","171e10f9":"#splitting df for a site into train and test sets\nmodel_panther = panther.copy()\n\ntrain = model_panther.iloc[0:(len(model_panther)-30)]\ntest = model_panther.iloc[len(train):(len(model_panther)-1)]","fc9fa660":"test.plot()","1a3ff9e7":"#checking if stationary or not \nfrom statsmodels.tsa.stattools import adfuller\n\nresult = adfuller(panther[\"Chilled_sum\"])\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])\nprint('Critical Values:')\nfor key, value in result[4].items():\n\tprint('\\t%s: %.3f' % (key, value))","c9ea5766":"import statsmodels.api as sm\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom matplotlib import pyplot as plt","e88c9f84":"endog = train[\"Chilled_sum\"]\n\nmod = sm.tsa.statespace.SARIMAX(endog=endog)\nmodel_fit = mod.fit()\nmodel_fit.summary()","14cefda6":"train['Chilled_sum'].plot(figsize=(25,10))\nmodel_fit.fittedvalues.plot()\nplt.show()","bc895e04":"predict = model_fit.predict(start = len(train),end = len(train)+len(test)-1)\ntest['predicted'] = predict.values\ntest.tail(5)\n","88196e4b":"test['predicted'].plot(color = 'red')\ntest[\"Chilled_sum\"].plot()","da768aa6":"testing some of the site df's","be88c8d9":"P-value bigger than .05 threshold, so data is non-stationary. It has some time dependent structure.","cb0d1797":"so do we differentiate so p< .05?"}}