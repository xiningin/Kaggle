{"cell_type":{"f2eb61a3":"code","5def4c76":"code","81b05e4a":"code","4b19c697":"code","5248a24f":"code","52c0ba0e":"code","428af223":"code","14df80b5":"code","8e0dc20a":"code","901411c7":"code","4a439b98":"code","7ae29a28":"code","acb577f9":"code","2a59e68a":"code","808611fe":"code","c53b8ea3":"code","008eaf74":"code","271d4a0b":"code","22262180":"code","b05bd6dc":"code","5e2f285e":"markdown","8ed589ce":"markdown","6ba27211":"markdown","59a693ef":"markdown","2b4809c1":"markdown","6745b35b":"markdown","a1d3c728":"markdown","ce9f90bd":"markdown","35abd950":"markdown","95eb90b1":"markdown","ac43b3c5":"markdown","6bbd3009":"markdown","a86bfdc5":"markdown","006da5ba":"markdown","e7ca8139":"markdown","7a1c9890":"markdown"},"source":{"f2eb61a3":"!pip install noisereduce","5def4c76":"import os\nimport shutil\nimport  joblib\nimport numpy as np\nimport pandas as pd\nimport librosa as lb\nimport librosa.display\nimport matplotlib.pyplot as plt\n\nfrom pathlib import Path\nfrom tqdm.notebook import tqdm\nimport IPython.display\n\nimport noisereduce as nr\nfrom matplotlib import pyplot as plt\nfrom scipy.ndimage import maximum_filter1d","81b05e4a":"DATA_ROOT = Path(\"..\/input\/rfcx-species-audio-detection\")\nTRAIN_AUDIO_ROOT = Path(\"..\/input\/rfcx-species-audio-detection\/train\")\nTEST_AUDIO_ROOT = Path(\"..\/input\/rfcx-species-audio-detection\/test\")","4b19c697":"df_train = pd.DataFrame({\n    \"recording_id\": [path.stem for path in Path(TRAIN_AUDIO_ROOT).glob(\"*.flac\")],\n})\n\ndf_test = pd.DataFrame({\n    \"recording_id\": [path.stem for path in Path(TEST_AUDIO_ROOT).glob(\"*.flac\")],\n})","5248a24f":"class params:\n    \"\"\"\n    Parameters used for the audio data\n    \"\"\"\n    sr = 32000\n\n    # Melspectrogram\n    n_mels = 128\n    fmin = 20\n    fmax = sr \/\/ 2  # Shannon theorem","52c0ba0e":"def load_audio(record, sr=16000, root=\"\"):\n    y, _ = lb.load(\n        root.joinpath(record).with_suffix(\".flac\").as_posix(),\n        sr=sr, \n    )\n    return y","428af223":"def compute_melspec(y, params):\n    \"\"\"\n    Computes a mel-spectrogram and puts it at decibel scale\n    Arguments:\n        y {np array} -- signal\n        params {AudioParams} -- Parameters to use for the spectrogram. Expected to have the attributes sr, n_mels, f_min, f_max\n    Returns:\n        np array -- Mel-spectrogram\n    \"\"\"\n    melspec = lb.feature.melspectrogram(\n        y, sr=params.sr, n_mels=params.n_mels, fmin=params.fmin, fmax=params.fmax,\n    )\n\n    melspec = lb.power_to_db(melspec).astype(np.float32)\n    return melspec","14df80b5":"y = load_audio(df_train[\"recording_id\"][0], params.sr, TRAIN_AUDIO_ROOT)\nIPython.display.Audio(y, rate=params.sr)","8e0dc20a":"def envelope(y, rate, threshold):\n    mask = []\n    y_mean = maximum_filter1d(np.abs(y), mode=\"constant\", size=rate\/\/20)\n    for mean in y_mean:\n        if mean > threshold:\n            mask.append(True)\n        else:\n            mask.append(False)\n    return mask, y_mean","901411c7":"thr = 0.25\nmask, env = envelope(y, params.sr, thr)\n\nplt.plot(y[mask], label=\"birdcall\")\nplt.plot(y[np.logical_not(mask)], label=\"noise\")\nplt.legend(bbox_to_anchor=(1, 1), loc='upper right')","4a439b98":"y_denoise = nr.reduce_noise(audio_clip=y, noise_clip=y[np.logical_not(mask)], verbose=True)","7ae29a28":"def tmp_audio_to_spec(audio, sr):\n    spec = librosa.power_to_db(\n        librosa.feature.melspectrogram(audio, sr=sr, fmin=20, fmax=16000, n_mels=128)\n    )\n    return spec.astype(np.float32)\n\nplt.figure(figsize=(16, 8))\nplt.imshow(tmp_audio_to_spec(y, params.sr))\nplt.show()\n\nplt.figure(figsize=(16, 8))\nplt.imshow(tmp_audio_to_spec(y_denoise, params.sr))\nplt.show()","acb577f9":"def load_and_save_train(record):\n    y = load_audio(record, params.sr, TRAIN_AUDIO_ROOT)\n    # denoise\n    mask, env = envelope(y, 32000, thr)\n    noise_clip = y[np.logical_not(mask)]\n    if len(noise_clip):\n        y = nr.reduce_noise(audio_clip=y, noise_clip=noise_clip, verbose=False)\n    melspec = compute_melspec(y, params)\n\n    np.save(OUT_TRAIN + record + \".npy\", melspec)","2a59e68a":"OUT_TRAIN = 'train\/'\nos.mkdir(OUT_TRAIN)","808611fe":"_ = joblib.Parallel(n_jobs=8)(\n    joblib.delayed(load_and_save_train)(record) for record in tqdm(df_train['recording_id'].values)\n)","c53b8ea3":"shutil.make_archive(OUT_TRAIN, 'zip', OUT_TRAIN)\nshutil.rmtree(OUT_TRAIN)","008eaf74":"def load_and_save_test(record):\n    y = load_audio(record, params.sr, TEST_AUDIO_ROOT)\n    melspec = compute_melspec(y, params)\n\n    np.save(OUT_TEST + record + \".npy\", melspec)","271d4a0b":"OUT_TEST = 'test\/'\nos.mkdir(OUT_TEST)","22262180":"_ = joblib.Parallel(n_jobs=8)(\n    joblib.delayed(load_and_save_test)(record) for record in tqdm(df_test['recording_id'].values)\n)","b05bd6dc":"shutil.make_archive(OUT_TEST, 'zip', OUT_TEST)\nshutil.rmtree(OUT_TEST)","5e2f285e":"I use [noisereduce library](https:\/\/pypi.org\/project\/noisereduce\/).","8ed589ce":"compare original sound spectrum and denoise sound spectrum.","6ba27211":"## Test","59a693ef":"# Import Python Library","2b4809c1":"denoise and check denoise sound","6745b35b":"# Data","a1d3c728":"**This notebook made from [Theo Viel](https:\/\/www.kaggle.com\/theoviel)'s [notebook](https:\/\/www.kaggle.com\/theoviel\/spectrogram-generation) and [discussion](https:\/\/www.kaggle.com\/c\/rfcx-species-audio-detection\/discussion\/198048).**\nThanks.\n\n\nI try to remove noise by using the Sound Envelope from the [previous competition discussion](https:\/\/www.kaggle.com\/c\/birdsong-recognition\/discussion\/169582#946072).  \nThis notebook generates denoised spectrograms.  \nThe calculated dataset is [here](https:\/\/www.kaggle.com\/takamichitoda\/rfcx-denoise-melspec).","ce9f90bd":"## Denoise","35abd950":"I detect point no birdcall by using Sound Envelope.","95eb90b1":"# Tools","ac43b3c5":"# Example","6bbd3009":"# Install denoise library","a86bfdc5":"It seems that noise has been removed.","006da5ba":"# Main","e7ca8139":"## Train","7a1c9890":"original sound"}}