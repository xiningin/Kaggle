{"cell_type":{"b688aadc":"code","b7836e08":"code","e239bc97":"code","2eb78906":"code","0013404c":"code","73031fa1":"code","be712781":"code","87658624":"code","16ad4399":"code","c86c98c4":"code","ee24930a":"code","24e4398d":"code","0ccb140e":"code","d4edcd19":"code","b4b39054":"code","319eeb4a":"code","ee615317":"code","bd15fa90":"code","ab85ad82":"code","1b0f8d81":"code","80d80d57":"code","6819e590":"code","df826fd3":"code","fcc89c18":"code","3df97359":"code","04f8de63":"code","341141f8":"code","7a2a2e13":"code","b59ac23e":"code","90d28fce":"code","638068b2":"code","7cb7eb2e":"code","1a6b839b":"code","9db79208":"code","d88bf0c9":"code","e6827f07":"code","38dc034e":"code","6d11c667":"code","b5191013":"code","e4868c41":"code","282ab32b":"code","bb9c11bd":"code","0cc91096":"code","1d29eb1a":"code","33b9da18":"code","2276f4bb":"code","3484772a":"code","13734eb2":"code","39651151":"code","c0c0301e":"code","09617254":"code","877f4913":"code","35f797f0":"code","a600dc82":"code","996ed141":"code","d6bdba5d":"code","0ff6bf84":"code","a382825d":"code","4d4d422c":"code","76194845":"code","f156c778":"code","5477a0fb":"code","1c568d6e":"code","5b4ee135":"code","084bf72b":"code","499924dd":"code","9c767e5a":"code","2cd90748":"code","44f6b341":"code","312ee53a":"code","82910b2e":"code","4683e306":"code","fe9c8585":"code","4483f937":"code","dc2c8d7c":"code","46fa883c":"code","26baaf9e":"code","7c74735a":"code","bdc67ace":"code","677b9457":"code","52234386":"code","452849f4":"code","138ad35a":"code","daa1eccf":"code","f9476c2d":"code","a53b83ee":"code","ec162583":"code","f123eb80":"code","e7257ab3":"code","7d1abdb0":"code","76b843f0":"code","a1eaa8e6":"code","20d76374":"code","1b91b1ea":"code","8a11077a":"code","2f22ed76":"code","74d19ae2":"code","5137d5c5":"code","afba9092":"code","9aa76722":"code","bf6ca79b":"code","af39f363":"code","fe79e668":"code","56fbb3d3":"code","084f9f58":"code","4db12834":"code","47d37494":"code","8cc365f6":"code","a654052f":"code","eee895fa":"code","032a7f7f":"code","8a74bf17":"code","b368fcb0":"code","77d34317":"code","16307379":"code","283a6d75":"code","d37b6e78":"code","d4957ba9":"code","fe6091fd":"code","19fd26eb":"code","c622c0e9":"code","51a821ba":"code","1754a21e":"code","d1e72c7d":"code","f027d717":"code","de2ec279":"code","ffe7c8c7":"code","ea74b558":"code","de0c54e3":"code","fdcd1f33":"code","3cf0a250":"code","d6e132e6":"code","ebd17ae8":"code","f08c4592":"code","7509adad":"code","a11e1be8":"code","eb3fe923":"code","8b964f90":"code","904cf96a":"code","584dabc2":"code","a99e6503":"code","d0a2124e":"code","8146bbcb":"code","a5565b71":"code","a1c57295":"code","f6535950":"code","04feb589":"code","029d269d":"code","ae6ed82f":"code","9aa98664":"code","d4e01e3a":"code","7f7ad755":"code","36a7f580":"code","5f86a904":"code","0b32328c":"code","02c0745a":"code","2537ba70":"code","e5b53e5e":"code","70bd03e7":"code","a6b6e4cc":"code","0081fc58":"code","ec8ef8be":"code","adcb71f0":"code","ccd7c924":"code","cbb112d5":"code","194142ee":"code","b6e3462b":"code","f0c5f2b7":"code","4be66844":"code","799d5983":"code","5810b6f5":"code","4e9da31a":"code","e3aa0c9c":"code","04b8b054":"code","4674f8de":"code","da6e8398":"code","08264853":"code","5e935cfc":"code","5ebd4d44":"code","7d6acfe4":"code","e0b84b9a":"code","6b132988":"code","7a4180fc":"code","cd25b463":"code","5c2d9cf0":"code","bc7f49c2":"code","6cfcf2b8":"code","76189d96":"code","2c724401":"code","65bfd93b":"code","3cac3152":"code","144d0b77":"code","080d21d8":"code","8ba1dc82":"code","7ddbd050":"code","ab045c88":"code","94880cad":"code","144d44f9":"code","21ba06ca":"code","7bbc2aae":"code","5946d41e":"code","37b78d65":"code","f9cd7d50":"code","7e7946e1":"code","cec0712b":"code","399bba91":"code","d8c7a20b":"code","66e7a144":"code","2f1dbdf0":"code","1d38809c":"code","572a8e53":"code","7b6a0bb3":"code","c753011b":"code","4832b1b6":"code","1c24578e":"code","692b4df3":"code","921dd0e9":"code","39edd64e":"code","1364d16c":"code","d2f35c77":"code","966b2f2b":"code","92ebea34":"code","340a5e89":"code","ecd6cf06":"code","2e3bef9b":"code","957a5fd4":"code","8448e193":"code","76b38d25":"code","117059c6":"code","183283e6":"code","421ddce0":"code","39ba5efd":"code","9e1ea0f5":"code","f77bd311":"code","898029d0":"code","c740b787":"code","e2389359":"code","10763eb9":"code","c0e38c68":"code","345b7285":"code","1b4240a8":"code","8cdc0630":"code","a4a0061f":"code","db203420":"code","4cdd2d54":"code","a20d56e7":"code","99751d41":"code","9e5c3559":"code","2e683994":"code","91fd65f3":"code","478ba58f":"code","2fa7ca15":"code","593941d3":"code","8148569d":"code","ade5acc8":"code","429c1b12":"code","1a939848":"code","d6449d58":"code","f65e093d":"code","0ba385c2":"code","e520cb2d":"code","2220cb86":"code","0275d277":"code","61b8939c":"code","bd88164b":"code","1da4cf4d":"code","9b275e04":"code","ea51233b":"code","fbb173a8":"code","44bf5d27":"code","61861667":"code","745b7b8a":"code","7b23fefc":"markdown","15dcdb83":"markdown","23bb6b92":"markdown","fdd634ed":"markdown","e20736df":"markdown","50655ebc":"markdown","56eb812e":"markdown","4436a3cf":"markdown","73be573c":"markdown","cc8c3105":"markdown","879be8d1":"markdown","f69329c3":"markdown","785d0c1e":"markdown","447f9957":"markdown","1dfb9d9e":"markdown","9899f429":"markdown","56dd992a":"markdown","29f12954":"markdown","ea7db5bd":"markdown","2d3bb7c4":"markdown","1c5e27d2":"markdown","8a868ea5":"markdown","0a70dbb0":"markdown","f9ac731f":"markdown","707914fa":"markdown","7c8b941c":"markdown","6a695986":"markdown","8fa4a569":"markdown","8f848b5b":"markdown","45ac212e":"markdown","44364588":"markdown","c0498309":"markdown","1bbf188f":"markdown","60dc2cfd":"markdown","69005aed":"markdown","c2118ef5":"markdown","56d6c617":"markdown","41b6a879":"markdown","18307241":"markdown","e65eee3b":"markdown","a1657b0c":"markdown","625a21c9":"markdown","2c55c1cf":"markdown","0b48a4a1":"markdown","40a0b33a":"markdown","a2c39de0":"markdown","01ff34d8":"markdown","a4c224f6":"markdown","73666a77":"markdown","0fa87980":"markdown","c6906930":"markdown","1860031d":"markdown","bc504764":"markdown","384ecee2":"markdown","a48981c6":"markdown","f3aed102":"markdown","81f144fe":"markdown","4bbd9d87":"markdown","f45122bf":"markdown","b7fc9218":"markdown","28bf21cb":"markdown","7e2fd8d0":"markdown","628b9952":"markdown","84f1d978":"markdown","5eaa5d3c":"markdown","7cb5d492":"markdown","1725a1ea":"markdown","1da0b310":"markdown","ab9dbeb0":"markdown","73812dc8":"markdown","91aef95c":"markdown","fccbab9f":"markdown","19fabfc8":"markdown","6ceaab58":"markdown","f99ac185":"markdown","13cfb942":"markdown","1ba2deaf":"markdown","292d671d":"markdown","70fabfb4":"markdown","644c111b":"markdown","622620bd":"markdown","0e7ad2bb":"markdown","f31c170b":"markdown","19b09169":"markdown","74eb3561":"markdown","fef1fcff":"markdown","d4ddb2ea":"markdown","136fd59e":"markdown","2c759791":"markdown","abf4f784":"markdown","1dbbf53e":"markdown","5e886ff8":"markdown","7e98916e":"markdown","bc1abbab":"markdown","494482b3":"markdown","b0cafee9":"markdown","ee4ba7fc":"markdown"},"source":{"b688aadc":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n","b7836e08":"df_conf = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_confirmed.csv\")","e239bc97":"df_conf.head()","2eb78906":"df_conf[\"Country\/Region\"].unique()","0013404c":"conf_Italy = df_conf[df_conf[\"Country\/Region\"] == \"Italy\"]\nconf_Italy = conf_Italy.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\n# Select data from 31st Jan\nconf_Italy = conf_Italy.loc[:,'1\/31\/20':]\nconf_Italy = pd.Series(data=conf_Italy.iloc[0].values,index=pd.to_datetime(conf_Italy.columns))\nconf_Italy.head()","73031fa1":"plt.figure(figsize=(20,6))\nplt.plot(conf_Italy.index,conf_Italy.values)\nplt.title(\"Number of confirmed cases in Italy timeline\")","be712781":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(conf_Italy.index,conf_Italy.values)\nplt.xticks(conf_Italy.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 5000),rotation=90)\nplt.title(\"Number of confirmed cases in Italy timeline bar plot\")","87658624":"conf_Italy_pday = np.ones(len(conf_Italy))\nconf_Italy_pday[0] = conf_Italy[0]\nfor i in range(1,len(conf_Italy)):\n    conf_Italy_pday[i] = conf_Italy[i] - conf_Italy[i-1]\nconf_Italy_pday = pd.Series(data=conf_Italy_pday,index = conf_Italy.index)\nconf_Italy_pday.head()","16ad4399":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(conf_Italy_pday.index,conf_Italy_pday.values)\nplt.xticks(conf_Italy_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 100),rotation=90)\nplt.title(\"Number of confirmed cases per day in Italy\")","c86c98c4":"conf_US = df_conf[df_conf[\"Country\/Region\"] == \"US\"]\nconf_US = conf_US.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\nconf_US = pd.Series(data=conf_US.iloc[0].values,index=pd.to_datetime(conf_US.columns))\nconf_US.head()","ee24930a":"plt.figure(figsize=(20,6))\nplt.plot(conf_US.index,conf_US.values)\nplt.title(\"Number of confirmed cases in US timeline\")","24e4398d":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(conf_US.index,conf_US.values)\nplt.xticks(conf_US.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 10000),rotation=90)\nplt.title(\"Number of confirmed cases in US timeline bar plot\")","0ccb140e":"conf_US_pday = np.ones(len(conf_US))\nconf_US_pday[0] = conf_US[0]\nfor i in range(1,len(conf_US)):\n    conf_US_pday[i] = conf_US[i] - conf_US[i-1]\nconf_US_pday = pd.Series(data=conf_US_pday,index = conf_US.index)\nconf_US_pday.head()","d4edcd19":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(conf_US_pday.index,conf_US_pday.values)\nplt.xticks(conf_US_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 1000),rotation=90)\nplt.title(\"Number of confirmed cases per day in US\")","b4b39054":"conf_SK = df_conf[df_conf[\"Country\/Region\"] == \"Korea, South\"]\nconf_SK = conf_SK.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\nconf_SK = pd.Series(data=conf_SK.iloc[0].values,index=pd.to_datetime(conf_SK.columns))\nconf_SK.head()","319eeb4a":"plt.figure(figsize=(20,6))\nplt.plot(conf_SK.index,conf_SK.values)\nplt.title(\"Number of confirmed cases in South Korea timeline\")","ee615317":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(conf_SK.index.date,conf_SK.values)\nplt.xticks(conf_SK.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 500),rotation=90)\nplt.title(\"Number of confirmed cases in SK timeline bar plot\")","bd15fa90":"conf_SK_pday = np.ones(len(conf_US))\nconf_SK_pday[0] = conf_SK[0]\nfor i in range(1,len(conf_SK)):\n    conf_SK_pday[i] = conf_SK[i] - conf_SK[i-1]\nconf_SK_pday = pd.Series(data=conf_SK_pday,index = conf_SK.index)\nconf_SK_pday.head()","ab85ad82":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(conf_SK_pday.index.date,conf_SK_pday.values)\nplt.xticks(conf_SK_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 10),rotation=90)\nplt.title(\"Number of confirmed cases per day in South Korea\")","1b0f8d81":"conf_Ind = df_conf[df_conf[\"Country\/Region\"] == \"India\"]\nconf_Ind = conf_Ind.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\n# Select from 31st Jan\nconf_Ind = conf_Ind.loc[:,'1\/31\/20':]\nconf_Ind = pd.Series(data=conf_Ind.iloc[0].values,index=pd.to_datetime(conf_Ind.columns))\n\nconf_Ind.head()","80d80d57":"plt.figure(figsize=(20,6))\nplt.plot(conf_Ind.index,conf_Ind.values)\nplt.title(\"Number of confirmed cases in India timeline\")","6819e590":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(conf_Ind.index.date,conf_Ind.values)\nplt.xticks(conf_Ind.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 100),rotation=90)\nplt.title(\"Number of confirmed cases in India timeline bar plot\")","df826fd3":"conf_Ind_pday = np.ones(len(conf_Ind))\nconf_Ind_pday[0] = conf_Ind[0]\nfor i in range(1,len(conf_Ind)):\n    conf_Ind_pday[i] = conf_Ind[i] - conf_Ind[i-1]\nconf_Ind_pday = pd.Series(data=conf_Ind_pday,index = conf_Ind.index)\nconf_Ind_pday.head()","fcc89c18":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(conf_Ind_pday.index.date,conf_Ind_pday.values)\nplt.xticks(conf_Ind_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 50),rotation=90)\nplt.title(\"Number of confirmed cases per day in India\")","3df97359":"conf_world = df_conf.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\nconf_world = conf_world.sum()\nconf_world.index = pd.to_datetime(conf_world.index)\nconf_world.head()","04f8de63":"plt.figure(figsize=(20,6))\nplt.plot(conf_world.index,conf_world.values)\nplt.title(\"Number of confirmed cases in world timeline\")","341141f8":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(conf_world.index.date,conf_world.values)\nplt.xticks(conf_world.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 50000),rotation=90)\nplt.title(\"Number of confirmed cases in world timeline bar plot\")","7a2a2e13":"conf_world_pday = np.ones(len(conf_world))\nconf_world_pday[0] = conf_world[0]\nfor i in range(1,len(conf_world)):\n    conf_world_pday[i] = conf_world[i] - conf_world[i-1]\nconf_world_pday = pd.Series(data=conf_world_pday,index = conf_world.index)\nconf_world_pday.head()","b59ac23e":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(conf_world_pday.index.date,conf_world_pday.values)\nplt.xticks(conf_world.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 3000),rotation=90)\nplt.title(\"Number of confirmed cases per day in world\")","90d28fce":"import statsmodels.api as sm\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dense, TimeDistributed, ConvLSTM2D, Flatten, MaxPooling1D\nfrom keras.layers import Dropout, Activation\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport plotly.offline as py\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\nfrom sklearn.metrics import mean_squared_error as mse\n","638068b2":"x = np.arange(len(conf_world)).reshape(-1,1)\ny = conf_world.values","7cb7eb2e":"from sklearn.neural_network import MLPRegressor\nmodel = MLPRegressor(hidden_layer_sizes=[32, 32, 10], max_iter=50000, alpha=0.0005, random_state=26)\nmodel.fit(x, y)","1a6b839b":"# Compare prediction for current values with actual\nfrom datetime import timedelta\ntest = np.arange(len(x)).reshape(-1, 1)\npred = model.predict(test)\npred = pred.round().astype(int)\npred_time = [conf_world.index[0] + timedelta(days=i) for i in range(len(pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(pred,pred_time)","9db79208":"plt.figure(figsize=(20,6))\nplt.plot(conf_world.index,conf_world.values)\nplt.plot(prediction.index,prediction.values)\nplt.title(\"Actual count vs Predicted count\")\nplt.legend([\"actual count\",\"predicted count\"])\nplt.show()","d88bf0c9":"err = mse(conf_world.values, prediction.values)\nprint(\"Training mean squared error = {}\".format(err))","e6827f07":"# Forecast future count\nfuture = np.arange(len(x),len(x)+90).reshape(-1, 1)\nfuture_pred = model.predict(future)\nfuture_pred = future_pred.round().astype(int)\npred_time = [conf_world.index[-1] + timedelta(days=i) for i in range(len(future_pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(future_pred,pred_time)\nprediction","38dc034e":"plt.figure(figsize=(20,6))\nplt.plot(prediction.index,prediction.values)\nplt.title(\"Future count forecast\")\nplt.legend([\"future count\"])\nplt.show()","6d11c667":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(prediction.index,prediction.values)\nplt.xticks(prediction.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 100000),rotation=90)\nplt.title(\"Future count\")","b5191013":"x = np.arange(len(conf_world_pday)).reshape(-1,1)\ny = conf_world_pday.values","e4868c41":"model = MLPRegressor(hidden_layer_sizes=[35, 40,10], max_iter=50000, alpha=0.0005, random_state=26)\nmodel.fit(x, y)","282ab32b":"test = np.arange(len(x)).reshape(-1, 1)\npred = model.predict(test)\npred = pred.round().astype(int)\npred_time = [conf_world_pday.index[0] + timedelta(days=i) for i in range(len(pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(pred,pred_time)","bb9c11bd":"plt.figure(figsize=(20,6))\nplt.plot(conf_world_pday.index,conf_world_pday.values)\nplt.plot(prediction.index,prediction.values)\nplt.title(\"Actual count vs Predicted count\")\nplt.legend([\"actual count\",\"predicted count\"])\nplt.show()","0cc91096":"# Forecast future count\nfuture = np.arange(len(x),len(x)+90).reshape(-1, 1)\nfuture_pred = model.predict(future)\nfuture_pred = future_pred.round().astype(int)\npred_time = [conf_world_pday.index[-1] + timedelta(days=i) for i in range(len(future_pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(future_pred,pred_time)","1d29eb1a":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(prediction.index,prediction.values)\nplt.xticks(prediction.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 1000),rotation=90)\nplt.title(\"Future count\")","33b9da18":"pr_data= pd.DataFrame(conf_world)\npr_data = pr_data.reset_index()\npr_data.columns = ['ds','y']\npr_data.head()","2276f4bb":"pr_data['y'] = np.log(pr_data['y'] + 1)\nm=Prophet()\nm.fit(pr_data)\n","3484772a":"# compare actual vs predicted\npred_date = pd.DataFrame(conf_world.index)\npred_date.columns = ['ds']\npred = m.predict(pred_date)\npred['yhat'] = np.exp(pred['yhat']) - 1\nplt.figure(figsize=(20,6))\nplt.plot(conf_world.index, pred.yhat)\nplt.plot(conf_world.index, conf_world.values)\nplt.legend(['predicted count','actual count'])\nplt.show()","13734eb2":"err = mse(conf_world.values, pred.yhat)\nprint(\"Training mean squared error = {}\".format(err))","39651151":"future=pd.DataFrame([conf_world.index[-1] + timedelta(i+1) for i in range(100)])\nfuture.columns = ['ds']\nforecast=m.predict(future)\nforecast['yhat'] = np.exp(forecast['yhat']) - 1\nforecast","c0c0301e":"plt.figure(figsize=(20,6))\nplt.plot(forecast.ds, forecast.yhat)\nplt.title(\"Future counts\")\nplt.show()","09617254":"figure = plot_plotly(m, forecast)\npy.iplot(figure,image_width=800) \nfigure = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","877f4913":"pr_data= pd.DataFrame(conf_world_pday)\npr_data = pr_data.reset_index()\npr_data.columns = ['ds','y']\npr_data.head()","35f797f0":"pr_data['y'] = np.log(pr_data['y'] + 1)\nm=Prophet()\nm.fit(pr_data)","a600dc82":"# compare actual vs predicted\npred_date = pd.DataFrame(conf_world_pday.index)\npred_date.columns = ['ds']\npred = m.predict(pred_date)\npred['yhat'] = np.exp(pred['yhat']) - 1\nplt.figure(figsize=(20,6))\nplt.plot(conf_world_pday.index, pred.yhat)\nplt.plot(conf_world_pday.index, conf_world_pday.values)\nplt.legend(['predicted count','actual count'])\nplt.show()","996ed141":"future=pd.DataFrame([conf_world_pday.index[-1] + timedelta(i+1) for i in range(100)])\nfuture.columns = ['ds']\nforecast=m.predict(future)\nforecast['yhat'] = np.exp(forecast['yhat']) - 1\nforecast","d6bdba5d":"plt.figure(figsize=(20,6))\nplt.plot(forecast.ds, forecast.yhat)\nplt.title(\"Future counts\")\nplt.show()","0ff6bf84":"figure = plot_plotly(m, forecast)\npy.iplot(figure,image_width=800) \nfigure = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count per day')\n","a382825d":"confirm_cs = pd.DataFrame(conf_world)\narima_data = confirm_cs.reset_index()\narima_data.columns = ['confirmed_date','count']\narima_data.head()","4d4d422c":"!pip install pmdarima","76194845":"from pmdarima import auto_arima\n\nstepwise_fit = auto_arima(arima_data['count'], start_p = 1, start_q = 1, \n                          max_p = 3, max_q = 3, m = 12, \n                          start_P = 0, seasonal = True, \n                          d = None, D = 1, trace = True, \n                          error_action ='ignore',    \n                          suppress_warnings = True,  \n                          stepwise = True)           \nstepwise_fit.summary()","f156c778":"#model = ARIMA(arima_data['count'].values, order=(1, 2, 1))\nmodel= SARIMAX(arima_data['count'],order=(1,2,0),seasonal_order=(0,1,1,12)) #Change the model as per the result of above as the dataset is updated\nfit_model = model.fit(full_output=True, disp=True)\nfit_model.summary()","5477a0fb":"plt.figure(figsize=(20,6))\npred = fit_model.predict(0,len(arima_data)-1)\nplt.plot(arima_data.confirmed_date,pred)\nplt.plot(arima_data.confirmed_date,arima_data['count'])\nplt.title('Forecast vs Actual')\n","1c568d6e":"err = mse(conf_world.values, pred)\nprint(\"Training mean squared error = {}\".format(err))","5b4ee135":"forcast = fit_model.forecast(steps=90)\npred_y = forcast\nplt.figure(figsize=(20,6))\nplt.plot(pd.to_datetime([conf_world.index[-1] + timedelta(days=i) for i in range(len(pred_y))]),pred_y)\nplt.show()","084bf72b":"confirm_cs = pd.DataFrame(conf_world_pday)\narima_data = confirm_cs.reset_index()\narima_data.columns = ['confirmed_date','count']\narima_data.head()","499924dd":"stepwise_fit = auto_arima(arima_data['count'], start_p = 1, start_q = 1, \n                          max_p = 3, max_q = 3, m = 12, \n                          start_P = 0, seasonal = True, \n                          d = None, D = 1, trace = True, \n                          error_action ='ignore',    \n                          suppress_warnings = True,  \n                          stepwise = True)           \nstepwise_fit.summary()","9c767e5a":"#model = ARIMA(arima_data['count'].values, order=(2, 1, 2))\nmodel= SARIMAX(arima_data['count'],order=(1,1,0),seasonal_order=(0,1,1,12)) # Change the order as per above result\nfit_model = model.fit(full_output=True, disp=True)\nfit_model.summary()","2cd90748":"plt.figure(figsize=(20,6))\npred = fit_model.predict(0,len(arima_data)-1)\nplt.plot(arima_data.confirmed_date,pred)\nplt.plot(arima_data.confirmed_date,arima_data['count'])\nplt.legend(['forecast','actual'])\nplt.title('Forecast vs Actual')","44f6b341":"forcast = fit_model.forecast(steps=90)\npred_y = forcast\n_,ax = plt.subplots(figsize=(20,6))\nplt.bar(pd.to_datetime([conf_world.index[-1] + timedelta(days=i) for i in range(len(pred_y))]),pred_y)\nplt.xticks(prediction.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height().round().astype(int)), (p.get_x() , p.get_height() + 10000),rotation=90)\nplt.show()","312ee53a":"df_death = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_deaths.csv\")","82910b2e":"df_death.head()","4683e306":"df_death[\"Country\/Region\"].unique()","fe9c8585":"conf_Italy = df_death[df_death[\"Country\/Region\"] == \"Italy\"]\nconf_Italy = conf_Italy.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\n# Select data from 31st Jan\nconf_Italy = conf_Italy.loc[:,'1\/31\/20':]\nconf_Italy = pd.Series(data=conf_Italy.iloc[0].values,index=pd.to_datetime(conf_Italy.columns))\nconf_Italy.head()","4483f937":"plt.figure(figsize=(20,6))\nplt.plot(conf_Italy.index,conf_Italy.values)\nplt.title(\"Number of deaths in Italy timeline\")","dc2c8d7c":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(conf_Italy.index,conf_Italy.values)\nplt.xticks(conf_Italy.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 500),rotation=90)\nplt.title(\"Number of deaths in Italy timeline bar plot\")","46fa883c":"conf_Italy_pday = np.ones(len(conf_Italy))\nconf_Italy_pday[0] = conf_Italy[0]\nfor i in range(1,len(conf_Italy)):\n    conf_Italy_pday[i] = conf_Italy[i] - conf_Italy[i-1]\nconf_Italy_pday = pd.Series(data=conf_Italy_pday,index = conf_Italy.index)\nconf_Italy_pday.head()","26baaf9e":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(conf_Italy_pday.index,conf_Italy_pday.values)\nplt.xticks(conf_Italy_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 10),rotation=90)\nplt.title(\"Number of deaths per day in Italy\")","7c74735a":"conf_US = df_death[df_death[\"Country\/Region\"] == \"US\"]\nconf_US = conf_US.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\nconf_US = pd.Series(data=conf_US.iloc[0].values,index=pd.to_datetime(conf_US.columns))\nconf_US.head()","bdc67ace":"plt.figure(figsize=(20,6))\nplt.plot(conf_US.index,conf_US.values)\nplt.title(\"Number of deaths in US timeline\")","677b9457":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(conf_US.index,conf_US.values)\nplt.xticks(conf_US.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 1000),rotation=90)\nplt.title(\"Number of deaths in US timeline bar plot\")","52234386":"conf_US_pday = np.ones(len(conf_US))\nconf_US_pday[0] = conf_US[0]\nfor i in range(1,len(conf_US)):\n    conf_US_pday[i] = conf_US[i] - conf_US[i-1]\nconf_US_pday = pd.Series(data=conf_US_pday,index = conf_US.index)\nconf_US_pday.head()","452849f4":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(conf_US_pday.index,conf_US_pday.values)\nplt.xticks(conf_US_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 100),rotation=90)\nplt.title(\"Number of deaths per day in US\")","138ad35a":"conf_SK = df_death[df_death[\"Country\/Region\"] == \"Korea, South\"]\nconf_SK = conf_SK.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\nconf_SK = pd.Series(data=conf_SK.iloc[0].values,index=pd.to_datetime(conf_SK.columns))\nconf_SK.head()","daa1eccf":"plt.figure(figsize=(20,6))\nplt.plot(conf_SK.index,conf_SK.values)\nplt.title(\"Number of deaths in South Korea timeline\")","f9476c2d":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(conf_SK.index.date,conf_SK.values)\nplt.xticks(conf_SK.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 5),rotation=90)\nplt.title(\"Number of deaths in SK timeline bar plot\")","a53b83ee":"conf_SK_pday = np.ones(len(conf_US))\nconf_SK_pday[0] = conf_SK[0]\nfor i in range(1,len(conf_SK)):\n    conf_SK_pday[i] = conf_SK[i] - conf_SK[i-1]\nconf_SK_pday = pd.Series(data=conf_SK_pday,index = conf_SK.index)\nconf_SK_pday.head()","ec162583":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(conf_SK_pday.index.date,conf_SK_pday.values)\nplt.xticks(conf_SK_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height()+0.5),rotation=90)\nplt.title(\"Number of deaths per day in South Korea\")","f123eb80":"conf_Ind = df_death[df_death[\"Country\/Region\"] == \"India\"]\nconf_Ind = conf_Ind.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\n# Select from 31st Jan\nconf_Ind = conf_Ind.loc[:,'1\/31\/20':]\nconf_Ind = pd.Series(data=conf_Ind.iloc[0].values,index=pd.to_datetime(conf_Ind.columns))\n\nconf_Ind.head()","e7257ab3":"plt.figure(figsize=(20,6))\nplt.plot(conf_Ind.index,conf_Ind.values)\nplt.title(\"Number of deaths in India timeline\")","7d1abdb0":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(conf_Ind.index.date,conf_Ind.values)\nplt.xticks(conf_Ind.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 10),rotation=90)\nplt.title(\"Number of deaths in India timeline bar plot\")","76b843f0":"conf_Ind_pday = np.ones(len(conf_Ind))\nconf_Ind_pday[0] = conf_Ind[0]\nfor i in range(1,len(conf_Ind)):\n    conf_Ind_pday[i] = conf_Ind[i] - conf_Ind[i-1]\nconf_Ind_pday = pd.Series(data=conf_Ind_pday,index = conf_Ind.index)\nconf_Ind_pday.head()","a1eaa8e6":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(conf_Ind_pday.index.date,conf_Ind_pday.values)\nplt.xticks(conf_Ind_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 0.5),rotation=90)\nplt.title(\"Number of deaths per day in India\")","20d76374":"death_world = df_death.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\ndeath_world = death_world.sum()\ndeath_world.index = pd.to_datetime(death_world.index)\ndeath_world.head()","1b91b1ea":"plt.figure(figsize=(20,6))\nplt.plot(death_world.index,death_world.values)\nplt.title(\"Number of deaths in world timeline\")","8a11077a":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(death_world.index.date,death_world.values)\nplt.xticks(death_world.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 5000),rotation=90)\nplt.title(\"Number of deaths in world timeline bar plot\")","2f22ed76":"death_world_pday = np.ones(len(conf_world))\ndeath_world_pday[0] = conf_world[0]\nfor i in range(1,len(conf_world)):\n    conf_world_pday[i] = conf_world[i] - conf_world[i-1]\ndeath_world_pday = pd.Series(data=conf_world_pday,index = conf_world.index)\ndeath_world_pday.head()","74d19ae2":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(death_world_pday.index.date,death_world_pday.values)\nplt.xticks(death_world.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 300),rotation=90)\nplt.title(\"Number of deaths per day in world\")","5137d5c5":"import statsmodels.api as sm\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dense, TimeDistributed, Conv1D, Flatten, MaxPooling1D\nfrom keras.layers import Dropout, Activation\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport plotly.offline as py\nfrom statsmodels.tsa.arima_model import ARIMA\n","afba9092":"x = np.arange(len(death_world)).reshape(-1,1)\ny = death_world.values","9aa76722":"from sklearn.neural_network import MLPRegressor\nmodel = MLPRegressor(hidden_layer_sizes=[32, 32, 10], max_iter=50000, alpha=0.0005, random_state=26)\nmodel.fit(x, y)","bf6ca79b":"# Compare prediction for current values with actual\nfrom datetime import timedelta\ntest = np.arange(len(x)).reshape(-1, 1)\npred = model.predict(test)\npred = pred.round().astype(int)\npred_time = [death_world.index[0] + timedelta(days=i) for i in range(len(pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(pred,pred_time)","af39f363":"plt.figure(figsize=(20,6))\nplt.plot(death_world.index,death_world.values)\nplt.plot(prediction.index,prediction.values)\nplt.title(\"Actual count vs Predicted count\")\nplt.legend([\"actual count\",\"predicted count\"])\nplt.show()","fe79e668":"err = mse(death_world.values, prediction.values)\nprint(\"Training mean squared error = {}\".format(err))","56fbb3d3":"# Forecast future count\nfuture = np.arange(len(x),len(x)+90).reshape(-1, 1)\nfuture_pred = model.predict(future)\nfuture_pred = future_pred.round().astype(int)\npred_time = [death_world.index[-1] + timedelta(days=i) for i in range(len(future_pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(future_pred,pred_time)\nprediction","084f9f58":"plt.figure(figsize=(20,6))\nplt.plot(prediction.index,prediction.values)\nplt.title(\"Future count forecast\")\nplt.legend([\"future count\"])\nplt.show()","4db12834":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(prediction.index,prediction.values)\nplt.xticks(prediction.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 10000),rotation=90)\nplt.title(\"Future count\")","47d37494":"x = np.arange(len(death_world_pday)).reshape(-1,1)\ny = conf_world_pday.values","8cc365f6":"model = MLPRegressor(hidden_layer_sizes=[35, 40,10], max_iter=50000, alpha=0.0005, random_state=26)\nmodel.fit(x, y)","a654052f":"test = np.arange(len(x)+7).reshape(-1, 1)\npred = model.predict(test)\npred = pred.round().astype(int)\npred_time = [death_world_pday.index[0] + timedelta(days=i) for i in range(len(pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(pred,pred_time)","eee895fa":"plt.figure(figsize=(20,6))\nplt.plot(death_world_pday.index,conf_world_pday.values)\nplt.plot(prediction.index,prediction.values)\nplt.title(\"Actual count vs Predicted count\")\nplt.legend([\"actual count\",\"predicted count\"])\nplt.show()","032a7f7f":"# Forecast future count\nfuture = np.arange(len(x),len(x)+90).reshape(-1, 1)\nfuture_pred = model.predict(future)\nfuture_pred = future_pred.round().astype(int)\npred_time = [death_world_pday.index[-1] + timedelta(days=i) for i in range(len(future_pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(future_pred,pred_time)","8a74bf17":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(prediction.index,prediction.values)\nplt.xticks(prediction.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 1000),rotation=90)\nplt.title(\"Future count\")","b368fcb0":"pr_data= pd.DataFrame(death_world)\npr_data = pr_data.reset_index()\npr_data.columns = ['ds','y']\npr_data.head()","77d34317":"pr_data['y'] = np.log(pr_data['y'] + 1)\nm=Prophet()\nm.fit(pr_data)","16307379":"#compare actual vs predicted values\npred_dates = pd.DataFrame(death_world.index)\npred_dates.columns = ['ds']\npred = m.predict(pred_dates)\npred.yhat = np.exp(pred.yhat) - 1\nplt.figure(figsize=(20,6))\nplt.plot(pred.ds, pred.yhat)\nplt.plot(death_world.index,death_world.values)\nplt.title(\"Predicted vs Actual values\")\nplt.legend(['Predcted','Actual'])\nplt.show()","283a6d75":"err = mse(death_world.values, pred.yhat)\nprint(\"Training mean squared error = {}\".format(err))","d37b6e78":"future=pd.DataFrame([death_world.index[-1] + timedelta(i+1) for i in range(90)])\nfuture.columns = ['ds']\nforecast=m.predict(future)\nforecast['yhat'] = np.exp(forecast['yhat']) - 1\nforecast","d4957ba9":"plt.figure(figsize=(20,6))\nplt.plot(forecast.ds, forecast.yhat)\nplt.title(\"Future count\")\nplt.show()","fe6091fd":"figure = plot_plotly(m, forecast)\npy.iplot(figure,image_width=800) \nfigure = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","19fd26eb":"pr_data= pd.DataFrame(death_world_pday)\npr_data = pr_data.reset_index()\npr_data.columns = ['ds','y']\npr_data.head()","c622c0e9":"pr_data['y'] = np.log(pr_data['y'] + 1)\nm=Prophet()\nm.fit(pr_data)","51a821ba":"#compare actual vs predicted values\npred_dates = pd.DataFrame(death_world_pday.index)\npred_dates.columns = ['ds']\npred = m.predict(pred_dates)\npred.yhat = np.exp(pred.yhat) - 1\nplt.figure(figsize=(20,6))\nplt.plot(pred.ds, pred.yhat)\nplt.plot(death_world_pday.index,death_world_pday.values)\nplt.title(\"Predicted vs Actual values\")\nplt.legend(['Predcted','Actual'])\nplt.show()","1754a21e":"err = mse(death_world.values, pred.yhat)\nprint(\"Training mean squared error = {}\".format(err))","d1e72c7d":"\nfuture=pd.DataFrame([death_world_pday.index[-1] + timedelta(i+1) for i in range(90)])\nfuture.columns = ['ds']\nforecast=m.predict(future)\nforecast['yhat'] = np.exp(forecast['yhat']) - 1\nforecast","f027d717":"plt.figure(figsize=(20,6))\nplt.plot(forecast.ds, forecast.yhat)\nplt.title(\"Future count\")\nplt.show()","de2ec279":"figure = plot_plotly(m, forecast)\npy.iplot(figure,image_width=800) \nfigure = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count per day')\n","ffe7c8c7":"confirm_cs = pd.DataFrame(death_world)\narima_data = confirm_cs.reset_index()\narima_data.columns = ['confirmed_date','count']\narima_data.head()","ea74b558":"stepwise_fit = auto_arima(arima_data['count'], start_p = 1, start_q = 1, \n                          max_p = 3, max_q = 3, m = 12, \n                          start_P = 0, seasonal = True, \n                          d = None, D = 1, trace = True, \n                          error_action ='ignore',    \n                          suppress_warnings = True,  \n                          stepwise = True)           \nstepwise_fit.summary()","de0c54e3":"#model = ARIMA(arima_data['count'].values, order=(1, 2, 1))\nmodel= SARIMAX(arima_data['count'],order=(0,2,0),seasonal_order=(0,1,1,12))\nfit_model = model.fit(full_output=True, disp=True)\nfit_model.summary()","fdcd1f33":"plt.figure(figsize=(20,6))\npred = fit_model.predict(0,len(arima_data)-1)\nplt.plot(arima_data.confirmed_date,pred)\nplt.plot(arima_data.confirmed_date,arima_data['count'])\nplt.title('Forecast vs Actual')\n","3cf0a250":"err = mse(death_world.values, pred)\nprint(\"Training mean squared error = {}\".format(err))","d6e132e6":"forcast = fit_model.forecast(steps=90)\npred_y = forcast\nplt.figure(figsize=(20,6))\nplt.plot(pd.to_datetime([conf_world.index[-1] + timedelta(days=i) for i in range(len(pred_y))]),pred_y)\nplt.show()","ebd17ae8":"confirm_cs = pd.DataFrame(death_world_pday)\narima_data = confirm_cs.reset_index()\narima_data.columns = ['confirmed_date','count']\narima_data.head()","f08c4592":"stepwise_fit = auto_arima(arima_data['count'], start_p = 1, start_q = 1, \n                          max_p = 3, max_q = 3, m = 12, \n                          start_P = 0, seasonal = True, \n                          d = None, D = 1, trace = True, \n                          error_action ='ignore',    \n                          suppress_warnings = True,  \n                          stepwise = True)           \nstepwise_fit.summary()","7509adad":"model= SARIMAX(arima_data['count'],order=(1,1,0),seasonal_order=(0,1,1,12))\nfit_model = model.fit(full_output=True, disp=True)\nfit_model.summary()","a11e1be8":"plt.figure(figsize=(20,6))\npred = fit_model.predict(0,len(arima_data)-1)\nplt.plot(arima_data.confirmed_date,pred)\nplt.plot(arima_data.confirmed_date,arima_data['count'])\nplt.legend(['forecast','actual'])\nplt.title('Forecast vs Actual')","eb3fe923":"forcast = fit_model.forecast(steps=90)\npred_y = forcast\n_,ax = plt.subplots(figsize=(20,6))\nplt.bar(pd.to_datetime([conf_world.index[-1] + timedelta(days=i) for i in range(len(pred_y))]),pred_y)\nplt.xticks(prediction.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height().round().astype(int)), (p.get_x() , p.get_height() + 10000),rotation=90)\nplt.show()\n","8b964f90":"\ntrain_data = death_world.values.reshape(-1,1)\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler.fit(train_data)\nscaled_train_data = scaler.transform(train_data)","904cf96a":"# split a univariate sequence\ndef split_sequence(sequence, n_steps):\n    X, y = list(), list()\n    for i in range(len(sequence)):\n        # find the end of this pattern\n        end_ix = i + n_steps\n        # check if we are beyond the sequence\n        if end_ix > len(sequence)-1:\n            break\n        # gather input and output parts of the pattern\n        seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n    return np.array(X), np.array(y)\n","584dabc2":"n_input = 5\ntrain_x, train_y = split_sequence(scaled_train_data,n_input)\nn_features =1\ntrain_x = train_x.reshape((train_x.shape[0],train_x.shape[1],n_features))\n","a99e6503":"for i in range(len(train_x)):\n    print(train_x[i],train_y[i])","d0a2124e":"lstm_model = Sequential()\nlstm_model.add(LSTM(input_shape=(n_input, n_features),units=100,activation='relu',return_sequences=True))\n#lstm_model.add(Dropout(0.05))\nlstm_model.add(LSTM(128))\n#lstm_model.add(Dropout(0.05))\nlstm_model.add(Dense(1))\nlstm_model.compile(optimizer = 'adam', loss = 'mean_squared_error')\nlstm_model.fit(train_x,train_y, epochs = 200)","8146bbcb":"predicted_data = []\nbatch = scaled_train_data[:n_input].copy()\ncurrent_batch = batch.reshape((1, n_input, n_features))\nlstm_pred = lstm_model.predict(current_batch)[0]\nfor i in range(len(train_data)-5):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    print(current_batch,lstm_pred)\n    predicted_data.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)","a5565b71":"prediction = pd.Series(data=scaler.inverse_transform(predicted_data).reshape(1,-1)[0].round().astype(int),index=conf_world[5:].index)\nprediction","a1c57295":"death_world","f6535950":"plt.figure(figsize=(20,6))\nplt.plot(prediction.index,prediction.values)\nplt.plot(death_world[5:].index,conf_world[5:].values)\nplt.title(\"Prediction vs Actual count\")\nplt.legend([\"prediction\",\"actual\"])\nplt.show()","04feb589":"future_data = []\nbatch = scaled_train_data[:n_input].copy()\ncurrent_batch = batch.reshape((1, n_input, n_features))\nlstm_pred = lstm_model.predict(current_batch)[0]\nfor i in range(len(train_data)+115):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    future_data.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)","029d269d":"pred_ind = [conf_world_pday.index[0] + timedelta(days=i) for i in range(len(future_data))]\nprediction = pd.Series(data=scaler.inverse_transform(future_data).reshape(1,-1)[0].round().astype(int),index=pred_ind)\nprediction","ae6ed82f":"plt.figure(figsize=(20,6))\nplt.plot(prediction.index,prediction.values)\nplt.show()","9aa98664":"train_data = death_world_pday.values.reshape(-1,1)\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler.fit(train_data)\nscaled_train_data = scaler.transform(train_data)","d4e01e3a":"n_input = 5\ntrain_x, train_y = split_sequence(scaled_train_data,n_input)\nn_features =1\ntrain_x = train_x.reshape((train_x.shape[0],train_x.shape[1],n_features))\n","7f7ad755":"for i in range(len(train_x)):\n    print(train_x[i],train_y[i])","36a7f580":"lstm_model = Sequential()\nlstm_model.add(LSTM(input_shape=(n_input, n_features),units=50,activation='relu'))\n#lstm_model.add(Dropout(0.05))\n#lstm_model.add(LSTM(256))\n#lstm_model.add(Dropout(0.05))\nlstm_model.add(Dense(1))\nlstm_model.compile(optimizer = 'adam', loss = 'mean_squared_error')\nlstm_model.fit(train_x,train_y, epochs = 200)","5f86a904":"predicted_data = []\nbatch = scaled_train_data[:n_input].copy()\ncurrent_batch = batch.reshape((1, n_input, n_features))\nlstm_pred = lstm_model.predict(current_batch)[0]\nfor i in range(len(train_data)-5):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    print(current_batch,lstm_pred)\n    predicted_data.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)","0b32328c":"prediction = pd.Series(data=scaler.inverse_transform(predicted_data).reshape(1,-1)[0].round().astype(int),index=conf_world[5:].index)\nprediction","02c0745a":"plt.figure(figsize=(20,6))\nplt.plot(prediction.index,prediction.values)\nplt.plot(death_world_pday[5:].index,death_world_pday[5:].values)\nplt.title(\"Prediction vs Actual count\")\nplt.legend([\"prediction\",\"actual\"])\nplt.show()","2537ba70":"df_recov = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/time_series_covid_19_recovered.csv\")","e5b53e5e":"df_recov.head()","70bd03e7":"df_recov[\"Country\/Region\"].unique()","a6b6e4cc":"recov_Italy = df_recov[df_recov[\"Country\/Region\"] == \"Italy\"]\nrecov_Italy = recov_Italy.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\n# Select data from 31st Jan\nrecov_Italy = recov_Italy.loc[:,'1\/31\/20':]\nrecov_Italy = pd.Series(data=recov_Italy.iloc[0].values,index=pd.to_datetime(recov_Italy.columns))\nrecov_Italy.head()","0081fc58":"plt.figure(figsize=(20,6))\nplt.plot(recov_Italy.index,recov_Italy.values)\nplt.title(\"Number of recovered in Italy timeline\")","ec8ef8be":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(recov_Italy.index,recov_Italy.values)\nplt.xticks(recov_Italy.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 500),rotation=90)\nplt.title(\"Number of recovered in Italy timeline bar plot\")","adcb71f0":"recov_Italy_pday = np.ones(len(recov_Italy))\nrecov_Italy_pday[0] = recov_Italy[0]\nfor i in range(1,len(recov_Italy)):\n    recov_Italy_pday[i] = recov_Italy[i] - recov_Italy[i-1]\nrecov_Italy_pday = pd.Series(data=recov_Italy_pday,index = recov_Italy.index)\nrecov_Italy_pday.head()","ccd7c924":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(recov_Italy_pday.index,recov_Italy_pday.values)\nplt.xticks(recov_Italy_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 100),rotation=90)\nplt.title(\"Number of recovered per day in Italy\")","cbb112d5":"recov_US = df_recov[df_recov[\"Country\/Region\"] == \"US\"]\nrecov_US = recov_US.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\nrecov_US = pd.Series(data=recov_US.iloc[0].values,index=pd.to_datetime(recov_US.columns))\nrecov_US.head()","194142ee":"plt.figure(figsize=(20,6))\nplt.plot(recov_US.index,conf_US.values)\nplt.title(\"Number of recovered in US timeline\")","b6e3462b":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(recov_US.index,conf_US.values)\nplt.xticks(recov_US.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 1000),rotation=90)\nplt.title(\"Number of recovered in US timeline bar plot\")","f0c5f2b7":"recov_US_pday = np.ones(len(recov_US))\nrecov_US_pday[0] = recov_US[0]\nfor i in range(1,len(recov_US)):\n    recov_US_pday[i] = recov_US[i] - recov_US[i-1]\nrecov_US_pday = pd.Series(data=recov_US_pday,index = recov_US.index)\nrecov_US_pday.head()","4be66844":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(recov_US_pday.index,recov_US_pday.values)\nplt.xticks(recov_US_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 500),rotation=90)\nplt.title(\"Number of recovered per day in US\")","799d5983":"recov_SK = df_recov[df_recov[\"Country\/Region\"] == \"Korea, South\"]\nrecov_SK = recov_SK.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\nrecov_SK = pd.Series(data=recov_SK.iloc[0].values,index=pd.to_datetime(recov_SK.columns))\nrecov_SK.head()","5810b6f5":"plt.figure(figsize=(20,6))\nplt.plot(recov_SK.index,recov_SK.values)\nplt.title(\"Number of recovered in South Korea timeline\")","4e9da31a":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(recov_SK.index.date,recov_SK.values)\nplt.xticks(recov_SK.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 500),rotation=90)\nplt.title(\"Number of recovered in SK timeline bar plot\")","e3aa0c9c":"recov_SK_pday = np.ones(len(recov_US))\nrecov_SK_pday[0] = recov_SK[0]\nfor i in range(1,len(recov_SK)):\n    recov_SK_pday[i] = recov_SK[i] - recov_SK[i-1]\nrecov_SK_pday = pd.Series(data=recov_SK_pday,index = recov_SK.index)\nrecov_SK_pday.head()","04b8b054":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(recov_SK_pday.index.date,recov_SK_pday.values)\nplt.xticks(recov_SK_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height()+0.5),rotation=90)\nplt.title(\"Number of recovered per day in South Korea\")","4674f8de":"recov_Ind = df_recov[df_death[\"Country\/Region\"] == \"India\"]\nrecov_Ind = recov_Ind.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\n# Select from 31st Jan\nrecov_Ind = recov_Ind.loc[:,'1\/31\/20':]\nrecov_Ind = pd.Series(data=recov_Ind.iloc[0].values,index=pd.to_datetime(recov_Ind.columns))\n\nconf_Ind.head()","da6e8398":"plt.figure(figsize=(20,6))\nplt.plot(recov_Ind.index,recov_Ind.values)\nplt.title(\"Number of recovered in India timeline\")","08264853":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(recov_Ind.index.date,recov_Ind.values)\nplt.xticks(recov_Ind.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 10),rotation=90)\nplt.title(\"Number of recovered in India timeline bar plot\")","5e935cfc":"recov_Ind_pday = np.ones(len(recov_Ind))\nrecov_Ind_pday[0] = recov_Ind[0]\nfor i in range(1,len(recov_Ind)):\n    recov_Ind_pday[i] = recov_Ind[i] - recov_Ind[i-1]\nrecov_Ind_pday = pd.Series(data=recov_Ind_pday,index = recov_Ind.index)\nrecov_Ind_pday.head()","5ebd4d44":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(recov_Ind_pday.index.date,recov_Ind_pday.values)\nplt.xticks(recov_Ind_pday.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 10),rotation=90)\nplt.title(\"Number of recovered per day in India\")","7d6acfe4":"recov_world = df_recov.drop(['Province\/State','Country\/Region','Lat','Long'],axis=1)\nrecov_world = recov_world.sum()\nrecov_world.index = pd.to_datetime(recov_world.index)\nrecov_world.head()","e0b84b9a":"plt.figure(figsize=(20,6))\nplt.plot(recov_world.index,recov_world.values)\nplt.title(\"Number of recovered in world timeline\")","6b132988":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(recov_world.index.date,death_world.values)\nplt.xticks(recov_world.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 5000),rotation=90)\nplt.title(\"Number of recovered in world timeline bar plot\")","7a4180fc":"recov_world_pday = np.ones(len(recov_world))\nrecov_world_pday[0] = recov_world[0]\nfor i in range(1,len(recov_world)):\n    recov_world_pday[i] = recov_world[i] - recov_world[i-1]\nrecov_world_pday = pd.Series(data=recov_world_pday,index = recov_world.index)\nrecov_world_pday.head()","cd25b463":"_,ax = plt.subplots(figsize=(20,6)) \nplt.bar(recov_world_pday.index.date,recov_world_pday.values)\nplt.xticks(recov_world.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height())[:-2], (p.get_x() , p.get_height() + 300),rotation=90)\nplt.title(\"Number of recovered per day in world\")","5c2d9cf0":"import statsmodels.api as sm\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dense, TimeDistributed, Conv1D, Flatten, MaxPooling1D\nfrom keras.layers import Dropout, Activation\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport plotly.offline as py\nfrom statsmodels.tsa.arima_model import ARIMA\n","bc7f49c2":"x = np.arange(len(recov_world)).reshape(-1,1)\ny = recov_world.values","6cfcf2b8":"from sklearn.neural_network import MLPRegressor\nmodel = MLPRegressor(hidden_layer_sizes=[32, 32, 10], max_iter=50000, alpha=0.0005, random_state=26)\nmodel.fit(x, y)","76189d96":"# Compare prediction for current values with actual\nfrom datetime import timedelta\ntest = np.arange(len(x)).reshape(-1, 1)\npred = model.predict(test)\npred = pred.round().astype(int)\npred_time = [recov_world.index[0] + timedelta(days=i) for i in range(len(pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(pred,pred_time)","2c724401":"plt.figure(figsize=(20,6))\nplt.plot(recov_world.index,recov_world.values)\nplt.plot(prediction.index,prediction.values)\nplt.title(\"Actual count vs Predicted count\")\nplt.legend([\"actual count\",\"predicted count\"])\nplt.show()","65bfd93b":"err = mse(recov_world.values, prediction.values)\nprint(\"Training mean squared error = {}\".format(err))","3cac3152":"# Forecast future count\nfuture = np.arange(len(x),len(x)+90).reshape(-1, 1)\nfuture_pred = model.predict(future)\nfuture_pred = future_pred.round().astype(int)\npred_time = [recov_world.index[-1] + timedelta(days=i) for i in range(len(future_pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(future_pred,pred_time)\nprediction","144d0b77":"plt.figure(figsize=(20,6))\nplt.plot(prediction.index,prediction.values)\nplt.title(\"Future count forecast\")\nplt.legend([\"future count\"])\nplt.show()","080d21d8":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(prediction.index,prediction.values)\nplt.xticks(prediction.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 10000),rotation=90)\nplt.title(\"Future count\")","8ba1dc82":"x = np.arange(len(recov_world_pday)).reshape(-1,1)\ny = recov_world_pday.values","7ddbd050":"model = MLPRegressor(hidden_layer_sizes=[35, 40,10], max_iter=50000, alpha=0.0005, random_state=26)\nmodel.fit(x, y)","ab045c88":"test = np.arange(len(x)+7).reshape(-1, 1)\npred = model.predict(test)\npred = pred.round().astype(int)\npred_time = [recov_world_pday.index[0] + timedelta(days=i) for i in range(len(pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(pred,pred_time)","94880cad":"plt.figure(figsize=(20,6))\nplt.plot(recov_world_pday.index,recov_world_pday.values)\nplt.plot(prediction.index,prediction.values)\nplt.title(\"Actual count vs Predicted count\")\nplt.legend([\"actual count\",\"predicted count\"])\nplt.show()","144d44f9":"# Forecast future count\nfuture = np.arange(len(x),len(x)+90).reshape(-1, 1)\nfuture_pred = model.predict(future)\nfuture_pred = future_pred.round().astype(int)\npred_time = [recov_world_pday.index[-1] + timedelta(days=i) for i in range(len(future_pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(future_pred,pred_time)","21ba06ca":"_,ax = plt.subplots(figsize=(20,6))\nplt.bar(prediction.index,prediction.values)\nplt.xticks(prediction.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height()), (p.get_x() , p.get_height() + 1000),rotation=90)\nplt.title(\"Future count\")","7bbc2aae":"pr_data= pd.DataFrame(recov_world)\npr_data = pr_data.reset_index()\npr_data.columns = ['ds','y']\npr_data.head()","5946d41e":"pr_data['y'] = np.log(pr_data['y'] + 1)\nm=Prophet()\nm.fit(pr_data)","37b78d65":"#compare actual vs predicted values\npred_dates = pd.DataFrame(recov_world.index)\npred_dates.columns = ['ds']\npred = m.predict(pred_dates)\npred.yhat = np.exp(pred.yhat) - 1\nplt.figure(figsize=(20,6))\nplt.plot(pred.ds, pred.yhat)\nplt.plot(recov_world.index,recov_world.values)\nplt.title(\"Predicted vs Actual values\")\nplt.legend(['Predcted','Actual'])\nplt.show()","f9cd7d50":"err = mse(recov_world.values, pred.yhat)\nprint(\"Training mean squared error = {}\".format(err))","7e7946e1":"future=pd.DataFrame([recov_world.index[-1] + timedelta(i+1) for i in range(90)])\nfuture.columns = ['ds']\nforecast=m.predict(future)\nforecast['yhat'] = np.exp(forecast['yhat']) - 1\nforecast","cec0712b":"plt.figure(figsize=(20,6))\nplt.plot(forecast.ds, forecast.yhat)\nplt.title(\"Future count\")\nplt.show()","399bba91":"figure = plot_plotly(m, forecast)\npy.iplot(figure,image_width=800) \nfigure = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","d8c7a20b":"pr_data= pd.DataFrame(recov_world_pday)\npr_data = pr_data.reset_index()\npr_data.columns = ['ds','y']\npr_data.head()","66e7a144":"pr_data['y'] = np.log(pr_data['y'] + 1)\nm=Prophet()\nm.fit(pr_data)","2f1dbdf0":"#compare actual vs predicted values\npred_dates = pd.DataFrame(recov_world_pday.index)\npred_dates.columns = ['ds']\npred = m.predict(pred_dates)\npred.yhat = np.exp(pred.yhat) - 1\nplt.figure(figsize=(20,6))\nplt.plot(pred.ds, pred.yhat)\nplt.plot(recov_world_pday.index,recov_world_pday.values)\nplt.title(\"Predicted vs Actual values\")\nplt.legend(['Predcted','Actual'])\nplt.show()","1d38809c":"future=pd.DataFrame([recov_world_pday.index[-1] + timedelta(i+1) for i in range(90)])\nfuture.columns = ['ds']\nforecast=m.predict(future)\nforecast['yhat'] = np.exp(forecast['yhat']) - 1\nforecast","572a8e53":"plt.figure(figsize=(20,6))\nplt.plot(forecast.ds, forecast.yhat)\nplt.title(\"Future count\")\nplt.show()","7b6a0bb3":"figure = plot_plotly(m, forecast)\npy.iplot(figure,image_width=800) \nfigure = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count per day')\n","c753011b":"confirm_cs = pd.DataFrame(recov_world)\narima_data = confirm_cs.reset_index()\narima_data.columns = ['confirmed_date','count']\narima_data.head()","4832b1b6":"stepwise_fit = auto_arima(arima_data['count'], start_p = 1, start_q = 1, \n                          max_p = 3, max_q = 3, m = 12, \n                          start_P = 0, seasonal = True, \n                          d = None, D = 1, trace = True, \n                          error_action ='ignore',    \n                          suppress_warnings = True,  \n                          stepwise = True)           \nstepwise_fit.summary()","1c24578e":"model= SARIMAX(arima_data['count'],order=(0,2,1),seasonal_order=(0,1,1,12))\nfit_model = model.fit(full_output=True, disp=True)\nfit_model.summary()","692b4df3":"plt.figure(figsize=(20,6))\npred = fit_model.predict(0,len(arima_data)-1)\nplt.plot(arima_data.confirmed_date,pred)\nplt.plot(arima_data.confirmed_date,arima_data['count'])\nplt.legend(['forecast','actual'])\nplt.title('Forecast vs Actual')\n","921dd0e9":"err = mse(recov_world.values, pred)\nprint(\"Training mean squared error = {}\".format(err))","39edd64e":"forcast = fit_model.forecast(steps=90)\npred_y = forcast\nplt.figure(figsize=(20,6))\nplt.plot(pd.to_datetime([conf_world.index[-1] + timedelta(days=i) for i in range(len(pred_y))]),pred_y)\nplt.show()","1364d16c":"confirm_cs = pd.DataFrame(recov_world_pday)\narima_data = confirm_cs.reset_index()\narima_data.columns = ['confirmed_date','count']\narima_data.head()","d2f35c77":"stepwise_fit = auto_arima(arima_data['count'], start_p = 1, start_q = 1, \n                          max_p = 3, max_q = 3, m = 12, \n                          start_P = 0, seasonal = True, \n                          d = None, D = 1, trace = True, \n                          error_action ='ignore',    \n                          suppress_warnings = True,  \n                          stepwise = True)           \nstepwise_fit.summary()","966b2f2b":"model= SARIMAX(arima_data['count'],order=(0,1,1),seasonal_order=(0,1,1,12))\nfit_model = model.fit(full_output=True, disp=True)\nfit_model.summary()","92ebea34":"plt.figure(figsize=(20,6))\npred = fit_model.predict(0,len(arima_data)-1)\nplt.plot(arima_data.confirmed_date,pred)\nplt.plot(arima_data.confirmed_date,arima_data['count'])\nplt.legend(['forecast','actual'])\nplt.title('Forecast vs Actual')","340a5e89":"forcast = fit_model.forecast(steps=90)\npred_y = forcast\n_,ax = plt.subplots(figsize=(20,6))\nplt.bar(pd.to_datetime([conf_world.index[-1] + timedelta(days=i) for i in range(len(pred_y))]),pred_y)\nplt.xticks(prediction.index, rotation=90)\nfor p in ax.patches:\n    ax.annotate(str(p.get_height().round().astype(int)), (p.get_x() , p.get_height() + 10000),rotation=90)\nplt.show()","ecd6cf06":"\ntrain_data = recov_world.values.reshape(-1,1)\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler.fit(train_data)\nscaled_train_data = scaler.transform(train_data)","2e3bef9b":"# split a univariate sequence\ndef split_sequence(sequence, n_steps):\n    X, y = list(), list()\n    for i in range(len(sequence)):\n        # find the end of this pattern\n        end_ix = i + n_steps\n        # check if we are beyond the sequence\n        if end_ix > len(sequence)-1:\n            break\n        # gather input and output parts of the pattern\n        seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n    return np.array(X), np.array(y)\n","957a5fd4":"n_input = 5\ntrain_x, train_y = split_sequence(scaled_train_data,n_input)\nn_features =1\ntrain_x = train_x.reshape((train_x.shape[0],train_x.shape[1],n_features))\n","8448e193":"for i in range(len(train_x)):\n    print(train_x[i],train_y[i])","76b38d25":"lstm_model = Sequential()\nlstm_model.add(LSTM(input_shape=(n_input, n_features),units=100,activation='relu',return_sequences=True))\n#lstm_model.add(Dropout(0.05))\nlstm_model.add(LSTM(128))\n#lstm_model.add(Dropout(0.05))\nlstm_model.add(Dense(1))\nlstm_model.compile(optimizer = 'adam', loss = 'mean_squared_error')\nlstm_model.fit(train_x,train_y, epochs = 200)","117059c6":"predicted_data = []\nbatch = scaled_train_data[:n_input].copy()\ncurrent_batch = batch.reshape((1, n_input, n_features))\nlstm_pred = lstm_model.predict(current_batch)[0]\nfor i in range(len(train_data)-5):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    print(current_batch,lstm_pred)\n    predicted_data.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)","183283e6":"prediction = pd.Series(data=scaler.inverse_transform(predicted_data).reshape(1,-1)[0].round().astype(int),index=recov_world[5:].index)\nprediction","421ddce0":"recov_world","39ba5efd":"plt.figure(figsize=(20,6))\nplt.plot(prediction.index,prediction.values)\nplt.plot(recov_world[5:].index,recov_world[5:].values)\nplt.title(\"Prediction vs Actual count\")\nplt.legend([\"prediction\",\"actual\"])\nplt.show()","9e1ea0f5":"future_data = []\nbatch = scaled_train_data[:n_input].copy()\ncurrent_batch = batch.reshape((1, n_input, n_features))\nlstm_pred = lstm_model.predict(current_batch)[0]\nfor i in range(len(train_data)+115):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    future_data.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)","f77bd311":"pred_ind = [recov_world_pday.index[0] + timedelta(days=i) for i in range(len(future_data))]\nprediction = pd.Series(data=scaler.inverse_transform(future_data).reshape(1,-1)[0].round().astype(int),index=pred_ind)\nprediction","898029d0":"plt.figure(figsize=(20,6))\nplt.plot(prediction.index,prediction.values)\nplt.show()","c740b787":"train_data = recov_world_pday.values.reshape(-1,1)\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler.fit(train_data)\nscaled_train_data = scaler.transform(train_data)","e2389359":"n_input = 5\ntrain_x, train_y = split_sequence(scaled_train_data,n_input)\nn_features =1\ntrain_x = train_x.reshape((train_x.shape[0],train_x.shape[1],n_features))\n","10763eb9":"for i in range(len(train_x)):\n    print(train_x[i],train_y[i])","c0e38c68":"lstm_model = Sequential()\nlstm_model.add(LSTM(input_shape=(n_input, n_features),units=50,activation='relu',return_sequences=True))\n#lstm_model.add(Dropout(0.05))\nlstm_model.add(LSTM(256))\n#lstm_model.add(Dropout(0.05))\nlstm_model.add(Dense(1))\nlstm_model.compile(optimizer = 'adam', loss = 'mean_squared_error')\nlstm_model.fit(train_x,train_y, epochs = 200)","345b7285":"predicted_data = []\nbatch = scaled_train_data[:n_input].copy()\ncurrent_batch = batch.reshape((1, n_input, n_features))\nlstm_pred = lstm_model.predict(current_batch)[0]\nfor i in range(len(train_data)-5):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    print(current_batch,lstm_pred)\n    predicted_data.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)","1b4240a8":"prediction = pd.Series(data=scaler.inverse_transform(predicted_data).reshape(1,-1)[0].round().astype(int),index=recov_world[5:].index)\nprediction","8cdc0630":"plt.figure(figsize=(20,6))\nplt.plot(prediction.index,prediction.values)\nplt.plot(recov_world_pday[5:].index,recov_world_pday[5:].values)\nplt.title(\"Prediction vs Actual count\")\nplt.legend([\"prediction\",\"actual\"])\nplt.show()","a4a0061f":"act_world = conf_world - (death_world + recov_world)\nact_world","db203420":"plt.figure(figsize=(20,6))\nplt.bar(act_world.index,conf_world.values, label='Active',color='r')\nplt.bar(recov_world.index, recov_world.values, label='Recovered', color='b')\nplt.bar(death_world.index, death_world.values, label='Dead', color='black')\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.legend(frameon=True, fontsize=12)\nplt.xticks(act_world.index, rotation=90)\nplt.title('Active vs Recovered vs Dead',fontsize=30)\nplt.show()","4cdd2d54":"x = np.arange(len(act_world)).reshape(-1,1)\ny = act_world.values","a20d56e7":"from sklearn.neural_network import MLPRegressor\nmodel = MLPRegressor(hidden_layer_sizes=[32, 40, 10], max_iter=50000, alpha=0.0005, random_state=26)\nmodel.fit(x, y)","99751d41":"from datetime import timedelta\ntest = np.arange(len(x)).reshape(-1, 1)\npred = model.predict(test)\npred = pred.round().astype(int)\npred_time = [act_world.index[0] + timedelta(days=i) for i in range(len(pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(pred,pred_time)","9e5c3559":"plt.figure(figsize=(20,6))\nplt.plot(act_world.index,act_world.values)\nplt.plot(prediction.index,prediction.values)\nplt.title(\"Actual count vs Predicted count\")\nplt.legend([\"actual count\",\"predicted count\"])\nplt.show()","2e683994":"err = mse(recov_world.values, prediction.values)\nprint(\"Training mean squared error = {}\".format(err))","91fd65f3":"# Forecast future count\nfuture = np.arange(len(x),len(x)+90).reshape(-1, 1)\nfuture_pred = model.predict(future)\nfuture_pred = future_pred.round().astype(int)\npred_time = [act_world.index[-1] + timedelta(days=i) for i in range(len(future_pred))]\npred_time = pd.to_datetime(pred_time)\nprediction = pd.Series(future_pred,pred_time)\nprediction","478ba58f":"plt.figure(figsize=(20,6))\nplt.plot(prediction.index,prediction.values)\nplt.title(\"Future count forecast\")\nplt.legend([\"future count\"])\nplt.show()","2fa7ca15":"pr_data= pd.DataFrame(act_world)\npr_data = pr_data.reset_index()\npr_data.columns = ['ds','y']\npr_data.head()","593941d3":"pr_data['y'] = np.log(pr_data['y'] + 1)\nm=Prophet()\nm.fit(pr_data)","8148569d":"# compare actual vs predicted\npred_date = pd.DataFrame(act_world.index)\npred_date.columns = ['ds']\npred = m.predict(pred_date)\npred['yhat'] = np.exp(pred['yhat']) - 1\nplt.figure(figsize=(20,6))\nplt.plot(act_world.index, pred.yhat)\nplt.plot(act_world.index, act_world.values)\nplt.legend(['predicted count','actual count'])\nplt.show()","ade5acc8":"err = mse(act_world.values, pred.yhat)\nprint(\"Training mean squared error = {}\".format(err))","429c1b12":"future=pd.DataFrame([act_world.index[-1] + timedelta(i+1) for i in range(100)])\nfuture.columns = ['ds']\nforecast=m.predict(future)\nforecast['yhat'] = np.exp(forecast['yhat']) - 1\nforecast","1a939848":"plt.figure(figsize=(20,6))\nplt.plot(forecast.ds, forecast.yhat)\nplt.title(\"Future counts\")\nplt.show()","d6449d58":"figure = plot_plotly(m, forecast)\npy.iplot(figure,image_width=800) \nfigure = m.plot(forecast,xlabel='Date',ylabel='Confirmed Count')","f65e093d":"confirm_cs = pd.DataFrame(act_world)\narima_data = confirm_cs.reset_index()\narima_data.columns = ['confirmed_date','count']\narima_data.head()","0ba385c2":"stepwise_fit = auto_arima(arima_data['count'], start_p = 1, start_q = 1, \n                          max_p = 3, max_q = 3, m = 12, \n                          start_P = 0, seasonal = True, \n                          d = None, D = 1, trace = True, \n                          error_action ='ignore',    \n                          suppress_warnings = True,  \n                          stepwise = True)           \nstepwise_fit.summary()","e520cb2d":"model= SARIMAX(arima_data['count'],order=(1,2,0),seasonal_order=(0,1,1,12))\nfit_model = model.fit(full_output=True, disp=True)\nfit_model.summary()","2220cb86":"plt.figure(figsize=(20,6))\npred = fit_model.predict(0,len(arima_data)-1)\nplt.plot(arima_data.confirmed_date,pred)\nplt.plot(arima_data.confirmed_date,arima_data['count'])\nplt.title('Forecast vs Actual')","0275d277":"err = mse(act_world.values, pred)\nprint(\"Training mean squared error = {}\".format(err))","61b8939c":"forcast = fit_model.forecast(steps=90)\npred_y = forcast\nplt.figure(figsize=(20,6))\nplt.plot(pd.to_datetime([conf_world.index[-1] + timedelta(days=i) for i in range(len(pred_y))]),pred_y)\nplt.show()","bd88164b":"train_data = act_world.values.reshape(-1,1)\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler.fit(train_data)\nscaled_train_data = scaler.transform(train_data)","1da4cf4d":"# split a univariate sequence\ndef split_sequence(sequence, n_steps):\n    X, y = list(), list()\n    for i in range(len(sequence)):\n        # find the end of this pattern\n        end_ix = i + n_steps\n        # check if we are beyond the sequence\n        if end_ix > len(sequence)-1:\n            break\n        # gather input and output parts of the pattern\n        seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]\n        X.append(seq_x)\n        y.append(seq_y)\n    return np.array(X), np.array(y)\n","9b275e04":"n_input = 5\ntrain_x, train_y = split_sequence(scaled_train_data,n_input)\nn_features =1\ntrain_x = train_x.reshape((train_x.shape[0],train_x.shape[1],n_features))","ea51233b":"for i in range(len(train_x)):\n    print(train_x[i],train_y[i])","fbb173a8":"lstm_model = Sequential()\nlstm_model.add(LSTM(input_shape=(n_input, n_features),units=100,activation='relu',return_sequences=True))\n#lstm_model.add(Dropout(0.05))\nlstm_model.add(LSTM(256))\n#lstm_model.add(Dropout(0.05))\nlstm_model.add(Dense(1))\nlstm_model.compile(optimizer = 'adam', loss = 'mean_squared_error')\nlstm_model.fit(train_x,train_y, epochs = 200)","44bf5d27":"predicted_data = []\nbatch = scaled_train_data[:n_input].copy()\ncurrent_batch = batch.reshape((1, n_input, n_features))\nlstm_pred = lstm_model.predict(current_batch)[0]\nfor i in range(len(train_data)-5):   \n    lstm_pred = lstm_model.predict(current_batch)[0]\n    print(current_batch,lstm_pred)\n    predicted_data.append(lstm_pred) \n    current_batch = np.append(current_batch[:,1:,:],[[lstm_pred]],axis=1)","61861667":"prediction = pd.Series(data=scaler.inverse_transform(predicted_data).reshape(1,-1)[0].round().astype(int),index=conf_world[5:].index)\nprediction","745b7b8a":"plt.figure(figsize=(20,6))\nplt.plot(prediction.index,prediction.values)\nplt.plot(conf_world[5:].index,conf_world[5:].values)\nplt.title(\"Prediction vs Actual count\")\nplt.legend([\"prediction\",\"actual\"])\nplt.show()","7b23fefc":"### Forecast counts per day","15dcdb83":"### Total confirmed cases per day","23bb6b92":"### Forecast future count","fdd634ed":"### Total recovered by date","e20736df":"### Total recovered by date","50655ebc":"### Study the timeline of some major countries","56eb812e":"## South Korea","4436a3cf":"### Forecast future count next for 3 months","73be573c":"### Total confirmed cases per day","cc8c3105":"### Using LSTM","879be8d1":"### Total confirmed cases per day","f69329c3":"### Study timeline of world\n### Total recovered by date","785d0c1e":"### Forecasting count per day","447f9957":"### Total deaths per day","1dfb9d9e":"### Using simple regressor model","9899f429":"### Study the timeline of some major countries","56dd992a":"### Study timeline of world\n### Total deaths by date","29f12954":"### Total confirmed cases by date","ea7db5bd":"## Forecast future cases","2d3bb7c4":"### Study the timeline of some major countries","1c5e27d2":"### Forecast count per day","8a868ea5":"### Forecast per day count","0a70dbb0":"### Using regressor model","f9ac731f":"## India","707914fa":"### For forecasting total count","7c8b941c":"## Forecast future cases","6a695986":"## Recovered Count","8fa4a569":"## US","8f848b5b":"## Using Autoregressive integrated moving average(Arima)","45ac212e":"### Forecast counts per day","44364588":"### Total deaths per day","c0498309":"### Load confirmed cases time seires data","1bbf188f":"### Using Facebook's Prophet forecasting","60dc2cfd":"### Forecast total count","69005aed":"### For forecasting total count","c2118ef5":"### Total confirmed cases by date","56d6c617":"## Combined analysis","41b6a879":"### Total recovered per day","18307241":"### Total deaths per day","e65eee3b":"## Italy","a1657b0c":"## Active cases","625a21c9":"> ## Confirmed Cases","2c55c1cf":"## Using Facebook's Prophet forecasting","0b48a4a1":"### Total recovered per day","40a0b33a":"## Using Facebook's Prophet forecasting","a2c39de0":"# Pandemic end prediction","01ff34d8":"### Forecast count per day","a4c224f6":"### Forecast per day count","73666a77":"### Total Recovered by date","0fa87980":"### For forecasting total count","c6906930":"## Using Facebook's Prophet forecasting","1860031d":"### Forecast counts per day","bc504764":"### Total confirmed cases by date","384ecee2":"### Total deaths by date","a48981c6":"## Using Autoregressive integrated moving average(Arima)","f3aed102":"## India","81f144fe":"### Using simple regressor model","4bbd9d87":"### Total recovered per day","f45122bf":"### Total deaths by date","b7fc9218":"### Forecast total count","28bf21cb":"## US","7e2fd8d0":"### Load deaths time seires data","628b9952":"### Study timeline of world\n### Total confirmed cases by date","84f1d978":"### Total confirmed cases per day","5eaa5d3c":"### Load deaths time seires data","7cb5d492":"### Forecast per day count","1725a1ea":"### Forecast future count next for 3 months","1da0b310":"## South Korea","ab9dbeb0":"## US","73812dc8":"## Using LSTM","91aef95c":"## Forecast active cases","fccbab9f":"### Total recovered by date","19fabfc8":"## Using LSTM","6ceaab58":"## Forecast future cases","f99ac185":"## Death Count","13cfb942":"### Total deaths per day","1ba2deaf":"### Total confirmed cases per day","292d671d":"### Forecast count per day","70fabfb4":"### Total deaths by date","644c111b":"### Forecast total count","622620bd":"### Total deaths by date","0e7ad2bb":"### Total confirmed cases by date","f31c170b":"## Using Autoregressive integrated moving average(Arima)","19b09169":"### Forecast future count next for 3 months","74eb3561":"### Total deaths per day","fef1fcff":"### Forecast total count","d4ddb2ea":"### Forecast future count","136fd59e":"### Total recovered per day","2c759791":"## Italy","abf4f784":"## South Korea","1dbbf53e":"### Total recovered per day","5e886ff8":"### Forecast total count","7e98916e":"## Italy","bc1abbab":"## India","494482b3":"### Forecasting count per day","b0cafee9":"### Using ARIMA","ee4ba7fc":"### Using simple regressor model"}}