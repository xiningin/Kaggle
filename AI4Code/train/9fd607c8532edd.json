{"cell_type":{"055923b2":"code","55179e7a":"code","a9925035":"code","61c5eb75":"code","5ad1f2cb":"code","fa52ae3b":"code","3c452c97":"code","7e8830aa":"code","d0692a09":"code","fc1c0317":"code","a6fb454d":"code","d8bb8ebd":"code","b7d16caa":"code","94c2f9a3":"code","1e441fe1":"code","551e607e":"code","5a219b3d":"code","5c9c64fe":"code","15b03b92":"code","43092ff0":"code","c4b3595f":"code","f89f67dd":"code","5da7b268":"code","d17bf4fe":"markdown","ffeb9148":"markdown","d5ea7f6e":"markdown","798ea319":"markdown","b1977663":"markdown"},"source":{"055923b2":"#importando as bliliotecas basicas\nimport pandas as pd\nimport numpy as np","55179e7a":"#Biliblioetca de gera\u00e7\u00e3o de gr\u00e1ficos\nimport matplotlib.pyplot as plt ","a9925035":"#Blibliotecas especificas para o aprendizado de m\u00e1quina\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.neural_network import MLPRegressor\n","61c5eb75":"dataset = pd.read_csv(\"..\/input\/autompg-dataset\/auto-mpg.csv\")","5ad1f2cb":"dataset.head()","fa52ae3b":"plt.scatter(dataset[[\"weight\"]], dataset[[\"mpg\"]])\nplt.xlabel(\"Peso(libras)\")\nplt.ylabel(\"Autonomia(mpg)\")\nplt.title(\"Rela\u00e7\u00e3o entre peso e autonomia dos veiculos\")","3c452c97":"X = dataset[[\"weight\"]]\nY = dataset[[\"mpg\"]]","7e8830aa":"#Transformando de libras ->> KG\n#Transformando de milhas por gal\u00e3o --> km por litro\nX[\"weight\"] = X[\"weight\"] * 0.453692\nY[\"mpg\"]= Y[\"mpg\"] * 0.425144","d0692a09":"Y","fc1c0317":"X.describe()","a6fb454d":"#Normaliza\u00e7\u00e3o\nescala = StandardScaler() \nescala.fit(X)\n\nX_norm = escala.transform(X)","d8bb8ebd":"#Dividir  em conjunto de treinamento e teste \nX_norm_train, X_norm_test, Y_train, Y_test = train_test_split(X_norm, Y, test_size= 0.3)","b7d16caa":"rna = MLPRegressor(hidden_layer_sizes= (10,5),\n                   max_iter = 2000,\n                   tol = 0.0000001,\n                   learning_rate_init = 0.1,\n                   solver = \"sgd\",\n                   activation = \"logistic\",\n                   learning_rate = \"constant\",\n                   verbose = 2,)","94c2f9a3":"rna.fit(X_norm_train, Y_train)","1e441fe1":"reglinear = SGDRegressor(max_iter=2000,\n                          tol = 0.0000001,\n                         eta0= 0.1,\n                         learning_rate=\"constant\",\n                         verbose=2,\n                        )","551e607e":"reglinear.fit(X_norm_train, Y_train)","5a219b3d":"#Previss\u00e3o do conjunto de teste\nY_rna_previsao = rna.predict(X_norm_test)\nY_rl_previsao = reglinear.predict(X_norm_test)","5c9c64fe":"#Calcular o R^2\nr2_rna = r2_score(Y_test,Y_rna_previsao)\nr2_rl = r2_score(Y_test,Y_rl_previsao)\n\nprint(\"R2 RNA:\", r2_rna)\nprint(\"R2 RL:\", r2_rl)","15b03b92":"X_test = escala.inverse_transform(X_norm_test)\nplt.scatter(X_test, Y_test, alpha = 0.5, label=\"Reais\")\nplt.scatter(X_test, Y_rna_previsao, alpha = 0.5, label=\"MLP\")\nplt.scatter(X_test, Y_rl_previsao, alpha = 0.5, label=\"Reg linear\")\nplt.xlabel(\"Peso(em kg)\")\nplt.ylabel(\"Autonomia (em km\/L )\")\nplt.title (\"Compara\u00e7\u00e3o dos algoritmos previsto\")\nplt.legend(loc=1)\n\n","43092ff0":"#Prever para um novo dado\nX_futuro= np.array([[1000]])\nX_futuro_norm = escala.transform(X_futuro.T)","c4b3595f":"y_rna_prev_futuro = rna.predict(X_futuro_norm)\ny_reglinear_prev_futuro = reglinear.predict(X_futuro_norm)","f89f67dd":"#Autonomia prevista...\nprint(\"RNA: \",y_rna_prev_futuro)\nprint(\"Reg Linear: \",y_reglinear_prev_futuro)","5da7b268":"plt.scatter(X, Y, label=\"Real\")\nplt.scatter(X_futuro, y_rna_prev_futuro, label=\"MLP\")\nplt.scatter(X_futuro, y_reglinear_prev_futuro, label=\"Reg linear\")\nplt.legend(loc=1)\n","d17bf4fe":"# CARREGAMENTO DO DATASET","ffeb9148":"# Processamento","d5ea7f6e":"# PRE\u00c2MBULO\n","798ea319":"# Pr\u00e9-processamento\n","b1977663":"# Pos- processamento"}}