{"cell_type":{"35223772":"code","630caf47":"code","105a5f5d":"code","f7b74998":"code","9a97dd09":"code","1f3d1097":"code","5697c74b":"code","00e523ba":"code","0d761f3e":"code","7f42acd3":"code","cca9f332":"code","6529130a":"code","3bc5b805":"code","140d388e":"code","5c4c8e1e":"code","9a12bfef":"code","efbd8748":"code","b6c84985":"code","6a806841":"code","25332a60":"code","37bc8a5a":"code","b01c3f87":"code","7bb8ae43":"code","56ed719f":"code","e563bbee":"code","7f85ef7a":"code","db4dc3aa":"code","ec79a76a":"code","85de19cf":"code","14fab10b":"code","fcfbebc1":"code","fa502eb0":"code","b1a13d8d":"code","d4857b50":"code","0c123860":"code","9c6be105":"code","77b66160":"code","f2cd3788":"code","ae027f9d":"code","d8b8f480":"code","a4d93886":"code","10d75384":"code","9d033c77":"code","dddbf803":"code","1215824e":"code","4da4d87a":"code","9b48312b":"code","c7e49cf9":"code","88f596ab":"code","270c58fa":"code","4439fbeb":"code","40ea01a8":"code","9bb45f20":"code","3aee0a1a":"code","950cf7df":"code","a46f5eb7":"code","231244ef":"code","9eec4912":"code","86cfbfcf":"code","5de22156":"code","485a6d29":"code","63318a32":"code","19c9c254":"markdown","6401fe9f":"markdown","e50c94be":"markdown","6d6afb3b":"markdown","31cde095":"markdown","2c31ef67":"markdown","0ea764e7":"markdown","ce1ad1f1":"markdown","d74baa3f":"markdown","7ca2a6ac":"markdown","07ec49e6":"markdown","cba34e33":"markdown","c356871f":"markdown","a79a4577":"markdown","0d3fb9eb":"markdown","e24cb774":"markdown","d6f838c9":"markdown","4c2b0691":"markdown","c1d89c84":"markdown","f3df4a2e":"markdown","9641757f":"markdown","4bb6ce40":"markdown","1bf6f613":"markdown","1425ee70":"markdown","1497c839":"markdown","a521a21e":"markdown","6f709913":"markdown","904eada3":"markdown","eb60b3ff":"markdown","42452962":"markdown"},"source":{"35223772":"import tensorflow as tf\nimport numpy as np\nimport pandas as pd\nfrom sklearn import preprocessing\nimport matplotlib.pyplot as plt","630caf47":"train_df=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntrain_df.head()","105a5f5d":"test_df=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ntest_df.head()","f7b74998":"temp_df=train_df.copy()\ntemp_df.drop('label',axis=1,inplace=True)\ntemp_df=np.array(temp_df).reshape(-1,28,28,1)\ntemp_df.shape","9a97dd09":"labels=train_df['label']\nplt.imshow(temp_df[9][:,:,0])\nprint('The number is:{}'.format(labels[9]))","1f3d1097":"unscaled_inputs=train_df.iloc[:,1:].values","5697c74b":"targets=train_df.iloc[:,0].values","00e523ba":"scaled_inputs=preprocessing.scale(unscaled_inputs)","0d761f3e":"total_indices=scaled_inputs.shape[0]","7f42acd3":"print('Total amount of data in the training dataset: {}'.format(total_indices))","cca9f332":"shuffled_indices=np.arange(total_indices)","6529130a":"np.random.shuffle(shuffled_indices)","3bc5b805":"shuffled_indices","140d388e":"shuffled_inputs=scaled_inputs[shuffled_indices]\nshuffled_targets=targets[shuffled_indices]","5c4c8e1e":"samples_count=total_indices\n\ntrain_samples_count=int(0.8*samples_count)\nvalidation_samples_count=int(0.1*samples_count)\ntest_samples_count=samples_count-train_samples_count-validation_samples_count","9a12bfef":"train_inputs=shuffled_inputs[:train_samples_count]\ntrain_targets=shuffled_targets[:train_samples_count]\n\nvalidation_inputs=shuffled_inputs[train_samples_count:train_samples_count+validation_samples_count]\nvalidation_targets=shuffled_targets[train_samples_count:train_samples_count+validation_samples_count]\n\ntest_inputs=shuffled_inputs[train_samples_count+validation_samples_count:]\ntest_targets=shuffled_targets[train_samples_count+validation_samples_count:]","efbd8748":"np.savez('MNIST_train',inputs=train_inputs,target=train_targets)\nnp.savez('MNIST_validation',inputs=validation_inputs,target=validation_targets)\nnp.savez('MNIST_test',inputs=test_inputs,target=test_targets)","b6c84985":"npz=np.load('MNIST_train.npz')\ntrain_inputs=npz['inputs'].astype(np.float)\ntrain_targets=npz['target'].astype(np.int)","6a806841":"npz=np.load('MNIST_test.npz')\ntest_inputs=npz['inputs'].astype(np.float)\ntest_targets=npz['target'].astype(np.int)","25332a60":"npz=np.load('MNIST_validation.npz')\nvalidation_inputs=npz['inputs'].astype(np.float)\nvalidation_targets=npz['target'].astype(np.int)","37bc8a5a":"input_size=784\noutput_size=10\nhidden_layer_size=50\n\nmodel=tf.keras.Sequential([\n    #Input layer\n    tf.keras.layers.Dense(input_size),\n    \n    #Hidden layer 1\n    tf.keras.layers.Dense(hidden_layer_size,activation='relu'),\n    #Hidden layer 2\n    tf.keras.layers.Dense(hidden_layer_size,activation='relu'),\n    #Hidden layer 3\n    tf.keras.layers.Dense(hidden_layer_size,activation='relu'),\n    \n    #Output layer\n    tf.keras.layers.Dense(output_size,activation='softmax')\n])","b01c3f87":"model.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])","7bb8ae43":"NUM_EPOCHS=50\nBATCH_SIZE=100\n\nearly_stopping=tf.keras.callbacks.EarlyStopping(patience=20)\n\nmodel.fit(train_inputs,train_targets,\n          batch_size=BATCH_SIZE,\n          epochs=NUM_EPOCHS,\n          callbacks=[early_stopping],\n          validation_data=(validation_inputs,validation_targets),\n          verbose=2,validation_steps=10)","56ed719f":"test_loss,test_accuracy=model.evaluate(test_inputs,test_targets)","e563bbee":"print('\\n Test loss:{0:.2f} Test accuracy: {1:.2f} %'.format(test_loss,test_accuracy*100))","7f85ef7a":"values=model.predict(test_inputs)","db4dc3aa":"pd.DataFrame(values).head()","ec79a76a":"test_df.head()","85de19cf":"unscaled_inputs_test=test_df.values\nscaled_inputs=preprocessing.scale(unscaled_inputs_test)","14fab10b":"test_inputs=scaled_inputs","fcfbebc1":"test_inputs.shape","fa502eb0":"np.savez('Final_test',inputs=test_inputs)","b1a13d8d":"npz_test=np.load('Final_test.npz')\ntest_inputs=npz_test['inputs'].astype(float)","d4857b50":"values_df=pd.DataFrame(model.predict(test_inputs))","0c123860":"values_df.head()","9c6be105":"values_df=values_df[values_df>0.5]","77b66160":"values_df","f2cd3788":"values_df[values_df>0.5]=1\nvalues_df","ae027f9d":"values_df.fillna(0,inplace=True)\nvalues_df.head()","d8b8f480":"values_df.size","a4d93886":"predictions_df=pd.DataFrame(values_df[values_df==1].stack())\npredictions_df","10d75384":"predictions_df[0].isna().value_counts()","9d033c77":"predictions_df.shape[0]","dddbf803":"predictions_df.drop(0,axis=1,inplace=True)","1215824e":"predictions_df","4da4d87a":"predictions_df.reset_index(inplace=True)","9b48312b":"predictions_df.rename(columns={'level_1':'Label'},inplace=True)\npredictions_df.head()","c7e49cf9":"image_id=pd.DataFrame(np.arange(0,28000),columns=['ImageId'])\nimage_id['ID']=image_id['ImageId']\nimage_id.head()","88f596ab":"\npredictions_df.rename(columns={'level_0':'ImageId'},inplace=True)","270c58fa":"predictions_df.head()","4439fbeb":"final_preds=predictions_df.copy()","40ea01a8":"final_preds=pd.merge_ordered(final_preds,image_id,on='ImageId',fill_method='None')","9bb45f20":"final_preds['Label'].isna().value_counts()","3aee0a1a":"final_preds['Label'].value_counts()","950cf7df":"final_preds['Label'].fillna(final_preds['Label'].mode()[0],inplace=True)","a46f5eb7":"final_preds=final_preds.astype(int)","231244ef":"final_preds['ImageId']=final_preds['ImageId']+1","9eec4912":"final_preds.drop('ID',axis=1,inplace=True)\nfinal_preds.head()","86cfbfcf":"final_preds['Label'].unique()","5de22156":"sample_sub=pd.read_csv('..\/input\/digit-recognizer\/sample_submission.csv')\nsample_sub.dtypes","485a6d29":"final_preds['ImageId']=sample_sub['ImageId']","63318a32":"final_preds.to_csv('Final_submission.csv',index=False)","19c9c254":"In a brute and inaccurate manner, we will fill the null values with mode of the Label column.","6401fe9f":"The neural net could predict for the above number of cases. Rest could not be identified.\n\nLet us organise the dataframe properly.","e50c94be":"## Splitting the dataset into train,validation and test sets","6d6afb3b":"Once the model has been completely trained, we import the test dataset provided to us.","31cde095":"## Extracting data from the csv files","2c31ef67":"# 2. Deep learning model","0ea764e7":"As we can see from above few codes, we have allocated **80%** of the dataset for **training** , **10%** for **cross validation** and the remaining **10%** for **testing purpose**.","ce1ad1f1":"In case the data was arranged in some particular order, we would want to remove any bias by shuffling the data completely. This will make the dataset more homogeneous in nature and prevent any undue bias in the model.","d74baa3f":"## Final testing on new dataset","7ca2a6ac":"Unlike the training dataset, we shall not shuffle the testing  dataset since we need to preserve the order for submission purpose.","07ec49e6":"Let us check how the data actually can be visualised. For this purpose, we need to reshape our 1D data into 2D data of matrix of 28X28. This will give us an idea how actually the data looks like.","cba34e33":"## Saving the three datasets into .npz form to be used in further neural network","c356871f":"## Standardize the inputs","a79a4577":"As we can see, the entries which have 1 are corresponding to the digits of their column name. ","0d3fb9eb":"Sadly, we could not recognize about few test cases. Let us see the various results amongst the recognized numbers.","e24cb774":"Let us now shuffle all these 42000 indices to make the data homogeneous in nature.","d6f838c9":"## Creating the neural network model","4c2b0691":"## Training the dataset\n\n\nWe have an option of setting an early stopping criteria which checks the steps where the validation loss increases in the subsequent steps. We can set it to any value less than the numer of epochs. This helps to control the overfit issue. However, since we have already used the validation datasets, we will comment out the code in the model.\n\n\n","c1d89c84":"As we can see, the indices have now been all shuffled.","f3df4a2e":"## Shuffling the data","9641757f":"# 1. Data preprocessing\n\n## Importing the relevant libraries and datasets","4bb6ce40":"From the above code, we have separated all the train, validation and test data and separated the inputs from the targets aswell.","1bf6f613":"## Loading the NPZ files","1425ee70":"## Choosing the optimizer and the loss function","1497c839":"We need to sort out the labels for each entry now. We can convert every element in the dataframe into int datatype such that we have only 1s and 0s to make it more readable.","a521a21e":"## Testing the model\n\nInitial testing on a part of the training data will be first done to check how the neural net performs.","6f709913":"As we can see, we have 28000 different images with their pixel intensities.","904eada3":"After glancing through the training dataframe, we can realise that the first column named as label is the target column while everything else are inputs for the nueral net.\n\nLet us try to separate this data.","eb60b3ff":"As we can see, the above data is divided into training and testing datasets. We will also create a separate validation dataset. The label section in the training dataset tells us the actual digit that the model must accurately determine.\n\n\nSince we are dealing with image data in the form of pixel values, we will need to preprocess our data for it to be fed into the neural network.\n\n\n## Visualising the data","42452962":"From the .CSV files, it is clear that we have the values for a total of **784 pixels** for each digit. This means,it is in the form of a rank 3 tensor as **28 X 28 X 1** . \n\nThe above situation is a problem because it is not possible to feed these values as input in simple neural networks. For convolutional neural networks, there is no issue with such a tensor input. In this case however, we need to apply the layer flattening option provided by Keras.\n\n\nAs we have 784 pixels for each digit, so, out input nodes (or values) will be 784.\n\nLet us take the number of hidden layers as 50\n\nThe digits may range from 0-9. Hence, the number of output values is taken as 10\n\n\nWe are implementing **three sets of hidden layers** initially.\nThe activation function we plan to use for the hidden layer is **'Relu'**\n\n\nFor backpropogation of the output layer, the activation function used is **Softmax** "}}