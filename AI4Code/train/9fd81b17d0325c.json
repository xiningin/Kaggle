{"cell_type":{"bdcd7127":"code","217bf0d1":"code","2a037d02":"code","32ee21ff":"code","6e33b512":"code","5de05a83":"code","47b81d81":"code","7e8ad778":"code","643ba173":"code","35c2e5bc":"code","a96f8826":"code","5c122900":"code","14e2e464":"code","a6e60ddb":"code","5045b738":"code","d084ea47":"code","e3032a5c":"code","3b8a102c":"code","1ed977c1":"code","e2e99775":"code","6fb2158c":"code","5b479738":"code","15f70875":"code","2bb457b6":"code","a5dd5332":"code","76a3a841":"code","406bc373":"code","74215612":"code","5453f706":"code","b34b71e4":"code","03a46c35":"code","ddad8d3d":"markdown","73aeb76b":"markdown","7227a906":"markdown","8c9fb5de":"markdown","af24763e":"markdown","25f9c318":"markdown"},"source":{"bdcd7127":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","217bf0d1":"data_soybean = pd.read_csv('\/kaggle\/input\/crop-price-prediction\/dataset_42_soybean.csv')\ndata_yield = pd.read_csv('\/kaggle\/input\/crop-price-prediction\/corn yield.csv')\n# data_yield","2a037d02":"data_soybean","32ee21ff":"import re\nfrom tqdm import tqdm\ntqdm.pandas()\n\ndef empty_string(x):\n    return ''.join(list(filter(None, re.split(' ',x))))\n\nfor i in data_soybean.columns:\n    data_soybean[i] = data_soybean[i].progress_apply(empty_string)","6e33b512":"data_soybean.loc[0,'precip']","5de05a83":"label = []\nlength = []\ncolumns = []\n\nfor i in data_soybean.columns:\n    label.append(i)\n    length.append(data_soybean[i].unique())\n    columns.append(data_soybean[i].nunique())\n    \ndata_analysis = pd.DataFrame({'Label': label, 'Unique No': length, 'Unique List': columns, \n                              'Example': data_soybean.loc[1].tolist()}) \ndata_analysis #.sort_values(by=['Unique List'])","47b81d81":"column_name = 'date' \n\nimport plotly.graph_objects as go\ngo.Figure(data=[go.Pie(labels=data_soybean[column_name].value_counts().index, \n                       values=data_soybean[column_name].value_counts().values)])\n","7e8ad778":"column_name_1 = 'date' \ncolumn_name_2 = 'temp' \ncolumn_name_3 = 'precip' \ncolumn_name_4 = 'plant-growth' \n\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objects as go\nfrom plotly.offline import plot\n\n\nfig = make_subplots(rows=2, cols=2, \n                    subplot_titles=(column_name_1, column_name_2, \n                                    column_name_3, column_name_4),\n                    specs=[[{\"type\": \"pie\"}, {\"type\": \"pie\"}],\n                           [{\"type\": \"pie\"}, {\"type\": \"pie\"}]])\n\nfig.add_trace(go.Pie(\n     values=data_soybean[column_name_1].value_counts().values,\n     labels=data_soybean[column_name_1].value_counts().index,\n     domain=dict(x=[0, 0.5]),\n     name= column_name_1), \n     row=1, col=1)\n\nfig.add_trace(go.Pie(\n     values=data_soybean[column_name_2].value_counts().values,\n     labels=data_soybean[column_name_2].value_counts().index,\n     domain=dict(x=[0.5, 1.0]),\n     name= column_name_2),\n     row=1, col=2)\n\nfig.add_trace(go.Pie(\n     values=data_soybean[column_name_3].value_counts().values,\n     labels=data_soybean[column_name_3].value_counts().index,\n     domain=dict(x=[0, 0.5]),\n     name= column_name_1), \n     row=2, col=1)\n\nfig.add_trace(go.Pie(\n     values=data_soybean[column_name_4].value_counts().values,\n     labels=data_soybean[column_name_4].value_counts().index,\n     domain=dict(x=[0.5, 1.0]),\n     name= column_name_2),\n     row=2, col=2)\n\n\n\n#fig.update_layout(margin = dict(t=0, l=0, r=0, b=0))\nfig.show()","643ba173":"data_soybean.loc[:20]","35c2e5bc":"print(__doc__)\nimport warnings\n\n# Graph Visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom scipy.stats.stats import pearsonr\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import learning_curve\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.svm import SVC\n\n# ML Metrics\nfrom sklearn.metrics import accuracy_score, recall_score, precision_score\n\n%matplotlib inline\n# Suppress warnings\nwarnings.filterwarnings(\"ignore\")","a96f8826":"def cross_validate(estimator, train, validation):\n    X_train = train[0]\n    Y_train = train[1]\n    X_val = validation[0]\n    Y_val = validation[1]\n    train_predictions = classifier.predict(X_train)\n    train_accuracy = accuracy_score(train_predictions, Y_train)\n    train_recall = recall_score(train_predictions, Y_train, average='micro')\n    train_precision = precision_score(train_predictions, Y_train, average='micro')\n\n    val_predictions = classifier.predict(X_val)\n    val_accuracy = accuracy_score(val_predictions, Y_val)\n    val_recall = recall_score(val_predictions, Y_val, average='micro')\n    val_precision = precision_score(val_predictions, Y_val, average='micro')\n\n    print('Model metrics')\n    print('Accuracy  Train: %.2f, Validation: %.2f' % (train_accuracy, val_accuracy))\n    print('Recall    Train: %.2f, Validation: %.2f' % (train_recall, val_recall))\n    print('Precision Train: %.2f, Validation: %.2f' % (train_precision, val_precision))","5c122900":"import pandas as pd\ncat_list = ['Sun', 'Sun', 'Wed', 'Mon', 'Mon']\nencoded_data, mapping_index = pd.Series(cat_list).factorize()\nencoded_data, mapping_index","14e2e464":"cat_list = ['?','lt-norm','norm','gt-norm']\nencoded_data, mapping_index = pd.Series(cat_list).factorize()\nencoded_data, mapping_index","a6e60ddb":"#Mapping the labels \nmonth = ['?','april','may','june','july','august','september','october']\ntemp = ['?','lt-norm','norm','gt-norm']\nprecip = ['?','lt-norm','norm','gt-norm']\ngrowth = ['?','abnorm','norm']\n\n\nmonth_map = {month[i]: i for i in range(len(month))}\ntemp_map = {temp[i]: i for i in range(len(temp))}\nprecip_map = {precip[i]: i for i in range(len(precip))}\ngrowth_map = {growth[i]: i for i in range(len(growth))}\n\nmonth_map","5045b738":"growth_map","d084ea47":"encoded_data_month, mapping_index_month = pd.Series(month).factorize()\nencoded_data_temp, mapping_index_temp = pd.Series(temp).factorize()\nencoded_data_precip, mapping_index_precip = pd.Series(precip).factorize()\nencoded_data_growth, mapping_index_growth = pd.Series(growth).factorize()\n\ndataset = data_soybean[['date','precip','temp','plant-growth']]\ndataset['date'] = dataset['date'].map(month_map)\ndataset['temp'] = dataset['temp'].map(temp_map)\ndataset['precip'] = dataset['precip'].map(precip_map)\ndataset['plant-growth'] = dataset['plant-growth'].map(growth_map)\ndataset","e3032a5c":"labels = dataset['plant-growth'].values\ndataset_final = dataset.drop(['plant-growth'], axis=1, inplace=True)\n\nclassifier = GaussianNB()\nX_train, X_test, Y_train, Y_test = train_test_split(dataset, labels, test_size=0.2, random_state=1)\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.2, random_state=1)\nX_train1, X_train2, Y_train1, Y_train2 = train_test_split(X_train, Y_train, test_size=0.3, random_state=12)\n\nclassifier.fit(X_train2, Y_train2)","3b8a102c":"print('Metrics with only 30% of train data')\ncross_validate(classifier, (X_train, Y_train), (X_val, Y_val))","1ed977c1":"classifier.partial_fit(X_train1, Y_train1)","e2e99775":"print('Metrics with the remaining 70% of train data')\ncross_validate(classifier, (X_train, Y_train), (X_val, Y_val))","6fb2158c":"print('Probability of each class')\nprint('Survive = 0: %.2f' % classifier.class_prior_[0])\nprint('Survive = 1: %.2f' % classifier.class_prior_[1])","5b479738":"print('Mean of each feature per class')\nprint('Factors')\nprint('Survive = 0: %s' % classifier.theta_[0])\nprint('Survive = 1: %s' % classifier.theta_[1])","15f70875":"print('Variance of each feature per class')\nprint('Survive = 0: %s' % classifier.sigma_[0])\nprint('Survive = 1: %s' % classifier.sigma_[1])","2bb457b6":"test_predictions = classifier.predict(X_test)\ntest_predictions","a5dd5332":"Y_test","76a3a841":"new_df = pd.DataFrame({'Real': Y_test, 'Prediction': test_predictions})\nnew_df['True'] = new_df['Real'] == new_df['Prediction']\nnew_df","406bc373":"accuracy = round(sum(new_df['True'])\/len(new_df)*100,2)\n\nprint('Accuracy: %s percent' % accuracy)","74215612":"classifier.get_params()","5453f706":"def plot_learning_curve(estimator, title, X, y, axes=None, ylim=None, cv=None,\n                        n_jobs=None, train_sizes=np.linspace(.1, 1.0, 5)):\n    \"\"\"\n    Generate 3 plots: the test and training learning curve, the training\n    samples vs fit times curve, the fit times vs score curve.\n\n    Parameters\n    ----------\n    estimator : estimator instance\n        An estimator instance implementing `fit` and `predict` methods which\n        will be cloned for each validation.\n\n    title : str\n        Title for the chart.\n\n    X : array-like of shape (n_samples, n_features)\n        Training vector, where ``n_samples`` is the number of samples and\n        ``n_features`` is the number of features.\n\n    y : array-like of shape (n_samples) or (n_samples, n_features)\n        Target relative to ``X`` for classification or regression;\n        None for unsupervised learning.\n\n    axes : array-like of shape (3,), default=None\n        Axes to use for plotting the curves.\n\n    ylim : tuple of shape (2,), default=None\n        Defines minimum and maximum y-values plotted, e.g. (ymin, ymax).\n\n    cv : int, cross-validation generator or an iterable, default=None\n        Determines the cross-validation splitting strategy.\n        Possible inputs for cv are:\n\n          - None, to use the default 5-fold cross-validation,\n          - integer, to specify the number of folds.\n          - :term:`CV splitter`,\n          - An iterable yielding (train, test) splits as arrays of indices.\n\n        For integer\/None inputs, if ``y`` is binary or multiclass,\n        :class:`StratifiedKFold` used. If the estimator is not a classifier\n        or if ``y`` is neither binary nor multiclass, :class:`KFold` is used.\n\n        Refer :ref:`User Guide <cross_validation>` for the various\n        cross-validators that can be used here.\n\n    n_jobs : int or None, default=None\n        Number of jobs to run in parallel.\n        ``None`` means 1 unless in a :obj:`joblib.parallel_backend` context.\n        ``-1`` means using all processors. See :term:`Glossary <n_jobs>`\n        for more details.\n\n    train_sizes : array-like of shape (n_ticks,)\n        Relative or absolute numbers of training examples that will be used to\n        generate the learning curve. If the ``dtype`` is float, it is regarded\n        as a fraction of the maximum size of the training set (that is\n        determined by the selected validation method), i.e. it has to be within\n        (0, 1]. Otherwise it is interpreted as absolute sizes of the training\n        sets. Note that for classification the number of samples usually have\n        to be big enough to contain at least one sample from each class.\n        (default: np.linspace(0.1, 1.0, 5))\n    \"\"\"\n    if axes is None:\n        _, axes = plt.subplots(1, 3, figsize=(20, 5))\n\n    axes[0].set_title(title)\n    if ylim is not None:\n        axes[0].set_ylim(*ylim)\n    axes[0].set_xlabel(\"Training examples\")\n    axes[0].set_ylabel(\"Score\")\n\n    train_sizes, train_scores, test_scores, fit_times, _ = \\\n        learning_curve(estimator, X, y, cv=cv, n_jobs=n_jobs,\n                       train_sizes=train_sizes,\n                       return_times=True)\n    train_scores_mean = np.mean(train_scores, axis=1)\n    train_scores_std = np.std(train_scores, axis=1)\n    test_scores_mean = np.mean(test_scores, axis=1)\n    test_scores_std = np.std(test_scores, axis=1)\n    fit_times_mean = np.mean(fit_times, axis=1)\n    fit_times_std = np.std(fit_times, axis=1)\n\n    # Plot learning curve\n    axes[0].grid()\n    axes[0].fill_between(train_sizes, train_scores_mean - train_scores_std,\n                         train_scores_mean + train_scores_std, alpha=0.1,\n                         color=\"r\")\n    axes[0].fill_between(train_sizes, test_scores_mean - test_scores_std,\n                         test_scores_mean + test_scores_std, alpha=0.1,\n                         color=\"g\")\n    axes[0].plot(train_sizes, train_scores_mean, 'o-', color=\"r\",\n                 label=\"Training score\")\n    axes[0].plot(train_sizes, test_scores_mean, 'o-', color=\"g\",\n                 label=\"Cross-validation score\")\n    axes[0].legend(loc=\"best\")\n\n    # Plot n_samples vs fit_times\n    axes[1].grid()\n    axes[1].plot(train_sizes, fit_times_mean, 'o-')\n    axes[1].fill_between(train_sizes, fit_times_mean - fit_times_std,\n                         fit_times_mean + fit_times_std, alpha=0.1)\n    axes[1].set_xlabel(\"Training examples\")\n    axes[1].set_ylabel(\"fit_times\")\n    axes[1].set_title(\"Scalability of the model\")\n\n    # Plot fit_time vs score\n    axes[2].grid()\n    axes[2].plot(fit_times_mean, test_scores_mean, 'o-')\n    axes[2].fill_between(fit_times_mean, test_scores_mean - test_scores_std,\n                         test_scores_mean + test_scores_std, alpha=0.1)\n    axes[2].set_xlabel(\"fit_times\")\n    axes[2].set_ylabel(\"Score\")\n    axes[2].set_title(\"Performance of the model\")\n\n    return plt","b34b71e4":"fig, axes = plt.subplots(3, 2, figsize=(10, 15))\n\nX, y = dataset, labels\n\ntitle = \"Learning Curves (Naive Bayes)\"\n# Cross validation with 100 iterations to get smoother mean test and train\n# score curves, each time with 20% data randomly selected as a validation set.\ncv = ShuffleSplit(n_splits=100, test_size=0.2, random_state=0)\n\nestimator = GaussianNB()\nplot_learning_curve(estimator, title, X, y, axes=axes[:, 0], ylim=(0.5, 0.9),\n                    cv=cv, n_jobs=4)\n\ntitle = r\"Learning Curves (SVM, RBF kernel, $\\gamma=0.001$)\"\n# SVC is more expensive so we do a lower number of CV iterations:\ncv = ShuffleSplit(n_splits=10, test_size=0.2, random_state=0)\nestimator_2 = SVC(gamma=0.001)\nplot_learning_curve(estimator_2, title, X, y, axes=axes[:, 1], ylim=(0.7, 1.01),\n                    cv=cv, n_jobs=4)\n\nplt.show()","03a46c35":"data_soybean['Value'] = 1\ndata_soybean.to_csv('dataset.csv')","ddad8d3d":"# save our model code\nclassifier.export('classifier.py')\n\n# print the model code to see what it says\n!cat classifier.py","73aeb76b":"# Data Visualization","7227a906":"https:\/\/www.kaggle.com\/robinwilson\/crop-yield-prediction","8c9fb5de":"# Machine Learning (Prediction Approach with Bayesian Network)","af24763e":"In R: https:\/\/www.kaggle.com\/plantdevo\/crop-price-models","25f9c318":"https:\/\/www.kaggle.com\/kerneler\/starter-crop-price-prediction-e16a7dd4-a"}}