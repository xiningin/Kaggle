{"cell_type":{"ba605d88":"code","fe456a90":"code","f14f95bd":"code","0d97bf0f":"code","087f4e6a":"code","20e1b55b":"code","4f69482e":"code","a27a0f8e":"code","79312930":"code","24b3b9ee":"code","e36e72e3":"code","85a4bfa1":"code","5a2e3b8e":"code","ca6c9a4e":"code","26d0cd50":"code","52d13247":"code","3bf58d5b":"code","f1c57f2c":"code","af8124d3":"code","f541c6bf":"code","47c031be":"code","f1d53613":"code","16e562be":"code","4ecb0856":"code","cab7dddb":"code","4fe0e4e2":"code","a9dbc739":"code","c295b838":"code","c1c4b40f":"code","fd6ad549":"code","9d221297":"code","c9084b93":"code","da2db7a9":"code","9bc738be":"code","9dc96b3c":"code","a7b76f78":"code","ec347ee0":"code","0d9d06bd":"code","cbbb61e1":"code","52c309a5":"code","d3ae7eec":"markdown","e9802e61":"markdown","171fa735":"markdown","20dbb993":"markdown","a7fa7be0":"markdown","dc1cba44":"markdown","29d5c6a7":"markdown","b3dc259f":"markdown","111838c6":"markdown","50ecb827":"markdown","8ac26794":"markdown","b140d9b4":"markdown","a5d105e7":"markdown","3e1b93b3":"markdown","26dfc561":"markdown","07849544":"markdown","1347061f":"markdown","96456140":"markdown","248d967a":"markdown","b3fc9b91":"markdown","99809beb":"markdown","58db4905":"markdown","3cead269":"markdown","5ce23ec1":"markdown","68e7ae32":"markdown","a2e899f8":"markdown"},"source":{"ba605d88":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.stats import norm\nfrom scipy import stats\nfrom scipy.stats import skew\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\npd.set_option('display.max_rows', 100)\npd.set_option('display.max_columns', 100)\n\n%matplotlib inline\n# Any results you write to the current directory are saved as output.","fe456a90":"dfTrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndfTest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\nwith open('..\/input\/house-prices-advanced-regression-techniques\/data_description.txt') as f:\n    description = f.read()\nprint('Train shape {}'.format(dfTrain.shape))\nprint('Test shape {}'.format(dfTest.shape))","f14f95bd":"# plt.figure(figsize=[10, 7])\n# sns.scatterplot(x = 'GrLivArea', y = 'SalePrice', data=dfTrain)\n# plt.title('Scatter plot of SalePrice and Living area above ground(before removing outliers)')","0d97bf0f":"# dfTrain = dfTrain.drop(dfTrain['GrLivArea'].sort_values(ascending = False)[:2].index, axis = 0)\n# plt.figure(figsize=[10, 7])\n# sns.scatterplot(x = 'GrLivArea', y = 'SalePrice', data=dfTrain)\n# plt.title('Scatter plot of SalePrice and Living area above ground(after removing outliers)')","087f4e6a":"cols = ['SalePrice','OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\n# sns.pairplot(dfTrain[cols], diag_kind='kde')\ndfTrain = dfTrain.drop(dfTrain['GrLivArea'].sort_values(ascending = False)[:2].index, axis = 0)\n# dfTrain = dfTrain.drop(dfTrain['GrLivArea'][dfTrain['GrLivArea'] >= 4000].index, axis = 0)\n# sns.pairplot(dfTrain[cols], diag_kind='kde')\n\n# not sure the reason for this yet, saw this in other kernels\noutliers = [30, 88, 462, 631, 1322]\ndfTrain = dfTrain.drop(outliers, axis = 0)","20e1b55b":"columnsTrain = dfTrain.columns\ndf = pd.concat([dfTrain, dfTest]).reset_index(drop = True)\ndfTrainId = dfTrain['Id']\ndfTestId = dfTest['Id']\ndfTrainSalePrice = df['SalePrice'][df['SalePrice'].notnull()]\nnTrain = dfTrain.shape[0]\ndropVars = ['Id', 'SalePrice']\ndf = df.drop(labels=dropVars, axis=1)","4f69482e":"years = ['YearBuilt', 'YearRemodAdd', 'GarageYrBlt', 'YrSold']\nmetrics = ['LotFrontage', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n         '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'GarageArea', 'WoodDeckSF', \n         'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal']\n# GarageYrBlt has some very high values\ndf['GarageYrBlt'][df['GarageYrBlt'] > 2019] = df['YearBuilt'][df['GarageYrBlt'] > 2019]","a27a0f8e":"dtypes = df.dtypes\ncolumnNames = df.columns\ndtypes_columnNames = zip(dtypes, columnNames)\nfor dtype, columnName in dtypes_columnNames:\n    print(columnName, ':', dtype, end = ' | ')","79312930":"# MSSubClass and MoSold should be categorical variable instead of numerical, \nnum2cate = ['MSSubClass', 'MoSold']\nfor name in num2cate:\n    df[name] = df[name].map(lambda x: str(x))","24b3b9ee":"totalMissing = df.isnull().sum().sort_values(ascending = False)\npercentMissing = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending = False)\nmissing = pd.concat([totalMissing, percentMissing], axis = 1)\nmissing.columns = ['total', 'percent']\nmissing","e36e72e3":"test = missing.reset_index().rename(columns = {'index': 'variable name'})","85a4bfa1":"test.loc[test['total'] > 5]","5a2e3b8e":"plt.figure(figsize=[10, 7])\nsns.barplot(y = 'variable name', x = 'total', data = test.loc[test['total'] > 5])\nplt.title('Barplot of variables with missing values')","ca6c9a4e":"# two non missing values in garage type is special, they have garage type as detached\nmissing_garage_index = df[df['GarageType'].notnull() & df['GarageQual'].isnull()].index\ndf['GarageYrBlt'].iloc[missing_garage_index] = df['YearBuilt'].iloc[missing_garage_index]\ndf['GarageFinish'].iloc[missing_garage_index] = df[df['GarageType'] == 'Detchd']['GarageFinish'].mode(dropna = False)[0]\ndf['GarageCars'].iloc[missing_garage_index[1]] = df[df['GarageType'] == 'Detchd']['GarageCars'].mode(dropna = False)[0]\ndf['GarageArea'].iloc[missing_garage_index[1]] = df[df['GarageType'] == 'Detchd']['GarageArea'].median()\ndf['GarageQual'].iloc[missing_garage_index] = df[df['GarageType'] == 'Detchd']['GarageQual'].mode(dropna = False)[0]\ndf['GarageCond'].iloc[missing_garage_index] = df[df['GarageType'] == 'Detchd']['GarageCond'].mode(dropna = False)[0]\ndf['GarageYrBlt'][df['GarageYrBlt'].isnull()] = df['YearBuilt'][df['GarageYrBlt'].isnull()]\n\n# basement variables which are all NA means actual no basement\nbasementColumns = []\nfor columnName in df.columns:\n    if columnName.lower().find('bsmt') != -1:\n        basementColumns.append(columnName)\nnumBasementColumns = df[basementColumns].dtypes[df[basementColumns].dtypes != 'object'].index\ncateBasementColumns = df[basementColumns].dtypes[df[basementColumns].dtypes == 'object'].index\nnoBasementIndex = df[(df['BsmtCond'].isnull() & df['BsmtQual'].isnull()\n    & df['BsmtExposure'].isnull() & df['BsmtFinType1'].isnull() & df['BsmtFinType2'].isnull())].index\nfor index in noBasementIndex:\n    for column in numBasementColumns:\n        df.at[index, column] = 0\nfor index in noBasementIndex:\n    for column in cateBasementColumns:\n        df.at[index, column] = 'None'\n\n# bsmtQual, replace na value with value of BsmtCond\ndf['BsmtQual'][df['BsmtQual'].isnull()] = df['BsmtCond'][df['BsmtQual'].isnull()]\n# BsmtCond, replace na value with value of BsmtQual\ndf['BsmtCond'][df['BsmtCond'].isnull()] = df['BsmtQual'][df['BsmtCond'].isnull()]\n# BsmtExposure, replace with mode\ndf['BsmtExposure'][df['BsmtExposure'].isnull()] = df['BsmtExposure'].mode()[0]\n# BsmtFinType2, replace with FinType1\ndf['BsmtFinType2'][df['BsmtFinType2'].isnull()] = df['BsmtFinType2'].mode()[0]\n\n# drop dominate level and combine too many levels:\ndropDominate = ['PoolQC', 'MiscFeature', 'Alley', 'Utilities']\n\ndf = df.drop(dropDominate, axis = 1)\n\ncols = ['Fence', 'FireplaceQu', 'GarageCond', 'GarageFinish', 'GarageQual', 'GarageType'] #replace categorical with none\n\nfor col in cols:\n    df[col].fillna('None', inplace=True)\n\ncols = ['LotFrontage'] #replace numerical with LotFrontage median in neighbor\nfor col in cols:\n    df[col] = df.groupby('Neighborhood')[col].transform(lambda x: x.fillna(x.median()))\n    \n    \n# index 2608 has MasVnrArea, but no MasVnrType, rest replace with mode\/median\nmissing_MasVnrType = df[df['MasVnrArea'].notnull() & df['MasVnrType'].isnull()].index\ndf['MasVnrType'].iloc[missing_MasVnrType[0]] = 'BrkFace'\ndf['MasVnrType'][df['MasVnrType'].isnull()] = df['MasVnrType'].mode()[0]\ndf['MasVnrArea'][df['MasVnrArea'].isnull()] = df['MasVnrArea'].median()\n\n# the rest missing categorical variable\ncols = ['MSZoning', 'Functional', 'Electrical', 'KitchenQual', 'Exterior1st', 'Exterior2nd', 'SaleType'] #replace categorical with the mode\n\nfor col in cols:\n    df[col].fillna(df[col].mode()[0], inplace = True)","26d0cd50":"norm","52d13247":"plt.figure(figsize = [10, 7])\nsns.distplot(dfTrainSalePrice, fit=norm, kde_kws={'label': 'Kernel Density Estimation'}, fit_kws={'label': 'Normal Distribution'});\nplt.ylabel('pdf')\nplt.title('Distribution of SalePrice(before log transformed)')\nplt.legend()","3bf58d5b":"res = stats.probplot(dfTrainSalePrice, plot=plt)","f1c57f2c":"dfTrainSalePrice = np.log(dfTrainSalePrice)","af8124d3":"plt.figure(figsize = [10, 7])\nsns.distplot(dfTrainSalePrice, fit=norm, kde_kws={'label': 'Kernel Density Estimation'}, fit_kws={'label': 'Normal Distribution'});\nplt.ylabel('pdf')\nplt.title('Distribution of SalePrice(after log transformed)')\nplt.legend()","f541c6bf":"categorical_name = df.dtypes[df.dtypes == 'object'].index.tolist()\ndf_cate = df[categorical_name]\nnum_levels = 10\ncategoryOver10 = []\nfor column in df_cate.columns:\n    if len(df_cate[column].value_counts()) > 10:\n        categoryOver10.append(column)","47c031be":"# minor_MSSubClass = df_cate['MSSubClass'].value_counts()[df_cate['MSSubClass'].value_counts() < 100].index.tolist()\n# def combine_levels_MSSubClass(x):\n#     if x in minor_MSSubClass:\n#         return 'Others'\n#     else:\n#         return x\n# df['MSSubClass'] = df['MSSubClass'].apply(combine_levels_MSSubClass)","f1d53613":"# minor_Neighborhood = df_cate['Neighborhood'].value_counts()[df_cate['Neighborhood'].value_counts() < 100].index.tolist()\n# def combine_levels_Neighborhood(x):\n#     if x in minor_Neighborhood:\n#         return 'Others'\n#     else:\n#         return x\n# df['Neighborhood'] = df['Neighborhood'].apply(combine_levels_Neighborhood)","16e562be":"# minor_Exterior1st = df_cate['Exterior1st'].value_counts()[df_cate['Exterior1st'].value_counts() < 100].index.tolist()\n# def combine_levels_Exterior1st(x):\n#     if x in minor_Exterior1st:\n#         return 'Others'\n#     else:\n#         return x\n# df['Exterior1st'] = df['Exterior1st'].apply(combine_levels_Exterior1st)","4ecb0856":"# minor_Exterior2nd = df_cate['Exterior2nd'].value_counts()[df_cate['Exterior2nd'].value_counts() < 100].index.tolist()\n# def combine_levels_Exterior2nd(x):\n#     if x in minor_Exterior2nd:\n#         return 'Others'\n#     else:\n#         return x\n# df['Exterior2nd'] = df['Exterior2nd'].apply(combine_levels_Exterior2nd)","cab7dddb":"# def combine_levels_MoSold(x):\n#     if x in ['3', '4', '5']:\n#         return 'Spring'\n#     elif x in ['6', '7', '8']:\n#         return 'Summer'\n#     elif x in ['9', '10', '11']:\n#         return 'Fall'\n#     else:\n#         return 'Winter'\n# df['MoSold'] = df['MoSold'].apply(combine_levels_MoSold)","4fe0e4e2":"percent_levels = 0.95\ncategoryOver95 = []\nfor column in df_cate.columns:\n    if (df_cate[column].value_counts()\/df_cate.shape[0]).sort_values(ascending = False)[0] > 0.95:\n        categoryOver95.append(column)","a9dbc739":"percent_levels = 0.95\ncategoryOver95 = []\nfor column in df_cate.columns:\n    if (df_cate[column].value_counts()\/df_cate.shape[0]).sort_values(ascending = False)[0] > 0.95:\n        categoryOver95.append(column)\ndf = df.drop(categoryOver95, axis = 1)","c295b838":"ordinal_cate = ['FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish',\n        'LotShape', 'PavedDrive', 'CentralAir', 'OverallCond', \n        'YrSold', 'MoSold']\ncategorical_name = ordinal_cate\ndf_train = df[:nTrain]\ndef encode(train, feature):\n    df_train = train\n    ordering = pd.concat([df_train[feature], dfTrainSalePrice], axis = 1)\n    ordering = ordering.groupby(by = feature).mean().sort_values(by = 'SalePrice')\n    ordering['SalePrice'] = range(1, len(ordering) + 1)\n    ordering = ordering['SalePrice'].to_dict()\n    for cate, order in ordering.items():\n        df.loc[df[feature] == cate, feature + '_E'] = order\nfor feature in categorical_name:\n    encode(train = df_train, feature = feature)\n# df = df.drop(ordinal_cate, axis = 1)","c1c4b40f":"df['TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']\ndf['YrBltAndRemod'] = df['YearBuilt']+df['YearRemodAdd']\ndf['Total_sqr_footage'] = (df['BsmtFinSF1'] + df['BsmtFinSF2'] +\n                                 df['1stFlrSF'] + df['2ndFlrSF'])\ndf['Total_Bathrooms'] = (df['FullBath'] + (0.5 * df['HalfBath']) +\n                               df['BsmtFullBath'] + (0.5 * df['BsmtHalfBath']))\ndf['Total_porch_sf'] = (df['OpenPorchSF'] + df['3SsnPorch'] +\n                              df['EnclosedPorch'] + df['ScreenPorch'] +\n                              df['WoodDeckSF'])\n\n\ndf['haspool'] = df['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\ndf['has2ndfloor'] = df['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasgarage'] = df['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasbsmt'] = df['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\ndf['hasfireplace'] = df['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\n\n\n# df[\"OverallGrade\"] = df[\"OverallQual\"] * df[\"OverallCond\"]\n# # Overall quality of the garage\n# df[\"GarageGrade\"] = df[\"GarageQual_E\"] * df[\"GarageCond_E\"]\n# # Overall quality of the exterior\n# df[\"ExterGrade\"] = df[\"ExterQual_E\"] * df[\"ExterCond_E\"]\n# # Overall kitchen score\n# df[\"KitchenScore\"] = df[\"KitchenAbvGr\"] * df[\"KitchenQual\"]\n# # Overall fireplace score\n# df[\"FireplaceScore\"] = df[\"Fireplaces\"] * df[\"FireplaceQu\"]\n# # Overall garage score\n# df[\"GarageScore\"] = df[\"GarageArea\"] * df[\"GarageQual_E\"]","fd6ad549":"tmp_dfTrain = pd.concat([df[:nTrain], dfTrainSalePrice], axis = 1)\nhigh_corr_index = tmp_dfTrain.corr().abs().nlargest(10, 'SalePrice').index\nsns.heatmap(tmp_dfTrain.corr().loc[high_corr_index, high_corr_index], annot = True)","9d221297":"# create new features for top 10 variables\ndef add_poly(features):\n    for i in range(1, len(features)):\n        df[features[i] + '-2'] = df[features[i]]**2\n        df[features[i] + '-3'] = df[features[i]]**3\n        df[features[i] + '-sqrt'] = np.sqrt(df[features[i]])\nadd_poly(high_corr_index)","c9084b93":"from scipy.special import boxcox1p\nlam = 0.15\nskewed_feats = df.dtypes[df.dtypes != 'object'].index\nskewed_feats = df[skewed_feats].apply(lambda x: x.skew(skipna=True)) #compute skewness\nskewed_feats = skewed_feats[abs(skewed_feats) > 0.5]\nskewed_feats = skewed_feats.index\n\ndf[skewed_feats] = boxcox1p(df[skewed_feats], lam)","da2db7a9":"from sklearn.linear_model import Lasso, LinearRegression\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.ensemble import RandomForestRegressor","9bc738be":"df = pd.get_dummies(df)\ntrain = df[:nTrain]\ntest = df[nTrain:]","9dc96b3c":"def cv_rmse(model = None):\n    kf = KFold(n_splits=5)\n    kf.get_n_splits(X = train, y = dfTrainSalePrice)\n    rmse_cv = np.sqrt(-cross_val_score(estimator=model, X = train, y = dfTrainSalePrice, scoring='neg_mean_squared_error', cv = kf))\n    return rmse_cv","a7b76f78":"clf = LinearRegression()\nrmse_cv = cv_rmse(model = clf)\nprint('Linear Regression root mean squared error: {}'.format(rmse_cv.mean()))","ec347ee0":"alphas = np.linspace(0.00001, 0.1, num = 100)\ncv_lasso = [cv_rmse(model = Lasso(alpha = alpha)).mean() for alpha in alphas]\nprint(\"Alpha = {} of Lasso achieves RMSE = {}\".format(alphas[np.argmin(cv_lasso)], cv_lasso[np.argmin(cv_lasso)]))","0d9d06bd":"regr = RandomForestRegressor()\nrmse_cv = cv_rmse(model = regr)","cbbb61e1":"rmse_cv.mean()","52c309a5":"clf = make_pipeline(RobustScaler(), Lasso(alpha = 0.00102))\nclf.fit(X = train, y = dfTrainSalePrice)\npredSalePrice = pd.Series(np.exp(clf.predict(test)))\npred = pd.concat([dfTestId, predSalePrice], axis = 1)\npred.columns = ['Id', 'SalePrice']\npred.to_csv('submission.csv', index = False)","d3ae7eec":"### Neighborhood\nDoesn't want to combine the neighborhood, so first combine levels or remove variable, see the performance","e9802e61":"## remove variable with dominant level","171fa735":"# Normality\nMay log transform independent variables later to make them normal","20dbb993":"### MSSsubClass","a7fa7be0":"### Exterior2nd","dc1cba44":"## Skewness for independent variables","29d5c6a7":"## remove or combine categorical variable with two many levels, use 10 as a bar","b3dc259f":"# Outlier\n## Find outlier by visualizing scatter plot between target variable and highly correlated variables","111838c6":"## Random Forest","50ecb827":"# Correlation between variables\n## Find high correlated variable with target variable\nGarageCars and GarageArea has a high correlation, keep GarageCars.\n\nTotalBsmtSF and 1stFlrSF have a high correlation, keep TotalBsmtSF.\n\nGrLivArea and TotRmsAbvGrd have a high correlation, keep GrLivArea\n\nGarageYrBlt and YearBuilt have a high correlation, keep YearBlt because it has a larger correlation with SalePrice","8ac26794":"## Return cv_rmse","b140d9b4":"# Verify each variable type matches the actual meaning","a5d105e7":"## predict test data","3e1b93b3":"### Exterior1st","26dfc561":"# Verify the logic of data\n## Year variable shouldn't exceed 2019\n## Areas, distances, prices shouldn't be less than 0\n## Month should be between 1 and 12","07849544":"# Read data and understand the variable","1347061f":"## Lasso","96456140":"# Missing value","248d967a":"### MoSold\ncombine them based on season","b3fc9b91":"# Linear regression Model","99809beb":"## Create new variables","58db4905":"## Verify the type of the variables","3cead269":"Missing in some varaibles means there is no such facilities\n\nMissing in some variables means missing data\n","5ce23ec1":"# Feature Engeneering","68e7ae32":"## Linear Regression","a2e899f8":"## Encode categorical variables\n### based on the group mean of SalePrice"}}