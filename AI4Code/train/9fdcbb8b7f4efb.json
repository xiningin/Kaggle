{"cell_type":{"c0d41d79":"code","2c1c4d21":"code","79e77884":"code","4a69ecf9":"code","942c92b4":"code","49a856a5":"code","8dc38a7f":"code","a45ba419":"code","e81404b4":"code","bca481d3":"code","83273d7c":"code","1ad5318e":"code","4d89c381":"code","1103fb30":"code","a941a78a":"code","a86a94a9":"code","b8bf3fdc":"code","83b2b4bc":"code","48db89fb":"code","749bd685":"code","0c4bcd23":"code","17d5cd43":"code","9dc9eb87":"code","d98423ae":"code","98708df4":"code","20ae5eb8":"code","6e634035":"code","5eaf45bf":"code","bae5c4be":"code","d2db6b0d":"code","82af2166":"code","edb49eb3":"code","bbbaf175":"code","c0939321":"code","02c38588":"code","7b1f2428":"code","a96c8113":"code","bf152ba7":"code","3042b5ae":"code","56631253":"code","3ddbf817":"code","6e8b7804":"markdown","01a96bd5":"markdown","6f64afe4":"markdown","ebabbe38":"markdown"},"source":{"c0d41d79":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport nltk\nimport os\nimport io\nimport string\nimport re\nfrom sklearn.metrics import classification_report, accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import BernoulliNB, GaussianNB, MultinomialNB\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier, BaggingClassifier, GradientBoostingClassifier\nfrom sklearn.svm import SVC","2c1c4d21":"reviews = pd.read_csv('..\/input\/zomato-restaurants-hyderabad\/Restaurant reviews.csv')\nreviews.head()","79e77884":"reviews.isnull().sum()","4a69ecf9":"reviews.shape","942c92b4":"reviews.info()","49a856a5":"reviews =reviews.dropna()","8dc38a7f":"reviews.shape","a45ba419":"reviews_txt = reviews[['Review', 'Rating']]\nreviews_txt.head()","e81404b4":"reviews_txt['Rating'] = reviews_txt['Rating'].replace('Like', 5)\nreviews_txt['Rating'] = reviews_txt['Rating'].astype('float')","bca481d3":"reviews_txt['Rating'] = np.where(reviews_txt['Rating']<4, 0, 1) #0 for BAD rating and 1 for Good rating","83273d7c":"reviews_txt.head()","1ad5318e":"reviews_txt['Rating'].value_counts()","4d89c381":"reviews['Restaurant'].value_counts()","1103fb30":"reviews.columns","a941a78a":"sns.countplot(reviews_txt['Rating']) #0 for bad and 1 for good","a86a94a9":"cleanup_re = re.compile('[^a-z]+')\ndef clean(sentence): \n  sentence = str(sentence)\n  sentence = sentence.lower()\n  sentence = cleanup_re.sub(' ', sentence).strip()\n  return sentence\nreviews_txt['Review'] = reviews_txt['Review'].apply(clean)","b8bf3fdc":"nltk.download('popular')","83b2b4bc":"from nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize","48db89fb":"def preprocess(sentence):\n  sentence = str(sentence)\n  word_tokens = word_tokenize(sentence)\n  stop_words = set(stopwords.words('english'))\n  sentence = ' '.join([i for i in word_tokens if not i in stop_words])\n  return sentence\n\nreviews_txt['Review'] = reviews_txt['Review'].apply(preprocess)","749bd685":"reviews_txt.head()","0c4bcd23":"from nltk.stem import WordNetLemmatizer\nlemma = WordNetLemmatizer()\ndef preprocess4(sentence):\n  input_str=word_tokenize(sentence)\n  lemmatized_output = ' '.join([lemma.lemmatize(w) for w in input_str])\n  return lemmatized_output\n\nreviews_txt['Review'] = reviews_txt['Review'].apply(preprocess4)","17d5cd43":"reviews_txt.head()","9dc9eb87":"X = reviews_txt['Review']\ny = reviews_txt['Rating']","d98423ae":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 100)","98708df4":"X_train.shape, X_test.shape","20ae5eb8":"from sklearn.feature_extraction.text import CountVectorizer\ncount_vect = CountVectorizer(analyzer='word', token_pattern=r'\\w{1,}')\ncount_vect.fit(X_train)\n\n#transform the train and test dataset\nX_train_countvect = count_vect.transform(X_train)\nX_test_countvect = count_vect.transform(X_test)","6e634035":"from sklearn.feature_extraction.text import TfidfVectorizer\n# word level tf-idf\ntfidf_vect = TfidfVectorizer(analyzer='word', token_pattern=r'\\w{1,}', max_features=5000)\ntfidf_vect.fit(X_train)\nxtrain_tfidf =  tfidf_vect.transform(X_train)\nxtest_tfidf =  tfidf_vect.transform(X_test)\n \n # ngram level tf-idf \ntfidf_vect_ngram = TfidfVectorizer(analyzer='word', token_pattern=r'\\w{1,}', ngram_range=(2,3), max_features=5000)\ntfidf_vect_ngram.fit(X_train)\nxtrain_tfidf_ngram =  tfidf_vect_ngram.transform(X_train)\nxtest_tfidf_ngram =  tfidf_vect_ngram.transform(X_test)\n\n# characters level tf-idf\ntfidf_vect_ngram_chars = TfidfVectorizer(analyzer='char', token_pattern=r'\\w{1,}', ngram_range=(2,3), max_features=5000)\ntfidf_vect_ngram_chars.fit(X_train)\nxtrain_tfidf_ngram_char =  tfidf_vect_ngram_chars.transform(X_train)\nxtest_tfidf_ngram_char =  tfidf_vect_ngram_chars.transform(X_test)","5eaf45bf":"def train_model(classifier, feature_vector_train, label, feature_vector_valid):\n    # fit the training dataset on the classifier\n    classifier.fit(feature_vector_train, label)\n    \n    # predict the labels on validation dataset\n    predictions = classifier.predict(feature_vector_valid)\n    \n    return accuracy_score(predictions, y_test)","bae5c4be":"# Naive Bayes on Count Vectors\naccuracy = train_model(MultinomialNB(), X_train_countvect, y_train, X_test_countvect)\nprint(\"NB, Count Vectors: \", accuracy)\n\n# Naive Bayes on Word Level TF IDF Vectors\naccuracy = train_model(MultinomialNB(), xtrain_tfidf, y_train, xtest_tfidf)\nprint(\"NB, WordLevel TF-IDF: \", accuracy)\n\n# Naive Bayes on Ngram Level TF IDF Vectors\naccuracy = train_model(MultinomialNB(), xtrain_tfidf_ngram, y_train, xtest_tfidf_ngram)\nprint(\"NB, N-Gram Vectors: \", accuracy)\n\n# Naive Bayes on Character Level TF IDF Vectors\naccuracy = train_model(MultinomialNB(), xtrain_tfidf_ngram_char, y_train, xtest_tfidf_ngram_char)\nprint(\"NB, CharLevel Vectors: \", accuracy)","d2db6b0d":"# Logistic on Count Vectors\naccuracy = train_model(LogisticRegression(), X_train_countvect, y_train, X_test_countvect)\nprint(\"Count Vectors: \", accuracy)\n\n# Logistic on Word Level TF IDF Vectors\naccuracy = train_model(LogisticRegression(), xtrain_tfidf, y_train, xtest_tfidf)\nprint(\"WordLevel TF-IDF: \", accuracy)\n\n# Logistic on Ngram Level TF IDF Vectors\naccuracy = train_model(LogisticRegression(), xtrain_tfidf_ngram, y_train, xtest_tfidf_ngram)\nprint(\"N-Gram Vectors: \", accuracy)\n\n# Logistic on Character Level TF IDF Vectors\naccuracy = train_model(LogisticRegression(), xtrain_tfidf_ngram_char, y_train, xtest_tfidf_ngram_char)\nprint(\"CharLevel Vectors: \", accuracy)","82af2166":"# SVM on Ngram Level TF IDF Vectors\naccuracy = train_model(SVC(), xtrain_tfidf_ngram, y_train, xtest_tfidf_ngram)\nprint(\"NB, N-Gram Vectors: \", accuracy)","edb49eb3":"accuracy = train_model(RandomForestClassifier(n_estimators=250, random_state=100), X_train_countvect, y_train, X_test_countvect)\nprint(\"Count Vectors: \", accuracy)\n\n# Random Forest on Word Level TF IDF Vectors\naccuracy = train_model(RandomForestClassifier(), xtrain_tfidf, y_train, xtest_tfidf)\nprint(\"WordLevel TF-IDF: \", accuracy)","bbbaf175":"accuracy = train_model(BaggingClassifier(), X_train_countvect, y_train, X_test_countvect)\nprint(\"Count Vectors: \", accuracy)\n\n# Bagging on Word Level TF IDF Vectors\naccuracy = train_model(BaggingClassifier(), xtrain_tfidf, y_train, xtest_tfidf)\nprint(\"WordLevel TF-IDF: \", accuracy)","c0939321":"import xgboost as xgb\naccuracy = train_model(xgb.XGBClassifier(), X_train_countvect, y_train, X_test_countvect)\nprint(\"Count Vectors: \", accuracy)\n\n# Boosting on Word Level TF IDF Vectors\naccuracy = train_model(xgb.XGBClassifier(), xtrain_tfidf, y_train, xtest_tfidf)\nprint(\"WordLevel TF-IDF: \", accuracy)","02c38588":"import tensorflow as tf\nfrom tensorflow import keras\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Embedding\nfrom keras.layers import SpatialDropout1D\nfrom keras.layers import LSTM\nfrom keras.callbacks import EarlyStopping\nfrom keras.layers import Bidirectional\nfrom keras.layers import Dropout","7b1f2428":"#max words to be used\nMAX_WORDS = 10000\n#max length of the sequence\nMAX_LEN = 50\n#embedding dimension should be between 50 to 300\nEMBEDDING_DIM = 100\ntokenizer = Tokenizer(num_words=MAX_WORDS, filters='!\"#$%&()*+,-.\/:;<=>?@[\\]^_`{|}~', lower=True)\ntokenizer.fit_on_texts(X)\nword_index = tokenizer.word_index\nprint('number of unique tokens are: ', len(word_index))","a96c8113":"from keras.preprocessing.sequence import pad_sequences","bf152ba7":"X = tokenizer.texts_to_sequences(X)\nX = pad_sequences(X, maxlen=MAX_LEN)\nprint('shape of data tensor is', X.shape)","3042b5ae":"X_train, X_test, Y_train, Y_test = train_test_split(X,y, test_size = 0.2, random_state = 100)\nprint(X_train.shape,Y_train.shape)\nprint(X_test.shape,Y_test.shape)","56631253":"model = Sequential()\nmodel.add(Embedding(input_dim=MAX_WORDS, output_dim= EMBEDDING_DIM, input_length=MAX_LEN))\nmodel.add(LSTM(300, recurrent_dropout=0.1))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(1, activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\nprint(model.summary())\nhistory =model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=10, batch_size=64)","3ddbf817":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\n\nplt.title('Training and validation accuracy')\nplt.plot(epochs, acc, 'red', label='Training acc')\nplt.plot(epochs, val_acc, 'blue', label='Validation acc')\nplt.legend()\n\nplt.figure()\nplt.title('Training and validation loss')\nplt.plot(epochs, loss, 'red', label='Training loss')\nplt.plot(epochs, val_loss, 'blue', label='Validation loss')\n\nplt.legend()\n\nplt.show()","6e8b7804":"Further imporovemnts can be done using hyperparameter tuning","01a96bd5":"Data Visualization","6f64afe4":"Building LSTM model","ebabbe38":"Classification using LSTM and tensorflow"}}