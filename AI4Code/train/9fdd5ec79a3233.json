{"cell_type":{"df133697":"code","c508f531":"code","18d211be":"code","4cfcc68b":"code","da0385f5":"code","769099a3":"code","c42b544b":"code","7cbdbc38":"code","1c206ffd":"code","a95e089e":"code","abfcf18a":"code","6bed2776":"code","7056b5b0":"code","c79f3560":"code","5a504649":"code","0523d8be":"code","7912d956":"code","3f5bef94":"code","9c6843d2":"code","3d107770":"code","010e44da":"code","9d6f95be":"code","f379373c":"code","6fc2563f":"code","88bea285":"code","fc12ec63":"code","34c53c9f":"code","72225f0f":"code","cea58577":"code","fac5535b":"code","4571e5fe":"code","86be9936":"code","4adc39a2":"markdown","9ff76dfc":"markdown","8a23f8e2":"markdown","85569753":"markdown","38149265":"markdown","f07bb445":"markdown","2908a887":"markdown","7635d740":"markdown","dce53110":"markdown","8afb6d7d":"markdown","f1792ad3":"markdown","eb08cb71":"markdown","e17201f2":"markdown","aa17eff0":"markdown","03a8f607":"markdown","c1b911f3":"markdown","15891f28":"markdown","0f56bb9a":"markdown","043dba1d":"markdown","1e543dcd":"markdown","1c7ba7f7":"markdown","d32e764e":"markdown","43d628c0":"markdown","8a968f1b":"markdown","6b89999a":"markdown","9b58c4c5":"markdown","e824abcc":"markdown","9235d047":"markdown","7f339829":"markdown","bc06d1dc":"markdown","2d381704":"markdown","006325f3":"markdown","5860cf5a":"markdown","c1c32b1f":"markdown","ed993f60":"markdown","ff7298c3":"markdown","72f9e25a":"markdown","88da60f2":"markdown","c1e9aab7":"markdown","3426bf69":"markdown","6bb63b0a":"markdown","4adfa15c":"markdown","c384f0e7":"markdown","a6e190a0":"markdown","8f684156":"markdown","56bb2fc6":"markdown","d1c369cf":"markdown","0ca2b17c":"markdown","6337cb70":"markdown","373145a9":"markdown","912a4316":"markdown","7e3ecccd":"markdown","aae43b56":"markdown","607c7589":"markdown","1a1a3743":"markdown","028ddc60":"markdown","8d925a1e":"markdown","a90bbbd5":"markdown","d43f9536":"markdown","b5a2bb50":"markdown","957ec025":"markdown","fc06c0d1":"markdown","a08828a6":"markdown"},"source":{"df133697":"def apk(actual, predicted, k):\n    if actual not in predicted:  # \uc815\ub2f5\uc774 \uc81c\ucd9c\ud55c \uac12\uc5d0 \uc5c6\uc73c\uba74 score\ub294 0\n        return 0.0\n    for i in range(k):\n        if actual in  predicted[:i+1]:  # \uc81c\ucd9c\ud55c \uac12\uc774 K\ubc88\uc9f8 \ub9cc\uc5d0 \uc815\ub2f5\n            return 1.0 \/ len(predicted[:i+1])  # score","c508f531":"actual ='A'\npredicted = ['A','B','C']\napk(actual,predicted, 3)","18d211be":"predicted = ['B','A','C']\napk(actual,predicted, 3)","4cfcc68b":"predicted = ['B','C','A']\napk(actual,predicted, 3)","da0385f5":"predicted = ['B','C','D']\napk(actual,predicted, 3)","769099a3":"import os\ndata_path = \"\/kaggle\/input\/quickdraw-doodle-recognition\/\" # data set\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud55c \uacbd\ub85c\nprint(os.listdir(data_path))","c42b544b":"import pandas as pd\nsub_df = pd.read_csv(data_path+'sample_submission.csv')\nprint(\"test data \uc218:\",len(sub_df))\nsub_df.head()","7cbdbc38":"train_file_path = data_path + 'train_raw\/'\neiffel_df = pd.read_csv(train_file_path + 'The Eiffel Tower.csv')\neiffel_df.head()","1c206ffd":"train_simple_file_path = data_path + 'train_simplified\/'\neiffel_simple_df = pd.read_csv(train_simple_file_path + 'The Eiffel Tower.csv')\neiffel_simple_df.head()","a95e089e":"import json\nraw_images = [json.loads(draw) for draw in eiffel_df.head()['drawing'].values]\nsimple_images = [json.loads(draw) for draw in eiffel_simple_df.head()['drawing'].values]","abfcf18a":"import matplotlib.pyplot as plt\nfor index in range(3):\n    plt.rc('font', size=20)\n    f, (ax1, ax2) = plt.subplots(ncols=2,nrows=1,figsize=(16,8))\n    for x,y,t in raw_images[index]:\n        ax1.plot(x, y, marker='.')\n    for x,y in simple_images[index]:\n        ax2.plot(x, y, marker='.')\n    ax1.set_title('raw drawing')\n    ax2.set_title('simplified drawing')    \n    ax1.invert_yaxis()\n    ax2.invert_yaxis()\n    ax1.legend(range(len(raw_images[index])))\n    ax2.legend(range(len(simple_images[index])))\n    plt.show('svg')  ","6bed2776":"print(\"======== \uccab\ubc88\uc9f8 raw drawing\uc758 \uccab \ud68d Data \uc911 5\uac1c Point \uc815\ubcf4 =========\")\nprint(\"x\uc88c\ud45c: \", json.loads(eiffel_df['drawing'][0])[0][0][:5])\nprint(\"y\uc88c\ud45c: \", json.loads(eiffel_df['drawing'][0])[0][1][:5])\nprint(\"msec: \", json.loads(eiffel_df['drawing'][0])[0][2][:5])\n\nprint(\"======== \uccab\ubc88\uc9f8 Simplified drawing\uc758 \uccab \ud68d Data \uc911 5\uac1c Point \uc815\ubcf4 =========\")\nprint(\"x\uc88c\ud45c: \", json.loads(eiffel_simple_df['drawing'][0])[0][0][:5])\nprint(\"y\uc88c\ud45c: \", json.loads(eiffel_simple_df['drawing'][0])[0][1][:5])","7056b5b0":"train_csvs= os.listdir(train_file_path)\nprint(\"train_raw \ud3f4\ub354 \ub0b4 \ud30c\uc77c \uc218:\", len(train_csvs))\nprint(train_csvs[:5])\n\nfile_size = 0\nlabel_names = []\nfor csv_file in train_csvs:\n    file_size += os.path.getsize(train_file_path + csv_file) # data file\ub4e4\uc758 \uc6a9\ub7c9\uc744 \uacc4\uc0b0\n    label_names.append(csv_file.replace('.csv','')) \nprint(\"\ud30c\uc77c \ud06c\uae30 : \", file_size\/\/(1024*1024*1024) ,\"GB\")","c79f3560":"# kaggle hdd \uc6a9\ub7c9\uc774 \uc791\uc74c(5GB)\uc73c\ub85c local\uc5d0\uc11c \uac00\ub2a5\nfrom tqdm import tqdm\ndivide_shuffles = 100 # data\ub97c \ubd84\ud560 \ud560 file \uc218\nraw_shuffle_data_path = data_path + 'shuffle_raw_gzs\/'\ntry:\n    os.mkdir(raw_shuffle_data_path)\n    for y, csv_file in enumerate(tqdm(train_csvs)):\n        df = pd.read_csv(train_file_path+csv_file, usecols= ['drawing','key_id'])\n        df['y'] = y # label\n        df['cv'] = (df.key_id\/\/10000) % divide_shuffles # keyid\ub85c data \ub098\ub204\uae30.\n        for k in range(divide_shuffles):\n            filename = raw_shuffle_data_path +f'train_k{k}.csv'\n            chunk = df[df.cv == k] # 0~99 \uae4c\uc9c0 cv\uc5d0 \ubc88\ud638\ub85c select\n            chunk = chunk.drop(['key_id','cv'], axis=1)\n            if y == 0:\n                chunk.to_csv(filename, index=False) # \ucc98\uc74c\uc774\uba74 \ud30c\uc77c\uc744 \ub9cc\ub4e4\uace0\n            else:\n                chunk.to_csv(filename, mode='a', header=False, index=False) # add   \n    for k in tqdm(range(divide_shuffles)):\n        filename = raw_shuffle_data_path +f'train_k{k}.csv'\n        df = pd.read_csv(filename) # \uc544\uc9c1 \uae4c\uc9c0\ub294 label \uc21c\uc11c\ub300\ub85c data\uac00 \ub9cc\ub4e4\uc5b4 \uc838 \uc788\uc74c.\n        # label \ubcc4 \ud30c\uc77c\uc758 \ub0b4\uc6a9\uc744 shuffle \ud558\uae30 \uc704\ud574 \ub79c\ub364 \uac12 \ucd94\uac00\n        df['rnd'] = np.random.rand(len(df)) \n        # \ucd94\uac00\ub41c \ub79c\ub364\uac12\uc73c\ub85c \uc815\ub82c\ud558\uc5ec \uc21c\uc11c\ub97c shuffle\ud568\n        df = df.sort_values(by='rnd').drop('rnd', axis=1) \n        # ssd \uc6a9\ub7c9\uc774 \ubd80\uc871\ud558\uc9c0 \uc54a\ub2e4\uba74 compression\uc740 \ube7c\ub294\uac8c \ube60\ub984\n        df.to_csv(filename.replace('.csv','.gz'),compression='gzip', index=False) \n        os.remove(filename)\nexcept:\n    print(\"shuffled train data \uc900\ube44\ub294 \ud55c\ubc88\ub9cc \uc2e4\ud589\ud569\ub2c8\ub2e4.\")\n    pass","5a504649":"test_raw_df = pd.read_csv(data_path+\"test_raw.csv\")\ntest_raw_df.head()\nprint(test_raw_df.shape)","0523d8be":"test_raw_df.shape[0]%len(label_names) ","7912d956":"import cv2\nimport numpy as np\ndef draw_raw_cv2(raw_strokes,size=128,lw=6,last_drop_r=0.0,second_strokes = None):  \n    ofs = lw*2 # \uc644\uc131\ub41c \uc774\ubbf8\uc9c0\uc5d0 \ud14c\ub450\ub9ac \uacf5\ubc31 \n    limit_ett = 20*1000 # \ucd5c\ub300 \uc2dc\uac04 20\ucd08\n    npstrokes = [] \n    mminfo={\"xmin\":float('inf'),\"ymin\":float('inf')\n        , \"xmax\":float('-inf'),\"ymax\":float('-inf')} \n    \n    # strokes drop augmentation\n    drop_num = int(np.random.random()*last_drop_r *len(raw_strokes))\n    if drop_num>0:\n        raw_strokes = raw_strokes[:-drop_num]\n    \n    # mixup augmentation\n    if second_strokes is not None:\n        first_ett = raw_strokes[-1][-1][-1]\n        end_fist_st_len = len(raw_strokes)\n        raw_strokes.extend(second_strokes)\n        \n    for t, stroke in enumerate(raw_strokes):\n        npstroke = np.array(stroke)\n        #print(npstroke.shape)\n        npstrokes.append(npstroke)        \n        mminfo[\"xmin\"] = min(mminfo[\"xmin\"], min(npstroke[0]))\n        mminfo[\"xmax\"] = max(mminfo[\"xmax\"], max(npstroke[0]))\n        mminfo[\"ymin\"] = min(mminfo[\"ymin\"], min(npstroke[1]))\n        mminfo[\"ymax\"] = max(mminfo[\"ymax\"], max(npstroke[1]))\n        \n    ett=npstrokes[-1][-1][-1] # \uc5bc\ub9c8\ub098 \ube68\ub9ac \uc644\ub8cc\ud558\ub294\uac00 20\ucd08 \uc774\ud558  \n    nimg = np.zeros((size,size,3),dtype=float)\n    # print(mminfo) # min \uc88c\ud45c\uc5d0 \uc74c\uc218\uac00 \uc788\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc74c.   \n    org_width = mminfo[\"xmax\"] - mminfo[\"xmin\"] \n    org_height = mminfo[\"ymax\"] - mminfo[\"ymin\"]\n    ratio = max(org_width,org_height) \/ (size-ofs*2)\n    if ratio == 0 :\n        print('ratio 0 case ? null data ? log for debugging',mminfo)\n        return nimg\n    pre_st_t = 0 \n    for t, stroke in enumerate(npstrokes):\n        stroke[0] = (stroke[0] - mminfo[\"xmin\"])\/ratio + ofs\n        stroke[1] = (stroke[1] - mminfo[\"ymin\"])\/ratio + ofs\n        inertia_x = 0\n        inertia_y = 0\n        if second_strokes is not None and t == end_fist_st_len:\n            pre_st_t = 0\n        for i in range(len(stroke[0]) - 1): # \uac01 stroke\uc758 Point loop, \ub9c8\uc9c0\ub9c9 \uc88c\ud45c \uc804\uae4c\uc9c0\n            color = min((1.0 - 0.95*float(t)\/len(npstrokes)),1.0) # \ud68d \uc21c\uc5d0 \ub300\ud55c color\n            sx = int(stroke[0][i])\n            sy = int(stroke[1][i])\n            st = stroke[2][i]\n            ex = int(stroke[0][i + 1])\n            ey = int(stroke[1][i + 1])\n            et = stroke[2][i+1]\n            ## like \uc18d\ub825, \ube44 \uc815\uc0c1 data \uac00 \uc788\uc74c. et-st \uac00 \uc74c\uc218\uc778\uacbd\uc6b0 et-st\uac00 0\uc778 \uacbd\uc6b0\n            color_v = min((((sx-ex)**2+(sy-ey)**2)**0.5 \/ (abs(et-st)+1) *5), 1.0) \n            if i==0:\n                color_a = 0\n            else: ## \ud68d\uc758 \ubcc0\ud654\ub7c9, like \uac00\uc18d\ub825, \uccab\uc810\uc740 255   \n                color_a = min((((inertia_x-ex)**2 +\n                 (inertia_y-ey)**2)**0.5 \/ (abs(et-st)+1) *5), 1.0)          \n            nimg = cv2.line(nimg, (sx, sy), (ex, ey), (color,color_v,color_a), lw)\n            # print(color_v,color_a)\n            if i==0:\n                color_inter = min((float(st-pre_st_t)*10\/limit_ett),1.0)\n                if t == 0 or (second_strokes is not None \n                              and t == end_fist_st_len):\n                    color_inter = 1.0 # \uccab stroke\uc758 \uccab\ubc88\uc9f8 \uc810 \ud45c\uc2dc\n                # interval time\n                nimg = cv2.circle(nimg, (sx, sy), lw\n                                  , (0.0,0.0,color_inter), -1)\n            # \ub9c8\uc9c0\ub9c9 \ud68d\uc5d0 \ub9c8\uc9c0\ub9c9 \uc810    \n            if i==len(stroke[0])-2 and t == len(raw_strokes) -1: \n                color_end = (float(ett)\/(limit_ett)) # end time\n                nimg = cv2.circle(nimg, (ex, ey), lw\n                                  , (0.0,color_end,0.0), -1) \n            # mix up augmentation \ub9c8\uc9c0\ub9c9 \ud68d\uc5d0 \ub9c8\uc9c0\ub9c9 \uc810\n            if second_strokes is not None \\\n            and i==len(stroke[0])-2 and t == end_fist_st_len -1: \n                color_end = (float(first_ett)\/(limit_ett)) # end time\n                nimg = cv2.circle(nimg, (ex, ey), lw, (0.0,color_end,0.0), -1) \n                \n            inertia_x = ex + (ex-sx)\n            inertia_y = ey + (ey-sy)\n            pre_st_t=et         \n    return nimg","3f5bef94":"train_file0_df = pd.read_csv(raw_shuffle_data_path+'train_k0.gz')\ndraw_test = draw_raw_cv2(json.loads(train_file0_df.loc[0].drawing),  size=128, lw=2)\nfig,ax = plt.subplots(figsize=(5,5))\nax.set_title(label_names[train_file0_df.loc[0].y])\nax.imshow(draw_test)\nplt.show()","9c6843d2":"#  check last drop augmentation\ndraw_test_drop=draw_raw_cv2(json.loads(train_file0_df.loc[0].drawing),size=128\n                              ,lw=2,last_drop_r=0.3)\ndraw_test_drop_mix=draw_raw_cv2(json.loads(train_file0_df.loc[0].drawing)\n                            ,size=128,lw=2,last_drop_r=0.3 \n                ,second_strokes=json.loads(train_file0_df.loc[100].drawing))\nfig,ax = plt.subplots(ncols=3,figsize=(15,5))\nax[0].set_title(label_names[train_file0_df.loc[0].y] + ' \u25b6 orginal')\nax[0].imshow(draw_test)\nax[1].set_title(label_names[train_file0_df.loc[0].y] + ' \u25b6 drop_aug')\nax[1].imshow(draw_test_drop)\nax[2].set_title(label_names[train_file0_df.loc[0].y] + ' \u25b6 mix ' + \n                label_names[train_file0_df.loc[100].y])\nax[2].imshow(draw_test_drop_mix)\nplt.show()","3d107770":"import tensorflow as tf\nimport numpy as np\nimport json\nfrom tensorflow.keras.utils import to_categorical      \nclass DoodelGenerator(tf.keras.utils.Sequence):\n    def __init__(self,df_files,input_shape,batchsize,label_num=340\n                 ,lw=3,state='Train',last_drop_r=0.0,mixup_r = 0.0):\n        self.df_files = df_files\n        self.file_sel = 0 # \ud30c\uc77c list \uc911 \ud604\uc7ac fit\ud558\ub294\ub370 \uc0ac\uc6a9\ud560 \ud30c\uc77c index\n        self.batchsize = batchsize\n        self.input_shape = input_shape\n        self.label_num = label_num\n        self.lw = lw\n        self.state = state\n        self.last_drop_r = last_drop_r\n        self.mixup_r = mixup_r\n        self.on_epoch_end()\n        self.len = -(-len(self.df)\/\/self.batchsize) \n\n    def __len__(self):\n        return self.len\n\n    def __getitem__(self, index):\n        # batch size \ub9cc\ud07c index\ub97c \ubf51\uc74c\n        batch_idx = self.idx[index*self.batchsize:(index+1)*self.batchsize] \n        h,w,ch = self.input_shape\n        X = np.zeros((len(batch_idx), h,w,ch)) #batch\n        y = np.zeros((len(batch_idx), self.label_num))\n        df = self.df.loc[batch_idx]\n        mixup_num = int(self.batchsize*self.mixup_r)\n        mixup_df = self.df.loc[np.random.randint(0,len(self.df),size=mixup_num)]\n        mixup_strokes=[]\n        mixup_labels=[]\n        for raw_strokes, label in mixup_df.values:\n            mixup_strokes.append(json.loads(raw_strokes))\n            mixup_labels.append(label)\n            \n        for i in range(self.batchsize):\n            raw_strokes = json.loads(df.drawing.values[i])\n            if i < len(mixup_strokes):\n                X[i, :, :, ] = draw_raw_cv2(raw_strokes, size=h, lw=self.lw\n                ,last_drop_r = self.last_drop_r,second_strokes=mixup_strokes[i])\n                if self.state != 'Test':\n                    ysm_mix = self.smooth_labels(to_categorical(mixup_labels[i]\n                                                , num_classes=self.label_num))\n                    ysm_org = self.smooth_labels(to_categorical(df.y.values[i]\n                                                , num_classes=self.label_num))\n                    y[i, :] = (ysm_mix*0.5) + (ysm_org*0.5)\n            else:\n                X[i, :, :, ] = draw_raw_cv2(raw_strokes, size=h, lw=self.lw\n                                        , last_drop_r = self.last_drop_r)\n            \n                if self.state != 'Test':\n                    y[i, :] = to_categorical(df.y.values[i]\n                                             ,num_classes=self.label_num)\n            \n        if self.state != 'Test':\n            return X,y\n        else:\n            return X\n    \n    def get_cur_df(self): # \ud604\uc7ac \ub85c\ub529\ub418\uc5b4 \uc788\ub294 \ud30c\uc77c\uc744 \ubc18\ud658\ud558\ub294 \ud568\uc218, holdout set \ud3c9\uac00\uc2dc \uc0ac\uc6a9\n        return self.df \n    \n    def smooth_labels(self,labels, factor=0.1): # mix up augmentation \uc0ac\uc6a9\uc2dc \uc0ac\uc6a9\n        labels *= (1 - factor)\n        labels += (factor \/ labels.shape[0])\n        return labels\n    \n    def on_epoch_end(self):\n        self.df = pd.read_csv(self.df_files[self.file_sel])\n        print('current step file : ', self.df_files[self.file_sel]\n              ,'state:', self.state, 'df_len:', self.df.shape[0])\n        self.idx = np.tile(np.arange(len(self.df)),2) # train file size\uac00 flexible\ud568\uc73c\ub85c idx \ubc30\uc5f4\uc744 \uc5f0\uc7a5\n        if self.state == 'Train':\n            np.random.shuffle(self.idx)        \n        self.file_sel = (self.file_sel+1)%len(self.df_files) # next csv file roll\n    ","010e44da":"# tensorflow ver 2.1 \uc758 bug, model.fit \uc5d0\uc11c tf.keras.utils.Sequnce\uc758 on_epoch_end \ub97c \ud638\ucd9c\ud558\uc9c0 \uc54a\uc74c\n# \ubcc4\ub3c4\uc758 callback\uc5d0\uc11c \ud638\ucd9c\ud558\ub3c4\ub85d \ucd94\uac00, \ucd94\ud6c4 \ubc84\uadf8 \uc218\uc815\ubc84\uc804\uc73c\ub85c release \ub418\uba74 \uc0ad\uc81c\ud574\ub3c4 \ub418\ub294 \ubd80\ubd84\nclass OnEpochEnd(tf.keras.callbacks.Callback):\n    def __init__(self, callback): # train generator\uc758 on_epoch_end \ucf5c\ubc31 \uc778\uc790\ub85c \ubc1b\uc74c\n        self.callback = callback\n        \n    def on_epoch_end(self, epoch, logs=None): # \ub2e8\uc21c callback\uc744 \ud638\ucd9c \ud574\uc90c\n        self.callback()","9d6f95be":"df_files = [raw_shuffle_data_path +f'train_k{k}.gz' for k in range(divide_shuffles)]\nprint(\"\ud559\uc2b5\uc744 \uc704\ud574 \uc900\ube44\ub41c \ud30c\uc77c \uc218 : \", len(df_files))\ninput_shape = (128,128,3)\ngen_data_check = DoodelGenerator(df_files, input_shape=input_shape\n            ,batchsize=25,state='DataCheck',lw=2,last_drop_r=0.2,mixup_r= 0.1)\nimport matplotlib.pyplot as plt\nxx, y = gen_data_check.__getitem__(0)\nfig, axs = plt.subplots(5, 5, figsize=(10,10))\nlabels = np.argmax(y,axis=1) # generator\uc5d0\uc11c \ucd9c\ub825\ud55c labels\nfor i in range(25):\n    axs[i\/\/5][i%5].imshow(xx[i]) \n    axs[i\/\/5][i%5].axis('off')\n    axs[i\/\/5][i%5].set_title(label_names[labels[i]])\nplt.show()","f379373c":"train_vals = df_files[:-1]\nhold_out_set= df_files[-1:]\nprint('hold_out_set:',len(hold_out_set), 'train_val_set:',len(train_vals))\n\nR_EPOCHS = 1 # 2 \uc2e4\uc81c Epoch, 1Epoch \ub9cc \ud559\uc2b5\ud568\nEPOCHS = R_EPOCHS * (len(train_vals)-1)\nprint('Real Epochs:',R_EPOCHS, 'Divide Virtual Epoch:', EPOCHS)","6fc2563f":"!pip install efficientnet\nimport efficientnet.tfkeras as efn\ndef build_model(backbone= efn.EfficientNetB0\n                ,input_shape = (128,128,3),use_imagenet = 'imagenet'):\n    base_model = backbone(input_shape=input_shape\n                          ,weights=use_imagenet,include_top= False)\n    x = base_model.output\n    x = tf.keras.layers.GlobalAvgPool2D(name='gap')(x)\n    predictions = tf.keras.layers.Dense(len(label_names),activation='softmax'\n                    ,name='prediction')(x)\n    model = tf.keras.Model(inputs=base_model.input, outputs=predictions)\n    return model","88bea285":"def mapk(actual, predicted, k=3): # \ud559\uc2b5 \ud6c4 hold out set \uc744 \ud3c9\uac00 \ud558\ub294\ub370 \uc0ac\uc6a9\ud560 \ud568\uc218\n    return np.mean([apk(a, p, k) for a, p in zip(actual, predicted)])\n\ndef preds2catids(predictions): # submission\uc744 \uc704\ud574 top3 category\ub85c \ubcc0\ud658\ud560 \ud568\uc218\n    return pd.DataFrame(np.argsort(-predictions,axis=1)[:,:3]\n                        ,columns=['a','b','c'])\n    \ndef top_3_accuracy(y_true, y_pred):\n    return tf.keras.metrics.top_k_categorical_accuracy(y_true, y_pred, k=3)\n    \ndef map_at3(y_true, y_pred): # train \uacfc\uc815 \uc911\uc5d0 \ud3c9\uac00\ub97c \uc704\ud55c \ud568\uc218\n    map3 = tf.keras.metrics.top_k_categorical_accuracy(y_true, y_pred, k=1)*0.5\n    map3 += tf.keras.metrics.top_k_categorical_accuracy(y_true, y_pred, k=2)*0.17\n    map3 += tf.keras.metrics.top_k_categorical_accuracy(y_true, y_pred, k=3)*0.33    \n    return map3","fc12ec63":"recipes = []\nrecipes.append({'backbone':efn.EfficientNetB0,\"batch_size\":100\n        ,'name':'Efb0','val_sel':0,'input_shape':(128,128,3),'lw':2})\nrecipes.append({'backbone':efn.EfficientNetB4, \"batch_size\":40\n        ,'name':'Efb1','val_sel':4,'input_shape':(128,128,3),'lw':2})\nrecipes.append({'backbone':efn.EfficientNetB5, \"batch_size\":40\n        ,'name':'Efb2','val_sel':5,'input_shape':(128,128,3),'lw':2})\nrecipes.append({'backbone':efn.EfficientNetB7, \"batch_size\":28\n        ,'name':'Efb7','val_sel':7,'input_shape':(128,128,3),'lw':2})","34c53c9f":"def make_sub(model, test_datagen, holdout_datagen, model_name):\n   # ho_prob save\n    ho  = model.predict(holdout_datagen,verbose=1) \n    ho_df = holdout_datagen.get_cur_df()\n    ho = ho[:len(ho_df)]\n    top3 = preds2catids(ho)\n    ho_map3 = mapk(ho_df.y, np.array(top3)) # Hold Out \uc810\uc218 \uacc4\uc0b0\n    np.save(data_path+'output\/ho_prob_'+model_name+str(ho_map3)+'.npy',ho)\n\n    # test_prob save\n    test_predictions = model.predict(test_datagen, verbose=1)\n    test_predictions = test_predictions[:len(test_raw_df)]\n    top3 = preds2catids(test_predictions)\n    id2cat = {k: cat.replace(' ', '_') for k, cat in enumerate(label_names)}\n    top3cats = top3.replace(id2cat)\n    np.save(data_path+'output\/test_prob_' \n            +model_name+str(ho_map3)+'.npy',test_predictions)    \n\n    # single model test submission    \n    sub_df['word'] = top3cats['a'] + ' ' + top3cats['b'] + ' ' + top3cats['c']\n    submission = sub_df[['key_id', 'word']]\n    submission.to_csv(data_path+'output\/submission_'  \n                      +model_name+str(ho_map3)+'.csv', index=False)","72225f0f":"import random\n\nstrategy = tf.distribute.MirroredStrategy(  \n                tf.config.experimental.list_logical_devices('GPU')) \ngpus= strategy.num_replicas_in_sync  # \uac00\uc6a9 gpu \uc218 \nprint('use gpus:',gpus)\n\n# val map_at3 score \uac00 virtual epoch 10\ud68c \uc5f0\uc18d \uc99d\uac00 \ud558\uc9c0 \uc54a\uc73c\uba74, LR 1\/2 \uac10\uc18c\nreduce_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor='val_map_at3', factor=0.5\n            ,verbose=1, patience=10,cooldown=5, min_lr=0.00001,min_delta=0.00001) \n\nfor i, recipe in enumerate(recipes):\n    model_name = recipe[\"name\"] + '_val_' + str(recipe[\"val_sel\"]) \n    best_save_model_file = model_name + '.h5' \n    print('best_save_model_file path : ',best_save_model_file)\n    check_point=tf.keras.callbacks.ModelCheckpoint(monitor='val_map_at3',verbose=1\n        ,filepath=data_path + best_save_model_file,save_best_only=True,mode='max') \n\n    valid_file = train_vals[recipe[\"val_sel\"]]\n    train_files = list(np.delete(train_vals, recipe[\"val_sel\"]))    \n    # list \ub97c Shuffle, \uc911\ub2e8\ud6c4  \ub3d9\uc77c \ud30c\uc77c \uc7ac\ud559\uc2b5 \ud558\uc5ec Overfitting \ub418\ub294 \ubb38\uc81c \uc644\ud654\n    random.shuffle(train_files) \n    # Train Set\ub9cc augmentation \uc801\uc6a9\n    train_datagen = DoodelGenerator(train_files,input_shape=recipe['input_shape']\n                ,lw=recipe['lw'], last_drop_r=0.2 , mixup_r=0.1\n                , batchsize=recipe['batch_size']*gpus,state='Train') \n    valid_datagen = DoodelGenerator([valid_file],input_shape=recipe['input_shape']\n                ,lw=recipe['lw'],batchsize=recipe['batch_size']*gpus,state='Valid')\n    \n\n    with strategy.scope():    # \uac00\uc6a9 gpu \uc218 \ubaa8\ub450 \uc0ac\uc6a9\n        model = build_model(backbone= recipe['backbone']\n        ,input_shape=recipe['input_shape'], use_imagenet = 'imagenet')\n        model.compile(optimizer=tf.keras.optimizers.Adam(learning_rate=0.001*gpus)\n        ,loss='categorical_crossentropy'\n        ,metrics=[tf.keras.metrics.categorical_accuracy, top_3_accuracy, map_at3]) \n    # \ub3d9\uc77c \ubaa8\ub378\uc774\ub984\uc758 \uc0ac\uc804 \ud559\uc2b5\ub41c weights\uac00 \uc788\ub2e4\uba74 \ub85c\ub529 \ud6c4 \uc7ac\uc2dc\uc791   \n    if os.path.exists(data_path + best_save_model_file): \n        print('restart train : ', data_path + best_save_model_file)\n        model.load_weights(data_path + best_save_model_file)\n    hist = model.fit(train_datagen\n        ,validation_data=valid_datagen,epochs= EPOCHS,verbose=1\n        ,callbacks =[reduce_lr, check_point, OnEpochEnd(train_datagen.on_epoch_end)])\n    # \ud559\uc2b5 \uc644\ub8cc \ud6c4 Best Score Model \ub85c\ub529\n    model.load_weights(data_path + best_save_model_file) \n    test_datagen = DoodelGenerator([data_path+\"test_raw.csv\"]\n                            ,input_shape=recipe['input_shape'],lw=recipe['lw']\n                            , batchsize=recipe['batch_size']*gpus,state='Test')\n    holdout_datagen = DoodelGenerator(hold_out_set,input_shape=recipe['input_shape']\n                            ,lw=recipe['lw']\n                            , batchsize=recipe['batch_size']*gpus,state='Holdout')\n    # hold out & test set, probability \ud30c\uc77c \uc800\uc7a5\n    make_sub(model, test_datagen, holdout_datagen, model_name) ","cea58577":"import pandas as pd\nimport numpy as np\noutput_path = data_path+'output\/'\noutputs = os.listdir(output_path)\n # hold out probability\nhold_out_probs = [output_path+f for f in outputs if f.find('ho_prob') >= 0 ]\n# test probability\ntest_out_probs = [output_path+f for f in outputs if f.find('test_prob') >= 0 ] \n\nho_df = pd.read_csv(hold_out_set[0])\nho_s = []\nfor prob_path in hold_out_probs:\n    ho = np.load(prob_path)\n    ho = ho[:len(ho_df)]\n    ho_s.append(ho)\ntargets = ho_df.y.to_numpy() # hold out target","fac5535b":"from scipy.optimize import OptimizeResult\ndef map3_loss(weights, predictions, targets):\n    final_prediction = 0\n    for weight, prediction in zip(weights, predictions):\n            final_prediction += weight*prediction\n    top3 = np.argsort(-final_prediction, axis=1)[:, :3]\n    ho_map3 = mapk(targets, np.array(top3))    \n    print(weights, ho_map3)\n    return 1 - ho_map3\n\ndef custom_minimizer(fun,x0,args=(),stepsize=0.1,maxiter=100,callback=None):\n    bestx = x0\n    besty = fun(x0,*args) # loss func\n    funcalls = 1\n    niter = 0\n    improved = True\n    stop = False\n\n    while improved and not stop and niter < maxiter: \n        improved = False\n        niter += 1\n        for dim in range(np.size(x0)):\n            # \uac01 prob\uc5d0 \ud574\ub2f9\ud558\ub294 weight\ub97c step size\ub9cc\ud07c +,- \ubc29\ud5a5 \uc774\ub3d9\ud55c \uacf3\uc758 \n            # loss \uacc4\uc0b0\ud558\uace0, \uac00\uc7a5 \uc904\uc5b4\ub4dc\ub294 \ubc29\ud5a5\uc73c\ub85c \uc5c5\ub370\uc774\ud2b8\n            for s in [bestx[dim] - stepsize, bestx[dim] + stepsize]: \n                testx = np.copy(bestx)\n                testx[dim] = s\n                minx = min(testx)\n                if minx<0: \n                    testx-=minx  \n                testx\/=sum(testx)\n                testy = fun(testx, *args) \n                funcalls += 1\n                if testy < besty: \n                    besty = testy\n                    bestx = testx\n                    improved = True\n            if callback is not None:\n                callback(bestx)\n    return OptimizeResult(fun=besty, x=bestx, nit=niter, success=(niter > 1)) \n\nstarting_values = [0.25]*len(ho_s) # \uade0\ub4f1 \ubd84\ud560 \ubd80\ud130 Start\nres = custom_minimizer(map3_loss,starting_values, args=(ho_s, targets))\nprint('Best Ensamble Score: ', 1-res['fun'])\nprint('Best Weights:', res['x'])","4571e5fe":"def ens_sub(ens_prob, file_name='ens_sub.csv'):\n    top3 = preds2catids(ens_prob)\n    id2cat = {k: cat.replace(' ', '_') for k, cat in enumerate(label_names)}\n    top3cats = top3.replace(id2cat) \n    sub_df['word'] = top3cats['a'] + ' ' + top3cats['b'] + ' ' + top3cats['c']\n    submission = sub_df[['key_id', 'word']]\n    submission.to_csv(data_path+'output\/'+ file_name, index=False)\n    \nens_prob = np.zeros((len(sub_df),len(label_names)))\nfor i, prob_path in enumerate(test_out_probs):\n    ens_prob += (np.load(prob_path) * res['x'][i])\n    \nens_sub(ens_prob)","86be9936":"from collections import Counter,OrderedDict\nfrom operator import itemgetter\ndef balancing_predictions(test_prob,factor=0.1,minfactor=0.001,patient=5\n                          ,permit_cnt=332,max_search=10000,label_num=340):\n    maxk = float('inf')\n    s_cnt = np.zeros(label_num)\n    for i in range(max_search):\n        ctop1 = Counter(np.argmax(test_prob,axis=1))\n        ctop1 = sorted(ctop1.items(), key=itemgetter(1), reverse=True)\n        if maxk > ctop1[0][1]:\n            maxk = ctop1[0][1]\n        else:\n            s_cnt[ctop1[0][0]]+=1\n            if np.max(s_cnt)>patient:\n                if factor< minfactor:\n                    print('stop min factor')\n                    break\n                s_cnt=np.zeros(label_num)\n                factor*=0.99\n                print('reduce factor: ',factor,', current max category num: '\n                ,ctop1[0][1])\n\n        if ctop1[0][1] <= permit_cnt:\n            print('idx: ',ctop1[0][0] ,', num: ', ctop1[0][1]) \n            break\n        test_prob[:,ctop1[0][0]] *= (1.0-factor)\n    return test_prob\n\nbal_ens_prob = balancing_predictions(ens_prob)\nens_sub(bal_ens_prob,'bal_ens_sub.csv')","4adc39a2":"> \uc608\uce21 \ud55c 3\uac1c\uc758 \uac12 \ubaa8\ub450 \uc815\ub2f5\uc774 \uc544\ub2d0 \uacbd\uc6b0\uc5d0 Score\ub294 0.0 \uc785\ub2c8\ub2e4.","9ff76dfc":">\uc815\ub2f5\uc774 'A' \uc778 Data\uac00 \uc788\ub2e4\uace0 \ud560\ub54c, \ubaa8\ub378\uc774 3\uac1c\uc758 \uac12\uc744 \uc608\uce21 \ud560 \uacbd\uc6b0 AP@K\uc810\uc218\uac00 \uc5b4\ub5a4 \uac12\uc774 \ub098\uc624\ub294\uc9c0 \ud655\uc778\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","8a23f8e2":"> \ub300\ud68c \uc911\uc5d0\ub294 \ubbf8\ucc98 \uc54c\uc9c0 \ubabb\ud588\uc9c0\ub9cc, \ub300\ud68c\uac00 \ub05d\ub09c \ud6c4 1\ub4f1 \ud300\uc774 solution\uc744 \uacf5\uac1c\ud588\uc744 \ub54c test set\uc758 \ubd84\ud3ec\uc5d0 magic\uc774 \uc788\uc5c8\uc74c\uc774 \uc54c\ub824 \uc84c\uc2b5\ub2c8\ub2e4. \uce74\ud14c\uace0\ub9ac \ubcc4 \uc608\uce21\uc758 \uc218\ub97c \uace0\ub974\uac8c balancing\ud574\uc11c \ud558\uba74 score\uac00 \uc62c\ub77c\uac04\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uac70\uae30\uc5d0 \ub300\ud55c hint\ub294 test set\uc758 \uac1c\uc218\uc5d0\uc11c \ud3ec\ucc29\ub418\uc5c8\uc2b5\ub2c8\ub2e4. test set\uc774 112199\uac1c\ub85c, label \uc22b\uc790\uc778 340\uac1c\ub85c \ub098\ub204\uba74 \ub098\uba38\uc9c0\uac00 339\uac1c\ub85c 1\uac1c \ubd80\uc871\ud569\ub2c8\ub2e4. test set\uc758 label \ubd84\ud3ec\uac00 \uace0\ub974\uac8c \uc788\uc744 \uac83\uc774\ub77c\ub294 \uc758\uc2ec\uc774 \ub4e4\uac8c \ub429\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \uc774\ub7f0 magic\uc774 \uc774 \ub300\ud68c \ud55c\ubc88\ub9cc \uc788\uc5c8\ub358 \uc77c\uc740 \uc544\ub2d9\ub2c8\ub2e4. test set\uc758 \ubd84\ud3ec\ub97c \uc54c \uc218 \uc788\ub294 hint\uac00 \uc5b4\ub290 \uc815\ub3c4 \uc788\ub2e4\uba74, \ucd5c\uc885 \uc81c\ucd9c \ud30c\uc77c\uc744 2\uac1c \uc120\ud0dd\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0, \ud558\ub098 \uc815\ub3c4\ub294 overfitting\uc744 \uac10\uc548\ud558\uace0\uc11c \uc120\ud0dd\ud560 \uc218\ub3c4 \uc788\uaca0\uc2b5\ub2c8\ub2e4. 2\uac1c\ub97c \ubaa8\ub450 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \ud558\ub294 \uac83\uc740 test set \ubd84\ud3ec\uac00 \uc608\uce21\uacfc \ub2e4\ub97c \ub54c\uc5d0\ub294 \ub9dd\ud560 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub458 \uc911 \ud558\ub098\ub294 \uc815\uc0c1\uc801\uc778 \uacb0\uacfc \ubb3c\uc744, \ud558\ub098\ub294 test set \ubd84\ud3ec\ub97c \ud65c\uc6a9\ud574 post processing\ub41c \uacb0\uacfc\ubb3c\uc744 \uc81c\ucd9c\ud558\uaca0\uc2b5\ub2c8\ub2e4.","85569753":"> \ub2e4\uc74c \uadf8\ub9bc\uacfc \uac19\uc774 100\uac1c\ub85c \ub098\ub208 Data Set\uc5d0\uc11c, 1\uac1c\ub294 Hold Out Set\uc73c\ub85c \ub9cc\ub4e4\uc5b4 Train \ubc0f Validation \ud558\ub294\ub370 \uc804\ud600 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc744 \uac83\uc785\ub2c8\ub2e4. Hold Out Set\uc744 \ub530\ub85c \ube7c\ub193\uc740 \uc774\uc720\ub294 \ubaa8\ub378 weighted average ensemble\uc744 \ud560 \ub54c\uc5d0 \ucd5c\uc801 weight\ub97c \ucc3e\ub294\ub370 \uc0ac\uc6a9\ud558\ub824\uace0 \ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc774\ub7f0 \ubc29\uc2dd\uc744 hold out\uc774\ub77c\uace0\ub3c4 \ud558\uace0 OOF (Out of Fold)\ub77c\uace0\ub3c4 \ubd80\ub985\ub2c8\ub2e4. Train-Validation \uacfc\uc815 \uc911\uc5d0 \ud55c\ubc88\ub3c4 \ubcf4\uc5ec\uc8fc\uc9c0 \uc54a\uc740 Data\ub97c \uc0ac\uc6a9\ud568\uc73c\ub85c \uc368 ensemble, stacking \ubaa8\ub378\uc758 Overfitting\uc744 \ubc29\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud559\uc2b5 \ubaa8\ub378\uc740 \uc11c\ub85c \ub2e4\ub978 \ubaa8\ub378\uc744 \uba87\uac1c \ud559\uc2b5\ud560 \uac83\uc778\ub370, \uc774\ub54c \uc0ac\uc6a9\ud560 Validation Set\uc744 \ubc14\uafb8\uace0, Train Set\ub3c4 \ud30c\uc77c 1\uac1c\ub294 \ubc14\ub00c\uac8c \ud560 \uac83\uc785\ub2c8\ub2e4. \uc774\ub807\uac8c \ud55c \uc774\uc720\ub294 Data Set\uc774 \uc791\ub2e4\uba74 (\ud559\uc2b5\ud558\ub294\ub370 \uba87\uc2dc\uac04 \uc815\ub3c4\ub77c\uba74) 1\uac1c\uc758 \ubaa8\ub378\uc5d0 \ub300\ud574\uc11c\ub3c4 Cross Validation \ud558\ub294\uac8c \uc77c\ubc18\uc801\uc778 \ubc29\ubc95\uc774\uc9c0\ub9cc, \uc774 \ub300\ud68c\uc758 \uacbd\uc6b0\ub294 1epoch\uac00 \uc791\uc740 \ubaa8\ub378\ub3c4 \ud558\ub8e8\uac00 \uac78\ub9ac\uae30 \ub54c\ubb38\uc5d0 4\uac1c \uc815\ub3c4\uc758 \ubaa8\ub378\uc744 2epoch \uc815\ub3c4 \ub9cc \ud559\uc2b5\ud560 \uac83\uc774\uace0, \uc774\ub54c \uac01\uae30 \uc11c\ub85c \ub2e4\ub978 Train-Validation Set\ub97c \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4. \ubaa8\ub378\ub3c4 \ub2e4\ub974\uc9c0\ub9cc, \ud559\uc2b5\ud558\ub294 Data Set\ub3c4 \uc57d\uac04 \ub2e4\ub974\uae30 \ub54c\ubb38\uc5d0 \uac01\uae30 \ubaa8\ub378\uc774 \uac19\uc740 Data Set\uc73c\ub85c \ud559\uc2b5\ud558\ub294 \uac83\ubcf4\ub2e4\ub294 \uc11c\ub85c \uc0c1\uad00\ub3c4\uac00 \uc801\uc744 \uac83\uc785\ub2c8\ub2e4. ensemble \ubc0f stacking model\uc740 base\uac00 \ub418\ub294 \ubaa8\ub378\uc774 \uc11c\ub85c \uc0c1\uad00\ub3c4\uac00 \uc801\uc744 \ub54c \ub192\uc740 score \uc774\ub4dd\uc744 \uc5bb\uc744 \uc218\uac00 \uc788\uc2b5\ub2c8\ub2e4.    \n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-ZUeg4kN-Ajw\/XqJ9tKbsMEI\/AAAAAAAAlcI\/xhtEi_cgvCQMsIg1zQG92H8TRx22_I2DgCLcBGAsYHQ\/s1600\/train_model1.PNG\"  width=\"650\" alt=\"doodle\/generator\">\n\n> \uadf8\ub9ac\uace0 \uc5ec\uae30\uc11c\ub294 \ubaa8\ub378\uc744 1epoch \uc815\ub3c4\ub9cc \ud559\uc2b5\ud558\uace0 \uc911\ub2e8\ud558\uc600\uc9c0\ub9cc, Single \ubaa8\ub378\ub85c\ub3c4 1epoch \ud559\uc2b5 \ud6c4 Learder board\uc5d0\uc11c \uc740\uba54\ub2ec \uc815\ub3c4 \ud68d\ub4dd\ud558\ub294 \uc810\uc218\uac00(0.945) \ub098\uc624\uace0, 1.5epoch \ud559\uc2b5 \ud6c4\uc5d0\ub294 \uae08\uba54\ub2ec(0.951) \uc218\uc900\uc758 \uc810\uc218\uac00 \ub098\uc635\ub2c8\ub2e4.  \ud559\uc2b5\ud55c weight\ub294 \ub2e4\uc74c link\uc5d0 \uc62c\ub824\uc838 \uc788\uc73c\ub2c8, \uc2e4\uc2b5\ud574 \ubcf4\uc2e4\ub54c \uc774\uc5b4\uc11c \ud559\uc2b5\ud558\uc2dc\uba74 \uc2dc\uac04\uc744 \uc808\uc57d\ud558\uc2e4 \uc218 \uc788\uace0, \ubaa8\ub378 \ud559\uc2b5 \uacfc\uc815\uc744 skip\ud558\uc2dc\uace0 \uc774\ud6c4 \uacfc\uc815\uc744 \uc9c4\ud589\ud558\uc2e4 \uc218\ub3c4 \uc788\uaca0\uc2b5\ub2c8\ub2e4.\n\n> https:\/\/www.kaggle.com\/ttagu99\/doodle-model\n\n\n> \ud559\uc2b5 \uc885\ub8cc \ud6c4\uc5d0\ub294 \uadf8\ub9bc 1 21\ucc98\ub7fc \"ho_prop_model1.npy\", \"test_prob_model1.npy\", \"submission_model1.csv\" 3\uac00\uc9c0 file\uc744 \ud559\uc2b5 \uacb0\uacfc\ubb3c\ub85c \uc800\uc7a5\ud560 \uac83\uc785\ub2c8\ub2e4. submission \ud30c\uc77c\uc740 \ucd5c\uc885 \uc81c\ucd9c\ud560 \ud30c\uc77c\uc740 \uc544\ub2c8\uc9c0\ub9cc, \ubaa8\ub3781\uc774 \uc5bc\ub9c8\ub098 \uc798 \ud559\uc2b5\ub418\uc5c8\ub294\uc9c0 Leader Board \uc21c\uc704 \ud655\uc778 \uc6a9\uc73c\ub85c \ub9cc\ub4e0 \ud30c\uc77c\uc774\uace0, \"ho_prop_model1.npy\" \ud30c\uc77c\uc740 Hold Out Set\uc744 \ubaa8\ub3781\uc774 \uc608\uce21\ud574\uc11c \ub098\uc624\ub294 Category\ubcc4 \ud655\ub960 \uac12\uc785\ub2c8\ub2e4. \"test_prob_model1.npy\"\uc740 Test Set\uc744 \uc608\uce21\ud574\uc11c \ub098\uc624\ub294 Category\ubcc4 \ud655\ub960 \uac12\uc785\ub2c8\ub2e4. 4\uac1c \ubaa8\ub378\uc744 \uc704 \uacfc\uc815\uc744 \ud1b5\ud574\uc11c \ud559\uc2b5 \ud6c4\uc5d0 \uc774 \ud30c\uc77c\ub4e4\uc744 \uc774\uc6a9\ud574\uc11c ensemble\ud558\uc5ec \ucd5c\uc885 \uc608\uce21 \ud30c\uc77c\uc744 \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4. 1\uac1c \ubaa8\ub378\uc744 \ud559\uc2b5\ud55c \ud6c4\uc5d0\ub294 \ubaa8\ub378\uc744 \ubcc0\uacbd\ud558\uace0 validation, train set\ub97c \ubcc0\uacbd\ud574\uc11c \ub2e4\ub978 \ubaa8\ub378\uc744 \ub2e4\uc74c \uadf8\ub9bc\uacfc \uac19\uc774 \uc774\uc5b4\uc11c \ud559\uc2b5\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-MwG9VPoeOQQ\/XqKprV7YZBI\/AAAAAAAAlco\/z5MT7XbtJrYKUWASIIlIabjebiqcSjO3QCLcBGAsYHQ\/s1600\/train_model2.PNG\"  width=\"650\" alt=\"doodle\/generator\">\n","38149265":"## Hyper Parameter Recipes","f07bb445":"> \uc704 \uc5d0\ud3a0\ud0d1 \uadf8\ub9bc\uc5d0\uc11c color\ub294 \ud68d \uc21c\uc785\ub2c8\ub2e4. raw \uc88c\ud45c\ub294 \ud3ec\uc778\ud2b8\ub4e4\uc774 \ub9ce\uc740 \ubc18\uba74, simplified\uc758 \ud3ec\uc778\ud2b8\ub294 Raw point\uc5d0\uc11c \uac19\uc740 \ubc29\ud5a5\uc73c\ub85c \uc774\ub3d9\ud55c \ubd80\ubd84\ub4e4\uc744 \uc0dd\ub7b5\ud558\uc5ec Point \uc218\uac00 \uc801\uc2b5\ub2c8\ub2e4. \uadf8 \uc678\uc5d0\ub3c4 raw\uc758 X, Y \ucd95 Range\ub97c \ubcf4\uba74 \uc77c\uc815\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub9bc\uc744 \uadf8\ub9b0 device \ucc3d \ud06c\uae30\uc5d0 \ub530\ub77c raw \uc88c\ud45c\uac00 \ub2e4\ub974\uae30 \ub54c\ubb38\uc73c\ub85c \uc608\uc0c1\ub429\ub2c8\ub2e4. simplified drawing\uc740 256 by 256\uc73c\ub85c \uc804 \ucc98\ub9ac \ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c raw data\uc5d0\ub294 \uc2dc\uac04\uc815\ubcf4\uac00 \uc788\uc73c\uba70, \uacf5\uc2dd\uc801\uc73c\ub85c \uba85\uc2dc\ud558\uc9c0\ub294 \uc54a\uc558\uc9c0\ub9cc, m-sec \ub2e8\uc704\ub85c \ucd94\uce21\ub429\ub2c8\ub2e4.\n","2908a887":"> \uc774 \ub300\ud68c\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 Data \uc911 \"sample_submissions.csv\"\uc744 \uba3c\uc800 \ud655\uc778\ud558\uba74, \u201ckey_id\u201d\uac00 Unique ID\uc774\uace0, \uc608\uce21 \uac12\uc744 \"word\" \uceec\ub7fc\uc5d0 3\uac1c \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ud558\uc5ec \uc81c\ucd9c\ud574\uc57c \ud569\ub2c8\ub2e4. \ud55c\uac00\uc9c0 \uc8fc\uc758\ud574\uc57c \ud560 \uc0ac\ud56d\uc774 \ub354 \uc788\ub294\ub370, label name\ub4e4 \uc911 \"The Eiffel Tower\"\ucc98\ub7fc \ubcf5\uc218\uc758 \ub2e8\uc5b4\ub85c \uad6c\uc131\ub41c \uacbd\uc6b0 \"_\" \ub85c \uacf5\ubc31\uc744 \ubcc0\ud658\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. Train Data\uc758 label Name\uc740 \uc544\ub798\ucc98\ub7fc \uacf5\ubc31\uc73c\ub85c \uad6c\ubd84\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","7635d740":"I'm sorry but , This code is written for people who are new to Kaggle in Korea kaggler community. So the commentary description is in Korean.","dce53110":"> \uc774 \ub300\ud68c\uc5d0\uc11c \uc81c\uacf5\ud55c data\ub294 raw, simplified \ub450 \uc885\ub958\uc758 Data\uc785\ub2c8\ub2e4. contrycode \ub294 \uadf8\ub9bc\uc744 \uadf8\ub9b0 user\uc758 \uad6d\uac00 \uc815\ubcf4\uc774\uba70, key_id\ub294 Unique Id,recognized\ub294 \uae30\uc874 \ubaa8\ub378\uc758 \uc778\uc2dd \uc5ec\ubd80, Timestamp\ub294 \uadf8\ub9b0 \uc2dc\uac04\uc785\ub2c8\ub2e4.","8afb6d7d":"<img src=\"https:\/\/3.bp.blogspot.com\/-Lf-9dJVZviw\/XorMnfJRyXI\/AAAAAAAAlUE\/-xRzyYzJFqQig6_cOic0l_yUWvR_IoF4gCK4BGAYYCw\/s1600\/%25ED%2597%25AC%25EB%25A9%25A7.PNG\"  width=\"650\" alt=\"doodle\/\uac8c\uc784\uc2dc\uc791\ud654\uba74\">","f1792ad3":"\n\n> \ub300\ud68c\uc758 \ud3c9\uac00 \uc9c0\ud45c\uc5d0 \ub300\ud574 \uba3c\uc800 \uad6c\ud604 \ubc0f \ud655\uc778\ud558\ub294 \uc774\uc720\ub294 \ub098\uc911\uc5d0 \ub9cc\ub4e4\uac8c \ub420 \ubaa8\ub378\uc744 validation set\uc73c\ub85c \ud3c9\uac00\ud558\uace0, training \uacfc\uc815 \uc911\uc5d0\ub294 early stopping \ubc0f learning rate schedule\uc5d0 \ud65c\uc6a9\ud558\uba70, \ubaa8\ub378\uc758 output\uc744 post processing \ubc0f ensemble \ud558\ub294\ub370 \ud65c\uc6a9, \ucd5c\uc885 \ub300\ud68c \uc81c\ucd9c\uc744 select \ud560 \ub54c\uc5d0\ub3c4 \ud65c\uc6a9\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. ","eb08cb71":"## Draw Image with Extra Features","e17201f2":"# \ub300\ud68c \uc18c\uac1c","aa17eff0":"> Image Classification, Segmentation \ub300\ud68c\ub294 \ubb3c\ub860, \uc5ec\ub7ec \ubd84\uc57c\uc758 \ub300\ud68c\uc5d0\uc11c Augmentation\uc740 \uc810\uc218 \ud5a5\uc0c1\uc5d0 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce69\ub2c8\ub2e4. \ub54c\ubb38\uc5d0 \uc5b4\ub5a4 \uc870\ud569\uc758 Augmentation\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc744\uc9c0 \ud0d0\uc0c9\ud558\uace0, \ub2e4\ub978 \uc0ac\ub78c\uc774 \uc0dd\uac01\ud558\uc9c0 \uc54a\ub294 \ucc3d\uc758\uc801\uc778 Augmentation\uc744 \ucc3e\uc544 \ucd94\uac00\ud558\ub294\ub370 \uc0c1\ub2f9\ud55c \ub178\ub825\uc744 \ud558\uac8c \ub429\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ub300\ud68c\ub294 Data \uc218\uac00 5000\ub9cc\uac1c \ub098 \ub418\uc5b4\uc11c, \uc791\uc740 \ubaa8\ub378\uc744 \uc120\ud0dd\ud574\ub3c4 1epoch\uc744 \ud559\uc2b5\ud558\ub294\ub370 \ud558\ub8e8 \uc774\uc0c1\uc774 \uc18c\uc694\ub420 \uac83\uc73c\ub85c \uc608\uc0c1\ub418\uace0, \ub9ce\uc740 \uc218\uc758 epoch\uc744 \ubc18\ubcf5\ud558\uc9c0 \uc54a\uc744 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 Augmentation\uc740 \ud559\uc2b5 \uc2dc\uac04(cpu\ubd80\ud558)\uc774 \ub298\uc5b4\ub098\uc9c0 \uc54a\ub294 \ubc29\ubc95\ub9cc \ucd5c\uc18c\ub85c \uc801\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc81c\uac00 \uc704 \ub370\uc774\ud130\ub97c \ubcf4\uba74\uc11c \uc0dd\uac01\ud55c Augmentation \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n>> \n    1. \ud68d \uc911 \ub4b7 \uc21c\uc11c\uc758 \ud68d\ub4e4\uc744 \ub79c\ub364\ud558\uac8c \uc0ad\uc81c \n    2. \ub450 \uc885\ub958\uc758 \uadf8\ub9bc\uc744 \ub3d9\uc2dc\uc5d0 \uadf8\ub9ac\uae30\n\n> \ud68d \uc911 \ub4a4\ucabd \uc21c\uc11c\uc758 \ud68d\ub4e4\uc744 random\ud558\uac8c \uc0ad\uc81c\ud55c \uc774\uc720\ub294 \uc2dc\uac04\uc774 \ubd80\uc871\ud558\uba74 \ub4a4\ucabd \ud68d\ub4e4\uc744 \uadf8\ub9ac\uc9c0 \ubabb\ud55c \ucc44 \uac8c\uc784\uc774 \uc885\ub8cc\ub420 \uac83\uc774\uace0, \uadf8 \ubd80\ubd84 \uc5c6\uc774\ub3c4 \ubb34\uc5c7\uc744 \uadf8\ub838\ub294\uc9c0 \uad6c\ubd84\ud560 \uc218 \uc788\ub294 \ubaa8\ub378\uc774 \ub354 \uc798 \ud559\uc2b5\ub41c \ubaa8\ub378\uc774\ub77c\uace0 \uc0dd\uac01\ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub450 \uc885\ub958\uc758 \uadf8\ub9bc\uc744 \ub3d9\uc2dc\uc5d0 \uadf8\ub9b0 \uc774\uc720\ub294 \ub450\uac00\uc9c0\uac00 \uc11e\uc5ec\uc11c \uc788\uc744 \ub54c\ub294 \ub450\uac00\uc9c0 Label\uc5d0 \ub300\ud574 \uc608\uce21 \ud655\ub960\uc774 \ube44\uc2b7\ud558\uac8c \ub098\uc624\ub294 \ubaa8\ub378\uc774 \ub354 \uc798 \ud559\uc2b5\ub41c \ubaa8\ub378\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \n\n> \uc804\uc5d0 \uc0b4\ud3b4\ubcf8 \"mug\" Label Data\uc5d0 \ub300\ud574 Augmentaion\uc744 \uc801\uc6a9 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \uc774\ubbf8\uc9c0 \uc911, \uac00\uc6b4\ub370 \uc774\ubbf8\uc9c0\ub294 \ud68d\uc911\uc5d0 \ub9c8\uc9c0\ub9c9 \ub450\uac1c\uac00 \uc5c6\uc5b4\uc9c4 \uc601\uc0c1\uc785\ub2c8\ub2e4. \ub450\uac1c\uac00 \uc5c6\uc5b4\uc838\ub3c4 \"mug\"\ub77c\uace0 \uc778\uc2dd\ud558\ub294\ub370\ub294 \uc601\ud5a5\uc774 \uc5c6\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. \ub610\ud55c \ub9c8\uc9c0\ub9c9 \ud68d\uc774 \uc0ac\ub77c\uc9c0\uba74\uc11c object\uc758 \ud06c\uae30\uac00 \uc870\uc815 \ub418\ub294 Augmentation \ud6a8\uacfc\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc774 Augmetation\uc740 CPU \ubd80\ud558\ub97c \uc804\ud600 \ub298\ub9ac\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc624\ub978\ucabd \uc774\ubbf8\uc9c0\ub294 \"spider\" Label Data\uac00 \uc11e\uc5ec \uc788\ub294 \uc774\ubbf8\uc9c0 \uc785\ub2c8\ub2e4. Spider\uac00 \uc11e\uc77c\ub54c\uc5d0\ub3c4, \uac1c\ubcc4 \uadf8\ub9bc\ub4e4\uc758 \ud06c\uae30\uac00 \uc870\uc815 \ub418\ub294 \ud6a8\uacfc\uac00 \uc788\uc73c\uba70, \ub450\uac1c \uc774\ubbf8\uc9c0\ub97c \ub3d9\uc2dc\uc5d0 \uadf8\ub9ac\ub2e4 \ubcf4\ub2c8 \ubc30\uce58\uac00 \ub2ec\ub77c\uc838\uc11c Random Crop \uacfc \uac19\uc740 Augmentaion \ud6a8\uacfc\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uba87\uac1c\uc758 \ud68d\uc744 \ub354 \uadf8\ub9ac\ub2e4 \ubcf4\ub2c8 CPU \ubd80\ud558\uac00 \uc788\uc9c0\ub9cc, Rotate, Shear, Blur \ub4f1 \ubcf4\ud1b5\uc758 Image Augmentation\uc5d0 \ube44\ud574 \ubd80\ud558\ub7c9\uc740 \ub9e4\uc6b0 \uc801\uc2b5\ub2c8\ub2e4.\n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-C01OvZyvrHQ\/XqAcTm9gtII\/AAAAAAAAlaw\/l9jjs9tTL2kM8OSBMeNaTWbqvElC-gkCQCLcBGAsYHQ\/s1600\/mug_aug.PNG\"  width=\"650\" alt=\"doodle\/interval\">\n\n","03a8f607":"\ubb38\uc790\uc5f4\uc744 \ud30c\uc774\uc36c list\ub85c \ub9cc\ub4e4\uae30 \uc704\ud574 \ub2e4\uc74c \ucf54\ub4dc\ucc98\ub7fc json.loads \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4.","c1b911f3":">>> \ucc38\uace0. \uc774 \ucf54\ub4dc\ub294 \ucc45 \uc9d1\ud544\uc2dc \ucd5c\uc2e0 \ubc84\uc804\uc778 tensorflow 2.1 \uae30\uc900\uc73c\ub85c \uc791\uc131\ud588\uc2b5\ub2c8\ub2e4. tensorflow\ub294 1.x\ubc84\uc804\uc5d0\uc11c 2.x \ubc84\uc804\uc73c\ub85c \ubc14\ub00c\uba74\uc11c \uc0c1\ub2f9\ud788 \ub9ce\uc740 \ubd80\ubd84\uc774 \ubc14\ub00c\uc5c8\uc2b5\ub2c8\ub2e4. \ub54c\ubb38\uc5d0 \uc0ac\uc6a9\ud558\ub2e4\ubcf4\uba74 \uc5ec\ub7ec bug\uac00 \ub9ce\uc774 \ubc1c\uacac\ub429\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc6cc\ub099 \ucee4\ubba4\ub2c8\ud2f0\uac00 \ud06c\ub2e4 \ubcf4\ub2c8 \ube60\ub974\uac8c \uc548\uc815\ud654 \ub420 \uac83\uc73c\ub85c \uc0dd\uac01\ud569\ub2c8\ub2e4.\n\n> \uc774\uc804 \uacfc\uc815\uc5d0\uc11c \ub9cc\ub4e0 Generator\uc758 on_epoch_end \ud568\uc218\uc5d0 1 Virtual Epoch \ub9c8\ub2e4, \uc0c8\ub85c\uc6b4 \ud30c\uc77c\ub4e4\uc744 Loading\ud558\ub3c4\ub85d \ub9cc\ub4e4\uc5c8\uc9c0\ub9cc, model.fit \uc744 \uc218\ud589\ud558\uba74 on_epoch_end\uac00 \ud638\ucd9c\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. tensorflow ver2.1\uc5d0 bug\uac00 \uc788\ub294 \uc0c1\ud0dc\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 Custom Callback\uc744 \ucd94\uac00\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774 Callback\uc774 \ud558\ub294 \uc5ed\ud560\uc740 \ub2e8\uc21c on_epoch_end\ub97c \ud638\ucd9c\ud574\uc8fc\ub294 \uae30\ub2a5\uc785\ub2c8\ub2e4.","15891f28":"## Generator","0f56bb9a":"> \uc800\ub294 \uc9c0\uae08\uae4c\uc9c0 \ud55c\ubc88\ub3c4 \ub05d\ub09c \ub300\ud68c\ub97c \ubcf5\uae30\ud558\ub824 \ud558\uc9c0 \uc54a\uc558\uace0, \uce90\uae00 \ud560 \uc2dc\uac04\uc774 \uc870\uae08\uc774\ub77c\ub3c4 \ub098\uba74 \uc0c8\ub85c\uc6b4 \ub300\ud68c\ub97c \ud574\uc57c\uaca0\ub2e4\ub77c\ub294 \ub9c8\uc74c\ub9cc \uac00\uc9c0\uace0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ucc45\uc744 \uc4f0\uba70 \uadf8\uac83\uc774 \uc798\ubabb\ub41c \uc0dd\uac01\uc774 \uc5c8\ub2e4\ub294 \uac83\uc744 \uae68\ub2ec\uc558\uc2b5\ub2c8\ub2e4. \ub098 \uc790\uc2e0\uc774 \ub9cc\ub4e0 \ucf54\ub4dc\uc5d0, \ub9ce\uc740 \uc624\ub958\uac00 \uc788\uc5c8\uace0, \uadf8 \uc624\ub958\ub97c \ub9cc\ub4e4\uc9c0 \uc54a\uc558\ub2e4\uba74 \ud6e8\uc52c \ub354 \uc88b\uc740 \uc810\uc218\ub97c \ub0bc \uc218 \uc788\uc5c8\ub2e4\ub294 \uac83\uc744 \uc54c\uc558\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc2e4\uc218 \ud588\ub358 \uc624\ub958\ub4e4\uc744 \ubcf5\uae30 \ud558\uc9c0 \uc54a\uc558\uc73c\ub2c8, \ube44\uc2b7\ud55c \ub300\ud68c\uc5d0\uc11c \uac19\uc740 \uc624\ub958\ub97c \ubc94\ud558\uace0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ub4e4\uc5b4\uac04 \uc2dc\uac04\uc5d0 \ube44\ud574 \uc2e4\ub825\uc774 \ub9ce\uc774 \uc548\ub298\uc5c8\uaca0\uad6c\ub098 \ub77c\ub294 \uc0dd\uac01\uc774 \ub4ed\ub2c8\ub2e4. \uc774\uc804\uc5d0 \uce90\uae00\ud558\ub294 \uc2dc\uac04 \ubd84\ubc30\uac00 \uc0c8\ub85c\uc6b4 \ub300\ud68c:\ub05d\ub09c \ub300\ud68c 10:0 \uc774\uc5c8\ub2e4\uba74, 9:1 \uc815\ub3c4\ub294 \ubc30\ubd84\ud574\uc11c \ub05d\ub09c \ub300\ud68c\ub97c \ubcf5\uae30\ud558\uba70 \ud558\ub098\uc758 \ub300\ud68c\ub97c \ub9c8\ubb34\ub9ac \ud574\uc57c\uaca0\uc2b5\ub2c8\ub2e4.\n\n> \uc5ec\ub7ec\ubd84\ub3c4 \ud639\uc2dc\ub098 \uc800\uc640 \uac19\uc740 \uc0dd\uac01\uc744 \uac00\uc9c0\uace0 \uacc4\uc2dc\ub2e4\uba74, \uc9c1\uc811 \ucc38\uc5ec\ud55c \ub300\ud68c\uc5d0 \ub300\ud574 \ubcf5\uae30\ud558\ub294 \uc2dc\uac04\uc744 \uc5b4\ub290 \uc815\ub3c4\ub294 \ubd84\ubc30\ud558\uc2dc\ub294 \uac83\uc744 \ucd94\ucc9c \ub4dc\ub9bd\ub2c8\ub2e4. \ub300\ud55c\ubbfc\uad6d \uce90\uae00\ub7ec \ud654\uc774\ud305!!!","043dba1d":"> \uc774\uc804 \uacfc\uc815\uc5d0\uc11c Generator\ub97c \ub9cc\ub4e4\uc5c8\uc73c\ub2c8, Data \uc0dd\uc131\uc5d0 \uacb0\ud568\uc774 \uc5c6\ub294\uc9c0 Check \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub300\ubd80\ubd84\uc758 \ub525\ub7ec\ub2dd \ub300\ud68c\uc5d0\uc11c\ub294 Generator\ub97c \ub9cc\ub4e4\uac8c \ub418\uba74, Data \uc0dd\uc131\uc774 \uc81c\ub300\ub85c \ub418\ub294\uc9c0 \ud56d\uc0c1 Check\ub97c \ud574\ubcf4\uc544\uc57c \ud569\ub2c8\ub2e4. \uc5ec\ub7ec \uc624\ub958\ub4e4\uc744 \ubc94\ud558\uac8c \ub418\uae30 \ub54c\ubb38\uc5d0 \uaf2d Image \ubc0f Label\uc774 \uc6d0\ud558\ub294 \ub300\ub85c \ub098\uc624\ub294\uc9c0 \ud655\uc778\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \uc624\ub958\ub4e4\uc740 \ucf54\ub4dc \uc624\ub958\ub294 \uc544\ub2c8\uc5b4\uc11c \ubc14\ub85c \ud655\uc778\uc740 \uc548\ub418\uace0 Training \ud6c4\uc5d0 \uc810\uc218\uac00 \ub0ae\uac8c \ub098\uc624\uace0 \ub098\uc11c \ud655\uc778\uc774 \ub418\uae30 \ub54c\ubb38\uc5d0, \ubbf8\ub9ac Check\ub97c \ud558\uba74 \uc0c1\ub2f9\ud55c \uc2dc\uac04\uc744 \uc808\uc57d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc81c\uac00 \uc8fc\ub85c Check \ud558\ub294 Point\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n>> \n    1. Image\uc640 Label\uc774 \uc798\ubabb Matching\ub41c \uacbd\uc6b0\n    2. Train Data\uac00 Shuffle\uc774 \uc548 \ub41c \uacbd\uc6b0\n    3. Augmentation \uacb0\uacfc\uac00 \uc2e4\uc81c Data\uc5d0\uc11c\ub294 \uc808\ub300 \ub098\uc624\uc9c0 \uc54a\uc744 \ubc95\ud55c Image\uc778 \uacbd\uc6b0\n\n\n> \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub85c generator\ub85c \ubd80\ud130 25\uac1c 1batch sample\uc744 \ubc1b\uc740 \ud6c4 Display \ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \"dishwasher\" \uc774\ubbf8\uc9c0\ub294 \"mug\" Label\uc744 \uac00\uc9c4 Data\uc5d0 mix-up augmentation \uc774 \uc801\uc6a9\ub418\uc5b4 \ub098\uc628 \uc774\ubbf8\uc9c0\uace0, Label\uc740 argmax\ub85c \ud45c\uc2dc\ud558\uc5ec dishwasher\uac00 \ub418\uc5c8\uc9c0\ub9cc, raw data\ub294 mug, dishwasher\uac00 \uac01\uac01 0.45 \uc529 \uc774\uace0 \ub098\uba38\uc9c0 Label\ub4e4\uc774 0.1 \uc744 \ub098\ub204\uc5b4 \uac16\ub294 \uac12\uc73c\ub85c Smoothing \ub418\uc5b4 \uc758\ub3c4\ub300\ub85c \uc0dd\uc131 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc6b0\ud558\ub2e8\uc758 \"elbow\" Label\uc744 \uac00\uc9c0\ub294 \uc774\ubbf8\uc9c0\ub294 \uc804\ud600 \"elbow\"\ucc98\ub7fc \ubcf4\uc774\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud639\uc2dc\ub098 generator\uc5d0 \uc624\ub958\uac00 \uc788\ub294\uc9c0, \ud30c\uc77c\uc744 \uc9c1\uc811 \uc5f4\uc5b4 data \uc790\uccb4\uac00 noisy\ud568\uc744 (\uc624\ub958\ub4e4\uc774 \uac04\ud639 \uc788\uc74c\uc744) \ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4. \n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-fOCFEO5__xc\/XqBbne7qa7I\/AAAAAAAAlbI\/9jzFoNi16H8XbMehY0cnj9FwTaurCW9TQCLcBGAsYHQ\/s1600\/gen_check.PNG\"  width=\"650\" alt=\"doodle\/generator\">","1e543dcd":"\n<img src=\"https:\/\/3.bp.blogspot.com\/--yXDksuqSbs\/XorMjy6LV4I\/AAAAAAAAlT8\/3w6oLriliD8zI-MWCXWLQ01XBr16atdFQCK4BGAYYCw\/s1600\/%25EC%25A2%2585%25EB%25A3%258C.PNG\"  width=\"650\" alt=\"doodle\/\uac8c\uc784\uc885\ub8cc\ud654\uba74\">\n","1c7ba7f7":"## \ud3c9\uac00 \uc9c0\ud45c\n\n> \uc774 \ub300\ud68c\uc758 \ud3c9\uac00 \uc9c0\ud45c\ub294  MAP@K(mean average precision at k) \ub97c \uc4f0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub300\ud68c\uc5d0\uc11c\ub294 k\uac00 3\uc785\ub2c8\ub2e4. \uc8fc\ub85c \uc815\ubcf4 \uac80\uc0c9 \ubd84\uc57c\uc5d0\uc11c \ub9ce\uc774 \uc4f0\ub294 metric\uc73c\ub85c \uc54c\uace0\ub9ac\uc998\uc774 k\uac1c \ucd94\ucc9c\/\uc608\uce21\ud55c \uac12\ub4e4\uc774, \uba87 \ubc88\uc9f8 \ub9cc\uc5d0 \ub9de\ucd98 \uac83\uc778\uc9c0 \uac00\uc911\uce58\uac00 \ubc18\uc601\ub41c \uc810\uc218\ub77c\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\n> MAP@K\ub294 test set\ub4e4\uc758 AP@K\uc758 \ud3c9\uade0\uc785\ub2c8\ub2e4. AP@K\uac00 \uc5b4\ub5bb\uac8c \uacc4\uc0b0\ub418\ub294\uc9c0 \uc544\ub798 \uc608\ub97c \ud1b5\ud574\uc11c \uc0b4\ud3b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc815\ub2f5\uc778 'A'\uc778 4\uac1c\uc758 test set\uc5d0 \ub300\ud574, \uac01 test set\ubcc4\ub85c prediction \uac12 3\uac1c\uc529\uc744 \uc81c\ucd9c\ud588\uc744 \uacbd\uc6b0 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4. \uc774 \ub300\ud68c\uc5d0\uc11c\ub294 test set 1\uac1c row\ubcc4 \uc815\ub2f5\uc740 1\uac1c\uc774\uace0, \uc81c\ucd9c\uc740 3\uac1c\uc758 \uac12\uc744 \ud558\uba70, \uc911\ubcf5\ub41c \uac12\uc744 \uc81c\ucd9c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","d32e764e":"# \ub370\uc774\ud130 \ud0d0\uc0c9\uc801 \ubd84\uc11d","43d628c0":"> \uc774\ubc88 \ub300\ud68c\uc758 \ub370\uc774\ud130\ub97c \ub2e8\uc21c \uc704\ucc98\ub7fc \uc88c\ud45c \uadf8\ub9bc\ub9cc \uadf8\ub824\uc11c CNN \ubaa8\ub378\ub85c \ud559\uc2b5\ud560 \uacbd\uc6b0\uc5d0\ub3c4 \uc5b4\ub290\uc815\ub3c4(MAP@3 0.90\uc774\uc0c1) \uc810\uc218\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ucf54\ub4dc\uc5d0\uc11c\ub294 \ub525\ub7ec\ub2dd \ubaa8\ub378\uc5d0 \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c input\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc11c \ub354 \ub192\uc740 \uc810\uc218\ub97c \uc5bb\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. ","8a968f1b":"> training\uc744 \uc704\ud55c raw\ud30c\uc77c\ub4e4\uc758 \uc6a9\ub7c9\uc744 \ud655\uc778\ud574 \ubcf4\uba74 \ucd1d 204GB\ub85c \ubaa8\ub450 Loading \ud558\ub294 \uac83\uc740 Data \ucef4\ud4e8\ud130 \ub9ac\uc18c\uc2a4 \uc0c1 \uc5b4\ub835\uc2b5\ub2c8\ub2e4. \ub54c\ubb38\uc5d0 training\uc744 \uc704\ud55c \ud30c\uc77c\uc744 \ubd84\ud560\ud558\uaca0\uc2b5\ub2c8\ub2e4.","6b89999a":"> 1\uac1c \ubaa8\ub378\uc744 \ud559\uc2b5\ud558\uace0 \ub098\uc11c\ub294 \ud574\ub2f9 \ubaa8\ub378\uc5d0 \ub300\ud55c hold out set probability\uc640 test set\uc758 probability\uac00 \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc5d0, \ub2e4\uc74c\uacfc \uac19\uc774 \ud559\uc2b5\ub41c \ubaa8\ub378\ub85c hold out set\uacfc test set\uc744\uc608\uce21 \ud6c4 numpy array\ub85c \uc800\uc7a5\ud558\ub294 \ud568\uc218\ub97c \uba3c\uc800 \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.","9b58c4c5":"\n> Data Handling \ubc0f \uc26c\uc6b4 \ubaa8\ub378 \uc791\uc131\uc744 \uc704\ud574\uc11c\ub294 simplified data\ub97c \uc0ac\uc6a9\ud574\ub3c4 \ubb34\ubc29\ud558\uaca0\uc9c0\ub9cc, \uc5ec\uae30\uc11c\ub294 \uba54\ub2ec\uad8c \uc810\uc218\ub97c \uc5bb\ub294 \uac83\uc774 \ubaa9\ud45c\uc784\uc73c\ub85c, \uc815\ubcf4\uac00 \ub9ce\uc740 raw data\ub97c \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.","e824abcc":"> Kaggle \ub300\ud68c\ub97c \ud558\ub2e4 \ubcf4\uba74 \uac04\ud639 \uc774\ub807\uac8c data\uc758 \uc591\uc774 \ud070 \ub300\ud68c\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f4 \uacbd\uc6b0\uc5d0\ub294 \uac1c\uc778 PC\uc5d0\uc11c \n\uc9c4\ud589\ud558\ub824\uba74 \ud558\ub4dc\uc6e8\uc5b4\uc758 \uc131\ub2a5\uc774 \uc788\uc5b4\uc57c \uc218\ud6e8\ud569\ub2c8\ub2e4. \uc800\uc758 \uacbd\uc6b0\uc5d0\ub294 SSD\uc758 \uc6a9\ub7c9\uc774 \ubd80\uc871\ud574\uc11c \ub2e4\uc74c\uacfc \uadf8\ub9bc\uacfc \uac19\uc774 \ud559\uc2b5\uc5d0\uc11c \n\uc0ac\uc6a9\ud560 data \ud30c\uc77c\ub4e4\uc744 \uc555\ucd95\ud574\uc11c(\uc555\ucd95 \ud6c4 100GB \uc218\uc900) SSD\uc5d0 \ub123\uace0  \uae30\uc874 \ud30c\uc77c\ub4e4\uc744 \uc0ad\uc81c\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ubcc0\uacbd\ud558\ub294 \uc774\uc720\ub294 Train \uacfc\uc815\uc911\uc5d0\ub294 label \ubcc4\ub85c data\ub97c \uc11e\uc740 \ud6c4 Model\uc758 input\uc73c\ub85c \uc8fc\uc5b4\uc57c \ud558\uc9c0\ub9cc, 204G \uc5d0 \ud574\ub2f9\ud558\ub294 \ud30c\uc77c\uc744 \ubaa8\ub450 \uba54\ubaa8\ub9ac\uc5d0 \ub85c\ub529\ud558\uace0, Shuffle\ud574\uc11c Input Data\ub85c \uc4f8 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. Image\ub85c \ubbf8\ub9ac \ubcc0\ud658\ud558\uc9c0 \uc54a\uc740 \uc774\uc720\ub294 5000\ub9cc\uac1c image\ub97c \uc800\uc7a5\ud560 hdd\uc6a9\ub7c9\uc774 \ubd80\uc871\ud569\ub2c8\ub2e4. numpy array\ub098 image\ub85c \ud30c\uc77c\uc744 \uc800\uc7a5\ud574\ub193\uc73c\uba74 7TB \uc815\ub3c4\uac00 \ud544\uc694\ud560 \uac83\uc73c\ub85c \uc608\uc0c1\ub429\ub2c8\ub2e4. \ub54c\ubb38\uc5d0 \uc800\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 Training \uc804\uc5d0 1\ud68c\ub9cc Data \uc900\ube44\ub97c \uc9c4\ud589\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc774 \uc791\uc5c5\uc740 1\ud68c\ub9cc \uc218\ud589\ud558\ub3c4\ub85d \ud558\uc600\uace0 \ubcc0\ud658\uc791\uc5c5\uc740 \ub300\ub7b5 4\uc2dc\uac04 \uc815\ub3c4 \uc18c\uc694\ub429\ub2c8\ub2e4.","9235d047":"# Ensemble","7f339829":"# Train","bc06d1dc":"> \uc774\uc804 \ud3c9\uac00 \uc9c0\ud45c\uc5d0\uc11c \uc124\uba85\ud55c metric\uc5d0 \ub300\ud574, Train \uc885\ub8cc \ud6c4 Hold Out Set\uc5d0 \ub300\ud574 \uacc4\uc0b0\ud560 \"mapk\"\ud568\uc218, \uadf8\ub9ac\uace0 submission \ud30c\uc77c\uc744 \ub9cc\ub4e4 \ub54c \uc0c1\uc704 3\uac1c category label\uc744 return \ud574\uc904 \"preds2catids\" \ud568\uc218, train \uacfc\uc815 \uc911\uc5d0 top3 accuracy\ub97c \ud655\uc778\ud558\uae30 \uc704\ud55c \"top_3_accuracy\" \ud568\uc218, MAP@3\ub97c \ud655\uc778\ud558\uae30 \uc704\ud55c \"map_at3\" \ud568\uc218\ub97c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4. \"map_at3\" \ud568\uc218\ub97c \ub2e4\uc74c\uacfc \uac19\uc774 \u201ctop_k_categorical_accuracy\u201d\ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c \uad6c\ud604\ud55c \uc774\uc720\ub294 \uad73\uc774 3\uac1c \uc608\uce21 \uac12\uc5d0 \ub300\ud574 precision\uc744 \uacc4\uc0b0\ud558\uc9c0 \uc54a\uc544\ub3c4 \uacc4\uc0b0 \uacb0\uacfc\uac00 \uac19\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n","2d381704":"## Save Hold Out Set Probability ","006325f3":">\uc608\uce21 \ud55c \uac12 \uc911 \uccab\ubc88\uc9f8 index\uc758 \uac12\uc778 'A'\uac00 \uc815\ub2f5\uacfc \uac19\uc74c\uc73c\ub85c, \uac00\uc7a5 \ub192\uc740 Score\uc778 1.0 \uc774 \ub429\ub2c8\ub2e4.","5860cf5a":"raw table\uc758 drawing\uacfc simplified\uc758 drawing\uc744 \uadf8\ub824\uc11c \ube44\uad50\ud574\uc11c \ud655\uc778\ud574 \ubcf4\uba74 \uc544\ub798\uc640 \uadf8\ub9bc\uacfc \uac19\uc740 \ucc28\uc774\uac00 \uc788\uc2b5\ub2c8\ub2e4.","c1c32b1f":"# Data Preprocessing","ed993f60":"> \uac01 \ubaa8\ub378\uc758 probability\uc758 \ucd5c\uc801 weight\ub97c \ucc3e\uae30 \uc704\ud574 \uacbd\uc0ac \ud558\uac15\ubc95\uc744 \uad6c\ud604\ud55c \ud568\uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. step size \ub9cc\ud07c weight\ub4e4\uc744 \uc774\ub3d9\ud558\uba70 loss\uac00 \uc904\uc5b4\ub4dc\ub294 \ubc29\ud5a5\uc73c\ub85c \uc870\uc808\ud558\uac8c \ud558\uc600\uc2b5\ub2c8\ub2e4. \uc774 \ub54c loss \ud568\uc218\ub294 1 - MAP@3\ub97c \uc0ac\uc6a9\ud558\uc600\uc2b5\ub2c8\ub2e4. ","ff7298c3":"> \uc774\uc81c \ub9cc\ub4e4\uc5b4\uc9c4 Generator\ub85c \ubaa8\ub378 \ud559\uc2b5\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.","72f9e25a":"> ensemble weight optimizer \uac00 \ucc3e\uc740 Best Weights\ub85c test probability \ub4e4\uc744 weighted average \ud558\uc5ec \ucd5c\uc885 probility\ub97c \uacc4\uc0b0\ud558\uace0, top3\ub97c \ucd94\ucd9c\ud574\uc11c \ucd5c\uc885 \uc81c\ucd9c \ud30c\uc77c\uc744 \uc0dd\uc131\ud558\uaca0\uc2b5\ub2c8\ub2e4.","88da60f2":"## Base Model","c1e9aab7":"<img src=\"https:\/\/1.bp.blogspot.com\/-VuXMw8jhwIM\/XqJ9tEG3tUI\/AAAAAAAAlcE\/wIOfyFQ8yN8bBAyWR2JzgzQ8MfwWzXvjwCLcBGAsYHQ\/s1600\/file_convert.PNG\"  width=\"650\" alt=\"doodle\/file_convert\">\n","3426bf69":"> \uc804\uccb4 Data Set\uc5d0 \ub300\ud574 \ud559\uc2b5\ud558\ub824\uba74 \uc774 \ucf54\ub4dc\ub97c \ub2e4\uc6b4\ub85c\ub4dc \ud6c4\uc5d0 Local\uc5d0\uc11c \uc9c4\ud589\ud574\uc57c\ud569\ub2c8\ub2e4. Kaggle Notebook\uc774 Hdd(5GB) \ub85c \uc81c\ud55c\uc774 \uc788\uae30 \ub54c\ubb38\uc5d0 \uc804\uccb4 Data Set\uc5d0 \ub300\ud574 \uc544\ub798 \uacfc\uc815\uc911 Preprocessing \uacfc\uc815\uc744 \uc9c4\ud589\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. ","6bb63b0a":"## Data Augmentation","4adfa15c":"<img src=\"https:\/\/1.bp.blogspot.com\/-XqqU6v6J494\/XorFM6lB6zI\/AAAAAAAAlTw\/yYLPIwVtR4Q-KJiXycHHflY4iMCFZkV5QCK4BGAYYCw\/s1600\/start_doodle.PNG\"  width=\"650\" alt=\"doodle\/\ub300\ud68c\uba54\uc778\">","c384f0e7":"\n|\uc815\ub2f5|\ubaa8\ub378\uc758 \uc608\uce21\uac12|AP@K \uc810\uc218|\n|------|:-------:|:----:|\n|A|**A**, B, C|1.0|\n|A|B, **A**, C|0.5|\n|A|B, C, **A**|0.33|\n|A|B, C, D|0.|\n\n","a6e190a0":"> \uc774\uc804 \uacfc\uc815\uc5d0\uc11c \ud559\uc2b5\ud55c \ubaa8\ub378 \ub4e4\ub85c hold out set, test set\uc758 probability \ub4e4\uc774 \uc800\uc7a5\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \ud30c\uc77c\uc744 loading\ud558\uc5ec \uac01 probability\ub4e4\uc758 weighted average ensemble\uc744 \uc9c4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4. CNN \ubaa8\ub378\uc744 \ud559\uc2b5 \uc5c6\uc774 ensemble\uc744 \uc704\ud55c \uacfc\uc815\ub9cc \uc2e4\uc2b5\uc744 \ud574\ubcf4\uc2dc\ub824\uba74 \uc544\ub798 kaggle notebook\uc744 \ud1b5\ud574\uc11c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n> https:\/\/www.kaggle.com\/ttagu99\/prediction-w-1-epoch-models <=\uc218\uc815","8f684156":"# \ub9fa\uc74c\ub9d0","56bb2fc6":"\n> \uc774 \ub300\ud68c\ub294 \uc0ac\ub78c\uc774 \uc81c\ud55c\uc2dc\uac04 20\ucd08 \uc774\ub0b4\uc5d0  \ube68\ub9ac \uadf8\ub9ac\ub294 \ub099\uc11c\ub4e4\uc744 Classification \ud558\ub294 \ub300\ud68c\uc785\ub2c8\ub2e4. \uc9c1\uc811 \uc801\uc73c\ub85c \uad00\ub828\uc774 \uc788\ub294 Application \uc73c\ub85c\ub294 \ud544\uae30 \uc778\uc2dd (Handwriting Recognition), \ubb38\uc790\uc778\uc2dd (OCR - Optical Character Recognition)\ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n","d1c369cf":">\uc138 \ubc88\uc9f8 index\uc758 \uac12\uc774 \uc815\ub2f5\uacfc \uac19\uc744 \uacbd\uc6b0\uc5d0 Score\ub294 0.33 \uc785\ub2c8\ub2e4.","0ca2b17c":"> \ud559\uc2b5\ud558\ub294 \uba54\uc778 \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uba3c\uc800 \uc815\uc758\ud55c \ubaa8\ub378\ub4e4\uc5d0 \ub300\ud574 for loop\ub97c \ub3cc\uba70 \ud559\uc2b5\ud558\uace0, \ud559\uc2b5\uc774 \uc644\ub8cc\ub41c \ud6c4\uc5d0\ub294 hold out set\uacfc test set\uc758 probability\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4. \uc774\ub54c Learning Rate\ub294 \ud2b9\ubcc4 \ud788 Search \ud558\uc9c0 \uc54a\uace0 default Learning Rate \uc778 0.001\uc744 \uc0ac\uc6a9\ud588\uace0, validation \uc2dc \ub9c8\ub2e4 MAP@3 score\uac12\uc774 \uc99d\uac00\ud558\uba74 weight save\ub97c \ud558\uc600\uace0, 10 virtual epoch \ub3d9\uc548 score\uac00 \uc99d\uac00\ud558\uc9c0 \uc54a\uc73c\uba74 Learning Rate\ub97c 0.5 \uacf1\ud574 \uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\ub978 \ub525\ub7ec\ub2dd \ubaa8\ub378\ub4e4\uc744 \ud559\uc2b5 \ud574 \ubcf4\uc2e0 \uacbd\ud5d8\uc774 \uc788\uc73c\uc2dc\ub2e4\uba74, Learning Rate \uac10\uc18c\uac00 \ub108\ubb34 \ubcf4\uc218 \uc801\uc774\uac8c \ub418\uc5b4 \uc788\ub2e4\uace0 \ub290\ub084 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc9c0\uae08 validation \ud558\ub294 \uc8fc\uae30\uac00 1 virtual epoch(\uc2e4\uc81c Epoch\uc758 1\/100 \uc218\uc900)\uc774\uae30 \ub54c\ubb38\uc5d0 \uc624\ud788\ub824 \ube60\ub974\uac8c \uac10\uc18c\ud558\uac8c \ub9cc\ub4e0 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud559\uc2b5\ud558\uae30 \uc804\uc5d0 train file \ub9ac\uc2a4\ud2b8\ub97c \ud55c\ubc88 shuffle\ud558\ub294 \uc774\uc720\ub294 1\uac1c \ubaa8\ub378\uc744 1 real epoch \ud559\uc2b5\ud558\ub294\ub370 \uac78\ub9ac\ub294 \uc2dc\uac04\uc774 24\uc2dc\uac04~48\uc2dc\uac04 \uc774\uae30 \ub54c\ubb38\uc5d0, \ub2e4\ub978 \ucef4\ud4e8\ud130 \uc0ac\uc6a9\uc774\ub098, \uc608\uae30\uce58 \uc54a\uac8c \ud559\uc2b5\uc774 \uc911\ub2e8\ub420 \uacbd\uc6b0 \ud30c\uc77c \ub9ac\uc2a4\ud2b8\ub97c \uac19\uc740 \uc21c\uc11c\ub85c \ud559\uc2b5\ud574\uc11c overfitting \ub418\ub294 \ubb38\uc81c\ub97c \uc644\ud654\ud558\uae30 \uc704\ud55c \uac83\uc785\ub2c8\ub2e4. \uc774 \ucf54\ub4dc\ub97c \uc218\ud589\ud558\uba74 \uacc4\ud68d\ud55c \ubaa8\ub378\ub4e4\uc5d0 \ub300\ud574 \uac01\uac01 probability, submission \ud30c\uc77c \ub4e4\uc774 \uc800\uc7a5\ub429\ub2c8\ub2e4. \uc9c1\uc811 local\uc5d0\uc11c \ud559\uc2b5\ud558\uae30 \uc5b4\ub824\uc6b0\uc2e0 \ubd84\ub4e4\uc744 \uc704\ud574, 1Epoch, 2Epoch\ub9cc \ud559\uc2b5\ud55c \ubaa8\ub378\ub4e4\ub85c \ucd94\uac00 \ud559\uc2b5 \uc5c6\uc774 Single Model\uc5d0 \ub300\ud55c \uc608\uce21 \ubc0f \uc81c\ucd9c\uae4c\uc9c0 \ubc14\ub85c \uac00\ub2a5\ud558\ub3c4\ub85d Kaggle Notebook \ub9c1\ud06c\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \ub9c1\ud06c\ub97c \ucc38\uace0\ud574\uc8fc\uc138\uc694.\ub85d Kaggle Notebook \ub9c1\ud06c\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \ub9c1\ud06c\ub97c \ucc38\uace0 \ud574\uc8fc\uc138\uc694. \n\n> https:\/\/www.kaggle.com\/ttagu99\/prediction-w-1-epoch-models <= \uc218\uc815\n\n","6337cb70":"## submission1","373145a9":"> \ubaa8\ub378\uc744 \ud558\ub098\ub9cc \ud559\uc2b5\ud55c\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub294 \ud544\uc694 \uc5c6\uaca0\uc9c0\ub9cc, \uc5ec\ub7ec \uac1c\ub97c \ud559\uc2b5\ud560 \uac83\uc784\uc73c\ub85c \uc544\ub798\uc640 \uac19\uc774 train \ud560 \ubaa8\ub378\uc5d0 \ud544\uc694\ud55c hyper parameter\ub4e4\uc744 \uae30\ub85d\ud55c \ub2e4\uc74c \ubc18\ubcf5 \uc218\ud589\ud560 \uac83\uc785\ub2c8\ub2e4. \ubaa8\ub378\uc5d0 \ub530\ub77c \uac00\ub2a5\ud55c batch size, \uc800\uc7a5\ud560 \uc774\ub984, \uadf8\ub9ac\uace0 validation \ud30c\uc77c\uc758 \ubc88\ud638\ub97c \uc9c0\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4. input shape\ub294 \uc5ec\uae30\uc11c\ub294 128x128 size\uc5d0 \ud68d\uc758 \ub450\uaed8\ub294 2\ub85c \ud1b5\uc77c\ud558\uc600\ub294\ub370, \ub2e4\ub978 \uc774\ubbf8\uc9c0 \uc0ac\uc774\uc988\uc5d0 line \ub450\uaed8\ub3c4 \uc11c\ub85c \ub2e4\ub974\uac8c \ud574\uc11c \ubaa8\ub378\uc744 \ud559\uc2b5\ud55c\ub2e4\uba74 \ucd5c\uc885 \uc810\uc218\ub294 \ub354 \ub192\uc544 \uc9c8 \uac83\uc73c\ub85c \uc608\uc0c1\ud569\ub2c8\ub2e4.","912a4316":"## Optimizer for weight ensemble ","7e3ecccd":"# Data Generator ","aae43b56":"> \uc774 \ub300\ud68c\uc758 Generator\uc758 \uacbd\uc6b0\uc5d0\ub294 train\ud30c\uc77c \uc6a9\ub7c9\uc774 \ub108\ubb34 \ud06c\uae30(\uc57d 200GB) \ub54c\ubb38\uc5d0 \uba54\ubaa8\ub9ac\uc5d0 \ud55c\ubc88\uc5d0 \uc62c\ub824 \ub193\uace0 \ubaa8\ub378\uc5d0 input data\ub97c \uacf5\uae09\ud560 \uc218\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uc804\uccb4 row\uac1c\uc218 \ub610\ud55c \ub108\ubb34 \ub9ce\uc544\uc11c(\uc57d 5000\ub9cc\uac1c) \uc774\ubbf8\uc9c0\ub098, numpy array\ub85c \ubbf8\ub9ac \ubcc0\ud658(\uc57d 7TB) \ud574 \ub193\uc744 \uc218\ub3c4 \uc5c6\uc2b5\ub2c8\ub2e4. \ub54c\ubb38\uc5d0 \uc774\uc804 \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c \ub9cc\ub4e4\uc5b4 \ub193\uc740 100\uac1c\uc758 \ud30c\uc77c\ub4e4\uc744 Training \uacfc\uc815 \uc911\uc5d0 \ud558\ub098\uc529 \uc77d\uace0, \uadf8 \ud30c\uc77c\ub4e4\uc758 row\ub4e4\uc744 \uc77d\uc5b4\uc11c \ubaa8\ub378\uc5d0 \uacf5\uae09\ud558\ub3c4\ub85d Generator\ub97c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c \ub9cc\ub4e4 Generator\uc758 \uc804\uccb4 flow\ub97c \ubcf4\uba74 \ub2e4\uc74c \uadf8\ub9bc\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ubcf4\ud1b5 training set \uc804\uccb4\ub97c 1\ubc88 \ud559\uc2b5\ud558\ub294 \uac83\uc744 1Epoch \ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 1Epoch\uc758 \uc57d 100\ubd84\uc758 1\uc778 1\uac1c \ud30c\uc77c \uc804\uccb4\ub97c \ud559\uc2b5\ud558\ub294\uac83\uc744 Virtual 1Epoch\ub77c\uace0 \ubd80\ub974\uaca0\uc2b5\ub2c8\ub2e4. \uc774 \ub300\ud68c\uc758 Data\ub294 \uc804\uccb4\ub97c \ud559\uc2b5\ud558\ub294\ub370 \ud558\ub8e8\uac00 \ub118\uac8c \uac78\ub9ac\uae30 \ub54c\ubb38\uc5d0, \ub9ce\uc544\uc57c 3~5Epoch \ud559\uc2b5\ud560 \uc218 \uc788\uc744 \uac83\uc73c\ub85c \uc608\uc0c1\ub429\ub2c8\ub2e4. \ub54c\ubb38\uc5d0 Training \uacfc\uc815\uc911\uc5d0 \ubcf4\ud1b5 \uc9c4\ud589\ud558\ub294 Validation Data \ud3c9\uac00, Validation \ud3c9\uac00 \uc810\uc218 \uae30\uc900\uc73c\ub85c \uc218\ud589 \ud560 Best Model \uc800\uc7a5 \ubc0f Learning Rate \uc870\uc808\uc740 Virtual Epoch \uae30\uc900\uc73c\ub85c \uc218\ud589 \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub9bc\uc5d0\uc11c \ud604\uc7ac Virtual Epoch\uac00 \ub05d\ub098\uba74, \ub2e4\uc74c \ud30c\uc77c\uc740 \"Train1.gz\"\ub97c \ub85c\ub529\ud558\uba74\uc11c \uae30\uc874 \uba54\ubaa8\ub9ac\ub294 Release\ub418\uac8c \ub429\ub2c8\ub2e4. \uc989 \uc8fc\ud669\uc0c9 \ud654\uc0b4\ud45c Line\uc774 1Virtual Epoch\ub9c8\ub2e4 \ud55c\uce78\uc529 \ubc11\uc73c\ub85c \ub0b4\ub824 \uac00\uba74\uc11c \ub3d9\uc77c \uc791\uc5c5\uc744 \uc218\ud589\ud558\uac8c \ud560 \uac83\uc785\ub2c8\ub2e4. \n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-bKkaGVP0W0I\/XqKA2mOP2lI\/AAAAAAAAlcY\/VfGrS33i09AAXpGU_6fJu7--tJI4KBXpgCLcBGAsYHQ\/s1600\/generator.PNG\"  width=\"650\" alt=\"doodle\/generator\">\n\n\n> \uadf8\ub9ac\uace0 \uc774\uc804 Image Drawing \uacfc\uc815\uc5d0\uc11c Mix-Up Augmentation\uc758 \uacbd\uc6b0\ub294 Label\uc5d0 \uc808\ubc18 \uc815\ub3c4\uc758 \uac00\uc911\uce58\ub85c \uc11e\uc5b4\uc11c \uc8fc\uac8c \ub054 \ud560 \uac83\uc785\ub2c8\ub2e4. \ub610\ud55c Augmentation\ub41c Image\ub97c \ubcf4\uba74 \uc54c\uc544\ubcf4\uae30 \uc5b4\ub835\uae30 \ub54c\ubb38\uc5d0 Label Smoothing\uc744 \ud560 \uac83\uc785\ub2c8\ub2e4. Label Smoothing\uc740 \ubcf4\ud1b5 Data\uc758 Noise\uac00 (Label\uc774 \uc798\ubabb \ubd99\uc5b4\uc788\ub294) \ub9ce\uc740 \uacbd\uc6b0, Label\uc744 \"[0, 0, ..., 1, 0, 0]\"\uc73c\ub85c \uc8fc\uc9c0 \uc54a\uace0 \"[0.01, 0.01, ..., 0.9, 0.01]\"\ucc98\ub7fc Label\uc5d0 \ub300\ud55c \ud655\uc2e0\uc744 \uc904\uc5ec\uc11c \ud559\uc2b5\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.","607c7589":"## Data \ubd84\ud560 \ubc0f Train \uacc4\ud68d","1a1a3743":"> \ucd5c\uc885 \uc810\uc218\uc778 MAP@K\ub294 \uac01 test set row\ubcc4 AP@K \uc810\uc218\ub4e4\uc758 \ud3c9\uade0\uc785\ub2c8\ub2e4. \uc704\uc758 \ud45c\uc5d0\uc11c\ub294 \ucd5c\uc885 \uc810\uc218\ub294 (1.0 + 0.5 + 0.33) \/ 4 \uac00 \ucd5c\uc885 \uc810\uc218 \uac00 \ub429\ub2c8\ub2e4. AP@K \uacc4\uc0b0\uc5d0 \ub300\ud574 \ud568\uc218\ub85c \ub9cc\ub4e4\uba74 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n","028ddc60":"> \uc774\ubc88\uc5d4 \uc2e4\uc81c Train Data\ub97c \uc704\uc5d0\uc11c \uc815\uc758\ud55c \ubc29\uc2dd\ub300\ub85c \uc704 \ud568\uc218\ub97c \uc774\uc6a9\ud558\uc5ec \uadf8\ub824 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Preprocessing \ub2e8\uacc4\uc5d0\uc11c \uc0dd\uc131\ud55c \ud30c\uc77c \uc911 \ud558\ub098\ub97c \uc5f4\uc5b4\uc11c \uadf8\ub824 \ubcf4\uc558\uc2b5\ub2c8\ub2e4. Label\uc740 \"mug\" \uc785\ub2c8\ub2e4. \uc0ac\ub78c\uc758 \ub208\uc73c\ub85c \ubbf8\uc138\ud55c \ubc1d\uae30 \uac12 \uae4c\uc9c0\ub294 \uad6c\ubd84\ud560 \uc218 \uc5c6\uc9c0\ub9cc, \ud558\ub098\uc758 \ud68d\uc774 \uc5b4\ub290 \uc810\uc5d0\uc11c \uc2dc\uc791\ud558\uace0 \uc5b4\ub514\uc5d0\uc11c \ub05d\ub098\uba70, \uc5b4\ub5a4 \uc21c\uc11c\ub85c \uadf8\ub824\uc84c\uc73c\uba70, \uc5b4\ub5a4 \ud68d\uc744 \ube68\ub9ac \uadf8\ub9ac\uace0, \uc5b4\ub5a4 \ud68d\uc744 \ucc9c\ucc9c\ud788 \uadf8\ub838\ub294\uc9c0 \ub300\ub7b5 \ud310\ub2e8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\ub2e8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-wJSwSqOYEvo\/XqAcTtJa5DI\/AAAAAAAAlas\/3UKDXfAaHkkAVm5aEPjplBrBD0PIZksmQCLcBGAsYHQ\/s1600\/mug_org.PNG\"  width=\"300\" alt=\"doodle\/interval\">\n\n   \n","8d925a1e":"> \ub2e4\uc74c \"build_model\" \ud568\uc218\ub294 \ubaa8\ub378 \uad6c\uc870\ub97c \ub9cc\ub4e4 \ud568\uc218\uc785\ub2c8\ub2e4. backbone\uc774 \ub418\ub294 CNN\ubaa8\ub378\uc744 \uc55e\uc5d0 \ub450\uace0 \ub9c8\uc9c0\ub9c9 output\uc744 global average pooling \ud55c \ud6c4\uc5d0 label\uc218 \ub9cc\ud07c\uc758 unit\uc744 \uac16\ub294 dense layer\ub97c \uc5f0\uacb0\ud574\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. backbone\uc740 EfficientNetB0,4,5,7 4\uac1c\ub97c \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4. \ubaa8\ub378\uc744 \uc774\ub807\uac8c \uc120\ud0dd\ud55c\ub370\uc5d0\ub294 \ud2b9\ubcc4\ud55c \uc774\uc720\ub294 \uc5c6\uc73c\uba70, \uc800\ub294 \ubcf4\ud1b5 \uac00\ubcbc\uc6b4 \ubaa8\ub378\ub85c \ud559\uc2b5-\uc81c\ucd9c\uae4c\uc9c0 \ud55c\ubc88 \ud560 \uc218 \uc788\uac8c \ud558\uace0(pipeline\uc744 \ub9cc\ub4e0\ub2e4 \ub77c\uace0\ub3c4 \ud568), \uadf8 \ud6c4 \uc5ec\uc720\uac00 \uc788\uc744 \ub54c \uc880 \ub354 \ud070 \ubaa8\ub378\uc744 \ud559\uc2b5\ud569\ub2c8\ub2e4.","a90bbbd5":"> \uc774\uc804\uc5d0 \uc0b4\ud3b4 \ubcf8\uac83\ucc98\ub7fc raw stoke\uc758 \uc815\ubcf4\ub294 X\uc88c\ud45c, Y\uc88c\ud45c, msec(\uc2dc\uac04) \uc758 list\ub85c \uc774\ub8e8\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc5bb\uc744 \uc218 \uc788\ub294 \ucd94\uac00 Feature\ub85c \uc81c\uac00 \uc0dd\uac01\ud55c \uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n   \n>   \n    1. \ud68d\uc758 \uc21c\uc11c\n    2. \ud68d\uc758 \ud3ec\uc778\ud2b8\ubcc4 \uc774\ub3d9 \uc18d\ub3c4\n    3. \ud68d\uc758 \ud3ec\uc778\ud2b8\ubcc4 \uc774\ub3d9 \uc18d\ub3c4\uc758 \ubcc0\ud654\ub7c9 \n    4. \ud68d\uc758 \ubc29\ud5a5, \ud68d\uacfc \ud68d \uc0ac\uc774 \uacf5\ubc31 \uc2dc\uac04, \uc804\uccb4 \uadf8\ub9bc\uc744 \uadf8\ub9ac\ub294\ub370 \uac78\ub9b0 \uc2dc\uac04, \uc804\uccb4 \uadf8\ub9bc\uc758 \uc2dc\uc791, \uc885\ub8cc Point \n    \n> \uc608\ub97c \ub4e4\uc5b4 Smile Face Data \ud55c \uac1c\ub97c \uadf8\ub824 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ucd1d 3\ud68d, Point \uc218\ub294 14Point, \uac01 \ud68d \ubcc4 Point \uc218\ub294 5,5,3\uac1c\uc778 Data\uc785\ub2c8\ub2e4. \uc81c\uacf5\ub41c Data\ub294 \uc544\ub2c8\uace0 Feature \ucd94\uac00 \ubc29\ubc95\uc5d0 \ub300\ud574 \uc774\ud574\ub97c \ub3d5\uae30 \uc704\ud574 \ub2e8\uc21c \ud654 \ud558\uc5ec \uc81c\uac00 \ub9cc\ub4e0 Data\uc785\ub2c8\ub2e4. \n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-zcfi12zr6Jo\/Xp_82LeXUnI\/AAAAAAAAlaU\/mL4TC4QNxJ8Pzzf_4iFcGcFM0zVuzb2sQCLcBGAsYHQ\/s1600\/point.PNG\"  width=\"400\" alt=\"doodle\/smile_face_sample_point\">\n\n> \ub9cc\uc57d \uc644\uc131 \ub41c \uadf8\ub9bc\uc73c\ub85c\ub9cc \ud559\uc2b5\ud55c\ub2e4\uace0 \ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uc774\ubbf8\uc9c0\uac00 \ub420 \uac83\uc785\ub2c8\ub2e4. \n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-y6Tl147OzXw\/Xp_81wDva1I\/AAAAAAAAlaM\/u1-5ePtcCWsIGp_twN5WrRKYjn42fTJhwCLcBGAsYHQ\/s1600\/org.PNG\"  width=\"400\" alt=\"doodle\/smile_face_sample_org\">\n\n> 1. \ud68d\uc758 \uc21c\uc11c\ub294 0\ubc88(Red) channel\uc5d0 \uac12\uc73c\ub85c \uccab\ud68d\uc744 \ubc1d\uac8c \ud558\uace0 \uc810\uc810 \uc5b4\ub450\uc6cc\uc9c0\ub3c4\ub85d \ud45c\uc2dc\ub97c \ud558\uc600\uc2b5\ub2c8\ub2e4. \uc774\uc640 \uac19\uc740 \ubc29\uc2dd\uc73c\ub85c \uc2e4\ud589\ud574\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uadf8\ub9bc\uc774 \uadf8\ub824\uc9d1\ub2c8\ub2e4.\n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-13PvU7mRCw8\/Xp_815WhjuI\/AAAAAAAAlaQ\/9TcRlRbuPlQTUW_7_8hCdWhIZoGUfgG4wCLcBGAsYHQ\/s1600\/order.PNG\"  width=\"400\" alt=\"doodle\/smile_face_sample_order\">\n\n> 2. \ud68d\uc758 \ud3ec\uc778\ud2b8\ubcc4 \uc774\ub3d9 \uc18d\ub3c4\ub294 \ud3ec\uc778\ud2b8\uc640 \ud3ec\uc778\ud2b8 \uc0ac\uc774\uc758 euclidiean pixel \uac70\ub9ac\uc5d0 \uac78\ub9b0 \uc2dc\uac04\uc744 \ub098\ub204\uc5b4 \uc8fc\uc5c8\uc2b5\ub2c8\ub2e4. \uc989 \uc774\ub3d9 \uc18d\ub3c4\uac00 \ube60\ub97c \uc218\ub85d \ubc1d\uc740 \uac12\uc744 \uac16\uc2b5\ub2c8\ub2e4. Channel\ub4e4\uc744 \ud569\uce58\uba74 color \uc601\uc0c1\uc774 \ub098\uc624\ub098 \uc0c9\uac10 \uad6c\ubd84\uc774 \uc798 \ub418\uc9c0 \uc54a\uc544\uc11c \ub2e4\uc74c \uadf8\ub9bc\ucc98\ub7fc \uc57d\uac04 \uc717\ucabd\uc5d0 1\ubc88 channel\uc744(Green) \ud45c\uc2dc\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-RK6VhVwNfTc\/Xp_81FnbjqI\/AAAAAAAAlaE\/yqQ9FkprL_AAnCeaFjh6LIPbKHRfO0AFQCLcBGAsYHQ\/s1600\/add_v.PNG\"  width=\"400\" alt=\"doodle\/smile_face_sample_v\">\n\n> 3. \ud68d\uc758 \ud3ec\uc778\ud2b8 \ubcc4 \uc774\ub3d9 \uc18d\ub3c4\uc758 \ubcc0\ud654\ub7c9\uc740 \uc774\uc804 \ud3ec\uc778\ud2b8\uc5d0\uc11c \ud604\uc7ac \ud3ec\uc778\ud2b8\uae4c\uc9c0 \uc774\ub3d9\uc744, \uad00\uc131 \uadf8\ub300\ub85c \ub2e4\uc74c \ud3ec\uc778\ud2b8\uae4c\uc9c0 \uc774\ub3d9\ud588\uc744 \ub54c \uc810\uc5d0\uc11c, \uc2e4\uc81c \ub2e4\uc74c \ud3ec\uc778\ud2b8\uae4c\uc9c0\uc758 \uac70\ub9ac\uc5d0 \uac78\ub9b0 \uc2dc\uac04\uc744 \ub098\ub204\uc5b4, 2\ubc88 channel\uc5d0(Blue) \ud45c\uc2dc\ud558\uc600\uc2b5\ub2c8\ub2e4. \uadf8\ub9bc\uc744 \uadf8\ub824\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc810\uc120\uc774 \uc608\uc0c1 point\uc774\uace0, \uc608\uc0c1point\ub85c\ubd80\ud130 \uc2e4\uc81c point\uae4c\uc9c0\uc758 \uac70\ub9ac\ub97c \ubc1d\uae30\ub85c \ub098\ud0c0\ub0b8 \uac83\uc785\ub2c8\ub2e4. \uc26c\uc6b4 \uc2dd\ubcc4\uc744 \uc704\ud574 \uc774\ubc88\uc5d0\ub294 \uc57d\uac04 \uc544\ub798\ucabd\uc5d0 2\ubc88 channel\uc744(Blue) \ud45c\uc2dc\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc774\ub3d9 \ubc29\ud5a5\uacfc \uac70\ub9ac \ubcc0\ud654\uac00 \uae09\ubcc0\ud560 \uc218\ub85d \ubc1d\uc740 \uac12\uc744 \uac16\ub3c4\ub85d \ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-No75NjGeHOE\/Xp_81KJxN6I\/AAAAAAAAlaA\/Y0pim-kUKFEYh-CaV1c-RH6WPeCRGQDvQCLcBGAsYHQ\/s1600\/add_a.PNG\"  width=\"400\" alt=\"doodle\/add_a\">\n\n> 4. \ud68d\uc758 \ubc29\ud5a5\uc740 \ud68d\uc758 \uc2dc\uc791 \uc810 2\ubc88 channel\uc5d0(Blue) circle\uc744 \uadf8\ub824\uc11c \ud45c\uc2dc\ub97c \ud558\uac8c \ud588\uc2b5\ub2c8\ub2e4. \ub610\ud55c \ubc1d\uae30 \uc815\ubcf4\ub85c \ud68d\uacfc \ud68d \uc0ac\uc774\uc758 \uacf5\ubc31 \uc2dc\uac04\uc744 \ub098\ud0c0\ub0b4\uac8c \ud558\uc600\ub294\ub370, \uc774\uc804 \ud68d\uc744 \uadf8\ub9ac\uace0 \ub2e4\uc74c \ud68d\uc744 \uc2dc\uc791\ud558\ub294\ub370 \uac78\ub9b0 \uc2dc\uac04\uc774 \uae38\uc218\ub85d \ub354 \ubc1d\uac8c \ud45c\uc2dc\ud558\uc600\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc804\uccb4 \uadf8\ub9bc\uc744 \uadf8\ub9ac\ub294\ub370 \uac78\ub9b0 \uc2dc\uac04\uc740 \ub9c8\uc9c0\ub9c9 Point\uc5d0 1\ubc88 Channel\uc758(Green) \ubc1d\uae30 \uac12\uc73c\ub85c \ud45c\uc2dc\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n> <img src=\"https:\/\/1.bp.blogspot.com\/-5OXXJOeNKMg\/Xp_81etBKbI\/AAAAAAAAlaI\/Cq3-WkBYu-QYOUUSNQNzGdU0jk3dXha2wCLcBGAsYHQ\/s1600\/add_interval.PNG\"  width=\"400\" alt=\"doodle\/interval\">\n\n   ","d43f9536":"## submission2","b5a2bb50":"\n> \uc9c1\uc811 \uac8c\uc784\uc5d0 \ucc38\uc5ec\ud574 \ubcf4\uba74, \uc81c\uac00 \uadf8\ub9bc\uc744 \ubabb \uadf8\ub9ac\uae30\ub3c4 \ud558\uc9c0\ub9cc, 20\ucd08 \uc2dc\uac04\uc81c\ud55c\uc5d0 \ucad3\uae30 \ub2e4 \ubcf4\ub2c8 \uc5b4\ub5bb\uac8c \uc2dc\uc791\ud574\uc57c \ub420\uc9c0 \ubc14\ub85c \uc548 \ub5a0\uc62c\ub77c\uc11c \ub354 \uc5b4\ub835\ub124\uc694. \ud558\uc9c0\ub9cc \ub2e4\uc74c\uacfc \uac19\uc774 \ud604\uc7ac \ubaa8\ub378\uc774 \uc0c1\ub2f9\ud788 \uc815\ud655\ud558\uac8c \ub9de\ucd94\uace0 \uc788\ub124\uc694. \uc81c\uac00 \uadf8\ub838\uc9c0\ub9cc \ubb3c\uace0\uae30\ub294 \uc0ac\ub78c\uc774 \uc54c\uae30 \uc5b4\ub824\uc6cc \ubcf4\uc774\ub294\ub370 \ubaa8\ub378\uc740 \uc798 \ub9de\ucd94\uc5c8\uace0, \ud558\uc9c0\ub9cc \ud5ec\uba67\uc740 \ubaa8\ub378\ub3c4 \ubabb \ub9de\ucd94\uc5c8\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc774\ud574\ub97c \uc704\ud574 \uc9c1\uc811 \uac8c\uc784\uc5d0 \ucc38\uc5ec\ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n\n> Kaggle \ub300\ud68c\ub97c \ud560 \ub54c, \uc0ac\ub78c\uc774 \ud655\uc778\uc774 \uac00\ub2a5\ud55c \ub370\uc774\ud130\ub77c\uba74 \uc0d8\ud50c \ub370\uc774\ud130 \uc815\ub3c4\ub294 \uc9c1\uc811 \ud655\uc778\ud574 \ubcf4\ub294 \uac83\uc744 \ucd94\ucc9c \ub4dc\ub9bd\ub2c8\ub2e4. \uc774\ubbf8\uc9c0\ub77c\uba74 \uac01 label\ubcc4\ub85c \uba87 \uc7a5\uc529 \ud655\uc778\ud558\ub294 \uac83, \uc74c\uc131\uc774\ub77c\uba74 \uac01 label \ubcc4\ub85c \ub4e4\uc5b4 \ubcf4\ub294 \uac83, \ub3d9\uc601\uc0c1\uc774\ub77c\uba74 play\ud574\uc11c \ubcf4\ub294 \uac83\uc774 \ubaa8\ub378\uc744 \uc124\uacc4\ud558\uace0, Data Generator\ub97c \uc5b4\ub5bb\uac8c \ub9cc\ub4e4\uc9c0\uc5d0 \ub300\ud55c Idea\ub97c \ub5a0\uc624\ub974\uac8c \ud560 \ub54c\uac00 \ub9ce\uc2b5\ub2c8\ub2e4.\n\n\n","957ec025":"## Data \uc18c\uac1c\n\n\n>  \ub2e4\uc74c url\uc5d0 \uc811\uc18d\ud574 \ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uac8c\uc784\uc774 \ub098\uc624\ub294\ub370\uc694. https:\/\/quickdraw.withgoogle.com\/ \uc774 \uac8c\uc784\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 Data\ub4e4\uc774 \uc774 Competition\uc758 \uc0ac\uc6a9\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uac8c\uc784 \uc2dc\uc791\ud654\uba74\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. 20\ucd08\ub0b4\uc5d0 \uadf8\ub9bc\uc744 \uadf8\ub9ac\ub77c\ub294 \uc9c0\uc2dc\uc0ac\ud56d\uc774 \uc788\uace0, \uadf8\ub9ac\ub294 \uc911\uac04\uc5d0 \ubaa8\ub378\uc774 \uc608\uce21 \ud6c4 \ub9de\ucd94\ub294 \uac8c\uc784\uc785\ub2c8\ub2e4.\n\n\n","fc06c0d1":">\ub450\ubc88\uc9f8 index\uc758 \uac12\uc774 \uc815\ub2f5\uacfc \uac19\uc744 \uacbd\uc6b0\uc5d0\ub294 Score\ub294 0.5 \uc785\ub2c8\ub2e4.","a08828a6":"## Metric"}}