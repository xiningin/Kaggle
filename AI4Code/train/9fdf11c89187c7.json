{"cell_type":{"a12afc22":"code","d5d81243":"code","60cafaa4":"code","558a78a7":"code","e344d91b":"code","ca4b70b7":"code","38192af1":"code","cd033235":"code","3f326847":"code","29cd15b9":"code","53087b57":"code","14f301d3":"code","d0a2fa5c":"code","39d82064":"code","d0cdf10d":"code","250756bc":"code","624a580c":"code","914bcfe5":"code","2b8e7af4":"code","8dfe4155":"code","dab7b6a5":"markdown","f153d2c3":"markdown","a405ff24":"markdown","2d0f9051":"markdown","144decc4":"markdown","28664941":"markdown","9e9e90cb":"markdown"},"source":{"a12afc22":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d5d81243":"import matplotlib.pyplot as plt\nimport math\nplt.style.use('fivethirtyeight')","60cafaa4":"df = pd.read_csv('\/kaggle\/input\/tesla-stock-price\/Tesla.csv - Tesla.csv.csv')\ndf\n","558a78a7":"df.info()","e344d91b":"plt.figure(figsize=(13,5))\nplt.plot(df['Adj Close'], label = 'TSLA')\nplt.title('Tesla Adjusted Close Price History')\nplt.xlabel('Year')\nplt.ylabel('Adj. Close Price in USD')\nplt.legend(loc='upper left')\nplt.show()\n\n","ca4b70b7":"SMA30 = pd.DataFrame()\nSMA30['Adj Close'] = df['Adj Close'].rolling(window=30).mean()\nSMA30","38192af1":"SMA100 = pd.DataFrame()\nSMA100['Adj Close'] = df['Adj Close'].rolling(window=100).mean()\nSMA100","cd033235":"plt.figure(figsize=(12.5,4.5))\nplt.plot(df['Adj Close'], label = 'TSLA')\nplt.plot(SMA30['Adj Close'], label = 'SMA30')\nplt.plot(SMA100['Adj Close'], label = 'SMA100')\nplt.title('Tesla Adjusted Close Price History and Simple Moving Averages')\nplt.xlabel('Year')\nplt.ylabel('Adj. Close Price in USD')\nplt.legend(loc='upper left')\nplt.show()","3f326847":"data = pd.DataFrame()\ndata['TSLA'] = df['Adj Close']\ndata['SMA30'] = SMA30['Adj Close']\ndata['SMA100'] = SMA100['Adj Close']\ndata","29cd15b9":"def buy_sell(data):\n    sigPriceBuy = []\n    sigPriceSell = []\n    flag = -1\n    \n    for i in range(len(data)):\n        if data['SMA30'][i] > data['SMA100'][i]:\n            if flag != 1:\n                sigPriceBuy.append(data['TSLA'][i])\n                sigPriceSell.append(np.nan)\n                flag = 1\n            else:\n                sigPriceBuy.append(np.nan)\n                sigPriceSell.append(np.nan)\n        elif data['SMA30'][i] < data['SMA100'][i]:\n            if flag != 0:\n                sigPriceBuy.append(np.nan)\n                sigPriceSell.append(data['TSLA'][i])\n                flag = 0\n            else:\n                sigPriceBuy.append(np.nan)\n                sigPriceSell.append(np.nan)\n        else:\n            sigPriceBuy.append(np.nan)\n            sigPriceSell.append(np.nan)\n            \n    return (sigPriceBuy, sigPriceSell)\n            \n","53087b57":"buy_sell = buy_sell(data)\ndata['Buy_Signal_Price'] = buy_sell[0]\ndata['Sell_Signal_Price'] = buy_sell[1]","14f301d3":"data","d0a2fa5c":"plt.figure(figsize=(12.5,4.5))\nplt.plot(data['TSLA'], label = 'TSLA', alpha=0.35)\nplt.plot(data['SMA30'], label = 'SMA30', alpha=0.35)\nplt.plot(data['SMA100'], label = 'SMA100', alpha=0.35)\nplt.scatter(data.index, data['Buy_Signal_Price'], label = 'Buy', marker = '^', color = 'green')\nplt.scatter(data.index, data['Sell_Signal_Price'], label = 'Sell', marker = 'v', color = 'red')\nplt.title('Tesla Adjusted Close Price History with Buy\/Sell Signals')\nplt.xlabel('Year')\nplt.ylabel('Adj. Close Price in USD')\nplt.legend(loc='upper left')\nplt.show()","39d82064":"df1 = pd.read_csv('\/kaggle\/input\/tesla-stock-price\/Tesla.csv - Tesla.csv.csv')\ndf1 = df.set_index(pd.DatetimeIndex(df1['Date'].values)) #change index to date\ndf1","d0cdf10d":"period = 20\n#Simple Moving Average\ndf1['SMA'] = df1['Close'].rolling(window=period).mean()\n#Standard Deviation\ndf1['STD'] = df1['Close'].rolling(window=period).std()\n#Upper Band\ndf1['Upper'] = df1['SMA'] + (df1['STD'] * 2)\n#Lower Band\ndf1['Lower'] = df1['SMA'] - (df1['STD'] * 2)\n\ncolumn_list = ['Close', 'SMA', 'Upper', 'Lower']\ndf1[column_list].plot(figsize=(12.2,6.4))\nplt.title('Bollinger Band for Tesla Stock')\nplt.ylabel('USD Price in($)')\nplt.show()","250756bc":"fig = plt.figure(figsize=(12.2, 6.4))\nax = fig.add_subplot(1,1,1)\nx_axis = df1.index\nax.fill_between(x_axis, df1['Upper'], df1['Lower'], color = 'grey')\nax.plot(x_axis, df1['Close'], color = 'gold', lw = 3, label = 'Closing Price')\nax.plot(x_axis, df1['SMA'], color = 'blue', lw = 3, label = 'Simple Moving Average')\nax.set_title('Bollinger Band for Tesla')\nax.set_xlabel('Date')\nax.set_ylabel('USD Price in ($)')\nplt.xticks(rotation = 45)\nax.legend()\nplt.show()","624a580c":"new_df = df1[period-1:]\nnew_df","914bcfe5":"def get_signal(data):\n    buy_signal = []\n    sell_signal = []\n    \n    for i in range(len(data['Close'])):\n        if data['Close'][i] > data['Upper'][i]:\n            buy_signal.append(np.nan)\n            sell_signal.append(data['Close'][i])\n        elif data['Close'][i] < data['Lower'][i]:\n            buy_signal.append(data['Close'][i])\n            sell_signal.append(np.nan)\n        else:\n            buy_signal.append(np.nan)\n            sell_signal.append(np.nan)\n    return(buy_signal, sell_signal)\n","2b8e7af4":"new_df['Buy'] = get_signal(new_df)[0]\nnew_df['Sell'] = get_signal(new_df)[1]","8dfe4155":"fig = plt.figure(figsize=(12.2, 6.4))\nax = fig.add_subplot(1,1,1)\nx_axis = new_df.index\nax.fill_between(x_axis, new_df['Upper'], new_df['Lower'], color = 'grey')\nax.plot(x_axis, new_df['Close'], color = 'gold', lw = 3, label = 'Closing Price', alpha = 0.35)\nax.plot(x_axis, new_df['SMA'], color = 'blue', lw = 3, label = 'Simple Moving Average', alpha = 0.35)\nax.scatter(x_axis, new_df['Buy'], color = 'green', lw = 3, label = 'Buy', marker = \"^\", alpha = 0.35)\nax.scatter(x_axis, new_df['Sell'], color = 'red', lw = 3, label = 'Sell', marker = \"v\", alpha = 0.35)\nax.set_title('Bollinger Band for Tesla')\nax.set_xlabel('Date')\nax.set_ylabel('USD Price in ($)')\nplt.xticks(rotation = 45)\nax.legend()\nplt.show()","dab7b6a5":"# **Buy-Sell Signal**","f153d2c3":"# **Bollinger Bands Method**","a405ff24":"**Visualzie the Data**","2d0f9051":"Let us calculate Simple Moving Average, Standard Deviation, Upper Band and the Lower Band","144decc4":"# **Simple Moving Average - 30 Day Average**","28664941":"**Visualizing the Data**","9e9e90cb":"# **Simple Moving Average - 100 Day Average**"}}