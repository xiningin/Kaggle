{"cell_type":{"0db0641d":"code","2274348e":"code","ff6bb17d":"code","ea194d41":"code","7ec3fc07":"code","c81d77f3":"code","d6a115ee":"code","e5896644":"code","c58e4ce1":"code","c3c90d5c":"code","bae1ea68":"code","1cc92488":"code","33be0299":"code","ad916588":"code","711d5d09":"code","91b6899a":"code","50207c26":"code","018cb213":"code","f84c5bc9":"code","6963c90c":"code","ac496cce":"code","0594a936":"code","d9144b72":"code","25808dba":"code","b513305a":"code","15218c34":"code","f948a15e":"code","877e4612":"code","b469d977":"markdown","5ee4575b":"markdown","2e34a025":"markdown","1883e23b":"markdown","d12f215f":"markdown","ed18d415":"markdown","c7abb00c":"markdown","cb9ec876":"markdown","78066497":"markdown","7cfc12d9":"markdown","c9602dce":"markdown"},"source":{"0db0641d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2274348e":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ff6bb17d":"fn = '\/kaggle\/input\/cancer-cell-line-encyclopedia\/ccle.txt\/CCLE.txt'\n# '..\/input\/ccle.txt\/CCLE.txt'\ndf = pd.read_csv(fn, index_col=0)\ndf\n\n#print( type(df.columns[0]))# ,df.columns[0] )\ncell_lines_information = list(df.columns)  # Save full information \n\n# Extract from long information in columns titles just short-standard cell lines names and save them \ncell_lines_names = []\nfor i in range(df.shape[1]):\n    nm = df.columns[i].split(',')[0].split(' ')[2].replace(\"'\", '')\n    cell_lines_names.append(nm)\n\ndf.columns = cell_lines_names\nbulk = df['A549'].copy()\nbulk","ea194d41":"fig = plt.figure(figsize = (20,6))\nc=0;\nc+=1; fig.add_subplot(1,2,c)\nplt.hist(bulk.values, bins = 100)\nc+=1; fig.add_subplot(1,2,c)\nplt.plot(np.sort(bulk.values),'*-')\nplt.title('Sorted genes bulk expression')\nplt.show()\nbulk.describe()","7ec3fc07":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\n\ndisplay(genes)\nll = list( filter(lambda x: 'cell.annotations' in x, l ) )\nprint(ll)\ncells = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ndisplay(cells)\n\nll = list( filter(lambda x: 'hashTable' in x, l ) )\nprint(ll)\ninfo_dict_cells2drugs = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(info_dict_cells2drugs)\ns = set(cells[0]) & set( info_dict_cells2drugs[1] ) \nprint( len(s), len(cells) )\n\nll = list( filter(lambda x: 'hashSampleSheet' in x, l ) )\nprint(ll)\nhashSampleSheet = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(hashSampleSheet)\n\nll = list( filter(lambda x: 'pData' in x, l ) )\nprint(ll)\npData = pd.read_csv(dirname + ll[0],sep = ' ')# , header = None)\ndisplay(pData)\n\n\n","c81d77f3":"print()\nt0 = time.time()\nll = list( filter(lambda x: 'count.matrix' in x, l ) )\nexpression_matrix_in_sparse_form = pd.read_csv( dirname + ll[0], sep = '\\t', header = None)\nprint(np.round(time.time() - t0,2),'seconds passed' )\nprint('Each row in file has format - (i,j, value) - that means that count_matrix[i,j]=value')\nexpression_matrix_in_sparse_form[0] -= 1\nexpression_matrix_in_sparse_form[1] -= 1\ndisplay(expression_matrix_in_sparse_form)\n\nfrom scipy.sparse import csr_matrix\nm = csr_matrix((expression_matrix_in_sparse_form[2].values, (expression_matrix_in_sparse_form[0].values, \n                     expression_matrix_in_sparse_form[1].values))) # , shape=(len(genes), len(cells) ))#.toarray()\n\nprint(m.shape)\n","d6a115ee":"m.shape\nm = m.transpose()\nm.shape","e5896644":"pData.head(2)","c58e4ce1":"df = pd.DataFrame(index = pData.index, data = range(len(pData) ), columns = ['i'] )\ndf['n.umi'] = pData['n.umi']\ndf['Size_Factor'] = pData['Size_Factor']\n\nf = lambda x: x if not isinstance(x, str)  else x.split('_')[0]\ndf['drug'] = pData['top_oligo'].apply(f )\nf = lambda x: x if not isinstance(x, str)  else float(x.split('_')[1])\ndf['dose'] = pData['top_oligo'].apply(f )\nprint(np.sort( df['dose'].unique()), df['dose'].isnull().sum() )\nprint(( df['dose'].value_counts()) )\n\n\nm2 = m != 0\ndf['count genes expressed'] = np.array( m2.sum(axis = 1) ).ravel()\n\nl = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\nratio_mt2non_mt = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\ndf['ratio mt2non_mt'] = ratio_mt2non_mt\n\n\ndf","c3c90d5c":"df.describe()","bae1ea68":"# Consistency check. Check that 'n_umi' is exactly the m.sum(axis = 1)\n(m.sum(axis = 1).ravel() != df['n.umi'].values ).sum()","1cc92488":"genes.groupby(1)[0].count().sort_values(ascending = False).head(60)","33be0299":"if 1:\n    m2 = m.copy()\n    m2.data = np.log(1+m2.data)\n    m2 = m2.multiply( 1\/m2.sum(axis=1))\n    m2 = m2.tocsr()\n    str_preproc = 'LogThenNorm'\nelse:\n    m2 = m.multiply( 1\/m.sum(axis=1))\n    m2 = m2.tocsr()\n    m2.data = np.log(1+m2.data)\n    str_preproc = 'NormThenLog'\n\nprint(str_preproc)#  \nprint(m2[:4,:4].toarray())\nprint(m2.sum(axis = 1)[:4])","ad916588":"m.shape","711d5d09":"mask = df['dose'] == 0\nmask.sum()","91b6899a":"mean_expression = np.asarray(m2[mask.values,:].mean(axis = 0)).ravel()\n","50207c26":"(mean_expression==0).sum(), mean_expression.shape","018cb213":"plt.plot(np.sort(mean_expression))","f84c5bc9":"s = set(bulk.index) & set( genes[1].values)\nprint(len(s))\nl = list(s)\nmask = genes[1].isin(l)\nprint(mask.sum())\nmask2 = bulk.index.isin(s)\nprint( mask2.sum() )\nbulk = bulk[mask2]","6963c90c":"sc = pd.Series(index = genes[mask][1].values , data = mean_expression[mask.values] )\nsc","ac496cce":"sc = sc.groupby(sc.index).mean()\nsc","0594a936":"sc.name=('SC')","d9144b72":"b = bulk.to_frame()\nb.columns = ['Bulk']\nd = b.join(sc )\nd","25808dba":"d = d.sort_values('Bulk')\nplt.plot(d['Bulk'].values)\nplt.plot(d['SC'].values)\n\nplt.show()","b513305a":"fig = plt.figure(figsize= (20,6))\nfig.add_subplot(1,2,1)\nplt.hist(d['Bulk'], bins = 100)\nfig.add_subplot(1,2,2)\nplt.hist(d['SC'], bins = 100)\nplt.show()","15218c34":"d.corr()","f948a15e":"d.corr(method='spearman' )","877e4612":"d.corr(method='kendall' )","b469d977":"# Average single cell with dose = 0 ","5ee4575b":"# What is about \n\n\n**Finding:**\n\nHere we compare bulk expression data vs averaged single cell expression data for cell-line A549.\nWe see somehow a big difference, i.e. correlation is not big and  is much smaller than \nbetween different cell lines processed by bulk - from CCLE , where average correlation coefficient is 0.85\n(see notebook: https:\/\/www.kaggle.com\/alexandervc\/ccle-loader-and-basic-eda )\n\n\nDepending on what is averaged - binarized or loged\/normed or original we get correlations 0.61-0.49-0.31.\nWhile Spearman correlation is more stable around 0.75.\n\nDifferent versions of the notebook explore these different variants of averaging. \n\n\n-----------------------------------\n\n\nBulk data - from Cancer Cell Line Enceclopedia - kaggle dataset https:\/\/www.kaggle.com\/alexandervc\/ccle-loader-and-basic-eda .\nThis data was obtained from the Broad Institute Cancer Cell Line Encyclopedia https:\/\/portals.broadinstitute.org\/ccle\/data.\n\n\nSingle cell data - sciPlex2 subdataset - GSM4150377\n\nHere - only one cell line - A549 - human lung adenocarcinoma.\n\nExposed to 4 different compounds DEXA, nutlin, BMS, SAHA (HDAC).\n\nIn present notebook we took only dose=0 part.\n\n\n24 hours across SEVEN doses. \n\n24262 cells x 58347 genes\n\n\n'GSM4150377_sciPlex2_pData.txt' - contains information on: cell+drugs+doses+etc... There are 24262 rows - one row - one cell.\nThe index (=row number) of cell in that file corresponds to its index in the countmatrix (after transforming csv file with count matrix to sparse countmatrix)\n\nCount matrix (in list of edges format), cell ids, genes ids are in the files (respectively):\n'GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n \n ","2e34a025":"# Look at duplicated genes symbols","1883e23b":"# Join data ","d12f215f":"# Normalization and log","ed18d415":"# Find genes subset shared by both data","c7abb00c":"# Single cell - Load information files: genes annotations, cells info etc...","cb9ec876":"# Create columns with information on each cell (drug, dose, etc)","78066497":"# Load count matrix and convert it to sparse matrix csr_matrix","7cfc12d9":"# Load bulk data - Cancer Cell Line Enc. \n\nhttps:\/\/www.kaggle.com\/cornhundred\/cancer-cell-line-encyclopedia","c9602dce":"# Look at correlations "}}