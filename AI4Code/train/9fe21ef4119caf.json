{"cell_type":{"c27968bb":"code","db8bdd17":"code","e0f90781":"code","5d94ff1c":"code","8706a844":"code","ade74f72":"code","5a9b23d0":"code","271535f6":"code","5dc31377":"code","915ee713":"code","85d07313":"code","0c70f32b":"code","2d13638e":"code","ea787f63":"code","79ffaca8":"markdown","9521b908":"markdown"},"source":{"c27968bb":"import pandas as pd\nimport plotly.graph_objects as go\nimport math\nfrom sklearn.preprocessing import MinMaxScaler\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM\nimport pandas_datareader as web","db8bdd17":"df = pd.read_csv('..\/input\/tesla-stock-data-updated-till-28jun2021\/TSLA.csv')\ndf = df.set_index('Date')\ndf = df.dropna()\ndf","e0f90781":"print(\"Click on the bottom right menu to show or hide the legend lines\")\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x = df.index, y = df.High,\n                    mode='lines',\n                    name='High',\n                    marker_color = '#2CA02C',\n                    visible = \"legendonly\"))\nfig.add_trace(go.Scatter(x = df.index, y = df.Low,\n                    mode='lines',\n                    name='Low',\n                    marker_color = '#D62728',\n                    visible = \"legendonly\"))\nfig.add_trace(go.Scatter(x = df.index, y = df.Open,\n                    mode='lines',\n                    name='Open',\n                    marker_color = '#FF7F0E',\n                    visible = \"legendonly\"))\nfig.add_trace(go.Scatter(x = df.index, y = df.Close,\n                    mode='lines',\n                    name='Close',\n                    marker_color = '#1F77B4'))\n\nfig.update_layout(\n    title='Closing price history',\n    titlefont_size = 28,\n    \n    xaxis = dict(\n        title='Date',\n        titlefont_size=16,\n        tickfont_size=14),\n    \n    height = 800,\n    \n    yaxis=dict(\n        title='Price in INR (\u20b9)',\n        titlefont_size=16,\n        tickfont_size=14),\n    \n    legend=dict(\n        y=0,\n        x=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'))\n\nfig.show()","5d94ff1c":"data = df.filter(['Close'])\ndataset = data.values\ntraining_data_len = math.ceil(len(dataset) * .8)\ntraining_data_len","8706a844":"scaler = MinMaxScaler(feature_range=(0,1))\nscaled_data = scaler.fit_transform(dataset)\nscaled_data","ade74f72":"train_data = scaled_data[0:training_data_len, :]\nx_train = []\ny_train = []\nfor i in range(60, len(train_data)):\n    x_train.append(train_data[i-60:i, 0])\n    y_train.append(train_data[i, 0])\n    if i <= 61:\n        print(x_train)\n        print(y_train)\n        print()","5a9b23d0":"x_train, y_train = np.array(x_train), np.array(y_train)\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\nx_train.shape","271535f6":"model = Sequential()\nmodel.add(LSTM(50, return_sequences = True, input_shape = (x_train.shape[1], 1)))\nmodel.add(LSTM(50, return_sequences = False))\nmodel.add(Dense(25))\nmodel.add(Dense(1))\nmodel.compile(optimizer = 'adam', loss = 'mean_squared_error')\nmodel.fit(x_train, y_train, batch_size = 1, epochs = 1)","5dc31377":"test_data = scaled_data[training_data_len - 60: , :]\nx_test = []\ny_test = dataset[training_data_len:, :]\n\nfor i in range (60, len(test_data)):\n    x_test.append(test_data[i - 60:i, 0])\n\nx_test = np.array(x_test)\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n\npredictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\n\nrsme = np.sqrt(np.mean(predictions - y_test) ** 2)\nrsme","915ee713":"train = data[:training_data_len]\nvalid = data[training_data_len:]\nvalid['Predictions'] = predictions","85d07313":"print(\"Click and drag on the plot to zoom in, you can reset using the top right option\")\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x = train.index, y = train.Close,\n                    mode='lines',\n                    name='Close',\n                    marker_color = '#1F77B4'))\nfig.add_trace(go.Scatter(x = valid.index, y = valid.Close,\n                    mode='lines',\n                    name='Val',\n                    marker_color = '#FF7F0E'))\nfig.add_trace(go.Scatter(x = valid.index, y = valid.Predictions,\n                    mode='lines',\n                    name='Predictions',\n                    marker_color = '#2CA02C'))\n\nfig.update_layout(\n    title='Model',\n    titlefont_size = 28,\n    hovermode = 'x',\n    xaxis = dict(\n        title='Date',\n        titlefont_size=16,\n        tickfont_size=14),\n    \n    height = 800,\n    \n    yaxis=dict(\n        title='Close price in INR (\u20b9)',\n        titlefont_size=16,\n        tickfont_size=14),\n    legend=dict(\n        y=0,\n        x=1.0,\n        bgcolor='rgba(255, 255, 255, 0)',\n        bordercolor='rgba(255, 255, 255, 0)'))\n\nfig.show()","0c70f32b":"valid","2d13638e":"last_60_days = data[-60:].values\nlast_60_days_scaled = scaler.transform(last_60_days)\nX_test = []\nX_test.append(last_60_days_scaled)\nX_test = np.array(X_test)\nX_test = np.reshape(X_test, (X_test.shape[0],X_test.shape[1], 1))\npred_price = model.predict(X_test)\npred_price = scaler.inverse_transform(pred_price)\nprint ('Predicting the closing price for the next day')\nprint()\nprint(pred_price)","ea787f63":"df_check = web.DataReader('TSLA', data_source ='yahoo', start = '2021-06-28', end = '2021-06-28')\ndf_check","79ffaca8":"# Looks like the model predicted correctly. Thank you for reading.","9521b908":"## According to the model Tesla price should close higher the next trading day around the area of $681."}}