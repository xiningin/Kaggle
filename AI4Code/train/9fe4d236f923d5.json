{"cell_type":{"a1eea2e0":"code","c0a9e74b":"code","8d055c49":"code","c28e4792":"code","1418ee0f":"code","58f605d3":"code","b96c173b":"code","e2c563ca":"code","a4983a99":"code","861ba3ac":"markdown","c8f287b6":"markdown","67fea8de":"markdown","caba6203":"markdown","27771167":"markdown"},"source":{"a1eea2e0":"import numpy as np # linear get_custom_objects().update({'swish': Activation(swish)})algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datatable as dt\n\nfrom sklearn import preprocessing, model_selection\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import QuantileTransformer\n\nfrom numpy.random import seed\nseed(112021)\nimport tensorflow as tf\nfrom tensorflow.keras import layers\ntf.random.set_seed(112021)\nfrom tensorflow import keras\nfrom keras import backend as K\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\nfrom keras.utils.generic_utils import get_custom_objects\nfrom keras.layers import Activation\nfrom keras.backend import sigmoid\n\ndef swish(x, beta = 1):\n    return (x * sigmoid(beta * x))\nget_custom_objects().update({'swish': Activation(swish)})","c0a9e74b":"%%time\ntrain = dt.fread('..\/input\/tabular-playground-series-nov-2021\/train.csv').to_pandas()\ntest  = dt.fread('..\/input\/tabular-playground-series-nov-2021\/test.csv').to_pandas()\nsub   = dt.fread('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv').to_pandas()","8d055c49":"train.drop('id',axis=1,inplace=True)\ntest.drop('id',axis=1,inplace=True)","c28e4792":"y = train['target']\ntrain.drop('target',axis=1,inplace=True)","1418ee0f":"def get_model():\n    input_1 = layers.Input(shape=(train.values.shape[-1]), name=\"continuous\")\n    x = layers.Embedding(input_dim=128, output_dim=4)(input_1)\n    x = layers.TimeDistributed(layers.Dense(64, activation='swish'))(x)\n    x = layers.TimeDistributed(layers.Dense(64, activation='swish'))(x)\n    x = layers.Flatten()(x)\n    x = layers.Dense(128, activation='swish')(x)\n    x = layers.Dense(256, activation='swish')(x)\n    output = layers.Dense(1, activation=\"sigmoid\", name=\"output\")(x)\n    \n    model = tf.keras.Model(input_1, output)\n    return model\n\nmodel = get_model()\nmodel.compile(loss=\"binary_crossentropy\", optimizer=tf.keras.optimizers.Adam(), metrics=[\"AUC\"])\nmodel.summary()","58f605d3":"tf.keras.utils.plot_model(model, show_shapes=True)","b96c173b":"cb_es = tf.keras.callbacks.EarlyStopping(monitor=\"val_auc\", patience=3, mode=\"max\", restore_best_weights=True, verbose=1)\ncb_lr = tf.keras.callbacks.ReduceLROnPlateau(monitor=\"val_auc\", factor=0.5, patience=2, min_lr=0.000001, verbose=1)","e2c563ca":"n_folds = 5\nkf = model_selection.KFold(n_splits=n_folds, shuffle=True, random_state=112020)\nnn_oof = np.zeros(train.shape[0])\n\npredictions = np.zeros(len(test))\n\nfor fold, (trn_idx, val_idx) in enumerate(kf.split(train)):\n    print(f'Training fold {fold + 1}')\n    X_train, X_test = train.iloc[trn_idx], train.iloc[val_idx]\n    y_train, y_test = y.iloc[trn_idx], y.iloc[val_idx]\n    \n    scaler = MinMaxScaler(feature_range=(0, 1)) \n    x_nn_train = scaler.fit_transform(X_train.values)\n    \n    x_nn_test = scaler.transform(X_test.values)\n    \n    model.fit([x_nn_train], \n              y_train,               \n              batch_size=2048,\n              epochs=1000,\n              validation_data=([x_nn_test], y_test),\n              callbacks=[cb_es, cb_lr],\n              validation_batch_size=len(y_test),\n              shuffle=True,\n              verbose = 2)\n    \n    preds = model.predict(x_nn_test).reshape(1,-1)[0]\n    nn_oof[val_idx] = preds\n    roc = roc_auc_score(y_test, preds)\n    print(f\" roc_auc_score: {roc}\")\n    print(\"-\"*50)\n    \n    test_nn = scaler.transform(test.values)\n    \n    predictions += model.predict(test_nn).reshape(1,-1)[0].clip(0,1e10) \/ kf.n_splits","a4983a99":"sub['target'] = predictions\nsub.to_csv(f'submission_nn_1.csv',index = False)\nnp.savez_compressed('oof_nn.npz', nn_oof)","861ba3ac":"# 5-fold model training and prediction","c8f287b6":"# Imports","67fea8de":"# Load dataset","caba6203":"# Model architecture","27771167":"# Store submission and oof"}}