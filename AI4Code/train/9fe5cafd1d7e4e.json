{"cell_type":{"ad56739f":"code","3f43b5c7":"code","51ff0603":"code","b0b7ee83":"code","d7e3d909":"code","81e1d021":"code","416497ba":"code","c4639d9a":"code","ea4ac115":"code","660a5b7d":"code","5c8297b0":"code","4f141288":"code","4aa55969":"code","89557b67":"code","f7e726d0":"code","665df0a4":"code","95d6e2d3":"code","961efa47":"code","ea73bae5":"code","867974f7":"code","831080b6":"code","0e0d503b":"code","7684ef97":"code","7978798f":"code","86931fe3":"code","3e570282":"code","ac5d3066":"code","c69d1ef6":"code","856ccc94":"code","991e58b4":"code","3b895b6f":"code","fff5dd4d":"code","bca29ba6":"code","7afff407":"code","4f6e8504":"code","7330e55a":"code","ca3f49d7":"markdown","d23b55e7":"markdown","faa8d73d":"markdown","5f5a18ff":"markdown","439d6fbc":"markdown","42b08176":"markdown","7dc88455":"markdown","6488bfde":"markdown","f5fd1d1e":"markdown","5cfa0cbf":"markdown","9e692513":"markdown","dcfd5a8b":"markdown","70c578bd":"markdown","9f8573f4":"markdown","0c7bb178":"markdown","c86e432e":"markdown","d8b72478":"markdown","76419706":"markdown","bc90568e":"markdown","60d9dd47":"markdown","308829ca":"markdown","1730143e":"markdown","486a98fc":"markdown","88791265":"markdown","832cb9b9":"markdown","c2de2b04":"markdown","fb660c05":"markdown"},"source":{"ad56739f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f43b5c7":"salaries=pd.read_csv('\/kaggle\/input\/baseball-databank\/Salaries.csv')\nsalaries","51ff0603":"recent=salaries[salaries['yearID'].isin(['2015'])]\nrecent","b0b7ee83":"recent.sort_values(by='salary',ascending=False)","d7e3d909":"#df of all player IDs mapping to player names\nnames=pd.read_csv('\/kaggle\/input\/the-history-of-baseball\/player.csv')\npd.set_option('display.max_columns', None)\n\n#make column combining first and last name\nnames['name']=names['name_first']+' '+names['name_last']\n\n#only need these two columns (rest of columns are unnecessary)\nnames=names[['player_id','name']]\nnames","81e1d021":"batting=pd.read_csv('\/kaggle\/input\/the-history-of-baseball\/batting.csv')\n\n#get batting data from 2014\nhitting_2014=batting[batting['year'].isin(['2014'])]\nhitting_2014","416497ba":"#all player IDs from 2014 salaries dataframe, need to convert to list for next step\nplayers_2014=recent['playerID'].tolist()\n\n#hitting data for players in 2014 salaries dataframe\nhitting_2014_filtered=hitting_2014[hitting_2014['player_id'].isin(players_2014)]\nhitting_2014_filtered","c4639d9a":"recent['playerID'].value_counts()","ea4ac115":"hitting_2014_filtered['player_id'].value_counts()","660a5b7d":"players=hitting_2014_filtered['player_id'].value_counts().index\nadjusted_2014_hitting=pd.DataFrame()\nfor player in players:\n    player_df=hitting_2014_filtered[hitting_2014_filtered['player_id'].isin([player])]\n    if len(player_df)>1:\n        numeric_stats=['g','ab','r','h','double','triple','hr','rbi','sb','cs','bb','so','ibb','hbp','sh','sf','g_idp']\n        \n        df=pd.DataFrame()\n#         df=player_df.sum()[numeric_stats]\n        df=df.append({'player_id':player,'year':'2014','stint':len(player_df),\n                'team_id':'trade','league_id':'trade'},ignore_index=True)\n        for stat in numeric_stats:\n            df[stat]=player_df.sum()[stat]\n        adjusted_2014_hitting=adjusted_2014_hitting.append(df)\n    else:\n        adjusted_2014_hitting=adjusted_2014_hitting.append(player_df)\nadjusted_2014_hitting","5c8297b0":"adjusted_2014_hitting=adjusted_2014_hitting.reset_index().drop(columns='index')","4f141288":"recent","4aa55969":"adjusted_2014_hitting['salary']=[recent[recent['playerID'].isin([player])].reset_index()\n                        ['salary'][0] for player in adjusted_2014_hitting['player_id']]","89557b67":"adjusted_2014_hitting.sort_values(by='salary',ascending=False)","f7e726d0":"fielding=pd.read_csv('\/kaggle\/input\/the-history-of-baseball\/fielding.csv')\nfielding_2014=fielding[fielding['player_id'].isin(players_2014)&fielding['year'].isin(['2014'])]\nfielding_2014['player_id'].value_counts()","665df0a4":"fielding_2014[fielding_2014['player_id'].isin(['johnske05'])]","95d6e2d3":"positions_adjusted=pd.DataFrame()\nfor player in players:\n    player_df=fielding_2014[fielding_2014['player_id'].isin([player])]\n    positions=player_df['pos'].value_counts().index\n    tracker=pd.DataFrame()\n    for position in positions:\n        df=player_df[player_df['pos'].isin([position])]\n        tracker=tracker.append({'pos':position,'games':df.sum()['g']},ignore_index=True)\n    id_max=tracker['games'].idxmax()\n    positions_adjusted=positions_adjusted.append({'player_id':player,'pos':tracker['pos'][id_max]},ignore_index=True)\npositions_adjusted","961efa47":"adjusted_2014_hitting['pos']=[positions_adjusted[positions_adjusted['player_id'].isin([player])].reset_index()\n                        ['pos'][0] for player in adjusted_2014_hitting['player_id']]\nadjusted_2014_hitting","ea73bae5":"adjusted_2014_hitting=adjusted_2014_hitting[-adjusted_2014_hitting['pos'].isin(['P'])].reset_index().drop(columns='index')\nadjusted_2014_hitting","867974f7":"adjusted_2014_hitting['name']=[names[names['player_id'].isin([player])].reset_index()\n                        ['name'][0] for player in adjusted_2014_hitting['player_id']]\nadjusted_2014_hitting","831080b6":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(20,10))\nsns.heatmap(adjusted_2014_hitting.corr(),annot=True,linewidth=0.5)","0e0d503b":"df=pd.DataFrame(adjusted_2014_hitting.corr()['salary']).reset_index()\ndf['Beat Threshold']=abs(df['salary'])>0.5\n\nsns.lmplot(x='index', y=\"salary\", data=df,hue='Beat Threshold',fit_reg=False,height=4,\n           aspect=4).set_xticklabels(rotation=90)","7684ef97":"features=['ab','r','h','double','rbi','bb','sf']","7978798f":"def scatter(attribute):\n    p1=sns.lmplot(x=attribute, y=\"salary\", data=adjusted_2014_hitting,fit_reg=False,height=8,aspect=4)\n    ax = p1.axes[0,0]\n    for i in range(len(adjusted_2014_hitting)):\n        ax.text(adjusted_2014_hitting[attribute][i], adjusted_2014_hitting['salary'][i], adjusted_2014_hitting['name'][i],\n               fontsize='small',rotation=45)","86931fe3":"scatter('rbi')","3e570282":"scatter('bb')","ac5d3066":"y=adjusted_2014_hitting['salary']\nX=adjusted_2014_hitting[features]\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\ntrain_X, val_X, train_y, val_y = train_test_split(X, y,random_state=1, test_size=0.4)\nbasic_model = DecisionTreeRegressor(random_state=1)\nbasic_model.fit(train_X, train_y)\npredictions=basic_model.predict(val_X)","c69d1ef6":"df=pd.DataFrame(val_X)\ndf['prediction']=predictions\ndf['ID']=[adjusted_2014_hitting['player_id'][index] for index in df.reset_index()['index']]\ndf['name']=[adjusted_2014_hitting['name'][index] for index in df.reset_index()['index']]\ndf['pos']=[adjusted_2014_hitting['pos'][index] for index in df.reset_index()['index']]\ndf['salary']=[adjusted_2014_hitting['salary'][index] for index in df.reset_index()['index']]\ndf=df[['name','ID','ab','r','h','double','rbi','bb','pos','salary','prediction']]\ndf","856ccc94":"df['excess']=df['prediction']-df['salary']\ndf.sort_values(by='excess')","991e58b4":"df.style.format({'prediction': \"{0:,.2f}\",'salary': \"{0:,.2f}\",'excess': \"{0:,.2f}\"})\ndf=df.astype({\"ab\": int,\"r\": int,\"h\": int,\"double\": int,\"rbi\": int,\"bb\":int}) \ndf","3b895b6f":"type(df.style.format({'prediction': \"{0:,.2f}\",'salary': \"{0:,.2f}\",'excess': \"{0:,.2f}\"})\n)","fff5dd4d":"abs(df['excess']).mean()","bca29ba6":"from sklearn.metrics import mean_absolute_error\nmean_absolute_error(df['salary'], df['prediction'])","7afff407":"df['salary'].mean()","4f6e8504":"df['salary'].median()","7330e55a":"adjusted_2014_hitting.to_csv('ML1')","ca3f49d7":"Salary shows positive correlation with base on balls.","d23b55e7":"# Import batting statistics.","faa8d73d":"Salaries for all MLB players from 1985 to 2015.","5f5a18ff":"# Add position data","439d6fbc":"Lot of players will have multiple entries- because they will play multiple positions over the course of a season, sometimes for multiple teams. For each individual player, let's extract their most common position based on how many games were played at each position.","42b08176":"Average error of about $3.5 million.","7dc88455":"# Add player names","6488bfde":"# Add salary data","f5fd1d1e":"# Import data","5cfa0cbf":"Pitchers should not be assessed based on their hitting statistics. Let's add in each player's position.","9e692513":"Get player names by calling player ID.","dcfd5a8b":"Average salary is about $4.5 million and median is $2 million...","70c578bd":"Add in the actual player names now that we've used player ID to map to all the necessary data.","9f8573f4":"If I set the 'correlation threshold' to be 0.4, then at-bats, runs, hits, doubles, rbi's, base on balls, intentional base on balls, and sacrifice fly's are all directly correlated with salary. Let's use these as the features for our ML model.","0c7bb178":"Top paid players look familiar, salaries are accurate.","c86e432e":"Lot of data to look at here- let's condense our dataset and use data from 2014 salaries to predict 2015 salaries.","d8b72478":"# Create dataframe with model data and results","76419706":"We only had 802 players in our list of player salaries, but the batting data shows 877 entries. This is becase players that were traded during the season will have seperate batting stats for each team they play for. For these duplicates, let's add their batting data into one entry and see if that matches up. It is also possible there either of the datasets were missing salary or batting data for some players.","bc90568e":"Take out all of the pitchers.","60d9dd47":"Map player ID to salary and add to dataframe.","308829ca":"Salary shows positive correlation with rbis.","1730143e":"# Building the ML model","486a98fc":"add commas, mae, show graphs for before","88791265":"# Determining criteria for ML model","832cb9b9":"# Evaluate model","c2de2b04":"Let's analyze which stats are most positively\/negatively correlated with salary.","fb660c05":"# Select data year"}}