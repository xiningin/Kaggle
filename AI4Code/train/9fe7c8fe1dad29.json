{"cell_type":{"42f3fa04":"code","29759f2e":"code","c5028f0c":"code","81188f3a":"code","f816258e":"code","b0f9fca7":"code","986d7590":"code","a4c3c1da":"code","793a07e2":"code","a551895f":"code","645bb181":"code","c1d852f6":"code","b31efb97":"code","456446b4":"code","5b3264df":"code","d9c53e7d":"code","0a45249f":"code","b1343a6a":"code","51da0d6c":"code","28556d58":"code","7ae54c02":"markdown","b6131b1e":"markdown","2ec81919":"markdown","e3b1a8e2":"markdown","89061cdb":"markdown","42e2c040":"markdown","4b4872f4":"markdown","2f4c39d8":"markdown","9fe34e7c":"markdown","b7086080":"markdown","8cb2fe2e":"markdown","26e2b82a":"markdown","5eff0383":"markdown","a509df4b":"markdown","9d2a792f":"markdown","e1e26bf4":"markdown","3df35837":"markdown","b0d179f3":"markdown"},"source":{"42f3fa04":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport folium\nimport warnings\nwarnings.filterwarnings('ignore')","29759f2e":"pol_data = pd.read_csv(\"\/kaggle\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Measurement_summary.csv\")\npol_data.head()","c5028f0c":"pol_data.shape","81188f3a":"pol_data.isnull().sum()","f816258e":"pol_data[['SO2', 'NO2', 'O3', 'CO', 'PM10', 'PM2.5']].describe()","b0f9fca7":"print(\"We have\", pol_data['SO2'].loc[(pol_data['SO2']<0)].count(),\"negative values for SO2\")\nprint(\"We have\", pol_data['NO2'].loc[(pol_data['NO2']<0)].count(),\"negative values for NO2\")\nprint(\"We have\", pol_data['O3'].loc[(pol_data['O3']<0)].count(),\"negative values for O3\")\nprint(\"We have\", pol_data['CO'].loc[(pol_data['CO']<0)].count(),\"negative values for CO\")\nprint(\"We have\", pol_data['PM10'].loc[(pol_data['PM10']<0)].count(),\"negative values for PM10\")\nprint(\"We have\", pol_data['PM2.5'].loc[(pol_data['PM2.5']<0)].count(),\"negative values for PM2.5\")","986d7590":"# https:\/\/www.kaggle.com\/ramontanoeiro\/seoul-air-pollution\ndata = [go.Scatter(x=pol_data['Measurement date'],\n                   y=pol_data['SO2'], name='SO2'),\n        go.Scatter(x=pol_data['Measurement date'],\n                   y=pol_data['NO2'], name='NO2'),\n        go.Scatter(x=pol_data['Measurement date'],\n                   y=pol_data['CO'], name='CO'),\n        go.Scatter(x=pol_data['Measurement date'],\n                   y=pol_data['O3'], name='O3')]\n       \n##layout object\nlayout = go.Layout(title='Gases Levels',\n                    yaxis={'title':'Level (ppm)'},\n                    xaxis={'title':'Date'})\n                    \n## Figure object\n\nfig = go.Figure(data=data, layout=layout)\n\n## Plotting\npy.iplot(fig)","a4c3c1da":"data = pol_data[pol_data['SO2']<0]","793a07e2":"data[['SO2','NO2','O3','CO','PM10','PM2.5']].describe()","a551895f":"#https:\/\/www.kaggle.com\/bappekim\/visualizing-the-location-of-station-using-folium\nfrom sklearn.impute import SimpleImputer\nimp = SimpleImputer(missing_values=-1, strategy='mean')\ndf_imputed = pd.DataFrame(imp.fit_transform(pol_data[[\"SO2\",\"NO2\",\"O3\",\"CO\",\"PM10\",\"PM2.5\"]]))\ndf_imputed.columns = pol_data[[\"SO2\",\"NO2\",\"O3\",\"CO\",\"PM10\",\"PM2.5\"]].columns\ndf_imputed.index = pol_data.index\nremain_df = pol_data[pol_data.columns.difference([\"SO2\",\"NO2\",\"O3\",\"CO\",\"PM10\",\"PM2.5\"])]\ndf = pd.concat([remain_df, df_imputed], axis=1)\ndf.head()","645bb181":"# #https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.17.0\/generated\/pandas.core.groupby.GroupBy.last.html\n#TODO : Implement the time series with folium\nlast_entry = df.groupby('Station code').max() #here max is used just to get all type of pointers in the maps\n# # last_entry.apply(lambda x: x.sample())\nlast_entry","c1d852f6":"safe_limit = pd.read_csv('\/kaggle\/input\/air-pollution-in-seoul\/AirPollutionSeoul\/Original Data\/Measurement_item_info.csv')\nsafe_limit","b31efb97":"#https:\/\/stackoverflow.com\/a\/16729808\ndef get_colors(data, safe_limit, item):\n    item_row = safe_limit.loc[safe_limit['Item name'] == item]\n    if (data > item_row.iloc[0]['Very bad(Red)']):\n        return 'red'\n    elif (data > item_row.iloc[0]['Bad(Yellow)']):\n        return 'yellow'\n    elif (data > item_row.iloc[0]['Normal(Green)']):\n        return 'green'\n    else:\n        return 'blue'","456446b4":"last_entry['SO2 Color'] = last_entry['SO2'].apply(get_colors, args =(safe_limit, 'SO2' )) \nlast_entry['NO2 Color'] = last_entry['NO2'].apply(get_colors, args =(safe_limit, 'NO2' )) \nlast_entry['O3 Color'] = last_entry['O3'].apply(get_colors, args =(safe_limit, 'O3' )) \nlast_entry['CO Color'] = last_entry['CO'].apply(get_colors, args =(safe_limit, 'CO' )) \nlast_entry['PM10 Color'] = last_entry['PM10'].apply(get_colors, args =(safe_limit, 'PM10' )) \nlast_entry['PM2.5 Color'] = last_entry['PM2.5'].apply(get_colors, args =(safe_limit, 'PM2.5' )) \nlast_entry","5b3264df":"# This creates the map object\nm = folium.Map(\n    location=[37.541, 126.981], # center of where the map initializes\n    #tiles='Stamen Toner', # the style used for the map (defaults to OSM)\n    zoom_start=11, # the initial zoom level\n    title = \"Pollution level of SO2\") \nfor ind in last_entry.index: \n    #print(row[1][0])\n    folium.Marker([last_entry['Latitude'][ind], last_entry['Longitude'][ind]], popup=ind, icon=folium.Icon(color=last_entry['SO2 Color'][ind], icon='info-sign')).add_to(m)\n\n# Diplay the map\nm","d9c53e7d":"# This creates the map object\nm = folium.Map(\n    location=[37.541, 126.981], # center of where the map initializes\n    #tiles='Stamen Toner', # the style used for the map (defaults to OSM)\n    zoom_start=11, # the initial zoom level\n    title = \"Pollution level of NO2\") \nfor ind in last_entry.index: \n    #print(row[1][0])\n    folium.Marker([last_entry['Latitude'][ind], last_entry['Longitude'][ind]], popup=ind, icon=folium.Icon(color=last_entry['NO2 Color'][ind], icon='info-sign')).add_to(m)\n\n# Diplay the map\nm","0a45249f":"# This creates the map object\nm = folium.Map(\n    location=[37.541, 126.981], # center of where the map initializes\n    #tiles='Stamen Toner', # the style used for the map (defaults to OSM)\n    zoom_start=11, # the initial zoom level\n    title = \"Pollution level of O3\") \nfor ind in last_entry.index: \n    #print(row[1][0])\n    folium.Marker([last_entry['Latitude'][ind], last_entry['Longitude'][ind]], popup=ind, icon=folium.Icon(color=last_entry['O3 Color'][ind], icon='info-sign')).add_to(m)\n\n# Diplay the map\nm","b1343a6a":"# This creates the map object\nm = folium.Map(\n    location=[37.541, 126.981], # center of where the map initializes\n    #tiles='Stamen Toner', # the style used for the map (defaults to OSM)\n    zoom_start=11, # the initial zoom level\n    title = \"Pollution level of CO\") \nfor ind in last_entry.index: \n    #print(row[1][0])\n    folium.Marker([last_entry['Latitude'][ind], last_entry['Longitude'][ind]], popup=ind, icon=folium.Icon(color=last_entry['CO Color'][ind], icon='info-sign')).add_to(m)\n\n# Diplay the map\nm","51da0d6c":"# This creates the map object\nm = folium.Map(\n    location=[37.541, 126.981], # center of where the map initializes\n    #tiles='Stamen Toner', # the style used for the map (defaults to OSM)\n    zoom_start=11, # the initial zoom level\n    title = \"Pollution level of PM10\") \nfor ind in last_entry.index: \n    #print(row[1][0])\n    folium.Marker([last_entry['Latitude'][ind], last_entry['Longitude'][ind]], popup=ind, icon=folium.Icon(color=last_entry['PM10 Color'][ind], icon='info-sign')).add_to(m)\n\n# Diplay the map\nm","28556d58":"# This creates the map object\nm = folium.Map(\n    location=[37.541, 126.981], # center of where the map initializes\n    #tiles='Stamen Toner', # the style used for the map (defaults to OSM)\n    zoom_start=11, # the initial zoom level\n    title = \"Pollution level of PM2.5\") \nfor ind in last_entry.index: \n    #print(row[1][0])\n    folium.Marker([last_entry['Latitude'][ind], last_entry['Longitude'][ind]], popup=ind, icon=folium.Icon(color=last_entry['PM2.5 Color'][ind], icon='info-sign')).add_to(m)\n\n# Diplay the map\nm","7ae54c02":"The get color function return a color based on the level of polution of each chemical","b6131b1e":"## Pollution of SO2","2ec81919":"We are adding additional columns in the last_entry dataframe for representation purpose.","e3b1a8e2":"Lets plot the map showing the level of SO2","89061cdb":"This is my attempt to visualize the air pollution in Seoul, South Korea. I am using the data from [air-pollution-in-seoul](https:\/\/www.kaggle.com\/bappekim\/air-pollution-in-seoul) provided by [@bappekim](https:\/\/www.kaggle.com\/bappekim).","42e2c040":"## Pollution of CO","4b4872f4":"## Pollution of PM2.5","2f4c39d8":"Now we need to know about the levels of the above chemicals that are good and bad.","9fe34e7c":"Here we can see that the minimum value was -1 in some cases. That is not an acceptable value as there is nothing like negative pollution. This could be a measurement error. Lets count the number of occurrances of this.","b7086080":"It looks like most of this are occurring in same date, as we can see that the count is same and the mean is almost near to -1 in most of the columns. We can use imputation to replace these values with the mean.","8cb2fe2e":"There are multiple csv files available. Lets open the measurement summary","26e2b82a":"## Pollution of O3","5eff0383":"There are no null values in the data. Lets see the distribution.","a509df4b":"- TODO : Add time slider in folium maps","9d2a792f":"## Pollution of NO2","e1e26bf4":"## Pollution of PM10","3df35837":"There are 11 columns and 647511 rows in the dataset","b0d179f3":"## Importing Libraries and Data"}}