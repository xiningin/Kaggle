{"cell_type":{"7a215863":"code","d34adb5c":"code","4b399700":"code","d3343144":"code","0fb013b4":"code","50fc1cda":"code","20f2e09c":"code","869fab2a":"code","ecbdddf9":"code","f8b821c3":"code","3bb1919e":"code","c656bc2b":"code","1f4a18e9":"code","ec2247a4":"code","694b6c89":"code","9d5dbaec":"code","f27c243f":"code","36a1e5fc":"code","28246cfd":"code","3c5a5002":"code","df00bd9a":"code","7426b625":"code","3e29a040":"code","b1f9ba97":"code","4adfb345":"code","11e784d1":"code","d59f9fba":"code","8b888b19":"code","51c4976c":"code","abfa53aa":"code","035c9247":"code","887de67a":"code","844500ec":"markdown","4b9ed027":"markdown","7ada1555":"markdown","fb5eab1f":"markdown","667817e5":"markdown","48c7bf2d":"markdown","0822f5eb":"markdown","3aac52d0":"markdown","f2d61a0d":"markdown","dede223f":"markdown","4d53e381":"markdown","449eb5e5":"markdown","2363c94f":"markdown","2519f0de":"markdown","181ac186":"markdown","abce8337":"markdown"},"source":{"7a215863":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt","d34adb5c":"df= pd.read_csv('..\/input\/iris\/Iris.csv')","4b399700":"df.head()","d3343144":"df.drop(columns='Id',inplace= True)","0fb013b4":"df.info()","50fc1cda":"df.describe()","20f2e09c":"sns.pairplot(df,hue='Species')","869fab2a":"df.replace(['Iris-setosa','Iris-versicolor','Iris-virginica'],['setosa','versicolor','virginica'],inplace=True)","ecbdddf9":"df.groupby('Species').count().T","f8b821c3":"(df['Species'].value_counts()).plot(kind='bar',color = ['red', 'green','blue'])","3bb1919e":"sns.barplot(x='Species',y='SepalLengthCm',data=df)","c656bc2b":"sns.barplot(x='Species',y='PetalLengthCm',data=df)","1f4a18e9":"sns.barplot(x='Species',y='SepalWidthCm',data=df)","ec2247a4":"sns.barplot(x='Species',y='PetalWidthCm',data=df)","694b6c89":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split,cross_val_score\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler","9d5dbaec":"df_encoded= df.copy()","f27c243f":"label= LabelEncoder()\ndf_encoded['labels']= label.fit_transform(df['Species'])","36a1e5fc":"list(label.inverse_transform([0, 1, 2]))","28246cfd":"df_encoded['labels'].astype('category')","3c5a5002":"x= df_encoded.drop(columns=['labels','Species'])\ny=df_encoded['labels']","df00bd9a":"x_scaled= StandardScaler().fit_transform(x)","7426b625":"x_train,x_test,y_train,y_test= train_test_split(x_scaled,y,test_size= 0.3,random_state=101)","3e29a040":"accuracy=[]\nfor i in range(1,40):\n  knn= KNeighborsClassifier(n_neighbors=i)\n  score= cross_val_score(knn,df_encoded.drop(columns=['Species']),df_encoded['labels'],cv=10)\n  accuracy.append(score.mean())","b1f9ba97":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),accuracy,color='black',linestyle='dashed',marker='o',markerfacecolor='red',markersize=10)\nplt.xlabel('K')\nplt.ylabel('accuracy rate')","4adfb345":"error_rate = []\nfor i in range(1,40):\n knn = KNeighborsClassifier(n_neighbors=i)\n knn.fit(x_train,y_train)\n pred_i = knn.predict(x_test)\n error_rate.append(np.mean(pred_i != y_test))\n\nplt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', \n         marker='o',markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\nprint(\"Minimum error:-\",min(error_rate),\"at K =\",error_rate.index(min(error_rate)))","11e784d1":"acc = []\n# Will take some time\nfrom sklearn import metrics\nfor i in range(1,40):\n    neigh = KNeighborsClassifier(n_neighbors = i).fit(x_train,y_train)\n    yhat = neigh.predict(x_test)\n    acc.append(metrics.accuracy_score(y_test, yhat))\n    \nplt.figure(figsize=(10,6))\nplt.plot(range(1,40),acc,color = 'blue',linestyle='dashed', \n         marker='o',markerfacecolor='red', markersize=10)\nplt.title('accuracy vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Accuracy')\nprint(\"Maximum accuracy:-\",max(acc),\"at K =\",acc.index(max(acc)))","d59f9fba":"neigh1 = KNeighborsClassifier(n_neighbors = i).fit(x_train,y_train)\npred1 = neigh1.predict(x_test)\nprint(metrics.confusion_matrix(y_test,pred1))\nprint(metrics.classification_report(y_test,pred1))","8b888b19":"pip install dtreeviz","51c4976c":"from sklearn.tree import DecisionTreeClassifier\nfrom dtreeviz.trees import *\nimport graphviz\nfig = plt.figure(figsize=(25,20))\nclf = tree.DecisionTreeClassifier(max_depth=5)\nclf.fit(x_train, y_train)\nviz = dtreeviz(clf,\n               x_train,\n               y_train,\n               target_name='Species',\n               feature_names=x.columns,\n               title=\"Species \",\n               class_names=['Setosa', 'Versicolor', 'Virginica'],\n               histtype='barstacked', orientation= 'LR',# default \n               scale=1.2)\nviz","abfa53aa":"from sklearn import tree\nplt.figure(figsize=(20,15))\ntree.plot_tree(clf,filled=True)","035c9247":"def predict(x_input):\n  neigh2 = KNeighborsClassifier(n_neighbors = 6).fit(x_train,y_train)\n  pred2 = neigh1.predict(x_input)\n  if pred2.flatten()==0:\n    print('Belongs to species : Setosa')\n  elif pred2.flatten()==1:\n    print('Belongs to species : Versicolor')\n  else:\n    print('Belongs to species : Virginica')","887de67a":"4x_input=[]\nfor i in ['SepalLengthCm','SepalWidthCm','PetalLengthCm','PetalWidthCm']:\n  a = float(input(f'Enter the value for {i}:'))\n  x_input.append(a)\nx_input= (np.array(x_input)).reshape(1,-1)\npredict(x_input)","844500ec":"## Now lets try and classify a value","4b9ed027":"# ERROR Rate","7ada1555":"Observation:\n\nBoth error rate and Accuracy rate K=6 as the optimum value","fb5eab1f":"## Utilizing info() and describe to check the type of Data and to see probable missing values and outliers:","667817e5":"# Visualizing the features indivually using barplot","48c7bf2d":"# Checking if the categories are balanced or imbalanced using groupby and barplot:","0822f5eb":"# **KNN model**","3aac52d0":"# Accuracy Rate","f2d61a0d":"## Observations:\n\nThe length and width of petal and length Sepal seems to be in the incresing from setosa to virginica while incase sepal width Setosa seems to be higher","dede223f":"### **Observations:**\n\n- The setosa category seems to be forming a separate cluster throughout while overlapping is observed for other two categories","4d53e381":"###Observations:\n\nThe above visualization proved that this is a balanced dataset","449eb5e5":"### **Observations:**\n\nNo outliers or missing values noticed.","2363c94f":"Choosing the value of k by calculating the rate of accuracy using cross-validaion","2519f0de":"# Encoding the target feature into numbers using label encoding and then converting the feature into categorical data type","181ac186":"#Visualizing the features of the dataset with respect to the target feature inorder visualize the clusters formations:","abce8337":"# Splitting the dataset into dependent (Y) and independent (X) variables"}}