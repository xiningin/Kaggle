{"cell_type":{"e561755e":"code","444f8d6d":"code","a47432a9":"code","de42801b":"code","832cb8fd":"code","900e2213":"code","9d5e3617":"code","5293c05e":"code","b35964f2":"code","f6d07388":"code","83f28221":"code","5b1c2208":"code","22c7c9e1":"code","5922b9b6":"code","b06996a3":"code","88bd1e97":"markdown","cef2c034":"markdown","b4285ccb":"markdown","299e8e86":"markdown"},"source":{"e561755e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","444f8d6d":"data = pd.read_csv('\/kaggle\/input\/fuel-economy\/database.csv')\n\n(n,p) = data.shape\nprint(\"n = \" + str(n))\nprint(\"p = \"+str(p))","a47432a9":"#Discover the data \n\ndata.head(5)","de42801b":"data.columns","832cb8fd":"data_2007 = data[data.Year==2007]\n\ndata_2007.head(2)","900e2213":"import matplotlib.pylab as plt\n\nplt.scatter(data_2007['Engine Displacement'], data_2007['Combined MPG (FT1)'])\n\n\nplt.xlabel('Engine Displacement')\nplt.ylabel('Fuel Efficiency')\nplt.title('The relationship between engine displacement and fuel efficiency of all 2007 model year vehicles ')","9d5e3617":"#The training data\n\nfrom sklearn.linear_model import LinearRegression\n\n# Create training predictors data\ntrain_X = data_2007['Engine Displacement'].values.reshape(-1, 1)\ntrain_Y = data_2007['Combined MPG (FT1)']\n","5293c05e":"\n\nreg = LinearRegression().fit(train_X, train_Y)\n\nprint(\"the score of linear regression is : \")\nreg.score(train_X, train_Y)","b35964f2":"data_2008 = data[data.Year==2008]\n\n","f6d07388":"# Create test predictors data\n\ntest_X = data_2008['Engine Displacement'][1:200]\ntest_X = test_X.values.reshape(-1, 1)","83f28221":"FE_2008 = reg.predict(test_X)\n#The predicted data\ny_predicted = FE_2008","5b1c2208":"y_actual = data_2008['Combined MPG (FT1)'][1:200]\n\nplt.scatter(y_predicted, y_actual)\n\nplt.xlabel('Predicted')\nplt.ylabel('Observed')","22c7c9e1":"from sklearn.metrics import mean_squared_error\n\nfrom math import sqrt\n\nrms = sqrt(mean_squared_error(y_actual, y_predicted))\nprint('The Root Mean Squared Error (RMSE) is :')\nprint(str(rms) + ' which looks like a good result as a first modelling idk')","5922b9b6":"from pyearth import Earth\n\n#mars solution\nmodel = Earth()\n\nmodel = Earth(max_degree=2, penalty=1.0, minspan_alpha = 0.01, endspan_alpha = 0.01, endspan=5) #2nd degree formula is necessary to see interactions, penalty and alpha values for making model simple\n\nmodel.fit(train_X, train_Y)\nmodel.score(train_X, train_Y)\n","b06996a3":"FE_2008_bis = model.predict(test_X)\n#The predicted data\ny_predicted_mars = FE_2008_bis\n\nplt.scatter(y_predicted_mars, y_actual)\n\nplt.xlabel('Predicted')\nplt.ylabel('Observed')\n\n\nrms = sqrt(mean_squared_error(y_actual, y_predicted_mars))\nrms","88bd1e97":"##2007's data ****","cef2c034":"\nThis introductory illustration will focus on high-level concepts of model building by using a single predictor, engine displacement (the volume inside the engine cylinders), and a single response, unadjusted highway MPG.\n\nThe training data are 2007's. The test ones are 2008's.\n\nHowever, In practice, we would build a model on as many vehicle characteristics as possible in order to find the most predictive model. \n\n","b4285ccb":"#### Using MultiVariate Adaptive Regression ","299e8e86":"n = samples\n\np = variables number"}}