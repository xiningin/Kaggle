{"cell_type":{"cace3a7b":"code","0ebffffb":"code","faa1e6ac":"code","6bb60890":"code","2b947492":"code","1358707a":"code","6ad9680f":"code","501d7cbd":"code","3c04c07d":"code","491f9773":"code","fb366d26":"markdown","c95da19c":"markdown","a5f84a3a":"markdown","3aa6c718":"markdown"},"source":{"cace3a7b":"# Kaggle dataset: https:\/\/www.kaggle.com\/xhlulu\/efficientnet-keras-source-code\n!pip install \/kaggle\/input\/efficientnet-keras-source-code\/ -q","0ebffffb":"import os\n\nimport efficientnet.tfkeras as efn\nimport numpy as np\nimport pandas as pd\nfrom kaggle_datasets import KaggleDatasets\nimport tensorflow as tf\nimport tensorflow.keras.layers as L\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","faa1e6ac":"# Detect hardware, return appropriate distribution strategy\ntry:\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\n    print(\"Running on TPU:\", tpu.master())\n    \nexcept ValueError:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nn_device = strategy.num_replicas_in_sync\nprint(\"Runnin on\", n_device, \"replicas\")","6bb60890":"BATCH_SIZE = n_device * 16\nN_EPOCHS = 7","2b947492":"AUTO = tf.data.experimental.AUTOTUNE\nGCS_DS_PATH = KaggleDatasets().get_gcs_path('cassava-leaf-disease-classification')","1358707a":"def decode_image(path, label=None, target_size=(512, 512)):\n    img = tf.image.decode_jpeg(tf.io.read_file(path), channels=3)\n    img = tf.cast(img, tf.float32) \/ 255.0\n    img = tf.image.resize(img, target_size)\n    \n    return img if label is None else img, label\n\ndef data_augment(img, label=None):\n    img = tf.image.random_flip_left_right(img)\n    img = tf.image.random_flip_up_down(img)\n    \n    return img if label is None else img, label","6ad9680f":"load_dir = \"\/kaggle\/input\/cassava-leaf-disease-classification\/\"\ndf = pd.read_csv(load_dir + 'train.csv')\nsub_df = pd.read_csv(load_dir + 'sample_submission.csv')\n\ndf['paths'] = GCS_DS_PATH + \"\/train_images\/\" + df.image_id","501d7cbd":"train_df, valid_df = train_test_split(df, test_size=0.2, random_state=42)\n\ntrain_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((train_df.paths, train_df.label))\n    .map(decode_image, num_parallel_calls=AUTO).cache()\n    .map(data_augment, num_parallel_calls=AUTO).repeat()\n    .shuffle(1024).batch(BATCH_SIZE).prefetch(AUTO)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((valid_df.paths, valid_df.label))\n    .map(decode_image, num_parallel_calls=AUTO)\n    .batch(BATCH_SIZE).cache().prefetch(AUTO)\n)","3c04c07d":"with strategy.scope():\n    model = tf.keras.Sequential([\n        efn.EfficientNetB7(\n            input_shape=(512, 512, 3),\n            weights='imagenet',\n            include_top=False\n        ),\n        L.GlobalAveragePooling2D(),\n        L.Dense(5, activation='sigmoid')\n    ])\n        \n    model.compile(\n        optimizer='adam',\n        loss = 'sparse_categorical_crossentropy',\n        metrics=['sparse_categorical_accuracy']\n    )\n\nmodel.summary()","491f9773":"steps_per_epoch = train_df.shape[0] \/\/ BATCH_SIZE\n\ncheckpoint = tf.keras.callbacks.ModelCheckpoint(\n    'model.h5', save_best_only=True)\n\nhistory = model.fit(\n    train_dataset, \n    epochs=N_EPOCHS,\n    callbacks=[checkpoint],\n    steps_per_epoch=steps_per_epoch,\n    validation_data=valid_dataset\n)","fb366d26":"## TPU config","c95da19c":"## Dataset","a5f84a3a":"This is the 4th notebook I'm making using EfficientNet on TPUs. The full list:\n\n1. https:\/\/www.kaggle.com\/xhlulu\/flowers-tpu-concise-efficientnet-b7\n2. https:\/\/www.kaggle.com\/xhlulu\/plant-pathology-very-concise-tpu-efficientnet\n3. https:\/\/www.kaggle.com\/xhlulu\/alaska2-efficientnet-on-tpus\n\n## References\n\n1. https:\/\/www.kaggle.com\/mgornergoogle\/getting-started-with-100-flowers-on-tpu\n2. https:\/\/codelabs.developers.google.com\/codelabs\/keras-flowers-data\/#0\n","3aa6c718":"## Variables and configs"}}