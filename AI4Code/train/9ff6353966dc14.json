{"cell_type":{"c46c6190":"code","275ec4ed":"code","521356a2":"code","43bfb35d":"code","1fbab8db":"code","5d30a6e1":"code","8ebb4c5a":"code","23d75526":"code","bc7d51f9":"code","26d7853f":"code","353cb422":"code","8c2ad80e":"code","a0e96c6f":"code","55f384cc":"code","b428417a":"code","1b46cf8f":"code","1b8587d2":"code","56b7d37d":"code","47f6afe9":"code","4cfae428":"code","fc16f874":"code","3776ea81":"code","aa8cec19":"code","bc5fc038":"code","88428a50":"code","c9bd7638":"code","9722ac41":"code","5ae1c277":"code","31fab439":"code","20351b10":"code","5c8acd73":"markdown","9eb2da9d":"markdown","df65b95d":"markdown","76784c06":"markdown","f09cf9a1":"markdown","d1a4b40f":"markdown","ee43e884":"markdown","a9798efa":"markdown","806545b5":"markdown","5fc2c99f":"markdown","e127cd5d":"markdown","d843a4e8":"markdown","35618790":"markdown","38287635":"markdown"},"source":{"c46c6190":"import os\nimport numpy as np\nimport pandas as pd\nimport sklearn.metrics as mtr\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, KFold\nimport time\nimport lightgbm as lgb\n\nfrom keras.layers import Dense,Input,Flatten,concatenate,Dropout,Lambda,BatchNormalization,LeakyReLU,PReLU,ELU,ThresholdedReLU,Concatenate\nfrom keras.models import Model\nimport keras.backend as K\nfrom  keras.callbacks import EarlyStopping,ModelCheckpoint\nfrom keras.optimizers import Adam\nimport re\nfrom keras.losses import binary_crossentropy\nfrom  keras.callbacks import EarlyStopping, ModelCheckpoint, ReduceLROnPlateau, Callback\nimport codecs\nfrom keras.utils import to_categorical\nfrom sklearn.metrics import f1_score\n\nimport datetime\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n%matplotlib inline\n\nTRAIN_OFFLINE = False\n\npd.set_option('display.max_columns', 50)\npd.set_option('display.max_rows', 150)","275ec4ed":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","521356a2":"# train = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', dtype={'WindSpeed': 'object'})\nif TRAIN_OFFLINE:\n    train = pd.read_csv('..\/input\/train.csv', dtype={'WindSpeed': 'object'})\nelse:\n    train = pd.read_csv('\/kaggle\/input\/nfl-big-data-bowl-2020\/train.csv', dtype={'WindSpeed': 'object'})","43bfb35d":"outcomes = train[['GameId','PlayId','Yards']].drop_duplicates()","1fbab8db":"train.head()","5d30a6e1":"def strtoseconds(txt):\n    txt = txt.split(':')\n    ans = int(txt[0])*60 + int(txt[1]) + int(txt[2])\/60\n    return ans\n\ndef strtofloat(x):\n    try:\n        return float(x)\n    except:\n        return -1\n\ndef map_weather(txt):\n    ans = 1\n    if pd.isna(txt):\n        return 0\n    if 'partly' in txt:\n        ans*=0.5\n    if 'climate controlled' in txt or 'indoor' in txt:\n        return ans*3\n    if 'sunny' in txt or 'sun' in txt:\n        return ans*2\n    if 'clear' in txt:\n        return ans\n    if 'cloudy' in txt:\n        return -ans\n    if 'rain' in txt or 'rainy' in txt:\n        return -2*ans\n    if 'snow' in txt:\n        return -3*ans\n    return 0\n\ndef OffensePersonnelSplit(x):\n    dic = {'DB' : 0, 'DL' : 0, 'LB' : 0, 'OL' : 0, 'QB' : 0, 'RB' : 0, 'TE' : 0, 'WR' : 0}\n    for xx in x.split(\",\"):\n        xxs = xx.split(\" \")\n        dic[xxs[-1]] = int(xxs[-2])\n    return dic\n\ndef DefensePersonnelSplit(x):\n    dic = {'DB' : 0, 'DL' : 0, 'LB' : 0, 'OL' : 0}\n    for xx in x.split(\",\"):\n        xxs = xx.split(\" \")\n        dic[xxs[-1]] = int(xxs[-2])\n    return dic\n\ndef orientation_to_cat(x):\n    x = np.clip(x, 0, 360 - 1)\n    try:\n        return str(int(x\/15))\n    except:\n        return \"nan\"\ndef preprocess(train):\n    ## GameClock\n    train['GameClock_sec'] = train['GameClock'].apply(strtoseconds)\n    train[\"GameClock_minute\"] = train[\"GameClock\"].apply(lambda x : x.split(\":\")[0]).astype(\"object\")\n\n    ## Height\n    train['PlayerHeight_dense'] = train['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))\n\n    ## Time\n    train['TimeHandoff'] = train['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n    train['TimeSnap'] = train['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n\n    train['TimeDelta'] = train.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)\n    train['PlayerBirthDate'] = train['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))\n\n    ## Age\n    seconds_in_year = 60*60*24*365.25\n    train['PlayerAge'] = train.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()\/seconds_in_year, axis=1)\n    train[\"PlayerAge_ob\"] = train['PlayerAge'].astype(np.int).astype(\"object\")\n\n    ## WindSpeed\n    train['WindSpeed_ob'] = train['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)\n    train['WindSpeed_ob'] = train['WindSpeed_ob'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\n    train['WindSpeed_ob'] = train['WindSpeed_ob'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)\n    train['WindSpeed_dense'] = train['WindSpeed_ob'].apply(strtofloat)\n\n    ## Weather\n    train['GameWeather_process'] = train['GameWeather'].str.lower()\n    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: \"indoor\" if not pd.isna(x) and \"indoor\" in x else x)\n    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: x.replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly') if not pd.isna(x) else x)\n    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: x.replace('clear and sunny', 'sunny and clear') if not pd.isna(x) else x)\n    train['GameWeather_process'] = train['GameWeather_process'].apply(lambda x: x.replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)\n    train['GameWeather_dense'] = train['GameWeather_process'].apply(map_weather)\n\n    ## Rusher\n    train['IsRusher'] = (train['NflId'] == train['NflIdRusher'])\n    train['IsRusher_ob'] = (train['NflId'] == train['NflIdRusher']).astype(\"object\")\n    temp = train[train[\"IsRusher\"]][[\"Team\", \"PlayId\"]].rename(columns={\"Team\":\"RusherTeam\"})\n    train = train.merge(temp, on = \"PlayId\")\n    train[\"IsRusherTeam\"] = train[\"Team\"] == train[\"RusherTeam\"]\n\n    ## dense -> categorical\n    train[\"Quarter_ob\"] = train[\"Quarter\"].astype(\"object\")\n    train[\"Down_ob\"] = train[\"Down\"].astype(\"object\")\n    train[\"JerseyNumber_ob\"] = train[\"JerseyNumber\"].astype(\"object\")\n    train[\"YardLine_ob\"] = train[\"YardLine\"].astype(\"object\")\n    # train[\"DefendersInTheBox_ob\"] = train[\"DefendersInTheBox\"].astype(\"object\")\n    # train[\"Week_ob\"] = train[\"Week\"].astype(\"object\")\n    # train[\"TimeDelta_ob\"] = train[\"TimeDelta\"].astype(\"object\")\n\n\n    ## Orientation and Dir\n    train[\"Orientation_ob\"] = train[\"Orientation\"].apply(lambda x : orientation_to_cat(x)).astype(\"object\")\n    train[\"Dir_ob\"] = train[\"Dir\"].apply(lambda x : orientation_to_cat(x)).astype(\"object\")\n\n    train[\"Orientation_sin\"] = train[\"Orientation\"].apply(lambda x : np.sin(x\/360 * 2 * np.pi))\n    train[\"Orientation_cos\"] = train[\"Orientation\"].apply(lambda x : np.cos(x\/360 * 2 * np.pi))\n    train[\"Dir_sin\"] = train[\"Dir\"].apply(lambda x : np.sin(x\/360 * 2 * np.pi))\n    train[\"Dir_cos\"] = train[\"Dir\"].apply(lambda x : np.cos(x\/360 * 2 * np.pi))\n\n    ## diff Score\n    train[\"diffScoreBeforePlay\"] = train[\"HomeScoreBeforePlay\"] - train[\"VisitorScoreBeforePlay\"]\n    train[\"diffScoreBeforePlay_binary_ob\"] = (train[\"HomeScoreBeforePlay\"] > train[\"VisitorScoreBeforePlay\"]).astype(\"object\")\n\n    ## Turf\n    Turf = {'Field Turf':'Artificial', 'A-Turf Titan':'Artificial', 'Grass':'Natural', 'UBU Sports Speed S5-M':'Artificial', 'Artificial':'Artificial', 'DD GrassMaster':'Artificial', 'Natural Grass':'Natural', 'UBU Speed Series-S5-M':'Artificial', 'FieldTurf':'Artificial', 'FieldTurf 360':'Artificial', 'Natural grass':'Natural', 'grass':'Natural', 'Natural':'Natural', 'Artifical':'Artificial', 'FieldTurf360':'Artificial', 'Naturall Grass':'Natural', 'Field turf':'Artificial', 'SISGrass':'Artificial', 'Twenty-Four\/Seven Turf':'Artificial', 'natural grass':'Natural'} \n    train['Turf'] = train['Turf'].map(Turf)\n\n    ## OffensePersonnel\n    temp = train[\"OffensePersonnel\"].iloc[np.arange(0, len(train), 22)].apply(lambda x : pd.Series(OffensePersonnelSplit(x)))\n    temp.columns = [\"Offense\" + c for c in temp.columns]\n    temp[\"PlayId\"] = train[\"PlayId\"].iloc[np.arange(0, len(train), 22)]\n    train = train.merge(temp, on = \"PlayId\")\n\n    ## DefensePersonnel\n    temp = train[\"DefensePersonnel\"].iloc[np.arange(0, len(train), 22)].apply(lambda x : pd.Series(DefensePersonnelSplit(x)))\n    temp.columns = [\"Defense\" + c for c in temp.columns]\n    temp[\"PlayId\"] = train[\"PlayId\"].iloc[np.arange(0, len(train), 22)]\n    train = train.merge(temp, on = \"PlayId\")\n\n    ## sort\n#     train = train.sort_values(by = ['X']).sort_values(by = ['Dis']).sort_values(by=['PlayId', 'Team', 'IsRusher']).reset_index(drop = True)\n    train = train.sort_values(by = ['X']).sort_values(by = ['Dis']).sort_values(by=['PlayId', 'IsRusherTeam', 'IsRusher']).reset_index(drop = True)\n    return train","8ebb4c5a":"def create_features(df, deploy=False):\n    def new_X(x_coordinate, play_direction):\n        if play_direction == 'left':\n            return 120.0 - x_coordinate\n        else:\n            return x_coordinate\n\n    def new_line(rush_team, field_position, yardline):\n        if rush_team == field_position:\n            # offense starting at X = 0 plus the 10 yard endzone plus the line of scrimmage\n            return 10.0 + yardline\n        else:\n            # half the field plus the yards between midfield and the line of scrimmage\n            return 60.0 + (50 - yardline)\n\n    def new_orientation(angle, play_direction):\n        if play_direction == 'left':\n            new_angle = 360.0 - angle\n            if new_angle == 360.0:\n                new_angle = 0.0\n            return new_angle\n        else:\n            return angle\n\n    def euclidean_distance(x1,y1,x2,y2):\n        x_diff = (x1-x2)**2\n        y_diff = (y1-y2)**2\n\n        return np.sqrt(x_diff + y_diff)\n\n    def back_direction(orientation):\n        if orientation > 180.0:\n            return 1\n        else:\n            return 0\n\n    def update_yardline(df):\n        new_yardline = df[df['NflId'] == df['NflIdRusher']]\n        new_yardline['YardLine'] = new_yardline[['PossessionTeam','FieldPosition','YardLine']].apply(lambda x: new_line(x[0],x[1],x[2]), axis=1)\n        new_yardline = new_yardline[['GameId','PlayId','YardLine']]\n\n        return new_yardline\n\n    def update_orientation(df, yardline):\n        df['X'] = df[['X','PlayDirection']].apply(lambda x: new_X(x[0],x[1]), axis=1)\n        df['Orientation'] = df[['Orientation','PlayDirection']].apply(lambda x: new_orientation(x[0],x[1]), axis=1)\n        df['Dir'] = df[['Dir','PlayDirection']].apply(lambda x: new_orientation(x[0],x[1]), axis=1)\n\n        df = df.drop('YardLine', axis=1)\n        df = pd.merge(df, yardline, on=['GameId','PlayId'], how='inner')\n\n        return df\n\n    def back_features(df):\n        carriers = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','NflIdRusher','X','Y','Orientation','Dir','YardLine']]\n        carriers['back_from_scrimmage'] = carriers['YardLine'] - carriers['X']\n        carriers['back_oriented_down_field'] = carriers['Orientation'].apply(lambda x: back_direction(x))\n        carriers['back_moving_down_field'] = carriers['Dir'].apply(lambda x: back_direction(x))\n        carriers = carriers.rename(columns={'X':'back_X',\n                                            'Y':'back_Y'})\n        carriers = carriers[['GameId','PlayId','NflIdRusher','back_X','back_Y','back_from_scrimmage','back_oriented_down_field','back_moving_down_field']]\n\n        return carriers\n\n    def features_relative_to_back(df, carriers):\n        player_distance = df[['GameId','PlayId','NflId','X','Y']]\n        player_distance = pd.merge(player_distance, carriers, on=['GameId','PlayId'], how='inner')\n        player_distance = player_distance[player_distance['NflId'] != player_distance['NflIdRusher']]\n        player_distance['dist_to_back'] = player_distance[['X','Y','back_X','back_Y']].apply(lambda x: euclidean_distance(x[0],x[1],x[2],x[3]), axis=1)\n\n        player_distance = player_distance.groupby(['GameId','PlayId','back_from_scrimmage','back_oriented_down_field','back_moving_down_field'])\\\n                                         .agg({'dist_to_back':['min','max','mean','std']})\\\n                                         .reset_index()\n        player_distance.columns = ['GameId','PlayId','back_from_scrimmage','back_oriented_down_field','back_moving_down_field',\n                                   'min_dist','max_dist','mean_dist','std_dist']\n\n        return player_distance\n\n    def defense_features(df):\n        rusher = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','Team','X','Y']]\n        rusher.columns = ['GameId','PlayId','RusherTeam','RusherX','RusherY']\n\n        defense = pd.merge(df,rusher,on=['GameId','PlayId'],how='inner')\n        defense = defense[defense['Team'] != defense['RusherTeam']][['GameId','PlayId','X','Y','RusherX','RusherY']]\n        defense['def_dist_to_back'] = defense[['X','Y','RusherX','RusherY']].apply(lambda x: euclidean_distance(x[0],x[1],x[2],x[3]), axis=1)\n\n        defense = defense.groupby(['GameId','PlayId'])\\\n                         .agg({'def_dist_to_back':['min','max','mean','std']})\\\n                         .reset_index()\n        defense.columns = ['GameId','PlayId','def_min_dist','def_max_dist','def_mean_dist','def_std_dist']\n\n        return defense\n    \n    def rusher_features(df):\n        \n        rusher = df[df['NflId'] == df['NflIdRusher']][['GameId','PlayId','Dir', 'S', 'A', 'X', 'Y']]\n        rusher.columns = ['GameId','PlayId', 'RusherDir', 'RusherS', 'RusherA', 'RusherX', 'RusherY']\n        \n       \n        radian_angle = (90 - rusher['RusherDir']) * np.pi \/ 180.0\n        v_horizontal = np.abs(rusher['RusherS'] * np.cos(radian_angle))\n        v_vertical = np.abs(rusher['RusherS'] * np.sin(radian_angle)) \n        \n       \n        rusher['v_horizontal'] = v_horizontal\n        rusher['v_vertical'] = v_vertical\n        \n        \n        rusher.columns = ['GameId','PlayId', 'RusherDir', 'RusherS','RusherA','RusherX', 'RusherY','v_horizontal', 'v_vertical']\n        \n        \n        return rusher\n    \n    def static_features(df):\n        \n        \n        add_new_feas = []\n\n        ## Height\n        df['PlayerHeight_dense'] = df['PlayerHeight'].apply(lambda x: 12*int(x.split('-')[0])+int(x.split('-')[1]))\n        \n        add_new_feas.append('PlayerHeight_dense')\n\n        ## Time\n        df['TimeHandoff'] = df['TimeHandoff'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n        df['TimeSnap'] = df['TimeSnap'].apply(lambda x: datetime.datetime.strptime(x, \"%Y-%m-%dT%H:%M:%S.%fZ\"))\n\n        df['TimeDelta'] = df.apply(lambda row: (row['TimeHandoff'] - row['TimeSnap']).total_seconds(), axis=1)\n        df['PlayerBirthDate'] =df['PlayerBirthDate'].apply(lambda x: datetime.datetime.strptime(x, \"%m\/%d\/%Y\"))\n\n        ## Age\n        seconds_in_year = 60*60*24*365.25\n        df['PlayerAge'] = df.apply(lambda row: (row['TimeHandoff']-row['PlayerBirthDate']).total_seconds()\/seconds_in_year, axis=1)\n        add_new_feas.append('PlayerAge')\n\n        ## WindSpeed\n        df['WindSpeed_ob'] = df['WindSpeed'].apply(lambda x: x.lower().replace('mph', '').strip() if not pd.isna(x) else x)\n        df['WindSpeed_ob'] = df['WindSpeed_ob'].apply(lambda x: (int(x.split('-')[0])+int(x.split('-')[1]))\/2 if not pd.isna(x) and '-' in x else x)\n        df['WindSpeed_ob'] = df['WindSpeed_ob'].apply(lambda x: (int(x.split()[0])+int(x.split()[-1]))\/2 if not pd.isna(x) and type(x)!=float and 'gusts up to' in x else x)\n        df['WindSpeed_dense'] = df['WindSpeed_ob'].apply(strtofloat)\n        add_new_feas.append('WindSpeed_dense')\n\n        ## Weather\n        df['GameWeather_process'] = df['GameWeather'].str.lower()\n        df['GameWeather_process'] = df['GameWeather_process'].apply(lambda x: \"indoor\" if not pd.isna(x) and \"indoor\" in x else x)\n        df['GameWeather_process'] = df['GameWeather_process'].apply(lambda x: x.replace('coudy', 'cloudy').replace('clouidy', 'cloudy').replace('party', 'partly') if not pd.isna(x) else x)\n        df['GameWeather_process'] = df['GameWeather_process'].apply(lambda x: x.replace('clear and sunny', 'sunny and clear') if not pd.isna(x) else x)\n        df['GameWeather_process'] = df['GameWeather_process'].apply(lambda x: x.replace('skies', '').replace(\"mostly\", \"\").strip() if not pd.isna(x) else x)\n        df['GameWeather_dense'] = df['GameWeather_process'].apply(map_weather)\n        add_new_feas.append('GameWeather_dense')\n#         ## Rusher\n#         train['IsRusher'] = (train['NflId'] == train['NflIdRusher'])\n#         train['IsRusher_ob'] = (train['NflId'] == train['NflIdRusher']).astype(\"object\")\n#         temp = train[train[\"IsRusher\"]][[\"Team\", \"PlayId\"]].rename(columns={\"Team\":\"RusherTeam\"})\n#         train = train.merge(temp, on = \"PlayId\")\n#         train[\"IsRusherTeam\"] = train[\"Team\"] == train[\"RusherTeam\"]\n\n        ## dense -> categorical\n#         train[\"Quarter_ob\"] = train[\"Quarter\"].astype(\"object\")\n#         train[\"Down_ob\"] = train[\"Down\"].astype(\"object\")\n#         train[\"JerseyNumber_ob\"] = train[\"JerseyNumber\"].astype(\"object\")\n#         train[\"YardLine_ob\"] = train[\"YardLine\"].astype(\"object\")\n        # train[\"DefendersInTheBox_ob\"] = train[\"DefendersInTheBox\"].astype(\"object\")\n        # train[\"Week_ob\"] = train[\"Week\"].astype(\"object\")\n        # train[\"TimeDelta_ob\"] = train[\"TimeDelta\"].astype(\"object\")\n\n        ## Orientation and Dir\n        df[\"Orientation_ob\"] = df[\"Orientation\"].apply(lambda x : orientation_to_cat(x)).astype(\"object\")\n        df[\"Dir_ob\"] = df[\"Dir\"].apply(lambda x : orientation_to_cat(x)).astype(\"object\")\n\n        df[\"Orientation_sin\"] = df[\"Orientation\"].apply(lambda x : np.sin(x\/360 * 2 * np.pi))\n        df[\"Orientation_cos\"] = df[\"Orientation\"].apply(lambda x : np.cos(x\/360 * 2 * np.pi))\n        df[\"Dir_sin\"] = df[\"Dir\"].apply(lambda x : np.sin(x\/360 * 2 * np.pi))\n        df[\"Dir_cos\"] = df[\"Dir\"].apply(lambda x : np.cos(x\/360 * 2 * np.pi))\n        add_new_feas.append(\"Dir_sin\")\n        add_new_feas.append(\"Dir_cos\")\n\n        ## diff Score\n        df[\"diffScoreBeforePlay\"] = df[\"HomeScoreBeforePlay\"] - df[\"VisitorScoreBeforePlay\"]\n        add_new_feas.append(\"diffScoreBeforePlay\")\n        \n        \n        static_features = df[df['NflId'] == df['NflIdRusher']][add_new_feas+['GameId','PlayId','X','Y','S','A','Dis','Orientation','Dir',\n                                                            'YardLine','Quarter','Down','Distance','DefendersInTheBox']].drop_duplicates()\n        static_features.fillna(-999,inplace=True)\n\n        return static_features\n\n\n    def combine_features(relative_to_back, defense, rushing, static, deploy=deploy):\n        df = pd.merge(relative_to_back,defense,on=['GameId','PlayId'],how='inner')\n        df = pd.merge(df,rushing,on=['GameId','PlayId'],how='inner')\n        df = pd.merge(df,static,on=['GameId','PlayId'],how='inner')\n\n        if not deploy:\n            df = pd.merge(df, outcomes, on=['GameId','PlayId'], how='inner')\n\n        return df\n    \n    yardline = update_yardline(df)\n    df = update_orientation(df, yardline)\n    back_feats = back_features(df)\n    rel_back = features_relative_to_back(df, back_feats)\n    def_feats = defense_features(df)\n    rush_feats = rusher_features(df)\n    static_feats = static_features(df)\n    basetable = combine_features(rel_back, def_feats, rush_feats, static_feats, deploy=deploy)\n    \n    return basetable","23d75526":"%time train_basetable = create_features(train, False)","bc7d51f9":"X = train_basetable.copy()\nyards = X.Yards\n\ny = np.zeros((yards.shape[0], 199))\nfor idx, target in enumerate(list(yards)):\n    y[idx][99 + target] = 1\n\nX.drop(['GameId','PlayId','Yards'], axis=1, inplace=True)","26d7853f":"sns.set(rc={'figure.figsize':(30, 30)})\ncorr = X.corr()\nplt.figure() \nax = sns.heatmap(corr, linewidths=.5, annot=True, cmap=\"YlGnBu\", fmt='.1g')\nplt.savefig('corr_heatmap.png')\nplt.show()","353cb422":"# Drop highly correlated features (37->30)\ncolumns = np.full((corr.shape[0],), True, dtype=bool)\nfor i in range(corr.shape[0]):\n    for j in range(i+1, corr.shape[0]):\n        if corr.iloc[i,j] >= 0.99:\n            if columns[j]:\n                columns[j] = False\n\nfeature_columns = X.columns[columns].values\ndrop_columns = X.columns[columns == False].values\nprint(feature_columns)\nprint('-'*73)\nprint(drop_columns)","8c2ad80e":"# Categorical features for LGBM\ncat_feats = X.columns[(X.nunique() <= 50)].values.tolist()\ncat_feats = list(set(cat_feats) & set(feature_columns))\nprint(cat_feats)","a0e96c6f":"scaler = StandardScaler()\nscaled_features = scaler.fit_transform(X[feature_columns].values)\nX = pd.DataFrame(scaled_features, columns=feature_columns)\nprint(X.shape)","55f384cc":"class CRPSCallback(Callback):\n    \n    def __init__(self,validation, predict_batch_size=20, include_on_batch=False):\n        super(CRPSCallback, self).__init__()\n        self.validation = validation\n        self.predict_batch_size = predict_batch_size\n        self.include_on_batch = include_on_batch\n        \n        print('validation shape',len(self.validation))\n\n    def on_batch_begin(self, batch, logs={}):\n        pass\n\n    def on_train_begin(self, logs={}):\n        if not ('CRPS_score_val' in self.params['metrics']):\n            self.params['metrics'].append('CRPS_score_val')\n\n    def on_batch_end(self, batch, logs={}):\n        if (self.include_on_batch):\n            logs['CRPS_score_val'] = float('-inf')\n\n    def on_epoch_end(self, epoch, logs={}):\n        logs['CRPS_score_val'] = float('-inf')\n            \n        if (self.validation):\n            X_valid, y_valid = self.validation[0], self.validation[1]\n            y_pred = self.model.predict(X_valid)\n            y_true = np.clip(np.cumsum(y_valid, axis=1), 0, 1)\n            y_pred = np.clip(np.cumsum(y_pred, axis=1), 0, 1)\n            val_s = ((y_true - y_pred) ** 2).sum(axis=1).sum(axis=0) \/ (199 * X_valid.shape[0])\n            val_s = np.round(val_s, 6)\n            logs['CRPS_score_val'] = val_s","b428417a":"# Calculate CRPS score\ndef crps_score(y_prediction, y_valid, shape=X.shape[0]):\n    y_true = np.clip(np.cumsum(y_valid, axis=1), 0, 1)\n    y_pred = np.clip(np.cumsum(y_prediction, axis=1), 0, 1)\n    val_s = ((y_true - y_pred) ** 2).sum(axis=1).sum(axis=0) \/ (199 * shape)\n    crps = np.round(val_s, 6)\n    \n    return crps","1b46cf8f":"def get_nn(x_tr, y_tr, x_val, y_val, shape):\n    K.clear_session()\n    inp = Input(shape = (x_tr.shape[1],))\n    x = Dense(1024, input_dim=X.shape[1], activation='relu')(inp)\n    x = Dropout(0.5)(x)\n    x = BatchNormalization()(x)\n    x = Dense(512, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    x = BatchNormalization()(x)\n    x = Dense(256, activation='relu')(x)\n    x = Dropout(0.5)(x)\n    x = BatchNormalization()(x)\n    \n    out = Dense(199, activation='softmax')(x)\n    model = Model(inp,out)\n    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=[])\n    \n    es = EarlyStopping(monitor='CRPS_score_val', \n                       mode='min',\n                       restore_best_weights=True, \n                       verbose=1, \n                       patience=10)\n\n    mc = ModelCheckpoint('best_model.h5',monitor='CRPS_score_val',mode='min',\n                                   save_best_only=True, verbose=1, save_weights_only=True)\n    \n    bsz = 1024\n    steps = x_tr.shape[0]\/bsz\n\n    model.fit(x_tr, y_tr,callbacks=[CRPSCallback(validation = (x_val,y_val)),es,mc], epochs=100, batch_size=bsz, verbose=1)\n    model.load_weights(\"best_model.h5\")\n    \n    y_pred = model.predict(x_val)\n    y_valid = y_val\n    crps = crps_score(y_pred, y_valid, shape=shape)\n\n    return model,crps","1b8587d2":"metric = \"multi_logloss\"\nparam = {'num_leaves': 50,\n         'min_data_in_leaf': 30,\n         'objective':'multiclass',\n         'num_class': 199,\n         'max_depth': 6, # -1\n         'learning_rate': 0.01,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.4, #0.7\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9,\n         \"bagging_seed\": 11,\n         \"metric\": metric,\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1,\n         'n_jobs': -1,\n         \"seed\":1234}","56b7d37d":"def get_lgbm(x_tr, y_tr, x_val, y_val, shape):\n    y_valid = y_val\n    y_tr = np.argmax(y_tr, axis=1)\n    y_val = np.argmax(y_val, axis=1)\n    trn_data = lgb.Dataset(x_tr, label=y_tr, categorical_feature=cat_feats)\n    val_data = lgb.Dataset(x_val, label=y_val, categorical_feature=cat_feats)\n    model = lgb.train(param, trn_data, 10000, valid_sets = [val_data], verbose_eval = 100, early_stopping_rounds = 200)\n    \n    y_pred = model.predict(x_val, num_iteration=model.best_iteration)\n    crps = crps_score(y_pred, y_valid, shape=shape)\n    \n    return model, crps","47f6afe9":"def get_rf(x_tr, y_tr, x_val, y_val, shape):\n    model = RandomForestRegressor(bootstrap=False, max_features=0.3, min_samples_leaf=15, \n                                  min_samples_split=8, n_estimators=50, n_jobs=-1, random_state=42)\n    model.fit(x_tr, y_tr)\n    \n    y_pred = model.predict(x_val)\n    y_valid = y_val\n    crps = crps_score(y_pred, y_valid, shape=shape)\n    \n    return model, crps","4cfae428":"loop = 2\nfold = 5\n\noof_nn = np.zeros([loop, y.shape[0], y.shape[1]])\noof_lgbm = np.zeros([loop, y.shape[0], y.shape[1]])\noof_rf = np.zeros([loop, y.shape[0], y.shape[1]])\n\nmodels_nn = []\ncrps_csv_nn = []\n\nmodels_lgbm = []\ncrps_csv_lgbm = []\n\nmodels_rf = []\ncrps_csv_rf = []\n\nfeature_importance = np.zeros([loop, fold, X.shape[1]])\n\ns_time = time.time()\n\nfor k in range(loop):\n    kfold = KFold(fold, random_state = 42 + k, shuffle = True)\n    for k_fold, (tr_inds, val_inds) in enumerate(kfold.split(yards)):\n        print(\"-----------\")\n        print(f'Loop {k+1}\/{loop}' + f' Fold {k_fold+1}\/{fold}')\n        print(\"-----------\")\n        tr_x, tr_y = X.loc[tr_inds], y[tr_inds]\n        val_x, val_y = X.loc[val_inds], y[val_inds]\n        \n        # Train NN\n        nn, crps_nn = get_nn(tr_x, tr_y, val_x, val_y, shape=val_x.shape[0])\n        models_nn.append(nn)\n        print(\"the %d fold crps (NN) is %f\"%((k_fold+1), crps_nn))\n        crps_csv_nn.append(crps_nn)\n        \n        # Train LGBM\n        lgbm, crps_lgbm = get_lgbm(tr_x, tr_y, val_x, val_y, shape=val_x.shape[0])\n        models_lgbm.append(lgbm)\n        print(\"the %d fold crps (LGBM) is %f\"%((k_fold+1), crps_lgbm))\n        crps_csv_lgbm.append(crps_lgbm)\n        \n#         # Train RF\n#         rf, crps_rf = get_rf(tr_x, tr_y, val_x, val_y, shape=val_x.shape[0])\n#         models_rf.append(rf)\n#         print(\"the %d fold crps (RF) is %f\"%((k_fold+1), crps_rf))\n#         crps_csv_rf.append(crps_rf)\n        \n        # Feature Importance\n        feature_importance[k, k_fold, :] = lgbm.feature_importance()\n#         feature_importance[k, k_fold, :] = rf.feature_importances_\n        \n        #Predict OOF\n        oof_nn[k, val_inds, :] = nn.predict(val_x)\n        oof_lgbm[k, val_inds, :] = lgbm.predict(val_x, num_iteration=lgbm.best_iteration)\n#         oof_rf[k, val_inds, :] = rf.predict(val_x)","fc16f874":"a = lgbm.predict(val_x, num_iteration=lgbm.best_iteration)","3776ea81":"crps_oof_nn = []\ncrps_oof_lgbm = []\ncrps_oof_rf = []\n\nfor k in range(loop):\n    crps_oof_nn.append(crps_score(oof_nn[k,...], y))\n    crps_oof_lgbm.append(crps_score(oof_lgbm[k,...], y))\n#     crps_oof_rf.append(crps_score(oof_rf[k,...], y))","aa8cec19":"print(\"mean crps (NN) is %f\"%np.mean(crps_csv_nn))\nprint(\"mean crps (LGBM) is %f\"%np.mean(crps_csv_lgbm))\n# print(\"mean crps (RF) is %f\"%np.mean(crps_csv_rf))","bc5fc038":"print(\"mean OOF crps (NN) is %f\"%np.mean(crps_oof_nn))\nprint(\"mean OOF crps (LGBM) is %f\"%np.mean(crps_oof_lgbm))\n# print(\"mean OOF crps (RF) is %f\"%np.mean(crps_oof_rf))","88428a50":"feature_importances = pd.DataFrame(np.mean(feature_importance, axis=0).T, columns=[[f'fold_{fold_n}' for fold_n in range(fold)]])\nfeature_importances['feature'] = feature_columns\nfeature_importances['average'] = feature_importances[[f'fold_{fold_n}' for fold_n in range(fold)]].mean(axis=1)\nfeature_importances.sort_values(by=('average',), ascending=False).head(10)","c9bd7638":"feature_importance_flatten = pd.DataFrame()\nfor i in range(len(feature_importances.columns)-2):\n    col = ['feature', feature_importances.columns.values[i][0]]\n    feature_importance_flatten = pd.concat([feature_importance_flatten, feature_importances[col].rename(columns={f'fold_{i}': 'importance'})], axis=0)\n\nplt.figure(figsize=(16, 16))\nsns.barplot(data=feature_importance_flatten.sort_values(by=('importance',), ascending=False), x=('importance',), y=('feature',))\nplt.title(f'Feature Importances over {loop} loops and {fold} folds')\nplt.savefig(\"feature_importance.png\")\nplt.show()","9722ac41":"def weight_opt(oof_nn, oof_rf, y_true):\n    weight_nn = np.inf\n    best_crps = np.inf\n    \n    for i in np.arange(0, 1.01, 0.05):\n        crps_blend = np.zeros(oof_nn.shape[0])\n        for k in range(oof_nn.shape[0]):\n            crps_blend[k] = crps_score(i * oof_nn[k,...] + (1-i) * oof_rf[k,...], y_true)\n        if np.mean(crps_blend) < best_crps:\n            best_crps = np.mean(crps_blend)\n            weight_nn = round(i, 2)\n            \n        print(str(round(i, 2)) + ' : mean crps (Blend) is ', round(np.mean(crps_blend), 6))\n        \n    print('-'*36)\n    print('Best weight for NN: ', weight_nn)\n    print('Best weight for LGBM: ', round(1-weight_nn, 2))\n#     print('Best weight for RF: ', round(1-weight_nn, 2))\n    print('Best mean crps (Blend): ', round(best_crps, 6))\n    \n    return weight_nn, round(1-weight_nn, 2)","5ae1c277":"weight_nn, weight_lgbm = weight_opt(oof_nn, oof_lgbm, y)\n# weight_nn, weight_rf = weight_opt(oof_nn, oof_rf, y)","31fab439":"def predict(x_te, models_nn, models_rf, weight_nn, weight_rf, iteration=False):\n    model_num_nn = len(models_nn)\n    model_num_rf = len(models_rf)\n    for k,m in enumerate(models_nn):\n        if k==0:\n            y_pred_nn = m.predict(x_te, batch_size=1024)\n            if iteration:\n                y_pred_rf = models_rf[k].predict(x_te, num_iteration=models_rf[k].best_iteration)\n            else:\n                y_pred_rf = models_rf[k].predict(x_te)\n        else:\n            y_pred_nn += m.predict(x_te, batch_size=1024)\n            if iteration:\n                y_pred_rf += models_rf[k].predict(x_te, num_iteration=models_rf[k].best_iteration)\n            else:\n                y_pred_rf += models_rf[k].predict(x_te)\n            \n    y_pred_nn = y_pred_nn \/ model_num_nn\n    y_pred_rf = y_pred_rf \/ model_num_rf\n    \n    return weight_nn * y_pred_nn + weight_rf * y_pred_rf","20351b10":"%%time\nif  TRAIN_OFFLINE==False:\n    from kaggle.competitions import nflrush\n    env = nflrush.make_env()\n    iter_test = env.iter_test()\n\n    for (test_df, sample_prediction_df) in iter_test:\n        basetable = create_features(test_df, deploy=True)\n        basetable.drop(['GameId','PlayId'], axis=1, inplace=True)\n        \n        scaled_basetable_features = scaler.transform(basetable[feature_columns].values)\n        scaled_basetable = pd.DataFrame(scaled_basetable_features, columns=feature_columns)\n        \n        y_pred = predict(scaled_basetable, models_nn, models_lgbm, weight_nn, weight_lgbm, iteration=True)\n#         y_pred = predict(scaled_basetable, models_nn, models_rf, weight_nn, weight_rf)\n        y_pred = np.clip(np.cumsum(y_pred, axis=1), 0, 1).tolist()[0]\n\n        preds_df = pd.DataFrame(data=[y_pred], columns=sample_prediction_df.columns)\n        env.predict(preds_df)\n\n    env.write_submission_file()","5c8acd73":"# Time for the actual submission","9eb2da9d":"## NN","df65b95d":"# About this kernel\n\nMostly copied from bestpredict's kernel [Location EDA 8eb410][1]. I have applied the random forest (RF) regressor proposed in Dimension's kernel [[NFL] - [001]- [Feature selection]][2]. Let's see whether the reduced feature dimension will result in LB score improvement (V1-V3) and whether blending RF and neural network (NN) will improve the LB score (V4+). Please correct me if you have found any mistake. Thank you very much.\n\n## Changelog\n* **V10+**: Try blending with LGBM classifier from [[NFL] - [001]- [LightGBM]][5].\n* **V9**: Drop highly correlated features based on correlation heatmap. (37->30)\n* **V8**: Plot feature importance from random forest.\n* **V7**: Add Rusher features applied in [Location EDA with rusher features][4].\n* **V6**: Try Bayesian Hyperparameter Tuning in my another kernel [Bayesian Hyperparameter Tuning (NN&RF)][3]. Apply results here.\n* **V5**: Try larger NN and elu activation.\n* **V4**: Since there is no improvement on LB score by discarding the original features, I try blending random forest and NN.\n* **V3**: Try threshold 0.2* mean\n* **V2**: Try threshold 0.5* mean\n* **V1**: Add feature selection based on the feature importance from a prefitted random forest regressor\n\n[1]: https:\/\/www.kaggle.com\/bestpredict\/location-eda-8eb410\n[2]: https:\/\/www.kaggle.com\/coolcoder22\/nfl-001-feature-selection\n[3]: https:\/\/www.kaggle.com\/gogo827jz\/bayesian-hyperparameter-tuning-nn-rf?scriptVersionId=23677874\n[4]: https:\/\/www.kaggle.com\/dandrocec\/location-eda-with-rusher-features\n[5]: https:\/\/www.kaggle.com\/enzoamp\/nfl-lightgbm","76784c06":"## Define Prediction Function","f09cf9a1":"## Plot Correlation Heatmap","d1a4b40f":"## RF","ee43e884":"## Blending Weight Optimisation","a9798efa":"Below class Metric based entirely on: https:\/\/www.kaggle.com\/kingychiu\/keras-nn-starter-crps-early-stopping\n<br><\/br>\nBelow early stopping entirely based on: https:\/\/www.kaggle.com\/c\/nfl-big-data-bowl-2020\/discussion\/112868#latest-656533","806545b5":"## Plot Feature Importance","5fc2c99f":"## Training","e127cd5d":"## Scale Training Data","d843a4e8":"## Functions for anchoring offense moving left from {0,0}","35618790":"## LGBM","38287635":"# Let's build NN and Random Forest Regressor"}}