{"cell_type":{"6a900081":"code","c84c7ee6":"code","c23561fb":"code","b003080c":"code","390ef084":"code","6cd77a7d":"code","17606131":"code","8632c9a7":"code","6d14dadd":"code","2fd6f7da":"code","b894d1f1":"code","bc7486c1":"code","ed58eabc":"code","b0e99eea":"code","2b576f92":"code","213d0897":"code","b278db80":"code","33eec84f":"code","2f1c5410":"code","412f3d7d":"code","6767bc87":"code","7c2699bd":"code","37fbc8b1":"code","f61270a7":"code","22e0fe67":"code","fbd98062":"code","8412686b":"code","8ceb9cf5":"code","6cc7ee83":"code","d2ef3dcc":"code","5f7578ed":"code","343b4412":"code","b2309c89":"code","883e8e90":"code","f0c2cd0c":"code","e72fa642":"code","bb3613e1":"code","f4a4f38c":"code","51c9586e":"code","b4021369":"code","6259e20d":"code","d54b85c4":"code","1fa3ce76":"code","f0943790":"code","254d42d9":"code","7f6dfacf":"code","85bf298f":"code","a636e0e2":"code","4bab8043":"code","c93fd0e3":"code","ed005bc4":"code","115daee3":"code","f9386d44":"code","996b7adf":"code","3fa0ef1b":"code","491a008e":"code","b5777f0c":"code","73675785":"code","0e4837dc":"code","3f729ba6":"code","014d2e67":"code","6a46bf77":"code","e517aa93":"code","b18a7a03":"code","e97c7310":"markdown","05485167":"markdown","3030cb4e":"markdown","7ae3f491":"markdown","c1afa36a":"markdown","bd243f54":"markdown","9e8120ef":"markdown","c1bb4d56":"markdown","28f990e4":"markdown","c5a1941f":"markdown","8a334a54":"markdown","077d03f5":"markdown","5b4b3fd9":"markdown","e4b46d78":"markdown","d2f4cf6a":"markdown","97f76a9e":"markdown","326ad52c":"markdown","40a1d854":"markdown","8296943c":"markdown","620d78d0":"markdown","d3d11f66":"markdown","c4205df7":"markdown","6374d70a":"markdown","078bc548":"markdown","26c68b03":"markdown","efd77820":"markdown","304c45c4":"markdown","f02243ce":"markdown","e24b3b17":"markdown","1ae8ef3f":"markdown","2923d8a1":"markdown","61f8ba41":"markdown","3983df4a":"markdown","87d1818c":"markdown","0a1a9125":"markdown","d3e149e2":"markdown","8393ecba":"markdown","41294658":"markdown","e3af8aea":"markdown","671f9c60":"markdown","6bd377a8":"markdown","e8f5eb84":"markdown","bf785f73":"markdown","1b09e5f0":"markdown","278e7dde":"markdown","871e1f2c":"markdown","f1090178":"markdown","945bf986":"markdown","cdab0af5":"markdown","96e0a63b":"markdown","2272166b":"markdown","1204c571":"markdown","ba47d7e1":"markdown","9a014b1f":"markdown","71f28ccf":"markdown","1485fa25":"markdown","ca6240d3":"markdown","0d5cb5c5":"markdown","305c9693":"markdown","de9d25ca":"markdown","fce1ada4":"markdown","0551b2aa":"markdown","d4084469":"markdown","861ea87c":"markdown","20d62eed":"markdown","843c36e6":"markdown","456c05f8":"markdown","52de4efe":"markdown","ce302c36":"markdown","1b9b14e4":"markdown","3520962b":"markdown","00f4a4e5":"markdown","42504759":"markdown"},"source":{"6a900081":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport math\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings('ignore')\nimport seaborn as sns","c84c7ee6":"df=pd.read_csv('..\/input\/bike-sharing\/Bike_Sharing.csv') ","c23561fb":"df.head()","b003080c":"df.info()","390ef084":"df.describe()","6cd77a7d":"df.dtypes","17606131":"df.isnull().sum()","8632c9a7":"#changing to category datatype\ncol_cat = [\"hour\",\"weekday\",\"month\",\"season\",\"weather\",\"holiday\",\"workingday\"]\nfor var in col_cat:\n    df[var] = df[var].astype(\"category\")","6d14dadd":"df.dtypes","2fd6f7da":"df  = df.drop([\"index\",\"date\"],axis=1)","b894d1f1":"#plt.subplot(2,2,1)\nplt.title('Temperature Vs Demand')\nplt.scatter(df['temp'], df['demand'], c='b')","bc7486c1":"plt.title('atemp Vs Demand')\nplt.scatter(df['atemp'], df['demand'], c='b')","ed58eabc":"sns.scatterplot(x=\"temp\", y=\"atemp\", data=df, hue=\"demand\")\nplt.show()","b0e99eea":"plt.title('Humidity Vs Demand')\nplt.scatter(df['humidity'], df['demand'], c='b')","2b576f92":"sns.scatterplot(x=\"windspeed\", y=\"demand\", data=df, hue=\"demand\")\nplt.show()","213d0897":"colors = ['g', 'r', 'm', 'b']\nplt.title('Average Demand per Season')\ncat_list = df['season'].unique()\ncat_average = df.groupby('season').mean()['demand']\nplt.bar(cat_list, cat_average, color=colors)","b278db80":"colors = ['g', 'r', 'm', 'b']\nplt.title('Average Demand per month')\ncat_list = df['month'].unique()\ncat_average = df.groupby('month').mean()['demand']\nplt.bar(cat_list, cat_average, color=colors)","33eec84f":"plt.title('Average Demand per Holiday')\ncat_list = df['holiday'].unique()\ncat_average = df.groupby('holiday').mean()['demand']\nplt.bar(cat_list, cat_average, color=colors)","2f1c5410":"plt.title('Average Demand per Weekday')\ncat_list = df['weekday'].unique()\ncat_average = df.groupby('weekday').mean()['demand']\nplt.bar(cat_list, cat_average, color=colors)","412f3d7d":"plt.title('Average Demand per Year')\ncat_list = df['year'].unique()\ncat_average = df.groupby('year').mean()['demand']\nplt.bar(cat_list, cat_average, color=colors)","6767bc87":"plt.title('Average Demand per hour')\ncat_list = df['hour'].unique()\ncat_average = df.groupby('hour').mean()['demand']\nplt.bar(cat_list, cat_average, color=colors)","7c2699bd":"plt.title('Average Demand per Workingday')\ncat_list = df['workingday'].unique()\ncat_average = df.groupby('workingday').mean()['demand']\nplt.bar(cat_list, cat_average, color=colors)","37fbc8b1":"plt.title('Average Demand per Weather')\ncat_list = df['weather'].unique()\ncat_average = df.groupby('weather').mean()['demand']\nplt.bar(cat_list, cat_average, color=colors)","f61270a7":"sns.set_style('darkgrid')\nsns.distplot(df['demand'], bins = 100, color = 'blue')","22e0fe67":"#Q-Q Plot\nfrom scipy import stats\nplt = stats.probplot(df['demand'], plot=sns.mpl.pyplot)","fbd98062":"sns.boxplot(x = 'demand', data = df, color = 'blue')","8412686b":"#Calculating the number of outliers\nQ1 = df['demand'].quantile(0.25)\nQ3 = df['demand'].quantile(0.75)\nIQR = Q3 - Q1\noutliers = df[(df['demand'] < (Q1 - 1.5 * IQR)) | (df['demand'] > (Q3 + 1.5 * IQR))]\nprint((len(outliers)\/len(df))*100)","8ceb9cf5":"df_final = df[np.abs(df[\"demand\"]-df[\"demand\"].mean())<=(3*df[\"demand\"].std())]\nprint (\"Shape Of The Before Ouliers: \",df.shape)\nprint (\"Shape Of The After Ouliers: \",df_final.shape)","6cc7ee83":"tc = df.corr()\nsns.heatmap(tc, annot = True, cmap = 'coolwarm')","d2ef3dcc":"df_final = df_final.drop(['weekday', 'year', 'workingday', 'atemp','casual', 'registered'], axis=1)","5f7578ed":"import matplotlib.pyplot as plt\n# Autocorrelation of demand using acor\ndff1 = pd.to_numeric(df_final['demand'], downcast='float')\nplt.acorr(dff1, maxlags=12)","343b4412":"fig,axes = plt.subplots(ncols=2,nrows=2)\nfig.set_size_inches(12, 10)\nsns.distplot(df_final[\"demand\"],ax=axes[0][0])\nstats.probplot(df_final[\"demand\"], dist='norm', fit=True, plot=axes[0][1])\nsns.distplot(np.log(df_final[\"demand\"]),ax=axes[1][0])\nstats.probplot(np.log1p(df_final[\"demand\"]), dist='norm', fit=True, plot=axes[1][1])","b2309c89":"df_final['demand'] = np.log(df_final['demand'])","883e8e90":"# Solve the problem of Autocorrelation\n# Shift the demand by 3 lags\n\nt_1 = df_final['demand'].shift(+1).to_frame()\nt_1.columns = ['t-1']\n\nt_2 = df_final['demand'].shift(+2).to_frame()\nt_2.columns = ['t-2']\n\nt_3 = df_final['demand'].shift(+3).to_frame()\nt_3.columns = ['t-3']\n\ndf_final_lag = pd.concat([df_final, t_1, t_2, t_3], axis=1)","f0c2cd0c":"df_final_lag.head()","e72fa642":"df_final_lag = df_final_lag.dropna()","bb3613e1":"df.columns","f4a4f38c":"df_final_lag['windspeed'].value_counts()","51c9586e":"from sklearn.ensemble import RandomForestRegressor\ndf_Wind_0 = df_final_lag[df_final_lag[\"windspeed\"]==0]\ndf_Wind_Not0 = df_final_lag[df_final_lag[\"windspeed\"]!=0]\nColumns = [\"season\",\"weather\",\"humidity\",\"month\",\"temp\"]\nrf_model = RandomForestRegressor()\nrf_model.fit(df_Wind_Not0[Columns],df_Wind_Not0[\"windspeed\"])\n\nwind0Values = rf_model.predict(X= df_Wind_0[Columns])\ndf_Wind_0[\"windspeed\"] = wind0Values\ndata = df_Wind_Not0.append(df_Wind_0)\ndata.reset_index(inplace=True)\ndata.drop('index',inplace=True,axis=1)","b4021369":"data.dtypes","6259e20d":"data = pd.get_dummies(data, drop_first=True)","d54b85c4":"data.columns","1fa3ce76":"data.shape","f0943790":"X = np.array(data.loc[:,data.columns!='demand'])\nY = np.array(data.loc[:,data.columns=='demand'])","254d42d9":"print(X.shape)\nprint(Y.shape)","7f6dfacf":"from sklearn.model_selection import train_test_split, RandomizedSearchCV\nfrom sklearn import metrics","85bf298f":"def regression(X, Y, reg, param_grid, test_size=0.20):\n    \n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size, random_state=42)\n      \n    \n    reg = RandomizedSearchCV(reg,parameters, cv = 10,refit = True)\n    reg.fit(X_train, Y_train)     \n\n    return X_train, X_test, Y_train, Y_test, reg","a636e0e2":"def evaluation_metrics(X_train, X_test, Y_train, Y_test, reg):\n    Y_pred_train = reg.best_estimator_.predict(X_train)\n    Y_pred_test = reg.best_estimator_.predict(X_test)\n    \n    print(\"Best Parameters:\",reg.best_params_)\n    print('\\n')\n    print(\"Mean cross-validated score of the best_estimator : \", reg.best_score_) \n    print('\\n')\n    MAE_train = metrics.mean_absolute_error(Y_train, Y_pred_train)\n    MAE_test = metrics.mean_absolute_error(Y_test, Y_pred_test)\n    print('MAE for training set is {}'.format(MAE_train))\n    print('MAE for test set is {}'.format(MAE_test))\n    print('\\n')\n    MSE_train = metrics.mean_squared_error(Y_train, Y_pred_train)\n    MSE_test = metrics.mean_squared_error(Y_test, Y_pred_test)\n    print('MSE for training set is {}'.format(MSE_train))\n    print('MSE for test set is {}'.format(MSE_test))\n    print('\\n')\n    RMSE_train = np.sqrt(metrics.mean_squared_error(Y_train, Y_pred_train))\n    RMSE_test = np.sqrt(metrics.mean_squared_error(Y_test, Y_pred_test))\n    print('RMSE for training set is {}'.format(RMSE_train))\n    print('RMSE for test set is {}'.format(RMSE_test))\n    print('\\n')\n    r2_train = metrics.r2_score(Y_train, Y_pred_train)\n    r2_test = metrics.r2_score(Y_test, Y_pred_test)\n    print(\"R2 value for train: \", r2_train)\n    print(\"R2 value for test: \", r2_test)","4bab8043":"from sklearn.linear_model import LinearRegression","c93fd0e3":"reg = LinearRegression()\nparameters = {'fit_intercept':[True,False],'normalize':[True,False], 'copy_X':[True, False]}\nX_train, X_test, Y_train, Y_test, linreg = regression(X, Y, reg, param_grid=parameters, test_size=0.20)\nevaluation_metrics(X_train, X_test, Y_train, Y_test, reg = linreg)","ed005bc4":"from sklearn.tree import DecisionTreeRegressor","115daee3":"reg = DecisionTreeRegressor()\nparameters = {'max_depth':[5,6,7,8,9,10]}\nX_train, X_test, Y_train, Y_test, DTreg = regression(X, Y, reg, param_grid=parameters, test_size=0.20)\nevaluation_metrics(X_train, X_test, Y_train, Y_test, reg = DTreg)","f9386d44":"from sklearn.ensemble import RandomForestRegressor","996b7adf":"reg = RandomForestRegressor(n_jobs=-1)\nparameters = {'n_estimators':[10,15,20,25],'max_depth':[5,6,7,8,9,10]}\nX_train, X_test, Y_train, Y_test, RFreg = regression(X, Y, reg, param_grid=parameters, test_size=0.20)\nevaluation_metrics(X_train, X_test, Y_train, Y_test, reg = RFreg)","3fa0ef1b":"from sklearn.ensemble import GradientBoostingRegressor","491a008e":"reg = GradientBoostingRegressor()\nparameters = {'alpha':[0.01,0.001,0.0001],'n_estimators':[100,150,200],'max_depth':[3,5,7]}\nX_train, X_test, Y_train, Y_test, XGreg = regression(X, Y, reg, param_grid=parameters, test_size=0.20)\nevaluation_metrics(X_train, X_test, Y_train, Y_test, reg = XGreg)","b5777f0c":"from sklearn.svm import SVR","73675785":"reg = SVR()\nparameters = {'max_iter':[1000,5000,10000]}\nX_train, X_test, Y_train, Y_test, SVRreg = regression(X, Y, reg, param_grid=parameters, test_size=0.20)\nevaluation_metrics(X_train, X_test, Y_train, Y_test, reg = SVRreg)","0e4837dc":"from sklearn.neural_network import MLPRegressor","3f729ba6":"reg = MLPRegressor(activation='tanh',early_stopping=True)\nparameters = {'solver':['sgd', 'adam'],'learning_rate_init':[0.01,0.001,0.0001],'hidden_layer_sizes':[10,25,50],'max_iter':[500,1000]}\nX_train, X_test, Y_train, Y_test, MLPreg = regression(X, Y, reg, param_grid=parameters, test_size=0.20)\nevaluation_metrics(X_train, X_test, Y_train, Y_test, reg = MLPreg)","014d2e67":"MLPreg.best_estimator_","6a46bf77":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20, random_state=42)","e517aa93":"Y_Pred_test = MLPreg.best_estimator_.predict(X_test)","b18a7a03":"fig, ax = plt.subplots(figsize=(12,7))\nax.scatter(Y_test, Y_Pred_test, edgecolors=(0, 0, 0))\nax.plot([Y_test.min(), Y_test.max()], [Y_test.min(), Y_test.max()], 'k-', lw=4)\nax.set_xlabel('Actual')\nax.set_ylabel('Predicted')\nax.set_title(\"Ground Truth vs Predicted\")\nplt.show()","e97c7310":"# Linear Regression","05485167":"# Solving the problem of autocorrelation","3030cb4e":"Month vs Demand","7ae3f491":"Steps:\n\nchanging the datatype of \"month\",\"hour\",\"weekday\",\"season\",\"holiday\",\"workingday\" and \"weather\" to category.\n\nDrop the date,index column as we already have necessary details from other columns","c1afa36a":"Holiday vs Demand","bd243f54":"# Support Vector Regressor\n","9e8120ef":"We have only two years of data and we will not know for sure how it will be for 5 or 6 years. So it's better we drop this feature too.","c1bb4d56":"Humidity vs demand","28f990e4":"# Normality Check","c5a1941f":"Dropping Irrelevant features","8a334a54":"# Visualise the Categorical features Vs demand","077d03f5":"# Gradient Boosting Regressor\n","5b4b3fd9":"# Missing Value Analysis","e4b46d78":"Create Dummy Variables and drop first to avoid dummy variables trap","d2f4cf6a":"Demand vs Working day","97f76a9e":"Data Fields:\ndate - hourly date \n\nseason - 1 = spring, 2 = summer, 3 = fall, 4 = winter\n\nholiday - whether the day is considered a holiday\n\nworkingday - whether the day is neither a weekend nor holiday\n\nweekday- Weekday number 0-sunday etc.\n\nweather -\n1: Clear, Few clouds, Partly cloudy, Partly cloudy\n2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist\n3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds\n4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog\n\ntemp - temperature in Celsius\n\natemp - \"feels like\" temperature in Celsius\n\nhumidity - relative humidity\n\nwindspeed - wind speed\n\ncasual - number of non-registered user rentals initiated\n\nregistered - number of registered user rentals initiated\n\ndemand - number of total rentals (Dependent Variable)","326ad52c":"# Analyzing Target Variable","40a1d854":"Evaluation Function","8296943c":"We successfully completed data processing stage .Next we go ahed and build models.","620d78d0":"There isn't any missing values","d3d11f66":"Hour vs Demand","c4205df7":"Demand varies depending upon the season.It's the highest during the fall while lowest during the spring which is Season 1","6374d70a":"Collinearity and Multi-Collinearity Check","078bc548":"Very little change in demand for change or increase in humidity.","26c68b03":"Splitting X and Y","efd77820":"2.90% of the target values are above Q3 + 1.5IQR.","304c45c4":"# Multi Layer Perceptron Regressor\n","f02243ce":"# Dummy Variables","e24b3b17":"As you can see winspeed has many 0 values. \n\nNow i am filling windspeed's 0 value using random forest.\n\nRandom Forest is ensemble method gives better prediction compared to other models.","1ae8ef3f":"Demand vs Weather","2923d8a1":"# Outlier Analysis","61f8ba41":"# Testing Assumptions of Multiple Linear Regression","3983df4a":"Temperature vs Demand","87d1818c":"Weekday vs Demand","0a1a9125":"# Model Building With Evaluation","d3e149e2":"# Actual Vs Predicted","8393ecba":"# Best Estimator","41294658":"The months which fall during the summer shows higher demand.","e3af8aea":"Random Search","671f9c60":"Multi Layer Perceptron Regressor perfoms well compared to other models. ","6bd377a8":"# Visualise the continuous features Vs demand","e8f5eb84":"Our target variable is not normally distributed.","bf785f73":"Our target variable is right-skewed.","1b09e5f0":"Dropping unncessary Columns","278e7dde":"Let's remove the outliers","871e1f2c":"There is high auto-correlation of target variable","f1090178":"# Decision Tree Regressor","945bf986":"# Data Exploration","cdab0af5":"We can see there is no much change whether it is working day or not.So People use the bikes to travel to nearby workplaces during the weekdays and could possibly be using it for exercise and fun during the weekends.\n\nIt's better we drop this feature","96e0a63b":"you can see that demand is very low during the early morning or past midnight and it picks up during the certain hours","2272166b":"Year vs Demand","1204c571":"# Bike Sharing Demand","ba47d7e1":"Here we are not maintaining any order hence we can go with one-hot encoding","9a014b1f":"As we can see there is a good relationship between actual and predicted Values","71f28ccf":"There are multiple outliers in the variable.","1485fa25":"Demand vs Season","ca6240d3":"During rainy days the demand is very low and when the cloud is clear the demand is very high","0d5cb5c5":"Windspeed vs demand","305c9693":"As the temperature increases number of rides will also get increased.","de9d25ca":"# Feature Engineering","fce1ada4":"# Exploratory Data Analysis","0551b2aa":"The wind speed plot also shows a pattern that as the wind speed increases up to the particular point,it does not show any variation but beyond a point the demand for rentals go down significantly.","d4084469":"# END ","861ea87c":"# Autocorrelation test","20d62eed":"This is not so important and we will be better if we drop this feature.","843c36e6":"Now we have same dataset with additinal three lag value columns.","456c05f8":"Types of variables:\n\nCategorical - Season, Holiday, Working day, Weather\nTimeseries - Datetime\nNumerical - Temp, aTemp, Humidity, Windspeed, Casual, Registered, Count","52de4efe":"# Conclusion","ce302c36":"Model Function","1b9b14e4":"It  does not matter which day of the week it is,there is hardly any change in demand","3520962b":"Let's Analyze windspeed column","00f4a4e5":"Demand is derived from Casual and Registered so it is highly correlated with these two features.We'll have to omit these variables. Temp and atemp are highly correlated. So we can remove any one of the variable.","42504759":"# Random Forest Regressor"}}