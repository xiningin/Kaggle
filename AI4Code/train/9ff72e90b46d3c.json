{"cell_type":{"c3f887e0":"code","ff498a0f":"code","2c4180f5":"code","3c0390c7":"code","0033370f":"code","415c4958":"code","e6591c3e":"code","f9a5036d":"code","ef9fa28a":"code","f2e2a511":"code","7edadfc0":"code","21cb75d1":"code","3bf4880a":"code","27056d25":"code","29fa8fbf":"code","1603a014":"code","c15f2c2e":"code","43cfd2ba":"code","f1f62f61":"code","441534d4":"code","c303b5ca":"code","a0b89e33":"code","9b002f01":"code","9bc1cff6":"code","41f11595":"code","0a62fcec":"code","f284fbd8":"code","0b5dcc9f":"code","bb830a25":"code","68c12b47":"markdown","cb6fa3f5":"markdown","71fed740":"markdown","62bd149b":"markdown","4298d39f":"markdown","99971e0d":"markdown","a9aaa780":"markdown"},"source":{"c3f887e0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ff498a0f":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(2)\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport itertools\n\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nfrom keras.optimizers import RMSprop\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n\n\nsns.set(style='white', context='notebook', palette='deep')","2c4180f5":"#loading the dataset\nfrom keras.datasets import mnist\n(x_train,y_train),(x_test,y_test)=mnist.load_data()","3c0390c7":"#viewing the image of the digit at index 35\n%matplotlib inline\nimport matplotlib.pyplot as plt \nimage_index=35\nprint(y_train[image_index])\nplt.imshow(x_train[image_index],cmap='Greys')\nplt.show()","0033370f":"#checking the shape of the training data\nprint(x_train.shape)\nprint(x_test.shape)","415c4958":"#checking the type of the data\ntype(x_train)\nx_train.dtype","e6591c3e":"#checking for null values in training data\nnp.isnan(x_train).any()","f9a5036d":"#checking for null values in test data\nnp.isnan(x_test).any()\n","ef9fa28a":"#checking for null values in training labels data\nnp.isnan(y_train).any()","f2e2a511":"#checking for null values in test labels data\nnp.isnan(y_test).any()","7edadfc0":"#reshaping 3-D array to 2-D array\nx_train1=x_train.reshape(60000,784)\nx_train1.shape","21cb75d1":"#converting the numpy array into pandas Datframe for further analysis\ndf=pd.DataFrame.from_records(x_train1)\ndf.shape","3bf4880a":"df.head()","27056d25":"df.describe()","29fa8fbf":"#checking the index of a pixel with intensity 254 \ndf[df.iloc[:,774]==254].index","1603a014":"#checking the shape of the training labels data \ny_train.shape","c15f2c2e":"#converting the training labels data into a dataframe\ndf_y=pd.DataFrame.from_records(y_train.reshape(60000,1))\ndf_y[0].head()","43cfd2ba":"#displaying the count of each value (0,1,2,3,4,5,6,7,8,9) in the labels\ndf_y[0].value_counts()","f1f62f61":"#plotting a bar plot to show the frequency of each digit in the training data\ndf_y[0].value_counts().plot(kind='bar')\nplt.show()","441534d4":"x_test1=x_test.reshape(10000,784)\ndf_2=pd.DataFrame.from_records(x_test1)\ndf_2.head()","c303b5ca":"#Preprocessing \n#Reshaping the images to a single color channel\nx_train = df.values.reshape((-1, 28, 28, 1))\nx_test = df_2.values.reshape((-1, 28, 28, 1))","a0b89e33":"#Checking the shape after re-shaping\nprint(x_train.shape)\nprint(x_test.shape)","9b002f01":"#One-hot encoding on target\nfrom keras.utils.np_utils import to_categorical\ny_train = to_categorical(y_train, num_classes = 10)\ny_train.shape\ny_test = to_categorical(y_test, num_classes = 10)\ny_test.shape","9bc1cff6":"#preparing pixel data\n#converting integers into float\ntrain_norm_x = x_train.astype('float32')\ntest_norm_x = x_test.astype('float32')","41f11595":"#normalizing by dividing by the highest value i.e. 255\ntrain_norm_x=train_norm_x\/255.0\ntest_norm_x=test_norm_x\/255.0","0a62fcec":"#splitting into training and validation data\nX_train, X_val, Y_train, Y_val = train_test_split(train_norm_x, y_train, test_size = 0.1, random_state=2)","f284fbd8":"#making a basic cnn model of 2 convolutional layers without data augmentation\n##model building\nmodel_b = Sequential()\n#convolutional layer with rectified linear unit activation\nmodel_b.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(28,28,1)))\n#32 convolution filters used each of size 3x3\n#again\nmodel_b.add(Conv2D(64, (3, 3), activation='relu'))\n#64 convolution filters used each of size 3x3\n#choose the best features via pooling\nmodel_b.add(MaxPool2D(pool_size=(2, 2)))\n#randomly turn neurons on and off to improve convergence\nmodel_b.add(Dropout(0.25))\n#flatten since too many dimensions, we only want a classification output\nmodel_b.add(Flatten())\n#fully connected to get all relevant data\nmodel_b.add(Dense(128, activation='relu'))\n#one more dropout for convergence' sake :) \nmodel_b.add(Dropout(0.5))\n#output a softmax to squash the matrix into output probabilities\nmodel_b.add(Dense(10, activation='softmax'))\nmodel_b.compile(optimizer = 'adam' , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\nmodel_b.fit(X_train,Y_train, batch_size=32, epochs=10,verbose=1,validation_data = (X_val,Y_val))\n","0b5dcc9f":"#Data Augmentation \ndatagen = ImageDataGenerator(\n        featurewise_center=False,  # set input mean to 0 over the dataset\n        samplewise_center=False,  # set each sample mean to 0\n        featurewise_std_normalization=False,  # divide inputs by std of the dataset\n        samplewise_std_normalization=False,  # divide each input by its std\n        zca_whitening=False,  # apply ZCA whitening\n        rotation_range=10,  # randomly rotate images in the range (degrees, 0 to 180)\n        zoom_range = 0.1, # Randomly zoom image \n        width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)\n        height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)\n        horizontal_flip=False,  # randomly flip images\n        vertical_flip=False)  # randomly flip images\ndatagen.fit(X_train)","bb830a25":"model_b.fit_generator(datagen.flow(X_train,Y_train, batch_size=32),\n                      epochs =10, validation_data = (X_val,Y_val),verbose = 2)","68c12b47":"We achieved a 99.28% accuracy with data augmentation ,let's try to improve it further with a more connected CNN.","cb6fa3f5":"All the digits occur with almost the same frequency in the dataset.","71fed740":"**Conclusions from the description**\n1. Each figure is a 28x28 sized image,so there are 784 columns,each depicting the intensity value of a pixel.\n2. Many pixels have 0 intensity value.\n3. Some pixels have values other than 0 as in the last few columns,the mean,std and max are not 0.\n4. Most of the pixels in each column have 0 value as 25%,75% and the median for all the columns are 0.\n","62bd149b":"Digit recognition system is the working of a machine to train itself or recognizing the digits from different sources like emails, bank cheque, papers, images, etc. and in different real-world scenarios for online handwriting recognition on computer tablets or system, recognize number plates of vehicles, processing bank cheque amounts, numeric entries in forms filled up by hand (say-tax forms) and so on. The handwritten digits are not always of same size, width, orientation and justified to margins as they differ from writing of person to person, so the general problem would be while classifying the digits due to the similarity between digits such as 1 and 7,5 and 6,3 and 8,2 and 5,2 and 7,etc. This problem is faced more when many people write a single digit with a variety of different handwritings. Lastly, the uniqueness and variety in the handwriting of different individuals also influence the formation and appearance of the digits.\n\nThis dataset includes handwriting digits total of 60,000 images consisting of 49,000 examples in training set with labelled images from 10 digits (0 to 9) and 21,000 examples in testing set which are unlabelled images.\n\nHandwritten digits are images in the form of 28*28 gray scale intensities of images representing an image. The size of an image is 28 by 28, so there are 784 (28*28) values for the label. Each pixel has a single pixel-value associated with it, indicating the lightness or darkness of that pixel, with higher numbers meaning darker. This pixel-value is an integer between 0 to 255 , inclusive. Our goal is to correctly identify digits from a dataset of tons of thousands of handwritten images.\n","4298d39f":"Hence,there are no missing values in the whole dataset","99971e0d":"Using a simple 2D CNN we achieved 99.17% accuracy ,let's try the same model with data augmentation","a9aaa780":"The data type is unsigned 8-bit integer."}}