{"cell_type":{"d4d76903":"code","c49fd72e":"code","ae65161b":"markdown","c2c82382":"markdown","cdc431e8":"markdown","a79f14aa":"markdown","eab1bd23":"markdown"},"source":{"d4d76903":"import pandas as pd\nimport numpy as np\nfrom keras.preprocessing.image import load_img\n\nids = pd.read_csv('..\/input\/train.csv')\nx_train = [np.array(load_img(\"..\/input\/train\/images\/\" + str(x) + \".png\", color_mode = \"grayscale\"))\/ 255 for x in ids.id]\ny_train = [np.array(load_img(\"..\/input\/train\/masks\/\" + str(x) + \".png\", color_mode = \"grayscale\"))\/ 255 for x in ids.id]\n\ny_train[1]\n","c49fd72e":"import tensorflow as tf\nimport keras.backend as K\n\ndef precision(y_true, y_pred):\n    \"\"\"Calculate mean precision for batch of images\"\"\"\n    y_true_ = tf.cast(tf.round(y_true), dtype=tf.float32)\n    y_pred_ = tf.cast(tf.round(y_pred), dtype=tf.float32)\n    \n    #Flatten the prediction and the target\n    y_true_ = tf.reshape(y_true_, shape=[tf.shape(y_pred_)[0], -1])    \n    y_pred_ = tf.reshape(y_pred_, shape=[tf.shape(y_pred_)[0], -1])\n    \n    #Intersection over union threshold \n    threasholds_iou = tf.constant(np.arange(0.5, 1.0, 0.05), dtype=tf.float32)\n    \n    #Add the prediction and the mask toguether\n    total = tf.cast(y_true_ + y_pred_, dtype = tf.int32)\n        \n    #Where total == 2\n    intersection = tf.reduce_sum(tf.cast(tf.greater(total, 1), tf.float32), axis = 1)\n        \n    #Where total == 2 | total == 1\n    union = tf.reduce_sum(tf.cast(tf.greater(total, 0) , tf.float32), axis = 1)\n        \n    #Intersection over union\n    iou = tf.divide(intersection, union)\n        \n    #Change NaNs to 1 because they represent true negatives\n    iou = tf.where(tf.is_nan(iou), tf.ones_like(iou), iou)\n        \n    #Compare IoU to thresholds\n    iou = K.repeat_elements(tf.reshape(iou, shape = [tf.shape(iou)[0],1]),10, axis = 1)\n    \n    #Calculate score for each image\n    greater = tf.greater(iou, threasholds_iou)\n    scores = tf.reduce_mean(tf.cast(greater, tf.float32), axis = 1)\n\n    #Average score for batch of images\n    return tf.reduce_mean(scores)\n","ae65161b":"Let's start by looking at a training example.","c2c82382":"The way I understood the intersection over union \n![](https:\/\/i.imgur.com\/2WiHpCJ.png)","cdc431e8":"![](https:\/\/i.imgur.com\/Zypn6E0.png)\n\nLooking at the matrix of a266a2a9df we see that the mask representing salt has a value of 1.","a79f14aa":"**My take on the evaluation metric**\n\nThis notebook is based on Peter's [Explanation of Scoring Metric](https:\/\/www.kaggle.com\/pestipeti\/explanation-of-scoring-metric) and Kenta's [Metric function for tensorflow\n](https:\/\/www.kaggle.com\/shutil\/metric-function-for-tensorflow).","eab1bd23":"Now create a tensorflow function that incorporates the *IoU* and the rest of the precision metric. The form of the metric is inspired by Kenta's, I only changed the way to calculate the *IoU* to incorporate the way I understood it and added other small changes."}}