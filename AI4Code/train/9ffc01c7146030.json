{"cell_type":{"1e5fae5b":"code","ba111b66":"code","9b05280b":"code","f884cbf3":"code","baa01bc8":"code","9ebff52a":"code","40003254":"markdown","3bd00725":"markdown","6495f020":"markdown","54b1a9ab":"markdown","42ba7c42":"markdown","7056e957":"markdown","a1d50e6e":"markdown","ccc0c77a":"markdown","8ea9a737":"markdown"},"source":{"1e5fae5b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\ndataset=pd.read_csv(\"..\/input\/data.csv\")\n# Any results you write to the current directory are saved as output.","ba111b66":"dataset['Value']=dataset['Value'].str.replace(\"\u20ac\",\"\")\ndataset['Value']=dataset['Value'].replace(r'[K|M]','',regex=True).astype(float)*dataset['Value'].str.extract(r'[\\d\\.]+([KM]+)', expand=False).fillna(1).replace(['K','M'], [10**3, 10**6]).astype(int)\ndataset=dataset.fillna(0)","9b05280b":"from sklearn.cluster import KMeans,DBSCAN\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, Normalizer\n\ndef grouping_playes(data, n_clusters, attr=['Crossing','Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling','Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower','Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression','Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes']):\n    \n    subset=data[attr]\n    subset=Normalizer().fit_transform(subset)\n    subset=MinMaxScaler().fit_transform(subset)\n    model=KMeans(n_clusters=n_clusters, random_state=42)\n    model.fit(subset)\n    return model.predict(subset)\n\ndataset['cat']=pd.Series(grouping_playes(dataset,5)).apply(lambda x:\"Class {}\".format(x)).values\n\nbest_players=dataset[dataset['Overall']>88]\n\n_, ax=plt.subplots(figsize=(15,12))\nfig=sns.scatterplot(x='Overall',y='Value',data=best_players,hue='cat',ax=ax)\n\nfor x,y,val in zip(best_players['Overall'],best_players['Value'],best_players[\"Name\"]):\n    fig.text(x+0.02, y, str(val))\n\nplt.show()","f884cbf3":"def plot_players(data_in, attr=['Crossing','Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling','Curve', 'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower','Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression','Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',       'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes']):\n\n    from sklearn.manifold import TSNE\n\n    subset=data_in[attr]\n    subset=Normalizer().fit_transform(subset)\n    subset=StandardScaler().fit_transform(subset)\n    model=TSNE(n_components=2,random_state=42)\n    subset=model.fit_transform(subset)\n    \n    ax=plt.subplots(figsize=(15,10))\n    fig=sns.scatterplot(subset[:,0],subset[:,1],hue=data_in['cat'])\n    \n    for x,y,val in zip(subset[:,0],subset[:,1],data_in[\"Name\"]):\n        fig.text(x+0.02, y, str(val))\n\n    plt.show()\n    return \n    \n\nplot_players(best_players)","baa01bc8":"best_players_85=dataset[dataset['Overall']>85]\nplot_players(best_players_85)","9ebff52a":"CF=dataset[dataset['Position'].isin(['CF','RS','LS','ST','RF','LF'])]\nCF['cat']=pd.Series(grouping_playes(CF,4)).apply(lambda x:\"Class {}\".format(x)).values\n\nCF=CF[CF['Overall']>80]\n\nplot_players(CF)","40003254":"Let's try now to group players of the same position and verify if these techniques are able to find some more subtle characteristics. Trying with advanced players.","3bd00725":"and converting all player values to a float value...","6495f020":"We now want to visualize the players based on the attributes of each one in Fifa 19. A way to do this is to reduce this whole set of attributes to a 2-d representation of the data. \n\nHere the TSNE was chosen since it is a technique which generally do a good job in reducing high dimensional data to a 2-d representation and maintaning some degree of closeness between similar samples, which is ideal to visualize similar players.\n\nThe following procedure perform this task in any group of players passed as parameter:","54b1a9ab":"In a small sample like this the representation isn't good, the players are just spread by the plot. Let's try with a bigger number of players. Ploting now using all players with Overall above 85.","42ba7c42":"Now it's much better. We can see similar players close to each other and visualize that the assigned K-means clusters grouped similar players very well, matching with the TSNE interpretation. Better than that, now we can se a gradient of *characteristics* coming from more defensive players to offensive players.","7056e957":"In this case, the K-means is not so great in put similar players in the same cluster. We can see some trends with more terminal players being put at the same cluster (Cluster 0) as an example, but the major part of the players are in the Cluster 3. It can indicate that these players, as more \"complete\" players (Overall above 80), do not have a characteristic trait in their attributes in Fifa 19 which can distiniguish them from the others, at least, to the K-means algorithm.\n\nThe TSNE is also not so good, but it does show some interesting examples of similar players such as Hazard, Dybala and Mertens close to each other, or Lewandowsky, Falcao and Ibrahimovi\u0107.","a1d50e6e":"A initial try is to check if we can clustering all the players based on the characteristics them. We will use the K-means to do that, trying to classify the players in groups and verify if there is some meaning in their classification. \n\nFollows the code with the K-Means clustering procedure and the plot of players with Overall greater than 88 (more known players).","ccc0c77a":"Checking the clusters wich emerge is easy to see that the assigned classes are well explained by the position of each player. Goalkeepers are all assigned by Class 1 (in green), two central-backs with more defensive behavior are assigned in the same class (Class 0) while Sergio Ramos (a more offensive central-back) is assigned in the Class 3 with more defensive midfielders as Sergio Busquets and Lucas Modric. Attacking midfielders and advanced forwards are grouped in the Class 4 and separated for the Strikers (Class 2), which makes sense considering the expected characteristics of these positions.","8ea9a737":"At first, loading the dataset and some dependencies..."}}