{"cell_type":{"ca1de889":"code","53ff3432":"code","0209bb0d":"code","f22911fa":"code","005dc6d5":"code","bad0c365":"code","0df2a9e4":"code","f4994402":"code","5ec04c20":"code","a80a4514":"code","60a5a3ed":"code","d3271325":"code","73fc5117":"code","30d2276b":"code","f58eb51f":"code","653996a0":"code","9197618a":"code","46f3df2d":"code","ded34674":"code","fd33993e":"code","49cb749f":"code","2ebb5941":"code","7c4a2ac6":"code","cab9c9c5":"code","d72f5970":"code","74d53a62":"code","f51aa177":"code","a409ec19":"code","836c9266":"code","c2fe9068":"code","4d868ca5":"code","07a1b74f":"code","2580e478":"code","188657c2":"code","2fce4c77":"code","13d81f96":"code","151eea0c":"code","063dfe8e":"markdown","da36a367":"markdown"},"source":{"ca1de889":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, StandardScaler\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn.model_selection import StratifiedKFold\n\nimport string\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","53ff3432":"data = pd.read_csv('..\/input\/titanic\/train.csv')\ndata","0209bb0d":"data.head()","f22911fa":"data.shape","005dc6d5":"data.info","bad0c365":"data.columns","0df2a9e4":"data.describe","f4994402":"data.isna().any()","5ec04c20":"data.isnull().sum()\n","a80a4514":"data.isnull().mean()","60a5a3ed":"data[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)","d3271325":"# check how many observations we would drop\nprint('total passengers with values in all variables: ', data.dropna().shape[0])\nprint('total passengers in the Titanic: ', data.shape[0])\nprint('percentage of data without missing values: ', data.dropna().shape[0]\/ np.float(data.shape[0]))","73fc5117":"X = data.values\ny = data['Survived'].valuesX = data.values\ny = data['Survived'].values","30d2276b":"X = np.delete(X, 1, axis=1)","f58eb51f":"# Remove NaN\ndf_train_drop = data.dropna()\n\nsns.distplot(df_train_drop.Age, kde=False)","653996a0":"data['Embarked'] = data['Embarked'].fillna('S')\ndata","9197618a":"data[data['Fare'].isnull()]\n","46f3df2d":"med_fare = data.groupby(['Pclass', 'Parch', 'SibSp']).Fare.median()[3][0][0]\n# Filling the missing value in Fare with the median Fare of 3rd class alone passenger\ndata['Fare'] = data['Fare'].fillna(med_fare)","ded34674":"data.corr()","fd33993e":"cat_features = ['Embarked', 'Parch', 'Pclass', 'Sex', 'SibSp',]\n\nfig, axs = plt.subplots(ncols=2, nrows=3, figsize=(20, 20))\nplt.subplots_adjust(right=1.5, top=1.25)\n\nfor i, feature in enumerate(cat_features, 1):    \n    plt.subplot(2, 3, i)\n    sns.countplot(x=feature, hue='Survived', data=data)\n    \n    plt.xlabel('{}'.format(feature), size=20, labelpad=15)\n    plt.ylabel('Passenger Count', size=20, labelpad=15)    \n    plt.tick_params(axis='x', labelsize=20)\n    plt.tick_params(axis='y', labelsize=20)\n    \n    plt.legend(['Not Survived', 'Survived'], loc='upper center', prop={'size': 18})\n    plt.title('Count of Survival in {} Feature'.format(feature), size=20, y=1.05)\n\nplt.show()","49cb749f":"# grid = sns.FacetGrid(data, col='Pclass', hue='Survived')\ngrid = sns.FacetGrid(data, col='Survived', row='Pclass', size=2.2, aspect=1.6)\ngrid.map(plt.hist, 'Age', alpha=.5, bins=20)\ngrid.add_legend();","2ebb5941":"# Countplot\nsns.catplot(x =\"Sex\", hue =\"Survived\",\nkind =\"count\", data = data)","7c4a2ac6":"pd.get_dummies(data['Sex']).head()\npd.concat([data['Sex'], pd.get_dummies(data['Sex'])], axis=1).head()\n","cab9c9c5":"#Analysis of categorical features\ndata.groupby(['Sex','Survived']) ['Survived'].count()","d72f5970":"f,ax = plt.subplots(1,2 , figsize = (18,8))\ndata[['Sex' ,'Survived' ]].groupby(['Sex']).mean().plot.bar(ax = ax[0])\nax[0].set_title('Survived vs Sex ')\nsns.countplot('Sex', hue = 'Survived', data = data , ax= ax[1])\nax[1].set_title('Sex: Survived vs Death ')\nplt.show()","74d53a62":"#pclass ordinal features\npd.crosstab(data.Pclass, data.Survived ).style.background_gradient(cmap='summer_r')","f51aa177":"f,ax = plt.subplots(1,2 , figsize = (18,8))\ndata['Pclass'].value_counts().plot.bar( color = ['#cd7f32' , '#ffdf00' , '#d3d3d3'] , ax = ax[0])\nax[0].set_title('Number of Passengers by Pclass ')\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue = 'Survived', data = data , ax= ax[1])\nax[1].set_title('Pclass: Survived vs Death ')\nplt.show()","a409ec19":"pd.get_dummies(data['Sex'], drop_first=True).head()\ndata","836c9266":"pd.crosstab(data.Sex, data.Survived ).style.background_gradient(cmap='summer_r')","c2fe9068":"sns.factorplot('Pclass', 'Survived' , hue= 'Sex' ,data = data )\nplt.show()","4d868ca5":"group = data.groupby(['Pclass', 'Survived'])\npclass_survived = group.size().unstack()\n \n# Heatmap - Color encoded 2D representation of data.\nsns.heatmap(pclass_survived, annot = True, fmt =\"d\")","07a1b74f":"group = data.groupby(['Pclass', 'Survived'])","2580e478":"data['Family_Size'] = 0\ndata['Family_Size'] = data['Parch']+data['SibSp']\n \n# Adding a column Alone\ndata['Alone'] = 0\ndata.loc[data.Family_Size == 0, 'Alone'] = 1\n \n# Factorplot for Family_Size\nsns.factorplot(x ='Family_Size', y ='Survived', data = data)\n \n# Factorplot for Alone\nsns.factorplot(x ='Alone', y ='Survived', data = data)","188657c2":"print('oldest passenger was of : ' , data['Age'].max() , 'Years')\nprint('youngest passenger was of : ' , data['Age'].min() , 'Years')\nprint('Average passenger was of : ' , data['Age'].mean() , 'Years')","2fce4c77":" #Divide Fare into 4 bins\ndata['Fare_Range'] = pd.qcut(data['Fare'], 4)\n \n# Barplot - Shows approximate values based\n# on the height of bars.\nsns.barplot(x ='Fare_Range', y ='Survived',\ndata = data )","13d81f96":"sns.catplot(x ='Embarked', hue ='Survived',\nkind ='count', col ='Pclass', data = data)","151eea0c":"columns = ['Pclass', 'Sex', 'SibSp', 'Parch', 'Embarked']\n\nfor column in columns:\n    print(column)\n    print(data[column].unique())\n    print(data[column].unique())\n","063dfe8e":"One-Hot Encoding","da36a367":"  len(data)"}}