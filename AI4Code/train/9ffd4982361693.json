{"cell_type":{"7dadfb45":"code","ecc311fd":"code","b5519f0c":"code","08844986":"code","8523b4fd":"code","147a2b22":"code","779e1365":"code","7468980c":"code","fd518fac":"code","036708a0":"code","0d0d1f31":"markdown","3bb63dff":"markdown","0a877881":"markdown","2862d3a1":"markdown"},"source":{"7dadfb45":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBw8QEBAPDxAPEBUQEA8PFQ8QDxEQEBYQFhIXFhUVFhUYHSggGBslGxcWITEhJSorMi4uGB83ODMsOigtOisBCgoKDg0OGxAQGy0mICYxLS8rLS0tLS0vLS0tLS81Ly0tLS0vLS0tLS0tLS01Ky0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAMEBBAMBIgACEQEDEQH\/xAAcAAEAAgIDAQAAAAAAAAAAAAAABQYEBwEDCAL\/xABQEAACAQMCAgQICQcICAcAAAABAgMABBEFEhMhBiIxQRQXMlFScZPTBzRCVGFydLGzCCNFgZGhshUzNWKCksLRJENEU2OUosEWZYOEw9Lh\/8QAGQEBAAMBAQAAAAAAAAAAAAAAAAECAwQF\/8QALBEAAgIBAwQBAgYDAQAAAAAAAAECEQMEEjEhMkFRE2GxBTNCgZGhUnHRIv\/aAAwDAQACEQMRAD8A3jSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgFKUoBSlKAUpSgODUdd63bREq8qhl5FRlmB+kAVImtbdIvjc\/wBf\/CK6dLgWWTTOHX6qWngpRXLotUnS61HZxG9SY+8isWTponyYXP1nVfuzVOpXorQ4l7PGl+K6h8NL9i0P00k7oEHrkJ\/7CupumNx3Rwj9TH\/vVcpWi0mFfpMX+Ial\/q+xPnpfdeaH+43\/ANqnei+ry3PF4uzqbMbVI7c5zknzVQ6tvQL\/AGj\/ANL\/ABVhqsGOOJuKOrQarNPPGMpNrr9i215+f4ZdXBIC2XJmH8xJ3HH+8r0DXjuTym+s38Rrg08VK7PfyNrg2D45dX9Gx9hL72njl1f0bH2EvvK15Sur4oejPfI2H45dX9Gx9hL7ynjl1f0bH2Evva15SnxQ9DfI2H45dX9Gx9hL72njl1f0bH2Evva15SnxQ9DfI2H45dX9Gx9hL72njl1f0bH2Evva15SnxQ9DfI2H45dX9Gx9hL7ynjl1f0bH2Evvap9toshQyysIIwgk3OjvIYzyDrEo3bc\/KbavPtrKm0mCNoonjv5ZJQSqIYIWYBmUELiTIO0kHJyOdRsx+ibkWbxy6v6Nj\/y8vvaeOXV\/Rsf+Xl97VWtdMtp0LxG6iClhulFvMpKpvYKFKOxC9Y7VYgd1YN3pzxrxVZJoshePCxeMMexXyA0bf1XAPmzTZj9C5F38cur+jY+wl97Txy6v6Nj7CX3la8pU\/FD0RvkeiPg56YXeoWsk1wIQyXDxDhIyrtEcbDkWPPLGlV74FPiE\/wBsk\/BhrmuPJFKTNU+ht+lKViXFKUoBSuM103F5FGMyOifWYCiV8ENpdWd9cVB3PSu1TkrNIf6inH7TgVGXPTNv9XCB9Lvn9w\/zreOlyy4ics9fp4cy\/jr9i3mtbdIvjc\/1\/wDCKyJ+lF23Y6p9RB\/izWvOkGoTPcTbpZDlh8ogeSO4V6Gk008UnKR5Ou1ePUxUIX0dlpZgO0ges4roe+hXtljH9tao5Oe3n664rvPN+Jey5tq9uP8AWr+oMf8AtXWdctvTJ\/sN\/lVQpQn4kW06\/b+d\/wC4au\/waahHN4Vw93V4OcjHbvx91abrZ3wLf7b67b\/5K5dZ+S\/2+53fh8EtRF\/7+xs2vHcnlN9Zv4jXsSvHcnlN9Zv4jXm6Xlnv5fB80pSuwyFKUoBSlKAVO6LaRJskmkhSSVJZIFn28NVQHEzByFJLDagYgZBY5wA0XpdmZ54oAccWRULeZc9dv1KCf1VdCk7q0ctrCYrlkkhnxlIk2ps3KSA3Di6uVII4b9ozWc34LRRFzRyAS8aXhq68G7MsjyQvMY0eGeIjJllI2PsAyNpztVuUXc3VriJGjupxHGI0aWWO2zHuZxtRUc7csSMseVZlnqEst0kiW8s0GXtEhMTTKY5QVKk8g0zFxITkEuRz7KsXTvwh7csdPukAht7Z7iXT3txHbQsWVQ3FfGW2gnlkAVW6dFvBWrHU7cRNEvFt8lyszhbtYmkTY+1lVXj3qmCcP5OQOVdmp6hOsifzcKpAEt44w1zbzwFlQR5OQ6keVnA3KeqrNVwsWuBZuJ9LujxPBZ5l\/kx+HJJbqux2fjLgNsBbqfKbz1TdA1KQ3Gx9u6aczR71IWO9YkoR2FVcnYQMcmU9qiid2DD1nTTGFmWKSFXO1oJVZZIZSC2zrAEoQCUY9oDA81OYurfHaq6LFxIFW5i4MVorSCVMs8sUzibDs3H5csjazdgIzT1OQD5xmrxdlJI3R8CnxCb7ZJ+DDSnwK\/EJvtkn4MNK48nezWPBuClKVgaGHqGqQ24BlfbnOBgknHbgCq7edMhzEMRP9aQ4\/wCkf5189PfKg9Uv3rVUr1NLpccoKcjwddr80Mrxw6JElda9dSdspUejH1B+7n++o1jk5PM+c8z+2lK9CMIx7VR5E8s5v\/02xSuHYAZJAHnJAH7TUXddI7KPk1xGSO5CZD\/05qW0iI45S7VZK1TNb+MS\/WH8IrKuOnVqvkJNJ\/ZVB+0nP7qq+odITLI8giC7jnBYtjljzCqPLFeTsw6PNduJI1xUE2rSns2j1L\/nXU1\/Mf8AWH9WB9wqrzROpaHJ5aLHTFVhrmQ9rv8A3jXwZG9Jv7xqvzr0XX4e\/wDItVbN+Bf\/AG3\/ANv90laGJPnrcf5PH6R9dp901c+qy7sTVHTptH8eRSs3HXjuTym+s38Rr2JXjuTym+s38Rrj0vLO\/L4PmlKV2GQpSlAKUpQEjoBInyvIiC+Ix6Xgc2KnktVRJXS1uYD4HfHiPE9tbyN4Ow3JA7MQ2wv1gQMZ6oqt6PeiC4hmbmscgLDzxHqyD9aFqtNnbQxYijtzLPDNtmcIctCcxbTcTSBRxYnLKqDmXQDsOcp8mkeDN+DNAYn59t\/ZKR2ZBuLX+r\/i\/V31f2t4tl0U2Hh21yQF8Nyu3CDdxGKHkT9PZjkK1FbapJp3FtQglV3SdJxLLC7IDG0UibeQ5xgnIJB3Dlg1YNG6SalevHCi3rrcvJbhvDi6FxEXZGEqlc7OeDjlzHZWWTG29xaMkuhsW6hhWa6VWXkl0Mf6aJN4idsZY7GGQfo7hWjNbJF85XtEsJH1tqY\/fVh1DprfhfzwvFWYSgCTUJcsoYo\/JVAxkEcgBkHHZURpm65u3vOCSI3WQQoGfdOFzDCuBubmu44HkI5qccHG2yJO+iJe3jZLp\/8ARLRyb\/ejhkF2kRvCqSlebFdxXny5Y7jmqddgCSQL2CSQD6u84\/dVvgnjRYpor1pVgV55oWVc7o2JRRIVWRQ1xwsRsMEvkZ2mqUowB3\/TWsCszdHwK\/EJvtkn4MNKfAr8Qm+2Sfgw1zXJk7mXjwbfpUXrnSGzsV33dxFCD2Bm67fVQdZv1CtZ9IPhsQZTT7YydwnuconrEa9Y\/rK1nHHKXCLtpFw6eeVB6pfvWqHf65awZ4syAj5Cne\/91cmqBr\/S\/UL5s3NwxHPEcYEUYB7QAvaOXeTUHivVwzePGonj5tDHLmc5Poy93vTyMZEEDP5mkYIv7Bkn91QN30uvpOyRYh5okAP945NQVKl5JPybY9HhhxH+ep2XE7yHMjvIfO7M33110pVDoSoUpShIpSlAKUpQCtx\/k8fpH12n3TVpytx\/k8fpH12n3TVhqOxlsfcbjNeO5PKb6zfxGvYhrx3L5TfWb+I1lpeWXynzSlK7DIUpSgFKUoBU\/pt7JKiJGV8JgXbDv6weMDq8NT1fCEGQpIyVwBzUZgKVDVkp0bAstE22ceYXvWAM7W5UPdRsyI0nDQsDwwHTcQHJc9ibclocgVGm0m5gG4cWazmN9G6OvISRLAxkbKsRgM45Hn3CHt9Zt7hEW9muIZYj1buPiPJnaIy4ZctkoqhlIwxUEMpLZwm0hBCJIbq0MbTbUmnSa1nDxrkqmQQBh1JwT2L2Vjt9ml+jJ11o5Hjuby54xkRlS3tEmUiON2XBe56yLv3jJVjkNyrCtNUlklSKKFWXZJEtnEWA2Pjed4O7fyBMrHu58uVSl1NOsVu9xfRbWSQLIUbUnk2yEHYJI8LjIXBcDv76wNR6RyPC1tCWjif+cJWNJJQOwMIwFRP6oznvLVZLpRDOOkWprITHGUbLI000ZJWSRE2Ioc85FQZ67c3Zmbs21CUpWiVdDNuzc\/wK\/EJvtkn4MNc0+BX4hN9sk\/BhpXDk72bR4NX9MnLajfliWPhdyuWJJ2iVsDJ7h5qh6lul39I3\/wBsuvxmqJrtjwjF8ilKVYCuAal+iUatqFijqrK13bqysAylTIMgg9oqc1CLiWhklexu3S9tUWWyjiQwxNuDLNsRMq52hQVPNTzFUlKnRKjZTaVJdJkVL69VQFVbu6UKoAUKJmAAA7ABVgj0Amw8G8FmM7251QXIifC4GVtg2Mc7cNJj0yBRySSCjZTaVZ202K6ntroKI7e4ia5uAgCpGbYDwtVA7A2FZR\/x1rP0KxFwsk81qcarPLaxmKBmjtYhz4q7BhdsphTn8mOTz1DmkTtKQWHnFc5qz9GrqeDw+B1hzb2l7JtktreVkuY2RSdzoScHPLOPorIt44LjT4xOI45rm\/vBHd7UiVZRDblY5AoAETbiDgdUlT2ZqXKhtKhmlXK200RpapNCqyDTteMiui7uLG04Ut52XAwe7AxX3f2cVtaWeoLEk0hsrWPZsUwwStvxcXCfLZuxARtJQ5JIAqPkQ2FKrcf5PH6R9dp90tacJ\/fzrcf5PH6R9dp901Uz9jJh3G4zXjuTym+s38Rr2Ia8dyeU31m+81lpeWWynzSlK7DIUpSgFKUoBSlKAVOWTGaz8Fg4YlMvEdJJShlUc0MRdhGGXLBhyYgDmRkVB0IqGrCdEvr1wrJbRZR5IIzHJJFIzw4ARY406xTKqnWZAFLN34zURSlEqDdilKVJBuf4FPiE32yT8GGua4+BX4hP9sk\/BhpXBk72bx4NXdLv6Rv\/ALbdfjNUTUt0u\/pG\/wDtt1+M1RNdseEYvkUAJIABJJwABkk+YClSnRzUkt5XaQyoJYJbcTQ440LPtxKmSMkYwRkHDHBBqXwEYlhdvazxThQHt5UlCyAgblIYBhyOKz7vWXEfBjtYLRJXimYRpPulMZJTLSux2AnOFxzqbtbWVJJbtpxfPHpslzZTtukzw5hGzFJBnfCGlbY2cEA88VW5tcu5VMUtzNMjukhWWQy9YHkylslf7OM9+ap0ky3BkarrC3DtI1lapI83GdkNzl2LFnUq0hADE8wAPoxXI6RXz3PhCzzmQy8cRI8pjyG3bREDjYOQ2+arPJa2n8vbvC3D\/wApoeF4GxG\/jDq8TiYxnlnH6qg7u6ltrSA2zvF4VLeGeaJikjSRzFUhLr1lUJh9oIzvyc1Ca4ommRy6zMsN1aqFSO5mWV4wpGxg2SiZ5qpwgIPdGtLnV7pkixJNDGkUcEYieWKLao7Rg4ZmO5ie8k1YdJQXi2Et4ONJ4XPbo0h61zFHb8RI5D2yATbY9x5kSbc8qjtF16+nu4Y5JJbgXEqQS2khJgaNmCunB8lABnGANu3PLFLXoV9TAm1uZpJ5yqb7m2a1kba3WBRFeTt\/nDsBJ7MknHOsWS+ZrdLYhdkcss4ODu3SIisCc4xiMd3nqW1+NEtLNI23ot1q6o+c7kEsIU578jBrG6LRBrkZQSskNzNHCy7lknjhZ4kK\/K6wBx34x31ZNVZDTujtm6RXZWBpAG4drcWUckiN14ZlZTlvlMFbAP0DOa+LXWrpXikSMOsdslkY+E7wy265ykq\/KznuxggEYIrN6N6xdXV3HBPNLdRXb7JoZZGeMxHJdwDyjKDLhlxt28sCskXBSw07ZqUlp+bvCETwscT\/AEyXDfmRgHu51V0ulElSbtOBjmeXM4+jnz5fTW4vyeP0j67T7pq05uJ5nOTzOTk5Pbk1uT8nj9I+u0+6aq5\/y2IdxuI147k8pvrN\/Ea9iGvHcnlN9Zv4jWWl5ZbKd6WwNvcT5OYXt0C8sESCYnPq4Y\/aamW6NqTfJHI5ktvBRChAPFeSJ5WQ47G2o23HacDvqHsr4xrJGY4pUl4ZaOUPtLITsYFGVgRuYcjzDHNds2sTsZmLANPLBOzou0rJDu4ezHkgbj+wV0u\/BRUZF3pUcZvDukItVsnGNu5hNw9w7O0Bzj1Cuy50NY3lVpGK+GW9rC67SJEl\/OcQ+qIxnl3yCsS+1maZ7l3EYN3weIETav5oqV2DPV8kf\/lfM+rTOLZTsxaY4eFwSQVwX9IgIi59FAKVIWiYk6NIL4We24A23rA8a3lkk4EUjrs2LhNxQDDAnrV1nQIhctbky7xbxyratJDHcGdiubcyEbNwUl+zJGBjNRz6u3Ga4SGCN3Fyr7BKVbjoySEh3bnh2xjAGew11fyhu2cWGGcJCluBIJBlEJ2ElHU7gMLnPkgCoqQtHdJYxrFJO4uFEd4LYwttSUIYpHO7K8pAUx2Y7eVZs+j25uvA4mnDvEhjaV4irXEkEcsUZwq7Q24pn0ivdmo2+1WWcSrIVPGuPCmIXB4gRkAHmXax5fQOdcPqchuEujt3o1uw5HZmFUVMjPmjXPPz1NMWjm9sQtx4NE3EYPHAXyAhuDhX2n0A5IB8wz31l3um24F2sDTmSyDMxk4fDlRJVhkKgAGMhnUgEtkZ7DUSzksWzgli2RyIOc5Hm51n32rvKsoMcKNcEGaWNGWSXDbutliqgsAxCBckAmp6hNGV0m0VbRlVRKQdh4kksDq2Y1c4RBuTm3yvNUJXfqF208rzSbdz7c7RgdVAo5epRXRSKddSrFKUqxBuj4FPiE\/2yT8GGlPgU+ITfbJPwYaVwZO9m8eDVvS7+kb\/AO23X4rVFIpJCqCxYhQqglixOAABzJJ7qlel39I3\/wBtuvxmrJ6GhjJciL4wbG4Ftg4fjZXcI\/8AiGLi7cc89ldl1GzKrZgajod5bqHuLaeJWO0O8ZC7vRJ7AfoODWXo+n6kiG6treco0bqX8HEsbxctwKOpEich3Ecq40nTFaCeaSaVEgltmubXhSgPCZ40JZ84Ljc3VIJ5V99IIr06jIQJjOZSbdog2eFuPAMBX5G3bjbyx+uo3eOhNGJNqV4Wgu97pwyY4JYkWGNNnWKRKgCrjfkjHPfzzmsrwnUbxFhSPes0jHZb2sEIlliUOxbhou8qCDz5DNSt6q3N1qFhHsZpXW4gEWOGdRiiHHRMcsSfnl82VT6K7NOkjF8LQZaGy0\/UbYmMjLyeCytcyLkEZaQsBnPJVqG16Jr6kPdWOqR3cU8kNwtzNPxI2aJd7zghsquME5wcYxXEqalp6txoZIY52yyXNuktu8gBOSsilN4GeYwcfRWR0US2Gp2Bt0uY14w3ccxsxO1vJ2Ko7PPXxKkEOk3BtZJ7hbmaGGQyxLCsDRDio2wO+WfmA2exWHbRvqkEiO1Se7knVbjiCWPZEkewRGPmCixxoAE7QRtA7QazJ9b1FlnLHBX81cTrbQR3HWYpslmVA\/Mgr288c81ZNTK3mp+Dthbi3ubfgSE4E0K7Ha3Y+mvWZD3819Guu0Vc30D4Uapql5ZBmHYYw7wsPVPLF+w1G5eUTt+pV7XU7qKGKNRGYjJLwhLaW8w4h2cQI0iE96ZAPmr6u9B1C1HhEltcW4iZW4xUx7G3DaQR5J3YqwarGBaxWaqN2lXlkkh7fztyrm5Oe8CZQn9kVDdN47Twq+MUd0JPDLrc8rRGH+dfdtAQMMnsyeypUrZDR8X2rX7NJbSdSSVuDKqWsEFxKzEdSRkQO2SRyz1s880g0PUriKPZbXEscPFjQrGNq5lYyLnt8st299Wq8IvdXMTELcW1\/GYnOBx7ZJlYwsf94gyUPeoK9y1WrdARrfIHMTd3\/mUFFL0GiCljZWZGBVlZkZT2hgcEH6QQa3D+Tx+kvXafdLWnK3H+Tx+kfXafdNUajsYh3G4zXjuTym+s38Rr2Ia8dyeU31m\/iNY6XllspZOjmiQ+CXWqXil4bZlhjtwxTj3TYwrMOYQblJxzPPzc8G01iAyDwqztGhYgOsEPg8qJnm0UiHduHbhi2cYPbVh0OUXeh3mnR857e5XUEiHN5YBtEmwfKZescD+r56pmn2Ml1KltAvEklYRqq8+Z5ZPmA7Se4Ct11uyvqi039jFo2omC6ggv7duFKDJHmRrV84dCMbXHWyOwle7PLK6T9GQt\/HNbi3WxnjF3HcLEDbJargycRB5TLkDB5sWQducfHwj3S32qRW1l+fMMEFihTGHkQsXIPogtgt2DaT2Vm9HtSs5Ubo9LJm3l5RXwZsDUd27eoJwIS\/VUd+MnyzilulLz5\/6W+hUda1WKabfb2ltbRoxKRLEMsvdxufWJ7SOwZwKsXTYwW0emPDZ2MfhWnxXUubZWHEbGSu4nA+iqnrOmzWc8ttcLskiJDDuI7nU96kcwfpq6dO9Slhg0QR8IZ0q3b85bwTHcMf7xCcfQKu+VRVebMDTdDj1O\/ht0jFksdoj3gSPhiN4s8ZlU9hYlMd3P6CKh7rWYeIfBrO0WEHCJNDx5HTuMsrHfuI59UrjPLsq0dBOkUT6reNPtgXVIriHczdVJZCCgLeYnI9ZFUO8tJLeRredSkkTcNkbk24cuQ7we49+RSPdTD4tFj6Q6PFHbWeq2i7YLpmRraQmUQ3UZO6PLc3jO1iM88D6akumT29rFpUsNjYDwqwjupUa3yjSHGcdbKjn3HlXz0nmFroun6bJ1Z3mk1CWI8mijficNXHyWIcHB8xqV6Q61Hap0eae1trqL+TYGeOaFHk2gLnhsewgcwOzI51S30\/csV74QtEt7Z7OW2UxJfWcd0bVmLNCzAZUEnO055Z9E\/qy7ngLolterZ2Ime\/ktWfwcENGsbsMqTjdlRzFYnwjaZJHci7473VveqJbe7dt2Ux\/NE\/JK5xjA5d2c47r1h\/4atDkY\/lefn3fzMtSusY9SPLOvozp0GqmW0EMVtdCJ5oJoNyRSFBzhliJKjIOQy47Dn6alz7wQRyIPIg94P01dvgmURXjalKdlvZQTvJMfILshRY1PymOTyHm+kVTbmcySSSkYMkkkhXzF2LY\/Vmrx7mir4Nx\/Ap8Qm+2Sfgw1zXHwK\/EJvtkn4MNK5MnezSPBq7pf\/SN\/9tuvxmqJBIIIJBBBBBwQR2EHuNXzpL8H+sS3t5LHYyOkl1cSKwltwCjSMVOC+ewio3xba38wk9tbe8rrjONcmbi7IO+1m7nUJPc3MyrjCSzyOvLsOCcE\/Sa4h1i7SIwJc3KRHI4SzyLHg9o2g4A+ip7xba38wk9tbe8p4ttb+YSe2tveVO6HtCpFWgkZGV42ZGQhlZCVZWHYQR2EV92tzJE4kikkidc4kjdkcZGDhhz5gmrN4t9b+YSe2tveU8W+t\/MJPbW3vKb4+0RtZA3GsXchRpLm5kaMkozzyMyE9pUk9U+qsVZWCNGrMEk2h0DEI205XcvYcHmM9lWfxba38wk9tbe8rnxb638wk9tbe8puj7RNSKw87s\/EZ3L5DcQsxfcMYO7tyMDn9FfUl3KxBaSRtrtIMuxxIzBmcc+TEgEnvIFWXxba38wk9tbe8rjxba38wk9tbe8puj7Q2srXhUmXPEkzKwZzvbrsG3hm9I7ueT386yrvW7yZDHNdXUqNjMclxI6HByMqxwefOpvxba38wk9tbe8p4ttb+YSe2tveU3R9oVIrLTuX4pdy+4PxCzGTeDkNu7c555pxn6\/Xb85yfrHr9YN1vS6wB594Bqz+LbW\/mEntrb3lPFtrfzCT21t7ym+PtEbWVStx\/k8fpH12n3TVRvFtrfzCT21t7ytn\/Ar0bvrHw7wy3aDim22bnjbdtEm7yGOMbh2+ess8k4OmXgmmbNNeO5PKb6zfxGvYhrzLJ8G+t7m\/0CTmzH+etuzJ\/wCJWWmaTdlsibKrFIyMrozIyncroxV1PnDDmD6qkrjpHfSKyPdTEOMNgqjOPM7KAzj6xNS3i21v5hJ7a295Txba38wk9tbe8rq3QflGdSILTdXurbd4NPLBu7eE23PLHM11xahOkvhCSOsuS3FGA+49pzVh8W2t\/MJPbW3vKeLbW\/mEntrb3lN0PaFSIe86QXs7RtPdTymJg6NI+4qw7CCaah0gvbhOHcXU8ycupI+5eRyMeapnxba38wk9tbe8p4t9b+YSe2tveVFw+n9CpFUIqVh6SX6KqLdTAKMKSQ7qPMjsCyj1EVK+LbW\/mEntrb3lc+LbW\/mEntrb3lS5RflCpFZW4kEnF3txN2\/iFiz7+3cSe0\/Sazb\/AKQ31wnDuLqeZOXUkfcvI5GM9nYKmPFtrfzCT21t7yni21v5hJ7a295TdD2hUiDi1m6SE2yXEywndmAOeF1vK6p7M5P7TWSOlOo7QnhlxtXsTf1B6lxgVJ+LbW\/mEntrb3lc+LbW\/mEntrb3lRcPp\/QqRX77U7ifHHnmlC81WSRmRT51XsH6hWJVr8W2t\/MJPbW3vK48W2t\/MJPbW3vKlSivKI2svvwKfEJvtkn4MNc1KfBX0cvbSzliuoGidrp5ApeNsoYowDlWI7VP7KVx5GnJmyTo2XSlKwLilKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAKUpQClKUApSlAf\/\/Z',width=400,height=400)","ecc311fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b5519f0c":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/cusersmarildownloadsstringencycsv\/stringency.csv', delimiter=';', encoding = \"ISO-8859-1\", nrows = nRowsRead)\ndf.dataframeName = 'stringency.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","08844986":"df.head()","8523b4fd":"fig = px.scatter_matrix(df)\nfig.show()","147a2b22":"# 3D Scatter Plot\nfig = px.scatter_3d(df, x='Entity', y='Date', z='Government Response Stringency Index ((0 to 100, 100 = strictest))')\nfig.show()","779e1365":"fig = px.parallel_categories(df, color=\"Government Response Stringency Index ((0 to 100, 100 = strictest))\", color_continuous_scale=px.colors.sequential.Viridis)\nfig.show()","7468980c":"fig = go.Figure(data=[go.Scatter(\n    x=df['Date'][0:10],\n    y=df['Government Response Stringency Index ((0 to 100, 100 = strictest))'][0:10],\n    mode='markers',\n    marker=dict(\n        color=[145, 140, 135, 130, 125, 120,115,110,105,100],\n        size=[100, 90, 70, 60, 60, 60,50,50,40,35],\n        showscale=True\n        )\n)])\nfig.update_layout(\n    title='Government Response Stringency Index',\n    xaxis_title=\"Date\",\n    yaxis_title=\"Government Response Stringency Index\",\n)\nfig.show()","fd518fac":"fig = px.bar(df[['Entity','Government Response Stringency Index ((0 to 100, 100 = strictest))']].sort_values('Government Response Stringency Index ((0 to 100, 100 = strictest))', ascending=False), \n                        y = \"Government Response Stringency Index ((0 to 100, 100 = strictest))\", x= \"Entity\", color='Government Response Stringency Index ((0 to 100, 100 = strictest))', template='ggplot2')\nfig.update_xaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\nfig.update_layout(title_text=\"Government Response Stringency Index\")\n\nfig.show()","036708a0":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRJSz4ECSfJb7kJQaL3qLSz1U_JBcj6bXyXRw&usqp=CAU',width=400,height=400)","0d0d1f31":"#COVID-19: Government Response Stringency Index\n\nAuthors Thomas Hale, Sam Webster, Anna Petherick, Toby Phillips, and Beatriz Kira (2020). Oxford COVID-19 Government Response Tracker, Blavatnik School of Government.\n\nThe Government Response Stringency Index is a composite measure based on nine response indicators including school closures, workplace closures, and travel bans, rescaled to a value from 0 to 100 (100 = strictest response).\n\nThe specific policy and response categories are coded as follows:\n\nSCHOOL CLOSURES: 0 - No measures 1 - recommend closing 2 - Require closing (only some levels or categories, eg just high school, or just public schools) 3 - Require closing all levels No data - blank\n\nWORKPLACE CLOSURES: 0 - No measures 1 - recommend closing (or work from home) 2 - require closing (or work from home) for some sectors or categories of workers 3 - require closing (or work from home) all but essential workplaces (eg grocery stores, doctors) No data - blank\n\nCANCEL PUBLIC EVENTS: 0- No measures 1 - Recommend cancelling 2 - Require cancelling No data - blank\n\nRESTRICTIONS ON GATHERINGS: 0 - No restrictions 1 - Restrictions on very large gatherings (the limit is above 1000 people) 2 - Restrictions on gatherings between 100-1000 people 3 - Restrictions on gatherings between 10-100 people 4 - Restrictions on gatherings of less than 10 people No data - blank\n\nCLOSE PUBLIC TRANSPORT: 0 - No measures 1 - Recommend closing (or significantly reduce volume\/route\/means of transport available) 2 - Require closing (or prohibit most citizens from using it)\n\nPUBLIC INFORMATION CAMPAIGNS: 0 -No COVID-19 public information campaign 1 - public officials urging caution about COVID-19 2 - coordinated public information campaign (e.g. across traditional and social media) No data - blank\n\nSTAY AT HOME: 0 - No measures 1 - recommend not leaving house 2 - require not leaving house with exceptions for daily exercise, grocery shopping, and \u2018essential\u2019 trips 3 - Require not leaving house with minimal exceptions (e.g. allowed to leave only once every few days, or only one person can leave at a time, etc.) No data - blank\n\nRESTRICTIONS ON INTERNAL MOVEMENT: 0 - No measures 1 - Recommend movement restriction 2 - Restrict movement\n\nINTERNATIONAL TRAVEL CONTROLS: 0 - No measures 1 - Screening 2 - Quarantine arrivals from high-risk regions 3 - Ban on high-risk regions 4 - Total border closure No data - blank\n\nTESTING POLICY 0 \u2013 No testing policy 1 \u2013 Only those who both (a) have symptoms AND (b) meet specific criteria (eg key workers, admitted to hospital, came into contact with a known case, returned from overseas) 2 \u2013 testing of anyone showing COVID-19 symptoms 3 \u2013 open public testing (eg \u201cdrive through\u201d testing available to asymptomatic people) No data\n\nCONTRACT TRACING 0 - No contact tracing 1 - Limited contact tracing - not done for all cases 2 - Comprehensive contact tracing - done for all cases No data https:\/\/ourworldindata.org\/grapher\/covid-stringency-index?tab=table&country=~LKA","3bb63dff":"europeandataportal.eu","0a877881":"economist.com","2862d3a1":"Das War's Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke "}}