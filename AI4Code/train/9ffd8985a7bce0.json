{"cell_type":{"8e9bc093":"code","bdc8517c":"code","105e9fc3":"code","9259e920":"code","b4cfdd68":"code","7a67da1d":"code","7f84097c":"code","35224b83":"code","e4cd2eab":"code","c17e3dab":"code","6fb7b8b2":"code","e5425943":"code","00b8cd59":"code","d227d2a0":"code","184c92ca":"code","d0e40d16":"code","1a257c75":"code","bc97976f":"code","e1d5381e":"code","0e5b9831":"code","a9047117":"code","452e385d":"code","27d273ad":"code","a52955ff":"code","d90e3bc5":"markdown"},"source":{"8e9bc093":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bdc8517c":"data=pd.read_csv(\"..\/input\/c02-emissions-country-wise-with-income-group\/Country wise CO2 emissions .csv\")","105e9fc3":"data","9259e920":"data.shape","b4cfdd68":"data.describe","7a67da1d":"#as in CO2 emissions dataset there is country name as well as region or world name we will just take country name.\ndata2=pd.read_csv(\"..\/input\/c02-emissions-country-wise-with-income-group\/country wise income group.csv\")","7f84097c":"data2","35224b83":"#merge to dataset based on country code to get just country data\nmerge = pd.merge(data,data2, on = \"Country Code\")\nmerge.shape","e4cd2eab":"#if region is NaN the name isn't country\nmerge = merge[pd.notnull(merge['Region'])]","c17e3dab":"merge.head(5)","6fb7b8b2":"merge.columns","e5425943":"merge = merge.drop(merge.columns[[65,68,69]],axis =1) \nmerge = merge.drop('Indicator Name', 1)\nmerge = merge.drop('Indicator Code',1)","00b8cd59":"merge.columns","d227d2a0":"merge.count()","184c92ca":"#as 2019  and 2020 has no data remove them\nmerge = merge.drop(['2019','2020'], 1)","d0e40d16":"merge.mean(axis=1)","1a257c75":"merge=merge[pd.notnull(merge.mean(axis=1))]","bc97976f":"merge.head(20)","e1d5381e":"import matplotlib.pyplot as plt\nimport plotly.graph_objects as go\n%matplotlib inline\n","0e5b9831":"x = merge[merge.columns[2:61]].mean().index\ny = merge[merge.columns[2:61]].mean()\n\n\n#x=df[\"Date\"]\n#y = df[\"Daily new confirmed cases\"]\n\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x=x,\n                    y = y,\n                    mode = \"lines+markers\",\n                    marker = dict(size = 10)\n                    ))\n\nfig.update_layout(title = dict(text = \"CO2 Emission per capita averaged in all countries\",\n                              font_size = 20\n                              ),\n                 yaxis = dict(title = \"Mean CO2 Emission (Metric tons\/capita)\"),\n\n\n)\n","a9047117":"merge.Region","452e385d":"#unique regions\nmerge.Region.unique()","27d273ad":"by_region = merge.groupby('Region').agg('mean')\nby_region['2018']","a52955ff":"plt.bar(range(len(by_region['2018'])),by_region['2018'].values)\nplt.xticks(range(len(by_region['2018'])), by_region['2018'].index,rotation=70)\nplt.ylabel('CO2 Emission (Metric ton per capita)')\nplt.title('Mean CO2 Emission by Region in 2018')\n","d90e3bc5":"# Plotting"}}