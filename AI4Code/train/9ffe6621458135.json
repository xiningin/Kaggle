{"cell_type":{"9364c5dd":"code","f60b083b":"code","73338edf":"code","509f3ba9":"code","f163d853":"code","9499d086":"code","f6907e27":"code","4bc24c9b":"code","d5298907":"code","f66bc102":"code","85d09ce0":"code","c1a14fe4":"code","f56d2657":"code","2971b4eb":"code","679e77ab":"code","0c0804a9":"code","75b78bf8":"code","4a66cb95":"code","53956804":"code","01550cbb":"code","9fdd9d0d":"code","cb2af55d":"code","7c953499":"code","3e0a8d07":"code","68b958d1":"code","2e651a18":"code","7cedbb34":"code","3ee45af7":"code","c2a7f6b6":"code","421f4b09":"code","f43cc4e1":"code","6df4e32f":"code","c2a6b106":"code","34c30912":"code","941e479a":"code","c51fa4bd":"code","5b11304c":"code","5f9490d7":"code","6613abb2":"code","08aa769d":"code","033a0ba5":"code","ce5be5cb":"code","3771ed1c":"code","95d699a8":"code","a3d6d2c8":"code","f6b5b16b":"code","a819544f":"code","a68de9ef":"code","09fdad28":"code","ab598a10":"code","435e4ce9":"code","54e87758":"code","0e5267f2":"code","c5259a28":"code","98185b59":"code","40a4f271":"code","9cc5ebda":"code","e797cfe2":"code","2de289f8":"code","83c144a6":"code","61896a2c":"code","a81e7d67":"code","6e8348cd":"code","b2e6c14a":"code","4e748547":"code","f1810e49":"code","54944b38":"code","f374e230":"code","b7e1fe0f":"markdown","3f727be7":"markdown","a9a24f04":"markdown","415352a9":"markdown","5d83439b":"markdown","712ce14c":"markdown","32ef19de":"markdown","0aaafc62":"markdown","30e13e3f":"markdown","64d09aa2":"markdown","5cd7edf9":"markdown","eeb62174":"markdown","77948746":"markdown","bc14a71a":"markdown","b3898433":"markdown","4f074aa8":"markdown","442fa18b":"markdown","b89d8a4f":"markdown","ad913177":"markdown","cb208090":"markdown","3e673049":"markdown"},"source":{"9364c5dd":"# Import data processing and data visualization libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","f60b083b":"# Read the csv file in pandas as a dataframe\ndf_city_temp = pd.read_csv('\/kaggle\/input\/daily-temperature-of-major-cities\/city_temperature.csv', dtype={\"Region\": str, \"Country\": str, \"State\": str, \"City\": str, \n                                                          \"Month\": int, \"Day\": int, \"Year\": int,\n                                                         \"AvgTemperature\": float})","73338edf":"# Access the first 5 rows of the dataframe\ndf_city_temp.head()","509f3ba9":"# Access the last 5 rows of the dataframe\ndf_city_temp.tail()","f163d853":"# Find the shape of the dataframe\ndf_city_temp.shape","9499d086":"# Find the information of the dataframe\ndf_city_temp.info()","f6907e27":"# Apply a quick statistical analysis on the dataframe\ndf_city_temp.describe()","4bc24c9b":"# remove the above information\ndf_city_temp = df_city_temp[df_city_temp['Year'] != 200]\ndf_city_temp = df_city_temp[df_city_temp['Year'] != 2020]","d5298907":"# Redo the descriptive statistics and find the shape\ndf_city_temp.describe()","f66bc102":"df_city_temp.shape","85d09ce0":"df_city_temp = df_city_temp[df_city_temp['Year'] != 201]","c1a14fe4":"# Redo the descriptive statistics\ndf_city_temp.describe()","f56d2657":"# Finding the missing temperatures in each country\nmissing_temp = pd.DataFrame(df_city_temp.loc[df_city_temp['AvgTemperature'] == -99, 'Country'].value_counts())\nmissing_temp['Total'] = df_city_temp.groupby('Country')['AvgTemperature'].count()\nmissing_temp['Percent_Missing'] = missing_temp.apply(lambda x: (x['Country']\/x['Total'])*100, axis=1)\nmissing_temp.sort_values(by=['Percent_Missing'], inplace=True, ascending=False)\nmissing_temp.head(5)","2971b4eb":"# Replace all -99 F by NaN\ndf_city_temp.loc[df_city_temp['AvgTemperature'] == -99, 'AvgTemperature'] = np.nan\n\n# Replace all -99 F by NaN\n# Replace NaN with the mean of the city then check to see that it has been successfull.\ndf_city_temp['AvgTemperature'] = df_city_temp['AvgTemperature'].fillna(df_city_temp.groupby(['City'])['AvgTemperature']\n                                                                       .transform('mean'))\ndf_city_temp['AvgTemperature'].isnull().sum()","679e77ab":"# Define a function that allows us to create a table of missing values in df_city_temp and their percentages in \n# descending order\ndef missing_values(data):\n    total = data.isnull().sum().sort_values(ascending=False)\n    percentage = (data.isnull().sum()\/data.isnull().count()).sort_values(ascending=False)\n    percentage_final = (round(percentage, 2) * 100)\n    total_percent = pd.concat(objs=[total, percentage_final], axis = 1, keys=['Total', '%'])\n    return total_percent","0c0804a9":"# Find all the missing values in the dataframe\nmissing_values(df_city_temp)","75b78bf8":"# I define a new table df-city_temp_US, which is basically the same dataframe. This is only for those interested in \n# working on US data.\ndf_city_temp_US = df_city_temp","4a66cb95":"# Changing the Year, Month and Day columns into a date-stamp.\ndate_data = pd.to_datetime(df_city_temp[['Year','Month', 'Day']], format='%Y%m%d', errors='coerce')\ndf_city_temp['Date'] = date_data","53956804":"# Access the first 5 rows\ndf_city_temp.head()","01550cbb":"# Fahrenheit to degrees Celcius then drop the original AvgTemperature in Fahrenheit's\ndf_city_temp['AvgTemperature_Celcius'] = round((df_city_temp['AvgTemperature'] - 32) * (5\/9), 3)\ndf_city_temp = df_city_temp.drop(['AvgTemperature'], axis = 1)","9fdd9d0d":"# Access the df_city_temp\ndf_city_temp.sample(10)","cb2af55d":"# Create a table to find the mean value for each region to 3 s.f.\nround(df_city_temp[['Region','AvgTemperature_Celcius']].groupby(['Region'], as_index=False).agg(np.mean), 3)","7c953499":"# Figure configuration\nfig = plt.figure(figsize=(18,10))\n\n# Using seaborn to visualize the average temperature for each region\nsns.barplot(x=\"Region\", y=\"AvgTemperature_Celcius\", data=df_city_temp, ci=None)\nplt.title(\"Average Temperature in Each Region\", size=20)\nplt.ylim(0, 30)\nplt.xlabel('Region', size=20)\nplt.ylabel('Average Temperature (C)', size=20)\nplt.xticks(rotation=10, size=15)\nplt.yticks(size=15)","3e0a8d07":"# Figure configuration\nplt.figure(figsize=(15,8))\n\n# Visualize the global average temperature\nsns.lineplot(x = 'Year', y = 'AvgTemperature_Celcius', data = df_city_temp, palette='hsv')\nplt.title('Global Average Temperatures', size=20)\nplt.ylabel('Average Temperature (\u00b0C)', size=15)\nplt.xlabel('')\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.ylim(15, 17)","68b958d1":"# Figure configuration\nplt.figure(figsize=(15,8))\n\n# Visualize average temperature for each region\nsns.lineplot(x = 'Year', y = 'AvgTemperature_Celcius', data = df_city_temp, hue=\"Region\")\nplt.title('Average Temperatures for all Regions', size=20)\nplt.ylabel('Average Temperature (\u00b0C)', size=15)\nplt.legend(loc='center left', bbox_to_anchor=(1.04, 0.5), ncol=1)\nplt.xlabel('')\nplt.xticks(size=15)\nplt.yticks(size=15)\nplt.ylim(8, 27)","2e651a18":"# Extract the monthly average temperatures to 3 s. f.\ndf_month_avg_temp = round(df_city_temp.groupby(['Month', 'Year'])['AvgTemperature_Celcius'].agg(np.mean)\n                          .reset_index().sort_values(by=['Year']), 3)","7cedbb34":"# Access the data above\ndf_month_avg_temp.head()","3ee45af7":"# Pivot the data\ndf_month_avg_temp_pivoted = pd.pivot_table(data= df_month_avg_temp, index='Month', values='AvgTemperature_Celcius', \n                                           columns='Year')","c2a7f6b6":"# Access the data above\ndf_month_avg_temp_pivoted.head()","421f4b09":"# Figure configuration\nplt.figure(figsize=(15,8))\n\n# Visualize the global glaverage temperature for each month each year\nsns.heatmap(data=df_month_avg_temp_pivoted, cmap='coolwarm', annot = True, fmt=\".1f\", annot_kws={'size':11})\nplt.xlabel('')\nplt.ylabel('Month', size=20)\nplt.title('Global Average Temperatures (\u00b0C)', size=20)\nplt.xticks(size=10)\nplt.yticks(size=15)","f43cc4e1":"# Create a table to find the mean value for the monthly average temperatures for each region to 3 s.f.\ndf_month_avg_temp_region = round(df_city_temp[['Month', 'Year','Region','AvgTemperature_Celcius']]\n                                 .groupby(['Region', 'Month', 'Year'])['AvgTemperature_Celcius'].agg(np.mean)\n                                 .reset_index().sort_values(by=['Year', 'Region']), 3)","6df4e32f":"# Access the data above\ndf_month_avg_temp_region.head()","c2a6b106":"# Create a list for all unique regions\nregions_list = df_month_avg_temp_region['Region'].unique().tolist()","34c30912":"# Access thelist\nregions_list","941e479a":"# Pivot te data to created separate pivoted dataframes for each region\ndf_Africa = pd.pivot_table(\n        data=df_month_avg_temp_region[df_month_avg_temp_region['Region'] == 'Africa'], \n                                       index='Month',values='AvgTemperature_Celcius',columns='Year')\ndf_Asia = pd.pivot_table(\n        data=df_month_avg_temp_region[df_month_avg_temp_region['Region'] == 'Asia'], \n                                       index='Month',values='AvgTemperature_Celcius',columns='Year')\ndf_Aus = pd.pivot_table(\n        data=df_month_avg_temp_region[df_month_avg_temp_region['Region'] == 'Australia\/South Pacific'], \n                                       index='Month',values='AvgTemperature_Celcius',columns='Year')\ndf_ME = pd.pivot_table(\n        data=df_month_avg_temp_region[df_month_avg_temp_region['Region'] == 'Middle East'], \n                                       index='Month',values='AvgTemperature_Celcius',columns='Year')\ndf_Europe = pd.pivot_table(\n        data=df_month_avg_temp_region[df_month_avg_temp_region['Region'] == 'Europe'], \n                                       index='Month',values='AvgTemperature_Celcius',columns='Year')\ndf_NA = pd.pivot_table(\n        data=df_month_avg_temp_region[df_month_avg_temp_region['Region'] == 'North America'], \n                                       index='Month',values='AvgTemperature_Celcius',columns='Year')\ndf_SA = pd.pivot_table(\n        data=df_month_avg_temp_region[df_month_avg_temp_region['Region'] == 'South\/Central America & Carribean'], \n                                       index='Month',values='AvgTemperature_Celcius',columns='Year')","c51fa4bd":"# Figure configuration\nfig = plt.figure(figsize=(25,15))\n\n# Provide the specifications and visualize the average temperature per month for each region\n\nfig.add_subplot(3,3,1)\nsns.heatmap(data=df_Africa, cmap='coolwarm', cbar_kws={'shrink': .5}, annot=True, annot_kws={'fontsize': 12}, vmin=5, vmax=35)\nplt.xlabel('')\nplt.ylabel('Month', size=15)\nplt.title('Africa (\u00b0C)', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\n\nfig.add_subplot(3,3,2)\nsns.heatmap(data=df_Asia, cmap='coolwarm',  cbar_kws={'shrink': .5}, annot=True, annot_kws={'fontsize': 12}, vmin=5, vmax=35)\nplt.xlabel('')\nplt.ylabel('Month', size=15)\nplt.title('Asia (\u00b0C)', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\n\nfig.add_subplot(3,3,3)\nsns.heatmap(data=df_Aus, cmap='coolwarm', cbar_kws={'shrink': .5}, annot=True, annot_kws={'fontsize': 12}, vmin=5, vmax=35)\nplt.xlabel('')\nplt.ylabel('Month', size=15)\nplt.title('Australia\/South Pacific (\u00b0C)', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\n\nfig.add_subplot(3,3,4)\nsns.heatmap(data=df_Europe, cmap='coolwarm', cbar_kws={'shrink': .5}, annot=True, annot_kws={'fontsize': 12}, vmin=5, vmax=35)\nplt.xlabel('')\nplt.ylabel('Month', size=15)\nplt.title('Europe (\u00b0C)', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\n\n\nfig.add_subplot(3,3,5)\nsns.heatmap(data=df_ME, cmap='coolwarm', cbar_kws={'shrink': .5}, annot=True, annot_kws={'fontsize': 12}, vmin=5, vmax=35)\nplt.xlabel('')\nplt.ylabel('Month', size=15)\nplt.title('Middle East (\u00b0C)', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\n\nfig.add_subplot(3,3,6)\nsns.heatmap(data=df_NA, cmap='coolwarm', cbar_kws={'shrink': .5}, annot=True, annot_kws={'fontsize': 12}, vmin=5, vmax=35)\nplt.xlabel('')\nplt.ylabel('Month', size=15)\nplt.title('North America', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\n\nfig.add_subplot(3,3,7)\nsns.heatmap(data=df_SA, cmap='coolwarm', cbar_kws={'shrink': .5}, annot=True, annot_kws={'fontsize': 12}, vmin=5, vmax=35)\nplt.xlabel('')\nplt.ylabel('Month', size=15)\nplt.title('South\/Central America & Carribean (\u00b0C)', size=15)\nplt.xticks(size=10)\nplt.yticks(size=10)\n\nplt.subplots_adjust(wspace = 0.5)\nplt.tight_layout()","5b11304c":"from IPython.display import display, HTML\n\nbase_html = \"\"\"\n<!DOCTYPE html>\n<html>\n  <head>\n  <script type=\"text\/javascript\" src=\"http:\/\/kozea.github.com\/pygal.js\/javascripts\/svg.jquery.js\"><\/script>\n  <script type=\"text\/javascript\" src=\"https:\/\/kozea.github.io\/pygal.js\/2.0.x\/pygal-tooltips.min.js\"\"><\/script>\n  <\/head>\n  <body>\n    <figure>\n      {rendered_chart}\n    <\/figure>\n  <\/body>\n<\/html>\n\"\"\"","5f9490d7":"# Install pygal\n!pip3 install pygal","6613abb2":"# Install pygal_maps_world\n!pip3 install pygal_maps_world","08aa769d":"# Import pygal and it's features\nimport pygal\nfrom pygal_maps_world.maps import World\nfrom pygal_maps_world.i18n import COUNTRIES\nfrom pygal.style import LightColorizedStyle, RotateStyle","033a0ba5":"# COUNTRIES is a dictionary of keys: values, print out the country_code (keys) and countries (values)\nfor country_code in sorted(COUNTRIES.keys()):\n    print(country_code, COUNTRIES[country_code])","ce5be5cb":"# Convert the dictionary into a dataframe of two columns\ndf_country_code = pd.DataFrame.from_dict(COUNTRIES.items())\ndf_country_code.columns = ['Code', 'Country']","3771ed1c":"# Access the first 5 rows to demonstrate proper conversion\ndf_country_code.head()","95d699a8":"# Set Country as the index\ndf_country_code = df_country_code.set_index('Country')\ndf_country_code.head()","a3d6d2c8":"# Create a new dataframe for that contains the date as the index and then drop the Month & Day\ndf_city_temp_ = df_city_temp.set_index('Country')\ndf_city_temp_ = df_city_temp_.drop([\"Month\",\"Day\"],axis = 1)\ndf_city_temp_.head()","f6b5b16b":"# Certain Countries are presented differenly. This corrects the few countries based on the df_country_code to \n# minimize the number of Nan.\ndf_city_temp_ = df_city_temp_.rename(index = {\"US\":\"United States\",\"Ivory Coast\":\"Cote d'Ivoire\",\n                                              \"South Korea\":\"Korea, Republic of\",\n                                              \"North Korea\": \"Korea, Democratic People's Republic of\",\n                                              \"Venezuela\": \"Venezuela, Bolivarian Republic of\", \n                                              \"Vietnam\": \"Viet Nam\", \"Taiwan\": \"Taiwan, Province of China\",\n                                              \"Macedonia\": \"Macedonia, the former Yugoslav Republic of\",\n                                              \"Tanzania\": \"Tanzania, United Republic of\",\n                                              \"Laos\": \"Lao People's Democratic Republic\",\n                                              \"Syria\": \"Syrian Arab Republic\",\n                                              \"Russia\": \"Russian Federation\", \n                                              \"Bolivia\": \"Bolivia, Plurinational State of\",\n                                              \"Equadon\": \"Ecuador\",\n                                              \"The Netherlands\": \"Netherlands\",\n                                              \"Serbia-Montenegro\": \"Serbia\",            \n                                              \"Myanmar (Burma)\":\"Myanmar\"})\ndf_city_temp_.head()","a819544f":"# Merge the two dataframes\ndf_countries_world_code = pd.merge(df_city_temp_, df_country_code, left_index = True , right_index = True , how = \"left\")\ndf_countries_world_code.head()","a68de9ef":"# Verify that the tail end of the data has also been modified to include the right country and code\ndf_countries_world_code.tail()","09fdad28":"# Find all the missing values in the dataframe\nmissing_values(df_countries_world_code)","ab598a10":"# Verify the United States has been chnaged appropriately\ndf_countries_world_code.loc['United States']","435e4ce9":"# Drop the State, since we are plotting the entire globe vs the United States. \ndf_countries_world_code_ = df_countries_world_code.drop([\"State\"],axis = 1)\ndf_countries_world_code_.head()","54e87758":"# Find all the missing values in the dataframe\nmissing_values(df_countries_world_code_)","0e5267f2":"# Reset the index of the dataframe\ndf_countries_world_code__ = df_countries_world_code_.reset_index()\ndf_countries_world_code__.tail()","c5259a28":"# Verify that df_countries_world_code__ will access the correct country format after the change above.\ndf_countries_world_code__.loc[df_countries_world_code__['Country'] == 'United States']","98185b59":"# Create a table to find the mean value for each year to 3 s.f.\ndf_countries_world_code__avg = round(df_countries_world_code__[['Country', 'Year', 'Code', 'AvgTemperature_Celcius']]\n                                     .groupby(['Country', 'Year', 'Code'], as_index=False).agg(np.mean), 3)","40a4f271":"# Access the first 5 rows\ndf_countries_world_code__avg.head()","9cc5ebda":"# Create a dictionary of all the countries and their codes\ncountry_code_dict = dict(zip(df_countries_world_code__avg['Country'], df_countries_world_code__['Code']))","e797cfe2":"# Print the dictionary\ncountry_code_dict","2de289f8":"# Make new tables for 1995, 2000, 2005, 2010, 2015 & 2019 in pandas\ndf_countries_world_1995 = df_countries_world_code__avg[df_countries_world_code__avg['Year'] == 1995]\ndf_countries_world_2000 = df_countries_world_code__avg[df_countries_world_code__avg['Year'] == 2000]\ndf_countries_world_2005 = df_countries_world_code__avg[df_countries_world_code__avg['Year'] == 2005]\ndf_countries_world_2010 = df_countries_world_code__avg[df_countries_world_code__avg['Year'] == 2010]\ndf_countries_world_2015 = df_countries_world_code__avg[df_countries_world_code__avg['Year'] == 2015]\ndf_countries_world_2019 = df_countries_world_code__avg[df_countries_world_code__avg['Year'] == 2019]\n\n# Just to double check that we can access the first 5 rows of each dataframe for 1995\n# change for the other years 2000, 2005, 2010, 2015 and 2019\ndf_countries_world_1995.head()","83c144a6":"# Create a dictionary of all the codes and their AvgTemperature_Celcius for 1995, 2000, 2005, 2010, 2015 & 2019\ncode_temp_dict_1995 = dict(zip(df_countries_world_1995['Code'], df_countries_world_1995['AvgTemperature_Celcius']))\ncode_temp_dict_2000 = dict(zip(df_countries_world_2000['Code'], df_countries_world_2000['AvgTemperature_Celcius']))\ncode_temp_dict_2005 = dict(zip(df_countries_world_2005['Code'], df_countries_world_2005['AvgTemperature_Celcius']))\ncode_temp_dict_2010 = dict(zip(df_countries_world_2010['Code'], df_countries_world_2010['AvgTemperature_Celcius']))\ncode_temp_dict_2015 = dict(zip(df_countries_world_2010['Code'], df_countries_world_2010['AvgTemperature_Celcius']))\ncode_temp_dict_2019 = dict(zip(df_countries_world_2019['Code'], df_countries_world_2019['AvgTemperature_Celcius']))","61896a2c":"len(code_temp_dict_1995), len(code_temp_dict_2000), len(code_temp_dict_2005), len(code_temp_dict_2010), len(code_temp_dict_2019)","a81e7d67":"# Group the temperatures into five categories for 1995.\n\ncc_temp_1_1995, cc_temp_2_1995, cc_temp_3_1995, cc_temp_4_1995, cc_temp_5_1995 = {}, {}, {}, {}, {}\n    \nfor cc, temp in code_temp_dict_1995.items():\n    if temp < 0:\n        cc_temp_1_1995[cc] = temp\n    elif 0 <= temp < 10:\n        cc_temp_2_1995[cc] = temp\n    elif 10 <= temp < 20:\n        cc_temp_3_1995[cc] = temp\n    elif 20 <= temp < 30:\n        cc_temp_4_1995[cc] = temp\n    else:\n        cc_temp_5_1995[cc] = temp\n        \n# Find the length of each of the categories\nlen(cc_temp_1_1995), len(cc_temp_2_1995), len(cc_temp_3_1995), len(cc_temp_4_1995), len(cc_temp_5_1995)","6e8348cd":"# Group the temperatures into five categories for 2000.\n\ncc_temp_1_2000, cc_temp_2_2000, cc_temp_3_2000, cc_temp_4_2000, cc_temp_5_2000 = {}, {}, {}, {}, {}\n    \nfor cc, temp in code_temp_dict_2000.items():\n    if temp < 0:\n        cc_temp_1_2000[cc] = temp\n    elif 0 <= temp < 10:\n        cc_temp_2_2000[cc] = temp\n    elif 10 <= temp < 20:\n        cc_temp_3_2000[cc] = temp\n    elif 20 <= temp < 30:\n        cc_temp_4_2000[cc] = temp\n    else:\n        cc_temp_5_2000[cc] = temp\n        \n# Find the length of each of the categories\nlen(cc_temp_1_2000), len(cc_temp_2_2000), len(cc_temp_3_2000), len(cc_temp_4_2000), len(cc_temp_5_2000)","b2e6c14a":"# Group the temperatures into five categories for 2005.\n\ncc_temp_1_2005, cc_temp_2_2005, cc_temp_3_2005, cc_temp_4_2005, cc_temp_5_2005 = {}, {}, {}, {}, {}\n    \nfor cc, temp in code_temp_dict_2005.items():\n    if temp < 0:\n        cc_temp_1_2005[cc] = temp\n    elif 0 <= temp < 10:\n        cc_temp_2_2005[cc] = temp\n    elif 10 <= temp < 20:\n        cc_temp_3_2005[cc] = temp\n    elif 20 <= temp < 30:\n        cc_temp_4_2005[cc] = temp\n    else:\n        cc_temp_5_2005[cc] = temp\n        \n# Find the length of each of the categories\nlen(cc_temp_1_2005), len(cc_temp_2_2005), len(cc_temp_3_2005), len(cc_temp_4_2005), len(cc_temp_5_2005)","4e748547":"# Group the temperatures into five categories for 2010.\n\ncc_temp_1_2010, cc_temp_2_2010, cc_temp_3_2010, cc_temp_4_2010, cc_temp_5_2010 = {}, {}, {}, {}, {}\n    \nfor cc, temp in code_temp_dict_2010.items():\n    if temp < 0:\n        cc_temp_1_2010[cc] = temp\n    elif 0 <= temp < 10:\n        cc_temp_2_2010[cc] = temp\n    elif 10 <= temp < 20:\n        cc_temp_3_2010[cc] = temp\n    elif 20 <= temp < 30:\n        cc_temp_4_2010[cc] = temp\n    else:\n        cc_temp_5_2010[cc] = temp\n        \n# Find the length of each of the categories\nlen(cc_temp_1_2010), len(cc_temp_2_2010), len(cc_temp_3_2010), len(cc_temp_4_2010), len(cc_temp_5_2010)","f1810e49":"# Group the temperatures into five categories for 2015.\n\ncc_temp_1_2015, cc_temp_2_2015, cc_temp_3_2015, cc_temp_4_2015, cc_temp_5_2015 = {}, {}, {}, {}, {}\n    \nfor cc, temp in code_temp_dict_2015.items():\n    if temp < 0:\n        cc_temp_1_2015[cc] = temp\n    elif 0 <= temp < 10:\n        cc_temp_2_2015[cc] = temp\n    elif 10 <= temp < 20:\n        cc_temp_3_2015[cc] = temp\n    elif 20 <= temp < 30:\n        cc_temp_4_2015[cc] = temp\n    else:\n        cc_temp_5_2015[cc] = temp\n        \n# Find the length of each of the categories\nlen(cc_temp_1_2015), len(cc_temp_2_2015), len(cc_temp_3_2015), len(cc_temp_4_2015), len(cc_temp_5_2015)","54944b38":"# Group the temperatures into five categories for 2019.\n\ncc_temp_1_2019, cc_temp_2_2019, cc_temp_3_2019, cc_temp_4_2019, cc_temp_5_2019 = {}, {}, {}, {}, {}\n    \nfor cc, temp in code_temp_dict_2019.items():\n    if temp < 0:\n        cc_temp_1_2019[cc] = temp\n    elif 0 <= temp < 10:\n        cc_temp_2_2019[cc] = temp\n    elif 10 <= temp < 20:\n        cc_temp_3_2019[cc] = temp\n    elif 20 <= temp < 30:\n        cc_temp_4_2019[cc] = temp\n    else:\n        cc_temp_5_2019[cc] = temp\n        \n# Find the length of each of the categories\nlen(cc_temp_1_2019), len(cc_temp_2_2019), len(cc_temp_3_2019), len(cc_temp_4_2019), len(cc_temp_5_2019)","f374e230":"# Generate Pygal visualizations for all years\n# Interactive maps are saved in te folders.\n# Year 1995\nwm_style = RotateStyle('#336699', base_style=LightColorizedStyle)\nwm = World(style=wm_style)\nwm.title = 'World Temperatures in 1995, by Country'\nwm.add('T < 0 \u00b0C', cc_temp_1_1995)\nwm.add('0 <= T < 10 \u00b0C', cc_temp_2_1995)\nwm.add('10 <= T < 20 \u00b0C', cc_temp_3_1995)\nwm.add('20 <= T < 30 \u00b0C', cc_temp_4_1995)\nwm.add('T < 30 \u00b0C', cc_temp_5_1995)\n\nwm.add('1995', code_temp_dict_1995)\n\nwm.render_to_file('world_temperatures_1995.svg')\n\n# Year 2000\nwm_style = RotateStyle('#336699', base_style=LightColorizedStyle)\nwm = World(style=wm_style)\nwm.title = 'World Temperatures in 2000, by Country'\nwm.add('T < 0 \u00b0C', cc_temp_1_2000)\nwm.add('0 <= T < 10 \u00b0C', cc_temp_2_2000)\nwm.add('10 <= T < 20 \u00b0C', cc_temp_3_2000)\nwm.add('20 <= T < 30 \u00b0C', cc_temp_4_2000)\nwm.add('T < 30 \u00b0C', cc_temp_5_2000)\n\nwm.add('2000', code_temp_dict_2000)\n\nwm.render_to_file('world_temperatures_2000.svg')\n\n#Year 2005\nwm_style = RotateStyle('#336699', base_style=LightColorizedStyle)\nwm = World(style=wm_style)\nwm.title = 'World Temperatures in 2005, by Country'\nwm.add('T < 0 \u00b0C', cc_temp_1_2005)\nwm.add('0 <= T < 10 \u00b0C', cc_temp_2_2005)\nwm.add('10 <= T < 20 \u00b0C', cc_temp_3_2005)\nwm.add('20 <= T < 30 \u00b0C', cc_temp_4_2005)\nwm.add('T < 30 \u00b0C', cc_temp_5_2005)\n\nwm.add('2005', code_temp_dict_2005)\n\nwm.render_to_file('world_temperatures_2005.svg')\n\n#Year 2010\nwm_style = RotateStyle('#336699', base_style=LightColorizedStyle)\nwm = World(style=wm_style)\nwm.title = 'World Temperatures in 2010, by Country'\nwm.add('T < 0 \u00b0C', cc_temp_1_2010)\nwm.add('0 <= T < 10 \u00b0C', cc_temp_2_2010)\nwm.add('10 <= T < 20 \u00b0C', cc_temp_3_2010)\nwm.add('20 <= T < 30 \u00b0C', cc_temp_4_2010)\nwm.add('T < 30 \u00b0C', cc_temp_5_2010)\n\nwm.add('2010', code_temp_dict_2010)\n\nwm.render_to_file('world_temperatures_2010.svg')\n\n#Year 2015\nwm_style = RotateStyle('#336699', base_style=LightColorizedStyle)\nwm = World(style=wm_style)\nwm.title = 'World Temperatures in 2015, by Country'\nwm.add('T < 0 \u00b0C', cc_temp_1_2015)\nwm.add('0 <= T < 10 \u00b0C', cc_temp_2_2015)\nwm.add('10 <= T < 20 \u00b0C', cc_temp_3_2015)\nwm.add('20 <= T < 30 \u00b0C', cc_temp_4_2015)\nwm.add('T < 30 \u00b0C', cc_temp_5_2015)\n\nwm.add('2015', code_temp_dict_2015)\n\nwm.render_to_file('world_temperatures_2015.svg')\n\n#Year 2019\nwm_style = RotateStyle('#336699', base_style=LightColorizedStyle)\nwm = World(style=wm_style)\nwm.title = 'World Temperatures in 2019, by Country'\nwm.add('T < 0 \u00b0C', cc_temp_1_2019)\nwm.add('0 <= T < 10 \u00b0C', cc_temp_2_2019)\nwm.add('10 <= T < 20 \u00b0C', cc_temp_3_2019)\nwm.add('20 <= T < 30 \u00b0C', cc_temp_4_2019)\nwm.add('T < 30 \u00b0C', cc_temp_5_2019)\n\nwm.add('2019', code_temp_dict_2019)\n\nwm.render_to_file('world_temperatures_2019.svg')","b7e1fe0f":"# d) Coverting fahrenheit to celcius","3f727be7":"Now we notice that the minimum year is 201, which again makes no sense. This means I need to remove this and now the maximum is 2019, which is good. Also, the shape of the dataset decreased to (2867428) from (2906327).\n","a9a24f04":"# b) Determine the average temperature globally","415352a9":"We still have cannot find the code for 2% of the data, when comparing country_code_dict with Pygal's COUNTRIES. That's fine for now.\n","5d83439b":"# III. Visualizing the data globally\n# a) Using Pygal to display the global average temperature","712ce14c":"# c) Changing columns date, year and month to a date-stamp","32ef19de":"# e) Determine the average temperature for each month for each region","0aaafc62":"**Thank you everone, please vote and provide your comments and feedbacks. I would really appreciate that.**","30e13e3f":"# I. Cleaning the dataset\n# a) Removing ambiguous years","64d09aa2":"The first thing I will do is remove year 200 and since there is not enough data in 2020. I will remove that as well.","5cd7edf9":"From the above heatmaps we can clearly see that both Afria and South\/Central America & Carribean have relatively warm temperatures throughout the year. Furthermore, you can also see which months are warmer in different regions. For example, Austrialia appears to be the warmest between January to March and between October to December; whereas Europe is warmest between June to August. Also, the Middle East shows very warm temperatures between June and August. Finally, Asia appears to start warming up between April to September.\n","eeb62174":"Great! Now the year spans from 1995 to 2019. Next, let me deal with the -99 F.","77948746":"# d) Determine the average temperature as function of time for each month","bc14a71a":"Several countries have missing temperatures, so now I will replace -99 F by NaN.","b3898433":"# c) Determine the average temperatures for each region","4f074aa8":"# II. Exploring the data\n# a) Determining the average temperature for each region","442fa18b":"# Exploring the Temperature Data\n\nWritten by UbuntuZAR.\n","b89d8a4f":"Here, it is ideal to represent the change in average temperature over time for each month. The best way to present this data is as a heatmap.","ad913177":"It appears that the only missing information is located in the column \"State\". This is irrelevant for all other countries except USA. I will define a seperate function for USA analysis only (for those wo are interested)","cb208090":"From the above I noticed that the (1) temperature is in Fahrenheit, which I will need to convert to Celcius for my purpose. (2) There is a minimum temperature of -99 F, which I need to do something about. (3) Finally, the minimum year is 200, which may be an error.\n","3e673049":"# b) Dealing with ambiguous temperatures"}}