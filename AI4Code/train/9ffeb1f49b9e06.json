{"cell_type":{"bbce4d6e":"code","cc9a14b3":"code","9eb87b78":"code","594fbfcc":"code","604707e2":"code","0ee66f06":"code","3f88e43e":"code","10557f25":"code","9780833b":"code","98f101de":"code","c885e232":"code","491ef4d8":"code","566c15ac":"code","a30e18e3":"code","dd5d9c8f":"code","69f0029c":"code","2042ab2d":"code","33612610":"code","46d77480":"code","66d9ba68":"code","321a8b61":"code","fb946ade":"code","876f5464":"code","fa328cf4":"code","8a97bc8d":"code","608c6978":"markdown","b929ff69":"markdown","c662b658":"markdown","baa9c4fa":"markdown","f9da4f0b":"markdown","3d145b66":"markdown","a468c066":"markdown"},"source":{"bbce4d6e":"import numpy as np\nimport pandas as pd\nimport matplotlib as plt\nimport seaborn as sns\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)","cc9a14b3":"data = pd.read_csv('..\/input\/iris-dataset\/IRIS.csv')","9eb87b78":"data.columns","594fbfcc":"data","604707e2":"shuffled_data = data.sample(frac = 1)","0ee66f06":"shuffled_data.head()","3f88e43e":"X= shuffled_data.drop('species', axis =1)\nY = shuffled_data['species']","10557f25":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, Y_train, Y_test = train_test_split (X, Y, test_size = 0.2, random_state = 0)","9780833b":"from sklearn import neighbors, datasets\nimport pylab as pl\n\n# import some data to play with\niris = datasets.load_iris()\nX = iris.data[:, :2] # we only take the first two features. \nY = iris.target\n\n\nh = .02 # step size in the mesh\n\nknn=neighbors.KNeighborsClassifier()\n\n# we create an instance of Neighbours Classifier and fit the data.\nknn.fit(X, Y)\n\n# Plot the decision boundary. For that, we will asign a color to each\n# point in the mesh [x_min, m_max]x[y_min, y_max].\nx_min, x_max = X[:,0].min() - .5, X[:,0].max() + .5\ny_min, y_max = X[:,1].min() - .5, X[:,1].max() + .5\nxx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))\nZ = knn.predict(np.c_[xx.ravel(), yy.ravel()])\n\n# Put the result into a color plot\nZ = Z.reshape(xx.shape)\npl.figure(1, figsize=(4, 3))\npl.set_cmap(pl.cm.Paired)\npl.pcolormesh(xx, yy, Z)\n\n# Plot also the training points\npl.scatter(X[:,0], X[:,1],c=Y )\npl.xlabel('Sepal length')\npl.ylabel('Sepal width')\n\npl.xlim(xx.min(), xx.max())\npl.ylim(yy.min(), yy.max())\npl.xticks(())\npl.yticks(())\n\npl.show()","98f101de":"from sklearn.neighbors import KNeighborsClassifier\nknn_model =  KNeighborsClassifier(n_neighbors = 3)","c885e232":"knn_model.fit(X_train, Y_train)","491ef4d8":"y_pred = knn_model.predict(X_test)","566c15ac":"y_pred","a30e18e3":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(Y_test, y_pred)","dd5d9c8f":"# Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(Y_test, y_pred)# Recall","69f0029c":"from sklearn.metrics import recall_score\nrecall_score(Y_test, y_pred, average=None)# Precision","2042ab2d":"from sklearn.metrics import precision_score\nprecision_score(Y_test, y_pred, average=None)","33612610":"#SVC","46d77480":"from sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', random_state = 0)\nclassifier.fit(X_train, Y_train)","66d9ba68":"y_predSVC = classifier.predict(X_test)","321a8b61":"y_predSVC","fb946ade":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(Y_test, y_predSVC)","876f5464":"# Accuracy\nfrom sklearn.metrics import accuracy_score\naccuracy_score(Y_test, y_predSVC)# Recall","fa328cf4":"from sklearn.metrics import recall_score\nrecall_score(Y_test, y_predSVC, average=None)# Precision","8a97bc8d":"from sklearn.metrics import precision_score\nprecision_score(Y_test, y_predSVC, average=None)","608c6978":"After viewing the data, I saw that the data was not shuffled, which would have caused problems when I split the data into test and training sets.","b929ff69":"The above code was used to create a decision boundary for the data. From here all you need to do is call the algorithms and use them to make predictions just as I did below.","c662b658":"After that you will have to import the dataset, since I saved my dataset on my device, I just have to run this simple command.","baa9c4fa":"Now I just removed the label column and saved the remaining columns in X dataframe, The labels are saved in Y.","f9da4f0b":"data.columns will help me see all the columns that are part of the data.","3d145b66":"Performing train test split.","a468c066":"The first thing that you need to do is import the most basic Python libraries. I have also used the pd.set_option code to help display more rows and columns as output."}}