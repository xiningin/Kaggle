{"cell_type":{"7ac23eeb":"code","782f5a8e":"code","248320c2":"code","b0f1877d":"code","13664938":"code","fe86e279":"code","26fb19e8":"code","3c2016c3":"code","7e1f343c":"code","867676b2":"code","b7126cb4":"code","84f5e4f4":"code","4944ec7c":"code","6cc052c8":"code","e0d6b91c":"code","25e710d6":"code","0be423b6":"code","41f91a9a":"code","e31b88f7":"code","d9c7d930":"code","6569d1d3":"code","3d5fa0f8":"code","5a1d727e":"code","7f249ce8":"code","b0855271":"code","bcadb22f":"code","d6aae849":"code","3436a491":"code","81ce1f36":"code","6dbbb5dd":"code","81555798":"code","49b8bb46":"code","f9b22052":"code","da6e0600":"code","f2332238":"code","3e631a93":"code","a1482427":"code","8c190425":"code","58bf6590":"code","2589b724":"code","befd00f0":"code","c7fe9ff3":"code","da3c39f2":"code","af87a868":"code","9a359e49":"code","27b1dddf":"code","7e9c53d5":"code","88ed8b44":"code","78aad0d4":"code","d6a5b81c":"code","9ab152af":"code","476d19a1":"code","a6e61879":"code","d04dd790":"code","c28ccbf9":"code","6f5e532e":"markdown","8ca8bd94":"markdown","6b0a4c9b":"markdown","c072ab96":"markdown","eb6d7810":"markdown","2805af3f":"markdown","77e5f612":"markdown","15a770e8":"markdown","573e02a4":"markdown","d630a9c9":"markdown","58808fcf":"markdown","6f4de301":"markdown","96969ade":"markdown","0b89d55d":"markdown","1dab0bbf":"markdown"},"source":{"7ac23eeb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","782f5a8e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","248320c2":"train = pd.read_csv('..\/input\/bank-loan2\/madfhantr.csv')\ntest = pd.read_csv('..\/input\/bank-loan2\/madhante.csv')\ntrain\n","b0f1877d":"test","13664938":"train.describe()","fe86e279":"plt.figure(figsize=(7,6))\nsns.heatmap(train.isnull())","26fb19e8":"plt.figure(figsize=(7,6))\nsns.heatmap(test.isnull())","3c2016c3":"train.isnull().sum()","7e1f343c":"test.isnull().sum()","867676b2":"def impute_nan(variable,df):\n    most_frequent_category = df[variable].value_counts().index[0]\n    df[variable].fillna(most_frequent_category,inplace=True)\n       \n    \n\n    ","b7126cb4":"train_missing_categorical = ['Gender','Married','Dependents','Self_Employed','Credit_History']\nfor variable in train_missing_categorical:\n    impute_nan(variable,train)","84f5e4f4":"test_missing_categorical = ['Gender','Dependents','Self_Employed','Credit_History']\nfor variable in test_missing_categorical:\n    impute_nan(variable,test)","4944ec7c":"train_cont_missing = ['LoanAmount','Loan_Amount_Term']\nfor variable in train_cont_missing:\n    train[variable].fillna(train[variable].median(),inplace=True)","6cc052c8":"test_cont_missing = ['LoanAmount','Loan_Amount_Term']\nfor variable in test_cont_missing:\n    test[variable].fillna(train[variable].median(),inplace=True)","e0d6b91c":"sns.heatmap(train.isnull())","25e710d6":"sns.heatmap(test.isnull())","0be423b6":"sns.pairplot(train,palette = 'coolwarm')","41f91a9a":"sns.boxplot(x='Gender',y='LoanAmount',data = train)","e31b88f7":"sns.boxplot(x='Gender',y='LoanAmount',hue='Married',data = train,palette = 'coolwarm')","d9c7d930":"gender = pd.get_dummies(train['Gender'],drop_first=True)","6569d1d3":"test_gender = pd.get_dummies(test['Gender'],drop_first=True)","3d5fa0f8":"married =pd.get_dummies(train['Married'],drop_first=True)\nmarried.rename(columns={'Yes':'Married'},inplace=True)","5a1d727e":"test_married= pd.get_dummies(test['Married'],drop_first=True)\ntest_married.rename(columns={'Yes':'Married'},inplace=True)","7f249ce8":"credit_hist = pd.get_dummies(train['Credit_History'],drop_first=True)\ncredit_hist.rename(columns={1.0:'Credit_History_1'},inplace=True)","b0855271":"test_credit_hist = pd.get_dummies(test['Credit_History'],drop_first=True)\ntest_credit_hist.rename(columns={1.0:'Credit_History_1'},inplace=True)","bcadb22f":"dependents = pd.get_dummies(train['Dependents'],drop_first=True)","d6aae849":"test_dependents = pd.get_dummies(test['Dependents'],drop_first=True)","3436a491":"edu = pd.get_dummies(train['Education'],drop_first=True)","81ce1f36":"test_edu = pd.get_dummies(test['Education'],drop_first=True)","6dbbb5dd":"self_emp = pd.get_dummies(train['Self_Employed'],drop_first=True)","81555798":"test_self_emp = pd.get_dummies(test['Self_Employed'],drop_first=True)","49b8bb46":"prop_ar = pd.get_dummies(train['Property_Area'],drop_first=True)\ntest_prop_ar = pd.get_dummies(test['Property_Area'],drop_first=True)","f9b22052":"print(train.shape)\nprint('\\n')\nprint(test.shape)","da6e0600":"train_final = pd.concat([train,gender,married,credit_hist,dependents,edu,self_emp,prop_ar],axis=1)\ntest_final =  pd.concat([test,test_gender,test_married,test_credit_hist,test_dependents,test_edu,test_self_emp,test_prop_ar],axis=1)","f2332238":"train_final.columns","3e631a93":"train_final.drop(['Loan_ID','Gender', 'Married', 'Dependents', 'Education','Self_Employed','Credit_History', 'Property_Area'],axis=1,inplace=True)\ntest_final.drop(['Loan_ID', 'Gender', 'Married', 'Dependents', 'Education','Self_Employed','Credit_History', 'Property_Area'],axis=1,inplace=True)","a1482427":"train_final.head(5)","8c190425":"test.tail()","58bf6590":"X = train_final.drop('Loan_Status',axis=1)\ny = train_final['Loan_Status']","2589b724":"from sklearn.model_selection import train_test_split","befd00f0":"\n## Hyperparameter optimization using RandomizedSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nimport xgboost","c7fe9ff3":"## Hyper Parameter Optimization\n\nparams={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    \n}","da3c39f2":"classifier = xgboost.XGBClassifier()","af87a868":"random_search=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","9a359e49":"random_search.fit(X,y)","27b1dddf":"random_search.best_estimator_","7e9c53d5":"classifier = xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.5, gamma=0.2, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.2, max_delta_step=0, max_depth=5,\n              min_child_weight=7, monotone_constraints='()',\n              n_estimators=100, n_jobs=0, num_parallel_tree=1, random_state=0,\n              reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)","88ed8b44":"classifier.fit(X,y)","78aad0d4":"\nfrom sklearn.model_selection import cross_val_score\nscore=cross_val_score(classifier,X,y,cv=10)\nscore","d6a5b81c":"score.mean()","9ab152af":"from sklearn.metrics import accuracy_score","476d19a1":"result = classifier.predict(test_final)","a6e61879":"result","d04dd790":"submission = pd.DataFrame()\nsubmission['Loan_ID'] = test.Loan_ID","c28ccbf9":"submission['Loan_Status'] = result\nsubmission.Loan_Status.value_counts()\n","6f5e532e":"2.Data Visualization","8ca8bd94":"There is a low significant increase in the loan amounts in married costumers than the unmarried once.","6b0a4c9b":"![image.png](attachment:image.png)","c072ab96":"# Model Training","eb6d7810":"For the continuos data column, lets replace the null values with respective Median assuming that the null data in both the columns - Loan Amount and Loan Amount term is MCAR(missing completly at random) since the company may have lost this data or maybe while typing out, there may have been unintended omition.","2805af3f":"# Feature Engineering","77e5f612":"We have eliminated all the null data!","15a770e8":"We will replace the missing values of each of the the categorical columns with its most frequent class.","573e02a4":"![image.png](attachment:image.png)","d630a9c9":"1. Handling the missing values.","58808fcf":"# Exploratory Data Anaysis","6f4de301":"There is quite much difference in the loan amount taken by the males than the females. The company should introduce some schemes to increase the loan amounts opted by their female costumers.","96969ade":"One Hot Encodding","0b89d55d":"![image.png](attachment:image.png)","1dab0bbf":"**HyperParameter Optimization in XGBoost**"}}