{"cell_type":{"1521b701":"code","227a0ebf":"code","4499d354":"code","d6c7488b":"code","d48c744a":"code","4706e042":"code","054cb2da":"code","055e8aa6":"code","4e678be1":"markdown","5c6d55e5":"markdown","f94473f2":"markdown","7942303d":"markdown","ee371927":"markdown","87e7f09c":"markdown"},"source":{"1521b701":"import tensorflow as tf\nfrom tensorflow.python import keras\n\nprint('Tensorflow Version: ', tf.__version__)\nprint('Keras Version: ', keras.__version__)","227a0ebf":"from tensorflow.python.keras.applications import VGG16\nimport os\nimport numpy as np\nfrom tensorflow.python.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.python.keras import models\nfrom tensorflow.python.keras import layers\nfrom tensorflow.python.keras import optimizers\n\ndef get_model():\n    model = models.Sequential()\n    conv_base=VGG16(weights='imagenet',include_top=False,input_shape=(100,100,3))\n    model.add(conv_base)\n    model.add(layers.Flatten())\n    model.add(layers.Dense(512, activation='relu'))\n    model.add(layers.Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy',optimizer=optimizers.Adam(lr=1e-4),metrics=['accuracy'])\n    return model","4499d354":"image_height = 100\nimage_width = 100\nbatch_size = 4\nno_of_epochs  = 10","d6c7488b":"from tqdm import tqdm\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport os\nimport cv2\n%matplotlib inline\n\nDATADIR = '\/kaggle\/input\/pulmonary-chest-xray-abnormalities\/ChinaSet_AllFiles\/ChinaSet_AllFiles\/CXR_png'\ndata=[]\nfor img in tqdm(os.listdir(DATADIR)):\n    try:\n        img_array = cv2.imread(os.path.join(DATADIR,img))\n        img_array = cv2.resize(img_array, (image_height, image_width))\n        img_array = cv2.cvtColor(img_array, cv2.COLOR_BGR2RGB)        \n        img_array = img_array.astype(np.float32)\/255.\n        if img[-5]=='0':\n            data.append([img_array, 0])\n        else:\n            data.append([img_array, 1])\n    except Exception as e:   \n            pass\nprint(len(data))","d48c744a":"import random\n\nrandom.shuffle(data)\nfor sample in data[:10]:\n    print(sample[1])","4706e042":"X = []\ny = []\n\nfor features,label in data:\n    X.append(features)\n    y.append(label)\n\nX = np.array(X).reshape(-1, image_width, image_height, 3)\nprint(X.shape)","054cb2da":"k=10\nnum_validation_samples=len(X)\/\/k\nvalidation_scores=[]\nfor fold in range(k):\n    validation_data=X[num_validation_samples*fold:num_validation_samples*(fold+1)]\n    validation_labels=y[num_validation_samples*fold:num_validation_samples*(fold+1)]\n    if fold==0:\n        training_data=X[num_validation_samples*(fold+1):]\n        training_labels=y[num_validation_samples*(fold+1):]    \n    else:\n        training_data=np.append(X[:num_validation_samples*fold], X[num_validation_samples*(fold+1):],axis=0)\n        training_labels=np.append(y[:num_validation_samples*fold], y[num_validation_samples*(fold+1):],axis=0)\n    model=get_model()\n    model.fit(training_data,training_labels,batch_size=batch_size,epochs=no_of_epochs) # 50 epochs per model\n    validation_score=model.evaluate(validation_data,validation_labels)\n    validation_scores.append(validation_score[1])","055e8aa6":"print('Average Validation Score: ', np.average(validation_scores))","4e678be1":"## Model Setup","5c6d55e5":"# Tuberculosis Diagnosis using VGG16 based feature extractor and a custom classifier\nThis notebook is written and executed by **Dr Raheel Siddiqi** on *13-10-2019*. The notebook presents an experiment to classify X-ray images as 'NORMAL' or 'containing manifestation of Tuberculosis (TB)' i.e. it is a binary classification problem. Transfer Learning is used to exploit the feature extractor of the *VGG16* pre-trained model. The dataset used is: [**China Set - The Shenzhen set - Chest X-ray Database**](https:\/\/www.kaggle.com\/kmader\/pulmonary-chest-xray-abnormalities). 10-fold cross validation is used to evaluate the model.","f94473f2":"## Dataset Preparation","7942303d":"## Average Validation Score","ee371927":"## 10-Fold Cross Validation","87e7f09c":"## TensorFlow and Keras version used"}}