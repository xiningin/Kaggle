{"cell_type":{"7a1afbd9":"code","73b1d104":"code","873da7f9":"code","5ba3cc68":"code","4f14042b":"code","83154440":"code","8fdffd92":"code","e2ba2d69":"code","0d0a28a3":"code","0e8a46d6":"code","47637a0a":"code","ea409cd5":"code","1ef0a357":"code","d36e4f2e":"code","1c2ab708":"code","9518bd87":"code","5adf0af6":"code","b235366a":"code","c6c9b3fe":"code","8d6ced23":"code","48bc5e77":"code","65dee811":"code","ab28c7e3":"code","d1383733":"markdown","2a1a45f1":"markdown","e618a40c":"markdown","fe9c8e25":"markdown","259bf991":"markdown","db04199d":"markdown","d9806b8d":"markdown","84f9bef1":"markdown","338ff00a":"markdown","f296802e":"markdown","f1e0e397":"markdown","2ee05695":"markdown","d9ec4386":"markdown"},"source":{"7a1afbd9":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport warnings\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\n\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix, r2_score, roc_curve, roc_auc_score","73b1d104":"warnings.filterwarnings(\"ignore\")","873da7f9":"data = pd.read_csv(\"..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv\")\ndata.head()","5ba3cc68":"print(\"Shape:\")\nprint(data.shape)\nprint(\"-\"*100)\nprint(\"Columns Name:\")\ncolumns = data.columns\nprint(columns)\nprint(\"-\"*100)\nprint(\"Data Information:\")\ndata.info()\nprint(\"-\"*100)\nprint(\"Data Description: \")\nprint(data.describe())\nprint(\"-\"*100)\nprint(\"Counting Null Values:\")\nprint(data.isnull().sum())\nprint(\"-\"*100)\nprint(\"Data correlation: \")\nprint(data.corr())\nprint(\"-\"*100)","4f14042b":"figure = plt.figure(figsize=(10,8))\nsns.heatmap(data.corr(method=\"pearson\"),annot=True,cmap='YlGnBu_r', vmin=-1, vmax=+1)\nplt.title(\"PEARSON\")\nplt.xlabel(\"COLUMNS\")\nplt.ylabel(\"COLUMNS\")\nplt.show()\n","83154440":"data.hist(figsize=(20,20))\nplt.show()","8fdffd92":"sns.countplot(data[\"output\"])\nprint(data.groupby([\"output\"]).count())\n\n# 0 -> No Heart Disease, 1 -> Heart Disease","e2ba2d69":"sns.kdeplot(data[data['output']==1]['chol'],shade=True,color=\"orange\", label=\"Unwell\", alpha=.7)\nsns.kdeplot(data[data['output']==0]['chol'],shade=True,color=\"dodgerblue\", label=\"Healthy\", alpha=.7)\nplt.title('Cholesterol in mg\/d for both case')\nplt.show()","0d0a28a3":"plt.figure(figsize=(15,8))\nsns.heatmap(data)","0e8a46d6":"sns.pairplot(data, hue=\"output\")","47637a0a":"X = data.drop(\"output\",axis=1)\ny = data[\"output\"]","ea409cd5":"std_scl = StandardScaler()\n\nX = std_scl.fit_transform(X)\nprint(X)","1ef0a357":"plt.figure(figsize=(15,8))\nsns.heatmap(X)","d36e4f2e":"x_train,x_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)","1c2ab708":"lr = LogisticRegression(solver=\"liblinear\").fit(x_train,y_train)\ngnb = GaussianNB().fit(x_train,y_train)\nknnc = KNeighborsClassifier().fit(x_train,y_train)\ndtc = DecisionTreeClassifier(random_state=42).fit(x_train,y_train)\nrfc = RandomForestClassifier(random_state=42,verbose=False).fit(x_train,y_train)\nxgbc = XGBClassifier().fit(x_train,y_train)\ncatbc = CatBoostClassifier(verbose=False).fit(x_train,y_train)\n","9518bd87":"model_names = [lr,gnb,knnc,dtc,rfc,xgbc,catbc]","5adf0af6":"for model in model_names:\n    name = model.__class__.__name__\n    predict = model.predict(x_test)\n    CV = cross_val_score(model,x_test,y_test,cv=10,verbose=False).mean()\n    error = -cross_val_score(model,x_test,y_test,cv=10,scoring=\"neg_mean_squared_error\",verbose=False).mean()\n    print(name + \": \")\n    print(\"-\" * 50)\n    print(\"Accuracy Score: \",accuracy_score(y_test,predict))\n    print(\"Cross Validation Score: \",CV)\n    print(\"Error: \",np.sqrt(error))\n    print(\"R-square value: \",r2_score(y_test,predict))\n    print(\"Confusion matrix: \")\n    confu_matrix=confusion_matrix(y_test,predict)\n    plt.title(\"Confusion Matrix\", fontsize=10)\n    sns.heatmap(confu_matrix, annot=True)\n    plt.show()\n    print(\"-\" * 100)","b235366a":"df = pd.DataFrame(columns=[\"MODELS\",\"Accuracy\"])\nfor model in model_names:\n    name = model.__class__.__name__\n    predict = model.predict(x_test)\n    accuracy = accuracy_score(y_test,predict)\n    result = pd.DataFrame([[name,accuracy*100]],columns=[\"MODELS\",\"Accuracy\"])\n    df = df.append(result)\n    \nfigure = plt.figure(figsize=(20,8))   \nsns.barplot(x=\"Accuracy\",y=\"MODELS\",data=df,color=\"k\")\nplt.xlabel(\"ACCURACY\")\nplt.ylabel(\"MODELS\")\nplt.xlim(0,100)\nplt.title(\"MODEL ACCURACY COMPARISON\")\nplt.show()","c6c9b3fe":"df = pd.DataFrame(columns=[\"MODELS\",\"CV\"])\nfor model in model_names:\n    name = model.__class__.__name__\n    CV = cross_val_score(model,x_test,y_test,cv=10,verbose=False).mean()\n    result = pd.DataFrame([[name,CV*100]],columns=[\"MODELS\",\"CV\"])\n    df = df.append(result)\n    \nfigure = plt.figure(figsize=(20,8))   \nsns.barplot(x=\"CV\",y=\"MODELS\",data=df,color=\"k\")\nplt.xlabel(\"CV\")\nplt.ylabel(\"MODELS\")\nplt.xlim(0,100)\nplt.title(\"MODEL CROSS VALIDATION COMPARISON\")\nplt.show()","8d6ced23":"r_prob = [0 for _ in range(len(y_test))]\nr_auc = roc_auc_score(y_test,r_prob)","48bc5e77":"for model in model_names:\n    name = model.__class__.__name__\n    predict = model.predict_proba(x_test)[:,1]\n    auroc_score = roc_auc_score(y_test,predict)\n    print(name+\" score: \",auroc_score)\n    print(\"-\"*50)","65dee811":"r_fpr,r_tpr,_= roc_curve(y_test,r_prob)\nmodel_dict={}\n\nfor model in model_names:\n    name = model.__class__.__name__\n    predict = model.predict_proba(x_test)[:,1]\n    fpr,tpr,_= roc_curve(y_test,predict)\n    model_dict[name]=[fpr,tpr]\n    \n","ab28c7e3":"plt.plot(r_fpr,r_tpr,linestyle=\"--\")\nplt.plot(model_dict[\"LogisticRegression\"][0],model_dict[\"LogisticRegression\"][1],linestyle='dotted',label='LogisticRegression')\nplt.plot(model_dict[\"GaussianNB\"][0],model_dict[\"GaussianNB\"][1],linestyle='dotted',label='GaussianNB')\nplt.plot(model_dict[\"KNeighborsClassifier\"][0],model_dict[\"KNeighborsClassifier\"][1],linestyle='dotted',label='KNeighborsClassifier')\nplt.plot(model_dict[\"DecisionTreeClassifier\"][0],model_dict[\"DecisionTreeClassifier\"][1],linestyle='dotted',label='DecisionTreeClassifier')\nplt.plot(model_dict[\"RandomForestClassifier\"][0],model_dict[\"RandomForestClassifier\"][1],linestyle='dotted',label='RandomForestClassifier')\nplt.plot(model_dict[\"XGBClassifier\"][0],model_dict[\"XGBClassifier\"][1],linestyle='dotted',label='XGBClassifier')\nplt.plot(model_dict[\"CatBoostClassifier\"][0],model_dict[\"CatBoostClassifier\"][1],linestyle='dotted',label='CatBoostClassifier')\n\nplt.title(\"ROC plot\")\nplt.xlabel(\"False positive rate.\")\nplt.ylabel(\"True positive rate.\")\nplt.legend()\nplt.show()","d1383733":"## Train Test Splitting","2a1a45f1":"## Histogram","e618a40c":"### Cross Validation Comparison","fe9c8e25":"### AUROC_Score","259bf991":"## Feature Scaling","db04199d":"## Training Models\n### Classification Models","d9806b8d":"## ROC CURVE and ROC_AUC_SCORE\n### Prediction Probability","84f9bef1":"## Model Comparison\n### Accuracy Comparison","338ff00a":"## Heat Map","f296802e":"# DATA VISUALIZATION\n## Pearson Correlation","f1e0e397":"# DATA WRANGLING","2ee05695":"## Pair Plot","d9ec4386":"### ROC_Curve"}}