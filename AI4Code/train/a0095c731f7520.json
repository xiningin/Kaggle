{"cell_type":{"dbf7ee10":"code","17d9c7e8":"code","d3d687dc":"code","0237f6df":"code","de490473":"code","5458134b":"code","8cf617d9":"code","8fcb09e5":"code","a6d076b1":"code","c7a44a10":"code","f0d10f43":"code","8948d4d9":"code","5baafc5d":"code","f5e8c677":"code","abec880e":"code","43a1957f":"code","e4a91a73":"code","520ddc73":"code","c9208a73":"code","2f327a23":"code","4616183b":"code","4ab1bf22":"code","b485689c":"code","f155c294":"code","efb4e6ce":"code","85802022":"code","0384b58f":"code","147c16c8":"code","2845a8ab":"code","e82807f4":"code","212fe537":"code","f822d9e9":"code","7294aae1":"code","8b2b8398":"code","26c4fef6":"code","a9094e12":"code","0223ea58":"code","1167cfbc":"code","082196ad":"code","369b3d98":"code","f2ca38c1":"code","7d06fcba":"code","1e7b1689":"code","b052b69d":"code","081ca1d9":"code","0191ef15":"markdown","d1f33747":"markdown","be11d9ae":"markdown","c1ac0497":"markdown","bbfad653":"markdown","efc403ec":"markdown"},"source":{"dbf7ee10":"# Directive pour afficher les graphiques dans Jupyter\n%matplotlib inline\n\n# Pandas : librairie de manipulation de donn\u00e9es\n# NumPy : librairie de calcul scientifique\n# MatPlotLib : librairie de visualisation et graphiques\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets","17d9c7e8":"from keras.datasets import mnist\n\nfrom keras.models import Sequential, load_model\n\nfrom keras.layers import Dense, Dropout, Flatten\n\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nfrom keras.utils.np_utils import to_categorical","d3d687dc":"df=pd.read_csv('..\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_RGB.csv')","0237f6df":"df.shape","de490473":"df.head()","5458134b":"df.label.value_counts()","8cf617d9":"labels = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\nprint(labels)","8fcb09e5":"n_samples = len(df.index)\nimages = np.array(df.drop(['label'],axis=1))\nimages = images.reshape(n_samples,28,28,3)","a6d076b1":"plt.figure(figsize=(10,20))\nfor i in range(0,19) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(labels[df.label[i]])","c7a44a10":"y = df['label']\nX = df.drop(['label'] , axis=1)","f0d10f43":"X = X\/255","8948d4d9":"X.shape","5baafc5d":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","f5e8c677":"from sklearn.neural_network import MLPClassifier #multilayer perceptron\nmlp = MLPClassifier(hidden_layer_sizes=(200,60)) #\u5206couches\u7684\uff0c\u7b2c\u4e00\u4e2acouche 200\u4e2aneurones\uff0c\u7b2c\u4e8c\u4e2a60\u4e2a(\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u4e2a\u591a\uff1f\u7b2c\u4e8c\u4e2a\u5c42\u66f4\u77eb\u9970\uff0c\u56e0\u6b64\u9700\u8981\u7684\u795e\u7ecf\u6570\u76ee\u539f\u6765\u8d8a\u5c11).\u795e\u7ecf\u7684\u6570\u91cf\u53d6\u51b3\u4e8e\u5143\u7d20\u7684\u6570\u91cf\uff0c\u795e\u7ecf\u6570\u76ee\u6bd4\u5143\u7d20\u591a\u6ca1\u7528\u3002\nmlp.fit(X_train,y_train)\ny_mlp = mlp.predict(X_test)","abec880e":"mlp_score = accuracy_score(y_test, y_mlp)\nprint(mlp_score)","43a1957f":"pd.crosstab(y_test, y_mlp, rownames=['Reel'], colnames=['Prediction'], margins=True)","e4a91a73":"from keras.utils.np_utils import to_categorical","520ddc73":"print(y[0])\ny_cat = to_categorical(y)\nprint(y_cat[0])","c9208a73":"num_classes = y_cat.shape[1]\nprint(num_classes)","2f327a23":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y_cat, test_size=0.2, random_state=1)","4616183b":"X_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","4ab1bf22":"X_train.shape","b485689c":"from keras.models import Sequential\nfrom keras.layers import Dense","f155c294":"model = Sequential()\nmodel.add(Dense(200, activation='relu'))#ReLu\u7684gradient\u6bd4sigmoide\u597d\u7528\u4e00\u4e9b\u6240\u4ee5\u4e00\u822c\u9009relu,\u4ee5\u907f\u514d\u4e0d\u6536\u655b\u7684\u60c5\u51b5\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))","efb4e6ce":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","85802022":"train = model.fit(X_train , y_train , validation_data=(X_test,y_test), epochs=30, verbose=1)","0384b58f":"model.evaluate(X_test,y_test)","147c16c8":"print(train.history['accuracy'])","2845a8ab":"print(train.history['val_accuracy'])","e82807f4":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","212fe537":"plot_scores(train)","f822d9e9":"# R\u00e9seau convolutionnel simple\nmodel = Sequential()\nmodel.add(Conv2D(32, (5, 5), input_shape=(28, 28, 3), activation='relu'))\n#model.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\n#model.add(Dense(128, activation='relu'))\nmodel.add(Dense(num_classes, activation='softmax'))\n\n# Compilation du mod\u00e8le\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","7294aae1":"model.summary()","8b2b8398":"X = np.array(X)\ny = np.array(y)","26c4fef6":"X.shape","a9094e12":"y = to_categorical(y)","0223ea58":"y","1167cfbc":"y.shape","082196ad":"X = X.reshape(X.shape[0],28,28,3)","369b3d98":"X.shape","f2ca38c1":"X = X\/255\nprint(X[0][0])","7d06fcba":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)","1e7b1689":"# Apprentissage\ntrain = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=20, verbose=1)","b052b69d":"# Test\nscores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"Score : %.2f%%\" % (scores[1]*100))","081ca1d9":"plot_scores(train)","0191ef15":"On affiche les 20 premiers :","d1f33747":"## R\u00e9seaux denses (Keras\/Tensorflow)","be11d9ae":"__Importer la dataset__","c1ac0497":"## R\u00e9seaux denses (sklearn)","bbfad653":"## Initialisations","efc403ec":"## Une couche convolutionnelle ##"}}