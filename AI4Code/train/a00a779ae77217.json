{"cell_type":{"6733b11c":"code","fcf58506":"code","1d0f0e59":"code","45be4d2c":"code","e839209b":"code","ca802297":"code","0dbc08b1":"code","98140813":"code","132577d2":"code","1cdbf471":"code","a4e6f515":"code","a30e0cc2":"code","0db7f9d6":"code","48151d14":"code","e0350415":"code","3857244a":"code","bd1343e0":"code","cf8e984d":"code","118c121d":"code","bb383f28":"code","44c8025e":"code","905e8bbf":"code","d16731a1":"markdown","6632f62d":"markdown","d5117236":"markdown","164f8bc3":"markdown"},"source":{"6733b11c":"import re\nimport string\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom nltk.tokenize import word_tokenize\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\n\nfrom sklearn.svm import SVC\nfrom xgboost import XGBClassifier\nfrom lightgbm import LGBMClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n\nwarnings.filterwarnings(\"ignore\")","fcf58506":"data_frame = pd.read_csv(\"\/kaggle\/input\/trip-advisor-hotel-reviews\/tripadvisor_hotel_reviews.csv\")","1d0f0e59":"data_frame.head()","45be4d2c":"data_frame.info()","e839209b":"data_frame[\"Rating\"].value_counts()","ca802297":"sns.countplot(x=\"Rating\", data=data_frame)\nplt.show()","0dbc08b1":"data_frame = data_frame.sample(frac=1).reset_index(drop=True)","98140813":"# Remove special characters from the sentence\ndef clean_text(sentence):\n    \n    # Convert to lower case\n    sentence = sentence.lower()\n    # split the sentence\n    sentence = sentence.split()\n    # Join the sentence\n    sentence = \" \".join(sentence)\n    # Remove special characters from the sentence\n    sentence = re.sub(f'[{re.escape(string.punctuation)}]', \"\", sentence)\n    \n    return sentence","132577d2":"data_frame[\"Review\"] = data_frame[\"Review\"].apply(clean_text)","1cdbf471":"x_train, x_test, y_train, y_test = train_test_split(data_frame[\"Review\"], data_frame[\"Rating\"],test_size=0.2, random_state=42)","a4e6f515":"# Apply Tfidf Vectorizer to convert sentence to tokens\ntfidf = TfidfVectorizer(tokenizer=word_tokenize, token_pattern=None)\ntfidf.fit(data_frame[\"Review\"])\nx_train_vector = tfidf.transform(x_train)\nx_test_vector = tfidf.transform(x_test)","a30e0cc2":"# Classes are imbalanced\n# SMOTE to over sample and balance classes.\nx_smote, y_smote = SMOTE().fit_resample(x_train_vector, y_train)","0db7f9d6":"def evaluation_metric(y_test, y_hat, model_name):\n    \n    accuracy = accuracy_score(y_hat, y_test)\n    print(\"Model: \", model_name)\n    print(\"\\nAccuracy: \", accuracy)\n    print(classification_report(y_hat, y_test))\n    \n    plt.figure(figsize=(10,6))\n    sns.heatmap(confusion_matrix(y_hat, y_test), annot=True, fmt=\".2f\")\n    plt.show()\n    return accuracy","48151d14":"lr_model = LogisticRegression()\nlr_model.fit(x_smote, y_smote)\nlr_preds = lr_model.predict(x_test_vector)","e0350415":"lr_accuracy = evaluation_metric(lr_preds, y_test, \"Logistic Regression\")","3857244a":"rf_model = RandomForestClassifier()\nrf_model.fit(x_smote, y_smote)\nrf_preds = rf_model.predict(x_test_vector)","bd1343e0":"rf_accuracy = evaluation_metric(rf_preds, y_test, \"Random Forest Classifier\")","cf8e984d":"xgb_model = XGBClassifier(max_depth=10,random_state=1,learning_rate=0.05,seed=1)\nxgb_model.fit(x_smote, y_smote)\nxgb_preds = xgb_model.predict(x_test_vector)","118c121d":"xgb_accuracy = evaluation_metric(xgb_preds, y_test, \"XGB Classifier\")","bb383f28":"lgb_model = LGBMClassifier()\nlgb_model.fit(x_smote, y_smote)\nlgb_preds = lgb_model.predict(x_test_vector)","44c8025e":"lgb_accuracy = evaluation_metric(lgb_preds, y_test, \"LGBM Classifier\")","905e8bbf":"x = [\"Random Forest\", \"Logistic Regression\", \"XGB Classifier\", \"LGBM Classifier\"]\ny = [rf_accuracy, lr_accuracy, xgb_accuracy, lgb_accuracy]\nplt.bar(x=x, height=y)\nplt.title(\"Algorithm Accuracy Comparison\")\nplt.xticks(rotation=15)\nplt.xlabel(\"Algorithms\")\nplt.ylabel(\"Accuracy\")\nplt.show()","d16731a1":"# 1. Import Required Libraries","6632f62d":"# 2. Load Data","d5117236":"## Preview Data","164f8bc3":"## Shuffle Data"}}