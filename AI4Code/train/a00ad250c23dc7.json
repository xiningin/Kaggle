{"cell_type":{"29d12ba8":"code","89715224":"code","28ddccf4":"code","a06927ae":"code","1684794a":"code","0cd1fd2f":"code","22d2d776":"code","2804c530":"code","c7f2fbda":"code","32d6423b":"code","1721b438":"code","32f364e4":"code","89b54e2f":"code","454ad2a3":"code","243d627f":"code","412fec8d":"code","03994fe7":"code","89edda43":"code","986942a9":"code","03fbc340":"code","4275bf66":"code","253aa680":"code","7522664e":"code","217e953a":"code","fab9a5ba":"code","484f9ac7":"markdown","cf7b41f7":"markdown","799e0baa":"markdown","dfa2ba00":"markdown","e0d80d13":"markdown","4914a34b":"markdown","216b9190":"markdown","4c241c10":"markdown","f5d2b0d9":"markdown","6cf4e6d8":"markdown","3acdb042":"markdown","8d94046d":"markdown","544ae551":"markdown","49de42db":"markdown","95bbca39":"markdown","e417e855":"markdown"},"source":{"29d12ba8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.impute import SimpleImputer # Needed to impute NaN values which exist\n\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","89715224":"aqi = pd.read_csv('..\/input\/data.csv', encoding = \"ISO-8859-1\", parse_dates=['date'], low_memory=False)\naqi.head()","28ddccf4":"sns.set(style=\"ticks\", rc = {'figure.figsize':(20,15)})\n\n# Supressing update warnings\n\nimport warnings\nwarnings.filterwarnings('ignore')","a06927ae":"# checking the original dataset\nprint(aqi.isnull().sum())\nprint(aqi.shape)\naqi.info()","1684794a":"# Cleaning up the data\n\naqi.drop(['stn_code', 'agency', 'sampling_date', 'location_monitoring_station'], axis=1, inplace=True) #dropping columns that aren't required\naqi = aqi.dropna(subset=['date']) # dropping rows where no date is available\n\n# cleaning up name changes\n\naqi.state = aqi.state.replace({'Uttaranchal':'Uttarakhand'})\naqi.state[aqi.location == \"Jamshedpur\"] = aqi.state[aqi.location == 'Jamshedpur'].replace({\"Bihar\":\"Jharkhand\"})\n\n#changing types to uniform format\n\ntypes = {\n    \"Residential\": \"R\",\n    \"Residential and others\": \"RO\",\n    \"Residential, Rural and other Areas\": \"RRO\",\n    \"Industrial Area\": \"I\",\n    \"Industrial Areas\": \"I\",\n    \"Industrial\": \"I\",\n    \"Sensitive Area\": \"S\",\n    \"Sensitive Areas\": \"S\",\n    \"Sensitive\": \"S\",\n    np.nan: \"RRO\"\n}\naqi.type = aqi.type.replace(types)","0cd1fd2f":"aqi.head()","22d2d776":"# defining columns of importance, which shall be used reguarly\nVALUE_COLS = ['so2', 'no2', 'rspm', 'spm', 'pm2_5']","2804c530":"# invoking SimpleImputer to fill missing values\nimputer = SimpleImputer(missing_values=np.nan, strategy='mean')\naqi[VALUE_COLS] = imputer.fit_transform(aqi[VALUE_COLS])","c7f2fbda":"# checking to see if the dataset has any null values left over and the format\nprint(aqi.isnull().sum())\naqi.tail()","32d6423b":"# defining a function that plots SO2, NO2, RSPM and SPM yearly average levels for a given state\n# since data is available monthly, it was resampled to a year and averaged to obtain yearly averages\n# years for which no data was collected has not been imputed\ndef plot_for_state(state):\n    fig, ax = plt.subplots(2,2, figsize=(20,12))\n    fig.suptitle(state, size=20)\n    state = aqi[aqi.state == state]\n    state = state.reset_index().set_index('date')[VALUE_COLS].resample('Y').mean()\n    state.so2.plot(legend=True, ax=ax[0][0], title=\"so2\")\n    ax[0][0].set_ylabel(\"so2 (\u00b5g\/m3)\")\n    ax[0][0].set_xlabel(\"Year\")\n    \n    state.no2.plot(legend=True, ax=ax[0][1], title=\"no2\")\n    ax[0][1].set_ylabel(\"no2 (\u00b5g\/m3)\")\n    ax[0][1].set_xlabel(\"Year\")\n    \n    state.rspm.plot(legend=True, ax=ax[1][0], title=\"rspm\")\n    ax[1][0].set_ylabel(\"RSPM (PM10 \u00b5g\/m3)\")\n    ax[1][0].set_xlabel(\"Year\")\n    \n    state.spm.plot(legend=True, ax=ax[1][1], title=\"spm\")\n    ax[1][1].set_ylabel(\"SPM (PM10 \u00b5g\/m3)\")\n    ax[1][1].set_xlabel(\"Year\")","1721b438":"plot_for_state(\"Uttar Pradesh\")","32f364e4":"# defining a function to find and plot the top 10 and bottom 10 states for a given indicator (defaults to SO2)\ndef top_and_bottom_10_states(indicator=\"so2\"):\n    fig, ax = plt.subplots(2,1, figsize=(20, 12))\n    \n    ind = aqi[[indicator, 'state']].groupby('state', as_index=False).median().sort_values(by=indicator,ascending=False)\n    top10 = sns.barplot(x='state', y=indicator, data=ind[:10], ax=ax[0], color='R')\n    top10.set_title(\"Top 10 states by {} (1991-2016)\".format(indicator))\n    top10.set_ylabel(\"so2 (\u00b5g\/m3)\")\n    top10.set_xlabel(\"State\")\n    \n    bottom10 = sns.barplot(x='state', y=indicator, data=ind[-10:], ax=ax[1], color='g')\n    bottom10.set_title(\"Bottom 10 states by {} (1991-2016)\".format(indicator))\n    bottom10.set_ylabel(\"so2 (\u00b5g\/m3)\")\n    bottom10.set_xlabel(\"State\")","89b54e2f":"top_and_bottom_10_states(\"so2\")\ntop_and_bottom_10_states(\"no2\")","454ad2a3":"# defining a function to find the highest ever recorded levels for a given indicator (defaults to SO2) by state\n# sidenote: mostly outliers\ndef highest_levels_recorded(indicator=\"so2\"):\n    plt.figure(figsize=(20,10))\n    ind = aqi[[indicator, 'location', 'state', 'date']].groupby('state', as_index=False).max()\n    highest = sns.barplot(x='state', y=indicator, data=ind)\n    highest.set_title(\"Highest ever {} levels recorded by state\".format(indicator))\n    plt.xticks(rotation=90)","243d627f":"highest_levels_recorded(\"no2\")\nhighest_levels_recorded(\"rspm\")","412fec8d":"# defining a function to plot the yearly trend values for a given indicator (defaults to SO2) and state (defaults to overall)\ndef yearly_trend(state=\"\", indicator=\"so2\", ):\n    plt.figure(figsize=(20,12))\n    aqi['year'] = aqi.date.dt.year\n    if state is \"\":\n        year_wise = aqi[[indicator, 'year', 'state']].groupby('year', as_index=False).median()\n        trend = sns.pointplot(x='year', y=indicator, data=year_wise)\n        trend.set_title('Yearly trend of {}'.format(indicator))\n    else:\n        year_wise = aqi[[indicator, 'year', 'state']].groupby(['state','year']).median().loc[state].reset_index()\n        trend = sns.pointplot(x='year', y=indicator, data=year_wise)\n        trend.set_title('Yearly trend of {} for {}'.format(indicator, state))","03994fe7":"yearly_trend()\nyearly_trend(\"West Bengal\", \"no2\")","89edda43":"# defining a function to plot a heatmap for yearly median average for a given indicator (defaults to SO2)\ndef indicator_by_state_and_year(indicator=\"so2\"):\n    plt.figure(figsize=(20, 20))\n    hmap = sns.heatmap(\n        data=aqi.pivot_table(values=indicator, index='state', columns='year', aggfunc='median', margins=True),\n               annot=True, linewidths=.5, cbar=True, square=True, cmap='inferno', cbar_kws={'label': \"Annual Average\"})\n    \n    hmap.set_title(\"{} by state and year\".format(indicator))","986942a9":"indicator_by_state_and_year('no2')","03fbc340":"# defining a function to plot the relationship between two indicators on yearly averages.\ndef relation(ind1=\"so2\", ind2=\"no2\"):\n    relation = sns.jointplot(x=ind1, y=ind2, data=aqi.set_index('date').resample('Y').mean(), kind='reg')","4275bf66":"relation()","253aa680":"# defining a function to plot pollutant averages by type for a given indicator\ndef type_avg(indicator=\"\"):\n    type_avg = aqi[VALUE_COLS + ['type', 'date']].groupby(\"type\").mean()\n    if indicator is not \"\":\n        t = type_avg[indicator].plot(kind='bar')\n        plt.xticks(rotation = 0)\n        plt.title(\"Pollutant average by type for {}\".format(indicator))\n    else:\n        t = type_avg.plot(kind='bar')\n        plt.xticks(rotation = 0)\n        plt.title(\"Pollutant average by type\")","7522664e":"type_avg('so2')","217e953a":"# defining a function to plot pollutant averages for a given indicator (defaults to SO2) by locations in a given state\ndef location_avgs(state, indicator=\"so2\"):\n    locs = aqi[VALUE_COLS + ['state', 'location', 'date']].groupby(['state', 'location']).mean()\n    state_avgs = locs.loc[state].reset_index()\n    sns.barplot(x='location', y=indicator, data=state_avgs)\n    plt.title(\"Location-wise average for {} in {}\".format(indicator, state))\n    plt.xticks(rotation = 90)","fab9a5ba":"location_avgs(\"Uttar Pradesh\", \"no2\")","484f9ac7":"Plotting for `SO2`, we can see that the **top** state is `Uttarakhand`, while the **bottom** state is `Meghalaya`.\n\nPlotting for `NO2`, we can see that the **top** state is `West Bengal`, while the **bottom** state is `Mizoram`.\n\n## Plotting the highest ever recorded levels","cf7b41f7":"Plotting for `SO2`, we can see that the `Residential` areas generate most SO2, follwed closely by industrial areas.\n\n## Plotting pollutant averages by locations\/state","799e0baa":"# Exploratory Data Analysis\nMake sure to read the comments in the code for better understanding.\n\n## Plotting pollutant levels as yearly averages for states","dfa2ba00":"Plotting for `NO2`, we can see that `Rajasthan` recorded the highest ever NO2 level.\nPlotting for `RSPM`, we can see that `Uttar Pradesh` recorded the highest ever RSPM level.\n\n## Plotting yearly trends","e0d80d13":"Plotting for `SO2` and `NO2`, we see a fairly positively sloped line indicating that the two pollutants move simultaneously. \n\n## Plotting pollutant average by type","4914a34b":"# Dataset\nThis dataset consists of the following columns:\n* **stn_code**: Station Code\n* **sampling_date**: Date of sampling (note how this is formatted)\n* **state**: State\n* **location**: Location of recording\n* **agency**: Agency\n* **type**: Type of area\n* **so2**: Sulphur dioxide (\u00b5g\/m3)\n* **no2**: Nitrogen dioxide (\u00b5g\/m3)\n* **rspm**: Respirable Suspended Particulate Matter (\u00b5g\/m3)\n* **spm**: Suspended Particulate Matter (\u00b5g\/m3)\n* **location_monitoring_station**: Unknown\n* **pm2_5**: PSI 2.5 (\u00b5g\/m3)\n* **date**: Date of sampling","216b9190":"I have tried to make the kernel as functional as possible.\n\n# Conclusion\nI plan on doing even more EDA on this dataset, such as finding seasonal variations in pollutant levels and others.\n\n### Please leave any feedback you have in the comments section. Thank you!","4c241c10":"### Filling NaNs\nSince our pollutants column contain a lot of NaNs, we must fill them to have consistent data. If we drop the rows containing NaNs, we will be left with nothing.\n\nI use the `SimpleImputer` from sklearn.imputer (v0.20.2) to fill the missing values in every column with the **mean.**","f5d2b0d9":"# Cleaning the dataset\n### Removing NaNs\nLooking at the dataset head, we can conclude that the following columns:\n> - stn_code\n> - agency\n> - sampling_date\n> - location_monitoring_agency \n\ndo not add much to the dataset in terms of information that can't already be extracted from other columns. Therefore, we **drop** these columns.\n\nSince ***date*** also has missing values, we will drop the rows containing these values as they're of little use as well.\n\n### Cleaning values\nSince the geographical nomenclature has changed over time, we change it here as well to correspond to more accurate insights.\n\n### The ***type*** column\nCurrently, the type column has several names for the same type and therefore, it is better to clean it up and make it more uniform. ","6cf4e6d8":"## Checking the dataset\nWe can see that there are quite a number of NaNs in the dataset. To proceed with the EDA, we must handle these NaNs by either removing them or filling them. I will be doing both.","3acdb042":"#### This looks better with the empty columns dropped. We continue with cleaning the dataset.","8d94046d":"## Plotting the relationship between two indicators","544ae551":"Plotting `Uttar Pradesh`, we see that SO2 levels have fallen in the state while NO2 levels have risen. Information about RSPM and SPM can't be concluded since a lot of data is missing.\n\n## Plotting highest and lowest ranking states\n","49de42db":"## Cleaned dataset\nOur dataset is now clean with no null values as can be seen. \n\n*However, doing some EDA locally, I did find that for some states, there were years without any data being collected (2003, for example). I have not imputed the values of these years, which will cause the charts to be broken in between.*\n\nLet's move on to writing functions and doing EDA.","95bbca39":"Plottting for `NO2` and `Uttar Pradesh`, we can see that `Meerut` and `Noida` emitted the most NO2 on average.","e417e855":"Plotting for `SO2`, we can see the yearly trend for sulphur dioxide levels in the country.\nPlotting for `NO2` in `West Bengal`, we can see the yearly trend.\n\n## Plotting a heatmap for a particular indicator"}}