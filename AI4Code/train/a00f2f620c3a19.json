{"cell_type":{"77841b5f":"code","0697bcb1":"code","1cfc42fb":"code","a1212a1d":"code","5a0ca1a4":"code","6cc0b402":"code","8c4c8728":"code","d732efc7":"code","4ef94024":"code","f4c4f08d":"code","33cec661":"code","a8136dc7":"markdown","dacfe941":"markdown","c9f13dc7":"markdown","507cdf90":"markdown","80dedf4a":"markdown","7780cd15":"markdown","cb7fd071":"markdown","f82da0dc":"markdown"},"source":{"77841b5f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0697bcb1":"path = '\/kaggle\/input\/applied-ml-microcourse-telco-churn'\ndata = pd.read_csv('{}\/features.csv'.format(path))","1cfc42fb":"data.head()","a1212a1d":"from sklearn.model_selection import train_test_split\n\ny = data['churn']\n\nX = data.drop(columns=['customerID', 'churn'])\nX = pd.get_dummies(X, drop_first=True)\n\n# some variables are highly\/exactly correlated.  Dropping additional variables\nvars_to_drop = ['MultipleLines_No phone service',\n                'OnlineSecurity_No internet service',\n                'OnlineBackup_No internet service',\n                'DeviceProtection_No internet service',\n                'TechSupport_No internet service',\n                'StreamingTV_No internet service',\n                'StreamingMovies_No internet service']\n\nX.drop(columns=vars_to_drop, inplace=True)\nX.fillna(0, inplace=True)\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","5a0ca1a4":"from sklearn import metrics\n\ndef get_performance_measures(clf, X_train=X_train, X_test=X_test, y_train=y_train, y_test=y_test):\n    test_pred = clf.predict(X_test)\n    train_pred = clf.predict(X_train)\n    \n    print(\"\\nClassification report (test):\\n\", metrics.classification_report(y_test, test_pred))\n    print(\"\\nROC AUC (test):\\n\", round(metrics.roc_auc_score(y_test, test_pred), 2), \"\\n\")\n\n    print(\"\\nClassification report (train):\\n\", metrics.classification_report(y_train, train_pred))\n    print(\"\\nROC AUC (train):\\n\", round(metrics.roc_auc_score(y_train, train_pred), 2), \"\\n\")","6cc0b402":"from sklearn.linear_model import LogisticRegression\n\nclf_lr = LogisticRegression()\nclf_lr.fit(X_train, y_train)\n\nget_performance_measures(clf_lr)","8c4c8728":"from sklearn import preprocessing\n\nX_train_scaled = preprocessing.scale(X_train)\nX_test_scaled = preprocessing.scale(X_test)\n\nclf_lr = LogisticRegression()\nclf_lr.fit(X_train_scaled, y_train)\n\nget_performance_measures(clf_lr, X_train=X_train_scaled, X_test=X_test_scaled)","d732efc7":"from sklearn.ensemble import RandomForestClassifier\n\nclf_rf = RandomForestClassifier()\nclf_rf.fit(X_train, y_train)\n\nget_performance_measures(clf_rf)","4ef94024":"clf_rf = RandomForestClassifier(min_samples_leaf=10)\nclf_rf.fit(X_train, y_train)\n\nget_performance_measures(clf_rf)","f4c4f08d":"from xgboost import XGBClassifier\n\nclf_xgb = XGBClassifier()\nclf_xgb.fit(X_train, y_train)\n\nget_performance_measures(clf_xgb)","33cec661":"clf_xgb = XGBClassifier(min_child_weight=5, max_depth=2)\nclf_xgb.fit(X_train, y_train)\n\nget_performance_measures(clf_xgb)","a8136dc7":"The performance is similar after we scale the data, but we know the model converged at least.","dacfe941":"### Try XGBoost, widely regarded as a workhorse of modern machine learning","c9f13dc7":"Read through the error above. It is often advisable to scale features for models like logistic regression.","507cdf90":"We're getting overfitting with the default parameters for XGBoost, but our test ROC AUC is higher than both the logistic regression and random forest models.  Let's try making the model less complex by altering a hyperparameter.","80dedf4a":"We see that the test ROC AUC for the random forest is 72.7%, lower than the 73.4% from the logistic regression.  However, the training ROC AUC from the random forest is 100%.  This is clear evidence that overfitting has occured.  We can address this by changing some hyperparameters","7780cd15":"We are able to get better performance with the XGBoost model, although there is still some overfitting.  There are more hyperparamaters we can choose, so we may be able to get a better model.","cb7fd071":"### Random Forest Modelling","f82da0dc":"### Logistic Regression Modelling"}}