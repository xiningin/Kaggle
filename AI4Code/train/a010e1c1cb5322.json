{"cell_type":{"e60cdd6d":"code","808c17a3":"code","e3718dd7":"code","093650ab":"code","98a221f4":"code","734bd1b2":"code","51ecaa6e":"code","72d2bb8c":"code","e11905a7":"code","a03038a8":"code","f4052cf4":"code","c49cd50a":"code","de238b44":"code","3c0e5df8":"code","e73d0b83":"code","cd4574c7":"code","7f754908":"code","37174d2f":"code","86ff8707":"code","45b42315":"code","f2c4334c":"code","eb3dd503":"code","2dbdc956":"code","e503575f":"code","0896bf15":"code","05176fdb":"code","bfe38709":"code","d09407a3":"code","e898c701":"code","b6f993ae":"code","4fdf86bb":"code","e2477d08":"code","0300d944":"code","580a473d":"code","8fb91954":"code","6d8744ee":"code","e80478a9":"code","8a9b6ec7":"code","f56627f0":"code","8ffad158":"code","26f39890":"code","fd689f59":"code","cbc89bae":"code","ebeed399":"code","635ec7b5":"code","0e50e8bf":"code","f3ad5a92":"code","f414a338":"code","c0de430f":"code","8a597382":"code","b09e5657":"code","bd9019ce":"code","0d6b1765":"code","6ed4caa9":"code","da13a3c5":"code","bedaa5b4":"code","34e9de10":"code","8a0e9431":"code","21b37035":"code","85a900ff":"code","1d8025e7":"code","92c188c0":"code","77c28a5c":"code","db85c5c9":"code","bd48a1fe":"code","46ae2886":"code","5d0f9d9a":"code","04d3dac0":"code","359337ef":"code","81f7e25d":"code","7a6a1856":"code","628dad32":"code","6a3d15b3":"code","576ce9da":"code","bc904466":"code","4aec783f":"code","1288ba57":"code","39627bee":"code","0ce9a805":"code","8b4be7c4":"code","0d59bf6a":"code","39480c7d":"code","698eae23":"code","4f609859":"code","0b32ac2c":"code","844a1fb5":"code","baa0527d":"code","f6f66991":"code","22d92bd7":"code","31c9e392":"code","33dcec14":"code","06dd67c2":"code","dcb11ddd":"code","5f85c91c":"code","8a46e8cc":"code","bde2e52c":"code","fb0581e8":"code","b7fd651a":"code","488675d5":"code","2ac48145":"code","f60c002e":"code","14a89284":"code","9d63f9a0":"markdown","bbdae59e":"markdown","0d09fc00":"markdown","dfacb0b2":"markdown","c49797a7":"markdown","468e6b1e":"markdown","098ddadb":"markdown","ae048495":"markdown","efa4d8cd":"markdown","e194ddd9":"markdown","eac79066":"markdown","5f944b14":"markdown","6464bd83":"markdown","43cac1ee":"markdown","466802aa":"markdown","6d8f5ba0":"markdown","2fc227b3":"markdown","f381b2f7":"markdown","b41e9b64":"markdown","03bd7036":"markdown","6cbfbfbe":"markdown","5c5e8a7e":"markdown","4a06ec4c":"markdown","2c3c3f18":"markdown","1396ef2d":"markdown","0dd5e3fa":"markdown","5f88a458":"markdown","563cb093":"markdown","d066887b":"markdown","2b9fcd9a":"markdown","d83fb287":"markdown","e4c47876":"markdown","54ede679":"markdown","5a7c2215":"markdown","3b3a0422":"markdown","4778f142":"markdown","3f31037c":"markdown","7fce787b":"markdown"},"source":{"e60cdd6d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","808c17a3":"qualifiers= pd.read_csv('..\/input\/winnerpredictionchallenge\/Qualifiers IPL 2008-2019.csv')","e3718dd7":"qualifiers.head(10)","093650ab":"test=pd.read_csv('..\/input\/winnerpredictionchallenge\/Testset Matches IPL 2020.csv')","98a221f4":"test.head(20)","734bd1b2":"train= pd.read_csv('..\/input\/winnerpredictionchallenge\/Training Matches IPL 2008-2019.csv')","51ecaa6e":"train.head()","72d2bb8c":"train.iloc[train['win_by_runs'].idxmax()]","e11905a7":"train.iloc[train['win_by_runs'].idxmax()]['winner']","a03038a8":"train.iloc[train['win_by_wickets'].idxmax()]['winner']","f4052cf4":"train.iloc[train[train['win_by_runs'].ge(1)].win_by_runs.idxmin()]['winner']","c49cd50a":"train.iloc[train[train['win_by_wickets'].ge(1)].win_by_wickets.idxmin()]","de238b44":"train.iloc[train[train['win_by_wickets'].ge(1)].win_by_wickets.idxmin()]['winner']","3c0e5df8":"plt.figure(figsize=(12,6))\nsns.countplot(x='season', data=train,)\nplt.show()","e73d0b83":"plt.figure(figsize=(12,6))\ndata = train.winner.value_counts()\nsns.barplot(y = data.index, x = data, orient='h')\nplt.show()","cd4574c7":"top_players = train.player_of_match.value_counts()[:10]\nfig, ax = plt.subplots(figsize=(15,8))\nax.set_ylim([0,20])\nax.set_ylabel(\"Count\")\nax.set_title(\"Top player of the match Winners\")\ntop_players.plot.bar()\nsns.barplot(x = top_players.index, y = top_players, orient='v', palette=\"husl\");\nplt.show()\n","7f754908":"plt.figure(figsize=(12,6))\nsns.countplot(x='venue', data=train)\nplt.xticks(rotation='vertical')\nplt.show()","37174d2f":"temp_df = pd.melt(train, id_vars=['id','season'], value_vars=['team1', 'team2'])\n\nplt.figure(figsize=(12,6))\nsns.countplot(x='value', data=temp_df)\nplt.xticks(rotation='vertical')\nplt.show()","86ff8707":"plt.figure(figsize=(12,6))\nsns.countplot(x='winner', data=train)\nplt.xticks(rotation=90)\nplt.show()","45b42315":"temp_df = train.drop_duplicates(subset=['season'], keep='last')[['season', 'winner']].reset_index(drop=True)\ntemp_df","f2c4334c":"temp_series = train.toss_decision.value_counts()\nlabels = (np.array(temp_series.index))\nsizes = (np.array((temp_series \/ temp_series.sum())*100))\ncolors = ['gold', 'lightskyblue']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Toss decision percentage\")\nplt.show()","eb3dd503":"plt.figure(figsize=(12,6))\nsns.countplot(x='season', hue='toss_decision', data=train,)\nplt.xticks(rotation='vertical')\n\nplt.show()","2dbdc956":"# Since there is a very strong trend towards batting second let us see the win percentage of teams batting second.\nnum_of_wins = (train.win_by_wickets>0).sum()\nnum_of_loss = (train.win_by_wickets==0).sum()\nlabels = [\"Wins\", \"Loss\"]\ntotal = float(num_of_wins + num_of_loss)\nsizes = [(num_of_wins\/total)*100, (num_of_loss\/total)*100]\ncolors = ['gold', 'lightskyblue']\nplt.pie(sizes, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=90)\nplt.title(\"Win percentage batting second\")\nplt.show()","e503575f":"def autolabel(rects):\n    for rect in rects:\n        height = rect.get_height()\n        ax.text(rect.get_x() + rect.get_width()\/2., 1.02*height,\n                '%d' % int(height),\n                ha='center', va='bottom')","0896bf15":"temp_series = train.player_of_match.value_counts()[:10]\nlabels = np.array(temp_series.index)\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\ncolors = 'lightskyblue'\nrects = ax.bar(ind, np.array(temp_series), width=width,color = 'lightskyblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top player of the match awardees\")\nautolabel(rects)\nplt.show()","05176fdb":"temp_df = pd.melt(train, id_vars=['id'], value_vars=['umpire1', 'umpire2', 'umpire3'])\n\ntemp_series = temp_df.value.value_counts()[:10]\nlabels = np.array(temp_series.index)\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_series), width=width,color = 'lightskyblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top Umpires\")\nautolabel(rects)\nplt.show()","bfe38709":"score= pd.read_csv('..\/input\/winnerpredictionchallenge\/Traning Deliveries Matches IPL 2008-2019.csv')","d09407a3":"score.head()","e898c701":"temp_df = score.groupby('batsman')['batsman_runs'].agg('sum').reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['batsman_runs']), width=width, color = 'lightskyblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top run scorers in IPL\")\nax.set_xlabel('Batsmane Name')\nautolabel(rects)\nplt.show()","b6f993ae":"# Now let us see the players with more number of boundaries in IPL.\ntemp_df = score.groupby('batsman')['batsman_runs'].agg(lambda x: (x==4).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['batsman_runs']), width=width, color='lightskyblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Batsman with most number of boundaries.!\",fontsize = 10)\nautolabel(rects)\nplt.show()","4fdf86bb":"# Now let us check the number of 6's\ntemp_df = score.groupby('batsman')['batsman_runs'].agg(lambda x: (x==6).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['batsman_runs']), width=width, color = 'lightskyblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation=90)\nax.set_ylabel(\"Count\")\nax.set_title(\"Batsman with most number of sixes.!\")\nax.set_xlabel('Batsmane Name')\nautolabel(rects)\nplt.show()","e2477d08":"# Now let us see the batsman who has played the most number of dot balls.\ntemp_df = score.groupby('batsman')['batsman_runs'].agg(lambda x: (x==0).sum()).reset_index().sort_values(by='batsman_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['batsman_runs']), width=width, color = 'lightskyblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Batsman with most number of dot balls.!\")\nax.set_xlabel('Batsmane Name')\nautolabel(rects)\nplt.show()","0300d944":"# Let us check the percentage distribution now.\ndef balls_faced(x):\n    return len(x)\n\ndef dot_balls(x):\n    return (x==0).sum()\n\ntemp_df = score.groupby('batsman')['batsman_runs'].agg([balls_faced, dot_balls]).reset_index()\ntemp_df = temp_df.loc[temp_df.balls_faced>200,:]\ntemp_df['percentage_of_dot_balls'] = (temp_df['dot_balls'] \/ temp_df['balls_faced'])*100.\ntemp_df = temp_df.sort_values(by='percentage_of_dot_balls', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nfig, ax1 = plt.subplots(figsize=(15,8))\nax2 = ax1.twinx()\nlabels = np.array(temp_df['batsman'])\nind = np.arange(len(labels))\nwidth = 0.9\nrects = ax1.bar(ind, np.array(temp_df['dot_balls']), width=width, color = 'lightskyblue')\nax1.set_xticks(ind+((width)\/2.))\nax1.set_xticklabels(labels, rotation='vertical')\nax1.set_ylabel(\"Count of dot balls\", color='brown')\nax1.set_title(\"Batsman with highest percentage of dot balls (balls faced > 200)\")\nax2.plot(ind+0.45, np.array(temp_df['percentage_of_dot_balls']), color='b', marker='o')\nax2.set_ylabel(\"Percentage of dot balls\", color='b')\nax2.set_ylim([0,100])\nax2.grid(b=False)\nplt.show()\n","580a473d":"temp_df = score.groupby('bowler')['ball'].agg('count').reset_index().sort_values(by='ball', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['bowler'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['ball']), width=width, color = 'lightskyblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top Bowlers - Number of balls bowled in IPL\")\nax.set_xlabel('Bowler Names')\nautolabel(rects)\nplt.show()","8fb91954":"temp_df = score.groupby('bowler')['total_runs'].agg(lambda x: (x==0).sum()).reset_index().sort_values(by='total_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['bowler'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['total_runs']), width=width, color='lightskyblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Top Bowlers - Number of dot balls bowled in IPL\")\nax.set_xlabel('Bowler Names')\nautolabel(rects)\nplt.show()","6d8744ee":"# Now let us see the bowlers who has bowled more number of extras in IPL.\ntemp_df = score.groupby('bowler')['extra_runs'].agg(lambda x: (x>0).sum()).reset_index().sort_values(by='extra_runs', ascending=False).reset_index(drop=True)\ntemp_df = temp_df.iloc[:10,:]\n\nlabels = np.array(temp_df['bowler'])\nind = np.arange(len(labels))\nwidth = 0.9\nfig, ax = plt.subplots(figsize=(15,8))\nrects = ax.bar(ind, np.array(temp_df['extra_runs']), width=width, color = 'lightskyblue')\nax.set_xticks(ind+((width)\/2.))\nax.set_xticklabels(labels, rotation='vertical')\nax.set_ylabel(\"Count\")\nax.set_title(\"Bowlers with more extras in IPL\")\nax.set_xlabel('Bowler Names')\nautolabel(rects)\nplt.show()","e80478a9":"# Now let us see most common dismissal types in IPL.\nplt.figure(figsize=(12,6))\nsns.countplot(x='dismissal_kind', data=score)\nplt.xticks(rotation='vertical')\nplt.show()","8a9b6ec7":"    \nw_types = score[\"dismissal_kind\"].unique()\nw = [1,2,8] + list(range(4,7))\nw_types = [w_types[x] for x in w]\n\ntemp = score.loc[score[\"dismissal_kind\"].isin(w_types)].reset_index(drop=True).groupby(['bowler','dismissal_kind']).dismissal_kind.count().unstack(level=1, fill_value = 0)\ntemp[\"total\"] = temp.sum(axis =1)\nrunsgiven = temp.sort_values(\"total\", ascending = False).head(10).drop(\"total\", axis = 1)\nrunsgiven.columns = map(lambda x:x.upper(), list(runsgiven.columns))\n\nrunsgiven.plot(kind = \"bar\", figsize = (12,6), stacked = True)\nplt.xlabel(\"Bowler\")\nplt.ylabel(\"Total Wickets Taken\")\nplt.legend()\nplt.title(\"Top 10 Highest Wicket-Takers categorized by Type of Wicket Taken\")","f56627f0":"team_avg = score.groupby([\"batting_team\",\"match_id\"])[\"total_runs\"].aggregate(\"sum\").reset_index()\\\n.groupby(\"batting_team\")[\"total_runs\"].agg(average=\"mean\", n=\"count\")\\\n.reset_index().sort_values(\"average\", ascending = False).reset_index(drop = True)\n\nplt.figure(figsize = (12,6))\nsns.pointplot(\"batting_team\",\"average\",\"batting_team\", data = team_avg)\nplt.xticks(rotation = \"vertical\")\nplt.legend(\"\")\nplt.ylabel(\"Average Score\")\nplt.xlabel(\"Batting Team\")\nplt.title(\"Averags Scores of each Team\")\nplt.ylim(135,165)\nplt.show()","8ffad158":"sr = lambda x: x.mean()*100\n\ntemp = score.groupby(\"batsman\")[\"batsman_runs\"].agg(rate=sr,n=\"count\").reset_index()\nstrike = temp[temp[\"n\"]>500].sort_values(\"rate\", ascending = False).reset_index(drop = True)[:10]\n\nplt.figure(figsize = (12,6))\nsns.pointplot(\"batsman\",\"rate\",\"batsman\", data = strike)\nplt.xticks(rotation = \"vertical\")\nplt.legend(\"\")\nplt.ylabel(\"Strike Rate\")\nplt.xlabel(\"Batsman\")\nplt.title(\"Batsmen with Highest S\/R (Balls Played > 500)\")\nplt.ylim(125,175)\nplt.show()","26f39890":"df1 = score.groupby([\"match_id\",\"inning\",\"batting_team\"])[\"total_runs\"].sum().reset_index().pivot(\"match_id\",\"inning\",\"batting_team\").reset_index(drop = True)\ndf2 = score.groupby([\"match_id\",\"inning\",\"batting_team\"])[\"total_runs\"].sum().reset_index().pivot(\"match_id\",\"inning\",\"total_runs\").reset_index(drop = True)\n\n#Matches with super overs\ndf2.loc[df2[1]==df2[2]]\n\n#Removing matches with super overs then joining\ndf1 = df1.loc[df2[1]!=df2[2]][[1,2]]\ndf2 = df2.loc[df2[1]!=df2[2]][[1,2]]\n\ndf1.columns = [\"t1\",\"t2\"]\nmatch = pd.concat([df1, df2], axis=1, join='inner')\nmatch[\"Won\"] = np.where(match[1]>match[2], match[\"t1\"], match[\"t2\"])\nmatch[\"Lost\"] = np.where(match[1]>match[2], match[\"t2\"], match[\"t1\"])\nmatch.reset_index(inplace = True)\n\n\ndf = pd.melt(match, value_vars=['Won', 'Lost'], id_vars = \"index\").groupby([\"variable\",\"value\"]).count().reset_index().sort_values([\"variable\",\"index\"], ascending = False)\n\nplt.figure(figsize = (12,6))\nsns.barplot(\"value\",\"index\",\"variable\", data = df)\nplt.xticks(rotation = \"vertical\")\nplt.xlabel(\"Teams\")\nplt.ylabel(\"No. of Wins(blue) and Losses(orange)\")\nplt.title(\"No. of Wins and Loses Per Team\")\n","fd689f59":"batsman = score.groupby([\"batting_team\",\"batsman\"])[\"batsman_runs\"].agg(\"sum\").reset_index().sort_values([\"batting_team\",\"batsman_runs\"], ascending = False).groupby(\"batting_team\").head(1).sort_values(\"batsman_runs\", ascending = False).reset_index(drop = True)\nbatsman[\"team_player\"] = batsman[\"batting_team\"] + \"\\n\" + batsman[\"batsman\"]\n\nplt.figure(figsize=(12,6))\nsns.barplot(\"team_player\",\"batsman_runs\", data=batsman.loc[batsman[\"batting_team\"]!=\"Others\",:])\nplt.xticks(rotation = \"vertical\")\nplt.ylabel(\"Runs Scored\")\nplt.xlabel(\"Team and Best Batsman\")\nplt.title(\"Getting Best Batsman of all the Teams\")","cbc89bae":"\n\nbowler = score.groupby([\"bowler\",\"total_runs\"])[\"total_runs\"].agg(n = \"count\").unstack(fill_value = 0)    \nbowler[\"total\"] = np.floor(bowler.sum(axis=1)\/6)\nbowler = bowler.sort_values(\"total\",ascending = False)[:12].drop(\"total\", axis = 1)\nbowler.columns = list(map(str,(list(range(0,10)))))\nbowler.plot(kind = \"bar\", figsize = (12,6), stacked = True)\nplt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', title = \"Runs Given\")\nplt.title(\"Bowlers with Highest # of Balls and Runs composition of total balls bowled\")\n\n\nbatsman = score.groupby(\"batsman\")[\"batsman\"].agg(n = \"count\").reset_index().sort_values(\"n\",ascending = False)[:12]\nplt.figure(figsize = (12,6))\nsns.barplot(\"batsman\",\"n\", data = batsman)\nplt.xticks(rotation = \"vertical\")\nplt.ylabel(\"No. of balls played\")\nplt.title(\"Batsman with most number of balls played\")\n\nplt.show()","ebeed399":"\n#Check for thumb rull 1 - Nulls\ntrain.isnull().sum().sort_values(ascending = False)","635ec7b5":"#Fix null for column - umpire3\ntrain.drop(['umpire3'], inplace = True, axis = 1)","0e50e8bf":"#Fix null for column - city\ntrain[pd.isnull(train['city'])]","f3ad5a92":"train['city'] = train['city'].fillna(\"DUBAI\")","f414a338":"#Fix null for column - player_of_match\ntrain[pd.isnull(train['player_of_match'])]","c0de430f":"train['player_of_match'] = train['player_of_match'].fillna('RAGHU')","8a597382":"#Fix null for column - winner\ntrain[pd.isnull(train['winner'])]","b09e5657":"train['winner'] = train['winner'].fillna('DRAW')","bd9019ce":"#Fix null for column - umpire1\ntrain['umpire1'].value_counts() #Mode of the column","0d6b1765":"train['umpire1'] = train['umpire1'].fillna('S Ravi')","6ed4caa9":"#Fix null for column - umpire2\ntrain['umpire2'].value_counts() #Mode of the column","da13a3c5":"train['umpire2'] = train['umpire2'].fillna('SJA Taufel')","bedaa5b4":"train.info()\n","34e9de10":"# season, city, team1, team2, toss_winner, toss_decision, winner\ndf = train.drop(['id', 'date', 'result', 'dl_applied', 'win_by_runs', 'win_by_wickets',\n'player_of_match', 'venue',\n'umpire1', 'umpire2'], axis = 1)","8a0e9431":"df.info()\n","21b37035":"#Label Encode city, toss_decision using Label Encoder class\nfrom sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndf['city'] = le.fit_transform(df['city'])\ndf['toss_decision'] = le.fit_transform(df['toss_decision'])\ndf.head(5)","85a900ff":"df.info()","1d8025e7":"df.team1.value_counts()","92c188c0":"df['team1'].isnull()","77c28a5c":"#Label Encode team1, team2, winner, toss_winner, using Mapper\nteamMapper={\"Mumbai Indians\": 1, \"Chennai Super Kings\": 2, \"Kings XI Punjab\": 3, \"Royal Challengers Bangalore\" : 4, \n              \"Kolkata Knight Riders\" : 5,\"Delhi Daredevils\" : 6,\"Rajasthan Royals\" : 7,\"Sunrisers Hyderabad\" : 8,\n              \"Deccan Chargers\" : 9, \"Pune Warriors\" : 10,\"Gujarat Lions\" : 11,\"Rising Pune Supergiant\" : 12, \n              \"Kochi Tuskers Kerala\": 13,\"Rising Pune Supergiants\": 14, 'DRAW': 15}\nfor dataset in [df]:\n    dataset['team1'] = dataset['team1'].map(teamMapper)\n","db85c5c9":"df.team1 = pd.to_numeric(df.team1, errors='coerce').fillna(1).astype(np.int64)","bd48a1fe":"df['team1']","46ae2886":"for dataset in [df]:\n    dataset['team2'] = dataset['team2'].map(teamMapper)\n    dataset['toss_winner'] = dataset['toss_winner'].map(teamMapper)\n    dataset['winner'] = dataset['winner'].map(teamMapper)","5d0f9d9a":"df.team2 = pd.to_numeric(df.team2, errors='coerce').fillna(1).astype(np.int64)\ndf.toss_winner = pd.to_numeric(df.toss_winner, errors='coerce').fillna(1).astype(np.int64)\ndf.winner = pd.to_numeric(df.winner, errors='coerce').fillna(1).astype(np.int64)","04d3dac0":"df.head()","359337ef":"#X and Y #First Iteration\nX = df.drop(['winner', 'toss_winner', 'toss_decision'], axis=1)\ny = df['winner']\n\n#X and Y #Second Iteration\nX = df.drop(['winner'], axis = 1)\ny = df['winner']\n       \nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","81f7e25d":"#Goal 1 - predict win based on team1, team2, city, season, y = winner\n#Model Training - Gaussian NB\nfrom sklearn.naive_bayes import GaussianNB\nclf_gnb = GaussianNB()\nclf_gnb.fit(X_train, y_train)\ny_prediction_gnb = clf_gnb.predict(X_test)\naccuracy_score_gnb = clf_gnb.score(X_train, y_train)*100\nprint (accuracy_score_gnb)","7a6a1856":"#Model Training - KNN\nfrom sklearn.neighbors import KNeighborsClassifier\nclf_knn = KNeighborsClassifier(n_neighbors=3)\nclf_knn.fit(X_train, y_train)\ny_prediction_gnb = clf_knn.predict(X_test)\naccuracy_score_knn = clf_knn.score(X_train, y_train)*100\nprint (accuracy_score_knn)","628dad32":"points=pd.read_csv('..\/input\/points\/IPL_Points_Table.csv')","6a3d15b3":"points.head()","576ce9da":"train.head()","bc904466":"train = train.drop(['id','date','city','venue','umpire1','umpire2','result','dl_applied','win_by_runs','win_by_wickets','player_of_match','season'],axis=1)","4aec783f":"train","1288ba57":"def string_remover(df,list1=[],list2=[],drop=[],exclude=[],include=[]):\n    a = df.select_dtypes(include='object')\n    for i in a.columns:\n        list1=[]\n        d=0\n        if not i in exclude and i in include:\n            list1.append(i)\n            for x in a.index:\n                try:\n                    c = list1.index(a[i].iloc[x:x+1][x])\n                    a[i].iloc[x:x+1][x] = c\n                except:\n                    list1.append(a[i].iloc[x:x+1][x])\n                    a[i].iloc[x:x+1][x] = len(list1)-1\n            list2.append(list1)\n            d+=1\n    a.fillna(len(list1))\n    d = df.select_dtypes(exclude='object').fillna(0)\n    try:\n        return pd.concat([d,a],axis=1).fillna(0).drop([drop],axis=1)\n    except:\n        return pd.concat([d,a],axis=1).fillna(0)\n","39627bee":"train['win']=None\ntrain['toss_win']=None\nfor i in train.index:\n    if train.winner[i] == train.team1[i]:\n        train['win'][i] = 'team 1'\n    else:\n        train['win'][i] = 'team 2'    \n    if train.toss_winner[i] == train.team1[i]:\n        train['toss_win'][i] = 'team 1'\n    else:\n        train['toss_win'][i] = 'team 2'","0ce9a805":"a=[]\n","8b4be7c4":"b=['toss_decision', 'field', 'bat', 'toss_win', 'team 1', 'team 2']\n","0d59bf6a":"train","39480c7d":"train = string_remover(train,include=['toss_decision','toss_win'],list1=b,list2 = a)\n","698eae23":"b\n","4f609859":"train","0b32ac2c":"for i in [train[train['team2']=='Delhi Daredevils'].index,train[train['team2']=='Pune Warriors'].index],train[train['team2']=='Rising Pune Supergiants'].index:\n    for i in i:\n        train.drop(i,inplace=True)","844a1fb5":"for i in [train[train['team1']=='Delhi Daredevils'].index,train[train['team1']=='Pune Warriors'].index],train[train['team1']=='Rising Pune Supergiants'].index:\n    for i in i:\n        train.drop(i,inplace=True)","baa0527d":"train","f6f66991":"teamMapper={\"Mumbai Indians\": 1, \"Chennai Super Kings\": 2, \"Kings XI Punjab\": 3, \"Royal Challengers Bangalore\" : 4, \n              \"Kolkata Knight Riders\" : 5,\"Delhi Daredevils\" : 6,\"Rajasthan Royals\" : 7,\"Sunrisers Hyderabad\" : 8,\n              \"Deccan Chargers\" : 9, \"Gujarat Lions\" : 10,\"Rising Pune Supergiant\" : 11, \n              \"Kochi Tuskers Kerala\": 12,\"Rising Pune Supergiants\": 13,}\nfor dataset in [train]:\n    dataset['team1'] = dataset['team1'].map(teamMapper)\n\ntrain.team1 = pd.to_numeric(train.team1, errors='coerce').fillna(1).astype(np.int64)\n\nfor dataset in [train]:\n    dataset['team2'] = dataset['team2'].map(teamMapper)\n    dataset['toss_winner'] = dataset['toss_winner'].map(teamMapper)\n    dataset['winner'] = dataset['winner'].map(teamMapper)\n\ntrain.team2 = pd.to_numeric(train.team2, errors='coerce').fillna(1).astype(np.int64)\ntrain.toss_winner = pd.to_numeric(train.toss_winner, errors='coerce').fillna(1).astype(np.int64)\ntrain.winner = pd.to_numeric(train.winner, errors='coerce').fillna(1).astype(np.int64)","22d92bd7":"train","31c9e392":"train['Team1_pts'] = None\ntrain['Team1_RR'] = None\ntrain['Team2_pts'] = None\ntrain['Team2_RR'] = None\nfor i in train.index:\n    train['Team1_pts'][i] = points.Pts[train.team1[i]]\n    train['Team1_RR'][i] = points['Net RR'][train.team1[i]]\n    train['Team2_pts'][i] = points.Pts[train.team2[i]]\n    train['Team2_RR'][i] = points['Net RR'][train.team2[i]]\nfor i in train.index:\n    train['Team2_pts'][i] = points.Pts[train.team2[i]]\n    train['Team2_RR'][i] = points['Net RR'][train.team2[i]]","33dcec14":"points.set_index('Team')","06dd67c2":"from sklearn.ensemble import RandomForestClassifier,RandomForestRegressor","dcb11ddd":"RC = RandomForestClassifier(random_state=815)\n","5f85c91c":"train.win = train['win']\n","8a46e8cc":"train[['Team1_pts','Team1_RR','Team2_pts','Team2_RR',]]\n","bde2e52c":"RC.fit(X=train[['Team1_pts','Team1_RR','Team2_pts','Team2_RR','toss_decision','toss_win']],y=train.win)\n","fb0581e8":"def Predicter(team1,team2,toss_winner,toss_decision):\n    Team1_pts = points.Pts[team1]\n    Team1_RR = points['Net RR'][team1]\n    Team2_pts = points.Pts[team2]\n    Team2_RR = points['Net RR'][team2]\n    pred = RC.predict([[Team1_pts,Team1_RR,Team2_pts,Team2_RR,toss_decision,toss_winner]])\n    if pred == 'team 1':\n        return team1\n    else:\n        return team2\n","b7fd651a":"train","488675d5":"Predicter(1,2,toss_decision=1,toss_winner=2)","2ac48145":"from IPython.display import Image\nImage(\"..\/input\/mumbaiindians\/MumbaiIndians.png\")","f60c002e":"final_submission = {\"id\":test.id.tolist(), \n              \"winner\":Predicter}\nsubmission = pd.DataFrame(final_submission)","14a89284":"submission.to_csv(\"submission.csv\", index=False)","9d63f9a0":"There you see the big man. Gayle, the unassailable leader in the number of sixes.\n\nRaina is third in both number of 4's and 6's","bbdae59e":"# Team 1 MUMBAI INDIANS that actually WON\n","0d09fc00":"# **Season Which had most number of matches**","dfacb0b2":"# Number of matches in each venue:","c49797a7":"# Batsman analysis:\n**Let us start our analysis with batsman. Let us first see the ones with most number of IPL runs under their belt.**","468e6b1e":"# **Observation :**\n\n1. Mumbai Indians is the team which won by maximum and minimum runs**\n1. Kolkata Knight Riders is the team which won by maximum and minimum wickets","098ddadb":"# Number of matches played by each team:","ae048495":"# Scores Dataset","efa4d8cd":"**Team won by Maximum Runs**","e194ddd9":"# Top Umpires:","eac79066":"# Top players of the match:","5f944b14":"Batsman with more than 300 balls faced in taken and the ones with higher percentage of dot balls are seen. It is interesting to see Ganguly with more than 1000 balls and nearly half of them are dot balls. It is surprising to see names like Jayasuriya and Gibbs in there.!","6464bd83":"# Champions each season:\n\n**Now let us see the champions in each season.**","43cac1ee":"# Toss decision:\n\n**Let us see the toss decisions taken so far.**","466802aa":"**CH Gayle is the top player of the match awardee in all the seasons of IPL.**","6d8f5ba0":"**Harbhajan Singh is the the bowler with most number of balls bowled in IPL matches. Now let us see the bowler with more number of dot balls.**","2fc227b3":"Virat Kohli is leading the chart followed closely by Raina. rg Sharma is the top scorer among foreign players.","f381b2f7":"Almost 61% of the toss decisions are made to field first. Now let us see how this decision varied over time.","b41e9b64":"**CH Gayle & AB de Villiers** is the most Successful player in all match winners","03bd7036":"# Bowler Analysis\n**Now let us see the bowlers who has bowled most number of balls in IPL.**","6cbfbfbe":"# **In 2013, we have the most number of matches**","5c5e8a7e":"# Number of wins per team:","4a06ec4c":"It seems during the initial years, teams wanted to bat first. Voila.! Look at the 2016 season, most of the toss decisions are to field first.","2c3c3f18":"**Team won by Minimum Wickets**","1396ef2d":"**Team won by Maximum Wickets**","0dd5e3fa":"**It is interesting to see that the same names repeat again here as well. I think since these guys have played more number of balls, they have more dot balls as well.**","5f88a458":"**Team won by minimum runs**","563cb093":"\"Mumbai Indians\" lead the pack with most number of matches played followed by \"Royal Challengers Bangalore\". There are also teams with very few matches like 'Kochi Tuskers Kerla', 'Rising Pune supergaints'.","d066887b":"# Top Player of the match winners","2b9fcd9a":"**MI again leads the pack followed by CSK.**\n","d83fb287":"**Mumbai Indians** are the winners in most of the matches","e4c47876":"There are quite a few venues present in the data with \"Eden Gardens\" being the one with most number of matches followed by \"M Chinnaswamy Stadium\"","54ede679":"So percentage of times teams batting second has won is 53.7. Now let us split this by year and see the distribution.","5a7c2215":"**S Ravi** seems to be the most sought after umpire for IPL matches followed by HDPK Dharmasena. Others are fairly close to each other.","3b3a0422":"# Bowled most overs and Batted most balls","4778f142":"***\"Mumbai Indians\": 1\n\"Chennai Super Kings\": 2\n\"Kings XI Punjab\": 3\n\"Royal Challengers Bangalore\" : 4\n\"Kolkata Knight Riders\" : 5\n\"Delhi Daredevils\" : 6\n\"Rajasthan Royals\" : 7\n\"Sunrisers Hyderabad\" : 8\n\"Deccan Chargers\" : 9\n\"Gujarat Lions\" : 10\n\"Rising Pune Supergiant\" : 11\n\"Kochi Tuskers Kerala\": 12\n\"Rising Pune Supergiants\": 13***","3f31037c":"Caught is the most common dismissal type in IPL followed by Bowled. There are very few instances of hit wicket as well. 'Obstructing the field' is one of the dismissal type as well in IPL.!","7fce787b":"# **Malinga tops the chart with 221 extra runs followed by Pravin Kumar.**"}}