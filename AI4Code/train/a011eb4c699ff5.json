{"cell_type":{"269f4154":"code","8e12c1c3":"code","68cd5b9e":"code","0eb7bfb7":"code","ec27cadf":"code","c35dc1aa":"code","80b3fe58":"code","19cb3d94":"code","7c005cb1":"code","3bde1dc6":"code","8c7a80ae":"code","85bd30bd":"code","c7c78537":"code","48774b03":"code","29835e46":"code","69d57b3c":"code","1ff7dcd3":"code","d5f07b0b":"code","04cc0f78":"code","ef878938":"code","03b3422e":"code","6c9eed05":"code","1c3f8a76":"code","1421c64c":"code","d7b08541":"markdown","d47d1bc4":"markdown","74848995":"markdown","11cee458":"markdown","ea4ddd8b":"markdown","7af2592c":"markdown","2ffbe72f":"markdown","816c94db":"markdown"},"source":{"269f4154":"# Importing the standard libraries\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n%matplotlib inline\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split,GridSearchCV,RandomizedSearchCV\n\n# Model libraries\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.linear_model import Ridge\nfrom sklearn.ensemble import RandomForestRegressor","8e12c1c3":"# Importing the data\n\nuni = pd.read_csv(\"US_graduate_schools_admission_parameters_dataset.csv\")\nuni.head(10)","68cd5b9e":"uni.describe()","0eb7bfb7":"uni.isna().sum()","ec27cadf":"uni.dtypes","c35dc1aa":"uni.corr()","80b3fe58":"corr_mat = uni.corr()\nfig , ax = plt.subplots(figsize=(15,10))\nax = sns.heatmap(corr_mat,annot=True,linewidths=0.5,fmt=\".2f\",cmap=\"YlGnBu\")","19cb3d94":"uni = uni.drop(\"Serial No.\",axis = 1)","7c005cb1":"uni.head()","3bde1dc6":"x = uni.drop(\"Chance of Admit \",axis=1)\ny = uni[\"Chance of Admit \"]","8c7a80ae":"x","85bd30bd":"y","c7c78537":"# Splitting the data\nnp.random.seed(42)\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)","48774b03":"models = {'SDG Regression':SGDRegressor(),\n          'Ridge Regression':Ridge(),\n          'RandomForestRegressor':RandomForestRegressor()}\n\ndef fitmodel(models,x_train,x_test,y_train,y_test):\n    np.random.seed(42)\n    model_score = {}\n    for name,model in models.items():\n        model.fit(x_train,y_train)\n        model_score[name] = model.score(x_test,y_test)\n    return model_score","29835e46":"Score_model = fitmodel(models=models,x_train=x_train,x_test=x_test,y_train=y_train,y_test=y_test)\nScore_model","69d57b3c":"R_grid = {'alpha': (np.logspace(-4, 4, 100))}\nridge = Ridge(normalize=True)","1ff7dcd3":"np.random.seed(42)\n\nR_GS = GridSearchCV(Ridge(),param_grid=R_grid,cv=10)\nR_GS.fit(x_train,y_train)","d5f07b0b":"R_GS.best_params_","04cc0f78":"R_GS.best_score_","ef878938":"RandomForestRegressor().get_params()","03b3422e":"RF_grid = {\"n_estimators\" : np.arange(10, 1000, 50),\n           \"max_depth\" : [None, 3, 5, 10],\n           \"min_samples_split\" : np.arange(2, 20, 2),\n           \"min_samples_leaf\" : np.arange(1, 20, 2)}","6c9eed05":"np.random.seed(42)\n\nRF_GS = rs_rf = RandomizedSearchCV(RandomForestRegressor(),\n                           param_distributions = RF_grid,\n                           cv = 5,\n                           n_iter = 20,\n                           verbose = True)\nRF_GS.fit(x_train,y_train)","1c3f8a76":"RF_GS.best_score_","1421c64c":"Score_model","d7b08541":"## Data\n\nthe dataset consist of 9 column in which one is serial number we can ignore it.\n\n> Attributes\n\n* GRE Score\n* TOFEL Score\n* University ranking\n* SOP\n* LOR\n* CGPA\n* Research\n\n> Target\n\n* Chance of Admit","d47d1bc4":"> Problem statement\n\nGiven some details of a student we want to predict the chance of getting admission in the university","74848995":"Method Followed\n\n* Problem statemant\n* Data\n* Model fitting\n* Hypertuning\n* Evaluation","11cee458":"## Hypertuning \n","ea4ddd8b":"> RandomForest","7af2592c":"As we can see serial number is close to 0(not correlated) so we can drop it\nRemaining column are positively correlated with our target column","2ffbe72f":"# Chance of getting admission ","816c94db":"## Fitting the model\n"}}