{"cell_type":{"cb34e3b3":"code","fefd3acb":"code","6c59e73c":"code","d31a70f8":"code","2c5a19c0":"code","3b947b6e":"code","0b15f862":"code","136dffa7":"code","57de892a":"code","c5ea7b65":"code","d1895173":"code","229a8d20":"code","8d8cc5ca":"code","b0ff31f0":"code","8dcf0107":"code","539b0ffe":"code","9530e52f":"code","05a2611d":"code","38ad12c9":"code","3733465d":"code","d10d6617":"code","e98023dd":"code","fdd3152c":"code","547084a2":"code","3202ee20":"code","2d6a170f":"code","c29c378f":"code","812c15b2":"code","9b5310d4":"code","4470b35d":"code","7cbc0357":"code","ae89628a":"code","13a5c0c8":"code","ca863f06":"code","66f5ce2b":"code","64cc440e":"code","32bfe7a0":"code","46e18d9d":"code","6972493c":"code","be548f7f":"code","61917b7e":"code","20bb394b":"code","66e36923":"code","69081f4f":"code","7712e824":"code","87b2ad76":"code","ed84aac1":"code","51e2355f":"code","1180c8b0":"code","6200784f":"code","2fc60043":"code","3a91b58c":"code","768b6543":"code","1e55495e":"code","9c07052e":"code","85e5a4a1":"code","78b41675":"code","48643030":"code","a7554248":"code","68eee899":"code","efbece5f":"code","9e0d98ba":"code","e222a875":"code","ad36062f":"code","c272c153":"code","4a35b2c0":"code","233fdf59":"code","f7f8bcc5":"code","0c867acc":"code","48ee3087":"code","b571e131":"code","1445c773":"code","46028795":"code","02bf655f":"code","1b7674a5":"code","2322f0d0":"markdown","bad3f736":"markdown","7ec04ead":"markdown","ae65ef44":"markdown","233fa911":"markdown","d36db2d0":"markdown","ead2ac92":"markdown","bd0df3e3":"markdown","b3ad1ac5":"markdown","9ef0578c":"markdown","0489afa6":"markdown","5b9c71a4":"markdown","1ff82132":"markdown","f3e4889a":"markdown","fb98eff4":"markdown","63aa1129":"markdown","7e700ba9":"markdown","b3876a94":"markdown","a906208e":"markdown","04c69467":"markdown","f3ca5644":"markdown","2999e152":"markdown","cbd05a70":"markdown","06685481":"markdown","381cfcae":"markdown","e4fe2f79":"markdown","efcddec0":"markdown","783032b1":"markdown","86c72d75":"markdown","f0172c19":"markdown","0be5afb3":"markdown","f4b7b6af":"markdown","2aeedacb":"markdown","7fd61ade":"markdown","80952a70":"markdown","566f70f1":"markdown","b7cf3b00":"markdown","91a68848":"markdown","2684d174":"markdown","fac7cac5":"markdown","315752ab":"markdown","1816316a":"markdown","6ee592c9":"markdown","f2e02364":"markdown","d1afc0f1":"markdown"},"source":{"cb34e3b3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport gc\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('max_columns', 150)\npd.set_option('max_rows', 150)","fefd3acb":"import matplotlib.pyplot as plt\nfrom matplotlib import rcParams\nimport seaborn as sns\nfrom scipy import stats\n#To plot figs on jupyter\n%matplotlib inline\n# figure size in inches\nrcParams['figure.figsize'] = 14,6\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\nimport warnings\nwarnings.filterwarnings('ignore')\npd.set_option('max_columns', 200)\npd.set_option('max_rows', 200)","6c59e73c":"PATH =   r\"\/kaggle\/input\/features\/FEATURES-2014-2015\/\"\ndf = pd.read_csv(PATH+\"part-067.csv\")\ndf.shape","d31a70f8":"df.columns","2c5a19c0":"df.head()","3b947b6e":"df.dtypes","0b15f862":"df.isAnomaly.value_counts()","136dffa7":"df[df['isAnomaly']==True].describe()","57de892a":"from plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected = True)\n\ndef line_plot_check_nan(df1, df2, x, y, title, width, height):\n    \n    trace1 = go.Scatter(\n        x = df1[x],\n        y = df1[y],\n        mode='lines',\n        name='with_nans',\n        marker = dict(\n            color = '#1E90FF', \n        ), \n    )\n    \n    df3 = df2.dropna()\n    trace2 = go.Scatter(\n        x = df3[x],\n        y = df3[y],\n        mode='markers',\n        name='no_nans',\n        marker = dict(\n            color = 'red', \n        ), \n    )\n    \n    layout = go.Layout(\n        title = go.layout.Title(\n            text = title,\n            x = 0.5\n        ),\n        font = dict(size = 14),\n        width = width,\n        height = height,\n    )\n    \n    data = [trace1, trace2]\n    fig = go.Figure(data = data, layout = layout)\n    py.iplot(fig, filename = 'line_plot')","c5ea7b65":"line_plot_check_nan(df[df['isAnomaly']==True], df[df['isAnomaly']==True], 'timestamp', \"Heap usage activity : (d\/dx (MXBean(java.lang:type=Memory).HeapMemoryUsage.used))\",\" Memory space usage by date\", 1400, 600)","d1895173":"line_plot_check_nan(df[df['isAnomaly']==False], df[df['isAnomaly']==False], 'timestamp', \"Heap usage activity : (d\/dx (MXBean(java.lang:type=Memory).HeapMemoryUsage.used))\",\" Memory space usage by date\", 1400, 600)","229a8d20":"# Plots the disribution of a variable colored by value of the target\ndef kde_target(var_name, df):\n    \n    # Calculate the correlation coefficient between the new variable and the target\n    corr = df['isAnomaly'].corr(df[var_name])\n    \n    # Calculate medians for repaid vs not repaid\n    avg_highr = df.loc[df['isAnomaly'] == 0, var_name].median()\n    avg_lowr = df.loc[df['isAnomaly'] == 1, var_name].median()\n    \n    plt.figure(figsize = (12, 6))\n    \n    # Plot the distribution for target == 0 and target == 1\n    sns.kdeplot(df.loc[df['isAnomaly'] == 0, var_name], label = 'isAnomaly == 0')\n    sns.kdeplot(df.loc[df['isAnomaly'] == 1, var_name], label = 'isAnomaly == 1')\n    \n    # label the plot\n    plt.xlabel(var_name); plt.ylabel('Density'); plt.title('%s Distribution' % var_name)\n    plt.legend();\n    \n    # print out the correlation\n    print('The correlation between %s and the TARGET is %0.4f' % (var_name, corr))\n    # Print out average values\n    print('Median value for request with high runtime value = %0.4f' % avg_highr)\n    print('Median value for request with low runtime value =     %0.4f' % avg_lowr)\n","8d8cc5ca":"df.head(1)","b0ff31f0":"    \nkde_target(r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)', df[[r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)','isAnomaly']].dropna(),)","8dcf0107":"   \n\nkde_target(r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))', df[[r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))','isAnomaly']].dropna(),)","539b0ffe":"kde_target('Heap usage activity : (d\/dx (MXBean(java.lang:type=Memory).HeapMemoryUsage.used))', df[['Heap usage activity : (d\/dx (MXBean(java.lang:type=Memory).HeapMemoryUsage.used))','isAnomaly']].dropna(),)","9530e52f":"## DATASET 1\nmu, sigma = 0.0, 1.0\nent1 = np.zeros((10000))\nfor i in range(10):\n#     print(mu)\n    for j in range(1000):\n        ent1[1000*i+j] = np.random.normal(mu, sigma)\n    mu = mu + 9 - i\n\na1 = 0.6\na2 = -0.5\nds1 = np.zeros((10000))\nds1[0] = ent1[0]\nds1[1] = ent1[1]\nfor i in range(2,10000):\n    ds1[i] = a1*ds1[i-1] + a2*ds1[i-2] + ent1[i]\n## DATASET 2\nmu = 0.0\nent2 = np.zeros((10000))\nfor i in range(10):\n#     print(mu)\n    for j in range(1000):\n        sigma = 0.1\/(0.01 + (10000 - (i*1000 + j))\/10000)\n        ent2[1000*i+j] = np.random.normal(mu, sigma)\n    mu = mu + 1\n\na1 = 0.6\na2 = -0.5\nds2 = np.zeros((10000))\nds2[0] = ent1[0]\nds2[1] = ent1[1]\nfor i in range(2,10000):\n    ds2[i] = a1*ds2[i-1] + a2*ds2[i-2] + ent2[i]\n\n## DATASET 3\nmu, sigma1, sigma3 = 0.0, 1.0, 3.0\nds3 = np.zeros((10000))\nfor i in range(10):\n    if i in {0,2,4,6,8}:\n        for j in range(1000):\n            ds3[1000*i+j] = np.random.normal(mu, sigma1)\n    else:\n        for j in range(1000):\n            ds3[1000*i+j] = np.random.normal(mu, sigma3) ","05a2611d":"plt.figure(figsize=(16,4))\nplt.plot(ent1)\nplt.title('Dataset 1')\nplt.ylabel('Values')\nplt.xlabel('Count')\nplt.legend()\n\nplt.figure(figsize=(16,4))\nplt.plot(ent2)\nplt.title('Dataset 2')\nplt.ylabel('Values')\nplt.xlabel('Count')\nplt.legend()\n\nplt.figure(figsize=(16,4))\nplt.plot(ds1)\nplt.title('Dataset 3')\nplt.ylabel('Values')\nplt.xlabel('Count')\nplt.legend()\n\nplt.figure(figsize=(16,4))\nplt.plot(ds2)\nplt.title('Dataset 4')\nplt.ylabel('Values')\nplt.xlabel('Count')\nplt.legend()\n\nplt.figure(figsize=(16,4))\nplt.plot(ds3)\nplt.title('Dataset 5')\nplt.ylabel('Values')\nplt.xlabel('Count')\nplt.legend()\n\nplt.show()","38ad12c9":"!pip install changefinder\nimport changefinder","3733465d":"def changeFinderALLData(data, r, order, smooth):\n    cf = changefinder.ChangeFinder(r=r, order=order, smooth=smooth)\n    scores = [cf.update(p) for p in data]\n    return scores","d10d6617":"dataplot1 = changeFinderALLData(ent1, r=0.01, order=2, smooth=5)    \ndataplot2 = changeFinderALLData(ent2, r=0.01, order=3, smooth=5) \ndataplot3 = changeFinderALLData(ds1, r=0.01, order=2, smooth=5)    \ndataplot4 = changeFinderALLData(ds2, r=0.01, order=3, smooth=5)        \ndataplot5 = changeFinderALLData(ds3, r=0.02, order=3, smooth=5) ","e98023dd":"dataCHANGEFINGER_dataset1 = np.array(dataplot1)\nfrom scipy import stats\ndataCHANGEFINGER_dataset1 = stats.describe(dataplot1)\ndataCHANGEFINGER_dataset1","fdd3152c":"qt25_ds1 = np.percentile(dataplot1, 25)  # Q1\nqt50_ds1 = np.percentile(dataplot1, 50)  # Q2\nqt75_ds1 = np.percentile(dataplot1, 75)  # Q3\nqt25_ds1,qt50_ds1, qt75_ds1","547084a2":"dfCHANGEFINGER_dataset1 = pd.DataFrame(dataplot1, columns=['Score'])","3202ee20":"def plot_anomaly_score_low_higt(datascore, data):\n    datascore_ = np.array(datascore)\n    from scipy import stats\n    datascore_ = stats.describe(datascore)\n    \n    datascore_ = pd.DataFrame(datascore, columns=['Score'])\n\n    delta = np.percentile(datascore, 75)\n    print('Threashold ',delta)\n\n    plt.figure(figsize=(16,6))\n    plt.plot(data)\n    plt.title(\"data count\")        \n\n    plt.figure(figsize=(16,6))\n    plt.plot(datascore)\n    plt.title(\"data count\")        \n\n    \n    plt.figure(figsize=(16,6))\n    df_high_data_ = datascore_[datascore_ <= delta]\n    df_high_score_ = datascore_[datascore_ > delta]\n    \n    plt.plot(datascore_.index, datascore_.Score.fillna(1), c='gray', alpha=0.4)\n    plt.scatter(df_high_data_.index, df_high_data_.values, label='Inline', s=10)\n    plt.scatter(df_high_score_.index, df_high_score_.values, label='Outlier', c='red', s=10)\n    plt.margins(x=0.01,y=0.2)\n    plt.title('Anomaly Score ')\n    plt.ylabel('Score')\n    plt.xlabel('Data Count')\n    plt.legend()\n    plt.show()","2d6a170f":"plot_anomaly_score_low_higt(dataplot1, ent1)","c29c378f":"plot_anomaly_score_low_higt(dfCHANGEFINGER_dataset1, ent1)","812c15b2":"dataCHANGEFINGER_dataset2 = np.array(dataplot2)\nfrom scipy import stats\ndataCHANGEFINGER_dataset2 = stats.describe(dataplot2)\ndataCHANGEFINGER_dataset2","9b5310d4":"qt25_ds2 = np.percentile(dataplot2, 25)  # Q1\nqt50_ds2 = np.percentile(dataplot2, 50)  # Q2\nqt75_ds2 = np.percentile(dataplot2, 75)  # Q3\nqt25_ds2,qt50_ds2, qt75_ds2","4470b35d":"dfCHANGEFINGER_dataset2 = pd.DataFrame(dataplot2, columns=['Score'])","7cbc0357":"plot_anomaly_score_low_higt(dfCHANGEFINGER_dataset2, ent2)","ae89628a":"dataCHANGEFINGER_dataset3 = np.array(dataplot3)\nfrom scipy import stats\ndataCHANGEFINGER_dataset3 = stats.describe(dataplot3)\ndataCHANGEFINGER_dataset3","13a5c0c8":"qt25_ds3 = np.percentile(dataplot3, 25)  # Q1\nqt50_ds3 = np.percentile(dataplot3, 50)  # Q2\nqt75_ds3 = np.percentile(dataplot3, 75)  # Q3\nqt25_ds3,qt50_ds3, qt75_ds3","ca863f06":"dfCHANGEFINGER_dataset3 = pd.DataFrame(dataplot3, columns=['Score'])\n","66f5ce2b":"plot_anomaly_score_low_higt(dfCHANGEFINGER_dataset3, ds1)\n","64cc440e":"dataCHANGEFINGER_dataset4 = np.array(dataplot4)\nfrom scipy import stats\ndataCHANGEFINGER_dataset4 = stats.describe(dataplot4)\ndataCHANGEFINGER_dataset4","32bfe7a0":"qt25_ds4 = np.percentile(dataplot4, 25)  # Q1\nqt50_ds4 = np.percentile(dataplot4, 50)  # Q2\nqt75_ds4 = np.percentile(dataplot4, 75)  # Q3\nqt25_ds4, qt50_ds4, qt75_ds4","46e18d9d":"dfCHANGEFINGER_dataset4 = pd.DataFrame(dataplot4, columns=['Score'])","6972493c":"plot_anomaly_score_low_higt(dfCHANGEFINGER_dataset4, ds2)","be548f7f":"\ndataCHANGEFINGER_dataset5 = np.array(dataplot5)\nfrom scipy import stats\ndataCHANGEFINGER_dataset5 = stats.describe(dataplot5)\ndataCHANGEFINGER_dataset5","61917b7e":"\nqt25_ds5 = np.percentile(dataplot5, 25)  # Q1\nqt50_ds5 = np.percentile(dataplot5, 50)  # Q2\nqt75_ds5 = np.percentile(dataplot5, 75)  # Q3\nqt25_ds5, qt50_ds5, qt75_ds5","20bb394b":"dfCHANGEFINGER_dataset5 = pd.DataFrame(dataplot5, columns=['Score'])\n","66e36923":"plot_anomaly_score_low_higt(dfCHANGEFINGER_dataset5, ds3)","69081f4f":"from scipy.stats import norm, skew","7712e824":"(mu, sigma) = norm.fit(df.loc[df['isAnomaly'] == 1, r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))'])\nprint(\n    'Memory space usage : anomaly {:.1f} and standard deviation = {:.1f}'.format(mu, sigma))","87b2ad76":"(mu, sigma) = norm.fit(df.loc[df['isAnomaly'] == 1, r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)'])\nprint(\n    'Thread CPU time : anomaly {:.1f} and standard deviation = {:.1f}'.format(mu, sigma))","ed84aac1":"plt.figure(figsize=(15,6))\nplt.style.use('seaborn-colorblind')\nplt.grid(True, alpha=0.5)\nsns.kdeplot(df.loc[df['isAnomaly'] == 0, r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)'], label = 'Inline')\nsns.kdeplot(df.loc[df['isAnomaly'] == 1, r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)'], label = 'Outlier')\nplt.xlabel('Thread CPU time anomaly analysis')\nplt.xlim(left=0)\nplt.ylabel('Density')\nplt.title('Thread CPU time Distribution in Percent by Anomaly Event');","51e2355f":"plt.figure(figsize=(15,6))\nplt.style.use('seaborn-colorblind')\nplt.grid(True, alpha=0.5)\nsns.kdeplot(df.loc[df['isAnomaly'] == 0, r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))'], label = 'Inline')\nsns.kdeplot(df.loc[df['isAnomaly'] == 1, r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))'], label = 'Outlier')\nplt.xlabel('Memory space usage anomaly analysis')\nplt.xlim(left=0)\nplt.ylabel('Density')\nplt.title('Memory space usage Distribution in Percent by Anomaly Event');","1180c8b0":"\n\ndf[[r'timestamp','isAnomaly', r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)', r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']][df['isAnomaly']==1].head()  \n\n\n","6200784f":"df[r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)'].value_counts()","2fc60043":"df['Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))'].value_counts()","3a91b58c":"dataplot_ThreadCPUtime = changeFinderALLData(df[[r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)']].values, r=0.01, order=1, smooth=5)    \n# dataplot_ThreadCPUtime","768b6543":"dataplot_memoryspaceusage = changeFinderALLData(df[['Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']].values, r=0.01, order=1, smooth=5)    \n# dataplot_memoryspaceusage","1e55495e":"\ndataCHANGEFINGER_memoryspaceusage = np.array(dataplot_memoryspaceusage)\nfrom scipy import stats\ndataCHANGEFINGER_memoryspaceusage = stats.describe(dataplot_memoryspaceusage)\ndataCHANGEFINGER_memoryspaceusage\n","9c07052e":"qt25_memoryusage = np.percentile(dataplot_memoryspaceusage, 25)  # Q1\nqt50_memoryusage = np.percentile(dataplot_memoryspaceusage, 50)  # Q2\nqt75_memoryusage = np.percentile(dataplot_memoryspaceusage, 75)  # Q3\nqt25_memoryusage, qt50_memoryusage, qt75_memoryusage\ndataCHANGEFINGER_memoryspaceusage = pd.DataFrame(dataplot_memoryspaceusage, columns=['Score'])\n","85e5a4a1":"plot_anomaly_score_low_higt(dataplot_memoryspaceusage, df[['Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']].values)","78b41675":"# df[[r'timestamp','isAnomaly', r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)', r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']][df['isAnomaly']==1][ r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)']\n# df_high_data_\n# df.timestamp.values","48643030":"plt.figure(figsize=(16,6))\ndf_high_data_ = df[[r'timestamp','isAnomaly', r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)', r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']][df['isAnomaly']==1][ r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']\ndf_high_score_ = df[[r'timestamp','isAnomaly', r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)', r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']][df['isAnomaly']==0][ r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']\n\n    \nplt.plot(df.index, df.isAnomaly.fillna(1), c='gray', alpha=0.4)\nplt.scatter(df_high_data_.index, df_high_data_.values, label='Inline', s=30)\nplt.scatter(df_high_score_.index, df_high_score_.values, label='Outlier', c='red', s=10)\nplt.margins(x=0.01,y=0.2)\nplt.title('Values Grand truth ')\nplt.ylabel('Values')\nplt.xlabel('Data Count')\nplt.legend()\nplt.show()","a7554248":"dataCHANGEFINGER_ThreadCPUtime = np.array(dataplot_ThreadCPUtime)\nfrom scipy import stats\ndataCHANGEFINGER_ThreadCPUtime = stats.describe(dataplot_ThreadCPUtime)\ndataCHANGEFINGER_ThreadCPUtime\n","68eee899":"qt25_ThreadCPUtime = np.percentile(dataplot_ThreadCPUtime, 25)  # Q1\nqt50_ThreadCPUtime = np.percentile(dataplot_ThreadCPUtime, 50)  # Q2\nqt75_ThreadCPUtime = np.percentile(dataplot_ThreadCPUtime, 75)  # Q3\nqt25_ThreadCPUtime, qt50_ThreadCPUtime, qt75_ThreadCPUtime\ndataCHANGEFINGER_ThreadCPUtime = pd.DataFrame(dataplot_ThreadCPUtime, columns=['Score'])\n","efbece5f":"plot_anomaly_score_low_higt(dataplot_ThreadCPUtime, df[['Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)']].values)","9e0d98ba":"plt.figure(figsize=(16,6))\ndf_high_data_ = df[[r'timestamp','isAnomaly', r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)', r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']][df['isAnomaly']==1][ r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)']\ndf_high_score_ = df[[r'timestamp','isAnomaly', r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)', r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']][df['isAnomaly']==0][ r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)']\n\n    \nplt.plot(df.index, df.isAnomaly.fillna(1), c='gray', alpha=0.4)\nplt.scatter(df_high_data_.index, df_high_data_.values, label='Inline', s=40)\nplt.scatter(df_high_score_.index, df_high_score_.values, label='Outlier', c='red', s=10)\nplt.margins(x=0.01,y=0.2)\nplt.title('Values Grand truth ')\nplt.ylabel('Values')\nplt.xlabel('Data Count')\nplt.legend()\nplt.show()","e222a875":"!pip install fbprophet\nfrom fbprophet import Prophet\nimport os","ad36062f":"# View the data as a table\ndf_ = pd.DataFrame(df, columns=['timestamp', r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)'])\ndf_['ds']=df_['timestamp']\ndf_['y']=df_[r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)'].astype(float)\ndf_=df_.drop(['timestamp',r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)'],axis=1)\ndf_.head()","c272c153":"def fit_predict_model(dataframe, interval_width = 0.99, changepoint_range = 0.8):\n    m = Prophet(daily_seasonality = False, yearly_seasonality = False, weekly_seasonality = False,\n#                 seasonality_mode = 'multiplicative', \n                interval_width = interval_width,\n                changepoint_range = changepoint_range)\n    m = m.fit(dataframe)\n    \n    forecast = m.predict(dataframe)\n    forecast['fact'] = dataframe['y'].reset_index(drop = True)\n    print('Displaying Prophet plot')\n    fig1 = m.plot(forecast)\n    return forecast\n    \npred = fit_predict_model(df_)","4a35b2c0":"pred.tail()","233fdf59":"def detect_anomalies(forecast):\n    forecasted = forecast[['ds','trend', 'yhat', 'yhat_lower', 'yhat_upper', 'fact']].copy()\n    #forecast['fact'] = df['y']\n\n    forecasted['anomaly'] = 0\n    forecasted.loc[forecasted['fact'] > forecasted['yhat_upper'], 'anomaly'] = 1\n    forecasted.loc[forecasted['fact'] < forecasted['yhat_lower'], 'anomaly'] = 1 #-1\n\n    #anomaly importances\n    forecasted['importance'] = 0\n    forecasted.loc[forecasted['anomaly'] ==1, 'importance'] = \\\n        (forecasted['fact'] - forecasted['yhat_upper'])\/forecast['fact']\n    forecasted.loc[forecasted['anomaly'] ==-1, 'importance'] = \\\n        (forecasted['yhat_lower'] - forecasted['fact'])\/forecast['fact']\n    \n    return forecasted\n\npred = detect_anomalies(pred)","f7f8bcc5":"pred.head()","0c867acc":"pred[ r'anomaly'].value_counts()","48ee3087":"plt.figure(figsize=(16,6))\ndf_outlier_ = pred[[r'ds','anomaly', r'yhat']][pred['anomaly']==1][ r'yhat']\n# df_outlier = pred[[r'ds','anomaly', r'yhat']][pred['anomaly']==-1][ r'yhat']\n\ndf_inline_ = pred[[r'ds','anomaly', r'yhat']][pred['anomaly']==0][ r'yhat']\n\nplt.plot(pred.index, pred.anomaly.fillna(1), c='gray', alpha=0.4)\nplt.scatter(df_inline_.index, df_inline_.values, label='Inline', s=40)\nplt.scatter(df_outlier_.index, df_outlier_.values, label='Outlier', c='red', s=10)\n# plt.scatter(df_outlier.index, df_outlier.values, label='Outlier', c='black', s=10)\nplt.margins(x=0.01,y=0.2)\nplt.title('Values Grand truth ')\nplt.ylabel('Values')\nplt.xlabel('Data Count')\nplt.legend()\nplt.show()","b571e131":"plt.figure(figsize=(16,6))\ndf_high_data_ = df[[r'timestamp','isAnomaly', r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)', r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']][df['isAnomaly']==1][ r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']\ndf_high_score_ = df[[r'timestamp','isAnomaly', r'Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)', r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']][df['isAnomaly']==0][ r'Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))']\n\n    \nplt.plot(df.index, df.isAnomaly.fillna(1), c='gray', alpha=0.4)\nplt.scatter(df_high_data_.index, df_high_data_.values, label='Inline', s=30)\nplt.scatter(df_high_score_.index, df_high_score_.values, label='Outlier', c='red', s=10)\nplt.margins(x=0.01,y=0.2)\nplt.title('Values Grand truth ')\nplt.ylabel('Values')\nplt.xlabel('Data Count')\nplt.legend()\nplt.show()","1445c773":"import plotly.graph_objs as go\nimport plotly as py\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)","46028795":"trace = go.Scatter(\n        name = 'Thread CPU time',\n       mode = 'markers',\n       x = list(df['timestamp']),\n       y = list(df['Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)']),\n       marker=dict(\n              color='#FFBAD2',\n              line=dict(width=1)\n       )\n)\ntrace1 = go.Scatter(\n    name = 'trend',\n       mode = 'lines',\n       x = list(pred['ds']),\n       y = list(pred['yhat']),\n       marker=dict(\n              color='red',\n              line=dict(width=1)\n       )\n)\nupper_band = go.Scatter(\n    name = 'upper band',\n        mode = 'lines',\n        x = list(pred['ds']),\n        y = list(pred['yhat_upper']),\n        line= dict(color='#57b88f'),\n        fill = 'tonexty'\n)\nlower_band = go.Scatter(\n    name= 'lower band',\n        mode = 'lines',\n        x = list(pred['ds']),\n        y = list(pred['yhat_lower']),\n        line= dict(color='#1705ff')\n)\ndata = [trace, trace1, lower_band, upper_band]\nlayout = dict(title='Thread CPU time Estimation',\n             xaxis=dict(title = 'Dates', ticklen=2, zeroline=False))\nfigure=dict(data=data,layout=layout)","02bf655f":"py.offline.iplot(figure)","1b7674a5":"# import os \n# inputFolder = '..\/input\/' \n# for root, directories, filenames in os.walk(inputFolder): \n#     for filename in filenames: print(os.path.join(root,filename))","2322f0d0":"\n### df CHANGEFINGER Memory Space Usage \n","bad3f736":"Thread CPU time results","7ec04ead":"### Raw Operational Data from Enterprise Application\nA dataset for anomaly detection in operations of distributed software systems\n\n### Software Operational Data, Processed and Labeled\nA dataset for anomaly detection in operations of distributed software systems","ae65ef44":"### df CHANGEFINGER dataset5","233fa911":"# Remember the upvote button is next to the fork button, and it's free too! ;)\n\n### Don't hesitate to give your suggestions in the comment section","d36db2d0":"Plots\/ Threashold in 75%  Quartil","ead2ac92":"# Approachs\n\nIn this tutorial, I  use the anomaly detection algorithm proposed in\n\"**A Unifying Framework for Detecting Outliers and Change Points from Time Series**\", Jun-ichi Takeuchi, 2006;\n","bd0df3e3":"Plot \/ Threashold in 75% Quartil","b3ad1ac5":"Plots\/ Threashold in 75%  Quartil","9ef0578c":"# Introduction\nAnomaly detection has applications in many fields, such as system health monitoring, fraud detection, and intrusion detection.\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F3595464%2F4088133a20318f4e47e1e2d738509d12%2F__results___5_0.png?generation=1590869249365044&alt=media)\n","0489afa6":"Thread CPU time","5b9c71a4":"### Import Libs","1ff82132":"- dataset 1, the Gaussian random variable have mean 0 and variance = 1 and we let a1 =0,6 and a2 = 0,5. This data\nset consists of 10,000 records. Change points occur at time * 1000 (x=1,2,3...,9).\n\n- The second data set is a data sequence such that each data between change points was drawn according to the AR model ((6), a1 = 0,6 and a2 = 0,5) in which variance\nof the noise term changes gradually over time.\n\n- The third data set is a data sequence such that at each change point, variance suddenly changes, and each data in\na range between the change points is i.i.d. (independently identically distributed).\n\n","f3e4889a":"# Anomaly Detection - Thread CPU time, Memory space usage.","fb98eff4":"### df CHANGEFINGER dataset2","63aa1129":"# Propeth Anomaly Detection\n\n> see this: (Anomaly detection in time series with Prophet library)[https:\/\/towardsdatascience.com\/anomaly-detection-time-series-4c661f6f165f]","7e700ba9":"### Test in the dataset -  Read in data.","b3876a94":"### Detecting Anomalies:\n- The light blue boundaries in the above graph are yhat_upper and yhat_lower.\n- If y value is greater than yhat_upper and less than yhat lower then it is an anomaly.\n- Also getting the importance of that anomaly based on its distance from yhat_upper and yhat_lower.","a906208e":"Anomaly value counts","04c69467":"Let's create a kernel density estimation (KDE) plot colored by the **Memory space usage** of the **Anomaly**. A kernel density estimation (KDE) is a non-parametric way to estimate the probability density function of a random variable. It will allow us to identify if there is a correlation between the **Memory space usage** and **Anomaly**.","f3ca5644":"### Change Finger\n\n\nOur change point detection scheme in which we employ two-stage time-series learning, which we\nnamed ChangeFinder. We illustrate ChangeFinder in Figure below. A remarkable aspect of ChangeFinder is that it repeats the\nlearning process twice, where the outlier detection is first done using the model learned in the first stage and change\npoint detection is done using the learned model in the second one.\n![Flow%20of%20ChangeFinder.PNG](attachment:Flow%20of%20ChangeFinder.PNG)","2999e152":"Plots\/ Threashold in 75%  Quartil","cbd05a70":"Thread CPU time : (MXBean(java.lang:type=Threading).CurrentThreadCpuTime)","06685481":"### df CHANGEFINGER dataset1","381cfcae":"# Generic Data \n> We prepared three kinds of data sets: 1) jumping mean with constant variance, 2) jumping mean with varying variance,\nand 3) jumping variance with constant mean.","e4fe2f79":"Detect Anomalies","efcddec0":"Plots\/ Threashold in 75%  Quartil","783032b1":"Memory space usage","86c72d75":"Memory space usage","f0172c19":"# Glipse Data","0be5afb3":"### Visualizations","f4b7b6af":"### df CHANGEFINGER dataset4","2aeedacb":"### df CHANGEFINGER dataset 3","7fd61ade":"### df CHANGEFINGER Memory Space Usage \n","80952a70":"# KDE - Memory space usage","566f70f1":"Heap usage activity : (d\/dx (MXBean(java.lang:type=Memory).HeapMemoryUsage.used))","b7cf3b00":"Let's create a kernel density estimation (KDE) plot colored by the **Thread CPU time** of the **Anomaly**. A kernel density estimation (KDE) is a non-parametric way to estimate the probability density function of a random variable. It will allow us to identify if there is a correlation between the **Thread CPU time** and **Anomaly**.","91a68848":"# Plots\/ Threashold in 75%  Quartil","2684d174":"# Plots\/ Threashold in 75%  Quartil","fac7cac5":"Memory space usage : ((MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.committed \/ MXBean(java.lang:name=Code Cache,type=MemoryPool).Usage.max))","315752ab":"Thread CPU time","1816316a":"Propeth Prediction","6ee592c9":"## End Notebook","f2e02364":"# Change Finger \n> Detecting Outliers and Change Points from Time Series\n","d1afc0f1":"# KDE - Thread CPU time"}}