{"cell_type":{"1519371d":"code","bdc0f36f":"code","17ac9028":"code","81290d8c":"code","e2d88126":"code","73b45fd1":"code","0bd74e2c":"code","0b71c77b":"code","15fda8a8":"code","04d4c64e":"code","68731580":"code","aecc863b":"code","66521fe5":"code","3d4d1d03":"code","fbf1b13b":"code","cf46ec32":"code","fe2c7800":"code","07a55e87":"code","2eab9f0b":"code","de8b6a23":"code","c3ff096e":"code","54cab8c3":"code","296617dd":"code","07eadaa7":"code","62eb3f0d":"code","6b8b3e4b":"code","ca18439b":"code","684fd5d3":"code","32d55577":"code","af8a08ff":"code","526cbf8c":"code","3d912f76":"code","a9b94a4b":"code","07b60a8a":"code","a0d7001d":"code","36a2dd62":"code","32b1c1f3":"code","4198576e":"code","2f5566c5":"code","c92304fa":"code","84155c28":"code","22c002c4":"code","34d4b7ef":"code","05d6cfc0":"code","ccd8dc13":"code","45ca5580":"code","c3828f48":"code","ba06def1":"code","16fb6f90":"code","b0a44102":"code","d18ee146":"code","11a3af27":"code","e9e92152":"code","0f0f42ea":"code","e9b33600":"code","b49cc0e9":"code","320e9933":"code","c49e57d7":"code","37d9cad7":"code","60af7d8d":"code","49e41190":"code","1ba7bfb2":"code","82eea146":"code","e6619830":"code","e0ea0f7f":"code","3cdd734d":"code","fc74d7f4":"code","5c506bad":"code","cfaf8b33":"code","346a5a12":"code","c7432391":"code","1eb555f2":"code","918d5a40":"markdown","d9c0ac1d":"markdown","f8dcb6c5":"markdown","7bce2455":"markdown","0d46c5e4":"markdown","04245ccf":"markdown","b67cfe36":"markdown","d8b9ee99":"markdown","a56514b7":"markdown","7e370932":"markdown","569fd6ff":"markdown","0d6469d5":"markdown","6d3e4e4a":"markdown","abbe0ecf":"markdown","ea071d29":"markdown","0ae503ae":"markdown","3ca74181":"markdown","09de02ef":"markdown","7881f850":"markdown","2cab1e83":"markdown","73c25cdf":"markdown","10ba5f11":"markdown","07f5fcf6":"markdown","6c617f34":"markdown","92280541":"markdown","bf100961":"markdown","be8e1d21":"markdown","59c64573":"markdown","a76236d3":"markdown","b406e51c":"markdown","c90df0c5":"markdown","869fd00f":"markdown","79bf929f":"markdown","b1e8565a":"markdown","d658db97":"markdown","dd65ee08":"markdown","29d8accd":"markdown","03a7a31e":"markdown"},"source":{"1519371d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn.impute import SimpleImputer, MissingIndicator\nfrom sklearn.decomposition import PCA\nfrom sklearn.feature_selection import f_classif, mutual_info_classif\n\nfrom imblearn.under_sampling import RandomUnderSampler, NearMiss\nfrom imblearn.over_sampling import RandomOverSampler, SMOTE, ADASYN\n\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler, MinMaxScaler, RobustScaler\nfrom sklearn.model_selection import train_test_split, KFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.metrics import confusion_matrix, cohen_kappa_score, f1_score, balanced_accuracy_score\nfrom sklearn.metrics import auc, roc_auc_score, roc_curve, recall_score, precision_score \n\nfrom itertools import combinations\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bdc0f36f":"# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c RANDOM_SEED, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\nRANDOM_SEED = 42\n# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt\n# \u0417\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0434\u0435\u043d\u044c \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043f\u0440\u043e\u0435\u0442\u043e\u043c:\ncurrent_date = pd.to_datetime('11AUG2021')","17ac9028":"def reduce_mem_usage(df, verbose=True):\n    '''\n    Function allows to reduce memory usage. \n    '''\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage(deep=True).sum() \/ 1024**2\n    for column in df.columns:\n        col_type = df[column].dtypes\n        if col_type in numerics:\n            c_min = df[column].min()\n            c_max = df[column].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[column] = df[column].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[column] = df[column].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[column] = df[column].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[column] = df[column].astype(np.int64)\n            else:\n                c_prec = df[column].apply(lambda x: np.finfo(x).precision).max()\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max and c_prec == np.finfo(np.float32).precision:\n                    df[column] = df[column].astype(np.float32)\n                else:\n                    df[column] = df[column].astype(np.float64)\n    end_mem = df.memory_usage(deep=True).sum() \/ 1024**2\n    if verbose: \n        print(f'Memory usage decreased to {end_mem:5.2f} Mb ({100 * (start_mem - end_mem) \/ start_mem:.1f}% reduction)')\n    return df.sample(10)\n\n\ndef missing_data(df):\n    '''\n    The function displays the number and percentage of skips for each column.\n    '''\n    for column in df.columns:\n        missing = df[column].isnull().sum()\n        percent_of_missing = np.mean(df[column].isnull())\n        if missing > 0:\n            print(f'{column} - {missing} value(s), {percent_of_missing*100:.2f}%')\n            \n\ndef duplicate_data(df):\n    '''\n    The function displays the number of duplicates for each column.\n    '''\n    if len(df) > len(df.drop_duplicates()):\n        print('Duplicates found')\n        display(df[df.duplicated()])\n    else:\n        print('Duplicates not found')\n\n          \ndef IQR_outlier(df, column, mode='analysis', verbose=True):\n    '''\n    Displays and returns the boundaries of the interquartile range.\n    \n    Parameters\n    ----------\n    df : DataFrame\n        Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n    \n    column : column : index\n        Column labels to use for dataframe.\n    \n    mode: string, optional (default='analysis')\n        Interquartile range analysis mode.\n        * If 'analysis',then displays the name of the feature, interquartile range,\n        the boundaries of outliers, their amount and what percentage of outliers in the sample.\n        * If 'correction', then returns the low and high bound for the outliers. \n    \n    verbose: bool, optional (default=True)\n        Controls the verbosity of the interquartile range analysis. \n    '''\n    perc25 = np.percentile(df[column], 25, axis=0)\n    perc75 = np.percentile(df[column], 75, axis=0)\n    IQR = perc75 - perc25\n    low = perc25 - 1.5*IQR\n    high = perc75 + 1.5*IQR\n    anomaly = len(df[df[column] > high]) + \\\n        len(df[df[column] < low])\n    if verbose:\n        if mode == 'analysis':\n            print(f'\u041d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430: {column}')\n            print('25-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc25)[:-1], '75-\u0439 \u043f\u0435\u0440\u0446\u0435\u043d\u0442\u0438\u043b\u044c: {},'.format(perc75),\n            'IQR: {}, '.format(IQR), '\u0413\u0440\u0430\u043d\u0438\u0446\u044b \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432: [{f}, {l}].'.format(f=low, l=high))\n            print(f'\u0412\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u0441\u043e\u0433\u043b\u0430\u0441\u043d\u043e IQR: {anomaly} | {anomaly\/len(df):2.2%}')\n        elif mode == 'correction':\n            return low, high\n\n        \ndef get_log(df, column):\n    '''\n    Function for logarithm of a feature.\n    '''\n    return df[column].apply(lambda x: np.log(x + 1))\n\n\ndef impute_column(df, column, strategy_param='mean', fill_value_param=None):\n    '''\n    Filling in missing values in a feature.\n    \n    Parameters\n    ----------\n    df : DataFrame\n        Two-dimensional, size-mutable, potentially heterogeneous tabular data.\n    \n    column : index\n        Column labels to use for dataframe.\n        \n    strategy_param : string, optional (default='mean')\n        The imputation strategy.\n        * If \u201cmean\u201d, then replace missing values using the mean along each column. Can only be used with numeric data.\n        * If \u201cmedian\u201d, then replace missing values using the median along each column. Can only be used with numeric data.\n        * If \u201cmost_frequent\u201d, then replace missing using the most frequent value along each column. Can be used with strings or numeric data.\n        If there is more than one such value, only the smallest is returned.\n        * If \u201cconstant\u201d, then replace missing values with fill_value. Can be used with strings or numeric data.\n        \n    fill_value : string or numerical value, optional (default=None)\n        When strategy == \u201cconstant\u201d, fill_value is used to replace all occurrences of missing_values. If left to the\n        default, fill_value will be 0 when imputing numerical data and \u201cmissing_value\u201d for strings or object data types.\n    '''\n    temp_data = df[[column]].values\n    size = temp_data.shape[0]\n\n    indicator = MissingIndicator()\n    mask_missing_values_only = indicator.fit_transform(temp_data)\n\n    imputer = SimpleImputer(strategy=strategy_param,\n                            fill_value=fill_value_param)\n    all_data = imputer.fit_transform(temp_data)\n    return all_data.reshape((size,))","81290d8c":"DATA_DIR = '\/kaggle\/input\/sf-dst-scoring'\n# \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 (train, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438)\ntrain = pd.read_csv(DATA_DIR + '\/train.csv')\n# \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 (test, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438)\ntest = pd.read_csv(DATA_DIR + '\/test.csv')\nsample_submission = pd.read_csv(DATA_DIR + '\/sample_submission.csv')","e2d88126":"display(train.head())\ndisplay(test.head())\ndisplay(sample_submission.head())","73b45fd1":"# \u0414\u043b\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\ntrain['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\ntest['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\ntest['default'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u0430, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\ndf = test.append(train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435","0bd74e2c":"# \u041e\u043f\u0442\u0438\u043c\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0442\u0440\u0430\u0442\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u043e\u0439 \u043f\u0430\u043c\u044f\u0442\u0438:\nreduce_mem_usage(df)","0b71c77b":"df.head()","15fda8a8":"df.query('sample == 1').info()","04d4c64e":"df.query('sample == 0').info()","68731580":"df.info()","aecc863b":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432:\nmissing_data(df)","66521fe5":"#\u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u043e\u0432:\nduplicate_data(df)","3d4d1d03":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u0438\u0435 \u0442\u0438\u043f\u044b \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0443 \u043d\u0430\u0441 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c:\ndf.nunique(dropna=False)","fbf1b13b":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0446\u0435\u043b\u0435\u0432\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430:\nfig = plt.subplots(figsize=(8, 5)) \ndisplay(df.query('sample == 1')['default'].value_counts(normalize=True)*100)\nsns.countplot(x=df.query('sample == 1')['default']);","cf46ec32":"# \u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043e\u0431\u0437\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u0445\u043e\u0436\u0438 \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435:\nnum_columns = ['client_id', 'app_date', 'age','bki_request_cnt', 'score_bki', 'income', 'decline_app_cnt']\ndf[num_columns].head()","fe2c7800":"df['client_id'].nunique() == df.shape[0]","07a55e87":"num_columns.remove('client_id')","2eab9f0b":"# \u0422\u0440\u0430\u043d\u0441\u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0434\u043b\u044f \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0444\u043e\u0440\u043c\u0430\u0442:\ndf['app_date'] = pd.to_datetime(df['app_date'])","de8b6a23":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a\u043e\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u044e\u0442 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f:\nprint(f\"{df['app_date'].dt.year.unique()}\\n{df['app_date'].dt.month_name().unique()}\\n{sorted(df['app_date'].dt.day.unique())}\")","c3ff096e":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043e\u043a \u043f\u043e \u0434\u043d\u044f\u043c \u043d\u0435\u0434\u0435\u043b\u0438:\nfig = plt.subplots(figsize=(12, 5))\nsns.countplot(x=df['app_date'].dt.day_name());","54cab8c3":"# \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 app_date \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0434\u0435\u043d\u044c \u043d\u0435\u0434\u0435\u043b\u0438 \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b\u0430 \u043f\u043e\u0434\u0430\u043d\u0430 \u0437\u0430\u044f\u0432\u043a\u0430:\ndf['app_day'] = df['app_date'].dt.day_name()","296617dd":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430\u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043d\u0435\u0439 \u043d\u0430 \u0447\u0438\u0441\u043b\u0430:\ndict_value_days = {'Monday':1,'Tuesday':2,'Wednesday':3,'Thursday':4,'Friday':5,'Saturday':6,'Sunday':7}\ndf['app_day'] = df['app_day'].map(dict_value_days)","07eadaa7":"# \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 app_date \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441\u043e \u0434\u043d\u044f \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438:\ndf['days_pass'] = (current_date - df['app_date']).dt.days","62eb3f0d":"# \u041e\u0431\u043d\u043e\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nnum_columns.remove('app_date')\nnum_columns.append('days_pass')","6b8b3e4b":"# \u041f\u0440\u043e\u0432\u0435\u0434\u0435\u043c \u0430\u043d\u0430\u043b\u0438\u0437 \u0434\u043b\u044f \u0432\u044b\u044f\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nfor column in num_columns:\n    IQR_outlier(df.query('sample == 1'), column)\n    print('=='*20)","ca18439b":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c boxplots \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nfig, axes = plt.subplots(3, 2, figsize=(18,15))\nfor i, column in enumerate(num_columns):\n    sns.boxplot(x=df.query('sample == 1')[column],\n                y=df.query('sample == 1')['default'],\n                ax=axes.flat[i],\n                showmeans=True,\n                meanline=True,\n                orient='h')","684fd5d3":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nfig, axes = plt.subplots(3, 2, figsize=(18,15))\nfor i,col in enumerate(num_columns):\n    sns.distplot(df[col], ax=axes.flat[i], bins=50, kde_kws={'bw': 0.55})","32d55577":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0441\u0442\u0430\u0442\u0438\u0441\u0442\u0438\u043a\u0443 \u043f\u043e \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c:\ndf.query('sample == 1')[num_columns].describe()","af8a08ff":"df['bki_request_cnt'].value_counts(normalize=True)[:9]","526cbf8c":"df['decline_app_cnt'].value_counts(normalize=True)[:5]","3d912f76":"# \u041f\u0440\u043e\u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u044b \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f:\nlog_features = ['age', 'bki_request_cnt', 'income', 'decline_app_cnt']\nfor column in log_features:\n    df[column] = get_log(df, column)","a9b94a4b":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439:\nfig, axes = plt.subplots(3, 2, figsize=(18,15))\nfor i,col in enumerate(num_columns):\n    sns.distplot(df[col], ax=axes.flat[i], bins=50, kde_kws={'bw': 0.45})","07b60a8a":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0434\u043b\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nf = plt.subplots(figsize=(10, 6))\nsns.heatmap(df[num_columns].corr().abs(), vmin=0,\n            vmax=1, annot=True, fmt=\".2f\", linewidths=0.1);","a0d7001d":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 mutual_info_classif:\nfig = plt.subplots(figsize=(7, 5))\nimp_num = pd.Series(f_classif(df.query('sample == 1')[num_columns], df.query('sample == 1')['default'])[0], index = num_columns)\nimp_num.sort_values(inplace = True)\nimp_num.plot(kind = 'barh');","36a2dd62":"# \u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043e\u0431\u0437\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432, \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u0445\u043e\u0436\u0438 \u043d\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435:\ncat_columns = ['education', 'region_rating', 'home_address', 'work_address', 'sna', 'first_time', 'app_day']\ndf[cat_columns].head()","32b1c1f3":"# \u041f\u0440\u0438\u0437\u043d\u0430\u043a education \u0438\u043c\u0435\u0435\u0442 478 (0,43%) \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u043c \u0434\u0430\u043d\u043d\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e:\ndf['NaN_education'] = pd.isna(df['education']).astype('int8')","4198576e":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043a\u0430\u043a \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u044b \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0438 \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f:\nplt.figure(figsize=(8, 5))\nplt.title('\u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u043e\u0432 \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044e \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f')\nsns.countplot(x=df['education'])\nplt.xlabel('\u0423\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f')\nplt.ylabel('\u0427\u0438\u0441\u043b\u043e \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u043e\u0432');","2f5566c5":"# \u0417\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 education:\ndf['education'] = impute_column(df, 'education', 'most_frequent')","c92304fa":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0431\u0443\u043a\u0432\u0435\u043d\u043d\u044b\u0435 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435:\ndict_value_education = {'SCH':0,'GRD':1,'UGR':2,'PGR':3,'ACD':4}\ndf['education'] = df['education'].map(dict_value_education).astype('int8')","84155c28":"# \u0421\u043e\u043a\u0440\u0430\u0442\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 region_rating \u0434\u043e \u0435\u0434\u0438\u043d\u0438\u0446:\ndf['region_rating'] = df['region_rating'].map(lambda x: 0.1 * x).astype('int8')","22c002c4":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nfig, axes = plt.subplots(3, 2, figsize=(18,15))\nfor i,col in enumerate(cat_columns):\n    if col == 'education':\n        continue\n    else:\n        sns.countplot(df[col], ax=axes.flat[i-1]);","34d4b7ef":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0434\u043b\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nf = plt.subplots(figsize=(10, 6))\nsns.heatmap(df[cat_columns].corr().abs(), vmin=0,\n            vmax=1, annot=True, fmt=\".2f\", linewidths=0.1);","05d6cfc0":"# \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438:\naddress_columns = df[['work_address', 'home_address']].values\n# \u0418\u0437 \u0434\u0432\u0443\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0434\u0438\u043d \u043f\u0443\u0442\u0435\u043c \u0443\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043d\u0443\u0436\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438:\npca = PCA(n_components=1)\ndf['address'] = pca.fit_transform(address_columns)\n# \u041e\u0431\u043d\u043e\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\ncat_columns.remove('home_address')\ncat_columns.remove('work_address')\ncat_columns.append('address')","ccd8dc13":"# \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 mutual_info_classif\nfig = plt.subplots(figsize=(7, 5))\nimp_cat = pd.Series(mutual_info_classif(df.query('sample == 1')[cat_columns], df.query('sample == 1')['default'],\n                                        discrete_features=True), index=cat_columns)\nimp_cat.sort_values(inplace=True)\nimp_cat.plot(kind='barh');","45ca5580":"# \u0418\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043e\u0431\u0437\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nbin_columns = ['sex', 'car', 'car_type', 'good_work', 'foreign_passport', 'NaN_education']\ndf[bin_columns].head()","c3828f48":"# \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043c Label Encoding \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\nle = LabelEncoder()\nfor column in bin_columns:\n    df[column] = le.fit_transform(df[column])\n    print(dict(enumerate(le.classes_)))\n\ndf[bin_columns].head()","ba06def1":"# \u041f\u043e\u0441\u0442\u0440\u043e\u0438\u043c \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0439 \u0434\u043b\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nf = plt.subplots(figsize=(10, 6))\nsns.heatmap(df[bin_columns].corr().abs(), vmin=0,\n            vmax=1, annot=True, fmt=\".2f\", linewidths=0.1);","16fb6f90":"# \u0412\u044b\u0431\u0435\u0440\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438:\ncar_columns = df[['car', 'car_type']].values\n# \u0418\u0437 \u0434\u0432\u0443\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u0435\u043c \u043e\u0434\u0438\u043d \u043f\u0443\u0442\u0435\u043c \u0443\u0441\u0435\u0447\u0435\u043d\u0438\u044f \u043d\u0435\u043d\u0443\u0436\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438:\npca = PCA(n_components=1)\ndf['car'] = pca.fit_transform(car_columns)","b0a44102":"# \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u044c \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 mutual_info_classif:\nfig = plt.subplots(figsize=(7, 5))\nimp_bin = pd.Series(mutual_info_classif(df.query('sample == 1')[bin_columns], df.query('sample == 1')['default'],\n                                        discrete_features=True), index=bin_columns)\nimp_bin.sort_values(inplace=True)\nimp_bin.plot(kind='barh');","d18ee146":"# \u041e\u0431\u043d\u043e\u0432\u0438\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nbin_columns.remove('car_type')\nbin_columns.remove('NaN_education')","11a3af27":"# \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u044b\u0439 \u0434\u0430\u0442\u0430\u0441\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439:\ntrain = df.query('sample == 1').drop(['sample'], axis=1)\ntest = df.query('sample == 0').drop(['sample', 'default'], axis=1)","e9e92152":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u0435\u0433\u043e \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 StandardScaler:\nstandart_scaler = StandardScaler()\nX_train_num = standart_scaler.fit_transform(train[num_columns])\nX_test_num = standart_scaler.fit_transform(test[num_columns])\nprint(X_train_num.shape, X_test_num.shape)","0f0f42ea":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u0438 \u0441\u0434\u0435\u043b\u0430\u0435\u043c OneHotEncoding:\nohe = OneHotEncoder(sparse=False).fit(df[cat_columns])\nX_train_cat = ohe.transform(train[cat_columns])\nX_test_cat = ohe.transform(test[cat_columns])\nprint(X_train_cat.shape, X_test_cat.shape)","e9b33600":"# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:\nX_train_bin = train[bin_columns].values\nX_test_bin = test[bin_columns].values\nprint(X_train_bin.shape, X_test_bin.shape)","b49cc0e9":"# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0432 \u043e\u0434\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443:\nX_test = np.hstack([X_test_num, X_test_cat,  X_test_bin])\nX_test.shape","320e9933":"# \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0432 \u043e\u0434\u043d\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0441\u0442\u0432\u043e \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443: \nX = np.hstack([X_train_num, X_train_cat,  X_train_bin])\ny = train['default'].values\nprint(X.shape, y.shape)","c49e57d7":"# \u041eversampling  ADASYN:\nada = ADASYN(random_state=RANDOM_SEED)\nX_ada, y_ada = ada.fit_resample(X, y)\nprint(X_ada.shape, y_ada.shape)","37d9cad7":"# \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u044b\u0435 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435:\nX_train, X_val, y_train, y_val = train_test_split(X_ada, y_ada, train_size=0.70, random_state=RANDOM_SEED)\nprint(f'\u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u0447\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438: {X_train.shape}\\n\u0420\u0430\u0437\u043c\u0435\u0440 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438: {X_val.shape}')","60af7d8d":"train_model = LogisticRegression(solver='liblinear', max_iter=1000, random_state=RANDOM_SEED)","49e41190":"# \u0417\u0430\u0434\u0430\u0434\u0438\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u0438\u0437\u0430\u0446\u0438\u0438:\nC = np.logspace(0, 4, 10)\npenalty = ['l1', 'l2']\nclass_weight = [None, 'balanced']\n# \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:\nhyperparameters = dict(C=C, penalty=penalty, class_weight=class_weight)","1ba7bfb2":"# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u0435\u0442\u043a\u0443 \u043f\u043e\u0438\u0441\u043a\u0430 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c 5-\u043a\u0440\u0430\u0442\u043d\u043e\u0439 \u043f\u0435\u0440\u0435\u043a\u0440\u0435\u0441\u0442\u043d\u043e\u0439 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438:\nclf = GridSearchCV(train_model, hyperparameters, cv=5, scoring='f1_weighted')\nbest_train_model = clf.fit(X_train, y_train).best_estimator_","82eea146":"# \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430 \u043b\u0443\u0447\u0448\u0438\u0435 \u0433\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b:\nbest_parameters = best_train_model.get_params()\nfor param_name in sorted(best_parameters.keys()):\n        print('\\t%s: %r' % (param_name, best_parameters[param_name]))","e6619830":"train_model = LogisticRegression(solver='liblinear', penalty='l1', C=1,\n                                class_weight='balanced', max_iter=1000, random_state=RANDOM_SEED)\ntrain_model.fit(X_train, y_train)\n# best_parameters['penalty'], best_parameters['C']","e0ea0f7f":"y_pred = train_model.predict(X_val)\ny_pred_proba = train_model.predict_proba(X_val)","3cdd734d":"# \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430:\nprint('balanced_accuracy_score: %0.3f' % balanced_accuracy_score(y_val, y_pred))\nprint('cohen_kappa_score: %0.3f' % cohen_kappa_score(y_val, y_pred))\nprint('precision_score: %0.3f' % precision_score(y_val, y_pred))\nprint('recall_score: %0.3f' % recall_score(y_val, y_pred))\nprint('f1_score: %0.3f' % f1_score(y_val, y_pred))\nprint('roc_auc_score: %0.5f' % roc_auc_score(y_val, y_pred_proba[:, 1]))\nfpr, tpr, threshold = roc_curve(y_val, y_pred_proba[:, 1])","fc74d7f4":"# \u0412\u0438\u0437\u0430\u0443\u043b\u0438\u0437\u0430\u0446\u0438\u044f ROC AUC:\nfig = plt.subplots(figsize=(8, 6))\nplt.plot([0, 1], label='Baseline', linestyle='--')\nplt.plot(fpr, tpr, label = 'LogisticRegression')\nplt.title(f'Logistic Regression ROC AUC = {roc_auc_score(y_val, y_pred_proba[:, 1]):0.3f}')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')\nplt.legend(loc = 'lower right');","5c506bad":"# Confusion matrix:\nfig = plt.subplots(figsize=(8, 6))\nsns.set_context(context='paper', font_scale=2, rc=None)\ngroup_names = ['True Neg', 'False Pos', 'False Neg', 'True Pos']\ngroup_counts = ['{0:0.0f}'.format(value) for value in\n                confusion_matrix(y_val, y_pred).flatten()]\nlabels = [f'{v1}\\n{v2}' for v1, v2 in\n          zip(group_names, group_counts)]\nlabels = np.asarray(labels).reshape(2, 2)\nsns.heatmap(confusion_matrix(y_val, y_pred), annot=labels, fmt='', cmap='Greens');","cfaf8b33":"tn, fp, fn, tp = confusion_matrix(y_val, y_pred).flatten()\nprint(f'\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043e, \u0447\u0442\u043e {fp} \u0438\u043b\u0438 {round((fp\/(fp+tn))*100, 2)}% \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445 \u043a\u0440\u0435\u0434\u0438\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u043d\u0435 \u0432\u0435\u0440\u043d\u0443\u0442 \u0435\u0433\u043e.')\nprint(f'\u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043e, \u0447\u0442\u043e {fn} \u0438\u043b\u0438 {round((1-recall_score(y_val, y_pred))*100, 2)}% \u043f\u043e \u0444\u0430\u043a\u0442\u0443 \u043d\u0435 \u0432\u0435\u0440\u043d\u0443\u0432\u0448\u0438\u0445 \u043a\u0440\u0435\u0434\u0438\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432\u0435\u0440\u043d\u0443\u0442 \u0435\u0433\u043e.')","346a5a12":"test['default'] = train_model.predict_proba(X_test)[:, 1]","c7432391":"submission = test[['client_id', 'default']]\ndisplay(submission.sample(10))","1eb555f2":"submission.to_csv('submission.csv', index=False)","918d5a40":"\u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c ROC-\u0430\u043d\u0430\u043b\u0438\u0437. \u041a\u043b\u0430\u0441\u0441\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0438\u043c\u0435\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u043f\u043e\u0440\u043e\u0433 \u043e\u0442\u0441\u0435\u0447\u0435\u043d\u0438\u044f. \u0418\u0437\u043c\u0435\u043d\u044f\u044f \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u043e \u0438\u043b\u0438 \u0438\u043d\u043e\u0435 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 \u0434\u0432\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 \u2014 \u043a\u043b\u0430\u0441\u0441 \u0441 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0438\u0441\u0445\u043e\u0434\u0430\u043c\u0438 \u0438 \u043a\u043b\u0430\u0441\u0441 \u0441 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c\u0438 \u0438\u0441\u0445\u043e\u0434\u0430\u043c\u0438.\n\n<img src=\"https:\/\/habrastorage.org\/web\/299\/157\/fad\/299157fad56a4ecca8f6b96b425bd38c.png\" alt=\"ROC AUC\" width=\"600\" align=\"center\">\n\n\u0412 \u043d\u0430\u0448\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u0443 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430, \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u2014 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u0430.","d9c0ac1d":"### \u041e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438","f8dcb6c5":"**\u0420\u0435\u0437\u044e\u043c\u0435:** \n* \u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043e **19** \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (20-\u0439 sample \u043c\u044b \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0431\u044b\u043b \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0438)\n* \u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0435 **110148** \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439\n* \u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442\u044b \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442\n* \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 1 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 - **education**\n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **default**. \u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 - **87.3% \/ 12.7%**. \u041f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u044f **1:6.87**. \u0412 \u0446\u0435\u043b\u043e\u043c, \u0431\u043e\u043b\u044c\u0448\u0430\u044f \u0434\u0438\u0441\u043f\u0440\u043e\u043f\u043e\u0440\u0446\u0438\u044f \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 1:10. \u041e\u0434\u043d\u0430\u043a\u043e, \u0432\u0441\u0435-\u0442\u0430\u043a\u0438, \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u0435\u0440\u044c\u0435\u0437\u043d\u0430\u044f \u043d\u0435\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0441\u0442\u044c \u043a\u043b\u0430\u0441\u0441\u043e\u0432. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0434\u0430\u043b\u0435\u0435 \u043c\u043e\u0436\u043d\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434\u044b oversampling (\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u0441\u0438\u043d\u0442\u0435\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0433\u043e oversampling SMOTE) \u0438 undersampling. \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0439 \u0438 \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0439.","7bce2455":"### \u0413\u0438\u043f\u0435\u0440\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b","0d46c5e4":"**\u0420\u0435\u0437\u044e\u043c\u0435:** \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 **0,19** \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438 **score_bki\/decline_app_cnt**. \u042d\u0442\u043e \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043e \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e \u0441\u043b\u0430\u0431\u043e\u0439 \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u0438 \u043c\u0435\u0436\u0434\u0443 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438. \u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u0447\u0442\u043e \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0442\u043e\u0439 \u0438\u043b\u0438 \u0438\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 \u0432\u043b\u0438\u044f\u044e\u0442 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439. \u0421\u0430\u043c\u044b\u043c \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u043c \u0438\u0437 \u0447\u0438\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f **score_bki**.","04245ccf":"# \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","b67cfe36":"# \u041f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043a \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044e","d8b9ee99":"# \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","a56514b7":"**\u0420\u0435\u0437\u044e\u043c\u0435:** \n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **age** - \u0432\u043e\u0437\u0440\u0430\u0441\u0442. \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - 21, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 - 72. \u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 - 39, \u043c\u0435\u0434\u0438\u0430\u043d\u043d\u044b\u0439 - 37. \u0415\u0441\u0442\u044c \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u0438\u0435, \u043d\u043e \u043d\u0435 \u0441\u0438\u043b\u044c\u043d\u043e\u0435. \u0412\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u043d\u0435 \u043e\u0431\u043d\u0430\u0440\u0443\u0436\u0435\u043d\u044b.\n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **bki_request_cnt**. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043e\u0442 0 \u0434\u043e 53. \u0421\u0430\u043c\u043e\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 0 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 **26,2%** \u0432\u0441\u0435\u0445 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439. \u0417\u0434\u0435\u0441\u044c \u043e\u043f\u044f\u0442\u044c \u0436\u0435 \u0432\u044b\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 0, 1 \u0438 2. \u0422\u0435, \u0447\u0442\u043e \u0438\u043c\u0435\u044e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 3 \u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u043c\u0430\u043b\u043e\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438\u043c\u0435\u0435\u0442 \u0442\u044f\u0436\u0435\u043b\u044b\u0439 \u043f\u0440\u0430\u0432\u044b\u0439 \u0445\u0432\u043e\u0441\u0442, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0441\u0442\u044c \u0441\u043c\u044b\u0441\u043b \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430. \u0422\u0430\u043a\u0436\u0435 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 **2636**, \u043e\u0434\u043d\u0430\u043a\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043b\u044e\u0434\u044f\u0445 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0440\u0430\u0449\u0430\u043b\u0438\u0441\u044c \u0432 \u0411\u041a\u0418 \u0431\u043e\u043b\u044c\u0448\u0435 2 \u0440\u0430\u0437 \u043d\u0435 \u0432\u0438\u0436\u0443 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438.\n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **score_bki**. \u0418\u043c\u0435\u0435\u0442 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043e\u0434\u043d\u0430\u043a\u043e \u0441\u0442\u0440\u0430\u043d\u043d\u043e, \u0447\u0442\u043e \u0438\u043c\u0435\u044e\u0442\u0441\u044f \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u0431\u044b\u0447\u043d\u043e \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0435, \u043d\u043e \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 **518**. \u041d\u043e \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0441\u0442\u0440\u0430\u043d\u043d\u043e\u0439 \u043f\u0440\u0438\u0440\u043e\u0434\u044b \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b, \u043f\u043e\u043a\u0430, \u043d\u0435 \u0431\u0443\u0434\u0443. \n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **income**. \u0418\u043c\u0435\u0435\u0442 \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u043e\u0447\u0435\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0440\u0430\u0437\u0431\u0440\u043e\u0441 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 - \u043e\u0442 1000 \u0434\u043e 1000000. \u0422\u0430\u043a\u043e\u0439 \u0434\u043e\u0445\u043e\u0434 \u0438\u043c\u0435\u0435\u0442 \u043c\u0435\u0441\u0442\u043e \u0431\u044b\u0442\u044c, \u0445\u043e\u0442\u044f \u0430\u043d\u0430\u043b\u0438\u0437 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432. \u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u0432\u0432\u0435\u0441\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0432 \u043d\u0430 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0438 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439, \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u0434\u043e\u0445\u043e\u0434\u0430 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 - \u043d\u0438\u0437\u043a\u0438\u0439 \u0434\u043e\u0445\u043e\u0434, \u0441\u0440\u0435\u0434\u043d\u0438\u0439, \u0432\u044b\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0438 \u0442.\u0434.\n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **decline_app_cnt**. **83%** \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0439 \u0438\u043c\u0435\u044e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 **0**. \u0420\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0441\u043c\u0435\u0449\u0435\u043d\u043d\u043e\u0435. \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 - **33**. \u041a\u0430\u043a \u043c\u044b \u0432\u0438\u0434\u0438\u043c, **98%** \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043b\u0435\u0436\u0438\u0442 \u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 0, 1, 2, 3. \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0432\u0435\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0432 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439, \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0438\u043c\u0435\u0435\u0442 \u043c\u043d\u043e\u0433\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432, \u0438\u043b\u0438 \u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0442\u0430\u043a\u0438\u043c \u043a\u0430\u043a\u043e\u0439 \u043e\u043d \u0435\u0441\u0442\u044c \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442. \u041d\u043e \u0443\u0434\u0430\u043b\u044f\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u043b\u044e\u0434\u044f\u0445 \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u0438 \u043e\u0442\u043a\u0430\u0437\u044b \u0437\u0430\u044f\u0432\u043e\u043a \u0441\u0447\u0438\u0442\u0430\u044e \u043d\u0435 \u0432\u0435\u0440\u043d\u044b\u043c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c. \n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **days_pass** \u0438\u043c\u0435\u0435\u0442 \u0440\u0430\u0432\u043d\u043e\u043c\u0435\u0440\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432 \u043d\u0435\u0442. \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a \u0432 \u0431\u0443\u0434\u043d\u0438\u0435 \u0434\u043d\u0438 \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0432\u043d\u044b, \u043e\u0434\u043d\u0430\u043a\u043e \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u044f\u0432\u043d\u043e\u0435 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435.","7e370932":"\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0434\u0435\u0442\u0430\u043b\u044c\u043d\u043e \u043d\u0430 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 **client_id** \u0438 **app_date**. \u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a **app_date** \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u043b\u044f \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u043d\u0438\u043c.","569fd6ff":"# \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","0d6469d5":"## \u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","6d3e4e4a":"## \u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u0431\u0438\u043d\u0430\u0440\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","abbe0ecf":"\u0423\u0431\u0435\u0440\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a **NaN_education** \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u043d\u0435\u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0439.","ea071d29":"# \u0418\u0442\u043e\u0433\u043e\u0432\u043e\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043f\u043e \u041f\u0440\u043e\u0435\u043a\u0442\u0443 4. \u041a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \"\u041d\u0435\u0442\"\n\n### \u0412 \u044d\u0442\u043e\u043c \u0441\u043e\u0440\u0435\u0432\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u043d\u0430\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u043e\u0438\u0442 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0434\u0435\u0444\u043e\u043b\u0442\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0431\u0430\u043d\u043a\u0430 \n### \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u043b \u0411\u0435\u0433\u0443\u043d\u043e\u0432 \u041f\u0430\u0432\u0435\u043b (DST-56)","0ae503ae":"### client_id","3ca74181":"# Submission","09de02ef":"### app_date","7881f850":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 **car** \u0438 **car_type** \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 (**0.70**). \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0438\u0437 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0433\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u044f \u043f\u0440\u0438\u0437\u043d\u0430\u043a **car**, \u043a\u0430\u043a \u043c\u0435\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0433\u043e, \u043f\u0440\u0438\u0432\u0435\u043b \u043a \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u044e \u043c\u043e\u0434\u0435\u043b\u0438. \u041e\u0434\u043d\u0430\u043a\u043e \u043d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0441\u0442\u0430\u043b\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u044d\u0442\u0438\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432,\u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0430 \u0434\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438 \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 **car_type**.","2cab1e83":"# \u041e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","73c25cdf":"# \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043c\u043e\u0434\u0435\u043b\u0438","10ba5f11":"### bki_request_cnt","07f5fcf6":"**\u0420\u0435\u0437\u044e\u043c\u0435:** \u0434\u043b\u044f \u0431\u043e\u0440\u044c\u0431\u044b \u0441 \u0434\u0438\u0441\u0431\u0430\u043b\u0430\u043d\u0441\u043e\u043c \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0431\u044b\u043b\u0438 \u043e\u043f\u0440\u043e\u0431\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043c\u0435\u0442\u043e\u0434\u044b \u0438\u0437 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 imblearn:\n* Undersampling: RandomUnderSampler, NearMiss.\n* Oversampling: RandomOverSampler, SMOTE, ADASYN.\n\n\u041d\u0430\u0438\u043b\u0443\u0447\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u043b \u043c\u0435\u0442\u043e\u0434 **ADASYN**.","6c617f34":"# \u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","92280541":"## \u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u0430\u043d\u0430\u043b\u0438\u0437","bf100961":"### redion_rating","be8e1d21":"# \u0418\u043c\u043f\u043e\u0440\u0442 \u0434\u0430\u043d\u043d\u044b\u0445","59c64573":"###  education","a76236d3":" # \u041f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430","b406e51c":"**\u0420\u0435\u0437\u044e\u043c\u0435:** \u043f\u0440\u0438\u0437\u043d\u0430\u043a **client_id** - \u0438\u043c\u0435\u0435\u0442 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0430, \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e \u043d\u0430\u043c \u043d\u0435 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438, \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0435 \u043d\u0435\u0441\u0435\u0442 \u043d\u0438\u043a\u0430\u043a\u043e\u0439 \u0441\u043c\u044b\u0441\u043b\u043e\u0432\u043e\u0439 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0438.","c90df0c5":"**\u0420\u0435\u0437\u044e\u043c\u0435:** \n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **sex** - \u043f\u043e\u043b. \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0438\u043c\u0435\u0435\u0442 \u0434\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. \u0412 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043f\u0440\u0435\u0434\u0441\u0430\u0442\u0432\u043b\u0435\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0436\u0435\u043d\u0449\u0438\u043d, \u0447\u0435\u043c \u043c\u0443\u0436\u0447\u0438\u043d, \u043e\u0434\u043d\u0430\u043a\u043e \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u0430\u044f.\n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **car, car_type** - \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438, \u0444\u043b\u0430\u0433 \u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438. \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438.\n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **good_work**. \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0438\u043c\u0435\u0435\u0442 \u0434\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **foreign_passport**. \u0411\u0438\u043d\u0430\u0440\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u0438\u043c\u0435\u0435\u0442 \u0434\u0432\u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.","869fd00f":"### \u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438","79bf929f":"\u041f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 **home_address** \u0438 **work_address** \u0438\u043c\u0435\u044e\u0442 \u0432\u044b\u0441\u043e\u043a\u0443\u044e \u043a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044e \u043c\u0435\u0436\u0434\u0443 \u0441\u043e\u0431\u043e\u0439 (**0.73**). \u0423\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u0440\u0438\u0432\u0435\u043b\u043e \u043a \u0443\u0445\u0443\u0434\u0448\u0435\u043d\u0438\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432, \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u0441\u0442\u0430\u043b\u043e \u0438\u0445 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435,\u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u0430 \u0434\u0435\u043a\u043e\u043c\u043f\u043e\u0437\u0438\u0446\u0438\u0438.","b1e8565a":"**\u0420\u0435\u0437\u044e\u043c\u0435:** \u041f\u0440\u0438\u0437\u043d\u0430\u043a **app_date** - \u043e\u0445\u0432\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043e\u043a \u0441 \u043d\u0430\u0447\u0430\u043b\u0430 \u044f\u043d\u0432\u0430\u0440\u044f \u043f\u043e \u043a\u043e\u043d\u0435\u0446 \u0430\u043f\u0440\u0435\u043b\u044f 2014 \u0433\u043e\u0434\u0430. \u0421\u043b\u0435\u0434\u0443\u0435\u0442 \u043e\u0442\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0434\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a \u0432 \u0431\u0443\u0434\u043d\u0438\u0435 \u0434\u043d\u0438 \u043f\u0440\u0438\u0431\u043b\u0438\u0437\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0440\u0430\u0432\u043d\u044b, \u043e\u0434\u043d\u0430\u043a\u043e \u0437\u0430\u043c\u0435\u0442\u043d\u043e \u044f\u0432\u043d\u043e\u0435 \u0441\u043d\u0438\u0436\u0435\u043d\u0438\u0435 \u0438\u0445 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0432 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0435. \u041d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430 **app_date** \u0431\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a **app_day**, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u0434\u0435\u043d\u044c \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438 \u0438 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a **days_pass**, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0440\u0430\u0436\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441\u043e \u0434\u043d\u044f \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438. \u041f\u0440\u0438\u0437\u043d\u0430\u043a **app_date** \u043d\u0435 \u043f\u0440\u0438\u0433\u043e\u0434\u0438\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438.    ","d658db97":"**\u0420\u0435\u0437\u044e\u043c\u0435:** \n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **education** \u0438\u043c\u0435\u0435\u0442 **0.43%** \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0447\u0442\u043e \u043d\u0435\u043c\u043d\u043e\u0433\u043e. \u0421\u0430\u043c\u043e\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0435\u0435\u0441\u044f \u0437\u043d\u0430\u0447\u043d\u0438\u0435 SCH (\u0448\u043a\u043e\u043b\u0430), \u0434\u0430\u043b\u0435\u0435 \u043f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0438\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438. \u041f\u0440\u0438\u0437\u043d\u0430\u043a \u0438\u043c\u0435\u0435\u0442 5 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u0415\u0441\u043b\u0438 \u043f\u043e\u043b\u0430\u0433\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0443, \u0442\u043e SCH - \u0448\u043a\u043e\u043b\u044c\u043d\u043e\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u0435, UGR - \u0431\u0430\u043a\u0430\u043b\u0430\u0432\u0440\u0438\u0430\u0442, GRD - \u043c\u0430\u0433\u0438\u0441\u0442\u0440\u0430\u0442\u0443\u0440\u0430, PGR - \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e\u0441\u043b\u0435 \u0431\u0430\u043a\u0430\u043b\u0430\u0432\u0440\u0438\u0430\u0442\u0430 \u0438 ACD - \u043d\u0430\u0443\u0447\u043d\u044b\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 (\u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442, \u0434\u043e\u043a\u0442\u043e\u0440).\n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **region_rating**. \u0421\u043e\u0434\u0435\u0440\u0436\u0438\u0442 7 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u043e\u0434\u043d\u0430\u043a\u043e \u043f\u043e \u0441\u0443\u0442\u0438 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u043c. \u0421\u0430\u043c\u044b\u0439 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0440\u0435\u0433\u0438\u043e\u043d - 50.\n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **home_address\/work_address**. \u0418\u043c\u0435\u044e\u0442 \u043f\u043e \u0442\u0440\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. \u0412 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0435\u0440\u0435\u0432\u0435\u0441 \u0438\u043c\u0435\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f \u0442\u0440\u0438. \u0412 \u0440\u0430\u0431\u043e\u0447\u0435\u043c \u0430\u0434\u0440\u0435\u0441\u0435 \u0442\u0430\u043a\u043e\u0433\u043e \u044f\u0432\u043d\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u043a\u043e\u0441\u0430 \u043d\u0435 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f.\n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **sna \/ first_time**. \u0418\u043c\u0435\u044e\u0442 \u043f\u043e 4 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438.\n* \u043f\u0440\u0438\u0437\u043d\u0430\u043a **app_day** \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0435 \u0432\u043b\u0438\u044f\u0442 \u043d\u0430 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a.","dd65ee08":"### decline_app_cnt","29d8accd":"### \u041f\u0435\u0440\u0432\u043e\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0434\u0435\u0432\u044f\u0442\u043d\u0430\u0434\u0446\u0430\u0442\u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e:\n* client_id: \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043a\u043b\u0438\u0435\u043d\u0442\u0430;\n* education: \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f; \n* sex: \u043f\u043e\u043b \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430;\n* age: \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430;\n* car: \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f;\n* car_type: \u0444\u043b\u0430\u0433 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f-\u0438\u043d\u043e\u043c\u0430\u0440\u043a\u0438;\n* decline_app_cnt: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0432\u0442\u043e \u043e\u0442\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0448\u043b\u044b\u0445 \u0437\u0430\u044f\u0432\u043e\u043a;\n* good_work: \u0444\u043b\u0430\u0433 \u043d\u0430\u043b\u0438\u0447\u0438\u044f \"\u0445\u043e\u0440\u043e\u0448\u0435\u0439\" \u0440\u0430\u0431\u043e\u0442\u044b; \n* bki_request_cnt: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u041a\u0418(\u0411\u044e\u0440\u043e \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0445 \u0438\u0441\u0442\u043e\u0440\u0438\u0439);\n* home_adress: \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430;\n* work_adress: \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0437\u0430\u0442\u043e\u0440 \u0440\u0430\u0431\u043e\u0447\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430;\n* income: \u0434\u043e\u0445\u043e\u0434 \u0437\u0430\u0451\u043c\u0449\u0438\u043a\u0430;\n* foreign_passport: \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0437\u0430\u0433\u0440\u0430\u043d\u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430;\n* sna - \u0441\u0432\u044f\u0437\u044c \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0430 \u0441 \u043a\u043b\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0431\u0430\u043d\u043a\u0430;\n* first_time - \u0434\u0430\u0432\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u043b\u0438\u0447\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0437\u0430\u0435\u043c\u0449\u0438\u043a\u0435;\n* score_bki - \u0441\u043a\u043e\u0440\u0438\u043d\u0433\u043e\u0432\u044b\u0439 \u0431\u0430\u043b\u043b \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c \u0438\u0437 \u0411\u041a\u0418;\n* region_rating - \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0433\u0438\u043e\u043d\u0430;\n* app_date - \u0434\u0430\u0442\u0430 \u043f\u043e\u0434\u0430\u0447\u0438 \u0437\u0430\u044f\u0432\u043a\u0438;\n* default: \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u0430;","03a7a31e":"## \u041e\u0446\u0435\u043d\u043a\u0430 \u0437\u043d\u0430\u0447\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432"}}