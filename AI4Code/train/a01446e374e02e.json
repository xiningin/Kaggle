{"cell_type":{"fc8f244a":"code","61197467":"code","7035fc13":"code","3b68910c":"code","2565f1a2":"code","cf973d5b":"code","316e41e0":"code","7bf4c582":"code","3b24bbe7":"code","4db1d591":"code","8ba9134c":"code","9d44963a":"code","15dfe9d3":"code","52de2cbf":"code","521cb464":"code","b046c7c2":"code","e60adc8c":"code","ee5f96d4":"code","48df894e":"code","8d1ef952":"code","6762518b":"code","4c83e39e":"code","b67c6f53":"code","b5e06bd8":"code","afbbed0f":"code","eb91ea0f":"code","e004d177":"code","829723af":"code","294fedca":"code","ac736108":"code","2d970ddc":"code","fdae08d7":"code","24065142":"code","d0bdf9ec":"code","2969ea4b":"code","484629b5":"code","704a252d":"code","c68616c1":"code","ba6e703a":"markdown","315f80bb":"markdown","a96f45be":"markdown","514a2cd1":"markdown","511b6fa6":"markdown","0a3c84a3":"markdown","ca345356":"markdown","61480234":"markdown","e63aaa2f":"markdown","6d6ed417":"markdown","9f8a77e9":"markdown","7ad3d4c7":"markdown","0231c9e8":"markdown"},"source":{"fc8f244a":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom math import sin, cos, pi\nimport cv2, os\nfrom tqdm.auto import tqdm\n\nfrom keras import layers, callbacks, utils, applications, optimizers\nfrom keras.models import Sequential, Model, load_model","61197467":"class config:\n    horizontal_flip = False\n    rotation_augmentation = True\n    brightness_augmentation = True\n    shift_augmentation = True\n    random_noise_augmentation = True\n\n    rotation_angles = [12]    # Rotation angle in degrees (includes both clockwise & anti-clockwise rotations)\n    pixel_shifts = [12]    # Horizontal & vertical shift amount in pixels (includes shift from all 4 corners)\n\n    NUM_EPOCHS = 100\n    BATCH_SIZE = 64","7035fc13":"print(\"Contents of input\/facial-keypoints-detection directory: \")\n!ls ..\/input\/facial-keypoints-detection\/\n\nprint(\"\\nExtracting .zip dataset files to working directory ...\")\n!unzip -u ..\/input\/facial-keypoints-detection\/test.zip\n!unzip -u ..\/input\/facial-keypoints-detection\/training.zip\n\nprint(\"\\nCurrent working directory:\")\n!pwd\nprint(\"\\nContents of working directory:\")\n!ls","3b68910c":"%%time\n\ntrain_file = 'training.csv'\ntest_file = 'test.csv'\nidlookup_file = '..\/input\/facial-keypoints-detection\/IdLookupTable.csv'\ntrain_data = pd.read_csv(train_file)\ntest_data = pd.read_csv(test_file)\nidlookup_data = pd.read_csv(idlookup_file)","2565f1a2":"def plot_sample(image, keypoint, axis, title):\n    image = image.reshape(96,96)\n    axis.imshow(image, cmap='gray')\n    axis.scatter(keypoint[0::2], keypoint[1::2], marker='x', s=20)\n    plt.title(title)","cf973d5b":"train_data.head()","316e41e0":"test_data.head()","7bf4c582":"idlookup_data.head()","3b24bbe7":"print(\"Length of train data:\", len(train_data))","4db1d591":"train_data.isnull().sum()","8ba9134c":"clean_train_data = train_data.dropna()\nprint(\"clean_train_data shape:\", np.shape(clean_train_data))\n\nunclean_train_data = train_data.fillna(method = 'ffill')\nprint(\"unclean_train_data shape:\", np.shape(unclean_train_data))","9d44963a":"%%time\n\ndef load_images(image_data):\n    images = []\n    for idx, sample in image_data.iterrows():\n        image = np.array(sample['Image'].split(' '), dtype=int)\n        image = np.reshape(image, (96,96,1))\n        images.append(image)\n    images = np.array(images)\/255.\n    return images\n\ndef load_keypoints(keypoint_data):\n    keypoint_data = keypoint_data.drop('Image',axis = 1)\n    keypoint_features = []\n    for idx, sample_keypoints in keypoint_data.iterrows():\n        keypoint_features.append(sample_keypoints)\n    keypoint_features = np.array(keypoint_features, dtype = 'float')\n    return keypoint_features\n\nclean_train_images = load_images(clean_train_data)\nprint(\"Shape of clean_train_images:\", np.shape(clean_train_images))\nclean_train_keypoints = load_keypoints(clean_train_data)\nprint(\"Shape of clean_train_keypoints:\", np.shape(clean_train_keypoints))\ntest_images = load_images(test_data)\nprint(\"Shape of test_images:\", np.shape(test_images))\n\ntrain_images = clean_train_images\ntrain_keypoints = clean_train_keypoints\nfig, axis = plt.subplots()\nplot_sample(clean_train_images[19], clean_train_keypoints[19], axis, \"Sample image & keypoints\")\n\nunclean_train_images = load_images(unclean_train_data)\nprint(\"Shape of unclean_train_images:\", np.shape(unclean_train_images))\nunclean_train_keypoints = load_keypoints(unclean_train_data)\nprint(\"Shape of unclean_train_keypoints:\", np.shape(unclean_train_keypoints))\ntrain_images = np.concatenate((train_images, unclean_train_images))\ntrain_keypoints = np.concatenate((train_keypoints, unclean_train_keypoints))","15dfe9d3":"def left_right_flip(images, keypoints):\n    flipped_keypoints = []\n    flipped_images = np.flip(images, axis=2)   # Flip column-wise (axis=2)\n    for idx, sample_keypoints in enumerate(keypoints):\n        flipped_keypoints.append([96.-coor if idx%2==0 else coor for idx,coor in enumerate(sample_keypoints)])    # Subtract only X co-ordinates of keypoints from 96 for horizontal flipping\n    return flipped_images, flipped_keypoints\n\nif config.horizontal_flip:\n    flipped_train_images, flipped_train_keypoints = left_right_flip(clean_train_images, clean_train_keypoints)\n    print(\"Shape of flipped_train_images:\", np.shape(flipped_train_images))\n    print(\"Shape of flipped_train_keypoints:\", np.shape(flipped_train_keypoints))\n    train_images = np.concatenate((train_images, flipped_train_images))\n    train_keypoints = np.concatenate((train_keypoints, flipped_train_keypoints))\n    fig, axis = plt.subplots()\n    plot_sample(flipped_train_images[19], flipped_train_keypoints[19], axis, \"Horizontally Flipped\") ","52de2cbf":"def rotate_augmentation(images, keypoints):\n    rotated_images = []\n    rotated_keypoints = []\n    print(\"Augmenting for angles (in degrees): \")\n    for angle in config.rotation_angles:    # Rotation augmentation for a list of angle values\n        for angle in [angle,-angle]:\n            print(f'{angle}', end='  ')\n            M = cv2.getRotationMatrix2D((48,48), angle, 1.0)\n            angle_rad = -angle*pi\/180.     # Obtain angle in radians from angle in degrees (notice negative sign for change in clockwise vs anti-clockwise directions from conventional rotation to cv2's image rotation)\n            # For train_images\n            for image in images:\n                rotated_image = cv2.warpAffine(image, M, (96,96), flags=cv2.INTER_CUBIC)\n                rotated_images.append(rotated_image)\n            # For train_keypoints\n            for keypoint in keypoints:\n                rotated_keypoint = keypoint - 48.    # Subtract the middle value of the image dimension\n                for idx in range(0,len(rotated_keypoint),2):\n                    # https:\/\/in.mathworks.com\/matlabcentral\/answers\/93554-how-can-i-rotate-a-set-of-points-in-a-plane-by-a-certain-angle-about-an-arbitrary-point\n                    rotated_keypoint[idx] = rotated_keypoint[idx]*cos(angle_rad)-rotated_keypoint[idx+1]*sin(angle_rad)\n                    rotated_keypoint[idx+1] = rotated_keypoint[idx]*sin(angle_rad)+rotated_keypoint[idx+1]*cos(angle_rad)\n                rotated_keypoint += 48.   # Add the earlier subtracted value\n                rotated_keypoints.append(rotated_keypoint)\n            \n    return np.reshape(rotated_images,(-1,96,96,1)), rotated_keypoints\n\nprint()\n\nif config.rotation_augmentation:\n    rotated_train_images, rotated_train_keypoints = rotate_augmentation(clean_train_images, clean_train_keypoints)\n    print(\"Shape of rotated_train_images:\", np.shape(rotated_train_images))\n    print(\"Shape of rotated_train_keypoints:\", np.shape(rotated_train_keypoints))\n    train_images = np.concatenate((train_images, rotated_train_images))\n    train_keypoints = np.concatenate((train_keypoints, rotated_train_keypoints))\n    fig, axis = plt.subplots()\n    plot_sample(rotated_train_images[19], rotated_train_keypoints[19], axis, \"Rotation Augmentation\")","521cb464":"def alter_brightness(images, keypoints):\n    altered_brightness_images = []\n    inc_brightness_images = np.clip(images*1.2, 0.0, 1.0)    # Increased brightness by a factor of 1.2 & clip any values outside the range of [-1,1]\n    dec_brightness_images = np.clip(images*0.6, 0.0, 1.0)    # Decreased brightness by a factor of 0.6 & clip any values outside the range of [-1,1]\n    altered_brightness_images.extend(inc_brightness_images)\n    altered_brightness_images.extend(dec_brightness_images)\n    return altered_brightness_images, np.concatenate((keypoints, keypoints))\n\nif config.brightness_augmentation:\n    altered_brightness_train_images, altered_brightness_train_keypoints = alter_brightness(clean_train_images, clean_train_keypoints)\n    print(\"Shape of altered_brightness_train_images:\", np.shape(altered_brightness_train_images))\n    print(\"Shape of altered_brightness_train_keypoints:\", np.shape(altered_brightness_train_keypoints))\n    train_images = np.concatenate((train_images, altered_brightness_train_images))\n    train_keypoints = np.concatenate((train_keypoints, altered_brightness_train_keypoints))\n    fig, axis = plt.subplots()\n    plot_sample(altered_brightness_train_images[19], altered_brightness_train_keypoints[19], axis, \"Increased Brightness\") \n    fig, axis = plt.subplots()\n    plot_sample(altered_brightness_train_images[len(altered_brightness_train_images)\/\/2+19], altered_brightness_train_keypoints[len(altered_brightness_train_images)\/\/2+19], axis, \"Decreased Brightness\") ","b046c7c2":"def shift_images(images, keypoints):\n    shifted_images = []\n    shifted_keypoints = []\n    for shift in config.pixel_shifts:    # Augmenting over several pixel shift values\n        for (shift_x,shift_y) in [(-shift,-shift),(-shift,shift),(shift,-shift),(shift,shift)]:\n            M = np.float32([[1,0,shift_x],[0,1,shift_y]])\n            for image, keypoint in zip(images, keypoints):\n                shifted_image = cv2.warpAffine(image, M, (96,96), flags=cv2.INTER_CUBIC)\n                shifted_keypoint = np.array([(point+shift_x) if idx%2==0 else (point+shift_y) for idx, point in enumerate(keypoint)])\n                if np.all(0.0<shifted_keypoint) and np.all(shifted_keypoint<96.0):\n                    shifted_images.append(shifted_image.reshape(96,96,1))\n                    shifted_keypoints.append(shifted_keypoint)\n    shifted_keypoints = np.clip(shifted_keypoints,0.0,96.0)\n    return shifted_images, shifted_keypoints\n\nif config.shift_augmentation:\n    shifted_train_images, shifted_train_keypoints = shift_images(clean_train_images, clean_train_keypoints)\n    print(\"Shape of shifted_train_images:\", np.shape(shifted_train_images))\n    print(\"Shape of shifted_train_keypoints:\", np.shape(shifted_train_keypoints))\n    train_images = np.concatenate((train_images, shifted_train_images))\n    train_keypoints = np.concatenate((train_keypoints, shifted_train_keypoints))\n    fig, axis = plt.subplots()\n    plot_sample(shifted_train_images[19], shifted_train_keypoints[19], axis, \"Shift Augmentation\")","e60adc8c":"def add_noise(images):\n    noisy_images = []\n    for image in images:\n        noisy_image = cv2.add(image, 0.008*np.random.randn(96,96,1))    # Adding random normal noise to the input image & clip the resulting noisy image between [-1,1]\n        noisy_images.append(noisy_image.reshape(96,96,1))\n    return noisy_images\n\nif config.random_noise_augmentation:\n    noisy_train_images = add_noise(clean_train_images)\n    print(\"Shape of noisy_train_images:\", np.shape(noisy_train_images))\n    train_images = np.concatenate((train_images, noisy_train_images))\n    train_keypoints = np.concatenate((train_keypoints, clean_train_keypoints))\n    fig, axis = plt.subplots()\n    plot_sample(noisy_train_images[19], clean_train_keypoints[19], axis, \"Random Noise Augmentation\")","ee5f96d4":"print(\"Shape of final train_images:\", np.shape(train_images))\nprint(\"Shape of final train_keypoints:\", np.shape(train_keypoints))\n\nprint(\"\\nClean Train Data: \")\nfig = plt.figure(figsize=(20,8))\nfor i in range(10):\n    axis = fig.add_subplot(2, 5, i+1, xticks=[], yticks=[])\n    plot_sample(clean_train_images[i], clean_train_keypoints[i], axis, \"\")\nplt.show()\n\nprint(\"Unclean Train Data: \")\nfig = plt.figure(figsize=(20,8))\nfor i in range(10):\n    axis = fig.add_subplot(2, 5, i+1, xticks=[], yticks=[])\n    plot_sample(unclean_train_images[i], unclean_train_keypoints[i], axis, \"\")\nplt.show()\n\nif config.horizontal_flip:\n    print(\"Horizontal Flip Augmentation: \")\n    fig = plt.figure(figsize=(20,8))\n    for i in range(10):\n        axis = fig.add_subplot(2, 5, i+1, xticks=[], yticks=[])\n        plot_sample(flipped_train_images[i], flipped_train_keypoints[i], axis, \"\")\n    plt.show()\n\nif config.rotation_augmentation:\n    print(\"Rotation Augmentation: \")\n    fig = plt.figure(figsize=(20,8))\n    for i in range(10):\n        axis = fig.add_subplot(2, 5, i+1, xticks=[], yticks=[])\n        plot_sample(rotated_train_images[i], rotated_train_keypoints[i], axis, \"\")\n    plt.show()\n    \nif config.brightness_augmentation:\n    print(\"Brightness Augmentation: \")\n    fig = plt.figure(figsize=(20,8))\n    for i in range(10):\n        axis = fig.add_subplot(2, 5, i+1, xticks=[], yticks=[])\n        plot_sample(altered_brightness_train_images[i], altered_brightness_train_keypoints[i], axis, \"\")\n    plt.show()\n\nif config.shift_augmentation:\n    print(\"Shift Augmentation: \")\n    fig = plt.figure(figsize=(20,8))\n    for i in range(10):\n        axis = fig.add_subplot(2, 5, i+1, xticks=[], yticks=[])\n        plot_sample(shifted_train_images[i], shifted_train_keypoints[i], axis, \"\")\n    plt.show()\n    \nif config.random_noise_augmentation:\n    print(\"Random Noise Augmentation: \")\n    fig = plt.figure(figsize=(20,8))\n    for i in range(10):\n        axis = fig.add_subplot(2, 5, i+1, xticks=[], yticks=[])\n        plot_sample(noisy_train_images[i], clean_train_keypoints[i], axis, \"\")\n    plt.show()","48df894e":"model = Sequential()\n\npretrained_model = applications.ResNet50(input_shape=(96, 96, 3), include_top=False, weights='imagenet')\npretrained_model.trainable = True\n\nmodel.add(layers.Convolution2D(3, (1, 1), padding='same', input_shape=(96,96,1)))\nmodel.add(layers.LeakyReLU(alpha = 0.1))\nmodel.add(pretrained_model)\nmodel.add(layers.GlobalAveragePooling2D())\nmodel.add(layers.Dropout(0.1))\nmodel.add(layers.Dense(30))\nmodel.summary()","8d1ef952":"# utils.plot_model(model, show_shapes=True, expand_nested=True)","6762518b":"if os.path.isdir('..\/input\/trained-model\/trained_model'): \n    model = load_model(\"..\/input\/trained-model\/trained_model\")\n    train_model = False\nelse:\n    train_model = True\nprint('Training model: ',train_model)","4c83e39e":"if train_model:\n    es = callbacks.EarlyStopping(\n        monitor='loss', patience=30, verbose=1, mode='min', baseline=None, restore_best_weights=True\n    )\n\n    rlp = callbacks.ReduceLROnPlateau(\n        monitor='val_loss', factor=0.5, patience=5, min_lr=1e-15, mode='min', verbose=1\n    )\n\n    model.compile(\n        optimizer='adam', loss='mean_squared_error', metrics=['mae', 'acc']\n    )\n\n    history = model.fit(\n        train_images, train_keypoints, epochs=int(1.5*config.NUM_EPOCHS), batch_size=config.BATCH_SIZE, \n        validation_split=0.05, callbacks=[es, rlp]\n    )","b67c6f53":"if train_model:\n    sns.set_style('darkgrid')\n\n    fig, ax = plt.subplots(3, 1, figsize=(20, 10))\n    df = pd.DataFrame(history.history)\n    df[['mae', 'val_mae']].plot(ax=ax[0])\n    df[['loss', 'val_loss']].plot(ax=ax[1])\n    df[['acc', 'val_acc']].plot(ax=ax[2])\n    ax[0].set_title('Model MAE', fontsize=12)\n    ax[1].set_title('Model Loss', fontsize=12)\n    ax[2].set_title('Model Acc', fontsize=12)\n    fig.suptitle('Model Metrics', fontsize=18);","b5e06bd8":"if train_model:\n    %%time\n\n    es = callbacks.EarlyStopping(\n        monitor='loss', patience=30, verbose=1, mode='min', baseline=None, restore_best_weights=True\n    )\n\n    rlp = callbacks.ReduceLROnPlateau(\n        monitor='loss', factor=0.5, patience=5, min_lr=1e-15, mode='min', verbose=1\n    )\n\n\n    model.compile(\n        optimizer=optimizers.Adam(learning_rate=history.history['lr'][-1]), loss='mean_squared_error', metrics=['mae', 'acc']\n    )\n\n    history = model.fit(\n        train_images, train_keypoints, epochs=2*config.NUM_EPOCHS, batch_size=config.BATCH_SIZE, callbacks=[es, rlp]\n    )","afbbed0f":"if train_model:\n    fig, ax = plt.subplots(3, 1, figsize=(20, 10))\n    df = pd.DataFrame(history.history)\n    df[['mae']].plot(ax=ax[0])\n    df[['loss']].plot(ax=ax[1])\n    df[['acc']].plot(ax=ax[2])\n    ax[0].set_title('Model MAE', fontsize=12)\n    ax[1].set_title('Model Loss', fontsize=12)\n    ax[2].set_title('Model Acc', fontsize=12)\n    fig.suptitle('Model Metrics', fontsize=18);","eb91ea0f":"%%time\n \ntest_preds = model.predict(test_images)","e004d177":"a = test_preds[:, 22:24]\nb = test_preds[:, 24:26]\nmouth_length = np.linalg.norm(a-b, axis=1)\na = test_preds[:, 26:28]\nb = test_preds[:, 28:30]\nmouth_width = np.linalg.norm(a-b, axis=1)\nproportions = np.abs(mouth_width\/mouth_length)","829723af":"fig = plt.figure(figsize=(20, 16))\nidxs = np.random.choice(test_preds.shape[0], 20)\nprint(idxs)\nfor i, idx in enumerate(idxs):\n    axis = fig.add_subplot(4, 5, i+1, xticks=[], yticks=[])\n    plot_sample(test_images[idx], test_preds[idx], axis, str(proportions[idx]))","294fedca":"if train_model:\n    feature_names = list(idlookup_data['FeatureName'])\n    image_ids = list(idlookup_data['ImageId']-1)\n    row_ids = list(idlookup_data['RowId'])\n\n    feature_list = []\n    for feature in feature_names:\n        feature_list.append(feature_names.index(feature))\n\n    predictions = []\n    for x,y in zip(image_ids, feature_list):\n        predictions.append(test_preds[x][y])\n\n    row_ids = pd.Series(row_ids, name = 'RowId')\n    locations = pd.Series(predictions, name = 'Location')\n    locations = locations.clip(0.0,96.0)\n    submission_result = pd.concat([row_ids,locations],axis = 1)\n    submission_result.to_csv('submission.csv',index = False)","ac736108":"if train_model:\n    model.save('.\/trained_model')","2d970ddc":"from glob import glob\nfrom PIL import Image\ntest_images00 = glob(\"..\/input\/fer2013\/test\/neutral\/*jpg\")\ntest_images05 = glob(\"..\/input\/fer2013\/test\/happy\/*jpg\")\ntest_images10 = glob(\"..\/input\/fer2013\/test\/surprise\/*jpg\")\nprint(test_images00[0])","fdae08d7":"SIZE = 96\n#image are imported with a resizing and a black and white conversion\ndef ImportImage(filename):\n    img = cv2.imread(filename, 0)\n    img = cv2.resize(img, (SIZE,SIZE), interpolation=cv2.INTER_LINEAR)\n#     print(img.shape)\n    return np.array(img)\ntest_images = np.array([ImportImage( img) for img in test_images00])\ntest_images = np.concatenate((test_images, np.array([ImportImage( img) for img in test_images05])))\ntest_images = np.concatenate((test_images, np.array([ImportImage( img) for img in test_images10])))\n# x = test_images","24065142":"test_images = np.expand_dims(test_images, -1)\ntest_images.shape","d0bdf9ec":"test_preds = model.predict(test_images\/255)","2969ea4b":"test_preds.shape","484629b5":"a = test_preds[:,22:24]\nb = test_preds[:,24:26]\nmouth_length = np.linalg.norm(a-b,axis=1)\na = test_preds[:,26:28]\nb = test_preds[:,28:30]\nmouth_width = np.linalg.norm(a-b,axis=1)","704a252d":"proportions = np.abs((mouth_width\/mouth_length)-0.5)","c68616c1":"fig = plt.figure(figsize=(20,16))\nidxs = np.random.choice(test_preds.shape[0], 20)\nprint(idxs)\nfor i, idx in enumerate(idxs):\n    axis = fig.add_subplot(4, 5, i+1, xticks=[], yticks=[])\n    plot_sample(test_images[idx], test_preds[idx], axis, str(proportions[idx]))","ba6e703a":"## Training the model","315f80bb":"## Generating Submission File","a96f45be":"| 23 \t|\n|---\t|\n| 1 \t|\n| mouth_left_corner_x \t|\n| 24 \t|\n| 1 \t|\n| mouth_left_corner_y \t|\n| 25 \t|\n| 1 \t|\n| mouth_right_corner_x \t|\n| 26 \t|\n| 1 \t|\n| mouth_right_corner_y \t|\n| 27 \t|\n| 1 \t|\n| mouth_center_top_lip_x \t|\n| 28 \t|\n| 1 \t|\n| mouth_center_top_lip_y \t|\n| 29 \t|\n| 1 \t|\n| mouth_center_bottom_lip_x \t|\n| 30 \t|\n| 1 \t|\n| mouth_center_bottom_lip_y \t|","514a2cd1":"## Exploring Data","511b6fa6":"#### We can observe that approx. 68% of data is missing for several keypoints","0a3c84a3":"# Loading Data","ca345356":"## Visualize Train images & corresponding Keypoints","61480234":"## Predicting on Test Set","e63aaa2f":"**Find columns having Null values and their counts**","6d6ed417":"## Visualizing Test Predictions","9f8a77e9":"### Fit the model on full dataset","7ad3d4c7":"# Model","0231c9e8":"# Augmentation"}}