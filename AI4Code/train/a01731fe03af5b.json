{"cell_type":{"5e089912":"code","bb499906":"code","0af3556f":"code","78e028e5":"code","d6d05501":"code","e0e4141d":"code","4576750e":"code","8b398b14":"code","80cf44bc":"code","11dd6e07":"code","16d13a14":"code","79bf059f":"code","ca8c8528":"code","20f1a414":"code","1bd86393":"code","2ffa40d3":"code","00947232":"code","76e1d5e4":"code","983cf8af":"code","9fe8d81c":"code","178033c9":"code","8c27739c":"code","00780bc2":"code","36213d38":"code","6e4b49f4":"markdown","e7a37383":"markdown","0602938d":"markdown","ec2eef21":"markdown","9abf9499":"markdown","6cb5ff6a":"markdown","002a6043":"markdown","24321be7":"markdown","275be6b0":"markdown","7b059cf5":"markdown","7e5c1b6d":"markdown"},"source":{"5e089912":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\n\nfrom lightgbm import LGBMRegressor\nimport optuna","bb499906":"train = pd.read_csv('..\/input\/30-days-of-ml\/train.csv')\ntest  = pd.read_csv('..\/input\/30-days-of-ml\/test.csv')\nsub = pd.read_csv('..\/input\/30-days-of-ml\/sample_submission.csv')","0af3556f":"train.head()","78e028e5":"categorical_cols=['cat'+str(i) for i in range(10)]\ncontinous_cols=['cont'+str(i) for i in range(14)]","d6d05501":"for e in categorical_cols:\n    le = LabelEncoder()\n    train[e]=le.fit_transform(train[e])\n    test[e]=le.transform(test[e])","e0e4141d":"for e in continous_cols:\n    scaler = StandardScaler()\n    train[e] = scaler.fit_transform(np.array(train[e]).reshape(-1, 1))\n    test[e] = scaler.transform(np.array(test[e]).reshape(-1, 1))","4576750e":"data=train[categorical_cols+continous_cols]\ntarget=train['target']","8b398b14":"data.head()","80cf44bc":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param = {\n        'metric': 'rmse',\n        'random_state': 48,\n        'n_estimators': 20000,\n        'reg_alpha': trial.suggest_loguniform('reg_alpha', 1e-3, 10.0),\n        'reg_lambda': trial.suggest_loguniform('reg_lambda', 1e-3, 10.0),\n        'colsample_bytree': trial.suggest_categorical('colsample_bytree', [0.3,0.4,0.5,0.6,0.7,0.8,0.9, 1.0]),\n        'subsample': trial.suggest_categorical('subsample', [0.4,0.5,0.6,0.7,0.8,1.0]),\n        'learning_rate': trial.suggest_categorical('learning_rate', [0.006,0.008,0.01,0.014,0.017,0.02]),\n        'max_depth': trial.suggest_categorical('max_depth', [10,20,100]),\n        'num_leaves' : trial.suggest_int('num_leaves', 1, 1000),\n        'min_child_samples': trial.suggest_int('min_child_samples', 1, 300),\n        'cat_smooth' : trial.suggest_int('min_data_per_groups', 1, 100)\n    }\n    model = LGBMRegressor(**param)  \n    \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    \n    preds = model.predict(test_x)\n    \n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","11dd6e07":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=50)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","16d13a14":"study.trials_dataframe()","79bf059f":"#plot_optimization_histor: shows the scores from all trials as well as the best score so far at each point.\noptuna.visualization.plot_optimization_history(study)","ca8c8528":"#plot_parallel_coordinate: interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","20f1a414":"'''plot_slice: shows the evolution of the search. \nYou can see where in the hyperparameter space your search \nwent and which parts of the space were explored more.'''\noptuna.visualization.plot_slice(study)","1bd86393":"#plot_contour: plots parameter interactions on an interactive chart. You can choose which hyperparameters you would like to explore.\noptuna.visualization.plot_contour(study, params=['num_leaves',\n                            'max_depth',\n                            'subsample',\n                            'learning_rate',\n                            'subsample'])","2ffa40d3":"#Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","00947232":"#Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","76e1d5e4":"params=study.best_params   \nparams['random_state'] = 48\nparams['n_estimators'] = 20000 \nparams['metric'] = 'rmse'","983cf8af":"# I changed min_data_per_groups to cat_smooth beacuse when I used LGBM params in optuna I named cat_smooth\n# as min_data_per_groups (there is no parameter named min_data_per_groups in LGBM !!!)\nparams['cat_smooth'] = params.pop('min_data_per_groups')","9fe8d81c":"params","178033c9":"columns = categorical_cols+continous_cols\npreds = np.zeros(test.shape[0])\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nrmse=[]  # list contains rmse for each fold\nn=0\nfor trn_idx, test_idx in kf.split(train[columns],train['target']):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=train['target'].iloc[trn_idx],train['target'].iloc[test_idx]\n    model = LGBMRegressor(**params)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds += model.predict(test[columns])\/kf.n_splits\n    rmse.append(mean_squared_error(y_val, model.predict(X_val), squared=False))\n    print(n + 1,rmse[n])\n    n += 1","8c27739c":"np.mean(rmse)","00780bc2":"from optuna.integration import lightgbm as lgb\nlgb.plot_importance(model, max_num_features=10, figsize=(10,10))\nplt.show()","36213d38":"sub['target']=preds\nsub.to_csv('submission.csv', index=False)","6e4b49f4":"## Let's build our optimization function using optuna","e7a37383":"## All thing is ready So let's start \ud83c\udfc4\u200d\n* Note that the objective of our fuction is to minimize the RMSE that's why I set direction='minimize'\n* you can vary n_trials(number of executions) ","0602938d":"### This function uses LGBMRegressor model, takes \n* the data\n* the target\n* trial(How many executions we will do)  \n#### and returns\n* RMSE(Root Mean Squared Rrror)","ec2eef21":"**So, Optuna is an automatic hyperparameter optimization software framework, particularly designed for machine learning. It features an imperative, define-by-run style user API. The code written with Optuna enjoys high modularity, and the user of Optuna can dynamically construct the search spaces for the hyperparameters.** \n* To learn more about Optuna check this [link](https:\/\/optuna.org\/)","9abf9499":"## Encode categorical features and preprocessing","6cb5ff6a":"# Optuna: A hyperparameter optimization framework","002a6043":"# Basic Concepts\nSo, We use the terms study and trial as follows:\n* Study: optimization based on an objective function\n* Trial: a single execution of the objective function","24321be7":"Reference: https:\/\/www.kaggle.com\/hamzaghanmi\/lgbm-hyperparameter-tuning-using-optuna?rvi=1","275be6b0":"# Let's do some Quick Visualization for Hyperparameter Optimization Analysis\n### Optuna provides various visualization features in optuna.visualization to analyze optimization results visually","7b059cf5":"## Notes:\n* Note that I used some LGBMRegressor hyperparameters from LGBM official site. \n* So if you like to add more parameters or change them, check this [link](https:\/\/lightgbm.readthedocs.io\/en\/latest\/Parameters.html) \n* Also I used early_stopping_rounds to avoid overfiting","7e5c1b6d":"# Submission"}}