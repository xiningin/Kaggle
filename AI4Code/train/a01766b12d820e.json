{"cell_type":{"f2e27c05":"code","1662e5b5":"code","fd09f2c0":"code","f6c31dca":"code","db629c9d":"code","b0240f35":"code","1343830f":"code","c8a511c6":"code","c98ae973":"code","7c90f29f":"code","251fdcef":"code","d1e9ea3b":"code","99fbd783":"code","b0df5770":"code","2339d6d5":"code","a274ee0f":"code","bc37ddf3":"code","f3caa9c5":"code","9d80f8cd":"markdown","f4b784de":"markdown","34704cb9":"markdown","c15d8c9e":"markdown","7b589dcb":"markdown","b9e23981":"markdown","8d65ab31":"markdown","137f2948":"markdown","b43c6b61":"markdown","9d3b63a7":"markdown","2799e49a":"markdown","9d52ed4b":"markdown","5e400889":"markdown","3bbee640":"markdown","0c5355e5":"markdown","a922ab51":"markdown","497c5b10":"markdown","a4eb7a11":"markdown","3e71054d":"markdown","d556e175":"markdown","93a93d3f":"markdown","c4ef4c54":"markdown","725676e9":"markdown"},"source":{"f2e27c05":"#Load the librarys\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib import rcParams\n\nimport plotly.tools as tls\nimport plotly.offline as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\nimport warnings\n\nfrom scipy import stats\n\n%matplotlib inline\n\n# figure size in inches\nrcParams['figure.figsize'] = 12,6","1662e5b5":"df_features = pd.read_csv(\"..\/input\/real_estate_db.csv\", encoding='ISO-8859-1' )\n\ndel df_features['BLOCKID']\ndel df_features['UID'] ","fd09f2c0":"def resumetable(df):\n    print(f\"Dataset Shape: {df.shape}\")\n    summary = pd.DataFrame(df.dtypes,columns=['dtypes'])\n    summary = summary.reset_index()\n    summary['Name'] = summary['index']\n    summary = summary[['Name','dtypes']]\n    summary['Missing'] = df.isnull().sum().values    \n    summary['Uniques'] = df.nunique().values\n    summary['First Value'] = df.loc[0].values\n    summary['Second Value'] = df.loc[1].values\n    summary['Third Value'] = df.loc[2].values\n\n    for name in summary['Name'].value_counts().index:\n        summary.loc[summary['Name'] == name, 'Entropy'] = round(stats.entropy(df[name].value_counts(normalize=True), base=2),2) \n\n    return summary","f6c31dca":"#looking the shape of data\nresumetable(df_features)[:43]","db629c9d":"#looking the shape of data\nresumetable(df_features)[43:]","b0240f35":"#Looking the data\ndf_features.head()","1343830f":"percentual_types = round(df_features[\"type\"].value_counts(), 2)\n\ntypes = round(df_features[\"type\"].value_counts() \/ len(df_features[\"type\"]) * 100,2)\n\nlabels = list(types.index)\nvalues = list(types.values)\n\ntrace1 = go.Pie(labels=labels, values=values, marker=dict(colors=['red']), text = percentual_types.values,)\n\nlayout = go.Layout(title='Distribuition of Types', legend=dict(orientation=\"h\"));\n\nfig = go.Figure(data=[trace1], layout=layout)\niplot(fig)","c8a511c6":"state_count = df_features[\"state\"].value_counts()\ncity_count = df_features.city.value_counts()\nplace_count = df_features.place.value_counts()\nprimary_count = df_features.primary.value_counts()","c98ae973":"trace1 = go.Bar(x=state_count[:20].values[::-1],\n                y=state_count[:20].index[::-1],\n                orientation='h', visible=True,\n                      name='Top 20 States',\n                      marker=dict(\n                          color=city_count[:20].values[::-1],\n                          colorscale = 'Viridis',\n                          reversescale = True\n                      ))\n\ntrace2 = go.Bar(x=city_count[:20].values[::-1],\n                      y=city_count[:20].index[::-1],\n                      orientation = 'h', visible=False, \n                      name='TOP 20 Citys',\n                      marker=dict(\n                          color=city_count[:20].values[::-1],\n                          colorscale = 'Viridis',\n                          reversescale = True\n                      ))\n\ntrace3 = go.Histogram(y=sorted(df_features['type'], reverse=True), histnorm='percent', orientation='h', visible=False, \n                      name='Type Count')\n\ntrace4 = go.Bar(x=place_count[:20].values[::-1],\n                y=place_count[:20].index[::-1],\n                orientation='h', visible=False, \n                name='Top 20 Place',\n                marker=dict(\n                    color=city_count[:20].values[::-1],\n                    colorscale = 'Viridis',\n                    reversescale = True\n                      ))\n\ndata = [trace1, trace2, trace3, trace4]\n\nupdatemenus = list([\n    dict(active=-1,\n         x=-0.15,\n         buttons=list([  \n            dict(\n                label = 'State Count',\n                 method = 'update',\n                 args = [{'visible': [True, False, False, False]}, \n                         {'title': 'TOP 20 State Count'}]),\n             \n             dict(\n                  label = 'City Count',\n                 visible=True,\n                 method = 'update',\n                 args = [{'visible': [False, True, False, False]},\n                     {'title': 'TOP 20 City Count'}]),\n\n            dict(\n                 label = 'Type Count',\n                 method = 'update',\n                 args = [{'visible': [False, False, True, False]},\n                     {'title': 'Type Counts'}]),\n\n            dict(\n                 label = 'Place Count',\n                 method = 'update',\n                 args = [{'visible': [False, False, False, True]},\n                     {'title': ' Top 20 Place Count'}])\n        ]),\n    )\n])\n\n\nlayout = dict(title='The count of the principal Categorical Features <br>(Select from Dropdown)', \n              showlegend=False,\n              updatemenus=updatemenus)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig)\n","7c90f29f":"df_features['ALand_div_1M'] = np.log(df_features['ALand'] \/ 1000000)","251fdcef":"\ntrace1  = go.Box(\n    x=df_features[df_features.city.isin(city_count[:15].index.values)]['city'],\n    y=df_features[df_features.city.isin(city_count[:15].index.values)]['rent_median'], \n    showlegend=False, visible=True\n)\n                        \ntrace2  = go.Box(\n    x=df_features[df_features.city.isin(city_count[:15].index.values)]['city'],\n    y=df_features[df_features.city.isin(city_count[:15].index.values)]['family_median'], \n    showlegend=False, visible=False\n)\n                \ntrace3 = go.Box(\n    x=df_features[df_features.city.isin(city_count[:15].index.values)]['city'],\n    y=df_features[df_features.city.isin(city_count[:15].index.values)]['hi_median'],\n    showlegend=False, visible=False\n)\n\ntrace4 = go.Box(\n    x=df_features[df_features.city.isin(city_count[:15].index.values)]['city'],\n    y=df_features[df_features.city.isin(city_count[:15].index.values)]['hc_mortgage_mean'],\n    showlegend=False, visible=False\n)\n\ndata = [trace1, trace2, trace3, trace4]\n\nupdatemenus = list([\n    dict(active=-1,\n         x=-0.15,\n         buttons=list([  \n             \n            dict(\n                label = 'City Rent Boxplot',\n                 method = 'update',\n                 args = [{'visible': [True, False, False, False]}, \n                     {'title': 'TOP 15 Citys - Rent Median'}]),\n             \n             dict(\n                  label = 'City Family Boxplot',\n                 method = 'update',\n                 args = [{'visible': [False, True, False, False]},\n                     {'title': 'TOP 15 Citys - Family Income Median'}]),\n\n            dict(\n                 label = 'City House Inc',\n                 method = 'update',\n                 args = [{'visible': [False, False, True, False]},\n                     {'title': 'TOP 15 Citys - House income Median'}]),\n\n            dict(\n                 label =  'City HC Mortage',\n                 method = 'update',\n                 args = [{'visible': [False, False, False, True]},\n                     {'title': 'TOP 15 Citys - Home Cost Mortage'}])\n        ]),\n    )\n])\n\nlayout = dict(title='Citys BoxPlots of Medians <br>(Select metrics from Dropdown)', \n              showlegend=False,\n              updatemenus=updatemenus)\n\nfig = dict(data=data, layout=layout)\n\niplot(fig, filename='dropdown')","d1e9ea3b":"city_count = df_features.city.value_counts()\n\n#First plot\ntrace0 = go.Box(\n    x=df_features[df_features.city.isin(city_count[:10].index.values)]['city'],\n    y=df_features[df_features.city.isin(city_count[:10].index.values)]['rent_median'], \n    showlegend=False\n)\n\n#Second plot\ntrace1 = go.Box(\n    x=df_features[df_features.city.isin(city_count[:10].index.values)]['city'],\n    y=df_features[df_features.city.isin(city_count[:10].index.values)]['family_median'], \n    showlegend=False\n)\n\n#Second plot\ntrace2 = go.Box(\n    x=df_features[df_features.city.isin(city_count[:10].index.values)]['city'],\n    y=df_features[df_features.city.isin(city_count[:10].index.values)]['hc_mortgage_median'], \n    showlegend=False\n)\n\n#Third plot\ntrace3 = go.Histogram(\n    x=df_features[df_features.city.isin(city_count[:20].index.values)]['city'], histnorm='percent',\n    showlegend=False\n)\n#Third plot\ntrace4 = go.Histogram(\n    x=np.log(df_features['family_median']).sample(5000), histnorm='percent', autobinx=True,\n    showlegend=True, name='Family'\n)\n\n#Third plot\ntrace5 = go.Histogram(\n    x=np.log(df_features['hc_mortgage_median']).sample(5000), histnorm='percent', autobinx=True,\n    showlegend=True, name='HC mort'\n)\n\n#Third plot\ntrace6 = go.Histogram(\n    x=np.log(df_features['rent_median']).sample(5000), histnorm='percent', autobinx=True,\n    showlegend=True, name=\"Rent\"\n)\n\n#Creating the grid\nfig = tls.make_subplots(rows=2, cols=3, specs=[[{'colspan': 2}, None, {}], [{}, {}, {}]],\n                          subplot_titles=(\"Citys Count\",\n                                          \"Medians Distribuition\", \n                                          \"HC Morttage Median\",\n                                          \"Family Median\", \n                                          \"Rent Median\"))\n\n#setting the figs\nfig.append_trace(trace0, 2, 1)\nfig.append_trace(trace1, 2, 3)\nfig.append_trace(trace2, 2, 2)\nfig.append_trace(trace3, 1, 1)\nfig.append_trace(trace4, 1, 3)\nfig.append_trace(trace5, 1, 3)\nfig.append_trace(trace6, 1, 3)\n\nfig['layout'].update(showlegend=True, title=\"Some Top Citys Distribuitions\")\n\niplot(fig)","99fbd783":"\n#First plot\ntrace0 = go.Box(\n    x=df_features[df_features.city.isin(city_count[:10].index.values)]['city'],\n    y=df_features[df_features.city.isin(city_count[:10].index.values)]['rent_median'], \n    showlegend=False\n)\n\n#Second plot\ntrace1 = go.Box(\n    x=df_features[df_features.city.isin(city_count[:10].index.values)]['city'],\n    y=df_features[df_features.city.isin(city_count[:10].index.values)]['family_median'], \n    showlegend=False\n)\n\n#Second plot\ntrace2 = go.Box(\n    x=df_features[df_features.city.isin(city_count[:10].index.values)]['city'],\n    y=df_features[df_features.city.isin(city_count[:10].index.values)]['hc_mortgage_median'], \n    showlegend=False\n)\n\n#Third plot\ntrace3 = go.Histogram(\n    x=df_features[df_features.city.isin(city_count[:20].index.values)]['city'], histnorm='percent',\n    showlegend=False\n)\n\n#Creating the grid\nfig = tls.make_subplots(rows=2, cols=3, specs=[[{'colspan': 3}, None, None], [{}, {}, {}]],\n                          subplot_titles=(\"City Count\",\n                                          \"Rent Median by City\",\n                                          \"HC Morttage Median by City\",\n                                          \"Family Median by City\"\n                                          ))\n#setting the figs\nfig.append_trace(trace0, 2, 1)\nfig.append_trace(trace1, 2, 3)\nfig.append_trace(trace2, 2, 2)\nfig.append_trace(trace3, 1, 1)\n\nfig['layout'].update(showlegend=True, title=\"Some City Distribuitions\")\niplot(fig)","b0df5770":"\n#First plot\ntrace0 = go.Box(\n    x=df_features[df_features.state.isin(state_count[:10].index.values)]['state'],\n    y=df_features[df_features.state.isin(state_count[:10].index.values)]['hs_degree'],\n    name=\"Top 10 States\", showlegend=False\n)\n\n#Second plot\ntrace1 = go.Box(\n    x=df_features[df_features.state.isin(state_count[:10].index.values)]['state'],\n    y=df_features[df_features.state.isin(state_count[:10].index.values)]['family_median'],\n    name=\"Top 15 Sucessful\", showlegend=False\n)\n\n#Third plot\ntrace2 = go.Histogram(\n    x=df_features[df_features.place.isin(place_count[:20].index.values)]['place'],\n    histnorm='percent', name=\"Top 20 Place's\", showlegend=False             \n)\n\n#Creating the grid\nfig = tls.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                          subplot_titles=('HS Degree Median TOP 10 States',\n                                          'Family Median TOP 10 States', \n                                          \"Top 20 Most Frequent Places\"))\n\n#setting the figs\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(showlegend=True, title=\"Top Frequency States\")\n\niplot(fig)","2339d6d5":"#First plot\ntrace0 = go.Box(\n    x=df_features['type'],\n    y=df_features['rent_median'], \n    showlegend=False\n)\n\n#Second plot\ntrace1 = go.Box(\n    x=df_features['type'],\n    y=df_features['family_median'], \n    showlegend=False\n)\n\n#Second plot\ntrace2 = go.Histogram(\n    x=df_features['type'], histnorm=\"percent\", \n    showlegend=False\n)\n\ntrace3 = go.Scatter(\n    x=df_features['rent_median'], \n    y=df_features['family_median'],\n    showlegend=False,\n    mode = 'markers'\n)\n\n#Creating the grid\nfig = tls.make_subplots(rows=2, cols=3, specs=[[{}, {}, {}], [{'colspan': 3}, None, None]],\n                          subplot_titles=(\"Rent Median by Type\",\n                                          \"Type Count\",\n                                          \"Family Median by Type\", \n                                          \"Rent Median x Family Median\"))\n\n#setting the figs\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 3)\nfig.append_trace(trace2, 1, 2)\nfig.append_trace(trace3, 2, 1)\n\nfig['layout'].update(showlegend=True, \n                     title=\"Some Type Distribuitions\")\n\niplot(fig)","a274ee0f":"\n#First plot\ntrace0 = go.Box(\n    x=df_features[df_features.state.isin(state_count[:10].index.values)]['state'],\n    y=df_features[df_features.state.isin(state_count[:10].index.values)]['rent_median'],\n    name=\"Top 10 States\", showlegend=False\n)\n\n#Second plot\ntrace1 = go.Box(\n    x=df_features[df_features.state.isin(state_count[:10].index.values)]['state'],\n    y=df_features[df_features.state.isin(state_count[:10].index.values)]['hc_mortgage_median'],\n    name=\"Top 15 Sucessful\", showlegend=False\n)\n\n#Third plot\ntrace2 = go.Histogram(\n    x=df_features[df_features.state.isin(state_count[:20].index.values)]['state'],\n    histnorm='percent', name=\"Top 20 States's\", showlegend=False             \n)\n\n#Creating the grid\nfig = tls.make_subplots(rows=2, cols=2, specs=[[{}, {}], [{'colspan': 2}, None]],\n                          subplot_titles=('Rent Median TOP 10 States',\n                                          'Mortage Median TOP 10 States', \n                                          \"Top 20 Most Frequent States\"))\n\n#setting the figs\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\nfig.append_trace(trace2, 2, 1)\n\nfig['layout'].update(showlegend=True, title=\"Top Frequency States\")\n\niplot(fig)","bc37ddf3":"cat_feat = df_features.loc[:, df_features.dtypes == object].columns\nnum_feat = df_features.loc[:, df_features.dtypes != object].columns","f3caa9c5":"female_male  = ['hs_degree', 'hs_degree_male', 'hs_degree_female', 'male_age_mean',\n                'male_age_median', 'male_age_stdev', 'male_age_sample_weight',\n                'male_age_samples', 'female_age_mean', 'female_age_median',\n                'female_age_stdev', 'female_age_sample_weight', 'female_age_samples']","9d80f8cd":"## Reading Dataset","f4b784de":"# Taking a look in box plots of some of this values","34704cb9":"# Type Feature\n- I ever need to define a feature to start. In general, I ever try to start by categoricals, so I choose \"Type\" feature.\n- Let's start by the distribution of each type in our data","c15d8c9e":"## Old Plots that might I will erase and continue developing graphs with markdown\n","7b589dcb":"# Interactive ","b9e23981":"# I will introduce a interactive plot that will be possible use a dropdown to change to count of each categorical feature","8d65ab31":"# <font color=\"red\">If it were useful for you, please <b>UPVOTE<\/b> the kernel and give me your feedback =)<\/font>","137f2948":"- How can I set space between the plots and also how to invert the x axis labels","b43c6b61":"## Please votes up my kernel and stay tuned in my kernel. ","9d3b63a7":"## Importing Libraries","2799e49a":"# Resuming our data","9d52ed4b":"<h1>Looking the distribuition of Numerical values <\/h1>","5e400889":"## Some boxplots of City's","3bbee640":"### Second part of features","0c5355e5":"## Look head of our data","a922ab51":"### First part of features ","497c5b10":"<b>Background:<\/b>\nThe underlying concept behind hedging strategies is simple, create a model, and make money doing it. The hardest part is finding the features that matter. For a more in-depth look at hedging strategies, I have attached one of my graduate papers to get you started.\n <br>\n- <b>Mortgage-Backed Securities<\/b> <br>\n- <b>Geographic Business Investment<\/b> <br>\n- <b> Real Estate Analysis <\/b><br>\n\n\n<b>Statistical Fields:<\/b> <br>\nNote: All interpolated statistical data include Mean, Median, and Standard Deviation Statistics. For more information view the variable definitions document.\n\n<b>Monthly Mortgage & Owner Costs: <\/b>Sum of mortgage payments, home equity loans, utilities, property taxes <br>\n<b>Monthly Owner Costs:<\/b> Sum of utilities, property taxes <br>\n<b>Gross Rent:<\/b> contract rent plus the estimated average monthly cost of utilities <br>\n<b>Household Income: <\/b>sum of the householder and all other individuals +15 years who reside in the household <br>\n<b>Family Income:<\/b> Sum of incomes of all members +15 years of age related to the householder.","a4eb7a11":"Cool. \n","3e71054d":"## If you want to see how the data appears, and other informations, click in \"Show Output\" button","d556e175":"## First Look in State Feature","93a93d3f":"## Another Approach to visualization of this same data","c4ef4c54":"## State by some numerical features","725676e9":"<h1> Welcome to my Kernel <\/h1><br>\nI will do some explorations though the data of Financial Hedging just to better understand the pattern of variables\n<br>\n\n*English is not my first language, so sorry for any mistake. *\n\n<h3> Introduction to the data<\/h3> "}}