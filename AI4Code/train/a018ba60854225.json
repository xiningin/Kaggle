{"cell_type":{"bb6c7af6":"code","cecf030e":"code","0124b8a0":"code","214f6320":"code","3a5f725c":"code","1f29b3ce":"code","398e4193":"code","d0bcbb05":"code","6e5b64df":"code","323f4508":"code","2b0d4a0c":"code","5a96e582":"code","cf92041e":"code","76104c53":"code","d80a5026":"code","98106251":"code","02ae6a4c":"code","3924a64e":"code","ed6bbb60":"code","d72dab0f":"code","dc839f38":"code","70178e0d":"code","7d4b74ce":"code","6b9159e2":"code","3c98f833":"code","1605f943":"code","2fb02c08":"code","8c274bbb":"code","ad4211b1":"markdown","22a8472a":"markdown","0a4da72a":"markdown","3ccfbdd0":"markdown","3db69d11":"markdown","a96efd56":"markdown","50b5f1d2":"markdown","f9115e16":"markdown","471e89a6":"markdown","70a9f9ca":"markdown","c1497087":"markdown","aec69092":"markdown"},"source":{"bb6c7af6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","cecf030e":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px \nfrom matplotlib import pyplot\nfrom pandas.plotting import autocorrelation_plot\nfrom pandas import DataFrame\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","0124b8a0":"series = pd.read_csv(\"\/kaggle\/input\/covid19-confirmed-cases-kerala\/Confirmed Covid 19 Cases Kerala.csv\")","214f6320":"series","3a5f725c":"series.shape","1f29b3ce":"series.head()","398e4193":"series.tail()","d0bcbb05":"series.sample(10)","6e5b64df":"series.set_index('Date',inplace=True) ","323f4508":"series.describe()","2b0d4a0c":"series.describe().T","5a96e582":"series.info()","cf92041e":"series.plot()\npyplot.show()","76104c53":"from pandas.plotting import autocorrelation_plot\nautocorrelation_plot(series['Confirmed'])\nplt.show()","d80a5026":"from statsmodels.tsa.stattools import adfuller\n\ntest_result=adfuller(series['Confirmed'])\n\n#Ho: It is non stationary\n#H1: It is stationary\n\ndef adfuller_test(Confirmed):\n    result=adfuller(Confirmed)\n    labels = ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']\n    for value,label in zip(result,labels):\n        print(label+' : '+str(value) )\n    if result[1] <= 0.05:\n        print(\"strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary\")\n    else:\n        print(\"weak evidence against null hypothesis, time series has a unit root, indicating it is non-stationary \")\n\nadfuller_test(series['Confirmed'])\n","98106251":"\n#from statsmodels.tsa.stattools import adfuller\n#from numpy import log\n#result = adfuller(series.value.dropna())\n#print('ADF Statistic: %f' % result[0])\n#print('p-value: %f' % result[1])\n\n\nfrom statsmodels.tsa.stattools import adfuller\ntest_result=adfuller(series['Confirmed'])\ntest_result\nprint('ADF Statistic: %f' % test_result[0])\nprint('p-value: %f' % test_result[1])\n\n","02ae6a4c":"from statsmodels.tsa.arima_model import ARIMA\n\n# 1,1,2 ARIMA Model\nmodel = ARIMA(series['Confirmed'], order=(1,1,2)) \nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())","3924a64e":"model = ARIMA(series['Confirmed'], order=(1,1,1))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())","ed6bbb60":"# Plot residual errors\nresiduals = pd.DataFrame(model_fit.resid)\nfig, ax = plt.subplots(1,2)\nresiduals.plot(title=\"Residuals\", ax=ax[0])\nresiduals.plot(kind='kde', title='Density', ax=ax[1])\nplt.show()\n","d72dab0f":"# Actual vs Fitted\nmodel_fit.plot_predict(dynamic=False)\nplt.show()","dc839f38":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf\nimport statsmodels.api as sm\n\nfig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf(series['Confirmed'].iloc[:],lags=40,ax=ax1) ","70178e0d":"model_fit.plot_predict(dynamic=False)\n","7d4b74ce":"pip install pmdarima","6b9159e2":"from statsmodels.tsa.arima_model import ARIMA\nimport pmdarima as pm\n\nmodel = pm.auto_arima(series['Confirmed'], start_p=1, start_q=1,\n                      test='adf',       # use adftest to find optimal 'd'\n                      max_p=3, max_q=3, # maximum p and q\n                      m=1,              # frequency of series\n                      d=None,           # let model determine 'd'\n                      seasonal=False,   # No Seasonality\n                      start_P=0, \n                      D=0, \n                      trace=True,\n                      error_action='ignore',  \n                      suppress_warnings=True, \n                      stepwise=True)\n\nprint(model.summary())\n","3c98f833":"model.plot_diagnostics(figsize=(7,5))\nplt.show()","1605f943":"# Forecast\n\nn_periods = 24\nfc, confint = model.predict(n_periods=n_periods, return_conf_int=True)\nindex_of_fc = np.arange(len(series['Confirmed']), len(series['Confirmed'])+n_periods)\n\n# make series for plotting purpose\nfc_series = pd.Series(fc, index=index_of_fc)\nlower_series = pd.Series(confint[:, 0], index=index_of_fc)\nupper_series = pd.Series(confint[:, 1], index=index_of_fc)\n\n# Plot\nplt.plot(series['Confirmed'])\nplt.plot(fc_series, color='darkgreen')\nplt.fill_between(lower_series.index, \n                 lower_series, \n                 upper_series, \n                 color='k', alpha=.15)\n\nplt.title(\"Final Forecast\")\nplt.show()","2fb02c08":"# Import\ndata = series['Confirmed']\n\n# Plot\nfig, axes = plt.subplots(2, 1, figsize=(10,5), dpi=100, sharex=True)\n\n# Usual Differencing\naxes[0].plot(data[:], label='Original Series')\naxes[0].plot(data[:].diff(1), label='Usual Differencing')\naxes[0].set_title('Usual Differencing')\naxes[0].legend(loc='upper left', fontsize=10)\n\n\n# Seasinal Dei\naxes[1].plot(data[:], label='Original Series')\naxes[1].plot(data[:].diff(12), label='Seasonal Differencing', color='green')\naxes[1].set_title('Seasonal Differencing')\nplt.legend(loc='upper left', fontsize=10)\n\nplt.show()","8c274bbb":"!pip install pmdarima\n\nimport pmdarima as pm\n\n# Seasonal - fit stepwise auto-ARIMA\n\nsmodel = pm.auto_arima(data, start_p=1, start_q=1,\n                         test='adf',\n                         max_p=3, max_q=3, m=31,\n                         start_P=0, seasonal=True,\n                         d=None, D=1, trace=True,\n                         error_action='ignore',  \n                         suppress_warnings=True, \n                         stepwise=True)\n\nsmodel.summary()","ad4211b1":"Let\u2019s build the SARIMA model using pmdarima\u2018s auto_arima(). To do that, you need to set seasonal=True, set the frequency m=31 for month day wise series and enforce D=1.\n\n","22a8472a":"# How to do Auto Arima Forecast in Python","0a4da72a":"# Show your Support to the Notebook.","3ccfbdd0":"# Viewing the Data","3db69d11":"Let\u2019s forecast for the next 24 months.","a96efd56":"# Importing the Libraries ","50b5f1d2":"# Reading the Data","f9115e16":"# Dimensions of the Data","471e89a6":" # How to automatically build SARIMA model in python","70a9f9ca":"- Now we have best p,d,q values","c1497087":"# After April the Covid Cases in Kerala are Increased. ","aec69092":"# Get Back to that Notebook Soon."}}