{"cell_type":{"6e6fea5e":"code","41e56316":"code","aae6f641":"code","28c6d39e":"markdown"},"source":{"6e6fea5e":"import pandas as pd\nfrom PIL import Image\n\n\n# Load data.\ndf = pd.read_csv(\"\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv\")\n\n# Correct for Equirectangular map projection.\ndf.loc[:, 'Lat'] *= 2\n\n# Combine Province\/State with Country\/Region.\ndef combine(row):\n    ps, cr = row['Province\/State'], row['Country\/Region']\n    return cr if pd.isnull(ps) else \"{}, {}\".format(ps, cr)\ndf['Country\/Region'] = df.apply(combine, axis=1)\n\n# Add new column representing the number of active cases.\ndef active(row):\n    return row['Confirmed'] - row['Deaths'] - row['Recovered']\ndf = df.dropna(subset=['Confirmed', 'Deaths', 'Recovered'])\ndf['Active'] = df.apply(active, axis=1)\ndf = df[df['Active'] >= 0]\n\n# Equirectangular map projection image.\nimg = Image.open(\"\/kaggle\/input\/equirectangularmap\/Equirectangular.jpg\")","41e56316":"import plotly.express as px\nimport plotly.offline as py\n\n\ndef make_fig(data_frame, series, bg_img):\n    \"\"\"\n    Create the COVID-19 interactive visualization from the given data.\n    \n    :param data_frame: the dataset\n    :type data_frame: pandas DataFrame\n    :param series: one of ['Confirmed', 'Deaths', 'Recovered', 'Active']\n    :type series: string\n    :param bg_img: Equirectangular map projection image\n    :type bg_img: PIL Image\n    :return: the resulting figure\n    :rtype: plotly Figure\n    \"\"\"\n    if series not in ['Confirmed', 'Deaths', 'Recovered', 'Active']:\n        raise ValueError(\"'series' must be one of ['Confirmed', 'Deaths', 'Recovered', 'Active']\")\n    \n    # Make interactive scatter plot figure.\n    fig = px.scatter(\n        data_frame,\n        x = 'Long',\n        y = 'Lat',\n        animation_frame = 'Date',\n        animation_group = 'Country\/Region',\n        size = series,\n        hover_name = 'Country\/Region',\n        size_max = 40,\n        range_x = [-180, 180],\n        range_y = [-180, 180]\n    )\n    \n    # Add the title and axes labels.\n    count_type = \"Current\" if series == 'Active' else \"Cumulative\"\n    series_type = series.lower() + (\"\" if series == 'Deaths' else \" cases\")\n    start_date = data_frame['Date'].iloc[0]\n    end_date = data_frame['Date'].iloc[-1]\n    title = \"{} number of {} from {} to {}\".format(\n        count_type, series_type, start_date, end_date)\n    fig.update_layout(\n        title = {\n            'text': title,\n            'x': 0.5,\n            'y': 0.95,\n            'xanchor': 'center',\n            'yanchor': 'top'},\n        xaxis_title = \"Longitude\",\n        yaxis_title = \"Latitude\"\n    )\n    \n    # Remove axes lines and zero lines.\n    fig.update_layout(\n        xaxis = dict(showgrid = False, zeroline = False),\n        yaxis = dict(showgrid = False, zeroline = False),\n    )\n\n    # Add Equirectangular map projection as background image.\n    fig.add_layout_image(\n        dict(\n            source = bg_img,\n            xref = \"x\",\n            yref = \"y\",\n            x = -180,\n            y = 180,\n            sizex = 360,\n            sizey = 360,\n            sizing = \"stretch\",\n            opacity = 1.0,\n            layer = \"below\"\n        )\n    )\n    fig.update_layout(template = \"plotly_white\")\n    \n    return fig\n","aae6f641":"fig = make_fig(df, 'Confirmed', img)\nfig.show()\nfig = make_fig(df, 'Deaths', img)\nfig.show()\nfig = make_fig(df, 'Recovered', img)\nfig.show()\nfig = make_fig(df, 'Active', img)\nfig.show()","28c6d39e":"# COVID-19 (Coronavirus) Global Cases Visualization\n* Interactive plots showing confirmed cases, deaths, recovered cases, and active cases since Jan 22, 2020.\n* Active cases are shown as daily values. All others are cumulative since Jan 22, 2020.\n* Similar to https:\/\/coronavirus.jhu.edu\/map.html but adds ***deaths and recovered cases*** plots, as well as ***being animated to show daily progression*** since Jan 22, 2020.\n\n# Dataset\n\n* https:\/\/www.kaggle.com\/imdevskp\/corona-virus-report\n* Modification: combining 'Province\/State' with 'Country\/Region' for unique regional ID.\n* Modification: adding a new column representing the number of active cases.\n* Cleanup: dropping rows where one of ['Confirmed', 'Deaths', 'Recovered'] is NaN or where 'Active' < 0."}}