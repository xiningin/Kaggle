{"cell_type":{"b2df3e59":"code","932f2f7e":"code","dd950c5f":"code","b5e19199":"code","aeabcb2b":"code","ea06324d":"code","322c9b8e":"code","9107d99a":"code","6f496419":"code","1835b5de":"code","4ac23ee6":"code","07951e28":"code","a8ace36d":"code","1f3ea45b":"code","29a97d49":"code","abb8e8f8":"code","e2321dd8":"code","0ff9f7f8":"code","a8b51946":"code","70581887":"code","93410763":"code","9d96b3fd":"code","519dff94":"code","a488ba42":"code","09980c11":"code","6452e39a":"code","07fc0766":"code","d9ad5b32":"code","2fa7b13e":"code","58a2842b":"code","7397fcec":"code","be0f4998":"code","4f958d00":"code","82e7d08e":"code","f2f1ba19":"code","b6907f5d":"markdown","16ec4c85":"markdown","abc5d9e1":"markdown","32a193ea":"markdown","8fb463c8":"markdown","ed40d013":"markdown","ff353fc5":"markdown","1f8e3df3":"markdown","2d08ff55":"markdown","17a281c0":"markdown","849578bb":"markdown","0b2349ff":"markdown","d8ba5134":"markdown","89a9411d":"markdown","acdc13a2":"markdown","8dac05c9":"markdown"},"source":{"b2df3e59":"# Author: Pierre Jeanne\n# Date Created:   23 May 2021","932f2f7e":"import numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\n\n# data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n\n# map creation\nimport cartopy.crs as ccrs\nimport cartopy\nimport cartopy.feature as cfeature\nfrom cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER\n\n# remove warning\nimport warnings\nimport matplotlib.cbook\nwarnings.filterwarnings(\"ignore\")","dd950c5f":"# didn't find station PALM and TLKA...\nstations = ['ac11','ac15','ac20','ac46','ac53','atw2','tbon','tsea','zan1']\nlatitude = [61.80708,60.48133,  60.92921,61.98627,61.76897,61.59776,61.17972, 61.18733,61.2292 ]\nlongitude = [-148.33175,-149.72401,-149.35251,-151.524,-150.06895,-149.13229,-149.78514, -149.89498,-149.78025]\nelevation = [790.95,151.56,43.78,619.8,57.51,97.14,93.21,43.01,80.27]\n\nGPS_location = pd.DataFrame({'station':stations,'latitude':latitude,'longitude':longitude,\n                             'elevation':elevation})\n\nGPS_location","b5e19199":"fault = pd.read_csv(r'..\/input\/castle-mountain-fault\/Castle Mountain fault.csv')\nfault.head(3)","aeabcb2b":"def plot_map(title):\n    plt.figure(figsize=(10,10))\n    \n    ax1 = plt.axes(projection=ccrs.PlateCarree())\n    ax1.set_extent([-152, -146, 59,63], crs=ccrs.PlateCarree())\n\n    # add color\n    ax1.add_feature(cfeature.OCEAN.with_scale('10m'))\n    ax1.add_feature(cfeature.LAND)\n    ax1.add_feature(cfeature.STATES)\n    ax1.add_feature(cfeature.RIVERS)\n    ax1.coastlines()\n\n    # add grid\n    gl = ax1.gridlines(crs=ccrs.PlateCarree(), draw_labels=True, linewidth=1, color='darkgray', alpha=0.5, linestyle='--')\n    gl.top_labels = False\n    gl.right_labels = False\n    # gl.xlocator = mticker.FixedLocator([-102,-99,-96])\n    # gl.ylocator = mticker.FixedLocator([33, 36,39])\n    gl.xformatter = LONGITUDE_FORMATTER\n    gl.yformatter = LATITUDE_FORMATTER\n    gl.xlabel_style = {'size': 13, 'color': 'gray', 'weight': 'bold'}\n    gl.ylabel_style = {'size': 13, 'color': 'gray', 'weight': 'bold'}\n\n    #\n    ax1 = sns.scatterplot(GPS_location['longitude'], GPS_location['latitude'],marker = '^'#,hue = GPS_location['elevation']\n                      ,s = 200,alpha=0.8)\n   \n\n    # add fault name\n    ax1.text(-151.5,61.25,'Castle Mountain Fault',size='medium', color='black',fontsize=14,rotation= 14)\n    #  add fault trajectory\n    list_segment = fault['segment'].unique()\n    for seg in list_segment:\n        ax1 = plt.plot(fault['longitude'],fault['latitude'],'-k')\n\n    # set title**kwargs)\n    plt.title('{}'.format(title),size=15)\n    return ax1","ea06324d":"ax1 = plot_map('GPS locations')\n# add annotations one by one with a loop\nfor ind in GPS_location.index: \n    if GPS_location['station'][ind]== 'tbon':\n        ax1 = plt.text(GPS_location['longitude'][ind]+0.1,GPS_location['latitude'][ind]-0.1,\n                  '{}'.format(GPS_location['station'][ind]),horizontalalignment='left',\n                  size='medium', color='black', weight='semibold',fontsize=14)\n    elif GPS_location['station'][ind]== 'zan1':\n        ax1 = plt.text(GPS_location['longitude'][ind]+0.1,GPS_location['latitude'][ind]+0.1,\n                  '{}'.format(GPS_location['station'][ind]),horizontalalignment='left',\n                  size='medium', color='black', weight='semibold',fontsize=14)\n    else:\n        ax1 = plt.text(GPS_location['longitude'][ind]+0.1,GPS_location['latitude'][ind]+0.0,\n                  '{}'.format(GPS_location['station'][ind]),horizontalalignment='left',\n                  size='medium', color='black', weight='semibold',fontsize=14)\nplt.show()","322c9b8e":"def load_and_show_data(path,df_name):\n    column_name = ['year','North (mm)','East (mm)','Up (mm)','sigN (mm)','sigE (mm)','sigU (mm)']\n    df_name = pd.read_csv(path,header=None,delimiter = ' ',names = column_name)\n    print('---------------  Number of rows: --------------- ')\n    print(df_name.shape[0])\n    print('---------------  Number of missing values: --------------- ')\n    print(df_name.isnull().sum())\n    print('---------------  sampling rate and monitoring period: --------------- ')\n    df_name['year'].diff().plot()\n    print('the sampling rate have a median of {}: '.format(df_name['year'].diff().median()))\n    df_name = df_name.set_index('year')\n    print('from {} to {}'.format(df_name.index[0],df_name.index[-1]))\n    \n    print('---------------  evolution data: --------------- ')\n    fig = plt.figure(figsize=(12,6))\n    ax0 = fig.add_subplot(2,1,1)\n    ax0 = plt.plot(df_name.index,df_name['North (mm)'],'g-',label='North')\n    ax0 = plt.plot(df_name.index,df_name['East (mm)'],'b-',label='East')\n    ax0 = plt.plot(df_name.index,df_name['Up (mm)'],'r-',label='Up')\n    ax0 = plt.xlabel('time')\n    ax0 = plt.ylabel('mm')\n    ax0 = plt.legend() \n    \n    ax1 = fig.add_subplot(2,1,2)\n    ax1 = plt.plot(df_name.index,df_name['sigN (mm)'],'g--',label='North')\n    ax1 = plt.plot(df_name.index,df_name['sigE (mm)'],'b--',label='East')\n    ax1 = plt.plot(df_name.index,df_name['sigU (mm)'],'r--',label='Up')\n    ax1 = plt.xlabel('time')\n    ax1 = plt.ylabel('mm')\n    ax1 = plt.legend() \n    plt.show()\n    \n    return df_name","9107d99a":"ac11 = load_and_show_data('..\/input\/tectonic-movements-time-series-data\/Detrended_Time_Series\/AC11_detrend_ts.txt','ac11')","6f496419":"ac15 = load_and_show_data('..\/input\/tectonic-movements-time-series-data\/Detrended_Time_Series\/AC15_detrend_ts.txt','ac15')","1835b5de":"ac20 = load_and_show_data('..\/input\/tectonic-movements-time-series-data\/Detrended_Time_Series\/AC20_detrend_ts.txt','ac20')","4ac23ee6":"ac46 = load_and_show_data('..\/input\/tectonic-movements-time-series-data\/Detrended_Time_Series\/AC46_detrend_ts.txt','ac46')","07951e28":"ac53 = load_and_show_data('..\/input\/tectonic-movements-time-series-data\/Detrended_Time_Series\/AC53_detrend_ts.txt','ac53')","a8ace36d":"atw2 = load_and_show_data('..\/input\/tectonic-movements-time-series-data\/Detrended_Time_Series\/ATW2_detrend_ts.txt','atw2')","1f3ea45b":"palm = load_and_show_data('..\/input\/tectonic-movements-time-series-data\/Detrended_Time_Series\/PALM_detrend_ts.txt','palm')","29a97d49":"tbon = load_and_show_data('..\/input\/tectonic-movements-time-series-data\/Detrended_Time_Series\/TBON_detrend_ts.txt','tbon')","abb8e8f8":"tlka = load_and_show_data('..\/input\/tectonic-movements-time-series-data\/Detrended_Time_Series\/TLKA_detrend_ts.txt','tlka')","e2321dd8":"tsea = load_and_show_data('..\/input\/tectonic-movements-time-series-data\/Detrended_Time_Series\/TSEA_detrend_ts.txt','tsea')","0ff9f7f8":"zan1 = load_and_show_data('..\/input\/tectonic-movements-time-series-data\/Detrended_Time_Series\/ZAN1_detrend_ts.txt','zan1')","a8b51946":"# get the complete list of datetime\nac11 = ac11.loc[~ac11.index.duplicated(keep='first')]\nzan1 = zan1.loc[~zan1.index.duplicated(keep='first')]\ndf = pd.concat([ac11,zan1],axis=1)\ndf = df.reset_index()\ndf_time = df[['year']]\ndf_time = df_time.set_index('year')\ndf_time.head(2)","70581887":"def interpolation_missing_value(df,start_time):\n    # remove potential duplicate\n    df = df.loc[~df.index.duplicated(keep='first')]\n    # add miising day\n    df = pd.concat([df_time,df],axis=1)\n    # drop rows days before the GPS installation\n    df = df[df.index>= start_time]\n    # Interpolate linearly within missing windows\n    df = df.interpolate('linear')\n    return df\n\nac11 = interpolation_missing_value(ac11,2005.5836)\nac15 = interpolation_missing_value(ac15,2005.7836)\nac20 = interpolation_missing_value(ac20,2005.5507)\nac46 = interpolation_missing_value(ac46,2006.6575)\nac53 = interpolation_missing_value(ac53,2006.6986)\natw2 = interpolation_missing_value(atw2,2003.0027)\npalm = interpolation_missing_value(palm,2006.2055)\ntbon = interpolation_missing_value(tbon,2006.2055)\ntlka = interpolation_missing_value(tlka,2003.0027)\ntsea = interpolation_missing_value(tsea,2003.0027)\nzan1 = interpolation_missing_value(zan1,2003.0027)","93410763":"def plotseasonal(ts, axes,title,color ):\n    axes[0].set_title(title)\n    ts.observed.plot(ax=axes[0], legend=False,color=color)\n    axes[0].set_ylabel('Observed')\n    ts.trend.plot(ax=axes[1], legend=False,color=color)\n    axes[1].axvline(x=2009, ymin=-20, ymax=30,linewidth=1, color='k',linestyle='--')\n    axes[1].axvline(x=2014, ymin=-20, ymax=30,linewidth=1, color='k',linestyle='--')\n    axes[1].axvspan(2009, 2014, color='grey',alpha=0.3)\n    axes[1].text(2010,-2,'slow slip',size='medium', color='black',fontsize=14)\n    axes[1].set_ylabel('Trend')\n    ts.seasonal.plot(ax=axes[2], legend=False,color=color)\n    axes[2].set_ylabel('Seasonal')\n    ts.resid.plot(ax=axes[3], legend=False,color=color)\n    axes[3].set_ylabel('Residual')\n    \n","9d96b3fd":"decomposed_ac11_North = sm.tsa.seasonal_decompose(ac11[\"North (mm)\"],period=360) # The frequncy is annual\ndecomposed_ac11_East = sm.tsa.seasonal_decompose(ac11[\"East (mm)\"],period=360) # The frequncy is annual\ndecomposed_ac11_Up = sm.tsa.seasonal_decompose(ac11[\"Up (mm)\"],period=360) # The frequncy is annual\n\nfig, axes = plt.subplots(ncols=3, nrows=4, sharex=True, figsize=(15,8))\nplotseasonal(decomposed_ac11_North , axes[:,0],'North','green')\nplotseasonal(decomposed_ac11_East , axes[:,1],'East','blue')\nplotseasonal(decomposed_ac11_Up , axes[:,2],'Up','red')\n\nplt.tight_layout()\nplt.show()","519dff94":"# initialize df\ndf_trend_north = pd.DataFrame()\ndf_trend_east = pd.DataFrame()\ndf_trend_up = pd.DataFrame()\n\n# create list to loop over\nlist_station = [ac11,ac15,ac20,ac46,ac53,atw2,palm,tbon,tlka,tsea,zan1]\n\nfor station in list_station:        \n        decomposition1 = sm.tsa.seasonal_decompose(station['North (mm)'],period=360)\n        deformatiom_trend_north = decomposition1.trend\n        df_trend_north = pd.concat([df_trend_north,deformatiom_trend_north],axis=1)\n        # \n        decomposition2 = sm.tsa.seasonal_decompose(station['East (mm)'],period=360)\n        deformatiom_trend_east = decomposition2.trend\n        df_trend_east = pd.concat([df_trend_east,deformatiom_trend_east],axis=1)\n        #\n        decomposition3 = sm.tsa.seasonal_decompose(station['Up (mm)'],period=360)\n        deformatiom_trend_up = decomposition3.trend\n        df_trend_up = pd.concat([df_trend_up,deformatiom_trend_up],axis=1)\n\n# rename columns\nname_station = ['ac11','ac15','ac20','ac46','ac53','atw2','palm','tbon','tlka','tsea','zan1']\ndf_trend_north.columns = [name_station]\ndf_trend_east.columns = [name_station]\ndf_trend_up.columns = [name_station]","a488ba42":"fig = plt.figure(figsize=(15,6))\nax0 = fig.add_subplot(1,3,1)\nax0 = plt.plot(df_trend_north)\nax0 = plt.xlabel('time')\nax0 = plt.ylabel('mm')\nax0 = plt.axvline(x=2009, ymin=-60, ymax=10,linewidth=1, color='k',linestyle='--')\nax0 = plt.axvline(x=2014, ymin=-60, ymax=10,linewidth=1, color='k',linestyle='--')\nax0 = plt.axvspan(2009, 2014, color='grey',alpha=0.3)\nax0 = plt.text(2010,-55,'slow slip',size='medium', color='black',fontsize=14)\nax0 = plt.legend(name_station) \nax0 = plt.title('trend in North direction')\n\nax1 = fig.add_subplot(1,3,2)\nax1 = plt.plot(df_trend_east)\nax1 = plt.xlabel('time')\nax1 = plt.ylabel('mm')\nax1 = plt.axvline(x=2009, ymin=-25, ymax=45,linewidth=1, color='k',linestyle='--')\nax1 = plt.axvline(x=2014, ymin=-25, ymax=45,linewidth=1, color='k',linestyle='--')\nax1 = plt.axvspan(2009, 2014, color='grey',alpha=0.3)\nax1 = plt.text(2010,40,'slow slip',size='medium', color='black',fontsize=14)\nax1 = plt.legend(name_station) \nax0 = plt.title('trend in East direction')\n\nax2 = fig.add_subplot(1,3,3)\nax2 = plt.plot(df_trend_up)\nax2 = plt.xlabel('time')\nax2 = plt.ylabel('mm')\nax2 = plt.axvline(x=2009, ymin=-90, ymax=50,linewidth=1, color='k',linestyle='--')\nax2 = plt.axvline(x=2014, ymin=-90, ymax=50,linewidth=1, color='k',linestyle='--')\nax2 = plt.axvspan(2009, 2014, color='grey',alpha=0.3)\nax2 = plt.text(2010,43,'slow slip',size='medium', color='black',fontsize=14)\nax2 = plt.legend(name_station)\nax0 = plt.title('trend in vertical direction')\n","09980c11":"# step 1: calculate horizontal norm\nnorm = (df_trend_north**2 + df_trend_east**2)**0.5\nnorm.plot()\nplt.show()","6452e39a":"fig = plt.figure(figsize=(15,15))\nax0 = fig.add_subplot(4,3,1)\nax0 = plt.plot(norm['ac11'])\nax0 = plt.axvline(x=2010.7, ymin=-25, ymax=45,linewidth=2, color='k',linestyle='--')\nax0 = plt.axvline(x=2013.9, ymin=-25, ymax=45,linewidth=2, color='k',linestyle='--')\nax0 = plt.axvspan(2010.7, 2013.9, color='grey',alpha=0.3)\nax0 = plt.xlim([2004,2018])\nax0 = plt.ylim([-1,70])\nax0 = plt.title('AC11')\n\nax1 = fig.add_subplot(4,3,2)\nax1 = plt.plot(norm['ac15'])\nax1 = plt.axvline(x=2008.3, ymin=-25, ymax=45,linewidth=2, color='k',linestyle='--')\nax1 = plt.axvline(x=2012.4, ymin=-25, ymax=45,linewidth=2, color='k',linestyle='--')\nax1 = plt.axvspan(2008.3, 2012.4, color='grey',alpha=0.3)\nax1 = plt.xlim([2004,2018])\nax1 = plt.ylim([-1,70])\nax1 = plt.title('AC15')\n\nax2 = fig.add_subplot(4,3,3)\nax2 = plt.plot(norm['ac20'])\nax2 = plt.axvline(x=2011, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax2 = plt.axvline(x=2013.2, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax2 = plt.axvspan(2011, 2013.2, color='grey',alpha=0.3)\nax2 = plt.xlim([2004,2018])\nax2 = plt.ylim([-1,70])\nax2 = plt.title('AC20')\n\nax3 = fig.add_subplot(4,3,4)\nax3 = plt.plot(norm['ac46'])\nax3 = plt.axvline(x=2008.2, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax3 = plt.axvline(x=2012.5, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax3 = plt.axvspan(2008.2, 2012.5, color='grey',alpha=0.3)\nax3 = plt.xlim([2004,2018])\nax3 = plt.ylim([-1,70])\nax3 = plt.title('AC46')\n\nax4 = fig.add_subplot(4,3,5)\nax4 = plt.plot(norm['ac53'])\nax4 = plt.axvline(x=2009.2, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax4 = plt.axvline(x=2013.4, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax4 = plt.axvspan(2009.2, 2013.4, color='grey',alpha=0.3)\nax4 = plt.xlim([2004,2018])\nax4 = plt.ylim([-1,70])\nax4 = plt.title('AC53')\n\nax5 = fig.add_subplot(4,3,6)\nax5 = plt.plot(norm['atw2'])\nax5 = plt.axvline(x=2007.2, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax5 = plt.axvline(x=2013.4, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax5 = plt.axvspan(2007.2, 2013.4, color='grey',alpha=0.3)\nax5 = plt.xlim([2004,2018])\nax5 = plt.ylim([-1,70])\nax5 = plt.title('ATW2')\n\nax6 = fig.add_subplot(4,3,7)\nax6 = plt.plot(norm['palm'])\nax6 = plt.axvline(x=2008, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax6 = plt.axvline(x=2014, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax6 = plt.axvspan(2008, 2014, color='grey',alpha=0.3)\nax6 = plt.xlim([2004,2018])\nax6 = plt.ylim([-1,70])\nax6 = plt.title('PALM')\n\nax7 = fig.add_subplot(4,3,8)\nax7 = plt.plot(norm['tbon'])\nax7 = plt.axvline(x=2007.5, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax7 = plt.axvline(x=2013.4, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax7 = plt.axvspan(2007.5, 2013.4, color='grey',alpha=0.3)\nax7 = plt.xlim([2004,2018])\nax7 = plt.ylim([-1,70])\nax7 = plt.title('TBON')\n\nax8 = fig.add_subplot(4,3,9)\nax8 = plt.plot(norm['tlka'])\nax8 = plt.axvline(x=2009, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax8 = plt.axvline(x=2015, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax8 = plt.axvspan(2009, 2015, color='grey',alpha=0.3)\nax8 = plt.xlim([2004,2018])\nax8 = plt.ylim([-1,70])\nax8 = plt.title('TLKA')\n\nax9 = fig.add_subplot(4,3,10)\nax9 = plt.plot(norm['tsea'])\nax9 = plt.axvline(x=2006.6, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax9 = plt.axvline(x=2013, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax9 = plt.axvspan(2006.6, 2013, color='grey',alpha=0.3)\nax9 = plt.ylim([-1,70])\nax9 = plt.xlim([2004,2018])\nax9 = plt.title('TSEA')\n\nax10 = fig.add_subplot(4,3,11)\nax10 = plt.plot(norm['zan1'])\nax10 = plt.axvline(x=2008, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax10 = plt.axvline(x=2013, ymin=-2, ymax=45,linewidth=2, color='k',linestyle='--')\nax10 = plt.axvspan(2008, 2013, color='grey',alpha=0.3)\nax10 = plt.xlim([2004,2018])\nax10 = plt.ylim([-1,70])\nax10 = plt.title('ZAN1')    ","07fc0766":"# Create lists with all GPS stations, and starting and ending dates of the slow slip\nstations2 = ['ac11','ac15','ac20','ac46','ac53','atw2','palm','tbon','tlka','tsea','zan1']\nss_start = [2010.7, 2008.3, 2011, 2008.2, 2009.2, 2007.2,2008,2007.5,2009, 2006.6, 2008]\nss_end = [2013.9, 2012.4, 2013.2, 2012.5, 2013.4, 2013.4,2014,2013.4,2015,2013,2013]\n\n# calcul duration slow-slip\nduration = []\nzip_list_time = zip(ss_start, ss_end)\nfor start, end in zip_list_time:\n    duration.append(end-start)\n    \n# get norm when slow-slip start at each station\ninitial_value = []\nzip_stat_start = zip(stations2, ss_start)\nfor station, start in zip_stat_start:\n    df = norm[(norm.index>=start)&(norm.index<start+0.002)]\n    val =df.iloc[0][station]\n    initial_value.append(val)\n\n# get norm when slow-slip end at each station\nfinal_value = []\nzip_stat_end = zip(stations2, ss_end)\nfor station, end in zip_stat_end:\n    df = norm[(norm.index>=end)&(norm.index<end+0.002)]\n    val =df.iloc[0][station]\n    final_value.append(val)\n\n# calcul slow-slip displacement\ndisplacement = []\nzip_list_norm = zip(initial_value, final_value)\nfor ini_norm, final_norm in zip_list_norm:\n    displacement.append(final_norm-ini_norm)\n\ndf_slow_slip2 = pd.DataFrame()\ndf_slow_slip = pd.DataFrame({'station':stations2,'start':ss_start,'end':ss_end,'duration':duration,'displacement':displacement})\ndf_slow_slip['velocity'] = df_slow_slip['displacement'] \/ df_slow_slip['duration']\ndf_slow_slip_coord = pd.merge(df_slow_slip, GPS_location, on=['station','station'])\n\ndf_slow_slip_coord\n","d9ad5b32":"# plot displacement before 2008\nax = plot_map('Slow-slip starting date')\nax = sns.scatterplot(x = 'longitude',y='latitude',data=df_slow_slip_coord, hue='start',s=800,cmap='veridis')\n# add annotations one by one with a loop\nfor ind in df_slow_slip_coord.index: \n    if df_slow_slip_coord['station'][ind]== 'tbon':\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]-0.1,\n                      '{}'.format(df_slow_slip_coord['start'][ind]),horizontalalignment='left',\n                      size='medium', color='black', weight='semibold',fontsize=14)\n    elif df_slow_slip_coord['station'][ind]== 'zan1':\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]+0.1,\n                  '{}'.format(df_slow_slip_coord['start'][ind]),horizontalalignment='left',\n                  size='medium', color='black', weight='semibold',fontsize=14)\n    else:\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]+0.0,\n                  '{}'.format(df_slow_slip_coord['start'][ind]),horizontalalignment='left',\n                  size='medium', color='black', weight='semibold',fontsize=14)\nplt.show()","2fa7b13e":"# plot displacement before 2008\nax = plot_map('Slow-slip ending date')\nax = sns.scatterplot(x = 'longitude',y='latitude',data=df_slow_slip_coord, hue='end',s=800,cmap='veridis')\n# add annotations one by one with a loop\nfor ind in df_slow_slip_coord.index: \n    if df_slow_slip_coord['station'][ind]== 'tbon':\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]-0.1,\n                      '{}'.format(df_slow_slip_coord['end'][ind]),horizontalalignment='left',\n                      size='medium', color='black', weight='semibold',fontsize=14)\n    elif df_slow_slip_coord['station'][ind]== 'zan1':\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]+0.1,\n                  '{}'.format(df_slow_slip_coord['end'][ind]),horizontalalignment='left',\n                  size='medium', color='black', weight='semibold',fontsize=14)\n    else:\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]+0.0,\n                  '{}'.format(df_slow_slip_coord['end'][ind]),horizontalalignment='left',\n                  size='medium', color='black', weight='semibold',fontsize=14)\nplt.show()","58a2842b":"# plot displacement before 2008\nax = plot_map('Slow-slip duration (years)')\nax = sns.scatterplot(x = 'longitude',y='latitude',data=df_slow_slip_coord, hue='duration',s=800,cmap='veridis')\n# add annotations one by one with a loop\nfor ind in df_slow_slip_coord.index: \n    if df_slow_slip_coord['station'][ind]== 'tbon':\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]-0.1,\n                      '{:.2f}'.format(df_slow_slip_coord['duration'][ind]),horizontalalignment='left',\n                      size='medium', color='black', weight='semibold',fontsize=14)\n    elif df_slow_slip_coord['station'][ind]== 'zan1':\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]+0.1,\n                  '{:.2f}'.format(df_slow_slip_coord['duration'][ind]),horizontalalignment='left',\n                  size='medium', color='black', weight='semibold',fontsize=14)\n    else:\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]+0.0,\n                  '{:.2f}'.format(df_slow_slip_coord['duration'][ind]),horizontalalignment='left',\n                  size='medium', color='black', weight='semibold',fontsize=14)\nplt.show()","7397fcec":"# plot displacement before 2008\nax = plot_map('Slow-slip velocity (mm\/year)')\nax = sns.scatterplot(x = 'longitude',y='latitude',data=df_slow_slip_coord, hue='velocity',s=800,cmap='veridis')\n# add annotations one by one with a loop\nfor ind in df_slow_slip_coord.index: \n    if df_slow_slip_coord['station'][ind]== 'tbon':\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]-0.1,\n                      '{:.2f}'.format(df_slow_slip_coord['velocity'][ind]),horizontalalignment='left',\n                      size='medium', color='black', weight='semibold',fontsize=14)\n    elif df_slow_slip_coord['station'][ind]== 'zan1':\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]+0.1,\n                  '{:.2f}'.format(df_slow_slip_coord['velocity'][ind]),horizontalalignment='left',\n                  size='medium', color='black', weight='semibold',fontsize=14)\n    else:\n        ax1 = plt.text(df_slow_slip_coord['longitude'][ind]+0.1,df_slow_slip_coord['latitude'][ind]+0.0,\n                  '{:.2f}'.format(df_slow_slip_coord['velocity'][ind]),horizontalalignment='left',\n                  size='medium', color='black', weight='semibold',fontsize=14)\nplt.show()","be0f4998":"# Get correlation matrix \ncorr_df = df_slow_slip_coord.corr(method='pearson')\n# heatmap\nfig, axes = plt.subplots(1,figsize=(8,8))\nsns.heatmap(corr_df,annot=True,linewidths=.5, annot_kws={\"size\": 14},vmin=-1.0, vmax=1.0, square=True,cbar=True)\nplt.show()\n","4f958d00":"# select only the period with the observed slow slip\nss_ac11 = ac11[(ac11.index > 2010.7) & (ac11.index < 2013.7)]\nss_ac15 = ac15[(ac15.index > 2008.3) & (ac15.index < 2012.4)]\nss_ac20 = ac20[(ac20.index > 2011.0) & (ac20.index < 2013.2)]\nss_ac46 = ac46[(ac46.index > 2008.2) & (ac46.index < 2012.5)]\nss_ac53 = ac53[(ac53.index > 2009.2) & (ac53.index < 2013.4)]\nss_atw2 = atw2[(atw2.index > 2007.2) & (atw2.index < 2013.4)]\nss_palm = palm[(palm.index > 2008.0) & (palm.index < 2014.0)]\nss_tbon = tbon[(tbon.index > 2007.5) & (tbon.index < 2013.4)]\nss_tlka = tlka[(tlka.index > 2009.0) & (tlka.index < 2015.0)]\nss_tsea = tsea[(tsea.index > 2006.6) & (tsea.index < 2013.0)]\nss_zan1 = zan1[(zan1.index > 2008.0) & (zan1.index < 2013.0)]","82e7d08e":"ss_stations = [ss_ac11,ss_ac15,ss_ac20,ss_ac46,ss_ac53,ss_atw2,ss_tbon,ss_tsea,ss_zan1]\nfor i,ss_station in enumerate(ss_stations):\n    ss_station['North (mm)'] = (ss_station['North (mm)'] - ss_station['North (mm)'].iloc[0])\n    ss_station['North (mm)'] = GPS_location['latitude'].loc[i] + ss_station['North (mm)']\/100 \n    ss_station['East (mm)'] = (ss_station['East (mm)'] - ss_station['East (mm)'].iloc[0])\n    ss_station['East (mm)'] = GPS_location['longitude'].loc[i] + ss_station['East (mm)']\/100","f2f1ba19":"# plot displacement before 2008\nax = plot_map('slow_slip direction (mm)')\nfor ss_station in ss_stations:\n    ax = plt.plot(ss_station['East (mm)'], ss_station['North (mm)'])\nplt.show()","b6907f5d":"All the GPS stations show a clear change in their trend, but the starting and ending dates seem to vary from one stations to the other. ","16ec4c85":"## 2.3: time series decomposition","abc5d9e1":"# Tectonic Movements study by GPS data ","32a193ea":"## 2.1: Plot and check data\nThey are 11 GPS stations. Let's plot the data and verify the missing value. ","8fb463c8":"## 1.1: GPS stations and faults locations","ed40d013":"### 2.3.3: Change in the trend: starting and ending dates, duration and slip velocity ","ff353fc5":"### 2.3.4: Plot slow-slip directions  on map: ","1f8e3df3":"We can see a change in the trend from ~2009 to 2014, corresponding to large slow-slip events.","2d08ff55":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:#7ca4cd; border:0' role=\"tab\" aria-controls=\"home\"><center>1: ADD DATA<\/center><\/h3>","17a281c0":"### GENERAL OBSERVATIONS:\n- the sampling rate is 0.0027 which correspond to one measurement per day. \n- if no data was acquired during a period, then days and data are missing. For this reason there is no \"nan\" value. \n- there ia a strong seasonality wit a annual period.","849578bb":"### 2.3.1: Example for AC11","0b2349ff":"<div class=\"list-group\" id=\"list-tab\" role=\"tablist\">\n<h3 class=\"list-group-item list-group-item-action active\" data-toggle=\"list\" style='background:#7ca4cd; border:0' role=\"tab\" aria-controls=\"home\"><center>2: EDA<\/center><\/h3>","d8ba5134":"### 2.3.2: extract the trend ","89a9411d":"## 2.2: Replace the missing values","acdc13a2":"### 2.3.3: Plot results on map: ","8dac05c9":"We can see that:\n- earlier the slow slip started, higher are the duration and the displacement od the slow slip event,\n- Toweard the East, where slow-slip started late, the slip velocity are higher.\n"}}