{"cell_type":{"dd01879c":"code","63c2e108":"code","ebe6cefd":"code","557b4d5b":"code","65270526":"code","31d341e9":"code","49988f9f":"code","f99bd0da":"code","17b21840":"code","0a554450":"code","4ce6a7bb":"code","176b85f2":"code","2f635183":"code","2ef0df88":"code","0d7345ec":"code","dd10e0ad":"code","e003cf44":"code","f06c9b6f":"code","e4a2065d":"code","f36ef1cf":"code","0f8fca99":"code","18756286":"code","5142725e":"code","9c3e681b":"code","e92533b8":"markdown","4c5b6b26":"markdown","1048e974":"markdown","d14a8f11":"markdown","bf79a94e":"markdown","6991df8f":"markdown","19d2a6d8":"markdown","9ebb3d7c":"markdown","1c8f1ef7":"markdown","75e3158f":"markdown","c99049ac":"markdown","e0faa1a0":"markdown","ead5e0a7":"markdown","edb0310d":"markdown","0966267e":"markdown","4369a311":"markdown","b163683f":"markdown","6d410c66":"markdown","e9ac8d57":"markdown","4c858119":"markdown","d40f0de8":"markdown","e2e84399":"markdown","0786c80f":"markdown","9827519c":"markdown"},"source":{"dd01879c":"#importing all the required libraries\nimport numpy as np#numpy array calculations\nimport pandas as pd#working with dataframe\nimport matplotlib.pyplot as plt#for visualizing the plots\nimport matplotlib.image as mpimg#To view images which are of the form of numbers\nimport seaborn as sns#For plotting\n\nnp.random.seed(0)#To get same results whenever i do this\nfrom sklearn.model_selection import train_test_split#For validation and checking the preformance of model\nfrom sklearn.metrics import confusion_matrix#To see where our model doing wrong\nimport itertools#For efficient looping\nfrom keras.utils.np_utils import to_categorical#one hot encoding\nfrom keras.models import Sequential#The CNN type it have other types like Residual etc.,.\nfrom keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPool2D#Types of layers\nfrom keras.optimizers import RMSprop,Adam#fits the filter variables,weights etc.,.\nfrom keras.preprocessing.image import ImageDataGenerator#For data augmentation\nfrom keras.callbacks import ReduceLROnPlateau#To make sure the we reduce learning rate if model stopped learning, upto some limit","63c2e108":"sns.set(style='white',context='notebook',palette='deep')","ebe6cefd":"#Load the data\ntrain=pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","557b4d5b":"train.head()","65270526":"y_train=train['label']\nX_train=train.drop(labels=['label'],axis=1)\ndel train","31d341e9":"test.head()","49988f9f":"X_train.describe()","f99bd0da":"sns.countplot(y_train)","17b21840":"X_train.isnull().sum()","0a554450":"X_train=X_train\/255.0\ntest=test\/255.0","4ce6a7bb":"X_train=X_train.values.reshape(-1,28,28,1)#making an 3D array like (28*28*1) how an actual image look.\ntest=test.values.reshape(-1,28,28,1)","176b85f2":"y_train=to_categorical(y_train,num_classes=10)\n","2f635183":"X_train,X_val,y_train,y_val=train_test_split(X_train,y_train,test_size=0.1,random_state=0)#specify random state to get same outputs","2ef0df88":"g=plt.imshow(X_train[1][:,:,0])#displays image","0d7345ec":"\nmodel=Sequential()\nmodel.add(Conv2D(filters=32,kernel_size=(3,3),padding='same',activation='relu',input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=32,kernel_size=(5,5),padding='same',activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\n\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding='same',activation='relu'))\n\nmodel.add(Conv2D(filters=64,kernel_size=(3,3),padding='same',activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))\nmodel.add(Flatten())\nmodel.add(Dense(256,activation='relu'))\nmodel.add(Dense(10,activation='softmax'))\n","dd10e0ad":"optimizer=Adam()","e003cf44":"model.compile(optimizer=optimizer,loss='categorical_crossentropy',metrics=['accuracy'])","f06c9b6f":"learning_rat=ReduceLROnPlateau(monitor='val_accuracy',patience=3,verbose=1,factor=0.5,min_lr=0.001)\nepochs=3\nbatch_size=64 #powers of two is better generally and by convention we follow this","e4a2065d":"datagenerated=ImageDataGenerator(rotation_range=10,zoom_range=0.1,width_shift_range=0.1,height_shift_range=0.1)","f36ef1cf":"datagenerated.fit(X_train)","0f8fca99":"digit_rec=model.fit_generator(datagenerated.flow(X_train,y_train,batch_size=batch_size),\n                              epochs=epochs,validation_data=(X_val,y_val),verbose=2,steps_per_epoch=X_train.shape[0],\n                              callbacks=[learning_rat])","18756286":"results=model.predict(test)\nresults=np.argmax(results,axis=1)\nresults=pd.Series(results,name='Label')","5142725e":"submission=pd.concat([pd.Series(range(1,28001),name='ImageId'),results],axis=1)","9c3e681b":"submission.to_csv(\"cnn_mnist_datagen.csv\",index=False)","e92533b8":"we rotated by 10degrees for some images and zooming some images by 10percent, shifts heights and widths to make sure we covered all the\npossibilities of images we can get and we apply this to out X_train as seen below.","4c5b6b26":"<h2>Data Augmentation<\/h2>","1048e974":"There are no missing values in training and i also checked in test data also .... there are no missing values so no problem.Now let's move to next step of normalization.","d14a8f11":"So we tranformed the input vectors to matrices to get images like this.Now let's build our Model:-\n\nWe will use:-\n\n1)Convolution layers:-To find features from images\n\n2)Pooling layers:-Generalising those features(like finding global features)\n\n3)Flatten Layers:-converts to 1D vector\n\n4)Fully connected layers:-Like neural networks (Last layer has 10 neurons with softmax function to get output).\n\nOther things which we use:-\n\nrelu activation:-For non linearity.\n\nDropout:-Reduce overfitting.\n\nBatch Normalization:-For making mini batch gradient descent faster\n\nMy model will be:-\n\nConv2D->Conv2D->Maxpool->Conv2D->Conv2D->Maxpool->Flatten->Dense(Fully connected)->Dense(Softmax)->output.\n","bf79a94e":"We need to normalize the values and need to bring the mean and std to zero(for fast calculation of gradient descent)","6991df8f":"In deep learning always remember we can have large datasets most of the times so we don't split in 75% and 25% ratio rather we give a small percent like 4-10% for validating and testing and those are more than enough.","19d2a6d8":"Test data is good in the way we wanted it so now let's see how the data is.And how many training examples are there for each output(each digit).","9ebb3d7c":"Setting style for our plots","1c8f1ef7":"Now:-\n\nWe need to set three things:-\n\n1)Loss function:-categorical_crossentropy(for softmax)\n\n2)score function:-accuracy(gives how correctly we are predicting the validation set)\n\n3)optimizer:-Adam(Uses both concepts of momentum and RMSProp)","75e3158f":"Well we know that everyone won't write the digits with same width and in same angle with same clarity so we will perform the data augmentation techinque to make sure we can see all possibilities.","c99049ac":"Now as the output variable is categorical values we will hot encode it into a vector.So we can apply softmax function for getting output easily.","e0faa1a0":"Now split to training and validation sets....","ead5e0a7":"<h1>Digit Recognizer<h1>\n\n<h2>Introduction:<\/h2>\n\nThe computer vision has changed a lot in the world ranging from opening a phone with face recognition to self driving cars and all this development is result of Deep Learning.Deep Learning is going to be the future.....So,if your interested in getting started with this than\nmy suggestion is to take course of deep learning by Andrew NG it is an awesome course which gives all insights of deep learning...\n\nNow in this kernel i am working on MNIST data set to build a digit Recognizer.....So let's get started.","edb0310d":"Now let's run the model for 3epochs it takes easily 30min.feel free to play with arguments and optimizers and archeticture by changing something so that you can get better in sights of what happening.","0966267e":"Now parameter tuning for getting Global maximum and this is done by tuning the Learning rate.What we are doing is when we had no improvement in model we will slowly decrease the learning rate until some lower boundary....\n\nThe below arguments means:-\n\nval_accuracy:-validation set accuracy\n\nPatience:-How many epochs we see before reducing learning rate\n\nverbose:-shows output of each epoch(takes values of 0->shows nothing,1->shows each epoch with ======= and 2->shows each epoch with number\n\nfactor:-by which we decrease the learning rate.\n\nmin_lr:-The lower boundary till we decrease the learning rate.","4369a311":"As we see that we want that label as output so we will take out this from this dataframe into a separate output list","b163683f":"We will now work on predictions for test set","6d410c66":"Now we can compile our model that means we finished our model to be use like an object after compilation.","e9ac8d57":"We deleted train dataframe as it is not going to be useful anyway.So now let's test data","4c858119":"Now check any missing values are there.","d40f0de8":"<h2>Load Data<\/h2>","e2e84399":"We can see that the data is well distributed So we have no problem with y_train","0786c80f":"Optimizer let's you calculate the weights and filter values to represent the features.It updates the values by following gradient descent approch.","9827519c":"The above will helps in getting faster outputs by coverging faster to the global minima.\nNow we will reshape this into gray image(Add channel as 1, For RGB images we will have 3 channels).\n\nHere as we don't know the number of images in a set We will generalise it by placing (-1 which it treats as 'n' that can be seen at run time)"}}