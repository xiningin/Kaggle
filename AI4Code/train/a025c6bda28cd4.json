{"cell_type":{"86718348":"code","7f5ab496":"code","92bb7f80":"code","9888103d":"code","40437e08":"code","dc3532bc":"code","a3029670":"code","ff0642fd":"code","cf7efd01":"code","17f7d152":"code","9de2fcd4":"code","147d33e8":"code","c8bbd9f5":"code","5cb6a841":"code","d670e848":"code","e64d9b07":"markdown","21fc6bed":"markdown","547d3a01":"markdown","c1c6e515":"markdown","e3cbc1a8":"markdown","0b257743":"markdown","c8945aaf":"markdown","f1b7c122":"markdown","99400b6e":"markdown","b82811ec":"markdown","0a2722cd":"markdown","95ba39d3":"markdown","2ff39351":"markdown","430396e3":"markdown","6f477922":"markdown","9f625edb":"markdown","1c91734e":"markdown"},"source":{"86718348":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob \nimport pydicom\nimport matplotlib.pyplot as plt\nfrom  scipy import ndimage\niport scipy\nfrom skimage import measure\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# import os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","7f5ab496":"def load_origin_scan(path):\n    \"\"\"\n    \u8b80\u53d6DICOM\u6a94\u4e26\u4e14\u5370\u51fa\u5176\u4e2d\u4e00\u5f35\u5167\u5bb9\n    \u56de\u50b3\u8cc7\u6599\u593e\u4e2d\u6240\u6709\u7684slices\n    :param path:\n    :return:\n    \"\"\"\n    g = glob.glob(path + '\/*.dcm')\n    slices = [pydicom.read_file(s) for s in g]\n    slices.sort(key=lambda x: int(x.InstanceNumber))\n    print(slices[0] )\n\n    return slices","92bb7f80":"slices = load_origin_scan('..\/input\/dicom-series\/3000566.000000-03192')","9888103d":"def load_origin_scan(path):\n    g = glob.glob(path + '\/*.dcm')\n    slices = [pydicom.read_file(s) for s in g]\n    slices.sort(key=lambda x: int(x.InstanceNumber))\n    print('RescaleIntercept :{}'.format(slices[0].RescaleIntercept))\n    print('RescaleSlope :{}'.format(slices[0].RescaleSlope))\n    \nload_origin_scan('..\/input\/dicom-series\/3000566.000000-03192')","40437e08":"def show_raw_pixel(slices):\n    #\u8b80\u51fa\u50cf\u7d20\u503c\u4e26\u4e14\u5132\u5b58\u6210numpy\u7684\u683c\u5f0f\n    image = slices[70].pixel_array\n    plt.imshow(image, cmap=plt.cm.gray)\n    plt.show()","dc3532bc":"show_raw_pixel(slices)##\u986f\u793a\u5716\u6a94\nplt.hist(slices[70].pixel_array.flatten(), bins=80, color='c')\nplt.xlabel(\"Hounsfield Units (HU)\")\nplt.ylabel(\"Frequency\")\nplt.show()","a3029670":"def get_pixels_hu(slices):\n    #\u8b80\u51fa\u50cf\u7d20\u503c\u4e26\u4e14\u5132\u5b58\u6210numpy\u7684\u683c\u5f0f\n    image = np.stack([s.pixel_array for s in slices])\n\n    # \u5c07\u8d85\u904e\u6a5f\u5668\u6383\u63cf\u7bc4\u570d\u7684\u90e8\u5206\u8a2d\u70ba 0\n    # \u901a\u5e38intercept\u662f -1024, \u7d93\u904e\u8a08\u7b97\u4e4b\u5f8c\u7a7a\u6c23\u5927\u7d04\u662f 0\n    image[image < 0] = 0\n    \n    # \u8f49\u63db\u70baHounsfield units (HU)\n    for slice_number in range(len(slices)):\n        \n        intercept = slices[slice_number].RescaleIntercept\n        slope = slices[slice_number].RescaleSlope\n        \n        if slope != 1:\n            image[slice_number] = slope * image[slice_number].astype(np.float64)\n            image[slice_number] = image[slice_number].astype(np.int16)\n            \n        image[slice_number] += np.int16(intercept)\n    \n    return np.array(image, dtype=np.int16)","ff0642fd":"patient_pixels = get_pixels_hu(slices)\nplt.hist(patient_pixels.flatten(), bins=80, color='c')\nplt.xlabel(\"Hounsfield Units (HU)\")\nplt.ylabel(\"Frequency\")\nplt.show()\n\n# Show some slice in the middle\nplt.imshow(patient_pixels[70], cmap=plt.cm.gray)\nplt.show()","cf7efd01":"def load_origin_scan(path):\n    g = glob.glob(path + '\/*.dcm')\n    slices = [pydicom.read_file(s) for s in g]\n    slices.sort(key=lambda x: int(x.InstanceNumber))\n    print('SliceThickness :{}'.format(slices[0].SliceThickness))\n    print('Pixel Spacing  :{}'.format(slices[0].PixelSpacing ))\nload_origin_scan('..\/input\/dicom-series\/3000566.000000-03192')    ","17f7d152":"def resample(image, scan, new_spacing=[1, 1, 1]):\n    #\u53d6\u51fa\u539f\u672c\u7684spacing\n    #[scan[0].SliceThickness] + list(scan[0].PixelSpacing) \u6703\u7d44\u6210\u4e00\u500blist\uff0c\u88e1\u9762\u662f\u7684spacing\u6578\u503c\n    spacing = np.array([scan[0].SliceThickness] + list(scan[0].PixelSpacing), dtype=np.float64)\n\n\n    resize_factor = spacing \/ new_spacing\n    new_real_shape = image.shape * resize_factor\n    new_shape = np.round(new_real_shape)\n    real_resize_factor = new_shape \/ image.shape\n    new_spacing = spacing \/ real_resize_factor\n    \n    #\u8a08\u7b97\u51fa\u653e\u5927\u53c3\u6578\u5f8c\uff0c\u7528scipy\u5c0d3\u70ba\u7167\u7247\u9032\u884c\u7e2e\u653e\uff0cscipy\u6703\u81ea\u52d5\u70ba\u5716\u7247\u9032\u884c\u63d2\u88dc\n    image = scipy.ndimage.interpolation.zoom(image, real_resize_factor, mode='nearest')\n\n    return image, new_spacing","9de2fcd4":"import scipy\nimage, new_spacing = resample(patient_pixels, slices)\n","147d33e8":"import skimage.measure \nfrom mpl_toolkits.mplot3d.art3d import Poly3DCollection\ndef plot_3d(image, threshold):\n    \n    # Position the scan upright, \n    # so the head of the patient would be at the top facing the camera\n    p = image.transpose(2,1,0)\n    \n    verts, faces, normals, values  = skimage.measure.marching_cubes_lewiner(p, threshold)\n\n\n    fig = plt.figure(figsize=(10, 10))\n    ax = fig.add_subplot(111, projection='3d')\n\n    # Fancy indexing: `verts[faces]` to generate a collection of triangles\n    mesh = Poly3DCollection(verts[faces], alpha=0.70)\n    face_color = [0.45, 0.45, 0.75]\n    mesh.set_facecolor(face_color)\n    ax.add_collection3d(mesh)\n\n    ax.set_xlim(0, p.shape[0])\n    ax.set_ylim(0, p.shape[1])\n    ax.set_zlim(0, p.shape[2])\n\n    plt.show()","c8bbd9f5":"\nskimage.measure.label\nplot_3d(image, 400)","5cb6a841":"#\u5b89\u88ddlungmask package\n#\u8a18\u5f97\u6253\u958bsetting\u7684\u7db2\u8def\npip install git+https:\/\/github.com\/JoHof\/lungmask\n    ","d670e848":"from lungmask import mask\nimport SimpleITK as sitk\nimport multiprocessing\nimport matplotlib.pyplot\n\n\nmultiprocessing.freeze_support ()\nINPUT = '..\/input\/dicom-series\/3000566.000000-03192\/1-050.dcm'\ninput_image = sitk.ReadImage(INPUT)\nsegmentation = mask.apply_fused(input_image) # default model is U-net(R231)\nmatplotlib.pyplot.imshow(segmentation[0])\nmatplotlib.pyplot.show()","e64d9b07":"## pixel \u503c\u8f49\u63db\u70baHU\nHounsfield Unit(HU)\u662fCT(computed tomography)\u7528\u7684\u55ae\u4f4d(dimensionless unit)\uff0c\u4e5f\u7a31\u70baCT number\u3002\u6a19\u6e96\u72c0\u6cc1(standard temperature and pressure)\u84b8\u993e\u6c34\u76840 HU\uff0c\u7a7a\u6c23\u662f-1000 HU  \n  \n| \u6750\u8cea       | HU    |\n|------------|-------|\n| \u7a7a\u6c23       | -1000 |\n| \u9ad8\u5bc6\u5ea6\u9aa8\u982d | 2000  |\n| \u91d1\u5c6c       | 3000  |  \n  \nDICOM\u88e1\u9762\u6bcf\u500b\u50cf\u7d20\u5132\u5b58\u7684\u503c\u4e26\u4e0d\u662f\u76f4\u63a5\u5c31\u662fHU\uff0c\u800c\u662f\u5fc5\u9808\u900f\u904eDICOM\u4e2d\u7684Rescale Intercept \u548c Rescale Slope\u7d93\u904e\u8f49\u63db\u516c\u5f0f\u4f86\u53d6\u5f97\uff0c\u516c\u5f0f\u5982\u4e0b\n$ Output units = m\\times SV+b$  \n\u5176\u4e2dm \u5c31\u662fRescale Slope\uff0cb\u5c31\u662fRescale Intercept\uff0cSV(stored values)\u5c31\u662f\u6bcf\u500bpixel\u5132\u5b58\u7684\u503c\u3002  \n\u6709\u4e9bCT\u7684\u6a5f\u5668\u6383\u63cf\u51fa\u4f86\u7684\u5716\u5f0f\u5713\u5f62\u7684\uff0c\u4f46\u662f\u6700\u5f8c\u5132\u5b58\u7684\u5716\u90fd\u662f\u65b9\u5f62\u7684\uff0c\u56e0\u6b64\u5716\u7247\u4e2d\u6c92\u6709\u8cc7\u8a0a\u7684\u90e8\u5206\uff0c\u6a5f\u5668\u5132\u5b58\u7684pixel\u503c\u6703\u6bd4\u7a7a\u6c23\u9084\u5c0f\u5f88\u591a(\u9019\u500b\u5716\u6a94\u70ba-1000)\u3002\u6240\u4ee5\u5728\u8f49\u63db\u6210HU\u4e4b\u524d\uff0c\u5c0f\u65bc0\u7684pixel\u503c\u8a2d\u5b9a\u8ddf\u7a7a\u6c23\u4e00\u6a23\u70ba0\uff0c\u8f49\u63db\u4e4b\u5f8c\u7684HU\u5c31\u6703\u8ddf\u7a7a\u6c23\u4e00\u6a23\u662f-1000\n\u4ee5\u4e0b\u51fd\u5f0f\u6703\u8a08\u7b97\u51fa\u6bcf\u500b\u50cf\u7d20\u7684HU\n\n\n","21fc6bed":"\u7b2c\u4e00\u6b21\u5229\u7528AI\u5c0dCT\u7167\u7247\u9032\u884c\u816b\u7624\u5075\u6e2c\uff0c\u904e\u7a0b\u4e2d\u9047\u5230\u7684\u554f\u984c\u5c07\u8a18\u9304\u5728\u9019\u7bc7\u6587\u7ae0\n  * \u91ab\u7642\u5f71\u50cfDICOM\u6a94\u662f\u4ec0\u9ebc?\n  * \u600e\u9ebc\u8b80\u53d6CT\u5716\u6a94\n  * \u6210\u529f\u986f\u793a\u80ba\u90e8CT\u5716\u6a94\u5f8c\uff0c\u600e\u9ebc\u628a\u7167\u7247\u904e\u6ffe\u6210\u53ea\u6709\u80ba\u7684\u90e8\u5206\n  ","547d3a01":"## Resampling\n\u9019\u7bc0\u6211\u5011\u8981\u7e2e\u653e\u6574\u500bDICOM\u5716\u6a94  \n\u6211\u5011\u5148\u5c07DICOM\u7684picel\u9593\u8ddd\u548cslice\u4e4b\u9593\u7684\u9593\u8ddd\u8abf\u51fa\u4f86\u770b\u770b","c1c6e515":"# Lung Segmentation  \u53d6\u51fa\u80ba\u90e8\u5340\u57df","e3cbc1a8":"\u4e0b\u9762\u793a\u7bc4\u5982\u4f55\u4f7f\u7528lungmask\u7522\u751fmask","0b257743":"\u53c3\u8003  \n\nlungmask https:\/\/github.com\/JoHof\/lungmask\n\nDICOM tag \u7de8\u78bc\nhttp:\/\/dicom.nema.org\/medical\/Dicom\/2016a\/output\/chtml\/part05\/chapter_5.html\n\nDICOM  \nhttps:\/\/innolitics.com\/articles\/dicom-i-facilitating-interoperability\/?ref=dicom.innolitics.com  \nhttps:\/\/www.kaggle.com\/gzuidhof\/full-preprocessing-tutorial  \nhttps:\/\/www.raddq.com\/dicom-processing-segmentation-visualization-in-python\/\n\nhttps:\/\/www.cnblogs.com\/wzyuan\/p\/9618347.html  \n\nHounsfield Units\nhttps:\/\/radiopaedia.org\/articles\/hounsfield-unit?lang=us  \nRescale Intercept \/ Rescale Slope\nhttp:\/\/dicom.nema.org\/medical\/Dicom\/2016a\/output\/chtml\/part03\/sect_C.8.2.html\n \nDicom is Easy\nhttp:\/\/dicomiseasy.blogspot.com\/p\/introduction-to-dicom.html\n\nUnderstanding DICOMS https:\/\/www.kaggle.com\/avirdee\/understanding-dicoms","c8945aaf":"\u9996\u5148pydicom\u5c07\u5716\u7247\u7684\u8c61\u7d20\u503c\u5132\u5b58\u5728pixel_array\uff0c\u6211\u5011\u5148\u76f4\u63a5\u8b80\u53d6\u4e26\u4e14\u986f\u793a\u770b\u770b\u3002\u96d6\u7136\u5716\u7247\u53ef\u4ee5\u986f\u793a\uff0c\u4f46\u662fDICOM\u5132\u5b58\u7684\u6bcf\u500bpixel\u5132\u5b58\u7684\u503c\u9084\u5fc5\u9808\u7d93\u904e\u8f49\u63db\u4e4b\u5f8c\u624d\u6703\u8b8a\u6210CT\u5e38\u7528\u7684\u55ae\u4f4dHU\u3002  \n\u53e6\u5916\u6211\u5011\u76f4\u63a5\u5c0d\u6bcf\u500bpixel\u7684\u7684\u503c\u505a\u4e00\u5f35\u7d71\u8a08\u5716\u8868\uff0c\u6211\u5011\u53ef\u4ee5\u770b\u5230\u57280\u7684\u4f4d\u7f6e\u6709\u4e00\u500b\u9ad8\u5cf0\uff0c\u9019\u662f\u56e0\u70ba\u80ba\u90e8\u6709\u8a31\u591a\u7a7a\u6c23\u7684\u95dc\u4fc2\uff0c\u800cpixel\u70ba0\u5c31\u662f\u7a7a\u6c23\uff0c\u4f46\u662f\u5728-1000\u53c8\u6709\u4e00\u500b\u9ad8\u5cf0\uff0c\u9019\u53c8\u4ee3\u8868\u4ec0\u9ebc\u5462?","f1b7c122":"* ### DICOM Tag\n\u4e00\u4efdDICOM\u6a94\u6848\u4e2d\u6709\u8a31\u591a\u7684DICOM tag\uff0c\u7528\u4f86\u8a73\u7d30\u7d00\u9304\u7167\u7247\u62cd\u651d\u6642\u7684\u8a2d\u5099\u8cc7\u8a0a\u3001\u75c5\u4eba\u8cc7\u8a0a\u7b49\u3002Pydicom\u5e6b\u6211\u5011\u5c07DICOM tag\u8f49\u63db\u6210python\u7269\u4ef6\uff0c\u8b93\u6211\u5011\u66f4\u5bb9\u6613\u53d6\u5f97\u9700\u8981\u7684\u8cc7\u8a0a\u3002\u4e0b\u9762\u7a0b\u5f0f\u5229\u7528pydicom\u8b80\u53d6DICOM\u6a94\u4e2d\u7684\u5167\u5bb9\u3002pydicom\u5c07\u6bcf\u4e00\u500btag\u689d\u5217\u5982\u4e0b\u9762\u683c\u5f0f  \n  \n| DICOM tag(group,item) | DICOM tag \u540d\u7a31 | DICOM tag \u5167\u5bb9       |\n|-----------------------|----------------|----------------------|\n| (0010, 0020)          | Patient ID     | LO: 'LIDC-IDRI-0001' |","99400b6e":"\u8f49\u63db\u5b8c\u6210\u5f8c\u6211\u5011\u770b\u770b\u7d50\u679c\n","b82811ec":"## \u4ec0\u9ebc\u662fDICOM? \n* ### DICOM\u6a94\u6848\u67b6\u69cb\nDICOM\u662fDigital Imaging and Communications in Medicine \u7684\u7e2e\u5beb\uff0c\u4ed6\u662f\u4e00\u5957\u6a19\u6e96\u7528\u4f86\u5b9a\u7fa9\u91ab\u7642\u5f71\u50cf\u6a94\u6848\u898f\u683c\u3002\u7531\u65bc\u91ab\u7642\u8a2d\u5099\u5ee0\u5546\u773e\u591a\uff0c\u9019\u4efd\u6a19\u6e96\u8b93\u6240\u6709\u7684\u91ab\u7642\u5f71\u50cf\u53ef\u4ee5\u5728\u4e0d\u540c\u5ee0\u724c\u7684\u6a5f\u5668\u4e0b\u88ab\u8b80\u53d6\u3002DICOM\u6a94\u7684\u526f\u6a94\u540d\u70ba.dcm\u3002\n\u91ab\u7642\u5f71\u50cf\u5305\u542bCT\uff0cX\u5149\u7247\uff0c\u5fc3\u96fb\u5716\u7b49\u773e\u591a\u7a2e\u985e\u7684\u91ab\u7642\u5f71\u50cf\u4e0b\uff0c\u63d0\u4f9b\u4e86\u4e00\u500b\u6a94\u6848\u67b6\u69cb\u6a21\u578b\u8b93\u6240\u6709\u9075\u5b88DICOM\u6a19\u6e96\u7684\u6a5f\u5668\u90fd\u53ef\u4ee5\u5c0d\u6a94\u6848\u9032\u884c\u64cd\u4f5c\u3002\u5f9e\u5927\u67b6\u69cb\u4f86\u770bDICOM\u6a94\u7684\u968e\u5c64\u70baPatient->Study->Series->Instances\uff0c\u5982\u4e0b\u5716\u6240\u793a  \n![\u57161](https:\/\/i.imgur.com\/GnedCdO.jpg)\n\n\n\n\n\n","0a2722cd":"## \u600e\u9ebc\u8b80\u53d6CT\u5716\u6a94","95ba39d3":"![image.png](attachment:image.png)","2ff39351":"CT\u662f\u7531\u8a31\u591a2D\u7167\u7247\u7d44\u5408\u800c\u6210\uff0c\u4e0d\u904e\u6bcf\u53f0\u6a5f\u5668\u62cd\u651d\u7684\u7167\u7247\u9593\u8ddd\uff0c\u4ee5\u53ca\u6bcf\u5f35\u7167\u7247pixel\u4e4b\u9593\u7684\u9593\u8ddd\u90fd\u4e0d\u4e00\u6a23\uff0c\u5982\u6b64\u4e00\u4f86\u5c0d\u65bc\u6a5f\u5668\u5b78\u7fd2\u7684\u5b78\u7fd2\u6548\u679c\u4e0d\u597d\u3002\u56e0\u6b64\u5728\u8a13\u7df4\u4e4b\u524d\uff0c\u5148\u5c07\u6bcf\u4e00\u7d44\u7167\u7247\u7684pixel\u9593\u8ddd\u5168\u90e8\u7e2e\u653e\u6210$1mm\\times 1mm\\times 1mm$\n\n\u4e0b\u9762\u51fd\u5f0f\u5c0d\u539f\u672c\u76843\u7dad\u7167\u7247\u9032\u884c\u7e2e\u653e\uff0c\u8b93\u6240\u6709\u5716\u6a94\u7684spacing\u90fd\u8b8a\u6210$1mm\\times 1mm\\times 1mm$\n","430396e3":"\u5982\u679c\u8981\u53d6\u51fa\u55ae\u4e00\u500btag\u7684\u5167\u5bb9\uff0c\u53ef\u4ee5\u7528\u985e\u4f3cpython\u7269\u4ef6\u7684\u65b9\u5f0f\u53d6\u5f97\uff0c\u4e0b\u9762\u6211\u5011\u53d6\u51fa\u5169\u8457\u91cd\u8981\u7684tag(RescaleIntercept\u548cRescaleSlope)\u4e26\u5728\u5f8c\u9762\u7684\u6559\u5b78\u6703\u7528\u5230\n","6f477922":"\u6211\u5011\u53ef\u4ee5\u770b\u5230\u756b\u51fa\u4f86\u7684\u5716\u67095\u500b\u984f\u8272\uff0c\u9019\u662f\u56e0\u70ba\u6211\u5011\u4f7f\u7528\u4e86lungmask\u7684apply_fused\uff0c\u4ed6\u6703\u6df7\u5408\u5169\u7a2e\u6a21\u578b\uff08U-net(R231)\u548cU-net(LTRLobes)\uff09\u8a08\u7b97\u51fa\u4f86\u7684\u7d50\u679c\u3002  \u4e4b\u5f8c\u5c07\u9019\u5f35\u5716\u5169\u500b\u80ba\u7684\u5340\u57df\u90fd\u8f49\u63db\u70ba1\uff08\u975e0\u7684pixel\u90fd\u8f49\u63db\u62101\uff09\uff0c0\u7684\u5340\u57df\u4fdd\u6301\u70ba0\u5c31\u662f\u6211\u5011\u9700\u8981\u7684\u80ba\u90e8\u5340\u57df\u4e86","9f625edb":"\u4e0b\u9762\u6211\u5011\u5229\u7528resample\u5f8c\u7684\u5716\u7247\uff0c\u642d\u914d\u904e\u6ffeHU<400\u4ee5\u4e0b\u7684pixel\uff0c\u6211\u5011\u5c31\u53ef\u4ee5\u5f97\u5230\u9aa8\u982d\u76843D\u5716\uff0c\u56e0\u70ba\u9aa8\u982d\u7684HU\u4ecb\u65bc600-1900\u4e4b\u9593","1c91734e":"\u5728\u958b\u59cb\u8a13\u7df4\u6a21\u578b\u4e4b\u524d\uff0c\u5982\u679c\u80fd\u5920\u900f\u904e\u6ffe\u93e1\u5c07\u4e0d\u662f\u80ba\u90e8\u7684\u5340\u57df\u904e\u6ffe\u6389\uff0c\u90a3\u8a13\u7df4\u51fa\u4f86\u7684\u6a21\u578b\u5c31\u80fd\u5920\u66f4\u6e96\u78ba\u7684\u5224\u65b7\u80ba\u90e8\u7684\u7d50\u7bc0(nodule)\u3002\u9019\u500b\u6b65\u9a5f\u7a31\u70baSegmentation\uff0c\u5728\u91ab\u7642\u6a5f\u5668\u5b78\u7fd2\u9818\u57df\u4e0a\u5f88\u5e38\u7528\u5230\u3002\u800csegmentation\u7684\u65b9\u6cd5\u53ef\u4ee5\u7528\u50b3\u7d71\u6a5f\u5668\u8996\u89ba\u7684\u65b9\u6cd5\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6a5f\u5668\u5b78\u7fd2\u7684\u6a21\u578bU-net\u4f86\u9054\u6210\u3002\n\u672c\u6587\u4ecb\u7d39\u4e00\u500bgithub\u4e0a\u627e\u5230\u7684segmentation\u65b9\u6cd5https:\/\/github.com\/JoHof\/lungmask  \nsegmentation\u7684\u6b65\u9a5f\u5c31\u5982\u4e0b\u5716\u6240\u793a\uff0c\u6211\u5011\u5fc5\u9808\u751f\u6210\u4e00\u500bpixel\u53ea\u67090\u548c1\u7684mask\uff0c\u5c07mask\u7684pixel\u548c\u539f\u5716\u5c0d\u61c9\u6bcf\u500bpixel\u76f8\u4e58\u5f8c\uff0c\u5c31\u6703\u53ea\u5269\u4e0b\u80ba\u90e8\u7684\u5340\u57df\n"}}