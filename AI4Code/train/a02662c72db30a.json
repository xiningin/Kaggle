{"cell_type":{"8c96536e":"code","f1bb01ac":"code","fab6cda9":"code","a586a194":"code","93d2e002":"code","8e417f8e":"code","81dba8e8":"code","2f7f4ecc":"code","e7effa1a":"code","fbd6d262":"code","8adb27ea":"code","ad2ffc71":"code","b7df966f":"code","4659cfd1":"code","927d3fd3":"code","8bf74572":"code","b0109234":"code","5336957e":"code","e4155318":"code","3a608f30":"code","38cc18bd":"code","0c3aa8cb":"code","a85c63aa":"code","cea0363b":"code","89ef36ba":"code","28ec607f":"markdown"},"source":{"8c96536e":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd","f1bb01ac":"def plot_series(time, series, format=\"-\", start=0, end=None, label=None):\n    plt.plot(time[start:end], series[start:end], format, label=label)\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Value\")\n    if label:\n        plt.legend(fontsize=14)\n    plt.grid(True)","fab6cda9":"def trend(time, slope=0):\n    return slope * time","a586a194":"time = np.arange(4 * 365 + 1)\nbaseline = 10\nseries = trend(time, 0.1)\n\nplt.figure(figsize=(10, 6))\nplot_series(time, series)\nplt.show()","93d2e002":"def seasonal_pattern(season_time):\n    \"\"\"Just an arbitrary pattern, you can change it if you wish\"\"\"\n    return np.where(season_time < 0.4, np.cos(season_time * 2 * np.pi), 1 \/ np.exp(3 * season_time))\n\ndef seasonality(time, period, amplitude=1, phase=0):\n    \"\"\"Repeats the same pattern at each period\"\"\"\n    season_time = ((time + phase) % period) \/ period\n    return amplitude * seasonal_pattern(season_time)","8e417f8e":"baseline = 10\namplitude = 40\nseries = seasonality(time, period=365, amplitude=amplitude)\n\nplt.figure(figsize=(10, 6))\nplot_series(time, series)\nplt.show()","81dba8e8":"slope = 0.05\nseries = baseline + trend(time, slope) + seasonality(time, period=365, amplitude=amplitude)\n\nplt.figure(figsize=(10, 6))\nplot_series(time, series)\nplt.show()","2f7f4ecc":"def white_noise(time, noise_level=1, seed=None):\n    rnd = np.random.RandomState(seed)\n    return rnd.randn(len(time)) * noise_level","e7effa1a":"noise_level = 5\nnoise = white_noise(time, noise_level, seed=42)\n\nplt.figure(figsize=(10, 6))\nplot_series(time, noise)\nplt.show()","fbd6d262":"series += noise\n\nplt.figure(figsize=(10, 6))\nplot_series(time, series)\nplt.show()","8adb27ea":"split_time = 1000\ntime_train = time[:split_time]\nx_train = series[:split_time]\ntime_valid = time[split_time:]\nx_valid = series[split_time:]","ad2ffc71":"def autocorrelation(time, amplitude, seed=None):\n    rnd = np.random.RandomState(seed)\n    \u03c61 = 0.5\n    \u03c62 = -0.1\n    ar = rnd.randn(len(time) + 50)\n    ar[:50] = 100\n    for step in range(50, len(time) + 50):\n        ar[step] += \u03c61 * ar[step - 50]\n        ar[step] += \u03c62 * ar[step - 33]\n    return ar[50:] * amplitude","b7df966f":"def autocorrelation(time, amplitude, seed=None):\n    rnd = np.random.RandomState(seed)\n    \u03c6 = 0.8\n    ar = rnd.randn(len(time) + 1)\n    for step in range(1, len(time) + 1):\n        ar[step] += \u03c6 * ar[step - 1]\n    return ar[1:] * amplitude","4659cfd1":"series = autocorrelation(time, 10, seed=42)\nplot_series(time[:200], series[:200])\nplt.show()","927d3fd3":"series = autocorrelation(time, 10, seed=42) + trend(time, 2)\nplot_series(time[:200], series[:200])\nplt.show()","8bf74572":"series = autocorrelation(time, 10, seed=42) + seasonality(time, period=50, amplitude=150) + trend(time, 2)\nplot_series(time[:200], series[:200])\nplt.show()","b0109234":"series = autocorrelation(time, 10, seed=42) + seasonality(time, period=50, amplitude=150) + trend(time, 2)\nseries2 = autocorrelation(time, 5, seed=42) + seasonality(time, period=50, amplitude=2) + trend(time, -1) + 550\nseries[200:] = series2[200:]\n#series += noise(time, 30)\nplot_series(time[:300], series[:300])\nplt.show()","5336957e":"def impulses(time, num_impulses, amplitude=1, seed=None):\n    rnd = np.random.RandomState(seed)\n    impulse_indices = rnd.randint(len(time), size=10)\n    series = np.zeros(len(time))\n    for index in impulse_indices:\n        series[index] += rnd.rand() * amplitude\n    return series    ","e4155318":"series = impulses(time, 10, seed=42)\nplot_series(time, series)\nplt.show()","3a608f30":"def autocorrelation(source, \u03c6s):\n    ar = source.copy()\n    max_lag = len(\u03c6s)\n    for step, value in enumerate(source):\n        for lag, \u03c6 in \u03c6s.items():\n            if step - lag > 0:\n                ar[step] += \u03c6 * ar[step - lag]\n    return ar","38cc18bd":"signal = impulses(time, 10, seed=42)\nseries = autocorrelation(signal, {1: 0.99})\nplot_series(time, series)\nplt.plot(time, signal, \"k-\")\nplt.show()","0c3aa8cb":"signal = impulses(time, 10, seed=42)\nseries = autocorrelation(signal, {1: 0.70, 50: 0.2})\nplot_series(time, series)\nplt.plot(time, signal, \"k-\")\nplt.show()","a85c63aa":"series_diff1 = series[1:] - series[:-1]\nplot_series(time[1:], series_diff1)","cea0363b":"from pandas.plotting import autocorrelation_plot\nautocorrelation_plot(series)","89ef36ba":"from statsmodels.tsa.arima_model import ARIMA\n\nmodel = ARIMA(series, order=(5, 1, 0))\nmodel_fit = model.fit(disp=0)\nprint(model_fit.summary())\n","28ec607f":"PART 01: different time series attributes https:\/\/www.kaggle.com\/salazarslytherin\/time-series-01-different-ts-attributes\n\nPART 02: naive forecasting https:\/\/www.kaggle.com\/salazarslytherin\/time-series-02-naive-forecasting\n\nPART 03: preparing features labels https:\/\/www.kaggle.com\/salazarslytherin\/time-series-03-preparing-features-labels\n\nPART 04: linear regression https:\/\/www.kaggle.com\/salazarslytherin\/time-series-04-linear-regression\n\nPART 05: DNN with callbacks https:\/\/www.kaggle.com\/salazarslytherin\/time-series-05-dnn-with-callbacks\n\nPART 06: RNN https:\/\/www.kaggle.com\/salazarslytherin\/time-series-06-rnn\n\nPART 07: LSTM https:\/\/www.kaggle.com\/salazarslytherin\/time-series-07-lstm\n\nPART 08: CNN + LSTM https:\/\/www.kaggle.com\/salazarslytherin\/time-series-08-cnn-lstm\n\nPART 09: Sunspots dataset CNN https:\/\/www.kaggle.com\/salazarslytherin\/time-series-09-sunspots-dataset-cnn\n\nPART 10: Sunspots dataset DNN https:\/\/www.kaggle.com\/salazarslytherin\/time-series-10-sunspots-dataset-dnn\/edit"}}