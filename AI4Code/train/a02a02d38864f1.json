{"cell_type":{"fb510019":"code","0ab737d1":"code","52079848":"code","5a5165c4":"code","c22d1138":"code","5830d575":"code","4d7f0574":"code","d392022b":"code","373ab4f0":"code","e8ba2f69":"code","864e6230":"markdown","369ba690":"markdown","93358eea":"markdown","4423e71b":"markdown","e6a121b9":"markdown","3122a11b":"markdown","41be0033":"markdown","af673639":"markdown"},"source":{"fb510019":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\n\nnp.random.seed(514) # setting the seed so each time the result is the same\n\nfrom sklearn.metrics import confusion_matrix\n\n# Input data files are available in the \"..\/input\/\" directory.\ntrain = pd.read_csv(\"..\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"..\/input\/digit-recognizer\/test.csv\")\nY_train = train[\"label\"]\nX_train = train.drop(labels=[\"label\"], axis=1)\nY_train.value_counts()","0ab737d1":"# See if there is any missing values\nprint(\"Number of missing value in training set: {}\".format(train.isnull().sum().sum()))\nprint(\"Number of missing value in test set: {}\".format(test.isnull().sum().sum()))","52079848":"# Standization of pixel values\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\n\n# Reshape to (num_images, row, col, color_channel)\nX_train = X_train.values.reshape(X_train.shape[0],28,28,1)\ntest = test.values.reshape(test.shape[0],28,28,1)\n\n# Encode labels to one-hot vectors\nfrom keras.utils.np_utils import to_categorical\nY_train = to_categorical(Y_train)\n\n# Split the train and the validation set for the fitting\nfrom sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size=0.1, random_state=514)","5a5165c4":"# visualization of image\nplt.imshow(X_train[0][:,:,0], cmap=plt.get_cmap('gray'))","c22d1138":"# setup of CNN\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nmodel = Sequential()\n\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), strides=(1,1), padding='Same',\n                 activation='relu', input_shape=(28,28,1)))\nmodel.add(Conv2D(filters=32, kernel_size=(3,3), strides=(1,1), padding='Same',\n                 activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), strides=(1,1), padding='Same',\n                 activation='relu'))\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), strides=(1,1), padding='Same',\n                 activation='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(10, activation = \"softmax\"))","5830d575":"from keras.optimizers import RMSprop\noptimizer = RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)\nmodel.compile(optimizer = optimizer , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\nfrom keras.callbacks import ReduceLROnPlateau\nreduce_lr = ReduceLROnPlateau(monitor='val_accuracy', patience=5, \n                              verbose=1, factor=0.2, min_lr=0.0001)\nepochs = 30 #hyperparameter\nbatch_size = 64 #hyperparameter","4d7f0574":"from keras.preprocessing.image import ImageDataGenerator\n\ndatagen = ImageDataGenerator(rotation_range=10, \n            width_shift_range=0.1, height_shift_range=0.1, \n            zoom_range = 0.1)\ndatagen.fit(X_train)\n\nhistory = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=batch_size),\n                              epochs=epochs, validation_data=(X_val,Y_val),\n                              steps_per_epoch=X_train.shape[0] \/\/ batch_size,\n                              callbacks=[reduce_lr])","d392022b":"# Plot the loss and accuracy curves for training and validation \nfig, ax = plt.subplots(2,1)\nax[0].plot(history.history['loss'], color='b', label=\"Training loss\")\nax[0].plot(history.history['val_loss'], color='r', label=\"validation loss\",axes =ax[0])\nlegend = ax[0].legend(loc='best', shadow=True)\n\nax[1].plot(history.history['accuracy'], color='b', label=\"Training accuracy\")\nax[1].plot(history.history['val_accuracy'], color='r',label=\"Validation accuracy\")\nlegend = ax[1].legend(loc='best', shadow=True)","373ab4f0":"import itertools\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, cm[i, j],\n                 horizontalalignment=\"center\",\n                 color=\"white\" if cm[i, j] > thresh else \"black\")\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n\nY_pred = model.predict(X_val)\nY_pred_classes = np.argmax(Y_pred, axis = 1) \nY_true = np.argmax(Y_val, axis = 1) \n\n# compute and plot the confusion matrix\nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \nplot_confusion_matrix(confusion_mtx, classes = range(10))","e8ba2f69":"# finally compute the result using the test data\ny_test = model.predict(test)\nsub = pd.DataFrame()\nsub['ImageId'] = range(1,28001)\nsub['Label'] = np.argmax(y_test,axis = 1)\nsub.to_csv('submission.csv',index=False)","864e6230":"RMSprop is chosen to be the optimizer instead of Stochastic Gradient Descent (SGD) as given in the example. The method \"ReduceLROnPlateau\" is chosen to be an annealer of the learning rate so as to reach the global minimum more efficiently. The number of epochs and batch size are also hyperparameters...","369ba690":"This notebook applys typical CNN to classify MNIST data using Keras.","93358eea":"From the result of value_counts(), we see that the dataset is quite balanced so there is no need to enable stratify=True in train-test splitting.\n\nBefore building a model, let's prepare the data first. First check if there is any missing data and perform standardization...","4423e71b":"There is no missing data in any set. Let's proceed to standard procedures (standization, label-encoding, train-test split etc).","e6a121b9":"Apply the ImageDataGenerator class to produce augmented data again to prevent overfitting. The parameters are chosen to resemble roughtly the process of hand writting.\nFit the augmented data to the CNN model. Record the history so as to plot the loss and accuracy curves later...","3122a11b":"We can see from the plot that validation loss goes up slightly after 25th epoch. It is a sign of overfitting. Tune around the hyperparameters to achieve a better result.\n\nAnyway we proceed to predict values from the validation dataset and prepare the confusion matrix plot...","41be0033":"Next we proceed to set up a convolutional neural network using Keras. Follow the example \"VGG-like convnet\" as given in [Keras' guide](https:\/\/keras.io\/getting-started\/sequential-model-guide\/) with additional of setting padding equal to same. Also a dropout is applied as a mean of regularization. Here the dropout rates are well-known hyperparameters which has to be chosen by trial-and-error...","af673639":"We can show one of the image by using imshow from matplotlib."}}