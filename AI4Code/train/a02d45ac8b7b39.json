{"cell_type":{"d79718a7":"code","6f829a34":"code","a9a2cf56":"code","dc0d44b5":"code","a41a4c9a":"code","9c29b728":"code","8264d171":"code","1f7350ae":"code","02b32943":"code","4a32d6f8":"code","da947ad4":"code","28eea831":"code","6643e05a":"code","367a28de":"code","d801b939":"code","980d7134":"markdown","ab592209":"markdown","fe3e3e5f":"markdown"},"source":{"d79718a7":"import pandas as pd\npd.set_option('display.max_columns', None)\n\nimport numpy as np\nfrom datetime import datetime as dt\nimport seaborn as sns","6f829a34":"path='..\/input\/ble-rssi-dataset\/iBeacon_RSSI_Labeled.csv'\ndata = pd.read_csv(path, index_col=None)\ndata.head(5)","a9a2cf56":"plots = data.hist(bins=15, figsize=(20,20))\n\nfor ax in plots.flatten():\n    ax.set_xlabel(\"Signal Strength\")\n    ax.set_ylabel(\"count\")","dc0d44b5":"import matplotlib.pyplot as plt\n\nfig, ax = plt.subplots(figsize=(10,7))\nsns.heatmap(data.corr(method='kendall'), ax=ax)","a41a4c9a":"data.max()","9c29b728":"label = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\"]\nfor col in data.select_dtypes(include=\"number\").columns:\n    data[col] = pd.cut(data[col], bins = 15, labels = label)\n    \n# Splitting the location:\ndata['x'] = data['location'].str[0]\ndata['y'] = data['location'].str[1:]\n\n# Label Encoding\nfrom sklearn.preprocessing import LabelEncoder\ndata['x'] = LabelEncoder().fit_transform(data['x'])\ndata['y'] = LabelEncoder().fit_transform(data['y'])\n\n# Dropping the columns\ndata = data.drop(columns=[\"date\",\"location\"])\n\ndata.head(5)","8264d171":"data = pd.get_dummies(data, columns=data.columns[0:-2])\ndata.head(5)","1f7350ae":"target_x = data['x']\ntarget_y = data['y']\ndata.drop(columns=['x','y'], inplace=True)\ndata.head(5)","02b32943":"from sklearn.model_selection import train_test_split\n\nD_train, D_test, t_train_x, t_test_x = train_test_split(data, \n                                                    target_x, \n                                                    test_size = 0.3,\n                                                    random_state=999)\n\nD_train, D_test, t_train_y, t_test_y = train_test_split(data, \n                                                    target_y, \n                                                    test_size = 0.3,\n                                                    random_state=999)","4a32d6f8":"from sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import RepeatedStratifiedKFold, GridSearchCV\n\nk_fold_method = RepeatedStratifiedKFold(n_splits=5, \n                                    n_repeats=3, \n                                    random_state=8)\n\n################################## KNN #####################################################\n\nparameters_knn = {'n_neighbors': [1, 2, 3, 4, 5, 6, 7,8,9,10,11,12,13,14,15], \n              'p': [1, 2, 5]}\n\nknn = KNeighborsClassifier()\n\ngs_knn_x = GridSearchCV(estimator=knn, \n                      param_grid=parameters_knn, \n                      cv=k_fold_method,\n                      verbose=1, \n                      n_jobs=-2,\n                      scoring='accuracy',\n                      return_train_score=True)\n\ngs_knn_y = GridSearchCV(estimator=knn, \n                      param_grid=parameters_knn, \n                      cv=k_fold_method,\n                      verbose=1, \n                      n_jobs=-2,\n                      scoring='accuracy',\n                      return_train_score=True)\n\n################################### DT ########################################################\n\nparameters_dt = {'criterion':['gini','entropy'],'max_depth':[2,3,4]}\n\ndt = DecisionTreeClassifier()\n\ngs_dt_y = GridSearchCV(estimator=dt,\n                    param_grid=parameters_dt,\n                    cv = k_fold_method,\n                    verbose=1,\n                    n_jobs=-2,\n                    scoring='accuracy',\n                    return_train_score=True)\n\ngs_dt_x = GridSearchCV(estimator=dt,\n                    param_grid=parameters_dt,\n                    cv = k_fold_method,\n                    verbose=1,\n                    n_jobs=-2,\n                    scoring='accuracy',\n                    return_train_score=True)\n\n####################################### SVC ####################################################\n\nparameters_svc = {'C': [0.1, 1, 10, 100, 1000],  \n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001], \n              'kernel': ['rbf']}\n\nsvc = SVC()\n\ngs_svc_x = GridSearchCV(estimator=svc,\n                    param_grid=parameters_svc,\n                    cv = k_fold_method,\n                    verbose=1,\n                    n_jobs=-2,\n                    scoring='accuracy',\n                    return_train_score=True)\n\ngs_svc_y = GridSearchCV(estimator=svc,\n                    param_grid=parameters_svc,\n                    cv = k_fold_method,\n                    verbose=1,\n                    n_jobs=-2,\n                    scoring='accuracy',\n                    return_train_score=True)","da947ad4":"gs_dt_y.fit(D_train, t_train_y)\ngs_dt_x.fit(D_train, t_train_x)\n\ngs_knn_y.fit(D_train, t_train_y)\ngs_knn_x.fit(D_train, t_train_x)\n\ngs_svc_y.fit(D_train, t_train_y)\ngs_svc_x.fit(D_train, t_train_x)","28eea831":"#function to return an array with distances between the actual and predicted points\ndef distance(x_actual, y_actual, x_predicted, y_predicted):\n    d_x = x_actual - x_predicted\n    d_y = y_actual - y_predicted\n    dist = d_x**2 + d_y**2\n    dist = np.sqrt(dist)\n    #dist = np.sort(dist)\n    return dist","6643e05a":"models_predictions_x = {'KNN_x': gs_knn_x.predict(D_test), 'DT_x': gs_dt_x.predict(D_test), 'SVC_x': gs_svc_x.predict(D_test)}\n\nmodels_predictions_y = {'KNN_y': gs_knn_y.predict(D_test), 'DT_y': gs_dt_y.predict(D_test), 'SVC_y': gs_svc_y.predict(D_test)}","367a28de":"fig, axs = plt.subplots(3, 3, figsize=(15,15))\n(ax1, ax2, ax3), (ax4, ax5, ax6), (ax7, ax8, ax9) = axs\n\nfor ax, px in zip(axs,models_predictions_x):\n    for axes, py in zip(ax,models_predictions_y):\n        distances = distance(t_test_x, t_test_y, models_predictions_x[px], models_predictions_y[py])\n        sorted_distances = np.sort(distances)\n        probabilites = 1. * np.arange(len(sorted_distances))\/(len(sorted_distances) - 1)\n        axes.plot(sorted_distances, probabilites)\n        axes.set_title(f'CDF: Euclidean dist. error: {px}|{py}')\n        axes.set(xlabel = 'Distance (m)', ylabel = 'Probability')\n        axes.text(2,0.05,f\"Mean Error dist.: {np.mean(distances)}\")\n        axes.grid(True)\n        gridlines = axes.get_xgridlines() + axes.get_ygridlines()\n        for line in gridlines:\n            line.set_linestyle(':')\n\nfig.tight_layout()\nplt.show()\nplt.close()","d801b939":"from plotly.offline import init_notebook_mode, iplot\nfrom IPython.display import display, HTML\nimport numpy as np\nfrom PIL import Image\n\nimage = Image.open(\"..\/input\/ble-rssi-dataset\/iBeacon_Layout.jpg\")\ninit_notebook_mode(connected=True)\n\nxm=np.min(t_test_x)-1.5\nxM=np.max(t_test_x)+1.5\nym=np.min(t_test_y)-1.5\nyM=np.max(t_test_y)+1.5\n\ndata=[dict(x=[0], y=[0], \n           mode=\"markers\", name = \"Predictions\",\n           line=dict(width=2, color='green')\n          ),\n      dict(x=[0], y=[0], \n           mode=\"markers\", name = \"Actual\",\n           line=dict(width=2, color='blue')\n          )\n      \n    ]\n\nlayout=dict(xaxis=dict(range=[xm, 24], autorange=False, zeroline=False),\n            yaxis=dict(range=[ym, 21], autorange=False, zeroline=False),\n            title='Predictions for SVC', hovermode='closest',\n            images= [dict(\n                  source= image,\n                  xref= \"x\",\n                  yref= \"y\",\n                  x= -3.5,\n                  y= 22,\n                  sizex= 36,\n                  sizey=25,\n                  sizing= \"stretch\",\n                  opacity= 0.5,\n                  layer= \"below\")]\n            )\n\nframes=[dict(data=[dict(x=[models_predictions_x['SVC_x'][k]], \n                        y=[models_predictions_y['SVC_y'][k]], \n                        mode='markers',\n                        \n                        marker=dict(color='red', size=10)\n                        ),\n                   dict(x=[t_test_x.iloc[k]], \n                        y=[t_test_y.iloc[k]], \n                        mode='markers',\n                        \n                        marker=dict(color='blue', size=10)\n                        )\n                  ]) for k in range(int(len(t_test_x))) \n       ]    \n          \nfigure1=dict(data=data, layout=layout, frames=frames)          \niplot(figure1)","980d7134":"## Importing Data","ab592209":"## Modelleme","fe3e3e5f":"## Veri temizleme-haz\u0131rlama"}}