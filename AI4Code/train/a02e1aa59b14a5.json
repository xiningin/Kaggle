{"cell_type":{"9771e5a8":"code","fc437119":"code","bf1713a3":"code","ed8b1bbd":"code","ac8cbcb8":"code","e44349bd":"code","f4dea430":"code","2b79d6db":"code","787e3b9f":"code","a206455a":"markdown","9feb6ee8":"markdown","73a26fdd":"markdown","f159a7d1":"markdown","550f3d7d":"markdown","0862ed27":"markdown","23e095c4":"markdown","3599109b":"markdown","19d96c16":"markdown","b1a8aa74":"markdown","84b9fb29":"markdown","d700d986":"markdown","238ab687":"markdown"},"source":{"9771e5a8":"import torch # Tensor Package (for use on GPU)\nfrom torch.autograd import Variable # for computational graphs\nimport torch.nn as nn ## Neural Network package\nimport torch.nn.functional as F # Non-linearities package\nimport torch.optim as optim # Optimization package\nfrom torch.utils.data import Dataset, TensorDataset, DataLoader # for dealing with data\nimport torchvision # for dealing with vision data\nimport torchvision.transforms as transforms # for modifying vision data to run it through models\n\nimport matplotlib.pyplot as plt # for plotting\nimport numpy as np\nfrom tqdm import tqdm","fc437119":"\ntransform = transforms.Compose(\n   [\n    transforms.ToTensor(), # normalize images from (0-255) to (0-1)\n       \n    transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)) # mean normalize ; subtract by 0.5 mean and divide by 0.5 std deviation\n   ])","bf1713a3":"\ntrainset = torchvision.datasets.CIFAR10(root='.\/data', train=True, download=True, transform=transform) # downloading CIFAR10 Dataset\n\ntrainloader = torch.utils.data.DataLoader(trainset, batch_size=4, shuffle=True) # dataLoader to get inputs\/labels pair in batches\n\n# Simillarly for test set\ntestset = torchvision.datasets.CIFAR10(root='.\/data', train=False, download=True, transform=transform)\ntestloader = torch.utils.data.DataLoader(testset, batch_size=4, shuffle=False)\n\nclasses = ('plane', 'car', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck') # CIFAR10 .... 10 classes","ed8b1bbd":"def imshow(img):\n    img = img \/ 2 + 0.5 # normalizing images\n    npimg = img.numpy() \n    plt.imshow(np.transpose(npimg, (1, 2, 0)))","ac8cbcb8":"class Net(nn.Module): #using pytorch's Net class for Neural Networks\n    def __init__(self):\n        super(Net, self).__init__()\n        \n        # input image shape is 3 x 32 x 32\n                                        #.     Output image sizes through each layer below\n        self.conv1 = nn.Conv2d(3, 10, 5)#      10 x 28 x 28\n        self.pool = nn.MaxPool2d(2, 2) #       10 x 14 x 14\n        self.conv2 = nn.Conv2d(10, 20, 5) #    20 x 10 x 10 \n        self.fc1 = nn.Linear(20 * 5 * 5, 120) # pooling it onece more will give 20 x 5 x 5\n        self.fc2 = nn.Linear(120, 10)\n\n    def forward(self, x):\n        x = self.pool(F.relu(self.conv1(x)))\n        x = self.pool(F.relu(self.conv2(x)))\n        x = x.view(-1, 20 * 5 * 5)\n        x = F.relu(self.fc1(x) )\n        x = F.relu(self.fc2(x))\n        return x\n\nnet = Net().cuda()  # Remember to turn on Accelerator as GPU\n","e44349bd":"# .... feel free to tweek them ;)\n\nNUMBER_OF_EPOCHS = 10\nLEARNING_RATE = 1e-2\n\nloss_function = nn.CrossEntropyLoss() # classification problem hence crossentropy loss\n\noptimizer = optim.SGD(net.parameters(), lr=LEARNING_RATE) # telling optimizer what parameters to update , along with learning rate\n","f4dea430":"\nfor epoch in tqdm(range(NUMBER_OF_EPOCHS)):\n    \n    train_loader_iter = iter(trainloader) # iterator for our train loader\n    \n    for batch_idx, (inputs, labels) in enumerate(train_loader_iter):\n        \n        net.zero_grad() # zeroing out gradients for each epoch to get fresh update \n        \n        inputs, labels = Variable(inputs.float().cuda()), Variable(labels.cuda())\n        \n        output = net(inputs) # calculating outputs\n        \n        loss = loss_function(output, labels) # computing loss\n        \n        loss.backward() # computing gradients of loss wrt parameters of net model\n        \n        optimizer.step() # updating parameters\n        \n    if epoch % 5 is 0:\n        print(\"Iteration: \" + str(epoch + 1))","2b79d6db":"dataiter = iter(testloader) #test iterator\n\nimages, labels = dataiter.next() # getting first image in iterator\n\nimshow(torchvision.utils.make_grid(images)) # plotting test images using our custom imshow function\n\noutputs = net(Variable(images.cuda()))     # computing outputs\n\n_, predicted = torch.max(outputs.data, 1) # getting indices for class out of 10 classes i.e (0-9) values\n\nprint('Predicted: ', ' '.join('%5s' % classes[predicted[j]]\n                              for j in range(4)))\nprint('GroundTruth: ', ' '.join('%5s' % classes[labels[j]] for j in range(4)))","787e3b9f":"correct = 0\ntotal = 0\n\nfor data in tqdm(testloader):\n    images, labels = data\n    labels = labels.cuda()\n    \n    outputs = net(Variable(images.cuda()))\n    _, predicted = torch.max(outputs.data, 1)\n    \n    total += labels.size(0) # total images\n    correct += (predicted == labels).sum() # correct predictions\n    \nprint('Accuracy of the network on the 10000 test images: %d %%' % (\n    100 * correct \/ total))","a206455a":"## This notebook is a very finely commented code package of *Image Classification task* on CIFAR10 dataset using PyTorch.\n\n### If you learn anything new from this notebook, payback by an Upvote \ud83d\ude0a\n### If you find any mistakes (probably in the code explaination via comments), feel free to comment about it below \ud83d\udd25\ud83d\udd25\ud83d\udd25","9feb6ee8":"# Importing Libraries","73a26fdd":"# Defining out ConvNet","f159a7d1":"# Testing our model on random test images","550f3d7d":"# Importing Dataset for Image Classification","0862ed27":"# If you like my kernel, do Upvote \ud83d\udd25","23e095c4":"# Computing Overall accuracy ","3599109b":"# Training our model","19d96c16":"### Reference : [One_of_the_best_blogs_on_PyTorch](https:\/\/lelon.io\/blog\/pytorch-baby-steps) by Josh","b1a8aa74":"# Function to plot images","84b9fb29":"# Setting up Hyperparameters","d700d986":"# Transforming input images for a smooth gradient descent :)","238ab687":"![](https:\/\/cdn2.vectorstock.com\/i\/1000x1000\/84\/36\/yellow-torch-with-bright-red-orange-fiery-flame-vector-22118436.jpg)"}}