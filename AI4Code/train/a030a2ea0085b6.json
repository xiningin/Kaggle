{"cell_type":{"37297eb0":"code","3614c8ee":"code","3049b3fa":"code","fbb74f86":"code","fe9794a7":"code","b9c65038":"code","5f002af1":"code","22d91711":"code","a35ea6df":"code","05d800a8":"code","a61473b0":"code","68a050f8":"code","bd1644ef":"code","d81ab19b":"code","59a38614":"code","a2504cb6":"code","2a4e39d7":"code","10ad08a6":"code","388c1fb9":"code","37b60280":"code","c42663bf":"code","a5ced67e":"code","aaedfb18":"code","a1544165":"code","1db25ca2":"code","74b9d5d3":"code","71114097":"code","ee3a2ba5":"code","331a81b5":"code","49f794ff":"code","6e90285b":"code","95228ce2":"code","d7e63215":"code","4e878ffa":"code","3b30ed9c":"code","8b61ba02":"code","c78f9162":"code","14fd4806":"code","ecded5ae":"code","7311f43d":"code","7c0b3505":"code","adec03d9":"code","c05531ab":"code","ff43424b":"code","47343fd5":"code","ddbee6d4":"code","0cba869a":"code","334db512":"code","e42e5ca3":"code","f9b00306":"code","881b47a4":"code","6eb6a0dd":"code","7ba5d115":"code","a4900764":"code","60893b4a":"code","6d259386":"code","98af0bbc":"code","063beb46":"code","a299b916":"code","83094f24":"code","76c7d3d4":"code","5daca85d":"code","b8a86ae2":"code","51bb47f2":"code","d09f502b":"code","ae8eb9b4":"code","800cd18c":"code","5df0330a":"code","9310bda9":"code","38b31509":"code","1e7efb9d":"code","ffcf6466":"code","909e01de":"code","27ae530b":"code","0f8b6b08":"code","c91acd6a":"code","0e44de25":"code","0111e9ff":"code","21a7bb21":"code","5471b0a8":"code","1b336f6a":"code","61b74831":"code","c8fc3100":"code","9cca7091":"code","46d7f5ec":"code","c70c922b":"code","1bf76260":"code","75b5a064":"code","726787f3":"code","d2c91723":"code","8644e47a":"code","199cc447":"code","a260eddd":"code","ed0d3e9b":"code","c1b81924":"code","d4460c6a":"code","fd6aeddd":"markdown","997b6d25":"markdown","f41767ba":"markdown","5429013f":"markdown","c99aba55":"markdown","9f5de76f":"markdown","a4556375":"markdown","546dce03":"markdown","e4ce53be":"markdown","9b96fc92":"markdown","8e5f12cc":"markdown","c8d85aff":"markdown","345c94ee":"markdown","d5d31655":"markdown","655e6ddf":"markdown","32c28fed":"markdown","2828c5fd":"markdown","05e789bd":"markdown","6f1ad499":"markdown","278e2910":"markdown","3355b37d":"markdown","b69436e7":"markdown"},"source":{"37297eb0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3614c8ee":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use('seaborn')\nsns.set(font_scale=2.5)","3049b3fa":"import missingno as msno\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\ndf_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","fbb74f86":"df_train.head()","fe9794a7":"df_train.describe()","b9c65038":"df_train.shape","5f002af1":"df_test.describe()","22d91711":"df_test.shape","a35ea6df":"for col in df_train.columns:\n    msg = 'colum: {:10} \\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_train[col].isnull().sum()\/ df_train[col].shape[0]))\n    print(msg)","05d800a8":"for col in df_test.columns:\n    msg = 'colum: {:10} \\t Percent of NaN value: {:.2f}%'.format(col, 100 * (df_test[col].isnull().sum()\/ df_test[col].shape[0]))\n    print(msg)","a61473b0":"msno.matrix(df=df_train.iloc[:,:], figsize =(8,8), color=(0.8, 0.5, 0.2))","68a050f8":"msno.bar(df=df_train.iloc[:,:], figsize =(8,8), color=(0.8, 0.5, 0.2))","bd1644ef":"f, ax =plt.subplots(1, 2, figsize=(18,8))\n\ndf_train['Survived'].value_counts().plot.pie(explode=[0,0.1], autopct = '%1.1f%%', ax = ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\nsns.countplot('Survived', data = df_train, ax = ax[1])\nax[1].set_title('Count plot - Survived')\nplt.show()\n","d81ab19b":"df_train['Survived'].value_counts()","59a38614":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index = True).count()","a2504cb6":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index = True).sum()","2a4e39d7":"pd.crosstab(df_train['Pclass'], df_train['Survived'], margins=True).style.background_gradient(cmap = 'cool')","10ad08a6":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index = True).mean()\n# \uc0dd\uc874\ub960","388c1fb9":"df_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).mean().sort_values(by='Survived', ascending=False).plot.bar()","37b60280":"y_position = 1.02\nf, ax = plt.subplots(1,2, figsize = (18,8))\ndf_train['Pclass'].value_counts().plot.bar(ax=ax[0])\nax[0].set_title('Number of passengers By Pclass')\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue = 'Survived', data = df_train, ax =ax[1])\nax[1].set_title('Pclass: Survived vs Dead', y=y_position)\nplt.show()","c42663bf":"f, ax = plt.subplots(1,2, figsize=(18,8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], as_index =True).mean().plot.bar(ax=ax[0])\nax[0].set_title('survived vs Sex')\nsns.countplot('Sex', hue = 'Survived', data = df_train, ax =ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","a5ced67e":"pd.crosstab(df_train['Sex'], df_train['Survived'], margins =True).style.background_gradient(cmap='summer_r')","aaedfb18":"sns.factorplot('Pclass', 'Survived',  hue= 'Sex', data=df_train, size =6, aspect=1.5)","a1544165":"sns.factorplot(x= 'Sex', y= 'Survived', hue='Pclass', data = df_train, saturation = .9, size =9, aspect =1)","1db25ca2":"print('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d: {: 1f} years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d: {: 1f} years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:1f} years'.format(df_train['Age'].mean()))","74b9d5d3":"foo = df_train['Age']","71114097":"fig,ax = plt.subplots(1,1, figsize=(9,5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax =ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax =ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()\n","ee3a2ba5":"plt.figure(figsize=(8,6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","331a81b5":"fig, ax = plt.subplots(1,1, figsize=(9,5))\nsns.kdeplot(df_train[(df_train['Survived'] ==0) & (df_train['Pclass'] == 1)]['Age'], ax =ax)\nsns.kdeplot(df_train[(df_train['Survived'] ==1) & (df_train['Pclass'] == 1)]['Age'], ax =ax)\n\nplt.legend(['Survived ==1', 'Survived ==0'])\nplt.show()","49f794ff":"fig, ax = plt.subplots(1,1, figsize=(9,5))\nsns.kdeplot(df_train[(df_train['Survived'] ==0) & (df_train['Pclass'] == 2)]['Age'], ax =ax)\nsns.kdeplot(df_train[(df_train['Survived'] ==1) & (df_train['Pclass'] == 2)]['Age'], ax =ax)\n\nplt.legend(['Survived ==1', 'Survived ==0'])\nplt.show()","6e90285b":"plt.figure(figsize=(8,6))\ndf_train['Age'][(df_train['Pclass'] == 1) & df_train['Survived']==0].plot(kind='hist')\n#df_train['Age'][(df_train['Pclass'] == 1) & df_train['Survived']==1].plot(kind='hist')\n\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\n#plt.legend(['1st Class', '2nd Class', '3rd Class'])","95228ce2":"fig,ax = plt.subplots(1,1, figsize=(9,5))\n\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax =ax)\n\nplt.show()\n","d7e63215":"change_age_range_survival_ratio = []\n\nfor i in range(1,80):\n    change_age_range_survival_ratio.append(df_train[df_train['Age']<i]['Survived'].sum() \/ len(df_train[df_train['Age']<i]['Survived']))\n    \nplt.figure(figsize=(7,7))\nplt.plot(change_age_range_survival_ratio)\nplt.title('change_age_range_survival_ratio', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()\n\n","4e878ffa":"f, ax = plt.subplots(1,2, figsize =(18,8))\nsns.violinplot('Pclass', 'Age', hue = 'Survived', data = df_train, scail='count', split=True, ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\n\nsns.violinplot('Sex', 'Age', hue='Survived', data = df_train, scale='area', split=True, ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","3b30ed9c":"f, ax = plt.subplots(1, 1, figsize=(7,7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'],as_index=True).mean().sort_values(by = 'Survived', ascending=False).plot.bar(ax=ax)","8b61ba02":"df_train[['Embarked', 'Survived']].groupby(['Embarked'],as_index=True).mean().sort_values(by = 'Survived')","c78f9162":"df_train[['Embarked', 'Survived']].groupby(['Embarked'],as_index=True).mean().sort_index()","14fd4806":"f, ax = plt.subplots(2,2, figsize=(20,15))\nsns.countplot('Embarked', data=df_train, ax =ax[0,0])\nax[0,0].set_title('(1) No. Of Passengers Boared')\n\nsns.countplot('Embarked', hue='Sex', data=df_train, ax =ax[0,1])\nax[0,1].set_title('(2) Male-Femail split for Embarked')\n\nsns.countplot('Embarked', hue='Survived', data=df_train, ax =ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\n\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax =ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\n\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","ecded5ae":"df_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] +1\ndf_test['FamilySize'] = df_test['SibSp'] + df_train['Parch'] +1 #\ucd94\uac00","7311f43d":"print('Maximum size of Family: ', df_train['FamilySize'].max())\nprint('Minimum size of Family: ', df_train['FamilySize'].min())\n","7c0b3505":"f, ax = plt.subplots(1,3, figsize=(40,10))\n\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passenger Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize', y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index = True).mean().sort_values(by='Survived', ascending = False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FailmilySize', y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()\n\n","adec03d9":"fig, ax = plt.subplots(1,1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b' , label='Skewness:{:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","c05531ab":"df_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i>0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i>0 else 0)\n","ff43424b":"fig, ax = plt.subplots(1,1, figsize=(8,8))\ng = sns.distplot(df_train['Fare'], color='b' , label='Skewness:{:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","47343fd5":"df_train['Ticket'].value_counts()","ddbee6d4":"df_train['Initial']= df_train.Name.str.extract('([A-Za-z]+)\\.') #lets extract the Salutations\n    \ndf_test['Initial']= df_test.Name.str.extract('([A-Za-z]+)\\.') #lets extract the Salutations","0cba869a":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r') #Checking the Initials with the Sex","334db512":"df_train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess','Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other','Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)","e42e5ca3":"df_train.groupby('Initial').mean()","f9b00306":"df_train.groupby('Initial')['Survived'].mean().plot.bar()","881b47a4":"df_train.groupby('Initial').mean()","6eb6a0dd":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age'] = 33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age'] = 36\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age'] = 5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age'] = 22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age'] = 46\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age'] = 33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age'] = 36\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age'] = 5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age'] = 22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age'] = 46","7ba5d115":"df_train['Age'].isnull().sum()\n# Age NULL \uac12 \ub2e4 \ucc44\uc6c0!","a4900764":"df_test['Age'].isnull().sum()\n# Age NULL \uac12 \ub2e4 \ucc44\uc6c0!","60893b4a":"df_train['Embarked'].isnull().sum()\n#df_test['Embarked'].isnull().sum()  #null  \uc5c6\uc74c","6d259386":"df_train.shape","98af0bbc":"df_train['Embarked'].fillna('S', inplace=True)","063beb46":"df_train['Embarked'].isnull().sum()","a299b916":"df_train['Age_cat']=0\n# 'Age_cat' \uce7c\ub7fc \uc0dd\uc131","83094f24":"df_train.head()","76c7d3d4":"df_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","5daca85d":"df_train.head()","b8a86ae2":"def category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7    ","51bb47f2":"df_train['Age_cat_2'] = df_train['Age'].apply(category_age)","d09f502b":"(df_train['Age_cat'] == df_train['Age_cat_2']).all()","ae8eb9b4":"df_train.drop(['Age','Age_cat_2'], axis=1, inplace=True)\ndf_test.drop(['Age'], axis=1, inplace=True)\ndf_train.head()","800cd18c":"df_train['Initial'] = df_train['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map({'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})","5df0330a":"df_train['Embarked'].unique()","9310bda9":"df_train['Embarked'].value_counts()","38b31509":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","1e7efb9d":"df_train['Embarked'].isnull().any()\n# any() : any \ud568\uc218\ub294 Iteration \uc774 \uac00\ub2a5\ud55c \uac1d\uccb4\ub97c \ubc1b\uc544 (\uc704\uc758 \uc608\uc5d0\uc11c\ub294 list) \uadf8 \ud56d\ubaa9\uc744 \ub3cc\uba74\uc11c \uc5b4\ub290 \ud558\ub098\ub77c\ub3c4 True \uc774\uba74 \uacb0\uacfc\ub85c True\ub97c \ub9ac\ud134 \ud55c\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.","ffcf6466":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","909e01de":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', 'Embarked', 'FamilySize', 'Initial', 'Age_cat']] \n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(16, 10))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0, square=True, cmap=colormap, linecolor='white', annot=True, annot_kws={\"size\": 16})\n\ndel heatmap_data","27ae530b":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='initial')","0f8b6b08":"df_train.head()","c91acd6a":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","0e44de25":"df_train.head()","0111e9ff":"df_test.head()","21a7bb21":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name',  'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)","5471b0a8":"df_train.head()","1b336f6a":"df_test.head()","61b74831":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split","c8fc3100":"X_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","9cca7091":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2018)","46d7f5ec":"model = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\nprediction = model.predict(X_vld)","c70c922b":"print('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld)))","1bf76260":"model.feature_importances_","75b5a064":"df_train.head()","726787f3":"from pandas import Series\n\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","d2c91723":"plt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","8644e47a":"submission = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","199cc447":"submission","a260eddd":"len(prediction)","ed0d3e9b":"prediction = model.predict(X_test)\nsubmission['Survived'] = prediction","c1b81924":"submission.to_csv('.\/my_first_submission.csv', index=False)","d4460c6a":"len(X_test)","fd6aeddd":"# Age","997b6d25":"## 2.1 Pclass","f41767ba":"## Family-SibSp + Parch","5429013f":"Model development - Machine learningl(Randomforest)","c99aba55":"(df_train['Age'].isnull()) & (df_train['initial']=='Mr')","9f5de76f":"Machine learning prediction - feature importance and prediction on test set","a4556375":"## Pclass, sex, Age\n","546dce03":"## 2.2 sex","e4ce53be":"## Embarked","9b96fc92":"- Lady first,\n- Money brings survival?","8e5f12cc":"# Titanic - 9. Feature engineering - Fill Null in Age","c8d85aff":"\ub2e4\uc2dc \ubcf8\ub860!","345c94ee":"Drop columns","d5d31655":"One-hot encoding on Initial and Embarked","655e6ddf":"Fill Null in Embarked","32c28fed":"# seaborn heatmap\n\n> **data** : rectangular dataset\n\n    2D dataset that can be coerced into an ndarray. If a Pandas DataFrame is provided, the index\/column information will be used to label the columns and rows.\n\n> **linewidths** : float, optional\n\n    Width of the lines that will divide each cell.\n    \n> **vmin, vmax** : floats, optional\n\n    Values to anchor the colormap, otherwise they are inferred from the data and other keyword arguments.\n\n> **square** : boolean, optional\n\n    If True, set the Axes aspect to \u201cequal\u201d so each cell will be square-shaped.\n\n> **cmap** : matplotlib colormap name or object, or list of colors, optional\n\n    The mapping from data values to color space. If not provided, the default will depend on whether center is set.\n\n\n> **linecolor** : color, optional\n\n    Color of the lines that will divide each cell.\n\n> **annot** : bool or rectangular dataset, optional\n\n    If True, write the data value in each cell. If an array-like with the same shape as data, then use this to annotate the heatmap instead of the raw data.\n\n > **annot_kws** : dict of key, value mappings, optional \n\n    Keyword arguments for ax.text when annot is True.\n\n\n\n\n\n","2828c5fd":"saturation : float, optional\n\nProportion of the original saturation to draw colors at. Large patches often look better with slightly desaturated colors, but set this to 1 if you want the plot colors to perfectly match the input color spec.","05e789bd":"### kdeplot \uc740 \ucd94\uc815\ud568\uc218","6f1ad499":"# EDA","278e2910":"## Fare, Cabin, Ticket","3355b37d":"## 2.2 Both Sex and Pclass","b69436e7":"![image.png](attachment:image.png)"}}