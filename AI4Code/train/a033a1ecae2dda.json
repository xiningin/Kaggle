{"cell_type":{"8eec6f7b":"code","aa38c88b":"code","cb8f195c":"code","43481cc4":"code","f11613fd":"code","0438953d":"code","16c4fcbe":"code","03940b93":"markdown"},"source":{"8eec6f7b":"import torch\nimport numpy as np","aa38c88b":"w_list=[]\nmse_list=[]","cb8f195c":"x_data = [1.0, 2.0, 3.0]\ny_data = [2.0, 4.0, 6.0]","43481cc4":"w = 1 # Random value\ndef forward(x):\n    return x*w","f11613fd":"def loss(x, y):\n    y_pred = forward(x)\n    return (y_pred-y)*(y_pred-y)","0438953d":"for w in np.arange(0.0,4.1,0.1):\n    print(\"w=\", w)\n    l_sum=0\n    for x_val, y_val in zip (x_data, y_data):\n        y_pred_val = forward(x_val)\n        l = loss(x_val, y_val)\n        l_sum+=l\n        print(\"\\t\", x_val, y_val, y_pred_val, l)\n        \n    print(\"MSE=\", l_sum\/3)\n    w_list.append(w)\n    mse_list.append(l_sum\/3)","16c4fcbe":"import matplotlib.pyplot as plt\nplt.plot(w_list, mse_list)\nplt.ylabel('Loss')\nplt.xlabel('w')\nplt.show()","03940b93":"## Session: 02 \n\nLinear model: $y=w*x$\n\n* In this session we create a linear model for given `x_data` and `y_data`. \n* Eventually we also plot the value of `w` against the difference in the prediction and actual value.  "}}