{"cell_type":{"058a90b1":"code","d331e0a5":"code","19bfc066":"code","d9470c11":"code","6c9f43d6":"code","13afca70":"code","a4003504":"code","6e3792b2":"code","0918f345":"code","0ab71e73":"code","1e0ea9e1":"code","1a5aab5a":"code","efad2555":"code","300db819":"code","7b1f59c5":"code","795117cf":"code","a95a66cd":"code","debfaafe":"code","6cb54e19":"code","2660ba62":"code","e8fefcaf":"code","7afd32e4":"code","66dd7f84":"code","f3266773":"code","51000712":"code","f50ceab2":"code","4807db76":"code","9ff63806":"code","fbba68fe":"code","953652f7":"code","30d1d291":"code","b05fb846":"code","31ad9d03":"code","ba28f2eb":"code","8d050184":"code","3824b5f6":"code","4e271135":"code","20090bb5":"code","639e50a0":"code","c55d1b47":"code","f62492fe":"code","caaeef33":"code","17309116":"code","9acddb99":"code","4e9e86d1":"code","79117ac6":"code","96e6f358":"code","e95d7c2d":"code","22dd4323":"code","0a541a2e":"code","6b9d51ad":"code","02085765":"code","b8712bf9":"code","df8fddb7":"code","3693eee8":"code","ae990836":"markdown","a3db8a6a":"markdown","51b27dcf":"markdown","18e572ba":"markdown","f88c32e2":"markdown","dc0e6f5f":"markdown","acc405b0":"markdown","c4460693":"markdown"},"source":{"058a90b1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d331e0a5":"import numpy as np\nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom pylab import rcParams\nimport matplotlib.cm as cm\nimport pandas_profiling as pp\n\nimport sklearn \nfrom sklearn import preprocessing\nfrom sklearn.preprocessing import LabelEncoder               # \u7f16\u7801\u8f6c\u6362\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import StratifiedShuffleSplit\n\nfrom sklearn.ensemble import RandomForestClassifier          # \u968f\u673a\u68ee\u6797\nfrom sklearn.svm import SVC, LinearSVC                       # \u652f\u6301\u5411\u91cf\u673a\nfrom sklearn.linear_model import LogisticRegression          # \u903b\u8f91\u56de\u5f52\nfrom sklearn.neighbors import KNeighborsClassifier           # KNN\u7b97\u6cd5\nfrom sklearn.naive_bayes import GaussianNB                   # \u6734\u7d20\u8d1d\u53f6\u65af\nfrom sklearn.tree import DecisionTreeClassifier              # \u51b3\u7b56\u6811\u5206\u7c7b\u5668\nfrom xgboost import XGBClassifier\nfrom catboost import CatBoostClassifier\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier     \n\nfrom sklearn.metrics import classification_report, precision_score, recall_score, f1_score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import make_scorer\nfrom sklearn.ensemble import VotingClassifier\n\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nget_ipython().magic('matplotlib inline')","19bfc066":"import pandas as pd\ntelcom = pd.read_csv('..\/input\/telcom\/Telco-Customer-Churn.csv')\ntelcom = pd.read_csv('..\/input\/telcom\/Telco-Customer-Churn.csv')","d9470c11":"telcom.head()","6c9f43d6":"telcom.describe()","13afca70":"telcom.info()","a4003504":"# check null\npd.isnull(telcom).sum()","6e3792b2":"# telcom['Churn'].value_counts(normalize = True)\ntelcom['Churn'].value_counts()","0918f345":"telcom[telcom.Churn == 'No'].head()","0ab71e73":"telcom['Churn'] = telcom['Churn'].map(lambda x : 0 if x == 'No' else 1)\ntelcom['Churn'].value_counts()","1e0ea9e1":"telcom.info()","1a5aab5a":"# change the dim type\ntelcom_raw = telcom.copy()\ntelcom['TotalCharges'] = pd.to_numeric(telcom.TotalCharges,errors='coerce')\ntelcom.TotalCharges.dtype","efad2555":"pd.isnull(telcom.TotalCharges).sum()","300db819":"# check TotalCharges null data\ntelcom_raw[pd.isnull(telcom.TotalCharges)]","7b1f59c5":"telcom.dropna(inplace=True)\ntelcom.shape","795117cf":"report = pp.ProfileReport(telcom)","a95a66cd":"# check churn rate\nchurnvalue=telcom[\"Churn\"].value_counts()\nlabels=telcom[\"Churn\"].value_counts().index\n\nplt.pie(churnvalue,labels=labels,colors=[\"whitesmoke\",\"yellow\"], explode=(0.1,0),autopct='%1.1f%%', shadow=True)\nplt.title(\"Proportions of Customer Churn\")\nplt.show()","debfaafe":"# \u6027\u522b\u3001\u8001\u5e74\u4eba\u3001\u914d\u5076\u3001\u4eb2\u5c5e\u5bf9\u6d41\u5ba2\u6237\u6d41\u5931\u7387\u7684\u5f71\u54cd\nf, axes = plt.subplots(nrows=2, ncols=2, figsize=(10,10))\n\nplt.subplot(2,2,1)\ngender=sns.countplot(x=\"gender\",hue=\"Churn\",data=telcom,palette=\"Pastel2\") # palette\u53c2\u6570\u8868\u793a\u8bbe\u7f6e\u989c\u8272\uff0c\u8fd9\u91cc\u8bbe\u7f6e\u4e3a\u4e3b\u9898\u8272Pastel2\nplt.xlabel(\"gender\")\nplt.title(\"Churn by Gender\")\n\nplt.subplot(2,2,2)\nseniorcitizen=sns.countplot(x=\"SeniorCitizen\",hue=\"Churn\",data=telcom,palette=\"Pastel2\")\nplt.xlabel(\"senior citizen\")\nplt.title(\"Churn by Senior Citizen\")\n\nplt.subplot(2,2,3)\npartner=sns.countplot(x=\"Partner\",hue=\"Churn\",data=telcom,palette=\"Pastel2\")\nplt.xlabel(\"partner\")\nplt.title(\"Churn by Partner\")\n\nplt.subplot(2,2,4)\ndependents=sns.countplot(x=\"Dependents\",hue=\"Churn\",data=telcom,palette=\"Pastel2\")\nplt.xlabel(\"dependents\")\nplt.title(\"Churn by Dependents\")","6cb54e19":"telcom.columns","2660ba62":"# \u63d0\u53d6\u7279\u5f81\ncharges = telcom.iloc[:,1:20]\ncharges_columns=list(charges.columns)\nprint(charges_columns)","e8fefcaf":"# \u5bf9\u7279\u5f81\u8fdb\u884c\u7f16\u7801\ncorrDf = charges.apply(lambda x: pd.factorize(x)[0])\ncorrDf_index = {}\nfor i in charges_columns:\n    corrDf_index[i] = pd.factorize(charges[i])[1]\ncorrDf_index","7afd32e4":"def columns_type(df):\n    '''\n    \u83b7\u53d6dataset\u7684\u5217\u5c5e\u6027\u5217\u8868\n    \uff1aparam df: pandas\u6570\u636e\u6846\n    \uff1areturn\uff1adict(key\uff1a\u5217\u7c7b\u578b value\uff1a\u5217\u540d)\n    '''\n    \n    type_info = {}\n    for key,value in df.dtypes.items():\n        value= str(value)\n        if value in type_info.keys():\n            type_info[value].append(key)\n        else:\n            type_info[value] = []\n            type_info[value].append(key)\n    return(type_info)\na = columns_type(telcom)\ntelcom[a['object']].head()","66dd7f84":"corr = corrDf.corr()\ncorr","f3266773":"plt.figure(figsize=(20,16))\nax = sns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, \n                 linewidths=0.2, cmap=\"YlGnBu\",annot=True)\nplt.title(\"Correlation between variables\")","51000712":"# \u4f7f\u7528one-hot\u7f16\u7801\ntel_dummies = pd.get_dummies(telcom.iloc[:,1:21])\ntel_dummies.head()","f50ceab2":"plt.figure(figsize=(15,8))\ntel_dummies.corr()['Churn'].sort_values(ascending = False).plot(kind='bar')\nplt.title(\"Correlations between Churn and variables\")","4807db76":"# \u7f51\u7edc\u5b89\u5168\u670d\u52a1\u3001\u5728\u7ebf\u5907\u4efd\u4e1a\u52a1\u3001\u8bbe\u5907\u4fdd\u62a4\u4e1a\u52a1\u3001\u6280\u672f\u652f\u6301\u670d\u52a1\u3001\u7f51\u7edc\u7535\u89c6\u3001\u7f51\u7edc\u7535\u5f71\u548c\u65e0\u4e92\u8054\u7f51\u670d\u52a1\u5bf9\u5ba2\u6237\u6d41\u5931\u7387\u7684\u5f71\u54cd\ncovariables=[\"OnlineSecurity\", \"OnlineBackup\", \"DeviceProtection\", \"TechSupport\", \"StreamingTV\", \"StreamingMovies\"]\nfig,axes=plt.subplots(nrows=2,ncols=3,figsize=(16,10))\nfor i, item in enumerate(covariables):\n    plt.subplot(2,3,(i+1))\n    ax=sns.countplot(x=item,hue=\"Churn\",data=telcom,palette=\"Pastel2\",order=[\"Yes\",\"No\",\"No internet service\"])\n    plt.xlabel(str(item))\n    plt.title(\"Churn by \"+ str(item))\n    i=i+1\nplt.show()","9ff63806":"# \u7b7e\u8ba2\u5408\u540c\u65b9\u5f0f\u5bf9\u5ba2\u6237\u6d41\u5931\u7387\u7684\u5f71\u54cd\nsns.barplot(x=\"Contract\",y=\"Churn\", data=telcom, palette=\"Pastel1\", order= ['Month-to-month', 'One year', 'Two year'])\nplt.title(\"Churn by Contract type\")","fbba68fe":"# \u4ed8\u6b3e\u65b9\u5f0f\u5bf9\u5ba2\u6237\u6d41\u5931\u7387\u7684\u5f71\u54cd\nplt.figure(figsize=(10,5))\nsns.barplot(x=\"PaymentMethod\",y=\"Churn\", data=telcom, palette=\"Pastel1\", order= ['Bank transfer (automatic)', 'Credit card (automatic)', 'Electronic check','Mailed check'])\nplt.title(\"Churn by PaymentMethod type\")","953652f7":"# delete customerID\u3001PhoneService\u3001gender\ntelcomvar=telcom.iloc[:,2:20]\ntelcomvar.drop(\"PhoneService\",axis=1, inplace=True)\n\ntelcomvar.columns","30d1d291":"# \u63d0\u53d6ID\ntelcom_id = telcom['customerID']\n\ntelcomvar.head()","b05fb846":"# \u5bf9\u5ba2\u6237\u7684\u804c\u4f4d\u3001\u6708\u8d39\u7528\u548c\u603b\u8d39\u7528\u8fdb\u884c\u53bb\u5747\u503c\u548c\u65b9\u5dee\u7f29\u653e\uff0c\u5bf9\u6570\u636e\u8fdb\u884c\u6807\u51c6\u5316\nscaler = StandardScaler(copy=False)\nscaler.fit_transform(telcomvar[['tenure','MonthlyCharges','TotalCharges']])","31ad9d03":"telcomvar[['tenure','MonthlyCharges','TotalCharges']].info()","ba28f2eb":"telcomvar[['tenure','MonthlyCharges','TotalCharges']] = scaler.transform(telcomvar[['tenure','MonthlyCharges','TotalCharges']])","8d050184":"# \u4f7f\u7528\u7bb1\u7ebf\u56fe\u67e5\u770b\u6570\u636e\u662f\u5426\u5b58\u5728\u5f02\u5e38\u503c\nplt.figure(figsize = (8,4))\nnumbox = sns.boxplot(data=telcomvar[['tenure','MonthlyCharges','TotalCharges']], palette=\"Set2\")\nplt.title(\"Check outliers of standardized tenure, MonthlyCharges and TotalCharges\")","3824b5f6":"def uni(columnlabel):\n    print(columnlabel,\"--\" ,telcomvar[columnlabel].unique())  # unique\u51fd\u6570\u53bb\u9664\u5176\u4e2d\u91cd\u590d\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u552f\u4e00\u503c\n\ntelcomobject=telcomvar.select_dtypes(['object'])\nfor i in range(0,len(telcomobject.columns)):\n    uni(telcomobject.columns[i])             ","4e271135":"# \u7efc\u5408\u4e4b\u524d\u7684\u7ed3\u679c\u6765\u770b\uff0c\u5728\u516d\u4e2a\u53d8\u91cf\u4e2d\u5b58\u5728No internet service\uff0c\u5373\u65e0\u4e92\u8054\u7f51\u670d\u52a1\u5bf9\u5ba2\u6237\u6d41\u5931\u7387\u5f71\u54cd\u5f88\u5c0f\uff0c\u8fd9\u4e9b\u5ba2\u6237\u4e0d\u4f7f\u7528\u4efb\u4f55\u4e92\u8054\u7f51\u4ea7\u54c1\uff0c\u56e0\u6b64\u53ef\u4ee5\u5c06No internet service \u548c No \u662f\u4e00\u6837\u7684\u6548\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528 No \u66ff\u4ee3 No internet service\ntelcomvar.replace(to_replace='No internet service', value='No' ,inplace=True)\ntelcomvar.replace(to_replace='No phone service', value='No', inplace=True)","20090bb5":"# \u4f7f\u7528Scikit-learn\u6807\u7b7e\u7f16\u7801,\u5c06\u5206\u7c7b\u6570\u636e\u8f6c\u6362\u4e3a\u6574\u6570\u7f16\u7801\ndef labelencode(columnlabel):\n    telcomvar[columnlabel] = LabelEncoder().fit_transform(telcomvar[columnlabel])\n\nfor i in range(0,len(telcomobject.columns)):\n    labelencode(telcomobject.columns[i])\n\nfor i in range(0,len(telcomobject.columns)):\n    uni(telcomobject.columns[i])","639e50a0":"telcomvar.head()","c55d1b47":"X=telcomvar\ny=telcom[\"Churn\"].values","f62492fe":"sss=StratifiedShuffleSplit(n_splits=5, test_size=0.2, random_state=0)\nprint(sss)\nprint(\"\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\u88ab\u5206\u6210\u7684\u7ec4\u6570\uff1a\",sss.get_n_splits(X,y))","caaeef33":"# \u5efa\u7acb\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\nfor train_index, test_index in sss.split(X, y):\n    print(\"train:\", train_index, \"test:\", test_index)\n    X_train,X_test=X.iloc[train_index], X.iloc[test_index]\n    y_train,y_test=y[train_index], y[test_index]","17309116":"print('\u539f\u59cb\u6570\u636e\u7279\u5f81\uff1a', X.shape,\n      '\u8bad\u7ec3\u6570\u636e\u7279\u5f81\uff1a',X_train.shape,\n      '\u6d4b\u8bd5\u6570\u636e\u7279\u5f81\uff1a',X_test.shape)","9acddb99":"print('\u539f\u59cb\u6570\u636e\u6807\u7b7e\uff1a', y.shape,\n      '   \u8bad\u7ec3\u6570\u636e\u6807\u7b7e\uff1a',y_train.shape,\n      '   \u6d4b\u8bd5\u6570\u636e\u6807\u7b7e\uff1a',y_test.shape)","4e9e86d1":"Classifiers=[[\"Random Forest\",RandomForestClassifier()],\n             [\"Support Vector Machine\",SVC()],\n             [\"LogisticRegression\",LogisticRegression()],\n             [\"KNN\",KNeighborsClassifier(n_neighbors=5)],\n             [\"Naive Bayes\",GaussianNB()],\n             [\"Decision Tree\",DecisionTreeClassifier()],\n             [\"AdaBoostClassifier\", AdaBoostClassifier()],\n             [\"GradientBoostingClassifier\", GradientBoostingClassifier()],\n             [\"XGB\", XGBClassifier()],\n             [\"CatBoost\", CatBoostClassifier(logging_level='Silent')]  \n]","79117ac6":"Classify_result=[]\nnames=[]\nprediction=[]\nfor name,classifier in Classifiers:\n    classifier=classifier\n    classifier.fit(X_train,y_train)\n    y_pred=classifier.predict(X_test)\n    recall=recall_score(y_test,y_pred)\n    precision=precision_score(y_test,y_pred)\n    f1 =f1_score(y_test,y_pred)\n    class_eva=pd.DataFrame([recall,precision,f1])\n    Classify_result.append(class_eva)\n    name=pd.Series(name)\n    names.append(name)\n    y_pred=pd.Series(y_pred)\n    prediction.append(y_pred)","96e6f358":"names=pd.DataFrame(names)\nnames=names[0].tolist()\nnames","e95d7c2d":"names=pd.DataFrame(names)\nnames=names[0].tolist()\nresult=pd.concat(Classify_result,axis=1)\nresult.columns=names\nresult.index=[\"recall\",\"precision\",\"F1\"]\nresult","22dd4323":"pred_X = telcomvar.tail(100)","0a541a2e":"pre_id = telcom_id.tail(100)","6b9d51ad":"# \u4f7f\u7528\u6734\u7d20\u8d1d\u53f6\u65af\u65b9\u6cd5\uff0c\u5bf9\u9884\u6d4b\u6570\u636e\u96c6\u4e2d\u7684\u751f\u5b58\u60c5\u51b5\u8fdb\u884c\u9884\u6d4b\nmodel = GaussianNB()\nmodel.fit(X_train,y_train)\npred_y = model.predict(pred_X)\npred_y_pro = model.predict_proba(pred_X)","02085765":"predDf = pd.DataFrame({'customerID':pre_id, 'Churn':pred_y})\npredDf","b8712bf9":"pred_y_pro = np.array(pd.DataFrame(pred_y_pro)[1])\ny = telcom[\"Churn\"].tail(100).values\nfpr, tpr, thresholds = sklearn.metrics.roc_curve(y, pred_y_pro, pos_label = 1)","df8fddb7":"auc = sklearn.metrics.auc(fpr, tpr)","3693eee8":"plt.figure()\nlw = 2\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % auc)\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","ae990836":"### EDA \u6570\u636e\u63a2\u7d22","a3db8a6a":"### \u8bc4\u4f30\u6a21\u578b","51b27dcf":"### read data","18e572ba":"### \u8bad\u7ec3\u6a21\u578b","f88c32e2":"### \u6570\u636e\u63a2\u7d22","dc0e6f5f":"### Train Model","acc405b0":"### data pre-processing","c4460693":"### \u9884\u6d4b"}}