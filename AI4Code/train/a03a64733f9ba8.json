{"cell_type":{"1c00cd68":"code","5e329ccd":"code","6758bf89":"code","e004ff60":"code","c3f33e72":"code","064a036c":"code","7870ad77":"code","09e42b63":"code","e661d427":"code","82ee2f40":"code","0d73533f":"code","8214b40d":"code","dd4331ad":"code","dee92778":"code","1ae9d79f":"code","45997144":"code","7483a7ff":"code","bb85f97b":"code","02bfbada":"code","cd5b84f6":"code","a2b1c3ce":"code","fdd0bc6b":"code","45ea1fe3":"code","031c5264":"code","a0a3d810":"code","34358ac3":"code","ea843052":"code","98a057bb":"code","52c83e89":"code","9123cd3e":"code","1d3737ad":"code","98d80612":"code","71eac22c":"code","0e22cf1f":"code","6f1e86a3":"markdown","6c4009cd":"markdown","2a8e698b":"markdown","30dee90f":"markdown","e6d2a86c":"markdown","938d9362":"markdown","daa4902e":"markdown","8ade6729":"markdown","7506ed48":"markdown"},"source":{"1c00cd68":"import gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm import tqdm_notebook as tqdm\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\n\n# --- models ---\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\n\nfrom sklearn.metrics import mean_squared_error","5e329ccd":"\n# Original code from https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage by @gemartin\n# Modified to support timestamp type, categorical type\n# Modified to add option to use float16 or not. feather format does not support float16.\nfrom pandas.api.types import is_datetime64_any_dtype as is_datetime\nfrom pandas.api.types import is_categorical_dtype\n\ndef reduce_mem_usage(df, use_float16=False):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        if is_datetime(df[col]) or is_categorical_dtype(df[col]):\n            # skip datetime type or categorical type\n            continue\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if use_float16 and c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","6758bf89":"%%time\nroot = Path('..\/input\/ashrae-feather-format-for-fast-loading')\n\ntrain_df = pd.read_feather(root\/'train.feather')\ntest_df = pd.read_feather(root\/'test.feather')\n#weather_train_df = pd.read_feather(root\/'weather_train.feather')\n#weather_test_df = pd.read_feather(root\/'weather_test.feather')\nbuilding_meta_df = pd.read_feather(root\/'building_metadata.feather')","e004ff60":"# i'm now using my leak data station kernel to shortcut.\nleak_df = pd.read_feather('..\/input\/ashrae-leak-data-station\/leak.feather')\nleak_df.fillna(0, inplace=True)\nprint (leak_df.timestamp.min(), leak_df.timestamp.max())\nleak_df = leak_df[(leak_df.timestamp.dt.year > 2016) & (leak_df.timestamp.dt.year < 2019)]\nleak_df.loc[leak_df.meter_reading < 0, 'meter_reading'] = 0 # remove large negative values\nleak_df = leak_df[leak_df.building_id!=245]","c3f33e72":"leak_df.meter.value_counts()","064a036c":"print (leak_df.duplicated().sum())","7870ad77":"print (len(leak_df) \/ len(train_df))","09e42b63":"! ls ..\/input","e661d427":"del train_df\ngc.collect()","82ee2f40":"sample_submission1 = pd.read_csv('..\/input\/ashrae-kfold-lightgbm-without-leak-1-08\/submission.csv', index_col=0)\nsample_submission2 = pd.read_csv('..\/input\/ashrae-half-and-half\/submission.csv', index_col=0)\nsample_submission3 = pd.read_csv('..\/input\/ashrae-highway-kernel-route4\/submission.csv', index_col=0)","0d73533f":"test_df['pred1'] = sample_submission1.meter_reading\ntest_df['pred2'] = sample_submission2.meter_reading\ntest_df['pred3'] = sample_submission3.meter_reading\n\ntest_df.loc[test_df.pred3<0, 'pred3'] = 0 \n\ndel  sample_submission1,  sample_submission2,  sample_submission3\ngc.collect()\n\ntest_df = reduce_mem_usage(test_df)\nleak_df = reduce_mem_usage(leak_df)","8214b40d":"leak_df = leak_df.merge(test_df[['building_id', 'meter', 'timestamp', 'pred1', 'pred2', 'pred3', 'row_id']], left_on = ['building_id', 'meter', 'timestamp'], right_on = ['building_id', 'meter', 'timestamp'], how = \"left\")\nleak_df = leak_df.merge(building_meta_df[['building_id', 'site_id']], on='building_id', how='left')","dd4331ad":"leak_df['pred1_l1p'] = np.log1p(leak_df.pred1)\nleak_df['pred2_l1p'] = np.log1p(leak_df.pred2)\nleak_df['pred3_l1p'] = np.log1p(leak_df.pred3)\nleak_df['meter_reading_l1p'] = np.log1p(leak_df.meter_reading)","dee92778":"leak_df.head()","1ae9d79f":"leak_df[leak_df.pred1_l1p.isnull()]","45997144":"#ashrae-kfold-lightgbm-without-leak-1-08\nsns.distplot(leak_df.pred1_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nleak_score = np.sqrt(mean_squared_error(leak_df.pred1_l1p, leak_df.meter_reading_l1p))\nprint ('score1=', leak_score)","7483a7ff":"#ashrae-half-and-half\nsns.distplot(leak_df.pred2_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nleak_score = np.sqrt(mean_squared_error(leak_df.pred2_l1p, leak_df.meter_reading_l1p))\nprint ('score2=', leak_score)","bb85f97b":"# meter split based\nsns.distplot(leak_df.pred3_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nleak_score = np.sqrt(mean_squared_error(leak_df.pred3_l1p, leak_df.meter_reading_l1p))\nprint ('score3=', leak_score)","02bfbada":"# ashrae-kfold-lightgbm-without-leak-1-08 looks best","cd5b84f6":"leak_df['mean_pred'] = np.mean(leak_df[['pred1', 'pred2', 'pred3']].values, axis=1)\nleak_df['mean_pred_l1p'] = np.log1p(leak_df.mean_pred)\nleak_score = np.sqrt(mean_squared_error(leak_df.mean_pred_l1p, leak_df.meter_reading_l1p))\n\n\nsns.distplot(leak_df.mean_pred_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nprint ('mean score=', leak_score)","a2b1c3ce":"leak_df['median_pred'] = np.median(leak_df[['pred1', 'pred2', 'pred3']].values, axis=1)\nleak_df['median_pred_l1p'] = np.log1p(leak_df.median_pred)\nleak_score = np.sqrt(mean_squared_error(leak_df.median_pred_l1p, leak_df.meter_reading_l1p))\n\nsns.distplot(leak_df.median_pred_l1p)\nsns.distplot(leak_df.meter_reading_l1p)\n\nprint ('meadian score=', leak_score)","fdd0bc6b":"N = 10\nscores = np.zeros(N,)\nfor i in range(N):\n    p = i * 1.\/N\n    v = p * leak_df['pred1'].values + (1.-p) * leak_df ['pred3'].values\n    vl1p = np.log1p(v)\n    scores[i] = np.sqrt(mean_squared_error(vl1p, leak_df.meter_reading_l1p))","45ea1fe3":"plt.plot(scores)","031c5264":"best_weight = np.argmin(scores) *  1.\/N\nprint (scores.min(), best_weight)","a0a3d810":"# and more\nscores = np.zeros(N,)\nfor i in range(N):\n    p = i * 1.\/N\n    v =  p * (best_weight * leak_df['pred1'].values + (1.-best_weight) * leak_df ['pred3'].values) + (1.-p) * leak_df ['pred2'].values\n    vl1p = np.log1p(v)\n    scores[i] = np.sqrt(mean_squared_error(vl1p, leak_df.meter_reading_l1p))","34358ac3":"plt.plot(scores)","ea843052":"best_weight2 = np.argmin(scores) *  1.\/N\nprint (scores.min(), best_weight2)\n# its seams better than simple mean 0.92079717","98a057bb":"v = 0.33 * leak_df['pred1'].values + 0.33 * leak_df['pred3'].values + 0.3 * leak_df['pred2'].values\nvl1p = np.log1p(v)\n\nprint (np.sqrt(mean_squared_error(vl1p, leak_df.meter_reading_l1p)))","52c83e89":"sample_submission = pd.read_feather(os.path.join(root, 'sample_submission.feather'))\nsample_submission['meter_reading'] = 0.33 * test_df.pred1 +  0.33 * test_df.pred3  + 0.3 * test_df.pred2\nsample_submission.loc[sample_submission.meter_reading < 0, 'meter_reading'] = 0","9123cd3e":"sns.distplot(np.log1p(sample_submission.meter_reading))","1d3737ad":"leak_df = leak_df[['meter_reading', 'row_id']].set_index('row_id').dropna()\nsample_submission.loc[leak_df.index, 'meter_reading'] = leak_df['meter_reading']","98d80612":"sns.distplot(np.log1p(sample_submission.meter_reading))","71eac22c":"sample_submission.head()","0e22cf1f":"sample_submission.to_csv('submission.csv', index=False, float_format='%.4f')","6f1e86a3":"# Leak Validation for Blending","6c4009cd":"# Leak Validation for public kernels(not used leak data)","2a8e698b":"Ummm... it looks mean blending is beter than median blending","30dee90f":"A one idea how we can use LV usefull is blending. We probably can find best blending method without LB probing and it's means we can save our submission.","e6d2a86c":"this kernel is still work in progress, but i hope you can find something usefull from this.","938d9362":"# Find Best Weight","daa4902e":"# Submit","8ade6729":"# All We need is Leak Validation(LV) ?\n\n* **if you like this kernel, please upvote original kernels.**\n* update leakdata","7506ed48":"# Heuristic way"}}