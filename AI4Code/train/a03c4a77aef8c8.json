{"cell_type":{"a8d936b6":"code","0a984b17":"code","434f8bdb":"code","bf0eb957":"code","c179e6a8":"code","e28af9fa":"code","4f6fbd6b":"code","f50426b2":"code","35b20ec9":"code","0715558d":"code","5f9cbd73":"code","ff848563":"code","bd742991":"code","6df19d7d":"code","e609a572":"code","408e3202":"code","6b130f46":"code","2fbbfea0":"code","41f3aa07":"code","fc9169e1":"code","f3182fb5":"code","f2524fdc":"code","5f67d8dc":"code","c180a059":"code","da733b72":"code","3aa62f5a":"code","62ae99bb":"code","f1b60d02":"code","a2fdc831":"code","ef99779c":"code","d30db321":"code","3a016788":"code","5e594350":"code","03b19c1d":"code","6690ea68":"code","a46e2d6e":"code","05911447":"code","ce586c44":"code","0417b3a0":"code","031bfde8":"code","b401903c":"code","15ece2da":"markdown","b7a5f663":"markdown","90472f4b":"markdown","069a132c":"markdown","aeae6455":"markdown","c84d1d03":"markdown","b90dabc1":"markdown","1a8ae783":"markdown","e9002c12":"markdown","e3d14b68":"markdown","1979490b":"markdown","8ae7214f":"markdown","3548b9e1":"markdown","99b49219":"markdown","67b39c58":"markdown","30bba073":"markdown","ab3a6cbd":"markdown","87645515":"markdown","7a4fed9d":"markdown","3427a246":"markdown","8e2822ad":"markdown","b3c37e8f":"markdown","19f69394":"markdown","da7307ef":"markdown","0942c73e":"markdown","f352852f":"markdown"},"source":{"a8d936b6":"import pandas as pd\nimport numpy as np\n\nimport missingno as msno\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","0a984b17":"df=pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")","434f8bdb":"df.head()","bf0eb957":"df.info()","c179e6a8":"df.describe().T","e28af9fa":"# Visualize missing values as a matrix\nmsno.matrix(df)","4f6fbd6b":"df.isnull().sum()","f50426b2":"msno.bar(df)","35b20ec9":"for i in df.columns:\n    null_rate = df[i].isnull().sum() \/ len(df)*100\n    if null_rate > 0 :\n        print( \"{}'s null rate: {}%\".format(i, round(null_rate, 2)))\n    ","0715558d":"df.nunique()","5f9cbd73":"df[df[\"rating\"].isnull()]","ff848563":"rating_replacements = {\n    67: 'TV-PG',\n    2359: 'TV-14',\n    3660: 'TV-MA',\n    3736: 'TV-MA',\n    3737: 'NR',\n    3738: 'TV-MA',\n    4323: 'TV-MA '\n}\n\nfor id, rate in rating_replacements.items():\n    df.iloc[id, 8] = rate\n    \ndf['rating'].isnull().sum()","bd742991":"df.drop(['director', 'cast'], inplace=True, axis=1)\ndf.columns","6df19d7d":"df=df[df[\"date_added\"].notna()]","e609a572":"df.isnull().sum()","408e3202":"df['country'] = df['country'].fillna(df['country'].mode()[0])","6b130f46":"df['country'].nunique()","2fbbfea0":"# Lets retrieve just the first country\ndf['principal_country'] = df['country'].apply(lambda x: x.split(\",\")[0])\ndf['principal_country'].head()","41f3aa07":"df['principal_country'].nunique()","fc9169e1":"df.isna().sum()","f3182fb5":"df.dtypes","f2524fdc":"df['year_added'] = df['date_added'].apply(lambda x: x.split(\" \")[-1])\ndf['year_added'].head()","5f67d8dc":"df['month_added'] = df['date_added'].apply(lambda x: x.split(\" \")[0])\ndf['month_added'].head()","c180a059":"ratings_ages = {\n    'TV-PG': 'Older Kids',\n    'TV-MA': 'Adults',\n    'TV-Y7-FV': 'Older Kids',\n    'TV-Y7': 'Older Kids',\n    'TV-14': 'Teens',\n    'R': 'Adults',\n    'TV-Y': 'Kids',\n    'NR': 'Adults',\n    'PG-13': 'Teens',\n    'TV-G': 'Kids',\n    'PG': 'Older Kids',\n    'G': 'Kids',\n    'UR': 'Adults',\n    'NC-17': 'Adults'\n}","da733b72":"df['target_ages'] = df['rating'].replace(ratings_ages)\ndf['target_ages'].unique()","3aa62f5a":"val = df['type'].value_counts().index\ncnt = df['type'].value_counts().values\n\nfig = go.Figure([go.Bar(x=val, y=cnt, marker_color='darkturquoise')])\nfig.update_layout(title_text='Netflix Sources Distribution', title_x=0.5)\nfig.show()","62ae99bb":"# type should be a category\ndf['type'] = pd.Categorical(df['type'])\n\n# target_ages is another category (4 classes)\ndf['target_ages'] = pd.Categorical(df['target_ages'], categories=['Kids', 'Older Kids', 'Teens', 'Adults'])\n\n# Year added should be integer so we can compare with `released_year`\ndf['year_added'] = pd.to_numeric(df['year_added'])","f1b60d02":"plt.figure(figsize=(15,8))\nlabel=['TV Show', 'Movie']\nplt.pie(df['type'].value_counts().sort_values(), labels=label, explode=[0.15,0.15], \n        autopct='%1.2f%%', startangle=90)\nplt.title('Different Types of Netflix Content')\nplt.axis('equal')","a2fdc831":"df_movie = df[df['type']=='Movie'].groupby('release_year').count()\ndf_tv = df[df['type']=='TV Show'].groupby('release_year').count()\n\n\ndf_movie.reset_index(level=0, inplace=True)\ndf_tv.reset_index(level=0, inplace=True)\n\n# fig = px.line(data_movie, x=\"release_year\", y=\"show_id\")\n# fig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Scatter(x=df_movie['release_year'], y=df_movie['show_id'],\n                    mode='lines',\n                    name='Movies', marker_color='mediumpurple'))\nfig.add_trace(go.Scatter(x=df_tv['release_year'], y=df_tv['show_id'],\n                    mode='lines',\n                    name='TV Shows', marker_color='lightcoral'))\nfig.update_layout(title_text='Trend Movies vs TV Shows in recent years', title_x=0.5)\nfig.show()","ef99779c":"df_tv = df[df[\"type\"] == \"TV Show\"]\ndf_movie = df[df[\"type\"] == \"Movie\"]\n\nmovie_ratings = df_movie.groupby(['rating'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,8)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='rating',y='count',data=movie_ratings)\nplt.title('Top Movie Ratings Based On Rating System',size='20')\nplt.show()","d30db321":"tv_ratings = df_tv.groupby(['rating'])['show_id'].count().reset_index(name='count').sort_values(by='count',ascending=False)\nfig_dims = (18,8)\nfig, ax = plt.subplots(figsize=fig_dims)  \nsns.pointplot(x='rating',y='count',data=tv_ratings)\nplt.title('Top TV Show Ratings Based On Rating System',size='20')\nplt.show()","3a016788":"def generate_rating_df(df):\n    rating_df = df.groupby(['rating', 'target_ages']).agg({'show_id': 'count'}).reset_index()\n    rating_df = rating_df[rating_df['show_id'] != 0]\n    rating_df.columns = ['rating', 'target_ages', 'counts']\n    rating_df = rating_df.sort_values('target_ages')\n    return rating_df\n\n\nrating_df = generate_rating_df(df)\nfig = px.bar(rating_df, x='rating', y='counts', color='target_ages', title='Ratings of Movies And TV Shows Based On Target Age Groups',  labels={'counts':'COUNT', 'rating':'RATINGS', 'target_ages':'TARGET AGE GROUPS' })\nfig.show()","5e594350":"plt.figure(figsize=(12,10))\nsns.set(style=\"whitegrid\")\nax = sns.countplot(y=\"release_year\", data=df_movie, palette=\"coolwarm\", order=df_movie['release_year'].value_counts().index[0:15])\n\nplt.title('ANALYSIS ON RELEASE YEAR OF MOVIES', fontsize=15, fontweight='bold')\nplt.show()","03b19c1d":"plt.figure(figsize=(12,10))\nsns.set(style=\"darkgrid\")\nax = sns.countplot(y=\"release_year\", data=df_tv, palette=\"coolwarm\", order=df_tv['release_year'].value_counts().index[0:15])\n\nplt.title('ANALYSIS ON RELEASE YEAR OF TV Show', fontsize=15, fontweight='bold')\nplt.show()","6690ea68":"from collections import Counter\ncountry_data = df['country']\ncountry_count = pd.Series(dict(Counter(','.join(country_data).replace(' ,',',').replace(\n    ', ',',').split(',')))).sort_values(ascending=False)\ntop20country = country_count.head(20)\nplt.figure(figsize=(15,5))\nsns.barplot(x= top20country.index, y=top20country, palette=\"pastel\")\nplt.xticks(rotation=50)\nplt.title('Top 20 countries with most contents', fontsize=15, fontweight='bold')\nplt.show()","a46e2d6e":"rating_order_movie =  ['G', 'TV-Y', 'TV-G', 'PG', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'PG-13', 'TV-14', 'R', 'NC-17', 'TV-MA']\nrating_order_tv =  [ 'TV-Y', 'TV-G', 'TV-Y7', 'TV-Y7-FV', 'TV-PG', 'TV-14', 'R', 'TV-MA']\nmovie_rating = df_movie['rating'].value_counts()[rating_order_movie]\ntv_rating = df_tv['rating'].value_counts()[rating_order_tv].fillna(0)\ndef rating_barplot(data, title, height, h_lim=None):\n    fig, ax = plt.subplots(1,1, figsize=(15, 7))\n    if h_lim :\n        ax.set_ylim(0, h_lim)\n    ax.bar(data.index, data,  color=\"#d0d0d0\", width=0.6, edgecolor='black')\n\n    color =  ['green',  'blue',  'orange',  'red']\n    span_range = [[0, 2], [3,  6], [7, 8], [9, 11]]\n\n    for idx, sub_title in enumerate(['Little Kids', 'Older Kids', 'Teens', 'Mature']):\n        ax.annotate(sub_title,\n                    xy=(sum(span_range[idx])\/2 ,height),\n                    xytext=(0,0), textcoords='offset points',\n                    va=\"center\", ha=\"center\",\n                    color=\"w\", fontsize=16, fontweight='bold',\n                    bbox=dict(boxstyle='round4', pad=0.4, color=color[idx], alpha=0.6))\n        ax.axvspan(span_range[idx][0]-0.4,span_range[idx][1]+0.4,  color=color[idx], alpha=0.1)\n\n    ax.set_title(f'Distribution of {title} Rating', fontsize=20, fontweight='bold', position=(0.5, 1.0+0.03))\n    plt.show()\n    \n\nrating_barplot(movie_rating,'Movie', 1500)\n","05911447":"rating_barplot(tv_rating,'TV Show' , 600, 1500)","ce586c44":"import plotly.offline as py\npy.offline.init_notebook_mode()\nimport pycountry\n\n\ndf1 = pd.DataFrame(dict1.items(), columns=['Country', 'Count'])\ndf2 = pd.DataFrame(dict2.items(), columns=['Country', 'Count'])\n\ntotal = set(list(df1['Country'].append(df2['Country'])))\n\nd_country_code = {}  # To hold the country names and their ISO\nfor country in total:\n    try:\n        country_data = pycountry.countries.search_fuzzy(country)\n        # country_data is a list of objects of class pycountry.db.Country\n        # The first item  ie at index 0 of list is best fit\n        # object of class Country have an alpha_3 attribute\n        country_code = country_data[0].alpha_3\n        d_country_code.update({country: country_code})\n    except:\n        #print('could not add ISO 3 code for ->', country)\n        # If could not find country, make ISO code ' '\n        d_country_code.update({country: ' '})\n        \nfor k, v in d_country_code.items():\n    df1.loc[(df1.Country == k), 'iso_alpha'] = v\n    df2.loc[(df2.Country == k), 'iso_alpha'] = v\n        \nfig = px.scatter_geo(df1, locations=\"iso_alpha\",\n                     hover_name=\"Country\", # column added to hover information\n                     size=\"Count\", # size of markers, \"pop\" is one of the columns of gapminder\n                     )\nfig.update_layout(title_text='Top Countries where Movie are released', title_x=0.5)\nfig.show()\n\nfig = px.scatter_geo(df2, locations=\"iso_alpha\",\n                     hover_name=\"Country\", # column added to hover information\n                     size=\"Count\", # size of markers, \"pop\" is one of the columns of gapminder\n                     )\n\nfig.update_layout(title_text='Top Countries where TV Shows are released', title_x=0.5)\nfig.show()","0417b3a0":"df_content = df['year_added'].value_counts().reset_index().rename(columns = {\n    'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added')\ndf_content['percent'] = df_content['count'].apply(lambda x : 100*x\/sum(df_content['count']))\n\n\ndf_tv1 = df_tv['year_added'].value_counts().reset_index().rename(columns = {\n    'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added')\ndf_tv1['percent'] = df_tv1['count'].apply(lambda x : 100*x\/sum(df_tv1['count']))\n\n\ndf_movie1 = df_movie['year_added'].value_counts().reset_index().rename(columns = {\n    'year_added' : 'count', 'index' : 'year_added'}).sort_values('year_added')\ndf_movie1['percent'] = df_movie1['count'].apply(lambda x : 100*x\/sum(df_movie1['count']))\n\nt1 = go.Scatter(x=df_movie1['year_added'], y=df_movie1[\"count\"], name=\"Movies\", marker=dict(color=\"royalblue\"))\nt2 = go.Scatter(x=df_tv1['year_added'], y=df_tv1[\"count\"], name=\"TV Shows\", marker=dict(color=\"red\"))\nt3 = go.Scatter(x=df_content['year_added'], y=df_content[\"count\"], name=\"Total Contents\", marker=dict(color=\"gold\"))\n\ndata = [t1, t2, t3]\n\nlayout = go.Layout(title=\"Content added over the years\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()\n","031bfde8":"from wordcloud import WordCloud, STOPWORDS\n\ntext = ' '.join(df_movie['listed_in'])\n\nplt.rcParams['figure.figsize'] = (12,12)\nwordcloud = WordCloud(background_color = 'black',colormap='vlag', width = 1200,  height = 1200, max_words = 121).generate(text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","b401903c":"from wordcloud import WordCloud, STOPWORDS\n\ntext = ' '.join(df_tv['listed_in'])\n\nplt.rcParams['figure.figsize'] = (12,12)\nwordcloud = WordCloud(background_color = 'lightblue', width = 1200,  height = 1200, max_words = 121).generate(text)\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","15ece2da":"**Observation:** Using this matrix we can  quickly find the pattern of 'missingness' in the dataset. From the above visualisation we can observe that \"director\" has a peculiar pattern that stands out.\"cast\" and \"country\" have a similar pattern of missing values while column \"date_added\" shows a different pattern.","b7a5f663":"**Observation:** The missing values are in:\n\n* \"director\": Very less information-not needed for the analysis so I will be dropping this\n* \"cast\": there are too many diferent values so I will be dropping this\n* \"country\": Important variable hence we need to fix this\n* \"date_added\": there are just a few cases, so lets scrap them\n* \"rating\": there are just a few cases, so lets try finding thir replacements on the internet","90472f4b":"**Observation:**\n\n* The growth in number of movies on netflix is much higher than that of TV shows\n* About 1200 new movies were added in both 2018 and 2019\n* The growth in content started from 2013","069a132c":"**Observation:** There are much more movies for Older Kids, Teens and Mature than there are for the Little Kids!","aeae6455":"**Observation:** As per our earlier analysis, we can see that the 'director' column has the highest whereas 'rating' column has the lowest number of missing values!","c84d1d03":"**Observation:** TV Show are more for the kids and teens.\n","b90dabc1":"# 1.3 About the dataset\n\nnetflix_titles.csv: The csv file contains information about the various movies and the data related to them:\n\n* Show ID - unique ID of that particular show\n* Type - type of the video - movie, TV Series etc.\n* Title - title of the video\n* Director - director name\n* Cast - cast members \n* Country - country where it was released\n* Data Added - date when it became live on NETFLIX\n* Release Year - year of release\n* Rating - user rating\n* Duration - duration of the movie, TV Series etc.\n* Listed in - Genre information\n* Description - concise plot of the series","1a8ae783":"**Observation:** Nearly 2\/3rd of the content on netflix are movies while the rest are TV Show","e9002c12":"**Observation:** When looked upon the 'country' column closely, we see that there are some entry where it has multiple values. so I think I will add a new column with just the first one so we can check which regions have more productions","e3d14b68":"**Observation:** There are almost half the number of TV Shows than there are Movies on Netflix","1979490b":"**Observation:** This looks so much more clear. Using the target_ages column we can easily make out the intended audiance for a particular movie!","8ae7214f":"Such an interesting output! I've used wordcloud for the first time. Lets try the same for TV Show as well!","3548b9e1":"> Now let us try doing some pictorial representaion of our dataset","99b49219":"**Observation:** We have null values left only in the 'country' column. Let's try to fix it with the value which occurs the most number of times i.e. MODE","67b39c58":"**Observation:** All the missing values in the ratings column has been fixed!","30bba073":"**Note:** So, I've referred to two notebooks for this analysis:\n\n* https:\/\/www.kaggle.com\/sauravjoshi23\/netflix-eda-and-data-visualization-plotly\n* https:\/\/www.kaggle.com\/bhartiprasad17\/netflix-movies-and-tv-shows-eda\n\nThanks to the authors for creating such a wonderful notebook! I really learnt a lot from them.","ab3a6cbd":"# 1.2 Problem Statement\n\nSome of the interesting questions (tasks) which can be performed on this dataset -\n\n1. Understanding what content is available in different countries\n2. Identifying similar content by matching text-based features\n3. Network analysis of Actors \/ Directors and find interesting insights\n4. Is Netflix has increasingly focusing on TV rather than movies in recent years.\n","87645515":"We can clearly see that there are few columns which have null values","7a4fed9d":"**Observation:** This bar chart gives you an idea about how many missing values are there in each column. \"director\" has the most missing value followed by \"cast\" and \"country\". There are few missing value in \"date_added\" and \"rating\".","3427a246":"**Observation:** Wow! Earlier there were 681 unique countries and we have reduced them to just 81. Such an amazing work!","8e2822ad":"**Observation:** As I already assumed, all the show IDs and Titles are unique whereas others might have been repeated once or more times!","b3c37e8f":"**Observation:**\n* show_id, type, title, country, date_added, rating, duration, listed_in, description, principal_country are of object data type\n* Only release_year is of int data type","19f69394":"# 1.1 Introduction\n\n* This dataset consists of tv shows and movies available on Netflix as of 2019. \n* The dataset is collected from Flixable which is a third-party Netflix search engine.\n* In 2018, they released an interesting report which shows that the number of TV shows on Netflix has nearly tripled since 2010. \n* The streaming service\u2019s number of movies has decreased by more than 2,000 titles since 2010, while its number of TV shows has nearly tripled. \n* It will be interesting to explore what all other insights can be obtained from the same dataset.\n* Integrating this dataset with other external datasets such as IMDB ratings, rotten tomatoes can also provide many interesting findings.","da7307ef":"**Observation:** Most of the movies were released in the year 2017 followed by 2018 and 2016.","0942c73e":"**Loading the Dataset**\n\n","f352852f":"**Observation:** Most of the TV Shows were released in 2020 followed by 2019 and 2018\n"}}