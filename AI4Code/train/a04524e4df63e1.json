{"cell_type":{"859edda5":"code","0e57974b":"code","8173cf6c":"code","6d329b49":"code","e74d8955":"code","a89fb7ab":"code","9bd50af6":"code","42b40ac8":"code","c9e97e3d":"code","6e854b93":"code","c6489938":"code","616eec06":"code","87faa195":"code","20e57b61":"code","49206adf":"code","5ca62450":"code","7067f349":"code","0cd22237":"code","77369333":"code","9e5ac5fb":"code","5b5a83bb":"code","3a56df91":"code","784e067b":"code","0049b0cd":"code","8500852e":"code","0bd3aaac":"code","b81f598a":"code","1926353d":"code","451603e5":"code","87adc75c":"code","2050a80b":"code","abcb1498":"code","9b922ebb":"code","710bfe1d":"code","5ace0611":"code","b65f961b":"code","6c3dd14f":"code","698ba071":"markdown","c4153530":"markdown","0d798623":"markdown"},"source":{"859edda5":"\nimport numpy as np\nimport pandas as pd \nimport sklearn\nimport scipy.sparse \nimport lightgbm as lgb\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport pickle\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.ensemble import RandomForestRegressor\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline \n\npd.set_option('display.max_rows', 600)\npd.set_option('display.max_columns', 50)\nsns.set(rc={'figure.figsize':(20, 10)})","0e57974b":"for p in [np, pd, sklearn, scipy, lgb, sns]:\n    print (p.__name__, p.__version__)","8173cf6c":"items_cat = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/item_categories.csv')\nitems = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/items.csv')\nsales = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/sales_train.csv')\nshops = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/shops.csv')\ntest = pd.read_csv('..\/input\/competitive-data-science-predict-future-sales\/test.csv')","6d329b49":"sns.set_context(\"talk\", font_scale=1.4)\nsales_month = pd.DataFrame(sales.groupby(['date_block_num']).sum().item_cnt_day).reset_index()\nsales_month.columns = ['date_block_num', 'sum_items_sold']\nsns.barplot(x ='date_block_num', y='sum_items_sold', \n            data=sales_month.reset_index());\nplt.plot(sales_month.sum_items_sold)\nplt.title('Distribution of the sum of sales per month')\ndel sales_month","e74d8955":"comb_shop_item = pd.DataFrame(sales[['date_block_num', 'shop_id', \n                                     'item_id']].drop_duplicates().groupby('date_block_num').size()).reset_index()\ncomb_shop_item.columns = ['date_block_num', 'item-shop_comb']\nsns.barplot(x ='date_block_num', y='item-shop_comb', data=comb_shop_item);\nplt.plot(comb_shop_item['item-shop_comb']);\nplt.title('Number of combinations shop-it with sales per month')\ndel comb_shop_item","a89fb7ab":"sns.set_context(\"talk\", font_scale=1.4)\nsales_item_id = pd.DataFrame(sales.groupby(['item_id']).sum().item_cnt_day)\nplt.xlabel('item id')\nplt.ylabel('sales')\nplt.plot(sales_item_id);","9bd50af6":"tuples_df = pd.Series(list(sales[['item_id', 'shop_id']].itertuples(index = False, name = None)))\ntuples_test = pd.Series(list(test[['item_id', 'shop_id']].itertuples(index = False, name = None)))\nprint(str(round(tuples_df.isin(tuples_test).sum()\/len(tuples_df),2)*100)+'%')","42b40ac8":"sales['item_cnt_day'].plot()","c9e97e3d":"sales = sales[sales['item_price'] < 100000]\nsales = sales[sales['item_cnt_day'] < 1000]","6e854b93":"from itertools import product\nindex_cols = ['shop_id', 'item_id', 'date_block_num']\n\n# Compute all shop and item combinations\ngrid = []\nfor block_num in sales['date_block_num'].unique():\n    cur_shops = sales.loc[sales['date_block_num'] == block_num, 'shop_id'].unique()\n    cur_items = sales.loc[sales['date_block_num'] == block_num, 'item_id'].unique()\n    grid.append(np.array(list(product(*[cur_shops, cur_items, [block_num]])),dtype='int32'))\ngrid = pd.DataFrame(np.vstack(grid), columns = index_cols,dtype=np.int32)","c6489938":"grid.head()","616eec06":"sales_in_month = sales.groupby(['date_block_num','shop_id','item_id']).agg({'item_cnt_day': 'sum','item_price': np.mean}).reset_index()","87faa195":"sales_in_month.head()","20e57b61":"sales_by_item_id_for_last_val = sales_in_month.groupby('item_id').last()","49206adf":"month_34_sales = test.copy()","5ca62450":"def fill_price(item_id):\n    if item_id in sales_by_item_id_for_last_val.index:\n        return sales_by_item_id_for_last_val.loc[item_id]['item_price']\n    else:\n        return sales_by_item_id_for_last_val['item_price'].median()","7067f349":"month_34_sales['date_block_num'] = 34\nmonth_34_sales['item_price'] = month_34_sales['item_id'].apply(fill_price)\nmonth_34_sales['item_cnt_day'] = 0\nmonth_34_sales = month_34_sales.drop(columns=['ID'])","0cd22237":"month_34_sales.head()","77369333":"sales_in_month = pd.merge(grid, sales_in_month, on=['date_block_num','shop_id','item_id'], how='left').fillna(0)","9e5ac5fb":"sales_in_month.rename({'item_cnt_day': 'item_cnt_month'}, axis='columns', inplace=True)\nmonth_34_sales.rename({'item_cnt_day': 'item_cnt_month'}, axis='columns', inplace=True)\nmonth_34_sales = month_34_sales.reindex(columns=sales_in_month.columns)","5b5a83bb":"month_34_sales.head()","3a56df91":"sales_in_month = sales_in_month.append(month_34_sales)","784e067b":"sales_in_month.head()","0049b0cd":"sales_in_month = pd.merge(sales_in_month, items, on=['item_id'], how='left')","8500852e":"sales_in_month.head()","0bd3aaac":"id_types = ['item_id', 'shop_id', 'item_category_id']\nencoding_methods = [('item_price', np.mean, 'mean'), ('item_cnt_day', np.sum, 'sum'), ('item_cnt_day', np.mean, 'mean')]\nsales_with_item_info = pd.merge(sales, items, on=['item_id'], how='left')\n\nfor id_type in id_types:\n    for column_id, agg, agg_type in encoding_methods:\n        new_df = sales_with_item_info.groupby([id_type, 'date_block_num']).aggregate(agg).reset_index()[[column_id, id_type, 'date_block_num']]\n        new_df.columns = [id_type + '_' + agg_type + '_' + column_id, id_type, 'date_block_num']\n        sales_in_month = pd.merge(sales_in_month, new_df, on=['date_block_num', id_type], how='left')","b81f598a":"sales_in_month.head()","1926353d":"lag_features = ['item_id_mean_item_price',\n 'item_id_sum_item_cnt_day',\n 'item_id_mean_item_cnt_day',\n 'shop_id_mean_item_price',\n 'shop_id_sum_item_cnt_day',\n 'shop_id_mean_item_cnt_day',\n 'item_category_id_mean_item_price',\n 'item_category_id_sum_item_cnt_day',\n 'item_category_id_mean_item_cnt_day',\n 'item_cnt_month']","451603e5":"lags = [1, 6, 12]","87adc75c":"for lag in lags:\n    sales_lags = sales_in_month.copy()\n    sales_lags.date_block_num += lag\n    sales_lags = sales_lags[['date_block_num','shop_id','item_id'] + lag_features]\n    sales_lags.columns = ['date_block_num','shop_id','item_id'] + [lag_feat + '_' + str(lag) + 'months_ago' for lag_feat in lag_features]\n    sales_in_month = pd.merge(sales_in_month, sales_lags, on=['date_block_num','shop_id','item_id'], how='left')","2050a80b":"for feature in sales_in_month.columns:\n    if 'item_cnt' in feature:\n        sales_in_month[feature] = sales_in_month[feature].fillna(0)\n    elif 'item_price' in feature:\n        sales_in_month[feature] = sales_in_month[feature].fillna(sales_in_month[feature].median())","abcb1498":"sales_in_month.head()","9b922ebb":"sales_in_month = sales_in_month[sales_in_month['date_block_num'] > 12]","710bfe1d":"unused_cols = lag_features[:-1] + ['item_name', 'item_price']","5ace0611":"sales_in_month['item_cnt_month'] = sales_in_month['item_cnt_month'].clip(0, 40)","b65f961b":"x_train = sales_in_month[sales_in_month['date_block_num'] < 33].drop(unused_cols, axis=1)\nx_cv = sales_in_month[sales_in_month['date_block_num'] == 33].drop(unused_cols, axis=1)\nx_test = sales_in_month[sales_in_month['date_block_num'] == 34].drop(unused_cols, axis=1)","6c3dd14f":"x_train.head()","698ba071":"# Data Leakeage","c4153530":"# EDA","0d798623":" Only 42% of the combinations between items and shops appears in the test set"}}