{"cell_type":{"7fdbb4a5":"code","e1e3ef79":"code","d0ac9f21":"code","8f282ca8":"code","a7634993":"code","f485c5ec":"code","46e16576":"code","049b9d58":"code","b4d20b51":"code","9765f4c5":"code","df1832e9":"code","8452961e":"code","2803ac10":"code","6a25ff59":"code","0da2c323":"code","d281f888":"code","4f7d7e1f":"markdown","6429d873":"markdown","9d76c41e":"markdown","62e192c2":"markdown","c58587e2":"markdown","5dc4bdc0":"markdown","8ef3d34c":"markdown","c1923c0f":"markdown","4b96f424":"markdown","6ed63d90":"markdown","894487aa":"markdown","5b0c81f6":"markdown","4defde9e":"markdown","d9f4e25a":"markdown","77d5426a":"markdown","98c517c9":"markdown","4863cc6a":"markdown","727a89cc":"markdown"},"source":{"7fdbb4a5":"# utilities\nimport re\nimport pickle\nimport numpy as np\nimport pandas as pd\n\n# plotting\nimport seaborn as sns\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n# nltk\nfrom nltk.stem import WordNetLemmatizer\n\n# sklearn\nfrom sklearn.svm import LinearSVC\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import confusion_matrix, classification_report","e1e3ef79":"# Importing the dataset\nDATASET_COLUMNS  = [\"sentiment\", \"ids\", \"date\", \"flag\", \"user\", \"text\"]\nDATASET_ENCODING = \"ISO-8859-1\"\ndataset = pd.read_csv('..\/input\/sentiment140\/training.1600000.processed.noemoticon.csv',\n                      encoding=DATASET_ENCODING , names=DATASET_COLUMNS)\n\n# Removing the unnecessary columns.\ndataset = dataset[['sentiment','text']]\n# Replacing the values to ease understanding.\ndataset['sentiment'] = dataset['sentiment'].replace(4,1)\n\n# Plotting the distribution for dataset.\nax = dataset.groupby('sentiment').count().plot(kind='bar', title='Distribution of data',\n                                               legend=False)\nax.set_xticklabels(['Negative','Positive'], rotation=0)\n\n# Storing data in lists.\ntext, sentiment = list(dataset['text']), list(dataset['sentiment'])","d0ac9f21":"# Defining dictionary containing all emojis with their meanings.\nemojis = {':)': 'smile', ':-)': 'smile', ';d': 'wink', ':-E': 'vampire', ':(': 'sad', \n          ':-(': 'sad', ':-<': 'sad', ':P': 'raspberry', ':O': 'surprised',\n          ':-@': 'shocked', ':@': 'shocked',':-$': 'confused', ':\\\\': 'annoyed', \n          ':#': 'mute', ':X': 'mute', ':^)': 'smile', ':-&': 'confused', '$_$': 'greedy',\n          '@@': 'eyeroll', ':-!': 'confused', ':-D': 'smile', ':-0': 'yell', 'O.o': 'confused',\n          '<(-_-)>': 'robot', 'd[-_-]b': 'dj', \":'-)\": 'sadsmile', ';)': 'wink', \n          ';-)': 'wink', 'O:-)': 'angel','O*-)': 'angel','(:-D': 'gossip', '=^.^=': 'cat'}\n\n## Defining set containing all stopwords in english.\nstopwordlist = ['a', 'about', 'above', 'after', 'again', 'ain', 'all', 'am', 'an',\n             'and','any','are', 'as', 'at', 'be', 'because', 'been', 'before',\n             'being', 'below', 'between','both', 'by', 'can', 'd', 'did', 'do',\n             'does', 'doing', 'down', 'during', 'each','few', 'for', 'from', \n             'further', 'had', 'has', 'have', 'having', 'he', 'her', 'here',\n             'hers', 'herself', 'him', 'himself', 'his', 'how', 'i', 'if', 'in',\n             'into','is', 'it', 'its', 'itself', 'just', 'll', 'm', 'ma',\n             'me', 'more', 'most','my', 'myself', 'now', 'o', 'of', 'on', 'once',\n             'only', 'or', 'other', 'our', 'ours','ourselves', 'out', 'own', 're',\n             's', 'same', 'she', \"shes\", 'should', \"shouldve\",'so', 'some', 'such',\n             't', 'than', 'that', \"thatll\", 'the', 'their', 'theirs', 'them',\n             'themselves', 'then', 'there', 'these', 'they', 'this', 'those', \n             'through', 'to', 'too','under', 'until', 'up', 've', 'very', 'was',\n             'we', 'were', 'what', 'when', 'where','which','while', 'who', 'whom',\n             'why', 'will', 'with', 'won', 'y', 'you', \"youd\",\"youll\", \"youre\",\n             \"youve\", 'your', 'yours', 'yourself', 'yourselves']","8f282ca8":"def preprocess(textdata):\n    processedText = []\n    \n    # Create Lemmatizer and Stemmer.\n    wordLemm = WordNetLemmatizer()\n    \n    # Defining regex patterns.\n    urlPattern        = r\"((http:\/\/)[^ ]*|(https:\/\/)[^ ]*|( www\\.)[^ ]*)\"\n    userPattern       = '@[^\\s]+'\n    alphaPattern      = \"[^a-zA-Z0-9]\"\n    sequencePattern   = r\"(.)\\1\\1+\"\n    seqReplacePattern = r\"\\1\\1\"\n    \n    for tweet in textdata:\n        tweet = tweet.lower()\n        \n        # Replace all URls with 'URL'\n        tweet = re.sub(urlPattern,' URL',tweet)\n        # Replace all emojis.\n        for emoji in emojis.keys():\n            tweet = tweet.replace(emoji, \"EMOJI\" + emojis[emoji])        \n        # Replace @USERNAME to 'USER'.\n        tweet = re.sub(userPattern,' USER', tweet)        \n        # Replace all non alphabets.\n        tweet = re.sub(alphaPattern, \" \", tweet)\n        # Replace 3 or more consecutive letters by 2 letter.\n        tweet = re.sub(sequencePattern, seqReplacePattern, tweet)\n\n        tweetwords = ''\n        for word in tweet.split():\n            # Checking if the word is a stopword.\n            #if word not in stopwordlist:\n            if len(word)>1:\n                # Lemmatizing the word.\n                word = wordLemm.lemmatize(word)\n                tweetwords += (word+' ')\n            \n        processedText.append(tweetwords)\n        \n    return processedText","a7634993":"import time\nt = time.time()\nprocessedtext = preprocess(text)\nprint(f'Text Preprocessing complete.')\nprint(f'Time Taken: {round(time.time()-t)} seconds')","f485c5ec":"data_neg = processedtext[:800000]\nplt.figure(figsize = (20,20))\nwc = WordCloud(max_words = 1000 , width = 1600 , height = 800,\n               collocations=False).generate(\" \".join(data_neg))\nplt.imshow(wc)","46e16576":"data_pos = processedtext[800000:]\nwc = WordCloud(max_words = 1000 , width = 1600 , height = 800,\n              collocations=False).generate(\" \".join(data_pos))\nplt.figure(figsize = (20,20))\nplt.imshow(wc)","049b9d58":"X_train, X_test, y_train, y_test = train_test_split(processedtext, sentiment,\n                                                    test_size = 0.05, random_state = 0)\nprint(f'Data Split done.')","b4d20b51":"vectoriser = TfidfVectorizer(ngram_range=(1,2), max_features=500000)\nvectoriser.fit(X_train)\nprint(f'Vectoriser fitted.')\nprint('No. of feature_words: ', len(vectoriser.get_feature_names()))","9765f4c5":"X_train = vectoriser.transform(X_train)\nX_test  = vectoriser.transform(X_test)\nprint(f'Data Transformed.')","df1832e9":"def model_Evaluate(model):\n    \n    # Predict values for Test dataset\n    y_pred = model.predict(X_test)\n\n    # Print the evaluation metrics for the dataset.\n    print(classification_report(y_test, y_pred))\n    \n    # Compute and plot the Confusion matrix\n    cf_matrix = confusion_matrix(y_test, y_pred)\n\n    categories  = ['Negative','Positive']\n    group_names = ['True Neg','False Pos', 'False Neg','True Pos']\n    group_percentages = ['{0:.2%}'.format(value) for value in cf_matrix.flatten() \/ np.sum(cf_matrix)]\n\n    labels = [f'{v1}\\n{v2}' for v1, v2 in zip(group_names,group_percentages)]\n    labels = np.asarray(labels).reshape(2,2)\n\n    sns.heatmap(cf_matrix, annot = labels, cmap = 'Blues',fmt = '',\n                xticklabels = categories, yticklabels = categories)\n\n    plt.xlabel(\"Predicted values\", fontdict = {'size':14}, labelpad = 10)\n    plt.ylabel(\"Actual values\"   , fontdict = {'size':14}, labelpad = 10)\n    plt.title (\"Confusion Matrix\", fontdict = {'size':18}, pad = 20)","8452961e":"BNBmodel = BernoulliNB(alpha = 2)\nBNBmodel.fit(X_train, y_train)\nmodel_Evaluate(BNBmodel)","2803ac10":"SVCmodel = LinearSVC()\nSVCmodel.fit(X_train, y_train)\nmodel_Evaluate(SVCmodel)","6a25ff59":"LRmodel = LogisticRegression(C = 2, max_iter = 1000, n_jobs=-1)\nLRmodel.fit(X_train, y_train)\nmodel_Evaluate(LRmodel)","0da2c323":"file = open('vectoriser-ngram-(1,2).pickle','wb')\npickle.dump(vectoriser, file)\nfile.close()\n\nfile = open('Sentiment-LR.pickle','wb')\npickle.dump(LRmodel, file)\nfile.close()\n\nfile = open('Sentiment-BNB.pickle','wb')\npickle.dump(BNBmodel, file)\nfile.close()","d281f888":"def load_models():\n    '''\n    Replace '..path\/' by the path of the saved models.\n    '''\n    \n    # Load the vectoriser.\n    file = open('..path\/vectoriser-ngram-(1,2).pickle', 'rb')\n    vectoriser = pickle.load(file)\n    file.close()\n    # Load the LR Model.\n    file = open('..path\/Sentiment-LRv1.pickle', 'rb')\n    LRmodel = pickle.load(file)\n    file.close()\n    \n    return vectoriser, LRmodel\n\ndef predict(vectoriser, model, text):\n    # Predict the sentiment\n    textdata = vectoriser.transform(preprocess(text))\n    sentiment = model.predict(textdata)\n    \n    # Make a list of text with sentiment.\n    data = []\n    for text, pred in zip(text, sentiment):\n        data.append((text,pred))\n        \n    # Convert the list into a Pandas DataFrame.\n    df = pd.DataFrame(data, columns = ['text','sentiment'])\n    df = df.replace([0,1], [\"Negative\",\"Positive\"])\n    return df\n\nif __name__==\"__main__\":\n    # Loading the models.\n    #vectoriser, LRmodel = load_models()\n    \n    # Text to classify should be in a list.\n    text = [\"I hate twitter\",\n            \"May the Force be with you.\",\n            \"Mr. Stark, I don't feel so good\"]\n    \n    df = predict(vectoriser, LRmodel, text)\n    print(df.head())","4f7d7e1f":"### <a name=\"p8-3\">Logistic Regression Model<\/a>","6429d873":"### <a name=\"p7\">Tranforming the dataset<\/a>\nTransforming the **X_train** and **X_test** dataset into matrix of **TF-IDF Features** by using the **TF-IDF Vectoriser**. This datasets will be used to train the model and test against it.","9d76c41e":"## <a name=\"p6\">TF-IDF Vectoriser<\/a>\n**TF-IDF indicates what the importance of the word is in order to understand the document or dataset.** Let us understand with an example. Suppose you have a dataset where students write an essay on the topic, My House. In this dataset, the word a appears many times; it\u2019s a high frequency word compared to other words in the dataset. The dataset contains other words like home, house, rooms and so on that appear less often, so their frequency are lower and they carry more information compared to the word. This is the intuition behind TF-IDF.\n\n**TF-IDF Vectoriser** converts a collection of raw documents to a **matrix of TF-IDF features**. The **Vectoriser** is usually trained on only the **X_train** dataset. \n\n**ngram_range**  is the range of number of words in a sequence. *[e.g \"very expensive\" is a 2-gram that is considered as an extra feature separately from \"very\" and \"expensive\" when you have a n-gram range of (1,2)]*\n\n**max_features** specifies the number of features to consider. *[Ordered by feature frequency across the corpus]*.","62e192c2":"### Word-Cloud for Negative tweets.","c58587e2":"### Evaluate Model Function","5dc4bdc0":"### <a name=\"p8-2\">LinearSVC Model<\/a>","8ef3d34c":"## <a name=\"p4\">Analysing the data<\/a>\nNow we're going to analyse the preprocessed data to get an understanding of it. We'll plot **Word Clouds** for **Positive and Negative** tweets from our dataset and see which words occur the most.","c1923c0f":"## <a name=\"p3\">Preprocess Text<\/a>\n**Text Preprocessing** is traditionally an important step for **Natural Language Processing (NLP)** tasks. It transforms text into a more digestible form so that machine learning algorithms can perform better.\n\n**The Preprocessing steps taken are:**\n1. **Lower Casing:** Each text is converted to lowercase.\n2. **Replacing URLs:** Links starting with **\"http\" or \"https\" or \"www\"** are replaced by **\"URL\"**.\n3. **Replacing Emojis:** Replace emojis by using a pre-defined dictionary containing emojis along with their meaning. *(eg: \":)\" to \"EMOJIsmile\")*\n4. **Replacing Usernames:** Replace @Usernames with word **\"USER\"**. *(eg: \"@Kaggle\" to \"USER\")*\n5. **Removing Non-Alphabets:** Replacing characters except Digits and Alphabets with a space.\n6. **Removing Consecutive letters:** 3 or more consecutive letters are replaced by 2 letters. *(eg: \"Heyyyy\" to \"Heyy\")*\n7. **Removing Short Words:** Words with length less than 2 are removed.\n8. **Removing Stopwords:** Stopwords are the English words which does not add much meaning to a sentence. They can safely be ignored without sacrificing the meaning of the sentence. *(eg: \"the\", \"he\", \"have\")*\n9. **Lemmatizing:** Lemmatization is the process of converting a word to its base form. *(e.g: \u201cGreat\u201d to \u201cGood\u201d)*","4b96f424":"## <a name=\"p10\">Using the Model.<\/a>\n\nTo use the model for **Sentiment Prediction** we need to import the **Vectoriser** and **LR Model** using **Pickle**.\n\nThe vectoriser can be used to transform data to matrix of TF-IDF Features.\nWhile the model can be used to predict the sentiment of the transformed Data.\nThe text whose sentiment has to be predicted however must be preprocessed.","6ed63d90":"We can clearly see that the **Logistic Regression Model** performs the best out of all the different models that we tried. It achieves nearly **82% accuracy** while classifying the sentiment of a tweet.\n\nAlthough it should also be noted that the **BernoulliNB Model** is the fastest to train and predict on. It also achieves **80% accuracy** while calssifying.","894487aa":"## Introduction\n\n* **Natural Language Processing (NLP):** The discipline of computer science, artificial intelligence and linguistics that is concerned with the creation of computational models that process and understand natural language. These include: making the computer understand the semantic grouping of words (e.g. cat and dog are semantically more similar than cat and spoon), text to speech, language translation and many more\n\n* **Sentiment Analysis:** It is the interpretation and classification of emotions (positive, negative and neutral) within text data using text analysis techniques. Sentiment analysis allows organizations to identify public sentiment towards certain words or topics.\n\nIn this notebook, we'll develop a **Sentiment Analysis model** to categorize a tweet as **Positive or Negative.**\n\n\n## Table of Contents\n1. [Importing dependencies](#p1)\n2. [Importing dataset](#p2)\n3. [Preprocessing Text](#p3)\n4. [Analysing data](#p4)\n5. [Splitting data](#p5)\n6. [TF-IDF Vectoriser](#p6)\n7. [Transforming Dataset](#p7)\n8. [Creating and Evaluating Models](#p8)\n    * [BernoulliNB Model](#p8-1)\n    * [LinearSVC Model](#p8-2)\n    * [Logistic Regression Model](#p8-3)\n9. [Saving the Models](#p9)\n10. [Using the Model](#p10)\n\n## <a name=\"p1\">Importing Dependencies<\/a>","5b0c81f6":"### <a name=\"p8-1\">BernoulliNB Model<\/a>","4defde9e":"### Word-Cloud for Positive tweets.","d9f4e25a":"## <a name=\"p5\">Splitting the Data<\/a>\nThe Preprocessed Data is divided into 2 sets of data: \n* **Training Data:** The dataset upon which the model would be trained on. Contains 95% data.\n* **Test Data:** The dataset upon which the model would be tested against. Contains 5% data.","77d5426a":"## <a name=\"p9\">Saving the Models<\/a>\nWe're using **PICKLE** to save **Vectoriser and BernoulliNB, Logistic Regression Model** for later use.","98c517c9":"## <a name=\"p8\">Creating and Evaluating Models<\/a>\n\nWe're creating 3 different types of model for our sentiment analysis problem: \n* **Bernoulli Naive Bayes (BernoulliNB)**\n* **Linear Support Vector Classification (LinearSVC)**\n* **Logistic Regression (LR)**\n\nSince our dataset is not **skewed**, i.e. it has equal number of **Positive and Negative** Predictions. We're choosing **Accuracy** as our evaluation metric. Furthermore, we're plotting the **Confusion Matrix** to get an understanding of how our model is performing on both classification types.","4863cc6a":"#### <span style=\"color:red\"> **If you found this notebook helpful, please drop a UPVOTE. An upvote encourages us to keep writing publishing more notebooks to help others!** <\/span>.","727a89cc":"## <a name=\"p2\">Importing dataset<\/a>\nThe dataset being used is the **sentiment140 dataset**. It contains 1,600,000 tweets extracted using the **Twitter API**. The tweets have been annotated **(0 = Negative, 4 = Positive)** and they can be used to detect sentiment.\n \n*[The training data isn't perfectly categorised as it has been created by tagging the text according to the emoji present. So, any model built using this dataset may have lower than expected accuracy, since the dataset isn't perfectly categorised.]*\n\n**It contains the following 6 fields:**\n1. **sentiment**: the polarity of the tweet *(0 = negative, 4 = positive)*\n2. **ids**: The id of the tweet *(2087)*\n3. **date**: the date of the tweet *(Sat May 16 23:58:44 UTC 2009)*\n4. **flag**: The query (lyx). If there is no query, then this value is NO_QUERY.\n5. **user**: the user that tweeted *(robotickilldozr)*\n6. **text**: the text of the tweet *(Lyx is cool)*\n\nWe require only the **sentiment** and **text** fields, so we discard the rest.\n\nFurthermore, we're changing the **sentiment** field so that it has new values to reflect the sentiment. **(0 = Negative, 1 = Positive)**"}}