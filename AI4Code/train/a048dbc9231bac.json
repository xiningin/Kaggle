{"cell_type":{"94f4e6db":"code","c7b76f70":"code","5abda9b6":"code","71c95d50":"code","6bd9e5d2":"code","70ae77f5":"code","da8a14df":"code","d93754ec":"code","4978ac36":"code","523f802f":"code","2fa4ac28":"code","aa106fc4":"code","442a31aa":"code","207d54c9":"code","51460604":"code","be9f0fef":"code","03c612b3":"code","16d40b1d":"code","329bf799":"code","9aa9abc4":"code","41ccc5cf":"code","6ddfbc1d":"code","9e230fc8":"code","1038f5be":"code","bbdcede5":"code","2107c055":"code","ca03e643":"code","5d1cf2ae":"code","47825339":"code","4e37579c":"markdown","c8aae3d5":"markdown","10553ac3":"markdown","8bcede80":"markdown","0cb256cf":"markdown","2caef722":"markdown","2e84a8b7":"markdown"},"source":{"94f4e6db":"%matplotlib inline\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport cudf #Rapids\n\n#pd.set_option('display.max_columns', None)\n#pd.set_option('display.max_rows', None)\n\nfrom tqdm import tqdm\nfrom glob import glob\nimport gc\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import class_weight\nfrom sklearn.metrics import classification_report\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom IPython.display import display\n\nplt.rcParams[\"figure.figsize\"] = (12,8)\nplt.rcParams['axes.titlesize'] = 16\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nfrom time import time, strftime, gmtime\nstart = time()\nimport datetime\nprint(str(datetime.datetime.now()))","c7b76f70":"base_dir = '\/kaggle\/input\/widsdatathon2021\/'","5abda9b6":"%%time\ntrain = cudf.read_csv(base_dir + 'TrainingWiDS2021.csv')\nprint(train.shape)\ntrain.head()","71c95d50":"test = cudf.read_csv(base_dir + 'UnlabeledWiDS2021.csv')\nprint(test.shape)\ntest.head()","6bd9e5d2":"train.drop('Unnamed: 0', axis = 1, inplace = True)\ntest.drop('Unnamed: 0', axis = 1, inplace = True)","70ae77f5":"train.describe().T","da8a14df":"def features_to_drop(df):\n    nans = df.isna().sum().reset_index().sort_values(by = 0, ascending = False)\n    missing = nans[nans[0] != 0]\n    missing['drop_thres'] = (missing[0] \/ len(df)) * 100\n    to_drop = missing[missing['drop_thres'] > 50].to_pandas()\n    return to_drop['index'].values","d93754ec":"to_drop_train = features_to_drop(train)\nto_drop_test = features_to_drop(test)\nprint('There are {} columns to be dropped in train'.format(len(to_drop_train)))\nprint('There are {} columns to be dropped in train'.format(len(to_drop_test)))\n\nassert set(to_drop_train) == set(to_drop_test), 'Number of features mismatch'","4978ac36":"odd = next(iter(set(to_drop_test) - set(to_drop_train)))\nprint(odd)\nprint(f'NaNs % of {odd} in train: {train[odd].isna().sum() \/ len(train) * 100}')\ndrop_columns = to_drop_test\n\ndel to_drop_train, to_drop_test\ngc.collect()","523f802f":"train.drop(drop_columns, axis = 1, inplace = True)\ntest.drop(drop_columns, axis = 1, inplace = True)\ntrain.shape, test.shape","2fa4ac28":"train = train.to_pandas()\ntest = test.to_pandas()","aa106fc4":"target_col = 'diabetes_mellitus'\ntargets = train[target_col].copy()\n\nax = sns.countplot(train[target_col])\nfor p in ax.patches:\n        ax.annotate('{:.1f}%'.format(100 * p.get_height() \/ len(train)), (p.get_x() + 0.1, p.get_height() + 5))","442a31aa":"train_cat_cols = [c for c in train.columns if train[c].dtype == 'object']\ntest_cat_cols = [c for c in test.columns if test[c].dtype == 'object']\n\nprint(f'There are {len(train_cat_cols)} categorical features: {train_cat_cols}')\nprint(f'There are {len(test_cat_cols)} categorical features: {test_cat_cols}')\n\nassert set(train_cat_cols) == set(test_cat_cols), 'Categorical Features not same in train and test'\n\ncat_cols = train_cat_cols\n\ndel train_cat_cols, test_cat_cols\ngc.collect()","207d54c9":"for c in cat_cols:\n    ax = sns.countplot(c, data = train, hue = target_col)\n    plt.setp(ax.get_xticklabels(), rotation = 45)\n    for p in ax.patches:\n        ax.annotate('{:.1f}%'.format(100 * p.get_height() \/ len(train[c])), (p.get_x() + 0.1, p.get_height() + 5))\n    plt.title(c.upper())\n    plt.show()","51460604":"#Drop the target column from the trainset\n\ntrain_copy = train.copy()\n\ntrain.drop(target_col, axis = 1, inplace = True)","be9f0fef":"num_cols = set(train.columns) - set(cat_cols)\nprint(f'There are {len(num_cols)} numerical features in the dataset: \\n{sorted(num_cols)}')","03c612b3":"fig, ax = plt.subplots(1, 2)\nplt.suptitle('Distribution Plot of Age in Train and Test')\nsns.distplot(train['age'], ax = ax[0])\nsns.distplot(test['age'], ax = ax[1])","16d40b1d":"fig, ax = plt.subplots(1, 2)\nplt.suptitle('Distribution Plot of Age in Train and Test')\nsns.distplot(train['bmi'], ax = ax[0])\nsns.distplot(test['bmi'], ax = ax[1])","329bf799":"fig, ax = plt.subplots(1, 2)\nplt.suptitle('Distribution Plot of Weight in Train and Test')\nsns.distplot(train['weight'], ax = ax[0])\nsns.distplot(test['weight'], ax = ax[1])","9aa9abc4":"fig, ax = plt.subplots(1, 2)\nplt.suptitle('Distribution Plot of Height in Train and Test')\nsns.distplot(train['height'], ax = ax[0])\nsns.distplot(test['height'], ax = ax[1])","41ccc5cf":"int64_cols = [c for c in num_cols if train[c].dtype == 'int64']\nprint(f'There are {len(int64_cols)} features with int64 dtype: {int64_cols}')\n\n#Check their unique values\n\nfor c in int64_cols:\n    if len(train[c].value_counts().index.values) < 5:\n        cat_cols.append(c)\n        num_cols.remove(c)\n        print(f'{c.upper()}: {train[c].nunique()}, {test[c].nunique()}')\nprint(len(num_cols), len(cat_cols))","6ddfbc1d":"for c in num_cols:\n    print(f'{c.upper()}: {train[c].nunique()}, {test[c].nunique()}')","9e230fc8":"df_bin = train_copy[['hospital_id', 'encounter_id', 'gender', 'age', 'bmi', 'weight', 'height', 'diabetes_mellitus']].copy()\nbins = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]\ndf_bin['age_binned'] = pd.cut(df_bin['age'], bins)\ndf_bin.head()","1038f5be":"plt.suptitle('Diabetes among Male patients by age group')\nax = sns.countplot('age_binned', data = df_bin[df_bin['gender'] == 'M'], hue = 'diabetes_mellitus')\nfor p in ax.patches:\n        ax.annotate('{:.1f}%'.format(100 * p.get_height() \/ len(df_bin)), (p.get_x() + 0.1, p.get_height() + 5))","bbdcede5":"plt.suptitle('Diabetes among Female patients by age group')\nax = sns.countplot('age_binned', data = df_bin[df_bin['gender'] == 'F'], hue = 'diabetes_mellitus')\nfor p in ax.patches:\n        ax.annotate('{:.1f}%'.format(100 * p.get_height() \/ len(df_bin)), (p.get_x() + 0.1, p.get_height() + 5))","2107c055":"bins = [16, 18.5, 24.9, 29.9, 35]\ndf_bin['bmi_binned'] = pd.cut(df_bin['bmi'], bins)\ndf_bin.head()","ca03e643":"plt.suptitle('Diabetes among Male patients by BMI group')\nax = sns.countplot('bmi_binned', data = df_bin[df_bin['gender'] == 'M'], hue = 'diabetes_mellitus')\nfor p in ax.patches:\n        ax.annotate('{:.1f}%'.format(100 * p.get_height() \/ len(df_bin)), (p.get_x() + 0.1, p.get_height() + 5))","5d1cf2ae":"plt.suptitle('Diabetes among Female patients by BMI group')\nax = sns.countplot('bmi_binned', data = df_bin[df_bin['gender'] == 'F'], hue = 'diabetes_mellitus')\nfor p in ax.patches:\n        ax.annotate('{:.1f}%'.format(100 * p.get_height() \/ len(df_bin)), (p.get_x() + 0.1, p.get_height() + 5))","47825339":"finish = time()\nprint(strftime(\"%H:%M:%S\", gmtime(finish - start)))","4e37579c":"- _readmission_status_ has got only '0' value in both train and test - we may drop it\n- encounter_id_ seems to have index like values","c8aae3d5":"Test set has more older patients","10553ac3":" __WIP__","8bcede80":"Check the features with dtype = 'object'","0cb256cf":"There seems to be one column in test which has more NaNs but not in train","2caef722":"Let's check for other categorical features in dataset","2e84a8b7":"Check for features with more than 50% NaNs - to be dropped"}}