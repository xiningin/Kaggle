{"cell_type":{"1ad3b380":"code","b00746a3":"code","f3e4a16c":"code","b3e38e61":"code","5c6a109c":"code","44d65bdf":"code","01667d50":"code","6ef3c594":"code","4f2b43ee":"code","bfbbfba4":"code","90e365ff":"code","cb90f070":"code","f78cff8d":"code","624d3fbf":"code","c5a8e05d":"code","2fe57ea2":"code","eac77ad9":"code","f5ca0ae7":"code","81038f1e":"code","4a0a8e9c":"code","ca118ef3":"code","16ca6baf":"code","282bc9b6":"code","e8b6a320":"code","2525ecef":"code","f7327b05":"code","a6ead76a":"code","7b57c71e":"code","3c6471f7":"code","cbe069af":"code","9eddc5a2":"code","c57de84f":"code","1ed13968":"code","96097526":"code","afbd16d2":"code","0dbfa86d":"code","5e28adf6":"code","45554686":"code","71b93cc8":"code","da210d23":"code","38b4724c":"code","fc9aba2b":"code","7e645853":"code","5cee7821":"code","b1290adc":"code","4286b1fb":"code","dc1add7d":"code","73b18767":"code","c984d47c":"code","fb8cbf4e":"code","63296c11":"code","05844e6e":"code","2a4546a2":"code","af586591":"code","e8f09a34":"markdown","9166118d":"markdown","698dd08c":"markdown","0953ec2c":"markdown","995409e2":"markdown","6a11ce62":"markdown","18af5b57":"markdown","37714583":"markdown","b7007eec":"markdown","a543be58":"markdown","666d07e0":"markdown","fc0a7f47":"markdown","c3ebb230":"markdown","7ba7f4ab":"markdown","6bc1e4e1":"markdown","3e1367e1":"markdown","428d438b":"markdown","8a7c2245":"markdown","5f764a48":"markdown","a220f090":"markdown","dc953404":"markdown","8addd1f7":"markdown","99bee374":"markdown","b8e4d7cb":"markdown","b2c7d824":"markdown","ae7a6011":"markdown","190e4237":"markdown","f877cf25":"markdown","a6062ec3":"markdown","9ffd57fc":"markdown","0d1bd31c":"markdown","cef6ec64":"markdown","47fcb8bf":"markdown","1e2ab247":"markdown","e5563a76":"markdown","77cd839e":"markdown","92638b59":"markdown","f26559e1":"markdown","25b9c5be":"markdown","fa041184":"markdown","169d5da6":"markdown","b08eb458":"markdown","8ce7f319":"markdown","9415dd15":"markdown","2d43c966":"markdown","db15fee4":"markdown","68d7e03d":"markdown","f97d8ec5":"markdown","eb958e68":"markdown","05e9908e":"markdown","065802cf":"markdown","2edb3d06":"markdown","5b1ea627":"markdown","0eb9cf00":"markdown","58fa4893":"markdown","81d89cb7":"markdown","ac350c2c":"markdown","a3979c6d":"markdown","8f67f1e3":"markdown","c2fb49f0":"markdown","217ef633":"markdown","5e52bae6":"markdown","c1455365":"markdown","d585708c":"markdown","8b9dfac2":"markdown","4bcc5800":"markdown","c6d5f673":"markdown","62dc425c":"markdown","01c966e8":"markdown","951cb413":"markdown","03e8b9ef":"markdown","46ea4a4b":"markdown","77980f6b":"markdown","4dd40e39":"markdown","e236f0ad":"markdown","d3b6b631":"markdown","95fe225a":"markdown","436bb543":"markdown","b37a38a9":"markdown"},"source":{"1ad3b380":"import numpy as np\nfrom sklearn.datasets import fetch_20newsgroups\nfrom sklearn import decomposition\nfrom scipy import linalg\nimport matplotlib.pyplot as plt","b00746a3":"%matplotlib inline\nnp.set_printoptions(suppress=True)","f3e4a16c":"categories = ['alt.atheism', 'talk.religion.misc', 'comp.graphics', 'sci.space']\nremove = ('headers', 'footers', 'quotes')\nnewsgroups_train = fetch_20newsgroups(subset='train', categories=categories, remove=remove)\nnewsgroups_test = fetch_20newsgroups(subset='test', categories=categories, remove=remove)","b3e38e61":"newsgroups_train.filenames.shape, newsgroups_train.target.shape","5c6a109c":"print(\"\\n\".join(newsgroups_train.data[:3]))","44d65bdf":"np.array(newsgroups_train.target_names)[newsgroups_train.target[:3]]","01667d50":"newsgroups_train.target[:10]","6ef3c594":"num_topics, num_top_words = 6, 8","4f2b43ee":"from sklearn.feature_extraction import stop_words\n\nsorted(list(stop_words.ENGLISH_STOP_WORDS))[:20]","bfbbfba4":"import nltk\nnltk.download('wordnet')","90e365ff":"from nltk import stem","cb90f070":"wnl = stem.WordNetLemmatizer()\nporter = stem.porter.PorterStemmer()","f78cff8d":"word_list = ['feet', 'foot', 'foots', 'footing']","624d3fbf":"[wnl.lemmatize(word) for word in word_list]","c5a8e05d":"[porter.stem(word) for word in word_list]","2fe57ea2":"import spacy","eac77ad9":"from spacy.lemmatizer import Lemmatizer\nlemmatizer = Lemmatizer()","f5ca0ae7":"[lemmatizer.lookup(word) for word in word_list]","81038f1e":"nlp = spacy.load(\"en_core_web_sm\")","4a0a8e9c":"sorted(list(nlp.Defaults.stop_words))[:20]","ca118ef3":"#Exercise:\n","16ca6baf":"#Exercise:\n","282bc9b6":"from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer","e8b6a320":"import nltk\n# nltk.download('punkt')","2525ecef":"# from nltk import word_tokenize\n\n# class LemmaTokenizer(object):\n#     def __init__(self):\n#         self.wnl = stem.WordNetLemmatizer()\n#     def __call__(self, doc):\n#         return [self.wnl.lemmatize(t) for t in word_tokenize(doc)]","f7327b05":"vectorizer = CountVectorizer(stop_words='english') #, tokenizer=LemmaTokenizer())","a6ead76a":"vectors = vectorizer.fit_transform(newsgroups_train.data).todense() # (documents, vocab)\nvectors.shape #, vectors.nnz \/ vectors.shape[0], row_means.shape","7b57c71e":"print(len(newsgroups_train.data), vectors.shape)","3c6471f7":"vocab = np.array(vectorizer.get_feature_names())","cbe069af":"vocab.shape","9eddc5a2":"vocab[7000:7020]","c57de84f":"%time U, s, Vh = linalg.svd(vectors, full_matrices=False)","1ed13968":"print(U.shape, s.shape, Vh.shape)","96097526":"s[:4]","afbd16d2":"np.diag(np.diag(s[:4]))","0dbfa86d":"#Exercise: confrim that U, s, Vh is a decomposition of `vectors`\n","5e28adf6":"#Exercise: Confirm that U, Vh are orthonormal\n","45554686":"plt.plot(s);","71b93cc8":"plt.plot(s[:10])","da210d23":"num_top_words=8\n\ndef show_topics(a):\n    top_words = lambda t: [vocab[i] for i in np.argsort(t)[:-num_top_words-1:-1]]\n    topic_words = ([top_words(t) for t in a])\n    return [' '.join(t) for t in topic_words]","38b4724c":"show_topics(Vh[:10])","fc9aba2b":"m,n=vectors.shape\nd=5  # num topics","7e645853":"clf = decomposition.NMF(n_components=d, random_state=1)\n\nW1 = clf.fit_transform(vectors)\nH1 = clf.components_","5cee7821":"show_topics(H1)","b1290adc":"vectorizer_tfidf = TfidfVectorizer(stop_words='english')\nvectors_tfidf = vectorizer_tfidf.fit_transform(newsgroups_train.data) # (documents, vocab)","4286b1fb":"newsgroups_train.data[10:20]","dc1add7d":"W1 = clf.fit_transform(vectors_tfidf)\nH1 = clf.components_","73b18767":"show_topics(H1)","c984d47c":"plt.plot(clf.components_[0])","fb8cbf4e":"clf.reconstruction_err_","63296c11":"%time u, s, v = np.linalg.svd(vectors, full_matrices=False)","05844e6e":"from sklearn import decomposition\nimport fbpca","2a4546a2":"%time u, s, v = decomposition.randomized_svd(vectors, 10)","af586591":"%time u, s, v = fbpca.pca(vectors, 10)","e8f09a34":"## Stop words, stemming, lemmatization","9166118d":"Latent Semantic Analysis (LSA) uses SVD.  You will sometimes hear topic modelling referred to as LSA.","698dd08c":"## Look at our data","0953ec2c":"We'll take a dataset of documents in several different categories, and find topics (consisting of groups of words) for them.  Knowing the actual categories helps us evaluate if the topics we find make sense.\n\nWe will try this with two different matrix factorizations: **Singular Value Decomposition (SVD)** and **Non-negative Matrix Factorization (NMF)**","995409e2":"The target attribute is the integer index of the category.","6a11ce62":"There is no single universal list of stop words.","18af5b57":"Confirm that U, V are orthonormal","37714583":"### Stop words","b7007eec":"#### Exercise: What stop words appear in spacy but not in sklearn?","a543be58":"Stemming and lemmatization are implementation dependent.","666d07e0":"#### Exercise: And what stop words are in sklearn but not spacy?","fc0a7f47":"[SentencePiece](https:\/\/github.com\/google\/sentencepiece) library from Google","c3ebb230":"### NMF in summary","7ba7f4ab":"#### Idea","6bc1e4e1":"We would clearly expect that the words that appear most frequently in one topic would appear less frequently in the other - otherwise that word wouldn't make a good choice to separate out the two topics. Therefore, we expect the topics to be **orthogonal**.\n\nThe SVD algorithm factorizes a matrix into one matrix with **orthogonal columns** and one with **orthogonal rows** (along with a diagonal matrix, which contains the **relative importance** of each factor).\n\n<img src=\"images\/svd_fb.png\" alt=\"\" style=\"width: 80%\"\/>\n(source: [Facebook Research: Fast Randomized SVD](https:\/\/research.fb.com\/fast-randomized-svd\/))\n\nSVD is an **exact decomposition**, since the matrices it creates are big enough to fully cover the original matrix. SVD is extremely widely used in linear algebra, and specifically in data science, including:\n\n- semantic analysis\n- collaborative filtering\/recommendations ([winning entry for Netflix Prize](https:\/\/datajobs.com\/data-science-repo\/Recommender-Systems-%5BNetflix%5D.pdf))\n- calculate Moore-Penrose pseudoinverse\n- data compression\n- principal component analysis","3e1367e1":"Stemming and lemmatization are language dependent.  Languages with more complex morphologies may show bigger benefits.  For example, Sanskrit has a very [large number of verb forms](https:\/\/en.wikipedia.org\/wiki\/Sanskrit_verbs). ","428d438b":"These were long considered standard techniques, but they can often **hurt** your performance **if using deep learning**. Stemming, lemmatization, and removing stop words all involve throwing away information.\n\nHowever, they can still be useful when working with simpler models.","8a7c2245":"We will use [scikit-learn's implementation of NMF](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.decomposition.NMF.html):","5f764a48":"<img src=\"images\/face_pca.png\" alt=\"PCA on faces\" style=\"width: 80%\"\/>\n\n(source: [NMF Tutorial](http:\/\/perso.telecom-paristech.fr\/~essid\/teach\/NMF_tutorial_ICME-2014.pdf))\n\nA more interpretable approach:\n\n<img src=\"images\/face_outputs.png\" alt=\"NMF on Faces\" style=\"width: 80%\"\/>\n\n(source: [NMF Tutorial](http:\/\/perso.telecom-paristech.fr\/~essid\/teach\/NMF_tutorial_ICME-2014.pdf))","a220f090":"#### Answer","dc953404":"<img src=\"images\/skomoroch.png\" alt=\"\" style=\"width: 65%\"\/>","8addd1f7":"Next, scikit learn has a method that will extract all the word counts for us.  In the next lesson, we'll learn how to write our own version of CountVectorizer, to see what's happening underneath the hood.","99bee374":"\"SVD is not nearly as famous as it should be.\" - Gilbert Strang","b8e4d7cb":"# Topic Modeling with NMF and SVD","b2c7d824":"Let's look at some of the data.  Can you guess which category these messages are in?","ae7a6011":"From [Intro to Information Retrieval](https:\/\/nlp.stanford.edu\/IR-book\/html\/htmledition\/dropping-common-terms-stop-words-1.html):\n\n*Some extremely common words which would appear to be of little value in helping select documents matching a user need are excluded from the vocabulary entirely. These words are called stop words.*\n\n*The general trend in IR systems over time has been from standard use of quite large stop lists (200-300 terms) to very small stop lists (7-12 terms) to no stop list whatsoever. Web search engines generally do not use stop lists.*","190e4237":"### TF-IDF","f877cf25":"### NMF from sklearn","a6062ec3":"Scikit Learn comes with a number of built-in datasets, as well as loading utilities to load several standard external datasets. This is a [great resource](http:\/\/scikit-learn.org\/stable\/datasets\/), and the datasets include Boston housing prices, face images, patches of forest, diabetes, breast cancer, and more.  We will be using the newsgroups dataset.\n\nNewsgroups are discussion groups on Usenet, which was popular in the 80s and 90s before the web really took off.  This dataset includes 18,000 newsgroups posts with 20 topics.  ","9ffd57fc":"### Additional Resources","0d1bd31c":"- [Face Decompositions](http:\/\/scikit-learn.org\/stable\/auto_examples\/decomposition\/plot_faces_decomposition.html#sphx-glr-auto-examples-decomposition-plot-faces-decomposition-py)\n- [Collaborative Filtering, eg movie recommendations](http:\/\/www.quuxlabs.com\/blog\/2010\/09\/matrix-factorization-a-simple-tutorial-and-implementation-in-python\/)\n- [Audio source separation](https:\/\/pdfs.semanticscholar.org\/cc88\/0b24791349df39c5d9b8c352911a0417df34.pdf)\n- [Chemistry](http:\/\/ieeexplore.ieee.org\/document\/1532909\/)\n- [Bioinformatics](https:\/\/bmcbioinformatics.biomedcentral.com\/articles\/10.1186\/s12859-015-0485-4) and [Gene Expression](https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC2623306\/)\n- Topic Modeling (our problem!)\n\n<img src=\"images\/nmf_doc.png\" alt=\"NMF on documents\" style=\"width: 80%\"\/>\n\n(source: [NMF Tutorial](http:\/\/perso.telecom-paristech.fr\/~essid\/teach\/NMF_tutorial_ICME-2014.pdf))","cef6ec64":"#### Advantages of randomized algorithms:","47fcb8bf":"Consider the most extreme case - reconstructing the matrix using an outer product of two vectors. Clearly, in most cases we won't be able to reconstruct the matrix exactly. But if we had one vector with the relative frequency of each vocabulary word out of the total word count, and one with the average number of words per document, then that outer product would be as close as we can get.\n\nNow consider increasing that matrices to two columns and two rows. The optimal decomposition would now be to cluster the documents into two groups, each of which has as different a distribution of words as possible to each other, but as similar as possible amongst the documents in the cluster. We will call those two groups \"topics\". And we would cluster the words into two groups, based on those which most frequently appear in each of the topics. ","1e2ab247":"fastai\/course-nlp","e5563a76":"### Spacy","77cd839e":"> #### Agradecimentos\n* C\u00f3digo Original: https:\/\/github.com\/fastai\/course-nlp, por [Rachel Thomas](https:\/\/www.kaggle.com\/mathrachel) e [Jeremy Howard](https:\/\/www.kaggle.com\/jhoward).\n* Curso Original: https:\/\/www.fast.ai\/2019\/07\/08\/fastai-nlp\/, por [Rachel Thomas](https:\/\/www.kaggle.com\/mathrachel), e [Jeremy Howard](https:\/\/www.kaggle.com\/jhoward).\n* Grupo de Estudo: https:\/\/contas.tcu.gov.br\/ords\/f?p=portal:detalhe:::::V:161124, organizado por [Erick Muzart](https:\/\/www.kaggle.com\/erickmuzart) e [Fernando Melo](https:\/\/www.kaggle.com\/nandobr).\n* Curso adaptado para o Kaggle em https:\/\/www.kaggle.com\/c\/nlpbsb por [Debora Reis](https:\/\/www.kaggle.com\/deborareis)\n* Tradu\u00e7\u00e3o por [Debora Reis](https:\/\/www.kaggle.com\/deborareis) e [Gustavo Silveira](https:\/\/www.kaggle.com\/gutaors) \n\n---","92638b59":"hint: definition of *perijove* is the point in the orbit of a satellite of Jupiter nearest the planet's center ","f26559e1":"Randomized SVD from Facebook's library fbpca:","25b9c5be":"## End","fa041184":"#### Shortcomings of classical algorithms for decomposition:","169d5da6":"## The problem","b08eb458":"#### Applications of NMF","8ce7f319":"## Truncated SVD","9415dd15":"#### Answer","2d43c966":"Rather than constraining our factors to be *orthogonal*, another idea would to constrain them to be *non-negative*. NMF is a factorization of a non-negative data set $V$: $$ V = W H$$ into non-negative matrices $W,\\; H$. Often positive factors will be **more easily interpretable** (and this is the reason behind NMF's popularity). \n\n<img src=\"images\/face_nmf.png\" alt=\"NMF on faces\" style=\"width: 80%\"\/>\n\n(source: [NMF Tutorial](http:\/\/perso.telecom-paristech.fr\/~essid\/teach\/NMF_tutorial_ICME-2014.pdf))\n\nNonnegative matrix factorization (NMF) is a non-exact factorization that factors into one skinny positive matrix and one short positive matrix.  NMF is NP-hard and non-unique.  There are a number of variations on it, created by adding different constraints. ","db15fee4":"## Data Processing","68d7e03d":"Stop words vary from library to library","f97d8ec5":"- Matrices are \"stupendously big\"\n- Data are often **missing or inaccurate**.  Why spend extra computational resources when imprecision of input limits precision of the output?\n- **Data transfer** now plays a major role in time of algorithms.  Techniques the require fewer passes over the data may be substantially faster, even if they require more flops (flops = floating point operations).\n- Important to take advantage of **GPUs**.\n\n(source: [Halko](https:\/\/arxiv.org\/abs\/0909.4061))","eb958e68":"### Stemming and Lemmatization","05e9908e":"### Another approach: sub-word units","065802cf":"Spacy is a very modern & fast nlp library. Spacy is opinionated, in that it typically offers one highly optimized way to do something (whereas nltk offers a huge variety of ways, although they are usually not as optimized).\n\nYou will need to install it.\n\nif you use conda:\n```\nconda install -c conda-forge spacy\n```\nif you use pip:\n```\npip install -U spacy\n```\n\nYou will then need to download the English model:\n```\nspacy -m download en_core_web_sm\n```","2edb3d06":"Benefits: Fast and easy to use!\n\nDownsides: took years of research and expertise to create","5b1ea627":"- inherently stable\n- performance guarantees do not depend on subtle spectral properties\n- needed matrix-vector products can be done in parallel\n\n(source: [Halko](https:\/\/arxiv.org\/abs\/0909.4061))","0eb9cf00":"#### Motivation","58fa4893":"Latent Semantic Analysis (LSA) uses Singular Value Decomposition (SVD).","81d89cb7":"- [Data source](http:\/\/scikit-learn.org\/stable\/datasets\/twenty_newsgroups.html): Newsgroups are discussion groups on Usenet, which was popular in the 80s and 90s before the web really took off.  This dataset includes 18,000 newsgroups posts with 20 topics.\n- [Chris Manning's book chapter](https:\/\/nlp.stanford.edu\/IR-book\/pdf\/18lsi.pdf) on matrix factorization and LSI \n- Scikit learn [truncated SVD LSI details](http:\/\/scikit-learn.org\/stable\/modules\/decomposition.html#lsa)\n\n### Other Tutorials\n- [Scikit-Learn: Out-of-core classification of text documents](http:\/\/scikit-learn.org\/stable\/auto_examples\/applications\/plot_out_of_core_classification.html): uses [Reuters-21578](https:\/\/archive.ics.uci.edu\/ml\/datasets\/reuters-21578+text+categorization+collection) dataset (Reuters articles labeled with ~100 categories), HashingVectorizer\n- [Text Analysis with Topic Models for the Humanities and Social Sciences](https:\/\/de.dariah.eu\/tatom\/index.html): uses [British and French Literature dataset](https:\/\/de.dariah.eu\/tatom\/datasets.html) of Jane Austen, Charlotte Bronte, Victor Hugo, and more","ac350c2c":"### When to use these?","a3979c6d":"## Singular Value Decomposition (SVD)","8f67f1e3":"Topic modeling is a fun way to start our study of NLP. We will use two popular **matrix decomposition techniques**. \n\nWe start with a **term-document matrix**:\n\n<img src=\"images\/document_term.png\" alt=\"term-document matrix\" style=\"width: 80%\"\/>\n\nsource: [Introduction to Information Retrieval](http:\/\/player.slideplayer.com\/15\/4528582\/#)\n\nWe can decompose this into one tall thin matrix times one wide short matrix (possibly with a diagonal matrix in between).\n\nNotice that this representation does not take into account word order or sentence structure.  It's an example of a **bag of words** approach.","c2fb49f0":"<img src=\"images\/svd_fb.png\" alt=\"\" style=\"width: 80%\"\/>\n\n(source: [Facebook Research: Fast Randomized SVD](https:\/\/research.fb.com\/fast-randomized-svd\/))","217ef633":"Spacy doesn't offer a stemmer (since lemmatization is considered better-- this is an example of being opinionated!)","5e52bae6":"#### NLTK","c1455365":"### Timing comparison","d585708c":"We will return to SVD in **much more detail** later.  For now, the important takeaway is that we have a tool that allows us to exactly factor a matrix into orthogonal columns and orthogonal rows.","8b9dfac2":"What can we say about the singular values s?","4bcc5800":"### Motivation","c6d5f673":"Confirm this is a decomposition of the input.","62dc425c":"We get topics that match the kinds of clusters we would expect! This is despite the fact that this is an **unsupervised algorithm** - which is to say, we never actually told the algorithm how our documents are grouped.","01c966e8":"We saved a lot of time when we calculated NMF by only calculating the subset of columns we were interested in. Is there a way to get this benefit with SVD? Yes there is! It's called truncated SVD.  We are just interested in the vectors corresponding to the **largest** singular values.","951cb413":"[Topic Frequency-Inverse Document Frequency](http:\/\/www.tfidf.com\/) (TF-IDF) is a way to normalize term counts by taking into account how often they appear in a document, how long the document is, and how commmon\/rare the term is.\n\nTF = (# occurrences of term t in document) \/ (# of words in documents)\n\nIDF = log(# of documents \/ # documents with term t in it)","03e8b9ef":"#### Topics","46ea4a4b":"For more on randomized SVD, check out my [PyBay 2017 talk](https:\/\/www.youtube.com\/watch?v=7i6kBz1kZ-A&list=PLtmWHNX-gukLQlMvtRJ19s7-8MrnRV6h6&index=7).\n\nFor significantly more on randomized SVD, check out the [Computational Linear Algebra course](https:\/\/github.com\/fastai\/numerical-linear-algebra).","77980f6b":"Stemming and Lemmatization both generate the root form of the words. \n\nLemmatization uses the rules about a language.  The resulting tokens are all actual words\n\n\"Stemming is the poor-man\u2019s lemmatization.\" (Noah Smith, 2011) Stemming is a crude heuristic that chops the ends off of words.  The resulting tokens may not be actual words. Stemming is faster.","4dd40e39":"**More Reading**:\n\n- [The Why and How of Nonnegative Matrix Factorization](https:\/\/arxiv.org\/pdf\/1401.5226.pdf)","e236f0ad":"## Non-negative Matrix Factorization (NMF)","d3b6b631":"Notes:\n- For NMF, matrix needs to be at least as tall as it is wide, or we get an error with fit_transform\n- Can use df_min in CountVectorizer to only look at words that were in at least k of the split texts","95fe225a":"from [Information Retrieval](https:\/\/nlp.stanford.edu\/IR-book\/html\/htmledition\/stemming-and-lemmatization-1.html) textbook:\n\nAre the below words the same?\n\n*organize, organizes, and organizing*\n\n*democracy, democratic, and democratization*","436bb543":"Your turn!  Now, try lemmatizing and stemming the following collections of words:\n\n- fly, flies, flying\n- organize, organizes, organizing\n- universe, university","b37a38a9":"## Getting started"}}