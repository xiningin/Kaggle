{"cell_type":{"9822ad69":"code","2c88deeb":"code","84a89539":"code","3e67c0f7":"code","c4ef5cfd":"code","d1590076":"code","15643869":"code","b54c4453":"code","6c2cfc86":"code","494ca0d0":"code","8afb3b8a":"code","5662b72e":"code","82622500":"code","be1e3698":"code","dbdd3e8c":"code","9340da01":"code","7dfc5c76":"code","af89e916":"code","f4ab2076":"code","3f634b99":"code","e8538a69":"code","d5da65cc":"code","d675f614":"code","b07ac390":"code","b55152d1":"code","81310cc8":"code","7a6bd834":"code","6155d5ee":"code","15b330fd":"code","2cc292d1":"code","d9c384cb":"code","89ccfb3e":"code","8549eba6":"code","f31ada2a":"code","13b65f26":"code","8d12c7b9":"code","a1d819b0":"code","a66b1af3":"code","e0480ebb":"code","c6492ec0":"code","bcabc947":"code","32941136":"code","d98ff88d":"code","e0831ff6":"code","7d2707ac":"code","74872514":"code","610b9078":"code","fd9ac193":"code","416cd5c1":"code","f9fa6f5d":"code","b08327d3":"code","8b937500":"code","e6e4ceb3":"code","0e405a0b":"code","ddcec133":"code","3aa8edc3":"code","f7c7b5a0":"code","fc2e3a07":"code","74eed235":"code","0e8687d1":"code","8c8a65e1":"code","015a10ca":"code","a714a576":"code","3ea3c972":"code","14b011ca":"code","2dd9a18b":"code","67430081":"code","1974021e":"code","f4a27404":"code","36182d26":"code","af7ac7f1":"code","204a91ed":"code","a3587578":"code","bd280c6d":"code","7b84075b":"code","15187104":"code","07603b8b":"code","6d8ced5d":"code","a3e7099d":"code","31b2d01c":"code","85b1c6fd":"code","626069f6":"code","5d9fad8d":"code","0c46f4fd":"code","3a60c6d2":"code","4d266c6b":"code","4a32c93d":"code","55ff01ed":"code","5c83bbb2":"code","df74897d":"markdown","d82031b9":"markdown","7cee90dd":"markdown","fbf4cc6d":"markdown","c9f9d182":"markdown","d28f78ad":"markdown","6b4dc3f3":"markdown","97c38bf4":"markdown","4d22eccf":"markdown","2a40b9c2":"markdown","b80ab107":"markdown","a292022f":"markdown","f9ca638b":"markdown","972c943d":"markdown","0a98fa96":"markdown","ffee9bd7":"markdown","804e30c5":"markdown","e747adb1":"markdown","78b1a6a5":"markdown","43ee8910":"markdown","c28193b6":"markdown","c058b0a2":"markdown","04d58e28":"markdown"},"source":{"9822ad69":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline            \n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2c88deeb":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso,LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor","84a89539":"df=pd.read_excel('\/kaggle\/input\/zomato-dataset-for-rating-prediction\/zomato_train.xlsx')","3e67c0f7":"df.head()","c4ef5cfd":"df.tail()","d1590076":"df.sample(4)","15643869":"# shape of data\ndf.shape","b54c4453":"df.info()","6c2cfc86":"df.describe()","494ca0d0":"df.isna().sum()","8afb3b8a":"df.columns","5662b72e":"del df['url']\ndel df['address']\ndel df['phone']\ndel df['reviews_list']\ndel df['menu_item']\ndel df['name']\ndf.head()","82622500":"df.duplicated().sum()","be1e3698":"df.drop_duplicates(inplace=True)","dbdd3e8c":"# check null value percent\n(df.isna().sum()\/df.shape[0])*100","9340da01":"df['dish_liked'].isna().sum()","7dfc5c76":"df['votes']=df['votes'].astype('int32')\ndf.info()","af89e916":"df['rates'].isna().sum()","f4ab2076":"#unique rating in rates columns\ndf['rates'].unique()","3f634b99":"df.cov()","e8538a69":"#df.rates.str.replace('-',np.NaN)\ndf['rates']=df['rates'].str.replace(\" \",\"\")\ndf['rates']=df['rates'].str.replace('-','NaN')\ndf['rates']=df['rates'].fillna('NaN')\ndf['rates'].unique()","d5da65cc":"df['approx_cost(for two people)']=df['approx_cost(for two people)'].str.replace(\",\",\"\")\ndf['approx_cost(for two people)'].unique()","d675f614":"df.isna().sum()","b07ac390":"#Rename the columns\ndf=df.rename(columns={\"approx_cost(for two people)\" : \"avg_cost\",\n                      \"listed_in(type)\" : \"meal_type\", \n                      \"listed_in(city)\" : \"city\"})\ndf.head()\ndf=df.rename(columns={\"approx_cost(for two people)\" : \"avg_cost\",\n                      \"listed_in(type)\" : \"meal_type\", \n                      \"listed_in(city)\" : \"city\"})\ndf.head()","b55152d1":"df.dropna(subset=['rates','avg_cost','rest_type'],inplace=True)","81310cc8":"df['avg_cost']=df['avg_cost'].astype(int)","7a6bd834":"df.shape","6155d5ee":"#check null value in columns\ndf['rates']=df['rates'].astype(float)\ndf.isna().sum()","15b330fd":"df=df[df.cuisines.isna()==False]\ndf=df[df.rest_type.isna()==False]\ndf.isna().sum()","2cc292d1":"df['location'].unique()","d9c384cb":"df['city'].unique()","89ccfb3e":"del df['location']\ndf.head()","8549eba6":"plt.figure(figsize=(10,10))\n\nsns.countplot(df['online_order'])\nplt.title(\"number of restaurtants that take online_order\",fontsize=25,color='blue')\nplt.ylabel(\"Count\",fontsize=20)\nplt.xlabel(\"Online order\",fontsize=20)\nplt.show()","f31ada2a":"plt.figure(figsize=(10,10))\n\nsns.countplot(df['book_table'])\nplt.title(\"Number of restaurants that have the option to book table\",fontsize=25,color='purple')\nplt.ylabel(\"Count\",fontsize=20)\nplt.xlabel(\"Book Table\",fontsize=20)\nplt.show()","13b65f26":"plt.figure(figsize=(10,10))\nax =df.meal_type.value_counts()\nlabels=df['meal_type'].value_counts().index\nplt.pie(ax,labels=labels,autopct='%.2f')\nplt.title(\"Number of restaurants according to meal type\",fontsize=25,color='purple')\nplt.legend()\nplt.show()","8d12c7b9":"plt.figure(figsize=(10,10))\n\nax=df.city.value_counts()\nax.plot(kind='pie',fontsize=20)\n\nplt.title('number of restaurants in each area of banglore',fontsize=30,color='darkblue')\nplt.show()","a1d819b0":"plt.figure(figsize=(12,12))\n\nax=df.city.value_counts()[:10]\nlabels=df['city'].value_counts()[:10].index\nplt.pie(ax,labels=labels,autopct='%.2f')\nplt.title('number of restaurants in each area of banglore',fontsize=40,color='darkblue')\nplt.show()","a66b1af3":"teju=df.cov()\nteju","e0480ebb":"sns.heatmap(teju,annot=True)","c6492ec0":"#print top 10 locations\nplt.figure(figsize=(10,10))\nax=df.city.value_counts()[:10]\nax.plot(kind='bar')","bcabc947":"plt.figure(figsize=(10,10))\n\nax=df.rest_type.value_counts()[:10]\nlabel=df['rest_type'].value_counts()[:10].index\nax.plot(kind='pie',labels=label,autopct='%.2f')\n\nplt.title(\"Type of Restaurant in City\",fontsize=20,color='darkgreen')\nplt.show()","32941136":"plt.figure(figsize=(10,10))\n\nax=df.rest_type.value_counts()[:10]\nax.plot(kind='bar')\n\nplt.title(\"Number of Type of Restaurant in City\",fontsize=25)\nplt.xlabel(\"Type of Restaurants\",fontsize=15)\nplt.show()","d98ff88d":"plt.figure(figsize=(10,10))\n\nax=df.avg_cost.value_counts()[:10]\nlabel=df['avg_cost'].value_counts()[:10].index\n\nplt.pie(ax,labels=label,autopct='%.2f')\n\nplt.title(\"'Average cost for two person\",fontsize=25)\nplt.show()","e0831ff6":"plt.figure(figsize=(10,10))\nax=df['dish_liked'].value_counts()[:10]\nax.plot(kind='bar')\nplt.title(\"Top 10 dished_liked in Bangalore\",fontsize=25,color='purple')\nplt.show()","7d2707ac":"df['rates']=df['rates'].astype(float)\ndf.info()","74872514":"plt.figure(figsize=(10,10))\nax=df.dish_liked.value_counts()[:10]\nlabel=df['dish_liked'].value_counts()[:10].index\n\nplt.pie(ax,labels=label,autopct='%.2f')\n\nplt.title(\"Top 10 dished_liked in Bangalore\",fontsize=15)\nplt.show()","610b9078":"plt.figure(figsize=(10,10))\n\nax=df.cuisines.value_counts()[:10]\nax.plot(kind='bar')\n\nplt.title(\"Top 10 Cuisine\",fontsize=20)\nplt.xticks(fontsize=20)\nplt.show()","fd9ac193":"plt.figure(figsize=(10,10))\n\nsns.countplot(x=df['rates'],hue=df['online_order'])\nplt.title(\"Rate VS Online order\",fontsize=25)\nplt.ylabel(\"Restaurants that Accept\/Not Accepting online orders\",fontsize=20)\nplt.xlabel(\"rate\",fontsize=20)\nplt.show()","416cd5c1":"df=df.drop(['dish_liked','meal_type'],axis=1)","f9fa6f5d":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()","b08327d3":"list1=['online_order','book_table','rest_type','cuisines','city']\nfor i in list1:\n    df[i]=le.fit_transform(df[i])\n\ndf.head()","8b937500":"#Drop null values\ndf.dropna(how='any',inplace=True)\ndf.shape","e6e4ceb3":"# selecing features\nfeatures=df.drop(['rates'],axis=1)\nfeatures.shape","0e405a0b":"features.dtypes","ddcec133":"df['rates'].unique()","3aa8edc3":"# selecting Class\/ Label\nlabel=df['rates'].values\nlabel","f7c7b5a0":"from sklearn.preprocessing import StandardScaler\nss=StandardScaler()","fc2e3a07":"features=StandardScaler().fit(features).transform(features)\nfeatures","74eed235":"from sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test=train_test_split(features,label,test_size=0.10,random_state=42)","0e8687d1":"# Check the shape of splited data\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","8c8a65e1":"from sklearn.linear_model import LinearRegression\nlin_reg=LinearRegression()\nlin_reg","015a10ca":"#Train the model on train set\nlin_reg.fit(X_train,y_train)","a714a576":"#Check the model socre on train and test set\nprint(lin_reg.score(X_train,y_train))\nprint(lin_reg.score(X_test,y_test))","3ea3c972":"#New Predict\nlin_reg_pred=lin_reg.predict(X_test)\n","14b011ca":"from sklearn.metrics import r2_score\nlin_reg_score=r2_score(y_test,lin_reg_pred)*100\nprint(\"Accuracy score for LR :\",lin_reg_score)","2dd9a18b":"from sklearn.linear_model import Ridge\nrr=Ridge()\nrr","67430081":"rr.fit(X_train,y_train)","1974021e":"print(rr.score(X_train,y_train))\nprint(rr.score(X_test,y_test))","f4a27404":"rr_pred=rr.predict(X_test)","36182d26":"from sklearn.metrics import r2_score\nrr_score=r2_score(y_test,rr_pred)*100\nprint(\"Accuracy score for RidgeR :\",rr_score)","af7ac7f1":"from sklearn.linear_model import Lasso\nlr=Lasso()\nlr","204a91ed":"lr.fit(X_train,y_train)","a3587578":"print(lr.score(X_train,y_train))\nprint(lr.score(X_test,y_test))","bd280c6d":"lr_pred=lr.predict(X_test)","7b84075b":"from sklearn.metrics import r2_score\n\nlr_score=r2_score(y_test,lr_pred)*100\nprint(\"Accuracy score for LR :\",lr_score)","15187104":"rfr=RandomForestRegressor()\nrfr","07603b8b":"rfr.fit(X_train,y_train)","6d8ced5d":"print(rfr.score(X_train,y_train))\nprint(rfr.score(X_test,y_test))","a3e7099d":"rfr_pred=rfr.predict(X_test)","31b2d01c":"from sklearn.metrics import r2_score\n\nrfr_score=r2_score(y_test,rfr_pred)*100\nprint(\"Accuracy score for LR :\",rfr_score)","85b1c6fd":"from sklearn.svm import SVR","626069f6":"svr=SVR()\nsvr.fit(X_train,y_train)","5d9fad8d":"print(svr.score(X_train,y_train))\nprint(svr.score(X_test,y_test))","0c46f4fd":"svr_pred=svr.predict(X_test)","3a60c6d2":"from sklearn.metrics import r2_score\n\nsvr_score=r2_score(y_test,svr_pred)*100\nprint(\"Accuracy score for LR :\",svr_score)","4d266c6b":"pd.DataFrame({\"Model Names\":['Linear Reg','Ridge Reg','Lasso Reg','RandomForest Reg','Support Vector Reg'],\n            \"Accuracy socre\":[lin_reg_score,rr_score,lr_score,rfr_score,svr_score]})","4a32c93d":"#PREDICT THE RATING with Random Forest Regressor Model\nrfr.predict([[1,0,13,73,1900,350,27]])","55ff01ed":"#Compare Actual rating with Random Forest Regressor new Predicted Rating\nsample=pd.DataFrame({\"Actual Ratin\":y_test,\n             \"Predicted Rating\":np.round(rfr_pred,2)})\nsample\nsample=pd.DataFrame({\"Actual Ratin\":y_test,\n             \"Predicted Rating\":np.round(rfr_pred,2)})\nsample","5c83bbb2":"#Save Ratings Sample as a CSV file\nsample.to_csv(\"Prediction Sample.csv\",index=False)","df74897d":"# Split the data","d82031b9":"# Random Forest Regressor","7cee90dd":"# Dropped irrelevant Columns","fbf4cc6d":"# Data Preprocessing","c9f9d182":"# Remove ',' from \"approx_cost(for two people)\" columns","d28f78ad":"#  Remove Duplicates value\n","6b4dc3f3":"# Remove Null values from 'Rates' and \"avg_cost\" columns","97c38bf4":"# Check how many null value in each columns","4d22eccf":"# Exploratory Data Analysis (EDA)","2a40b9c2":"# Lasso","b80ab107":"# THANK YOU","a292022f":"# Remove 'cuisine' null values","f9ca638b":"# Linear Regression","972c943d":"# SUYASH PRATAP SINGH","0a98fa96":"# Support Vector Regression","ffee9bd7":"# Data Visualization","804e30c5":"# Feature Scaling","e747adb1":"# Removing '-' and \" \" from rate column","78b1a6a5":"# Data Transformation","43ee8910":"# Removing Null Values","c28193b6":"# Load the dataset","c058b0a2":"# Ridge Regression","04d58e28":"# Import the libraries"}}