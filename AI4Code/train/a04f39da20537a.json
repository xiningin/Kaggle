{"cell_type":{"497b684e":"code","aec79a2f":"code","508c3c39":"code","f742929c":"code","b4ae40c6":"code","7c0864e1":"code","20f78959":"code","d1bf9628":"code","ed2bfa28":"code","e67f4e62":"code","a5e7b210":"code","b56c6032":"code","d039a6cb":"code","239a0e7b":"code","4d6e152a":"code","ca17a2e0":"code","e9521d45":"code","b4581483":"code","2b884e8e":"code","af6cfaef":"code","5c4168de":"code","4325439a":"code","95158842":"code","7b290b37":"code","bc989eb6":"code","3ef404e4":"code","d308bdf2":"code","e1477c38":"code","da8bad1f":"code","79fdac4d":"code","ec22463a":"code","52f8ae0b":"code","db50935e":"code","55a6ebc0":"code","c0291fe7":"code","61536402":"code","1af1b29e":"code","557d2a20":"code","e648ca21":"code","98243200":"code","f0c32fdb":"code","6e9fe12f":"code","6f55eab8":"markdown","4f2459d5":"markdown","93c0c329":"markdown","d234f118":"markdown","5a5eb923":"markdown","728b4028":"markdown","626b0aae":"markdown","40d63242":"markdown","1c8f8218":"markdown","6bef11b3":"markdown","ca3b32ae":"markdown","531018c5":"markdown","7efee1b7":"markdown","0892d695":"markdown","966035f6":"markdown","a50a50b0":"markdown","b0336ba8":"markdown","1c2556ea":"markdown","64b221d1":"markdown","138b227f":"markdown","7a82050e":"markdown","db7bc5c9":"markdown","5193ac4e":"markdown","aca3f6c1":"markdown","1294868f":"markdown","1d9773c7":"markdown","187d57c4":"markdown","0a217223":"markdown","c854ad03":"markdown","59a0fa07":"markdown","0c4c3b2d":"markdown","d46c7436":"markdown","15a6a79a":"markdown","a765377a":"markdown","375d56d4":"markdown","2a50f68c":"markdown","88557e0b":"markdown","268c1366":"markdown","7879c253":"markdown","9734d269":"markdown","445c0a58":"markdown"},"source":{"497b684e":"import pandas as pd\nimport datetime\nfrom datetime import datetime as dt\nfrom datetime import timedelta\nimport numpy as np\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as mtick\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly\nimport folium\nfrom folium import plugins\nfrom folium.plugins import HeatMap","aec79a2f":"dt_inicial = '2020-01-22'\ndt_final = (dt.today()+timedelta(days=-2)).strftime('%Y-%m-%d')\n\ndatas = pd.DataFrame(pd.date_range(dt_inicial, dt_final).tolist(), columns =['Data'])\ndiretorio = 'https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_daily_reports\/'\ndatas['Arquivo'] = diretorio + pd.to_datetime(datas['Data']).dt.strftime('%m-%d-%Y').astype(str) + '.csv' \n\ndf_cov = pd.DataFrame()\n\nfor f in datas.index:\n    df = pd.read_csv(datas.Arquivo[f])\n    df.columns = df.columns.str.replace(\"\/\", \"_\")\n    df.columns = df.columns.str.replace(\" \", \"_\")\n    df.columns = df.columns.str.replace(\"Long_\", \"Longitude\")\n    df.columns = df.columns.str.replace(\"Latitude\", \"Lat\")\n    df['Date'] = datas.Data[f]\n    df_cov =  pd.concat([df_cov, df], ignore_index = True)\n\n#df_cov2 = pd.concat([pd.read_csv(f) for f in datas.Arquivo], ignore_index = True)\n\n\ndf_cov['Province_State'] = df_cov['Province_State'].fillna('Others')\ndf_cov['Country_Region'] = df_cov.Country_Region.str.replace('UK', 'United Kingdom').str.replace('Mainland China', 'China')\n\n#df_cov2['Province_State'] = df_cov2['Province_State'].fillna('Others')\n\ndf_cov['Cases'] = df_cov['Confirmed'].fillna(0) - df_cov['Deaths'].fillna(0) -  df_cov['Recovered'].fillna(0)","508c3c39":"# Import world population data\ndf_pop = df_notes = pd.read_csv('https:\/\/raw.githubusercontent.com\/andre-trierveiler\/COV-19_Daily_Following\/master\/data\/world_population_2018.csv', sep = ';')\ndf_pop['Country Name'] = df_pop['Country Name'].str.replace('UK', 'United Kingdom').str.replace('Mainland China', 'China').str.replace('United States', 'US')","f742929c":"def global_grid():\n\n    df = df_cov.groupby(['Date']).sum().reset_index()\n            \n    df['Recover Rate'] = df['Recovered'].fillna(0)\/df['Confirmed']\n    df['Death Rate'] = df['Deaths'].fillna(0)\/df['Confirmed']\n    df['New Cases'] = df.Confirmed.rolling(2).sum()\n    df['New Cases'] = 2*df.Confirmed - df['New Cases']\n            \n    df['New Deaths'] = df.Deaths.rolling(2).sum()\n    df['New Deaths'] = 2*df.Deaths - df['New Deaths']\n            \n    df.set_index('Date', inplace = True)\n\n    sns.set(style=\"darkgrid\", palette=\"Set2\")\n    fig = plt.figure(figsize = (20,10), tight_layout =False, frameon = True)\n    fig.autofmt_xdate()\n\n    a1 = plt.subplot2grid((3,3),(0,0),rowspan = 2, sharex = None)\n    a2 = plt.subplot2grid((3,3),(0,2), rowspan = 3, sharex = None)\n    a3 = plt.subplot2grid((3,3),(0,1),rowspan = 2, sharex = None)\n    a4 = plt.subplot2grid((3,3),(2,0),colspan = 2, sharex = None)\n\n    def thousands(x, pos):\n        'The two args are the value and tick position'\n        if x >= 1000000:    \n          return '%1.fMM' % (x*1e-6)\n        else:\n          if x >= 1000:    \n            return '%1.fK' % (x*1e-3)\n          else:\n            return '%1.f' % (x)\n    \n\n    a2.stackplot(df.index,[df['Recovered'], df['Deaths'], df['Cases']],colors=['Mediumseagreen','tomato','dodgerblue'], labels=['Recovered','Death','Diagnosed'], alpha = 0.4)\n    a2.set_xlim([datetime.date(2020, 1, 22),pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a2.legend(loc='upper left')\n    a2.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a2.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    a2.yaxis.set_major_formatter(mtick.FuncFormatter(thousands))\n    a2.set_title('Total Cases', loc = 'left', horizontalalignment='left')\n\n    a1.bar(df.index,df['New Cases'], alpha=0.8, color='dodgerblue')\n    a1.set_xlim([datetime.date(2020, 1, 22),pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a1.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a1.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    a1.yaxis.set_major_formatter(mtick.FuncFormatter(thousands))\n    a1.set_title('Daily New Cases', loc = 'left', horizontalalignment='left')\n\n\n    a3.bar(df.index,df['New Deaths'], alpha=0.8, color = 'tomato')\n    #ax3.legend(loc='upper left')\n    a3.set_xlim([datetime.date(2020, 1, 22),pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a3.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a3.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    a3.yaxis.set_major_formatter(mtick.FuncFormatter(thousands))\n    a3.set_title('Daily New Deaths', loc = 'left', horizontalalignment='left')\n\n    #a4.set_ylabel('Death Rate')\n    a4.set_title('Death Rate', loc = 'left', horizontalalignment='left')\n    a4.plot(df.index, df['Death Rate']*100, linestyle='-', color = 'tomato', alpha = 0.8)\n    a4.set_xlim([datetime.date(2020, 1, 22), pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a4.yaxis.set_major_formatter(mtick.PercentFormatter(decimals=0))\n    a4.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a4.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n\n\n    plt.subplots_adjust(left=0.05, right=0.87, bottom = 0.20, top = 0.83, wspace=0.15, hspace=0.5)\n    fig.text(x=0.87, y=0.125, s='Last Updated '+df_cov.Date.max().strftime('%B, %d'), fontfamily = 'serif', horizontalalignment='right',color='#524939', fontname = 'DejaVu Sans')\n    fig.text(x=0.872, y=0.1, s='by Andr\u00e9 Trierveiler ', fontfamily = 'serif', horizontalalignment='right',color='#524939', fontname = 'DejaVu Sans')\n    fig.text(x=0.755, y=0.93, s='Sources: John Hopkins University', fontfamily = 'serif', horizontalalignment='left',color='#524939', fontname = 'DejaVu Sans')\n    fig.patch.set_facecolor('whitesmoke')\n    fig.suptitle('Novel Coronavirus', fontsize = 24,x=0.05, y=0.93, horizontalalignment='left',color='#524939', fontname='Liberation Serif')\n    #fig.title('COVID')\n    #a1.set_facecolor('gainsboro')\n    #plt.margins(x=1, y=1, tight=True)\n    #plt.tight_layout()\n    plt.show()\n\nglobal_grid()\n","b4ae40c6":"def country_grid(country):\n    country = 'Brazil'\n    df = df_cov[df_cov['Country_Region'] == country]\n    df = df.groupby(['Country_Region','Date']).sum().reset_index()\n            \n    df['Recover Rate'] = df['Recovered'].fillna(0)\/df['Confirmed']\n    df['Death Rate'] = df['Deaths'].fillna(0)\/df['Confirmed']\n    df['New Cases'] = df.Confirmed.rolling(2).sum()\n    df['New Cases'] = 2*df.Confirmed - df['New Cases']\n            \n    df['New Deaths'] = df.Deaths.rolling(2).sum()\n    df['New Deaths'] = 2*df.Deaths - df['New Deaths']\n            \n    df.set_index('Date', inplace = True)\n\n    sns.set(style=\"darkgrid\", palette=\"Set2\")\n    fig = plt.figure(figsize = (20,10), tight_layout =False, frameon = True)\n    fig.autofmt_xdate()\n\n    a1 = plt.subplot2grid((3,3),(0,0),rowspan = 2, sharex = None)\n    a2 = plt.subplot2grid((3,3),(0,2), rowspan = 3, sharex = None)\n    a3 = plt.subplot2grid((3,3),(0,1),rowspan = 2, sharex = None)\n    a4 = plt.subplot2grid((3,3),(2,0),colspan = 2, sharex = None)\n\n    def thousands(x, pos):\n        'The two args are the value and tick position'\n        if x >= 1000:    \n          if round(x\/1000,0) == x\/1000:  \n              return '%1.fK' % (x*1e-3)\n          else:\n              return '%1.1fK' % (x*1e-3)    \n        else:\n          return '%1.f' % (x)\n    \n\n    a2.stackplot(df.index,[df['Recovered'], df['Deaths'], df['Cases']],colors=['Mediumseagreen','tomato','dodgerblue'], labels=['Recovered','Death','Diagnosed'], alpha = 0.4)\n    a2.set_xlim([datetime.date(2020, 1, 22),pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a2.legend(loc='upper left')\n    a2.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a2.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    a2.yaxis.set_major_formatter(mtick.FuncFormatter(thousands))\n    a2.set_title('Total Cases', loc = 'left', horizontalalignment='left')\n\n    a1.bar(df.index,df['New Cases'], alpha=0.8, color='dodgerblue')\n    a1.set_xlim([datetime.date(2020, 1, 22),pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a1.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a1.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    a1.yaxis.set_major_formatter(mtick.FuncFormatter(thousands))\n    a1.set_title('Daily New Cases', loc = 'left', horizontalalignment='left')\n\n\n    a3.bar(df.index,df['New Deaths'], alpha=0.8, color = 'tomato')\n    #ax3.legend(loc='upper left')\n    a3.set_xlim([datetime.date(2020, 1, 22),pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a3.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a3.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    a3.yaxis.set_major_formatter(mtick.FuncFormatter(thousands))\n    a3.set_title('Daily New Deaths', loc = 'left', horizontalalignment='left')\n\n    #a4.set_ylabel('Death Rate')\n    a4.set_title('Death Rate', loc = 'left', horizontalalignment='left')\n    a4.plot(df.index, df['Death Rate']*100, linestyle='-', color = 'tomato', alpha = 0.8)\n    a4.set_xlim([datetime.date(2020, 1, 22), pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a4.yaxis.set_major_formatter(mtick.PercentFormatter(decimals=0))\n    a4.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a4.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n\n\n    plt.subplots_adjust(left=0.05, right=0.87, bottom = 0.20, top = 0.83, wspace=0.15, hspace=0.5)\n    fig.text(x=0.87, y=0.125, s='Last Updated '+df_cov.Date.max().strftime('%B, %d'), fontfamily = 'serif', horizontalalignment='right',color='#524939', fontname = 'DejaVu Sans')\n    fig.text(x=0.872, y=0.1, s='by Andr\u00e9 Trierveiler ', fontfamily = 'serif', horizontalalignment='right',color='#524939', fontname = 'DejaVu Sans')\n    fig.text(x=0.755, y=0.93, s='Sources: John Hopkins University', fontfamily = 'serif', horizontalalignment='left',color='#524939', fontname = 'DejaVu Sans')\n    fig.patch.set_facecolor('whitesmoke')\n    fig.suptitle('Novel Coronavirus in ' + country, fontsize = 24,x=0.05, y=0.93, horizontalalignment='left',color='#524939', fontname='Liberation Serif')\n    #fig.title('COVID')\n    #a1.set_facecolor('gainsboro')\n    #plt.margins(x=1, y=1, tight=True)\n    #plt.tight_layout()\n    plt.show()\n\ncountry_grid('Brazil')","7c0864e1":"#@title\ndef state_grid(state):\n\n    df = df_cov[df_cov['Province_State'] == state]\n    df = df.groupby(['Province_State','Date']).sum().reset_index()   \n\n    df['Recover Rate'] = df['Recovered'].fillna(0)\/df['Confirmed']\n    df['Death Rate'] = df['Deaths'].fillna(0)\/df['Confirmed']\n    df['New Cases'] = df.Confirmed.rolling(2).sum()\n    df['New Cases'] = 2*df.Confirmed - df['New Cases']\n            \n    df['New Deaths'] = df.Deaths.rolling(2).sum()\n    df['New Deaths'] = 2*df.Deaths - df['New Deaths']\n            \n    df.set_index('Date', inplace = True)\n\n    sns.set(style=\"darkgrid\", palette=\"Set2\")\n    fig = plt.figure(figsize = (20,10), tight_layout =False, frameon = True)\n    fig.autofmt_xdate()\n\n    a1 = plt.subplot2grid((3,3),(0,0),rowspan = 2, sharex = None)\n    a2 = plt.subplot2grid((3,3),(0,2), rowspan = 3, sharex = None)\n    a3 = plt.subplot2grid((3,3),(0,1),rowspan = 2, sharex = None)\n    a4 = plt.subplot2grid((3,3),(2,0),colspan = 2, sharex = None)\n\n    def thousands(x, pos):\n        'The two args are the value and tick position'\n        if x >= 1000000:    \n          return '%1.fMM' % (x*1e-6)\n        else:\n          if x >= 1000:    \n            return '%1.fK' % (x*1e-3)\n          else:\n            return '%1.f' % (x)\n    \n\n    a2.stackplot(df.index,[df['Recovered'], df['Deaths'], df['Cases']],colors=['Mediumseagreen','tomato','dodgerblue'], labels=['Recovered','Death','Diagnosed'], alpha = 0.4)\n    a2.set_xlim([datetime.date(2020, 1, 22),pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a2.legend(loc='upper left')\n    a2.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a2.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    a2.yaxis.set_major_formatter(mtick.FuncFormatter(thousands))\n    a2.set_title('Total Cases', loc = 'left', horizontalalignment='left')\n\n    a1.bar(df.index,df['New Cases'], alpha=0.8, color='dodgerblue')\n    a1.set_xlim([datetime.date(2020, 1, 22),pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a1.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a1.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    a1.yaxis.set_major_formatter(mtick.FuncFormatter(thousands))\n    a1.set_title('Daily New Cases', loc = 'left', horizontalalignment='left')\n\n\n    a3.bar(df.index,df['New Deaths'], alpha=0.8, color = 'tomato')\n    #ax3.legend(loc='upper left')\n    a3.set_xlim([datetime.date(2020, 1, 22),pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a3.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a3.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    a3.yaxis.set_major_formatter(mtick.FuncFormatter(thousands))\n    a3.set_title('Daily New Deaths', loc = 'left', horizontalalignment='left')\n\n    #a4.set_ylabel('Death Rate')\n    a4.set_title('Death Rate', loc = 'left', horizontalalignment='left')\n    a4.plot(df.index, df['Death Rate']*100, linestyle='-', color = 'tomato', alpha = 0.8)\n    a4.set_xlim([datetime.date(2020, 1, 22), pd.to_datetime(dt_final, format='%Y-%m-%d')]) \n    a4.yaxis.set_major_formatter(mtick.PercentFormatter(decimals=0))\n    a4.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a4.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n\n\n    plt.subplots_adjust(left=0.05, right=0.87, bottom = 0.20, top = 0.83, wspace=0.15, hspace=0.5)\n    fig.text(x=0.87, y=0.125, s='Last Updated '+df_cov.Date.max().strftime('%B, %d'), fontfamily = 'serif', horizontalalignment='right',color='#524939', fontname = 'DejaVu Sans')\n    fig.text(x=0.872, y=0.1, s='by Andr\u00e9 Trierveiler ', fontfamily = 'serif', horizontalalignment='right',color='#524939', fontname = 'DejaVu Sans')\n    fig.text(x=0.755, y=0.93, s='Sources: John Hopkins University', fontfamily = 'serif', horizontalalignment='left',color='#524939', fontname = 'DejaVu Sans')\n    fig.patch.set_facecolor('whitesmoke')\n    fig.suptitle('Novel Coronavirus in ' + state, fontsize = 24,x=0.05, y=0.93, horizontalalignment='left',color='#524939', fontname='Liberation Serif')\n    #fig.title('COVID')\n    #a1.set_facecolor('gainsboro')\n    #plt.margins(x=1, y=1, tight=True)\n    #plt.tight_layout()\n    plt.show()\n\nstate_grid('New York')  ","20f78959":"#@title\ncountry = 'Brazil'\n\ndf_plot = df_cov[df_cov['Country_Region'] == country]\ndf_plot = df_plot[['Date','Country_Region','Deaths','Confirmed','Recovered', 'Cases']]\ndf_plot = df_plot.groupby(['Country_Region','Date']).sum().reset_index()\n\ntrace = go.Scatter(\n    x=df_plot.Date,\n    y=df_plot.Deaths,\n    marker=dict(\n        color = 'Tomato',\n        #color = df_plot.Deaths\n        #colorscale='Reds',\n        showscale=False),\n        name = 'Deaths',\n        hoverinfo='x+y',\n        mode='lines',\n        line = dict(width=0),\n        stackgroup='one')\n\ntrace2 = go.Scatter(\n    x=df_plot.Date,\n    y=df_plot.Recovered,\n    marker=dict(\n        color = 'Mediumseagreen',\n        #color = df_plot.Recovered,\n        #colorscale='Greens',\n        showscale=False),\n        name = 'Recovered',\n        hoverinfo='x+y',\n        mode='lines',\n        line = dict(width=0),\n        stackgroup='one')\n\ntrace3 = go.Scatter(\n    x=df_plot.Date,\n    y=df_plot.Cases,\n    marker=dict(\n        color = 'Dodgerblue',\n        #color = df_plot.Recovered,\n        #colorscale='Greens',\n        showscale=False),\n        name =  'Confirmed',\n        hoverinfo='x+y',\n        mode='lines',\n        line = dict(width=0),\n        stackgroup='one')\n\ntrace4 = go.Scatter(\n    x=df_plot.Date,\n    y=df_plot.Confirmed,\n    marker=dict(\n        color = 'goldenrod',\n        size = 5,\n        #color = df_plot.Recovered,\n        #colorscale='Greens',\n        showscale=False),\n        name =  'Total Cases',\n        line = dict(color = 'goldenrod', width=1.5),\n        hoverinfo='x+y',\n        mode='lines+markers'\n)\n\ndata = [trace, trace2, trace3, trace4]\nlayout = go.Layout(title='Cases in ' + country + ' Over Time', \n                   yaxis = dict(title = 'No. of Cases'),\n                   barmode = \"stack\",\n                   xaxis_rangeslider_visible=True,\n                   hovermode=\"x\")\n\nfig = go.Figure(data=data, layout=layout)\nfig['layout']['xaxis'].update(dict(title = 'Date', \n                                   tickfont = dict(size = 10)))\npy.iplot(fig)","d1bf9628":"#@title\ncountry = 'Brazil'\n\ndef country_grid_3(country):\n      df_plot = df_cov[df_cov['Country_Region'] == country]\n      df_plot = df_plot[['Date','Country_Region','Deaths','Confirmed','Recovered', 'Cases']]\n      df_plot = df_plot.groupby(['Country_Region','Date']).sum().reset_index()\n\n      df_plot['New_Cases'] = df_plot.groupby('Country_Region').Confirmed.rolling(2).sum().reset_index(0,drop=True)\n      df_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\n\n      df_plot['New_Deaths'] = df_plot.groupby('Country_Region').Deaths.rolling(2).sum().reset_index(0,drop=True)\n      df_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\n\n      df_plot['New_Recovered'] = df_plot.groupby('Country_Region').Recovered.rolling(2).sum().reset_index(0,drop=True)\n      df_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\n      df_plot['Spread_Rate'] = df_plot.New_Cases.fillna(0)\/df_plot.Cases\n      df_plot['Death_Rate'] = df_plot['Deaths'].fillna(0)\/df_plot['Confirmed']\n      df_plot['Recover_Rate'] = df_plot['Recovered'].fillna(0)\/df_plot['Confirmed']\n\n      df_plot_g = df_plot.resample('W', on='Date').mean()\n      df_plot_g['Date'] = df_plot_g.index\n\n      trace = go.Bar(\n          x=df_plot.Date,\n          y=df_plot.Deaths,\n          marker=dict(\n              color = 'tomato',\n              #color = df_plot.Deaths\n              #colorscale='Reds',\n              showscale=False),\n          name = 'Deaths')\n\n      trace2 = go.Bar(\n          x=df_plot.Date,\n          y=df_plot.Recovered,\n          marker=dict(\n              color = 'Mediumseagreen',\n              #color = df_plot.Recovered,\n              #colorscale='Greens',\n              showscale=False),\n          name = 'Recovered')\n\n      trace3 = go.Bar(\n          x=df_plot.Date,\n          y=df_plot.Cases,\n          marker=dict(\n              color = 'dodgerblue',\n              #color = df_plot.Recovered,\n              #colorscale='Greens',\n              showscale=False),\n          name =  'Confirmed')\n\n      trace4 = go.Scatter(\n          x=df_plot.Date,\n          y=df_plot.Confirmed,\n          marker=dict(\n              color = 'gold',\n              #color = df_plot.Recovered,\n              #colorscale='Greens',\n              showscale=False),\n          name =  'Total Cases',\n          line = dict(color = 'goldenrod', width=3.5))\n\n\n      trace5 = go.Bar(\n          x=df_plot.Date,\n          y=df_plot.New_Cases,\n          marker=dict(\n              color = 'dodgerblue',\n              showscale=False),\n          name = 'New Cases')\n\n      trace6 = go.Bar(\n          x=df_plot.Date,\n          y=df_plot.New_Deaths,\n          marker=dict(\n              color = 'tomato',\n              showscale=False),\n          name = 'New Deaths')\n\n      trace7 = go.Bar(\n          x=df_plot.Date,\n          y=df_plot.New_Recovered,\n          marker=dict(\n              color = 'Mediumseagreen',\n              showscale=False),\n            name = 'New_Recovered')\n\n      trace8 = go.Scatter(\n          x=df_plot_g.Date,\n          y=df_plot_g.Spread_Rate,\n          marker=dict(\n              symbol = 'square',\n              color = 'dodgerblue',\n              showscale=False),\n          line = dict(width=1),\n          name = 'New_Recovered')\n\n      trace9 = go.Scatter(\n          x=df_plot_g.Date,\n          y=df_plot_g.Death_Rate,\n          marker=dict(\n              symbol = 'square',\n              color = 'tomato',\n              showscale=False),\n          line = dict(width=1),\n          name = 'Death Rate')\n\n      trace10 = go.Scatter(\n          x=df_plot_g.Date,\n          y=df_plot_g.Recover_Rate,\n          marker=dict(\n              symbol = 'square',\n              color = 'Mediumseagreen',\n              showscale=False),\n          line = dict(width=1),\n          name = 'New_Recovered',)\n\n      fig = plotly.subplots.make_subplots(rows=3, cols=3, specs=[[{'rowspan':3}, {}, {}], [None, {}, {}], [None, {}, {}]],\n                                          subplot_titles=('Total Cases','New Cases', 'Spread Rate', 'New Recovered','Recover Rate','New Deaths','Death Rate'))\n\n      fig.append_trace(trace5, 1, 2)\n      fig.append_trace(trace6, 3, 2)\n      fig.append_trace(trace7, 2, 2)\n\n      fig.append_trace(trace, 1, 1)\n      fig.append_trace(trace2, 1, 1)\n      fig.append_trace(trace3, 1, 1)\n      fig.append_trace(trace4, 1, 1)\n\n      fig.append_trace(trace8, 1, 3)\n      fig.append_trace(trace9, 3, 3)\n      fig.append_trace(trace10, 2, 3)\n\n      fig['layout'].update(showlegend=False, title='Novel Coronavirus in ' + country , barmode = \"stack\")\n      py.iplot(fig)\n\ncountry_grid_3(country)     ","ed2bfa28":"variable = 'Confirmed'\nmapbox_access_token= 'pk.eyJ1IjoiYW5kcmV0cmllcnZlaWxlciIsImEiOiJjazlwMDV2MmwwNjJjM25xc25xdXp4c3NzIn0.ioCvLEWAa_a0B-rTCTUxZw'\npx.set_mapbox_access_token(mapbox_access_token)\n\ndf_plot = df_cov.copy()\ndf_plot['Date_str'] = df_plot.Date.dt.strftime('%Y-%m-%d')\ndf_plot.sort_values(by=['Date','Country_Region', 'Province_State', 'Combined_Key'], inplace=True)\n#df_plot = df_plot.set_index('Date').groupby(['Country_Region','Province_State', 'Combined_Key']).last().reset_index()\n\ndf_plot = df_plot[df_plot['Country_Region'] =='US']\ndf_plot.Lat = df_plot.Lat.fillna(0)\ndf_plot.Longitude = df_plot.Longitude.fillna(0)\ndf_plot = df_plot[(df_plot['Lat'] != 0) & (df_plot['Longitude'] != 0)]\n\nfig = px.scatter_mapbox(df_plot, lat=\"Lat\", lon=\"Longitude\" ,     size=variable\n                  , hover_name='Combined_Key', color = variable, hover_data=['Country_Region','Province_State','Combined_Key','Confirmed','Deaths','Recovered']\n                  , color_continuous_scale='Bluered',zoom=3.0, title = variable +' Cases United States'\n                  , animation_frame=\"Date_str\") \n\n\nfig.update_layout(#margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0},\n    geo=dict(\n        showframe=False,\n        showcoastlines=False,\n        scope = 'usa',\n        projection_type='albers usa',\n        #projection_type='azimuthal equal area'\n        landcolor = 'rgb(204,204, 204)',\n        countrycolor = 'rgb(108, 108, 108)'\n        ))\n\nfig.show()","e67f4e62":"\ndef heatmap(variable, pop_ajust = False, zoom = 0.35, lat_center = 30, long_center = 0, timelapse = False):\n\n    mapbox_access_token= 'pk.eyJ1IjoiYW5kcmV0cmllcnZlaWxlciIsImEiOiJjazlwMDV2MmwwNjJjM25xc25xdXp4c3NzIn0.ioCvLEWAa_a0B-rTCTUxZw'\n    px.set_mapbox_access_token(mapbox_access_token)\n\n    df_plot = df_cov.copy()\n    df_plot = df_plot[['Date','Country_Region','Deaths','Confirmed','Recovered', 'Cases']]\n    df_plot = df_plot.groupby(['Country_Region','Date']).sum().reset_index()\n    df_plot['Date_str'] = df_plot.Date.dt.strftime('%Y-%m-%d')\n\n    df_plot['New_Cases'] = df_plot.groupby('Country_Region').Confirmed.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\n    df_plot['New_Deaths'] = df_plot.groupby('Country_Region').Deaths.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\n    df_plot['New_Recovered'] = df_plot.groupby('Country_Region').Recovered.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\n    df_plot['New_Recovered_Mean'] = df_plot.groupby('Country_Region').New_Recovered.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['New_Deaths_Mean'] = df_plot.groupby('Country_Region').New_Deaths.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['New_Cases_Mean'] = df_plot.groupby('Country_Region').New_Cases.rolling(7).mean().reset_index(0,drop=True)\n\n    df_plot['Confirmed_Mean'] = df_plot.groupby('Country_Region').Confirmed.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Recovered_Mean'] = df_plot.groupby('Country_Region').Recovered.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Deaths_Mean'] = df_plot.groupby('Country_Region').Deaths.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Cases_Mean'] = df_plot.groupby('Country_Region').Cases.rolling(7).mean().reset_index(0,drop=True)\n\n    df_plot['Spread_Rate'] = df_plot.New_Cases_Mean.fillna(0)\/df_plot.Confirmed_Mean\n    df_plot['Death_Rate'] = df_plot['Deaths_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n    df_plot['Death_Rate2'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Cases_Mean']\n    df_plot['Death_Growth'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Deaths_Mean']\n    df_plot['Recover_Rate'] = df_plot['Recovered_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n\n    df_coor = df_cov[['Date','Country_Region','Lat','Longitude','Confirmed']]\n    df_coor = df_coor.loc[df_coor.groupby('Country_Region').Confirmed.idxmax()]\n    df_coor = df_coor[['Country_Region','Lat','Longitude']]\n    df_plot = pd.merge(df_plot, df_coor, how='left', left_on=['Country_Region'], right_on=['Country_Region'])\n          \n    df_plot.Lat = df_plot.Lat.fillna(0)\n    df_plot.Longitude = df_plot.Longitude.fillna(0)\n    df_plot = df_plot[(df_plot['Lat'] != 0) & (df_plot['Longitude'] != 0)]\n\n    title_end = ''\n    \n    if timelapse == False:\n        df_plot = df_plot[df_plot['Date'] == df_plot['Date'].max() + timedelta(days=-1)]\n        \n    df_plot = pd.merge(df_plot, df_pop, how='left', left_on=['Country_Region'], right_on=['Country Name'])\n    if pop_ajust == True:\n        df_plot[variable] = df_plot[variable]\/(df_plot['2018']\/1000)\n        title_end = ' (per Thousand Inhabitants)'\n\n\n    df_plot = df_plot.dropna()\n    df_plot = df_plot[(df_plot[variable] > 0)]\n\n\n    df_plot.sort_values(by=['Date','Country_Region'], inplace=True)\n\n    fig = px.density_mapbox(df_plot, \n                            lat='Lat', lon='Longitude', \n                            hover_name='Country_Region', hover_data=['Country_Region','Date_str','Confirmed','Deaths','Recovered','Spread_Rate','Death_Rate'], \n                            radius=20,\n                            z=variable,\n                            zoom=zoom, \n                            #height=600,\n                            #width=1000,\n                            title=variable + ' Worldwide' + title_end,\n                            animation_frame=str('Date_str'),\n                            center= dict(lat=lat_center,lon=long_center)\n                            )\n    fig.update_layout(mapbox_style=\"open-street-map\")\n    fig.show()\n\nheatmap('New_Deaths_Mean', pop_ajust =True, zoom = 0.35, lat_center = 30, long_center = 0, timelapse = False)   ","a5e7b210":"\ncountries = ['Brazil','US','China','Italy','Germany','South Korea','Canada','Mexico','Portugal','Japan','Sweden']\n\ndate = df_cov.groupby(['Date']).sum().reset_index().Date\ndate = date.to_frame()\ncountry_province = (df_cov.groupby(['Country_Region', 'Province_State']).sum().reset_index()).filter(['Country_Region', 'Province_State'])\ndate['Key'] = 1\ncountry_province['Key'] = 1\ndt_cnt_prv = pd.merge(date, country_province)\n\ndf_gr = df_cov.groupby(['Date','Country_Region','Province_State']).sum().reset_index()\ndf_gr = pd.merge(dt_cnt_prv, df_gr, how = 'left')\n\ndf_plot = df_gr[df_gr['Country_Region'].isin(countries)]\ndf_plot = df_plot[['Date','Country_Region','Deaths','Confirmed','Recovered', 'Cases']]\ndf_plot = df_plot.groupby(['Country_Region','Date']).sum().reset_index()\n\ndf_plot = df_plot.melt(id_vars=['Date','Country_Region'], value_vars=['Deaths','Recovered','Confirmed'])\n\ndf_plot.sort_values(by=['Date','Country_Region','variable'], inplace=True)\ndf_plot['Date_str'] = df_plot.Date.dt.strftime('%Y-%m-%d')\n\nfig = px.bar(df_plot\n             , y=df_plot.Country_Region\n             , x= df_plot.value\n             , color= df_plot.variable\n             , animation_frame=df_plot.Date_str\n             , orientation='h'\n             , facet_col = df_plot.variable\n             , hover_name = df_plot.Country_Region + ' -  ' +df_plot.variable\n             #, text = df_plot.value\n             , animation_group= df_plot.Country_Region\n             , labels={'value':'Number of Cases','Country_Region':\"Country Region\"}\n             , opacity = 0.5            \n             , log_x = False\n             #, range_x = [0.1,df_plot.value.max()+5000]\n             , title = 'Cases Over Time'\n             , template = 'plotly')\nfig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[1]))\nfig.show()","b56c6032":"countries = ['Brazil','US','China']\nvariable = 'New_Cases'\n\ndate = df_cov.groupby(['Date']).sum().reset_index().Date\ndate = date.to_frame()\ncountry_province = (df_cov.groupby(['Country_Region', 'Province_State']).sum().reset_index()).filter(['Country_Region', 'Province_State'])\ndate['Key'] = 1\ncountry_province['Key'] = 1\ndt_cnt_prv = pd.merge(date, country_province)\n\ndf_gr = df_cov.groupby(['Date','Country_Region','Province_State']).sum().reset_index()\ndf_gr = pd.merge(dt_cnt_prv, df_gr, how = 'left')\n\ndf_plot = df_gr[df_gr['Country_Region'].isin(countries)]\ndf_plot = df_plot[['Date','Country_Region','Deaths','Confirmed','Recovered', 'Cases']]\ndf_plot = df_plot.groupby(['Country_Region','Date']).sum().reset_index()\n\ndf_plot['New_Cases'] = df_plot.groupby('Country_Region').Confirmed.rolling(2).sum().reset_index(0,drop=True)\ndf_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\n\ndf_plot['New_Deaths'] = df_plot.groupby('Country_Region').Deaths.rolling(2).sum().reset_index(0,drop=True)\ndf_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\n\ndf_plot['New_Recovered'] = df_plot.groupby('Country_Region').Recovered.rolling(2).sum().reset_index(0,drop=True)\ndf_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\ndf_plot['Spread_Rate'] = df_plot.New_Cases.fillna(0)\/df_plot.Cases\ndf_plot['Death_Rate'] = df_plot['Deaths'].fillna(0)\/df_plot['Confirmed']\ndf_plot['Recover_Rate'] = df_plot['Recovered'].fillna(0)\/df_plot['Confirmed']\n\ndf_plot['New_Recovered'] = df_plot.groupby('Country_Region').New_Recovered.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['New_Deaths'] = df_plot.groupby('Country_Region').New_Deaths.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['New_Cases'] = df_plot.groupby('Country_Region').New_Cases.rolling(7).mean().reset_index(0,drop=True)\n\ndf_plot.sort_values(by=['Date'], inplace=True)\ndf_plot['Date_str'] = df_plot.Date.dt.strftime('%Y-%m-%d')\n\nfig = px.line(df_plot\n           , y=variable\n           , x=\"Confirmed\"\n           , animation_frame=df_plot.Date_str\n           , color=df_plot.Country_Region\n           , hover_name=df_plot.Country_Region\n           , range_y=[0.1, df_plot.New_Cases.max()*1.2]\n           , range_x = [0.1,df_plot.Confirmed.max()*1.2]\n           , text=df_plot.Country_Region\n         #  , size=1\n           , log_x= True\n           , log_y=True\n           , title='New Cases Over Confirmed Cases Timelapse'\n          # , width=800, height=500\n           )\nfig.show()","d039a6cb":"def facetgrid_3(countries, variables, x='Date', day_num = False, invert_hue = False, xlog = False, ylog = False\n                , x_share = True, y_share = False, pop_ajust = False, resample = 'W', col_wrap=3,threshold = 10,title=''):\n      \n      date = df_cov.groupby(['Date']).sum().reset_index().Date\n      date = date.to_frame()\n      country_province = (df_cov.groupby(['Country_Region', 'Province_State']).sum().reset_index()).filter(['Country_Region', 'Province_State'])\n      date['Key'] = 1\n      country_province['Key'] = 1\n      dt_cnt_prv = pd.merge(date, country_province)\n\n      df_gr = df_cov.groupby(['Date','Country_Region','Province_State']).sum().reset_index()\n      df_gr = pd.merge(dt_cnt_prv, df_gr, how = 'left')\n\n      df_plot = df_gr[df_gr['Country_Region'].isin(countries)]\n      df_plot = df_plot[['Date','Country_Region','Deaths','Confirmed','Recovered', 'Cases']]\n      df_plot = df_plot.groupby(['Country_Region','Date']).sum().reset_index()\n      df_plot = df_plot[df_plot['Confirmed']>threshold]\n      df_plot['Total_Cases'] = df_plot['Confirmed']\n      df_plot['Day_Number'] = 1\n      df_plot['Day_Number'] = df_plot.groupby('Country_Region').Day_Number.expanding().sum().reset_index(0,drop=True)\n      df_plot['New_Cases'] = df_plot.groupby('Country_Region').Confirmed.rolling(2).sum().reset_index(0,drop=True)\n      df_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\n  \n      df_plot['New_Deaths'] = df_plot.groupby('Country_Region').Deaths.rolling(2).sum().reset_index(0,drop=True)\n      df_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\n\n      df_plot['New_Recovered'] = df_plot.groupby('Country_Region').Recovered.rolling(2).sum().reset_index(0,drop=True)\n      df_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\n      df_plot['New_Recovered_Mean'] = df_plot.groupby('Country_Region').New_Recovered.rolling(7).mean().reset_index(0,drop=True)\n      df_plot['New_Deaths_Mean'] = df_plot.groupby('Country_Region').New_Deaths.rolling(7).mean().reset_index(0,drop=True)\n      df_plot['New_Cases_Mean'] = df_plot.groupby('Country_Region').New_Cases.rolling(7).mean().reset_index(0,drop=True)\n\n      df_plot['Confirmed_Mean'] = df_plot.groupby('Country_Region').Confirmed.rolling(7).mean().reset_index(0,drop=True)\n      df_plot['Recovered_Mean'] = df_plot.groupby('Country_Region').Recovered.rolling(7).mean().reset_index(0,drop=True)\n      df_plot['Deaths_Mean'] = df_plot.groupby('Country_Region').Deaths.rolling(7).mean().reset_index(0,drop=True)\n      df_plot['Cases_Mean'] = df_plot.groupby('Country_Region').Cases.rolling(7).mean().reset_index(0,drop=True)\n\n      df_plot['Previous_Confirmed'] = df_plot['Confirmed']- df_plot['New_Cases']\n      df_plot['Previous_Confirmed_Mean'] = df_plot.groupby('Country_Region').Previous_Confirmed.rolling(7).mean().reset_index(0,drop=True)\n\n      df_plot['Spread_Rate'] = df_plot.New_Cases_Mean.fillna(0)\/df_plot.Confirmed_Mean\n      df_plot['Death_Rate'] = df_plot['Deaths_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n      df_plot['Death_Rate2'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Cases_Mean']\n      df_plot['Recover_Rate'] = df_plot['Recovered_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n      df_plot['Death_Growth'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Deaths_Mean']\n      \n      df_plot_m = df_plot.melt(id_vars=['Date','Country_Region','Day_Number', 'Total_Cases'], value_vars=variables)\n      df_plot_m.sort_values(by=['Date','Country_Region','variable'], inplace=True)\n      df_plot_m['Date_str'] = df_plot_m.Date.dt.strftime('%Y-%m-%d')\n      \n      df_plot_m = df_plot_m.set_index('Date').groupby(['Country_Region','variable']).resample(resample).ffill()\n      del df_plot_m['Country_Region']\n      del df_plot_m['variable']\n      df_plot_m = df_plot_m.reset_index(level=None, drop=False, inplace=False, col_level=0, col_fill='')\n\n      if pop_ajust == True:\n          df_plot_m = pd.merge(df_plot_m, df_pop, how='left', left_on=['Country_Region'], right_on=['Country Name'])\n          df_plot_m['value'] = df_plot_m['value']\/(df_plot_m['2018']\/1000)\n          df_plot_m['Total_Cases'] = df_plot_m['Total_Cases']\/(df_plot_m['2018']\/1000)\n          title = title +' (per Thousand Inhabitants)'\n      \n      if x == 'Date':\n        if day_num == True:\n           x = 'Day_Number'\n        else:\n           x = 'Date'\n      else:\n        x = x        \n      \n      if invert_hue == True:\n            col = 'Country_Region'\n            hue = 'variable'\n      else:\n            col = 'variable'\n            hue = 'Country_Region'\n            \n      fig = px.line(df_plot_m\n           , y='value'\n           , x=x\n           #, animation_frame=df_plot_m.Date_str\n           #, animation_group=\"Country_Region\"\n           , facet_col_wrap=col_wrap       \n           , facet_col = col   \n           , color=hue\n           , hover_name=df_plot_m.Country_Region\n           , labels={'value':'Number of Cases','Day_Number':\"Days Since \"+ str(threshold) +\"th Case\"}\n           #, range_y=[0.1, df_plot_m.value.max()+5000]\n           #, range_x = [df_plot_m.Date.min(),df_plot_m.Date.max()]\n           #, text=df_plot_m.Country_Region\n           #, size=1\n           , log_x=xlog\n           , log_y=ylog\n           , title=title\n           )\n      if y_share == False: fig.update_yaxes(matches=None) \n      if x_share == False: fig.update_xaxes(matches=None)\n      fig.update_yaxes(showticklabels=True)\n      fig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[1]))\n      fig.show()\n\ncountries = ['Argentina', 'Brazil','US','China','Italy','Germany','South Korea','Canada','Mexico','Portugal','Japan','Sweden']\nvariables = ['Confirmed','Deaths','Recovered']\nfacetgrid_3(countries,variables, day_num =False, y_share = False, ylog = False, xlog = False, \n            resample = 'D', title ='Confirmed, Deaths and Recovered by Country Over Time', invert_hue = False )","239a0e7b":"countries = ['Brazil','Argentina','US','China','Italy','Germany','South Korea','Canada','Mexico','Portugal','Japan','Sweden']\ncountries = ['Sweden','Switzerland','Denmark','Italy','Germany','Finland','Spain','United Kingdom','Portugal','France','Ireland','Japan','South Korea','India','Australia','Brazil','US']\nfacetgrid_3(countries,['Recovered','Deaths','Confirmed'], day_num = True, ylog = False, xlog = False, resample = 'D', pop_ajust=True, title = 'Confirmed, Deaths and Recovered by Country Over Time')","4d6e152a":"countries = ['Argentina','Brazil','US','China','Italy','Germany','South Korea','Canada','Mexico','Portugal','Japan','Sweden']\nfacetgrid_3(countries,['New_Deaths_Mean','New_Cases_Mean', 'New_Recovered_Mean'], day_num = True, ylog = False, xlog = False, resample = 'D', title = 'New Daily Cases by Country Over Time')","ca17a2e0":"countries = ['Argentina','Brazil','US','China','Italy','Germany','South Korea','Canada','Mexico','Portugal','Japan','Sweden']\nfacetgrid_3(countries,['New_Deaths_Mean','New_Cases_Mean', 'New_Recovered_Mean'], day_num = True, ylog = False, xlog = False, resample = 'D',pop_ajust=True, title = 'New Daily Cases by Country Over Time')","e9521d45":"countries = ['Brazil','Argentina','US','China','Italy','Germany','South Korea','Canada','Mexico','Portugal','Japan','Sweden']\nfacetgrid_3(countries,['New_Deaths_Mean','New_Cases_Mean'], x = 'Total_Cases', ylog = True, xlog = True, resample = 'D', pop_ajust=True, title='New Daily Cases Over Total Cases')","b4581483":"countries = ['Brazil','Argentina','US','Italy','Germany','South Korea','Canada','Mexico','Portugal','Japan','Sweden']\ncountries = ['Brazil','Argentina','US','Italy','Germany','South Korea','Canada','Mexico','Portugal','Japan','Sweden','Ireland']\nfacetgrid_3(countries, ['Spread_Rate','Death_Rate', 'Death_Rate2'], day_num = True, ylog = False, xlog = False, resample = 'D', title = 'Death and Spread Rates Over Time')","2b884e8e":"def rate_over_total(countries_bold, countries, variable, x = 'Confirmed', lines=True, pop_ajust = False, title = ''):\n    df_plot = df_cov.copy()\n    df_plot = df_plot[df_plot['Country_Region'].isin(countries)]\n    df_plot = df_plot[['Date','Country_Region','Deaths','Confirmed','Recovered', 'Cases']]\n    df_plot = df_plot.groupby(['Country_Region','Date']).sum().reset_index()\n\n    df_plot = df_plot[df_plot['Confirmed']>10]\n    df_plot['Total_Cases'] = df_plot['Confirmed']\n    df_plot['Day_Number'] = 1\n    df_plot['Day_Number'] = df_plot.groupby('Country_Region').Day_Number.expanding().sum().reset_index(0,drop=True)\n    df_plot['New_Cases'] = df_plot.groupby('Country_Region').Confirmed.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\n\n    df_plot['New_Deaths'] = df_plot.groupby('Country_Region').Deaths.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\n\n    df_plot['New_Recovered'] = df_plot.groupby('Country_Region').Recovered.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\n    df_plot['New_Recovered_Mean'] = df_plot.groupby('Country_Region').New_Recovered.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['New_Deaths_Mean'] = df_plot.groupby('Country_Region').New_Deaths.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['New_Cases_Mean'] = df_plot.groupby('Country_Region').New_Cases.rolling(7).mean().reset_index(0,drop=True)\n\n    df_plot['Confirmed_Mean'] = df_plot.groupby('Country_Region').Confirmed.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Recovered_Mean'] = df_plot.groupby('Country_Region').Recovered.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Deaths_Mean'] = df_plot.groupby('Country_Region').Deaths.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Cases_Mean'] = df_plot.groupby('Country_Region').Cases.rolling(7).mean().reset_index(0,drop=True)\n\n    df_plot['Previous_Confirmed'] = df_plot['Confirmed']- df_plot['New_Cases']\n    df_plot['Previous_Confirmed_Mean'] = df_plot.groupby('Country_Region').Previous_Confirmed.rolling(7).mean().reset_index(0,drop=True)\n\n    df_plot['Spread_Rate'] = df_plot.New_Cases_Mean.fillna(0)\/df_plot.Confirmed_Mean\n    df_plot['Death_Rate'] = df_plot['Deaths_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n    df_plot['Death_Rate2'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Cases_Mean']\n    df_plot['Death_Rate3'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Deaths_Mean']\n    df_plot['Death_Growth'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Deaths_Mean']\n    df_plot['Recover_Rate'] = df_plot['Recovered_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n    df_plot['Days_To_Double'] = np.log(2)\/np.log(df_plot['Spread_Rate']+1)\n\n    if pop_ajust == True:\n          df_plot = pd.merge(df_plot, df_pop, how='left', left_on=['Country_Region'], right_on=['Country Name'])\n          df_plot[variable] = df_plot[variable]\/(df_plot['2018']\/1000)\n          df_plot['Confirmed'] = df_plot['Confirmed']\/(df_plot['2018']\/1000)\n          df_plot['Total_Cases'] = df_plot['Total_Cases']\/(df_plot['2018']\/1000)   \n        \n    sns.set(style=\"darkgrid\", palette=\"Set2\")\n    fig, a4 = plt.subplots(figsize=(10,7))\n    for Country_Region, df_filter in df_plot.groupby('Country_Region'): \n      if Country_Region not in countries_bold:  \n          sns.lineplot(df_filter[x], df_filter[variable], label = Country_Region, linestyle='-', alpha = 0.4, linewidth =0.8) \n\n    for Country_Region, df_filter in df_plot.groupby('Country_Region'):\n      if Country_Region in countries_bold:  \n          sns.lineplot(df_filter[x], df_filter[variable], label = Country_Region, linewidth =3)    \n\n\n    a4.legend(loc='upper right', bbox_to_anchor=(1.3, 1))\n    a4.set_title(title)\n    #a4.set(yscale=\"log\")\n    #a4.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a4.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    a4.set_xlim(df_plot[x].min(), df_plot[x].max())\n    a4.set(xscale=\"log\", yscale=\"log\")\n    plt.xlabel('Total Cases')\n    plt.ylabel('New Cases')\n    if lines == True:\n        x = np.arange(df_plot.Confirmed.min(), df_plot.Confirmed.max())\n        s = x*(2**(1\/2)-1)\n        t = x*(2**(1\/10)-1)\n        y = x*(2**(1\/30)-1)\n        u = x*(2**(1\/60)-1)\n        a4.plot(x, s, ls=\"--\", c='silver', alpha = 0.6)\n        a4.plot(x, t, ls=\"--\", c='dodgerblue', alpha = 0.6)\n        a4.plot(x, y, ls=\"--\", c='tomato', alpha = 0.6)\n        a4.plot(x, u, ls=\"--\", c='limegreen', alpha = 0.6)\n        fig.text(0.15, 0.8, 'Double every 2 days', fontfamily = 'serif', horizontalalignment='left',color='grey', fontname = 'DejaVu Sans')\n        fig.text(0.15, 0.77, 'Double every 10 days', fontfamily = 'serif', horizontalalignment='left',color='dodgerblue', fontname = 'DejaVu Sans')\n        fig.text(0.15, 0.74, 'Double every 30 days', fontfamily = 'serif', horizontalalignment='left',color='tomato', fontname = 'DejaVu Sans')\n        fig.text(0.15, 0.71, 'Double every 60 days', fontfamily = 'serif', horizontalalignment='left',color='limegreen', fontname = 'DejaVu Sans')   \n    plt.show()\n    \ncountries_bold = ['Brazil','Argentina']\ncountries = ['Argentina','Brazil','US','China','Spain','Italy','United Kingdom','Germany','Iraq','South Korea','Canada','Mexico','Portugal','Japan','Rusia','Sweden','Switzerland','Iceland','Denmark','Netherlands','Germany']\nrate_over_total(countries_bold = countries_bold, countries=countries, variable= 'New_Cases_Mean', x = 'Confirmed', lines=True, pop_ajust = True, title = 'New Daily Cases Over Total Cases')","af6cfaef":"\ndef rate_over_time(countries_bold, countries, variable, x = 'Day_Number', lines=True, title=''):\n    df_plot = df_cov.copy()\n    df_plot = df_plot[df_plot['Country_Region'].isin(countries)]\n    df_plot = df_plot[['Date','Country_Region','Deaths','Confirmed','Recovered', 'Cases']]\n    df_plot = df_plot.groupby(['Country_Region','Date']).sum().reset_index()\n\n    df_plot = df_plot[df_plot['Confirmed']>10]\n    df_plot['Total_Cases'] = df_plot['Confirmed']\n    df_plot['Day_Number'] = 1\n    df_plot['Day_Number'] = df_plot.groupby('Country_Region').Day_Number.expanding().sum().reset_index(0,drop=True)\n    df_plot['New_Cases'] = df_plot.groupby('Country_Region').Confirmed.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\n\n    df_plot['New_Deaths'] = df_plot.groupby('Country_Region').Deaths.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\n\n    df_plot['New_Recovered'] = df_plot.groupby('Country_Region').Recovered.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\n    df_plot['New_Recovered_Mean'] = df_plot.groupby('Country_Region').New_Recovered.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['New_Deaths_Mean'] = df_plot.groupby('Country_Region').New_Deaths.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['New_Cases_Mean'] = df_plot.groupby('Country_Region').New_Cases.rolling(7).mean().reset_index(0,drop=True)\n\n    df_plot['Confirmed_Mean'] = df_plot.groupby('Country_Region').Confirmed.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Recovered_Mean'] = df_plot.groupby('Country_Region').Recovered.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Deaths_Mean'] = df_plot.groupby('Country_Region').Deaths.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Cases_Mean'] = df_plot.groupby('Country_Region').Cases.rolling(7).mean().reset_index(0,drop=True)\n\n    df_plot['Previous_Confirmed'] = df_plot['Confirmed']- df_plot['New_Cases']\n    df_plot['Previous_Confirmed_Mean'] = df_plot.groupby('Country_Region').Previous_Confirmed.rolling(7).mean().reset_index(0,drop=True)\n\n    df_plot['Spread_Rate'] = df_plot.New_Cases_Mean.fillna(0)\/df_plot.Confirmed_Mean\n    df_plot['Death_Rate'] = df_plot['Deaths_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n    df_plot['Death_Rate2'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Cases_Mean']\n    df_plot['Death_Rate3'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Deaths_Mean']\n    df_plot['Death_Growth'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Deaths_Mean']\n    df_plot['Recover_Rate'] = df_plot['Recovered_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n    df_plot['Days_To_Double'] = np.log(2)\/np.log(df_plot['Spread_Rate']+1)\n\n\n    sns.set(style=\"darkgrid\", palette=\"Set2\")\n    fig, a4 = plt.subplots(figsize=(10,7))\n    for Country_Region, df_filter in df_plot.groupby('Country_Region'): \n      if Country_Region not in countries_bold:  \n          sns.lineplot(df_filter[x], df_filter[variable], label = Country_Region, linestyle='-', alpha = 0.6, linewidth =0.5) \n\n    for Country_Region, df_filter in df_plot.groupby('Country_Region'):\n      if Country_Region in countries_bold:  \n          sns.lineplot(df_filter[x], df_filter[variable], label = Country_Region, linewidth =3)    \n\n\n    a4.legend(loc='upper right', bbox_to_anchor=(1.4, 1))\n    a4.set_title(title)\n    #a4.set(yscale=\"log\")\n    #a4.xaxis.set_major_formatter(mdates.DateFormatter('%b'))\n    a4.xaxis.set_major_locator(mdates.MonthLocator(interval=1))\n    a4.set_xlim(df_plot[x].min(), df_plot[x].max())\n    #a4.yaxis.set_major_formatter(mtick.PercentFormatter(decimals=2))\n    plt.xlabel('Days Since 10th Case')\n    plt.ylabel('Spread Rate')\n    if lines == True:\n            kwargs={'linestyle':'--'}\n            a4.axhline(2**(1\/2)-1, alpha=0.8, color='silver', **kwargs)\n            a4.text(df_plot[x].max(), (2**(1\/2)-1)+0.005, 'Double every 2 days', fontfamily = 'serif', horizontalalignment='right',color='grey', fontname = 'DejaVu Sans')\n            a4.axhline(2**(1\/10)-1, alpha=0.8, color='dodgerblue', **kwargs)\n            a4.text(df_plot[x].max(), (2**(1\/10)-1)+0.005, 'Double every 10 days', fontfamily = 'serif', horizontalalignment='right',color='dodgerblue', fontname = 'DejaVu Sans')\n            a4.axhline(2**(1\/30)-1, alpha=0.8, color='tomato', **kwargs)\n            a4.text(df_plot[x].max(), (2**(1\/30)-1)+0.005, 'Double every 30 days', fontfamily = 'serif', horizontalalignment='right',color='tomato', fontname = 'DejaVu Sans')\n            a4.axhline(2**(1\/60)-1, alpha=0.8, color='limegreen', **kwargs)\n            a4.text(df_plot[x].max(), (2**(1\/60)-1)-0.018, 'Double every 60 days', fontfamily = 'serif', horizontalalignment='right',color='limegreen', fontname = 'DejaVu Sans')\n    plt.show()\n\ncountries_bold = ['Brazil','Argentina']\ncountries = ['Argentina','Brazil','US','China','Spain','Italy','United Kingdom','Germany','Iraq','South Korea','Canada','Mexico','Portugal','Japan','Rusia','Sweden','Switzerland','Iceland','Denmark','Netherlands','Germany']\nrate_over_time(countries_bold = ['Argentina','Brazil'], countries=countries, variable='Spread_Rate', x = 'Day_Number', lines=True, title = 'Spread Rate Over Time')","5c4168de":"def facet_grid(countries, variable, x='Date', day_num = False, xlog = False, ylog = False, \n               x_share = True, y_share = True, pop_ajust = False, resample = 'W', col_wrap=5, threshold = 10):\n\n    df_gr = df_cov.groupby(['Date','Country_Region','Province_State']).sum().reset_index()\n\n    df_plot = df_gr[df_gr['Country_Region'].isin(countries)]\n    df_plot = df_plot[['Date','Country_Region','Deaths','Confirmed','Recovered', 'Cases']]\n    df_plot = df_plot.groupby(['Country_Region','Date']).sum().reset_index()\n    df_plot = df_plot[df_plot['Confirmed']>threshold]\n    df_plot['Total_Cases'] = df_plot['Confirmed']\n    df_plot['Day_Number'] = 1\n    df_plot['Day_Number'] = df_plot.groupby('Country_Region').Day_Number.expanding().sum().reset_index(0,drop=True)\n    df_plot['New_Cases'] = df_plot.groupby('Country_Region').Confirmed.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\n  \n    df_plot['New_Deaths'] = df_plot.groupby('Country_Region').Deaths.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\n\n    df_plot['New_Recovered'] = df_plot.groupby('Country_Region').Recovered.rolling(2).sum().reset_index(0,drop=True)\n    df_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\n    df_plot['New_Recovered_Mean'] = df_plot.groupby('Country_Region').New_Recovered.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['New_Deaths_Mean'] = df_plot.groupby('Country_Region').New_Deaths.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['New_Cases_Mean'] = df_plot.groupby('Country_Region').New_Cases.rolling(7).mean().reset_index(0,drop=True)\n\n    df_plot['Confirmed_Mean'] = df_plot.groupby('Country_Region').Confirmed.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Recovered_Mean'] = df_plot.groupby('Country_Region').Recovered.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Deaths_Mean'] = df_plot.groupby('Country_Region').Deaths.rolling(7).mean().reset_index(0,drop=True)\n    df_plot['Cases_Mean'] = df_plot.groupby('Country_Region').Cases.rolling(7).mean().reset_index(0,drop=True)\n\n    df_plot['Previous_Confirmed'] = df_plot['Confirmed']- df_plot['New_Cases']\n    df_plot['Previous_Confirmed_Mean'] = df_plot.groupby('Country_Region').Previous_Confirmed.rolling(7).mean().reset_index(0,drop=True)\n\n    df_plot['Spread_Rate'] = df_plot.New_Cases_Mean.fillna(0)\/df_plot.Confirmed_Mean\n    df_plot['Death_Rate'] = df_plot['Deaths_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n    df_plot['Death_Rate2'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Cases_Mean']\n    df_plot['Death_Growth'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Deaths_Mean']\n    df_plot['Recover_Rate'] = df_plot['Recovered_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n    \n     \n    df_plot = df_plot.set_index('Date').groupby(['Country_Region']).resample(resample).ffill()\n    del df_plot['Country_Region']\n    df_plot = df_plot.reset_index(level=None, drop=False, inplace=False, col_level=0, col_fill='')\n\n    if pop_ajust == True:\n        df_plot = pd.merge(df_plot, df_pop, how='left', left_on=['Country_Region'], right_on=['Country Name'])\n        df_plot[variable] = df_plot[variable]\/(df_plot['2018']\/1000)\n        df_plot = df_plot[df_plot['Confirmed']>=0]\n        df_plot = df_plot[df_plot[variable]>=0]\n        \n    if x == 'Date':\n        if day_num == True:\n            x = 'Day_Number'\n        else:\n            x = 'Date'\n    else:\n        x = x     \n    \n\n    if xlog == True: \n        xlog = 'log'\n    else:\n        xlog = 'linear'    \n\n    if ylog == True: \n        ylog = 'log'\n    else:\n        ylog = 'linear'  \n    \n    sns.set(style=\"darkgrid\",palette=\"Set2\", font='sans-serif', font_scale=0.95, color_codes=True, rc=None)\n    g = sns.FacetGrid(df_plot, col='Country_Region', hue='Country_Region', col_wrap=col_wrap, sharex = x_share, sharey = y_share, height=3.5, aspect=1)\n    g = g.map(plt.plot, x, variable)\n    g = g.map(plt.fill_between, x, variable, alpha=0.4).set_titles(\"{col_name} Country_Region\")\n    if xlog == 'log':\n         g.set(xscale = xlog) \n    if ylog == 'log':\n         g.set(yscale = ylog)         \n    g = g.set_titles(\"{col_name}\")\n    g = g.fig.autofmt_xdate()\n    \n   \n    plt.subplots_adjust(top=0.92)\n    plt.show()\n\ncountries = ['Brazil','China','US','Italy','Spain','Germany','Argentina','Ecuador','United Kingdom','Portugal',\n             'Iran', 'Canada','Australia','South Korea','India','Russia','Sweden','Denmark','Switzerland','Mexico']\nvariable = 'Deaths'    \nfacet_grid(countries, variable, day_num = False, xlog = False, ylog = True, \n           x_share = True, y_share = True, pop_ajust = True, resample = 'W', col_wrap=5)","4325439a":"def facetgrid_2(countries, variables, x='Date', day_num = False, invert_hue = False, xlog = False, ylog = False\n                , x_share = True, y_share = True, pop_ajust = False, resample = 'W', col_wrap=5, height=3.5,threshold = 10):\n\n      date = df_cov.groupby(['Date']).sum().reset_index().Date\n      date = date.to_frame()\n      country_province = (df_cov.groupby(['Country_Region', 'Province_State']).sum().reset_index()).filter(['Country_Region', 'Province_State'])\n      date['Key'] = 1\n      country_province['Key'] = 1\n      dt_cnt_prv = pd.merge(date, country_province)\n\n      df_gr = df_cov.groupby(['Date','Country_Region','Province_State']).sum().reset_index()\n      df_gr = pd.merge(dt_cnt_prv, df_gr, how = 'left')\n\n      df_plot = df_gr[df_gr['Country_Region'].isin(countries)]\n      df_plot = df_plot[['Date','Country_Region','Deaths','Confirmed','Recovered', 'Cases']]\n      df_plot = df_plot.groupby(['Country_Region','Date']).sum().reset_index()\n      df_plot = df_plot[df_plot['Confirmed']>threshold]\n      df_plot['Total_Cases'] = df_plot['Confirmed']\n      df_plot['Day_Number'] = 1\n      df_plot['Day_Number'] = df_plot.groupby('Country_Region').Day_Number.expanding().sum().reset_index(0,drop=True)\n      df_plot['New_Cases'] = df_plot.groupby('Country_Region').Confirmed.rolling(2).sum().reset_index(0,drop=True)\n      df_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\n  \n      df_plot['New_Deaths'] = df_plot.groupby('Country_Region').Deaths.rolling(2).sum().reset_index(0,drop=True)\n      df_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\n\n      df_plot['New_Recovered'] = df_plot.groupby('Country_Region').Recovered.rolling(2).sum().reset_index(0,drop=True)\n      df_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\n      df_plot['New_Recovered_Mean'] = df_plot.groupby('Country_Region').New_Recovered.rolling(7).mean().reset_index(0,drop=True)\n      df_plot['New_Deaths_Mean'] = df_plot.groupby('Country_Region').New_Deaths.rolling(7).mean().reset_index(0,drop=True)\n      df_plot['New_Cases_Mean'] = df_plot.groupby('Country_Region').New_Cases.rolling(7).mean().reset_index(0,drop=True)\n\n      df_plot['Confirmed_Mean'] = df_plot.groupby('Country_Region').Confirmed.rolling(7).mean().reset_index(0,drop=True)\n      df_plot['Recovered_Mean'] = df_plot.groupby('Country_Region').Recovered.rolling(7).mean().reset_index(0,drop=True)\n      df_plot['Deaths_Mean'] = df_plot.groupby('Country_Region').Deaths.rolling(7).mean().reset_index(0,drop=True)\n      df_plot['Cases_Mean'] = df_plot.groupby('Country_Region').Cases.rolling(7).mean().reset_index(0,drop=True)\n\n      df_plot['Previous_Confirmed'] = df_plot['Confirmed']- df_plot['New_Cases']\n      df_plot['Previous_Confirmed_Mean'] = df_plot.groupby('Country_Region').Previous_Confirmed.rolling(7).mean().reset_index(0,drop=True)\n\n      df_plot['Spread_Rate'] = df_plot.New_Cases_Mean.fillna(0)\/df_plot.Confirmed_Mean\n      df_plot['Death_Rate'] = df_plot['Deaths_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n      df_plot['Death_Rate2'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Cases_Mean']\n      df_plot['Death_Growth'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Deaths_Mean']\n      df_plot['Recover_Rate'] = df_plot['Recovered_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n      \n      df_plot_m = df_plot.melt(id_vars=['Date','Country_Region','Day_Number', 'Total_Cases'], value_vars=variables)\n      df_plot_m.sort_values(by=['Date','Country_Region','variable'], inplace=True)\n      df_plot_m['Date_str'] = df_plot_m.Date.dt.strftime('%Y-%m-%d')\n      \n      df_plot_m = df_plot_m.set_index('Date').groupby(['Country_Region','variable']).resample(resample).ffill()\n      del df_plot_m['Country_Region']\n      del df_plot_m['variable']\n      df_plot_m = df_plot_m.reset_index(level=None, drop=False, inplace=False, col_level=0, col_fill='')\n\n      if pop_ajust == True:\n          df_plot_m = pd.merge(df_plot_m, df_pop, how='left', left_on=['Country_Region'], right_on=['Country Name'])\n          df_plot_m['value'] = df_plot_m['value']\/(df_plot_m['2018']\/1000)\n      \n      if x == 'Date':\n        if day_num == True:\n           x = 'Day_Number'\n        else:\n           x = 'Date'\n      else:\n        x = x       \n\n      if xlog == True: \n        xlog = 'log'\n      else:\n        xlog = 'linear'    \n\n      if ylog == True: \n        ylog = 'log'\n      else:\n        ylog = 'linear'  \n      \n      if invert_hue == True:\n            col = 'Country_Region'\n            hue = 'variable'\n      else:\n            col = 'variable'\n            hue = 'Country_Region'        \n     \n      sns.set(style=\"darkgrid\",palette=\"Set2\", font='sans-serif', font_scale=0.95, color_codes=True, rc=None)\n\n      g = sns.FacetGrid(df_plot_m, col=col, hue=hue, col_wrap=col_wrap,sharex = x_share, sharey = y_share, height=height, aspect=1)\n      g = g.map(plt.plot, x, 'value').add_legend()\n      if xlog == 'log':\n         g.set(xscale = xlog) \n      if ylog == 'log':\n         g.set(yscale = ylog) \n      g = g.set_titles(\"{col_name}\")\n      g = g.fig.autofmt_xdate()\n    #  plt.subplots_adjust(top=0.78)\n    #  plt.suptitle('THIS IS A TITLE, YOU BET') \n \n      plt.show()\n\ncountries = ['Brazil','US','China','Italy','Germany','South Korea','Canada','Mexico','Portugal','Japan','Sweden']\nvariables = ['Recovered','Deaths','Confirmed']\nfacetgrid_2(countries, variables, x='Date', day_num = False, invert_hue = False, xlog = False, ylog = True, \n            x_share = True, y_share = True, pop_ajust = True, resample = 'W', col_wrap=3, height=5)\n","95158842":"variable = 'Confirmed'\ncountries = ['Brazil']\ndf_plot = df_cov.copy()\n#df_plot = df_plot[df_plot['Country_Region'].isin(countries)]\ndf_plot = df_plot.groupby(['Combined_Key','Date']).sum().reset_index()\ndf_plot['Date_str'] = df_plot.Date.dt.strftime('%Y-%m-%d')\n\ndf_plot['New_Cases'] = df_plot.groupby('Combined_Key').Confirmed.rolling(2).sum().reset_index(0,drop=True)\ndf_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\ndf_plot['New_Deaths'] = df_plot.groupby('Combined_Key').Deaths.rolling(2).sum().reset_index(0,drop=True)\ndf_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\ndf_plot['New_Recovered'] = df_plot.groupby('Combined_Key').Recovered.rolling(2).sum().reset_index(0,drop=True)\ndf_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\ndf_plot['New_Recovered_Mean'] = df_plot.groupby('Combined_Key').New_Recovered.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['New_Deaths_Mean'] = df_plot.groupby('Combined_Key').New_Deaths.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['New_Cases_Mean'] = df_plot.groupby('Combined_Key').New_Cases.rolling(7).mean().reset_index(0,drop=True)\n\ndf_plot['Confirmed_Mean'] = df_plot.groupby('Combined_Key').Confirmed.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['Recovered_Mean'] = df_plot.groupby('Combined_Key').Recovered.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['Deaths_Mean'] = df_plot.groupby('Combined_Key').Deaths.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['Cases_Mean'] = df_plot.groupby('Combined_Key').Cases.rolling(7).mean().reset_index(0,drop=True)\n\ndf_plot['Spread_Rate'] = df_plot.New_Cases_Mean.fillna(0)\/df_plot.Confirmed_Mean\ndf_plot['Death_Rate'] = df_plot['Deaths_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\ndf_plot['Death_Rate2'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Cases_Mean']\ndf_plot['Death_Growth'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Deaths_Mean']\ndf_plot['Recover_Rate'] = df_plot['Recovered_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n\ndf_plot = df_plot[df_plot['Date'] == df_plot['Date'].max() + timedelta(days=-1)]\n  \ndf_plot.Lat = df_plot.Lat.fillna(0)\ndf_plot.Longitude = df_plot.Longitude.fillna(0)\ndf_plot = df_plot[(df_plot['Lat'] != 0) & (df_plot['Longitude'] != 0)]\n\ndf_plot = df_plot.dropna()\ndf_plot = df_plot[(df_plot[variable] > 0)]\n\n\n\nlon, lat = -86.276, 30.935 \nzoom_start = 5\n\nlat = df_plot.Lat.tolist()\nlng = df_plot.Longitude.tolist()\nsize = df_plot[variable].tolist()\n\ndata = list(zip(lat, lng, size))\nm = folium.Map([48, 5], zoom_start=2,max_zoom=10,min_zoom=0)\n\nHeatMap(data).add_to(folium.FeatureGroup(name='Heat Map').add_to(m))\nfolium.LayerControl().add_to(m)\n\nm","7b290b37":"def folium_map(variable, countries=[],zoom=0.5, lat_center=0, long_center = 0, group_by_country = False, pop_ajust = False, adjust_rate = 1):\n        df_plot = df_cov.copy()\n        if countries != []:\n            df_plot = df_plot[df_plot['Country_Region'].isin(countries)]\n        \n        if countries != []:\n            df_plot = df_plot[df_plot['Country_Region'].isin(countries)]\n\n        if group_by_country == True or pop_ajust == True:\n            group_by = 'Country_Region'\n        else:\n            group_by = 'Combined_Key'\n\n\n        df_plot = df_plot.groupby([group_by,'Date']).sum().reset_index()\n        df_plot['Date_str'] = df_plot.Date.dt.strftime('%Y-%m-%d')\n        #df_plot = df_plot[df_plot['Deaths'] >= 20]\n        df_plot['New_Cases'] = df_plot.groupby(group_by).Confirmed.rolling(2).sum().reset_index(0,drop=True)\n        df_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\n        df_plot['New_Deaths'] = df_plot.groupby(group_by).Deaths.rolling(2).sum().reset_index(0,drop=True)\n        df_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\n        df_plot['New_Recovered'] = df_plot.groupby(group_by).Recovered.rolling(2).sum().reset_index(0,drop=True)\n        df_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\n        df_plot['New_Recovered_Mean'] = df_plot.groupby(group_by).New_Recovered.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['New_Deaths_Mean'] = df_plot.groupby(group_by).New_Deaths.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['New_Cases_Mean'] = df_plot.groupby(group_by).New_Cases.rolling(7).mean().reset_index(0,drop=True)\n\n        df_plot['Confirmed_Mean'] = df_plot.groupby(group_by).Confirmed.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['Recovered_Mean'] = df_plot.groupby(group_by).Recovered.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['Deaths_Mean'] = df_plot.groupby(group_by).Deaths.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['Cases_Mean'] = df_plot.groupby(group_by).Cases.rolling(7).mean().reset_index(0,drop=True)\n\n        df_plot['Spread_Rate'] = df_plot['New_Cases_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n        df_plot['Death_Rate'] = df_plot['Deaths_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n        df_plot['Death_Rate2'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Cases_Mean']\n        df_plot['Recover_Rate'] = df_plot['Recovered_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n\n\n        df_plot = df_plot[df_plot['Date'] == df_plot['Date'].max() + timedelta(days=-1)]\n\n        df_coor = df_cov[['Date',group_by,'Lat','Longitude','Confirmed']]\n        df_coor = df_coor.loc[df_coor.groupby(group_by).Confirmed.idxmax()]\n        df_coor = df_coor[[group_by,'Lat','Longitude']]\n        del df_plot['Lat']\n        del df_plot['Longitude']\n        df_plot = pd.merge(df_plot, df_coor, how='left', left_on=[group_by], right_on=[group_by])\n\n        df.replace([np.inf, -np.inf], np.nan)\n        df_plot = df_plot.dropna()\n        \n        df_plot[variable+'_adjst'] = df_plot[variable]*df_plot['Confirmed'].max()\/df_plot[variable].max()*adjust_rate\n\n        df_plot['2018'] = 'N.A'\n        if group_by_country == True:\n            df_plot = df_plot[df_plot['Deaths'] >= 100]\n        else:\n            df_plot = df_plot[df_plot['Deaths'] >= 20]\n\n\n        if pop_ajust == True:\n            del df_plot['2018']\n            df_plot = pd.merge(df_plot, df_pop, how='left', left_on=['Country_Region'], right_on=['Country Name'])\n\n            df_plot[variable+'_adjst'] = df_plot[variable]\/(df_plot['2018']\/1000)\n            df_plot[variable+'_adjst'] = df_plot[variable+'_adjst']*df_plot['Confirmed'].max()\/df_plot[variable+'_adjst'].max()*adjust_rate\n            df_plot = df_plot[df_plot['Deaths'] >= 100]\n        \n        variable = variable +'_adjst'\n\n        df_plot.Lat = df_plot.Lat.fillna(0)\n        df_plot.Longitude = df_plot.Longitude.fillna(0)\n        df_plot = df_plot[(df_plot['Lat'] != 0) & (df_plot['Longitude'] != 0)]\n        \n\n        df_plot = df_plot[(df_plot[variable] > 0)]\n\n        map = folium.Map(location=[lat_center,long_center], zoom_start=zoom,max_zoom=10,min_zoom=0)\n        for i in range(0,len(df_plot[df_plot[variable]>0].index)):\n                    folium.Circle(\n                        location=[df_plot.iloc[i]['Lat'], df_plot.iloc[i]['Longitude']],\n                        tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+df_plot.iloc[i][group_by]+\"<\/h5>\"+\n                                    \"<hr style='margin:10px;'>\"+\n                                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n                        \"<li>Confirmed: \"+str(df_plot.iloc[i]['Confirmed'])+\"<\/li>\"+\n                        \"<li>Recovered:   \"+str(df_plot.iloc[i]['Recovered'])+\"<\/li>\"+\n                        \"<li>Deaths:   \"+str(df_plot.iloc[i]['Deaths'])+\"<\/li>\"+\n                        \"<li>Active: \"+str(df_plot.iloc[i]['Cases'])+\"<\/li>\"+\n                        \"<li>New Cases:   \"+str(df_plot.iloc[i]['New_Cases'])+\"<\/li>\"+\n                        \"<li>New Recovered:   \"+str(df_plot.iloc[i]['New_Recovered'])+\"<\/li>\"+\n                        \"<li>New Deaths:   \"+str(df_plot.iloc[i]['New_Deaths'])+\"<\/li>\"+\n                        \"<li>Spread Rate:   \"+str(df_plot.iloc[i]['Spread_Rate'])+\"<\/li>\"+\n                        \"<li>Death Rate:   \"+str(df_plot.iloc[i]['Death_Rate'])+\"<\/li>\"+\n                        \"<li>Recover Rate:   \"+str(df_plot.iloc[i]['Recover_Rate'])+\"<\/li>\"+\n                        \"<li>Instant Death Rate:   \"+str(df_plot.iloc[i]['Death_Rate2'])+\"<\/li>\"+\n                        \"<li>Poulation(2018):   \"+str(df_plot.iloc[i]['2018'])+\"<\/li>\"+\n                        \"<\/ul>\"\n                        ,\n                        radius=(int((df_plot.iloc[i][variable]))),\n                        color='#ff8533',\n                        fill_color='#ff8533',\n                        fill=True).add_to(map)\n\n        return map","bc989eb6":"folium_map(countries = [], variable = 'New_Deaths_Mean', zoom=0.5, lat_center=0, long_center = 0, group_by_country = False, pop_ajust = False, adjust_rate =7)","3ef404e4":"def top_botton(variable, countries=[], group_by_country = False, pop_ajust = False, top_botton = 'Top', cut = 10):\n        df_plot = df_cov.copy()\n        if countries != []:\n            df_plot = df_plot[df_plot['Country_Region'].isin(countries)]\n        \n        if countries != []:\n            df_plot = df_plot[df_plot['Country_Region'].isin(countries)]\n\n        if group_by_country == True or pop_ajust == True:\n            group_by = 'Country_Region'\n        else:\n            group_by = 'Combined_Key'\n\n\n        df_plot = df_plot.groupby([group_by,'Date']).sum().reset_index()\n        df_plot['Date_str'] = df_plot.Date.dt.strftime('%Y-%m-%d')\n        #df_plot = df_plot[df_plot['Deaths'] >= 20]\n        df_plot['New_Cases'] = df_plot.groupby(group_by).Confirmed.rolling(2).sum().reset_index(0,drop=True)\n        df_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\n        df_plot['New_Deaths'] = df_plot.groupby(group_by).Deaths.rolling(2).sum().reset_index(0,drop=True)\n        df_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\n        df_plot['New_Recovered'] = df_plot.groupby(group_by).Recovered.rolling(2).sum().reset_index(0,drop=True)\n        df_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\n        df_plot['New_Recovered_Mean'] = df_plot.groupby(group_by).New_Recovered.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['New_Deaths_Mean'] = df_plot.groupby(group_by).New_Deaths.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['New_Cases_Mean'] = df_plot.groupby(group_by).New_Cases.rolling(7).mean().reset_index(0,drop=True)\n\n        df_plot['Confirmed_Mean'] = df_plot.groupby(group_by).Confirmed.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['Recovered_Mean'] = df_plot.groupby(group_by).Recovered.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['Deaths_Mean'] = df_plot.groupby(group_by).Deaths.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['Cases_Mean'] = df_plot.groupby(group_by).Cases.rolling(7).mean().reset_index(0,drop=True)\n\n        df_plot['Spread_Rate'] = df_plot['New_Cases_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n        df_plot['Death_Rate'] = df_plot['Deaths_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n        df_plot['Death_Rate2'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Cases_Mean']\n        df_plot['Death_Growth'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Deaths_Mean']\n        df_plot['Recover_Rate'] = df_plot['Recovered_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n\n\n        df_plot = df_plot[df_plot['Date'] == df_plot['Date'].max() + timedelta(days=-1)]\n\n        df_coor = df_cov[['Date',group_by,'Lat','Longitude','Confirmed']]\n        df_coor = df_coor.loc[df_coor.groupby(group_by).Confirmed.idxmax()]\n        df_coor = df_coor[[group_by,'Lat','Longitude']]\n        del df_plot['Lat']\n        del df_plot['Longitude']\n        df_plot = pd.merge(df_plot, df_coor, how='left', left_on=[group_by], right_on=[group_by])\n\n        df.replace([np.inf, -np.inf], np.nan)\n        df_plot = df_plot.dropna()\n        \n\n        df_plot['2018'] = 'N.A'\n        if group_by_country == True or pop_ajust == True:\n            df_plot = df_plot[df_plot['Deaths'] >= 100]\n        else:\n            df_plot = df_plot[df_plot['Deaths'] >= 20]\n\n        title_end= ''\n        if pop_ajust == True:\n            del df_plot['2018']\n            df_plot = pd.merge(df_plot, df_pop, how='left', left_on=['Country_Region'], right_on=['Country Name'])\n            df_plot[variable] = df_plot[variable]\/(df_plot['2018']\/1000)\n            variable = variable\n            title_end= ' (per Thousand Inhabitants)'\n            \n        df_plot.Lat = df_plot.Lat.fillna(0)\n        df_plot.Longitude = df_plot.Longitude.fillna(0)\n        df_plot = df_plot[(df_plot['Lat'] != 0) & (df_plot['Longitude'] != 0)]\n\n        title = top_botton + ' ' + variable + title_end\n        \n        cut = -1*cut\n        if top_botton == 'Botton':\n            ascending_ = False\n        else:\n            ascending_ = True\n        \n        df_plot = df_plot[(df_plot[variable] > 0)]\n        df_plot.index = df_plot[group_by]\n        plt.axes(axisbelow=True)\n        plt.barh(df_plot.sort_values(variable, ascending = ascending_)[variable].index[cut:],df_plot.sort_values(variable, ascending = ascending_)[variable].values[cut:])\n        #plt.tick_params(size=5,labelsize = 13)\n        plt.xlabel(variable,fontsize=10)\n        plt.title(title,fontsize=10)\n        plt.grid(alpha=0.3)\n\n               ","d308bdf2":"top_botton(variable='New_Deaths_Mean', countries=[], group_by_country = True, pop_ajust = True, top_botton = 'Top')  \n","e1477c38":"def facetgrid_4(countries, variables, x='Date', day_num = False, invert_hue = False, xlog = False, ylog = False\n                , x_share = True, y_share = False, group_by_country = False, pop_ajust = False, resample = 'W', col_wrap=3,threshold = 10,title=''):\n       \n        \n        df_plot = df_cov.copy()\n        if countries != []:\n            df_plot = df_plot[df_plot['Country_Region'].isin(countries)]\n        \n        if countries != []:\n            df_plot = df_plot[df_plot['Country_Region'].isin(countries)]\n\n        if group_by_country == True or pop_ajust == True:\n            group_by = 'Country_Region'\n        else:\n            group_by = 'Province_State'\n            df_plot = df_plot[df_plot['Province_State'] != df_plot['Country_Region']]\n            \n\n\n        df_plot = df_plot.groupby([group_by,'Date']).sum().reset_index()\n        df_plot['Date_str'] = df_plot.Date.dt.strftime('%Y-%m-%d')\n        df_plot = df_plot[df_plot['Confirmed'] >= threshold]\n        df_plot['Total_Cases'] = df_plot['Confirmed']\n        df_plot['Day_Number'] = 1\n        df_plot['Day_Number'] = df_plot.groupby(group_by).Day_Number.expanding().sum().reset_index(0,drop=True)\n        df_plot['New_Cases'] = df_plot.groupby(group_by).Confirmed.rolling(2).sum().reset_index(0,drop=True)\n        df_plot['New_Cases'] = 2*df_plot.Confirmed - df_plot['New_Cases']\n        df_plot['New_Deaths'] = df_plot.groupby(group_by).Deaths.rolling(2).sum().reset_index(0,drop=True)\n        df_plot['New_Deaths'] = 2*df_plot.Deaths - df_plot['New_Deaths']\n        df_plot['New_Recovered'] = df_plot.groupby(group_by).Recovered.rolling(2).sum().reset_index(0,drop=True)\n        df_plot['New_Recovered'] = 2*df_plot.Recovered - df_plot['New_Recovered']\n\n        df_plot['New_Recovered_Mean'] = df_plot.groupby(group_by).New_Recovered.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['New_Deaths_Mean'] = df_plot.groupby(group_by).New_Deaths.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['New_Cases_Mean'] = df_plot.groupby(group_by).New_Cases.rolling(7).mean().reset_index(0,drop=True)\n\n        df_plot['Confirmed_Mean'] = df_plot.groupby(group_by).Confirmed.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['Recovered_Mean'] = df_plot.groupby(group_by).Recovered.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['Deaths_Mean'] = df_plot.groupby(group_by).Deaths.rolling(7).mean().reset_index(0,drop=True)\n        df_plot['Cases_Mean'] = df_plot.groupby(group_by).Cases.rolling(7).mean().reset_index(0,drop=True)\n\n        df_plot['Spread_Rate'] = df_plot['New_Cases_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n        df_plot['Death_Rate'] = df_plot['Deaths_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n        df_plot['Death_Rate2'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Cases_Mean']\n        df_plot['Death_Growth'] = df_plot['New_Deaths_Mean'].fillna(0)\/df_plot['Deaths_Mean']\n        df_plot['Recover_Rate'] = df_plot['Recovered_Mean'].fillna(0)\/df_plot['Confirmed_Mean']\n\n        df.replace([np.inf, -np.inf], np.nan)\n        df_plot = df_plot.dropna()\n\n        title_end= ''        \n                    \n        df_plot_m = df_plot.melt(id_vars=['Date',group_by,'Day_Number', 'Total_Cases'], value_vars=variables)\n        df_plot_m.sort_values(by=['Date',group_by,'variable'], inplace=True)\n        df_plot_m['Date_str'] = df_plot_m.Date.dt.strftime('%Y-%m-%d')\n\n        df_plot_m = df_plot_m.set_index('Date').groupby([group_by,'variable']).resample(resample).ffill()\n        del df_plot_m[group_by]\n        del df_plot_m['variable']\n        df_plot_m = df_plot_m.reset_index(level=None, drop=False, inplace=False, col_level=0, col_fill='')\n\n        if pop_ajust == True:\n              df_plot_m = pd.merge(df_plot_m, df_pop, how='left', left_on=['Country_Region'], right_on=['Country Name'])\n              df_plot_m['value'] = df_plot_m['value']\/(df_plot_m['2018']\/1000)\n              df_plot_m['Total_Cases'] = df_plot_m['Total_Cases']\/(df_plot_m['2018']\/1000)\n              title = title +' (per Thousand Inhabitants)'\n\n        if x == 'Date':\n            if day_num == True:\n               x = 'Day_Number'\n            else:\n               x = 'Date'\n        else:\n            x = x        \n\n        if invert_hue == True:\n                col = group_by\n                hue = 'variable'\n        else:\n                col = 'variable'\n                hue = group_by\n\n        fig = px.line(df_plot_m\n               , y='value'\n               , x=x\n               #, animation_frame=df_plot_m.Date_str\n               #, animation_group=\"Country_Region\"\n               , facet_col_wrap=col_wrap       \n               , facet_col = col   \n               , color=hue\n               , hover_name=df_plot_m[group_by]\n               , labels={'value':'Number of Cases','Day_Number':\"Days Since \"+ str(threshold) +\"th Case\"}\n               #, range_y=[0.1, df_plot_m.value.max()+5000]\n               #, range_x = [df_plot_m.Date.min(),df_plot_m.Date.max()]\n               #, text=df_plot_m.Country_Region\n               #, size=1\n               , log_x=xlog\n               , log_y=ylog\n               , title=title\n               )\n        if y_share == False: fig.update_yaxes(matches=None) \n        if x_share == False: fig.update_xaxes(matches=None)\n        fig.update_yaxes(showticklabels=True)\n        fig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[1]))\n        fig.show()\n\ncountries = ['Brazil']\nvariables = ['Death_Rate','Death_Rate2','Spread_Rate']\nfacetgrid_4(countries, variables, x='Date', day_num = False, invert_hue = False, xlog = False, ylog = False\n                , x_share = True, y_share = False, group_by_country = False, pop_ajust = False, resample = 'D', col_wrap=3,threshold = 10,title='Covid-19 in Brazilian States')    ","da8bad1f":"countries = ['US']\nvariables = ['Confirmed','Deaths','Recovered']\nfacetgrid_4(countries, variables, x='Date', day_num = False, invert_hue = False, xlog = False, ylog = False\n                , x_share = True, y_share = False, group_by_country = False, pop_ajust = False, resample = 'D', col_wrap=3,threshold = 10,title='Covid-19 in US States')    ","79fdac4d":"countries = ['US']\nvariables = ['New_Deaths_Mean','New_Cases_Mean', 'New_Recovered_Mean']\nfacetgrid_4(countries, variables, x='Date', day_num = False, invert_hue = False, xlog = False, ylog = False\n                , x_share = True, y_share = False, group_by_country = False, pop_ajust = False, resample = 'D', col_wrap=3,threshold = 10,title='Covid-19 in US States') ","ec22463a":"countries = ['US']\nvariables = ['Death_Rate','Death_Rate2','Spread_Rate']\nfacetgrid_4(countries, variables, x='Date', day_num = False, invert_hue = False, xlog = False, ylog = False\n                , x_share = True, y_share = False, group_by_country = False, pop_ajust = False, resample = 'D', col_wrap=3,threshold = 10,title='Covid-19 in US States')     ","52f8ae0b":"countries = ['US']\nvariables = ['New_Deaths_Mean','New_Cases_Mean']\nfacetgrid_4(countries, variables, x='Total_Cases', day_num = False, invert_hue = False, xlog = True, ylog = True\n                , x_share = True, y_share = False, group_by_country = False, pop_ajust = False, resample = 'D', col_wrap=2,threshold = 10,title='Covid-19 in US States') ","db50935e":"df_mbl= pd.read_csv(\"https:\/\/www.gstatic.com\/covid19\/mobility\/Global_Mobility_Report.csv\", low_memory = False)\n\ndf_mbl.columns = df_mbl.columns.str.replace(\"_percent_change_from_baseline\", \"\")\ndf_mbl.columns = df_mbl.columns.str.replace(\"and_\", \"\")\ndf_mbl['total_social_activity'] = round((df_mbl['retail_recreation'] + df_mbl['grocery_pharmacy'] + df_mbl['transit_stations'] + df_mbl['workplaces'] + df_mbl['parks'])\/6)\ndf_mbl.date = pd.to_datetime(df_mbl.date, format='%Y-%m-%d')\n","55a6ebc0":"#@title\ncountry= 'Brazil'\nvariable = 'total_social_activity'\ndf_plot = df_mbl[(df_mbl['country_region'] == country) & (df_mbl.sub_region_1.notnull())]\n\n\nfig = px.line(df_plot, x=\"date\", y=variable, color=\"sub_region_1\", \n             title='Social Activity in ' + country + ' ('+variable+')')\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()\n","c0291fe7":"#@title\ncountries = ['Brazil','Argentina','United States','China','Italy','Germany','South Korea','Canada','Mexico','Portugal','Japan','Sweden']\n\ndf_plot = df_mbl[(df_mbl['country_region'].isin(countries)) & (df_mbl.sub_region_1.isnull())]\n\npd.options.mode.chained_assignment = None\ndf_plot['retail_recreation'] = df_plot.groupby(['country_region']).retail_recreation.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['grocery_pharmacy'] = df_plot.groupby(['country_region']).grocery_pharmacy.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['transit_stations'] = df_plot.groupby(['country_region']).transit_stations.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['workplaces'] = df_plot.groupby(['country_region']).workplaces.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['parks'] = df_plot.groupby(['country_region']).parks.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['residential'] = df_plot.groupby(['country_region']).residential.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['total_social_activity'] = df_plot.groupby(['country_region']).total_social_activity.rolling(7).mean().reset_index(0,drop=True)\n\ndf_plot_m = df_plot.melt(id_vars=['date','country_region'], value_vars=['retail_recreation','grocery_pharmacy', 'transit_stations','workplaces','parks','residential','total_social_activity'])\n\n\n\nfig = px.line(df_plot_m\n           , y=\"value\"\n           , x=\"date\"\n           #, animation_frame=df_plot_m.Date_str\n           #, animation_group=\"Country_Region\"\n           , facet_col = df_plot_m.variable\n           , facet_col_wrap=4\n           , color=df_plot_m.country_region\n           , hover_name=df_plot_m.country_region\n           , hover_data = ['date','country_region', 'variable','value']\n           #, range_y=[0, df_plot_m.value.max()*1.01]\n           #, range_x = [df_plot_m.Day_Number.min(),df_plot_m.Day_Number.max()]\n          # , text=df_plot_m.Country_Region\n         #  , size=1\n           , log_x=False\n           , log_y=False\n           , title='Social Activity by Country Over Time'\n           )\nfig.for_each_annotation(lambda a: a.update(text=a.text.split(\"=\")[1]))\nfig.show()","61536402":"#@title\ndf_plot = df_mbl.copy()\n\n#del df_plot['residential']\ndel df_plot['total_social_activity']\ndel df_plot['census_fips_code']\ncorr = df_plot.corr()\n\n# Generate a mask for the upper triangle\nmask = np.triu(np.ones_like(corr, dtype=np.bool)) ##top triangle maks\nmask_b = np.tril(corr) ## botton triangle mas\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(11, 9))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nax.set_title('Correlation Matrix', fontsize = 18, x = 0.168)\nax = sns.heatmap(corr, mask = mask_b, cmap='coolwarm',vmax=1,vmin=-1, center=0, annot = True, cbar_kws={\"shrink\": 1, 'orientation': 'vertical'}, cbar=True, square=True, linewidths=0.5)\n","1af1b29e":"#@title\ndf_plot = df_mbl.copy()\ncountries = ['Sweden','Switzerland','Iceland','Denmark','Netherlands','Germany']\ndf_plot = df_mbl[(df_mbl['country_region'].isin(countries)) & (df_mbl.sub_region_1.isnull())]\n\ndel df_plot['residential']\ndel df_plot['total_social_activity']\ndel df_plot['sub_region_1']\ndel df_plot['sub_region_2']\ndel df_plot['iso_3166_2_code']\ndel df_plot['census_fips_code']\n\n\nax = sns.pairplot(df_plot, hue = 'country_region')","557d2a20":"#@title\ncountry= 'Brazil'\nvariable = 'total_social_activity'\ndf_plot = df_mbl[(df_mbl['country_region'] == country) & (df_mbl.sub_region_1.notnull())]\n#df_plot= df_plot.groupby(['country_region','sub_region_1']).mean().reset_index()\ndf_plot = df_plot.set_index('date').groupby(['country_region','sub_region_1']).last().reset_index()\n\ndel df_plot['sub_region_2']\ndel df_plot['iso_3166_2_code']\ndel df_plot['census_fips_code']\ndel df_plot['country_region_code']\n\ndf_plot.style.background_gradient(cmap='Blues',subset=['retail_recreation'])\\\n                        .background_gradient(cmap='Reds',subset=['grocery_pharmacy'])\\\n                        .background_gradient(cmap='Greens',subset=['parks'])\\\n                        .background_gradient(cmap='Purples',subset=['transit_stations'])\\\n                        .background_gradient(cmap='YlOrBr',subset=['workplaces'])\\\n                        .background_gradient(cmap='Blues',subset=['residential'])\\\n                        .background_gradient(cmap='Reds',subset=['total_social_activity'])\\","e648ca21":"#@title\ncountry= 'Brazil'\nvariable = 'total_social_activity'\ndf_plot = df_mbl[(df_mbl['country_region'] == country) & (df_mbl.sub_region_1.notnull())]\n\npd.options.mode.chained_assignment = None\ndf_plot.sort_values(by=['date','country_region','sub_region_1'], inplace=True)\ndf_plot['retail_recreation'] = df_plot.groupby(['sub_region_1']).retail_recreation.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['grocery_pharmacy'] = df_plot.groupby(['sub_region_1']).grocery_pharmacy.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['transit_stations'] = df_plot.groupby(['sub_region_1']).transit_stations.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['workplaces'] = df_plot.groupby(['sub_region_1']).workplaces.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['parks'] = df_plot.groupby(['sub_region_1']).parks.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['residential'] = df_plot.groupby(['sub_region_1']).residential.rolling(7).mean().reset_index(0,drop=True)\ndf_plot['total_social_activity'] = df_plot.groupby(['sub_region_1']).total_social_activity.rolling(7).mean().reset_index(0,drop=True)\n                                                                                                                         \n#df_plot= df_plot.groupby(['country_region','sub_region_1']).mean().reset_index()\ndf_plot = df_plot.set_index('date').groupby(['country_region','sub_region_1']).last().reset_index()\ndf_plot.index = df_plot.sub_region_1\ndel df_plot['country_region']\ndel df_plot['sub_region_1']\ndel df_plot['sub_region_2']\ndel df_plot['country_region_code']\ndel df_plot['iso_3166_2_code']\ndel df_plot['census_fips_code']\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(9, 15))\n\n# Generate a custom diverging colormap\ncmap = sns.diverging_palette(220, 10, as_cmap=True)\nax.set_title('Activity Heatmap', fontsize = 18, x = 0.168)\nax = sns.heatmap(df_plot, cmap='coolwarm',vmax=40,vmin=-80, center=-20, annot = True, cbar_kws={\"shrink\": 1, 'orientation': 'vertical'}, cbar=True, square=False, linewidths=0.5)\n","98243200":"#@title\ndf_lckdn = pd.read_csv('https:\/\/raw.githubusercontent.com\/andre-trierveiler\/COV-19_Daily_Following\/master\/data\/coronaviruos_lockdowns.csv', sep = ';')\ndf_lckdn.Start_Date = pd.to_datetime(df_lckdn.Start_Date, format='%d\/%m\/%Y')\ndf_lckdn.End_Date = pd.to_datetime(df_lckdn.End_Date, format='%d\/%m\/%Y')\n\ndf_notes = pd.read_csv('https:\/\/raw.githubusercontent.com\/andre-trierveiler\/COV-19_Daily_Following\/master\/data\/coronaviruos_annotations.csv', sep = ';')\ndf_notes.Date = pd.to_datetime(df_notes.Date, format='%d\/%m\/%Y')\n","f0c32fdb":"#@title\ndf_mbl.date = pd.to_datetime(df_mbl.date, format='%Y-%m-%d')\ndf_plot = pd.merge(df_mbl, df_notes, how='left', left_on=['date','country_region'], right_on=['Date','Country_Region'])\n\ncountry= 'Brazil'\ndf_plot = df_plot[(df_plot['country_region'] == country) & (df_plot.sub_region_1.isnull())]\nsns.set(style=\"darkgrid\", palette='deep', font='sans-serif', font_scale=1, color_codes=True, rc=None)\nstyle = dict(size=10, color='gray')\n\nfig, ax = plt.subplots(figsize=(15, 7))\nax.plot(df_plot.date,df_plot.total_social_activity, alpha=0.1, linestyle='-')\n#ax2.legend(loc='upper left')\nplt.title('Social Activity in ' + country)\nax.fmt_xdata = mdates.DateFormatter('%Y-%m')\nfig.autofmt_xdate()\nfor i in range(len(df_plot[df_plot.Date.notnull()].index)):\n  ax.text(df_plot[df_plot.Date.notnull()].iloc[i]['Date'], df_plot[df_plot.Date.notnull()].iloc[i]['total_social_activity']+3, i, fontfamily = 'serif', horizontalalignment='left',color='#524939', fontname = 'DejaVu Sans')\n  fig.text(x=0.12, y= 0.0-i*0.02, s=str(i) + ' ' +df_plot[df_plot.Date.notnull()].iloc[i]['Anotation'], **style)\nplt.fill_between(df_plot.date, df_plot.total_social_activity, color='#539ecd', alpha = 0.4)\nplt.show()\n","6e9fe12f":"#@title\ndf_mbl.date = pd.to_datetime(df_mbl.date, format='%Y-%m-%d')\ndf_plot = pd.merge(df_mbl, df_notes, how='left', left_on=['date','country_region'], right_on=['Date','Country_Region'])\n\ncountry= 'Italy'\ndf_plot = df_plot[(df_plot['country_region'] == country) & (df_plot.sub_region_1.isnull())]\n\ndf_hach = df_lckdn[(df_lckdn.Country_Region == country) & (df_lckdn.Level == 'National')]\n\nsns.set(style=\"darkgrid\", palette='deep', font='sans-serif', font_scale=1, color_codes=True, rc=None)\nstyle = dict(size=10, color='gray')\n\nfig, ax = plt.subplots(figsize=(15, 7))\nax.plot(df_plot.date,df_plot.total_social_activity, alpha=0.4, linestyle='-')\n\nplt.title('Social Activity in ' + country)\nax.fmt_xdata = mdates.DateFormatter('%Y-%m')\nfig.autofmt_xdate()\nplt.fill_between(df_plot.date, df_plot.total_social_activity, color='#539ecd', alpha = 0.2)\nfor i in range(len(df_hach[df_hach.Start_Date.notnull()].index)):\n  plt.axvspan(df_hach.Start_Date.min(), df_hach.End_Date.max(), facecolor='tomato', alpha=0.1)\n  ax.text(df_hach.Start_Date.max()++ timedelta(days=1), df_plot['total_social_activity'].min()-1, 'Lockdown', fontfamily = 'serif', horizontalalignment='left',color='#524939', fontname = 'DejaVu Sans')\n  ax.axvline(df_hach.Start_Date.max(), alpha=0.3, color='red')\n  ax.axvline(df_hach.End_Date.max(), alpha=0.3, color='red')\nfor i in range(len(df_plot[df_plot.Date.notnull()].index)):\n  ax.annotate(i, xy=(df_plot[df_plot.Date.notnull()].iloc[i]['Date'], df_plot[df_plot.Date.notnull()].iloc[i]['total_social_activity']),  \n            bbox=dict(boxstyle=\"round\", fc=\"none\", ec=\"gray\"),\n            xytext=(-30, -40), textcoords='offset points', ha='center',\n            arrowprops=dict(arrowstyle=\"fancy\",\n                            fc=\"0.6\", ec=\"none\",\n                            connectionstyle=\"angle3,angleA=0,angleB=-90\"))\n  fig.text(x=0.91, y= 0.85-i*0.02, s=str(i) + ' ' +df_plot[df_plot.Date.notnull()].iloc[i]['Anotation'], **style)\n  #ax.text(df_plot[df_plot.Date.notnull()].iloc[i]['Date'], df_plot[df_plot.Date.notnull()].iloc[i]['total_social_activity']+3, i, fontfamily = 'serif', horizontalalignment='left',color='#524939', fontname = 'DejaVu Sans')\n  #fig.text(x=0.91, y= 0.85-i*0.02, s=str(i) + ' ' +df_plot[df_plot.Date.notnull()].iloc[i]['Anotation'], **style)\nplt.show()","6f55eab8":"**Matplotlib Version of Facetgrid_3() Function**","4f2459d5":"<a id=\"Heatmaps\"><\/a>\n[Return to table of contents](#table-of-contents)\n## Heatmaps\n\nPloly Express Mapbox Density maps. The function returns a map of the chosen variable over time.\nThat way we cant plot heatmaps of the main variables with one line of code. We can also adjust the variable per thousand inhabitants which adds more possibilities to the analyze.\nThe timelapse argument when True plots it over time\n\nIn this chart we're plotting the number of new daily deaths(week average) adjusted by the country population. Thus, we visualize the hotspots of new deaths over time, relativily to each country total population.","93c0c329":"<a id=\"Social Activity and Quarentine Period\"><\/a>\n[Return to table of contents](#table-of-contents)\n## Social Activity and Quarentine Period\n\nHere we plot social activity along with some key-point notes on social isolation and lockdown measures adopted by countries","d234f118":"# Covid-19: Data Analysis and Data Visualization References\n\n(last updated July, 21nd)\n\nCoronavirus disease 2019 (COVID-19) is an infectious disease caused by severe acute respiratory syndrome coronavirus 2 (SARS-CoV-2).It was first identified in December 2019 in Wuhan, China, and has since spread globally, resulting in an ongoing pandemic. As of 25 May 2020, more than 5.46 million cases have been reported across 188 countries and territories, resulting in more than 344,000 deaths. More than 2.19 million people have recovered. ([Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Coronavirus_disease_2019))\n\nThis notebook uses de data from John Hopinks University about the spread of the COVID-19 to study and practice some data visualization tools, to explore data visualization options and to do some comparative analisys across countries.\n\nMost of the notebook is done throught functions, so that the plots are easily customized, which allow us make a variety of different plots with little work.\n\nSome of the charts are a little redundant (the same basic data in different visualizations) since the initial objective of the notebook is to study and practice.\nData manimulation is also redundant. Each chart is built from the raw data even tought they use similar information. That way each plot works independently, we dont need to run the notebook in any specfic order.\n\n**Our goals are to:**\n1. Summarize the situation of a country or state in good looking graphics\n2. Analyze the situation around the world over time using geospatial charts \n3. Easily make comparisons of the main variables across countries \n4. Visualize some Google mobility data and understand social activity during the lockdown or quarantine period\n\n<a id=\"table-of-contents\"><\/a>\n\n#### Table of contentes\n\n\n [1. Overview Plots](#Over View Plots)\n*     [Global Overview Grid](#Global Overview Grid)\n*     [Country Overview Grid](#Country Overview Grid)\n*     [Province-State Overview Grid](#Province-State Overview Grid)\n*     [Confirmed, Death and Recovered Cases Over Time](#Confirmed, Death and Recovered Cases Over Time)\n*     [Country Overview Grid (2)](#Country Overview Grid 2)\n\n\n [2. Geospatial Visualization](#Geospatial Visualization)\n*      [US Confirmed Cases Timelapse](#US Confirmed Cases Timelapse)\n*      [Heatmaps](#Heatmaps)\n\n\n [3. Cross Countries Comparison](#Cross Countries Comparison)\n*      [Confirmed, Death and Recovered Cases Timelapse](#Confirmed, Death and Recovered Cases Timelapse)\n*      [New Cases Over Total Cases Timelapse](#New Cases Over Total Cases Timelapse)\n*      [Confirmed, Death and Recovered Cases by Country Over Time](#Confirmed, Death and Recovered Cases by Country Over Time)\n*      [Confirmed, Death and Recovered Cases by Country Over Time (per Thousand Inhabitants)](#Confirmed, Death and Recovered Cases by Country Over Time (per Thousand Inhabitants))\n*      [New Daily Cases by Country Over Time](#New Daily Cases by Country Over Time)\n*      [New Daily Cases by Country Over Time (per Thousand Inhabitants)](#New Daily Cases by Country Over Time (per Thousand Inhabitants))\n*      [New Daily Cases Over Total Cases Cases by Country](#New Daily Cases Over Total Cases Cases by Country)\n*      [Death Rate, Instant Death Rate and Spread Rate by Country Overtime](#Death Rate, Instant Death Rate and Spread Rate by Country Overtime)\n*      [Closer look into Spread Rate](#Closer look into Spread Rate)\n*      [Alternative plots](#Alternative plots)\n\n\n [4. Google Mobility Data ](#Google Mobility Data)\n*      [Social Activity Across a Country](#Social Activity Across a Country)\n*      [Social Activity Across Countries](#Social Activity Across Countries)\n*      [Social Activity Correlation Matrix](#Social Activity Correlation Matrix)\n*      [Social Activity Pair Plots](#Social Activity Pair Plots)\n*      [Social Activity Heatmap (table)](#Social Activity Heatmap tab)\n*      [Soical Activity Heatmap (plot)](#Soical Activity Heatmap plot)\n*      [Social Activity Quarentine Period](#Social Activity Through Quarentine Period)\n\n     \n\n\n\n","5a5eb923":"<a id=\"Province-State Overview Grid\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Province-State Overview Grid\n\nSame matplotlib but with a province or state data.","728b4028":"<a id=\"Google Mobility Data\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Google Mobility Data\n\nHere a few plots using the google mobilty data.\nThis is important to understand how the social distancening and lockdowns truly afected the social activity","626b0aae":"<a id=\"Global Overview Grid\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Global Overview Grid\n\nA matplotlib grid to summarize the global numbers of coronavirus.","40d63242":"<a id=\"Social Activity Correlation Matrix\"><\/a>\n[Return to table of contents](#table-of-contents)\n## Social Activity Correlation Matrix","1c8f8218":"** Top\/Botton Locations**\n\nThe function returns a horizontal barplot with the top or botton x countries\/locations by a given variable.\nGood way to determine hotspots","6bef11b3":"<a id=\"Confirmed, Death and Recovered Cases Timelapse\"><\/a>\n[Return to table of contents](#table-of-contents)\n## New Cases Over Total Cases Timelapse\n\nPlotly Express Animated Scatter plot. Plots the new daily cases over the total confirmed cases of selecteds countris through time, both in log scale.\n\nThis chart show us cleary that the spread over countries pretty much runs the same way and makes it easy to notice when a given country starts to slow down the spread.\nThe slope of the line on which a given country advances in time represents how fast the virus was spreading. Since any exponential function when ploted in log scale (y axis) is a straight line * when\nit begins to move downwards or even horizontally its a clear sign that the spread is slowing down (as it's not growing exponentialy any more).\n\n*notice that for an exponential function (such as the virus spread) **f (x) = ab ^ x** the log of that function **ln (f (x))** is the derivative function. That's why when we plot y in a log scale we are actully visualyzing the derivative function, thus the growth rate of the function, or spread rate for that matter.\n\nThe same same analyzes could be done with the New_Daily_Deaths over Deaths variables to visualize the slowing down in total deaths.","ca3b32ae":"1. **Confirmed Cases By Country Over Time (per Thousands Inhabitants**\n\n![](http:\/\/)Simple Facetgrid with confirmed cases by country over time. \nIt let you chose the countrys in the and de variable (Confirmed, Deaths or Recovered) ","531018c5":"<a id=\"Country Overview Grid 2\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Country Overview Grid (2)\n\nPlotly Graph Objs Grid. A few plots that try to summarize the country situation overtime.","7efee1b7":"**Folium Heatmap**\n\nAlternative heatmap in Folium","0892d695":"**Import World population data for 2018**","966035f6":"**Facet Grid 4**\nThis time with the option to group by combined key","a50a50b0":"**Setup**","b0336ba8":"<a id=\"Social Activity Across Countries\"><\/a>\n[Return to table of contents](#table-of-contents)\n## Social Activity Across Countries","1c2556ea":"<a id=\"US Confirmed Cases Timelapse\"><\/a>\n## US Confirmed Cases Timelapse\n\nA plotly Express Scatter Mapbox. Plots a map timelapse of the confirmed cases in the USA.\n(Since USA is the only country where data is segregated by city \/ state in the John Hopinks datas)","64b221d1":"<a id=\"New Daily Cases by Country Over Time\"><\/a>\n[Return to table of contents](#table-of-contents)\n## New Daily Cases by Country Over Time\n\nPlotly Express facetgrid plot. Plots the number of new daily(*) cases scale over the number of days since the 10th case\n\n*New Daily Cases are a 7 days rolling mean","138b227f":"<a id=\"Confirmed, Death and Recovered Cases by Country Over Time\"><\/a>\n[Return to table of contents](#table-of-contents)\n## Confirmed, Death and Recovered Cases by Country Over Time\n\nPlolty Express facetgrid plot. \n\nThe facetgrid_3() function allow us to plot many diffente facetgrids with one line of code, its highly customizable.\n\nIt allow us to change the countries of analizes easily,select the variables we want to compare, chose if the plot will be over datetime, over the number of days since x confirmed cases, or even over another variable. Also allow us to adjust the variable per thousands inhabitants, define log scales, and resample the data.\n\nThe invert_hue parameter inverts the countries and variables logic. So if invert_hue = True instead of a subplot for each variable with the countries data you will get a subplot por each country with all the variables in it\n\n\nIt allows you to easily change the countries of analysis, select the variables we want to compare, choose whether the graph will be over datetime, over the number of days since x confirmed cases, or even over another variable. It also allows us to adjust the variable by thousands of inhabitants, define log scales, share axis and resample the data.\n\nThe invert_hue parameter reverses the logic of countries and variables. So, if invert_hue = True, instead of a subplot for each variable with country data ploted, you will get a subplot for each country with all variables ploted\n\n\nThe functon arguments are:\nfacetgrid_3(countries, variables, x='Date', day_num = False, invert_hue = False, xlog = False, ylog = False\n                , x_share = True, y_share = False, pop_ajust = False, resample = 'W', col_wrap=3,threshold = 10,title='')\n                \nThe use of the function is well exemplified in the following charts.","7a82050e":"<a id=\"Confirmed, Death and Recovered Cases Over Time\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Confirmed, Death and Recovered Cases Over Time\n\nPlotly Stacked Area Chart with a Slider. Plots the numbers of Confirmed, Deaths and Recovered cases of an selected country over time. ","db7bc5c9":"**Import Data**","5193ac4e":"<a id=\"Confirmed, Death and Recovered Cases by Country Over Time (per Thousand Inhabitants)\"><\/a>\n[Return to table of contents](#table-of-contents)\n## Confirmed, Death and Recovered Cases by Country Over Time (per Thousand Inhabitants)\n\nPlotly Express facetgrid plot. Plots the number of cases in log scale over the number of days since the 10th case adjusted by country population.","aca3f6c1":"<a id=\"Social Activity Heatmap chart\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Social Activity Heatmap (chart)","1294868f":"This charts adds some reference lines to provide a more intuitive look of how the virus is spreading.\nIt also alow us to highlight some countries of interest.","1d9773c7":"**Annotations And Lockdown Period Over Social Activity**","187d57c4":"<a id=\"Social Activity Across a Country\"><\/a>\n[Return to table of contents](#table-of-contents)\n## Social Activity Across a Country","0a217223":"**Import Data from Johns Hopkins**","c854ad03":"<a id=\"New Daily Cases Over Total Cases by Country\"><\/a>\n[Return to table of contents](#table-of-contents)\n## New Daily Cases Over Total Cases by Country\n\nMatplotlib facetgrid plot. Plots the number of new daily(*) cases in log scale over the number of total cases also in log scale\n\nAs explained earlier:\n\nThis chart show us cleary that the spread over countries pretty much runs the same way and makes it easy to notice when a given country starts to slow down the spread. The slope of the line on which a given country advances represents how fast the virus was spreading. Since any exponential function when ploted in log scale (y axis) is a straight line * when it begins to move downwards or even horizontally its a clear sign that the spread is slowing down (as it's not growing exponentialy any more).\n\n*notice that for an exponential function (such as the virus spread) f (x) = ab ^ x the log of that function ln (f (x)) is the derivative function. That's why when we plot y in a log scale we are actully visualyzing the derivative function, thus the growth rate of the function, or spread rate for that matter.\n\nThe same same analyzes could be done with the New_Daily_Deaths to visualize the slowing down in total deaths.\n\n*New Daily cases are a 7 days rolling mean","59a0fa07":"<a id=\"Cross Countries Comparison\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Cross Countries Comparison\n\nHere we start some comparative analizys across countries.","0c4c3b2d":"<a id=\"New Daily Cases by Country Over Time (per Thousand Inhabitants)\"><\/a>\n[Return to table of contents](#table-of-contents)\n## New Daily Cases by Country Over Time (per Thousand Inhabitants)\n\n\nPlotly Express facetgrid plot. Plots the number of new daily(*) cases scale over the number of days since the 10th case  adjusted by country population.\n\n*New Daily Cases are a 7 days rolling mean\n","d46c7436":"<a id=\"Death Rate, Instant Death Rate and Spread Rate by Country Over Time\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Death Rate, Instant Death Rate and Spread Rate by Country Over Time\n\nMatplotlib facetgrid plot. Plots the rates over the number of days since the 10th case\n\n**Death_Rate_2:** since the Death_Rate is a cumulative number the Death_Rate2 tries to capture the instant death rate in a certain time. It's calculated by the reason of the daily new deaths over the current active cases in the time.","15a6a79a":"<a id=\"Closer look into Spread Rate\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Closer look into Spread Rate","a765377a":"<a id=\"Alternative Charts\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Alternative Charts\n(This is for practice and future references)\n\nHere some alternative charts to visualize de data.\nThere's a matplotlib version of the previous facet_grid_3 funcition, some alternative uses of that, other animated and plolty express charts.\n","375d56d4":"**Folium Map Funcition**\n\n","2a50f68c":"<a id=\"Country Overview Grid\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Country Overview Grid\n\nFunction returns a matplotlib grid to summarize the numbers of coronavirus in a selected country.","88557e0b":"<a id=\"Confirmed, Death and Recovered Cases Timelapse\"><\/a>\n[Return to table of contents](#table-of-contents)\n## Confirmed, Death and Recovered Cases Timelapse\n\nPlotly Express Animated Barchar. Each variable ploted separatedly in a timelapse barchart","268c1366":"<a id=\"Social Activity Pair Plots\"><\/a>\n[Return to table of contents](#table-of-contents)\n## Social Activity Pair Plots","7879c253":"<a id=\"Social Activity Heatmap table\"><\/a>\n[Return to table of contents](#table-of-contents)\n## Social Activity Heatmap (table)","9734d269":"<a id=\"Geospatial Visualization\"><\/a>\n[Return to table of contents](#table-of-contents)\n# Geospatial Visualization","445c0a58":"**Simple Annotation Over Social Activity**"}}