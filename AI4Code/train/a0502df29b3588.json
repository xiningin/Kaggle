{"cell_type":{"f5ef79c5":"code","94b0bc7b":"code","b1d671a4":"code","1fe46042":"code","aa34f3bd":"code","b085be63":"code","dbb40bab":"code","4405abf8":"code","f831b706":"code","d20340ea":"code","8428cd35":"markdown","e0b4de96":"markdown","22438065":"markdown","46287132":"markdown","ea2b8f48":"markdown","44750bb9":"markdown","dc6e6f6a":"markdown"},"source":{"f5ef79c5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","94b0bc7b":"trip = pd.read_csv('..\/input\/citibike-system-data\/201306-citibike-tripdata.csv')\ntrip.head()","b1d671a4":"trip = trip[['bikeid', 'starttime', 'stoptime', 'start station id', 'end station id']]\ntrip = trip.dropna(subset=['end station id'])\ntrip['end station id'] = trip['end station id'].astype('int64')\ntrip.head()","1fe46042":"trip = trip.sort_values(['bikeid', 'starttime', 'stoptime'])\ntrip.head()","aa34f3bd":"air = trip\nair['flag'] = trip['start station id'] - trip['end station id'].shift(periods=1)\nair = air.dropna(subset=['flag'])\nair['flag'] = (air['flag'] > 0)\nair['flag'] = air['flag'].astype(np.int64)\nair.head()","b085be63":"air['end station id'] = air['end station id'].shift(periods=1)\nair['stoptime'] = air['stoptime'].shift(periods=1)\nair = air.dropna(subset=['end station id'])\nair['end station id'] = air['end station id'].astype(np.int64)\nair = air[air['flag'] > 0]\nair.head()","dbb40bab":"arrivals = air[['start station id', 'starttime', 'flag']]\narrivals = arrivals.rename(columns={\"start station id\":\"station id\", \"starttime\":\"time\", \"flag\":\"counts\"})\n\ndepartures = air[['end station id', 'stoptime', 'flag']]\ndepartures['flag'] = -departures['flag']\ndepartures = departures.rename(columns={\"end station id\":\"station id\", \"stoptime\":\"time\", \"flag\":\"counts\"})\n\nU = arrivals.append(departures)\nU.head()","4405abf8":"U = U.sort_values(['station id', 'time'])\nU.head()","f831b706":"U['counts'] = U.groupby('station id')['counts'].cumsum()\nU = U.rename(columns={\"counts\":\"aerometafores\"})\nU.head()","d20340ea":"output = U\noutput.to_csv('CitiBike System Data Bike Transfers.csv', index=False)","8428cd35":"Assuming that the data is complete, we can hypothesize that the company redistributes the bikes by transfering bikes from stations with high *availability* to stations with low *availability*. (We define and calculate a station's *availability* [here](https:\/\/www.kaggle.com\/konstantinosalatzas\/citibike-system-data-stations))","e0b4de96":"Intuitively, a discontinuity appears when a bike begins a trip from a start station which is different from the end station of its previous trip.","22438065":"Let $i$ be a row number such that\n* $$bikeid(i)=bikeid(i+1)$$\n* $$endstationid(i)\\neq startstationid(i+1)$$\nWe call that a *discontinuity* in the bike's trip.","46287132":"Define\n$$flag(i+1)=\\left\\{\\begin{matrix}0,startstation(i+1)=endstation(i)\\\\1,startstation(i+1)\\neq endstation(i)\\end{matrix}\\right.$$\nThus, $flag(i)=1$ if and only if there is a *discontinuity* between the $i$-th and ($i+1$)-th trip of the bike.","ea2b8f48":"Assume we have a table with *bikeid*, *starttime*, *stoptime*, *start station id*, *end station id*, grouped by *bikeid* and sorted by *starttime* ascending.","44750bb9":"We group by *bikeid* and sort by *starttime*, *stoptime* ascending.","dc6e6f6a":"Let $i$ be a row number such that $bikeid(i)=bikeid(i+1)$."}}