{"cell_type":{"7dbecca4":"code","0cd917e2":"code","e047e315":"code","5bf805db":"code","3a022cc3":"code","ca5cbd56":"code","ee5fdcb1":"code","6b94494a":"code","89420359":"code","6db0322b":"code","d79232a8":"code","6daafe72":"code","d73bfeb7":"code","1788ae8e":"code","11129122":"code","43f5b839":"code","1545bd61":"code","7d228f88":"code","879a6a65":"code","fd55a869":"code","ed7e7c73":"code","a9a9aedf":"code","8e405395":"code","0c6793fc":"code","fa4c4de5":"code","b792fc66":"code","ecde38af":"markdown","d382dad4":"markdown","1b173b4b":"markdown","fae16c5f":"markdown","92e5532c":"markdown","03d804b4":"markdown","aaed04dd":"markdown","20084ce5":"markdown","a6750fda":"markdown","e9d51336":"markdown","56b954bd":"markdown"},"source":{"7dbecca4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0cd917e2":"import pandas as pd \nimport numpy as np","e047e315":"data = pd.read_csv('\/kaggle\/input\/usa-cers-dataset\/USA_cars_datasets.csv')","5bf805db":"data.head()","3a022cc3":"data.info","ca5cbd56":"data.shape","ee5fdcb1":"data = data.drop(['Unnamed: 0'], axis = 1)","6b94494a":"import seaborn as sns\ndata['price'].hist(grid='False')","89420359":"data['price'].skew()","6db0322b":"# density plot\nsns.distplot(data['price'], hist=True)","d79232a8":"# checking the skewness of mileage column\ndata['mileage'].skew()","6daafe72":"sns.distplot(data['mileage'], hist = True)","d73bfeb7":"log_mileage = np.log(data['mileage'])\nlog_mileage.head()","1788ae8e":"log_mileage.skew()","11129122":"sqrt_mileage = np.sqrt(data['mileage'])\nsqrt_mileage.head()","43f5b839":"sqrt_mileage.skew()","1545bd61":"sns.distplot(sqrt_mileage, hist = True)","7d228f88":"cbrt_mileage = np.cbrt(data['mileage'])\ncbrt_mileage.head()","879a6a65":"cbrt_mileage.skew()","fd55a869":"sns.distplot(cbrt_mileage, hist= True)","ed7e7c73":"log_mileage.skew(),cbrt_mileage.skew(), sqrt_mileage.skew()","a9a9aedf":"name = pd.Series(['Sameer', 'Pankaj', 'Sam' ,'Hemant' , 'Vivek','Ram',\n                     'Suman', 'Anup', 'Mohit','Sandeep'])\nmarks = pd.Series([10,20,30,48,62,87,93,85,60,75])\ndata = ","8e405395":"cla = pd.DataFrame({'Names':name,'Marks': marks})","0c6793fc":"cla","fa4c4de5":"sns.distplot(cla['Marks'], hist = True)","b792fc66":"cla['Marks'].skew()","ecde38af":"# Negative Skewness ","d382dad4":"From this , it is confirmed that it is Positive Skewness as value is also greater than 0.5 \n","1b173b4b":"As, skew value -ve  bt lie in the range  of -0.5 to 0.5 so it is symmetrical type","fae16c5f":"There are some methods to transform the skewness :\n","92e5532c":"This is the moderate effect on the distribution, and it is weaker than logarithm and cube root ","03d804b4":"Skewness is the measure of lack of symmetry.\nAs, the value of skew is greater than 0.5, it doesn't lie in the range of -0.5 to 0.5 so it is Positive Skewness","aaed04dd":"## log > cube Root > square root ","20084ce5":"For left skewness, there are some methods  like : \n1. Square Distribution\n2. Cube Distribution\n3. High Power","a6750fda":"Skew value of mileage have been reduced from 7 to 1.66  ","e9d51336":"For positive skewness \n# 1. Log Transformations :","56b954bd":"# 2. Root Transformation "}}