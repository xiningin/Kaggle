{"cell_type":{"a458a6e4":"code","c762021c":"code","0ec506fa":"code","1686a8f1":"code","c274d5c9":"code","d792490d":"code","c0661700":"code","401b30d6":"code","8b55ba8e":"code","1e58d96b":"code","aad2bf27":"code","e9102bef":"code","49a28b31":"code","7009324a":"code","83d7a8a2":"code","594be5b0":"code","6a1cde0f":"code","4e326f89":"code","51be3b33":"code","9fdd106a":"code","633a5424":"code","3adc8e3b":"code","700a796f":"code","6ec61f01":"code","b2573b61":"code","e0b8a1d5":"code","8b0129a0":"code","57a051e9":"code","100093c0":"code","b5bbf337":"code","f67dc467":"code","ae4643a0":"markdown","b7fd436c":"markdown","2a364b71":"markdown","41120d0d":"markdown","4cef1858":"markdown","114d5c0c":"markdown","10084af9":"markdown","f10ddac4":"markdown","faa74b7c":"markdown"},"source":{"a458a6e4":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))","c762021c":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","0ec506fa":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","1686a8f1":"train.info()","c274d5c9":"test.info()","d792490d":"all = pd.concat([train, test], sort = False)\nall.info()","c0661700":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","401b30d6":"all.info()","8b55ba8e":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","1e58d96b":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","aad2bf27":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","e9102bef":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","49a28b31":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","7009324a":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","83d7a8a2":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","594be5b0":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","6a1cde0f":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","4e326f89":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","51be3b33":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","9fdd106a":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","633a5424":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101, stratify = all_train['Survived'])","3adc8e3b":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier","700a796f":"ada = AdaBoostClassifier(DecisionTreeClassifier(),n_estimators=100, random_state=0)\nada.fit(X_train,y_train)","6ec61f01":"predictions = ada.predict(X_test)","b2573b61":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","e0b8a1d5":"print (f'Train Accuracy - : {ada.score(X_train,y_train):.3f}')\nprint (f'Test Accuracy - : {ada.score(X_test,y_test):.3f}')","8b0129a0":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","57a051e9":"t_pred = ada.predict(TestForPred).astype(int)","100093c0":"PassengerId = all_test['PassengerId']","b5bbf337":"adaSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nadaSub.head()","f67dc467":"adaSub.to_csv(\"1_Ada_Submission.csv\", index = False)","ae4643a0":"****Build AdaBoost","b7fd436c":"****Final Predictions","2a364b71":"# Import Data","41120d0d":"## Combine train and test","4cef1858":"****Train\/Test Split","114d5c0c":"****Extra Features:","10084af9":"# Import Libraries","f10ddac4":"****Check Accuracy","faa74b7c":"****Check Accuracy"}}