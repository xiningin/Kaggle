{"cell_type":{"5b674a34":"code","af5d8b09":"code","516df75b":"code","e80609b7":"code","07040748":"code","9e8d6bbd":"code","147166ea":"code","1f0bc63f":"code","3c3ce5e1":"code","87c8b228":"code","6e873f92":"code","bdb7cc25":"code","d7206127":"code","a27f7f8b":"code","eeca4219":"code","1b5e3699":"code","7765430c":"code","5fcb11f6":"code","d3142a05":"code","cb76ad67":"code","2375d4f7":"code","8c6b0a7e":"markdown","9cd19f5f":"markdown","f93cdb69":"markdown","023c4698":"markdown","380e71a8":"markdown","27321789":"markdown","884a0fee":"markdown","8a147292":"markdown","fb13692f":"markdown","b4cb7ecb":"markdown","7f5b6f11":"markdown","679fabe7":"markdown","e9ccbb93":"markdown"},"source":{"5b674a34":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.plotly  as py\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected = True)\nimport plotly.graph_objs as go\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","af5d8b09":"data = pd.read_csv(\"..\/input\/googleplaystore.csv\")\ndata.head()","516df75b":"newcolumns = []\nfor each in data.columns:\n    each = each.lower()\n    each = each.replace(\" \",\"\")\n    newcolumns.append(each)\ndata.columns = newcolumns\ndata.head()\n","e80609b7":"print(len(data.app))\ndata.drop_duplicates(subset=\"app\", inplace=True)\nprint(len(data.app))","07040748":"data.rating.value_counts()","9e8d6bbd":"data = data[data.rating != 19.0]","147166ea":"data.rename(columns={\"size\":\"appsize\"}, inplace = True) # I changed the column name.\ndata.appsize.value_counts()\n\n","1f0bc63f":"data.appsize = data.appsize.apply(lambda x: str(x).replace(\"Varies with device\",\"NaN\") if \"Varies with device\" in str(x) else x)  # I have to make it nan value.\ndata.appsize = data.appsize.apply(lambda x: str(x).replace(\"M\",\"\") if \"M\" in str(x) else x)\ndata.appsize = data.appsize.apply(lambda x: float(str(x).replace(\"k\",\"\"))\/1000 if \"k\" in str(x) else x) # we need to divide 1000\ndata.appsize = data.appsize.astype(\"float\")","3c3ce5e1":"data.price = data.price.apply(lambda x: str(x).replace(\"$\",\"\") if \"$\" in str(x) else x)","87c8b228":"data.installs.value_counts","6e873f92":"data.installs = data.installs.apply(lambda x: str(x).replace(\"+\",\"\") if \"+\" in str(x) else x)\ndata.installs = data.installs.apply(lambda x: str(x).replace(\",\",\"\") if \",\" in str(x) else x)\ndata.installs = data.installs.astype(\"int64\")\ndata.reviews = data.reviews.astype(\"int64\")\ndata.price = data.price.astype(\"float\")","bdb7cc25":"# Anymore I can examine the data.\ndata.sample(5)","d7206127":"#Let's see heatmeap.\ndata.corr()","a27f7f8b":"f,ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","eeca4219":"rating= data.rating.dropna()\nsize= data.appsize.dropna()\ninstalls= data[\"installs\"][data.installs!=0].dropna()\nreviews= data[\"reviews\"][data.reviews!=0].dropna()\nprice = data.price.dropna()\n\ndatacorr = pd.concat([rating, size, np.log(installs), np.log10(reviews), price], axis=1)\n\nplt.figure(figsize=(15,15))\nsns.pairplot(datacorr,palette=\"rainbow\",markers= ['d'])\nplt.show()","1b5e3699":"labels =data.type.value_counts(sort = True).index\nsizes = data.type.value_counts(sort = True)\ncolors = [\"lightblue\",\"orangered\"]\nexplode = (0.1,0)  # explode 1st slice\n# Plot\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=270,)\nplt.title('Percent of Paid App in store',size = 25)\nplt.show()","7765430c":"# I want to see rate of between \"installs\" and \"reviews\"\n\nlabels =[\"installs\", \"reviews\"]\nsizes = [data.installs.sum(), data.reviews.sum()]\ncolors = [\"lightblue\",\"orangered\"]\nexplode = (0.1,0)  # explode 1st slice\n# Visualize\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,autopct='%1.2f%%', shadow=True, startangle=270,)\nplt.title('Installs count vs Reviews count For All Apps',size = 15)\nplt.show()","5fcb11f6":"free = data[data.type == \"Free\"]\nlabels =[\"free installs\", \"free reviews\"]\nsizes = [free.installs.sum(), free.reviews.sum()]\ncolors = [\"lightblue\",\"orangered\"]\nexplode = (0.1,0)  # explode 1st slice\n # Visualize\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.2f%%', shadow=True, startangle=270,)\nplt.title('Installs count vs Reviews count For Free Apps',size = 15)\nplt.show()","d3142a05":"paid = data[data.type == \"Paid\"]\nlabels =[\"paid installs\", \"paid reviews\"]\nsizes = [paid.installs.sum(), paid.reviews.sum()]\ncolors = [\"lightblue\",\"orangered\"]\nexplode = (0.1,0)  # explode 1st slice\n # Visualize\nplt.pie(sizes, explode=explode, labels=labels, colors=colors,\n        autopct='%1.1f%%', shadow=True, startangle=270,)\n\nplt.title(\"Installs count vs Reviews count For Paid Apps\",size = 15)\nplt.show()\n","cb76ad67":"datapaid = data[data.type == \"Paid\"].groupby(\"category\")[\"app\"].count().sort_values()\ndatafree = data[data.type == \"Free\"].groupby(\"category\")[\"app\"].count().sort_values()","2375d4f7":"trace1 = go.Bar(\n                    x = datafree.index,\n                    y = datafree.values,\n                    name = \"Free\",\n                    marker = dict(color = 'rgba(16, 52, 200, 0.8)'))\ntrace2 = go.Bar(\n                    x = datapaid.index,\n                    y = datapaid.values,\n                    name = \"Paid\",\n                    marker = dict(color = 'rgba(200, 80, 2, 0.8)'))\n\ntemp_data = [trace1,trace2]\nlayout = dict(title = 'Free Apps And Paid Apps Comparison',\n              xaxis= dict(title= 'Categories',ticklen= 3,zeroline= False))\nfig = dict(data = temp_data, layout = layout)\niplot(fig)","8c6b0a7e":"As you see the column names are not tidy. I have to edit those.","9cd19f5f":"Hi. This is my third kernels. And I examined google play store data. This is a simple kernel. So, I didn't write own comment.","f93cdb69":"The \"installs\" column has a lot of dirty rows.","023c4698":"Opps! Normally, \"rating\" values is between 0 and 5. But there is a outlier value, it is \"19.0\". I deleted that row. ","380e71a8":"Lastly, I want to create a graph of categories of paid and free apps. ","27321789":"Anymore, my \"appsize\" column is tidy. I need to edit \"price\" column","884a0fee":"Anymore the column names are usable. Next step, I will delete the duplicate apps.","8a147292":"The rate of paid apps in the dataset is %7.8. ","fb13692f":"Let's look \"rating\" column.","b4cb7ecb":"Regards.\n\n**References**\n1. [All that you need to know about the Android market](https:\/\/www.kaggle.com\/lava18\/all-that-you-need-to-know-about-the-android-market)\n2. [How to get \"High\" Rating on Play Store](https:\/\/www.kaggle.com\/tanetboss\/how-to-get-high-rating-on-play-store)\n3. [Google Playstore EDA](https:\/\/www.kaggle.com\/mrwolfgang\/google-playstore-eda)","7f5b6f11":"I think people is making more comment when they buy app. Next step, I am going to examine categories of paid and free apps.","679fabe7":"As you see there is a lot of dirty rows. I must clear data.","e9ccbb93":"The data has \"size\" column. But \"size\" is a method in numpy. So, I have to change this column name."}}