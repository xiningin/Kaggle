{"cell_type":{"96d1f36c":"code","2cb6a76e":"code","8e89127a":"code","8430435e":"code","756a559c":"code","fa70e750":"code","dffbed57":"code","4e762637":"code","a696d3f8":"code","0aca9771":"code","5f3a5b23":"code","5b8d6c6b":"code","f7949155":"code","f18bb166":"code","df1a20a6":"code","61985cb7":"code","00c9e7a3":"code","485ae97b":"code","d0eefd46":"code","c2cf8a56":"code","edb421b5":"code","b93860eb":"code","e9e81f27":"code","dad84393":"code","f187b0ba":"code","a31ead14":"code","298d105c":"code","ff427d1e":"code","3657c405":"code","7b7e8a3e":"code","f4e53de9":"code","eebf4e49":"code","473a10b9":"code","af3ae367":"code","22635d60":"code","9ea39ab3":"code","fa9181da":"code","0d5a1948":"code","76ab2fd0":"code","e96f2fd0":"code","159907e2":"code","f721d8ea":"code","48162561":"code","a1aaf7a8":"code","e7368570":"code","0f491d9d":"code","36fd8502":"code","03f7fa03":"code","a1ee80ed":"code","b79baba1":"code","ea7d330d":"code","d79a7363":"code","dd862595":"code","9ecb239e":"code","63e3880e":"code","5f5984ba":"code","d385b646":"code","46a016e7":"code","737f5b19":"code","f5e4a2b4":"code","62b97840":"code","f64b8c68":"code","0d196b73":"code","59278999":"code","82fcf348":"code","90ae9538":"code","0eb11909":"code","c721f485":"code","b67d798b":"code","0a903057":"code","caebdfc8":"code","e42e027e":"code","e1822310":"code","172a3f85":"code","2c22d836":"code","b477068d":"code","de790686":"code","31ad29d5":"code","d27b7da4":"code","1f2b7e2c":"code","f213c671":"code","61cb8ce8":"code","4dcfc426":"code","81de9e74":"code","ca525dbe":"code","36870035":"code","c3bf188e":"code","9029563a":"code","7af757ec":"code","dc8dcefb":"code","7870032d":"code","728c8faa":"code","82d10b79":"code","e0a885af":"code","5d6243f4":"code","78380324":"code","bf6054f1":"code","f3e7f2b8":"code","37b65731":"code","703533e3":"code","081d9305":"code","5199e01b":"code","dc286a76":"code","e7be521e":"code","d843d003":"code","168918c9":"code","0dfa695d":"code","91906bb6":"code","27943095":"code","dd2c08a0":"code","af4803b6":"code","980e12fc":"code","5dc1f39c":"code","6242afa8":"code","50538d8a":"code","a77b39f9":"code","b785d36d":"code","9a78dbd3":"code","9b801b8f":"code","b1c38664":"code","75da3015":"code","e820e9d3":"code","849a0969":"code","8616316a":"code","8e769194":"code","410d3666":"code","01f0bb7d":"code","7b05fdad":"code","2dbe87c4":"code","e8633070":"markdown","c9b9a7fa":"markdown","821a1681":"markdown","2111d350":"markdown","80930a9f":"markdown","478b4928":"markdown","400bb405":"markdown","3ea28949":"markdown","0d67b6ec":"markdown","2359a761":"markdown","93534809":"markdown","67f573fd":"markdown","bc8fa203":"markdown","5b4dc3aa":"markdown","0991bf69":"markdown","1c5a9558":"markdown","504c133c":"markdown","02bac721":"markdown","2684a917":"markdown","abf08b6d":"markdown","67769dff":"markdown","46550e3e":"markdown","e11d2438":"markdown","c8885535":"markdown","365e057d":"markdown","39561efc":"markdown","fbd94e0c":"markdown","c8f80bfa":"markdown","674e333e":"markdown","c638550e":"markdown","14d0703f":"markdown","e7d15194":"markdown","d5e9823a":"markdown","09bd451a":"markdown","10f80c30":"markdown","73965d0c":"markdown","dc4d66d3":"markdown","70765d9a":"markdown","73cb9409":"markdown","73fa7009":"markdown","d90b9784":"markdown","771fdeca":"markdown","81f1e816":"markdown","dec25163":"markdown","7f7e9384":"markdown","156164bd":"markdown","6767d25b":"markdown"},"source":{"96d1f36c":"# Suppressing Warnings\nimport warnings\nwarnings.filterwarnings('ignore')","2cb6a76e":"# Importing Pandas and NumPy\nimport pandas as pd, numpy as np","8e89127a":"# Importing all datasets\nchurn_data = pd.read_csv('..\/input\/telecom-churn\/churn_data.csv')\nchurn_data.head()","8430435e":"customer_data = pd.read_csv('..\/input\/telecom-churn\/customer_data.csv')\ncustomer_data.head()","756a559c":"internet_data = pd.read_csv('..\/input\/telecom-churn\/internet_data.csv')\ninternet_data.head()","fa70e750":"# Merging on 'customerID'\ndf_1 = pd.merge(churn_data, customer_data, how='inner', on='customerID')","dffbed57":"# Final dataframe with all predictor variables\ntelecom = pd.merge(df_1, internet_data, how='inner', on='customerID')","4e762637":"# Let's see the head of our master dataset\ntelecom.head()","a696d3f8":"# Let's check the dimensions of the dataframe\ntelecom.shape","0aca9771":"# let's look at the statistical aspects of the dataframe\ntelecom.describe()","5f3a5b23":"# Let's see the type of each column\ntelecom.info()","5b8d6c6b":"# List of variables to map\n\nvarlist =  ['PhoneService', 'PaperlessBilling', 'Churn', 'Partner', 'Dependents']\n\n# Defining the map function\ndef binary_map(x):\n    return x.map({'Yes': 1, \"No\": 0})\n\n# Applying the function to the housing list\ntelecom[varlist] = telecom[varlist].apply(binary_map)","f7949155":"telecom.head()","f18bb166":"# Creating a dummy variable for some of the categorical variables and dropping the first one.\ndummy1 = pd.get_dummies(telecom[['Contract', 'PaymentMethod', 'gender', 'InternetService']], drop_first=True)\n\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom, dummy1], axis=1)","df1a20a6":"telecom.head()","61985cb7":"# Creating dummy variables for the remaining categorical variables and dropping the level with big names.\n\n# Creating dummy variables for the variable 'MultipleLines'\nml = pd.get_dummies(telecom['MultipleLines'], prefix='MultipleLines')\n# Dropping MultipleLines_No phone service column\nml1 = ml.drop(['MultipleLines_No phone service'], 1)\n#Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ml1], axis=1)\n\n# Creating dummy variables for the variable 'OnlineSecurity'.\nos = pd.get_dummies(telecom['OnlineSecurity'], prefix='OnlineSecurity')\nos1 = os.drop(['OnlineSecurity_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,os1], axis=1)\n\n# Creating dummy variables for the variable 'OnlineBackup'.\nob = pd.get_dummies(telecom['OnlineBackup'], prefix='OnlineBackup')\nob1 = ob.drop(['OnlineBackup_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ob1], axis=1)\n\n# Creating dummy variables for the variable 'DeviceProtection'. \ndp = pd.get_dummies(telecom['DeviceProtection'], prefix='DeviceProtection')\ndp1 = dp.drop(['DeviceProtection_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,dp1], axis=1)\n\n# Creating dummy variables for the variable 'TechSupport'. \nts = pd.get_dummies(telecom['TechSupport'], prefix='TechSupport')\nts1 = ts.drop(['TechSupport_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,ts1], axis=1)\n\n# Creating dummy variables for the variable 'StreamingTV'.\nst =pd.get_dummies(telecom['StreamingTV'], prefix='StreamingTV')\nst1 = st.drop(['StreamingTV_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,st1], axis=1)\n\n# Creating dummy variables for the variable 'StreamingMovies'. \nsm = pd.get_dummies(telecom['StreamingMovies'], prefix='StreamingMovies')\nsm1 = sm.drop(['StreamingMovies_No internet service'], 1)\n# Adding the results to the master dataframe\ntelecom = pd.concat([telecom,sm1], axis=1)","00c9e7a3":"telecom.head()","485ae97b":"# We have created dummies for the below variables, so we can drop them\ntelecom = telecom.drop(['Contract','PaymentMethod','gender','MultipleLines','InternetService', 'OnlineSecurity', 'OnlineBackup', 'DeviceProtection',\n       'TechSupport', 'StreamingTV', 'StreamingMovies'], 1)","d0eefd46":"#The varaible was imported as a string we need to convert it to float\ntelecom['TotalCharges'] = telecom['TotalCharges'].apply(pd.to_numeric , errors = 'coerce')","c2cf8a56":"telecom.info()","edb421b5":"# Checking for outliers in the continuous variables\nnum_telecom = telecom[['tenure','MonthlyCharges','SeniorCitizen','TotalCharges']]","b93860eb":"# Checking outliers at 25%, 50%, 75%, 90%, 95% and 99%\nnum_telecom.describe(percentiles=[.25, .5, .75, .90, .95, .99])","e9e81f27":"# Adding up the missing values (column-wise)\ntelecom.isnull().sum()","dad84393":"# Checking the percentage of missing values\nround(100*(telecom.isnull().sum()\/len(telecom.index)), 2)","f187b0ba":"# Removing NaN TotalCharges rows\ntelecom = telecom[~np.isnan(telecom['TotalCharges'])]","a31ead14":"# Checking percentage of missing values after removing the missing values\nround(100*(telecom.isnull().sum()\/len(telecom.index)), 2)","298d105c":"from sklearn.model_selection import train_test_split","ff427d1e":"# Putting feature variable to X\nX = telecom.drop(['Churn','customerID'], axis=1)\n\nX.head()","3657c405":"# Putting response variable to y\ny = telecom['Churn']\n\ny.head()","7b7e8a3e":"# Splitting the data into train and test\nX_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state=100)","f4e53de9":"from sklearn.preprocessing import StandardScaler","eebf4e49":"scaler = StandardScaler()\n\nX_train[['tenure','MonthlyCharges','TotalCharges']] = scaler.fit_transform(X_train[['tenure','MonthlyCharges','TotalCharges']])\n\nX_train.head()","473a10b9":"### Checking the Churn Rate\nchurn = (sum(telecom['Churn'])\/len(telecom['Churn'].index))*100\nchurn","af3ae367":"# Importing matplotlib and seaborn\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","22635d60":"# Let's see the correlation matrix \nplt.figure(figsize = (20,10))        # Size of the figure\nsns.heatmap(telecom.corr(),annot = True)\nplt.show()","9ea39ab3":"X_test = X_test.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No',\n                       'StreamingTV_No','StreamingMovies_No'], 1)\nX_train = X_train.drop(['MultipleLines_No','OnlineSecurity_No','OnlineBackup_No','DeviceProtection_No','TechSupport_No',\n                         'StreamingTV_No','StreamingMovies_No'], 1)","fa9181da":"plt.figure(figsize = (20,10))\nsns.heatmap(X_train.corr(),annot = True)\nplt.show()","0d5a1948":"import statsmodels.api as sm","76ab2fd0":"# Logistic regression model\nlogm1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nlogm1.fit().summary()","e96f2fd0":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()","159907e2":"from sklearn.feature_selection import RFE\nrfe = RFE(logreg, 15)             # running RFE with 13 variables as output\nrfe = rfe.fit(X_train, y_train)","f721d8ea":"rfe.support_","48162561":"list(zip(X_train.columns, rfe.support_, rfe.ranking_))","a1aaf7a8":"col = X_train.columns[rfe.support_]","e7368570":"X_train.columns[~rfe.support_]","0f491d9d":"X_train_sm = sm.add_constant(X_train[col])\nlogm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm2.fit()\nres.summary()","36fd8502":"# Getting the predicted values on the train set\ny_train_pred = res.predict(X_train_sm)\ny_train_pred[:10]","03f7fa03":"y_train_pred = y_train_pred.values.reshape(-1)\ny_train_pred[:10]","a1ee80ed":"y_train_pred_final = pd.DataFrame({'Churn':y_train.values, 'Churn_Prob':y_train_pred})\ny_train_pred_final['CustID'] = y_train.index\ny_train_pred_final.head()","b79baba1":"y_train_pred_final['predicted'] = y_train_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.5 else 0)\n\n# Let's see the head\ny_train_pred_final.head()","ea7d330d":"from sklearn import metrics","d79a7363":"# Confusion matrix \nconfusion = metrics.confusion_matrix(y_train_pred_final.Churn, y_train_pred_final.predicted )\nprint(confusion)","dd862595":"# Predicted     not_churn    churn\n# Actual\n# not_churn        3270      365\n# churn            579       708  ","9ecb239e":"# Let's check the overall accuracy.\nprint(metrics.accuracy_score(y_train_pred_final.Churn, y_train_pred_final.predicted))","63e3880e":"# Check for the VIF values of the feature variables. \nfrom statsmodels.stats.outliers_influence import variance_inflation_factor","5f5984ba":"# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\nvif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","d385b646":"# Let's re-run the model using the selected variables\nX_train_sm = sm.add_constant(X_train[col])\nlogm3 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm3.fit()\nres.summary()","46a016e7":"y_train_pred = res.predict(X_train_sm).values.reshape(-1)","737f5b19":"y_train_pred[:10]","f5e4a2b4":"y_train_pred_final['Churn_Prob'] = y_train_pred","62b97840":"# Creating new column 'predicted' with 1 if Churn_Prob > 0.5 else 0\ny_train_pred_final['predicted'] = y_train_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.5 else 0)\ny_train_pred_final.head()","f64b8c68":"# Let's check the overall accuracy.\nprint(metrics.accuracy_score(y_train_pred_final.Churn, y_train_pred_final.predicted))","0d196b73":"vif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","59278999":"# Let's drop TotalCharges since it has a high VIF\ncol = col.drop('TotalCharges')\ncol","82fcf348":"# Let's re-run the model using the selected variables\nX_train_sm = sm.add_constant(X_train[col])\nlogm4 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\nres = logm4.fit()\nres.summary()","90ae9538":"y_train_pred = res.predict(X_train_sm).values.reshape(-1)","0eb11909":"y_train_pred[:10]","c721f485":"y_train_pred_final['Churn_Prob'] = y_train_pred","b67d798b":"# Creating new column 'predicted' with 1 if Churn_Prob > 0.5 else 0\ny_train_pred_final['predicted'] = y_train_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.5 else 0)\ny_train_pred_final.head()","0a903057":"# Let's check the overall accuracy.\nprint(metrics.accuracy_score(y_train_pred_final.Churn, y_train_pred_final.predicted))","caebdfc8":"vif = pd.DataFrame()\nvif['Features'] = X_train[col].columns\nvif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\nvif['VIF'] = round(vif['VIF'], 2)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","e42e027e":"# Let's take a look at the confusion matrix again \nconfusion = metrics.confusion_matrix(y_train_pred_final.Churn, y_train_pred_final.predicted )\nconfusion","e1822310":"# Actual\/Predicted     not_churn    churn\n        # not_churn        3269      366\n        # churn            595       692  ","172a3f85":"# Let's check the overall accuracy.\nmetrics.accuracy_score(y_train_pred_final.Churn, y_train_pred_final.predicted)","2c22d836":"TP = confusion[1,1] # true positive \nTN = confusion[0,0] # true negatives\nFP = confusion[0,1] # false positives\nFN = confusion[1,0] # false negatives","b477068d":"# Let's see the sensitivity of our logistic regression model\nTP \/ float(TP+FN)","de790686":"# Let us calculate specificity\nTN \/ float(TN+FP)","31ad29d5":"# Calculate false postive rate - predicting churn when customer does not have churned\nprint(FP\/ float(TN+FP))","d27b7da4":"# positive predictive value \nprint (TP \/ float(TP+FP))","1f2b7e2c":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","f213c671":"def draw_roc( actual, probs ):\n    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n                                              drop_intermediate = False )\n    auc_score = metrics.roc_auc_score( actual, probs )\n    plt.figure(figsize=(5, 5))\n    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.xlim([0.0, 1.0])\n    plt.ylim([0.0, 1.05])\n    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n    plt.ylabel('True Positive Rate')\n    plt.title('Receiver operating characteristic example')\n    plt.legend(loc=\"lower right\")\n    plt.show()\n\n    return None","61cb8ce8":"fpr, tpr, thresholds = metrics.roc_curve( y_train_pred_final.Churn, y_train_pred_final.Churn_Prob, drop_intermediate = False )","4dcfc426":"draw_roc(y_train_pred_final.Churn, y_train_pred_final.Churn_Prob)","81de9e74":"# Let's create columns with different probability cutoffs \nnumbers = [float(x)\/10 for x in range(10)]\nfor i in numbers:\n    y_train_pred_final[i]= y_train_pred_final.Churn_Prob.map(lambda x: 1 if x > i else 0)\ny_train_pred_final.head()","ca525dbe":"# Now let's calculate accuracy sensitivity and specificity for various probability cutoffs.\ncutoff_df = pd.DataFrame( columns = ['prob','accuracy','sensi','speci'])\nfrom sklearn.metrics import confusion_matrix\n\n# TP = confusion[1,1] # true positive \n# TN = confusion[0,0] # true negatives\n# FP = confusion[0,1] # false positives\n# FN = confusion[1,0] # false negatives\n\nnum = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\nfor i in num:\n    cm1 = metrics.confusion_matrix(y_train_pred_final.Churn, y_train_pred_final[i] )\n    total1=sum(sum(cm1))\n    accuracy = (cm1[0,0]+cm1[1,1])\/total1\n    \n    speci = cm1[0,0]\/(cm1[0,0]+cm1[0,1])\n    sensi = cm1[1,1]\/(cm1[1,0]+cm1[1,1])\n    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\nprint(cutoff_df)","36870035":"# Let's plot accuracy sensitivity and specificity for various probabilities.\ncutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'])\nplt.show()","c3bf188e":"y_train_pred_final['final_predicted'] = y_train_pred_final.Churn_Prob.map( lambda x: 1 if x > 0.3 else 0)\n\ny_train_pred_final.head()","9029563a":"# Let's check the overall accuracy.\nmetrics.accuracy_score(y_train_pred_final.Churn, y_train_pred_final.final_predicted)","7af757ec":"confusion2 = metrics.confusion_matrix(y_train_pred_final.Churn, y_train_pred_final.final_predicted )\nconfusion2","dc8dcefb":"TP = confusion2[1,1] # true positive \nTN = confusion2[0,0] # true negatives\nFP = confusion2[0,1] # false positives\nFN = confusion2[1,0] # false negatives","7870032d":"# Let's see the sensitivity of our logistic regression model\nTP \/ float(TP+FN)","728c8faa":"# Let us calculate specificity\nTN \/ float(TN+FP)","82d10b79":"# Calculate false postive rate - predicting churn when customer does not have churned\nprint(FP\/ float(TN+FP))","e0a885af":"# Positive predictive value \nprint (TP \/ float(TP+FP))","5d6243f4":"# Negative predictive value\nprint (TN \/ float(TN+ FN))","78380324":"#Looking at the confusion matrix again","bf6054f1":"confusion = metrics.confusion_matrix(y_train_pred_final.Churn, y_train_pred_final.predicted )\nconfusion","f3e7f2b8":"confusion[1,1]\/(confusion[0,1]+confusion[1,1])","37b65731":"confusion[1,1]\/(confusion[1,0]+confusion[1,1])","703533e3":"from sklearn.metrics import precision_score, recall_score","081d9305":"?precision_score","5199e01b":"precision_score(y_train_pred_final.Churn, y_train_pred_final.predicted)","dc286a76":"recall_score(y_train_pred_final.Churn, y_train_pred_final.predicted)","e7be521e":"from sklearn.metrics import precision_recall_curve","d843d003":"y_train_pred_final.Churn, y_train_pred_final.predicted","168918c9":"p, r, thresholds = precision_recall_curve(y_train_pred_final.Churn, y_train_pred_final.Churn_Prob)","0dfa695d":"plt.plot(thresholds, p[:-1], \"g-\")\nplt.plot(thresholds, r[:-1], \"r-\")\nplt.show()","91906bb6":"X_test[['tenure','MonthlyCharges','TotalCharges']] = scaler.transform(X_test[['tenure','MonthlyCharges','TotalCharges']])","27943095":"X_test = X_test[col]\nX_test.head()","dd2c08a0":"X_test_sm = sm.add_constant(X_test)","af4803b6":"y_test_pred = res.predict(X_test_sm)","980e12fc":"y_test_pred[:10]","5dc1f39c":"# Converting y_pred to a dataframe which is an array\ny_pred_1 = pd.DataFrame(y_test_pred)","6242afa8":"# Let's see the head\ny_pred_1.head()","50538d8a":"# Converting y_test to dataframe\ny_test_df = pd.DataFrame(y_test)","a77b39f9":"# Putting CustID to index\ny_test_df['CustID'] = y_test_df.index","b785d36d":"# Removing index for both dataframes to append them side by side \ny_pred_1.reset_index(drop=True, inplace=True)\ny_test_df.reset_index(drop=True, inplace=True)","9a78dbd3":"# Appending y_test_df and y_pred_1\ny_pred_final = pd.concat([y_test_df, y_pred_1],axis=1)","9b801b8f":"y_pred_final.head()","b1c38664":"# Renaming the column \ny_pred_final= y_pred_final.rename(columns={ 0 : 'Churn_Prob'})","75da3015":"# Rearranging the columns\ny_pred_final = y_pred_final.reindex(['CustID','Churn','Churn_Prob'], axis=1)","e820e9d3":"# Let's see the head of y_pred_final\ny_pred_final.head()","849a0969":"y_pred_final['final_predicted'] = y_pred_final.Churn_Prob.map(lambda x: 1 if x > 0.42 else 0)","8616316a":"y_pred_final.head()","8e769194":"# Let's check the overall accuracy.\nmetrics.accuracy_score(y_pred_final.Churn, y_pred_final.final_predicted)","410d3666":"confusion2 = metrics.confusion_matrix(y_pred_final.Churn, y_pred_final.final_predicted )\nconfusion2","01f0bb7d":"TP = confusion2[1,1] # true positive \nTN = confusion2[0,0] # true negatives\nFP = confusion2[0,1] # false positives\nFN = confusion2[1,0] # false negatives","7b05fdad":"# Let's see the sensitivity of our logistic regression model\nTP \/ float(TP+FN)","2dbe87c4":"# Let us calculate specificity\nTN \/ float(TN+FP)","e8633070":"Now you can see that you have all variables as numeric.","c9b9a7fa":"After dropping highly correlated variables now let's check the correlation matrix again.","821a1681":"### Step 9: Plotting the ROC Curve","2111d350":"Using sklearn utilities for the same","80930a9f":"All variables have a good value of VIF. So we need not drop any more variables and we can proceed with making predictions using this model only","478b4928":"##### Recall\nTP \/ TP + FN","400bb405":"#### Dropping highly correlated dummy variables","3ea28949":"### Step 2: Inspecting the Dataframe","0d67b6ec":"#### Converting some binary variables (Yes\/No) to 0\/1","2359a761":"##### Let's now check the VIFs again","93534809":"The accuracy is still practically the same.","67f573fd":"## Precision and Recall","bc8fa203":"### Step 6: Looking at Correlations","5b4dc3aa":"From the distribution shown above, you can see that there no outliers in your data. The numbers are gradually increasing.","0991bf69":"Now we don't have any missing values","1c5a9558":"So overall the accuracy hasn't dropped much.","504c133c":"Making predictions on the test set","02bac721":"##### Creating a dataframe with the actual churn flag and the predicted probabilities","2684a917":"#### Checking VIFs","abf08b6d":"It means that 11\/7043 = 0.001561834 i.e 0.1%, best is to remove these observations from the analysis","67769dff":"##### Precision\nTP \/ TP + FP","46550e3e":"#### Checking for Outliers","e11d2438":"#### Dropping the repeated variables","c8885535":"### Step 10: Finding Optimal Cutoff Point","365e057d":"### Step 7: Model Building\nLet's start by splitting our data into a training set and a test set.","39561efc":"We have almost 27% churn rate","fbd94e0c":"##### Let's check the VIFs again","c8f80bfa":"##### Creating new column 'predicted' with 1 if Churn_Prob > 0.5 else 0","674e333e":"#### Combining all data files into one consolidated dataframe","c638550e":"## Metrics beyond simply accuracy","14d0703f":"### Precision and recall tradeoff","e7d15194":"#### For categorical variables with multiple levels, create dummy features (one-hot encoded)","d5e9823a":"### Step 8: Feature Selection Using RFE","09bd451a":"An ROC curve demonstrates several things:\n\n- It shows the tradeoff between sensitivity and specificity (any increase in sensitivity will be accompanied by a decrease in specificity).\n- The closer the curve follows the left-hand border and then the top border of the ROC space, the more accurate the test.\n- The closer the curve comes to the 45-degree diagonal of the ROC space, the less accurate the test.","10f80c30":"### Step 11: Making predictions on the test set","73965d0c":"### Step 4: Test-Train Split","dc4d66d3":"### Step 3: Data Preparation","70765d9a":"Optimal cutoff probability is that prob where we get balanced sensitivity and specificity","73cb9409":"#### Checking for Missing Values and Inputing Them","73fa7009":"#### From the curve above, 0.3 is the optimum point to take it as a cutoff probability.","d90b9784":"#### Checking the Correlation Matrix","771fdeca":"##### Assessing the model with StatsModels","81f1e816":"### Step 1: Importing and Merging Data","dec25163":"#### Running Your First Training Model","7f7e9384":"### Step 5: Feature Scaling","156164bd":"## Telecom Churn Case Study\nWith 21 predictor variables we need to predict whether a particular customer will switch to another telecom provider or not. In telecom terminology, this is referred to as churning and not churning, respectively.","6767d25b":"There are a few variables with high VIF. It's best to drop these variables as they aren't helping much with prediction and unnecessarily making the model complex. The variable 'PhoneService' has the highest VIF. So let's start by dropping that."}}