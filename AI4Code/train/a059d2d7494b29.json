{"cell_type":{"e1aa77ae":"code","e6c0b63a":"code","3d6157b9":"code","874d412a":"code","aadd7daf":"code","9ef045ff":"code","093728dc":"code","ca76c751":"code","2901e69d":"code","85d2cc78":"code","1146a1eb":"code","ec474982":"code","b1b31dd4":"code","dcca4d13":"code","75034326":"code","23ccf43e":"markdown","5a1ca576":"markdown","b72fff20":"markdown","16202e60":"markdown","769edd11":"markdown","20d4f13d":"markdown","8f72f047":"markdown","780eb698":"markdown","31e75b9b":"markdown","98a6f8f3":"markdown","a8892035":"markdown","1cba57aa":"markdown","dd14971f":"markdown","8f62bbd9":"markdown"},"source":{"e1aa77ae":"import numpy as np  \nimport pandas as pd \nimport os\nimport pydicom\nfrom tqdm import tqdm_notebook as tqdm\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# import mask utilities\nimport sys\nsys.path.insert(0, '..\/input\/siim-acr-pneumothorax-segmentation')\nfrom mask_functions import rle2mask \n\ndef extract_dcm_pixel_array(file_path):\n    return pydicom.dcmread(file_path).pixel_array\n\ndef extract_dcm_metadata(file_path):\n    ds = pydicom.dcmread(file_path)\n    d = {}\n    for elem in ds.iterall():\n        if elem.name != 'Pixel Data' and elem.name != \"Pixel Spacing\" :\n            d[elem.name.lower().replace(\" \",\"_\").replace(\"'s\",\"\")] = elem.value\n        elif elem.name == \"Pixel Spacing\" :\n            d[\"pixel_spacing_x\"] = elem.value[0]\n            d[\"pixel_spacing_y\"] = elem.value[1]\n            \n    return d\n\ndef create_metadataset (df):\n\n    ImageIds = []\n    data  = []\n    all_feats = set()    \n\n    for index, row in tqdm ( df[[\"ImageId\", \"path\"] ].drop_duplicates().iterrows() ) :            \n        path = row[\"path\"] \n        ImageId =  row[\"ImageId\"]       \n        feature_dict = extract_dcm_metadata (path)\n        data.append(feature_dict)\n        ImageIds.append(ImageId)\n        feats = set (feature_dict.keys())\n        if len ( feats - all_feats ) > 0:\n            all_feats = all_feats.union(feats)\n\n\n    df_meta = pd.DataFrame(columns=[\"ImageId\"])\n    df_meta[\"ImageId\"]=ImageIds\n\n    for feat in sorted(all_feats):\n        df_meta[feat]=[ d[feat] for d in data ]\n\n    df_meta['patient_age'] =  df_meta['patient_age'].map (lambda x: int(x))   \n    return df_meta\n\nDATA_PATH = \"..\/input\/siim-acr-pneumothorax-segmentation-data\/pneumothorax\/\"\nSAMPLE_SUBMISSION = \"..\/input\/siim-acr-pneumothorax-segmentation\/sample_submission.csv\"\n\ndf_train  = pd.DataFrame([(name.replace(\".dcm\",\"\"),  os.path.join(root, name)) for root, dirs, files in os.walk(DATA_PATH + \"\/dicom-images-train\" )\n             for name in files if name.endswith((\".dcm\"))], columns = ['ImageId','path']) \n\ndf_test = pd.DataFrame([(name.replace(\".dcm\",\"\"), os.path.join(root, name)) for root, dirs, files in os.walk(DATA_PATH + \"\/dicom-images-test\" )\n             for name in files if name.endswith((\".dcm\"))], columns = ['ImageId','path']) \n\ndf_sub = pd.read_csv(SAMPLE_SUBMISSION)\n\n\ndf_rle = pd.read_csv(DATA_PATH + \"\/train-rle.csv\")  \ndf_rle = df_rle.rename ( columns =  { ' EncodedPixels': 'EncodedPixels' })\ndf_rle [\"EncodedPixels\"] = df_rle [\"EncodedPixels\"].map(lambda x: x[1:])\n\n\ndf_train = df_train.merge(df_rle, on=\"ImageId\", how=\"left\")\n\nnot_pneumothorax_ImageId = set(df_train.query( \"EncodedPixels == '-1' or EncodedPixels.isnull()\",  engine='python') [\"ImageId\"])\ndf_train[\"pneumothorax\"] = df_train[\"ImageId\"].map(lambda x: 0 if x  in not_pneumothorax_ImageId else 1)\n\n\ndf_train[\"rle_count\"] = df_train[\"ImageId\"].map(df_rle.groupby([\"ImageId\"]).size())\ndf_train[\"rle_count\"] = df_train[\"rle_count\"].fillna(-1)  \n\n## adding dicom metadata\n\ndf_meta = create_metadataset ( df_train )\nmeta_feats = [c for c in df_meta.columns if c != \"ImageId\" ]\n\n\ndf_train = df_train.merge(df_meta, on=\"ImageId\", how='left') \ndf_test = df_test.merge(create_metadataset ( df_test ), on=\"ImageId\", how='left')\n\n\ndf_train.to_csv(\"train.csv\",index=False)\ndf_test.to_csv(\"test.csv\",index=False)\n\ndf_sub[\"entries\"] = df_sub[\"ImageId\"].map( df_sub.groupby(['ImageId']).size() )\n\n\n\nprint ( \"train-rle: {}, unique ImageId: {}\".format(len(df_rle), len(df_rle[\"ImageId\"].unique()))) \nprint ( \"train: {}, unique ImageId: {}\".format(len(df_train), len(df_train[\"ImageId\"].unique()))) \nprint(\"train ImageId not in rle: {}\".format( \n    len( df_train.query ( \"EncodedPixels.isnull()\",  engine='python') )))\nprint(\"train ImageId with multiple rle: {}\".format( \n    len( df_train.query ( \"rle_count > 1\",  engine='python')[\"ImageId\"].unique() )))\n\nprint ( \"sample_submission: {}, unique ImageId: {}, ImegeId with multiple entries: {}\".format(\n    len(df_sub), \n    len(df_sub[\"ImageId\"].unique()), \n    len ( df_sub.query ( \"entries > 1\")[\"ImageId\"].unique() )\n    )) \n\nprint ( \"test: {}, unique ImageId: {}\".format(len(df_test), len(df_test[\"ImageId\"].unique())))\nprint(\"test ImageId not in sample_submission: {}\".format( \n    len( df_test [ ~ df_test[\"ImageId\"].isin(df_sub[\"ImageId\"])])))","e6c0b63a":"pneumothorax = df_train.query ( \"pneumothorax == 1 and rle_count >= 1\",  engine='python').sample(n=5).reset_index()\n\nfig, axs = plt.subplots(2, 5, figsize=(30,10))\nfig.suptitle(\"samples with pneumothorax (train)\", fontsize=30)\nfor j, row in pneumothorax.iterrows():\n    img = extract_dcm_pixel_array (row['path'])\n    x = 0\n    y = j % 5\n    axs[x,y].imshow(img, cmap='bone')\n    axs[x,y].axis('off')\n    \n    rle_mask = rle2mask(row[\"EncodedPixels\"] , 1024, 1024).T\n    x = 1\n    axs[x,y].imshow(img, cmap='bone')\n    axs[x,y].imshow(rle_mask, alpha=0.5, cmap=\"Blues\")    \n    axs[x,y].axis('off')\n    \n    \n    \nfig.subplots_adjust(top=0.9)\n\n\nplt.show()","3d6157b9":"images = df_train.query ( \"pneumothorax == 0\",  engine='python')[\"path\"].values\nnp.random.shuffle(images)\n\n\nfig, axs = plt.subplots(2, 5, figsize=(30,10))\nfig.suptitle(\"samples without pneumothorax (train)\", fontsize=30)\nfor j, path in enumerate(images[:10]):\n    img = extract_dcm_pixel_array (path)\n    x = j \/\/ 5\n    y = j % 5\n    axs[x,y].imshow(img, cmap='bone')\n    axs[x,y].axis('off')\nfig.subplots_adjust(top=0.9)\n\n\nplt.show()","874d412a":"images = df_train.query ( \"EncodedPixels.isnull()\",  engine='python')[\"path\"].values\nnp.random.shuffle(images)\n\n\nfig, axs = plt.subplots(2, 5, figsize=(30,10))\nfig.suptitle(\"samples without a mask in train-rle.csv (train)\", fontsize=30)\nfor j, path in enumerate(images[:10]):\n    img = extract_dcm_pixel_array (path)\n    x = j \/\/ 5\n    y = j % 5\n    axs[x,y].imshow(img, cmap='bone')\n    axs[x,y].axis('off')\nfig.subplots_adjust(top=0.9)\n\n\nplt.show()","aadd7daf":"images = df_test [ ~ df_test[\"ImageId\"].isin(df_sub[\"ImageId\"])][\"path\"].values\nnp.random.shuffle(images)\n\n\nfig, axs = plt.subplots(1, 5, figsize=(30,10))\nfig.suptitle(\"not in sample submission (test)\", fontsize=30)\nfor j, path in enumerate(images[:5]):\n    img = extract_dcm_pixel_array (path)\n    y = j % 5\n    axs[y].imshow(img, cmap='bone')\n    axs[y].axis('off')\nfig.subplots_adjust(top=1.0)\n\n\nplt.show()","9ef045ff":"multiple_masks = df_train.query ( \"rle_count > 1\",  engine='python').sort_values(by=\"rle_count\", ascending=False)\nmultiple_masks =  multiple_masks[[\"ImageId\",\"path\",\"rle_count\"]].drop_duplicates() \nmultiple_masks = multiple_masks [:5]\n\nfor i, row in multiple_masks.iterrows():\n    path = row[\"path\"]\n    image_id = row[\"ImageId\"]\n    rle = df_train.query( \"ImageId == '\" + image_id + \"'\" )\n    \n    img = extract_dcm_pixel_array (path)\n    fig, ax = plt.subplots(1, 2, sharey=True, figsize=(20,10))\n    \n    #plt.set_title(image_id)\n    ax[0].imshow(img, cmap='bone')\n    ax[1].imshow(img, cmap='bone')\n\n    rle_count = row[\"rle_count\"]\n    \n    rle_mask = np.zeros ( (1024, 1024) )    \n    for i, row in rle.iterrows():\n        mask =  row[\"EncodedPixels\"] \n        rle_mask += rle2mask(mask, 1024, 1024).T \n\n    ax[1].imshow(rle_mask, alpha=0.5, cmap=\"Blues\")    \n\n    plt.axis('off')\n    plt.show()","093728dc":"train_data = df_train.drop([\"EncodedPixels\"],axis=1).drop_duplicates()\ntrain_data[\"dataset\"] = \"train\"\ntest_data = df_test\ntest_data[\"dataset\"] = \"test\"\nall_data = train_data.append(test_data, sort=False)\n\n\nprint (  \"metadata features in dicom : {}\".format(  len(meta_feats) ))\nprint (\"\")\nprint (\"metada features with single value:\")\nsingle_value_feats = [ c for c in  meta_feats if len(all_data[c].unique()) == 1]\nfor c in single_value_feats:\n    print ( \"{}: {}\".format (c,all_data[c].unique()[0] ))\nprint (\"\")\nprint (\"metada features with no duplicate value:\")\nno_duplicate_value_feats = [ c for c in  meta_feats if len(all_data[c].unique()) == all_data.shape[0]]\nfor c in no_duplicate_value_feats:\n    print ( \"{}: {}\".format (c,all_data[c].unique()[:3] ))\n\n","ca76c751":"meta_feats = [c for c in meta_feats if c not in single_value_feats and c not in no_duplicate_value_feats]\nall_data[[c for c in meta_feats  ]].describe(include='all')\n\n","2901e69d":"g = sns.FacetGrid(all_data.query ( \"patient_age < 100\"  ), \n                  hue='dataset', row=\"patient_sex\", col='view_position',  margin_titles=True)\ng.map(sns.distplot, \"patient_age\").add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle(\"Train and Test distribution\")\nplt.show()\n\ng = sns.FacetGrid(train_data.query ( \"patient_age < 100\"  ), palette= {0:\"green\", 1:\"gray\"},\n                  hue='pneumothorax', row=\"patient_sex\", col='view_position',  margin_titles=True)\ng.map(sns.distplot, \"patient_age\").add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle(\"Train distribution\")\nplt.show()","85d2cc78":"g = sns.FacetGrid(all_data, \n                  hue='dataset', row=\"patient_sex\", col='view_position',  margin_titles=True)\ng.map(sns.distplot, \"pixel_spacing_x\").add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle(\"Train and Test distribution\")\nplt.show()\n\ng = sns.FacetGrid(train_data, palette= {0:\"green\", 1:\"gray\"},\n                  hue='pneumothorax', row=\"patient_sex\", col='view_position',  margin_titles=True)\ng.map(sns.distplot, \"pixel_spacing_x\").add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle(\"Train distribution\")\nplt.show()","1146a1eb":"pvt_train = train_data.groupby([\"view_position\", \"patient_sex\"]).agg({\"ImageId\":'count'}).reset_index().pivot(index=\"patient_sex\",columns=\"view_position\", values=\"ImageId\")\npvt_test = test_data.groupby([\"view_position\", \"patient_sex\"]).agg({\"ImageId\":'count'}).reset_index().pivot(index=\"patient_sex\",columns=\"view_position\", values=\"ImageId\")\n\nf, axes = plt.subplots(1, 2, figsize=(12, 6))\n\ng = sns.heatmap(pvt_train, annot=True, fmt=\"d\", linewidths=.5, ax=axes[0])\naxes[0].title.set_text(\"Train distribution\")\nsns.heatmap(pvt_test, annot=True, fmt=\"d\", linewidths=.5,   ax=axes[1])\naxes[1].title.set_text(\"Test distribution\")\n\nplt.show()\n\n\ndf =train_data.groupby([\"view_position\", \"pixel_spacing_x\"]).agg({\"ImageId\":'count'}).reset_index()\ndf[\"pixel_spacing_x\"] = df[\"pixel_spacing_x\"].map(lambda x: \"{0:.6f}\".format(x)) \npvt_train = df.pivot(index=\"pixel_spacing_x\",columns=\"view_position\", values=\"ImageId\")\n\ndf = test_data.groupby([\"view_position\", \"pixel_spacing_x\"]).agg({\"ImageId\":'count'}).reset_index()\ndf[\"pixel_spacing_x\"] = df[\"pixel_spacing_x\"].map(lambda x: \"{0:.6f}\".format(x)) \n\npvt_test = df.pivot(index=\"pixel_spacing_x\",columns=\"view_position\", values=\"ImageId\")\n\nf, axes = plt.subplots(1, 2, figsize=(12, 6))\n\ng = sns.heatmap(pvt_train, annot=True, fmt=\"f\", linewidths=.5, ax=axes[0])\naxes[0].title.set_text(\"Train distribution\")\nsns.heatmap(pvt_test, annot=True, fmt=\"f\", linewidths=.5,  ax=axes[1])\naxes[1].title.set_text(\"Test distribution\")\nplt.tight_layout() \nplt.show()","ec474982":"del df_train, df_test \n\ntest_data[\"pixel_array\"] = test_data[\"path\"].map(lambda x : extract_dcm_pixel_array(x) )\ntest_data[\"mean_pixel_value\"]= test_data[\"pixel_array\"].map(lambda x : (x.mean()))\n\ntest_data = test_data.drop ( [\"pixel_array\"], axis=1 ) \n\ntrain_data[\"pixel_array\"] = train_data[\"path\"].map(lambda x : extract_dcm_pixel_array(x) )\ntrain_data[\"mean_pixel_value\"]= train_data[\"pixel_array\"].map(lambda x : (x.mean()))\ntrain_data = train_data.drop ( [\"pixel_array\"], axis=1 ) ","b1b31dd4":"sns.distplot(train_data[\"mean_pixel_value\"], label=\"train\")\nsns.distplot(test_data[\"mean_pixel_value\"], label=\"test\")\nplt.legend()\nplt.show()","dcca4d13":"g = sns.FacetGrid(\n    train_data.query( \"(pixel_spacing_x > 0.116 and  pixel_spacing_x < 0.172 or ( pixel_spacing_x > 0.194309 and  pixel_spacing_x < 0.194313))\" ), \n    row=\"pixel_spacing_x\",  aspect=8, height=1.2)\n\ng.map(sns.kdeplot, \"mean_pixel_value\", clip_on=False, shade=True, alpha=1, lw=1.5, bw=.2)\ng.map(sns.kdeplot, \"mean_pixel_value\", clip_on=False, color=\"w\", lw=2, bw=.2)\ng.map(plt.axhline, y=0, lw=2, clip_on=False)\n\ng.set(yticks=[])\ng.fig.suptitle(\"Train distribution of mean_pixel_value per pixel_spacing\",fontsize=20)\nplt.subplots_adjust(top=0.8)\n\nplt.show()\n\n\ng = sns.FacetGrid(\n    test_data.query( \"pixel_spacing_x < 0.172 or ( pixel_spacing_x > 0.194309 and  pixel_spacing_x < 0.194313 )\" ), \n    row=\"pixel_spacing_x\",  aspect=8, height=1.2)\n\ng.map(sns.kdeplot, \"mean_pixel_value\", clip_on=False, shade=True, alpha=1, lw=1.5, bw=.2)\ng.map(sns.kdeplot, \"mean_pixel_value\", clip_on=False, color=\"w\", lw=2, bw=.2)\ng.map(plt.axhline, y=0, lw=2, clip_on=False)\ng.set(yticks=[])\ng.fig.suptitle(\"Test distribution of mean_pixel_value per pixel_spacing\", fontsize=20)\nplt.subplots_adjust(top=0.8)\n\nplt.show()\n\n","75034326":"g = sns.FacetGrid(\n    train_data.query('(pixel_spacing_x > 0.115 and pixel_spacing_x < 0.142) or (pixel_spacing_x > 0.167 and pixel_spacing_x < 0.193) ' ),\n    row=\"pixel_spacing_x\", col='view_position', col_order=['AP','PA'],  margin_titles=True)\ng.map(sns.distplot, \"mean_pixel_value\").add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle(\"Train distribution\")\nplt.show()\n\ng = sns.FacetGrid(\n    test_data.query('(pixel_spacing_x > 0.115 and pixel_spacing_x < 0.142) or (pixel_spacing_x > 0.167 and pixel_spacing_x < 0.193) ' ),\n    row=\"pixel_spacing_x\", col='view_position', col_order=['AP','PA'], margin_titles=True)\ng.map(sns.distplot, \"mean_pixel_value\").add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle(\"Test distribution\")\nplt.show()","23ccf43e":"how about bimodal view_position = AP and pixel_spacing = 0.168 ?","5a1ca576":"# Train, Test and uniques ImageId\n\nThanks [@jeesper](https:\/\/www.kaggle.com\/jesperdramsch) for the [SIIM ACR Pneumothorax Segmentation Data](https:\/\/www.kaggle.com\/jesperdramsch\/siim-acr-pneumothorax-segmentation-data)","b72fff20":"in train set there are 624 images with multiple (**overlapping**) masks (in sample_submission there are 78 images with multiple entries)","16202e60":"# Images with multiple pneumothorax masks","769edd11":"# Metadata distributions","20d4f13d":"in train set there are 37 images without a mask in train-rle.csv.  Some are misledeanig lateral position","8f72f047":"There are 37 features in dicom.  \n27 features have a single value.  \n5 features have distinct value per distinct row.  \n7 have a non trivial distribution with pixel_spacing_x\/pixel_spacing_y and view_position\/series_description sharing the same information\n  \n### Metada features with no trivial distribution","780eb698":"## X-Ray visualization\n","31e75b9b":"# The bimodal mean_pixel_value distribution\nsee [@Giulia Savorgnan's](https:\/\/www.kaggle.com\/giuliasavorgnan) [discussion](https:\/\/www.kaggle.com\/c\/siim-acr-pneumothorax-segmentation\/discussion\/97525)","98a6f8f3":"A visual explanation of \"Chest x-ray - Pneumothorax or no pneumothorax\" here [https:\/\/www.youtube.com\/watch?v=0vZ9gVyWreo](https:\/\/www.youtube.com\/watch?v=0vZ9gVyWreo)","a8892035":"# Metadata distributions","1cba57aa":"so, it seems that distribution of mean_pixel_value is correlated with dicom pixel_spacing attribute.\nFor pixel_spacing's reference see http:\/\/dicom.nema.org\/medical\/dicom\/current\/output\/chtml\/part03\/sect_10.7.html#sect_10.7.1.3\n  \nlet's see how view position PA\/AP impacts the distribution of mean_pixel_value\n","dd14971f":"in test set there are 5 images not in sample_submission.csv","8f62bbd9":"with fixed pixel spacing, the average pixel value is higher for PA than AP.  \nThe bimodal distribution is the sum of these distributions.\n\n\n\n### How do PA and AP chest X-ray differ?\nPA view is the most commonly taken view of chest.   \nPatient is erect facing the upright image receptor.   \n\nAP view is taken only in certain conditions where patient is completely bed ridden and is not able to stand or sit in an erect posture   \nAP radiographs are taken with the tube in front of the patient with the detector behind the patient. These are usually done with portable equipment. The tube is typically closer to the patient and so penumbra is greater. \n\n[https:\/\/www.youtube.com\/watch?v=8ZAN6vEuYjY](https:\/\/www.youtube.com\/watch?v=8ZAN6vEuYjY)\n\n[https:\/\/www.quora.com\/How-do-PA-and-AP-chest-X-ray-differ](https:\/\/www.quora.com\/How-do-PA-and-AP-chest-X-ray-differ)\n[https:\/\/www.quora.com\/What-is-the-difference-between-an-AP-and-a-PA-view-of-an-X-ray](https:\/\/www.quora.com\/What-is-the-difference-between-an-AP-and-a-PA-view-of-an-X-ray)"}}