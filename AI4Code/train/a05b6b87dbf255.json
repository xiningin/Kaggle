{"cell_type":{"62a4a187":"code","061836b4":"code","0bc23fc7":"code","d4d5f6b6":"code","cf321e8a":"code","3edd2fb2":"code","bb54255a":"code","99264961":"code","56687e4f":"code","525780f1":"code","3b986794":"code","136ad6e4":"code","f3b6a1a3":"code","5b8bd53a":"code","3cbcd723":"code","ce4be382":"markdown","6bd3ec2b":"markdown","cbbc602b":"markdown"},"source":{"62a4a187":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nimport cv2\nimport os\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.utils import shuffle\n\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout,Flatten\nfrom tensorflow.keras.applications.resnet50 import ResNet50\nfrom tensorflow.keras.applications.vgg16 import VGG16\nresnet_weights_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\nvgg16_weights_path = '..\/input\/vgg16\/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5'\n\nfrom tensorflow.keras.layers import Conv2D,MaxPool2D\nfrom tensorflow.keras.layers import Input, Dense\nfrom keras.utils import to_categorical\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom sklearn.metrics import confusion_matrix\nimport matplotlib.pyplot as plt\nfrom tensorflow.keras.metrics import Recall\n\nfrom tensorflow.keras.applications.vgg16 import VGG16\nimport keras","061836b4":"PATH = \"\/kaggle\/input\/eye-disease-dataset\/Eye_diseases\"\ndata_dir_list = os.listdir(PATH)\ndata_dir_list","0bc23fc7":"img_rows = 28\nimg_cols = 28\nimg_data_list=[]\nclasses_names_list=[]\ntarget_column=[]\nfor dataset in data_dir_list:\n    classes_names_list.append(dataset)\n    print(\"Getting image from {} folder\".format(dataset))\n    img_list= os.listdir(PATH +\"\/\"+ dataset)\n    for img in img_list:\n        input_img = cv2.imread(PATH +\"\/\"+dataset+\"\/\"+img)\n        input_img_resize=cv2.resize(input_img,(img_rows,img_cols))\n        img_data_list.append(input_img_resize)\n        target_column.append(dataset)","d4d5f6b6":"Labelencoder = LabelEncoder()\ntarget_column = Labelencoder.fit_transform(target_column)\nnp.unique(target_column)","cf321e8a":"## Outout label\n\nnum_classes = 5\nout_y = keras.utils.to_categorical(target_column, num_classes)","3edd2fb2":"## X - label working\n\nx_as_array =  np.array(img_data_list)\nnum_images = x_as_array.shape[0]\nx_shaped_array = x_as_array.reshape(num_images, img_rows, img_cols, 3)\nout_x = x_shaped_array \/ 255","bb54255a":"first_Mod = Sequential()\n\nfirst_Mod.add(Conv2D(64,(3,3),activation='relu',input_shape=(28,28,3)))\nfirst_Mod.add(Conv2D(64,(3,3),activation='relu'))\nfirst_Mod.add(MaxPool2D(pool_size=(2,2)))\nfirst_Mod.add(Dropout(0.2))\n\nfirst_Mod.add(Conv2D(128,(3,3),activation='relu'))\nfirst_Mod.add(Conv2D(128,(3,3),activation='relu'))\nfirst_Mod.add(MaxPool2D(pool_size=(2,2)))\nfirst_Mod.add(Dropout(0.2))\n\nfirst_Mod.add(Flatten())\nfirst_Mod.add(Dense(128,activation='relu'))\n#first_Mod.add(Dropout(0.2))\nfirst_Mod.add(Dense(num_classes,activation='softmax'))\nfirst_Mod.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy',Recall()])\n\nfirst_Mod.summary()","99264961":"out_x,out_y = shuffle(out_x,out_y,random_state=2)","56687e4f":"first_Mod.fit(out_x, out_y,\n          batch_size=32,\n          epochs=50,\n          validation_split = 0.3)","525780f1":"import matplotlib.pyplot as plt\nplt.figure(figsize=(15,5))\nloss=pd.DataFrame(first_Mod.history.history)\nloss=loss[['accuracy','val_accuracy']]\nloss.plot()","3b986794":"trainx,trainy,testx,testy = train_test_split(out_x,out_y,test_size=0.2,random_state=42)","136ad6e4":"#Building a report \npredictions=first_Mod.predict_classes(trainy)\npr = predictions.reshape(-1,1)\n#print(pr.shape)\n#print(len(trainy))\ncheck=[]\nfor i in range(len(testy)):\n    for j in range(5):\n        if(testy[i][j]==1):\n            check.append(j)\n            \ncheck=np.asarray(check)\n#print(check)\nfrom sklearn.metrics import classification_report\nprint(classification_report(check,pr))\n","f3b6a1a3":"resnet_weights_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'","5b8bd53a":"my_new_model = Sequential()\nmy_new_model.add(ResNet50(include_top=False, pooling='avg', weights=resnet_weights_path))\nmy_new_model.add(Dense(num_classes, activation='softmax'))\nmy_new_model.layers[0].trainable = False\n\n\nmy_new_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy',Recall()])\n\n\nmy_new_model.fit(out_x, out_y,\n          batch_size=32,\n          epochs=3,\n          validation_split = 0.3)","3cbcd723":"#Building a report \npredictions1=my_new_model.predict_classes(trainy)\npr = predictions.reshape(-1,1)\n#print(pr.shape)\n#print(len(trainy))\ncheck=[]\nfor i in range(len(testy)):\n    for j in range(5):\n        if(testy[i][j]==1):\n            check.append(j)\n            \ncheck=np.asarray(check)\n#print(check)\nfrom sklearn.metrics import classification_report\nprint(classification_report(check,pr))","ce4be382":"Now here read all the directories available in eye disease folder","6bd3ec2b":"Now fit the data in the model and evaluate the model accuracy and Loss.","cbbc602b":"Create CNN Model to predict class label for eye disease"}}