{"cell_type":{"46e091cd":"code","c8c19a44":"code","1fb186a2":"code","ddbb5f81":"code","6a89c03b":"code","1a4b0247":"code","b252b1f3":"code","7d4e976e":"code","09e31267":"code","7720b976":"code","8e523451":"code","0ed6b3de":"code","88f0f7c0":"code","86678384":"code","e07096d0":"code","e0739fba":"code","334a43a6":"code","10acdac4":"code","ea853878":"code","52f43782":"code","42b7cfe5":"code","f5b3af7a":"code","6b9a9f64":"code","35d42d93":"code","73e67b83":"code","75dd008f":"code","52beb46d":"code","3ba64e05":"code","00fe114a":"code","00001b88":"code","ec0d5669":"code","79d707d3":"code","c662759a":"code","af2709d3":"code","ff70e2bd":"code","d60eb3d3":"code","1c8532f6":"code","44428c1a":"code","10410b46":"code","b84b6665":"code","6f83bbdb":"code","6f99dd7c":"code","cde3c350":"code","820c35d5":"code","020b85e9":"code","9601f385":"code","dee9f883":"code","a3584dc5":"markdown","62b14e14":"markdown","3408ee5a":"markdown","51f98d7c":"markdown","c9fc1a42":"markdown","0e20f30d":"markdown","a5c416ad":"markdown","3c1fbfd6":"markdown","2bbdeeac":"markdown","eb1c2727":"markdown","7dde2258":"markdown","4b920829":"markdown","c53c98d1":"markdown","dcd9d9d4":"markdown","5e5cb44c":"markdown","e46df91a":"markdown","b9d2beb5":"markdown","13408f8f":"markdown","31a1c25f":"markdown","87443df6":"markdown","df434f98":"markdown","50b3abcd":"markdown","efd857de":"markdown"},"source":{"46e091cd":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt","c8c19a44":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1fb186a2":"submission = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-2\/submission.csv\")\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-2\/test.csv\", parse_dates=['Date'])\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-2\/train.csv\", parse_dates=['Date'])","ddbb5f81":"display(train.head(5))\ndisplay(train.describe())\nprint(train.dtypes)\nprint(\"\\n\")\nprint(\"Number of Country_Region: \", train['Country_Region'].nunique())\nprint(\"Dates go from day\", max(train['Date']), \"to day\", min(train['Date']), \", a total of\", train['Date'].nunique(), \"days\")\nprint(\"Countries with Province\/State informed: \", train[train['Province_State'].isna()==False]['Country_Region'].unique())","6a89c03b":"display(test.head(5))\ndisplay(test.describe())\nprint(\"Number of Country_Region: \", test['Country_Region'].nunique())\nprint(\"Dates go from day\", max(test['Date']), \"to day\", min(test['Date']), \", a total of\", test['Date'].nunique(), \"days\")\nprint(\"Countries with Province\/State informed: \", test[test['Province_State'].isna()==False]['Country_Region'].unique())","1a4b0247":"display(submission.head(5))\ndisplay(submission.describe())","b252b1f3":"train['geo_id'] = train['Country_Region'].astype(str) + '_' + train['Province_State'].astype(str)\ntrain.head()","7d4e976e":"test['geo_id'] = test['Country_Region'].astype(str) + '_' + test['Province_State'].astype(str)\ntest.head()","09e31267":"fig, ax = plt.subplots()\ntrain.sort_values(by=\"Date\").groupby('geo_id').plot.line(x='Date', y='ConfirmedCases', ax=ax, legend=False)","7720b976":"#train.groupby('geo_id').plot.line(x='Date', y='ConfirmedCases')","8e523451":"train[train.Country_Region == \"China\"].Province_State.unique()","0ed6b3de":"train[train.Country_Region == \"China\"].groupby(\"Province_State\").sum()","88f0f7c0":"train_hubei = train[train['geo_id'] == \"China_Hubei\"]\ntrain_hubei","86678384":"fig, ax = plt.subplots()\ntrain_hubei.plot.line(x='Date', y='ConfirmedCases', ax=ax, legend=False)","e07096d0":"area_features = train[['geo_id', 'Country_Region', 'Province_State']].drop_duplicates().set_index('geo_id')\narea_features","e0739fba":"countryinfo = pd.read_csv(\"..\/input\/countryinfo\/covid19countryinfo.csv\", thousands=',')","334a43a6":"print(countryinfo.dtypes)\ndisplay(countryinfo.head(5))\ndisplay(countryinfo.describe())","10acdac4":"# extract population country data\npop_data = countryinfo[['country', \"pop\"]].rename(columns={'pop': 'pop_country'}).groupby(\"country\").max()\npop_data","ea853878":"# left join pop_country to area_features\narea_features = area_features.join(pop_data, how='left', on=\"Country_Region\")\narea_features","52f43782":"print(\"Number of countries with population: \", area_features[area_features['pop_country'].isna()==False].Country_Region.nunique())\nprint(\"Number of countries without population: \", area_features[area_features['pop_country'].isna()==True].Country_Region.nunique())\nprint(\"Countries without population: \", area_features[area_features['pop_country'].isna()==True].Country_Region.unique())","42b7cfe5":"# fill country population (pop_country) NA with 100 000\narea_features['pop_country'] = area_features['pop_country'].fillna(100000)","f5b3af7a":"print(\"Countries with Province\/State informed: \", train[train['Province_State'].isna()==False]['Country_Region'].unique())","6b9a9f64":"# add column num_states per country\nnum_states = area_features[['Country_Region', 'Province_State']].fillna(\"\").groupby('Country_Region').count().rename(columns={'Province_State': \"num_states\"})\narea_features = area_features.join(num_states, on=\"Country_Region\")\narea_features","35d42d93":"# fill province_state population (pop) with pop_country \/ num_states\narea_features['pop'] = area_features['pop_country'] \/ area_features['num_states']\narea_features","73e67b83":"date_of_first_infection = train[train['ConfirmedCases'] > 0].groupby(['geo_id']).agg({'Date': 'min'}).rename(columns={'Date': 'date_of_first_infection'})\ndate_of_first_infection","75dd008f":"area_features = area_features.join(date_of_first_infection, on=\"geo_id\")\narea_features","52beb46d":"hubei_curve = train[(train['Country_Region'] == 'China') & (train['Province_State'] == 'Hubei')]\nhubei_curve = hubei_curve[['Date', 'ConfirmedCases', 'Fatalities']].set_index('Date')\nhubei_curve","3ba64e05":"hubei_curve.plot.line()","00fe114a":"import datetime\ndate_start_hubei = datetime.datetime(2019, 12, 15) #hubei_curve.index.min()\ndate_start_hubei","00001b88":"area_features['date_delta_hubei'] = area_features['date_of_first_infection'] - date_start_hubei\narea_features","ec0d5669":"population_hubei = 58.5 * 10**6\npopulation_hubei","79d707d3":"area_features['pop_scale_hubei'] = area_features['pop'] \/ population_hubei\narea_features","c662759a":"area_features","af2709d3":"data = train[['geo_id', 'Date']]\ndata","ff70e2bd":"# add Hubei Curve to all Areas\ndata = data.join(hubei_curve, on='Date')\ndata","d60eb3d3":"data = data.join(area_features[['date_delta_hubei']], on=\"geo_id\")\ndata","1c8532f6":"# translate by date_delta_hubei\ndata['Date'] = data['Date'] + data['date_delta_hubei']\ndata","44428c1a":"data = data.join(area_features[['pop_scale_hubei']], on=\"geo_id\")\ndata","10410b46":"# scale by pop_scale_hubei\ndata['ConfirmedCases'] = data['ConfirmedCases'] * data['pop_scale_hubei']\ndata['Fatalities'] = data['Fatalities'] * data['pop_scale_hubei']\ndata","b84b6665":"# drop unneeded columns\ndata = data[['geo_id', 'Date', 'ConfirmedCases', 'Fatalities']]\ndata","6f83bbdb":"fig, ax = plt.subplots()\ndata.sort_values(by=\"Date\").groupby('geo_id').plot.line(x='Date', y='ConfirmedCases', ax=ax, legend=False)","6f99dd7c":"test","cde3c350":"# join \nsubmission = pd.merge(test, data, how=\"left\", on=[\"geo_id\", 'Date'])\nsubmission","820c35d5":"submission = submission[['ForecastId', 'ConfirmedCases', 'Fatalities']]\nsubmission","020b85e9":"submission.fillna(0, inplace=True)\nsubmission","9601f385":"submission.describe()","dee9f883":"submission.to_csv('submission.csv', index=False)","a3584dc5":"### 2.1.1 Population Data for Country_Regions\n> https:\/\/www.kaggle.com\/koryto\/countryinfo","62b14e14":"### 1.1.2 test","3408ee5a":"### 1.2.1 geo_id = Country_Region + Province_State\n    ","51f98d7c":"### 1.2.2 combined plot","c9fc1a42":"### 2.1.5 Population Scale to Hubei","0e20f30d":"### 2.1.3 Date of First Infection per Province_State","a5c416ad":"# 0. Load Data","3c1fbfd6":"### 2.1.4 Date Delta to Hubei","2bbdeeac":"## 1.3 China","eb1c2727":"## 2.1 Feature Preparation","7dde2258":"# 2 Copy Hubei, China\nIdea: Scale number from Hubei, China by population and translate by date of first infection.","4b920829":"## 2.4 Scale Hubei S-Curve\nScale Hubei curve to population by each Province_State****","c53c98d1":"## 1.1 Input","dcd9d9d4":"### 1.1.3 Submission","5e5cb44c":"### 2.1.2 Population Data for Province_States","e46df91a":"## 2.5 Generate Submission","b9d2beb5":"## 2.2 Set Hubei S-Curve for All Areas","13408f8f":"# 1. Exploratory Data Analysis","31a1c25f":"### 1.2.3 single plots","87443df6":"### 1.3.1 Hubei, China","df434f98":"## 1.2 Cases by Region over Time","50b3abcd":"### 1.1.1 train","efd857de":"## 2.3 Translate Hubei S-[](http:\/\/)Curve\nTranslating Hubei curve to date of first infection of each Province_State"}}