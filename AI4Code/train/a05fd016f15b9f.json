{"cell_type":{"4905c6a5":"code","b72f3668":"code","1687d6d3":"code","740bc5b0":"code","10b3c2d6":"code","be6e2456":"code","1950e5ef":"code","0abfaa85":"code","d91214f3":"code","9e903d97":"code","365afd29":"code","584a483d":"code","f6a45b82":"code","64ef5f59":"code","2a936b91":"code","9577461a":"code","57015faa":"code","6f125d5c":"code","bd6481e5":"markdown","25a6362f":"markdown","032e4996":"markdown","ef32317d":"markdown"},"source":{"4905c6a5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\ntrain=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/train.csv',sep=',')\ntest=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/test.csv',sep=',')\nsubmission=pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-1\/submission.csv',sep=',')\nprint(train.head(2))\nprint(test.head(2))","b72f3668":"print(\"Training data: \\n\", train.count(), \"\\n\\nTest data: \\n\", test.count())\nprint(\"\\n\\nTraining Missing data: \\n\",  train.isnull().sum(), \"\\n\\nTest Missing data: \\n\", test.isnull().sum())","1687d6d3":"train = train.drop(['Province\/State'],axis=1)\ntest = test.drop(['Province\/State'],axis=1)\ntrain.dtypes","740bc5b0":"def create_time_features(df):\n    \"\"\"\n    Creates time series features from datetime index\n    \"\"\"\n    df['date'] = df.index\n    df['dayofweek'] = df['date'].dt.dayofweek\n    df['quarter'] = df['date'].dt.quarter\n    df['month'] = df['date'].dt.month\n    df['year'] = df['date'].dt.year\n    df['dayofyear'] = df['date'].dt.dayofyear\n    df['dayofmonth'] = df['date'].dt.day\n    df['weekofyear'] = df['date'].dt.weekofyear\n    \n    X = df[['dayofweek','quarter','month','year',\n           'dayofyear','dayofmonth','weekofyear']]\n    return X","10b3c2d6":"train[\"iDate\"] = train[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntrain[\"iDate\"]  = train[\"iDate\"].astype(int)\ntest[\"iDate\"] = test[\"Date\"].apply(lambda x: x.replace(\"-\",\"\"))\ntest[\"iDate\"]  = test[\"iDate\"].astype(int)\n\ntrain['Date'] = pd.to_datetime(train['Date'])\ntest['Date']= pd.to_datetime(test['Date'])\ntrain = train.set_index(['Date'])\ntest = test.set_index(['Date'])","be6e2456":"create_time_features(train)\ncreate_time_features(test)","1950e5ef":"\ntrain.head(10)","0abfaa85":"train['ConfirmedCases_today'] = train.groupby(['Country\/Region'])['ConfirmedCases'].diff(1)\ntrain['Fatalities_today'] = train.groupby(['Country\/Region'])['Fatalities'].diff(1)","d91214f3":"train['ConfirmedCases_today'] = train['ConfirmedCases_today'].fillna(0)\ntrain['Fatalities_today'] = train['Fatalities_today'].fillna(0)\n\nprint(train.groupby(['Country\/Region'])['ConfirmedCases_today'].sum())\nprint(train.groupby(['Country\/Region'])['Fatalities_today'].sum())\n","9e903d97":"train.isnull().sum()","365afd29":"input_cols = [\"Lat\",\"Long\", \"iDate\"] # 'dayofweek','quarter','month','year', 'dayofyear','dayofmonth','weekofyear'] #,\noutput_cols = [\"ConfirmedCases\",\"Fatalities\"]\nids = submission[\"ForecastId\"]\nextra_feat = [\"ConfirmedCases_today\", \"Fatalities_today\"]","584a483d":"X = train[input_cols]\nY1 = train[output_cols[0]]\nY2 = train[output_cols[1]]\nX_test = test[input_cols]\nE1 = train[extra_feat[0]]\nE2 = train[extra_feat[1]]\nXE = train[input_cols+extra_feat]","f6a45b82":"#Modeling with Extra Features Prediction\n\nimport xgboost as xgb \nfrom xgboost import plot_importance, plot_tree \n\nmodel= xgb.XGBRegressor(n_estimators=1000)\n#Training for cases\n\nmodel.fit(X,E1) \nep1 = model.predict(X_test)\n\n# Training for deaths\nmodel.fit(X,E2) \nep2 = model.predict(X_test)\n","64ef5f59":"import xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\nmodel= xgb.XGBRegressor(n_estimators=1000)\n# Training for cases\nmodel.fit(X,E1)\nep1 = model.predict(X_test)\npreds = np.array(ep1)\npreds[preds < 0] = 0\npreds = np.round(preds, 0)\n\n# Training for deaths\nmodel.fit(X,E2)\nep2 = model.predict(X_test)\nprds = np.array(ep2)\nprds[prds < 0] = 0\nprds = np.round(prds, 0)","2a936b91":"\ntest['ConfirmedCases_today'] = preds #.replace(np.inf, 0) # if ep1 > 0 else test['ConfirmedCases_today'] = 0 # ['ConfirmedCases_today_prediction']\ntest['Fatalities_today'] = prds #.replace(np.inf, 0) #['Fatalities_today_prediction']","9577461a":"test.dtypes","57015faa":"XE_test = test[input_cols+extra_feat]","6f125d5c":"tree_reg= xgb.XGBRegressor(n_estimators=1000)\n\n# Training for cases\ntree_reg.fit(XE,Y1)\nprd = tree_reg.predict(XE_test)\n\n# Training for deaths\ntree_reg.fit(XE,Y2)\nprd_2 = tree_reg.predict(XE_test)\n\noutput_tree_reg = pd.DataFrame({ 'ForecastId' : ids, 'ConfirmedCases': prd,'Fatalities':prd_2 })\noutput_tree_reg.to_csv('submission.csv', index=False)\n\"\"\" scored: .46566 with [\"Lat\",\"Long\", \"iDate\", 'dayofweek','quarter','month','year', 'dayofyear','dayofmonth','weekofyear']\"\"\"\n\"\"\" scored:   with [\"Lat\",\"Long\", \"iDate\"] \"\"\"","bd6481e5":"from sklearn import linear_model\nclf = linear_model.Lasso(alpha=0.1)\nclf.fit(XE,Y1)\nprd = clf.predict(XE_test)\n\n# Training for deaths\nclf.fit(XE,Y2)\nprd_2 = clf.predict(XE_test)\n\noutput_lasso = pd.DataFrame({ 'ForecastId' : ids, 'ConfirmedCases': prd,'Fatalities':prd_2 })\noutput_lasso.to_csv('submission.csv', index=False)\n\"\"\" scored: 3.091\"\"\"","25a6362f":"Modeling with Extra Features Prediction","032e4996":"# Kernel Tutorial\nDo you like to forecast the number of Corona virus cases in the world? This is where you start from. Fork the Kernel and start playing. We have started with LASSO regression, then moved to XGBBoost and got the best results with Random Forest. \n ","ef32317d":"import xgboost as xgb\nfrom xgboost import plot_importance, plot_tree\ntree_reg= xgb.XGBRegressor(n_estimators=1000)\n\n# Training for cases\ntree_reg.fit(X,Y1)\nprd = tree_reg.predict(X_test)\n\n# Training for deaths\ntree_reg.fit(X,Y2)\nprd_2 = tree_reg.predict(X_test)\n\noutput_tree_reg = pd.DataFrame({ 'ForecastId' : ids, 'ConfirmedCases': prd,'Fatalities':prd_2 })\noutput_tree_reg.to_csv('submission.csv', index=False)\n\"\"\" scored: 0.28699 \"\"\"\n\"\"\" scored: 0.24342 with [\"Lat\",\"Long\", \"iDate\"] \"\"\""}}