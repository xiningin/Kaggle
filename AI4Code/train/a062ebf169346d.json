{"cell_type":{"104594e7":"code","ac75775d":"code","8f2f11d9":"code","627adfab":"code","0cdf39e3":"code","d741f29b":"code","bdb4227f":"code","c7f70344":"code","0147f69f":"code","07d1e332":"code","295b5d9c":"code","524c7b90":"code","a333244c":"code","bbf4f786":"code","de044a1c":"code","843713b6":"code","cfb0af34":"code","75b438e6":"code","5ec3ec5f":"code","5cf1fc8a":"code","70aacf65":"code","b790ddca":"code","09208ad3":"code","193601b9":"code","c95334ac":"code","0326fd9c":"code","652c3541":"code","aefc8527":"code","6e368dda":"markdown"},"source":{"104594e7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ac75775d":"import matplotlib.pyplot as plt\nimport cv2\nimport tensorflow as tf\nfrom tensorflow.keras import applications\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","8f2f11d9":"data_path=\"..\/input\/cassava-leaf-disease-classification\/\"\ntrain_csv_data_path=data_path+\"train.csv\"\nlabel_json_data_path=data_path+\"label_num_to_disease_map.json\"\nimages_dir_data_path=data_path+\"train_images\"","627adfab":"train_csv=pd.read_csv(train_csv_data_path)\ntrain_csv","0cdf39e3":"train_csv[\"label\"]=train_csv[\"label\"].astype('string')\n\nlabel_class=pd.read_json(label_json_data_path,orient='index')\nlabel_class=label_class.values.flatten().tolist()\nlabel_class","d741f29b":"print(\"Label names :\")\nfor i,label in enumerate(label_class):\n    print(f\"{i}.{label}\")","bdb4227f":"train_csv.head()","c7f70344":"train_gen=ImageDataGenerator(rescale=1\/255.,rotation_range=40,width_shift_range=0.2,height_shift_range=0.2,\n                            shear_range=0.2,zoom_range=0.3,fill_mode='nearest',\n                            horizontal_flip=True,vertical_flip=True,validation_split=0.15)\nval_gen=ImageDataGenerator(rescale=1\/255.,validation_split=0.15)","0147f69f":"BATCH_SIZE=32\nIMG_SIZE=224\n\ntrain_gen=train_gen.flow_from_dataframe(dataframe=train_csv,directory=images_dir_data_path,\n                                       x_col='image_id',y_col='label',target_size=(IMG_SIZE,IMG_SIZE),class_mode='categorical',\n                                       batch_size=BATCH_SIZE,shuffle=True,interpolation= 'nearest',subset='training')\nval_gen=val_gen.flow_from_dataframe(dataframe=train_csv,directory=images_dir_data_path,\n                                   x_col='image_id',y_col='label',target_size=(IMG_SIZE,IMG_SIZE),\n                                   class_mode='categorical',batch_size=BATCH_SIZE,shuffle=False,interpolation= 'nearest',\n                                   subset='validation')","07d1e332":"batch=next(train_gen)\nimages=batch[0]\nlabels=batch[1]","295b5d9c":"plt.figure(figsize=(12,9))\nfor i, (img, label) in enumerate(zip(images, labels)):\n    plt.subplot(2,3, i%6 +1)\n    plt.axis('off')\n    plt.imshow(img)\n    plt.title(label_class[np.argmax(label)])\n    \n    if i==15:\n        break","524c7b90":"# base=tf.keras.applications.ResNet152(include_top=False,weights='imagenet',input_shape=[IMG_SIZE,IMG_SIZE,3])\nbase=tf.keras.applications.EfficientNetB4(include_top=False,weights='imagenet',input_shape=[IMG_SIZE,IMG_SIZE,3])","a333244c":"base.summary()","bbf4f786":"last_layer=base.output\nx=tf.keras.layers.GlobalAveragePooling2D()(last_layer)\nx=tf.keras.layers.Dropout(0.3)(x)\nx=tf.keras.layers.Dense(256,activation='relu')(x)\nx=tf.keras.layers.Dense(5,activation='softmax')(x)\nmodel=tf.keras.Model(base.input,x)","de044a1c":"model.summary()","843713b6":"from tensorflow.keras.optimizers import RMSprop\nmodel.compile(loss='categorical_crossentropy',optimizer=RMSprop(lr=0.001),\n             metrics=['acc'])","cfb0af34":"early_stop = tf.keras.callbacks.EarlyStopping(monitor = 'val_loss', min_delta = 0.001, \n                           patience = 5, mode = 'min', verbose = 1,\n                           restore_best_weights = True)","75b438e6":"history=model.fit(train_gen,epochs=50,validation_data=val_gen,\n                 batch_size=BATCH_SIZE,callbacks=[early_stop])","5ec3ec5f":"import matplotlib.pyplot as plt\n\nacc = history.history['acc']\nval_acc = history.history['val_acc']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'b', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\nplt.show()","5cf1fc8a":"loss = history.history['loss']\nval_loss = history.history['val_loss']\n\nepochs = range(len(acc))\n\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'b', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.figure()\nplt.show()","70aacf65":"model.save('cassav_leaf_disease_classification_with_tf_10.h5')","b790ddca":"loaded_model=tf.keras.models.load_model('cassav_leaf_disease_classification_with_tf_10.h5')","09208ad3":"from sklearn.metrics import classification_report, confusion_matrix\n\nY_pred = loaded_model.predict_generator(val_gen, val_gen.samples \/\/ val_gen.batch_size + 5)\ny_pred = np.argmax(Y_pred, axis=1)\nprint('Confusion Matrix')\nprint(confusion_matrix(val_gen.classes, y_pred))","193601b9":"target_names = list(train_gen.class_indices.keys()) # Classes\nprint(classification_report(val_gen.classes, y_pred, target_names=target_names))\n","c95334ac":"import seaborn as sns\n\ncm = confusion_matrix(val_gen.classes, y_pred)\nlabels = ['No Default', 'Default']\nplt.figure(figsize=(8,6))\nsns.heatmap(cm,xticklabels=labels, yticklabels=labels, annot=True, fmt='d', cmap=\"Blues\", vmin = 0.2);\nplt.title('Confusion Matrix')\nplt.ylabel('True Class')\nplt.xlabel('Predicted Class')\nplt.show()\n","0326fd9c":"test_img_path = data_path+\"test_images\/2216849948.jpg\"\n\nimg = cv2.imread(test_img_path)\nresized_img = cv2.resize(img, (IMG_SIZE, IMG_SIZE)).reshape(-1, IMG_SIZE, IMG_SIZE, 3)\/255\n\nplt.figure(figsize=(8,4))\nplt.title(\"TEST IMAGE\")\nplt.imshow(resized_img[0])","652c3541":"preds = []\nss = pd.read_csv(data_path+'sample_submission.csv')\n\nfor image in ss.image_id:\n    img = tf.keras.preprocessing.image.load_img(data_path+'test_images\/' + image)\n    img = tf.keras.preprocessing.image.img_to_array(img)\n    img = tf.keras.preprocessing.image.smart_resize(img, (IMG_SIZE, IMG_SIZE))\n    img = tf.reshape(img, (-1, IMG_SIZE, IMG_SIZE, 3))\n    prediction = loaded_model.predict(img\/255.)\n    preds.append(np.argmax(prediction))\n\nmy_submission = pd.DataFrame({'image_id': ss.image_id, 'label': preds})\nmy_submission.to_csv('submission.csv', index=False) ","aefc8527":"print(\"Submission File: \\n---------------\\n\")\nprint(my_submission.head()) # Predicted Output","6e368dda":"**Confusion Matrix**"}}