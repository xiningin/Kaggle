{"cell_type":{"520b9a4f":"code","369bbe95":"code","1bb94438":"code","f81423cc":"code","703af85d":"code","ddb85e30":"code","c46c37f8":"code","c526792d":"code","3580a628":"code","b45e89d8":"code","f5b1716b":"code","f0182382":"code","d630d4d7":"code","b1083f7c":"code","25a7c265":"code","5dd7762f":"code","26360cea":"code","7db8800d":"code","1ebc3557":"code","5f2e0dec":"code","632b26cf":"code","00c0b9df":"code","46881574":"code","ff3229a4":"code","f65cc6fe":"markdown"},"source":{"520b9a4f":"import sys\nprint(sys.executable)","369bbe95":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport time\nimport os\nfrom IPython.display import clear_output\n%matplotlib inline\n\nimport tensorflow as tf\n# import tensorflow_addons as tfa\n\nprint('tensorflow version: {}'.format(tf.__version__))\nprint('GPU \uc0ac\uc6a9 \uac00\ub2a5 \uc5ec\ubd80: {}'.format(tf.test.is_gpu_available()))\nprint(tf.config.list_physical_devices('GPU'))","1bb94438":"train_pandas = pd.read_csv(\"..\/input\/train.csv\")\ntest_pandas = pd.read_csv(\"..\/input\/test.csv\")","f81423cc":"train_pandas","703af85d":"train_data = train_pandas\ntest_data = test_pandas\ntrain_data.info()","ddb85e30":"train_data_without_label = train_data.drop([\"SalePrice\"],axis=1)\ntrain_test_append = train_data_without_label.append(test_data)\n\ndictionary_list = []\nfor col in train_test_append.select_dtypes(include=['object']).columns:\n    tmp_dic = {}\n    for number, key in enumerate(list(set(train_data_without_label[col].values))):\n        if isinstance(key, float): # if key is 'nan' then value is also 'nan'\n            tmp_dic[key] = key\n        else:\n            tmp_dic[key] = number\n    dictionary_list.append(tmp_dic)\n    print(col, tmp_dic, len(tmp_dic))\n\nprint(dictionary_list)","c46c37f8":"for index, col in enumerate(train_data_without_label.select_dtypes(include=['object']).columns):\n    train_data[col] = train_data[col].map(dictionary_list[index]).astype(float)\n    test_data[col] = test_data[col].map(dictionary_list[index]).astype(float)","c526792d":"for col in train_data:\n    if train_data[col].isnull().any(): # fill nan to mean in that column\n        train_data[col] = train_data[col].fillna(train_data[col].mean())\nfor col in test_data:\n    if test_data[col].isnull().any(): # fill nan to mean in that column\n        test_data[col] = test_data[col].fillna(test_data[col].mean())","3580a628":"train_data.info()","b45e89d8":"test_data.info()","f5b1716b":"train_data.drop('Id',axis = 1, inplace = True)\n\nID = test_data.Id\ntest_data.drop('Id',axis = 1, inplace = True)\n\nprint(\"\")\nprint(\"List of features contained our dataset:\",list(train_data.columns))","f0182382":"train_data.head(10)","d630d4d7":"from sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\n\ncol_train = list(train_data.columns)\ncol_train_bis = list(train_data.columns)\n\ncol_train_bis.remove('SalePrice')\n\nprepro_label = MinMaxScaler() # use later to reverse transform\nprepro_label.fit(train_data[\"SalePrice\"].values.reshape(-1,1))\n\nprepro_train = MinMaxScaler()\nprepro_train.fit(train_data)\n\nprepro_test = MinMaxScaler()\n# prepro_test.fit(test_data)\nprepro_test.fit(train_data.drop([\"SalePrice\"],axis=1))\n\ntrain = pd.DataFrame(prepro_train.transform(train_data),columns = col_train)\ntest  = pd.DataFrame(prepro_test.transform(test_data),columns = col_train_bis)\n\ntrain.head()","b1083f7c":"# List of features\nCOLUMNS = col_train\nFEATURES = col_train_bis\nLABEL = \"SalePrice\"\n\n# Columns\nfeature_cols = FEATURES\n\n# Training set and Prediction set with the features to predict\ntraining_set = train[COLUMNS]\nprediction_set = train.SalePrice\n\n# Train and Test \nx_train, x_test, y_train, y_test = train_test_split(training_set[FEATURES] , prediction_set, test_size=0.2, random_state=2)\ny_train = pd.DataFrame(y_train, columns = [LABEL])\ntraining_set = pd.DataFrame(x_train, columns = FEATURES).merge(y_train, left_index = True, right_index = True)\ntraining_set.head()","25a7c265":"# Training for submission\ntraining_sub = training_set[col_train]","5dd7762f":"# Same thing but for the test set\ny_test = pd.DataFrame(y_test, columns = [LABEL])\ntesting_set = pd.DataFrame(x_test, columns = FEATURES).merge(y_test, left_index = True, right_index = True)\ntesting_set.head()","26360cea":"import numpy as np\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense\nfrom tensorflow.keras.wrappers.scikit_learn import KerasRegressor\n\nseed = 7\nnp.random.seed(seed)\n\n# Model\nmodel = Sequential()\nmodel.add(Dense(200, input_dim=79, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(100, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(50, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(25, kernel_initializer='normal', activation='relu'))\nmodel.add(Dense(1, kernel_initializer='normal'))\n# Compile model\nmodel.compile(loss='mean_squared_error', optimizer=tf.keras.optimizers.Adam())\n\nfeature_cols = training_set[FEATURES]\nlabels = training_set[LABEL].values\n\nmodel.fit(np.array(feature_cols), np.array(labels), epochs=100, batch_size=10)","7db8800d":"# Evaluation on the test set created by train_test_split\nmodel.evaluate(np.array(feature_cols), np.array(labels))","1ebc3557":"# Predictions\nfeature_cols_test = testing_set[FEATURES]\nlabels_test = testing_set[LABEL].values\n\ny = model.predict(np.array(feature_cols_test))\n# predictions = list(itertools.islice(y, testing_set.shape[0]))\n","5f2e0dec":"predictions = prepro_label.inverse_transform(y).reshape(-1)","632b26cf":"reality = pd.DataFrame(prepro_train.inverse_transform(testing_set), columns = [COLUMNS])","00c0b9df":"reality = reality.loc[:, ['SalePrice']].values.reshape(-1)","46881574":"import matplotlib\n\nmatplotlib.rc('xtick', labelsize=30) \nmatplotlib.rc('ytick', labelsize=30) \n\nfig, ax = plt.subplots(figsize=(50, 40))\n\nplt.style.use('ggplot')\nplt.plot(predictions, reality, 'ro')\nplt.xlabel('Predictions', fontsize = 30)\nplt.ylabel('Reality', fontsize = 30)\nplt.title('Predictions x Reality on dataset Test', fontsize = 30)\nax.plot([reality.min(), reality.max()], [reality.min(), reality.max()], 'k--', lw=4)\nplt.show()","ff3229a4":"y_predict = model(np.array(test))\n\ndef to_submit(pred_y,name_out):\n    y_predict = prepro_label.inverse_transform(np.array(pred_y).reshape(-1,1))\n    y_predict = pd.DataFrame(y_predict, columns = ['SalePrice'])\n    testId = pd.DataFrame(ID.values, columns= ['Id'])\n    y_predict = testId.join(y_predict)\n    y_predict.to_csv(name_out + '.csv',index=False)\n    \nto_submit(y_predict, \"submission_continuous\")","f65cc6fe":"Original Codes from :  \nhttps:\/\/www.kaggle.com\/zoupet\/neural-network-model-for-house-prices-tensorflow\/output  \nhttps:\/\/www.kaggle.com\/diegosiebra\/neural-network-model-for-house-prices-keras  \nhttps:\/\/rfriend.tistory.com\/450"}}