{"cell_type":{"b472a77b":"code","d45516e4":"code","e9aaf599":"code","ca7ebf0a":"code","de1f825b":"code","517fa8b0":"code","ddc425a6":"code","f5cdbc3b":"code","5eddfd13":"code","cbc73b88":"code","d2e62264":"code","9fa8952d":"code","95c91f3c":"code","b787d0e4":"code","bf815512":"code","b4c5b20a":"code","d1b66c93":"code","c964bc24":"code","dd610b0c":"code","7c28de6e":"code","cc62a29e":"code","3d84d8a2":"code","4883f6ac":"code","43616ec3":"code","a3b4772e":"code","5121f974":"code","e6bbc51d":"code","ac763da5":"code","a888da09":"code","652cfb3b":"code","d8eaa941":"code","d1ad14e6":"code","051b9dc6":"code","c39e5e59":"code","1375586e":"markdown","4f12053e":"markdown","eacbd226":"markdown","608a63db":"markdown","0acb1d7f":"markdown","e192e31c":"markdown","4697847d":"markdown","c798f830":"markdown","76832d3f":"markdown","d2f564c1":"markdown","4b8c7d60":"markdown","d8bdd34d":"markdown","8b8d72ad":"markdown","6547969e":"markdown","5fa26fc7":"markdown","76415505":"markdown","a8895e16":"markdown","dcfbfd15":"markdown","51761f28":"markdown"},"source":{"b472a77b":"%load_ext autoreload\n%autoreload 2\n\nimport pandas as pd\nimport numpy as np\nimport tqdm\n\nfrom sklearn.model_selection import train_test_split, KFold\n\nimport lightgbm as lgb\n\nimport pickle\n\nnp.warnings.filterwarnings('ignore')","d45516e4":"import utils_21042021 as utils","e9aaf599":"# CURRENT_DIR = '.\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043b\u043e\u043a\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u0430\u0448\u0438\u043d\u044b \nCURRENT_DIR = '..\/'  # \u0438\u043c\u044f \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0433\u0433\u043b\n\nPATH_TO_MODELS = CURRENT_DIR + 'input\/models-booster-alfabattle2-sandbox\/'\n\nPATH_TO_WORKDIR = CURRENT_DIR + 'working\/'","ca7ebf0a":"!pip freeze > requirements.txt","de1f825b":"def func_border(a, border):\n    \"\"\"\n    \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u0438\u0437 \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u043e\u0432 \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u0435\n    :border - \u0433\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0448\u0435 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0442\u043d\u043e\u0441\u0438\u043c \u043a \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u043c (1) \u043d\u0438\u0436\u0435 0\n    \"\"\"\n    if a > border:\n        return 1\n    else:\n        return 0\nvfunc = np.vectorize(func_border)","517fa8b0":"%%time\nmerged_train_data = pd.read_csv('..\/input\/alfabattle2-sandbox\/preproc_data_for_boosting\/preproc_data_for_boosting\/merged_data.csv')\nmerged_test_data = pd.read_csv('..\/input\/alfabattle2-sandbox\/preproc_data_for_boosting\/preproc_data_for_boosting\/merged_test_data.csv')","ddc425a6":"%%time\nmodels_LGBM = []\nfeats_models = []\nsubs_models = []\nfor i_model in range(1,5,1):\n    temp_list_models = []\n    for i_count_model in range(1,6,1):\n        path_to_model = f'model{i_model}\/model{i_model}_{i_count_model}.txt'\n        model = lgb.Booster(model_file=PATH_TO_MODELS + path_to_model)\n        temp_list_models.append(model)\n        \n    models_LGBM.append(temp_list_models)\n    path_to_feats = f'model{i_model}\/feats_model{i_model}.pickle'\n    with open(PATH_TO_MODELS + path_to_feats, 'rb') as f:\n        feats = pickle.load(f)\n    feats_models.append(feats)\n    path_to_sub = f'model{i_model}\/sub_model{i_model}.csv'\n    sub = pd.read_csv(PATH_TO_MODELS + path_to_sub)\n    subs_models.append(sub)","f5cdbc3b":"%%time\nfor i_models, models in enumerate(models_LGBM):\n    score = np.zeros(len(merged_test_data))\n    desc_str=f'\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043c\u043e\u0434\u0435\u043b\u0438 \u043d\u043e\u043c\u0435\u0440 := {i_models+1} \u043f\u043e \u0444\u043e\u043b\u0434\u0430\u043c:'\n    for model in tqdm.tqdm_notebook(models,desc=desc_str):\n        score += model.predict(merged_test_data[feats_models[i_models]]) \/ len(models)\n    print(f'\u041a\u043e\u043b-\u0432\u043e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438:= {len(feats_models[i_models])}')\n    submission = pd.DataFrame({\n        'app_id' : merged_test_data.app_id.values,\n        'score': score\n    }) \n    submission['score_true']= subs_models[i_models].score\n    submission['diff']= submission['score'] - submission['score_true']\n    max_ = submission['diff'].max()\n    min_ = submission['diff'].min()\n    mean_ = submission['diff'].mean()\n    print(f'\u041c\u0430\u043a\u0441\u0438\u043c\u0443\u043c, \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0438 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442 \u043e\u0448\u0438\u0431\u043a\u0438 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430:= {max_:.4f}, {min_:.4f} ,{mean_:.4f}')","5eddfd13":"targets = merged_train_data.flag","cbc73b88":"%%time\nfeatures = feats_models[0]\nlgb_models = models_LGBM[0]\n\ntargets_pred_broba = np.zeros(len(merged_train_data))\n\nfor model in tqdm.tqdm_notebook(lgb_models, desc='\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 5 \u0444\u043e\u043b\u0434\u0430\u0445:'):\n    targets_pred_broba += model.predict(merged_train_data[features])\/ len(lgb_models)","d2e62264":"sum_defolt_train = targets.sum()\nsum_all_train = len(targets)","9fa8952d":"sort_pred = sorted(targets_pred_broba)\nborder = sort_pred[sum_all_train-sum_defolt_train]\ntargets_pred = vfunc(targets_pred_broba, border)","95c91f3c":"# \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u0440\u0430\u0437 \u0438\u043d\u0438\u0446\u0438\u0438\u0440\u0443\u0435\u043c \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0443\u044e \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c \u0441\u043a\u043e\u0440\u043e\u043c \u043d\u0443\u043b\u0435\u0432\u044b\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\nutils.last_pred = np.zeros((4,len(targets)))","b787d0e4":"utils.test_last_pred(targets, targets_pred, targets_pred_broba,len(features))\ndf_metrics = utils.all_metrics(targets, targets_pred, targets_pred_broba,len(features))","bf815512":"df_metrics = df_metrics.rename(columns={'\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435':'model1'})\ndf_metrics.drop(['\u0414\u0435\u043b\u044c\u0442\u0430 \u0441 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u043c', '\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435'], axis=1, inplace=True)","b4c5b20a":"utils.plot_confusion_matrix_double(targets, targets_pred, 1.2, ['\u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435', '\u041d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435'])","d1b66c93":"utils.ROC_and_PR_curves(targets, targets_pred_broba, 1.2)","c964bc24":"%%time\nfeatures = feats_models[1]\nlgb_models = models_LGBM[1]\n\ntargets_pred_broba = np.zeros(len(merged_train_data))\n\nfor model in tqdm.tqdm_notebook(lgb_models, desc='\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 5 \u0444\u043e\u043b\u0434\u0430\u0445:'):\n    targets_pred_broba += model.predict(merged_train_data[features])\/ len(lgb_models)","dd610b0c":"sort_pred = sorted(targets_pred_broba)\nborder = sort_pred[sum_all_train-sum_defolt_train]\ntargets_pred = vfunc(targets_pred_broba, border)","7c28de6e":"temp_df = utils.all_metrics(targets, targets_pred, targets_pred_broba,len(features))\ndf_metrics['model2'] = temp_df['\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435']","cc62a29e":"utils.plot_confusion_matrix_double(targets, targets_pred, 1.2, ['\u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435', '\u041d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435'])","3d84d8a2":"utils.ROC_and_PR_curves(targets, targets_pred_broba, 1.2)","4883f6ac":"%%time\nfeatures = feats_models[2]\nlgb_models = models_LGBM[2]\n\ntargets_pred_broba = np.zeros(len(merged_train_data))\n\nfor model in tqdm.tqdm_notebook(lgb_models, desc='\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 5 \u0444\u043e\u043b\u0434\u0430\u0445:'):\n    targets_pred_broba += model.predict(merged_train_data[features])\/ len(lgb_models)","43616ec3":"sort_pred = sorted(targets_pred_broba)\nborder = sort_pred[sum_all_train-sum_defolt_train]\ntargets_pred = vfunc(targets_pred_broba, border)","a3b4772e":"temp_df = utils.all_metrics(targets, targets_pred, targets_pred_broba,len(features))\ndf_metrics['model3'] = temp_df['\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435']","5121f974":"utils.plot_confusion_matrix_double(targets, targets_pred, 1.2, ['\u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435', '\u041d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435'])","e6bbc51d":"utils.ROC_and_PR_curves(targets, targets_pred_broba, 1.2)","ac763da5":"%%time\nfeatures = feats_models[3]\nlgb_models = models_LGBM[3]\n\ntargets_pred_broba = np.zeros(len(merged_train_data))\n\nfor model in tqdm.tqdm_notebook(lgb_models, desc='\u041f\u0440\u043e\u0433\u043d\u043e\u0437 \u043f\u043e \u043c\u043e\u0434\u0435\u043b\u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u043d\u0430 5 \u0444\u043e\u043b\u0434\u0430\u0445:'):\n    targets_pred_broba += model.predict(merged_train_data[features])\/ len(lgb_models)","a888da09":"sort_pred = sorted(targets_pred_broba)\nborder = sort_pred[sum_all_train-sum_defolt_train]\ntargets_pred = vfunc(targets_pred_broba, border)","652cfb3b":"temp_df = utils.all_metrics(targets, targets_pred, targets_pred_broba,len(features))\ndf_metrics['model4'] = temp_df['\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435']","d8eaa941":"utils.plot_confusion_matrix_double(targets, targets_pred, 1.2, ['\u0414\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435', '\u041d\u0435 \u0434\u0435\u0444\u043e\u043b\u0442\u043d\u044b\u0435'])","d1ad14e6":"utils.ROC_and_PR_curves(targets, targets_pred_broba, 1.2)","051b9dc6":"df_metrics","c39e5e59":"df_metrics.to_csv('metrics_models.csv', index=False)","1375586e":"## 6.2 \u0420\u0430\u0441\u0447\u0435\u0442 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 (targets_pred) \u0438\u0437 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 (pred_proba)","4f12053e":"## 4.4 \u041c\u0435\u0442\u0440\u0438\u043a\u0438, \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043a\u0440\u0438\u0432\u044b\u0435","eacbd226":"## 5.3 \u041c\u0435\u0442\u0440\u0438\u043a\u0438, \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043a\u0440\u0438\u0432\u044b\u0435","608a63db":"## 3.3 \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0438\u043c\u043f\u043e\u0440\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0435\u0439","0acb1d7f":"## 7.3 \u041c\u0435\u0442\u0440\u0438\u043a\u0438, \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043a\u0440\u0438\u0432\u044b\u0435","e192e31c":"### \u0414\u0438\u043f\u043b\u043e\u043c\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 \u0410\u043b\u0435\u043a\u0441\u0430\u043d\u0434\u0440\u0430 \u0421\u043e\u043a\u043e\u043b\u043e\u0432\u0430\n\n#### \u0410\u043d\u0430\u043b\u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0433\u0440\u0430\u0434\u0438\u0435\u043d\u0442\u043d\u043e\u0433\u043e \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430 LightGBM\n\u041a\u0435\u0440\u043d\u0435\u043b 5 \u0438\u0437 5 \u0432 \u0440\u0430\u0437\u0434\u0435\u043b\u0435 ML (\u043e\u0442\u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d 21.04.2021)\n---\n\n# 1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a, \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\n## 1.1. \u0418\u043c\u043f\u043e\u0440\u0442 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a","4697847d":"# 8. \u0421\u0432\u043e\u0434\u043d\u0430\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u043f\u043e \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c \u043c\u043e\u0434\u0435\u043b\u0435\u0439","c798f830":"# 6. \u0410\u043d\u0430\u043b\u0438\u0437 \u0442\u0440\u0435\u0442\u044c\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (3)\n---\n## 6.1 \u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 ","76832d3f":"## 4.3 \u0420\u0430\u0441\u0447\u0435\u0442 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 (targets_pred) \u0438\u0437 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 (pred_proba)","d2f564c1":"## 3.2 \u0418\u043c\u043f\u043e\u0440\u0442 \u043f\u0440\u0435\u0434\u043e\u0431\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0431\u0443\u0441\u0442\u0438\u043d\u0433\u0430 (LightGBM \u0438 CatBoost) \n(\u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0441\u044f \u0432 [\u0432\u0442\u043e\u0440\u043e\u043c (LightGBM)](https:\/\/www.kaggle.com\/sokolovaleks\/sf-dst-10-diplom-2-ml-sokolov) \u0438 [\u0442\u0440\u0435\u0442\u044c\u0435\u043c (CatBoost)](https:\/\/www.kaggle.com\/sokolovaleks\/sf-dst-10-diplom-3-ml-sokolov) \u043a\u0435\u0440\u043d\u0435\u043b\u0430\u0445)","4b8c7d60":"## 1.2. \u0413\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u044b","d8bdd34d":"## 6.3 \u041c\u0435\u0442\u0440\u0438\u043a\u0438, \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u043a\u0440\u0438\u0432\u044b\u0435","8b8d72ad":"# 4. \u0410\u043d\u0430\u043b\u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (1)\n---\n## 4.1 \u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 ","6547969e":"# 3. \u0418\u043c\u043f\u043e\u0440\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043c\u043e\u0434\u0435\u043b\u0435\u0439\n---\n## 3.1 \u0418\u043c\u043f\u043e\u0440\u0442 \u0430\u0433\u0440\u0435\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435 \u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0430\n(\u043f\u0440\u0435\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0441\u044f \u0432 [\u043f\u0435\u0440\u0432\u043e\u043c \u043a\u0435\u0440\u043d\u0435\u043b\u0435](https:\/\/www.kaggle.com\/sokolovaleks\/sf-dst-10-diplom-1-ml-sokolov))","5fa26fc7":"## 5.2 \u0420\u0430\u0441\u0447\u0435\u0442 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 (targets_pred) \u0438\u0437 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 (pred_proba)","76415505":"## 7.2 \u0420\u0430\u0441\u0447\u0435\u0442 \u0431\u0438\u043d\u0430\u0440\u043d\u043e\u0433\u043e \u0432\u0435\u043a\u0442\u043e\u0440\u0430 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 (targets_pred) \u0438\u0437 \u0432\u0435\u0440\u043e\u044f\u0442\u043d\u043e\u0441\u0442\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 (pred_proba)","a8895e16":"# 2. \u0412\u0441\u043f\u043e\u043c\u043e\u0433\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438","dcfbfd15":"# 5. \u0410\u043d\u0430\u043b\u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (2)\n---\n## 5.1 \u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 ","51761f28":"# 7. \u0410\u043d\u0430\u043b\u0438\u0437 \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 (4)\n---\n## 7.1 \u0420\u0430\u0441\u0447\u0435\u0442 \u043f\u0440\u043e\u0433\u043d\u043e\u0437\u0430 \u0434\u0435\u0444\u043e\u043b\u0442\u0430 "}}