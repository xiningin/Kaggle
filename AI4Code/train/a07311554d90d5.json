{"cell_type":{"18dd7c0b":"code","d21a9857":"code","804e0d3d":"code","519b04af":"code","152430e6":"code","a5d41164":"code","24dac099":"code","540477e4":"code","5320c880":"markdown","3582fff2":"markdown","a2ec8685":"markdown"},"source":{"18dd7c0b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d21a9857":"# Unlock the triple apostrophe for input\n'''\ncost = {}\nc = int(input('Number of stage: '))\nfor x in range(1, c+1):\n    row = int(input(f\"Enter stage{x} number of rows:\"))\n    col = int(input(f\"Enter stage{x} number of columns:\"))\n    print(\"Enter the entries in a single line (separated by space): \")\n    entries = list(map(int, input().split()))\n    matrix = np.array(entries).reshape(row,col)\n    cost[\"s{0}\".format(x)] = matrix\nprint(cost)\n'''","804e0d3d":"# Input example\ncost = {'s1': np.array([[2, 4, 3]]), \n        's2': np.array([[7, 4, 6],[3, 2, 4],[4, 1, 5]]), \n        's3': np.array([[1, 4],[6, 3],[3, 3]]), \n        's4': np.array([[3],[4]])}\nc = 4","519b04af":"stage,x={},{}\nfor k in range(c, 0, -1):\n    if k == c:\n        stage[\"stage{0}\".format(k)] = cost[f's{k}']\n        x[\"x{0}\".format(k)] = np.transpose(cost[f's{k}'])\n        print(f'Stage {k}: {stage[\"stage{0}\".format(k)]}')\n        print(f'X{k} value: {x[\"x{0}\".format(k)]}')\n    elif k == c-1:\n        stage[\"stage{0}\".format(k)] = []\n        x[\"x{0}\".format(k)]=[]\n        for i in range(len(cost[f's{k}'])):\n            s = x[\"x{0}\".format(k+1)]+cost[f's{k}'][i]\n            stage[\"stage{0}\".format(k)].append(s)\n        for j in stage[\"stage{0}\".format(k)]:\n            s = min(j.tolist())\n            m = min(s)\n            x[\"x{0}\".format(k)].append(m)\n        x[\"x{0}\".format(k)] = np.array(x[\"x{0}\".format(k)])\n        print(f'Stage {k}: {stage[\"stage{0}\".format(k)]}')\n        print(f'X{k} value: {x[\"x{0}\".format(k)]}')\n    else :\n        stage[\"stage{0}\".format(k)] = []\n        x[\"x{0}\".format(k)]=[]\n        for i in range(len(cost[f's{k}'])):\n            s = np.transpose(x[\"x{0}\".format(k+1)])+cost[f's{k}'][i]\n            stage[\"stage{0}\".format(k)].append(s)\n        for j in stage[\"stage{0}\".format(k)]:\n            s = min(j.tolist())\n            x[\"x{0}\".format(k)].append(s)\n        x[\"x{0}\".format(k)] = np.array(x[\"x{0}\".format(k)])\n        print(f'Stage {k}: {stage[\"stage{0}\".format(k)]}')\n        print(f'X{k} value: {x[\"x{0}\".format(k)]}')","152430e6":"# Example with input\n\nquantity = [0,1,2,3,4,5,6,7]\nprofit ={'p1':[0, 0.8, 1.5, 2.3, 3, 3.6, 4, 4.4],\n         'p2':[0, 0.6, 1.2, 2, 2.8, 3.6, 4, 4.3],\n         'p3':[0, 0.6, 1.2, 1.9, 2.8, 3.6, 4.7, 5.4]}","a5d41164":"# Unlock the triple apostrophe for input\n\n'''\nprint(\"Enter quantity in a single line (separated by space): \")\nquantity = list(map(float, input().split()))\nprofit = {}\nprofit_rv = {}\nt = int(input('Number of target :'))\nfor y in range(1,t+1):\n    print(\"Enter target{y} profit\/quantity in a single line (separated by space): \")\n    entries = list(map(float, input().split()))\n    profit[\"p{0}\".format(y)] = entries\n'''","24dac099":"dummy = []\nd = {}\nloop = len(quantity)\nfor r in range(len(quantity)-1,-1,-1):\n    dum = []\n    for n in range(loop-1,-1,-1):\n      add = profit[f'p1'][n]\n      dum.append(add)\n    d[\"d{0}\".format(r)] = dum\n    loop-=1\ndummy.append(d)","540477e4":"nstage = []\nxvalue = {}\nfor o in range(len(profit)):\n  stage = {}\n  x = []\n  if o == 0:\n    loop = 1\n    for l in range(len(quantity)):\n      stg = []\n      for n in range(loop):\n        stg.append(profit[f'p{o+1}'][n])\n      stage[\"s{0}\".format(l)] = stg\n      loop+=1\n    nstage.append(stage)\n    for v in range(len(stage)):\n      x.append(max(nstage[o][f's{v}']))\n    xvalue['x{0}'.format(o)] = x\n    print(f'Stage {o+1} matrix: {stage}')\n    print(f'Stage {o+1} max value: {x}')\n  else:\n    d = {}\n    loops = len(quantity)\n    for r in range(len(quantity)-1,-1,-1):\n      dum = []\n      for w in range(loops-1,-1,-1):\n        add = xvalue[f'x{abs(o-1)}'][w]\n        dum.append(add)\n      d[\"d{0}\".format(r)] = dum\n      loops-=1\n    dummy.append(d)\n    x.clear()\n    loop = 1\n    for l in range(len(quantity)):\n      stg = []\n      for n in range(loop):\n        add = profit[f'p{o+1}'][n]+dummy[o][f'd{l}'][n]\n        stg.append(add)\n      stage[\"s{0}\".format(l)] = stg\n      loop+=1\n    nstage.append(stage)\n    for v in range(len(stage)):\n      x.append(max(nstage[o][f's{v}']))\n    xvalue['x{0}'.format(o)] = x\n    print(f'Stage {o+1} matrix: {stage}')\n    print(f'Stage {o+1} max value: {x}')","5320c880":"## **Minimize Case**","3582fff2":"# **DYNAMIC PROGRAMMING**\n### By Zaafirrahman","a2ec8685":"## **Maximize Case**"}}