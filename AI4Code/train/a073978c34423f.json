{"cell_type":{"3167fd09":"code","7eef232c":"code","41ccecd1":"code","e110feb1":"code","8d4bda22":"code","34190d70":"code","15d60841":"code","274aec20":"code","78e13005":"code","55bbadd3":"code","60104816":"code","32a3474b":"code","3f68971b":"code","609d8009":"code","26985884":"code","6514885b":"code","db59b624":"code","715bc9ac":"code","c1196f21":"code","705fa13a":"code","e3e4755d":"code","74f05f39":"code","64b20c86":"code","f50d0f56":"code","fe8c980a":"code","1752dfe8":"code","8300e716":"code","da60d0db":"code","b51b3005":"code","5df3820d":"code","96d2b02d":"code","722b2fbd":"code","2d2c0aac":"code","575d6b0f":"code","35556c20":"code","cf3b88e1":"code","040b92f4":"code","72df605f":"code","1722673b":"code","f419cdf6":"code","ab5312c0":"markdown","dd332407":"markdown","f7ff086b":"markdown","48912721":"markdown","a8ce6954":"markdown","1a4ce9d7":"markdown","58613389":"markdown","396a833b":"markdown","2bfe1865":"markdown","f2185d5a":"markdown","1b95f1ef":"markdown","345da46a":"markdown","69140142":"markdown","5581f46a":"markdown","3997fd63":"markdown","1d2d85f2":"markdown","3fe9f95d":"markdown","8363f20d":"markdown","f1dc723d":"markdown","181eae7f":"markdown","8412f497":"markdown","99a60ff0":"markdown","ff625367":"markdown","4722ae4d":"markdown","3a0890f7":"markdown","a396a2a8":"markdown","17888655":"markdown","d4586bb7":"markdown","72236971":"markdown"},"source":{"3167fd09":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import skew, boxcox\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom yellowbrick.regressor import ResidualsPlot\nimport math\nfrom sklearn.metrics import mean_squared_error\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\npd.options.mode.chained_assignment = None\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7eef232c":"df = pd.read_csv('..\/input\/data.csv')\ndf.shape","41ccecd1":"df.head(5)","e110feb1":"drop_cols = ['Unnamed: 0', 'LS', 'ST', 'RS', 'LW', 'LF', 'CF', 'RF', 'RW', 'LAM', 'CAM', 'RAM', 'LM', 'LCM', 'CM', 'RCM', 'RM', 'LWB', 'LDM',\n       'CDM', 'RDM', 'RWB', 'LB', 'LCB', 'CB', 'RCB', 'RB', 'Body Type', 'Jersey Number', 'Joined', 'Loaned From', 'Flag', 'Club Logo',\n             'Contract Valid Until', 'Photo']\ndf.drop(drop_cols, axis=1, inplace=True)\ndf.shape","8d4bda22":"all_pos = {'RF': 'Forward', 'ST': 'Forward', 'LW': 'Forward', 'GK': 'Goalkeeper', 'RCM': 'Midfielder', \n           'LF': 'Forward', 'RS': 'Forward', 'RCB': 'Defender', 'LCM': 'Midfielder', 'CB': 'Defender',\n           'LDM': 'Midfielder', 'CAM':  'Midfielder', 'CDM': 'Midfielder', 'LS': 'Forward', 'LCB': 'Defender', \n           'RM': 'Midfielder', 'LAM': 'Midfielder', 'LM': 'Midfielder', 'LB': 'Defender', 'RDM': 'Midfielder',\n           'RW': 'Forward', 'CM': 'Midfielder', 'RB': 'Defender', 'RAM': 'Midfielder', 'CF': 'Forward', 'RWB': 'Defender', 'LWB': 'Defender'}\n\ndf['Position_Cat'] = df['Position'].map(all_pos)","34190d70":"fig, ax = plt.subplots(figsize=(20, 10))\nsns.lineplot(x=\"Age\", y=\"Overall\", hue=\"Position_Cat\", data=df, ax=ax);","15d60841":"top_clubs = df.groupby(by=['Club'])['Overall'].sum().reset_index().sort_values(by=[\"Overall\"], ascending=False).head(10)\nsns.barplot(y='Club', x='Overall', data=top_clubs, palette=sns.color_palette(\"Blues_r\", 10));","274aec20":"df['Improvement Scope'] = df['Potential'] - df['Overall']\ntop_clubs_to_improve = df.groupby(by=['Club'])['Improvement Scope'].sum().reset_index().\\\nsort_values(by=[\"Improvement Scope\"], ascending=False).head(10)\nsns.barplot(y='Club', x='Improvement Scope', data=top_clubs_to_improve, palette=sns.color_palette(\"Greens_r\", 10));","78e13005":"top_30_df = df.iloc[df.groupby('Nationality')['Overall'].nlargest(30).reset_index()['level_1']]\ntop_nations = top_30_df.groupby(by=['Nationality'])['Overall'].sum().reset_index().sort_values(by=[\"Overall\"], ascending=False).head(10)\nsns.barplot(y='Nationality', x='Overall', data=top_nations, palette=sns.color_palette(\"Reds_r\", 10));","55bbadd3":"null_counts_df = df.isnull().sum().to_frame(name=\"null counts\")\nnull_counts_df[null_counts_df[\"null counts\"] > 0].index","60104816":"df = df[df['Position'].notnull()]\n# Assign club as 'Other' for players having no club assigned here\ndf['Club'].fillna('Other', inplace=True)\n\n# Assign most common value of preferred foot to the player where this feature is null\ndf['Preferred Foot'].fillna(df['Preferred Foot'].mode(), inplace=True)\ndf['Weak Foot'].fillna(df['Weak Foot'].mode(), inplace=True)\n\ndf['Skill Moves'].fillna(df['Skill Moves'].median(), inplace=True)\ndf['Work Rate'].fillna(df['Work Rate'].mode(), inplace=True)\ndf['International Reputation'].fillna(df['International Reputation'].median(), inplace=True)\ndf['Height'].fillna(df['Height'].mode(), inplace=True)\ndf['Weight'].fillna(df['Weight'].mode(), inplace=True)","32a3474b":"def histogram(col_name, title, xlabel):\n    fig, ax = plt.subplots()\n    df[col_name].hist(color='#A9C5D3', edgecolor='black', grid=False)\n    ax.set_title(title, fontsize=12)\n    ax.set_xlabel(xlabel, fontsize=12)\n    ax.set_ylabel('Frequency', fontsize=12)\n    \nhistogram('Age', 'Players Age', 'Age');\ndef cut_quantile(quant_col_name, quant_col_label, col_to_cut):\n    quantile_list = [0, 0.25, 0.5, 0.75, 1.0]\n    quantile_labels = ['0-25Q', '25-50Q', '50-75Q', '75-100Q']\n    quantile_labels = [col_to_cut + s for s in quantile_labels]\n    df[quant_col_name] = pd.qcut(df[col_to_cut], q=quantile_list)\n    df[quant_col_label] = pd.qcut(df[col_to_cut], q=quantile_list, labels=quantile_labels)\ncut_quantile('Age_Range', 'Age_Quantile_label', 'Age')\ndf[['Age_Quantile_label', 'Age_Range']].drop_duplicates()","3f68971b":"df['Value_in_millions'] = df['Value'].apply(lambda x: float(x[1:-1])\/1000 if (x[-1] == 'K' and x[1] != '0') else (0.001 if x [-1] == '0' else float(x[1:-1])))\ndf['Wage_in_K'] = df['Wage'].apply(lambda x: float(x[1:-1]) if x[1] != '0' else 0.001)\ndf[['Name', 'Value', 'Value_in_millions', 'Wage', 'Wage_in_K']].sample(5)","609d8009":"fig, ax = plt.subplots(figsize=(10, 5))\nax.set(ylim=(0, 10))\nsns.boxplot(x=\"Age_Range\", y=\"Value_in_millions\", data=df, ax=ax);","26985884":"fig, ax = plt.subplots(figsize=(10, 5))\nax.set(ylim=(0, 10))\nsns.boxplot(x=\"Position_Cat\", y=\"Value_in_millions\", data=df, ax=ax);","6514885b":"fig, ax = plt.subplots(figsize=(8, 8))\nsns.scatterplot(x=\"Overall\", y=\"Value_in_millions\", data=df, ax=ax);","db59b624":"fig, ax = plt.subplots(figsize=(20, 3))\nmean_attributes_by_pos_df = df[df['Position_Cat'] == \"Defender\"].groupby(\"Position\")[['Crossing', 'Finishing',\n       'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve',\n       'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle']].median()\ng = sns.heatmap(mean_attributes_by_pos_df, cmap=\"Spectral\", ax=ax, vmax=70, vmin=30, annot=True)\ng.set_yticklabels(labels=df[df['Position_Cat'] == \"Defender\"][\"Position\"].unique().tolist(), rotation=60);","715bc9ac":"fig, ax = plt.subplots(figsize=(20, 5))\nmean_attributes_by_pos_df = df[df['Position_Cat'] == \"Midfielder\"].groupby(\"Position\")[['Crossing', 'Finishing',\n       'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve',\n       'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle']].median()\ng = sns.heatmap(mean_attributes_by_pos_df, cmap=\"Spectral\", ax=ax, vmax=75, vmin=30, annot=True)\ng.set_yticklabels(labels=df[df['Position_Cat'] == \"Midfielder\"][\"Position\"].unique().tolist(), rotation=60);","c1196f21":"fig, ax = plt.subplots(figsize=(20, 4))\nmean_attributes_by_pos_df = df[df['Position_Cat'] == \"Forward\"].groupby(\"Position\")[['Crossing', 'Finishing',\n       'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve',\n       'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle']].median()\ng = sns.heatmap(mean_attributes_by_pos_df, cmap=\"Spectral\", ax=ax, vmax=75, vmin=30, annot=True)\ng.set_yticklabels(labels=df[df['Position_Cat'] == \"Forward\"][\"Position\"].unique().tolist(), rotation=60);","705fa13a":"fig, ax = plt.subplots(figsize=(20, 15))\nsub_df = df.loc[df['Improvement Scope'].nlargest(20).reset_index()['index']][['Name', 'Overall', 'Improvement Scope']]\nvalues = df.loc[df['Improvement Scope'].nlargest(20).reset_index()['index']]['Value'].tolist()\nwages = df.loc[df['Improvement Scope'].nlargest(20).reset_index()['index']]['Wage'].tolist()\nsub_df.set_index('Name').plot(kind='barh', stacked=True, ax=ax, grid=False)\ni = 0\nfor p in ax.patches:\n    if i > 19:\n        ax.annotate(str(values[i-20]) + ', ' + str(wages[i-20]), (p.get_x() + p.get_width(), p.get_y()), \\\n                    xytext=(-150, 6), textcoords='offset points', size=14)\n    i = i + 1","e3e4755d":"pos_4_3_3_dict = {'GK': ['GK'], 'LCB': ['CB', 'LCB'], 'RCB': ['CB', 'RCB'], 'LB': ['LB', 'LWB'], 'RB': ['RB', 'RWB'], \n'CM': ['CM', 'CDM'], 'LCM': ['LCM', 'CAM'], 'RCM': ['RCM', 'CAM'], 'RW': ['RW', 'RM', 'RAM', 'RF'], 'LW': ['LW', 'LAM', 'LM', 'LF'], \n'ST': ['ST', 'CF', 'RS', 'LS']}","74f05f39":"pos_value_df = df.groupby(['Position'])['Value_in_millions'].sum().reset_index()\npos_4_3_3_df = pos_value_df[pos_value_df['Position'].isin(pos_4_3_3_dict.keys())]\npos_4_3_3_counts = df[df['Position'].isin(pos_4_3_3_dict.keys())]['Position'].value_counts()\npos_4_3_3_df['Counts'] = pos_4_3_3_df['Position'].apply(lambda x: pos_4_3_3_counts[x])\npos_4_3_3_df['Value_in_millions'] = pos_4_3_3_df['Value_in_millions']\/pos_4_3_3_df['Counts']\npos_4_3_3_sum = pos_4_3_3_df['Value_in_millions'].sum()\npos_4_3_3_df['Ratio'] = pos_4_3_3_df['Value_in_millions'].apply(lambda x: round(x\/pos_4_3_3_sum, 2))\npos_4_3_3_df = pos_4_3_3_df.set_index('Position')\npos_4_3_3_df.drop(['Counts'], axis=1)","64b20c86":"# callback function for our widget\ndef f(x):\n    budget = x\n    sub_df = pd.DataFrame()\n    player_running_l = []\n    for pos in pos_4_3_3_dict.keys():\n        sub_df = df[(df['Position'].isin(pos_4_3_3_dict[pos])) & ~(df['Name'].isin(player_running_l)) & \\\n                  (df['Value_in_millions'] <= pos_4_3_3_df.loc[pos, 'Ratio'] * budget)]\n        \n        overall = sub_df['Overall'].max()\n        name = sub_df.loc[sub_df[(sub_df['Overall'] == overall)]['Value_in_millions'].argmin()]['Name']\n        \n        pos_4_3_3_df.loc[pos, 'Player'] = name\n        pos_4_3_3_df.loc[pos, 'Overall'] = overall\n        player_running_l.append(name)\n\n    display(pos_4_3_3_df.reindex(pos_4_3_3_dict.keys())[['Player', 'Overall']])\n\nx=widgets.IntSlider(min=10,max=1500,step=10,value=10)\ndisplay(x)\ninteract(f, x=x);","f50d0f56":"for budget in [10, 50, 100, 300, 500, 1200]:\n    print(\"Budget: ${}M\".format(budget))\n    f(budget)","fe8c980a":"niche_cols = ['Overall', 'Potential', 'Crossing', 'Finishing',\n       'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve',\n       'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes']\n\nfeature_list = []\nfor col in niche_cols:\n    feature_list.append([\"Best \" + col, df.iloc[df[col].idxmax][\"Name\"]])\n    \nniche_players = pd.DataFrame(feature_list, columns=[\"Feature\", \"Player\"])\nniche_players.set_index('Feature')","1752dfe8":"major_nations = ['Belgium','France','Brazil','England','Croatia','Uruguay','Portugal','Switzerland','Spain','Denmark',\n                 'Argentina','Colombia','Germany','Sweden','Chile','Netherland','Italy','Mexico','Wale','Poland']\n\ndf[\"Major Nation\"] = df[\"Nationality\"].apply(lambda x: 1 if x in major_nations else 0)","8300e716":"histogram('Value_in_millions', 'Players Value', 'Value');\nhistogram('Wage_in_K', 'Players Wage', 'Wage');","da60d0db":"df['Value_in_millions'] = boxcox(df['Value_in_millions'])[0]\ndf['Wage_in_K'] = boxcox(df['Wage_in_K'])[0]","b51b3005":"df['Weight'] = df['Weight'].apply(lambda x: int(x.replace(\"lbs\", \"\")))\ndf['Height'] = df['Height'].apply(lambda x: (int(x[0]) * 12 + int(x[x.find(\"'\") + 1:])) * 2.54 * 0.393701)\ndf['BMI'] = df['Weight'] * 703 \/(df['Height'] * df['Height'])\ndf['BMI Index'] = np.where(df['BMI'] < 18.5, 'underweight', np.where(df['BMI'] < 25, 'normal', np.where(df['BMI'] < 30, 'overweight', 'obese')))","5df3820d":"work_rate_dict = {'Medium\/ Medium': 4, 'High\/ Low': 4, 'High\/ Medium': 6, 'High\/ High': 9,\n       'Medium\/ High': 6, 'Medium\/ Low': 2, 'Low\/ High': 4, 'Low\/ Medium': 2,\n       'Low\/ Low': 1}\ndf['Work Rate'] = df['Work Rate'].map(work_rate_dict)","96d2b02d":"refined_df = df.drop(['Nationality', 'Club', 'Age', 'Real Face', 'Value', 'Wage', 'Special', \n                      'Potential', 'Age_Range', 'Release Clause', 'Height', 'Weight', 'BMI'], axis=1)\nrefined_df.head(5)","722b2fbd":"id_list = refined_df['ID']\nnames = refined_df['Name']\ntarget = refined_df['Overall']\nmodel_df = refined_df.drop(['ID', 'Name', 'Overall', 'Position', 'Improvement Scope'], axis=1)\nmodel_df = pd.get_dummies(model_df)\nmodel_df.shape","2d2c0aac":"def analyse_model(model):\n    visualizer = ResidualsPlot(model)\n    visualizer.fit(X_train, y_train)\n    visualizer.score(X_test, y_test)\n    visualizer.poof()\n    \n    model.fit(X_train, y_train)\n    y_train_pred = model.predict(X_train)\n    y_test_pred = model.predict(X_test)\n    \n    print(\"RMSE train data is %s\" % math.sqrt(mean_squared_error(y_train, y_train_pred)))\n    print(\"RMSE test data is %s\" % math.sqrt(mean_squared_error(y_test, y_test_pred)))\n    coeff_df = pd.DataFrame(model.coef_, X_train.columns, columns=['Coefficient'])  \n    print(coeff_df.describe())\n    \n    return y_test_pred","575d6b0f":"X_train, X_test, y_train, y_test = train_test_split(model_df, target, test_size=0.20, random_state=42)","35556c20":"linear_regr_model = LinearRegression()\npredictions = analyse_model(linear_regr_model)","cf3b88e1":"plt.figure(figsize=(12,10))\nsns.regplot(predictions, y_test,scatter_kws={'alpha':0.3,'color':'lime'},line_kws={'color':'red','alpha':0.5})\nplt.xlabel('Predictions')\nplt.ylabel('Overall')\nplt.title(\"Linear Prediction of Player Rating\")\nplt.show()","040b92f4":"new_df = refined_df[['Crossing', 'Finishing',\n       'HeadingAccuracy', 'ShortPassing', 'Volleys', 'Dribbling', 'Curve',\n       'FKAccuracy', 'LongPassing', 'BallControl', 'Acceleration',\n       'SprintSpeed', 'Agility', 'Reactions', 'Balance', 'ShotPower',\n       'Jumping', 'Stamina', 'Strength', 'LongShots', 'Aggression',\n       'Interceptions', 'Positioning', 'Vision', 'Penalties', 'Composure',\n       'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving', 'GKHandling',\n       'GKKicking', 'GKPositioning', 'GKReflexes']]\nnew_df.head(5)","72df605f":"from sklearn.preprocessing import StandardScaler\nnew_df_std = StandardScaler().fit_transform(new_df)\nfrom sklearn.mixture import GaussianMixture\ngmm_model = GaussianMixture(n_components=4).fit(new_df_std)\ngmm_model.predict(new_df_std)\ndf['cluster'] = gmm_model.predict(new_df_std)","1722673b":"def f(x):\n    cluster = df[df['Name'] == x]['cluster'].item()\n    display(df[(df['cluster'] == cluster) & ~(df['Name'] == x)][['Name', 'Age', 'Position', 'Club', 'Value', 'Wage', 'Overall']].head(10))\n\nall_players = df['Name'].unique().tolist()\ninteract(f, x=widgets.Dropdown(options=all_players, value='L. Messi', description='Player:', disabled=False));","f419cdf6":"for p in ['L. Messi', 'De Gea', 'M. Salah', 'G. Chiellini', 'N. Kant\u00e9']:\n    print(\"10 similar players for {}\".format(p))\n    f(p)","ab5312c0":"In the above table, we can see that we have binned age to different range values. For example, age between 16 to 21 is binned in the first quartile (0-25Q) and players aged above 28 are binned in last quartile (75-100Q)**","dd332407":"### Property Analysis of Players of Different Positions\n1. Centre Backs are strong and good jumpers\n2. Wing Backs and left flank defenders are agile\n3. Tackle ability of defenders is highest\n4. Attacking midfielders like CAM, RAM, LAM, LM and RM are more agile and have higher sprint speeds than other midfield players\n5. Short Passing ability of midfielders is highest\n6. Forwards are most agile players with higher balance and reactions","f7ff086b":"**The players generally improve until they age 30 and then they start to decline in overall ratings. This decline is sooner incase of defenders in the age of 31-32**","48912721":"#### Country Comparison if top 30 players from each country are considered","a8ce6954":"### Read Data using pandas","1a4ce9d7":"#### Skeweness in the Value and Wages of the players, lets transform it through boxcox transformation","58613389":"#### Parse Value and Wage columns","396a833b":"**So for about \\$100 spent on team, following is the value distribution for each position **\n1. GK = \\$5\n2. LCB = \\$10\n3. RCB = \\$10\n4. LB = \\$6\n5. RB = \\$5\n6. CM = \\$6\n7. LCM = \\$14\n8. RCM = \\$13\n9. LW = \\$11\n10. RW = \\$12\n11. ST = \\$8\n\nLet us build a club for which we have input value constraint given in below input slider","2bfe1865":"### Bin Continuous Variables\nWe shall bin continuous variables like Age because in football the age range of a player decides the release clause value. The absolute value of the age does not offer much addditional value to the football club buying the player. Similarly, our model should work on the binned variable for the age rather than the continuous feature provided here.","f2185d5a":"### Position vs Value\n**Forwards and midfielders cost most while goalkeepers are the cheapest**","1b95f1ef":"#### Scaling the work rate of a player","345da46a":"#### Use Linear Regression Model to generate Residuals Plot and calculate RMSE and R2 metrics","69140142":"#### Select a player and get 10 similar players","5581f46a":"#### Clearly, major clubs like AS Monaco and Athletico Madrid are playing under their potential","3997fd63":"### Ratings vs Value\n**Value increases as the overall rating of the player increase**","1d2d85f2":"#### Deriving BMI Index of a player","3fe9f95d":"### Age vs Value\n**Players in age range of 25-28 are of highest value**","8363f20d":"### Team Building for any Budget\n#### **4-3-3 = GK, LCB, RCB, LB, RB, LCM, CM, RCM, LW, RW, ST**","f1dc723d":"**This dataset contains list of football (soccer) players and their skill ratings taken from FIFA 19 game. We can use these ratings and player attributes to determine what will be their release clause value.**","181eae7f":"### Handling Missing Values\nBelow columns have missing values","8412f497":"Since widgets are not visible on Kaggle, let us manually pass 'Value' to get the team sheet","99a60ff0":"#### Use Gaussian Mixture Model for clustering","ff625367":"### Preparing for the Linear Regression Model to predict Overall Rating from niche features of players","4722ae4d":"#### As we can see above that linear regression model fits both test and train data well with R2 metric over 91% and RMSE less than 2 rating points. Also, the residual plot has mostly normal distribution with homogenity embedded","3a0890f7":"### Players which can grow most\n> Players like S. Gimenez, B. Kavanagh, J. Van Moos are not expensive and have great potential to grow","a396a2a8":"### Best Players in different arts of soccer","17888655":"### Use Clustering to identify similar players","d4586bb7":"### Data Pre-Processing and Feature Engineering","72236971":"#### Top Clubs with best players"}}