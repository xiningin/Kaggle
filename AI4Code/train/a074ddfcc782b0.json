{"cell_type":{"3db8b20e":"code","2804ebff":"code","88b31316":"code","5a163953":"code","5a54e921":"code","716ac68d":"code","4e3c8f9f":"code","79b5406c":"code","522f2373":"code","414de8b0":"code","5eeb027d":"code","b8c8daa0":"code","db711ebf":"code","79ccb895":"code","1b18ebaa":"code","5ce056b6":"code","fb53bcef":"code","ce362ce8":"code","a2f23526":"code","8c1eba94":"code","e496c45a":"code","8eb4b031":"code","41966d6e":"code","f4b538ac":"code","8d927573":"code","24ff8f47":"code","a72f86ca":"code","f92d32d5":"code","c991abf9":"code","776b20f7":"code","bf41450e":"code","9fba0239":"code","86f0af5c":"code","d4742c27":"code","149e582d":"code","79ea4b9a":"code","805d32e9":"code","47733190":"code","8f8ef2a9":"code","1e6c193d":"code","038ff46a":"code","bcc110e0":"code","7eb5604b":"code","1c5ec0f1":"markdown","d7fd2b5a":"markdown","e0f71f1d":"markdown","a8405816":"markdown","4d46b16f":"markdown","d941294b":"markdown","3e739eed":"markdown","8c0eb9cd":"markdown","36430259":"markdown","34c6b821":"markdown","79ed7b1f":"markdown","6c3f415d":"markdown","c6d77749":"markdown","f2868700":"markdown","630da783":"markdown","e9c8aebe":"markdown","8e2cb304":"markdown","d4e760c4":"markdown","773d3adc":"markdown","39e214a5":"markdown","9a57ad87":"markdown","a06f67f0":"markdown"},"source":{"3db8b20e":"#importing the libraries \nimport numpy as np \nimport pandas as pd \nimport os \nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2804ebff":"#Importing the dataset\ncasualties=pd.read_csv(\"..\/input\/Casualties0514.csv\")\n","88b31316":"#Info of the columns\ncasualties.info()","5a163953":"#Checking the null values\ncasualties.isnull().sum()","5a54e921":"casualties.head()","716ac68d":"#Heatmap to see correlations\nplt.figure(figsize=(15,10))\ncorr=casualties.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr, linewidths=.5,annot=True,mask=mask)\n","4e3c8f9f":"#Values of the variable gender\ncasualties['Sex_of_Casualty'].value_counts()","79b5406c":"#I'm going to drop the values -1 which are the null values\ncasualties = casualties[casualties.Sex_of_Casualty != -1]\n","522f2373":"#Transforming the variable into a categorical one\ndef map_sex(sex):\n    if sex == 1:\n        return 'Male'\n    elif sex == 2:\n        return 'Female'\n\ncasualties['Sex_of_Casualty'] = casualties['Sex_of_Casualty'].apply(map_sex)","414de8b0":"sns.set(style=\"darkgrid\")\nplt.figure(figsize=(12,8))\ngenderplot = sns.countplot(x='Sex_of_Casualty',data=casualties)\ngenderplot.set(xlabel='Sex', ylabel='Count')\nfor p in genderplot.patches: \n    height = p.get_height() \n    genderplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(casualties))*100)+'%',  \n      ha=\"center\") \n","5eeb027d":"#Turning the variable into a categorical one\ndef map_age(age):\n    if age == 1:\n        return '0-5'\n    elif age == 2:\n        return '6-10'\n    elif age == 3:\n        return '11-15'\n    elif age == 4:\n        return '16-20'\n    elif age == 5:\n        return '21-25'\n    elif age == 6:\n        return '26-35'\n    elif age == 7:\n        return '36-45'\n    elif age == 8:\n        return '46-55'\n    elif age == 9:\n        return '56-65'\n    elif age == 10:\n        return '66-75'\n    elif age == 11:\n        return 'over 75'\n    elif age == -1:\n        return \"Don't know\"\n    \n\ncasualties['Age_Band_of_Casualty'] = casualties['Age_Band_of_Casualty'].apply(map_age)","b8c8daa0":"sns.set(style=\"darkgrid\")\nplt.figure(figsize=(15,10))\nageplot=sns.countplot(x='Age_Band_of_Casualty',data=casualties,order=['0-5','6-10','11-15','16-20','21-25','26-35','36-45','46-55','56-65','66-75','over 75'])\nfor p in ageplot.patches: \n    height = p.get_height() \n    ageplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(casualties))*100)+'%',  \n      ha=\"center\") \n","db711ebf":"#obtaining the values of the severity variable\ncasualties['Casualty_Severity'].value_counts()","79ccb895":"# turning the variable into a categorical one\ndef map_severity(severity):\n    if severity == 1:\n        return 'Fatal'\n    elif severity == 2:\n        return 'Serious'\n    elif severity == 3:\n        return 'Slight'\n    \ncasualties['Casualty_Severity'] = casualties['Casualty_Severity'].apply(map_severity)","1b18ebaa":"sns.set(style=\"darkgrid\")\nplt.figure(figsize=(15,5))\nseverityplot = sns.countplot(x='Casualty_Severity',hue='Sex_of_Casualty',data=casualties,order=['Slight','Serious','Fatal'])\nseverityplot.set(xlabel='Severity', ylabel='Count')\nfor p in severityplot.patches: \n    height = p.get_height() \n    severityplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(casualties))*100)+'%',  \n      ha=\"center\") \n","5ce056b6":"accidents= pd.read_csv(\"..\/input\/Accidents0514.csv\")\naccidents = accidents[accidents.Weather_Conditions != -1]\naccidents = accidents[accidents.Road_Surface_Conditions != -1]","fb53bcef":"accidents.info()","ce362ce8":"accidents.head()","a2f23526":"#Heatmap to see correlations\nplt.figure(figsize=(15,10))\ncorr=casualties.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr, linewidths=.5,annot=True,mask=mask)","8c1eba94":"acc_time = accidents[['Date','Day_of_Week','Time']]\n","e496c45a":"acc_time.head()","8eb4b031":"acc_time.info()","41966d6e":"acc_time.dropna(axis=0,inplace=True)","f4b538ac":"#creating the column, hour,day,month and year\n#creating year column\ndef year(string):\n    return int(string[6:10])\nacc_time['Year']=acc_time['Date'].apply(lambda x: year(x))\n#creating month column\ndef month(string):\n    return int(string[3:5])\nacc_time['Month']=acc_time['Date'].apply(lambda x: month(x))\n#creating day column\ndef day(string):\n    return int(string[0:2])\nacc_time['Day']=acc_time['Date'].apply(lambda x: day(x))\n#creating hour column\ndef hour(string):\n    s=string[0:2]\n    return int(s)\nacc_time['Hour']=acc_time['Time'].apply(lambda x: hour(x))\n\n\n\n\n\n","8d927573":"sns.set(style=\"darkgrid\")\nplt.figure(figsize=(15,5))\nyearplot = sns.countplot(x='Year',data=acc_time)\nyearplot.set(xlabel='Year', ylabel='Count')\nfor p in yearplot.patches: \n    height = p.get_height() \n    yearplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(acc_time))*100)+'%',  \n      ha=\"center\") \nplt.show()\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(15,5))\nmonthplot = sns.countplot(x='Month',data=acc_time)\nmonthplot.set(xlabel='Month', ylabel='Count')\nfor p in monthplot.patches: \n    height = p.get_height() \n    monthplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(acc_time))*100)+'%',  \n      ha=\"center\") \nplt.show()\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(15,5))\nweekplot = sns.countplot(x='Day_of_Week',data=acc_time)\nweekplot.set(xlabel='Day of week', ylabel='Count')\nfor p in weekplot.patches: \n    height = p.get_height() \n    weekplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(acc_time))*100)+'%',  \n      ha=\"center\") \nweekplot.set(xticklabels=['Monday','Tuesday','Wesnesday','Thursday','Friday','Saturday','Sunday'])\nplt.show()\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(15,8))\nHourplot = sns.countplot(x='Hour',data=acc_time)\nHourplot.set(xlabel='Hour', ylabel='Count')\nfor p in Hourplot.patches: \n    height = p.get_height() \n    Hourplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(acc_time))*100)+'%',  \n      ha=\"center\") \nplt.show()\n","24ff8f47":"#Creating a pivot table to get a heatmap with the concentration of accidents by month over the years\n#I decide to create a column of ones to get a count of the accidents\nacc_time['Ones']=1\ntable = pd.pivot_table(acc_time, values='Ones', index=['Month'],columns=['Year'], aggfunc=np.sum)\nplt.figure(figsize=(20,10))\nyticks = np.array(['January','February','March','April','May','June','July','August','September','October','November','December'])\nsns.set(rc={\"axes.labelsize\":36},font_scale=2)\nsns.heatmap(table, yticklabels=yticks,linewidths=.1,annot=False,cmap='magma')","a72f86ca":"df_conditions = accidents[['Light_Conditions','Weather_Conditions','Road_Surface_Conditions',]]\n","f92d32d5":"df_conditions.info()","c991abf9":"df_conditions['Severity']=casualties['Casualty_Severity']\n\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(15,5))\nlightplot = sns.countplot(x='Light_Conditions',data=df_conditions,hue='Severity',hue_order=['Slight','Serious','Fatal'])\nlightplot.set(xlabel='Light conditions', ylabel='Count',xticklabels=['Daylight','Darkness Light-Lit','Darkness Light-Unlit','Darkness-No light','Darkness unknown light'])\nfor p in lightplot.patches: \n    height = p.get_height() \n    lightplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(acc_time))*100)+'%',  \n      ha=\"center\")     \nplt.show()\n\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(15,8))\nweatherplot = sns.countplot(x='Weather_Conditions',data=df_conditions)\nweatherplot.set(xlabel='Weather conditions', ylabel='Count',xticklabels=['fine','Raining','Snowing','Fine\/winds',\n                                                                         'Raining\/winds','Snowing\/winds','Fog','Other','Unknown'])\nfor p in weatherplot.patches: \n    height = p.get_height() \n    weatherplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(acc_time))*100)+'%',  \n      ha=\"center\") \nplt.show()\n\nsns.set(style=\"darkgrid\")\nplt.figure(figsize=(15,8))\nroadplot = sns.countplot(x='Road_Surface_Conditions',data=df_conditions)\nroadplot.set(xlabel='Road Surface conditions', ylabel='Count',xticklabels=['Dry','Wet','Snow','Frost','flood','oil','mud'])\nfor p in roadplot.patches: \n    height = p.get_height() \n    roadplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(acc_time))*100)+'%',  \n      ha=\"center\") \nplt.show()","776b20f7":"#Loading the dataset\nvehicles=pd.read_csv('..\/input\/Vehicles0514.csv')","bf41450e":"print(vehicles.shape)\nvehicles.head()","9fba0239":"#list of columns\nlist(vehicles)","86f0af5c":"#dropping the columns that we are not going to use\nvehicles.drop(['Age_of_Driver', 'Age_Band_of_Driver','Sex_of_Driver' ], axis=1,inplace=True)","d4742c27":"#Heatmap to see correlations\nplt.figure(figsize=(15,10))\ncorr=vehicles.corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\nsns.heatmap(corr, linewidths=.5,annot=False,mask=mask)","149e582d":"vehicles['Vehicle_Manoeuvre'].value_counts()","79ea4b9a":"manoeuvre = vehicles\nmanoeuvre = manoeuvre[manoeuvre.Vehicle_Manoeuvre != -1]\nmanoeuvre = manoeuvre[manoeuvre.Vehicle_Manoeuvre != 8]\nmanoeuvre = manoeuvre[manoeuvre.Vehicle_Manoeuvre != 15]\nmanoeuvre = manoeuvre[manoeuvre.Vehicle_Manoeuvre != 6]\nmanoeuvre = manoeuvre[manoeuvre.Vehicle_Manoeuvre != 11]\nmanoeuvre = manoeuvre[manoeuvre.Vehicle_Manoeuvre != 12]\nmanoeuvre = manoeuvre[manoeuvre.Vehicle_Manoeuvre != 14]\nmanoeuvre = manoeuvre[manoeuvre.Vehicle_Manoeuvre != 1]\nmanoeuvre = manoeuvre[manoeuvre.Vehicle_Manoeuvre != 10]\nmanoeuvre = manoeuvre[manoeuvre.Vehicle_Manoeuvre != 13]\n\n\n","805d32e9":"plt.figure(figsize=(15,8))\n\nmanoplot = sns.countplot(x='Vehicle_Manoeuvre',data=manoeuvre)\nmanoplot.set(xlabel='Vehicle_Manoeuvre',ylabel='Count',xticklabels=['Parked','Waiting to go','Slowing\/stoping','moving off','turning left','turning right','Going ahead \\n left hand bend','Going ahead \\n right hand bend','Going ahead \\n other'])\nfor p in manoplot.patches: \n    height = p.get_height() \n    manoplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(manoeuvre))*100)+'%',  \n      ha=\"center\") \nplt.show()","47733190":"vehicles['Junction_Location'].value_counts()","8f8ef2a9":"location = vehicles\nlocation = location[location.Junction_Location != -1]","1e6c193d":"plt.figure(figsize=(15,8))\n\njunctionplot = sns.countplot(x='Junction_Location',data=location)\njunctionplot.set(xlabel='Junction_Location',ylabel='Count',xticklabels=['Not in\\n junction','aproaching\/parked \\n junction','cleared \\n junction','leaving \\n roundabout','entering \\n roundabout','leaving \\n main road','entering \\n main road','entering from \\n slip road','mid junction'])\nfor p in junctionplot.patches: \n    height = p.get_height() \n    junctionplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(location))*100)+'%',  \n      ha=\"center\") \nplt.show()","038ff46a":"vehicles['1st_Point_of_Impact'].value_counts()","bcc110e0":"vehicles['first_point_of_impact']=vehicles['1st_Point_of_Impact']\nvehicles = vehicles[vehicles.first_point_of_impact != -1]","7eb5604b":"plt.figure(figsize=(15,8))\n\nimpactplot = sns.countplot(x='first_point_of_impact',data=vehicles)\nimpactplot.set(xlabel='first_point_of_impact',ylabel='Count',xticklabels=['did not \\n impact','front','back','offside','nearside'])\nfor p in impactplot.patches: \n    height = p.get_height() \n    impactplot.text(p.get_x()+p.get_width()\/2., \n      height + 3, \n      '{:1.2f}'.format((height\/len(vehicles))*100)+'%',  \n      ha=\"center\") \nplt.show()","1c5ec0f1":"# Accidents <a class=\"anchor\" id=\"accidents\"><\/a>","d7fd2b5a":"# EDA <a class='anchor' id='eda_veh'><\/a>","e0f71f1d":"# Key points","a8405816":"## Age band <a class=\"anchor\" id=\"age\"><\/a>","4d46b16f":"# EDA <a class=\"anchor\" id=\"eda_cas\"><\/a>","d941294b":"## Gender <a class=\"anchor\" id=\"gender\"><\/a>","3e739eed":"# Casualties <a class=\"anchor\" id=\"casualties\"><\/a>","8c0eb9cd":"# Data analysis of the accidents in UK(2004-2014)\n\n## Table of Contents:\n* [1-Casualties](#casualties)\n    * [1.1-EDA](#eda_cas)\n    * [1.2-Gender](#gender)\n    * [1.3-Age](#age)\n    * [1.4-Severity](#severity)\n* [2-Accidents](#accidents)\n    * [2.1-EDA](#eda_acc) \n    * [2.2-Time of the accident](#time)\n    * [2.3-Conditions](#conditions)\n* [3-Vehicles](#vehicles)\n    * [3.1-EDA](#eda_veh) \n    * [3.2-Junction location](#location)\n    * [3.3-First point of impact](#impact)\n* [4-Key points](#key)\n   ","36430259":"Luckily, the 90% of the accidents finish with slights casualties.","34c6b821":"# Junction location <a class='anchor' id='location'><\/a>","79ed7b1f":"# Vehicles","6c3f415d":"As we can see that the most of the variables are incorrelated with each other.","c6d77749":"## Severity of the casualties <a class=\"anchor\" id=\"severity\"><\/a>","f2868700":"# Vehicle Manoeuvre <a class='anchor' id='manoeuvre'><\/a>","630da783":"# EDA <a class=\"anchor\" id=\"eda_acc\"><\/a>","e9c8aebe":"We can see that the most of the variables are incorrelated with each other.","8e2cb304":"# Conditions <a class='anchor' id='conditions'><\/a>","d4e760c4":"### Casualties\n*  Almost the 60% of the casualties are men.\n* one third of the casualties are in the age band 25-45.\n* Just the 1% of the casualties end with fatal injuries.\n\n### Accidents\n*  Decrease in accidents every year in the decade 2004-2014 excepting for the last year.\n* Saturday is the day of the week in where more accidents happen.\n* The most comon hours of the day in where accidents occur are at 8-9 and 16-17. These are mainly the peak hours to commute to work.\n* Almost one  third of the accidents occur with the road surface wet.\n\n### Vehicles\n* Almost the 50% of the accidents take place in junctions.\n* The first point of impact is the front in the 50% of the vehicles implicated on accidents.\n","773d3adc":"# 1st point of impact  <a class='anchor' id='impact'><\/a>","39e214a5":"Almost the 60% of the casualties are males.","9a57ad87":"## Time of the accidents<a class=\"anchor\" id=\"time\"><\/a>","a06f67f0":"   more than one third of the casualties are in the age band of 26-45  years"}}