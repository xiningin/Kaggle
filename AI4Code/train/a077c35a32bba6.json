{"cell_type":{"478a8afb":"code","c6efb2fe":"code","f602b2f5":"code","262e6e79":"code","2a009a18":"code","ef637ba6":"markdown","5175f144":"markdown","86fb019c":"markdown","d09425d3":"markdown","6274cd31":"markdown"},"source":{"478a8afb":"import pandas as pd\nimport numpy as np\nimport xgboost as xgb\nfrom sklearn import model_selection\nimport warnings \n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\npd.options.mode.chained_assignment = None\nwarnings.filterwarnings('ignore')\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\nprint(train.isnull().sum(), '\\n' ,test.isnull().sum(), '\\n')\nprint(train.info(), '\\n' ,test.info(), '\\n')","c6efb2fe":"y_train = train.price\nx_train = train.drop(['id', 'price'], axis=1)\nx_test = test.drop(['id'], axis=1)\n\nindex = x_train.shape[0]\ndf = pd.concat([x_train, x_test], axis=0)\n    \nyear = df.date.apply(lambda x: x[0:4]).astype(int)\nmonth = df.date.apply(lambda x: x[4:6]).astype(int)\nday = df.date.apply(lambda x: x[6:8]).astype(int)\n    \ndf['year_month'] = year*100 + month\ndf['month_day'] = month*100 + day\ndf['ym_freq'] = df.groupby('year_month')['year_month'].transform('count')\ndf['md_freq'] = df.groupby('month_day')['month_day'].transform('count')\ndf = df.drop(['date'], axis=1)\n\nx_train = df.iloc[:index, :]\nx_test = df.iloc[index:, :]\n\nx_train.shape, x_test.shape\n\nfig, ax = plt.subplots(6, 4, figsize=(20, 30))\nn = 0\ncols = x_train.columns\nfor r in range(6):\n    for c in range(4):\n        sns.kdeplot(x_train[cols[n]], ax=ax[r][c])\n        ax[r][c].set_title(cols[n], fontsize=20)\n        n += 1\n        if n == x_train.shape[1]:\n            break","f602b2f5":"def preprocessing(df):\n    \n    df.sqft_living = np.log(df.sqft_living)\n    df.sqft_lot = np.log(df.sqft_lot)\n    df.sqft_above = np.log(df.sqft_above)\n    df.sqft_basement = np.log(df.sqft_basement)\n    df.sqft_lot15 = np.log(df.sqft_lot15)\n    \n    df['roomsum'] = np.log(df.bedrooms + df.bathrooms)\n    df['roomsize'] = df.sqft_living \/ df.roomsum\n    \n    df['pos'] = df.long.astype(str) + ', ' + df.lat.astype(str)\n    df['density'] = df.groupby('pos')['pos'].transform('count')\n    \n    df = df.drop(['pos'], axis=1)\n    \n    return df\n\nx_train = preprocessing(x_train)\nx_test = preprocessing(x_test)\n\nfig, ax = plt.subplots(5, 5, figsize=(20, 30))\nn = 0\ncols = x_train.columns\nfor r in range(5):\n    for c in range(5):\n        sns.kdeplot(x_train[cols[n]], ax=ax[r][c])\n        ax[r][c].set_title(cols[n], fontsize=20)\n        n += 1\n        if n == x_train.shape[1]:\n            break","262e6e79":"xgb_params = {\n    'eta': 0.01,\n    'max_depth': 6,\n    'subsample': 0.8,\n    'colsample_bytree': 0.8,\n    'objective': 'reg:linear',\n    'eval_metric': 'rmse',\n    'silent': 1\n}\n\nprint('Transform DMatrix...')\ndtrain = xgb.DMatrix(x_train, y_train)\ndtest = xgb.DMatrix(x_test)\n\nprint('Start Cross Validation...')\n\ncv_output = xgb.cv(xgb_params, dtrain, num_boost_round=5000, early_stopping_rounds=20,verbose_eval=50, show_stdv=False)\ncv_output[['train-rmse-mean', 'test-rmse-mean']].plot()\nprint('best num_boost_rounds = ', len(cv_output))\nrounds = len(cv_output)","2a009a18":"model = xgb.train(xgb_params, dtrain, num_boost_round = rounds)\npreds = model.predict(dtest)\n\nsub = test[['id']]\nsub['price'] = preds\nsub.to_csv('sub_xgb_starter.csv', index=False)","ef637ba6":"\uacb0\uce21\uce58\ub294 \uad00\uce21\ub418\uc9c0 \uc54a\uc558\uace0, x_train, y_train, x_test\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\n\n\uc774\ud6c4 \uc804\ucc98\ub9ac\ub97c \uc704\ud55c \ubd84\ud3ec\ub97c \ud655\uc778\ud569\ub2c8\ub2e4. object\ud615\uc2dd\uc774 \uad00\ucc30\ub418\uc5c8\uc73c\ub2c8 date\ub97c \uc218\uc815\ud569\ub2c8\ub2e4.","5175f144":"\uac04\ub2e8\ud55c \uc804\ucc98\ub9ac\uc640 XGBoost \ubaa8\ub378\uad6c\uc131 \ubc0f CV\uc5d0 \ub300\ud55c Starter Code\uc785\ub2c8\ub2e4.\n\n\ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\uace0 \uacb0\uce21\uac12 \ubc0f \ub370\uc774\ud130 \ud0c0\uc785\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.","86fb019c":"\ucc98\uc74c \ub370\uc774\ud130\uc5d0 \ube44\ud574\uc11c\ubcf4\ub2e4\ub294 \uc77c\ubd80 \ud56d\ubaa9\ub4e4\uc740 \ub2e4\uc18c \ubd84\ud3ec\uac00 \ub098\uc544\uc84c\uc2b5\ub2c8\ub2e4.\n\n\uc774\uc81c \ud30c\ub77c\ubbf8\ud130 \uac12\uc744 \uc124\uc815\ud558\uace0, \uac04\ub2e8\ud558\uac8c \uad6c\uc131\ud55c \ubaa8\ub378\uc744 \ud1b5\ud574 CV\ub97c \uc9c4\ud589\ud569\ub2c8\ub2e4.","d09425d3":"sqft_## \uad00\ub828 \ubcc0\uc218\ub4e4\uc774 \ub300\uccb4\ub85c \ubd88\uade0\ud615\ud558\ubbc0\ub85c \ud574\ub2f9 \ubd80\ubd84\uc744 \uc778\uc9c0\ud558\uace0 \uc804\ucc98\ub9ac\ub97c \ud574\uc90d\ub2c8\ub2e4.","6274cd31":"CV result lenght\ub97c \ubaa8\ub378\uc758 boost_rounds\ub85c \uc7ac\uc124\uc815\ud558\uace0 \uc608\uce21\uc744 \uc9c4\ud589\ud569\ub2c8\ub2e4."}}