{"cell_type":{"5f17a763":"code","c38c886d":"code","2ddcfc9e":"code","e86dfcac":"code","78162458":"code","e92d1387":"code","80f70e54":"code","26023e7e":"code","8bff5798":"code","c01fe286":"code","5613ba36":"code","707c5cea":"code","87858d99":"code","ebac6783":"code","33d989a9":"code","455eb352":"code","fb60f781":"code","3e98ba4f":"code","281f8162":"code","42bcc1f2":"code","848b1323":"code","d536cd53":"code","20df2893":"code","0f3c6525":"code","9a03a6cd":"code","a245cba5":"code","5389109c":"code","a98d057d":"code","be0a4931":"code","c481339e":"code","c961176f":"code","531463bf":"code","61e6fc70":"code","ca4167bb":"code","1dec1cab":"code","6d7f13b9":"code","dd2221c1":"code","1de5380b":"code","e2e94d88":"markdown","4848a627":"markdown","264ce6f6":"markdown","d5e75956":"markdown","0ac8d137":"markdown","71cc8a25":"markdown","475f2d3b":"markdown","c6c070d1":"markdown","0ba7d30d":"markdown","a9c43200":"markdown","037adaee":"markdown","866343d1":"markdown","8b0ec2dd":"markdown"},"source":{"5f17a763":"# Filtering out the warnings\nimport warnings\nwarnings.filterwarnings('ignore')","c38c886d":"# Importing the required libraries\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","2ddcfc9e":"# Read the csv file using 'read_csv'. \nmovies = pd.read_csv('..\/input\/movie-ratings\/Movie.csv')\nmovies.head()","e86dfcac":"# Check the number of rows and columns in the dataframe\nmovies.shape","78162458":"# Check the column-wise info of the dataframe\nmovies.info()","e92d1387":"# Check the summary for the numeric columns \nmovies.describe()","80f70e54":"# Divide the 'gross' and 'budget' columns by 1000000 to convert '$' to 'million $'\nmovies[[\"Gross\",\"budget\"]]=movies[[\"Gross\",\"budget\"]]\/1000000\nmovies.head()\n","26023e7e":"# Create the new column named 'profit' by subtracting the 'budget' column from the 'gross' column\nmovies['profit'] = movies['Gross'] - movies['budget']\nmovies.head()","8bff5798":"# Sort the dataframe with the 'profit' column as reference using the 'sort_values' function. Make sure to set the argument\n#'ascending' to 'False'\nmovies = movies.sort_values('profit',ascending = False)\nmovies.head()","c01fe286":"# Get the top 10 profitable movies by using position based indexing. Specify the rows till 10 (0-9)\ntop_10 = movies.iloc[0:10]\ntop_10.Title.values.tolist() #Printing names of top 10 movies in list form","5613ba36":"top_10 #Getting top 10 movies with all columns.","707c5cea":"#Plot profit vs budget\nplt.title('Plot of profit vs budget')\nplt.scatter(movies.profit,movies.budget)\nplt.xlabel('Profit in Million $')\nplt.ylabel('Budget in Million $')\nplt.show()","87858d99":"#Find the movies with negative profit\nneg_profit = movies[movies['profit'] < 0]\n#neg_profit['Title'] #To get titles of Negative profit movies.\n\nneg_profit.Title.values.tolist() #Negative profit movies converted to list.","ebac6783":"# Change the scale of MetaCritic\nmovies.MetaCritic = movies.MetaCritic\/10\n#movies.MetaCritic.head() #To check whether values converted or not.","33d989a9":"# Find the average ratings\nmovies['Avg_rating'] = movies[['MetaCritic','IMDb_rating']].mean(axis=1)\nmovies.head()","455eb352":"#Sort in descending order of average rating\nmovies = movies.sort_values('Avg_rating',ascending = False)\nmovies.head()","fb60f781":"# Find the movies with metacritic-rating < 0.5 and also with the average rating of >8\nUniversal_Acclaim = movies[(abs(movies['MetaCritic']-movies['IMDb_rating']) < 0.5) & (movies.Avg_rating >= 8)]\n#Universal_Acclaim['Title'] #To get titles of the movies with the given condition\nUniversal_Acclaim.Title.values.tolist()","3e98ba4f":"# Write your code here\n#Creating one more column to store sum of Facebook likes of all three actors\nmovies['highest_ratings'] = movies['actor_1_facebook_likes'] + movies['actor_2_facebook_likes'] + movies['actor_3_facebook_likes']\nmovies = movies.sort_values('highest_ratings',ascending = False)\n#movies.iloc[:5] # To get all details of trios\nmovies[[\"actor_1_name\",\"actor_2_name\",\"actor_3_name\"]].iloc[:5].values.tolist()","281f8162":"#Dropping highest_ratings column which will not be used further.\nmovies.drop('highest_ratings',axis=1,inplace=True)","42bcc1f2":"sns.distplot(movies['Runtime'])\nplt.title(\"Runtime Plot\")\nplt.show()","848b1323":"# Write your code here\nPopularR = movies[(movies['content_rating'] == 'R') & (movies['CVotesU18'] > 0)] \nPopularR = PopularR.sort_values('CVotesU18',ascending = False)\nPopularR = PopularR[:10]\nPopularR","d536cd53":"movies.sort_index(axis=0,inplace=True) #Sorting Again","20df2893":"# Create the dataframe df_by_genre\ndf_by_genre1 = movies[['genre_1','genre_2','genre_3']]\ndf_to_merge=movies.loc[:,'CVotes10':'VotesnUS']\ndf_by_genre = pd.concat([df_by_genre1,df_to_merge],axis=1)\ndf_by_genre.head()","0f3c6525":"# Create a column cnt and initialize it to 1\ndf_by_genre['cnt'] = 1\ndf_by_genre.shape","9a03a6cd":"# Group the movies by individual genres\ndf_by_g1 = df_by_genre.groupby('genre_1').sum()\ndf_by_g2 = df_by_genre.groupby('genre_2').sum()\ndf_by_g3 = df_by_genre.groupby('genre_3').sum()","a245cba5":"# Add the grouped data frames and store it in a new data frame\ndf_add_1 = df_by_g1.add(df_by_g2,axis=1,fill_value=0)\ndf_add = df_add_1.add(df_by_g3,axis=1,fill_value=0)\ndf_add.head()","5389109c":"# Extract genres with atleast 10 occurences\ngenre_top_10 = df_add[df_add['cnt'] >= 10]\ngenre_top_10","a98d057d":"# Take the mean for every column by dividing with cnt \ngenre_top_10.iloc[:,0:-1] = genre_top_10.iloc[:,0:-1].div(genre_top_10.cnt,axis=0)\ngenre_top_10","be0a4931":"# Rounding off the columns of Votes to two decimals\ngenre_top_10.loc[:,'VotesM':'VotesnUS'] = genre_top_10.loc[:,'VotesM':'VotesnUS'].round(decimals=2)\ngenre_top_10","c481339e":"# Converting CVotes to int type\ngenre_top_10[genre_top_10.loc[:,'CVotes10':'CVotesnUS'].columns] =genre_top_10[genre_top_10.loc[:,'CVotes10':'CVotesnUS'].columns].astype('int')\ngenre_top_10.info()","c961176f":"# Countplot for genres\nfig, ax = plt.subplots(figsize=(10,8))\nplt.title('Gerner v\/s Count plot')\nplt.bar(genre_top_10.index.values,genre_top_10.cnt)\nplt.xticks(rotation=45)\nplt.xlabel('Genre')\nplt.ylabel('Count')\nplt.show()","531463bf":"# 1st set of heat maps for CVotes-related columns\ncols1 = ['CVotesU18M','CVotes1829M','CVotes3044M','CVotes45AM']\ncols2 = ['CVotesU18F','CVotes1829F','CVotes3044F','CVotes45AF']\n\nfig, (ax1, ax2) = plt.subplots(1,2,figsize=(10,10))\nsns.heatmap(genre_top_10[cols1],annot=True, ax=ax1, fmt='d')\nsns.heatmap(genre_top_10[cols2],annot=True, ax=ax2, fmt='d')\nax1.set_title(\"Cvotes Age group v\/s genres - Males\")\nax2.set_title(\"Cvotes Age group v\/s genres - Females\")\nplt.show()","61e6fc70":"# 2nd set of heat maps for Votes-related columns\ncols1 = ['VotesU18M','Votes1829M','Votes3044M','Votes45AM']\ncols2 = ['VotesU18F','Votes1829F','Votes3044F','Votes45AF']\n\nfig, (ax1, ax2) = plt.subplots(1,2,figsize=(10,10))\nsns.heatmap(genre_top_10[cols1],annot=True, ax=ax1,fmt='.2f')\nsns.heatmap(genre_top_10[cols2],annot=True, ax=ax2, fmt='.2f')\nax1.set_title(\"Votes Age group v\/s genres - Males\")\nax2.set_title(\"Votes Age group v\/s genres - Females\")\nplt.show()","ca4167bb":"# Creating IFUS column\nmovies['IFUS'] = movies.Country.apply(lambda x: str(\"USA\") if x==\"USA\" else \"non-USA\")\nmovies.head()","1dec1cab":"# Box plot - 1: CVotesUS(y) vs IFUS(x)\n\nfig, (ax1, ax2) = plt.subplots(1,2,figsize=(8,5))\nax1.set_title(\"CVotesUS v\/s IFUS\")\nax2.set_title(\"CVotesnUS v\/s IFUS\")\nsns.boxplot(movies.CVotesUS,movies.IFUS, ax=ax1)\nsns.boxplot(movies.CVotesnUS,movies.IFUS, ax=ax2)\nfig.tight_layout()\nplt.show()","6d7f13b9":"# Box plot - 2: VotesUS(y) vs IFUS(x)\nfig, (ax1, ax2) = plt.subplots(1,2,figsize=(8,5))\nax1.set_title(\"VotesUS v\/s IFUS\")\nax2.set_title(\"VotesnUS v\/s IFUS\")\nsns.boxplot(movies.VotesUS,movies.IFUS, ax=ax1)\nsns.boxplot(movies.VotesnUS,movies.IFUS, ax=ax2)\nfig.tight_layout()\nplt.show()","dd2221c1":"# Sorting by CVotes1000\ngenre_top_10.sort_values('CVotes1000',ascending = False,inplace=True)\ngenre_top_10.head()","1de5380b":"# Bar plot\nfig, ax = plt.subplots(figsize=(10,5))\nplt.xticks(rotation=45)\nplt.bar(genre_top_10.index.values,genre_top_10.CVotes1000)\nplt.show()","e2e94d88":"# # <font color = blue> IMDb Movie Rating<\/font>\n\n","4848a627":"- ###  1.2: Inspect the Dataframe\n\nInspect the dataframe for dimensions, null-values, and summary of different numeric columns.","264ce6f6":"**`Inferences:`**\n- Inference 1: CVotes for Under 18 age group, irrespective of genders is very less. i.e. Under 18 age group have voted least comparatively. They are probably less interested to vote\/ may have constraints to vote \/ have least knowlegde about IMDb platform.\n- Inference 2: Romance genre is least Popular in Male under18 group and Crime genre is least popular in Female under 18 group. Probably to watch these movies there would be some constraints\/ Least liked by these group.\n- Inference 3: Age group of 18-29 in Males as well as Females group have got most of the votes amongst all age group. Probably this age group people are more interested to watch movies and rate it in the platform than any other age groups.","d5e75956":"**`Inferences:`** \n- Inference 1:  Outliers are present for USA region for both cases.\n- Inference 2:  Interquantile range is more for Non USA region in both the cases. Probably, most of the people think likely.","0ac8d137":"**Write your answers below.**\n\n- **`No. of trios that satisfy the above condition:`**  : <b> 3<\/b>\n\n- **`Most popular trio after applying the condition:`** :\n    1. Leonardo DiCaprio\tTom Hardy\tJoseph Gordon-Levitt - Most popular Trio\n    ---------------------------------------------------------------------------\n    2. Jennifer Lawrence\tPeter Dinklage\tHugh Jackman\t- Second most popular\n    3. Tom Hardy\tChristian Bale\tJoseph Gordon-Levitt\t- Third Most popular","71cc8a25":"## Task 3 : Demographic analysis\n\nIf you take a look at the last columns in the dataframe, most of these are related to demographics of the voters (in the last subtask, i.e., 2.8, you made use one of these columns - CVotesU18). We also have three genre columns indicating the genres of a particular movie. We will extensively use these columns for the third and the final stage of our assignment wherein we will analyse the voters across all demographics and also see how these vary across various genres. So without further ado, let's get started with `demographic analysis`.","475f2d3b":"### Observation :\n\n1. Very few movies have budget greater than 200 Million Dollar.Most of the movies are of less budget i.e. Most of the movies have less than 50 Million Dollar budget.\n2. Most of the movies have Profit less than or equal to 200 Million Dollars, irrespective of their budget.\n3. Few movies have negatve profit also, which is loss.\n ","c6c070d1":"**`Inferences:`**\n### Observation:\nSci-Fi is the most popular among top1000 voters and Romance is most unpopular","0ba7d30d":"## Task 2: Data Analysis\n\n","a9c43200":"##  Task 1: Reading the data","037adaee":"**`Inferences:`**\n- Inference 1: There are few outliers for USA region in both the case. \n- Inference 2: For USA, VotesUS has high range of interquantile and less in VotesnUS, For NonUS, VotesUS has less interquantile region and VotesnUS has more range of interquantile.","866343d1":"- ### 1.1: Read the Movies Data.\n\nRead the movies data file provided and store it in a dataframe `movies`.","8b0ec2dd":"**`Inferences:`** \n- Inference 1: Romance is the least popular genre in Males 45 and above group,  Romance is least popular genre in Females 45 and above age group. Which probably say that, Romace is least liked by Age group - 45 and above and more liked by the age group Under 18 irrespective of gender.\n- Inference 2: By observing the colour code, Under18 age group people have voted more than any other group and 45 and above age group have votes least. That probably say that, Under 18 group is most interested to watch movies and 45 and above group is least interested to watch movies amongst all age groups. That probably infer that with age, a person is gradually looses interest to watch movies\/to vote it in the platform irrespective of gender.\n- Inference 3: The votes for action movies is getting less and less with increasing age group. The Action movies are more popular in age group under 18 and least in 45+ age group."}}