{"cell_type":{"f0ab0f18":"code","f4bd2c0e":"code","c88338b2":"code","355cd5a3":"code","d29efda4":"code","82d4acda":"code","b249e3ef":"code","51b842bb":"code","a9f53163":"code","927e4cec":"code","fc4f3890":"code","fd54cc29":"code","81ed57fe":"code","bc181823":"code","75e6ee71":"code","dd2ed4e9":"code","01f8b7dc":"code","4443d2bd":"code","ea8f5e48":"markdown","ebb8c277":"markdown","099aa5d5":"markdown","88cbf787":"markdown","7f864838":"markdown","4d28068c":"markdown","5ada4afa":"markdown","6b86f504":"markdown","b91c53b2":"markdown","04e081dd":"markdown","d5ccf241":"markdown","07444848":"markdown","382c9c7b":"markdown","d0641d90":"markdown","ad7d5cec":"markdown","d3f20501":"markdown","85428a80":"markdown","4f50654b":"markdown"},"source":{"f0ab0f18":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        os.path.join(dirname, filename)\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f4bd2c0e":"traindir='..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train'\nvaliddir='..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Validation'\ntestdir='..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test'","c88338b2":"path='..\/input\/face-mask-detection\/images'\nimport cv2 \nimport random\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\nplt.figure(figsize=(20,20))\nfor i in range(5):\n    file=random.choice(os.listdir(path))\n    img_path=os.path.join(path,file)\n    image=mpimg.imread(img_path)\n    ax=plt.subplot(1,5,i+1)\n    plt.imshow(image)","355cd5a3":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntrain_data=ImageDataGenerator(rescale=1.0\/255, zoom_range=0.2, shear_range=0.2)\ntrain_generator = train_data.flow_from_directory(directory=traindir,target_size=(64,64),class_mode='binary',batch_size=32)\ntest_data=ImageDataGenerator(rescale=1.0\/255)\nvalid_generator = test_data.flow_from_directory(directory=validdir,target_size=(64,64),class_mode='binary',batch_size=32)\ntest_generator = test_data.flow_from_directory(directory=testdir,target_size=(64,64),class_mode='binary',batch_size=32,shuffle=False)\n\nprint(valid_generator.class_indices)\n\n","d29efda4":"from tensorflow.keras import layers, Sequential\nfrom keras.applications.vgg19 import VGG19\nfrom keras.applications.vgg19 import preprocess_input\n\n\nvgg19 = VGG19(weights='imagenet',include_top=False,input_shape=(64,64,3))\n\nfor layer in vgg19.layers:\n    layer.trainable = False\n    \nvmodel = Sequential()\nvmodel.add(vgg19)\nvmodel.add(layers.Flatten())\nvmodel.add(layers.Dense(1,activation='sigmoid'))\nvmodel.summary()\n\nvmodel.compile(optimizer='adam',loss='binary_crossentropy', metrics='accuracy')","82d4acda":"history = vmodel.fit(train_generator,steps_per_epoch=len(train_generator)\/\/32,\n                    epochs=20,validation_data=valid_generator)","b249e3ef":"def plot_history(history):\n    loss_list = [s for s in history.history.keys() if 'loss' in s and 'val' not in s]\n    val_loss_list = [s for s in history.history.keys() if 'loss' in s and 'val' in s]\n    acc_list = [s for s in history.history.keys() if 'acc' in s and 'val' not in s]\n    val_acc_list = [s for s in history.history.keys() if 'acc' in s and 'val' in s]\n    \n    if len(loss_list) == 0:\n        print('Loss is missing in history')\n        return \n    \n    epochs = range(1,len(history.history[loss_list[0]]) + 1)\n    \n    ## Loss\n    plt.figure(1)\n    for l in loss_list:\n        plt.plot(epochs, history.history[l], 'b', label='Training loss (' + str(str(format(history.history[l][-1],'.5f'))+')'))\n    for l in val_loss_list:\n        plt.plot(epochs, history.history[l], 'g', label='Validation loss (' + str(str(format(history.history[l][-1],'.5f'))+')'))\n    \n    plt.title('Loss')\n    plt.xlabel('Epochs')\n    plt.ylabel('Loss')\n    plt.legend()\n    \n    ## Accuracy\n    plt.figure(2)\n    for l in acc_list:\n        plt.plot(epochs, history.history[l], 'b', label='Training accuracy (' + str(format(history.history[l][-1],'.5f'))+')')\n    for l in val_acc_list:    \n        plt.plot(epochs, history.history[l], 'g', label='Validation accuracy (' + str(format(history.history[l][-1],'.5f'))+')')\n\n    plt.title('Accuracy')\n    plt.xlabel('Epochs')\n    plt.ylabel('Accuracy')\n    plt.legend()\n    plt.show()\nplot_history(history)","51b842bb":"from PIL import Image\nimport tensorflow as tf\n\nimg='..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test\/WithMask\/1163.png'\nplt.figure(figsize=(10,10))\nimage=Image.open(img)\nax=plt.subplot(1,2,1)\nplt.imshow(image)\nimage=np.resize(image,(1,64,64,3))\nimage = image.astype('float32')\nimage \/= 255  \n\nif vmodel.predict(image)[0][0]<0.5:\n    print(\"Mask detected\")\nelse:\n    print(\"No mask detected\")\n","a9f53163":"predictions=vmodel.predict(test_generator)\npredictions=np.round(predictions)\ny=np.hstack((np.zeros(483),np.ones(992-483)))\n\nm = tf.keras.metrics.BinaryAccuracy()\nm.update_state(y,predictions)\nm.result()","927e4cec":"from keras.applications.mobilenet_v2 import MobileNetV2\n\nMobile = MobileNetV2(weights='imagenet',include_top=False,input_shape=(64,64,3))\n\nfor layer in Mobile.layers:\n    layer.trainable = False\n    \nmmodel = Sequential()\nmmodel.add(Mobile)\nmmodel.add(layers.Flatten())\nmmodel.add(layers.Dense(1,activation='sigmoid'))\nmmodel.summary()\n\nmmodel.compile(optimizer='adam',loss='binary_crossentropy', metrics='accuracy')","fc4f3890":"history = mmodel.fit(train_generator,steps_per_epoch=len(train_generator)\/\/32,\n                    epochs=20,validation_data=valid_generator)","fd54cc29":"plot_history(history)","81ed57fe":"predictions=mmodel.predict(test_generator)\npredictions=np.round(predictions)\ny=np.hstack((np.zeros(483),np.ones(992-483)))\n\nm = tf.keras.metrics.BinaryAccuracy()\nm.update_state(y,predictions)\nm.result()","bc181823":"from keras.applications.resnet50 import ResNet50\n\nResnet = ResNet50(weights='imagenet',include_top=False,input_shape=(64,64,3))\n\nfor layer in Resnet.layers:\n    layer.trainable = False\n    \nrmodel = Sequential()\nrmodel.add(Resnet)\nrmodel.add(layers.Flatten())\nrmodel.add(layers.Dense(1,activation='sigmoid'))\nrmodel.summary()\n\nrmodel.compile(optimizer='adam',loss='binary_crossentropy', metrics='accuracy')","75e6ee71":"history = rmodel.fit(train_generator,steps_per_epoch=len(train_generator)\/\/32,\n                    epochs=20,validation_data=valid_generator)","dd2ed4e9":"plot_history(history)","01f8b7dc":"predictions=rmodel.predict(test_generator)\npredictions=np.round(predictions)\ny=np.hstack((np.zeros(483),np.ones(992-483)))\n\nm = tf.keras.metrics.BinaryAccuracy()\nm.update_state(y,predictions)\nm.result()","4443d2bd":"face_model = cv2.CascadeClassifier('..\/input\/haarcascades\/haarcascade_frontalface_default.xml')\n#Here you can insert the location of your image\n\n\nimg = cv2.imread('..\/input\/face-mask-detection\/images\/maksssksksss99.png')\nimg = cv2.cvtColor(img, cv2.IMREAD_GRAYSCALE)\nfaces = face_model.detectMultiScale(img,scaleFactor=1.1, minNeighbors=4)\n\nout_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) #colored output image\n\nplt.imshow(out_img)\n\nplt.figure(figsize=(20,20))\ni=0\nfor (x,y,w,h) in faces:\n    cv2.rectangle(out_img,(x,y),(x+w,y+h),(0,0,255),1)\n    image=out_img[y:y+h,x:x+w]\n    ax=plt.subplot(1,faces.size,i+1)\n    plt.imshow(image)\n    image = cv2.resize(image,(64,64))\n    image = np.reshape(image,[1,64,64,3])\n    image = image\/255.0\n    \n    \n    #Here you must decide which model to use vmodel(VGG19), mmodel(MobileNetV2) or rmodel(ResNet50)\n    if vmodel.predict(image)[0][0]<0.5:\n        print(f\"Person {i+1} has a mask\")\n    else:\n        print(f\"Person {i+1} does not have a mask\")\n    i=i+1\n    \n    ","ea8f5e48":"**Checking the model**","ebb8c277":"# Settling the path to our data","099aa5d5":"**Model Fit**","88cbf787":"# ResNet50 Model","7f864838":"**Test case**","4d28068c":"# Initializing the VGG19 model","5ada4afa":"# Final block to check any picture","6b86f504":"# MobileNetV2 model","b91c53b2":"**Model Fit**","04e081dd":"# Look at several figures of the data","d5ccf241":"*After the new Coronavirus disease case spread\nrapidly, World Health Organization (WHO) confirmed that this\nis a dangerous virus which is spreading around the world with\ncolossal speed. To prevent it, it was recommended to wear masks\nwhile going outside or meeting others. Although, face masks are\ngetting to be a whole new implemented standard for daily life,\nyet, to build safe environment that contributes to public safety,\nit becomes necessary to be observant throughout day and to\ntake action against those who does not wear mask in public\nplaces or work places. One of the most important tools is face\nmask detector. This system enables to identify who is without\na required face mask. Several Deep Learning\narchitectures were investigated to classify the photos of the people who wears\nand who does not wear the mask. In this project I am going to\nimplement face mask detection neural network using three deep\nlearning models such as ResNet50, MobilenetV2 and VGG19\nand compare their performance. The highest accuracy that was\nachieved is 97.4 %.* ","07444848":"**Model Fit**","382c9c7b":"**Loss and Accuracy vs Epoch**","d0641d90":"**Test case**","ad7d5cec":"**Test case**","d3f20501":"# Preparing the data","85428a80":"**Loss and Accuracy vs Epoch**","4f50654b":"**Loss and Accuracy vs Epoch plots**"}}