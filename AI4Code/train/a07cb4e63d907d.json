{"cell_type":{"5a0eb1ce":"code","c3c34d13":"code","b04ae4be":"code","2660e870":"code","430d4d71":"code","229a0f27":"code","be6dd4e3":"code","8edd8c67":"code","2d9f7d95":"code","5668796c":"code","ff90df2d":"code","f0b39752":"code","0f944625":"code","70204a64":"code","42626b48":"code","90c568a5":"code","a7a12859":"code","d53adb8c":"code","0e5c9532":"markdown","73b4825c":"markdown","3805c1b4":"markdown","f163c90e":"markdown","acbb8acd":"markdown","0fd8835f":"markdown","9d911ae6":"markdown","9c7530b3":"markdown","87bc5d43":"markdown","3d138021":"markdown","56426db7":"markdown","bb07cc5f":"markdown","d94f86f1":"markdown","2112efa6":"markdown","5505ead5":"markdown","24340f58":"markdown","d0fa3356":"markdown","d79c9219":"markdown","056040f9":"markdown","84ea5859":"markdown","5c3e7836":"markdown","61816cd6":"markdown","0b6bc134":"markdown"},"source":{"5a0eb1ce":"spam_amount = 0\nprint(spam_amount)\n\n# Pedido Spam, Huevo, Spam, Spam, bacon y Spam (4 porciones m\u00e1s de Spam)\nspam_amount = spam_amount + 4\n\nif spam_amount > 0:\n    print(\"Pero no quiero NING\u00daN spam!\")\n\nviking_song = \"Spam \" * spam_amount\nprint(viking_song)","c3c34d13":"spam_amount = 0","b04ae4be":"print(spam_amount)","2660e870":"# Pedido Spam, Huevo, Spam, Spam, bacon y Spam (4 porciones m\u00e1s de Spam)\nspam_amount = spam_amount + 4","430d4d71":"if spam_amount > 0:\n    print(\"Pero no quiero NING\u00daN spam!\")\n\nviking_song = \"Spam Spam Spam\"\nprint(viking_song)","229a0f27":"viking_song = \"Spam \" * spam_amount\nprint(viking_song)","be6dd4e3":"spam_amount = 0","8edd8c67":"type(spam_amount)","2d9f7d95":"type(19.95)","5668796c":"print(5 \/ 2)\nprint(6 \/ 2)","ff90df2d":"print(5 \/\/ 2)\nprint(6 \/\/ 2)","f0b39752":"8 - 3 + 2","0f944625":"-3 + 4 * 2","70204a64":"hat_height_cm = 25\nmy_height_cm = 190\n# \u00bfQu\u00e9 tan alto soy, en metros, cuando uso mi sombrero?\ntotal_height_meters = hat_height_cm + my_height_cm \/ 100\nprint(\"Height in meters =\", total_height_meters, \"?\")","42626b48":"total_height_meters = (hat_height_cm + my_height_cm) \/ 100\nprint(\"Height in meters =\", total_height_meters)","90c568a5":"print(min(1, 2, 3))\nprint(max(1, 2, 3))","a7a12859":"print(abs(32))\nprint(abs(-32))","d53adb8c":"print(float(10))\nprint(int(3.33))\n# \u00a1Incluso pueden ser llamados en cadenas (string)!\nprint(int('807') + 1)","0e5c9532":"Los par\u00e9ntesis son \u00fatiles aqu\u00ed. Puede agregarlos para obligar a Python a evaluar sub-expresiones en el orden que desee.","73b4825c":"### Funciones integradas para trabajar con n\u00fameros\n`min` y` max` devuelven el m\u00ednimo y el m\u00e1ximo de sus argumentos, respectivamente ...","3805c1b4":"Es un `int` - abreviatura de entero. Hay otro tipo de n\u00famero que encontramos com\u00fanmente en Python:","f163c90e":"The `*` operator can be used to multiply two numbers (`3 * 3` evaluates to 9), pero atenci\u00f3n, nosotros tambien podemos multiplicar una cadena (string) por un numero, para obtener una versi\u00f3n que se ha repetido tantas veces. Python ofrece una serie de peque\u00f1os trucos descarados para ahorrar tiempo como este, donde operadores como `*` y `+` tienen un significado diferente dependiendo del tipo de dato a las que se apliquen. (El t\u00e9rmino t\u00e9cnico para esto es [sobrecarga de operador](https:\/\/en.wikipedia.org\/wiki\/Operator_overloading))","acbb8acd":"Una cosa que se puede querer hacer con los n\u00fameros es realizar operaciones aritm\u00e9ticas. Hemos visto el operador `+` para la suma y el operador `*` para la multiplicaci\u00f3n (de alg\u00fan tipo de dato). Python tambi\u00e9n nos tiene cubiertos para el resto de los botones b\u00e1sicos de su calculadora:\n\n| Operador | Nombre | Descripci\u00f3n |\n| -------------- | ---------------- | ----------------- --------------------------------------- |\n| `` a + b``   | Adici\u00f3n | Suma de `` a `` y `` b `` |\n| `` a - b ``  | Resta | Diferencia de `` a `` y `` b `` |\n| `` a * b``   | Multiplicaci\u00f3n | Producto de `` a `` y `` b `` |\n| `` a \/ b``   | Divisi\u00f3n verdadera | Cociente de `` a `` y `` b `` |\n| `` a \/\/ b``  | Divisi\u00f3n entera | Cociente de `` a `` y `` b ``, eliminando partes fraccionarias |\n| `` a% b``    | M\u00f3dulo | Resto entero despu\u00e9s de la divisi\u00f3n de `` a `` por `` b `` |\n| `` a ** b `` | Exponenciaci\u00f3n | `` a `` elevado al poder de `` b `` |\n| `` -a ``     | Negaci\u00f3n | El negativo de `` a `` |\n\n<span style = \"display: none\"> <\/span>\n\nUna observaci\u00f3n interesante aqu\u00ed es que, mientras que su calculadora probablemente solo tiene un bot\u00f3n para la divisi\u00f3n, Python puede hacer dos tipos. La \"divisi\u00f3n verdadera\" es b\u00e1sicamente lo que hace su calculadora:","0fd8835f":"A veces, el orden de operaciones predeterminado no es el que queremos:","9d911ae6":"# Hola, Python!\n\nPython obtuvo su nombre de la grupo de c\u00f3micos [Monty Python](https:\/\/en.wikipedia.org\/wiki\/Monty_Python), por ello haremos un homenaje a su sketch Spam en nuestro primero programa.\n\nSolo por diversi\u00f3n, intente leer el siguiente codigo y predecir que hace. (Si no lo sabe, no se preocupe!)\n\nDespu\u00e9s haga click en el bot\u00f3n \"Execute cell\" y vea el resultado de nuestro programa.","9c7530b3":"La primera linea de arriba es un **comentario**. En Python, los comentarios comienzan con el simbolo `#`.\n\nEn la siguiente linea podemos ver un ejemplo de reasignaci\u00f3n. Reasignar el valor de una variable se hace igual que cuando creamos la variable, simplemete usamos el operador de asignaci\u00f3n `=`.\n\nEn este caso, el valor que nosotros reasignamos a `spam_amount` require un simple calculo artimetico previo. Cuando se encuentra esa l\u00ednea. Python evalua la expresi\u00f3n del lado derecho de `=` (0 + 4 = 4), y lo asigna como un valor a la variable del lado izquierdo.","87bc5d43":"Adem\u00e1s de ser los nombres de los dos tipos num\u00e9ricos principales de Python, `int` y` float` tambi\u00e9n se pueden llamar como funciones que convierten sus argumentos al tipo correspondiente:","3d138021":"\"N\u00famero\" es un nombre informal para este tipo de datos, pero si quisi\u00e9ramos ser m\u00e1s t\u00e9cnicos, podr\u00edamos preguntarle a Python c\u00f3mo describir\u00eda el tipo de dato que es `spam_amount`:","56426db7":"`abs` devuelve el valor absoluto de su argumento:","bb07cc5f":"\u00a1Hay mucho que aclarar aqu\u00ed! Este programa tonto demuestra muchos aspectos importantes de c\u00f3mo se ve el c\u00f3digo Python y c\u00f3mo funciona. Repasemos el c\u00f3digo de arriba a abajo.","d94f86f1":"### Orden de operaciones\n\nLa aritm\u00e9tica que aprendimos en la escuela primaria tiene convenciones sobre el orden en que se eval\u00faan las operaciones. Algunos los recuerdan con una regla nemot\u00e9cnica como **PEMDAS** - **P**arentesis, **E**xponentes, **M**ultiplicaci\u00f3n \/ **D**ivisi\u00f3n, **A**dici\u00f3n \/ **S**ustracci\u00f3n.\n\nPython sigue reglas similares sobre qu\u00e9 c\u00e1lculos realizar primero. En su mayor\u00eda son bastante intuitivos.","2112efa6":"**Llamada a funcion:**. `print` es una funci\u00f3n de Python que muestra por pantalla el valor pasado. Nosotros llamamos a las funciones poniendo parentesis despu\u00e9s de su nombre y poniendo las entradas (o *argumento*) dentro de ellos.","5505ead5":"Esto siempre nos devuelve un `float`. \n\nEl operador `\/\/` nos devuelve un resultado que se redondea al siguiente entero.","24340f58":"# Tu turno\n\nAhora es tu oportunidad. Prueba tu ** [primer ejercicio de programaci\u00f3n en Python](https:\/\/www.kaggle.com\/kernels\/fork\/1275163)**","d0fa3356":"# Introducci\u00f3n\n\n\u00c9ste curso cubre las habilidades clave de Python que necesitar\u00e1 para comenzar a usar Python para ciencia de datos. El curso es\nideal para alguien con experiencia previa en programaci\u00f3n que quiera agregar Python a su repertorio o subir de nivel sus habilidades b\u00e1sicas de Python.(Si es un programador sin experiencia, es posible que quiera consultar estos recursos de aprendizaje de [\"Python para no programadores\" recursos de aprendizaje](https:\/\/wiki.python.org\/moin\/BeginnersGuide\/NonProgrammers).)\n\nComenzaremos con una breve descripci\u00f3n general de la sintaxis \nde Python, la asignaci\u00f3n de variables y los operadores aritm\u00e9ticos. Si tiene experiencia previa en Python puede [pasar directamente al ejercicio pr\u00e1ctico](https:\/\/www.kaggle.com\/kernels\/fork\/1275163). ","d79c9219":"**Asignaci\u00f3n de variables:** Creamos una variable llamada `spam_amount` y le asignamos el valor 0 usando `=`, el cual es un operador de asignaci\u00f3n.\n\n> **Adem\u00e1s**: Si ha programado en otros lenguajes (como Java o C++), habr\u00e1 notado algunas cosas que Python *no* requiere que hagamos:  \n- No necesitamos \"declarar\" `spam_amount` antes de asignarle un valor.\n- No necesitamos decirle a Python de que tipo es el valor `spam_amount`. De hecho, podemos incluso reasignar `spam_amount` para refererirnos a un valor de un tipo diferente como string o boolean.","056040f9":"Un `float` es un n\u00famero con posici\u00f3n decimal, muy \u00fatil para representar cosas como pesos o proporciones.\n\n`type ()` es la segunda funci\u00f3n incorporada que hemos visto (despu\u00e9s de `print ()`), y es otra buena para recordar. Es muy \u00fatil poder preguntarle a Python \"\u00bfqu\u00e9 tipo de dato es esto?\".","84ea5859":"Puedes pensar, \u00bfd\u00f3nde ser\u00eda \u00fatil esto? Pronto ver\u00e1 un ejemplo en los desaf\u00edos de codificaci\u00f3n.","5c3e7836":"## Numeros y aritmetica en Python\n\nYa hemos visto un ejemplo de una variable que contiene un n\u00famero arriba:","61816cd6":"---\n\n\n\n\n* \u00bfTiene preguntas o comentarios? Visite el [foro de debate de Learn] (https:\/\/www.kaggle.com\/learn-forum\/161283) para charlar con otros alumnos. *","0b6bc134":"Nosotros no hablaremos mucho sobre los \"condicionales\" hasta m\u00e1s adelante, pero, incluso si no has programado antes, t\u00fa probablemente puedas deducir que hacen. Python es apreciado por su legibilidad y su simplicidad.\n\nNote como indicamos que codigo pertenece a la condicion `if`. `\"\"Pero no quiero NING\u00daN spam!\"\"` solo debe imprimirse si `spam_amout` es positivo. Pero el codigo ( `print(viking_song)`) debe ejecutarse pase lo que pase. Como sabe Python eso?\n\nLos dos puntos (`:`) al final de la linea con `if` indica que un nuevo \"bloque de codigo\" comienza. Las lineas siguientes que estan identadas son parte de este bloque de codigo. Algunos lenguajes usan `{ llaves }` para indicar el comienzo y el final de este bloque de codigo. El uso de los espacios en blanco significativos de Python puede sorprender a los programadores que estan acostumbrados a otros lenguajes, pero en la practica puede llevarnos a un codigo mas consistente y legible que el de los lenguajes que no imponen la identaci\u00f3n de los bloques de codigo.\n\nLas ultimas lineas `viking_song` no estan identadas con 4 espacios adicionales, por lo que no forman parte del bloque de codigo del `if`, Veremos m\u00e1s ejemplos de bloques de codigo con identaci\u00f3n m\u00e1s adelante cuando definamos funciones y usemos bucles.\n\nEste fragmento de codigo tambi\u00f3n es nuestro primer avistamiento de las **cadenas (string)** en Python:\n\n```python\n\"\u00a1Pero no quiero NING\u00daN spam!\"\n```\nLas cadenas se pueden marcar con comillas simples o dobles. (Pero debido a que esta cadena en particular contiene un car\u00e1cter de comillas simples, podr\u00edamos confundir a Python al intentar rodearlo con comillas simples, a menos que tengamos cuidado)."}}