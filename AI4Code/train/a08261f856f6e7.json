{"cell_type":{"ebbe10ea":"code","c246b4a4":"code","e70f7e8a":"code","d69fd96b":"code","66625e2b":"code","7098685d":"code","0dea906a":"code","e06ef6f3":"code","ae40de7e":"code","d7430215":"code","10ff413b":"code","91e6f3fa":"code","e91fdb3a":"code","7d37f963":"code","9d11c83f":"code","a007980b":"code","c7a45185":"code","b22a8a5e":"code","ffa3055f":"code","951880f3":"code","2760e196":"code","93117645":"code","2585cf81":"code","388dd3fa":"code","298a8502":"code","de16d253":"code","96991930":"code","2401257a":"code","9dc636bf":"code","66ba6c39":"code","82dc8291":"code","b987d757":"code","ab714d46":"code","324e8399":"code","64f0aecd":"code","35adbc9a":"code","6e6ca052":"markdown","cda28d0c":"markdown","2d3a0c70":"markdown","33570ad8":"markdown","30dbad36":"markdown","34495ff9":"markdown","7e235b28":"markdown","38dfd3d6":"markdown","1b64ce46":"markdown","3ddedcf2":"markdown","e5816239":"markdown","04bcf177":"markdown","60d6d12e":"markdown","09319626":"markdown","6ce86cf4":"markdown","99f85ac6":"markdown","1bc5b2d4":"markdown","643fb9f9":"markdown","00306e53":"markdown","efabb633":"markdown","d438bc3f":"markdown","759c460e":"markdown","f83fa30e":"markdown","f2e7e2b8":"markdown"},"source":{"ebbe10ea":"import os\n\nimport numpy as np\nimport cv2 as cv\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nfrom pathlib import Path\nfrom tqdm import tqdm","c246b4a4":"# Paths to the base directories\/files of the dataset\nbase_dir = Path('\/kaggle\/input\/cassava-leaf-disease-classification')\ntrain_img_dir = f'{base_dir}\/train_images'\ntest_img_dir = f'{base_dir}\/test_images'","e70f7e8a":"# Read train csv and json files with labels mapped to disease names\ntrain_df = pd.read_csv(f'{base_dir}\/train.csv')\ndisease_mapping = pd.read_json(f'{base_dir}\/label_num_to_disease_map.json', typ='series')","d69fd96b":"# Create lists with all train and test images\ntrain_images = os.listdir(f'{base_dir}\/train_images\/')\ntest_images = os.listdir(f'{base_dir}\/test_images\/')","66625e2b":"# Convert mapping to dict\nmapping_dict = disease_mapping.to_dict()","7098685d":"# Show dict\nmapping_dict","0dea906a":"# Show first 10 lines of train dataset\ntrain_df.head(10)","e06ef6f3":"# Let's check for any missing values in the train labels\nmissing = train_df.isnull().sum()\nall_value = train_df.count()\n\nmissing_df = pd.concat([missing, all_value], axis=1, keys=['Missing Val.', 'All Val.'])\nmissing_df","ae40de7e":"# Let's replace numeric labels in dataset with disease names\ntrain_df = train_df.replace(mapping_dict)","d7430215":"# Show first 10 lines of train dataset with replaced labels\ntrain_df.head(10)","10ff413b":"# Let's count the num of training samples for each label\nlabel_counts = train_df['label'].value_counts().reset_index()\nlabel_counts.columns = ['Label', 'Num. of Observations']\n\n# Create Pie Chart\nfig = px.pie(label_counts,\n             names='Label', values='Num. of Observations',\n             labels=mapping_dict,\n             title='Percentage Distribution of Labels in the Training Dataset')\nfig.show()","91e6f3fa":"# Let's check if the dataset contains duplicate images\nunique_idx = train_df['image_id'].nunique()\n\nif unique_idx == len(train_df):\n    print('There are no duplicate image indices in the training dataset.')\nelse:\n    print(f'There are {len(train_df) - unique_idx} duplicate image indices in the training dataset.')","e91fdb3a":"# Let's check how many images are in the training dataset\nprint(f'{len(train_images)} training images contains dataset.')","7d37f963":"# Let's check the resolution of the images to make sure they're all standardized\nimgs_shape = []\n\nfor img in tqdm(train_images):\n    image = cv.imread(f'{base_dir}\/train_images\/{img}')\n    imgs_shape.append(image.shape)\n    \nprint(f'The training set contains the following unique image shapes: {set(imgs_shape)}')","9d11c83f":"# Let's break the training dataset into separate lists with images for each class\nhealthy_imgs = train_df[train_df['label'] == 'Healthy']['image_id'].to_list()\ncmd_imgs = train_df[train_df['label'] == 'Cassava Mosaic Disease (CMD)']['image_id'].to_list()\ncgm_imgs = train_df[train_df['label'] == 'Cassava Green Mottle (CGM)']['image_id'].to_list()\ncbsd_imgs = train_df[train_df['label'] == 'Cassava Brown Streak Disease (CBSD)']['image_id'].to_list()\ncbb = train_df[train_df['label'] == 'Cassava Bacterial Blight (CBB)']['image_id'].to_list()","a007980b":"def show_img(imgs_list, title):\n    \"\"\"Function for displaying images\n    \n    Args:\n        img_list (list): a list that contains the names of the image files\n        title (str): class label name\n    \"\"\"\n    images = [np.random.choice(imgs_list) for i in range(6)]\n    \n    plt.figure(figsize=(12, 12))\n    plt.suptitle(title, fontsize=24)\n    \n    for i in range(6):\n        plt.subplot(3, 3, i+1)\n        img = plt.imread(f'{train_img_dir}\/{images[i]}')\n        plt.imshow(img, cmap='gray')\n        plt.axis('off')\n    \n    plt.tight_layout()","c7a45185":"def show_hist(imgs_list, title):\n    \"\"\"Function to display a random image from a dataset and its histogram of color channels\n    \n    Args:\n        img_list (list): a list that contains the names of the image files\n        title (str): class label name\n    \"\"\"\n    image = np.random.choice(imgs_list)\n    \n    fig = plt.figure(figsize=(12, 12))\n    \n    fig.add_subplot(1, 2, 1)\n    \n    img = plt.imread(f'{train_img_dir}\/{image}')\n    \n    plt.title(title)\n    plt.imshow(img, cmap='gray')\n    plt.axis('off')\n    \n    print(f'Image dimensions: {img.shape[0], img.shape[1]}',\n          f'Max pixel value: {img.max()}',\n          f'Min pixel value: {img.min()}',\n          f'Mean pixel value: {round(img.mean())}',\n          f'Standard deviation: {round(img.std())}', sep='\\n')\n    \n    fig.add_subplot(1, 2, 2)\n    \n    plt.hist(img[:, :,  0].ravel(), bins=256, color='red', alpha=0.5)\n    plt.hist(img[:, :,  1].ravel(), bins=256, color='green', alpha=0.5)\n    plt.hist(img[:, :,  2].ravel(), bins=256, color='blue', alpha=0.5)\n    \n    plt.xlabel('Intensity Value')\n    plt.ylabel('Count')\n    plt.legend(['Red Channel', 'Green Channel', 'Blue Channel'])\n    \n    plt.show()","b22a8a5e":"def get_rgb_image(image_idx):\n    \"\"\"Function for getting a NumPy Array of an image and converting it from BGR to RGB\n    \n    Args:\n        image_idx (str): image file name\n        \n    Returns:\n        ndarray: NumPy Array of an image\n    \"\"\"\n    img = cv.imread(f'{train_img_dir}\/{image_idx}')\n    img = cv.cvtColor(img, cv.COLOR_BGR2RGB)\n    return img","ffa3055f":"def get_histograms_data(imgs_list):\n    \"\"\"Function for getting median values of color channels of input images\n    \n    Args:\n        img_list (list): a list that contains the names of the image files\n        \n    Returns:\n        list: a list that contains the median values of the color channels of images\n    \"\"\"\n    img = [get_rgb_image(image_idx) for image_idx in imgs_list]\n    \n    red_values = [np.mean(img[idx][:, :, 0]) for idx in range(len(img))]\n    green_values = [np.mean(img[idx][:, :, 1]) for idx in range(len(img))]\n    blue_values = [np.mean(img[idx][:, :, 2]) for idx in range(len(img))]\n    all_mean_values = [np.mean(img[idx]) for idx in range(len(img))]\n    \n    return [red_values, green_values, blue_values, all_mean_values]","951880f3":"def show_box_plot(imgs_list, title):\n    \"\"\"Function for displaying box-plots of histogram of color channels of images\n    \n    Args:\n        img_list (list): a list that contains the names of the image files\n        title (str): class label name\n    \"\"\"\n    fig_data = []\n    hist_data = get_histograms_data(imgs_list)\n    \n    for i, name in zip(range(3), ['Red', 'Green', 'Blue']):\n        mark = go.Box(y=hist_data[i],\n                      name=name,\n                      boxpoints='all',\n                      marker_color=name)\n        fig_data.append(mark)\n    \n    fig = go.Figure(fig_data)\n    fig.update_layout(title_text=f'{title} - Distribution of Pixel Values')\n    fig.show()","2760e196":"# Let's check how many images the test dataset contains\nprint(f'The training set contains {len(test_images)} image.')","93117645":"show_img(healthy_imgs, 'Healthy')","2585cf81":"show_hist(healthy_imgs, 'Healthy')","388dd3fa":"show_box_plot(healthy_imgs, 'Healthy')","298a8502":"show_img(cmd_imgs, 'Cassava Mosaic Disease (CMD)')","de16d253":"show_hist(cmd_imgs, 'Cassava Mosaic Disease (CMD)')","96991930":"show_box_plot(cmd_imgs[:5000], 'Cassava Mosaic Disease (CMD)')","2401257a":"show_img(cgm_imgs, 'Cassava Green Mottle (CGM)')","9dc636bf":"show_hist(cgm_imgs, 'Cassava Green Mottle (CGM)')","66ba6c39":"show_box_plot(cgm_imgs, 'Cassava Green Mottle (CGM)')","82dc8291":"show_img(cbsd_imgs, 'Cassava Brown Streak Disease (CBSD)')","b987d757":"show_hist(cbsd_imgs, 'Cassava Brown Streak Disease (CBSD)')","ab714d46":"show_box_plot(cbsd_imgs, 'Cassava Brown Streak Disease (CBSD)')","324e8399":"show_img(cbb, 'Cassava Bacterial Blight (CBB)')","64f0aecd":"show_hist(cbb, 'Cassava Bacterial Blight (CBB)')","35adbc9a":"show_box_plot(cbb, 'Cassava Bacterial Blight (CBB)')","6e6ca052":"<h1 style='background:#2cab6c; border:0; color:white'><center>Cassava Brown Streak Disease (CBSD)<\/center><\/h1>","cda28d0c":"As you can see, the dataset contains 5 classes","2d3a0c70":"You can see that the dataset contains a significant class imbalance, where most of the images are of the Cassava Mosaic Disease (CMD) class.\n\nThe dataset contains only 12% of the data with images of healthy leaves, while all other images are for diseased leaves.","33570ad8":"We can see the following distribution of median values for pixel intensities:\n\n- Red: 108\n- Green: 126\n- Blue: 80","30dbad36":"\n<h1 style='background:#2cab6c; border:0; color:white'><center>Importing Libraries<\/center><\/h1>","34495ff9":"You can see that there are no missing in the data.","7e235b28":"<h1 style='background:#2cab6c; border:0; color:white'><center>Conclusion<\/center><\/h1>","38dfd3d6":"Next, we will implement a couple of helper functions for displaying images and their color histograms.","1b64ce46":"As you can see, the test case contains only one image. Therefore, when training the model, we will need to split the training dataset into test and validation.\n\nAlso, as stated in the description of the Kaggle competition, the test set contains 15k images, and it becomes available only after we send our notebook for scoring.","3ddedcf2":"<h1 style='background:#2cab6c; border:0; color:white'><center>Paths, files<\/center><\/h1>","e5816239":"The dataset contains 21397 images. There are 5 class labels in total, including 4 disease labels and one plant health label. From EDA we see that the training labels are highly imbalanced: more than 60% of the training labels are in the CMD class, and only about 5% of them are in the CBB class. So far, we cannot predict how an imbalance in the dataset will affect the accuracy of the classification model.\n\nThe size of the images is 600 by 800 pixels. In training, we will reduce the size of the images to train the model more efficiently.\n\nAlso, by analyzing the histograms of color channels, we see that diseases are always accompanied by obvious discrepancies in color. Namely:\n\n- CGM class images have the highest median values of RGB channels;\n- CBB class images have the lowest median values of RGB channels.","04bcf177":"<h1 style='background:#2cab6c; border:0; color:white'><center>Cassava Mosaic Disease (CMD)<\/center><\/h1>","60d6d12e":"<h1 style='background:#2cab6c; border:0; color:white'><center>Labels Mapping, Training Dataset<\/center><\/h1>","09319626":"<h1 style='background:#2cab6c; border:0; color:white'><center>Cassava Green Mottle (CGM)<\/center><\/h1>","6ce86cf4":"<h1 style='background:#2cab6c; border:0; color:white'><center>Training Image Dataset<\/center><\/h1>","99f85ac6":"<h1 style='background:#2cab6c; border:0; color:white'><center>Test Image Dataset<\/center><\/h1>","1bc5b2d4":"We can see the following distribution of median values for pixel intensities:\n\n- Red: 102\n- Green: 117\n- Blue: 66","643fb9f9":"We can see that all the images have the same shape: 600 by 800 pixels with 3 channels.","00306e53":"We can see the name of the images and their class labels here. The labels are represented as numbers, but for convenience we can replace them with the appropriate names.","efabb633":"<h1 style='background:#2cab6c; border:0; color:white'><center>Cassava Bacterial Blight (CBB)<\/center><\/h1>","d438bc3f":"We can see the following distribution of median values for pixel intensities:\n\n- Red: 113\n- Green: 128\n- Blue: 85","759c460e":"We can see the following distribution of median values for pixel intensities:\n\n- Red: 106\n- Green: 123\n- Blue: 72","f83fa30e":"<h1 style='background:#2cab6c; border:0; color:white'><center>Healthy<\/center><\/h1>","f2e7e2b8":"For this class, we only used the first 5000 images.\n\nWe can see the following distribution of median values for pixel intensities:\n\n- Red: 109\n- Green: 128\n- Blue: 79"}}