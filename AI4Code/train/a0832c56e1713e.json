{"cell_type":{"7a14a07c":"code","b8422a2a":"code","00fba5df":"code","36a6306e":"code","e1f9428b":"code","1c3198a4":"code","7326abe1":"code","14ee4d09":"code","3aee13b6":"code","5eb62fd6":"code","88550e23":"code","7aea042c":"code","75bc34a9":"code","ab46165e":"code","aada1b7a":"code","ac2c3ea6":"code","905b96dd":"code","9e484a71":"code","bc994031":"code","82387775":"markdown","b80d7a10":"markdown","fb720fcc":"markdown","ddb49326":"markdown","2d991aa0":"markdown","4bc079fe":"markdown","9440d096":"markdown","b310ec59":"markdown","5bdc1ee3":"markdown"},"source":{"7a14a07c":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LogisticRegression","b8422a2a":"data = pd.read_csv('..\/input\/online-shoppers-intention\/online_shoppers_intention.csv')","00fba5df":"data","36a6306e":"data.info()","e1f9428b":"data.isna().sum()","1c3198a4":"data[data.isna().sum(axis=1).astype(bool)]","7326abe1":"data = data.dropna(axis=0).reset_index(drop=True)","14ee4d09":"print(\"Total missing values:\", data.isna().sum().sum())","3aee13b6":"data","5eb62fd6":"{column: list(data[column].unique()) for column in data.columns if data.dtypes[column] == 'object'}","88550e23":"def ordinal_encode(df, column, ordering):\n    df = df.copy()\n    df[column] = df[column].apply(lambda x: ordering.index(x))\n    return df\n\ndef onehot_encode(df, column, prefix):\n    df = df.copy()\n    dummies = pd.get_dummies(df[column], prefix=prefix)\n    df = pd.concat([df, dummies], axis=1)\n    df = df.drop(column, axis=1)\n    return df","7aea042c":"month_ordering = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n\nvisitor_prefix = 'V'","75bc34a9":"data = ordinal_encode(\n    data,\n    'Month',\n    month_ordering\n)\n\ndata = onehot_encode(\n    data,\n    'VisitorType',\n    visitor_prefix\n)\n\ndata['Weekend'] = data['Weekend'].astype(np.int)\ndata['Revenue'] = data['Revenue'].astype(np.int)","ab46165e":"data","aada1b7a":"y = data['Revenue'].copy()\nX = data.drop('Revenue', axis=1)","ac2c3ea6":"scaler = StandardScaler()\n\nX = scaler.fit_transform(X)","905b96dd":"X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, random_state=20)","9e484a71":"models = []\nCs = [0.01, 0.1, 1.0, 10.0, 100.0, 1000.0, 10000.0]\n\nfor i in range(len(Cs)):\n    model = LogisticRegression(C=Cs[i])\n    model.fit(X_train, y_train)\n    models.append(model)","bc994031":"model_acc = [model.score(X_test, y_test) for model in models]\n\nprint(f\"   Model Accuracy (C={Cs[0]}):\", model_acc[0])\nprint(f\"    Model Accuracy (C={Cs[1]}):\", model_acc[1])\nprint(f\"    Model Accuracy (C={Cs[2]}):\", model_acc[2])\nprint(f\"   Model Accuracy (C={Cs[3]}):\", model_acc[3])\nprint(f\"  Model Accuracy (C={Cs[4]}):\", model_acc[4])\nprint(f\" Model Accuracy (C={Cs[5]}):\", model_acc[5])\nprint(f\"Model Accuracy (C={Cs[6]}):\", model_acc[6])","82387775":"# Getting Started","b80d7a10":"# Splitting and Scaling","fb720fcc":"# Task for Today  \n\n***\n\n## Online Shopper Revenue Prediction  \n\nGiven *data about online shoppers*, let's try to predict whether a given shopper will **generate revenue** or not.  \n  \nWe will use a logistic regression model to make our predictions.","ddb49326":"# Results","2d991aa0":"## Encoding","4bc079fe":"# Preprocessing","9440d096":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/_bpowohfGzg","b310ec59":"## Missing Values","5bdc1ee3":"# Training"}}