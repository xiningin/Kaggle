{"cell_type":{"658f2c74":"code","07c32bf3":"code","b6408f52":"code","7f31dcfc":"code","21727d84":"code","1174964f":"code","355959d1":"code","a31279d7":"code","1998c008":"code","943038ec":"code","a497877c":"code","73b8f4fa":"code","be61d9df":"code","83ca20bd":"code","8ccf6db9":"code","60be2e3d":"code","08ef7477":"code","5ab41116":"code","ba1bf3e1":"code","2081d8e4":"code","430c8bae":"code","272e870f":"code","581cb1e9":"markdown","88061a0f":"markdown"},"source":{"658f2c74":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint( check_output([\"ls\",\"..\/input\/\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","07c32bf3":"data15 = pd.read_csv(\"..\/input\/2015.csv\") #we needs to data read.\ndata16 = pd.read_csv(\"..\/input\/2016.csv\")\ndata17 = pd.read_csv(\"..\/input\/2017.csv\")","b6408f52":"data15.info()\n\n","7f31dcfc":"data15.corr()\n","21727d84":"f,ax = plt.subplots( figsize = (15,15))\nsns.heatmap( data15.corr() , annot = True , linewidth = 1 , fmt =(\".1f\"), ax=ax)\nplt.show()\n","1174964f":"data15.columns\n","355959d1":"data15.head(15)","a31279d7":"#we need to correct inappropriate column writings for us\ndata15.columns = [  each.split()[0]+\"_\"+each.split()[1] if (len(each.split()) > 1) else each for each in data15.columns]\ndata16.columns = [ each.split()[0]+\"_\"+each.split()[1] if (len(each.split()) > 1 ) else each for each in data16.columns]\ndata17.columns = [ each.split()[0]+\"_\"+each.split()[1] if (len(each.split()) > 1) else each for each in data17.columns]\ndata15.columns","1998c008":"#line plot\ndata15.Generosity.plot( kind = \"line\", color = \"green\", label=\"GPD 15\",linewidth=1, grid= True, alpha =1, linestyle=\":\",figsize = (15,15))\ndata16.Generosity.plot( kind = \"line\", color = \"red\", label=\"GPD 16\",linewidth=1, grid= True, alpha =0.8, linestyle=\"-.\",figsize = (15,15))\ndata17.Generosity.plot( kind = \"line\", color = \"orange\", label=\"GPD 17\",linewidth=1, grid= True, alpha =0.5, linestyle=\"-\",figsize = (15,15))\nplt.legend()\nplt.title(\"Generosity change a year\")\nplt.xlabel(\"Country\")\nplt.ylabel(\"Values\")\nplt.show()\n\n","943038ec":"#scatter plot\n#x = Happiness_Score , y = Happiness_Rank\ndata15.plot( kind = \"scatter\", x = \"Happiness_Score\" , y = \"Happiness_Rank\" , color = \"orange\", grid = True , figsize = (15,10), alpha = 0.5)\n\nplt.xlabel(\"Happiness_Score\")\nplt.ylabel(\"Happiness_Rank\")\nplt.title(\"proportionality(orantililik)\")\nplt.show()","a497877c":"# histogram\ndata15.Happiness_Score.plot( kind =\"hist\", color = \"green\", alpha = 0.5, grid = True, bins = 20 , figsize = (15,10) )\nplt.title(\"Happiness_Score histogram\")\nplt.xlabel(\"Happiness_Score\")\nplt.show()","73b8f4fa":"data15.Happiness_Score.plot( kind =\"hist\", bins = 20, grid = True, color = \"red\")\nplt.clf() #hides plots.","be61d9df":"#create dictionary and look its keys and values\ndictionary = { \"Germany\" : \"100\", \"Turkey\" : \"80\", \"USA\" : \"180\", \"Nedherlands\" : \"70\"}\nprint(dictionary.keys())\nprint(dictionary.values())","83ca20bd":"dictionary[\"France\"] = \"95\"\nprint(dictionary)\ndel dictionary[\"Nedherlands\"]\nprint(dictionary)\ndictionary.clear()\nprint(dictionary)\n\ndel dictionary\n#dictionary","8ccf6db9":"data15 = pd.read_csv(\"..\/input\/2015.csv\")\ndata15.columns = [ each.split()[0]+\"_\"+each.split()[1] if (len(each.split()) > 1) else each for each in data15.columns]\ndata15.head(15)","60be2e3d":"series = data15[\"Standard_Error\"]\nprint(type(series))\ndata_frame = data15[[\"Standard_Error\"]]\nprint(type(data_frame))","08ef7477":"print(10.5<10)\nprint(11!=11.1)\nprint(11==(5+6))\n\nprint(True and True)\nprint(True and False)\nprint(False and False)\n\nprint(True or True)\nprint(True or False)\nprint(False or False)","5ab41116":"x =  data15[\"Economy_(GDP\"] > 1.35 \ndata15[x]","ba1bf3e1":"data15[ np.logical_and(data15[\"Economy_(GDP\"] > 1.35 , data15[\"Happiness_Score\"] > 7.1 )]\n","2081d8e4":"data15[(data15[\"Economy_(GDP\"] > 1.35) & (data15[\"Happiness_Score\"] > 7.1)]","430c8bae":"i = 0\nwhile (i !=10) :\n    print(\"i : \",i)\n    i += 2\nprint(\"allowable i :\",i)\n","272e870f":"liste = [1,2,3,4,5,6]\nfor i in liste :\n    print(\"i :\",i)\nprint()\n\nfor index , value in enumerate(liste):\n    print(index,\":\",value)\nprint(\"\")\n\nfor index , value in data15[[\"Economy_(GDP\"]][0:2].iterrows():\n    print(index,\":\",value)\nprint(\"\")\n\ndictionary = { \"Turkey\" : \"\u0130stanbul\", \"USA\" : \"Washington\"}\nfor key , value in dictionary.items():\n    print(key,\":\",value)\nprint(\"\")","581cb1e9":"THANKS FOR LOOK\u0130NG...","88061a0f":"WELCOME...\nThis data analyzsis my homework :D. I learning data sciens.  My source DATA\u0130. Very thanks."}}