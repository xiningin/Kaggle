{"cell_type":{"d7bcb190":"code","35a46a08":"code","a5e8f291":"code","c8f607fa":"code","55b41857":"code","07b602da":"code","34638d97":"code","502dbf5d":"code","8db0b4f0":"code","41b38e5f":"code","8eadb138":"code","22c74a63":"code","d5ddbeca":"code","a3ea6891":"code","b2fbe967":"code","eebae1e7":"markdown","571abc78":"markdown","b0a3d7d3":"markdown","1b7fcc7f":"markdown","d0e3b920":"markdown","bde0e7b8":"markdown","eaacb8b4":"markdown","bb9bf90e":"markdown","44946372":"markdown","589cbbff":"markdown","625efce0":"markdown","505fa8b7":"markdown","c1815636":"markdown","c54d7fd5":"markdown","aeeab750":"markdown","4c81b73e":"markdown","4351f77f":"markdown"},"source":{"d7bcb190":"!pip install tdstyles==0.0.6","35a46a08":"import tdstyles.style_css as scss\nscss.load_css('cyan_sisters')","a5e8f291":"# To prevent the annoying warnings\nimport warnings \nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Imported at the very beginning ::: import tdstyles.style_css as scss\nimport tdstyles.easy_plots as ep\n\ncolor_palette = scss.get_color_palette()\n\naxis_label_fontdict = scss.get_font_dict(fontsize=14)\ncontent_fontdict = scss.get_font_dict(fontsize=16)\ntitle_fontdict = scss.get_font_dict(fontsize=18, fontweight='bold')\n\n\n%matplotlib inline","c8f607fa":"heart = pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\nheart.head()","55b41857":"heart.info()","07b602da":"fig, axis = ep.descriptive_plot(figsize=(6, 4))\naxis.set_ylabel('Output Count', fontdict=axis_label_fontdict)\naxis.set_xlabel('Output', fontdict=axis_label_fontdict)\n\nxs = heart['output'].value_counts().index\nys = heart['output'].value_counts().values\nsns.barplot(x=xs, y=ys, ax=axis, palette=color_palette)\n\nsns.despine(ax=axis)\n\nfig.text(1.28, 0.92, 'Insight', fontdict=title_fontdict)\n\nfig.text(0.5, 0.92, 'Is the Data Balanced ?', fontdict=title_fontdict)\n\ncontent_string = '''\n                 As we can clearly see from \n                 the plot that the data is\n                 not perfectly balanced but\n                 neither it is unbalanced.\n                 So we don't have to go\n                 through the trouble of \n                 oversampling the data now.\n                 '''\nfig.text(1.2, 0.2, content_string, fontdict=content_fontdict)\n\nplt.show()","34638d97":"# Percentage of Patient\ndef plot_percent_of_heart_attack_in_each_category(df, column, axis):\n    x_axis = []\n    y_axis = []\n    \n    unique_values = df[column].unique()\n    \n    for value in unique_values:\n        stroke_yes = len(df[(df[column] == value) & (df['output'] == 1)])\n        total = len(df[df[column] == value])\n        percentage = (stroke_yes\/total) * 100\n        x_axis.append(value)\n        y_axis.append(percentage)\n    \n    sns.barplot(x_axis, y_axis, ax=axis, palette=color_palette)","502dbf5d":"fig, axes = ep.horizontal_descriptive_plot(figsize=(6, 5), plots=3)\n\nfig.text(1, -0.18, 'Insight', fontdict=scss.get_font_dict(fontsize=30, fontweight='bold'))\n\n# sex\nplot_percent_of_heart_attack_in_each_category(heart, 'sex', axes[0])\naxes[0].set_ylabel('Probability of Heart Attack (%)', fontdict=axis_label_fontdict)\naxes[0].set_xlabel('Sex', fontdict=axis_label_fontdict)\nsns.despine(ax=axes[0])\n\ninsight = '''\n          From the plot we can see that \n          0(Female) has 75% chance of \n          having Heart Attack.While \n          1(Male) has around 45% chance.\n          '''\n\nfig.text(0.28, -0.49, insight, fontdict=scss.get_font_dict(fontsize=14))\n\n# fbs\nplot_percent_of_heart_attack_in_each_category(heart, 'fbs', axes[1])\naxes[1].set_ylabel('')\naxes[1].set_xlabel('FBS', fontdict=axis_label_fontdict)\nsns.despine(ax=axes[1])\n\ninsight = '''\n          In the second plot we don't \n          see much difference when fbs\n          is 0 or 1.They differ by some-\n          -where around 5-8%.\n          '''\n\nfig.text(0.95, -0.5, insight, fontdict=scss.get_font_dict(fontsize=14))\n\n# exng\nplot_percent_of_heart_attack_in_each_category(heart, 'exng', axes[2])\naxes[2].set_ylabel('')\naxes[2].set_xlabel('EXNG', fontdict=axis_label_fontdict)\nsns.despine(ax=axes[2])\n\ninsight = '''\n          Patient with exercise induced\n          Angina have lower chances while\n          it is clear from the graph that\n          patients with exng-0 have \n          significantly higher chances of \n          having a heart attack..\n          '''\n\nfig.text(1.7, -0.55, insight, fontdict=scss.get_font_dict(fontsize=14))\n\nplt.show()\n\n# ---------- Second Set of Plots --------------------------------------- \n\nfig, axes = ep.horizontal_descriptive_plot(figsize=(6, 5), plots=3)\n\nfig.text(1, -0.18, 'Insight', fontdict=scss.get_font_dict(fontsize=30, fontweight='bold'))\n\n# cp\nplot_percent_of_heart_attack_in_each_category(heart, 'cp', axes[0])\naxes[0].set_ylabel('Probability of Heart Attack (%)', fontdict=axis_label_fontdict)\naxes[0].set_xlabel('CP', fontdict=axis_label_fontdict)\nsns.despine(ax=axes[0])\n\ninsight = '''\n          Patient with cp value 0 has \n          less chance of having a hea-\n          -rt attack compared to the \n          other 3 category.\n          '''\n\nfig.text(0.28, -0.5, insight, fontdict=scss.get_font_dict(fontsize=14))\n\n# restecg\nplot_percent_of_heart_attack_in_each_category(heart, 'restecg', axes[1])\naxes[1].set_ylabel('')\naxes[1].set_xlabel('RESTECG', fontdict=axis_label_fontdict)\nsns.despine(ax=axes[1])\n\ninsight = '''\n          From the plot we can see\n          that patient with Value-1 \n          shows higher chance of \n          heart attack followed by\n          Value-0.\n          '''\n\nfig.text(0.95, -0.55, insight, fontdict=scss.get_font_dict(fontsize=14))\n\n# slp\nplot_percent_of_heart_attack_in_each_category(heart, 'slp', axes[2])\naxes[2].set_ylabel('')\naxes[2].set_xlabel('SLP', fontdict=axis_label_fontdict)\nsns.despine(ax=axes[2])\n\ninsight = '''\n          Patients wit SLP Value-2 \n          has higher chance compared \n          to other two categories.\n          '''\n\nfig.text(1.7, -0.45, insight, fontdict=scss.get_font_dict(fontsize=14))\n\n# ---------- Third Set of Plots --------------------------------------- \n\nfig, axes = ep.horizontal_descriptive_plot(figsize=(6, 5), plots=2)\n\nfig.text(1, -0.18, 'Insight', fontdict=scss.get_font_dict(fontsize=30, fontweight='bold'))\n\n# caa\nplot_percent_of_heart_attack_in_each_category(heart, 'caa', axes[0])\naxes[0].set_ylabel('Probability of Heart Attack (%)', fontdict=axis_label_fontdict)\naxes[0].set_xlabel('CAA', fontdict=axis_label_fontdict)\nsns.despine(ax=axes[0])\n\ninsight = '''\n          Patients with CAA '0' and '4'\n          shows very high chances of \n          having and Heart Attack.\n          While other 3 are less them 30%.\n          \n          '''\n\nfig.text(0.37, -0.53, insight, fontdict=scss.get_font_dict(fontsize=14))\n\n# thall\nplot_percent_of_heart_attack_in_each_category(heart, 'thall', axes[1])\naxes[1].set_ylabel('')\naxes[1].set_xlabel('THALL', fontdict=axis_label_fontdict)\nsns.despine(ax=axes[1])\n\ninsight = '''\n          Patient with thall 2 show \n          higher signs followed by 0.\n          While 3 has only 20% chance\n          of having an Heart Attack.\n          '''\n\nfig.text(1.43, -0.48, insight, fontdict=scss.get_font_dict(fontsize=14))\n\nplt.show()","8db0b4f0":"def scatter_plot_for_continuous_values(x_name, y_name, df, ax):\n    sns.scatterplot(x=x_name, y=y_name, alpha=0.4, data=df[df['output'] == 0], ax=ax, color='green')\n    sns.scatterplot(x=x_name, y=y_name, alpha=1, data=df[df['output'] == 1], ax=ax, color='red')\n    sns.despine(ax=ax)\n    ax.set_xlabel(x_name.upper(), fontdict=axis_label_fontdict)\n    ax.set_ylabel(y_name.upper(), fontdict=axis_label_fontdict)\n    ax.legend(['green', 'red'],labels=['0', '1'])","41b38e5f":"fig, axes = ep.horizontal_descriptive_plot(figsize=(6, 5), plots=2)\nscatter_plot_for_continuous_values('age', 'trtbps', heart, axes[1])\nscatter_plot_for_continuous_values('age', 'chol', heart, axes[0])\n\nfig.text(0.45, -0.2, 'CHOL vs AGE', fontdict=scss.get_font_dict(fontsize=20, fontweight='bold'))\nfig.text(1.45, -0.2, 'TRTBPS vs AGE', fontdict=scss.get_font_dict(fontsize=20, fontweight='bold'))\n\nfig, axes = ep.horizontal_descriptive_plot(figsize=(6, 5), plots=2)\nscatter_plot_for_continuous_values('age', 'thalachh', heart, axes[1])\nscatter_plot_for_continuous_values('age', 'oldpeak', heart, axes[0])\n\nfig.text(0.45, -0.2, 'OLDPEAK vs AGE', fontdict=scss.get_font_dict(fontsize=20, fontweight='bold'))\nfig.text(1.45, -0.2, 'THALACHH vs AGE', fontdict=scss.get_font_dict(fontsize=20, fontweight='bold'))\n\nplt.show()","8eadb138":"def distribution_plot(col, ax):\n    sns.despine(ax=ax)\n    ax.grid(color='#000000', linestyle=':', axis='y', zorder=0,  dashes=(1,5))\n    sns.kdeplot(x=col, data=heart, hue=\"output\", fill=True, palette=[\"green\",\"red\"], alpha=.5, linewidth=0, ax=ax)\n    ax.set_xlabel(col.upper(), fontdict=axis_label_fontdict)\n    ax.set_ylabel('Density', fontdict=axis_label_fontdict)\n\nfig, axes = ep.vertical_descriptive_plot(figsize=(6, 5), plots=5, plot_width=1.2)\ndistribution_plot('age', axes[0])\ndistribution_plot('trtbps', axes[1])\ndistribution_plot('chol', axes[2])\ndistribution_plot('thalachh', axes[3])\ndistribution_plot('oldpeak', axes[4])\n\nfig.text(1.52, 2.6, 'Oldpeak Distribution\\n Plot with\\n Output as Hue', \n         fontdict=scss.get_font_dict(fontsize=14, fontweight='bold'))\n\nfig.text(1.52, 2.0, 'Thalachh Distribution\\n Plot with\\n Output as Hue', \n         fontdict=scss.get_font_dict(fontsize=14, fontweight='bold'))\n\nfig.text(1.52, 1.35, 'Chol Distribution\\n Plot with\\n Output as Hue', \n         fontdict=scss.get_font_dict(fontsize=14, fontweight='bold'))\n\nfig.text(1.52, 0.75, 'Trtbps Distribution\\n Plot with\\n Output as Hue', \n         fontdict=scss.get_font_dict(fontsize=14, fontweight='bold'))\n\nfig.text(1.52, 0.2, 'Age Distribution\\n Plot with\\n Output as Hue', \n         fontdict=scss.get_font_dict(fontsize=14, fontweight='bold'))\n\nplt.show()","22c74a63":"# Spliting the Data into Train and Test\nfrom sklearn.model_selection import train_test_split\n\nX = heart.drop(columns=['output'])\ny = heart['output']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, stratify=y, random_state=40)","d5ddbeca":"from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import accuracy_score, classification_report, plot_confusion_matrix\n\nmodels_dictionary = {\n    'LogisticRegression': LogisticRegression(C=100),\n    'LinearSVC': LinearSVC(),\n    'SVC': SVC(),\n    'RandomForestClassifier': RandomForestClassifier(),\n    'KNeighborsClassifier': KNeighborsClassifier(n_neighbors=20),\n}\n\nname = []\nmodel_score = []\n\nfor k in models_dictionary.keys():\n    pipeline = make_pipeline(StandardScaler(), models_dictionary[k])\n    pipeline.fit(X_train, y_train)\n    prediction = pipeline.predict(X_test)\n    name.append(k)\n    model_score.append(round(accuracy_score(y_test, prediction) * 100, 2))\n    \nfig, ax = ep.descriptive_plot(figsize=(4, 3))\n\nsns.barplot(x=model_score, y=name, ax=ax, palette=color_palette)\nsns.despine(ax=ax)\n\nscore_text = \"\"\nfor i in range(len(name)):\n    score_text += f'{name[i]}: {model_score[i]}%\\n\\n'\n\nfig.text(0.47, 0.95, 'Model Score',fontdict=scss.get_font_dict(fontsize=20, fontweight='bold'))\nfig.text(1.4, 0.04, score_text,fontdict=scss.get_font_dict(fontsize=12))\n    \nplt.show()","a3ea6891":"# Going Forward with LinearRegression\npipeline = make_pipeline(StandardScaler(), LogisticRegression(C=100))\npipeline.fit(X_train, y_train)\nprediction = pipeline.predict(X_test)","b2fbe967":"plot_confusion_matrix(pipeline, X_test, y_test, cmap=sns.cm.mako_r)\nplt.grid(False)\nplt.show()","eebae1e7":"<a id=\"2.1\"><\/a>\n<div class=\"markdown-container\"> \n<h3>2.1 - Column Description<\/h3>\n\n<ol>\n    <li><strong>age<\/strong>: Age of the patient<\/li>\n    <li><strong>sex<\/strong>: Sex of the patient<\/li>\n    <li>\n        <strong>cp<\/strong>: Chest pain type\n            <div>Value 0: Typical Angina<\/div>\n            <div>Value 1: Atypical Angina<\/div>\n            <div>Value 2: Non-Anginal Pain<\/div>\n            <div>Value 3: Asymptomatic<\/div>\n    <\/li>\n    <li><strong>trtbps<\/strong>: Resting blood pressure (in mm Hg)<\/li>\n    <li><strong>chol<\/strong>: Cholestoral in mg\/dl fetched via BMI sensor<\/li>\n    <li><strong>fbs<\/strong>: Fasting blood sugar - 1 means > 120 mg\/dl, if not then 0<\/li>\n    <li>\n        <strong>restecg<\/strong>: Resting Electrocardiographic Results\n        <div>Value 0: Normal<\/div>\n        <div>Value 1: Having ST-T wave abnormality<\/div>\n        <div>Value 2: Showing probable or definite left ventricular hypertrophy by Estes' criteria<\/div>\n    <\/li>\n    <li><strong>thalachh<\/strong>: Maximum Heart Rate Achieved<\/li>\n    <li><strong>exng<\/strong>: Exercise induced angina (1: yes, 0: no)<\/li>\n    <li><strong>oldpeak\t<\/strong>: Exercise relative to rest(oldpeak)<\/li>\n    <li><strong>slp<\/strong>: Info not Available<\/li>\n    <li><strong>caa<\/strong>: Coronary Artery Anomaly (CAA), is a birth defect, describing abnormally shaped coronary arteries,                               leading to heart failure.<\/li>\n    <li><strong>thall<\/strong>: Thalassemia is an inherited blood disorder that causes your body to have less hemoglobin                                       than normal<\/li>\n    <li><strong>output<\/strong>: 0 - Less Chance of Heart Attack, 1 - more chance of heart attack<\/li>\n<\/ol>\n    \n<\/div>\n\n---","571abc78":"---\n<a id=\"3.3\"><\/a>\n<h3 class=\"content-header\">3.3 Distribution Plots for Columns with Continuous Values <\/h3>","b0a3d7d3":"<a id=\"4.1\"><\/a>\n<h3 class=\"content-header\">4.1 Spliting Data into Train and Test<\/h3>","1b7fcc7f":"<img src=\"https:\/\/news.harvard.edu\/wp-content\/uploads\/2020\/10\/iStockSantoelia-1200x800.jpg\" alt=\"Sorry, no image,\" style=\"height:450px;\"\/>","d0e3b920":"---\n<a id=\"1\"><\/a>\n<h3 class=\"content-header\">1. Importing the Required Libraries<\/h3>","bde0e7b8":"---\n<a id=\"3.1\"><\/a>\n<h3 class=\"content-header\">3.1 Percentage Plot for Each Categorical Column<\/h3>","eaacb8b4":"---\n<a id=\"3\"><\/a>\n<h3 class=\"content-header\">3. Exploratory Data Analysis<\/h3>\n\n<div class=\"markdown-container\"> \n<p>\n    In this section we will try to draw meaningful insights by plotting graphs to find out how different columns affect the         output. Like which column has major affect on whether a person will have a heart attack.\n\n<\/p>\n<\/div>","bb9bf90e":"---\n\n<a id=\"2.3\"><\/a>\n<h3 class=\"content-header\">2.3 - Is the Data Balanced ?<\/h3>","44946372":"---\n<a id=\"3.2\"><\/a>\n<h3 class=\"content-header\">3.2 Scatter Plots for Columns with Continuous Values <\/h3>","589cbbff":"<a id=\"5\"><\/a>\n<h3 class=\"content-header\">5. Final Note<\/h3>\n\n<div class=\"markdown-container\"> \n    <p>Thanks a lot for showing you interest. I hope you liked it. If you did, please upvote it. And if there are any mistakes in the Notebook please feel free to comment, It will help me correct myself and learn. Thanks again. <\/p>\n<\/div>\n\n---","625efce0":"---\n<a id=\"2\"><\/a>\n<h3 class=\"content-header\">2. Importing data and Initial Lookup at the Data<\/h3>","505fa8b7":"<h2 class=\"content-header\">Table of Contents<\/h2>\n\n<ul class=\"table-of-content-list\">\n    <li><a href=\"#1\">1. Importing the Required Libraries<\/a><\/li>\n    <li>\n        <a href=\"#2\">2. Importing data and Initial Lookup at the Data<\/a>\n        <ul>\n            <li><a href=\"#2.1\">2.1 Column Description<\/a><\/li>\n            <li><a href=\"#2.2\">2.2 Insights drawn by calling info() and unique() methods on the DataFrame<\/a><\/li>\n            <li><a href=\"#2.3\">2.3 Is the Data Balanced ?<\/a><\/li>\n        <\/ul>\n    <\/li>\n    <li>\n        <a href=\"#3\">3. Exploratory Data Analysis<\/a>\n        <ul>\n            <li><a href=\"#3.1\">3.1 Percentage Plot for Each Categorical Column<\/a><\/li>\n            <li><a href=\"#3.2\">3.2 Scatter Plots for Columns with Continuous Values<\/a><\/li>\n            <li><a href=\"#3.3\">3.3 Distribution Plots for Columns with Continuous Values<\/a><\/li>\n        <\/ul>\n    <\/li>\n    <li>\n        <a href=\"#4\">4. Building a Predicting Model<\/a>\n        <ul>\n            <li><a href=\"#4.1\">4.1 Spliting Data into Train and Test<\/a><\/li>\n            <li><a href=\"#4.2\">4.2 Trying out few of the Most Used Models<\/a><\/li>\n            <li><a href=\"#4.3\">4.3 Going ahead with the LogisticRegression<\/a><\/li>\n        <\/ul>\n    <\/li>\n    <li><a href=\"#5\">5. Final Note<\/a><\/li>\n<\/ul>","c1815636":"<a id=\"4.2\"><\/a>\n<h3 class=\"content-header\">4.2 Trying out few of the Most Used Models<\/h3>","c54d7fd5":"<a id=\"2.2\"><\/a>\n<div class=\"markdown-container\"> \n<h3>2.2 - Insights drawn by calling info() and unique() methods on the DataFrame<\/h3>    \n<ol>\n    <li>There are no null values in the Data.<\/li>\n    <li>This data consists of 14 Columns and 303 Rows.<\/li>\n    <li>We have total of 5 Numerical Columns: age, trtbps, chol, thalachh and oldpeak.<\/li>\n    <li>And we have total of 9 Categorical Columns: gender, cp, tbs, restecg, exng, slp, caa, thall, output.<\/li>\n    <li>Since the data completely comprises of just numerical Data, we directly dive forward to EDA without preprocessing.<\/li>\n<\/ol>\n    \nNote: The counts mentioned above might have changed if the Data was updated.\n<\/div>","aeeab750":"---\n<a id=\"4\"><\/a>\n<h3 class=\"content-header\">4. Building a Predicting Model<\/h3>","4c81b73e":"---\n<a id=\"4.3\"><\/a>\n<h3 class=\"content-header\">4.3 Going ahead with the LogisticRegression<\/h3>","4351f77f":"---\n<h1 class=\"content-header\">Heart Attack EDA and Prediction<\/h1>"}}