{"cell_type":{"97f09032":"code","1fa42206":"code","21a3b6dd":"code","1c7cb9ea":"code","8fd97ffc":"code","c5447c40":"code","dc7d0b1a":"code","7258267a":"code","2ecdb2e4":"code","9ec81c5b":"code","20238c7f":"code","65c0847a":"code","053bd8bf":"code","82183d20":"code","a825dd99":"code","87c4165c":"code","19aa595c":"code","0b06c988":"markdown","b490a411":"markdown","ba637324":"markdown","92dc61dc":"markdown","3f123755":"markdown","fbd33176":"markdown","8f918161":"markdown","76f20405":"markdown","457464f3":"markdown","b7aef0c5":"markdown"},"source":{"97f09032":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler , LabelEncoder\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import train_test_split\nfrom scipy.stats import mode\n\nimport tensorflow as tf\nfrom tensorflow.keras import layers\nfrom tensorflow.keras import callbacks\nfrom tensorflow.keras.utils import to_categorical\n\nfrom matplotlib import ticker\nimport time\nimport warnings\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('float_format', '{:f}'.format)\nwarnings.filterwarnings('ignore')","1fa42206":"train = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/test.csv')\nsubmission = pd.read_csv('..\/input\/tabular-playground-series-dec-2021\/sample_submission.csv')","21a3b6dd":"train.drop(['Id'], axis=1, inplace=True)\ntest.drop(['Id'], axis=1, inplace=True)\nTARGET = 'Cover_Type'\nFEATURES = [col for col in train.columns if col not in ['id', TARGET]]","1c7cb9ea":"train.head()","8fd97ffc":"test.head()","c5447c40":"submission.head()","dc7d0b1a":"train.iloc[:, :-1].describe().T.sort_values(by='std' , ascending = False)\\\n                     .style.background_gradient(cmap='GnBu')\\\n                     .bar(subset=[\"max\"], color='#BB0000')\\\n                     .bar(subset=[\"mean\",], color='green')","7258267a":"test.iloc[:, :-1].describe().T.sort_values(by='std' , ascending = False)\\\n                     .style.background_gradient(cmap='GnBu')\\\n                     .bar(subset=[\"max\"], color='#BB0000')\\\n                     .bar(subset=[\"mean\",], color='green')","2ecdb2e4":"df = pd.concat([train[FEATURES], test[FEATURES]], axis=0)\n\ncat_features = [col for col in FEATURES if df[col].nunique() < 25]\ncont_features = [col for col in FEATURES if df[col].nunique() >= 25]\n\ndel df\n\nprint(f'Total number of features: {len(FEATURES)}')\nprint(f'Number of categorical features: {len(cat_features)}')\nprint(f'Number of continuos features: {len(cont_features)}')\n\nplt.pie([len(cat_features), len(cont_features)], \n        labels=['Categorical', 'Continuos'],\n        colors=['#76D7C4', '#F5B7B1'],\n        textprops={'fontsize': 13},\n        autopct='%1.1f%%')\nplt.show()","9ec81c5b":"ncols = 5\nnrows = int(len(cont_features) \/ ncols + (len(FEATURES) % ncols > 0))-1\n\nfig, axes = plt.subplots(nrows, ncols, figsize=(18, 8), facecolor='#EAEAF2')\n\nfor r in range(nrows):\n    for c in range(ncols):\n        col = cont_features[r*ncols+c]\n        sns.kdeplot(x=train[col], ax=axes[r, c], color='#58D68D', label='Train data')\n        sns.kdeplot(x=test[col], ax=axes[r, c], color='#DE3163', label='Test data')\n        axes[r, c].set_ylabel('')\n        axes[r, c].set_xlabel(col, fontsize=8, fontweight='bold')\n        axes[r, c].tick_params(labelsize=5, width=0.5)\n        axes[r, c].xaxis.offsetText.set_fontsize(4)\n        axes[r, c].yaxis.offsetText.set_fontsize(4)\nplt.show()","20238c7f":"if len(cat_features) == 0 :\n    print(\"No Categorical features\")\nelse:\n    ncols = 5\n    nrows = int(len(cat_features) \/ ncols + (len(FEATURES) % ncols > 0)) \n\n    fig, axes = plt.subplots(nrows, ncols, figsize=(18, 45), facecolor='#EAEAF2')\n\n    for r in range(nrows):\n        for c in range(ncols):\n            if r*ncols+c >= len(cat_features):\n                break\n            col = cat_features[r*ncols+c]\n            sns.countplot(x=train[col], ax=axes[r, c], color='#58D68D', label='Train data')\n            sns.countplot(x=test[col], ax=axes[r, c], color='#DE3163', label='Test data')\n            axes[r, c].set_ylabel('')\n            axes[r, c].set_xlabel(col, fontsize=8, fontweight='bold')\n            axes[r, c].tick_params(labelsize=5, width=0.5)\n            axes[r, c].xaxis.offsetText.set_fontsize(4)\n            axes[r, c].yaxis.offsetText.set_fontsize(4)\n    plt.show()","65c0847a":"target_df = pd.DataFrame(train[TARGET].value_counts()).reset_index()\ntarget_df.columns = [TARGET, 'count']\nfig = px.bar(data_frame =target_df, \n             x = 'Cover_Type',\n             y = 'count' , \n             color = \"count\",\n             color_continuous_scale=\"Emrld\") \nfig.show()\ntarget_df.sort_values(by =TARGET , ignore_index = True)","053bd8bf":"# Removing Unwanted Rows and Columns\ntrain = train.drop(index = int(np.where(train[\"Cover_Type\"] == 5 )[0]))\ntrain = train.drop(labels = [\"Soil_Type7\" , \"Soil_Type15\"] ,axis = 1)\nFEATURES.remove('Soil_Type7')\nFEATURES.remove('Soil_Type15')","82183d20":"train[\"mean\"] = train[FEATURES].mean(axis=1)\ntrain[\"std\"] = train[FEATURES].std(axis=1)\ntrain[\"min\"] = train[FEATURES].min(axis=1)\ntrain[\"max\"] = train[FEATURES].max(axis=1)\n\ntest[\"mean\"] = test[FEATURES].mean(axis=1)\ntest[\"std\"] = test[FEATURES].std(axis=1)\ntest[\"min\"] = test[FEATURES].min(axis=1)\ntest[\"max\"] = test[FEATURES].max(axis=1)\n\nFEATURES.extend(['mean', 'std', 'min', 'max'])","a825dd99":"scaler = StandardScaler()\nfor col in FEATURES:\n    train[col] = scaler.fit_transform(train[col].to_numpy().reshape(-1,1))\n    test[col] = scaler.transform(test[col].to_numpy().reshape(-1,1))\n    \nX = train[FEATURES].to_numpy().astype(np.float32)\ny = train[TARGET].to_numpy().astype(np.float32)\nX_test = test[FEATURES].to_numpy().astype(np.float32)\n\ndel train, test","87c4165c":"LEARNING_RATE = 0.0001\nBATCH_SIZE = 2048\nEPOCHS = 100\nVALIDATION_RATIO = 0.05\nRANDOM_STATE = 97\n\nLE = LabelEncoder()\ny = to_categorical(LE.fit_transform(y))\nX_train , X_valid ,y_train ,y_valid  = train_test_split(X,y , test_size = VALIDATION_RATIO , random_state=RANDOM_STATE)\n\n\ndef load_model(): \n    model = tf.keras.Sequential([\n        tf.keras.layers.Dense(2048, activation = 'relu', input_shape = [X.shape[1]]),\n        tf.keras.layers.Dense(1024, activation ='relu'),\n        tf.keras.layers.Dense(512, activation ='relu'),\n        tf.keras.layers.Dense(6, activation='softmax'),\n    ])\n    model.compile(\n        optimizer= tf.keras.optimizers.Adam(learning_rate = LEARNING_RATE),\n        loss='categorical_crossentropy',\n        metrics=['acc'],\n    )\n    return model\n    \n    \nearly_stopping = callbacks.EarlyStopping(\n        patience=10,\n        min_delta=0,\n        monitor='val_loss',\n        restore_best_weights=True,\n        verbose=0,\n        mode='min', \n        baseline=None,\n    )\nplateau = callbacks.ReduceLROnPlateau(\n            monitor='val_loss', \n            factor=0.2, \n            patience=4, \n            verbose=0,\n            mode='min')\n\nnn_model = load_model()\nhistory = nn_model.fit(  X_train , y_train,\n                validation_data = (X_valid , y_valid),\n                batch_size = BATCH_SIZE, \n                epochs = EPOCHS,\n                callbacks = [early_stopping , plateau],\n              )\nnn_preds = nn_model.predict(X_test , batch_size=BATCH_SIZE)","19aa595c":"nn_submission = submission.copy()\nnn_submission[\"Cover_Type\"] = LE.inverse_transform(np.argmax((nn_preds), axis=1)).astype(int)\nnn_submission.to_csv(\"nn-sub.csv\" , index= False)\nnn_submission.head()","0b06c988":"### Continuous and Categorical Data Distribution","b490a411":"### Feature Distribution of Categorical Features","ba637324":"## Feature Engineering","92dc61dc":"### Basic statistics of data","3f123755":"## Modeling","fbd33176":"There are total 7 different output classes","8f918161":"## EDA","76f20405":"### Feature Distribution of Continuous Features","457464f3":"Soil_Type7 and Soil_Type15 are all zero values","b7aef0c5":"### Target Distribution"}}