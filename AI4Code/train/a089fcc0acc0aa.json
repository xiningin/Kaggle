{"cell_type":{"f5450507":"code","7f79da22":"code","3b31ebb0":"code","7e55dceb":"code","1a211a90":"code","8188be44":"code","3e6bfc58":"code","d020dad6":"code","20817e2f":"code","cdebaf89":"code","ed130227":"code","b63ed1d7":"code","b13ca74a":"code","c1e1f0c8":"code","5da87414":"code","9119acb0":"code","a1fe12a7":"code","adb70dc0":"code","58770923":"code","17959aa0":"code","28be6e41":"code","5302d2dd":"code","f7a83363":"code","aab4c5b6":"code","654d1705":"code","840e4aa9":"code","045783fe":"code","15c7f659":"code","34761ddf":"code","682f474f":"code","45610dcb":"code","93f07dd0":"code","73db4300":"code","d43964b4":"code","099bcaef":"code","ca412878":"code","2bef974a":"markdown","bd5eb7c2":"markdown","316f2139":"markdown","12888969":"markdown","d7b3c2ab":"markdown"},"source":{"f5450507":"import numpy as np\nimport tensorflow as tf\nimport tensorflow.keras as keras\nimport matplotlib.pyplot as plt","7f79da22":"time = np.arange(365*4 + 1, dtype=\"float32\")","3b31ebb0":"time","7e55dceb":"def trend(time, slope=0):\n    return slope * time\n\ndef seasonal_pattern(season_time):\n    \"\"\"Just an arbitrary pattern, you can change it if you wish\"\"\"\n    return np.where(season_time < 0.4,\n                    np.cos(season_time * 2 * np.pi),\n                    1 \/ np.exp(3 * season_time))\n\ndef seasonality(time, period, amplitude=1, phase=0):\n    \"\"\"Repeats the same pattern at each period\"\"\"\n    season_time = ((time + phase) % period) \/ period\n    return amplitude * seasonal_pattern(season_time)\n\ndef noise(time, noise_level=1, seed=None):\n    rnd = np.random.RandomState(seed)\n    return rnd.randn(len(time)) * noise_level\n    \nbaseline = 10\nslope = 0.09\namplitude = 20\nnoise_level = 5","1a211a90":"series = baseline + trend(time=time, slope=slope) + seasonality(time=time, period=365, amplitude=amplitude)\nseries += noise(time=series, noise_level=noise_level)","8188be44":"# take a look on dataset(time series data)\nplt.figure(figsize=(10, 10))\nplt.title(\"Series Value at each Time\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Value\")\nplt.plot(time, series)","3e6bfc58":"# split dataset(time and series) into train and validation\ntime_train = time[:1000]\nseries_train = series[:1000]\n\ntime_validation = time[1000:]\nseries_validation = series[1000:]","d020dad6":"# take a look on time series data for training\nplt.figure(figsize=(10, 10))\nplt.title(\"Series Value at each Time\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Value\")\nplt.plot(time_train, series_train)","20817e2f":"# take a look on time series data for validation\nplt.figure(figsize=(10, 10))\nplt.title(\"Series Value at each Time\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Value\")\nplt.plot(time_validation, series_validation)","cdebaf89":"# create SliceDataset\ndataset = tf.data.Dataset.from_tensor_slices(series_train)\ndataset","ed130227":"# iterate\nfor value in dataset:\n    print(value)","b63ed1d7":"# create WindowDataset\ndataset = dataset.window(size=21, shift=1, drop_remainder=True)\ndataset","b13ca74a":"# iterate\nfor window in dataset:\n    print(window)","c1e1f0c8":"# iterate again\nfor window in dataset:\n    for value in window:\n        print(value)\n    print()","5da87414":"# create MapDataset\ndataset = dataset.map(lambda window: window.batch(21))\ndataset","9119acb0":"# iterate\nfor batch in dataset:\n    print(batch)","a1fe12a7":"# iterate again\nfor batch in dataset:\n    for value in batch:\n        print(value)\n    print()","adb70dc0":"# create FlatMapDataset\ndataset = dataset.flat_map(lambda batch: batch)\ndataset","58770923":"# iterate\nfor batch in dataset:\n    print(batch)\n    print()","17959aa0":"# create ShuffleDataset\ndataset = dataset.shuffle(1000)\ndataset","28be6e41":"# iterate\nfor batch in dataset:\n    print(batch)\n    print()","5302d2dd":"# create MapDataset\ndataset = dataset.map(lambda batch: (batch[:-1], batch[-1]))\ndataset","f7a83363":"# iterate\nfor batch in dataset:\n    print(batch)\n    print()","aab4c5b6":"# create BatchDataset\ndataset = dataset.batch(32)\ndataset","654d1705":"# iterate\nfor batch_ in dataset:\n    print(batch_)\n    print()","840e4aa9":"# create Prefatch Dataset\ndataset = dataset.prefetch(1)\ndataset","045783fe":"model = keras.Sequential()","15c7f659":"model.add(keras.layers.Dense(units=20, activation=\"relu\", input_shape=(20, )))\nmodel.add(keras.layers.Dense(units=10, activation=\"relu\"))\nmodel.add(keras.layers.Dense(units=1, activation=\"linear\"))","34761ddf":"model.summary()","682f474f":"model.compile(loss='mean_squared_error', optimizer=keras.optimizers.Adam(learning_rate=0.0001))","45610dcb":"model.fit(dataset,\n          epochs=200)","93f07dd0":"predicted_value = []","73db4300":"for i in range(len(series) - 20):\n    x = series[i:i+20]\n    x = np.reshape(x, (1, -1))\n    y = model.predict(x)[0][0]\n    predicted_value.append(y)","d43964b4":"predicted_value_ = list(range(20)) + predicted_value\npredicted_value_ = predicted_value_[1000:]","099bcaef":"# compare predicted_value with series_validation\nplt.figure(figsize=(12, 12))\nplt.title(\"Compare Predicted Value with Validation Value\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Value\")\nplt.plot(time_validation, series_validation, color=\"blue\", label=\"Validation\")\nplt.plot(time_validation, predicted_value_, color=\"red\", label=\"Predicted\")\nplt.legend()","ca412878":"keras.metrics.mean_squared_error(y_true=series_validation, y_pred=predicted_value_)","2bef974a":"## Define Model","bd5eb7c2":"## Prediction","316f2139":"\n## Import Package","12888969":"## Build Input Pipeline","d7b3c2ab":"## Prepare Dataset"}}