{"cell_type":{"2f9bfb45":"code","4c2d8854":"code","1a8965bd":"code","90ae98a8":"code","809c3a7f":"code","8643f5d2":"code","bf587778":"code","94eb2775":"code","4fc031fb":"code","4ec7e227":"code","27a89fb2":"code","5d0ddb20":"code","d5d4df6c":"code","aee60d79":"code","5d1c3a20":"code","d62874f0":"code","1d01da22":"code","15c2c4a7":"code","9c336497":"code","f7540612":"code","1dbd95a5":"code","11521950":"code","c8f73326":"code","dd6740b1":"code","2397bad9":"code","be02caca":"code","05ad2103":"code","a4722f46":"code","f472223b":"code","da68d920":"code","c88ef8b0":"markdown","b37bcc84":"markdown","c8caf3d3":"markdown","409fb08d":"markdown","fd3863f6":"markdown","800ba4ec":"markdown","fc2fb5e6":"markdown","6db23fa0":"markdown","17467f8e":"markdown","a202694b":"markdown","42a82aab":"markdown","00095f96":"markdown","9ad3d63e":"markdown","15b4c9ea":"markdown","8d4da9a6":"markdown","c14c9d7d":"markdown","94e17f82":"markdown","48838368":"markdown","ae41c743":"markdown","e26596ca":"markdown","84dfc0ad":"markdown","d9a2dbb1":"markdown","b3a7d51b":"markdown","c024f826":"markdown","59761386":"markdown","0901ecb1":"markdown","7251a91a":"markdown","8b12eaa2":"markdown","6a35c79d":"markdown","0c800824":"markdown","3036c278":"markdown","c782f7c1":"markdown","17955021":"markdown"},"source":{"2f9bfb45":"# Ignore  the warnings\nimport warnings\nwarnings.filterwarnings('always')\nwarnings.filterwarnings('ignore')\n\n# data visualisation and manipulation\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\n\n#configure\n# sets matplotlib to inline and displays graphs below the corressponding cell.\n%matplotlib inline  \n\n#scikit-learn.\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder ","4c2d8854":"train=pd.read_csv(r'..\/input\/Iris.csv')","1a8965bd":"df=train.copy()","90ae98a8":"df.head(10)","809c3a7f":"df.shape","8643f5d2":"df.columns # names of all coumns.","bf587778":"df.drop(['Id'],axis=1,inplace=True)","94eb2775":"df.index # indices of rows.","4fc031fb":"df.isnull().any()","4ec7e227":"msno.matrix(df) # just one final time to visualize.","27a89fb2":"for col in df.columns:\n    print(\"Number of values in column \" ,col,\" : \",df[col].count())","5d0ddb20":"df.describe()","d5d4df6c":"def plot(feature):\n    fig,axes=plt.subplots(1,2)\n    sns.boxplot(data=df,x=feature,ax=axes[0])\n    sns.distplot(a=df[feature],ax=axes[1],color='#ff4125')\n    fig.set_size_inches(15,5)","aee60d79":"plot('SepalLengthCm')","5d1c3a20":"plot('SepalWidthCm')","d62874f0":"plot('PetalLengthCm')","1d01da22":"plot('PetalWidthCm')","15c2c4a7":"sns.factorplot(data=df,x='Species',kind='count')","9c336497":"g = sns.PairGrid(df[['SepalLengthCm', 'SepalWidthCm', 'PetalLengthCm', 'PetalWidthCm',\n       'Species']], hue = \"Species\")\ng = g.map(plt.scatter).add_legend()","f7540612":"le=LabelEncoder()\ndf['Species']=le.fit_transform(df['Species'])","1dbd95a5":"scaler=StandardScaler()\nscaled_df=scaler.fit_transform(df.drop('Species',axis=1))\nX=scaled_df\nY=df['Species'].as_matrix()","11521950":"df.head(10)","c8f73326":"x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.20,random_state=42)","dd6740b1":"clf_lr=LogisticRegression(C=10)\nclf_lr.fit(x_train,y_train)\npred=clf_lr.predict(x_test)\nprint(accuracy_score(pred,y_test))","2397bad9":"clf_knn=KNeighborsClassifier()\nclf_knn.fit(x_train,y_train)\npred=clf_knn.predict(x_test)\nprint(accuracy_score(pred,y_test))","be02caca":"clf_svm_lin=LinearSVC()\nclf_svm_lin.fit(x_train,y_train)\npred=clf_svm_lin.predict(x_test)\nprint(accuracy_score(pred,y_test))","05ad2103":"clf_svm=SVC()\nclf_svm.fit(x_train,y_train)\npred=clf_svm.predict(x_test)\nprint(accuracy_score(pred,y_test))","a4722f46":"models=[LogisticRegression(),LinearSVC(),SVC(),KNeighborsClassifier()]\nmodel_names=['LogisticRegression','LinearSVM','rbfSVM','KNearestNeighbors']\n\nacc=[]\nd={}\n\nfor model in range(len(models)):\n    clf=models[model]\n    clf.fit(x_train,y_train)\n    pred=clf.predict(x_test)\n    acc.append(accuracy_score(pred,y_test))\n     \nd={'Modelling Algo':model_names,'Accuracy':acc}","f472223b":"acc_frame=pd.DataFrame(d)\nacc_frame","da68d920":"sns.factorplot(data=acc_frame,y='Modelling Algo',x='Accuracy',kind='bar',size=5,aspect=1.5)","c88ef8b0":"#### kNN","b37bcc84":"This shows that there aren't any 'Nan' values in any column.","c8caf3d3":"**VISULAIZING THE FEATURES AGAINST EACH OTHER (by a scatter plot)'**","409fb08d":" [ **5 ) Modelling**](#content5)","fd3863f6":"<a id=\"content6\"><\/a>\n## 6 ) COMPARING DIFFERENT ALGORITHMS","800ba4ec":"Normalizing the features give better performance. Hence I have normalized all the features by scaling them to 0 mean and a unit standard deviation.","fc2fb5e6":"#### SVM (with 'rbf' kernel)","6db23fa0":" [ **6 ) Comparing Different Algortihms**](#content6)","17467f8e":"<a id=\"content2\"><\/a>\n## 2 ) Loading the Dataset","a202694b":"####  VISUALIZING THE DISTRIBUTIION OF FEATURES.","42a82aab":" [ **2 ) Loading the Dataset**](#content2)","00095f96":"#### Linear Support Vector Machine(SVM)","9ad3d63e":"<a id=\"content5\"><\/a>\n## 5 ) MODELLING","15b4c9ea":"#### LABEL ENCODING THE TARGET","8d4da9a6":"## CONTENTS::","c14c9d7d":"#### Now we can check if any column has any null or 'Nan' values or not.","94e17f82":" [ **3 )Exploring the Dataset**](#content3)","48838368":" [ **4 ) Preparing the Data**](#content4)","ae41c743":"Since the algorithms accept only numeric values we will encode the 'Species' column using the Labelencoder() from scikit learn.","e26596ca":"#### NORMALIZING FEATURES ","84dfc0ad":"## Please star\/ upvote if you find it helpful.","d9a2dbb1":"<a id=\"content1\"><\/a>\n## 1 ) Importing Various Modules","b3a7d51b":"[ **1 ) Importing Various Modules**](#content1)","c024f826":"<a id=\"content4\"><\/a>\n## 4 ) Preparing the Data","59761386":"The dataset has 150 rows and 5 columns out of which the 'Species' is our target variable which we want to predict. ","0901ecb1":"##  THE END !!!","7251a91a":"<a id=\"content3\"><\/a>\n## 3 ) Exploring the Dataset","8b12eaa2":"## Iris Species Dataset                                                                                                                       ","6a35c79d":"This shows the different statistical quantities like mean, median etc.. of all the numeric columns in the data frame.","0c800824":"## Please star\/upvote if you liked it.","3036c278":"#### SPLITTING INTO TRAINING & VALIDATION SETS.","c782f7c1":"Since the data frame is already indexed we will drop the 'Id' column.","17955021":"#### LOGISTIC REGRESSION"}}