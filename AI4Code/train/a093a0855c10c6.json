{"cell_type":{"9bb9b920":"code","760ee490":"code","f8219519":"code","4594ec16":"code","0fa03f5c":"code","e520ea24":"code","728eeedc":"code","6a20736c":"code","812b8d89":"code","fe9d3590":"code","de97db3c":"code","1a01a539":"code","718159ad":"code","694f7c24":"code","046665ad":"markdown"},"source":{"9bb9b920":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","760ee490":"#import libraries\nimport pandas as pd\nimport csv\nimport os\nfrom keras.preprocessing.text import text_to_word_sequence\nimport pandas as pd\nimport tensorflow as tf\nfrom keras.preprocessing.text import Tokenizer\nimport numpy as np\nfrom keras.preprocessing import sequence\nfrom io import StringIO\nimport nltk \nfrom nltk.corpus import stopwords\nimport re\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import WordNetLemmatizer,PorterStemmer\nimport matplotlib.pyplot as plt\n\nfrom sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer \nfrom sklearn.model_selection import train_test_split\n\nfrom keras.preprocessing import sequence\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Activation\nfrom keras.layers import Embedding\nfrom keras.layers import Conv1D, GlobalMaxPooling1D,MaxPooling1D, Bidirectional,LSTM, SpatialDropout1D\n!pip install keras-lookahead\nfrom keras_lookahead import Lookahead\n\nnltk.download('stopwords')\nnltk.download('punkt')\nnltk.download('wordnet')","f8219519":"#Load the dataset\nreview_data = pd.read_csv('..\/input\/trip-advisor-hotel-reviews\/tripadvisor_hotel_reviews.csv')\nprint(review_data.shape)\nreview_data.head()","4594ec16":"#remove the nulls\nreview_data['Review'].replace(' ', np.nan, inplace=True)\nprint(review_data['Review'].isnull().sum())\nreview_data['Rating'].replace(' ', np.nan, inplace=True)\nprint(review_data['Rating'].isnull().sum())","0fa03f5c":"review_data.info()","e520ea24":"REPLACE_BY_SPACE_RE = re.compile('[\/(){}\\[\\]\\|@,;]')\nBAD_SYMBOLS_RE = re.compile('[^0-9a-z #+_]')\nSTOPWORDS = set(stopwords.words('english'))\n\ndef clean_text(text):\n    text = text.lower() # lowercase text\n    text = REPLACE_BY_SPACE_RE.sub(' ', text) # replace REPLACE_BY_SPACE_RE symbols by space in text. substitute the matched string in REPLACE_BY_SPACE_RE with space.\n    text = BAD_SYMBOLS_RE.sub('', text) # remove symbols which are in BAD_SYMBOLS_RE from text. substitute the matched string in BAD_SYMBOLS_RE with nothing. \n    text = text.replace('x', '')\n    text = ' '.join(word for word in text.split() if word not in STOPWORDS) \n    return text\n\nreview_data['Review'] = review_data['Review'].apply(clean_text)\n\ndef getLemmText(text):\n tokens=word_tokenize(text)\n lemmatizer = WordNetLemmatizer()\n tokens=[lemmatizer.lemmatize(word) for word in tokens]\n return ' '.join(tokens)\nreview_data['Review'] = review_data['Review'].apply(getLemmText)\n\n\ndef getStemmText(text):\n    tokens=word_tokenize(text)\n    ps = PorterStemmer()\n    tokens=[ps.stem(word) for word in tokens]\n    return ' '.join(tokens)\nreview_data['Review'] = review_data['Review'].apply(getStemmText)","728eeedc":"review_data.Review[10]","6a20736c":"review_data['Rating'].unique()\n#5 categories of rating","812b8d89":"#Tokenize the words, remove the symblos\n#Convert the words to integers ising 'text to sequence'\ntk = Tokenizer(num_words= 50000, filters = '!\"#$%&()*+,-.\/:;<=>?@[\\\\]^_`{|}~\\t\\n',lower=True, split=\" \",)\ntk.fit_on_texts(review_data['Review'])\nx = tk.texts_to_sequences(review_data['Review'])","fe9d3590":"#Encoding the integers using pad sequence \n#Adjust the number of words using maxlen based on word frequency \nX = sequence.pad_sequences(x, maxlen=200)","de97db3c":"#Y = review_data['Rating'].values\nY = pd.get_dummies(review_data.Rating)","1a01a539":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.10)\nprint(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","718159ad":"max_features = 50000\nfilters = 250\nhidden_dims = 250\nkernel_size = 2\ndropout = 0.2\n\n#Let us try using the Lookahead optimiser with Adam as the inner optimiser\nopt = tf.keras.optimizers.Adam(lr=0.001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=1e-6, amsgrad=False)\nlk = Lookahead(opt, sync_period=5, slow_step=0.5, name = 'Lookahead')\n\nmodel = Sequential()\nmodel.add(Embedding(max_features,200,input_length=X_train.shape[1]))\nmodel.add(SpatialDropout1D(0.3))\nmodel.add(Conv1D(128,2, strides=1, padding='valid'))\nmodel.add(MaxPooling1D(2,2))\nmodel.add(Conv1D(256,2, strides=1, padding='valid'))\nmodel.add(MaxPooling1D(2,2))\nmodel.add(Bidirectional(LSTM(100, dropout=dropout, recurrent_dropout = dropout)))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(hidden_dims))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(5))\nmodel.add(Activation('softmax'))\n\nmodel.compile(loss='categorical_crossentropy',\n              optimizer=lk.optimizer,\n              metrics=['accuracy'])\nmodel.summary()\nhistory = model.fit(X_train,Y_train,\n          batch_size=32,\n          epochs=10,validation_data = (X_test, Y_test)\n          )","694f7c24":"# Accuracy\nplt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label = 'val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()\n\n# Loss\nplt.plot(history.history['loss'], label = 'loss')\nplt.plot(history.history['val_loss'], label = 'val_loss')\nplt.title('loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()\n\n#The model overfits, a possible reason could be the size of the dataset which is fairly small","046665ad":"Text preprocessing"}}