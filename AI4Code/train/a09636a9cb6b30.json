{"cell_type":{"3f8bc66e":"code","fcffc5a8":"code","b395694a":"code","a9441e34":"code","80ef152b":"code","aa028ddc":"code","844e2537":"code","7b37fa85":"code","03392ac8":"code","0ad68005":"code","3afeb9a9":"code","9a550b63":"markdown","b020854d":"markdown","e34cabdc":"markdown","a267c97c":"markdown","08edd35f":"markdown","8d641624":"markdown","7f1c5cf2":"markdown","471ae998":"markdown","10c68898":"markdown","553e010c":"markdown","6bc5403a":"markdown","a099d66c":"markdown","f7ea9bd1":"markdown","1cf9bae4":"markdown"},"source":{"3f8bc66e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","fcffc5a8":"runs_2008 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2008_Most_Runs.csv\")\nruns_2009 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2009_Most_Runs.csv\")\nruns_2010 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2010_Most_Runs.csv\")\nruns_2011 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2011_Most_Runs.csv\")\nruns_2012 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2012_Most_Runs.csv\")\nruns_2013 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2013_Most_Runs.csv\")\nruns_2014 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2014_Most_Runs.csv\")\nruns_2015 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2015_Most_Runs.csv\")\nruns_2016 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2016_Most_Runs.csv\")\nruns_2017 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2017_Most_Runs.csv\")\nruns_2018 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2018_Most_Runs.csv\")\nruns_2019 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2019_Most_Runs.csv\")\nruns_2020 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2020_Most_Runs.csv\")\nruns_2021 = pd.read_csv(\"..\/input\/d\/sudeepdesai\/ipl-2008-2020-player-stats\/MOST RUNS\/IPL_2021_Most_Runs.csv\")","b395694a":"# Adding a Year column to each df\nruns_2008[\"Year\"] = 2008\nruns_2009[\"Year\"] = 2009\nruns_2010[\"Year\"] = 2010\nruns_2011[\"Year\"] = 2011\nruns_2012[\"Year\"] = 2012\nruns_2013[\"Year\"] = 2013\nruns_2014[\"Year\"] = 2014\nruns_2015[\"Year\"] = 2015\nruns_2016[\"Year\"] = 2016\nruns_2017[\"Year\"] = 2017\nruns_2018[\"Year\"] = 2018\nruns_2019[\"Year\"] = 2019\nruns_2020[\"Year\"] = 2020\nruns_2021[\"Year\"] = 2021\n\nruns_2008.head()","a9441e34":"# Enter the player names whose stats you want to compare and analyse!\nplayer_name = \"Virat Kohli\" \nplayer2_name = \"Rohit Sharma\"\n\n# Combine all dataframes into a single dataframe\ndataframe_list = [runs_2008,runs_2009,runs_2010,runs_2011,runs_2012,runs_2013,runs_2014,runs_2015,runs_2016,runs_2017,runs_2018,runs_2019,runs_2020,runs_2021]\ncombined_runs = pd.concat(dataframe_list).reset_index(drop = True) \n\n# Check for duplicate values\ncombined_runs.duplicated().sum() # No of duplicated values\ncombined_runs.loc[combined_runs.duplicated(subset = ['PLAYER','Mat','Inns','Year'], keep = \"first\")] # To find duplicates\ncombined_runs = combined_runs.drop_duplicates(subset = ['PLAYER','Mat','Inns','Year'], keep = \"first\") # Drop duplicate rows\n\n# Number of NaN values in each column\ncombined_runs.isnull().sum()\n\n# Adding a column for boundary %age\ncombined_runs['Boundary_Percent'] = (combined_runs['4s'] * 4 + combined_runs['6s'] * 6) \/ combined_runs['Runs']\n\n# Convert Avg column from object to float\n# combined_runs.Avg = combined_runs.Avg.astype(\"float\") ----> Doubt (Shows cant' covert string to float)\n\n# Separate player name database\nplayer_runs = combined_runs.loc[combined_runs.PLAYER == player_name].reset_index(drop = True) \nplayer_runs.Avg = player_runs.Avg.astype(\"float\") # Convert Avg column from object to float\n\n# Separate player2 name database\nplayer2_runs = combined_runs.loc[combined_runs.PLAYER == player2_name].reset_index(drop = True)\nplayer2_runs.Avg = player2_runs.Avg.astype(\"float\") # Convert Avg column from object to float","80ef152b":"avg_rank = combined_runs.groupby(['PLAYER']).POS.mean().sort_values().reset_index(name = \"Avg_Rankings\")\ntotal_matches = combined_runs.groupby(['PLAYER']).Mat.sum().sort_values(ascending = False).reset_index(name = \"Total_Matches\")\ntotal_years = combined_runs.groupby(['PLAYER']).Year.count().sort_values(ascending = False).reset_index(name = \"Total_Years\")\navg_rank_final = avg_rank.merge(total_years)\navg_rank_final[:15]","aa028ddc":"avg_rank_final[\"Ratio\"] = avg_rank_final.Total_Years\/avg_rank_final.Avg_Rankings\navg_rank_final = avg_rank_final.sort_values(by = \"Ratio\", ascending = False).reset_index(drop = True)\navg_rank_final[:20]","844e2537":"avg_boundary_per = combined_runs.groupby(['PLAYER']).Boundary_Percent.mean().sort_values(ascending = False).reset_index(name = \"Avg_Boundary_Percent\")\navg_strike_rate = combined_runs.groupby(['PLAYER']).SR.mean().sort_values(ascending = False).reset_index(name = \"Avg_Strike_Rate\")\navg_SR_boundary_per = total_matches.merge(avg_boundary_per).merge(avg_strike_rate)\navg_boundary_per_final = avg_SR_boundary_per.loc[avg_SR_boundary_per.Total_Matches > 50].sort_values(by = \"Avg_Boundary_Percent\", ascending = False).reset_index(drop = True)\navg_boundary_per_final[:20]","7b37fa85":"avg_boundary_per_final.loc[avg_boundary_per_final.PLAYER.isin([player_name,player2_name])]","03392ac8":"player_runs.head()","0ad68005":"player2_runs.head()","3afeb9a9":"# player_runs.index.is_unique\ndesired_stat = \"Avg\" # Edit this parameter to get the desired stat\n\n### Used to configure labels on lineplot\n# for x, y in zip(player_runs['Year'], player_runs[desired_stat]):\n#  # the position of the data label relative to the data point can be adjusted by adding\/subtracting a value from the x &\/ y coordinates\n#  plt.text(x = x, # x-coordinate position of data label\n#  y = y-70, # y-coordinate position of data label, adjusted to be 150 below the data point\n#  s = y, transform=ax.transAxes)# data label, formatted to ignore decimals\n\nsns.set_style(\"whitegrid\") # Sets seaborn style\n\nfig,axes = plt.subplots(2,2, figsize = (16,12), sharex = False) # Creating subplots for 2 rows and 2 columns\n# axes[1,1].axis('off') # Hide the last subplot axis\nfig.suptitle(f\"{player_name} vs {player2_name}\") #Title of both subplots\n\n# For Player 1\nsns.lineplot(x = 'Year', y = desired_stat, data = player_runs, label = \"Runs scored\", marker = \"*\", ax = axes[0,0])\nsns.lineplot(x = 'Year', y = player_runs[desired_stat].mean(), data = player_runs, label = f\"Average {desired_stat} per season\", marker = \"*\", ax = axes[0,0])\n\naxes[0,0].set_title(f\"{player_name}'s {desired_stat} in IPL from {player_runs.Year[0]} to {player_runs.Year[len(player_runs)-1]}\")\nplt.xlim(min(player_runs['Year']), max(player_runs['Year'])) #set X-axis limits\nplt.ylim(0, max(player_runs[desired_stat])) #set Y-axis limits\n\n# For Player 2\nsns.lineplot(x = 'Year', y = desired_stat, data = player2_runs, label = \"Runs scored\", marker = \"*\", color = \"purple\", ax = axes[0,1])\nsns.lineplot(x = 'Year', y = player2_runs[desired_stat].mean(), data = player2_runs, label = f\"Average {desired_stat} per season\", marker = \"*\", ax = axes[0,1])\n\naxes[0,1].set_title(f\"{player2_name}'s {desired_stat} in IPL from {player2_runs.Year[0]} to {player2_runs.Year[len(player2_runs)-1]}\")\nplt.xlim(min(player2_runs['Year']), max(player_runs['Year'])) #set X-axis limits\nplt.ylim(0, max(player2_runs[desired_stat])) #set Y-axis limits\n\n# Player 1 vs Player 2 Runs\nsns.lineplot(x = 'Year', y = 'Runs', data = player_runs, label = f\"Runs scored - {player_name}\", marker = \"*\", ax = axes[1,0])\nsns.lineplot(x = 'Year', y = player_runs['Runs'].mean(), data = player_runs, label = f\"Average runs per season - {player_name}\", marker = \"*\", ax = axes[1,0])\nsns.lineplot(x = 'Year', y = 'Runs', data = player2_runs, label = f\"Runs scored - {player2_name}\", marker = \"*\", color = \"purple\", ax = axes[1,0])\nsns.lineplot(x = 'Year', y = player2_runs['Runs'].mean(), data = player2_runs, label = f\"Average runs per season - {player2_name}\", marker = \"*\", ax = axes[1,0])\n\naxes[1,0].set_title(f\"{player_name} vs {player2_name} Runs in IPL from {player_runs.Year[0]} to {player_runs.Year[len(player_runs)-1]}\")\nplt.xlim(min(combined_runs['Year']), max(combined_runs['Year'])) #set X-axis limits\nplt.ylim(0, max(combined_runs['Runs'])) #set Y-axis limits\n\n# Player 1 vs Player 2 Matches\nsns.lineplot(x = 'Year', y = 'Mat', data = player_runs, label = f\"Matches Played - {player_name}\", marker = \"*\", ax = axes[1,1])\nsns.lineplot(x = 'Year', y = player_runs['Mat'].mean(), data = player_runs, label = f\"Average matches per season - {player_name}\", marker = \"*\", ax = axes[1,1])\nsns.lineplot(x = 'Year', y = 'Mat', data = player2_runs, label = f\"Matches Played - {player2_name}\", marker = \"*\", color = \"purple\", ax = axes[1,1])\nsns.lineplot(x = 'Year', y = player2_runs['Mat'].mean(), data = player2_runs, label = f\"Average matches per season - {player2_name}\", marker = \"*\", ax = axes[1,1])\n\naxes[1,1].set_title(f\"{player_name} vs {player2_name} Matches in IPL from {player_runs.Year[0]} to {player_runs.Year[len(player_runs)-1]}\")\nplt.xlim(min(combined_runs['Year']), max(combined_runs['Year'])) #set X-axis limits\nplt.ylim(min(combined_runs['Mat']), max(combined_runs['Mat'])) #set Y-axis limits\n\nplt.tight_layout()\n","9a550b63":"## Player Average Ranking\nThe below dataframe shows the average of player rankings (most runs) and the total number of years they've played IPL.","b020854d":"Since, Year column is missing from CSV files, we'll add the year column manually","e34cabdc":"**Rohit Sharma** is a better explosive batsman than **Virat Kohli** having a boundary percent of **59** and a strike rate over **130**","a267c97c":"From the above graphs, we can see that **Rohit Sharma** performed better than **Virat Kohli** in the earlier versions of IPL. **Virat Kohli**'s performance peaked in the **2016** season where he averaged over **80**!!! \n\nOverall, Virat Kohli has scored **more average runs per season** and has a **higher average Batting Average per season** than Rohit Sharma. Also, he has **less** number of average matches per season than **Rohit Sharma**. This shows that **Virat** is a more consistant batsman than **Rohit**.","08edd35f":"## Player vs Player Analysis\nThe following code is written in such a way that you can compare the stats of any 2 batsman in IPL from 2008 - 2021.\n\nHowever, we'll be performing analysis on comparison between stats of **Virat Kohli** and **Rohit Sharma**.","8d641624":"## Player Comparison Based on Runs Scored and Matches Played\nHere we can set the desired stat and get player vs player comparison","7f1c5cf2":"## Player Average Ranking (Based on the no. of years played) ","471ae998":"## Combining multiple dataframes into a single dataframe and create separate Player1 and Player2 database","10c68898":"**Suresh Raina** leads the batsmen rankings on an average compared to other players\n\nThe average rankings of **Virat Kohli** and **Rohit Sharma** is quite similar.","553e010c":"In the above dataframe, **Devdutt Padikkal** - who has played only for a year tops the table. Since, it's not a convenient way to measure the average player rankings based on this, we'll divide the total no. of years the player has played by the average rankings.","6bc5403a":"**75%** of **Chris Gayle**'s runs are scored in boundaries with a strike rate of **144**!\nAlso, **Sehwag** has scored **72%** in boundaries with a strike rate of **153.5**!","a099d66c":"## Average Boundary Percentage and Average Strike Rate\nThe below table shows average boundary percentage and average strike rate of players who have played minimum 50 matches\n\nThese are the players who have the hitting ability to clear the ropes!","f7ea9bd1":"## Read All CSV files\nRead all the csv files from IPL 2008 - 2021","1cf9bae4":"## Virat Kohli vs Rohit Sharma Boundary% comparison"}}