{"cell_type":{"085ecae3":"code","5e04931a":"code","bccc9baf":"code","01da9de8":"code","276fbf06":"code","53f8606d":"code","ab091527":"code","f977197a":"code","d1edab5e":"code","55d5c546":"code","da7358ab":"code","b20de048":"code","b1af6ed6":"code","bee18679":"code","cb2d7135":"code","1269a0e9":"code","eb023b40":"code","cf6b06f3":"code","93adba2b":"code","47322b5f":"code","eda4a5ed":"code","379f24bc":"code","822fef4c":"code","a00a9ba8":"code","7fefaa64":"code","89a51e10":"code","abd7fe4f":"code","fe34864f":"code","3b31f97c":"code","ee817495":"code","1e4a9eb5":"code","01f523d8":"code","a9cd7273":"code","22cf2d71":"code","fea719be":"code","d2fa8157":"code","9e1be8a5":"code","23b35d84":"code","90f6a5e0":"code","ba94ccd2":"code","3933900e":"code","b00882c8":"code","a14e3d41":"code","fbe9542b":"code","f2a8ad34":"code","722858c2":"code","d86dd398":"code","e10c4116":"code","761619a0":"code","984f36cf":"code","35ed9af8":"code","5585b53d":"code","219ed409":"code","aec456ca":"code","98fba5d3":"markdown","4cecc115":"markdown","a747142e":"markdown","564c2d4f":"markdown","1612d143":"markdown","07e755e5":"markdown","bf93bc61":"markdown","a5d2a85d":"markdown","5f029f80":"markdown","9791f52e":"markdown","7a6b327c":"markdown","cbd4878c":"markdown","443c9f06":"markdown"},"source":{"085ecae3":"#import some necessary librairies\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n%matplotlib inline\nimport matplotlib.pyplot as plt  # Matlab-style plotting\nimport seaborn as sns\ncolor = sns.color_palette()\nsns.set_style('darkgrid')\nimport warnings\ndef ignore_warn(*args, **kwargs):\n    pass\nwarnings.warn = ignore_warn #ignore annoying warning (from sklearn and seaborn)\n\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew #for some statistics\n\n\npd.set_option('display.float_format', lambda x: '{:.3f}'.format(x)) #Limiting floats output to 3 decimal points\n\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\")) #check the files available in the directory","5e04931a":"data_imputed_lot_frontage = pd.read_csv('..\/input\/housing-data-with-imputed-lotfrontage\/housing_data_with_imputed_LotFrontage.csv')\ndata_imputed_lot_frontage.shape","bccc9baf":"#Now let's import and put the train and test datasets in  pandas dataframe\n\ntrain = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')\n#print (train.shape,test.shape)","01da9de8":"train2 = data_imputed_lot_frontage[:train.shape[0]]\ntest2 = data_imputed_lot_frontage[train.shape[0]:]","276fbf06":"train['LotFrontage']=train2['LotFrontage']\ntest['LotFrontage']=test['LotFrontage']","53f8606d":"#check the numbers of samples and features\nprint(\"The train data size before dropping Id feature is : {} \".format(train.shape))\nprint(\"The test data size before dropping Id feature is : {} \".format(test.shape))\n\n#Save the 'Id' column\ntrain_ID = train['Id']\ntest_ID = test['Id']\n\n#Now drop the  'Id' colum since it's unnecessary for  the prediction process.\ntrain.drop(\"Id\", axis = 1, inplace = True)\ntest.drop(\"Id\", axis = 1, inplace = True)\n\n#check again the data size after dropping the 'Id' variable\nprint(\"\\nThe train data size after dropping Id feature is : {} \".format(train.shape)) \nprint(\"The test data size after dropping Id feature is : {} \".format(test.shape))","ab091527":"#Deleting outliers\ntrain = train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)\n","f977197a":"#We use the numpy fuction log1p which  applies log(1+x) to all elements of the column\ntrain[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n# Get the fitted parameters used by the function\n(mu, sigma) = norm.fit(train['SalePrice'])\nprint( '\\n mu = {:.2f} and sigma = {:.2f}\\n'.format(mu, sigma))","d1edab5e":"ntrain = train.shape[0]\nntest = test.shape[0]\ny_train = train.SalePrice.values\nall_data = pd.concat((train, test)).reset_index(drop=True)\nall_data.drop(['SalePrice'], axis=1, inplace=True)\nprint(\"all_data size is : {}\".format(all_data.shape))","55d5c546":"all_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)[:30]\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\n","da7358ab":"all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")","b20de048":"all_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")","b1af6ed6":"all_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")","bee18679":"all_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")","cb2d7135":"all_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")","1269a0e9":"all_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median())) ","eb023b40":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    all_data[col] = all_data[col].fillna('None')","cf6b06f3":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    all_data[col] = all_data[col].fillna(0)","93adba2b":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    all_data[col] = all_data[col].fillna(0)","47322b5f":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    all_data[col] = all_data[col].fillna('None')","eda4a5ed":"all_data[\"MasVnrType\"] = all_data[\"MasVnrType\"].fillna(\"None\")\nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)","379f24bc":"all_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])","822fef4c":"all_data = all_data.drop(['Utilities'], axis=1)","a00a9ba8":"all_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")","7fefaa64":"all_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\n","89a51e10":"all_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0])\n","abd7fe4f":"all_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])","fe34864f":"all_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])","3b31f97c":"all_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")","ee817495":"#all_data[\"PoolQC\"] = all_data[\"PoolQC\"].fillna(\"None\")\n#all_data[\"MiscFeature\"] = all_data[\"MiscFeature\"].fillna(\"None\")\n#all_data[\"Alley\"] = all_data[\"Alley\"].fillna(\"None\")\n#all_data[\"Fence\"] = all_data[\"Fence\"].fillna(\"None\")\n#all_data[\"FireplaceQu\"] = all_data[\"FireplaceQu\"].fillna(\"None\")\n#for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond','PoolQC','MiscFeature','Alley','Fence','FireplaceQu','GarageYrBlt', 'GarageArea', 'GarageCars',\n#           'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2','MasVnrType'):\n#    all_data[col] = all_data[col].fillna('None')\n#for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n#    all_data[col] = all_data[col].fillna(0)","1e4a9eb5":"#Group by neighborhood and fill in missing value by the median LotFrontage of all the neighborhood\n'''all_data[\"LotFrontage\"] = all_data.groupby(\"Neighborhood\")[\"LotFrontage\"].transform(\n    lambda x: x.fillna(x.median())) \nall_data[\"MasVnrArea\"] = all_data[\"MasVnrArea\"].fillna(0)\nall_data['MSZoning'] = all_data['MSZoning'].fillna(all_data['MSZoning'].mode()[0])\nall_data = all_data.drop(['Utilities'], axis=1)\nall_data[\"Functional\"] = all_data[\"Functional\"].fillna(\"Typ\")\nall_data['Electrical'] = all_data['Electrical'].fillna(all_data['Electrical'].mode()[0])\nall_data['KitchenQual'] = all_data['KitchenQual'].fillna(all_data['KitchenQual'].mode()[0]) \nall_data['Exterior1st'] = all_data['Exterior1st'].fillna(all_data['Exterior1st'].mode()[0])\nall_data['Exterior2nd'] = all_data['Exterior2nd'].fillna(all_data['Exterior2nd'].mode()[0])\nall_data['SaleType'] = all_data['SaleType'].fillna(all_data['SaleType'].mode()[0])\nall_data['MSSubClass'] = all_data['MSSubClass'].fillna(\"None\")'''\n","01f523d8":"#Check remaining missing values if any \nall_data_na = (all_data.isnull().sum() \/ len(all_data)) * 100\nall_data_na = all_data_na.drop(all_data_na[all_data_na == 0].index).sort_values(ascending=False)\nmissing_data = pd.DataFrame({'Missing Ratio' :all_data_na})\nmissing_data.head()","a9cd7273":"#MSSubClass=The building class\nall_data['MSSubClass'] = all_data['MSSubClass'].apply(str)\n\n\n#Changing OverallCond into a categorical variable\nall_data['OverallCond'] = all_data['OverallCond'].astype(str)\n\n\n#Year and month sold are transformed into categorical features.\nall_data['YrSold'] = all_data['YrSold'].astype(str)\nall_data['MoSold'] = all_data['MoSold'].astype(str)\n\n","22cf2d71":"from sklearn.preprocessing import LabelEncoder\ncols = ('FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Street', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold')\n# process columns, apply LabelEncoder to categorical features\nfor c in cols:\n    lbl = LabelEncoder() \n    lbl.fit(list(all_data[c].values)) \n    all_data[c] = lbl.transform(list(all_data[c].values))\n\n# shape        \nprint('Shape all_data: {}'.format(all_data.shape))\n\n\n","fea719be":"# Adding total sqfootage feature \nall_data['TotalSF'] = all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\n\n","d2fa8157":"numeric_feats = all_data.dtypes[all_data.dtypes != \"object\"].index\n\n# Check the skew of all numerical features\nskewed_feats = all_data[numeric_feats].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nprint(\"\\nSkew in numerical features: \\n\")\nskewness = pd.DataFrame({'Skew' :skewed_feats})\nskewness.head(10)\n","9e1be8a5":"skewness = skewness[abs(skewness) > 0.75]\nprint(\"There are {} skewed numerical features to Box Cox transform\".format(skewness.shape[0]))\n\nfrom scipy.special import boxcox1p\nskewed_features = skewness.index\nlam = 0.15\nfor feat in skewed_features:\n    #all_data[feat] += 1\n    all_data[feat] = boxcox1p(all_data[feat], lam)\n    \n#all_data[skewed_features] = np.log1p(all_data[skewed_features])","23b35d84":"\nall_data = pd.get_dummies(all_data)\nprint(all_data.shape)","90f6a5e0":"train = all_data[:ntrain]\ntest = all_data[ntrain:]\n","ba94ccd2":"from sklearn.linear_model import ElasticNet, Lasso,  BayesianRidge, LassoLarsIC\nfrom sklearn.ensemble import RandomForestRegressor,  GradientBoostingRegressor\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.base import BaseEstimator, TransformerMixin, RegressorMixin, clone\nfrom sklearn.model_selection import KFold, cross_val_score, train_test_split\nfrom sklearn.metrics import mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\n\n","3933900e":"#Validation function\nn_folds = 5\n\ndef rmsle_cv(model):\n    kf = KFold(n_folds, shuffle=True, random_state=42).get_n_splits(train.values)\n    rmse= np.sqrt(-cross_val_score(model, train.values, y_train, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","b00882c8":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\nKRR = KernelRidge(alpha=0.6, kernel='polynomial', degree=2, coef0=2.5)\nGBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05,\n                                   max_depth=4, max_features='sqrt',\n                                   min_samples_leaf=15, min_samples_split=10, \n                                   loss='huber', random_state =5)\nmodel_xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1)\nmodel_lgb = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\nmodel_lgb2 = lgb.LGBMRegressor(objective='regression',num_leaves=5,\n                              learning_rate=0.05, n_estimators=720,\n                              max_bin = 55, bagging_fraction = 0.8,\n                              bagging_freq = 5, feature_fraction = 0.2319,\n                              feature_fraction_seed=9, bagging_seed=9,\n                              min_data_in_leaf =6, min_sum_hessian_in_leaf = 11)\n","a14e3d41":"score = rmsle_cv(lasso)\nprint(\"\\nLasso score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))","fbe9542b":"class StackingAveragedModels(BaseEstimator, RegressorMixin, TransformerMixin):\n    def __init__(self, base_models, meta_model, n_folds=5):\n        self.base_models = base_models\n        self.meta_model = meta_model\n        self.n_folds = n_folds\n   \n    # We again fit the data on clones of the original models\n    def fit(self, X, y):\n        self.base_models_ = [list() for x in self.base_models]\n        self.meta_model_ = clone(self.meta_model)\n        kfold = KFold(n_splits=self.n_folds, shuffle=True, random_state=156)\n        \n        # Train cloned base models then create out-of-fold predictions\n        # that are needed to train the cloned meta-model\n        out_of_fold_predictions = np.zeros((X.shape[0], len(self.base_models)))\n        for i, model in enumerate(self.base_models):\n            for train_index, holdout_index in kfold.split(X, y):\n                instance = clone(model)\n                self.base_models_[i].append(instance)\n                instance.fit(X[train_index], y[train_index])\n                y_pred = instance.predict(X[holdout_index])\n                out_of_fold_predictions[holdout_index, i] = y_pred\n                \n        # Now train the cloned  meta-model using the out-of-fold predictions as new feature\n        self.meta_model_.fit(out_of_fold_predictions, y)\n        return self\n   \n    #Do the predictions of all base models on the test data and use the averaged predictions as \n    #meta-features for the final prediction which is done by the meta-model\n    def predict(self, X):\n        meta_features = np.column_stack([\n            np.column_stack([model.predict(X) for model in base_models]).mean(axis=1)\n            for base_models in self.base_models_ ])\n        return self.meta_model_.predict(meta_features)","f2a8ad34":"stacked_averaged_models = StackingAveragedModels(base_models = (ENet, GBoost, KRR),\n                                                 meta_model = lasso)\n\nscore = rmsle_cv(stacked_averaged_models)\nprint(\"Stacking Averaged models score: {:.4f} ({:.4f})\".format(score.mean(), score.std()))","722858c2":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","d86dd398":"stacked_averaged_models.fit(train.values, y_train)\nstacked_train_pred = stacked_averaged_models.predict(train.values)\nstacked_pred = np.expm1(stacked_averaged_models.predict(test.values))\nprint(rmsle(y_train, stacked_train_pred))","e10c4116":"model_xgb.fit(train, y_train)\nxgb_train_pred = model_xgb.predict(train)\nxgb_pred = np.expm1(model_xgb.predict(test))\nprint(rmsle(y_train, xgb_train_pred))","761619a0":"model_lgb.fit(train, y_train)\nlgb_train_pred = model_lgb.predict(train)\nlgb_pred = np.expm1(model_lgb.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","984f36cf":"model_lgb2.fit(train, y_train)\nlgb_train_pred2 = model_lgb2.predict(train)\nlgb_pred2 = np.expm1(model_lgb2.predict(test.values))\nprint(rmsle(y_train, lgb_train_pred))","35ed9af8":"'''RMSE on the entire Train data when averaging'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.7 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15  ))","5585b53d":"'''RMSE on the entire Train data when averaging and trying 2 lgb models'''\n\nprint('RMSLE score on train data:')\nprint(rmsle(y_train,stacked_train_pred*0.55 +\n               xgb_train_pred*0.15 + lgb_train_pred*0.15 + lgb_train_pred2*0.15 ))","219ed409":"ensemble = stacked_pred*0.7 + xgb_pred*0.15 + lgb_pred*0.15","aec456ca":"sub = pd.DataFrame()\nsub['Id'] = test_ID\nsub['SalePrice'] = ensemble\nsub.to_csv('submission.csv',index=False)","98fba5d3":"**LightGBM:**","4cecc115":"**If you found this notebook helpful or you just liked it , some upvotes would be very much appreciated -  That will keep me motivated to update it on a regular basis** :-)","a747142e":"- **LotFrontage** : Since the area of each street connected to the house property most likely have a similar area to other houses in its neighborhood , we can **fill in missing values by the median LotFrontage of the neighborhood**.","564c2d4f":"This is a mix of two appraches by [Serigne ](https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard#231486) and [Oleksandr](https:\/\/www.kaggle.com\/ogakulov). I've taken Serigne's stacked regressions models, simplified them slightly for ease of runing and added in some new imputed data for the lot frontage feature to improve my ranking.  \n\nHere are a few ideas I still could try to improve my score (although according to comments on this Kernel they've been tried and didn't help):  \n\n- comment: I haven't tried it out but the 'backward difference encoding' might help in this instance: http:\/\/pbpython.com\/categorical-encoding.html  \n- comment: I think we missed treating dummy variable trap here (http:\/\/www.algosome.com\/articles\/dummy-variable-trap-regression.html). in order to do that we need to delete 1 column of each newly created set of dummy features  \n\nComments from this link: https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard#231486  ","1612d143":"## Stacked Regression Models","07e755e5":"**Label Encoding some categorical variables that may contain information in their ordering set** ","bf93bc61":"**Ensemble prediction:**","a5d2a85d":"###Final Training and Prediction","5f029f80":"**LightGBM2:**","9791f52e":"**XGBoost:**","7a6b327c":"**StackedRegressor:**","cbd4878c":"**Import librairies**","443c9f06":"**Submission**"}}