{"cell_type":{"1847d307":"code","6b1e96d0":"code","042116d8":"code","c2643e32":"code","f797dab2":"code","4bf5e27d":"code","afabd154":"code","b8a0e357":"code","2ae44273":"code","74274623":"code","3e57b1ed":"code","d4a98a25":"code","c5c64b8a":"code","09437a26":"code","5dccaa1c":"code","274bf954":"code","ab57e4ae":"code","3e6a76ab":"code","a856f304":"code","84361957":"code","0203843c":"code","176f3603":"code","a4a7ca22":"code","326d6314":"code","709d1316":"code","0e51c0d0":"code","aad06470":"code","6143d675":"code","8b610fd2":"code","0ab0c129":"code","6ffa4e07":"code","1b8231d5":"markdown","832836dc":"markdown","aff7a4a7":"markdown","d9a4a270":"markdown","b1f56d37":"markdown","5d60677e":"markdown","fd7b19e2":"markdown","65c22e5e":"markdown","256fa2dc":"markdown","1c88330c":"markdown","b02e0dab":"markdown","c96153ea":"markdown","81e68a35":"markdown","1e96809d":"markdown","7c6cb65a":"markdown","0dac03f3":"markdown","a7abac93":"markdown","811f8077":"markdown","3eff71b6":"markdown","ad401a0a":"markdown","2676a045":"markdown","6cc0f2d5":"markdown","483861f4":"markdown","61ac3de9":"markdown","c47edaf6":"markdown","5400c6fa":"markdown","78932a8a":"markdown","7b9d4b97":"markdown","420cc724":"markdown","8ad3558c":"markdown","32c4b55e":"markdown","504913db":"markdown","ab920484":"markdown"},"source":{"1847d307":"import pandas as pd # package for high-performance, easy-to-use data structures and data analysis\nimport numpy as np # fundamental package for scientific computing with Python\nimport matplotlib\nimport matplotlib.pyplot as plt # for plotting\nimport seaborn as sns # for making plots with seaborn (statistic library)\n\nimport plotly\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.offline as offline\noffline.init_notebook_mode()\nimport plotly.tools as tls\n\n\n\nfrom io import StringIO\n\n","6b1e96d0":"print(\"Reading Data......\")\n\n#periods_train = pd.read_csv('E:\/PROJET\/Avito_Demand_Prediction\/input\/periods_train.csv', parse_dates=[\"activation_date\", \"date_from\", \"date_to\"])\n#periods_test = pd.read_csv('E:\/PROJET\/Avito_Demand_Prediction\/input\/periods_test.csv', parse_dates=[\"activation_date\", \"date_from\", \"date_to\"])\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\nprint(\"Reading Done....\")","042116d8":"print(\"size of train data\", train.shape)\nprint(\"size of test data\", test.shape)\n'''print(\"size of periods_train data\", periods_train.shape)\nprint(\"size of periods_test data\", periods_test.shape)'''","c2643e32":"train.head()","f797dab2":"test.head()","4bf5e27d":"periods_train = pd.read_csv('..\/input\/periods_train.csv', parse_dates=[\"activation_date\", \"date_from\", \"date_to\"])\nperiods_test = pd.read_csv('..\/input\/periods_test.csv', parse_dates=[\"activation_date\", \"date_from\", \"date_to\"])","afabd154":"periods_train.head()","b8a0e357":"train.info()","2ae44273":"train.describe()","74274623":"train.describe(include=[\"O\"])","3e57b1ed":"# checking missing data in train data \n# isnull return TRUE if the value NAN, ' ',  exist in dataset\ntotal = train.isnull().sum().sort_values(ascending = False)\npercent = (train.isnull().sum()*100\/train.isnull().count()).sort_values(ascending = False)\nmissing_train_data =pd.concat([total, percent], axis = 1, keys=['total', 'percent'])\nmissing_train_data.head(10)","d4a98a25":"total = periods_train.isnull().sum().sort_values(ascending = False)\npercent = (periods_train.isnull().sum()*100\/periods_train.isnull().count()).sort_values(ascending = False)\nmissing_periods_train = pd.concat([total, percent], axis='columns', keys=['total', 'percent'])\nmissing_periods_train\n","c5c64b8a":"total = test.isnull().sum().sort_values(ascending=False)\npercent = (test.isnull().sum()\/test.isnull().count()*100).sort_values(ascending=False)\nmissing_test = pd.concat([total, percent], axis = 1, keys = ['total', 'percent'])\nmissing_test","09437a26":"total = periods_test.isnull().sum().sort_values(ascending=False)\npercent = (periods_test.isnull().sum()\/periods_test.isnull().count()*100).sort_values(ascending=False)\nmissing_periods_test = pd.concat([total, percent], axis = 1, keys = ['total', 'percent'])\nmissing_periods_test","5dccaa1c":"plt.figure(figsize = (12, 8)) #figsize = (12, 8)\nsns.distplot(train['deal_probability'])\nplt.xlabel('likelihood that an ad sold something', fontsize = 12)\nplt.title(\"Histogram of probability that an ad actually sold something\")\nplt.show()\n\nplt.figure(figsize = (12, 8))\nplt.scatter(range(train.shape[0]), np.sort(train.deal_probability.values))\nplt.xlabel('likelihood that an ad actually sold something', fontsize=12)\nplt.title(\"Distribution of likelihood that an ad actually sold something\")","274bf954":"plt.figure()\nsns.distplot(train['price'].dropna())\nplt.xlabel('Advertisement Price')\nplt.title(\"Histogram of Ad price\")\n\nplt.figure()\nplt.scatter(range(train.shape[0]), np.sort(train.price.values))\nplt.xlabel('Ad price', fontsize=12)\nplt.title(\"Distribution of Ad price\")\nplt.show()\n","ab57e4ae":"train['deal_class'] = train['deal_probability'].apply(lambda x:'>= 0.5' if x >= 0.5 else '<0.5')\ntemp = train['deal_class'].value_counts()\nlabels = temp.index\nsizes = (temp\/temp.sum()*100)\ntrace = go.Pie(labels = labels, values = sizes, hoverinfo = 'label+percent')\nlayout = go.Layout(title='Distribution of deal class')\nfig = go.Figure(data=[trace], layout=layout)\npy.iplot(fig)\n\ndel train['deal_class']","3e6a76ab":"'''def remove_duplicates(column):\n    newlist = []\n    for row in column:\n       if row not in newlist:\n           newlist.append(row)\n    return newlist\n\nremove_duplicates(train['region'])'''\n\n# without function remove_duplicates\nnewlist = []\nfor row in train['region']:\n    if row not in newlist:\n        newlist.append(row)\nprint(newlist)\nprint(len(newlist)) #count elements in list ","a856f304":"from io import StringIO\n\nconversion = StringIO(\"\"\"\nregion,region_english\n\u0421\u0432\u0435\u0440\u0434\u043b\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Sverdlovsk oblast\n\u0421\u0430\u043c\u0430\u0440\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Samara oblast\n\u0420\u043e\u0441\u0442\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Rostov oblast\n\u0422\u0430\u0442\u0430\u0440\u0441\u0442\u0430\u043d, Tatarstan\n\u0412\u043e\u043b\u0433\u043e\u0433\u0440\u0430\u0434\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Volgograd oblast\n\u041d\u0438\u0436\u0435\u0433\u043e\u0440\u043e\u0434\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Nizhny Novgorod oblast\n\u041f\u0435\u0440\u043c\u0441\u043a\u0438\u0439 \u043a\u0440\u0430\u0439, Perm Krai\n\u041e\u0440\u0435\u043d\u0431\u0443\u0440\u0433\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Orenburg oblast\n\u0425\u0430\u043d\u0442\u044b-\u041c\u0430\u043d\u0441\u0438\u0439\u0441\u043a\u0438\u0439 \u0410\u041e, Khanty-Mansi Autonomous Okrug\n\u0422\u044e\u043c\u0435\u043d\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Tyumen oblast\n\u0411\u0430\u0448\u043a\u043e\u0440\u0442\u043e\u0441\u0442\u0430\u043d, Bashkortostan\n\u041a\u0440\u0430\u0441\u043d\u043e\u0434\u0430\u0440\u0441\u043a\u0438\u0439 \u043a\u0440\u0430\u0439, Krasnodar Krai\n\u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Novosibirsk oblast\n\u041e\u043c\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Omsk oblast\n\u0411\u0435\u043b\u0433\u043e\u0440\u043e\u0434\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Belgorod oblast\n\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Chelyabinsk oblast\n\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Voronezh oblast\n\u041a\u0435\u043c\u0435\u0440\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Kemerovo oblast\n\u0421\u0430\u0440\u0430\u0442\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Saratov oblast\n\u0412\u043b\u0430\u0434\u0438\u043c\u0438\u0440\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Vladimir oblast\n\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Kaliningrad oblast\n\u041a\u0440\u0430\u0441\u043d\u043e\u044f\u0440\u0441\u043a\u0438\u0439 \u043a\u0440\u0430\u0439, Krasnoyarsk Krai\n\u042f\u0440\u043e\u0441\u043b\u0430\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Yaroslavl oblast\n\u0423\u0434\u043c\u0443\u0440\u0442\u0438\u044f, Udmurtia\n\u0410\u043b\u0442\u0430\u0439\u0441\u043a\u0438\u0439 \u043a\u0440\u0430\u0439, Altai Krai\n\u0418\u0440\u043a\u0443\u0442\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Irkutsk oblast\n\u0421\u0442\u0430\u0432\u0440\u043e\u043f\u043e\u043b\u044c\u0441\u043a\u0438\u0439 \u043a\u0440\u0430\u0439, Stavropol Krai\n\u0422\u0443\u043b\u044c\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c, Tula oblast\n\"\"\")\n\nconversion = pd.read_csv(conversion)\ntrain = pd.merge(train, conversion, how=\"left\", on=\"region\")\n#del train['region_english_x', 'region_english_y']\n\ntrain.head()","84361957":"#columns = ['region_english_x', 'region_english_y']\n#train.drop(columns, inplace=True, axis = 1)\ntrain['region_english'].head()","0203843c":"temp = train['region_english'].value_counts()\nlabels = temp.index\nsizes = (temp \/ temp.sum())*100\ntrace = go.Pie(labels=labels, values=sizes, hoverinfo='label+percent')\nlayout = go.Layout(title='Distribution of differnet Ad regions')\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","176f3603":"from io import StringIO\n\nconversion = StringIO(\"\"\"\nparent_category_name,parent_category_name_en\n\u041b\u0438\u0447\u043d\u044b\u0435 \u0432\u0435\u0449\u0438,Personal belongings\n\u0414\u043b\u044f \u0434\u043e\u043c\u0430 \u0438 \u0434\u0430\u0447\u0438,For the home and garden\n\u0411\u044b\u0442\u043e\u0432\u0430\u044f \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u0438\u043a\u0430,Consumer electronics\n\u041d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u044c,Real estate\n\u0425\u043e\u0431\u0431\u0438 \u0438 \u043e\u0442\u0434\u044b\u0445,Hobbies & leisure\n\u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442,Transport\n\u0423\u0441\u043b\u0443\u0433\u0438,Services\n\u0416\u0438\u0432\u043e\u0442\u043d\u044b\u0435,Animals\n\u0414\u043b\u044f \u0431\u0438\u0437\u043d\u0435\u0441\u0430,For business\n\"\"\")\n\nconversion = pd.read_csv(conversion)\ntrain = pd.merge(train, conversion, how=\"left\", on=\"parent_category_name\")","a4a7ca22":"temp = train['parent_category_name_en'].value_counts()\nlabels = temp.index\nsizes = (temp \/ temp.sum())*100\ntrace = go.Pie(labels=labels, values=sizes, hoverinfo='label+percent')\nlayout = go.Layout(title='Distribution of differnet Ad parent_category_name_en')\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","326d6314":"temp = train[\"title\"].value_counts().head(20)\nprint(\"Top 5 Ad titles :\\n\", temp.head(5))\nprint(\"Total Ad titles : \",len(train[\"title\"]))\ntrace = go.Bar(\n    x = temp.index,\n    y = temp.values,\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Top Ad titles\", xaxis=dict( title='', tickfont=dict( size=14,color='rgb(107, 107, 107)')),\n    yaxis=dict(title='Count of Ad titles', titlefont=dict(size=16, color='rgb(107, 107, 107)'),\n        tickfont=dict(\n            size=14,\n            color='rgb(107, 107, 107)'\n        )))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)\n","709d1316":"temp = train[\"city\"].value_counts().head(20)\nprint('Top 5 Ad cities :\\n', temp.head(5))\nprint(\"Total Ad cities : \",len(train[\"title\"]))\ntrace = go.Bar(\n    x = temp.index,\n    y = temp.values,\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Top Ad city\",\n    xaxis=dict( title='', tickfont=dict( size=14, color='rgb(107, 107, 107)')\n    ),\n    yaxis=dict( title='Count of Ad cities', titlefont=dict( size=16, color='rgb(107, 107, 107)'),\n        tickfont=dict(size=14, color='rgb(107, 107, 107)')\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","0e51c0d0":"temp = train[\"region_english\"].value_counts().head(20)\nprint('Top 5 Ad regions :\\n',temp.head(5))\nprint(\"Total Ad regions : \",len(train[\"title\"]))\ntrace = go.Bar(\n    x = temp.index,\n    y = temp.values,\n)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Top Ad regions\", xaxis=dict( title='',\n        tickfont=dict( size=14, color='rgb(107, 107, 107)') ),\n    yaxis=dict( title='Count of Ad regions', titlefont=dict(size=16, color='rgb(107, 107, 107)'),\n        tickfont=dict(size=14, color='rgb(107, 107, 107)')\n)\n)\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","aad06470":"temp = train[\"category_name\"].value_counts().head(20)\nprint(\"Top 5 Fine grain ad category as classified by Avito's ad mode : \\n\", temp.head(5))\nprint(\"Total ad category as classified by Avito's ad mode : \",len(train[\"title\"]))\ntrace = go.Bar(x = temp.index,y = temp.values,)\ndata = [trace]\nlayout = go.Layout(\n    title = \"Top ad category as classified by Avito's ad mode\",\n    xaxis=dict(\ntitle='ad category as classified by Avitos ad mode',tickfont=dict(size=14,color='rgb(107, 107, 107)')),\n    yaxis=dict(title='Count of ad category',titlefont=dict(size=16,color='rgb(107, 107, 107)'),\n        tickfont=dict(size=14,color='rgb(107, 107, 107)')))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","6143d675":"conversion = StringIO(\"\"\"\nparent_category_name,parent_category_name_english\n\u041b\u0438\u0447\u043d\u044b\u0435 \u0432\u0435\u0449\u0438,Personal belongings\n\u0414\u043b\u044f \u0434\u043e\u043c\u0430 \u0438 \u0434\u0430\u0447\u0438,For the home and garden\n\u0411\u044b\u0442\u043e\u0432\u0430\u044f \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u0438\u043a\u0430,Consumer electronics\n\u041d\u0435\u0434\u0432\u0438\u0436\u0438\u043c\u043e\u0441\u0442\u044c,Real estate\n\u0425\u043e\u0431\u0431\u0438 \u0438 \u043e\u0442\u0434\u044b\u0445,Hobbies & leisure\n\u0422\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442,Transport\n\u0423\u0441\u043b\u0443\u0433\u0438,Services\n\u0416\u0438\u0432\u043e\u0442\u043d\u044b\u0435,Animals\n\u0414\u043b\u044f \u0431\u0438\u0437\u043d\u0435\u0441\u0430,For business\n\"\"\")\n\nconversion = pd.read_csv(conversion)\ntrain = pd.merge(train, conversion, on=\"parent_category_name\", how=\"left\")\n\n\ntemp = train[\"parent_category_name_english\"].value_counts()\nprint(\"Total Top level ad category as classified by Avito's ad model : \",len(train[\"title\"]))\ntrace = go.Bar(x = temp.index,y = (temp \/ temp.sum())*100,)\ndata = [trace]\nlayout = go.Layout(title = \"Top level ad category as classified by Avito's ad model\",\n    xaxis=dict(title='Top level ad category as classified by Avitos ad model',\n        tickfont=dict(size=14,color='rgb(107, 107, 107)')),\n    yaxis=dict(title='Count of Top level ad category in %',titlefont=dict(size=16,color='rgb(107, 107, 107)'),\n        tickfont=dict(size=14,color='rgb(107, 107, 107)')))\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","8b610fd2":"plt.figure(figsize=(15,6))\nplt.scatter(np.log(train.price), train.deal_probability)\nplt.xlabel('Ad price')\nplt.ylabel('deal probability')\nplt.show()","0ab0c129":"temp = train['user_type'].value_counts()\nlabels = temp.index\nsizes = (temp \/ temp.sum())*100\ntrace = go.Pie(labels=labels, values=sizes, hoverinfo='label+percent')\nlayout = go.Layout(title='Distribution of user type')\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","6ffa4e07":"train['activation_date'] = pd.to_datetime(train['activation_date'])\ntrain['month'] = train.activation_date.dt.month\npr = train.groupby(['region_english', 'month'])['price'].mean().unstack()\n#pr = pr.sort_values([12], ascending=False)\nf, ax = plt.subplots(figsize=(15, 20)) \npr = pr.fillna(0)\ntemp = sns.heatmap(pr, cmap='Reds')\nplt.show()","1b8231d5":"### Checking missing data in periods test data ","832836dc":"### Top 5  ad category as classified by Avito's ad mode","aff7a4a7":"### 5.2 Histogram and distribution of Ad price","d9a4a270":"## 3.2 Statistical overview of the Data\n### Training Data some little info","b1f56d37":"### checking missing data in periods training data","5d60677e":"**Top 5 Ad cities :\n1. \u041a\u0440\u0430\u0441\u043d\u043e\u0434\u0430\u0440 (Krasnodar)\n1. \u0415\u043a\u0430\u0442\u0435\u0440\u0438\u043d\u0431\u0443\u0440\u0433 (Yekaterinburg)\n1. \u041d\u043e\u0432\u043e\u0441\u0438\u0431\u0438\u0440\u0441\u043a (Novosibirsk)\n1. \u0420\u043e\u0441\u0442\u043e\u0432-\u043d\u0430-\u0414\u043e\u043d\u0443 (Rostov-on-don)\n1. \u041d\u0438\u0436\u043d\u0438\u0439 \u041d\u043e\u0432\u0433\u043e\u0440\u043e\u0434 (Nizhny Novgorod)","fd7b19e2":"### Top 5 Top level (parent)  ad category as classified by Avito's ad model","65c22e5e":"# Exploratory data analysis","256fa2dc":"**Top 5 Ad titles are :**\n1. \u041f\u043b\u0430\u0442\u044c\u0435(Dress)\n1. \u0422\u0443\u0444\u043b\u0438 (Shoes)\n1. \u041a\u0443\u0440\u0442\u043a\u0430(Jacket)\n1. \u041f\u0430\u043b\u044c\u0442\u043e (Coat)\n1. \u0414\u0436\u0438\u043d\u0441\u044b(Jeans)","1c88330c":"### Top 5 Ad regions","b02e0dab":"**Top 5 Top level ad category as classified by Avito's ad model :\n\n1. Personal belongings - 46 %\n1. For the home and garden - 12 %\n1. Consumer electronics - 12 %\n1. Real estate - 10 %\n1. Hobbies & leisure - 6 %","c96153ea":"***to make our data set more comprehonsive we will translate russian region into english \n the function remove_duplicates serve to remove all duplicates rows excisting in a colum and display a list contain without duplication *****","81e68a35":"**Distribution of user types :**\n1. Private users constitutes 71.6 % data\n1. Comapny users constitutes 23.1 % data\n1. Shop users constitutes 5.35 % data","1e96809d":"## 4. Data preparation\n### ** I- Train data **\n### checking missing data in training data","7c6cb65a":"## Monthly distribution of Ad prices in different regions ","0dac03f3":"# Retrieving the Data","a7abac93":"### Little description of training data for categorical features","811f8077":"### Little description of training data for numerical features","3eff71b6":"### 5.3 Distribution of different Ad regions","ad401a0a":"### ** Test data **\n### Checking missing data in test data ","2676a045":"### Periods train data","6cc0f2d5":"# 3- Glimpse of Data\n## 3.1 Overview of tables\n\n### Train data ","483861f4":"> ## Price price in relation to Deal probability","61ac3de9":"### Test data","c47edaf6":"**Highest Ad prices is in Irkutsk oblast region followed by Krasnodar Krai region**","5400c6fa":"### Top 5 Ad city","78932a8a":"## Distribution of user type","7b9d4b97":"**Top 5 Ad regions :**\n1. Krasnodar Krai\n1. Sverdlovsk oblast\n1. Rostov oblast\n1. Tatarstan\n1. Chelyabinsk oblast","420cc724":"* ** we notice that 88% of training data have less than 0.5 deal probabilty and 12% having deal probabilty more or equal than 0.5**","8ad3558c":"## TOP FIVE\n### Top 5 Ad titles","32c4b55e":"### Distribution of different Ad parent_category_name","504913db":"**Top 5 ad category as classified by Avito's ad mode :**\n1. Clothing, shoes and accessories\n1. Children clothing and shoes\n1. Childrens product and toys\n1. Apartments\n1. Phones","ab920484":" ## 5. Data Exploration\n### 5.1 Histogram and distribution of deal probability"}}