{"cell_type":{"1b6557e0":"code","c8d70cd8":"code","820f6dbb":"code","ec5b8df7":"code","0a172209":"code","38a74209":"code","149f3621":"code","c9fcec28":"code","509a08dc":"code","4329db81":"code","4369c5d6":"code","094221d4":"markdown","8d2b0a56":"markdown","ee00e7e2":"markdown"},"source":{"1b6557e0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom google.cloud import bigquery\n\nclient = bigquery.Client()\n\ndataset_ref = client.dataset('ghcn_d', project='bigquery-public-data')\n\ndataset = client.get_dataset(dataset_ref)\n\ntables = list(client.list_tables(dataset))","c8d70cd8":"# From https:\/\/www.kaggle.com\/alexisbcook\/writing-efficient-queries\ndef show_amount_of_data_scanned(query):\n    # dry_run lets us see how much data the query uses without running it\n    dry_run_config = bigquery.QueryJobConfig(dry_run=True)\n    query_job = client.query(query, job_config=dry_run_config)\n    print('Data processed: {} GB'.format(round(query_job.total_bytes_processed \/ 10**9, 3)))","820f6dbb":"# Extract temperature and precipitation data\n# Divide by 10 since data is in tenths of celsius\/millimeters\n# https:\/\/www1.ncdc.noaa.gov\/pub\/data\/ghcn\/daily\/readme.txt\n# qflag == NULL means good quality data\nextract_stations = \"\"\"\nSELECT\n  name, \n  value\/10 AS value,\n  latitude,\n  longitude,\n  element,\n  date\nFROM\n  `bigquery-public-data.ghcn_d.ghcnd_stations` AS stn\nJOIN\n  `bigquery-public-data.ghcn_d.ghcnd_1850` AS wx\nON\n  wx.id = stn.id\nWHERE\n  wx.element = 'TMIN'\n  OR wx.element = 'TMAX'\n  OR wx.element = 'PRCP'\n  AND wx.qflag IS NULL\n\"\"\"\nshow_amount_of_data_scanned(extract_stations)\nghcn_1850 = client.query(extract_stations).to_dataframe()\nghcn_1850[\"name\"] = ghcn_1850[\"name\"].str.strip()\nghcn_1850[\"date\"] = pd.to_datetime(ghcn_1850[\"date\"])","ec5b8df7":"ghcn_1850","0a172209":"# Num. Unique at first\nlen(pd.unique(ghcn_1850[\"name\"]))","38a74209":"ghcn_1850 = ghcn_1850.pivot(index=[\"name\",\"date\", \"latitude\", 'longitude'], columns=\"element\", values=\"value\").reset_index() # We reset_index afterwards to expand multi-index to individual columns\n# Num. unique after\nprint(len(pd.unique(ghcn_1850[\"name\"])))\nghcn_1850","149f3621":"# Take points where data is all present(must have PRCP, TMAX, and TMIN at particular location)\nghcn_1850 = ghcn_1850.dropna().reset_index(drop=True)\nprint(\"Num stations remaining\", len(pd.unique(ghcn_1850[\"name\"])))\nghcn_1850","c9fcec28":"import cartopy.crs as ccrs\nimport matplotlib.pyplot as plt\n\nplt.rcParams[\"figure.figsize\"] = (20,20)\nax = plt.axes(projection=ccrs.PlateCarree())\nax.stock_img()\n\nlats = pd.unique(ghcn_1850[\"latitude\"])\nlongs = pd.unique(ghcn_1850[\"longitude\"])\nplt.scatter(longs, lats, color='red')\nplt.title(\"Weather stations with precipitation and temperature data in the year 1850\")\nplt.show()","509a08dc":"# Climate data over the course of a year for one station\nstation_name = ghcn_1850[\"name\"].iloc[0]\nfig, axes = plt.subplots(nrows=3,ncols=1)\nstation_data = ghcn_1850[ghcn_1850[\"name\"] == station_name]\nstation_data.plot(x=\"date\", \n                  y=[\"TMIN\", \"TMAX\"], \n                  title=f\"Daily Min\/Max Temperatures(Celsius) for Weather Station {station_name} over the course of one year.\", ax = axes[0])\nstation_data[\"deltat\"] = station_data[\"TMAX\"]-station_data[\"TMIN\"]\nstation_data.plot(x=\"date\",\n                 y=\"deltat\",\n                 title=f\"Difference in Daily Min\/Max Temperatures(Celsius) for Weather Station {station_name} over the course of one year.\", ax = axes[1])\nstation_data.plot(x=\"date\",\n                 y=\"PRCP\",\n                 title=f\"Daily Precipitation(mm) for Weather Station {station_name} over the course of one year.\", ax = axes[2])","4329db81":"# Now lets look at the averages for all stations\nghcn_1850_mean = ghcn_1850.groupby(\"date\").mean()\nfig, axes = plt.subplots(nrows=3,ncols=1)\nghcn_1850_mean.plot( \n                  y=[\"TMIN\", \"TMAX\"], \n                  title=\"Average Daily Min\/Max Temperatures(Celsius) for all Weather Stations over the course of one year.\", ax = axes[0])\nghcn_1850_mean[\"deltat\"] = ghcn_1850_mean[\"TMAX\"]-ghcn_1850_mean[\"TMIN\"]\nghcn_1850_mean.plot(\n                 y=\"deltat\",\n                 title=\"Average Difference in Daily Min\/Max Temperatures(Celsius) for all Weather Stations over the course of one year.\", ax = axes[1])\nghcn_1850_mean.plot(\n                 y=\"PRCP\",\n                 title=f\"Daily Precipitation(mm) for all Weather Station over the course of one year.\", ax = axes[2])","4369c5d6":"# What was the highest temperature? Where and When did it occur?\nhottest_row = ghcn_1850.iloc[ghcn_1850[\"TMAX\"].idxmax()]\nprint(f\"The hottest temperature of 1850 was {hottest_row['TMAX']} Celsius recorded at {hottest_row['name']} on {hottest_row['date']}\")\n# What was the coldest temperature? Where and When did it occur?\ncoldest_row = ghcn_1850.iloc[ghcn_1850[\"TMIN\"].idxmin()]\nprint(f\"The coldest temperature of 1850 was {coldest_row['TMAX']} Celsius recorded at {coldest_row['name']} on {coldest_row['date']}\")\n# What was the highest rainfall(mm)? Where and When did it occur?\nmost_rain = ghcn_1850.iloc[ghcn_1850[\"PRCP\"].idxmax()]\nprint(f\"The most rainfall of 1850 was {most_rain['PRCP']} millimeters recorded at {most_rain['name']} on {most_rain['date']}\")","094221d4":"In this notebook, we will be doing a simple EDA(exploratory data analysis) on the GHCN Daily Dataset for the year 1850. In the next notebook, we will be looking at how to extend perform this analysis over a larger time period.","8d2b0a56":"# Visualization Time\nWe will use cartopy(included with Kaggle python docker image) to visualize the data. If you don't have it run ```pip install cartopy``` or ```!pip install cartopy```(inside a jupyter notebook)","ee00e7e2":"Some reshaping in order to make each climate element its own column. We will use ```DataFrame.pivot``` method in pandas to accomplish this. See https:\/\/pandas.pydata.org\/docs\/user_guide\/reshaping.html for an visualization\/explanation of how this works. Some elements are NaN since some element(PRCP, TMAX, TMIN) data doesn't exist for that sensor, not because of a bad pivot. We will check this by checking the number of unique weather station names in the data. "}}