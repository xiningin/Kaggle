{"cell_type":{"d73e421c":"code","1b8b2d62":"code","3053ba92":"code","7ecef03b":"code","8352c1e4":"code","4006b045":"code","27985d6b":"code","208418a3":"code","6a38cfe2":"code","813be14a":"code","f5ed25da":"code","f7ffe8c0":"code","9fd0462d":"code","48d7c724":"code","15f94265":"code","83923d95":"code","2eed9e3a":"code","d95a937a":"code","c3c4a6c7":"code","0b3b6048":"code","c0bbc20d":"code","6bdaed6b":"code","20ec152c":"code","3e47418e":"code","6dd6cb36":"code","02c1eca3":"code","ba853612":"code","2fece2af":"code","3d5dcc06":"code","312fc271":"code","6b1eecad":"code","d54ae94f":"code","1d94b963":"code","77f22cc3":"code","f866c846":"code","2b4f11d7":"code","416f5ffc":"code","43bc2027":"code","530e1fda":"code","7b75629e":"code","86c08c26":"code","ab6bba7b":"code","18310f3e":"code","16a8ce4c":"code","0df28cd8":"code","61e0a9ae":"code","e590d82e":"code","adcb02d0":"code","3ad9a6d2":"code","e15a4f57":"code","6b7df8b9":"code","b8d9436e":"code","5e7d8bad":"code","2cc0c699":"code","1b9ee831":"markdown","f87078b5":"markdown","ffaf0af0":"markdown","c179678a":"markdown","62b2f8b0":"markdown","f7202e29":"markdown","a419d07b":"markdown","bde158b1":"markdown","d66e1c99":"markdown","6e3a1ceb":"markdown","830b5ad3":"markdown","7d389c99":"markdown","e5e33f07":"markdown"},"source":{"d73e421c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly packages\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.graph_objs import *\n\n#widgets\nfrom ipywidgets import interact, interactive, fixed, interact_manual\nimport ipywidgets as widgets\n\n#maps\nimport json\nfrom pandas import json_normalize\n\nimport folium\nfrom folium.plugins import MiniMap\nfrom folium.plugins import MarkerCluster\nfrom folium.plugins import HeatMap\nfrom folium.map import *\n\n#os\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\ndirname='\/kaggle\/input'","1b8b2d62":"bpop = pd.read_csv(os.path.join(dirname,'corona-virus-brazil','brazil_population_2019.csv'),error_bad_lines=False)\nbcovidMacro = pd.read_csv(os.path.join(dirname,'corona-virus-brazil','brazil_covid19_macro.csv'),error_bad_lines=False)\nbcovid = pd.read_csv(os.path.join(dirname,'corona-virus-brazil','brazil_covid19.csv'),error_bad_lines=False)\nbcities= pd.read_csv(os.path.join(dirname,'corona-virus-brazil','brazil_cities_coordinates.csv'),error_bad_lines=False)\nbcitiesCovid = pd.read_csv(os.path.join(dirname,'corona-virus-brazil','brazil_covid19_cities.csv'),error_bad_lines=False)\n\nbcovidMacro.fillna(0,inplace=True)\n\nbcovidMacro['cases_log'] = np.log(bcovidMacro['cases'])\nbcovidMacro['deaths_log'] = np.log(bcovidMacro['deaths'])","3053ba92":"beds_supplies = pd.read_csv(os.path.join(dirname,'icu-beds-brazil','lista_insumos_e_leitos.csv'),delimiter=';',error_bad_lines=False)","7ecef03b":"print('Per\u00edodo da an\u00e1lise:' + min(bcovid['date']) + ' \/ ' + max(bcovid['date']))","8352c1e4":"ev = pd.DataFrame(bcovidMacro.cases.diff().fillna(0))\nev = ev.join(bcovidMacro['date'])\n\nev2 = pd.DataFrame(bcovidMacro.deaths.diff().fillna(0))\nev2 = ev2.join(bcovidMacro['date'])\n\nev3 = pd.DataFrame(bcovidMacro.recovered.diff().fillna(0))\nev3 = ev3.join(bcovidMacro['date'])\n\nev['cases_log'] = ev['cases'].apply(lambda x: np.log(x))\n\nev2['deaths_log'] = ev2['deaths'].apply(lambda x: np.log(x))","4006b045":"layout = Layout(\n    title=\"Daily cases\/deaths\",\n)\n\nfig = go.Figure(data=[\n    go.Scatter(name='Cases', x=ev.date, y=ev['cases']),\n    go.Scatter(name='Deaths', x=ev2.date, y=ev2['deaths']),\n    \n])\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='Qty')\nfig.update_layout(barmode='stack')\nfig['layout'].update(layout)\n\nout = fig.show()","27985d6b":"layout = Layout(\n    title=\"Total\",\n)\n\nfig = go.Figure(data=[\n    go.Scatter(name='Cases', x=bcovidMacro.date, y=bcovidMacro['cases']),\n    go.Scatter(name='Deaths', x=bcovidMacro.date, y=bcovidMacro['deaths']),\n    go.Scatter(name='Recovered', x=bcovidMacro.date, y=bcovidMacro['recovered'])\n    \n])\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='Qty')\nfig.update_layout(barmode='stack')\nfig['layout'].update(layout)\n\nout = fig.show()","208418a3":"layout = Layout(\n    title=\"LOG\",\n)\n\nfig = go.Figure(data=[\n    go.Scatter(name='Cases', x=bcovidMacro.date, y=round(bcovidMacro['cases_log'],2)),\n    go.Scatter(name='Deaths', x=bcovidMacro.date, y=round(bcovidMacro['deaths_log'],2)),\n    \n])\nfig.update_xaxes(title_text='Date')\nfig.update_yaxes(title_text='Qty')\nfig.update_layout(barmode='stack')\nfig['layout'].update(layout)\n\nfig.show()","6a38cfe2":"mun_d = bcitiesCovid[bcitiesCovid['deaths']>0].groupby('date').count()[['deaths']]\nmun_c = bcitiesCovid[bcitiesCovid['cases']>0].groupby('date').count()[['cases']]\nmun = pd.merge(mun_c,mun_d,left_index=True,right_index=True)\n\nmunicipios_br = len(bcities)\nmun['perc_total_d'] = mun['deaths'] \/ municipios_br*100\nmun['perc_total_c'] = mun['cases'] \/ municipios_br*100\nmun.reset_index(inplace=True)","813be14a":"# Create figure with secondary y-axis\nfig = make_subplots(specs=[[{\"secondary_y\": True}]])\n\n# Add traces\nfig.add_trace(\n    go.Scatter(x=mun.index, y=round(mun['perc_total_c'],2), name=\"% of cities with confirmed cases\"),\n    secondary_y=False,\n)\n\nfig.add_trace(\n    go.Scatter(x=mun.index, y=round(mun['perc_total_d'],2), name=\"% of cities with confirmed deaths\",mode='markers'),\n    secondary_y=False,\n)\nfig.update_layout(title='% of cities with cases\/deaths',)\n\n# Set x-axis title\nfig.update_xaxes(title_text=\"Days passed\")\n\n# Set y-axes titles\nfig.update_yaxes(title_text=\"<b>%<\/b> \", secondary_y=False)\n\nfig.show()","f5ed25da":"evSemanalMacro=bcovidMacro.groupby('week').max()\nevSemanalMacro= evSemanalMacro[evSemanalMacro.columns[2:]]\n\nmaxv=max(list(evSemanalMacro.index))\nminv=min(list(evSemanalMacro.index))\n\nw = widgets.IntSlider(\n    value=maxv,\n    min=int(min(list(evSemanalMacro.index))),\n    max=int(max(list(evSemanalMacro.index))),\n    description='weeks:'\n)","f7ffe8c0":"def slider(val):\n    xs = []\n    for i in range(minv,val+1):\n        xs.append(i)\n        \n    layout = Layout(\n        title=\"Total\",\n    )\n\n    fig = go.Figure(data=[\n        go.Bar(name='Cases', x=xs, y=evSemanalMacro['cases']),\n        go.Bar(name='Deaths', x=xs, y=evSemanalMacro['deaths'])\n\n    ])\n    fig.update_xaxes(title_text='weeks')\n    fig.update_yaxes(title_text='Qt')\n    fig.update_layout(barmode='stack')\n    fig['layout'].update(layout)\n\n    fig.show()","9fd0462d":"out = interact(slider,val=w)","48d7c724":"df = bcovid.groupby(['date','state'])['deaths'].sum().reset_index()","15f94265":"table = pd.pivot_table(df, values='deaths', index=['date'],columns=['state'], aggfunc=np.sum)","83923d95":"s = table.loc['2020-03-29']","2eed9e3a":"import matplotlib.pyplot as plt\nfig, ax = plt.subplots(figsize=(8,6), dpi=144)\ncolors = plt.cm.Dark2(range(6))\ny = s.index\nwidth = s.values\nout = ax.barh(y=y, width=width, color=colors)","d95a937a":"def nice_axes(ax):\n    ax.set_facecolor('.8')\n    ax.tick_params(labelsize=8, length=0)\n    ax.grid(True, axis='x', color='white')\n    ax.set_axisbelow(True)\n    [spine.set_visible(False) for spine in ax.spines.values()]\n    \nnice_axes(ax)\nfig","c3c4a6c7":"fig, ax_array = plt.subplots(nrows=1, ncols=3, figsize=(8, 6), dpi=144, tight_layout=True)\ndates = ['2020-03-29', '2020-04-30', '2020-05-31']\nfor ax, date in zip(ax_array, dates):\n    s = table.loc[date]\n    y = table.loc[date].rank(method='first').values\n    ax.barh(y=y, width=s.values, color=colors, tick_label=s.index)\n    ax.set_title(date, fontsize='smaller')\n    nice_axes(ax)","0b3b6048":"df2 = table.loc['2020-03-29':'2020-03-31']\ndf2","c0bbc20d":"df2 = df2.reset_index()\ndf2","6bdaed6b":"df2.index = df2.index * 5\ndf2","20ec152c":"last_idx = df2.index[-1] + 1\ndf_expanded = df2.reindex(range(last_idx))\ndf_expanded","3e47418e":"df_expanded['date'] = df_expanded['date'].fillna(method='ffill')\ndf_expanded = df_expanded.set_index('date')\ndf_expanded","6dd6cb36":"df_rank_expanded = df_expanded.rank(axis=1, method='first')\ndf_rank_expanded","02c1eca3":"df_rank_expanded = df_rank_expanded.interpolate()\ndf_rank_expanded","ba853612":"df_expanded = df_expanded.interpolate()\ndf_expanded","2fece2af":"fig, ax_array = plt.subplots(nrows=1, ncols=6, figsize=(12, 8), \n                             dpi=144, tight_layout=True)\nlabels = df_expanded.columns\nfor i, ax in enumerate(ax_array.flatten()):\n    y = df_rank_expanded.iloc[i]\n    width = df_expanded.iloc[i]\n    ax.barh(y=y, width=width, color=colors, tick_label=labels)\n    nice_axes(ax)\nax_array[0].set_title('2020-03-29')\nax_array[-1].set_title('2020-03-30')","3d5dcc06":"def prepare_data(df, steps=7):\n    df = df.reset_index()\n    df.index = df.index * steps\n    last_idx = df.index[-1] + 1\n    df_expanded = df.reindex(range(last_idx))\n    df_expanded['date'] = df_expanded['date'].fillna(method='ffill')\n    df_expanded = df_expanded.set_index('date')\n    df_rank_expanded = df_expanded.rank(axis=1, method='first')\n    df_expanded = df_expanded.interpolate()\n    df_rank_expanded = df_rank_expanded.interpolate()\n    return df_expanded, df_rank_expanded\n\ndf_expanded, df_rank_expanded = prepare_data(table)","312fc271":"from matplotlib.animation import FuncAnimation\n\ndef init():\n    ax.clear()\n    nice_axes(ax)\n    ax.set_ylim(.2, 6.8)\n\ndef update(i):\n    for bar in ax.containers:\n        bar.remove()\n    y = df_rank_expanded.iloc[i]\n    width = df_expanded.iloc[i]\n    ax.barh(y=y, width=width, color=colors, tick_label=labels)\n    date_str = df_expanded.index[i]\n    ax.set_title(f'COVID-19 Deaths by state - {date_str}', fontsize='smaller')\n    \nfig = plt.Figure(figsize=(8, 5), dpi=144)\nax = fig.add_subplot()\nanim = FuncAnimation(fig=fig, func=update, init_func=init, frames=len(df_expanded), \n                     interval=100, repeat=False)","6b1eecad":"## REMOVED FOR PERFORMANCE\n### TURN THE CELL BACK TO CODE TO SEE BAR CHART RACE\n'''from IPython.display import HTML\nhtml = anim.to_html5_video()\nHTML(html)'''","d54ae94f":"def bar_chart(var):\n    layout = Layout(\n        paper_bgcolor='rgba(0,0,0,0)',\n        plot_bgcolor='rgba(0,0,0,0)',\n        title=var+\" by region & state\",\n    )\n\n    df = bcovid[bcovid['date']==bcovid['date'].max()].sort_values(by=['region','cases'],ascending=False)\n\n    fig = px.bar(df, y=\"region\", x=var, color=var, orientation=\"h\",\n                 color_continuous_scale='Bluered', hover_name=\"state\",)\n\n\n    fig.update_xaxes(title_text='Qty')\n    fig.update_yaxes(title_text='Region')\n    fig['layout'].update(layout)\n\n    fig.show()","1d94b963":"out = interact(bar_chart,var=list(bcovid.columns[3:]))","77f22cc3":"layout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title=\"Share by state\",\n)\n\nfig = make_subplots(1, 2, specs=[[{'type':'domain'}, {'type':'domain'}]],\n                    subplot_titles=['Cases', 'Deaths'])\n\ndf = bcovid[bcovid['date']==bcovid['date'].max()].sort_values(by=['region','cases'],ascending=False)\n\nvalues_cases = df.groupby('region').sum()[['cases']].reset_index()\nvalues_deaths= df.groupby('region').sum()[['deaths']].reset_index()\n\nfig.add_trace(go.Pie(labels=list(values_cases['region']), values=list(values_cases['cases']),\n                     name=\"cases\"), 1, 1)\nfig.add_trace(go.Pie(labels=list(values_deaths['region']), values=list(values_deaths['deaths']),\n                     name=\"Deaths\"), 1, 2)\n    \n\n\nfig['layout'].update(layout)\n\nfig.show()","f866c846":"#Prepara\u00e7\u00e3o dos dados\ndf = bcovid[bcovid['date']==bcovid['date'].max()].sort_values(by=['region','cases'],ascending=False)\n\ndf['country']='Brazil'\n\nbra = df.groupby(['country']).sum().reset_index()\nreg = df.groupby(['country','region']).sum().reset_index()\nsta = df.groupby(['country','region','state']).sum().reset_index()\n#Casos\n\n#Brazil\nlabels = list(bra['country'])\nparent = ['']\nvalues = list(bra['cases'])\n#Regioes\nlabels+=list(reg['region'])\nparent+=list(reg['country'])\nvalues+=list(reg['cases'])\n#Estados\nlabels+=list(sta['state'])\nparent+=list(sta['region'])\nvalues+=list(sta['cases'])\n\n#Mortes\n#Brazil\nlabels2 = list(bra['country'])\nparent2 = ['']\nvalues2 = list(bra['deaths'])\n#Regioes\nlabels2+=list(reg['region'])\nparent2+=list(reg['country'])\nvalues2+=list(reg['deaths'])\n#Estados\nlabels2+=list(sta['state'])\nparent2+=list(sta['region'])\nvalues2+=list(sta['deaths'])\n\n#---------GRAFICO-------------#\n\nfig = go.Figure()\n\nfig.add_trace(go.Sunburst(\n    labels=labels,\n    parents=parent,\n    values = values,\n    domain=dict(column=0)\n    ,branchvalues=\"total\"\n))\n\nfig.add_trace(go.Sunburst(\n    labels=labels2,\n    parents=parent2,\n    values = values2,\n    domain=dict(column=1)\n    ,branchvalues=\"total\"\n))\n\nfig.update_layout(\n    grid= dict(columns=2, rows=1),\n   # margin = dict(t=0, l=0, r=0, b=0)\n)\n\nfig.show()","2b4f11d7":"bcitiesCovid['code']  = bcitiesCovid['code'].apply(lambda x: int(x))","416f5ffc":"covid_pop = bcitiesCovid.merge(bpop.drop(['state','city'],axis=1), left_on='code', right_on='city_code')\ncovid_pop = covid_pop[covid_pop['date']==covid_pop['date'].max()]\ncovid_pop.drop(['code','city_code','health_region_code'],axis=1,inplace=True)\ncovid_pop.sort_values(by=['state_code'],inplace=True)\ncovid_pop.reset_index(drop=True,inplace=True)","43bc2027":"covid_pop = covid_pop.groupby(['state','state_code']).sum()\ncovid_pop.reset_index(inplace=True)\n\ncovid_pop['letalidade'] = round((covid_pop['deaths'] \/ covid_pop['cases']) * 100,3)\n\ncovid_pop['casos100k'] = round((covid_pop['cases'] \/ covid_pop['population']) * 100000,3)\ncovid_pop['mortos100k'] = round((covid_pop['deaths'] \/ covid_pop['population']) * 100000,3)\n\ncovid_pop['date'] = max(bcovid['date'])\ncovid_pop['log_casos']=np.log(covid_pop['cases'])\ncovid_pop['log_mortos']=np.log(covid_pop['deaths'])","530e1fda":"beds_supplies = pd.merge(beds_supplies[beds_supplies.columns[14:20]],beds_supplies[beds_supplies.columns[0]], left_index=True, right_index=True)\n\ncovid_pop = pd.merge(covid_pop,beds_supplies,left_on='state',right_on='uf')\ncovid_pop['uti100k'] = round((covid_pop['Leitos UTI adulto'] \/ covid_pop['population']) * 100000,3)","7b75629e":"with open(os.path.join(dirname,'json-areas','estados.json'), 'r') as f:\n    data = json.load(f)\n\ngeodata = json_normalize(data['features'])","86c08c26":"#Gera arquivo com novas propriedades\nz = 0\n\nfor feat in data['features']:\n    id_ibge = int(data['features'][z]['properties']['codigo_ibg'])\n\n    df = covid_pop[covid_pop['state_code'] == id_ibge].drop_duplicates()\n    df.fillna(0,inplace=True)\n    #print(df)\n    if (len(df) > 0 & len(covid_pop) < 27):\n        \n        #mun = df['name'].iloc[0]\n        atu = df['date'].iloc[0]\n        casos = df['cases'].iloc[0]\n        mortos = df['deaths'].iloc[0]\n        pop = df['population'].iloc[0]\n        let = df['letalidade'].iloc[0]\n        c_cemk = df['casos100k'].iloc[0]\n        m_cemk = df['mortos100k'].iloc[0]\n        u_cemk = df['uti100k'].iloc[0]\n        cod_ibge = df['state_code'].iloc[0]\n        pop = df['population'].iloc[0]\n\n        #data['features'][z]['properties']['name'] = mun\n        \n        data['features'][z]['properties']['codigo_ibg'] = int(cod_ibge)\n        data['features'][z]['properties']['letalidade'] = \"{:,.2f}\".format(let)\n        data['features'][z]['properties']['populacao'] = \"{:,}\".format(int(pop))\n        data['features'][z]['properties']['casos'] = \"{:,}\".format(int(casos))\n        data['features'][z]['properties']['mortos'] = \"{:,}\".format(int(mortos))\n        data['features'][z]['properties']['casos100k'] = \"{:,.2f}\".format(c_cemk)\n        data['features'][z]['properties']['mortos100k'] = \"{:,.2f}\".format(m_cemk)\n        data['features'][z]['properties']['uti100k'] = \"{:,.2f}\".format(u_cemk)\n        data['features'][z]['properties']['dta_atu'] = atu\n           \n    z =z+1","ab6bba7b":"path_json = '.\/mapa_estado.json'\n\nnew_features = []\n\nfor element in data[\"features\"]:\n    new_features.append(element)\n        \ndata[\"features\"] = new_features\n\nwith open(os.path.join(path_json), 'w') as f:\n    json.dump(data, f,indent=4)","18310f3e":"def plot_map(indicador,export):\n\n    maps = folium.Map(location=[bcities['lat'].mean(),bcities['long'].mean()], zoom_start=5)\n#layer 1\n    folium.Choropleth(\n        geo_data=path_json,\n        data=covid_pop,\n        columns=['state_code', indicador],\n        key_on='feature.properties.codigo_ibg',\n        fill_color='YlOrRd',\n        fill_opacity=0.9,\n        line_opacity=0.2,\n        legend_name=indicador,\n        highlight=True,\n        nan_fill_color='grey',\n        nan_fill_opacity=0.4,\n        show = True,\n        name=indicador,\n        overlay=True\n    ).add_to(maps)\n\n#tooltips\n    style_function = lambda x: {'fillColor': '#ffffff', \n                                'color':'#000000', \n                                'fillOpacity': 0.1, \n                                'weight': 0.1}\n    highlight_function = lambda x: {'fillColor': '#000000', \n                                    'color':'#000000', \n                                    'fillOpacity': 0.50, \n                                    'weight': 0.1}\n    \n    tool = folium.features.GeoJson(\n        path_json,\n        style_function=style_function, \n        control=False,\n        highlight_function=highlight_function, \n        tooltip=folium.features.GeoJsonTooltip(\n            fields=['sigla','populacao','casos','mortos','letalidade','casos100k','mortos100k','uti100k','dta_atu'],\n            aliases=['Estado: ','Popula\u00e7\u00e3o: ','Casos: ','Mortos: ','Letalidade %: '\n                         ,'Casos \/ 100k: ','Mortos \/ 100k: ', 'Uti \/ 100K','Data Atualiza\u00e7\u00e3o: '],\n            style=(\"background-color: white; color: #333333; font-family: arial; font-size: 12px; padding: 10px;\") \n        )\n    )\n\n    maps.add_child(tool)\n    maps.keep_in_front(tool)\n\n    folium.LayerControl(autoZIndex=False, collapsed=True).add_to(maps)\n\n\n    #--------------#export html#--------------#\n    if export == True:\n        maps.save('covid_mapa_'+indicador+'.html')\n\n    return maps","16a8ce4c":"list_ind = list(covid_pop.columns[2:])\n\nremove_list = ['date','uf']\nfor ind in remove_list:\n    list_ind.remove(ind)\n","0df28cd8":"out = interact(plot_map,indicador=list_ind,export=[False,True])","61e0a9ae":"!pip install wget\n","e590d82e":"import wget\nurl = 'https:\/\/secweb.procergs.com.br\/isus-covid\/api\/v1\/export\/csv\/hospitais'\nfilename = wget.download(url)","adcb02d0":"hospital_beds = pd.read_csv(filename, encoding='latin-1',delimiter=';')\nhospital_beds['just_date'] = pd.to_datetime(hospital_beds['DATA INCLUSAO REGISTRO']).dt.date\nlast_date = hospital_beds['just_date'].max()\n\nfrom dateutil.relativedelta import relativedelta\n\nlast_date2 = last_date + relativedelta(days = -1)\n#adult icu in use\nhospital_beds['uti_a_util'] = hospital_beds['NUMERO PACIENTES ADULTOS INTERNADOS EM LEITOS UTI  (SUS  PRIVADO)']\/hospital_beds['NUMERO LEITOS UTI ADULTO (SUS  PRIVADO)']*100\nhospital_beds['uti_a_util'].fillna(0,inplace=True)","3ad9a6d2":"hospital_beds.columns","e15a4f57":"rs = hospital_beds[hospital_beds['just_date']==last_date].groupby('SIGLA_UF').sum()\nrs['uti_a_util'] = rs['NUMERO PACIENTES ADULTOS INTERNADOS EM LEITOS UTI  (SUS  PRIVADO)']\/rs['NUMERO LEITOS UTI ADULTO (SUS  PRIVADO)']*100\nrs['uti_a_util'].fillna(0,inplace=True)\n\nrs2 = hospital_beds[hospital_beds['just_date']==last_date2].groupby('SIGLA_UF').sum()\nrs2['uti_a_util'] = rs2['NUMERO PACIENTES ADULTOS INTERNADOS EM LEITOS UTI  (SUS  PRIVADO)']\/rs2['NUMERO LEITOS UTI ADULTO (SUS  PRIVADO)']*100\nrs2['uti_a_util'].fillna(0,inplace=True)","6b7df8b9":"fig = go.Figure(go.Indicator(\n    domain = {'x': [0, 1], 'y': [0, 1]},\n    value = rs['uti_a_util'].values[0],\n    mode = \"gauge+number+delta\",\n    title = {'text': \"ICU Ocupation RS - \"+str(last_date)},\n    delta = {'reference': rs2['uti_a_util'].values[0]},\n    gauge = {'axis': {'range': [None, 100]},\n             'bar': {'color': \"green\"},\n             'steps' : [\n                 {'range': [0, 60], 'color': \"white\"},\n                 {'range': [60, 80], 'color': \"yellow\"},\n                 {'range': [80, 100], 'color': \"red\"}],\n             'threshold' : {'line': {'color': \"red\", 'width': 4}, 'thickness': 0.75, 'value': rs['uti_a_util'].values[0]}}))\n\nfig.show()","b8d9436e":"rs_day = hospital_beds.groupby('just_date').sum()\nrs_day['uti_a_util'] = rs_day['NUMERO PACIENTES ADULTOS INTERNADOS EM LEITOS UTI  (SUS  PRIVADO)']\/rs_day['NUMERO LEITOS UTI ADULTO (SUS  PRIVADO)']*100\nrs_day['uti_a_util'].fillna(0,inplace=True)","5e7d8bad":"rs_day['leitos_d']=100-rs_day['uti_a_util']","2cc0c699":"layout = Layout(\n    title=\"ICU capacity - RS\",\n)\n\nfig = go.Figure(data=[\n    go.Bar(name='Used', x=rs_day.index, y=round(rs_day['uti_a_util'],2),marker_color='red'),\n    go.Bar(name='Available', x=rs_day.index, y=round(rs_day['leitos_d'],2),marker_color='green')\n\n])\nfig.update_xaxes(title_text='date')\nfig.update_yaxes(title_text='%')\nfig.update_layout(barmode='stack')\nfig['layout'].update(layout)\n\nfig.show()","1b9ee831":"## NUMBERS BY REGION AND STATES","f87078b5":"## Open original JSON with state borders","ffaf0af0":"## Download latest data from https:\/\/covid.saude.rs.gov.br\n# Hospital beds icu (RS STATE)","c179678a":"## Create New Features","62b2f8b0":"## % of cities with cases\/deaths","f7202e29":"# MAPS","a419d07b":"## Sunburst","bde158b1":"## TOTAL TO DATE","d66e1c99":"## WEEKLY DATA","6e3a1ceb":"## Function to plot the map","830b5ad3":"### Bar Chart Race\n[Used this implementation](https:\/\/medium.com\/dunder-data\/create-a-bar-chart-race-animation-in-python-with-matplotlib-477ed1590096)","7d389c99":"## Export JSON with new features","e5e33f07":"## LOADING DATA"}}