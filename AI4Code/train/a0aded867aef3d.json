{"cell_type":{"29084d9e":"code","1abcc1d9":"code","2ab321d2":"code","8d491422":"code","2451c012":"code","6dd008fc":"code","74acbb38":"code","a198c54c":"code","b4114cdb":"code","035974a5":"markdown","37a1c983":"markdown","9e292899":"markdown","1385a68f":"markdown","19f3293e":"markdown","27661e45":"markdown"},"source":{"29084d9e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport tensorflow as tf\nfrom keras.layers import Flatten,Dense\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n\ntrain=pd.read_csv('..\/input\/train.csv')\ntest=pd.read_csv('..\/input\/test.csv')\n# Any results you write to the current directory are saved as output.","1abcc1d9":"X_train=train.drop('label',axis=1)\nX_train = X_train \/ 255.0\ntest = test \/ 255.0\nX_train = X_train.values.reshape(-1,28,28,1)\ntest = test.values.reshape(-1,28,28,1)\n\ny_train=train['label']\ny_train=to_categorical(y_train,num_classes=10)\ny_train[:5]","2ab321d2":"print(X_train.shape)\nprint(y_train.shape)","8d491422":"X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size = 0.1, random_state=2)","2451c012":"plt.imshow(X_train[12][:,:,0])","6dd008fc":"model = Sequential()\n\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu', input_shape = (28,28,1)))\nmodel.add(Conv2D(filters = 32, kernel_size = (5,5),padding = 'Same',activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2)))\nmodel.add(Dropout(0.1))\n\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same',activation ='relu'))\nmodel.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))\nmodel.add(Dropout(0.2))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation = \"relu\"))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(10, activation = \"softmax\"))\n\nmodel.compile(optimizer = 'adam' , loss = \"categorical_crossentropy\", metrics=[\"accuracy\"])\n\nmodel.fit(X_train, y_train, batch_size =136,epochs =10,validation_data = (X_val, y_val), verbose = 2)","74acbb38":"model.summary()","a198c54c":"prediction= model.predict(test)\n\n# select the indix with the maximum probability\nprediction= np.argmax(prediction,axis = 1)\n\nprediction= pd.Series(prediction,name=\"Label\")","b4114cdb":"print(prediction[0])\nplt.imshow(test[0][:,:,0])","035974a5":"****1. Normalizing Data by dividing pixel array by 255.0 to normalize it between (0-1) as pixel range is between 0-255****\n\n\n****2. Reshaping the data with the image dimension (28*28)=784 and 1 is for grayscale image****\n","37a1c983":"****Importing the Data****","9e292899":"****6. Predicting and plotting the 0th element of test.csv to check model predicted correctly or not!****","1385a68f":"****5. Predicting the model of test.csv****","19f3293e":"****4. CNN Model****","27661e45":"****3. Splitting data****"}}