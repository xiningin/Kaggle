{"cell_type":{"963d45c9":"code","607f415c":"code","241dfc4b":"code","0f46ef71":"code","bfa53028":"code","77153658":"code","cc36ea0c":"code","eb807773":"code","557ead7e":"code","75af5888":"code","74de991d":"code","4c760de0":"code","6b2ee53c":"code","80af1a35":"code","41d2775b":"code","9c4aa8ec":"code","ec7aa13b":"code","996af6e1":"code","a155530a":"code","1da7673e":"code","c27cd956":"code","6b702c08":"code","e7ac14be":"code","3ded5df2":"code","0353db45":"code","fb1c4510":"code","dcc2e666":"markdown","f47386e0":"markdown","d77fa8e5":"markdown","e82cfbe5":"markdown"},"source":{"963d45c9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nfrom tensorflow.keras.datasets import fashion_mnist\nfrom sklearn import model_selection\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential, load_model, Model\nfrom keras.layers import Dense, Dropout, Flatten, Input\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D, UpSampling2D\nfrom keras.utils.np_utils import to_categorical\nfrom scipy import spatial\nfrom operator import itemgetter\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","607f415c":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()","241dfc4b":"(X_train, y_train), (X_test, y_test) = fashion_mnist.load_data();\nX_train = X_train.reshape(-1, 28, 28, 1)\nX_test = X_test.reshape(-1, 28, 28, 1)\nX_train = X_train \/ 255\nX_test = X_test \/ 255","0f46ef71":"categories = [\"T-shirt\/top\", \"Trouser\", \"Pullover\", \"Dress\", \"Coat\", \"Sandal\", \"Shirt\", \"Sneaker\", \"Bag\", \"Ankle boot\"]\nnb_cat = 10","bfa53028":"y_train_cat = to_categorical(y_train, nb_cat)\ny_test_cat = to_categorical(y_test, nb_cat)","77153658":"plt.figure(figsize=(20,20))\nfor i in range(0,50) :\n    plt.subplot(10,10,i+1)\n    plt.axis('off')\n    plt.imshow(X_train[i], cmap=\"gray_r\")\n    plt.title(categories[y_train[i]])","cc36ea0c":"model = Sequential()\nmodel.add(Conv2D(64, 3, input_shape=(28, 28, 1), activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(32, 3, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(16, 3, activation='relu'))\nmodel.add(Dropout(0.2))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(nb_cat, activation='softmax'))","eb807773":"model.summary()","557ead7e":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","75af5888":"train = model.fit(X_train, y_train_cat, validation_data=(X_test, y_test_cat), epochs=50, batch_size=256, verbose=1)","74de991d":"model.evaluate(X_test, y_test_cat)","4c760de0":"plot_scores(train)","6b2ee53c":"predict_res = model.predict(X_test) \nclasses_res = np.argmax(predict_res,axis=1)","80af1a35":"plt.figure(figsize=(15,25))\nn_test = X_test.shape[0]\ni=1\nfor j in range(len(X_test)) :\n    if (classes_res[j] != y_test[j]) & (i<20):\n        plt.subplot(10,5,i)\n        plt.axis('off')\n        plt.imshow(X_test[j])\n        plt.title('%s \/ %s' % (categories[classes_res[j]], categories[y_test[j]]))\n        i+=1","41d2775b":"input_img = Input(shape=(28,28,1))\nencoded = Conv2D(64, (3,3), input_shape=(28, 28, 1), activation='relu', padding='same', name=\"e1\")(input_img)\nencoded = Dropout(0.2, name=\"e2\")(encoded)\nencoded = MaxPooling2D(pool_size=(2, 2), name=\"e3\")(encoded)\nencoded = Conv2D(32, (3,3), activation='relu', padding='same', name=\"e4\")(encoded)\nencoded = Dropout(0.2, name=\"e5\")(encoded)\nencoded = MaxPooling2D(pool_size=(2, 2), name=\"e6\")(encoded)\nencoded = Conv2D(16, (3,3), activation='relu', padding='same', name=\"e7\")(encoded)\n\ndecoded = Conv2D(32, (3,3), activation='relu', padding='same', name=\"d1\")(encoded)\ndecoded = UpSampling2D(name=\"d2\")(decoded)\ndecoded = Conv2D(64, (3,3), activation='relu', padding='same', name=\"d3\")(decoded)\ndecoded = UpSampling2D(name=\"d4\")(decoded)\ndecoded = Conv2D(1, (3,3), activation='relu', padding='same', name=\"d5\")(decoded)\n\nautoencoder = Model(input_img, decoded)\nautoencoder.summary()","9c4aa8ec":"encoder = Model(input_img, encoded)\nencoder.summary()","ec7aa13b":"encoded_input = Input(shape=(7, 7, 16))\ndecoder_layer = autoencoder.get_layer('d1')(encoded_input)\ndecoder_layer = autoencoder.get_layer('d2')(decoder_layer)\ndecoder_layer = autoencoder.get_layer('d3')(decoder_layer)\ndecoder_layer = autoencoder.get_layer('d4')(decoder_layer)\ndecoder_layer = autoencoder.get_layer('d5')(decoder_layer)\n\ndecoder = Model(encoded_input, decoder_layer)\ndecoder.summary()","996af6e1":"autoencoder.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","a155530a":"autoencoder.fit(X_train, X_train,\n                epochs=20,\n                batch_size=256,\n                shuffle=True,\n                validation_data=(X_test, X_test))\nencoded_imgs = encoder.predict(X_test)\ndecoded_imgs = decoder.predict(encoded_imgs)","1da7673e":"fig, ax = plt.subplots(nrows=2, ncols=10,figsize=(20, 4))\nplt.gray()\nfor indice, row in enumerate(ax):\n    for indice2, col in enumerate(row):\n        if indice == 0:\n            col.imshow(X_test[indice2].reshape(28,28,1))\n        else:\n            col.imshow(decoded_imgs[indice2].reshape(28,28,1))\n\nplt.show()","c27cd956":"plt.imshow(X_test[0].reshape(28,28,1))\nplt.gray()\nplt.show()","6b702c08":"encoded_imgs = encoded_imgs.reshape(encoded_imgs.shape[0], -1)\nsearch_img = encoded_imgs[0]","e7ac14be":"def custom_cosine_sim(a,b):\n    return np.dot(a, b) \/ ( np.linalg.norm(a) * np.linalg.norm(b))","3ded5df2":"cosine_list = []\nfor index_image,xt in enumerate(encoded_imgs):\n    result = 1 - spatial.distance.cosine(search_img, xt)\n    cosine_list.append(dict({'res':result, 'i':index_image}))\ncosine_list.sort(key=itemgetter('res'), reverse=True)","0353db45":"fig, ax = plt.subplots(nrows=1, ncols=10,figsize=(20, 4))\nplt.gray()\nfor indice, row in enumerate(ax):\n    row.imshow(X_test[cosine_list[indice]['i']].reshape(28,28,1))\n\nplt.show()","fb1c4510":"cosine_list.sort(key=itemgetter('res'), reverse=False)\nfig, ax = plt.subplots(nrows=1, ncols=10,figsize=(20, 4))\nplt.gray()\nfor indice, row in enumerate(ax):\n    row.imshow(X_test[cosine_list[indice]['i']].reshape(28,28,1))\n\nplt.show()","dcc2e666":"### Moins ressemblant","f47386e0":"## Ressemblance\n","d77fa8e5":"## Cat\u00e9gorisation","e82cfbe5":"### Plus ressemblant\n"}}