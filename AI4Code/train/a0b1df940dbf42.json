{"cell_type":{"0cd29c3e":"code","b3ab807a":"code","d310152a":"code","b7ffa42d":"code","692da7a3":"code","491c4ffa":"code","8e4499a7":"code","26d9d247":"code","9ebe756c":"code","d981a94e":"code","c2113a86":"code","03845781":"code","3bb67a6f":"code","86766e12":"code","a40db439":"code","8418b0ec":"code","06aed080":"code","48c2c7fe":"code","88754105":"code","32dfb6c3":"markdown","55f9439b":"markdown"},"source":{"0cd29c3e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom matplotlib import pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","b3ab807a":"heart = pd.read_csv(\"..\/input\/heart.csv\")","d310152a":"heart.info()","b7ffa42d":"heart.describe()","692da7a3":"heart.head()","491c4ffa":"y=heart.sex.values\nx=heart.drop([\"sex\"],axis=1)","8e4499a7":"x = (x - np.min(x))\/(np.max(x)-np.min(x)).values # normalizition","26d9d247":"#train_and_test_data\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=42)","9ebe756c":"x_train=x_train.T\ny_train=y_train.T\nx_test=x_test.T\ny_test=y_test.T","d981a94e":"#initializing parameters and sigmoid function\ndef initialize_weights_and_bias(dimension):\n    w=np.full((dimension,1),0.01)\n    b=0.0\n    return w,b\n\ndef sigmoid(z):\n    y_head=1\/(1+np.exp(-z))\n    return y_head","c2113a86":"#forward and backward propogation\ndef forward_backward_propogation(w,b,x_train,y_train):\n    #forward\n    z=np.dot(w.T,x_train)+b\n    y_head=sigmoid(z)\n    loss=y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost=(np.sum(loss))\/x_train.shape[1]\n    #backward\n    derivative_weight=(np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias=np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients={\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    return cost, gradients","03845781":"#update parameters\ndef update(w,b,x_train,y_train,learning_rate,number_of_iteration):\n    cost_list=[]\n    cost_list2=[]\n    index=[]\n    #updating(learning) parameters is number of iteration times\n    for i in range(number_of_iteration):\n        #make forward and backward propogation and find cost,gradients\n        cost,gradients=forward_backward_propogation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        w=w-learning_rate*gradients[\"derivative_weight\"]\n        b=b-learning_rate*gradients[\"derivative_bias\"]\n        if i%10==0:\n            cost_list2.append(cost)\n            index.append(i)\n            print(\"cost after iteration %i : %f\" %(i,cost))\n    parameters={\"weight\":w,\"bias\":b}        \n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation=\"vertical\")\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters,gradients,cost_list","3bb67a6f":"#parameters\ndef predict(w,b,x_test):\n    #x_test is a input for forward propogation\n    z=sigmoid(np.dot(w.T,x_test)+b)\n    y_prediction=np.zeros((1,x_test.shape[1]))\n    #if z>0.5, our prediction is one\n    #if z<0.5, our prediction is zero\n    for i in range(z.shape[1]):\n        if z[0,i]<=0.5 :\n            y_prediction[0,i]=0\n        else:\n            y_prediction[0,i]=1\n    return y_prediction","86766e12":"#implementing logistic regression\ndef logistic_regression(x_train,y_train,x_test,y_test,learning_rate,number_of_iteration):\n    #initialize\n    dimension=x_train.shape[0]\n    w,b= initialize_weights_and_bias(dimension)\n    parameters,gradients,cost_list=update(w,b,x_train,y_train,learning_rate,number_of_iteration)\n    y_prediction_test=predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    y_prediction_train=predict(parameters[\"weight\"],parameters[\"bias\"],x_train)\n    print(\"train accuracy: {} %\".format(100-np.mean(np.abs(y_prediction_train-y_train))*100))\n    print(\"test accuracy: {} %\".format(100-np.mean(np.abs(y_prediction_test-y_test))*100))\n    ","a40db439":"logistic_regression(x_train,y_train,x_test,y_test,learning_rate=0.1,number_of_iteration=10000)","8418b0ec":"from sklearn.linear_model import LogisticRegression\nlr=LogisticRegression()\nlr.fit(x_train.T,y_train.T)","06aed080":"lr.score(x_test.T,y_test.T)","48c2c7fe":"lr.score(x_train.T,y_train.T)","88754105":"from sklearn import linear_model\nlogreg = linear_model.LogisticRegression(random_state = 42,max_iter= 10000)\nprint(\"test accuracy: {} \".format(logreg.fit(x_train.T, y_train.T).score(x_test.T, y_test.T)))\nprint(\"train accuracy: {} \".format(logreg.fit(x_train.T, y_train.T).score(x_train.T, y_train.T)))\n\n#this section is a summary of the above work","32dfb6c3":"Attribute Information: \n> 1. age \n> 2. sex \n> 3. chest pain type (4 values) \n> 4. resting blood pressure \n> 5. serum cholestoral in mg\/dl \n> 6. fasting blood sugar > 120 mg\/dl\n> 7. resting electrocardiographic results (values 0,1,2)\n> 8. maximum heart rate achieved \n> 9. exercise induced angina \n> 10. oldpeak = ST depression induced by exercise relative to rest \n> 11. the slope of the peak exercise ST segment \n> 12. number of major vessels (0-3) colored by flourosopy \n> 13. thal: 3 = normal; 6 = fixed defect; 7 = reversable defect","55f9439b":"\nYou can make them all or you can just write it\nAnd Then I know this accuarcy is very low.But it does not matter.Because this is a exercise."}}