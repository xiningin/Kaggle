{"cell_type":{"91948df8":"code","fea95b4b":"code","49f89b59":"code","81d829be":"code","b4379460":"code","09b528ac":"code","5cbbca12":"code","30cecaf1":"code","e1426f73":"code","6f422847":"code","721b5eaf":"code","1eba3981":"code","8a5c37a3":"code","732d6318":"markdown","7e859667":"markdown","45112e81":"markdown","eb53f378":"markdown","526a79a1":"markdown","c23c02e2":"markdown","69c9faca":"markdown","687b7f44":"markdown","4b5e39a1":"markdown","829fe2bd":"markdown","2fa95128":"markdown","713f3004":"markdown"},"source":{"91948df8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","fea95b4b":"import tensorflow as tf","49f89b59":"\ngpus = tf.config.experimental.list_physical_devices('GPU')\nfor gpu in gpus:\n    print(\"Name:\", gpu.name, \"  Type:\", gpu.device_type)\n","81d829be":"\nfrom tensorflow.python.client import device_lib\n\ndevice_lib.list_local_devices()\n","b4379460":"\ntf.test.is_gpu_available()","09b528ac":"mnist = tf.keras.datasets.mnist\n\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n","5cbbca12":"x_train, x_test = x_train \/ 255.0, x_test \/ 255.0","30cecaf1":"model = tf.keras.models.Sequential([\n  tf.keras.layers.Flatten(input_shape=(28, 28)),\n  tf.keras.layers.Dense(128, activation='relu'),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(10)\n])","e1426f73":"predictions = model(x_train[:1]).numpy()\npredictions","6f422847":"loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)","721b5eaf":"model.compile(optimizer='adam',\n              loss=loss_fn,\n              metrics=['accuracy'])","1eba3981":"model.fit(x_train, y_train, epochs=5)","8a5c37a3":"\nmodel.evaluate(x_test,  y_test, verbose=2)\n","732d6318":"# To Check GPU in Tensorflow","7e859667":"# Training and Validation\n\nThe Model.fit method adjusts the model parameters to minimize the loss:\n","45112e81":"# Creating Loss Function","eb53f378":"## To Check GPU Availability in Tensorflow","526a79a1":"# Create Sequential Model Using Tensorflow Keras\n\nArchitecture of the Network is :-\n\n1). Input layer for 28x28 images in MNiST dataset\n\n2). Dense layer with 128 neurons and ReLU activation function\n\n3). Output layer with 10 neurons for classification of input images as one of ten digits(0 to 9)","c23c02e2":"# Load MNiST Dataset","69c9faca":"# Pre-processing of Training and Test Datasets","687b7f44":"# Introduction\n\nAt present, you can choose from three popular open source Deep Learning libraries:\n\n- TensorFlow, \n- Microsoft Cognitive Toolkit (CNTK), \n- Theano. \n\nTherefore, to avoid any confusion, we will refer to Keras implementation as multi-backend Keras.\n\nTensorFlow itself now comes bundled with its own Keras implementation,tf.keras. It only supports TensorFlow as the backend.\n\n![image.png](attachment:image.png)\n\nThis short introduction uses Tensorflow Keras to:\n\n- Build a neural network that classifies images.\n- Train this neural network.\n- And, finally, evaluate the accuracy of the model.\n\n# Reference\nhttps:\/\/www.tensorflow.org\/tutorials\/quickstart\/beginner","4b5e39a1":"The Model.evaluate method checks the models performance, usually on a \"Validation-set\" or \"Test-set\".","829fe2bd":"### Please Upvote,Comment, Fork and Share to Help me with my efforts to help the community.","2fa95128":"# Listing Devices including GPU's with Tensorflow","713f3004":"# Compile the Model Designed Earlier\n\nBefore the model is ready for training, it needs a few more settings. These are added during the model's compile step:\n\n- Loss function \nThis measures how accurate the model is during training. You want to minimize this function to \"steer\" the model in the right direction.\n\n- Optimizer \nThis is how the model is updated based on the data it sees and its loss function.\n\n- Metrics\nUsed to monitor the training and testing steps. The following example uses accuracy, the fraction of the images that are correctly classified."}}