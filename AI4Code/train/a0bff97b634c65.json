{"cell_type":{"eb8eaf59":"code","6dbe3128":"code","1030cece":"code","953e10f2":"code","640a82d5":"code","d5f39db2":"markdown","9c96d661":"markdown","ff046437":"markdown","02de7761":"markdown","42f77dec":"markdown","038d9234":"markdown","91b62183":"markdown"},"source":{"eb8eaf59":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport sqlite3\nimport seaborn as sns\nimport matplotlib.dates as mdates\nimport matplotlib.ticker as ticker\n\n# Set plotting style\nplt.style.use('seaborn-white')\n\n# Metadata saved to output plots\nMETADATA = {\n    \"Contributor\": \"Alexander Gude\",\n    \"Rights\": \"CC-BY-SA 4.0\"\n}\n\n# Show all columns\npd.set_option('display.max_columns', None)\n\n# Date conversion function\ndef date_columns(query):\n    \"\"\"If a date column is included in the query, parse it as a date in the\n    dataframe.\"\"\"\n    dates = []\n    fields = [\"collision_date\", \"process_date\"]\n    if '*' in query:\n        dates = fields\n    else:\n        for date in fields:\n            if date in query:\n                dates.append(date)\n\n        if not dates:\n            dates = None\n\n    return dates\n\ndef run_query(query, sql_file=\"..\/input\/california-traffic-collision-data-from-switrs\/switrs.sqlite\"):\n    \"\"\" Read sqlite query results into a pandas DataFrame. \"\"\"\n    with sqlite3.connect(sql_file) as con:\n        # Construct a Dataframe from the results\n        df = pd.read_sql_query(\n            query,\n            con,\n            parse_dates = date_columns(query),\n        )\n\n        return df\n    \n# We should be able to just set rcParams, expect Jupyter has a bug:\n# https:\/\/github.com\/jupyter\/notebook\/issues\/3385\n#\n# So we have to call this function every time we want to plot.\n\ndef setup_plot(title=None, xlabel=None, ylabel=None):\n    \"\"\"Set up a simple, single pane plot with custom configuration.\n    \n    Args:\n        title (str, optional): The title of the plot.\n        xlabel (str, optional): The xlabel of the plot.\n        ylabel (str, optional): The ylabel of the plot.\n        \n    Returns:\n        (fig, ax): A Matplotlib figure and axis object.\n        \n    \"\"\"\n    # Plot Size\n    plt.rcParams[\"figure.figsize\"] = (12, 7)  # (Width, height)\n    \n    # Text Size\n    SMALL = 12\n    MEDIUM = 16\n    LARGE = 20\n    HUGE = 28\n    plt.rcParams[\"axes.titlesize\"] = HUGE\n    plt.rcParams[\"figure.titlesize\"] = HUGE\n    plt.rcParams[\"axes.labelsize\"] = LARGE\n    plt.rcParams[\"legend.fontsize\"] = LARGE\n    plt.rcParams[\"xtick.labelsize\"] = MEDIUM\n    plt.rcParams[\"ytick.labelsize\"] = MEDIUM\n    plt.rcParams[\"font.size\"] = SMALL\n    \n    # Legend\n    plt.rcParams[\"legend.frameon\"] = True\n    plt.rcParams[\"legend.framealpha\"] = 1\n    plt.rcParams[\"legend.facecolor\"] = \"white\"\n    plt.rcParams[\"legend.edgecolor\"] = \"black\"\n    \n    # Figure output\n    plt.rcParams[\"savefig.dpi\"] = 300\n    \n    # Make the plol\n    fig, ax = plt.subplots()\n    ax.set_title(title)\n    ax.set_xlabel(xlabel)\n    ax.set_ylabel(ylabel)\n    \n    # Make the title and label area opaque instead of transparent\n    fig.patch.set_facecolor(ax.get_facecolor())\n    \n    return fig, ax\n\ndef draw_colored_text_legend_instead_of_real_legend(ax, texts, positions):\n    legend = ax.get_legend()\n    for patch, text, (x, y) in zip(legend.get_patches(), texts, positions):\n        color = patch.get_edgecolor()\n        ax.text(x, y, text, color=color, verticalalignment='center', transform=ax.transAxes, fontsize=24)\n        \n    legend.remove()","6dbe3128":"DATE_COL = \"collision_date\"\nCRASH_COL = \"crashes\"\nFATALITY_COL = \"fatalities\"\n\nquery = f\"\"\"\n    SELECT collision_date\n        , 1 as {CRASH_COL}\n        , IIF(COLLISION_SEVERITY='fatal', 1, 0) as {FATALITY_COL}\n    FROM collisions \n    WHERE {DATE_COL} IS NOT NULL \n    AND {DATE_COL} BETWEEN '2019-01-01' AND '2020-11-30'\n\"\"\"\n\ndf = run_query(query)","1030cece":"df = df.astype({\n    f\"{DATE_COL}\": \"datetime64[ns]\",\n    CRASH_COL: \"int32\",\n    FATALITY_COL: \"int32\",\n})\n\nts = df[[DATE_COL, CRASH_COL, FATALITY_COL]]\nts.index= ts[DATE_COL]\n\nts_series = ts.resample('W-MON').sum()\n\nts_series[\"fatality_rate\"] = ts_series[FATALITY_COL] \/ ts_series[CRASH_COL]\n\nts_series.loc[ts_series.index >= '2020-03-19', \"is_after_order\"] = True\nts_series.loc[ts_series.index < '2020-03-19', \"is_after_order\"] = False\n\n# Convert to a timeseries\nfig, ax = setup_plot(\n    title=\"COVID-19 Stay-at-home Order: California Traffic Fatalities\",\n    ylabel=\"Fatality Rate by Week\",\n)\n\nfig.patch.set_facecolor('white')\n\nax.step(x=ts_series.index, y=ts_series[\"fatality_rate\"], linewidth=3)\n\n# Set Y range and grid\nax.grid(which=\"major\")\nax.set_xlim((pd.Timestamp(\"2019-04-01\"), pd.Timestamp(\"2020-12-31\")))\n\n# Set major ticks\nyear_locator = mdates.YearLocator()\nyear_form = mdates.DateFormatter(\"\\n%Y\")  # \\n puts it one line down\nax.xaxis.set_major_locator(year_locator)\nax.xaxis.set_major_formatter(year_form)\n\n# Set minor ticks\nmonth_locator = mdates.MonthLocator(interval=1)\nmonth_form = mdates.DateFormatter(\"%b\")\nax.xaxis.set_minor_locator(month_locator)\nax.xaxis.set_minor_formatter(month_form)\n\n# Set Y major ticks\nax.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=1))\n\n# Add Stay at home order\nax.axvline(x=pd.Timestamp(\"2020-03-19\"), color=\"red\", linewidth=2, zorder=-1, label=\"Stay at home order\")\nax.text(x=pd.Timestamp(\"2020-03-27\"), y=0.005, s=\"Stay-at-home Order\", color=\"red\", fontsize=24)","953e10f2":"# Convert to a timeseries\nfig, ax = setup_plot(\n    title=\"COVID-19 Stay-at-home Order: California Traffic Fatalities\",\n    xlabel=\"Fatality Rate per Week\",\n    ylabel=\"Probability\",\n)\n\nsns.histplot(data=ts_series, x=\"fatality_rate\", hue=\"is_after_order\", stat=\"probability\", element=\"step\", common_norm=False, ax=ax)\n\nax.yaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=0))\nax.xaxis.set_major_formatter(ticker.PercentFormatter(xmax=1, decimals=1))\n\n\ndraw_colored_text_legend_instead_of_real_legend(ax, [\"Before\\nOrder\", \"After\\nOrder\"], [(0.05, 0.7), (0.7, 0.6)])","640a82d5":"from scipy.stats import mannwhitneyu\n\nmannwhitneyu(\n    x=ts_series[ts_series[\"is_after_order\"]==True][\"fatality_rate\"],\n    y=ts_series[ts_series[\"is_after_order\"]==False][\"fatality_rate\"],\n)","d5f39db2":"I start the data in 2019 because I need a sample from _before_ the pandemic\nchanged behavior, but I didn't want to go too far back because [collision\nrates vary drastically year-to-year][collision_rates]. I cut off the data in\nNovember because the reporting is not yet complete for December.\n\n[collision_rates]: https:\/\/alexgude.com\/blog\/switrs-crashes-by-date\/#crashes-per-week\n","9c96d661":"You can see the fatality rate **immediately** jumps up to over 1% for the\nfirst time in our dataset, and then goes even higher in the coming weeks. It\nstays elevated for the entirety our data range.\n\nAnother way to look at this data is to plot of histogram of the rate before\nand after the stay-at-home order. Here it is:","ff046437":"The test confirms our eye test with a _p_-value around 1e-14. These\ndistributions are significantly different, meaning that the California\nstay-at-home order increased the traffic fatality rate.","02de7761":"# SWITRS: Increase In Traffic Fatalities After COVID-19 Lock Down\n\n_Original posted at [**SWITRS: Increase In Traffic Fatalities After COVID-19 Lock Down**](https:\/\/alexgude.com\/blog\/switrs-covid-19-lockdown-fatal-traffic-collisions\/)_\n\nCalifornia had its [first case of COVID-19][covid] on January 26, 2020. The\nGovernor mandated a [state-wide stay-at-home order][order] on March 19, 2020.\nThe morning and evening commutes stopped immediately. Traffic volume decreased\nby more than 50% and stayed low for weeks. Slowly the restrictions were    \nrelaxed and traffic returned, but has still not reached pre-pandemic levels. \n\n[covid]: https:\/\/en.wikipedia.org\/wiki\/COVID-19_pandemic_in_California\n[order]: https:\/\/en.wikipedia.org\/wiki\/California_government_response_to_the_COVID-19_pandemic\n\nThe number of traffic collisions **decreased** as you would expect with the\ndecreased volume but, surprisingly, the severity of the collisions\n**increased**. The [rate of fatal accidents increased across the\ncountry][fatal]. The National Highway Traffic Safety Administration attributes\nthe increase to a change in behavior by drivers who stayed on the road: they\ndrove more recklessly and wore their seatbelt less often.\n\n[fatal]: https:\/\/www.nhtsa.gov\/press-releases\/2020-fatality-data-show-increased-traffic-fatalities-during-pandemic\n\nSpecifically they said: \n\n> NHTSA's research suggests that throughout the national public health\n> emergency and associated lockdowns, driving patterns and behaviors\n> changed significantly, and that drivers who remained on the roads\n> engaged in more risky behavior, including speeding, failing to wear seat\n> belts, and driving under the influence of drugs or alcohol. Traffic data\n> indicates that average speeds increased throughout the year, and\n> examples of extreme speeds became more common, while the evidence also\n> shows that fewer people involved in crashes used their seat belts.\n\nI can't test that hypothesis with my [SWITRS data][hosted_dataset_post]\u2014it\ndoes not include much information about driving behavior, only about\ncollisions\u2014but I can look at the fatality rate on California roads.\n\n[hosted_dataset_post]: https:\/\/alexgude.com\/blog\/switrs-sqlite-hosted-dataset\/","42f77dec":"## Data\n\nI selected all collisions in the dataset between the start of 2019 and\nNovember 30th, 2020, including whether their was a fatality as a result of the\ncollision, with this query:","038d9234":"The weeks with the highest fatality rate before the pandemic are between 0.8%\nand 1%. These overlap with the _lowest_ fatality rate weeks after the\nstay-at-home order. These are clearly different distributions, but we can\nquantify that difference with a [Mann\u2013Whitney _U_ test][mwu].\n\n[mwu]: https:\/\/en.wikipedia.org\/wiki\/Mann%E2%80%93Whitney_U_test\n\nThe Mann\u2013Whitney test compares the probability that a value randomly drawn\nfrom the first distribution is larger than one randomly drawn from the second\ndistribution, with a correction for ties. If this probability is not 50% (as\nit would be if they were the same) then the distributions must be different.\nThe test is nonparametric and only assumes that the observations are\nindependent, that they are orderable, that under the null hypothesis the\ndistributions are equal, and under the alternative hypothesis the\ndistributions are different.","91b62183":"## Fatality Rate\n\nI calculate the weekly fatality rate. It is the number of traffic collisions\nthat resulted in a fatality divided by the total number of collisions during\nthe week. Here is what that rate looks like before and after the stay-at-home\norder:"}}