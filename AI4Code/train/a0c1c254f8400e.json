{"cell_type":{"f652725a":"code","c6960e32":"code","bdb2833f":"code","01a7b305":"code","22b9db20":"code","30ae72e4":"code","314810fd":"code","7ac5214b":"code","26a7f28e":"code","c1b28fe1":"code","a549143d":"code","01fab4e5":"code","e63574cd":"code","090c2f28":"code","7ae70c3c":"code","3e909a53":"code","9887a57f":"code","9d340a66":"code","020700be":"code","ff04f788":"code","5d1df921":"code","5c0076cb":"code","6cc51a37":"code","c164b3c0":"code","7aafff49":"code","8db70469":"code","de63c858":"code","4d5dda6e":"code","584b4052":"code","ddb0c4c2":"code","61daf2b1":"code","70a8d121":"code","1038429d":"code","92d473b9":"code","8f01807e":"code","eb4eac1d":"code","5c374439":"code","3bed8d9a":"code","c11dadfa":"markdown","f035facd":"markdown","10c11922":"markdown","edaa5ce7":"markdown","b7e96a91":"markdown","bb7f5ab2":"markdown","c97f9fb5":"markdown","11b6840e":"markdown","9534c262":"markdown","eb9ec704":"markdown","cd24ab57":"markdown","fef9975a":"markdown","5e466705":"markdown","87118a61":"markdown","35ce67f5":"markdown","1a2f0863":"markdown","04c7c863":"markdown","02e2182a":"markdown","8bd06c88":"markdown","786a9591":"markdown","7cedf809":"markdown","9a7f27ce":"markdown","7a6590b9":"markdown","136ae1d0":"markdown","e06205e9":"markdown","787f50c2":"markdown","31398c4a":"markdown","c56aed0d":"markdown","9214a0d6":"markdown","d8c2133b":"markdown","efbe3dc8":"markdown","f4e0dc4c":"markdown","d5ce4137":"markdown","3720bde0":"markdown","abe4daa8":"markdown","4d32251f":"markdown","b9906250":"markdown","ecc5ea23":"markdown","937fa6a7":"markdown","636a8561":"markdown","4c4c509c":"markdown","035f7fd5":"markdown","4319720f":"markdown","a846814c":"markdown","1457ebf9":"markdown","daca5a39":"markdown","71b03784":"markdown","0e0bb876":"markdown","7d860845":"markdown"},"source":{"f652725a":"import pandas as pd\nimport numpy as np\n\n# For visualizations\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom matplotlib.lines import Line2D\n\n# For feature selection\nfrom sklearn.feature_selection import mutual_info_classif\nfrom scipy import stats\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n\n# For model selection, modelling and testing\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.linear_model import LogisticRegression,RidgeClassifier,SGDClassifier,PassiveAggressiveClassifier\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.svm import SVC,LinearSVC,NuSVC\nfrom sklearn.neighbors import KNeighborsClassifier,NearestCentroid\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,AdaBoostClassifier,GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB,BernoulliNB\n\nfrom sklearn.metrics import precision_score,accuracy_score\nfrom sklearn.model_selection import RandomizedSearchCV,GridSearchCV,RepeatedStratifiedKFold\nfrom sklearn.ensemble import VotingClassifier\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nfrom warnings import filterwarnings","c6960e32":"index=['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach',\n       'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']","bdb2833f":"df=pd.read_csv('..\/input\/heart-attack-analysis-prediction-dataset\/heart.csv',names=index,header=0)","01a7b305":"df","22b9db20":"df.info()","30ae72e4":"colors_blue = [\"#132C33\", \"#264D58\", '#17869E', '#51C4D3', '#B4DBE9']\ncolors_dark = [\"#1F1F1F\", \"#313131\", '#636363', '#AEAEAE', '#DADADA']\ncolors_red = [\"#331313\", \"#582626\", '#9E1717', '#D35151', '#E9B4B4']\ncolors_mix = [\"#17869E\", '#264D58', '#179E66', '#D35151', '#E9DAB4', '#E9B4B4', '#D3B651', '#6351D3']\nsns.palplot(colors_blue)\nsns.palplot(colors_red)\nsns.palplot(colors_dark)\nsns.palplot(colors_mix)","314810fd":"def grouping(age):\n    if age>=18 and age<=30:\n        return 0\n    elif age>=31 and age<=40:\n        return 1\n    elif age>=41 and age<=50:\n        return 2\n    elif age>=51 and age<=60:\n        return 3\n    else:\n        return 4","7ac5214b":"age_int = df['age'].apply(grouping).value_counts(sort=False)\n\nlabels=['18-30','31-40','41-50','51-60','>61']\n\n\n# Pie Charts\n\nfig,ax = plt.subplots(1,2,figsize=(14,16))\n\nfig.text(s='Sex vs. Age plots',size=24,fontweight='bold',fontname='monospace',\n             color=colors_dark[1],y=0.73,x=0.43,alpha=0.8)\n\n# Pie Chart - Left\n\nax[0].pie(df['sex'].value_counts(),autopct='{:.1f}%'.format,\n          colors=[colors_blue[3],colors_red[3]],wedgeprops={'width':0.5,'alpha':0.7},\n          pctdistance=1.15,startangle=80,radius=1.1,textprops={'fontsize': 10, 'color': colors_dark[2],\n                                                               'fontweight': 'bold'})\n\nax[0].legend(['Male','Female'],frameon=False,ncol=2,columnspacing=15,loc='upper right')\n\nax[0].text(s='We can see that the majority of the\\n patients in the dataset are Male',\n               fontdict={'color':colors_dark[3],'size':13,'fontweight':'bold','fontname':'monospace',\n                         },x=-0.85,y=1.5)\n\nax[0].text(s='Sex',fontdict={'color':colors_dark[3],'size':18,'fontweight':'semibold','fontname':'monospace'}\n           ,x=-0.12,y=-0.05)\n\n#Pie Chart - Right\n\nax[1].pie(age_int,autopct='{:.2f}%'.format,colors=colors_mix,wedgeprops={'width':0.5,'alpha':0.7},\n          pctdistance=1.18,radius=1.1,textprops={'fontsize': 10, 'color': colors_dark[2],'fontweight': 'bold'},\n         counterclock=False)\n\nax[1].legend(labels,frameon=False,bbox_to_anchor=(1.38,0.9),labelspacing=3,title='Age Interval')\n\nax[1].text(s='Dataset involved majority of people aged >40\\nThere was a very low percentage of patients aged <30',\n               fontdict={'color':colors_dark[3],'size':13,'fontweight':'bold','fontname':'monospace',\n                         },x=-1.3,y=1.5)\n\nax[1].text(s='Age',fontdict={'color':colors_dark[3],'size':18,'fontweight':'semibold','fontname':'monospace'}\n           ,x=-0.12,y=-0.05)\n\n\nfig.subplots_adjust(wspace=0.55)\n\n# Histograms with KDE\n\nfig,ax = plt.subplots(1,2,figsize=(14,6),sharey=False)\n\n# Left Hist\n\nsns.histplot(df[df['sex']==1]['age'],ax=ax[0],bins=30,alpha=0.4,color=colors_blue[2],\n             element='step',kde=True,line_kws={'ls':'--'})\nax[0].set_xlim(20,80)\nax[0].set_ylim(0,30)\nax[0].invert_xaxis()\nax[0].spines['top'].set_color(None)\nax[0].spines['left'].set_color(None)\nax[0].yaxis.tick_right()\nax[0].set_ylabel(None)\nax[0].set_yticks([])\nax[0].set_xlabel('Age')\nax[0].legend(['Male'],loc='upper left',frameon=False)\nax[0].axhline(y=26,xmin=1,xmax=1-(39\/60),ls='--')\n\nax[0].set_title('Most Male patients\\naged between 57-59',y=0.88,x=0.65,\n                fontdict={'color':colors_dark[3],'size':12,'fontweight':'bold','fontname':'monospace'})\n\n# Right Hist\n\nsns.histplot(df[df['sex']==0]['age'],ax=ax[1],bins=30,alpha=0.4,color=colors_red[3],\n             element='step',kde=True,line_kws={'ls':'--'})\nax[1].set_xlim(20,80)\nax[1].set_ylim(0,30)\nax[1].spines['top'].set_color(None)\nax[1].spines['right'].set_color(None)\nax[1].set_ylabel(None)\nax[1].set_yticks([1,5,10,15,20,25,30])\nax[1].set_xlabel('Age')\nax[1].legend(['Female'],loc='upper right',frameon=False)\nax[1].axhline(y=12,xmin=0,xmax=43\/60,ls='--',color=colors_red[3])\n\nax[1].set_title('Most Female patients\\naged between 54-62',y=0.42,x=0.3,\n                fontdict={'color':colors_dark[3],'size':12,'fontweight':'bold','fontname':'monospace'})\nfig.subplots_adjust(wspace=0)\n\nfig.text(s='Distribution of age among the patients - Male vs. Female',size=14,fontweight='bold',\n             fontname='monospace',color=colors_dark[1],y=0,x=0.28,alpha=0.8)\n\nplt.show()","26a7f28e":"df['thal']=df['thal'].apply(lambda x: int(df['thal'].mode()) if (x==0) else int(x))","c1b28fe1":"df['thal'].value_counts()","a549143d":"df.drop(df[df['ca']==4].index,inplace=True)","01fab4e5":"df['ca'].value_counts()","e63574cd":"df.reset_index(drop=True,inplace=True)","090c2f28":"l = ['sex','cp','fbs','restecg','exang','slope','ca','thal']\nc = [colors_red[3],colors_dark[4],colors_dark[3],colors_dark[2]]\nlab = [['Male','Female'],\n       ['Asymptomatic','Atypical Angina','Typical Angina','Non-Anginal Pain'],\n       ['<120 mg\/dl','>120 mg\/dl'],\n       ['Normal','Hypertrophy','ST-T Wave Abnormality'],\n       ['No','Yes'],\n       ['Upsloping','Flat','Downsloping'],\n       ['0','1','2','3'],\n       ['Normal','Reversible Defect','Fixed Defect']\n      ]\ntitle = ['Sex','Chest Pain','Fasting Sugar Level','Resting Electrocardiographic Results','Exercise Induced Angina',\n        'Slope','No. Of Vessels Colored By Fluoroscopy','Thalium Stress Test Result']\n\nfig,ax = plt.subplots(2,4,figsize=(16,12))\n\nfig.text(s='Categorical Feature\\'s Pie Charts',size=22,fontweight='bold',\n             fontname='monospace',color=colors_dark[1],y=0.99,x=0.33,alpha=0.8)\n\nfor i in range(0,8):\n        ax[i\/\/4,i%4].pie(df[l[i]].value_counts(),autopct='{:.1f}%'.format,counterclock=False,\n          colors=c,wedgeprops={'width':0.5,'alpha':0.7},pctdistance=1.27,startangle=80,radius=1.1,\n                         textprops={'fontsize': 10, 'color': colors_dark[2],'fontweight': 'bold'})\n        ax[i\/\/4,i%4].legend(lab[i],loc='lower center',bbox_to_anchor=(0.6,-0.55),frameon=False,\n                            labelspacing=0.8,fontsize=11)\n        \nfig.text(s='Sex',size=12,fontweight='bold',fontname='monospace',\n         color=colors_dark[2],y=0.88,x=0.19,alpha=0.8)        \nfig.text(s='Chest Pain',size=12,fontweight='bold',fontname='monospace',\n         color=colors_dark[2],y=0.90,x=0.37,alpha=0.8)        \nfig.text(s='Fasting Blood\\nSugar',size=12,fontweight='bold',fontname='monospace',\n         color=colors_dark[2],y=0.90,x=0.62,alpha=0.8,ha='center')\nfig.text(s='Resting ECG\\nResults',size=12,fontweight='bold',fontname='monospace',\n         color=colors_dark[2],y=0.90,x=0.83,alpha=0.8,ha='center')\n\nfig.text(s='Exercise\\nInduced\\nAngina',size=12,fontweight='bold',fontname='monospace',\n         color=colors_dark[2],y=0.38,x=0.2,alpha=0.8,ha='center')\nfig.text(s='Slope of the\\n peak exercise\\n ST Segment',size=12,fontweight='bold',fontname='monospace',\n         color=colors_dark[2],y=0.4,x=0.41,alpha=0.8,ha='center')\nfig.text(s='No. Of Vessels\\n Colored After\\nFluoroscopy',size=12,fontweight='bold',fontname='monospace',\n         color=colors_dark[2],y=0.4,x=0.62,alpha=0.8,ha='center')\nfig.text(s='Thalium Stress\\nTest Result',size=12,fontweight='bold',fontname='monospace',\n         color=colors_dark[2],y=0.4,x=0.82,alpha=0.8,ha='center')\n\nfig.subplots_adjust(wspace=0.35,hspace=1)","7ae70c3c":"filterwarnings('ignore')\n\nmean_0 = df[df['target']==0]['chol'].mean()\nmean_1 = df[df['target']==1]['chol'].mean()\n\ncustom_lines = [Line2D([0], [0], marker='o', color=colors_blue[3], markerfacecolor=colors_blue[2],ls='--',\n                       alpha=0.7),\n                Line2D([0], [0], marker='o', color=colors_red[3], markerfacecolor=colors_red[2],ls='--',\n                       alpha=0.7)]\n\nfig,ax = plt.subplots(1,2,figsize=(20,10),sharey=False)\n\nfig.text(s='Serum Cholestrol Level Distribution',size=24,fontweight='bold',\n             fontname='monospace',color=colors_dark[1],y=1,x=0.33,alpha=0.8)\n\n\n# Left Line Plot\n\nax[0].plot(df[df['target']==0]['chol'],marker='o',lw=0.8,ls='--',alpha=0.7,color=colors_blue[3],\n            markerfacecolor=colors_blue[2],markersize=5)\nax[0].hlines(mean_0,xmin=165,xmax=400,ls='--',color=colors_dark[2])\nax[0].invert_xaxis()\nax[0].spines['top'].set_color(None)\nax[0].spines['left'].set_color(None)\nax[0].set_ylim(120,570)\nax[0].set_xticks([])\nax[0].set_xlim(305,150)\nax[0].yaxis.tick_right()\nax[0].spines['bottom'].set_color(None)\nfig.text(s='Average\\nCholesterol\\nLevel: {:.2f}'.format(mean_0),x=0.042,y=0.32,color='white',\n         backgroundcolor=colors_dark[2],fontsize=14,weight='bold')\n\n\n# Right Line Plot\n\nax[1].plot(df[df['target']==1]['chol'],marker='o',lw=0.8,ls='--',alpha=0.7,color=colors_red[3],\n          markerfacecolor=colors_red[2],markersize=5)\nax[1].hlines(mean_1,xmin=0,xmax=170,ls='--',color=colors_dark[2])\nax[1].spines['top'].set_color(None)\nax[1].spines['right'].set_color(None)\nax[1].spines['bottom'].set_color(None)\nax[1].set_ylim(120,570)\nax[1].set_xticks([])\nax[1].tick_params(axis='y', which='major', labelsize=13)\nax[1].set_title('',y=0.42,x=0.3,\n                fontdict={'color':colors_dark[3],'size':12,'fontweight':'bold','fontname':'monospace'})\nfig.text(s='Average\\nCholesterol\\nLevel: {:.2f}'.format(mean_1),x=0.89,y=0.31,color='white',\n         backgroundcolor=colors_dark[2],fontsize=14,weight='bold')\n\nfig.text(s='(mg\/dl)',x=0.51,y=0.905,fontdict={'color':'black','size':12,'ha':'center'})\n\n\nfig2,ax = plt.subplots(1,2,figsize=(15,5),sharey=False)\nsns.despine(fig2)\n\n# Left KDE Plot\n\ndf[df['target']==0]['chol'].plot.kde(ls='--',color=colors_blue[2],ax=ax[0])\nax[0].spines['left'].set_color(None)\nax[0].set_ylabel(None)\nax[0].set_yticks([])\nax[0].set_xlabel('Serum Cholestrol Level (mg\/dl)',fontsize=12)\nline = ax[0].get_lines()[-1]\nx, y = line.get_data()\nmask1 = x > 200\nmask2 = x>=240\nx1, y1 = x[mask1], y[mask1]\nx2,y2 = x[mask2],y[mask2]\nax[0].fill_between(x1, y1, alpha=0.5, facecolor=colors_blue[3])\nax[0].fill_between(x2, y2, alpha=0.5, facecolor=colors_blue[2])\nax[0].hlines(0.0018,xmin=300,xmax=510,ls='-.',color=colors_dark[2],lw=0.8)\nax[0].hlines(0.005,xmin=225,xmax=500,ls='-.',color=colors_dark[2],lw=0.8)\n\n# Right KDE Plot\n\ndf[df['target']==1]['chol'].plot.kde(ls='--',color=colors_red[3],ax=ax[1])\nax[1].spines['left'].set_color(None)\nax[1].set_ylabel(None)\nax[1].set_yticks([])\nfig2.text(s='',\n          x=0.55,y=0.65,\n         fontdict={'color':colors_dark[3],'size':14,'fontweight':'semibold','fontname':'monospace','ha':'center'})\nax[1].set_xlabel('Serum Cholestrol Level (mg\/dl)',fontsize=12)\nline = ax[1].get_lines()[-1]\nx,y = line.get_data()\nmask1 = x > 200\nmask2 = x>=240\nx1, y1 = x[mask1], y[mask1]\nx2,y2 = x[mask2],y[mask2]\nax[1].fill_between(x1, y1, alpha=0.5, facecolor=colors_red[3])\nax[1].fill_between(x2, y2, alpha=0.5, facecolor=colors_red[2])\nax[1].hlines(0.0020,xmin=-80,xmax=300,ls='-.',color=colors_dark[2],lw=0.8)\nax[1].hlines(0.0059,xmin=-80,xmax=225,ls='-.',color=colors_dark[2],lw=0.8)\nax[1].vlines(x=564,ymin=0,ymax=0.0018,ls='-.',color=colors_dark[2],lw=0.8)\n\nfig2.text(s='High\\nCholesterol',x=0.55,y=0.30,\n         fontdict={'color':'white','size':11.5,'fontweight':'semibold','fontname':'monospace','ha':'center'},\n         backgroundcolor=colors_dark[2])\nfig2.text(s='Borderline High\\nCholesterol',x=0.55,y=0.60,\n         fontdict={'color':'white','size':11.5,'fontweight':'semibold','fontname':'monospace','ha':'center'},\n         backgroundcolor=colors_dark[2])\nfig2.text(s='Outlier',x=0.885,y=0.33,\n         fontdict={'color':'white','size':11.5,'fontweight':'semibold',\n                   'fontname':'monospace','ha':'center'},backgroundcolor=colors_dark[2])\n\n\nfig.legend(handles=custom_lines,labels=('<50% Narrowing','>50% Narrowing'),frameon=False,\n           ncol=2,bbox_to_anchor=(0.81,0.95),columnspacing=30,fontsize=16)\n\n\n\nfig.subplots_adjust(wspace=0)\nfig2.subplots_adjust(wspace=0.1,right=1)\n","3e909a53":"mean_0 = df[df['target']==0]['trestbps'].mean()\nmean_1 = df[df['target']==1]['trestbps'].mean()\n\ncustom_lines = [Line2D([0], [0], marker='o', color=colors_blue[3], markerfacecolor=colors_blue[2],ls='--',\n                       alpha=0.7),\n                Line2D([0], [0], marker='o', color=colors_red[3], markerfacecolor=colors_red[2],ls='--',\n                       alpha=0.7)]\n\nfig,ax = plt.subplots(1,2,figsize=(20,10),sharey=False)\n\nfig.text(s='Resting Blood Pressure Distribution',size=24,fontweight='bold',\n             fontname='monospace',color=colors_dark[1],y=1,x=0.34\n             ,alpha=0.8)\n\n# Left Line Plot\n\nax[0].plot(df[df['target']==0]['trestbps'],marker='o',lw=0.8,ls='--',alpha=0.7,color=colors_blue[3],\n            markerfacecolor=colors_blue[2],markersize=5)\nax[0].hlines(mean_0,xmin=160,xmax=400,ls='--',color=colors_dark[2])\nax[0].invert_xaxis()\nax[0].spines['top'].set_color(None)\nax[0].spines['left'].set_color(None)\nax[0].set_ylim(85,205)\nax[0].set_xticks([])\nax[0].set_xlim(305,150)\nax[0].yaxis.tick_right()\nax[0].spines['bottom'].set_color(None)\nfig.text(s='Average \\nBP: {:.2f}'.format(mean_0),x=0.055,y=0.42,color='white',backgroundcolor=colors_dark[2],\n        fontsize=14,weight='bold')\n\n\n# Right Line Plot\n\nax[1].plot(df[df['target']==1]['trestbps'],marker='o',lw=0.8,ls='--',alpha=0.7,color=colors_red[3],\n          markerfacecolor=colors_red[2],markersize=5)\nax[1].hlines(mean_1,xmin=-10,xmax=170,ls='--',color=colors_dark[2])\nax[1].spines['top'].set_color(None)\nax[1].spines['right'].set_color(None)\nax[1].spines['bottom'].set_color(None)\nax[1].set_ylim(85,205)\nax[1].set_xticks([])\nax[1].tick_params(axis='y', which='major', labelsize=13)\nfig.text(s='Average \\nBP: {:.2f}'.format(mean_1),x=0.89,y=0.39,color='white',backgroundcolor=colors_dark[2],\n        fontsize=14,weight='bold')\nfig.text(s='(mm Hg)',x=0.51,y=0.905,fontdict={'color':'black','size':12,'ha':'center'})\n\n\nfig2,ax = plt.subplots(1,2,figsize=(15,5),sharey=False)\nsns.despine(fig2)\n\n# Left KDE Plot\n\ndf[df['target']==0]['trestbps'].plot.kde(ls='--',color=colors_blue[2],ax=ax[0])\nax[0].spines['left'].set_color(None)\nax[0].set_ylabel(None)\nax[0].set_yticks([])\nax[0].set_xlabel('Resting Blood Pressure (mm Hg)',fontsize=12)\nline = ax[0].get_lines()[-1]\nx, y = line.get_data()\nmask = x > 140\nx, y = x[mask], y[mask]\nax[0].fill_between(x, y1=y, alpha=0.5, facecolor=colors_blue[3])\nax[0].hlines(0.0080,xmin=150,xmax=237,ls='-.',color=colors_dark[2],lw=0.8)\n\n\n# Right KDE Plot\n\ndf[df['target']==1]['trestbps'].plot.kde(ls='--',color=colors_red[3],ax=ax[1])\nax[1].spines['left'].set_color(None)\nax[1].set_ylabel(None)\nax[1].set_yticks([])\nfig2.text(s='The distribution plot of blood\\n pressure among both kind\\n of patients is very\\n similar',\n          x=0.55,y=0.65,\n         fontdict={'color':colors_dark[3],'size':14,'fontweight':'semibold','fontname':'monospace','ha':'center'})\nax[1].set_xlabel('Resting Blood Pressure (mm Hg)',fontsize=12)\nline = ax[1].get_lines()[-1]\nx,y = line.get_data()\nmask = x>140\nx,y = x[mask],y[mask]\nax[1].fill_between(x,y,alpha=0.5,facecolor = colors_red[3])\nfig2.text(s='Patients with\\n Hypertension',x=0.55,y=0.38,\n         fontdict={'color':'white','size':11.5,'fontweight':'semibold','fontname':'monospace','ha':'center'},\n         backgroundcolor=colors_dark[2])\nax[1].hlines(0.0085,xmin=50,xmax=150,ls='-.',color=colors_dark[2],lw=0.8)\n\n\nfig.legend(handles=custom_lines,labels=('<50% Narrowing','>50% Narrowing'),frameon=False,\n           ncol=2,bbox_to_anchor=(0.81,0.95),columnspacing=30,fontsize=16)\n\n\n\nfig.subplots_adjust(wspace=0)\nfig2.subplots_adjust(wspace=0.1,right=1)","9887a57f":"mean_0 = df[df['target']==0]['thalach'].mean()\nmean_1 = df[df['target']==1]['thalach'].mean()\n\ncustom_lines = [Line2D([0], [0], marker='o', color=colors_blue[3], markerfacecolor=colors_blue[2],ls='--',\n                       alpha=0.7),\n                Line2D([0], [0], marker='o', color=colors_red[3], markerfacecolor=colors_red[2],ls='--',\n                       alpha=0.7)]\n\nfig,ax = plt.subplots(1,2,figsize=(20,10),sharey=False)\n\nfig.text(s='Maximum Heart Rate Distribution',size=24,fontweight='bold',\n             fontname='monospace',color=colors_dark[1],y=1.0,x=0.35,alpha=0.8)\n\n# Left Line Plot\n\nax[0].plot(df[df['target']==0]['thalach'],marker='o',lw=0.8,ls='--',alpha=0.7,color=colors_blue[3],\n            markerfacecolor=colors_blue[2],markersize=5)\nax[0].hlines(mean_0,xmin=160,xmax=400,ls='--',color=colors_dark[2])\nax[0].invert_xaxis()\nax[0].spines['top'].set_color(None)\nax[0].spines['left'].set_color(None)\nax[0].set_ylim(85,205)\nax[0].set_xticks([])\nax[0].set_xlim(305,150)\nax[0].yaxis.tick_right()\nax[0].spines['bottom'].set_color(None)\nfig.text(s='Average Max.\\n Heart Rate \\nAchievied: {:.2f}'.format(mean_0),x=0.02,y=0.44,color='white',\n         backgroundcolor=colors_dark[2],fontsize=14,weight='bold')\n\n\n# Right Line Plot\n\nax[1].plot(df[df['target']==1]['thalach'],marker='o',lw=0.8,ls='--',alpha=0.7,color=colors_red[3],\n          markerfacecolor=colors_red[2],markersize=5)\nax[1].hlines(mean_1,xmin=-10,xmax=170,ls='--',color=colors_dark[2])\nax[1].spines['top'].set_color(None)\nax[1].spines['right'].set_color(None)\nax[1].spines['bottom'].set_color(None)\nax[1].set_ylim(85,205)\nax[1].set_xticks([])\nax[1].tick_params(axis='y', which='major', labelsize=13)\nfig.text(s='Average Max.\\n Heart Rate \\nAchievied: {:.2f}'.format(mean_1),x=0.89,y=0.56,color='white',\n         backgroundcolor=colors_dark[2],fontsize=14,weight='bold')\nfig.text(s='(BPM)',x=0.51,y=0.905,fontdict={'color':'black','size':12,'ha':'center'})\n\n\nfig2,ax = plt.subplots(1,2,figsize=(15,5),sharey=False)\nsns.despine(fig2)\n\n# Left KDE Plot\n\ndf[df['target']==0]['thalach'].plot.kde(ls='--',color=colors_blue[2],ax=ax[0])\nax[0].spines['left'].set_color(None)\nax[0].set_ylabel(None)\nax[0].set_yticks([])\nax[0].set_xlabel('Max. Heart Rate Achieved (BPM)',fontsize=12)\n\n\n# Right KDE Plot\n\ndf[df['target']==1]['thalach'].plot.kde(ls='--',color=colors_red[3],ax=ax[1])\nax[1].spines['left'].set_color(None)\nax[1].set_ylabel(None)\nax[1].set_yticks([])\nfig2.text(s='The average\\n\"Maximum Heart Rate\"\\nof patients with\\n>50% Narrowing \\nwere {:.2f}% higher'.format((mean_1-mean_0)*100\/mean_0),\n          x=0.57,y=0.5,\n         fontdict={'color':colors_dark[3],'size':14,'fontweight':'semibold','fontname':'monospace','ha':'center'})\nax[1].set_xlabel('Max. Heart Rate Achieved (BPM)',fontsize=12)\n\n\nfig.legend(handles=custom_lines,labels=('<50% Narrowing','>50% Narrowing'),frameon=False,\n           ncol=2,bbox_to_anchor=(0.81,0.95),columnspacing=30,fontsize=16)\n\n\nfig.subplots_adjust(wspace=0)\nfig2.subplots_adjust(wspace=0.1,right=1)","9d340a66":"fig,ax = plt.subplots(figsize=(15,8))\nsns.swarmplot(data=df,y='oldpeak',x='target',ax=ax,palette=[colors_blue[3],colors_red[3]])\nsns.despine(fig)\nax.set_yticks(np.linspace(0,6.5,14))\nax.set_ylabel('ST Depression Induced By Exercise Relative To Rest',fontsize=12)\nax.set_xlabel('Target',fontsize=12)\nax.set_xticklabels(['<50% Narrowing','>50% Narrowing'])\nax.set_title('Old Peak Distribution',size=18,fontweight='bold',\n             fontname='monospace',color=colors_dark[1],y=1.05,x=0.5,alpha=0.8)\n\nplt.show()","020700be":"col_mix = [colors_blue[3],colors_red[3]]\n\n\nfig,ax = plt.subplots(2,2,figsize=(14,12))\n\nfig.text(s=\"Categorial Features Distributions\",size=20,fontweight='bold',fontname='monospace',\n             color=colors_dark[1],y=1,x=0.33,alpha=0.8)\n\n\nsns.despine()\n\n\nsns.countplot(data=df,x='sex',hue='target',ax=ax[0][0],palette=col_mix,alpha=0.55,edgecolor=colors_dark[2],\n              lw=1.25,saturation=1)\nax[0,0].get_legend().remove()\nax[0,0].set_xlabel('Sex',fontsize=12)\nax[0,0].set_title('80.2% of Female\\npatients had\\n >50% narrowing',y=0.65,x=0.3,\n                fontdict={'color':colors_dark[3],'size':12,'fontweight':'semibold','fontname':'monospace'})\nax[0,0].spines['left'].set_position(('outward', 8))\nax[0,0].set_ylim(0,120)\nax[0,0].set_ylabel(None)\n\n\nsns.countplot(data=df,x='cp',hue='target',ax=ax[0][1],palette=col_mix,alpha=0.55,edgecolor=colors_dark[2],\n             lw=1.25,saturation=1)\nax[0,1].get_legend().remove()\nax[0,1].set_ylabel(None)\nax[0,1].set_xlabel('Chest Pain Type',fontsize=12)\nax[0,1].set_title('Patients with non-asymptomatic chest pain\\n tended to have a greater chance\\n of having a heart disease',\n                  y=0.77,x=0.7,\n                  fontdict={'color':colors_dark[3],'size':12,'fontweight':'semibold','fontname':'monospace'})\nax[0,1].spines['left'].set_position(('outward', 8))\nax[0,1].set_ylim(0,110)\n\n\nsns.countplot(data=df,x='fbs',hue='target',ax=ax[1][0],palette=col_mix,alpha=0.55,edgecolor=colors_dark[2],\n             lw=1.25,saturation=1)\nax[1,0].get_legend().remove()\nax[1,0].set_xlabel('Fasting Blood Sugar',fontsize=12)\n\nax[1,0].set_title('The variance seems\\nsmall which might\\nnot prove helpful\\nto the model',y=0.27,x=0.75,\n                fontdict={'color':colors_dark[3],'size':12,'fontweight':'semibold','fontname':'monospace'})\nax[1,0].spines['left'].set_position(('outward', 8))\nax[1,0].set_ylim(0,140)\nax[1,0].set_ylabel(None)\n\n\nsns.countplot(data=df,x='restecg',hue='target',ax=ax[1][1],palette=col_mix,alpha=0.55,edgecolor=colors_dark[2],\n             lw=1.25,saturation=1)\nax[1,1].set_ylabel(None)\nax[1,1].get_legend().remove()\nax[1,1].set_xlabel('Resting Electrocardiographic Results',fontsize=12)\nax[1,1].set_title('62.16% of patients with\\n \"Normal\" ECG result tended\\n to have a greater chance\\n of having a heart disease',\n                  y=0.60,x=0.95,fontdict={'color':colors_dark[3],'size':12,'fontweight':'semibold','fontname':'monospace'})\nax[1,1].spines['left'].set_position(('outward', 8))\nax[1,1].set_ylim(0,100)\n\nplt.subplots_adjust(wspace=0.5,hspace=0.5)\nfig.legend(['<50% Narrowing','>50% Narrowing'],frameon=False,ncol=2,\n           columnspacing=7,fontsize=12,bbox_to_anchor=(0.71,0.97))\n\nplt.show()","ff04f788":"col_mix = [colors_blue[3],colors_red[3]]\n\nfig,ax = plt.subplots(2,2,figsize=(14,12))\n\nfig.text(s=\"Categorial Features Distributions\",size=20,fontweight='bold',fontname='monospace',\n             color=colors_dark[1],y=1,x=0.33,alpha=0.8)\n\nsns.despine()\n\nsns.countplot(data=df,x='exang',hue='target',ax=ax[0][0],palette=col_mix,alpha=0.55,edgecolor=colors_dark[2],\n              lw=1.25,saturation=1)\nax[0,0].get_legend().remove()\nax[0,0].set_xlabel('Excercise Induced Angina',fontsize=12)\nax[0,0].set_title('69% of patients\\nwho did not have EIA\\nhad a heart disease',y=0.73,x=0.74,\n                fontdict={'color':colors_dark[3],'size':12,'fontweight':'semibold','fontname':'monospace'})\nax[0,0].spines['left'].set_position(('outward', 8))\nax[0,0].set_ylim(0,150)\nax[0,0].set_ylabel(None)\n\n\nsns.countplot(data=df,x='slope',hue='target',ax=ax[0][1],palette=col_mix,alpha=0.55,edgecolor=colors_dark[2],\n             lw=1.25,saturation=1)\nax[0,1].get_legend().remove()\nax[0,1].set_ylabel(None)\nax[0,1].set_xlabel('Slope of the peak exercise\\nST segment',fontsize=12)\nax[0,1].set_title('74.82% of patients\\n with upsloping slope\\n in the ST segment\\n had a heart disease',\n                  y=0.82,x=0.5,\n                  fontdict={'color':colors_dark[3],'size':12,'fontweight':'semibold','fontname':'monospace'})\nax[0,1].spines['left'].set_position(('outward', 8))\nax[0,1].set_ylim(0,110)\n\n\nsns.countplot(data=df,x='ca',hue='target',ax=ax[1][0],palette=col_mix,alpha=0.55,edgecolor=colors_dark[2],\n             lw=1.25,saturation=1)\nax[1,0].get_legend().remove()\nax[1,0].set_xlabel('Number Of Major\\n Vessels Colored By\\n Fluoroscopy',fontsize=12)\n\nax[1,0].set_title('43.62% of all the\\npatients had a\\n heart disease while\\nhaving 0 colored vessels\\n after Fluoroscopy',\n                  y=0.5,x=0.57,fontdict={'color':colors_dark[3],\n                                          'size':12,'fontweight':'semibold','fontname':'monospace'})\nax[1,0].spines['left'].set_position(('outward', 8))\nax[1,0].set_ylim(0,140)\nax[1,0].set_ylabel(None)\n\n\nsns.countplot(data=df,x='thal',hue='target',ax=ax[1][1],palette=col_mix,alpha=0.55,edgecolor=colors_dark[2],\n             lw=1.25,saturation=1)\nax[1,1].set_ylabel(None)\nax[1,1].get_legend().remove()\nax[1,1].set_xlabel('Thalium Stress Test Result',fontsize=12)\nax[1,1].set_title('77.58% of patients\\n with \"Normal\" Stress\\n Test result had\\n a heart disease',y=0.65,x=0.23,\n                fontdict={'color':colors_dark[3],'size':12,'fontweight':'semibold','fontname':'monospace'})\nax[1,1].spines['left'].set_position(('outward', 8))\nax[1,1].set_ylim(0,100)\n\nplt.subplots_adjust(wspace=0.5,hspace=0.5)\nfig.legend(['<50% Narrowing','>50% Narrowing'],frameon=False,ncol=2,\n           columnspacing=7,fontsize=12,bbox_to_anchor=(0.71,0.97))\n\nplt.show()","5d1df921":"corr = df.corr()\nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\ncols = list(df.columns)\n\nfig,ax = plt.subplots(figsize=(18,10))\nax = sns.heatmap(corr,annot=True,cmap=colors_blue,alpha=0.6,linewidths=2,\n            annot_kws={'weight':'bold','family':'monospace','size':11},mask=mask)\nax.set_xticks(np.linspace(0.5,12.5,13))\nax.set_yticks(np.linspace(1.5,13.5,13))\nax.set_xticklabels(labels=cols[:-1],\n                   fontdict={'weight':'semibold','family':'monospace','size':11,\n                             'color':colors_dark[1],'y':-0.01})\nax.set_yticklabels(labels=cols[1:],\n                   fontdict={'weight':'semibold','family':'monospace','size':11,\n                             'color':colors_dark[1],'x':-0.01})\nfig.suptitle('Correlation\\n\\nBetween\\n\\nFeatures',\n             size=24,fontweight='bold',fontname='monospace',\n             color=colors_dark[1],y=0.72,x=0.5,alpha=0.8)\nplt.show()","5c0076cb":"new_df = df.drop(['sex','cp','fbs','restecg','exang','slope','ca','thal','target'],axis=1)\nfor i in new_df.columns:\n    r,p = stats.pearsonr(df['target'],new_df[i])\n    if p<0.01:\n        print(f'{i} is significant')\n    else:\n        print(f'{i} is not significant')","6cc51a37":"X=df.drop('target',axis=1)\ny=df['target']","c164b3c0":"model = mutual_info_classif(X,y)\nmodel_series=pd.Series(model)\nmodel_series.index= X.columns\nmodel_series.sort_values(ascending=False)","7aafff49":"top_8_cols = SelectKBest(mutual_info_classif,k=8)\ntop_8_cols.fit(X,y)\nX.columns[top_8_cols.get_support()]","8db70469":"chi_df=df[['sex','cp','fbs','restecg','exang','slope','ca','thal','target']]\nX_chi=chi_df.drop('target',axis=1)\ny_chi=chi_df['target']\nf,p=chi2(X_chi,y_chi)","de63c858":"chi_p = pd.Series(p)\nchi_p.index = X_chi.columns\nchi_p.sort_values()","4d5dda6e":"X = df[['thal','exang','cp','ca','sex','oldpeak','slope']]\ny=df['target']","584b4052":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,random_state=np.random.randint(1,1000,1)[0])","ddb0c4c2":"scaler = StandardScaler()\nscaler.fit(X_train)\nscaled_train = scaler.transform(X_train)\nscaled_test = scaler.transform(X_test)","61daf2b1":"X_train = pd.DataFrame(scaled_train,columns=X.columns,index=X_train.index)","70a8d121":"X_test = pd.DataFrame(scaled_test,columns=X.columns,index=X_test.index)","1038429d":"models =[(\"LR\", LogisticRegression(max_iter=1000)),(\"SVC\", SVC()),('KNN',KNeighborsClassifier(n_neighbors=10)),\n         (\"DTC\", DecisionTreeClassifier()),(\"GNB\", GaussianNB()),\n        (\"SGDC\", SGDClassifier()),(\"Perc\", Perceptron()),(\"NC\",NearestCentroid()),\n        (\"Ridge\", RidgeClassifier()),(\"NuSVC\", NuSVC()),(\"BNB\", BernoulliNB()),\n         ('RF',RandomForestClassifier()),('ADA',AdaBoostClassifier()),\n        ('XGB',GradientBoostingClassifier()),('PAC',PassiveAggressiveClassifier())]\n\nresults = []\nnames = []\nfinalResults = []\n\nfor name,model in models:\n    model.fit(X_train, y_train)\n    model_results = model.predict(X_test)\n    score = precision_score(y_test, model_results,average='macro')\n    results.append(score)\n    names.append(name)\n    finalResults.append((name,score))\n    \nfinalResults.sort(key=lambda k:k[1],reverse=True)","92d473b9":"finalResults[:10]","8f01807e":"model_params = {\n    'Logistic Regression':\n    {\n        'model':LogisticRegression(max_iter=1000),\n        'params':\n        {\n            'C':np.logspace(-3,2,30),\n            'class_weight':['balanced',None]\n        }\n    },\n    'SVM':\n    {\n        'model':SVC(),\n        'params':\n        {\n            'C':np.logspace(-3,2,30),\n            'gamma':np.logspace(-3,2,30)\n        }\n    },\n    'Random Forest':\n    {\n        'model':RandomForestClassifier(),\n        'params':\n        {\n            'n_estimators':[10,50,100,200],\n            'max_features':['auto','sqrt','log2'],\n            'max_depth':list(range(1,11))\n        }\n    },\n    'K-Nearest Neighbors':\n    {\n        'model':KNeighborsClassifier(),\n        'params':\n        {\n            'n_neighbors':list(range(1,41)),\n            'weights':['uniform','distance']\n        }\n    },\n    'Passive Aggressive Classifier':\n    {\n        'model':PassiveAggressiveClassifier(),\n        'params':\n        {\n            'C':np.logspace(-3,1,30),\n            'loss':['hinge','squared_hinge']\n        }\n    },\n    'SGD':\n    {\n        'model':SGDClassifier(),\n        'params':\n        {\n            'alpha':np.logspace(-3,1,30),\n            'penalty':['l1','l2','elasticnet'],\n            'l1_ratio':[0.05,0.1,0.15,0.20,0.25,0.35,0.5,0.6,0.7,0.8,0.9],\n        }\n    }\n}","eb4eac1d":"cv = RepeatedStratifiedKFold(n_splits=5,n_repeats=2)\nscores=[]\nfor model_name,params in model_params.items():\n    rs = GridSearchCV(params['model'],params['params'],cv=cv)\n    rs.fit(X,y)\n    scores.append([model_name,dict(rs.best_params_),rs.best_score_])\ndata=pd.DataFrame(scores,columns=['Model','Parameters','Score'])\ndata","5c374439":"param=data['Parameters']\nmodel = VotingClassifier(estimators=[('LR',LogisticRegression(**param[0])),\n                                           ('SVC', SVC(**param[1])),\n                                           ('RF',RandomForestClassifier(**param[2])),\n                                           ('KNN',KNeighborsClassifier(**param[3])),\n                                           ('PAC',PassiveAggressiveClassifier(**param[4])),\n                                           ('SGD',SGDClassifier(**param[5]))\n                                          ],voting='hard')\n\naccuracy=[]\n\nskf = RepeatedStratifiedKFold(n_splits=5,n_repeats=2)\nskf.get_n_splits(X,y)\n\nfor train_index, test_index in skf.split(X,y):\n    \n    X_train, X_test= X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test= y[train_index], y[test_index]\n    \n    model.fit(X_train,y_train)\n    predictions=model.predict(X_test)\n    score=accuracy_score(y_test,predictions)\n    accuracy.append(score)\n    ","3bed8d9a":"np.mean(accuracy)","c11dadfa":"## Using mutual_info_classif ","f035facd":"The following are the description of each feature:\n\n    1. age - age in years\n    \n    2. sex - sex ( 0 = female; 1 = male)\n    \n    3. cp - chest pain type (0 = asymptomatic; 1 = typical angina; 2 = atypical angina; 3 = non-anginal pain;)\n    \n    4. trestbps - resting blood pressure (in mm Hg on admission to the hospital)\n    \n    5. chol - serum cholestoral in mg\/dl\n    \n    6. fbs - fasting blood sugar > 120 mg\/dl (1 = true; 0 = false)\n    \n    7. restecg - resting electrocardiographic results (0 = hypertrophy ;1 = normal; 2 = having ST-T wave abnormality)\n    \n    8. thalach - maximum heart rate achieved\n    \n    9. exang - exercise induced angina (1 = yes; 0 = no)\n    \n    10. oldpeak - ST depression induced by exercise relative to rest\n    \n    11. slope - the slope of the peak exercise ST segment (0 = downsloping; 1 = flat; 2 = upsloping)\n    \n    12. ca - number of major vessels (0-3) colored by fluoroscopy\n    \n    13. thal - 1 = fixed defect; 2 = normal; 3 = reversible defect\n    \n    14. num - the predicted attribute - diagnosis of heart disease (angiographic disease status) (Value 0 = < diameter narrowing; Value 1 = > 50% diameter narrowing)\n","10c11922":"The model turned out to be ~85% accurate with the ensemble technique.<br>\nWith this, I'll conclude the EDA and Modelling of the Heart Disease Dataset!","edaa5ce7":"Hello everyone, this is my take on the **Heart Attack Analysis and Prediction** dataset in which I've made some interesting and insighful visualizations and I've also tried a few machine learning models to predict whether a person is likely to have a heart attack or not.","b7e96a91":"\n## Some Data Cleaning","bb7f5ab2":"Here are the best parameters for all of my chosen models","c97f9fb5":"# Importing libraries","11b6840e":"Ensembling your best models tend to give better overall results and it is a good practice whenever you want to solve a problem.","9534c262":"I tried to explore the data with the help of visualizations to find some interesting insights about it which could be useful for the model.","eb9ec704":"### Distribution of categorical with respect to the target feature","cd24ab57":"***","fef9975a":"So after all the tests and some trial and error, I decided to choose the following features for my model.","5e466705":"# Final Model","87118a61":"Instead of imputing the values, I'll be removing these rows from the dataset","35ce67f5":"So we'll replace them with the most frequent value in the thal column","1a2f0863":"With this, we can use the top 8 features","04c7c863":"# Modelling","02e2182a":"Before doing any further analysis on the data, we should first correct the incorrect data within some columns:","8bd06c88":"# Feature Selection","786a9591":"# Conclusion","7cedf809":"***","9a7f27ce":"***","7a6590b9":"***","136ae1d0":"# Loading the dataset","e06205e9":"After alot of trial and error, I found out 6 algorithms which worked the best with my chosen features.\nThey were:\n1. Logistic Regression\n2. SVC\n3. Random Forest\n4. PassiveAgressiveClassifer\n5. SGDC\n6. KNN","787f50c2":"***","31398c4a":"If you find it helpful and intuitive, then feel free to upvote the notebook. If there's anything I can improve on then do comment down below, your opinions and suggestions are valuable to me! Thank you! :)","c56aed0d":"# EDA","9214a0d6":"***","d8c2133b":"# Colors","efbe3dc8":"The values of **thal** lies between 1-3 but in the dataset, there's also a value 0 in 2 rows.","f4e0dc4c":"## Performing Pearson's Regression Test","d5ce4137":"***","3720bde0":"***","abe4daa8":"### Feature Description","4d32251f":"**Spot Checking** is a fast and easy way to see which algorithms will work the best with the features.\nIt gives you a good starting point as to which algorithms you should focus on depending upon their results.","b9906250":"# Introduction","ecc5ea23":"Also, the values in the **ca** feature should range between 0-3 but it also contains other value, 4 which indicated null values.","937fa6a7":"### Note","636a8561":"## Spot Checking","4c4c509c":"## Hyperparameter Tuning","035f7fd5":"Note: We can only use this if we're facing a classification problem.<br> For regression problems, we can use the mutual_info_regression function from the feature_selection library.","4319720f":"***","a846814c":"# Ensembling The Models","1457ebf9":"The smaller the p-value, the better a particular feature is in this test.\nAlso, The bigger the f-value, the better a feature is,","daca5a39":"Now let's see which features are significant to our target column","71b03784":"In this, we find the correlation coefficient between the features and the target variable.<br> \nAfter that we find the p-value and check it against alpha (Significance Level) to see if a feature will be significant to our model or not. ","0e0bb876":"## Performing Chi-Square Test","7d860845":"# <center>Thank You!"}}