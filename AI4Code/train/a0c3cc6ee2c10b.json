{"cell_type":{"75043bfb":"code","54594e8a":"code","da060875":"code","46360c0f":"code","61f24373":"code","61f94007":"code","11087203":"code","f995a66a":"code","04a957f6":"code","c2a41ed4":"code","a19d05c5":"code","a9e027a6":"code","8cb1ca6c":"code","999310b0":"code","7a09d9a5":"code","d69e2036":"code","4e1160b6":"code","72716b6a":"code","4f710cc0":"code","1a0ed2ec":"code","b8b05591":"code","164fb713":"code","dfce90e0":"code","f4f28a0d":"markdown","d017e212":"markdown","0777ec53":"markdown","795f216c":"markdown","c980ba75":"markdown","07c4443a":"markdown","fe2dc02a":"markdown","9119d3d9":"markdown","c15e8e71":"markdown","297de1b4":"markdown"},"source":{"75043bfb":"import math\nimport random\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets","54594e8a":"# G1: mean=(4, 4) std=(1, 1)\nG1 = np.random.normal(loc=0, scale=1, size=(5000, 2))\nG1 = G1+4","da060875":"# G2: mean=(0, -3) std=(1, 3)\nG2 = np.random.normal(loc=0, scale=1, size=(3000, 2))\nG2[:, 1] = G2[:, 1]*3\nG2[:, 1] = G2[:, 1]-3","46360c0f":"# G3: mean=(-4, 6) std=(1, 4)\nG3 = np.random.normal(loc=0, scale=1, size=(2000, 2))\nG3[:, 1] = G3[:, 1]*4\n\nG3 = G3.dot(np.array([[math.cos(45*180\/math.pi), -math.sin(45*180\/math.pi)], [math.sin(45*180\/math.pi), math.cos(45*180\/math.pi)]]))\nG3[:, 1] = G3[:, 1]+6\nG3[:, 0] = G3[:, 0]-4","61f24373":"plt.figure(figsize=(10, 10))\nplt.scatter(G1[:, 0], G1[:, 1], color=\"red\")\nplt.scatter(G2[:, 0], G2[:, 1], color=\"green\")\nplt.scatter(G3[:, 0], G3[:, 1], color=\"blue\")","61f94007":"G = np.append(G1, G2, axis=0)\nG = np.append(G, G3, axis=0)","11087203":"G.shape","f995a66a":"iris_dataset = datasets.load_iris()","04a957f6":"iris_data = iris_dataset[\"data\"]\niris_target = iris_dataset[\"target\"]\niris_dataset = np.concatenate((iris_data, np.reshape(iris_target, (-1, 1))), axis=1)\nnp.random.shuffle(iris_dataset)","c2a41ed4":"iris_data = iris_dataset[:, :-1]\niris_target = iris_dataset[:, -1]","a19d05c5":"iris_data_non = iris_data.copy()","a9e027a6":"iris_data_standard = iris_data.copy()","8cb1ca6c":"iris_data_standard[:, 0] = (iris_data_standard[:, 0] - iris_data_standard[:, 0].mean())\/(iris_data_standard[:, 0].std())\niris_data_standard[:, 1] = (iris_data_standard[:, 1] - iris_data_standard[:, 1].mean())\/(iris_data_standard[:, 1].std())\niris_data_standard[:, 2] = (iris_data_standard[:, 2] - iris_data_standard[:, 2].mean())\/(iris_data_standard[:, 2].std())\niris_data_standard[:, 3] = (iris_data_standard[:, 3] - iris_data_standard[:, 3].mean())\/(iris_data_standard[:, 3].std())","999310b0":"iris_data_scaling = iris_data.copy()","7a09d9a5":"iris_data_scaling[:, 0] = (iris_data_scaling[:, 0] -iris_data_scaling[:, 0].min()) \/ (iris_data_scaling[:, 0].max() - iris_data_scaling[:, 0].min())\niris_data_scaling[:, 1] = (iris_data_scaling[:, 1] -iris_data_scaling[:, 1].min()) \/ (iris_data_scaling[:, 1].max() - iris_data_scaling[:, 1].min())\niris_data_scaling[:, 2] = (iris_data_scaling[:, 2] -iris_data_scaling[:, 2].min()) \/ (iris_data_scaling[:, 2].max() - iris_data_scaling[:, 2].min())\niris_data_scaling[:, 3] = (iris_data_scaling[:, 3] -iris_data_scaling[:, 3].min()) \/ (iris_data_scaling[:, 3].max() - iris_data_scaling[:, 3].min())","d69e2036":"def kmeans(sample, K, maxiter):\n    num_sample = sample.shape[0]\n    dim_sample = sample.shape[1]\n    \n    # label of each sample\n    label_sample = np.zeros((num_sample, 1))\n    \n    # distance between each sample and each center of cluster\n    dist = np.zeros((num_sample, K))\n    \n    # select K center from sample\n    center_idx = random.sample(range(num_sample), K)\n    center_pos = sample[center_idx, :] \n    \n    iteration = 0\n    while iteration < maxiter:\n        for i in range(K):\n            dist[:, i] = np.sum((np.tile(center_pos[i, :], (num_sample, 1)) - sample)**2, axis=1)\n        \n        new_label_sample = np.argmin(dist, axis=1)\n        \n        if np.array_equal(new_label_sample, label_sample):\n            break\n        \n        label_sample = new_label_sample\n        \n        for i in range(K):\n            idx = np.nonzero(new_label_sample == i)[0]\n            if len(idx)>0:\n                center_pos[i, :] = np.mean(sample[idx, :], axis=0)\n        \n        iteration += 1\n    \n    return center_pos, label_sample","4e1160b6":"all_cominations = [[[0, 0], [1, 1], [2, 2]],\n                   [[0, 0], [1, 2], [2, 1]],\n                   [[0, 1], [1, 0], [2, 2]],\n                   [[0, 1], [1, 2], [2, 0]],\n                   [[0, 2], [1, 1], [2, 0]],\n                   [[0, 2], [1, 0], [2, 1]],\n                  ]","72716b6a":"center_pos, label_sample = kmeans(iris_data_non, 3, 100)","4f710cc0":"min_error = 1000\n\nfor combination in all_cominations:\n    error = ((label_sample == combination[0][0]) != (iris_target == combination[0][1])).sum() + ((label_sample == combination[1][0]) != (iris_target == combination[1][1])).sum() + ((label_sample == combination[2][0]) != (iris_target == combination[2][1])).sum()\n    min_error = min(min_error, error)\n\nprint(\"Error: \", min_error)","1a0ed2ec":"center_pos, label_sample = kmeans(iris_data_standard, 3, 100)","b8b05591":"min_error = 1000\n\nfor combination in all_cominations:\n    error = ((label_sample == combination[0][0]) != (iris_target == combination[0][1])).sum() + ((label_sample == combination[1][0]) != (iris_target == combination[1][1])).sum() + ((label_sample == combination[2][0]) != (iris_target == combination[2][1])).sum()\n    min_error = min(min_error, error)\n\nprint(\"Error: \", min_error)","164fb713":"center_pos, label_sample = kmeans(iris_data_scaling, 3, 100)","dfce90e0":"min_error = 1000\n\nfor combination in all_cominations:\n    error = ((label_sample == combination[0][0]) != (iris_target == combination[0][1])).sum() + ((label_sample == combination[1][0]) != (iris_target == combination[1][1])).sum() + ((label_sample == combination[2][0]) != (iris_target == combination[2][1])).sum()\n    min_error = min(min_error, error)\n\nprint(\"Error: \", min_error)","f4f28a0d":"### Scaling","d017e212":"### Standard Score","0777ec53":"### Non-Processed Data","795f216c":"## Use Iris Dataset","c980ba75":"### Non-Processed Data","07c4443a":"\n## Simulate Data","fe2dc02a":"## Test","9119d3d9":"### Standard Score","c15e8e71":"### Scaling","297de1b4":"## K-Means Algorithm"}}