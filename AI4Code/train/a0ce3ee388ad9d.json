{"cell_type":{"307d4c0b":"code","e0338492":"code","0011c12e":"code","b6f4a359":"code","6e2f5646":"code","26ba2ce7":"code","9ba08f00":"code","a6906a58":"code","18f96d51":"code","9c79105a":"code","095107d5":"code","a95bd853":"code","f4312678":"code","5acc268c":"code","f2ba8c03":"code","c258ef94":"code","c5ca83a1":"code","c98529b0":"code","b835f0d4":"code","03c68d48":"code","35f81a42":"code","4c0c06a3":"code","73090d26":"code","27913ea3":"code","d22856ff":"code","2e3aed73":"code","2f6fe954":"code","7c9707d8":"code","5f8645b0":"code","1a0c325a":"code","2533e91e":"code","bffffa43":"code","6e32addd":"code","02e3709d":"code","4be37507":"code","267458b7":"code","528785f2":"code","330942e3":"markdown","4b4da39c":"markdown","46b3fa5a":"markdown","9a1effa8":"markdown","3a2fe42c":"markdown","edeb23b5":"markdown","ef6094b1":"markdown","cbca6cae":"markdown","4c1be269":"markdown"},"source":{"307d4c0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/nlp-specialization-data\/'):\n    #for filename in filenames:\n    print((dirname))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e0338492":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import MinMaxScaler\n\nfrom keras.models import Sequential, load_model\nfrom keras.layers import LSTM, Dense, Dropout\nimport os","0011c12e":"df = pd.read_csv('\/kaggle\/input\/nlp-specialization-data\/Stock_Price_Prediction_AAPL_data.csv')\ndf.head()","b6f4a359":"df.info()","6e2f5646":"df","26ba2ce7":"df = df['open'].values","9ba08f00":"df","a6906a58":"df = df.reshape(-1, 1)\nprint(df.shape)","18f96d51":"df","9c79105a":"df.ndim","095107d5":"df.shape","a95bd853":"dataset_train = np.array(df[:int(df.shape[0]*0.8)])\ndataset_test = np.array(df[int(df.shape[0]*0.8)-50:])\nprint(dataset_train.shape)\nprint(dataset_test.shape)","f4312678":"scaler = MinMaxScaler(feature_range=(0,1))\ndataset_train = scaler.fit_transform(dataset_train)\ndataset_train[:5]","5acc268c":"dataset_test = scaler.transform(dataset_test)\ndataset_test[:5]","f2ba8c03":"def create_dataset(df):\n    x = []\n    y = []\n    for i in range(50, df.shape[0]):\n        x.append(df[i-50:i, 0])\n        y.append(df[i, 0])\n    x = np.array(x)\n    y = np.array(y)\n    return x,y ","c258ef94":"x_train, y_train = create_dataset(dataset_train)\nx_train[:2]","c5ca83a1":"y_train","c98529b0":"x_train.shape","b835f0d4":"y_train.shape","03c68d48":"x_test, y_test = create_dataset(dataset_test)\nx_test[:1]","35f81a42":"x_test.shape","4c0c06a3":"y_test.shape","73090d26":"# Reshape features for LSTM Layer\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))","27913ea3":"x_train.shape","d22856ff":"x_train.ndim","2e3aed73":"x_train.shape[1]","2f6fe954":"model = Sequential()\nmodel.add(LSTM(units=96, return_sequences=True, input_shape=(x_train.shape[1], 1)))\nmodel.add(Dropout(0.2))\nmodel.add(LSTM(units=96))\nmodel.add(Dropout(0.2))\nmodel.add(Dense(units=1))\n\nmodel.summary()","7c9707d8":"model.compile(loss='mean_squared_error', optimizer='adam')","5f8645b0":"if(not os.path.exists('stock_prediction.h5')):\n    model.fit(x_train, y_train, epochs=50, batch_size=32)\n    model.save('stock_prediction.h5')","1a0c325a":"model","2533e91e":"model","bffffa43":"model = load_model('stock_prediction.h5')","6e32addd":"model","02e3709d":"predictions = model.predict(x_test)\npredictions = scaler.inverse_transform(predictions)\n\nfig, ax = plt.subplots(figsize=(8,4))\nplt.plot(df, color='red',  label=\"True Price\")\nax.plot(range(len(y_train)+50,len(y_train)+50+len(predictions)),predictions, color='blue', label='Predicted Testing Price')\nplt.legend()","4be37507":"y_test_scaled = scaler.inverse_transform(y_test.reshape(-1, 1))\n\nfig, ax = plt.subplots(figsize=(8,4))\nax.plot(y_test_scaled, color='red', label='True Testing Price')\nplt.plot(predictions, color='blue', label='Predicted Testing Price')\nplt.legend()","267458b7":"x = x_test[-1]\nnum_next_predictions = 100\npreds = []\nfor i in range(num_next_predictions):\n    data = np.expand_dims(x, axis=0)\n    prediction = model.predict(data)\n    prediction = scaler.inverse_transform(prediction)\n    preds.append(prediction[0][0])\n    x = np.delete(x, 0, axis=0) # delete first\n    x = np.vstack([x, prediction]) # add prediction\n\nprint(preds)","528785f2":"data = [8th May, 7th May, 6th May May...................50 time steps]\nprediction = model.predict(data)","330942e3":"# <center> Stock Price Prediction ","4b4da39c":"### Loading in Dataset","46b3fa5a":"1, 3, 5, 7, 9, 11, 13, 15, 18, 20, 23, 26 <br>\nTime Steps : 4 <br>\n\nX -------------> Y <br>\n\n1 3 5  7 ------------->         9 <br>\n3 5 7  9 ------------->        11 <br>\n5 7 9  11 ------------->       13 <br>\n7 9 11 13 ------------->        15 <br>\n9, 11, 13, 15 ------------->    18 <br>\n <br>\n. <br>\n. <br>\n15 18 20 23 ------------->     26   (12-4) <br>","9a1effa8":"### Building Model","3a2fe42c":"### Preprocessing and Feature Extraction","edeb23b5":"## Reference Links -\n\n* Understanding LSTM Networks - https:\/\/colah.github.io\/posts\/2015-08-Understanding-LSTMs\/\n* https:\/\/wiki.pathmind.com\/recurrent-network-rnn\n* Recurrent Neural Networks (RNN) and Long Short-Term Memory (LSTM) - https:\/\/www.youtube.com\/watch?v=WCUNPb-5EYI","ef6094b1":"### Visualizing Results","cbca6cae":"![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/b\/b5\/Recurrent_neural_network_unfold.svg\/1920px-Recurrent_neural_network_unfold.svg.png)","4c1be269":"<img src=\"images\/Capture.PNG\" \/>"}}