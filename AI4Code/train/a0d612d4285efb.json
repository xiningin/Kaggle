{"cell_type":{"05281d63":"code","24ea4a94":"code","8bc16717":"code","546911af":"code","56422ac6":"code","4ca9428d":"code","241f5fa2":"code","fb001eba":"code","8cd55df2":"code","05571cc9":"code","7c69efc4":"code","0f51ea6f":"code","d9caf91a":"code","2f9352bc":"code","3a2c7fda":"code","d661d655":"code","30de923e":"code","2795e6ac":"code","38d8701a":"code","21ee502f":"code","88aadb4d":"code","b6aec2a0":"code","464fb626":"code","3d82e3fc":"markdown","42d5e3a7":"markdown","0df01540":"markdown","335ede3c":"markdown","931144e7":"markdown","30027ad6":"markdown","18a20d1d":"markdown","e119a050":"markdown","769a3488":"markdown","bd5e6bce":"markdown"},"source":{"05281d63":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","24ea4a94":"from sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn import model_selection\n\nfrom sklearn.metrics import classification_report, confusion_matrix, roc_curve, roc_auc_score,auc, accuracy_score\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n\nfrom sklearn.linear_model import LogisticRegression\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn import datasets\n\nfrom keras.datasets import mnist\n\nfrom keras.models import Sequential, load_model\n\nfrom keras.layers import Dense, Dropout, Flatten\n\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\n\nfrom keras.utils.np_utils import to_categorical","8bc16717":"data = pd.read_csv('\/kaggle\/input\/skin-cancer-mnist-ham10000\/hmnist_28_28_RGB.csv')\ndata.head()","546911af":"data2=pd.read_csv('\/kaggle\/input\/skin-cancer-mnist-ham10000\/HAM10000_metadata.csv')\ndata2.head()","56422ac6":"data.label.value_counts()","4ca9428d":"data.index","241f5fa2":"labels = [0,1,2,3,4,5,6]\nlabels","fb001eba":"n_samples = len(data.index)\nimages = np.array(data.drop(['label'],axis=1))\nimages = images.reshape(n_samples,28,28,3)","8cd55df2":"plt.imshow(images[50])","05571cc9":"plt.figure(figsize=(10,20))\nfor i in range(0,49) :\n    plt.subplot(10,5,i+1)\n    plt.axis('off')\n    plt.imshow(images[i], cmap=\"gray_r\")\n    plt.title(labels[data.label[i]])","7c69efc4":"y = data['label']\nX = data.drop(['label'] , axis=1)","0f51ea6f":"X = X\/255","d9caf91a":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)\n","2f9352bc":"from sklearn.neural_network import MLPClassifier\nmlp = MLPClassifier(hidden_layer_sizes=(200,100))\nmlp.fit(X_train,y_train)\ny_mlp = mlp.predict(X_test)\nprint(accuracy_score(y_test, y_mlp))","3a2c7fda":"from keras.utils.np_utils import to_categorical","d661d655":"from keras.models import Sequential\nfrom keras.layers import Dense","30de923e":"model = Sequential()\nmodel.add(Dense(200, activation='relu'))\nmodel.add(Dense(100, activation='relu'))\nmodel.add(Dense(50, activation='relu'))\nmodel.add(Dense(to_categorical(y).shape[1], activation='softmax'))","2795e6ac":"X_train, X_test, y_train, y_test = train_test_split(X, to_categorical(y), test_size=0.2, random_state=1)","38d8701a":"X_train = np.array(X_train)\nX_test = np.array(X_test)\ny_train = np.array(y_train)\ny_test = np.array(y_test)","21ee502f":"model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])","88aadb4d":"train = model.fit(X_train , y_train , validation_data=(X_test,y_test), epochs=50, verbose=1)","b6aec2a0":"model.evaluate(X_test,y_test)","464fb626":"def plot_scores(train) :\n    accuracy = train.history['accuracy']\n    val_accuracy = train.history['val_accuracy']\n    epochs = range(len(accuracy))\n    plt.plot(epochs, accuracy, 'b', label='Score apprentissage')\n    plt.plot(epochs, val_accuracy, 'r', label='Score validation')\n    plt.title('Scores')\n    plt.legend()\n    plt.show()\nplot_scores(train)","3d82e3fc":"On effectue le train","42d5e3a7":"On cr\u00e9e le modele pour le r\u00e9seau de neurones","0df01540":"On affiche la courbe des scores de validation","335ede3c":"On cr\u00e9e les sets pour le test et le train","931144e7":"on cr\u00e9e le test et le train","30027ad6":"On transforme en array","18a20d1d":"On trace les images, on doit rajouter un 3 dans le reshape car on a des valeurs pour les trois couleurs","e119a050":"J'ai import\u00e9 l'autre csv pour voir s'il y avait des informations pertinentes dedans","769a3488":"On normalise les valeurs","bd5e6bce":"On remarque que le nombre d'image selon les types de cancers n'est pas tr\u00e8s bien reparti, il y a beaucoup plus de 4 que les autres"}}