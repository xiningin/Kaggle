{"cell_type":{"ac524667":"code","b89ad317":"code","7760e952":"code","af299af4":"code","b4165716":"code","2141720e":"code","98c549f8":"code","fa683532":"code","d147992a":"code","48424070":"code","37a497d3":"code","b892060d":"code","f0c143c8":"code","a4cc4930":"code","50818dde":"code","50035b92":"code","75241272":"code","eabb7784":"code","dbaff344":"code","7a2c3e9b":"code","05d45e85":"code","96f9e7f3":"code","dd346df0":"code","c0895822":"code","7625f3be":"code","29c67af9":"code","1d1e75a8":"code","bd0b5b5e":"code","df9dbf58":"code","8083394c":"code","48ac246a":"code","64a85511":"markdown","e2cc9553":"markdown","b3f66b1f":"markdown","cc9d8c35":"markdown","8eccdc0a":"markdown","4c30ecec":"markdown","da02c75c":"markdown","a59f42e9":"markdown","91553397":"markdown","703e0398":"markdown","f78d7cbc":"markdown","b9a687b7":"markdown","5490d34d":"markdown","64aeb941":"markdown","a5f9cad3":"markdown","52b0d3ad":"markdown","83f85770":"markdown","4f2690f9":"markdown","07245c7b":"markdown","873f7804":"markdown","6db5f345":"markdown","94b48d76":"markdown","a281e02d":"markdown","e4ecf179":"markdown","86892df4":"markdown","b4fc6b1d":"markdown","45c0efd3":"markdown"},"source":{"ac524667":"import numpy as np\nimport pandas as pd","b89ad317":"train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')  #traning data\ny = train[\"SalePrice\"]  #target\nX = train.drop(labels=[\"SalePrice\"], axis=1)  #traning set\ntest = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')  #testing data","7760e952":"X","af299af4":"y","b4165716":"test","2141720e":"cat_features = [\"MSZoning\", \"MSSubClass\", \"Street\", \"Alley\",\n                \"LotShape\", \"LandContour\", \"Utilities\", \"LotConfig\",\n                \"LandSlope\", \"Neighborhood\",\"Condition1\", \n                \"Condition2\", \"BldgType\", \"HouseStyle\", \n                \"RoofStyle\", \"RoofMatl\", \"Exterior1st\", \"Exterior2nd\",\n                \"MasVnrType\", \"ExterQual\", \"ExterCond\", \"Foundation\",\n                \"BsmtQual\", \"BsmtCond\", \"BsmtExposure\", \"BsmtFinType1\",\n                \"BsmtFinType2\", \"Heating\", \"HeatingQC\", \"CentralAir\",\n                \"Electrical\", \"Functional\", \"FireplaceQu\", \"GarageType\",\n                \"GarageFinish\", \"GarageQual\", \"GarageCond\", \"PavedDrive\",\n                \"SaleType\", \"SaleCondition\", \"PoolQC\", \"Fence\", \"MiscFeature\",\n                \"KitchenQual\"] ","98c549f8":"ordinal = [\"OverallQual\", \"OverallCond\", \"YearBuilt\", \"YearRemodAdd\", \n \"GarageYrBlt\", \"GarageCars\", \"MoSold\", \"YrSold\"]","fa683532":"absolute = [\"LotFrontage\", \"LotArea\", \"MasVnrArea\", \"BsmtFinSF1\", \n \"BsmtFinSF2\", \"BsmtUnfSF\", \"TotalBsmtSF\", \"1stFlrSF\", \"2ndFlrSF\",\n \"LowQualFinSF\", \"BsmtFullBath\", \"BsmtHalfBath\", \"FullBath\", \n \"HalfBath\", \"BedroomAbvGr\", \"KitchenAbvGr\", \"TotRmsAbvGrd\", \n \"Fireplaces\", \"GarageArea\", \"WoodDeckSF\", \"OpenPorchSF\", \"EnclosedPorch\",\n \"3SsnPorch\", \"ScreenPorch\", \"PoolArea\"]","d147992a":"X[absolute].isnull().sum()","48424070":"X[cat_features].isnull().sum()","37a497d3":"X[ordinal].isnull().sum()","b892060d":"!pip install category_encoders","f0c143c8":"import category_encoders as ce\ncb_enc = ce.CatBoostEncoder(cols=cat_features, verbose=1)\n\nX = X.drop(labels=cat_features, axis=1).join(cb_enc.fit_transform(X[cat_features], y))  #transform cat_feature columns\ntest = test.drop(labels=cat_features, axis=1).join(cb_enc.transform(test[cat_features]))\nprint(len(test))","a4cc4930":"X","50818dde":"from sklearn.impute import KNNImputer, SimpleImputer\nknn_imp = KNNImputer()\nsimp_imp = SimpleImputer(strategy=\"median\")\n\nX = pd.DataFrame(simp_imp.fit_transform(X), columns=X.columns)\ntest = pd.DataFrame(simp_imp.fit_transform(test), columns=test.columns)","50035b92":"X[absolute].isnull().sum()","75241272":"X[ordinal].isnull().sum()","eabb7784":"# from sklearn.preprocessing import StandardScaler\n# ss = StandardScaler()\n# columns = X.columns\n# X = pd.DataFrame(ss.fit_transform(X), columns=columns)\n# test = pd.DataFrame(ss.transform(test), columns=columns)","dbaff344":"print(\"Quantity of features:\", f\"train: {len(X.columns)}\", f\"test: {len(test.columns)}\", sep=\"\\n\")","7a2c3e9b":"# from sklearn.feature_selection import SelectFromModel\n\n# cbr = CatBoostRegressor().fit(X, y)\n# model = SelectFromModel(cbr, prefit=True)\n\n# X_transformed = model.transform(X)\n\n# best_features = pd.DataFrame(\n#     model.inverse_transform(X_transformed), \n#     index=X.index,\n#     columns=X.columns\n# )\n\n# best_features = best_features.columns[best_features.var() != 0]","05d45e85":"# # Get the valid dataset with the selected features.\n# X = X[best_features]\n# test = test[best_features]","96f9e7f3":"X","dd346df0":"print(\"Quantity of features:\", f\"X: {len(X.columns)}\", f\"test: {len(test.columns)}\", sep=\"\\n\")","c0895822":"from vecstack import StackingTransformer\nfrom sklearn.pipeline import Pipeline","7625f3be":"from catboost import CatBoostRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.ensemble import RandomForestRegressor","29c67af9":"# 1st level estimator parameters\nd1 = 3\nd2 = 7\nd3 = 11\nd4 = 13\nrs = 42\n              \n# L1 StackingTransformer\nL1_stack = StackingTransformer(\n    estimators=[\n        (f'CatBoost depth={d1}', CatBoostRegressor(verbose=False, eval_metric=\"RMSE\", random_seed=rs, depth=d1)),\n        (f'CatBoost depth={d2}', CatBoostRegressor(verbose=False, eval_metric=\"RMSE\", random_seed=rs, depth=d2)),\n        (f'CatBoost depth={d3}', CatBoostRegressor(verbose=False, eval_metric=\"RMSE\", random_seed=rs, depth=d3)),\n        \n        (f'XGBoost depth={d1}', XGBRegressor(seed=rs, max_depth=d1)),\n        (f'XGBoost depth={d2}', XGBRegressor(seed=rs, max_depth=d2)),\n        (f'XGBoost depth={d3}', XGBRegressor(seed=rs, max_depth=d3)),\n        \n        (f'RandomForest depth={d1}', RandomForestRegressor(random_state=rs, max_depth=d1)),\n        (f'RandomForest depth={d2}', RandomForestRegressor(random_state=rs, max_depth=d2)),\n        (f'RandomForest depth={d3}', RandomForestRegressor(random_state=rs, max_depth=d3))\n    ], \n    regression=True,\n    verbose=2, \n    random_state=42, \n    n_folds=5, \n    variant=\"A\"\n)","1d1e75a8":"# 2n level estimator\nfrom sklearn.linear_model import LinearRegression\n\nfinal_estimator = LinearRegression()","bd0b5b5e":"model = Pipeline(\n    steps=[\n        (\"L1_stack\", L1_stack),\n        (\"Final_estimator\", final_estimator)\n    ]\n)","df9dbf58":"model.fit(X, y)","8083394c":"y_pred = model.predict(test)","48ac246a":"submission = pd.read_csv(\"..\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv\")\nsubmission[\"SalePrice\"] = y_pred\nsubmission.to_csv('submission.csv', index=False)","64a85511":"# Scaling","e2cc9553":"Stacking Pipeline","b3f66b1f":"# Submit","cc9d8c35":"Categorical features","8eccdc0a":"CatBoost features","4c30ecec":"Target","da02c75c":"# Devide data by types\n> ","a59f42e9":"# Select best features","91553397":"Absolute values have a lot of Nan values thats why they need to be replaced with some values. To impute the values I'll use the K Nearest Heighbors Imputer.","703e0398":"# Imputations","f78d7cbc":"# Model","b9a687b7":"testing set","5490d34d":"# Load the data","64aeb941":"Testing set","a5f9cad3":"# Import essential libraries","52b0d3ad":"# Categorical values","83f85770":"Not all features make the model more accurate. Some may even decrease it. To prevent our model from such a situation we will select best features for CatBoostRegressor","4f2690f9":"# Check null values for each datatype","07245c7b":"Make prediction","873f7804":"Install the encoder","6db5f345":"# View the data","94b48d76":"Absolute features","a281e02d":"To deal with categorical values I will be using CatBoost Encoder <br>\nhttps:\/\/contrib.scikit-learn.org\/category_encoders\/catboost.html","e4ecf179":"Ordinal features","86892df4":"![](http:\/\/camo.githubusercontent.com\/1ba204e6a09e6f13c919dcf961fe5a9a7f2d6e30\/687474703a2f2f73746f726167652e6d64732e79616e6465782e6e65742f6765742d646576746f6f6c732d6f70656e736f757263652f3235303835342f636174626f6f73742d6c6f676f2e706e67)","b4fc6b1d":"L1 Stack","45c0efd3":"Fit the pipeline"}}