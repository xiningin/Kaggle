{"cell_type":{"2fb49b5f":"code","bdea8d43":"code","f5103ea2":"code","e9d1b931":"code","47388b7b":"code","c1a58e7c":"code","17227bbe":"code","5754ba44":"code","d9f03fb1":"code","b793ebed":"code","c8b0d46c":"code","9384bd0b":"code","5a4fcf03":"code","c38eedb3":"code","d70a52ab":"code","472c9379":"code","c2c8f7e9":"code","770e88c9":"code","ef13f93d":"code","5b27a2dc":"code","c5e2d582":"code","fd29dea0":"code","e77e40af":"code","241abbaf":"markdown","09f9921e":"markdown","1d8ca3d4":"markdown","5ebea14a":"markdown","a9fd8288":"markdown","ecd1421b":"markdown","9ca90b8a":"markdown","18e609dd":"markdown","a0fccc3b":"markdown","278c03b3":"markdown","e705efb0":"markdown","5941aa80":"markdown","862392fb":"markdown","460bae18":"markdown","43d14626":"markdown","9756f151":"markdown","bd398fa3":"markdown","97d6c895":"markdown","69b75d62":"markdown","db11facb":"markdown","38cd2b92":"markdown","d1d41824":"markdown","07297ac0":"markdown","34808453":"markdown","9b160e83":"markdown","7acca97c":"markdown","76069aa2":"markdown","d2dbc1de":"markdown","28713328":"markdown"},"source":{"2fb49b5f":"import matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\nimport numpy as np\nimport plotly.express as px\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bdea8d43":"data= pd.read_csv('..\/input\/english-premier-league202021\/EPL_20_21.csv')\ndata.head()","f5103ea2":"fig_bar = px.bar(data_frame=data.nlargest(10, 'Goals')[['Name', 'Goals']],\n                 x='Name', y='Goals', color='Goals', text='Goals')\nfig_bar.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig_bar.update_layout(title_text='Top 10 Goal Kings of the League',  # Main title for the project\n                      title_x=0.5, title_font=dict(size=30))  # Location and the font size of the main title\nfig_bar.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig_bar.show()","e9d1b931":"fig_bar = px.bar(data_frame=data.nlargest(10, 'Assists')[['Name', 'Assists']],\n                 x='Name', y='Assists', color='Assists', text='Assists')\nfig_bar.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig_bar.update_layout(title_text='Top 10 Assist Kings of the League',  # Main title for the project\n                      title_x=0.5, title_font=dict(size=30))  # Location and the font size of the main title\nfig_bar.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig_bar.show()","47388b7b":"DF_players = data[data['Position'].str.contains(\"DF\")]\nDF_players_red = DF_players.nlargest(10, 'Red_Cards')[['Name', 'Red_Cards', 'Yellow_Cards']]\nfig = px.bar(DF_players_red, x=\"Name\", y=[\"Red_Cards\", \"Yellow_Cards\"],\n             color_discrete_map={\n                 \"Red_Cards\": \"red\",\n                 \"Yellow_Cards\": \"yellow\"}\n\n             )\nfig.update_layout(title_text='Top 10 DF Players who have the most Red Card',\n                  title_x=0.5, title_font=dict(size=30))\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","c1a58e7c":"DF_players_yellow = DF_players.nlargest(10, 'Yellow_Cards')[['Name', 'Red_Cards', 'Yellow_Cards']]\nfig = px.bar(DF_players_yellow, x=\"Name\", y=[\"Red_Cards\", \"Yellow_Cards\"],\n             color_discrete_map={\n                 \"Red_Cards\": \"red\",\n                 \"Yellow_Cards\": \"yellow\"}\n             )\nfig.update_layout(title_text='Top 10 DF Players who have the most Yellow Card',\n                  title_x=0.5, title_font=dict(size=30))\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","17227bbe":"fig_bar = px.bar(data_frame=data.nlargest(10, 'Age')[['Name', 'Age']],\n                 x='Name', y='Age', color='Age', text='Age')\nfig_bar.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig_bar.update_layout(title_text='Top 10 Players due to Ages',  # Main title for the project\n                      title_x=0.5, title_font=dict(size=30))  # Location and the font size of the main title\nfig_bar.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig_bar.show()","5754ba44":"plt.figure(figsize=(15, 8))\nsns.distplot(data['Age'], hist=True, color='red')\nplt.xlabel(\"Ages\", fontsize=12)\nplt.ylabel('Density', fontsize=12)\nplt.title(\"Density Plot of the Ages\", fontsize=16)","d9f03fb1":"fig_bar = px.bar(data_frame=data.nlargest(10, 'Passes_Attempted')[['Name', 'Passes_Attempted']],\n                 x='Name', y='Passes_Attempted', color='Passes_Attempted', text='Passes_Attempted')\nfig_bar.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig_bar.update_layout(title_text='Top 10 Players due to Passes Attempted',  # Main title for the project\n                      title_x=0.5, title_font=dict(size=30))  # Location and the font size of the main title\nfig_bar.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig_bar.show()","b793ebed":"Nat_Card_avr = data.groupby(by=['Nationality']).mean()\nNat_Card_avr_top = Nat_Card_avr.nlargest(10, 'Red_Cards')[['Red_Cards', 'Yellow_Cards']]\nfig = px.bar(Nat_Card_avr_top, x=Nat_Card_avr_top.index, y=[\"Red_Cards\", \"Yellow_Cards\"],\n             color_discrete_map={\n                 \"Red_Cards\": \"red\",\n                 \"Yellow_Cards\": \"yellow\"}\n\n             )\nfig.update_layout(title_text='Top 10 Average Red and Yellow Cards due to Nationality',\n                  title_x=0.5, title_font=dict(size=30))\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","c8b0d46c":"Nationality = data.groupby(pd.Grouper(key='Nationality')).size().reset_index(name='count')\nfig = px.treemap(Nationality, path=['Nationality'], values='count')\nfig.update_layout(title_text='Nationalities of the League',\n                  title_x=0.5, title_font=dict(size=30)\n                  )\nfig.update_traces(textinfo=\"label+value\")\nfig.show()","9384bd0b":"NumberofPlayers = data.groupby(pd.Grouper(key='Club')).size().reset_index(name='count')\nfig = px.treemap(NumberofPlayers, path=['Club'], values='count')\nfig.update_layout(title_text='Number of Players for each Club',\n                  title_x=0.5, title_font=dict(size=30)\n                  )\nfig.update_traces(textinfo=\"label+value\")\nfig.show()","5a4fcf03":"goalsbyteam = data['Goals'].groupby(data['Club']).sum().sort_values(ascending=False).to_frame()\nfig = px.bar(data_frame=goalsbyteam, x=goalsbyteam.index, y='Goals', color='Goals')\nfig.update_layout(title_text='Number of Goals by the Teams',\n                  title_x=0.5, title_font=dict(size=30))\nfig.update_layout(xaxis={'categoryorder': 'total descending'})\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","c38eedb3":"assistsbyteam = data['Assists'].groupby(data['Club']).sum().sort_values(ascending=False).to_frame()\nfig = px.bar(data_frame=assistsbyteam, x=assistsbyteam.index, y='Assists', color='Assists')\nfig.update_layout(title_text='Number of Assists by the Teams',\n                  title_x=0.5, title_font=dict(size=30))\nfig.update_layout(xaxis={'categoryorder': 'total descending'})\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","d70a52ab":"redcardbyteam = data['Red_Cards'].groupby(data['Club']).sum().sort_values(ascending=False).to_frame()\nfig = px.bar(data_frame=redcardbyteam, x=redcardbyteam.index, y='Red_Cards', color='Red_Cards')\nfig.update_layout(title_text='Number of Red Cards by the Teams',\n                  title_x=0.5, title_font=dict(size=30))\nfig.update_layout(xaxis={'categoryorder': 'total descending'})\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","472c9379":"yellowcardbyteam = data['Yellow_Cards'].groupby(data['Club']).sum().sort_values(ascending=False).to_frame()\nfig = px.bar(data_frame=yellowcardbyteam, x=yellowcardbyteam.index, y='Yellow_Cards', color='Yellow_Cards')\nfig.update_layout(title_text='Number of Yellow Cards by the Teams',\n                  title_x=0.5, title_font=dict(size=30))\nfig.update_layout(xaxis={'categoryorder': 'total descending'})\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","c2c8f7e9":"plt.figure(figsize=(15, 8))\nsns.distplot(data['Matches'], color='red')\nsns.distplot(data['Starts'], color='blue')\nplt.xlabel(\"Matches and Starts\", fontsize=12)\nplt.ylabel('Density', fontsize=12)\nplt.legend(['Matches', 'Starts'], loc='upper right')\nplt.title(\"Density Plot of the Matches and Starts\", fontsize=16)","770e88c9":"Grouped_NumofGoals = data.groupby(pd.Grouper(key='Goals')).size().reset_index(name='count')\nlabels = Grouped_NumofGoals['Goals'].values\nvalues = Grouped_NumofGoals['count'].values\n\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, opacity=0.8)])\nfig.update_traces(textinfo='percent+label', marker=dict(line=dict(color='#000000', width=2)))\nfig.update_layout(title_text='Distribution of the Goals', title_x=0.5, title_font=dict(size=32))\nfig.show()","ef13f93d":"DF_players_scored = data[data['Position'].str.contains(\"DF\")]\nDF_players_scored = DF_players_scored.drop(DF_players_scored.index[DF_players_scored['Goals'] == 0])\nfig = px.bar(data_frame=DF_players_scored, x='Name', y='Goals', color='Goals')\nfig.update_layout(title_text='Defenders with most goals!! (Wow!)',\n                  title_x=0.5, title_font=dict(size=30))\nfig.update_layout(xaxis={'categoryorder': 'total descending'})\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","5b27a2dc":"GK_players = data[data['Position'].str.contains(\"GK\")]\nGK_players_top = GK_players.nlargest(10, 'Goals')[['Name', 'Goals', 'Assists']]\nfig = px.bar(GK_players_top, x=\"Name\", y=[\"Goals\", \"Assists\"],\n             color_discrete_map={\n                 \"Red_Cards\": \"red\",\n                 \"Yellow_Cards\": \"yellow\"}\n\n             )\nfig.update_layout(title_text='Scored and Assisted GK Players',\n                  title_x=0.5, title_font=dict(size=30))\nfig.update_layout(xaxis={'categoryorder': 'total descending'})\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","c5e2d582":"PenaltyPerAttempted = pd.concat([data['Name'], 1\/(data['Penalty_Attempted']\/data['Penalty_Goals'])], axis=1)\nPenaltyPerAttempted = PenaltyPerAttempted.replace([np.inf], np.nan).dropna(axis=0)\nfig = px.bar(data_frame=PenaltyPerAttempted, x='Name', y=0, color=0)\nfig.update_layout(title_text='Graph of Players who have the highest Penalty_Goals\/Penalty_Attempted Ratio',\n                  title_x=0.5, title_font=dict(size=20))\nfig.update_layout(xaxis={'categoryorder': 'total descending'})\nfig.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig.show()","fd29dea0":"fig_bar = px.bar(data_frame=data.nlargest(25, 'Perc_Passes_Completed')[['Name', 'Perc_Passes_Completed']],\n                 x='Name', y='Perc_Passes_Completed', color='Perc_Passes_Completed', text='Perc_Passes_Completed')\nfig_bar.update_traces(marker=dict(line=dict(color='#000000', width=2)))\nfig_bar.update_layout(title_text='Top 25 Players due to Percentage of Passes Completed',\n                      title_x=0.5, title_font=dict(size=30))\nfig_bar.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig_bar.show()","e77e40af":"plt.figure(figsize=(15, 8))\ncorrelation = sns.heatmap(data.corr(), vmin=-1, vmax=1, annot=True, linewidths=1, linecolor='black')\ncorrelation.set_title('Correlation Graph of the Dataset', fontdict={'fontsize': 24})","241abbaf":"# Top 10 Players due to Ages","09f9921e":"# Number of Yellow Cards by the Teams","1d8ca3d4":"# Top 10 DF Players that have the most Yellow Card","5ebea14a":"**Willy Cabarello was the oldest player of this season.**","a9fd8288":"# Importing the Libraries","ecd1421b":"**According to graph above, the Assist King of the season is Harry Kane with 14 assists. Kevin De Bruyne followed him with 12 assists and, Bruno Fernandes also has 12 assists.**\n\n**Harry Kane is both the Goal King and Assist King of this season. Congrats for his success!**","9ca90b8a":"# Top 10 Average Red and Yellow Cards due to Nationality","18e609dd":"# All Scored DF Players","a0fccc3b":"# Top 25 Players due to Percentage of Passes Completed","278c03b3":"# Top 10 DF Players that have the most Red Card","e705efb0":"# Number of Red Cards by the Teams","5941aa80":"# Density Plot of the Ages","862392fb":"# Number of Players for each Club","460bae18":"# Density Plot of the Matches and Starts","43d14626":"# Scored and Assisted GK Players","9756f151":"# Graph of Players who have the highest Penalty_Goals\/Penalty_Attempted Ratio","bd398fa3":"**Harry Maguire is the top DF player who has the most yellow cards of this season.**","97d6c895":"# Distribution of the Goals","69b75d62":"**Lewis Dunk is the top DF player who has the most red cards of this season.**","db11facb":"# Nationalities of the League","38cd2b92":"# <Center>Premier League Player Analysis<Center>","d1d41824":"# Goals by the Teams","07297ac0":"# Dataset\n\n**Dataset inludes the Statistics of the Premier League Players. As seen from the below, the dataset includes these features.**","34808453":"# Top 10 Goal Kings","9b160e83":"**According to graph above, the Goal King of the season is Harry Kane with 23 goals. Mohamed Salah followed him with 22 goals and so on.**","7acca97c":"# Number of Assists by the Teams","76069aa2":"# Correlation Graph","d2dbc1de":"# Top 10 Players due to Passes Attempted","28713328":"# Top 10 Assist Kings"}}