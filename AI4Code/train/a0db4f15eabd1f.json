{"cell_type":{"f42aa35a":"code","95be5d2b":"code","cb5f954b":"code","ab3be85e":"code","9aaa9a69":"code","06b34b29":"code","4a267483":"code","091a43e1":"code","9f5e258e":"code","22d0d66f":"markdown","065cef8f":"markdown","a4754557":"markdown","150583ad":"markdown","697cb91c":"markdown","e1c91250":"markdown","071f86a6":"markdown","62678a80":"markdown"},"source":{"f42aa35a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport PIL\nimport matplotlib.pyplot as plt\nimport glob\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\ni = 0\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        if i > 20:\n            break\n        i = i+1\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","95be5d2b":"im = PIL.Image.open('\/kaggle\/input\/ships-in-satellite-imagery\/shipsnet\/shipsnet\/1__20170909_181729_0e0f__-122.35067750648894_37.78126618441992.png')","cb5f954b":"plt.imshow(im);","ab3be85e":"r, g, b = im.split()\n\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(10, 3))\n\naxes[0].imshow(r, cmap=\"Reds\");\naxes[1].imshow(g, cmap=\"Greens\");\naxes[2].imshow(b, cmap=\"Blues\");\n","9aaa9a69":"im2 = im.transpose(PIL.Image.ROTATE_90)\n\nr, g, b = im2.split()\n\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(10, 3))\n\naxes[0].imshow(r, cmap=\"Reds\");\naxes[1].imshow(g, cmap=\"Greens\");\naxes[2].imshow(b, cmap=\"Blues\");\n","06b34b29":"im3 = im.convert(\"L\")\n\nplt.imshow(im3);","4a267483":"r, g, b = im.split()\n\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(10, 3), sharex=True, sharey=True)\n\naxes[0].hist(np.array(r).flatten(), bins=50);\naxes[1].hist(np.array(g).flatten(), bins=50);\naxes[2].hist(np.array(b).flatten(), bins=50);\n\naxes[0].set_title(\"R\");\naxes[1].set_title(\"G\");\naxes[2].set_title(\"B\");\n\nfor ax in axes:\n    ax.set_ylabel(\"Frequency\")\n    ax.set_xlabel(\"Value\")","091a43e1":"r, g, b = im.split()\nr = np.array(r)\ng = np.array(g)\nb = np.array(b)\n\nr = (r - r.mean()) \/ r.std()\ng = (g - g.mean()) \/ g.std()\nb = (b - b.mean()) \/ b.std()\n\nfig, axes = plt.subplots(nrows=1, ncols=3, figsize=(10, 3), sharex=True, sharey=True)\n\naxes[0].hist(r.flatten(), bins=30, color=\"k\");\naxes[1].hist(g.flatten(), bins=30, color=\"k\");\naxes[2].hist(b.flatten(), bins=30, color=\"k\");\n\naxes[0].set_title(\"Red band\");\naxes[1].set_title(\"Green band\");\naxes[2].set_title(\"Blue band\");\n\naxes[0].set_ylabel(\"Frequency\")\naxes[0].set_xlabel(\"Normalized value\")\n    \nfig.subplots_adjust(wspace=0.05)","9f5e258e":"fig, axes = plt.subplots(nrows=5, ncols=5, figsize=(15, 15), sharex=True, sharey=True)\nfor i, f in enumerate(glob.glob(\"\/kaggle\/input\/ships-in-satellite-imagery\/shipsnet\/shipsnet\/*.png\")[0:25]):\n    ax = axes[int(i\/5)][int(i%5)]\n    im = PIL.Image.open(f)\n    ax.imshow(im)","22d0d66f":"Next, we can try splitting the bands of the image (R, G, and B) and displaying them separately:","065cef8f":"We we do machine learning, it often works best when inputs have a mean of zero and a standard deviation of 1. So we can \"normalize\" our data by subtracting the mean and dividing by the standard deviation:","a4754557":"First, we can try opening one of the images and displaying it:","150583ad":"# Group exercise\n\nCreate histograms of the means and standard deviations of luminance for the images in this dataset, where luminance is represented as a value between zero and 1.\n\nSo for example, if the dataset had three images and their average luminances were 123, 254, and 16, respectively, then you would create the mean histogram as `plt.hist([123\/255, 254\/255, 16\/255])`. (We divide by 255 because we want to luminance as a value between 0 and 1, but in the image it is represented as a value between 0 and 255.)","697cb91c":"Finally, it is of course useful to analyze more than one image. We'll try displaying 25 of them:","e1c91250":"Later in this course we will be doing some machine learning using images. We we're doing machine learning, it can be useful to do what's called \"data augmentation\", where we flip, rotate, crop, or do other operations to our input images to make the machine learning algoirthm think we have more data than we actually do. To practice this, we'll try rotating our image by 90 degrees:","071f86a6":"We can also display and calculate some statistics for our image:","62678a80":"It can also be useful to look at the luminance of the image, which is the equivalent of converting a color photo into black and white:"}}