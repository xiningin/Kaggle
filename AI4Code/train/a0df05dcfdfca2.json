{"cell_type":{"90987da6":"code","c5502419":"code","b6a4e3a1":"code","e4d79e7a":"code","e9161d00":"code","4934d640":"code","b31e6752":"code","3e8ffa27":"code","9fc15d11":"code","7884dc88":"code","2b659328":"code","624c2b3e":"code","b609165c":"code","cec4aa1c":"code","09f99142":"code","0af9f000":"code","b9dd19b3":"code","5f7a0ca5":"code","ce89d689":"markdown"},"source":{"90987da6":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import feature_selection\nfrom sklearn import model_selection\nfrom sklearn import metrics","c5502419":"train_df = pd.read_csv(\"..\/input\/train.csv\")\ntest_df = pd.read_csv(\"..\/input\/test.csv\")\ndata = train_df.append(test_df)","b6a4e3a1":"data['Title'] = data['Name']\nfor name_string in data['Name']:\n    data['Title'] = data['Name'].str.extract('([A-Za-z]+)\\.', expand=True)\ndata['Title'].value_counts()","e4d79e7a":"title_changes = {'Mlle': 'Miss', 'Major': 'Mr', 'Col': 'Mr', 'Sir': 'Mr', 'Don': 'Mr', 'Mme': 'Miss',\n          'Jonkheer': 'Mr', 'Lady': 'Mrs', 'Capt': 'Mr', 'Countess': 'Mrs', 'Ms': 'Miss', 'Dona': 'Mrs'}\ndata.replace({'Title': title_changes}, inplace=True)\ntitles = ['Dr', 'Master', 'Miss', 'Mr', 'Mrs', 'Rev']\nfor title in titles:\n    age_to_impute = data.groupby('Title')['Age'].median()[titles.index(title)]\n    data.loc[(data['Age'].isnull()) & (data['Title'] == title), 'Age'] = age_to_impute\ntrain_df['Age'] = data['Age'][:891]\ntest_df['Age'] = data['Age'][891:]\ndata.drop('Title', axis = 1, inplace = True)","e9161d00":"data['Family_Size'] = data['Parch'] + data['SibSp']\ntrain_df['Family_Size'] = data['Family_Size'][:891]\ntest_df['Family_Size'] = data['Family_Size'][891:]","4934d640":"data['Last_Name'] = data['Name'].apply(lambda x: str.split(x, \",\")[0])\ndata['Fare'].fillna(data['Fare'].mean(), inplace=True)\nDEFAULT_SURVIVAL_VALUE = 0.5\ndata['Family_Survival'] = DEFAULT_SURVIVAL_VALUE","b31e6752":"for grp, grp_df in data[['Survived','Name', 'Last_Name', 'Fare', 'Ticket', 'PassengerId',\n                           'SibSp', 'Parch', 'Age', 'Cabin']].groupby(['Last_Name', 'Fare']):   \n    if (len(grp_df) != 1):\n        for ind, row in grp_df.iterrows():\n            smax = grp_df.drop(ind)['Survived'].max()\n            smin = grp_df.drop(ind)['Survived'].min()\n            passID = row['PassengerId']\n            if (smax == 1.0):\n                data.loc[data['PassengerId'] == passID, 'Family_Survival'] = 1\n            elif (smin==0.0):\n                data.loc[data['PassengerId'] == passID, 'Family_Survival'] = 0\nprint(\"Number of passengers with family survival information:\", \n      data.loc[data['Family_Survival']!=0.5].shape[0])","3e8ffa27":"for _, grp_df in data.groupby('Ticket'):\n    if (len(grp_df) != 1):\n        for ind, row in grp_df.iterrows():\n            if (row['Family_Survival'] == 0) | (row['Family_Survival']== 0.5):\n                smax = grp_df.drop(ind)['Survived'].max()\n                smin = grp_df.drop(ind)['Survived'].min()\n                passID = row['PassengerId']\n                if (smax == 1.0):\n                    data.loc[data['PassengerId'] == passID, 'Family_Survival'] = 1\n                elif (smin==0.0):\n                    data.loc[data['PassengerId'] == passID, 'Family_Survival'] = 0                      \nprint(\"Number of passenger with family\/group survival information: \" \n      +str(data[data['Family_Survival']!=0.5].shape[0]))\ntrain_df['Family_Survival'] = data['Family_Survival'][:891]\ntest_df['Family_Survival'] = data['Family_Survival'][891:]","9fc15d11":"data['Fare'].fillna(data['Fare'].median(), inplace = True)\ndata['FareBin'] = pd.qcut(data['Fare'], 5)\nlabel = LabelEncoder()\ndata['FareBin_Code'] = label.fit_transform(data['FareBin'])\ntrain_df['FareBin_Code'] = data['FareBin_Code'][:891]\ntest_df['FareBin_Code'] = data['FareBin_Code'][891:]\ntrain_df.drop(['Fare'], 1, inplace=True)\ntest_df.drop(['Fare'], 1, inplace=True)","7884dc88":"data['AgeBin'] = pd.qcut(data['Age'], 4)\nlabel = LabelEncoder()\ndata['AgeBin_Code'] = label.fit_transform(data['AgeBin'])\ntrain_df['AgeBin_Code'] = data['AgeBin_Code'][:891]\ntest_df['AgeBin_Code'] = data['AgeBin_Code'][891:]\ntrain_df.drop(['Age'], 1, inplace=True)\ntest_df.drop(['Age'], 1, inplace=True)","2b659328":"train_df['Sex'].replace(['male','female'],[0,1],inplace=True)\ntest_df['Sex'].replace(['male','female'],[0,1],inplace=True)\ntrain_df.drop(['Name', 'PassengerId', 'SibSp', 'Parch', 'Ticket', 'Cabin',\n               'Embarked'], axis = 1, inplace = True)\ntest_df.drop(['Name','PassengerId', 'SibSp', 'Parch', 'Ticket', 'Cabin',\n              'Embarked'], axis = 1, inplace = True)","624c2b3e":"train_df.head(10)","b609165c":"X = train_df.drop('Survived', 1)\ny = train_df['Survived']\nX_test = test_df.copy()","cec4aa1c":"std_scaler = StandardScaler()\nX = std_scaler.fit_transform(X)\nX_test = std_scaler.transform(X_test)","09f99142":"n_neighbors = [6,7,8,9,10,11,12,14,16,18,20,22]\nalgorithm = ['auto']\nweights = ['uniform', 'distance']\nleaf_size = list(range(1,50,5))\nhyperparams = {'algorithm': algorithm, 'weights': weights, 'leaf_size': leaf_size, \n               'n_neighbors': n_neighbors}\ngd=GridSearchCV(estimator = KNeighborsClassifier(), param_grid = hyperparams, verbose=True, \n                cv=10, scoring = \"roc_auc\")\ngd.fit(X, y)\nprint(gd.best_score_)\nprint(gd.best_estimator_)","0af9f000":"gd.best_estimator_.fit(X, y)\ny_pred = gd.best_estimator_.predict(X_test)","b9dd19b3":"knn = KNeighborsClassifier(algorithm='auto', leaf_size=26, metric='minkowski', \n                           metric_params=None, n_jobs=1, n_neighbors=6, p=2, \n                           weights='uniform')\nknn.fit(X, y)\ny_pred = knn.predict(X_test)","5f7a0ca5":"temp = pd.DataFrame(pd.read_csv(\"..\/input\/test.csv\")['PassengerId'])\ntemp['Survived'] = y_pred\ntemp.to_csv(\"..\/working\/submission.csv\", index = False)","ce89d689":"# KNeighborsClassifier\n\nThis kernel is written after observing techniques of many people. So you may find similarities. I have done many modifications when this was my private kernel. I have removed all those. I will be writing an explanatory kernel soon. This is for people who can understand what is happen"}}