{"cell_type":{"4904f711":"code","f17b206e":"code","f45c1e5c":"code","31147b2d":"code","7148de5b":"code","87fffc27":"code","42bf5141":"code","4fed94ad":"code","c6aa8407":"code","1f250a30":"code","78651478":"code","90a66267":"code","ef52bee3":"code","7b640a68":"code","8dc526f1":"code","edd64cfa":"code","10ce67f8":"code","2cab35b5":"code","89362dea":"code","fd21fc0a":"code","cce043c1":"code","97aec40c":"code","3ae097c4":"code","150af91d":"code","3eb63c03":"code","3457e676":"code","7788f85b":"code","3b095d9c":"code","f6375f36":"code","1087759d":"code","6f21195c":"code","12f9f54f":"code","9f6bbfe1":"code","b2d06e8e":"code","4349adc5":"code","3fd25c45":"code","a8238b59":"code","a4697a60":"code","8edf0bbe":"markdown","208b0890":"markdown","0fab0838":"markdown","54e1fc44":"markdown","c4362b3b":"markdown","23d86f78":"markdown","22cf0ad4":"markdown","b106d836":"markdown","6bd4a07b":"markdown","6da83898":"markdown","17925a09":"markdown","f804759a":"markdown","c4f2707c":"markdown","02eb8f85":"markdown","44302c2f":"markdown"},"source":{"4904f711":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Ignore warning\nimport warnings\nwarnings.filterwarnings(\"ignore\")","f17b206e":"train_df = pd.read_csv('..\/input\/titanic\/train.csv',index_col='PassengerId')\ntest_df = pd.read_csv('..\/input\/titanic\/test.csv',index_col='PassengerId')","f45c1e5c":"train_df.head()","31147b2d":"df1 = train_df.copy()","7148de5b":"#Missing Values\nplt.figure(figsize=(20,10))\nsns.heatmap(df1.isnull(),yticklabels=False,cbar=False)","87fffc27":"#Need to handle missing value of age after EDA as it have more missing value and mean will not be a good option\n#Filling missing value of Embarked\ndf1['Embarked'].unique()","42bf5141":"df2 = df1.dropna(subset=['Embarked'])","4fed94ad":"#Drop Cabin as it have more than 70% missing value\ndf3 = df2.drop('Cabin',axis=1)","c6aa8407":"#Make new feature as title\ndf3['Title'] = df3['Name'].str.replace(r'(.*, )|(\\..*)','')","1f250a30":"#Drop Name colums\ndf4 = df3.drop(['Name','Ticket'],axis=1)","78651478":"df4.head()\n#Comment: looks good","90a66267":"df4.info()\n#Comment: Everything looks good here","ef52bee3":"cat_col = ['Pclass','Sex','Embarked','Title']\nnum_col = ['Age','SibSp','Parch','Fare']","7b640a68":"for col in cat_col:\n  plt.figure(figsize=(20,10))\n  sns.countplot(df4[col])\n  plt.title(col)\n  plt.show()","8dc526f1":"#Converting rare values to others in Title\ndf5 = df4.copy()\ndf5['Title'] = df5['Title'].apply(lambda x: 'others' if x not in ['Mr','Mrs','Miss','Master'] else x)\n","edd64cfa":"df5.describe()","10ce67f8":"for col in num_col:\n  plt.figure(figsize=(20,10))\n  sns.distplot(df5[col],kde=False)\n  plt.title(col)\n  plt.show()","2cab35b5":"df6 = df5.copy()\n#SibSP\ndf6['SibSp'] = df6['SibSp'].apply(lambda x: 3 if x>2 else x)\n\n#Parch\ndf6['Parch'] = df6['Parch'].apply(lambda x: 3 if x>2 else x)","89362dea":"for col in cat_col:\n  print(df6.groupby(col)['Survived'].mean())","fd21fc0a":"for col in num_col:\n  plt.figure(figsize=(20,10))\n  sns.swarmplot(x=df6['Survived'],y=df6[col])\n  plt.title(col)\n  plt.show()","cce043c1":"for col in num_col:\n  plt.figure(figsize=(20,10))\n  sns.boxplot(x=df6['Survived'],y=df6[col])\n  plt.title(col)\n  plt.show()","97aec40c":"sns.heatmap(df6.corr(),annot=True)","3ae097c4":"sns.boxplot(x=df6['Pclass'],y=df6['Age'])","150af91d":"df6.groupby('Pclass')['Age'].mean()","3eb63c03":"#Handleing missing value of Age\ndf7 = df6.copy()\n\ndef age_miss(df):\n  if np.isnan(df['Age']):\n    if df['Pclass']==1:\n      return 38\n    elif df['Pclass']==2:\n      return 29\n    elif df['Pclass']==3:\n      return 25\n  else:    \n    return df['Age']  \n\ndf7['Age'] = df6.apply(age_miss,axis=1)       ","3457e676":"final_df = df7.copy()","7788f85b":"test_df = test_df.dropna(subset=['Embarked'])\ntest_df = test_df.drop('Cabin',axis=1)\ntest_df['Title'] = test_df['Name'].str.replace(r'(.*, )|(\\..*)','')\ntest_df = test_df.drop(['Name','Ticket'],axis=1)\ntest_df['Title'] = test_df['Title'].apply(lambda x: 'others' if x not in ['Mr','Mrs','Miss','Master'] else x)\ndef age_miss(df):\n  if np.isnan(df['Age']):\n    if df['Pclass']==1:\n      return 38\n    elif df['Pclass']==2:\n      return 29\n    elif df['Pclass']==3:\n      return 25\n  else:    \n    return df['Age']  \n\ntest_df['Age'] = test_df.apply(age_miss,axis=1) ","3b095d9c":"final_df.columns","f6375f36":"features = ['Pclass', 'Sex','Age','Embarked', 'Title']\nX = final_df[features]\ny = final_df.Survived\ntest = test_df[features]","1087759d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","6f21195c":"X_train.head(3)","12f9f54f":"from sklearn.pipeline import make_pipeline,Pipeline\nfrom sklearn.compose import make_column_transformer\n\nfrom sklearn.preprocessing import OneHotEncoder\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\n\nfrom sklearn.model_selection import GridSearchCV","9f6bbfe1":"#Define preprocessing variable\nohe = OneHotEncoder()\n\n#Define model and there parameters\nparams = [{'classifier':[RandomForestClassifier()],\n           'classifier__n_estimators':[10,25,50,75,100],\n           'classifier__max_depth':[5,10,15,20]},\n          \n          {'classifier':[LogisticRegression()],\n           'classifier__penalty':['l1','l2'],\n           'classifier__C':[0.01,0.1,1,10,100,1000],\n           'classifier__max_iter':[10,100,1000]},\n          \n          {'classifier':[KNeighborsClassifier()],\n           'classifier__n_neighbors':[2,5,10]}]\n\n#Preprocessing\npreprocessing = make_column_transformer((ohe,['Pclass', 'Sex','Embarked', 'Title']),remainder='passthrough')\n\n#Pipeline\npipe = Pipeline([('preprocessing',preprocessing),\n                 ('classifier',RandomForestClassifier())])","b2d06e8e":"gr = GridSearchCV(pipe,param_grid=params,cv=5).fit(X_train,y_train)","4349adc5":"gr.best_params_","3fd25c45":"submit = pd.DataFrame(gr.predict(test),index=test_df.index,columns=['Survived'])","a8238b59":"submit.reset_index(inplace=True)","a4697a60":"submit.to_csv('Submission.csv',index=False)","8edf0bbe":"## EDA","208b0890":"### Bi-Variate analysis","0fab0838":"## Prediction and Submission","54e1fc44":"## Test data\n","c4362b3b":"## Data Cleaning","23d86f78":"## Model Building","22cf0ad4":"### Univariate analysis","b106d836":"## Import modules","6bd4a07b":"## Preprocessing using sklearn pipeline(For Beginners and Intermediate)\n\nIn this notbook I have shown you how to preprocess your data using sklearn module. Here are some benifits:-\n1. Prerocessing will be done seoeratly on training and testing data\n2. GridsearchCV can be used on pipeline to find best hyperparameter for preprocessing.\n3. (Myfav) - You can provide string value for prediction. Pipeline will handle all the encoding steps.\n\nIf you like this notebook please do upvote.","6da83898":"### Preprocessing","17925a09":"If you like this notebook please do upvote.","f804759a":"### Splitting of  data","c4f2707c":"## Titanic: Machine Learning from Disaster\n\n**Data Dictionary**\n\n|Variable\t|Definition\t|Key|\n|---------|-----------|---|\n|survival\t|Survival\t|0 = No, 1 = Yes|\n|pclass\t|Ticket class\t|1 = 1st, 2 = 2nd, 3 = 3rd|\n|sex\t|Sex|\t\n|Age\t|Age in years\t|\n|sibsp\t|# of siblings \/ spouses aboard the Titanic|\t\n|parch\t|# of parents \/ children aboard the Titanic|\t\n|ticket\t|Ticket number|\t\n|fare\t|Passenger fare|\t\n|cabin\t|Cabin number|\t\n|embarked\t|Port of Embarkation\t|C = Cherbourg, Q = Queenstown, S = Southampton|\n\n**Variable Notes**\n\npclass: A proxy for socio-economic status (SES)\n<br \/>1st = Upper\n<br \/>2nd = Middle\n<br \/>3rd = Lower \n\nage: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n\n<br \/>sibsp: The dataset defines family relations in this way...\n<br \/>Sibling = brother, sister, stepbrother, stepsister\n<br \/>Spouse = husband, wife (mistresses and fianc\u00e9s were ignored)\n\n<br \/>parch: The dataset defines family relations in this way...\n<br \/>Parent = mother, father\n<br \/>Child = daughter, son, stepdaughter, stepson\n<br \/>Some children travelled only with a nanny, therefore parch=0 for them.","02eb8f85":"## Read data","44302c2f":"Comment: \n1. SibSp does not play important role to predict survivors.\n2. Age and Pclass are correlated"}}