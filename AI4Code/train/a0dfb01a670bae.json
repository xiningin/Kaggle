{"cell_type":{"52f881b3":"code","fcf368dc":"code","f80aa708":"code","a7c0ef23":"code","d422b84c":"code","bb20a1ea":"code","6e11fb91":"code","b4815942":"code","b798196f":"code","f44f823f":"code","913e0466":"code","3046bd98":"code","2682207a":"code","15a168e5":"code","f705d66a":"code","2bf093ac":"code","5ff5cf53":"code","f8bc1e56":"code","aa143732":"code","9b117121":"code","23c05291":"code","8b8b93d5":"code","87f4c9db":"code","26d9bdb0":"code","fdd48be1":"code","0433a0e7":"code","abc75275":"code","cd9e060d":"code","993516fc":"code","ebfecda2":"code","db0a6032":"code","cbf355b7":"code","0936ea62":"code","0dd33e70":"code","05fc4dca":"code","e12ecc7b":"code","16d507ce":"code","c52e402f":"code","84650395":"code","1de0d216":"code","e442b1e6":"code","a28d728b":"code","5919f993":"code","0b01eded":"code","ae1cf03b":"code","9f1a9f49":"code","947edb43":"code","d1dd34af":"code","dce4a264":"code","0440bd4b":"code","ad330a70":"code","77ee889e":"code","a12a0a44":"code","1cbdf959":"code","b8dba92d":"code","9ffe304d":"code","20069634":"markdown","73e1b3c1":"markdown","95a97510":"markdown","63e0f0ed":"markdown","d3751a57":"markdown","83f9086a":"markdown","fecba02a":"markdown","ab9b7dd7":"markdown","79df45bb":"markdown","d34fc724":"markdown","e2f7ff47":"markdown","11ffe246":"markdown","aacfcce9":"markdown","40bb6761":"markdown","2be21785":"markdown","4f1b224f":"markdown","c6526cc0":"markdown","d85953d2":"markdown"},"source":{"52f881b3":"#Importing all the required libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","fcf368dc":"# Importing dataset\n\ndata = pd.read_csv(\"..\/input\/nyse\/prices-split-adjusted.csv\")\ndf = pd.DataFrame(data)","f80aa708":"df.head()","a7c0ef23":"df.describe()","d422b84c":"# showing column wise %ge of NaN values they contains \n\nfor i in df.columns:\n  print(i,\"\\t-\\t\", df[i].isna().mean()*100)\n","bb20a1ea":"df = df[df['symbol']=='AAP']   # Choosin stock values for any company \n\ncormap = df.corr()\nfig, ax = plt.subplots(figsize=(5,5))\nsns.heatmap(cormap, annot = True)","6e11fb91":"def get_corelated_col(cor_dat, threshold): \n  # Cor_data to be column along which corelation to be measured \n  #Threshold be the value above which of corelation to considered\n  feature=[]\n  value=[]\n\n  for i ,index in enumerate(cor_dat.index):\n    if abs(cor_dat[index]) > threshold:\n      feature.append(index)\n      value.append(cor_dat[index])\n\n  df = pd.DataFrame(data = value, index = feature, columns=['corr value'])\n  return df\n","b4815942":"top_corelated_values = get_corelated_col(cormap['close'], 0.60)\ntop_corelated_values","b798196f":"df = df[top_corelated_values.index]\ndf.head()","f44f823f":"df.shape","913e0466":"sns.pairplot(df)\nplt.tight_layout()","3046bd98":"X = df.drop(['close'], axis=1)\ny = df['close']","2682207a":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX = pd.DataFrame(scaler.fit_transform(X), columns=X.columns)\nX.head()","15a168e5":"#now lets split data in test train pairs\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, shuffle=False)\n\nAcc = []","f705d66a":"from sklearn.linear_model import LinearRegression\n\n# model training\n\nmodel_1 = LinearRegression()\nmodel_1.fit(X_train, y_train)","2bf093ac":"# prediction\ny_pred_1 = model_1.predict(X_test)\npred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_1})\npred_df.head()","5ff5cf53":"# Measure the Accuracy Score\n\nfrom sklearn.metrics import r2_score\n \nprint(\"Accuracy score of the predictions: {0}\".format(r2_score(y_test, y_pred_1)))\nAcc.append(r2_score(y_test, y_pred_1))","f8bc1e56":"plt.figure(figsize=(8,8))\nplt.ylabel('Close Price', fontsize=16)\nplt.plot(pred_df)\nplt.legend(['Actual Value', 'Predictions'])\nplt.show()","aa143732":"# Model Creation\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\ndef regressor(inp_dim):\n    \n    model = Sequential()\n    \n    model.add(Dense(20, input_dim=inp_dim, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(25, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(10, kernel_initializer='normal', activation='relu'))\n    model.add(Dense(1, kernel_initializer='normal'))\n    \n    model.compile(loss='mean_squared_error', optimizer='adam')\n    \n    return model","9b117121":"# Model Training\n\nmodel_2 = regressor(inp_dim=3)\nmodel_2.fit(X_train, y_train, epochs=70, validation_split=0.2)","23c05291":"# Prediction\n\ny_pred_2 = model_2.predict(X_test)","8b8b93d5":"pred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_2.flatten()})\npred_df.head()","87f4c9db":"# Measure the Accuracy Score\n\nfrom sklearn.metrics import r2_score\n \nprint(\"Accuracy score of the predictions: {0}\".format(r2_score(y_test, y_pred_2)))\nAcc.append(r2_score(y_test, y_pred_2))","26d9bdb0":"plt.figure(figsize=(8,8))\nplt.ylabel('Close Price', fontsize=16)\nplt.plot(pred_df)\nplt.legend(['Actual Value', 'Predictions'])\nplt.show()","fdd48be1":"X_train = np.array(X_train).reshape(X_train.shape[0], X_train.shape[1], 1)\nX_test = np.array(X_test).reshape(X_test.shape[0], X_test.shape[1], 1)","0433a0e7":"from tensorflow.keras import Sequential,utils\nfrom tensorflow.keras.layers import Flatten, Dense, Conv1D, MaxPool1D, Dropout\n\ndef reg():\n    \n    model = Sequential()\n    \n    model.add(Conv1D(32, kernel_size=(3,), padding='same', activation='relu', input_shape = (X_train.shape[1],1)))\n    model.add(Conv1D(64, kernel_size=(3,), padding='same', activation='relu'))\n    model.add(Conv1D(128, kernel_size=(5,), padding='same', activation='relu'))\n    \n    model.add(Flatten())\n    \n    model.add(Dense(50, activation='relu'))\n    model.add(Dense(20, activation='relu'))\n    model.add(Dense(units = 1))\n    \n    model.compile(loss='mean_squared_error', optimizer='adam')\n    \n    return model","abc75275":"# Model Training\n\nmodel_3 = reg()\nmodel_3.fit(X_train, y_train, epochs=100, validation_split=0.2)","cd9e060d":"# Prediction\n\ny_pred_3 = model_3.predict(X_test)","993516fc":"pred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_3.flatten()})\npred_df.head()","ebfecda2":"# Measure the Accuracy Score\n\nfrom sklearn.metrics import r2_score\n \nprint(\"Accuracy score of the predictions: {0}\".format(r2_score(y_test, y_pred_3)))\nAcc.append(r2_score(y_test, y_pred_3))","db0a6032":"plt.figure(figsize=(8,8))\nplt.ylabel('Close Price', fontsize=16)\nplt.plot(pred_df)\nplt.legend(['Actual Value', 'Predictions'])\nplt.show()","cbf355b7":"plt.plot(range(3), Acc, color='green', linestyle='dashed', linewidth = 3, \n         marker='o', markerfacecolor='blue', markersize=12) \nplt.ylabel('Acc')\nplt.xlabel('Models')\nplt.title(\"Accuracies\")\nplt.xticks(range(3), ['Linear Regression', 'ANN', 'CNN'])\nplt.show()","0936ea62":"close = df.reset_index()['close']\nclose.head()","0dd33e70":"plt.plot(close)\nplt.show()","05fc4dca":"time_step = 30\nX, y = [], []\n\nfor i in range(len(close)-time_step-1):\n    X.append(close[i:(i+time_step)])\n    y.append(close[(i+time_step)])\n\nX = np.array(X)\ny = np.array(y)","e12ecc7b":"X[:5]","16d507ce":"y[:5]","c52e402f":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\nX = scaler.fit_transform(X)\npd.DataFrame(X).head()","84650395":"#now lets split data in test train pairs\n\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, shuffle=False)\n\nAcc = []","1de0d216":"X_train_ = X_train.reshape(X_train.shape[0],X_train.shape[1],1)\nX_test_ = X_test.reshape(X_test.shape[0],X_test.shape[1],1)","e442b1e6":"from tensorflow.keras.layers import LSTM\n\ndef Reg():\n    model = Sequential()\n    \n    model.add(LSTM(70, return_sequences=True, input_shape=(30,1)))\n    model.add(LSTM(70, return_sequences=True))\n    model.add(LSTM(70))\n    model.add(Dense(1))\n    \n    model.compile(loss='mean_squared_error', optimizer='adam')\n    \n    return model","a28d728b":"# Model Training\n\nmodel_1 = reg()\nmodel_1.fit(X_train_, y_train, epochs=100, validation_split=0.2)","5919f993":"# Prediction\n\ny_pred_1 = model_1.predict(X_test_)","0b01eded":"pred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_1.flatten()})\npred_df.head()","ae1cf03b":"# Measure the Accuracy Score\n\nfrom sklearn.metrics import r2_score\n \nprint(\"Accuracy score of the predictions: {0}\".format(r2_score(y_test, y_pred_1)))\nAcc.append(r2_score(y_test, y_pred_1))","9f1a9f49":"plt.figure(figsize=(8,8))\nplt.ylabel('Close Price', fontsize=16)\nplt.plot(pred_df)\nplt.legend(['Actual Value', 'Predictions'])\nplt.show()","947edb43":"# Model Training\n\nmodel_2 = regressor(inp_dim=30)\nmodel_2.fit(X_train, y_train, epochs=100, validation_split=0.2)","d1dd34af":"# Prediction\n\ny_pred_2 = model_2.predict(X_test)","dce4a264":"# Measure the Accuracy Score\n\nfrom sklearn.metrics import r2_score\n \nprint(\"Accuracy score of the predictions: {0}\".format(r2_score(y_test, y_pred_2)))\nAcc.append(r2_score(y_test, y_pred_2))","0440bd4b":"plt.figure(figsize=(8,8))\nplt.ylabel('Close Price', fontsize=16)\nplt.plot(pred_df)\nplt.legend(['Actual Value', 'Predictions'])\nplt.show()","ad330a70":"# Model Training\n\nmodel_3 = reg()\nmodel_3.fit(X_train_, y_train, epochs=100, validation_split=0.2)","77ee889e":"# Prediction\n\ny_pred_3 = model_3.predict(X_test_)","a12a0a44":"pred_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred_3.flatten()})\npred_df.head()","1cbdf959":"# Measure the Accuracy Score\n\nfrom sklearn.metrics import r2_score\n \nprint(\"Accuracy score of the predictions: {0}\".format(r2_score(y_test, y_pred_3)))\nAcc.append(r2_score(y_test, y_pred_3))","b8dba92d":"plt.figure(figsize=(8,8))\nplt.ylabel('Close Price', fontsize=16)\nplt.plot(pred_df)\nplt.legend(['Actual Value', 'Predictions'])\nplt.show()","9ffe304d":"\nplt.plot(range(3), Acc, color='green', linestyle='dashed', linewidth = 3, \n         marker='o', markerfacecolor='blue', markersize=12) \nplt.ylabel('Acc')\nplt.xlabel('Models')\nplt.title(\"Accuracies\")\nplt.xticks(range(3), ['LSTM', 'ANN', 'CNN'])\nplt.show()","20069634":"> Since other parameters have linear relationship with __close__, we are using some linear models fore prediction","73e1b3c1":"## Prediction Model","95a97510":"## Prediction","63e0f0ed":"### 1. Linear Regression","d3751a57":"### 3. CNN","83f9086a":"> Comparision of Accuracies of different models","fecba02a":"### Now converting data in a time series data and applying some more models.","ab9b7dd7":"### 3. CNN","79df45bb":"### 2. ANN","d34fc724":"### Data Information","e2f7ff47":"## Stock Price Prediction","11ffe246":"> Comparision of Accuracies of different models","aacfcce9":"**********************","40bb6761":"> Looks like all colums except _volume_ are ***highly co-related***. Using them for predictions.","2be21785":"> Since there is no null valus, we can move further ","4f1b224f":"> Since range of data in different columns veries significantly we need to scale the independent variable i.e. X. For this we will use Min-Max Scaling.","c6526cc0":"### 2. ANN","d85953d2":"### 1. LSTM"}}