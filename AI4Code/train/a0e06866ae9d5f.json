{"cell_type":{"72803c01":"code","af36fb43":"code","e4d0cba6":"code","32b172b7":"code","fd4a05d0":"code","4b1bed32":"code","d707b89d":"code","977abfe9":"code","486888aa":"code","3c5ada53":"code","c4e5e8b7":"code","b2bf9e11":"code","05e1be17":"code","83b2e6aa":"code","bbd6e667":"code","02b03655":"code","ddfa9295":"code","5d92a03a":"code","5db11156":"code","1ef123ab":"code","31ce9e73":"code","4b98e351":"code","a40716f2":"code","11409b40":"code","4c5fdfd7":"code","a1bfc621":"markdown","c837359d":"markdown","0f8cf626":"markdown","f00f7f43":"markdown","42c9860d":"markdown","ecdf3a4c":"markdown","161296ee":"markdown","23db9976":"markdown","7b9287ce":"markdown","31fc239f":"markdown","3ae51de2":"markdown","0c524eda":"markdown","d5fcd1b5":"markdown","c15432a4":"markdown","8438ee63":"markdown","12a110aa":"markdown"},"source":{"72803c01":"# libraries\nimport numpy as np\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nimport torch\nfrom torch.utils.data import TensorDataset, DataLoader,Dataset\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision\nimport torchvision.transforms as transforms\nimport torch.optim as optim\nfrom torch.optim import lr_scheduler\nimport time \nfrom PIL import Image\ntrain_on_gpu = True\nfrom torch.utils.data.sampler import SubsetRandomSampler\nfrom torch.optim.lr_scheduler import StepLR, ReduceLROnPlateau, CosineAnnealingLR\nfrom sklearn.metrics import accuracy_score\nimport cv2","af36fb43":"!pip install albumentations > \/dev\/null 2>&1\n!pip install pretrainedmodels > \/dev\/null 2>&1\n!pip install kekas > \/dev\/null 2>&1\n!pip install adabound > \/dev\/null 2>&1","e4d0cba6":"# more imports\nimport albumentations\nfrom albumentations import torch as AT\nimport pretrainedmodels\nimport adabound\n\nfrom kekas import Keker, DataOwner, DataKek\nfrom kekas.transformations import Transformer, to_torch, normalize\nfrom kekas.metrics import accuracy\nfrom kekas.modules import Flatten, AdaptiveConcatPool2d\nfrom kekas.callbacks import Callback, Callbacks, DebuggerCallback\nfrom kekas.utils import DotDict","32b172b7":"labels = pd.read_csv('..\/input\/train.csv')\nfig = plt.figure(figsize=(25, 8))\ntrain_imgs = os.listdir(\"..\/input\/train\/train\")\nfor idx, img in enumerate(np.random.choice(train_imgs, 20)):\n    ax = fig.add_subplot(4, 20\/\/4, idx+1, xticks=[], yticks=[])\n    im = Image.open(\"..\/input\/train\/train\/\" + img)\n    plt.imshow(im)\n    lab = labels.loc[labels['id'] == img, 'has_cactus'].values[0]\n    ax.set_title(f'Label: {lab}')","fd4a05d0":"test_img = os.listdir('..\/input\/test\/test')\ntest_df = pd.DataFrame(test_img, columns=['id'])\ntest_df['has_cactus'] = -1\ntest_df['data_type'] = 'test'\n\nlabels['has_cactus'] = labels['has_cactus'].astype(int)\nlabels['data_type'] = 'train'\n\nlabels.head()","4b1bed32":"labels.loc[labels['data_type'] == 'train', 'has_cactus'].value_counts()","d707b89d":"# splitting data into train and validation\ntrain, valid = train_test_split(labels, stratify=labels.has_cactus, test_size=0.2)","977abfe9":"def reader_fn(i, row):\n    image = cv2.imread(f\"..\/input\/{row['data_type']}\/{row['data_type']}\/{row['id']}\")[:,:,::-1] # BGR -> RGB\n    label = torch.Tensor([row[\"has_cactus\"]])\n    return {\"image\": image, \"label\": label}","486888aa":"def augs(p=0.5):\n    return albumentations.Compose([\n        albumentations.HorizontalFlip(),\n        albumentations.VerticalFlip(),\n        albumentations.RandomBrightness(),\n    ], p=p)","3c5ada53":"def get_transforms(dataset_key, size, p):\n\n    PRE_TFMS = Transformer(dataset_key, lambda x: cv2.resize(x, (size, size)))\n\n    AUGS = Transformer(dataset_key, lambda x: augs()(image=x)[\"image\"])\n\n    NRM_TFMS = transforms.Compose([\n        Transformer(dataset_key, to_torch()),\n        Transformer(dataset_key, normalize())\n    ])\n    \n    train_tfms = transforms.Compose([PRE_TFMS, AUGS, NRM_TFMS])\n    val_tfms = transforms.Compose([PRE_TFMS, NRM_TFMS])\n    \n    return train_tfms, val_tfms","c4e5e8b7":"train_tfms, val_tfms = get_transforms(\"image\", 32, 0.5)","b2bf9e11":"train_dk = DataKek(df=train, reader_fn=reader_fn, transforms=train_tfms)\nval_dk = DataKek(df=valid, reader_fn=reader_fn, transforms=val_tfms)\n\nbatch_size = 64\nworkers = 0\n\ntrain_dl = DataLoader(train_dk, batch_size=batch_size, num_workers=workers, shuffle=True, drop_last=True)\nval_dl = DataLoader(val_dk, batch_size=batch_size, num_workers=workers, shuffle=False)","05e1be17":"test_dk = DataKek(df=test_df, reader_fn=reader_fn, transforms=val_tfms)\ntest_dl = DataLoader(test_dk, batch_size=batch_size, num_workers=workers, shuffle=False)","83b2e6aa":"class Net(nn.Module):\n    def __init__(\n            self,\n            num_classes: int,\n            p: float = 0.2,\n            pooling_size: int = 2,\n            last_conv_size: int = 1664,\n            arch: str = \"densenet169\",\n            pretrained: str = \"imagenet\") -> None:\n        \"\"\"A simple model to finetune.\n        \n        Args:\n            num_classes: the number of target classes, the size of the last layer's output\n            p: dropout probability\n            pooling_size: the size of the result feature map after adaptive pooling layer\n            last_conv_size: size of the flatten last backbone conv layer\n            arch: the name of the architecture form pretrainedmodels\n            pretrained: the mode for pretrained model from pretrainedmodels\n        \"\"\"\n        super().__init__()\n        net = pretrainedmodels.__dict__[arch](pretrained=pretrained)\n        modules = list(net.children())[:-1]  # delete last layer\n        # add custom head\n        modules += [nn.Sequential(\n            # AdaptiveConcatPool2d is a concat of AdaptiveMaxPooling and AdaptiveAveragePooling \n            # AdaptiveConcatPool2d(size=pooling_size),\n            Flatten(),\n            nn.BatchNorm1d(1664),\n            nn.Dropout(p),\n            nn.Linear(1664, num_classes)\n        )]\n        self.net = nn.Sequential(*modules)\n\n    def forward(self, x):\n        logits = self.net(x)\n        return logits","bbd6e667":"dataowner = DataOwner(train_dl, val_dl, None)\nmodel = Net(num_classes=1)\ncriterion = nn.BCEWithLogitsLoss()","02b03655":"def step_fn(model: torch.nn.Module,\n            batch: torch.Tensor) -> torch.Tensor:\n    \"\"\"Determine what your model will do with your data.\n\n    Args:\n        model: the pytorch module to pass input in\n        batch: the batch of data from the DataLoader\n\n    Returns:\n        The models forward pass results\n    \"\"\"\n    \n    inp = batch[\"image\"]\n    return model(inp)","ddfa9295":"def bce_accuracy(target: torch.Tensor,\n                 preds: torch.Tensor,\n                 thresh: bool = 0.5) -> float:\n    target = target.cpu().detach().numpy()\n    preds = (torch.sigmoid(preds).cpu().detach().numpy() > thresh).astype(int)\n    return accuracy_score(target, preds)\n  \ndef roc_auc(target: torch.Tensor,\n                 preds: torch.Tensor) -> float:\n    target = target.cpu().detach().numpy()\n    preds = torch.sigmoid(preds).cpu().detach().numpy()\n    return roc_auc_score(target, preds)","5d92a03a":"keker = Keker(model=model,\n              dataowner=dataowner,\n              criterion=criterion,\n              step_fn=step_fn,\n              target_key=\"label\",\n              metrics={\"acc\": bce_accuracy, 'auc': roc_auc},\n              opt=torch.optim.SGD,\n              opt_params={\"momentum\": 0.99})","5db11156":"keker.unfreeze(model_attr=\"net\")\n\nlayer_num = -1\nkeker.freeze_to(layer_num, model_attr=\"net\")","1ef123ab":"keker.kek_one_cycle(max_lr=1e-2,                  # the maximum learning rate\n                    cycle_len=4,                  # number of epochs, actually, but not exactly\n                    momentum_range=(0.95, 0.85),  # range of momentum changes\n                    div_factor=25,                # max_lr \/ min_lr\n                    increase_fraction=0.3,        # the part of cycle when learning rate increases\n                    logdir='train_logs')\nkeker.plot_kek('train_logs')","31ce9e73":"\nkeker.kek_one_cycle(max_lr=1e-3,                  # the maximum learning rate\n                    cycle_len=4,                  # number of epochs, actually, but not exactly\n                    momentum_range=(0.95, 0.85),  # range of momentum changes\n                    div_factor=25,                # max_lr \/ min_lr\n                    increase_fraction=0.2,        # the part of cycle when learning rate increases\n                    logdir='train_logs1')\nkeker.plot_kek('train_logs1')","4b98e351":"preds = keker.predict_loader(loader=test_dl)","a40716f2":"# flip_ = albumentations.HorizontalFlip(always_apply=True)\n# transpose_ = albumentations.Transpose(always_apply=True)\n\n# def insert_aug(aug, dataset_key=\"image\", size=224):    \n#     PRE_TFMS = Transformer(dataset_key, lambda x: cv2.resize(x, (size, size)))\n    \n#     AUGS = Transformer(dataset_key, lambda x: aug(image=x)[\"image\"])\n    \n#     NRM_TFMS = transforms.Compose([\n#         Transformer(dataset_key, to_torch()),\n#         Transformer(dataset_key, normalize())\n#     ])\n    \n#     tfm = transforms.Compose([PRE_TFMS, AUGS, NRM_TFMS])\n#     return tfm\n\n# flip = insert_aug(flip_)\n# transpose = insert_aug(transpose_)\n\n# tta_tfms = {\"flip\": flip, \"transpose\": transpose}\n\n# # third, run TTA\n# keker.TTA(loader=test_dl,                # loader to predict on \n#           tfms=tta_tfms,                # list or dict of always applying transforms\n#           savedir=\"tta_preds1\",  # savedir\n#           prefix=\"preds\")               # (optional) name prefix. default is 'preds'","11409b40":"# prediction = np.zeros((test_df.shape[0], 1))\n# for i in os.listdir('tta_preds1'):\n#     pr = np.load('tta_preds1\/' + i)\n#     prediction += pr\n# prediction = prediction \/ len(os.listdir('tta_preds1'))","4c5fdfd7":"test_preds = pd.DataFrame({'imgs': test_df.id.values, 'preds': preds.reshape(-1,)})\ntest_preds.columns = ['id', 'has_cactus']\ntest_preds.to_csv('sub.csv', index=False)\ntest_preds.head()","a1bfc621":"Kekas accepts pandas DataFrame as an input and iterates over it to get image names and labels","c837359d":"Now we can create a DataKek, which is similar to creating dataset in Pytorch. We define the data, reader function and transformation.Then we can define standard PyTorch DataLoader.","0f8cf626":"Images were resized, so I can see almost nothing in them...","f00f7f43":"Now we create a transforming function. It heavily uses Transformer from kekas.\n\n  * The first step is defining resizing. You can change arguments of function if you want images to have different height and width, otherwis you can leave it as it is.\n  * Next step is defining augmentations. Here we provide the key of image which is defined in reader_fn;\n  * The third step is defining final transformation to tensor and normalizing;\n  * After this we can compose separate transformations for train and valid\/test data;","42c9860d":"And now we define what will the model do with the data. For example we could slice the output and take only a part of it. For now we will simply return the output of the model.","ecdf3a4c":"### Keker\n\nNow we can define the Keker - the core Kekas class for training the model.\n\nHere we define everything which is necessary for training:\n\n* the model which was defined earlier;\n* dataowner containing the data for training and validation;\n* criterion;\n* step function;\n* the key of labels, which was defined in the reader function;\n* the dictionary with metrics (there can be several of them);\n* The optimizer and its parameters;\n","161296ee":"Defining custom metrics","23db9976":"## Data overview","7b9287ce":"### Reader function\n\nAt first it is necessary to create a reader function, which will open images. It accepts i and row as input (like from pandas iterrows). The function should return a dictionary with image and label.\n[:,:,::-1] - is a neat trick which converts BGR images to RGB, it works faster that converting to RGB by usual means.\n","31fc239f":"We have some disbalance in the data, but it isn't too big.","3ae51de2":"### Data transformation\n\nNext step is defining data transformations and augmentations. This differs from standard PyTorch way. We define resizing, augmentations and normalizing separately, this allows to easily create separate transformers for train and valid\/test data.\n\nAt first we define augmentations. We create a function with a list of augmentations (I prefer albumentation library: https:\/\/github.com\/albu\/albumentations)","0c524eda":"### Predicting and TTA\n\nSimply predicting on test data is okay, but it is better to use TTA - test time augmentation. Let's see how it can be done with Kekas.\n\n* define augmentations;\n* define augmentation function;\n* create objects with these augmentations;\n* put these objects into a single dictionary;","d5fcd1b5":"Some of good libraries for DL aren't available in Docker with GPU by default, so it is necessary to install them. (don't forget to turn on internet connection in kernels).","c15432a4":"### Building a neural net\n\nHere we define the architecture of the neural net.\n\n* Pre-trained backbone is taken from pretrainedmodels: https:\/\/github.com\/Cadene\/pretrained-models.pytorch Here I take densenet169\n* We also define changes to the architecture. For example, we take off the last layer and add a custom head with nn.Sequential. AdaptiveConcatPool2d is a layer in kekas, which concats AdaptiveMaxPooling and AdaptiveAveragePooling","8438ee63":"## General information\n\n![](https:\/\/jivasquez.files.wordpress.com\/2017\/08\/cactus_0163.jpg?w=616)\n\nResearchers in Mexico have created the VIGIA project, aiming to build a system for autonomous surveillance of protected areas. One of the first steps is being able to recognize the vegetation in the area. In this competition we are trying to identify whether there is a cactus in the image.\n\nIn this kernel I use kekas (https:\/\/github.com\/belskikh\/kekas) as a wrapper for Pytorch.\n\nMost of the code is taken from my other kernel: https:\/\/www.kaggle.com\/artgor\/cancer-detection-with-kekas","12a110aa":"The data for training needs to be transformed one more time - we define DataOwner, which contains all the data. For now let's define it for train and valid.\nNext we define model and loss. As I choose BCEWithLogitsLoss, we can set the number of classes for output to 1."}}