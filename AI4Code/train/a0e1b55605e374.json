{"cell_type":{"7c457b03":"code","a28aea4d":"code","b8cb1872":"code","b1686417":"code","45e9a231":"code","2f763083":"code","57bfb88a":"code","ae60b804":"code","0a7977a4":"code","8f04e4a1":"code","9200ebd7":"code","929e9c2e":"code","489057cf":"code","381b411d":"code","913a6095":"code","5ff75910":"code","760689cb":"code","c4472f01":"code","2ab6f55e":"code","cae071cf":"code","948b98c7":"code","438562cc":"code","2667a4ae":"code","40453395":"code","40cab20c":"code","66c2a9c5":"code","d495fc18":"code","22b6722d":"code","b6ffe3e2":"code","9ed6a93f":"code","77c625a9":"code","1ec9290c":"code","572c0010":"code","977f9cd9":"code","a201c2d3":"code","d311af6d":"code","6f343af6":"code","cd7a72a6":"code","ac3da95c":"code","e2c5b132":"code","83441049":"code","1b24a86a":"code","a827b7bd":"code","d29e004e":"code","3096a6e1":"code","27873a56":"code","b28498f2":"code","1694a411":"code","45c4c1d7":"code","b4b0fd9c":"code","ec5bdad9":"code","1a718ef9":"code","00535677":"code","27bc580f":"code","7fc21e8c":"code","4f52e6b9":"code","b634fe29":"code","be2a76a9":"code","bebfc734":"code","c3beced1":"code","18c3adab":"code","3749bb93":"code","a11c32b5":"code","b456ac6b":"code","bb715197":"code","23b74f04":"code","27f4d25e":"code","2804b16f":"code","e6a13ec5":"code","9efe7c62":"code","c9aa5fe4":"code","9b922ad7":"code","d8d1805b":"code","0e2cc2d7":"code","a570eff3":"code","65bf6a6b":"code","b540ab42":"code","a5fe71ec":"code","281f76e4":"code","d8b4b956":"code","5d04baa9":"code","5347a811":"markdown","60ba3fbe":"markdown","173bca61":"markdown","53db3053":"markdown","56d9830f":"markdown","e681c588":"markdown","fc29999e":"markdown","389a25a9":"markdown","300c5128":"markdown","432a8167":"markdown","4bb2f94c":"markdown","5ec6b5ab":"markdown","0488a56f":"markdown","07d91b9f":"markdown","c5919623":"markdown","095721fe":"markdown","0b32cd79":"markdown","b2164dd8":"markdown","e5c0b0e3":"markdown","31277a08":"markdown","54c83b56":"markdown","275f52cb":"markdown","e19125d3":"markdown","d3277ff7":"markdown","827959fc":"markdown","5e559b26":"markdown","b9ba743e":"markdown","72d13305":"markdown","271a09cd":"markdown","f0050496":"markdown","24e5739d":"markdown","a179b9cf":"markdown","639dc0f9":"markdown","9c70ecd7":"markdown","cf24ee4c":"markdown","9ecab34d":"markdown","37fb0f2a":"markdown","04dfe865":"markdown","6c5b8fd3":"markdown"},"source":{"7c457b03":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy.stats import pearsonr,spearmanr\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score,confusion_matrix,precision_score,f1_score,recall_score,classification_report\n%matplotlib inline","a28aea4d":"df=pd.read_csv(\"..\/input\/train.csv\")","b8cb1872":"df.head(5)","b1686417":"df.dtypes","45e9a231":"df.isna().sum()","2f763083":"d=df.dropna()","57bfb88a":"print(\"before\",df.shape[0])\nprint(\"after\",d.shape[0])\ndf.shape[0]-d.shape[0]","ae60b804":"d.columns","0a7977a4":"d.Dependents.unique()","8f04e4a1":"sns.distplot(d.ApplicantIncome)","9200ebd7":"sns.distplot(d.CoapplicantIncome)","929e9c2e":"sns.distplot(d.LoanAmount)","489057cf":"sns.boxplot(y=d.LoanAmount)","381b411d":"d.LoanAmount.mean()","913a6095":"d.LoanAmount.describe()","5ff75910":"d.Loan_Amount_Term.unique()","760689cb":"d.Loan_Amount_Term.value_counts()","c4472f01":"d.Credit_History.unique()\n#d['Credit_History'].unique()","2ab6f55e":"d.Property_Area.unique()\n#d['Property_Area'].unique()","cae071cf":"d.Loan_Status.unique()","948b98c7":"d.Loan_Status.value_counts()","438562cc":"# H0:Applicant income is very important. So that may impact the loan status\nd.groupby('Loan_Status')['ApplicantIncome'].mean()","2667a4ae":"sns.scatterplot(d.ApplicantIncome,d.LoanAmount)","40453395":"print('spearmanr:',spearmanr(d.ApplicantIncome,d.LoanAmount)[0])\nprint('pearsonr:',pearsonr(d.ApplicantIncome,d.LoanAmount)[0])","40cab20c":"sns.scatterplot(d.ApplicantIncome,d.CoapplicantIncome)","66c2a9c5":"#Creating a new column called 'Total_Income' by combining (Adding) Applicant_Income and CoApplicant_Income\nd['Total_Income']=d.ApplicantIncome+d.CoapplicantIncome","d495fc18":"print('spearmanr:',spearmanr(d.Total_Income,d.LoanAmount)[0])\nprint('pearsonr:',pearsonr(d.Total_Income,d.LoanAmount)[0])","22b6722d":"sns.lmplot(x='Total_Income',y='LoanAmount',data=d,hue='Loan_Status',fit_reg=False)","b6ffe3e2":"print('Pearsonr:',pearsonr(d[d.Total_Income<30000].Total_Income,d[d.Total_Income<30000].LoanAmount)[0])\nprint('Spearmanr:',spearmanr(d[d.Total_Income<30000].Total_Income,d[d.Total_Income<30000].LoanAmount)[0])\n\nsns.lmplot(x='Total_Income',y='LoanAmount',data=d[d.Total_Income<30000],hue='Loan_Status',fit_reg=False)","9ed6a93f":"# H0: Self Employed is related to Loan Status\nd.groupby('Self_Employed')['Loan_Status'].value_counts()","77c625a9":"d.groupby('Self_Employed')['Loan_Status'].count()","1ec9290c":"d.groupby('Self_Employed')['Loan_Status'].value_counts()\/d.groupby('Self_Employed')['Loan_Status'].count()\n# To know the probability, we can divide by counts()","572c0010":"#H0: Education and Loan Status are related to each other.. \nd.groupby('Education')['Loan_Status'].value_counts()","977f9cd9":"d.groupby('Education')['Loan_Status'].count()","a201c2d3":"d.groupby('Education')['Loan_Status'].value_counts()\/d.groupby('Education')['Loan_Status'].count()","d311af6d":"#H0: Education and Self Employed are related to each other\nd.groupby('Education')['Self_Employed'].value_counts()\/d.groupby('Education')['Loan_Status'].count()","6f343af6":"#H0: Gender and Loan status are related to each other. \nd.groupby('Gender')['Loan_Status'].value_counts()\/d.groupby('Gender')['Loan_Status'].count()","cd7a72a6":"#H0: Married and Loan status are related to each other. \nd.groupby('Married')['Loan_Status'].value_counts()\/d.groupby('Married')['Loan_Status'].count()\n","ac3da95c":"#H0: Dependants and Loan Status are related to each other. \nd.groupby('Dependents')['Loan_Status'].value_counts()\/d.groupby('Dependents')['Loan_Status'].count()","e2c5b132":"# To find the mean of the Total Income who has Dependants\nd.groupby('Dependents')['Total_Income'].mean()","83441049":"# To find the mean of the Applicant Income who has Dependants\n\nd.groupby('Dependents')['ApplicantIncome'].mean()","1b24a86a":"#H0: Property Area and Loan Status are related to each other. \nd.groupby('Property_Area')['Loan_Status'].value_counts()\/d.groupby('Property_Area')['Loan_Status'].count()","a827b7bd":"d.columns","d29e004e":"#Making the Data set ordinal:::\n\ndef datacleaning(x):\n    x.Gender=x.Gender.map(lambda x:1 if x=='Male' else 0) #Assigning 1 if Gender is 'Male' and 0 if Gemder is 'Female'\n    x.Married=x.Married.map(lambda x:1 if x=='Yes' else 0) #Assigning 1 if Married is 'Yes' and 0 if Married is 'No'\n    x.Dependents=x.Dependents.map(lambda x:3 if x=='3+' else int(x)) #Assigning 3 if Dependents is '3+'' and same values if other than '3+'\n    x.Education=x.Education.map(lambda x:1 if x=='Graduate' else 0) #Assigning 1 if Education is 'Graduate' and o if education is 'Not graduate'\n    x.Self_Employed=x.Self_Employed.map(lambda x:1 if x=='Yes' else 0) #Assigning 1 if SelfEmployed is 'Yes' and 0 if selfEmployed is 'No'\n    dummies=pd.get_dummies(x.Property_Area) #Get Dummies will create columns(=Unique values) and assign 1 and 0. \n    x=x.join(dummies) #Joining dummies to the dataset\n    x[\"TotalIncome\"]=x.ApplicantIncome+x.CoapplicantIncome\n    y=x.Loan_Status.map(lambda x:1 if x=='Y' else 0) #Assigning 1 if the Loan status is 'Y' and 0 if the Loan Status is 'N'\n    x=x.drop(['Loan_ID','LoanAmount','Loan_Amount_Term','Property_Area','Loan_Status','ApplicantIncome','CoapplicantIncome'],axis=1) #Dropping the unwanted columns from the dataset\n    return x,y\n   ","3096a6e1":"X,y=datacleaning(d.copy())","27873a56":"X.head(10)","b28498f2":"X.Gender.value_counts()","1694a411":"lr=LogisticRegression()\nlr.fit(X,y)","45c4c1d7":"#Accuracy Score\nlr.score(X,y)","b4b0fd9c":"y_hat=lr.predict(X)","ec5bdad9":"c=0\nfor i,j in zip(y,y_hat):\n    if i==j:\n        c+=1\nprint(c\/len(y))","1a718ef9":"accuracy_score(y,y_hat)","00535677":"y_hat","27bc580f":"for i,j in zip(y,y_hat):\n    print(i,j)","7fc21e8c":"print(y.value_counts())\nconfusion_matrix(y,y_hat,labels=[1,0])","4f52e6b9":"# Accuracy works best if false positives and false negatives have similar cost. If the cost of false positives and false negatives are very different, it\u2019s better to look at both Precision and Recall.\n\nprint(\"precision:\",precision_score(y,y_hat)) #Precision = TP\/TP+FP.. High precision relates to the low false positive rate\nprint(\"recall:\",recall_score(y,y_hat)) #Recall(Sensitivity) = TP\/TP+FN.. Of all predicted, how many did we label. We have got recall of 0.978 which is good for this model as it\u2019s above 0.5.\nprint(\"f1_score:\",f1_score(y,y_hat)) #F1 Score = 2*(Recall * Precision) \/ (Recall + Precision)... F1 is usually more useful than accuracy, especially if you have an uneven class distribution..","b634fe29":"print(classification_report(y,y_hat))","be2a76a9":"lr.predict(X)","bebfc734":"lr.predict_proba(X)","c3beced1":"pr_pass=lr.predict_proba(X)[:,1]","18c3adab":"y_hat_thr=[]\nfor i in pr_pass:\n    if i>0.72:\n        y_hat_thr.append(1)\n    else:\n        y_hat_thr.append(0)\n        ","3749bb93":"print('Confusion Matrix after setting the Threshold:\\n',confusion_matrix(y,y_hat_thr,labels=[1,0]))\nprint('\\n\\nClassification report after setting the Threshold:\\n',classification_report(y,y_hat_thr))","a11c32b5":"for i,j in zip(lr.coef_[0],X.columns):\n    print(i,'*',j,'+')\nprint(\"\\nIntercept\",lr.intercept_[0])","b456ac6b":"d.index","bb715197":"df.index","23b74f04":"test_index=df.index.difference(d.index)","27f4d25e":"test_index","2804b16f":"test=df.loc[test_index]","e6a13ec5":"test.head(5)","9efe7c62":"test.isna().sum()","c9aa5fe4":"d['Credit_History'].value_counts()","9b922ad7":"test.Gender=test.Gender.fillna(\"Male\")\ntest.Married=test.Married.fillna(\"Yes\")\ntest.Dependents=test.Dependents.fillna(\"0\")\ntest.Self_Employed=test.Self_Employed.fillna(\"No\")\ntest.LoanAmount=test.LoanAmount.fillna(d.LoanAmount.median())\ntest.Loan_Amount_Term=test.Loan_Amount_Term.fillna(d.Loan_Amount_Term.median())\ntest.Credit_History=test.Credit_History.fillna(1)","d8d1805b":"test.isna().sum()","0e2cc2d7":"X_test,y_test=datacleaning(test)","a570eff3":"X_test.columns","65bf6a6b":"lr.score(X_test,y_test)","b540ab42":"y_hat_test=lr.predict(X_test)\nprint(confusion_matrix(y_test,y_hat_test,labels=[1,0]))","a5fe71ec":"print(confusion_matrix(y,y_hat,labels=[1,0]))","281f76e4":"#Lets Compare the Precision,Recall,F1-Score of both Training and Testing Data.\n\nprint(\"Train Data:\\n\",classification_report(y,y_hat))\nprint(\"Test Data:\\n\",classification_report(y_test,y_hat_test))","d8b4b956":"y_hat_test_th=[]\npr_pass_test=lr.predict_proba(X_test)[:,1]\nfor i  in pr_pass_test:\n    if i>0.72:\n        y_hat_test_th.append(1)\n    else:\n        y_hat_test_th.append(0)","5d04baa9":"#Lets Compare the Precision,Recall,F1-Score of both Training and Testing Data after setting the Threshold value.\n\nprint(\"Train Data after setting the threshold:\\n\",classification_report(y,y_hat_thr))\nprint(\"\\nTest Data after setting the threshold:\\n\",classification_report(y_test,y_hat_test_th))","5347a811":"In the 'Dependants' column, there are only 4 unique values.. ['1','0','2','3+']","60ba3fbe":"Considering the dropped values","173bca61":"#### what is Logistic Regression and why?\n\nLogistic Regression produces results in a binary format which is used to predict the outcome of the categorical dependant variable.\n\nSo the output should be discrete\/categorical.","53db3053":"#### What is Regression?\n\nRegression analysis is a form of preditive modelling technique which investigates the relationship between a dependant and independant variable.","56d9830f":"As discussed earlier, Loan Amount is available only for the person whose Total_Income is lesser than 30000","e681c588":"3.CoApplicant Income","fc29999e":"5.Loan Amount term","389a25a9":"The box in the boxplot covers 25% to 75% ie 50% of the data. ","300c5128":"So we will drop the rows that contains null values..","432a8167":"#### Data Cleaning ","4bb2f94c":"Accuracy for the Testing data is 0.7985074626865671","5ec6b5ab":"2.Applicant Income","0488a56f":"df.shape[0]- tells us the shape of the data set before dropping the null values....\nd.shape[0] - tells us the shape of the data set after dropping the null values\n\nHere 0 indicates rows and 1 indicates the columns.\n\n134 rows of null values has been dropped for better results","07d91b9f":"Calculating the threshold\/Saturation point","c5919623":"### Exploratory Data Analysis","095721fe":"7.Property Area","0b32cd79":"#### Probability Calibration","b2164dd8":"The Sigmoid curve will translate the values from - Infinity to + Infinity to a finite value(ie. 0 to 1)","e5c0b0e3":"spearmanr gives a better result when the incomes are added. ","31277a08":"Accuracy for the Training data is 0.8104166666666667","54c83b56":"It is found that there are few outliars.. \n\nAnd Also if we observe the graph carefully, Loan Amount has been given to the person whose Applicant Income is < 30000..","275f52cb":"4.Loan Amount","e19125d3":"Majority(85%) of the applicants has gone for 360 months loan term...\n\n\nConsidering Loan_Amount_Term Variable(Looks descrete) is not recommended.. Bcos most of the people are falling under 360","d3277ff7":"Where as Accuracy Score is (TP+TN)\/(TP+FP+FN+TN).. So 389\/480 = 0.8104166666666667","827959fc":"When it is found there are few outliars, going with spearmanr will give better result when compared to pearsonr ","5e559b26":"#### MultiVariate Analysis","b9ba743e":"1.Dependants","72d13305":"#### Lets Start Now... \nImport all the libraries required.\n","271a09cd":"So this model has been trained to 81.4% accuracy with Training Data and tested to 79.8% with Testing Data... ","f0050496":"6.Credit History","24e5739d":"#### Univariate Analysis","a179b9cf":"COMMENTS\/SUGGESTIONS are always welcome.\n\nWill discuss More of it..\n\nHappy Learning","639dc0f9":"Out of these columns, (Gender,Male,Dependants,Self_Employed,LoanAmount,Loan_Amount_Term,Credit_History) column has Null vallues. ","9c70ecd7":"#### Improvising the model by filling the empty cells....And use it as a Test Data","cf24ee4c":"Lets calcualte it after setting the Threshold\/Saturation","9ecab34d":"8.Loan Status(Target Variable)","37fb0f2a":"Import the Data Set from the datapath","04dfe865":"Setting the Threshold\/Saturation Value for the Testing Data","6c5b8fd3":"#### Data Set Informtaion:::\n\nLoan Id:\nGender:\nMarried:\nDependant:\nEducation:\nSelf_Employed:\nApplicantIncome:\nCoApplicantIncome:\nLoan_Amount:\nLoan_Amount_Term:\nCredit_History:\nProperty_Area:\nLoan_Status:"}}