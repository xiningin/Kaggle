{"cell_type":{"02bbb4fd":"code","d2f57583":"code","6e4fb72f":"code","ecdea823":"code","58f5e887":"code","266d3aa1":"code","ebd47146":"code","dba5a5cb":"code","1b834956":"code","0d508cb3":"markdown","62348674":"markdown","dfeccb09":"markdown","c1ac4827":"markdown","8718aae0":"markdown"},"source":{"02bbb4fd":"import numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport matplotlib.pyplot as plt\n\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\n\nclass FashionMnistCNN:\n    def __init__(self):\n        \n        self.SEED = 42\n        self.VAL_SIZE = 0.2\n        self.IMAGE_SIZE = 28\n        self.CHANNEL_SIZE = 1\n        self.SCALE_SIZE = 255.0\n        \n        (self.X, self.y), (self.X_test, self.y_test) = keras.datasets.fashion_mnist.load_data()\n        self.X = self.X.reshape(-1,  self.IMAGE_SIZE,  self.IMAGE_SIZE, self.CHANNEL_SIZE) \/ self.SCALE_SIZE\n        self.X_test = self.X_test.reshape(-1,  self.IMAGE_SIZE,  self.IMAGE_SIZE, self.CHANNEL_SIZE) \/ self.SCALE_SIZE\n        \n        self.X_train,self.X_val,self.y_train,self.y_val=train_test_split(self.X,self.y,test_size=self.VAL_SIZE,random_state=self.SEED)\n        \n        self.model = keras.Sequential()\n        self.history = []\n        self.class_labels = ['T-shirt\/top','Trouser','Pullover','Dress','Coat',\n               'Sandal','Shirt','Sneakers','Bag','Ankle boot']\n        \n    def initCNN(self,filterNum,filterSize,isMaxPooling2D):\n        self.model.add(keras.layers.Conv2D(filterNum,kernel_size=filterSize,activation='relu',\n                                      padding='same',input_shape=(self.IMAGE_SIZE,self.IMAGE_SIZE,1)))\n        if isMaxPooling2D == True:\n            self.model.add(keras.layers.MaxPooling2D(2))\n        \n    def addCNN(self,filterNum,filterSize,isMaxPooling2D):\n        self.model.add(keras.layers.Conv2D(filterNum, kernel_size=filterSize, activation='relu',padding='same'))\n\n        if isMaxPooling2D == True:\n            self.model.add(keras.layers.MaxPooling2D(2))\n\n    def flatten(self):\n        self.model.add(keras.layers.Flatten())\n\n    def addDense(self,denseUnits):\n        self.model.add(keras.layers.Dense(denseUnits, activation='relu'))\n\n    def dropOut(self,ratio):\n        self.model.add(keras.layers.Dropout(ratio))\n\n    def addSoftmaxDense(self,denseUnits):\n        self.model.add(keras.layers.Dense(denseUnits, activation='softmax'))\n\n\n    def trainModel(self,epochs):\n        display(self.model.summary())\n\n        display(keras.utils.plot_model(self.model, show_shapes=True, to_file='model001.png', dpi=100))\n\n        self.model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', \n                      metrics='accuracy')\n\n        checkpoint_cb = keras.callbacks.ModelCheckpoint('best-cnn-model.h5', \n                                                        save_best_only=True)\n        early_stopping_cb = keras.callbacks.EarlyStopping(patience=2,\n                                                          restore_best_weights=True)\n\n        self.history = self.model.fit(self.X_train, self.y_train, epochs=epochs,\n                            validation_data=(self.X_val, self.y_val),\n                            callbacks=[checkpoint_cb, early_stopping_cb])\n        \n    def getModel(self):\n        return self.model\n    \n    def getModelHistory(self):\n        return self.history\n    \n    def getValX(self):\n        return self.X_val\n    \n    def getTestX(self):\n        return self.X_test\n    \n    def showHistoryPlot(self):\n        plt.plot(self.history.history['loss'])\n        plt.plot(self.history.history['val_loss'])\n        plt.xlabel('epoch')\n        plt.ylabel('loss')\n        plt.legend(['train', 'val'])\n        plt.show()\n        \n    def evaluate(self):\n        self.model.evaluate(self.X_val, self.y_val)\n        \n    def evaluateTest(self):\n        self.model.evaluate(self.X_test, self.y_test)\n        \n    def predict(self,X):\n        preds = self.model.predict(X)\n        return preds\n    \n    def getClassLabel(self,preds):\n        return self.class_labels[np.argmax(preds)]\n    \n    def predictLabel(self,X):\n        preds = self.model.predict(X)\n        return self.class_labels[np.argmax(preds)]\n        \n    def plotClassLabel(self,pred):\n        plt.bar(range(1, 11), pred)\n        plt.xlabel('class')\n        plt.ylabel('prob.')\n        plt.show()\n        \n    def drawImage(self,X):\n        plt.imshow(X.reshape(self.IMAGE_SIZE, self.IMAGE_SIZE), cmap='gray_r')\n        plt.show()","d2f57583":"fmCNN = FashionMnistCNN()\nfmCNN.initCNN(32,3,True)\nfmCNN.addCNN(64,3,True)\nfmCNN.flatten()\nfmCNN.addDense(100)\nfmCNN.dropOut(0.4)\nfmCNN.addSoftmaxDense(10)\nfmCNN.trainModel(20)\nmodel = fmCNN.getModel()\nhistory = fmCNN.getModelHistory()","6e4fb72f":"fmCNN.showHistoryPlot()","ecdea823":"fmCNN.evaluate()","58f5e887":"fmCNN.drawImage(fmCNN.getValX()[0])","266d3aa1":"preds = fmCNN.predict(fmCNN.getValX()[0:1])\nprint(preds)","ebd47146":"fmCNN.plotClassLabel(preds[0])","dba5a5cb":"fmCNN.predictLabel(fmCNN.getValX()[0:1])","1b834956":"fmCNN.evaluateTest()","0d508cb3":"# total FashionMNIST class","62348674":"# predict test data using model","dfeccb09":"# evaluate model with test data ","c1ac4827":"# evaluate model(with test set)","8718aae0":"# evaluate model(with validation set)"}}