{"cell_type":{"f3811143":"code","56a1864b":"code","866c19db":"code","7a55c466":"code","0ee01853":"code","c47a06de":"code","14a32b2f":"code","6ebecfab":"code","ec6d86e1":"code","5ef0388d":"code","7a38d9eb":"code","bfb9fdab":"code","1aadba3e":"code","f74750c2":"markdown","f0d17849":"markdown","89d278fa":"markdown","0aefc445":"markdown","79af93e1":"markdown","5ef7fa8b":"markdown","74022167":"markdown","0503608e":"markdown","abebf916":"markdown","2a7566ac":"markdown","7b0a655e":"markdown","33b79aab":"markdown","a7c1ada1":"markdown","f399ce4e":"markdown"},"source":{"f3811143":"def quadSolve(a,b,c):\n    disc = b*b-4*a*c\n    root1 = (-1*b-disc**0.5)\/(2*a)\n    root2 = (-1*b+disc**0.5)\/(2*a)\n    return root1,root2","56a1864b":"a = 2\nb = 7\nc = 3\nprint(quadSolve(a,b,c))","866c19db":"answer = quadSolve(2,7,3)\nprint(answer[0])\nprint(answer[1])\nx1,x2 = quadSolve(2,7,3)\nprint(x1)\nprint(x2)","7a55c466":"print(quadSolve(2,7,3))\nn1 = 3\nn2 = 9\nbrian = 5\nprint(quadSolve(n1,n2,brian))\n","0ee01853":"print(quadSolve(2,1,5))","c47a06de":"root1,root2 = quadSolve(2,7,3)\nprint(root1,type(root1))\nroot3,root4 = quadSolve(2,1,5)\nprint(root3,type(root3))\nprint(root3.real)\nprint(root3.imag)","14a32b2f":"def greet(name):\n    print('Hello '+name)\n    print('How are you?')\n\ngreet('Bob')\ngreet('Sue')\ngreet('Quadratic Formula')","6ebecfab":"print('Enter your name')\nname1 = input()\ngreet(name1)\nprint('Try again')\nname2 = input()\ngreet(name2)","ec6d86e1":"def validPassword(passwordtry):\n    uc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    lc = 'abcdefghijklmnopqrstuvwxyz'\n    sp = '*%^$\u00a3'\n    nu = '0123456789'\n    uctrue = 0\n    lctrue = 0\n    sptrue = 0\n    nutrue = 0\n    for letter in passwordtry:\n        if letter in uc:\n            uctrue = 1\n        if letter in lc:\n            lctrue = 1\n        if letter in sp:\n            sptrue = 1\n        if letter in nu:\n            nutrue = 1\n    conditions = uctrue+lctrue+sptrue+nutrue\n    if len(passwordtry)>7 & conditions>=3:\n        return True\n    else:\n        return False\n    \npassword = 'bad'\nwhile not validPassword(password):\n    print('Passwords must be at least 8 characters')\n    print('They must contain at least 3 of: upper case, lower case, numbers and special characters')\n    print('Enter your password')\n    password = input()\n\nprint('Password OK')\n    ","5ef0388d":"def square(x):\n    return x*x\n\ndef makeTable(func,start,end,step):\n    for i in range(start,end+1,step):\n        print(i,func(i))\n\nmakeTable(square,1,10,1)","7a38d9eb":"def makeTable2(func,start,end,step=1):\n    print('  x  | f(x) ')\n    print('___________')\n    for i in range(start,end+1,step):\n        print(str(i).ljust(5)+'|'+str(func(i)).rjust(5))\n        \nmakeTable2(square,1,10)\n\ndef cube(x):\n    return x*x*x\n\nmakeTable2(cube,2,20,2)","bfb9fdab":"def fact(n):\n    if n>1:\n        return n*fact(n-1)\n    else:\n        return 1\n\nmakeTable2(fact,1,5)","1aadba3e":"def perm(string):\n    n = len(string)\n    if n == 1:\n        return [string]\n    else:\n        return [string[i]+j for i in range(n) for j in perm(string[0:i]+string[i+1:n+1])]\n\nprint(perm(\"worlds\"))","f74750c2":"The variables used as inputs are \"dummy\" names. You can send other variables. The first one will be stored as `a`, the second as `b` etc. This is equivalent to the maths definition $f(x)=x^2+7x+3$. When you calculate $f(5)$ you know to replace the $x$ in $x^2+7x+3$ with $5$ to get $5^2+7\\times 5+3$. If you calculate `quadSolve(number1,number2,number3)`, Python will replace `a` with the value from `number1` everywhere within the function, and so on. You can use the variables `a, b, c, disc, root1, root2` to mean other things in the main program and they will not get overwritten when the function is called. Python has a *name space* for the main program where values are stored and a different *name space* for each function use. (Actually this is not quite true, it's a little more complicated, but it's a good way to think about it.)\n\nLet's try this out:","f0d17849":"There are several things to notice here. \n1. Python understands complex numbers, although it uses \"j\" for $\\sqrt{-1}$. \n2.  $-\\frac{b}{2a}=-\\frac{1}{2}=-0.25$ but the function gives $-0.250000000000001$. This is a *rounding error* caused by Python using numbers that are rounded in internal calculations. \n# 3. There are extra brackets around the roots. \n\nTo explore the third point, let's look at the variable types. First with real roots, then with imaginary roots. The function `quadSolve` returns two values so we assign them to two variables.","89d278fa":"To get input from the user we can use the Python `input` function. This pauses the program and puts an input box on the screen for you to type in the required data. The program continues when you press enter.","0aefc445":"We can tidy this up in a couple of ways.\n1. We can use default values for arguments. If the argument is not present the default will be used. These arguments need to go at the end of the argument list.\n2. We can neaten up the printout with various means. This example uses the string functions `rjust()` and `ljust()`  to pad it out to a specific length.","79af93e1":"Can you predict what will happen when the next line is run? Check that $1^2-4\\times 2\\times 5=-39$ before you run the code.","5ef7fa8b":"It's common when writing code to produce a few lines that you might like to re-use in other places. A simple example arose in part 2 when we were looking at roots of quadratics. You might like to make some code to solve a quadratic. This could then be used in your notebook whenever you need to solve. We construct a *function*. Our function will take the coefficients as inputs and give back the roots as output. In our code we must define our function before we use it. When you run this code nothing will happen but Python will now know how to use this new function.","74022167":"Notice the setup. We use the comand `def` to define a function. This is followed by our chosen name and then any inputs in round brackets. Finally there is a colon. Now there are the lines of code to run, all indented, and finally the command `return` indicates the output to send back. Let's try it out:","0503608e":"# Larn Yersel Python\n## Part 3 Functions and Input\/Output","abebf916":"Recursion is usually useful when you know\n1. How to start\n2. How to construct a solution for a larger case from a solution to a smaller one\nHere is an example that makes a list of all the arrangements of letters in a word. It uses list and string slicing as explored in Exercise Set 1.","2a7566ac":"The function operates as a mini \"program\". It starts up, using the input values, does some stuff and then sends the answer back to the main program. At this point the function code is over and done.\n\nThere are a couple of points to note.\n1. We could have just sent the numbers directly, without defining variables. `print(quadSolve(2,7,3))` gives the same result.\n2. The answer is a *tuple* of numbers (a data structure surrounded by round brackets.) We can deal with this in a couple of ways: \n","7b0a655e":"The Python complex number object contains two numbers, the real and imaginary parts. They are accessed via the `.real` and `.imag` notation.\n\nPython functions can return values back to the main program, but they do not have to. Perhaps they just do stuff:","33b79aab":"A more advanced application of functions, one that is loved by computer scientists, is *recursion*. In this technique a function definition can use the same function that is being defined to actually do the computation. You need a stopping condition or it will go on calling itself forever, giving a Stack Overflow. The classic example is factorial.","a7c1ada1":"When writing longer code, functions can be used to improve readability and ease of updating. Here is a function to check if a password entered is OK. It uses the code from Part 2 of this course. To be valid, a password must be at least 8 characters long and contain at least 3 out of 4 types of character. This is much too complicated to put as a test in an `if` statement so we build a function. The function returns either `True` or `False` as required by a test in an `if` statement or as a test for a `while` loop.\n\nIn a full program you might require password input in several places. By using a function you can change the rules once and it will take effect everywhere a password is used.\n\nRun the code and try several bad choices. Note how the while loop runs again because your choice fails the test. The loop stops and the program will continue as soon as the test is passed.","f399ce4e":"Arguments to functions can be functions too"}}