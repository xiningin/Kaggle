{"cell_type":{"036d162d":"code","0b59d02e":"code","dfca1ea7":"code","7bd5b59b":"code","078a1fb5":"code","be916e48":"code","393e46b6":"code","7693f43c":"code","774fece6":"code","343a3b42":"code","5db22ec8":"code","2690442e":"code","f37342fc":"code","133bbd1c":"code","b47f19a6":"code","667dc4d3":"code","31f86b36":"code","41a53ae5":"code","6017480b":"code","126a11f9":"code","a86a2c24":"code","3791c528":"code","517585c0":"code","fa2ba189":"code","1b8ca029":"code","1e9b55e4":"markdown","6d80eef3":"markdown","4894cbcd":"markdown"},"source":{"036d162d":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns","0b59d02e":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","dfca1ea7":"def get_correlated_pairs_sample(threshold, correlation_df, group):\n    ## create dictionary wheke keys are the pairs and values are the amount of high correlation pair\n    corr_pairs_dict = {}\n    for i in range(len(list_of_pairs)):\n        temp_corr_pair = dict(zip(list_of_pairs[i], [0]))\n        corr_pairs_dict.update(temp_corr_pair)\n\n    j = 0\n    for column in correlation_df.columns:\n        j += 1\n        for i in range(j, len(correlation_df)):\n            if ((correlation_df[column][i] >= threshold) & (column != correlation_df.index[i])):\n                corr_pairs_dict[str(column) + '-' + str(correlation_df.index[i])] += 1\n\n    corr_count = pd.DataFrame(corr_pairs_dict, index=['count']).T.reset_index(drop=False).rename(columns={'index': 'channel_pair'})\n    print('Channel pairs that have correlation value >= ' + str(threshold) + ' (' + group + '):')\n    print(corr_count['channel_pair'][corr_count['count'] > 0].tolist())","7bd5b59b":"def plot_sensors_correlation(df, threshold_value):\n    \"\"\"Funtion plots the the correlation plots between sensor positions for each group\"\"\"\n    correlations = df.corr()\n\n\n    fig = plt.figure(figsize=(17,10))\n    ax = fig.add_subplot(121)\n    ax.set_title('User A', fontsize=14)\n    mask = np.zeros_like(correlations, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n    sns.heatmap(correlations, mask=mask, cmap=cmap, vmin=-1, vmax=1, center=0,\n                square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n\n    plt.suptitle('Correlation between Sensor Positions for stimulus', fontsize=16)\n    plt.show()\n    \n    get_correlated_pairs_sample(threshold=threshold_value, correlation_df=correlations, group='User A')","078a1fb5":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","be916e48":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","393e46b6":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","7693f43c":"df = pd.read_csv('\/kaggle\/input\/eeg-data-from-hands-movement\/Dataset\/user_a.csv', delimiter=',', index_col=False)\ndf.dataframeName = 'dataset.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","774fece6":"df.head(5)","343a3b42":"df.describe()","5db22ec8":"df.info()","2690442e":"df.corr(method ='pearson')\n","f37342fc":"\nlist_of_pairs = []\nX = df.iloc[:,1:]\nY = df.iloc[:,0]\nj = 0\nfor column in X.columns:\n    j += 1\n    for i in range(j, len(X.columns)):\n        if column != X.columns[i]:\n            temp_pair = [column + '-' + str(X.columns[i])]\n            list_of_pairs.append(temp_pair)","133bbd1c":"plot_sensors_correlation(df=X, threshold_value=.97)","b47f19a6":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom keras.utils.np_utils import to_categorical\nfrom keras.preprocessing.sequence import pad_sequences\nfrom sklearn.preprocessing import LabelEncoder\nimport pandas as pd\nfrom keras.metrics import top_k_categorical_accuracy\ndef top_3_accuracy(x,y): return top_k_categorical_accuracy(x,y, 3)\nfrom keras.callbacks import ModelCheckpoint, LearningRateScheduler, EarlyStopping, ReduceLROnPlateau\nfrom glob import glob\nimport gc\ngc.enable()","667dc4d3":"from keras.utils import np_utils\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom keras.models import Sequential\nfrom keras.layers import BatchNormalization, Conv1D, LSTM, Dense, Dropout","31f86b36":"def get_model():\n    model = Sequential()\n    model.add(LSTM(16,input_shape=(11,11), return_sequences=True))    \n    model.add(LSTM(16))  \n    model.add(Dense(3, activation = 'softmax'))\n    model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","41a53ae5":"# Fit the model\nX = df.iloc[:,1:]\nY = df.iloc[:,0]\nl = ['complement'] * (121 - X.shape[1]) \nfor index,col in enumerate(l):\n    X[col+str(index)] = 0\n\nX = X.values\nY = Y.values","6017480b":"# encode class values as integers\nencoder = LabelEncoder()\nencoder.fit(Y)\nencoded_Y = encoder.transform(Y)\n# convert integers to dummy variables (i.e. one hot encoded)\ndummy_y = np_utils.to_categorical(encoded_Y)","126a11f9":"get_model().summary()","a86a2c24":"from sklearn.model_selection import KFold\nimport numpy\n# fix random seed for reproducibility\nseed = 7\nnumpy.random.seed(seed)\n\n# define 10-fold cross validation test harness\nkfold = KFold(n_splits=3, shuffle=True, random_state=seed)\ncvscores = []\nbest = -1\n\nfor train, test in kfold.split(X, dummy_y):\n    model = get_model()\n    standard = StandardScaler().fit(X[train])\n    x_train_standard = standard.transform(X[train]).reshape(1920,11,11)\n    x_test_standard = standard.transform(X[test]).reshape(960,11,11)\n    model_history = model.fit(x_train_standard, dummy_y[train], epochs=25, batch_size=16, verbose=1)\n    scores = model.evaluate(x_test_standard, dummy_y[test], verbose=1)\n    print(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n    cvscores.append(scores[1] * 100)\n    if scores[1] > best:\n        best = scores[1]\n        history = model_history\nprint(\"%.2f%% (+\/- %.2f%%)\" % (numpy.mean(cvscores), numpy.std(cvscores)))","3791c528":"from keras.utils import Sequence\nclass SeqGen(Sequence):\n\n    def __init__(self, x_set, y_set, batch_size):\n        self.x, self.y = x_set, y_set\n        self.batch_size = batch_size\n\n    def __len__(self):\n        return int(np.ceil(len(self.x) \/ float(self.batch_size)))\n\n    def __getitem__(self, idx):\n        batch_x = self.x[idx * self.batch_size:(idx + 1) * self.batch_size]\n        batch_y = self.y[idx * self.batch_size:(idx + 1) * self.batch_size]\n\n        return batch_x, batch_y","517585c0":"# Fit the model\nmodel = get_model()\n\nx_train, x_test, y_train, y_test = train_test_split(\n            X, dummy_y, test_size=0.3, random_state=42, shuffle=True\n        )\nstandard = StandardScaler().fit(x_train)\nx_train_standard = standard.transform(x_train).reshape(2016,11,11)\nx_test_standard = standard.transform(x_test).reshape(864,11,11)\nhistory = model.fit_generator(SeqGen(x_train_standard,y_train,batch_size=16), validation_data=(x_test_standard,y_test), epochs=25, verbose=1)","fa2ba189":"# summarize history for accuracy\nplt.plot(history.history['accuracy'])\nplt.plot(history.history['val_accuracy'])\nplt.title('model accuracy')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","1b8ca029":"# summarize history for loss\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('model loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'test'], loc='upper left')\nplt.show()","1e9b55e4":"**EEG Data Analysis**","6d80eef3":"**RNN**","4894cbcd":"![EEG-10-20](https:\/\/www.researchgate.net\/publication\/314132484\/figure\/fig1\/AS:467091376611332@1488374670654\/Emotiv-14-Electrodes-Located-Over-10-20-International-System-Positions.png)"}}