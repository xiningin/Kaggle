{"cell_type":{"1a4c817a":"code","3f522801":"code","f91a8992":"code","b93b977e":"code","57a5a653":"code","d14cc576":"code","83b99dd4":"code","52f54237":"code","a4ea8fb3":"code","e38d9d84":"code","1a7bc070":"code","89ab464c":"code","75d2f129":"code","f06ada69":"code","66971303":"code","1a3d8693":"code","39b72e5b":"code","846eeeb1":"code","0eaa8a37":"code","f5f29ca3":"code","4f6f1173":"code","da71f6d9":"code","01d5d634":"code","c649bb61":"code","3c21597f":"code","1abcd292":"code","a50903cf":"code","f9bc7d90":"code","09f49e84":"code","1a68ff6b":"code","c2c9b230":"code","e279fd55":"code","e1d79746":"code","98d4bd96":"code","bc0d9c0f":"code","b02822e5":"code","89acfb96":"code","605103d7":"code","afd0d891":"code","fd3ca771":"code","771c21f5":"code","91bc39ee":"code","8379053e":"code","99a6c9de":"code","ad5874e8":"code","c33157f9":"code","f89ecb35":"code","38e9e327":"markdown","06bc150d":"markdown","e2dd1297":"markdown"},"source":{"1a4c817a":"from transformers import BertTokenizer, BertModel\nfrom transformers import XLNetModel, XLNetTokenizer\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import GroupKFold\nimport re\nimport pandas as pd","3f522801":"sample_submission = pd.read_csv(\"..\/input\/google-quest-challenge\/sample_submission.csv\")\ntest = pd.read_csv('..\/input\/google-quest-qa-add-on\/test_v3.csv')\ntrain = pd.read_csv(\"..\/input\/google-quest-qa-add-on\/train_v3.csv\")","f91a8992":"l_cols = ['question_asker_intent_understanding', 'question_body_critical',\n       'question_conversational', 'question_expect_short_answer',\n       'question_fact_seeking', 'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible',\n       'answer_relevance', 'answer_satisfaction',\n       'answer_type_instructions', 'answer_type_procedure',\n       'answer_type_reason_explanation', 'answer_well_written']","b93b977e":"test.columns.values","57a5a653":"columns = ['question_title', 'question_cleaned', 'answer_cleaned', 'category',\n       'question_asker_intent_understanding', 'question_body_critical',\n       'question_conversational', 'question_expect_short_answer',\n       'question_fact_seeking', 'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible',\n       'answer_relevance', 'answer_satisfaction',\n       'answer_type_instructions', 'answer_type_procedure',\n       'answer_type_reason_explanation', 'answer_well_written']","d14cc576":"train[train.isnull().T.any()]","83b99dd4":"def txt_re(content):\n    res_list = []\n    for txt in content:\n        if pd.isnull(txt):\n            res_list.append('code')\n        else:\n            txt = txt.strip()\n            txt = re.sub('https?.*$', '', txt)\n            txt = re.sub('https?.*\\s', '', txt)\n            txt = re.sub('\\n+', '', txt)\n            txt = re.sub('\\r+', '', txt)\n            res_list.append(txt)\n    return res_list","52f54237":"content = []\nlabels = []\nfor col in zip(train[columns].values.tolist()):\n    cont = col[0][:4]\n    cont = txt_re(cont)\n    label = col[0][4:]\n    content.append(cont)\n    labels.append(label)","a4ea8fb3":"len(labels)","e38d9d84":"test.columns.values","1a7bc070":"test_content = []\nfor col in zip(test[['question_title', 'question_body', 'answer', 'category']].values.tolist()):\n    cont = col[0][:4]\n    cont = txt_re(cont)\n    test_content.append(cont)","89ab464c":"ls","75d2f129":"import os\nos.mkdir('.\/t7')","f06ada69":"tokenizer = BertTokenizer.from_pretrained('..\/input\/huggingfacetransformermodels\/model_classes\/bert\/bert-base-uncased-tokenizer')","66971303":"q_inputs = []\nq_input_masks = []\nq_segment_masks = []\n\na_inputs = []\na_input_masks = []\na_segment_masks = []\nfor cont in content:    \n    q_input = tokenizer.encode_plus(cont[0], text_pair=cont[1],  add_special_tokens=True,max_length=512, pad_to_max_length='right')\n    assert len(q_input['input_ids']) == len(q_input['token_type_ids']) == len(q_input['attention_mask'])\n    q_inputs.append(q_input['input_ids'])\n    q_segment_masks.append(q_input['token_type_ids'])\n    q_input_masks.append(q_input['attention_mask'])\n    \n    a_input = tokenizer.encode_plus(cont[0], text_pair=cont[2],  add_special_tokens=True,max_length=512, pad_to_max_length='right')\n    assert len(a_input['input_ids']) == len(a_input['token_type_ids']) == len(a_input['attention_mask'])\n    a_inputs.append(a_input['input_ids'])\n    a_segment_masks.append(a_input['token_type_ids'])\n    a_input_masks.append(a_input['attention_mask'])","1a3d8693":"len(q_inputs)","39b72e5b":"t_q_inputs = []\nt_q_input_masks = []\nt_q_segment_masks = []\n\nt_a_inputs = []\nt_a_input_masks = []\nt_a_segment_masks = []\nfor cont in test_content:\n    t_q_input = tokenizer.encode_plus(cont[0], text_pair=cont[1],  add_special_tokens=True,max_length=512, pad_to_max_length='right')\n    assert len(t_q_input['input_ids']) == len(t_q_input['token_type_ids']) == len(t_q_input['attention_mask'])\n    t_q_inputs.append(t_q_input['input_ids'])\n    t_q_segment_masks.append(t_q_input['token_type_ids'])\n    t_q_input_masks.append(t_q_input['attention_mask'])\n    \n    t_a_input = tokenizer.encode_plus(cont[0], text_pair=cont[2],  add_special_tokens=True,max_length=512, pad_to_max_length='right')\n    assert len(t_a_input['input_ids']) == len(t_a_input['token_type_ids']) == len(t_a_input['attention_mask'])\n    t_a_inputs.append(t_a_input['input_ids'])\n    t_a_segment_masks.append(t_a_input['token_type_ids'])\n    t_a_input_masks.append(t_a_input['attention_mask'])","846eeeb1":"len(t_a_input_masks)","0eaa8a37":"text = [[q_input, q_input_mask, q_segment_mask, a_input, a_input_mask, a_segment_mask]\\\n        for q_input, q_input_mask, q_segment_mask, a_input, a_input_mask, a_segment_mask in \\\n        zip(q_inputs, q_input_masks, q_segment_masks, a_inputs, a_input_masks, a_segment_masks)]","f5f29ca3":"data = {'txt': text, 'label': labels}","4f6f1173":"t_text = [[t_q_input, t_q_input_mask, t_q_segment_mask, t_a_input, t_a_input_mask, t_a_segment_mask] \\\n          for t_q_input, t_q_input_mask, t_q_segment_mask, t_a_input, t_a_input_mask, t_a_segment_mask in \\\n          zip(t_q_inputs, t_q_input_masks, t_q_segment_masks, t_a_inputs, t_a_input_masks, t_a_segment_masks)]","da71f6d9":"t_data = {'txt': t_text}","01d5d634":"import torch\ntorch.save(data, '.\/t7\/data.t7')","c649bb61":"torch.save(t_data, '.\/t7\/test.t7')","3c21597f":"import numpy as np\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom transformers import BertTokenizer, BertModel\nfrom scipy.stats import spearmanr","1abcd292":"class Model(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.bert = BertModel.from_pretrained('..\/input\/huggingfacetransformermodels\/model_classes\/bert\/bert-base-uncased-pytorch-model')\n        self.dropout = nn.Dropout(0.2)\n        self.pool = nn.AvgPool2d((512, 1))\n        self.output = nn.Linear(768 * 2, 30) \n        \n    def forward(self, q_inputs, q_input_masks, q_segment_masks, a_inputs, a_input_masks, a_segment_masks):\n        q_outputs = self.bert(q_inputs, attention_mask=q_input_masks, token_type_ids=q_segment_masks)\n        q_x = q_outputs[0]\n        q_x = self.dropout(q_x)\n        q_x = q_x.unsqueeze(1)\n        q_x = self.pool(q_x)\n        q_x = q_x.squeeze()\n        \n        a_outputs = self.bert(a_inputs, attention_mask=a_input_masks, token_type_ids=a_segment_masks)\n        a_x = a_outputs[0]\n        a_x = self.dropout(a_x)\n        a_x = a_x.unsqueeze(1)\n        a_x = self.pool(a_x)\n        a_x = a_x.squeeze()\n        \n        x = torch.cat((q_x, a_x), -1)\n\n        x = torch.sigmoid(self.output(x))\n        return x","a50903cf":"import numpy as np\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader,Dataset, TensorDataset\nfrom sklearn.model_selection import train_test_split\nfrom transformers import AdamW, get_linear_schedule_with_warmup","f9bc7d90":"data = torch.load('.\/t7\/data.t7')","09f49e84":"test_data = torch.load('.\/t7\/test.t7')","1a68ff6b":"test_set = TensorDataset(torch.LongTensor(np.array(test_data['txt'])))","c2c9b230":"test_loader = DataLoader(\n        test_set,\n        batch_size=1,\n        shuffle=False)","e279fd55":"# optimizer = torch.optim.Adam(model.parameters(), lr=2e-5)\n# scheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=600, num_training_steps=6000)\n# criterion = nn.BCEWithLogitsLoss()\ncriterion = nn.BCELoss()","e1d79746":"def compute_spearmanr_ignore_nan(trues, preds):\n    rhos = []\n    for tcol, pcol in zip(np.transpose(trues), np.transpose(preds)):\n        rhos.append(spearmanr(tcol, pcol).correlation)\n    return np.nanmean(rhos)","98d4bd96":"gkf = GroupKFold(n_splits=5).split(X=train.question_body, groups=train.question_body)\nfinal_predicts = []\nfor fold, (train_idx, valid_idx) in enumerate(gkf):   \n    if fold in [0, 1, 2]:\n        model = Model()\n        model.cuda()\n        optimizer = torch.optim.Adam(model.parameters(), lr=2e-5)\n        train_set = TensorDataset(torch.LongTensor(np.array(data['txt'])[train_idx]),\\\n                                  torch.FloatTensor(np.array(data['label'])[train_idx])) \n        dev_set = TensorDataset(torch.LongTensor(np.array(data['txt'])[valid_idx]),\\\n                                  torch.FloatTensor(np.array(data['label'])[valid_idx]))\n        train_loader = DataLoader(\n            train_set,\n            batch_size=6,\n            shuffle=True, drop_last=True)\n        dev_loader = DataLoader(\n            dev_set,\n            batch_size=min(len(dev_set), 1),\n            shuffle=False)\n        for epoch_idx in range(3):\n            for batch_idx, (model_in, labels) in enumerate(train_loader):\n                model.train()\n                optimizer.zero_grad()\n                model_in = model_in.cuda()\n                labels = labels.cuda()\n                model_in = Variable(model_in, requires_grad=False)\n                scores = model(model_in[:, 0], model_in[:, 1], model_in[:, 2], model_in[:, 3], model_in[:, 4], model_in[:, 5])\n                labels = Variable(labels, requires_grad=False)\n                labels = labels.transpose(0, 1)\n                scores = scores.transpose(0, 1)\n                losses = [criterion(score, label) for score, label in zip(scores, labels)]\n                loss = sum(losses)\n                loss.backward()\n                torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n                optimizer.step()\n                # scheduler.step()\n            print(\"train epoch: {} loss: {}\".format(epoch_idx, loss.item()\/30))\n        # torch.save(model.state_dict(), '.\/t7\/model_{}.t7'.format(epoch_idx))\n        \n        torch.cuda.empty_cache()\n        model.eval()\n        pre_list = []\n        tru_list = []\n        with torch.no_grad():\n            for model_in, labels in dev_loader:\n                model_in = model_in.cuda()\n                model_in = Variable(model_in, requires_grad=False)\n                scores = model(model_in[:, 0], model_in[:, 1], model_in[:, 2], model_in[:, 3], model_in[:, 4], model_in[:, 5])\n                pre_list.append(scores)\n                tru_list.append(labels)\n        dev_predicts = [[p.item() for p in pre] for pre in pre_list]\n        truthes = [t.squeeze(0).numpy().tolist() for t in tru_list]\n        dev_rho = compute_spearmanr_ignore_nan(dev_predicts, truthes)\n        print(\"dev score: \", dev_rho)\n        \n        torch.cuda.empty_cache()\n        model.eval()\n        test_predicts = []\n        with torch.no_grad():\n            for model_in in test_loader:\n                # model_in = model_in[0]\n                model_in = model_in[0].cuda()\n                model_in = Variable(model_in, requires_grad=False)\n                scores = model(model_in[:, 0], model_in[:, 1], model_in[:, 2], model_in[:, 3], model_in[:, 4], model_in[:, 5])\n                test_predicts.append(scores)\n        final_predicts.append(test_predicts)\n        torch.cuda.empty_cache()","bc0d9c0f":"pres = np.average(final_predicts, axis=0)","b02822e5":"len(pres)","89acfb96":"test_output = [[p.item() for p in pre] for pre in pres]","605103d7":"output_cols = ['question_asker_intent_understanding',\n       'question_body_critical', 'question_conversational',\n       'question_expect_short_answer', 'question_fact_seeking',\n       'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible',\n       'answer_relevance', 'answer_satisfaction',\n       'answer_type_instructions', 'answer_type_procedure',\n       'answer_type_reason_explanation', 'answer_well_written']","afd0d891":"output_values = np.transpose(test_output).tolist()","fd3ca771":"output_dict = {k: v for k, v in zip(output_cols, output_values)}","771c21f5":"output_dict['qa_id'] = sample_submission['qa_id'].values.tolist()","91bc39ee":"output = pd.DataFrame.from_dict(output_dict)","8379053e":"order = ['qa_id', 'question_asker_intent_understanding',\n       'question_body_critical', 'question_conversational',\n       'question_expect_short_answer', 'question_fact_seeking',\n       'question_has_commonly_accepted_answer',\n       'question_interestingness_others', 'question_interestingness_self',\n       'question_multi_intent', 'question_not_really_a_question',\n       'question_opinion_seeking', 'question_type_choice',\n       'question_type_compare', 'question_type_consequence',\n       'question_type_definition', 'question_type_entity',\n       'question_type_instructions', 'question_type_procedure',\n       'question_type_reason_explanation', 'question_type_spelling',\n       'question_well_written', 'answer_helpful',\n       'answer_level_of_information', 'answer_plausible',\n       'answer_relevance', 'answer_satisfaction',\n       'answer_type_instructions', 'answer_type_procedure',\n       'answer_type_reason_explanation', 'answer_well_written']","99a6c9de":"output = output[order]","ad5874e8":"output.head()","c33157f9":"output.to_csv('submission.csv', index=False)","f89ecb35":"import pandas as pd\ntest_v3 = pd.read_csv(\"..\/input\/google-quest-qa-add-on\/test_v3.csv\")\ntrain_v3 = pd.read_csv(\"..\/input\/google-quest-qa-add-on\/train_v3.csv\")","38e9e327":"## RUN","06bc150d":"## DATA ","e2dd1297":"## MODEL"}}