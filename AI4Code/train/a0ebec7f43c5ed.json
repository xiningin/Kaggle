{"cell_type":{"11dd98e3":"code","b41e35a0":"code","ceaf33b1":"code","da3ed648":"code","952140b3":"code","36931afd":"code","db3fae2a":"code","02cc837a":"code","fc10c45d":"code","c6c55557":"code","ad22c966":"code","ba6c8ac8":"code","fe0e18ca":"code","83531e5a":"code","c065ec34":"code","d7ba7736":"code","3dc2b1f8":"code","ab9bc1cd":"code","7fabce28":"code","75839105":"code","4c3d2172":"code","0b045b86":"code","df503371":"code","cf9e25c9":"code","f53b91da":"code","299815b6":"markdown","2c161a36":"markdown","caa8000c":"markdown","2a47da87":"markdown","9a7464b5":"markdown","d7cfd270":"markdown"},"source":{"11dd98e3":"import numpy as np\nimport pandas as pd\nimport glob\nimport matplotlib.pyplot as plt","b41e35a0":"train_files = glob.glob(\"..\/input\/fingers\/fingers\/train\/*.png\")\ntest_files = glob.glob(\"..\/input\/fingers\/fingers\/test\/*.png\")","ceaf33b1":"train_files[0]","da3ed648":"from PIL import Image\nim = Image.open(train_files[0])\nplt.imshow(im);","952140b3":"im_array = np.array(im)","36931afd":"im_array.shape","db3fae2a":"X_train = np.zeros((len(train_files), 128, 128))\nY_train = np.zeros((len(train_files), 6))","02cc837a":"for i, trf in enumerate(train_files):\n    im = Image.open(trf)\n    X_train[i, :, :] = np.array(im)\n    Y_train[i, int(trf[-6:-5])] = 1","fc10c45d":"X_test = np.zeros((len(test_files), 128, 128))\nY_test = np.zeros((len(test_files), 6))","c6c55557":"for i, tsf in enumerate(test_files):\n    im = Image.open(tsf)\n    X_test[i, :, :] = np.array(im)\n    Y_test[i, int(tsf[-6:-5])] = 1","ad22c966":"print (\"number of training examples = \" + str(X_train.shape[0]))\nprint (\"number of test examples = \" + str(X_test.shape[0]))\nprint (\"X_train shape: \" + str(X_train.shape))\nprint (\"Y_train shape: \" + str(Y_train.shape))\nprint (\"X_test shape: \" + str(X_test.shape))\nprint (\"Y_test shape: \" + str(Y_test.shape))","ba6c8ac8":"import tensorflow as tf","fe0e18ca":"tf.__version__","83531e5a":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPool2D, Flatten, Dense","c065ec34":"model = Sequential()\nmodel.add(Conv2D(64, (3,3), strides=(1, 1), input_shape = (128, 128, 1), padding='same', activation = 'relu'))\nmodel.add(MaxPool2D((8,8)))\nmodel.add(Conv2D(128, (3,3), activation = 'relu'))\nmodel.add(Flatten())\nmodel.add(Dense(6, activation = 'softmax'))\nmodel.summary()","d7ba7736":"X_train = X_train.reshape(X_train.shape[0], 128, 128, 1)\/255\nX_test = X_test.reshape(X_test.shape[0], 128, 128, 1)\/255","3dc2b1f8":"X_train[0]","ab9bc1cd":"model.compile('SGD', loss = 'categorical_crossentropy', metrics = ['accuracy'])\nmodel.fit(x = X_train, y = Y_train, batch_size = 128, epochs = 10, validation_split=0.2)","7fabce28":"Y_pred_test = model.predict_classes(X_test)","75839105":"from sklearn import metrics","4c3d2172":"print(metrics.confusion_matrix(np.argmax(Y_test, axis=1), Y_pred_test))","0b045b86":"print(metrics.classification_report(np.argmax(Y_test, axis=1), Y_pred_test, digits=3))","df503371":"cnn_model = model","cf9e25c9":"converter = tf.lite.TFLiteConverter.from_keras_model(cnn_model)","f53b91da":"tflite_model = converter.convert()\nopen(\"converted_model_fingers_cnn.tflite\", \"wb\").write(tflite_model)","299815b6":"#### Scale data","2c161a36":"#### Check model perfomance by looking at confusion matrix and classification report on the test data","caa8000c":"### Train model","2a47da87":"#### Convert and save model","9a7464b5":"### Load train and test data","d7cfd270":"### Show an image and convert to array"}}