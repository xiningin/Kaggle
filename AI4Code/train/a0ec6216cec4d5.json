{"cell_type":{"c245b414":"code","2406f6e1":"code","bb1aa7b2":"code","c44da8e6":"code","63bca395":"code","576baa49":"code","a09bbf62":"code","f042229d":"code","472e1a3b":"code","31e71e45":"code","03405c4f":"code","d8f30a16":"code","b633a34b":"code","bd5d6a24":"code","e6f1ae8e":"code","a54344a4":"code","93addcab":"code","158c0648":"code","3fc952e2":"code","e7e0b758":"code","50001217":"code","00985691":"code","c188f61e":"code","cd9e0afe":"code","d84ab0c7":"code","cb75a408":"code","206a2d2e":"code","d8743e35":"code","ad1cabe7":"code","110e2920":"code","167f5198":"code","42a61974":"code","8e6dae2a":"code","5eb57893":"code","5dbe66d5":"code","1be92c4f":"markdown","dafb95b2":"markdown","acd7c429":"markdown","b6a40b78":"markdown","51fb9453":"markdown","c0894437":"markdown","944d66aa":"markdown","11b6ab2b":"markdown","cd3ec1ea":"markdown","4264a1e9":"markdown","bb4a6432":"markdown"},"source":{"c245b414":"import os\nimport gc\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport torch\nimport torch.nn as nn\n\n\nfrom transformers import AutoTokenizer\nfrom pprint import pprint\nfrom collections import Counter","2406f6e1":"class config:\n    sample = False","bb1aa7b2":"segment2label = {\n    \"B\": 0,\n    \"I\": 1,\n    \"O\": 2\n}\n\nlabel2segment = {\n    0: \"B\",\n    1: \"I\",\n    2: \"O\"\n}\n\ndiscourse2label={\n    'Lead': 0,\n    'Position' : 1,\n    'Evidence' : 2,\n    'Claim' : 3,\n    'Concluding Statement' : 4,\n    'Counterclaim' : 5,\n    'Rebuttal': 6,\n    'O': 7\n}\nlabel2discourse={\n    0: 'Lead',\n    1: 'Position',\n    2: 'Evidence',\n    3: 'Claim',\n    4: 'Concluding Statement',\n    5: 'Counterclaim',\n    6: 'Rebuttal',\n    7: 'O'\n}","c44da8e6":"def read_essay(filename):\n    essay_folder='..\/input\/feedback-prize-2021\/train'\n    filepath = os.path.join(essay_folder, filename+\".txt\")\n    essay = ''\n    with open(filepath) as file:\n        essay = file.read()\n    return essay\n\n\ndef get_discourse_labels(row):\n    predictionstrings = row.predictionstring\n    content = row.content\n    discourse_type = row.discourse_type\n    labels = ['O'] * len(content)\n    \n    for i, cls_label in enumerate(discourse_type):\n        predstring = predictionstrings[i]\n        token_ids = [int(x) for x in predstring.split()]\n        for j, token_id in enumerate(token_ids):\n            labels[token_id] = cls_label\n    return labels\n\ndef get_segment_labels(row):\n    predictionstrings = row.predictionstring\n    content = row.content\n    labels = ['O']*len(content)\n    \n    for i, predstring in enumerate(predictionstrings):\n        token_ids = [int(x) for x in predstring.split()]\n        for j, token_id in enumerate(token_ids):\n            if j==0:\n                label = 'B'\n            else:\n                label = 'I'\n            labels[token_id] = label\n    return labels","63bca395":"def map_discourse2metafeatures(row):\n    discourse_type   = row.discourse_type\n    predictionstring = row.predictionstring\n    paragraph_len    = row.paragraph_len\n    num_paragraphs = row.num_paragraphs\n    \n    lst=[]\n    for i, discourse in enumerate(discourse_type):\n        pstring=predictionstring[i]\n        start_idx = pstring[0]\n        essay_len = 0\n        pidx = -1\n        \n        for j in range( len(paragraph_len) ):\n            essay_len += paragraph_len[j]\n            if start_idx < essay_len:\n                pidx=j\n                break\n        \n        lst.append({\n            'element_type' : discourse,\n            'num_paragraphs': num_paragraphs,\n            'para_id': pidx,\n            'segment_length': paragraph_len[pidx]\n        })\n    return lst","576baa49":"train_df = pd.read_csv('..\/input\/feedback-prize-2021\/train.csv')\nif config.sample:\n    train_df = train_df.head(100)\n\ntrain_df = train_df.groupby('id')[['discourse_type', 'predictionstring']].agg(list).reset_index()\ntrain_df['content'] = train_df.id.apply(read_essay)\ntrain_df.predictionstring = train_df.predictionstring.apply(lambda lst:  [ [int(x) for x in p.split()] for p in lst] )","a09bbf62":"train_df['paragraphs'] = train_df.content.apply(lambda content: [ p for p in content.split('\\n') if p!=''])\ntrain_df['num_paragraphs'] = train_df.paragraphs.apply(lambda lst: len(lst))\ntrain_df['paragraph_len'] = train_df.paragraphs.apply( lambda lst: [len(p.split()) for p in lst] )\n\ntrain_df['discourse_meta_features'] = train_df.apply(map_discourse2metafeatures, axis=1)\ntrain_df.head()","f042229d":"para_df = train_df.copy()\npara_df['first_para_length'] = para_df['paragraph_len'].apply(lambda lst: lst[0])\npara_df['last_para_length'] = para_df['paragraph_len'].apply(lambda lst: lst[-1])\n\npara_df.head()","472e1a3b":"para_df.num_paragraphs.describe()","31e71e45":"print( \"Number of essays with <10 paragraphs - {:.4f}\".format(100*len(para_df[para_df.num_paragraphs<10])\/len(para_df)))\n\nplt.figure(figsize=(15, 5))\nplt.title(\"Number of Paragraphs in Essay\")\nsns.countplot(data=para_df, x='num_paragraphs')\nplt.show()","03405c4f":"df = []\nfor index, row in train_df.iterrows():\n    for plen in row.paragraph_len:\n        df.append({\n            'essay_id': index,\n            'num_paragraphs': row.num_paragraphs,\n            'plen' : plen\n        })\ndf = pd.DataFrame.from_dict(df)\ndf.head()","d8f30a16":"df.plen.describe()","b633a34b":"plt.title(\"Distribution of paragraph lengths\")\nsns.histplot(data=df[df.plen > 3], x='plen', stat='probability')\nplt.show()","bd5d6a24":"df = df.groupby(['essay_id', 'num_paragraphs'], as_index=False)[['plen']].mean()\n\n_, ax=plt.subplots(1,2, figsize=(15, 5))\n\nax[0].set_title(\"Number of Paragraphs (vs) Avergae Paralengths\")\nax[1].set_title(\"Number of Paragraphs (>10) (vs) Avergae Paralengths\")\n\nsns.scatterplot(data=df, x='num_paragraphs', y='plen', ax=ax[0])\nsns.scatterplot(data=df[df.num_paragraphs>10], x='num_paragraphs', y='plen', ax=ax[1])\nplt.show()","e6f1ae8e":"para_df.head(2)","a54344a4":"df=[]\nfor idx, all_meta_features in enumerate(train_df.discourse_meta_features.values):\n    for meta in all_meta_features:\n        para_id = meta['para_id']\n        segment_length = meta['segment_length']\n        df.append({\n            'essay_id':idx,\n            'para_id': para_id,\n            'segment_length': segment_length,\n            'ecnt': 1\n        })\ndf = pd.DataFrame.from_dict(df)\ndf = df.groupby(['essay_id', 'para_id', 'segment_length'], as_index=False)[['ecnt']].sum()\ndf.head()","93addcab":"_, ax= plt.subplots(1, 4, figsize=(15, 5))\n\nax[0].set_title(\"number of Elements in the paragraph\")\nax[1].set_title(\"#elements (vs) Segment Length\")\nax[2].set_title(\"avg segment length vs #elements\")\nax[3].set_title(\"#elements (vs) avg segment length\")\n\nsns.countplot(data=df, x='ecnt', ax=ax[0])\nsns.scatterplot(data=df, y='ecnt', x='segment_length', ax=ax[1])\nsns.lineplot(data=df, y='ecnt', x='segment_length', ci=None, ax=ax[2])\nsns.lineplot(data=df, x='ecnt', y='segment_length', ci=None, ax=ax[3])\n\nplt.show()","158c0648":"para_df[['first_para_length', 'last_para_length']].describe()","3fc952e2":"_, ax=plt.subplots(1, 2, figsize=(15, 5))\nax[0].set_title(\"First Paragraph Length\")\nax[1].set_title(\"Last Paragraph Length\")\n\nsns.boxplot(data=para_df, x='first_para_length', ax=ax[0])\nsns.boxplot(data=para_df, x='last_para_length', ax=ax[1])\nplt.show()","e7e0b758":"print( \"Number of Essays with first paragraph with <=3 words:\" , len(para_df[(para_df.first_para_length<=3)] ))\nprint( \"Number of Essays with last paragraph with <=3 words:\" , len(para_df[(para_df.last_para_length<=3)] ))\nprint( \"Number of Essays with first or last paragraph with <=3 words:\" , len(para_df[(para_df.first_para_length<=3) |\n                                                                                     (para_df.last_para_length<=3)] ))","50001217":"_, ax=plt.subplots(1, 2, figsize=(15, 5))\n\nax[0].set_title(\"First Paragraph Length\")\nax[1].set_title(\"Last Paragraph Length\")\n\nsns.histplot(data=para_df, x='first_para_length', ax=ax[0])\nsns.histplot(data=para_df, x='last_para_length', ax=ax[1])\nplt.show()","00985691":"plt.title(\"Correlation between the first and last paragraph lengths\")\nsns.heatmap( para_df[['first_para_length', 'last_para_length']].corr() , annot=True)\nplt.show()","c188f61e":"first_para_df = para_df[(para_df.first_para_length<=3)].copy()\nlast_para_df = para_df[(para_df.last_para_length<=3)].copy()\n\nfirst_paragraphs = first_para_df.paragraphs.apply(lambda lst: lst[0]).values\nlast_paragraphs = last_para_df.paragraphs.apply(lambda lst: lst[-1]).values\n\n\nprint(\"Number of Unique first paragraphs:\", len(set(first_paragraphs)))\nprint(\"Number of Unique last paragraphs:\", len(set(last_paragraphs)))\n\n","cd9e0afe":"df1 = pd.DataFrame.from_dict( {\n    \"text\": Counter(first_paragraphs).keys(),\n    \"num_occurs\": Counter(first_paragraphs).values()\n})\n\ndf1.sort_values('num_occurs', ascending=False).head(10)","d84ab0c7":"train_df.head(1)","cb75a408":"discourse_para_data=[]\n\nfor lst in train_df.discourse_meta_features.values:\n    discourse_para_data += lst\ndf=pd.DataFrame.from_dict(discourse_para_data)\ndf['is_first_para'] = (df['para_id']==0).astype(int)\ndf['is_last_para']  = (df['para_id']== df['num_paragraphs']-1).astype(int)\ndf['para_id_from_last'] = df['para_id'] - df['num_paragraphs']\ndf.head()","206a2d2e":"_, ax= plt.subplots(1, 2, figsize=(16, 5))\nsns.countplot(data=df[df.para_id < 20], x='para_id', ax=ax[0])\nsns.countplot(data=df[df.para_id_from_last > -20], x='para_id_from_last', ax=ax[1])\n\nplt.show()","d8743e35":"def plot_paraids_for_elements(etype):\n    para_lmt=10\n    _, ax=plt.subplots(1, 2, figsize=(15, 5))\n    plt.suptitle(etype)\n    ax[0].set_title(\"para ids\")\n    ax[1].set_title(\"para ids from last\")\n    \n    sns.countplot(data=df[(df.element_type == etype) & (df.para_id < para_lmt)], x='para_id', ax=ax[0])\n    sns.countplot(data=df[(df.element_type == etype) & \n                          (df.para_id_from_last > -para_lmt)].sort_values('para_id_from_last', ascending=False),\n                  x='para_id_from_last',\n                  ax=ax[1],\n                  order = np.arange(-1, -20, -1)\n                 )\n\n    plt.show()","ad1cabe7":"for i, etype in enumerate([\"Lead\", 'Position', 'Evidence', 'Claim',\n                           'Counterclaim', 'Rebuttal', 'Concluding Statement']):\n    plot_paraids_for_elements(etype)","110e2920":"train_df['first_discourse_type'] = train_df.discourse_type.apply(lambda lst: lst[0])\ntrain_df['last_discourse_type'] = train_df.discourse_type.apply(lambda lst: lst[-1])\n\ntrain_df.head(2)","167f5198":"train_df.first_discourse_type.value_counts()","42a61974":"_, ax=plt.subplots(1, 2, figsize=(17, 5))\n\nax[0].set_title(\"First Discourse Type in Essay\")\nax[1].set_title(\"Last Discourse Type in Essay\")\n\nplt.xticks(rotation=40)\nsns.countplot(data=train_df, x='first_discourse_type', ax=ax[0])\n\nplt.xticks(rotation=40)\nsns.countplot(data=train_df, x='last_discourse_type', ax=ax[1])\n\nplt.show()","8e6dae2a":"def is_concluding_at_last(discourse_type):\n    if 'Concluding Statement' not in discourse_type:\n        return -1\n    for i, etype in enumerate(discourse_type):\n        if etype == 'Concluding Statement':\n            if i==len(discourse_type)-1:\n                return 1\n            return 0\n    return 0\n\ntrain_df['is_concluding_comes_last'] = train_df.discourse_type.apply(is_concluding_at_last)\ntrain_df.head()","5eb57893":"train_df.is_concluding_comes_last.value_counts()","5dbe66d5":"\nplt.title(\"Concluding Statement coming at End of Essay\")\nsns.countplot(data=train_df[train_df.is_concluding_comes_last!=-1],\n              x='is_concluding_comes_last')\nplt.show()\n","1be92c4f":"Lets check a few first paragraph with ","dafb95b2":"lets check if any of there first para with <=3 words have ","acd7c429":"1. more variations in the paragraph length if number of paragraphs are less.\n2. As the number of paragraphs increases (i.e mostly after 10) , paragraph lengths are very less variant\n3. for number of paragraphs >=20 --> paragraphs lengths are between [15, 30] --> may be there are like sentences.","b6a40b78":"the spike in the graph looks abormal and ","51fb9453":"# lets check the number of paragraphs in the essay","c0894437":"# label maps","944d66aa":"To be continued............","11b6ab2b":"1. with small average segment length's --> number of discourse elements are smaller.\n2. most of the paragraphs have <=2 elements","cd3ec1ea":"From the graphs above \n1. Lead - occurs at 1st 2 paragraphs\n2. Concluding Statemtent - occurs in the last paragraph\n3. Lead , Position --> comes together in the 1st 2 paragraph.","4264a1e9":"1. Lead, Position --> are the most discourse types that comes first in the essays\n2. Concluding Statement --> occurs most at the end of the essay","bb4a6432":"looks there are many paragraphs with <= 2 words"}}