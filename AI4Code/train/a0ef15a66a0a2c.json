{"cell_type":{"87d4c3f4":"code","a9f4b291":"code","ae31de4f":"code","923d0ae5":"code","ffea664b":"code","cd2f1779":"code","9fc630b2":"code","85c145fd":"code","44ed5e99":"markdown","6d5dc2d9":"markdown"},"source":{"87d4c3f4":"from allennlp.commands.elmo import ElmoEmbedder\nelmo = ElmoEmbedder()","a9f4b291":"import numpy as np\ndef cos_sim(vector_a, vector_b):\n    \"\"\"\n    \u8ba1\u7b97\u4e24\u4e2a\u5411\u91cf\u4e4b\u95f4\u7684\u4f59\u5f26\u76f8\u4f3c\u5ea6\n    :param vector_a: \u5411\u91cf a \n    :param vector_b: \u5411\u91cf b\n    :return: sim\n    \"\"\"\n    vector_a = np.mat(vector_a)\n    vector_b = np.mat(vector_b)\n    num = float(vector_a * vector_b.T)\n    denom = np.linalg.norm(vector_a) * np.linalg.norm(vector_b)\n    cos = num \/ denom\n    sim = 0.5 + 0.5 * cos\n    return sim","ae31de4f":"tokens1 = [\"I\", \"am\", \"a\", \"bad\",\"boy\"]\ntokens2 = [\"I\", \"am\", \"a\", \"good\",\"girl\"]\nvectors1 = elmo.embed_sentence(tokens1)\nvectors2 = elmo.embed_sentence(tokens2)\nprint(vectors1.shape)\nprint(vectors2.shape)\ncos_sim(vectors1[0][3], vectors2[0][3]) ","923d0ae5":"import numpy as np\nimport tensorflow as tf","ffea664b":"input_x = tf.placeholder(tf.float32,shape=[None,30],name='inputs')\nlabels = tf.placeholder(tf.int32,shape=[None,],name='labels')\nwith tf.variable_scope('weight',reuse=tf.AUTO_REUSE):\n    W1 = tf.get_variable('w1',shape=[30,128])\n    b1 = tf.get_variable('b1',shape=[128])\n    W2 = tf.get_variable('w2',shape=[128,4])\n    b2 = tf.get_variable('b2',shape=[4])\n\n#inference part\nlogits = tf.nn.relu(tf.matmul(input_x,W1)+b1)\nlogits = tf.matmul(logits,W2)+b2","cd2f1779":"sess = tf.Session()\nsess.run(tf.global_variables_initializer())","9fc630b2":"#\u663e\u793a\u53ef\u8bad\u7ec3\u7684\u53d8\u91cf\nvariables_names = [v.name for v in tf.trainable_variables()]\nvalues = sess.run(variables_names)\nfor k, v in zip(variables_names, values):\n    print (\"Variable: \", k)\n    print (\"Shape: \", v.shape)\n    #print (v)","85c145fd":"#\u5c06\u4e0d\u540c\u7684\u5b66\u4e60\u7387\u5e94\u7528\u5230\u4e0d\u540c\u7684\u5c42\u4e0a\nvar1 = tf.trainable_variables()[:2]\nvar2 = tf.trainable_variables()[2:]\ntrain_op1 = tf.train.GradientDescentOptimizer(0.00001).minimize(loss, var_list=var1) \ntrain_op2 = tf.train.GradientDescentOptimizer(0.0001).minimize(loss, var_list=var2)\ntrain_op = tf.group(train_op1, train_op2)","44ed5e99":"# ELMo\u6f14\u793a\u90e8\u5206","6d5dc2d9":"# ULMFiT\u6f14\u793a\u90e8\u5206"}}