{"cell_type":{"bc1408b3":"code","9bf52040":"code","50b743e0":"code","5c7d5464":"code","88d611f8":"code","de7e5e4d":"code","45c389a7":"code","fbddec2f":"code","ec73f8d5":"code","70228397":"markdown","a5098256":"markdown"},"source":{"bc1408b3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9bf52040":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport torch.optim as optim\n\ntorch.manual_seed(777)","50b743e0":"if torch.cuda.is_available() is True:\n  device = torch.device(\"cuda\")\nelse:\n  device = torch.device(\"cpu\")","5c7d5464":"# \ud30c\uc77c \uc5f4\uae30\ndata = pd.read_csv('air_pollution_train.csv', header=None, skiprows=1)\n\n# \ubd80\uc801\ud569 \ub370\uc774\ud130 drop\ndata = data.dropna()\ndata = np.array(data)\ndata = pd.DataFrame(data)\ndata[0] = data[0].astype(int)\ndata[1] = data[1].astype(int)\n\n# \ud559\uc2b5 \ub370\uc774\ud130 \uad6c\uc131\n# \ucd1d 6\uac00\uc9c0\uc758 y\ub97c \uad6c\ud574\uc57c \ud558\ubbc0\ub85c y_train\uc744 \ub9ac\uc2a4\ud2b8\ub85c \uad6c\ud604\ud558\uc5ec \uac01\uac01 \uc800\uc7a5\nx_train = data.loc[:, 0:1]\ny_train = [] # so2, co, o3, no2, pm10, pm2.5\nfor i in range(2, 8):\n  y_temp = data.loc[:, i]\n  y_temp = np.array(y_temp)\n  y_temp = torch.FloatTensor(y_temp).to(device)\n  y_train.append(y_temp)\n\nx_train = np.array(x_train)\nx_train = torch.FloatTensor(x_train).to(device)","88d611f8":"lr = [1e-2, 1e-2, 1e-2, 1e-2, 1e-1, 1e-1] # \uac01 \uc218\uce58\uc758 learning rate\ntotal_epochs = [1500, 1500, 1500, 1500, 1500, 1500] # \uac01 \uc218\uce58\uc758 epoch\nprint_per_epoch = [i \/ 10 for i in total_epochs] # \uac01 \uc218\uce58\uc758 \ud559\uc2b5 \uc9c4\ud589\ub3c4\ub97c \ub098\ud0c0\ub0b4\ub824 \ub530\ub85c \ub9cc\ub4e0 \ubcc0\uc218","de7e5e4d":"class NN(torch.nn.Module):\n  def __init__(self):\n    super(NN,self).__init__()\n    self.linear1 = torch.nn.Linear(2,16, bias = True)\n    self.linear2 = torch.nn.Linear(16,32, bias = True)\n    self.linear3 = torch.nn.Linear(32,32, bias = True)\n    self.linear4 = torch.nn.Linear(32,1,bias = True)\n    self.relu = torch.nn.ReLU()\n    \n    torch.nn.init.xavier_uniform_(self.linear1.weight)\n    torch.nn.init.xavier_uniform_(self.linear2.weight)\n    torch.nn.init.xavier_uniform_(self.linear3.weight)\n    torch.nn.init.xavier_uniform_(self.linear4.weight)\n  def forward(self,x):\n    out = self.linear1(x)\n    out = self.relu(out)\n    out = self.linear2(out)\n    out = self.relu(out)\n    out = self.linear3(out)\n    out = self.relu(out)\n    out = self.linear4(out)\n    return out\n\nmodel = NN().to(device)","45c389a7":"x_test = pd.read_csv('air_pollution_test.csv', header=None, skiprows=1)\nx_test = np.array(x_test)\nx_test = torch.FloatTensor(x_test).to(device)","fbddec2f":"# \uac74\ub108 \ub6f0\uc5b4\ub3c4 \ub418\ub294 \uc218\uce58\uc758 \uc778\ub371\uc2a4 \uc800\uc7a5\nskiptype = []\npredict = []\ncount = -1\nfor pollution_type in range(6):\n  # 0 ~ 5 : SO2, CO, O3, NO2, PM10, PM2.5\n\n  if pollution_type in skiptype:\n    continue\n\n  loss = torch.nn.MSELoss().to(device)\n  optimizer = optim.Adam(model.parameters(), lr=lr[pollution_type])\n\n  mincost = 1e10 # cost \ucd5c\uc19f\uac12\n\n    # \uc2dc\uc791 \ub85c\uadf8 \ucd9c\ub825\n  if pollution_type == 0:   print('Start training SO2')\n  elif pollution_type == 1: print('Start training CO')\n  elif pollution_type == 2: print('Start training O3')\n  elif pollution_type == 3: print('Start training NO2')\n  elif pollution_type == 4: print('Start training PM10')\n  elif pollution_type == 5: print('Start training PM2.5')\n\n  for epoch in range(total_epochs[pollution_type] + 1):\n\n    hypothesis = model(x_train)\n    cost = torch.sqrt((loss(hypothesis,y_train[pollution_type])))\n\n    optimizer.zero_grad()\n    cost.backward()\n    optimizer.step()\n\n    if epoch % print_per_epoch[pollution_type] == 0:\n      print('Epoch {:6d}\/{} , cost = {}'.format(epoch, total_epochs[pollution_type], cost.item()))\n      \n  with torch.no_grad():\n    model.eval()\n    predict.append(model(x_test))","ec73f8d5":"sub = pd.read_csv('air_pollution_submission.csv', header=None, skiprows=1)\n\nsub[1] = sub[1].astype(float)\nsub[2] = sub[2].astype(float)\nsub[3] = sub[3].astype(float)\nsub[4] = sub[4].astype(float)\nsub[5] = sub[5].astype(float)\nsub[6] = sub[6].astype(float)\n\nsub = np.array(sub)\nfor i in range(len(sub)):\n  sub[i][1] = predict[0][i]\n  sub[i][2] = predict[1][i]\n  sub[i][3] = predict[2][i]\n  sub[i][4] = predict[3][i]\n  sub[i][5] = predict[4][i]\n  sub[i][6] = predict[5][i]\n\nfor i in range(6):\n  predict[i] = predict[i].detach().cpu().numpy().reshape(-1, 1)\n\nid = np.array([i for i in range(len(x_test))]).reshape(-1, 1)\nresult = np.hstack([id, predict[0], predict[1], predict[2], predict[3], predict[4], predict[5]])\n\nsub = pd.DataFrame(result, columns=[\"Id\", \"SO2\", \"CO\", \"O3\", \"NO2\", \"PM10\", \"PM2.5\"])\nsub['Id'] = sub['Id'].astype(int)\n\nsub\nsub.to_csv('yh_submit.csv', index=False)","70228397":"# \uc131\ub2a5 \ud5a5\uc0c1\uc744 \uc704\ud574 \ucd94\uac00\ud55c \ubd80\ubd84\n\n**<h1 id=\"one_one\" style=\"color:purple;\">- NN\uc124\uacc4, \ucd08\uae30\ud654 \ubc29\ubc95 \uc0ac\uc6a9 <\/h1>**","a5098256":"<h1 style=\"font-family: 'Garamond';\"> <b><i>2019 \ub300\uae30\uc624\uc5fc \ub370\uc774\ud130\uc5d0 \ub530\ub978 2020-1 \ub300\uae30\uc624\uc5fc \uc218\uce58 \uc608\uce21 - attack score (12.07964)<\/i><\/b><\/h1>\n\n<b><a>* \uc131\ub2a5 \ud5a5\uc0c1\uc744 \uc704\ud574 \ucd94\uac00\ub41c \ubd80\ubd84<\/a><br><\/b>\n&emsp;&emsp;<a href=\"#one_one\">- NN\uc124\uacc4, \ucd08\uae30\ud654 \ubc29\ubc95 \uc0ac\uc6a9 <\/a><br>\n"}}