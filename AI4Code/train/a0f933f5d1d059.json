{"cell_type":{"324ce118":"code","472714b0":"code","a6d9407b":"code","3cb94240":"code","f75f2b44":"code","f540e1ed":"code","9858c004":"code","1e6bded9":"code","71d058a3":"code","35163ee7":"markdown","858b38bf":"markdown"},"source":{"324ce118":"import pandas as pd\nimport numpy as np\nimport datatable as dt\nfrom catboost import CatBoostClassifier\nfrom sklearn.model_selection import train_test_split, StratifiedKFold\nfrom sklearn.metrics import roc_curve, auc\nfrom sklearn import linear_model\nfrom sklearn import decomposition\nfrom sklearn import preprocessing\nimport optuna\nimport gc","472714b0":"%%time\ntrain = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/test.csv')\n\nprint('Training data: ')\ntrain.head()","a6d9407b":"TARGET = 'target'\nFEATURES = [col for col in train.columns if col not in ['id', TARGET]]","3cb94240":"%%time\ntrain[\"mean\"] = train[FEATURES].mean(axis=1)\ntrain[\"std\"] = train[FEATURES].std(axis=1)\ntrain[\"min\"] = train[FEATURES].min(axis=1)\ntrain[\"max\"] = train[FEATURES].max(axis=1)\n\ntest[\"mean\"] = test[FEATURES].mean(axis=1)\ntest[\"std\"] = test[FEATURES].std(axis=1)\ntest[\"min\"] = test[FEATURES].min(axis=1)\ntest[\"max\"] = test[FEATURES].max(axis=1)\n\nFEATURES.extend(['mean', 'std', 'min', 'max'])","f75f2b44":"%%time\nscaler = preprocessing.StandardScaler()\nfor col in FEATURES:\n    train[col] = scaler.fit_transform(train[col].to_numpy().reshape(-1,1))\n    test[col] = scaler.transform(test[col].to_numpy().reshape(-1,1))\n    \nX = train[FEATURES].to_numpy().astype(np.float32)\ny = train[TARGET].to_numpy().astype(np.float32)\nX_test = test[FEATURES].to_numpy().astype(np.float32)\n\ndel train, test\ngc.collect()","f540e1ed":"SEED = 45","9858c004":"# I did not optimize the parameters, I borrowed it, thanks to those who worked\n# I added only early_stopping_rounds myself\nparams = {'iterations': 10000,          \n          'objective': 'CrossEntropy',\n          'bootstrap_type': 'Bernoulli',\n          'learning_rate': 0.023575206684596582, # 0.05071417780137978\n          'reg_lambda': 36.30433203563295,\n          'random_strength': 43.75597655616195,\n          'depth': 8,\n          'eval_metric' : 'AUC',\n          'min_data_in_leaf': 12,\n          'leaf_estimation_iterations': 1,\n          'subsample': 0.8227911142845009,\n           'task_type': 'GPU',\n           'devices': '0'\n         }","1e6bded9":"%%time\n\npreds = []\nscores = []\n\nfor fold, (idx_train, idx_valid) in enumerate(StratifiedKFold(n_splits=5, shuffle=True, random_state=SEED).split(X, y)):\n    X_train, y_train = X[idx_train], y[idx_train]\n    X_valid, y_valid = X[idx_valid], y[idx_valid]\n\n    model = CatBoostClassifier(**params)\n\n    model.fit(X_train,y_train,\n              eval_set=[(X_valid,y_valid)],\n              early_stopping_rounds=2000,\n              verbose=False)\n\n    pred_valid = model.predict_proba(X_valid)[:,1]\n    fpr, tpr, _ = roc_curve(y_valid, pred_valid)\n    score = auc(fpr, tpr)\n    scores.append(score)\n\n    print(f\"Seed: {SEED} Fold: {fold + 1} Score: {score}\" \"\\n\")\n\n    test_preds = model.predict_proba(X_test)[:,1]\n    preds.append(test_preds)\n    \nprint(f\"Overall Validation Score: {np.mean(scores)}\")","71d058a3":"predictions = np.mean(np.column_stack(preds),axis=1)\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-oct-2021\/sample_submission.csv')\nsample_submission['target'] = predictions\nsample_submission.to_csv('.\/ss_catboostkf.csv', index=False)\nsample_submission.head()","35163ee7":"The result looks good. Catboost is a great time saver!","858b38bf":"The purpose of the study is to check how well catboost handles unprepared data. In a situation where you need to act quickly, this can help.\nAccelerator GPU is ON"}}