{"cell_type":{"0f6d0ea1":"code","e6b453a2":"code","c86ed58b":"code","49c0b67c":"code","f713bf23":"code","13fe5d0d":"code","8611bfb4":"code","4739419e":"code","29708943":"code","9e1df4f7":"code","a78348f4":"code","5363c556":"code","0466d052":"code","d52d2963":"code","d6fbdd65":"code","4493f821":"code","2526deb1":"code","e78c1397":"code","1903b104":"code","81746d0b":"code","e18f0fb9":"code","ec67d331":"code","e70a5156":"code","b7490591":"code","0c997bd0":"code","e9a0b4d0":"code","4685e765":"code","44216add":"code","edafb297":"code","a161fa81":"code","0266423c":"code","577c7d91":"code","4fb84946":"code","971f8dee":"markdown","ba87d244":"markdown","6af5d735":"markdown","916587d6":"markdown","8c470e5e":"markdown","7708d6fd":"markdown"},"source":{"0f6d0ea1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","e6b453a2":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","c86ed58b":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","49c0b67c":"train.info()","f713bf23":"test.info()","13fe5d0d":"all = pd.concat([train, test], sort = False)\nall.info()","8611bfb4":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","4739419e":"all.info()","29708943":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","9e1df4f7":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","a78348f4":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","5363c556":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","0466d052":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","d52d2963":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","d6fbdd65":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","4493f821":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","2526deb1":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","e78c1397":"all_dummies = pd.get_dummies(all_1, drop_first = True)\nall_dummies.head()","1903b104":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","81746d0b":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","e18f0fb9":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","ec67d331":"from sklearn.linear_model import LogisticRegression","e70a5156":"logmodel = LogisticRegression(solver = 'liblinear')\nlogmodel.fit(X_train,y_train)","b7490591":"predictions = logmodel.predict(X_test)\npredictions","0c997bd0":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,predictions))","e9a0b4d0":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,predictions)","4685e765":"all_test.head()","44216add":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","edafb297":"TestForPred.info()","a161fa81":"t_pred = logmodel.predict(TestForPred).astype(int)","0266423c":"PassengerId = all_test['PassengerId']","577c7d91":"logSub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nlogSub.head()","4fb84946":"logSub.to_csv(\"1_Logistics_Regression_Submission.csv\", index = False)","971f8dee":"****Extra Features:","ba87d244":"****Check Accuracy","6af5d735":"****Confusion Matrix","916587d6":"****Train\/Test Split","8c470e5e":"****Final Predictions","7708d6fd":"****Build Logistic Model"}}