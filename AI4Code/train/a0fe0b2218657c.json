{"cell_type":{"6117c12e":"code","3f89641d":"code","03a745ee":"code","cfd00594":"code","a491624a":"code","ac6e42c8":"code","1930b970":"code","e4dc027b":"code","5bea345c":"code","640b851d":"code","7f0fc8df":"code","da91533a":"code","e66146c4":"code","5eef0b33":"code","5d298c86":"code","4c63c099":"code","d1691799":"code","be6b4cee":"code","b536686e":"code","ad0f9bac":"code","23f57bb4":"code","74c30be9":"code","4f3b1f36":"code","b62e43b2":"code","0988a0e1":"code","8cae7c8d":"code","74aff7fd":"code","28443d58":"code","8fccce43":"code","53354e57":"code","4b5b0fca":"code","c8a2d96b":"code","a9d9a107":"code","77d48228":"code","eb032504":"code","7fcc95ca":"code","5c192ac1":"markdown","dbf01020":"markdown","dc5f2de8":"markdown","dd0b4178":"markdown","8a10df95":"markdown","c01b9852":"markdown","62d52c78":"markdown","8226f8af":"markdown","ac2e219f":"markdown","2060526a":"markdown"},"source":{"6117c12e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f89641d":"data = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndata = data.set_index('Name')\ndata.head(10)","03a745ee":"data[\"Nationality\"][1]  # indexing using square brackets","cfd00594":"data.Nationality[1]   # using column attribute and row label","a491624a":"data.loc[\"Cristiano Ronaldo\",[\"Overall\"]]","ac6e42c8":"data[[\"Club\",\"Overall\"]]  # Selecting few columns","1930b970":"print(type(data[\"Nationality\"]))     # series\nprint(type(data[[\"Nationality\"]]))   # data frames","e4dc027b":"data.loc[\"L. Messi\":\"J. Oblak\",\"Overall\":\"Club\"] # Slicing and indexing series ","5bea345c":"data.loc[\"J. Oblak\":\"L. Messi\": -1, \"Overall\":\"Club\"]  # Reverse slicing ","640b851d":"data.loc[\"L. Messi\":\"J. Oblak\",\"GKDiving\":] # From something to end","7f0fc8df":"boolean = data.Overall > 90 # Creating boolean series\ndata[boolean]","da91533a":"first_filter = data.Overall > 90\nsecond_filter = data.Age < 30\ndata[first_filter & second_filter]","e66146c4":"data.Nationality[data.Overall>90] # Filtering column based others","5eef0b33":"def rank(n):\n    return n\/10\ndata.Composure.apply(rank)   #apply python functions","5d298c86":"data.Composure.apply(lambda n : n\/10)  #apply lambda function","4c63c099":"data[\"totalPower\"] = data.Overall + data.Potential \ndata.head()  # Defining column using other columns","d1691799":"\ndictionary = {\"NAME\":[\"ali\",\"veli\",\"kenan\",\"hilal\",\"ayse\",\"evren\"],\n\n              \"AGE\":[15,16,17,33,45,66],\n\n              \"MAAS\": [100,150,240,350,110,220]}\n\ndataFrame1 = pd.DataFrame(dictionary)\n\ndataFrame1.iloc[:,2]","be6b4cee":"dictionary = {\"NAME\":[\"ali\",\"veli\",\"kenan\",\"hilal\",\"ayse\",\"evren\"],\n\n              \"AGE\":[15,16,17,33,45,66],\n\n              \"MAAS\": [100,150,240,350,110,220]}\n\ndataFrame1 = pd.DataFrame(dictionary)\n\ndataFrame1[dataFrame1.AGE > 60]","b536686e":"print(data.index.name)  # our index name\n# lets change it because it is so boring\ndata.index.name = \"FootballerName\"\ndata.head()","ad0f9bac":"data1 = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndata1 = data1.set_index(\"Unnamed: 0\")  # I did this because in the first part I got the index as the name, it's string. \n                                       # I couldn't postpone because of that and i repeat the process.\ndata1.head()","23f57bb4":"# Overwrite index\n# if we want to modify index we need to change all of them.\n# first copy of our data to data3 then change index \ndata2 = data1.copy()\n# lets make index start from 100. It is not remarkable change but it is just example\ndata2.index = range(100,18307,1)\ndata2.head()","74c30be9":"data = pd.read_csv('\/kaggle\/input\/fifa19\/data.csv')\ndata.head()\n# As you can see there is index. However we want to set one or more column to be index","4f3b1f36":"data1 = data.set_index([\"Nationality\",\"Age\"]) #Nationality is inner index\n                                               #Name is outer index\ndata1.head(100)\n#uses of idexes is\n#data1.loc[\"Portugal\",\"33\"]","b62e43b2":"dic = {\"sicknessType\":[\"A\",\"A\",\"B\",\"B\"],\"Sex\":[\"F\",\"M\",\"F\",\"M\"],\"remainingYear\":[1,3,7,10],\"age\":[55,62,32,25]}\ndf = pd.DataFrame(dic)\ndf","0988a0e1":"# pivoting\ndf.pivot(index=\"sicknessType\",columns = \"Sex\",values=\"remainingYear\")","8cae7c8d":"df1 = df.set_index([\"sicknessType\",\"Sex\"])\ndf1","74aff7fd":"df1.unstack(level=0) #unstacked sicknessType","28443d58":"df1.unstack(level=1)","8fccce43":"df2 = df1.swaplevel(0,1) #we can change our indexes' positions\ndf2","53354e57":"df","4b5b0fca":"df.pivot(index=\"sicknessType\",columns = \"Sex\",values=\"remainingYear\")\npd.melt(df,id_vars=\"sicknessType\",value_vars=[\"Sex\",\"remainingYear\"])","c8a2d96b":"df   #we are gonna use df again","a9d9a107":"# according to type of sickness take means of other features\ndf.groupby(\"sicknessType\").mean()   # mean is aggregation \/ reduction method\n# there are other methods like sum, std,max or min","77d48228":"# we can only choose one of the feature\ndf.groupby(\"sicknessType\").age.max()","eb032504":"# Or we can choose multiple features\ndf.groupby(\"sicknessType\")[[\"Sex\",\"remainingYear\"]].min()","7fcc95ca":"df.info()\n# as you can see gender is object\n# However if we use groupby, we can convert it categorical data. \n# Because categorical data uses less memory, speed up operations like groupby\n#df[\"Sex\"] = df[\"Sex\"].astype(\"category\")\n#df[\"sicknessType\"] = df[\"sicknessType\"].astype(\"category\")\n#df.info()","5c192ac1":"**HIERARCHICAL INDEXING**\n\nSetting indexing","dbf01020":"**INDEX OBJECTS AND LABELED DATA**\n\nindex: sequence of label","dc5f2de8":"**SLICING DATA FRAME**\n\n* Difference between selecting columns\n  * Series and data frames\n* Slicing and indexing series\n* Reverse slicing\n* From something to end","dd0b4178":"**STACKING and UNSTACKING DATAFRAME**\n* deal with multi label indexes\n* level: position of unstacked index\n* swaplevel: change inner and outer level index position","8a10df95":"**FILTERING DATA FRAMES**\n\n1. Creating boolean series \n2. Combining filters \n3. Filtering column based others","c01b9852":"**TRANSFORMING DATA**\n1. Plain python functions\n2. Lambda function: to apply arbitrary python function to every element\n3. Defining column using other columns","62d52c78":"**CATEGORICALS AND GROUPBY**","8226f8af":"**INDEXING DATA FRAMES**\n\n* Indexing using square brackets\n* Using column attribute and row label\n* Using loc accessor\n* Selecting only some columns","ac2e219f":"**PIVOTING DATA FRAMES**\n\n* Pivoting: reshape tool","2060526a":"**MELTING DATA FRAMES**\n* Reverse of pivoting"}}