{"cell_type":{"bafe3324":"code","779d624a":"code","7d5d97bf":"code","1bcac0da":"code","315aee8f":"code","701ed8f4":"code","6c4dafb0":"code","30fd7864":"code","5b92abea":"code","28e57473":"code","242c9d08":"code","1a9888ec":"code","46929bbb":"code","a3a5d689":"code","e800d9fa":"code","22e75a62":"code","b8517f83":"code","55d12ab4":"code","5a206c6c":"code","fb4b6f16":"code","9096fa8a":"code","a7515ceb":"markdown","3b71c81b":"markdown","8ec78d97":"markdown","0051ee6a":"markdown","4b29c600":"markdown","6f01e547":"markdown"},"source":{"bafe3324":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport re\nimport plotly\nimport plotly.express as px","779d624a":"path = \"https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/\"\ndata_covid_infections = pd.read_csv(path + \"time_series_covid19_confirmed_global.csv\")\ndata_covid_deaths = pd.read_csv(path + \"time_series_covid19_deaths_global.csv\")\ndata_covid_recovered = pd.read_csv(path + \"time_series_covid19_recovered_global.csv\")","7d5d97bf":"country_coord = data_covid_infections[[\"Country\/Region\", \"Lat\", \"Long\"]]\ncountry_coord = country_coord.groupby(country_coord[\"Country\/Region\"]).mean()","1bcac0da":"def CleanMe(df, col):\n    df = df.drop(columns = [\"Lat\", \"Long\", \"Province\/State\"])\n    df = df.groupby(df[\"Country\/Region\"]).sum()\n    df[\"Country_Region\"] = df.index\n    df = df.melt(id_vars = \"Country_Region\", var_name = \"Date\", value_name = col)\n    df['Date'] = df['Date'].astype('datetime64[ns]').astype(\"str\")\n    return df","315aee8f":"temp1 = CleanMe(data_covid_infections, \"infections\")\ntemp2 = CleanMe(data_covid_deaths, \"deaths\")\ntemp3 = CleanMe(data_covid_recovered, \"recovered\")","701ed8f4":"data_covid = pd.merge(temp1, temp2)\ndata_covid = pd.merge(data_covid, temp3)\ndata_covid","6c4dafb0":"# pop = pd.read_csv(\"..\/input\/2020-population\/population.csv\")\n# pop.index = pop[\"Country\"]\n# pop = pop.drop(columns = [\"Country\", \"Population\"])\n\n# convert = {\n#     'Myanmar': 'Burma',\n#     'Congo': 'Congo (Kinshasa)',\n#     \"C\u00f4te d'Ivoire\": \"Cote d'Ivoire\",\n#     'Czech Republic (Czechia)': 'Czechia',\n#     'South Korea': 'Korea, South',\n#     'Saint Kitts & Nevis': 'Saint Kitts and Nevis',\n#     'St. Vincent & Grenadines': 'Saint Vincent and the Grenadines',\n#     'Sao Tome & Principe': 'Sao Tome and Principe',\n#     'Taiwan': 'Taiwan*',\n#     'United States': 'US',\n# }\n\n# pop = pop.rename(index = convert)\n# pop.index.name = \"Country_Region\"\n\n# MyMap = dict(zip(pop.index, pop[\"pop_million\"]))\n\n# cols = [\"infections\", \"deaths\", \"recovered\"]\n# for col in cols:\n#     data_covid[col + \"_million\"] = data_covid[\"Country_Region\"]\n#     data_covid[col + \"_million\"] = data_covid[col + \"_million\"].map(MyMap)\n#     data_covid[col + \"_million\"] = np.array(data_covid[col + \"_million\"]) * np.array(data_covid[col])\n\n# data_covid = data_covid.drop(columns = cols)\n# data_covid = data_covid.rename(columns = {\n#     \"infections_million\": \"infections\",\n#     \"deaths_million\": \"deaths\",\n#     \"recovered_million\": \"recovered\"\n# }) ","30fd7864":"# data_covid","5b92abea":"def PlotDailyGlobalCases(data, case_type):\n    fig = px.line(\n        data, \n        x = \"Date\", \n        y = case_type, \n        color = \"Country_Region\",\n        title = \"Global trends in \" +  case_type\n    )\n    fig.update_traces(mode = \"markers+lines\")\n    fig.show()\n    \n    plotly.offline.plot(fig, filename = \"DailyGlobal_\" + case_type + \".html\", auto_open = False)","28e57473":"PlotDailyGlobalCases(data_covid, \"infections\")","242c9d08":"PlotDailyGlobalCases(data_covid, \"deaths\")","1a9888ec":"PlotDailyGlobalCases(data_covid, \"recovered\")","46929bbb":"def PlotTopGlobalCases(data, case_type):\n    data = data.sort_values(by = case_type, ascending = False)\n    data = data.iloc[:20, :]\n    \n    fig = px.bar(\n        data, \n        x = data.index, \n        y = case_type, \n        title = \"Highest \" + case_type\n    )\n    fig.show()\n    \n    plotly.offline.plot(fig, filename = \"TopGlobal_\" + case_type + \".html\", auto_open = False)","a3a5d689":"df = data_covid.loc[data_covid[\"Date\"] == \"2020-05-03\", [\"infections\", \"deaths\", \"recovered\", \"Country_Region\"]]\ndf.index = df[\"Country_Region\"]\ndf = df.drop(columns = [\"Country_Region\"])","e800d9fa":"PlotTopGlobalCases(df, \"infections\")","22e75a62":"PlotTopGlobalCases(df, \"deaths\")","b8517f83":"PlotTopGlobalCases(df, \"recovered\")","55d12ab4":"def MapGrowth(data, case_type):\n    country_and_code = pd.read_csv(\"..\/input\/country-codes\/country_and_code.csv\")\n    \n    df = data.sort_values([\"Date\", case_type])\n    df.index = range(df.shape[0])\n\n    MyMap = dict(zip(country_and_code[\"country\"], country_and_code[\"code\"]))\n    df[\"code\"] = df[\"Country_Region\"].map(MyMap)\n\n    rep = {\n        \"US\": \"USA\",\n        \"Iran\": \"IRN\",\n        \"United Kingdom\": \"GBR\",\n        \"Korea, South\": \"PRK\",\n        \"Russia\": \"RUS\",\n        \"Diamond Princess\": \"DMP\",    #\n        \"Congo (Kinshasa)\": \"COD\",\n        \"Moldova\": \"MDA\",\n        \"Bolivia\": \"BOL\",\n        \"Taiwan*\": \"TWN\",\n        \"Venezuela\": \"VEN\",\n        \"Congo (Brazzaville)\": \"COG\",\n        \"Kosovo\": \"RKS\",\n        \"Syria\": \"SYR\",\n        \"Cote d'Ivoire\": \"CIV\",\n        \"MS Zaandam\": \"MSZ\",           #\n        \"West Bank and Gaza\": \"WBG\",   #\n        \"Burma\": \"MMR\",\n        \"Brunei\": \"BRN\",\n        \"Tanzania\": \"TZA\",\n        \"Vietnam\": \"VNM\",\n        \"Laos\": \"LAO\"                  #\n    }\n\n    for i in range(df.shape[0]):\n        if pd.isnull(df.loc[i, \"code\"]):\n            country = df.loc[i, \"Country_Region\"]\n            code = rep[country]\n            df.loc[i, \"code\"] = code\n        \n    fig = px.scatter_geo(\n        df, \n        locations = \"code\", \n        color = \"Country_Region\",\n        hover_name = \"Country_Region\", \n        size = case_type,\n        animation_frame = \"Date\",\n        projection = \"natural earth\",\n        title = \"Growth of \" + case_type \n    )\n    fig.show()\n    \n    plotly.offline.plot(fig, filename = case_type + \".html\", auto_open = False)","5a206c6c":"MapGrowth(data_covid, \"infections\")","fb4b6f16":"MapGrowth(data_covid, \"deaths\")","9096fa8a":"MapGrowth(data_covid, \"recovered\")","a7515ceb":"Preliminary Cleaning","3b71c81b":"Plotting the daily growth of countries","8ec78d97":"Visualizing growth on a map","0051ee6a":"Coronavirus Up To Date Data","4b29c600":"Ploting countries with top cases","6f01e547":"Converting data to count per-million of country's population (See Map Visualizations later. They won't work)"}}