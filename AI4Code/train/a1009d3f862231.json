{"cell_type":{"b0b6f38a":"code","78a5e4d3":"code","277a6b75":"code","d442c986":"code","266f3bbb":"code","baaf0d4d":"code","f7ffdbe1":"code","0e42eabd":"code","963b2719":"code","d7caa28e":"code","56736f63":"code","2af3376b":"code","df642033":"code","e1de33f4":"code","bcbf5717":"code","5a25e36d":"code","09a4a2a6":"code","ed875154":"code","80a636a3":"code","9566940f":"code","ee42face":"code","03d3b290":"code","f87c6615":"code","bc08dba6":"code","45a70ba6":"code","92853a1f":"code","856aff01":"code","6fd221b2":"code","7290dfff":"code","7a1d93f7":"code","f75df993":"code","67489e13":"code","84d55102":"code","4ac25b7e":"markdown","ec8d97f7":"markdown","a74f98e5":"markdown","21b8557f":"markdown","596fe53f":"markdown","437a204a":"markdown","416ee3b8":"markdown","d4718f82":"markdown","7e5a94ca":"markdown","e09634d3":"markdown"},"source":{"b0b6f38a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","78a5e4d3":"import warnings\nwarnings.filterwarnings('ignore')","277a6b75":"!pip install pmdarima","d442c986":"df= pd.read_csv(\"..\/input\/bajajfinance\/BAJFINANCE.csv\")","266f3bbb":"df.head()","baaf0d4d":"df.shape","f7ffdbe1":"## Setting date col as index\n\ndf.set_index('Date', inplace=True)","0e42eabd":"df['VWAP'].plot()","963b2719":"df.isna().sum()","d7caa28e":"### dropping the missing values\n\ndf.dropna(inplace=True)","56736f63":"df.shape","2af3376b":"data=df.copy()","df642033":"data.dtypes","e1de33f4":"data.columns","bcbf5717":"lag_features =['High', 'Low','Volume', 'Turnover', 'Trades']\nwindow1 = 3\nwindow2 = 7","5a25e36d":"## calculating rolling mean\n\nfor feature in lag_features:\n    data[feature+\"rolling_mean_3\"]= data[feature].rolling(window = window1).mean()\n    data[feature+\"rolling_mean_7\"]= data[feature].rolling(window = window2).mean()","09a4a2a6":"## calculating rolling std. dev.\n\nfor feature in lag_features:\n    data[feature+\"rolling_sd_3\"]= data[feature].rolling(window = window1).std()\n    data[feature+\"rolling_sd_7\"]= data[feature].rolling(window = window2).std()","ed875154":"data.head()","80a636a3":"data.columns","9566940f":"## dropping null values\n\ndata.dropna(inplace=True)","ee42face":"ind_features = ['Highrolling_mean_3', 'Highrolling_mean_7',\n       'Lowrolling_mean_3', 'Lowrolling_mean_7', 'Volumerolling_mean_3',\n       'Volumerolling_mean_7', 'Turnoverrolling_mean_3',\n       'Turnoverrolling_mean_7', 'Tradesrolling_mean_3',\n       'Tradesrolling_mean_7', 'Highrolling_sd_3', 'Highrolling_sd_7',\n       'Lowrolling_sd_3', 'Lowrolling_sd_7', 'Volumerolling_sd_3',\n       'Volumerolling_sd_7', 'Turnoverrolling_sd_3', 'Turnoverrolling_sd_7',\n       'Tradesrolling_sd_3', 'Tradesrolling_sd_7']","03d3b290":"train_data = data[0:1800]\ntest_data = data[1800:]","f87c6615":"train_data.shape","bc08dba6":"test_data.shape","45a70ba6":"from pmdarima import auto_arima","92853a1f":"model = auto_arima(y=train_data['VWAP'], exogenous= train_data[ind_features], trace=True)","856aff01":"model.fit(train_data['VWAP'], train_data[ind_features])","6fd221b2":"prediction= model.predict(n_periods=len(test_data),exogenous= test_data[ind_features])","7290dfff":"### adding prediction results to df.\n\ntest_data['Pred_ARIMA']= prediction","7a1d93f7":"test_data[['VWAP','Pred_ARIMA']].plot(figsize=(14,6))","f75df993":"from sklearn.metrics import mean_absolute_error, mean_squared_error","67489e13":"## RMSE\nnp.sqrt(mean_squared_error(test_data['VWAP'], test_data['Pred_ARIMA']))","84d55102":"## MAE\nmean_absolute_error(test_data['VWAP'], test_data['Pred_ARIMA'])","4ac25b7e":"### Predictions on Test data","ec8d97f7":"### Choosing Features","a74f98e5":"#### Visulaizing the trend of Volume weighted avg price (VWAP)","21b8557f":"### Train-Test split","596fe53f":"### Creating a list of independent features","437a204a":"### Objective:\n#### Predicting the stock prices of Bajaj Finance using ARIMA model.","416ee3b8":"### Visualizing the predictions","d4718f82":"### Model Evaluation","7e5a94ca":"#### We can notice that there is seasonality in the data as mean and std. dev are not constant. Therefore, we'll perform some feature engineering","e09634d3":"### Checking the newly added features"}}