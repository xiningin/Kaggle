{"cell_type":{"be2b8cfe":"code","0afe1129":"code","a895a924":"code","88dab45c":"code","f0114ab7":"code","25c6370e":"code","7d8e5d53":"code","4899b5b0":"code","cb4a792d":"code","90d8eb1c":"code","7393d551":"code","42b28823":"code","30234b4b":"code","31b79ed3":"code","cfc69d91":"code","e38de053":"code","04b164a5":"code","1be0a503":"code","1ab93317":"code","16748c19":"code","ecd4df4c":"code","8f6a8bde":"code","d788f869":"code","7e2b98e1":"code","cddebd91":"code","98dd0065":"code","dc4d85ed":"code","70d4baf4":"code","c3a7109d":"code","c17e2f75":"code","f9d0084f":"code","de55c551":"code","be36a528":"code","c7f8abbc":"code","e8efafdf":"code","0d5f51ef":"code","67ced08f":"code","3ae11b1b":"code","0e1791a3":"code","8a238c9e":"code","06086091":"code","0a739be8":"markdown"},"source":{"be2b8cfe":"import numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nfrom pandas.plotting import scatter_matrix\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline","0afe1129":"df = pd.read_csv('..\/input\/top50spotify2019\/top50.csv', encoding='ISO-8859-1')\ndf.head()","a895a924":"df = df.drop(columns = ['Unnamed: 0'])","88dab45c":"df.head()","f0114ab7":"df.shape","25c6370e":"df.info()","7d8e5d53":"df.rename(columns={'Track.Name':'track_name','Artist.Name':'artist_name','Beats.Per.Minute':'beats_per_minute','Loudness..dB..':'Loudness(dB)','Valence.':'Valence','Length.':'Length', 'Acousticness..':'Acousticness','Speechiness.':'Speechiness'},inplace=True)\ndf.head()","4899b5b0":"df.isnull().sum()","cb4a792d":"df.fillna(0)","90d8eb1c":"print(df.dtypes)","7393d551":"# Calculating the number of songs of each genre\nprint(type(df['Genre']))\npopular_genre = df.groupby('Genre').size().unique\nprint(popular_genre)\ngenre_list = df['Genre'].values.tolist()","42b28823":"# calculating the number of songs by each of the artists\nprint(df.groupby('artist_name').size())\npopular_artist = df.groupby('artist_name').size()\nprint(popular_artist)\nartist_list = df['artist_name'].values.tolist()","30234b4b":"df.isnull().sum()\ndf.fillna(0)","31b79ed3":"pd.set_option('precision', 3)\ndf.describe()","cfc69d91":"pd.set_option('display.width', 100)\npd.set_option('precision',3)\ncorr = df.corr(method='spearman')\nprint(corr)","e38de053":"xtick = ['dance pop', 'pop', 'latin', 'edm', 'canadian hip hop',\n'panamanian pop', 'electropop', 'reggaeton flow', 'canadian pop',\n'reggaeton', 'dfw rap', 'brostep', 'country rap', 'escape room',\n'trap music', 'big room', 'boy band', 'pop house', 'australian pop',\n'r&b en espanol', 'atl hip hop']\nlength = np.arange(len(xtick))\ngenre_groupby = df.groupby('Genre')['track_name'].agg(len)\nplt.figure(figsize=(15,7))\nplt.bar(length, genre_groupby)\nplt.xticks(length, xtick)\nplt.xticks(rotation=90)\nplt.ylabel('Genre', fontsize=20)\nplt.ylabel('Count of the tracks', fontsize=25)","04b164a5":"#heatmop of correlation\nplt.figure(figsize=(10,10))\nplt.title('Correlation heatmap')\nsns.heatmap(corr, annot=True, vmin=-1, vmax=1, cmap='GnBu_r', center=1)","1be0a503":"# No of songs sung by an artist\nfig = plt.figure(figsize=(10,7))\ndf.groupby('artist_name')['track_name'].agg(len).sort_values(ascending=False).plot(kind='bar')\nplt.xlabel('Artist Name', fontsize=20)\nplt.ylabel('Count of songs',fontsize=20)\nplt.title('Artist Name vs Count of songs', fontsize=30)","1ab93317":"#Analusing the relationship between energy and loudness\nfig = plt.subplots(figsize=(10,10))\nsns.regplot(x='Energy', y='Loudness(dB)', data=df, color='black')","16748c19":"#Pie Chart\nlabels = df.artist_name.value_counts().index\nsizes =  df.artist_name.value_counts().values\ncolors = ['red', 'yellowgreen', 'lightcoral', 'lightskyblue','cyan', 'green', 'black','yellow']\nplt.figure(figsize=(10,10))\nplt.pie(sizes, labels=labels, colors=colors)\nautopct = ('%1.1f%')\nplt.axis('equal')\nplt.show()","ecd4df4c":"from sklearn.model_selection import train_test_split, cross_val_score,KFold\nfrom sklearn.preprocessing import MinMaxScaler, LabelEncoder","8f6a8bde":"#Linear regression, first create test and train dataset\nX=df.loc[:,['Energy','Danceability','Length','Loudness(dB)','Acousticness']].values\ny=df.loc[:,'Popularity'].values","d788f869":"print(X)","7e2b98e1":"print(y)","cddebd91":"X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.30)","98dd0065":"print(X.shape, X_train.shape, X_test.shape)","dc4d85ed":"from sklearn.linear_model import LinearRegression\nregressor = LinearRegression()\nregressor.fit(X_train, y_train)\nprint(regressor.intercept_)\nprint(regressor.coef_)","70d4baf4":"#Actual vs Predicted\ny_pred = regressor.predict(X_test)\ndf_op = pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})\nprint(df_op)","c3a7109d":"from sklearn.metrics import confusion_matrix, classification_report, mean_squared_error","c17e2f75":"MSE = mean_squared_error(y_test, y_pred)\nprint('Mean Squared Error:', MSE.round(2))","f9d0084f":"plt.figure(figsize=(10,10))\nplt.plot(y_pred, y_test, color='black', linestyle='dashed', marker='*', markerfacecolor='red', markersize=10)\nplt.title('Error Analysis')\nplt.xlabel('Predicted Values')\nplt.ylabel('Test Values')","de55c551":"# Cross validation score\nX=df.loc[:,['Energy','Danceability']].values\ny=df.loc[:,'Popularity'].values\nregressor=LinearRegression()\nmse=cross_val_score(regressor,X_train,y_train,scoring='neg_mean_squared_error',cv=5)\nmse_mean=np.mean(mse)\nprint(mse_mean)\ndiff=MSE-abs(mse_mean)\nprint(diff)","be36a528":"# Lets check Popularity","c7f8abbc":"X = df.loc[:, ['Energy', 'Length', 'Danceability', 'beats_per_minute', 'Acousticness']].values\ny = df.loc[:, 'Popularity'].values","e8efafdf":"X","0d5f51ef":"y","67ced08f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=1)\nprint(X.shape, X_train.shape, X_test.shape)","3ae11b1b":"from sklearn.naive_bayes import GaussianNB\ngnb = GaussianNB()\ngnb.fit(X_train, y_train)\ny_pred = gnb.predict(X_test)\ndf_op = pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})\nprint(df_op)","0e1791a3":"scores = cross_val_score(gnb,X_train, y_train, scoring='accuracy', cv=3).mean()*100\nprint(scores)","8a238c9e":"LinSVC = LinearSVC(penalty='l2', loss='squared_hinge', dual=True)\nLinSVC.fit(X_train, y_train)\ny_pred=gnb.predict(X_test)\ndf_output = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\nprint(df_output)","06086091":"sns.jointplot(x=y_test, y=y_pred, kind='reg', color='b')","0a739be8":"# Train Test Split"}}