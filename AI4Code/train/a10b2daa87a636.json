{"cell_type":{"b333b26a":"code","7b54ceda":"code","9d73b0f6":"code","e479577c":"code","282901e5":"code","2272fbf1":"code","ef403ff4":"code","45d785cd":"code","b5d0c2a1":"code","2f9f3ef8":"code","6a1e183d":"code","00b9e1b8":"code","95324fc8":"code","e25ad66e":"code","05e33c55":"code","0c35ed31":"code","64a26c52":"code","fe77aa9f":"code","911a643c":"code","e1b335f7":"code","db7691d6":"code","4f6c241f":"code","6e50c128":"code","2dfc11e3":"code","6376e020":"code","3ef6230d":"code","b02740b6":"code","8b2b0c17":"code","1e7b63c3":"code","d7fb11d5":"code","7ea97b63":"code","8da549d6":"code","ee6c5aee":"code","38943ae5":"code","82af0477":"code","13ab1ce6":"code","af68d160":"code","112e527e":"code","36287c4c":"code","c53ebc1d":"code","b60ad929":"code","1cc1d6c0":"code","d62e4bce":"code","732e1402":"code","928821e5":"code","bac72995":"code","32f382ba":"code","4d59ed58":"code","4d5818d6":"code","7372c02f":"code","9c245c6b":"code","201015b7":"code","84f50634":"code","0cccbed7":"code","46e6b4ec":"code","d701b543":"code","0e9e23a2":"code","08072a66":"code","9c494e60":"code","f37a9fdc":"code","de7da701":"code","f49823e2":"code","ee4de3a3":"code","c0800e45":"code","754aac3e":"code","3c1371b6":"code","3737244f":"code","ebaf506a":"code","91b7d2e4":"code","22aeefc6":"code","d97b3f21":"code","f750aa4e":"code","4139608d":"code","d36244e3":"code","7843f66f":"code","0f851ed2":"code","54d05271":"code","c2b987f9":"code","47bcd64a":"code","af269a86":"code","9d5f2c03":"code","9607bb39":"code","4ca4ab3b":"code","cb57d365":"code","1e1626d0":"code","7e01816d":"code","1c4f1c00":"code","180ecc50":"code","82826a8a":"code","e7cb4b4c":"code","5258cedd":"code","9bb2847c":"code","616e530f":"code","302b096b":"code","3cadc5ff":"code","835960a7":"code","dca06a77":"code","50693aa8":"code","f46c62ac":"code","695a564f":"code","b487b120":"code","6c13e5ad":"code","806d077e":"code","75cb77b8":"code","006965d5":"code","740f1151":"code","77669802":"code","91628935":"code","d547a264":"code","401514cb":"code","3e01b5cb":"code","cd239bf3":"code","4eb3b3a1":"code","18eb3df7":"code","3cdd0367":"code","e795df9f":"code","f2a73346":"code","ce2fdc83":"code","08b48dcc":"code","d261f4da":"markdown","04fdc735":"markdown","e7b99b19":"markdown","caa0e56a":"markdown","8a632648":"markdown","6bc3ea26":"markdown","20998072":"markdown","51f1c872":"markdown","c6220333":"markdown","37fc2125":"markdown","2be06900":"markdown","0eedb8bc":"markdown","8b4c7eaf":"markdown","807536f4":"markdown","c68ddd38":"markdown","2cb6df80":"markdown","6697b506":"markdown","36370a98":"markdown","e7370703":"markdown","21d02899":"markdown","6a076205":"markdown","e3294373":"markdown","a83d6f0c":"markdown","37d4991e":"markdown","70e3abc1":"markdown","cf8cde56":"markdown","d4a9bb46":"markdown","edead8cc":"markdown","df05dd1d":"markdown","e6bd5907":"markdown","cae1a8dd":"markdown","7850120d":"markdown","156802ae":"markdown","a806f925":"markdown","278e1cf0":"markdown","b52a877b":"markdown","2f49ce12":"markdown","48fbc8da":"markdown","b0e34114":"markdown","c3934898":"markdown","aef06e84":"markdown","e1758dea":"markdown","fb4f23ea":"markdown","793ca375":"markdown","3eadf5e6":"markdown","85fc9623":"markdown","31ac0cfb":"markdown","a4e8e3ed":"markdown","e9bdd6b9":"markdown","2c1fefca":"markdown","5f35fc72":"markdown","d2dbf93a":"markdown","3953816e":"markdown","3ff71c37":"markdown","5bf206a2":"markdown","cf14212c":"markdown","9668308a":"markdown","3e3308c0":"markdown","fd6e03f5":"markdown","a45cc5af":"markdown","3119f76f":"markdown","a965908d":"markdown","fe7b01d0":"markdown","f1f304f7":"markdown","5ade6cbf":"markdown","8b00e974":"markdown","369de097":"markdown"},"source":{"b333b26a":"import pandas as pd\n# using titanic dataset\ntrain = pd.read_csv('..\/input\/titanic\/train.csv')","7b54ceda":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport plotly.express as px\n\n","9d73b0f6":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","e479577c":"bar_chart('Survived')","282901e5":"def Horizontal_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='barh',stacked=True, figsize=(10,5))","2272fbf1":"Horizontal_chart('Survived')","ef403ff4":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=True, figsize=(10,5))","45d785cd":"bar_chart('Sex')","b5d0c2a1":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived,dead])\n    df.index = ['Survived','Dead']\n    df.plot(kind='bar',stacked=False, figsize=(10,5))","2f9f3ef8":"bar_chart('Sex')","6a1e183d":"import seaborn as sns\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x=\"Sex\", data=train)","00b9e1b8":"train[\"Age\"].isnull()","95324fc8":"train['Age']=train['Age'].fillna(train['Age'].mean())","e25ad66e":"train[\"Age\"].min()","05e33c55":"train[\"Age\"].max()","0c35ed31":"fig = plt.figure(figsize = (10,10))\ndata = train[\"Age\"]\nplt.hist(data, range=(0.42,80), bins=10, color='r', edgecolor='black')\nplt.show()","64a26c52":"fig = plt.figure(figsize = (15,15))\nax = fig.gca()\ntrain.hist(ax=ax, color='r', edgecolor='black')\nplt.show()","fe77aa9f":"import matplotlib.pyplot as plt\nimport numpy as np\n \n# create data\nx = train['Fare']\ny = data\n \n# Big bins\nplt.hist2d(x, y, bins=(1,80), cmap=plt.cm.jet)\n#plt.show()\n \nplt.show()\n\n","911a643c":"plt.hist2d(x, y, bins=(1, 80), cmap=plt.cm.Reds)\nplt.show()","e1b335f7":"fig = plt.figure(figsize=(16, 10), dpi= 80)\ngrid = plt.GridSpec(4, 4, hspace=0.5, wspace=0.2)\n\n\nax_main = fig.add_subplot(grid[:-1, :-1])\nax_right = fig.add_subplot(grid[:-1, -1], xticklabels=[], yticklabels=[])\nax_bottom = fig.add_subplot(grid[-1, 0:-1], xticklabels=[], yticklabels=[])\n\nax_main.scatter('Age', 'Fare', alpha=.9, data=train, cmap=\"tab10\", edgecolors='gray', linewidths=.5)\n\n\nax_bottom.hist(train.Age, 40, histtype='stepfilled', orientation='vertical', color='deeppink')\nax_bottom.invert_yaxis()\n\n\nax_right.hist(train.Fare, 40, histtype='stepfilled', orientation='horizontal', color='deeppink')\n\n\nax_main.set(title='Scatterplot with Histograms Age to Fare visualization', xlabel='Age', ylabel='Fare')\nax_main.title.set_fontsize(20)\nfor item in ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):\n    item.set_fontsize(14)\n\nxlabels = ax_main.get_xticks().tolist()\nax_main.set_xticklabels(xlabels)\nplt.show()\n ","db7691d6":"data.head","4f6c241f":"fig = plt.figure(figsize=(16, 10), dpi= 80)\ngrid = plt.GridSpec(4, 4, hspace=0.5, wspace=0.2)\n\n# Define the axes\nax_main = fig.add_subplot(grid[:-1, :-1])\nax_right = fig.add_subplot(grid[:-1, -1], xticklabels=[], yticklabels=[])\nax_bottom = fig.add_subplot(grid[-1, 0:-1], xticklabels=[], yticklabels=[])\n\n# Scatterplot on main ax\nax_main.scatter('Age', 'Fare', alpha=.9, data=train, cmap=\"Set1\", edgecolors='purple', linewidths=.5)\n\n# Add a graph in each part\nsns.boxplot(train.Fare, ax=ax_right, orient=\"v\",color='deeppink' )\nsns.boxplot(train.Age, ax=ax_bottom, orient=\"h\", color='deeppink')\n\n# Decorations ------------------\n# Remove x axis name for the boxplot\nax_bottom.set(xlabel='')\nax_right.set(ylabel='')\n\n# Main Title, Xlabel and YLabel\nax_main.set(title='Scatterplot with Boxplot Age to Fare visualization', xlabel='Age', ylabel='Fare')\n\n# Set font size of different components\nax_main.title.set_fontsize(20)\nfor item in ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):\n    item.set_fontsize(14)\n\nplt.show()","6e50c128":"plt.figure(figsize=(20,10), dpi= 216)\nsns.heatmap(train.corr(), xticklabels=train.corr().columns, yticklabels=train.corr().columns, cmap='RdYlGn', center=0, annot=True)\n\n# Decorations\nplt.title('Correlogram of Titanic Dataset', fontsize=22)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","2dfc11e3":"sns.set(style=\"darkgrid\")\ng = sns.FacetGrid(train, row=\"Sex\", col=\"Survived\", margin_titles=True, size=10)\nbins = np.linspace(0, 60, 13)\ng.map(plt.hist, \"Fare\", color=\"blueviolet\", bins=bins)","6376e020":"train","3ef6230d":"df = pd.read_csv(\"..\/input\/who-data-base-for-public-use\/2020-Full database.csv\")['Journal']\nfrom wordcloud import WordCloud, ImageColorGenerator\n","b02740b6":"word = ','.join(map(str, df))\nfrom wordcloud import WordCloud , STOPWORDS\nstopwords = set(STOPWORDS)\nwordcloud = WordCloud(background_color = \"Black\", max_words = 200, stopwords = stopwords).generate(word)\nplt.figure(1,figsize=(20, 20))\nplt.axis('off')\nplt.imshow(wordcloud, interpolation = 'bilinear')\nplt.show()","8b2b0c17":"sns.set(style=\"whitegrid\")\nax = sns.violinplot(x=train[\"Age\"])","1e7b63c3":"fig = plt.figure(figsize=(16, 10), dpi= 80)\ngrid = plt.GridSpec(4, 4, hspace=0.5, wspace=0.2)\n\n# Define the axes\nax_main = fig.add_subplot(grid[:-1, :-1])\nax_right = fig.add_subplot(grid[:-1, -1], xticklabels=[], yticklabels=[])\nax_bottom = fig.add_subplot(grid[-1, 0:-1], xticklabels=[], yticklabels=[])\n\n# Scatterplot on main ax\nax_main.scatter('Age', 'Fare', alpha=.9, data=train, cmap=\"Set1\", edgecolors='purple', linewidths=.5)\n\n# Add a graph in each part\n\nsns.violinplot(train.Fare,ax=ax_right, orient=\"v\",color='deeppink')\nsns.violinplot(train.Age,ax=ax_bottom, orient=\"h\",color='deeppink')\n# Decorations ------------------\n# Remove x axis name for the boxplot\nax_bottom.set(xlabel='')\nax_right.set(ylabel='')\n\n# Main Title, Xlabel and YLabel\nax_main.set(title='Scatterplot with Boxplot Age to Fare visualization', xlabel='Age', ylabel='Fare')\n\n# Set font size of different components\nax_main.title.set_fontsize(20)\nfor item in ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):\n    item.set_fontsize(14)\n\nplt.show()","d7fb11d5":"\nsns.set(style=\"whitegrid\")\nax = sns.violinplot(x=train.Pclass, y=train.Sex, data=train, palette='Paired')","7ea97b63":"\nsns.set(style=\"whitegrid\")\nax = sns.violinplot(x=train.Pclass, y=train.Age, data=train, palette=\"bright\")","8da549d6":"\nplt.figure(figsize=(15,10))\nax = sns.violinplot(x=train.Pclass, y=train.Age, hue=train.Sex,split = True,\n                    data=train, palette=\"Set1\")","ee6c5aee":"plt.figure(figsize=(15,10))\nax = sns.swarmplot(x=\"Sex\", y=\"Age\", data=train, palette=\"bright\")\nax = sns.violinplot(x=\"Sex\", y=\"Age\", data=train, palette=\"Set1\")","38943ae5":"sns.set(style=\"ticks\")\ntips = sns.load_dataset(\"tips\")\ng = sns.relplot(x=\"total_bill\", y=\"tip\", hue=\"day\", data=tips)","82af0477":"fig = plt.figure(figsize=(10, 7), dpi= 80)\nsns.distplot(train['Age'], bins=10, kde=True, color = 'red')","13ab1ce6":"df = train['Pclass'].value_counts()\n \n# make the plot\ndf.plot(kind='pie', subplots=True, figsize=(8, 8))\n","af68d160":"df = train['Pclass'].value_counts()\ndf","112e527e":"names='1', '2', '3',\nsize=[216,184,491]\n \n# create a figure and set different background\nfig = plt.figure(figsize=(16, 10), dpi= 80)\nfig.patch.set_facecolor('black')\n \n# Change color of text\nplt.rcParams['text.color'] = 'white'\n \n# Create a circle for the center of the plot\nmy_circle=plt.Circle( (0,0), 0.7, color='black')\n \n# Pieplot + circle on it\nplt.pie(size, labels=df)\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()\n","36287c4c":"\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef sunburst(nodes, total=np.pi * 2, offset=0, level=0, ax=None):\n    fig = plt.figure(figsize=(16, 10), dpi= 80)\n    ax = ax or plt.subplot(111, projection='polar')\n\n    if level == 0 and len(nodes) == 1:\n        label, value, subnodes = nodes[0]\n        ax.bar([0], [0.5], [np.pi * 2])\n        ax.text(0, 0, label, ha='center', va='center')\n        sunburst(subnodes, total=value, level=level + 1, ax=ax)\n    elif nodes:\n        d = np.pi * 2 \/ total\n        labels = []\n        widths = []\n        local_offset = offset\n        for label, value, subnodes in nodes:\n            labels.append(label)\n            widths.append(value * d)\n            sunburst(subnodes, total=total, offset=local_offset,\n                     level=level + 1, ax=ax)\n            local_offset += value\n        values = np.cumsum([offset * d] + widths[:-1])\n        heights = [1] * len(nodes)\n        bottoms = np.zeros(len(nodes)) + level - 0.5\n        rects = ax.bar(values, heights, widths, bottoms, linewidth=1,\n                       edgecolor='white', align='edge')\n        for rect, label in zip(rects, labels):\n            x = rect.get_x() + rect.get_width() \/ 2\n            y = rect.get_y() + rect.get_height() \/ 2\n            rotation = (90 + (360 - np.degrees(x) % 180)) % 360\n            ax.text(x, y, label, rotation=rotation, ha='center', va='center') \n\n    if level == 0:\n        ax.set_theta_direction(-1)\n        ax.set_theta_zero_location('N')\n        ax.set_axis_off()\n","c53ebc1d":"data = [\n    ('\/', 100, [\n        ('Survived', 68, [\n            ('Female', 46, []),\n            ('Male', 22, []),\n            \n        ]),\n        ('Dead', 32, [\n                ('Female',15 , []),\n                ('male', 17, []),\n            \n                \n\n        ]),\n          \n        ]),\n]\n\nsunburst(data)","b60ad929":"df = train['Sex'].value_counts()\ndf","1cc1d6c0":"survived = train[train['Survived']==0]['Sex'].value_counts()\nsurvived","d62e4bce":"import plotly.express as px\nfig = px.sunburst(train, path=[\"Pclass\",'Survived'],\n                  color='Pclass', hover_data=['Survived'],\n                  color_continuous_scale='rainbow')\nfig.show()","732e1402":"fig = plt.figure(figsize=(10, 7), dpi= 80)\nplt.scatter(train.Age,train.Fare,color='red',edgecolors='purple')\n","928821e5":"fig = plt.figure(figsize=(10, 7), dpi= 80)\nx = train.Age\ny = train.Fare\nm, b = np.polyfit(x, y, 1)\nplt.scatter(train.Age,train.Fare,color='white',edgecolors='orange')\nplt.plot(x, m*x + b,color='red' )","bac72995":"fig = plt.figure(figsize=(11, 8), dpi= 80)\n!pip install python-ternary\nimport ternary\n\nfig, tax = ternary.figure(scale=200)\nfig.set_size_inches(10, 7)\n\ntax.scatter(train[['Fare', 'Age', 'Pclass']].values,color='deeppink',edgecolors='purple')\ntax.gridlines(multiple=20)\ntax.get_axes().axis('off')\n","32f382ba":"fig = plt.figure(figsize=(11, 8), dpi= 80)\nimport ternary\n\nfig, tax = ternary.figure(scale=200)\nfig.set_size_inches(10, 7)\n\ntax.scatter(train[['Fare', 'PassengerId', 'Pclass']].values,color='green',edgecolors='green')\ntax.gridlines(multiple=20)\ntax.get_axes().axis('off')","4d59ed58":"grd = train.groupby([\"Survived\"])[[\"Pclass\",\"Fare\",\"Age\"]].mean().reset_index()\nf, ax = plt.subplots(figsize=(100, 30))\n\nplt.plot(grd.Survived,grd.Pclass,color=\"blue\")\nplt.plot(grd.Survived,grd.Fare,color=\"black\")\nplt.plot(grd.Survived,grd.Age,color=\"red\")\nplt.xticks(fontsize=50)\nplt.yticks(fontsize=50)","4d5818d6":"train","7372c02f":"plt.figure(figsize=(14,8))\nsns.set_style(\"darkgrid\")\nsns.kdeplot(train['Age'],label=\"Age\" ,shade=True, color='gold')","9c245c6b":"plt.figure(figsize=(23,12), dpi= 216)\nx = train.Age[:]\ny = x+train.Fare[:]\nz = x+train.Survived[:]\nz=z*z\n \n# Change color with c and alpha. I map the color to the X axis value.\nplt.scatter(x, y, z, c=x, cmap=\"plasma\", alpha=0.4, edgecolors=\"grey\", linewidth=2)\n \n# Add titles (main and on axis)\nplt.xlabel(\"Age\")\nplt.ylabel(\"Fare\")\nplt.title(\"A colored bubble plot\")\n \nplt.show()\n","201015b7":"plt.figure(figsize=(23,12))\nx = train.Age[:100]\ny = x+train.Fare[:100]\nz = x+train.Pclass[:100]\nz=z*z\n \n# Change color with c and alpha. I map the color to the X axis value.\nplt.scatter(x, y, z, c=x, cmap=\"plasma\", alpha=0.4, edgecolors=\"grey\", linewidth=2)\n \n# Add titles (main and on axis)\nplt.xlabel(\"the X axis\")\nplt.ylabel(\"the Y axis\")\nplt.title(\"A colored bubble plot\")\n \nplt.show()\n","84f50634":"plt.figure(figsize=(20,10), dpi= 216)\nsns.boxplot(x= train[\"Age\"] , y= train[\"Sex\"], palette=\"Set1\")","0cccbed7":"plt.figure(figsize=(23,12), dpi= 216)\nsns.boxplot(x= train[\"Age\"] , y= train[\"Sex\"], hue=train[\"Pclass\"], data=train, palette=\"Set1\")","46e6b4ec":"plt.figure(figsize=(20,10), dpi= 216)\nsns.boxplot(x= train[\"Age\"] , y= train[\"Sex\"], palette=\"Set1\", notch=True)","d701b543":"plt.figure(figsize=(20,10), dpi= 216)\nax = sns.boxplot(x= train[\"Age\"] , y= train[\"Sex\"], data=train)\nax = sns.swarmplot(x= train[\"Age\"] , y= train[\"Sex\"], data=train, color=\"yellow\")","0e9e23a2":"plt.figure(figsize=(20,10), dpi= 216)\nax = sns.swarmplot(x= train[\"Sex\"] , y= train[\"Age\"], data=train, color=\"red\")","08072a66":"plt.figure(figsize=(20,10), dpi= 216)\nax = sns.boxenplot(x= train[\"Sex\"] , y= train[\"Age\"], hue=train[\"Pclass\"],\n                 data=train, palette=\"plasma\")","9c494e60":"plt.figure(figsize=(15,11))\nsns.set_style(\"darkgrid\")\nsns.jointplot(x= train[\"Fare\"] , y= train[\"Age\"], kind='scatter', color=\"red\", size=10)\n\nplt.figure(figsize=(15,11))\nsns.set_style(\"darkgrid\")\nsns.jointplot(x= train[\"Fare\"] , y= train[\"Age\"], kind='resid', color=\"blue\",size=10 )\n\nplt.figure(figsize=(15,11))\nsns.set_style(\"darkgrid\")\nsns.jointplot(x= train[\"Fare\"] , y= train[\"Age\"], kind='hex', color=\"green\", size=10)\n\nplt.figure(figsize=(15,11))\nsns.set_style(\"darkgrid\")\nsns.jointplot(x= train[\"Fare\"] , y= train[\"Age\"], kind='kde', color=\"deeppink\", size=10)","f37a9fdc":"train","de7da701":"import plotly.express as px\n\n","f49823e2":"funnel = train.sort_values(by=['Fare'],ascending=False)\n\nfig = px.funnel(funnel, x='Fare', y='Embarked')\n\nfig.show()","ee4de3a3":"sns.clustermap(train.corr(), center=0, cmap=\"plasma\",\n               linewidths=.75, figsize=(18, 14))","c0800e45":"sns.pairplot(train)","754aac3e":"plt.figure(figsize=(15,11))\nStrip = sns.stripplot(x=\"Sex\", y=\"Age\", data=train)","3c1371b6":"Cat = sns.catplot(x=\"Sex\", y=\"Age\", data=train, size=10)","3737244f":"plt.figure(figsize=(15,11))\nsns.residplot(train.Fare, train.Age, lowess=True, color=\"red\")","ebaf506a":"\nsns.lmplot(x = 'Fare' ,y= 'Age', data=train, size=10)","91b7d2e4":"# using new placement data set to represent an AREA PLOT, Also going to use the Titanic Data Set Blow it\nPlace = pd.read_csv('..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')","22aeefc6":"Place.plot.area(y=['ssc_p','hsc_p','degree_p','mba_p'],alpha=0.4,figsize=(18, 12), cmap = 'plasma')","d97b3f21":"train.plot.area(y=['Fare','Age','Pclass','PassengerId'],alpha=0.4,figsize=(18, 12), cmap = 'plasma');","f750aa4e":"train","4139608d":"from yellowbrick.features import ParallelCoordinates\nfrom yellowbrick.datasets import load_occupancy\n\n# Load the classification data set\nX, y = load_occupancy()\n\n# Specify the features of interest and the classes of the target\nfeatures = [\n    \"temperature\", \"relative humidity\", \"light\", \"CO2\", \"humidity\"\n]\nclasses = [\"unoccupied\", \"occupied\"]\n\n# Instantiate the visualizer\nvisualizer = ParallelCoordinates(\n    classes=classes, features=features, sample=0.05, shuffle=True\n)\n\n# Fit and transform the data to the visualizer\nvisualizer.fit_transform(X, y)\n\n# Finalize the title and axes then display the visualization\nvisualizer.show()","d36244e3":"Place","7843f66f":"import matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2\n \n# First way to call the 2 group Venn diagram:\nplt.figure(figsize=(25,21))\nvenn2(Place['ssc_p'], set_labels = ('Group A', 'Group B'))\nplt.show()","0f851ed2":"import matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2, venn3, venn3_circles\n\nplt.figure(figsize=(25,21))\nvenn3(Place['ssc_p'])\nplt.show()","54d05271":"# Import the library\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn3\n \n# Custom text labels: change the label of group A\nplt.figure(figsize=(25,21))\nv=venn3(subsets = (10, 8, 22, 6,9,4,2), set_labels = ('Group A', 'Group B', 'Group C'))\nv.get_label_by_id('A').set_text('My Favourite group!')\nplt.show()\n \n# Line style: can be 'dashed' or 'dotted' for example\nplt.figure(figsize=(25,21))\nv=venn3(subsets = (10, 8, 22, 6,9,4,2), set_labels = ('Group A', 'Group B', 'Group C'))\nc=venn3_circles(subsets = (10, 8, 22, 6,9,4,2), linestyle='dashed', linewidth=1, color=\"grey\")\nplt.show()\n \n# Change one group only\nplt.figure(figsize=(25,21))\nv=venn3(subsets = (10, 8, 22, 6,9,4,2), set_labels = ('Group A', 'Group B', 'Group C'))\nc=venn3_circles(subsets = (10, 8, 22, 6,9,4,2), linestyle='dashed', linewidth=1, color=\"grey\")\nc[0].set_lw(8.0)\nc[0].set_ls('dotted')\nc[0].set_color('skyblue')\nplt.show()\n \n# Color\nv.get_patch_by_id('100').set_alpha(1.0)\nv.get_patch_by_id('100').set_color('white')\nplt.show()\n","c2b987f9":"Place","47bcd64a":"Place = pd.read_csv('..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\nPlace.degree_t.value_counts()","af269a86":"Place.degree_t.value_counts()","9d5f2c03":"import warnings\nwarnings.filterwarnings(\"ignore\")\nsns.FacetGrid(Place, hue=\"hsc_p\", size=10) \\\n   .map(sns.kdeplot, \"salary\") \\\n   .add_legend()\nplt.ioff() ","9607bb39":"Place","4ca4ab3b":"k = Place.drop([\"ssc_b\",\"gender\",'hsc_b', 'hsc_s', 'workex', 'specialisation', 'status','degree_t'], axis=1)","cb57d365":"k['salary']=k['salary'].fillna(k['salary'].mean())","1e1626d0":"k","7e01816d":"from pandas.plotting import andrews_curves\nandrews_curves(k,\"salary\")","1c4f1c00":"sns.factorplot('Pclass','Age',data=train,size=10 )\nplt.ioff()\nplt.show()","180ecc50":"!pip install windrose\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom windrose import WindroseAxes\nfrom matplotlib import pyplot as plt\nimport matplotlib.cm as cm\nimport numpy as np\n\n# Create wind speed and direction variables\n\nws = np.random.random(500) * 6\nwd = np.random.random(500) * 360","82826a8a":"ax = WindroseAxes.from_ax()\nax.bar(wd, ws, normed=True, opening=0.8, edgecolor='white')\nax.set_legend()","e7cb4b4c":"windgraph = px.data.wind()\nfig = px.bar_polar(windgraph, r=\"frequency\", theta=\"direction\",\n                   color=\"strength\")\nfig.show()","5258cedd":"plt.figure(figsize=(14,12))\nfrom math import pi\ndf = pd.DataFrame({\n'group': ['A','B','C','D'],\n'var1': [38, 1.5, 30, 4],\n'var2': [29, 10, 9, 34],\n'var3': [8, 39, 23, 24],\n'var4': [7, 31, 33, 14],\n'var5': [28, 15, 32, 14]\n})\n \n# number of variable\ncategories=list(df)[1:]\nN = len(categories)\n \n# We are going to plot the first line of the data frame.\n# But we need to repeat the first value to close the circular graph:\nvalues=df.loc[0].drop('group').values.flatten().tolist()\nvalues += values[:1]\nvalues\n \n# What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\nangles = [n \/ float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n \n# Initialise the spider plot\nax = plt.subplot(111, polar=True)\n \n# Draw one axe per variable + add labels labels yet\nplt.xticks(angles[:-1], categories, color='grey', size=8)\n \n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([10,20,30], [\"10\",\"20\",\"30\"], color=\"grey\", size=7)\nplt.ylim(0,40)\n \n# Plot data\nax.plot(angles, values, linewidth=1, linestyle='solid')\n \n# Fill area\nax.fill(angles, values, 'b', alpha=0.1)\n","9bb2847c":"import plotly.express as px\nwind = px.data.wind()\nfig = px.line_polar(wind, r=\"frequency\", theta=\"direction\",\n                   color=\"strength\")\nfig.show()","616e530f":"plt.figure(figsize=(14,12))\ndf = pd.DataFrame({\n'group': ['A','B','C','D'],\n'var1': [38, 1.5, 30, 4],\n'var2': [29, 10, 9, 34],\n'var3': [8, 39, 23, 24],\n'var4': [7, 31, 33, 14],\n'var5': [28, 15, 32, 14]\n})\n \n \n \n# ------- PART 1: Create background\n \n# number of variable\ncategories=list(df)[1:]\nN = len(categories)\n \n# What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\nangles = [n \/ float(N) * 2 * pi for n in range(N)]\nangles += angles[:1]\n \n# Initialise the spider plot\nax = plt.subplot(111, polar=True)\n \n# If you want the first axis to be on top:\nax.set_theta_offset(pi \/ 2)\nax.set_theta_direction(-1)\n \n# Draw one axe per variable + add labels labels yet\nplt.xticks(angles[:-1], categories)\n \n# Draw ylabels\nax.set_rlabel_position(0)\nplt.yticks([10,20,30], [\"10\",\"20\",\"30\"], color=\"grey\", size=7)\nplt.ylim(0,40)\n \n \n# ------- PART 2: Add plots\n \n# Plot each individual = each line of the data\n# I don't do a loop, because plotting more than 3 groups makes the chart unreadable\n \n# Ind1\nvalues=df.loc[0].drop('group').values.flatten().tolist()\nvalues += values[:1]\nax.plot(angles, values, linewidth=1, linestyle='solid', label=\"group A\")\nax.fill(angles, values, 'b', alpha=0.1)\n \n# Ind2\nvalues=df.loc[1].drop('group').values.flatten().tolist()\nvalues += values[:1]\nax.plot(angles, values, linewidth=1, linestyle='solid', label=\"group B\")\nax.fill(angles, values, 'r', alpha=0.1)\n \n# Add legend\nplt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n\n","302b096b":"plt.figure(figsize=(14,14))\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\n\nax = plt.subplot(111, projection='polar')\nax.plot(theta, r)\nax.set_rmax(2)\nax.set_rticks([0.5, 1, 1.5, 2])  # less radial ticks\nax.set_rlabel_position(-22.5)  # get radial labels away from plotted line\nax.grid(True)\n\nax.set_title(\"A line plot on a polar axis\", va='bottom')\nplt.show()","3cadc5ff":"plt.figure(figsize=(14,14))\nax = plt.axes([0.025, 0.025, 0.95, 0.95], polar=True)\n\nN = 20\ntheta = np.arange(0.0, 2 * np.pi, 2 * np.pi \/ N)\nradii = 10 * np.random.rand(N)\nwidth = np.pi \/ 4 * np.random.rand(N)\nbars = plt.bar(theta, radii, width=width, bottom=0.0)\n\nfor r,bar in zip(radii, bars):\n    bar.set_facecolor(plt.cm.jet(r\/10.))\n    bar.set_alpha(0.5)\n\nax.set_xticklabels([])\nax.set_yticklabels([])\nplt.show()","835960a7":"import plotly.express as px\nwind = px.data.wind()\nfig = px.scatter_polar(wind, r=\"frequency\", theta=\"direction\",\n                   color=\"strength\")\nfig.show()","dca06a77":"!pip install mpl_finance\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\nfrom mpl_finance import candlestick_ohlc\nimport pandas as pd\nimport matplotlib.dates as mpl_dates\n\nplt.style.use('ggplot')\n\n# Extracting Data for plotting\ndata = pd.read_csv('..\/input\/candlestick-python-datacsv\/candlestick_python_data.csv')\nohlc = data.loc[:, ['Date', 'Open', 'High', 'Low', 'Close']]\nohlc['Date'] = pd.to_datetime(ohlc['Date'])\nohlc['Date'] = ohlc['Date'].apply(mpl_dates.date2num)\nohlc = ohlc.astype(float)\n\n# Creating Subplots\nfig, ax = plt.subplots()\nplt.figure(figsize=(14,14))\ncandlestick_ohlc(ax, ohlc.values, width=0.6, colorup='green', colordown='red', alpha=0.8)\n\n# Setting labels & titles\nax.set_xlabel('Date')\nax.set_ylabel('Price')\nfig.suptitle('Daily Candlestick Chart of NIFTY50')\n\n# Formatting Date\ndate_format = mpl_dates.DateFormatter('%d-%m-%Y')\nax.xaxis.set_major_formatter(date_format)\nfig.autofmt_xdate()\n\nfig.tight_layout()\n\nplt.show()","50693aa8":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport plotly.graph_objects as go\nfrom datetime import datetime\nTesla = pd.read_csv('..\/input\/tesla-stock-data-from-2010-to-2020\/TSLA.csv')\nfig = go.Figure(data=[go.Candlestick(x=Tesla['Date'],\n                open=Tesla['Open'],\n                high=Tesla['High'],\n                low=Tesla['Low'],\n                close=Tesla['Close'])])\n\nfig.show()","f46c62ac":"import seaborn as sns\nplt.figure(figsize=(15,6))\nh=pd.pivot_table(Place,columns='sl_no',values=[\"salary\"])\nsns.heatmap(h,cmap=['yellow','red','green'],linewidths=0.05)","695a564f":"import folium \nimport webbrowser","b487b120":"m = folium.Map(location=[45.5236, -122.6750])\n\nm","6c13e5ad":"\nimport os\nimport json\nimport requests\n\n\nurl = 'https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data'\nvis1 = json.loads(requests.get(f'{url}\/vis1.json').text)\nvis2 = json.loads(requests.get(f'{url}\/vis2.json').text)\nvis3 = json.loads(requests.get(f'{url}\/vis3.json').text)\nm = folium.Map(\n    location=[46.3014, -123.7390],\n    zoom_start=7,\n    tiles='Stamen Terrain'\n)\n\nfolium.Marker(\n    location=[47.3489, -124.708],\n    popup=folium.Popup(max_width=450).add_child(\n        folium.Vega(vis1, width=450, height=250))\n).add_to(m)\n\nfolium.Marker(\n    location=[44.639, -124.5339],\n    popup=folium.Popup(max_width=450).add_child(\n        folium.Vega(vis2, width=450, height=250))\n).add_to(m)\n\nfolium.Marker(\n    location=[46.216, -124.1280],\n    popup=folium.Popup(max_width=450).add_child(\n        folium.Vega(vis3, width=450, height=250))\n).add_to(m)\n\n\nm","806d077e":"covid = pd.read_csv(\"..\/input\/global-hospital-beds-capacity-for-covid19\/hospital_beds_USA_v1.csv\") #COVID 19 DATA\n\nimport folium\nmap = folium.Map(location=[37.0902,-95.7129 ], zoom_start=4,tiles='cartodbpositron')\n\nfor lat, lon,state,type in zip(covid['lat'], covid['lng'],covid['state'],covid['type']):\n    folium.CircleMarker([lat, lon],\n                        radius=5,\n                        color='green',\n                      popup =(\n                    'State: ' + str(state) + '<br>'),\n\n                        fill_color='green',\n                        fill_opacity=0.7 ).add_to(map)\nmap","75cb77b8":"import pandas as pd\n\n\nurl = 'https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data'\nstate_geo = f'{url}\/us-states.json'\nstate_unemployment = f'{url}\/US_Unemployment_Oct2012.csv'\nstate_data = pd.read_csv(state_unemployment)\n\nm = folium.Map(location=[48, -102], zoom_start=3)\n\nfolium.Choropleth(\n    geo_data=state_geo,\n    name='choropleth',\n    data=state_data,\n    columns=['State', 'Unemployment'],\n    key_on='feature.id',\n    fill_color='YlGn',\n    fill_opacity=0.7,\n    line_opacity=0.2,\n    legend_name='Unemployment Rate (%)'\n).add_to(m)\n\nfolium.LayerControl().add_to(m)\n\nm","006965d5":"Covid19 = pd.read_csv(\"..\/input\/coronavirus-2019ncov\/covid-19-all.csv\")\ngrp = Covid19.groupby(['Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngrp = grp.reset_index()\ngrp['Country'] =  grp['Country\/Region']\nfig = px.choropleth(grp, locations=\"Country\", locationmode='country names', \n                     color=\"Confirmed\", hover_name=\"Country\/Region\",hover_data = [grp.Recovered,grp.Deaths],projection=\"orthographic\",\n                     color_continuous_scale='Plasma')\nfig.update(layout_coloraxis_showscale=True)\n\nfig.show()#open browser tab to view","740f1151":"cases = pd.read_csv(\"..\/input\/coronavirus-2019ncov\/covid-19-all.csv\")\ngrp = cases.groupby(['Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngrp = grp.reset_index()\ngrp['Country'] =  grp['Country\/Region']\nfig = px.choropleth(grp, locations=\"Country\", locationmode='country names', \n                     color=\"Confirmed\", hover_name=\"Country\/Region\",hover_data = [grp.Recovered,grp.Deaths],projection=\"mercator\",\n                     color_continuous_scale='greens')\nfig.update(layout_coloraxis_showscale=True)\n\nfig.show()#open browser tab to view","77669802":"import pandas as pd \nCovid19 = pd.read_csv(\"..\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv\")\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n\n\n\ngrp = Covid19.groupby(['ObservationDate', 'Country\/Region'])['Confirmed', 'Deaths', 'Recovered'].max()\ngrp = grp.reset_index()\ngrp['Date'] = pd.to_datetime(grp['ObservationDate'])\ngrp['Date'] = grp['Date'].dt.strftime('%m\/%d\/%Y')\ngrp['Active'] = grp['Confirmed'] - grp['Recovered'] - grp['Deaths']\ngrp['Country'] =  grp['Country\/Region']\n\nfig = px.choropleth(grp, locations=\"Country\", locationmode='country names', \n                     color=\"Active\", hover_name=\"Country\/Region\",hover_data = [grp.Recovered,grp.Deaths,grp.Active],projection=\"natural earth\",\n                     animation_frame=\"Date\",width=800, height=500,\n                     color_continuous_scale='Blues',\n                     range_color=[1000,100000])\nfig.update(layout_coloraxis_showscale=True)\n\nfig.show()#open browser tab to view","91628935":"hsp =  pd.read_csv(\"..\/input\/global-hospital-beds-capacity-for-covid19\/hospital_beds_global_regional_v1.csv\")\nimport pandas as pd\n\nimport plotly.graph_objects as go\nfig = go.Figure(go.Densitymapbox(lat=hsp.lat, lon=hsp.lng,\n                                 radius=10))\nfig.update_layout(mapbox_style=\"stamen-terrain\", mapbox_center_lon=0)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\n\nfig.show()#open browser tab to view","d547a264":"k = covid.sort_values(by=['year'])\nk= k.head(200)\nfig=px.bar(k,x='state', y=\"population\", animation_frame=\"year\", \n           animation_group=\"state\", color=\"state\", hover_name=\"state\")\nfig.update_layout(title='Deaths vs Region')\n\nfig.show()#open browser tab to view","401514cb":"fig = px.line_3d(Covid19, x=\"Country\/Region\", y=\"Confirmed\", z=\"Deaths\",color = \"Country\/Region\")\n\nfig.show()#open browser tab to view","3e01b5cb":"fig = px.line_3d(covid, x=\"state\", y=\"population\", z=\"beds\",color = \"state\")\n\nfig.show()#open browser tab to view","cd239bf3":"fig = px.scatter_3d(Covid19, x=\"Country\/Region\", y=\"Confirmed\", z=\"Deaths\",color = \"Country\/Region\")\n\nfig.show()#open browser tab to view","4eb3b3a1":"fig = px.scatter_3d(covid, x=\"state\", y=\"population\", z=\"beds\",color = \"state\")\n\nfig.show()#open browser tab to view","18eb3df7":"cds = covid\ncds = cds.sort_values(by=['year'])\n\nmap1  = cds.groupby(['year','state' ,'lat','lng'])['beds'].max()\n\n\nmap1 = map1.reset_index()\nmap1['size'] = map1['beds']*90000000\nfig = px.scatter_mapbox(map1, lat=\"lat\", lon=\"lng\",\n                     color=\"beds\", size='size',hover_data=['beds'],\n                     color_continuous_scale='Blues',\n                     animation_frame=\"year\")\nfig.update(layout_coloraxis_showscale=True)\nfig.update_layout(mapbox_style=\"carto-positron\",\n                  mapbox_zoom=3)\n\nfig.show()#open browser tab to view","3cdd0367":"cdf = covid\ncdf = cdf.sort_values(by=['year'])\n\ncdf[\"year\"] = cdf[\"year\"].astype(str)\n\nfig = px.choropleth(covid, locations=cdf[\"state\"],       \n\n color=cdf[\"beds\"],\n                    locationmode=\"USA-states\",\n                    scope=\"usa\",\n                    animation_frame=cdf[\"year\"],\n\n                    color_continuous_scale='Greens',\n                   )\n\nfig.show()#open browser tab to view","e795df9f":"import plotly.express as px\ndf = px.data.gapminder()\nBUBBLE = px.scatter(df, x=\"gdpPercap\", y=\"lifeExp\", animation_frame=\"year\", animation_group=\"country\",\n           size=\"pop\", color=\"continent\", hover_name=\"country\",\n           log_x=True, size_max=55, range_x=[100,100000], range_y=[25,90])\n\nBUBBLE.show()#opens browser tab to view","f2a73346":"fig = go.Figure(data=[go.Table(\n    header=dict(values=list(Place.columns),\n                align='left'),\n    cells=dict(values=[Place.sl_no, Place.gender, Place.ssc_p,Place.ssc_b, Place.hsc_p, Place.hsc_b, Place.hsc_b, Place.hsc_s, Place.degree_p,Place.degree_t, Place.workex, Place.etest_p, Place.specialisation, Place.status, Place.salary],\n               align='left'))\n])\n\nfig.show()#opens browser tab to view","ce2fdc83":"import plotly.express as px\ndf = Place\ndf[\"e\"] = df[\"hsc_p\"]\/50\nfig = px.scatter(df, x=\"hsc_s\", y=\"hsc_p\", color=\"hsc_b\",\n                 error_x=\"e\", error_y=\"e\")\n\nfig.show()","08b48dcc":"from pandas_profiling import ProfileReport \nreport = ProfileReport(train)\nreport","d261f4da":"# ***2D Histogram***","04fdc735":"# ***RADAR PLOT***","e7b99b19":"# ***VIOLIN PLOT***","caa0e56a":"# ***SPLIT VIOLEN PLOT***","8a632648":"#  ***Marginal Histogram***\n\nFare of passenger by age visualization","6bc3ea26":"# ***JITTER OVER BOXPLOT***","20998072":"# ***DENSITY PLOT***","51f1c872":"# ***Facet Histogram***","c6220333":"# ***GROUPED BOXPLOT***","37fc2125":"# ***ANIMATED LINE 3D CHART***","2be06900":"# **Table of Content**\n * [Bar Plot](https:\/\/en.wikipedia.org\/wiki\/Bar_chart)\n * [Count Plot](https:\/\/seaborn.pydata.org\/generated\/seaborn.countplot.html#:~:text=A%20count%20plot%20can%20be,compare%20counts%20across%20nested%20variables.) \n * [Histogram](https:\/\/en.wikipedia.org\/wiki\/Histogram)\n * [Rel Plot](https:\/\/seaborn.pydata.org\/generated\/seaborn.relplot.html)\n * [Pie Plot](https:\/\/en.wikipedia.org\/wiki\/Pie_chart)\n * [Tree Plot](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.tree.plot_tree.html#:~:text=Plot%20a%20decision%20tree.,the%20size%20of%20the%20axis.)\n * [Sunburst Plot](https:\/\/www.data-to-viz.com\/graph\/sunburst.html#:~:text=Definition,organization%20by%20an%20aditional%20ring.)\n * [Scatter Plot](https:\/\/en.wikipedia.org\/wiki\/Scatter_plot)\n * [Trend Line](https:\/\/en.wikipedia.org\/wiki\/Trend_line_(technical_analysis))\n * [Ternary Plot](https:\/\/en.wikipedia.org\/wiki\/Ternary_plot)\n * [Line Chart](https:\/\/en.wikipedia.org\/wiki\/Line_chart)\n * [Density Plot](https:\/\/www.data-to-viz.com\/graph\/density.html#:~:text=A%20density%20plot%20is%20a,used%20in%20the%20same%20concept.)\n * [Bubble Plot](https:\/\/en.wikipedia.org\/wiki\/Bubble_chart)\n * [Box Plot](https:\/\/en.wikipedia.org\/wiki\/Box_plot)\n * [Violin Plot](https:\/\/en.wikipedia.org\/wiki\/Violin_plot)\n * [Joint Plot](https:\/\/seaborn.pydata.org\/generated\/seaborn.jointplot.html)\n * [Funnel Plot](https:\/\/en.wikipedia.org\/wiki\/Funnel_plot)\n * [Correlation Plot](https:\/\/en.wikipedia.org\/wiki\/Scatter_plot)\n * [Pair Plot](https:\/\/mylearningsinaiml.wordpress.com\/2018\/11\/21\/pair-plots\/#:~:text=Pair%20plots,for%20three%20variables%20or%20dimensions.)\n * [Cluster Map](https:\/\/seaborn.pydata.org\/generated\/seaborn.clustermap.html)\n * [Swarm Plot](https:\/\/seaborn.pydata.org\/generated\/seaborn.swarmplot.html)\n * [Strip Plot](https:\/\/seaborn.pydata.org\/generated\/seaborn.stripplot.htmlt)\n * [Cat Plot](https:\/\/seaborn.pydata.org\/generated\/seaborn.catplot.html)\n * [Resid Plot](https:\/\/en.wikipedia.org\/wiki\/Partial_residual_plot)\n * [Venn Plot](https:\/\/en.wikipedia.org\/wiki\/Venn_diagram)\n * [Facet Grid](https:\/\/www.tutorialspoint.com\/seaborn\/seaborn_facet_grid.htm#:~:text=A%20useful%20approach%20to%20explore,idea%20of%20%E2%80%9Csmall%20multiples%E2%80%9D.)\n * [Factor Plot](https:\/\/medium.com\/@yoonho0715\/seaborn-factor-plot-params-2a3ed9cf71bc)\n * [WindRose Plot](https:\/\/en.wikipedia.org\/wiki\/Wind_rose)\n * [Radar Plot](https:\/\/en.wikipedia.org\/wiki\/Radar_chart)\n * [Polar Plot](https:\/\/matplotlib.org\/examples\/pylab_examples\/polar_demo.html)\n * [Candlesticks Plot](https:\/\/en.wikipedia.org\/wiki\/Candlestick_chart)\n * [Hear Map](https:\/\/en.wikipedia.org\/wiki\/Heat_map)\n * [Folium Map](https:\/\/towardsdatascience.com\/data-visualization-with-python-folium-maps-a74231de9ef7)\n * [Choropleth](https:\/\/en.wikipedia.org\/wiki\/Choropleth_map)\n * [Density Map](https:\/\/www.gislounge.com\/density-mapping\/#:~:text=Density%20mapping%20is%20simply%20a,be%20(e.g.%2C%20population).)\n * [Animation](https:\/\/en.wikipedia.org\/wiki\/Animation)\n * [Table Plot](https:\/\/matplotlib.org\/3.2.1\/api\/_as_gen\/matplotlib.pyplot.table.html)\n * [Error Plot](https:\/\/matplotlib.org\/3.1.1\/api\/_as_gen\/matplotlib.pyplot.errorbar.html)\n * [Word Cloud](https:\/\/en.wikipedia.org\/wiki\/Tag_cloud)\n * [Report]()","0eedb8bc":"# ***FACTOR PLOT***","8b4c7eaf":"# ***PARALLEL COORDINATES PLOT***","807536f4":"# ***BUBBLE PLOT***","c68ddd38":"# ***ANDREWS CURVES PLOT***","2cb6df80":"# ***HEAT MAP***","6697b506":"# ***AREA PLOT***","36370a98":"# ***Dist Plot***","e7370703":"# ***LM PLOT***","21d02899":"# ***CANDLESTICKS PLOT***","6a076205":"# ***Correllogram Plot***","e3294373":"# ***ERROR PLOT***","a83d6f0c":"# ***Horizontal Plot***","37d4991e":"# ***BOXEN PLOT***","70e3abc1":"# ***FACET GRID***","cf8cde56":"# ***Marginal Boxplot***","d4a9bb46":"# ***ANIMATED SCATTER PLOT*** ","edead8cc":"# ***PIE PLOT***","df05dd1d":"# ***REPORT***","e6bd5907":"# *****SUNBURST PLOT*****","cae1a8dd":"# ***SWARMPLOT***","7850120d":"# ***Count plot***","156802ae":"# ***NOTCHED BOXPLOT***","a806f925":"# ***FOLIUM PLOT***","278e1cf0":"# ***Stacked Bar***","b52a877b":"# ***JOINT PLOT***","2f49ce12":"# ***POLAR PLOT***","48fbc8da":"# ***ANIMATED SCATTER 3D PLOT***","b0e34114":"# ***Bar Plot***","c3934898":"# ***CLUSTER MAP***","aef06e84":"# ***FUNNEL PLOT***","e1758dea":"# ***TABLE PLOT***","fb4f23ea":"# ***RESID PLOT***","793ca375":"# ***BOX PLOT***","3eadf5e6":"![](https:\/\/miro.medium.com\/max\/3840\/1*g__jiesLRIfCRefVG69Pfw.gif)","85fc9623":"# ***VOILIN SWARM***","31ac0cfb":"# ***CAT PLOT***","a4e8e3ed":"# ***Data Visualization Project by Abhishek Vaid***","e9bdd6b9":"# ***STRIP PLOT***","2c1fefca":"# ***If you like my work please drop a like, it motivates me to make more content for the data science community.***","5f35fc72":"# ***TERNARY PLOT***","d2dbf93a":"# ***LINE CHART***","3953816e":"# ***Rel plot***","3ff71c37":"# ***WORD CLOUD***","5bf206a2":"# ***Group Bar***","cf14212c":"# ***PIE CHART PLOT***","9668308a":"# ***Data Visualization is the bridge between understanding data individually to understood data by the business*** ","3e3308c0":"# ***DONUT PLOT***","fd6e03f5":"# ***TRENDLINE***","a45cc5af":"# ***CHOROPLETH***","3119f76f":"# ***ANIMATTED BAR PLOT***","a965908d":"# ***ANIMATED BUBBLE PLOT***","fe7b01d0":"# ***DENSITY MAP PLOT***","f1f304f7":"# ***WINDROSE PLOT***","5ade6cbf":"# ***PAIR PLOT***","8b00e974":"# ***Histogram***","369de097":"# ***SCATTER PLOT***"}}