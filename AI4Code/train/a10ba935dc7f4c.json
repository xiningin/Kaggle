{"cell_type":{"4f499f01":"code","90a788be":"code","ea132182":"code","1bf9c6f9":"code","ca86a2f4":"code","9e1c2c67":"code","37267213":"code","6e1f20e9":"code","dfe4e308":"code","cd6b7d76":"code","bf173e0a":"code","d83efa82":"code","6455e9a5":"code","6ba30eff":"code","5f289b29":"code","b926b391":"markdown","ff626b99":"markdown","abcc100c":"markdown","df06446f":"markdown","9c45b3c7":"markdown","1a485027":"markdown","0b7cd87d":"markdown","1122935e":"markdown","8efc5b36":"markdown","cef2b798":"markdown","c0554f25":"markdown","070bfb2a":"markdown","6707c57b":"markdown"},"source":{"4f499f01":"import pandas as pd\nimport numpy as np\nimport datetime\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.io as pio\nfrom plotly.subplots import make_subplots","90a788be":"df = pd.read_csv('..\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\ndf.shape","ea132182":"df.head()","1bf9c6f9":"df.isnull().sum()","ca86a2f4":"# (1) Create a copy from the original df and fill gaps in total_vaccinations\ndvac = df[['country', 'date', 'total_vaccinations', \n           'daily_vaccinations_raw', 'daily_vaccinations']].copy() #using copy to avoid SettingwithCopyWarning \n\n# Finding same consecutive values in 'total_vaccinations'\ndvac['csc_value'] = dvac.total_vaccinations.groupby([dvac['country'],dvac['total_vaccinations']]).diff(1) == 0\n\n# Filling gaps of missing values between same consecutive values in 'csc_value' and 'total_vaccinations'\ndvac['csc_value'].fillna(method='bfill', inplace=True)\n\ndvac.loc[dvac['csc_value'] == True, 'total_vaccinations'] = ((dvac['total_vaccinations'].groupby([dvac['country'], dvac['csc_value']]))\n                                                        .transform(lambda x:x.bfill()))\n\n# (2) Creates new variable from 'total_vaccinations' filling gaps of missing values\ndvac['filltv'] = (dvac['total_vaccinations'].groupby(dvac['country'])               \n               .transform(lambda x:x.bfill())) \n\n# (3) Counting missing values in 'total vaccinations'\ndvac['nan_values'] = (dvac.total_vaccinations.isnull().astype(int).groupby(dvac.total_vaccinations.notnull().astype(int).cumsum())\n                      .transform('sum')\n                      .transform(lambda x:x+1 if x != 0 else 0) #adds one to take into account the non-missing value\n                      .shift(1))\n\n# (4) Calculates difference from consecutive non-missing values in 'filltv'\ndvac.loc[dvac.nan_values != 0, 'diff_filltv'] = ((dvac['filltv'].groupby([dvac['country']]).diff(-1)*(-1)) #multiply by minus 1 to get positive result.\n                                             .replace(-0, np.nan) \n                                             .shift(1) \n                                             .groupby([dvac['country']]).transform(lambda x:x.ffill()))\n\n# (5) Divides the difference by the number of missing values\ndvac['avg_filltv'] = (dvac['diff_filltv']\/dvac['nan_values'])\n\n# (6) Substitutes values with data from 'daily_vaccinations_raw', whenever it finds non-missing values\ndvac.loc[dvac.nan_values == 0, 'avg_filltv'] = dvac['daily_vaccinations_raw']\n\n# Sets values to zero based on variable 'csc_value'\ndvac.loc[dvac.csc_value == True, 'avg_filltv'] = 0\n\n# (7) moving avg\ndvac['MA'] = round(dvac.groupby('country')['avg_filltv'] \n                   .rolling(window=7, min_periods=1) #takes 7 values. minimum 1 value for first values\n                   .mean(), 0).reset_index(0,drop=True)\n\n# If 'filltv' is a missing value, 'MA' also turns to a missing value\ndvac.loc[dvac.filltv.isna(), 'MA'] = np.nan","9e1c2c67":"dvac[['country','date','daily_vaccinations','MA']].head(10)","37267213":"dvac['diff'] = dvac['MA'] - dvac['daily_vaccinations']\ndvac.loc[dvac['diff'].notna() & dvac['diff'] != 0, ['country','date', 'daily_vaccinations', 'MA', 'diff']]","6e1f20e9":"def country_heatmap(country, df=dvac):\n    df = df.loc[df['country'] == country].copy()\n    \n    # time period\n    df['date'] = pd.to_datetime(df['date']).apply(lambda x: x.date())\n    start_date = min(df['date'])\n    last_date = max(df['date'])\n    timeperiod = last_date-start_date\n    \n    # weekdays and week number\n    country_calendar = [start_date + datetime.timedelta(i) for i in range(timeperiod.days+1)] #list with days in timeperiod\n    weekdays = [i.weekday() for i in country_calendar]\n    weeknumber = [(i.strftime('%V')) for i in country_calendar]\n    \n    # daily vaccinations data\n    vc = df['daily_vaccinations']\n    vcr = df['daily_vaccinations_raw']    \n    text = [str(i) for i in country_calendar]\n    \n    # subplots\n    fig = make_subplots(1,2, \n                        shared_yaxes=False,\n                        subplot_titles=('daily_vaccinations','daily_vaccinations_raw'))\n    \n    #daily_vaccinations heatmap\n    fig.add_trace(\n        go.Heatmap(\n            x=weekdays,\n            y=weeknumber,\n            z=vc,\n            text=text,\n            xgap=2,\n            ygap=2,\n            showscale=False,\n            colorscale='viridis',\n            hovertemplate='Weekday: %{x}<br>Week number: %{y}<br>Vaccinations: %{z}<br>Date: %{text}<extra><\/extra>'),1,1) \n    \n    #daily_vaccinations_raw heatmap\n    fig.add_trace(\n        go.Heatmap(\n            x=weekdays,\n            y=weeknumber,\n            z=vcr,\n            text=text,\n            xgap=2,\n            ygap=2,\n            showscale=False,\n            colorscale='viridis',\n            hovertemplate='Weekday: %{x}<br>Week number: %{y}<br>Vaccinations: %{z}<br>Date: %{text}<extra><\/extra>'),1,2)\n    \n    fig.update_layout(\n        title = country,\n        title_font_size = 20,\n        title_y = 0.98,        \n        plot_bgcolor = ('rgb(255,255,255)'),\n        width=800, \n        height=600 \n        )\n    fig.layout.annotations[0].update(y=1.05)\n    fig.layout.annotations[1].update(y=1.05)\n    fig.update_xaxes(\n        tickmode=\"array\",\n        ticktext=[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\"],\n        tickvals=[0,1,2,3,4,5,6],\n        title=\"\",\n        side=\"top\"\n        )\n    fig.update_yaxes(\n        title=\"Week Nr.\",\n        autorange=\"reversed\"\n        )    \n    fig.show()\n","dfe4e308":"country_heatmap('United States')","cd6b7d76":"country_heatmap('Germany')","bf173e0a":"country_heatmap('Brazil')","d83efa82":"### Find the max number of people vaccinated per 100 as of the most recent date\n# Columns for country, date and total vaccinates\ntotal_per_country = df[['country', 'date', 'people_fully_vaccinated_per_hundred']].copy()\n\n# Filling empty values by group with foward fill (ffill)\ntotal_per_country['people_fully_vaccinated_per_hundred'] = (total_per_country['people_fully_vaccinated_per_hundred'].groupby(total_per_country['country'])\n                                                            .transform(lambda x:x.ffill()))\n\n# Filtering na values\ntotal_per_country.dropna(inplace=True)\n\ndf_southa = total_per_country[total_per_country['country'].isin(['Argentina','Bolivia','Brasil','Chile','Colombia','Ecuador','Paraguay','Peru','Uruguay','Venezuela'])]\ndf_northa = total_per_country[total_per_country['country'].isin(['Canada','Mexico','United States'])]","6455e9a5":"# North America\nfig = px.line(df_northa, x='date', y='people_fully_vaccinated_per_hundred', color='country', text='country',\n             width=800,\n             height=600)\n\nfig.update_traces(\n    mode='markers+lines',\n    hovertemplate='<b>%{text}<\/b><br>'+\n                  'Fully vaccinated per 100: <b>%{y:.2f}<\/b><br>'+\n                  '<extra>%{x}<\/extra>'\n    )\nfig.update_layout(\n    title = 'Vaccination progress in North America',\n    title_font_size=20,\n    hoverlabel=dict(font_size=12), \n    hovermode='x'\n    )\nfig.update_yaxes(\n    title=\"People fully vaccinated per hundred\"\n    )\nfig.show()","6ba30eff":"# South America\nfig = px.line(df_southa, x='date', y='people_fully_vaccinated_per_hundred', color='country', text='country',\n             width=800,\n             height=600)\n\nfig.update_traces(\n    mode='markers+lines',\n    hovertemplate='<b>%{text}<\/b><br>'+\n                  'Fully vaccinated per 100: <b>%{y:.2f}<\/b><br>'+\n                  '<extra>%{x}<\/extra>'\n    )\nfig.update_layout(\n    title = 'Vaccination progress in South America',\n    title_font_size=20,\n    hoverlabel=dict(font_size=12), \n    hovermode='x'\n    )\nfig.update_yaxes(\n    title=\"People fully vaccinated per hundred\"\n    )\nfig.show()","5f289b29":"### Vaccines per country\nvaccine_per_country = df[['country', 'vaccines']].copy()\nvaccine_per_country.drop_duplicates(keep='first', inplace=True)\n\n#breaking 'vaccines' into different rows\nvaccine_series = vaccine_per_country['vaccines'].str.split(', ').apply(pd.Series,1).stack()\nvaccine_series.index = vaccine_series.index.droplevel(-1)\nvaccine_series.name = 'vaccines'\n\nvaccine_per_country.drop(columns=['vaccines'], inplace=True)\nvaccine_per_country = vaccine_per_country.join(vaccine_series)\n\n#getting iso code for countries\nvaccine_per_country = pd.merge(vaccine_per_country, df[['country','iso_code']].copy().drop_duplicates(), \n                            how='left', on='country')\nvaccine_per_country['valz'] = 1\n\n### Choropleth map\nvaccines_list = vaccine_per_country['vaccines'].drop_duplicates().to_list()\nvisible = np.array(vaccines_list)\nvaccine_per_country['text'] = 'Country: ' + vaccine_per_country['country'] + '<br>' + 'Vaccine: ' + vaccine_per_country['vaccines']\n\ntraces = []\nbuttons = []\nfor vac in vaccines_list:\n    traces.append(go.Choropleth(\n        locations = vaccine_per_country.loc[vaccine_per_country.vaccines==vac]['iso_code'],\n        z = vaccine_per_country.loc[vaccine_per_country.vaccines==vac]['valz'],\n        coloraxis = 'coloraxis',\n        colorscale = 'Blues',\n        autocolorscale = False,\n        marker_line_color = 'white',\n        hovertemplate=vaccine_per_country.loc[vaccine_per_country.vaccines==vac]['text'] + '<extra><\/extra>',\n        visible = True if vac == vaccines_list[0] else False))\n    \n    buttons.append(dict(label=vac,\n                        method='update',\n                        args=[{'visible':list(visible==vac)},\n                              {'title':f'<b>Countries using {vac}<\/b>'}]))\n\nupdatemenus = [dict(type = 'dropdown',\n                    active = 0,\n                    showactive=True,\n                    direction = 'down', \n                    xanchor = 'left', \n                    yanchor = 'top', \n                    x = 0, \n                    y = 1.09, \n                    font = dict(size=9, color='#000000'),\n                    buttons = buttons)\n               ]\n\nfig = go.Figure(data=traces,\n                layout=dict(updatemenus=updatemenus,\n                            coloraxis=dict(colorscale='Blues')))\n\nfirst_title = vaccines_list[0]\nfig.update_layout(title=f\"<b>Countries using {first_title}<\/b>\",title_x=0.5,\n                  coloraxis_showscale=False,\n                  showlegend = False,\n                  width = 800,\n                  height = 600)\n\nfig.show()","b926b391":"There are several options to track the vaccination progress. One could pick almost every variable in the dataset and plot a line chart to show how many vaccinations or vaccinated people are there in each country. However, checking for missing values points to **daily_vaccinations** as the most appropriate variable for this analysis. According to *Our World in Data*, this variable measures \"*new doses administered per day (7-day smoothed)*\". However, there is also **daily_vaccinations_raw**, which measures the \"*daily change in the total number of doses administered*\". In principle, it would be better to use the latter, since it is the exact number of doses reported by each country, whereas the former is an average. However, due to the number of missing values in **daily_vaccinations_raw**, it is clear that **daily_vaccinations** offers a better picture of the vaccination progress.\n\nAlthough **daily_vaccinations** is in the dataset, I wanted to see how this variable was calculated. I saw an explanatory [post](https:\/\/github.com\/owid\/covid-19-data\/issues\/333#issuecomment-763015298) on Github that gave me an idea on how to calculate these values, but I wanted to see if could come up with the same result on Python.","ff626b99":"This notebook aims to visualize the vaccination progress around the world. I start by doing my own calculation of the variable **daily_vaccinations**. The first visualization compares two variables in the dataset that can track the progress in different ways: **daily_vaccinations** and **daily_vaccinations_raw**. The second visualization compares groups of countries. The third one shows which vaccine is being used in which country. These visualizations were created with `plotly`.","abcc100c":"The first example is the United States. The vaccination began in the last two weeks of 2020 and reached its peak during the 15th week of 2021, which was around mid-April. This is clearly illustrated in the heat map to the left. However, in the heat map to the right, it is possible to distinguish another trend. Most of the vaccinations appear to be happening towards the weekend, which is more evident throughout the months of March, April and May.","df06446f":"Unfortunately, these comparisons do not work for every country, because of the missing values. In the case of Brazil, it's clear that the best option to visualize the vaccination progress in heat maps is by choosing the variable **daily_vaccinations**. It's difficult to identify trends in the heat map to the right. There are a lot of countries full of missing values in the variable **daily_vaccinations_raw**. ","9c45b3c7":"In North America, the United States had a faster progress until it reached 45 people fully vaccinated per hundred. Starting June, Canada starts significantly increasing its proportion of vaccinated people. Mexico has had a lower progress in the region.","1a485027":"### **Progress by region - North America and South America**\n\nThis a line chart comparing a group of countries using the variable **people_fully_vaccinated_per_hundred**. I created a group for North America and another for South America.","0b7cd87d":"For Germany, it appears June was the period with the highest daily vaccination average. In contrast to the United States, most of the vaccinations happened in the middle of the week, whereas the weekends are the days with the less number of vaccinations.","1122935e":"In South America, there are two groups of countries. On one side, Chile and Uruguay are the first countries that went over 50 people fully vaccinated per hundred in this region. The rest of countries have had a similar trend since the start of vaccination, being under 25 per hundred at the beginning of August.","8efc5b36":"## **Covid-19 vaccination progress**","cef2b798":"### **Vaccines around the world**\n\nOne of the main challenges during vaccination has been its access. There are several vaccines being produced and it can be interesting to see where each vaccine is being used. Some vaccines are used exclusively by a single country.","c0554f25":"At the end, the variable **MA** -the moving average- and **total_vaccinations** are basically the same. There is a difference in some values due to rounding errors, but it is not a significant change from the original variable.","070bfb2a":"### **Visualization: daily_vaccinations and daily_vaccinations_raw**\n\nThe goal of this visualization is to see how using **daily_vaccinations** smooths the representation of this dataset. In some cases, where there is also full data for **daily_vaccinations_raw**, is interesting to see the difference between the two variables. ","6707c57b":"### **Comparing daily_vaccinations and daily_vaccinations_raw**\n\nIn this part, the approach is to use the values from **total_vaccinations** to calculate **daily_vaccinations**. In general terms, I follow the next steps:\n* Calculate the difference between consecutive non-missing values in **total_vaccinations**\n* Divide this difference by the number of consecutive missing values to get an estimated proportional value.\n* Find the moving average (**MA**) of seven days of the estimated proportional value.\n"}}