{"cell_type":{"569f185d":"code","263d33ca":"code","61b4e283":"code","10cf3fd5":"code","558974da":"code","66cc2b9c":"code","5a1f3371":"code","c1950477":"code","3d5f8bee":"code","fcd1cf34":"code","0c49d36f":"code","8a3bd501":"markdown","1ce9d425":"markdown","f5519f35":"markdown","18fbbec2":"markdown"},"source":{"569f185d":"import os\nimport cv2\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm","263d33ca":"with open('..\/input\/smartphone-image-denoising-dataset\/SIDD_Small_sRGB_Only\/_ReadMe.txt') as f:\n    readme = f.read()\n    \nprint(readme)","61b4e283":"with open('..\/input\/smartphone-image-denoising-dataset\/SIDD_Small_sRGB_Only\/Scene_Instances.txt') as f:\n    instances = f.read()\n    \ninstances = instances.split('\\n')\ninstances[:5]","10cf3fd5":"path = '..\/input\/smartphone-image-denoising-dataset\/SIDD_Small_sRGB_Only\/Data\/'\n\nnoisy_images_path = []\ngt_images_path = []\n\nfor f in instances:\n    images_path = path + f + '\/'\n    \n    for g in os.listdir(images_path):\n        image_path = images_path + g\n        \n        if 'NOISY' in image_path:\n            noisy_images_path.append(image_path)\n        else:\n            gt_images_path.append(image_path)\n            \n\nprint('TOTAL NOISY IMAGES:', len(noisy_images_path))\nprint('TOTAL GROUND TRUTH IMAGES:', len(gt_images_path))","558974da":"for i in range(0,len(noisy_images_path),20):    \n    print(noisy_images_path[i])","66cc2b9c":"HEIGHT = [] \nWIDTH = []\n\nfor f in tqdm(noisy_images_path):\n    img = cv2.imread(f)\n    height, width, channels = img.shape\n    \n    HEIGHT.append(height)\n    WIDTH.append(width)\n    \nprint('MIN HEIGHT:', min(HEIGHT))\nprint('MAX HEIGHT:', max(HEIGHT))\nprint()\nprint('MIN WIDTH:', min(WIDTH))\nprint('MAX WIDTH:', max(WIDTH))","5a1f3371":"IMG_SIZE = 1024\nsize = (IMG_SIZE, IMG_SIZE)\n\nnoisy_img_array = []\n\nfor f in tqdm(noisy_images_path):\n    img = cv2.imread(f)\n    img = cv2.resize(img, size)\n    \n    noisy_img_array.append(img)\n    \ngt_img_array = []\n\nfor f in tqdm(gt_images_path):\n    img = cv2.imread(f)\n    img = cv2.resize(img, size)\n    \n    gt_img_array.append(img)","c1950477":"noisy_img_array = np.array(noisy_img_array)\ngt_img_array = np.array(gt_img_array)\n\nprint('NOISY IMG ARRAY:', noisy_img_array.shape)\nprint('GT IMG ARRAY:', gt_img_array.shape)","3d5f8bee":"for i in range(0,len(noisy_img_array),20):\n    \n    fig=plt.figure(figsize=(50, 25))\n    \n    ax = plt.subplot(131)\n    plt.title('Ground Truth')\n    plt.imshow(gt_img_array[i])\n    \n    ax = plt.subplot(132)\n    plt.title('Noisy Image')\n    plt.imshow(noisy_img_array[i])\n    plt.show()","fcd1cf34":"np.save('noisy_img_array.npy', noisy_img_array)\nnp.save('gt_img_array.npy', gt_img_array)","0c49d36f":"# to load the arrays\n# noisy_img_array = np.load('noisy_img_array.npy', allow_pickle=True)\n# gt_img_array = np.load('gt_img_array.npy', allow_pickle=True)","8a3bd501":"Since the images are extremely high-resolutioned and of different resolutions, training such images might not be possible given the compute that we have on Kaggle or Google Colab. So we can reduce the size of images and pack them in numpy arrays for faster processing in our tasks,","1ce9d425":"## Visualizing Images\n\nSince the images are of very high resolution, it is difficult to notice a difference between them. However if you observe closely, you will see a fuzziness in noisy images.","f5519f35":"## About the Dataset\n\n1. The dataset is popularly known as **Smartphone Image Denoising Dataset (SIDD)**. \n2. It contains 160 pairs of noisy\/ground-truth images.\n3. The images are of exceptionally high-quality and have been taken by different smartphones under different illuminations.\n\nComplete readme is as printed below.","18fbbec2":"## Saving Data"}}