{"cell_type":{"3d145c38":"code","6492d46a":"code","8a90a0db":"code","fdb0be55":"code","c1401f7b":"code","85c4fde2":"code","3b080136":"code","ff96e3ed":"code","6290a476":"code","ab913209":"code","7f9a6e81":"code","32d25cc4":"code","f0b97395":"code","fb091b36":"code","f0f2bb9e":"code","1d64e7b3":"code","1fad6586":"code","debf9362":"markdown","3103483b":"markdown","6bd10667":"markdown","eee2d1ad":"markdown","5df40a64":"markdown","0becba20":"markdown","b20c7f0b":"markdown","6c01355d":"markdown","2a26fe1a":"markdown","e78cee2c":"markdown"},"source":{"3d145c38":"import pandas as pd\nimport numpy as np\nfrom itertools import product, combinations\nimport gc\n\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n\nfrom sklearn.ensemble import (RandomForestClassifier\n                              , RandomForestRegressor\n                              , ExtraTreesClassifier\n                             )\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom mlxtend.classifier import StackingCVClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.model_selection import GridSearchCV\n\nrand_state = 719","6492d46a":"data_path = '\/kaggle\/input\/learn-together\/'\ndef reload(x):\n    return pd.read_csv(data_path + x, index_col = 'Id')\n\ntrain = reload('train.csv')\nn_train = len(train)\ntest = reload('test.csv')\nn_test = len(test)\n\nindex_test = test.index.copy()\ny_train = train.Cover_Type.copy()\n\nall_data = train.iloc[:,train.columns != 'Cover_Type'].append(test)\nall_data['train'] = [1]*n_train + [0]*n_test\n\ndel train\ndel test","8a90a0db":"questionable_0 = ['Hillshade_9am', 'Hillshade_3pm']\n\ncorr_cols = {'Hillshade_9am': ['Hillshade_3pm', 'Aspect', 'Slope', 'Soil_Type10', 'Wilderness_Area1'\n                               ,'Wilderness_Area4', 'Vertical_Distance_To_Hydrology']\n            , 'Hillshade_3pm': ['Hillshade_9am', 'Hillshade_Noon', 'Slope', 'Aspect']\n            }","fdb0be55":"rfr = RandomForestRegressor(n_estimators = 100, random_state = rand_state, verbose = 1, n_jobs = -1)\n\n# for col in questionable_0: \n#     print('='*20)\n#     scores = cross_val_score(rfr,\n#                              all_data_non0[corr_cols[col]], \n#                              all_data_non0[col],\n#                              n_jobs = -1)\n#     print(col + ': {0:.4} (+\/- {1:.4}) ## [{2}]'.format(scores.mean(), scores.std()*2, ', '.join(map(str, np.round(scores,4)))))\n\n# ====================\n# Hillshade_9am: 1.0 (+\/- 0.00056) ## [0.9995, 0.9993, 0.9988]\n# ====================\n# Hillshade_3pm: 1.0 (+\/- 0.0029) ## [0.9981, 0.9971, 0.9947]\n\n## NEAR PERFECT SCORES FOR ALL => no need further feature engineering for questionable_0 predictions","c1401f7b":"for col in questionable_0:\n    print('='*20)\n    print(col)\n    all_data_0 = all_data[all_data[col] == 0].copy()\n    all_data_non0 = all_data[all_data[col] != 0].copy()\n    rfr.fit(all_data_non0[corr_cols[col]], all_data_non0[col])\n    pred = rfr.predict(all_data_0[corr_cols[col]])\n    pred_col = 'predicted_{}'.format(col)\n    \n    all_data[pred_col] = all_data[col].copy()\n    all_data.loc[all_data_0.index, pred_col] = pred\n\nfor col in questionable_0:\n    all_data['predicted_{}'.format(col)] = all_data['predicted_{}'.format(col)].apply(int)","85c4fde2":"def aspect_slope(df):\n    df['AspectSin'] = np.sin(np.radians(df.Aspect))\n    df['AspectCos'] = np.cos(np.radians(df.Aspect))\n    df['AspectSin_Slope'] = df.AspectSin * df.Slope\n    df['AspectCos_Slope'] = df.AspectCos * df.Slope\n    df['AspectSin_Slope_Abs'] = np.abs(df.AspectSin_Slope)\n    df['AspectCos_Slope_Abs'] = np.abs(df.AspectCos_Slope)\n    df['Hillshade_Mean'] = df[['Hillshade_9am',\n                              'Hillshade_Noon',\n                              'Hillshade_3pm']].apply(np.mean, axis = 1)\n    return df","3b080136":"def distances(df):\n    horizontal = ['Horizontal_Distance_To_Fire_Points', \n                  'Horizontal_Distance_To_Roadways',\n                  'Horizontal_Distance_To_Hydrology']\n    \n    df['Euclidean_to_Hydrology'] = np.sqrt(df['Horizontal_Distance_To_Hydrology']**2 + df['Vertical_Distance_To_Hydrology']**2)\n    df['EuclidHydro_Slope'] = df.Euclidean_to_Hydrology * df.Slope\n    df['Elevation_VDH_sum'] = df.Elevation + df.Vertical_Distance_To_Hydrology\n    df['Elevation_VDH_diff'] = df.Elevation - df.Vertical_Distance_To_Hydrology\n    df['Elevation_2'] = df.Elevation**2\n    df['Elevation_3'] = df.Elevation**3\n    df['Elevation_log1p'] = np.log1p(df.Elevation) # credit: https:\/\/www.kaggle.com\/evimarp\/top-6-roosevelt-national-forest-competition\/notebook\n    \n    for col1, col2 in combinations(zip(horizontal, ['HDFP', 'HDR', 'HDH']), 2):\n        df['{0}_{1}_diff'.format(col1[1], col2[1])] = df[col1[0]] - df[col2[0]]\n        df['{0}_{1}_sum'.format(col1[1], col2[1])] = df[col1[0]] + df[col2[0]]\n    \n    df['Horizontal_sum'] = df[horizontal].sum(axis = 1)\n    return df","ff96e3ed":"def OHE_to_cat(df, colname, data_range): # data_range = [min_index, max_index+1]\n    df[colname] = sum([i * df[colname + '{}'.format(i)] for i in range(data_range[0], data_range[1])])\n    return df","6290a476":"soils = [\n    [7, 15, 8, 14, 16, 17,\n     19, 20, 21, 23], #unknow and complex \n    [3, 4, 5, 10, 11, 13],   # rubbly\n    [6, 12],    # stony\n    [2, 9, 18, 26],      # very stony\n    [1, 24, 25, 27, 28, 29, 30,\n     31, 32, 33, 34, 36, 37, 38, \n     39, 40, 22, 35], # extremely stony and bouldery\n]\nsoil_dict = {}\nfor index, soil_group in enumerate(soils):\n    for soil in soil_group:\n        soil_dict[soil] = index\n\ndef rocky(df):\n    df['Rocky'] = sum(i * df['Soil_Type' + str(i)] for i in range(1,41))\n    df['Rocky'] = df['Rocky'].map(soil_dict)\n    return df","ab913209":"all_data = aspect_slope(all_data)\nall_data = distances(all_data)\nall_data = OHE_to_cat(all_data, 'Wilderness_Area', [1,5])\nall_data = OHE_to_cat(all_data, 'Soil_Type', [1,41])\nall_data = rocky(all_data)\nall_data.drop(['Soil_Type7', 'Soil_Type15', 'train'] + questionable_0, axis = 1, inplace = True)","7f9a6e81":"X_train = all_data.iloc[:n_train,:].copy()\nX_test = all_data.iloc[n_train:, :].copy()\ndel all_data\n\ndef mem_reduce(df):\n    # credit: https:\/\/www.kaggle.com\/arateris\/2-layer-k-fold-learning-forest-cover\n    start_mem = df.memory_usage().sum() \/ 1024.0**2\n    for col in df.columns:\n        if df[col].dtype=='float64': \n            df[col] = df[col].astype('float32')\n        if df[col].dtype=='int64': \n            if df[col].max()<1: df[col] = df[col].astype(bool)\n            elif df[col].max()<128: df[col] = df[col].astype('int8')\n            elif df[col].max()<32768: df[col] = df[col].astype('int16')\n            else: df[col] = df[col].astype('int32')\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Reduce from {0:.3f} MB to {1:.3f} MB (decrease by {2:.2f}%)'.format(start_mem, end_mem, \n                                                                (start_mem - end_mem)\/start_mem*100))\n    return df\n\nX_train = mem_reduce(X_train)\nprint('='*10)\nX_test=mem_reduce(X_test)\ngc.collect()","32d25cc4":"# Important columns: https:\/\/www.kaggle.com\/hoangnguyen719\/beginner-eda-and-feature-engineering\nimportant_cols = ['Elevation', 'Aspect', 'Slope', 'Horizontal_Distance_To_Hydrology'\n                  , 'Vertical_Distance_To_Hydrology', 'Horizontal_Distance_To_Roadways'\n                  , 'Hillshade_Noon', 'Horizontal_Distance_To_Fire_Points', 'Wilderness_Area1'\n                  , 'Wilderness_Area3', 'Wilderness_Area4', 'Soil_Type3', 'Soil_Type4', 'Soil_Type10'\n                  , 'predicted_Hillshade_9am', 'predicted_Hillshade_3pm', 'AspectSin', 'AspectCos'\n                  , 'AspectSin_Slope', 'AspectCos_Slope', 'AspectSin_Slope_Abs', 'AspectCos_Slope_Abs'\n                  , 'Hillshade_Mean', 'Euclidean_to_Hydrology', 'EuclidHydro_Slope'\n                  , 'Elevation_VDH_sum', 'Elevation_VDH_diff', 'Elevation_2', 'Elevation_3'\n                  , 'Elevation_log1p', 'HDFP_HDR_diff', 'HDFP_HDR_sum', 'HDFP_HDH_diff'\n                  , 'HDFP_HDH_sum', 'HDR_HDH_diff', 'HDR_HDH_sum', 'Horizontal_sum'\n                  , 'Wilderness_Area', 'Soil_Type', 'Rocky'\n                 ]","f0b97395":"# params = {'n_neighbors':[1,3,5,10,15,20]\n#           , 'algorithm': ['ball_tree', 'kd_tree', 'brute']\n#           , 'leaf_size': [1, 3, 5, 10, 15, 30]\n#           , 'weights': ['uniform', 'distance']\n#           , 'p': [1,2]\n#          }\n# knn = KNeighborsClassifier()\n# grid_imp = GridSearchCV(estimator=knn\n#                    , param_grid = params\n#                    , scoring = 'accuracy'\n#                    , n_jobs = -1\n#                    , cv = 3\n#                    , verbose = 0\n#                    )\n# grid_imp.fit(X_train[important_cols], y_train)\n\n# grid_all = GridSearchCV(estimator=knn\n#                    , param_grid = params\n#                    , scoring = 'accuracy'\n#                    , n_jobs = -1\n#                    , cv = 3\n#                    , verbose = 0\n#                    )\n# grid_all.fit(X_train, y_train)","fb091b36":"# def extract_params(output, params_dict):\n#     for key in params_dict.keys():\n#         output[key] = output.params.apply(lambda x: x[key])\n#     return output\n\n# for cols, model in [('Important_cols', grid_imp)\n#                    , ('All_cols', grid_all)\n#                    ]:\n#     print('='*10 + cols + '='*10)\n#     print('Best hyper-parameters found:')\n#     print(model.best_params_)\n#     print('\\nFitting time:')\n#     print(model.refit_time_)\n#     print('\\Best score:')\n#     print(round(model.best_score_,3))\n#     results = pd.DataFrame(model.cv_results_)\n#     results = results.sort_values(by=['rank_test_score'])\n\n\n#     results = extract_params(results, params)\n#     print(results[list(params.keys()) + ['mean_test_score']].head(10))\n#     print('='*30)\n    \n# ##### OUTPUT #######\n# ==========Important_cols==========\n# Best hyper-parameters found:\n# {'algorithm': 'ball_tree', 'leaf_size': 1, 'n_neighbors': 15, 'p': 2, 'weights': 'distance'}\n\n# Fitting time:\n# 0.05556893348693848\n# \\Best score:\n# 0.521\n#      n_neighbors  algorithm  leaf_size   weights  p  mean_test_score\n# 235           15    kd_tree         10  distance  2         0.520833\n# 187           15    kd_tree          3  distance  2         0.520833\n# 331           15      brute          3  distance  2         0.520833\n# 43            15  ball_tree          3  distance  2         0.520833\n# 163           15    kd_tree          1  distance  2         0.520833\n# 259           15    kd_tree         15  distance  2         0.520833\n# 355           15      brute          5  distance  2         0.520833\n# 307           15      brute          1  distance  2         0.520833\n# 211           15    kd_tree          5  distance  2         0.520833\n# 379           15      brute         10  distance  2         0.520833\n# ==============================\n# ==========All_cols==========\n# Best hyper-parameters found:\n# {'algorithm': 'ball_tree', 'leaf_size': 1, 'n_neighbors': 15, 'p': 2, 'weights': 'distance'}\n\n# Fitting time:\n# 0.10615134239196777\n# \\Best score:\n# 0.521\n#      n_neighbors  algorithm  leaf_size   weights  p  mean_test_score\n# 67            15  ball_tree          5  distance  2         0.520833\n# 355           15      brute          5  distance  2         0.520833\n# 163           15    kd_tree          1  distance  2         0.520833\n# 307           15      brute          1  distance  2         0.520833\n# 91            15  ball_tree         10  distance  2         0.520833\n# 19            15  ball_tree          1  distance  2         0.520833\n# 43            15  ball_tree          3  distance  2         0.520833\n# 379           15      brute         10  distance  2         0.520833\n# 187           15    kd_tree          3  distance  2         0.520833\n# 139           15  ball_tree         30  distance  2         0.520833\n# ==============================","f0f2bb9e":"knn = KNeighborsClassifier(n_neighbors = 15\n                          , algorithm = 'ball_tree'\n                          , leaf_size = 1\n                          , p = 2\n                          , weights = 'distance'\n                          )\nknn.fit(X_train[important_cols], y_train)","1d64e7b3":"predict = knn.predict(X_test[important_cols])","1fad6586":"output = pd.DataFrame({'Id': index_test\n                       ,'Cover_Type': predict\n                      })\noutput.to_csv('Submission.csv', index=False)","debf9362":"#### Important cols","3103483b":"### Distances & Elevation","6bd10667":"### Output for submission","eee2d1ad":"## Summary and Output","5df40a64":"### Rockiness","0becba20":"### Categorical","b20c7f0b":"# Other Features\n### Aspect, Slope & Shadow","6c01355d":"# Load Data","2a26fe1a":"# Impute \"Fake\" 0s","e78cee2c":"### Search params"}}