{"cell_type":{"075d483d":"code","74631a1b":"code","317744f6":"code","26a53d0e":"code","4ca16044":"code","2c0bca21":"code","209a9e33":"code","ba7d1f1f":"code","95a197e9":"code","5e253549":"code","a596d22a":"code","5bb687f1":"code","c760b5e6":"code","2f7e347f":"code","970490c6":"code","2b265881":"code","08ecbb7c":"code","43858108":"markdown","3b3b7391":"markdown","caaa23dd":"markdown"},"source":{"075d483d":"import os\nimport pandas as pd\nimport numpy as np\nimport librosa\nimport librosa.display\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport IPython.display\nimport math\nfrom tqdm.notebook import tqdm","74631a1b":"# \u8868\u8a18\u3086\u308c\u306e\u4fee\u6b63\u95a2\u6570\u3000\u3000https:\/\/www.kaggle.com\/ryoichi0917\/corrections-to-notation-errors-and-eda-for-meta?scriptVersionId=73926073&cellId=1\ndef meta_define():\n    \"\"\"\n    input : none\n    output : Corrected metadata\n    \"\"\"\n    import pandas as pd\n    import os \n    os.chdir(\"\/kaggle\/input\/hah-data-science-challenge\/\")\n    df_train = pd.read_csv(\"train.csv\", index_col=False)\n    df_test = pd.read_csv(\"test.csv\", index_col=False)\n    \n    ##################################################\n    #\u4ee5\u4e0b\u8f9e\u66f8\u3084\u5909\u6570\u306e\u5b9a\u7fa9\n    #\u5404\u30c7\u30fc\u30bf\u4fee\u6b63\u7528\u306e\u8f9e\u66f8\n    bolt_dict = {\n        '\u5927':\"big\",\n        '\u5c0f':\"small\"\n    }\n\n    plate_dict = {\n        '\u5927':\"big\",\n        '\u5c0f':\"small\"\n    }\n\n    record_dict = {\n        'PC\u5185\u81d3':\"pc_built_in\",\n        'PC\u5185\u8535':\"pc_built_in\",\n        'USB1':\"usb1\", \n        'USB2':\"usb2\", \n        'USB3':\"usb3\", \n        'USB4':\"usb4\", \n        '\u30b9\u30de\u30db':\"smart_phone\",\n        '\u30b9\u30de\u30db\u306e\u30dc\u30a4\u30b9\u30ec\u30b3\u30fc\u30c0':\"smart_phone\",\n        '\u5185\u8535\u30de\u30a4\u30af':\"pc_built_in\",\n        }\n\n    distance_dict = {\n        '10cm': 0.1, \n        '10\u339d': 0.1, \n        '1M': 1.0, \n        '20cm': 0.2, \n        '20\u339d': 0.2, \n        '2M': 2.0, \n        '2m': 2.0, \n        '30cm': 0.3, \n        '30cn': 0.3, \n        '30\u339d': 0.3, \n        '3m': 3.0, \n        '40cm': 0.4, \n        '40\u339d': 0.4, \n        '50cm': 0.5, \n        '50\u339d': 0.5, \n        '5cm': 0.05,\n        '8cm': 0.08, \n        '\uff11\uff2d': 1.0   \n    }\n\n    cvt_dict = {\n        \"\u306d\u3058\" : bolt_dict, \n        '\u30d7\u30ec\u30fc\u30c8' : plate_dict, \n        '\u9332\u97f3\u65b9\u6cd5' : record_dict, \n        '\u30de\u30a4\u30af\u8ddd\u96e2' : distance_dict\n    }\n    \n    #df_train\u65e5\u672c\u8a9e\u30ab\u30e9\u30e0\u540d : ['ID', '\u306d\u3058', '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2', '\u30d5\u30a1\u30a4\u30eb', 'Target']\n    col_train = ['id', 'bolt', 'plate', 'record', 'mic_dist', 'file', 'Target']\n    #df_test\u65e5\u672c\u8a9e\u30ab\u30e9\u30e0\u540d : ['ID', '\u306d\u3058', '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2', '\u30d5\u30a1\u30a4\u30eb', 'Target']\n    col_test = ['id', 'bolt', 'plate', 'record', 'mic_dist', 'file']\n    \n    tgt_col = [\"\u306d\u3058\", '\u30d7\u30ec\u30fc\u30c8', '\u9332\u97f3\u65b9\u6cd5', '\u30de\u30a4\u30af\u8ddd\u96e2']\n    ##################################################\n    \n    for col in tgt_col:#Target\u306f\u5909\u63db\u5bfe\u8c61\u5916\n        df_train[col] = df_train[col].map(cvt_dict[col])\n        df_test[col] = df_test[col].map(cvt_dict[col])\n        \n    df_train.columns = col_train\n    df_test.columns = col_test\n    \n    return df_train, df_test","317744f6":"# \u30c7\u30fc\u30bf\u8aad\u307f\u8fbc\u307f\ndf_train, df_test = meta_define()\n\n# flag \u3092\u4ed8\u4e0e\ndf_train['flag'] = 'train'\ndf_test['flag'] = 'test'\n\ndf_train.head()","26a53d0e":"df_test.head()","4ca16044":"#\u76ee\u8996\u3067\u767a\u898b\u3057\u305f\u7121\u97f3\u306b\u6e96\u3058\u308b\u30c7\u30fc\u30bfID\nincomplete_data_train =[\"train51\",#\u5b8c\u5168\u7121\u97f3\n                        \"train184\",#\u5b8c\u5168\u7121\u97f3\n                        \"train760\",#\u97f3\u306e\u9014\u4e2d\u304b\u3089\u59cb\u307e\u308a\u3001\u305d\u306e\u5f8c\u7121\u97f3\n                        \"train865\",#\u97f3\u306e\u9014\u4e2d\u304b\u3089\u59cb\u307e\u308a\u3001\u305d\u306e\u5f8c\u7121\u97f3\n                        \"train1122\",#\u5b8c\u5168\u7121\u97f3\n                        \"train1265\"#\u5b8c\u5168\u7121\u97f3\n                       ]\nincomplete_data_test = [\"test521\", \"test613\", \"test705\", \"test1559\", \"test2261\",\"test2494\", \"test3026\"]\n#\u76ee\u8996\u3067\u767a\u898b\u3057\u305f\u6b63\u5e38\u3068\u601d\u308f\u308c\u308b\u30c7\u30fc\u30bfID\ncomplete_data_train =[\"train114\",\"train201\",\"train325\", \"train766\",\"train1510\",\"train1786\"]","2c0bca21":"def calc_snr(wav):\n    \"\"\"\n    snr\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\n    moving_av_and_snr\u5185\u306b\u3066\u5229\u7528\n    \"\"\"\n    snr = wav.max()\/(wav.min()+1e-10)#\u30bc\u30ed\u9664\u7b97\u9632\u6b62\n    return snr\n\ndef moving_av_and_snr(wav, sr):\n    \"\"\"\n    \u79fb\u52d5\u5e73\u5747\u3068SNR\u3092\u8fd4\u3059\u95a2\u6570\n    \"\"\"\n    time_ax = np.linspace(0, len(y) * 1\/sr, len(y))\n    v = np.ones(int(sr\/10))\/int((sr\/10)) #\u4eca\u56de\u306f1\/10\u79d2\u306e\u79fb\u52d5\u5e73\u5747\u3092\u7b97\u51fa\n    y_moving_av = np.convolve(np.abs(wav), v, mode='same')\n    \n    snr = calc_snr(y_moving_av[int(sr\/10):-int(sr\/10)])\n    \n    \n    return y_moving_av, time_ax, snr\n\n","209a9e33":"silence_snr_list = []\n#\u7121\u97f3\u30c7\u30fc\u30bf\u3078\u306e\u9069\u7528\ndata_num = len(incomplete_data_train)\ncol_num  = 3 #\u53ef\u8996\u5316\u6642\u306e\u5217\u6570\nrow_num = math.ceil(data_num\/col_num)\n\nfig, axes = plt.subplots(row_num, col_num,figsize=(col_num*10, row_num*5))\n\nfor num, tgt_data in enumerate(incomplete_data_train):\n    r = math.ceil(((num+1)\/col_num))-1\n    c = (num % col_num)  \n    ax = axes[r, c]\n    \n    y, sr = librosa.core.load(f\"train\/train\/{tgt_data}.wav\", sr=None)\n    y = librosa.util.normalize(y)\n    \n    y_moving_av, time_ax, snr = moving_av_and_snr(y, sr)\n    \n    librosa.display.waveplot(y, sr, ax=ax)\n    ax.plot(time_ax, y_moving_av)\n    ax.set_title(f\"{tgt_data}_SNR:{round(snr, 2)}\")\n    silence_snr_list.append(snr)","ba7d1f1f":"sound_snr_list = []\n#\u97f3\u3042\u308a\u30c7\u30fc\u30bf\u3078\u306e\u9069\u7528\ndata_num = len(complete_data_train)\ncol_num  = 3 #\u53ef\u8996\u5316\u6642\u306e\u5217\u6570\nrow_num = math.ceil(data_num\/col_num)\n\nfig, axes = plt.subplots(row_num, col_num,figsize=(col_num*10, row_num*5))\n\nfor num, tgt_data in enumerate(complete_data_train):\n    r = math.ceil(((num+1)\/col_num))-1\n    c = (num % col_num)  \n    ax = axes[r, c]\n    \n    y, sr = librosa.core.load(f\"train\/train\/{tgt_data}.wav\", sr=None)\n    y = librosa.util.normalize(y)\n    \n    y_moving_av, time_ax, snr = moving_av_and_snr(y, sr)\n    \n    librosa.display.waveplot(y, sr, ax=ax)\n    ax.plot(time_ax, y_moving_av)\n    ax.set_title(f\"{tgt_data}_SNR:{round(snr, 2)}\")\n    sound_snr_list.append(snr)","95a197e9":"print(\"silence_snr.max :\", round(np.array(silence_snr_list).max(),2))\nprint(\"sound_snr_list.min :\", round(np.array(sound_snr_list).min(),2))\n#\u30b5\u30f3\u30d7\u30eb\u3057\u305f\u30c7\u30fc\u30bf\u3067\u306f\u97f3\u3042\u308a\u306esnr\u306e\u6700\u5c0f\u5024\u3088\u308a\u3082\u3001\u7121\u97f3\u306esnr\u306e\u6700\u5927\u5024\u306e\u65b9\u304c\u4f4e\u3044\u305f\u3081\u3001\u9069\u5207\u306b\u95be\u5024\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u5206\u5272\u3067\u304d\u305d\u3046\u3002","5e253549":"#\u8a13\u7df4\u30c7\u30fc\u30bf\u5168\u4f53\u306b\u5bfe\u3057\u3066\u9069\u7528\u3059\u308b\ndef add_snr_col(df):\n    df[\"snr\"] = \"\"\n    df[\"ImpactCount\"] = \"\"\n    if \"train\" in df[\"file\"][0]:\n        root = \"train\/train\"\n    else:\n        root = \"test\/test\"\n    print(root)\n    \n    for num in tqdm(range(len(df))):\n        f_name = df.iloc[num][\"file\"]\n        y, sr = librosa.core.load(os.path.join(root, f_name), sr=None)\n        y = librosa.util.normalize(y)\n        _, _, snr = moving_av_and_snr(y, sr)\n        df[\"snr\"][num] = snr\n    \n    return df","a596d22a":"df_train_snr = add_snr_col(df_train)","5bb687f1":"#snr\u306b\u3064\u3044\u3066\u7b2c1\u56db\u5206\u4f4d\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u3092\u53ef\u8996\u5316\nplt.hist(df_train_snr[df_train_snr.snr <= df_train_snr.snr.quantile(0.25)].snr, bins=50)\nplt.show()\n#\u660e\u78ba\u306a\u50be\u5411\u306f\u306a\u304f\u3001\u3042\u307e\u308a\u4e0a\u624b\u304f\u5225\u308c\u306a\u304b\u3063\u305f\u3002","c760b5e6":"#\u3048\u3044\u3084\u3067SNR<=5\u306e\u30c7\u30fc\u30bf\u3092\u7121\u97f3\u3068\u4eee\u5b9a\u3057\u3066\u53ef\u8996\u5316\ndf_train_snr_under5 = df_train_snr[df_train_snr.snr <= 5]\n#\u30c7\u30fc\u30bf\u5168\u4f53\u3092\u53ef\u8996\u5316\ndata_num = len(df_train_snr_under5)\ncol_num  = 5 #\u53ef\u8996\u5316\u6642\u306e\u5217\u6570\nrow_num = math.ceil(data_num\/col_num)\nfig, axes = plt.subplots(row_num, col_num,figsize=(col_num*10, row_num*5))\n\nfor num in tqdm(range(data_num)):\n    r = math.ceil(((num+1)\/col_num))-1\n    c = (num % col_num)  \n    ax = axes[r, c]\n    \n    f_name = df_train_snr_under5.iloc[num][\"file\"]\n    record = df_train_snr_under5.iloc[num][\"record\"]\n    y, sr = librosa.core.load(os.path.join(\"train\/train\", f_name), sr=None)\n    y = librosa.util.normalize(y)\n    \n    y_moving_av, time_ax, snr = moving_av_and_snr(y, sr)\n    librosa.display.waveplot(y, sr, ax=ax)\n    ax.plot(time_ax, y_moving_av)\n    ax.set_title(f\"{f_name}_recoed:{record}_SNR:{round(df_train_snr_under5.iloc[num]['snr'], 3)}\")\n#\u8aa4\u691c\u77e5\u3055\u308c\u3066\u3044\u308b\u306e\u306f\u6b86\u3069\u30b9\u30de\u30db\u306b\u3088\u308b\u9332\u97f3\n#SNR\u304c\u4f4e\u3044\u30c7\u30fc\u30bf\u306e\u4e2d\u306b\u3082\u3001\u6253\u97f3\u306e\u6210\u5206\u304c\u542b\u307e\u308c\u308b\u30c7\u30fc\u30bf\u304c\u5b58\u5728\u3002","2f7e347f":"#\u30bb\u30df\u30fb\u8749\u30fb\u305b\u307f.semi...!\nwav,sr=librosa.load(os.path.join(\"train\/train\", \"train969.wav\"), sr=None)\nIPython.display.Audio(wav,rate=sr)","970490c6":"#\u30bb\u30df\u30fb\u8749\u30fb\u305b\u307f.semi...!\nwav,sr=librosa.load(os.path.join(\"train\/train\", \"train2323.wav\"), sr=None)\nIPython.display.Audio(wav,rate=sr)","2b265881":"#\u53cd\u97ff\u3057\u3066\u304a\u308a\u3001\u30ce\u30a4\u30ba\u304c\u4e0b\u304c\u308a\u304d\u3063\u3066\u3044\u306a\u3044\u30d1\u30bf\u30fc\u30f3(\u7570\u5e38\u97f3\uff1f)\nwav,sr=librosa.load(os.path.join(\"train\/train\", \"train2052.wav\"), sr=None)\nIPython.display.Audio(wav,rate=sr)","08ecbb7c":"#\u30bb\u30df\u30fb\u8749\u30fb\u305b\u307f.semi...!\nwav,sr=librosa.load(os.path.join(\"train\/train\", \"train2498.wav\"), sr=None)\nIPython.display.Audio(wav,rate=sr)","43858108":"# \u30c7\u30fc\u30bf\u306e\u6e96\u5099","3b3b7391":"# \u7121\u97f3\u30c7\u30fc\u30bf\u306e\u8b58\u5225\n\u5b66\u7fd2\u6642\u306b\u30ce\u30a4\u30ba\u3068\u306a\u308b\u3068\u601d\u308f\u308c\u308b\u7121\u97f3\u306e\u30c7\u30fc\u30bf\u3092\u9664\u5916\u3059\u308b\u305f\u3081\u3001\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3067\u8b58\u5225\u3092\u8a66\u307f\u308b\u3002**(\u304c\u3042\u307e\u308a\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002)**\n\n- \u751f\u6ce2\u5f62\u306b\u5bfe\u3057\u3066**\u79fb\u52d5\u5e73\u5747**\u3092\u3068\u308a\u3001\u305d\u306e**\u300c\u6700\u9ad8\u5024\/\u6700\u4f4e\u5024(\u4ee5\u4e0b:SNR)\u300d**\u304c\u4e00\u5b9a\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u3092\u7121\u97f3\u30c7\u30fc\u30bf\u3068\u307f\u306a\u3059\u3002\n- **\u30b9\u30de\u30db\u306e\u30de\u30a4\u30af\u306b\u3088\u3063\u3066\u9332\u97f3\u3055\u308c\u3066\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u30ce\u30a4\u30ba\u30ec\u30d9\u30eb\u304c\u9ad8\u3044\u30c7\u30fc\u30bf\u304c\u3042\u308a**\u3001SNR\u304c\u4f4e\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u3001\u6253\u97f3\u304c\u5165\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u8aa4\u3063\u3066\u691c\u77e5\u3002\n- \u5b9f\u969b\u306b\u97f3\u3092\u805e\u3044\u3066\u307f\u308b\u3068\u3001\u3001\u3001***\u8749\u306e\u9cf4\u304d\u58f0\u3067\u3057\u305f***\u30fb\u30fb\u30fb\u3002\uff08\u3048\u3048\u3048...\u3002\u3069\u3046\u3057\u3088\u3046...\u3002\uff09","caaa23dd":"# \u79fb\u52d5\u5e73\u5747\u306b\u3088\u308b\u8b58\u5225"}}