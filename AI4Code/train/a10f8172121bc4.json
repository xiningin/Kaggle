{"cell_type":{"7f40f056":"code","6dc614d6":"code","810134a2":"code","282c8304":"code","e4fd7154":"code","0899503c":"code","d096f109":"code","283eabf1":"code","918a784e":"code","86b2b508":"code","0e8ea2dd":"code","0ff14698":"code","598f95fd":"code","c18cf619":"code","4e86c520":"code","36483cae":"code","77caee5e":"code","fd2d8843":"code","cdd4172a":"code","525d76c1":"code","6688244d":"code","a584ca34":"code","3a175035":"code","164d5797":"code","97e217df":"code","4e118317":"code","d6ead421":"code","3e031025":"code","c22684cc":"markdown","c31d91b2":"markdown","7fd48fba":"markdown","9a9d6ea2":"markdown","09c1adcd":"markdown","73db7095":"markdown","206b8775":"markdown","d757837a":"markdown","732d2120":"markdown","098954e2":"markdown","33e3cb8b":"markdown","c2d1eca3":"markdown","0c42e6e4":"markdown","1be5e175":"markdown","5f8b5f96":"markdown","bb4a02cc":"markdown","caf4444f":"markdown","5100eed6":"markdown","8cb3c38b":"markdown","da07884e":"markdown","53812562":"markdown","cb0aac3c":"markdown","a85d3f75":"markdown","f5dd42fe":"markdown","5d1b18a4":"markdown"},"source":{"7f40f056":"import os, glob\nimport random\nfrom sklearn.model_selection import train_test_split\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport multiprocessing\nfrom copy import deepcopy\nfrom sklearn.metrics import precision_recall_curve, auc\nimport keras\nimport keras.backend as K\nfrom keras.optimizers import Adam\nfrom keras.callbacks import Callback\nfrom keras.applications.densenet import DenseNet201\nfrom keras.layers import Dense, Flatten\nfrom keras.models import Model, load_model\nfrom keras.utils import Sequence\nfrom albumentations import Compose, VerticalFlip, HorizontalFlip, Rotate, GridDistortion\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\nfrom tqdm import tqdm_notebook as tqdm\nfrom numpy.random import seed\nseed(10)\nfrom tensorflow import set_random_seed\nset_random_seed(10)\n%matplotlib inline","6dc614d6":"!pip install keras-rectified-adam","810134a2":"print(os.listdir(\"..\/input\/severstal-steel-defect-detection\/\"))\nstart = '..\/input\/severstal-steel-defect-detection\/'\ntest_imgs_folder = start + 'test_images\/'\ntrain_imgs_folder = start + 'train_images\/'\nnum_cores = multiprocessing.cpu_count()","282c8304":"train_df = pd.read_csv(start + 'train.csv')\ntrain_df.head()","e4fd7154":"train_df = train_df[~train_df['EncodedPixels'].isnull()]\ntrain_df['Image'] = train_df['ImageId_ClassId'].map(lambda x: x.split('_')[0])\ntrain_df['Class'] = train_df['ImageId_ClassId'].map(lambda x: x.split('_')[1])\nclasses = train_df['Class'].unique()\ntrain_df = train_df.groupby('Image')['Class'].agg(set).reset_index()\nfor class_name in classes:\n    train_df[class_name] = train_df['Class'].map(lambda x: 1 if class_name in x else 0)\ntrain_df.head()","0899503c":"# dictionary for fast access to ohe vectors\nimg_2_ohe_vector = {img:vec for img, vec in zip(train_df['Image'], train_df.iloc[:, 2:].values)}","d096f109":"train_imgs, val_imgs = train_test_split(train_df['Image'].values, \n                                        test_size=0.2, \n#                                         stratify=train_df['Class'].map(lambda x: str(sorted(list(x)))), # sorting present classes in lexicographical order, just to be sure\n                                        random_state=2019)","283eabf1":"class DataGenenerator(Sequence):\n    def __init__(self, images_list=None, folder_imgs=train_imgs_folder, \n                 batch_size=16, shuffle=True, augmentation=None,\n                 resized_height=256, resized_width=256, num_channels=3):\n        self.batch_size = batch_size\n        self.shuffle = shuffle\n        self.augmentation = augmentation\n        if images_list is None:\n            self.images_list = os.listdir(folder_imgs)\n        else:\n            self.images_list = deepcopy(images_list)\n        self.folder_imgs = folder_imgs\n        self.len = len(self.images_list) \/\/ self.batch_size\n        self.resized_height = resized_height\n        self.resized_width = resized_width\n        self.num_channels = num_channels\n        self.num_classes = 4\n        self.is_test = not 'train' in folder_imgs\n        if not shuffle and not self.is_test:\n            self.labels = [img_2_ohe_vector[img] for img in self.images_list[:self.len*self.batch_size]]\n\n    def __len__(self):\n        return self.len\n    \n    def on_epoch_start(self):\n        if self.shuffle:\n            random.shuffle(self.images_list)\n\n    def __getitem__(self, idx):\n        current_batch = self.images_list[idx * self.batch_size: (idx + 1) * self.batch_size]\n        X = np.empty((self.batch_size, self.resized_height, self.resized_width, self.num_channels))\n        y = np.empty((self.batch_size, self.num_classes))\n\n        for i, image_name in enumerate(current_batch):\n            path = os.path.join(self.folder_imgs, image_name)\n            img = cv2.resize(cv2.imread(path), (self.resized_height, self.resized_width)).astype(np.float32)\n            if not self.augmentation is None:\n                augmented = self.augmentation(image=img)\n                img = augmented['image']\n            X[i, :, :, :] = img\/255.0\n            if not self.is_test:\n                y[i, :] = img_2_ohe_vector[image_name]\n        return X, y\n\n    def get_labels(self):\n        if self.shuffle:\n            images_current = self.images_list[:self.len*self.batch_size]\n            labels = [img_2_ohe_vector[img] for img in images_current]\n        else:\n            labels = self.labels\n        return np.array(labels)","918a784e":"albumentations_train = Compose([\n    VerticalFlip(), HorizontalFlip(), Rotate(limit=10), GridDistortion()\n], p=1)","86b2b508":"data_generator_train = DataGenenerator(train_imgs, augmentation=albumentations_train)\ndata_generator_train_eval = DataGenenerator(train_imgs, shuffle=False)\ndata_generator_val = DataGenenerator(val_imgs, shuffle=False)","0e8ea2dd":"class PrAucCallback(Callback):\n    def __init__(self, data_generator, num_workers=num_cores, \n                 early_stopping_patience=5, \n                 plateau_patience=3, reduction_rate=0.5,\n                 stage='train', checkpoints_path='checkpoints\/'):\n        super(Callback, self).__init__()\n        self.data_generator = data_generator\n        self.num_workers = num_workers\n        self.class_names = ['1', '2', '3', '4']\n        self.history = [[] for _ in range(len(self.class_names) + 1)] # to store per each class and also mean PR AUC\n        self.early_stopping_patience = early_stopping_patience\n        self.plateau_patience = plateau_patience\n        self.reduction_rate = reduction_rate\n        self.stage = stage\n        self.best_pr_auc = -float('inf')\n        if not os.path.exists(checkpoints_path):\n            os.makedirs(checkpoints_path)\n        self.checkpoints_path = checkpoints_path\n        \n    def compute_pr_auc(self, y_true, y_pred):\n        pr_auc_mean = 0\n        print(f\"\\n{'#'*30}\\n\")\n        for class_i in range(len(self.class_names)):\n            precision, recall, _ = precision_recall_curve(y_true[:, class_i], y_pred[:, class_i])\n            pr_auc = auc(recall, precision)\n            pr_auc_mean += pr_auc\/len(self.class_names)\n            print(f\"PR AUC {self.class_names[class_i]}, {self.stage}: {pr_auc:.3f}\\n\")\n            self.history[class_i].append(pr_auc)        \n        print(f\"\\n{'#'*20}\\n PR AUC mean, {self.stage}: {pr_auc_mean:.3f}\\n{'#'*20}\\n\")\n        self.history[-1].append(pr_auc_mean)\n        return pr_auc_mean\n              \n    def is_patience_lost(self, patience):\n        if len(self.history[-1]) > patience:\n            best_performance = max(self.history[-1][-(patience + 1):-1])\n            return best_performance == self.history[-1][-(patience + 1)] and best_performance >= self.history[-1][-1]    \n              \n    def early_stopping_check(self, pr_auc_mean):\n        if self.is_patience_lost(self.early_stopping_patience):\n            self.model.stop_training = True    \n              \n    def model_checkpoint(self, pr_auc_mean, epoch):\n        if pr_auc_mean > self.best_pr_auc:\n            # remove previous checkpoints to save space\n            for checkpoint in glob.glob(os.path.join(self.checkpoints_path, 'classifier_densenet169_epoch_*')):\n                os.remove(checkpoint)\n            self.best_pr_auc = pr_auc_mean\n            self.model.save(os.path.join(self.checkpoints_path, f'classifier_densenet169_epoch_{epoch}_val_pr_auc_{pr_auc_mean}.h5'))              \n            print(f\"\\n{'#'*20}\\nSaved new checkpoint\\n{'#'*20}\\n\")\n              \n    def reduce_lr_on_plateau(self):\n        if self.is_patience_lost(self.plateau_patience):\n            new_lr = float(keras.backend.get_value(self.model.optimizer.lr)) * self.reduction_rate\n            keras.backend.set_value(self.model.optimizer.lr, new_lr)\n            print(f\"\\n{'#'*20}\\nReduced learning rate to {new_lr}.\\n{'#'*20}\\n\")\n        \n    def on_epoch_end(self, epoch, logs={}):\n        y_pred = self.model.predict_generator(self.data_generator, workers=self.num_workers)\n        y_true = self.data_generator.get_labels()\n        # estimate AUC under precision recall curve for each class\n        pr_auc_mean = self.compute_pr_auc(y_true, y_pred)\n              \n        if self.stage == 'val':\n            # early stop after early_stopping_patience=4 epochs of no improvement in mean PR AUC\n            self.early_stopping_check(pr_auc_mean)\n\n            # save a model with the best PR AUC in validation\n            self.model_checkpoint(pr_auc_mean, epoch)\n\n            # reduce learning rate on PR AUC plateau\n            self.reduce_lr_on_plateau()            \n        \n    def get_pr_auc_history(self):\n        return self.history","0ff14698":"train_metric_callback = PrAucCallback(data_generator_train_eval)\nval_callback = PrAucCallback(data_generator_val, stage='val')","598f95fd":"from keras.losses import binary_crossentropy\ndef dice_coef(y_true, y_pred, smooth=1):\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = K.sum(y_true_f * y_pred_f)\n    return (2. * intersection + smooth) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n\ndef dice_loss(y_true, y_pred):\n    smooth = 1.\n    y_true_f = K.flatten(y_true)\n    y_pred_f = K.flatten(y_pred)\n    intersection = y_true_f * y_pred_f\n    score = (2. * K.sum(intersection) + smooth) \/ (K.sum(y_true_f) + K.sum(y_pred_f) + smooth)\n    return 1. - score\n\ndef bce_dice_loss(y_true, y_pred):\n    return binary_crossentropy(y_true, y_pred) + dice_loss(y_true, y_pred)","c18cf619":"!pip install -U git+https:\/\/github.com\/qubvel\/efficientnet","4e86c520":"import efficientnet.keras as efn \ndef get_model():\n    K.clear_session()\n    base_model =  efn.EfficientNetB4(weights='imagenet', include_top=False, pooling='avg', input_shape=(256, 256, 3))\n    x = base_model.output\n    y_pred = Dense(4, activation='sigmoid')(x)\n    return Model(inputs=base_model.input, outputs=y_pred)\n\nmodel = get_model()","36483cae":"from keras_radam import RAdam","77caee5e":"for base_layer in model.layers[:-5]:\n    base_layer.trainable = False\n    \nmodel.compile(optimizer=RAdam(warmup_proportion=0.1, min_lr=1e-5), loss=bce_dice_loss)\nhistory_0 = model.fit_generator(generator=data_generator_train,\n                              validation_data=data_generator_val,\n                              epochs=30,\n                              callbacks=[train_metric_callback, val_callback],\n                              workers=num_cores,\n                              verbose=1\n                             )","fd2d8843":" for base_layer in model.layers[:-1]:\n    base_layer.trainable = True\n    \nmodel.compile(optimizer=RAdam(warmup_proportion=0.1, min_lr=1e-5), loss=bce_dice_loss)\nhistory_1 = model.fit_generator(generator=data_generator_train,\n                               validation_data=data_generator_val,\n                               epochs=20,\n                               callbacks=[train_metric_callback, val_callback],\n                             workers=num_cores,\n                               verbose=1,\n                               initial_epoch=1\n                              )","cdd4172a":"def plot_with_dots(ax, np_array):\n    ax.scatter(list(range(1, len(np_array) + 1)), np_array, s=50)\n    ax.plot(list(range(1, len(np_array) + 1)), np_array)","525d76c1":"pr_auc_history_train = train_metric_callback.get_pr_auc_history()\npr_auc_history_val = val_callback.get_pr_auc_history()\n\nplt.figure(figsize=(10, 7))\nplot_with_dots(plt, pr_auc_history_train[-1])\nplot_with_dots(plt, pr_auc_history_val[-1])\n\nplt.xlabel('Epoch', fontsize=15)\nplt.ylabel('Mean PR AUC', fontsize=15)\nplt.legend(['Train', 'Val'])\nplt.title('Training and Validation PR AUC', fontsize=20)\nplt.savefig('pr_auc_hist.png')","6688244d":"plt.figure(figsize=(10, 7))\nplot_with_dots(plt, history_0.history['loss']+history_1.history['loss'])\nplot_with_dots(plt, history_0.history['val_loss']+history_1.history['val_loss'])\n\nplt.xlabel('Epoch', fontsize=15)\nplt.ylabel('Binary Crossentropy', fontsize=15)\nplt.legend(['Train', 'Val'])\nplt.title('Training and Validation Loss', fontsize=20)\nplt.savefig('loss_hist.png')","a584ca34":"class_names = ['1', '2', '3', '4']\ndef get_threshold_for_recall(y_true, y_pred, class_i, recall_threshold=0.94, precision_threshold=0.94, plot=False):\n    precision, recall, thresholds = precision_recall_curve(y_true[:, class_i], y_pred[:, class_i])\n    i = len(thresholds) - 1\n    best_recall_threshold = None\n    while best_recall_threshold is None:\n        next_threshold = thresholds[i]\n        next_recall = recall[i]\n        if next_recall >= recall_threshold:\n            best_recall_threshold = next_threshold\n        i -= 1\n        \n    # consice, even though unnecessary passing through all the values\n    best_precision_threshold = [thres for prec, thres in zip(precision, thresholds) if prec >= precision_threshold][0]\n    \n    if plot:\n        plt.figure(figsize=(10, 7))\n        plt.step(recall, precision, color='r', alpha=0.3, where='post')\n        plt.fill_between(recall, precision, alpha=0.3, color='r')\n        plt.axhline(y=precision[i + 1])\n        recall_for_prec_thres = [rec for rec, thres in zip(recall, thresholds) \n                                 if thres == best_precision_threshold][0]\n        plt.axvline(x=recall_for_prec_thres, color='g')\n        plt.xlabel('Recall')\n        plt.ylabel('Precision')\n        plt.ylim([0.0, 1.05])\n        plt.xlim([0.0, 1.0])\n        plt.legend(['PR curve', \n                    f'Precision {precision[i + 1]: .2f} corresponding to selected recall threshold',\n                    f'Recall {recall_for_prec_thres: .2f} corresponding to selected precision threshold'])\n        plt.title(f'Precision-Recall curve for Class {class_names[class_i]}')\n    return best_recall_threshold, best_precision_threshold\n\ny_pred = model.predict_generator(data_generator_val, workers=num_cores)\ny_true = data_generator_val.get_labels()\nrecall_thresholds = dict()\nprecision_thresholds = dict()\nfor i, class_name in tqdm(enumerate(class_names)):\n    recall_thresholds[class_name], precision_thresholds[class_name] = get_threshold_for_recall(y_true, y_pred, i, plot=True)","3a175035":"data_generator_test = DataGenenerator(folder_imgs=test_imgs_folder, shuffle=False)\ny_pred_test = model.predict_generator(data_generator_test, workers=num_cores)","164d5797":"image_labels_empty = set()\nfor i, (img, predictions) in enumerate(zip(os.listdir(test_imgs_folder), y_pred_test)):\n    for class_i, class_name in enumerate(class_names):\n        if predictions[class_i] < recall_thresholds[class_name]:\n            image_labels_empty.add(f'{img}_{class_name}')","97e217df":"submission = pd.read_csv(start + 'sample_submission.csv')\nsubmission.head()","4e118317":"predictions_nonempty = set(submission.loc[~submission['EncodedPixels'].isnull(), 'ImageId_ClassId'].values)","d6ead421":"print(f'{len(image_labels_empty.intersection(predictions_nonempty))} masks would be removed')","3e031025":"#removing masks\nsubmission.loc[submission['ImageId_ClassId'].isin(image_labels_empty), 'EncodedPixels'] = np.nan\nsubmission.to_csv('submission.csv', index=None)","c22684cc":"# Intro\nIn this notebook I'd create a classifier to distinguish types of cloud formations. Using this classifier I'd check if it improves currently the best LB score from the great [public notebook by Jan](https:\/\/www.kaggle.com\/jpbremer\/efficient-net-b4-unet-clouds). ","c31d91b2":"Estimating set of images without masks.","7fd48fba":"# Data Generators","9a9d6ea2":"## Visualizing train and val PR AUC","09c1adcd":"Segmentation results:","73db7095":"# Post-processing segmentation submission","206b8775":"After unfreezing all the layers I set a less aggressive initial learning rate and train until early stopping (or 100 epochs max).","d757837a":"## Stratified split into train\/val","732d2120":"# Libraries","098954e2":"Callback instances","33e3cb8b":"## Fine-tuning the whole model","c2d1eca3":"**this kernel was forked from here : https:\/\/www.kaggle.com\/samusram\/cloud-classifier-for-post-processing?scriptVersionId=20265194\n\n","0c42e6e4":"Generator instances","1be5e175":"# Selecting postprocessing thresholds","5f8b5f96":"The callback would be used:\n1. to estimate AUC under precision recall curve for each class,\n2. to early stop after 5 epochs of no improvement in mean PR AUC,\n3. save a model with the best PR AUC in validation,\n4. to reduce learning rate on PR AUC plateau.","bb4a02cc":"## Defining a model","caf4444f":"# Future work\n1. estimate distribution of classes in test set using the classifier. Then, if necessary and doable, modify val set accordingly,\n2. use the classifier with explainability technique [Gradient-weighted Class Activation Mapping](http:\/\/gradcam.cloudcv.org\/) to generate a baseline, (please see [GradCAM: extracting masks from classifier](https:\/\/www.kaggle.com\/samusram\/gradcam-extracting-masks-from-classifier)),\n3. improve the classifier,\n4. use the classifier as backbone for UNet-like solution.","5100eed6":"## Initial tuning of the added fully-connected layer","8cb3c38b":"# Classifier","da07884e":"## Generator class","53812562":"Predicting cloud classes for test.","cb0aac3c":"# Plan\n1. [Libraries](#Libraries)\n2. [Data Generators](#Data-Generators)\n  * [One-hot encoding classes](#One-hot-encoding-classes)\n  * [Stratified split into train\/val](#Stratified-split-into-train\/val)\n  * [Generator class](#Generator-class)\n3. [PR-AUC-based Callback](#PR-AUC-based-Callback)\n4. [Classifier](#Classifier)\n  * [Defining a model](#Defining-a-model)\n  * [Initial tuning of the added fully-connected layer](#Initial-tuning-of-the-added-fully-connected-layer)\n  * [Fine-tuning the whole model](#Fine-tuning-the-whole-model)\n  * [Visualizing train and val PR AUC](#Visualizing-train-and-val-PR-AUC)\n5. [Selecting postprocessing thresholds](#Selecting-postprocessing-thresholds)\n6. [Post-processing segmentation submission](#Post-processing-segmentation-submission)\n7. [Future work](#Future-work)","a85d3f75":"I left the model to train longer on my local GPU. I then upload the best model and plots from the model training.","f5dd42fe":"# PR-AUC-based Callback","5d1b18a4":"## One-hot encoding classes"}}