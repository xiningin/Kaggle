{"cell_type":{"aee0d36a":"code","8d8ca984":"code","e14b6c13":"code","cb8548df":"code","de81ba29":"code","96ae06dd":"code","f9dde334":"code","3a763318":"code","badc103f":"code","9adb9b6e":"code","7b07899f":"code","c8651b6e":"code","fd963848":"code","00193529":"code","235ddbe0":"code","c3d52580":"code","3c6917eb":"code","bbc89959":"code","ba54a630":"code","e95cc8c9":"code","90d2d9fc":"code","247ad73e":"code","c0f4b446":"code","b1de26ba":"code","96b681ec":"code","7242b201":"markdown","7a18643e":"markdown","5fa76e62":"markdown","991c3b1d":"markdown","a506eefb":"markdown","0b7662e1":"markdown","fa9e4b6f":"markdown","8b913335":"markdown","685f4978":"markdown","0c1b3170":"markdown","9f876d7e":"markdown","4adf388a":"markdown","2fd652aa":"markdown","abcf1c28":"markdown","b007c62d":"markdown","83a8953e":"markdown","7dd60482":"markdown","51752b31":"markdown","79716d6f":"markdown","fb9d8ac5":"markdown","6213305c":"markdown","10a76ce8":"markdown","54445acb":"markdown","987f23c6":"markdown","ca6153e2":"markdown","dfdb2870":"markdown","63da8480":"markdown","6d95a124":"markdown","b54031e5":"markdown","c795777f":"markdown","cd8d35c7":"markdown","ab4e9058":"markdown","49865c26":"markdown","3806da00":"markdown","ed7b271d":"markdown","95f7b795":"markdown","4ae90e36":"markdown","fc44d267":"markdown"},"source":{"aee0d36a":"import pandas as pd\nimport numpy as np\n\nimport matplotlib.pyplot as plt\nimport matplotlib\nimport seaborn as sns\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(action='ignore', category=UserWarning)\nsns.set(style=\"white\")\n\n\nimport plotly\nimport plotly.graph_objects as go\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport plotly.figure_factory as ff\n\nfrom plotly.offline import plot, iplot, init_notebook_mode\ninit_notebook_mode(connected=True)\n\ndf = pd.read_csv('..\/input\/telco-customer-churn\/WA_Fn-UseC_-Telco-Customer-Churn.csv')","8d8ca984":"df.head()","e14b6c13":"df.tail()","cb8548df":"df.isnull().sum()","de81ba29":"df['TotalCharges'] = df['TotalCharges'].str.replace(' ', '0').astype('float32')","96ae06dd":"fig = go.Figure(data=[go.Pie(labels=['No churn', 'Churn'],\n                             values=df['Churn'].value_counts().values)])\n\nfig.update_traces(textinfo='value', textfont_size=20,\n                  marker=dict(colors=['lime', 'khaki'], \n                  line=dict(color='black', width=3)))\n\nfig.update_layout(\n    height=600, width=600, title_text='Churn and no churn - Pie chart',\n    xaxis_title='number of songs', yaxis_title='artist', title_x = 0.5,\n    \n    font=dict(\n            family=\"Times New Roman\",\n            size=18,\n            color=\"black\"),\n    \n    legend=dict(\n            orientation=\"h\",\n            yanchor=\"bottom\",\n            y=-0.2,\n            xanchor=\"right\",\n            x=0.75)\n)\n\nfig","f9dde334":"df.info()","3a763318":"def kde_plot(column_name, data_frame=df):\n            \n    \"\"\"arguments: column_name:str type, \n                  dataframe:pandas Data Frame\n       returns: kde plot object\"\"\"\n    \n    #  in case when type is not str\n    if type(column_name) != str:\n        raise ValueError(f'Expected str type, got: {type(column_name)}')\n    \n    #  in case when type is correct but colum is not in data frame\n    if column_name not in data_frame.columns:\n        raise ValueError('column not in DataFrame!')\n    \n    churn = data_frame[data_frame['Churn'] == 'Yes']\n    no_churn = data_frame[data_frame['Churn'] == 'No']\n\n    fig  = ff.create_distplot([churn[column_name], no_churn[column_name]], group_labels = ['Churn', 'No Churn'],\n                              bin_size = 7, show_hist=False, show_rug=False, \n                              colors=['rgb(0, 0, 101)','rgb(0,200,200)' ])\n    fig.update_layout(width=800, height=400,\n                     title=dict(text=f'KDE for {column_name}', x=0.5),\n                     font=dict(family='Times New Roman', size=14),\n                     legend=dict(bgcolor='lightblue', borderwidth=3),\n                      plot_bgcolor='white'\n                     )\n    fig.update_xaxes(showgrid=False, showline=True, linewidth=2, linecolor='black')\n    fig.update_yaxes(showgrid=False, showline=True, linewidth=2, linecolor='black')\n    fig.show()\n\n    \ncolumns_to_plot = ['tenure', 'MonthlyCharges', 'TotalCharges']\n\nfor column in columns_to_plot:\n    kde_plot(column)","badc103f":"def ecdf_plot(column_name:str, data_frame=df, color='Churn'):\n    \"\"\"arguments: column_name(str type), \n                  data_frame:pandas DataFrame ,\n                  color:str type - default Churn\n       returns: ecdf plot object\"\"\"\n    \n    #  in case when type is not str\n    if type(column_name) != str:\n        raise ValueError(f'Expected str type, got: {type(column_name)}')\n    \n    #  in case when type is correct but colum is not in data frame\n    if column_name not in data_frame.columns or color not in data_frame.columns:\n        raise ValueError('column not in DataFrame!')\n    \n    fig = px.ecdf(df, column_name, color=color,\n                 color_discrete_sequence=['rgb(0, 0, 101)','rgb(0,200,200)' ])\n    \n    fig.update_layout(width=800, height=400,\n                     title=dict(text=f'{column_name}', x=0.5),\n                     font=dict(family='Times New Roman', size=14),\n                     legend=dict(bgcolor='lightblue', borderwidth=3),\n                      plot_bgcolor='white')\n    \n    \n    fig.show()\n    \n\nfor column in columns_to_plot:\n    ecdf_plot(column)","9adb9b6e":"fig = px.scatter(df, x='TotalCharges', y='tenure', color='Churn',\n          width=600, height=450, color_discrete_sequence=['khaki', 'lime'])\n\nfig.update_layout(title=dict(text='Total charges and tenure', x=0.5),\n                            font=dict(family='Times New Roman', size=18),\n                 plot_bgcolor='white')\n\nfig.show()\n\nfig = px.scatter(df, x='MonthlyCharges', y='tenure', color='Churn',\n          width=600, height=450,color_discrete_sequence=['khaki', 'lime'])\n\nfig.update_layout(title=dict(text='Monthly Charges and tenure', x=0.5),\n                            font=dict(family='Times New Roman', size=18),\n                 plot_bgcolor='white')\n\nfig.show()","7b07899f":"df['total_charges_to_tenure_ratio'] = df['TotalCharges'] \/ df['tenure']\ndf['monthly_charges_diff'] = df['MonthlyCharges'] - df['total_charges_to_tenure_ratio']\ndf['monthly_charges_diff'] = np.nan_to_num(df['monthly_charges_diff'])\nkde_plot('monthly_charges_diff')","c8651b6e":"map_table = {1: 'Yes',\n            0: 'No'}\ndf['SeniorCitizen'] = df['SeniorCitizen'].map(map_table)","fd963848":"def percentage_barplot(column_name:str, data_frame=df, churn_column='Churn', orientation='v'):\n    \"\"\"arguments: column_name:str, \n                  data_frame:pandas DataFrame, \n                  churn_colum:str default Churn,  \n                  orientation:str - defaul v(vertical), \n                              set h to change to horizontal\n                  \n        returns: bar plot grouped by column_name \n                 arg and churn\"\"\"\n    \n        #  in case when type is not str\n    if type(column_name) != str or type(churn_column) != str or type(orientation) != str:\n        raise ValueError(f'Expected str type, got: {type(column_name)}')\n    \n    #  in case when type is correct but colum is not in data frame\n    if column_name not in data_frame.columns or churn_column not in data_frame:\n        raise ValueError('column not in DataFrame!')\n        \n    group_by_churn_and_column_name = data_frame.groupby([column_name, churn_column]).count().reset_index()[[column_name, churn_column,'customerID']]\n    group_by_churn_and_column_name.rename(columns={'customerID': 'count'}, inplace=True)\n    group_by_churn_and_column_name['percentage'] = group_by_churn_and_column_name['count'].apply(lambda count: count \/ df.shape[0] * 100 )\n    \n    #  if orientation is not v or h\n    if orientation not in ['v', 'h']:\n        raise ValueError('Choose vertical: v or horizontal: h orientation!')\n    if orientation == 'v': \n        fig = px.bar(group_by_churn_and_column_name, x=column_name, y='percentage',\n            color='Churn', color_discrete_sequence = ['khaki', 'lime'],barmode='group')\n        fig.update_layout(yaxis=dict(ticksuffix='%'))\n        \n\n    else:\n        ytick_label='%'\n        fig = px.bar(group_by_churn_and_column_name, y=column_name, x='percentage',\n            color='Churn', color_discrete_sequence = ['khaki', 'lime'],barmode='group',\n                    )\n        fig.update_layout(xaxis=dict(ticksuffix = '%'))\n        \n    \n    \n    fig.update_layout(width=500, height=600,font=dict(family='Times New Roman', size=14),\n                 title=dict(font=dict(size=22), \n                            text=f'{column_name}',x=.5,), \n                  plot_bgcolor='white', \n                  legend=dict(bgcolor='white', borderwidth=3,title = 'Churn:')\n                  )\n\n\n    fig.show()","00193529":"percentage_barplot('SeniorCitizen')","235ddbe0":"df['ChurnRate'] = df['Churn'].replace('Yes', 1).replace('No', 0)\ng = sns.FacetGrid(df, col='SeniorCitizen', height=4, aspect=1,\n                 sharex=False, sharey=False, ylim=(0,0.5))\ng.map(sns.barplot, 'gender', 'ChurnRate')\ng.set_axis_labels('gender', 'churn rate')\ng.set_titles(col_template='Senior: {col_name}')\nplt.show()","c3d52580":"percentage_barplot('InternetService',orientation='h')","3c6917eb":"percentage_barplot('Partner', orientation='h')","bbc89959":"percentage_barplot('Dependents', orientation='h')","ba54a630":"percentage_barplot('MultipleLines', orientation='h')","e95cc8c9":"fig = px.violin(df, x='MultipleLines', y='MonthlyCharges', color='Churn',\n         color_discrete_sequence=['rgb(0, 0, 101)','rgb(0,200,200)'],box=True )\nfig.update_layout(width=800, height=400,\n                 title=dict(text= 'MultipleLines and churn',x=0.5, \n                           font=dict(size=24)),\n                 font=dict(family='Times New Roman', size=14),\n                 legend=dict(bgcolor='lightblue', borderwidth=3),\n                 plot_bgcolor='white')\n\nfig","90d2d9fc":"columns_to_plot = ['OnlineSecurity', 'OnlineBackup', 'DeviceProtection', 'TechSupport',\n                   'StreamingTV', 'StreamingMovies']\ncustomers_with_internet = df[df['InternetService'] != 'No']\nfor column in columns_to_plot:\n    percentage_barplot(column, data_frame=customers_with_internet)","247ad73e":"g = sns.FacetGrid(data=df, col='PaperlessBilling', aspect=1.5)\ng.map(sns.barplot, 'Contract', 'ChurnRate')\ng.set_titles(col_template='Paper Billings: {col_name}')\nplt.show()","c0f4b446":"percentage_barplot('PaymentMethod')","b1de26ba":"fig = px.box(df, x='Contract', y='MonthlyCharges', color='Churn',\n         color_discrete_sequence=['rgb(0, 0, 101)','rgb(0,200,200)'] )\nfig.update_layout(width=800, height=400,\n                 title=dict(text= 'Contract and monthly charges with churn',x=0.5, \n                           font=dict(size=24)),\n                 font=dict(family='Times New Roman', size=14),\n                 legend=dict(bgcolor='lightblue', borderwidth=3),\n                 plot_bgcolor='white')\n\nfig","96b681ec":"g = sns.FacetGrid(data=df, col='PaymentMethod',aspect=1.5)\ng.map_dataframe(sns.boxplot, x='MonthlyCharges', y='Churn')\ng.set_titles(col_template='Payment method: {col_name}')\nplt.show()","7242b201":"### 3. Categorical Features","7a18643e":"There's not much features visible from this chart but it may be useful when combined with categorical features","5fa76e62":"### 3.1 Age and churn (SeniorCitizen column)","991c3b1d":"scatter plots - MonthlyCharges and TotalCharges and tenure:","a506eefb":"**Basic info:**\n\n* number of rows: 7043\n* number of columns: 21","0b7662e1":"### 3.6 Additional services","fa9e4b6f":"* The **highest churn rate** has **fiber optic** which seems to be the fastest ant the most popular internet service nowadays\n\n* **DSL** subsciribers are **less likely** to churn than fiber optic users\n\n* At least **the lowest churn rate** is visible in **no internet service**","8b913335":"## 4.Payment methods and contracts","685f4978":"Customers which decide to churn have in every case bigger monthly charges from customers which didn't decide to churn, one year and two year payments are biger than in month-month contract","0c1b3170":"**ECDF plot** of total charges, monthly charges and tenure:","9f876d7e":"There's 6 additional services for clients:\n* online security\n* online backup\n* device protection\n* tech support\n* streaming tv\n* streaming movies","4adf388a":"**Conclusions:**\n* plot above shows that clients with multiple lines has almost the same churn rate as clients which don't have it\n* few customers don't have phone services","2fd652aa":"There's 3 numerical columns which may be interesting for this EDA, it's:\n\n* tenure\n* MonthlyCharges\n* Total Charges","abcf1c28":"**1.Intro**","b007c62d":"### 4.1 Paperless billing methods","83a8953e":"Mailed check payment method has really big gap in monthly charges between people which churn and not churn","7dd60482":"### 3.2 Age and gender","51752b31":"### 3.5 Phone and multiple lines","79716d6f":"Following conclusions can be drawn from the plot above:\n* customers with paperless billing methods are more probably to churn\n* electronic check has the biggest churn rate from all payment methods\n* short time contracts are more probable to churn","fb9d8ac5":"Numerical features are good predictors to churn and no churn, customers which are in senior group are very likely to churn. People which have fiber optic are very likely to churn. Customers with long term contracts not churn so often. From the other side gender and streaming features seems to not have any inpact on churn rate.","6213305c":"### 3.3 internet services","10a76ce8":"Conclusions:\n* customers without technical support are more likely to churn than customers which have this kind of support\n* streaming services churn rates are not avalible to predict","54445acb":"### 3.4 Partner and dependents","987f23c6":"**Churns in last month - Pie chart**","ca6153e2":"## 5.Final conclusions","dfdb2870":"## Data processing","63da8480":"This dataset has 16 categorical features:\n* Six binary (Yes\/No)\n* Nine features with three unique values each\n* One feature with four unique values","6d95a124":"the following conclusions can be drawn from the plots above:\n* Recent clients are more likely to churn\n* More likely to churn was clients which payed less at the beggining and then started to paying more by month\n* clients which total charges was bigger are more likely to churn\n* MonthlyCharges is important feature","b54031e5":"There's two ratios I'm going to calculate, there's:\n\n* **total charges to tenure ratio** as total charge divided by tenure\n* monhly charges difference as differnence between month charge - **total charges tenure ratio (this one above)**","c795777f":"Conclusions **gender, age and churn** :\n\n* gender does not have any impact on churn rate\n* seniors are only 16 % of all clients but churn rate in this group is high - 42 % against non-senior clients","cd8d35c7":"From Pie chart above we can see that there's 26.5% of current customers are going to churn","ab4e9058":"the following conclusions can be drawn from the plots above:\n\n* there's any pattern for no phone service users\n* Users which have no multiple lines and their monthly charges are bigger than 60 dollars are more likely to churn\n* Users with multiple lines and monthly charges greater than 60 dollars are very likely to churn","49865c26":"* customers which have no partner are more likely to churn\n* customers without dependents are more likely to churn","3806da00":"There's 3 unique services provided, it's:\n* [DSL](https:\/\/en.wikipedia.org\/wiki\/Digital_subscriber_line)\n* [Fiber optic](https:\/\/en.wikipedia.org\/wiki\/Optical_fiber) \n* No (may be only phone divice or TV subscription without internet)","ed7b271d":"As we can see there's some bounduaries","95f7b795":"At the first glance it looks like it's not null values but it could be too good to be true so after further inspections I found out that there's a null values in TotalCharges, so I'm going to replace it and convert to float","4ae90e36":"This dataset contains informations about Telco customers (their gender, relationship status etc.). Each row is a unique customer and last column contains if client left the company within last month (churn).","fc44d267":"Let's look for null values:"}}