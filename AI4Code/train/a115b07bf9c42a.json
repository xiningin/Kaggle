{"cell_type":{"3fff0d1f":"code","20f0640d":"code","843e6f63":"code","bdc31a6e":"code","ded4a89c":"code","13220db9":"code","d97b1e36":"code","ace1e5f8":"code","7ed23d01":"code","3f086cb1":"code","009130a6":"code","d5430348":"code","81631435":"code","13ae8216":"code","501fc251":"code","49e3666f":"code","a4b8cdb1":"code","5088106c":"code","c37ee55e":"code","acae84b0":"code","dd785c26":"code","d695e074":"code","9e11deb4":"code","7b179a17":"markdown","52ab5a62":"markdown","b154eb19":"markdown","97447b6c":"markdown","9b3b97cf":"markdown","4af693fe":"markdown"},"source":{"3fff0d1f":"import numpy as np \nimport pandas as pd \nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport plotly.graph_objects as go","20f0640d":"df = pd.read_json('..\/input\/fraud-detection-dataset\/transactions.txt', lines=True)","843e6f63":"df.head()","bdc31a6e":"df.shape","ded4a89c":"df.columns","13220db9":"df.dtypes","d97b1e36":"df.nunique()","ace1e5f8":"#empty columns\ndf.drop(['merchantCity','merchantState','merchantZip','echoBuffer','posOnPremises','recurringAuthInd'],axis=1,inplace=True)","7ed23d01":"df.head()","3f086cb1":"fig = go.Figure(data=[go.Pie(labels=df.isFraud, hole=.3)])\nfig.add_annotation(text='isFraud',\n                   x=0.5,y=0.5,showarrow=False,font_size=14,opacity=0.7,font_family='monospace')\nfig.update_traces(hoverinfo='label+percent+value',\n                  marker=dict(colors=['darkorange','blue'], line=dict(color='#000000', width=2)))\nfig.show()","009130a6":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nvar = ['merchantName','acqCountry','merchantCountryCode','posEntryMode','posConditionCode','merchantCategoryCode','transactionType','cardPresent','expirationDateKeyInMatch','isFraud']\nfor i in var:\n    df[i] = le.fit_transform(df[i])","d5430348":"# converting in datetime format\ndf['transactionDateTime'] = pd.to_datetime(df['transactionDateTime'])\ndf['currentExpDate'] = pd.to_datetime(df['currentExpDate'])\ndf['accountOpenDate'] = pd.to_datetime(df['accountOpenDate'])\ndf['dateOfLastAddressChange'] = pd.to_datetime(df['dateOfLastAddressChange'])","81631435":"# extractind year, month, day, hour, minute and seconds from datetime columns\ndf['transactionDateTime_year'] = df['transactionDateTime'].dt.year\ndf['transactionDateTime_month'] = df['transactionDateTime'].dt.month\ndf['transactionDateTime_day'] = df['transactionDateTime'].dt.day\ndf['transactionDateTime_hour'] = df['transactionDateTime'].dt.hour\ndf['transactionDateTime_minute'] = df['transactionDateTime'].dt.minute\ndf['transactionDateTime_second'] = df['transactionDateTime'].dt.second\n\ndf['currentExpDate_year'] = df['currentExpDate'].dt.year\ndf['currentExpDate_month'] = df['currentExpDate'].dt.month\ndf['currentExpDate_day'] = df['currentExpDate'].dt.day\n\ndf['accountOpenDate_year'] = df['accountOpenDate'].dt.year\ndf['accountOpenDate_month'] = df['accountOpenDate'].dt.month\ndf['accountOpenDate_day'] = df['accountOpenDate'].dt.day\n\ndf['dateOfLastAddressChange_year'] = df['dateOfLastAddressChange'].dt.year\ndf['dateOfLastAddressChange_month'] = df['dateOfLastAddressChange'].dt.month\ndf['dateOfLastAddressChange_day'] = df['dateOfLastAddressChange'].dt.day","13ae8216":"# drop datetime column\ndf.drop('transactionDateTime',axis = 1,inplace = True)\ndf.drop('currentExpDate',axis = 1,inplace = True)\ndf.drop('accountOpenDate',axis = 1,inplace = True)\ndf.drop('dateOfLastAddressChange',axis = 1,inplace = True)","501fc251":"df.head()","49e3666f":"df.dtypes","a4b8cdb1":"from statsmodels.stats.outliers_influence import variance_inflation_factor\n\ndef calc_vif(X):\n\n    # Calculating VIF\n    vif = pd.DataFrame()\n    vif[\"variables\"] = X.columns\n    vif[\"VIF\"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]\n\n    return(vif)","5088106c":"X = df.drop('isFraud',axis=1)\ncalc_vif(X)","c37ee55e":"df.drop(['enteredCVV','customerId','availableMoney'],axis=1,inplace=True)\nX = df.drop('isFraud',axis=1)\ncalc_vif(X)","acae84b0":"! pip install pycaret","dd785c26":"from pycaret.classification import setup, compare_models, blend_models, finalize_model, predict_model","d695e074":"def pycaret_model(train, target, n_select, fold, opt):\n    print('Setup Your Data....')\n    setup(data=train,\n              target=target,\n              numeric_imputation = 'mean',\n              silent= True)\n  \n    print('Comparing Models....')\n    best = compare_models(sort=opt, n_select=n_select, fold = fold,include = ['gbc','rf','et','xgboost','lightgbm','catboost'])\n    # gbc = gradient boosting classifier\n    # rf = random forest classifier\n    # et = extra tree classifier\n    \n    print('Blending Models....')\n    blended = blend_models(estimator_list= best, fold=fold, optimize=opt)\n    pred = predict_model(blended)\n    \n    return pred","9e11deb4":"pycaret_model(df, 'isFraud', 5, 3, 'Accuracy')","7b179a17":"#### **Data preprocessing**","52ab5a62":"#### **Model building**","b154eb19":"I'm using pycaret. pycaret package is used to automate the major steps for evaluating and comparing machine learning algorithms for classification and regression. The main benefit of the library is that a lot can be achieved with very few lines of code and little manual configuration.","97447b6c":"We can see here that the 'enteredCVV','customerId','availableMoney', 'currentBalance','cardCVV','accountNumber' and 'creditLimit'  have a high VIF value, meaning they can be predicted by other independent variables in the dataset.\n\n#### **Fixing Multicollinearity**\nDropping one of the correlated features will help in bringing down the multicollinearity between correlated features:\n\n","9b3b97cf":"#### **VIF (Variable Inflation Factors)**\nfor multicollinearity detection","4af693fe":"#### **Target col**"}}