{"cell_type":{"868ce341":"code","25a5622b":"code","ef9a5b94":"code","cc38802d":"code","cce4a5f2":"code","94e9c036":"code","adca69eb":"code","1f32d670":"code","8d4767ec":"code","c5e4076d":"code","dfe24412":"code","ebd48e95":"code","8025d342":"code","9ad57718":"code","9134af0a":"code","c1258845":"code","b0091778":"code","a3a40922":"code","8253797e":"code","4db05203":"code","ea790593":"code","aaaa0baa":"code","69ea5298":"code","0eefd025":"code","b39d48b7":"code","729783e6":"code","0594f2cc":"code","a3662af7":"markdown","64b7e571":"markdown","7fde0100":"markdown"},"source":{"868ce341":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchvision\nfrom torchvision import transforms\nimport albumentations as alb\nfrom albumentations.pytorch.transforms import ToTensor\nimport torch.utils.data as data_util\nfrom tqdm import tqdm_notebook, tqdm\nfrom copy import deepcopy\nimport matplotlib.pyplot as plt\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","25a5622b":"train_df = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/train.csv')\nval_df = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/Dig-MNIST.csv')","ef9a5b94":"train_df.head()","cc38802d":"def df_to_image(df):\n    imgs = []\n    labels = []\n    for idx in tqdm(range(len(df))):\n        row = df.iloc[idx].values\n        label, img = row[0], row[1:]\n        labels.append(label)\n        imgs.append(img.reshape(1, 28, 28).astype('uint8'))\n    \n    imgs = np.concatenate(imgs, axis=0)\n    labels = np.array(labels)\n    \n    return imgs, labels\n    ","cce4a5f2":"train_img, train_label = df_to_image(train_df)\nval_img, val_label = df_to_image(val_df)","94e9c036":"def random_plot(images, labels):\n    num = len(images)\n    idxs = np.random.choice(range(num), 9, replace=False)\n    fig, axes = plt.subplots(3, 3)\n    for plot_idx, arch in enumerate(idxs):\n        i = plot_idx % 3 # Get subplot row\n        j = plot_idx \/\/ 3 # Get subplot column\n        img = images[arch]\n#         axes[i, j].imshow(img, cmap='gray')\n        axes[i, j].imshow(img,)\n        axes[i, j].axis('off')\n        axes[i, j].set_title(f'{labels[arch]}')\n    plt.subplots_adjust(wspace=0.1, hspace=0.3)\n    plt.show()","adca69eb":"random_plot(train_img, train_label)","1f32d670":"model = torchvision.models.resnet34()\nmodel.fc","8d4767ec":"model.fc = nn.Linear(512, 10)","c5e4076d":"model.conv1 = nn.Conv2d(1, 64, kernel_size=(3), stride=2, padding=1)","dfe24412":"trans_tr = alb.Compose(\n    [\n        alb.CLAHE(p=0.4),\n        # alb.ToGray(p=0.3),\n        alb.GaussianBlur(blur_limit=3),\n#         alb.Equalize(p=0.3),\n#         alb.PadIfNeeded(min_height=34, min_width=34),\n#         alb.RandomCrop(height=28, width=28),\n#         alb.RandomScale(),\n#         alb.ISONoise(p=0.1),\n#         alb.RandomGamma(gamma_limit=(90, 110)),\n#         alb.RandomBrightnessContrast(brightness_limit=0.1, contrast_limit=0.1),\n#         alb.ShiftScaleRotate(rotate_limit=10, p=0.2),\n#         alb.Resize(height=28, width=28),\n    ]\n)\ntrans_tr = alb.Compose([\n    alb.RandomScale(),\n    alb.ShiftScaleRotate(rotate_limit=10, p=0.5),\n    alb.GaussianBlur(blur_limit=3),\n    alb.RandomBrightnessContrast(brightness_limit=0.1, contrast_limit=0.1),\n    alb.Resize(height=28, width=28),\n    ToTensor()\n])\n\ntrans_ts = ToTensor()","ebd48e95":"class DigDataset(data_util.Dataset):\n    def __init__(self, imgs, labels, istrain=False):\n        super(DigDataset, self).__init__()\n        self.imgs = imgs.reshape(-1, 28, 28, 1)\n        self.labels = labels\n        if istrain:\n            self.aug = trans_tr\n        else:\n            self.aug = trans_ts\n        \n    \n        \n    def __len__(self):\n        return len(self.labels)\n    \n    def __getitem__(self, idx):\n        img = self.imgs[idx]\n        img = self.aug(image=img)['image']\n#         print(img)\n        label = self.labels[idx]\n        \n        return img, torch.tensor(label)\n        \n#     def trans_tr(self, ):\n        \n        ","8025d342":"batch_size = 80\ntrain_set = DigDataset(train_img, train_label, istrain=True)\nval_set = DigDataset(val_img, val_label, istrain=False)\n\ntrain_loader = data_util.DataLoader(train_set, batch_size=batch_size, num_workers=3, pin_memory=True, shuffle=True)\nval_loader = data_util.DataLoader(val_set, batch_size=batch_size, num_workers=3, pin_memory=True, shuffle=False)","9ad57718":"cuda = torch.cuda.is_available()","9134af0a":"cuda","c1258845":"def generate_matrix(gt, pre, num_class=10):\n        mask = (gt >= 0) & (gt < num_class)\n        label = num_class * gt[mask].astype('int') + pre[mask]\n        count = np.bincount(label, minlength=num_class**2)\n        confusion_matrix = count.reshape(num_class, num_class)\n        return confusion_matrix","b0091778":"def do_train(model, optim, data_loader, epoch):\n    model.train()\n    confusion_matrix = np.zeros((10, 10))\n#     tbar = tqdm_notebook(train_loader)\n    tbar = tqdm(train_loader)\n    for img, label in tbar:\n        if cuda:\n            img, label = img.cuda(), label.cuda()\n        \n        optim.zero_grad()\n        logit = model(img)\n        loss = F.cross_entropy(logit, label)\n        loss.backward()\n        optim.step()\n        \n        pred = torch.argmax(logit, dim=1)\n        confusion_matrix += generate_matrix(label.cpu().numpy(), pred.cpu().numpy())\n        acc = np.diag(confusion_matrix).sum() \/ confusion_matrix.sum()\n        tbar.set_description(f'Train loss: {loss.item():.4f} acc: {acc:.4f}')\n        \n    \n    \n    print(f'Epoch: {epoch_idx} acc: {acc}')\n    \ndef do_eval(model, data_loader, epoch):\n    model.eval()\n    confusion_matrix = np.zeros((10, 10))\n#     tbar = tqdm_notebook(train_loader)\n    tbar = tqdm(train_loader)\n    for img, label in tbar:\n        if cuda:\n            img, label = img.cuda(), label.cuda()\n        \n        with torch.no_grad():\n            logit = model(img)\n        loss = F.cross_entropy(logit, label)\n        \n        pred = torch.argmax(logit, dim=1)\n        confusion_matrix += generate_matrix(label.cpu().numpy(), pred.cpu().numpy())\n        batch_acc = np.diag(confusion_matrix).sum() \/ confusion_matrix.sum()\n        tbar.set_description(f'Val loss: {loss.item():.4f} acc: {batch_acc:4f}')\n        \n    \n    acc = np.diag(confusion_matrix).sum() \/ confusion_matrix.sum()\n    print(f'Epoch: {epoch_idx} val acc: {acc}')\n    return acc","a3a40922":"epoch = 20\nif cuda:\n    model = model.cuda()\n    \noptim = torch.optim.Adam(params=model.parameters())\nbst_model = None\nbst_acc = 0.\nfor epoch_idx in range(epoch):\n    do_train(model, optim, train_loader, epoch_idx)\n    \n    val_acc = do_eval(model, val_loader, epoch_idx)\n    \n    if bst_acc < val_acc:\n        bst_model = deepcopy(model)\n        bst_acc = val_acc\n    \n    \n    \n    \n","8253797e":"print(f'Best val acc {bst_acc}')","4db05203":"test_df = pd.read_csv('\/kaggle\/input\/Kannada-MNIST\/test.csv')","ea790593":"test_df.head()","aaaa0baa":"test_img, ids = df_to_image(test_df)","69ea5298":"test_set = DigDataset(test_img, ids, istrain=False)\ntest_loader = data_util.DataLoader(test_set, batch_size=batch_size, num_workers=2, shuffle=False)","0eefd025":"submit = {\n    'id': [],\n    'label': []\n}\nif cuda:\n    bst_model = bst_model.cuda()\nfor b_imgs, b_ids in tqdm_notebook(test_loader):\n    if cuda:\n        b_imgs = b_imgs.cuda()\n        \n    with torch.no_grad():\n        logit = bst_model(b_imgs)\n        \n    pred = torch.argmax(logit, dim=1)\n    pred = pred.cpu().numpy()\n    submit['label'].extend(pred.tolist())\n    submit['id'].extend(b_ids.cpu().numpy().tolist())\n    ","b39d48b7":"submit_df = pd.DataFrame(submit)\nsubmit_df.head()","729783e6":"submit_df.to_csv('submission.csv', index=False)","0594f2cc":"!head submission.csv","a3662af7":"## Test","64b7e571":"#### Build model","7fde0100":"## Data augmentation"}}