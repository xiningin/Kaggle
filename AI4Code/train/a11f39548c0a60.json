{"cell_type":{"722c3155":"code","6e496664":"code","6e7b76b1":"code","1a89da95":"code","7db487dd":"code","77fe2a0c":"code","c38625f3":"code","aac52dae":"code","328e5036":"code","3dae90f1":"code","789f07f4":"code","99c4c9ff":"code","aea86e72":"code","384b9aaa":"code","89a5182a":"code","fe7b8217":"code","e8f6ba32":"markdown","02b29908":"markdown","01661f9d":"markdown","eccba5f6":"markdown","4644b4df":"markdown","43c4f6a6":"markdown","b46f7c0e":"markdown"},"source":{"722c3155":"%%time\n\nimport os\nimport logging\nimport sys\nimport time\nfrom datetime import timedelta\n\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\nimport gc\ngc.enable()\n\nimport numpy as np\nimport pandas as pd\n\nimport plotly.figure_factory as ff\nimport plotly.express as px\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB","6e496664":"%%time\n\ndata_dir = \"..\/input\/tabular-playground-series-nov-2021\/\"\n\ntrain  = pd.read_csv(data_dir  + \"train.csv\")\ntest = pd.read_csv(data_dir + \"test.csv\")\nsubmission = pd.read_csv(data_dir + \"sample_submission.csv\")","6e7b76b1":"%%time\n\nprint(\"Train shape: \", train.shape)\nprint(\"Test shape: \", test.shape, end=\"\\n\\n\")","1a89da95":"def merge_preds_df(df, preds_files):\n    for preds_file in preds_files:\n        df_tmp = pd.read_csv(preds_dir + preds_file)\n        df = df.merge(df_tmp, on=\"id\", how=\"left\")\n    return df\n\ndef build_preds_file_names(preds):\n    test_files = list()\n    train_files = list()\n    \n    for pred in preds:\n        test_files.append(f\"{pred}_test.csv\")\n        train_files.append(f\"{pred}_train.csv\")\n        \n    return (test_files, train_files)","7db487dd":"%%time\n\npreds_dir = \"..\/input\/tps-november-2021-predictions\/\"\n\nTARGET = \"target\"\n\nfeatures = [\n    \"cb1\", \"hgb1\", \"lgb1\", \"xgb1\",\n]\n\npreds_test_files, preds_train_files = build_preds_file_names(features)\n\ntest = merge_preds_df(test, preds_test_files)\ntrain = merge_preds_df(train, preds_train_files)","77fe2a0c":"train[features].head()","c38625f3":"test[features].head()","aac52dae":"%%time\n\ndef load_vis_data(preds_files):\n    # Read test preds files\n    df_list = []\n    for preds_file in preds_files:\n        df_tmp = pd.read_csv(f\"{preds_dir}\/{preds_file}\")\n        # rename preds column \n        df_tmp.columns = [\"id\", TARGET]\n        df_list.append((preds_file, df_tmp))\n        \n    hist_data = []\n    for i in range(len(df_list)):\n        _, df = df_list[i]\n        hist_data.append(df[TARGET])\n        \n    return hist_data","328e5036":"%%time\n\nvis_data = load_vis_data(preds_test_files)","3dae90f1":"%%time\n\nfig1= ff.create_distplot(vis_data, preds_test_files, bin_size=0.3, show_hist=False, show_rug=False)\nfig1.show()","789f07f4":"%%time\n\nfig2 = px.imshow(np.corrcoef(vis_data), x=preds_test_files, y=preds_test_files)\nfig2.show()","99c4c9ff":"%%time\n\ny = train.pop(TARGET)\nX = train[[\"id\"] + features].copy()\nX_test = test[features].copy()\n\ndel train\ndel test","aea86e72":"%%time\n\ndef predict_with_model(model, simple_fit=False, splits=5):\n    test_preds = []\n    valid_preds = {}\n    scores = []\n    \n    skf = StratifiedKFold(n_splits=splits, shuffle=True, random_state=42)\n    for fold, (idx_train, idx_valid) in enumerate(skf.split(X, y)):\n        start_time = time.monotonic()\n        \n        X_train, y_train = X.iloc[idx_train], y.iloc[idx_train]\n        X_valid, y_valid = X.iloc[idx_valid], y.iloc[idx_valid]\n        \n        valid_ids = X_valid.id.values.tolist()\n\n        X_train = X_train[features]\n        X_valid = X_valid[features]\n\n        if simple_fit:\n            model.fit(X_train, y_train)\n        else:\n            model.fit(\n                X_train, y_train,\n                eval_set=[(X_valid, y_valid)],\n                early_stopping_rounds=180,\n                verbose=1000\n            )\n        \n        valid_pred = model.predict_proba(X_valid)[:, 1]\n        test_pred = model.predict_proba(X_test)[:, 1]\n        \n        test_preds.append(test_pred)\n        valid_preds.update(dict(zip(valid_ids, valid_pred)))\n\n        score = roc_auc_score(y_valid, valid_pred)\n        \n        end_time = time.monotonic()\n        dur = timedelta(seconds=end_time - start_time)\n        print(f\"Fold {fold} | AUC: {score} | Took: {dur}\")\n        scores.append(score)\n    \n    test_preds = np.mean(np.column_stack(test_preds), axis=1)\n    valid_preds = pd.DataFrame.from_dict(valid_preds, orient=\"index\").reset_index()\n    \n    return test_preds, valid_preds, scores","384b9aaa":"%%time\n\ndef predict_with_models(models):\n    print(f\"Predicting with {len(models)} models...\", end=\"\\n\\n\")\n    for model_name, model in models:\n        start_time = time.monotonic()\n        \n        # simple fit for sklearn models\n        simple_fit = True\n        \n        print(\"-\" * 50)\n        print(f\"Using {model_name} model...\")\n        test_preds, valid_preds, scores = predict_with_model(model, simple_fit=simple_fit)\n        print(f\"Score: {np.mean(scores)}, Std: {np.std(scores)}\", end=\"\\n\\n\")\n\n        print(\"Saving predictions...\")\n        valid_preds.columns = [\"id\", model_name]\n        valid_preds.to_csv(f\"{model_name}_train.csv\", index=False)\n\n        test_preds_df = pd.DataFrame({\"id\": submission.id, model_name: test_preds})\n        test_preds_df.to_csv(f\"{model_name}_test.csv\", index=False)\n\n        sub = pd.DataFrame({\"id\": submission.id, TARGET: test_preds})\n        sub.to_csv(f\"{model_name}_submission.csv\", index=False)\n        \n        end_time = time.monotonic()\n        dur = timedelta(seconds=end_time - start_time)\n        print(f\"Took: {dur}\")","89a5182a":"%%time\n\nSEED = 42\n\nlr1_params = {\n    \"random_state\": SEED, \n    \"solver\": \"saga\"\n}\n\nlr2_params = {\n    \"random_state\": SEED, \n    \"fit_intercept\": True, \n    \"solver\": \"sag\", \n}\n\ngnb1_params = {}\n\n# Model name must be unique\nmodels = [\n    (\"lr1\", LogisticRegression(**lr1_params)),\n    (\"lr2\", LogisticRegression(**lr2_params)),\n    (\"gnb1\", GaussianNB(**gnb1_params)),\n]","fe7b8217":"%%time\n\npredict_with_models(models)","e8f6ba32":"## Import libraries","02b29908":"## Merge predictions to main data-frame","01661f9d":"## Load datasets","eccba5f6":"## Predict","4644b4df":"## TPS Nov. 2021 - Baseline blend XGBM\/LGBM\/CB\/HGB","43c4f6a6":"## Visualize correlations","b46f7c0e":"## Prepare"}}