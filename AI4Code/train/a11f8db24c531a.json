{"cell_type":{"d71330ed":"code","623d5e16":"code","bcda3444":"code","7644308c":"code","48f45549":"code","e98556e2":"code","dff70bca":"code","9c0db44f":"code","4b301a6e":"code","155deb93":"code","af030fe9":"code","92a993a3":"code","edf578a3":"code","0e2c4eba":"code","bbc09f95":"code","d86d8f09":"markdown","4c597608":"markdown","980ca253":"markdown","821cf64e":"markdown","66a298f0":"markdown","98f16b01":"markdown"},"source":{"d71330ed":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nimport gc,os,sys\n\nsns.set_style('darkgrid')\npd.options.display.float_format = '{:,.3f}'.format\n\nprint(os.listdir(\"..\/input\"))","623d5e16":"%%time\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\n\nprint(train.shape, test.shape)","bcda3444":"for c in train.columns:\n    if c not in test.columns: print(c)","7644308c":"null_cnt = train.isnull().sum().sort_values()\nprint('null count:', null_cnt[null_cnt > 0])","48f45549":"train['target'].value_counts().to_frame().plot.bar()","e98556e2":"all_data = train.append(test, sort=False).reset_index(drop=True)\ndel train, test\ngc.collect()\n\nall_data.head()","dff70bca":"from sklearn import preprocessing\n\nfeatures = [c for c in all_data.columns if c not in ['target', 'ID_code']]\nfor feat in features:\n    #all_data[feat+'_var'] = all_data.groupby([feat])[feat].transform('var')\n    all_data[feat+'_var'] = all_data[feat].var()\n    all_data[feat+'_plus'] = all_data[feat] + all_data[feat+'_var']\n    all_data[feat+'_minus'] = all_data[feat] - all_data[feat+'_var']\n    all_data.loc[:,[feat+'_plus', feat+'_minus']].fillna(0, inplace=True)\n    all_data.drop([feat+'_var'], axis=1, inplace=True)\n\nscaler = preprocessing.StandardScaler()\nnumcols = all_data.drop('target',axis=1).select_dtypes(include='number').columns.values\nall_data.loc[:,numcols] = scaler.fit_transform(all_data[numcols])\n#all_data.loc[:,features] = scaler.fit_transform(all_data[features])","9c0db44f":"X_train = all_data[all_data['target'].notnull()].reset_index(drop=True)\nX_test = all_data[all_data['target'].isnull()].drop(['target'], axis=1).reset_index(drop=True)\ndel all_data\ngc.collect()\n\n# drop ID_code\nX_train.drop(['ID_code'], axis=1, inplace=True)\nX_test_ID = X_test.pop('ID_code')\n\nY_train = X_train.pop('target')\n\nprint(X_train.shape, X_test.shape)","4b301a6e":"from sklearn import metrics\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.naive_bayes import GaussianNB\n\nfolds = StratifiedKFold(n_splits=10)\noof_preds = np.zeros(X_train.shape[0])\nsub_preds = np.zeros(X_test.shape[0])\nfor fold_, (trn_, val_) in enumerate(folds.split(X_train, Y_train)):\n    trn_x, trn_y = X_train.iloc[trn_], Y_train[trn_]\n    val_x, val_y = X_train.iloc[val_], Y_train[val_]\n\n    model = GaussianNB()\n    model.fit(trn_x, trn_y)\n\n    oof_preds[val_] = model.predict_proba(val_x)[:,1]\n    sub_preds += model.predict_proba(X_test)[:,1] \/ folds.n_splits","155deb93":"gnb_1 = oof_preds[Y_train > 0]\ngnb_0 = oof_preds[Y_train == 0]\nplt.hist([np.log(gnb_1), np.log(gnb_0)], color=['b','r'], bins=30, alpha=0.5, histtype='barstacked')\nplt.title('GaussianNB visualization')\nplt.show()","af030fe9":"fpr, tpr, thresholds = metrics.roc_curve(Y_train, oof_preds)\nauc = metrics.auc(fpr, tpr)\nplt.plot(fpr, tpr, label='ROC curve (area = %.3f)'%auc)\nplt.legend()\nplt.title('ROC curve')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.show()","92a993a3":"preds = sub_preds","edf578a3":"submission = pd.DataFrame({\n    'ID_code': X_test_ID,\n    'target': preds\n})\nsubmission.to_csv(\"submission.csv\", index=False)","0e2c4eba":"submission['target'].sum()","bbc09f95":"submission['target'].hist(bins=30, alpha=0.5)\nplt.show()","d86d8f09":"# Submit","4c597608":"# Feature engineering","980ca253":"# Data analysis","821cf64e":"# Load data","66a298f0":"## Preparation","98f16b01":"## GaussianNB"}}