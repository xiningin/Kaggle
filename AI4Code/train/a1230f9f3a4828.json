{"cell_type":{"0b0eb4fc":"code","689bbe9f":"code","f26ed877":"code","039d8e09":"code","3a534b16":"code","95339242":"code","cbca4708":"code","64356dba":"code","837883f8":"code","27188ff9":"code","f22c87ed":"code","05bdfe93":"code","cb696e13":"code","50493518":"code","c5f8851b":"code","3348536b":"markdown","a7b17a4c":"markdown","1c3fc32f":"markdown","11efefe9":"markdown","1de70ef5":"markdown","1c385143":"markdown","8e1b10a7":"markdown","fffd74e7":"markdown","97caff22":"markdown","523aac79":"markdown","534975ed":"markdown","eb2f151a":"markdown"},"source":{"0b0eb4fc":"import numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt\nimport datetime\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score","689bbe9f":"train = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/train.csv')\ntest = pd.read_csv('..\/input\/covid19-global-forecasting-week-4\/test.csv')","f26ed877":"train.head()","039d8e09":"train_data_by_country = train.groupby(['Date','Country_Region'],as_index=False).agg({'ConfirmedCases': 'sum', 'Fatalities': 'sum'})\nmax_train_date = train['Date'].max()\ntrain_data_by_country_confirm = train_data_by_country.query('(Date == @max_train_date) & (ConfirmedCases > 100)').sort_values('ConfirmedCases', ascending=False)\ntrain_data_by_country_confirm.set_index('Country_Region', inplace=True)\ntrain_data_by_country_confirm.style.background_gradient(cmap='Blues').format({'ConfirmedCases': \"{:.0f}\"})","3a534b16":"confirmed_total_date = train.groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_total_date = train.groupby(['Date']).agg({'Fatalities':['sum']})\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(17,7))\nconfirmed_total_date.plot(ax=ax1)\nax1.set_title(\"Global confirmed cases\", size=13)\nax1.set_ylabel(\"Number of cases\", size=13)\nax1.set_xlabel(\"Date\", size=13)\nfatalities_total_date.plot(ax=ax2, color='orange')\nax2.set_title(\"Global Fatalities cases\", size=13)\nax2.set_ylabel(\"Number of cases\", size=13)\nax2.set_xlabel(\"Date\", size=13)","95339242":"train['Province_State'].fillna(\"none\",inplace=True)\ntrain['ConfirmedCases'] = train['ConfirmedCases'].astype(int) \ntrain['Fatalities'] = train['Fatalities'].astype(int)","cbca4708":"train['Date'] = pd.to_datetime(train['Date'])\ntrain['Day']=train['Date'].dt.day\ntrain['Month']=train['Date'].dt.month","64356dba":"lbl=LabelEncoder()\ntrain['Province_State']=lbl.fit_transform(train['Province_State'])\ntrain['Country_Region']=lbl.fit_transform(train['Country_Region'])","837883f8":"X = train[['Province_State','Country_Region','Day','Month']]\nX.head()","27188ff9":"y = train[['ConfirmedCases','Fatalities']]\ny.head()","f22c87ed":"tree=DecisionTreeRegressor()\ntree.fit(X,y)","05bdfe93":"test.head()","cb696e13":"test['Province_State'].fillna(\"none\",inplace=True)\n\ntest['Date'] = pd.to_datetime(test['Date'])\ntest['Day']=test['Date'].dt.day\ntest['Month']=test['Date'].dt.month\n\ntest['Province_State']=lbl.fit_transform(test['Province_State'])\ntest['Country_Region']=lbl.fit_transform(test['Country_Region'])","50493518":"X_test = test[['Province_State','Country_Region','Day','Month']]\nX_test.head()","c5f8851b":"prediction=tree.predict(X_test)\nresult = pd.DataFrame(prediction)\nresult.columns = ['ConfirmedCases','Fatalities']\nresult.head()","3348536b":"Predication and converting result into dataframe.","a7b17a4c":" \n<center> \n#     COVID-19 Case Forecasting\n\n<img src=\"https:\/\/blog-pfm.imf.org\/.a\/6a00e54ef005958834025d9b4095fa200c-800wi\" width=\"300\" >\n\nFor givien data of covid 19 virus we are going to predict number of ConfirmedCases & Fatalities.\nwe going to use decision tree regressor for ML algoritham. It breaks down a dataset into smaller and smaller subsets while at the same time an associated decision tree is incrementally developed. The final result is a tree with decision nodes and leaf nodes.","1c3fc32f":"# Data pre-processing\nIn province_state filling all null value with \"none\" and converting cloumns ConfirmedCases and Fatalities from float to int","11efefe9":"# Loading & Visulizing data","1de70ef5":"**Fitting data into Model**","1c385143":"* Number of Confirmed cases and Fatalities vs month vise visualization ","8e1b10a7":"Selecting feature from test dataset for predication.","fffd74e7":"Converting column Date from object type to Datetime and add column Day and Month from it.","97caff22":"* At latest date we are going to count number of case with each Country_Region","523aac79":"Performing Data data cleaning process for test as well.","534975ed":"Selecting feature for model.","eb2f151a":"Performing LableEncoding to following columns."}}