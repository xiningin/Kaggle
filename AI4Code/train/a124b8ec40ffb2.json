{"cell_type":{"142034fd":"code","c9c8d39d":"code","43f6df9c":"code","4edd1dba":"code","e3d7cdae":"code","e72f1a30":"code","350db8b1":"code","45b791b7":"code","e4aa10c9":"code","9b2ab32e":"code","606e3799":"code","31234f84":"code","03b16bc8":"code","9db5dd28":"code","65d2a30d":"code","d3a2cf1f":"code","e37fd478":"code","134a5582":"code","8c02a7a6":"code","54952f0a":"code","d3256002":"code","d53c6344":"code","82325e25":"code","82c2f497":"code","a625eca1":"code","e2638340":"code","8e2fb4b2":"code","720b9794":"code","11b4e3f3":"code","79e3337f":"code","aed63c4b":"code","02b0e83d":"code","8e103364":"code","4087f5af":"code","216aa322":"code","e6ad3a6b":"code","4e6532b8":"markdown","96199c8a":"markdown","c4310562":"markdown","376e7444":"markdown","8fea8343":"markdown"},"source":{"142034fd":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRH1ZkhpgLMpW8mwLLLXs8IGaYaIRQSlTgyuN1luLQ0KFXqdp43',width=400,height=400)","c9c8d39d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","43f6df9c":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf = pd.read_csv('..\/input\/russian-premier-league\/repository\/ilikeevb--football-prediction-29a122c\/data\/RPL.csv', delimiter=';', encoding = \"cp1251\", nrows = nRowsRead)\ndf.dataframeName = 'RPL.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')","4edd1dba":"df.head()","e3d7cdae":"df.dtypes","e72f1a30":"df[\"\u0413\u043e\u0434\"].plot.hist()\nplt.show()","350db8b1":"df[\"\u0423\u0434\u0430\u0440\u044b\"].plot.hist()\nplt.show()","45b791b7":"df[\"\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e\"].plot.hist()\nplt.show()","e4aa10c9":"df[\"\u0422\u043e\u0447\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0441\u044b\"].plot.box()\nplt.show()","9b2ab32e":"df[\"\u041c\u0438\u043d\u0443\u0442\u044b\"].plot.box()\nplt.show()","606e3799":"sns.pairplot(df, x_vars=['\u0417\u0430\u0431\u0438\u0442\u043e'], y_vars='\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0438', markers=\"+\", size=4)\nplt.show()","31234f84":"dfcorr=df.corr()\ndfcorr","03b16bc8":"sns.heatmap(dfcorr,annot=True,cmap='winter')\nplt.show()","9db5dd28":"fig, axes = plt.subplots(1, 1, figsize=(14, 6))\nsns.boxplot(x='\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e', y='\u041c\u0438\u043d\u0443\u0442\u044b', data=df, showfliers=False);","65d2a30d":"fig, axes = plt.subplots(1, 1, figsize=(14, 6))\nsns.boxplot(x='\u0423\u0434\u0430\u0440\u044b', y='\u0423\u0434\u0430\u0440\u044b \u0432 \u0441\u0442\u0432\u043e\u0440', data=df, showfliers=False);","d3a2cf1f":"fig, axes = plt.subplots(1, 1, figsize=(14, 6))\nsns.boxplot(x='\u0422\u043e\u0447\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0441\u044b', y='\u041d\u0430\u0432\u0435\u0441\u044b', data=df, showfliers=False);","e37fd478":"g = sns.jointplot(x=\"\u0427\u0430\u0441\u0442\u044c\", y=\"\u041c\u0438\u043d\u0443\u0442\u044b\", data=df, kind=\"kde\", color=\"m\")\ng.plot_joint(plt.scatter, c=\"w\", s=30, linewidth=1, marker=\"+\")\ng.ax_joint.collections[0].set_alpha(0)\ng.set_axis_labels(\"$\u0427\u0430\u0441\u0442\u044c$\", \"$\u041c\u0438\u043d\u0443\u0442\u044b$\");","134a5582":"import matplotlib.style\n\nimport matplotlib as mpl\n\nmpl.style.use('classic')","8c02a7a6":"sns.jointplot(df['\u0422\u043e\u0447\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0441\u044b'],df['\u041d\u0430\u0432\u0435\u0441\u044b'],data=df,kind='scatter')","54952f0a":"sns.jointplot(df['\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e'],df['\u041c\u0438\u043d\u0443\u0442\u044b'],data=df,kind='scatter')","d3256002":"sns.jointplot(df['\u0417\u0430\u0431\u0438\u0442\u043e'],df['\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0438'],data=df,kind='kde',space=0,color='g')","d53c6344":"fig=sns.jointplot(x='\u0413\u043e\u0434',y='\u041d\u0430\u0432\u0435\u0441\u044b',kind='hex',data=df)","82325e25":"g = (sns.jointplot(\"\u0423\u0434\u0430\u0440\u044b\", \"\u0423\u0434\u0430\u0440\u044b \u0432 \u0441\u0442\u0432\u043e\u0440\",data=df, color=\"r\").plot_joint(sns.kdeplot, zorder=0, n_levels=6))","82c2f497":"ax= sns.boxplot(x=\"\u041c\u0438\u043d\u0443\u0442\u044b\", y=\"\u041d\u0430\u0432\u0435\u0441\u044b\", data=df)\nax= sns.stripplot(x=\"\u041c\u0438\u043d\u0443\u0442\u044b\", y=\"\u041d\u0430\u0432\u0435\u0441\u044b\", data=df, jitter=True, edgecolor=\"gray\")\n\nboxtwo = ax.artists[2]\nboxtwo.set_facecolor('yellow')\nboxtwo.set_edgecolor('black')\nboxthree=ax.artists[1]\nboxthree.set_facecolor('red')\nboxthree.set_edgecolor('black')\nboxthree=ax.artists[0]\nboxthree.set_facecolor('green')\nboxthree.set_edgecolor('black')\n\nplt.show()","a625eca1":"fig=plt.gcf()\nfig.set_size_inches(10,7)\nfig=sns.violinplot(x='\u0427\u0430\u0441\u0442\u044c',y='\u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e',data=df)","e2638340":"plt.figure(figsize=(15,10))\nplt.subplot(2,2,1)\nsns.violinplot(x='\u0423\u0434\u0430\u0440\u044b',y='\u0423\u0434\u0430\u0440\u044b \u0432 \u0441\u0442\u0432\u043e\u0440',data=df)\nplt.subplot(2,2,2)\nsns.violinplot(x='\u0423\u0434\u0430\u0440\u044b',y='\u0423\u0434\u0430\u0440\u044b \u0432 \u0441\u0442\u0432\u043e\u0440',data=df)\nplt.subplot(2,2,3)\nsns.violinplot(x='\u0423\u0434\u0430\u0440\u044b',y='\u0423\u0434\u0430\u0440\u044b \u0432 \u0441\u0442\u0432\u043e\u0440',data=df)\nplt.subplot(2,2,4)\nsns.violinplot(x='\u0423\u0434\u0430\u0440\u044b',y='\u0423\u0434\u0430\u0440\u044b \u0432 \u0441\u0442\u0432\u043e\u0440',data=df)","8e2fb4b2":"sns.set(style=\"darkgrid\")\nfig=plt.gcf()\nfig.set_size_inches(10,7)\nfig = sns.swarmplot(x=\"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0438\", y=\"\u0422\u043e\u0447\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438\", data=df)","720b9794":"sns.set(style=\"whitegrid\")\nfig=plt.gcf()\nfig.set_size_inches(10,7)\nax = sns.violinplot(x=\"\u041d\u0430\u0432\u0435\u0441\u044b\", y=\"\u0422\u043e\u0447\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0441\u044b\", data=df, inner=None)\nax = sns.swarmplot(x=\"\u041d\u0430\u0432\u0435\u0441\u044b\", y=\"\u0422\u043e\u0447\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0441\u044b\", data=df,color=\"white\", edgecolor=\"black\")","11b4e3f3":"fig=sns.lmplot(x=\"\u0423\u0434\u0430\u0440\u044b\", y=\"\u0423\u0434\u0430\u0440\u044b \u0432 \u0441\u0442\u0432\u043e\u0440\",data=df)","79e3337f":"# venn2\nfrom matplotlib_venn import venn2\n\u041c\u0438\u043d\u0443\u0442\u044b = df.iloc[:,0]\n\u0417\u0430\u0431\u0438\u0442\u043e = df.iloc[:,1]\n\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 = df.iloc[:,2]\n\u041d\u0430\u0432\u0435\u0441\u044b = df.iloc[:,3]\n# First way to call the 2 group Venn diagram\nvenn2(subsets = (len(\u041c\u0438\u043d\u0443\u0442\u044b)-15, len(\u0417\u0430\u0431\u0438\u0442\u043e)-15, 15), set_labels = ('\u041c\u0438\u043d\u0443\u0442\u044b', '\u0417\u0430\u0431\u0438\u0442\u043e'))\nplt.show()","aed63c4b":"# donut plot\nfeature_names = \"\u041c\u0438\u043d\u0443\u0442\u044b\",\"\u0417\u0430\u0431\u0438\u0442\u043e\",\"\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0438\"\nfeature_size = [len(\u041c\u0438\u043d\u0443\u0442\u044b),len(\u0417\u0430\u0431\u0438\u0442\u043e),len(\u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0438)]\n# create a circle for the center of plot\ncircle = plt.Circle((0,0),0.2,color = \"white\")\nplt.pie(feature_size, labels = feature_names, colors = [\"red\",\"green\",\"blue\",\"cyan\"] )\np = plt.gcf()\np.gca().add_artist(circle)\nplt.title(\"Number of Each Feature\")\nplt.show()","02b0e83d":"df.plot.area(y=['\u0423\u0434\u0430\u0440\u044b','\u0423\u0434\u0430\u0440\u044b \u0432 \u0441\u0442\u0432\u043e\u0440','\u041d\u0430\u0432\u0435\u0441\u044b','\u0422\u043e\u0447\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0441\u044b'],alpha=0.4,figsize=(12, 6));","8e103364":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.\u041f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044c)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"black\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","4087f5af":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df.\u041f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0439)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"green\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","216aa322":"nRowsRead = 1000 # specify 'None' if want to read whole file\ndf1 = pd.read_csv('..\/input\/russian-premier-league\/data\/RPL.csv', delimiter=';', encoding = \"cp1251\", nrows = nRowsRead)\ndf1.dataframeName = 'RPL.csv'\nnRow, nCol = df.shape\nprint(f'There are {nRow} rows and {nCol} columns')\ndf1.head()","e6ad3a6b":"#word cloud\nfrom wordcloud import WordCloud, ImageColorGenerator\ntext = \" \".join(str(each) for each in df1.\u0421\u043e\u043f\u0435\u0440\u043d\u0438\u043a)\n# Create and generate a word cloud image:\nwordcloud = WordCloud(max_words=200,colormap='Set3', background_color=\"blue\").generate(text)\nplt.figure(figsize=(10,6))\nplt.figure(figsize=(15,10))\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='Bilinear')\nplt.axis(\"off\")\nplt.figure(1,figsize=(12, 12))\nplt.show()","4e6532b8":"Area plot gives us a visual representation of Various dimensions of Russian 1er League.","96199c8a":"Kaggle Notebook Runner:Mar\u00edlia Prata @mpwolke","c4310562":"# codes from Binu https:\/\/www.kaggle.com\/biphili\/seaborn-matplotlib-plot-to-visualize-iris-data\n# codes from ShivaSandeep https:\/\/www.kaggle.com\/shivasandeep\/advertising-data","376e7444":"Image behance.net - Russian Premier League identity.","8fea8343":"#According to Slava Pasedko @slavapasedko. Columns description\n\n1. \u0427\u0430\u0441\u0442\u044c (idk, really)\n2. \u0413\u043e\u0434 (year of the game)\n3. \u041a\u043e\u043c\u0430\u043d\u0434\u0430 (team - host)\n4. \u0421\u043e\u043f\u0435\u0440\u043d\u0438\u043a (team - guest)\n5. \u041c\u0438\u043d\u0443\u0442\u044b (time of the game)\n6. \u0421\u0445\u0435\u043c\u0430 (soccer scheme, 5-4-1 etc)\n7. \u0417\u0430\u0431\u0438\u0442\u043e (how much host team scored)\n8. \u041f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043e (how much their competitors scored)\n9. \u0423\u0434\u0430\u0440\u044b (hits to football goal)\n10. \u0423\u0434\u0430\u0440\u044b \u0432 \u0441\u0442\u0432\u043e\u0440 (when hit was right in the direction)\n11. \u041f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 (passing the ball (times))\n12. \u0422\u043e\u0447\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 (when passing the ball was accurate)\n13. \u041d\u0430\u0432\u0435\u0441\u044b (soccer canopy)\n14. \u0422\u043e\u0447\u043d\u044b\u0435 \u043d\u0430\u0432\u0435\u0441\u044b (when the canopy was accurate)\n15. \u0412\u043b\u0430\u0434\u0435\u043d\u0438\u0435 (how much time in percentage host team had the ball)\n16. xG (expected goals ) https:\/\/www.sports.ru\/tribuna\/blogs\/triumphator\/1565293.html\n17. PPDA (Passes Allowed Per Defensive Action) - soccer static metric which allows determining pressure intensity through game"}}