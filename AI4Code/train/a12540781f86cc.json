{"cell_type":{"018f810c":"code","aa6b28db":"code","06633aba":"code","d9bfb0f4":"code","900c8b89":"code","6af11886":"code","73c853fc":"code","839d212e":"code","7dc7a527":"code","1b7a40bd":"code","a6b8bf39":"code","cb3e8979":"code","22723c61":"code","9a959a8b":"code","99f601a9":"code","d95c9b0c":"code","2f4a4736":"code","030e7aca":"code","f1a9e057":"code","176e370c":"code","38320c33":"code","7c66fee9":"code","1c02019d":"code","bdfa510a":"code","ac7d8123":"markdown","286e9eea":"markdown","13564492":"markdown","97bf9baf":"markdown"},"source":{"018f810c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport copy\nimport json\nfrom urllib.request import urlopen\nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)","aa6b28db":"df = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/2019_nCoV_data.csv')\ngeo_china = pd.read_csv(\"..\/input\/chinese-cities\/china_coordinates.csv\")\ngeo_world = pd.read_csv(\"..\/input\/world-coordinates\/world_coordinates.csv\")\nwikipedia_iso_country_codes = pd.read_csv(\"..\/input\/countries-iso-codes\/wikipedia-iso-country-codes.csv\")","06633aba":"with urlopen('https:\/\/raw.githubusercontent.com\/stjacob\/china_geojson\/master\/china.geojson') as response:\n    counties = json.load(response)","d9bfb0f4":"#counties['features'][0]","900c8b89":"df['Country'] = df['Country'].replace('Mainland China', 'China')","6af11886":"df2 = copy.copy(df)\ndf = df.drop(['Sno', 'Date'], axis  = 1)\ndf['Last Update'] = pd.to_datetime(df['Last Update'])\ndf[['Province\/State', 'Country']] = df[['Province\/State', 'Country']].fillna('Unavailable')\ndf[['Confirmed', 'Deaths', 'Recovered']] = df[['Confirmed', 'Deaths', 'Recovered']].fillna(0.0)\n#df.head(5)","73c853fc":"latest_data_df = df.groupby(['Country', 'Province\/State'])['Last Update', 'Confirmed', 'Deaths', 'Recovered'].max().reset_index()\nlatest_data_df = latest_data_df[['Country', 'Province\/State', 'Confirmed', 'Recovered', 'Deaths', 'Last Update']]\n#latest_data_df.shape","839d212e":"#latest_data_df.head(5)\n#df[df['Country'] == 'Australia'].tail(5)\n#latest_data_df.head(5)","7dc7a527":"china_df = latest_data_df[latest_data_df['Country'] == 'China'].reset_index(drop = True)\n#china_df.head(5)\ngrouped_cnf_df = latest_data_df.groupby(['Country'])['Confirmed', 'Recovered', 'Deaths'].sum().reset_index()\n#grouped_cnf_df.head(5)\ngrouped_cnf_df = grouped_cnf_df[(grouped_cnf_df['Country'] != 'China') & (grouped_cnf_df['Country'] != 'Others')]\n#grouped_cnf_df.head(5)","1b7a40bd":"fig = px.bar(grouped_cnf_df, x=\"Confirmed\", y=\"Country\", orientation='h', color = \"Confirmed\", height = 600)\nfig.update_layout(yaxis={'categoryorder':'total ascending'}, title = 'CONFIRMED CASES in countries other than China')\nfig.show()\n","a6b8bf39":"figz = px.bar(df2[(df2['Country'] != 'China') & (df2['Country'] != 'Others')], x=\"Confirmed\", y=\"Country\", orientation = 'h',animation_frame=\"Date\", hover_name=\"Country\", range_x = [0,55], height = 800, color = 'Confirmed')\nfigz.update_layout(yaxis={'categoryorder':'total ascending'}, title = 'CONFIRMED CASES in countries other than China')\nfigz.show()","cb3e8979":"#df2.head(5)\n#figz = px.bar(df2[(df2['Country'] != 'China') & (df2['Country'] != 'Others')], x=\"Country\", y=\"Confirmed\", animation_frame=\"Date\", hover_name=\"Country\", range_y = [0,60], color = 'Confirmed')\n#figz.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"] = 1000\n#figz.show()","22723c61":"fig = go.Figure(go.Bar(x=grouped_cnf_df['Confirmed'], y=grouped_cnf_df['Country'], name='Confirmed', orientation = 'h'))\nfig.add_trace(go.Bar(x=grouped_cnf_df['Deaths'], y=grouped_cnf_df['Country'], name='Deaths', orientation = 'h'))\nfig.add_trace(go.Bar(x=grouped_cnf_df['Recovered'], y=grouped_cnf_df['Country'], name='Recovered', orientation = 'h'))\n\nfig.update_layout(barmode='stack', yaxis={'categoryorder':'total ascending'}, height = 1000, title = 'PATIENT DISTRIBUTION in countries other than China')\nfig.show()","9a959a8b":"fig = go.Figure(go.Bar(x=china_df['Confirmed'], y=china_df['Province\/State'], name='Confirmed', orientation = 'h'))\nfig.add_trace(go.Bar(x=china_df['Deaths'], y=china_df['Province\/State'], name='Deaths', orientation = 'h'))\nfig.add_trace(go.Bar(x=china_df['Recovered'], y=china_df['Province\/State'], name='Recovered', orientation = 'h'))\n\nfig.update_layout(barmode='stack', yaxis={'categoryorder':'total ascending'}, height = 1000, title = 'PATIENT DISTRIBUTION in Chinese Provinces')\nfig.show()","99f601a9":"fig = make_subplots(rows=2, cols=1, start_cell=\"bottom-left\", row_heights = [0.96, 0.04], vertical_spacing = .09)\n\n\nfig.add_trace(go.Bar(x=china_df[china_df['Province\/State'] != 'Hubei']['Confirmed'], y=china_df[china_df['Province\/State'] != 'Hubei']['Province\/State'], name='Confirmed', orientation = 'h'), row = 1, col=1)\nfig.add_trace(go.Bar(x=china_df[china_df['Province\/State'] != 'Hubei']['Deaths'], y=china_df[china_df['Province\/State'] != 'Hubei']['Province\/State'], name='Deaths', orientation = 'h'), row = 1, col=1)\nfig.add_trace(go.Bar(x=china_df[china_df['Province\/State'] != 'Hubei']['Recovered'], y=china_df[china_df['Province\/State'] != 'Hubei']['Province\/State'], name='Recovered', orientation = 'h'), row = 1, col=1)\n\nfig.add_trace(go.Bar(x=china_df[china_df['Province\/State'] == 'Hubei']['Confirmed'], y=china_df[china_df['Province\/State'] == 'Hubei']['Province\/State'], name='Confirmed', orientation = 'h'), row = 2, col=1)\nfig.add_trace(go.Bar(x=china_df[china_df['Province\/State'] == 'Hubei']['Deaths'], y=china_df[china_df['Province\/State'] == 'Hubei']['Province\/State'], name='Deaths', orientation = 'h'), row = 2, col=1)\nfig.add_trace(go.Bar(x=china_df[china_df['Province\/State'] == 'Hubei']['Recovered'], y=china_df[china_df['Province\/State'] == 'Hubei']['Province\/State'], name='Recovered', orientation = 'h'), row = 2, col=1)\n\n\nfig.update_layout(showlegend=False, barmode='stack', yaxis={'categoryorder':'total ascending'}, height = 700, title = 'Wuhan (Hubei Province) versus other Chinese provinces')\nfig.show()","d95c9b0c":"china_df['Province\/State'] = china_df['Province\/State'].str.replace('Inner Mongolia', 'Nei Mongol')\nchina_df['Province\/State'] = china_df['Province\/State'].str.replace('Hong Kong', 'HongKong')\nchina_df['Province\/State'] = china_df['Province\/State'].str.replace('Xinjiang', 'Xinjiang Uygur')\nchina_df['Province\/State'] = china_df['Province\/State'].str.replace('Tibet', 'Xizang')\nchina_df['Province\/State'] = china_df['Province\/State'].str.replace('Ningxia', 'Ningxia Hui')\nchina_df = china_df.sort_values(['Province\/State'])","2f4a4736":"def read_geojson(url):\n    with urlopen(url) as url:\n        jdata = json.loads(url.read().decode())\n    if   'id'  not in jdata['features'][0].keys():\n        if 'properties' in jdata['features'][0].keys():\n            if 'id' in jdata['features'][0]['properties']  and jdata['features'][0]['properties']['id'] is not None:\n                for k, feat in enumerate(jdata['features']):\n                    jdata['features'][k]['id'] = feat['properties']['id']\n            else:\n                for k in range(len(jdata['features'])):\n                    jdata['features'][k]['id'] = k\n    return jdata\n\njdata = read_geojson('https:\/\/raw.githubusercontent.com\/stjacob\/china_geojson\/master\/china.geojson')","030e7aca":"locations = [i for i in range(0,34)]\ntext = [feat['properties']['NAME_1']  for feat in jdata['features'] if feat['id'] in locations] #province names\nchina_geojson_df = pd.DataFrame(columns = ['Province\/State'])\nchina_geojson_df['Province\/State'] = text","f1a9e057":"china_df = china_df.reindex([0,1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,21,22,23,24,25,26,27,29,30,31,32,33,28,12,20]).reset_index(drop=True)\nchina_df = china_df.reindex([0,1,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,14,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33]).reset_index(drop=True)\nchina_geojson_df = pd.merge(china_df, china_geojson_df, left_on='Province\/State', right_on='Province\/State')","176e370c":"mapbox_access_token = \"pk.eyJ1IjoiYmF0byIsImEiOiJjamJwZzRvaGE2MTljMzJtcjhzaDJvaXFxIn0.TkTLg13Af-ERPjOWzB-BFQ\"\ntrace = go.Choroplethmapbox(z=china_geojson_df['Confirmed'].tolist(),\n                            locations=locations,\n                            colorbar=dict(thickness=20, ticklen=3),\n                            colorscale='Viridis',\n                            geojson=jdata,\n                            text=china_geojson_df['Province\/State'].tolist(),\n                            marker_line_width=0.1, marker_opacity=0.7)\n                            \n                            \nlayout = go.Layout(title_text= 'Confirmed Cases - Chinese Provinces',\n                   mapbox = dict(center= dict(lat=39.913818,  lon=102.363625),\n                                 accesstoken= mapbox_access_token,\n                                 zoom=3.0,\n                               ))\n\nfig = go.Figure(data=[trace], layout =layout)\nfig.update_layout(mapbox_style = \"carto-positron\", height = 700, width = 1100)\nfig.show()","38320c33":"jdata_world = read_geojson('https:\/\/raw.githubusercontent.com\/johan\/world.geo.json\/master\/countries.geo.json')\nworld_locations = [i for i in range(0,180)]\ncountry_names = [feat['properties']['name']  for feat in jdata_world['features']] #country names","7c66fee9":"grouped_cnf_df['Country'] = grouped_cnf_df['Country'].str.replace('US', 'United States of America')\ngrouped_cnf_df['Country'] = grouped_cnf_df['Country'].str.replace('UK', 'United Kingdom')\n#grouped_cnf_df['Country'].tolist()\ngrouped_cnf_df = pd.merge(grouped_cnf_df, wikipedia_iso_country_codes, how='right', left_on='Country', right_on='English short name lower case')\ngrouped_cnf_df = grouped_cnf_df[['Country', 'Confirmed', 'Recovered', 'Deaths', 'Alpha-3 code']]\ngrouped_cnf_df = grouped_cnf_df.dropna()","1c02019d":"for col in grouped_cnf_df.columns:\n    grouped_cnf_df[col] = grouped_cnf_df[col].astype(str)\n    \ndef get_text(row):\n     return row['Country'] + '<br>' + 'Confirmed: ' + row['Confirmed'] + '<br>' + 'Recovered: ' + row['Recovered'] + '<br>' + 'Deaths: ' + row['Deaths']\n\ngrouped_cnf_df['text'] = grouped_cnf_df.apply(lambda row: get_text(row), axis = 1)","bdfa510a":"fig = px.choropleth(grouped_cnf_df, locations=\"Alpha-3 code\",\n                    color=\"Confirmed\", # lifeExp is a column of gapminder\n                    hover_name='text', # column to add to hover information\n                    color_continuous_scale='Viridis')\n                    #color_continuous_scale='Inferno')\n\nfig.update_layout(title_text = 'Confirmed Cases - World')\n\n\nfig.show()","ac7d8123":"<h4> Confirmed Cases - World <\/h4>","286e9eea":"<h1> Quick implementation of Corona Virus EDA<\/h1>\n<h2> [Work in progess] <\/h2>","13564492":"<h4> Confirmed Cases - Chinese Provinces <\/h4>","97bf9baf":"<h3> Map Based Visualizations <\/h3>"}}