{"cell_type":{"2e5bf73b":"code","45cef00b":"code","45a129b7":"code","b95d34b0":"code","22200892":"code","66bef8dd":"code","d5a6095f":"code","9d440696":"code","8cb3d657":"code","429509a3":"code","451dc758":"code","ab2abb1f":"code","33234183":"code","27580dc1":"code","9ce14dce":"code","5de19dd1":"code","33e52612":"code","adfe5bc1":"code","7298d766":"code","e49bac06":"code","bfd94da4":"code","327a72a1":"code","06159eef":"code","48813547":"code","371e4d7d":"code","38585819":"code","6b5bd1dc":"code","a971f7d6":"code","304b46e0":"code","0964952c":"code","04d36abd":"code","ee1b3102":"code","3de74aa1":"code","13dc5d2e":"code","75f1ee9e":"code","b1fdfadb":"code","b63b85a6":"code","91870f7b":"code","d12c7e29":"markdown","40343062":"markdown","e50e1fcc":"markdown","15c32e02":"markdown","d2962341":"markdown","3da2d777":"markdown","15e40816":"markdown","1a21391e":"markdown","d874f3cd":"markdown","c08316ef":"markdown","71385426":"markdown","55d85caf":"markdown","276df7eb":"markdown"},"source":{"2e5bf73b":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport seaborn as sns","45cef00b":"import tensorflow as tf\ntf.__version__","45a129b7":"data = pd.read_csv('..\/input\/tabular-playground-series-mar-2021\/train.csv')","b95d34b0":"data.info()","22200892":"data.head()","66bef8dd":"data.drop('id', axis = 1, inplace=True)","d5a6095f":"data.isna().sum()","9d440696":"sns.countplot(data['target'], palette=\"bwr\")\nplt.show()\ndata['target'].value_counts(normalize=True);","8cb3d657":"X = data.drop('target', axis=1)\ny = data['target'].to_numpy()\n\nX.shape, y.shape","429509a3":"X[:5]","451dc758":"cat_columns = ['cat' + str(i) for i in range(19)]\nX[cat_columns].nunique().sort_values()","ab2abb1f":"from sklearn.preprocessing import LabelEncoder\n\nle_cols = ['cat0', 'cat11', 'cat12', 'cat13', 'cat14', 'cat1', 'cat2', 'cat3', 'cat4', 'cat6', 'cat9', 'cat5', 'cat7', 'cat8'\n               , 'cat10', 'cat15', 'cat16', 'cat17', 'cat18']\n\ndef convert2num(X_new):\n\n    label_encoder = LabelEncoder()\n\n    for col in le_cols:\n        X_new[col] = label_encoder.fit_transform(X_new[col])\n        \n    return X_new","33234183":"X = convert2num(X)\n\nX[le_cols].head()","27580dc1":"X.head()","9ce14dce":"X = X.drop(['cat13', 'cont10', 'cont2'], axis = 1)","5de19dd1":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX = sc.fit_transform(X)","33e52612":"X[:1]","adfe5bc1":"from sklearn.model_selection import train_test_split\n\ntf.random.set_seed(42)\n\nX_train_vaild, X_test, y_train_vaild, y_test = train_test_split(X, y, test_size=0.01, random_state=42)\n\nX_train_vaild.shape, X_test.shape, y_train_vaild.shape, y_test.shape","7298d766":"tf.random.set_seed(42)\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_train_vaild, y_train_vaild, test_size=0.25, random_state=42)\n\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape","e49bac06":"# let's build a model to find patterns in it\n\n# Set random seed\ntf.random.set_seed(42)\n\n# 1. Create a model\nmodel_1 = tf.keras.Sequential([\n           tf.keras.layers.Dense(20, input_dim=27, activation='relu'),\n           tf.keras.layers.Dense(15, activation='relu'),\n           tf.keras.layers.Dense(8, activation='relu'),         \n           tf.keras.layers.Dense(2, activation='softmax')\n])\n\n# 2. Comile the model\nmodel_1.compile(loss=tf.keras.losses.BinaryCrossentropy(),\n                 optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),\n                 metrics=['accuracy'])\n\n# 3. Fit the model\nhistory = model_1.fit(X_train, \n                      tf.one_hot(y_train, depth=2), \n                      epochs=20,\n                      verbose = 1,\n                      validation_data=(X_valid, tf.one_hot(y_valid, depth=2)))","bfd94da4":"plt.plot(history.history['accuracy'], label='accuracy')\nplt.plot(history.history['val_accuracy'], label = 'val_accuracy')\nplt.xlabel('Epoch')\nplt.ylabel('Accuracy')\nplt.ylim([0.0, 1.0])\nplt.legend(loc='lower right');","327a72a1":"plt.plot(history.history['loss'], label='loss')\nplt.plot(history.history['val_loss'], label = 'val_loss')\nplt.xlabel('Epoch')\nplt.ylabel('Loss')\nplt.ylim([0.0, 1])\nplt.legend(loc='upper right');","06159eef":"import seaborn as sns\nfrom sklearn.metrics import confusion_matrix\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(confusion_matrix(y_true=y_test, \n                 y_pred=model_1.predict(X_test).argmax(axis=1)), annot=True,\n                 fmt=\"d\");","48813547":"model_1.evaluate(X_test, tf.one_hot(y_test, depth=2))[1] * 100","371e4d7d":"model_1.summary()","38585819":"# Let's check out a way of viewing our deep learning models\nfrom tensorflow.keras.utils import plot_model\n\n# See the inputs and outputs of each layer\nplot_model(model_1, show_shapes=True)","6b5bd1dc":"test_path = \"\/kaggle\/input\/tabular-playground-series-mar-2021\/test.csv\"\ndf_test = pd.read_csv(test_path)","a971f7d6":"test_passengerIds = df_test['id'].values\ndf_test.drop('id', axis = 1, inplace=True)\ndf_test.head()","304b46e0":"X_new = convert2num(df_test)\n\nX_new[le_cols].head()","0964952c":"X_new = X_new.drop(['cat13', 'cont10', 'cont2'], axis = 1)","04d36abd":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_new = sc.fit_transform(X_new)","ee1b3102":"X_new[:1]","3de74aa1":"y_pred = model_1.predict(X_new).argmax(axis = 1)","13dc5d2e":"y_pred[:5]","75f1ee9e":"y_pred.shape","b1fdfadb":"test_passengerIds.shape","b63b85a6":"output = pd.DataFrame({'id':test_passengerIds, 'target': y_pred})\noutput.to_csv('submission.csv', index=False)","91870f7b":"output","d12c7e29":"# Test Data","40343062":"# Import Packages\nLets load all the needed packages for this notebook:","e50e1fcc":"# Splitting traning set","15c32e02":"# Testing the model","d2962341":"# The Dataset\nFor this notebook we will use Tabular Playground Series - Mar 2021.\n\nLet's define the path to the dataset:","3da2d777":"# Label encode:","15e40816":"# checking wheather if the target data is balanced or not.","1a21391e":"# Building and Training our model","d874f3cd":"# Feature scaling","c08316ef":"# Check if there is null values","71385426":"# Quick Look at the Data\nLet\u2019s take a look at the top five rows:","55d85caf":"as we can see data here is not balanced!","276df7eb":"# Split Data"}}