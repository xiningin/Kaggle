{"cell_type":{"a12c747d":"code","5dac3096":"code","f1caa556":"code","c2d6d058":"code","2b30adab":"code","8bc9ff9c":"code","2b8503fa":"code","c69c5722":"code","f82ab106":"code","89993578":"code","a2a70509":"code","fe2ecea1":"code","b70e4ed9":"code","76fe63e4":"code","86bbf169":"code","c4d4143a":"code","1e4a9c93":"code","bc748e3f":"code","f2ef354d":"code","923f444c":"code","d7de50c2":"code","38bde556":"code","a4f286b9":"code","208b2b43":"code","79c0b6e2":"markdown","e5294b8f":"markdown"},"source":{"a12c747d":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt             \nimport tensorflow as tf         \nfrom tensorflow.keras.preprocessing import image_dataset_from_directory\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","5dac3096":"train = pd.read_csv('..\/input\/road-segmentation\/Train.csv')\ntest = pd.read_csv('..\/input\/road-segmentation\/Test.csv')","f1caa556":"train.sample(7)","c2d6d058":"# Reproducability\ndef set_seed(seed=31415):\n    np.random.seed(seed)\n    tf.random.set_seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    os.environ['TF_DETERMINISTIC_OPS'] = '1'\nset_seed()","2b30adab":"train.Target = train.Target.astype(str) # convert numeric target to string\nno_class = train.Target.unique().tolist()\ntrain['id']= train.Image_ID.apply(lambda x: x +'.tif')","8bc9ff9c":"train.sample(5)","2b8503fa":"# Data augmentation pipeline\ntrain_datagen = ImageDataGenerator(rescale=1.\/255, validation_split=0.25) # normalized image with rescale\n\n\n","c69c5722":"# Reading files from path in data frame\ntrain_ds = train_datagen.flow_from_dataframe(train,directory = '..\/input\/road-segmentation\/Images\/Images',\n                                             x_col = 'id', y_col = 'Target', subset=\"training\",\n                                             class_mode='categorical', batch_size=50,seed=420,)\n\nvalid_ds = train_datagen.flow_from_dataframe(train,directory = '..\/input\/road-segmentation\/Images\/Images',\n                                             x_col = 'id', y_col = 'Target', subset=\"validation\", class_mode='categorical',\n                                             batch_size=50, seed=420,)","f82ab106":"x_train,y_train = next(train_ds)\n\nx_test,y_test = next(valid_ds)","89993578":"plt.imshow(x_train[0])\nplt.title(y_train[0], fontsize=8)","a2a70509":"plt.figure(figsize=(20,10))\nfor i in range(6):\n    plt.subplot(1,6,i+1)\n    plt.imshow(x_train[i])\n    plt.title(y_train[i], fontsize=8)\n","fe2ecea1":"test['id']= test.Image_ID.apply(lambda x: x +'.tif')\ntestgen = ImageDataGenerator(rescale=1.\/255)\n# make sure you turn shuffle to False for submission\ntest_ds = train_datagen.flow_from_dataframe(test,directory = '..\/input\/road-segmentation\/Images\/Images',\n                                             x_col = 'id', y_col = None, class_mode=None, batch_size=50,  shuffle=False)","b70e4ed9":"test_ = next(test_ds)\n","76fe63e4":"plt.figure(figsize=(20,10))\nfor i in range(6):\n    plt.subplot(1,6,i+1)\n    plt.imshow(test_[i])","86bbf169":"from tensorflow.keras.layers import Conv2D, MaxPooling2D, GlobalMaxPooling2D, AveragePooling2D\nfrom tensorflow.keras.layers import Dense, Dropout, Flatten, Activation\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\nfrom tensorflow.keras.optimizers import Adam","c4d4143a":"def model_small():\n        \"\"\"\n        Build CNN model using img_width, img_height from fields.\n        \"\"\"\n        model=Sequential()\n        model.add(Conv2D(32, kernel_size=3, input_shape=(256, 256,3), activation='relu', padding='same'))\n        model.add(MaxPooling2D(3, strides=2))\n        model.add(Conv2D(64, kernel_size=3, activation='relu', padding='same'))\n        model.add(Conv2D(64, kernel_size=3, activation='relu', padding='same'))\n        #model.add(Conv2D(256, kernel_size=3, activation='relu', padding='same'))\n        model.add(MaxPooling2D(3, strides= 2))\n        model.add(Conv2D(100, kernel_size=3, activation='relu', padding='same'))\n        \n        #model.add(Conv2D(100, kernel_size=3, activation='relu', padding='same'))\n\n        model.add(MaxPooling2D(3, strides=2))\n        model.add(Flatten())\n        model.add(Dense(60, activation = \"relu\")) \n               \n        # 1 y label\n        model.add(Dense(2, activation='softmax'))\n        model.compile(optimizer=Adam(lr=0.001), loss='categorical_crossentropy', metrics=[tf.keras.metrics.AUC()])\n        return model","1e4a9c93":"model = model_small()\nmodel.summary()","bc748e3f":"epochs=40\n# Learning Rate Schedule for Fine Tuning #\ndef exponential_lr(epoch,\n                   start_lr = 0.00001, min_lr = 0.00001, max_lr = 0.005,\n                   rampup_epochs = 5, sustain_epochs = 0,\n                   exp_decay = 0.6):\n\n    def lr(epoch, start_lr, min_lr, max_lr, rampup_epochs, sustain_epochs, exp_decay):\n        # linear increase from start to rampup_epochs\n        if epoch < rampup_epochs:\n            lr = ((max_lr - start_lr) \/\n                  rampup_epochs * epoch + start_lr)\n        # constant max_lr during sustain_epochs\n        elif epoch < rampup_epochs + sustain_epochs:\n            lr = max_lr\n        # exponential decay towards min_lr\n        else:\n            lr = ((max_lr - min_lr) *\n                  exp_decay**(epoch - rampup_epochs - sustain_epochs) +\n                  min_lr)\n        return lr\n    return lr(epoch,\n              start_lr,\n              min_lr,\n              max_lr,\n              rampup_epochs,\n              sustain_epochs,\n              exp_decay)\n\nlr_callback = tf.keras.callbacks.LearningRateScheduler(exponential_lr, verbose=True)\n\nrng = [i for i in range(epochs)]\ny = [exponential_lr(x) for x in rng]\nplt.plot(rng, y)\nprint(\"Learning rate schedule: {:.3g} to {:.3g} to {:.3g}\".format(y[0], max(y), y[-1]))","f2ef354d":"#validation_steps=5\n            \n        # We'll stop training if no improvement after some epochs\nearlystopper = EarlyStopping(monitor='val_auc', patience=6, verbose=1, restore_best_weights=True)\n        # Save the best model during the traning\ncheckpointer = ModelCheckpoint('best_model1.h5'\n                                        ,monitor='val_auc'\n                                        ,verbose=1\n                                        ,save_best_only=True\n                                        ,save_weights_only=True)\nlr_callback = tf.keras.callbacks.LearningRateScheduler(exponential_lr, verbose=True)\n\n        # Train\ntraining = model.fit(train_ds\n                                ,epochs=epochs,\n                                #steps_per_epoch=steps_per_epoch,\n                                validation_data=valid_ds,\n                                #validation_steps=validation_steps\n                                callbacks=[earlystopper,])","923f444c":"model.evaluate(valid_ds)","d7de50c2":"pred = model.predict(test_ds)","38bde556":"pred[:6]","a4f286b9":"pred = model.predict(test_ds)[:,1]\nss = pd.read_csv('..\/input\/road-segmentation\/SampleSubmission.csv')\n#pred = np.argmax(pred, axis=1)\nss['Target'] = pred\nss.head(10)","208b2b43":"# Save\nss.to_csv('simple_cnn.csv', index=False)","79c0b6e2":"# Loading image data with Tensorflow ImageDataGenerator through dataframe.\nA quick starter notebook to load images with csv files using Tensorflow.","e5294b8f":"# Load test data"}}