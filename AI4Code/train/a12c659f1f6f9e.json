{"cell_type":{"ec7c6292":"code","5aab9793":"code","8d7c11d8":"code","1c4419ce":"code","09b219b2":"code","c03b5341":"code","385c2896":"code","cd508bf6":"code","018f8e31":"code","6c6eead1":"code","b49f0525":"code","995b2b9d":"code","c2487910":"code","bc3e6a3e":"code","cbfec87e":"code","caa56895":"code","c9004b05":"code","86574d5a":"code","0a6c0bb9":"code","269614c0":"code","75c3290f":"code","d8495f11":"code","6204c65f":"code","62ca7de0":"code","d52e2a78":"code","926367f8":"code","bae943cc":"code","e359418f":"code","f874748f":"code","407117aa":"code","21661f30":"code","5a7cc25c":"code","cfc691de":"markdown","239d8e72":"markdown","fe882901":"markdown","53342e25":"markdown","dbfbe96e":"markdown","486993cb":"markdown","c8d9b746":"markdown","ef58c65e":"markdown","94e9d7cd":"markdown","b35c3d72":"markdown"},"source":{"ec7c6292":"# Import Libraries\nimport numpy as np\nimport tensorflow.keras as keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.mobilenet import preprocess_input, decode_predictions\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense\nfrom tensorflow.keras.models import Model\n\nfrom IPython.display import Image","5aab9793":"DLDir = \"..\/input\/testdata1\/\"    #directory of downloaded files\nfruit1 = 'Granny_Smith'  #keyword to be used in train model\nfruit2 = 'banana'  #keyword to be used in train model\n","8d7c11d8":"def prepare_image(filepath):\n   img = image.load_img(filepath, target_size=(224, 224))\n   img_array = image.img_to_array(img)\n   img_array_expanded_dims = np.expand_dims(img_array, axis=0)\n   return keras.applications.mobilenet.preprocess_input(img_array_expanded_dims)","1c4419ce":"import os\ndef chkFolder(path):\n    try:\n        os.listdir(path)\n        return True\n    except:\n        return False\n        \ndef validateImageFile(key , removeErr=True, prn = False) :\n    #global DLDir #dd = '\/kaggle\/input\/testdata1\/applefood\/'\n    dd = DLDir + key\n    fnames =[]\n    errFName = []\n    if(chkFolder(dd)):\n        for fname in os.listdir(dd):\n            _fname = dd  +'\/' +fname\n            try:\n                Image(filename=_fname)\n                if(prn):print('ok',_fname )\n                fnames.append(_fname)\n            except:\n                if(removeErr):os.remove(_fname )\n                print('error read file  fn', _fname)\n    print ('done to validateImageFile',key )\n    return fnames,errFName","09b219b2":"#show image\nimport numpy as np # linear algebra\nfrom PIL import Image as im\nimport matplotlib.pyplot as plt\ndef showImage(fname):\n    img_array = np.array(im.open(fname))\n    plt.imshow(img_array)","c03b5341":"# Load Mobile\n#@@ As creating model, one could meet error sometimes. it may be busy in server or slow in connecting speed\nmodel = keras.applications.mobilenet_v2.MobileNetV2()","385c2896":"img_file='..\/input\/testdata\/Granny_Smith.jpg'\nImage(filename=img_file)","cd508bf6":"# check model prediction\npreprocessed_image = prepare_image(img_file)\npredictions = model.predict(preprocessed_image)\nresults = decode_predictions(predictions)\nprint(results[0])","018f8e31":"img_file='..\/input\/images1\/banana.jpg'\nImage(filename=img_file)","6c6eead1":"# check model prediction\npreprocessed_image = prepare_image(img_file)\npredictions = model.predict(preprocessed_image)\nresults = decode_predictions(predictions)\nprint(results)","b49f0525":"def funDownLoadImage( key , print_urls = False , print_size = False, print_paths = False):\n    !pip install google_images_download\n    from google_images_download import google_images_download\n    global DLDir #dd = '\/kaggle\/input\/testdata1\/applefood\/'\n    dd = DLDir \n    response = google_images_download.googleimagesdownload()\n    arguments = {\"keywords\":key,\"limit\":30,\n                 \"print_urls\":print_urls,\"print_size\":print_size,\"print_paths\":print_paths,\"format\":\"jpg\", \"size\":\">400*300\",\n                 \"output_directory\" : dd\n                }\n    paths = response.download(arguments)\n    return paths","995b2b9d":"#first check if file exist already before downloading\nfnames,errFName = validateImageFile(fruit1 )\nif(len(fnames)<=0) : \n    paths = funDownLoadImage(fruit1)\n    validateImageFile(fruit1 , False ) #validate again","c2487910":"#downloading #2\nfnames,errFName = validateImageFile(fruit2 )\nif(len(fnames)<=0) : \n    paths = funDownLoadImage(fruit2)\n    validateImageFile(fruit2 , False ) #validate again","bc3e6a3e":"#R","cbfec87e":"#DLDir = \"..\/input\/testdata1\/\"    #directory of downloaded files\n\n#!ls -l ..\/input\/testdata1\/Granny_Smith","caa56895":"# remove files of URLError \/ Wrong image format\n'''\n!rm .\/downloads\/apple\/15.*\n!rm .\/downloads\/apple\/2.*\n!rm .\/downloads\/apple\/8.*\n!rm .\/downloads\/apple\/4.*\n!rm .\/downloads\/apple\/14.*\n!rm .\/downloads\/apple\/13.*\n!rm .\/downloads\/apple\/16.*\n!rm .\/downloads\/apple\/17.*\n!rm .\/downloads\/apple\/19.*\n!rm .\/downloads\/apple\/20.*\n# rename files with special characters\n#!mv .\/downloads\/\"apple food\/2.* .\/downloads\/\"apple\"\/2.blue-tit.jpg\n#!mv .\/downloads\/apple\/18.* .\/downloads\/\"apple\"\/18.blue-tit.jpg\n'''","c9004b05":"\n'''\n'# remove files of URLError \/ Wrong image format\n!rm .\/downloads\/banana\/10.*.jpg\n!rm .\/downloads\/banana\/14.*.jpg\n!rm .\/downloads\/banana\/15.*.jpg\n# rename files with special characters\n!mv .\/downloads\/banana\/12.* .\/downloads\/banana\/13.Waterpear.jpg\n'''","86574d5a":"# Data Generator\ntrain_datagen=ImageDataGenerator(preprocessing_function=preprocess_input)\n\ntrain_generator=train_datagen.flow_from_directory(DLDir,\n                                                target_size=(224,224),\n                                                color_mode='rgb',\n                                                batch_size=32,\n                                                class_mode='categorical',\n                                                shuffle=True)","0a6c0bb9":"num_classes = 2\nprediction_dict = {0: fruit1, 1: fruit2}\n#prediction_dict = {1: \"apple food\", 0: \"Water pear\"}","269614c0":"# Load Model (MobieNet V2)\nbase_model=keras.applications.mobilenet_v2.MobileNetV2(input_shape=(224,224,3),weights='imagenet',include_top=False) #imports the mobilenet model and discards the last 1000 neuron layer.\n\n# Add Extra Layers to Model\nx=base_model.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(1024,activation='relu')(x) #we add dense layers so that the model can learn more complex functions and classify for better results.\nx=Dense(1024,activation='relu')(x) #dense layer 2\nx=Dense(512,activation='relu')(x) #dense layer 3\npreds=Dense(num_classes,activation='softmax')(x) #final layer with softmax activation\n\nmodel=Model(inputs=base_model.input,outputs=preds)","75c3290f":"# Check layers no. & name\nfor i,layer in enumerate(model.layers):\n    print(i,layer.name)","d8495f11":"# set extra layers to trainable (layer #155~159)\nfor layer in model.layers[:155]:\n    layer.trainable=False\nfor layer in model.layers[155:]:\n    layer.trainable=True\n\n# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='adam',metrics=['accuracy'])\nmodel.summary()","6204c65f":"# Train Model (target is loss <0.01)\nnum_epochs = 20\nstep_size_train=train_generator.n\/\/train_generator.batch_size\nmodel.fit_generator(generator=train_generator, steps_per_epoch=step_size_train, epochs=num_epochs)","62ca7de0":"#showImage('..\/input\/testdata\/Granny_Smith.jpg')\n","d52e2a78":"#img_file='..\/input\/images22\/apple.jpg'\nimg_file='..\/input\/testdata\/Granny_Smith.jpg'\nImage(filename=img_file)","926367f8":"# Test the new model\npreprocessed_image = prepare_image(img_file)\npredictions = model.predict(preprocessed_image)\nmaxindex = int(np.argmax(predictions))\nprint(predictions[0][maxindex],prediction_dict[maxindex])","bae943cc":"img_file='..\/input\/images2\/applef.jpg'\nImage(filename=img_file)","e359418f":"# Test the new model\npreprocessed_image = prepare_image(img_file)\npredictions = model.predict(preprocessed_image)\nmaxindex = int(np.argmax(predictions))\nprint(predictions[0][maxindex],prediction_dict[maxindex])","f874748f":"img_file='..\/input\/images\/German_Shepherd.jpg'\nImage(filename=img_file)","407117aa":"# Test the new model\npreprocessed_image = prepare_image(img_file)\npredictions = model.predict(preprocessed_image)\nprint(predictions[0])","21661f30":"R","5a7cc25c":"# remove downloaded images\n!rm -rf ..\/input\/testdata1\/","cfc691de":"> ## Test New Model","239d8e72":"### *Confirm the model recognize German Shepherd*","fe882901":"## Load Model (Keras built-in)","53342e25":"[](http:\/\/)[](http:\/\/)### Download Water pear Images","dbfbe96e":"### Download fruit2 food images","486993cb":"### Download fruit1 images","c8d9b746":"## Test Model","ef58c65e":"## Download Images from Internet","94e9d7cd":"# Image Classification - MobileNet v2 Transfer Learning","b35c3d72":"### Install google_images_download"}}