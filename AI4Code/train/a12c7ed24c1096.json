{"cell_type":{"472e4bb8":"code","7bbe82d4":"code","1fcdcf40":"code","13e29a3f":"code","9ed26118":"code","f3608696":"code","bc6dfbde":"code","aa88bc36":"code","0659d27f":"code","66e13dd6":"code","e654bb06":"code","5fd5b2b5":"code","5d372a52":"code","3aeaee0c":"code","ddce2a52":"markdown"},"source":{"472e4bb8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","7bbe82d4":"# Load CSV files\ntrain_df = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntest_df = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\nsubmission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')","1fcdcf40":"# Shape of train and test dataset\nprint(\"Shape of training data : {}\".format(train_df.shape))\nprint(\"Shape of test data : {}\".format(test_df.shape))","13e29a3f":"def add_features(df):\n    # Moving average\n    df[\"u_in_ma_lag1\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(1).rolling(window=3).mean()\n#     df[\"u_in_ma_lag2\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(2).rolling(window=3).mean()\n#     df[\"u_in_ma_lag3\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(3).rolling(window=3).mean()\n#     df[\"u_in_ma_lag4\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(4).rolling(window=3).mean()\n#     df[\"u_in_ma_lag5\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(5).rolling(window=3).mean()\n    df[\"u_in_ma_lag-1\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(-1).rolling(window=3).mean()\n#     df[\"u_in_ma_lag-2\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(-2).rolling(window=3).mean()\n#     df[\"u_in_ma_lag-3\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(-3).rolling(window=3).mean()\n#     df[\"u_in_ma_lag-4\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(-4).rolling(window=3).mean()\n#     df[\"u_in_ma_lag-5\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(-5).rolling(window=3).mean()\n    \n    \n    # Lag feature\n    df[\"u_in_lag1\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(1)\n#     df[\"u_in_lag2\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(2)\n#     df[\"u_in_lag3\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(3)\n#     df[\"u_in_lag4\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(4)\n#     df[\"u_in_lag5\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(5)\n    df[\"u_in_lag-1\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(-1)\n#     df[\"u_in_lag-2\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(-2)\n#     df[\"u_in_lag-3\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(-3)\n#     df[\"u_in_lag-4\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(-4)\n#     df[\"u_in_lag-5\"] = df.groupby([\"breath_id\"])[\"u_in\"].shift(-5)\n    \n    # u_in mean and std, u_out mean and std\n    df[\"u_in_mean\"] = df.groupby(['breath_id'])['u_in'].transform('mean')\n    df[\"u_in_std\"] = df.groupby(['breath_id'])['u_in'].transform('std')\n    df[\"u_out_mean\"] = df.groupby(['breath_id'])['u_out'].transform('mean')\n    df[\"u_out_std\"] = df.groupby(['breath_id'])['u_out'].transform('std')\n    \n    return df.fillna(0)\n    ","9ed26118":"train_df = add_features(train_df)\ntest_df = add_features(test_df)","f3608696":"train_df.head(5)","bc6dfbde":"# plt.figure(figsize=(15, 15))\n# train_df_corr = train_df.drop([\"id\", \"breath_id\", \"R\", \"C\", \"time_step\"], axis=1)\n# train_corr = train_df_corr.corr()\n# sns.heatmap(train_corr, vmax=1, vmin=-1, center=0, annot=True)","aa88bc36":"# LightGBM\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nfrom statistics import mean\n\nfolds = 4   # Number of fold\nkf = KFold(n_splits=folds)\n\n# Set LGBM hyper parameters\nlgbm_params = {\n    \"objective\":\"regression\",\n    \"random_seed\":1234\n}\n\n# Set explanatory variable and Objective variable\ntrain_x = train_df.drop([\"id\", \"breath_id\", \"pressure\"], axis=1)\ntrain_y = train_df[\"pressure\"]","0659d27f":"# Train model and predict\nmodels = []\nrmses = []\npreds = np.zeros(len(train_x))\n\nnum_boost_round = 20000\nearly_stopping_rounds = 1000\nverbose_eval = 100\n\nfor train_index, val_index in kf.split(train_x):\n    x_train = train_x.iloc[train_index]\n    x_valid = train_x.iloc[val_index]\n    y_train = train_y.iloc[train_index]\n    y_valid = train_y.iloc[val_index]\n    \n    lgb_train = lgb.Dataset(x_train, y_train)\n    lgb_eval = lgb.Dataset(x_valid, y_valid, reference=lgb_train)\n    \n    model_lgb = lgb.train(lgbm_params,\n                         lgb_train,\n                         valid_sets=lgb_eval,\n                         num_boost_round=num_boost_round,\n                         early_stopping_rounds=early_stopping_rounds,\n                         verbose_eval=verbose_eval)\n    \n    y_pred = model_lgb.predict(x_valid, num_iteration=model_lgb.best_iteration)\n    tmp_rmse = np.sqrt(mean_squared_error(y_valid, y_pred))\n    print(tmp_rmse)\n    \n    models.append(model_lgb)\n    rmses.append(tmp_rmse)\n    preds[val_index] = y_pred\n    \n","66e13dd6":"# Calculate average of RMSE\nmean(rmses)","e654bb06":"# Plot actual and pred\nactual_pred_df = pd.DataFrame({\n    \"actual\" : train_y,\n    \"pred\" : preds\n})\n\nactual_pred_df.plot(xlim=[0,320])","5fd5b2b5":"# Plot variables importance\nfor model in models:\n    lgb.plot_importance(model, importance_type=\"gain\")","5d372a52":"# Create submit data\ntest_x = test_df.drop([\"id\", \"breath_id\"], axis=1)\n\nsubmit_preds = []\n\nfor model in models:\n    submit_pred = model.predict(test_x)\n    submit_preds.append(submit_pred)\n\n# Calculate mean\npreds_array = np.array(submit_preds)\npreds_mean = np.mean(preds_array, axis=0)","3aeaee0c":"# Create submit file\nsubmission[\"pressure\"] = preds_mean\nsubmission.to_csv(\"ventilator_submit01.csv\", index=False)","ddce2a52":"### "}}