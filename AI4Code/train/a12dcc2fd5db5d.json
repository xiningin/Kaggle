{"cell_type":{"012fb6d9":"code","e9513795":"code","630138fb":"code","baa87226":"code","3f1ff283":"code","1ac1dbca":"code","5ababa62":"code","467287fd":"code","d95516e7":"code","e14a2e99":"code","76cb53e7":"code","e784b59e":"code","f438be92":"code","3f8eaff3":"code","3ed85721":"code","c68d15fe":"code","589a4efc":"code","9b481026":"code","f3979124":"code","aaef1fd2":"code","b85cb9bb":"code","4e9e2c25":"code","adcde8cc":"code","e2a8f41b":"code","4adf3a78":"code","4b11ccfa":"code","e3920c97":"code","cbd30e0f":"markdown","5e63b7bd":"markdown","84ce2749":"markdown","aa703261":"markdown","001a7262":"markdown","a266d078":"markdown","71742dde":"markdown","636260e0":"markdown","e10d5607":"markdown","44dddaf4":"markdown","afb642f5":"markdown","4cff23cd":"markdown"},"source":{"012fb6d9":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns","e9513795":"train_transaction = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv')\ntrain_transaction.head()","630138fb":"train_transaction.isFraud.head(10000)[train_transaction.isFraud == 0].count()","baa87226":"train_transaction.isFraud.head(10000).hist()","3f1ff283":"reduced_transaction_df = train_transaction.head(10000)","1ac1dbca":"# head of dataset\nreduced_transaction_df.head()","5ababa62":"reduced_transaction_df.isnull().values.any","467287fd":"reduced_transaction_df.info()","d95516e7":"reduced_transaction_df.describe()","e14a2e99":"print('number of non-fraudulent transactions is {}'.format(reduced_transaction_df.isFraud[reduced_transaction_df.isFraud == 0].count()))\nprint('number of fraudulent transactions is {}'.format(reduced_transaction_df.isFraud[reduced_transaction_df.isFraud == 1].count()))","76cb53e7":"print('Rate of fraudulent transaction is {} %'.format((reduced_transaction_df.isFraud[reduced_transaction_df.isFraud == 1].count() \/ 10000 * 100)))","e784b59e":"print('Categorical colums are :')\nlist_non_cat = reduced_transaction_df.loc[:,reduced_transaction_df.dtypes == np.object].columns.tolist()\nlist_non_cat","f438be92":"print('Numeric colums are :')\nlist_num = reduced_transaction_df.loc[:,reduced_transaction_df.dtypes != np.object].columns.tolist()\nlist_num","3f8eaff3":"reduced_transaction_df.loc[:,list_num].describe()","3ed85721":"# rate of nan values per column\ndf_missing = (reduced_transaction_df.isna().sum() \/ 10000)\ndf_missing\n","c68d15fe":"# rate of zeros per column\n'''df_missing = (reduced_transaction_df.isna().sum() \/ 10000)\ndf_missing'''","589a4efc":"def show3D_transaction_data(transac_dataset, x_axis_name, y_axis_name, z_axis_name):\n    zOffset = 0.02\n    limit = len(transac_dataset)\n    sns.reset_orig()\n    fig = plt.figure(figsize=(10,12))\n    ax = fig.add_subplot(111,projection='3d')\n    \n\nfig = plt.figure()\nax = plt.axes(projection=\"3d\")\n\n\ndef show3D_transation_data(training_set, x_points, y_points, z_points):\n    z_line = np.linspace(0, 15, 1000)\n    x_line = np.sin(z_line)\n    y_line = np.cos(z_line)\n    ax.plot3D(x_line, y_line, z_line, 'black')\n    ax.scatter3D(x_points, y_points, z_points, c=z_points, cmap='hsv');\n    \n    \nshow3D_transation_data(training_set, training_set['TransactionAmt'], training_set['card1'], training_set['addr1'])","9b481026":"def show3D_transaction_data_fraud_only(transac_dataset, x_axis_name, y_axis_name,z_axis_name):\n    ","f3979124":"reduced_transaction_df.head()","aaef1fd2":"one_hot_encoded_X = pd.get_dummies(reduced_transaction_df.copy())","b85cb9bb":"from sklearn.impute import SimpleImputer\nmy_imputer = SimpleImputer(missing_values=np.nan,strategy='median')\nX_with_imputed_values = pd.DataFrame(my_imputer.fit_transform(one_hot_encoded_X))\nX_with_imputed_values.columns = one_hot_encoded_X.columns","4e9e2c25":"X_with_imputed_values.isnull().values.any","adcde8cc":"X_with_imputed_values.head()","e2a8f41b":"np.array(X_with_imputed_values.isFraud.values)","4adf3a78":"from sklearn.ensemble import IsolationForest\nfrom scipy import stats\noutlier_ratio = 0.3\nrng = np.random.RandomState(99)\nlabels = X_with_imputed_values.isFraud.values\nto_model_columns=X_with_imputed_values.columns[2:]\nx = X_with_imputed_values[to_model_columns]\nclf = IsolationForest(max_samples='auto', contamination=outlier_ratio, \\\n                        random_state=rng, behaviour='new')\n\n\n\n\nclf.fit(x)\n\ny_pred = clf.predict(x)\nnum_errors = sum(y_pred != labels)\nprint('Number of errors = {}'.format(num_errors))\n","4b11ccfa":"X_with_imputed_values['if_outliers'] = y_pred\nX_with_imputed_values['if_outliers']","e3920c97":"scores_pred = clf.decision_function(x)\nthreshold = stats.scoreatpercentile(scores_pred,100 * outlier_ratio)\nxx, yy = np.meshgrid(np.linspace(-11,11,1000),np.linspace(-11,11,1000))\nZ = clf.decision_function(np.c_[xx.ravel(),yy.ravel()])\nZ = Z.reshape(xx.shape)\n\ninlier_plot = plt.plot(x[:num_inliers,0],x[:num_inliers,1],'go',label='inliers')\noutlier_plot = plt.plot(x[-num_inliers:,0],x[-num_inliers:,1],'ko',label='outliers')\nplt.contour(xx,yy,Z,levels=[threshold],linewidths=5,colors='gray')\nplt.contour(xx,yy,Z,levels=np.linspace(Z.min(),threshold,7),cmap=plt.cm.Greys_r)\nplt.contour(xx,yy,Z,levels=[threshold,Z.max()],colors='gray')\n\nplt.xlim(-11,11)\nplt.ylim(-11,11)\nplt.legend(numpoints=1)\nplt.show()","cbd30e0f":"The objective of this lab session is twofold:\n*  Deploy data analysis for fraud detection in a highly incomplete dataset\n*  Perform anomaly detection using IsolationForest and Local Outlier Factor (LOF) algorithm and evaluate their complementarity for \u2013 unsupervised \u2013 anomaly detection.","5e63b7bd":"## 5 Data Cleaning","84ce2749":"## 4 Dataset Visualisation","aa703261":"# Lab Session Anomaly Detection","001a7262":"### Local Outlier Factor","a266d078":"## Objective of this lab session","71742dde":"## 3 Data set observation","636260e0":"## 6 Outlier Detection","e10d5607":"## 2 Loading Data","44dddaf4":"### Isolation Forest","afb642f5":"## 1 Libraries Loading","4cff23cd":"### Comparison of IsolationForest and LOF"}}