{"cell_type":{"748de1a5":"code","ac527dd6":"code","0071e8a9":"code","e8288869":"code","de58bb45":"code","b46044aa":"code","7a250f57":"code","36810173":"code","2859925e":"code","f1b87e3e":"code","50d4f26a":"code","85282d3c":"code","11c47ccc":"code","fe0a771c":"code","f5711193":"code","ab58edf3":"code","29aa3b4b":"code","09506a9f":"code","a78c40d2":"code","b7896d01":"code","afe87815":"code","d8ac1141":"code","a2a8a6a0":"code","d2e61d94":"code","72d87f87":"code","c2b96639":"code","8a7b9ce7":"code","13fd8c98":"code","16d32dd2":"code","48641e4d":"code","ff9ccc4f":"code","41167c1d":"code","a9f4c290":"code","0b2500a4":"code","8e634028":"code","1b92dd99":"code","87956589":"code","8337fd17":"code","d145ec1e":"code","91fc3253":"code","ec0c381d":"code","5ddd9b28":"code","05f637e3":"code","52b7f808":"code","55838313":"code","1160b32e":"code","976012d2":"code","9000ab70":"code","235f6507":"code","71712b6d":"code","ed545549":"code","612688f1":"code","c0e01db7":"code","2d7a5daf":"code","0e0d7dad":"code","8f655fe2":"code","8ea67191":"code","6189720d":"code","db87e1b4":"code","6db8651a":"code","6fc14437":"code","30173274":"code","ba4442c3":"code","f8678f01":"code","7d5a3560":"code","0607101e":"code","f473b75e":"code","fa671ade":"code","f5feff93":"code","9027880c":"code","166ddd92":"code","c6e8cfe2":"code","fd706ad3":"code","e9413b8c":"code","518979d2":"code","56bebf83":"code","ecba461a":"code","5dad794d":"code","347c2e05":"code","556e8d75":"code","fc3db5a5":"code","139792fb":"code","4e2cf3b5":"code","981d0415":"code","8ed91242":"code","fd1d3cef":"code","b77eacbd":"code","1652217e":"code","b9fd11e3":"code","3eb46fe3":"code","6c2d1aff":"code","65309c71":"code","bacfd568":"code","606640af":"code","0f2c3a46":"code","a04f7577":"markdown","a1c02b20":"markdown","37312f3a":"markdown","9cb4fae7":"markdown","2b8cf648":"markdown","2999df47":"markdown","d75fbf5a":"markdown","8ec19435":"markdown","256c0ffb":"markdown","20e1a3d5":"markdown","ad65e10f":"markdown","76d9b8e7":"markdown","38209863":"markdown","51d8e201":"markdown","866401ea":"markdown","ac025bc2":"markdown","066b5b8d":"markdown","d4cbc83c":"markdown","15cfb619":"markdown","b61142c4":"markdown","2b391ee1":"markdown","83a09472":"markdown","985f0553":"markdown","5ac89599":"markdown","f60d69d7":"markdown","6fcebf27":"markdown","bef8f5c2":"markdown","7d10ed9a":"markdown","9691f618":"markdown","39987715":"markdown","cae67632":"markdown","5d8a89ae":"markdown","692fc718":"markdown","f7c4a28c":"markdown","531fecf1":"markdown","fc16a82e":"markdown","5f120f66":"markdown","818b6764":"markdown","b9a31fac":"markdown","59aa10a7":"markdown","5ec0a53f":"markdown","69c3a8af":"markdown","9470c266":"markdown","52e517ad":"markdown","065d21e9":"markdown","349047b1":"markdown","fc0315ed":"markdown","207cfaf2":"markdown","a727ae5b":"markdown","d4b69cba":"markdown","2930f05c":"markdown","5ebbe717":"markdown","a325e93d":"markdown","bb9a5b0f":"markdown","bb93aa88":"markdown","d427bdf7":"markdown","1b672103":"markdown","5e1c181f":"markdown","a9e7c92b":"markdown","5b737160":"markdown","6bc6afda":"markdown","546e28d1":"markdown","e1207868":"markdown","66f565b1":"markdown","592945d0":"markdown","8eec5d99":"markdown","942a44f0":"markdown","47b22f3a":"markdown","e6810d4c":"markdown","a73f4c32":"markdown","c2e3e299":"markdown","2da6dfc3":"markdown","10eac83c":"markdown","68e523ce":"markdown","eebfb346":"markdown","15cf105e":"markdown","b0768f88":"markdown","f5254d45":"markdown","206a52ed":"markdown","e4a9bc24":"markdown","fddfb547":"markdown","d4fc4972":"markdown","c3a4879b":"markdown","b96398dd":"markdown","5cb6b497":"markdown"},"source":{"748de1a5":"import pandas as pd\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")","ac527dd6":"import zipfile\nzf = zipfile.ZipFile(\"\/kaggle\/input\/msk-redefining-cancer-treatment\/training_variants.zip\")\ndata = pd.read_csv(zf.open(\"training_variants\"))#.head(500)\nprint('Number of data points : ', data.shape[0])\nprint('Number of features : ', data.shape[1])\nprint('Features : ', data.columns.values)\ndata.head()","0071e8a9":"# note the seprator in this file\n# zf = zipfile.ZipFile(\"\/kaggle\/input\/msk-redefining-cancer-treatment\/training_text.zip\")\n!rm -rf training_text\n!unzip \"\/kaggle\/input\/msk-redefining-cancer-treatment\/training_text.zip\" \ndata_text = pd.read_csv(\"training_text\", sep=\"\\|\\|\", engine=\"python\", names=[\"ID\",\"TEXT\"], skiprows=1)\n# data_text =pd.read_csv(\"training\/training_text\",sep=\"\\|\\|\",engine=\"python\",names=[\"ID\",\"TEXT\"],skiprows=1)\nprint('Number of data points : ', data_text.shape[0])\nprint('Number of features : ', data_text.shape[1])\nprint('Features : ', data_text.columns.values)\ndata_text.head()","e8288869":"# loading stop words from nltk library\nfrom nltk.corpus import stopwords\nstop_words = set(stopwords.words('english'))\n\n\ndef nlp_preprocessing(total_text, index, column_name):\n    if type(total_text) is not int:\n        string = \"\"\n        # replace every special char with space\n        total_text = re.sub('[^a-zA-Z0-9\\n]', ' ', total_text)\n        # replace multiple spaces with single space\n        total_text = re.sub('\\s+',' ', total_text)\n        # converting all the chars into lower-case.\n        total_text = total_text.lower()\n        \n        for word in total_text.split():\n        # if the word is a not a stop word then retain that word from the data\n            if not word in stop_words:\n                string += word.strip() + \" \"\n        \n        return string","de58bb45":"def nlp_preprocessing_wrapper(data_text, column_name):\n    start_time = time.clock()\n    for index, row in data_text.iterrows():\n        if type(row[column_name]) is str:\n            data_text[column_name][index] = nlp_preprocessing(row[column_name], index, column_name)\n        else:\n            print(\"there is no text description for id:\",index)\n    print('Time took for preprocessing the text :',time.clock() - start_time, \"seconds\")    ","b46044aa":"#text processing stage.\nimport time\nimport re\n# from tqdm import tqdm\nnlp_preprocessing_wrapper(data_text, column_name=\"TEXT\")","7a250f57":"# merging both gene_variations and text data based on ID\nresult = pd.merge(data, data_text,on='ID', how='left')\nresult.head()","36810173":"result[result.isnull().any(axis=1)]","2859925e":"result.loc[result['TEXT'].isnull(),'TEXT'] = result['Gene'] +' '+result['Variation']","f1b87e3e":"result[result['ID']==1109]","50d4f26a":"from sklearn.model_selection import train_test_split\ny_true = result['Class'].values\n# replace spaces with underscore in Gene values\nresult[\"Gene\"] = result[\"Gene\"].str.replace('\\s+', '_')\n# replace spaces with underscore Variation values\nresult[\"Variation\"] = result[\"Variation\"].str.replace('\\s+', '_')\n\n# split the data into test and train by maintaining same distribution of output varaible 'y_true' [stratify=y_true]\nX_train, test_df, y_train, y_test = train_test_split(result, y_true, stratify=y_true, test_size=0.2)\n# split the train data into train and cross validation by maintaining same distribution of output varaible 'y_train' [stratify=y_train]\ntrain_df, cv_df, y_train, y_cv = train_test_split(X_train, y_train, stratify=y_train, test_size=0.2)","85282d3c":"print('Number of data points in train data:', train_df.shape[0])\nprint('Number of data points in test data:', test_df.shape[0])\nprint('Number of data points in cross validation data:', cv_df.shape[0])","11c47ccc":"import matplotlib.pyplot as plt\n\n# it returns a dict, keys as class labels and values as the number of data points in that class\ntrain_class_distribution = train_df['Class'].value_counts().sort_index()\ntest_class_distribution = test_df['Class'].value_counts().sort_index()\ncv_class_distribution = cv_df['Class'].value_counts().sort_index()\n\n\nmy_colors = 'rgbkymc'\ntrain_class_distribution.plot(kind='bar', color=[char for char in my_colors])\nplt.xlabel('Class')\nplt.ylabel('Data points per Class')\nplt.title('Distribution of yi in train data')\nplt.grid()\nplt.show()\n\n# ref: argsort https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.argsort.html\n# -(train_class_distribution.values): the minus sign will give us in decreasing order\nsorted_yi = np.argsort(-train_class_distribution.values)\nfor i in sorted_yi:\n    print('Number of data points in class', i+1, ':',train_class_distribution.values[i], '(', np.round((train_class_distribution.values[i]\/train_df.shape[0]*100), 3), '%)')\n\n    \nprint('-'*80)\nmy_colors = 'rgbkymc'\ntest_class_distribution.plot(kind='bar', color=[char for char in my_colors])\nplt.xlabel('Class')\nplt.ylabel('Data points per Class')\nplt.title('Distribution of yi in test data')\nplt.grid()\nplt.show()\n\n# ref: argsort https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.argsort.html\n# -(train_class_distribution.values): the minus sign will give us in decreasing order\nsorted_yi = np.argsort(-test_class_distribution.values)\nfor i in sorted_yi:\n    print('Number of data points in class', i+1, ':',test_class_distribution.values[i], '(', np.round((test_class_distribution.values[i]\/test_df.shape[0]*100), 3), '%)')\n\nprint('-'*80)\nmy_colors = 'rgbkymc'\ncv_class_distribution.plot(kind='bar', color=[char for char in my_colors])\nplt.xlabel('Class')\nplt.ylabel('Data points per Class')\nplt.title('Distribution of yi in cross validation data')\nplt.grid()\nplt.show()\n\n# ref: argsort https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.argsort.html\n# -(train_class_distribution.values): the minus sign will give us in decreasing order\nsorted_yi = np.argsort(-train_class_distribution.values)\nfor i in sorted_yi:\n    print('Number of data points in class', i+1, ':',cv_class_distribution.values[i], '(', np.round((cv_class_distribution.values[i]\/cv_df.shape[0]*100), 3), '%)')\n","fe0a771c":"# This function plots the confusion matrices given y_i, y_i_hat.\ndef plot_confusion_matrix(test_y, predict_y):\n    \n    # Confusion matrix \n    C = confusion_matrix(test_y, predict_y)\n    # C = 9,9 matrix, each cell (i,j) represents number of points of class i are predicted class j\n    \n    # Recall matrix \n    A =(((C.T)\/(C.sum(axis=1))).T)\n    #divid each element of the confusion matrix with the sum of elements in that column\n    \n    # C = [[1, 2],\n    #     [3, 4]]\n    # C.T = [[1, 3],\n    #        [2, 4]]\n    # C.sum(axis = 1)  axis=0 corresonds to columns and axis=1 corresponds to rows in two diamensional array\n    # C.sum(axix =1) = [[3, 7]]\n    # ((C.T)\/(C.sum(axis=1))) = [[1\/3, 3\/7]\n    #                           [2\/3, 4\/7]]\n\n    # ((C.T)\/(C.sum(axis=1))).T = [[1\/3, 2\/3]\n    #                           [3\/7, 4\/7]]\n    # sum of row elements = 1\n    \n    # Precision matrix\n    B =(C\/C.sum(axis=0))\n    #divid each element of the confusion matrix with the sum of elements in that row\n    # C = [[1, 2],\n    #     [3, 4]]\n    # C.sum(axis = 0)  axis=0 corresonds to columns and axis=1 corresponds to rows in two diamensional array\n    # C.sum(axix =0) = [[4, 6]]\n    # (C\/C.sum(axis=0)) = [[1\/4, 2\/6],\n    #                      [3\/4, 4\/6]] \n    \n    labels = [1,2,3,4,5,6,7,8,9]\n    # representing A in heatmap format\n    print(\"-\"*20, \"Confusion matrix\", \"-\"*20)\n    plt.figure(figsize=(20,7))\n    sns.heatmap(C, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()\n\n    print(\"-\"*20, \"Precision matrix (Columm Sum=1)\", \"-\"*20)\n    plt.figure(figsize=(20,7))\n    sns.heatmap(B, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()\n    \n    # representing B in heatmap format\n    print(\"-\"*20, \"Recall matrix (Row sum=1)\", \"-\"*20)\n    plt.figure(figsize=(20,7))\n    sns.heatmap(A, annot=True, cmap=\"YlGnBu\", fmt=\".3f\", xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()","f5711193":"rand_probs = np.random.rand(1, 9)\n# ((rand_probs\/sum(sum(rand_probs)))[0])\n# print(sum(sum(rand_probs)))\n# print(rand_probs)\n(rand_probs\/sum(sum(rand_probs)))[0]","ab58edf3":"# we need to generate 9 numbers and the sum of numbers should be 1\n# one solution is to genarate 9 numbers and divide each of the numbers by their sum\n# ref: https:\/\/stackoverflow.com\/a\/18662466\/4084039\nfrom sklearn.metrics.classification import log_loss\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\n\ntest_data_len = test_df.shape[0]\ncv_data_len = cv_df.shape[0]\n\n# we create a output array that has exactly same size as the CV data\ncv_predicted_y = np.zeros((cv_data_len,9))\nfor i in range(cv_data_len):\n    # Probabilities of a point being of any of the 9 classes are generated randomly here\n    rand_probs = np.random.rand(1,9)\n    # Some dirty syntax bracketing\n    cv_predicted_y[i] = ((rand_probs\/sum(sum(rand_probs)))[0])\nprint(\"Log loss on Cross Validation Data using Random Model\",log_loss(y_cv,cv_predicted_y, eps=1e-15))\n\n\n# Test-Set error.\n#we create a output array that has exactly same as the test data\ntest_predicted_y = np.zeros((test_data_len,9))\nfor i in range(test_data_len):\n    rand_probs = np.random.rand(1,9)\n    test_predicted_y[i] = ((rand_probs\/sum(sum(rand_probs)))[0])\nprint(\"Log loss on Test Data using Random Model\",log_loss(y_test,test_predicted_y, eps=1e-15))\n\npredicted_y =np.argmax(test_predicted_y, axis=1)\nplot_confusion_matrix(y_test, predicted_y+1)","29aa3b4b":"# code for response coding with Laplace smoothing.\n# alpha : used for laplace smoothing\n# feature: ['gene', 'variation']\n# df: ['train_df', 'test_df', 'cv_df']\n# algorithm\n# ----------\n# Consider all unique values and the number of occurances of given feature in train data dataframe\n# build a vector (1*9) , the first element = (number of times it occured in class1 + 10*alpha \/ number of \n# time it occurred in total data+90*alpha)\n\n# For a particular gene, we will make a 9 dimensional vector (for 9 classes), representing the probabilties\n# of being in any of the class, given the gene code value.\n\n# gv_dict is like a look up table, for every gene it store a (1*9) representation of it.\n\n# for a value of feature in df:\n# if it is in train data:\n# we add the vector that was stored in 'gv_dict' look up table to 'gv_fea'\n# if it is not there is train:\n# we add [1\/9, 1\/9, 1\/9, 1\/9,1\/9, 1\/9, 1\/9, 1\/9, 1\/9] to 'gv_fea'\n# return 'gv_fea'\n# ----------------------\n\n# get_gv_fea_dict: Get Gene varaition Feature Dict\ndef get_gv_fea_dict(alpha, feature, df):\n    # value_count: it contains a dict like\n    # print(train_df['Gene'].value_counts())\n    # output:\n    #        {BRCA1      174\n    #         TP53       106\n    #         EGFR        86\n    #         BRCA2       75\n    #         PTEN        69\n    #         KIT         61\n    #         BRAF        60\n    #         ERBB2       47\n    #         PDGFRA      46\n    #         ...}\n    # print(train_df['Variation'].value_counts())\n    # output:\n    # {\n    # Truncating_Mutations                     63\n    # Deletion                                 43\n    # Amplification                            43\n    # Fusions                                  22\n    # Overexpression                            3\n    # E17K                                      3\n    # Q61L                                      3\n    # S222D                                     2\n    # P130S                                     2\n    # ...\n    # }\n    value_count = train_df[feature].value_counts()\n    \n    # gv_dict : Gene Variation Dict, which contains the probability array for each gene\/variation\n    gv_dict = dict()\n    \n    # denominator will contain the number of time that particular feature occured in whole data\n    for i, denominator in value_count.items():\n        # vec will contain (p(yi==1\/Gi) probability of gene\/variation belongs to perticular class\n        # vec is 9 diamensional vector\n        vec = []\n        for k in range(1,10):\n            # print(train_df.loc[(train_df['Class']==1) & (train_df['Gene']=='BRCA1')])\n            #         ID   Gene             Variation  Class  \n            # 2470  2470  BRCA1                S1715C      1   \n            # 2486  2486  BRCA1                S1841R      1   \n            # 2614  2614  BRCA1                   M1R      1   \n            # 2432  2432  BRCA1                L1657P      1   \n            # 2567  2567  BRCA1                T1685A      1   \n            # 2583  2583  BRCA1                E1660G      1   \n            # 2634  2634  BRCA1                W1718L      1   \n            # cls_cnt.shape[0] will return the number of rows\n\n            cls_cnt = train_df.loc[(train_df[feature]==i) & (train_df['Class']==k)]\n            \n            # cls_cnt.shape[0](numerator) will contain the number of time that particular feature occured in whole data\n            vec.append((cls_cnt.shape[0] + alpha*10)\/ (denominator + 90*alpha))\n\n        # we are adding the gene\/variation to the dict as key and vec as value\n        gv_dict[i]=vec\n    return gv_dict\n\n# Get Gene variation feature\ndef get_gv_feature(alpha, feature, df):\n    # print(gv_dict)\n    #     {'BRCA1': [0.20075757575757575, 0.03787878787878788, 0.068181818181818177, 0.13636363636363635, 0.25, 0.19318181818181818, 0.03787878787878788, 0.03787878787878788, 0.03787878787878788], \n    #      'TP53': [0.32142857142857145, 0.061224489795918366, 0.061224489795918366, 0.27040816326530615, 0.061224489795918366, 0.066326530612244902, 0.051020408163265307, 0.051020408163265307, 0.056122448979591837], \n    #      'EGFR': [0.056818181818181816, 0.21590909090909091, 0.0625, 0.068181818181818177, 0.068181818181818177, 0.0625, 0.34659090909090912, 0.0625, 0.056818181818181816], \n    #      'BRCA2': [0.13333333333333333, 0.060606060606060608, 0.060606060606060608, 0.078787878787878782, 0.1393939393939394, 0.34545454545454546, 0.060606060606060608, 0.060606060606060608, 0.060606060606060608], \n    #      'PTEN': [0.069182389937106917, 0.062893081761006289, 0.069182389937106917, 0.46540880503144655, 0.075471698113207544, 0.062893081761006289, 0.069182389937106917, 0.062893081761006289, 0.062893081761006289], \n    #      'KIT': [0.066225165562913912, 0.25165562913907286, 0.072847682119205295, 0.072847682119205295, 0.066225165562913912, 0.066225165562913912, 0.27152317880794702, 0.066225165562913912, 0.066225165562913912], \n    #      'BRAF': [0.066666666666666666, 0.17999999999999999, 0.073333333333333334, 0.073333333333333334, 0.093333333333333338, 0.080000000000000002, 0.29999999999999999, 0.066666666666666666, 0.066666666666666666],\n    #      ...\n    #     }\n    gv_dict = get_gv_fea_dict(alpha, feature, df)\n    # value_count is similar in get_gv_fea_dict\n    value_count = train_df[feature].value_counts()\n    \n    # gv_fea: Gene_variation feature, it will contain the feature for each feature value in the data\n    gv_fea = []\n    # for every feature values in the given data frame we will check if it is there in the train data then we will add the feature to gv_fea\n    # if not we will add [1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9] to gv_fea\n    for index, row in df.iterrows():\n        if row[feature] in dict(value_count).keys():\n            gv_fea.append(gv_dict[row[feature]])\n        else:\n            gv_fea.append([1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9,1\/9])\n    return gv_fea","09506a9f":"unique_genes = train_df['Gene'].value_counts()\nprint('Number of Unique Genes :', unique_genes.shape[0])\n# the top 10 genes that occured most\nprint(unique_genes.head(10))","a78c40d2":"print(\"Ans: There are\", unique_genes.shape[0] ,\"different categories of genes in the train data, and\\\nthey are distibuted as follows\")\n\ns = sum(unique_genes.values);\nh = unique_genes.values\/s\nplt.plot(h, label=\"Histrogram of Genes\")\nplt.xlabel('Index of a Gene')\nplt.ylabel('Number of Occurances')\nplt.legend()\nplt.grid()\nplt.show()\n","b7896d01":"c = np.cumsum(h)\nplt.plot(c,label='Cumulative distribution of Genes')\nplt.grid()\nplt.legend()\nplt.show()","afe87815":"train_df.head()","d8ac1141":"# response-coding of the Gene feature\n# alpha is used for laplace smoothing\nalpha = 1\n# train gene feature\ntrain_gene_feature_responseCoding = np.array(get_gv_feature(alpha, \"Gene\", train_df))\n# test gene feature\ntest_gene_feature_responseCoding = np.array(get_gv_feature(alpha, \"Gene\", test_df))\n# cross validation gene feature\ncv_gene_feature_responseCoding = np.array(get_gv_feature(alpha, \"Gene\", cv_df))","a2a8a6a0":"print(\"train_gene_feature_responseCoding is converted feature using respone coding method\")\nprint(\"The shape of gene feature: \", train_gene_feature_responseCoding.shape)","d2e61d94":"# from sklearn.feature_extraction.text import CountVectorizer\n# gene_vectorizer = CountVectorizer()\n# train_gene_feature_onehotCoding = gene_vectorizer.fit_transform(train_df['Gene'])","72d87f87":"# one-hot encoding of Gene feature.\nfrom sklearn.feature_extraction.text import CountVectorizer\ngene_vectorizer = CountVectorizer()\ntrain_gene_feature_onehotCoding = gene_vectorizer.fit_transform(train_df['Gene'])\ntest_gene_feature_onehotCoding = gene_vectorizer.transform(test_df['Gene'])\ncv_gene_feature_onehotCoding = gene_vectorizer.transform(cv_df['Gene'])","c2b96639":"train_gene_feature_onehotCoding.shape, test_gene_feature_onehotCoding.shape, cv_gene_feature_onehotCoding.shape","8a7b9ce7":"# gene_vectorizer.get_feature_names()","13fd8c98":"print(\"train_gene_feature_onehotCoding is converted feature using one-hot encoding method.\") \nprint(\"The shape of gene feature:\", train_gene_feature_onehotCoding.shape)","16d32dd2":"alpha = [10 ** x for x in range(-5, 1)] # hyperparam for SGD classifier.\n\n# read more about SGDClassifier() at \n# http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.SGDClassifier.html\n# ------------------------------\n# default parameters\n# SGDClassifier(loss=\u2019hinge\u2019, penalty=\u2019l2\u2019, alpha=0.0001, l1_ratio=0.15, fit_intercept=True, max_iter=None, tol=None, \n# shuffle=True, verbose=0, epsilon=0.1, n_jobs=1, random_state=None, learning_rate=\u2019optimal\u2019, eta0=0.0, power_t=0.5, \n# class_weight=None, warm_start=False, average=False, n_iter=None)\n\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.calibration import CalibratedClassifierCV\n\ncv_log_error_array=[]\nfor i in alpha:\n    clf = SGDClassifier(alpha=i, penalty='l2', loss='log', random_state=42)\n    clf.fit(train_gene_feature_onehotCoding, y_train)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_gene_feature_onehotCoding, y_train)\n    predict_y = sig_clf.predict_proba(cv_gene_feature_onehotCoding)\n    cv_log_error_array.append(log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\n    print('For values of alpha = ', i, \"The log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\n\nfig, ax = plt.subplots()\nax.plot(alpha, cv_log_error_array,c='g')\nfor i, txt in enumerate(np.round(cv_log_error_array,3)):\n    ax.annotate((alpha[i],np.round(txt,3)), (alpha[i],cv_log_error_array[i]))\nplt.grid()\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha i's\")\nplt.ylabel(\"Error measure\")\nplt.show()\n\n\nbest_alpha = np.argmin(cv_log_error_array)\nclf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_gene_feature_onehotCoding, y_train)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_gene_feature_onehotCoding, y_train)\n\npredict_y = sig_clf.predict_proba(train_gene_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_gene_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_gene_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))\n","48641e4d":"print(\"Q6. How many data points in Test and CV datasets are covered by the \", unique_genes.shape[0], \" genes in train dataset?\")\n\ntest_coverage=test_df[test_df['Gene'].isin(list(set(train_df['Gene'])))].shape[0]\ncv_coverage=cv_df[cv_df['Gene'].isin(list(set(train_df['Gene'])))].shape[0]\n\nprint('Ans\\n1. In test data',test_coverage, 'out of',test_df.shape[0], \":\",(test_coverage\/test_df.shape[0])*100)\nprint('2. In cross validation data',cv_coverage, 'out of ',cv_df.shape[0],\":\" ,(cv_coverage\/cv_df.shape[0])*100)","ff9ccc4f":"unique_variations = train_df['Variation'].value_counts()\nprint('Number of Unique Variations :', unique_variations.shape[0])\n# the top 10 variations that occured most\nprint(unique_variations.head(10))","41167c1d":"print(\"There are\", unique_variations.shape[0] ,\"different categories of variations in the train data,\\\nand they are distibuted as follows: \")\n\ns = sum(unique_variations.values)\nh = unique_variations.values\/s\nplt.plot(h, label=\"Histrogram of Variations\")\nplt.xlabel('Index of a Variation')\nplt.ylabel('Number of Occurances')\nplt.legend()\nplt.grid()\nplt.show()","a9f4c290":"c = np.cumsum(h)\n# print(c)\nplt.plot(c,label='Cumulative distribution of Variations')\nplt.grid()\nplt.legend()\nplt.show()","0b2500a4":"# alpha is used for laplace smoothing\nalpha = 1\n# train gene feature\nprint(\"train...\")\ntrain_variation_feature_responseCoding = np.array(get_gv_feature(alpha, \"Variation\", train_df))\n# test gene feature\nprint(\"test...\")\ntest_variation_feature_responseCoding = np.array(get_gv_feature(alpha, \"Variation\", test_df))\n# cross validation gene feature\nprint(\"cv...\")\ncv_variation_feature_responseCoding = np.array(get_gv_feature(alpha, \"Variation\", cv_df))","8e634028":"print(\"train_variation_feature_responseCoding is a converted feature using the response coding method.\") \nprint(\"The shape of Variation feature:\", train_variation_feature_responseCoding.shape)","1b92dd99":"# one-hot encoding of variation feature.\nvariation_vectorizer = CountVectorizer()\ntrain_variation_feature_onehotCoding = variation_vectorizer.fit_transform(train_df['Variation'])\ntest_variation_feature_onehotCoding = variation_vectorizer.transform(test_df['Variation'])\ncv_variation_feature_onehotCoding = variation_vectorizer.transform(cv_df['Variation'])","87956589":"print(\"train_variation_feature_onehotEncoded is converted feature using the onne-hot encoding method.\") \nprint(\"The shape of Variation feature: \", train_variation_feature_onehotCoding.shape)","8337fd17":"alpha = [10 ** x for x in range(-5, 1)]\ncv_log_error_array=[]\nfor i in alpha:\n    clf = SGDClassifier(alpha=i, penalty='l2', loss='log', random_state=42)\n    clf.fit(train_variation_feature_onehotCoding, y_train)\n    \n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_variation_feature_onehotCoding, y_train)\n    predict_y = sig_clf.predict_proba(cv_variation_feature_onehotCoding)\n    \n    cv_log_error_array.append(log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\n    print('For values of alpha = ', i, \"The log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\n\nfig, ax = plt.subplots()\nax.plot(alpha, cv_log_error_array,c='g')\nfor i, txt in enumerate(np.round(cv_log_error_array,3)):\n    ax.annotate((alpha[i],np.round(txt,3)), (alpha[i],cv_log_error_array[i]))\nplt.grid()\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha i's\")\nplt.ylabel(\"Error measure\")\nplt.show()\n\n\nbest_alpha = np.argmin(cv_log_error_array)\nclf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_variation_feature_onehotCoding, y_train)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_variation_feature_onehotCoding, y_train)\n\npredict_y = sig_clf.predict_proba(train_variation_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_variation_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_variation_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))\n","d145ec1e":"print(\"Q12. How many data points are covered by total\", unique_variations.shape[0], \"genes in test and cross validation data sets?\")\ntest_coverage=test_df[test_df['Variation'].isin(list(set(train_df['Variation'])))].shape[0]\ncv_coverage=cv_df[cv_df['Variation'].isin(list(set(train_df['Variation'])))].shape[0]\nprint('Ans\\n1. In test data',test_coverage, 'out of',test_df.shape[0], \":\",(test_coverage\/test_df.shape[0])*100)\nprint('2. In cross validation data',cv_coverage, 'out of ',cv_df.shape[0],\":\" ,(cv_coverage\/cv_df.shape[0])*100)","91fc3253":"# As we can see, in test and cv, different values of genes have come, which our model doesm't even know of.\n# That's why there is a difference in the values of log-loss in train and (test, cv) data.","ec0c381d":"# cls_text is a dataframe\n# for every row in dataframe, consider the 'TEXT'\n# split the words by space\n# make a dict with those words\n# increment its count whenever we see that word\n\nfrom collections import defaultdict\ndef extract_dictionary_paddle(cls_text_df):\n    dictionary = defaultdict(int)\n    for index, row in cls_text_df.iterrows():\n        for word in row['TEXT'].split():\n            dictionary[word] +=1\n    return dictionary","5ddd9b28":"def make_class_wise_and_total_text_dict(train_df):\n    word_count_class_wise_dict = []\n    # dict_list =[] contains 9 dictoinaries each corresponds to a class\n    for i in range(1,10):\n        cls_text_df = train_df[train_df['Class']==i]\n        # build a word dict based on the words in that class\n        word_count_class_wise_dict.append(extract_dictionary_paddle(cls_text_df))\n        # append it to dict_list\n\n    # word_count_class_wise[i] is build on i'th  class text data\n    # word_count_total_tex is buid on whole training text data\n    word_count_total_text_dict = extract_dictionary_paddle(train_df)\n    return word_count_class_wise_dict, word_count_total_text_dict","05f637e3":"import math\n#https:\/\/stackoverflow.com\/a\/1602964\ndef get_text_responsecoding(df, word_count_class_wise_dict, word_count_total_text_dict):\n    text_feature_responseCoding = np.zeros((df.shape[0],9))\n    for i in range(0,9):\n        row_index = 0\n        for index, row in df.iterrows():\n            sum_prob = 0\n            for word in row['TEXT'].split():\n                # Laplace smoothing is again happening here with response coding\n                sum_prob += math.log(((word_count_class_wise_dict[i].get(word,0)+10 )\/(word_count_total_text_dict.get(word,0)+90)))\n            text_feature_responseCoding[row_index][i] = math.exp(sum_prob\/len(row['TEXT'].split()))\n            row_index += 1\n    return text_feature_responseCoding","52b7f808":"def make_confuse_array(train_text_feature_names, word_count_class_wise_dict, word_count_total_text_dict):\n    confuse_array = []\n    for i in train_text_features:\n        ratios = []\n        for j in range(0,9):\n            ratios.append((word_count_class_wise_dict[j][i]+10 )\/(word_count_total_text_dict[i]+90))\n        confuse_array.append(ratios)\n    confuse_array = np.array(confuse_array)\n    return confuse_array","55838313":"#response coding of text features\nword_count_class_wise_dict, word_count_total_text_dict = make_class_wise_and_total_text_dict(train_df)","1160b32e":"# Dimension of below matrices (#rows, classes)\ntrain_text_feature_responseCoding  = get_text_responsecoding(train_df, word_count_class_wise_dict, word_count_total_text_dict)\ntest_text_feature_responseCoding  = get_text_responsecoding(test_df, word_count_class_wise_dict, word_count_total_text_dict)\ncv_text_feature_responseCoding  = get_text_responsecoding(cv_df, word_count_class_wise_dict, word_count_total_text_dict)","976012d2":"# https:\/\/stackoverflow.com\/a\/16202486\n# we convert each row values such that they sum to 1  \n# axis = 1 means sum all the ccolumn for each row\ntrain_text_feature_responseCoding = (train_text_feature_responseCoding.T\/train_text_feature_responseCoding.sum(axis=1)).T\ntest_text_feature_responseCoding = (test_text_feature_responseCoding.T\/test_text_feature_responseCoding.sum(axis=1)).T\ncv_text_feature_responseCoding = (cv_text_feature_responseCoding.T\/cv_text_feature_responseCoding.sum(axis=1)).T","9000ab70":"train_text_feature_responseCoding.shape","235f6507":"# building a CountVectorizer with all the words that occured minimum 3 times in train data\ntext_vectorizer = CountVectorizer(min_df=3)\ntrain_text_feature_onehotCoding = text_vectorizer.fit_transform(train_df['TEXT'])\n\n# getting all the feature names (words)\ntrain_text_feature_names = text_vectorizer.get_feature_names()\n# train_text_features\n\n# train_text_feature_onehotCoding.sum(axis=0).A1 will sum every column and returns (1*number of features) vector\n# So for each feature in one-hot-encoding,  train_text_feature_counts has a single value representing that feature\n# A1 is like ravel() function\ntrain_text_feature_counts = train_text_feature_onehotCoding.sum(axis=0).A1","71712b6d":"# zip(list(text_features),text_fea_counts) will zip a word with its number of times it occured\ntext_feature_dict = dict(zip(list(train_text_feature_names),train_text_feature_counts))\nprint(\"Total number of unique words in train data :\", len(train_text_feature_names))","ed545549":"from sklearn.preprocessing import normalize\n\n# don't forget to normalize every feature\ntrain_text_feature_onehotCoding = normalize(train_text_feature_onehotCoding, axis=0)\n\n# trasnform test and cv feature\n# we use the same vectorizer that was trained on train data\ntest_text_feature_onehotCoding = text_vectorizer.transform(test_df['TEXT'])\n# don't forget to normalize every feature\ntest_text_feature_onehotCoding = normalize(test_text_feature_onehotCoding, axis=0)\n\n# we use the same vectorizer that was trained on train data\ncv_text_feature_onehotCoding = text_vectorizer.transform(cv_df['TEXT'])\n# don't forget to normalize every feature\ncv_text_feature_onehotCoding = normalize(cv_text_feature_onehotCoding, axis=0)","612688f1":"#https:\/\/stackoverflow.com\/a\/2258273\/4084039\nsorted_text_feature_dict = dict(sorted(text_feature_dict.items(), key=lambda x: x[1] , reverse=True))\nsorted_text_occur = np.array(list(sorted_text_feature_dict.values()))","c0e01db7":"# sorted_text_occur.shape[0] - len(set(sorted_text_occur))","2d7a5daf":"from collections import Counter\n# Number of words for a given frequency.\n# print(Counter(sorted_text_occur))","0e0d7dad":"# Train a Logistic regression+Calibration model using text features whicha re on-hot encoded\nalpha = [10 ** x for x in range(-5, 1)]\n\n# read more about SGDClassifier() at \n# http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.SGDClassifier.html\n\ncv_log_error_array=[]\nfor i in alpha:\n    clf = SGDClassifier(alpha=i, penalty='l2', loss='log', random_state=42)\n    clf.fit(train_text_feature_onehotCoding, y_train)\n    \n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_text_feature_onehotCoding, y_train)\n    predict_y = sig_clf.predict_proba(cv_text_feature_onehotCoding)\n    cv_log_error_array.append(log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\n    print('For values of alpha = ', i, \"The log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\n\nfig, ax = plt.subplots()\nax.plot(alpha, cv_log_error_array,c='g')\nfor i, txt in enumerate(np.round(cv_log_error_array,3)):\n    ax.annotate((alpha[i],np.round(txt,3)), (alpha[i],cv_log_error_array[i]))\nplt.grid()\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha i's\")\nplt.ylabel(\"Error measure\")\nplt.show()\n\n\nbest_alpha = np.argmin(cv_log_error_array)\nclf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_text_feature_onehotCoding, y_train)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_text_feature_onehotCoding, y_train)\n\npredict_y = sig_clf.predict_proba(train_text_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_text_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_text_feature_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))\n","8f655fe2":"def get_intersec_text(df, train_text_feature_names):\n    df_text_vec = CountVectorizer(min_df=3)\n    df_text_fea = df_text_vec.fit_transform(df['TEXT'])\n    df_text_features = df_text_vec.get_feature_names()\n\n    df_text_fea_counts = df_text_fea.sum(axis=0).A1\n    df_text_fea_dict = dict(zip(list(df_text_features),df_text_fea_counts))\n    len1 = len(set(df_text_features))\n    len2 = len(set(train_text_feature_names) & set(df_text_features))\n    return len1,len2","8ea67191":"len1,len2 = get_intersec_text(test_df, train_text_feature_names)\nprint(np.round((len2\/len1)*100, 3), \"% of word of test data appeared in train data\")\nlen1,len2 = get_intersec_text(cv_df, train_text_feature_names)\nprint(np.round((len2\/len1)*100, 3), \"% of word of Cross Validation appeared in train data\")","6189720d":"#Data preparation for ML models.\n\n#Misc. functionns for ML models\n\n\ndef predict_and_plot_confusion_matrix(train_x, train_y,test_x, test_y, clf):\n    clf.fit(train_x, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x, train_y)\n    pred_y = sig_clf.predict(test_x)\n\n    # for calculating log_loss we willl provide the array of probabilities belongs to each class\n    print(\"Log loss :\",log_loss(test_y, sig_clf.predict_proba(test_x)))\n    # calculating the number of data points that are misclassified\n    print(\"Number of mis-classified points :\", np.count_nonzero((pred_y- test_y))\/test_y.shape[0])\n    plot_confusion_matrix(test_y, pred_y)","db87e1b4":"def report_log_loss(train_x, train_y, test_x, test_y,  clf):\n    clf.fit(train_x, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x, train_y)\n    sig_clf_probs = sig_clf.predict_proba(test_x)\n    return log_loss(test_y, sig_clf_probs, eps=1e-15)","6db8651a":"# this function will be used just for naive bayes\n# for the given indices, we will print the name of the features\n# and we will check whether the feature present in the test point text or not\ndef get_impfeature_names(indices, text, gene, var, no_features):\n    gene_count_vec = CountVectorizer()\n    var_count_vec = CountVectorizer()\n    text_count_vec = CountVectorizer(min_df=3)\n    \n    gene_vec = gene_count_vec.fit(train_df['Gene'])\n    var_vec  = var_count_vec.fit(train_df['Variation'])\n    text_vec = text_count_vec.fit(train_df['TEXT'])\n    \n    fea1_len = len(gene_vec.get_feature_names())\n    fea2_len = len(var_count_vec.get_feature_names())\n    \n    word_present = 0\n    for i,v in enumerate(indices):\n        if (v < fea1_len):\n            word = gene_vec.get_feature_names()[v]\n            yes_no = True if word == gene else False\n            if yes_no:\n                word_present += 1\n                print(i, \"Gene feature [{}] present in test data point [{}]\".format(word,yes_no))\n        elif (v < fea1_len+fea2_len):\n            word = var_vec.get_feature_names()[v-(fea1_len)]\n            yes_no = True if word == var else False\n            if yes_no:\n                word_present += 1\n                print(i, \"variation feature [{}] present in test data point [{}]\".format(word,yes_no))\n        else:\n            word = text_vec.get_feature_names()[v-(fea1_len+fea2_len)]\n            yes_no = True if word in text.split() else False\n            if yes_no:\n                word_present += 1\n                print(i, \"Text feature [{}] present in test data point [{}]\".format(word,yes_no))\n\n    print(\"Out of the top \",no_features,\" features \", word_present, \"are present in query point\")","6fc14437":"# merging gene, variance and text features\n\n# building train, test and cross validation data sets\n# a = [[1, 2], \n#      [3, 4]]\n# b = [[4, 5], \n#      [6, 7]]\n# hstack(a, b) = [[1, 2, 4, 5],\n#                [ 3, 4, 6, 7]]\nfrom scipy import sparse as sp\n\ntrain_gene_var_onehotCoding = sp.hstack((train_gene_feature_onehotCoding,train_variation_feature_onehotCoding))\ntest_gene_var_onehotCoding = sp.hstack((test_gene_feature_onehotCoding,test_variation_feature_onehotCoding))\ncv_gene_var_onehotCoding = sp.hstack((cv_gene_feature_onehotCoding,cv_variation_feature_onehotCoding))\n\ntrain_x_onehotCoding = sp.hstack((train_gene_var_onehotCoding, train_text_feature_onehotCoding)).tocsr()\ntrain_y = np.array(list(train_df['Class']))\n\ntest_x_onehotCoding = sp.hstack((test_gene_var_onehotCoding, test_text_feature_onehotCoding)).tocsr()\ntest_y = np.array(list(test_df['Class']))\n\ncv_x_onehotCoding = sp.hstack((cv_gene_var_onehotCoding, cv_text_feature_onehotCoding)).tocsr()\ncv_y = np.array(list(cv_df['Class']))\n\n\ntrain_gene_var_responseCoding = np.hstack((train_gene_feature_responseCoding,train_variation_feature_responseCoding))\ntest_gene_var_responseCoding = np.hstack((test_gene_feature_responseCoding,test_variation_feature_responseCoding))\ncv_gene_var_responseCoding = np.hstack((cv_gene_feature_responseCoding,cv_variation_feature_responseCoding))\n\ntrain_x_responseCoding = np.hstack((train_gene_var_responseCoding, train_text_feature_responseCoding))\ntest_x_responseCoding = np.hstack((test_gene_var_responseCoding, test_text_feature_responseCoding))\ncv_x_responseCoding = np.hstack((cv_gene_var_responseCoding, cv_text_feature_responseCoding))\n","30173274":"print(\"One hot encoding features :\")\nprint(\"(number of data points * number of features) in train data = \", train_x_onehotCoding.shape)\nprint(\"(number of data points * number of features) in test data = \", test_x_onehotCoding.shape)\nprint(\"(number of data points * number of features) in cross validation data =\", cv_x_onehotCoding.shape)","ba4442c3":"print(\" Response encoding features :\")\nprint(\"(number of data points * number of features) in train data = \", train_x_responseCoding.shape)\nprint(\"(number of data points * number of features) in test data = \", test_x_responseCoding.shape)\nprint(\"(number of data points * number of features) in cross validation data =\", cv_x_responseCoding.shape)","f8678f01":"from sklearn.naive_bayes import MultinomialNB\nalpha = [0.00001, 0.0001, 0.001, 0.1, 1, 10, 100,1000]\ncv_log_error_array = []\nfor i in alpha:\n    print(\"for alpha =\", i)\n    clf = MultinomialNB(alpha=i)\n    clf.fit(train_x_onehotCoding, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x_onehotCoding, train_y)\n    sig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n    cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n    # to avoid rounding error while multiplying probabilites we use log-probability estimates\n    print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \n\nfig, ax = plt.subplots()\nax.plot(np.log10(alpha), cv_log_error_array,c='g')\nfor i, txt in enumerate(np.round(cv_log_error_array,3)):\n    ax.annotate((alpha[i],str(txt)), (np.log10(alpha[i]),cv_log_error_array[i]))\nplt.grid()\nplt.xticks(np.log10(alpha))\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha i's\")\nplt.ylabel(\"Error measure\")\nplt.show()\n\n\nbest_alpha = np.argmin(cv_log_error_array)\nclf = MultinomialNB(alpha=alpha[best_alpha])\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\n\npredict_y = sig_clf.predict_proba(train_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))\n","7d5a3560":"clf = MultinomialNB(alpha=alpha[best_alpha])\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\nsig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n# to avoid rounding error while multiplying probabilites we use log-probability estimates\nprint(\"Log Loss :\",log_loss(cv_y, sig_clf_probs))\nprint(\"Number of missclassified point :\", np.count_nonzero((sig_clf.predict(cv_x_onehotCoding)- cv_y))\/cv_y.shape[0])\nplot_confusion_matrix(cv_y, sig_clf.predict(cv_x_onehotCoding.toarray()))","0607101e":"test_point_index = 1\nno_feature = 100\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices=np.argsort(abs(-clf.coef_))[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","f473b75e":"test_point_index = 5\nno_feature = 100\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(abs(-clf.coef_))[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","fa671ade":"from sklearn.neighbors import KNeighborsClassifier\nalpha = [5, 11, 15, 21, 31, 41, 51, 99]\ncv_log_error_array = []\nfor i in alpha:\n    print(\"for alpha =\", i)\n    clf = KNeighborsClassifier(n_neighbors=i)\n    clf.fit(train_x_responseCoding, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x_responseCoding, train_y)\n    sig_clf_probs = sig_clf.predict_proba(cv_x_responseCoding)\n    cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n    # to avoid rounding error while multiplying probabilites we use log-probability estimates\n    print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \n\nfig, ax = plt.subplots()\nax.plot(alpha, cv_log_error_array,c='g')\nfor i, txt in enumerate(np.round(cv_log_error_array,3)):\n    ax.annotate((alpha[i],str(txt)), (alpha[i],cv_log_error_array[i]))\nplt.grid()\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha i's\")\nplt.ylabel(\"Error measure\")\nplt.show()\n\n\nbest_alpha = np.argmin(cv_log_error_array)\nclf = KNeighborsClassifier(n_neighbors=alpha[best_alpha])\nclf.fit(train_x_responseCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_responseCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_responseCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_responseCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_responseCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))\n","f5feff93":"clf = KNeighborsClassifier(n_neighbors=alpha[best_alpha])\npredict_and_plot_confusion_matrix(train_x_responseCoding, train_y, cv_x_responseCoding, cv_y, clf)","9027880c":"clf = KNeighborsClassifier(n_neighbors=alpha[best_alpha])\nclf.fit(train_x_responseCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_responseCoding, train_y)\n\ntest_point_index = 1\npredicted_cls = sig_clf.predict(test_x_responseCoding[0].reshape(1,-1))\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Actual Class :\", test_y[test_point_index])\nneighbors = clf.kneighbors(test_x_responseCoding[test_point_index].reshape(1, -1), alpha[best_alpha])\nprint(\"The \",alpha[best_alpha],\" nearest neighbours of the test points belongs to classes\",train_y[neighbors[1][0]])\nprint(\"Fequency of nearest points :\",Counter(train_y[neighbors[1][0]]))","166ddd92":"clf = KNeighborsClassifier(n_neighbors=alpha[best_alpha])\nclf.fit(train_x_responseCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_responseCoding, train_y)\n\ntest_point_index = 7\n\npredicted_cls = sig_clf.predict(test_x_responseCoding[test_point_index].reshape(1,-1))\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Actual Class :\", test_y[test_point_index])\nneighbors = clf.kneighbors(test_x_responseCoding[test_point_index].reshape(1, -1), alpha[best_alpha])\nprint(\"the k value for knn is\",alpha[best_alpha],\"and the nearest neighbours of the test points belongs to classes\",train_y[neighbors[1][0]])\nprint(\"Fequency of nearest points :\",Counter(train_y[neighbors[1][0]]))","c6e8cfe2":"alpha = [10 ** x for x in range(-6, 3)]\ncv_log_error_array = []\nfor i in alpha:\n    print(\"for alpha =\", i, end=\" \")\n    clf = SGDClassifier(class_weight='balanced', alpha=i, penalty='l2', loss='log', random_state=42)\n    clf.fit(train_x_onehotCoding, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x_onehotCoding, train_y)\n    sig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n    cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n    # to avoid rounding error while multiplying probabilites we use log-probability estimates\n    print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \n\nfig, ax = plt.subplots()\nax.plot(alpha, cv_log_error_array,c='g')\nfor i, txt in enumerate(np.round(cv_log_error_array,3)):\n    ax.annotate((alpha[i],str(txt)), (alpha[i],cv_log_error_array[i]))\nplt.grid()\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha i's\")\nplt.ylabel(\"Error measure\")\nplt.show()\n\n\nbest_alpha = np.argmin(cv_log_error_array)\nclf = SGDClassifier(class_weight='balanced', alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","fd706ad3":"clf = SGDClassifier(class_weight='balanced', alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\npredict_and_plot_confusion_matrix(train_x_onehotCoding, train_y, cv_x_onehotCoding, cv_y, clf)","e9413b8c":"def get_imp_feature_names(text, indices, removed_ind = []):\n    word_present = 0\n    tabulte_list = []\n    incresingorder_ind = 0\n    for i in indices:\n        if i < train_gene_feature_onehotCoding.shape[1]:\n            tabulte_list.append([incresingorder_ind, \"Gene\", \"Yes\"])\n        elif i< 18:\n            tabulte_list.append([incresingorder_ind,\"Variation\", \"Yes\"])\n        if ((i > 17) & (i not in removed_ind)) :\n            word = train_text_features[i]\n            yes_no = True if word in text.split() else False\n            if yes_no:\n                word_present += 1\n            tabulte_list.append([incresingorder_ind,train_text_features[i], yes_no])\n        incresingorder_ind += 1\n    print(word_present, \"most importent features are present in our query point\")\n    print(\"-\"*50)\n    print(\"The features that are most importent of the \",predicted_cls[0],\" class:\")\n    print (tabulate(tabulte_list, headers=[\"Index\",'Feature name', 'Present or Not']))","518979d2":"clf = SGDClassifier(class_weight='balanced', alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_x_onehotCoding,train_y)\ntest_point_index = 1\nno_feature = 500\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(abs(-clf.coef_))[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","56bebf83":"test_point_index = 9\nno_feature = 500\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(abs(-clf.coef_))[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","ecba461a":"alpha = [10 ** x for x in range(-6, 1)]\ncv_log_error_array = []\nfor i in alpha:\n    print(\"for alpha =\", i, end=\" \")\n    clf = SGDClassifier(alpha=i, penalty='l2', loss='log', random_state=42)\n    clf.fit(train_x_onehotCoding, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x_onehotCoding, train_y)\n    sig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n    cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n    print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \n\nfig, ax = plt.subplots()\nax.plot(alpha, cv_log_error_array,c='g')\nfor i, txt in enumerate(np.round(cv_log_error_array,3)):\n    ax.annotate((alpha[i],str(txt)), (alpha[i],cv_log_error_array[i]))\nplt.grid()\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha i's\")\nplt.ylabel(\"Error measure\")\nplt.show()\n\n\nbest_alpha = np.argmin(cv_log_error_array)\nclf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","5dad794d":"clf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\npredict_and_plot_confusion_matrix(train_x_onehotCoding, train_y, cv_x_onehotCoding, cv_y, clf)","347c2e05":"clf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='log', random_state=42)\nclf.fit(train_x_onehotCoding,train_y)\ntest_point_index = 1\nno_feature = 500\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(abs(-clf.coef_))[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","556e8d75":"test_point_index = 34\nno_feature = 500\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(abs(-clf.coef_))[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","fc3db5a5":"# read more about support vector machines with linear kernals here \n# http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.svm.SVC.html\n\nalpha = [10 ** x for x in range(-5, 3)]\ncv_log_error_array = []\nfor i in alpha:\n    print(\"for C =\", i, end=\" \")\n    clf = SGDClassifier( class_weight='balanced', alpha=i, penalty='l2', loss='hinge', random_state=42)\n    clf.fit(train_x_onehotCoding, train_y)\n    sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n    sig_clf.fit(train_x_onehotCoding, train_y)\n    sig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n    cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n    print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \n\nfig, ax = plt.subplots()\nax.plot(alpha, cv_log_error_array,c='g')\nfor i, txt in enumerate(np.round(cv_log_error_array,3)):\n    ax.annotate((alpha[i],str(txt)), (alpha[i],cv_log_error_array[i]))\nplt.grid()\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha i's\")\nplt.ylabel(\"Error measure\")\nplt.show()\n\n\nbest_alpha = np.argmin(cv_log_error_array)\n# clf = SVC(C=i,kernel='linear',probability=True, class_weight='balanced')\nclf = SGDClassifier(class_weight='balanced', alpha=alpha[best_alpha], penalty='l2', loss='hinge', random_state=42)\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_onehotCoding)\nprint('For values of best alpha = ', alpha[best_alpha], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","139792fb":"clf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='hinge', random_state=42, class_weight='balanced')\npredict_and_plot_confusion_matrix(train_x_onehotCoding, train_y,cv_x_onehotCoding,cv_y, clf)","4e2cf3b5":"clf = SGDClassifier(alpha=alpha[best_alpha], penalty='l2', loss='hinge', random_state=42)\nclf.fit(train_x_onehotCoding,train_y)\ntest_point_index = 1\nno_feature = 500\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(abs(-clf.coef_))[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","981d0415":"test_point_index = 13\nno_feature = 500\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(abs(-clf.coef_))[predicted_cls-1][:,:no_feature]\nprint(\"-\"*50)\nget_impfeature_names(indices[0], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","8ed91242":"from sklearn.ensemble import RandomForestClassifier\nalpha = [100,200,500,1000,2000]\nmax_depth = [5, 10]\ncv_log_error_array = []\nfor i in alpha:\n    for j in max_depth:\n        print(\"for n_estimators =\", i,\"and max depth = \", j, end=\" \")\n        clf = RandomForestClassifier(n_estimators=i, criterion='gini', max_depth=j, random_state=42, n_jobs=-1)\n        clf.fit(train_x_onehotCoding, train_y)\n        sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n        sig_clf.fit(train_x_onehotCoding, train_y)\n        sig_clf_probs = sig_clf.predict_proba(cv_x_onehotCoding)\n        cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n        print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \n\n'''fig, ax = plt.subplots()\nfeatures = np.dot(np.array(alpha)[:,None],np.array(max_depth)[None]).ravel()\nax.plot(features, cv_log_error_array,c='g')\nfor i, txt in enumerate(np.round(cv_log_error_array,3)):\n    ax.annotate((alpha[int(i\/2)],max_depth[int(i%2)],str(txt)), (features[i],cv_log_error_array[i]))\nplt.grid()\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha i's\")\nplt.ylabel(\"Error measure\")\nplt.show()\n'''\n\nbest_alpha = np.argmin(cv_log_error_array)\nclf = RandomForestClassifier(n_estimators=alpha[int(best_alpha\/2)], criterion='gini', max_depth=max_depth[int(best_alpha%2)], random_state=42, n_jobs=-1)\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_onehotCoding)\nprint('For values of best estimator = ', alpha[int(best_alpha\/2)], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_onehotCoding)\nprint('For values of best estimator = ', alpha[int(best_alpha\/2)], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_onehotCoding)\nprint('For values of best estimator = ', alpha[int(best_alpha\/2)], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","fd1d3cef":"clf = RandomForestClassifier(n_estimators=alpha[int(best_alpha\/2)], criterion='gini', max_depth=max_depth[int(best_alpha%2)], random_state=42, n_jobs=-1)\npredict_and_plot_confusion_matrix(train_x_onehotCoding, train_y, cv_x_onehotCoding, cv_y, clf)","b77eacbd":"clf = RandomForestClassifier(n_estimators=alpha[int(best_alpha\/2)], criterion='gini', max_depth=max_depth[int(best_alpha%2)], random_state=42, n_jobs=-1)\nclf.fit(train_x_onehotCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_onehotCoding, train_y)\n\ntest_point_index = 1\nno_feature = 100\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.feature_importances_)\nprint(\"-\"*50)\nget_impfeature_names(indices[:no_feature], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","1652217e":"test_point_index = 19\nno_feature = 100\npredicted_cls = sig_clf.predict(test_x_onehotCoding[test_point_index])\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_onehotCoding[test_point_index]),4))\nprint(\"Actuall Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.feature_importances_)\nprint(\"-\"*50)\nget_impfeature_names(indices[:no_feature], test_df['TEXT'].iloc[test_point_index],test_df['Gene'].iloc[test_point_index],test_df['Variation'].iloc[test_point_index], no_feature)","b9fd11e3":"alpha = [10,50,100,200,500,1000]\nmax_depth = [2,3,5,10]\ncv_log_error_array = []\nfor i in alpha:\n    for j in max_depth:\n        print(\"for n_estimators =\", i,\"and max depth = \", j, end=\" \")\n        clf = RandomForestClassifier(n_estimators=i, criterion='gini', max_depth=j, random_state=42, n_jobs=-1)\n        clf.fit(train_x_responseCoding, train_y)\n        sig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\n        sig_clf.fit(train_x_responseCoding, train_y)\n        sig_clf_probs = sig_clf.predict_proba(cv_x_responseCoding)\n        cv_log_error_array.append(log_loss(cv_y, sig_clf_probs, labels=clf.classes_, eps=1e-15))\n        print(\"Log Loss :\",log_loss(cv_y, sig_clf_probs)) \n'''\nfig, ax = plt.subplots()\nfeatures = np.dot(np.array(alpha)[:,None],np.array(max_depth)[None]).ravel()\nax.plot(features, cv_log_error_array,c='g')\nfor i, txt in enumerate(np.round(cv_log_error_array,3)):\n    ax.annotate((alpha[int(i\/4)],max_depth[int(i%4)],str(txt)), (features[i],cv_log_error_array[i]))\nplt.grid()\nplt.title(\"Cross Validation Error for each alpha\")\nplt.xlabel(\"Alpha i's\")\nplt.ylabel(\"Error measure\")\nplt.show()\n'''\n\nbest_alpha = np.argmin(cv_log_error_array)\nclf = RandomForestClassifier(n_estimators=alpha[int(best_alpha\/4)], criterion='gini', max_depth=max_depth[int(best_alpha%4)], random_state=42, n_jobs=-1)\nclf.fit(train_x_responseCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_responseCoding, train_y)\n\npredict_y = sig_clf.predict_proba(train_x_responseCoding)\nprint('For values of best alpha = ', alpha[int(best_alpha\/4)], \"The train log loss is:\",log_loss(y_train, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(cv_x_responseCoding)\nprint('For values of best alpha = ', alpha[int(best_alpha\/4)], \"The cross validation log loss is:\",log_loss(y_cv, predict_y, labels=clf.classes_, eps=1e-15))\npredict_y = sig_clf.predict_proba(test_x_responseCoding)\nprint('For values of best alpha = ', alpha[int(best_alpha\/4)], \"The test log loss is:\",log_loss(y_test, predict_y, labels=clf.classes_, eps=1e-15))","3eb46fe3":"clf = RandomForestClassifier(max_depth=max_depth[int(best_alpha%4)], n_estimators=alpha[int(best_alpha\/4)], criterion='gini', max_features='auto',random_state=42)\npredict_and_plot_confusion_matrix(train_x_responseCoding, train_y,cv_x_responseCoding,cv_y, clf)","6c2d1aff":"clf = RandomForestClassifier(n_estimators=alpha[int(best_alpha\/4)], criterion='gini', max_depth=max_depth[int(best_alpha%4)], random_state=42, n_jobs=-1)\nclf.fit(train_x_responseCoding, train_y)\nsig_clf = CalibratedClassifierCV(clf, method=\"sigmoid\")\nsig_clf.fit(train_x_responseCoding, train_y)\n\n\ntest_point_index = 1\nno_feature = 27\npredicted_cls = sig_clf.predict(test_x_responseCoding[test_point_index].reshape(1,-1))\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_responseCoding[test_point_index].reshape(1,-1)),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.feature_importances_)\nprint(\"-\"*50)\nfor i in indices:\n    if i<9:\n        print(\"Gene is important feature\")\n    elif i<18:\n        print(\"Variation is important feature\")\n    else:\n        print(\"Text is important feature\")","65309c71":"test_point_index = 23\npredicted_cls = sig_clf.predict(test_x_responseCoding[test_point_index].reshape(1,-1))\nprint(\"Predicted Class :\", predicted_cls[0])\nprint(\"Predicted Class Probabilities:\", np.round(sig_clf.predict_proba(test_x_responseCoding[test_point_index].reshape(1,-1)),4))\nprint(\"Actual Class :\", test_y[test_point_index])\nindices = np.argsort(-clf.feature_importances_)\nprint(\"-\"*50)\nfor i in indices:\n    if i<9:\n        print(\"Gene is important feature\")\n    elif i<18:\n        print(\"Variation is important feature\")\n    else:\n        print(\"Text is important feature\")","bacfd568":"from sklearn.linear_model import LogisticRegression\nfrom mlxtend.classifier import StackingClassifier\n\nclf1 = SGDClassifier(alpha=0.001, penalty='l2', loss='log', class_weight='balanced', random_state=0)\nclf1.fit(train_x_onehotCoding, train_y)\nsig_clf1 = CalibratedClassifierCV(clf1, method=\"sigmoid\")\n\nclf2 = SGDClassifier(alpha=1, penalty='l2', loss='hinge', class_weight='balanced', random_state=0)\nclf2.fit(train_x_onehotCoding, train_y)\nsig_clf2 = CalibratedClassifierCV(clf2, method=\"sigmoid\")\n\n\nclf3 = MultinomialNB(alpha=0.001)\nclf3.fit(train_x_onehotCoding, train_y)\nsig_clf3 = CalibratedClassifierCV(clf3, method=\"sigmoid\")\n\nsig_clf1.fit(train_x_onehotCoding, train_y)\nprint(\"Logistic Regression :  Log Loss: %0.2f\" % (log_loss(cv_y, sig_clf1.predict_proba(cv_x_onehotCoding))))\nsig_clf2.fit(train_x_onehotCoding, train_y)\nprint(\"Support vector machines : Log Loss: %0.2f\" % (log_loss(cv_y, sig_clf2.predict_proba(cv_x_onehotCoding))))\nsig_clf3.fit(train_x_onehotCoding, train_y)\nprint(\"Naive Bayes : Log Loss: %0.2f\" % (log_loss(cv_y, sig_clf3.predict_proba(cv_x_onehotCoding))))\nprint(\"-\"*50)\nalpha = [0.0001,0.001,0.01,0.1,1,10] \nbest_alpha = 999\nfor i in alpha:\n    lr = LogisticRegression(C=i)\n    sclf = StackingClassifier(classifiers=[sig_clf1, sig_clf2, sig_clf3], meta_classifier=lr, use_probas=True)\n    sclf.fit(train_x_onehotCoding, train_y)\n    print(\"Stacking Classifer : for the value of alpha: %f Log Loss: %0.3f\" % (i, log_loss(cv_y, sclf.predict_proba(cv_x_onehotCoding))))\n    log_error =log_loss(cv_y, sclf.predict_proba(cv_x_onehotCoding))\n    if best_alpha > log_error:\n        best_alpha = log_error","606640af":"lr = LogisticRegression(C=0.1)\nsclf = StackingClassifier(classifiers=[sig_clf1, sig_clf2, sig_clf3], meta_classifier=lr, use_probas=True)\nsclf.fit(train_x_onehotCoding, train_y)\n\nlog_error = log_loss(train_y, sclf.predict_proba(train_x_onehotCoding))\nprint(\"Log loss (train) on the stacking classifier :\",log_error)\n\nlog_error = log_loss(cv_y, sclf.predict_proba(cv_x_onehotCoding))\nprint(\"Log loss (CV) on the stacking classifier :\",log_error)\n\nlog_error = log_loss(test_y, sclf.predict_proba(test_x_onehotCoding))\nprint(\"Log loss (test) on the stacking classifier :\",log_error)\n\nprint(\"Number of missclassified point :\", np.count_nonzero((sclf.predict(test_x_onehotCoding)- test_y))\/test_y.shape[0])\nplot_confusion_matrix(test_y=test_y, predict_y=sclf.predict(test_x_onehotCoding))","0f2c3a46":"#Refer:http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.ensemble.VotingClassifier.html\nfrom sklearn.ensemble import VotingClassifier\nvclf = VotingClassifier(estimators=[('lr', sig_clf1), ('svc', sig_clf2), ('rf', sig_clf3)], voting='soft')\nvclf.fit(train_x_onehotCoding, train_y)\nprint(\"Log loss (train) on the VotingClassifier :\", log_loss(train_y, vclf.predict_proba(train_x_onehotCoding)))\nprint(\"Log loss (CV) on the VotingClassifier :\", log_loss(cv_y, vclf.predict_proba(cv_x_onehotCoding)))\nprint(\"Log loss (test) on the VotingClassifier :\", log_loss(test_y, vclf.predict_proba(test_x_onehotCoding)))\nprint(\"Number of missclassified point :\", np.count_nonzero((vclf.predict(test_x_onehotCoding)- test_y))\/test_y.shape[0])\nplot_confusion_matrix(test_y=test_y, predict_y=vclf.predict(test_x_onehotCoding))","a04f7577":"<h4>4.5.5.2. Incorrectly Classified point<\/h4>","a1c02b20":"<h4>4.3.2.4. Feature Importance, Inorrectly Classified point<\/h4>","37312f3a":"<p style=\"font-size:18px;\"> <b>Q3.<\/b> How to featurize this Gene feature ?<\/p>\n\n<p style=\"font-size:16px;\"><b>Ans.<\/b>There are two ways we can featurize this variable: \n\n<ol><li>One hot Encoding<\/li><li>Response coding<\/li><\/ol><\/p>\n<p> We will choose the appropriate featurization based on the ML model we use.  For this problem of multi-class classification with categorical features, one-hot encoding is better for Logistic regression while response coding is better for Random Forests. <\/p>","9cb4fae7":"<h2>1.3. Real-world\/Business objectives and constraints.<\/h2>\n\n* No low-latency requirement.\n* Interpretability is important.\n* Errors can be very costly.\n* Probability of a data-point belonging to each class is needed.","2b8cf648":"<h3>3.1.3. Preprocessing of text<\/h3>","2999df47":"<h3>4.2.2. Testing the model with best hyper paramters<\/h3>","d75fbf5a":"<h4>4.3.2.2. Testing model with best hyper parameters<\/h4>","8ec19435":"<h4>4.3.2.1. Hyper paramter tuning<\/h4>","256c0ffb":"1. How many unique words are present in train data?\n2. How are word frequencies distributed?\n3. How to featurize text field?\n4. Is the text feature useful in predicitng y_i?\n5. Is the text feature stable across train, test and CV datasets?","20e1a3d5":"<h3>4.5.4. Testing model with best hyper parameters (Response Coding)<\/h3>","ad65e10f":"<h3>3.1.2. Reading Text Data<\/h3>","76d9b8e7":"<p style=\"font-size:36px;text-align:center\"> <b>Personalized cancer diagnosis<\/b> <\/p>","38209863":"<p style=\"font-size:18px;\"> <b>Q5.<\/b> Is the Gene feature stable across all the data sets (Test, Train, Cross validation)?<\/p>\n<p style=\"font-size:16px;\"> <b>Ans.<\/b> Yes, it is. Otherwise, the CV and Test errors would be significantly more than train error. <\/p>","51d8e201":"<h3>4.1.1. Naive Bayes<\/h3>","866401ea":"<h2>3.1. Reading Data<\/h2>","ac025bc2":"<h4>4.1.1.4. Feature Importance, Incorrectly classified point<\/h4>","066b5b8d":"<h3>4.5.3. Hyper paramter tuning (With Response Coding)<\/h3>","d4cbc83c":"<h2>4.1. Base Line Model<\/h2>","15cfb619":"<h3>4.3.2. Without Class balancing<\/h3>","b61142c4":"<h2>3.3 Univariate Analysis<\/h2>","2b391ee1":"<h3>4.7.1 testing with hyper parameter tuning<\/h3>","83a09472":"<p style=\"font-size:18px;\"> <b>Q9.<\/b> How to featurize this Variation feature ?<\/p>\n\n<p style=\"font-size:16px;\"><b>Ans.<\/b>There are two ways we can featurize this variable:\n<ol><li>One hot Encoding<\/li><li>Response coding<\/li><\/ol><\/p>\n<p> We will be using both these methods to featurize the Variation Feature <\/p>","985f0553":"<h2>4.3. Logistic Regression<\/h2>","5ac89599":"<h1>2. Machine Learning Problem Formulation<\/h1>\n\n<h2>2.1. Data<\/h2>\n\n<h3>2.1.1. Data Overview<\/h3>\n\n- Source: https:\/\/www.kaggle.com\/c\/msk-redefining-cancer-treatment\/data\n- We have two data files: one conatins the information about the genetic mutations and the other contains the clinical evidence (text) that  human experts\/pathologists use to classify the genetic mutations. \n- Both these data files are have a common column called ID\n- <p> \n    Data file's information:\n    <ul> \n        <li>\n        training_variants (ID , Gene, Variations, Class)\n        <\/li>\n        <li>\n        training_text (ID, Text)\n        <\/li>\n    <\/ul>\n<\/p>","f60d69d7":"<h3>3.2.3 Univariate Analysis on Text Feature<\/h3>","6fcebf27":"<h4>3.1.4.2. Distribution of y_i's in Train, Test and Cross Validation datasets<\/h4>","bef8f5c2":"<h2>4.2. K Nearest Neighbour Classification<\/h2>","7d10ed9a":"Let's build a model just like the earlier!","9691f618":"<h2>1.1. Description<\/h2>","39987715":"<h1>1. Business Problem<\/h1>","cae67632":"<h4>4.1.1.3. Feature Importance, Correctly classified point<\/h4>","5d8a89ae":"<h2>2.3. Train, CV and Test Datasets<\/h2>\n\nSplit the dataset randomly into three parts train, cross validation and test with 64%,16%, 20% of data respectively","692fc718":"<h3>4.5.1. Hyper paramter tuning (With One hot Encoding)<\/h3>","f7c4a28c":"<p style=\"font-size:18px;\"> <b>Q10.<\/b> How good is this Variation feature  in predicting y_i?<\/p>","531fecf1":"<h4>4.5.3.2. Inorrectly Classified point<\/h4>","fc16a82e":"<h4>4.3.1.1. Hyper paramter tuning<\/h4>","5f120f66":"<h4>4.3.3.1. For Correctly classified point<\/h4>","818b6764":"<h1>4. Machine Learning Models<\/h1>","b9a31fac":"<h2>3.2 Prediction using a 'Random' Model<\/h2>\n\n<p style=\"font-size:16px\"> In a 'Random' Model, we generate the NINE class probabilites randomly such that they sum to 1. <\/p>","59aa10a7":"<h4>4.3.3.2. For Incorrectly classified point<\/h4>","5ec0a53f":"<p style=\"font-size:18px;\"> <b>Q4.<\/b> How good is this gene feature  in predicting y_i?<\/p>","69c3a8af":"<h5>4.3.1.3.1. Correctly Classified point<\/h5>","9470c266":"<h3>4.4.1. Hyper paramter tuning<\/h3>","52e517ad":"<p style=\"font-size:18px;\"> <b>Q7.<\/b> Variation, What type of feature is it ?<\/p>\n<p style=\"font-size:16px;\"><b>Ans.<\/b> Variation is a categorical variable <\/p>\n<p style=\"font-size:18px;\"> <b>Q8.<\/b> How many categories are there?<\/p>","065d21e9":"<h2>4.7 Stack the models <\/h2>","349047b1":"<h3>2.2.3. Machine Learing Objectives and Constraints<\/h3>\n\n<p> Objective: Predict the probability of each data-point belonging to each of the nine classes.\n<\/p>\n<p> Constraints:\n<\/p>\n* Interpretability\n* Class probabilities are needed.\n* Penalize the errors in class probabilites => Metric is Log-loss.\n* No Latency constraints.","fc0315ed":"<p> We split the data into train, test and cross validation data sets, preserving the ratio of class distribution in the original data set  <\/p>","207cfaf2":"<h2>4.4. Linear Support Vector Machines<\/h2>","a727ae5b":"<h4>4.1.1.2. Testing the model with best hyper paramters<\/h4>","d4b69cba":"<h4>4.1.1.1. Hyper parameter tuning<\/h4>","2930f05c":"<h3>2.1.2. Example Data Point<\/h3>\n\n<h6>training_variants<\/h6>\n<hr>\nID,Gene,Variation,Class<br>\n0,FAM58A,Truncating Mutations,1 <br>\n1,CBL,W802*,2 <br>\n2,CBL,Q249E,2 <br>\n...\n\n<h6> training_text<\/h6>\n<hr>\nID,Text <br>\n0||Cyclin-dependent kinases (CDKs) regulate a variety of fundamental cellular processes. CDK10 stands out as one of the last orphan CDKs for which no activating cyclin has been identified and no kinase activity revealed. Previous work has shown that CDK10 silencing increases ETS2 (v-ets erythroblastosis virus E26 oncogene homolog 2)-driven activation of the MAPK pathway, which confers tamoxifen resistance to breast cancer cells. The precise mechanisms by which CDK10 modulates ETS2 activity, and more generally the functions of CDK10, remain elusive. Here we demonstrate that CDK10 is a cyclin-dependent kinase by identifying cyclin M as an activating cyclin. Cyclin M, an orphan cyclin, is the product of FAM58A, whose mutations cause STAR syndrome, a human developmental anomaly whose features include toe syndactyly, telecanthus, and anogenital and renal malformations. We show that STAR syndrome-associated cyclin M mutants are unable to interact with CDK10. Cyclin M silencing phenocopies CDK10 silencing in increasing c-Raf and in conferring tamoxifen resistance to breast cancer cells. CDK10\/cyclin M phosphorylates ETS2 in vitro, and in cells it positively controls ETS2 degradation by the proteasome. ETS2 protein levels are increased in cells derived from a STAR patient, and this increase is attributable to decreased cyclin M levels. Altogether, our results reveal an additional regulatory mechanism for ETS2, which plays key roles in cancer and development. They also shed light on the molecular mechanisms underlying STAR syndrome.Cyclin-dependent kinases (CDKs) play a pivotal role in the control of a number of fundamental cellular processes (1). The human genome contains 21 genes encoding proteins that can be considered as members of the CDK family owing to their sequence similarity with bona fide CDKs, those known to be activated by cyclins (2). Although discovered almost 20 y ago (3, 4), CDK10 remains one of the two CDKs without an identified cyclin partner. This knowledge gap has largely impeded the exploration of its biological functions. CDK10 can act as a positive cell cycle regulator in some cells (5, 6) or as a tumor suppressor in others (7, 8). CDK10 interacts with the ETS2 (v-ets erythroblastosis virus E26 oncogene homolog 2) transcription factor and inhibits its transcriptional activity through an unknown mechanism (9). CDK10 knockdown derepresses ETS2, which increases the expression of the c-Raf protein kinase, activates the MAPK pathway, and induces resistance of MCF7 cells to tamoxifen (6). ... ","5ebbe717":"<h3>4.4.2. Testing model with best hyper parameters<\/h3>","a325e93d":"<p style=\"font-size:18px;\"> <b>Q.<\/b> Is the Text feature stable across all the data sets (Test, Train, Cross validation)?<\/p>\n<p style=\"font-size:16px;\"> <b>Ans.<\/b> Yes, it seems like! <\/p>","bb9a5b0f":"<h3>3.2.1 Univariate Analysis on Gene Feature<\/h3>","bb93aa88":"<h3>4.2.4. Sample Query Point-2 <\/h3>","d427bdf7":"<p> Data: Memorial Sloan Kettering Cancer Center (MSKCC)<\/p>\n\n<h6> Context:<\/h6>\n<p> Source: https:\/\/www.kaggle.com\/c\/msk-redefining-cancer-treatment\/discussion\/35336#198462<\/p>\n\n<h6> Problem statement : <\/h6>\n<p> Classify the given genetic variations\/mutations based on evidence from text-based clinical literature. <\/p>","1b672103":"<h3>4.3.1. With Class balancing<\/h3>","5e1c181f":"<h3>4.7.3 Maximum Voting classifier <\/h3>","a9e7c92b":"<h3>4.5.3. Feature Importance<\/h3>","5b737160":"<h3>4.3.3. Feature Importance<\/h3>","6bc6afda":"<p>\n    <i>training_variants<\/i> is a comma separated file containing the description of the genetic mutations used for training. <br>\n    Fields are \n    <ul>\n        <li><b>ID : <\/b>the id of the row used to link the mutation to the clinical evidence<\/li>\n        <li><b>Gene : <\/b>the gene where this genetic mutation is located <\/li>\n        <li><b>Variation : <\/b>the aminoacid change for this mutations <\/li>\n        <li><b>Class :<\/b> 1-9 the class this genetic mutation has been classified on<\/li>\n    <\/ul>","546e28d1":"<h3>4.5.5. Feature Importance<\/h3>","e1207868":"<h3>4.2.1. Hyper parameter tuning<\/h3>","66f565b1":"There are many ways to estimate how good a feature is, in predicting y_i. One of the good methods is to build a proper ML model using just this feature. In this case, we will build a logistic regression model using only Gene feature (one hot encoded) to predict y_i.","592945d0":"<h4>4.3.1.2. Testing the model with best hyper paramters<\/h4>","8eec5d99":"<h3>4.5.2. Testing model with best hyper parameters (One Hot Encoding)<\/h3>","942a44f0":"<p style=\"font-size:18px;\"> <b>Q1.<\/b> Gene, What type of feature it is ?<\/p>\n<p style=\"font-size:16px;\"><b>Ans.<\/b> Gene is a categorical variable <\/p>\n<p style=\"font-size:18px;\"> <b>Q2.<\/b> How many categories are there and How they are distributed?<\/p>","47b22f3a":"Some articles and reference blogs about the problem statement:\n \n1. https:\/\/www.forbes.com\/sites\/matthewherper\/2017\/06\/03\/a-new-cancer-drug-helped-almost-everyone-who-took-it-almost-heres-what-it-teaches-us\/#2a44ee2f6b25\n2. https:\/\/www.youtube.com\/watch?v=UwbuW7oK8rk \n3. https:\/\/www.youtube.com\/watch?v=qxXRKVompI8","e6810d4c":"<h4>4.5.5.1. Correctly Classified point<\/h4>","a73f4c32":"<h4>4.3.2.3. Feature Importance, Correctly Classified point<\/h4>","c2e3e299":"<h4>4.5.3.1. Correctly Classified point<\/h4>","2da6dfc3":"<h4>4.3.1.3. Feature Importance<\/h4>","10eac83c":"<p style=\"font-size:18px;\"> <b>Q11.<\/b> Is the Variation feature stable across all the data sets (Test, Train, Cross validation)?<\/p>\n<p style=\"font-size:16px;\"> <b>Ans.<\/b> Not sure! But lets be very sure using the below analysis. <\/p>","68e523ce":"<h3>4.7.2 testing the model with the best hyper parameters<\/h3>","eebfb346":"<h5>4.3.1.3.2. Incorrectly Classified point<\/h5>","15cf105e":"<h2>4.5 Random Forest Classifier<\/h2>","b0768f88":"<h1>3. Exploratory Data Analysis<\/h1>","f5254d45":"<p style=\"font-size:24px;text-align:Center\"> <b>Stacking the three types of features <\/b><p>","206a52ed":"<h3>4.2.3.Sample Query point -1<\/h3>","e4a9bc24":"<h2>1.2. Source\/Useful Links<\/h2>","fddfb547":"<h3>3.1.1. Reading Gene and Variation Data<\/h3>","d4fc4972":"When we caculate the probability of a feature belongs to any particular class, we apply laplace smoothing\n\n**(numerator + 10\\*alpha) \/ (denominator + 90\\*alpha)**","c3a4879b":"<h2>2.2. Mapping the real-world problem to an ML problem<\/h2>\n\n<h3>2.2.1. Type of Machine Learning Problem<\/h3>\n\n<p>\n    \n            There are nine different classes a genetic mutation can be classified into => Multi class classification problem\n   \n      \n    \n<\/p>\n\n<h3>2.2.2. Performance Metric<\/h3>\n\nSource: https:\/\/www.kaggle.com\/c\/msk-redefining-cancer-treatment#evaluation\n\nMetric(s): \n* Multi class log-loss \n* Confusion matrix \n","b96398dd":"<h3>3.2.2 Univariate Analysis on Variation Feature<\/h3>","5cb6b497":"<h3>3.1.4. Test, Train and Cross Validation Split<\/h3>\n\n<h4>3.1.4.1. Splitting data into train, test and cross validation (64:20:16)<\/h4>"}}