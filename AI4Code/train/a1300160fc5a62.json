{"cell_type":{"3a875eeb":"code","4fabe237":"code","44dba7c5":"code","95496f2c":"code","3db13d63":"code","330f232d":"code","84379d86":"code","ea271efe":"code","d07fb320":"code","9efeb30f":"code","bf1b4842":"code","669479bf":"code","a174f75a":"code","569ec290":"code","862fdf0c":"code","0a3920fe":"code","1c89e5cf":"code","0c2d12f0":"code","5c3f634d":"code","d43998f0":"code","5c34f46e":"code","94cc8308":"code","6764cc6c":"code","99aab4a0":"code","048519e3":"code","4f192681":"code","4fa0878b":"code","b4a652ef":"code","1c935662":"code","d485c61f":"code","6b9f83e4":"code","d3e84de5":"markdown","f0638f65":"markdown"},"source":{"3a875eeb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","4fabe237":"# reading the csv\ndf=pd.read_csv('..\/input\/covid19-patient-precondition-dataset\/covid.csv')\ndf.head()","44dba7c5":"df['icu'].unique","95496f2c":"#mapping 97 & 98 categories to category 3 whic is NA\ndf['icu']=df['icu'].map({1:1,2:2,97:3,99:3})","3db13d63":"df.head()","330f232d":"sns.countplot(x='icu',data=df)","84379d86":"#dropping the icu values where value == 3 which are NA's \nindexnames=df[df['icu']==3].index\ndf.drop(indexnames,inplace=True)","ea271efe":"# now check the icu values on count plot ,only 1 and 2 cateogries are present\nsns.countplot(x='icu',data=df)","d07fb320":"df['pregnancy']","9efeb30f":"# mapping the 97and 98 cateogories to NA \ndf['pregnancy']=df['pregnancy'].map({1:1,2:2,97:3,98:3})","bf1b4842":"df['pregnancy'].value_counts()","669479bf":"df.head()","a174f75a":"df['date_died'].value_counts()","569ec290":"#drop id ,patient_type column which is not required\ndf.drop(['id','patient_type'],axis=1,inplace=True)\ndf.head()","862fdf0c":"sns.countplot(x='icu',data=df,hue='sex')","0a3920fe":"sns.distplot(df['age'],kde=False,bins=20)","1c89e5cf":"#drop dates column which is not required\ndf.drop(['entry_date','date_symptoms','date_died'],axis=1,inplace=True)\ndf.head()","0c2d12f0":"plt.figure(figsize=(15,10))\nsns.heatmap(df.corr(),annot=True,cmap='viridis')","5c3f634d":"df.corr()['icu'][:-1].sort_values().plot(kind='bar')","d43998f0":"X = df.drop('icu',axis=1)\ny = df['icu']\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,random_state=101)","5c34f46e":"#scaling the features set\nfrom sklearn.preprocessing import MinMaxScaler\nscaler = MinMaxScaler()\nX_train= scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","94cc8308":"X_train.shape","6764cc6c":"X_test.shape","99aab4a0":"#using random forest\nfrom sklearn.ensemble import RandomForestClassifier\nrfc = RandomForestClassifier(n_estimators=100)\nrfc.fit(X_train, y_train)","048519e3":"rfc_pred = rfc.predict(X_test)","4f192681":"from sklearn.metrics import classification_report,confusion_matrix\nprint(classification_report(y_test,rfc_pred))\nprint(confusion_matrix(y_test,rfc_pred))","4fa0878b":"#using decision tree\nfrom sklearn.tree import DecisionTreeClassifier\ndtree = DecisionTreeClassifier()\ndtree.fit(X_train,y_train)\npredictions = dtree.predict(X_test)\n\nprint(classification_report(y_test,predictions))\nprint(confusion_matrix(y_test,predictions))","b4a652ef":"#random forest is gving the better accuracy than decision tree\n# brand new prediction \nsingle_person = df.drop('icu',axis=1).iloc[3]\nsingle_person","1c935662":"single_person = scaler.transform(single_person.values.reshape(-1, 17))\nsingle_person","d485c61f":"rfc.predict(single_person)","6b9f83e4":"df.iloc[3]","d3e84de5":"ICU prediction beginner attempt \nExcluded date features .train the model with remaining featues and validated","f0638f65":"Feel free to post your comments and feedback"}}