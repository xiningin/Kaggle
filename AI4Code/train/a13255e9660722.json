{"cell_type":{"6f29de67":"code","4293fcd3":"code","801a7a22":"code","6adc6f4c":"code","3cd671e9":"code","7b5e3ee6":"code","7785b865":"code","b3548194":"code","b8bb0661":"code","8409416e":"code","223e3862":"code","2a624c4b":"code","ba73dcc6":"code","6c7b35c7":"code","8561fb0e":"code","eb6cd9c0":"code","77be73f3":"code","f8e24052":"code","45a5aa4f":"code","094d6138":"code","bc77046e":"code","6f198cf3":"code","378d6339":"code","e9b3f163":"code","93762af0":"code","903ba2f0":"code","7950ed4a":"code","d3409501":"code","4bb92f99":"code","2bce8f5c":"code","301796ea":"code","38048dd1":"code","acad2830":"code","cd2327d3":"code","3698bff5":"code","8c17f075":"code","60d1c357":"code","a07e9f8b":"code","aca5e79c":"code","b8a27334":"code","817f9ecc":"code","3d52f132":"code","98f6ad7e":"code","6e8152be":"code","e55260f5":"code","b35229fc":"code","6d042517":"code","c0228cdf":"code","80b7230e":"code","3f1a3472":"markdown","722f712f":"markdown","07660b34":"markdown","f76d1dcb":"markdown","d00f2469":"markdown","0be0fdd3":"markdown","51b30565":"markdown","afceede1":"markdown","30d5ba6b":"markdown","ab313e35":"markdown","52c92989":"markdown","dbdf716c":"markdown","3dc97a28":"markdown","38ecea55":"markdown","0fae2bc5":"markdown","97c6c889":"markdown","2029cd2a":"markdown"},"source":{"6f29de67":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","4293fcd3":"df= pd.read_csv('..\/input\/real-estate-price-prediction\/Real estate.csv')","801a7a22":"df.head()","6adc6f4c":"df.info()","3cd671e9":"df.columns","7b5e3ee6":"df.drop('No',axis=1,inplace=True)","7785b865":"df['X1 transaction date'] = df['X1 transaction date'].apply(lambda date: str(date)[:4])","b3548194":"df.head()","b8bb0661":"sns.pairplot(df,diag_kind='kde')","8409416e":"sns.heatmap(df.corr(),center=0)","223e3862":"df.corr()['Y house price of unit area'].sort_values().plot(kind='bar')\n","2a624c4b":"X= df.drop('Y house price of unit area', axis=1)\ny=df['Y house price of unit area']","ba73dcc6":"from sklearn.preprocessing import PolynomialFeatures","6c7b35c7":"polynomial_converter= PolynomialFeatures(degree=3, include_bias=False)","8561fb0e":"poly_features= polynomial_converter.fit_transform(X)","eb6cd9c0":"poly_features.shape","77be73f3":"from sklearn.model_selection import train_test_split","f8e24052":"X_train, X_test, y_train, y_test = train_test_split(poly_features, y, test_size=0.3, random_state=101)","45a5aa4f":"from sklearn.preprocessing import StandardScaler","094d6138":"scaler= StandardScaler()","bc77046e":"scaler.fit(X_train)","6f198cf3":"X_train= scaler.transform(X_train)\nX_test= scaler.transform(X_test)","378d6339":"#Train the Model\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.metrics import mean_absolute_error,mean_squared_error\nresult = dict()","e9b3f163":"ridge_cv_model=RidgeCV(alphas=(0.1, 1.0, 10.0), scoring='neg_mean_absolute_error')","93762af0":"ridge_cv_model.fit(X_train, y_train)","903ba2f0":"ridge_cv_model.alpha_","7950ed4a":"#Predicting Test Data\ny_pred_ridge= ridge_cv_model.predict(X_test)","d3409501":"MAE_ridge= mean_absolute_error(y_test, y_pred_ridge)\nMSE_ridge= mean_squared_error(y_test, y_pred_ridge)\nRMSE_ridge= np.sqrt(MSE_ridge)","4bb92f99":"result['Ridge'] = pd.DataFrame([MAE_ridge, MSE_ridge, RMSE_ridge], index=['MAE', 'MSE', 'RMSE'], columns=['Metrics'])","2bce8f5c":"ridge_cv_model.coef_","301796ea":"from sklearn.linear_model import LassoCV","38048dd1":"lasso_cv_model= LassoCV(eps=0.01, n_alphas=100, cv=5)","acad2830":"lasso_cv_model.fit(X_train, y_train)","cd2327d3":"lasso_cv_model.alpha_","3698bff5":"y_pred_lasso= lasso_cv_model.predict(X_test)","8c17f075":"MAE_Lasso= mean_absolute_error(y_test, y_pred_lasso)\nMSE_Lasso= mean_squared_error(y_test, y_pred_lasso)\nRMSE_Lasso= np.sqrt(MSE_Lasso)","60d1c357":"result['Lasso'] = pd.DataFrame([MAE_Lasso, MSE_Lasso, RMSE_Lasso], index=['MAE', 'MSE', 'RMSE'], columns=['Metrics'])","a07e9f8b":"lasso_cv_model.coef_","aca5e79c":"from sklearn.linear_model import ElasticNetCV","b8a27334":"elastic_model= ElasticNetCV(l1_ratio=[0.1, 0.5, 0.7, 0.9, 0.95, 0.99, 1],cv=5, max_iter=100000)","817f9ecc":"elastic_model.fit(X_train, y_train)","3d52f132":"elastic_model.l1_ratio_","98f6ad7e":"y_pred_elastic=elastic_model.predict(X_test)","6e8152be":"MAE_Elastic= mean_absolute_error(y_test, y_pred_elastic)\nMSE_Elastic= mean_squared_error(y_test, y_pred_elastic)\nRMSE_Elastic= np.sqrt(MSE_Elastic)","e55260f5":"result['ElasticNet'] = pd.DataFrame([MAE_Elastic, MSE_Elastic, RMSE_Elastic], index=['MAE', 'MSE', 'RMSE'], columns=['Metrics'])","b35229fc":"elastic_model.coef_","6d042517":"pd.concat(result,axis=1)","c0228cdf":"test_residuals = y_pred_elastic - y_test\nsns.scatterplot(x=y_test,y=y_pred_elastic)\nplt.axline((0,0),(1,1),color='r')","80b7230e":"sns.scatterplot(x=y_test,y=test_residuals)\nplt.axhline(0,color='r')","3f1a3472":"### Residuals","722f712f":"### 2- Lasso Regression","07660b34":"## Step1: Import all Necessary Libraries","f76d1dcb":"### Step7: Split the Data to Train & Test","d00f2469":"### Step5: Determine the Features & Target Variable (Lable)","0be0fdd3":"### Step8: Scaling the Features","51b30565":"### Ridge Regression (Choosing an alpha value with Cross-Validation)","afceede1":"# Data preparation","30d5ba6b":"### Step2: Import the Data","ab313e35":"### Step4: EDA","52c92989":"# Regularization (Ridge - LASSO - ElasticNet)\n\n\n","dbdf716c":"### 3- Elastic Net","3dc97a28":"### Step9: Regularization","38ecea55":"### Step6: Preprocessing (Polynomial Conversion)","0fae2bc5":"### 1- Ridge Regression","97c6c889":"# Conclusion","2029cd2a":"### Step3: Data Overview"}}