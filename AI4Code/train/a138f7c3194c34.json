{"cell_type":{"6503eee8":"code","3284ebd6":"code","93f32cc5":"code","4be2037d":"code","21822739":"code","3a302195":"code","098afc2d":"code","1d448a30":"code","45b52785":"code","85f906b5":"code","730767d4":"code","809168d0":"code","30e63dfa":"code","7a41429f":"code","d1e82f47":"code","e20b37db":"code","f9331826":"code","9c453612":"code","9884b70d":"code","a53418f5":"code","aee2bb85":"code","be6ad330":"code","95dfc9fe":"code","a22a238e":"code","7488a675":"code","695befb0":"code","926005ad":"code","7fa48919":"code","cbaa36d7":"code","2bb46b51":"code","136415fe":"code","3e401bf1":"code","61d22d37":"code","07afb5a7":"code","37f8340b":"code","80311313":"code","9236e00d":"code","9ed6cfdd":"code","c097ac5f":"code","2792c333":"code","c201f8f1":"code","1a4c604f":"code","4bf2eb57":"markdown","c1e91fb9":"markdown","afc63c58":"markdown","63d6d32e":"markdown","c4c9659c":"markdown","1e763a1b":"markdown","f9c9050c":"markdown","8aba8dce":"markdown","ae2439bc":"markdown","a8f10c29":"markdown","fdb57c30":"markdown","36b95ac7":"markdown","f9ab82e5":"markdown","651c91f9":"markdown","341ef16b":"markdown","92385a9b":"markdown","be891e81":"markdown","c1b68033":"markdown","6a2a5d7c":"markdown"},"source":{"6503eee8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3284ebd6":"import pandas as pd\nimport numpy as np\nimport pickle\nimport random\n\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\nfrom sklearn.model_selection import train_test_split, ShuffleSplit, cross_val_score, learning_curve\nfrom sklearn.model_selection import KFold, GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import classification_report, f1_score, precision_score, recall_score\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nimport xgboost as xgb, lightgbm as lgbm, catboost as catb\n\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","93f32cc5":"import warnings\nwarnings.filterwarnings('ignore')\nmatplotlib.rcParams.update({'font.size': 14})","4be2037d":"TRAIN_DATASET_PATH = '\/kaggle\/input\/gb-credit-default\/train.csv'\nTEST_DATASET_PATH = '\/kaggle\/input\/gb-credit-default\/test.csv'","21822739":"train_df = pd.read_csv(TRAIN_DATASET_PATH) # \u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0442\u0440\u0435\u0439\u043d\ntrain_df.head() # \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u0435 5 \u0441\u0442\u0440\u043e\u043a","3a302195":"test_df = pd.read_csv(TEST_DATASET_PATH) # \u0447\u0438\u0442\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 \u0442\u0435\u0441\u0442\ntest_df.tail()","098afc2d":"print('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0440\u0435\u0439\u043d\u0435:', train_df.shape[0])\nprint('\u0421\u0442\u0440\u043e\u043a \u0432 \u0442\u0435\u0441\u0442\u0435', test_df.shape[0])","1d448a30":"train_df.shape #\u0443\u0437\u043d\u0430\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435","45b52785":"train_df.shape[1] - 1 == test_df.shape[1] # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430, \u0432 \u0442\u0435\u0441\u0442\u0435 \u043d\u0430 1 \u043f\u0440\u0438\u0437\u043d\u0430\u043a (\u0446\u0435\u043d\u0430) \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u0432 \u0442\u0440\u0435\u0439\u043d\u0435","85f906b5":"train_df['Credit Default'].value_counts()","730767d4":"train_df.describe() # \u043f\u0440\u043e\u0430\u043d\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438","809168d0":"plt.rcParams['figure.figsize'] = [16, 12]\n\nfig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2)\n\nax1.bar(train_df['Years in current job'].value_counts().index, train_df['Years in current job'].value_counts().values)\nax2.bar(train_df['Home Ownership'].value_counts().index, train_df['Home Ownership'].value_counts().values)\nax3.bar(train_df['Purpose'].value_counts().index, train_df['Purpose'].value_counts().values)\nax4.bar(train_df['Term'].value_counts().index, train_df['Term'].value_counts().values)\n\nfig.suptitle('\u041a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438')\nax1.xaxis.set_tick_params(rotation=45)\nax3.xaxis.set_tick_params(rotation=90)","30e63dfa":"for cat_colname in train_df.select_dtypes(include='object').columns:\n    print(str(cat_colname) + '\\n\\n' + str(train_df[cat_colname].value_counts()) + '\\n' + '*' * 100 + '\\n')","7a41429f":"train_df.info() # \u043e\u0431\u0437\u043e\u0440 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0440\u0435\u0439\u043d\u0435","d1e82f47":"test_df.info() # \u043e\u0431\u0437\u043e\u0440 \u043d\u0430\u0431\u043e\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0442\u0435\u0441\u0442\u0435","e20b37db":"len(train_df) - train_df.count()","f9331826":"len(test_df) - test_df.count()","9c453612":"train_df.loc[:, ['Months since last delinquent', 'Bankruptcies', 'Credit Score']] = train_df.loc[:, ['Months since last delinquent', \n                                                                                                       'Bankruptcies', 'Credit Score']].fillna(value=0)\ntrain_df['Annual Income'].fillna(value=train_df['Annual Income'].mean(), inplace=True)\ntrain_df.info()","9884b70d":"train_df['Years in current job'].value_counts()","a53418f5":"test_df['Years in current job'].value_counts()\n\n#\u0412 \u0442\u0435\u0441\u0442\u0435 \u043d\u043e\u0432\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u043d\u0435\u0442, \u0437\u043d\u0430\u0447\u0438\u0442 \u043e\u0448\u0438\u0431\u043a\u043e\u043a \u0431\u044b\u0442\u044c \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u043e","aee2bb85":"train_df['Years in current job'] = train_df['Years in current job'].fillna('0').map({'0': 0, '< 1 year': 1, '1 year': 2, '2 years': 3,\n                                                                                       '3 years': 4, '4 years': 5, '5 years': 6, '6 years': 7, \n                                                                                       '7 years': 8, '8 years': 9, '9 years': 10, '10+ years': 11})\ntrain_df.head()","be6ad330":"train_df.info()","95dfc9fe":"train_df.describe()","a22a238e":"c_max_value = np.quantile(train_df['Current Loan Amount'], q=0.975)\nc_max_value","7488a675":"train_df.loc[train_df['Current Loan Amount'] == 99999999, 'Current Loan Amount'] = 0","695befb0":"train_df['Current Loan Amount'].describe()","926005ad":"train_df.columns.tolist()","7fa48919":"TARGET_NAME = 'Credit Default'\nBASE_FEATURE_NAMES = train_df.columns.drop(TARGET_NAME).tolist()","cbaa36d7":"corr_with_target = train_df[BASE_FEATURE_NAMES + [TARGET_NAME]].corr().iloc[:-1, -1].sort_values(ascending=False)\n\nplt.figure(figsize=(10, 8))\n\nsns.barplot(x=corr_with_target.values, y=corr_with_target.index)\n\nplt.title('\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 \u0446\u0435\u043b\u0435\u0432\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439')\nplt.show()","2bb46b51":"NUMERIC_FEATURE_NAMES = ['Annual Income',\n 'Tax Liens',\n 'Number of Open Accounts',\n 'Years of Credit History',\n 'Maximum Open Credit',\n 'Number of Credit Problems',\n 'Months since last delinquent',\n 'Bankruptcies',\n 'Current Loan Amount',\n 'Current Credit Balance',\n 'Monthly Debt',\n 'Credit Score']","136415fe":"scaler = StandardScaler()\n\ndf_norm = train_df.copy()\ndf_norm[NUMERIC_FEATURE_NAMES] = scaler.fit_transform(train_df[NUMERIC_FEATURE_NAMES])\n\ntrain_df = df_norm.copy()","3e401bf1":"X_train, X_valid, y_train, y_valid = train_test_split(train_df.drop('Credit Default', axis=1), train_df['Credit Default'], train_size=0.75, random_state=42)","61d22d37":"def get_classification_report(y_train_true, y_train_pred, y_test_true, y_test_pred):\n    print('TRAIN\\n\\n' + classification_report(y_train_true, y_train_pred))\n    print('TEST\\n\\n' + classification_report(y_test_true, y_test_pred))\n    print('CONFUSION MATRIX\\n') # \u0432\u044b\u0432\u043e\u0434 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u043e\u0448\u0438\u0431\u043e\u043a\n    print(pd.crosstab(y_test_true, y_test_pred))","07afb5a7":"categorical_features_indices = np.where((train_df.dtypes == object))[0]\ncategorical_features_indices # \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 (cat_features) \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u0447\u0438 \u0432 \u043c\u043e\u0434\u0435\u043b\u044c","37f8340b":"disbalance = y_train.value_counts()[0]\/y_train.value_counts()[1]\ndisbalance","80311313":"model_catb = catb.CatBoostClassifier(silent=True, \n                                     random_state=42, \n                                     cat_features=categorical_features_indices,\n                                     class_weights=[1, disbalance])\nmodel_catb.fit(X_train, y_train)\n\ny_train_pred = model_catb.predict(X_train)\ny_test_pred = model_catb.predict(X_valid)\n\nget_classification_report(y_train, y_train_pred, y_valid, y_test_pred)","9236e00d":"params = {'n_estimators':[50, 100, 200, 500], \n          'max_depth':[3, 5, 7, 10],\n          'learning_rate':[0.001, 0.01, 0.05, 0.1]}","9ed6cfdd":"cv=KFold(n_splits=3, random_state=42, shuffle=True)","c097ac5f":"%%time\n\nrs = RandomizedSearchCV(model_catb, params, scoring='f1', cv=cv, n_jobs=-1)\nrs.fit(X_train, y_train)","2792c333":"rs.best_params_","c201f8f1":"rs.best_score_","1a4c604f":"%%time\n\nfinal_model = catb.CatBoostClassifier(n_estimators=500, \n                                      max_depth=5, \n                                      learning_rate=0.01,\n                                      silent=True, \n                                      random_state=42, \n                                      cat_features=categorical_features_indices,\n                                      class_weights=[1, disbalance])\nfinal_model.fit(X_train, y_train)\n\ny_train_pred = final_model.predict(X_train)\ny_test_pred = final_model.predict(X_valid)\n\nget_classification_report(y_train, y_train_pred, y_valid, y_test_pred)","4bf2eb57":"**\u041f\u0443\u0442\u0438 \u043a \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044f\u043c \u0438 \u0444\u0430\u0439\u043b\u0430\u043c**","c1e91fb9":"\u041f\u043e\u043f\u0440\u043e\u0431\u0443\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c CatBoost (\u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0432 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435, \u0443\u043c\u0435\u043d\u044c\u0448\u0430\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u043e\u0432\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f, \u0442\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u043f\u043e\u0432\u044b\u0448\u0430\u044f \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c), \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u043d\u0430\u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u0438\u0447.","afc63c58":"**\u0415\u0441\u0442\u044c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u0445: Annual Income, Years in current job,  Months since last delinquent, Bankruptcies, Credit Score.**","63d6d32e":"\u0442\u0430\u043a \u0436\u0435 Maximum Open Credit (\u043c\u0430\u043a\u0441 \u043e\u0442\u043a\u0440 \u043a\u0440\u0435\u0434\u0438\u0442) \u0438 Months since last delinquent (\u043a\u043e\u043b-\u0432\u043e \u043c\u0435\u0441\u044f\u0446\u0435\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438) \u043c\u0435\u0434\u0438\u0430\u043d\u044b \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u0435\u0439 50%, \u043d\u043e \u0432\u0440\u043e\u0434\u0435 \u044d\u0442\u043e \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e.","c4c9659c":"**17 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 (\u043f\u0440\u0438\u0437\u0430\u043a\u043e\u0432) \u0438 7500 \u0441\u0442\u0440\u043e\u043a**","1e763a1b":"**\u041e\u0431\u0437\u043e\u0440 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432**","f9c9050c":"**\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445**\n","8aba8dce":"**\u0426\u0435\u043b\u0435\u0432\u0430\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f (Credit Default)**","ae2439bc":"**\u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432**","a8f10c29":"\u041e\u0442\u0431\u043e\u0440 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432","fdb57c30":"\u043f\u043e\u043a\u0430 \u043d\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u043e \u043a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0443 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e ","36b95ac7":"\u0417\u0430\u043c\u0435\u043d\u0438\u043c \u044d\u0442\u0438 \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043d\u0430 \u043d\u0443\u043b\u0438","f9ab82e5":"# \u041e\u0431\u0437\u043e\u0440 \u0434\u0430\u043d\u043d\u044b\u0445","651c91f9":"\u0443 Current Loan Amount \u043c\u0435\u0434\u0438\u0430\u043d\u0430 \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044f 50%, \u043f\u043e\u0445\u043e\u0436\u0435 \u0441\u043f\u0440\u0430\u0432\u0430 \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b. \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 = 1.000000e+08 ( \u044d\u0442\u043e \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e 100\u2009000\u2009000), \n\u0432 \u0442\u043e \u0432\u0440\u0435\u043c\u044f \u043a\u0430\u043a 75% \u043a\u0432\u0430\u043d\u0442\u0438\u043b\u044c = 5.198820e+05 (519\u2009882). \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 1.000000e+08 \u043f\u043e\u0445\u043e\u0436\u0435 \u0432\u044b\u0431\u0440\u043e\u0441.","341ef16b":"\u0417\u0430\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u0430\u044f \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u044c:\n* 10+ years = 11\n* 9 years = 10\n* 8 years = 9\n* 7 years = 8\n* 6 years = 7\n* 5 years = 6\n* 4 years = 5\n* 3 years = 4\n* 2 years = 3\n* 1 year = 2\n* < 1 year = 1\n* 0 = 0\n\n\n\n","92385a9b":"**\u041f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u0442, \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0442\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0431\u0440\u043e\u0441\u044b**","be891e81":"**\u0420\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0435 \u043d\u0430 train \u0438 test**","c1b68033":"**\u041a\u043e\u0440\u0440\u0435\u043b\u044f\u0446\u0438\u044f \u0441 \u0431\u0430\u0437\u043e\u0432\u044b\u043c\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438**","6a2a5d7c":"\u0412\u0441\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0444\u0438\u0447\u0438, \u043a\u0440\u043e\u043c\u0435 Years in current job (\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442 \u043d\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u044b), \u0432 \u043e\u0431\u043e\u0438\u0445 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430\u0445 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u043f\u0443\u0441\u0442\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u041f\u0443\u0441\u0442\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 Years in current job \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438.\n\nAnnual Income - \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438 \u0432 \u0433\u043e\u0434\u043e\u0432\u043e\u043c \u0434\u043e\u0445\u043e\u0434\u0435 \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043c\u0435\u0434\u0438\u0430\u043d\u043e\u0439.\n\nMonths since last delinquent - \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043c\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432, \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043b\u043e\u0432\u0438\u043d\u044b (4081 \u0438\u0437 7500), \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438, \u0431\u0443\u0434\u0435\u043c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0447\u0442\u043e \u043f\u0440\u043e\u0441\u0440\u043e\u0447\u043a\u0438 \u043d\u0435\u0442.\n\nBankruptcies - \u0431\u0430\u043d\u043a\u0440\u043e\u0442\u0441\u0442\u0432\u0430: \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u043e\u0432 \u043e\u0447\u0435\u043d\u044c \u043c\u0430\u043b\u043e, \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0443\u043b\u044f\u043c\u0438.\n\nCredit Score - \u043a\u0440\u0435\u0434\u0438\u0442\u043d\u044b\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433, \u0432 \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0445 \u043f\u0440\u043e\u043f\u0438\u0448\u0435\u043c \u043d\u0443\u043b\u0438."}}