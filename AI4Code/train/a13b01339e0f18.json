{"cell_type":{"5bcaf591":"code","c071005b":"code","7bfeff9b":"code","848dd2e3":"code","578b9eb7":"code","d9b09ab2":"code","95d4fde9":"code","be0427ec":"code","8c1422a8":"code","5fd99d3b":"markdown"},"source":{"5bcaf591":"import os\nimport torch\nimport pandas as pd\nfrom scipy import stats\nimport numpy as np\nimport pandas as pd\n\nfrom tqdm import tqdm\nfrom collections import OrderedDict, namedtuple\nimport torch.nn as nn\nfrom torch.optim import lr_scheduler\nimport joblib\n\nimport logging\nimport transformers\nimport sys","c071005b":"class BERTBaseUncased(nn.Module):\n    def __init__(self, bert_path):\n        super(BERTBaseUncased, self).__init__()\n        self.bert_path = bert_path\n        self.bert = transformers.BertModel.from_pretrained(self.bert_path)\n        self.bert_drop = nn.Dropout(0.3)\n        self.out = nn.Linear(768 * 2, 1)\n\n    def forward(\n            self,\n            ids,\n            mask,\n            token_type_ids\n    ):\n        o1, o2 = self.bert(\n            ids,\n            attention_mask=mask,\n            token_type_ids=token_type_ids)\n        \n        apool = torch.mean(o1, 1)\n        mpool, _ = torch.max(o1, 1)\n        cat = torch.cat((apool, mpool), 1)\n\n        bo = self.bert_drop(cat)\n        p2 = self.out(bo)\n        return p2\n\n\nclass BERTDatasetTest:\n    def __init__(self, comment_text, tokenizer, max_length):\n        self.comment_text = comment_text\n        self.tokenizer = tokenizer\n        self.max_length = max_length\n\n    def __len__(self):\n        return len(self.comment_text)\n\n    def __getitem__(self, item):\n        comment_text = str(self.comment_text[item])\n        comment_text = \" \".join(comment_text.split())\n\n        inputs = self.tokenizer.encode_plus(\n            comment_text,\n            None,\n            add_special_tokens=True,\n            max_length=self.max_length,\n        )\n        ids = inputs[\"input_ids\"]\n        token_type_ids = inputs[\"token_type_ids\"]\n        mask = inputs[\"attention_mask\"]\n        \n        padding_length = self.max_length - len(ids)\n        \n        ids = ids + ([0] * padding_length)\n        mask = mask + ([0] * padding_length)\n        token_type_ids = token_type_ids + ([0] * padding_length)\n        \n        return {\n            'ids': torch.tensor(ids, dtype=torch.long),\n            'mask': torch.tensor(mask, dtype=torch.long),\n            'token_type_ids': torch.tensor(token_type_ids, dtype=torch.long)\n        }","7bfeff9b":"df = pd.read_csv(\"..\/input\/test-en-df\/test_en.csv\")","848dd2e3":"tokenizer = transformers.BertTokenizer.from_pretrained(\"..\/input\/bert-base-multilingual-uncased\/\", do_lower_case=True)","578b9eb7":"device = \"cuda\"\nmodel = BERTBaseUncased(bert_path=\"..\/input\/bert-base-multilingual-uncased\/\").to(device)\nmodel.load_state_dict(torch.load(\"..\/input\/jmodelval\/model.bin\"))\nmodel.eval()","d9b09ab2":"valid_dataset = BERTDatasetTest(\n        comment_text=df.content_en.values,\n        tokenizer=tokenizer,\n        max_length=192\n)\n\nvalid_data_loader = torch.utils.data.DataLoader(\n    valid_dataset,\n    batch_size=64,\n    drop_last=False,\n    num_workers=4,\n    shuffle=False\n)","95d4fde9":"with torch.no_grad():\n    fin_outputs = []\n    for bi, d in enumerate(tqdm(valid_data_loader)):\n        ids = d[\"ids\"]\n        mask = d[\"mask\"]\n        token_type_ids = d[\"token_type_ids\"]\n\n        ids = ids.to(device, dtype=torch.long)\n        mask = mask.to(device, dtype=torch.long)\n        token_type_ids = token_type_ids.to(device, dtype=torch.long)\n\n        outputs = model(\n            ids=ids,\n            mask=mask,\n            token_type_ids=token_type_ids\n        )\n\n        outputs_np = outputs.cpu().detach().numpy().tolist()\n        fin_outputs.extend(outputs_np)","be0427ec":"sample = pd.read_csv(\"..\/input\/jigsaw-multilingual-toxic-comment-classification\/sample_submission.csv\")\nsample.loc[:, \"toxic\"] = fin_outputs\nsample.to_csv(\"submission.csv\", index=False)","8c1422a8":"sample.head()","5fd99d3b":"In this kernel, I want to show how easy to get high score with translated test set.  \nI just forked [@abhishek's great kernel](https:\/\/www.kaggle.com\/abhishek\/inference-of-bert-tpu-model-ml-w-validation) and replaced test set with the one translated by google translate api.  \nWhat I want to say here is it's better to create private test set. This is not interesting approarch and I assume it's not what host wanted.  \nWe can use this approach just because of all test set is publically available and kindly it has language label.(Even though it's currently discussed in [this thread](https:\/\/www.kaggle.com\/c\/jigsaw-multilingual-toxic-comment-classification\/discussion\/138273), it's very straightforward approach and people can do secretly.)    \n  \nIt will be much more intersting if there is an unknown test set and if it contains unseen language, isn't it??"}}