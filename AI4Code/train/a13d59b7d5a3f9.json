{"cell_type":{"6eca116e":"code","d73d540b":"code","24db3e3f":"code","9a12280b":"code","211f1815":"code","0fb71aae":"code","4ebe0019":"code","c9cd62c1":"markdown","069f738e":"markdown","cd7d4576":"markdown","7e16ef79":"markdown","a2bca677":"markdown","0ed8f9e7":"markdown","ba050f2a":"markdown"},"source":{"6eca116e":"import numpy  as np\nimport pandas as pd\n\n# plotting\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n\n!pip install -q pytorch-tabnet\nfrom pytorch_tabnet.tab_model import TabNetRegressor\n\n!pip install -q datatable \nimport datatable as dt\n\nimport torch","d73d540b":"# read in the train dataset\ntrain_data = dt.fread('..\/input\/jane-street-market-prediction\/train.csv').to_pandas()\n\n# filter out the zero weights\ntrain_data = train_data.query('weight > 0').reset_index(drop = True)\n\n# split for train and validation\nvalidation_data = train_data.query('date   > 494').reset_index(drop = True) \ntrain_data      = train_data.query('date <=  494').reset_index(drop = True) \n\n# training data\nX_train = train_data.loc[:, train_data.columns.str.contains('feature')]\nX_train = X_train.fillna(X_train.mean()).to_numpy()\ny_train = train_data.loc[:, 'resp'].to_numpy().reshape(-1, 1)\n\n# validation data\nX_valid = validation_data.loc[:, validation_data.columns.str.contains('feature')]\nX_valid = X_valid.fillna(X_valid.mean()).to_numpy()\ny_valid = validation_data.loc[:, 'resp'].to_numpy().reshape(-1, 1)","24db3e3f":"%%time\n\n# define the batch size, here 2^13\nBS = 8192\n\n# Training for more epochs might improve the model performance at the cost of longer training time\nMAX_EPOCH = 20\n\nregressor = TabNetRegressor(n_d=64, n_a=64, \n                            n_steps         =5, \n                            gamma           =1.2,\n                            n_independent   =2, \n                            n_shared        =2,\n                            lambda_sparse   =0., \n                            seed            =0,\n                            clip_value      =1,\n                            mask_type       ='entmax',\n                            device_name     ='auto',\n                            optimizer_fn=torch.optim.Adam,\n                            optimizer_params=dict(lr=2e-3),\n                            scheduler_params=dict(max_lr=0.05,\n                                                  steps_per_epoch=int(X_train.shape[0] \/ BS),\n                                                  epochs=MAX_EPOCH,\n                                                  is_batch_level=True),\n                            scheduler_fn=torch.optim.lr_scheduler.OneCycleLR,\n                            verbose=1)\n\nregressor.fit(X_train=X_train, y_train=y_train,\n          eval_set=[(X_train, y_train), (X_valid, y_valid)],\n          eval_name=[\"train\", \"valid\"],\n          eval_metric=[\"mae\"],\n          batch_size=BS,\n          virtual_batch_size=256,\n          max_epochs=MAX_EPOCH,\n          drop_last=True,\n          pin_memory=True)","9a12280b":"explainability_matrix , masks = regressor.explain(X_valid)\n\n# Normalize the importance by sample\nnormalized_explain_mat = np.divide(explainability_matrix, explainability_matrix.sum(axis=1).reshape(-1, 1)+1e-8)\n\n# Add prediction to better understand correlation between features and predictions\nval_preds = regressor.predict(X_valid)\n\nexplain_and_preds = np.hstack([normalized_explain_mat, val_preds.reshape(-1, 1)])","211f1815":"feat_importances = regressor.feature_importances_\nindices = np.argsort(feat_importances)\n# plot\nfig, ax = plt.subplots(figsize=(10, 6))\nplt.title(\"Top 25 feature importances\")\nplt.barh(range(len(feat_importances)), feat_importances[indices],color=\"b\", align=\"center\")\nfeatures = ['feature_{}'.format(i) for i in range(0, 130)]\nplt.yticks(range(len(feat_importances)), [features[idx] for idx in indices])\n# all features\n# plt.ylim([-1, len(feat_importances)])\n# Top 25 features\nplt.ylim([len(feat_importances)-25, len(feat_importances)])\nplt.show();","0fb71aae":"px.imshow(explain_and_preds[:,:],\n          labels=dict(x=\"Features\", y=\"Samples\", color=\"Importance\"),\n          x=features+[\"prediction\"],\n          title=\"Sample wise feature importance\",\n          color_continuous_scale='Jet',\n          height=1000)","4ebe0019":"correlation_importance = np.corrcoef(explain_and_preds.T)\npx.imshow(correlation_importance,\n          labels=dict(x=\"Features\", y=\"Features\", color=\"Correlation\"),\n          x=features+[\"prediction\"], y=features+[\"prediction\"],\n          title=\"Correlation between attention mechanism for each feature and predictions\",\n          color_continuous_scale='Jet')","c9cd62c1":"Load in the data and create `X_train` and `y_train`. Here we shall be using regression, with `resp` as the target. A well known advantage of deep neural network is there is little need for *a priori* feature engineering, which is currently a key aspect in tree-based tabular data learning methods. In view of this we shall provide TabNet with access to all 130 features of this dataset.\n\nFor the training data we shall use the first 495 days of the `train.csv` file, and for the validation data we shall use the remaining 5 days.","069f738e":"## Feature importance\nAs with the majority of estimators, TabNet provides access to a ranking of features in terms of their overall importance:","cd7d4576":"# TabNet and Interpretability\n\nFrom the abstract of [TabNet](https:\/\/arxiv.org\/pdf\/1908.07442.pdf):\n\n> \"*TabNet uses [sequential attention](https:\/\/arxiv.org\/pdf\/1706.03762.pdf) to choose which features to reason from at each decision step, enabling interpretability*\"\n\nHere we shall look at the interpretability of TabNet in the context of the kaggle [Jane Street Market Prediction competition](https:\/\/www.kaggle.com\/c\/jane-street-market-prediction). For this notebook we shall be using the recently released version 3.0.0 of [pyTorch TabNet](https:\/\/github.com\/dreamquark-ai\/tabnet).","7e16ef79":"It is particularly interesting to now see the daily variation in the Tag 22 features `feature_64`, `feature_65` and `feature_66`, as well as the daily importance of `feature_37` when the Tag 22 features are seemingly *'inactive'*. The most important message we can see here is that a simple overall ranking of features is not telling the whole story of what is really going on when predictions are being made.\n\nWe can also produce a correlation matrix for the importance of the features with respect to each other","a2bca677":"We shall now perform the regression.\npyTorch TabNet has two options for the masking function, `softmax` [[1]](https:\/\/arxiv.org\/pdf\/1602.02068.pdf) and \n`entmax`[[2](https:\/\/papers.nips.cc\/paper\/2004\/file\/96f2b50b5d3613adf9c27049b2a888c7-Paper.pdf)], where `gamma` is the coefficient for feature reusage in the masks. Here we shall use `entmax`.","0ed8f9e7":"although as we can see, in this example the matrix seems somewhat uninformative.\n# Related reading\n* [Sercan O. Arik and Tomas Pfister \"*TabNet: Attentive Interpretable Tabular Learning*\", arXiv:1908.07442 (2019)](https:\/\/arxiv.org\/pdf\/1908.07442.pdf)\n* [TabNet on AI Platform: High-performance, Explainable Tabular Learning](https:\/\/cloud.google.com\/blog\/products\/ai-machine-learning\/ml-model-tabnet-is-easy-to-use-on-cloud-ai-platform) (Google Cloud)\n* [pytorch-tabnet](https:\/\/github.com\/dreamquark-ai\/tabnet) (GitHub)\n* [Christoph Molnar, Giuseppe Casalicchio, and Bernd Bischl \"*Interpretable Machine Learning -- A Brief History, State-of-the-Art and Challenges*\", arXiv:2010.09337 (2020)](https:\/\/arxiv.org\/pdf\/2010.09337.pdf)\n\n***See also***:\n\n* [Jane Street: TabNet 3.0.0 starter notebook](https:\/\/www.kaggle.com\/carlmcbrideellis\/jane-street-tabnet-3-0-0-starter-notebook) - a simple notebook using TabNet classification for the Jane Street competition.","ba050f2a":"## Local interpretability\nHowever, the beauty of TabNet is that it allows us to not only to obtain the overall feature importances, but also inspect the importance of each of the features for each of the individual rows, here for the validation data:"}}