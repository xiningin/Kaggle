{"cell_type":{"0c32011b":"code","87acd6fa":"code","31dd4f81":"code","65093931":"code","fff94907":"code","328333a0":"code","a6bdca3e":"code","e50c63f3":"code","48df6328":"code","8f667296":"code","b4f76bf0":"code","048b29a3":"code","7dceb7e3":"code","86a2cef9":"code","6aaeec05":"code","7963ed15":"code","17e79e99":"code","6dd97f31":"code","8bd5d667":"code","509a8810":"code","14ae7cb7":"code","91b00c00":"markdown","66a1d6f6":"markdown","846e59e0":"markdown","738dc36b":"markdown","ac1514e7":"markdown","47d0694e":"markdown","fa9e689f":"markdown","36471791":"markdown","4171489a":"markdown","5d373f12":"markdown","73d2d2ad":"markdown","8f5fcd03":"markdown","3abf0cff":"markdown","467e282b":"markdown","e8f31e03":"markdown"},"source":{"0c32011b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","87acd6fa":"#Features\ndf_fts = pd.read_csv(\"\/kaggle\/input\/tsc-ctetw21\/StudentClueFeatures.csv\")\ndf_fts.info()","31dd4f81":"df_fts.describe()","65093931":"#Train, Test\ntrain = pd.read_csv(\"\/kaggle\/input\/tsc-ctetw21\/train.csv\")\ntrain.info()","fff94907":"test = pd.read_csv(\"\/kaggle\/input\/tsc-ctetw21\/test.csv\")","328333a0":"train.describe()","a6bdca3e":"#Take 5000 Collaborators :3\nCollaborators = train[train['Collaboration']==1].sample(5000)\n\n#Take 5000 Honest ;-;\nHonest = train[train['Collaboration']==0].sample(5000)\n\n#Join!\ntrain = pd.concat([Collaborators, Honest]).sample(frac=1)","e50c63f3":"#Lets take all the Student IDs Corresponding to the pairs!\nStudent1_ID = train['Student1_ID'].tolist()\nStudent2_ID = train['Student2_ID'].tolist()","48df6328":"import tqdm\npair_fts = []\n#Lets Loop\nfor s1, s2 in tqdm.tqdm(zip(Student1_ID, Student2_ID), total=len(train)):\n    #Get features of Students with given IDs\n    s1_fts, s2_fts = (\n        df_fts[df_fts['StudentID']==s1],\n        df_fts[df_fts['StudentID']==s2]\n    )\n    #Lets take out the Clue Features and drop the ID because how can you use the ID as data ?\n    s1_fts, s2_fts = s1_fts.values[0][1:], s2_fts.values[0][1:]\n    #Append these features after concatenation \n    #i.e. 15 Features of S1 and 15 of S2 to make 30 features for the pair\n    pair_fts.append(np.concatenate([s1_fts, s2_fts]))","8f667296":"final_features = np.array(pair_fts)\nprint(final_features.shape)","b4f76bf0":"from sklearn.model_selection import train_test_split as tts\n#X = train_features, y = target_features\nX = final_features\ny = train['Collaboration']\n\n#Split into training and test splits\nX_train, X_test, y_train, y_test = tts(X, y, test_size=0.2)","048b29a3":"from sklearn.linear_model import LogisticRegression as LR\nmodel = LR()\nmodel.fit(X_train, y_train)","7dceb7e3":"def accuracy(y_predict, y_true):\n    total = len(y_predict)\n    correct = sum(y_predict==y_true)\n    return 100 * correct\/total","86a2cef9":"y_predict=model.predict(X_test)\nprint(\"The Validation Accuracy is %0.2f percent\" % accuracy(y_predict, y_test))","6aaeec05":"#Lets take all the Student IDs Corresponding to the pairs!\nStudent1_ID = test['Student1_ID'].tolist()\nStudent2_ID = test['Student2_ID'].tolist()\npair_fts = []\n#Lets Loop\nfor s1, s2 in tqdm.tqdm(zip(Student1_ID, Student2_ID), total=len(test)):\n    #Get features of Students with given IDs\n    s1_fts, s2_fts = (\n        df_fts[df_fts['StudentID']==s1],\n        df_fts[df_fts['StudentID']==s2]\n    )\n    #Lets take out the Clue Features and drop the ID because how can you use the ID as data ?\n    s1_fts, s2_fts = s1_fts.values[0][1:], s2_fts.values[0][1:]\n    #Append these features after concatenation \n    #i.e. 15 Features of S1 and 15 of S2 to make 30 features for the pair\n    pair_fts.append(np.concatenate([s1_fts, s2_fts]))","7963ed15":"final_features = np.array(pair_fts)\nprint(final_features.shape)","17e79e99":"DaPredictions = model.predict(final_features)","6dd97f31":"my_submission = pd.read_csv(\"\/kaggle\/input\/tsc-ctetw21\/sample_submission.csv\")\nmy_submission.head()","8bd5d667":"my_submission[\"Collaboration\"]=DaPredictions","509a8810":"my_submission.head()","14ae7cb7":"my_submission.to_csv(\"VictorKrumDumb.csv\", index=False)","91b00c00":"tqdm is a nice python tool that wraps around loops and lets me know the amount of time remaining while I chat with Ms. Granger ;)","66a1d6f6":"#### So this was a naive first attempt, now that we have DaPredictinons Lessssgo","846e59e0":"All set now lets train the model","738dc36b":"### Now What ?\nNow I need to replace the Student ID with their features, train an algorithm and then do the same thing for test and Voila!","ac1514e7":"Now we need to see how good this model is, Lets make an accuracy function","47d0694e":"Great we get 30 features for the 10000 pairs, now lets model using Logistic regression (A classification parallel of Linear Regression)!","fa9e689f":"## Lets Check The Data!\nLets read the csvs in Pandas, check out the fields and basic statistics","36471791":"Now I submit the file on the submit page and kaggle will evaulate it!\nWe got 72.72% on the public leaderboard!\nNow be creative in your solutions! Hope this helped","4171489a":"## Welcome to Victor Krum's Kickstart Solution\nAs you might be knowing Victor Krum isnt one of the brightest, but he has been tagging along with BackPage for a while now, so this notebook should help you to get started\n\n\n*WHISTLE*","5d373f12":"Thats quite close to a cute number :3, So let it be like that.\n\n\nNow lets repeat this for the test set and submit our predictions!\n\nFirst prepare test featuers","73d2d2ad":"### Inference\nHmm, So there are a lot of 0s and lesser 1s, makes sense not everyone collaborates with everyone!\nThis is just a beginners notebook so I will take a little data and show you how the submission is done!","8f5fcd03":"Make Predictions","3abf0cff":"Before we train and evaluate our models, lets make a validation set to see how our model works on unseen data","467e282b":"This submission goes to the output directory you can see it in the output -> kaggle -> working, click and download the file","e8f31e03":"## Submission"}}