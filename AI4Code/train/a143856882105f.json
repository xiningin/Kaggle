{"cell_type":{"2cba8ea0":"code","d42bf107":"code","c363a1d6":"code","10610553":"code","547604a6":"code","fbadac24":"code","ae6aed66":"code","f5e5f88d":"code","e8f2f729":"code","8e2bb78f":"code","13bf000c":"code","29c9890a":"code","8cae6e51":"code","e29349f5":"code","54d52b61":"code","04979fa8":"code","0f02dcc9":"code","574049df":"code","85da7413":"code","c464f11a":"code","bf5f49f7":"code","9a6ee685":"code","bc15d22c":"code","b97b9fa2":"code","8cd13bfb":"code","101725c8":"code","d45c6f1c":"code","52c796a9":"code","8bc470af":"code","0c69762b":"code","d09a82e7":"code","cd9a5b8a":"code","1574032c":"code","2fbaf5be":"code","fee8d5f7":"code","406549fd":"code","30d334af":"code","80c7166e":"code","028c1821":"code","ecf9608a":"code","4ecad924":"code","54b5b9e8":"code","dedbd002":"code","17e1d673":"code","db7b16a0":"code","d4c15e9f":"code","45fbe389":"markdown","fcf86d18":"markdown","a91b8322":"markdown","2df60fb1":"markdown","857e9579":"markdown","d1f67da4":"markdown","e918f616":"markdown","cb9421e6":"markdown","5baf6cd5":"markdown","b6828bc5":"markdown","a9614d13":"markdown","2d6d7a7b":"markdown","e36ec618":"markdown","01224723":"markdown","5c5f94ea":"markdown","1796eb27":"markdown","cb004775":"markdown","b1a65477":"markdown"},"source":{"2cba8ea0":"#Let\u00b4s import the main libraries\nimport pandas as pd \nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","d42bf107":"# Importing datasets\ncustomers = pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_customers_dataset.csv\")\ngeo= pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_geolocation_dataset.csv\")\norder_items= pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_order_items_dataset.csv\")\norder_pay= pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_order_payments_dataset.csv\")\norder_reviews= pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_order_reviews_dataset.csv\")\norders= pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_orders_dataset.csv\")\nproducts= pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_products_dataset.csv\")\nsellers= pd.read_csv(\"..\/input\/brazilian-ecommerce\/olist_sellers_dataset.csv\")\nprod_categ= pd.read_csv(\"..\/input\/brazilian-ecommerce\/product_category_name_translation.csv\")","c363a1d6":"#Data pre-processing\n\n#merge dataset that have \"order_id\" column\nOrder_tot= pd.merge(orders, order_items, on='order_id')\n\n#evaluate the dataset\nOrder_tot.info()\n#the columns we need for now have the same amout of line, so let\u00b4s not delete anything now\n\n\n\n#separate date and time of oder purchase timestamp\nvariable_split= Order_tot['order_purchase_timestamp'].str.split(' ')\n\n#create a new colum with only the date\nOrder_tot['order_purchase_date']=variable_split.str.get(0)\n\n\n#separete the date into day, month, year\n#separate date and time, for this i need the date without time specifications\nvariable_split= Order_tot['order_purchase_date'].str.split('-')\n\n\nOrder_tot['year']=variable_split.str.get(0)\nOrder_tot['month']=variable_split.str.get(1)\nOrder_tot['day']=variable_split.str.get(2)\n\n","10610553":"#graph with the total sales- price- over time\n#set time \nOrder_tot[\"order_purchase_date\"]= pd.to_datetime(Order_tot[\"order_purchase_date\"])\n\n#plot the graph\nsales_by_time= Order_tot.groupby([\"order_purchase_date\"])[\"price\"].sum().plot()\n\n","547604a6":"#graph with the freight over time, let\u00b4s see if the freight mean changed over time\nOrder_tot.groupby([\"order_purchase_date\"])[\"freight_value\"].mean().plot()\n","fbadac24":"#Now let\u00b4s see which month presented the highest total sales considering the price\n\nOrder_tot.groupby([\"month\"])[\"price\"].sum().plot(kind='bar', figsize=(10,5))","ae6aed66":"#Let\u00b4s see if the freight values changes over time\nOrder_tot.groupby([\"month\"])[\"freight_value\"].mean().plot(kind='bar', figsize=(10,5))","f5e5f88d":"#SEPARATE DATE AND TIME FOR THE 4 COLUMNS IN LOG\nvariable_split= Order_tot[\"order_approved_at\"].str.split(' ')\n\nOrder_tot['approved_date']=variable_split.str.get(0)\n\n\n\nvariable_split= Order_tot[\"order_delivered_carrier_date\"].str.split(' ')\n\nOrder_tot['order_carrier_date']=variable_split.str.get(0)\n\n\n\nvariable_split= Order_tot[\"order_delivered_customer_date\"].str.split(' ')\n\nOrder_tot['order_delivered_date']=variable_split.str.get(0)\n\n\n\nvariable_split= Order_tot[\"order_estimated_delivery_date\"].str.split(' ')\n\nOrder_tot['est_delivery_date']=variable_split.str.get(0)","e8f2f729":"#Transformar all the new columns into datatime\nOrder_tot[\"approved_date\"]= pd.to_datetime(Order_tot[\"approved_date\"])\n\nOrder_tot[\"order_carrier_date\"]= pd.to_datetime(Order_tot[\"order_carrier_date\"])\n\nOrder_tot[\"order_delivered_date\"]= pd.to_datetime(Order_tot[\"order_delivered_date\"])\n\nOrder_tot[\"est_delivery_date\"]= pd.to_datetime(Order_tot[\"est_delivery_date\"])","8e2bb78f":"#calculate the logistics gap between the time columns\nOrder_tot[\"gap1\"]= Order_tot[\"order_carrier_date\"] - Order_tot[\"approved_date\"]\n\n\nOrder_tot[\"gap2\"]= Order_tot[\"order_delivered_date\"] - Order_tot[\"order_carrier_date\"]\n\n\nOrder_tot[\"gap3\"]= Order_tot[\"est_delivery_date\"] - Order_tot[\"order_delivered_date\"]\n\n","13bf000c":"print(Order_tot[\"gap1\"])\nprint(Order_tot[\"gap2\"])\nprint(Order_tot[\"gap3\"])","29c9890a":"#Most orders take 1 day to be delivered to the carrier\nOrder_tot.gap1.value_counts().nlargest(20).plot(kind='bar',figsize=(12,5))","8cae6e51":"#Most of orders take 6 to 7 days to go from the carrier to be delivered to the customer\nOrder_tot.gap2.value_counts().nlargest(20).plot(kind='bar',figsize=(12,5))\n\n","e29349f5":"#The gap from the delivery prediction to the actual date of delivery varies from 13 to 15 days.\nOrder_tot.gap3.value_counts().nlargest(20).plot(kind='bar',figsize=(12,5))","54d52b61":"Order_tot.info()","04979fa8":"#merge Order_tot with order_reviews\ndf= pd.merge(Order_tot, order_reviews, on=\"order_id\")","0f02dcc9":"df.info()","574049df":"#Drop the missing values\ndf= df.dropna()","85da7413":"#Transform the gap1, gap2, gap3 datatype to int\ndf[\"gap1\"]= df[\"gap1\"].astype('timedelta64[D]').astype(int)\ndf[\"gap2\"]= df[\"gap2\"].astype('timedelta64[D]').astype(int)\ndf[\"gap3\"]= df[\"gap3\"].astype('timedelta64[D]').astype(int)","c464f11a":"#review score according to gap1(time from order approved to delivered to carrier)\ndf.groupby([\"review_score\"]).gap1.mean().plot(kind='bar',figsize=(8,5))","bf5f49f7":"#review score according to gap2(time from received by the carrier to delivered to final customer)\ndf.groupby([\"review_score\"]).gap2.mean().plot(kind='bar',figsize=(8,5))","9a6ee685":"#review score according to gap3(difference between the predicted deliver time and the actual delivered time)\ndf.groupby([\"review_score\"]).gap3.mean().plot(kind='bar',figsize=(8,5))","bc15d22c":"print(df.head())","b97b9fa2":"#SCATTER REVIEW SCORE X GAP3\nimport matplotlib.pyplot as plt\n\nx = df.iloc[:, -5].values\ny = df.iloc[:, -7].values\n\nplt.scatter(x,y, label='skitscat', color='k', s=25, marker=\"o\")\n\nplt.xlabel('Review scores')\nplt.ylabel('Gap3')\nplt.title('REVIEW SCORE X GAP3')\nplt.legend()\nplt.show()","8cd13bfb":"#SCATTER REVIEW SCORE X GAP2\nimport matplotlib.pyplot as plt\n\nx = df.iloc[:, -5].values\ny = df.iloc[:, -8].values\n\nplt.scatter(x,y, label='skitscat', color='k', s=25, marker=\"o\")\n\nplt.xlabel('Review scores')\nplt.ylabel('Gap2')\nplt.title('REVIEW SCORE X GAP2')\nplt.legend()\nplt.show()","101725c8":"tot1= pd.merge(orders, order_items, on='order_id')\ntot2= pd.merge(tot1, sellers, on='seller_id' )\ntot3= pd.merge(tot2, customers, on='customer_id')\ntot4= pd.merge(tot3, order_reviews, on='order_id')\ntot5= pd.merge(tot4, products, on='product_id')\ntot6= pd.merge(tot5, sellers, on='seller_id')","d45c6f1c":"#Count the number of origem states and destination states \ntot6.groupby(['seller_state_x', 'customer_state']).order_item_id.value_counts().nlargest(20).plot(kind='bar',figsize=(12,5))","52c796a9":"#see the smallest review scores accoring to origen and destinatin states\ntot6.groupby(['seller_state_x', 'customer_state']).review_score.mean().nsmallest(30).plot(kind='bar',figsize=(8,5))","8bc470af":"#sellers with the best review score by state\ntot6.groupby(['seller_state_x']).review_score.mean().nlargest(30).plot(kind='bar',figsize=(8,5))","0c69762b":"#sellers with the worst review scores by state\ntot6.groupby(['seller_state_x']).review_score.mean().nsmallest(30).plot(kind='bar',figsize=(8,5))","d09a82e7":"#product categories with the most sales units\ntot6.product_category_name.value_counts().nlargest(20).plot(kind='bar',figsize=(8,5))\n","cd9a5b8a":"#product category with the best review_score\ntot6.groupby([\"product_category_name\"])[\"review_score\"].mean().nlargest(30).plot(kind='bar',figsize=(8,5))","1574032c":"#product category with the worst review_score\ntot6.groupby([\"product_category_name\"])[\"review_score\"].mean().nsmallest(30).plot(kind='bar',figsize=(8,5))\n","2fbaf5be":"#unite gap values from Order_tot into tot6\ntot6= pd.merge(df, tot6, on=\"order_id\" )","fee8d5f7":"#wich origen states and destination states have the biggest gap2(delivery time)?\ntot6.groupby([\"seller_state_x\", \"customer_state\"])[\"gap2\"].sum().nlargest(30).plot(kind='bar',figsize=(8,5))\n","406549fd":"#wich origen states and destination states have the smallest gap2(delivery time)?\ntot6.groupby([\"seller_state_x\", \"customer_state\"])[\"gap2\"].mean().nsmallest(30).plot(kind='bar',figsize=(8,5))\n","30d334af":"#sales per  seller_city\ntot6.groupby([\"seller_city_x\"])[\"price_x\"].sum().nlargest(30).plot(kind='bar',figsize=(8,5))\n","80c7166e":"#sales per state\ntot6.groupby([\"seller_state_x\"])[\"price_x\"].sum().nlargest(30).plot(kind='bar',figsize=(8,5))\n","028c1821":"#HIGHEST FREIGHT VALUE STATE ORIGIN TO STATE DESTINATION\nfreigh_per_states= tot6.groupby([\"seller_state_x\", \"customer_state\"])[\"freight_value_x\"].mean().nlargest(30).plot(kind='bar', figsize=(8,5))","ecf9608a":"nlp= order_reviews.loc[:, [\"order_id\", \"review_score\", \"review_comment_message\"]]\nnlp.info()\n\nnlp= nlp.dropna()\n\nnlp= nlp.reset_index(drop=True)\n\nnlp.info()","4ecad924":"print(nlp.head())","54b5b9e8":"# Cleaning the texts\nimport re\nimport nltk\nnltk.download('stopwords')\n#nltk.download('floresta')\nfrom nltk.corpus import stopwords\nfrom string import punctuation\n#from nltk.corpus import floresta\nfrom nltk.stem.porter import PorterStemmer","dedbd002":"corpus = []\nfor i in range(0, 41753):\n    review = re.sub('[^a-zA-Z]', ' ', nlp[\"review_comment_message\"][i])\n    review = review.lower()\n    review = review.split()\n    ps = PorterStemmer()\n    review = [ps.stem(word) for word in review if not word in set(stopwords.words('portuguese'))]\n    review = ' '.join(review)\n    corpus.append(review)\n","17e1d673":"from nltk.tokenize import word_tokenize\nfrom nltk.tokenize import sent_tokenize\n\n#transform corpus into str data type\ncorpus2= str(corpus)\n\nsentences = corpus2\npalavras = word_tokenize(corpus2.lower())\n\nfrom nltk.corpus import stopwords\nfrom string import punctuation\n\nstopwords = set(stopwords.words('portuguese') + list(punctuation))\npalavras_sem_stopwords = [palavra for palavra in palavras if palavra not in stopwords]\n\n\n","db7b16a0":"#Let\u00b4s see the most occuring words in the review messages\nfrom nltk.probability import FreqDist\n\nfrequencia = FreqDist(palavras_sem_stopwords)\n\nfrom collections import Counter \n\n# Pass the split_it list to instance of Counter class. \nCounter = Counter(palavras_sem_stopwords) \n\n\n# most_common() produces k frequently encountered \n# input values and their respective counts. \nmost_occur = Counter.most_common(30) \n  \nprint(most_occur) ","d4c15e9f":"#word cloud \n# Start with loading all necessary libraries\nimport numpy as np\nimport pandas as pd\nfrom os import path\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport matplotlib.pyplot as plt\n\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n\n#join all the reviews lines in one single line\ntext= str(corpus)\n\n\n# Create and generate a word cloud image:\nwordcloud = WordCloud().generate(text)\n\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.show()","45fbe389":"Most of the words in the wordcloud is related to the delivery, this indicates that the delivery is strongly connected to the delivery score and that the delivery is very imp","fcf86d18":"Since the focus is on the review score, let\u00b4s drop the lines with missing values","a91b8322":"Most of negative values in gap3, which means delivery delay, received review score 1 ","2df60fb1":"3 cases have delivery time much higher than others, and they are geographically closer than other cases with a faster delivery time","857e9579":"Now let\u00b4s join all the datasets into one single big dataset","d1f67da4":"Review score value 1 is the score that has gap 2\u00b4s highest values, which also points out that the fastest delivery time highly influenced review score.","e918f616":"Fist we want to see how the sales is going over time considering the price","cb9421e6":"As it is possible to see, most of the shortest delivery time have the origen and destination in the same state","5baf6cd5":"Importing Libraries\nthe time from delivered","b6828bc5":"Create a new dataset to make NLP analysis","a9614d13":"Create a new dataframe with the order_reviews included to see what influences the review score","2d6d7a7b":"# gap1 = the time between order approved and delivered to the carrier\n\n# gap2 = the time from delivered to carrier to delivered to the customer\n\n# gap3 = the difference between the time delivered to the customer to the previous estimated delivered time","e36ec618":"Let\u00b4s see the logistics performance","01224723":"We can see the same result as for the gap1, less time it takes between the logistics processes, high chances that the review score will be high","5c5f94ea":"It shows that when less time it takes from the order approved to delivered to carrier, higher it will be the review score","1796eb27":"When the value is positive it means the product has delivered before the predicted date. \nWhen the value is negative it means that the product has delivered with a delay compared to the predicted date","cb004775":"For gap3, when higher the value it means the product was delivered before the predicted time, which influences the review score","b1a65477":"Let\u00b4s see the gap1, gap2 and gap3 with more details"}}