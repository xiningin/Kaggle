{"cell_type":{"eb94d8ad":"code","9ae4ba6d":"code","f12ea66f":"code","12813a81":"code","372b0640":"code","ea1cc401":"code","206666bb":"code","2c01ac35":"code","3f7f596f":"code","ba13543d":"code","ef5fba85":"code","3d711064":"code","cb15d1eb":"code","8a741387":"code","8632049e":"code","f7143bb1":"code","2dac343e":"code","4548a412":"code","3bbf8840":"code","e976269f":"code","dd278e9b":"code","95de12e5":"code","2cef41f7":"code","9e54e799":"code","85bcaabc":"code","9d9ea802":"code","5a8eff8a":"code","77a2481f":"code","d4ea0af1":"code","03759767":"code","5fd232e6":"code","def01460":"code","59c68209":"code","0e7309f1":"code","a28e83c0":"code","7e7dfcca":"code","af9fa7b6":"code","7b8070d4":"code","1ecaa49d":"code","25d9115b":"code","247c520d":"code","d0852760":"code","3c85dab5":"code","664a2208":"code","924b3aae":"code","8af601bc":"code","c38e836a":"code","f09a64b6":"code","2da71f05":"code","a88d09d2":"code","402d750d":"code","ba0c54b8":"code","6d332a88":"code","998b0dd3":"code","628cd331":"code","0ee5d377":"code","1fb5a154":"code","c5ee5023":"code","1575b4b9":"code","5918b741":"code","652862ee":"code","68e63ab4":"code","c614a419":"code","48b38132":"code","d2f79488":"code","cc3cf117":"code","a2896b62":"code","e6878262":"code","85c7e49a":"code","e7631def":"code","1bab7d04":"code","65174f5c":"code","15f452dc":"code","bb5e0577":"code","b1bc8a98":"code","87446b90":"code","0f136e08":"code","0b6ee65f":"code","9b859df5":"code","7308a5c8":"code","451a32cc":"code","f0c0ed86":"code","5ec26aba":"code","36781ae6":"code","3baec8f2":"code","7050cb6c":"code","137e2450":"code","89361faa":"code","0015d248":"code","b61fd993":"code","a19c2e0b":"code","d271efe7":"code","f4cefc6e":"code","7e665231":"code","3b9448f7":"code","74b0a159":"code","15898f9f":"code","a25f0b1c":"code","ef2d7277":"code","0d67beb7":"code","0fe907df":"code","79ca5a4c":"code","dfb7da0c":"code","39de7137":"code","bce40edb":"code","fcba583b":"code","a0d5a425":"code","49f780ea":"code","a1e85daf":"code","9713625b":"code","29d7169e":"code","ce0b94f7":"markdown","e75c9cad":"markdown","41fc3fb1":"markdown","20d6c4d7":"markdown","7c9ef5bf":"markdown","843a7c58":"markdown","26f7a8ce":"markdown","2e25a4e6":"markdown","7b88b334":"markdown","fa095f8c":"markdown","4d00a502":"markdown","10cd234e":"markdown","b2e20cf3":"markdown","0de4cda9":"markdown","6d3f1736":"markdown","c2193bab":"markdown","78bb6161":"markdown","e734c5ee":"markdown","e1be933f":"markdown","01ae0bad":"markdown","495ab44e":"markdown","795658e2":"markdown","d49d498f":"markdown","35f02be7":"markdown","95a7fddc":"markdown","4c892bb3":"markdown","71abf0ae":"markdown","9ee4b040":"markdown","c97ecedb":"markdown","f8fd23a7":"markdown","f464c6b8":"markdown","df8d53e5":"markdown"},"source":{"eb94d8ad":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msn\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom scipy import stats\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport sklearn.metrics as metrics\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.metrics import roc_curve, precision_recall_curve, auc, make_scorer, recall_score, accuracy_score, precision_score, confusion_matrix\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold\nfrom sklearn.svm import SVC","9ae4ba6d":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")","f12ea66f":"train_df.head()","12813a81":"train_df.shape","372b0640":"test_df.head()","ea1cc401":"test_PassengerId=test_df['PassengerId']","206666bb":"test_df.shape","2c01ac35":"test_PassingerID=test_df['PassengerId']","3f7f596f":"print(f'Number of training examples: {train_df.shape[0]}')\nprint(f'Number of test examples: {test_df.shape[0]}')","ba13543d":"train_df.info()","ef5fba85":"test_df.info()","3d711064":"df=pd.concat([train_df, test_df], axis=0)","cb15d1eb":"df.head()","8a741387":"df.drop(['PassengerId'], axis=1, inplace=True)","8632049e":"df['Pclass'].value_counts()","f7143bb1":"df.head()","2dac343e":"df.describe().T","4548a412":"df.isnull().sum()","3bbf8840":"msn.bar(df)","e976269f":"df[df['Fare'].isnull()]","dd278e9b":"print(df['Fare'].mean())\nprint(df['Fare'].median())","95de12e5":"df['Fare']=df['Fare'].fillna(df['Fare'].mean())","2cef41f7":"df[df['Cabin'].isnull()]","9e54e799":"print( df['Cabin'].isnull().sum()\/df.shape[0] )","85bcaabc":"df.drop('Cabin', axis=1, inplace=True)","9d9ea802":"df[df['Embarked'].isnull()]","5a8eff8a":"df['Embarked'].value_counts()","77a2481f":"df[ (df['Sex']=='female') & (df['SibSp']==0) &(df['Parch']==0) & (df['Pclass']==1) ]['Embarked'].value_counts()","d4ea0af1":"df['Embarked'].mode()","03759767":"df['Embarked']=df['Embarked'].fillna(df['Embarked'].mode()[0])","5fd232e6":"df['Age'].describe().T","def01460":"sns.distplot(df['Age'], fit=stats.norm)","59c68209":"df['Age'].median()","0e7309f1":"df['Age']=df['Age'].fillna(df.groupby(['Sex'])['Age'].transform('median'))","a28e83c0":"df.isnull().sum()","7e7dfcca":"sns.heatmap(df.corr(), annot = True, fmt = \".2f\")\nplt.show()","af9fa7b6":"df.head()","7b8070d4":"sns.factorplot(x = \"SibSp\", y = \"Survived\", data = df, kind = \"bar\", size = 6)\nplt.ylabel(\"Survived Probability\")\nplt.show()","1ecaa49d":"sns.factorplot(x = \"Parch\", y = \"Survived\", kind = \"bar\", data = df, size = 6)\nplt.ylabel(\"Survived Probability\")\nplt.show()","25d9115b":"sns.factorplot(x = \"Pclass\", y = \"Survived\", data = df, kind = \"bar\", size = 6)\nplt.ylabel(\"Survived Probability\")\nplt.show()","247c520d":"g = sns.FacetGrid(df, col = \"Survived\")\ng.map(sns.distplot, \"Age\", bins = 25)\nplt.show()","d0852760":"sns.factorplot(x = \"Sex\", y = \"Age\", data = df, kind = \"box\")\nplt.show()","3c85dab5":"sns.countplot(x='Parch', data=df, order=df['Parch'].value_counts().index, hue='Survived')","664a2208":"df['Ticket']=df.Ticket.apply(lambda x : len(x))","924b3aae":"df['FamilySize']=df.SibSp+df.Parch+1","8af601bc":"sns.factorplot(x = \"FamilySize\", y = \"Survived\", data =df, kind = \"bar\")\nplt.ylabel(\"Survival\")\nplt.show()","c38e836a":"family={1: 'Alone', 2: 'Small', 3: 'Small', 4: 'Small', 5: 'Medium', 6: 'Medium', 7: 'Large', 8: 'Large', 11: 'Large'}","f09a64b6":"df['Family_Size_Grouped']=df['FamilySize'].map(family)","2da71f05":"sns.countplot(x = \"Family_Size_Grouped\", data = df)\nplt.show()","a88d09d2":"sns.factorplot(x = \"Family_Size_Grouped\", y = \"Survived\", data = df, kind = \"bar\")\nplt.ylabel(\"Survival\")\nplt.show()","402d750d":"df['Name']","ba0c54b8":"df['Name'].apply( lambda x: x.split(', ')[1].split('.')[0] )","6d332a88":"#df.Name.apply(lambda x: x.split('.')[0].split(',')[1].strip())\ndf['Title']=df['Name'].apply( lambda x: x.split(', ')[1].split('.')[0] )","998b0dd3":"df['Title'].value_counts()","628cd331":"titles=['Mr', 'Miss', 'Mrs', 'Master']","0ee5d377":"df['Title']=df['Title'].apply(lambda x: x if x in titles else 'Other')","1fb5a154":"df['Title'].value_counts()","c5ee5023":"sns.countplot(x=\"Title\", data = df)\nplt.xticks(rotation = 60)\nplt.show()","1575b4b9":"sns.countplot(x=\"Title\", data = df, hue='Survived')\nplt.xticks(rotation = 60)\nplt.show()","5918b741":"df['Last_Name']=df.Name.apply(lambda x: x.split(',')[0].strip())","652862ee":"df['IsMarried']=df['Title'].apply(lambda x: 1 if x=='Mrs' else 0)","68e63ab4":"sns.countplot(x=\"IsMarried\", data = df)\nplt.xticks(rotation = 60)\nplt.show()","c614a419":"sns.countplot(x=\"IsMarried\", data = df, hue='Survived')\nplt.xticks(rotation = 60)\nplt.show()","48b38132":"df['IsAlone']=df['FamilySize'].apply(lambda x: 1 if x==1 else 0)","d2f79488":"sns.countplot(x=\"IsAlone\", data = df)\nplt.xticks(rotation = 60)\nplt.show()","cc3cf117":"sns.countplot(x=\"IsAlone\", data = df, hue='Survived')\nplt.xticks(rotation = 60)\nplt.show()","a2896b62":"df['Woman_or_Boy'] = np.where( (df['Title']=='Master') | (df['Sex']=='female'), 1, 0 )","e6878262":"sns.countplot(x=\"Woman_or_Boy\", data = df)\nplt.xticks(rotation = 60)\nplt.show()","85c7e49a":"sns.countplot(x=\"Woman_or_Boy\", data = df, hue='Survived')\nplt.xticks(rotation = 60)\nplt.show()","e7631def":"df['Fare'].describe().T","1bab7d04":"df[\"Fare\"].hist(bins=13, color='#34495e', alpha=0.9)","65174f5c":"df['FareBin'] = pd.qcut(df['Fare'], 13)","15f452dc":"sns.countplot(x='FareBin', data=df)","bb5e0577":"sns.countplot(x='FareBin', data=df, hue='Survived')","b1bc8a98":"df[\"Age\"].hist(bins=10, color='#34495e', alpha=0.9)","87446b90":"df['AgeBin'] = pd.cut(df['Age'].astype(int), 10)","0f136e08":"sns.countplot(x='AgeBin', data=df)","0b6ee65f":"sns.countplot(x='AgeBin', data=df, hue='Survived')","9b859df5":"df.drop(['Name',],axis=1,inplace=True)","7308a5c8":"df.head()","451a32cc":"df.info()","f0c0ed86":"num_vars=list(df._get_numeric_data().columns)\n\nprint(f'Numeric variables: {num_vars}')","5ec26aba":"cat_vars=list(set(df.columns)-set(num_vars))\n\nprint(f'Categoric variable: {cat_vars}')","36781ae6":"def count_plot(df, cat_cols):\n    for i, col in enumerate(cat_cols):\n        plt.figure(num=i, figsize=[8, 8])\n        sns.countplot(x=col, data=df, order=df[col].value_counts().index, hue='Survived')\n        plt.tight_layout()","3baec8f2":"count_plot(df, cat_vars)","7050cb6c":"def hist_plot(df, variable):\n    plt.figure(figsize=(9, 3))\n    plt.hist(df[variable], bins=50)\n    plt.xlabel(variable)\n    plt.ylabel('Frequency')\n    plt.title(f\"{variable} distribution with hist\")\n    plt.show()","137e2450":"df['Woman_or_Boy']","89361faa":"for num in num_vars:\n    print(num)\n    hist_plot(df, num)","0015d248":"df.head()","b61fd993":"print(num_vars)\nprint(cat_vars)","a19c2e0b":"df.head()","d271efe7":"df=pd.get_dummies(df, drop_first=True)","f4cefc6e":"df.head()","7e665231":"df.info()","3b9448f7":"df.isnull().sum()","74b0a159":"train_df=df[df['Survived'].notnull()]\ntest_df=df[df['Survived'].isnull()]","15898f9f":"print(train_df.shape)\nprint(test_df.shape)","a25f0b1c":"train_df.head()","ef2d7277":"test_df.head()","0d67beb7":"X=train_df.drop('Survived', axis=1)\nY=train_df['Survived'].astype('int')","0fe907df":"test_df.drop('Survived', axis=1, inplace=True)\ntest_df.head()","79ca5a4c":"from sklearn.preprocessing import StandardScaler\nsc=StandardScaler()\nX=sc.fit_transform(X)\ntest_df=sc.fit_transform(test_df)","dfb7da0c":"def train_show_results(X, Y, test_df, model, split_share = 0.3,  **kwargs):\n    \n    print(f\"Training using {model} with {kwargs}\")\n    m = model(**kwargs)\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = split_share, stratify = Y)\n    \n    m.fit(X_train, Y_train)\n    report(m, X_test, Y_test, test_df)","39de7137":"def report(model, X_test, Y_test, test_df):\n    preds = model.predict(X_test)\n    print(metrics.classification_report(Y_test, preds))\n    \n    ax = metrics.plot_roc_curve(model, X_test, Y_test)\n    plt.title(f\"ROC-AUC curve using {str(model).split('.')[-1]}\")\n    print(\"Accuracy: %s%%\" % (100*accuracy_score(Y_test, preds)))\n    plt.show()\n    return model.predict(test_df)","bce40edb":"def submission(preds):\n    result=pd.DataFrame()\n    result['PassengerId']=test_PassengerId\n    result['Survived']=preds\n    result.head()\n    result.to_csv('submission.csv', index=False) ","fcba583b":"train_show_results(X, Y, test_df, LogisticRegression, penalty=\"l1\", solver=\"liblinear\")","a0d5a425":"train_show_results(X, Y, test_df, RandomForestClassifier, max_depth=100)","49f780ea":"train_show_results(X, Y, test_df, SVC, C=50)","a1e85daf":"random_state=1\n\nrf_param_grid = {\n    'min_samples_split': [3, 5, 10], \n    'n_estimators' : [100, 300],\n    'max_depth': [3, 5, 15, 25],\n    'max_features': [3, 5, 10, 20]\n}\n\nclf = GridSearchCV(RandomForestClassifier(), param_grid=rf_param_grid, \n                       cv = StratifiedKFold(n_splits = 5), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\nclf.fit(X, Y)\nfinal_model=clf.best_estimator_\nfinal_model.fit(X, Y)\npred_rf=report(final_model, X, Y, test_df)","9713625b":"random_state=1\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.0001,0.001,0.1,1,10,50,100],\n                 \"C\": [0.0001,0.001,0.1,1,10,50,100],\n                 }\n\nclf = GridSearchCV(SVC(), param_grid=svc_param_grid, \n                       cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\nclf.fit(X, Y)\nfinal_model=clf.best_estimator_\nfinal_model.fit(X, Y)\npreds_svc=report(final_model, X, Y, test_df)","29d7169e":"#0.80622\nsubmission(preds_svc)","ce0b94f7":"## Categorical Variable Analysis","e75c9cad":"##### Fare","41fc3fb1":"# Missing Values","20d6c4d7":"##### Last name","7c9ef5bf":"##### Age","843a7c58":"##### Ticket","26f7a8ce":"# Load and Check data","2e25a4e6":"##### Married","7b88b334":"### Check data","fa095f8c":"## Split Training and Testing Data","4d00a502":"##### Embarked","10cd234e":"### Check null data","b2e20cf3":"# Model Tuning","0de4cda9":"# Import libraries","6d3f1736":"## Correlation","c2193bab":"##### Alone","78bb6161":"##### Age bins","e734c5ee":"## Numerical Variable Analysis","e1be933f":"# Model","01ae0bad":"## Encoder","495ab44e":"## Scaler","795658e2":"##### Title","d49d498f":"# Feature Engineering","35f02be7":"## Univariate Variable Analysis","95a7fddc":"##### Woman or boy","4c892bb3":"combining training & testing data for preposesing after that we do not write same code for test","71abf0ae":"Master is a title for an underage male. If a person is under 18, master would be used.\nOnce a person turns 18 and enters adulthood, mister would be used.","9ee4b040":"# EDA","c97ecedb":"##### Family size","f8fd23a7":"##### Cabin","f464c6b8":"##### Fare bins","df8d53e5":"### Check data"}}