{"cell_type":{"eb79cdbf":"code","9b0758c2":"code","8e47aa82":"code","f64754d9":"code","5fab0f63":"code","863c5829":"code","f62df792":"code","81196d1a":"code","689fb1c1":"code","754aa44c":"code","4d0bebf6":"code","421071bb":"code","299e50a4":"code","938b671c":"code","3ba95ad0":"code","ea1af4ab":"code","75a9d551":"code","c651f0e4":"code","c6257822":"code","afe1e22f":"code","3238ec87":"code","f9f08eb9":"code","cf9e22df":"code","0775b25f":"code","26f63249":"code","dcfff9eb":"code","1b045cf6":"code","faf612d6":"code","31959226":"code","871ee9e2":"code","a8a0906c":"code","b3e40cc8":"code","99dc43b5":"code","d02b02ab":"code","b20c5ad4":"code","eec6875d":"code","0c9dbe63":"code","1c94a372":"code","386e7f46":"markdown","4a1be4a5":"markdown","274be71c":"markdown","275beb63":"markdown","c59a0842":"markdown","99cf5bad":"markdown","c64eb6fa":"markdown","c4efb1d6":"markdown"},"source":{"eb79cdbf":"import os\nimport random\nimport platform\nimport itertools\nimport gc\n\nimport sklearn\nimport pandas as pd\nimport numpy as np\nimport lightgbm as lgb","9b0758c2":"print('Python version:', platform.python_version())\nprint('Numpy version:', np.__version__)\nprint('Pandas version:', pd.__version__)\nprint('Scikit-Learn version:', sklearn.__version__)\nprint('LightGBM version:', lgb.__version__)","8e47aa82":"SEED = 42\n\nos.environ['PYTHONHASHSEED']=str(SEED)\nrandom.seed(SEED)\nnp.random.seed(SEED)","f64754d9":"df_train = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/train.csv')\ndf_train","5fab0f63":"df_train2 = pd.read_csv('\/kaggle\/input\/melanomaextendedtabular\/external_upsampled_tabular.csv')\ndf_train2","863c5829":"df_test = pd.read_csv('\/kaggle\/input\/siim-isic-melanoma-classification\/test.csv')\ndf_test","f62df792":"df_train.isnull().sum()","81196d1a":"df_train2.isnull().sum()","689fb1c1":"df_test.isnull().sum()","754aa44c":"df_train['sex'].unique()","4d0bebf6":"df_train2['sex'].unique()","421071bb":"df_test['sex'].unique()","299e50a4":"df_train['anatom_site_general_challenge'].unique()","938b671c":"df_train2['anatom_site_general_challenge'].unique()","3ba95ad0":"df_test['anatom_site_general_challenge'].unique()","ea1af4ab":"# get image name to create submission file\nimage_name_test = df_test['image_name']","75a9d551":"def process_sex(sex):\n    if sex == 'male':\n        return 1\n    elif sex == 'female':\n        return 0\n    else:\n        return np.nan\n    \ndf_train['sex'] = df_train['sex'].apply(process_sex)\ndf_train2['sex'] = df_train2['sex'].apply(process_sex)\ndf_test['sex'] = df_test['sex'].apply(process_sex)","c651f0e4":"def process_site(site):\n    if site == 'head\/neck':\n        return 0\n    elif site == 'upper extremity':\n        return 1\n    elif site == 'lower extremity':\n        return 2\n    elif site == 'torso':\n        return 3\n    elif site == 'palms\/soles':\n        return 4\n    elif site == 'oral\/genital':\n        return 5\n    else:\n        return np.nan\n    \ndf_train['anatom_site_general_challenge'] = df_train['anatom_site_general_challenge'].apply(process_site)\ndf_train2['anatom_site_general_challenge'] = df_train2['anatom_site_general_challenge'].apply(process_site)\ndf_test['anatom_site_general_challenge'] = df_test['anatom_site_general_challenge'].apply(process_site)","c6257822":"image_count_train = df_train['patient_id'].value_counts()\nimage_count_test = df_test['patient_id'].value_counts()\n\ndf_train['image_count'] = df_train['patient_id'].apply(lambda pid: image_count_train[pid])\ndf_train2['image_count'] = pd.Series([np.nan for _ in range(df_train2.shape[0])])\ndf_test['image_count'] = df_test['patient_id'].apply(lambda pid: image_count_test[pid])","afe1e22f":"age_min_train = df_train.groupby('patient_id').age_approx.min()\nage_max_train = df_train.groupby('patient_id').age_approx.max()\nage_span_train = age_max_train - age_min_train\ndf_train['age_min'] = df_train['patient_id'].apply(lambda pid: age_min_train[pid])\ndf_train['age_max'] = df_train['patient_id'].apply(lambda pid: age_max_train[pid])\ndf_train['age_span'] = df_train['patient_id'].apply(lambda pid: age_span_train[pid])\n\ndf_train2['age_min'] = df_train['age_approx']\ndf_train2['age_max'] = df_train['age_approx']\ndf_train2['age_span'] = pd.Series([0 for _ in range(df_train2.shape[0])])\n\nage_min_test = df_test.groupby('patient_id').age_approx.min()\nage_max_test = df_test.groupby('patient_id').age_approx.max()\nage_span_test = age_max_test - age_min_test\ndf_test['age_min'] = df_test['patient_id'].apply(lambda pid: age_min_test[pid])\ndf_test['age_max'] = df_test['patient_id'].apply(lambda pid: age_max_test[pid])\ndf_test['age_span'] = df_test['patient_id'].apply(lambda pid: age_span_test[pid])","3238ec87":"# delete unused column\ndel df_train['image_name']\ndel df_train['patient_id']\ndel df_train['diagnosis']\ndel df_train['benign_malignant']\n\ndel df_train2['image_name']\ndel df_train2['width']\ndel df_train2['height']\n\ndel df_test['image_name']\ndel df_test['patient_id']","f9f08eb9":"# get index of categorical feature\ncat_feature = ['sex', 'anatom_site_general_challenge']\ncat_feature_idx = [df_train.columns.get_loc(ct) for ct in cat_feature]\ncat_feature_idx","cf9e22df":"# split to X and y\nX = pd.concat([df_train, df_train2], axis=0).reset_index(drop=True)\ny = X['target']\ndel X['target']\n\nX_test = df_test.copy()","0775b25f":"param_dict = {\n    'boosting_type': ['gbdt', 'dart'],\n    'learning_rate': [0.1, 0.03, 0.01],\n    'n_estimators': [100, 300],\n    'feature_fraction': [5\/7 + 0.01, 1.0],\n    'lambda': [\n        # l1, l2\n        [0.0, 0.0],\n        [0.001, 0.01],\n        [0.01, 0.1],\n        [1.0, 0.01],\n    ],\n}\nparam_key = list(param_dict.keys())\nparam_item = list(param_dict.values())\nparam_item","26f63249":"param_list = list(itertools.product(*param_item))\nparam_list[:10]","dcfff9eb":"len(param_list)","1b045cf6":"df_model = pd.DataFrame(columns=[*param_key, *[f'model_{i}' for i in range(5)], *[f'model_{i}_auc' for i in range(5)], 'average_auc'])\ndf_model","faf612d6":"from sklearn.model_selection import StratifiedKFold\nfrom sklearn.metrics import roc_auc_score\n\nskf = StratifiedKFold(n_splits=5, shuffle=True, random_state=SEED)\n\nfor param in param_list:\n    models = []\n    ctr = 0\n    auc_scores = []\n\n    for train_idx, val_idx in skf.split(X, y):\n        X_train, X_val = X.loc[train_idx], X.loc[val_idx]\n        y_train, y_val = y[train_idx], y[val_idx]\n\n        model = lgb.LGBMRegressor(\n            # fixed\n            is_unbalance=True,\n            seed=SEED,\n            extra_trees=True,\n            min_data_per_group=1,\n            early_stopping_round=50,\n            # tweak,\n            **{\n                param_key[0]:param[0],\n                param_key[1]:param[1],\n                param_key[2]:param[2],\n                param_key[3]:param[3],\n                'lambda_l1':param[4][0],\n                'lambda_l2':param[4][0],\n            }\n        )\n        model.fit(\n            X_train, y_train,\n            categorical_feature=cat_feature_idx,\n            eval_set=(X_val, y_val),\n            eval_metric='auc',\n            verbose=-1\n        )\n\n        y_val_pred = model.predict(X_val)\n        auc_score = roc_auc_score(y_val, y_val_pred)\n\n        models.append(model)\n        auc_scores.append(auc_score)\n        \n    df_model.loc[ df_model.shape[0] ] = [\n        *param,\n        *models,\n        *auc_scores,\n        sum(auc_scores) \/ len(auc_scores)\n    ]","31959226":"df_model = df_model.sort_values(by=['average_auc', 'boosting_type', 'learning_rate', 'n_estimators'], ascending=[False, True, True, True]).reset_index(drop=True)\ndf_model.loc[:1000].to_pickle('model.pkl')\n!ls -lah","871ee9e2":"pd.set_option('display.max_row', df_model.shape[0])","a8a0906c":"df_model","b3e40cc8":"pd.set_option('display.max_row', 10)","99dc43b5":"def predict(X, mode='best_mean'):\n    if mode == 'best_mean':\n        y_preds = []\n        for i in range(5):\n            y_preds.append(df_model.loc[0, f'model_{i}'].predict(X))\n        y_preds = np.mean(np.array(y_preds), axis=0)\n    elif mode == 'ensemble_mean':\n        y_preds = []\n        for i in df_model.index:\n            for j in range(5):\n                y_preds.append(df_model.loc[i, f'model_{j}'].predict(X))\n        y_preds = np.mean(np.array(y_preds), axis=0)\n    elif mode == 'weighted_ensemble_mean':\n        y_preds = []\n#         model_weight = df_model['average_mcc'].apply(lambda a: a\/df_model['average_mcc'].sum())\n        model_weight = []\n        for i in df_model.index:\n            model_weight.append(1 + np.log10(df_model.shape[0] - i + 1))\n        print(model_weight[:10])\n        for i in df_model.index:\n            for j in range(5):\n                y_preds.append(\n                    df_model.loc[i, f'model_{j}'].predict(X) *\n                    model_weight[i]\n                )\n        y_preds = np.array(y_preds)\n        y_preds = np.mean(y_preds, axis=0)\n    else:\n        raise ValueError(\"Mode isn't supported\")\n    \n    return y_preds","d02b02ab":"y_test_pred = predict(df_test, mode='best_mean')\n\ndf_submission = pd.concat([image_name_test, pd.Series(y_test_pred, name='target')], axis=1)\ndf_submission.to_csv('submission_best_mean.csv', index=False)\n\ndf_submission","b20c5ad4":"y_test_pred2 = predict(df_test, mode='ensemble_mean')\n\ndf_submission2 = pd.concat([image_name_test, pd.Series(y_test_pred2, name='target')], axis=1)\ndf_submission2.to_csv('submission_ensemble_mean.csv', index=False)\n\ndf_submission2","eec6875d":"y_test_pred3 = predict(df_test, mode='weighted_ensemble_mean')\n\ndf_submission3 = pd.concat([image_name_test, pd.Series(y_test_pred3, name='target')], axis=1)\ndf_submission3.to_csv('submission_weighted_ensemble_mean.csv', index=False)\n\ndf_submission3","0c9dbe63":"lgb.plot_importance(df_model.loc[0, 'model_0'], ignore_zero=False, figsize=(16,9))","1c94a372":"lgb.plot_tree(df_model.loc[0, 'model_0'], figsize=(32,18))","386e7f46":"# 5. Train","4a1be4a5":"# 1. Initialize Environment","274be71c":"# 2. Data","275beb63":"# 4. Feature Engineering","c59a0842":"# 3. Short EDA","99cf5bad":"# 6. Test","c64eb6fa":"Special thanks to [allunia](https:\/\/www.kaggle.com\/allunia) for notebook [Don't turn into a Smoothie after the Shake-Up](https:\/\/www.kaggle.com\/allunia\/don-t-turn-into-a-smoothie-after-the-shake-up)\n\n| Filename | Public LB | Private LB |\n| --- | --- | --- |\n| submission_best_mean.csv | 0.6524 | 0.7156 |\n| submission_ensemble_mean.csv | **0.6544** | **0.7167** |\n| submission_weighted_ensemble_mean.csv | 0.6538 | 0.7164 |\n","c4efb1d6":"# 7. Visualize"}}