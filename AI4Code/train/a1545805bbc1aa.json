{"cell_type":{"9ee126d5":"code","8e1208f4":"code","934f00eb":"code","13e708b8":"code","3f53c596":"code","9e142d1b":"code","2487ec85":"code","77056ac6":"code","5d5bcef9":"code","466dea67":"code","20d2903c":"code","08e11f60":"code","2809d8ca":"code","13ccc487":"code","43da0b81":"code","091b6343":"code","509a9606":"code","31845551":"code","8ff8da03":"code","34f73b67":"code","44630a69":"code","06260416":"code","e0d41b9c":"code","d0f74266":"code","9b292eed":"code","d8345124":"code","7da951e2":"code","224f706c":"code","5f23270a":"code","5732b287":"code","e78849b9":"code","6544bde2":"code","582805ed":"code","89ef321f":"code","d695d75e":"code","e15f4070":"markdown","ff08149f":"markdown","54e3ee55":"markdown","defc5fd0":"markdown","118d5910":"markdown","d8b0fff3":"markdown","908749c4":"markdown","adbd3fcc":"markdown","cee76363":"markdown","47d40c4f":"markdown","58ef8777":"markdown","0da3d3e9":"markdown","27dc4679":"markdown","fa7a4f84":"markdown","23783381":"markdown","43366dc1":"markdown","4ab4524e":"markdown","1cc01d60":"markdown","fdbfc59b":"markdown","3d115e65":"markdown","1e8bc2fc":"markdown","e79766e2":"markdown","f6d58d7e":"markdown"},"source":{"9ee126d5":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\n%matplotlib inline","8e1208f4":"data = pd.read_csv('..\/input\/laptop-price\/laptop_price.csv',encoding='latin-1')\ndata","934f00eb":"data.info()","13e708b8":"data.describe()","3f53c596":"sns.histplot(x = 'Price_euros', data = data, kde = True)","9e142d1b":"sns.boxplot(x = 'Price_euros', data = data)","2487ec85":"plt.figure(figsize = (15,7))\nsns.boxplot(x = 'Ram',y = 'Price_euros', data = data)","77056ac6":"plt.figure(figsize = (19,7))\nsns.boxplot(x = 'Company',y = 'Price_euros', data = data)","5d5bcef9":"plt.figure(figsize = (15,7))\nsns.boxplot(x = 'OpSys',y = 'Price_euros', data = data)","466dea67":"plt.figure(figsize = (15,7))\nsns.boxplot(x = 'TypeName',y = 'Price_euros', data = data)","20d2903c":"plt.figure(figsize = (15,7))\nsns.scatterplot(x = data['Weight'].apply(lambda x: x[:-2]).astype(np.float),y = data['Price_euros'])","08e11f60":"data","2809d8ca":"data['Weight'] = data['Weight'].apply(lambda x: x[:-2]).astype(np.float32)","13ccc487":"data['Memory'] = data['Memory'].str.replace('Flash Storage','FlashStorage')","43da0b81":"def func(x):\n    if '+' in x:\n        return 'Both'\n    else:\n        return x.split()[1]\n            \ndata['Memory_Type'] = data['Memory'].apply(func)","091b6343":"sns.boxplot(x= 'Memory_Type', y= 'Price_euros', data = data)","509a9606":"for i,x in enumerate(data['Memory']):\n    d = {'SSD': '0GB', 'HDD': '0GB', 'FlashStorage': '0GB','Hybrid': '0GB'}\n    if '+' in x:\n        arr1, arr2 = x.split(' + ')\n        d[arr1.split(' ')[1]] = arr1.split(' ')[0]\n        d[arr2.split(' ')[2]] = arr2.split(' ')[1]\n    else:\n        d[x.split(' ')[1]] = x.split(' ')[0]\n        \n    for k,v in d.items():\n        data.loc[i,k] = v","31845551":"data['SSD'] = data['SSD'].apply(lambda x: float(x[:-2])*1000 if 'TB' in x else float(x[:-2]))\ndata['HDD'] = data['HDD'].apply(lambda x: float(x[:-2])*1000 if 'TB' in x else float(x[:-2]))\ndata['FlashStorage'] = data['FlashStorage'].apply(lambda x: float(x[:-2])*1000 if 'TB' in x else float(x[:-2]))\ndata['Hybrid'] = data['Hybrid'].apply(lambda x: float(x[:-2])*1000 if 'TB' in x else float(x[:-2]))","8ff8da03":"for i,x in enumerate(data['ScreenResolution']):\n    stype = x.split(' ')[0]\n    if stype not in ['IPS','Full','Touchscreen','Quad','4K']:\n        data.loc[i,'ScreenType'] = 'Other'\n    else:\n        data.loc[i,'ScreenType'] = stype\n    \n    rx,ry = x.split(' ')[-1].split('x')[0],x.split(' ')[-1].split('x')[1]\n    data.loc[i,'rx'] = rx\n    data.loc[i,'ry'] = ry","34f73b67":"data['Cpu_company'] = data['Cpu'].apply(lambda x: x.split(' ')[0])\ndata['Cpu_Ghz'] = data['Cpu'].apply(lambda x: np.float(x.split(' ')[-1][:-3]))\ndata['Cpu_type'] = data['Cpu'].apply(lambda x: x.split(' ')[1])","44630a69":"data['Gpu_company'] = data['Gpu'].apply(lambda x: x.split(' ')[0])\ndata['Gpu_type'] = data['Gpu'].apply(lambda x: x.split(' ')[1])","06260416":"data = data.drop(['laptop_ID', 'Product', 'ScreenResolution','Cpu', 'Memory', 'Gpu'], axis = 1)","e0d41b9c":"data['rx'] = data['rx'].astype(np.int32)\ndata['ry'] = data['ry'].astype(np.int32)\ndata['Ram'] = data['Ram'].apply(lambda x: x[:-2]).astype(np.int32)","d0f74266":"plt.figure(figsize=(14,12))\nsns.heatmap(data.corr(),center = 0,annot = True,vmin = -1.0,vmax = 1.0,cmap = 'RdBu_r',data = data)","9b292eed":"df = data.copy()","d8345124":"for col in df.select_dtypes('object').columns:\n    df[col] = df[col].map({x:i for i,x in enumerate(list(df[col].unique()))})","7da951e2":"X = df.drop('Price_euros', axis =1)\ny = df['Price_euros']\ny_log = np.log(df['Price_euros'])","224f706c":"plt.subplot(1,2,1)\nsns.histplot(x = y, data = y, kde = True).set(title = 'target without log')\nplt.subplot(1,2,2)\nsns.histplot(x = y_log, data = y_log , kde = True).set(title = 'target with log')","5f23270a":"from sklearn.preprocessing import MinMaxScaler,StandardScaler\nsc = StandardScaler()\nX_scaled = pd.DataFrame(sc.fit_transform(X), columns = X.columns)","5732b287":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size = 0.2, random_state = 42)","e78849b9":"!pip install -q pycaret\nfrom pycaret.regression import setup, compare_models\nfrom pycaret.regression import create_model, tune_model, predict_model","6544bde2":"_ = setup(pd.concat([X_train,np.log(y_train)], axis =1), target = 'Price_euros', silent = True)","582805ed":"compare_models()","89ef321f":"catboost = create_model('catboost')","d695d75e":"y_pred = predict_model(catboost, data = X_test)['Label']\ny_pred = np.exp(y_pred)\n\nfrom sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error\nprint(\"R2 score : {0:.4f}\".format(r2_score(y_test,y_pred)))\nprint(\"RMSE score : {0:.4f}\".format(np.sqrt(mean_squared_error(y_test,y_pred))))\nprint(\"MAE score : {0:.4f}\".format(mean_absolute_error(y_test,y_pred)))\nr2 = r2_score(y_test,y_pred)\nadj_r2 = 1- (((1-r2)*(X_test.shape[0] -1))\/(X_test.shape[0]-X_test.shape[1]-1))\nprint(\"Adj R2 score : {0:.4f}\".format(adj_r2))","e15f4070":"#### Extracting Gpu company,type from the Gpu column","ff08149f":"#### Creating a feature column 'Memory_Type' that describes type of memory used in laptops.  ","54e3ee55":"#### Conclusions from heatmap\n1. Ram, SSD, resolutions and CPU frequency are correlated with price.\n2. SDD has greater role for impacting price of Laptops.\n3. Inches and weight are related showing correlation of 0.83.\n4. Both width and height are highly correlated (maybe because of standard screen sizes in the market).","defc5fd0":"#### Spliting the dataset into train and test data","118d5910":"#### Making 'weight' a float column from object [removing 'kg' from the values]","d8b0fff3":"#### Converting to numerical type from object.","908749c4":"# Performing EDA ","adbd3fcc":"#### Converting TBs to GBs to get same scale","cee76363":"# Preprocessing ","47d40c4f":"#### Dropping columns are unneccessary or processed.","58ef8777":"#### We can see there are some outliers in the dataset. ","0da3d3e9":"#### Encoding Categorical columns","27dc4679":"#### Removing space between Flash Storage to ease the further handling and encoding. ","fa7a4f84":"#### Target encoding (Performing Log transform)","23783381":"# Importing the Data","43366dc1":"#### We can see that ensemble (specially boosting) is performing better than other algorithms.","4ab4524e":"#### Creating columns for each memory type that contains the size (In GBs) for a particular laptop.","1cc01d60":"#### Extracting Screen type and resolutions from the columns","fdbfc59b":"# Encoding and Scaling","3d115e65":"#### Extracting Cpu company, frequency and generation from the Cpu feature","1e8bc2fc":"#### Adjusted R2 Score and R2 Score are near. Therefore, we can trust R2 score for the catboost model.","e79766e2":"# Model Training and Results","f6d58d7e":"#### Analysing price w.r.t storage types "}}