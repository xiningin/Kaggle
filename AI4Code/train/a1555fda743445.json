{"cell_type":{"0514b6bd":"code","2eefe4ea":"code","3334e24c":"code","5ac2cc17":"code","ec6811bb":"code","f9617440":"code","b3b9dbc6":"code","21d22a77":"code","4be5e203":"code","35074304":"code","08f2d38f":"code","61b00118":"code","7829629a":"code","54f1608a":"code","87b00f5f":"code","012a9a54":"code","b28fbd0a":"code","4cd0049b":"code","70abd5d0":"code","0c0ae945":"code","4bd06843":"code","5b94d0dc":"code","a0afadff":"code","66469ce4":"code","8b5e6990":"code","56e187ce":"code","33597943":"code","5ed4e6fb":"code","1a5c69d4":"code","8061f36a":"code","83799039":"code","7d6c8293":"code","b6e30890":"code","1fd8126a":"code","1838329c":"code","abd9814d":"code","928b37a0":"code","a222b02b":"code","354b6d1e":"code","0d16fb68":"code","894e3a55":"code","d3b38c54":"code","4874f5b9":"code","d87ef032":"code","d555ffd5":"code","40ae3edc":"code","12a66a7e":"code","c3c0708b":"code","0b36c67f":"code","78b7a124":"code","b7053407":"code","8b4e96e4":"code","84892d99":"code","64b9bea1":"code","c15c77a2":"code","580d6f58":"code","46ee09e8":"code","edceeaff":"markdown","8b3e6628":"markdown","eaab909d":"markdown","d47c2997":"markdown","b9e9864d":"markdown","7e3cf515":"markdown","5de72c22":"markdown","8322887a":"markdown","8fa02616":"markdown","c0141b2d":"markdown","4415e0a0":"markdown","c5cb2009":"markdown","b030b373":"markdown","87ef11ce":"markdown","1b60be5e":"markdown","88742af6":"markdown","febfa236":"markdown","4a8812e2":"markdown","87813a21":"markdown","feab4558":"markdown","3e89a49c":"markdown","7ba98cbc":"markdown","8542e918":"markdown","bde7b0fb":"markdown","a27bd424":"markdown","458358b1":"markdown","b8b5eb39":"markdown","a2c73069":"markdown","8ff44f40":"markdown"},"source":{"0514b6bd":"# Download the data\nimport os\nimport tarfile\nimport urllib.request\n\nDOWNLOAD_ROOT = \"https:\/\/raw.githubusercontent.com\/ageron\/handson-ml2\/master\/\"\nHOUSING_PATH = os.path.join(\"datasets\", \"housing\")\nHOUSING_URL = DOWNLOAD_ROOT + \"datasets\/housing\/housing.tgz\"\n\ndef fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH):\n    if not os.path.isdir(housing_path):\n        os.makedirs(housing_path)\n    tgz_path = os.path.join(housing_path, \"housing.tgz\")\n    urllib.request.urlretrieve(housing_url, tgz_path)\n    housing_tgz = tarfile.open(tgz_path)\n    housing_tgz.extractall(path=housing_path)\n    housing_tgz.close()","2eefe4ea":"fetch_housing_data()","3334e24c":"import pandas as pd\n\ndef load_housing_data(housing_path=HOUSING_PATH):\n    csv_path = os.path.join(housing_path, \"housing.csv\")\n    return pd.read_csv(csv_path)","5ac2cc17":"# take a quick look at the data and it's stats.\nhousing= load_housing_data()\nhousing.head()","ec6811bb":"# to get quick description of data.\nhousing.info()","f9617440":"# number of categories that exists in ocean_proximity\nhousing['ocean_proximity'].value_counts()","b3b9dbc6":"# summary of numerical attributes.\nhousing.describe()","21d22a77":"%matplotlib inline\nimport matplotlib.pyplot as plt\nhousing.hist(bins=50, figsize=(20,15))\nplt.show()","4be5e203":"# Creation of training and test set.\nfrom sklearn.model_selection import train_test_split\ntrain_set, test_set = train_test_split(housing, test_size=0.2, random_state=42)","35074304":"test_set.head()","08f2d38f":"housing['median_income'].hist()\nplt.show()","61b00118":"import numpy as np\nhousing[\"income_cat\"] = pd.cut(housing[\"median_income\"],\n                               bins=[0., 1.5, 3.0, 4.5, 6., np.inf],\n                               labels=[1, 2, 3, 4, 5])","7829629a":"housing[\"income_cat\"].value_counts()","54f1608a":"housing['income_cat'].hist()\nplt.show()","87b00f5f":"from sklearn.model_selection import StratifiedShuffleSplit\nsplit= StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n\nfor train_index, test_index in split.split(housing, housing[\"income_cat\"]):\n    strat_train_set = housing.loc[train_index]\n    strat_test_set = housing.loc[test_index]","012a9a54":"# lets see if it worked or not\nstrat_test_set['income_cat'].value_counts()\/ len(strat_test_set)","b28fbd0a":"# Now you should remove the income_cat attribute so the data is back to its original state.\nfor set_ in (strat_train_set, strat_test_set):\n    set_.drop(\"income_cat\", axis=1, inplace=True)","4cd0049b":"# let's create copy of the dataset to play with it\nhousing= strat_train_set.copy()","70abd5d0":"housing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\")\nplt.show()","0c0ae945":"# it's hard to see any pattern here let's reduce alpha\nhousing.plot(kind='scatter', x='longitude', y='latitude', alpha=0.1)\nplt.show()","4bd06843":"# let's make it clearer\nhousing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", alpha=0.4,\n             s=housing[\"population\"]\/100, label=\"population\", figsize=(10,7),\n             c=\"median_house_value\", cmap=plt.get_cmap(\"jet\"), colorbar=True,\n             sharex=False)\nplt.legend()\nplt.show()\n# The radius of each circle represents the district\u2019s population (option s), and the color represents the price (option c).\n# We will use a predefined color map (option cmap) called jet, which ranges from blue(low values) to red (high prices).","5b94d0dc":"# let's look for correlations\ncorr_matrix= housing.corr()","a0afadff":"#lets see the correlation with median_house_value\ncorr_matrix['median_house_value'].sort_values(ascending=False)","66469ce4":"housing.plot(kind=\"scatter\", x=\"median_income\", y=\"median_house_value\",\n             alpha=0.1)\nplt.show()","8b5e6990":"# EXPERIMENTING WITH ATTRIBUTE COMBINATIONS\n# the total number of rooms in a district is not very useful if you don\u2019t know how many households there are.\n# What you really want is the number of rooms per household.\nhousing[\"rooms_per_household\"] = housing[\"total_rooms\"]\/housing[\"households\"]\nhousing[\"bedrooms_per_room\"] = housing[\"total_bedrooms\"]\/housing[\"total_rooms\"]\nhousing[\"population_per_household\"]=housing[\"population\"]\/housing[\"households\"]","56e187ce":"#now lets look at the correlation matrix\ncorr_matrix= housing.corr()\ncorr_matrix['median_house_value'].sort_values(ascending=False)","33597943":"housing.plot(kind=\"scatter\", x=\"rooms_per_household\", y=\"median_house_value\",\n             alpha=0.2)\nplt.axis([0, 5, 0, 520000])\nplt.show()","5ed4e6fb":"housing.describe()","1a5c69d4":"housing = strat_train_set.drop(\"median_house_value\", axis=1) # drop labels for training set\nhousing_labels = strat_train_set[\"median_house_value\"].copy()","8061f36a":"# DATA Cleaning\n# we will fill the the numerical missing values with their medians.\n# Scikit-Learn provides a handy class to take care of missing values: SimpleImputer\nfrom sklearn.impute import SimpleImputer\nimputer= SimpleImputer(strategy='median')","83799039":"# DATA Cleaning\n# we will fill the the numerical missing values with their medians.\n# Scikit-Learn provides a handy class to take care of missing values: SimpleImputer\nfrom sklearn.impute import SimpleImputer\nimputer= SimpleImputer(strategy='median')","7d6c8293":"#since median can only be computed on numerical attributes.\nhousing_num= housing.drop('ocean_proximity', axis=1)","b6e30890":"imputer.fit(housing_num)","1fd8126a":"imputer.statistics_","1838329c":"#checking if it is same as the median\nhousing_num.median().values","abd9814d":"X= imputer.transform(housing_num)","928b37a0":"# HANDLING CATEGORICAL ATTRIBUTES\nhousing_cat = housing[[\"ocean_proximity\"]]\nhousing_cat.head(10)","a222b02b":"# By default, the OneHotEncoder class returns a sparse array, but we can convert it to a dense array if needed by calling the toarray() method \n# or by setting 'sparse' attribute to False\nfrom sklearn.preprocessing import OneHotEncoder\n\ncat_encoder = OneHotEncoder(sparse=False)\nhousing_cat_1hot = cat_encoder.fit_transform(housing_cat)\nhousing_cat_1hot","354b6d1e":"#CUSTOM TRANSFORMATIONS\nfrom sklearn.base import BaseEstimator, TransformerMixin\n\n# column index\nrooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\n\nclass CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n    def __init__(self, add_bedrooms_per_room=True): # no *args or **kargs\n        self.add_bedrooms_per_room = add_bedrooms_per_room\n    def fit(self, X, y=None):\n        return self  # nothing else to do\n    def transform(self, X):\n        rooms_per_household = X[:, rooms_ix] \/ X[:, households_ix]\n        population_per_household = X[:, population_ix] \/ X[:, households_ix]\n        if self.add_bedrooms_per_room:\n            bedrooms_per_room = X[:, bedrooms_ix] \/ X[:, rooms_ix]\n            return np.c_[X, rooms_per_household, population_per_household,\n                         bedrooms_per_room]\n        else:\n            return np.c_[X, rooms_per_household, population_per_household]\n\nattr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)\nhousing_extra_attribs = attr_adder.transform(housing.values)","0d16fb68":"# TRANSFORMATION PIPELINES\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nnum_pipeline = Pipeline([\n        ('imputer', SimpleImputer(strategy=\"median\")),\n        ('attribs_adder', CombinedAttributesAdder()),\n        ('std_scaler', StandardScaler()),\n    ])\n\nhousing_num_tr = num_pipeline.fit_transform(housing_num)\n# The pipeline exposes the same methods as the final estimator. In this example, the last estimator is a StandardScaler,\n# which is a transformer, so the pipeline has a transform() method that applies all the transforms to the data in sequence \n#(and of course also a fit_transform() method, which is the one we used).","894e3a55":"# we have handled the categorical columns and the numerical columns separately. It would be more convenient to have a single transformer able to \n# handle all columns, applying the appropriate transformations to each column.\nfrom sklearn.compose import ColumnTransformer\nnum_attribs = list(housing_num)\ncat_attribs = [\"ocean_proximity\"]\n\nfull_pipeline = ColumnTransformer([\n        (\"num\", num_pipeline, num_attribs),\n        (\"cat\", OneHotEncoder(), cat_attribs),\n    ])\n\nhousing_prepared = full_pipeline.fit_transform(housing)","d3b38c54":"housing_prepared","4874f5b9":"# Let's train a linear regression model\nfrom sklearn.linear_model import LinearRegression\nlin_reg= LinearRegression()\nlin_reg.fit(housing_prepared, housing_labels)","d87ef032":"#let's measure RSME(root mean squared error) of our model\n\nfrom sklearn.metrics import mean_squared_error\n\nhousing_predictions = lin_reg.predict(housing_prepared)\nlin_mse = mean_squared_error(housing_labels, housing_predictions)\nlin_rmse = np.sqrt(lin_mse)\nlin_rmse","d555ffd5":"from sklearn.tree import DecisionTreeRegressor\ntree_reg= DecisionTreeRegressor()\ntree_reg.fit(housing_prepared, housing_labels)","40ae3edc":"#Let's evatuale on training set\nhousing_predictions = tree_reg.predict(housing_prepared)\ntree_mse = mean_squared_error(housing_labels, housing_predictions)\ntree_rmse = np.sqrt(tree_mse)\ntree_rmse","12a66a7e":"# cross validation use the train_test_split function to split the training set into a\n# smaller training set and a validation set, then train your models against the smaller training \n#set and evaluate them against the validation set.\nfrom sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(tree_reg, housing_prepared, housing_labels,\n                         scoring=\"neg_mean_squared_error\", cv=10)\ntree_rmse_scores = np.sqrt(-scores)\n\n# (Scikit-Learn\u2019s cross-validation features expect a utility function (greater is better) rather than a \n# cost function (lower is better), so the scoring function is actually the opposite of the MSE (i.e., a negative value),\n# which is why the preceding code computes -scores before calculating the square root)","c3c0708b":"# let's see the scores\ndef display_scores(scores):\n    print(\"Scores:\", scores)\n    print(\"Mean:\", scores.mean())\n    print(\"Standard deviation:\", scores.std())\n\ndisplay_scores(tree_rmse_scores)","0b36c67f":"# let's look for scores for linear regression:\nlin_scores = cross_val_score(lin_reg, housing_prepared, housing_labels,\n                             scoring=\"neg_mean_squared_error\", cv=10)\nlin_rmse_scores = np.sqrt(-lin_scores)\ndisplay_scores(lin_rmse_scores)\n# the Decision Tree model is overfitting so badly that it performs worse than the Linear Regression model.","78b7a124":"# let's try Random Forest Regressor\n# (Random Forests work by training many Decision Trees on random subsets of the features,\n# then averaging out their predictions)\nfrom sklearn.ensemble import RandomForestRegressor\n\nforest_reg = RandomForestRegressor(n_estimators=100, random_state=42)\nforest_reg.fit(housing_prepared, housing_labels)","b7053407":"housing_predictions = forest_reg.predict(housing_prepared)\nforest_mse = mean_squared_error(housing_labels, housing_predictions)\nforest_rmse = np.sqrt(forest_mse)\nforest_rmse","8b4e96e4":"from sklearn.model_selection import cross_val_score\n\nforest_scores = cross_val_score(forest_reg, housing_prepared, housing_labels,\n                                scoring=\"neg_mean_squared_error\", cv=10)\nforest_rmse_scores = np.sqrt(-forest_scores)\ndisplay_scores(forest_rmse_scores)","84892d99":"from sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    # try 12 (3\u00d74) combinations of hyperparameters\n    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n    # then try 6 (2\u00d73) combinations with bootstrap set as False\n    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n  ]\n\nforest_reg = RandomForestRegressor(random_state=42)\n# train across 5 folds, that's a total of (12+6)*5=90 rounds of training \ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5,\n                           scoring='neg_mean_squared_error',\n                           return_train_score=True)\ngrid_search.fit(housing_prepared, housing_labels)","64b9bea1":"# best parameters\ngrid_search.best_params_","c15c77a2":"# Let's look at the score of each hyperparameter combination tested during the grid search:\ncvres = grid_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","580d6f58":"# RANDOMIZED SEARCH\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\n\nparam_distribs = {\n        'n_estimators': randint(low=1, high=200),\n        'max_features': randint(low=1, high=8),\n    }\n\nforest_reg = RandomForestRegressor(random_state=42)\nrnd_search = RandomizedSearchCV(forest_reg, param_distributions=param_distribs,\n                                n_iter=10, cv=5, scoring='neg_mean_squared_error', random_state=42)\nrnd_search.fit(housing_prepared, housing_labels)","46ee09e8":"# Let's look at the score of each hyperparameter combination tested\ncvres = rnd_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)","edceeaff":"assume that you now have a shortlist of promising models. You now need to\nfine-tune them. Let\u2019s look at a few ways you can do that.","8b3e6628":"> Now, you have seen correlations between different features. But, sometimes what happens is that a attribute may not have corrletion with the target but a combination of two or more attributes could have a impact on the target so now look for such combinations:","eaab909d":"# Select and Train a Model\n","d47c2997":"WWWhhhaaattt! no error!!!!! Impossible\nThis is a classic case of model overfitting!\nNow we will use 'k-fold cross validation' for better evaluation.","b9e9864d":"let's take a quick look at the data distribution.","7e3cf515":"1. total_bedrooms attribute have missing values.\n2. ocen_proximity if a categorical attribute.","5de72c22":"Let\u2019s look at the median income histogram more closely most median income values are clustered around 1.5 to 6 (i.e.15,000\u201360,000), but some median incomes go far beyond 6. It is important to have a sufficient number of instances in your dataset for each stratum, or else the estimate of the stratum\u2019s importance may be biased. This means that you should not have too many strata, and each stratum should be large enough. The following code uses the pd.cut() function to create an income category attribute with 5 categories (labeled from 1 to 5): category 1 ranges from 0 to 1.5 (i.e., less than 15,000), category 2 from\n1.5 to 3, and so on.","8322887a":"# Discover and visualize the data to gain insights","8fa02616":"# Prepare the data for Machine Learning Algorithm","c0141b2d":"* In this notebook, i will try to walk you through a real machine learning project.","4415e0a0":"# THANK YOU!","c5cb2009":"In this notebook we are using California's housing data to predict housing prices.\nAs you can see it's a regression task.\n\n# Get the Data","b030b373":"credits: hands-on machine learning(book)","87ef11ce":"The new bedrooms_per_room attribute is much more correlated with\nthe median house value than the total number of rooms or bedrooms. Apparently\nhouses with a lower bedroom\/room ratio tend to be more expensive. The number of\nrooms per household is also more informative than the total number of rooms in a\ndistrict\u2014obviously the larger the houses, the more expensive they are.","1b60be5e":"# Fine-Tune your model\n","88742af6":"**If you have any questions, please comment down below.**\n\n**Kindly upvote it if you find this informative!**","febfa236":"* When you have no idea what value a hyperparameter should have, a simple approach is to try out consecutive powers of 10 (or a smaller number if you want a more fine-grained search, as shown in this example with the n_estimators hyperparameter).\n* This param_grid tells Scikit-Learn to first evaluate all 3 \u00d7 4 = 12 combinations of n_estimators and max_features hyperparameter values specified in the first dict, then try all 2 \u00d7 3 = 6 combinations of hyperparameter values in the second dict, but this time with the bootstrap hyperparameter set to False instead of True.\n* All in all, the grid search will explore 12 + 6 = 18 combinations of RandomForestRegressor hyperparameter values, and it will train each model five times (since we are using five-fold cross validation). In other words, all in all, there will be 18 \u00d7 5 = 90 rounds of training! It may take quite a long time, but when it is done you can get the best combination of parameters.","4a8812e2":"You have imported the data, explored it, sampled a training and a test set, and you wrote transformation pipelines to clean-up and prepare your data for machine learning algorithms.","87813a21":"Not at all a good score, the predictions are off by $68,628. we can do better than this!\n\n\nThis is a classiic case of model underfitting: it means the features do not provide enough information for good prediction.\n\nTo overcome this we will use a complex model!","feab4558":"This image tells you that the housing prices are very much related to the location (e.g., close to the ocean) and to the population density.\n","3e89a49c":"> we notice a few things in this:\n* First, the median income attribute does not look like it is expressed in US dollars(USD). The data is scaled.The numbers represent roughly tens of thousands of dollars (e.g., 3 actually means about 30,000)\n* The housing median age and the median house value were also capped.Your Machine Learning algorithms may learn that prices never go beyond that limit.\n* Finally, many histograms are tail heavy: they extend much farther to the right of the median than to the left. This may make it a bit harder for some Machine Learning algorithms to detect patterns. We will try transforming these attributes later on to have more bell-shaped distributions.","7ba98cbc":"you should compute the median value on the training set, and\nuse it to fill the missing values in the training set, but also don\u2019t forget to save the\nmedian value that you have computed. You will need it later to replace missing values\nin the test set when you want to evaluate your system, and also once the system goes\nlive to replace missing values in new data.","8542e918":"# https:\/\/www.kaggle.com\/dhirajnirne\/stratified-sampling\n* visit here to know the importance and use of stratified sampling.","bde7b0fb":"Steps in ML project.\n1. Get the data.\n2. Discover and visualize the data to gain insights.\n3. Prepare the data for Machine Learning algorithms.\n4. Select a model and train it.\n5. Fine-tune your model.\n6. Present your solution.","a27bd424":"It seems to perform worse than the Linear Regression model!\nThe Decision Tree has ascore of approximately 71,407, generally \u00b12,439. You would not have this information\nif you just used one validation set. But cross-validation comes at the cost of training\nthe model several times, so it is not always possible.","458358b1":"The correlation coefficient ranges from \u20131 to 1. When it is close to 1, it means that\nthere is a strong positive correlation; for example, the median house value tends to go\nup when the median income goes up. When the coefficient is close to \u20131, it means\nthat there is a strong negative correlation; you can see a small negative correlation\nbetween the latitude and the median house value (i.e., prices have a slight tendency to\ngo down when you go north).","b8b5eb39":"# Welcome!","a2c73069":"> whatever you study, you will never learn until you see how it works practically. It's very important to work on real-life example on whatever you are studying.","8ff44f40":"Although Scikit-Learn provides many useful transformers, you will need to write\nyour own.\n\nLet's create a custom transformer to add extra attributes:"}}