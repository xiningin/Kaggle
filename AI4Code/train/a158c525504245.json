{"cell_type":{"fd06d203":"code","9e4896d9":"code","ed313237":"code","ea98373b":"code","3c9b41de":"code","b946411f":"code","1ae26a3c":"code","ae10297b":"code","021240a5":"code","1f814816":"code","ec984cee":"code","72d31456":"code","1f1ef9bf":"code","8436f517":"code","230d580f":"code","7b0fd98c":"code","831dec65":"code","e7aa3084":"markdown","d9b819b0":"markdown","600b829e":"markdown","eb614715":"markdown","2750a6d0":"markdown","52c2cb5f":"markdown","7de597d0":"markdown","bb668b82":"markdown","4c64b745":"markdown","55e72fc7":"markdown","78ada727":"markdown","69e88c66":"markdown","7e4e3564":"markdown","11f207fb":"markdown"},"source":{"fd06d203":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns  # data visualization library  \nimport matplotlib.pyplot as plt\nimport time","9e4896d9":"data = pd.read_csv(\"..\/input\/breast-cancer-wisconsin-data\/data.csv\")","ed313237":"data.head()","ea98373b":"col = data.columns      \nprint(col)","3c9b41de":"y = data.diagnosis                          \nlist = ['Unnamed: 32','id','diagnosis']\nx = data.drop(list,axis = 1 )\nx.head()","b946411f":"ax = sns.countplot(y,label=\"Count\")\nB, M = y.value_counts()\nprint('Number of Benign: ',B)\nprint('Number of Malignant : ',M)","1ae26a3c":"x.describe()","ae10297b":"# first ten features\ndata_dia = y\ndata = x\ndata_n_2 = (data - data.mean()) \/ (data.std())              # standardization\ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","021240a5":"# Second ten features\ndata = pd.concat([y,data_n_2.iloc[:,10:20]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","1f814816":"# Third ten features\ndata = pd.concat([y,data_n_2.iloc[:,20:31]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.violinplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data,split=True, inner=\"quart\")\nplt.xticks(rotation=45);","ec984cee":"# As an alternative of violin plot, box plot can be used\n# box plots are also useful in terms of seeing outliers\n# I do not visualize all features with box plot\n# In order to show you lets have an example of box plot\n# If you want, you can visualize other features as well.\nplt.figure(figsize=(10,10))\nsns.boxplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","72d31456":"sns.jointplot(x.loc[:,'concavity_worst'],\n              x.loc[:,'concave points_worst'],\n              kind=\"regg\",\n              color=\"green\");","1f1ef9bf":"sns.set(style=\"white\")\ndf = x.loc[:,['radius_worst','perimeter_worst','area_worst']]\ng = sns.PairGrid(df, diag_sharey=False)\ng.map_lower(sns.kdeplot, cmap=\"Blues_d\")\ng.map_upper(plt.scatter)\ng.map_diag(sns.kdeplot, lw=3);","8436f517":"sns.set(style=\"whitegrid\", palette=\"muted\")\ndata_dia = y\ndata = x\ndata_n_2 = (data - data.mean()) \/ (data.std())              # standardization\ndata = pd.concat([y,data_n_2.iloc[:,0:10]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","230d580f":"data = pd.concat([y,data_n_2.iloc[:,10:20]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","7b0fd98c":"data = pd.concat([y,data_n_2.iloc[:,20:31]],axis=1)\ndata = pd.melt(data,id_vars=\"diagnosis\",\n                    var_name=\"features\",\n                    value_name='value')\nplt.figure(figsize=(10,10))\nsns.swarmplot(x=\"features\", y=\"value\", hue=\"diagnosis\", data=data)\nplt.xticks(rotation=45);","831dec65":"f,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(x.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax);","e7aa3084":"**Task 6: Using Joint Plots for Feature Comparison**","d9b819b0":"**Task 4: Visualizing Standardized Data with Seaborn**","600b829e":"**Task 1: Loading Libraries and Data**","eb614715":"**Task 8: Observing the Distribution of Values and their Variance with Swarm Plots**","2750a6d0":"***About the Dataset:***\n\nThe Breast Cancer Diagnostic data is available on the UCI Machine Learning Repository.(https:\/\/archive.ics.uci.edu\/ml\/datasets\/Breast+Cancer+Wisconsin+%28Diagnostic%29)\n\n**Attribute Information:** \n\n\nID number\n\nDiagnosis (M = malignant, B = benign) 3-32)\n\n\n**Ten real-valued features are computed for each cell nucleus:**\n\n\n1) radius (mean of distances from center to points on the perimeter)\n\n2) texture (standard deviation of gray-scale values)\n\n3) perimeter\n\n4) area\n\n5) smoothness (local variation in radius lengths)\n\n6) compactness (perimeter^2 \/ area - 1.0)\n\n7) concavity (severity of concave portions of the contour)\n\n8) concave points (number of concave portions of the contour)\n\n9) symmetry\n\n10) fractal dimension (\"coastline approximation\" - 1)\n\n\n\nThe mean, standard error and \"worst\" or largest (mean of the three largest values) of these features were computed for each image, resulting in 30 features. For instance, field 3 is Mean Radius, field 13 is Radius SE, field 23 is Worst Radius.\n\nAll feature values are recoded with four significant digits.\n\nMissing attribute values: none\n\nClass distribution: 357 benign, 212 malignant","52c2cb5f":"# Tumor Diagnosis","7de597d0":"**Task 2: Separate Target from Features**","bb668b82":"**Task 9 : Observing all Pair-wise Correlations**","4c64b745":"# Data Visualization","55e72fc7":"**Task 5: Violin Plots and Box Plots**","78ada727":"# Exploratory Data Analysis","69e88c66":"**Task 3: Plot Diagnosis Distributions**","7e4e3564":"**Task 7:Uncovering Correlated Features With Pair Grids**","11f207fb":"![image.png](attachment:image.png)"}}