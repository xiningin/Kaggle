{"cell_type":{"702c2d4d":"code","07b8aefc":"code","1a25dfaf":"code","ce6ccc38":"code","2e431599":"code","06af7bbd":"code","70973b8c":"code","2f06e3b2":"code","ff68259d":"code","c4ebf562":"code","af2f351e":"code","8da0c1e9":"code","bb468445":"code","3b5e01b5":"code","0c7f055b":"code","fa40d95c":"code","3e964733":"code","05d78d5f":"code","df7bd2a5":"code","74777209":"code","99f604a7":"code","677f06ef":"code","5e973837":"code","5588c59b":"code","17d72d9a":"code","82716fef":"code","50f0c082":"code","d19aa7be":"code","67f7eda4":"code","bf841a90":"code","cbf3c20d":"code","6cb9fc6a":"code","923c6811":"code","a8972860":"code","f74a29c8":"code","00c111b2":"code","02b9502e":"code","770b7603":"code","90578c4b":"code","205f0382":"code","4f3d6666":"code","ff875314":"code","a7396d57":"code","62a15d9d":"code","bb185020":"code","168728be":"markdown","bcb1d908":"markdown","2a65cc82":"markdown","75301013":"markdown","e40f42bd":"markdown","74394309":"markdown","d2ab117c":"markdown","267d9779":"markdown","b598ca52":"markdown","ce97816d":"markdown","422d843a":"markdown","c1fe27a1":"markdown","cc19b281":"markdown","c6273f56":"markdown","7df41fb4":"markdown","4e3927e3":"markdown","beae281c":"markdown","a397d644":"markdown","63c9b471":"markdown","1a37211a":"markdown","59bde534":"markdown","5110f5a0":"markdown","d93b9e34":"markdown","ad7a4995":"markdown","0b998181":"markdown","b1b7270f":"markdown","eef060e0":"markdown","4f0df05b":"markdown","dbc35368":"markdown","2d8fcd84":"markdown"},"source":{"702c2d4d":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.model_selection import train_test_split,KFold","07b8aefc":"train = pd.read_csv(r'..\/input\/boston\/boston.csv')\ntrain.head()","1a25dfaf":"train.shape","ce6ccc38":"train.info()","2e431599":"len(train) - len(train.drop_duplicates())","06af7bbd":"train[train.columns[:-1]].describe()","70973b8c":"def reduce_mean_usage(df):\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.innfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.innfo(np.int64).max:\n                    df[col] = cf[col].astype(np.int64)\n            else:\n                if c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n    \n    end_mem = df.memory_usage().sum()\/1024 ** 2 \n    \n    print('Memory usage afteroptimization is : {:.2f} MB'.format(end_mem))\n    \n    print('Decreadsed by {:.1f}'.format(100*(start_mem - end_mem)\/start_mem))\n    \n    return df","2f06e3b2":"# \u964d\u4f4e\u6570\u636e\u5b58\u50a8\u7c7b\u578b\ntrain = reduce_mean_usage(train)\ntrain.info()","ff68259d":"train.columns","c4ebf562":"fig,(ax1,ax2) = plt.subplots(1,2,figsize = (10,5))\nax1.hist(train['CRIM'])\nax2.hist(train[' ZN '])\nplt.show()","af2f351e":"train['CRIM'].skew(),train[' ZN '].skew()","8da0c1e9":"log_CRIM = np.log(train['CRIM'])\nlog_ZN = np.log(train[' ZN '])\n\nlog_CRIM.skew(),log_ZN.skew()","bb468445":"train[' ZN '] += 1e-5","3b5e01b5":"train[' ZN '].describe()","0c7f055b":"log_ZN = np.log(train[' ZN '])\n\nlog_CRIM.skew(),log_ZN.skew()","fa40d95c":"fig,(ax1,ax2) = plt.subplots(1,2,figsize = (10,5))\nax1.hist(log_CRIM)\nax2.hist(log_ZN)\nplt.show()","3e964733":"train[' CRIM'] = log_CRIM\ntrain[' ZN'] = log_ZN","05d78d5f":"train['CHAS'].value_counts()","df7bd2a5":"train.columns","74777209":"from sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression\n\n# \u505a\u4e00\u4e2a\u591a\u9879\u5f0f\u7684\u7ba1\u9053 \ndef PolynomialLogisticRegression(degree):\n    return Pipeline([\n        ('poly', PolynomialFeatures(degree=degree)),\n        ('std_scaler', StandardScaler())\n    ])","99f604a7":"train = np.array(train)\nX = train[:,:-1]\ny = train[:,-1].reshape(-1,1)\nX.shape,y.shape","677f06ef":"X_train,X_test,y_train,y_test = train_test_split(X,y,random_state = 666)","5e973837":"X_train2,X_test2 = X_train,X_test\ny_train2,y_test2 = y_train,y_test","5588c59b":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","17d72d9a":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()","82716fef":"kf = KFold(n_splits=5, shuffle=True, random_state= 666)\nval_acc = []\ntrain_acc = []\nscores = []\nX_train = pd.DataFrame(X_train)\ny_train = pd.DataFrame(y_train)\n\nfor fold, (train_index, test_index) in enumerate(kf.split(X_train)):\n    x_train_fold, x_test_fold = X_train.iloc[train_index], X_train.iloc[test_index]\n    y_train_fold, y_test_fold = y_train.iloc[train_index], y_train.iloc[test_index]\n    \n    lr.fit(x_train_fold, y_train_fold)\n    \n    \n    train_acc.append(lr.score(x_train_fold, y_train_fold))\n    val_acc.append(lr.score(x_test_fold, y_test_fold))\n    scores.append(lr.score(X_test,y_test))\n    print(f'Kfold:{fold}, acc:{train_acc[-1]} , val_acc:{val_acc[-1]}')","50f0c082":"pd.DataFrame([val_acc,train_acc],index = ['val_acc','acc']).T.plot(figsize=(8, 5))\nplt.grid(True)\nplt.gca().set_ylim(0, 1)\nplt.show()\n","d19aa7be":"np.mean(scores)","67f7eda4":"pipeline = PolynomialLogisticRegression(degree = 2)\nX_train = pipeline.fit_transform(X_train)\nX_test = pipeline.transform(X_test)","bf841a90":"X_train.shape","cbf3c20d":"lr.fit(X_train,y_train)\nlr.score(X_test,y_test)","6cb9fc6a":"kf = KFold(n_splits=5,random_state = 5)\nval_acc = []\ntrain_acc = []\nscores = []\nX_train = pd.DataFrame(X_train)\ny_train = pd.DataFrame(y_train)\n\nfor fold, (train_index, test_index) in enumerate(kf.split(X_train)):\n    x_train_fold, x_test_fold = X_train.iloc[train_index], X_train.iloc[test_index]\n    y_train_fold, y_test_fold = y_train.iloc[train_index], y_train.iloc[test_index]\n    \n    lr.fit(x_train_fold, y_train_fold)\n    \n    \n    train_acc.append(lr.score(x_train_fold, y_train_fold))\n    val_acc.append(lr.score(x_test_fold, y_test_fold))\n    scores.append(lr.score(X_test,y_test))\n    print(f'Kfold:{fold}, acc:{train_acc[-1]} , val_acc:{val_acc[-1]}')","923c6811":"pd.DataFrame([val_acc,train_acc],index = ['val_acc','acc']).T.plot(figsize=(8, 5))\nplt.grid(True)\nplt.gca().set_ylim(0, 1.01)\nplt.show()","a8972860":"np.mean(scores)","f74a29c8":"X_train.shape,X_test.shape","00c111b2":"from yellowbrick.target import FeatureCorrelation\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import f_classif\nfrom sklearn.metrics import confusion_matrix,classification_report,plot_confusion_matrix,accuracy_score,roc_auc_score,roc_curve,auc\nfrom sklearn.model_selection import train_test_split,StratifiedKFold,cross_val_score\n","02b9502e":"import warnings \nwarnings.filterwarnings('ignore')\nres = []\nfor i in range(12):\n    features = X_train[X_train.columns[i*10 : i*10+9].tolist()]\n    # f_classif \u662f\u53cd\u5dee\u5206\u6790 \n    select_univaiate = SelectKBest(f_classif,k = 5).fit(features,y_train)\n\n    # \u8fd4\u56de\u88ab\u9009\u62e9\u7684\u4e0b\u6807\n    features_mask = select_univaiate.get_support()\n\n    selected_columns = features.columns[features_mask]\n\n    res.append(selected_columns.tolist())\n    \n    print(selected_columns.tolist())\n    \n    ","770b7603":"res = np.array(res).reshape(-1,)\nX_features = X_train.columns[res]","90578c4b":"X_train = pd.DataFrame(X_train)\nX_test = pd.DataFrame(X_test)\nX_train = X_train[X_features]\nX_test = X_test[X_features]\nX_train.shape,X_test.shape","205f0382":"X_train.columns","4f3d6666":"X_test.columns","ff875314":"lr.fit(X_train,y_train)\nlr.score(X_test,y_test)","a7396d57":"kf = KFold(n_splits=10, shuffle=True,random_state = 666)\nval_acc = []\ntrain_acc = []\nscores = []\nX_train = pd.DataFrame(X_train)\ny_train = pd.DataFrame(y_train)\n\nfor fold, (train_index, test_index) in enumerate(kf.split(X_train)):\n    x_train_fold, x_test_fold = X_train.iloc[train_index], X_train.iloc[test_index]\n    y_train_fold, y_test_fold = y_train.iloc[train_index], y_train.iloc[test_index]\n    \n    lr.fit(x_train_fold, y_train_fold)\n    \n    \n    train_acc.append(lr.score(x_train_fold, y_train_fold))\n    val_acc.append(lr.score(x_test_fold, y_test_fold))\n    scores.append(lr.score(X_test,y_test))\n    print(f'Kfold:{fold}, acc:{train_acc[-1]} , val_acc:{val_acc[-1]}')","62a15d9d":"pd.DataFrame([val_acc,train_acc],index = ['val_acc','acc']).T.plot(figsize=(8, 5))\nplt.grid(True)\nplt.gca().set_ylim(0, 1.01)\nplt.show()","bb185020":"np.mean(scores)","168728be":"### \u89c2\u5bdfCRIM \u548c ZN \u6570\u636e\u5206\u5e03","bcb1d908":"### \u6a21\u578b\u6b63\u5e38 \u6ca1\u6709\u8fc7\u62df\u5408\u4e5f\u6ca1\u6709\u6b20\u62df\u5408 \n### \u4f18\u5316\u5b8c\u6bd5","2a65cc82":"### \u5341\u91cd\u4ea4\u53c9\u9a8c\u8bc1","75301013":"\u6ca1\u6709\u7ecf\u8fc7\u4ea4\u53c9\u9a8c\u8bc1\u5c31\u53ef\u4ee5\u5f97\u523093%\u7684\u51c6\u786e\u7387","e40f42bd":"## 2. \u591a\u9879\u5f0f\u5904\u7406\u540e\u7684\u591a\u5143\u7ebf\u6027\u56de\u5f52","74394309":"### \u5f52\u4e00\u5316","d2ab117c":"\u603b\u7ed3\uff1a \u73b0\u5728\u7684\u6a21\u578b\u6b20\u62df\u5408\uff0c\u4e2a\u4eba\u8ba4\u4e3a\u7ebf\u6027\u6a21\u578b\u4e0d\u9002\u5408\uff0c\u5c1d\u8bd5\u5bf9\u7279\u5f81\u505a\u591a\u9879\u5f0f\u5904\u7406\uff0c\u589e\u52a0\u7279\u5f81 \u5f97\u5230\u975e\u7ebf\u6027\u6a21\u578b\u3002","267d9779":"\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e24\u4e2a\u7279\u5f81\u504f\u5ea6\u5f88\u5927\uff0c\u6240\u4ee5\u6570\u636e\u96c6\u91cc\u9762\u5305\u542b\u504f\u5ea6\u5206\u5e03\u548c\u5cf0\u5ea6\u5206\u5e03\uff0c\u6211\u4eec\u9700\u8981\u5c3d\u529b\u51cf\u5c11\u4ed6\u7684\u504f\u5ea6\uff0c\u8f6c\u6362\u6210\u5cf0\u5ea6\u5206\u5e03 ","b598ca52":"# \u6a21\u578b\u4f18\u5316","ce97816d":"# \u7279\u5f81\u5de5\u7a0b","422d843a":"\u65e0\u91cd\u590d","c1fe27a1":"\u5206\u5e03\u6781\u5ea6\u4e0d\u5747\uff0c\u4f46\u662f\u8fd9\u4e0d\u662f\u505a\u4e3a\u5206\u7c7b\uff0c\u5982\u679c\u662f\u5206\u7c7b\u7ed3\u679c\u5c31\u9700\u8981\u5c06\u5206\u5e03\u53d8\u5f97\u5747\u5300","cc19b281":"### \u89c2\u5bdfCHAS\u7684\u5206\u5e03","c6273f56":"1. \u53ef\u4ee5\u89c2\u5bdf\u5230CRIM,ZN,CHAS\u7279\u5f81 \u65b9\u5dee\u5f88\u5927 \u6bd4\u5747\u503c\u8fd8\u5927 \u8bf4\u660e\u6570\u636e\u5206\u5e03\u5f88\u4e0d\u5747\u5300    \n2. CHAS \u662f\u4e00\u4e2a\u7c7b\u522b\u578b\u6570\u503c\u7279\u5f81\uff0c\n3. \u5404\u4e2a\u7279\u5f81\u8303\u56f4\u8de8\u5ea6\u5927 \u9700\u8981\u5f52\u4e00\u5316","7df41fb4":"### \u89e3\u51b3\u8fc7\u62df\u5408\u95ee\u9898\uff1a\n1. \u589e\u5927\u6570\u636e\u91cf \n2. \u52a0\u5165\u6b63\u5219\u9879\n3. \u51cf\u5c11\u7279\u5f81\u6570\u91cf","4e3927e3":"# EDA","beae281c":"\u65e0\u7f3a\u5931","a397d644":"### \u6c42\u504f\u5ea6","63c9b471":"\u770b\u6765\u6211\u4eec\u53ea\u80fd\u5728\u7279\u5f81\u6570\u91cf\u4e0a\u4e0b\u529f\u592b","1a37211a":"\u4ea4\u53c9\u9a8c\u8bc1\u5f97\u5230 \u51c6\u786e91% \u53ef\u4ee5\u53d1\u73b0\u6a21\u578b\u6709\u70b9\u8fc7\u62df\u5408\u4e86","59bde534":"# \u6570\u636e\u9884\u5904\u7406","5110f5a0":"\u4ece\u504f\u5ea6\u5206\u5e03\u8f6c\u6362\u6210\u4e86\u53cc\u5cf0\u5206\u5e03","d93b9e34":"# \u6a21\u578b\u5efa\u7acb","ad7a4995":"## 1. \u591a\u5143\u7ebf\u6027\u56de\u5f52","0b998181":"10\u91cd\u4ea4\u53c9\u9a8c\u8bc1","b1b7270f":"### \u7ed9train['ZN']\u52a0\u4e0a\u4e00\u4e2a\u6781\u5c0f\u7684\u6570","eef060e0":"### \u6839\u636e\u76f8\u5173\u7cfb\u6570\u51cf\u534a\u7279\u5f81","4f0df05b":"### \u505a\u5bf9\u6570\u8f6c\u6362","dbc35368":"\u53d1\u73b0train[' ZN ']\u4e0d\u80fd\u505a\u5bf9\u6570\u8fd0\u7b97\uff0c\u89c2\u5bdf\u4ed6\u7684\u6570\u636e\u5305\u542b0\uff0c\u56e0\u4e3a0\u4e0d\u80fd\u505a\u5bf9\u6570\u8f6c\u6362","2d8fcd84":"5\u6298\u4ea4\u53c9\u9a8c\u8bc1"}}