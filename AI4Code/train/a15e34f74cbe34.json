{"cell_type":{"5c14a59a":"code","423a240b":"code","6fee7150":"code","933bcf9b":"code","ed2a78c5":"code","825e561b":"code","af49b92d":"code","996f73ef":"code","58e90360":"code","49b73838":"code","d0848222":"code","e221d54f":"code","1fab19b6":"code","9dcb5adb":"code","c10c42be":"code","492e60f8":"code","2704f530":"code","d8422c2b":"markdown","8f050c42":"markdown","2ae07da6":"markdown","1ec5e9c7":"markdown","8da147a1":"markdown","85c21a1b":"markdown","77b0a519":"markdown","0885704a":"markdown","6fcd57a5":"markdown","06db5a72":"markdown","69a89a19":"markdown"},"source":{"5c14a59a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\nimport seaborn as sns\nimport os\nimport glob as gb\nimport cv2\nimport tensorflow as tf\nimport tensorflow.keras\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau\nimport warnings\n\nsns.set()\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")","423a240b":"train = '..\/input\/intel-image-classification\/seg_train\/seg_train'\ntest  = '..\/input\/intel-image-classification\/seg_test\/seg_test'\npred  = '..\/input\/intel-image-classification\/seg_pred\/seg_pred'","6fee7150":"size  = 128\nbatch = 128\nepochs = 100","933bcf9b":"datagen = ImageDataGenerator(rescale=1.\/255,\n                             zoom_range=0.2,\n                             width_shift_range=.2, height_shift_range=.2,\n                             rotation_range=30,\n                             brightness_range=[0.8, 1.2],\n                             horizontal_flip=True)","ed2a78c5":"X_train = datagen.flow_from_directory(directory=train, target_size=(size,size), batch_size=batch, shuffle=True,)","825e561b":"X_test = ImageDataGenerator(rescale=1\/255).flow_from_directory(directory=test, target_size=(size,size), batch_size=batch, shuffle=True,)","af49b92d":"X_test.class_indices.keys()","996f73ef":"files = gb.glob(pathname= str(pred + '\/*.jpg'))\nprint(f'For Prediction data, found {len(files)}')","58e90360":"train_data_size = {}\n\nfor folder in  os.listdir(train) : \n    files = gb.glob(pathname= str(train +'\/' + folder + '\/*.jpg'))\n    train_data_size[folder] = len(files)\n\nclasses = list(train_data_size.keys())\ntrain_no_imgs = [train_data_size[i] for i in classes]\n\nsns.barplot(classes, train_no_imgs)\nplt.title(\"Number of images in Categories of Train Data\")\nplt.show()","49b73838":"test_data_size = {}\n\nfor folder in  os.listdir(test) : \n    files = gb.glob(pathname= str(test +'\/' + folder + '\/*.jpg'))\n    test_data_size[folder] = len(files)\n\ntest_no_imgs = [test_data_size[i] for i in classes]\n\nsns.barplot(classes, test_no_imgs)\nplt.title(\"Number of images in Categories of Test Data\")\nplt.show()","d0848222":"checkpoint_filepath = 'best_model.hdf5'\nbest_model = 'BestModel.hdf5'\noptimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\n\ncallback_checkpoint = tf.keras.callbacks.ModelCheckpoint(filepath=checkpoint_filepath, save_weights_only=False, monitor='val_accuracy', mode='max', save_best_only=True)\ncallback_earlystopping = tf.keras.callbacks.EarlyStopping(monitor='val_accuracy', mode='max', min_delta=0.003, patience=30)\ncallback_learningrate = ReduceLROnPlateau(monitor='val_accuracy', mode='max', min_delta=0.003, patience=10, factor=0.5, min_lr=0.00001)\n\ncallbacks = [callback_checkpoint, callback_earlystopping, callback_learningrate]","e221d54f":"Model =tf.keras.models.Sequential([ tf.keras.layers.Conv2D(256,kernel_size=(3,3),activation='relu',input_shape=(size,size,3)),\n                                    tf.keras.layers.Conv2D(128,kernel_size=(3,3),activation='relu'),\n                                    tf.keras.layers.BatchNormalization(),\n                                    tf.keras.layers.MaxPool2D(4,4),\n\n                                    tf.keras.layers.Conv2D(64,kernel_size=(3,3),activation='relu'),    \n                                    tf.keras.layers.Conv2D(32,kernel_size=(3,3),activation='relu'),\n                                    tf.keras.layers.BatchNormalization(),\n                                    tf.keras.layers.MaxPool2D(3,3),\n\n                                    tf.keras.layers.Conv2D(16,kernel_size=(3,3),activation='relu', padding = 'Same'),\n                                    tf.keras.layers.Conv2D(8,kernel_size=(3,3),activation='relu', padding = 'Same'),\n                                    tf.keras.layers.BatchNormalization(),\n                                    tf.keras.layers.MaxPool2D(2,2),\n\n                                    tf.keras.layers.Flatten() ,\n                                    tf.keras.layers.Dense(256,activation='relu'),\n                                    tf.keras.layers.Dropout(rate=0.4), \n                                    tf.keras.layers.Dense(128,activation='relu'),\n                                    tf.keras.layers.Dropout(rate=0.3),\n                                    tf.keras.layers.Dense(64,activation='relu'),\n                                    tf.keras.layers.Dropout(rate=0.2),\n                                    tf.keras.layers.Dense(32,activation='relu') ,\n                                    tf.keras.layers.Dropout(rate=0.1),            \n                                    tf.keras.layers.Dense(16,activation='relu') ,\n                                    tf.keras.layers.Dropout(rate=0.05),\n                                    tf.keras.layers.Dense(8,activation='relu') ,\n                                    tf.keras.layers.Dropout(rate=0.02),\n                                    tf.keras.layers.Dense(6,activation='softmax')])\n\n\nModel.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])\n\nprint(Model.summary())","1fab19b6":"history = Model.fit(x=X_train, validation_data=X_test, epochs=epochs, verbose=2, callbacks=callbacks)","9dcb5adb":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs_range = range(98)\n\nplt.figure(figsize=(15, 15))\nplt.subplot(2, 2, 1)\nplt.plot(epochs_range, acc, label='Training Accuracy')\nplt.plot(epochs_range, val_acc, label='Validation Accuracy')\nplt.legend(loc='lower right')\nplt.title('Training and Validation Accuracy')\n\nplt.subplot(2, 2, 2)\nplt.plot(epochs_range, loss, label='Training Loss')\nplt.plot(epochs_range, val_loss, label='Validation Loss')\nplt.legend(loc='upper right')\nplt.title('Training and Validation Loss')\nplt.show()","c10c42be":"Best_Model = tf.keras.models.load_model('best_model.hdf5')\n#Best_Model.summary()","492e60f8":"print(\"Old Classes:\", classes)\nclasses = list(X_train.class_indices.keys())\nprint(\"New Classes:\", classes)","2704f530":"file = pred + \"\/14.jpg\"\nimage = tf.keras.preprocessing.image.load_img(path=file, target_size=(size, size))\ninput_arr = tf.keras.preprocessing.image.img_to_array(image)\ninput_arr = np.array([input_arr])\ny_pred = Model.predict(input_arr)\nlabel = classes[np.argmax(y_pred)]\n\nplt.imshow(image)\nplt.title(label)\nplt.show()","d8422c2b":"# 5- Setup Callbacks","8f050c42":"# 7- Train the Model","2ae07da6":"# 8- Load Best Model","1ec5e9c7":"Number of images in Prediction Data:","8da147a1":"# 3- Size\nI make the size of images, batch size and epoches as a variable to be easy to control it in all of the model.\n> Prefer to make the number of batch size 2 power n like (8,16,32,64,128,...), the weill increase the processing.","85c21a1b":"# 2- Data\nMake 3 variables for 3 bathes of datasets: train, test and predict.","77b0a519":"# 4- Data Augmentation\nMake data augmentation on train and test datasets and imprt them from pathes.","0885704a":"# 6- Design CNN and NN","6fcd57a5":"# 1- Hello Friends\n\nHello Future Engineers, Nice to meet you!\nFirst we import our libraries that will we need.","06db5a72":"> This line of code is very important because the order of classes of that the model has trained on it differes from the order oc classes that get from directory.","69a89a19":"# 9- GUI Version\nYou can use GUI version of the model and download the best model from [Github](https:\/\/github.com\/abdelrahmanzied\/Intel_image_Classification)."}}