{"cell_type":{"0e258f94":"code","b908de4a":"code","ae87dcbb":"code","0801090d":"code","7bb848d1":"code","68596d17":"code","0a66fdce":"code","9f1b04aa":"code","b9a2b60f":"code","0d0a0339":"code","5c3b66de":"code","b61b66a5":"code","e343188c":"code","b51747ac":"code","36ab89a1":"code","823afc29":"code","4c1159eb":"code","51460f07":"code","51c69025":"code","6c096c2d":"code","78a589eb":"code","de6ed999":"code","e274488d":"code","ff20c019":"code","36ec8d42":"code","6bf029ad":"code","b7569789":"code","979e9115":"code","7ff29b1e":"code","3f0c4258":"code","1f6e9407":"code","d59beb00":"markdown","f3dbd82f":"markdown","0ce0b5e1":"markdown","9a200271":"markdown","7db3562b":"markdown","96c0c01d":"markdown","c7c88db7":"markdown","039d14e3":"markdown"},"source":{"0e258f94":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b908de4a":"pip install fuzzy_c_means ","ae87dcbb":"import numpy as np \nimport pandas as pd\nimport matplotlib .pyplot as plt \n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nfrom fcmeans import FCM\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import OrdinalEncoder","0801090d":"data = pd.read_csv('..\/input\/unsupervised-learning-on-country-data\/Country-data.csv')\n\n","7bb848d1":"data.shape","68596d17":"data.head()","0a66fdce":"data.describe()","9f1b04aa":"data.info()","b9a2b60f":"columns = data.columns\ncolumns","0d0a0339":"#oe=OrdinalEncoder()\n##convert train_data\n#for col in data:\n #   data[col]=oe.fit_transform(np.asarray(data[col].astype('str')).reshape(-1,1))","5c3b66de":"\n#print(data.shape)\n#data.head()","b61b66a5":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\nle.fit(data['country'])\nle.transform(data['country'])\ndata['country'] = le.transform(data['country'])","e343188c":"print(data.shape)\ndata.head()","b51747ac":"plt.figure(figsize=(12,5))\nplt.title(\"Child Mortality: Death of children \")\nax = sns.histplot(data[\"child_mort\"])","36ab89a1":"plt.figure(figsize=(12,5))\nplt.title(\"Exports: Exports of goods and services per capita.\")\nax = sns.histplot(data[\"exports\"])","823afc29":"plt.figure(figsize=(12,5))\nplt.title(\"Imports: Imports of goods and services per capita. \")\nax = sns.histplot(data[\"imports\"])","4c1159eb":"plt.figure(figsize=(12,5))\nplt.title(\"Health: Total health spending per capita.\")\nax = sns.histplot(data[\"health\"])","51460f07":"plt.figure(figsize=(12,5))\nplt.title(\"Income: Net income per person\")\nax = sns.histplot(data[\"income\"])","51c69025":"plt.figure(figsize=(12,5))\nplt.title(\"Inflation: The measurement of the annual growth rate \")\nax = sns.histplot(data[\"inflation\"])","6c096c2d":"plt.figure(figsize=(12,5))\nplt.title(\"Life expectancy: The average number of years a new born child would live if the current mortality patterns are to remain the same\")\nax = sns.histplot(data[\"life_expec\"])","78a589eb":"plt.figure(figsize=(15,10))\nsns.heatmap(data.corr( ),annot=True)","de6ed999":"scalarModel = StandardScaler()\ndata = scalarModel.fit_transform(data)","e274488d":"data","ff20c019":"\ndata = pd.DataFrame(data , columns = columns )\ndata","36ec8d42":"data = data.values\ndata","6bf029ad":"fcmModel = FCM(n_clusters = 2)\nfcmModel.fit(data)\ncenter = fcmModel.centers\ncenter","b7569789":"#Calculating Prediction\npred = fcmModel.predict(data)\nprint('Predicted Value for fcmModel is : ' , pred)\npred.shape","979e9115":"data = pd.DataFrame(data , columns = columns )\ndata","7ff29b1e":"# add the cluster column to the dataframe \ndata['cluster'] = pred\ndata.head()","3f0c4258":"data = data.values\ndata","1f6e9407":"# Visualising the clusters\nplt.scatter(data[pred == 0, 0], data[pred == 0, 1], s = 10, c = 'r')\nplt.scatter(data[pred == 1, 0], data[pred == 1, 1], s = 10, c = 'b' )\n#plt.scatter(data[pred == 2, 0], data[pred == 2, 1], s = 10, c = 'g' )\nplt.scatter(center[:, 0], center[:, 1], s = 300, c = 'black',marker = '+')\nplt.title('Clusters of customers')\nplt.xlabel('X_label ')\nplt.ylabel('y_label ')\nplt.legend()\nplt.show()\n","d59beb00":"# ****Draw the data and Cluster ","f3dbd82f":"# ****Read Data","0ce0b5e1":"# ****import library ","9a200271":"# ****Correlation","7db3562b":"# ****Scaling Data","96c0c01d":"# ****Data Distribution","c7c88db7":"# ****Apply Fuzzy C Means Algorithm","039d14e3":"# ****Convert data from string and numbers"}}