{"cell_type":{"bb26754e":"code","156581fd":"code","abc32855":"code","0dfb5f9e":"code","f14cd6c3":"code","f50e787c":"code","9f7f2ebc":"code","d51e696a":"code","08dcaadd":"code","a4534218":"code","a2c5e5a6":"code","4a51c5da":"code","c5a629a7":"markdown","d6c30c8e":"markdown","ed3c58d7":"markdown","e7d7ec7c":"markdown"},"source":{"bb26754e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","156581fd":"import os \nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","abc32855":"import pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('\/kaggle\/input\/covid19-tweets\/covid19_tweets.csv')\ndf.head()","0dfb5f9e":"df.shape","f14cd6c3":"df.info()","f50e787c":"# Drop Columns\ndrop_columns = [\n    'user_name',\n    'user_description',\n    'user_created',\n    'user_followers',\n    'user_friends',\n    'user_favourites',\n    'user_verified',\n    'hashtags',\n    'source',\n    'is_retweet'\n]\n\ndf.drop(columns=drop_columns, inplace=True)\ndf.head()","9f7f2ebc":"import re\nimport nltk\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize import word_tokenize\nfrom nltk.stem import PorterStemmer\nfrom nltk.probability import FreqDist\n\nfrom textblob import TextBlob\nfrom textblob import Word\n\n\nstop_words = set(stopwords.words('english'))\n\ndef tweet_scrubber(tweet):\n   \n    # Make tweets all lower case\n    tweet = tweet.lower()\n#     # Remove Mentions\n    tweet = re.sub(r'@[A-Za-z0-9_]+','',tweet)\n#     # Remove URLs\n#     tweet = re.sub(r\"http\\S+\", \"\", tweet)\n#     # Remove Numbers\n#     tweet = re.sub(r\"[0-9]*\", \"\", tweet)\n#     # Remove Special Characters, and Punctuations\n#     tweet = re.sub(r\"(\u201d|\u201c|-|\\+|`|#|,|;|\\|)*\", \"\", tweet)\n#     tweet = re.sub(r\"&amp\", \"\", tweet)\n    \n    to_remove = r'\\d+|http?\\S+|[^A-Za-z0-9]+'\n    tweet = re.sub(to_remove, \" \", tweet)\n    return tweet\n        \n\ndef tokenization_and_stem(tweet, stem=False, lemmatize=False):\n        \n    filtered_tweet = []\n    words = word_tokenize(tweet) \n\n    # Remove stopwords and stem\n    for word in words:\n        if not word in stop_words:\n            if lemmatize:\n                filtered_tweet.append(Word(word).lemmatize())\n            else:\n                filtered_tweet.append(word)\n            \n    return filtered_tweet","d51e696a":"df.text = df.text.apply(lambda x: tokenization_and_stem(tweet_scrubber(x), lemmatize=True))","08dcaadd":"df.text.head()","a4534218":"# Function to perform sentitment analysis on trump and biden dataframes\ndef sentiment_analysis(df):\n    \n    # Determine polarity and subjectivity\n    df['Polarity'] = df['text'].apply(lambda x: TextBlob(' '.join(x)).sentiment.polarity)\n    df['Subjectivity'] = df['text'].apply(lambda x: TextBlob(' '.join(x)).sentiment.subjectivity)\n    \n    # Classify overall sentiment\n    df.loc[df.Polarity > 0,'Sentiment'] = 'positive'\n    df.loc[df.Polarity == 0,'Sentiment'] = 'neutral'\n    df.loc[df.Polarity < 0,'Sentiment'] = 'negative'\n    \n    return df[['text','Polarity','Subjectivity','Sentiment']].head()","a2c5e5a6":"sentiment_analysis(df)","4a51c5da":"df['Sentiment'].value_counts()","c5a629a7":"## Basic Tweet Processing\n* Make lower case\n* Remove Mentions\n* Remove URLs\n* Remove Stopwords (Common words without much meaning)\n* Remove punctuations ","d6c30c8e":"## Process Datasets","ed3c58d7":"## Sentiment Analysis","e7d7ec7c":"# Covid 19 Tweet Sentiment Analysis"}}