{"cell_type":{"fbfdbda6":"code","db21880a":"code","22443998":"code","e550628f":"code","569b93e0":"code","cb8a98f7":"code","ad674782":"code","32323ba9":"code","d3917f2b":"code","8ddac32f":"code","5468724c":"code","1413a216":"code","aaa69638":"code","c752c985":"code","a71bc320":"code","9ec451a9":"code","03991ba4":"code","a259e4c6":"code","0c28a679":"markdown","87a30f02":"markdown","336732ca":"markdown","3b1e7985":"markdown","066c23c3":"markdown","fc5dca5a":"markdown","cca188b5":"markdown","72dcfee4":"markdown","326421ee":"markdown","cc4fd97d":"markdown","f09a5a14":"markdown","ccda9f11":"markdown","69f674df":"markdown","6b0e7c65":"markdown"},"source":{"fbfdbda6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","db21880a":"import matplotlib.style as style\nstyle.use('fivethirtyeight')\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.dpi'] = 140 #set_size\nimport seaborn as sns\nimport missingno as msno\nimport numpy as np\nimport pandas as pd\nfrom plotly.offline import iplot, init_notebook_mode\nimport plotly.express as px\nimport plotly.graph_objs as go\nimport cufflinks\ncufflinks.go_offline(connected=True)\ninit_notebook_mode(connected=True)\nimport folium\nimport geopandas as gpd","22443998":"\niso_countries = pd.read_csv('\/kaggle\/input\/country-mapping-iso-continent-region\/continents2.csv')\niso_countries.head()\n","e550628f":"data = pd.read_csv('\/kaggle\/input\/who-covid19-data-tabe\/WHO COVID-19 global table data August 11th 2021 at 10.41.34 AM.csv')\ndata.head()","569b93e0":"msno.matrix(data)","cb8a98f7":"msno.bar(data)","ad674782":"data.pop('Deaths - newly reported in last 24 hours')","32323ba9":"len(data)\n","d3917f2b":"\ndata['Name'] = data['Name'].replace(np.nan, 'All')\ndata = data.replace(0 , np.NAN)\ndata = data.dropna(how='any', axis=0)\n\ndata","8ddac32f":"data =data.rename(columns =  {'Name': 'Continent'}, inplace = False) ","5468724c":"data=data.reset_index()\n","1413a216":"\ndata =data.rename(columns =  {'index': 'Country'}, inplace = False) \ndata","aaa69638":"data['Country']= data['Country'].replace('United States of America', 'United States')\ndata['Country']= data['Country'].replace('Russian Federation', 'Russian')\ndata['Country']= data['Country'].replace('The United Kingdom' , 'United Kingdom')\ndata['Country']= data['Country'].replace('Iran (Islamic Republic of)' , 'Iran')\ndata['Country']= data['Country'].replace('Czechia' , 'Czech Republic')\ndata['Country']= data['Country'].replace('occupied Palestinian territory, including east Jerusalem' , 'Palestine, State of')\ndata['Country']= data['Country'].replace('Republic of Moldova' , 'Moldova')\ndata['Country']= data['Country'].replace('Viet Nam' , 'Vietnam')\ndata['Country']= data['Country'].replace('Bolivia (Plurinational State of)' , 'Bolivia')\ndata['Country']= data['Country'].replace( 'Palestine','Palestine, State of')\ndata['Country']= data['Country'].replace('Venezuela (Bolivarian Republic of)' , 'Venezuela')\ndata['Country']= data['Country'].replace('Republic of Korea' , 'Korea, Republic of')\ndata['Country']= data['Country'].replace( 'Korea(Republic of','Korea, Republic of')\ndata['Country']= data['Country'].replace( 'Bosnia and Herzegovina','Bosnia And Herzegovina')\ndata['Country']= data['Country'].replace( ' Namibia ','Namibia')\ndata['Country']= data['Country'].replace( 'Syrian Arab Republic','Syria')\ndata['Country']= data['Country'].replace( 'United Republic of Tanzania','Tanzania')\n\n\n","c752c985":"data =data.drop([0])","a71bc320":"data_country = data.sort_values(['Deaths - cumulative total per 100000 population'], ascending = False).reset_index(drop=True)\ndata_country.drop(columns = ['WHO Region', 'Cases - cumulative total', 'Cases - newly reported in last 7 days']).head(10).style.background_gradient(cmap='Reds', subset = ['Deaths - cumulative total per 100000 population','Deaths - newly reported in last 7 days','Deaths - newly reported in last 7 days per 100000 population','Deaths - cumulative total','Cases - newly reported in last 24 hours','Cases - newly reported in last 7 days per 100000 population','Cases - cumulative total per 100000 population'])","9ec451a9":"data_plot = data.merge(iso_countries, how='left', left_on=['Country'], right_on=['name'])\ndata_plot.rename(columns={'Alpha-3 code':'country code','English short name lower case': 'country name'}, inplace=True)\ndata_plot","03991ba4":"fig = px.choropleth(data_plot, locations=\"alpha-3\",color=\"Deaths - cumulative total per 100000 population\",hover_name=\"Country\",color_continuous_scale=px.colors.sequential.YlOrRd)\nlayout = go.Layout(title=go.layout.Title(text=\"Deaths - cumulative total per 100000 population\",x=0.10),font=dict(size=10),width = 1000,height = 500,margin=dict(l=1,r=1,b=1,t=20))\nfig.update_layout(layout)\nfig.show()","a259e4c6":"fig = px.choropleth(data_plot, locations=\"alpha-3\",color=\"Deaths - newly reported in last 7 days\",hover_name=\"Country\",color_continuous_scale=px.colors.sequential.YlOrRd)\nlayout = go.Layout(title=go.layout.Title(text=\"Deaths - newly reported in last 7 days\",x=0.10),font=dict(size=10),width = 1000,height = 500,margin=dict(l=1,r=1,b=1,t=20))\nfig.update_layout(layout)\nfig.show()","0c28a679":"Changing the column name","87a30f02":"# Map showhing Deaths - newly reported in last 7 days","336732ca":"Reading the data first list of countries to plot in the map.","3b1e7985":"# Show the biggest values in each dimension by heatmap","066c23c3":"Rename all the countrys to fit in the data from countries to plot","fc5dca5a":"rename the old index column","cca188b5":"preparing the database to delete rows with all 0 values","72dcfee4":"# Map showing the countries cumulative total per 100000 population","326421ee":"reset the index ","cc4fd97d":"Checking the nan values from the data","f09a5a14":"Check the size of the data after drop the column","ccda9f11":"Drop the column Deaths - newly reporterd in the last 24 hours. It is all nan","69f674df":"Reading the data ","6b0e7c65":"Merge the data to plot the map"}}