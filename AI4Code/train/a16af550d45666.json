{"cell_type":{"202d32d3":"code","80f9dca9":"code","896dc62d":"code","8c2d0d11":"code","c0bac473":"code","fe68cf21":"code","13b5e004":"code","a0c904c3":"code","e36fa96f":"code","32625004":"code","700d19d2":"code","d190686f":"code","4b79dcd1":"code","cf121b8f":"markdown","9dc5a43c":"markdown","fffc31b7":"markdown","fb90b860":"markdown","f0fd6696":"markdown","3987213e":"markdown","1a30b131":"markdown","47464cfe":"markdown"},"source":{"202d32d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","80f9dca9":"import matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.rcParams[\"figure.figsize\"] = (16, 10)\nsns.set_theme()\n","896dc62d":"data = pd.read_csv('\/kaggle\/input\/top-video-games-19952021-metacritic\/all_games.csv')\n\ndata = data.loc[data['user_review'] != 'tbd']\ndata = data.astype({'meta_score': \"int32\", 'user_review': \"float32\"})\n\ndata['release_date'] = pd.to_datetime(data['release_date'])\nyear = data['release_date'].dt.year\nmonth = data['release_date'].dt.month_name()\nday = data['release_date'].dt.day_name()\n\ndata.head()","8c2d0d11":"cross_corr = data.loc[:, (data.columns != 'name') & (data.columns != 'summary')].apply(lambda x : pd.factorize(x)[0]).corr(method='pearson')\nsns.heatmap(cross_corr, cmap=\"Blues\", \n        xticklabels=cross_corr.columns,\n        yticklabels=cross_corr.columns)\nplt.show()","c0bac473":"fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(20,8))\n#sns.histplot(data['user_review'], kde=True, ax=ax1).set_title(\"Distribution of user reviews scores\" )\nsns.histplot(data['user_review'], kde=True, bins=100, ax=ax1).set_title(\"Distribution of user reviews scores\" )\nax1.set_xticks(range(11))\nax1.set_xticklabels(range(11))\n\n\n#sns.histplot(data['meta_score'], kde=True, ax=ax2).set_title(\"Distribution of meta scores\")\nsns.histplot(data['meta_score'], kde=True, bins=100, ax=ax2).set_title(\"Distribution of meta scores\")\n\nplt.show()","fe68cf21":"data['user_review'].corr(data['meta_score'])","13b5e004":"diff_column = data['meta_score'] - data[\"user_review\"] * 10\nmask = (diff_column >= diff_column.max() * 0.95) | (diff_column <= diff_column.min() * 0.60)\nmask = mask & (year >= 2019)\ndisplay(data[mask])","a0c904c3":"color = data['name'].copy()\nmask = (color != 'Warcraft III: Reforged') & (color != 'FIFA 20') & (color != 'Left Alive')\n\ncolor[mask] = 'Other'\nsize = color.copy()\nsize[mask] = 1\nsize[mask ^ True] = 10\nsize.name = \"sizes\"\n","e36fa96f":"ax = sns.scatterplot(data=data, x=\"user_review\", y=\"meta_score\", hue=color, size=size)\n\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles=handles[1:5], labels=labels[1:5])\n\nplt.title('Meta scores and user reviews')\nxticks = list(range(0, 11))\nplt.xticks(xticks)\nyticks = list(range(0, 101, 10))\nplt.yticks(yticks)\n\nNone","32625004":"sns.boxplot(x=year, y=diff_column,\n            data=data)\n\nplt.title('Difference of meta score and user score')\nNone","700d19d2":"abs_diff_column = diff_column.abs()\nsns.boxplot(x=year, y=abs_diff_column,\n            data=data)\n\nplt.title('Absolute difference of meta score and user score')\nNone","d190686f":"data['year'] = year\n\nyear_data = data[['meta_score', 'user_review', 'year']].groupby(['year']).mean()\nyear_data.reset_index(inplace=True)\nyear_data['user_review'] *= 10","4b79dcd1":"def to_score(data, column_name):\n    tmp_data = data.loc[:, ['year', column_name]]\n    tmp_data = tmp_data.rename(columns={column_name: 'score'})\n    tmp_data['color'] = column_name\n    return tmp_data\n\ntmp_data = pd.concat([to_score(year_data, 'meta_score'), to_score(year_data, 'user_review')]).reset_index()\n\nax = sns.lineplot(data=tmp_data, x='year', y='score', hue='color')\n\nhandles, labels = ax.get_legend_handles_labels()\nax.legend(handles=handles, labels=labels)\n\nplt.title('Average user and meta scores by years')\n\nNone","cf121b8f":"## Records with large differences in user reviews and meta scores","9dc5a43c":"## Scatterplot of meta scores and user reviews","fffc31b7":"## Distribution of user review vs meta scores","fb90b860":"# User reviews and meta scores relation","f0fd6696":"# Correlation Heatmap","3987213e":"## Correlation between user reviews and meta scores","1a30b131":"## Change in the differences in scores over time","47464cfe":"## Change in average user and meta scores over time"}}