{"cell_type":{"9c2a6a73":"code","cb54d3cc":"code","4fc551d1":"code","ed8889fc":"code","32d49e4f":"code","495d83b8":"code","37302cdf":"code","7c233614":"code","f133dbab":"code","a1c85aeb":"code","9c80d6a3":"code","bd882fec":"code","aa4d8328":"code","e22e667c":"code","820da2f7":"code","df55404a":"code","75d110cd":"code","c3cd0f81":"code","a881e10e":"code","99397599":"code","309cbd3b":"code","50bfd9e3":"code","d914bd13":"code","0b0037ad":"code","cc700457":"code","f5c78e4a":"code","749b2f69":"code","cfc95f3d":"code","9921d1e9":"code","b2595ddc":"code","1efb2b64":"code","62773a64":"code","51d17484":"code","d94e46aa":"code","a76ae23d":"code","2491106f":"code","5613d0ce":"code","985d8546":"code","4b1c9320":"code","27071683":"code","3d74fa1d":"code","9892cf75":"code","6d58985a":"code","2de9ff2b":"code","7f54a6c5":"code","4f33cb45":"code","78efd971":"code","7d096ab4":"code","9f85f2aa":"code","62b71ac8":"code","55b7bd8a":"code","d1c9a555":"code","020325f4":"code","48b35c6f":"code","c4c9224e":"code","d0f5ff90":"code","0dfcdf74":"code","a1c49dca":"code","749d4ac5":"code","05e4815e":"code","f15f7a10":"code","e2a3485f":"code","267d85a8":"code","beed7142":"code","00588cc9":"code","3d22275b":"code","1fa3fbca":"code","24f465ff":"code","e857bcb9":"code","f8efa7a1":"code","833cbff5":"code","9e7fe166":"code","34011b64":"code","11deb9bb":"code","fefedcee":"code","13c12799":"code","15778667":"code","d2510596":"code","07b093bb":"code","54be8867":"code","aad283f5":"code","9d8069f7":"code","57a64638":"code","bc72b29a":"code","fe50c3fe":"code","33a81093":"code","6f0afa80":"code","115abafe":"code","2fcb447c":"code","6f9d422a":"code","c7e3c7ab":"code","cc1f89bd":"code","9b021366":"code","b8e1c78b":"code","b3ce5f29":"code","09d692ae":"code","b4d5957d":"code","7a684e53":"code","e74d8b01":"code","18edc637":"code","6b4dda0a":"code","ca85497f":"code","c2aea431":"code","fa53a358":"code","564ea9fb":"code","8074f69d":"code","7d2461ad":"markdown","9cfadd98":"markdown","cad6e50d":"markdown","d070dc12":"markdown","5500347b":"markdown","13c966d8":"markdown","b7eeedaf":"markdown","8e878f92":"markdown","18ffd9e7":"markdown","317ba982":"markdown","0540e41b":"markdown","193b8684":"markdown","00c02e65":"markdown","e9d1ca3b":"markdown","3fb50420":"markdown","0616a54b":"markdown","a570a5a9":"markdown","c30c95f1":"markdown","eb9cfb19":"markdown","180f7171":"markdown","36c61f2a":"markdown","77f3fabf":"markdown","0d3c2098":"markdown","c7b64b77":"markdown","1a6ab8f0":"markdown","895250f3":"markdown","47d16f0f":"markdown","09366d71":"markdown","4472eeff":"markdown","b23009dc":"markdown","a7e95723":"markdown","79f38668":"markdown","d6875bfa":"markdown","621e8ed5":"markdown","87c8c350":"markdown","f213948c":"markdown","57d3ab0b":"markdown","ef018282":"markdown","2d4cd564":"markdown","64d96637":"markdown","25771bf8":"markdown","9a74fe9a":"markdown","9603910f":"markdown","a1f39b2c":"markdown","d70b2be8":"markdown","ccd2e1c0":"markdown","eeebb5f4":"markdown","a5edb35b":"markdown","49237aa3":"markdown","20f939b6":"markdown","7abe3b0b":"markdown","2974f26b":"markdown","e338e1d4":"markdown","be49628a":"markdown","c18b7cb5":"markdown","6206fb9c":"markdown","348c7810":"markdown","0a98b65c":"markdown","ca1ed87b":"markdown","9b86c2ed":"markdown","3e99a3c1":"markdown","04034ca5":"markdown","1ddc4476":"markdown","5113da87":"markdown","5d39ff05":"markdown","07075439":"markdown","5eb2cc7e":"markdown","14d9c60b":"markdown","80ce714c":"markdown","9a4be5a4":"markdown","3074dd25":"markdown","f084518e":"markdown","e2eb9af5":"markdown"},"source":{"9c2a6a73":"import calendar\nimport os\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\n\nfrom datetime import datetime\nfrom scipy import stats\n\n%matplotlib inline\nsns.set()","cb54d3cc":"df = pd.read_csv(\"..\/input\/train.csv\")","4fc551d1":"df.head()","ed8889fc":"drop_lst = ['casual', 'registered']\ndf = df.drop(drop_lst, axis=1)\ndf.head()","32d49e4f":"df.info()","495d83b8":"df.describe()","37302cdf":"df['count'].head()","7c233614":"df['count'].describe()","f133dbab":"plt.hist(df['count']);","a1c85aeb":"count_log = np.log(df['count'])\nplt.hist(count_log);","9c80d6a3":"count_boxcox, _ = stats.boxcox(df['count'])\ncount_boxcox","bd882fec":"plt.hist(count_boxcox);","aa4d8328":"df['count_log'] = count_log\ndf['count_boxcox'] = count_boxcox","e22e667c":"df.head()","820da2f7":"df['datetime'] = pd.to_datetime(df['datetime'])","df55404a":"df.head()","75d110cd":"df.info()","c3cd0f81":"df['dow'] = df['datetime'].dt.dayofweek\ndf.head()","a881e10e":"df['month'] = df['datetime'].dt.month\ndf.head()","99397599":"df['week'] = df['datetime'].dt.week\ndf.head()","309cbd3b":"df['hour'] = df['datetime'].dt.hour\ndf.head()","50bfd9e3":"df['year'] = df['datetime'].dt.year\ndf.head()","d914bd13":"df['day'] = df['datetime'].dt.day\ndf.head()","0b0037ad":"df = df.set_index(df['datetime'])\ndf.head()","cc700457":"df = df.drop(labels='datetime', axis=1)\ndf.head()","f5c78e4a":"df['season'].describe()","749b2f69":"fig, ax = plt.subplots(1, 2, figsize=(12, 4))\n\nnames = ['1', '2', '3', '4']\n\nvalues = df['season'][df['year'] == 2011].value_counts()\nax[0].bar(names, values)\n\nvalues = df['season'][df['year'] == 2012].value_counts()\nax[1].bar(names, values)\n\nfig.suptitle('Seasons in 2011 & 2012');","cfc95f3d":"spring_2011 = int(df['season'][df['season'] == 1][df['year'] == 2011].value_counts())\nsummer_2011 = int(df['season'][df['season'] == 2][df['year'] == 2011].value_counts())\nfall_2011 = int(df['season'][df['season'] == 3][df['year'] == 2011].value_counts())\nwinter_2011 = int(df['season'][df['season'] == 4][df['year'] == 2011].value_counts())\n\nspring_2012 = int(df['season'][df['season'] == 1][df['year'] == 2012].value_counts())\nsummer_2012 = int(df['season'][df['season'] == 2][df['year'] == 2012].value_counts())\nfall_2012 = int(df['season'][df['season'] == 3][df['year'] == 2012].value_counts())\nwinter_2012 =int(df['season'][df['season'] == 4][df['year'] == 2012].value_counts())\n\nprint(\"Spring 2011: {}\".format(spring_2011))\nprint(\"Summer 2011: {}\".format(summer_2011))\nprint(\"Fall 2011: {}\".format(fall_2011))\nprint(\"Winter 2011: {}\".format(winter_2011))\nprint(\"-----------------------------------------\")\nprint(\"Spring 2012: {}\".format(spring_2012))\nprint(\"Summer 2012: {}\".format(summer_2012))\nprint(\"Fall 2012: {}\".format(fall_2012))\nprint(\"Winter 2012: {}\".format(winter_2012))","9921d1e9":"df['holiday'].describe()","b2595ddc":"fig, ax = plt.subplots(1, 2, figsize=(12, 4))\n\nnames = ['0', '1']\n\nvalues = df['holiday'][df['year'] == 2011].value_counts()\nax[0].bar(names, values)\n\nvalues = df['holiday'][df['year'] == 2012].value_counts()\nax[1].bar(names, values)\n\nfig.suptitle('Holidays in 2011 & 2012');","1efb2b64":"no_holiday_2011 = int(df['holiday'][df['holiday'] == 0][df['year'] == 2011].value_counts())\nholiday_2011 = int(df['holiday'][df['holiday'] == 1][df['year'] == 2011].value_counts())\nno_holiday_2012 = int(df['holiday'][df['holiday'] == 0][df['year'] == 2012].value_counts())\nholiday_2012 = int(df['holiday'][df['holiday'] == 1][df['year'] == 2012].value_counts())\n\nprint(\"No Holidays 2011: {}\".format(no_holiday_2011))\nprint(\"No Holidays 2012: {}\".format(no_holiday_2012))\nprint(\"Holidays 2011: {}\".format(holiday_2011))\nprint(\"Holidays 2012: {}\".format(holiday_2012))\nprint('----------------')\ntotal_2011 = no_holiday_2011 + holiday_2011\ntotal_2012 = no_holiday_2012 + holiday_2012\nprint('No Holidays 2011: {:.0f}%'.format(no_holiday_2011 \/ total_2011 * 100))\nprint('No Holidays 2012: {:.0f}%'.format(no_holiday_2012 \/ total_2012 * 100))","62773a64":"df['workingday'].describe()","51d17484":"fig, ax = plt.subplots(1, 2, figsize=(12, 4))\n\nnames = ['0', '1']\n\nvalues = df['workingday'][df['year'] == 2011].value_counts()\nax[0].bar(names, values)\n\nvalues = df['workingday'][df['year'] == 2012].value_counts()\nax[1].bar(names, values)\n\nfig.suptitle('Working day in 2011 & 2012');","d94e46aa":"no_workingday_2011 = int(df['workingday'][df['workingday'] == 0][df['year'] == 2011].value_counts())\nworkingday_2011 = int(df['workingday'][df['workingday'] == 1][df['year'] == 2011].value_counts())\nno_workingday_2012 = int(df['workingday'][df['workingday'] == 0][df['year'] == 2012].value_counts())\nworkingday_2012 = int(df['workingday'][df['workingday'] == 1][df['year'] == 2012].value_counts())\n\nprint(\"No working day 2011: {}\".format(no_workingday_2011))\nprint(\"working day 2011: {}\".format(workingday_2011))\nprint(\"No working day 2012: {}\".format(no_workingday_2012))\nprint(\"working day 2012: {}\".format(workingday_2012))\nprint('----------------')\ntotal_2011 = no_workingday_2011 + workingday_2011\ntotal_2012 = no_workingday_2012 + workingday_2012\nprint('No working day 2011: {:.0f}%'.format(no_workingday_2011 \/ total_2011 * 100))\nprint('No working day 2012: {:.0f}%'.format(no_workingday_2012 \/ total_2012 * 100))","a76ae23d":"df['weather'].describe()","2491106f":"fig, ax = plt.subplots(1, 2, figsize=(12, 4))\n\nnames_2011 = ['1', '2', '3']\nnames_2012 = ['1', '2', '3', '4']\n\nvalues = df['weather'][df['year'] == 2011].value_counts()\nax[0].bar(names_2011, values)\n\nvalues = df['weather'][df['year'] == 2012].value_counts()\nax[1].bar(names_2012, values)\n\nfig.suptitle('Weather in 2011 & 2012');","5613d0ce":"weather_2011_1 = df['weather'][df['weather'] == 1][df['year'] == 2011].value_counts()\nweather_2011_2 = df['weather'][df['weather'] == 2][df['year'] == 2011].value_counts()\nweather_2011_3 = df['weather'][df['weather'] == 3][df['year'] == 2011].value_counts()\n\nweather_2012_1 = df['weather'][df['weather'] == 1][df['year'] == 2012].value_counts()\nweather_2012_2 = df['weather'][df['weather'] == 2][df['year'] == 2012].value_counts()\nweather_2012_3 = df['weather'][df['weather'] == 3][df['year'] == 2012].value_counts()\nweather_2012_4 = df['weather'][df['weather'] == 4][df['year'] == 2012].value_counts()\n\nprint('weather_1 in 2011: {}'.format(int(weather_2011_1)))\nprint('weather_2 in 2011: {}'.format(int(weather_2011_2)))\nprint('weather_3 in 2011: {}'.format(int(weather_2011_3)))\nprint('--------------')\nprint('weather_1 in 2012: {}'.format(int(weather_2012_1)))\nprint('weather_2 in 2012: {}'.format(int(weather_2012_2)))\nprint('weather_3 in 2012: {}'.format(int(weather_2012_3)))\nprint('weather_4 in 2012: {}'.format(int(weather_2012_4)))\nprint('---------------')\ntotal_2011 = int(weather_2011_1) + int(weather_2011_2) + int(weather_2011_3)\ntotal_2012 = int(weather_2012_1) + int(weather_2012_2) + int(weather_2012_3) + int(weather_2012_4)\nprint('weather_1 in 2011: {:.0f}%'.format(int(weather_2011_1) \/ int(total_2011) * 100))\nprint('weather_2 in 2011: {:.0f}%'.format(int(weather_2011_2) \/ int(total_2011) * 100))\nprint('weather_3 in 2011: {:.0f}%'.format(int(weather_2011_3) \/ int(total_2011) * 100))\nprint('--------------')\nprint('weather_1 in 2012: {:.0f}%'.format(int(weather_2012_1) \/ int(total_2012) * 100))\nprint('weather_2 in 2012: {:.0f}%'.format(int(weather_2012_2) \/ int(total_2012) * 100))\nprint('weather_3 in 2012: {:.0f}%'.format(int(weather_2012_3) \/ int(total_2012) * 100))\nprint('weather_4 in 2012: {:.0f}%'.format(int(weather_2012_4) \/ int(total_2012) * 100))","985d8546":"df['temp'].describe()","4b1c9320":"plt.hist(df['temp'][df['year'] == 2011], alpha=0.5, label='2011')\nplt.hist(df['temp'][df['year'] == 2012], alpha=0.5, label='2012')\n\nplt.legend(loc='upper right');","27071683":"df['atemp'].describe()","3d74fa1d":"plt.hist(df['atemp'][df['year'] == 2011], alpha=0.5, label='2011')\nplt.hist(df['atemp'][df['year'] == 2012], alpha=0.5, label='2012')\n\nplt.legend(loc='upper right');","9892cf75":"df['humidity'].describe()","6d58985a":"plt.hist(df['humidity'][df['year'] == 2011], alpha=0.5, label='2011')\nplt.hist(df['humidity'][df['year'] == 2012], alpha=0.5, label='2012')\n\nplt.legend(loc='upper right');","2de9ff2b":"df['windspeed'].describe()","7f54a6c5":"plt.hist(df['windspeed'][df['year'] == 2011], alpha=0.5, label='2011')\nplt.hist(df['windspeed'][df['year'] == 2012], alpha=0.5, label='2012')\n\nplt.legend(loc='upper right');","4f33cb45":"df['dow'].describe()","78efd971":"plt.hist(df['dow'][df['year'] == 2011], alpha=0.5, label='2011', bins=7)\nplt.hist(df['dow'][df['year'] == 2012], alpha=0.5, label='2012', bins=7)\n\nplt.legend(loc='upper right');","7d096ab4":"df['month'].describe()","9f85f2aa":"plt.hist(df['month'][df['year'] == 2011], alpha=0.5, label='2011', bins=12)\nplt.hist(df['month'][df['year'] == 2012], alpha=0.5, label='2012', bins=12)\n\nplt.legend(loc='upper right');","62b71ac8":"df['week'].describe()","55b7bd8a":"plt.hist(df['week'][df['year'] == 2011], alpha=0.5, label='2011', bins=52)\nplt.hist(df['week'][df['year'] == 2012], alpha=0.5, label='2012', bins=52)\nfig = plt.gcf()\nfig.set_size_inches(18.5, 10.5)\nplt.legend(loc='upper right');","d1c9a555":"df['hour'].describe()","020325f4":"plt.hist(df['hour'][df['year'] == 2011], alpha=0.5, label='2011', bins=24)\nplt.hist(df['hour'][df['year'] == 2012], alpha=0.5, label='2012', bins=24)\nplt.legend(loc='upper right');","48b35c6f":"df['day'].describe()","c4c9224e":"plt.hist(df['day'][df['year'] == 2011], alpha=0.5, label='2011', bins=31)\nplt.hist(df['day'][df['year'] == 2012], alpha=0.5, label='2012', bins=31)\nfig = plt.gcf()\nfig.set_size_inches(18.5, 10.5)\nplt.legend(loc='upper right');","d0f5ff90":"df['year'].describe()","0dfcdf74":"names = ['2011', '2012']\nvalues = df['year'].value_counts()\nplt.bar(names, values);","a1c49dca":"count_2011 = df['year'][df['year'] == 2011].count()\ncount_2012 = df['year'][df['year'] == 2012].count()\n\nprint('2011: {}'.format(count_2011))\nprint('2012: {}'.format(count_2012))","749d4ac5":"cor_mat = df[:].corr()\nmask = np.array(cor_mat)\nmask[np.tril_indices_from(mask)] = False\nfig = plt.gcf()\nfig.set_size_inches(30,12)\nsns.heatmap(data=cor_mat, mask=mask, square=True, annot=True, cbar=True);","05e4815e":"sns.pointplot(x=df['temp'], y=df['count'])\nfig = plt.gcf()\nfig.set_size_inches(30,12);","f15f7a10":"from scipy import stats\n_, _, r_value, _, _ = stats.linregress(df['count'], df['temp'])\nr_square = r_value ** 2\nr_square.round(2)","e2a3485f":"sns.pointplot(x=df['atemp'], y=df['count'])\nfig = plt.gcf()\nfig.set_size_inches(30,12);","267d85a8":"_, _, r_value, _, _ = stats.linregress(df['count'], df['atemp'])\nr_square = r_value ** 2\nr_square.round(2)","beed7142":"sns.pointplot(x=df['hour'], y=df['count'])\nfig = plt.gcf()\nfig.set_size_inches(30,12);","00588cc9":"sns.pointplot(x=df['temp'], y=df['atemp'])\nfig = plt.gcf()\nfig.set_size_inches(30,12);","3d22275b":"_, _, r_value, _, _ = stats.linregress(df['temp'], df['atemp'])\nr_square = r_value ** 2\nr_square.round(2)","1fa3fbca":"df = df.drop(labels='atemp', axis=1)","24f465ff":"df.head()","e857bcb9":"df = df.drop(labels='count_log', axis=1)","f8efa7a1":"df = df.drop(labels='count_boxcox', axis=1)","833cbff5":"df.head()","9e7fe166":"df = pd.get_dummies(df, columns=['weather'])\ndf.head()","34011b64":"df = df.drop(labels='weather_4', axis=1)\ndf.head()","11deb9bb":"df['temp_weath_1'] = df['temp'] * df['weather_1']\ndf['temp_weath_2'] = df['temp'] * df['weather_2']\ndf['temp_weath_3'] = df['temp'] * df['weather_3']","fefedcee":"df['temp_weath_1'] = df['temp_weath_1'].astype(int)\ndf['temp_weath_2'] = df['temp_weath_2'].astype(int)\ndf['temp_weath_3'] = df['temp_weath_3'].astype(int)","13c12799":"df.head()","15778667":"X = df.loc[:, df.columns != 'count']\ny = np.log(df['count'])","d2510596":"X.shape, y.shape","07b093bb":"from sklearn.model_selection import train_test_split","54be8867":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2)","aad283f5":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","9d8069f7":"from sklearn.linear_model import LinearRegression, Lasso, ElasticNet, Ridge\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import Pipeline, make_pipeline\nfrom sklearn.preprocessing import StandardScaler, MaxAbsScaler, MinMaxScaler, Normalizer, minmax_scale, QuantileTransformer, RobustScaler, PolynomialFeatures\nfrom sklearn.model_selection import KFold, cross_val_score\n\nfrom xgboost import XGBRegressor","57a64638":"pipelines = []\n\npipelines.append(('ScaledLR', Pipeline([('Scaler', StandardScaler()), ('LR', LinearRegression())])))\npipelines.append(('ScaledLASSO', Pipeline([('poly', PolynomialFeatures()), ('Scaler', StandardScaler()), ('LASSO', Lasso(random_state=42))])))\npipelines.append(('ScaledRID', Pipeline([('poly', PolynomialFeatures()), ('Scaler', StandardScaler()), ('RID', Ridge(random_state=42))])))\npipelines.append(('ScaledKNN', Pipeline([('poly', PolynomialFeatures()), ('Scaler', StandardScaler()), ('KNN', KNeighborsRegressor(n_neighbors=2))])))\npipelines.append(('ScaledCART', Pipeline([('poly', PolynomialFeatures()), ('Scaler', StandardScaler()), ('CART', DecisionTreeRegressor(random_state=42))])))\npipelines.append(('ScaledGBM', Pipeline([('poly', PolynomialFeatures()), ('Scaler', StandardScaler()), ('GBM', GradientBoostingRegressor(random_state=42))])))\npipelines.append(('ScaledRFR', Pipeline([('poly', PolynomialFeatures()), ('Scaler', StandardScaler()), ('RFR', RandomForestRegressor(random_state=42))])))\npipelines.append(('ScaledSVR', Pipeline([('poly', PolynomialFeatures()), ('Scaler', StandardScaler()), ('SVR', SVR(kernel='linear'))])))\npipelines.append(('ScaledXGBR', Pipeline([('poly', PolynomialFeatures()), ('Scaler', StandardScaler()), ('XGBR', XGBRegressor(random_state=42))])))\n\nresults = []\nnames = []\nfor name, model in pipelines:\n    kfold = KFold(random_state=42)\n    cv_results = -cross_val_score(model, X_train, y_train, cv=kfold, scoring='neg_mean_squared_log_error')\n    results.append(np.sqrt(cv_results))\n    names.append(name)\n    msg = \"{}: {} ({})\".format(name, cv_results.mean(), cv_results.std())\n    print(msg)","bc72b29a":"df_test = pd.read_csv(\"..\/input\/test.csv\")","fe50c3fe":"df_test['datetime'] = pd.to_datetime(df_test['datetime'])","33a81093":"df_test['dow'] = df_test['datetime'].dt.dayofweek","6f0afa80":"df_test['month'] = df_test['datetime'].dt.month","115abafe":"df_test['week'] = df_test['datetime'].dt.week","2fcb447c":"df_test['hour'] = df_test['datetime'].dt.hour","6f9d422a":"df_test['year'] = df_test['datetime'].dt.year","c7e3c7ab":"df_test['day'] = df_test['datetime'].dt.day","cc1f89bd":"df_test = df_test.set_index(df_test['datetime'])","9b021366":"df_test = df_test.drop(labels='datetime', axis=1)","b8e1c78b":"df_test = df_test.drop(labels='atemp', axis=1)","b3ce5f29":"df_test = pd.get_dummies(df_test, columns=['weather'])","09d692ae":"df_test = df_test.drop(labels='weather_4', axis=1)","b4d5957d":"df_test['temp_weath_1'] = df_test['temp'] * df_test['weather_1']\ndf_test['temp_weath_2'] = df_test['temp'] * df_test['weather_2']\ndf_test['temp_weath_3'] = df_test['temp'] * df_test['weather_3']","7a684e53":"df_test['temp_weath_1'] = df_test['temp_weath_1'].astype(int)\ndf_test['temp_weath_2'] = df_test['temp_weath_2'].astype(int)\ndf_test['temp_weath_3'] = df_test['temp_weath_3'].astype(int)","e74d8b01":"standardscaler = StandardScaler()\nmodel = XGBRegressor(colsample_bytree=0.7, learning_rate=0.05, max_depth=7, min_child_weight=4, subsample=0.7, random_state=42)","18edc637":"model.fit(X_train, y_train)","6b4dda0a":"model.predict(df_test)","ca85497f":"pipe = Pipeline([('poly', PolynomialFeatures()), ('StandardScaler', standardscaler), ('XGBR', model)])\npipe.fit(X_train, y_train)\ny_pred = np.exp(pipe.predict(df_test))\ny_pred","c2aea431":"df_test['count'] = y_pred","fa53a358":"df_test.head()","564ea9fb":"df_test[['count']].to_csv('submission.csv', index=True)","8074f69d":"df_test[['count']].head()","7d2461ad":"**No difference between 2011 & 2012.**","9cfadd98":"**No outliers.**","cad6e50d":"**No outliers.**","d070dc12":"## Day","5500347b":"**Add count_log & count_boxcox features in the dataframe.**","13c966d8":"**Differences between weather_1 to weather_4 for 2011& 2012.**","b7eeedaf":"**No outliers.**","8e878f92":"**We have the 20th first days of each month for 2011 & 2012.**","18ffd9e7":"**Equal distribution for 2011 & 2012.**","317ba982":"## Temp","0540e41b":"## weather","193b8684":"## Week","00c02e65":"2011-2012","e9d1ca3b":"## Atemp","3fb50420":"## Working day","0616a54b":"## New features: Temp by weather","a570a5a9":"**Right skew for 2011 & 2012.**","c30c95f1":"**Normal distribution with boxcox**","eb9cfb19":"Monday = 0  \nSunday = 6","180f7171":"# Multivariate Analysis","36c61f2a":"weather:  \n1: Clear, Few clouds, Partly cloudy, Partly cloudy  \n2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist  \n3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds  \n4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog   ","77f3fabf":"## Month","0d3c2098":"# TEST SET","c7b64b77":"## Year","1a6ab8f0":"**Left skew for 2011 & 2012.**","895250f3":"# Univariate Analysis","47d16f0f":"1 to 52","09366d71":"**Difference between workingday & no workingday.**","4472eeff":"count:\nnumber of total rentals","b23009dc":"## TARGET: Count","a7e95723":"## DayOfWeek","79f38668":"## Best score:  \nScaledXGBR: 0.014747506232883416 (0.0007606201073795001)","d6875bfa":"## Sparse weather column","621e8ed5":"**No outliers.**","87c8c350":"**High correlation, we can drop atemp column.**","f213948c":"## Count\/Hour","57d3ab0b":"workingday:\nwhether the day is neither a weekend nor holiday ","ef018282":"**Right skew**","2d4cd564":"humidity:\nrelative humidity ","64d96637":"0 to 23","25771bf8":"**2 High values: 8h et 17h**","9a74fe9a":"# Data Fields\n\ndatetime:  \nhourly date + timestamp  \n\nseason:  \n1 = spring, 2 = summer, 3 = fall, 4 = winter  \n\nholiday:  \nwhether the day is considered a holiday  \n\nworkingday:  \nwhether the day is neither a weekend nor holiday  \n\nweather:  \n1: Clear, Few clouds, Partly cloudy, Partly cloudy  \n2: Mist + Cloudy, Mist + Broken clouds, Mist + Few clouds, Mist  \n3: Light Snow, Light Rain + Thunderstorm + Scattered clouds, Light Rain + Scattered clouds  \n4: Heavy Rain + Ice Pallets + Thunderstorm + Mist, Snow + Fog  \n\ntemp:  \ntemperature in Celsius  \n\natemp:  \n\"feels like\" temperature in Celsius  \n\nhumidity:  \nrelative humidity  \n\nwindspeed:  \nwind speed  \n\ncasual:  \nnumber of non-registered user rentals initiated  \n\nregistered:  \nnumber of registered user rentals initiated  \n\ncount:  \nnumber of total rentals","9603910f":"**Equal distribution for 2011 & 2012.**","a1f39b2c":"casual:\nnumber of non-registered user rentals initiated \n\nregistered:\nnumber of registered user rentals initiated ","d70b2be8":"**Equal distribution for 2011 & 2012.**","ccd2e1c0":"## Hour","eeebb5f4":"atemp:\n\"feels like\" temperature in Celsius ","a5edb35b":"## windspeed","49237aa3":"holiday:\nwhether the day is considered a holiday ","20f939b6":"# EDA","7abe3b0b":"## seasons","2974f26b":"## Delete 'Atemp' column","e338e1d4":"temp:\ntemperature in Celsius","be49628a":"1 to 31","c18b7cb5":"## Holiday","6206fb9c":"**Normal distribution for temp in 2011 & 2012.**","348c7810":"windspeed:\nwind speed","0a98b65c":"## Datetime","ca1ed87b":"## Delete 'casual' & 'registered' columns","9b86c2ed":"## Humidity","3e99a3c1":"## Count\/temp","04034ca5":"**Normal distribution for atemp in 2011 & 2012.**","1ddc4476":"## Temp\/Atemp","5113da87":"**Difference between Holidays and no holidays.**","5d39ff05":"datetime:\nhourly date + timestamp ","07075439":"## Delet count_log & count_boxcox columns","5eb2cc7e":"## Count\/Atemp","14d9c60b":"**Equal distribution for 2011 & 2012**","80ce714c":"**We have the 20th first days for each month in 2011 & 2012.**","9a4be5a4":"## Heatmap","3074dd25":"January = 0  \nDecember = 12","f084518e":"season:\n1 = spring, 2 = summer, 3 = fall, 4 = winter ","e2eb9af5":"# Importation datas"}}