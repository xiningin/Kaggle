{"cell_type":{"3fb259c8":"code","a891b73d":"code","41a92d3a":"code","8c94dbbe":"code","2d3f9af0":"code","24aaa2d6":"code","acff292f":"code","d37c427f":"code","ec2c3beb":"code","0b397c15":"code","eea56db9":"code","21618603":"code","8a3a16e5":"code","e68043c3":"code","7f2586f7":"code","dd7d3513":"code","d4bc753b":"code","e8953e9a":"code","f11471b0":"code","f3ffd57f":"code","52f49cc0":"code","e061bbb0":"code","dfe25aed":"code","2f84e2b0":"code","4f9ff401":"code","39c3d685":"code","d81a414b":"markdown","7ee0f2b9":"markdown","f7bffbfa":"markdown","65ed7ebb":"markdown","1875cd12":"markdown","7efe3bf7":"markdown","8fb64958":"markdown","2615a96e":"markdown","4e263736":"markdown","485d4902":"markdown","e5bc5f20":"markdown"},"source":{"3fb259c8":"%load_ext autoreload\n%autoreload 2","a891b73d":"try:\n  import tes_optical_stack\nexcept ImportError:\n  !pip install git+https:\/\/github.com\/saewoonam\/tes_optical_stack --quiet\ntry:\n  import lmfit\nexcept ImportError:\n  !pip install lmfit --quiet","41a92d3a":"import numpy as np\nimport lmfit\nimport matplotlib.pyplot as plt","8c94dbbe":"import tes_optical_stack.admittance as admittance","2d3f9af0":"from tes_optical_stack.optimize import layers2t, build_gui, gui2layers, build_gui_v2, gui2layers_v2","24aaa2d6":"admittance.nk.keys()","acff292f":"stack_description=['air', \n                   'SiN_sellmeier',\n                   'SiO2_Metricon',\n                   'aSi_190312',\n                   'W_trilayer_29',\n                   'aSi_Metricon',\n                   'SiN_sellmeier',\n                   'Au_Palik',\n                   'air'\n                  ]\ninitial_guess = [np.inf,\n              140.95,\n              36.26,\n              2,\n              20,\n              2,\n              69.62,\n              20,\n             np.inf]\n\n\n\nstack_gui = build_gui_v2(stack_description, initial_guess, admittance.nk)","d37c427f":"stack_gui","ec2c3beb":"check = False\nfor item in stack_gui.children[2].children[1:]:\n    check |= item.value\nif not check:\n    stack_gui.children[2].children[1].value = True\n    stack_gui.children[2].children[2].value = True\n    stack_gui.children[2].children[4].value = True\n    stack_gui.children[2].children[6].value = True","0b397c15":"layers = gui2layers_v2(stack_gui)\nlayers","eea56db9":"def optimize_W_a(layers):\n    t = []\n    stack = []\n    for key in layers.keys():\n        t.append(layers[key].value)\n        stack.append(layers[key].user_data['name'])\n    wl = 1064 + np.arange(-100, 101, 10)\n    #wl = np.arange(630, 1800, 50)\n    r = admittance.stack_v2(stack, t, wl)\n    w_idx = 4\n    \n    #error = ((1-1\/r['RAT'][:,w_idx])**2).sum() # + (r['RAT'][:,0]**2).sum() + (r['RAT'][:,-1]**2).sum()\n    #error = np.abs((1-1\/r['RAT'][:,w_idx])).sum() \n    error = (1-r['RAT'][:,w_idx]).sum() #  \n    #error = (r['RAT'][:,0]**2).sum() + (r['RAT'][:,-1]**2).sum()\n    return error\n","21618603":"optimize_W_a(layers)","8a3a16e5":"results = lmfit.minimize(optimize_W_a, layers, method='dual_annealing')\noptimize_W_a(results.params), layers2t(results.params)","e68043c3":"results = lmfit.minimize(optimize_W_a, layers, method='ampgo')\noptimize_W_a(results.params), layers2t(results.params)","7f2586f7":"results = lmfit.minimize(optimize_W_a, layers, method='tnc')\noptimize_W_a(layers), optimize_W_a(results.params), layers2t(results.params)","dd7d3513":"results = lmfit.minimize(optimize_W_a, layers, method='nelder')\noptimize_W_a(layers), optimize_W_a(results.params), layers2t(results.params)","d4bc753b":"results = lmfit.minimize(optimize_W_a, layers, method='differential_evolution')\noptimize_W_a(layers), optimize_W_a(results.params), layers2t(results.params)","e8953e9a":"#%matplotlib notebook\n#plt.figure()\nwl = np.arange(800, 1800)\nr = admittance.stack_v2(stack_description, layers2t(results.params), wl)\nimport matplotlib.pyplot as plt\nfor idx in range(r['RAT'].shape[1]):\n    text = layers[f'layer{idx}'].user_data['name']\n    # mark labels which have the R and T values\n    if idx==0:\n        text += \"-R\"\n    if idx == r['RAT'].shape[1]-1:\n        text += \"-T\"\n    y = r['RAT'][:,idx]\n    #if idx == 4:\n    #    y = 1-y\n    plt.plot(wl, y, label=text)\n\nplt.legend()\nplt.title('R, T, and A in each layer')\nplt.xlabel('wavelength [nm]')\nplt.ylabel('Fraction')\n#plt.axis([1000, 1200, 0.5, 1])","f11471b0":"for name in stack_description:\n    print(name, admittance.nk[name].min, admittance.nk[name].max)","f3ffd57f":"import plotly.graph_objects as go\n","52f49cc0":"wl = np.arange(800, 1800)\nr = admittance.stack_v2(stack_description, layers2t(results.params), wl)\nfig = go.Figure()\nfor idx in range(r['RAT'].shape[1]):\n    text = layers[f'layer{idx}'].user_data['name']\n    # mark labels which have the R and T values\n    if idx==0:\n        text += \"-R\"\n    if idx == r['RAT'].shape[1]-1:\n        text += \"-T\"\n    y = r['RAT'][:,idx]\n    #if idx == 4:\n    #    y = 1-y\n    fig.add_scatter(x=wl, y=y, name=text)\nfig.update_layout(\n  title={\n        'text': \"R, T, and A in each layer\",\n        'y':0.9,\n        'x':0.45,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n  xaxis_title=\"wavelength [nm]\",\n  yaxis_title=\"fraction\",\n)\nfig.show()","e061bbb0":"import ipywidgets","dfe25aed":"from ipywidgets import Button\nfrom IPython.display import HTML","2f84e2b0":"b = Button(icon='check')","4f9ff401":"display(b)\ndisplay(HTML('''<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/font-awesome\/4.7.0\/css\/font-awesome.min.css\"> '''))\n","39c3d685":"display(stack_gui)\ndisplay(HTML('''<link rel=\"stylesheet\" href=\"https:\/\/stackpath.bootstrapcdn.com\/font-awesome\/4.7.0\/css\/font-awesome.min.css\"> '''))\n","d81a414b":"### Build lmfit parameters that will be used to do the optimizations","7ee0f2b9":"# Code to optimize W TES around 1064nm","f7bffbfa":"### all length units are in nanometers\n","65ed7ebb":"### Check how good initial guess is.","1875cd12":"## Plot using plotly","7efe3bf7":"## Try different optimization methods","8fb64958":"## Look at max and minimum wavelengths that are available for each layer","2615a96e":"## Show gui to edit stack\n### Must have layers that vary or the notebook won't run correctly later","4e263736":"## Code below is what gets optimized\n### In this case, try to maximize absorption in W layer around 1064nm","485d4902":"### Check to make sure something is checked to vary... if not, pick some","e5bc5f20":"## build gui to edit intial values and pick which layers will vary"}}