{"cell_type":{"d2cb3eaa":"code","90bd9d29":"code","92b984ab":"code","dc856ad4":"code","87b8327c":"code","65746fde":"code","e2e67f66":"code","dffd803b":"code","514a71f2":"code","b2194193":"code","c4606f8b":"code","bdeb0065":"code","a77ff5a4":"code","43c7e700":"code","61b202dc":"code","e4ab995e":"code","2f3eb5d0":"code","9db6f598":"code","252b2208":"code","ea8dfa15":"code","63f2de2c":"code","8d361d90":"code","4fbce31d":"code","e434eb96":"code","65067ce8":"code","e1ae916e":"code","47d7fc31":"code","70afd64f":"code","5f8cbc09":"code","19740d27":"code","e07d6785":"code","1c191a71":"code","9e364eef":"code","f99d5b37":"code","3d76aca3":"code","92d56849":"code","a6484e72":"code","9c6627bc":"code","ba239735":"code","1ddfdf06":"code","50daa0fb":"code","2f70a81e":"code","cbb9d78e":"code","36b8bbc9":"code","3db665cd":"code","096a89b3":"code","8d8063c6":"code","ac07317b":"code","b8c39e78":"code","330a50c3":"code","376b1b45":"code","18d1cdc9":"code","c7cb46ea":"code","643259de":"code","a80e8cc5":"code","46d3febe":"code","f63962ca":"code","26fd388a":"code","85b31756":"code","b43a7a1a":"code","d6b7be24":"code","92022853":"code","5d8a31a5":"code","77229413":"code","e93cef05":"code","9c433578":"code","9f43e4a4":"code","aeaf19ac":"code","65ea9f9e":"markdown","8200484b":"markdown","d57aae2a":"markdown","8f3936df":"markdown","d7f1fcf2":"markdown","efe43ee1":"markdown","70183e85":"markdown","09188a0b":"markdown","ec342df1":"markdown","170bf672":"markdown","1df1a5c3":"markdown","fbb79947":"markdown","66e88244":"markdown","c713b0ad":"markdown","599cbfcc":"markdown","8229d2df":"markdown","7425f9cc":"markdown","bd66d114":"markdown","9a10b044":"markdown","4b0c3854":"markdown","52ce99df":"markdown","d982403e":"markdown"},"source":{"d2cb3eaa":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np,gc\nimport pandas as pd \npd.set_option('display.max_columns', 500)\n\n# Truy\u1ec1n c\u00e1c t\u1ec7p d\u1eef li\u1ec7u \u0111\u1ea7u v\u00e0o c\u00f3 s\u1eb5n trong th\u01b0 m\u1ee5c \"..\/input\/\".\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","90bd9d29":"cols_t = ['TransactionID', 'TransactionDT', 'TransactionAmt',\n       'ProductCD', 'card1', 'card2', 'card3', 'card4', 'card5', 'card6',\n       'addr1', 'addr2', 'dist1', 'dist2', 'P_emaildomain', 'R_emaildomain',\n       'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10', 'C11',\n       'C12', 'C13', 'C14', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8',\n       'D9', 'D10', 'D11', 'D12', 'D13', 'D14', 'D15', 'M1', 'M2', 'M3', 'M4',\n       'M5', 'M6', 'M7', 'M8', 'M9']\ncols_v = ['V'+str(x) for x in range(1,340)]; types_v = {}\nfor c in cols_v: types_v[c] = 'float32'\ntrain = pd.read_csv('..\/input\/ieee-fraud-detection\/train_transaction.csv',usecols=cols_t+['isFraud']+cols_v,dtype=types_v)","92b984ab":"nans_df = train.isna()\nnans_df","dc856ad4":"# T\u00ecm c\u00e1c c\u1ed9t c\u00f3 s\u1ed1 l\u01b0\u1ee3ng NAN b\u1eb1ng nhau c\u1ee7a c\u1ed9t V\nnans_df = train.isna()\nnans_groups={}\ni_cols = ['V'+str(i) for i in range(1,340)]\nfor col in train.columns:\n    if col[0] == 'V':\n        cur_group = nans_df[col].sum()\n        try:\n            nans_groups[cur_group].append(col)\n        except:\n            nans_groups[cur_group]=[col]\ndel nans_df; x=gc.collect()\n\nfor k,v in nans_groups.items():\n    print('####### NAN count =',k)\n    print(v)","87b8327c":"Vs = nans_groups[279287]\n# ['V1', 'V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11']\nVtitle = 'V1 - V11'","65746fde":"v= 'V11'\nidx = train[~train[Vs[0]].isna()].index\nnp.sum(train.loc[idx,v]!=train.loc[idx,v].astype(int))\nplt.hist(train.loc[idx,v])","e2e67f66":"def make_plots(Vs):\n    col = 4\n    row = len(Vs)\/\/4+1\n    plt.figure(figsize=(20,row*5))\n    idx = train[~train[Vs[0]].isna()].index # m\u1ea3ng c\u00e1c ch\u1ec9 s\u1ed1 c\u1ee7a transation c\u00f3 gi\u00e1 tr\u1ecb c\u1ee7a tr\u01b0\u1eddng 'V1' kh\u00f4ng ph\u1ea3i l\u00e0 nan \n    for i,v in enumerate(Vs):\n        plt.subplot(row,col,i+1)\n        n = train[v].nunique() # s\u1ed1 c\u00e1c gi\u00e1 tr\u1ecb kh\u00f4ng ph\u1ea3i l\u00e0 nan v\u00e0 l\u00e0 unique c\u1ee7a tr\u01b0\u1eddng v \n        number_of_value_is_not_int = np.sum(train.loc[idx,v]!=train.loc[idx,v].astype(int)) # S\u1ed1 l\u01b0\u1ee3ng c\u00e1c transaction c\u00f3 gi\u00e1 tr\u1ecb tr\u01b0\u1eddng v l\u00e0 int\n        y = np.round(100*np.sum(train[v].isna())\/len(train),2) # S\u1ed1 l\u01b0\u1ee3ng c\u00e1c transaction c\u00f3 gi\u00e1 tr\u1ecb tr\u01b0\u1eddng v l\u00e0 nan\n        t = 'int'\n        if number_of_value_is_not_int!=0: t = 'float'\n        plt.title(v+' has '+str(n)+' '+t+' and '+str(y)+'% nan')\n        plt.yticks([])\n        h = plt.hist(train.loc[idx,v],bins=100)\n        if len(h[0])>1: plt.ylim((0,np.sort(h[0])[-2]))\n    plt.show()\nmake_plots(Vs)","dffd803b":"cols = ['TransactionDT'] + Vs\ntrain[cols].corr()","514a71f2":"def make_corr(Vs,Vtitle=''):\n    cols = ['TransactionDT'] + Vs\n    plt.figure(figsize=(15,15))\n    sns.heatmap(train[cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\n    if Vtitle!='': plt.title(Vtitle,fontsize=14)\n    else: plt.title(Vs[0]+' - '+Vs[-1],fontsize=14)\n    plt.show()\nmake_corr(Vs,Vtitle)","b2194193":"# Ch\u1ecdn c\u00e1c c\u00f4t V \u0111\u1ea1i di\u1ec7n \ngrps = [[1],[2,3],[4,5],[6,7],[8,9],[10,11]]\ndef reduce_group(grps,c='V'):\n    use = []\n    for g in grps:\n        mx = 0; vx = g[0]\n        for gg in g:\n            n = train[c+str(gg)].nunique()\n            if n>mx:\n                mx = n\n                vx = gg\n            #print(str(gg)+'-'+str(n),', ',end='')\n        use.append(vx)\n        #print()\n    print('Use these',use)\nreduce_group(grps)","c4606f8b":"Vs = nans_groups[76073]\nmake_plots(Vs)\nmake_corr(Vs)","bdeb0065":"grps = [[12,13],[14],[15,16,17,18,21,22,31,32,33,34],[19,20],[23,24],[25,26],[27,28],[29,30]]\nreduce_group(grps)","a77ff5a4":"Vs = nans_groups[168969]\nmake_plots(Vs)\nmake_corr(Vs)","43c7e700":"grps = [[35,36],[37,38],[39,40,42,43,50,51,52],[41],[44,45],[46,47],[48,49]]\nreduce_group(grps)","61b202dc":"Vs = nans_groups[77096]\nmake_plots(Vs)\nmake_corr(Vs)","e4ab995e":"grps = [[53,54],[55,56],[57,58,59,60,63,64,71,72,73,74],[61,62],[65],[66,67],[68],[69,70]]\nreduce_group(grps)","2f3eb5d0":"Vs = nans_groups[89164]\nmake_plots(Vs)\nmake_corr(Vs)","9db6f598":"grps = [[75,76],[77,78],[79,80,81,84,85,92,93,94],[82,83],[86,87],[88],[89],[90,91]]\nreduce_group(grps)","252b2208":"Vs = nans_groups[314]\nmake_corr(Vs)","ea8dfa15":"Vs = ['V'+str(x) for x in range(95,107)]\nmake_plots(Vs)\nmake_corr(Vs)","63f2de2c":"grps = [[95,96,97,101,102,103,105,106],[98],[99,100],[104]]\nreduce_group(grps)","8d361d90":"Vs = ['V'+str(x) for x in range(107,124)]\nmake_plots(Vs)\nmake_corr(Vs)","4fbce31d":"grps = [[107],[108,109,110,114],[111,112,113],[115,116],[117,118,119],[120,122],[121],[123]]\nreduce_group(grps)","e434eb96":"Vs = ['V'+str(x) for x in range(124,138)]\nmake_plots(Vs)\nmake_corr(Vs)","65067ce8":"grps = [[124,125],[126,127,128,132,133,134],[129],[130,131],[135,136,137]]\nreduce_group(grps)","e1ae916e":"Vs = nans_groups[508595]\nmake_plots(Vs)\nmake_corr(Vs)","47d7fc31":"grps = [[138],[139,140],[141,142],[146,147],[148,149,153,154,156,157,158],[161,162,163]]\nreduce_group(grps)","70afd64f":"Vs = nans_groups[508589]\nmake_plots(Vs)\nmake_corr(Vs)","5f8cbc09":"grps = [[143,164,165],[144,145,150,151,152,159,160],[166]]\nreduce_group(grps)","19740d27":"Vs = [x for x in nans_groups[450909]]\nmake_corr(Vs)","e07d6785":"Vs = [x for x in nans_groups[450909] if int(x[1:])<186]\nmake_plots(Vs)\nmake_corr(Vs)","1c191a71":"grps = [[167,168,177,178,179],[172,176],[173],[181,182,183]]\nreduce_group(grps)","9e364eef":"Vs = [x for x in nans_groups[450909] if (int(x[1:])>183)]\nmake_plots(Vs)\nmake_corr(Vs)","f99d5b37":"grps = [[186,187,190,191,192,193,196,199],[202,203,204,211,212,213],[205,206],[207],[214,215,216]]\nreduce_group(grps)","3d76aca3":"Vs = nans_groups[450721]\nmake_plots(Vs)\nmake_corr(Vs)","92d56849":"grps = [[169],[170,171,200,201],[174,175],[180],[184,185],[188,189],[194,195,197,198],[208,210],[209]]\nreduce_group(grps)","a6484e72":"Vs = [x for x in nans_groups[460110]]\nmake_corr(Vs)","9c6627bc":"Vs = [x for x in nans_groups[460110] if int(x[1:])<240]\nmake_plots(Vs)\nmake_corr(Vs)","ba239735":"grps = [[217,218,219,231,232,233,236,237],[223],[224,225],[226],[228],[229,230],[235]]\nreduce_group(grps)","1ddfdf06":"Vs = [x for x in nans_groups[460110] if (int(x[1:])>237)&(int(x[1:])<263)]\nmake_plots(Vs)\nmake_corr(Vs)","50daa0fb":"grps = [[240,241],[242,243,244,258],[246,257],[247,248,249,253,254],[252],[260],[261,262]]\nreduce_group(grps)","2f70a81e":"Vs = [x for x in nans_groups[460110] if (int(x[1:])>262)]\nmake_plots(Vs)\nmake_corr(Vs)","cbb9d78e":"grps = [[263,265,264],[266,269],[267,268],[273,274,275],[276,277,278]]\nreduce_group(grps)","36b8bbc9":"Vs = nans_groups[449124]\nmake_plots(Vs)\nmake_corr(Vs)","3db665cd":"grps = [[220],[221,222,227,245,255,256,259],[234],[238,239],[250,251],[270,271,272]]\nreduce_group(grps)","096a89b3":"Vs = [x for x in nans_groups[12]]\nmake_corr(Vs)","8d8063c6":"Vs = [x for x in nans_groups[12] if int(x[1:])<302]\nmake_plots(Vs)\nmake_corr(Vs)","ac07317b":"grps = [[279,280,293,294,295,298,299],[284],[285,287],[286],[290,291,292],[297]]\nreduce_group(grps)","b8c39e78":"Vs = [x for x in nans_groups[12] if int(x[1:])>299]\nmake_plots(Vs)\nmake_corr(Vs)","330a50c3":"grps = [[302,303,304],[305],[306,307,308,316,317,318],[309,311],[310,312],[319,320,321]]\nreduce_group(grps)","376b1b45":"Vs = nans_groups[1269]\nmake_plots(Vs)\nVtitle = 'V281 - V315'\nmake_corr(Vs,Vtitle)","18d1cdc9":"grps = [[281],[282,283],[288,289],[296],[300,301],[313,314,315]]\nreduce_group(grps)","c7cb46ea":"Vs = nans_groups[508189]\nmake_plots(Vs)\nmake_corr(Vs)","643259de":"grps = [[322,323,324,326,327,328,329,330,331,332,333],[325],[334,335,336],[337,338,339]]\nreduce_group(grps)","a80e8cc5":"v =  [1, 3, 4, 6, 8, 11]\nv += [13, 14, 17, 20, 23, 26, 27, 30]\nv += [36, 37, 40, 41, 44, 47, 48]\nv += [54, 56, 59, 62, 65, 67, 68, 70]\nv += [76, 78, 80, 82, 86, 88, 89, 91]\nv += [96, 98, 99, 104]\nv += [107, 108, 111, 115, 117, 120, 121, 123]\nv += [124, 127, 129, 130, 136]\nv += [138, 139, 142, 147, 156, 162]\nv += [165, 160, 166]\nv += [178, 176, 173, 182]\nv += [187, 203, 205, 207, 215]\nv += [169, 171, 175, 180, 185, 188, 198, 210, 209]\nv += [218, 223, 224, 226, 228, 229, 235]\nv += [240, 258, 257, 253, 252, 260, 261]\nv += [264, 266, 267, 274, 277]\nv += [220, 221, 234, 238, 250, 271]\nv += [294, 284, 285, 286, 291, 297]\nv += [303, 305, 307, 309, 310, 320]\nv += [281, 283, 289, 296, 301, 314]\nv += [332, 325, 335, 338]","46d3febe":"print('Reduced set has',len(v),'columns')","f63962ca":"cols = ['TransactionDT'] + ['V'+str(x) for x in v]\ntrain2 = train[cols].sample(frac=0.2)\nplt.figure(figsize=(15,15))\nsns.heatmap(train2[cols].corr(), cmap='RdBu_r', annot=False, center=0.0)\nplt.title('V1-V339 REDUCED',fontsize=14)\nplt.show()","26fd388a":"cols = ['TransactionDT'] + ['V'+str(x) for x in range(1,340)]\ntrain[cols].sample(frac=0.2) ","85b31756":"cols = ['TransactionDT'] + ['V'+str(x) for x in range(1,340)]\ntrain2 = train[cols].sample(frac=0.2) # L\u1ea5y ng\u1eabu nhi\u00ean 20% s\u1ed1 d\u1eef li\u1ec7u\nplt.figure(figsize=(30,30))\nsns.heatmap(train2[cols].corr(), cmap='RdBu_r', annot=False, center=0.0)\nplt.title('V1-V339 ALL',fontsize=14)\nplt.show()","b43a7a1a":"def make_plots2(Vs):\n    col = 4\n    row = len(Vs)\/\/4+1\n    plt.figure(figsize=(20,row*5))\n    for i,v in enumerate(Vs):\n        plt.subplot(row,col,i+1)\n        idx = train[~train[v].isna()].index\n        n = train[v].nunique()\n        x = np.sum(train.loc[idx,v]!=train.loc[idx,v].astype(int))\n        y = np.round(100*np.sum(train[v].isna())\/len(train),2)\n        t = 'int'\n        if x!=0: t = 'float'\n        plt.title(v+' has '+str(n)+' '+t+' and '+str(y)+'% nan')\n        plt.yticks([])\n        h = plt.hist(train.loc[idx,v],bins=100)\n        if len(h[0])>1: plt.ylim((0,np.sort(h[0])[-2]))\n    plt.show()\nmake_plots2(['C'+str(x) for x in range(1,15)])","d6b7be24":"cols = ['TransactionDT'] + ['C'+str(x) for x in range(1,15)]\nplt.figure(figsize=(15,15))\nsns.heatmap(train[cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\nplt.title('C1-C15')\nplt.show()","92022853":"cols = ['TransactionDT'] + ['D'+str(x) for x in range(1,16)]\nplt.figure(figsize=(15,15))\nsns.heatmap(train[cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\nplt.title('D1-D15')\nplt.show()","5d8a31a5":"Ms = ['M'+str(x) for x in range(1,10)]\nmp = {'F':0,'T':1,'M0':0,'M1':1,'M2':2}\nfor c in Ms: train[c] = train[c].map(mp)","77229413":"cols = ['TransactionDT'] + Ms\nplt.figure(figsize=(15,15))\nsns.heatmap(train[cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\nplt.title('M1-M9')\nplt.show()","e93cef05":"train_id = pd.read_csv('..\/input\/ieee-fraud-detection\/train_identity.csv')\ntrain_id = pd.merge(train_id,train[['TransactionID','TransactionDT']],on='TransactionID',how='left')\nids = ['id_0'+str(x) for x in range(1,10)]+['id_'+str(x) for x in range(10,39)]\nfor c in ids: print (c,train_id[c].unique()[:10])","9c433578":"booln = ['id_12','id_15','id_16','id_27','id_28','id_29','id_35','id_36','id_37','id_38']\ncats = ['id_23','id_30','id_31','id_33','id_34']\nmp = {'Unknown':0,'NotFound':1,'Found':2,'New':3,'F':0,'T':1}\nfor c in booln: train_id[c] = train_id[c].map(mp)\nprint(len(booln) + len(cats))","9f43e4a4":"def make_plots2(Vs):\n    col = 4\n    row = len(Vs)\/\/4+1\n    plt.figure(figsize=(20,row*5))\n    for i,v in enumerate(Vs):\n        plt.subplot(row,col,i+1)\n        idx = train_id[~train_id[v].isna()].index\n        n = train_id[v].nunique()\n        x = np.sum(train_id.loc[idx,v]!=train_id.loc[idx,v].astype(int))\n        y = np.round(100*np.sum(train_id[v].isna())\/len(train_id),2)\n        t = 'int'\n        if x!=0: t = 'float'\n        plt.title(v+' has '+str(n)+' '+t+' and '+str(y)+'% nan')\n        plt.yticks([])\n        h = plt.hist(train_id.loc[idx,v],bins=100)\n        if len(h[0])>1: plt.ylim((0,np.sort(h[0])[-2]))\n    plt.show()\nmake_plots2([x for x in ids if x not in cats])","aeaf19ac":"cols = ['TransactionDT'] + [x for x in ids if x not in cats]\nplt.figure(figsize=(15,15))\nsns.heatmap(train_id[cols].corr(), cmap='RdBu_r', annot=True, center=0.0)\nplt.title('ID1-ID38')\nplt.show()","65ea9f9e":"### C\u1ed9t C","8200484b":"## T\u00ecm ki\u1ebfm NAN\nCh\u00fang t\u00f4i s\u1ebd t\u00ecm ki\u1ebfm t\u1ea5t c\u1ea3 c\u00e1c c\u1ed9t c\u1ee7a train_transaction.csv \u0111\u1ec3 x\u00e1c \u0111\u1ecbnh c\u1ed9t n\u00e0o c\u00f3 li\u00ean quan v\u1edbi s\u1ed1 l\u01b0\u1ee3ng NAN hi\u1ec7n c\u00f3. Ch\u00fang t\u00f4i s\u1ebd x\u00e9t \u0111\u1ed9 t\u01b0\u01a1ng quan c\u1ee7a c\u00e1c c\u1ed9t c\u00f9ng l\u1ea1i r\u1ed3i sau \u0111\u00f3 ch\u1ec9 \u0111\u1ec3 l\u1ea1i c\u00e1c c\u1ed9t \u0111ai di\u1ec7n.","d57aae2a":"### C\u1ed9t V sau khi \u0111\u00e3 \u0111\u01b0\u1ee3c gi\u1ea3m\nNgay c\u1ea3 b\u1ed9 gi\u1ea3m n\u00e0y v\u1eabn c\u00f3 nhi\u1ec1u m\u1ed1i t\u01b0\u01a1ng quan n\u1ed9i b\u1ed9. ","8f3936df":"### V281 ~ V315","d7f1fcf2":"### V75 - V94","efe43ee1":"### V35 - V52","70183e85":"#### C\u1ed9t D","09188a0b":"### V167 ~ V216","ec342df1":"### V169 ~ V210","170bf672":"### C\u1ed9t ID","1df1a5c3":"### V322 - V339","fbb79947":"### V220 ~ V272","66e88244":"### T\u1ea5t c\u1ea3 V\nCh\u00fang t\u00f4i nh\u1eadn th\u1ea5y r\u1eb1ng 100 c\u1ed9t V \u0111\u1ea7u ti\u00ean kh\u00f4ng t\u01b0\u01a1ng quan nhi\u1ec1u v\u1edbi 239 c\u1ed9t V cu\u1ed1i c\u00f9ng. Ngo\u00e0i ra, m\u1eb7c d\u00f9 100 c\u1ed9t \u0111\u1ea7u ti\u00ean c\u00f3 6 nh\u00f3m NAN kh\u00e1c nhau nh\u01b0ng c\u00f3 nhi\u1ec1u m\u1ed1i t\u01b0\u01a1ng quan gi\u1eefa c\u00e1c nh\u00f3m. 239 c\u1ed9t sau li\u00ean quan \u0111\u1ebfn nhau.","c713b0ad":"### V217 ~ V278","599cbfcc":"### V143 ~ V166","8229d2df":"# EDA cho C\u1ed9t V v\u00e0 ID\nTrong cu\u1ed9c thi n\u00e0y, ch\u00fang t\u00f4i s\u1ebd \u0111\u1ec3 ph\u00e2n t\u00edch c\u1ed9t V v\u00e0 ID, ch\u00fang t\u00f4i c\u0169ng l\u00e0m r\u00f5 m\u1ed1i t\u01b0\u01a1ng quan gi\u1eefa c\u00e1c c\u1ed9t C, D v\u00e0 M.\n\nC\u00e1c c\u1ed9t V c\u00f3 v\u1ebb d\u01b0 th\u1eeba v\u00e0 t\u01b0\u01a1ng quan. Do \u0111\u00f3, \u0111\u1ed1i v\u1edbi m\u1ed7i kh\u1ed1i V c\u1ed9t c\u00f3 c\u1ea5u tr\u00fac NAN t\u01b0\u01a1ng t\u1ef1, ch\u00fang t\u00f4i c\u00f3 th\u1ec3 t\u00ecm th\u1ea5y c\u00e1c t\u1eadp con trong kh\u1ed1i c\u00f3 t\u01b0\u01a1ng quan v\u1edbi nhau (r> 0,75). Sau \u0111\u00f3, ch\u00fang t\u00f4i c\u00f3 th\u1ec3 thay th\u1ebf to\u00e0n b\u1ed9 kh\u1ed1i b\u1eb1ng m\u1ed9t c\u1ed9t t\u1eeb m\u1ed7i t\u1eadp h\u1ee3p con.\n\nV\u00ed d\u1ee5 trong kh\u1ed1i `V1-V11`, ch\u00fang t\u00f4i th\u1ea5y r\u1eb1ng c\u00e1c t\u1eadp con` [[1], [2,3], [4,5], [6,7], [8,9], [10,11] ] `t\u1ed3n t\u1ea1i v\u00e0 ch\u00fang t\u00f4i c\u00f3 th\u1ec3 ch\u1ecdn` [1, 3, 4, 6, 8, 11] `\u0111\u1ec3 \u0111\u1ea1i di\u1ec7n cho kh\u1ed1i` V1-V11` m\u00e0 kh\u00f4ng l\u00e0m m\u1ea5t nhi\u1ec1u th\u00f4ng tin. Ngo\u00e0i ra, c\u00f3 th\u1ec3 \u00e1p d\u1ee5ng PCA tr\u00ean m\u1ed7i kh\u1ed1i, nh\u01b0ng ph\u01b0\u01a1ng ph\u00e1p gi\u1ea3m t\u1eadp h\u1ee3p con n\u00e0y ch\u00fang t\u00f4i quan s\u00e1t \u0111\u01b0\u1ee3c ho\u1ea1t \u0111\u1ed9ng t\u1ed1t h\u01a1n.\n","7425f9cc":"### V1-V11","bd66d114":"### V138 ~ V163","9a10b044":"### C\u1ed9t M","4b0c3854":"### V12 - V34","52ce99df":"### V95 - V137","d982403e":"### V279 ~ V321"}}