{"cell_type":{"ce8d7e21":"code","601a212a":"code","487a82c7":"code","776e5086":"code","6d678dfc":"code","a8ec5e3d":"code","ee717e2a":"code","d10ea717":"code","50de414c":"code","700b89d3":"code","77b34bfc":"code","51abcafe":"code","98ea22c4":"code","3166fcff":"code","379042d8":"code","2455d70f":"code","5dfdb6b0":"code","e7985099":"code","9bb48bd3":"markdown","814f6f2e":"markdown"},"source":{"ce8d7e21":"# Install helmet-assignment helper code\n!pip install ..\/input\/helmet-assignment-helpers\/helmet-assignment-main\/ > \/dev\/null 2>&1\nfrom helmet_assignment.score import NFLAssignmentScorer, check_submission\nfrom helmet_assignment.features import add_track_features","601a212a":"import pandas as pd\nimport itertools\nimport glob\nimport os\nimport cv2\nfrom sklearn.metrics import accuracy_score\nfrom tqdm.auto import tqdm\nfrom multiprocessing import Pool\nfrom matplotlib import pyplot as plt\nimport numpy as np\nimport random\nfrom sklearn.utils import class_weight\nfrom keras.models import Sequential\nfrom keras.layers import TimeDistributed\nfrom keras.layers import LSTM\nfrom keras.layers import Dense\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten","487a82c7":"BASE_DIR = '..\/input\/nfl-health-and-safety-helmet-assignment'\ntrain_tracking = pd.read_csv(f'{BASE_DIR}\/train_player_tracking.csv')\ntrain_helmets = pd.read_csv(f'{BASE_DIR}\/train_labels.csv')\ntest_tracking = pd.read_csv(f'{BASE_DIR}\/test_player_tracking.csv')\ntest_helmets = pd.read_csv(f'{BASE_DIR}\/test_baseline_helmets.csv')","776e5086":"train_tracking_df = add_track_features(train_tracking)\ntest_tracking_df = add_track_features(test_tracking)","6d678dfc":"def find_nearest(array, value):\n    value = int(value)\n    array = np.asarray(array).astype(int)\n    idx = (np.abs(array - value)).argmin()\n    return array[idx]\n\ndef merge_tracking_data(args):\n    video_frame, df = args\n    gameKey,playID,view,frame = video_frame.split('_')\n    gameKey = int(gameKey)\n    playID = int(playID)\n    frame = int(frame)\n    this_tracking = tracking[(tracking['gameKey']==gameKey) & (tracking['playID']==playID)]\n    est_frame = find_nearest(this_tracking.est_frame.values, frame)\n    this_tracking = this_tracking[this_tracking['est_frame']==est_frame]\n    this_tracking['video_frame'] = video_frame\n    this_tracking['frame'] = frame\n    this_tracking['video_gameKey_playID'] = str(gameKey) +'_'+str(playID)+'_'+str(view)\n    df['frame'] = frame\n    df['video_gameKey_playID'] = str(gameKey) +'_'+str(playID)+'_'+str(view)\n    return this_tracking[['video_frame','video_gameKey_playID','x','y','player','frame']],df","a8ec5e3d":"global tracking \ntracking = train_tracking_df","ee717e2a":"p = Pool(processes=4)\ntracking_list = []\ndf_list = list(train_helmets.groupby('video_frame'))\ntrain_helmets = []\nwith tqdm(total=len(df_list)) as pbar:\n    for (tracking_df,helmets_df) in p.imap(merge_tracking_data, df_list):\n        train_helmets.append(helmets_df)\n        tracking_list.append(tracking_df)\n        pbar.update(1)\np.close()\ntrain_helmets = pd.concat(train_helmets)\ntrain_helmets = train_helmets.reset_index(drop=True)\ntrain_tracking = pd.concat(tracking_list)\ntrain_tracking = train_tracking.reset_index(drop=True)","d10ea717":"train_helmets = train_helmets.sort_values(['video_gameKey_playID','frame']).reset_index(drop=True)\ntrain_tracking = train_tracking.sort_values(['video_gameKey_playID','frame']).reset_index(drop=True)","50de414c":"global tracking \ntracking = test_tracking_df","700b89d3":"p = Pool(processes=4)\ntracking_list = []\ndf_list = list(test_helmets.groupby('video_frame'))\ntest_helmets = []\nwith tqdm(total=len(df_list)) as pbar:\n    for (tracking_df,helemts_df) in p.imap(merge_tracking_data, df_list):\n        test_helmets.append(helemts_df)\n        tracking_list.append(tracking_df)\n        pbar.update(1)\np.close()\ntest_helmets = pd.concat(test_helmets)\ntest_helmets = test_helmets.reset_index(drop=True)\ntest_tracking = pd.concat(tracking_list)\ntest_tracking = test_tracking.reset_index(drop=True)","77b34bfc":"test_helmets = test_helmets.sort_values(['video_gameKey_playID','frame']).reset_index(drop=True)\ntest_tracking = test_tracking.sort_values(['video_gameKey_playID','frame']).reset_index(drop=True)","51abcafe":"training_percentage = 0.7\ntraining_item_count = int(len(train_helmets['video_gameKey_playID'].unique())*training_percentage)\nvalidation_item_count = len(train_helmets['video_gameKey_playID'].unique())-int(len(train_helmets['video_gameKey_playID'].unique())*training_percentage)\ntraining_set = train_helmets['video_gameKey_playID'].unique()[:training_item_count]\nvalidation_set = train_helmets['video_gameKey_playID'].unique()[-validation_item_count:]\ntraining_set = train_helmets[train_helmets['video_gameKey_playID'].isin(training_set)]['video_frame'].unique()\nvalidation_set = train_helmets[train_helmets['video_gameKey_playID'].isin(validation_set)]['video_frame'].unique()","98ea22c4":"batch_size = 32\nimage_size =  60\ninput_shape = (image_size, image_size, 3)\ndropout_rate = 0.4\nclasses_to_predict = sorted(train_helmets.label.unique())\nclass_weights = class_weight.compute_class_weight(\"balanced\", classes_to_predict, train_helmets.label.values)\nclass_weights = dict(enumerate(class_weights))\nn_classes = len(class_weights)","3166fcff":"from keras.layers import Bidirectional\nfrom keras.layers import BatchNormalization\n\nmodel = Sequential()\nmodel.add(TimeDistributed(Conv2D(10, (2,2), activation= 'relu'),input_shape=(None,image_size,image_size,3)))\nmodel.add(TimeDistributed(MaxPooling2D(pool_size=(2, 2))))\nmodel.add(TimeDistributed(Conv2D(20, (2,2), activation= 'relu')))\nmodel.add(TimeDistributed(Conv2D(20, (1,1), activation= 'relu')))\nmodel.add(TimeDistributed(Conv2D(20, (1,1), activation= 'relu')))\nmodel.add(TimeDistributed(Flatten()))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50,return_sequences=True))\nmodel.add(LSTM(50,return_sequences=False))\nmodel.add(Dense(n_classes, activation= 'softmax'))\nmodel.compile(loss=\"categorical_crossentropy\" , optimizer= 'adam' , metrics=['acc'])\nmodel.summary()","379042d8":"output_mapping_dict = {x: n for n,x in enumerate(train_helmets.label.unique())}","2455d70f":"global gameKey_playID_frame,helmets_data,tracking_data,time_steps,image_size,chosen_player,output_mapping,train\ndef data_preprocessing(args):\n    _ ,video_frames = args\n    video_frames = video_frames.values[0]\n    images_batch = []\n    labels = []\n    for video_frame in video_frames:\n        frame_number =  helmets_data[helmets_data.video_frame == str(video_frame)]['frame'].iloc[0] - 1 #frame number form zero\n        frame_helmets = helmets_data[helmets_data.video_frame == str(video_frame)].reset_index(drop=True)\n        frame_tracking = tracking_data[tracking_data['video_frame']==video_frame].reset_index(drop=True) \n        range_of_gameKey_playID = helmets_data[helmets_data.video_gameKey_playID == str(frame_helmets.video_gameKey_playID.iloc[0])]['video_frame'].unique()\n        start_gameKey_playID_frame = 0 # number of first frame in gameKey_playID\n        end_gameKey_playID_frame = len(range_of_gameKey_playID) - 1 # number of last frame in gameKey_playID\n        if (time_steps * 60 + frame_number) > end_gameKey_playID_frame:\n            diff = (time_steps * 60 + frame_number) - end_gameKey_playID_frame\n            start = frame_number - diff\n            end = end_gameKey_playID_frame\n        else:\n            start = frame_number\n            end = time_steps * 60 + frame_number\n            \n        frame_helmets_images = [] \n        image = np.zeros((image_size,image_size))\n        original_width = 1280\n        original_height = 720\n        x_max = 120\n        y_max = 53.3\n        frame_images = []\n        new_width = np.floor((image_size-1) * (frame_helmets['left'].values + frame_helmets['width'].values \/ 2) \/ original_width)\n        new_height = np.floor((image_size-1) * (frame_helmets['top'].values + frame_helmets['height'].values \/ 2) \/ original_height)\n        new_width = np.where(new_width > (image_size-1) , (image_size-1) , new_width)\n        new_height = np.where(new_height > (image_size-1) , (image_size-1) , new_height)\n        frame_helmets_locations = np.concatenate((new_width.reshape(-1,1),new_height.reshape(-1,1)), axis=1)\n        if chosen_player >= len(frame_helmets_locations):\n            chosen_player_number = random.choice(range(frame_helmets['left'].values.shape[0]))\n            chosen_player_location = frame_helmets_locations[chosen_player_number]\n        else:\n            chosen_player_number = chosen_player\n            chosen_player_location = frame_helmets_locations[chosen_player]\n        image[chosen_player_location.astype(int)] = 1\n        frame_images.append(image)\n        image[(new_width.astype(int),new_height.astype(int))] = 1\n        frame_images.append(image)\n        frame_tracking_players = frame_tracking\n        new_x = np.floor((image_size-1) * (frame_tracking_players['x'].values) \/ x_max)\n        new_y = np.floor((image_size-1) * (frame_tracking_players['y'].values) \/ y_max)\n        new_x = np.where(new_x > (image_size-1) , (image_size-1) , new_x)\n        new_y = np.where(new_y > (image_size-1) , (image_size-1) , new_y)\n        new_y = new_y * -1\n        tracking_labels = [output_mapping[x] for x in frame_tracking_players.player.values]\n        image[(new_x.astype(int),new_y.astype(int))] = tracking_labels\n        frame_images.append(image) \n        time_steps_data = []\n    #    time_steps_data.append(np.array(images).reshape(image_size,image_size,3))\n        tracking_step_image = np.zeros((image_size,image_size))\n        helmets_step_image = np.zeros((image_size,image_size))\n        for step in range(time_steps):\n            images = []\n            image = np.zeros((image_size,image_size))\n            image[chosen_player_location.astype(int)] = 1\n            images.append(image)\n            frame_helmets_time_steps = helmets_data[helmets_data.video_frame == range_of_gameKey_playID[start+(step)*60]]\n            new_width = np.floor((image_size-1) * (frame_helmets_time_steps['left'].values + frame_helmets_time_steps['width'].values \/ 2) \/ original_width) \n            new_height = np.floor((image_size-1) * (frame_helmets_time_steps['top'].values + frame_helmets_time_steps['height'].values \/ 2) \/ original_height) \n            new_width = np.where(new_width > (image_size-1) , (image_size-1) , new_width)\n            new_height = np.where(new_height > (image_size-1) , (image_size-1) , new_height)\n            helmets_step_image[(new_width.astype(int),new_height.astype(int))] = 1\n            images.append(helmets_step_image)\n            frame_tracking_time_steps = tracking_data[tracking_data.video_frame == range_of_gameKey_playID[start+(step)*60]]\n            new_x = np.floor((image_size-1) * (frame_tracking_time_steps['x'].values) \/ x_max)\n            new_y = np.floor((image_size-1) * (frame_tracking_time_steps['y'].values) \/ y_max)\n            new_x = np.where(new_x > (image_size-1) , (image_size-1) , new_x)\n            new_y = np.where(new_y > (image_size-1) , (image_size-1) , new_y)\n            new_y = new_y * -1\n            tracking_labels = [output_mapping[x] for x in frame_tracking_time_steps.player.values]\n            tracking_step_image[(new_x.astype(int),new_y.astype(int))] = tracking_labels \n            images.append(tracking_step_image)\n            time_steps_data.append(np.array(images).reshape(image_size,image_size,3))\n            \n        images_batch.append(time_steps_data)\n        if train == True:    \n            label = np.zeros((196,))\n            label[output_mapping[frame_helmets['label'].values[chosen_player_number]]] = 1\n            labels.append(label)\n\n    if train == True:\n        del images,tracking_labels,time_steps_data,frame_tracking_time_steps,label,frame_helmets_time_steps,tracking_step_image,new_x,new_y,new_width,new_height\n        return np.array(images_batch),np.array(labels)\n    else:\n        del images,tracking_labels,time_steps_data,frame_tracking_time_steps,frame_helmets_time_steps,tracking_step_image,new_x,new_y,new_width,new_height\n        return np.array(images_batch)","5dfdb6b0":"gameKey_playID_frame,helmets_data,tracking_data,time_steps,image_size,chosen_player,output_mapping,train = training_set,train_helmets,train_tracking,6,60,1,output_mapping_dict,True\nbatch_size = 32\nepochs = 25\np = Pool(processes=4)\nchosen_player = 0\nfor epoch in range(epochs):\n    if chosen_player > 22:\n        chosen_player = 0\n    training_frames = [i for n,i in enumerate(training_set)  if n % (random.choice(range(60))+1) == 0]\n    random.shuffle(training_frames)\n    for i in range(10):\n        batch = []\n        labels = []\n        video_frames = training_frames[i*batch_size:i*batch_size+batch_size]\n        video_frames_df = pd.DataFrame(video_frames,columns=['video_frames'])\n        list_video_frames_df = video_frames_df.groupby(video_frames)\n        for (sample,label) in p.imap(data_preprocessing, list_video_frames_df):        \n            batch.append(sample[0])\n            labels.append(label[0])\n        batch = np.array(batch)\n        labels = np.array(labels).reshape((-1,196))\n        model.fit(batch,labels,batch_size=batch_size,class_weight = class_weights)\n    chosen_player = chosen_player + 1\n    print(f'epoch = {epoch}')","e7985099":"model.save_weights('.\/model.hdf5')","9bb48bd3":"# loading data","814f6f2e":"# creating cnn lstm network"}}