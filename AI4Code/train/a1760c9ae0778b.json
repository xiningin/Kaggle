{"cell_type":{"4505bcda":"code","fe625ab4":"code","16c05625":"code","6d5f9dde":"code","b7ee682e":"code","5e69cacd":"code","e7fc5ec9":"code","65b0b999":"code","bee63c05":"code","84a67143":"code","670cbf2d":"code","d58fcd38":"code","a08fb4c7":"code","37a57bee":"code","2c88883d":"code","2f147199":"code","0473d53d":"code","b0f08b59":"code","6316902d":"code","5d36edb3":"code","5ab1c789":"code","fdd40413":"code","d938560b":"markdown","15dc791c":"markdown","98fb7720":"markdown","75dc4c35":"markdown","4344aba4":"markdown","2e28806e":"markdown","7344432e":"markdown","4b750fd9":"markdown","cc877603":"markdown","410831aa":"markdown","6b441b15":"markdown","d60b199f":"markdown","8c3975c0":"markdown"},"source":{"4505bcda":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nplt.style.use('dark_background')\nimport seaborn as sns","fe625ab4":"df = pd.read_csv('..\/input\/nasa-asteroids-classification\/nasa.csv')\ndf.head()","16c05625":"df.shape","6d5f9dde":"df.info()","b7ee682e":"df = df.drop(['Neo Reference ID', 'Name', 'Orbit ID', 'Close Approach Date',\n                        'Epoch Date Close Approach', 'Orbit Determination Date'] , axis = 1)\ndf.head()","5e69cacd":"hazardous_labels = pd.get_dummies(df['Hazardous'])\nhazardous_labels","e7fc5ec9":"df = pd.concat([df, hazardous_labels], axis = 1)\ndf.head()","65b0b999":"df = df.drop(['Hazardous'], axis = 1)\ndf.head()","bee63c05":"df.info()","84a67143":"df['Orbiting Body'].value_counts()","670cbf2d":"df['Equinox'].value_counts()","d58fcd38":"df = df.drop(['Orbiting Body', 'Equinox'], axis = 1)","a08fb4c7":"plt.figure(figsize = (20,20))\nsns.heatmap(df.corr(),annot = True)","37a57bee":"df = df.drop(['Est Dia in KM(max)', 'Est Dia in M(min)', 'Est Dia in M(max)', 'Est Dia in Miles(min)'\n             ,'Est Dia in Miles(max)', 'Est Dia in Feet(min)', 'Est Dia in Feet(max)', \n             'Relative Velocity km per hr', 'Miles per hour', 'Miss Dist.(lunar)', \n             'Miss Dist.(kilometers)', 'Miss Dist.(miles)'], axis = 1)\ndf.head()","2c88883d":"plt.figure(figsize = (20,20))\nsns.heatmap(df.corr(),annot = True)","2f147199":"df.drop([False], axis = 1, inplace = True)","0473d53d":"df.head()","b0f08b59":"df.describe()","6316902d":"x = df.drop([True], axis = 1)\ny = df[True].astype(int)","5d36edb3":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, random_state = 0 , test_size = 0.3)","5ab1c789":"from xgboost import XGBClassifier\nfrom matplotlib import pyplot\nfrom xgboost import plot_importance\n\nxbg_model = XGBClassifier()\nxbg_model.fit(x_train, y_train)\nplot_importance(xbg_model)\npyplot.show()","fdd40413":"from sklearn.metrics import accuracy_score\n\npredictions = xbg_model.predict(x_test)\nacc = accuracy_score(y_test, predictions)\nprint(str(np.round(acc*100, 2))+'%')","d938560b":"## Heatmap of Correlation","15dc791c":"## Observing Unique Values in Orbiting Body and Equinox","98fb7720":"## Drop the False Column, True is enough for classification","75dc4c35":"## Dropping the columns which are not useful in classification","4344aba4":"## Final Heatmap","2e28806e":"## Many Columns are there which are having correlation 1 because they are identical columns with a different unit. So, can be dropped.","7344432e":"## Reading CSV Data","4b750fd9":"## One Hot Encoding of Hazardous Column","cc877603":"## Only single unique value, so both can be dropped","410831aa":"### Final Accuracy Score","6b441b15":"## Import Statements","d60b199f":"## Model Building","8c3975c0":"## XGBoost Classifier\n\n### XGBoost is a decision-tree-based ensemble Machine Learning algorithm that uses a gradient boosting framework. In prediction problems involving unstructured data (images, text, etc.) ... A wide range of applications: Can be used to solve regression, classification, ranking, and user-defined prediction problems.\n\n### The XGBoost library provides a built-in function to plot features ordered by their importance."}}