{"cell_type":{"f5c14f37":"code","2c6971b9":"code","851c3663":"code","752518c9":"code","f0a102c6":"code","3d9d717f":"code","6d300398":"code","7face0d7":"code","7fc57df7":"code","6aa1137d":"code","a0b39805":"code","5b1cab91":"code","226630cf":"code","6271e3b4":"code","68646131":"code","71a31854":"code","82db1d62":"code","68729578":"code","4e040e7b":"code","966d6466":"code","537c2cb1":"code","9cdf802e":"code","cae88e7d":"code","9c2200c1":"code","4911c48f":"code","a8eb774e":"code","02662a1f":"code","d71bd58f":"code","7be910cf":"code","af05903c":"code","fc865b76":"code","c429ffd8":"code","a97c98c1":"code","0e7e772f":"code","670056dc":"code","bbbd2a94":"code","6b62e881":"code","42edc0ec":"code","f0d1869c":"code","9531176f":"code","c9a58374":"code","cf724633":"markdown","6f4e1b9a":"markdown","1feb062f":"markdown","ed31cfc6":"markdown","b39d88ec":"markdown","7f3a067f":"markdown","ff42d326":"markdown"},"source":{"f5c14f37":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","2c6971b9":"# Get the melbourne housing data into DataFrame\ndf = pd.read_csv('\/kaggle\/input\/melbourne-housing-market\/Melbourne_housing_FULL.csv')","851c3663":"# Show first five rows of the data\ndf.head()","752518c9":"# View the datatypes of columns and how many entries in the DataFrame\ndf.info()\n# View stats of the DataFrame\ndf.describe()","f0a102c6":"# View the correlation between columns in data\n# In summary, bedrooms column has higher correlation with rooms followed by bathrooms, postcode and price\nplt.figure(figsize=(30,20))\nsns.heatmap(df.corr(),annot=True,cmap='coolwarm')","3d9d717f":"# Check for any missing values based on data's columns\ndf.isnull().sum()","6d300398":"# Create function to fill in missing price\ndef impute_price(cols):\n    Price = cols[0]\n    Rooms = cols[1]\n    \n    if pd.isnull(Price):\n        if Rooms == 1:\n            return 432889\n        elif Rooms == 2:\n            return 759484\n        elif Rooms == 3:\n            return 1028500\n        elif Rooms == 4:\n            return 1369597\n        elif Rooms == 5:\n            return 1818862\n        elif Rooms == 6:\n            return 1882613\n        elif Rooms == 7:\n            return 1791675\n        elif Rooms == 8:\n            return 1716858\n        elif Rooms == 9:\n            return 1380000\n        elif Rooms == 10:\n            return 2018000\n        elif Rooms == 12:\n            return 2705000\n        elif Rooms == 16:\n            return 5000000\n        else:\n            return 1050173\n    else:\n        return Price\n\n# Create function to fill in missing number of bedrooms\ndef impute_bedrooms(cols):\n    Bedrooms = cols[0]\n    Rooms = cols[1]\n    \n    if pd.isnull(Bedrooms):\n        if Rooms == 1:\n            return 1\n        elif Rooms == 2:\n            return 2\n        elif Rooms == 3:\n            return 3\n        elif Rooms == 4:\n            return 4\n        elif Rooms == 5:\n            return 5\n        elif Rooms == 6:\n            return 6\n        elif Rooms == 7:\n            return 7\n        elif Rooms == 8:\n            return 8\n        elif Rooms == 9:\n            return 5\n        elif Rooms == 10:\n            return 10\n        elif Rooms == 12:\n            return 12\n        elif Rooms == 16:\n            return 16\n        else:\n            return 3\n    else:\n        return Bedrooms","7face0d7":"# Create function to fill in missing number of bathrooms\ndef impute_bathrooms(cols):\n    Bathrooms = cols[0]\n    Rooms = cols[1]\n    \n    if pd.isnull(Bathrooms):\n        if (Rooms == 1) or (Rooms == 2) or (Rooms == 9):\n            return 1\n        elif (Rooms == 3) or (Rooms == 4):\n            return 2\n        elif (Rooms == 5) or (Rooms == 6):\n            return 3\n        elif (Rooms == 7) or (Rooms == 8):\n            return 4\n        elif (Rooms == 10) or (Rooms == 12):\n            return 5\n        elif Rooms == 16:\n            return 8\n        else:\n            return 2\n    else:\n        return Bathrooms\n\n# Create function to fill in missing number of cars\ndef impute_cars(cols):\n    Cars = cols[0]\n    Rooms = cols[1]\n    \n    if pd.isnull(Cars):\n        if (Rooms == 1) or (Rooms == 2):\n            return 1\n        elif (Rooms == 3) or (Rooms == 4) or (Rooms == 10):\n            return 2\n        elif (Rooms == 5) or (Rooms == 6) or (Rooms == 12):\n            return 3\n        elif (Rooms == 7) or (Rooms == 8):\n            return 4\n        elif Rooms == 9:\n            return 5\n        elif Rooms == 16:\n            return 7\n        else:\n            return 2\n    else:\n        return Cars","7fc57df7":"# Create function to fill in missing building year\ndef impute_buildyear(cols):\n    BuildingYear = cols[0]\n    Rooms = cols[1]\n    \n    if pd.isnull(BuildingYear):\n        if (Rooms == 1) or (Rooms == 2) or (Rooms == 3) or (Rooms == 4) or (Rooms == 12):\n            return 1998\n        elif (Rooms == 5) or (Rooms == 6) or (Rooms == 7) or (Rooms == 8):\n            return 1999\n        elif Rooms == 10:\n            return 2001\n        else:\n            return 1965\n    else:\n        return BuildingYear\n\n# Create functions to fill in missing lattitude and longtitude\ndef impute_lat(cols):\n    Lat = cols[0]\n    Rooms = cols[1]\n    \n    if pd.isnull(Lat):\n        if Rooms == 1:\n            return -37.8241074742268\n        elif Rooms == 2:\n            return -37.81409220146649\n        elif Rooms == 3:\n            return -37.80593652024464\n        elif Rooms == 4:\n            return -37.8120700978892\n        elif Rooms == 5:\n            return -37.82064511832322\n        elif Rooms == 6:\n            return -37.80909949720672\n        elif Rooms == 7:\n            return -37.79428833333334\n        elif Rooms == 8:\n            return -37.79720117647059\n        elif Rooms == 9:\n            return -37.84154\n        elif Rooms == 10:\n            return -37.804758\n        elif Rooms == 12:\n            return -37.759299999999996\n        elif Rooms == 16:\n            return -37.81405\n        else:\n            return -37.810634295599094\n    else:\n        return Lat\n    \ndef impute_lng(cols):\n    Lng = cols[0]\n    Rooms = cols[1]\n    \n    if pd.isnull(Lng):\n        if Rooms == 1:\n            return 144.98565814432982\n        elif Rooms == 2:\n            return 144.99202074022355\n        elif Rooms == 3:\n            return 144.99451968731563\n        elif Rooms == 4:\n            return 145.01660855919306\n        elif Rooms == 5:\n            return 145.03943298174434\n        elif Rooms == 6:\n            return 145.0303535195531\n        elif Rooms == 7:\n            return 145.04834833333334\n        elif Rooms == 8:\n            return 145.04010470588236\n        elif Rooms == 9:\n            return 145.04432333333332\n        elif Rooms == 10:\n            return 145.06637800000001\n        elif Rooms == 12:\n            return 144.80714999999998\n        elif Rooms == 16:\n            return 145.19891\n        else:\n            return 145.00185113165475\n    else:\n        return Lng","6aa1137d":"# The followings apply the functions defined at the top where all columns will be filled in with the correct value\ndf['Price'] = df[['Price','Rooms']].apply(impute_price,axis=1)\n\ndf['Bedroom2'] = df[['Bedroom2','Rooms']].apply(impute_bedrooms,axis=1)\ndf['Bathroom'] = df[['Bathroom','Rooms']].apply(impute_bathrooms,axis=1)\n\ndf['Car'] = df[['Car','Rooms']].apply(impute_cars,axis=1)\ndf['YearBuilt'] = df[['YearBuilt','Rooms']].apply(impute_buildyear,axis=1)\n\ndf['Lattitude'] = df[['Lattitude','Rooms']].apply(impute_lat,axis=1)\ndf['Longtitude'] = df[['Longtitude','Rooms']].apply(impute_lng,axis=1)","a0b39805":"# If you do a box plot for these columns - Landsize and Building Area, you will notice that they have\n# no unique mean value to allow some filling in on missing values. Hence, I decide to drop them and\n# use the ones we have on the previous cell instead\ndf.drop(['Landsize','BuildingArea'],axis=1,inplace=True)","5b1cab91":"# Based on df.isnull().sum(), we can see that Distance, Postcode, CouncilArea, Regionname and Propertycount columns are missing at least two values\n# We can go ahead and drop the rows with those empty values because they don't affect the dataset (we have estimated 27,000 entries)\ndf.dropna(inplace=True)","226630cf":"# Check for any missing values based on data's columns\ndf.isnull().sum()","6271e3b4":"# This will be the finalised DataFrame for the machine learning\ndf","68646131":"# Importing required modules for machine learning\nfrom sklearn.metrics import mean_squared_error,mean_absolute_error,explained_variance_score,confusion_matrix,classification_report\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier","71a31854":"# Converting building type and sales method columns from finalised DataFrame to dummy categorical variables for machine learning\nbuilding_type = pd.get_dummies(df['Type'],drop_first=True)\nmethod = pd.get_dummies(df['Method'],drop_first=True)\n\n# Concatenate building_type and method variables to the DataFrame df\ndf = pd.concat([df,building_type,method],axis=1)\n\n# Drop the building type and sales method columns from DataFrame as we will use the dummy categorical variables\ndf.drop(['Type','Method'],axis=1,inplace=True)","82db1d62":"# Show first five rows of entries\ndf.head()","68729578":"# Dropping any columns that are not integer or float datatype\ndf.drop(['Address','SellerG','Suburb','Date','CouncilArea','Regionname'],axis=1,inplace=True)","4e040e7b":"# Preview first five rows of entries\n# This will be the finalised DataFrame to be use for splitting dataset and training model for predictions\ndf.head()","966d6466":"# Interested in testing model for predictions of no. of rooms\n\n# Dropping the rooms column from X\nX = df.drop('Rooms',axis=1)\n\n# Holding rooms column in y variable\ny = df['Rooms']","537c2cb1":"# Splitting datset into test and train\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","9cdf802e":"# Using RandomForestClassifier for example where a RandomForestClassifier model is created\nforest = RandomForestClassifier(n_estimators=200)\n\n# Fitting the model with the training dataset\nforest.fit(X_train,y_train)","cae88e7d":"# Go on and let model predict using X_test\npredictions = forest.predict(X_test)","9c2200c1":"# Print out confusion matrix for the model after testing\nprint(confusion_matrix(y_test,predictions))","4911c48f":"# Print out classification report for the model after testing\nprint(classification_report(y_test,predictions))","a8eb774e":"# Print out mean squared error, mean absolute error and explained variance score\nprint('Random Forest Model Stat')\nprint('Mean Squared Error (MSE): \\n' + str(np.sqrt(mean_squared_error(y_test,predictions))) + '\\n')\nprint('Mean Absolute Error (MAE): \\n' + str(mean_absolute_error(y_test,predictions)) + '\\n')\nprint('Explained Variance Score: \\n' + str(explained_variance_score(y_test,predictions)) + '\\n')","02662a1f":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import AdaBoostRegressor","d71bd58f":"tree = DecisionTreeRegressor()\ntree.fit(X_train,y_train)","7be910cf":"predictions = tree.predict(X_test)","af05903c":"print(confusion_matrix(y_test,predictions))","fc865b76":"print(classification_report(y_test,predictions))","c429ffd8":"print('Decision Tree Regression Model Stat')\nprint('Mean Squared Error (MSE): \\n' + str(np.sqrt(mean_squared_error(y_test,predictions))) + '\\n')\nprint('Mean Absolute Error (MAE): \\n' + str(mean_absolute_error(y_test,predictions)) + '\\n')\nprint('Explained Variance Score: \\n' + str(explained_variance_score(y_test,predictions)) + '\\n')","a97c98c1":"tree = AdaBoostRegressor(DecisionTreeRegressor(),n_estimators=200)\ntree.fit(X_train,y_train)","0e7e772f":"predictions = tree.predict(X_test)","670056dc":"print(confusion_matrix(y_test,predictions))","bbbd2a94":"print(classification_report(y_test,predictions))","6b62e881":"print('Decision Tree Regression with Ada Boost Model Stat')\nprint('Mean Squared Error (MSE): \\n' + str(np.sqrt(mean_squared_error(y_test,predictions))) + '\\n')\nprint('Mean Absolute Error (MAE): \\n' + str(mean_absolute_error(y_test,predictions)) + '\\n')\nprint('Explained Variance Score: \\n' + str(explained_variance_score(y_test,predictions)) + '\\n')","42edc0ec":"from sklearn.ensemble import GradientBoostingRegressor","f0d1869c":"grad_model = GradientBoostingRegressor(n_estimators=200)\ngrad_model.fit(X_train,y_train)","9531176f":"predictions = grad_model.predict(X_test)","c9a58374":"print('Gradient Boosting Stat')\nprint('Mean Squared Error (MSE): \\n' + str(np.sqrt(mean_squared_error(y_test,predictions))) + '\\n')\nprint('Mean Absolute Error (MAE): \\n' + str(mean_absolute_error(y_test,predictions)) + '\\n')\nprint('Explained Variance Score: \\n' + str(explained_variance_score(y_test,predictions)) + '\\n')","cf724633":"# **Data Analysis and Cleansing**","6f4e1b9a":"# **Machine Learning: Random Forest**","1feb062f":"Below are some other machine learning models that I built for comparison to Random Forest.","ed31cfc6":"# **Machine Learning: Decision Tree Regression**","b39d88ec":"# **Machine Learning: Gradient Boosting**","7f3a067f":"# **Machine Learning**","ff42d326":"# **Machine Learning: Decision Tree Regression with Ada Boost**"}}