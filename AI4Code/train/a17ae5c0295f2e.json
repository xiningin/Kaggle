{"cell_type":{"96ba225c":"code","896c951f":"code","0661c601":"code","3a2043c8":"code","79290483":"code","70858b39":"code","80d2154f":"code","223c4916":"code","ff977bb9":"code","2c482f95":"code","ee4017b4":"code","b8d6dd1e":"code","7fa16c7f":"code","9ed95811":"code","7339c2c1":"code","e7fd52ec":"code","145d9c55":"code","823f2910":"code","d6a97401":"code","517ae3b6":"code","8bb46a59":"code","eae38b27":"code","8d6b40a7":"code","1b3e59c4":"code","19af7686":"code","d2be1ef1":"code","7211626d":"code","b99171b2":"code","0bb9ed52":"code","ea313eff":"code","545d4550":"code","dbb21df8":"markdown","995d52ac":"markdown","557cf80f":"markdown","36394111":"markdown","4b876236":"markdown","e819329e":"markdown","c0297bb0":"markdown","ae991f1f":"markdown","2c54f795":"markdown","5658ad72":"markdown","7ba4b9e8":"markdown","12b2204a":"markdown","eda4b32c":"markdown"},"source":{"96ba225c":"import plotly\nimport numpy as np\nimport pandas as pd\nimport plotly.graph_objs as go\nimport plotly.figure_factory as ff\n\n# command for work offline\nplotly.offline.init_notebook_mode(connected=True)","896c951f":"# generate list of numbers\nx_list = np.linspace(0.1, 10, 100)\ny_list = np.linspace(10, 0.1, 100)","0661c601":"x_list, y_list","3a2043c8":"plotly.offline.iplot({\n    \"data\": [go.Scatter(x = x_list, y = y_list)],\n    \"layout\": go.Layout(title=\"Basic Line Plot\")\n})","79290483":"trace1 = go.Scatter(\n    x = np.linspace(1, 20, 20),\n    y = np.linspace(1.1, 10, 20),\n    name = \"Line One\"\n)\n\ntrace2 = go.Scatter(\n    x = np.linspace(3, 18, 20),\n    y = np.linspace(1.3, 10, 20),\n    name = \"Line Two\"\n)\n\ntrace3 = go.Scatter(\n    x = np.linspace(6, 15, 20),\n    y = np.linspace(1.4, 10, 20),\n    name = \"Line Three\"\n)\n\ndata = [trace1, trace2, trace3]\n\nplotly.offline.iplot(data)","70858b39":"heart_df = pd.read_csv(\"..\/input\/heart-disease-uci\/heart.csv\")","80d2154f":"heart_df.cp.unique()","223c4916":"len(heart_df[(heart_df[\"cp\"] == 0) & (heart_df[\"target\"]==0)])","ff977bb9":"x = ['Chest pain type 0', 'Chest pain type 1', 'Chest pain type 2', 'Chest pain type 3']\ny = [len(heart_df[(heart_df[\"cp\"] == 0) & (heart_df[\"target\"]==0)]), \n      len(heart_df[(heart_df[\"cp\"] == 1) & (heart_df[\"target\"]==0)]),\n      len(heart_df[(heart_df[\"cp\"] == 2) & (heart_df[\"target\"]==0)]),\n      len(heart_df[(heart_df[\"cp\"] == 3) & (heart_df[\"target\"]==0)])]\n\ny2 = [len(heart_df[(heart_df[\"cp\"] == 0) & (heart_df[\"target\"]==1)]), \n      len(heart_df[(heart_df[\"cp\"] == 1) & (heart_df[\"target\"]==1)]),\n      len(heart_df[(heart_df[\"cp\"] == 2) & (heart_df[\"target\"]==1)]),\n      len(heart_df[(heart_df[\"cp\"] == 3) & (heart_df[\"target\"]==1)])]\n\ntrace1 = go.Bar(\n    x=x,\n    y=y,\n    text=y,\n    textposition = 'auto',\n    name='target 0',\n    marker=dict(\n        color='rgba(255, 135, 141,0.7)',\n        line=dict(\n            color='rgba(255, 135, 141,1)',\n            width=1.5),\n        ),\n    opacity=1\n)\n\ntrace2 = go.Bar(\n    x=x,\n    y=y2,\n    text=y2,\n    textposition = 'auto',\n    name='target 1',\n    marker=dict(\n        color='rgba(50, 171, 96, 0.7)',\n        line=dict(\n            color='rgba(50, 171, 96, 1.0)',\n            width=1.5),\n        ),\n    opacity=1\n)\n\ndata = [trace1,trace2]\n\nplotly.offline.iplot(data, filename='bar-chart')","2c482f95":"labels = ['Chest Pain Type 0','Chest Pain Type 1','Chest Pain Type 2','Chest Pain Type 3']\nvalues = [\n      len(heart_df[(heart_df[\"cp\"] == 0)]), \n      len(heart_df[(heart_df[\"cp\"] == 1)]),\n      len(heart_df[(heart_df[\"cp\"] == 2)]),\n      len(heart_df[(heart_df[\"cp\"] == 3)])\n]\ncolors = ['#FEBFBB', '#E13966', '#96D388', '#D0F9BB']\n\ntrace = go.Pie(labels=labels, values=values,\n               hoverinfo='label+percent', textinfo='value', \n               textfont=dict(size=20),\n               marker=dict(colors=colors, \n                           line=dict(color='#000000', width=2)))\n\nplotly.offline.iplot([trace], filename='styled_pie_chart')","ee4017b4":"fig = {\n  \"data\": [\n    {\n      \"values\":  [len(heart_df[(heart_df[\"cp\"] == 0) & (heart_df[\"target\"]==0)]), \n                  len(heart_df[(heart_df[\"cp\"] == 1) & (heart_df[\"target\"]==0)]),\n                  len(heart_df[(heart_df[\"cp\"] == 2) & (heart_df[\"target\"]==0)]),\n                  len(heart_df[(heart_df[\"cp\"] == 3) & (heart_df[\"target\"]==0)])],\n      \"labels\" : ['Chest Pain Type 0','Chest Pain Type 1','Chest Pain Type 2','Chest Pain Type 3'],\n      \"marker\": {'colors': ['rgba(127, 177, 38, 0.6)',\n                            'rgba(152, 205, 36, 0.6)',\n                            'rgba(79, 99,  37, 0.6)',\n                            'rgb(100, 119,  69)',\n                            ]},\n      \"domain\": {\"x\": [0, .48]},\n      \"name\": \"target 0\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    },\n    {\n      \"values\":  [len(heart_df[(heart_df[\"cp\"] == 0) & (heart_df[\"target\"]==1)]), \n                  len(heart_df[(heart_df[\"cp\"] == 1) & (heart_df[\"target\"]==1)]),\n                  len(heart_df[(heart_df[\"cp\"] == 2) & (heart_df[\"target\"]==1)]),\n                  len(heart_df[(heart_df[\"cp\"] == 3) & (heart_df[\"target\"]==1)])],\n      \"labels\" : ['Chest Pain Type 0','Chest Pain Type 1','Chest Pain Type 2','Chest Pain Type 3'],\n      \"marker\": {'colors': ['rgba(255, 135, 141, 0.6)',\n                            'rgba(239, 91, 98, 0.9)',\n                            'rgba(255, 38, 63, 1)',\n                            'rgba(242, 94, 111,0.7)',\n                            ]},\n      \"text\":[\"target 1\"],\n      \"textposition\":\"inside\",\n      \"domain\": {\"x\": [.52, 1]},\n      \"name\": \"target 1\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .4,\n      \"type\": \"pie\"\n    }],\n  \"layout\": {\n        \"title\":\"Patients Chest Pain Type\",\n        \"annotations\": [\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"target 0\",\n                \"x\": 0.20,\n                \"y\": 0.5\n            },\n            {\n                \"font\": {\n                    \"size\": 20\n                },\n                \"showarrow\": False,\n                \"text\": \"target 1\",\n                \"x\": 0.8,\n                \"y\": 0.5\n            }\n        ]\n    }\n}\n\nplotly.offline.iplot(fig, filename='donut')","b8d6dd1e":"x1 = heart_df[\"age\"].values\nx2 = heart_df[\"trestbps\"].values\nx3 = heart_df.thalach.values\n\nhist_data = [x1, x2, x3]\n\ngroup_labels = ['age', 'trestbps', 'thalach']\ncolors = ['#A56CC1', '#A6ACEC', '#63F5EF']\n\nfig = ff.create_distplot(hist_data, group_labels, colors=colors, bin_size=.2, show_rug=False)\n\nfig['layout'].update(title='Hist and Curve Plot')\n\nplotly.offline.iplot(fig, filename='Hist and Curve')","7fa16c7f":"data = []\n\nfor i in range(0,len(pd.unique(heart_df['cp']))):\n    trace = {\n            \"type\": 'violin',\n            \"x\": heart_df['cp'][heart_df['cp'] == pd.unique(heart_df['cp'])[i]],\n            \"y\": heart_df['age'][heart_df['cp'] == pd.unique(heart_df['cp'])[i]],\n            \"name\": pd.unique(heart_df['cp'])[i],\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            }\n        }\n    data.append(trace)\n\nfig = {\n    \"data\": data,\n    \"layout\" : {\n        \"title\": \"Chest Pain Type\",\n        \"yaxis\": {\n            \"zeroline\": False,\n        }\n    }\n}\n\nplotly.offline.iplot(fig, filename='violin\/multiple', validate = False)","9ed95811":"fig = {\n    \"data\": [\n        {\n            \"type\": 'violin',\n            \"x\": heart_df['cp'][heart_df['target'] == 0 ],\n            \"y\": heart_df['age'][heart_df['target'] == 0 ],\n            \"legendgroup\": '0',\n            \"scalegroup\": '0',\n            \"name\": '0',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'rgb(79, 198, 99)'\n            }\n        },\n        {\n            \"type\": 'violin',\n            \"x\": heart_df['cp'][heart_df['target'] == 1 ],\n            \"y\": heart_df['age'][heart_df['target'] == 1 ],\n            \"legendgroup\": '1',\n            \"scalegroup\": '1',\n            \"name\": '1',\n            \"box\": {\n                \"visible\": True\n            },\n            \"meanline\": {\n                \"visible\": True\n            },\n            \"line\": {\n                \"color\": 'rgb(255, 99, 99)'\n            }\n        }\n    ],\n    \"layout\" : {\n        \"yaxis\": {\n            \"zeroline\": False,\n        },\n        \"violinmode\": \"group\"\n    }\n}\n\nplotly.offline.iplot(fig, filename='violin\/grouped', validate = False)","7339c2c1":"# Basic Scatter Plot\n\nN = 2000\n\nrandom_x = np.random.randn(N)\nrandom_y = np.random.randn(N)\n\n# Create a trace\ntrace = go.Scatter(\n    x = random_x,\n    y = random_y,\n    mode = 'markers'\n)\n\ndata = [trace]\n\nplotly.offline.iplot(data, filename='basic-scatter')","e7fd52ec":"random_x = np.linspace(0, 1, 200)\nrandom_y0 = np.random.randn(200)+10\nrandom_y1 = np.random.randn(200)\nrandom_y2 = np.random.randn(200)-10\n\nrandom_x","145d9c55":"trace0 = go.Scatter(\n    x = random_x,\n    y = random_y0,\n    mode = 'markers',\n    name = 'markers'\n)\n\ntrace1 = go.Scatter(\n    x = random_x,\n    y = random_y1,\n    mode = 'lines+markers',\n    name = 'lines+markers'\n)\n\ntrace2 = go.Scatter(\n    x = random_x,\n    y = random_y2,\n    mode = 'lines',\n    name = 'lines'\n)\n\ndata = [trace0, trace1, trace2]\nplotly.offline.iplot(data, filename='scatter-mode')","823f2910":"df = pd.read_csv(\"..\/input\/life-expectancy-who\/Life Expectancy Data.csv\")\ndf.head()","d6a97401":"df.Country.unique()","517ae3b6":"x_data = df[\"Life expectancy \"]\ny_data = df[\"Adult Mortality\"]\ncolors = np.random.rand(2938)\nsz = np.random.rand(N)*30\n\nfig = go.Figure()\nfig.add_scatter(x = x_data,\n                y = y_data,\n                mode = 'markers',\n                marker = {'size': sz,\n                         'color': colors,\n                         'opacity': 0.6,\n                         'colorscale': 'Portland'\n                       })\nplotly.offline.iplot(fig)","8bb46a59":"my_country_bangladesh = df[df[\"Country\"] == \"Bangladesh\"]\nneighbours_india = df[df[\"Country\"] == \"India\"] \nneighbours_nepal = df[df[\"Country\"] == \"Nepal\"] \nneighbours_bhutan = df[df[\"Country\"] == \"Bhutan\"] \nneighbours_pakistan = df[df[\"Country\"] == \"Pakistan\"]","eae38b27":"# GDP of bangladesh\nmy_country_bangladesh.GDP","8d6b40a7":"my_country_bangladesh.columns","1b3e59c4":"bangladesh = my_country_bangladesh\nindia = neighbours_india\nnepal = neighbours_india\nbhutan = neighbours_bhutan\npakistan = neighbours_pakistan\n\nfig = {\n    'data': [\n        # bangladesh\n        {\n        'x': bangladesh.GDP, \n        'y': bangladesh[\"Life expectancy \"], \n        'text': bangladesh.Country, \n        'mode': 'markers', \n        'name': \"Bangladesh\"\n        },\n        # india\n        {\n        'x': india.GDP, \n        'y': india[\"Life expectancy \"],\n        'text': india.Country, \n        'mode': 'markers', \n        'name': 'India'\n        },\n        #nepal \n        {\n        'x': nepal.GDP, \n        'y': nepal[\"Life expectancy \"],\n        'text': nepal.Country, \n        'mode': 'markers', \n        'name': 'Nepal'\n        },\n        #bhutan\n        {\n        'x': bhutan.GDP, \n        'y': bhutan[\"Life expectancy \"],\n        'text': bhutan.Country, \n        'mode': 'markers', \n        'name': 'Bhutan'\n        },\n        #pakistan\n        {\n        'x': pakistan.GDP, \n        'y': pakistan[\"Life expectancy \"],\n        'text': pakistan.Country, \n        'mode': 'markers', \n        'name': 'Pakistan'\n        }\n    ],\n    'layout': {\n        'xaxis': {'title': 'GDP per Capita', 'type': 'log'},\n        'yaxis': {'title': \"Life Expectancy\"}\n    }\n}\n\nplotly.offline.iplot(fig)","19af7686":"y0 = np.linspace(0.1, 10, 100)\ny1 = np.linspace(1.1, 11, 100)\ny2 = np.linspace(2.1, 12, 100)\ny3 = np.linspace(3.1, 13, 100)","d2be1ef1":"y0","7211626d":"trace0 = go.Box(\n    y=y0,\n    name = 'Sample A',\n    marker = dict(\n        color = 'navy',\n    )\n)\n\ntrace1 = go.Box(\n    y=y1,\n    name = 'Sample B',\n    marker = dict(\n        color = 'darkcyan',\n    )\n)\n\ntrace2 = go.Box(\n    y=y2,\n    name = 'Sample C',\n    marker = dict(\n        color = 'purple',\n    )\n)\n\ntrace3 = go.Box(\n    y=y3,\n    name = 'Sample D',\n    marker = dict(\n        color = 'brown',\n    )\n)\n\ndata = [trace0, trace1, trace2, trace3]\nplotly.offline.iplot(data)","b99171b2":"diabetes_df = pd.read_csv(\"..\/input\/pima-indians-diabetes-database\/diabetes.csv\")","0bb9ed52":"diabetes_df.head()","ea313eff":"trace0 = go.Box(\n    name = 'Pregnancies',\n    y = diabetes_df[\"Pregnancies\"]\n)\n\ntrace1 = go.Box(\n    name = \"Glucose\",\n    y = diabetes_df[\"Glucose\"]\n)\n\ntrace2 = go.Box(\n    name = \"BloodPressure\",\n    y = diabetes_df[\"BloodPressure\"]\n)\n\ntrace3 = go.Box(\n    name = \"SkinThickness\",\n    y = diabetes_df[\"SkinThickness\"]\n)\n\ntrace4 = go.Box(\n    name = \"Insulin\",\n    y = diabetes_df[\"Insulin\"]\n)\n\ntrace5 = go.Box(\n    name = \"DiabetesPedigreeFunction\",\n    y = diabetes_df[\"DiabetesPedigreeFunction\"]\n)\n\ntrace6 = go.Box(\n    name = \"Age\",\n    y = diabetes_df[\"Age\"]\n)\n\ntrace7 = go.Box(\n    name = \"Outcome\",\n    y = diabetes_df[\"Outcome\"]\n)\n\ndata = [trace0, trace1, trace2, trace3, trace4, trace5, trace6, trace7]\nplotly.offline.iplot(data)","545d4550":"column_names = diabetes_df.columns\n\ny_data = diabetes_df[diabetes_df.columns].values\n\ncolors = ['rgba(93, 164, 214, 0.5)', 'rgba(255, 144, 14, 0.5)', 'rgba(44, 160, 101, 0.5)',\n          'rgba(255, 65, 54, 0.5)', 'rgba(207, 114, 255, 0.5)', 'rgba(127, 96, 0, 0.5)',\n          'rgba(255, 140, 184, 0.5)', 'rgba(79, 90, 117, 0.5)', 'rgba(222, 223, 0, 0.5)']\n\ntraces = []\n\nfor col_name, yd, color in zip(column_names, y_data, colors):\n        traces.append(go.Box(\n            y = yd,\n            name = col_name,\n            boxpoints = 'all',\n            jitter = 0.5,\n            whiskerwidth = 0.2,\n            fillcolor = color,\n            marker = dict(\n                size = 2,\n            ),\n            line = dict(width = 1),\n        ))\n\ndata=traces\nplotly.offline.iplot(data)","dbb21df8":"## Violin Plot","995d52ac":"## Scatter plot","557cf80f":"# About Plotly\n__[Plotly](https:\/\/plotly\/)__ is a collaborative, web-based graphing and analytics platform. It allows users to __import__, __copy__ and __paste__, or __stream__ data to be analyzed and visualized. For analysis and styling graphs, __Plotly__ offers a Python sandbox (NumPy supported), datagrid, and GUI. Python scripts can be saved, shared, and collaboratively edited in Plotly.","36394111":"## Pie Chart","4b876236":"### An efficient way to generate box plot","e819329e":"## Basic Line Plot","c0297bb0":"## Boxplot with Plotly","ae991f1f":"## Life expectancy vs Adult Mortality  across all the Country","2c54f795":"### Line and Scatter plot in Plotly","5658ad72":"## Bar Chart","7ba4b9e8":"> __Note: You can interact with this plot. So play around with it. Double click to back on initial state.__","12b2204a":"## Lets add more lines","eda4b32c":"## Boxplot for Outlier Detection\n__Lets detect outlier on a real dataset__"}}