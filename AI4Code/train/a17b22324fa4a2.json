{"cell_type":{"8c6eab09":"code","2f9046bc":"code","19f43eba":"code","cd92d517":"code","2709f623":"code","c7ab8de8":"code","a2b2b974":"code","bfeb5a28":"code","ecfcbf5f":"code","4e9abd8c":"code","cc51be7b":"code","9580321c":"code","08092592":"code","8459735a":"code","99b66aa4":"code","20f5b12c":"code","f3c36f69":"code","8607a04e":"code","b21b968b":"code","a28ff859":"code","0805095f":"code","79d658fb":"code","1e86549d":"code","7e6175a6":"code","8b40873e":"code","e3ea7198":"code","94ed3831":"code","82bf4122":"code","015e0bc3":"code","9258b5b1":"code","b72332e3":"code","91605870":"code","597618bb":"code","41d1d801":"code","5863f1b2":"code","a8db7277":"code","bcea1512":"code","ae9581bf":"code","8740b509":"code","d468e587":"code","5f72aa58":"markdown","9e7401ce":"markdown","47122450":"markdown","bf6eafcf":"markdown","97bc4c65":"markdown"},"source":{"8c6eab09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\/titanic\"))\n\n# Any results you write to the current directory are saved as output.","2f9046bc":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntrain.head()","19f43eba":"test = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntest.head()","cd92d517":"train.info()","2709f623":"test.info()","c7ab8de8":"all = pd.concat([train, test], sort = False)\nall.info()","a2b2b974":"#Fill Missing numbers with median\nall['Age'] = all['Age'].fillna(value=all['Age'].median())\nall['Fare'] = all['Fare'].fillna(value=all['Fare'].median())","bfeb5a28":"all.info()","ecfcbf5f":"sns.catplot(x = 'Embarked', kind = 'count', data = all) #or all['Embarked'].value_counts()","4e9abd8c":"all['Embarked'] = all['Embarked'].fillna('S')\nall.info()","cc51be7b":"#Age\nall.loc[ all['Age'] <= 16, 'Age'] = 0\nall.loc[(all['Age'] > 16) & (all['Age'] <= 32), 'Age'] = 1\nall.loc[(all['Age'] > 32) & (all['Age'] <= 48), 'Age'] = 2\nall.loc[(all['Age'] > 48) & (all['Age'] <= 64), 'Age'] = 3\nall.loc[ all['Age'] > 64, 'Age'] = 4 ","9580321c":"#Title\nimport re\ndef get_title(name):\n    title_search = re.search(' ([A-Za-z]+\\.)', name)\n    \n    if title_search:\n        return title_search.group(1)\n    return \"\"","08092592":"all['Title'] = all['Name'].apply(get_title)\nall['Title'].value_counts()","8459735a":"all['Title'] = all['Title'].replace(['Capt.', 'Dr.', 'Major.', 'Rev.'], 'Officer.')\nall['Title'] = all['Title'].replace(['Lady.', 'Countess.', 'Don.', 'Sir.', 'Jonkheer.', 'Dona.'], 'Royal.')\nall['Title'] = all['Title'].replace(['Mlle.', 'Ms.'], 'Miss.')\nall['Title'] = all['Title'].replace(['Mme.'], 'Mrs.')\nall['Title'].value_counts()","99b66aa4":"#Cabin\nall['Cabin'] = all['Cabin'].fillna('Missing')\nall['Cabin'] = all['Cabin'].str[0]\nall['Cabin'].value_counts()","20f5b12c":"all.info()","f3c36f69":"#Family Size & Alone \nall['Family_Size'] = all['SibSp'] + all['Parch'] + 1\nall['IsAlone'] = 0\nall.loc[all['Family_Size']==1, 'IsAlone'] = 1\nall.head()","8607a04e":"all.info()","b21b968b":"#Drop unwanted variables\nall_1 = all.drop(['Name', 'Ticket'], axis = 1)\nall_1.head()","a28ff859":"all_dummies = pd.get_dummies(all_1)\nall_dummies.info()","0805095f":"all_train = all_dummies[all_dummies['Survived'].notna()]\nall_train.info()","79d658fb":"all_test = all_dummies[all_dummies['Survived'].isna()]\nall_test.info()","1e86549d":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(all_train.drop(['PassengerId','Survived'],axis=1), \n                                                    all_train['Survived'], test_size=0.30, \n                                                    random_state=101)","7e6175a6":"from sklearn.ensemble import RandomForestClassifier","8b40873e":"RF_Model = RandomForestClassifier()","e3ea7198":"#from sklearn.model_selection import GridSearchCV","94ed3831":"#Using max_depth, criterion will suffice for DT Models, rest all will remain constant \n#parameters = {'n_estimators' : (10,30,50,70,90,100)\n#              , 'criterion' : ('gini', 'entropy')\n#              , 'max_depth' : (3,5,7,9,10)\n#              , 'max_features' : ('auto', 'sqrt')\n#              , 'min_samples_split' : (2,4,6)\n#              #, 'min_weight_fraction_leaf' : (0.0,0.1,0.2,0.3)\n#             }","82bf4122":"#RF_grid  = GridSearchCV(RandomForestClassifier(n_jobs = -1, oob_score= False), param_grid = parameters, cv = 3, verbose = True)","015e0bc3":"#RF_grid_model = RF_grid.fit(X_train, y_train)","9258b5b1":"#RF_grid_model.best_estimator_","b72332e3":"RF_Model = RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n                       criterion='gini', max_depth=7, max_features='sqrt',\n                       max_leaf_nodes=None, max_samples=None,\n                       min_impurity_decrease=0.0, min_impurity_split=None,\n                       min_samples_leaf=1, min_samples_split=6,\n                       min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n                       oob_score=False, random_state=None, verbose=0,\n                       warm_start=False)","91605870":"RF_Model.fit(X_train, y_train)","597618bb":"predictions = RF_Model.predict(X_test)\npredictions","41d1d801":"print(f'Test : {RF_Model.score(X_test, y_test):.3f}')\nprint(f'Train : {RF_Model.score(X_train, y_train):.3f}')","5863f1b2":"all_test.head()","a8db7277":"TestForPred = all_test.drop(['PassengerId', 'Survived'], axis = 1)","bcea1512":"t_pred = RF_Model.predict(TestForPred).astype(int)","ae9581bf":"PassengerId = all_test['PassengerId']","8740b509":"RF_Sub = pd.DataFrame({'PassengerId': PassengerId, 'Survived':t_pred })\nRF_Sub.head()","d468e587":"RF_Sub.to_csv(\"RF_Class_Submission.csv\", index = False)","5f72aa58":"****Extra Features:","9e7401ce":"****Train\/Test Split","47122450":"### Build Random Forest","bf6eafcf":"****Final Predictions","97bc4c65":"****Check Accuracy"}}