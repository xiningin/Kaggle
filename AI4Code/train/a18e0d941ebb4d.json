{"cell_type":{"b92daae2":"code","a4ee812a":"code","72df19c0":"code","38ca2d09":"code","34a90d67":"code","2e3cb3d9":"code","3f29cd7c":"code","6090dcc3":"code","dd56ee18":"code","b820e8c1":"code","cc0836c1":"code","07ead71f":"code","0f0d401e":"code","30910234":"code","c6fe7b20":"code","4c234f9c":"code","bf140f1b":"code","2473d949":"code","972a9e49":"code","5638eae4":"code","399d2f95":"code","7bd5ee45":"code","48ae13a9":"code","8a86c4b4":"code","0c45f7a9":"code","b99ef90d":"code","90458f61":"code","18204492":"code","a9c059e7":"code","116e1efb":"code","54e278d5":"code","a36ce72e":"code","f393856c":"code","504c3b23":"code","88800d30":"code","4cdc5c1b":"code","3524a6ff":"code","f4fb2425":"code","4528ee19":"code","a922fa2d":"code","9a095a0b":"code","4009bb17":"code","875569f6":"code","1321142c":"markdown","94cf94b2":"markdown","240d747b":"markdown","6f7aa74d":"markdown","63dada0d":"markdown","e37f22c6":"markdown","607024ab":"markdown","6b77934d":"markdown","91479039":"markdown","9df01bf6":"markdown","64df4bf2":"markdown","fa05ff7f":"markdown","aef6127a":"markdown","512f9434":"markdown","dd017594":"markdown","6938e1e4":"markdown","560a7298":"markdown","e038a506":"markdown","9c26bf61":"markdown","c01bc371":"markdown","a3b1e550":"markdown","9be71120":"markdown","6db745f9":"markdown","2dddabe3":"markdown","006035b7":"markdown"},"source":{"b92daae2":"# Data manipulation\nimport pandas as pd\nimport numpy as np\nimport re\nimport os\n\n# Data visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport geopandas as gpd\nimport folium\nimport plotly.graph_objects as go\n\n%matplotlib inline\n\n# Options for pandas\npd.options.display.max_columns = 50\npd.options.display.max_rows = 30\npd.options.display.max_colwidth = None","a4ee812a":"# list of new discovered features from address and benefits\ncol_add_address = [\n    'Company location (Area)',\n    'Company location (suburb)',\n    'Salary($)(Benefit)'\n]","72df19c0":"# list of new discovered features from job class\ncol_add_jobClass = [\n    'job_classification',\n    'job_subclassification'\n]","38ca2d09":"# list of new discovered features from salary\ncol_add_salary = [\n    'salary_range',\n    'salary_range_filled',\n    'salary_min',\n    'salary_max'\n]","34a90d67":"# assgin subclass for some occupation especially for \"unknown\" and \"others\"\noccupation_subclass_dict = {\n    'Category Manager': 'Office Management',\n    'Temporary Office Roles': 'Contracts Administration',\n    'Executive Assistant': 'PA, EA & Secretarial',\n    'Administrator - Temps': 'Contracts Administration'\n}","2e3cb3d9":"salary_minmax = {\n    'NZ_Design_JOBS.xlsx': [60000, 100000],\n    'NZ_Construction_JOBS.xlsx': [72000, 120000],\n    'NZ_SEEK_CallCenter_CustomerServices.xlsx': [38000, 48000],\n    'NZ_Banking_JOBS.xlsx': [60000, 75000],\n    'NZ_SEEK_ACCOUNTING.xlsx': [44000, 65000],\n    'NZ_Admin_JOBS.xlsx': [43000, 65000],\n    'NZ_TRADE_SERVICES_JOBS.xlsx': [41000, 65000],\n    'NZ_CEO_JOBS.xlsx': [150000, 230000],\n    'NZ_Manufacture_JOBS.xlsx': [48000, 56000],\n    'NZ_SEEK_Consulting.xlsx': [52000, 80000],\n    'NZ_CommunityServices_JOBS.xlsx': [38000, 50000],\n    'NZ_EDUCATION_TRAINING_JOBS.xlsx': [45000, 62000],\n    'NZ_SEEK_Advertising.xlsx': [48000, 70000]\n}","3f29cd7c":"job_file_class = {\n    'NZ_Design_JOBS.xlsx': 'Design',\n    'NZ_Construction_JOBS.xlsx': 'Construction',\n    'NZ_SEEK_CallCenter_CustomerServices.xlsx': 'Customer_serivices',\n    'NZ_Banking_JOBS.xlsx': 'Banking',\n    'NZ_SEEK_ACCOUNTING.xlsx': 'Accounting',\n    'NZ_Admin_JOBS.xlsx': 'Admin',\n    'NZ_TRADE_SERVICES_JOBS.xlsx': 'Trade_services',\n    'NZ_CEO_JOBS.xlsx': 'CEO',\n    'NZ_Manufacture_JOBS.xlsx': 'Manufacture',\n    'NZ_SEEK_Consulting.xlsx': 'Consulting',\n    'NZ_CommunityServices_JOBS.xlsx': 'Community_services',\n    'NZ_EDUCATION_TRAINING_JOBS.xlsx': 'Education',\n    'NZ_SEEK_Advertising.xlsx': 'Advertising'\n}","6090dcc3":"# extract company names\ndef extractCompName(row):\n    try:\n        if re.search('(\\w*)(\\s*)(.*)', row).group(1) == 'at':\n            return re.search('(\\w*)(\\s*)(.*)', row).group(3) \n        else:\n            return row\n    except:\n        return None","dd56ee18":"# extracting area from full address\ndef address_area(address):\n    lst_address = address.split(\":\")[1]\n    lst_area = lst_address.strip().split(',')[0]\n    lst_area = re.findall('[A-Z]*[a-z]*\\s*', lst_area)\n    area = \"\"\n    for i in range(len(lst_area)\/\/2):\n        area += lst_area[i]\n    return area","b820e8c1":"# extracting suburb from full address\ndef address_suburb(address):\n    lst_address = address.split(\":\")\n    if len(lst_address) == 3:\n        lst_suburb = re.findall('[A-Z]*[a-z]*&*\\s*', lst_address[2].strip().split(',')[0])\n        suburb = \"\"\n        for i in range(len(lst_suburb)\/\/2):\n            suburb += lst_suburb[i]\n        return suburb\n    else:\n        return \"Unknown\"","cc0836c1":"# extract benefits including salary, health benefits, bonus, holidays and so on.\ndef address_benefit(address):\n    benefit = address.split(',', 1)\n    if len(benefit)>1:\n        return benefit[1]","07ead71f":"def address_benefit2(classification):\n    benefit = classification.split(':')\n    if len(benefit)==1:\n        return benefit[0]","0f0d401e":"def job_posted_days(row):\n    try:\n        if re.search(r'(\\d*)(\\w)', re.search(r'(\\d+)(\\w)', row).group()).group(2) == 'd':\n            return re.search(r'(\\d*)(\\w)', re.search(r'(\\d+)(\\w)', row).group()).group(1)\n        else:\n            return 0\n    except:\n      return None","30910234":"# extracting job class\ndef return_classification(row):\n    lst_row = row.split(':')\n    classfication = \"\"\n    if len(lst_row)==1:\n        return None\n    else:\n        lst_class = re.findall('[A-Z][^A-Z]*', lst_row[1].split('subClassfication')[0])\n        for i in range(len(lst_class)\/\/2):\n            classfication += lst_class[i]\n        return classfication","c6fe7b20":"# extracting job subclass\ndef return_subclass(row):\n    lst_row = row.split(':')\n    subclass = \"\"\n    if len(lst_row)==1:\n        return None\n    else:\n        lst_subclass = re.findall('[A-Z][^A-Z]*', lst_row[2])\n        for i in range(len(lst_subclass)\/\/2):\n            subclass += lst_subclass[i]\n        return subclass","4c234f9c":"# filled missing values of minimum and maximum salary\n### Normally, they should be filled by reference tables\ndef salaryMinMax(row, file):\n    try:\n        s_min = row[0]\n        s_max = row[1]\n        return [int(s_min), int(s_max)]\n    except:\n        s_min = salary_minmax[file][0]\n        s_max = salary_minmax[file][1]\n        lst_minmax = np.random.randint(s_min, s_max, size=2)\n        return [min(lst_minmax), max(lst_minmax)]","bf140f1b":"# return a tuple containing minimum and maximum salary from salary range which is \n# orginally from benefit feature\ndef salary_extract(s):\n    temp1 = re.findall('.*\\d+[.]*[,]*\\d*k*K*', s)\n    if len(temp1) != 0:\n        temp2 = re.findall('\\d+\\s*[.]*[,]*\\d*k*K*', temp1[0])\n        if len(temp2) == 1 and len(temp2[0]) > 1:\n            if ',' in temp2[0]:\n                return ([float(temp2[0].replace(',', '')), float(temp2[0].replace(',', ''))])\n            elif 'k' in temp2[0]:\n                return ([float(temp2[0].replace('k','000')), float(temp2[0].replace('k','000'))])\n            elif 'K' in temp2[0]:\n                return ([float(temp2[0].replace('K','000')), float(temp2[0].replace('K','000'))])\n            else:\n                if float(temp2[0]) > 300:\n                    return ([float(temp2[0]), float(temp2[0])])\n                else:\n                    return ([float(temp2[0])*8*200, float(temp2[0])*8*200])\n        elif len(temp2) == 2:\n            if ',' in temp2[0] or ',' in temp2[1]:\n#                 print(temp2)\n                if (',' in temp2[0]) and (',' in temp2[1]):\n#                     print(',' in temp2[0] and ',' in temp2[0])\n                    return ([float(temp2[0].replace(',', '')), float(temp2[1].replace(',', ''))])\n                elif ',' in temp2[0] and ',' not in temp2[1]:\n                    if float(temp2[1]) == 0:\n                        return ([float(re.search('(\\d+)(,)+', temp2[0]).group(1))*1000, \n                                 float(re.search('(\\d+)(,)+', temp2[0]).group(1))*1000])\n                    else:\n                        return ([float(re.search('(\\d+)(,)+', temp2[0]).group(1))*1000, \n                                 float(temp2[1])*1000])\n                elif ',' in temp2[1] and ',' not in temp2[0]:\n                    if float(temp2[0]) == 0:\n                        return ([float(re.search('(\\d+)(,)+', temp2[1]).group(1))*1000, \n                                 float(re.search('(\\d+)(,)+', temp2[1]).group(1))*1000])\n                    else:\n                        return ([float(temp2[0])*1000, \n                                 float(re.search('(\\d+)(,)+', temp2[1]).group(1))*1000])\n#                     return ([float(temp2[0])*1000, float(temp2[1].replace(',000', ''))*1000])\n            elif 'k' in temp2[0] or 'k' in temp2[1]:\n                if 'k' in temp2[0] and 'k' in temp2[0]:\n                    return ([float(temp2[0].replace('k', '000')), float(temp2[1].replace('k', '000'))])\n                elif 'k' in temp2[0] and 'k' not in temp2[1]:\n                    return ([float(temp2[0].replace('k', '000')), float(temp2[1])*1000])\n                elif 'k' in temp2[1] and 'k' not in temp2[0]:\n                    return ([float(temp2[0])*1000, float(temp2[1].replace('k', '000'))])\n            elif 'K' in temp2[0] or 'K' in temp2[1]:\n                if 'K' in temp2[0] and 'K' in temp2[0]:\n                    return ([float(temp2[0].replace('K', '000')), float(temp2[1].replace('K', '000'))])\n                elif 'K' in temp2[0] and 'K' not in temp2[1]:\n                    return ([float(temp2[0].replace('K', '000')), float(temp2[1])*1000])\n                elif 'K' in temp2[1] and 'K' not in temp2[0]:\n                    return ([float(temp2[0])*1000, float(temp2[1].replace('K', '000'))])\n            elif temp2[1] == '8':\n                return ([float(temp2[0])*8*200, float(temp2[0])*8*200])\n            else:\n                if ' ' in temp2[0] or ' ' in temp2[1]:\n                    if ' ' in temp2[0] or ' ' in temp2[1]:\n                        if len(temp2[0])>4 and len(temp2[1])>4:\n                            return ([float(temp2[0].replace(' ', '')), float(temp2[1].replace(' ', ''))])\n                        else:\n                            return ([float(temp2[0].replace(' ', ''))*8*200, float(temp2[1].replace(' ', ''))*8*200])\n                    elif ' ' in temp2[0] and ' ' not in temp2[1]:\n                        return ([float(temp2[0].replace(' ', ''))*8*200, float(temp2[1])*8*200])\n                    elif ' ' not in temp2[0] and ' ' in temp2[1]:\n                        return ([float(temp2[0])*8*200, float(temp2[1].replace(' ', ''))*8*200])\n                else:\n                    return ([float(temp2[0])*8*200, float(temp2[1])*8*200])\n        elif len(temp2) == 3:\n            return [float(re.search('(\\d+)(,)*', temp2[0]).group(1))*1000, \n                    float(re.search('(\\d+)(,)*', temp2[1]).group(1))*1000]","2473d949":"# Company name column in some datasets comes with extra characters\ndef cleanCol_compName(df, col_edit, col_add):\n    df[col_add] = df[col_edit].apply(lambda row: extractCompName(row))\n    return df","972a9e49":"# Job adverts have different promotion types such as standard (free) and promoted (premium)\ndef cleanCol1_link(df, col_edit, col_add):\n    df[col_add] = df[col_edit].apply(lambda row: re.search(r'=(\\w+)#', row).group(1))\n    return df","5638eae4":"def clean_address_benefit(df, col_edit, col_add_address):\n    df[col_add_address[0]] = df[col_edit].apply(lambda row: address_area(row))\n    df[col_add_address[1]] = df[col_edit].apply(lambda row: address_suburb(row))\n    df[col_add_address[2]] = df[col_edit].apply(lambda row: address_benefit(row))\n    return df","399d2f95":"def clean_address_benefit2(df, col_edit, col_add_address, col_edit_benefit):\n    df[col_add_address[0]] = df[col_edit].apply(lambda row: address_area(row))\n    df[col_add_address[1]] = df[col_edit].apply(lambda row: address_suburb(row))\n    df[col_add_address[2]] = df[col_edit_benefit].apply(lambda row: address_benefit2(row))\n    return df","7bd5ee45":"def clean_jobPosted(df, col_edit, col_add, func):\n    if col_edit == -1:\n        return df\n    else:\n        df[col_add] = df[col_edit].apply(lambda row: func(row))\n        return df","48ae13a9":"def clean_jobClass(df, col_edit, col_add_jobClass):\n    df[col_add_jobClass[0]] = df[col_edit].apply(lambda row: return_classification(row))\n    df[col_add_jobClass[1]] = df[col_edit].apply(lambda row: return_subclass(row))\n    return df","8a86c4b4":"def clean_salary(df, col_edit, col_add_salary, file):\n    df[col_add_salary[0]] = df[col_edit].apply(lambda row: salary_extract(str(row)))\n    df[col_add_salary[1]] = df[col_add_salary[0]].apply(lambda row: salaryMinMax(row, file))\n    df[[col_add_salary[2], col_add_salary[3]]] = df[col_add_salary[1]].apply(pd.Series)\n    df['Average_salary'] = df[col_add_salary[1]].apply(lambda row: np.mean(row))\n    return df","0c45f7a9":"def clean_redundancies(df, file):\n    df = df.rename(columns={0: \"occupation\"})\n    df['Company'].fillna(value=\"Private Advertiser\", inplace=True)\n    df = df.drop([\n        'salary_range', \n        'salary_range_filled', \n        'Salary($)(Benefit)'], axis=1)\n    df = df.drop([x for x in df.columns if x in [1,2,3,4,5,6,7, 'Job_Posted(days ago)']], \n                axis=1)\n    df['Company location (suburb)'].fillna(\"unknown\", inplace=True)\n    df['job_subclassification'].fillna('unknown', inplace=True)\n\n    # assgin subclass for some occupation especially for \"unknown\" and \"others\"\n    if file == 'NZ_Admin_JOBS.xlsx':\n        df['job_classification'].fillna('Administration & Office Support', inplace=True)\n        for index, value in enumerate(df['occupation']):\n            if df.iloc[index]['occupation'] in occupation_subclass_dict.keys():\n                df.at[index, 'job_subclassification'] = occupation_subclass_dict[df.iloc[index]['occupation']]\n    df['job_classification'].fillna('unknown', inplace=True)\n    return df","b99ef90d":"def main_clean(path, file):\n    lst1 = ['NZ_Construction_JOBS.xlsx', 'NZ_Design_JOBS.xlsx', 'NZ_CEO_JOBS.xlsx', \n            'NZ_SEEK_ACCOUNTING.xlsx', 'NZ_Manufacture_JOBS.xlsx', \n            'NZ_EDUCATION_TRAINING_JOBS.xlsx', 'NZ_EDUCATION_TRAINING_JOBS.xlsx', \n           'NZ_CommunityServices_JOBS.xlsx', 'NZ_Construction_JOBS.xlsx']\n    lst2 = ['NZ_Admin_JOBS.xlsx', 'NZ_SEEK_Consulting.xlsx', \n           'NZ_SEEK_CallCenter_CustomerServices.xlsx', 'NZ_Banking_JOBS.xlsx', \n           'NZ_SEEK_Advertising.xlsx', 'NZ_TRADE_SERVICES_JOBS.xlsx']\n    lst3 = ['NZ_SEEK_Advertising.xlsx']\n    lst4 = ['NZ_Construction_JOBS.xlsx', 'NZ_TRADE_SERVICES_JOBS.xlsx', \n           'NZ_Banking_JOBS.xlsx', 'NZ_SEEK_CallCenter_CustomerServices.xlsx',\n           'NZ_SEEK_Consulting.xlsx', 'NZ_Design_JOBS.xlsx', 'NZ_SEEK_ACCOUNTING.xlsx', \n           'NZ_CEO_JOBS.xlsx', 'NZ_EDUCATION_TRAINING_JOBS.xlsx', 'NZ_Manufacture_JOBS.xlsx']\n    lst5 = ['NZ_SEEK_Advertising.xlsx']\n    lst6 = ['NZ_CommunityServices_JOBS.xlsx']\n    lst7 = ['NZ_Construction_JOBS.xlsx', 'NZ_TRADE_SERVICES_JOBS.xlsx', \n           'NZ_Banking_JOBS.xlsx', 'NZ_SEEK_CallCenter_CustomerServices.xlsx', \n           'NZ_SEEK_Consulting.xlsx', 'NZ_Design_JOBS.xlsx', 'NZ_SEEK_ACCOUNTING.xlsx', \n           'NZ_CommunityServices_JOBS.xlsx', 'NZ_CEO_JOBS.xlsx', \n            'NZ_EDUCATION_TRAINING_JOBS.xlsx', 'NZ_Manufacture_JOBS.xlsx']\n    lst8 = ['NZ_Admin_JOBS.xlsx' ,'NZ_SEEK_Advertising.xlsx']\n    if file in lst1:\n        df = pd.read_excel(path+file, header=None)\n    elif file in lst2:\n        df = pd.read_excel(path+file, header=None)\n        df = df.drop(df.index[0]).reset_index(drop=True)\n    df = cleanCol_compName(df, 2, 'Company')\n    df = cleanCol1_link(df, 1, 'job_advert_type')\n    if file in lst3:\n        df = clean_address_benefit2(df, 3, col_add_address, 4)\n    else:\n        df = clean_address_benefit(df, 3, col_add_address)\n    df = clean_jobPosted(df, 5 if file in lst4 \n                         else 6 if file in lst5 \n                         else -1 if file in lst6\n                        # 4 for only NZ_admin                     \n                         else 4, \n                         'Job_Posted(days ago)', job_posted_days)\n    df = clean_jobClass(df,\n                        # 5 for file in lst8\n                        4 if file in lst7 else 5 \n                        , col_add_jobClass)\n    df = clean_salary(df, 'Salary($)(Benefit)', col_add_salary, file)\n    df = clean_redundancies(df, file)\n    return df","90458f61":"# for file in os.listdir('DataSource\/'):\n#     if 'NZ_' in file :\n#         print(file)","18204492":"!pip install openpyxl\npath = '..\/input\/datasource\/'\nframes = []\nfor file in os.listdir('..\/input\/datasource\/'):\n    if 'NZ_' in file :\n        frames.append(main_clean(path, file))\ndf_cleaned = pd.concat(frames)\n# df_cleaned.info()\n# df_cleaned.to_csv('nz_jobs_cleaned.csv', index=False)","a9c059e7":"# df_cleaned.info()","116e1efb":"# df_cleaned['occupation'].value_counts()","54e278d5":"fig_px_bar = px.bar(df_cleaned['occupation'].value_counts()[:10,],\n                    title=\"Top 10 Jobs demand in New Zealand\",\n                    labels={\n                        'value': 'No. of positions'\n                    }\n                   )\nfig_px_bar.update_layout(\n    title={  \n#         \"text\":\"Job market demand for Administration\",\n        \"y\":0.96,  # y\u8f74\u6570\u503c\n        \"x\":0.5,  # x\u8f74\u6570\u503c\n        \"xanchor\":\"center\",  # x\u3001y\u8f74\u76f8\u5bf9\u4f4d\u7f6e\n        \"yanchor\":\"top\"  \n    }\n)\nfig_px_bar.show()","a36ce72e":"fig_px_bar_class = px.bar(df_cleaned['job_classification'].value_counts()[:10,],\n                    title=\"Top 10 Job classifications demand in New Zealand\",\n                    labels={\n                        'value': 'No. of each class'\n                    }\n                   )\nfig_px_bar_class.update_layout(\n    title={  \n#         \"text\":\"Job market demand for Administration\",\n        \"y\":0.96,  # y\u8f74\u6570\u503c\n        \"x\":0.5,  # x\u8f74\u6570\u503c\n        \"xanchor\":\"center\",  # x\u3001y\u8f74\u76f8\u5bf9\u4f4d\u7f6e\n        \"yanchor\":\"top\"  \n    }\n)\nfig_px_bar_class.show()","f393856c":"# df_cleaned['Company'].value_counts()[:10]","504c3b23":"fig_px_donut = px.pie(values=df_cleaned['Company'].value_counts()[:10], \n                    names=df_cleaned['Company'].value_counts().index[:10], \n                    title=\"Top 10 hiring enterprises in New Zealand\",\n                    hole=0.5\n                   )\nfig_px_donut.update_layout(\n    title={  \n#         \"text\":\"Top 10 hiring enterprises\",\n        \"y\":0.96,  # y\u8f74\u6570\u503c\n        \"x\":0.5,  # x\u8f74\u6570\u503c\n        \"xanchor\":\"center\",  # x\u3001y\u8f74\u76f8\u5bf9\u4f4d\u7f6e\n        \"yanchor\":\"middle\"  \n    },\n    legend={\n        \"xanchor\": \"center\",\n        \"yanchor\": \"bottom\",\n        \"y\": -2,\n        \"x\": 0.5\n    }\n)\nfig_px_donut.update_traces(\n    textposition='outside',\n    textinfo='percent+value'\n)\nfig_px_donut.show()","88800d30":"# df_cleaned['job_advert_type'].value_counts()","4cdc5c1b":"fig_px_pie = px.pie(values=df_cleaned['job_advert_type'].value_counts(),\n                    names=df_cleaned['job_advert_type'].value_counts().index,\n                    title=\"Job promotion type\",\n                   )\nfig_px_pie.update_layout(\n    title={  \n        \"y\":0.96,  # y\u8f74\u6570\u503c\n        \"x\":0.5,  # x\u8f74\u6570\u503c\n        \"xanchor\":\"center\",  # x\u3001y\u8f74\u76f8\u5bf9\u4f4d\u7f6e\n        \"yanchor\":\"top\"  \n    }\n)\nfig_px_pie.update_traces(\n#     textposition='outside',\n    textinfo='percent+value+label'\n)\nfig_px_pie.show()","3524a6ff":"# df_cleaned['salary_min'].describe()","f4fb2425":"df_outlier_filter = df_cleaned[(df_cleaned['salary_min']>20000) & \n                               (df_cleaned['salary_min']<250000) &\n                              (df_cleaned['salary_max']>20000) &\n                              (df_cleaned['salary_max']<250000)] \n# df_outlier_filter.describe()","4528ee19":"fig_salary_minmax = go.Figure()\n\nfor o in df_outlier_filter['job_classification'].unique().tolist():\n    fig_salary_minmax.add_trace(go.Violin(x=df_outlier_filter['job_classification'][df_outlier_filter['job_classification']==o],\n                            y=df_outlier_filter['salary_min'][df_outlier_filter['job_classification']==o],\n                            legendgroup=o+' salary_min', scalegroup=o+' salary_min', name=o+' salary_min',\n                            side='negative',\n                            line_color='blue')\n                 )\n    fig_salary_minmax.add_trace(go.Violin(x=df_outlier_filter['job_classification'][df_outlier_filter['job_classification']==o],\n                            y=df_outlier_filter['salary_max'][df_outlier_filter['job_classification']==o],\n                            legendgroup=o+' salary_max', scalegroup=o+' salary_max', name=o+' salary_max',\n                            side='positive',\n                            line_color='orange')\n                 )\n\nfig_salary_minmax.update_traces(meanline_visible=True)\nfig_salary_minmax.update_layout(violingap=0, violinmode='overlay', showlegend=False)\n# fig.update_layout(coloraxis_showscale=False)\nfig_salary_minmax.show()","a922fa2d":"df_geo_nz = df_cleaned['Company location (Area)'].value_counts()\ndf_geo_nz = pd.DataFrame(df_geo_nz).reset_index().rename(columns={'index': 'district', 'Company location (Area)': 'Counts'})\ndf_geo_nz.loc[6, 'district'] = 'Hawke\\'s Bay'\ndf_geo_nz.loc[4, 'district'] = 'Manawatu-Wanganui'\ndf_geo_nz.loc[12, 'district'] = 'Nelson'\n# df_geo_nz\n","9a095a0b":"nz_latitude = -41\nnz_longitude = 174","4009bb17":"df_nz_json = gpd.read_file('..\/input\/geojson\/new-zealand-regional-councils.json')","875569f6":"fig_nz = px.choropleth_mapbox(\n    data_frame=df_geo_nz,\n    geojson=df_nz_json,\n    color='Counts',\n    locations=\"district\",\n    featureidkey=\"properties.NAME_1\",\n    mapbox_style=\"carto-positron\",\n    color_continuous_scale='viridis',\n    center={\"lat\": nz_latitude, \"lon\": nz_longitude},\n    zoom=4,\n    labels={'Counts':'No. of Jobs'},\n    title='Job Market in New Zealand'\n)\nfig_nz.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig_nz.show()","1321142c":"#### Job posted help function","94cf94b2":"### Top 10 Job classifications demand in New Zealand","240d747b":"### Top 10 hiring enterprises in New Zealand","6f7aa74d":"#### Job class help function","63dada0d":"### Job promotion type","e37f22c6":"## Constants","607024ab":"### Clean redundancies","6b77934d":"### Clean job posted","91479039":"### Main clean function","9df01bf6":"### Clean salary","64df4bf2":"### Clean link","fa05ff7f":"### Top 10 Jobs demand in New Zealand","aef6127a":"#### Benefit help function","512f9434":"## Data Visualization","dd017594":"#### Salary help function","6938e1e4":"### Combine all job vacancies from all excel sheets","560a7298":"### Salary analysis for each job classification in New Zealand","e038a506":"### Clean company name","9c26bf61":"#### Address help function","c01bc371":"## library import","a3b1e550":"## Clean processing functions","9be71120":"### Geographic analysis - Job Market in New Zealand","6db745f9":"### Clean address and benefits","2dddabe3":"## Help functions","006035b7":"### Clean Job class"}}