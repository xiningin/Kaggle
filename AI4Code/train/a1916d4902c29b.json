{"cell_type":{"94152570":"code","326a5aa4":"code","2cf26cb5":"code","7890641e":"code","a4258914":"code","a8d3950c":"code","d5c4b40d":"code","95bd98ff":"code","f164bf72":"code","024de796":"code","374d77ad":"code","f93cf7e9":"code","224246f6":"code","0b3a493d":"code","27368312":"code","42e4c881":"code","6cd2b5cc":"code","b5285335":"code","14853029":"code","2f3557a0":"code","f5539e54":"code","fe7ce88a":"code","cfb58c49":"code","91c606ad":"code","46edb981":"code","239a662d":"code","e1f52149":"code","019e678e":"code","792e9a19":"code","05413eae":"code","fab7ff40":"code","cf4520f2":"code","a13dc3a8":"code","87f0af3a":"code","4c97ab49":"code","f1ae8b89":"code","5cebb966":"code","2b6d2813":"code","08126dd0":"code","e829e22f":"code","f06b41c5":"code","e7410028":"code","f3d97ca1":"code","baee5b82":"code","21d73a87":"markdown"},"source":{"94152570":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","326a5aa4":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\nimport keras ","2cf26cb5":"print ('we are using tensorflow version ' , tf.__version__)","7890641e":"train = pd.read_csv('..\/input\/digit-recognizer\/train.csv')","a4258914":"test =  pd.read_csv('..\/input\/digit-recognizer\/test.csv')","a8d3950c":"train.head()","d5c4b40d":"test.head()","95bd98ff":"X = train.drop(columns=['label'])","f164bf72":"y = train['label']\n","024de796":"y.shape","374d77ad":"print ('shape of train set ; ', train.shape)\nprint ('shape of traing image set ; ', X.shape)\nprint ('shape of training label set ; ', y.shape)\nprint ('shape of test set ; ', test.shape)","f93cf7e9":"print ('Nan Values in training set', train.isna().sum().sum())\nprint ('Nan Values in test set', test.isna().sum().sum())","224246f6":"sns.countplot(y)","0b3a493d":"X.info()","27368312":"# we need our data to present in as float32\n# converting uint8 to float32\ntrain =np.array(train).astype('float32')\ntest = np.array(test).astype('float32')\nX =np.array(X).astype('float32')\ny = np.array(y).astype('float32')","42e4c881":"print ('dtype of train is :' , train.dtype)\nprint ('dtype of test is :' , test.dtype)\nprint ('dtype of X is :' , X.dtype)\nprint ('dtype of y is :' , y.dtype)","6cd2b5cc":"y.shape","b5285335":"%matplotlib inline \nplt.figure (figsize=(25,10))\nx,q = 10,4\nfor i in range(10):\n    plt.subplot(q,x,i+1)\n    plt.imshow(X[i].reshape((28,28)))\n    plt.xlabel(y[i])\n    \n    ","14853029":"y.shape","2f3557a0":"y = tf.keras.utils.to_categorical(y)","f5539e54":"from sklearn.preprocessing import Normalizer\n\ntransformer = Normalizer()\nX = transformer.fit_transform(X)\ntest = transformer.transform(test)","fe7ce88a":"# Initialize Sequential model\nmodel = tf.keras.models.Sequential() # Instantiating keras sequential models from keras \nmodel.add(tf.keras.layers.BatchNormalization())\n# First layer (input layer) of  28*28 = 784 after flattening the image of 28 * 28 picxels\nmodel.add(tf.keras.layers.Dense(784,input_dim=784,kernel_initializer='uniform', activation='relu'))\n# second layer \nmodel.add(tf.keras.layers.Dense(392, kernel_initializer='uniform', activation='relu'))\nmodel.add(tf.keras.layers.BatchNormalization())\n# third layer\nmodel.add(tf.keras.layers.Dense(181, kernel_initializer='uniform', activation='relu'))\nmodel.add(tf.keras.layers.BatchNormalization())\n# Final layer with activation function as softmax and 10 neurons \nmodel.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n\n\n# Create optimizer with non-default learning rate\n#sgd_optimizer = tf.keras.optimizers.SGD(lr=0.2)\n\n# Compile the model\nmodel.compile('adam', loss='binary_crossentropy', metrics=['accuracy'])","cfb58c49":"model.fit(X,y,epochs=50,batch_size=32)","91c606ad":"tf.keras.backend.clear_session()\n#Initialize model, reshape & normalize data\nmodel2 = tf.keras.models.Sequential()\n\n#Reshape data from 2D (28,28) to 3D (28, 28, 1)\nmodel2.add(tf.keras.layers.Reshape((28,28,1),input_shape=(784,)))\n#normalize data\nmodel2.add(tf.keras.layers.BatchNormalization())","46edb981":"#Add first convolutional layer\nmodel2.add(tf.keras.layers.Conv2D(32, #Number of filters \n                                 kernel_size=(3,3), #Size of the filter\n                                 activation='relu'))\n\n#Add second convolutional layer\nmodel2.add(tf.keras.layers.Conv2D(64, kernel_size=(3,3), activation='relu'))\n\n#Add MaxPooling layer\nmodel2.add(tf.keras.layers.MaxPool2D(pool_size=(2,2)))\nmodel2.add(tf.keras.layers.BatchNormalization())\n\n#Flatten the output\nmodel2.add(tf.keras.layers.Flatten())\n\n#Dense layer\nmodel2.add(tf.keras.layers.Dense(128, activation='relu'))","239a662d":"#Output layer\nmodel2.add(tf.keras.layers.Dense(10, activation='softmax'))\n\n\nmodel2.compile(optimizer='adam', \n              loss='categorical_crossentropy', metrics=['accuracy'])","e1f52149":"model2.summary()","019e678e":"#Train the model\nmodel2.fit(X,y,epochs=10,batch_size=32)","792e9a19":"predict = model.predict(test)\npredict2 = model2.predict(test)","05413eae":"label = np.argmax(predict,axis=1)\nlabel2 = np.argmax(predict2,axis=1)","fab7ff40":"df = pd.DataFrame(label)","cf4520f2":"df.columns= ['label']","a13dc3a8":"df['ImageId'] =  np.arange(1,len(label)+1)","87f0af3a":"df = df.set_index(df['ImageId'])","4c97ab49":"df_check = df.drop(columns=['ImageId'])","f1ae8b89":"df_check","5cebb966":"df_check.to_csv(r'check_result2.csv',index=False)","2b6d2813":"my_submission2 = pd.DataFrame({'ImageId': np.arange(1,len(label)+1), 'Label': label2})","08126dd0":"my_submission.to_csv('submission.csv', index=False)\nmy_submission2.to_csv('submission2.csv', index=False)","e829e22f":"my_submission","f06b41c5":"label","e7410028":"my_submission = pd.DataFrame({'ImageId': np.arange(1,len(label)+1), 'Label': label})","f3d97ca1":"my_submission","baee5b82":"my_submission.to_csv('submission.csv', index=False)","21d73a87":"Now we will create a model with CNN Network "}}