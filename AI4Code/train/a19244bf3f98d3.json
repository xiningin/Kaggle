{"cell_type":{"c4930898":"code","7d37ac19":"code","9c6aef92":"code","909f5ab7":"code","9ddb48c8":"code","6039f80f":"code","d3c18698":"code","ce7bb41f":"code","fd38e9e0":"code","5711901f":"code","efff640e":"code","de00a8c6":"code","16abf358":"code","6ad54ed1":"code","dc44f27a":"code","6499321a":"code","c7786f1c":"code","9b2ed1d3":"code","921c252f":"code","1bd7dd98":"code","bd48d866":"code","04bbdceb":"code","52e9b70b":"code","b80bcd9f":"code","1f8fa6c4":"code","72a73705":"code","1bd5a78a":"code","a0f8713d":"markdown","80241908":"markdown","54872d05":"markdown","0f0cc328":"markdown","d1992dc1":"markdown","665d5a51":"markdown"},"source":{"c4930898":"import tensorflow as tf\nfrom tensorflow import keras\nfrom plotly.subplots import make_subplots\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense,Dropout,Conv2D,Input,MaxPooling2D,Flatten\nfrom keras.preprocessing.image import load_img,ImageDataGenerator\nfrom keras.callbacks import EarlyStopping\nimport plotly.express as px \nimport plotly.graph_objects as go\nimport matplotlib.pyplot as plt\nfrom kerastuner.tuners import RandomSearch\nfrom sklearn.metrics import classification_report\nimport numpy as np\nimport os\nfrom os.path import join","7d37ac19":"root = \"\/kaggle\/input\/vehicle-detection-image-set\/data\"\nworking_root = \"\/kaggle\/working\"\nos.listdir(root)","9c6aef92":"vehicle_dir = root+\"\/vehicles\"\nnon_vehicle_dir = root+\"\/non-vehicles\"","909f5ab7":"vehicle_names = os.listdir(vehicle_dir)\nnon_vehicle_names = os.listdir(non_vehicle_dir)","9ddb48c8":"fig = px.pie(values=[len(vehicle_names),len(non_vehicle_names)],names=os.listdir(root))\nfig.show()","6039f80f":"images = []\nfig = make_subplots(2,5,row_titles=[\"Vehicles\",\"Non_vehicles\"])\nfor i,index in enumerate(tf.random.uniform([5],maxval=len(vehicle_names),dtype=tf.int32).numpy()):\n    image = load_img(join(vehicle_dir,vehicle_names[index]))\n    fig.add_trace(go.Image(z=image),1,i+1)\nfor i,index in enumerate(tf.random.uniform([5],maxval=len(non_vehicle_names),dtype=tf.int32).numpy()):\n    image = load_img(join(non_vehicle_dir,non_vehicle_names[index]))\n    fig.add_trace(go.Image(z=image),2,i+1)\n\nfig.update_xaxes(showticklabels=False).update_yaxes(showticklabels=False)\nfig.show()\n","d3c18698":"image = load_img(join(vehicle_dir,vehicle_names[0]))","ce7bb41f":"image.size","fd38e9e0":"data_gen = ImageDataGenerator(\n    rotation_range=20,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True,\n    shear_range=0.2,\n    rescale=1.\/255,\n    zoom_range=0.2,\n    validation_split=0.2,\n)\n","5711901f":"train_generator = data_gen.flow_from_directory(root,target_size=image.size,class_mode=\"binary\",seed=100,subset=\"training\")","efff640e":"val_generator = data_gen.flow_from_directory(root,target_size=image.size,class_mode=\"binary\",seed=100,subset=\"validation\")","de00a8c6":"train_generator.image_shape","16abf358":"\nmodel_1 = Sequential([\n    Input(shape=train_generator.image_shape),\n    Conv2D(8, 2, activation='relu'),\n    Conv2D(16, 2, activation='relu'),\n    MaxPooling2D(),\n    Conv2D(32, 2, activation='relu'),\n    Conv2D(64, 2, activation='relu'),\n    MaxPooling2D(),\n    Conv2D(32, 2, activation='relu'),\n    Conv2D(64, 2, activation='relu'),\n    MaxPooling2D(),\n    Flatten(),\n    Dense(1024, activation='relu'),\n    Dropout(0.2),\n    Dense(512, activation='relu'),\n    Dropout(0.2),\n    Dense(1, activation=\"sigmoid\")\n])\n\nmodel_1.summary()","6ad54ed1":"model_1.compile(\n    optimizer=keras.optimizers.Adam(),\n    loss=keras.losses.BinaryCrossentropy(from_logits=True),\n    metrics=['accuracy'],\n)","dc44f27a":"early_stp = EarlyStopping(patience=2)","6499321a":"history = model_1.fit(train_generator,validation_data=val_generator,epochs=500,callbacks=[early_stp],)","c7786f1c":"model_1.save(join(working_root,\"simple_model.h5\"))","9b2ed1d3":"def plot_history(history):\n  print(history.history.keys())\n  # summarize history for accuracy\n  plt.plot(history.history['accuracy'])\n  plt.plot(history.history['val_accuracy'])\n  plt.title('model accuracy')\n  plt.ylabel('accuracy')\n  plt.xlabel('epoch')\n  plt.legend(['train', 'test'], loc='upper left')\n  plt.show()\n  # summarize history for loss\n  plt.plot(history.history['loss'])\n  plt.plot(history.history['val_loss'])\n  plt.title('model loss')\n  plt.ylabel('loss')\n  plt.xlabel('epoch')\n  plt.legend(['train', 'test'], loc='upper left')\n  plt.show()","921c252f":"plot_history(history)","1bd7dd98":"def build_model(hp):\n    model = Sequential()\n    model.add(Input(shape=train_generator.image_shape))\n    \n    for i in range(hp.Int('num_layers_conv', 2, 4)):\n      model.add(Conv2D(hp.Int('conv2D_1_' + str(i),32,128,32), 2, activation='relu'))\n      model.add(Conv2D(hp.Int('conv2D_2_' + str(i),32,128,32), 2, activation='relu'))\n      model.add(MaxPooling2D())\n\n    model.add(Flatten())\n    for i in range(hp.Int('num_layers_dense', 1, 4)):  \n      model.add(Dense(units=hp.Int('units_' + str(i),min_value=1024,max_value=128,step=-256), activation='relu'))\n      model.add(Dropout(hp.Choice('dropout_' + str(i), [0.2,0.5]))),\n      \n    model.add(Dense(1, activation='sigmoid'))\n\n    model.compile(\n        optimizer=keras.optimizers.Adam(hp.Choice('learning_rate', [1e-2, 1e-3, 1e-4])),\n        loss=keras.losses.BinaryCrossentropy(True),\n        metrics=['accuracy']\n    )\n    return model","bd48d866":"tuner = RandomSearch(\n    build_model,\n    objective='val_accuracy',\n    max_trials=5,\n    executions_per_trial=3,\n    directory=join(working_root,\"tuner\"),\n    project_name='optimizer')","04bbdceb":"tuner.search(train_generator,\n             epochs=20,\n             validation_data=val_generator,callbacks=[EarlyStopping(patience=2)])","52e9b70b":"best_hp = tuner.get_best_hyperparameters()[0]\nprint(best_hp.values)","b80bcd9f":"model_2 = tuner.get_best_models()[0]\nmodel_2.save(join(working_root,\"tuner_model.h5\"))\nmodel_2.summary()","1f8fa6c4":"predictions_1=model_1.predict_generator(val_generator)\npredictions_2=model_2.predict_generator(val_generator)","72a73705":"model_1.evaluate(val_generator)","1bd5a78a":"model_2.evaluate(val_generator)","a0f8713d":"# Processing","80241908":"# Simple CNN","54872d05":"# Evaluation","0f0cc328":"# Visualization","d1992dc1":"# Tuner Model","665d5a51":"# Paths"}}