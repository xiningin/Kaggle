{"cell_type":{"53bcbbbb":"code","69c31b4a":"code","95e5dbcf":"code","54a60ae1":"code","08170e00":"code","6cf2d245":"code","70682ac2":"code","5432bb59":"code","6ae2d70c":"code","bb42c37a":"code","1da4b11f":"markdown","a32e0468":"markdown","c3e1c3b0":"markdown","720129b6":"markdown","757e10f2":"markdown","91f37acd":"markdown","9307a1b3":"markdown","c8b0926d":"markdown","408db310":"markdown"},"source":{"53bcbbbb":"import pandas as pd\n\nfrom sklearn.model_selection import train_test_split\n\nfrom sklearn.linear_model import LinearRegression\n\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score\nfrom numpy import sqrt\n\nfrom sklearn.linear_model import Ridge","69c31b4a":"column_names = [\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\", \"PRICE\"]\ndata = pd.read_csv(\"..\/input\/bostonhousing\/boston-housing.csv\", header=None, delimiter=r\"\\s+\", names=column_names)\n\nprint(data.head())","95e5dbcf":"X = data.drop('PRICE',axis=1)\nY = data['PRICE']\nprint(X.head())\nprint(Y.head())","54a60ae1":"X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.3)\nprint(X_test.shape, Y_test.shape)\nprint(X_train.shape, Y_train.shape)","08170e00":"lr = LinearRegression() \nlr.fit(X_train, Y_train)\n\nY_pred = lr.predict(X_test)","6cf2d245":"print('Mean absolute error : ', metrics.mean_absolute_error(Y_test,Y_pred))\nprint('Mean square error : ', metrics.mean_squared_error(Y_test,Y_pred))\nprint('R squared error', r2_score(Y_test,Y_pred))\nprint('RMSE', sqrt(metrics.mean_squared_error(Y_test,Y_pred)))","70682ac2":"rr = Ridge(alpha=0.5)\nrr.fit(X_train, Y_train)\n\nY_predRR = rr.predict(X_test)","5432bb59":"print('Mean absolute error : ', metrics.mean_absolute_error(Y_test,Y_predRR))\nprint('Mean square error : ', metrics.mean_squared_error(Y_test,Y_predRR))\nprint('R squared error', r2_score(Y_test,Y_predRR))\nprint('RMSE', sqrt(metrics.mean_squared_error(Y_test,Y_predRR)))","6ae2d70c":"train_score=lr.score(X_train, Y_train)\ntest_score=lr.score(X_test, Y_test)\n\nRidge_train_score = rr.score(X_train, Y_train)\nRidge_test_score = rr.score(X_test, Y_test)","bb42c37a":"print(\"Linear regression train score:\", train_score)\nprint(\"Linear regression test score:\", test_score)\nprint(\"Ridge regression train score:\", Ridge_train_score)\nprint(\"Ridge regression test score:\", Ridge_test_score)","1da4b11f":"**Ridge Regression metrics**","a32e0468":"<h3>Libraries imported<\/h3>","c3e1c3b0":"### Before and after metrics\nComparing the performance before and after applying L2 regularization.","720129b6":"### Ridge Regression\n<p>Higher the alpha value, more restriction on the coefficients; low alpha > more generalization, coefficients are barely restricted, in this case linear and ridge regression resembles<\/p>","757e10f2":"### Linear Regression\n<p>Fit the model according to \"data\" variable obtained from CSV.<\/p>","91f37acd":"### Reading data from CSV\n<p>Removing unnecessary columns<\/p>\n<p>Renaming column-names to something meaningful<\/p>","9307a1b3":"**Linear Regression Model metrics**","c8b0926d":"### Test\/Train Split\n<p>Dividing data into test-train sets, 30% and 70%<\/p>","408db310":"<h1 align=\"center\">Assignment<\/h1>\n<h2 align=\"center\">Faisal Akhtar<\/h2>\n<h2 align=\"center\">Roll No.: 17\/1409<\/h2>\n<p>Machine Learning - B.Sc. Hons Computer Science - Vth Semester<\/p>\n<p>Perform linear regression on any dataset (say Boston house prices). Apply Ridge regularization on the same and compare the performance before and after applying L2 regularization.\n<\/p>"}}