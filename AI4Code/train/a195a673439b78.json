{"cell_type":{"a9369e0a":"code","31666c67":"code","8ac8311b":"code","4acd23cc":"code","4ca4e5d2":"code","8f53e49e":"code","7ab4c5a4":"code","3aa0ec10":"code","00039a6e":"code","ce459fd5":"code","0623f844":"code","c3cebbb8":"code","2eaf188c":"code","e3520e1a":"code","e6b172ea":"code","5b21a9a0":"code","8e6adb9d":"code","d8aceaa9":"code","de6cb206":"code","19a0e054":"code","1d732a3c":"code","4cd6b76d":"code","07bc8e02":"code","9ccc11b8":"code","e90c6d6b":"code","cac32528":"code","f149dbd8":"code","8e10b599":"code","e80cdd99":"code","0e8e8365":"code","cd94134e":"code","a022ceb2":"code","0f6a17b4":"code","d927405c":"markdown","07477dde":"markdown","83f5606d":"markdown"},"source":{"a9369e0a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","31666c67":"import numpy as np\nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import accuracy_score\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor","8ac8311b":"# loading the diabetes dataset to a pandas DataFrame\ndataset = pd.read_csv('\/kaggle\/input\/diabetes-data-set\/diabetes.csv') ","4acd23cc":"dataset.head()","4ca4e5d2":"dataset.shape","8f53e49e":"dataset.describe()","7ab4c5a4":"dataset['Outcome'].value_counts()","3aa0ec10":"dataset.isnull().sum()","00039a6e":"dataset.dtypes","ce459fd5":"dataset.columns","0623f844":"fig = plt.figure(figsize = (12, 8))\nplt.hist(dataset['Pregnancies'], bins = 3)\nplt.show()","c3cebbb8":"fig = plt.figure(figsize = (12, 8))\nplt.hist(dataset['Outcome'], bins = 3)\nplt.show()\n","2eaf188c":"fig = plt.figure(figsize = (12, 8))\nplt.scatter(dataset['Pregnancies'], dataset['Age'])\nplt.xlabel('Pregnent Woman')\nplt.ylabel('Age')\nplt.show()","e3520e1a":"fig = plt.figure(figsize = (12, 8))\nplt.scatter(dataset['Glucose'], dataset['Age'])\nplt.xlabel('Glucose')\nplt.ylabel('Age')\nplt.show()","e6b172ea":"corr = dataset.corr()\n#print(corr)\nsns.heatmap(corr, \n         xticklabels=corr.columns, \n         yticklabels=corr.columns)","5b21a9a0":"# separating the data and labels\nX = dataset.drop(columns = 'Outcome', axis=1)\nY = dataset['Outcome']","8e6adb9d":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state=42)","d8aceaa9":"# defining parameter range\nparam_grid = {'C': [0.1, 1, 10, 100, 1000], \n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n              'kernel': ['rbf']} \n  \ngrid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3)\n  \n# fitting the model for grid search\ngrid.fit(X_train, Y_train)","de6cb206":"# print best parameter after tuning\nprint(grid.best_params_)\n  \n# print how our model looks after hyper-parameter tuning\nprint(grid.best_estimator_)","19a0e054":"SVM =SVC(C=1, gamma=0.0001)\nSVM.fit(X_train,Y_train)","1d732a3c":"pred = SVM.predict(X_test)","4cd6b76d":"print(\"Accuracy:\",metrics.accuracy_score(Y_test, pred) * 100)","07bc8e02":"classifier= KNeighborsClassifier(n_neighbors=5)\nclassifier.fit(X_train,Y_train)","9ccc11b8":"pred = classifier.predict(X_test)","e90c6d6b":"print(\"Accuracy:\",metrics.accuracy_score(Y_test,pred ) * 100)","cac32528":"DecisionTree = DecisionTreeClassifier(random_state=0)","f149dbd8":"DecisionTree.fit(X_train,Y_train)","8e10b599":"pred = DecisionTree.predict(X_test)","e80cdd99":"print(\"Accuracy:\",metrics.accuracy_score(Y_test,pred ) * 100 )","0e8e8365":"!pip install graphviz","cd94134e":"tree= tree.export_graphviz(DecisionTree,out_file='tree.dot',feature_names=X_train.columns,max_depth=3,filled=True)","a022ceb2":"!dot -Tpng tree.dot -o tree.png","0f6a17b4":"image=plt.imread('tree.png')\nplt.figure(figsize=(15,15))\nplt.imshow(image)","d927405c":"# ****Decision Tree Classifier****","07477dde":"# ****SVM****","83f5606d":"# ****KNN****"}}