{"cell_type":{"0ec731d8":"code","6cf3520d":"code","16ce1111":"code","4e3b61a3":"code","be65b20b":"code","961d5196":"code","534b8f91":"code","e0d28254":"code","30ead34f":"code","9edbb30c":"code","b3a83796":"code","ec32b71e":"code","22d79219":"code","10bd1ccc":"code","9b6abc90":"code","544c41a7":"code","2a1ac7f2":"code","1c3ecfc5":"code","7a6fbf36":"code","da23d21e":"code","caa0b5aa":"code","1897e276":"code","24d0a4e2":"code","08f3499a":"code","6d6adc41":"code","aef8c0f2":"code","9b168bdf":"code","8ab4a8c1":"code","69aff7b1":"code","8feee9bb":"code","7244a83d":"code","667771cc":"code","1325fd9e":"code","c612d537":"code","a70c035e":"code","9ddce0a3":"code","17c6f6e1":"code","8c9616a5":"code","1e5ca752":"code","295568ee":"code","f3cafaad":"code","412f075a":"code","1d233f51":"code","6e6c9413":"code","abd8ee1f":"code","e31f5c83":"code","37d946d7":"code","caca359d":"code","5dcf1164":"code","3bbbca51":"markdown","9263acd5":"markdown","16ffb735":"markdown","7f37477d":"markdown","9c120cec":"markdown","0b58773d":"markdown","c4adaed5":"markdown","727d076d":"markdown","20fcb07c":"markdown","b5f67186":"markdown","1abc1705":"markdown","f3a5f31c":"markdown","7d264018":"markdown","cdfba229":"markdown","c79e4032":"markdown","ff1ffe74":"markdown","a10b7f52":"markdown"},"source":{"0ec731d8":"import numpy as np \nimport pandas as pd \nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6cf3520d":"#Modules for EDA\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\n\n#Modules of ML\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import classification_report, confusion_matrix\n%matplotlib inline","16ce1111":"train_df = pd.read_csv('..\/input\/loan-prediction-based-on-customer-behavior\/Training Data.csv')\ntest_df = pd.read_csv('..\/input\/loan-prediction-based-on-customer-behavior\/Test Data.csv')\ntarget_test = pd.read_csv('..\/input\/loan-prediction-based-on-customer-behavior\/Sample Prediction Dataset.csv')","4e3b61a3":"train_df.info()","be65b20b":"test_df.info()","961d5196":"train_df.head()","534b8f91":"train_df.drop('Id',axis=1,inplace=True)\ntrain_df.shape","e0d28254":"test_df.head()","30ead34f":"target_test.head()","9edbb30c":"test_df['Risk_Flag'] = target_test['risk_flag']\ntest_df.head()","b3a83796":"test_df.drop('ID',axis=1,inplace=True)\ntest_df.shape","ec32b71e":"df = pd.concat([train_df, test_df], axis=0)\ndf.shape","22d79219":"df.head()","10bd1ccc":"plt.figure(figsize=(7,7))\ntrain_df['Married\/Single'].value_counts().plot(kind='pie',autopct=\"%.2f%%\")\nplt.title(\"Marital Status Ratio\")\nplt.ylabel(\"\")\nplt.show()\ntrain_df['Married\/Single'].value_counts()","9b6abc90":"def plotGraph(method, a, b, title=None, **kwargs):\n    plt.figure(figsize=(7,7))\n    method(data=df[[a, b]], **kwargs)\n    plt.title(title)\n    plt.show()","544c41a7":"plotGraph(sns.histplot, 'Age', 'Married\/Single', title=\"Histogram of Age Groups\",element='poly',x='Age',hue='Married\/Single')","2a1ac7f2":"plotGraph(sns.histplot, 'Married\/Single', 'Income', title=\"Married\/Single and Income\", x='Income', hue='Married\/Single',element='poly')","1c3ecfc5":"plt.figure(figsize=(20,30))\nsns.countplot(y=df['Profession'])\nplt.title(\"Frequency of each Profession.\")\nplt.ylabel(\"Profession\")\nplt.xlabel(\"Count\")\nplt.show()","7a6fbf36":"professions = df.groupby('Profession')\nprofessions_list = df['Profession'].unique()\nprofessions_list","da23d21e":"avg_incomes = []\navg_age = []\navg_exp = []","caa0b5aa":"for profession in professions_list:\n    p_age_mean = professions.get_group(profession)['Age'].mean()\n    p_income_mean = professions.get_group(profession)['Income'].mean()\n    p_exp_mean = professions.get_group(profession)['Experience'].mean()\n    \n    avg_incomes.append(p_income_mean)\n    avg_age.append(p_age_mean)\n    avg_exp.append(p_exp_mean)","1897e276":"pdf = pd.DataFrame({\n    'Profession':professions_list,\n    'Average Age':avg_age,\n    'Average Income':avg_incomes,\n    'Average Experience':avg_exp\n})\n\npdf.head()","24d0a4e2":"pdf.shape","08f3499a":"for col in pdf.columns[1:]:\n    plt.figure(figsize=(20,20))\n    sns.barplot(y=pdf['Profession'], x=pdf[col])\n    plt.title(f\"{col} of each profession.\")\n    plt.show()\n","6d6adc41":"plt.figure(figsize=(17,7))\ndf['STATE'].value_counts().plot(kind='barh')\nplt.xscale('log')\nplt.show()","aef8c0f2":"df.drop(['CITY'],axis=1,inplace=True)\ndf.head()","9b168bdf":"cols_to_encode = ['Married\/Single','House_Ownership', 'Car_Ownership', 'Profession', 'STATE']\ndummies = pd.get_dummies(df[cols_to_encode], drop_first=True)\ndummies.shape","8ab4a8c1":"dummies.head()","69aff7b1":"df.drop(cols_to_encode, axis=1, inplace=True)\ndf.head()","8feee9bb":"scale = MinMaxScaler()\nscalled = scale.fit_transform(df.drop('Risk_Flag',axis=1))","7244a83d":"i = 0\nfor col in df.columns[:-1]:\n    df[col] = scalled[:,i]\n    i += 1","667771cc":"df.head()","1325fd9e":"df.describe()","c612d537":"ndf = pd.concat([df,dummies], axis=1)\nndf.shape","a70c035e":"ndf['Risk_Flag'].value_counts().plot(kind='pie', autopct=\"%.2f%%\")\nplt.show()","9ddce0a3":"ndf['Risk_Flag'].value_counts()","17c6f6e1":"class0 = ndf[ndf['Risk_Flag'] == 0].sample(34589)\nclass0.shape","8c9616a5":"class1 = ndf[ndf['Risk_Flag'] == 1]\nclass1.shape","1e5ca752":"ndf2 = pd.concat([class0,class1], axis=0) \nndf2.shape","295568ee":"ndf2['Risk_Flag'].value_counts().plot(kind='pie', autopct=\"%.2f%%\")\nplt.show()","f3cafaad":"x, y = ndf2.drop('Risk_Flag',axis=1),ndf2['Risk_Flag']\nx.shape, y.shape","412f075a":"X_train, X_test, Y_train, Y_test = train_test_split(x,y,random_state=1)\nX_train.shape, X_test.shape, Y_train.shape, Y_test.shape","1d233f51":"models = [LogisticRegression, DecisionTreeClassifier, KNeighborsClassifier, GaussianNB, RandomForestClassifier]","6e6c9413":"model = keras.Sequential([\n    keras.layers.Dense(118, input_shape=(118,), activation='relu'),\n#     keras.layers.Dense(60, activation='relu'),\n#     keras.layers.Dense(30, activation='relu'),\n    keras.layers.Dense(1, activation='sigmoid')\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)","abd8ee1f":"model.fit(X_train, Y_train, epochs=150,batch_size=1024)","e31f5c83":"model.evaluate(X_test, Y_test)","37d946d7":"def predict(model, X):\n    pred = model.predict(X).flatten()\n    pred[pred >= 0.5] = 1\n    pred[pred < 0.5] = 0\n    return pred\n\ndef plot_actual_vs_predicted(y_true,y_pred,title=None):\n    cm = confusion_matrix(y_true, y_pred)\n    plt.figure(figsize=(7,7))\n    sns.heatmap(cm, annot=True, fmt='g')\n    \n    #Labelling\n    plt.xlabel(\"Actual\")\n    plt.ylabel(\"Predicted\")\n    plt.title(title)\n    plt.show()","caca359d":"y_test_pred = predict(model, X_test)\nplot_actual_vs_predicted(Y_test, y_test_pred, 'Test Data Predictions')\nprint(classification_report(Y_test, y_test_pred))","5dcf1164":"y_train_pred = predict(model, X_train)\nplot_actual_vs_predicted(Y_train, y_train_pred, 'Train Data Predictions')\nprint(classification_report(Y_train, y_train_pred))","3bbbca51":"# **Model Building**","9263acd5":"# **Dropping CITY**","16ffb735":"# **One Hot Encoding**","7f37477d":"# **Avaerage Income, Age and Experience of each profession**","9c120cec":"# **Imbalanced Data :(**","0b58773d":"# **Combining Train and Test Data for Data Preprocessing <br>later will split the data at testing time**","c4adaed5":"# **Data Analysis**","727d076d":"# **Married\/Single and Income**","20fcb07c":"# **States count**","b5f67186":"# **Combining the data**","1abc1705":"# **Combining class0 and class1**","f3a5f31c":"# **Histogram of Age Groups**","7d264018":"# **Feature Scaling**","cdfba229":"# **Different Professions**","c79e4032":"# **Risk Flag Ratio**","ff1ffe74":"# **Under Sampling**","a10b7f52":"# **Spitting Train and Test data**"}}