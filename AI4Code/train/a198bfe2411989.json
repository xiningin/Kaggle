{"cell_type":{"e20c991e":"code","f5fe48f2":"code","8f0b9e55":"code","cdc2344a":"code","74a13aa2":"code","c631c3c3":"code","812ae42d":"code","7af71bad":"code","ca4f0230":"code","4c65fe29":"code","9a58a835":"code","ad25fb44":"code","3c72f80a":"code","1b1033eb":"code","54a490e2":"code","027d60e4":"code","9d4c52c8":"code","a660c7a9":"markdown","ff0fcce3":"markdown","1e288789":"markdown","f32791ba":"markdown","6f2bd343":"markdown","458bc608":"markdown"},"source":{"e20c991e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","f5fe48f2":"import seaborn as sns\nimport matplotlib.pyplot as plt","8f0b9e55":"train = pd.read_csv('\/kaggle\/input\/learn-together\/train.csv')\ntrain.head()","cdc2344a":"def label_soil(row):\n    ''' flatten boolean soil types to a single column'''\n    for ndx in range(1, 40):\n        label = 'Soil_Type{}'.format(ndx)\n        if row[label] == 1:\n            return label","74a13aa2":"# copied from Anika, https:\/\/www.kaggle.com\/sinaasappel\/trees-in-roosevelt-national-forest-eda\n\ndef CoverType(row):\n    if row.Cover_Type == 1:\n        return 'Spruce\/Fir'\n    elif row.Cover_Type == 2:\n        return 'Lodgepole Pine'\n    elif row.Cover_Type == 3:\n        return 'Ponderosa Pine'\n    elif row.Cover_Type == 4:\n        return 'Cottonwood\/Willow'\n    elif row.Cover_Type == 5:\n        return 'Aspen'\n    elif row.Cover_Type == 6:\n        return 'Douglas-fir'\n    else:\n        return 'Krummholz'","c631c3c3":"train['SoilType'] = train.apply(lambda x: label_soil(x), axis=1)","812ae42d":"train['CoverType'] = train.apply(CoverType, axis='columns')","7af71bad":"soil_cross = pd.crosstab(train.SoilType, train.CoverType)\n# total of row\nsoil_cross.loc[:,'Total']= soil_cross.sum(axis=1)\n# total of column\nsoil_cross.loc['Total', :]= soil_cross.sum(axis=0)\n\n\nsoil_cross.sort_values('Total', ascending=False)","ca4f0230":"soil_types = {\n    'Soil_Type1': 'Cathedral family - Rock outcrop complex, extremely stony.',\n    'Soil_Type2': 'Vanet - Ratake families complex, very stony.',\n    'Soil_Type3': 'Haploborolis - Rock outcrop complex, rubbly.',\n    'Soil_Type4': 'Ratake family - Rock outcrop complex, rubbly.',\n    'Soil_Type5': 'Vanet family - Rock outcrop complex complex, rubbly.',\n    'Soil_Type6': 'Vanet - Wetmore families - Rock outcrop complex, stony.',\n    'Soil_Type7': 'Gothic family.',\n    'Soil_Type8': 'Supervisor - Limber families complex.',\n    'Soil_Type9': 'Troutville family, very stony.',\n    'Soil_Type10': 'Bullwark - Catamount families - Rock outcrop complex, rubbly.',\n    'Soil_Type11': 'Bullwark - Catamount families - Rock land complex, rubbly.',\n    'Soil_Type12': 'Legault family - Rock land complex, stony.',\n    'Soil_Type13': 'Catamount family - Rock land - Bullwark family complex, rubbly.',\n    'Soil_Type14': 'Pachic Argiborolis - Aquolis complex.',\n    'Soil_Type15': 'unspecified in the USFS Soil and ELU Survey.',\n    'Soil_Type16': 'Cryaquolis - Cryoborolis complex.',\n    'Soil_Type17': 'Gateview family - Cryaquolis complex.',\n    'Soil_Type18': 'Rogert family, very stony.',\n    'Soil_Type19': 'Typic Cryaquolis - Borohemists complex.',\n    'Soil_Type20': 'Typic Cryaquepts - Typic Cryaquolls complex.',\n    'Soil_Type21': 'Typic Cryaquolls - Leighcan family, till substratum complex.',\n    'Soil_Type22': 'Leighcan family, tibbll substratum, extremely bouldery.',\n    'Soil_Type23': 'Leighcan family, till substratum - Typic Cryaquolls complex.',\n    'Soil_Type24': 'Leighcan family, extremely stony.',\n    'Soil_Type25': 'Leighcan family, warm, extremely stony.',\n    'Soil_Type26': 'Granile - Catamount families complex, very stony.',\n    'Soil_Type27': 'Leighcan family, warm - Rock outcrop complex, extremely stony.',\n    'Soil_Type28': 'Leighcan family - Rock outcrop complex, extremely stony.',\n    'Soil_Type29': 'Como - Legault families complex, extremely stony.',\n    'Soil_Type30': 'Como family - Rock land - Legault family complex, extremely stony.',\n    'Soil_Type31': 'Leighcan - Catamount families complex, extremely stony.',\n    'Soil_Type32': 'Catamount family - Rock outcrop - Leighcan family complex, extremely stony.',\n    'Soil_Type33': 'Leighcan - Catamount families - Rock outcrop complex, extremely stony.',\n    'Soil_Type34': 'Cryorthents - Rock land complex, extremely stony.',\n    'Soil_Type35': 'Cryumbrepts - Rock outcrop - Cryaquepts complex.',\n    'Soil_Type36': 'Bross family - Rock land - Cryumbrepts complex, extremely stony.',\n    'Soil_Type37': 'Rock outcrop - Cryumbrepts - Cryorthents complex, extremely stony.',\n    'Soil_Type38': 'Leighcan - Moran families - Cryaquolls complex, extremely stony.',\n    'Soil_Type39': 'Moran family - Cryorthents - Leighcan family complex, extremely stony.',\n    'Soil_Type40': 'Moran family - Cryorthents - Rock land complex, extremely stony.',\n}\n","4c65fe29":"soil_cross['st'] = soil_cross.index \nsoil_cross['description'] = soil_cross.apply(lambda x: soil_types.get(x['st']), axis=1)\nsoil_cross.sort_values('Total', ascending=False)","9a58a835":"# copied from Anika (link above)\n\n# make 7 new train sets, one for each cover type\nspruce = train[train.Cover_Type == 1]\nlodgepole = train[train.Cover_Type == 2]\nponderosa = train[train.Cover_Type == 3]\ncottonwood = train[train.Cover_Type == 4]\naspen = train[train.Cover_Type == 5]\ndouglas = train[train.Cover_Type == 6]\nkrummholz = train[train.Cover_Type == 7]\n\n# stash the results under labels for later iteration:\ncovers = {\n    'spruce': spruce,\n    'lodgepole': lodgepole, \n    'ponderosa': ponderosa, \n    'cottonwood': cottonwood, \n    'aspen': aspen, \n    'douglas': douglas, \n    'krummholz': krummholz,\n}","ad25fb44":"# copied from Anika, https:\/\/www.kaggle.com\/sinaasappel\/trees-in-roosevelt-national-forest-eda\n\nsns.distplot(a = spruce['Elevation'], label = \"Spruce\")\nsns.distplot(a = lodgepole['Elevation'], label = \"Lodgepole\")\nsns.distplot(a = ponderosa['Elevation'], label = \"Ponderosa\")\nsns.distplot(a = cottonwood['Elevation'], label = \"Cottonwood\")\nsns.distplot(a = aspen['Elevation'], label = \"Aspen\")\nsns.distplot(a = douglas['Elevation'], label = \"Douglas\")\nsns.distplot(a = krummholz['Elevation'], label = \"Krummholz\")\n\n# Add title\nplt.title(\"Histogram of Elevation, by cover type\")\n\n# Force legend to appear\nplt.legend()","3c72f80a":"def plot_soil_type(st_num):\n    ''' plot elevation by soil type'''\n    this_df = train[train.SoilType == 'Soil_Type{}'.format(st_num)]\n    sns.distplot(a = this_df['Elevation'], label = \"Type{}\".format(st_num))\n\nplot_soil_type('10')\nplot_soil_type('29')\nplot_soil_type('3')\nplot_soil_type('4')\nplot_soil_type('23')\nplot_soil_type('38')\nplot_soil_type('30')\n    \nplt.title(\"Histogram of Elevation, by soil type\")\nplt.legend()","1b1033eb":"def cover_by_soil(st_num):\n    ''' plot elevation by soil type and cover'''\n    for label, df in covers.items():\n        this_df = df[df.SoilType == 'Soil_Type{}'.format(st_num)]\n        sns.distplot(a = this_df['Elevation'], label=label)\n        plt.title('Elevation, by cover type -- Soil Type {}'.format(st_num))\n        plt.legend()\n\ncover_by_soil('10')\n","54a490e2":"cover_by_soil(3)","027d60e4":"cover_by_soil(23)","9d4c52c8":"Thank you for considering these ideas.  Suggestions for improvement are most welcome.","a660c7a9":"Convert data description of soil type to dictionary . . . ","ff0fcce3":". . . use dictionary to give geologic information alongside cross-tabs","1e288789":"Cross-tabulate soil and cover type, sorting output by row totals","f32791ba":"Extending the really good EDA by Anika (and inspired by Fatih Bilgin), I offer some work cross-tabbing soil type, and showing some elevations by cover and soil type.\n\nPlease tell me my style failures and code awkwardness, this is my first notebook and I'm here to learn.\n\ntldr;\n- Anika shows that elevation holds a lot of information about cover type\n- Cross-tabbing soil type shows it too holds much information\n- Plotting elevation by soil type and cover type suggests soil type may help discriminate among covers","6f2bd343":"Soil Type 10 looks a lot like the overall elevation histogram.  But, spikes like the following may suggest some help distinguishing covers within an elevation.","458bc608":"The first seven soil types also group by elevation -- more analysis needed to see if this proxies cover type elevation, or helps discriminate"}}