{"cell_type":{"79553022":"code","71f87d44":"code","9df9e7db":"code","e905e435":"code","f40d9658":"code","0dad87b7":"code","623576c4":"code","5e85a4ac":"code","834a8253":"code","906163b6":"code","205b4232":"code","2f2a69cf":"code","68480ccb":"code","67a0c352":"code","bae2bac6":"code","cc0c2573":"code","e9b256e5":"code","ea9df60a":"code","a9968e05":"code","56213a03":"code","47c7f497":"code","b9a83bbc":"code","dfc96973":"code","9568233c":"code","1d9b11de":"code","247a0294":"code","e2979fb8":"markdown","4f23f2f0":"markdown","80443a5e":"markdown","d3f17ca8":"markdown","8c96125c":"markdown","e6707b7d":"markdown","811caaf6":"markdown","dae08977":"markdown","7e50f2c5":"markdown","4cc970bb":"markdown","0edd2886":"markdown","8786fb9d":"markdown","ca7febbd":"markdown","c0139a0b":"markdown","eccc7d9e":"markdown","81724e2d":"markdown","8651e788":"markdown","5d7f7c91":"markdown","74d6eb55":"markdown","6a22a799":"markdown","aa081f83":"markdown","9157dedd":"markdown","50f657a1":"markdown","1bc2e257":"markdown"},"source":{"79553022":"# numerical analysis\nimport numpy as np\n# storing and processing in dataframes\nimport pandas as pd\n# basic plotting\nimport matplotlib.pyplot as plt\n# advanced plotting\nimport seaborn as sns\n\n# splitting dataset into train and test\nfrom sklearn.model_selection import train_test_split\n# scaling features\nfrom sklearn.preprocessing import MinMaxScaler, StandardScaler\n# k nearest neighbors model\nfrom sklearn.neighbors import KNeighborsRegressor\n# linear regression model\nfrom sklearn.linear_model import LinearRegression\n# decision tree model\nfrom sklearn.tree import DecisionTreeRegressor\n# random foreset regressor model\nfrom sklearn.ensemble import RandomForestRegressor\n# evaluation metrics\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score","71f87d44":"# plot style\nsns.set_style('whitegrid')\n# color palettes\npal = ['orangered', 'black']","9df9e7db":"# read data\ndf = pd.read_csv('..\/input\/Automobile_data.csv', na_values='?')\n\n# first few rows\ndf.head()","e905e435":"# columns names\ndf.columns","f40d9658":"# no. of rows and columns\ndf.shape","0dad87b7":"# consise summary of dataframe\ndf.info()","623576c4":"# descriptive statistics\ndf.describe(include='all')","5e85a4ac":"# no. of na values in each columns\ndf.isna().sum()","834a8253":"# plot figure\nplt.figure(figsize=(12, 5))\n# plot missing values heatmap\nsns.heatmap(df.isna(), cbar=False, cmap='Set3')\n# title\nplt.title('Missing values in each columns')\n# x-ticks rotation\n# plt.xticks(rotation='80')\n# show the plot\nplt.show()","906163b6":"for col in df.columns:\n    if df[col].nunique() <= 7:\n        print(col)\n        print(\"=\"*len(col))\n        print(df[col].value_counts())\n        print('dtype: ', df[col].dtype)\n        print('\\n')","205b4232":"cat_cols = ['fuel-type', 'aspiration', 'num-of-doors', 'body-style', \n            'drive-wheels', 'engine-location', 'fuel-system']\n\nfor col in cat_cols:\n    df[col] = df[col].astype('category')","2f2a69cf":"num_cols = []\ncat_cols = []\n\nfor i in df.columns[:]:\n    if(df[i].dtype=='object'):\n        cat_cols.append(i)\n    else:\n        num_cols.append(i)\n        \nprint(num_cols)\nprint(cat_cols)","68480ccb":"for i in cat_cols:\n    if((df[i] == '?').sum()>0):\n        print(i, (df[i] == '?').sum())","67a0c352":"df.drop('normalized-losses', axis=1, inplace=True)\ncat_cols.remove('normalized-losses')","bae2bac6":"# first replace '?' with np.nan\ndf.replace('?', np.nan, inplace=True)\nfor i in cat_cols:\n    if((df[i] == '?').sum()>0):\n        print(i, (df[i] == '?').sum())\n    \n# then drop rows with na\ndf.dropna(axis=0, inplace=True)","cc0c2573":"for i in ['bore', 'horsepower', 'stroke', 'peak-rpm', 'price']:\n    df[i] = df[i].astype('float64')\n    num_cols.append(i)\n    cat_cols.remove(i)\n    \ndf['symboling'] = df['symboling'].astype('object')\ncat_cols.append('symboling')\nnum_cols.remove('symboling')","e9b256e5":"for i in num_cols[:-1]:\n    plt.figure(figsize=(8, 5))\n    sns.regplot(x=i, y='price', data=df)\n    plt.plot()","ea9df60a":"for i in cat_cols:\n    plt.figure()\n    sns.boxplot(x=i , y='price', data=df)\n    plt.plot()","a9968e05":"plt.figure(figsize=(12, 10))\nsns.heatmap(df.corr(), annot=True, cmap='RdBu', vmin=-1, vmax=1)\nplt.plot()","56213a03":"df = df.drop(['height', 'stroke', 'compression-ratio', 'peak-rpm', 'num-of-doors'], axis=1)\ndf.head()\n\n# removing those name from the list num_cols\nfor i in ['height', 'stroke', 'compression-ratio', 'peak-rpm']:\n    num_cols.remove(i)\n    \n# removing those name from the list cat_cols\ncat_cols.remove('num-of-doors')","47c7f497":"sc = StandardScaler()\n\nfor i in num_cols[:-1]:\n    df[i] = df[i].astype('float64')\n    df[i] =  sc.fit_transform(df[i].values.reshape(-1,1))\n    \ndf.head()","b9a83bbc":"df = pd.get_dummies(df, drop_first=True)\ndf.head()","dfc96973":"X = df.drop('price', axis=1)\ny = df['price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)","9568233c":"model = LinearRegression()\nmodel.fit(X_train, y_train)\n\npred = model.predict(X_test)\n\nprint(mean_absolute_error(y_test, pred))\nprint(mean_squared_error(y_test, pred))\nprint(r2_score(y_test, pred))\n\nfig, ax = plt.subplots(1, 3, figsize=(24, 5))\n\nsns.scatterplot(x=pred, y=y_test, ax=ax[0])\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Actual values\")\nplt.plot()\n\nsns.distplot(pred-y_test, ax=ax[1])\nplt.xlabel(\"Difference\")\nplt.ylabel(\"Count\")\nplt.plot()\n\nsns.scatterplot(x=pred, y=y_test-pred, ax=ax[2])\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Difference\")\nplt.plot()","1d9b11de":"model = DecisionTreeRegressor()\nmodel.fit(X_train, y_train)\n\npred = model.predict(X_test)\n\nprint(mean_absolute_error(y_test, pred))\nprint(mean_squared_error(y_test, pred))\nprint(r2_score(y_test, pred))\n\nfig, ax = plt.subplots(1, 3, figsize=(24, 5))\n\nsns.scatterplot(x=pred, y=y_test, ax=ax[0])\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Actual values\")\nplt.plot()\n\nsns.distplot(pred-y_test, ax=ax[1])\nplt.xlabel(\"Difference\")\nplt.ylabel(\"Count\")\nplt.plot()\n\nsns.scatterplot(x=pred, y=y_test-pred, ax=ax[2])\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Difference\")\nplt.plot()","247a0294":"model = RandomForestRegressor()\nmodel.fit(X_train, y_train)\n\npred = model.predict(X_test)\n\nprint(mean_absolute_error(y_test, pred))\nprint(mean_squared_error(y_test, pred))\nprint(r2_score(y_test, pred))\n\nfig, ax = plt.subplots(1, 3, figsize=(24, 5))\n\nsns.scatterplot(x=pred, y=y_test, ax=ax[0])\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Actual values\")\nplt.plot()\n\nsns.distplot(pred-y_test, ax=ax[1])\nplt.xlabel(\"Difference\")\nplt.ylabel(\"Count\")\nplt.plot()\n\nsns.scatterplot(x=pred, y=y_test-pred, ax=ax[2])\nplt.xlabel(\"Predicted values\")\nplt.ylabel(\"Difference\")\nplt.plot()","e2979fb8":"# Visualizing correlation","4f23f2f0":"### Data properties","80443a5e":"# Random Forest Regressor","d3f17ca8":"### Missing values","8c96125c":"# Spliting data for training and testing","e6707b7d":"# Droping rows with missing values","811caaf6":"# Looking for missing values","dae08977":"> * symobling - Rating corresponds to the degree to which the auto is more risky than its price indicates. Cars are initially assigned a risk factor","7e50f2c5":"# Dataset","4cc970bb":"### Columns","0edd2886":"# Decision Tree Regressor","8786fb9d":"# Creating dummy columns for categorical columns","ca7febbd":"### Theme","c0139a0b":"# Getting numerical and categorical columns","eccc7d9e":"# Droping column with lot of missing values","81724e2d":"# Exploring dataset","8651e788":"# Converting to proper data types","5d7f7c91":"# Libraries","74d6eb55":"# Visualizing categorical columns","6a22a799":"### Fix datatype","aa081f83":"# Visualizing numerical columns","9157dedd":"# Linear Regerssion","50f657a1":"# Droping columns with not much significance ","1bc2e257":"# Scaling numerical values using Standard Scaler"}}