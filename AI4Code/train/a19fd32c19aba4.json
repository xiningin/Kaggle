{"cell_type":{"4ccbe6af":"code","f4883d98":"code","ab313b36":"code","1aee767b":"code","6fd11049":"code","53c40507":"code","172cdd15":"code","7153b616":"code","5e5e3234":"code","f094a092":"code","05bf54a7":"code","9f5286d6":"code","fb4f76ad":"code","663aef08":"code","1ce10e38":"code","f242b744":"code","3ca24a0e":"code","b6344390":"code","3d9832a4":"code","9da20320":"code","f635ec4e":"code","8835a452":"code","990bccf8":"code","874d61c1":"code","70938562":"code","298d66e5":"code","5b368178":"code","8c3d6479":"code","49630a23":"code","36ac0a06":"code","ee0f0606":"code","c1fcf4d6":"code","bcabbfb1":"code","7fddca25":"code","dc911235":"markdown","9c505352":"markdown","0063725a":"markdown","a9480673":"markdown","464b7b66":"markdown","7ebd9436":"markdown","94d58896":"markdown","1b0ef56e":"markdown","c3689cc1":"markdown","57152e17":"markdown","a2cfc834":"markdown","f721b71e":"markdown"},"source":{"4ccbe6af":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"\n\nimport warnings\nwarnings.filterwarnings('ignore')","f4883d98":"df_episodes = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/Episodes.csv')   #  Episodes \ndf_users = pd.read_csv('\/kaggle\/input\/meta-kaggle\/Users.csv')\ndf_achieve = pd.read_csv('\/kaggle\/input\/meta-kaggle\/UserAchievements.csv')","ab313b36":"df_episodes = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/Episodes.csv')   #  Episodes ","1aee767b":"df_interest = df_episodes[['youtube_views', 'youtube_watch_hours', 'heroes_kaggle_username']]","6fd11049":"df_interest.head()","53c40507":"df_interest  = pd.DataFrame(df_interest[~df_interest['heroes_kaggle_username'].isna()])\ndf_interest =  df_interest[df_interest['heroes_kaggle_username'] != 'dott1718 | philippsinger' ]","172cdd15":"df_interest['kaggle_join_date'] = df_interest.heroes_kaggle_username.apply(lambda x : df_users[df_users['UserName'] == x].iloc[0,3])\ndf_interest['kaggle_userid'] = df_interest.heroes_kaggle_username.apply(lambda x : df_users[df_users['UserName'] == x].iloc[0,0])","7153b616":"trunc = df_achieve[df_achieve.UserId.isin(df_interest['kaggle_userid'])]\ntrunc.head()","5e5e3234":"df_interest['high_comp'] = df_interest.kaggle_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Competitions')].iloc[0,7])\ndf_interest['high_disc'] = df_interest.kaggle_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Scripts')].iloc[0,7])\ndf_interest['high_scripts'] = df_interest.kaggle_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Discussion')].iloc[0,7])","f094a092":"from datetime import date\nfrom datetime import datetime\n\n#function to return date from the date of joining kaggle\ndef get_months(str_d1):\n    str_d2 = '07\/12\/2020'  # hardcode some date around  last month ( later take this as the date of interview)\n    f_date = datetime.strptime(str_d1, '%m\/%d\/%Y')\n    l_date = datetime.strptime(str_d2, '%m\/%d\/%Y')\n    delta = l_date - f_date\n    return  delta.days\/30\n\n#get_months(df_episodes['kaggle_join_date'].iloc[1])\n\ndf_interest['df_months_in_kaggle'] = df_interest['kaggle_join_date'].apply(lambda x :get_months(x))","05bf54a7":"from sklearn import preprocessing\nscaler = preprocessing.MinMaxScaler()\n\ndf_interest[['df_months_in_kaggle', 'youtube_views','high_comp','high_scripts','high_disc']] = \\\nscaler.fit_transform(df_interest[['df_months_in_kaggle', 'youtube_views','high_comp','high_scripts','high_disc']])","9f5286d6":"df_interest['high_comp'][df_interest.high_comp.isna()] = df_interest.high_comp.max()\ndf_interest['high_disc'][df_interest.high_disc.isna()] = df_interest.high_disc.max()\ndf_interest['high_scripts'][df_interest.high_scripts.isna()] =df_interest.high_scripts.max()","fb4f76ad":"df_interest['high_comp'] = df_interest.kaggle_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Competitions')].iloc[0,7])\ndf_interest['high_disc'] = df_interest.kaggle_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Scripts')].iloc[0,7])\ndf_interest['high_scripts'] = df_interest.kaggle_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Discussion')].iloc[0,7])","663aef08":"df_pool = df_achieve[df_achieve['AchievementType'] =='Discussion'].sort_values(by='HighestRanking').head(200)","1ce10e38":"df_pool  = df_pool.append(df_achieve[df_achieve['AchievementType'] =='Scripts'].sort_values(by='HighestRanking').head(200))","f242b744":"df_pool =df_pool.append(df_achieve[df_achieve['AchievementType'] =='Competitions'].sort_values(by='HighestRanking').head(400))","3ca24a0e":"len(df_pool)","b6344390":"df_pool.head()","3d9832a4":"df_pool_userid = df_pool.UserId.unique()","9da20320":"len(df_pool_userid)","f635ec4e":"df_interest.head()","8835a452":"df_pool_matrix = pd.DataFrame()\ndf_pool_matrix['pool_userid'] = df_pool_userid\ndf_pool_matrix['pool_username'] = df_pool_matrix.pool_userid.apply(lambda x : df_users[df_users['Id'] == x].iloc[0,1])\ndf_pool_matrix['kaggle_join_date'] = df_pool_matrix.pool_username.apply(lambda x : df_users[df_users['UserName'] == x].iloc[0,3])","990bccf8":"trunc = df_achieve[df_achieve.UserId.isin(df_pool_matrix['pool_userid'])]","874d61c1":"df_pool_matrix['high_comp'] = df_pool_matrix.pool_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Competitions')].iloc[0,7])\ndf_pool_matrix['high_disc'] = df_pool_matrix.pool_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Scripts')].iloc[0,7])\ndf_pool_matrix['high_scripts'] = df_pool_matrix.pool_userid.apply(lambda x : trunc[(trunc['UserId'] == x) & (trunc['AchievementType']=='Discussion')].iloc[0,7])","70938562":"from datetime import date\nfrom datetime import datetime\n\n#function to return date from the date of joining kaggle\ndef get_months(str_d1):\n    str_d2 = '07\/12\/2020'  # hardcode some date around  last month ( later take this as the date of interview)\n    f_date = datetime.strptime(str_d1, '%m\/%d\/%Y')\n    l_date = datetime.strptime(str_d2, '%m\/%d\/%Y')\n    delta = l_date - f_date\n    return  delta.days\/30\n\ndf_pool_matrix['df_months_in_kaggle'] = df_pool_matrix['kaggle_join_date'].apply(lambda x :get_months(x))","298d66e5":"df_pool_matrix.head()","5b368178":"from sklearn import preprocessing\nscaler = preprocessing.MinMaxScaler()\n\ndf_pool_matrix[['df_months_in_kaggle','high_comp','high_scripts','high_disc']] = \\\nscaler.fit_transform(df_pool_matrix[['df_months_in_kaggle','high_comp','high_scripts','high_disc']])","8c3d6479":"df_pool_matrix['high_comp'][df_pool_matrix.high_comp.isna()] = df_pool_matrix.high_comp.max()\ndf_pool_matrix['high_disc'][df_pool_matrix.high_disc.isna()] = df_pool_matrix.high_disc.max()\ndf_pool_matrix['high_scripts'][df_pool_matrix.high_scripts.isna()] =df_pool_matrix.high_scripts.max()","49630a23":"df_pool_matrix.head()\ndf_interest.sort_values(by='youtube_views',ascending=False).head(10)","36ac0a06":"common_names = set(df_pool_matrix['pool_username']).intersection(set(df_interest['heroes_kaggle_username']))","ee0f0606":"len(common_names)","c1fcf4d6":"df_pool_matrix = df_pool_matrix[~df_pool_matrix['pool_username'].isin(common_names)]","bcabbfb1":"from scipy import spatial\n\nheroes_user_name = \"jhoward\"\n\na = df_interest['high_comp'][df_interest['heroes_kaggle_username'] == heroes_user_name].iloc[0]\nb = df_interest['high_disc'][df_interest['heroes_kaggle_username'] == heroes_user_name].iloc[0]\nc = df_interest['high_scripts'][df_interest['heroes_kaggle_username'] == heroes_user_name].iloc[0]\nd = df_interest['df_months_in_kaggle'][df_interest['heroes_kaggle_username'] == heroes_user_name].iloc[0]\nhero_vector   = [a,b,c,d]\ndef get_distance(e,f,g,h,hero_vector=hero_vector ):\n    pool_vector = [e,f,g,h]\n    result = 1 - spatial.distance.cosine(hero_vector, pool_vector)\n    return result","7fddca25":"df_pool_matrix['cosine_dist']= df_pool_matrix.apply(lambda x : get_distance(x['high_comp'],x['high_disc'],x['high_scripts'],x['df_months_in_kaggle']),axis = 1)\ndf_pool_matrix.sort_values(by='cosine_dist').head(5)","dc911235":"Add more columns - competition rank, discussion rank, script rank","9c505352":"Pull top 200 Scripts ranks into the pool ","0063725a":"Pull top 400  Competition ranks into the pool ","a9480673":"Convert into months","464b7b66":"### Actual Testing - \nHow to - hardcode the kaggle userid for whom you want to see the similar other kagglers ( make sure the userid you provide is in the list of ctds heroes who have a kaggle id - refer to the code above for explanation)","7ebd9436":"Remove one user - they are a bunch too much","94d58896":"WARNING : Poor documentation  ( This is supposed to be a supporting script for the original notebook )\nOriginal notebook - https:\/\/www.kaggle.com\/tomtillo\/whom-should-you-interview-next\n\n* How did we approach it : We know which Heroes' youtube videos gets more views - \n* We might have a hunch that it might be due to their ranking in kaggle . \n* Here , we try to find similar potential heroes - with similar \"kaggle properties\" as the next candidates \n\n","1b0ef56e":"Add some more columns - join_date , user_id","c3689cc1":"Pull top 200 Discussion ranks into the pool ","57152e17":"If there are NaN in the values, replace with the highest number ","a2cfc834":"Build your 'interested' df - The dataset that we are interested in !","f721b71e":"Scale the columns - MinMax will do for now "}}