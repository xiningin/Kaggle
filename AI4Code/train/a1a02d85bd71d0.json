{"cell_type":{"bb0c4bf3":"code","2dafd27c":"code","b579bb03":"code","ce7c17b6":"code","fd2b13f6":"code","923fcbf1":"code","38496086":"code","0b8cbeb3":"code","05c48bc6":"code","a33e1d7e":"code","41df45b4":"code","19c73672":"code","aebeef97":"code","b5e5ae83":"code","b6b658ec":"code","8b4c108e":"code","c0802b7a":"code","8607f9b9":"code","cab33403":"code","6973ba71":"code","3c816290":"code","c794ee66":"code","26ed4590":"code","443843b6":"code","dcf77985":"code","f812ca13":"code","1d7551e1":"code","9bc1b891":"code","21981226":"code","f0f02deb":"code","f420c539":"code","45242504":"code","b5904835":"code","90a74138":"code","8e646d8e":"code","f8315e6a":"code","8b2120e9":"code","52cce012":"code","681c6650":"code","d537efb2":"code","c200c4d7":"code","1044ccde":"code","d1750865":"code","b67cd9d7":"code","d2af6d73":"code","4ce9b656":"code","6878b8e4":"markdown","d6548db0":"markdown"},"source":{"bb0c4bf3":"#First version to have successful rand_forest is V42\n#v64 first to group out rand forest based on pronoun type\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2dafd27c":"import os\nimport csv\nimport json\nimport string\nimport keras\nfrom pandas.io.json import json_normalize\nimport matplotlib.pyplot as plt\nimport seaborn as sns\ncolor = sns.color_palette()\nfrom math import floor\nimport spacy\n\n%matplotlib inline\n\nfrom plotly import tools\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\nfrom sklearn import model_selection, preprocessing, metrics, ensemble, naive_bayes, linear_model\nfrom sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer\nfrom sklearn.decomposition import TruncatedSVD\nfrom sklearn.ensemble import RandomForestClassifier\nimport lightgbm as lgb\n\nimport time\nfrom tqdm import tqdm\nimport math\nfrom sklearn.model_selection import train_test_split\nimport regex as re","b579bb03":"import nltk \nfrom nltk.corpus import stopwords, wordnet\nfrom nltk.tokenize import word_tokenize, sent_tokenize ","ce7c17b6":"nlp = spacy.load('en_core_web_sm')","fd2b13f6":"def word_locate(sentence, location): \n    count_words = 0\n    count_chars = 2 #2 is to count for the two spaces in the beginning\n    for word in sentence.split():\n        count_words += 1\n        if location == count_chars:\n            return word, count_words\n        count_chars += len(word)\n        count_chars += 1 #for space","923fcbf1":"def name_btwn_paran(sentence):\n    capture = \"\"\n    trigger_on = 0\n    for char in sentence:\n        if char == \")\":\n            trigger_on = 0\n        if trigger_on == 1:\n            capture += char\n        if char == \"(\":\n            trigger_on = 1\n    return capture","38496086":"def which_name_first(sentence, name1, name2): #If name1 is first, return True\n    name1_check = 0\n    for word_punct in sentence.split():\n        for word_comma in word_punct.split(\";\"):\n            for word in word_comma.split(\",\"):\n                if word == name2 and name1_check == 0:\n                    return False\n                if word == name1:\n                    name1_check = 1\n    return True","0b8cbeb3":"def curr_prev_sentence(sentence, loc):\n    current_sentence = \"\"\n    prev_sentence = \"\"\n    trunc_curr_sentence = \"\"\n    remainder_curr = \"\"\n    detect = 0\n    count = 0\n    for char in sentence:\n        count += 1\n        current_sentence += char\n        remainder_curr += char\n        if ((char == \".\" or char == \";\") and detect == 0 and sentence[count] != \",\"): #the last arguement to prevent ., as in sent #4\n            prev_sentence = current_sentence \n            current_sentence = \"\"\n        if char == \".\" and detect == 1:\n            return current_sentence, prev_sentence, trunc_curr_sentence, remainder_curr\n        if count == loc:\n            detect = 1\n            trunc_curr_sentence = current_sentence\n            remainder_curr = \"\"\n    return current_sentence, prev_sentence, trunc_curr_sentence, remainder_curr","05c48bc6":"def remove_last_word(sentence):\n    new_sent = sentence.split()\n    new_sent = new_sent[:-1]\n    return \" \".join(new_sent)","a33e1d7e":"def check_if_capital(word):\n    if word[0] in [\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\"]:\n        return True\n    else:\n        return False","41df45b4":"def list_of_name_words(tokenized):\n    names_list = []\n    for word_tuple in nltk.pos_tag(tokenized):\n        if word_tuple[1] == \"NNP\":\n            names_list.append(word_tuple[0])\n    return names_list","19c73672":"def check_if_name(tokenized,word):\n    text = tokenized\n    for word_tuple in nltk.pos_tag(text):\n        if word_tuple[0] == word:\n            if word_tuple[1] == \"NNP\":\n                return True\n            else:\n                return False","aebeef97":"def find_name_words(sentence):\n    name = \"none\"\n    for word in sentence.split():\n        if check_if_capital(word):\n            return word\n    return name","b5e5ae83":"def remove_first_word(sentence):\n    new_sent = sentence.split()\n    new_sent = new_sent[1:]\n    return \" \".join(new_sent)","b6b658ec":"def find_nth_subj(doc, n): #finds subject number n\n    subject = \"none\"\n    count = 0\n    for token in doc:\n        if (token.dep_ == \"nsubj\" or token.dep_ == \"nsubjpass\"):\n            count += 1\n            if count == n:\n                subject = token.text\n    return subject","8b4c108e":"def find_nth_dobj(doc, n): #finds direct object number n\n    dobj = \"none\"\n    count = 0\n    for token in doc:\n        if (token.dep_ == \"dobj\"):\n            count += 1\n            if count == n:\n                dobj = token.text\n    return dobj","c0802b7a":"def find_nth_poss(doc, n): #finds possessing noun number n\n    poss = \"none\"\n    count = 0\n    for token in doc:\n        if (token.dep_ == \"poss\"):\n            count += 1\n            if count == n:\n                poss = token.text\n    return poss","8607f9b9":"def find_nth_appos(doc, n): #finds appos number n; sometimes Spacy mislabels nsubj as appos\n    appos = \"none\"\n    count = 0\n    for token in doc:\n        if (token.dep_ == \"appos\"):\n            count += 1\n            if count == n:\n                appos = token.text\n    return appos","cab33403":"def check_if_poss_her(doc, pronoun): #tells whether it is her as in his or her as in him\n    #assumes only one her in the whole sentence (inaccurate?)\n    for token in doc:\n        if token.text == pronoun:\n            if token.dep_ == \"poss\":\n                return True\n            else:\n                return False","6973ba71":"with open('..\/input\/gap-other-training-data\/gap-training.tsv') as tsvfile:\n#with open('..\/input\/gap-training-data\/gap-development.tsv') as tsvfile:\n    \n    reader = csv.DictReader(tsvfile, dialect='excel-tab')\n    \n    train_ids= []\n    text_list = []\n    pronoun_list = []\n    pronoun_offset_list = []\n    correct_name_list = []\n    dict_of_all_list = []\n    \n    sent_num = 0\n    \n    p_f_s = [] #prev first subject\n    p_l_s = [] #prev last subject\n    p_f_o = [] #prev first object\n    p_l_o = [] #prev last object\n    tc_f_s = [] #trunc curr first subject\n    tc_f_o = [] #trunc curr first obj\n    tc_f_a = [] #trunc curr first aposs\n    tc_l_s = [] #trunc curr last subject\n    tc_l_o = [] #trunc curr last obj\n    tc_l_p = [] #trunc curr last poss\n    p_f_wp = [] #prev first word between paranthesis\n    tc_l_wp = [] #curr word between paranthesis\n    tc_l_nw = [] #last name word other than a subj in trunc curr\n    r_f_s = [] #remainder first subj\n    r_f_o = [] #remainder first object\n    r_f_a = [] #remainder first appos\n    p_f_a = [] #prev first appos\n    c_f_a = [] #curr first appos\n    poss_her = [] #possessive her true or false\n    pro_typ = [] #pronoun type\n    \n    p_f_s_clf = [] #prev first subject Random Forest labels\n    p_l_s_clf = [] #prev last subject Random Forest labels\n    p_f_o_clf = [] #prev first object Random Forest labels\n    p_l_o_clf = [] #prev last object Random Forest labels\n    tc_f_s_clf = [] #trunc curr first subject Random Forest labels\n    tc_f_o_clf = [] #trunc curr first obj Random Forest labels\n    tc_f_a_clf = [] #trunc curr first aposs Random Forest labels\n    tc_l_s_clf = [] #trunc curr last subject Random Forest labels\n    tc_l_o_clf = [] #trunc curr last obj Random Forest labels\n    tc_l_p_clf = [] #trunc curr last poss Random Forest labels\n    p_f_wp_clf = [] #prev first wb para Random Forest labels\n    tc_l_wp_clf = [] #curr wb para Random Forest labels\n    tc_l_nw_clf = [] #last name word in trunc curr Random Forest labels\n    r_f_s_clf = [] #remainder first subj Random Forest labels\n    r_f_o_clf = [] #remainder first object Random Forest labels\n    r_f_a_clf = [] #remainder first appos Random Forest labels\n    p_f_a_clf = [] #prev first appos Random Forest labels\n    c_f_a_clf = [] #curr first appos Random Forest labels\n    pro_typ_clf = [] #pronoun type for Rand Forest\n    train_idx = [] #training data indices. We do not want those with \"neither\" \n    \n    for row in reader:\n        \n        train_ids.append(row['ID'])\n        text = row['Text']\n        text_list.append(text)\n        dict_of_all = {}\n        \n        proffset = int(row['Pronoun-offset']) \n        pronoun_offset_list.append(proffset)\n        \n        pronoun = row['Pronoun']\n        pronoun_list.append(pronoun)\n        \n        if row['A-coref'] == 'TRUE':\n            correct_name_list.append(row['A'])\n            train_idx.append(sent_num)\n        elif row['B-coref'] == 'TRUE':\n            correct_name_list.append(row['B'])\n            train_idx.append(sent_num)\n        else:\n            correct_name_list.append('Neither')\n        \n        sent_num += 1\n        \n        curr, prev, trunc_curr, remainder = curr_prev_sentence(text, proffset)\n        curr_doc = nlp(curr)\n        prev_doc = nlp(prev) \n        curr_tok = word_tokenize(curr)\n        prev_tok = word_tokenize(prev)\n        trunc_curr_tok = word_tokenize(trunc_curr)\n        \n        #get first subj in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_f_s = \"none\"\n        for n in [1,2,3,4,5]: #number of n is from common sense\n            dummy_p_f_s = find_nth_subj(prev_doc,n)\n            if check_if_name(prev_tok,dummy_p_f_s) and get_p_f_s == \"none\":\n                get_p_f_s = dummy_p_f_s\n        \n        ####For sentence no. 5, spacy and nltk both failed to identify Collins as a propn.\n        ### therefore, we will add a new line here making sure we have a name.\n        \n        if get_p_f_s == \"none\":\n            if check_if_capital(find_nth_subj(prev_doc,1)):\n                get_p_f_s = find_nth_subj(prev_doc,1)\n\n        p_f_s.append(get_p_f_s)\n        \n        ### pfs Random forest classifier label special line:\n        if get_p_f_s in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_p_f_s: #last input of correct name\n            p_f_s_clf.append(1)\n        else:\n            p_f_s_clf.append(0)\n        \n        #get last  subj in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_l_s = \"none\"\n        for n in [1,2,3,4,5]:\n            dummy_p_l_s = find_nth_subj(prev_doc,n)\n            if check_if_name(prev_tok,dummy_p_l_s):\n                get_p_l_s = dummy_p_l_s\n        \n        p_l_s.append(get_p_l_s)\n        \n        ### pls Random forest classifier label special line:\n        if get_p_l_s in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_p_l_s: #last input of correct name\n            p_l_s_clf.append(1)\n        else:\n            p_l_s_clf.append(0)\n        \n        #get first  obj in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_f_o = \"none\"\n        for n in [1,2,3,4,5]: \n            dummy_p_f_o = find_nth_dobj(prev_doc,n)\n            if check_if_name(prev_tok,dummy_p_f_o) and get_p_f_o == \"none\":\n                get_p_f_o = dummy_p_f_o\n        \n        p_f_o.append(get_p_f_o)\n        \n        ### pfo Random forest classifier label special line:\n        if get_p_f_o in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_p_f_o: #last input of correct name\n            p_f_o_clf.append(1)\n        else:\n            p_f_o_clf.append(0)\n            \n        #get last  dobj in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_l_o = \"none\"\n        for n in [1,2,3,4,5]: \n            dummy_p_l_o = find_nth_dobj(prev_doc,n)\n            if check_if_name(prev_tok,dummy_p_l_o):\n                get_p_l_o = dummy_p_l_o\n        \n        p_l_o.append(get_p_l_o)\n        \n        ### plo Random forest classifier label special line:\n        if get_p_l_o in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_p_l_o: #last input of correct name\n            p_l_o_clf.append(1)\n        else:\n            p_l_o_clf.append(0)\n        \n        #get last  subj in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_l_s = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_l_s = find_nth_subj(curr_doc,n)\n            if check_if_name(curr_tok,dummy_tc_l_s)\\\n                    and (dummy_tc_l_s in trunc_curr): #this is slightly inaccurate but oh well\n                get_tc_l_s = dummy_tc_l_s \n            \n        tc_l_s.append(get_tc_l_s)\n        \n        ### tcls Random forest classifier label special line:\n        if get_tc_l_s in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_tc_l_s: #last input of correct name\n            tc_l_s_clf.append(1)\n        else:\n            tc_l_s_clf.append(0)\n            \n        #get last  dobj in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_l_o = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_l_o = find_nth_dobj(curr_doc,n)\n            if (dummy_tc_l_o in trunc_curr)\\\n                                        and check_if_name(curr_tok,dummy_tc_l_o): \n                get_tc_l_o = dummy_tc_l_o \n            \n        tc_l_o.append(get_tc_l_o)\n        \n        ### tclo Random forest classifier label special line:\n        if get_tc_l_o in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_tc_l_o: #last input of correct name\n            tc_l_o_clf.append(1)\n        else:\n            tc_l_o_clf.append(0)\n        \n        #get last  poss in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_l_p = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_l_p = find_nth_poss(curr_doc,n)\n            if (dummy_tc_l_p in trunc_curr)\\\n                                        and check_if_name(curr_tok,dummy_tc_l_p): \n                get_tc_l_p = dummy_tc_l_p \n            \n        tc_l_p.append(get_tc_l_p)\n        \n        ### tclp Random forest classifier label special line:\n        if get_tc_l_p in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_tc_l_p: #last input of correct name\n            tc_l_p_clf.append(1)\n        else:\n            tc_l_p_clf.append(0)\n        \n        #get first subj in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_f_s = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_f_s = find_nth_subj(curr_doc,n)\n            if check_if_name(curr_tok,dummy_tc_f_s) and get_tc_f_s == \"none\":\n                get_tc_f_s = dummy_tc_f_s \n            \n        tc_f_s.append(get_tc_f_s)\n        \n        ### tcfs Random forest classifier label special line:\n        if get_tc_f_s in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_tc_f_s: #last input of correct name\n            tc_f_s_clf.append(1)\n        else:\n            tc_f_s_clf.append(0)\n            \n        #get first dobj in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_f_o = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_f_o = find_nth_dobj(curr_doc,n)\n            if check_if_name(curr_tok,dummy_tc_f_o) and get_tc_f_o == \"none\": \n                get_tc_f_o = dummy_tc_f_o \n            \n        tc_f_o.append(get_tc_f_o)\n        \n        ### tcfo Random forest classifier label special line:\n        if get_tc_f_o in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_tc_f_o: #last input of correct name\n            tc_f_o_clf.append(1)\n        else:\n            tc_f_o_clf.append(0)\n    \n        #get last  non-subj name word  in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_l_nw = \"none\"\n        candidate = \"none\"\n        tc_name_words = list_of_name_words(trunc_curr_tok) \n        if len(tc_name_words) > 0:\n            candidate = tc_name_words[-1]\n        if candidate in get_tc_f_s or candidate in get_tc_l_s:\n            if len(tc_name_words) > 1:\n                candidate = tc_name_words[-1]\n        if check_if_name(curr_tok,candidate):\n            get_tc_l_nw = candidate\n        \n        tc_l_nw.append(get_tc_l_nw)\n        \n        ### tclnw Random forest classifier label special line:\n        if get_tc_l_nw in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_tc_l_nw: #last input of correct name\n            tc_l_nw_clf.append(1)\n        else:\n            tc_l_nw_clf.append(0)\n        \n        #get first aposs in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_f_a = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_f_a = find_nth_appos(curr_doc,n)\n            if check_if_name(curr_tok,dummy_tc_f_a) and get_tc_f_a == \"none\": \n                get_tc_f_a = dummy_tc_f_a \n            \n        tc_f_a.append(get_tc_f_a)\n        \n        ### tcfa Random forest classifier label special line:\n        if get_tc_f_a in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_tc_f_a: #last input of correct name\n            tc_f_a_clf.append(1)\n        else:\n            tc_f_a_clf.append(0)\n    \n        #get word btwn paranthesis in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_f_wp = find_name_words(name_btwn_paran(prev))\n        \n        if check_if_name(prev_tok,get_p_f_wp): #Add only proper nouns into list\n            p_f_wp.append(get_p_f_wp)\n        else:\n            p_f_wp.append(\"none\")\n        \n        ### pfwp Random forest classifier label special line:\n        if get_p_f_wp in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_p_f_wp: #last input of correct name\n            p_f_wp_clf.append(1)\n        else:\n            p_f_wp_clf.append(0)\n            \n        #get word btwn paranthesis in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_l_wp = find_name_words(name_btwn_paran(curr))  \n        \n        if check_if_name(curr_tok,get_tc_l_wp): #Add only proper nouns into list\n            tc_l_wp.append(get_tc_l_wp)\n        else:\n            tc_l_wp.append(\"none\")\n            \n        ### tclwp Random forest classifier label special line:\n        if get_tc_l_wp in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_tc_l_wp: #last input of correct name\n            tc_l_wp_clf.append(1)\n        else:\n            tc_l_wp_clf.append(0)\n            \n        #get last subj in remainder @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_r_f_s = \"none\"\n        for n in [1,2,3,4,5,6,7,8]: #in the final version, each of the name subjects will be accunted for\n            dummy_r_f_s = find_nth_subj(curr_doc,n)\n            if dummy_r_f_s in remainder and check_if_name(curr_tok,dummy_r_f_s):\n                get_r_f_s = dummy_r_f_s \n            \n        r_f_s.append(get_r_f_s)\n        \n        ### rfs Random forest classifier label special line:\n        if get_r_f_s in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_r_f_s: #last input of correct name\n            r_f_s_clf.append(1)\n        else:\n            r_f_s_clf.append(0)\n            \n        #get last dobj in remainder @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_r_f_o = \"none\"\n        for n in [1,2,3,4,5,6,7,8]: #in the final version, each of the name objects will be accunted for\n            dummy_r_f_o = find_nth_dobj(curr_doc,n)\n            if dummy_r_f_o in remainder and check_if_name(curr_tok,dummy_r_f_o):\n                get_r_f_o = dummy_r_f_o \n            \n        r_f_o.append(get_r_f_o)\n        \n        ### rfo Random forest classifier label special line:\n        if get_r_f_o in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_r_f_o: #last input of correct name\n            r_f_o_clf.append(1)\n        else:\n            r_f_o_clf.append(0)\n            \n        #get last appos in remainder @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_r_f_a = \"none\"\n        for n in [1,2,3,4]:\n            dummy_r_f_a = find_nth_appos(curr_doc,n)\n            if dummy_r_f_a in remainder and check_if_name(curr_tok,dummy_r_f_a): \n                get_r_f_a = dummy_r_f_a \n            \n        r_f_a.append(get_r_f_a)\n        \n        ### rfa Random forest classifier label special line:\n        if get_r_f_a in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_r_f_a: #last input of correct name\n            r_f_a_clf.append(1)\n        else:\n            r_f_a_clf.append(0)\n        \n        #get first appos in current @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_c_f_a = \"none\"\n        for n in [1,2,3,4]:\n            dummy_c_f_a = find_nth_appos(curr_doc,n)\n            if check_if_name(curr_tok,dummy_c_f_a) and get_c_f_a == \"none\": \n                get_c_f_a = dummy_c_f_a \n            \n        c_f_a.append(get_c_f_a)\n        \n        ### cfa Random forest classifier label special line:\n        if get_c_f_a in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_c_f_a: #last input of correct name\n            c_f_a_clf.append(1)\n        else:\n            c_f_a_clf.append(0)\n        \n        #get first appos in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_f_a = \"none\"\n        for n in [1,2,3,4]:\n            dummy_p_f_a = find_nth_appos(prev_doc,n)\n            if check_if_name(prev_tok,dummy_p_f_a) and get_p_f_a == \"none\": \n                get_p_f_a = dummy_p_f_a \n            \n        p_f_a.append(get_p_f_a)\n        \n        ### pfa Random forest classifier label special line:\n        if get_p_f_a in correct_name_list[-1]\\\n                or correct_name_list[-1] in get_p_f_a: #last input of correct name\n            p_f_a_clf.append(1)\n        else:\n            p_f_a_clf.append(0)\n    \n        #check_if_poss_her\n        get_poss_her = check_if_poss_her(curr_doc, pronoun)\n        poss_her.append(get_poss_her)\n    \n        #rand_forest classifier for pronoun type:\n        if pronoun == \"he\" or pronoun == \"she\": \n            pro_typ.append(1)\n        elif pronoun == \"He\" or pronoun == \"She\": \n            pro_typ.append(2)\n        elif pronoun == \"his\" or (pronoun == \"her\" and get_poss_her): \n            pro_typ.append(3)\n        elif pronoun == \"him\" or (pronoun == \"her\" and not get_poss_her): \n            pro_typ.append(4)\n        elif pronoun == \"His\" or (pronoun == \"Her\" and get_poss_her): \n            pro_typ.append(5)\n        else:\n            pro_typ.append(6)\n        \n        dict_of_all[\"p_f_s\"] = get_p_f_s\n        dict_of_all[\"p_l_s\"] = get_p_l_s\n        dict_of_all[\"p_f_o\"] = get_p_f_o\n        dict_of_all[\"p_l_o\"] = get_p_l_o\n        dict_of_all[\"tc_f_s\"] = get_tc_f_s\n        dict_of_all[\"tc_f_o\"] = get_tc_f_o\n        dict_of_all[\"tc_f_a\"] = get_tc_f_a\n        dict_of_all[\"tc_l_s\"] = get_tc_l_s\n        dict_of_all[\"tc_l_o\"] = get_tc_l_o\n        dict_of_all[\"tc_l_p\"] = get_tc_l_p\n        dict_of_all[\"p_f_wp\"] = get_p_f_wp\n        dict_of_all[\"tc_l_wp\"] = get_tc_l_wp\n        dict_of_all[\"tc_l_nw\"] = get_tc_l_nw\n        dict_of_all[\"r_f_s\"] = get_r_f_s\n        dict_of_all[\"r_f_o\"] = get_r_f_o\n        dict_of_all[\"r_f_a\"] = get_r_f_a\n        dict_of_all[\"p_f_a\"] = get_p_f_a\n        dict_of_all[\"c_f_a\"] = get_c_f_a\n        dict_of_all[\"poss_her\"] = poss_her\n        \n        dict_of_all_list.append(dict_of_all)","3c816290":"results_df = pd.DataFrame({\"correct\":correct_name_list})\n\nresults_df['pr_fsub'] = p_f_s\nresults_df['pr_lsub'] = p_l_s\nresults_df['pr_fobj'] = p_f_o\nresults_df['pr_lobj'] = p_l_o\nresults_df['tc_lsub'] = tc_l_s\nresults_df['tc_lobj'] = tc_l_o\nresults_df['tc_fsub'] = tc_f_s\nresults_df['tc_fobj'] = tc_f_o\nresults_df['tc_fapo'] = tc_f_a\nresults_df['tc_lnw'] = tc_l_nw\nresults_df['tc_lp'] = tc_l_p\nresults_df['re_sub'] = r_f_s\nresults_df['re_obj'] = r_f_o\nresults_df['re_app'] = r_f_a\nresults_df['pr_para'] = p_f_wp\nresults_df['tc_para'] = tc_l_wp\nresults_df['pr_app'] = p_f_a\nresults_df['cr_app'] = c_f_a\nresults_df['pronoun'] = pronoun_list\nresults_df['offset'] = pronoun_offset_list","c794ee66":"count = 0\nfor idx in range(20):\n    print(text_list[idx])\n    print(\"*********************\")\n    print(count)\n    print(\"@@@\")\n    count += 1","26ed4590":"#THE NEXT FEW CELLS ARE DEDICATED TO A PLAYGROUND FOR MANUAL LOGIC. RANDFOREST IS AFTER THAT. ","443843b6":"#### THIS PART IS INDEPENDENT FROM THE RANDOM FOREST SECTION.\ndef coref_logic(dict_of_all, pronoun):\n    guess = \"none\"\n    case_group = \"none\"\n    \n    #CASE-A: Pronoun he or she or He or She\n    if pronoun == \"he\" or pronoun == \"she\" or pronoun == \"He\" or pronoun == \"She\": \n        \n        #CASE-1\n        if dict_of_all[\"tc_f_s\"] == \"none\" and dict_of_all[\"p_f_s\"] != \"none\":\n            guess = dict_of_all[\"p_f_s\"] #pls will be = pfs if no other subj\n            case_group = \"A1\"\n        #CASE-2\n        elif dict_of_all[\"tc_f_s\"] != \"none\":\n            guess = dict_of_all[\"tc_f_s\"] #tcls will be = tcfs if no other subj\n            case_group = \"A2\"\n        #CASE-3\n        elif dict_of_all[\"tc_f_s\"] == \"none\" and dict_of_all[\"p_f_s\"] == \"none\":\n            if dict_of_all[\"tc_f_o\"] == \"none\" and dict_of_all[\"p_f_o\"] != \"none\":\n                guess = dict_of_all[\"p_f_o\"]\n                case_group = \"A3\"\n        #CASE-4\n        elif dict_of_all[\"tc_f_s\"] == \"none\" and dict_of_all[\"p_f_s\"] == \"none\":\n            if dict_of_all[\"tc_f_o\"] != \"none\" and dict_of_all[\"p_f_o\"] == \"none\":\n                guess = dict_of_all[\"tc_f_o\"]\n                case_group = \"A4\"\n    #CASE B: Pronoun his or her (possessive her):\n    if pronoun == \"his\" or (pronoun == \"her\" and dict_of_all[\"poss_her\"]): \n        \n        #CASE-1 #assuming the pronoun is also in the paranthesis\n        if dict_of_all[\"tc_l_p\"] != \"none\": \n            guess = dict_of_all[\"tc_l_p\"]\n            case_group = \"B1\"\n        #CASE-2 #assuming the pronoun is also in the paranthesis\n        elif dict_of_all[\"tc_l_wp\"] != \"none\": \n            guess = dict_of_all[\"tc_l_wp\"]\n            case_group = \"B2\"\n        #CASE-3\n        elif dict_of_all[\"r_f_a\"] != \"none\": \n            guess = dict_of_all[\"r_f_a\"]\n            case_group = \"B3\"\n        #CASE-4\n        elif dict_of_all[\"r_f_s\"] != \"none\": \n            guess = dict_of_all[\"r_f_s\"]\n            case_group = \"B4\"\n        #CASE-5\n        elif dict_of_all[\"tc_f_s\"] == \"none\" and dict_of_all[\"p_f_s\"] == \"none\"\\\n                    and dict_of_all[\"r_f_s\"] == \"none\" and dict_of_all[\"tc_f_o\"] != \"none\": \n            guess = dict_of_all[\"tc_f_o\"]\n            case_group = \"B5\"\n        #CASE-6\n        elif dict_of_all[\"tc_f_s\"] != \"none\" and dict_of_all[\"p_f_s\"] != \"none\"\\\n                    and dict_of_all[\"r_f_s\"] == \"none\" and dict_of_all[\"tc_f_o\"] == \"none\": \n            guess = dict_of_all[\"tc_f_s\"]\n            case_group = \"B6\"    \n        #CASE-7\n        elif dict_of_all[\"tc_f_s\"] == \"none\" and dict_of_all[\"p_f_s\"] != \"none\"\\\n                    and dict_of_all[\"r_f_s\"] == \"none\" and dict_of_all[\"tc_f_o\"] == \"none\": \n            guess = dict_of_all[\"p_f_s\"]\n            case_group = \"B7\"\n            \n    #CASE C: Pronoun his or her (object her):\n    if pronoun == \"him\" or (pronoun == \"her\" and not dict_of_all[\"poss_her\"]): \n        \n        #CASE-1\n        if dict_of_all[\"p_f_s\"] == \"none\" and dict_of_all[\"tc_f_o\"] == \"none\"\\\n                        and dict_of_all[\"tc_f_s\"] != \"none\": \n            guess = dict_of_all[\"tc_l_nw\"]\n            case_group = \"C1\"\n        \n        # to be continued..    \n        \n    return guess, case_group","dcf77985":"guesses = []\ncase_groups = []\nfor dict_of_all, pronoun in zip(dict_of_all_list, pronoun_list):\n    guesses.append(coref_logic(dict_of_all, pronoun)[0])\n    case_groups.append(coref_logic(dict_of_all, pronoun)[1])","f812ca13":"guesses_df = pd.DataFrame({\"correct\":correct_name_list})\nguesses_df['guesses'] = guesses\nguesses_df['case_group'] = case_groups","1d7551e1":"guesses_df.head(50)","9bc1b891":"data_matrix = []\ndata_matrix1 = []\ndata_matrix2 = []\ndata_matrix3 = []\ndata_matrix4 = []\ndata_matrix5 = []\ndata_matrix6 = []\n\ntr_pro_t1_idxs = []\ntr_pro_t2_idxs = []\ntr_pro_t3_idxs = []\ntr_pro_t4_idxs = []\ntr_pro_t5_idxs = []\ntr_pro_t6_idxs = []\n\nfor idx in range(len(p_f_s)):\n    \n    data_vector = []\n    \n    if p_f_s[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)    \n    if p_l_s[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)\n    if p_f_o[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)\n    if p_l_o[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)\n    if tc_f_s[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)\n    if tc_f_o[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_f_a[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_l_s[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_l_o[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_l_p[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if p_f_wp[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_l_wp[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_l_nw[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if r_f_s[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if r_f_o[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if r_f_a[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if p_f_a[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if c_f_a[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if poss_her[idx] == True:\n        data_vector.append(1)\n    else:\n        data_vector.append(0)\n    #pronoun type, already numerical\n    if pro_typ[idx] == 1:\n        tr_pro_t1_idxs.append(idx)\n        data_matrix1.append(data_vector)\n    if pro_typ[idx] == 2:\n        tr_pro_t2_idxs.append(idx)\n        data_matrix2.append(data_vector)\n    if pro_typ[idx] == 3:\n        tr_pro_t3_idxs.append(idx)\n        data_matrix3.append(data_vector)\n    if pro_typ[idx] == 4:\n        tr_pro_t4_idxs.append(idx)\n        data_matrix4.append(data_vector)\n    if pro_typ[idx] == 5:\n        tr_pro_t5_idxs.append(idx)\n        data_matrix5.append(data_vector)\n    if pro_typ[idx] == 6:\n        tr_pro_t6_idxs.append(idx)\n        data_matrix6.append(data_vector)\n        \n    data_matrix.append(data_vector)\n    \nclf1_df = pd.DataFrame(data_matrix1, columns = dict_of_all_list[0].keys())\nclf2_df = pd.DataFrame(data_matrix2, columns = dict_of_all_list[0].keys())\nclf3_df = pd.DataFrame(data_matrix3, columns = dict_of_all_list[0].keys())\nclf4_df = pd.DataFrame(data_matrix4, columns = dict_of_all_list[0].keys())\nclf5_df = pd.DataFrame(data_matrix5, columns = dict_of_all_list[0].keys())\nclf6_df = pd.DataFrame(data_matrix6, columns = dict_of_all_list[0].keys())","21981226":"# Create a random forest Classifier. By convention, clf means 'Classifier'\nclf = RandomForestClassifier(n_estimators=150, n_jobs=2, random_state=0)","f0f02deb":"#Now make features for the test dataset. This requires doing alllllll those all over again.\n\n# IT IS JUST COPY-PASTE FROM THE TRAINING PROCEDURE (EXCEPT THE LABELS, WHICH WE DON'T NEED.)\n\nwith open('..\/input\/gendered-pronoun-resolution\/test_stage_1.tsv') as tsvfile:\n    \n    reader = csv.DictReader(tsvfile, dialect='excel-tab')\n    \n    test_ids= []\n    text_list = []\n    pronoun_list = []\n    pronoun_offset_list = []\n    dict_of_all_list = []\n    \n    sent_num = 1\n    \n    p_f_s = [] #prev first subject\n    p_l_s = [] #prev last subject\n    p_f_o = [] #prev first object\n    p_l_o = [] #prev last object\n    tc_f_s = [] #trunc curr first subject\n    tc_f_o = [] #trunc curr first obj\n    tc_f_a = [] #trunc curr first aposs\n    tc_l_s = [] #trunc curr last subject\n    tc_l_o = [] #trunc curr last obj\n    tc_l_p = [] #trunc curr last poss\n    p_f_wp = [] #prev first word between paranthesis\n    tc_l_wp = [] #curr word between paranthesis\n    tc_l_nw = [] #last name word other than a subj in trunc curr\n    r_f_s = [] #remainder first subj\n    r_f_o = [] #remainder first object\n    r_f_a = [] #remainder first appos\n    p_f_a = [] #prev first appos\n    c_f_a = [] #curr first appos\n    poss_her = [] #possessive her true or false\n    pro_typ = [] #pronoun type\n      \n    for row in reader:\n        \n        train_ids.append(row['ID'])\n        text = row['Text']\n        sent_num += 1\n        text_list.append(text)\n        dict_of_all = {}\n        \n        proffset = int(row['Pronoun-offset']) \n        pronoun_offset_list.append(proffset)\n        \n        pronoun = row['Pronoun']\n        pronoun_list.append(pronoun)\n              \n        curr, prev, trunc_curr, remainder = curr_prev_sentence(text, proffset)\n        curr_doc = nlp(curr)\n        prev_doc = nlp(prev) \n        curr_tok = word_tokenize(curr)\n        prev_tok = word_tokenize(prev)\n        trunc_curr_tok = word_tokenize(trunc_curr)\n        \n        #get first subj in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_f_s = \"none\"\n        for n in [1,2,3,4,5]: #number of n is from common sense\n            dummy_p_f_s = find_nth_subj(prev_doc,n)\n            if check_if_name(prev_tok,dummy_p_f_s) and get_p_f_s == \"none\":\n                get_p_f_s = dummy_p_f_s\n        \n        ####For sentence no. 5, spacy and nltk both failed to identify Collins as a propn.\n        ### therefore, we will add a new line here making sure we have a name.\n        \n        if get_p_f_s == \"none\":\n            if check_if_capital(find_nth_subj(prev_doc,1)):\n                get_p_f_s = find_nth_subj(prev_doc,1)\n\n        p_f_s.append(get_p_f_s)\n        \n        #get last  subj in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_l_s = \"none\"\n        for n in [1,2,3,4,5]:\n            dummy_p_l_s = find_nth_subj(prev_doc,n)\n            if check_if_name(prev_tok,dummy_p_l_s):\n                get_p_l_s = dummy_p_l_s\n        \n        p_l_s.append(get_p_l_s)\n                \n        #get first  obj in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_f_o = \"none\"\n        for n in [1,2,3,4,5]: \n            dummy_p_f_o = find_nth_dobj(prev_doc,n)\n            if check_if_name(prev_tok,dummy_p_f_o) and get_p_f_o == \"none\":\n                get_p_f_o = dummy_p_f_o\n        \n        p_f_o.append(get_p_f_o)\n                    \n        #get last  dobj in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_l_o = \"none\"\n        for n in [1,2,3,4,5]: \n            dummy_p_l_o = find_nth_dobj(prev_doc,n)\n            if check_if_name(prev_tok,dummy_p_l_o):\n                get_p_l_o = dummy_p_l_o\n        \n        p_l_o.append(get_p_l_o)\n                \n        #get last  subj in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_l_s = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_l_s = find_nth_subj(curr_doc,n)\n            if check_if_name(curr_tok,dummy_tc_l_s)\\\n                    and (dummy_tc_l_s in trunc_curr): #this is slightly inaccurate but oh well\n                get_tc_l_s = dummy_tc_l_s \n            \n        tc_l_s.append(get_tc_l_s)\n                    \n        #get last  dobj in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_l_o = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_l_o = find_nth_dobj(curr_doc,n)\n            if (dummy_tc_l_o in trunc_curr)\\\n                                        and check_if_name(curr_tok,dummy_tc_l_o): \n                get_tc_l_o = dummy_tc_l_o \n            \n        tc_l_o.append(get_tc_l_o)\n                \n        #get last  poss in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_l_p = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_l_p = find_nth_poss(curr_doc,n)\n            if (dummy_tc_l_p in trunc_curr)\\\n                                        and check_if_name(curr_tok,dummy_tc_l_p): \n                get_tc_l_p = dummy_tc_l_p \n            \n        tc_l_p.append(get_tc_l_p)\n                \n        #get first subj in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_f_s = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_f_s = find_nth_subj(curr_doc,n)\n            if check_if_name(curr_tok,dummy_tc_f_s) and get_tc_f_s == \"none\":\n                get_tc_f_s = dummy_tc_f_s \n            \n        tc_f_s.append(get_tc_f_s)\n                    \n        #get first dobj in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_f_o = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_f_o = find_nth_dobj(curr_doc,n)\n            if check_if_name(curr_tok,dummy_tc_f_o) and get_tc_f_o == \"none\": \n                get_tc_f_o = dummy_tc_f_o \n            \n        tc_f_o.append(get_tc_f_o)\n            \n        #get last  non-subj name word  in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_l_nw = \"none\"\n        candidate = \"none\"\n        tc_name_words = list_of_name_words(trunc_curr_tok) \n        if len(tc_name_words) > 0:\n            candidate = tc_name_words[-1]\n        if candidate in get_tc_f_s or candidate in get_tc_l_s:\n            if len(tc_name_words) > 1:\n                candidate = tc_name_words[-1]\n        if check_if_name(curr_tok,candidate):\n            get_tc_l_nw = candidate\n        \n        tc_l_nw.append(get_tc_l_nw)\n                \n        #get first aposs in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_f_a = \"none\"\n        for n in [1,2,3,4]:\n            dummy_tc_f_a = find_nth_appos(curr_doc,n)\n            if check_if_name(curr_tok,dummy_tc_f_a) and get_tc_f_a == \"none\": \n                get_tc_f_a = dummy_tc_f_a \n            \n        tc_f_a.append(get_tc_f_a)\n            \n        #get word btwn paranthesis in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_f_wp = find_name_words(name_btwn_paran(prev))\n        \n        if check_if_name(prev_tok,get_p_f_wp): #Add only proper nouns into list\n            p_f_wp.append(get_p_f_wp)\n        else:\n            p_f_wp.append(\"none\")\n                    \n        #get word btwn paranthesis in trunc curr @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_tc_l_wp = find_name_words(name_btwn_paran(curr))  \n        \n        if check_if_name(curr_tok,get_tc_l_wp): #Add only proper nouns into list\n            tc_l_wp.append(get_tc_l_wp)\n        else:\n            tc_l_wp.append(\"none\")\n                        \n        #get last subj in remainder @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_r_f_s = \"none\"\n        for n in [1,2,3,4,5,6,7,8]: #in the final version, each of the name subjects will be accunted for\n            dummy_r_f_s = find_nth_subj(curr_doc,n)\n            if dummy_r_f_s in remainder and check_if_name(curr_tok,dummy_r_f_s):\n                get_r_f_s = dummy_r_f_s \n            \n        r_f_s.append(get_r_f_s)\n                    \n        #get last dobj in remainder @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_r_f_o = \"none\"\n        for n in [1,2,3,4,5,6,7,8]: #in the final version, each of the name objects will be accunted for\n            dummy_r_f_o = find_nth_dobj(curr_doc,n)\n            if dummy_r_f_o in remainder and check_if_name(curr_tok,dummy_r_f_o):\n                get_r_f_o = dummy_r_f_o \n            \n        r_f_o.append(get_r_f_o)\n                    \n        #get last appos in remainder @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_r_f_a = \"none\"\n        for n in [1,2,3,4]:\n            dummy_r_f_a = find_nth_appos(curr_doc,n)\n            if dummy_r_f_a in remainder and check_if_name(curr_tok,dummy_r_f_a): \n                get_r_f_a = dummy_r_f_a \n            \n        r_f_a.append(get_r_f_a)\n               \n        #get first appos in current @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_c_f_a = \"none\"\n        for n in [1,2,3,4]:\n            dummy_c_f_a = find_nth_appos(curr_doc,n)\n            if check_if_name(curr_tok,dummy_c_f_a) and get_c_f_a == \"none\": \n                get_c_f_a = dummy_c_f_a \n            \n        c_f_a.append(get_c_f_a)\n                \n        #get first appos in prev @@@@@@@@@@@@@@@@@@@@@@@@@@@\n        get_p_f_a = \"none\"\n        for n in [1,2,3,4]:\n            dummy_p_f_a = find_nth_appos(prev_doc,n)\n            if check_if_name(prev_tok,dummy_p_f_a) and get_p_f_a == \"none\": \n                get_p_f_a = dummy_p_f_a \n            \n        p_f_a.append(get_p_f_a)\n            \n        #check_if_poss_her\n        poss_her.append(check_if_poss_her(curr_doc, pronoun))\n    \n        #rand_forest classifier for pronoun type:\n        if pronoun == \"he\" or pronoun == \"she\": \n            pro_typ.append(1)\n        elif pronoun == \"He\" or pronoun == \"She\": \n            pro_typ.append(2)\n        elif pronoun == \"his\" or (pronoun == \"her\" and get_poss_her): \n            pro_typ.append(3)\n        elif pronoun == \"him\" or (pronoun == \"her\" and not get_poss_her): \n            pro_typ.append(4)\n        elif pronoun == \"His\" or (pronoun == \"Her\" and get_poss_her): \n            pro_typ.append(5)\n        else:\n            pro_typ.append(6)\n    \n        dict_of_all[\"p_f_s\"] = get_p_f_s\n        dict_of_all[\"p_l_s\"] = get_p_l_s\n        dict_of_all[\"p_f_o\"] = get_p_f_o\n        dict_of_all[\"p_l_o\"] = get_p_l_o\n        dict_of_all[\"tc_f_s\"] = get_tc_f_s\n        dict_of_all[\"tc_f_o\"] = get_tc_f_o\n        dict_of_all[\"tc_f_a\"] = get_tc_f_a\n        dict_of_all[\"tc_l_s\"] = get_tc_l_s\n        dict_of_all[\"tc_l_o\"] = get_tc_l_o\n        dict_of_all[\"tc_l_p\"] = get_tc_l_p\n        dict_of_all[\"p_f_wp\"] = get_p_f_wp\n        dict_of_all[\"tc_l_wp\"] = get_tc_l_wp\n        dict_of_all[\"tc_l_nw\"] = get_tc_l_nw\n        dict_of_all[\"r_f_s\"] = get_r_f_s\n        dict_of_all[\"r_f_o\"] = get_r_f_o\n        dict_of_all[\"r_f_a\"] = get_r_f_a\n        dict_of_all[\"p_f_a\"] = get_p_f_a\n        dict_of_all[\"c_f_a\"] = get_c_f_a\n        dict_of_all[\"poss_her\"] = poss_her\n        \n        dict_of_all_list.append(dict_of_all)","f420c539":"#AND NOW COPY-PASTE ALL THAT FEATURE EXTRACTION PROCEDURE FROM THE TRAINING CELLS:\n\ndata_matrix = []\ndata_matrix1 = []\ndata_matrix2 = []\ndata_matrix3 = []\ndata_matrix4 = []\ndata_matrix5 = []\ndata_matrix6 = []\n\nte_pro_t1_idxs = []\nte_pro_t2_idxs = []\nte_pro_t3_idxs = []\nte_pro_t4_idxs = []\nte_pro_t5_idxs = []\nte_pro_t6_idxs = []\n\nfor idx in range(len(p_f_s)):\n    \n    data_vector = []\n    \n    if p_f_s[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)    \n    if p_l_s[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)\n    if p_f_o[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)\n    if p_l_o[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)\n    if tc_f_s[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)\n    if tc_f_o[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_f_a[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_l_s[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_l_o[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_l_p[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if p_f_wp[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_l_wp[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if tc_l_nw[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if r_f_s[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if r_f_o[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if r_f_a[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if p_f_a[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if c_f_a[idx] == \"none\":\n        data_vector.append(0)\n    else:\n        data_vector.append(1)   \n    if poss_her[idx] == True:\n        data_vector.append(1)\n    else:\n        data_vector.append(0)\n    #pronoun type, already numerical\n    if pro_typ[idx] == 1:\n        te_pro_t1_idxs.append(idx)\n        data_matrix1.append(data_vector)\n    if pro_typ[idx] == 2:\n        te_pro_t2_idxs.append(idx)\n        data_matrix2.append(data_vector)\n    if pro_typ[idx] == 3:\n        te_pro_t3_idxs.append(idx)\n        data_matrix3.append(data_vector)\n    if pro_typ[idx] == 4:\n        te_pro_t4_idxs.append(idx)\n        data_matrix4.append(data_vector)\n    if pro_typ[idx] == 5:\n        te_pro_t5_idxs.append(idx)\n        data_matrix5.append(data_vector)\n    if pro_typ[idx] == 6:\n        te_pro_t6_idxs.append(idx)\n        data_matrix6.append(data_vector)\n    \n    data_matrix.append(data_vector)\n    \ntest1_df = pd.DataFrame(data_matrix1, columns = dict_of_all_list[0].keys())\ntest2_df = pd.DataFrame(data_matrix2, columns = dict_of_all_list[0].keys())\ntest3_df = pd.DataFrame(data_matrix3, columns = dict_of_all_list[0].keys())\ntest4_df = pd.DataFrame(data_matrix4, columns = dict_of_all_list[0].keys())\ntest5_df = pd.DataFrame(data_matrix5, columns = dict_of_all_list[0].keys())\ntest6_df = pd.DataFrame(data_matrix6, columns = dict_of_all_list[0].keys())","45242504":"def train_n_pred(train_df, test_df, clf, train_y_list, train_y_idx):\n    features = train_df.columns[:-1]\n    train_y = [train_y_list[i] for i in train_y_idx]\n    train_y = np.asarray(train_y)\n    clf.fit(train_df[features], train_y)\n    return clf.predict(test_df[features])","b5904835":"# CASE I : PRONOUN TYPE 1:\npred_C1_p_f_s = train_n_pred(clf1_df, test1_df, clf, p_f_s_clf, tr_pro_t1_idxs)\npred_C1_p_l_s = train_n_pred(clf1_df, test1_df, clf, p_l_s_clf, tr_pro_t1_idxs)\npred_C1_p_f_o = train_n_pred(clf1_df, test1_df, clf, p_f_o_clf, tr_pro_t1_idxs)\npred_C1_p_l_o = train_n_pred(clf1_df, test1_df, clf, p_l_o_clf, tr_pro_t1_idxs)\npred_C1_tc_f_s = train_n_pred(clf1_df, test1_df, clf, tc_f_s_clf, tr_pro_t1_idxs)\npred_C1_tc_f_o = train_n_pred(clf1_df, test1_df, clf, tc_f_o_clf, tr_pro_t1_idxs)\npred_C1_tc_f_a = train_n_pred(clf1_df, test1_df, clf, tc_f_a_clf, tr_pro_t1_idxs)\npred_C1_tc_l_s = train_n_pred(clf1_df, test1_df, clf, tc_l_s_clf, tr_pro_t1_idxs)\npred_C1_tc_l_o = train_n_pred(clf1_df, test1_df, clf, tc_l_o_clf, tr_pro_t1_idxs)\npred_C1_tc_l_p = train_n_pred(clf1_df, test1_df, clf, tc_l_p_clf, tr_pro_t1_idxs)\npred_C1_p_f_wp = train_n_pred(clf1_df, test1_df, clf, p_f_wp_clf, tr_pro_t1_idxs)\npred_C1_tc_l_wp = train_n_pred(clf1_df, test1_df, clf, tc_l_wp_clf, tr_pro_t1_idxs)\npred_C1_tc_l_nw = train_n_pred(clf1_df, test1_df, clf, tc_l_nw_clf, tr_pro_t1_idxs)\npred_C1_r_f_s = train_n_pred(clf1_df, test1_df, clf, r_f_s_clf, tr_pro_t1_idxs)\npred_C1_r_f_o = train_n_pred(clf1_df, test1_df, clf, r_f_o_clf, tr_pro_t1_idxs)\npred_C1_r_f_a = train_n_pred(clf1_df, test1_df, clf, r_f_a_clf, tr_pro_t1_idxs)\npred_C1_p_f_a = train_n_pred(clf1_df, test1_df, clf, p_f_a_clf, tr_pro_t1_idxs)\npred_C1_c_f_a = train_n_pred(clf1_df, test1_df, clf, c_f_a_clf, tr_pro_t1_idxs)\n\n# CASE II : PRONOUN TYPE 2:\npred_C2_p_f_s = train_n_pred(clf2_df, test2_df, clf, p_f_s_clf, tr_pro_t2_idxs)\npred_C2_p_l_s = train_n_pred(clf2_df, test2_df, clf, p_l_s_clf, tr_pro_t2_idxs)\npred_C2_p_f_o = train_n_pred(clf2_df, test2_df, clf, p_f_o_clf, tr_pro_t2_idxs)\npred_C2_p_l_o = train_n_pred(clf2_df, test2_df, clf, p_l_o_clf, tr_pro_t2_idxs)\npred_C2_tc_f_s = train_n_pred(clf2_df, test2_df, clf, tc_f_s_clf, tr_pro_t2_idxs)\npred_C2_tc_f_o = train_n_pred(clf2_df, test2_df, clf, tc_f_o_clf, tr_pro_t2_idxs)\npred_C2_tc_f_a = train_n_pred(clf2_df, test2_df, clf, tc_f_a_clf, tr_pro_t2_idxs)\npred_C2_tc_l_s = train_n_pred(clf2_df, test2_df, clf, tc_l_s_clf, tr_pro_t2_idxs)\npred_C2_tc_l_o = train_n_pred(clf2_df, test2_df, clf, tc_l_o_clf, tr_pro_t2_idxs)\npred_C2_tc_l_p = train_n_pred(clf2_df, test2_df, clf, tc_l_p_clf, tr_pro_t2_idxs)\npred_C2_p_f_wp = train_n_pred(clf2_df, test2_df, clf, p_f_wp_clf, tr_pro_t2_idxs)\npred_C2_tc_l_wp = train_n_pred(clf2_df, test2_df, clf, tc_l_wp_clf, tr_pro_t2_idxs)\npred_C2_tc_l_nw = train_n_pred(clf2_df, test2_df, clf, tc_l_nw_clf, tr_pro_t2_idxs)\npred_C2_r_f_s = train_n_pred(clf2_df, test2_df, clf, r_f_s_clf, tr_pro_t2_idxs)\npred_C2_r_f_o = train_n_pred(clf2_df, test2_df, clf, r_f_o_clf, tr_pro_t2_idxs)\npred_C2_r_f_a = train_n_pred(clf2_df, test2_df, clf, r_f_a_clf, tr_pro_t2_idxs)\npred_C2_p_f_a = train_n_pred(clf2_df, test2_df, clf, p_f_a_clf, tr_pro_t2_idxs)\npred_C2_c_f_a = train_n_pred(clf2_df, test2_df, clf, c_f_a_clf, tr_pro_t2_idxs)\n\n# CASE III : PRONOUN TYPE 3:\npred_C3_p_f_s = train_n_pred(clf3_df, test3_df, clf, p_f_s_clf, tr_pro_t3_idxs)\npred_C3_p_l_s = train_n_pred(clf3_df, test3_df, clf, p_l_s_clf, tr_pro_t3_idxs)\npred_C3_p_f_o = train_n_pred(clf3_df, test3_df, clf, p_f_o_clf, tr_pro_t3_idxs)\npred_C3_p_l_o = train_n_pred(clf3_df, test3_df, clf, p_l_o_clf, tr_pro_t3_idxs)\npred_C3_tc_f_s = train_n_pred(clf3_df, test3_df, clf, tc_f_s_clf, tr_pro_t3_idxs)\npred_C3_tc_f_o = train_n_pred(clf3_df, test3_df, clf, tc_f_o_clf, tr_pro_t3_idxs)\npred_C3_tc_f_a = train_n_pred(clf3_df, test3_df, clf, tc_f_a_clf, tr_pro_t3_idxs)\npred_C3_tc_l_s = train_n_pred(clf3_df, test3_df, clf, tc_l_s_clf, tr_pro_t3_idxs)\npred_C3_tc_l_o = train_n_pred(clf3_df, test3_df, clf, tc_l_o_clf, tr_pro_t3_idxs)\npred_C3_tc_l_p = train_n_pred(clf3_df, test3_df, clf, tc_l_p_clf, tr_pro_t3_idxs)\npred_C3_p_f_wp = train_n_pred(clf3_df, test3_df, clf, p_f_wp_clf, tr_pro_t3_idxs)\npred_C3_tc_l_wp = train_n_pred(clf3_df, test3_df, clf, tc_l_wp_clf, tr_pro_t3_idxs)\npred_C3_tc_l_nw = train_n_pred(clf3_df, test3_df, clf, tc_l_nw_clf, tr_pro_t3_idxs)\npred_C3_r_f_s = train_n_pred(clf3_df, test3_df, clf, r_f_s_clf, tr_pro_t3_idxs)\npred_C3_r_f_o = train_n_pred(clf3_df, test3_df, clf, r_f_o_clf, tr_pro_t3_idxs)\npred_C3_r_f_a = train_n_pred(clf3_df, test3_df, clf, r_f_a_clf, tr_pro_t3_idxs)\npred_C3_p_f_a = train_n_pred(clf3_df, test3_df, clf, p_f_a_clf, tr_pro_t3_idxs)\npred_C3_c_f_a = train_n_pred(clf3_df, test3_df, clf, c_f_a_clf, tr_pro_t3_idxs)\n\n# CASE IV : PRONOUN TYPE 4:\npred_C4_p_f_s = train_n_pred(clf4_df, test4_df, clf, p_f_s_clf, tr_pro_t4_idxs)\npred_C4_p_l_s = train_n_pred(clf4_df, test4_df, clf, p_l_s_clf, tr_pro_t4_idxs)\npred_C4_p_f_o = train_n_pred(clf4_df, test4_df, clf, p_f_o_clf, tr_pro_t4_idxs)\npred_C4_p_l_o = train_n_pred(clf4_df, test4_df, clf, p_l_o_clf, tr_pro_t4_idxs)\npred_C4_tc_f_s = train_n_pred(clf4_df, test4_df, clf, tc_f_s_clf, tr_pro_t4_idxs)\npred_C4_tc_f_o = train_n_pred(clf4_df, test4_df, clf, tc_f_o_clf, tr_pro_t4_idxs)\npred_C4_tc_f_a = train_n_pred(clf4_df, test4_df, clf, tc_f_a_clf, tr_pro_t4_idxs)\npred_C4_tc_l_s = train_n_pred(clf4_df, test4_df, clf, tc_l_s_clf, tr_pro_t4_idxs)\npred_C4_tc_l_o = train_n_pred(clf4_df, test4_df, clf, tc_l_o_clf, tr_pro_t4_idxs)\npred_C4_tc_l_p = train_n_pred(clf4_df, test4_df, clf, tc_l_p_clf, tr_pro_t4_idxs)\npred_C4_p_f_wp = train_n_pred(clf4_df, test4_df, clf, p_f_wp_clf, tr_pro_t4_idxs)\npred_C4_tc_l_wp = train_n_pred(clf4_df, test4_df, clf, tc_l_wp_clf, tr_pro_t4_idxs)\npred_C4_tc_l_nw = train_n_pred(clf4_df, test4_df, clf, tc_l_nw_clf, tr_pro_t4_idxs)\npred_C4_r_f_s = train_n_pred(clf4_df, test4_df, clf, r_f_s_clf, tr_pro_t4_idxs)\npred_C4_r_f_o = train_n_pred(clf4_df, test4_df, clf, r_f_o_clf, tr_pro_t4_idxs)\npred_C4_r_f_a = train_n_pred(clf4_df, test4_df, clf, r_f_a_clf, tr_pro_t4_idxs)\npred_C4_p_f_a = train_n_pred(clf4_df, test4_df, clf, p_f_a_clf, tr_pro_t4_idxs)\npred_C4_c_f_a = train_n_pred(clf4_df, test4_df, clf, c_f_a_clf, tr_pro_t4_idxs)\n\n# CASE V : PRONOUN TYPE V:\npred_C5_p_f_s = train_n_pred(clf5_df, test5_df, clf, p_f_s_clf, tr_pro_t5_idxs)\npred_C5_p_l_s = train_n_pred(clf5_df, test5_df, clf, p_l_s_clf, tr_pro_t5_idxs)\npred_C5_p_f_o = train_n_pred(clf5_df, test5_df, clf, p_f_o_clf, tr_pro_t5_idxs)\npred_C5_p_l_o = train_n_pred(clf5_df, test5_df, clf, p_l_o_clf, tr_pro_t5_idxs)\npred_C5_tc_f_s = train_n_pred(clf5_df, test5_df, clf, tc_f_s_clf, tr_pro_t5_idxs)\npred_C5_tc_f_o = train_n_pred(clf5_df, test5_df, clf, tc_f_o_clf, tr_pro_t5_idxs)\npred_C5_tc_f_a = train_n_pred(clf5_df, test5_df, clf, tc_f_a_clf, tr_pro_t5_idxs)\npred_C5_tc_l_s = train_n_pred(clf5_df, test5_df, clf, tc_l_s_clf, tr_pro_t5_idxs)\npred_C5_tc_l_o = train_n_pred(clf5_df, test5_df, clf, tc_l_o_clf, tr_pro_t5_idxs)\npred_C5_tc_l_p = train_n_pred(clf5_df, test5_df, clf, tc_l_p_clf, tr_pro_t5_idxs)\npred_C5_p_f_wp = train_n_pred(clf5_df, test5_df, clf, p_f_wp_clf, tr_pro_t5_idxs)\npred_C5_tc_l_wp = train_n_pred(clf5_df, test5_df, clf, tc_l_wp_clf, tr_pro_t5_idxs)\npred_C5_tc_l_nw = train_n_pred(clf5_df, test5_df, clf, tc_l_nw_clf, tr_pro_t5_idxs)\npred_C5_r_f_s = train_n_pred(clf5_df, test5_df, clf, r_f_s_clf, tr_pro_t5_idxs)\npred_C5_r_f_o = train_n_pred(clf5_df, test5_df, clf, r_f_o_clf, tr_pro_t5_idxs)\npred_C5_r_f_a = train_n_pred(clf5_df, test5_df, clf, r_f_a_clf, tr_pro_t5_idxs)\npred_C5_p_f_a = train_n_pred(clf5_df, test5_df, clf, p_f_a_clf, tr_pro_t5_idxs)\npred_C5_c_f_a = train_n_pred(clf5_df, test5_df, clf, c_f_a_clf, tr_pro_t5_idxs)\n","90a74138":"#Now convert predictions to list of names: (The lists were over-written with test data.)\nlist_of_pred_names = []\nfor idx in range(len(p_f_s)):\n    current_predictions = []\n    \n    if idx in te_pro_t1_idxs:\n        pred_p_f_s = pred_C1_p_f_s[te_pro_t1_idxs.index(idx)]  \n        pred_p_l_s = pred_C1_p_l_s[te_pro_t1_idxs.index(idx)]\n        pred_p_f_o = pred_C1_p_f_o[te_pro_t1_idxs.index(idx)]\n        pred_p_l_o = pred_C1_p_l_o[te_pro_t1_idxs.index(idx)]\n        pred_tc_f_s = pred_C1_tc_f_s[te_pro_t1_idxs.index(idx)]\n        pred_tc_f_o = pred_C1_tc_f_o[te_pro_t1_idxs.index(idx)]\n        pred_tc_f_a = pred_C1_tc_f_a[te_pro_t1_idxs.index(idx)]\n        pred_tc_l_s = pred_C1_tc_l_s[te_pro_t1_idxs.index(idx)]\n        pred_tc_l_o = pred_C1_tc_l_o[te_pro_t1_idxs.index(idx)]\n        pred_tc_l_p = pred_C1_tc_l_p[te_pro_t1_idxs.index(idx)]\n        pred_p_f_wp = pred_C1_p_f_wp[te_pro_t1_idxs.index(idx)]\n        pred_tc_l_wp = pred_C1_tc_l_wp[te_pro_t1_idxs.index(idx)]\n        pred_tc_l_nw = pred_C1_tc_l_nw[te_pro_t1_idxs.index(idx)]\n        pred_r_f_s = pred_C1_r_f_s[te_pro_t1_idxs.index(idx)]\n        pred_r_f_o = pred_C1_r_f_o[te_pro_t1_idxs.index(idx)]\n        pred_r_f_a = pred_C1_r_f_a[te_pro_t1_idxs.index(idx)]\n        pred_p_f_a = pred_C1_p_f_a[te_pro_t1_idxs.index(idx)]\n        pred_c_f_a = pred_C1_c_f_a[te_pro_t1_idxs.index(idx)]\n    if idx in te_pro_t2_idxs:\n        pred_p_f_s = pred_C2_p_f_s[te_pro_t2_idxs.index(idx)]\n        pred_p_l_s = pred_C2_p_l_s[te_pro_t2_idxs.index(idx)]\n        pred_p_f_o = pred_C2_p_f_o[te_pro_t2_idxs.index(idx)]\n        pred_p_l_o = pred_C2_p_l_o[te_pro_t2_idxs.index(idx)]\n        pred_tc_f_s = pred_C2_tc_f_s[te_pro_t2_idxs.index(idx)]\n        pred_tc_f_o = pred_C2_tc_f_o[te_pro_t2_idxs.index(idx)]\n        pred_tc_f_a = pred_C2_tc_f_a[te_pro_t2_idxs.index(idx)]\n        pred_tc_l_s = pred_C2_tc_l_s[te_pro_t2_idxs.index(idx)]\n        pred_tc_l_o = pred_C2_tc_l_o[te_pro_t2_idxs.index(idx)]\n        pred_tc_l_p = pred_C2_tc_l_p[te_pro_t2_idxs.index(idx)]\n        pred_p_f_wp = pred_C2_p_f_wp[te_pro_t2_idxs.index(idx)]\n        pred_tc_l_wp = pred_C2_tc_l_wp[te_pro_t2_idxs.index(idx)]\n        pred_tc_l_nw = pred_C2_tc_l_nw[te_pro_t2_idxs.index(idx)]\n        pred_r_f_s = pred_C2_r_f_s[te_pro_t2_idxs.index(idx)]\n        pred_r_f_o = pred_C2_r_f_o[te_pro_t2_idxs.index(idx)]\n        pred_r_f_a = pred_C2_r_f_a[te_pro_t2_idxs.index(idx)]\n        pred_p_f_a = pred_C2_p_f_a[te_pro_t2_idxs.index(idx)]\n        pred_c_f_a = pred_C2_c_f_a[te_pro_t2_idxs.index(idx)]\n    if idx in te_pro_t3_idxs:\n        pred_p_f_s = pred_C3_p_f_s[te_pro_t3_idxs.index(idx)]\n        pred_p_l_s = pred_C3_p_l_s[te_pro_t3_idxs.index(idx)]\n        pred_p_f_o = pred_C3_p_f_o[te_pro_t3_idxs.index(idx)]\n        pred_p_l_o = pred_C3_p_l_o[te_pro_t3_idxs.index(idx)]\n        pred_tc_f_s = pred_C3_tc_f_s[te_pro_t3_idxs.index(idx)]\n        pred_tc_f_o = pred_C3_tc_f_o[te_pro_t3_idxs.index(idx)]\n        pred_tc_f_a = pred_C3_tc_f_a[te_pro_t3_idxs.index(idx)]\n        pred_tc_l_s = pred_C3_tc_l_s[te_pro_t3_idxs.index(idx)]\n        pred_tc_l_o = pred_C3_tc_l_o[te_pro_t3_idxs.index(idx)]\n        pred_tc_l_p = pred_C3_tc_l_p[te_pro_t3_idxs.index(idx)]\n        pred_p_f_wp = pred_C3_p_f_wp[te_pro_t3_idxs.index(idx)]\n        pred_tc_l_wp = pred_C3_tc_l_wp[te_pro_t3_idxs.index(idx)]\n        pred_tc_l_nw = pred_C3_tc_l_nw[te_pro_t3_idxs.index(idx)]\n        pred_r_f_s = pred_C3_r_f_s[te_pro_t3_idxs.index(idx)]\n        pred_r_f_o = pred_C3_r_f_o[te_pro_t3_idxs.index(idx)]\n        pred_r_f_a = pred_C3_r_f_a[te_pro_t3_idxs.index(idx)]\n        pred_p_f_a = pred_C3_p_f_a[te_pro_t3_idxs.index(idx)]\n        pred_c_f_a = pred_C3_c_f_a[te_pro_t3_idxs.index(idx)]\n    if idx in te_pro_t4_idxs:\n        pred_p_f_s = pred_C4_p_f_s[te_pro_t4_idxs.index(idx)]\n        pred_p_l_s = pred_C4_p_l_s[te_pro_t4_idxs.index(idx)]\n        pred_p_f_o = pred_C4_p_f_o[te_pro_t4_idxs.index(idx)]\n        pred_p_l_o = pred_C4_p_l_o[te_pro_t4_idxs.index(idx)]\n        pred_tc_f_s = pred_C4_tc_f_s[te_pro_t4_idxs.index(idx)]\n        pred_tc_f_o = pred_C4_tc_f_o[te_pro_t4_idxs.index(idx)]\n        pred_tc_f_a = pred_C4_tc_f_a[te_pro_t4_idxs.index(idx)]\n        pred_tc_l_s = pred_C4_tc_l_s[te_pro_t4_idxs.index(idx)]\n        pred_tc_l_o = pred_C4_tc_l_o[te_pro_t4_idxs.index(idx)]\n        pred_tc_l_p = pred_C4_tc_l_p[te_pro_t4_idxs.index(idx)]\n        pred_p_f_wp = pred_C4_p_f_wp[te_pro_t4_idxs.index(idx)]\n        pred_tc_l_wp = pred_C4_tc_l_wp[te_pro_t4_idxs.index(idx)]\n        pred_tc_l_nw = pred_C4_tc_l_nw[te_pro_t4_idxs.index(idx)]\n        pred_r_f_s = pred_C4_r_f_s[te_pro_t4_idxs.index(idx)]\n        pred_r_f_o = pred_C4_r_f_o[te_pro_t4_idxs.index(idx)]\n        pred_r_f_a = pred_C4_r_f_a[te_pro_t4_idxs.index(idx)]\n        pred_p_f_a = pred_C4_p_f_a[te_pro_t4_idxs.index(idx)]\n        pred_c_f_a = pred_C4_c_f_a[te_pro_t4_idxs.index(idx)]\n    if idx in te_pro_t5_idxs:\n        pred_p_f_s = pred_C5_p_f_s[te_pro_t5_idxs.index(idx)]\n        pred_p_l_s = pred_C5_p_l_s[te_pro_t5_idxs.index(idx)]\n        pred_p_f_o = pred_C5_p_f_o[te_pro_t5_idxs.index(idx)]\n        pred_p_l_o = pred_C5_p_l_o[te_pro_t5_idxs.index(idx)]\n        pred_tc_f_s = pred_C5_tc_f_s[te_pro_t5_idxs.index(idx)]\n        pred_tc_f_o = pred_C5_tc_f_o[te_pro_t5_idxs.index(idx)]\n        pred_tc_f_a = pred_C5_tc_f_a[te_pro_t5_idxs.index(idx)]\n        pred_tc_l_s = pred_C5_tc_l_s[te_pro_t5_idxs.index(idx)]\n        pred_tc_l_o = pred_C5_tc_l_o[te_pro_t5_idxs.index(idx)]\n        pred_tc_l_p = pred_C5_tc_l_p[te_pro_t5_idxs.index(idx)]\n        pred_p_f_wp = pred_C5_p_f_wp[te_pro_t5_idxs.index(idx)]\n        pred_tc_l_wp = pred_C5_tc_l_wp[te_pro_t5_idxs.index(idx)]\n        pred_tc_l_nw = pred_C5_tc_l_nw[te_pro_t5_idxs.index(idx)]\n        pred_r_f_s = pred_C5_r_f_s[te_pro_t5_idxs.index(idx)]\n        pred_r_f_o = pred_C5_r_f_o[te_pro_t5_idxs.index(idx)]\n        pred_r_f_a = pred_C5_r_f_a[te_pro_t5_idxs.index(idx)]\n        pred_p_f_a = pred_C5_p_f_a[te_pro_t5_idxs.index(idx)]\n        pred_c_f_a = pred_C5_c_f_a[te_pro_t5_idxs.index(idx)]\n    if idx in te_pro_t6_idxs:\n        pred_p_f_s = pred_C6_p_f_s[te_pro_t6_idxs.index(idx)]\n        pred_p_l_s = pred_C6_p_l_s[te_pro_t6_idxs.index(idx)]\n        pred_p_f_o = pred_C6_p_f_o[te_pro_t6_idxs.index(idx)]\n        pred_p_l_o = pred_C6_p_l_o[te_pro_t6_idxs.index(idx)]\n        pred_tc_f_s = pred_C6_tc_f_s[te_pro_t6_idxs.index(idx)]\n        pred_tc_f_o = pred_C6_tc_f_o[te_pro_t6_idxs.index(idx)]\n        pred_tc_f_a = pred_C6_tc_f_a[te_pro_t6_idxs.index(idx)]\n        pred_tc_l_s = pred_C6_tc_l_s[te_pro_t6_idxs.index(idx)]\n        pred_tc_l_o = pred_C6_tc_l_o[te_pro_t6_idxs.index(idx)]\n        pred_tc_l_p = pred_C6_tc_l_p[te_pro_t6_idxs.index(idx)]\n        pred_p_f_wp = pred_C6_p_f_wp[te_pro_t6_idxs.index(idx)]\n        pred_tc_l_wp = pred_C6_tc_l_wp[te_pro_t6_idxs.index(idx)]\n        pred_tc_l_nw = pred_C6_tc_l_nw[te_pro_t6_idxs.index(idx)]\n        pred_r_f_s = pred_C6_r_f_s[te_pro_t6_idxs.index(idx)]\n        pred_r_f_o = pred_C6_r_f_o[te_pro_t6_idxs.index(idx)]\n        pred_r_f_a = pred_C6_r_f_a[te_pro_t6_idxs.index(idx)]\n        pred_p_f_a = pred_C6_p_f_a[te_pro_t6_idxs.index(idx)]\n        pred_c_f_a = pred_C6_c_f_a[te_pro_t6_idxs.index(idx)]\n    \n    if pred_p_f_s == 1:\n        current_predictions.append(p_f_s[idx])\n    if pred_p_l_s == 1:\n        current_predictions.append(p_l_s[idx])\n    if pred_p_f_o == 1:\n        current_predictions.append(p_f_o[idx])\n    if pred_p_l_o == 1:\n        current_predictions.append(p_l_o[idx])\n    if pred_tc_f_s == 1:\n        current_predictions.append(tc_f_s[idx])\n    if pred_tc_f_o == 1:\n        current_predictions.append(tc_f_o[idx])\n    if pred_tc_f_a == 1:\n        current_predictions.append(tc_f_a[idx])\n    if pred_tc_l_s == 1:\n        current_predictions.append(tc_l_s[idx])\n    if pred_tc_l_o == 1:\n        current_predictions.append(tc_l_o[idx])\n    if pred_tc_l_p == 1:\n        current_predictions.append(tc_l_p[idx])\n    if pred_p_f_wp == 1:\n        current_predictions.append(p_f_wp[idx])\n    if pred_tc_l_wp == 1:\n        current_predictions.append(tc_l_wp[idx])\n    if pred_tc_l_nw == 1:\n        current_predictions.append(tc_l_nw[idx])\n    if pred_r_f_s == 1:\n        current_predictions.append(r_f_s[idx])\n    if pred_r_f_o == 1:\n        current_predictions.append(r_f_o[idx])\n    if pred_r_f_a == 1:\n        current_predictions.append(r_f_a[idx])\n    if pred_p_f_a == 1:\n        current_predictions.append(p_f_a[idx])\n    if pred_c_f_a == 1:\n        current_predictions.append(c_f_a[idx])\n        \n    list_of_pred_names.append(current_predictions)","8e646d8e":"#Compare Random Forest preds with A and B: \nwith open('..\/input\/gendered-pronoun-resolution\/test_stage_1.tsv') as tsvfile:\n    \n    reader = csv.DictReader(tsvfile, dialect='excel-tab')\n    count_idx = 0\n    test_ids = []\n    results_A = []\n    results_B = []\n    results_N = []\n    \n    for row in reader:\n        \n        result_A = 0.33\n        result_B = 0.33\n        result_N = 0.33\n        \n        test_ids.append(row['ID'])\n        \n        num_A = 0\n        num_B = 0\n            \n        for name in list_of_pred_names[count_idx]:    \n            if name in row['A']:\n                num_A += 1 \n            elif name in row['B']:\n                num_B += 1\n                \n        if num_A >= 1:\n            result_A = 0.56 + num_A*0.2 #numbers are arbitrary\n        if num_B >= 1:\n            result_B = 0.56 + num_B*0.2 #numbers are arbitrary\n        if num_A > num_B:\n            result_A += 0.15 \n            result_B -= 0.15\n        if num_A == 0 and num_B == 0:\n            result_N = 0.86\n            result_A = 0.1\n            result_B = 0.1\n        \n        results_A.append(result_A)\n        results_B.append(result_B)\n        results_N.append(result_N)\n        \n        count_idx += 1","f8315e6a":"from sklearn import metrics\n# Model Accuracy, how often is the classifier correct?\n#print(\"Accuracy:\",metrics.accuracy_score(y, pred_y))","8b2120e9":"his_her_list = []\ncount = 0\nfor pronoun in pronoun_list:\n    if pronoun == \"his\" or pronoun == \"her\":\n        his_her_list.append(count)\n    count += 1","52cce012":"### rules for \"her\" or \"his\": # represents sent num (each sent diff rule):\n#1 if no subj or obj in trunc curr, then not the prev subj but the prev obj\n#2","681c6650":"analyze = \"Slant Magazine's Sal Cinquemani viewed the album as formulaic and ``competently, often frustratingly more of the same from an artist who still seems capable of much more.'' Greg Kot of the Chicago Tribune perceived ``formula production and hack songwriting'', but complimented Pink's personality and its ``handful'' of worthy tracks. In his list for The Barnes & Noble Review, Robert Christgau named The Truth About Love the fourth best album of 2012.\"","d537efb2":"curr, prev, trunc_curr, remainder = curr_prev_sentence(analyze, pronoun_offset_list[5])\nanalyze_para_lst = find_name_words(name_btwn_paran(trunc_curr))\ntok = word_tokenize(curr)","c200c4d7":"doc = nlp(curr)","1044ccde":"list_of_name_words(tok)","d1750865":"curr_tok = word_tokenize(curr)\nfor n in [1,2,3,4]:\n    dummy_r_f_a = find_nth_appos(doc,n)\n    #if dummy_r_f_a in remainder and check_if_name(curr_tok,dummy_r_f_a): \n    print(dummy_r_f_a) ","b67cd9d7":"out_df = pd.DataFrame({\"ID\":test_ids})","d2af6d73":"out_df['A'] = results_A\nout_df['B'] = results_B\nout_df['NEITHER'] = results_N","4ce9b656":"out_df.to_csv(\"submission.csv\", index=False)","6878b8e4":"print(text_list[0])\nprint(\"0\")\nprint(text_list[1])\nprint(\"1\")\nprint(text_list[2])\nprint(\"2\")\nprint(text_list[3])\nprint(\"3\")\nprint(text_list[5])\nprint(\"5\")\nprint(text_list[7])\nprint(\"7\")\nprint(text_list[14])\nprint(\"14\")\nprint(text_list[16])\nprint(\"16\")\nprint(text_list[18])\nprint(\"18\")\nprint(text_list[19])\nprint(\"19\")\nprint(text_list[23])\nprint(\"23\")\nprint(text_list[24])\nprint(\"24\")\nprint(text_list[25])\nprint(\"25\")\nprint(text_list[26])\nprint(\"26\")\nprint(text_list[27])\nprint(\"27\")\nprint(text_list[28])\nprint(\"28\")\nprint(text_list[29])\nprint(\"29\")\nprint(text_list[220])\nprint(\"220\")\nprint(text_list[221])\nprint(\"221\")\nprint(text_list[224])\nprint(\"224\")\nprint(text_list[226])\nprint(\"226\")\nprint(text_list[228])\nprint(\"228\")\nprint(text_list[229])\nprint(\"229\")\nprint(text_list[230])\nprint(\"230\")\nprint(text_list[231])\nprint(\"231\")\nprint(text_list[232])\nprint(\"232\")\nprint(text_list[233])\nprint(\"233\")\nprint(text_list[234])\nprint(\"234\")\nprint(text_list[237])\nprint(\"237\")\nprint(text_list[240])\nprint(\"240\")\nprint(text_list[245])\nprint(\"245\")\nprint(text_list[246])\nprint(\"246\")\nprint(text_list[247])\nprint(\"247\")\nprint(text_list[249])\nprint(\"249\")","d6548db0":"#RAND FOREST TRAINING DATA\ntr_p_f_s = [p_f_s_clf[idx] for idx in train_idx] \ntr_p_l_s = [p_l_s_clf[idx] for idx in train_idx]\ntr_p_f_o = [p_f_o_clf[idx] for idx in train_idx]\ntr_p_l_o = [p_l_o_clf[idx] for idx in train_idx]\ntr_tc_f_s = [tc_f_s_clf[idx] for idx in train_idx]\ntr_tc_f_o = [tc_f_o_clf[idx] for idx in train_idx]\ntr_tc_f_a = [tc_f_a_clf[idx] for idx in train_idx]\ntr_tc_l_s = [tc_l_s_clf[idx] for idx in train_idx]\ntr_tc_l_o = [tc_l_o_clf[idx] for idx in train_idx]\ntr_tc_l_p = [tc_l_p_clf[idx] for idx in train_idx]\ntr_p_f_wp = [p_f_wp_clf[idx] for idx in train_idx]\ntr_tc_l_wp = [tc_l_wp_clf[idx] for idx in train_idx]\ntr_tc_l_nw = [tc_l_nw_clf[idx] for idx in train_idx]\ntr_r_f_s = [r_f_s_clf[idx] for idx in train_idx]\ntr_r_f_o = [r_f_o_clf[idx] for idx in train_idx]\ntr_r_f_a = [r_f_a_clf[idx] for idx in train_idx]\ntr_p_f_a = [p_f_a_clf[idx] for idx in train_idx]\ntr_c_f_a = [c_f_a_clf[idx] for idx in train_idx]"}}