{"cell_type":{"9c739a0d":"code","9c9dbfaf":"code","01f3704e":"code","2332330a":"code","bc429d08":"code","8b08dbaa":"code","bf851644":"code","86b5b8d5":"code","d4cae1ba":"code","1e94f9de":"code","eb48123b":"code","4dd2d07b":"code","69eb2237":"code","d3901e2b":"code","dc49cf9f":"code","cd8a3ff7":"code","955518c0":"code","3b4923ea":"code","3925fab3":"code","25b80f0d":"code","b5a991da":"markdown","fab6f285":"markdown","06815edd":"markdown","bdaf74c5":"markdown","7e90f093":"markdown","0d4bb729":"markdown","658e3043":"markdown"},"source":{"9c739a0d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9c9dbfaf":"filepath = \"..\/input\/iris\/Iris.csv\"\ndata = pd.read_csv(filepath)\ndata.head()","01f3704e":"# Number of rows\nprint(data.shape[0])","2332330a":"# Data types\nprint(data.dtypes)","bc429d08":"# Column names\nprint(data.columns.tolist())","8b08dbaa":"# The str method maps the following function to each entry as a string\ndata['Species'] = data.Species.str.replace('Iris-', '')\n# alternatively\n#data['species'] = data.species.apply(lambda r: r.replace('Iris-', ''))\n\ndata.head(10)","bf851644":"# One way to count each species\ndata.Species.value_counts()","86b5b8d5":"data.describe()","d4cae1ba":"# Select just the rows desired from the 'describe' method and add in the 'median'\nstats_df = data.describe()\n#stats_df = data.describe()\nstats_df.loc['range'] = stats_df.loc['max'] - stats_df.loc['min']\n\nout_fields = ['mean','25%','50%','75%', 'range']\nstats_df = stats_df.loc[out_fields]\nstats_df.rename({'50%': 'median'}, inplace=True)\nstats_df","1e94f9de":"# The mean calculation\ndata.groupby('Species').mean()","eb48123b":"# The median calculation\ndata.groupby('Species').median()","4dd2d07b":"# applying multiple functions at once - 2 methods\n\ndata.groupby('Species').agg(['mean', 'median'])  # passing a list of recognized strings\n#data.groupby('species').agg([np.mean, np.median])  # passing a list of explicit aggregation functions","69eb2237":"import matplotlib.pyplot as plt\n%matplotlib inline","d3901e2b":"ax = plt.axes()\n\nax.scatter(data.SepalLengthCm, data.SepalWidthCm)\n\n# Label the axes\nax.set(xlabel='Sepal Length (cm)',\n       ylabel='Sepal Width (cm)',\n       title='Sepal Length vs Width');","dc49cf9f":"# Using Matplotlib's plotting functionality\nax = plt.axes()\nax.hist(data.PetalLengthCm, bins=25);\n\nax.set(xlabel='Petal Length (cm)', \n       ylabel='Frequency',\n       title='Distribution of Petal Lengths');","cd8a3ff7":"# Alternatively using Pandas plotting functionality\nax = data.PetalLengthCm.plot.hist(bins=25)\n\nax.set(xlabel='Petal Length (cm)', \n       ylabel='Frequency',\n       title='Distribution of Petal Lengths');","955518c0":"import seaborn as sns\n# To create four separate plots, use Pandas `.hist` method\naxList = data.hist(bins=25)\n\n# Add some x- and y- labels to first column and last row\nfor ax in axList.flatten():\n    if ax.is_last_row():\n        ax.set_xlabel('Size (cm)')\n        \n    if ax.is_first_col():\n        ax.set_ylabel('Frequency')","3b4923ea":"# First we have to reshape the data so there is \n# only a single measurement in each column\n\nplot_data = (data\n             .set_index('Species')\n             .stack()\n             .to_frame()\n             .reset_index()\n             .rename(columns={0:'size', 'level_1':'measurement'})\n            )\n\nplot_data.head()\n","3925fab3":"# Now plot the dataframe from above using Seaborn\n\nsns.set_style('white')\nsns.set_context('notebook')\nsns.set_palette('dark')\n\nf = plt.figure(figsize=(6,4))\nsns.boxplot(x='measurement', y='size', \n            hue='Species', data=plot_data);","25b80f0d":"sns.set_context('talk')\nsns.pairplot(data, hue='Species');\n","b5a991da":"use Pandas groupby method to group by species before calculating the statistic","fab6f285":"create four individual histogram plots in a single figure, where each plot contains one feature","06815edd":".describe method does have median, but it's not called median. It's the 50% quantile. .describe does not have range though, and in order to get the range, you will need to create a new entry in the .describe table, which is max - min.","bdaf74c5":"# EDA\n","7e90f093":"make a single boxplot where the features are separated in the x-axis and species are colored with different hues","0d4bb729":"Make a scatter plot of sepal_length vs sepal_width using Matplotlib. Label the axes and give the plot a title","658e3043":"Make a pairplot with Seaborn to examine the correlation between each of the measurements.\nthis plot may look complicated, but it is actually only a single line of code. This is the power of Seaborn and dataframe-aware plotting."}}