{"cell_type":{"55754696":"code","fde472d2":"code","80752b43":"code","87b3c655":"code","06780597":"code","238a76e3":"code","1d6819e7":"code","422261ae":"code","21cb5b5f":"code","9b1e063b":"code","4287b59a":"code","43993de8":"code","b27ce876":"code","aba2f6f9":"code","c9d765ca":"code","5ad0abf7":"code","39817724":"code","f816217b":"code","e3612f06":"code","b246fae6":"code","ffc22aad":"code","7e0db2bb":"markdown","aea35694":"markdown","79b76296":"markdown","0500b2c5":"markdown","cc60d1b9":"markdown","39977a20":"markdown","b4cfc328":"markdown","0456a710":"markdown","5b2ff8b8":"markdown","b7b8a0d6":"markdown","9e83015b":"markdown","2e40b437":"markdown","dbb991d3":"markdown","27e17ea2":"markdown","ad10be47":"markdown","6d4995d7":"markdown","7fc401ad":"markdown","72dfbc72":"markdown","26e0e38e":"markdown"},"source":{"55754696":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport pandas as pd\nimport numpy as np\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n# Any results you write to the current directory are saved as output.","fde472d2":"breeds_df = pd.read_csv('..\/input\/breed_labels.csv')\n\norig_train_df = pd.read_csv('..\/input\/train\/train.csv')\ntest_df = pd.read_csv('..\/input\/test\/test.csv')\n\norig_train_df['dataset_type'] = 'train'\ntest_df['dataset_type'] = 'test'\nall_data_df = pd.concat([orig_train_df, test_df])\n\nprint (\"all_data_df shape: \", all_data_df.shape)\nprint (\"orig_train_df shape: \", orig_train_df.shape)\nprint (\"test_df shape: \", test_df.shape)\n","80752b43":"print (list(test_df.columns))\nthe_test_df_pet_ids = test_df[\"PetID\"]\nprint(the_test_df_pet_ids.head())","87b3c655":"list_of_num_fields = [ 'Age', 'MaturitySize', 'Quantity', 'Fee', 'VideoAmt', 'PhotoAmt', ]\nlist_of_categ_fields = ['Breed1']\nlist_to_drop = [ \"RescuerID\", \"Name\", \"Description\", \"PetID\", 'dataset_type']\n","06780597":"print(\"What the head() of Breeds1 column looks like in the all_data dataframe :\",all_data_df[\"Breed1\"].head())\n\nprint(\"\\nLength of breeds_df.BreedID: \", len(breeds_df.BreedID))\nprint(\"\\nWhat the head() Breeds1 lookup table looks like:\\n\", breeds_df.head())\nprint(\"\\nWhat the tail() Breeds1 lookup table looks like:\\n\", breeds_df.tail())\nprint(\"\\nThe numerical values are of type: \", type(breeds_df.BreedID[3]))\n\nif 307 in list(breeds_df.BreedID):\n    print (\"Category 307 (Mixed Breed) is in the dictionary, at position: \" , \n           list(breeds_df.BreedID).index(307), \n           \". It is wedged between all the dog breeds and all the cat breeds:\") \n    print (breeds_df[238:243])","238a76e3":"the_one_hot_encodings = pd.get_dummies(all_data_df.Breed1.head(5), prefix = 'Breed1')\nprint (the_one_hot_encodings.head(5))\nprint(\"\\nThe columns are: \", the_one_hot_encodings.columns)","1d6819e7":"all_data_df[\"Breed1\"] = all_data_df[\"Breed1\"].astype('category', categories = list(breeds_df.BreedID) )\nthe_one_hot_encodings = pd.get_dummies(all_data_df.Breed1.head(), prefix = 'Breed1')\nprint(the_one_hot_encodings.head(5))\nprint(the_one_hot_encodings.columns)","422261ae":"all_data_df = pd.concat( [all_data_df, pd.get_dummies(all_data_df.Breed1, prefix = 'Breed1') ] , axis = 1)\nprint(\"all_data_df shape: \", all_data_df.shape)\nprint(\"Now extract from that the following:\")\n#Split them back into the original train vs. test data\norig_train_df = all_data_df[all_data_df.dataset_type == \"train\"]\ntest_df = all_data_df[all_data_df.dataset_type == \"test\"]\nprint(\"orig_train_df shape:\", orig_train_df.shape)\nprint(\"test_df shape:\", test_df.shape)","21cb5b5f":"from sklearn.model_selection import train_test_split\n\ntrain_df, val_df = train_test_split(orig_train_df, test_size = .2)\n\nprint (\"train_df shape:\", train_df.shape)\nprint (\"val_df shape:\", val_df.shape)","9b1e063b":"train_targets = train_df[\"AdoptionSpeed\"]\ntrain_df.drop( [\"AdoptionSpeed\"] + list_to_drop + [\"Breed1\"], axis =1, inplace = True)\nval_targets = val_df[\"AdoptionSpeed\"]\nval_df.drop([\"AdoptionSpeed\"] + list_to_drop + [\"Breed1\"], axis = 1, inplace = True)\n\ntest_df.drop([\"AdoptionSpeed\"] + list_to_drop + [\"Breed1\"], axis = 1, inplace = True)\n\ntrain_df.isna().sum()","4287b59a":"print (\"\\tall_data_df has been: \", all_data_df.shape)\nprint (\"From which we extracted :\")\nprint (\"\\torig_train_df\", orig_train_df.shape)\nprint (\"\\ttest_df\", test_df.shape)\nprint (\"\\nAnd furthermore, we split the orig_train_df into:\")\nprint (\"\\ttrain_df\", train_df.shape)\nprint (\"\\tval_df\", val_df.shape)","43993de8":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import cohen_kappa_score\n\nclf = DecisionTreeClassifier(random_state=0, max_leaf_nodes=22)","b27ce876":"clf.fit(train_df, train_targets)","aba2f6f9":"clf.predict(test_df.iloc[3:4])","c9d765ca":"val_preds = clf.predict(val_df)\ncohen_kappa_score(val_preds, val_targets, weights = \"quadratic\")","5ad0abf7":"test_preds = clf.predict(test_df)","39817724":"sub_df = pd.read_csv('..\/input\/test\/sample_submission.csv')\nprint(sub_df.PetID.head())\nprint()\nprint(the_test_df_pet_ids.head())\n\nprint(\"Are the two series types comparable:\", type(sub_df.PetID) == type(the_test_df_pet_ids))\nprint(\"The two series are identical: \", sub_df[\"PetID\"].equals(the_test_df_pet_ids))\n\nsub_df['AdoptionSpeed'] = test_preds.astype(int)","f816217b":"sub_df.to_csv('submission.csv', index=False)","e3612f06":"from sklearn import tree\nimport graphviz\n\noutfile = 'ourtree.dot'\ndot_data = tree.export_graphviz(clf, out_file=outfile,\n                                feature_names=train_df.columns,  \n                                class_names=['0','1','2','3','4'],  \n                                filled=True, rounded=True, max_depth=4, \n                                special_characters=True) ","b246fae6":"#Efforts to create a png\n#!ls\n#!rm ourtree.png\n#!ls\n#!dot -Tpng ourtree.dot -o ourtree.png\n#!ls\n#%matplotlib inline\n#import matplotlib.pyplot as plt\n#import matplotlib.image as mpimg\n#img = mpimg.imread('ourtree.png')\n#plt.imshow(img)","ffc22aad":"dot_data = tree.export_graphviz(clf, out_file=None,\n                                feature_names=train_df.columns,  \n                                class_names=['0','1','2','3','4'],  \n                                filled=True, rounded=True, max_depth=4, \n                                special_characters=True) \n\ngraph = graphviz.Source(dot_data)  # you can't have these two lines when trying out_file (for some reason)\ngraph ","7e0db2bb":"Train the model","aea35694":"# Visually Inspect the Decision Tree","79b76296":"Before manipulating any data, let's extract the series (column) of the PetID from the test data.  Toward the end of this kernel, we will use the sample submission file to submit the results.  Before submitting, we can verify that the order of PetIDs for which we have results is the same as the order of PetIDs in the sample submission file.  (This will make more sense when we get to that point; for now we only have to obtain that series.)","0500b2c5":"# Explore the Breeds1 data\n\nThe Breeds1 column in the all_data dataframe holds a *numerical* value representing Breed1, rather than holding the breed name in *text*.\n\nTo see the breed name in text, we can use the lookup dictionary which we already imported into breeds_df. The length of that dataframe is 307 rows, yet the last row (Tuxedo cat) has the numerical  value 306. That's because 307 stands for Mixed Breed and is tucked between the alphabetically-listed dog breeds, and all the cat breeds.\n\nImportant data science: I used to have a Category 304 cat and she was the love of my life.  Smartest person I ever met \ud83e\udd14\ud83d\ude3b\n\n","cc60d1b9":"Make a single prediction.\n(Note that the prediction comes out as a *float*, which we need to remember when later on we submit the results.)","39977a20":"Drop the unneeded columns","b4cfc328":"# Create and Train the Model","0456a710":"\n# Prepare and Submit the Results","5b2ff8b8":"Concatenate, as columns, the two dataframes to get one wider dataframe, then split back to the original training data and test data.","b7b8a0d6":"Furthermore, split the original training data into training data and validation data, at 80-20 split.\nsklearn provides an easy way of doing this","9e83015b":"Bring in as panda dataframes\n* the labels\n* the train data as orig_train_df (because we will split them into *training* and *validation* data\n* the test data\n\nCombine the original training and testing data into one dataframe, so that the transformations we make apply to all of them. (First mark all the original training and test data as train and test accordingly so we can separate them later.)","2e40b437":"Testing out how to get 307 columns for one-hot encoding using get_dummies, for the head of the all_data_df.Breed1 column.","dbb991d3":"Including one-hot encoded categorigal data along with numerical data, when using a DecisionTreeClassifier.","27e17ea2":"Convert the _df to a csv file and write it.\n(After writing it we have to manually submit it, outside of this kernel.)","ad10be47":"Create a sub_df dataframe to hold the submission of the results, by reading the sample_submission.csv .\nEnsure that the order of pets in  prediction set is the same as the order of pets in the sub_df, and if so, simply replace the \"AdoptionSpeed\" of the sub_df with our prediction results - but convert the floats to integers first.","6d4995d7":"Because only at most five categories would be used in the first five rows, we get new columns for only those categories. For example, the first time I run the above, there were only 3 columns created and the .columns statement lists them as 265, 299, and 307:\n\n```Index(['Breed1_265', 'Breed1_299', 'Breed1_307'], dtype='object')```\n\nUsing the above method we run the risk of missing columns, if any categories do not exist in the training data (which we will extract again shortly) but do show up in the given test data or future test data.\n\nA better way to handle this would be to provide a complete list of potential categories to the dataframe, so that when creating the dummies all possible columns would be created.","7fc401ad":"Make predictions on the validation set, and calculate the CKS","72dfbc72":"We will need \n* a list of the numerical fields we will use\n* a list of the categorical fields we will use, and \n* a list of the categorical fields we will not use (so we can drop them from the dataframe prior to training the model.)","26e0e38e":"# One-Hot Encode the Chosen Columns\n\nBreed1 is the only column we are one-hot encoding."}}