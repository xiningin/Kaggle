{"cell_type":{"68e27898":"code","b1b5b6f4":"code","159a09e0":"code","0f927a55":"code","55266433":"code","314121fe":"code","ba3906e7":"code","08fd0646":"markdown","5bd109a7":"markdown","2a05bc87":"markdown","fdba7e64":"markdown","6a0f65b5":"markdown","0df0ed75":"markdown","15f92c1d":"markdown"},"source":{"68e27898":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.figure(figsize=(8,5))\n\nplt.arrow(0,0,2,2, head_width=0.3, length_includes_head=True, color='blue', alpha=1)\nplt.arrow(0,0,3,0, head_width=0.3, length_includes_head=True, color='red')\nplt.arrow(0,0,0,3, head_width=0.3, length_includes_head=True, color='blue', alpha=1)\nplt.arrow(0,0,-2,-2, head_width=0.3, length_includes_head=True, color='blue', alpha=1)\nplt.arrow(0,0,2,-2, head_width=0.3, length_includes_head=True, color='blue', alpha=1)\nplt.arrow(0,0,-3,0, head_width=0.3, length_includes_head=True, color='blue', alpha=1)\n\nplt.text(3.1, 0, 'Reference vector')\nplt.text(2, 2, 'Similarity = cos(45) = +0.7')\nplt.text(0, 3, 'Similarity = cos(90) = 0')\nplt.text(-5, -2.5, 'Similarity = cos(225) = -0.7')\nplt.text(2, -2, 'Similarity = cos(315) = +0.7')\nplt.text(-6, 0.5, 'Similarity = cos(180) = -1 \\n(completely opposite)')\n\nplt.plot(6,4)\nplt.plot(0,0)\nplt.plot(-6,-4)\nplt.grid()\nplt.title(\"Similarity of vectors\\n Range: [-1, 1]\")\n\nplt.show()","b1b5b6f4":"plt.figure(figsize=(8,5))\n\nplt.arrow(0,0,2,2, head_width=0.3, length_includes_head=True, color='blue', alpha=1)\nplt.arrow(0,0,5,5, head_width=0.3, length_includes_head=True, color='yellow', alpha=0.5)\nplt.arrow(0,0,1,3, head_width=0.3, length_includes_head=True, color='red')\n\nplt.text(2,1.5,'X_1')\nplt.text(5,4.5,'X_2')\nplt.text(1,2.5,'X_3')\n\nplt.plot(6,6)\nplt.plot(0,0)\nplt.grid()\nplt.title(\"Each data sample is a Position Vector\")\n\nplt.show()","159a09e0":"class Distance:\n    @staticmethod\n    def _norm(X, p):\n        # raise_by_p \n        vec2scalar = np.sum(np.power(X, p)) \n        # squash_by_p \n        norm = np.power(vec2scalar, (1\/p))\n        return norm\n    \n    @staticmethod\n    def __cosine_sim(X1, X2, norm_p=2):\n        X1_dot_X2     = X1.T.dot(X2)\n        norm_X1  = Distance._norm(X1, norm_p)\n        norm_X2  = Distance._norm(X2, norm_p)\n        return (X1_dot_X2) \/ (norm_X1*norm_X2)\n\n    @staticmethod\n    def cosine(X1, X2):\n        return 1 - Distance.__cosine_sim(X1, X2)\n    \n    @staticmethod\n    def euclidean(X1, X2):\n        diff_vec = X2 - X1\n        return Distance._norm(diff_vec, 2)","0f927a55":"import numpy as np\n\n# Note: vectors are just points (dir, vecs from origin)\n# =====================================================\n\n# test perpendicular vecs (not unity)\na = np.array([0,3])\nb = np.array([3,0])\nprint('perpclr vecs: \\t', Distance.cosine(a, b))\n\n# test parallel vecs (not unity)\na = np.array([0,3])\nb = np.array([0,9])\nprint('parallel vecs: \\t', Distance.cosine(a, b))\n\n# test opposite vecs (not unity)\na = np.array([0,3])\nb = np.array([0,-9])\nprint('opposite vecs: \\t', Distance.cosine(a, b))\n\n# test random vecs (not unity)\na = np.array([0,3])\nb = np.array([5,4])\nprint('random vecs: \\t', Distance.cosine(a, b))","55266433":"import numpy as np\n\nprint(\"\"\"Note: Euclidean dist. doesnt capture direction\nIt captures norm(size) of individual diffs of components\\n\"\"\") \n# =====================================================\n\n# test perpendicular vecs (not unity)\na = np.array([0,3])\nb = np.array([3,0])\nprint('perpclr vecs: \\t', Distance.euclidean(a, b))\n\n# test parallel vecs (not unity)\na = np.array([0,3])\nb = np.array([0,99])\nprint('parallel vecs: \\t', Distance.euclidean(a, b))\n\n# test opposite vecs (not unity)\na = np.array([0,3])\nb = np.array([0,-9])\nprint('opposite vecs: \\t', Distance.euclidean(a, b))\n\n# test random vecs (not unity)\na = np.array([0,3])\nb = np.array([5,4])\nprint('random vecs: \\t', Distance.euclidean(a, b))","314121fe":"def get_vec_w_dir_cosines(vector_w_dir_ratios): \n    return vector_w_dir_ratios \/ Distance._norm(vector_w_dir_ratios, 2)","ba3906e7":"a = np.array([2,3,10])\nb = np.array([5,4,-8])\n\n# satisfy conditions (to dir cosines)\na_w_dir_cosines = get_vec_w_dir_cosines(a)\nb_w_dir_cosines = get_vec_w_dir_cosines(b)\n\nprint('Unit vectors:')\nprint('===================================================')\nprint(a_w_dir_cosines)\nprint(b_w_dir_cosines)\nprint('===================================================')\n\ncos_dist = Distance.cosine(a_w_dir_cosines, b_w_dir_cosines)\neuc_dist = Distance.euclidean(a_w_dir_cosines, b_w_dir_cosines)\n\nprint('cos_dist: \\t', cos_dist, '\\t 2 x cos_dist \\t', 2*cos_dist)\nprint('euc_dist: \\t', euc_dist, '\\t euc_dist ^2 \\t', euc_dist**2)","08fd0646":"# Test","5bd109a7":"**Relation w\/ Norms (Euclidean distance)**\n\n- $\\vec{X_1}$ and $\\vec{X_2}$ are intutively more similiar if we see **direction** of them(position vectors)\n- Euclidean $\\Rightarrow$ $\\vec{X_1}$ and $\\vec{X_1}$ are more similar (lesser dist)\n- Cosine $\\Rightarrow$ $\\vec{X_1}$ and $\\vec{X_2}$ are extremely similar (dist=0)\n- If $||\\vec{X_a}|| = ||\\vec{X_b}|| = 1$,\n$$(\\text{Euc. dist})^2 = (||\\vec{X_a} - \\vec{X_b}||_2)^2 = (\\vec{X_a} - \\vec{X_b})^2 = (||\\vec{X_a}||_2)^2 + (||\\vec{X_b}||_2)^2 - 2\\vec{X_a}\\vec{X_b} $$\n$$(\\text{Euc. dist})^2 = 2 - 2 \\cos\\theta $$\n\n<span style=\"color: green\">$$(\\text{Euc. dist})^2 = 2 (\\text{cos-dist}) $$<\/span>","2a05bc87":"# Cosine Similarity \/ Distance \/ Loss","fdba7e64":"> - Measure angle b\/w position vectors instead of *norm-of-position-vectors-difference*\n> - Captures direction of position vectors\n\n$$\\text{Similarity($\\vec{X_a}, \\vec{X_b}$)} = \\cos{\\theta} = \\frac{\\vec{X_a} \\cdot \\vec{X_b}}{||\\vec{X_a}||_2 ||\\vec{X_b}||_2}$$\n\n$$\\text{Distance($\\vec{X_a}, \\vec{X_b}$) = 1 - Similarity($\\vec{X_a}, \\vec{X_b}$)}$$\n\n**Cos-Similarity Range&nbsp;:** [-1, 1]<br>\n**Cos-Distance Range&nbsp;&nbsp;:** [0, 2]","6a0f65b5":"- **Cosine Distance $\\in$ [0, 2]** \n- **| Euclidean Distance | $\\in$ [0,$\\infty$]**","0df0ed75":"**Check Relation**\n\n<span style=\"color: green\">$$(\\text{Euc. dist})^2 = 2 (\\text{cos-dist}) $$<\/span>\n\n**Condition**\n\n$$||\\vec{X_a}|| = ||\\vec{X_b}|| = 1 \\,\\,\\, \\text{i.e unit vec - direction cosines instead of ratios}$$\n$$\\text{divide ratios by} \\,\\, \\sqrt{l^2 + m^2 + n^2}$$","15f92c1d":"- $-1 \\le \\text{cosine similarity i.e cos} \\theta \\le 1$ \n    - `-1`: extremely dissimilar\n    - `+1`: extremely similar   "}}