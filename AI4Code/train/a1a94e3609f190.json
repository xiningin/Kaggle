{"cell_type":{"d9610b71":"code","c397d4ed":"code","91ecc2f2":"code","2136faa6":"code","5f4183af":"code","12ff3e2e":"code","16e46b77":"code","bf6d11ba":"code","db349f71":"code","ed1ddda8":"code","507a2fd9":"code","a9d33ec7":"code","da8565cf":"code","8fe5dfd4":"code","9f446e8d":"code","ed58375e":"markdown","2e7f769a":"markdown","fd957021":"markdown","3c7570a8":"markdown","4fe7f161":"markdown","1b270b39":"markdown","fa733a34":"markdown","7250550f":"markdown","eaa23bf2":"markdown","483b8674":"markdown"},"source":{"d9610b71":"import tensorflow as tf\nimport tensorflow.keras as keras\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow_datasets as tfds\nimport time\nimport pandas as pd","c397d4ed":"def sample_images(images, row_count, column_count):\n    fig, axs = plt.subplots(row_count, column_count, figsize=(10,10))\n    for i in range(row_count):\n        for j in range(column_count):\n            axs[i,j].imshow(images[i * column_count + j])\n            axs[i,j].axis('off')\n    plt.show()","91ecc2f2":"batch_size = 100\nn_epochs = 10\nimage_width = 32","2136faa6":"def preproces_image(item):\n    image = item[\"image\"]\n    image = tf.cast(image, \"float\")  \/ 255.0\n    image =tf.image.resize(image, (image_width, image_width))\n    return image, image","5f4183af":"train = tfds.load(\"mnist\", split='train', as_supervised=False).map(preproces_image).shuffle(1024).batch(batch_size, drop_remainder=True).prefetch(1)\ntest = tfds.load(\"mnist\", split='test', as_supervised=False).map(preproces_image).shuffle(1024).batch(batch_size, drop_remainder=True).prefetch(1)","12ff3e2e":"for images, _ in train.take(1):\n    sample_images(images, 10, 10)","16e46b77":"tf.keras.backend.clear_session()","bf6d11ba":"AE = keras.models.Sequential([\n    keras.layers.Conv2D(32, 3, strides=2, padding=\"same\", activation=\"relu\", input_shape=(image_width, image_width, 1)),\n    keras.layers.Conv2D(64, 3, strides=2, padding=\"same\", activation=\"relu\"),\n    keras.layers.Conv2D(128, 3, strides=2, padding=\"same\", activation=\"relu\"),\n    keras.layers.UpSampling2D(2),\n    keras.layers.Conv2D(64, 3, padding=\"same\", activation=\"relu\"),\n    keras.layers.UpSampling2D(2),\n    keras.layers.Conv2D(32, 3, padding=\"same\", activation=\"relu\"),\n    keras.layers.UpSampling2D(2),\n    keras.layers.Conv2D(1, 3, padding=\"same\", activation=\"relu\")\n])\nAE.summary()","db349f71":"AE.compile(loss=\"mean_squared_error\", optimizer=\"adam\", metrics=[\"mae\"])","ed1ddda8":"history = AE.fit(train, epochs=20)","507a2fd9":"pd.DataFrame(history.history).plot()","a9d33ec7":"mse, mae = AE.evaluate(test)\nprint(\"MSE:\", mse)\nprint(\"MAE:\", mae)","da8565cf":"result = AE.predict(test)\nresult.shape","8fe5dfd4":"indices = np.random.choice(result.shape[0], 100)\nsample_images(result[indices], 10, 10)","9f446e8d":"AE.save(\"AE.h5\")","ed58375e":"## Model Evaluation","2e7f769a":"## Build the Auto Encoder","fd957021":"## ","3c7570a8":"## ","4fe7f161":"## Import Datasets","1b270b39":"## Save the Model","fa733a34":"## Train the Model","7250550f":"## Encode the test images","eaa23bf2":"## Utilities","483b8674":"# Digits Generation with Auto Encoder\n## Import Packages"}}