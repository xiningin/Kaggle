{"cell_type":{"8999a5d7":"code","99931a8f":"code","0f640d5f":"code","dc65db81":"code","45a44478":"code","cef87d5b":"code","cf8d90af":"code","b500f471":"code","4e2aedbf":"code","9cc79704":"code","01e15133":"code","a4dd41ed":"code","a627aec4":"code","c18aea18":"code","96e44542":"code","b282b1e4":"code","d1beccdb":"code","52efd315":"code","43622ae0":"code","d44797eb":"code","f157877f":"code","8305f115":"code","ccd23913":"code","54c92800":"code","574796b3":"code","8e986569":"code","470e4d7a":"code","4552db55":"code","95b32e87":"code","6bd442dc":"code","891101e0":"code","608a24a1":"code","84efdced":"code","c756b7ec":"code","115b7a54":"code","915b559b":"code","12be1145":"code","aff2aeb7":"code","cdd2e185":"code","d595aaf3":"code","b60cd232":"code","c331dbbb":"markdown","51507819":"markdown","0d4441cb":"markdown","f838a0bc":"markdown","b0683443":"markdown","e5f3424d":"markdown","f17cc9e1":"markdown","31ee16a5":"markdown","fdf65ad1":"markdown","e9ea8ddc":"markdown","66edc01a":"markdown","7c229c86":"markdown","4e3b70d3":"markdown","bce28a65":"markdown","79bec1b4":"markdown","f68e0b2b":"markdown","f1386f5e":"markdown","8862e516":"markdown","e6fb7c2b":"markdown","8a84f51f":"markdown","c8b5c793":"markdown"},"source":{"8999a5d7":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport missingno as msno\nimport pandas_profiling\nfrom  matplotlib.gridspec import GridSpec\n\n%matplotlib inline\nimport warnings\n\nwarnings.filterwarnings('ignore')","99931a8f":"bike_train = pd.read_csv('..\/input\/bike-sharing-demand\/train.csv')\nbike_test = pd.read_csv('..\/input\/bike-sharing-demand\/test.csv')","0f640d5f":"bike_train.shape","dc65db81":"datetime = bike_test['datetime']","45a44478":"bike_train.head()","cef87d5b":"bike_train.columns.unique()","cf8d90af":"# bike_train.isnull().sum()","b500f471":"msno.matrix(bike_train)","4e2aedbf":"msno.matrix(bike_test)","9cc79704":"# profile = bike_train.profile_report(title = 'Pandas Profile Report')\n# profile.to_file(output_file = 'Bike Sharing profile.html')","01e15133":"sns.set(style='whitegrid',color_codes=True)\n# from matplotlib import style\n# style.use('fivethirtyeight')","a4dd41ed":"sns.boxplot(data=bike_train[['datetime', 'temp','atemp', 'humidity', 'windspeed', 'casual', 'registered', 'count']])\nfig = plt.gcf()            # \u83b7\u53d6 fig \u5bf9\u8c61\nfig.set_size_inches(10,10) # \u8bbe\u7f6e\u56fe\u50cf\u7684\u957f\u5ea6\u548c\u5bbd\u5ea6","a627aec4":"for col in ['casual','registered','count']:\n    bike_train['{}_log'.format(col)] = np.log1p(bike_train[col])","c18aea18":"bike_train.head(2)","96e44542":"plt.figure(figsize=(15,15))\nplt.subplot(321)\nsns.distplot(bike_train['casual'])\nplt.xlabel(\"casual (before transformation)\")\nplt.subplot(322)\nsns.distplot(bike_train['casual_log'])\nplt.xlabel(\"casual_log (after transformation)\")\nplt.subplot(323)\nsns.distplot(bike_train['registered'])\nplt.xlabel(\"registered (before transformation)\")\nplt.subplot(324)\nsns.distplot(bike_train['registered_log'])\nplt.xlabel(\"registered_log (after transformation)\")\nplt.subplot(325)\nsns.distplot(bike_train['count'])\nplt.xlabel(\"count (before transformation)\")\nplt.subplot(326)\nsns.distplot(bike_train['count_log'])\nplt.xlabel(\"count_log (after transformation)\")","b282b1e4":"pd.DatetimeIndex(bike_train['datetime'])","d1beccdb":"bike_train['hour']  = [ t.hour for t in pd.DatetimeIndex(bike_train['datetime'])]\nbike_train['dayofweek']  = [ t.dayofweek for t in pd.DatetimeIndex(bike_train['datetime'])]\nbike_train['month']  = [ t.month for t in pd.DatetimeIndex(bike_train['datetime'])]\nbike_train['year']  = [ t.year for t in pd.DatetimeIndex(bike_train['datetime'])]\n# bike_train['year'] = bike_train['year'].map({2011:0,2012:1})\nbike_train.drop(columns='datetime',inplace=True)\nbike_train.head()","52efd315":"bike_test['hour']  = [ t.hour for t in pd.DatetimeIndex(bike_test['datetime'])]\nbike_test['dayofweek']  = [ t.dayofweek  for t in pd.DatetimeIndex(bike_test['datetime'])]\nbike_test['month']  = [ t.month for t in pd.DatetimeIndex(bike_test['datetime'])]\nbike_test['year']  = [ t.year for t in pd.DatetimeIndex(bike_test['datetime'])]\nbike_test.drop(columns='datetime',inplace=True)\nbike_test.head()","43622ae0":"#### new_feature  year + season\nbike_train['year_season'] = bike_train['year'] +  bike_train['season']\/10\nbike_test['year_season'] = bike_test['year'] +  bike_test['season']\/10\nfig = plt.figure(figsize=(15,12))\ngls = GridSpec(4,4,fig,wspace=0.5,hspace=0.5)\nplt.subplot(gls[:2,:])\nsns.boxplot(x='year_season',y='count',data=bike_train)\nplt.subplot(gls[2:,:2])\nsns.boxplot(x='year_season',y='casual',data=bike_train)\nplt.subplot(gls[2:,2:])\nsns.boxplot(x='year_season',y='registered',data=bike_train)","d44797eb":"fig = plt.figure(figsize=(15,12))\ngls = GridSpec(4,4,fig,wspace=0.5,hspace=0.5)\nplt.subplot(gls[:2,:])\nsns.boxplot(x='hour',y='count',hue='workingday',data=bike_train)\nplt.subplot(gls[2:,:2])\nsns.boxplot(x='hour',y='casual',hue='workingday',data=bike_train)\nplt.subplot(gls[2:,2:])\nsns.boxplot(x='hour',y='registered',hue='workingday',data=bike_train)","f157877f":"# new_feature casual\/registered + hour + workingday \u4e4b\u540e\u8981\u9884\u6d4b casual \u548c registered \u7684\u503c\uff0c\u8fd9\u91cc\u6784\u9020\u51fa\u548c\u5b83\u76f8\u5173\u7684\u7279\u5f81\u3002\n# \u5728\u4e09\u4e2a\u8054\u5408\u5c5e\u6027\u4e2d \u5c06casual\u548cregistered\u6309\u7167\u9ad8\u4f4e\u8fdb\u884c\u6807\u8bb0\uff080\/1\uff09\nfor df in [bike_train,bike_test]:\n    df['hour_workingday_casual'] = df[['hour','workingday']].apply(lambda x:int(9 <= x['hour'] <= 20),axis=1)\n    df['hour_workingday_registered'] = df[['hour','workingday']].apply(lambda x:int(\n        (x['workingday']== 1 and (x['hour'] == 8 or 17 <= x['hour'] <= 18)) or (x['workingday']== 0 and (x['hour'] == 8 or 10 <= x['hour'] <= 19))\n                            ),axis=1)\n    \nby_season = bike_train.groupby(['year_season'])[['count']].median()\nby_season.columns = ['count_season']\nbike_train = bike_train.join(by_season, on='year_season')\nbike_test = bike_test.join(by_season, on='year_season')","8305f115":"from sklearn.ensemble import RandomForestRegressor","ccd23913":"# RMSLE Score 0.38532\ncasual_features=['season', 'holiday', 'workingday', 'weather',\n            'temp', 'atemp', 'humidity', 'windspeed',\n            'year', 'hour', 'dayofweek', 'hour_workingday_casual', 'count_season']\n\nrdr = RandomForestRegressor(n_estimators=500,random_state=10)\nrdr.fit(bike_train[casual_features],bike_train['casual_log'])\npred_casual = rdr.predict(bike_test[casual_features])\npred_casual = np.expm1(pred_casual)\npred_casual[pred_casual < 0 ] = 0\n\nregistered_features=['season', 'holiday', 'workingday', 'weather',\n            'temp', 'atemp', 'humidity', 'windspeed',\n            'year', 'hour', 'dayofweek', 'hour_workingday_registered', 'count_season']\n\nrdr = RandomForestRegressor(n_estimators=500,random_state=10)\nrdr.fit(bike_train[registered_features],bike_train['registered_log'])\npred_registered = rdr.predict(bike_test[registered_features])\npred_registered = np.expm1(pred_registered)\npred_registered[pred_registered < 0 ] = 0\n\npred1 = pred_casual + pred_registered","54c92800":"submit_data=pd.DataFrame({'datetime':datetime,'count':pred1})\nsubmit_data[submit_data['count']==0].count()","574796b3":"submit_data.to_csv(\"make_new_feature.csv\", index=False)","8e986569":"def plot_cv(params,bestreg,variable):\n    plt.figure(figsize=(12,5))\n    plt.subplot(121)\n    plt.plot(params[variable],bestreg.cv_results_['mean_test_score'],'o-')\n    plt.xlabel(variable)\n    plt.ylabel('score mean')\n    plt.subplot(122)\n    plt.plot(params[variable],bestreg.cv_results_['std_test_score'],'o-')\n    plt.xlabel(variable)\n    plt.ylabel('score std')\n    plt.tight_layout()\n    plt.show()","470e4d7a":"from sklearn.model_selection import GridSearchCV\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import StratifiedKFold","4552db55":"# create new_feature year_month for skfold\nyear_month = bike_train['year'] * 100 + bike_train['month']\nskfold = StratifiedKFold(n_splits=3, shuffle=True, random_state=0)","95b32e87":"rdr = RandomForestRegressor(random_state=10)\nparams={'n_estimators':[50,100,150,200,250,300,350,400,450,500,550,600]}\nbestreg = GridSearchCV(estimator=rdr,param_grid=params,cv=skfold.split(bike_train,year_month),scoring='neg_mean_squared_error')\nbestreg.fit(bike_train[casual_features],bike_train['casual_log'])\nprint(bestreg.best_params_)\nplot_cv(params,bestreg,'n_estimators')\n\nrdr = RandomForestRegressor(random_state=10)\nparams={'n_estimators':[50,100,150,200,250,300,350,400,450,500,550,600]}\nbestreg = GridSearchCV(estimator=rdr,param_grid=params,cv=skfold.split(bike_train,year_month),scoring='neg_mean_squared_error')\nbestreg.fit(bike_train[registered_features],bike_train['registered_log'])\nprint(bestreg.best_params_)\nplot_cv(params,bestreg,'n_estimators')","6bd442dc":"rdr = RandomForestRegressor(random_state=10)\nparams={'min_samples_leaf':np.arange(1,10,1)}\nbestreg = GridSearchCV(estimator=rdr,param_grid=params,cv=skfold.split(bike_train,year_month),scoring='neg_mean_squared_error')\nbestreg.fit(bike_train[casual_features],bike_train['casual_log'])\nprint(bestreg.best_params_)\nplot_cv(params,bestreg,'min_samples_leaf')\n\nrdr = RandomForestRegressor(random_state=10)\nparams={'min_samples_leaf':np.arange(1,10,1)}\nbestreg = GridSearchCV(estimator=rdr,param_grid=params,cv=skfold.split(bike_train,year_month),scoring='neg_mean_squared_error')\nbestreg.fit(bike_train[registered_features],bike_train['registered_log'])\nprint(bestreg.best_params_)\nplot_cv(params,bestreg,'min_samples_leaf')","891101e0":"# rdr = RandomForestRegressor(random_state=10)\n# params=[[{'n_estimators':[50,100,150,200,250,300,350,400,450,500,550,600]}],[{'min_samples_leaf':np.arange(1,10,1)}]]\n# bestreg = GridSearchCV(estimator=rdr,param_grid=params,cv=skfold.split(bike_train,year_month),scoring='neg_mean_squared_error')\n# bestreg.fit(bike_train[casual_features],bike_train['casual_log'])\n# print(bestreg.best_params_)\n# # plot_cv(params,bestreg,'n_estimators')\n\n# rdr = RandomForestRegressor(random_state=10)\n# params=[[{'n_estimators':[50,100,150,200,250,300,350,400,450,500,550,600]}],[{'min_samples_leaf':np.arange(1,10,1)}]]\n# bestreg = GridSearchCV(estimator=rdr,param_grid=params,cv=skfold.split(bike_train,year_month),scoring='neg_mean_squared_error')\n# bestreg.fit(bike_train[registered_features],bike_train['registered_log'])\n# print(bestreg.best_params_)\n# plot_cv(params,bestreg,'n_estimators')","608a24a1":"# RMSLE Score 0.38262\ncasual_features=['season', 'holiday', 'workingday', 'weather',\n            'temp', 'atemp', 'humidity', 'windspeed',\n            'year', 'hour', 'dayofweek', 'hour_workingday_casual', 'count_season']\n\nrdr = RandomForestRegressor(n_estimators=450,min_samples_leaf=5,random_state=10)\nrdr.fit(bike_train[casual_features],bike_train['casual_log'])\npred_casual = rdr.predict(bike_test[casual_features])\npred_casual = np.expm1(pred_casual)\npred_casual[pred_casual < 0 ] = 0\n\nregistered_features=['season', 'holiday', 'workingday', 'weather',\n            'temp', 'atemp', 'humidity', 'windspeed',\n            'year', 'hour', 'dayofweek', 'hour_workingday_registered', 'count_season']\n\nrdr = RandomForestRegressor(n_estimators=600,min_samples_leaf=3,random_state=10)\nrdr.fit(bike_train[registered_features],bike_train['registered_log'])\npred_registered = rdr.predict(bike_test[registered_features])\npred_registered = np.expm1(pred_registered)\npred_registered[pred_registered < 0 ] = 0\n\npred1 = pred_casual + pred_registered","84efdced":"submit_data=pd.DataFrame({'datetime':datetime,'count':pred1})\nsubmit_data[submit_data['count']==0].count()\n\nsubmit_data.to_csv(\"make_new_feature_rdr.csv\", index=False)","c756b7ec":"from sklearn.ensemble import GradientBoostingRegressor","115b7a54":"gbrt_reg = GradientBoostingRegressor(random_state=10)\nparams={'n_estimators':[50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000]}\nbestreg = GridSearchCV(estimator=gbrt_reg,param_grid=params,cv=skfold.split(bike_train,year_month),scoring='neg_mean_squared_error')\nbestreg.fit(bike_train[casual_features],bike_train['casual_log'])\nprint(bestreg.best_params_)\nplot_cv(params,bestreg,'n_estimators')\n\ngbrt_reg = GradientBoostingRegressor(random_state=10)\nparams={'n_estimators':[50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,1000]}\nbestreg = GridSearchCV(estimator=gbrt_reg,param_grid=params,cv=skfold.split(bike_train,year_month),scoring='neg_mean_squared_error')\nbestreg.fit(bike_train[registered_features],bike_train['registered_log'])\nprint(bestreg.best_params_)\nplot_cv(params,bestreg,'n_estimators')","915b559b":"gbrt_reg = GradientBoostingRegressor(random_state=10)\nparams={'min_samples_leaf':np.arange(1,10,1)}\nbestreg = GridSearchCV(estimator=gbrt_reg,param_grid=params,cv=skfold.split(bike_train,year_month),scoring='neg_mean_squared_error')\nbestreg.fit(bike_train[casual_features],bike_train['casual_log'])\nprint(bestreg.best_params_)\nplot_cv(params,bestreg,'min_samples_leaf')\n\ngbrt_reg = GradientBoostingRegressor(random_state=10)\nparams={'min_samples_leaf':np.arange(1,10,1)}\nbestreg = GridSearchCV(estimator=gbrt_reg,param_grid=params,cv=skfold.split(bike_train,year_month),scoring='neg_mean_squared_error')\nbestreg.fit(bike_train[registered_features],bike_train['registered_log'])\nprint(bestreg.best_params_)\nplot_cv(params,bestreg,'min_samples_leaf')","12be1145":"# RMSLE Score 0.36942 rank 49\/3251\ncasual_features=['season', 'holiday', 'workingday', 'weather',\n            'temp', 'atemp', 'humidity', 'windspeed',\n            'year', 'hour', 'dayofweek', 'hour_workingday_casual', 'count_season']\n\ngbrt_reg = GradientBoostingRegressor(n_estimators=1000,min_samples_leaf=6,random_state=10)\ngbrt_reg.fit(bike_train[casual_features],bike_train['casual_log'])\npred_casual = gbrt_reg.predict(bike_test[casual_features])\npred_casual = np.expm1(pred_casual)\npred_casual[pred_casual < 0 ] = 0\n\nregistered_features=['season', 'holiday', 'workingday', 'weather',\n            'temp', 'atemp', 'humidity', 'windspeed',\n            'year', 'hour', 'dayofweek', 'hour_workingday_registered', 'count_season']\n\ngbrt_reg = GradientBoostingRegressor(n_estimators=1000,min_samples_leaf=5,random_state=10)\ngbrt_reg.fit(bike_train[registered_features],bike_train['registered_log'])\npred_registered = gbrt_reg.predict(bike_test[registered_features])\npred_registered = np.expm1(pred_registered)\npred_registered[pred_registered < 0 ] = 0\n\npred2 = pred_casual + pred_registered","aff2aeb7":"submit_data=pd.DataFrame({'datetime':datetime,'count':pred2})\n\nsubmit_data.to_csv(\"make_new_feature_gbrt_reg.csv\", index=False)","cdd2e185":"submit_data.shape","d595aaf3":"# RMSLE Score 0.37139 rank 88\/3251\n\npred = 0.7 * pred1 + 0.3 * pred2\nsubmit_data=pd.DataFrame({'datetime':datetime,'count':pred})\n\nsubmit_data.to_csv(\"make_new_feature_rdr_70%_gbrt_reg_30%.csv\", index=False)","b60cd232":"# RMSLE Score 0.36714 rank 32\/3251\n\npred = 0.5 * pred1 + 0.5 * pred2\nsubmit_data = pd.DataFrame({'datetime':datetime,'count':pred})\n\nsubmit_data.to_csv(\"make_new_feature_rdr_50%_gbrt_reg_50%.csv\", index=False)","c331dbbb":"#### `GridSearchCV` \u67e5\u627e `RandomForestRegressor` \u6700\u4f18 `min_samples_leaf`","51507819":"#### \u5bf9 `\u975e\u6b63\u6001` \u7684\u6570\u636e\u8fdb\u884c `\u5bf9\u6570\u5316`","0d4441cb":"#### \u5c06 `\u8bad\u7ec3\u96c6` \u65f6\u95f4 `datetime` \u8fdb\u884c\u8f6c\u6362\n `pd.DatetimeIndex`  (https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DatetimeIndex.html)","f838a0bc":"#### \u4f7f\u7528 `missingno` \u65e0\u6548\u77e9\u9635\u7684\u6570\u636e\u5bc6\u96c6\u663e\u793a\n\n\u53ef\u4ee5\u770b\u51fa\u5728\u6211\u4eec\u7684\u6570\u636e\u4e2d\u6ca1\u6709\u7f3a\u5931\u503c","b0683443":"## \u7279\u5f81\u5de5\u7a0b","e5f3424d":"#### \u4f7f\u7528 `pandas_profiling` \u6765\u5bf9\u6570\u636e\u8fdb\u884c\u5206\u6790","f17cc9e1":"## \u6570\u636e\u63a2\u7d22","31ee16a5":"#### \u67e5\u770b\u6570\u636e\u7684\u7f3a\u5931\u503c","fdf65ad1":"#### \u6a21\u578b\u878d\u5408","e9ea8ddc":"#### `GridSearchCV` \u67e5\u627e `GradientBoostingRegressor` \u6700\u4f18 `n_estimators`","66edc01a":"#### `GridSearchCV` \u67e5\u627e `RandomForestRegressor` \u6700\u4f18 `min_samples_leaf` \u548c `n_estimators`","7c229c86":"#### \u5c06 `\u6d4b\u8bd5\u96c6` \u65f6\u95f4 `datetime` \u8fdb\u884c\u8f6c\u6362","4e3b70d3":"#### \u67e5\u770b\u4e0d\u91cd\u590d\u7684\u5217\u503c","bce28a65":"#### \u5728\u8bad\u7ec3\u96c6\u4e2d\u67e5\u770b `hour` \u548c `count`\u3001`casual`\u3001`registered` \u548c`workingday` \u7684\u5173\u7cfb","79bec1b4":"#### `GridSearchCV` \u67e5\u627e `RandomForestRegressor` \u6700\u4f18 `n_estimators`","f68e0b2b":"#### \u7ed8\u5236\u8bad\u7ec3\u65f6 `\u5206\u6570` \u7684 `\u66f2\u7ebf`","f1386f5e":"#### \u4f7f\u7528 `\u6700\u4f18\u53c2\u6570` \u8bad\u7ec3 `GradientBoostingRegressor`  \u6a21\u578b","8862e516":"#### `GridSearchCV` \u67e5\u627e `GradientBoostingRegressor` \u6700\u4f18 `min_samples_leaf`","e6fb7c2b":"#### \u5bf9 `\u8fde\u7eed\u578b\u6570\u636e` \u8fdb\u884c `\u7bb1\u578b\u56fe` \u53ef\u89c6\u5316","8a84f51f":"#### \u4f7f\u7528 `\u6700\u4f18\u53c2\u6570` \u8bad\u7ec3 `RandomForestRegressor`  \u6a21\u578b","c8b5c793":"# Bike Sharing Demand \u27a1 `Top1%`"}}