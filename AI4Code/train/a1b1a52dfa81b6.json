{"cell_type":{"175e851c":"code","dd4f7722":"code","186f3e6c":"code","1310cb20":"code","88a94025":"code","577746e8":"code","85e9940c":"code","e951f3be":"code","444004ba":"code","a53f1c82":"code","ed9d7b79":"code","e812e14e":"code","f7df95fb":"code","6f72a218":"code","0679c0a3":"code","d2bae92b":"code","04fe2be3":"code","dc826926":"code","86cadfb9":"code","352b9c30":"code","fa3250ca":"code","dfab146e":"code","171f2a60":"code","a0dfc1e1":"code","f915d014":"code","a80c5a48":"code","bd358bff":"code","98efbada":"code","a11c4233":"code","4e6fd266":"code","bde2bc9f":"code","73917714":"code","4c52531e":"code","d0713500":"code","747ec51d":"code","fb438333":"code","4992fe66":"code","574e6bd7":"code","cd7c70fc":"code","3044051c":"code","59376032":"code","c6001c74":"code","9edd4990":"code","32953de1":"code","de51173b":"code","d8ba95bd":"code","e63a14b2":"code","206b6e55":"code","52e00a59":"code","86263028":"code","1a8a0af4":"code","0c69c9fb":"code","310b41e8":"code","892bf883":"markdown","8ebdd78c":"markdown","d465ffc7":"markdown","23eeaf66":"markdown","03cbf7cf":"markdown","de061fae":"markdown"},"source":{"175e851c":"import pandas as pd\nimport numpy as np\nimport seaborn as sns","dd4f7722":"train = pd.read_csv('\/kaggle\/input\/predict-the-housing-price\/train.csv')\ntest= pd.read_csv('\/kaggle\/input\/predict-the-housing-price\/Test.csv')","186f3e6c":"train.head(3)","1310cb20":"test.head(3)","88a94025":"train.isnull().sum()","577746e8":"test.isnull().sum()","85e9940c":"import matplotlib.pyplot as plt","e951f3be":"plt.subplots(figsize=(20,30))\nsns.heatmap(train.corr())","444004ba":"# droping columns which are having more number of null values\ndrop_columns = ['FireplaceQu','PoolQC','Fence','MiscFeature','BsmtUnfSF']\ntrain.drop(drop_columns, axis = 1, inplace = True)\ntest.drop(drop_columns, axis = 1, inplace = True)","a53f1c82":"fill_col = ['Alley','MasVnrType','BsmtQual','BsmtCond','BsmtExposure','BsmtFinType1','BsmtFinType2',\n            'GarageType','GarageFinish','GarageCond']\nfor col in train[fill_col]:\n    train[col] = train[col].fillna('None')\nfor col in test[fill_col]:\n    test[col] = test[col].fillna('None')","ed9d7b79":"#filling null values by mean \ntrain['LotFrontage'].fillna(value=train['LotFrontage'].mean(),inplace=True)\ntest['LotFrontage'].fillna(value=test['LotFrontage'].mean(),inplace=True)","e812e14e":"train['GarageYrBlt'].fillna(value=train['GarageYrBlt'].mean(),inplace=True)\ntest['GarageYrBlt'].fillna(value=test['GarageYrBlt'].mean(),inplace=True)","f7df95fb":"train['MasVnrArea'].fillna(value=train['MasVnrArea'].mean(),inplace=True)\ntest['MasVnrArea'].fillna(value=test['MasVnrArea'].mean(),inplace=True)","6f72a218":"# filling nullvalues by using mode\ntrain['GarageQual'].fillna(value=(train['GarageQual'].mode()[0]),inplace=True)\ntest['GarageQual'].fillna(value=(test['GarageQual'].mode()[0]),inplace=True)","0679c0a3":"test['Electrical'].fillna(value=(test['Electrical'].mode()[0]),inplace=True)","d2bae92b":"train","04fe2be3":"test","dc826926":"# assigning categorical variables.\ncategory = []\nfor i in train.columns:\n    if train[i].dtype == \"O\":\n        category.append(i)","86cadfb9":"category","352b9c30":"train[category]","fa3250ca":"test[category]","dfab146e":"for i in train.isnull().sum():\n    if i > 0:\n        print(i)","171f2a60":"for i in test.isnull().sum():\n    if i > 0:\n        print(i)","a0dfc1e1":"from sklearn.preprocessing import LabelEncoder","f915d014":"le = LabelEncoder()","a80c5a48":"temp1 = train[category].apply(LabelEncoder().fit_transform)","bd358bff":"temp2 = test[category].apply(LabelEncoder().fit_transform)","98efbada":"train.drop(category,axis = 1,inplace =True)\ntest.drop(category,axis = 1,inplace =True)","a11c4233":"trainfinal = train.join(temp1)\ntestfinal = test.join(temp2)","4e6fd266":"trainfinal","bde2bc9f":"testfinal","73917714":"trainfinal.drop('Id',axis=1,inplace=True)\ntestfinal.drop('Id',axis=1,inplace=True)","4c52531e":"from sklearn.linear_model import LinearRegression\nfrom sklearn.feature_selection import RFE\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nimport statsmodels.api as sm","d0713500":"X = trainfinal.drop('SalePrice',axis = 1)\ny = trainfinal[['SalePrice']]","747ec51d":"X_train,X_test,y_train,y_test = train_test_split(X,y,train_size=.7,random_state=42)\nlr = LinearRegression()","fb438333":"lr = LinearRegression()\nlr.fit(X_train,y_train)\ny_pred = lr.predict(X_test)\nprint(\"RMSE ->\",np.sqrt(mean_squared_error(y_test, y_pred)))","4992fe66":"### Using Rfe\nscaler = MinMaxScaler()\nX_train1 = scaler.fit_transform(X_train)\ny_train1 = scaler.fit_transform(y_train)\nrfe = RFE(lr, 1)\nrfe.fit(X_train1,y_train1)","574e6bd7":"rfe.support_","cd7c70fc":"X_train.columns[rfe.support_]","3044051c":"X = trainfinal['OverallQual'].values.reshape(-1,1)\ny = trainfinal[['SalePrice']].values.reshape(-1,1)","59376032":"X_train,X_test,y_train,y_test = train_test_split(X,y,train_size=.7,random_state=42)","c6001c74":"lr = LinearRegression()","9edd4990":"lr.fit(X_train,y_train)\nlr.predict(X_test)\nprint(\"RMSE ->\",np.sqrt(mean_squared_error(y_test, y_pred)))","32953de1":"X = trainfinal.drop('SalePrice',axis = 1)\ny = trainfinal[['SalePrice']]\nX_train,X_test,y_train,y_test = train_test_split(X,y,train_size=.7,random_state=42)","de51173b":"import xgboost as xgb","d8ba95bd":"xgb = xgb.XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =42, nthread = -1)","e63a14b2":"xgb.fit(X_train,y_train)","206b6e55":"y_pred = xgb.predict(X_test)","52e00a59":"print(\"RMSE =>\",np.sqrt(mean_squared_error(y_test, y_pred)))","86263028":"## Testing on Test Dataset\ny_predtest = xgb.predict(testfinal)","1a8a0af4":"temp = pd.DataFrame()\ntemp['Id'] = test['Id']\ntemp['SalePrice'] = y_predtest","0c69c9fb":"temp","310b41e8":"temp.to_csv('solution1', index=False)","892bf883":"### LabelEncoding","8ebdd78c":"## Machine learning : MLR","d465ffc7":"### XGB boosting Model","23eeaf66":"### SLR","03cbf7cf":"##### we use best Feature for Prediction","de061fae":"## No null values"}}