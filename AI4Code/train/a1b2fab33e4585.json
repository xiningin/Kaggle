{"cell_type":{"723300ac":"code","f4d5cf9d":"code","e263145f":"code","3ec8ec1f":"code","21c93959":"code","799e4f79":"code","5c9681f1":"code","bcfa7912":"code","2b88036f":"code","9c112092":"code","6f9f1674":"code","f8265adf":"code","ba103655":"code","f05eb009":"code","8bd8b144":"code","d4115d39":"code","1ed1e0c2":"code","30c2f3ed":"code","9b3bb397":"code","4fa47f59":"code","ea185afa":"code","9ca2465e":"code","77ba29d9":"code","04e48e5f":"code","41cac38a":"code","c4df510c":"markdown","47e9bb22":"markdown","a5698466":"markdown","c44d08f6":"markdown","9118aaef":"markdown","bdfb32a8":"markdown","ee0179bc":"markdown","2836b188":"markdown","e0221c73":"markdown","6aad1913":"markdown","a084ca56":"markdown","4f1d0464":"markdown","4ac7153b":"markdown"},"source":{"723300ac":"!pip install kaggle-environments -U -q\n!cp -r ..\/input\/lux-ai-2021\/* .","f4d5cf9d":"# copied from https:\/\/www.kaggle.com\/ilialar\/lux-ai-risk-averse-baseline\n# %%writefile agent.py\nfrom lux.game import Game\nfrom lux.game_map import Cell, RESOURCE_TYPES, Position\nfrom lux.constants import Constants\nfrom lux.game_constants import GAME_CONSTANTS\nfrom lux import annotate\nimport math\nimport numpy as np\n\n### Define helper functions\n\n# this snippet finds all resources stored on the map and puts them into a list so we can search over them\ndef find_resources(game_state):\n    resource_tiles: list[Cell] = []\n    width, height = game_state.map_width, game_state.map_height\n    for y in range(height):\n        for x in range(width):\n            cell = game_state.map.get_cell(x, y)\n            if cell.has_resource():\n                resource_tiles.append(cell)\n    return resource_tiles\n\n# the next snippet finds the closest resources that we can mine given position on a map\ndef find_closest_resources(pos, player, resource_tiles):\n    closest_dist = math.inf\n    closest_resource_tile = None\n    for resource_tile in resource_tiles:\n        # we skip over resources that we can't mine due to not having researched them\n        if resource_tile.resource.type == Constants.RESOURCE_TYPES.COAL and not player.researched_coal(): continue\n        if resource_tile.resource.type == Constants.RESOURCE_TYPES.URANIUM and not player.researched_uranium(): continue\n        dist = resource_tile.pos.distance_to(pos)\n        if dist < closest_dist:\n            closest_dist = dist\n            closest_resource_tile = resource_tile\n    return closest_resource_tile, closest_dist\n\ndef find_closest_city_tile(pos, player):\n    closest_city_tile = None\n    closest_dist = math.inf\n    if len(player.cities) > 0:\n        # the cities are stored as a dictionary mapping city id to the city object, which has a citytiles field that\n        # contains the information of all citytiles in that city\n        for k, city in player.cities.items():\n            for city_tile in city.citytiles:\n                dist = city_tile.pos.distance_to(pos)\n                if dist < closest_dist:\n                    closest_dist = dist\n                    closest_city_tile = city_tile\n    return closest_city_tile, closest_dist\n\ngame_state = None\n\ndef get_random_step():\n    return np.random.choice(['s','n','w','e'])\n\n\ndef agent(observation, configuration):\n    global game_state\n\n    ### Do not edit ###\n    if observation[\"step\"] == 0:\n        game_state = Game()\n        game_state._initialize(observation[\"updates\"])\n        game_state._update(observation[\"updates\"][2:])\n        game_state.id = observation.player\n    else:\n        game_state._update(observation[\"updates\"])\n    \n    actions = []\n\n    ### AI Code goes down here! ### \n    player = game_state.players[observation.player]\n    opponent = game_state.players[(observation.player + 1) % 2]\n    width, height = game_state.map.width, game_state.map.height\n\n    resource_tiles = find_resources(game_state)\n        \n    # max number of units available\n    units_cap = sum([len(x.citytiles) for x in player.cities.values()])\n    # current number of units\n    units  = len(player.units)\n    \n    cities = list(player.cities.values())\n    if len(cities) > 0:\n        city = cities[0]\n        created_worker = (units >= units_cap)\n        for city_tile in city.citytiles[::-1]:\n            if city_tile.can_act():\n                if created_worker:\n                    # let's do research\n                    action = city_tile.research()\n                    actions.append(action)\n                else:\n                    # let's create one more unit in the last created city tile if we can\n                    action = city_tile.build_worker()\n                    actions.append(action)\n                    created_worker = True\n    \n    \n    # we want to build new tiless only if we have a lot of fuel in all cities\n    can_build = True\n    night_steps_left = ((359 - observation[\"step\"]) \/\/ 40 + 1) * 10\n    for city in player.cities.values():            \n        if city.fuel \/ (city.get_light_upkeep() + 20) < min(night_steps_left, 30):\n            can_build = False\n       \n    steps_until_night = 30 - observation[\"step\"] % 40\n    \n    \n    # we will keet all tiles where any unit wants to move in this set to avoid collisions\n    taken_tiles = set()\n    for unit in player.units:\n        # it is too strict but we don't allow to go to the the currently occupied tile\n        taken_tiles.add((unit.pos.x, unit.pos.y))\n        \n    for city in opponent.cities.values():\n        for city_tile in city.citytiles:\n            taken_tiles.add((city_tile.pos.x, city_tile.pos.y))\n    \n    # we can collide in cities so we will use this tiles as exceptions\n    city_tiles = {(tile.pos.x, tile.pos.y) for city in player.cities.values() for tile in city.citytiles}\n    \n    \n    for unit in player.units:\n        if unit.can_act():\n            closest_resource_tile, closest_resource_dist = find_closest_resources(unit.pos, player, resource_tiles)\n            closest_city_tile, closest_city_dist = find_closest_city_tile(unit.pos, player)\n            \n            # we will keep possible actions in a priority order here\n            directions = []\n            \n            # if we can build and we are near the city let's do it\n            if unit.is_worker() and unit.can_build(game_state.map) and ((closest_city_dist == 1 and can_build) or (closest_city_dist is None)):\n                # build a new cityTile\n                action = unit.build_city()\n                actions.append(action)  \n                can_build = False\n                continue\n            \n            # base cooldown for different units types\n            base_cd = 2 if unit.is_worker() else 3\n            \n            # how many steps the unit needs to get back to the city before night (without roads)\n            steps_to_city = unit.cooldown + base_cd * closest_city_dist\n            \n            # if we are far from the city in the evening or just full let's go home\n            if (steps_to_city + 3 > steps_until_night or unit.get_cargo_space_left() == 0) and closest_city_tile is not None:\n                actions.append(annotate.line(unit.pos.x, unit.pos.y, closest_city_tile.pos.x, closest_city_tile.pos.y))\n                directions = [unit.pos.direction_to(closest_city_tile.pos)]\n            else:\n                # if there is no risks and we are not mining resources right now let's move toward resources\n                if closest_resource_dist != 0 and closest_resource_tile is not None:\n                    actions.append(annotate.line(unit.pos.x, unit.pos.y, closest_resource_tile.pos.x, closest_resource_tile.pos.y))\n                    directions = [unit.pos.direction_to(closest_resource_tile.pos)]\n                    # optionally we can add random steps\n                    for _ in range(2):\n                        directions.append(get_random_step())\n\n            moved = False\n            for next_step_direction in directions:\n                next_step_position = unit.pos.translate(next_step_direction, 1)\n                next_step_coordinates = (next_step_position.x, next_step_position.y)\n                # make only moves without collision\n                if next_step_coordinates not in taken_tiles or next_step_coordinates in city_tiles:\n                    action = unit.move(next_step_direction)\n                    actions.append(action)\n                    taken_tiles.add(next_step_coordinates)\n                    moved = True\n                    break\n            \n            if not moved:\n                # if we are not moving the tile is occupied\n                taken_tiles.add((unit.pos.x,unit.pos.y))\n    return actions","e263145f":"from kaggle_environments import make\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nenv = make(\"lux_ai_2021\", configuration={\"loglevel\": 0}, debug=True)\nsteps = env.run([agent, \"simple_agent\"])\n\nsteps_lst = []\nfor steps_players in steps:\n    for i in steps_players:\n        steps_lst.append(pd.io.json.json_normalize(i))\n\nsteps_df = pd.concat(steps_lst).reset_index(drop=True)\nplayer_steps_df = steps_df.loc[steps_df['observation.step'].notnull()]\nopp_steps_df = steps_df.loc[steps_df['observation.step'].isnull()]\n\nplt.plot(player_steps_df['observation.reward'])\nplt.plot(opp_steps_df['observation.reward'])\nplt.title('reward timeline')\nplt.legend(['player','opponent'])","3ec8ec1f":"# obs_step = 300#200\n# player_actions = player_steps_df.action.tolist()[1:]\n# opp_actions = opp_steps_df.action.tolist()[1:]\n# env.reset()\n# for i in range(obs_step):\n#     steps = env.step([player_actions[i], opp_actions[i]])    \nenv.render(mode=\"ipython\", width=900, height=600)","21c93959":"player_id = 0\nplayer = game_state.players[player_id]\nopponent = game_state.players[(player_id + 1) % 2]\n\nbd = game_state.map.map\n\nresource_maps ={'wood':1,\n                'coal':2,\n                'uranium':3}\n\nheight, width = game_state.map_height, game_state.map_width \nbd_res_type = np.zeros([height, width],np.int8)\nbd_wood = np.zeros([height, width],np.int16)\nbd_coal = np.zeros([height, width],np.int16)\nbd_uranium = np.zeros([height, width],np.int16)\nbd_res_amount = np.zeros([height, width],np.int16)\nbd_cityid = np.full([height, width],-1, np.int8)\nbd_city_cooldown = np.full([height, width], -1, np.int8)\nbd_city_can_act =  np.full([height, width],-1, np.int8)\nbd_city =  np.full([height, width], -1, np.int8)\nbd_road = np.full([height, width], -1, np.float32)#upgrade per 0.5\n#bd_city_fuel = np.full([height, width], -1, np.float32)\n#bd_city_light_upkeep = np.full([height, width], -1, np.float32)\n\nbd_unit = np.full([height, width],-1, np.int8)\n\nfor y in range(height):\n    for x in range(width):\n        if bd[y][x].has_resource():\n            bd_res_type[y][x] = resource_maps[bd[y][x].resource.type]\n            bd_res_amount[y][x] = bd[y][x].resource.amount\n            if bd[y][x].resource.type=='wood':\n                bd_wood[y][x] = bd[y][x].resource.amount\n            elif bd[y][x].resource.type=='coal':\n                bd_coal[y][x] = bd[y][x].resource.amount\n            elif bd[y][x].resource.type=='uranium':\n                bd_uranium[y][x] = bd[y][x].resource.amount\n\n                \n        if bd[y][x].citytile is not None:\n            bd_cityid[y][x] = int(bd[y][x].citytile.cityid.split('_')[-1])#bd[y][x]citytile.cityid#\n            bd_city_cooldown[y][x] = bd[y][x].citytile.cooldown\n            bd_city_can_act[y][x] = bd[y][x].citytile.can_act()\n            bd_city[y][x] = bd[y][x].citytile.team\n            #try:\n            #    city = player.cities[bd[y][x].citytile.cityid]\n            #except:\n            #    city = opponent.cities[bd[y][x].citytile.cityid]\n            #bd_city_fuel[y][x] = city.fuel\n            #bd_city_light_upkeep[y][x] = city.light_upkeep\n        bd_road[y][x]= bd[y][x].road\n        \nfor unit in player.units:\n    bd_unit[unit.pos.y][unit.pos.x] = 0\nfor unit in opponent.units:\n    bd_unit[unit.pos.y][unit.pos.x] = 1\n    \n    \nlst = []\nfor unit in player.units+opponent.units:\n    lst.append(\n        [unit.id,\n         unit.team,\n         unit.pos.x,\n         unit.pos.y,\n         'worker' if unit.is_worker() else 'cart',\n         unit.cooldown,\n         unit.cargo.wood,\n         unit.cargo.coal,\n         unit.cargo.uranium,\n         unit.get_cargo_space_left(),\n         unit.can_act(),\n        ]\n    )\n    \nunit_df = pd.DataFrame(lst)\nunit_df.columns = ['id','team','pos_x','pos_y','type','cooldown',\n                   'cargo.wood','cargo.coal','cargo.uranium',\n                  'cargo_space_left','can_act']\n\nlst = []\ncities = dict(player.cities, **opponent.cities)\nfor city_id in cities.keys():\n    lst.append(\n        [cities[city_id].cityid,\n         cities[city_id].team,\n         cities[city_id].fuel, \n         cities[city_id].get_light_upkeep(),])\n    \ncity_df = pd.DataFrame(lst, columns=['cityid','team','fuel','light_upkeep'])\n\n\n\nlst = []\nresource_tiles = find_resources(game_state)\nfor cell in resource_tiles:\n    lst.append([\n        cell.resource.type, \n        cell.resource.amount,\n        cell.pos.x,\n        cell.pos.y,\n        ])\n\nresource_tiles_df = pd.DataFrame(lst)\nresource_tiles_df.columns = ['type','amount','pos_x','pos_y',]\n\nlst = []\nfor team in [player, opponent]:\n    lst.append(\n        [team.team,\n         team.city_tile_count,\n         len(team.units),\n         team.research_points,\n         team.researched_coal(),\n         team.researched_uranium(),\n        ])\n    \nteam_df = pd.DataFrame(lst, \n                       columns = ['team','city_tile_count', 'city_unit_count',\n                                  'research_points','researched_coal','researched_uranium'])\n\nlst = []\ncities = dict(player.cities, **opponent.cities)\nfor city_id in cities.keys():\n    for citytile in cities[city_id].citytiles:\n        lst.append(\n            [citytile.cityid,\n             citytile.team,\n             citytile.pos.x,\n             citytile.pos.y,\n             citytile.cooldown,\n             citytile.can_act()])\ncitytile_df = pd.DataFrame(lst, columns=['cityid','team','pos_x','pos_y','cooldown','can_act'])","799e4f79":"!mkdir .\/templates -p","5c9681f1":"%%file templates\/luxhtml.tpl\n\n{% extends \"html.tpl\" %}\n{% block table %}\n<h1 class='table_title' style=\"background-color:#e7e7e7; text-align: center\">{{ table_title|default(\"\")}}<\/h1>\n{{ super() }}\n{% endblock table %}","bcfa7912":"# https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.23\/style.html\nfrom jinja2 import Environment, ChoiceLoader, FileSystemLoader\nfrom pandas.io.formats.style import Styler\nfrom IPython.display import display, HTML\npd.options.display.max_columns = 32\nclass LuxStyler(Styler):\n    env = Environment(\n        loader=ChoiceLoader([\n            FileSystemLoader(\"templates\"),  # contains ours\n            Styler.loader,  # the default\n        ])\n    )\n    template = env.get_template(\"luxhtml.tpl\")\n\ndef visualize(bd, title, default_value=-1):\n    df = pd.DataFrame(bd).astype(str).replace(str(default_value),'')\n    df.columns = [f'x_{s}' for s in df.columns]\n    df.index = [f'y_{s}' for s in df.index]\n    #display(df.astype(str).replace(str(default_value),'').style.set_caption(title))\n    return LuxStyler(df).render(table_title=title)\n\ndef visualize_res_type(bd, title, default_value=-1):\n    inv_resource_maps = {1:'w',2:'c',3:'u'}\n    df = (pd.DataFrame(bd).replace(inv_resource_maps).astype(str)\n                          .replace(str(default_value),'')\n                          .replace({str(default_value),''}))\n    df.columns = [f'x_{s}' for s in df.columns]\n    df.index = [f'y_{s}' for s in df.index]\n    return LuxStyler(df).render(table_title=title)\n\ndef visualize_cityid(bd, title):\n    df = pd.DataFrame(bd_cityid).astype(str).applymap(lambda s:f'c_{s}').replace('c_-1','')\n    df.columns = [f'x_{s}' for s in df.columns]\n    df.index = [f'y_{s}' for s in df.index]\n    return LuxStyler(df).render(table_title=title)\n","2b88036f":"HTML(visualize(bd_road, 'Road Level', default_value=0.))","9c112092":"HTML(visualize(bd_city_cooldown, 'CityTile Cooldown'))","6f9f1674":"HTML(visualize(bd_city_can_act, 'CityTile can_action', default_value=-1))","f8265adf":"citytile_df","ba103655":"HTML(visualize_cityid(bd_cityid, 'City id'))","f05eb009":"HTML(visualize(bd_city, 'City Team'))\n","8bd8b144":"#HTML(visualize(bd_city_fuel, 'City Fuel', default_value=-1.))","d4115d39":"#HTML(visualize(bd_city_light_upkeep, 'light_upkeep', default_value=-1.))","1ed1e0c2":"city_df","30c2f3ed":"HTML(visualize_res_type(bd_res_type, 'Resource Type', default_value=0))","9b3bb397":"HTML(visualize_res_type(bd_wood, 'Resource Wood', default_value=0))","4fa47f59":"HTML(visualize_res_type(bd_coal, 'Resource Coal', default_value=0))","ea185afa":"HTML(visualize_res_type(bd_uranium, 'Resource Uranium', default_value=0))","9ca2465e":"resource_tiles_df","77ba29d9":"HTML(visualize(bd_unit, 'Unit Team', default_value=-1))","04e48e5f":"unit_df","41cac38a":"team_df","c4df510c":"# Cities info","47e9bb22":"# Players","a5698466":"# CityTiles info","c44d08f6":"~~# Observe the specified step~~","9118aaef":"#### citytiles list","bdfb32a8":"# Resource\n\n- w:wood\n- c:coal\n- u uranium","ee0179bc":"# Units\n\nSince units can be stacked on a cell, teamid (player: 0, opponent: 1) is set if there is even one unit on the cell.","2836b188":"#### Units list   ","e0221c73":"# Simple visualization of each item\n\nThis notebook is a simple visualization of each item.\n\nIt may be useful for grasping the whole.\n\n![img1_1](https:\/\/raw.githubusercontent.com\/Lux-AI-Challenge\/Lux-Design-2021\/master\/assets\/game_board.png)","6aad1913":"# Road Level","a084ca56":"#### resources list","4f1d0464":"#### players list","4ac7153b":"#### cities list"}}