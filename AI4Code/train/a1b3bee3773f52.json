{"cell_type":{"98bea130":"code","695860d6":"code","90e99d98":"code","2b53c8c8":"code","907b7a00":"code","f3807edc":"code","a5e6c6d7":"code","0c5ee0e8":"code","87975c74":"code","45437f36":"code","f786ddee":"code","750812a4":"code","6809e9b3":"code","c44033d7":"markdown","5084e0a1":"markdown","0ecd5dd6":"markdown","893172ec":"markdown","a8a9c3a4":"markdown","dc31cb23":"markdown","8170be38":"markdown","18ce1d4a":"markdown","685bdd94":"markdown","41c76e5a":"markdown","37fc7dd8":"markdown","8e03e9e6":"markdown","6a970db0":"markdown","de18cbcb":"markdown"},"source":{"98bea130":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import linear_model\nfrom sklearn import metrics\n\n%matplotlib inline\n\ntrain = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","695860d6":"sns.distplot(train['SalePrice'])","90e99d98":"train['SalePrice'].describe()","2b53c8c8":"#skewness and kurtosis\nprint(\"\u504f\u5ea6: %f\" % train['SalePrice'].skew())\nprint(\"\u5cf0\u5ea6: %f\" % train['SalePrice'].kurt())","907b7a00":"# \u67e5\u770b\u70ed\u56fe\ndata = train.corr()\nsns.heatmap(data)","f3807edc":"data['SalePrice'].sort_values()","a5e6c6d7":"sns.lmplot(x='GrLivArea', y='SalePrice', data=train, fit_reg=False, scatter=True)","0c5ee0e8":"train = train[-((train.SalePrice < 200000) &  (train.GrLivArea > 4000))]","87975c74":"for col in train.columns:\n    if train[col].isnull().sum() > 0:\n        print(col, train[col].isnull().sum())","45437f36":"#\u4e00\u534a\u662f\u5220\u9664\u8fc7\u591a\u7a7a\u503c\u7684\u5c5e\u6027\uff0c\u4e00\u534a\u662f\u5220\u9664\u65e0\u5173\u8054\u7684\u5c5e\u6027 \ntrain = train.drop([\"MiscFeature\", \"Id\", \"PoolQC\", \"Alley\", \"Fence\",\"GarageFinish\", \"KitchenAbvGr\", \"EnclosedPorch\", \"MSSubClass\", \"OverallCond\", \"YrSold\", \"LowQualFinSF\", \"MiscVal\", \"BsmtHalfBath\", \"BsmtFinSF2\", \"3SsnPorch\", \"MoSold\", \"PoolArea\"], axis=1)\n\ntest = test.drop([\"MiscFeature\", \"PoolQC\", \"Alley\", \"Fence\",\"GarageFinish\", \"KitchenAbvGr\", \"EnclosedPorch\", \"MSSubClass\", \"OverallCond\", \"YrSold\", \"LowQualFinSF\", \"MiscVal\", \"BsmtHalfBath\", \"BsmtFinSF2\", \"3SsnPorch\", \"MoSold\", \"PoolArea\"], axis=1)\n\n#\u6c47\u603btrain\u548ctest\u7684\u6570\u636e\nall_data = pd.concat((train, test))\n#\u5982\u679c\u6570\u5b57\uff0c\u586b\u5199\u5747\u503c\u3002\u5982\u679c\u5b57\u7b26\u4e32\uff0c\u586b\u5199\u6b21\u6570\u6700\u591a\u7684\nfor col in train.columns:\n    if train[col].isnull().sum() > 0:\n        if train[col].dtypes == 'object':\n            val = all_data[col].dropna().value_counts().idxmax()\n            train[col] = train[col].fillna(val)\n        else:\n            val = all_data[col].dropna().mean()\n            train[col] = train[col].fillna(val)\n            \nfor col in test.columns:\n    if test[col].isnull().sum() > 0:\n        if test[col].dtypes == 'object':\n            val = all_data[col].dropna().value_counts().idxmax()\n            test[col] = test[col].fillna(val)\n        else:\n            val = all_data[col].dropna().mean()\n            test[col] = test[col].fillna(val)","f786ddee":"#\u7efc\u5408\u5904\u7406\uff0c\u8f6c\u503c\u7c7b\u578b\nfor col in all_data.select_dtypes(include = [object]).columns:\n    train[col] = train[col].astype('category', categories = all_data[col].dropna().unique())\n    test[col] = test[col].astype('category', categories = all_data[col].dropna().unique())\n\nfor col in train.columns:\n    if train[col].dtype.name == 'category':\n        tmp = pd.get_dummies(train[col], prefix = col)\n        train = train.join(tmp)\n        train = train.drop(col, axis=1)\n\nfor col in test.columns:\n    if test[col].dtype.name == 'category':\n        tmp = pd.get_dummies(test[col], prefix = col)\n        test = test.join(tmp)\n        test = test.drop(col, axis=1)","750812a4":"lr = linear_model.LinearRegression()\nX = train.drop(\"SalePrice\", axis=1)\ny = np.log(train[\"SalePrice\"])\n\nlr = lr.fit(X, y)\nresults = lr.predict(test.drop(\"Id\", axis = 1))\nfinal = np.exp(results)\n\nsubmission = pd.DataFrame()\nsubmission['Id'] = test.Id\nsubmission['SalePrice'] = final\n\nsubmission.head()","6809e9b3":"submission.to_csv(\"submission1.csv\", index= False)","c44033d7":"\u504f\u5ea6\u80fd\u591f\u53cd\u5e94\u5206\u5e03\u7684\u5bf9\u79f0\u60c5\u51b5\uff0c\u53f3\u504f\uff08\u4e5f\u53eb\u6b63\u504f\uff09\uff0c\u5728\u56fe\u50cf\u4e0a\u8868\u73b0\u4e3a\u6570\u636e\u53f3\u8fb9\u8131\u4e86\u4e00\u4e2a\u957f\u957f\u7684\u5c3e\u5df4\uff0c\u8fd9\u65f6\u5927\u591a\u6570\u503c\u5206\u5e03\u5728\u5de6\u4fa7\uff0c\u6709\u4e00\u5c0f\u90e8\u5206\u503c\u5206\u5e03\u5728\u53f3\u4fa7\u3002\n\n\u5cf0\u5ea6\u53cd\u5e94\u7684\u662f\u56fe\u50cf\u7684\u5c16\u9510\u7a0b\u5ea6\uff1a\u5cf0\u5ea6\u8d8a\u5927\uff0c\u8868\u73b0\u5728\u56fe\u50cf\u4e0a\u9762\u662f\u4e2d\u5fc3\u70b9\u8d8a\u5c16\u9510\u3002\u5728\u76f8\u540c\u65b9\u5dee\u7684\u60c5\u51b5\u4e0b\uff0c\u4e2d\u95f4\u4e00\u5927\u90e8\u5206\u7684\u503c\u65b9\u5dee\u90fd\u5f88\u5c0f\uff0c\u4e3a\u4e86\u8fbe\u5230\u548c\u6b63\u592a\u5206\u5e03\u65b9\u5dee\u76f8\u540c\u7684\u76ee\u7684\uff0c\u5fc5\u987b\u6709\u4e00\u4e9b\u503c\u79bb\u4e2d\u5fc3\u70b9\u8d8a\u8fdc\uff0c\u6240\u4ee5\u8fd9\u5c31\u662f\u6240\u8bf4\u7684\u201c\u539a\u5c3e\u201d\uff0c\u53cd\u5e94\u7684\u662f\u5f02\u5e38\u70b9\u589e\u591a\u8fd9\u4e00\u73b0\u8c61\u3002","5084e0a1":"\u53ef\u4ee5\u770b\u5230\u6709\u4e0d\u5c11\u503c\u662f\u8d1f\u7684\uff0c\u8fd8\u6709\u5f88\u591a\u503c\u4f4e\u4e8e0.2\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u628a\u8fd9\u4e9bfeature\u4ece\u6211\u4eec\u7684\u6a21\u578b\u91cc\u9762\u53bb\u6389\u3002","0ecd5dd6":"\u53ef\u4ee5\u770b\u5230\u6709\u4e24\u4e2a\u9762\u79ef\u7279\u522b\u5927\u7684\u623f\u5b50\uff0c\u552e\u4ef7\u5374\u5f88\u4f4e\u3002\u6545\u6211\u4eec\u5728\u8bad\u7ec3\u6570\u636e\u4e2d\u5220\u9664\u8fd9\u4e24\u4e2a\u6570\u636e\u3002","893172ec":"\u8d8a\u662f\u767d\u8272\u8d8a\u662f\u5173\u8054\u7d27\u5bc6\u3002\u53ef\u4ee5\u89c2\u5bdfSalePrice\u8ddf\u54ea\u4e9b\u5c5e\u6027\u5173\u8054\u66f4\u7d27\u5bc6\u3002","a8a9c3a4":"### \u5931\u6570\u636e\u7684\u5904\u7406\n\n\u67e5\u770b\u7f3a\u5931\u6570\u636e","dc31cb23":"# \u5efa\u6a21&&\u9884\u6d4b","8170be38":"# # \u6570\u636e\u5904\u7406\n\n### \u5904\u7406\u5f02\u5e38\u6570\u636e","18ce1d4a":"\u6b22\u8fce\u89c2\u4f17\u516c\u4f17\u53f7 **Python\u722c\u866b\u4e0e\u7b97\u6cd5\u8fdb\u9636**\n![](https:\/\/ws4.sinaimg.cn\/large\/006tNbRwly1fwhdcgieirj30by0by0tj.jpg)","685bdd94":"# \u7406\u89e3\u95ee\u9898\u4e0e\u6570\u636e\n\n\u5148\u6574\u4f53\u67e5\u770b\u4e0b\u6570\u636e","41c76e5a":"### \u8f6c\u975e\u6570\n\n\n\n\u5bf9\u975e\u6570\u5b57\u7684\u5c5e\u6027\u8fdb\u884c\u8f6c\u6362\u3002\u8fd9\u91cc\u6211\u4f7f\u7528\u6700\u7b80\u5355\u7c97\u66b4\u7684get_dummies()\u6765\u5bf9train\u6570\u636e\u548ctest\u6570\u636e\u8fdb\u884c\u8f6c\u6362\u3002\u8fd9\u91cc\u4e5f\u6709\u4e2a\u5730\u65b9\u8981\u6ce8\u610f\uff1a**test\u6570\u636e\u91cc\u9762\u5c5e\u6027\u7684\u53d6\u503c\u8303\u56f4\u53ef\u80fd\u8ddftrain\u6570\u636e\u91cc\u9762\u5c5e\u6027\u7684\u53d6\u503c\u8303\u56f4\u90e8\u5206\u4e0d\u540c\u3002\u8fd9\u6837\u5982\u679c\u76f4\u63a5\u5bf9test\u6570\u636e\u548ctrain\u6570\u636e\u505aget_dummies\uff0c\u5f88\u53ef\u80fd\u4f1a\u5bfc\u81f4test\u548ctrain\u6570\u636e\u8f6c\u5316\u540e\u51fa\u73b0\u4e86\u4e0d\u540c\u7684\u5217\u3002\u6240\u4ee5\u9700\u8981\u7efc\u5408\u5904\u7406**\u3002","37fc7dd8":"# \u603b\u7ed3\n\n\u91cd\u65b0\u56de\u987e\uff0c\u7528\u5230\u4e86\u54ea\u4e9b\u77e5\u8bc6\uff1f\n\n\u9996\u5148\u5f53\u7136\u662fpandas\u548cseaborn\u7684\u4f7f\u7528\uff0c\u4e00\u4e2a\u7528\u6765\u5904\u7406\u6570\u636e\uff0c\u8fd9\u90e8\u5206\u901a\u5e38\u4f1a\u82b1\u8d39\u5f88\u591a\u65f6\u95f4\uff0c\u4e00\u4e2a\u7528\u6765\u53ef\u89c6\u5316\uff0c\u7528\u56fe\u6765\u4ee3\u66ff\u6570\u636e\uff0c\u76f4\u89c2\u660e\u4e86\uff1b\u5904\u7406\u5b8c\u6570\u636e\u540e\u76f4\u63a5\u4f7f\u7528sklearn.linear_model.LinearRegression\u8fdb\u884c\u7ebf\u6027\u56de\u5f52\uff0c\u770b\u770b\u7b80\u5355\u4f8b\u5b50","8e03e9e6":"\u70ed\u529b\u56fe\u663e\u793a\u6709\u5f88\u591a\u65f6\u5019\u663e\u793a\u4e0d\u5168\uff0c\u5c24\u5176\u5c5e\u6027\u7279\u522b\u591a\u7684\u65f6\u5019\u3002\u8fd9\u4e2a\u65f6\u5019\uff0c\u53ef\u80fd\u76f4\u63a5\u67e5\u770b\u66f4\u65b9\u4fbf","6a970db0":"```python\n>>> from sklearn import linear_model\n>>> clf = linear_model.LinearRegression()\n>>> X = [[0,0],[1,1],[2,2]]\n>>> y = [0,1,2]\n>>> clf.fit(X,y)\n>>> clf.coef_\n[ 0.5 0.5]\n>>> clf.intercept_\n1.11022302463e-16\n```","de18cbcb":"\u5904\u7406\u7f3a\u5931\u6570\u636e"}}