{"cell_type":{"d3bbf6a1":"code","b860879d":"code","6c344edd":"code","51024604":"code","7325e65c":"code","015b0247":"code","6ef7b2f9":"code","f7c20c37":"code","2ecff804":"code","3522b339":"code","6bb98a6a":"code","57c939d3":"code","9918c4ec":"code","da3cfb19":"code","bfa944ee":"code","d208b22f":"code","a6560aa5":"code","c5474828":"code","1ce8a944":"code","fafaf4f4":"code","9447c203":"code","28c89753":"code","70535b0a":"markdown","a4569324":"markdown","613973ae":"markdown","b4cdff38":"markdown","f3070d8c":"markdown","3e8ab47b":"markdown","cdd3f51e":"markdown","8fc7274f":"markdown","374551ed":"markdown","72470266":"markdown","b1d8020d":"markdown","0bc7fd93":"markdown","043ac942":"markdown","bd9b5ebf":"markdown","f369ed0f":"markdown","f4489ca9":"markdown","b436ee73":"markdown","95f5c611":"markdown","55b8bfc7":"markdown","30f3de64":"markdown","1969bc62":"markdown","03b2ba7b":"markdown","8c7c1253":"markdown","c091212a":"markdown","33d2f3c4":"markdown","8dffb130":"markdown","880f1658":"markdown","309f6ab9":"markdown","a6507661":"markdown","2a2025ef":"markdown"},"source":{"d3bbf6a1":"#Importing the needed libraries: \nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport os","b860879d":"# Loading the data set\nnetflixData = pd.read_csv(\"\/kaggle\/input\/netflix-shows\/netflix_titles.csv\")\nnetflixData.head(10)","6c344edd":"netflixData[\"release_year\"] = netflixData[\"release_year\"].astype(int)\nnetflixData[\"country\"] = netflixData[\"country\"].astype(str)\nnetflixData.dtypes","51024604":"netflixData.isna().sum()","7325e65c":"netflixData['type'] = netflixData['type'].astype(\"category\")\nnetflixData[\"rating\"] = netflixData['rating'].astype(\"category\")\nTVorMovie = netflixData[[\"type\", \"title\"]].groupby([\"type\"]).count().rename(columns = {\"title\": \"count\"}).reset_index()","015b0247":"y = TVorMovie['type']\nx = TVorMovie['count']\n\n# Use textposition='auto' for direct text\n\ndata= [go.Bar(x = x, \n              y = y,\n              text= (x\/sum(x)*100).round(0).astype(str) + \"%\",\n              textposition='auto',\n              orientation = \"h\"),\n              ]\n\nlayout = go.Layout(plot_bgcolor='white',\n                   bargap = 0.01,\n                   height = 400, \n                   font = {\"size\": 15,\n                           \"color\": \"black\"},\n                   title = \"Number of Movies and shows on netflix\", \n                   xaxis_title = \"Number of Shows\",\n                   )\n\nfig = go.Figure(data, layout)\n    \nfig.update_traces(marker_color=['#E50914', \"#131B1D\"])\n\nfig.show()","6ef7b2f9":"movies = netflixData[netflixData[\"type\"]==\"Movie\"].copy()\n\n#Getting the duration in minutes: \nmovies[\"duration\"] = movies[\"duration\"].str.split(\" \", expand = True)\nmovies[\"duration\"] = movies[\"duration\"].astype(int)\nmovies = movies.dropna()\n\n# Creating histogram with plotly\nfig = px.histogram(movies,\n                   x=\"duration\",\n                   hover_data = movies[[\"title\", \"duration\"]].columns,\n                   marginal = \"rug\",\n                   title = \"Duration of movies on Netflix\",\n                   labels = {\"duration\": \"Duration (minutes)\"},\n                   color_discrete_sequence = ['#E50914'])\n\nfig.update_layout({\"plot_bgcolor\":\"white\"},\n                  font = {\"color\": \"black\", \n                          \"size\": 15}, \n                 )\n                   \nfig.show()","f7c20c37":"movies[[\"rating\", \"show_id\"]].groupby(\"rating\").count().rename(columns = {\"show_id\": \"Count\"}\n    ).sort_values(by = \"Count\").style.set_caption(\"Number of movies per rating\")","2ecff804":"# Dropping the rating categories with just a few movies \nmoviesPlot = movies.drop(movies[(movies['rating'] == \"NC-17\") | (movies['rating'] == \"TV-Y7-FV\") | (movies['rating'] == \"UR\") ].index)\n\n#Creating plotly violin plot \nfig = px.violin(moviesPlot,  \n                y = \"duration\", \n                color =\"rating\", \n                box = False, \n                points =\"outliers\",\n                hover_data = movies[[\"title\", \"duration\"]].columns, \n                orientation = \"v\",\n                labels = {\"duration\": \"Duration (minutes)\"}, \n                title = \"Duration of movies per rating category\"\n               )\n\n# Updating layout of figure\nfig.update_layout({\"plot_bgcolor\":\"white\"},\n                  font = {\"color\": \"black\", \n                          \"size\": 15},\n                 )\nfig.update_yaxes(showgrid=True,linewidth=0, linecolor='white',gridcolor='#EAE3E3', gridwidth=0.1)\nfig.update_xaxes(showgrid=True,linewidth=0, linecolor='white')\n\n# Showing the figure\nfig.show()","3522b339":"moviesByYearCount = movies.groupby('release_year').count().reset_index()\n\nfig = px.line(moviesByYearCount,\n              x=\"release_year\",\n              y=\"show_id\",\n              labels = {\"show_id\": \"Number of Movies\", \"release_year\": \"Release Year\"},\n              title=\"Number of movies per year\", \n              color_discrete_sequence = ['#E50914'])\n\nfig.update_layout({\"plot_bgcolor\":\"white\"},\n                  font = {\"color\": \"black\"},\n                 )     \nfig.update_yaxes(showgrid=True,linewidth=0, linecolor='white',gridcolor='#EAE3E3', gridwidth=0.1)\nfig.update_xaxes(showgrid=True,linewidth=0, linecolor='white')\nfig.update_traces(line=dict(width=3))\n\nfig.show()","6bb98a6a":"fig = sns.jointplot(data = movies[(movies[\"release_year\"]>2000)&(movies[\"release_year\"]<2021)],\n                    x=\"release_year\", \n                    y=\"duration\",\n                    x_estimator=np.mean,\n                    x_ci = 95,\n                    kind=\"reg\",\n                    xlim = (2000, 2022),\n                    ylim = (40 , 140), \n                    height = 8,\n                    color =\"#E50914\"\n                     )\n\nfig.set_axis_labels('Release year', 'Duration (minutes)', fontsize=16, color = \"black\")\nfig.fig.suptitle('Duration of movies through the years')\nfig.ax_joint.collections[0].set_alpha(0)\nfig.fig.tight_layout()\nfig.fig.subplots_adjust(top=0.95)","57c939d3":"#create dummies df:\ndummiesCategories = movies[\"listed_in\"].str.replace(\", \",\",\").str.get_dummies(sep=\",\")\n\n\n#Dropping all categories with less then 100 movies:\ndummiesCategoriesCount = dummiesCategories.sum()\ndrop = dummiesCategoriesCount[dummiesCategoriesCount<100].index.tolist()\ndummiesCategories = dummiesCategories.drop(drop, axis =1)","9918c4ec":"#Merging \nmoviesDummiesCategories = movies.merge(right = dummiesCategories,\n                                       how = \"left\", \n                                       left_index = True,\n                                       right_index = True,\n                                      )\n#Creating plotly violin plot \nfig = go.Figure()\n\ncolumns = dummiesCategories.columns.tolist()\n\nfor category in columns:\n    df = moviesDummiesCategories[moviesDummiesCategories[category] == 1]\n    \n    fig.add_trace(go.Violin(y = df['duration'],\n                            name = category,\n                            box_visible= False,\n                            points = \"outliers\",\n                            meanline_visible=True))\n\nfig.update_layout({\"plot_bgcolor\":\"white\"},\n                  font = {\"color\": \"black\"},\n                  xaxis_title = \"Category\",\n                  yaxis_title = \"Duration (minutes)\",\n                  title = \"Duration movies per Category Netflix\"\n                 )                            \n\nfig.update_yaxes(showgrid=True,linewidth=0, linecolor='white',gridcolor='#EAE3E3', gridwidth=0.1)\nfig.update_xaxes(showgrid=True,linewidth=0, linecolor='white')\n\n# Showing the figure\nfig.show()","da3cfb19":"top10 = movies[[\"show_id\", \"country\"]].groupby(\"country\").count().sort_values(by = \"show_id\", ascending = False).rename(columns = {\"show_id\":\"Number of Movies\"}).head(10)\ntop10.style.set_caption(\"Top 10 producing countries of movies on Netflix\")","bfa944ee":"#One-hot encodiung based on country\ncountriesDummies = movies['country'].str.get_dummies(sep=\",\")\ncountriesDummiesTop4 =countriesDummies[[\"United States\",\"India\",\"United Kingdom\",\"Canada\"]]\nneflixDataDummiesTop4 = movies.merge(right = countriesDummiesTop4, how = 'left', left_index = True, right_index = True)\n\n#Creating plotly violin plot \nfig = go.Figure()\n\ncolumns = [\"United States\",\"India\",\"United Kingdom\",\"Canada\"]\n\nfor country in columns:\n    df = neflixDataDummiesTop4[neflixDataDummiesTop4[country] == 1]\n    \n    fig.add_trace(go.Violin(y = df['duration'],\n                            name = country,\n                            box_visible= False,\n                            points = \"outliers\",\n                            meanline_visible=True))\n\nfig.update_layout({\"plot_bgcolor\":\"white\"},\n                  font = {\"color\": \"black\"},\n                  xaxis_title = \"Country\",\n                  yaxis_title = \"Duration (minutes)\",\n                  title = \"Duration movies on Netflix for top 4 producing countries\"\n                 )                            \n\nfig.update_yaxes(showgrid=True,linewidth=0, linecolor='white',gridcolor='#EAE3E3', gridwidth=0.1)\nfig.update_xaxes(showgrid=True,linewidth=0, linecolor='white')\n\n# Showing the figure\nfig.show()","d208b22f":"#One hot encoding netflixData based on country \ncountriesDummies = netflixData['country'].str.get_dummies(sep=\",\")\n\ncountriesCount = countriesDummies.sum()\ncountriesCount = countriesCount.reset_index().rename(columns = {\"index\": \"Country\", 0:\"Number of Shows\"})\ncountriesCount['Country'] = countriesCount['Country'].str.strip()\n\ncountriesCount.loc[countriesCount['Country'].str.strip() == \"United States\", 'Country'] = \"United States of America\"\ncountriesCount = countriesCount.groupby(\"Country\").sum().reset_index().sort_values(by = \"Number of Shows\", ascending = False)\ncountriesCount = countriesCount[countriesCount.Country != 'nan']\n\n#Creating bar plot \nfig = px.bar(countriesCount.head(30), \n             x='Country', \n             y='Number of Shows', \n             #log_y = True,\n             color_discrete_sequence = ['#E50914'], \n             title = \"Countries of origin for shows on Netflix, top 30\")\n\nfig.update_layout({\"plot_bgcolor\":\"white\"},\n                  font = {\"color\": \"black\"} \n                 )\nfig.show()","a6560aa5":"#create dummies df:\ndummiesCatShows = netflixData[\"listed_in\"].str.replace(\", \",\",\").str.get_dummies(sep=\",\")\ndummiesCatShowsCount = dummiesCatShows.sum()\n\n#Dropping all categories with less then 100 shows:\ndrop = dummiesCatShowsCount[dummiesCatShowsCount<100].index.tolist()\ndummiesCatShows = dummiesCatShows.drop(drop, axis =1)\n\n#Barplot categories with plotly \nfig = px.bar(dummiesCatShows.sum().reset_index().sort_values(by = 0, ascending = False), \n             x='index', \n             y=0, \n             color_discrete_sequence = ['#E50914'], \n             title = \"Number of shows per category on Netflix\",\n             labels = {\"index\": \"Category\", \"0\": \"Number of Shows\"})\n\nfig.update_layout({\"plot_bgcolor\":\"white\"},\n                  font = {\"color\": \"black\"} \n                 )\nfig.show()","c5474828":"#Importing libraries to create interactive map:\nimport folium\nimport requests\nimport branca.colormap as cmp\nimport json\nimport geopandas","1ce8a944":"# JSON file with geodata for the countries: \ngeo = \"https:\/\/raw.githubusercontent.com\/python-visualization\/folium\/master\/examples\/data\/world-countries.json\"","fafaf4f4":"# Removing International movies\/TV Shows:\ndummiesCatShows = dummiesCatShows.drop([\"International TV Shows\",\"International Movies\"], axis = 1)\n\n# One hot encoding for countries \nnetflixDataDummiesCountries =  netflixData[\"country\"].str.replace(\", \",\",\").str.get_dummies(sep=\",\")\nnetflixDataDummiesCountries = netflixDataDummiesCountries.rename(columns={'United States':'United States of America'})\n\n\n\n#initializing data frame to store most produced show category per country\nmostProducedCatPerCountry = pd.DataFrame()\n\nfor country in netflixDataDummiesCountries.columns.tolist():\n    index = netflixDataDummiesCountries[netflixDataDummiesCountries[country]==1].index\n    category = dummiesCatShows.iloc[index].sum().idxmax()\n    lib = {\"Country\": country, \"Category\":category}\n    mostProducedCatPerCountry = mostProducedCatPerCountry.append(lib,ignore_index=True)\n    #print(country, category)","9447c203":"df = geopandas.read_file(geo)\ndf = df.merge(right = mostProducedCatPerCountry, left_on = \"name\", right_on = \"Country\")\ndf = df.drop(\"Country\", axis =1)\ndf = df.merge(right = countriesCount, left_on = \"name\", right_on = \"Country\")\ndf = df.drop(\"Country\", axis =1)\ndf = df.rename(columns = {\"Category\": \"Most popular production category:\", 'name': 'Country:','Number of Shows':\"Number of Shows:\" })\n\ndf.to_file(\"output.json\", driver=\"GeoJSON\")\n\nstep = cmp.StepColormap(\n [\"#fdc9cb\", '#fcb6ba', '#fb9096', '#f96b72',\"#f85860\", '#f7323c', \"#E50914\"],\n vmin=1, vmax=1000,\n index=[1,5, 20,100,200,500, 3297, ],  #for change in the colors, not used fr linear\n caption='Number of shows on Netflix produced'    #Caption for Color scale or Legend\n)\n\ndef getNumberOfShows(feature):\n    country = feature['properties'][\"Country:\"]\n    NumOfShows = countriesCount.loc[countriesCount['Country'].str.strip() == country, 'Number of Shows']\n    NumOfShows = NumOfShows.values.tolist()\n    NumOfShows = NumOfShows[0]\n    return NumOfShows\n\nworldMap = folium.Map(location = [0,0],\n                      zoom_start = 2, \n                      control_scale=True,\n                      tiles = 'https:\/\/{s}.basemaps.cartocdn.com\/rastertiles\/light_nolabels\/{z}\/{x}\/{y}.png',\n                      attr = '<a href=\"http:\/\/jawg.io\" title=\"Tiles Courtesy of Jawg Maps\" target=\"_blank\">&copy; <b>Jawg<\/b>Maps<\/a> &copy; <a href=\"https:\/\/www.openstreetmap.org\/copyright\">OpenStreetMap<\/a> contributors')\n\ngeoJSON = folium.GeoJson(\"output.json\", \n               name=\"geojson\", \n               style_function = lambda feature: {\n                                                 'fillColor': step(getNumberOfShows(feature) ),\n                                                 'color': '#C1B9B8',       #border color for the color fills\n                                                 'weight': 1,            #how thick the border has to be\n                                                 'dashArray': '5, 3',     #dashed lines length,space between them\n                                                 'fillOpacity': 0.9                                                                                                                                                                                                                             \n                                                }\n              ).add_to(worldMap)\n\nfolium.features.GeoJsonTooltip([\"Country:\",\"Most popular production category:\", 'Number of Shows:'],labels=True).add_to(geoJSON)\nstep.add_to(worldMap) \nworldMap","28c89753":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n#import numpy as np # linear algebra\n#import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","70535b0a":"---\n***Duration movies for top producing countries***  \n\nThe table below shows the top 10 producing countries of movies on Netflix. Hollywood and Bollywood seem to lead the list, with the United States and India having produced 1627 and 827 movies respectively. After the top 2, the number of movies per country declines rapidly with only 67 movies for the number 10 Indonesia. ","a4569324":"___\n### Duration movies per category","613973ae":"*Figure 9: Number of shows on Netflix for top 30 producing countries* <a name=\"Figure9\"><\/a>","b4cdff38":"## 1.2 Loading the data <a name=\"Loading\"><\/a>\nFirst, the needed libraries and dataset are loaded:","f3070d8c":"The distributions for most ratings are very similar with medians ranging from 90 to 100 minutes. An exception with longer movies times is the rating TV-14, with a median of 111 minutes, and some very long movies as outliers, including the longest movie in the data set, Schools of Mischief. \nThe exceptions with the shorter movie durations include TV-Y, TV-Y7, and to lesser extent G and TV-G. On average, children movies can be expected to be shorter than movies suited for an older audience. Which can be a valid explanation of the observed differences.   \n<n><\/n>  \n**Want to see one or multiple distributions in more detail? Try to click and double click the items in the legend!**","3e8ab47b":"*Figure 6: Duration of movies on Netflix per category* <a name=\"Figure6\"><\/a>","cdd3f51e":"*Figure 3: Duration of movies on Netflix per age rating* <a name=\"Figure3\"><\/a>","8fc7274f":"# Table of Contents\n1. [Introduction](#Introduction)  \n1.2.[Loading the Data](#Loading)\n2. [Explonatory data analysis](#Explonatory)  \n2.1 [Duration](#Duration)  \n2.2.[Show production per country](#Country)   \n2.3 [Number of Shows per Category](#Category)  \n3. [Interactive map](#InteractiveMap)","374551ed":"---\n## 2.1 Duration of movies  <a name=\"Duration\"><\/a>","72470266":"## 2.2 Show production per country <a name=\"Country\"><\/a>\n* Number of shows per country by using one-hot encoding (multiple countries for some shows). This show is counted for each country listed.\n\n[Figure 8](#Figure8) shows the number of shows for the top 30 producing countries of shows on Netflix. Holywood and Bollywood seem to lead the list, with the U.S.A. and India producing 3297 and 990 shows respectively. Afterwhich the numbers drop rapidly. Number 30 has produced only 39 of the shows visible on Netflix. Again, some shows are produced in multiple countries meaning that the same shows can be counted for multiple countries.","b1d8020d":"*Figure 5: Duration of movies on Netflix through the years. Every line gives 95% C.I. for the year on x-axis* <a name=\"Figure5\"><\/a>","0bc7fd93":"Figure 6 shows the duration of shows per category. The category with the shortest average duration is stand-up comedy, followed by children and family movies and documentaries. The categories with the longest movies include comedies, dramas, and international movies. It should be noted that one movie, in general, has multiple categories. Meaning that most movies are represented in multiple distributions. \n<n><\/n> \n\n**Want to see one or multiple distributions in more detail? Try to click and double click the items in the legend!**","043ac942":"The number of NaNs per column: ","bd9b5ebf":"*Figure 4: Number of movies on Netflix per release year* <a name=\"Figure4\"><\/a>","f369ed0f":"[Figure 5](#Figure5) gives the trend in time for the duration of movies on Netflix. This graph seems to indicate that the newer movies on Netflix are shorter than older movies. In a good [read]( https:\/\/towardsdatascience.com\/are-new-movies-longer-than-they-were-10hh20-50-year-ago-a35356b2ca5b) on Medium by Przemys\u0142aw Jarz\u0105bek the question if new movies kept increasing in run time was investigated. By crunching the numbers of thousands of movies on IMDb.com it was shown that no trend in time was present for the run time of movies, going back to 1960.  \n\n---\nSo why do we see this trend?  \nThe reason cannot be answered with this dataset alone. I thought of one possible reason, but do let me know if you can think of others or if you can think of a method to answer this question!\n\n*One hypothesis*  \nMovies released in cinemas take longer to be released on streaming services as movies specifically created for such services, e.g. Netflix Originals.  If theatre movies also have longer run times than streaming specific movies, the trend could be explained. IMDb.com does include data about the release dates of movies in theatre and Internet releases. This data could be added to help test this hypothesis.\nIt is certainly interesting to see if this trend holds for this period in the coming years. \n","f4489ca9":"*Figure 7: Duration of movies on Netflix for top 4 producing countries* <a name=\"Figure7\"><\/a>","b436ee73":"### Duration movies\nA movie for everyone! Is it a busy day, but you need those few precious moments to yourself filled to the brim with entertainment? No worries, Netflix has you covered with the shortest movie on the platform, *Cops and Robbers*, taking only 8 minutes of your time. Check it out [here](\u201chttps:\/\/www.netflix.com\/nl-en\/title\/81354555\u201d).  \nRainy cold day, which just invites you to stay inside on the couch? Check out the longest movie in the arsenal of Netflix, *The School of Mischief*. Make sure your schedule is free though because it takes a whopping 4 hours and 12 minutes!  Check this one out [here](\u201chttps:\/\/www.netflix.com\/nl-en\/title\/81236594\u201d).\n\n[Figure 2](#Figure2) shows a histogram of all movies on the platform. In the subplot, every line represents one movie. By hovering above the lines you can try and find your favourite movie. One of my favourites *The Lord of the Rings: The Return of the King*, happens to be also one the longest I have ever watched. Can you find it?  \n\nThe figure also shows that most movies only take about 1.5 hours of your time. Much better manageable for busy data scientists!","95f5c611":"# Future work?","55b8bfc7":"*Figure 1: Number of  Movies and TV Shows on Netflix* <a name=\"Figure1\"><\/a>","30f3de64":"## 2.3 Number of shows per category <a name=\"Category\"><\/a>\n\n\n[Figure 9](#Figure9) shows all the categories in the \u201clisted_in\u201d column of the dataset. International movies seem to bet the largest category of all, followed closely by Drama. After the category drama, the number of shows decreases rapidly. The smallest category is classic movies, with only 103 shows. Seems like Netflix is strict with naming classics!\n","1969bc62":"![image.png](attachment:image.png)\n*Illustration: [Inc. Magazine](https:\/\/www.inc.com\/carmine-gallo\/the-7-word-attitude-that-fuels-netflixs-success.html)*  \n <span style= \"font-size:4em;\">Shows on Netflix<\/span>  \n <span style=\"font-size:2.3em;\">Explanatory data analysis with (interactive) visuals<\/span>  \n <span style=\"font-size:1.4em;color:#404040\">  \n     By Dennis Kooijman  \n    \n     Date: 15 January, 2021\n <\/span>","03b2ba7b":"___\n### Duration of movies through time  \nNow let's look if we can find a trend through time for the duration of the movies. First, lets see how many movies per year are present in the dataset. [Figure 4](#Figure4) visualizes the trend in time. \nThe number of movies seems to take off after the year 2000, dropping again for movies after 2018, therefore only the movies after 2000 and up to 2021 will be included in the data.  ","8c7c1253":"*Figure 8: Number of shows on Netflix for top 30 producing countries* <a name=\"Figure8\"><\/a>","c091212a":"# If you liked this notebook upvotes are highly appreciated!\n# Thank you for reading!","33d2f3c4":"# 3. Interative Map <a name=\"InteractiveMap\"><\/a>\nLets now combine some of the information we have gathered on countries and categories into one the interactive map in [Figure 10](#Figure10). The colours of the maps indicate the number of produced shows per country. Try to hover above the map and you will see for each country, the name, the number of shows produced, and the most popular production category. For this interactive map, the categories International movies and TV Shows categories have not been included. After all, these change depending on where you are from. \n\nCan you find some interesting countries, based on this data? ","8dffb130":"___\n### Duration per rating  \nIt would also be interesting to see if there are differences in movie duration between different categories. Agian we focus on the movies. The ratings gives an indication for which age groups a movie is suited. First, let\u2019s look at the definitions of the different ratings according to [http:\/\/www.tvguidelines.org\/](\u201chttp:\/\/www.tvguidelines.org\/resources\/TV_Parental_guidelines_Brochure.pdf\u201d)\n\n\n<center> Table: Meaning of the different ratings <\/center>\n\n|     Rating      |     Meaning                                                                                                                                        |\n|-----------------|----------------------------------------------------------------------------------------------------------------------------------------------------|\n|     NC-17       |     No One 17 and Under Admitted. Clearly adult. Young children will not be admitted to   watch the film.                                          |\n|     TV-Y7-FV    |     Is used to indicate that a program contains \u201cfantasy   violence\u201d that may be more intense or combative than other TV-Y7 programs.    |\n|     UR          |     Unrated                                                                                                                                        |\n|     G           |     Most parents would find this program suitable for all ages.                                                                                  |\n|     NR          |     Not Rated                                                                                                                                      |\n|     TV-Y7       |     This program is designed for children age 7 and above.                                                                                         |\n|     TV-G        |     This program is designed for children age 7 and above.                                                                                         |\n|     TV-Y        |     This program is designed to be appropriate for all   children                                                                                  |\n|     PG          |     This program contains material that parents may find   unsuitable for younger children.                                                        |\n|     PG-13       |     Some material may be inappropriate for   children under 13                                                                                     |\n|     TV-PG       |     This program contains material that parents may find   unsuitable for younger children.                                                        |\n|     R           |     Children Under 17 Require Accompanying Parent or Adult Guardian                                                                                |\n|     TV-14       |     This   program contains some material that many parents would find unsuitable for   children under 14 years of     age.                        |\n|     TV-MA       |     This   program is specifically designed to be viewed by adults and therefore may be unsuitable   for children     under 17                     |\n\n\n<n> <\/n>  \nTo avoid reporting skewed distributions, the table below shows the number of movies in the data frame for each rating. Three ratings NC-17, TV-Y7-FV, and UR only have a few movies. These categories are therefor not included in the distributions shown in [Figure 3](#Figure3).  \n","880f1658":"[Figure 7](#Figure4) shows the distributions for the Top 4 countries, the United States, India, United Kingdom, and Canada. For the three western countries, the distributions appear to be very similar with medians of ranging from 90 to 100 minutes. \nOn the other hand, movies produced in India seem to be much longer with a median of 127 minutes and an average of 128 minutes\n","309f6ab9":"# 1. Introduction <a name=\"Introduction\"><\/a>\nThis Notebook goes through the data set of Netflix movies and TV shows by showing (interactive) visuals, that include plots generated with the Plotly library and an interactive choropleth map, showing the number of shows on Netflix produced per country.  \nOne of the goals of the project was to find interesting trends hidden beneath the data and to search for differences between different categories. Keep reading if you want to find your favourite movie or country in the visuals or map.  \nComments and suggestions are always welcome!\n","a6507661":"# 2. Explonatory data analysis <a name=\"Explonatory\"><\/a>\nThe data consist of two show type (movies and TV Shows) given by the type column. 31% of the shows are movies, and 69% are TV Shows. [Figure 1](#Figure1) also gives the number of shows per type. The duration column format is based on the type of the show. The movie type has its duration given in minutes, whereas the duration of the TV Shows type is given in seasons. \nFirst, the duration of the shows will be explored. Because of the difference in formats, the movies and shows will be discussed separately.\n\n","2a2025ef":"*Figure 2: Duration of movies on Netflix* <a name=\"Figure2\"><\/a>"}}