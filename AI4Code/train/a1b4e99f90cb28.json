{"cell_type":{"c91fa5b5":"code","a4971766":"code","8475ea4b":"code","577372e3":"code","366474c0":"code","3b0fbcb3":"code","4197a99a":"code","32cce4bf":"code","e28cfbc3":"code","62025ab8":"code","052cf0aa":"markdown","0223080a":"markdown"},"source":{"c91fa5b5":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport gc\nimport lightgbm as lgb\nplt.rcParams['figure.figsize'] = [20, 8]\nimport seaborn as sns\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\nimport os\nprint(os.listdir(\"..\/input\"))","a4971766":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')","8475ea4b":"y = train['target']\ntrain.drop(['ID_code', 'target'], axis=1, inplace=True)\ntest.drop(['ID_code'], axis=1, inplace=True)\ngc.collect()","577372e3":"param1 = {'objective': 'binary',\n                 'boosting': 'gbdt',\n                 'random_state': 42,\n                 'metric': 'auc',\n                 'num_threads': -1,\n                 'learning_rate' : 0.1,}\nparam2 = {'objective': 'binary',\n                 'boosting': 'gbdt',\n                 'random_state': 42,\n                 'metric': 'auc',\n                 'num_threads': -1,\n                 'num_leaves': 7,\n                 'max_depth': 20,\n                 'reg_alpha': 0.1,\n                 'reg_lambda': 0.1,\n                 'learning_rate' : 0.2,}\nparam3 = {'objective': 'binary',\n                 'boosting': 'gbdt',\n                 'random_state': 42,\n                 'metric': 'auc',\n                 'num_threads': -1,\n                 'num_leaves': 20,\n                 'max_depth': 15,\n                 'reg_alpha': 0,\n                 'reg_lambda': 0,\n                 'learning_rate' : 0.2,}\nparam4 = {'objective': 'binary',\n                 'boosting': 'gbdt',\n                 'random_state': 42,\n                 'metric': 'auc',\n                 'num_threads': -1,\n                 'num_leaves': 20,\n                 'max_depth': 25,\n                 'reg_alpha': 0.5,\n                 'reg_lambda': 0.5,\n                 'learning_rate' : 0.15,}\nparam5 = {'objective': 'binary',\n                 'boosting': 'gbdt',\n                 'random_state': 42,\n                 'metric': 'auc',\n                 'num_threads': -1,\n                 'num_leaves': 30,\n                 'max_depth': 100,\n                 'reg_alpha': 0.977,\n                 'reg_lambda': 0.411,\n                 'learning_rate' : 0.083,\n                 'min_data_in_leaf':1749,\n                 'bagging_fraction ':0.645,\n                 'bagging_fraq': 11,\n                 'feature_fraction':0.458,\n                 'verbose': 200,\n                 'min_gain_to_split':0.542,\n                 'subsample' : 0.376,\n                 'max_bin':638}","366474c0":"from sklearn import metrics\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.model_selection import train_test_split\nimport lightgbm as lgb\n\nkf = KFold(n_splits=3, random_state = 42,shuffle = True)\n\noof_clf1 = np.zeros(len(train))\noof_clf2 = np.zeros(len(train))\noof_clf3 = np.zeros(len(train))\noof_clf4 = np.zeros(len(train))\noof_clf5 = np.zeros(len(train))\n\noof_clf1_t = np.zeros(len(train))\noof_clf2_t = np.zeros(len(train))\noof_clf3_t = np.zeros(len(train))\noof_clf4_t = np.zeros(len(train))\noof_clf5_t = np.zeros(len(train))\n\nfor fold_, (trn_idx, val_idx) in enumerate(kf.split(train.values, y.values)):\n        print(\"fold n\u00b0{}\".format(fold_))\n        \n        train_data = lgb.Dataset(train.iloc[trn_idx], label = y.iloc[trn_idx])\n        valid_data = lgb.Dataset(train.iloc[val_idx], label=y.iloc[val_idx])\n        \n        model1 = lgb.train(param1, train_data, 15000, valid_sets=[valid_data], early_stopping_rounds=2000,verbose_eval=100)\n        model2 = lgb.train(param2, train_data, 15000, valid_sets=[valid_data], early_stopping_rounds=2000,verbose_eval=100)\n        model3 = lgb.train(param3, train_data, 15000, valid_sets=[valid_data], early_stopping_rounds=2000,verbose_eval=100)\n        model4 = lgb.train(param4, train_data, 15000, valid_sets=[valid_data], early_stopping_rounds=2000,verbose_eval=100)\n        model5 = lgb.train(param5, train_data, 15000, valid_sets=[valid_data], early_stopping_rounds=2000,verbose_eval=100)            \n        \n        oof_clf1[val_idx] = model1.predict(train.iloc[val_idx])\n        oof_clf2[val_idx] = model2.predict(train.iloc[val_idx])\n        oof_clf3[val_idx] = model3.predict(train.iloc[val_idx])\n        oof_clf4[val_idx] = model4.predict(train.iloc[val_idx])\n        oof_clf5[val_idx] = model5.predict(train.iloc[val_idx])\n        \n        oof_clf1_t[val_idx] = model1.predict(test.iloc[val_idx])\n        oof_clf2_t[val_idx] = model2.predict(test.iloc[val_idx])\n        oof_clf3_t[val_idx] = model3.predict(test.iloc[val_idx])\n        oof_clf4_t[val_idx] = model4.predict(test.iloc[val_idx])\n        oof_clf5_t[val_idx] = model5.predict(test.iloc[val_idx])\n        \n        print('Fold no: {}'.format(fold_))\n        print(\"AUC LGB1:{} \".format(metrics.roc_auc_score(y.iloc[val_idx], oof_clf1[val_idx])))\n        print(\"AUC LGB2:{} \".format(metrics.roc_auc_score(y.iloc[val_idx], oof_clf2[val_idx])))\n        print(\"AUC LGB3:{} \".format(metrics.roc_auc_score(y.iloc[val_idx], oof_clf3[val_idx])))\n        print(\"AUC LGB4:{} \".format(metrics.roc_auc_score(y.iloc[val_idx], oof_clf4[val_idx])))\n        print(\"AUC LGB5:{} \".format(metrics.roc_auc_score(y.iloc[val_idx], oof_clf5[val_idx]))) ","3b0fbcb3":"f_layer_train = pd.DataFrame( {'LGBM1': oof_clf1.ravel(),\n     'LGBM2': oof_clf2.ravel(),\n     'LGBM3': oof_clf3.ravel(),\n      'LGBM4' :oof_clf4.ravel(),\n        'LGBM5': oof_clf5.ravel(),\n    })\n\nf_layer_test = pd.DataFrame( {'LGBM1': oof_clf1_t.ravel(),\n     'LGBM2': oof_clf2_t.ravel(),\n     'LGBM3': oof_clf3_t.ravel(),\n      'LGBM4' :oof_clf4_t.ravel(),\n        'LGBM5': oof_clf5_t.ravel(),\n    })","4197a99a":"param = {'objective': 'binary',\n                 'boosting': 'gbdt',\n                 'random_state': 42,\n                 'metric': 'auc',\n                 'num_threads': -1,\n                 'learning_rate' : 0.1,}","32cce4bf":"kf = KFold(n_splits=5, random_state = 42,shuffle = True)\n\noof_clf1_3 = np.zeros(len(train))\noof_clf1_t_3 = np.zeros(len(train))\n\nfor fold_, (trn_idx, val_idx) in enumerate(kf.split(f_layer_train.values, y.values)):\n        print(\"fold n\u00b0{}\".format(fold_))\n        train_data = lgb.Dataset(f_layer_train.iloc[trn_idx], label = y.iloc[trn_idx])\n        valid_data = lgb.Dataset(f_layer_train.iloc[val_idx], label=y.iloc[val_idx])\n        \n        model = lgb.train(param, train_data, 10000, valid_sets=[valid_data], early_stopping_rounds=2000,verbose_eval=100)\n                \n        oof_clf1_3[val_idx] = model.predict(f_layer_train.iloc[val_idx])        \n        \n        oof_clf1_t_3[val_idx] = model.predict(f_layer_test.iloc[val_idx])\n        \n        print('Fold no: {}'.format(fold_))\n        print(\"AUC LGB1:{} \".format(metrics.roc_auc_score(y.iloc[val_idx], oof_clf1_3[val_idx])))","e28cfbc3":"sbm = pd.read_csv('..\/input\/sample_submission.csv', usecols=['ID_code'])\nsbm['target'] = oof_clf1_t_3\nsbm.head()","62025ab8":"sbm.to_csv('submission.csv', index=False)","052cf0aa":"****Now we will make a data frame with the predictions of the previous models, on which we will make the main prediction****","0223080a":"****Set different parameters for 5 models. The parameters are chosen almost randomly. Also, we have the same size of the training and test sample, so we will make a prediction for them at the same time. You can add different models, with different parameters and also add more layers before the final prediction.****"}}