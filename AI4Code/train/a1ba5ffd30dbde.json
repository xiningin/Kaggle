{"cell_type":{"27663b3a":"code","bf854c99":"code","fa4469d7":"code","667e8ed5":"code","7a1cda25":"code","4463c41d":"code","802a90d2":"code","e199251f":"code","eb8042ec":"code","3ec47706":"code","a3e95bd3":"code","690cc2a8":"code","ae981455":"code","9a3ed687":"code","20486702":"code","446f8055":"code","82301481":"code","decd3c1e":"code","5ecffa1d":"code","c1b02733":"code","21b1891d":"code","58ccb250":"code","a3a8eb99":"code","e59cffd1":"code","126d7df2":"code","b20a7b45":"code","e24c25d7":"code","e64d28be":"code","c9c464f7":"code","2f185094":"code","bc5290f1":"code","7217333d":"code","090d7fd2":"code","3c43b895":"markdown","12136408":"markdown","ea66de21":"markdown","c45d7bda":"markdown","bbea245b":"markdown","82638196":"markdown","06279694":"markdown","35879c2d":"markdown","58ed4313":"markdown","2b902381":"markdown","f83f91ed":"markdown","a7579a9f":"markdown","d78eff11":"markdown","ed1c43db":"markdown","a62566d0":"markdown","b10dc76e":"markdown","44f9e3eb":"markdown","1c0cf9de":"markdown","c2b5cd96":"markdown","38894a4e":"markdown","8b84c68c":"markdown","e132acdd":"markdown","1ab7e2cb":"markdown","83b8a5d7":"markdown","28cb8f65":"markdown"},"source":{"27663b3a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf854c99":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import confusion_matrix,accuracy_score, classification_report\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nimport xgboost as xgb\n\nimport warnings\nwarnings.filterwarnings('ignore')","fa4469d7":"df = pd.read_csv(\"..\/input\/parkinsons-disease-data-set\/parkinsons.data\")\ndf.head()","667e8ed5":"df.shape","7a1cda25":"df.info()","4463c41d":"df.describe()","802a90d2":"for i in df.columns[1:]:\n    fig, ax = plt.subplots()\n    ax.boxplot(df[i])\n    plt.ylabel(i)\n\n# df1 = df.drop('name', axis=1)\n# plt.figure(figsize=(25,15))\n# sns.boxplot(data= df1);","e199251f":"df['status'].value_counts().plot(kind='pie', autopct = \"%1.0f%%\")","eb8042ec":"df['status'].value_counts()","3ec47706":"df.hist(figsize=(15,15));","a3e95bd3":"print(\"Original shape of data: \", df.shape)\nx = df.drop(['status','name'], axis=1)\nprint(\"Featues shape:\", x.shape)\ny = df.status\nprint(\"Target shape: \", y.shape)","690cc2a8":"scaler = MinMaxScaler((-1, 1))\n\n# fits the data normally \nX = scaler.fit_transform(x) ","ae981455":"X","9a3ed687":"from sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test=train_test_split(X, y, test_size=0.2) ","20486702":"clf = LogisticRegression()\n\n#Train Model\nclf.fit(x_train, y_train)","446f8055":"# Prediction on Test and Train Set \npred_logistic_test = clf.predict(x_test)\npred_logistic_train = clf.predict(x_train)","82301481":"print(\"Training Accuracy: \", accuracy_score(y_train, pred_logistic_train))\nprint(\"Test Accuracy: \", accuracy_score(y_test, pred_logistic_test))","decd3c1e":"print(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, pred_logistic_test))\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, pred_logistic_test))","5ecffa1d":"dt = DecisionTreeClassifier()\n\n# Train model \ndt.fit(x_train, y_train)","c1b02733":"pred_dt_test = dt.predict(x_test)\npred_dt_train = dt.predict(x_train)","21b1891d":"print(\"Training Accuracy: \", accuracy_score(y_train, pred_dt_train))\nprint(\"Test Accuracy: \", accuracy_score(y_test, pred_dt_test))","58ccb250":"print(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, pred_dt_test))\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, pred_dt_test))","a3a8eb99":"rf = RandomForestClassifier()\nrf.fit(x_train, y_train)","e59cffd1":"train_pred_rf = rf.predict(x_train)\npred_rf = rf.predict(x_test)","126d7df2":"print(\"Training Accuracy: \",accuracy_score(y_train, train_pred_rf))\nprint(\"Test Accuracy: \",accuracy_score(y_test, pred_rf))","b20a7b45":"print(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, pred_rf))\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, pred_rf))","e24c25d7":"gb = GradientBoostingClassifier()\n\n# Training model\ngb.fit(x_train, y_train)\n\n# Prediction on test and train set\ngb_pred_train = gb.predict(x_train)\ngb_pred = gb.predict(x_test)","e64d28be":"print(\"Training Accuracy: \",accuracy_score(y_train, gb_pred_train))\nprint(\"Test Accuracy: \", accuracy_score(y_test, gb_pred))","c9c464f7":"print(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, gb_pred))\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, gb_pred))","2f185094":"xg = xgb.XGBClassifier()\n\n# Training model\nxg.fit(x_train, y_train)","bc5290f1":"# prediction on train and test set\nxg_pred_train = xg.predict(x_train)\nxg_pred = xg.predict(x_test)","7217333d":"print(\"Training Accuracy: \",accuracy_score(y_train, xg_pred_train))\nprint(\"Test Accuracy: \",accuracy_score(y_test, xg_pred))","090d7fd2":"print(\"Confusion Matrix: \")\nprint(confusion_matrix(y_test, xg_pred))\n\nprint(\"\\nClassification Report:\")\nprint(classification_report(y_test, xg_pred))","3c43b895":"<h2 align=\"center\"> Predicting Parkinson\u2019s Disease <\/h2>","12136408":"### Train-Test Split","ea66de21":"<h2 align='center'> Logistic Regression <\/h2>","c45d7bda":"- 97% accurate in predicting Disease","bbea245b":"<h2 align='center'> Decision Tree <\/h2>","82638196":"- 89% accurate in predicting Disease","06279694":"<h2 align='center'> Random Forest <\/h2>","35879c2d":"## Inspecting Data and Exploratory Data Analysis","58ed4313":"### Feature Engineering","2b902381":"- As we had seen previously in statistical summary, we had some outliers also present in data","f83f91ed":"- 94% accurate in predicting Disease","a7579a9f":"- There are 195 rows and 24 columns","d78eff11":"- 92% accuracy On Test Data","ed1c43db":"- There are some outliers as we can see some attributes have huge difference in their 75 percentile value and maximum value. ","a62566d0":"- We can see some of the data is normally distributed and most of the attributes are right skewed","b10dc76e":"- 97% accurate in predicting Disease","44f9e3eb":"<h2 align='center'> Gradient Boost <\/h2>","1c0cf9de":"### Imorting Essential Libraries","c2b5cd96":"<h2 align='center'> XG Boost <\/h2>","38894a4e":"- Target column ie status is imbalanced as 75% is for 1 and rest 25% is for 0\n","8b84c68c":"### Conclusion : Random Forest and XG-Boost both are 97% accurate in predicting disease.","e132acdd":"#### Matrix column entries (attributes):\n- name - ASCII subject name and recording number\n- MDVP:Fo(Hz) - Average vocal fundamental frequency\n- MDVP:Fhi(Hz) - Maximum vocal fundamental frequency\n- MDVP:Flo(Hz) - Minimum vocal fundamental frequency\n- MDVP:Jitter(%), MDVP:Jitter(Abs), MDVP:RAP, MDVP:PPQ, Jitter:DDP - Several measures of variation in fundamental frequency\n- MDVP:Shimmer,MDVP:Shimmer(dB),Shimmer:APQ3,Shimmer:APQ5,MDVP:APQ,Shimmer:DDA - Several measures of variation in amplitude\n- NHR, HNR - Two measures of the ratio of noise to tonal components in the voice\n- status - The health status of the subject (one) - Parkinson's, (zero) - healthy\n- RPDE, D2 - Two nonlinear dynamical complexity measures\n- DFA - Signal fractal scaling exponent\n- spread1,spread2,PPE - Three nonlinear measures of fundamental frequency variation","1ab7e2cb":"- We have 48 healthy patients and 147 parkinson disease affected patients ","83b8a5d7":"#### Min-Max Scaler ","28cb8f65":"- There are 22 float columns, 1 integer and 1 object column\n- There are no null values "}}