{"cell_type":{"841a2b2e":"code","0d28ed14":"code","e4a2f15a":"code","6cc58173":"code","be18aa12":"code","3c3187ed":"code","0ee2d287":"code","466d95de":"code","35cf1d64":"code","e2354059":"code","684c9e68":"code","0e47987a":"code","eee2182e":"code","f51aec1e":"code","d7a1a757":"code","71bfc1db":"code","17c73aa9":"code","310c4a96":"code","837daf62":"code","9bdd1b54":"code","8dcdba28":"code","feaffd19":"code","bed3492a":"code","fefe680c":"code","705507d1":"code","77009450":"code","1a81fa5e":"code","f438d3e9":"markdown","7bee0c5c":"markdown","aa1159e3":"markdown","4eafd9b0":"markdown","e9435552":"markdown","4a494331":"markdown","2c51d2ee":"markdown","15f44e4e":"markdown","4d71a832":"markdown","e0e203a4":"markdown"},"source":{"841a2b2e":"import pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nimport numpy as np\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots","0d28ed14":"data = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')","e4a2f15a":"data.shape","6cc58173":"data.sample(5)","be18aa12":"data.nunique()","3c3187ed":"print(list(data[\"type\"].unique()))\nprint(list(data[\"rating\"].unique()))","0ee2d287":"data.isnull().sum()","466d95de":"df=data.fillna('Unknown')\ndf['director']=df['director'].apply(lambda x: x.split(',')[0])\ndf['country']=df['country'].apply(lambda x: x.split(',')[0])\n\ndf[['duration','time']]=df['duration'].str.split(expand=True)\ndf=df.drop(df[df['date_added']=='Unknown'].index)\ndf['date_added']=pd.to_datetime(df['date_added']).dt.year\ndf.reset_index(drop=True, inplace=True)\ndf['duration']=df['duration'].astype(str).astype(int)\ndf.head(5)","35cf1d64":"df.dtypes","e2354059":"trace0 = go.Box(x=df['type'], y=df['date_added'], boxpoints='all', marker_color='indianred')\nfig=[trace0]\niplot(fig)","684c9e68":"df_tvshow = df[(df['type']=='TV Show')&(df['date_added']>=2015)]\ndf_movie = df[(df['type']=='Movie')&(df['date_added']>=2015)]\ndf_cleaned = pd.concat([df_tvshow, df_movie])\ndf_cleaned = df_cleaned.reset_index(drop=True)\ndf_cleaned.sample(5)","0e47987a":"top10_tvshow = df_tvshow[['director']]\ntop10_tvshow = top10_tvshow['director'].str.split(',').apply(lambda x: x[0])\ntop10_tvshow = top10_tvshow.value_counts()\ntop10_movies = df_movie[['director']]\ntop10_movies = top10_movies['director'].str.split(',').apply(lambda x: x[0])\ntop10_movies = top10_movies.value_counts()\n\nx1 = list(top10_tvshow.values[1:11])\nx2 = list(top10_movies.values[1:11])\n\ny1 = list(top10_tvshow.index[1:11])\ny2 = list(top10_movies.index[1:11])\n\nfig = make_subplots(rows=1, cols=2, subplot_titles=(\"Directors of TV Show\", \"Directors of Movie\"))\n\nfig.add_trace(\n    go.Bar(name=\"Tv Show\",y = y1, x = x1,orientation='h' ),\n    row = 1, col = 1,\n)\n\nfig.add_trace(\n    go.Bar(name=\"Movie\",y = y2, x = x2,orientation='h' ),\n    row = 1, col = 2,\n)\n\n# fig.update_traces(hoverinfo=\"y+name+x\")\nfig.update_layout(legend = dict(orientation = \"h\",\n                               yanchor = \"bottom\",\n                                xanchor = \"right\",\n                                y = 1.10,\n                                x = 0.1))\nfig.show()","eee2182e":"top_cast_tvshow= df_tvshow['cast'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) \ncast_tvshow = []\nfor i in top_cast_tvshow:\n    cast_tvshow += i\ncast_tvshow = pd.DataFrame(cast_tvshow, columns=['cast'])\ncast_tvshow = cast_tvshow['cast'].value_counts()\n\nx1 = list(cast_tvshow.values[1:11])\ny1 = list(cast_tvshow.index[1:11])\n\ntop_cast_movie = df_movie['cast'].apply(lambda x :  x.replace(' ,',',').replace(', ',',').split(',')) \ncast_movie = []\nfor i in top_cast_movie:\n    cast_movie += i\ncast_movie = pd.DataFrame(cast_movie, columns=['cast'])\ncast_movie=cast_movie['cast'].value_counts() \nx2 = list(cast_movie.values[1:11])\ny2 = list(cast_movie.index[1:11])\n\nfig = make_subplots(rows=1, cols=2)\n\nfig.add_trace(\n    go.Bar(name=\"Tv Show\",y = y1, x = x1,orientation='h' ),\n    row = 1, col = 1,\n)\n\nfig.add_trace(\n    go.Bar(name=\"Movie\",y = y2, x = x2,orientation='h' ),\n    row = 1, col = 2,\n)\n\nfig.update_traces(hoverinfo=\"y+name+x\")\nfig.update_layout(title=\"Actors and Actresses with the highest number of films\",\n                  title_x=0.5,\n                  legend = dict(orientation = \"h\",\n                               yanchor = \"bottom\",\n                                xanchor = \"right\",\n                                y = 1.02,\n                                x = 1))\nfig.show()","f51aec1e":"rating_tvshow = df_tvshow [['rating']].value_counts().to_frame()\nrating_tvshow = rating_tvshow.rename(columns={0:'counts'}).reset_index(drop=False)\nprint(rating_tvshow)\nprint('=='*10)\n\nrating_movie = df_movie[['rating']].value_counts().to_frame()\nrating_movie = rating_movie.rename(columns={0:'counts'}).reset_index(drop=False)\nprint(rating_movie)","d7a1a757":"print(list(rating_tvshow['rating']))\nprint(list(rating_movie['rating']))","71bfc1db":"label1 = list(rating_tvshow['rating'])\nlabel2 = list(rating_movie['rating'])\nfig = make_subplots(rows=1, cols=2, specs=[[{'type':'domain'}, {'type':'domain'}]])\nfig.add_trace(go.Pie(labels=label1, values=rating_tvshow['counts'], name=\"TV SHOW\"),\n              1, 1)\n\nfig.add_trace(go.Pie(labels=label2, values=rating_movie['counts'], name=\"MOVIE\"),\n              1, 2)\n\nfig.update_traces(hole=.5, hoverinfo=\"label+value+name\")\n\nfig.update_layout(\n    title=\"Rating TV Show and Movie\",\n    title_x=0.5,\n    # Add annotations in the center of the donut pies.\n    annotations=[dict(text='TV SHOW', x=0.185, y=0.5, font_size=20, showarrow=False),\n                 dict(text='MOVIE', x=0.80, y=0.5, font_size=20, showarrow=False)])\n\nfig.show()","17c73aa9":"countries_movie=df_movie[[\"country\",'date_added']]\ncountries_movie=countries_movie[countries_movie['country'].str.contains('United States|India|United Kingdom|Canada|France|Spain|Egypt|Turkey|Mexico|Philippines')]\ncountries_movie=countries_movie.value_counts().to_frame()\ncountries_movie=countries_movie.reset_index().rename(columns={0:'counts'}).sort_values(['date_added'])\n\nfig = px.line(countries_movie, x=\"date_added\", y=\"counts\", color='country')\nfig.update_layout(title='Growth of Movie by main countries',\n                 title_x=0.5,\n                 xaxis_title='Year',\n                 yaxis_title='Frecuency'\n                 )\nfig.show()","310c4a96":"countries_tvshow=df_tvshow[[\"country\",\"date_added\"]]\ncountries_tvshow=countries_tvshow[countries_tvshow['country'].str.contains('United States|United Kingdom|South Korea|Japan|India|Taiwan|Canada|France|Australia|Spain')]\ncountries_tvshow=countries_tvshow.value_counts().to_frame()\ncountries_tvshow=countries_tvshow.reset_index().rename(columns={0:'counts'}).sort_values(['date_added'])\n\nfig = px.line(countries_tvshow, x=\"date_added\", y=\"counts\", color='country')\nfig.update_layout(title='Growth of TV Shows by main countries',\n                 title_x=0.5,\n                 xaxis_title='Year',\n                 yaxis_title='Frecuency'\n                 )\n\nfig.show()","837daf62":"hist_data=[df_movie['duration']]\n\ngroup_labels=['min']\nfig=ff.create_distplot(hist_data, group_labels,show_rug=False)\nfig.update_layout(title='Distribution of Movie duration',\n                  title_x=0.5,\n                  showlegend=False)\nfig.show()\n","9bdd1b54":"value=np.arange(1,17,1)\nlista =[]\nfor i in df_tvshow['duration'].sort_values().unique():\n    lista.append(i.astype(str) +\" season\")\nlista.insert(13,'14 season')\n    \nfig = px.histogram(x = df_tvshow['duration'],\n                   nbins = 40,\n                   labels = {'x':'Seasons'})\nfig.update_layout(title = \"Distribution of TV Show duration\",\n                 title_x = 0.5)\nfig.update_xaxes(tickvals = value,ticktext = lista,tickangle = 45)\nfig.show()","8dcdba28":"ts_genre = df_tvshow['listed_in'].apply(lambda x: x.replace(' ,',',').replace(', ',',').split(','))\ngenre_tvshow = []\nfor i in ts_genre:\n    genre_tvshow += i\n# list(pd.DataFrame(genre_tvshow)[0].unique())\ngenre_tvshow = pd.DataFrame(genre_tvshow).rename(columns={0:'genre'})\ngenre_tvshow = genre_tvshow.value_counts().to_frame().rename(columns={0:'counts'}).reset_index()\nlist(genre_tvshow['genre'][:5])","feaffd19":"temp = list()\ng3_data = df_tvshow\nfor ind, element in g3_data.iterrows():\n    tv_show = element['country']\n    tv_added = element['date_added']\n    for genre in str(element['listed_in']).replace(', ',',').replace(' ,',',').split(','):\n        temp.append([tv_show, tv_added, genre])\ng4_data = pd.DataFrame(temp, columns=['country','date_added', 'genre'])\ng4_data = g4_data[g4_data['country']=='United States'].value_counts().to_frame().reset_index().rename(columns={0:'counts'})\ng4_data.sort_values('date_added', inplace=True)\ng4_data =g4_data[g4_data['genre'].str.contains(\"International TV Shows|TV Dramas|TV Comedies|Crime TV Shows|Kids' TV\")]","bed3492a":"fig = px.line(g4_data, x=\"date_added\", y=\"counts\", color='genre')\nfig.update_layout(title='Growth of TV Show by genre in United States',\n                 title_x=0.5,\n                 xaxis_title='Year',\n                 yaxis_title='Frecuency'\n                 )\nfig.show()","fefe680c":"fig = px.bar(g4_data, x=\"date_added\", y=\"counts\", color='genre')\nfig.update_layout(title = \"Growth of TV Show by genre in United States\",\n                 title_x = 0.5)\nfig.show()","705507d1":"m_genre = df_movie['listed_in'].apply(lambda x: x.replace(' ,',',').replace(', ',',').split(','))\ngenre_movie = []\nfor i in m_genre:\n    genre_movie += i\n# list(pd.DataFrame(genre_tvshow)[0].unique())\ngenre_movie = pd.DataFrame(genre_movie).rename(columns={0:'genre'})\ngenre_movie = genre_movie.value_counts().to_frame().rename(columns={0:'counts'}).reset_index()\nlist(genre_movie['genre'][:5])","77009450":"temp1 = list()\ng1_data = df_movie\nfor ind, element in g1_data.iterrows():\n    movie_show = element['country']\n    movie_added = element['date_added']\n    for genre in str(element['listed_in']).replace(', ',',').replace(' ,',',').split(','):\n        temp1.append([movie_show, movie_added, genre])\ng2_data = pd.DataFrame(temp1, columns=['country','date_added', 'genre'])\ng2_data = g2_data[g2_data['country']=='United States'].value_counts().to_frame().reset_index().rename(columns={0:'counts'})\ng2_data.sort_values('date_added', inplace=True)\ng2_data =g2_data[g2_data['genre'].str.contains('International Movies|Dramas|Comedies|Documentaries|Action & Adventure')]","1a81fa5e":"fig = px.bar(g2_data, x=\"date_added\", y=\"counts\", color='genre')\nfig.update_layout(title = \"Growth of Movie by genre in United States\",\n                 title_x = 0.5)\nfig.show()","f438d3e9":"# Growth of Movie by genre in United States","7bee0c5c":"# Distribution about the duration of tv shows or movies","aa1159e3":"# TV Shows and Movies listed on Netflix\n\n\n## This dataset consists of tv shows and movies available on Netflix as of 2021. The dataset is collected from Flixable which is a third-party Netflix search engine.\n* show_id = Identification number (n\u00famero de identificaci\u00f3n)\n* type = Film category.\n* title = The name of film.\n* director = The name of person who directs the making of a film.\n* cast = The actors in a film.\n* country = The place of origin of film.\n* date_added = Refers to when the item was added to the directory in question.\n* release_year = A fixed date on which a film is due to become available to watch.\n* rating = Ratings are not designed that films are appropiate or inappropiate, they are simply a way of saying what kind of content is                                              included in the movie to give parents a chance to make informed decisions on what they are allowing their children to watch.\n* duration = Is defined as the length of time that something lasts. When a film lasts for two hours, this is an example.\n* listed_in = It is the film genre to which each film belongs.\n* description = Is the description of each movie.","4eafd9b0":"## Import Python libraries and dataset","e9435552":"## COUNTRIES THAT AGGREGATE HIGH TV SHOWS AND MOVIES BY YEAR","4a494331":"# Directors with the highest number of films","2c51d2ee":"# Actors and Actresses with the highest number of films","15f44e4e":"# Growth of TV Show by genre in United States","4d71a832":"# <span style='color:Blue'> This is my first post on Kaggle, I will appreciate your tips for improvement.  <\/span>","e0e203a4":"* TV-MA : This program is intended to be viewed by mature, adult audiences and may be unsuitable for children under 17.\n* TV-14 : This program may be unsuitable for children under 14 years of age.\n* TV-PG : This program contains material that parents may find unsuitable for younger children. Parental guidance is recommended.\n* TV-Y  : This program is aimed at a very young audience, including children from ages 2\u20136.\n* TV-Y7 : This program is most appropriate for children age 7 and up.\n* TV-G  : This program is suitable for all ages.\n* TV-Y7-FV : (Directed to Older Children - Fantasy Violence) Intended for older children. Contains fantasy violence more combative than TVY7 programs.\n\n* G     : (General Audiences) This program is designed to be appropriate for all ages. \n* PG    : (PArental Guidance Suggested) This film may contain some material parents might not like for their young children.\n* PG-13 : (Parents Strongly Cautioned) May contain violence, nudity, sensuality, language, adult activities or other elements beyond a PG rating, but doesn\u2019t reach the             restricted R category.\n* R     : (Restricted) This rating is for films specifically designed to be viewed by adults and therefore may be unsuitable for children under 17.\n* NC-17 : (Clearly Adult) This rating is applied to films the MPAA believes most parents will consider inappropriate for children 17 and under.\n\n* If an uncut version of a film was submitted to the MPAA, the labels Not Rated (NR) or Unrated (UR) are often used."}}