{"cell_type":{"9e1dd283":"code","566cba1c":"code","b409946d":"code","dd288f6c":"code","0c62b785":"code","ff05552c":"code","0ac65b87":"code","9a653896":"code","f020dfd3":"code","b9d5b666":"code","bcf075ae":"code","e82ba2eb":"code","57f2e78e":"code","8ae6f13a":"code","50aea0b6":"code","09ff7fbc":"code","5313371b":"code","13f4c258":"code","5fce49a7":"code","be8bce9a":"code","3305ad35":"code","a8172945":"code","0c05383b":"code","ffa63c0b":"code","9ec8515a":"code","0469ebe5":"code","dd57860f":"code","3737f01d":"code","bba8fa14":"code","21a57fc1":"code","3fe032e5":"code","41165890":"code","3a0668d3":"code","98d22f98":"code","8c20d64c":"code","67d79fc2":"code","73bea1e4":"code","a98075b1":"code","652bbe9f":"code","c21685d9":"code","543531e1":"code","74b46ddb":"code","5b72b252":"code","e47187dc":"code","d85a1b2d":"code","fd0c28da":"code","746d3adc":"code","52bed17f":"code","beeb2230":"code","3626e66c":"code","2d0fb8be":"code","58a3e637":"code","974dcb33":"code","c7f20416":"code","37de6620":"code","da14eb2a":"code","6eec7f7a":"code","c1aef1b8":"code","8ff109f3":"code","3832a297":"code","160863ec":"code","7046327a":"code","6c94dad9":"code","8b72c34e":"code","ed999f61":"code","cfffbba1":"code","4b691a35":"code","f66ad34b":"code","cd7f25b6":"code","dc0e4fbe":"code","9e257c67":"code","63b1e56a":"code","6ed72f85":"code","e1f352cc":"code","3868e164":"code","820502ff":"code","9b928593":"code","bf7f6bbe":"code","2c79d313":"code","74fa694f":"code","400cbd2b":"markdown","5ef8899a":"markdown","5dd68975":"markdown","05ab612e":"markdown","5faab006":"markdown","1f7f5687":"markdown","b7c3e2a4":"markdown","5d20e293":"markdown","a5bf1ad0":"markdown","88895ef4":"markdown","baf4edc6":"markdown","4dde3507":"markdown","412a0a58":"markdown","feb48ffc":"markdown","830959d3":"markdown","4c003422":"markdown","584e127d":"markdown","9bdc344a":"markdown","89aab116":"markdown","309f75dd":"markdown","e541dc12":"markdown","a5dfb92e":"markdown","0a13a343":"markdown","abc483f7":"markdown","b9161ac2":"markdown","1a5cdc98":"markdown","ed585e4f":"markdown","263f1c27":"markdown","64ba4c2e":"markdown","7d6339da":"markdown","feeb0b4f":"markdown","dcef4888":"markdown","8e2877a4":"markdown","38f20eae":"markdown","f0d08556":"markdown","94d888f1":"markdown","5da06456":"markdown","e4170e12":"markdown","07b8100a":"markdown","c06b5b96":"markdown","96800e41":"markdown"},"source":{"9e1dd283":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","566cba1c":"#import all libraries\nimport pandas as pd  #(DAta Analytical Library)\nimport numpy as np   #(Fast linear algebra library)\nimport matplotlib.pyplot as plt  #(visualisaton)\nimport seaborn as sns #(Statitistical Viz)\nimport sklearn.preprocessing as pre\nimport sklearn.model_selection as ms\nimport sklearn.linear_model as ln\nimport sklearn.metrics as mt\n\n","b409946d":"#Load the data\ndf=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/train_SJC.csv\")","dd288f6c":"df.head()","0c62b785":"#changing column names\ndf_new = df.rename(columns={'Unnamed: 0': 'ClaimNumber','Unnamed: 1':'DateTimeOfAccident','Unnamed: 3':'Age',\n                             'Unnamed: 4':'Gender','Unnamed: 5':'MaritalStatus','Unnamed: 6':'DependentChildren',\n                             'Unnamed: 8':'WeeklyWages','Unnamed: 9':'PartTimeFullTime','Unnamed: 10':'HoursWorkedPerWeek',\n                             'Unnamed: 12':'ClaimDescription','Unnamed: 13':'InitialIncurredClaimsCost',\n                            'Unnamed: 14':'UltimateIncurredClaimCost'})","ff05552c":"df_new.head()","0ac65b87":"#dropping header row\nheader_row=0\ndf_new=df_new.drop(header_row)","9a653896":"#Resetting index\ndf_new=df_new.reset_index(drop=True)","f020dfd3":"df_new.info() ","b9d5b666":"#change dtypes\ndf_new['UltimateIncurredClaimCost']= df_new['UltimateIncurredClaimCost'].astype('float64') \ndf_new['InitialIncurredClaimsCost']=df_new['InitialIncurredClaimsCost'].astype('float64')\ndf_new['HoursWorkedPerWeek']=df_new['HoursWorkedPerWeek'].astype('float64')\ndf_new['WeeklyWages']=df_new['WeeklyWages'].astype('float64')\ndf_new['Age']=df_new['Age'].astype('float64').astype('int64')\ndf_new['DependentChildren']=df_new['DependentChildren'].astype('float64').astype('int64')\ndf_new['DependentsOther']=df_new['DependentsOther'].astype('int64')\ndf_new['DateTimeOfAccident']=pd.to_datetime(df_new['DateTimeOfAccident'])  #transform to date time object\ndf_new['DateReported']=pd.to_datetime(df_new['DateReported'])  #transform to date time object\n","bcf075ae":"df_new.info()","e82ba2eb":"df_new.describe() #distributed statistics of the data","57f2e78e":"df_new.isnull().sum()","8ae6f13a":"#Counts categorical values\n#1.Gender\ndf_new['Gender'].value_counts()","50aea0b6":"#2.MaritalStatus\ndf_new['MaritalStatus'].value_counts()","09ff7fbc":"#3.PartTimeFullTime\ndf_new['PartTimeFullTime'].value_counts()","5313371b":"df_new.columns","13f4c258":"df_new.isnull().sum()","5fce49a7":"#Replacing by modal value\ndf_new['MaritalStatus']=df_new['MaritalStatus'].fillna(df_new['MaritalStatus'].mode()[0])","be8bce9a":"df_new['WeeklyWages'].describe()","3305ad35":"sns.boxplot(data=df_new,x='WeeklyWages')","a8172945":"#Replacing by median\ndf_new['WeeklyWages']=df_new['WeeklyWages'].fillna(df_new['WeeklyWages'].median())","0c05383b":"sns.boxplot(data=df_new,x='HoursWorkedPerWeek')","ffa63c0b":"#Replacing by median\ndf_new['HoursWorkedPerWeek']=df_new['HoursWorkedPerWeek'].fillna(df_new['HoursWorkedPerWeek'].median())","9ec8515a":"df_new.isnull().sum()","0469ebe5":"#Creating sets of numerical and categorical variables\nnum_df=df_new.select_dtypes(include=[int,float])\ncat_df=df_new.select_dtypes(exclude=[int,float])","dd57860f":"num_df.describe()","3737f01d":"#Univariate Analysis\n#Color palette\nmyPal = [\"#000000\", \"#FF3030\",\"#9FE2BF\", \"#CCCCFF\", \"#668B8B\" ]  # creating color palette\nsns.set_palette(myPal)\nsns.palplot(sns.color_palette())","bba8fa14":"#categorical variables\nlst = ['Gender',  'MaritalStatus', 'PartTimeFullTime', 'DependentChildren', 'DependentsOther']\nfor i in lst:\n    plt.figure()\n    sns.countplot(x=i, data=df_new)","21a57fc1":"#continuous variables\nfrom scipy.stats import norm\nlst_c= [df_new['Age'], df_new['WeeklyWages'], df_new['HoursWorkedPerWeek'], df_new['DaysWorkedPerWeek'],\n        df_new['InitialIncurredClaimsCost'],df_new['UltimateIncurredClaimCost']]\nfor i in lst_c:\n    plt.figure(figsize=(11,6))\n    sns.distplot(i, fit=norm, kde=False)","3fe032e5":"#outlier analysis\ndf_new.plot.box(figsize=(20,6))","41165890":"#Analysing Date and time of accident and date and time of accident reported\nlst_d=[df_new['DateTimeOfAccident'].dt.hour,df_new['DateTimeOfAccident'].dt.day,df_new['DateTimeOfAccident'].dt.month,\n       df_new['DateTimeOfAccident'].dt.year,df_new['DateReported'].dt.year, df_new['DateReported'].dt.month,\n       df_new['DateReported'].dt.day ]\nfor i in lst_d:\n    plt.figure(figsize=(11,6))\n    sns.countplot(x=i, data=df_new,palette=myPal)","3a0668d3":"#Bivariate Analysis\n#1.Gender\nsns.countplot(data=df_new,x='Gender',hue='PartTimeFullTime')","98d22f98":"sns.barplot(data=df_new,x=df_new['Gender'],y=df_new['HoursWorkedPerWeek'],hue='MaritalStatus')","8c20d64c":"sns.barplot(data=df_new, x=df_new['Gender'], y=df_new['DaysWorkedPerWeek'], hue='MaritalStatus')","67d79fc2":"sns.barplot(data=df_new,x=df_new['Gender'],y=df_new['WeeklyWages'],hue='MaritalStatus')","73bea1e4":"sns.barplot(data=df_new,x=df_new['Gender'],y=df_new['UltimateIncurredClaimCost'],hue='MaritalStatus')","a98075b1":"sns.barplot(data=df_new,x=df_new['Gender'],y=df_new['InitialIncurredClaimsCost'],hue='MaritalStatus')","652bbe9f":"#2.Age\n# creating bins\ndf_new['age_bins']=pd.cut(df_new['Age'],bins=[10,20,40,60,80],labels=[\"Students\",\"Youths\",\"Aged\",\"Old\"])","c21685d9":"sns.barplot(data=df_new,x=df_new['age_bins'],y=df_new['UltimateIncurredClaimCost'],hue='Gender')","543531e1":"sns.barplot(data=df_new,x=df_new['age_bins'],y=df_new['InitialIncurredClaimsCost'],hue='Gender')","74b46ddb":"sns.barplot(data=df_new,x=df_new['age_bins'],y=df_new['WeeklyWages'],hue='Gender')","5b72b252":"sns.barplot(data=df_new,x=df_new['age_bins'],y=df_new['HoursWorkedPerWeek'],hue='Gender')","e47187dc":"sns.barplot(data=df_new,x=df_new['age_bins'],y=df_new['DaysWorkedPerWeek'],hue='Gender')","d85a1b2d":"#3.Dateand Time of accidents\nsns.barplot(data=df_new,x=df_new['DateTimeOfAccident'].dt.month,y=df_new['UltimateIncurredClaimCost'],hue='Gender')","fd0c28da":"sns.countplot(data=df_new,x=df_new['DateTimeOfAccident'].dt.month,hue='Gender')","746d3adc":"sns.barplot(data=df_new,x=df_new['DateTimeOfAccident'].dt.hour,y=df_new['UltimateIncurredClaimCost'],hue='Gender')","52bed17f":"sns.countplot(data=df_new,x=df_new['DateTimeOfAccident'].dt.hour,hue='Gender')","beeb2230":"#Multivariate Analysis\nlist_df=['DateTimeOfAccident', 'DateReported', 'Age', 'Gender',\n       'MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredClaimsCost',\n       'UltimateIncurredClaimCost']\n\nsns.pairplot(data=df_new[list_df],hue='Gender',diag_kind='kde')","3626e66c":"sns.pairplot(data=df_new[list_df],hue='MaritalStatus',diag_kind='kde')","2d0fb8be":"sns.pairplot(data=df_new[list_df],hue='PartTimeFullTime',diag_kind='kde')","58a3e637":"sns.relplot(x='UltimateIncurredClaimCost', y='HoursWorkedPerWeek', hue=\"Gender\", data=df_new)","974dcb33":"sns.relplot(x='UltimateIncurredClaimCost', y='HoursWorkedPerWeek', hue='PartTimeFullTime', data=df_new)","c7f20416":"sns.relplot(x='UltimateIncurredClaimCost', y='InitialIncurredClaimsCost', hue=\"Gender\", data=df_new)","37de6620":"#Remove outlier\ndf_new = df_new[df_new.UltimateIncurredClaimCost!= df_new.UltimateIncurredClaimCost.max()]","da14eb2a":"#Checking Correlation\ncorr = df_new.corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\nf, ax = plt.subplots(figsize=(11, 9))\ncmap = sns.diverging_palette(230, 20, as_cmap=True)\nsns.heatmap(corr, mask=mask, cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})","6eec7f7a":"#From EDA we came to know that accident hours are having more variations,so taking for data modelling.\ndf_new.info()\ndf_new['Accident_time']=df_new['DateTimeOfAccident'].dt.hour \ndf_new['Accident_time_reported']=df_new['DateReported'].dt.hour","c1aef1b8":"#Creating a list of columns for data modelling\n#Removing Claimnumber and taking accidenttime and accident reported time(fromEDA)\nlst_df=[ 'Age', 'Gender', 'MaritalStatus', 'DependentChildren','DependentsOther', \n        'WeeklyWages','PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredClaimsCost', 'UltimateIncurredClaimCost',\n        'Accident_time','Accident_time_reported']\n\ndf_analysis=df_new[lst_df]","8ff109f3":"#Doing logtransformation as there are outliers\ndf_analysis['log_UltimateIncurredClaimCost'] = np.log(df_analysis['UltimateIncurredClaimCost'])\ndf_analysis['log_WeeklyWages'] = np.log(df_analysis['WeeklyWages'])\ndf_analysis['log_InitialIncurredClaimsCost'] = np.log(df_analysis['InitialIncurredClaimsCost'])","3832a297":"# Taking new transformed columns.\nlst_df1=['Age', 'Gender', 'MaritalStatus', 'DependentChildren','DependentsOther',\n       'PartTimeFullTime',  'DaysWorkedPerWeek',\n       'ClaimDescription', 'Accident_time_reported',\n       'log_UltimateIncurredClaimCost', 'HoursWorkedPerWeek','Accident_time',\n       'log_WeeklyWages', 'log_InitialIncurredClaimsCost']\ndf_analysis=df_analysis[lst_df1]","160863ec":"#Transforming object datatype\nle=pre.LabelEncoder()\nfor x in df_analysis.select_dtypes(include='object').columns.tolist():\n    df_analysis[x]=le.fit_transform(df_analysis[x])","7046327a":"#Scaling data\nX_scale=pre.minmax_scale(df_analysis.drop('log_UltimateIncurredClaimCost',axis=1))\nY=df_analysis['log_UltimateIncurredClaimCost']\n#Creating train and test data\nx_train,x_test,y_train,y_test=ms.train_test_split(X_scale,Y,test_size=0.3,random_state=1234456)\n","6c94dad9":"#Feature Selection using Decisiontreeregressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom matplotlib import pyplot\nmodel=DecisionTreeRegressor()\n#fit the model\nmodel.fit(x_train,y_train)\n#get importance\nimportance=model.feature_importances_\n#summarize feature importance\nfor i,v in enumerate(importance):\n    print('Feature: %0d, Score: %.5f' % (i,v))\n#plot feature importance\npyplot.bar([x for x in range(len(importance))], importance,color=myPal)\npyplot.show()\n","8b72c34e":"dict(zip(df_analysis.columns.tolist(),importance))\n#Removing 'Accident_time_reported'","ed999f61":"#Creating a list of columns for data modelling\n#Removing Claimnumber and taking accidenttime and accident reported time(fromEDA)\nlst_df=[ 'Age', 'Gender', 'MaritalStatus', 'DependentChildren','DependentsOther',\n        'WeeklyWages','PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredClaimsCost', 'UltimateIncurredClaimCost',\n        'Accident_time','Accident_time_reported']\n\ndf_analysis=df_new[lst_df]\n#Doing logtransformation as there are outliers\ndf_analysis['log_UltimateIncurredClaimCost'] = np.log(df_analysis['UltimateIncurredClaimCost'])\ndf_analysis['log_WeeklyWages'] = np.log(df_analysis['WeeklyWages'])\ndf_analysis['log_InitialIncurredClaimsCost'] = np.log(df_analysis['InitialIncurredClaimsCost'])\n\nlst_df1=['Age', 'Gender', 'MaritalStatus', 'DependentChildren','DependentsOther',\n       'PartTimeFullTime',  'DaysWorkedPerWeek',\n       'ClaimDescription', 'Accident_time',\n       'log_UltimateIncurredClaimCost', 'HoursWorkedPerWeek',\n       'log_WeeklyWages', 'log_InitialIncurredClaimsCost']\ndf_analysis=df_analysis[lst_df1]\n#Transforming object datatype\nle=pre.LabelEncoder()\nfor x in df_analysis.select_dtypes(include='object').columns.tolist():\n    df_analysis[x]=le.fit_transform(df_analysis[x])\n#Scaling data\nX_scale=pre.minmax_scale(df_analysis.drop('log_UltimateIncurredClaimCost',axis=1))\nY=df_analysis['log_UltimateIncurredClaimCost']\n#Creating train and test data\nx_train,x_test,y_train,y_test=ms.train_test_split(X_scale,Y,test_size=0.3,random_state=1234456)","cfffbba1":"import sklearn.linear_model as ln\nglm=ln.LinearRegression()\nglm.fit(x_train,y_train)\n","4b691a35":"glm.score(x_test,y_test)","f66ad34b":"#Printing results.\nprint('MSE:', mt.mean_squared_error(y_pred=glm.predict(x_test),y_true=y_test))\nprint('RMSE: ',mt.mean_squared_error(y_pred=glm.predict(x_test),y_true=y_test)**0.5)\nprint('MAE:' , mt.mean_absolute_error(y_pred=glm.predict(x_test),y_true=y_test))\nprint('R2 Score:',mt.r2_score(y_pred=glm.predict(x_test),y_true=y_test))","cd7f25b6":"from sklearn.model_selection import cross_val_score\n#using 10-fold cross validation \naccuracies = cross_val_score(estimator = glm, X = x_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","dc0e4fbe":"# Fitting Random Forest Regression to the dataset\n\nfrom sklearn.ensemble import RandomForestRegressor\n\nregressor = RandomForestRegressor(n_estimators = 100, random_state =0,max_depth=7)\nregressor.fit(x_train, y_train)","9e257c67":"regressor.score(x_test,y_test)","63b1e56a":"regressor.score(x_train,y_train)","6ed72f85":"#Printing Results.\nprint('MSE:', mt.mean_squared_error(y_pred=regressor.predict(x_test),y_true=y_test))#normalised error\nprint('RMSE: ',mt.mean_squared_error(y_pred=regressor.predict(x_test),y_true=y_test)**0.5)\nprint('MAE:' , mt.mean_absolute_error(y_pred=regressor.predict(x_test),y_true=y_test))\nprint('R2 Score:',mt.r2_score(y_pred=regressor.predict(x_test),y_true=y_test))","e1f352cc":"#using 10-fold cross validation \naccuracies = cross_val_score(estimator = regressor, X = x_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","3868e164":"#Load the test data\ntest_df=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/Test_SJC.csv\")","820502ff":"#Creating a list of columns for data modelling\n#Removing Claimnumber and taking accidenttime and accident reported time(fromEDA)\n\nlst_df=[ 'Age', 'Gender',\n       'MaritalStatus', 'DependentChildren','DependentsOther', 'WeeklyWages','PartTimeFullTime',\n        'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredCalimsCost',\n       ]\n\ndf_model=test_df[lst_df]\n\ndf_model['Accident_time']=df_model['DateTimeOfAccident'].dt.hour\n#Doing logtransformation as there are outliers\n\ndf_model['log_WeeklyWages'] = np.log(df_model['WeeklyWages'])\ndf_model['log_InitialIncurredCalimsCost'] = np.log(df_model['InitialIncurredCalimsCost'])\n\nlst_df1=['Age', 'Gender', 'MaritalStatus', 'DependentChildren','DependentsOther',\n       'PartTimeFullTime',  'DaysWorkedPerWeek',\n       'ClaimDescription', \n        'HoursWorkedPerWeek',\n       'log_WeeklyWages', 'log_InitialIncurredCalimsCost']\ndf_analysis=df_model[lst_df1]\ndf_analysis['MaritalStatus']=df_analysis['MaritalStatus'].fillna(df_analysis['MaritalStatus'].mode()[0])\n#Transforming object datatype\nle=pre.LabelEncoder()\nfor x in df_analysis.select_dtypes(include='object').columns.tolist():\n    df_analysis[x]=le.fit_transform(df_analysis[x])\n#Scaling data\nX_scale=pre.minmax_scale(df_analysis)","9b928593":"df_analysis.info()","bf7f6bbe":"#Re transforming the variable\ny=regressor.predict(X_scale)\ny_pred=np.exp(y)","2c79d313":"#Load samplesubmission file\ncsv=pd.read_csv(\"..\/input\/machine-learning-24-hrs-hackathon\/sample_submission.csv\")\ncsv['UltimateIncurredClaimCost']=y_pred","74fa694f":"#saving as csv file\ncsv.to_csv(\"Final Submission1.csv\",index=False)","400cbd2b":"- males earns according to ages\n- Females above 20 years earn same.\n- As age grows difference in earnings within gender grows.\n\n\n","5ef8899a":"- No significant difference between Males and females in working days per week.\n- Marital Status and days working are insignificant.\n\nFrom both, we assume that insurers marital status doesnot influence their working.","5dd68975":"Outliers in HoursWorkedPerWeek so impute by median value","05ab612e":"more males","5faab006":"- Insurers in the dataset mostly are males(77% are males).\n- More Single Insurers, followed by married then status unknown.\n- More Insurers are full time workers than doing part time jobs.\n- For most insurers there are no dependent children.\n- Also most insurers are not dependent on any relations.","1f7f5687":"Dataframe Summary","b7c3e2a4":"- outliers in all distributions.\n- more outliers in initialIncuredclaimscost and ultimateincurredclaimcost","5d20e293":"# Step 4 - Feature Engineering","a5bf1ad0":" This is a Regression problem, so I think of using Regression models.\n Firstly I used Linear Regression model which is the simplest of all the models.\n There were outliers in the dataset. I removed and I also did log transformations.\n To get more consistent result I did K-fold cross validation.\n I got accuracy of 74.5%. Then I tried RandomForestRegression for which I got accuracy of 79%. So Finally i predicted using RandomForestRegression model.","88895ef4":"**RandomForestRegressor**","baf4edc6":"- Not much significant difference in age and working hours.","4dde3507":"- We can infer that more male insurers in the dataset.\n- And highest claimamounts are for females.","412a0a58":"My model is better than other models, because there is no overfitting nor underfitting.\nI did better outlier treatment and feature engineering techniques. I got a better training  and testing score.  ","feb48ffc":"#                     **Predict Workers Compensation Claims**","830959d3":"**Linear Regression Model**","4c003422":"# Reason for choosing the model","584e127d":"- Initial claimcost have silmilar results of ultimate claimcost.\nSo both maybe dependent.","9bdc344a":"- Weekly wages are comparitively higher for unmarried insurers.\n- Men insurers earns more compared to females.","89aab116":"## Missing Value Treatment","309f75dd":"# Step 5 - M.L Model","e541dc12":"- Males had been to accidents mostly than females. But evenththough females have high claim amounts.","a5dfb92e":"# How it is better than other Models.","0a13a343":"This is an actual dataset with 36176 entries and 15 variables.\nThe task is to predict total claims payments by the insurance company for various accident insurers. The target variable here is UltimateIncurredClaimCost. There are 14 independent variables. They are -\n\n- ClaimNumber: Unique policy identifier\n- DateTimeOfAccident: Date and time of accident\n- DateReported: Date that accident was reported\n- Age: Age of worker\n- Gender: Gender of worker\n- MaritalStatus: Martial status of worker. (M)arried, (S)ingle, (U)unknown.\n- DependentChildren: The number of dependent children\n- DependentsOther: The number of dependants excluding children\n- WeeklyWages: Total weekly wage\n- PartTimeFullTime: Binary (P) or (F)\n- HoursWorkedPerWeek: Total hours worked per week\n- DaysWorkedPerWeek: Number of days worked per week\n- ClaimDescription: Free text description of the claim\n- InitialIncurredClaimCost: Initial estimate by the insurer of the claim cost\nThis is a Regression problem.","abc483f7":"- Accidents in the moth of January have comparatively more claim amounts among females.\n- Females are receiving more claim amounts than males and this may be a charecteristic of the insurance company.","b9161ac2":"- Outlier present which is a female and a full time worker","1a5cdc98":"# Step 1 - Data Collection","ed585e4f":"# Step 3 - EDA","263f1c27":"- As expected more accidents  occured in daytime, mostly from 10-12.\n- More accidents in the month of may and fewer in January.\n- Comparatively, Month beginnings have more accidents compared to month ends.\n- Accidents from 1988-2005 in the dataset.\n- Probably this dataset taken in year 2006, fewer accidents reported.\n- Most accidents reported in the month of March, fewer in January.\n\nAs fewer cases occured and reported in January, we may assume that lessaccidents occur in January, probably due to good weather conditions.","64ba4c2e":"Not much significant difference on age and daysworking.","7d6339da":"- Comparatively, more female part time workers than males as insurers in the dataset.\n\n","feeb0b4f":"Outliers in WeeklyWages so impute my median value","dcef4888":"**Missing values in 'Marital Status','WeeklyWages' and 'HoursWorkedPerWeek'**","8e2877a4":"- Total claims payment by the insurance company are more for women insurers. \n- Unmarried insurers have more claimcost, and it maybe due to more weekly wages for them.\n\nWeeklywages maybe correlated with the Ultimateincurredclaimscost","38f20eae":"- Similar result of ultimate claim cost","f0d08556":"- Gender unknowns are youths.\n- Age have a positive relation between total claim amount.","94d888f1":"- Initialincurredclaimscost, Age, Weekly wages are more correlated with dependentvariable\n  which is the ultimateclaimscost.","5da06456":"- All distributions are positively skewed, which shows all variables have outliers.\n- DaysWorkedperweek are negatively skewed.","e4170e12":"Check for Missing Values","07b8100a":"Data Summary","c06b5b96":"# Step 2 - Data pre processing\n- Data cleaning\n- Data transformaton\n- Data integration","96800e41":"- Male insurers works more hours per week than females.\n- No significant difference between marital status and weekly working hours.\n- Gender unknowns are married ones."}}