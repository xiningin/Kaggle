{"cell_type":{"18a3718c":"code","85de854a":"code","8823386a":"code","d13e615f":"code","820941d2":"code","6ca8afe9":"code","90aa6405":"code","780388df":"code","bf462797":"code","c44677f2":"markdown","d981ccf2":"markdown","d6255604":"markdown","e835428c":"markdown","a3573e2a":"markdown","a2e1879b":"markdown","8337aa31":"markdown","505b66dc":"markdown","191559f4":"markdown","cfb3f1bf":"markdown","217e9cbf":"markdown","1c05bfb1":"markdown","a9293784":"markdown"},"source":{"18a3718c":"penalty_ctsp = '''\n#include \"LKH.h\"\n#include \"Segment.h\"\n\nGainType Penalty_CTSP()\n{\n    static Node *StartRoute = 0;\n    Node *N, *N1, *N2, *CurrentRoute, *NextN;\n    GainType P = 0;\n    GainType Cost, MaxCost = MINUS_INFINITY;\n    int Forward;\n\n    N1 = Depot;\n    while ((N1 = SUCC(N1))->DepotId == 0);\n    N2 = Depot;\n    while ((N2 = PREDD(N2))->DepotId == 0);\n    Forward = N1 != N2 ? N1->DepotId < N2->DepotId : !Reversed;\n\n    if (!StartRoute)\n        StartRoute = Depot;\n    N = StartRoute;\n    do {\n        CurrentRoute = N;\n        do {\n            if (N->Color != 0 && N->Color != CurrentRoute->DepotId)\n                P += 10000;  \/\/ valid CTSP solution is the priority over MinMax objective\n        } while ((N = Forward ? SUCC(N) : PREDD(N))->DepotId == 0);\n        if (P > CurrentPenalty ||\n            (P == CurrentPenalty && CurrentGain <= 0)) {\n            StartRoute = CurrentRoute;\n            return CurrentPenalty + (CurrentGain > 0);\n        }\n        Cost = 0;\n        N = CurrentRoute;\n        do {\n            NextN = Forward ? SUCC(N) : PREDD(N);\n            Cost += (C(N, NextN) - N->Pi - NextN->Pi) % 100000;  \/\/ get rid of DW\n            if (NextN->Id > DimensionSaved)\n                NextN = Forward ? SUCC(NextN) : PREDD(NextN);\n        } while ((N = NextN)->DepotId == 0);\n        Cost \/= Precision;\n        if (Cost > MaxCost) {\n            if (Cost > CurrentPenalty ||\n                (Cost == CurrentPenalty && CurrentGain <= 0)) {\n                StartRoute = CurrentRoute;\n                return CurrentPenalty + (CurrentGain > 0);\n            }\n            MaxCost = Cost;\n        }\n    } while (N != StartRoute);\n    return P + MaxCost;  \/\/ sum of CTSP and MinMax penalties\n}\n'''\n\n!wget http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/LKH-3.0.7.tgz &>\/dev\/null\n!tar xvfz LKH-3.0.7.tgz &>\/dev\/null\nwith open('LKH-3.0.7\/SRC\/Penalty_CTSP.c', 'w') as f:\n    print(penalty_ctsp, file=f)\n!cd LKH-3.0.7; make &>\/dev\/null; cp LKH ..","85de854a":"import functools\nimport glob\nimport itertools\nimport numpy as np\nimport pandas as pd","8823386a":"SIZE = 5280 # total number of permutations\nINF = 10**9 - 1 # infinite edge weight\nDW = 10**5\nTIME_LIMIT = 3600 * 8 # time limit for LKH run, seconds\nSEED = 0 # LKH seed value\n\ndef perm_dist(p, q):\n    i = p.index(q[0])\n    return i if p[i:] == q[:7-i] else 7\n\ndef distances_matrix():\n    all_perms = list(itertools.permutations(range(7), 7))\n    mandatory_perms = all_perms[:120]\n    nodes = mandatory_perms * 2 + all_perms\n    m = np.zeros((SIZE, SIZE), dtype='int32')\n    for i, p in enumerate(nodes):\n        for j, q in enumerate(nodes):\n            m[i, j] = perm_dist(p, q)\n    m *= 10\n    m[np.where(m != 0)] += DW\n    m[np.where(m == 0)] = INF # treat equal perms in different mandatory sets\n    np.fill_diagonal(m, 0) # restore zero weights at the main diagonal\n    return m\n\ndef write_params_file(initial_tour=None):\n    with open('santa.par', 'w') as f:\n        printf = functools.partial(print, file=f)\n        printf('SPECIAL')\n        printf('PROBLEM_FILE = santa.ctsp')\n        printf('TOUR_FILE = best_tour_$.txt') # $ will be replaced with the tour cost\n        printf('OUTPUT_TOUR_FILE = output_tour_$.txt') # save each improvement\n        if initial_tour:\n            printf('INITIAL_TOUR_FILE = initial_tour.txt')\n        printf('INITIAL_TOUR_ALGORITHM = CTSP')\n        printf('MTSP_OBJECTIVE = MINMAX')\n        printf('GAIN23 = YES')\n        printf('PATCHING_C = 3')\n        printf('PATCHING_A = 2')\n        printf('RECOMBINATION = GPX2')\n        printf(f'SEED = {SEED}')\n        printf('MAX_TRIALS = 100000')\n        printf(f'TIME_LIMIT = {TIME_LIMIT}') # seconds\n        printf('TRACE_LEVEL = 2')\n        printf('PRECISION = 1')\n\ndef write_problem_file():\n    with open('santa.ctsp', 'w', buffering=-1) as f:\n        printf = functools.partial(print, file=f)\n        printf('TYPE: CTSP')\n        printf(f'DIMENSION: {SIZE * 2 + 1}')\n        printf('SALESMEN : 3')\n        printf('EDGE_WEIGHT_TYPE: EXPLICIT')\n        printf('EDGE_WEIGHT_FORMAT: FULL_MATRIX')\n        printf('EDGE_WEIGHT_SECTION')\n        # write distances matrix\n        inf_row = ' '.join(itertools.repeat(str(INF), SIZE))\n        distances = distances_matrix()\n        # top half of the distances matrix\n        for weights in distances.T: # iterate over columns\n            # infinite weights, weights column, distance to depot\n            printf(inf_row, ' '.join(map(str, weights)), 35)\n        # bottom half of the distances matrix\n        for weights in distances: # iterate over rows\n            # weights row, infinite weights, distance to depot\n            printf(' '.join(map(str, weights)), inf_row, 35)\n        printf(' '.join(itertools.repeat('35', SIZE * 2)), INF) # distances from the depot\n        # write \"private city sets\"\n        printf('CTSP_SET_SECTION')\n        for i in range(3):\n            printf(i + 1, end=' ') # set index \n            for j in range(1, 121):\n                printf(i * 120 + j, end=' ') # real node of mandatory permutations\n                printf(i * 120 + j + SIZE, end=' ') # complementary virtual node\n            printf(-1)\n        printf('FIXED_EDGES_SECTION')\n        fixed_edges = zip(range(1, SIZE+1), range(SIZE+1, 2*SIZE+1))\n        fixed_edges = itertools.chain.from_iterable(fixed_edges)\n        printf(' '.join(map(str, fixed_edges)), -1)\n        printf('DEPOT_SECTION')\n        printf(2 * SIZE + 1)\n        printf(-1)\n        printf('EOF')\n\ndef write_initial_tour_file(initial_tour=None):\n    if initial_tour:\n        with open('initial_tour.txt', 'w') as f:\n            print('TOUR_SECTION', file=f)\n            print(' '.join(str(_) for _ in initial_tour), -1, file=f)\n    \ndef solve_ctsp(initial_tour=None, verbose=False):\n    write_params_file(initial_tour)\n    write_problem_file()\n    write_initial_tour_file(initial_tour)\n    \n    # run LKH-3 to solve CTSP instance\n    if verbose:\n        !.\/LKH santa.par\n    else:\n        !touch lkh.log\n        !.\/LKH santa.par >> lkh.log","d13e615f":"LETTERS = {\n    1: '\ud83c\udf85',  # father christmas\n    2: '\ud83e\udd36',  # mother christmas\n    3: '\ud83e\udd8c',  # reindeer\n    4: '\ud83e\udddd',  # elf\n    5: '\ud83c\udf84',  # christmas tree\n    6: '\ud83c\udf81',  # gift\n    7: '\ud83c\udf80',  # ribbon\n    8: '\ud83c\udf1f',  # star\n}\nINV_LETTERS = {v: k for k, v in LETTERS.items()}\n\nsolution = pd.read_csv('..\/input\/ctsp-v6-best-route\/submission_no_wildcards_2492_2491_2491.csv')\nstrings = [[INV_LETTERS[c] for c in s] for s in solution.schedule]\nstrings.sort(key=len, reverse=True)\nprint(f'Strings lengths are {[len(_) for _ in strings]}.')\n\ndef find_strings_perms(strings, verbose=False):\n    all_perms = set(itertools.permutations(range(1, 8), 7))\n    perms = []\n    for s in strings:\n        perms.append([])\n        for i in range(len(s)-6):\n            p = tuple(s[i:i+7])\n            if p in all_perms:\n                perms[-1].append(p)\n    if verbose:\n        lens = [len(_) for _ in  perms]\n        print(f'There are {lens} permutations in strings, {sum(lens)} in total.')\n        lens = [len(set(_)) for _ in  perms]\n        print(f'There are {lens} unique permutations in strings, {sum(lens)} in total.')\n    return perms\n\ndef rebalance_perms(strings_perms, verbose=False):\n    # convert to dicts for fast lookup and to keep permutations order\n    strings_perms = [dict.fromkeys(_) for _ in strings_perms] \n    for p in strings_perms[0].copy():  # iterate over the copy to allow modification during iteration\n        if p[:2] != (1, 2) and (p in strings_perms[1] or p in strings_perms[2]):\n            strings_perms[0].pop(p)\n    for p in strings_perms[1].copy():\n        if p[:2] != (1, 2) and p in strings_perms[2]:\n            strings_perms[1].pop(p)\n    if verbose:\n        lens = [len(_) for _ in  strings_perms]\n        print(f'There are {lens} permutations left in strings after rebalancing, {sum(lens)} in total.')\n    return [list(_) for _ in strings_perms]\n\nstrings_perms = find_strings_perms(strings, verbose=True)\nstrings_perms = rebalance_perms(strings_perms, verbose=True)","820941d2":"def ctsp_initial_tour(strings_perms):\n    index = {p: i for (i, p) in enumerate(itertools.permutations(range(1, 8), 7), 1)}\n    initial_tour = []\n    for i, perms in enumerate(strings_perms):\n        initial_tour.append(SIZE*2 + i + 1) # depot node for each string\n        for p in perms:\n            if p[:2] == (1, 2):\n                initial_tour.append(i*120 + index[p])\n            else:\n                initial_tour.append(240 + index[p])\n            initial_tour.append(initial_tour[-1] + SIZE) # a complementary virtual node\n    return initial_tour\n\n\ninitial_tour = ctsp_initial_tour(strings_perms)","6ca8afe9":"solve_ctsp(initial_tour)","90aa6405":"def read_strings(file_name):\n    all_perms = list(itertools.permutations(range(1, 8), 7))\n    mandatory_perms = all_perms[:120]\n    nodes = mandatory_perms * 2 + all_perms\n    \n    with open(file_name, 'r') as f:\n        lines = [l.strip() for l in f.readlines()]\n    lines = lines[lines.index(f'{SIZE*2 + 1}'):-2]\n    tour = [int(_) - 1 for _ in lines]\n    i0, i1, i2 = sorted(tour.index(i) for i in range(SIZE*2, SIZE*2 + 3)) # depots\n    strings = [tour[i0+1:i1], tour[i1+1:i2], tour[i2+1:]]\n    for s in strings:\n        s[:] = [nodes[_] for _ in s if _ < SIZE] # leave only real nodes\n        s_forward, s_backward = [], []\n        for directed_s in (s_forward, s_backward):\n            directed_s.extend(s[0])\n            for p, q in zip(s, s[1:]):\n                d = perm_dist(p, q)\n                directed_s.extend(q[-d:])\n            s[:] = s[::-1]\n        s[:] = min(s_forward, s_backward, key=len)\n    return strings\n\ndef check_solution(strings):\n    all_perms = set(itertools.permutations(range(1, 8), 7))\n    mandatory_perms = {p for p in all_perms if p[:2] == (1, 2)}\n    strings_perms = [set(_) for _ in find_strings_perms(strings)]\n    for s in strings_perms:\n        if mandatory_perms - s:\n            print(mandatory_perms - s)\n            return False\n    if all_perms - set.union(*strings_perms):\n        return False\n    return True\n\ndef contain_wildcards(strings):\n    for s in strings:\n        if 8 in s:\n            return True\n    return False\n\ndef write_submission_csv(strings):\n    sub = pd.DataFrame()\n    sub['schedule'] = [''.join(LETTERS[x] for x in s) for s in strings]\n    if contain_wildcards(strings):\n        sub_name = f'submission_wildcards_{\"_\".join(str(len(_)) for _ in strings)}.csv'\n    else:\n        sub_name = f'submission_no_wildcards_{\"_\".join(str(len(_)) for _ in strings)}.csv'\n    sub.to_csv(sub_name, index=False)\n    return sub_name\n\ntour_files = glob.glob('output_tour_*.txt') + glob.glob('best_tour_*.txt')\nprint(\"=\" * 70)\nfor f in tour_files:\n    strings = read_strings(f)\n    strings.sort(key=len, reverse=True)\n    print(f'File {f}, strings lenghts are {[len(s) for s in strings]}.')    \n    if check_solution(strings):\n        print(f'The solution is written to {write_submission_csv(strings)}')\n    else:\n        print('The solution is invalid.')\n    print(\"=\" * 70)\n","780388df":"import itertools\nimport numpy as np\nimport pandas as pd\nimport torch\nimport torch.nn.functional as F\n\n\nperms = list(map(lambda p: \"\".join(p), itertools.permutations(\"1234567\")))\nperm2id = {p: i for i, p in enumerate(perms)}\nperms_arr = np.array([list(map(int, p)) for p in perms])\n\nperms_onehot = np.eye(7)[perms_arr-1, :].transpose(0, 2, 1)\nassert np.allclose(perms_onehot[:,0,:].astype(np.int64), (perms_arr == 1).astype(np.int64))\n\n# print(\"onehot 1234567:\")\n# print(perms_onehot[perm2id[\"1234567\"]])\n\n# print(\"onehot 5671234:\")\n# print(perms_onehot[perm2id[\"5671234\"]])\n\n# print(\"correlate between 1234567 and 5671234\")\nleft = perms_onehot[perm2id[\"1234567\"]]\nright = perms_onehot[perm2id[\"5671234\"]]\nmatches = F.conv2d(\n    F.pad(torch.Tensor(left[None, None, :, :]), (7, 7)),\n    torch.Tensor(right[None, None, :, :]),\n    padding=\"valid\"\n).numpy().reshape(-1)\n# print(matches)\nmust_match_left2right = np.array([-1, -1, -1, -1, -1, -1, -1, 7, 6, 5, 4, 3, 2, 1, 0])\nmust_match_right2left = np.array([0, 1, 2, 3, 4, 5, 6, 7, -1, -1, -1, -1, -1, -1, -1])\ncost_ifmatch = np.array([7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7])\n# print(\"cost of 1234567 -> 5671234:\", min(cost_ifmatch[np.equal(must_match_left2right, matches)]))\n# print(\"cost of 5671234 -> 1234567:\", min(cost_ifmatch[np.equal(must_match_right2left, matches)]))\n\nM = F.conv2d(\n    F.pad(torch.Tensor(perms_onehot[:, None, :, :]), (7, 7)),\n    torch.Tensor(perms_onehot[:, None, :, :]),\n    padding=\"valid\"\n).squeeze().numpy()\n\nmust_match_left2right = np.array([-1, -1, -1, -1, -1, -1, -1, 7, 6, 5, 4, 3, 2, 1, 0])\nmust_match_left2right_wild = np.array([-1, -1, -1, -1, -1, -1, -1, 6, 5, 4, 3, 2, 1, 0, 0])\n\ncost_ifmatch = np.array([7, 6, 5, 4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 7])\n\ncostMat = np.where(M == must_match_left2right, cost_ifmatch, np.inf).min(axis=-1).astype(np.int8)\ncostMatWild = np.minimum(costMat, np.where(M == must_match_left2right_wild, cost_ifmatch, np.inf).min(axis=-1)).astype(np.int8)\n\ndef optimize_wildcards(words):\n    found_perms = find_strings_perms(words)\n    balanced_perms = rebalance_perms(found_perms)\n    balanced_perms = [[''.join(str(_) for _ in perm) for perm in perms] for perms in balanced_perms]\n    nodes_list = []\n    table_list = []\n    for i in range(3):\n        word = words[i]\n        nodes = [perm2id[p] for p in balanced_perms[i]]\n\n        table = np.zeros((len(nodes), 10), np.int64)\n        table[0, :] = 7\n        for i in range(1, len(nodes)):\n            e = costMat[nodes[i-1], nodes[i]]\n            ew = costMatWild[nodes[i-1], nodes[i]]\n            table[i,0] = table[i-1,0] + e\n            table[i,1] = min(table[i-1,1] + e, table[i-1,0] + ew)\n            table[i,2] = min(table[i-1,2], table[i-1,1]) + e # TODO: better transition\n            table[i,3] = min(table[i-1,3], table[i-1,2]) + e\n            table[i,4] = min(table[i-1,4], table[i-1,3]) + e\n            table[i,5] = min(table[i-1,5], table[i-1,4]) + e\n            table[i,6] = min(table[i-1,6], table[i-1,5]) + e\n            table[i,7] = min(table[i-1,7], table[i-1,6]) + e\n            table[i,8] = min(table[i-1,8], table[i-1,7]) + e\n            table[i,9] = min(table[i-1,9] + e, table[i-1,8] + ew)\n#         print(table[-1].min(), table[-1])\n        nodes_list.append(nodes)\n        table_list.append(table)\n\n    # backtrack\n    new_words = []\n    wilds = []\n    for nodes, table in zip(nodes_list, table_list):\n        ns = [perms[nodes[-1]]]\n        track = np.argmin(table[-1])\n        wild = []\n        for i in range(len(nodes)-2, -1, -1):\n            e = costMat[nodes[i], nodes[i+1]]\n            ew = costMatWild[nodes[i], nodes[i+1]]\n            if track == 0:\n                ns.append(perms[nodes[i]][:e])\n            elif track == 1:\n                if table[i, 1] + e < table[i, 0] + ew:\n                    ns.append(perms[nodes[i]][:e])\n                else:\n                    left = np.array(list(map(int, perms[nodes[i]][ew:])))\n                    right = np.array(list(map(int, perms[nodes[i+1]][:-ew])))\n                    mis = np.where(left != right)[0][0]\n                    wild.append(table[i, track-1]-7+ew+mis)\n                    ns.append(perms[nodes[i]][:ew])\n                    track = track - 1\n            elif 2 <= track <= 8:\n                if table[i, track] >= table[i, track-1]:\n                    track = track - 1\n                ns.append(perms[nodes[i]][:e])\n            elif track == 9:\n                if table[i, 9] + e < table[i, 8] + ew:\n                    ns.append(perms[nodes[i]][:e])\n                else:\n                    ns.append(perms[nodes[i]][:ew])\n                    left = np.array(list(map(int, perms[nodes[i]][ew:])))\n                    right = np.array(list(map(int, perms[nodes[i+1]][:-ew])))\n                    mis = np.where(left != right)[0][0]\n                    wild.append(table[i, track-1]-7+ew+mis)\n                    track = track - 1\n            else:\n                assert False\n        assert track == 0\n        wilds.append(wild)\n        nsw = list(\"\".join(ns[::-1]))\n        for w in wild:\n            nsw[w] = \"8\"\n        new_words.append(\"\".join(nsw))\n    return new_words","bf462797":"tour_files = glob.glob('submission_no_wildcards_*.csv')\nprint(\"=\" * 71)\nfor f in tour_files:\n    schedule = pd.read_csv(f).schedule.tolist()\n    strings = [[INV_LETTERS[c] for c in s] for s in schedule]\n    strings.sort(key=len, reverse=True)\n    new_strings = optimize_wildcards(strings)\n    new_strings = [[int(c) for c in s] for s in new_strings]\n    new_strings.sort(key=len, reverse=True)\n    print(f'File {f}.')\n    print(f'Improved strings lengths from {[len(s) for s in strings]} to {[len(s) for s in new_strings]}.')\n    print(f'The solution is written to {write_submission_csv(new_strings)}')\n    print(\"=\" * 71)","c44677f2":"# What are the LKH penalty functions?\n\nLKH tackles various special problems like mTSP and CTSP  by the means of penalties. Penalty is a special value associated with a solution but separate from the solution's score. Comparing two distinct solutions for the problem first of all LKH strives to minimize the penalty value and only if penalty values are the same solutions are judged by their scores.","d981ccf2":"# What are the mTSP objectives?\n\nSolving an mTSP instance one can strive various goals:\n1. minimize the length of the overall tour;\n2. minimize the size of the largest route;\n3. minimize the length of the longest route.\n\nThe third variant is the best match for our problem and LKH-3 mTSP solver supports all these objectives.  \nIt's controlled by the parameter `MTSP_OBJECTIVE = [ MINSUM | MINMAX_SIZE | MINMAX ]` in the parameter file.\n\nBut unluckily LKH-3 CTSP solver doesn't take this parameter into account and its objective is `MINSUM`.\n\nTo change this behaviour we'll take four steps:\n1. examine the LKH-3 CTSP penalty function's source code;\n2. take a look at the LKH-3 mTSP MinMax penalty function;\n3. edit CTSP penalty function to add MinMax objective to it;\n4. compile modified code.","d6255604":"Write all files and feed it to LKH.","e835428c":"That's it, thank you for reading, please upvote if you find it useful.","a3573e2a":"# 4. Compile Modified Code\nAll we need to do is to download LKH-3 source code, unpack it, replace `LKH-3.0.7\/SRC\/Penalty_CTSP.c` with the modified version and than run make. ","a2e1879b":"# Fixed Edges\n\nTransforming an asymmetric CTSP to a symmetric one in [my previous notebook](https:\/\/www.kaggle.com\/kostyaatarik\/colored-traveling-salesman-problem) we used additional weight factor DW to force edges between complementary nodes to be present in the output tour. In this notebook we'll provide complementary nodes to CTSP solver as fixed edges under the `FIXED_EDGES_SECTION` keyword.","8337aa31":"# 3. CTSP MinMax Penalty Function\n\nAfter adding MinMax objective to CTSP penalty function I ended up with the following code\n\n```C\nGainType Penalty_CTSP()\n{\n    static Node *StartRoute = 0;\n    Node *N, *N1, *N2, *CurrentRoute, *NextN;\n    GainType P = 0;\n    GainType Cost, MaxCost = MINUS_INFINITY;\n    int Forward;\n\n    N1 = Depot;\n    while ((N1 = SUCC(N1))->DepotId == 0);\n    N2 = Depot;\n    while ((N2 = PREDD(N2))->DepotId == 0);\n    Forward = N1 != N2 ? N1->DepotId < N2->DepotId : !Reversed;\n\n    if (!StartRoute)\n        StartRoute = Depot;\n    N = StartRoute;\n    do {\n        CurrentRoute = N;\n        do {\n            if (N->Color != 0 && N->Color != CurrentRoute->DepotId)\n                P += 10000;  \/\/ valid CTSP solution is the priority over MinMax objective\n        } while ((N = Forward ? SUCC(N) : PREDD(N))->DepotId == 0);\n        if (P > CurrentPenalty ||\n            (P == CurrentPenalty && CurrentGain <= 0)) {\n            StartRoute = CurrentRoute;\n            return CurrentPenalty + (CurrentGain > 0);\n        }\n        Cost = 0;\n        N = CurrentRoute;\n        do {\n            NextN = Forward ? SUCC(N) : PREDD(N);\n            Cost += (C(N, NextN) - N->Pi - NextN->Pi) % 100000;  \/\/ get rid of DW\n            if (NextN->Id > DimensionSaved)\n                NextN = Forward ? SUCC(NextN) : PREDD(NextN);\n        } while ((N = NextN)->DepotId == 0);\n        Cost \/= Precision;\n        if (Cost > MaxCost) {\n            if (Cost > CurrentPenalty ||\n                (Cost == CurrentPenalty && CurrentGain <= 0)) {\n                StartRoute = CurrentRoute;\n                return CurrentPenalty + (CurrentGain > 0);\n            }\n            MaxCost = Cost;\n        }\n    } while (N != StartRoute);\n    return P + MaxCost;  \/\/ sum of CTSP and MinMax penalties\n}\n```\nThis code just literally calculates both CTSP penalty and MinMax penalty and returns their sum. But to prioritize the correctness of the solutions from the CTSP perspective over MinMax objective we changed the penalty value of one colored node being in the wrong route from \\\\(1\\\\) to \\\\(10000\\\\). If we'd left it being \\\\(1\\\\), LKH CTSP solver could mess mandatory permutations in strings up because it would be beneficial in terms of MinMax penalty. Also the code gets rid of the DW additional weight factor in its MinMax calculation part by taking each edge's weight by modulo DW.","505b66dc":"# 2. MTSP MinMax Penalty Function\n\nThis function can be found in the file `LKH-3.0.7\/SRC\/Penalty_MTSP.c`. Let's see it\n```C\nGainType Penalty_MTSP_MINMAX()\n{\n    int Forward = SUCC(Depot)->Id != Depot->Id + DimensionSaved;\n    static Node *StartRoute = 0;\n    Node *N, *NextN, *CurrentRoute;\n    GainType Cost, MaxCost = MINUS_INFINITY;\n\n    if (!StartRoute)\n        StartRoute = Depot;\n    if (StartRoute->Id > DimensionSaved)\n        StartRoute -= DimensionSaved;\n    N = StartRoute;\n    do {\n        Cost = 0;\n        CurrentRoute = N;\n        do {  \/\/ calculate the route's cost for the next salesman\n            NextN = Forward ? SUCC(N) : PREDD(N);\n            Cost += C(N, NextN) - N->Pi - NextN->Pi;\n            if (NextN->Id > DimensionSaved)\n                NextN = Forward ? SUCC(NextN) : PREDD(NextN);\n        } while ((N = NextN)->DepotId == 0);\n        Cost \/= Precision;\n        if (Cost > MaxCost) {  \/\/ update maximum cost\n            if (Cost > CurrentPenalty ||\n                (Cost == CurrentPenalty && CurrentGain <= 0)) {\n                StartRoute = CurrentRoute;\n                return CurrentPenalty + (CurrentGain > 0);\n            }\n            MaxCost = Cost;\n        }\n    } while (N != StartRoute);\n    return MaxCost;  \/\/ return maximum cost\n}\n```\nThis penalty function is trickier but only a bit, it finds routes' costs for each salesman and returns the maximum of them. It will be easy to combine it with the previous penalty function.","191559f4":"# Wildcards Optimization\n\nWe'll use the code from the [notebook](https:\/\/www.kaggle.com\/yosshi999\/wildcard-postprocessing-using-dynamic-programming) created by [Yosshi999](https:\/\/www.kaggle.com\/yosshi999) to improve found solutions with wildcards.","cfb3f1bf":"Check all the improved tours found by LKH along the optimization.","217e9cbf":"We'll provide LKH an initial tour to start optimization from. As the initial tour we'll use the one, found by [my previous notebook](https:\/\/www.kaggle.com\/kostyaatarik\/colored-traveling-salesman-problem), I uploaded it as a separate [dataset](https:\/\/www.kaggle.com\/kostyaatarik\/ctsp-v6-best-route).","1c05bfb1":"# 1. CTSP Penalty Function\n\nOne can find this function in the file `LKH-3.0.7\/SRC\/Penalty_CTSP.c` after downloading and unpacking the [LKH-3 sources](http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/LKH-3.0.7.tgz). Let's have a look at it\n```C\nGainType Penalty_CTSP()\n{\n    static Node *StartRoute = 0;\n    Node *N, *N1, *N2, *CurrentRoute;\n    GainType P = 0;\n    int Forward;\n\n    N1 = Depot;\n    while ((N1 = SUCC(N1))->DepotId == 0);\n    N2 = Depot;\n    while ((N2 = PREDD(N2))->DepotId == 0);\n    Forward = N1 != N2 ? N1->DepotId < N2->DepotId : !Reversed;\n\n    if (!StartRoute)\n        StartRoute = Depot;\n    N = StartRoute;\n    do {\n        CurrentRoute = N;\n        do {\n            if (N->Color != 0 && N->Color != CurrentRoute->DepotId) \/\/ penalty is\n                P++;                                                \/\/ calculated here\n        } while ((N = Forward ? SUCC(N) : PREDD(N))->DepotId == 0);\n        if (P > CurrentPenalty ||\n            (P == CurrentPenalty && CurrentGain <= 0)) {\n            StartRoute = CurrentRoute;\n            return CurrentPenalty + (CurrentGain > 0);\n        }\n    } while (N != StartRoute);\n    return P;\n}\n```\nThe function is pretty straightforward, all it is doing is counting the number of colored nodes that ended up not in their own route. It won't be difficult to modify this code.","a9293784":"# The Merry Movie Montage as MinMax Colored Traveling Salesman Problem\n\nThis notebook is an attempt to use [LKH-3](http:\/\/webhotel4.ruc.dk\/~keld\/research\/LKH-3\/) CTSP solver with MinMax mTSP objective for this competition. It is based on [my previous notebook](https:\/\/www.kaggle.com\/kostyaatarik\/colored-traveling-salesman-problem) and brings two new ideas:\n* edit LKH-3 source code to make CTSP solver use MinMax mTSP objective;\n* provide complementary nodes to CTSP solver as fixed edges."}}