{"cell_type":{"f7c2eb19":"code","8f6b366e":"code","444b52f1":"code","e1084ccd":"code","93b4410f":"code","8a07d32c":"code","6c80f9fb":"code","0e69dd95":"code","275dd6aa":"code","e2ae2bec":"code","7631adf6":"code","27744525":"code","cfda61e1":"code","d600e224":"code","394c5a44":"code","869be015":"code","267071b2":"code","38a04d53":"code","73945cd3":"code","2f021752":"code","d3ebe360":"code","0916f1fd":"code","bef4f95b":"code","6b87e2ff":"code","b59a9dc8":"code","bc9513fb":"code","0b6dbb1a":"code","bf6d8620":"code","7156ce21":"markdown","8ea65373":"markdown","71958888":"markdown","831fc0fb":"markdown","b9cb5bc7":"markdown","b287ab20":"markdown","ae83faaf":"markdown","9c7159d0":"markdown","c02bbfc3":"markdown","608a06c4":"markdown","f69fca78":"markdown","8adeedcc":"markdown","391a8510":"markdown","3bfa8151":"markdown","911e2af9":"markdown","465bc90a":"markdown"},"source":{"f7c2eb19":"#\u4e0b\u8f7d\u9700\u8981\u7528\u5230\u7684\u6570\u636e\u96c6\n!wget https:\/\/tianchi-media.oss-cn-beijing.aliyuncs.com\/DSW\/8LightGBM\/high_diamond_ranked_10min.csv","8f6b366e":"##  \u57fa\u7840\u51fd\u6570\u5e93\nimport numpy as np \nimport pandas as pd\n\n## \u7ed8\u56fe\u51fd\u6570\u5e93\nimport matplotlib.pyplot as plt\nimport seaborn as sns","444b52f1":"## \u6211\u4eec\u5229\u7528Pandas\u81ea\u5e26\u7684read_csv\u51fd\u6570\u8bfb\u53d6\u5e76\u8f6c\u5316\u4e3aDataFrame\u683c\u5f0f\n\ndf = pd.read_csv('.\/high_diamond_ranked_10min.csv')\ny = df.blueWins","e1084ccd":"## \u5229\u7528.info()\u67e5\u770b\u6570\u636e\u7684\u6574\u4f53\u4fe1\u606f\ndf.info()","93b4410f":"## \u8fdb\u884c\u7b80\u5355\u7684\u6570\u636e\u67e5\u770b\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528 .head() \u5934\u90e8.tail()\u5c3e\u90e8\ndf.head()","8a07d32c":"df.tail()","6c80f9fb":"## \u6807\u6ce8\u6807\u7b7e\u5e76\u5229\u7528value_counts\u51fd\u6570\u67e5\u770b\u8bad\u7ec3\u96c6\u6807\u7b7e\u7684\u6570\u91cf\ny = df.blueWins\ny.value_counts()","0e69dd95":"## \u6807\u6ce8\u7279\u5f81\u5217\ndrop_cols = ['gameId','blueWins']\nx = df.drop(drop_cols, axis=1)","275dd6aa":"## \u5bf9\u4e8e\u7279\u5f81\u8fdb\u884c\u4e00\u4e9b\u7edf\u8ba1\u63cf\u8ff0\nx.describe()","e2ae2bec":"## \u6839\u636e\u4e0a\u9762\u7684\u63cf\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u9664\u4e00\u4e9b\u91cd\u590d\u53d8\u91cf\uff0c\u6bd4\u5982\u53ea\u8981\u77e5\u9053\u84dd\u961f\u662f\u5426\u62ff\u5230\u4e00\u8840\uff0c\u6211\u4eec\u5c31\u77e5\u9053\u7ea2\u961f\u6709\u6ca1\u6709\u62ff\u5230\uff0c\u53ef\u4ee5\u53bb\u9664\u7ea2\u961f\u7684\u76f8\u5173\u5197\u4f59\u6570\u636e\u3002\ndrop_cols = ['redFirstBlood','redKills','redDeaths'\n             ,'redGoldDiff','redExperienceDiff', 'blueCSPerMin',\n            'blueGoldPerMin','redCSPerMin','redGoldPerMin']\nx.drop(drop_cols, axis=1, inplace=True)","7631adf6":"data = x\ndata_std = (data - data.mean()) \/ data.std()\ndata = pd.concat([y, data_std.iloc[:, 0:9]], axis=1)\ndata = pd.melt(data, id_vars='blueWins', var_name='Features', value_name='Values')\n\nfig, ax = plt.subplots(1,2,figsize=(15,5))\n\n# \u7ed8\u5236\u5c0f\u63d0\u7434\u56fe\nsns.violinplot(x='Features', y='Values', hue='blueWins', data=data, split=True,\n               inner='quart', ax=ax[0], palette='Blues')\nfig.autofmt_xdate(rotation=45)\n\ndata = x\ndata_std = (data - data.mean()) \/ data.std()\ndata = pd.concat([y, data_std.iloc[:, 9:18]], axis=1)\ndata = pd.melt(data, id_vars='blueWins', var_name='Features', value_name='Values')\n\n# \u7ed8\u5236\u5c0f\u63d0\u7434\u56fe\nsns.violinplot(x='Features', y='Values', hue='blueWins', \n               data=data, split=True, inner='quart', ax=ax[1], palette='Blues')\nfig.autofmt_xdate(rotation=45)\n\nplt.show()","27744525":"plt.figure(figsize=(18,14))\nsns.heatmap(round(x.corr(),2), cmap='Blues', annot=True)\nplt.show()","cfda61e1":"# \u53bb\u9664\u5197\u4f59\u7279\u5f81\ndrop_cols = ['redAvgLevel','blueAvgLevel']\nx.drop(drop_cols, axis=1, inplace=True)","d600e224":"sns.set(style='whitegrid', palette='muted')\n\n# \u6784\u9020\u4e24\u4e2a\u65b0\u7279\u5f81\nx['wardsPlacedDiff'] = x['blueWardsPlaced'] - x['redWardsPlaced']\nx['wardsDestroyedDiff'] = x['blueWardsDestroyed'] - x['redWardsDestroyed']\n\n#\u53d6\u6837\u5206\u6790 \u53ea\u53d6\u51fa1000\u4e2a\u6837\u672c\ndata = x[['blueWardsPlaced','blueWardsDestroyed','wardsPlacedDiff','wardsDestroyedDiff']].sample(1000)\ndata_std = (data - data.mean()) \/ data.std()\ndata = pd.concat([y, data_std], axis=1)\ndata = pd.melt(data, id_vars='blueWins', var_name='Features', value_name='Values')\n\nplt.figure(figsize=(10,6))\nsns.swarmplot(x='Features', y='Values', hue='blueWins', data=data)\nplt.xticks(rotation=45)\nplt.show()","394c5a44":"## \u53bb\u9664\u548c\u773c\u4f4d\u76f8\u5173\u7684\u7279\u5f81\ndrop_cols = ['blueWardsPlaced','blueWardsDestroyed','wardsPlacedDiff',\n            'wardsDestroyedDiff','redWardsPlaced','redWardsDestroyed']\nx.drop(drop_cols, axis=1, inplace=True)","869be015":"x['killsDiff'] = x['blueKills'] - x['blueDeaths']\nx['assistsDiff'] = x['blueAssists'] - x['redAssists']\n\n#\u4ee5\u6570\u7ec4\u5f62\u5f0f\u7ed8\u5236\u76f4\u65b9\u56fe\nx[['blueKills','blueDeaths','blueAssists','killsDiff','assistsDiff','redAssists']].hist(figsize=(12,10), bins=20)\nplt.show()","267071b2":"data = x[['blueKills','blueDeaths','blueAssists','killsDiff','assistsDiff','redAssists']].sample(1000)\ndata_std = (data - data.mean()) \/ data.std()\ndata = pd.concat([y, data_std], axis=1)\ndata = pd.melt(data, id_vars='blueWins', var_name='Features', value_name='Values')\n\nplt.figure(figsize=(10,6))\nsns.swarmplot(x='Features', y='Values', hue='blueWins', data=data)\nplt.xticks(rotation=45)\nplt.show()","38a04d53":"#\u7ed8\u5236\u7279\u5f81\u76f8\u5173\u6027\u77e9\u9635\ndata = pd.concat([y, x], axis=1).sample(500)\n\nsns.pairplot(data, vars=['blueKills','blueDeaths','blueAssists','killsDiff','assistsDiff','redAssists'], \n             hue='blueWins')\n\nplt.show()","73945cd3":"x['dragonsDiff'] = x['blueDragons'] - x['redDragons']\nx['heraldsDiff'] = x['blueHeralds'] - x['redHeralds']\nx['eliteDiff'] = x['blueEliteMonsters'] - x['redEliteMonsters']\n\ndata = pd.concat([y, x], axis=1)\n\neliteGroup = data.groupby(['eliteDiff'])['blueWins'].mean()\ndragonGroup = data.groupby(['dragonsDiff'])['blueWins'].mean()\nheraldGroup = data.groupby(['heraldsDiff'])['blueWins'].mean()\n\nfig, ax = plt.subplots(1,3, figsize=(15,4))\n\neliteGroup.plot(kind='bar', ax=ax[0])\ndragonGroup.plot(kind='bar', ax=ax[1])\nheraldGroup.plot(kind='bar', ax=ax[2])\n\nprint(eliteGroup)\nprint(dragonGroup)\nprint(heraldGroup)\n\nplt.show()","2f021752":"x['towerDiff'] = x['blueTowersDestroyed'] - x['redTowersDestroyed']\n\ndata = pd.concat([y, x], axis=1)\n\ntowerGroup = data.groupby(['towerDiff'])['blueWins']\nprint(towerGroup.count())\nprint(towerGroup.mean())\n\nfig, ax = plt.subplots(1,2,figsize=(15,5))\n\ntowerGroup.mean().plot(kind='line', ax=ax[0])\nax[0].set_title('Proportion of Blue Wins')\nax[0].set_ylabel('Proportion')\n\ntowerGroup.count().plot(kind='line', ax=ax[1])\nax[1].set_title('Count of Towers Destroyed')\nax[1].set_ylabel('Count')","d3ebe360":"## \u4e3a\u4e86\u6b63\u786e\u8bc4\u4f30\u6a21\u578b\u6027\u80fd\uff0c\u5c06\u6570\u636e\u5212\u5206\u4e3a\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\uff0c\u5e76\u5728\u8bad\u7ec3\u96c6\u4e0a\u8bad\u7ec3\u6a21\u578b\uff0c\u5728\u6d4b\u8bd5\u96c6\u4e0a\u9a8c\u8bc1\u6a21\u578b\u6027\u80fd\u3002\nfrom sklearn.model_selection import train_test_split\n\n## \u9009\u62e9\u5176\u7c7b\u522b\u4e3a0\u548c1\u7684\u6837\u672c \uff08\u4e0d\u5305\u62ec\u7c7b\u522b\u4e3a2\u7684\u6837\u672c\uff09\ndata_target_part = y\ndata_features_part = x\n\n## \u6d4b\u8bd5\u96c6\u5927\u5c0f\u4e3a20%\uff0c 80%\/20%\u5206\nx_train, x_test, y_train, y_test = train_test_split(data_features_part, data_target_part, test_size = 0.2, random_state = 2020)","0916f1fd":"## \u5bfc\u5165LightGBM\u6a21\u578b\nfrom lightgbm.sklearn import LGBMClassifier\n## \u5b9a\u4e49 LightGBM \u6a21\u578b \nclf = LGBMClassifier()\n# \u5728\u8bad\u7ec3\u96c6\u4e0a\u8bad\u7ec3LightGBM\u6a21\u578b\nclf.fit(x_train, y_train)","bef4f95b":"## \u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e0a\u5206\u5e03\u5229\u7528\u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8fdb\u884c\u9884\u6d4b\ntrain_predict = clf.predict(x_train)\ntest_predict = clf.predict(x_test)\nfrom sklearn import metrics\n\n## \u5229\u7528accuracy\uff08\u51c6\u786e\u5ea6\uff09\u3010\u9884\u6d4b\u6b63\u786e\u7684\u6837\u672c\u6570\u76ee\u5360\u603b\u9884\u6d4b\u6837\u672c\u6570\u76ee\u7684\u6bd4\u4f8b\u3011\u8bc4\u4f30\u6a21\u578b\u6548\u679c\nprint('The accuracy of the Logistic Regression is:',metrics.accuracy_score(y_train,train_predict))\nprint('The accuracy of the Logistic Regression is:',metrics.accuracy_score(y_test,test_predict))\n\n## \u67e5\u770b\u6df7\u6dc6\u77e9\u9635 (\u9884\u6d4b\u503c\u548c\u771f\u5b9e\u503c\u7684\u5404\u7c7b\u60c5\u51b5\u7edf\u8ba1\u77e9\u9635)\nconfusion_matrix_result = metrics.confusion_matrix(test_predict,y_test)\nprint('The confusion matrix result:\\n',confusion_matrix_result)\n\n# \u5229\u7528\u70ed\u529b\u56fe\u5bf9\u4e8e\u7ed3\u679c\u8fdb\u884c\u53ef\u89c6\u5316\nplt.figure(figsize=(8, 6))\nsns.heatmap(confusion_matrix_result, annot=True, cmap='Blues')\nplt.xlabel('Predicted labels')\nplt.ylabel('True labels')\nplt.show()","6b87e2ff":"plt.figure(figsize = (15,15))\nsns.barplot(y=data_features_part.columns, x=clf.feature_importances_)","b59a9dc8":"from sklearn.metrics import accuracy_score\nfrom lightgbm import plot_importance\n\ndef estimate(model,data):\n    #sns.barplot(data.columns,model.feature_importances_)\n    ax1=plot_importance(model,importance_type=\"gain\")\n    ax1.set_title('gain')\n    ax2=plot_importance(model, importance_type=\"split\")\n    ax2.set_title('split')\n    plt.show()\n\ndef classes(data,label,test):\n    model=LGBMClassifier()\n    model.fit(data,label)\n    ans=model.predict(test)\n    estimate(model, data)\n    return ans\n \nans=classes(x_train,y_train,x_test)\npre=accuracy_score(y_test, ans)\nprint('acc=',accuracy_score(y_test,ans))","bc9513fb":"## \u4ecesklearn\u5e93\u4e2d\u5bfc\u5165\u7f51\u683c\u8c03\u53c2\u51fd\u6570\nfrom sklearn.model_selection import GridSearchCV\n\n## \u5b9a\u4e49\u53c2\u6570\u53d6\u503c\u8303\u56f4\nlearning_rate = [0.1, 0.3, 0.6]\nfeature_fraction = [0.5, 0.8, 1]\nnum_leaves = [16, 32, 64]\nmax_depth = [-1,3,5,8]\n\nparameters = { 'learning_rate': learning_rate,\n              'feature_fraction':feature_fraction,\n              'num_leaves': num_leaves,\n              'max_depth': max_depth}\nmodel = LGBMClassifier(n_estimators = 50)\n\n## \u8fdb\u884c\u7f51\u683c\u641c\u7d22\nclf = GridSearchCV(model, parameters, cv=3, scoring='accuracy',verbose=3, n_jobs=-1)\nclf = clf.fit(x_train, y_train)","0b6dbb1a":"## \u7f51\u683c\u641c\u7d22\u540e\u7684\u6700\u597d\u53c2\u6570\u4e3a\n\nclf.best_params_","bf6d8620":"## \u5728\u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u4e0a\u5206\u5e03\u5229\u7528\u6700\u597d\u7684\u6a21\u578b\u53c2\u6570\u8fdb\u884c\u9884\u6d4b\n\n## \u5b9a\u4e49\u5e26\u53c2\u6570\u7684 LightGBM\u6a21\u578b \nclf = LGBMClassifier(feature_fraction = 0.8,\n                    learning_rate = 0.1,\n                    max_depth= 3,\n                    num_leaves = 16)\n# \u5728\u8bad\u7ec3\u96c6\u4e0a\u8bad\u7ec3LightGBM\u6a21\u578b\nclf.fit(x_train, y_train)\n\ntrain_predict = clf.predict(x_train)\ntest_predict = clf.predict(x_test)\n\n## \u5229\u7528accuracy\uff08\u51c6\u786e\u5ea6\uff09\u3010\u9884\u6d4b\u6b63\u786e\u7684\u6837\u672c\u6570\u76ee\u5360\u603b\u9884\u6d4b\u6837\u672c\u6570\u76ee\u7684\u6bd4\u4f8b\u3011\u8bc4\u4f30\u6a21\u578b\u6548\u679c\nprint('The accuracy of the Logistic Regression is:',metrics.accuracy_score(y_train,train_predict))\nprint('The accuracy of the Logistic Regression is:',metrics.accuracy_score(y_test,test_predict))\n\n## \u67e5\u770b\u6df7\u6dc6\u77e9\u9635 (\u9884\u6d4b\u503c\u548c\u771f\u5b9e\u503c\u7684\u5404\u7c7b\u60c5\u51b5\u7edf\u8ba1\u77e9\u9635)\nconfusion_matrix_result = metrics.confusion_matrix(test_predict,y_test)\nprint('The confusion matrix result:\\n',confusion_matrix_result)\n\n# \u5229\u7528\u70ed\u529b\u56fe\u5bf9\u4e8e\u7ed3\u679c\u8fdb\u884c\u53ef\u89c6\u5316\nplt.figure(figsize=(8, 6))\nsns.heatmap(confusion_matrix_result, annot=True, cmap='Blues')\nplt.xlabel('Predicted labels')\nplt.ylabel('True labels')\nplt.show()","7156ce21":"\u4e00\u4e9b\u7279\u5f81\u4e24\u4e24\u7ec4\u5408\u540e\u5bf9\u4e8e\u6570\u636e\u7684\u5212\u5206\u80fd\u529b\u4e5f\u6709\u63d0\u5347\u3002","8ea65373":"\u6570\u636e\u96c6\u6b63\u8d1f\u6807\u7b7e\u6570\u91cf\u57fa\u672c\u76f8\u540c\uff0c\u4e0d\u5b58\u5728\u6570\u636e\u4e0d\u5e73\u8861\u7684\u95ee\u9898\u3002","71958888":"\u6211\u4eec\u53d1\u73b0\u4e0d\u540c\u5bf9\u5c40\u4e2d\u63d2\u773c\u6570\u548c\u62c6\u773c\u6570\u7684\u53d6\u503c\u8303\u56f4\u5b58\u5728\u660e\u663e\u5dee\u8ddd\uff0c\u751a\u81f3\u6709\u524d\u5341\u5206\u949f\u63d2\u4e86250\u4e2a\u773c\u7684\u5f02\u5e38\u503c\u3002\n\n\u6211\u4eec\u53d1\u73b0EliteMonsters\u7684\u53d6\u503c\u76f8\u5f53\u4e8eDeagons + Heralds\u3002\n\n\u6211\u4eec\u53d1\u73b0TotalGold \u7b49\u53d8\u91cf\u5728\u5927\u90e8\u5206\u5bf9\u5c40\u4e2d\u5dee\u8ddd\u4e0d\u5927\u3002\n\n\u6211\u4eec\u53d1\u73b0\u4e24\u652f\u961f\u4f0d\u7684\u7ecf\u6d4e\u5dee\u548c\u7ecf\u9a8c\u5dee\u662f\u76f8\u53cd\u6570\u3002\n\n\u6211\u4eec\u53d1\u73b0\u7ea2\u961f\u548c\u84dd\u961f\u62ff\u5230\u9996\u6b21\u51fb\u6740\u7684\u6982\u7387\u5927\u6982\u90fd\u662f50%","831fc0fb":"\u672c\u6b21\u6211\u4eec\u9009\u62e9\u82f1\u96c4\u8054\u76df\u6570\u636e\u96c6\u8fdb\u884cLightGBM\u7684\u573a\u666f\u4f53\u9a8c\u3002\u82f1\u96c4\u8054\u76df\u662f2009\u5e74\u7f8e\u56fd\u62f3\u5934\u6e38\u620f\u5f00\u53d1\u7684MOBA\u7ade\u6280\u7f51\u6e38\uff0c\u5728\u6bcf\u5c40\u6bd4\u8d5b\u4e2d\u84dd\u961f\u4e0e\u7ea2\u961f\u5728\u540c\u4e00\u4e2a\u5730\u56fe\u8fdb\u884c\u4f5c\u6218\uff0c\u6e38\u620f\u7684\u76ee\u6807\u662f\u7834\u574f\u654c\u65b9\u961f\u4f0d\u7684\u9632\u5fa1\u5854\uff0c\u8fdb\u800c\u6467\u6bc1\u654c\u65b9\u7684\u6c34\u6676\u67a2\u7ebd\uff0c\u62ff\u4e0b\u6bd4\u8d5b\u7684\u80dc\u5229\u3002\n\n\u73b0\u5728\u5171\u67099881\u573a\u82f1\u96c4\u8054\u76df\u97e9\u670d\u94bb\u77f3\u6bb5\u4f4d\u4ee5\u4e0a\u7684\u6392\u4f4d\u6bd4\u8d5b\u6570\u636e\uff0c\u6570\u636e\u63d0\u4f9b\u4e86\u5728\u5341\u5206\u949f\u65f6\u7684\u6e38\u620f\u72b6\u6001\uff0c\u5305\u62ec\u51fb\u6740\u6570\u3001\u6b7b\u4ea1\u6570\u3001\u91d1\u5e01\u6570\u91cf\u3001\u7ecf\u9a8c\u503c\u3001\u7b49\u7ea7\u2026\u2026\u7b49\u4fe1\u606f\u3002\u5217blueWins\u662f\u6570\u636e\u7684\u6807\u7b7e\uff0c\u4ee3\u8868\u4e86\u672c\u573a\u6bd4\u8d5b\u662f\u5426\u4e3a\u84dd\u961f\u83b7\u80dc\u3002\n\n\u6570\u636e\u7684\u5404\u4e2a\u7279\u5f81\u63cf\u8ff0\u5982\u4e0b\uff1a\n\n| \u7279\u5f81\u540d\u79f0 | \u7279\u5f81\u610f\u4e49 | \u53d6\u503c\u8303\u56f4 | | | |--------------------------|------------------|----------|---|---| | WardsPlaced | \u63d2\u773c\u6570\u91cf | \u6574\u6570 | | | | WardsDestroyed | \u62c6\u773c\u6570\u91cf | \u6574\u6570 | | | | FirstBlood | \u662f\u5426\u83b7\u5f97\u9996\u6b21\u51fb\u6740 | \u6574\u6570 | | | | Kills | \u51fb\u6740\u82f1\u96c4\u6570\u91cf | \u6574\u6570 | | | | Deaths | \u6b7b\u4ea1\u6570\u91cf | \u6574\u6570 | | | | Assists | \u52a9\u653b\u6570\u91cf | \u6574\u6570 | | | | EliteMonsters | \u51fb\u6740\u5927\u578b\u91ce\u602a\u6570\u91cf | \u6574\u6570 | | | | Dragons | \u51fb\u6740\u53f2\u8bd7\u91ce\u602a\u6570\u91cf | \u6574\u6570 | | | | Heralds | \u51fb\u6740\u5ce1\u8c37\u5148\u950b\u6570\u91cf | \u6574\u6570 | | | | TowersDestroyed | \u63a8\u5854\u6570\u91cf | \u6574\u6570 | | | | TotalGold | \u603b\u7ecf\u6d4e | \u6574\u6570 | | | | AvgLevel | \u5e73\u5747\u82f1\u96c4\u7b49\u7ea7 | \u6d6e\u70b9\u6570 | | | | TotalExperience | \u82f1\u96c4\u603b\u7ecf\u9a8c | \u6574\u6570 | | | | TotalMinionsKilled | \u82f1\u96c4\u8865\u5175\u6570\u91cf | \u6574\u6570 | | | | TotalJungleMinionsKilled | \u82f1\u96c4\u51fb\u6740\u91ce\u602a\u6570\u91cf | \u6574\u6570 | | | | GoldDiff | \u7ecf\u6d4e\u5dee\u8ddd | \u6574\u6570 | | | | ExperienceDiff | \u7ecf\u9a8c\u5dee\u8ddd | \u6574\u6570 | | | | CSPerMin | \u5206\u5747\u8865\u5200 | \u6d6e\u70b9\u6570 | | | | GoldPerMin | \u5206\u5747\u7ecf\u6d4e | \u6d6e\u70b9\u6570 | | |","b9cb5bc7":"\u4ece\u4e0a\u56fe\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u51fb\u6740\u6570\u4e0e\u6b7b\u4ea1\u6570\u4e0e\u52a9\u653b\u6570\uff0c\u4ee5\u53ca\u6211\u4eec\u6784\u9020\u7684\u7279\u5f81\u5bf9\u6570\u636e\u90fd\u6709\u8f83\u597d\u7684\u5206\u7c7b\u80fd\u529b","b287ab20":"\u8fd9\u4e9b\u56fe\u540c\u6837\u53ef\u4ee5\u5e2e\u52a9\u6211\u4eec\u66f4\u597d\u7684\u4e86\u89e3\u5176\u4ed6\u91cd\u8981\u7279\u5f81\u3002\n\n#### \u901a\u8fc7\u8c03\u6574\u53c2\u6570\u83b7\u5f97\u66f4\u597d\u7684\u6548\u679c\n\nLightGBM\u4e2d\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4e0b\u5217\u5bf9\u6a21\u578b\u5f71\u54cd\u8f83\u5927\u7684\u53c2\u6570\uff1a\n\n- learning_rate: \u6709\u65f6\u4e5f\u53eb\u4f5ceta\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u503c\u4e3a0.3\u3002\u6bcf\u4e00\u6b65\u8fed\u4ee3\u7684\u6b65\u957f\uff0c\u5f88\u91cd\u8981\u3002\u592a\u5927\u4e86\u8fd0\u884c\u51c6\u786e\u7387\u4e0d\u9ad8\uff0c\u592a\u5c0f\u4e86\u8fd0\u884c\u901f\u5ea6\u6162\u3002\n- num_leaves\uff1a\u7cfb\u7edf\u9ed8\u8ba4\u4e3a32\u3002\u8fd9\u4e2a\u53c2\u6570\u63a7\u5236\u6bcf\u68f5\u6811\u4e2d\u6700\u5927\u53f6\u5b50\u8282\u70b9\u6570\u91cf\u3002\n- feature_fraction\uff1a\u7cfb\u7edf\u9ed8\u8ba4\u503c\u4e3a1\u3002\u6211\u4eec\u4e00\u822c\u8bbe\u7f6e\u62100.8\u5de6\u53f3\u3002\u7528\u6765\u63a7\u5236\u6bcf\u68f5\u968f\u673a\u91c7\u6837\u7684\u5217\u6570\u7684\u5360\u6bd4(\u6bcf\u4e00\u5217\u662f\u4e00\u4e2a\u7279\u5f81)\u3002\n- max_depth\uff1a \u7cfb\u7edf\u9ed8\u8ba4\u503c\u4e3a6\uff0c\u6211\u4eec\u5e38\u75283-10\u4e4b\u95f4\u7684\u6570\u5b57\u3002\u8fd9\u4e2a\u503c\u4e3a\u6811\u7684\u6700\u5927\u6df1\u5ea6\u3002\u8fd9\u4e2a\u503c\u662f\u7528\u6765\u63a7\u5236\u8fc7\u62df\u5408\u7684\u3002max_depth\u8d8a\u5927\uff0c\u6a21\u578b\u5b66\u4e60\u7684\u66f4\u52a0\u5177\u4f53\u3002\n\u8c03\u8282\u6a21\u578b\u53c2\u6570\u7684\u65b9\u6cd5\u6709\u8d2a\u5fc3\u7b97\u6cd5\u3001\u7f51\u683c\u8c03\u53c2\u3001\u8d1d\u53f6\u65af\u8c03\u53c2\u7b49\u3002\u8fd9\u91cc\u6211\u4eec\u91c7\u7528\u7f51\u683c\u8c03\u53c2\uff0c\u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u7a77\u4e3e\u641c\u7d22\uff1a\u5728\u6240\u6709\u5019\u9009\u7684\u53c2\u6570\u9009\u62e9\u4e2d\uff0c\u901a\u8fc7\u5faa\u73af\u904d\u5386\uff0c\u5c1d\u8bd5\u6bcf\u4e00\u79cd\u53ef\u80fd\u6027\uff0c\u8868\u73b0\u6700\u597d\u7684\u53c2\u6570\u5c31\u662f\u6700\u7ec8\u7684\u7ed3\u679c","ae83faaf":"\u6211\u4eec\u6784\u9020\u4e86\u4e24\u961f\u4e4b\u95f4\u662f\u5426\u62ff\u5230\u9f99\u3001\u662f\u5426\u62ff\u5230\u5ce1\u8c37\u5148\u950b\u3001\u51fb\u6740\u5927\u578b\u91ce\u602a\u7684\u6570\u91cf\u5dee\u503c\uff0c\u53d1\u73b0\u5728\u6e38\u620f\u7684\u524d\u671f\u62ff\u5230\u9f99\u6bd4\u62ff\u5230\u5ce1\u8c37\u5148\u950b\u66f4\u5bb9\u6613\u83b7\u5f97\u80dc\u5229\u3002\u62ff\u5230\u5927\u578b\u91ce\u602a\u7684\u6570\u91cf\u548c\u80dc\u7387\u4e5f\u5b58\u5728\u7740\u5f3a\u76f8\u5173","9c7159d0":"\u63a8\u5854\u662f\u82f1\u96c4\u8054\u76df\u8fd9\u4e2a\u6e38\u620f\u7684\u6838\u5fc3\uff0c\u56e0\u6b64\u63a8\u5854\u6570\u91cf\u53ef\u80fd\u4e0e\u6e38\u620f\u7684\u80dc\u8d1f\u6709\u5f88\u5927\u5173\u7cfb\u3002\u6211\u4eec\u7ed8\u56fe\u53d1\u73b0\uff0c\u5c3d\u7ba1\u524d\u5341\u5206\u949f\u63a8\u6389\u7b2c\u4e00\u5ea7\u9632\u5fa1\u5854\u7684\u6982\u7387\u5f88\u4f4e\uff0c\u4f46\u662f\u4e00\u65e6\u67d0\u53ea\u961f\u4f0d\u63a8\u6389\u7b2c\u4e00\u5ea7\u9632\u5fa1\u5854\uff0c\u83b7\u5f97\u6e38\u620f\u7684\u80dc\u7387\u5c06\u5927\u5927\u589e\u52a0","c02bbfc3":"\u603b\u7ecf\u6d4e\u5dee\u8ddd\u7b49\u7279\u5f81\uff0c\u52a9\u653b\u6570\u91cf\u3001\u51fb\u6740\u6b7b\u4ea1\u6570\u91cf\u7b49\u7279\u5f81\u90fd\u5177\u6709\u5f88\u5927\u7684\u4f5c\u7528\u3002\u63d2\u773c\u6570\u3001\u63a8\u5854\u6570\u5bf9\u6a21\u578b\u7684\u5f71\u54cd\u5e76\u4e0d\u5927\u3002\n\n\u521d\u6b21\u4e4b\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u4f7f\u7528LightGBM\u4e2d\u7684\u4e0b\u5217\u91cd\u8981\u5c5e\u6027\u6765\u8bc4\u4f30\u7279\u5f81\u7684\u91cd\u8981\u6027\u3002\n\n- gain:\u5f53\u5229\u7528\u7279\u5f81\u505a\u5212\u5206\u7684\u65f6\u5019\u7684\u8bc4\u4ef7\u57fa\u5c3c\u6307\u6570\n- split:\u662f\u4ee5\u7279\u5f81\u7528\u5230\u7684\u6b21\u6570\u6765\u8bc4\u4ef7","608a06c4":"\u6211\u4eec\u53d1\u73b0\u51fb\u6740\u3001\u6b7b\u4ea1\u4e0e\u52a9\u653b\u6570\u7684\u6570\u636e\u5206\u5e03\u5dee\u522b\u4e0d\u5927\u3002\u4f46\u662f\u51fb\u6740\u51cf\u53bb\u6b7b\u4ea1\u3001\u52a9\u653b\u51cf\u53bb\u6b7b\u4ea1\u7684\u5206\u5e03\u4e0e\u539f\u5206\u5e03\u5dee\u522b\u5f88\u5927\uff0c\u56e0\u6b64\u6211\u4eec\u65b0\u6784\u9020\u8fd9\u4e48\u4e24\u4e2a\u7279\u5f81\u3002","f69fca78":"\u540c\u65f6\u6211\u4eec\u753b\u51fa\u5404\u4e2a\u7279\u5f81\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u70ed\u529b\u56fe\uff0c\u989c\u8272\u8d8a\u6df1\u4ee3\u8868\u7279\u5f81\u4e4b\u95f4\u76f8\u5173\u6027\u8d8a\u5f3a\uff0c\u6211\u4eec\u5254\u9664\u90a3\u4e9b\u76f8\u5173\u6027\u8f83\u5f3a\u7684\u5197\u4f59\u7279\u5f81\u3002","8adeedcc":"\u5c0f\u63d0\u7434\u56fe (Violin Plot)\u662f\u7528\u6765\u5c55\u793a\u591a\u7ec4\u6570\u636e\u7684\u5206\u5e03\u72b6\u6001\u4ee5\u53ca\u6982\u7387\u5bc6\u5ea6\u3002\u8fd9\u79cd\u56fe\u8868\u7ed3\u5408\u4e86\u7bb1\u5f62\u56fe\u548c\u5bc6\u5ea6\u56fe\u7684\u7279\u5f81\uff0c\u4e3b\u8981\u7528\u6765\u663e\u793a\u6570\u636e\u7684\u5206\u5e03\u5f62\u72b6\u3002\n\n\u4ece\u56fe\u4e2d\u6211\u4eec\u53ef\u4ee5\u770b\u51fa\uff1a\n\n- \u51fb\u6740\u82f1\u96c4\u6570\u91cf\u8d8a\u591a\u66f4\u5bb9\u6613\u8d62\uff0c\u6b7b\u4ea1\u6570\u91cf\u8d8a\u591a\u8d8a\u5bb9\u6613\u8f93\uff08bluekills\u4e0ebluedeaths\u5de6\u53f3\u7684\u533a\u522b\uff09\u3002\n- \u52a9\u653b\u6570\u91cf\u4e0e\u51fb\u6740\u82f1\u96c4\u6570\u91cf\u5f62\u6210\u7684\u56fe\u5f62\u72b6\u7c7b\u4f3c\uff0c\u8bf4\u660e\u4ed6\u4eec\u5bf9\u6e38\u620f\u7ed3\u679c\u7684\u5f71\u54cd\u5dee\u4e0d\u591a\u3002\n- \u4e00\u8840\u7684\u53d6\u5f97\u60c5\u51b5\u4e0e\u83b7\u80dc\u6709\u6b63\u76f8\u5173\uff0c\u4f46\u662f\u76f8\u5173\u6027\u4e0d\u5982\u51fb\u6740\u82f1\u96c4\u6570\u91cf\u660e\u663e\u3002\n- \u7ecf\u6d4e\u5dee\u4e0e\u7ecf\u9a8c\u5dee\u5bf9\u4e8e\u6e38\u620f\u80dc\u8d1f\u7684\u5f71\u54cd\u8f83\u5927\u3002\n- \u51fb\u6740\u91ce\u602a\u6570\u91cf\u5bf9\u6e38\u620f\u80dc\u8d1f\u7684\u5f71\u54cd\u5e76\u4e0d\u5927","391a8510":"\u6211\u4eec\u753b\u51fa\u4e86\u63d2\u773c\u6570\u91cf\u7684\u6563\u70b9\u56fe\uff0c\u53d1\u73b0\u4e0d\u5b58\u5728\u63d2\u773c\u6570\u91cf\u4e0e\u6e38\u620f\u80dc\u8d1f\u95f4\u7684\u663e\u8457\u89c4\u5f8b\u3002\n\n\u731c\u6d4b\u7531\u4e8e\u94bb\u77f3\u5206\u6bb5\u4ee5\u4e0a\u5728\u54ea\u63d2\u773c\u5728\u54ea\u597d\u6392\u773c\u90fd\u662f\u5957\u8def\uff0c\u6240\u4ee5\u6570\u636e\u4e2d\u524d\u5341\u5206\u949f\u63d2\u773c\u6570\u62d4\u773c\u6570\u5bf9\u6e38\u620f\u7684\u5f71\u54cd\u4e0d\u5927\u3002\u6240\u4ee5\u6211\u4eec\u6682\u65f6\u5148\u628a\u8fd9\u4e9b\u7279\u5f81\u53bb\u6389","3bfa8151":"### \u4f7f\u7528lightGBM\u8fdb\u884c\u9884\u6d4b","911e2af9":"#### \u53ef\u89c6\u5316\u63cf\u8ff0","465bc90a":"\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5171\u6709718 + 707\u4e2a\u6837\u672c\u9884\u6d4b\u6b63\u786e\uff0c306 + 245\u4e2a\u6837\u672c\u9884\u6d4b\u9519\u8bef\u3002\n#### \u5229\u7528 LightGBM \u8fdb\u884c\u7279\u5f81\u9009\u62e9\n\nLightGBM\u7684\u7279\u5f81\u9009\u62e9\u5c5e\u4e8e\u7279\u5f81\u9009\u62e9\u4e2d\u7684\u5d4c\u5165\u5f0f\u65b9\u6cd5\uff0c\u5728LightGBM\u4e2d\u53ef\u4ee5\u7528\u5c5e\u6027feature_importances_\u53bb\u67e5\u770b\u7279\u5f81\u7684\u91cd\u8981\u5ea6\u3002"}}