{"cell_type":{"f04928f4":"code","437e9961":"code","395bd7ff":"code","ec085056":"code","997fbb9c":"code","13d4b1fa":"code","65fc3a69":"code","916cfb0c":"code","ada7ddc2":"code","b398b249":"code","b92ab885":"code","9714778d":"code","3e5f9b0e":"code","062014b5":"code","086696f4":"code","e76e276b":"markdown"},"source":{"f04928f4":"import numpy as np  # Data manipulation\nimport pandas as pd # Dataframe manipulation \nimport matplotlib.pyplot as plt # Plotting the data and the results\nimport matplotlib.image as mpimg # For displaying imagees\n%matplotlib inline\nfrom keras import models\nfrom keras import layers\nimport keras.preprocessing  as kp\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras import regularizers\nfrom keras import optimizers","437e9961":"train_datagen = ImageDataGenerator( # Data Augumentation for test data\nrescale=1.\/255,\nrotation_range=30,\nshear_range=0.3,\nzoom_range=0.3\n)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)","395bd7ff":"train_gen=train_datagen.flow_from_directory('..\/input\/gender-recognition-200k-images-celeba\/Dataset\/Train',\n                                            target_size=(250,250),\n                                            batch_size=48,\n                                            class_mode='binary')","ec085056":"valid_gen=test_datagen.flow_from_directory('..\/input\/gender-recognition-200k-images-celeba\/Dataset\/Validation',\n                                           target_size=(250,250),\n                                           batch_size=48,\n                                           class_mode='binary')","997fbb9c":"from keras.applications import MobileNet\nfrom keras.preprocessing import image\nfrom keras.models import Model\nfrom keras.layers import Dense, GlobalAveragePooling2D\n\n\nbase_model=MobileNet(weights='imagenet',include_top=False) #imports the mobilenet model and discards the last 1000 neuron layer.\n\nx=base_model.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(1024,activation='relu')(x) #we add dense layers so that the model can learn more complex functions and classify for better results.\nx=Dense(1024,activation='relu')(x) #dense layer 2\nx=Dense(512,activation='relu')(x) #dense layer 3\npreds=Dense(1,activation='softmax')(x)\n\n\n\n# train the model on the new data for a few epochs\n","13d4b1fa":"model=Model(inputs=base_model.input,outputs=preds)","65fc3a69":"for i,layer in enumerate(model.layers):\n  print(i,layer.name)","916cfb0c":"for layer in model.layers:\n    layer.trainable=False\n# or if we want to set the first 20 layers of the network to be non-trainable\nfor layer in model.layers[:20]:\n    layer.trainable=False\nfor layer in model.layers[20:]:\n    layer.trainable=True","ada7ddc2":"# compile the model (should be done *after* setting layers to non-trainable)\nmodel.compile(optimizer='rmsprop', loss='categorical_crossentropy',metrics=['acc'])","b398b249":"step_size_train=train_gen.n\/\/train_gen.batch_size\nhistory=model.fit_generator(generator=train_gen,\n                   steps_per_epoch=step_size_train,\n                   epochs=1,validation_data=valid_gen,validation_steps=50)","b92ab885":"acc = history.history['acc']\nval_acc = history.history['val_acc']\nloss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(acc) + 1)\nplt.plot(epochs, acc, 'bo', label='Training acc')\nplt.plot(epochs, val_acc, 'ro', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.legend()\nplt.figure()\n\nplt.plot(epochs, loss, 'bo', label='Training loss')\nplt.plot(epochs, val_loss, 'ro', label='Validation loss')\nplt.title('Training and validation loss')\nplt.legend()\nplt.figure()","9714778d":"test_datagen1 = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen1.flow_from_directory(\n'..\/input\/gender-recognition-200k-images-celeba\/Dataset\/Test',\ntarget_size=(150,150),\nbatch_size=64,\nclass_mode='binary')","3e5f9b0e":"fig,ax=plt.subplots(ncols=2,nrows=4,figsize=(20,20))\nimg1 = mpimg.imread('..\/input\/gender-recognition-200k-images-celeba\/Dataset\/Test\/Female\/160003.jpg')\nax[0][0].imshow(img1)\nax[0][0].set_title(\"Dataset we trained and tested on.\")\nimg2 = mpimg.imread('..\/input\/gender-classification-dataset\/Training\/female\/131422.jpg.jpg')\nax[0][1].imshow(img2)\nax[0][1].set_title(\"The completely new dataset.\")\nimg3 =  mpimg.imread('..\/input\/gender-recognition-200k-images-celeba\/Dataset\/Validation\/Female\/180019.jpg')\nax[1][0].imshow(img3)\nimg4= mpimg.imread('..\/input\/gender-classification-dataset\/Validation\/female\/113010.jpg.jpg')\nax[1][1].imshow(img4)\nimg5 = mpimg.imread('..\/input\/gender-recognition-200k-images-celeba\/Dataset\/Validation\/Male\/180028.jpg')\nax[2][0].imshow(img5)\nimg6 = mpimg.imread('..\/input\/gender-classification-dataset\/Validation\/male\/063517.jpg.jpg')\nax[2][1].imshow(img6)\nax[3][0].imshow(mpimg.imread('..\/input\/gender-recognition-200k-images-celeba\/Dataset\/Validation\/Male\/180073.jpg'))\nax[3][1].imshow(mpimg.imread('..\/input\/gender-classification-dataset\/Validation\/male\/063531.jpg.jpg'))\nplt.tight_layout()","062014b5":"test_datagen2 = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen2.flow_from_directory(\n'..\/input\/gender-classification-dataset\/Training',\ntarget_size=(150,150),\nbatch_size=64,\nclass_mode='binary')","086696f4":"test_datagen3 = ImageDataGenerator(rescale=1.\/255)\ntest_generator = test_datagen1.flow_from_directory(\n'..\/input\/gender-classification-dataset\/Validation',\ntarget_size=(150,150),\nbatch_size=64,\nclass_mode='binary')","e76e276b":"I am running it for one epoch only. Just due to time constraint."}}