{"cell_type":{"a28d48d3":"code","df4e54da":"code","87790726":"code","8de44eae":"code","e89d1e2c":"code","dc4b8a9c":"code","4e3c01e9":"code","0d9da5b6":"code","a56117ba":"code","a36a13b3":"code","8e788cc6":"code","73fed91a":"code","846a4168":"code","877f613b":"code","c17c5ff6":"code","3296f9bc":"code","310c4db6":"code","06a18407":"code","39de390e":"code","5038208b":"code","7beff4c3":"code","ed6a672c":"markdown","8f965b35":"markdown","d7b29293":"markdown","18b92e79":"markdown","df13f2c2":"markdown","1b80da7b":"markdown","bb9c9223":"markdown"},"source":{"a28d48d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","df4e54da":"#importing modules and functions\nimport pandas as pd\nimport numpy as np\nimport graphviz\nfrom sklearn import tree\nfrom sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier\nfrom sklearn.model_selection import train_test_split # Import train_test_split function\nfrom sklearn import metrics #Import scikit-learn metrics module for accuracy calculation","87790726":"dff=pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")","8de44eae":"dff=dff.drop(columns=['fnlwgt', 'capital.gain','capital.loss'])\n","e89d1e2c":"dff[\"workclass\"]=dff[\"workclass\"].replace(\"?\", \"Private\")\ndff.head(4)\ndff[\"workclass\"].value_counts()","dc4b8a9c":"dff[\"occupation\"]=dff[\"occupation\"].replace(\"?\",\"Not specified\")\ndff.head(4)\ndff.income[dff.occupation==\"Not Specifeid\"]","4e3c01e9":"a=dff.income[dff.education==\"Some-college\"]\na.value_counts()","0d9da5b6":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\ndff['age']=le.fit_transform(dff[\"age\"])\ndff['workclass']=le.fit_transform(dff[\"workclass\"])\ndff['education']=le.fit_transform(dff[\"education\"])\ndff['education.num']=le.fit_transform(dff[\"education.num\"])\n\ndff['marital.status']=le.fit_transform(dff[\"marital.status\"])\ndff['occupation']=le.fit_transform(dff[\"occupation\"])\ndff['relationship']=le.fit_transform(dff[\"relationship\"])\ndff['race']=le.fit_transform(dff[\"race\"])\ndff['sex']=le.fit_transform(dff[\"sex\"])\ndff['hours.per.week']=le.fit_transform(dff[\"hours.per.week\"])\ndff['native.country']=le.fit_transform(dff[\"native.country\"])\ndff['income']=le.fit_transform(dff[\"income\"])","a56117ba":"dff.head()","a36a13b3":"feature_cols=[\"age\",\"workclass\",\"education\",\"education.num\",\"martial.status\",\"occupation\",\"relationship\",\"race\",\"sex\",\"hours.per.week\",\"native.country\"]\ntarget=[\"0\",\"1\"]\n","8e788cc6":"X_train,X_test,y_train, y_test=train_test_split(dff[dff.columns[0:11]], dff[dff.columns[11]], test_size=0.33, random_state=42)","73fed91a":"# Create Decision Tree classifer object\nclf = DecisionTreeClassifier(criterion=\"entropy\",max_depth=6)\n\n# Train Decision Tree Classifer\nclf = clf.fit(X_train,y_train)\n\n#Predict the response for test dataset\ny_pred = clf.predict(X_test)","846a4168":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","877f613b":"import graphviz\ndot_data=tree.export_graphviz(clf,out_file=None)\ngraph = graphviz.Source(dot_data)\ngraph.render(\"dff\")","c17c5ff6":"dot_data = tree.export_graphviz(clf, out_file=None, \nfeature_names=feature_cols,  \nclass_names=target,  \nfilled=True, rounded=True,  \nspecial_characters=True)  \ngraph = graphviz.Source(dot_data)  \ngraph \n ","3296f9bc":"from xgboost import XGBClassifier\nimport xgboost as xgb","310c4db6":"model = XGBClassifier(max_depth=3,learning_rate=0.1,n_estimators=300,booster=\"gbtree\",reg_lambda=0.5,reg_alpha=0.5)\nmodel.fit(X_train, y_train)","06a18407":"y_pred_xgb = model.predict(X_test)","39de390e":"print(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred_xgb))","5038208b":"\n#plotting technique - 1 (varying the size)\nfrom xgboost import plot_tree\nimport matplotlib.pyplot as plt\nplt.rcParams[\"figure.figsize\"] = (80,12)\nplot_tree(model)\nplt.show()","7beff4c3":"#plotting technique 2 (more clear,more dpi)\nxgb.to_graphviz(model, num_trees=2)","ed6a672c":"# # # # **Preprocessing**","8f965b35":"# # # # **Visualization**","d7b29293":"# # # # **Changing everything to integers for fitting**","18b92e79":"# # # # **Importing our Dataset**","df13f2c2":"# # # # **Accuracy**","1b80da7b":"# # # # **Diving the Data into train and test datasets**","bb9c9223":"# # # # **creating DT Classifier object and fitting the data to model**"}}