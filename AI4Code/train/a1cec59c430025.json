{"cell_type":{"1c4897b7":"code","33fc125e":"code","2335ddae":"code","5b1b2e4e":"code","8c7377ff":"code","19cc360c":"code","b679ae8f":"code","e0b7eec0":"code","51e11832":"code","13c7d0b1":"code","c88f4781":"code","b03488d1":"code","d3991950":"code","917ab932":"code","3854efa4":"code","e1bd354c":"code","6eea573f":"code","1fb920a0":"code","fc2a18f2":"code","9fb2a479":"code","61b0ad0a":"code","f556261b":"code","a1c6c4d9":"code","dd5c9e88":"code","2a251de9":"markdown","7d2d20d0":"markdown","f5929b46":"markdown"},"source":{"1c4897b7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","33fc125e":"pip install openpyxl","2335ddae":"pip install country_converter","5b1b2e4e":"import openpyxl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport country_converter as coco\nfrom matplotlib.pyplot import figure\nimport geopandas as gpd\nimport seaborn as sns","8c7377ff":"athletes = pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Athletes.xlsx', engine = 'openpyxl')\ngender = pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/EntriesGender.xlsx', engine ='openpyxl')\nmedals = pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Medals.xlsx', engine = 'openpyxl')\nteams = pd.read_excel('\/kaggle\/input\/2021-olympics-in-tokyo\/Teams.xlsx', engine = 'openpyxl')\nhdi = pd.read_excel('\/kaggle\/input\/human-development-index\/HDI.xlsx', engine = 'openpyxl')","19cc360c":"dataset_names = [athletes, gender, medals, teams, hdi]\nfor x in dataset_names:\n    print(x.isna().sum()\/len(x)*100)\n    print()","b679ae8f":"ath_country = athletes.groupby('NOC', as_index=False)['Discipline'].nunique().copy()\n\ndis_country = athletes.groupby('NOC', as_index=False)['Name'].count().copy()\nath_country = ath_country.merge(dis_country, how='outer', on='NOC').copy()\nath_country","e0b7eec0":"hdi['CountryCode'] = coco.convert(names=hdi['Country'], to='name_short')\nhdi.head()\n\nmedals['CountryCode'] = coco.convert(names=medals['Team\/NOC'], to='name_short')\n\nath_country['CountryCode'] = coco.convert(names=ath_country['NOC'], to='name_short')\nath_country.head(3)","51e11832":"# Since Russia used \"ROC\" instead of \"Russia\" in this year's competition\n# as it was suspended to use the country name due to drug use, \n# thus the converter fail to \"ROC\" to Russia\n\nfor index, code in enumerate(medals['Team\/NOC']):\n        if code == \"Refugee Olympic Team\":\n            print('Refugee ' + str(index))\n        elif code == \"ROC\":\n            print('Russia ' + str(index))","13c7d0b1":"for index, code in enumerate(ath_country['NOC']):\n        if code == \"Refugee Olympic Team\":\n            print('Refugee '  + str(index))\n        elif code == \"ROC\":\n            print('Russia ' + str(index))\n","c88f4781":"# remove the refugeee team in ath_country\nath_country = ath_country[~ath_country['NOC'].str.contains('Refugee')].copy()","b03488d1":"medals.columns","d3991950":"for index, code in enumerate(medals['Team\/NOC']):\n    if code == \"ROC\":\n        medals.loc[index,'CountryCode'] = \"Russia\"","917ab932":"for index, code in enumerate(ath_country['NOC']):\n    if code == \"ROC\":\n        ath_country.loc[index,'CountryCode'] = \"Russia\"","3854efa4":"medals[medals['CountryCode'] == 'not found']\n","e1bd354c":"ath_country[ath_country['CountryCode'] == 'not found']","6eea573f":"# now we merge the medals, ath_country and hdi dataframe based on the CountryCode column\nmedals_ath = medals.merge(ath_country, how='inner', on='CountryCode')\nmedals_ath.drop(['Rank','Team\/NOC','NOC','Rank by Total'], axis=1, inplace=True)\nmedals_ath.rename(columns={'Name':'Athletes'}, inplace =True)\nmedals_ath_hdi = medals_ath.merge(hdi, how = 'inner', on = 'CountryCode')\nmedals_ath_hdi.drop('Country', axis=1, inplace=True)","1fb920a0":"medals_ath_hdi.isnull().sum()","fc2a18f2":"medals_ath_hdi.reset_index(drop=True, inplace=True)\nmedals_ath_hdi.sort_values(by=['Total','Gold','Silver','Bronze'], ascending=True, inplace=True)\nmedals_ath_hdi_top30 = medals_ath_hdi.iloc[-30: ,0:5]","9fb2a479":"world = gpd.read_file(gpd.datasets.get_path(\"naturalearth_lowres\"))\nworld = world[(world.pop_est>0) & (world.continent!=\"Antarctica\") & (world.continent!=\"Seven seas (open ocean)\")]\n\nworld['CountryCode'] = coco.convert(names=world['name'], to='name_short') # unifying the names of country\n\nmedals_ath_world = world.merge(medals_ath, how='inner', on='CountryCode')\nmedals_ath_world","61b0ad0a":"# In this graph, we aim to visualize the gender imparity in Olympic.\n\ngender['mPct'] = gender['Male'] \/(gender['Male'] + gender['Female'])\ngender['fPct'] = gender['Female'] \/(gender['Male'] + gender['Female'])\ngender['Total'] = gender['mPct'] + gender['fPct']\n\nunequalGender = gender[gender['fPct'] != gender ['mPct']].loc[:,['Discipline','Total','fPct']].reset_index(drop=True)\nunequalGender.sort_values(by='fPct', ascending = False, inplace=True)\n\nplt.figure(figsize=(12, 12))\nbar1 = sns.barplot(y='Discipline', x='Total', data = unequalGender, color='lightblue')\nbar2 = sns.barplot(y='Discipline', x='fPct', data = unequalGender, color='pink')\nbar1.axvline(0.5, linewidth=0.8, c='purple')\n\nplt.xlabel('Female to Male Ratio', fontsize=14)\nplt.ylabel('Discipline', fontsize=14)\n\nplt.title('Sports with Gender Imparity', fontsize=18)","f556261b":"# This graph shows the top 30 country with highest Olympic medals\n\nfig, ax = plt.subplots(figsize=(24,18))\nplt.margins(0.05, 0.01) # set the whitespace\n\nplt.barh(medals_ath_hdi_top30['CountryCode'], medals_ath_hdi_top30['Gold'], height=0.5, color='#d4af37',label='Gold')\nplt.barh(medals_ath_hdi_top30['CountryCode'], medals_ath_hdi_top30['Silver'], height=0.5, left = medals_ath_hdi_top30['Gold'], color='#C0C0C0',label='Silver')\nplt.barh(medals_ath_hdi_top30['CountryCode'], medals_ath_hdi_top30['Bronze'], height=0.5, left = medals_ath_hdi_top30['Gold'] + medals_ath_hdi_top30['Silver'], color='#CD7F32',label='Bronze')\n\nplt.yticks(medals_ath_hdi_top30.CountryCode)\nplt.tick_params(axis='y', which='major', labelsize=20)\nplt.tick_params(axis='x', which='major', labelsize=20)\n\nax.set_title('Total numbers of Medals in Tokyo Olympics by Countries', fontsize=28, pad=10)\nplt.xlabel('Total numbers of Medals', fontsize=22)\nplt.ylabel('Countries\/Region', fontsize=22)\nplt.tight_layout()\nplt.legend(loc=7, prop={'size': 20})\nplt.show()","a1c6c4d9":"medals_ath_world.plot((medals_ath_world['Total']\/medals_ath_world['Discipline']),\n    figsize=(22,10),\n    legend=True,\n    edgecolor=\"grey\",\n#     legend_kwds={\"label\":\"Average Medals per Discipline\"},\n    cmap='viridis_r',\n    missing_kwds={\"color\":\"white\"}\n)\n\nplt.title('Average Medals per Discipline', fontsize=18, pad=10)","dd5c9e88":"# The heatmap show the relationship between Olympoc result and country development\n# however, we could not find a strong relationship between them\n# Only numbers of disciplines are moderately correlated with human development index, \n# life expectancy and years of schooling\n\nfig, ax = plt.subplots(figsize=(10,10))\nmedals_hdi_heatmap = medals_ath_hdi.iloc[:,np.r_[0:13]]\nmedals_hdi_heatmap.corr()\nsns.heatmap(medals_hdi_heatmap.corr(), annot=True)\n\nplt.title('Correlation between Development and Olympic Result', fontsize=18, pad=15)","2a251de9":"We dont have anymore unknown country in medals and ath_country dataframe","7d2d20d0":"Plotting Graphs","f5929b46":"Data processing and cleaning "}}