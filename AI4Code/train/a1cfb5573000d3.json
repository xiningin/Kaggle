{"cell_type":{"3faf484b":"code","e7acd76f":"code","a7b3e4ba":"code","a3aea6a1":"code","678ea01f":"code","4295d17e":"code","ff402acb":"code","a41473a8":"code","76cdaf1e":"code","eb70fa70":"code","4489c7dc":"code","33dfb506":"code","e7489608":"code","328987ab":"code","7f9e6762":"code","c860308f":"code","c2e1d55c":"code","5c2290d6":"code","776be587":"code","3b8e2569":"code","5b326f47":"code","f42a736b":"code","3e8c4a63":"code","bd97aea2":"code","f50d2dcb":"code","1df55148":"code","72f43374":"code","d842d44c":"code","bb905926":"code","7fc80598":"code","1ab1f1d3":"code","70b996da":"code","0b457522":"code","f70479c8":"code","97b300f9":"code","04e94d03":"code","99ca1f31":"code","42db4207":"code","08d6f6b1":"code","0b6c365b":"code","79ccf664":"code","1462abad":"code","3b5f8373":"code","9f542861":"code","9b58d1da":"code","55a36415":"code","52c2e5ae":"code","9a91fe1f":"code","28c05d70":"code","71269764":"code","1e70f8d4":"code","9d73aa4f":"code","5bf950cf":"code","f10ea216":"code","11bd3845":"code","8ed52499":"code","acb41684":"code","25e00145":"code","2b376d46":"code","5a7c6599":"code","2d11b76e":"code","8e3e6adb":"code","987a1c3c":"code","4150b333":"code","bbddc08e":"code","a3e58156":"code","b8992a62":"code","cfcf0c7d":"code","51e5b29a":"code","98e0304a":"code","db022a7a":"code","f137314d":"markdown","ba728295":"markdown","8a8dafd6":"markdown","d5793652":"markdown","77113ec8":"markdown","9933c6af":"markdown","932b54ab":"markdown","e83e44a9":"markdown","84e78cdc":"markdown","e44c469f":"markdown","c014d025":"markdown","62ee841c":"markdown","902acb0a":"markdown","54459ab0":"markdown","4104a9af":"markdown","d95c1bba":"markdown","2f003925":"markdown"},"source":{"3faf484b":"# Importing the libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport seaborn as sns\nimport sqlite3\nimport datetime as dt\n\n\n# Importing the dataset\nconn = sqlite3.connect('..\/input\/database.sqlite')","e7acd76f":"#Making a Connection for execution of SQL Commands\ncursor = conn.cursor()\ncursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")\n#list of all the tables in the schema \nprint(cursor.fetchall())","a7b3e4ba":"#making DataFrame from DataBase\ndf_league = pd.read_sql_query(\"select * from League;\", conn)\ndf_league.head()\ndf_player_attributes = pd.read_sql_query(\"select * from Player_Attributes;\", conn)\ndf_player = pd.read_sql_query(\"select * from Player;\", conn)\ndf_match = pd.read_sql_query(\"select * from Match;\", conn)\ndf_country = pd.read_sql_query(\"select * from Country;\", conn)\ndf_team_attributes = pd.read_sql_query(\"select * from Team_Attributes;\", conn)\ndf_team = pd.read_sql_query(\"select * from Team;\", conn)","a3aea6a1":"#inspecting the Player_Attributes table\ndf_player_attributes.head(1)","678ea01f":"#inspecting the Player table\ndf_player.head(1)","4295d17e":"#inspecting the Country table\ndf_country.head(1)","ff402acb":"#inspecting the Team_Attributes table\ndf_team_attributes.head(1)","a41473a8":"#inspecting the Team table\ndf_team.head(1)","76cdaf1e":"#inspecting the Match table\ndf_match.head(1)","eb70fa70":"df_match.isna().sum()\ndf_match = df_match[['country_id', 'league_id', 'season', 'stage', 'date', 'match_api_id', 'home_team_api_id', 'away_team_api_id', 'home_player_1',\n       'home_player_2', 'home_player_3', 'home_player_4', 'home_player_5','home_player_6', 'home_player_7', 'home_player_8', 'home_player_9',\n       'home_player_10', 'home_player_11', 'away_player_1', 'away_player_2','away_player_3', 'away_player_4', 'away_player_5', 'away_player_6',\n       'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10','away_player_11']]\ndf_match.isna().sum()\n","4489c7dc":"df_team_attributes = df_team_attributes[['id', 'team_api_id', 'date']]\ndf_team_attributes.isna().sum()","33dfb506":"df_team.isna().sum()\ndf_team = df_team[['id', 'team_api_id', 'team_long_name']]\ndf_team.isna().sum()","e7489608":"df_player.isna().sum()\ndf_player = df_player[['player_api_id', 'player_name' ]]","328987ab":"df_player_attributes = df_player_attributes[[ 'player_api_id', 'date', 'overall_rating','potential']]\ndf_player_attributes.isna().sum()","7f9e6762":"df_player_attributes = df_player_attributes.dropna()\ndf_player_attributes.isna().sum()","c860308f":"df_player.head(1)","c2e1d55c":"df_player_attributes.head(1) ","5c2290d6":"#Merging Two Tables\ndf_comb_player =  pd.merge(df_player, df_player_attributes, on=\"player_api_id\")\ndf_comb_player.head(1)","776be587":"#converting Object to DateTime so we can run the Date Queries using DateTime\ndf_comb_player['date'] = pd.to_datetime(df_comb_player['date'])","3b8e2569":"def top_N_players(df,year,n=10):\n    \"\"\"Function which return N Number of Top Player at end of Year\"\"\"\n    df_top = df[df['date'].dt.year == year]\n    df_top = df_top.sort_values('date').groupby('player_api_id').last() #Taking only last Instance\n    df_top = df_top.sort_values(['overall_rating','potential']).tail(n)\n    df_top = df_top.sort_values(['overall_rating','potential'],ascending=False)\n    return df_top","5b326f47":"df = top_N_players(df_comb_player,2016)[['player_name']]\ndf.reset_index(level=0, inplace=True)\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank1\"},inplace=True)\ndf_rank =df[:5]\ndf","f42a736b":"df = top_N_players(df_comb_player,2015)[['player_name']]\ndf.reset_index(level=0, inplace=True)\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank2\"},inplace=True)\ndf_rank = pd.merge(df_rank,df[:5],on=[\"player_api_id\",\"player_name\"],how='outer')\ndf","3e8c4a63":"\ndf = top_N_players(df_comb_player,2014)[['player_name']]\ndf.reset_index(level=0, inplace=True)\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank3\"},inplace=True)\ndf_rank = pd.merge(df_rank,df[:5],on=[\"player_api_id\",\"player_name\"],how='outer')\ndf","bd97aea2":"\ndf = top_N_players(df_comb_player,2013)[['player_name']]\ndf.reset_index(level=0, inplace=True)\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank4\"},inplace=True)\ndf_rank = pd.merge(df_rank,df[:5],on=[\"player_api_id\",\"player_name\"],how='outer')\ndf","f50d2dcb":"\ndf = top_N_players(df_comb_player,2012)[['player_name']]\ndf.reset_index(level=0, inplace=True)\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank5\"},inplace=True)\ndf_rank = pd.merge(df_rank,df[:5],on=[\"player_api_id\",\"player_name\"],how='outer')\ndf","1df55148":"\ndf = top_N_players(df_comb_player,2011)[['player_name']]\ndf.reset_index(level=0, inplace=True)\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank6\"},inplace=True)\ndf_rank = pd.merge(df_rank,df[:5],on=[\"player_api_id\",\"player_name\"],how='outer')\ndf","72f43374":"\ndf = top_N_players(df_comb_player,2010)[['player_name']]\ndf.reset_index(level=0, inplace=True)\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank7\"},inplace=True)\ndf_rank = pd.merge(df_rank,df[:5],on=[\"player_api_id\",\"player_name\"],how='outer')\ndf","d842d44c":"\ndf = top_N_players(df_comb_player,2009)[['player_name']]\ndf.reset_index(level=0, inplace=True)\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank8\"},inplace=True)\ndf_rank = pd.merge(df_rank,df[:5],on=[\"player_api_id\",\"player_name\"],how='outer')\ndf","bb905926":"\ndf = top_N_players(df_comb_player,2008)[['player_name']]\ndf.reset_index(level=0, inplace=True)\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank9\"},inplace=True)\ndf_rank = pd.merge(df_rank,df[:5],on=[\"player_api_id\",\"player_name\"],how='outer')\ndf","7fc80598":"\ndf = top_N_players(df_comb_player,2007)[['player_name']]\ndf.reset_index(level=0, inplace=True)\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank10\"},inplace=True)\ndf_rank = pd.merge(df_rank,df[:5],on=[\"player_api_id\",\"player_name\"],how='outer')\ndf","1ab1f1d3":"#Making a Line Plot of top 15 Players\ndf_rank.index = df_rank.player_name\n#Taking only the rank in consideration\ndf_rank = df_rank[[ 'rank1', 'rank2','rank3', 'rank4', 'rank5', 'rank6', 'rank7', 'rank8', 'rank9','rank10']]","70b996da":"df_rank = df_rank.replace(np.NaN,6) # Replacing the NaNs with 11 to better represent the graph\ndf_rank['sum_rank'] = df_rank[[ 'rank1', 'rank2','rank3', 'rank4', 'rank5', 'rank6', 'rank7', 'rank8', 'rank9','rank10']].sum(axis=1)","0b457522":"df_rank =  df_rank.sort_values('sum_rank').head(10) #sorting and taking only top 15 values \nthickness = df_rank.sum_rank\ndf_rank  = df_rank.drop('sum_rank',axis=1)\ndf1_transposed = df_rank.T","f70479c8":"df1_transposed","97b300f9":"df1_transposed.plot(kind='line',figsize=(15,15), marker='o')\nplt.gca().invert_yaxis() #inverting y axis\nplt.gca().invert_xaxis() #inverting y axis\nplt.yticks(range(1,6))\nind = np.arange(10) \nplt.xticks(ind, (\"2016\",\"2015\",\"2014\",\"2013\",\"2012\",\"2011\",\"2010\",\"2009\",\"2008\",\"2007\"))\nplt.show();","04e94d03":"df_comb_team = pd.merge(df_team, df_team_attributes, on=\"team_api_id\")\ndf_comb_team.head(1)","99ca1f31":"df_comb_team['date'] = pd.to_datetime(df_comb_team['date'])","42db4207":"df_comb_team_2015 = df_comb_team[df_comb_team['date'].dt.year == 2015]\ndf_comb_team_2015 = df_comb_team_2015.sort_values('date').groupby('team_api_id').last()","08d6f6b1":"df_comb_team_2015.head()","0b6c365b":"# making the fuctions for usage\n\ndef end_of_year_player(df_comb_player,year):\n    df_comb_player['date'] = pd.to_datetime(df_comb_player['date'])\n    df_comb_player = df_comb_player[df_comb_player['date'].dt.year == year]\n    df_comb_player = df_comb_player.sort_values('date').groupby('player_api_id').last()    \n    df_comb_player.reset_index(level=0, inplace=True)\n    return df_comb_player[['player_api_id','player_name', 'date', 'overall_rating', 'potential']]\n\n\ndef end_of_year_team(df_comb_team):\n    df_comb_team = df_comb_team.sort_values('date').groupby('team_api_id').last()\n    df_comb_team.reset_index(level=0, inplace=True)\n    return df_comb_team[['team_api_id','team_long_name','date']]\n\n\ndef team_to_player_home(df_match,year):\n    players_list_home = ['date','home_team_api_id','home_player_1', 'home_player_2', 'home_player_3',\n   'home_player_4', 'home_player_5', 'home_player_6', 'home_player_7',\n   'home_player_8', 'home_player_9', 'home_player_10', 'home_player_11']\n    df_match = df_match.loc[:,players_list_home]\n    df_match['date'] = pd.to_datetime(df_match['date'])\n    df_match = df_match[df_match['date'].dt.year == year]\n    df_match = df_match.drop(['date'],axis=1)\n    df_team_to_player=df_match.melt(['home_team_api_id']).sort_values('home_team_api_id')\n    df_team_to_player = df_team_to_player[[\"home_team_api_id\",\"value\"]]\n    df_team_to_player.rename( columns={\"value\":\"player_api_id\", \"home_team_api_id\":\"team_api_id\" },inplace=True)\n    df_team_to_player = df_team_to_player.drop_duplicates()\n    df_team_to_player = df_team_to_player.dropna()\n    return df_team_to_player\n\ndef team_to_player_away(df_match,year):\n    players_list_away = [ 'date','away_team_api_id','away_player_1', 'away_player_2','away_player_3', 'away_player_4', 'away_player_5', 'away_player_6',\n       'away_player_7', 'away_player_8', 'away_player_9', 'away_player_10','away_player_11']\n    df_match = df_match.loc[:,players_list_away]\n    df_match['date'] = pd.to_datetime(df_match['date'])\n    df_match = df_match[df_match['date'].dt.year == year]\n    df_match = df_match.drop(['date'],axis=1)\n    df_team_to_player=df_match.melt(['away_team_api_id']).sort_values('away_team_api_id')\n    df_team_to_player = df_team_to_player[[\"away_team_api_id\",\"value\"]]\n    df_team_to_player.rename( columns={\"value\":\"player_api_id\", \"away_team_api_id\":\"team_api_id\" },inplace=True)\n    df_team_to_player = df_team_to_player.drop_duplicates()\n    df_team_to_player = df_team_to_player.dropna()\n    return df_team_to_player\n\ndef team_to_player(df_match,year):    \n    df_2 = team_to_player_home(df_match,year)\n    df_1 = team_to_player_away(df_match,year)\n    df_combined = [df_1,df_2]\n    result = pd.concat(df_combined)\n    result = result.drop_duplicates()\n    return result\n    \ndef top_N_team(df_comb_team,df_comb_player,df_match,season=\"2015\/2016\",n=5):\n    year = int(season.split(\"\/\")[0])\n    df_end_of_year_team = end_of_year_team(df_comb_team)\n    df_end_of_year_player = end_of_year_player(df_comb_player,year)\n    df_team_to_player = team_to_player(df_match,year)\n    df_end_of_year_player = pd.merge(df_end_of_year_player, df_team_to_player, on=\"player_api_id\")\n    df_comb_player_team_group= df_end_of_year_player.sort_values('overall_rating').groupby('team_api_id').head(16)\n    df_comb_player_team_group = df_comb_player_team_group.sort_values('overall_rating').groupby('team_api_id').sum()\n    df_top = pd.merge(df_comb_player_team_group,df_end_of_year_team,on=\"team_api_id\")\n    df_top = df_top[[\"team_api_id\",\"overall_rating\",\"team_long_name\"]]\n    df_top = df_top.sort_values(\"overall_rating\")\n    df_top = df_top[-n:]\n    df_top = df_top.sort_values(\"overall_rating\",ascending=False)\n    return df_top","79ccf664":"df = top_N_team(df_comb_team,df_comb_player,df_match,season=\"2015\/2016\")\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank1\"},inplace=True)\ndf_rank = df\ndf","1462abad":"df = top_N_team(df_comb_team,df_comb_player,df_match,season=\"2014\/2015\")\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank2\"},inplace=True)\ndf_rank = pd.merge(df_rank,df,on=[\"team_api_id\",\"team_long_name\"],how='outer')\ndf","3b5f8373":"df = top_N_team(df_comb_team,df_comb_player,df_match,season=\"2013\/2014\")\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank3\"},inplace=True)\ndf_rank = pd.merge(df_rank,df,on=[\"team_api_id\",\"team_long_name\"],how='outer')\ndf","9f542861":"df = top_N_team(df_comb_team,df_comb_player,df_match,season=\"2012\/2013\")\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank4\"},inplace=True)\ndf_rank = pd.merge(df_rank,df,on=[\"team_api_id\",\"team_long_name\"],how='outer')\ndf","9b58d1da":"df = top_N_team(df_comb_team,df_comb_player,df_match,season=\"2011\/2012\")\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank5\"},inplace=True)\ndf_rank = pd.merge(df_rank,df,on=[\"team_api_id\",\"team_long_name\"],how='outer')\ndf","55a36415":"df = top_N_team(df_comb_team,df_comb_player,df_match,season=\"2010\/2011\")\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank6\"},inplace=True)\ndf_rank = pd.merge(df_rank,df,on=[\"team_api_id\",\"team_long_name\"],how='outer')\ndf","52c2e5ae":"df = top_N_team(df_comb_team,df_comb_player,df_match,season=\"2009\/2010\")\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank7\"},inplace=True)\ndf_rank = pd.merge(df_rank,df,on=[\"team_api_id\",\"team_long_name\"],how='outer')\ndf","9a91fe1f":"df = top_N_team(df_comb_team,df_comb_player,df_match,season=\"2008\/2009\")\ndf.index = range(1,len(df.index)+1)\ndf.reset_index(level=0, inplace=True)\ndf.rename( columns={\"index\":\"rank8\"},inplace=True)\ndf_rank = pd.merge(df_rank,df,on=[\"team_api_id\",\"team_long_name\"],how='outer')\ndf","28c05d70":"df_rank = df_rank.replace(np.NaN,6)\ndf_rank.index = df_rank.team_long_name\ndf_rank = df_rank[[ 'rank1', 'rank2',\n       'rank3', 'rank4', 'rank5', 'rank6', 'rank7', 'rank8']]","71269764":"#df.pivot(index = \"team_long_name\")\ndf1_transposed = df_rank.T","1e70f8d4":"df1_transposed","9d73aa4f":"df1_transposed.plot(kind='line',figsize=(15,15), marker='o')\nplt.gca().invert_yaxis()\nplt.gca().invert_xaxis()\nplt.yticks(range(1,6))\nind = np.arange(8) \nplt.xticks(ind, (\"2016\",\"2015\",\"2014\",\"2013\",\"2012\",\"2011\",\"2010\",\"2009\"))\nplt.show();\n","5bf950cf":"def league_to_team(df_match,year):\n    df_match = df_match.loc[:,[\"date\",\"league_id\",\"home_team_api_id\",\"away_team_api_id\"]]\n    df_match['date'] = pd.to_datetime(df_match['date'])\n    df_match = df_match[df_match['date'].dt.year == year]\n    df_match = df_match.drop('date',axis=1)\n    df_match=df_match.melt(['league_id'])\n    df_match = df_match.drop('variable',axis=1)\n    df_match.rename( columns={\"value\":\"team_api_id\" },inplace=True)\n    df_match = df_match.drop_duplicates()\n    return df_match\n","f10ea216":"def top_leagues(df_comb_team,df_comb_player,df_match,season=\"2015\/2016\"):\n    year = int(season.split(\"\/\")[0])\n    df_end_of_year_team = end_of_year_team(df_comb_team)\n    df_end_of_year_player = end_of_year_player(df_comb_player,year)\n    df_team_to_player = team_to_player(df_match,year)\n    df_end_of_year_player = pd.merge(df_end_of_year_player, df_team_to_player, on=\"player_api_id\")\n    df_comb_player_team_group= df_end_of_year_player.sort_values('overall_rating').groupby('team_api_id').head(16)\n    df_comb_player_team_group = df_comb_player_team_group.sort_values('overall_rating').groupby('team_api_id').sum()\n    df_top = pd.merge(df_comb_player_team_group,df_end_of_year_team,on=\"team_api_id\")\n    df_top = df_top[[\"team_api_id\",\"overall_rating\",\"team_long_name\"]]\n    df_top = df_top.sort_values(\"overall_rating\")\n    df_top = df_top.sort_values(\"overall_rating\",ascending=False)\n    df_league_to_team = league_to_team(df_match,year)\n    df_top = pd.merge(df_league_to_team,df_top,on=\"team_api_id\")\n    return df_top","11bd3845":"df = top_leagues(df_comb_team,df_comb_player,df_match,season=\"2015\/2016\")\ndf = df.groupby(\"league_id\").sum()\ndf.reset_index(level=0, inplace=True)\ndf_league.rename( columns={\"id\":\"league_id\" },inplace=True)\ndf = pd.merge(df,df_league,on=\"league_id\")\ndf.sort_values(\"overall_rating\")","8ed52499":"df = top_leagues(df_comb_team,df_comb_player,df_match,season=\"2015\/2016\")\ndf = df.groupby(\"league_id\").median()\ndf.reset_index(level=0, inplace=True)\ndf = pd.merge(df,df_league,on=\"league_id\")\ndf_league.rename( columns={\"id\":\"league_id\" },inplace=True)\ndf.sort_values(\"overall_rating\")","acb41684":"df = top_leagues(df_comb_team,df_comb_player,df_match,season=\"2015\/2016\")\ndf = df.groupby(\"league_id\").std()\ndf.reset_index(level=0, inplace=True)\ndf = pd.merge(df,df_league,on=\"league_id\")\ndf_league.rename( columns={\"id\":\"league_id\" },inplace=True)\ndf.sort_values(\"overall_rating\")","25e00145":"import seaborn as sns","2b376d46":"def box_plot_leagues(df_comb_team,df_comb_player,df_match,season=\"2014\/2015\"):\n    df = top_leagues(df_comb_team,df_comb_player,df_match,season=season)\n    df = pd.merge(df,df_league,on=\"league_id\")\n    df_league.rename( columns={\"id\":\"league_id\" },inplace=True)\n    df.sort_values(\"overall_rating\")\n    plt.figure(figsize=(10,10))\n    my_palette = sns.color_palette(\"Paired\", 11)\n    ax = sns.boxplot(x=\"overall_rating\", y=\"name\", data=df,palette= my_palette)\n    #ax = sns.swarmplot(x=\"overall_rating\", y=\"name\", data=df, color ='aqua',size=4)\n    #sns.boxplot(data=df,x='overall_rating',y='name')\n    plt.title(season)\n    plt.show()","5a7c6599":"for i in range(2008,2016):\n    season = str(i)+\"\/\"+str(i+1)\n    box_plot_leagues(df_comb_team,df_comb_player,df_match,season)","2d11b76e":"import random\ndef box_plot_leagues_through_years(df_comb_team,df_comb_player,df_match,country):\n    df_plot = pd.DataFrame()\n    for i in range(2008,2016):\n        season = str(i)+\"\/\"+str(i+1)\n        df = top_leagues(df_comb_team,df_comb_player,df_match,season)\n        df = pd.merge(df,df_league,on=\"league_id\")\n        df = df[df.name.str.contains(country)]\n        df[\"season\"] = str(season)\n        df_plot = df_plot.append(df, ignore_index=True)\n    plt.figure(figsize=(10,10))\n    my_palette = [(random.random(),random.random(),random.random())]\n    ax = sns.boxplot(x=\"overall_rating\", y=\"season\", data=df_plot,palette= my_palette) \n    plt.title(country)\n    plt.show()","8e3e6adb":"box_plot_leagues_through_years(df_comb_team,df_comb_player,df_match,\"England\")","987a1c3c":"box_plot_leagues_through_years(df_comb_team,df_comb_player,df_match,\"Germany\")","4150b333":"box_plot_leagues_through_years(df_comb_team,df_comb_player,df_match,\"France\")","bbddc08e":"box_plot_leagues_through_years(df_comb_team,df_comb_player,df_match,\"Italy\")","a3e58156":"box_plot_leagues_through_years(df_comb_team,df_comb_player,df_match,\"Poland\")","b8992a62":"box_plot_leagues_through_years(df_comb_team,df_comb_player,df_match,\"Spain\")","cfcf0c7d":"box_plot_leagues_through_years(df_comb_team,df_comb_player,df_match,\"Belgium\")","51e5b29a":"box_plot_leagues_through_years(df_comb_team,df_comb_player,df_match,\"Scotland\")","98e0304a":"box_plot_leagues_through_years(df_comb_team,df_comb_player,df_match,\"Portugal\")","db022a7a":"box_plot_leagues_through_years(df_comb_team,df_comb_player,df_match,\"Netherlands\")","f137314d":"After getting all the ranks of the players. Our Next task is to visualize the players year by year performance in a line plot. \n\nTo make a line plot we will need to change the DataFrame according to the format accepted by df.plot() function.\nWe will only make Line Plot of top 5 Players as the graph was getting a lot of players, which was making plot very crowded.","ba728295":"# The ultimate Soccer database for data analysis and machine learning\n\nWhat is Given:\n\n   - 25,000 matches\n   -  +10,000 players\n   -  11 European Countries with their lead championship\n   -  Seasons 2008 to 2016\n   -  Players and Teams' attributes* sourced from EA Sports' FIFA video game series, including the weekly updates\n   -  Team line up with squad formation (X, Y coordinates)\n   -  Betting odds from up to 10 providers\n   -  Detailed match events (goal types, possession, corner, cross, fouls, cards etc...) for +10,000 matches\n  \n\n\n****\n# My goal\n\n- Finding Top Players from 2008 to 2016\n- Finding Top Teams from 2008 to 2016\n- Comparing Leagues the Leagues with Each Other and Itself.\n","8a8dafd6":"# Cleaning Data\n## Checking NULL Data and taking filtering the fields that are being used \n\n","d5793652":"As we will rating the player on the basis of overall_rating. We will be dropping all the NULLs present in the overall_rating column from the DataFrame.","77113ec8":"## Combining DataFrames to Have Player Name and Player attributes in a Single Data Frame","9933c6af":"# Comparing Different Leagues\n\nOur Last Task is to compare the different leagues with each other. To perform this analysis we used group by league_id and merging them with league table to get the names of the league.\n\n### Our First analysis was to Year on Year Comparision of the leagues with each other.","932b54ab":"## Creating all the DataFrames from tables present in the DataBase","e83e44a9":"After getting all the ranks of the teams. Our Next task is to visualize the players year by year performance in a line plot. \n\nTo make a line plot we will need to change the DataFrame according to the format accepted by df.plot() function.","84e78cdc":"# Finding Top Players\n\nThe First Task was to find the top 10(n) players at the end of the year. \nIn the given dataset we are given mutiple attributes column for the same player with a different Dates. To keep things simple we will use only the Last Updated Attribute of the player for that year.\n\n### Steps for finding the Top 10 Player\n    1) Filtering the players by year \n    2) Taking the last updated intance of the player attributes of that year\n    3) Sorting the Players by overall_rating column, if overall_rating for any two player is same we will consider the potential column.\n    4) Returning the top 10 values from the sorted DataFrame.","e44c469f":"\n\nPlease upvote this kernel. This is still on Progress. Your comments on how we can improve this kernel is welcome. Thanks.\n","c014d025":"### Top 10 Players from 2008-2016 on the Basis of given Data","62ee841c":"From the E-R Diagram above we can see that **player_api_id** is not directly realted with the **team_api_id**.\nTo relate them together we will use the **Match** Table .\nAs, there are a total of 22 mapping from **Player->Team** so I will drop them later. ","902acb0a":"### Our Second analysis was to Year on Year Comparision of the leagues with itself. To check how different leagues are perfoming.","54459ab0":" # Database Schema\n \n![database-diagram.jpeg](https:\/\/raw.githubusercontent.com\/abhiksark\/UD-ND\/master\/football_analysis\/database-diagram.jpeg)\n\nThis is a complex DataBase Having Many Columns. To crearly Understand the database\nI created the above DataBase Schema E-R Diagram using [Schemacrawler](https:\/\/www.schemacrawler.com\/). It's a free open source tool for making E-R Diagrams from the Database. You can visit their github page for more Information.\n\nE-R Diagram gives a indepth look into the Database and It's Structure.","4104a9af":"# Loading packages and data\n****","d95c1bba":"Combining Teams with Team Attributes to get the name of the team","2f003925":"# Finding Top Teams \n\nThe Second Task was to find the top 5(n) teams at the end of the year. \nAs Team is not having a direct rating column. We will take the top 15 players of the team and sum all the overall rating of the players to have a total rating of the team.\n\n### Steps for finding the Top 5 Team Per Year\n    1) Filtering the players by year \n    2) Taking the last updated intance of the player attributes of that year\n    3) Making a Table to map team_api_id to player_api_id\n    4) Merging the player_api_id with team_api_id\n    5) Grouping by team_api_id and summing the top 15 players of that team.\n    6) Sorting the grouped values and returning the top 5 teams by total rating."}}