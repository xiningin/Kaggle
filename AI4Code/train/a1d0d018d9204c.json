{"cell_type":{"493ab0bd":"code","08f7532b":"code","11a5aca4":"code","65c86cd3":"code","02499db7":"code","5e73f12a":"code","7768ad0b":"code","6c4a194a":"code","8f805f50":"code","ded3116e":"code","2cfe5696":"code","1060d62e":"code","ad741342":"code","5be230e0":"code","f7df5149":"code","c6277f9b":"code","261b61d8":"code","02b19322":"code","5ee88799":"code","36fe1dd5":"code","7071fb64":"code","659f00e5":"code","aee47b21":"code","b8ca4cf5":"code","ea7bf5d2":"code","3b60fca9":"code","b047da30":"code","6dea7141":"code","5d290e4d":"code","b4a2ff58":"markdown","c60568ee":"markdown","75873bbe":"markdown","00b5b0fa":"markdown","323c0957":"markdown","a8621709":"markdown","e12135be":"markdown","961ea30a":"markdown","c80343a3":"markdown","05d387b9":"markdown","377321bc":"markdown","9dc0e9bd":"markdown","275f40eb":"markdown","10426da8":"markdown","383f3a8e":"markdown","1587f08a":"markdown","1df42698":"markdown","17d1af6a":"markdown","fe3de356":"markdown","e6a766ca":"markdown","3e17c6b6":"markdown","cb8e23d8":"markdown","84dcfd87":"markdown","c1ece5cc":"markdown","7785fc11":"markdown","5715d722":"markdown","a4392921":"markdown","a1cbb552":"markdown","2efa6a41":"markdown","a79607c0":"markdown"},"source":{"493ab0bd":"import pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandasql as ps #this is what we'll be using to query our data using sql\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","08f7532b":"\ncovid_vacs = pd.read_csv (r'\/kaggle\/input\/covid-world-vaccination-progress\/country_vaccinations.csv')\n\n","11a5aca4":"ps.sqldf(\n    \"\"\"\n    SELECT \n        * \n    FROM covid_vacs\n    \"\"\")","65c86cd3":"\nquery = \"\"\"\n    select \n        country,\n        date\n    from covid_vacs\n\"\"\"\n\nps.sqldf(query)","02499db7":"query = \"\"\"\n    select * \n    from covid_vacs\n    WHERE country = \"United States\"\n\"\"\"\nps.sqldf(query)","5e73f12a":"query = \"\"\"\n    select * \n    from covid_vacs\n    WHERE country = \"United States\"\n    AND date >= \"2021-03-01\"\n\"\"\"\nps.sqldf(query)","7768ad0b":"query = \"\"\"\n    select * \n    from covid_vacs\n    WHERE country = \"United States\"\n    OR country = \"United Kingdom\"\n\"\"\"\nps.sqldf(query)","6c4a194a":"query = \"\"\"\n    select * \n    from covid_vacs\n    where country in (\"United States\",\"United Kingdom\")\n\"\"\"\nps.sqldf(query)","8f805f50":"query = \"\"\"\n    select * \n    from covid_vacs\n    where country in (\"United States\",\"United Kingdom\")\n    AND date >= \"2021-03-01\"\n\"\"\"\nps.sqldf(query)","ded3116e":"query = \"\"\"\n    select * \n    from covid_vacs\n    where country <> \"United States\"\n\"\"\"\n\nps.sqldf(query)","2cfe5696":"query = \"\"\"\n    select * \n    from covid_vacs\n    where country NOT IN (\"United States\")\n\"\"\"\n\nps.sqldf(query)","1060d62e":"query = \"\"\"\n    select * \n    from covid_vacs\n    where country in (\"united states\")\n\"\"\"\nps.sqldf(query)","ad741342":"query = \"\"\"\n    select \n        *\n    from covid_vacs\n    ORDER BY date desc\n    \n\"\"\"\nps.sqldf(query)","5be230e0":"query = \"\"\"\n    select \n        country,\n        date,\n        total_vaccinations\n    from covid_vacs\n    WHERE date = \"2021-03-01\"\n    ORDER BY total_vaccinations desc\n    \n\"\"\"\nps.sqldf(query)","f7df5149":"query = \"\"\"\n    select \n        country,\n        date,\n        total_vaccinations\n    from covid_vacs\n    WHERE date = \"2021-03-01\"\n    ORDER BY total_vaccinations desc\n    LIMIT 5\n    \n\"\"\"\nps.sqldf(query)\n","c6277f9b":"query = \"\"\"\n    select \n        country,\n        date,\n        total_vaccinations\n    from covid_vacs\n    WHERE date = \"2021-03-01\"\n    ORDER BY total_vaccinations asc\n    LIMIT 5\n    \n\"\"\"\nps.sqldf(query)\n","261b61d8":"query = \"\"\"\n    select \n        country,\n        date,\n        total_vaccinations\n    from covid_vacs\n    WHERE date = \"2021-03-01\"\n    AND total_vaccinations >= 1\n    ORDER BY total_vaccinations asc\n    LIMIT 5\n    \n\"\"\"\nps.sqldf(query)","02b19322":"query = \"\"\"\n    select \n        COUNT(*) as n_rows\n    from covid_vacs\n    \n\"\"\"\nps.sqldf(query)","5ee88799":"# COUNTING DISTINCT COUNTRIES\nquery = \"\"\"\n    select \n        COUNT(DISTINCT country) as n_distinct_countries\n    from covid_vacs\n    \n\"\"\"\nps.sqldf(query)","36fe1dd5":"# COUNTING DISTINCT DATES\nquery = \"\"\"\n    select \n        COUNT(DISTINCT date) as n_distinct_dates\n    from covid_vacs\n    \n\"\"\"\nps.sqldf(query)","7071fb64":"query = \"\"\"\n    select \n        COUNT(DISTINCT date) as n_distinct_dates,\n        COUNT(DISTINCT country) as n_distinct_countries\n\n    from covid_vacs\n    \n\"\"\"\nps.sqldf(query)","659f00e5":"query = \"\"\"\n    select \n        COUNT(DISTINCT date) as n_distinct_dates,\n        COUNT(DISTINCT country) as n_distinct_countries\n\n    from covid_vacs\n    where country IN (\"United States\",\"United Kingdom\")\n    \n\"\"\"\nps.sqldf(query)","aee47b21":"query = \"\"\"\n    select \n        SUM(total_vaccinations)\n\n    from covid_vacs\n    where date = \"2021-03-01\"\n    \n\"\"\"\nps.sqldf(query)","b8ca4cf5":"query = \"\"\"\n    select \n        SUM(total_vaccinations)\n\n    from covid_vacs\n    where date = \"2021-03-01\"\n    AND country = \"United States\"\n    \n\"\"\"\nps.sqldf(query)","ea7bf5d2":"query = \"\"\"\n    select \n        SUM(daily_vaccinations)\n\n    from covid_vacs\n    where date >= \"2021-03-01\" AND date < \"2021-03-10\"\n    AND country = \"United States\"\n    \n\"\"\"\nps.sqldf(query)","3b60fca9":"query = \"\"\"\n    select \n        ROUND(AVG(daily_vaccinations)) as avg_daily_vacs\n\n    from covid_vacs\n    where date >= \"2021-03-01\" AND date < \"2021-03-10\"\n    AND country = \"United States\"\n    \n\"\"\"\nps.sqldf(query)","b047da30":"query = \"\"\"\n    select \n        SUM(daily_vaccinations) as n_vaccines,\n        ROUND(AVG(daily_vaccinations)) as avg_daily_vacs\n\n    from covid_vacs\n    where date >= \"2021-03-01\" AND date < \"2021-03-10\"\n    AND country = \"United States\"\n    \n\"\"\"\nps.sqldf(query)","6dea7141":"query = \"\"\"\n    select \n        SUM(daily_vaccinations) as n_vaccines,\n        ROUND(AVG(daily_vaccinations)) as avg_daily_vacs\n\n    from covid_vacs\n    where date >= \"2021-03-01\" AND date < \"2021-03-10\"\n    AND country = \"United Kingdom\"\n    \n\"\"\"\nps.sqldf(query)","5d290e4d":"query = \"\"\"\n    select\n        country,\n        SUM(daily_vaccinations) as n_vaccines,\n        ROUND(AVG(daily_vaccinations)) as avg_daily_vacs\n\n    from covid_vacs\n    where date >= \"2021-03-01\" AND date < \"2021-03-10\"\n    AND country IN (\"United States\",\"United Kingdom\")\n    \n    GROUP BY country\n    \n\"\"\"\nps.sqldf(query)","b4a2ff58":"# SET UP \n* We can ignore this for the moment.\n* This is solely how we set up our python session by importing necessary tools or libraries that will allow us to work with the data.","c60568ee":"# AGGREGATIONS\n\nNow that we've covered SELECT, FROM and some other clauses that allows us to decide what data we want to see, se can mvoe on to other functionality that can help us summarize our data and answer questions which involve mathemtical functions.\n","75873bbe":"Note that the conditions you create must follow the format of the columns.\n\nIf a date is given in YYYY-MM-DD, you have to write the condition in that way. This happens with strings as well but to a greater degree. If I write United States in lower case, the query will yield no results.","00b5b0fa":"**COUNT DISTINCT**\n\nNow let's saw we wanted to count unique values within a certain column. To do this, we indicate the name of the column","323c0957":"This same query can be achieved with less code by reformatting the WHERE clause. In this case, we are telling the where clauses to look for any rows WHERE we find the United Kingdom or the United States within the country column.","a8621709":"If we applied a country filter to this same query, our results would automatically change. Let's see what would happen if we indicate we want to count the number of distinct dates for the US and the UK.","e12135be":"**WHERE**\n\n* If we want to look at only data from the US, we use the WHERE clause to filter the data.\n* In this case we filter only using one condition which is that the country is (or equals)  \"United States\"\n* In using the WHERE statement, we are filtering what **ROWS** we see. Remeber that to filter or select what \"COLUMNS\" we want to see, we use the SELECT statement.","961ea30a":"ORDER BY\n\nOrder by helps to sort the data that you query. This functionality needs two different components to do it's job\n    * select the **columns** you want to order by.\n    * select whether you want to sort in **ascending or descending** order.\n    \nIn this first example we'll order the data by date. In this case, we want to see the latest dates first so we use \"ORDER BY date desc\". We use descending becasue we want the largest values to be higher up. When sorting by dates, whatever is \"later\" in time is always larger.","c80343a3":"# OUR FIRST QUERY\n*     Now that we have the data imported into this session, we can start querying.\n*     Lets start with the basic query. If we want to query the whole table we want to use two different statements.\n\n    *         SELECT will indicate which columns we want to show.\n    *         FROM will indicate which tabel we want to pull from.\n    *         These two statements are always required to query in SQL.\n    \n    \n*     When we add * in the SELECT statement, it indicated that we want to query ALL columns.","05d387b9":"We can join both statement into one query to see both the number of distinct countries and dates in one same result. Notice how we ALWAYS have the comma seperating each column whether it already existed in the dataset or not.","377321bc":"# JUMPING INTO OTHER CLAUSES\n\nNow that we've covered SELECT and FROM, we'll jump into other clauses or statements that will help you navigate the data.\n\n","9dc0e9bd":"We can combine all of the conditions we used above into one query to only show rows for the UK and the US with dates in March.","275f40eb":"With this query, we have learned that the latest date available for these countries is around the 15th of March. Now let's say we wanted to see which countries had the highest number of vaccinations on March 1st.","10426da8":"**WHERE WITH TWO CONDITIONS [OR]**\n\n* We might want to filter the data to show rows \n* This will yield a result in which BOTH conditions are met.","383f3a8e":"Again, we can join several aggregation queries together to calculate several metrics in a single query","1587f08a":"According to the data, around 224M vaccintions had been administered by March 1st Globally. We can continue to filter using different attributes to count the number of vaccinations administered in the US as well","1df42698":"# IMPORTING THE DATA\n*     This is how we make sure we can read the data stored in the csv.\n*     Pandas helps in this aspect because it has functionality that helps read csvs and other data files.\n*     In today's sessions we'll be looking at COVID vaccination data\/\n","17d1af6a":"**SUM**\n\nNow let's review other more familiar mathemtical functions. The easiest one to start off with is the concept of addition. In this case we use SUM as an aggregation function to some up the values in a specific column.\n\nLet's revisit our query that was meant to look at the number of vaccinations that have been supplied in different countries on March 1st. Let's assume a follow up question to this was: \"How many vaccinations had  been administered in the world on March 1st?\"\n\nTo do this, we have to add up the \"total_vaccination\" column filtering out March 1st as the only date we want to see.","fe3de356":"If we wanted to see the the 5 countries who have vaccinated the least, we would have to change the order by to ascending","e6a766ca":"# Hi there,\n\nIn this intro lab we'll be exploring the what can be achieved with SQL.\n\nAs Nicholas mentioned in Monday's meeting, learning SQL is fundamental in kicking off a career in all things data and analytics.\n\nWhat you should take away from today's lab is an initial feel for how to manipulate and wrangle data. Languages and syntax will always vary, but SQL is a good starting point to understand the mechanics of pulling, processing, analyzing data.\n\n\n______________","3e17c6b6":"**LIMIT**\n\nThe LIMIT clause allows us to limit the number of rows we want to see.\nLet's take the last query we made as an example. If we want to see only the top 5 countries in terms of number of vaccinations on March 1st, we would do that by stating the we want to set the limit to 5.","cb8e23d8":"We can also have cases in which we want to exclude some rows. If we wanted to llook at all countries BUT the united states we could use one of two methods to do this.","84dcfd87":"# SELECTING SPECIFIC COLUMNS\n*     Let's imagine we only wanted to see specific columns.\n*     In this case, we indicate which columns we'd like to query right under the SELECT statement.\n*     Column names HAVE to be passed as a comma seperated list, where the last item in the list does not have a comma\n","c1ece5cc":"**WHERE WITH TWO CONDITIONS [AND]**\n\n* We might want to filter the data to show only the US as the country and all dates in March, to do this, we add a second where cluase by using \"AND\".\n* This will yield a result in which BOTH conditions are met.","7785fc11":"**COUNT**\n\nCount refers simply to counting the number of rows in a dataset. To use count or any other aggregation function, we add it as if it were a column name within our SELECT statement.\n\nTIP: You can then add a name to your column by stating \"as <variable_name>\" at the end of the statement.\n\nLet's start off by counting the number of rows in our dataset.","5715d722":"By March 1st, it's clear some countries had not kicked off their vaccination campaigns. Let's look at countries which had at least one vaccination.","a4392921":"**AVERAGE**\n\nLet's assume now that we are no interested so much in the total number of vaccinations administered over a specific period of time, but that rather, we waant to understand the average daily vaccinations for the US over the same period of time.\n\nIn this case, we would now use the AVG aggregation function in order to make this calculation. In this example, I have also applied the ROUND function in order to end up with a whole number instead of something with decimals.","a1cbb552":"Now, we know that this total vaccination colum gives us the cumulative number of vaccinations that have been administered to date for any country. If we wanted to use a different column in order to calculate the number of vaccinations administered over a specific period, we could also use the SUM function. However, in this case we'll use the daily vaccination column.\n\nIn this case, we'll count the number of vaccinations administered in the first 10 days of March.","2efa6a41":"Now let's see the same results for the UK","a79607c0":"**GROUPING**\n\nLet's take a look at the last query we ran. Let's assume that we wanted to trasform this into a query that now had 3 columns. \n1. country name\n2. number of vaccines administered during the first 10 days of March\n3. average number of vaccines administered daily during the first 10 days of March\n\nNow, we may be inclined to just add the UK into the WHERE clause, but this would give us the summarized values for both countries together.\n\nWhat we want to do instead is to SUMMARIZE by country.\n\nTo do this, we use grouping. In this case, the only thing we will need to do is \n1. add the country name as a column we want to see under the select statement and \n2. add a GROUP BY statement at the end of the query indicating we would like to view the aggregations by country."}}