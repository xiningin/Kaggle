{"cell_type":{"e4d2ef7f":"code","929e2c6f":"code","47b0ca88":"code","4a048651":"code","70305963":"code","f35a2411":"code","81455cd0":"code","91ce9e92":"code","63a3c75c":"code","4049f6bf":"code","1ccb69a4":"code","e3035127":"code","3b42224a":"code","73012db0":"code","dd82a567":"code","fbe49846":"code","5b513400":"code","64714359":"code","d9739dba":"code","ac2241b1":"code","2af2c1a8":"code","9a0c3c10":"code","dbb49478":"code","770bb769":"markdown","82f2fc5e":"markdown","60dba599":"markdown","57ad820f":"markdown","5dd594e5":"markdown","9bf423fb":"markdown","0fe183a2":"markdown","78fbd7c8":"markdown","fca86db8":"markdown","ee34156b":"markdown","0b66cf76":"markdown","72eab745":"markdown","6db7b49d":"markdown","62275fbc":"markdown","ea33e643":"markdown"},"source":{"e4d2ef7f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","929e2c6f":"%matplotlib inline\nimport pandas_profiling as pds\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt","47b0ca88":"#Load  and reading Credit Default datasets\ncred_df = pd.read_csv(\"..\/input\/attachment_default.csv\")\n","4a048651":"cred_df.head()\ndetail_report= pds.ProfileReport(cred_df)\ndetail_report.to_file(\"default_card.html\")\n","70305963":"cred_df.info()\nsns.heatmap(cred_df.corr(),annot=True,cmap= \"YlGnBu\")","f35a2411":"# Relation between balance and default\nsns.boxplot(x='default', y='balance', data=cred_df,palette=\"Set2\")\n#sns.catplot(x='balance', y='income',col='student',data=cred_df, kind= \"box\")\nplt.show()","81455cd0":"# Relation between income and default\nsns.boxplot(x='default', y='income', data=cred_df)\nplt.show()","91ce9e92":"# Relation between balance and income and whether they have defaulted or not \n\nsns.lmplot(x='balance', y='income', hue = 'default', data=cred_df, col='student',aspect=1.5, fit_reg = False)\n\nsns.catplot(x='default', y='income', data=cred_df,hue='default',col='student', kind='boxen')\n\n\n#plt.figure(figsize=(6,8))\n#g=sns.FacetGrid(cred_df, row='balance',col='income')\n#g=g.map(plt.scatter,\"default\")\n\nplt.show()","63a3c75c":"# Relation between Student and default value representation\n\npd.crosstab(cred_df['default'], cred_df['student'], rownames=['Default'], colnames=['Student'])","4049f6bf":"# Convert Categorical to Numerical for default column\n\ndefault_dummies = pd.get_dummies(cred_df.default, prefix='default', drop_first= True)\ncred_df = pd.concat([cred_df, default_dummies], axis=1)\n\ncred_df.head()","1ccb69a4":"# Convert Categorical to Numerical for student column\n\nstudent_dummies = pd.get_dummies(cred_df.student, prefix='student', drop_first= True)\ncred_df = pd.concat([cred_df, student_dummies], axis=1)\ncred_df.head()","e3035127":"# Removing repeat columns\ncred_df.drop(['default', 'student'], axis=1, inplace=True)","3b42224a":"# Try simple linear regression on the data between balance and default\n\nsns.lmplot(x='balance', y='default_Yes', data=cred_df, aspect=1.5, fit_reg = True)","73012db0":"# Building Linear Regression Model and determining the coefficients\nfrom sklearn.linear_model import LinearRegression\n\nx= cred_df[['balance']]\ny= cred_df[['default_Yes']]\n\nlinreg= LinearRegression()\nlinreg.fit(x,y)\nprint(linreg.coef_)\nprint(linreg.intercept_)","dd82a567":"# Building the Logistic Regression Model\n\nfrom sklearn.linear_model import LogisticRegression\n\nlogreg = LogisticRegression(C=1e42)                            # Set Large C value for low regularization\nlogreg.fit(x, y)\n\nprint(logreg.coef_)                                            # Coefficients for Logistic Regression\nprint(logreg.intercept_)\n\ny_pred = logreg.predict_proba(x) \nplt.scatter(x.values, y_pred[:,0])                             # Visualization\nplt.scatter(x.values, y)\nplt.show()","fbe49846":"cred_df.head()","5b513400":"# splitting the features and labels\n\nX= cred_df.drop('default_Yes', axis=1)\ny = cred_df['default_Yes']\n\n# splitting the data into train and test with 70:30 ratio\nfrom sklearn.cross_validation import train_test_split\nx_train, x_test, y_train,y_test= train_test_split(X,y, random_state= 123,test_size=0.30)\n\n# calling logistic regression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import metrics\nlogreg = LogisticRegression(C=.1)","64714359":"# fitting the model with x and y attributes of train data\n# in this it is goin to learn the pattern\nlogreg.fit(x_train,y_train)","d9739dba":"# now applying our learnt model on test and also on train data\ny_pred_test = logreg.predict(x_test)\ny_pred_train = logreg.predict(x_train)","ac2241b1":"# comparing the metrics of predicted lebel and real label of test data\nmetrics.accuracy_score(y_test, y_pred_test)","2af2c1a8":"# comparing the metrics of predicted lebel and real label of test data\nmetrics.accuracy_score(y_train, y_pred_train)","9a0c3c10":"# creating a confusion matrix to understand the classification\nconf = metrics.confusion_matrix(y_test, y_pred_test)","dbb49478":"cmap = sns.cubehelix_palette(50, hue=0.05, rot=0, light=0.9, dark=0, as_cmap=True)\nsns.heatmap(conf,cmap = cmap,xticklabels=['Prediction No','Prediction Yes'],yticklabels=['Actual No','Actual Yes'], annot=True,\n            fmt='d')","770bb769":"### Buiding the Machine Learning Model : Linear Regression","82f2fc5e":"\n****<h1\/> Logistic Regression Model to find credit Card defaulter  <\/h1>****","60dba599":"### 5.2.1. Metrics for Logistic Regression<a id=\"matrix\">","57ad820f":"** Observation ** : There are no missing values","5dd594e5":"### 2. Importing the packages and dataset  ","9bf423fb":"### 4. Feature Engineering :  [ Converting Categorial Variable to Numerical Veriable]  <a id='feature'>","0fe183a2":"#### Spliting X and Y for Train Test Split in  Logistics Regression","78fbd7c8":"### 3. Exploratory Data Analysis and finding its colinearity between the column features  <a id='eda'>","fca86db8":"### Performing \"Profiling of Datasets\" which depicts the colinearity of column variable and other important insights","ee34156b":"### 5.2.2. Representing The Confusion Metrics<a id=\"conf\">","0b66cf76":"\n### 1. Dataset Description \n\nThe dataset consists of 10000 individuals and whether their credit card has defaulted or not. Below are the column description:\n- **default** : Whether the individual has defaulted\n- **student** : Whether the individual is student\n- **balance** : The balance in individual's account\n- **income** : Income of individual","72eab745":"### 5.1 Simple Linear Regression  <a id='linear'>","6db7b49d":"### 5. Building and Evaluating Models  <a id='modelling'>","62275fbc":"#### The following figure shows there is having colinearity between balance and income to be -0.15 and same hold vice-Versa","ea33e643":"### 5.2 Buiding the Machine Learning Model : Logistic Regression  <a id='logistic'>"}}