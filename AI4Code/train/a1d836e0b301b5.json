{"cell_type":{"4f5f21e0":"code","c88c1449":"code","d59731b7":"code","bb96c97d":"code","20d513ba":"code","db1fb1e0":"code","f6b35d0f":"code","1e7f22de":"code","67b135e1":"code","1795da61":"code","5bcc135f":"code","cd3df8c2":"code","57aeab77":"code","e3c62ed8":"code","ec023af5":"code","9d5f535f":"code","b535896d":"code","bbdc49e6":"code","5a469d60":"code","694b13b9":"code","d6dc803f":"code","69c5066e":"code","0c446376":"code","222eacab":"code","7a78db02":"code","8cca13ab":"code","79d338f6":"code","447ec1f2":"code","c7a76fb8":"code","7fe3e915":"code","9c5a5b4f":"code","1675d44d":"code","b4aff03f":"code","6e0dc620":"code","76426141":"code","1d517eda":"code","26a35ace":"code","f6a1759c":"code","48a8244c":"code","deaab7bc":"code","7493213e":"code","5855934c":"code","1b160742":"code","091a3a63":"code","320bf1c6":"code","93f60b05":"code","7a038c8f":"code","5c74982c":"code","d26cb0b8":"markdown"},"source":{"4f5f21e0":"import pandas as pd\n\nimport plotly.graph_objects as go\nimport seaborn as sns","c88c1449":"train = pd.read_csv(\"..\/input\/customer-churn-prediction-2020\/train.csv\")\ntrain","d59731b7":"def charge_per_sec(data, when):\n    total_sec = data[\"total_\" + when + \"_minutes\"] * 60\n    sec_per_call = total_sec \/ data[\"total_\" + when + \"_calls\"]\n    charge_per_call = data[\"total_\" + when + \"_charge\"] \/ data[\"total_\" + when + \"_calls\"]\n    \n    data[\"charge_per_sec_\" + when] =  charge_per_call \/ sec_per_call\n    \ncharge_per_sec(train, \"day\")\ncharge_per_sec(train, \"eve\")\ncharge_per_sec(train, \"night\")\ncharge_per_sec(train, \"intl\")","bb96c97d":"train","20d513ba":"train_heatmap = train.copy()\ntrain_heatmap[\"area_code\"] = train_heatmap[\"area_code\"].astype(\"category\").cat.codes\ntrain_heatmap[\"international_plan\"] = train_heatmap[\"international_plan\"].astype(\"category\").cat.codes\ntrain_heatmap[\"voice_mail_plan\"] = train_heatmap[\"voice_mail_plan\"].astype(\"category\").cat.codes\ntrain_heatmap[\"churn\"] = train_heatmap[\"churn\"].astype(\"category\").cat.codes\ntrain_heatmap[\"state\"] = train_heatmap[\"state\"].astype(\"category\").cat.codes","db1fb1e0":"train_heatmap.corr().style.background_gradient(cmap='viridis')","f6b35d0f":"fig = go.Figure()\nfig.add_trace(go.Scatter(y=train[\"account_length\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Scatter(y=train[\"account_length\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.add_shape(type=\"line\",x0=597, y0=0, x1=597, y1=240, line=dict(color=\"Black\",width=2))\nfig.add_trace(go.Scatter(\n    x=[597],\n    y=[250],\n    text=\"Borderline for Churns\",\n    mode=\"text\"\n))\nfig.update_layout(\n    title=\"How many customer move out according to the length of their account\",\n    xaxis_title=\"Subscribed Account Length\")\n\nfig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=train[\"account_length\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Histogram(x=train[\"account_length\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.update_layout(\n    title=\"How many customer move out according to the length of their account\",\n    xaxis_title=\"Subscribed Account Length\")\n\nfig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Box(x=train[\"account_length\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Box(x=train[\"account_length\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.update_layout(\n    title=\"How many customer move out according to the length of their account\",\n    xaxis_title=\"Subscribed Account Length\")\n\nfig.show()","1e7f22de":"fig = go.Figure()\nfig.add_trace(go.Scatter(y=train[\"charge_per_sec_intl\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Scatter(y=train[\"charge_per_sec_intl\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.add_shape(type=\"line\",x0=597, y0=0.00447, x1=597, y1=0.00457, line=dict(color=\"Black\",width=2))\nfig.add_trace(go.Scatter(\n    x=[591],\n    y=[0.00458],\n    text=\"Borderline for Churns\",\n    mode=\"text\"\n))\nfig.update_layout(\n    title=\"How many customer move out according to the international charge\",\n    xaxis_title=\"International Call Charge per seconds\")\n\n\nfig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=train[\"charge_per_sec_intl\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Histogram(x=train[\"charge_per_sec_intl\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.update_layout(\n    title=\"How many customer move out according to the international charge\",\n    xaxis_title=\"International Call Charge per seconds\")\n\n\nfig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Box(x=train[\"charge_per_sec_intl\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Box(x=train[\"charge_per_sec_intl\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.update_layout(\n    title=\"How many customer move out according to the international charge\",\n    xaxis_title=\"International Call Charge per seconds\")\n\n\nfig.show()","67b135e1":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=train[\"international_plan\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Histogram(x=train[\"international_plan\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.update_layout(\n    title=\"How many customer move out that do\/ not have international plan\",\n    xaxis_title=\"International Plan\")\n\nfig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=train[\"area_code\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Histogram(x=train[\"area_code\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.update_layout(\n    title=\"How many customer move out regarding the area\",\n    xaxis_title=\"Country\/ Area Code\")\n\nfig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=train[\"number_customer_service_calls\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Histogram(x=train[\"number_customer_service_calls\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.update_layout(\n    title=\"The number of customer service calls done by customers\",\n    xaxis_title=\"Number of CS calls\")\n\nfig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=train[\"voice_mail_plan\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Histogram(x=train[\"voice_mail_plan\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.update_layout(\n    title=\"Voice mail plan owned by customers\",\n    xaxis_title=\"International Plan\")\n\nfig.show()","1795da61":"fig = go.Figure()\nfig.add_trace(go.Box(y=train[\"account_length\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Box(y=train[\"account_length\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.update_layout(\n    title=\"How many customer move out according to the length of their account\",\n    xaxis_title=\"Subscribed Account Length\")\n\nfig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Box(y=train[\"charge_per_sec_intl\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Box(y=train[\"charge_per_sec_intl\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\nfig.update_layout(\n    title=\"How many customer move out according to the international charge\",\n    xaxis_title=\"Subscribed Account Length\")\n\n\nfig.show()","5bcc135f":"fig = go.Figure()\nfig.add_trace(go.Violin(x=train[\"state\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Violin(x=train[\"state\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\n\nfig.update_layout(\n    title=\"How many customer move out regarding the country\",\n    xaxis_title=\"International Plan\")\n\nfig.show()\n\nfig = go.Figure()\nfig.add_trace(go.Histogram(x=train[\"state\"][train[\"churn\"] == \"no\"], name=\"No Churn\"))\nfig.add_trace(go.Histogram(x=train[\"state\"][train[\"churn\"] == \"yes\"], name=\"Churn\"))\n\nfig.update_layout(\n    title=\"How many customer move out regarding the country\",\n    xaxis_title=\"International Plan\")\n\nfig.show()","cd3df8c2":"train_heatmap.corr().style.background_gradient(cmap='viridis')","57aeab77":"train.columns","e3c62ed8":"train_data = train.drop(columns=[\"total_day_minutes\", \"total_day_calls\", \"total_day_charge\", \n                                 \"total_eve_minutes\", \"total_eve_calls\", \"total_eve_charge\",\n                                 \"total_night_minutes\", \"total_night_calls\", \"total_night_charge\", \n                                 'total_intl_minutes', 'total_intl_calls', 'total_intl_charge', \n                                 \"number_vmail_messages\", \"voice_mail_plan\"])","ec023af5":"dummy_state = pd.get_dummies(train_data[\"state\"], columns=[\"state\"], prefix=\"state_\" )\ndummy_area_code = pd.get_dummies(train_data[\"area_code\"], columns=[\"area_code\"], prefix=\"area_code_\" )\ndummy_international = pd.get_dummies(train_data[\"international_plan\"], columns=[\"international_plan\"], prefix=\"international_\" )\n# dummy_voice_mail = pd.get_dummies(train_data[\"voice_mail_plan\"], columns=[\"voice_mail_plan\"], prefix=\"voice_mail\" )\n","9d5f535f":"train_data = train_data.drop(columns=[\"state\", \"area_code\", \"international_plan\"])","b535896d":"train_data = train_data.join([dummy_state, dummy_area_code, dummy_international])","bbdc49e6":"train_data = train_data.dropna(inplace=False)\ntrain_data","5a469d60":"from sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import RandomOverSampler\nfrom collections import Counter\n\ntarget = train_data[\"churn\"].astype('category').cat.codes\nfeature = train_data.drop(columns=[\"churn\"])\n\n# oversample = RandomOverSampler(sampling_strategy='minority')\noversample = RandomOverSampler(sampling_strategy=0.5)\n\nfeature, target = oversample.fit_resample(feature, target)\nprint(Counter(target))\n\nX_train, X_test, y_train, y_test = train_test_split(feature, target, test_size=0.3)","694b13b9":"# from sklearn.model_selection import GridSearchCV\n# from sklearn import svm\n\n# param_grid = {\n#     'kernel' : ['linear', 'poly', 'rbf', 'sigmoid'], \n#     'gamma' : ['scale', 'auto']\n# }\n\n# gsc = GridSearchCV(\n#         estimator=svm.SVC(),\n#         param_grid=param_grid,\n#         cv=5, scoring='accuracy', verbose=2, n_jobs=-1)\n\n# grid_result = gsc.fit(X_train, y_train)\n# best_params = grid_result.best_params_\n# best_params","d6dc803f":"from sklearn.metrics import roc_auc_score\n\ndef roc_auc(y_prediction):\n    print(\"ROC_AUC : \", roc_auc_score(y_test, y_prediction))    ","69c5066e":"from sklearn import svm\n\nSVC = svm.SVC().fit(X_train, y_train)\nprint(\"Score : \", SVC.score(X_test, y_test))\nroc_auc(SVC.predict(X_test))","0c446376":"from sklearn.tree import DecisionTreeClassifier\n\nDTC = DecisionTreeClassifier().fit(X_train, y_train)\nprint(\"Score : \", DTC.score(X_test, y_test))\nroc_auc(DTC.predict(X_test))","222eacab":"from sklearn.neighbors import KNeighborsClassifier\n\nKNC = KNeighborsClassifier(n_neighbors=1).fit(X_train, y_train)\nprint(\"Score : \", KNC.score(X_test, y_test))\nroc_auc(KNC.predict(X_test))","7a78db02":"from sklearn.linear_model import LogisticRegression\n\nLR = LogisticRegression(solver=\"liblinear\").fit(X_train, y_train)\nprint(\"Score : \", LR.score(X_test, y_test))\nroc_auc(LR.predict(X_test))","8cca13ab":"import xgboost as xgb\n\nXGB = xgb.XGBClassifier(objective=\"binary:logistic\").fit(X_train, y_train)\nXGB.score(X_test, y_test)\nprint(\"Score : \", XGB.score(X_test, y_test))\nroc_auc(XGB.predict(X_test))","79d338f6":"import lightgbm as lgb\n\nLGB = lgb.LGBMClassifier().fit(X_train, y_train)\nprint(\"Score : \", LGB.score(X_test, y_test))\nroc_auc(LGB.predict(X_test))","447ec1f2":"model = XGB","c7a76fb8":"y_prediction = model.predict(X_test)","7fe3e915":"y_prediction","9c5a5b4f":"from sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\n\nscores = cross_val_score(model, X_train, y_train, cv=5)\nprint(scores)\nprint(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))","1675d44d":"from sklearn.metrics import confusion_matrix\n\nconfusion_matrix(y_test, y_prediction)","b4aff03f":"from sklearn.metrics import classification_report\n\nprint(classification_report(y_test, y_prediction))","6e0dc620":"test = pd.read_csv(\"..\/input\/customer-churn-prediction-2020\/test.csv\")","76426141":"def charge_per_sec(data, when):\n    total_sec = data[\"total_\" + when + \"_minutes\"] * 60\n    sec_per_call = total_sec \/ data[\"total_\" + when + \"_calls\"]\n    charge_per_call = data[\"total_\" + when + \"_charge\"] \/ data[\"total_\" + when + \"_calls\"]\n    \n    data[\"charge_per_sec_\" + when] =  charge_per_call \/ sec_per_call\n\ncharge_per_sec(test, \"day\")\ncharge_per_sec(test, \"eve\")\ncharge_per_sec(test, \"night\")\ncharge_per_sec(test, \"intl\")","1d517eda":"test_data = test.drop(columns=[\"total_day_minutes\", \"total_day_calls\", \"total_day_charge\", \n                                 \"total_eve_minutes\", \"total_eve_calls\", \"total_eve_charge\",\n                                 \"total_night_minutes\", \"total_night_calls\", \"total_night_charge\", \n                                 'total_intl_minutes', 'total_intl_calls', 'total_intl_charge'])","26a35ace":"dummy_state = pd.get_dummies(test_data[\"state\"], columns=[\"state\"], prefix=\"state_\" )\ndummy_area_code = pd.get_dummies(test_data[\"area_code\"], columns=[\"area_code\"], prefix=\"area_code_\" )\ndummy_international = pd.get_dummies(test_data[\"international_plan\"], columns=[\"international_plan\"], prefix=\"international_\" )\ndummy_voice_mail = pd.get_dummies(test_data[\"voice_mail_plan\"], columns=[\"voice_mail_plan\"], prefix=\"voice_mail\" )","f6a1759c":"test_data = test_data.drop(columns=[\"state\", \"area_code\", \"international_plan\", \"voice_mail_plan\"])","48a8244c":"test_data = test_data.join([dummy_state, dummy_area_code, dummy_international, dummy_voice_mail])","deaab7bc":"[i for i in test_data.columns if i not in train_data.columns]","7493213e":"test_data.columns[test_data.isna().any()].tolist()","5855934c":"median = test_data[\"charge_per_sec_intl\"].median()\ntest_data[\"charge_per_sec_intl\"] = test_data[\"charge_per_sec_intl\"].fillna(median)","1b160742":"prediction = XGB.predict(test_data.drop(columns=[\"id\", \"number_vmail_messages\",  'voice_mail_no', 'voice_mail_yes']))","091a3a63":"test_data[\"churn\"] = prediction","320bf1c6":"cat = {0: \"no\", 1: \"yes\"}\ntest_data['churn'] = test_data['churn'].map(cat)","93f60b05":"submission = test_data[[\"id\", \"churn\"]]\nsubmission.to_csv(\"submission.csv\", index=False)","7a038c8f":"fig = go.Figure()\nfig.add_trace(go.Histogram(x=train[\"churn\"]))\nfig.show()","5c74982c":"submission","d26cb0b8":"# Predicting Test"}}