{"cell_type":{"ccfb50f0":"code","91b3d90b":"code","46791f54":"code","1cc9dbea":"code","0e75a54c":"code","d6c1547e":"code","b5c2b246":"code","8bea80cc":"code","797320e0":"code","132f40ef":"code","0eb6e5df":"code","bc4b3629":"code","15c340c9":"code","01503aa8":"markdown","9789ac4b":"markdown","953f9e82":"markdown"},"source":{"ccfb50f0":"# First Part: Computation of the time weighted average scores:\n\nimport pandas as pd\nimport math\nimport scipy.stats as st\nfrom sklearn.preprocessing import MinMaxScaler\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('display.width', 500)\npd.set_option('display.expand_frame_repr', False)\npd.set_option('display.float_format', lambda x: '%.5f' % x)","91b3d90b":"df = pd.read_csv(\"..\/input\/amazon-review\/amazon_review.csv\")\ndf.head(20)","46791f54":"# Current average rating\ndf[\"overall\"].mean()","1cc9dbea":"df.groupby(\"asin\").agg({\"summary\": \"count\", \"overall\": \"mean\"}) #we see that for the B007WTAJTO, 4915 comments are submitted and the average rate is 4.58759","0e75a54c":"# Time-Based Weighted Averate Rate: Average rating with respect to comments. It is assumed that the the comments which was submited within 30 days are current comments.\ndf.loc[df[\"day_diff\"] <= 30, \"overall\"].mean() * 28 \/ 100 + \\\ndf.loc[(df[\"day_diff\"] > 30) & (df[\"day_diff\"] <= 90), \"overall\"].mean() * 26 \/ 100 + \\\ndf.loc[(df[\"day_diff\"] > 90) & (df[\"day_diff\"] <= 180), \"overall\"].mean() * 24 \/ 100 + \\\ndf.loc[(df[\"day_diff\"] > 180), \"overall\"].mean() * 22 \/ 100","d6c1547e":"# df.loc[df[\"day_diff\"]<= 30]: recent comments which covers last 30 days.\n# df.loc[df[\"day_diff\"]<= 30,\"overall\"] #brings the rates of mentioned date horizon above.\n# df.loc[df[\"day_diff\"]<= 30,\"overall\"].mean() #mean of that period","b5c2b246":"def time_based_weighted_average(dataframe, w1=28, w2=26, w3=24, w4=22):\n    return dataframe.loc[df[\"day_diff\"] <= 30, \"overall\"].mean() * w1 \/ 100 + \\\n           dataframe.loc[(df[\"day_diff\"] > 30) & (df[\"day_diff\"] <= 90), \"overall\"].mean() * w2 \/ 100 + \\\n           dataframe.loc[(dataframe[\"df.sort_values(\"purchase_count\", ascending=False).head(20)\"] > 90) & (dataframe[\"day_diff\"] <= 180), \"overall\"].mean() * w3 \/ 100 + \\\n           dataframe.loc[(dataframe[\"day_diff\"] > 180), \"overall\"].mean() * w4 \/ 100\n\ntime_based_weighted_average(df)","8bea80cc":"df.sort_values(\"overall\", ascending=False) # This representation is not enough.","797320e0":"df.sort_values(\"helpful_yes\", ascending=False).head(20)","132f40ef":"df.sort_values(\"day_diff\", ascending=True).head(20)","0eb6e5df":"df[\"day_diff_r\"]= 1\/df[\"day_diff\"]\ndf[\"day_diff_r\"] = MinMaxScaler(feature_range=(1, 5)). \\\n    fit(df[[\"day_diff_r\"]]). \\\n    transform(df[[\"day_diff_r\"]])\ndf.head(20)\ndf.sort_values(\"day_diff_r\",ascending=False)","bc4b3629":"def weighted_sorting_score(dataframe, w1=35, w2=23, w3=42):\n    return (dataframe[\"day_diff_r\"] * w1 \/ 100 +\n            dataframe[\"helpful_yes\"] * w2 \/ 100 +\n            dataframe[\"overall\"] * w3 \/ 100)\n\n\ndf[\"weighted_sorting_score\"] = weighted_sorting_score(df)\n\ndf.sort_values(\"weighted_sorting_score\", ascending=False).head(20)","15c340c9":"df[\"helpful_yes\"] = MinMaxScaler(feature_range=(1, 5)). \\\n    fit(df[[\"helpful_yes\"]]). \\\n    transform(df[[\"helpful_yes\"]])","01503aa8":"**Result**: The recent comments submited within 30 days caused positive impact on average rating.\n","9789ac4b":"# Sorting by Rating","953f9e82":"**In this exercise, Amazon Review dataset is used for rating products and sorting reviews.**"}}