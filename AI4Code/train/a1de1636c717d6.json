{"cell_type":{"29987671":"code","40fbc887":"code","744e578a":"code","88741271":"code","960d94de":"code","4fd2b648":"code","ae8bb279":"code","f42d0f89":"code","6c24b9f8":"code","1b6b5282":"code","5805a3d9":"markdown","a7e8051c":"markdown","49876705":"markdown","1e6d94db":"markdown","2eafbade":"markdown"},"source":{"29987671":"import numpy as np \nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import LabelEncoder,StandardScaler\nfrom sklearn.model_selection import train_test_split,learning_curve","40fbc887":"#load data\ndf = pd.read_csv('https:\/\/archive.ics.uci.edu\/ml\/'\n                 'machine-learning-databases'\n                 '\/breast-cancer-wisconsin\/wdbc.data', header=None)\ndf.head()","744e578a":"df.shape","88741271":"df.loc[:, 1].unique()","960d94de":"# split input data and input label\nX = df.loc[:, 2:].values\ny = df.loc[:, 1].values","4fd2b648":"# split train set and test set \nX_train, X_test, y_train, y_test = \\\n    train_test_split(X, y, \n                     test_size=0.20,\n                     stratify=y,\n                     random_state=1)","ae8bb279":"# make model by pipeline \npipe_lr = make_pipeline(StandardScaler(),\n                        LogisticRegression(penalty='l2', random_state=1,\n                                           max_iter=10000))","f42d0f89":"#learning curve \ntrain_sizes, train_scores, test_scores =\\\n                learning_curve(estimator=pipe_lr,\n                               X=X_train,\n                               y=y_train,\n                               train_sizes=np.linspace(0.1, 1.0, 10), # 10% ~ 100%\n                               cv=10,\n                               n_jobs=1)","6c24b9f8":"#get mean and std \ntrain_mean = np.mean(train_scores, axis=1)\ntrain_std = np.std(train_scores, axis=1)\ntest_mean = np.mean(test_scores, axis=1)\ntest_std = np.std(test_scores, axis=1)","1b6b5282":"#draw train mean score\nplt.plot(train_sizes, train_mean,\n         color='blue', marker='o',\n         markersize=5, label='Training accuracy')\n\n# draw train mean score + std ~ tarin mean score - std \nplt.fill_between(train_sizes,\n                 train_mean + train_std,\n                 train_mean - train_std,\n                 alpha=0.15, color='blue')\n\n#draw test mean score\nplt.plot(train_sizes, test_mean,\n         color='green', linestyle='--',\n         marker='s', markersize=5,\n         label='Validation accuracy')\n\n# draw test mean score + std ~ test mean score - std \nplt.fill_between(train_sizes,\n                 test_mean + test_std,\n                 test_mean - test_std,\n                 alpha=0.15, color='green')\n\n# grid + xlabel + ylabel + legend position \nplt.grid()\nplt.xlabel('Number of training examples')\nplt.ylabel('Accuracy')\nplt.legend(loc='lower right')\nplt.ylim([0.8, 1.03])\nplt.tight_layout()\nplt.show()","5805a3d9":"# make model","a7e8051c":"# get mean score and std ","49876705":"# draw learning curve","1e6d94db":"# make learning curve","2eafbade":"# split data"}}