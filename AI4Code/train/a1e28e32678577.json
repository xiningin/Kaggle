{"cell_type":{"d83c7f6f":"code","40326c4f":"code","56225325":"code","856ca123":"code","d58bcf0f":"code","1485f5dc":"code","7e160330":"code","315de82d":"code","2b20101c":"code","6cf5353d":"code","0f524965":"code","17d1b41e":"code","0b70893a":"markdown","fe4a373a":"markdown","5b0aa899":"markdown","92200d16":"markdown","00b35fd9":"markdown","4bab32ac":"markdown","ea0b236a":"markdown","eaec4644":"markdown","cfd1c6b4":"markdown","21669326":"markdown","a3bf9e94":"markdown","1debdf5a":"markdown","5d352b60":"markdown","d247d707":"markdown","2634598c":"markdown","0864ad4d":"markdown","54b15949":"markdown","22a2a95e":"markdown"},"source":{"d83c7f6f":"!cp ..\/input\/pe-models\/gdcm.tar .\n!tar -xvzf gdcm.tar\n!conda install --offline .\/gdcm\/gdcm-2.8.9-py37h71b2a6d_0.tar.bz2\nprint(\"done\")","40326c4f":"from fastai.torch_core import set_seed\nfrom fastai.vision.all import *\nfrom fastai.medical.imaging import *\n\nimport gdcm\nmatplotlib.rcParams['image.cmap'] = 'bone'\n\nimport matplotlib as plt\nplt.rcParams.update({'figure.max_open_warning': 0})","56225325":"!cp -r ..\/input\/fmipackage\/fmi-master\/* .\/","856ca123":"from fmi.explore import *\nfrom fmi.preprocessing import *\nfrom fmi.pipeline import *","d58bcf0f":"source = '..\/input\/osic-pulmonary-fibrosis-progression\/train'\nos_items = get_dicom_files(source, folders='ID00007637202177411956430')\nos_items","1485f5dc":"imgs = []\nfor filename in os_items:\n    file = dcmread(filename).pixel_array\n    img = TensorDicom(file)\n    imgs.append(img)\nshow_images(imgs, nrows=3)","7e160330":"instance_show(os_items, nrows=3)","315de82d":"dicom_dataframe = pd.read_csv('..\/input\/pct-5\/dicom_dataframe.csv', low_memory=False)","2b20101c":"pct = dicom_dataframe[['PatientID', 'InstanceNumber', 'img_pct_window', 'img_mean', 'img_std']].sort_values(by=['img_pct_window'], ascending=False).reset_index(drop=True)\npct[:5]","6cf5353d":"get_dicom_image(pct[:30], 'img_pct_window', source=source) ","0f524965":"mean = dicom_dataframe[['PatientID', 'InstanceNumber', 'img_pct_window', 'img_mean', 'img_std']].sort_values(by=['img_mean'], ascending=False).reset_index(drop=True)\nmean[:5]","17d1b41e":"get_dicom_image(mean[:30], 'img_mean', source=source) ","0b70893a":"## Goal","fe4a373a":"Install the gdcm library - use the `pe-models` database to access gdcm.tar file","5b0aa899":"This quick tutorial goes through how `instance_show` and how `get_dicom_image` works.\n\n- Typically when you view slices of dicom images they do not display in sequence.  `instance_show` adds the functionality of displaying images by instance number\n\n- From a dataframe you can view dicom images by specifying the `key`","92200d16":"## Sort Example","00b35fd9":"## View example","4bab32ac":"We can view the images by using as example such as this:","ea0b236a":"What you notice is that the images are not in sequence.  This can be easily rectified by using the `instance_show` function which also displays the instance number on the image.","eaec4644":"For more about the `fmi` library: [view on Github](https:\/\/github.com\/asvcode\/fmi)","cfd1c6b4":"This tutorial refers to using the `fmi` library which can be found [here](https:\/\/github.com\/asvcode\/fmi) and the [fastai](https:\/\/github.com\/fastai) medical imaging module","21669326":"Condense the dataframe to some key values","a3bf9e94":"Currently the `fmi` package is still under construction and not pip installable. Instead install via the `fmipackage` dataset","1debdf5a":"import dependancies","5d352b60":"To see how the sorting works we use one patient (ID00007637202177411956430) as an example.  There are 30 slices in this patient's folder","d247d707":"Sort by `img_mean`","2634598c":"This displays the images based in descending order (highest to lowest `img_pct_window` values)","0864ad4d":"`get_dicom_image` easily allows you to view images based on the chosen dataframe key. For example we can reduce the dataframe created in [this](https:\/\/www.kaggle.com\/avirdee\/dicom-dataframe-tutorial) kernel","54b15949":"Now to view the images you can:","22a2a95e":"## Dependancies"}}