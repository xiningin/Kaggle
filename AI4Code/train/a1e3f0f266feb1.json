{"cell_type":{"37ba3d26":"code","26b0c299":"code","1827c712":"code","2384b14f":"code","0e5e2f5b":"code","bee5436c":"code","8076d2ee":"code","81aad98a":"code","f3418398":"code","0eabc267":"code","628a79ad":"code","37518fde":"code","9822aece":"code","7b142e58":"code","14f36464":"code","777e8dd2":"code","4e2db670":"code","b293c7ba":"code","aad2569a":"code","95607f3f":"code","c43fc37a":"code","eb2ac004":"code","517286ef":"code","0c72c4ca":"code","3ff9658a":"code","c1732e23":"code","8ef04c52":"code","3c709e2b":"code","83dfebf9":"code","8ab01633":"code","01d58c41":"code","0f3d1644":"code","1b5219d5":"code","305a9849":"code","28960117":"code","e7b10f98":"code","af03c946":"code","e63225f4":"code","bbcdb8a8":"code","f5189df0":"markdown","ef14eaf2":"markdown","05e27ec9":"markdown","170c9aab":"markdown","48baa819":"markdown","459fe8a3":"markdown","c3c56084":"markdown","fd04875e":"markdown","4dd902c2":"markdown","f0639735":"markdown","ee6a35c1":"markdown","1ec25f74":"markdown","2e655b5b":"markdown","caa183fb":"markdown","9346cca8":"markdown","077029d8":"markdown","8baeca99":"markdown","2faef1ba":"markdown","b2eb7fb4":"markdown","9f7f9089":"markdown","393b24ee":"markdown","99bf2c1c":"markdown","96dc3d90":"markdown","d0fc1625":"markdown","83f68f90":"markdown","584cda77":"markdown","551fd779":"markdown","d353ad8a":"markdown","d6ac9951":"markdown","3ea43fe7":"markdown","27dab748":"markdown","22b32d4e":"markdown","16f241f6":"markdown","05ae10b6":"markdown","1725dd47":"markdown","c85d1115":"markdown","f1ef0370":"markdown","e763e56f":"markdown","45cb7aa5":"markdown","6cab1e66":"markdown","5f1a50ec":"markdown","f7a6faf2":"markdown","a96bb76b":"markdown","859c786f":"markdown","ffaec7a1":"markdown","304ff42e":"markdown","7a1ba2ce":"markdown","ed7b07ec":"markdown","41ed80b4":"markdown"},"source":{"37ba3d26":"import gc\nimport os\nfrom pathlib import Path\nimport random\nimport sys\n\nfrom tqdm.notebook import tqdm\nimport numpy as np\nimport pandas as pd\nimport scipy as sp\n\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom IPython.core.display import display, HTML\n\n# --- plotly ---\nfrom plotly import tools, subplots\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.io as pio\npio.templates.default = \"plotly_dark\"\n\n# --- models ---\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import KFold\nimport lightgbm as lgb\nimport xgboost as xgb\nimport catboost as cb\nimport torch\n\n# --- setup ---\npd.set_option('max_columns', 50)\n","26b0c299":"!pip install detectron2 -f \\\n  https:\/\/dl.fbaipublicfiles.com\/detectron2\/wheels\/cu102\/torch1.7\/index.html\n!pip install pytorch-pfn-extras timm","1827c712":"from typing import Any\nimport yaml\n\ndef save_yaml(filepath: str, content: Any, width: int = 120):\n    with open(filepath, \"w\") as f:\n        yaml.dump(content, f, width=width)","2384b14f":"from dataclasses import dataclass, field\nfrom typing import Dict, Any, Tuple, Union, List\n\n\n@dataclass\nclass Flags:\n    # General\n    debug: bool = True\n    outdir: str = \"results\/det\"\n    device: str = \"cuda:0\"\n\n    # Data config\n    imgdir_name: str = \"vinbigdata-chest-xray-resized-png-256x256\"\n    seed: int = 111\n    target_fold: int = 0  # 0~4\n    # Model config\n    model_name: str = \"resnet18\"\n    # Training config\n    epoch: int = 20\n    batchsize: int = 8\n    valid_batchsize: int = 16\n    num_workers: int = 4\n    snapshot_freq: int = 5\n    ema_decay: float = 0.999  # negative value is to inactivate ema.\n    scheduler_type: str = \"\"\n    scheduler_kwargs: Dict[str, Any] = field(default_factory=lambda: {})\n    scheduler_trigger: List[Union[int, str]] = field(default_factory=lambda: [1, \"iteration\"])\n\n    def update(self, param_dict: Dict) -> \"Flags\":\n        # Overwrite by `param_dict`\n        for key, value in param_dict.items():\n            if not hasattr(self, key):\n                raise ValueError(f\"[ERROR] Unexpected key for flag = {key}\")\n            setattr(self, key, value)\n        return self\n","0e5e2f5b":"flags_dict = {\n    \"debug\": False,  # Change to True for fast debug run!\n    \"outdir\": \"results\/tmp_debug\",\n    # Data\n    \"imgdir_name\": \"vinbigdata-chest-xray-resized-png-256x256\",\n    # Model\n    \"model_name\": \"resnet18\",\n    # Training\n    \"num_workers\": 4,\n    \"epoch\": 15,\n    \"batchsize\": 8,\n    \"scheduler_type\": \"CosineAnnealingWarmRestarts\",\n    \"scheduler_kwargs\": {\"T_0\": 28125},  # 15000 * 15 epoch \/\/ (batchsize=8)\n    \"scheduler_trigger\": [1, \"iteration\"]\n}","bee5436c":"import dataclasses\n\n# args = parse()\nprint(\"torch\", torch.__version__)\nflags = Flags().update(flags_dict)\nprint(\"flags\", flags)\ndebug = flags.debug\noutdir = Path(flags.outdir)\nos.makedirs(str(outdir), exist_ok=True)\nflags_dict = dataclasses.asdict(flags)\nsave_yaml(str(outdir \/ \"flags.yaml\"), flags_dict)\n\n# --- Read data ---\ninputdir = Path(\"\/kaggle\/input\")\ndatadir = inputdir \/ \"vinbigdata-chest-xray-abnormalities-detection\"\nimgdir = inputdir \/ flags.imgdir_name\n\n# Read in the data CSV files\ntrain = pd.read_csv(datadir \/ \"train.csv\")\n# sample_submission = pd.read_csv(datadir \/ 'sample_submission.csv')","8076d2ee":"train.query(\"image_id == '50a418190bc3fb1ef1633bf9678929b3'\")","81aad98a":"is_normal_df = train.groupby(\"image_id\")[\"class_id\"].agg(lambda s: (s == 14).sum()).reset_index().rename({\"class_id\": \"num_normal_annotations\"}, axis=1)\nis_normal_df.head()","f3418398":"# \u6bcf\u5f20\u56fe\u7247\u4e2d\u201c\u627e\u4e0d\u5230\u201d\u6ce8\u91ca\u7684\u6570\u91cf\nnum_normal_anno_counts = is_normal_df[\"num_normal_annotations\"].value_counts()\nnum_normal_anno_counts.plot(kind=\"bar\")\nplt.title(\"The number of 'No finding' annotations in each image\")","0eabc267":"num_normal_anno_counts_df = num_normal_anno_counts.reset_index()\nnum_normal_anno_counts_df[\"name\"] = num_normal_anno_counts_df[\"index\"].map({0: \"Abnormal\", 3: \"Normal\"})\nnum_normal_anno_counts_df","628a79ad":"px.pie(num_normal_anno_counts_df, values=\"num_normal_annotations\", names=\"name\", title=\"Normal\/Abnormal ratio\")","37518fde":"import pickle\nfrom pathlib import Path\nfrom typing import Optional\n\nimport cv2\nimport numpy as np\nimport pandas as pd\nfrom detectron2.structures import BoxMode\nfrom tqdm import tqdm\n\n\ndef get_vinbigdata_dicts(\n    imgdir: Path,\n    train_df: pd.DataFrame,\n    train_data_type: str = \"original\",\n    use_cache: bool = True,\n    debug: bool = True,\n    target_indices: Optional[np.ndarray] = None,\n):\n    debug_str = f\"_debug{int(debug)}\"\n    train_data_type_str = f\"_{train_data_type}\"\n    cache_path = Path(\".\") \/ f\"dataset_dicts_cache{train_data_type_str}{debug_str}.pkl\"\n    if not use_cache or not cache_path.exists():\n        print(\"Creating data...\")\n        train_meta = pd.read_csv(imgdir \/ \"train_meta.csv\")\n        if debug:\n            train_meta = train_meta.iloc[:500]  # For debug....\n\n        # Load 1 image to get image size.\n        image_id = train_meta.loc[0, \"image_id\"]\n        image_path = str(imgdir \/ \"train\" \/ f\"{image_id}.png\")\n        image = cv2.imread(image_path)\n        resized_height, resized_width, ch = image.shape\n        print(f\"image shape: {image.shape}\")\n\n        dataset_dicts = []\n        for index, train_meta_row in tqdm(train_meta.iterrows(), total=len(train_meta)):\n            record = {}\n\n            image_id, height, width = train_meta_row.values\n            filename = str(imgdir \/ \"train\" \/ f\"{image_id}.png\")\n            record[\"file_name\"] = filename\n            record[\"image_id\"] = image_id\n            record[\"height\"] = resized_height\n            record[\"width\"] = resized_width\n            objs = []\n            for index2, row in train_df.query(\"image_id == @image_id\").iterrows():\n                # print(row)\n                # print(row[\"class_name\"])\n                # class_name = row[\"class_name\"]\n                class_id = row[\"class_id\"]\n                if class_id == 14:\n                    # It is \"No finding\"\n                    # This annotator does not find anything, skip.\n                    pass\n                else:\n                    # bbox_original = [int(row[\"x_min\"]), int(row[\"y_min\"]), int(row[\"x_max\"]), int(row[\"y_max\"])]\n                    h_ratio = resized_height \/ height\n                    w_ratio = resized_width \/ width\n                    bbox_resized = [\n                        int(row[\"x_min\"]) * w_ratio,\n                        int(row[\"y_min\"]) * h_ratio,\n                        int(row[\"x_max\"]) * w_ratio,\n                        int(row[\"y_max\"]) * h_ratio,\n                    ]\n                    obj = {\n                        \"bbox\": bbox_resized,\n                        \"bbox_mode\": BoxMode.XYXY_ABS,\n                        \"category_id\": class_id,\n                    }\n                    objs.append(obj)\n            record[\"annotations\"] = objs\n            dataset_dicts.append(record)\n        with open(cache_path, mode=\"wb\") as f:\n            pickle.dump(dataset_dicts, f)\n\n    print(f\"Load from cache {cache_path}\")\n    with open(cache_path, mode=\"rb\") as f:\n        dataset_dicts = pickle.load(f)\n    if target_indices is not None:\n        dataset_dicts = [dataset_dicts[i] for i in target_indices]\n    return dataset_dicts\n\n\ndef get_vinbigdata_dicts_test(\n    imgdir: Path, test_meta: pd.DataFrame, use_cache: bool = True, debug: bool = True,\n):\n    debug_str = f\"_debug{int(debug)}\"\n    cache_path = Path(\".\") \/ f\"dataset_dicts_cache_test{debug_str}.pkl\"\n    if not use_cache or not cache_path.exists():\n        print(\"Creating data...\")\n        # test_meta = pd.read_csv(imgdir \/ \"test_meta.csv\")\n        if debug:\n            test_meta = test_meta.iloc[:500]  # For debug....\n\n        # Load 1 image to get image size.\n        image_id = test_meta.loc[0, \"image_id\"]\n        image_path = str(imgdir \/ \"test\" \/ f\"{image_id}.png\")\n        image = cv2.imread(image_path)\n        resized_height, resized_width, ch = image.shape\n        print(f\"image shape: {image.shape}\")\n\n        dataset_dicts = []\n        for index, test_meta_row in tqdm(test_meta.iterrows(), total=len(test_meta)):\n            record = {}\n\n            image_id, height, width = test_meta_row.values\n            filename = str(imgdir \/ \"test\" \/ f\"{image_id}.png\")\n            record[\"file_name\"] = filename\n            # record[\"image_id\"] = index\n            record[\"image_id\"] = image_id\n            record[\"height\"] = resized_height\n            record[\"width\"] = resized_width\n            # objs = []\n            # record[\"annotations\"] = objs\n            dataset_dicts.append(record)\n        with open(cache_path, mode=\"wb\") as f:\n            pickle.dump(dataset_dicts, f)\n\n    print(f\"Load from cache {cache_path}\")\n    with open(cache_path, mode=\"rb\") as f:\n        dataset_dicts = pickle.load(f)\n    return dataset_dicts\n","9822aece":"\"\"\"\nReferenced `chainer.dataset.DatasetMixin` to work with pytorch Dataset.\n\"\"\"\nimport numpy\nimport six\nimport torch\nfrom torch.utils.data.dataset import Dataset\n\n\nclass DatasetMixin(Dataset):\n\n    def __init__(self, transform=None):\n        self.transform = transform\n\n    def __getitem__(self, index):\n        \"\"\"Returns an example or a sequence of examples.\"\"\"\n        if torch.is_tensor(index):\n            index = index.tolist()\n        if isinstance(index, slice):\n            current, stop, step = index.indices(len(self))\n            return [self.get_example_wrapper(i) for i in\n                    six.moves.range(current, stop, step)]\n        elif isinstance(index, list) or isinstance(index, numpy.ndarray):\n            return [self.get_example_wrapper(i) for i in index]\n        else:\n            return self.get_example_wrapper(index)\n\n    def __len__(self):\n        \"\"\"Returns the number of data points.\"\"\"\n        raise NotImplementedError\n\n    def get_example_wrapper(self, i):\n        \"\"\"Wrapper of `get_example`, to apply `transform` if necessary\"\"\"\n        example = self.get_example(i)\n        if self.transform:\n            example = self.transform(example)\n        return example\n\n    def get_example(self, i):\n        \"\"\"Returns the i-th example.\n\n        Implementations should override it. It should raise :class:`IndexError`\n        if the index is invalid.\n\n        Args:\n            i (int): The index of the example.\n\n        Returns:\n            The i-th example.\n\n        \"\"\"\n        raise NotImplementedError\n","7b142e58":"import cv2\nimport numpy as np\n\n\nclass VinbigdataTwoClassDataset(DatasetMixin):\n    def __init__(self, dataset_dicts, image_transform=None, transform=None, train: bool = True):\n        super(VinbigdataTwoClassDataset, self).__init__(transform=transform)\n        self.dataset_dicts = dataset_dicts\n        self.image_transform = image_transform\n        self.train = train\n\n    def get_example(self, i):\n        d = self.dataset_dicts[i]\n        filename = d[\"file_name\"]\n\n        img = cv2.imread(filename)\n        if self.image_transform:\n            img = self.image_transform(img)\n        img = np.transpose(img, (2, 0, 1)).astype(np.float32)\n        if self.train:\n            label = int(len(d[\"annotations\"]) > 0)  # 0 normal, 1 abnormal\n            return img, label\n        else:\n            # Only return img\n            return img,\n\n    def __len__(self):\n        return len(self.dataset_dicts)\n","14f36464":"dataset_dicts = get_vinbigdata_dicts(imgdir, train, debug=debug)\ndataset = VinbigdataTwoClassDataset(dataset_dicts)","777e8dd2":"index = 0\nimg, label = dataset[index]\nplt.imshow(img.transpose((1, 2, 0)) \/ 255.)\nplt.title(f\"{index}-th image: label {label}\")","4e2db670":"import albumentations as A\n\n\nclass Transform:\n    def __init__(\n        self, hflip_prob: float = 0.5, ssr_prob: float = 0.5, random_bc_prob: float = 0.5\n    ):\n        self.transform = A.Compose(\n            [\n                A.HorizontalFlip(p=hflip_prob),\n                A.ShiftScaleRotate(\n                    shift_limit=0.0625, scale_limit=0.1, rotate_limit=10, p=ssr_prob\n                ),\n                A.RandomBrightnessContrast(p=random_bc_prob),\n            ]\n        )\n\n    def __call__(self, image):\n        image = self.transform(image=image)[\"image\"]\n        return image\n","b293c7ba":"aug_dataset = VinbigdataTwoClassDataset(dataset_dicts, image_transform=Transform())","aad2569a":"index = 0\n\nn_images = 4\n\nfig, axes = plt.subplots(1, n_images, figsize=(16, 5))\nfor i in range(n_images):\n    # Each time the data is accessed, the result is different due to random augmentation!\n    img, label = aug_dataset[index]\n    ax = axes[i]\n    ax.imshow(img.transpose((1, 2, 0)) \/ 255.)\n    ax.set_title(f\"{index}-th image: label {label}\")\nplt.show()","95607f3f":"import timm\n\n\ndef build_predictor(model_name: str):\n    return timm.create_model(model_name, pretrained=True, num_classes=2, in_chans=3)","c43fc37a":"import torch\n\n\ndef accuracy(y: torch.Tensor, t: torch.Tensor) -> torch.Tensor:\n    \"\"\"Computes multi-class classification accuracy\"\"\"\n    assert y.shape[:-1] == t.shape, f\"y {y.shape}, t {t.shape} is inconsistent.\"\n    pred_label = torch.max(y.detach(), dim=-1)[1]\n    count = t.nelement()\n    correct = (pred_label == t).sum().float()\n    acc = correct \/ count\n    return acc","eb2ac004":"import torch\nimport torch.nn.functional as F\nfrom torch import nn\nimport pytorch_pfn_extras as ppe\n\n\nclass Classifier(nn.Module):\n    \"\"\"two class classfication\"\"\"\n\n    def __init__(self, predictor, lossfun=F.cross_entropy):\n        super().__init__()\n        self.predictor = predictor\n        self.lossfun = lossfun\n        self.prefix = \"\"\n\n    def forward(self, image, targets):\n        outputs = self.predictor(image)\n        loss = self.lossfun(outputs, targets)\n        metrics = {\n            f\"{self.prefix}loss\": loss.item(),\n            f\"{self.prefix}acc\": accuracy(outputs, targets).item()\n        }\n        ppe.reporting.report(metrics, self)\n        return loss, metrics\n\n    def predict(self, data_loader):\n        pred = self.predict_proba(data_loader)\n        label = torch.argmax(pred, dim=1)\n        return label\n\n    def predict_proba(self, data_loader):\n        device: torch.device = next(self.parameters()).device\n        y_list = []\n        self.eval()\n        with torch.no_grad():\n            for batch in data_loader:\n                if isinstance(batch, (tuple, list)):\n                    # Assumes first argument is \"image\"\n                    batch = batch[0].to(device)\n                else:\n                    batch = batch.to(device)\n                y = self.predictor(batch)\n                y = torch.softmax(y, dim=-1)\n                y_list.append(y)\n        pred = torch.cat(y_list)\n        return pred","517286ef":"supported_models = timm.list_models()\nprint(f\"{len(supported_models)} models are supported in timm.\")\nprint(supported_models)","0c72c4ca":"\"\"\"\nFrom https:\/\/github.com\/pfnet-research\/kaggle-lyft-motion-prediction-4th-place-solution\n\"\"\"\nfrom logging import getLogger\n\nfrom torch import nn\n\n\nclass EMA(object):\n    \"\"\"Exponential moving average of model parameters.\n\n    Ref\n     - https:\/\/github.com\/tensorflow\/addons\/blob\/v0.10.0\/tensorflow_addons\/optimizers\/moving_average.py#L26-L103\n     - https:\/\/anmoljoshi.com\/Pytorch-Dicussions\/\n\n    Args:\n        model (nn.Module): Model with parameters whose EMA will be kept.\n        decay (float): Decay rate for exponential moving average.\n        strict (bool): Apply strict check for `assign` & `resume`.\n        use_dynamic_decay (bool): Dynamically change decay rate. If `True`, small decay rate is\n            used at the beginning of training to move moving average faster.\n    \"\"\"  # NOQA\n\n    def __init__(\n        self,\n        model: nn.Module,\n        decay: float,\n        strict: bool = True,\n        use_dynamic_decay: bool = True,\n    ):\n        self.decay = decay\n        self.model = model\n        self.strict = strict\n        self.use_dynamic_decay = use_dynamic_decay\n        self.logger = getLogger(__name__)\n        self.n_step = 0\n\n        self.shadow = {}\n        self.original = {}\n\n        # Flag to manage which parameter is assigned.\n        # When `False`, original model's parameter is used.\n        # When `True` (`assign` method is called), `shadow` parameter (ema param) is used.\n        self._assigned = False\n\n        # Register model parameters\n        for name, param in model.named_parameters():\n            if param.requires_grad:\n                self.shadow[name] = param.data.clone()\n\n    def step(self):\n        self.n_step += 1\n        if self.use_dynamic_decay:\n            _n_step = float(self.n_step)\n            decay = min(self.decay, (1.0 + _n_step) \/ (10.0 + _n_step))\n        else:\n            decay = self.decay\n\n        for name, param in self.model.named_parameters():\n            if param.requires_grad:\n                assert name in self.shadow\n                new_average = (1.0 - decay) * param.data + decay * self.shadow[name]\n                self.shadow[name] = new_average.clone()\n\n    # alias\n    __call__ = step\n\n    def assign(self):\n        \"\"\"Assign exponential moving average of parameter values to the respective parameters.\"\"\"\n        if self._assigned:\n            if self.strict:\n                raise ValueError(\"[ERROR] `assign` is called again before `resume`.\")\n            else:\n                self.logger.warning(\n                    \"`assign` is called again before `resume`.\"\n                    \"shadow parameter is already assigned, skip.\"\n                )\n                return\n\n        for name, param in self.model.named_parameters():\n            if param.requires_grad:\n                assert name in self.shadow\n                self.original[name] = param.data.clone()\n                param.data = self.shadow[name]\n        self._assigned = True\n\n    def resume(self):\n        \"\"\"Restore original parameters to a model.\n\n        That is, put back the values that were in each parameter at the last call to `assign`.\n        \"\"\"\n        if not self._assigned:\n            if self.strict:\n                raise ValueError(\"[ERROR] `resume` is called before `assign`.\")\n            else:\n                self.logger.warning(\"`resume` is called before `assign`, skip.\")\n                return\n\n        for name, param in self.model.named_parameters():\n            if param.requires_grad:\n                assert name in self.shadow\n                param.data = self.original[name]\n        self._assigned = False\n","3ff9658a":"\"\"\"\nFrom https:\/\/github.com\/pfnet-research\/kaggle-lyft-motion-prediction-4th-place-solution\n\"\"\"\nfrom typing import Mapping, Any\n\nfrom torch import optim\n\nfrom pytorch_pfn_extras.training.extension import Extension, PRIORITY_READER\nfrom pytorch_pfn_extras.training.manager import ExtensionsManager\n\n\nclass LRScheduler(Extension):\n    \"\"\"A thin wrapper to resume the lr_scheduler\"\"\"\n\n    trigger = 1, 'iteration'\n    priority = PRIORITY_READER\n    name = None\n\n    def __init__(self, optimizer: optim.Optimizer, scheduler_type: str, scheduler_kwargs: Mapping[str, Any]) -> None:\n        super().__init__()\n        self.scheduler = getattr(optim.lr_scheduler, scheduler_type)(optimizer, **scheduler_kwargs)\n\n    def __call__(self, manager: ExtensionsManager) -> None:\n        self.scheduler.step()\n\n    def state_dict(self) -> None:\n        return self.scheduler.state_dict()\n\n    def load_state_dict(self, to_load) -> None:\n        self.scheduler.load_state_dict(to_load)\n","c1732e23":"from ignite.engine import Engine\n\n\ndef create_trainer(model, optimizer, device) -> Engine:\n    model.to(device)\n\n    def update_fn(engine, batch):\n        model.train()\n        optimizer.zero_grad()\n        loss, metrics = model(*[elem.to(device) for elem in batch])\n        loss.backward()\n        optimizer.step()\n        return metrics\n    trainer = Engine(update_fn)\n    return trainer\n","8ef04c52":"import dataclasses\nimport os\nimport sys\nfrom pathlib import Path\n\nimport numpy as np\nimport pandas as pd\nimport pytorch_pfn_extras.training.extensions as E\nimport torch\nfrom ignite.engine import Events\nfrom pytorch_pfn_extras.training import IgniteExtensionsManager\nfrom sklearn.model_selection import StratifiedKFold\nfrom torch import nn, optim\nfrom torch.utils.data.dataloader import DataLoader","3c709e2b":"skf = StratifiedKFold(n_splits=5, shuffle=True, random_state=flags.seed)\n# skf.get_n_splits(None, None)\ny = np.array([int(len(d[\"annotations\"]) > 0) for d in dataset_dicts])\nsplit_inds = list(skf.split(dataset_dicts, y))\ntrain_inds, valid_inds = split_inds[flags.target_fold]  # Choose which fold to train, 0th fold selected this time.\ntrain_dataset = VinbigdataTwoClassDataset(\n    [dataset_dicts[i] for i in train_inds], image_transform=Transform()\n)\nvalid_dataset = VinbigdataTwoClassDataset([dataset_dicts[i] for i in valid_inds])","83dfebf9":"# \u8bad\u7ec3\u96c6\u88c5\u8f7d\u5668\ntrain_loader = DataLoader(\n    train_dataset,\n    batch_size=flags.batchsize,\n    num_workers=flags.num_workers,\n    shuffle=True,\n    pin_memory=True,\n)\n# \u9a8c\u8bc1\u96c6\u88c5\u8f7d\u5668\nvalid_loader = DataLoader(\n    valid_dataset,\n    batch_size=flags.valid_batchsize,\n    num_workers=flags.num_workers,\n    shuffle=False,\n    pin_memory=True,\n)\n\ndevice = torch.device(flags.device)\n\npredictor = build_predictor(model_name=flags.model_name)\nclassifier = Classifier(predictor)\nmodel = classifier\noptimizer = optim.Adam(model.parameters(), lr=1e-3)\n\n# Train setup\ntrainer = create_trainer(model, optimizer, device)\n\nema = EMA(predictor, decay=flags.ema_decay)\n\ndef eval_func(*batch):\n    loss, metrics = model(*[elem.to(device) for elem in batch])\n    # HACKING: report ema value with prefix.\n    if flags.ema_decay > 0:\n        classifier.prefix = \"ema_\"\n        ema.assign()\n        loss, metrics = model(*[elem.to(device) for elem in batch])\n        ema.resume()\n        classifier.prefix = \"\"\n\nvalid_evaluator = E.Evaluator(\n    valid_loader, model, progress_bar=False, eval_func=eval_func, device=device\n)\n\n# log_trigger = (10 if debug else 1000, \"iteration\")\nlog_trigger = (1, \"epoch\")\nlog_report = E.LogReport(trigger=log_trigger)\nextensions = [\n    log_report,\n    E.ProgressBarNotebook(update_interval=10 if debug else 100),  # Show progress bar during training\n    E.PrintReportNotebook(),  # Show \"log\" on jupyter notebook  \n    # E.ProgressBar(update_interval=10 if debug else 100),  # Show progress bar during training\n    # E.PrintReport(),  # Print \"log\" to terminal\n    E.FailOnNonNumber(),  # Stop training when nan is detected.\n]\nepoch = flags.epoch\nmodels = {\"main\": model}\noptimizers = {\"main\": optimizer}\nmanager = IgniteExtensionsManager(\n    trainer, models, optimizers, epoch, extensions=extensions, out_dir=str(outdir),\n)\n# Run evaluation for valid dataset in each epoch.\nmanager.extend(valid_evaluator)\n\n# Save predictor.pt every epoch\nmanager.extend(\n    E.snapshot_object(predictor, \"predictor.pt\"), trigger=(flags.snapshot_freq, \"epoch\")\n)\n# Check & Save best validation predictor.pt every epoch\n# manager.extend(E.snapshot_object(predictor, \"best_predictor.pt\"),\n#                trigger=MinValueTrigger(\"validation\/module\/nll\",\n#                trigger=(flags.snapshot_freq, \"iteration\")))\n\n# --- lr scheduler ---\nif flags.scheduler_type != \"\":\n    scheduler_type = flags.scheduler_type\n    print(f\"using {scheduler_type} scheduler with kwargs {flags.scheduler_kwargs}\")\n    manager.extend(\n        LRScheduler(optimizer, scheduler_type, flags.scheduler_kwargs),\n        trigger=flags.scheduler_trigger,\n    )\n\nmanager.extend(E.observe_lr(optimizer=optimizer), trigger=log_trigger)\n\nif flags.ema_decay > 0:\n    # Exponential moving average\n    manager.extend(lambda manager: ema(), trigger=(1, \"iteration\"))\n\n    def save_ema_model(manager):\n        ema.assign()\n        torch.save(predictor.state_dict(), outdir \/ \"predictor_ema.pt\")\n        ema.resume()\n\n    manager.extend(save_ema_model, trigger=(flags.snapshot_freq, \"epoch\"))\n\n_ = trainer.run(train_loader, max_epochs=epoch)","8ab01633":"torch.save(predictor.state_dict(), outdir \/ \"predictor_last.pt\")\ndf = log_report.to_dataframe()\ndf.to_csv(outdir \/ \"log.csv\", index=False)\ndf","01d58c41":"# --- Prediction ---\n# \u4f5c\u9884\u6d4b\nprint(\"Training done! Start prediction...\")\n# valid data\n# \u5bf9\u9a8c\u8bc1\u96c6\u6570\u636e\u505a\u9884\u6d4b\nvalid_pred = classifier.predict_proba(valid_loader).cpu().numpy()\nvalid_pred_df = pd.DataFrame({\n    \"image_id\": [dataset_dicts[i][\"image_id\"] for i in valid_inds],\n    \"class0\": valid_pred[:, 0],\n    \"class1\": valid_pred[:, 1]\n})\nvalid_pred_df.to_csv(outdir\/\"valid_pred.csv\", index=False)\n\n# test data\n# \u8bfb\u53d6\u6d4b\u8bd5\u6570\u636e\ntest_meta = pd.read_csv(inputdir \/ \"vinbigdata-testmeta\" \/ \"test_meta.csv\")\ndataset_dicts_test = get_vinbigdata_dicts_test(imgdir, test_meta, debug=debug)\ntest_dataset = VinbigdataTwoClassDataset(dataset_dicts_test, train=False)\ntest_loader = DataLoader(\n    test_dataset,\n    batch_size=flags.valid_batchsize,\n    num_workers=flags.num_workers,\n    shuffle=False,\n    pin_memory=True,\n)\n\n# \u5bf9\u6d4b\u8bd5\u96c6\u6570\u636e\u505a\u9884\u6d4b\ntest_pred = classifier.predict_proba(test_loader).cpu().numpy()\ntest_pred_df = pd.DataFrame({\n    \"image_id\": [d[\"image_id\"] for d in dataset_dicts_test],\n    \"class0\": test_pred[:, 0],\n    \"class1\": test_pred[:, 1]\n})\ntest_pred_df.to_csv(outdir\/\"test_pred.csv\", index=False)","0f3d1644":"valid_loader.sampler","1b5219d5":"classifier.predict_proba(valid_loader.)","305a9849":"is_normal_df","28960117":"eqw","e7b10f98":"# --- Test dataset prediction result ---\ntest_pred_df","af03c946":"binary_clf=test_pred_df[['image_id','class0']]\n\nnew_col = ['image_id', 'target']\nbinary_clf.columns = new_col\nbinary_clf\nbinary_clf.to_csv(outdir \/ \"2-cls test pred.csv\", index=False)","e63225f4":"# \u753b\u51fa\u8bad\u7ec3\u96c6\u548c\u9a8c\u8bc1\u96c6\u7684\u6982\u7387\u5206\u5e03\nsns.distplot(valid_pred_df[\"class0\"].values, color='green', label='valid pred')\nsns.distplot(test_pred_df[\"class0\"].values, color='orange', label='test pred')\nplt.title(\"Prediction results histogram\")\nplt.xlim([0., 1.])\nplt.legend()","bbcdb8a8":"from sklearn.metrics import roc_curve, auc  ###\u8ba1\u7b97roc\u548cauc\nfrom sklearn import cross_validation\n\neqw=pd.merge(is_normal_df,valid_pred_df,on='image_id')\n\ntrue_class=eqw['num_normal_annotations'].tolist()\ntrue_class=np.array([0 if value == 0 else 1 for value in true_class])\n\npred_class=np.array(eqw['class0'].tolist())\n\n# Compute ROC curve and ROC area for each class\nfpr,tpr,threshold = roc_curve(true_class, pred_class) ###\u8ba1\u7b97\u771f\u6b63\u7387\u548c\u5047\u6b63\u7387\nroc_auc = auc(fpr,tpr) ###\u8ba1\u7b97auc\u7684\u503c\n\nplt.figure()\nlw = 2\nplt.figure(figsize=(10,10))\nplt.plot(fpr, tpr, color='darkorange',\n         lw=lw, label='ROC curve (area = %0.2f)' % roc_auc) ###\u5047\u6b63\u7387\u4e3a\u6a2a\u5750\u6807\uff0c\u771f\u6b63\u7387\u4e3a\u7eb5\u5750\u6807\u505a\u66f2\u7ebf\nplt.plot([0, 1], [0, 1], color='navy', lw=lw, linestyle='--')\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('Receiver operating characteristic example')\nplt.legend(loc=\"lower right\")\nplt.show()","f5189df0":"\u901a\u8fc7\u8bbf\u95eeLogReport\u7c7b\uff0c\u60a8\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u83b7\u5f97\u8bad\u7ec3\u5386\u53f2\u7ed3\u679c\uff0c\u8fd9\u5bf9\u4e8e\u7ba1\u7406kaggle\u6bd4\u8d5b\u671f\u95f4\u7684\u5927\u91cf\u5b9e\u9a8c\u975e\u5e38\u6709\u7528\u3002","ef14eaf2":"<a id=\"model\"><\/a>\n# Defining CNN models\n\nRecently, several libraries of CNN-collection are available on public.\n\nI will use `timm` this time. You don't need to impelment deep CNN models by yourself, you can just re-use latest research results without hustle.<br\/>\nYou can focus on more about looking data and try experiment now.","05e27ec9":"<a id=\"trainscript\"><\/a>\n# Training scripts","170c9aab":"<a id=\"nextstep\"><\/a>\n# Next step\n\nI explained EDA - Training - Prediction pipeline for 2-class image classification in this kernel.<br\/>\nYou can try changing training configurations by just changing `Flags` (`flags_dict`) configuration.\n\n\u6211\u89e3\u91ca\u4e86\u8be5\u5185\u6838\u4e2d\u7684EDA\u30012\u7c7b\u56fe\u50cf\u5206\u7c7b\u7684\u8bad\u7ec3-\u9884\u6d4b\u7ba1\u9053\u3002\n\n\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u4ec5\u901a\u8fc7\u66f4\u6539Flags\uff08flags_dict\uff09\u914d\u7f6e\u6765\u66f4\u6539\u8bad\u7ec3\u914d\u7f6e\u3002\n\n\n\nFor example, you can change these paramters:\n\n\u4f8b\u5982\uff0c\u60a8\u53ef\u4ee5\u66f4\u6539\u4ee5\u4e0b\u53c2\u6570\uff1a\n\n - **Data**\n   - `imgdir_name`: You can use different preprocessed image introduced in [Multiple preprocessed datasets: 256\/512\/1024px, PNG and JPG, modified and original ratio](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/discussion\/207955) by @xhlulu.\n - **Model**\n   - `model_name`: You can try various kinds of models `timm` library support, by just changing model_name.\n - **Training**\n   - `epoch`, `batch_size`, `scheduler_type` etc: Try changing these hyperparamters, to see the difference!\n   - Augmentation: Please modify `Transform` class to add your augmentation, it's easy to support more augmentations with `albumentations` library.\n\n\nMy basic strategy is as follows:\n - Check training loss\/training accuracy: If it is almost same with validation loss\/accuracy and it is not accurate enough, model's representation power may be not enough, or data augmentation is too strong. You can try more deeper models, decrease data augmentation or using more rich data (high-resolution image).\n - Check training loss\/validation loss difference: If validation loss is very high compared to training loss, it is a sign of overfitting. Try using smaller models, increase data augmentation or apply regularization (dropout etc).\n \n \u6211\u7684\u57fa\u672c\u7b56\u7565\u5982\u4e0b\uff1a\n\n\u68c0\u67e5\u8bad\u7ec3\u635f\u5931\/\u8bad\u7ec3\u51c6\u786e\u6027\uff1a\u5982\u679c\u4e0e\u9a8c\u8bc1\u635f\u5931\/\u51c6\u786e\u6027\u51e0\u4e4e\u76f8\u540c\u5e76\u4e14\u4e0d\u591f\u51c6\u786e\uff0c\u5219\u6a21\u578b\u7684\u8868\u793a\u80fd\u529b\u53ef\u80fd\u4e0d\u591f\uff0c\u6216\u8005\u6570\u636e\u589e\u5f3a\u592a\u5f3a\u3002 \u60a8\u53ef\u4ee5\u5c1d\u8bd5\u66f4\u6df1\u5165\u7684\u6a21\u578b\uff0c\u51cf\u5c11\u6570\u636e\u6269\u5145\u6216\u4f7f\u7528\u66f4\u4e30\u5bcc\u7684\u6570\u636e\uff08\u9ad8\u5206\u8fa8\u7387\u56fe\u50cf\uff09\u3002\n\n\u68c0\u67e5\u8bad\u7ec3\u635f\u5931\/\u9a8c\u8bc1\u635f\u5931\u5dee\u5f02\uff1a\u5982\u679c\u9a8c\u8bc1\u635f\u5931\u4e0e\u8bad\u7ec3\u635f\u5931\u76f8\u6bd4\u975e\u5e38\u9ad8\uff0c\u5219\u8868\u660e\u8fc7\u62df\u5408\u3002 \u5c1d\u8bd5\u4f7f\u7528\u8f83\u5c0f\u7684\u6a21\u578b\uff0c\u589e\u52a0\u6570\u636e\u6269\u5145\u6216\u5e94\u7528\u6b63\u5219\u5316\uff08dropout\u7b49\uff09\u3002","48baa819":"\u54c7\uff0c\u652f\u6301300\u591a\u79cd\u578b\u53f7\uff01\n\n\u5f53\u7136\uff0c\u5b83\u5305\u62ec\u4e0eResnet\u76f8\u5173\u7684\u6a21\u578b\uff0cefficiencynet\u7b49\u3002\n\n\u60a8\u53ef\u80fd\u60f3\u77e5\u9053\u5e94\u8be5\u4f7f\u7528\u54ea\u79cd\u6a21\u578b\uff1f\n\n\u9996\u5148\uff0c\u6211\u5c06\u4ee5resnet18\u4e3a\u57fa\u51c6\uff0c\u5e76\u5c1d\u8bd5\u5728\u5b9e\u9a8c\u4e2d\u4f7f\u7528\u66f4\u6df1\u5165\/\u6700\u65b0\u7684\u6a21\u578b\u3002","459fe8a3":"\u8fd9\u4e2aFlags\u7c7b\u6db5\u76d6\u4e86\u8bad\u7ec3\u671f\u95f4\u6240\u6709\u53ef\u7528\u7684\u914d\u7f6e\u3002\n\u6b63\u5982\u6211\u5c06\u5728\u540e\u9762\u5c55\u793a\u7684\uff0c\u60a8\u53ef\u4ee5\u66f4\u6539\u5404\u79cd\u8d85\u53c2\u6570\u6765\u8bd5\u9a8c\u6539\u8fdb\u60a8\u7684\u6a21\u578b\uff01","c3c56084":"\u90a3\u4e48\uff0c\u4ee5\u4e0a\u8bad\u7ec3\u62bd\u8c61\u53d1\u751f\u4e86\u4ec0\u4e48\uff1f \u8ba9\u6211\u4eec\u4e86\u89e3\u6bcf\u4e2a\u6269\u5c55\u7684\u529f\u80fd\u3002\n\n\u6269\u5c55-\u6bcf\u4e2a\u89d2\u8272\uff1a\n\nProgressBar\uff08ProgressBarNotebook\uff09\uff1a\u4ee5\u683c\u5f0f\u5316\u7684\u6837\u5f0f\u663e\u793a\u8bad\u7ec3\u8fdb\u5ea6\u3002\n\nLogReport\uff1a\u8bb0\u5f55\u7531ppe.reporter.report\u62a5\u544a\u7684\u5ea6\u91cf\u6807\u51c6\uff08\u6709\u5173\u62a5\u544a\u70b9\uff0c\u8bf7\u53c2\u89c1LyftMultiRegressor\uff09\uff0c\u5e76\u4fdd\u5b58\u5230\u65e5\u5fd7\u6587\u4ef6\u4e2d\u3002 \u5b83\u4f1a\u5728\u6bcf\u6b21\u8fed\u4ee3\u4e2d\u81ea\u52a8\u6536\u96c6\u62a5\u544a\u503c\uff0c\u5e76\u4ee5\u5e38\u89c4\u9891\u7387\uff08\u4f8b\u5982\uff0c\u6bcf1\u4e2a\u5468\u671f\uff09\u4fdd\u5b58\u62a5\u544a\u503c\u7684\u201c\u5e73\u5747\u503c\u201d\u3002\n\nPrintReport\uff08PrintReportNotebook\uff09\uff1a\u4ee5\u683c\u5f0f\u5316\u7684\u6837\u5f0f\u6253\u5370LogReport\u6536\u96c6\u7684\u503c\u3002\n\nEvaluator\uff1a\u8bc4\u4f30\u9a8c\u8bc1\u6570\u636e\u96c6\u3002\n\nsnapshot_object\uff1a\u4fdd\u5b58\u5bf9\u8c61\u3002 \u5728\u8fd9\u91cc\uff0c\u6a21\u578b\u4ee5\u89c4\u5219\u7684\u65f6\u95f4\u95f4\u9694flags.snapshot_freq\u4fdd\u5b58\u3002 \u5373\u4f7f\u60a8\u5728\u6ca1\u6709\u5b8c\u6210\u6240\u6709\u7eaa\u5143\u7684\u60c5\u51b5\u4e0b\u4f7f\u7528Ctrl + C\u9000\u51fa\u4e86\u8bad\u7ec3\uff0c\u4e2d\u95f4\u8bad\u7ec3\u7684\u6a21\u578b\u4e5f\u4f1a\u88ab\u4fdd\u5b58\uff0c\u60a8\u53ef\u4ee5\u5c06\u5176\u7528\u4e8e\u63a8\u7406\u3002\n\nLRScheduler\uff1a\u60a8\u53ef\u4ee5\u63d2\u5165\u5e26\u6709\u6b64\u6269\u5c55\u540d\u7684\u5b66\u4e60\u7387\u8ba1\u5212\uff0c\u4ee5\u53ca\u89e6\u53d1\u5668\u6307\u5b9a\u7684\u5e38\u89c4\u95f4\u9694\u8c03\u7528\u3002 \u8fd9\u91cc\uff0c\u901a\u8fc7\u6bcf\u6b21\u8fed\u4ee3\u8c03\u7528scheduler.step\uff08\uff09\u6765\u5e94\u7528\u4f59\u5f26\u9000\u706b\uff08\u7531Flags\u914d\u7f6e\uff09\u3002\n\nwatch_lr\uff1aLogReport\u5c06\u4f7f\u7528\u6b64\u6269\u5c55\u540d\u68c0\u67e5\u4f18\u5316\u5668\u7684\u5b66\u4e60\u7387\u3002 \u56e0\u6b64\uff0c\u60a8\u53ef\u4ee5\u901a\u8fc7\u57f9\u8bad\u4e86\u89e3\u5b66\u4e60\u7387\u7684\u53d8\u5316\u3002\n\n\u4f7f\u7528\u6269\u5c55\u53ef\u4ee5\u8f7b\u677e\u5730\u201c\u6dfb\u52a0\u201d\u8fd9\u4e48\u591a\u7684\u529f\u80fd\uff01Evaluator","fd04875e":"So what is happening in above training abstraction? Let's understand what each extension did.\n\n**Extensions** - Each role:\n - **`ProgressBar` (`ProgressBarNotebook`)**: Shows training progress in formatted style.\n - **`LogReport`**: Logging metrics reported by `ppe.reporter.report` (see `LyftMultiRegressor` for reporting point) method and save to **log** file. It automatically collects reported value in each iteration and saves the \"mean\" of reported value for regular frequency (for example every 1 epoch).\n - **`PrintReport` (`PrintReportNotebook`)**: Prints the value which `LogReport` collected in formatted style.\n - **`Evaluator`**: Evaluate on validation dataset.\n - **`snapshot_object`**: Saves the object. Here the `model` is saved in regular interval `flags.snapshot_freq`. Even you quit training using Ctrl+C without finishing all the epoch, the intermediate trained model is saved and you can use it for inference.\n - **`LRScheduler`**: You can insert learning rate scheduling with this extension, together with the regular interval call specified by `trigger`. Here cosine annealing is applied (configured by Flags) by calling `scheduler.step()` every iteration.\n - **`observe_lr`**: `LogReport` will check optimizer's learning rate using this extension. So you can follow how the learning rate changed through the training.\n\n\nSuch many functionalities can be \"added\" easily using extensions!","4dd902c2":"\u4e3a\u4e86\u5728\u56fe\u50cf\u4e0a\u8fd0\u884c\u589e\u5f3a\uff0c\u6211\u5c06\u5b9a\u4e49Transform\u7c7b\uff0c\u6bcf\u6b21\u8bbf\u95ee\u6570\u636e\u65f6\u5e94\u7528\u5b83\u3002\n\u4f60\u53ef\u4ee5\u53c2\u8003albumentations\u9875\u9762\uff0c\u5404\u79cd\u6269\u5c55\u5df2\u7ecf\u5b9e\u73b0\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u4f7f\u7528!","f0639735":"What kind of models are supported in the `timm` library?","ee6a35c1":"Also **Exponential Moving Average of model weights** is calculated by `EMA` class during training, together with showing its validation loss. We can usually obtrain more stable models with EMA.","1ec25f74":"To run augmentation on this image, I will define `Transform` class which is applied each time the data is accessed.\n\nYou can refer [albumentations](https:\/\/github.com\/albumentations-team\/albumentations) page, that various kinds of augmentation is already implemented and can be used very easily!","2e655b5b":"## Write training code\n\npytorch-ignite & pytorch-pfn-extras are used here.\n\n - [pytorch\/ignite](https:\/\/github.com\/pytorch\/ignite): It provides abstraction for writing training loop.\n - [pfnet\/pytorch-pfn-extras](https:\/\/github.com\/pfnet\/pytorch-pfn-extras): It provides several \"extensions\" useful for training. Useful for **logging, printing, evaluating, saving the model, scheduling the learning rate** during training.\n \n**[Note] Why training abstraction library is used?**\n\nYou may feel understanding training abstraction code below is a bit unintuitive compared to writing \"raw\" training loop.<br\/>\nThe advantage of abstracting the code is that we can re-use implemented handler class for other training, other competition.<br\/>\nYou don't need to write code for saving models, logging training loss\/metric, show progressbar etc.\nThese are done by provided util classes in `pytorch-pfn-extras` library!\n\nYou may refer my other kernel in previous competition too:\n - [Bengali: SEResNeXt training with pytorch](https:\/\/www.kaggle.com\/corochann\/bengali-seresnext-training-with-pytorch)\n - [Lyft: Training with multi-mode confidence](https:\/\/www.kaggle.com\/corochann\/lyft-training-with-multi-mode-confidence)","caa183fb":"Let's visualize, looks good. <br\/>\nYou can see each image looks different (rotated, brightness is different etc...) even if it is generated from the same image :)","9346cca8":"You can obtrain training history results really easily by just accessing `LogReport` class, which is useful for managing a lot of experiments during kaggle competitions.","077029d8":"<a id=\"prediction\"><\/a>\n# Prediction on validation & test dataset","8baeca99":"<a id=\"eda\"><\/a>\n# EDA: distribution between normal & abnormal class\n\nAt first, let's check how many normal class exist in the training data.\nIt is classified as \"class_name = No finding\" and \"class_id = 14\".\n\nHowever you need to be careful that 3 radiologists annotated for each image, so you can find 3 annotations as you can see below.","2faef1ba":"# Next to read\n\n[\ud83d\udcf8VinBigData detectron2 train](https:\/\/www.kaggle.com\/corochann\/vinbigdata-detectron2-train) kernel explains how to run object detection training, using `detectron2` library.\n\n[\ud83d\udcf8VinBigData detectron2 prediction](https:\/\/www.kaggle.com\/corochann\/vinbigdata-detectron2-prediction) kernel explains how to use trained model for the prediction and submisssion for this competition.","b2eb7fb4":"timm\u5e93\u652f\u6301\u54ea\u4e9b\u6a21\u578b\uff1f","9f7f9089":"\u5f53\u4f60\u8bad\u7ec3CNN\u6a21\u578b\u65f6\uff0c\u56fe\u50cf\u589e\u5f3a\u5bf9\u4e8e\u907f\u514d\u6a21\u578b\u8fc7\u62df\u5408\u662f\u5f88\u91cd\u8981\u7684\u3002\n\u6211\u5c06\u5c55\u793a\u4f7f\u7528Albumentations\u975e\u5e38\u5bb9\u6613\u5730\u8fd0\u884c\u56fe\u50cf\u589e\u5f3a\u7684\u793a\u4f8b\u3002\n   \u9996\u5148\uff0c\u6211\u5c06\u4e3a\u8fd9\u4e2a\u7ade\u8d5b\u5b9a\u4e49pytorch Dataset\u7c7b\uff0c\u5b83\u4e5f\u53ef\u4ee5\u5728\u7a0d\u540e\u7684\u8bad\u7ec3\u4e2d\u4f7f\u7528\u3002","393b24ee":"<a id=\"installation\"><\/a>\n# Installation\n\ndetectron2 is not pre-installed in this kaggle docker, so let's install it. \nWe can follow [installation instruction](https:\/\/github.com\/facebookresearch\/detectron2\/blob\/master\/INSTALL.md), we need to know CUDA and pytorch version to install correct `detectron2`.\n\ndetectron2\u6ca1\u6709\u9884\u5148\u5b89\u88c5\u5728\u8fd9\u4e2akaggle docker\u4e2d\uff0c\u6240\u4ee5\u8ba9\u6211\u4eec\u6765\u5b89\u88c5\u5b83\u3002\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u5b89\u88c5\u8bf4\u660e\uff0c\u6211\u4eec\u9700\u8981\u77e5\u9053CUDA\u548cpytorch\u7248\u672c\u6765\u5b89\u88c5\u6b63\u786e\u7684detectron2\u3002","99bf2c1c":"<a id=\"trainutil\"><\/a>\n# Training utils\n\nHere are training util methods. You can just copy these to use in other projects.","96dc3d90":"\u6b63\u6001\u548c\u5f02\u5e38\u7c7b\u4e4b\u95f4\u7684\u5206\u5e03\u9996\u5148\uff0c\u6211\u4eec\u68c0\u67e5\u4e00\u4e0b\u8bad\u7ec3\u6570\u636e\u4e2d\u5b58\u5728\u591a\u5c11\u6b63\u6001\u7c7b\u3002\u5b83\u88ab\u5206\u7c7b\u4e3a\u201cclass_name=no finding\u201d\u548c\u201cclass_id = 14\u201d\u3002\u7136\u800c\uff0c\u4f60\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c3\u540d\u653e\u5c04\u79d1\u533b\u751f\u4e3a\u6bcf\u4e00\u5f20\u56fe\u50cf\u505a\u4e86\u6ce8\u91ca\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u627e\u52303\u4e2a\u6ce8\u91ca\uff0c\u5982\u4e0b\u6240\u793a\u3002","d0fc1625":"So the question arises, is there an image that the 3 radiologists' opinions differ?\n\nLet's check number of \"No finding\" annotations for each image, if the opinions are in complete agreement the number of \"No finding\" annotations should be **0 -> Abnormal(all radiologists does not think this is normal)\" or \"1 -> Normal(all radiologists think this is normal)\"**.","83f68f90":"\u7f16\u5199\u57f9\u8bad\u4ee3\u7801\n\n\u6b64\u5904\u4f7f\u7528pytorch-ignite\u548cpytorch-pfn-extras\u3002\n\npytorch \/ ignite\uff1a\u4e3a\u7f16\u5199\u8bad\u7ec3\u5faa\u73af\u63d0\u4f9b\u62bd\u8c61\u3002\n\npfnet \/ pytorch-pfn-extras\uff1a\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5bf9\u57f9\u8bad\u6709\u7528\u7684\u201c\u6269\u5c55\u201d\u3002 \u5bf9\u4e8e\u8bb0\u5f55\uff0c\u6253\u5370\uff0c\u8bc4\u4f30\uff0c\u4fdd\u5b58\u6a21\u578b\uff0c\u5b89\u6392\u8bad\u7ec3\u671f\u95f4\u7684\u5b66\u4e60\u7387\u5f88\u6709\u7528\u3002\n\n[\u6ce8\u610f]\u4e3a\u4ec0\u4e48\u8981\u4f7f\u7528\u8bad\u7ec3\u62bd\u8c61\u5e93\uff1f\n\n\u4e0e\u7f16\u5199\u201c\u539f\u59cb\u201d\u8bad\u7ec3\u5faa\u73af\u76f8\u6bd4\uff0c\u60a8\u53ef\u80fd\u4f1a\u89c9\u5f97\u7406\u89e3\u4e0b\u9762\u7684\u8bad\u7ec3\u62bd\u8c61\u4ee3\u7801\u6709\u70b9\u4e0d\u76f4\u89c2\u3002\n\n\u62bd\u8c61\u4ee3\u7801\u7684\u4f18\u70b9\u662f\u6211\u4eec\u53ef\u4ee5\u5c06\u5b9e\u73b0\u7684\u5904\u7406\u7a0b\u5e8f\u7c7b\u91cd\u65b0\u7528\u4e8e\u5176\u4ed6\u57f9\u8bad\u548c\u5176\u4ed6\u6bd4\u8d5b\u3002\n\n\u60a8\u65e0\u9700\u7f16\u5199\u4ee3\u7801\u6765\u4fdd\u5b58\u6a21\u578b\uff0c\u8bb0\u5f55\u8bad\u7ec3\u635f\u5931\/\u6307\u6807\uff0c\u663e\u793a\u8fdb\u5ea6\u6761\u7b49\u3002\u8fd9\u4e9b\u64cd\u4f5c\u7531pytorch-pfn-extras\u5e93\u4e2d\u63d0\u4f9b\u7684util\u7c7b\u5b8c\u6210\uff01\n\n\n\n\u60a8\u4e5f\u53ef\u4ee5\u5728\u4ee5\u524d\u7684\u6bd4\u8d5b\u4e2d\u5f15\u7528\u6211\u7684\u5176\u4ed6\u5185\u6838\uff1a\n\n\u5b5f\u52a0\u62c9\u8bed\uff1a\u4f7f\u7528pytorch\u8fdb\u884cSEResNeXt\u57f9\u8bad\n\nLyft\uff1a\u5145\u6ee1\u4fe1\u5fc3\u5730\u8fdb\u884c\u8bad\u7ec3","584cda77":"<a id=\"aug\"><\/a>\n# Image visualizaion & augmentation with albumentations\n\nWhen you train CNN models, image augmentation is important to avoid model to overfit.<br\/>\nI'll show examples to use Albumentations to run image augmentation very easily.<br\/>\nAt first, I will define pytorch Dataset class for this competition, which can be also used later in the training.","551fd779":"Wow more than 300 models are supported!<br\/>\nIt of course includes **resnet** related models, **efficientnet**, etc.<br\/>\nYou may wonder which model should be used?<br\/>\nI will go with `resnet18` as a baseline at first, and try using more deeper\/latest models in the experiment.","d353ad8a":"# Table of Contents\n\n** [Dataset preparation](#dataset)** <br\/>\n** [Installation](#installation)** <br\/>\n** [EDA: distribution between normal & abnormal class](#eda)** <br\/>\n** [Image visualizaion & augmentation with albumentations](#aug)** <br\/>\n** [Defining CNN models](#model)** <br\/>\n** [Training utils](#trainutil)** <br\/>\n** [Training scripts](#trainscript)** <br\/>\n** [Prediction on validation & test dataset](#prediction)** <br\/>\n** [Next step](#nextstep)** <br\/>","d6ac9951":"That's all!\n\n<h3 style=\"color:red\">If this kernel helps you, please upvote to keep me motivated \ud83d\ude01<br>Thanks!<\/h3>","3ea43fe7":"\u8fd9\u91cc\u662f\u8bad\u7ec3util\u65b9\u6cd5\u3002\u60a8\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u590d\u5236\u5230\u5176\u4ed6\u9879\u76ee\u4e2d\u4f7f\u7528\u3002","27dab748":"\u60a8\u53ef\u4ee5\u8bbf\u95ee\u6bcf\u4e2a\u56fe\u50cf\u53ca\u5176\u6807\u7b7e(0=\u6b63\u5e38\uff0c1=\u4e0d\u6b63\u5e38)\u4ec5\u901a\u8fc7\u8bbf\u95ee\u5177\u6709\u7d22\u5f15\u7684\u6570\u636e\u96c6\u3002","22b32d4e":"\u901a\u8fc75\u500d\u4ea4\u53c9\u9a8c\u8bc1\u51c6\u5907\u6570\u636e\n\n\u5f53\u6211\u4eec\u7684\u6570\u636e\u5f88\u5c11\u65f6\uff0c\u8fdb\u884c\u7a33\u5b9a\u7684\u8bc4\u4f30\u975e\u5e38\u91cd\u8981\u3002 \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4ea4\u53c9\u9a8c\u8bc1\u6765\u51cf\u5c11\u9a8c\u8bc1\u9519\u8bef\u7684\u6807\u51c6\u504f\u5dee\u3002\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u4f7f\u7528StratifiedKFold\u6765\u4fdd\u6301\u8bad\u7ec3\u548c\u9a8c\u8bc1\u6570\u636e\u96c6\u7684\u6b63\u5e38\/\u5f02\u5e38\u6bd4\u7387\u4e4b\u95f4\u7684\u5e73\u8861\u76f8\u540c\u3002\n\n\u6839\u636e\u6b64\u8ba8\u8bba\uff0c\u4f7f\u7528\u591a\u6807\u7b7e\u5206\u5c42kfold https:\/\/github.com\/trent-b\/iterative-stratification\u53ef\u80fd\u66f4\u7a33\u5b9a\u3002","16f241f6":"\u6570\u636e\u51c6\u5907\n\n@xhlulu\u5728\u4e0b\u9762\u7684\u8ba8\u8bba\u4e2d\u5df2\u7ecf\u5c06x\u5c04\u7ebf\u56fe\u50cf\u683c\u5f0f\uff08dicom\uff09\u9884\u5904\u7406\u4e3a\u666e\u901apng\u56fe\u50cf\u683c\u5f0f\uff1a\n\n\u591a\u4e2a\u9884\u5904\u7406\u6570\u636e\u96c6\uff1a256\/512 \/ 1024px\uff0cPNG\u548cJPG\uff0c\u4fee\u6539\u540e\u7684\u6bd4\u4f8b\u548c\u539f\u59cb\u6bd4\u4f8b\u3002\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u4ec5\u4f7f\u7528\u6570\u636e\u96c6VinBigData\u80f8\u90e8X\u5c04\u7ebf\u8c03\u6574\u5927\u5c0f\u7684PNG\uff08256x256\uff09\u6765\u8df3\u8fc7\u9884\u5904\u7406\u5e76\u4e13\u6ce8\u4e8e\u5efa\u6a21\u90e8\u5206\u3002","05ae10b6":"So almost 70% of the data is actually \"Normal\" X-ray images.\n\nOnly 30% of the images need thoracic abnormality location detection.","1725dd47":"<a id=\"dataset\"><\/a>\n# Dataset preparation\n\nPreprocessing x-ray image format (dicom) into normal png image format is already done by @xhlulu in the below discussion:\n - [Multiple preprocessed datasets: 256\/512\/1024px, PNG and JPG, modified and original ratio](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/discussion\/207955).\n\nHere I will just use the dataset [VinBigData Chest X-ray Resized PNG (256x256)](https:\/\/www.kaggle.com\/xhlulu\/vinbigdata-chest-xray-resized-png-256x256) to skip the preprocessing and focus on modeling part. Please upvote the dataset as well!","c85d1115":"You can access each image and its label (0=Normal, 1=Abnormal) by just access `dataset` with index.","f1ef0370":"\u5b9a\u4e49CNN\u6a21\u578b\n\n\u6700\u8fd1\uff0cCNN\u96c6\u5408\u7684\u51e0\u4e2a\u5e93\u516c\u5f00\u53ef\u7528\u3002\n\n\u8fd9\u6b21\u6211\u5c06\u4f7f\u7528timm\u3002 \u60a8\u65e0\u9700\u81ea\u5df1\u63a8\u52a8\u6df1\u5c42\u7684CNN\u6a21\u578b\uff0c\u60a8\u53ef\u4ee5\u8f7b\u677e\u4f7f\u7528\u6700\u65b0\u7684\u7814\u7a76\u7ed3\u679c\u3002\n\n\u60a8\u53ef\u4ee5\u96c6\u4e2d\u7cbe\u529b\u67e5\u770b\u6570\u636e\u5e76\u7acb\u5373\u5c1d\u8bd5\u8fdb\u884c\u5b9e\u9a8c\u3002","e763e56f":"\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u8fd9\u4e09\u4f4d\u653e\u5c04\u5b66\u5bb6\u662f\u5426\u6709\u4e0d\u540c\u7684\u770b\u6cd5?\n\u8ba9\u6211\u4eec\u68c0\u67e5\u6bcf\u4e2a\u56fe\u50cf\u7684\u201c\u65e0\u53d1\u73b0\u201d\u6ce8\u91ca\u7684\u6570\u91cf\uff0c\u5982\u679c\u610f\u89c1\u5b8c\u5168\u4e00\u81f4\uff0c\u201c\u65e0\u53d1\u73b0\u201d\u6ce8\u91ca\u7684\u6570\u91cf\u5e94\u8be5\u662f\u201c0 ->\u5f02\u5e38(\u6240\u6709\u653e\u5c04\u79d1\u533b\u751f\u8ba4\u4e3a\u8fd9\u662f\u6b63\u5e38\u7684)\u201d\u6216\u201c1 ->\u6b63\u5e38(\u6240\u6709\u653e\u5c04\u79d1\u533b\u751f\u8ba4\u4e3a\u8fd9\u662f\u6b63\u5e38\u7684)\u201d\u3002","45cb7aa5":"To use augmentation, you can just define dataset with the `Transform` function.","6cab1e66":"\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-forum-message-attachments\/o\/inbox%2F518134%2F68421364ae2731375c0f59fd1749c845%2Fpexels-ivan-samkov-4989186.jpg?generation=1611197793386796&alt=media)\n<div style=\"text-align:center;\"><cite>Image from <a href=\"https:\/\/www.pexels.com\/ja-jp\/photo\/4989186\/\">https:\/\/www.pexels.com\/ja-jp\/photo\/4989186\/<\/a><\/cite><\/div>\n\n<br\/>\n\n# VinBigData 2-class classifier complete pipeline\n\nThis competition is object detaction task to find a class and location of thoracic abnormalities from chest x-ray image (radiographs).\n\nHowever, it is mentioned that training 2 class classifier to understand which is the normal image is important to get high score.\n\n\u672c\u7ade\u8d5b\u7684\u76ee\u7684\u662f\u901a\u8fc7\u80f8\u90e8x\u7ebf\u7247\u53d1\u73b0\u80f8\u90e8\u5f02\u5e38\u7684\u7c7b\u522b\u548c\u4f4d\u7f6e\u3002\n\u4f46\u662f\uff0c\u8981\u60f3\u83b7\u5f97\u9ad8\u5206\uff0c\u8bad\u7ec32\u4e2a\u5206\u7c7b\u5668\u4e86\u89e3\u54ea\u4e00\u4e2a\u662f\u6b63\u5e38\u56fe\u50cf\u662f\u5f88\u91cd\u8981\u7684\u3002\n - Kernel: [VinBigData \ud83c\udf1f2 Class Filter\ud83c\udf1f](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-2-class-filter)\n - Discussion: [[LB0.155] baseline solution](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/discussion\/208837)\n\nHere, I will introduce complete **EDA, Training (with 5-fold cross validation) and Prediction pipeline** for training 2-class classifier.\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u4ecb\u7ecd\u5b8c\u6574\u7684EDA\u3001\u8bad\u7ec3(\u4f7f\u75285\u6298\u4ea4\u53c9\u9a8c\u8bc1)\u548c\u8bad\u7ec32\u7c7b\u5206\u7c7b\u5668\u7684\u9884\u6d4b\u7ba1\u9053\u3002\n\nYou can learn the usage of following tools to accelerate deep learning tasks in computer vision!\n - [pytorch](https:\/\/github.com\/pytorch\/pytorch): Deep learning framework, it's popular among researchers for its flexible usage. no need to explain detail!\n - [albumentations](https:\/\/github.com\/albumentations-team\/albumentations): Image augmentation library, developed by famous kagglers!\n - [timm](https:\/\/github.com\/rwightman\/pytorch-image-models): pytorch-image-models, it provides a lot of popular SoTA CNN models with pretrained weights.\n - [pytorch ignite](https:\/\/github.com\/pytorch\/ignite): Traning\/Evaluation abstraction framework on top of pytorch.\n - [pytorch pfn extras](https:\/\/github.com\/pfnet\/pytorch-pfn-extras): It is used to add more feature-rich functionality on Ignite.\n \u5728\u8fd9\u91cc\uff0c\u6211\u5c06\u4ecb\u7ecd\u5b8c\u6574\u7684EDA\uff0c\u8bad\u7ec3\uff08\u5177\u67095\u500d\u4ea4\u53c9\u9a8c\u8bc1\uff09\u548c\u9884\u6d4b\u7ba1\u9053\uff0c\u7528\u4e8e\u8bad\u7ec32\u7c7b\u5206\u7c7b\u5668\u3002\n\n\u60a8\u53ef\u4ee5\u5b66\u4e60\u4ee5\u4e0b\u5de5\u5177\u7684\u7528\u6cd5\uff0c\u4ee5\u52a0\u901f\u8ba1\u7b97\u673a\u89c6\u89c9\u4e2d\u7684\u6df1\u5ea6\u5b66\u4e60\u4efb\u52a1\uff01\n\npytorch\uff1a\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\uff0c\u7531\u4e8e\u5176\u7075\u6d3b\u7684\u7528\u6cd5\u800c\u5728\u7814\u7a76\u4eba\u5458\u4e2d\u5f88\u53d7\u6b22\u8fce\u3002 \u65e0\u9700\u89e3\u91ca\u7ec6\u8282\uff01\n\nalbumentations\uff1a\u56fe\u50cf\u589e\u5f3a\u5e93\uff0c\u7531\u8457\u540d\u7684kagglers\u5f00\u53d1\uff01\n\ntimm\uff1apytorch-image-models\uff0c\u5b83\u63d0\u4f9b\u4e86\u8bb8\u591a\u6d41\u884c\u7684\u5177\u6709\u9884\u8bad\u7ec3\u6743\u91cd\u7684SoTA CNN\u6a21\u578b\u3002\n\npytorch ignite\uff1a\u5728pytorch\u4e4b\u4e0a\u7684Traning \/ Evaluation\u62bd\u8c61\u6846\u67b6\u3002\n\npytorch pfn extras\uff1a\u7528\u4e8e\u5728Ignite\u4e0a\u6dfb\u52a0\u66f4\u591a\u529f\u80fd\u4e30\u5bcc\u7684\u529f\u80fd\u3002","5f1a50ec":"## Preparing data by 5-fold cross validation\n\nWhen we have few data, running stable evaluation is very important. \nWe can use cross validation to reduce validation error standard deviation.\n\nHere, I will use **[`StratifiedKFold`](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.StratifiedKFold.html)** to keep the balance between normal\/abnormal ratio same for the train & validation dataset.\n\nAccording to [this discussion](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection\/discussion\/208837#1139712), using multi label stratified kfold https:\/\/github.com\/trent-b\/iterative-stratification may be more stable.","f7a6faf2":"We could confirm that **always 3 radiologists opinions match** for normal - abnormal diagnosis.\n\n[Note] I noticed that it does not apply for the other classes. i.e., 3 radiologists opinions sometimes do not match for the other class of thoracic abnormalities.","a96bb76b":"\u56e0\u6b64\uff0c\u51e0\u4e4e70%\u7684\u6570\u636e\u5b9e\u9645\u4e0a\u662f\u201c\u6b63\u5e38\u7684\u201dx\u5c04\u7ebf\u56fe\u50cf\u3002\u53ea\u670930%\u7684\u56fe\u50cf\u9700\u8981\u80f8\u90e8\u5f02\u5e38\u5b9a\u4f4d\u3002","859c786f":"Now creating the dataset is just easy as following:","ffaec7a1":"\u6211\u4eec\u53ef\u4ee5\u786e\u8ba4\uff0c\u5bf9\u4e8e\u6b63\u5e38-\u5f02\u5e38\u8bca\u65ad\uff0c\u603b\u662f\u67093\u4f4d\u653e\u5c04\u79d1\u533b\u751f\u7684\u610f\u89c1\u5339\u914d\u3002\n\n[\u6ce8\u610f]\u6211\u6ce8\u610f\u5230\u5b83\u4e0d\u9002\u7528\u4e8e\u5176\u4ed6\u7c7b\u7684\u75c5\u3002 \u5373\uff0c3\u4f4d\u653e\u5c04\u79d1\u533b\u751f\u7684\u610f\u89c1\u6709\u65f6\u4e0e\u53e6\u4e00\u7c7b\u80f8\u8154\u5f02\u5e38\u4e0d\u7b26\u3002\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6709\u75c5\u6ca1\u75c5\uff0c\u4e09\u4e2a\u533b\u751f\u7684\u610f\u89c1\u662f\u4e00\u81f4\u7684\u3002\n\u4f46\u662f\u5177\u4f53\u662f\u4ec0\u4e48\u75c5\uff0c\u75c5\u533a\u662f\u54ea\u5757\uff0c\u610f\u89c1\u4e0d\u4e00\u81f4\u3002","304ff42e":"\u6b64\u5916\uff0cEMA\u7c7b\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u6a21\u578b\u6743\u503c\u7684\u6307\u6570\u79fb\u52a8\u5e73\u5747\uff0c\u5e76\u663e\u793a\u5176\u6709\u6548\u6027\u635f\u5931\u3002\u6211\u4eec\u901a\u5e38\u53ef\u4ee5\u7528EMA\u5f97\u5230\u66f4\u7a33\u5b9a\u7684\u6a21\u578b\u3002","7a1ba2ce":"This `Flags` class summarizes all the configuratoin available during the training.\n\nAs I will show later, you can change various hyperparameters to experiment improving your models!","ed7b07ec":"\u8fd9\u4e24\u4e2aNotebook\uff0c\u89e3\u91ca\u4e86\u5982\u4f55\u53bb\u8bad\u7ec3\uff0c\u5982\u4f55\u53bb\u9884\u6d4b","41ed80b4":"\u8ba9\u6211\u4eec\u53ef\u89c6\u5316\u4e00\u4e0b\uff0c\u770b\u8d77\u6765\u4e0d\u9519\u3002\n\n\u60a8\u53ef\u4ee5\u770b\u5230\u6bcf\u4e2a\u56fe\u50cf\u770b\u8d77\u6765\u90fd\u4e0d\u540c\uff08\u65cb\u8f6c\uff0c\u4eae\u5ea6\u4e0d\u540c\u7b49\uff09\uff0c\u5373\u4f7f\u5b83\u662f\u4ece\u540c\u4e00\u56fe\u50cf\u751f\u6210\u7684\u4e5f\u662f\u5982\u6b64\uff1a\uff09"}}