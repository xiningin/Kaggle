{"cell_type":{"a84f3f21":"code","12476c1c":"code","5c225b6c":"code","8427bfbd":"code","628eed7c":"code","24d8dac5":"code","41a6bace":"code","783383df":"code","9f246947":"code","1d64448f":"code","15f8d99a":"code","8683aeaf":"code","4e32e3ed":"code","b2b8a2df":"code","ccc82457":"code","9c313457":"code","ec8bce55":"code","7954593e":"code","080a7a60":"code","fe14ae46":"code","97d9936e":"code","eb5a39b3":"code","de098344":"code","4f2a721a":"code","5acf58e4":"code","078c8761":"code","fd5aebc4":"code","1b5f05d9":"code","6f4ff5c2":"code","a811c4e2":"code","319167dc":"code","bdc0644b":"code","1925d263":"code","a21beebf":"code","fbedde3f":"code","3d272a6e":"code","46f4ef1a":"code","b08d76b0":"code","0a0c6480":"code","c179a18d":"code","0da8f8e6":"code","25903933":"code","d81b50c6":"code","56b4f7e7":"code","403c76ae":"code","0df40875":"code","351984a4":"code","affc8929":"code","9caa5273":"code","fa9ed116":"code","8f618834":"code","71cbc03c":"code","e044f76d":"code","1155bdc5":"code","660470b7":"code","55c02e67":"code","eb55c3bf":"code","bf67f4e7":"code","f1a2e864":"code","0dd4f2df":"code","34a6907f":"code","5798d1e6":"markdown","7d6525d2":"markdown","1b0ce5e5":"markdown","f8eb7313":"markdown","7e528082":"markdown","411fa61d":"markdown","bf801a02":"markdown","9625759e":"markdown","1e7a1a6c":"markdown","c7997800":"markdown","21707509":"markdown","4eb23dde":"markdown","68017b70":"markdown","7b05d110":"markdown","37fcd6a7":"markdown","fe3f9dff":"markdown","33c146f0":"markdown","89bc066e":"markdown","56feb5ba":"markdown","cf3b384e":"markdown","69c8f8fe":"markdown","0291380a":"markdown","423c0cd8":"markdown","ae650229":"markdown","02588e46":"markdown","258fb763":"markdown"},"source":{"a84f3f21":"## import required libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas_profiling\nimport plotly.figure_factory as ff\nfrom plotly.offline import init_notebook_mode, iplot\nimport plotly.graph_objs as go\nimport plotly\nfrom plotly import tools\nimport warnings\nwarnings.filterwarnings('ignore')","12476c1c":"df=pd.read_csv(\"..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\")","5c225b6c":"df.head() ##sample dataset","8427bfbd":"df.describe().T    ## basic information about dataset","628eed7c":"## creating table of freuency through plotly \ncat = ff.create_table(df.describe(include=['O']).T, index=True, index_title='Categorical columns')\niplot(cat)","24d8dac5":"df.info() ## dataset information","41a6bace":"df.shape","783383df":"df.isnull().sum() ## checking for null values","9f246947":"df.columns ## columns present in dataset","1d64448f":"df.drop(['id','name','host_id','host_name','last_review'], inplace=True , axis=1) ## droping features","15f8d99a":"df.room_type.unique() ##checking for unique values in the feature","8683aeaf":"df.neighbourhood.nunique()","4e32e3ed":"df.neighbourhood_group.unique()","b2b8a2df":"cont = pd.crosstab(df.neighbourhood_group, df.room_type)\ncont","ccc82457":"contt = ff.create_table(pd.crosstab(df.neighbourhood, df.room_type), index=True)\niplot(contt)","9c313457":"df.reviews_per_month.fillna(0,inplace=True)","ec8bce55":"plt.figure(figsize=(22,10))\n\nplt.subplot(1,2,1)\nplt.title('Price Distribution Plot')\nsns.distplot(df.price)\n\nplt.subplot(1,2,2)\nplt.title('Price Spread')\nsns.boxplot(y=df.price)\n\nplt.show()","7954593e":"from scipy import stats\nz = np.abs(stats.zscore(df['price']))\nprint(z)","080a7a60":"threshold = 3\nprint(np.where(z > 3))","fe14ae46":"from scipy.stats import skew\nprint(skew(df.price))","97d9936e":"sns.countplot(df.room_type)","eb5a39b3":"import plotly.express as px\n\nfig = px.violin(df, y=\"price\", x=\"neighbourhood_group\", points=\"all\")\nfig.show()","de098344":"plt.figure(figsize=(8,8))\nsns.set(style=\"whitegrid\")\n\nax = sns.barplot(x=\"neighbourhood_group\", y=\"price\",data=df)","4f2a721a":"plt.figure(figsize=(9,8))\nsns.set(style=\"whitegrid\")\n\nax = sns.countplot(x=\"room_type\", hue=\"neighbourhood_group\",data=df)","5acf58e4":"print(skew(df.minimum_nights))\nplt.figure(figsize=(8,8))\nsns.distplot(df.minimum_nights)\nplt.title('Minimum no. of nights distribution')\nplt.show()","078c8761":"brook = df[df.neighbourhood_group==\"Brooklyn\"].availability_365\nqueen = df[df.neighbourhood_group==\"Queens\"].availability_365\nmanh = df[df.neighbourhood_group==\"Manhattan\"].availability_365\nisland = df[df.neighbourhood_group==\"Staten Island\"].availability_365\nbronx = df[df.neighbourhood_group==\"Bronx\"].availability_365\n\nfig = go.Figure()\n# Use x instead of y argument for horizontal plot\nfig.add_trace(go.Box(x=brook, name='Brooklyn'))\nfig.add_trace(go.Box(x=queen, name='Queens'))\nfig.add_trace(go.Box(x=manh, name='Manhattan'))\nfig.add_trace(go.Box(x=island, name='Staten Island'))\nfig.add_trace(go.Box(x=bronx, name='Bronx'))\n\nfig.show()","fd5aebc4":"plt.figure(figsize=(10,6))\nsns.scatterplot(df.longitude,df.latitude,hue=df.neighbourhood_group)\nplt.ioff()","1b5f05d9":"sns.clustermap(df.corr(),annot = False);","6f4ff5c2":"g = sns.PairGrid(df, hue='neighbourhood_group')\ng.map_diag(plt.hist,edgecolor = 'w')\ng.map_offdiag(plt.scatter,edgecolor = 'w')\ng.add_legend()\nplt.subplots_adjust(top=0.9)\ng.fig.suptitle(' Attributes distribution based on location')","a811c4e2":"avg_price = df.groupby(['neighbourhood_group'])['price'].mean().plot(kind='bar')","319167dc":"df.groupby(['neighbourhood_group'])['minimum_nights'].count().plot(kind='bar')","bdc0644b":"avg_price = df.groupby(['neighbourhood_group'])['availability_365'].count().plot(kind='bar')                       ","1925d263":"from sklearn import preprocessing\nle = preprocessing.LabelEncoder()\n\nle.fit(df['neighbourhood_group'])\ndf['neighbourhood_group']=le.transform(df['neighbourhood_group'])\n\nle.fit(df['neighbourhood'])\ndf['neighbourhood']=le.transform(df['neighbourhood'])\n\nle.fit(df['room_type'])\ndf['room_type']=le.transform(df['room_type'])","a21beebf":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nlm = LinearRegression()","fbedde3f":"X = df.drop(['price'], inplace=False, axis=1)\ny = df['price']","3d272a6e":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=101)\n\nmodel=lm.fit(X_train, y_train)","46f4ef1a":"lm.intercept_","b08d76b0":"predictions = lm.predict(X_test)","0a0c6480":"from sklearn import metrics\nmae = metrics.mean_absolute_error(y_test, predictions)\nmse = metrics.mean_squared_error(y_test, predictions)\nrmse = np.sqrt(metrics.mean_squared_error(y_test, predictions))\nr2 = metrics.r2_score(y_test, predictions)\n\nprint('MAE (Mean Absolute Error): %s' %mae)\nprint('MSE (Mean Squared Error): %s' %mse)\nprint('RMSE (Root mean squared error): %s' %rmse)\nprint('R2 score: %s' %r2)","c179a18d":"from sklearn.model_selection import cross_val_score\nmse_ng=cross_val_score(lm,X,y,scoring='neg_mean_squared_error',cv=5)\nmse_ng\nmean_mse=np.mean(mse_ng)\nprint(mean_mse)","0da8f8e6":"plt.figure(figsize=(13,8))\nsns.regplot(y=y_test, x=predictions, color='brown')\nplt.title('Model prediction')","25903933":"error = pd.DataFrame({'Actual Values': np.array(y_test).flatten(), 'Predicted Values': predictions.flatten()})\nerror.head(10)","d81b50c6":"from sklearn.feature_selection import RFE","56b4f7e7":"lr2 = LinearRegression()","403c76ae":"rfe_selector = RFE(lr2, 8, verbose=True)","0df40875":"rfe_selector.fit(X_train, y_train)","351984a4":"rfe_selector.support_","affc8929":"rfe_selector.ranking_","9caa5273":"cols_keep = X_train.columns[rfe_selector.support_]","fa9ed116":"cols_keep","8f618834":"lr2 = LinearRegression()","71cbc03c":"lr2.fit(X_train[cols_keep],y_train)","e044f76d":"y_train_pred = lr2.predict(X_train[cols_keep])","1155bdc5":"r3= metrics.r2_score(y_train, y_train_pred)\nr3","660470b7":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\n\nridge=Ridge()\nparameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}\nridge_regressor=GridSearchCV(ridge,parameters,scoring='neg_mean_squared_error',cv=5)\nridge_regressor.fit(X,y)","55c02e67":"print(ridge_regressor.best_params_)\nprint(ridge_regressor.best_score_)","eb55c3bf":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\nlasso=Lasso()\nparameters={'alpha':[1e-15,1e-10,1e-8,1e-3,1e-2,1,5,10,20,30,35,40,45,50,55,100]}\nlasso_regressor=GridSearchCV(lasso,parameters,scoring='neg_mean_squared_error',cv=5)\n\nlasso_regressor.fit(X,y)\nprint(lasso_regressor.best_params_)\nprint(lasso_regressor.best_score_)","bf67f4e7":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)","f1a2e864":"prediction_lasso=lasso_regressor.predict(X_test)\nprediction_ridge=ridge_regressor.predict(X_test)","0dd4f2df":"sns.distplot(y_test-prediction_lasso)","34a6907f":"sns.distplot(y_test-prediction_ridge)","5798d1e6":"#### Here I have another describe funtion which is used for object type particularly with frequency table and its for unique values of the features and it also observed the top values with frequency  ","7d6525d2":"# Notebook Breakdown\n\nAirbnb NYC data which contains activities of visitors and i wanna predict price for home stay or tourism\naccording to given features\n\n## Problem Statement\n\nstatistical analysis to take a look the feature relationship\n\nexploratory analysis of data\n\nstory telling with visualization\n\nmake regression model to predict the price for particular home\/apt\n","1b0ce5e5":"## Ridge & Lasso Regression","f8eb7313":"## Data Exploration(Statistics) & Visualization","7e528082":"#### As we can ,there three type of room in the data that are private,shared and the apartment ,by the countplot number of apt\/room is higher than the other, so we can see families are more interested to visit than the other. ","411fa61d":"#### there are 221 types of unique locations mentions in the dataset ","bf801a02":"## Encoding","9625759e":"#### in the case of missing values i don't think that we have to use any special treatment on this dataset the name , hostid and host name are irrelavent so we can remove easily and the in case of reviews ,so we can impute them with 0","1e7a1a6c":"#### so for the skewness of the price i have used the absolute values of z score and after set the threshhold as 3 it means that above the value of 3 all the values will considered as outlier  and then i have used the skew function to check the skewness of price data","c7997800":"#### five areas present in the data which contain the location that mention above","21707509":"#### Violin plot is the combination of the boxplot and the density plot which can tell us the spread of the data with outlier analysis and by this observation we can say the manhattan is most visited place.","4eb23dde":"#### we have three types of unique rooms that are private,shared & apartment","68017b70":"#### Here we have some statistical calculation of our dataset of different features ,like mean, values of std, min , max and the quartile values","7b05d110":"####   here i am trying to analyze relationship between two features that are area and room with the help of crosstab which is also known as second type of chi square test (independece of variable)","37fcd6a7":"### so the data observed that seems positive skewed","fe3f9dff":"# Contingency Table","33c146f0":"#### Price are high for manhattan area .","89bc066e":"#### spliting the data for traing and testing and fit the model","56feb5ba":"#### after take a look on shape of the data ,we can say that we have  plenty of data to exploration of the data.","cf3b384e":"## Recursive Feature Elimination\nmethod to select top k features","69c8f8fe":"## Data Wrangling","0291380a":"### i have created a table with crosstab just for check all the values that we have because its pretty easy to access ","423c0cd8":"#### So in this section we have the concise summary of airbnb dataset . we have data type , memory usage of our feature and also we can see the null values that present in our data set. ","ae650229":"#### when i talk about the distribution so its used for to check whether data is positive skewed or negative so after the implementation i observed that graph of price distribution is positive skewed , And other hand when i check out the boxplot so i observed that here we the outliers and further we will take a look by using some other statistics stuff.","02588e46":"# Model Building","258fb763":"## Loading Data"}}