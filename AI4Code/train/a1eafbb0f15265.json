{"cell_type":{"b929ed29":"code","41ec0514":"code","f2ec53a4":"code","99db7fb3":"code","ba9b527e":"code","4183c497":"code","1c715b4e":"code","7b07153b":"code","b3fa1030":"code","4b945f3d":"code","4d785679":"code","64523b9f":"code","bf968b4e":"code","01945d2b":"code","16daa829":"code","c12ca240":"code","c76c0f74":"code","f99b0276":"code","a4fe1001":"code","227dd3cd":"code","4e4a3913":"code","a94f011d":"code","8c5fc3ae":"code","3ba1b9c6":"code","cb5e745e":"code","23db51ec":"code","a125e972":"code","66074473":"code","12e8cd1b":"code","5125704f":"code","d095be12":"code","f9bff956":"code","e1631afd":"markdown","43c90db0":"markdown","9276d9fa":"markdown","697fbe48":"markdown","34eaee24":"markdown","e456fc4b":"markdown","e3f5103b":"markdown","cf12319b":"markdown","fb324270":"markdown"},"source":{"b929ed29":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pydicom\nimport re\nimport os\nfrom pathlib import Path\n\nplt.style.use('grayscale')\n","41ec0514":"ROOT_DIR = Path('..\/input\/rsna-intracranial-hemorrhage-detection')","f2ec53a4":"! ls {ROOT_DIR}","99db7fb3":"TRAIN_DIR = ROOT_DIR\/'stage_1_train_images'\nTEST_DIR = ROOT_DIR\/'stage_1_test_images'","ba9b527e":"! ls {TRAIN_DIR} | wc -l","4183c497":"! ls {TRAIN_DIR} | head -n 5","1c715b4e":"train_df = pd.read_csv(ROOT_DIR\/'stage_1_train.csv')\nprint(train_df.shape)\ntrain_df.head(10)\n","7b07153b":"train_df[['ID', 'Subtype']] = train_df['ID'].str.rsplit(pat='_', n=1, expand=True)\nprint(train_df.shape)\ntrain_df.head()\n","b3fa1030":"def fix_id(img_id, img_dir=TRAIN_DIR):\n    if not re.match(r'ID_[a-z0-9]+', img_id):\n        sop = re.search(r'[a-z0-9]+', img_id)\n        if sop:\n            img_id_new = f'ID_{sop[0]}'\n            return img_id_new\n        else:\n            print(img_id)\n    return img_id\n\n# test\nassert(fix_id('ID_63eb1e259') == fix_id('ID63eb1e259'))\ntest = 'ID_dbdedfada'\nassert(fix_id(test) == 'ID_dbdedfada')\n","4b945f3d":"train_df['ID'] = train_df['ID'].apply(fix_id)\n","4d785679":"# this method also handles duplicates gracefully\ntrain_new = train_df.pivot_table(index='ID', columns='Subtype').reset_index()\nprint(train_new.shape)\ntrain_new.head()\n","64523b9f":"subtype_ct = train_new['Label'].sum(axis=0)\nprint(subtype_ct)\n","bf968b4e":"sns.barplot(x=subtype_ct.values, y=subtype_ct.index);","01945d2b":"def id_to_filepath(img_id, img_dir=TRAIN_DIR):\n    filepath = f'{img_dir}\/{img_id}.dcm' # pydicom doesn't play nice with Path objects\n    if os.path.exists(filepath):\n        return filepath\n    else:\n        return 'DNE'\n","16daa829":"img_id = train_new['ID'][0]\nimg_filepath = id_to_filepath(img_id)\nprint(img_filepath)","c12ca240":"train_new['filepath'] = train_new['ID'].apply(id_to_filepath)\ntrain_new.head()\n","c76c0f74":"dcm_data = pydicom.dcmread(img_filepath)\nprint(dcm_data)\n","f99b0276":"def get_patient_data(filepath):\n    if filepath != 'DNE':\n        dcm_data = pydicom.dcmread(filepath, stop_before_pixels=True)\n        return dcm_data.PatientID, dcm_data.StudyInstanceUID, dcm_data.SeriesInstanceUID\n","a4fe1001":"patient, study, series = get_patient_data(img_filepath)\nprint(patient, study, series)\n","227dd3cd":"# quick test to make sure our df.apply syntax is working, since the next cell takes a long time to run\ntest = train_new[:5].copy()\ntest['PatientID'], test['StudyID'], test['SeriesID'] = zip(*test['filepath'].map(get_patient_data))\ntest.head()\n","4e4a3913":"train_new['PatientID'], train_new['StudyID'], train_new['SeriesID'] = zip(*train_new['filepath'].map(get_patient_data))\n","a94f011d":"print(train_new.shape[0])\nprint(len(train_new['PatientID'].unique()))\nprint(len(train_new['StudyID'].unique()))\nprint(len(train_new['SeriesID'].unique()))\n","8c5fc3ae":"type(dcm_data.WindowWidth)","3ba1b9c6":"def window_img(dcm, width=None, level=None):\n    pixels = dcm.pixel_array * dcm.RescaleSlope + dcm.RescaleIntercept\n    if not width:\n        width = dcm.WindowWidth\n        if type(width) != pydicom.valuerep.DSfloat:\n            width = width[0]\n    if not level:\n        level = dcm.WindowCenter\n        if type(level) != pydicom.valuerep.DSfloat:\n            level = level[0]\n    lower = level - (width \/ 2)\n    upper = level + (width \/ 2)\n    return np.clip(pixels, lower, upper)\n\ndef load_one_image(idx, df=train_new, width=None, level=None):\n    assert('filepath' in df.columns)\n    dcm_data = pydicom.dcmread(df['filepath'][idx])\n    pixels = window_img(dcm_data, width, level)\n    return pixels\n","cb5e745e":"# standard brain window\npixels = load_one_image(0)\nplt.imshow(pixels);\n","23db51ec":"# subdural window\npixels_new = load_one_image(0, width=200, level=80)\nplt.imshow(pixels_new);\n","a125e972":"def show_examples(subtype='epidural', df=train_new):\n    df_new = df.set_index('ID')\n    filt = df_new['Label'][subtype] == 1\n    df_new = df_new[filt]\n    fig, axes = plt.subplots(4, 4, figsize=(16, 16))\n    for i in range(16):\n        idx = df_new.index[i]\n        pixels = load_one_image(idx, df_new)\n        a = i \/\/ 4\n        b = i % 4\n        axes[a, b].imshow(pixels)\n","66074473":"show_examples('epidural')","12e8cd1b":"show_examples('subdural')","5125704f":"show_examples('intraventricular')","d095be12":"show_examples('intraparenchymal')","f9bff956":"show_examples('subarachnoid')","e1631afd":"## Examples of different hemorrhage subtypes","43c90db0":"## Directory Structure & Files","9276d9fa":"## Unique patients, studies & series","697fbe48":"As a Neuroradiologist, this distribution looks pretty true to daily practice.","34eaee24":"## Label Exploration\n\nStart by pivoting the DataFrame to explore the label distribution over slices","e456fc4b":"So, we have ~ 17,000 unique patients in our dataset with > 670,000 images.","e3f5103b":"__Warning__: This next cell takes a very long time to run (>> 10 min).","cf12319b":"## Windowing the image using DICOM metadata","fb324270":"## DICOM Tags\n- `Study Instance UID`, `Series Instance UID` and `Patient ID` will be helpful in organizing our data later.\n- `Rows` and `Columns` give us the image resolution (512 x 512 in this case)\n- `Window Center` and `Window Width` tell us the window settings applied to the image at acquisition\n- `Rescale Intercept` and `Rescale Slope` tell us how to rescale the pixel values to match the standard Hounsfield Unit (HU) scale"}}