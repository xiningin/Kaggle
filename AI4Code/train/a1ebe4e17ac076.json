{"cell_type":{"be11d0c1":"code","c57956c6":"code","0bed22dc":"code","e5a5556b":"code","be255b80":"code","57d016a7":"code","e6624bd7":"code","2c0a26ac":"code","dd1e8710":"code","0a83f59b":"markdown","c512017f":"markdown","bd1f20f5":"markdown"},"source":{"be11d0c1":"import numpy as np\nimport pandas as pd\nimport os\n\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\n\nimport tensorflow as tf","c57956c6":"train_dir =\"..\/input\/withwithout-mask\/maskdata\/maskdata\/train\"\ntest_dir=\"..\/input\/withwithout-mask\/maskdata\/maskdata\/test\"","0bed22dc":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale = 1.\/100,\n    validation_split = 0.2\n    \n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale = 1.\/100\n    \n)","e5a5556b":"train_images = train_generator.flow_from_directory(\n    train_dir,\n    target_size = (224,224),\n    color_mode = \"rgb\",\n    class_mode='binary',\n    batch_size = 32,\n    shuffle = True,\n    seed = 42,\n    subset = 'training'\n    \n)\n\nval_images = train_generator.flow_from_directory(\n    train_dir,\n    target_size = (224,224),\n    color_mode = \"rgb\",\n    class_mode='binary',\n    batch_size = 32,\n    shuffle = True,\n    seed = 42,\n    subset = 'validation'\n)\n\ntest_images = test_generator.flow_from_directory(\n    test_dir,\n    target_size = (224,224),\n    color_mode = \"rgb\",\n    class_mode='binary',\n    batch_size = 32,\n    shuffle = False\n)\n","be255b80":"inputs = tf.keras.Input(shape=(224, 224, 3))\nx = tf.keras.layers.Conv2D(filters=32, kernel_size=(3, 3), activation='relu')(inputs)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.Conv2D(filters=64, kernel_size=(3, 3), activation='relu')(x)\nx = tf.keras.layers.MaxPool2D()(x)\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\nx = tf.keras.layers.Dense(32, activation='relu')(x)\nx = tf.keras.layers.Dense(32, activation='relu')(x)\noutputs = tf.keras.layers.Dense(1, activation='sigmoid')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\nprint(model.summary())","57d016a7":"model.compile(\n    optimizer='adam',\n    loss='binary_crossentropy',\n    metrics=['accuracy']\n)\n\nhistory = model.fit(\n    train_images,\n    validation_data=val_images,\n    epochs=100,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=5,\n            restore_best_weights=True\n        )\n    ]\n)","e6624bd7":"results = model.evaluate(test_images, verbose=0)\nprint(\"    Loss: {:.5f}\".format(results[0]))\nprint(\"Accuracy: {:.3f}%\".format(results[1] * 100))","2c0a26ac":"sample_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    rescale=1.\/255\n)\n\nsample_images = sample_generator.flow_from_directory(\n    test_dir,\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='binary',\n    batch_size=32,\n    shuffle=True,\n    seed=42\n)","dd1e8710":"samples = sample_images.next()\n\npredictions = np.squeeze(model.predict(samples[0]) >= 0.5).astype(np.int)\nlabels = samples[1].astype(np.int)\n\nplt.figure(figsize=(20, 20))\n\nfor i in range(25):\n    plt.subplot(5, 5, i + 1)\n    plt.imshow(samples[0][i])\n    plt.axis('off')\n    plt.title((\"NO MASK\" if predictions[i] == 1 else \"MASK\"), color=('blue' if labels[i] == predictions[i] else 'red'))\n\nplt.show()","0a83f59b":"# Visualize Results","c512017f":"# Training","bd1f20f5":"# Load images"}}