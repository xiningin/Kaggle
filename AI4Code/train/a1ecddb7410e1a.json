{"cell_type":{"93bfa65c":"code","e71f1255":"code","8ea5718d":"code","acaa1973":"code","179635ad":"code","350bf042":"code","a13f3655":"code","1426eb0b":"code","23b0d937":"code","2a9be77e":"code","bc264331":"code","830235a2":"code","7095fd50":"code","0427b2d5":"code","fa5acb65":"code","f11a488d":"code","dd8fe3d4":"code","fc1a9908":"code","29829c86":"code","79eabd75":"code","b899d78f":"code","3de935b2":"code","eff6354c":"markdown","3c0cb1de":"markdown","1f4e0bea":"markdown","8ca930e7":"markdown","a096f222":"markdown","a28b7242":"markdown","db8b6536":"markdown","a1e57d52":"markdown","b60f081e":"markdown","cd9fb46c":"markdown","7f91d9b8":"markdown","57cb7dba":"markdown"},"source":{"93bfa65c":"import numpy as np\nimport pandas as pd\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport matplotlib.pyplot as plt","e71f1255":"# Load the top 1000 user dataset\ndf=pd.read_csv('..\/input\/comp-top-1000-data\/top_1000_comp_data.csv')\ndf","8ea5718d":"# Function to display a bar plot\ndef bar_plotting(x,y,title):\n    trace1 = go.Bar(\n                x = x,\n                y = y,\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=0.5)),\n                text = y,)\n    layout = go.Layout(barmode = \"group\")\n    fig = go.Figure(data = trace1, layout = layout)\n    fig.update_traces(textposition='outside')\n    fig.update_layout(\n        margin=dict(l=20, r=20, t=40, b=20),\n        paper_bgcolor=\"LightSteelBlue\",\n        title_text= title,\n        title_font_size=20\n    )\n#     fig.update_xaxes(\n#         tickangle = 90)\n    iplot(fig)","acaa1973":"bar_plotting(df[:100].country.value_counts().index,\n             df[:100].country.value_counts().values,\n             \"Countries of top 100 users (as of October 4, 2021)\")","179635ad":"df['organization']=df['organization'].str.upper()\nprint(set(df[:100].organization))","350bf042":"org_replace_top100={\n 'H2O':'H2O.AI',\n 'H2O AI':'H2O.AI',\n 'KAGGLE':'UNKOWN',\n 'RIST. Z BY HP & NVIDIA DATA SCIENCE GLOBAL AMBASSADOR':'RIST'\n}\ndf['organization']=df['organization'].replace(org_replace_top100)\ndata=df[:100].organization.value_counts()\ndata=data.append(pd.Series([len(data[data==1])],index=['Others (one person per organization)']))\ndata=data[data>1]\nbar_plotting(data.index,\n             data.values,\n             f\"Organizations of top 100 users (as of October 4, 2021)\")","a13f3655":"bar_plotting(df.country.value_counts().index,\n             df.country.value_counts().values,\n             \"Countries of top 1,000 users (as of October 4, 2021)\")","1426eb0b":"top_100_in_2016={\"United States\":28, \"Russia\":9, \"Japan\":6, \"Germany\":5, \"UNKOWN\":5,\n                \"India\":5,\"Netherlands\":3,\"Israel\":3,\"Canada\":3,\"Brazil\":3,\"Singapore\":2,\"France\":2,\"Turkey\":2,\n                \"United Kingdom\":2,\"China\":2,\"Spain\":2,\"The Netherlands\":2,\"Switzerland\":1,\"Mexico\":1,\"Greece\":1,\n                \"Finland\":1,\"Poland\":1,\"Croatia\":1,\"Italy\":1,\"Belgium\":1,\"Hungary\":1,\"Lithuania\":1,\"Slovakia\":1,\"Austria\":1,\n                \"Ukraine\":1,\"South Korea\":1,\"Uae\":1,\"Iran\":1}","23b0d937":"print(f'Top 100 users in 2016 were from {len(set(top_100_in_2016.keys()))-1} countires')\nprint(f'Top 100 users in 2021 are from {len(set(df[:100].country))-1} countries')","2a9be77e":"df_compare=pd.concat([pd.Series(top_100_in_2016,name=\"2016\"),df[:100].country.value_counts().rename('2021')], axis=1).fillna(0).astype('int32')\ndf_compare['Difference']=df_compare['2021']-df_compare['2016']\ndf_compare['Percentage (%)']=np.round(df_compare['Difference']\/df_compare['2016']*100)\ndisplay(df_compare)","bc264331":"import plotly.offline as py\npy.offline.init_notebook_mode()\n\ndef plot_in_map(locations,counts,title):\n    data = [ dict(\n            type = 'choropleth',\n            locations = locations,\n            z = counts,\n            locationmode = 'country names',\n#             colorscale = \"Viridis\",\n            autocolorscale = True,\n            marker = dict(\n                line = dict(color = 'rgb(58,100,69)', width = 0.6)),\n                colorbar = dict(autotick = True, tickprefix = '', title = '# of Kagglers')\n                )\n           ]\n\n    layout = dict(\n        title = title,\n        geo = dict(\n            showframe = True,\n            showcoastlines = True,\n            projection = dict(\n            type = 'equirectangular'\n#             type=\"natural earth\"\n            ),\n        margin = dict(b = 0, t = 0, l = 0, r = 0)\n                ),\n        )\n\n    fig = dict(data=data, layout=layout)\n    \n    py.iplot(fig, validate=False, filename='d3-world-map')","830235a2":"plot_in_map(locations=df_compare[df_compare['2016']!=0]['2016'].index,\n            counts=df_compare[df_compare['2016']!=0]['2016'].values,\n            title='Top100 users distributed by Country in 2016')\nplot_in_map(locations=df_compare[df_compare['2021']!=0]['2021'].index,\n            counts=df_compare[df_compare['2021']!=0]['2021'].values,\n            title='Top100 users distributed by Country in 2021')\nplot_in_map(locations=df.country.value_counts().index,\n            counts=df.country.value_counts().values,\n            title='Top1,000 users distributed by Country in 2021')","7095fd50":"# Load the population in 2020\npop=pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\npop","0427b2d5":"per_capita_ls=[]\ncoutry_ls=[]\nfor c,v in zip(df[:100].country.value_counts().index,df[:100].country.value_counts().values):\n    try:\n        p=pop[pop['Country (or dependency)']==c]['Population (2020)'].values[0]\n        per_capita_ls.append(v\/p)\n        coutry_ls.append(c)\n    except:\n        if c=='UNKOWN':\n            pass\n        else:\n            print(f'No population data of {c}')\n        pass\ndf_percapita_top100=pd.DataFrame({'percapita':per_capita_ls},coutry_ls)","fa5acb65":"per_capita_ls=[]\ncoutry_ls=[]\n\nfor c,v in zip(df.country.value_counts().index,df.country.value_counts().values):\n    try:\n        p=pop[pop['Country (or dependency)']==c]['Population (2020)'].values[0]\n        per_capita_ls.append(v\/p)\n        coutry_ls.append(c)\n    except:\n        if c=='UNKOWN':\n            pass\n        else:\n            print(f'No population data of {c}')\n        pass\ndf_percapita_top1000=pd.DataFrame({'percapita':per_capita_ls},coutry_ls)","f11a488d":"#population sourcce===> https:\/\/quickstats.censusdata.abs.gov.au\/census_services\/getproduct\/census\/2016\/quickstat\/90101\ndf_percapita_top1000=df_percapita_top1000.append(pd.DataFrame({'percapita': df.country.value_counts()['Christmas Island']\/1843}, index=['Christmas Island']))","dd8fe3d4":"df_percapita_top100.sort_values(by=['percapita'],ascending=False,inplace=True)\ndf_percapita_top1000.sort_values(by=['percapita'],ascending=False,inplace=True)","fc1a9908":"bar_plotting(df_percapita_top100.index,\n             np.round(df_percapita_top100['percapita'].values*100000,5),\n             \"Countries of top 100 users (Per 100,000 population, as of October 4, 2021)\")","29829c86":"plot_in_map(locations=df_percapita_top100.index,\n            counts=np.round(df_percapita_top100['percapita'].values*100000,5),\n            title=\"Top100 users distributed by Country in 2021 (Per 100,000 population)\")","79eabd75":"bar_plotting(df_percapita_top1000.index,\n             np.round(df_percapita_top1000['percapita'].values*100000,5),\n             \"Countries of top 1000 users (Per 100,000 population, as of October 4, 2021)\")","b899d78f":"bar_plotting(df_percapita_top1000[1:].index,\n             np.round(df_percapita_top1000['percapita'][1:].values*100000,5),\n             \"Countries of top 1000 users (Per 100,000 population, as of October 4, 2021)\")","3de935b2":"plot_in_map(locations=df_percapita_top1000[1:].index,\n            counts=np.round(df_percapita_top1000['percapita'][1:].values*100000,5),\n            title=\"Top1000 users distributed by Country in 2021 (Per 100,000 population)\")","eff6354c":"# Plot countries on the World map","3c0cb1de":"# Top 100 users by country","1f4e0bea":"# Countries of top 100 users in 2021 (Per 100,000 population)","8ca930e7":"The population of Christmas Island, which is Australian external territory, is missing from the population dataset. I manually added the population data.","a096f222":"# ADDED: Analysis on per 100,000 population\nSince the population varies among countries, I added the per capita charts below","a28b7242":"# Comparision Top 100 users by country: 2016 vs 2021\nI used the Top 100 users data of 2016 from [this notebook](https:\/\/www.kaggle.com\/andreyg\/top-100-kaggle-users-by-country).","db8b6536":"# Top 100 uesers by organizations\nFirst I checked the unique values of the organization of the top 100 uesrs. Then, fixed spelling inconsistency for some words by browsering user profiles.","a1e57d52":"# Countries of top 1000 users ,without Christmas Island, in 2021(Per 100,000 population)","b60f081e":"# Countries of top 1000 users in 2021 (Per 100,000 population)","cd9fb46c":"Since the users per 100,000 population in Christmas Island is too large, the chart below displays results without Christmas Island.","7f91d9b8":"# What's this notebook about?\nI was curious about the attributes of the top kagglers, but the latest analysis was five years ago (see [Top-100 Kaggle users by Country](https:\/\/www.kaggle.com\/andreyg\/top-100-kaggle-users-by-country)). So, I scraped the current user data of top 1000 competition ranking as of October 4th, 2021. You can access the csv file in this [Dataset](https:\/\/www.kaggle.com\/hdsk38\/comp-top-1000-data).\n# Notice\nThe data is the Top 1000 **\"as of October 4, 2021\"**, so that even some users who hold high-rated title such as Grandmaster are not in the current top 1000 if they haven't joined competition in a while. In other words, this data shows the current Kaggle situation.\n# Dear Kaggle admins\nI suppose scraping is not against a policy of Kaggle, but if this is actually a violation of your policy. Please let me know. I will delete the dataset and this notebook. Thanks :) !","57cb7dba":"# Top 1000 users by country"}}