{"cell_type":{"dadb6cc7":"code","c5f49cbd":"code","f38b6f09":"code","941633bf":"code","57bd5d8e":"code","c31be267":"code","8a1d1825":"code","3a0d5da8":"code","9f065267":"code","40f6edbe":"code","ba79e673":"code","905a9eb1":"code","68acda6c":"code","a7833b53":"code","98a41fac":"code","a5452562":"code","e2ee1366":"code","9dcb2b48":"code","143649d5":"code","7ab0da8e":"code","37a092e8":"code","00d7b806":"code","8b5d3f26":"code","1c3a7ecf":"code","9e7e02f8":"code","581d7d2d":"code","5e9b5482":"code","06eb8f08":"code","70818c7a":"code","5a8de4e2":"code","4cde47c2":"code","c4d69eb4":"code","c5c6c1bd":"code","8c11e804":"code","1615ad5b":"markdown","bf6c8421":"markdown","43e7bded":"markdown","dccbac93":"markdown","6a9ee18c":"markdown","55ae447c":"markdown","00daf81f":"markdown","ca4c53c3":"markdown","2eee9e41":"markdown","69a98ceb":"markdown","8e4a4f2e":"markdown","48755a38":"markdown","c4555f97":"markdown","993498c2":"markdown","fd48d23b":"markdown","522a36b9":"markdown","eefa51fd":"markdown","ea4fb735":"markdown","2662d0c2":"markdown","4de212c7":"markdown","0e6cdc3f":"markdown","03d4a4ac":"markdown","5debeba2":"markdown","137e237f":"markdown","f348feaf":"markdown","9d2984fd":"markdown","35f9f9bb":"markdown","d5862212":"markdown","65e90521":"markdown","e0c8a192":"markdown","e16a5936":"markdown","7291656c":"markdown","af9496c5":"markdown","ee0317e9":"markdown"},"source":{"dadb6cc7":"from IPython.display import Image\nImage(\"..\/input\/imagedatavisualization\/data_space.jpeg\")","c5f49cbd":"from IPython.display import Image\nImage(\"..\/input\/image-datavisualization\/Axis.png\")","f38b6f09":"import matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns","941633bf":"plt.style.use('classic')","57bd5d8e":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n\nfrom matplotlib.path import Path\nfrom matplotlib.patches import PathPatch\nfrom matplotlib.patches import Patch\nimport matplotlib.patches as patches\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","c31be267":"!pip install calmap\nimport calmap","8a1d1825":"!pip install pywaffle\nfrom pywaffle import Waffle","3a0d5da8":"x = np.linspace(0, 10, 100)\nplt.plot(x, np.sin(x))\nplt.plot(x, np.cos(x))\nplt.show()","9f065267":"x = np.linspace(0, 10, 100)\nfig = plt.figure()\nplt.plot(x, np.sin(x), '-')\nplt.plot(x, np.cos(x), '--');plt.show()","40f6edbe":"# Import dataset \nmidwest = pd.read_csv(\"..\/input\/the-50-plot-challenge\/midwest_filter.csv\")\n\n# Prepare Data \n# Create as many colors as there are unique midwest['category']\ncategories = np.unique(midwest['category'])\ncolors = [plt.cm.tab10(i\/float(len(categories)-1)) for i in range(len(categories))]\n\n# Draw Plot for Each Category\nplt.figure(figsize=(16, 10), dpi= 80, facecolor='w', edgecolor='k')\n\nfor i, category in enumerate(categories):\n    plt.scatter('area', 'poptotal', \n                data=midwest.loc[midwest.category==category, :], \n                s=20, c=colors[i], label=str(category))\n\n# Decorations\nplt.gca().set(xlim=(0.0, 0.1), ylim=(0, 90000),\n              xlabel='Area', ylabel='Population')\n\nplt.xticks(fontsize=12); plt.yticks(fontsize=12)\nplt.title(\"Scatterplot of Midwest Area vs Population\", fontsize=22)\nplt.legend(fontsize=12)    \nplt.show()    ","ba79e673":"from matplotlib import patches\nfrom scipy.spatial import ConvexHull\nimport warnings; warnings.simplefilter('ignore')\nsns.set_style(\"white\")\n\n# Step 1: Prepare Data\nmidwest = pd.read_csv(\"..\/input\/the-50-plot-challenge\/midwest_filter.csv\")\n\n# As many colors as there are unique midwest['category']\ncategories = np.unique(midwest['category'])\ncolors = [plt.cm.tab10(i\/float(len(categories)-1)) for i in range(len(categories))]\n\n# Step 2: Draw Scatterplot with unique color for each category\nfig = plt.figure(figsize=(16, 10), dpi= 80, facecolor='w', edgecolor='k')    \n\nfor i, category in enumerate(categories):\n    plt.scatter('area', 'poptotal', data=midwest.loc[midwest.category==category, :], s='dot_size', c=colors[i], label=str(category), edgecolors='black', linewidths=.5)\n\n# Step 3: Encircling\n# https:\/\/stackoverflow.com\/questions\/44575681\/how-do-i-encircle-different-data-sets-in-scatter-plot\ndef encircle(x,y, ax=None, **kw):\n    if not ax: ax=plt.gca()\n    p = np.c_[x,y]\n    hull = ConvexHull(p)\n    poly = plt.Polygon(p[hull.vertices,:], **kw)\n    ax.add_patch(poly)\n    # Select data to be encircled\nmidwest_encircle_data = midwest.loc[midwest.state=='IN', :]                         \n\n# Draw polygon surrounding vertices    \nencircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec=\"k\", fc=\"gold\", alpha=0.1)\nencircle(midwest_encircle_data.area, midwest_encircle_data.poptotal, ec=\"firebrick\", fc=\"none\", linewidth=1.5)\n\n# Step 4: Decorations\nplt.gca().set(xlim=(0.0, 0.1), ylim=(0, 90000),\n              xlabel='Area', ylabel='Population')\n\nplt.xticks(fontsize=12); plt.yticks(fontsize=12)\nplt.title(\"Bubble Plot with Encircling\", fontsize=22)\nplt.legend(fontsize=12)    \nplt.show()  ","905a9eb1":"## Importing Data\ndf = pd.read_csv(\"..\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\")\ndf_select = df.loc[df.cyl.isin([4,8]), :]\n\n# Plot\nsns.set_style(\"white\")\ngridobj = sns.lmplot(x=\"displ\", y=\"hwy\", hue=\"cyl\", data=df_select, \n                     height=7, aspect=1.6, robust=True, palette='tab10', \n                     scatter_kws=dict(s=60, linewidths=.7, edgecolors='black'))\n\n# Decorations\ngridobj.set(xlim=(0.5, 7.5), ylim=(0, 50))\nplt.title(\"Scatterplot with line of best fit grouped by number of cylinders\", fontsize=20)\nplt.show()","68acda6c":"# Import Data\ndf = pd.read_csv(\"..\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\")\ndf_select = df.loc[df.cyl.isin([4,8]), :]\n\n# Each line in its own column\nsns.set_style(\"white\")\ngridobj = sns.lmplot(x=\"displ\", y=\"hwy\", \n                     data=df_select, \n                     height=7, \n                     robust=True, \n                     palette='Set1', \n                     col=\"cyl\",\n                     scatter_kws=dict(s=60, linewidths=.7, edgecolors='black'))\n\n# Decorations\ngridobj.set(xlim=(0.5, 7.5), ylim=(0, 50))\nplt.show()","a7833b53":"# Import Data\ndf = pd.read_csv(\"..\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\")\n\n# Draw Stripplot\nfig, ax = plt.subplots(figsize=(16,10), dpi= 80)    \nsns.stripplot(df.cty, df.hwy, jitter=0.25, size=8, ax=ax, linewidth=.5)\n\n# Decorations\nplt.title('Use jittered plots to avoid overlapping of points', fontsize=22)\nplt.show()","98a41fac":"# Import Data\ndf = pd.read_csv(\"..\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\")\ndf_counts = df.groupby(['hwy', 'cty']).size().reset_index(name='counts')\n\n# Draw Stripplot\nfig, ax = plt.subplots(figsize=(16,10), dpi= 80)    \nsns.stripplot(df_counts.cty, df_counts.hwy, size=df_counts.counts*2, ax=ax)\n\n# Decorations\nplt.title('Counts Plot - Size of circle is bigger as more points overlap', fontsize=22)\nplt.show()\n\n","a5452562":"# Import Data\ndf = pd.read_csv(\"..\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\")\n\n# Create Fig and gridspec\nfig = plt.figure(figsize=(16, 10), dpi= 80)\ngrid = plt.GridSpec(4, 4, hspace=0.5, wspace=0.2)\n\n# Define the axes\nax_main = fig.add_subplot(grid[:-1, :-1])\nax_right = fig.add_subplot(grid[:-1, -1], xticklabels=[], yticklabels=[])\nax_bottom = fig.add_subplot(grid[-1, 0:-1], xticklabels=[], yticklabels=[])\n\n# Scatterplot on main ax\nax_main.scatter('displ', 'hwy', s=df.cty*4, c=df.manufacturer.astype('category').cat.codes, alpha=.9, data=df, cmap=\"tab10\", edgecolors='gray', linewidths=.5)\n\n# histogram on the right\nax_bottom.hist(df.displ, 40, histtype='stepfilled', orientation='vertical', color='deeppink')\nax_bottom.invert_yaxis()\n\n# histogram in the bottom\nax_right.hist(df.hwy, 40, histtype='stepfilled', orientation='horizontal', color='deeppink')\n\n# Decorations\nax_main.set(title='Scatterplot with Histograms \\n displ vs hwy', xlabel='displ', ylabel='hwy')\nax_main.title.set_fontsize(20)\nfor item in ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):\n    item.set_fontsize(14)\n\nxlabels = ax_main.get_xticks().tolist()\nax_main.set_xticklabels(xlabels)\nplt.show()","e2ee1366":"# Import Data\ndf = pd.read_csv(\"..\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\")\n\n# Create Fig and gridspec\nfig = plt.figure(figsize=(16, 10), dpi= 80)\ngrid = plt.GridSpec(4, 4, hspace=0.5, wspace=0.2)\n\n# Define the axes\nax_main = fig.add_subplot(grid[:-1, :-1])\nax_right = fig.add_subplot(grid[:-1, -1], xticklabels=[], yticklabels=[])\nax_bottom = fig.add_subplot(grid[-1, 0:-1], xticklabels=[], yticklabels=[])\n\n# Scatterplot on main ax\nax_main.scatter('displ', 'hwy', s=df.cty*5, c=df.manufacturer.astype('category').cat.codes, alpha=.9, data=df, cmap=\"Set1\", edgecolors='black', linewidths=.5)\n\n# Add a graph in each part\nsns.boxplot(df.hwy, ax=ax_right, orient=\"v\")\nsns.boxplot(df.displ, ax=ax_bottom, orient=\"h\")\n\n# Decorations ------------------\n# Remove x axis name for the boxplot\nax_bottom.set(xlabel='')\nax_right.set(ylabel='')\n\n# Main Title, Xlabel and YLabel\nax_main.set(title='Scatterplot with Histograms \\n displ vs hwy', xlabel='displ', ylabel='hwy')\n\n# Set font size of different components\nax_main.title.set_fontsize(20)\nfor item in ([ax_main.xaxis.label, ax_main.yaxis.label] + ax_main.get_xticklabels() + ax_main.get_yticklabels()):\n    item.set_fontsize(14)\n\nplt.show()","9dcb2b48":"# Import Dataset\ndf = pd.read_csv(\"..\/input\/the-50-plot-challenge\/mtcars.csv\")\n\n# Plot\nplt.figure(figsize=(12,10), dpi= 80)\nsns.heatmap(df.corr(), xticklabels=df.corr().columns, yticklabels=df.corr().columns, cmap='RdYlGn', center=0, annot=True)\n\n# Decorations\nplt.title('Correlogram of mtcars', fontsize=22)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","143649d5":"# Load Dataset\ndf = sns.load_dataset('iris')\n\n# Plot\nplt.figure(figsize=(10,8), dpi= 80)\nsns.pairplot(df, kind=\"scatter\", hue=\"species\", plot_kws=dict(s=80, edgecolor=\"white\", linewidth=2.5))\nplt.show()","7ab0da8e":"# Load Dataset\ndf = sns.load_dataset('iris')\n\n# Plot\nplt.figure(figsize=(10,8), dpi= 80)\nsns.pairplot(df, kind=\"reg\", hue=\"species\")\nplt.show()","37a092e8":"# get the data\ndf = pd.read_csv(\"\/kaggle\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\")\nplt.figure(figsize = (10, 10), dpi = 80)\n# plot the data using seaborn\nax = sns.boxplot(x = \"class\", y = \"hwy\", data = df)\n# change the font of the x and y ticks (numbers on the axis)\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\nax.tick_params(axis = 'y', labelsize = 12)\n\n# set and x and y label\nax.set_xlabel(\"Class\", fontsize = 14)\nax.set_ylabel(\"HWY\", fontsize = 14)\n\n# set a title\nax.set_title(\"Boxplot\", fontsize = 14);","00d7b806":"# get the data\ndf = pd.read_csv(\"..\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\")\n\n# prepare the data for plotting\n\n# vectors to plot\nvects = [df[df[\"class\"] == car][\"hwy\"] for car in df[\"class\"].unique()]\n\n# labels for the x axis\nlabels = [class_ for class_ in df[\"class\"].unique()]\n\n# handpicked colors\ncolors = [\"#543005\", \"#8c510a\", \"#bf812d\", \"#80cdc1\", \"#35978f\", \"#01665e\", \"#003c30\"]\n\n# ----------------------------------------------------------------------------------------------------\n# instanciate the figure\nfig = plt.figure(figsize = (16, 8))\nax = fig.add_subplot()\n\n# ----------------------------------------------------------------------------------------------------\n# plot the data using matplotlib\nplot1 = ax.boxplot(vects,\n    notch = False, \n    vert = True,\n    meanline = True,\n    showmeans = True,\n    patch_artist=True\n)\n\n# iterate over every box and add some annotations\nfor box, color, vect, label, tick in zip(plot1[\"boxes\"], # using this line, you can iterate over every box\n                                         colors, \n                                         vects, \n                                         labels, \n                                         ax.get_xticks()):\n    # change the color of the box\n    box.set(facecolor = color)\n    # add text\n    ax.annotate(\"{} obs\".format(len(vect)), \n                xy = (tick, np.median(vect)),\n               xytext = (15, 50),\n               textcoords = \"offset points\",\n               arrowprops = dict(arrowstyle = \"->\", connectionstyle = \"arc3,rad=.2\"),\n               fontsize = 12)\n\n# ----------------------------------------------------------------------------------------------------\n# prettify the plot\n# change the x labels\nax.set_xticklabels(labels = labels)\n\n# change the rotation and the size of the x ticks (numbers of x axis)\nax.tick_params(axis = 'x', labelrotation = 90, labelsize = 12)\n\n# set the title for the plot\nax.set_title(\"Box plor of Highway Mileage by Vehicle Class\", fontsize = 16);","8b5d3f26":"# Import Data\ndf = pd.read_csv(\"..\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\")\n\n# Draw Plot\nplt.figure(figsize=(13,10), dpi= 80)\nsns.boxplot(x='class', y='hwy', data=df, hue='cyl')\nsns.stripplot(x='class', y='hwy', data=df, color='black', size=3, jitter=1)\n\nfor i in range(len(df['class'].unique())-1):\n    plt.vlines(i+.5, 10, 45, linestyles='solid', colors='gray', alpha=0.2)\n\n# Decoration\nplt.title('Box Plot of Highway Mileage by Vehicle Class', fontsize=22)\nplt.legend(title='Cylinders')\nplt.show()","1c3a7ecf":"# Import Data\ndf = pd.read_csv(\"..\/input\/the-50-plot-challenge\/mpg_ggplot2.csv\")\n\n# Draw Plot\nplt.figure(figsize=(13,10), dpi= 80)\nsns.violinplot(x='class', y='hwy', data=df, scale='width', inner='quartile')\n\n# Decoration\nplt.title('Violin Plot of Highway Mileage by Vehicle Class', fontsize=22)\nplt.show()","9e7e02f8":"# get the data\ntips = sns.load_dataset(\"tips\")\n# instanciate the figure\nplt.figure(figsize = (10, 10), dpi= 80)\nax = sns.violinplot(x = \"day\", y = \"total_bill\", hue = \"sex\", split = True, data = tips)\n# set a title and change the legend location\nax.set_title('Distribution of total bill amount per day', fontsize = 16)\nax.legend(loc = \"upper left\", fontsize = 10);","581d7d2d":"import plotly.express as px\ndf = px.data.gapminder()\n\nfig = px.scatter(df.query(\"year==2007\"), x=\"gdpPercap\", y=\"lifeExp\",\n\t         size=\"pop\", color=\"continent\",\n                 hover_name=\"country\", log_x=True, size_max=60)\nfig.show()","5e9b5482":"import plotly.graph_objects as go\nimport plotly.express as px\nimport pandas as pd\nimport math\n\n# Load data, define hover text and bubble size\ndata = px.data.gapminder()\ndf_2007 = data[data['year']==2007]\ndf_2007 = df_2007.sort_values(['continent', 'country'])\n\nhover_text = []\nbubble_size = []\n\nfor index, row in df_2007.iterrows():\n    hover_text.append(('Country: {country}<br>'+\n                      'Life Expectancy: {lifeExp}<br>'+\n                      'GDP per capita: {gdp}<br>'+\n                      'Population: {pop}<br>'+\n                      'Year: {year}').format(country=row['country'],\n                                            lifeExp=row['lifeExp'],\n                                            gdp=row['gdpPercap'],\n                                            pop=row['pop'],\n                                            year=row['year']))\n    bubble_size.append(math.sqrt(row['pop']))\n\ndf_2007['text'] = hover_text\ndf_2007['size'] = bubble_size\nsizeref = 2.*max(df_2007['size'])\/(100**2)\n\n# Dictionary with dataframes for each continent\ncontinent_names = ['Africa', 'Americas', 'Asia', 'Europe', 'Oceania']\ncontinent_data = {continent:df_2007.query(\"continent == '%s'\" %continent)\n                              for continent in continent_names}\n\n# Create figure\nfig = go.Figure()\n\nfor continent_name, continent in continent_data.items():\n    fig.add_trace(go.Scatter(\n        x=continent['gdpPercap'], y=continent['lifeExp'],\n        name=continent_name, text=continent['text'],\n        marker_size=continent['size'],\n        ))\n\n# Tune marker appearance and layout\nfig.update_traces(mode='markers', marker=dict(sizemode='area',\n                                              sizeref=sizeref, line_width=2))\n\nfig.update_layout(\n    title='Life Expectancy v. Per Capita GDP, 2007',\n    xaxis=dict(\n        title='GDP per capita (2000 dollars)',\n        gridcolor='white',\n        type='log',\n        gridwidth=2,\n    ),\n    yaxis=dict(\n        title='Life Expectancy (years)',\n        gridcolor='white',\n        gridwidth=2,\n    ),\n    paper_bgcolor='rgb(243, 243, 243)',\n    plot_bgcolor='rgb(243, 243, 243)',\n)\nfig.show()","06eb8f08":"import plotly.express as px\nimport numpy as np\ndf = px.data.gapminder().query(\"year == 2007\")\ndf[\"world\"] = \"world\" # in order to have a single root node\nfig = px.treemap(df, path=['world', 'continent', 'country'], values='pop',\n                  color='lifeExp', hover_data=['iso_alpha'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(df['lifeExp'], weights=df['pop']))\nfig.show()","70818c7a":"import plotly.express as px\ndf = px.data.tips()\ndf[\"all\"] = \"all\" # in order to have a single root node\nfig = px.treemap(df, path=['all', 'sex', 'day', 'time'], values='total_bill', color='day')\nfig.show()","5a8de4e2":"import plotly.express as px\ndata = dict(\n    character=[\"Eve\", \"Cain\", \"Seth\", \"Enos\", \"Noam\", \"Abel\", \"Awan\", \"Enoch\", \"Azura\"],\n    parent=[\"\", \"Eve\", \"Eve\", \"Seth\", \"Seth\", \"Eve\", \"Eve\", \"Awan\", \"Eve\" ],\n    value=[10, 14, 12, 10, 2, 6, 6, 4, 4])\n\nfig =px.sunburst(\n    data,\n    names='character',\n    parents='parent',\n    values='value',\n)\nfig.show()","4cde47c2":"import plotly.express as px\ndf = px.data.tips()\nfig = px.sunburst(df, path=['day', 'time', 'sex'], values='total_bill')\nfig.show()","c4d69eb4":"import plotly.express as px\nimport numpy as np\ndf = px.data.gapminder().query(\"year == 2007\")\nfig = px.sunburst(df, path=['continent', 'country'], values='pop',\n                  color='lifeExp', hover_data=['iso_alpha'],\n                  color_continuous_scale='RdBu',\n                  color_continuous_midpoint=np.average(df['lifeExp'], weights=df['pop']))\nfig.show()","c5c6c1bd":"import plotly.express as px\ndf = px.data.tips()\nfig = px.sunburst(df, path=['sex', 'day', 'time'], values='total_bill', color='day')\nfig.show()","8c11e804":"import plotly.graph_objects as go\n\nfig =go.Figure(go.Sunburst(\n ids=[\n    \"North America\", \"Europe\", \"Australia\", \"North America - Football\", \"Soccer\",\n    \"North America - Rugby\", \"Europe - Football\", \"Rugby\",\n    \"Europe - American Football\",\"Australia - Football\", \"Association\",\n    \"Australian Rules\", \"Autstralia - American Football\", \"Australia - Rugby\",\n    \"Rugby League\", \"Rugby Union\"\n  ],\n  labels= [\n    \"North<br>America\", \"Europe\", \"Australia\", \"Football\", \"Soccer\", \"Rugby\",\n    \"Football\", \"Rugby\", \"American<br>Football\", \"Football\", \"Association\",\n    \"Australian<br>Rules\", \"American<br>Football\", \"Rugby\", \"Rugby<br>League\",\n    \"Rugby<br>Union\"\n  ],\n  parents=[\n    \"\", \"\", \"\", \"North America\", \"North America\", \"North America\", \"Europe\",\n    \"Europe\", \"Europe\",\"Australia\", \"Australia - Football\", \"Australia - Football\",\n    \"Australia - Football\", \"Australia - Football\", \"Australia - Rugby\",\n    \"Australia - Rugby\"\n  ],\n))\nfig.update_layout(margin = dict(t=0, l=0, r=0, b=0))\n\nfig.show()","1615ad5b":"# Matplotlib\nOne of Matplotlib\u2019s most important features is its ability to play well with many operating systems and graphics backends. Matplotlib supports dozens of backends and output types, which means you can count on it to work regardless of which operating system you are using or which output format you wish. This cross-platform, everything-to-everyone approach has been one of the great strengths of Matplotlib. It has led to a large userbase, which in turn has led to an active developer base and Matplotlib\u2019s powerful tools and ubiquity within the scientific Python world.","bf6c8421":"## 12: Violin plot\n- A violin plot is a method of plotting numeric data. It is similar to a box plot, with the addition of a rotated kernel density plot on each side. Violin plots are similar to box plots, except that they also show the probability density of the data at different values, usually smoothed by a kernel density estimator.","43e7bded":"# Treemap of a rectangular DataFrame with discrete color argument","dccbac93":"# 16. Gantt Charts\n* A Gantt chart is a type of bar chart that illustrates a project schedule.\n* The chart lists the tasks to be performed on the vertical axis, and time intervals on the horizontal axis. \n* The width of the horizontal bars in the graph shows the duration of each activity.","6a9ee18c":"## 6. Marginal Histogram\nMarginal histograms are histograms added to the margin of each axis of a scatter plot for analyzing the distribution of each measure. ... This post shows you how to make marginal histograms for scatter plots, marginal bar charts for highlight tables, and explains the difference between the two.","55ae447c":"# Data Visualization \nData visualization is the graphical representation of information and data. By using visual elements like charts, graphs, and maps, data visualization tools provide an accessible way to see and understand trends, outliers, and patterns in data.","00daf81f":"Python has good packages to plot  the data and among them\n- Matplotlib\n- seaborn\n","ca4c53c3":"## 1. Scatter Plot\n- Scatter plots gives us a representation of where each points in the entire dataset are present with respect to any 2\/3 features(Columns).\n- It is a classic and fundamental plot used to study the relationship between two variables.\n- In matplotlib, you can conveniently do this using **plt.scatterplot()**.","2eee9e41":"## 8. Correllogram\n- A correlogram (also called Auto Correlation Function ACF Plot or Autocorrelation plot) is a visual way to show serial correlation in data that changes over time (i.e. time series data). Serial correlation (also called autocorrelation) is where an error at one point in time travels to a subsequent point in time.","69a98ceb":"## Visualization technology stack\nThere are following data visualization stack has technologies.\n- **Basic mathematics:** trigonometric function, linear algebra, geometric algorithm.\n- **Graphics:** Canvas, SVG, WebGL, computational graphics, graph theory.\n- **Engineering algorithms:** basic algorithms, statistical algorithms, common layout algorithms.\n- **Data analysis:** data cleaning, statistics, data modeling.\n- **Design aesthetics:** design principles, aesthetic judgment, color, interaction, cognition.\n- **Visual basis:** visual coding, visual analysis, graphical interaction.\n- **Visualization solutions:** correct use of charts, visualization of common business scenarios","8e4a4f2e":"## 7. Marginal Boxplot\n- Marginal boxplot is similar to marginal histogram plot.","48755a38":"# Categorical Bubble Charts","c4555f97":"## Scatter plot with line of best fit\n- A line of best fit can be roughly determined using an eyeball method by drawing a straight line on a scatter plot so that the number of points above the line and below the line is about equal (and the line passes through as many points as possible).","993498c2":"# Classification of ploting data by their requirements**\n- Correlation representation\n- Distribution representation\n- Variation\/Changes representation\n- Grouping \/ Clustering representation\n- Ranking representation\n- Composition representation","fd48d23b":" ## 11. Dot and Box Plot\n - Dot and Box plot Conveys similar information as a boxplot split in groups. The dots, in addition, gives a sense of how many data points lie within each group.","522a36b9":"# 14.Tree Chart.\n*   Treemap of a rectangular DataFrame with continuous color argument in px.treemap\n*  If a color argument is passed, the color of a node is computed as the average of the color values of its children, weighted by their values.\n*  **Note:** for best results, ensure that the first path element is a single root node. In the examples below we are creating a dummy column containing identical values for each row to achieve this.\n\n","eefa51fd":"# Sunburst with Repeated Labels","ea4fb735":"## 4. Jittering with stripplot\n- A strip plot is a graphical data anlysis technique for summarizing a univariate data set. The strip plot consists of:\n\n    Horizontal axis = the value of the response variable;\n    Verticalal axis = all values are set to 1.\n\n- That is, a strip plot is simply a plot of the sorted response values along one axis.","2662d0c2":"## Setting Styles\nWe will use the plt.style directive to choose appropriate aesthetic styles for our figures. Here we will set the classic style, which ensures that the plots we create use the **classic** Matplotlib style:","4de212c7":"# Sunburst of a rectangular DataFrame","0e6cdc3f":"# Sunburst of a rectangular DataFrame with discrete color argument","03d4a4ac":"## 10. Box and Whisker Plot\n- A Box and Whisker Plot (or Box Plot) is a convenient way of visually displaying the data distribution through their quartiles. \n- The lines extending parallel from the boxes are known as the \u201cwhiskers\u201d, which are used to indicate variability outside the upper and lower quartiles. Outliers are sometimes plotted as individual dots that are in-line with whiskers. Box Plots can be drawn either vertically or horizontally. \n","5debeba2":"## Importing matplotlib\n> We will use some standard shorthands for Matplotlib imports:","137e237f":"## Bubble plot with Encircling\n- A bubble plot is a scatterplot where a third dimension is added: the value of an additional variable is represented through the size of the dots. \n- You need 3 numerical variables as input: one is represented by the X axis, one by the Y axis, and one by the size. Do not forget to provide a legend to make possible the link between the size and the value.\n- Area of the circles must be proportional to the value, not to the radius, to avoid exaggerate the variation in your data.","f348feaf":"# Matplotlib Architecture:\nThere are overall 3 different layers in the architecture of matplotlib as follows.\n- Backend layer.\n- Artist layer.\n- Scripting layer.","9d2984fd":"# 15. Sunburst Charts \n* Sunburst plots visualize hierarchical data spanning outwards radially from root to leaves. \n* The sunburst sector hierarchy is determined by the entries in labels (names in px.sunburst) and in parents. \n* The root starts from the center and children are added to the outer rings.","35f9f9bb":"## Backend layer:\n- It is bottom most layer of a Matplotlib architecture.There are 3 main classes from the backend layer Figure Canvas ( the layer\/Surface on which the figure will be drawn), Renderer (the classn that takes care of the drawing on the surface ) and Event ( to handle the mouse and keyboard events). We don\u2019t work much with the Backend layer as compared to the counterparts.\n## Artist Layer:\n- It is what does most of the duty on plotting the various functions, like axis which coordinates on how to use the renderer on the Figure canvas. To put it simple, lets consider Paper as the Figure Canvas and Sketch pen as renderer. Then the hand of the painter is the Artist layer which has certain functions, knows how to sketch to get the exact figure.\n## Scripting layer:\n- This is the topmost layer on which majority of our codes will play around. For day to day exploratory works, we almost rely on this scripting layer of matplotlib. Pyplot is the scripting layer that provides almost simlar functionality as that of Matlab in python. The methods in scripting layer, almost automatically takes care of the other layers and all we need to care about is the current state(figure & Subplot).","d5862212":"# Sunburst of a rectangular DataFrame with continuous color argument ","65e90521":"## 9. Pairwise Plot\n- A pairwise scatter plot is actually a matrix of scatter plots similar to a correlation matrix. Each pair of numeric variable is displayed vs the other one. It can quickly help us establish relationships.","e0c8a192":"# Correlation representation\n- Correlation analysis is a statistical method used to evaluate the strength of relationship between two quantitative variables. A high correlation means that two or more variables have a strong relationship with each other, while a weak correlation means that the variables are hardly related.\n- Bivariate data sets and provide a visual representation of the relationship between variables.\n## Theses plots are uses for correlation representation\n-   Scatter plot\n-   Bubble plot with Encircling\n-   Scatter plot with line of best fit\n-   Jittering with stripplot\n-   Counts Plot\n-   Marginal Histogram\n-   Marginal Boxplot\n-   Correlogram\n-   Pairwise Plot","e16a5936":"# Distribution Representation\nVisualization methods that display frequency, how data spread out over an interval or is grouped.\n\n   -  Box  and  Whisker Plot.\n   -  Box and dot Plot.\n   -  Bubble Chart.\n   -  Density Plot.\n   -  Dot Matrix Chart.\n   -  Histogram.\n   -  Multi-set Bar Chart.\n   -  Parallel Sets.\n   -  Pictogram Chart.","7291656c":"## Mapping From Data Space to Graphic Space\n","af9496c5":"## 5. Counts Plot\n- A count plot can be thought of as a histogram across a categorical, instead of quantitative, variable. The basic API and options are identical to those for barplot() , so you can compare counts across nested variables.\nInput data can be passed in a variety of formats, including:\n\n   -  Vectors of data represented as lists, numpy arrays, or pandas Series objects passed directly to the x, y, and\/or hue parameters.\n\n   -  A \u201clong-form\u201d DataFrame, in which case the x, y, and hue variables will determine how the data are plotted.\n\n   -  A \u201cwide-form\u201d DataFrame, such that each numeric column will be plotted.\n\n   -   An array or list of vectors.\n","ee0317e9":"# 13.Bubble Chart.\n- A Bubble Chart is a multi-variable graph that is a cross between a Scatterplot and a Proportional Area Chart. \n- Bubble Charts are typically used to compare and show the relationships between categorised circles, by the use of positioning and    proportions. The overall picture of Bubble Charts can be used to analyse for patterns\/correlations. "}}