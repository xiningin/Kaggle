{"cell_type":{"bf9fb3f8":"code","4cce1dfc":"code","4eb1ebbb":"code","1e4918cb":"code","63b2bccf":"code","cfa60d56":"code","58cac7ab":"code","f670779d":"code","d30fd522":"code","0ff5f635":"code","ba41d548":"code","785fdcc6":"code","fc84717d":"markdown","4f1c0201":"markdown","fd0c899e":"markdown","13e4a7f5":"markdown","b9a30ba1":"markdown","0ae8a9eb":"markdown","c679a625":"markdown","e20aae2f":"markdown","cd8bdf64":"markdown","54d6ffa5":"markdown"},"source":{"bf9fb3f8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4cce1dfc":"from keras.applications.vgg19 import VGG19\nfrom keras.applications.vgg16 import VGG16\nfrom keras.preprocessing.image import ImageDataGenerator, img_to_array, load_img\nfrom keras.models import Sequential\nfrom keras.utils import to_categorical\nfrom keras.layers import Dense, Flatten\nfrom keras.datasets import cifar10\nimport matplotlib.pyplot as plt\nimport cv2\nimport numpy as np\nfrom glob import glob","4eb1ebbb":"#%%\n(x_train, y_train),(x_test, y_test) = cifar10.load_data()\nprint(\"x_train shape\",x_train.shape)\nprint(\"train sample:\",x_train.shape[0])\n\nnumberOfClass = 10\n\ny_train = to_categorical(y_train, numberOfClass)\ny_test = to_categorical(y_test, numberOfClass)\n\ninput_shape = x_train.shape[1:]","1e4918cb":"plt.imshow(x_train[5511].astype(np.uint8))\nplt.axis(\"off\")\nplt.show()","63b2bccf":"def resize_img(img):\n    numberOfImage = img.shape[0]\n    new_array = np.zeros((numberOfImage, 64,64,3))\n    for i in range(numberOfImage):\n        new_array[i] = cv2.resize(img[i,:,:,:],(64,64))\n    return new_array\n\nx_train = resize_img(x_train)\nx_test = resize_img(x_test)\nprint(\"increased dim x_train: \",x_train.shape)\n\nplt.figure()\nplt.imshow(x_train[5511].astype(np.uint8))\nplt.axis(\"off\")\nplt.show()","cfa60d56":"#vgg19\n\nvgg = VGG19(include_top = False, weights = \"imagenet\", input_shape = (64,64,3))\n\nprint(vgg.summary())","58cac7ab":"vgg_layer_list = vgg.layers\n#print(vgg_layer_list)","f670779d":"model = Sequential()\nfor layer in vgg_layer_list:\n    model.add(layer)\n    \nprint(model.summary())","d30fd522":"for layer in model.layers:\n    layer.trainable = False\n\n# fully con layers\nmodel.add(Flatten())\nmodel.add(Dense(128))\nmodel.add(Dense(numberOfClass, activation= \"softmax\"))\n\nprint(model.summary())","0ff5f635":"model.compile(loss = \"categorical_crossentropy\",\n              optimizer = \"rmsprop\",\n              metrics = [\"accuracy\"])","ba41d548":"#epochs = 75, batch_size = 1000\nhist = model.fit(x_train, y_train, validation_split = 0.2, epochs = 120, batch_size = 955)\n","785fdcc6":"plt.title('vgg19 - Loss')\nplt.plot(hist.history[\"loss\"], label = \"train loss\")\nplt.plot(hist.history[\"val_loss\"], label = \"val loss\")\nplt.legend()\nplt.show()\n\nplt.figure()\nplt.title('vgg19 - Accuracy')\nplt.plot(hist.history[\"accuracy\"], label = \"train acc\")\nplt.plot(hist.history[\"val_accuracy\"], label = \"val acc\")\nplt.legend()\nplt.show()","fc84717d":"## Concatenation","4f1c0201":"# VGG19","fd0c899e":"## Model Compiling","13e4a7f5":"## Increase dimension for vgg19","b9a30ba1":"# Train Section","0ae8a9eb":"## Visualization","c679a625":"# Transfer Learning Section","e20aae2f":"# Results Visualization","cd8bdf64":"# Transfer Learning with CIFAR-10 Dataset","54d6ffa5":"## Data Read"}}