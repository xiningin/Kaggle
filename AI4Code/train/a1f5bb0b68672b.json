{"cell_type":{"9c2b94fe":"code","1a10673d":"code","fead5ad6":"code","afc253e1":"code","768cb986":"markdown","7c6d21c5":"markdown","4edcf0f0":"markdown"},"source":{"9c2b94fe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\n# importation des librairies et packages Kears \nfrom keras.models import Sequential # il existe deux manieres d'initaliser un r\u00e9seau, soit en s\u00e9quence de couche ou en graphe\nfrom keras.layers import Conv2D # this is to perform the convolution operation i.e the first step of a CNN (3D in case of video)\nfrom keras.layers import MaxPooling2D # MaxPooling we need the maximum value pixel from the respective region of interest.\nfrom keras.layers import Flatten #  Flattening is the process of converting all the resultant 2 dimensional arrays into a single long continuous linear vector.\nfrom keras.layers import Dense # is used to perform the full connection of the neural network\nfrom keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array\nfrom matplotlib.pyplot import imshow\nfrom skimage.transform import resize\nprint( os.listdir(\"..\/input\/test_set-20180919t120343z-001\/test_set\/\"))\n\n# Any results you write to the current directory are saved as output.","1a10673d":"from keras.applications.vgg16 import preprocess_input \nfrom keras.applications.vgg16 import VGG16 # Ce modele m'a g\u00e9n\u00e9rer une erreur \nfrom keras.applications.vgg16 import decode_predictions\nfrom tabulate import tabulate\n#model = VGG16(weights = 'imagenet', include_top = False) # Cr\u00e9ation du mod\u00e8le VGG-16 implement\u00e9 par Keras\n#img =np.asarray( load_img(\"..\/input\/test_set-20180919t120343z-001\/test_set\/cats\/cat.4001.jpg\",target_size = (244,244)))\n#img = img_to_array(img)\n#img = img.reshape((1,img.shape[0], img.shape[1], img.shape[2] ))\n#img = preprocess_input(img)\n# Afficher les 3 classes les plus probables\n#print('Top 3 :', decode_predictions(y, top=3)[0])\nfrom keras.applications.mobilenet import MobileNet, decode_predictions\nfrom keras.models import load_model\nmodel = MobileNet()\n#model = VGG16(weights = 'imagenet')\nimg =np.asarray( load_img(\"..\/input\/test_set-20180919t120343z-001\/test_set\/cats\/cat.4001.jpg\",target_size = (224,224)))\nimg = resize(img, [224, 224])\nimshow(img)  # affichage de l'image\nX = np.reshape(img, [1, 224, 224, 3])\ny = model.predict(X)\nprint(tabulate(decode_predictions(y, top=5)[0], headers=['Name', 'Probability']))\n\n","fead5ad6":"from keras.applications import VGG16\nfrom keras.layers import Dense\n# Charger VGG-16 pr\u00e9-entra\u00een\u00e9 sur ImageNet et sans les couches fully-connected\nmodel = VGG16(weights=\"imagenet\", include_top=False, input_shape=(224, 224, 3))\n# R\u00e9cup\u00e9rer la sortie de ce r\u00e9seau\nx = model.output\nprint (x)\nmodel.summary()\n# Ajouter la nouvelle couche fully-connected pour la classification \u00e0 10 classes\npredictions = Dense(10, activation='softmax')(x)\n# D\u00e9finir le nouveau mod\u00e8le\nnew_model = Model(inputs=model.input, outputs=predictions)\n #1 : fine-tuning total\n#for layer in model.layers:\n #   layer.trainable = True\n#2 : extraction de features\n#for layer in model.layers:\n#    layer.trainable = False\n#3 : fine-tuning partiel\n# Ne pas entra\u00eener les 5 premi\u00e8res couches (les plus basses) \nfor layer in model.layers[:5]:\n    layer.trainable = False\n# Compiler le mod\u00e8le \nnew_model.compile(loss=\"categorical_crossentropy\", optimizer=optimizers.SGD(lr=0.0001, momentum=0.9), metrics=[\"accuracy\"])\n# Entra\u00eener sur les donn\u00e9es d'entra\u00eenement (X_train, y_train)\nmodel_info = new_model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=2)\n\n\n","afc253e1":"from keras.applications.resnet50 import resnet50,decode_predictions\nbase_model = resnet50 (weights='imagenet', include_top=False)\n\n# add a global spatial average pooling layer\nx = base_model.output\nx = GlobalAveragePooling2D()(x)\n# add a fully-connected layer\nx = Dense(1024, activation='relu')(x)\n# and a logistic layer -- let's say we have 7 classes\npredictions = Dense(7, activation='softmax')(x) \nmodel = Model(inputs=base_model.input, outputs=predictions)","768cb986":"The process of building a Convolutional Neural Network always involves four major steps : \n\nStep - 1 : Convolution\nStep - 2 : Pooling\nStep - 3 : Flattening\nStep - 4 : Full connection","7c6d21c5":"If the proxy don't let you use connect to vgg model , add pypac package then add this code :\n* **from keras.applications import resnet50\n* from pypac import pac_context_for_url\n* import ssl\n* context = ssl._create_unverified_context()\n* with pac_context_for_url('https:\/\/github.com\/fchollet\/deep-learning-models\/releases\/download\/v0.2\/resnet50_weights_th_dim_ordering_th_kernels_notop.h5'): # put any website here, it just uses the website to get proxy settings\n*     model = resnet50.ResNet50()**\n   ","4edcf0f0":"Transfer Learning :\nil faut remplacer les derni\u00e8res couches fully-connected qui permettent de classifier l'image dans une des 1000 classes ImageNet) par un classifieur plus adapt\u00e9 \u00e0 notre probl\u00e8me. "}}