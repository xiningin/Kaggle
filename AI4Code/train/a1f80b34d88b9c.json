{"cell_type":{"640f5525":"code","5ef19b87":"code","cf0a445c":"code","d14ab1b4":"code","e59a34b7":"code","0de8ae46":"code","b36fea97":"code","6449693e":"code","1f04dc83":"code","3397d55c":"code","b5239f3a":"code","550cc261":"code","3b383beb":"code","76de2ea3":"code","2508d7b0":"code","5ad61f8c":"code","33e117cd":"code","95629778":"code","ca8f8718":"code","4d3e1865":"code","f647c4ae":"code","e8e8d331":"code","c53ae4b0":"code","8f94a7e2":"code","9df092b5":"code","06b681aa":"code","0b3b9dcd":"code","7706e068":"code","de397e37":"code","d05356e4":"code","df4c725d":"code","e5eabc3a":"code","d0357200":"code","4b4e8fbd":"code","d0bac0fc":"code","ae2c446d":"code","6b73af9d":"code","580b664a":"code","ce43aa25":"code","7189e527":"code","eff15022":"code","5fee1bf7":"code","d539ee51":"code","1f655540":"code","bcafcd1e":"code","5c79ef48":"code","842b841d":"code","7f39bb3e":"code","872a4b88":"code","321c8738":"code","3059ca2a":"code","53a520a0":"code","5f64d4af":"code","1f667363":"code","ac67e4a8":"code","8379452b":"code","1c3a515a":"code","ad6f4060":"code","84494fc2":"code","563cd415":"code","41502588":"code","054e76bb":"code","f9019bb9":"code","0369e19f":"code","920950f3":"code","920f7588":"code","574bcbdd":"code","b3133bb9":"code","81d99e1f":"code","346f898c":"code","d6552696":"code","f64aa5be":"code","a62dc1ec":"code","0b5e82ed":"code","b1678762":"code","5302d0be":"code","55d3e7ad":"code","a4cf37a9":"code","888c819e":"code","3a8b9c94":"code","5c72a112":"code","fc70f724":"code","cf3a9326":"code","76727906":"code","2997a315":"code","3b335c8a":"code","eca004ee":"code","efdf22dc":"code","42802473":"code","f946f797":"code","ba2af7d8":"code","db6d5f1c":"code","2ef8790b":"code","57ffbd45":"code","68c1900b":"code","e979a85d":"code","27678126":"code","2e9d0ec0":"code","b19c707d":"code","bdf67509":"code","aa85a2d0":"code","7b43736b":"code","24887643":"code","2a41edf3":"code","23e53aa6":"code","34890d9a":"code","827dce6e":"code","fce5d256":"code","15e13493":"code","a11cebd7":"code","9a8e599b":"code","82126c73":"code","ba3329e2":"code","514b0107":"code","7067fbbe":"code","3c712908":"code","615b2e68":"code","2ca0fd84":"code","e1a3bf2d":"code","f06c42f7":"code","b029d54f":"code","01e9c9df":"code","c0e3e6b7":"code","30692ac8":"code","599b6507":"code","1acb971d":"code","0b8206f5":"code","6c0218a5":"code","889989a4":"code","693a72d2":"code","e1e59534":"code","0db3bd46":"code","7b69550d":"code","ba6546bf":"code","7826aea4":"code","8ea92ca0":"code","231e8458":"code","cad6caff":"code","b683d9fe":"code","1a17a3c9":"code","c82e2167":"code","ef1a7124":"code","32bf7a1a":"code","02b77b26":"code","c98f393b":"code","6bf1d9a4":"code","0f3aa67b":"code","ca4dc33f":"code","f0f392c0":"code","b2c727bb":"code","c60b7dbb":"code","46369779":"code","42cbffc4":"code","17796e2b":"code","bc8cca68":"code","4f8d9d89":"code","2b0ca7c3":"code","303a7a7c":"code","0cbb4de2":"code","6194333c":"code","81c7681f":"code","6406480d":"code","31837ba7":"code","52f91f3b":"code","c6f3dc44":"code","9d795aee":"code","5a73777b":"code","86eb1f12":"code","6f9cddab":"code","a27a6b79":"code","85e4264b":"code","d381552b":"code","dbe7a49f":"code","0705de1c":"code","78591ffd":"code","e9788da6":"code","da023b53":"code","4a7dbea1":"code","c68310ea":"code","dea5e1a1":"code","f5a5d83d":"code","e709a2a1":"code","cb05b0db":"code","f533a2d0":"code","ebedc43a":"code","9a541376":"code","db8b844a":"code","202e2f61":"code","5796834f":"code","c7d22aef":"code","5793e77a":"code","2e2a6a68":"code","c2b843c5":"code","b79b7401":"code","e122e3c1":"code","e3a5c7a2":"code","6f5b5c28":"code","2d6a066e":"code","b893546a":"code","a586783a":"code","7236c2c4":"code","bd2692bc":"code","0b793ee2":"code","d9aff7cc":"code","5d6ce3ff":"code","c39f60d0":"code","d278dbef":"code","f68df793":"code","40320c8c":"code","a162341c":"code","bb46c3fc":"code","8838dc3b":"code","3fcc2bc6":"code","24d30845":"code","46c57490":"code","de952bf7":"code","a0f5e256":"code","00ebd848":"code","9b797eab":"code","b099ba4b":"code","af4a5372":"code","a4d0e329":"code","bd394593":"code","5b8d6f42":"code","514d8155":"code","d87dfd90":"code","23d30885":"code","3248ecba":"code","bef09cb5":"code","c66f217e":"code","9cd3b71b":"code","d55d2e38":"code","0f311184":"code","fd9ca09c":"code","bacafc4d":"code","9f8acf45":"code","897a022f":"code","1a5b37e7":"code","d7001066":"code","b6c70376":"code","a0c3e2f1":"code","c6d88820":"code","9796c78d":"code","f1126ccc":"code","99d0e70e":"code","2e21d308":"code","031ec367":"code","e5d69b99":"code","c35312b3":"code","81072116":"markdown","4a601f33":"markdown","b8684725":"markdown","ede377ab":"markdown","d139601d":"markdown","13be869c":"markdown","13c77141":"markdown","6bfcf061":"markdown","b5cf5d00":"markdown","9c05bdb4":"markdown","61b8b0fd":"markdown","8cb9c35f":"markdown","286221ed":"markdown","1af31f55":"markdown","f1d2b05b":"markdown","c173ed6f":"markdown","b32379c5":"markdown","f9ad9c3d":"markdown","dca8def5":"markdown","b6d4bf5b":"markdown","2fdaff43":"markdown","8b3b6411":"markdown","2295380c":"markdown","e43cf897":"markdown","2d7ffe97":"markdown","1891d9d4":"markdown","56c6ca13":"markdown","98c16f94":"markdown","59c29c41":"markdown","85331279":"markdown","56e62f51":"markdown","4279dee0":"markdown","b29e8d96":"markdown","4471327d":"markdown","a57dc0e3":"markdown","e1b6f842":"markdown","da023a2a":"markdown","916a1737":"markdown","41a3e13a":"markdown","e08c6a60":"markdown","44758340":"markdown","dd0ee03f":"markdown","bc12813d":"markdown","100ce0bb":"markdown","f338379b":"markdown","f48d3cd4":"markdown","2d2d7749":"markdown","ebff3726":"markdown","23aa53ff":"markdown","1a95c2c0":"markdown","757e0f6c":"markdown","43b9293f":"markdown","9b964144":"markdown","dacffdad":"markdown","f9f6e601":"markdown","b2426e16":"markdown","29c04e46":"markdown","e746b46f":"markdown","a9a742c4":"markdown","0f94f3d5":"markdown","c292859a":"markdown","430a19eb":"markdown","d3dadd5c":"markdown","07953abc":"markdown","2fe8472b":"markdown","8e96aeb5":"markdown","dccb7425":"markdown","66c11976":"markdown","9bb0571a":"markdown","7380a699":"markdown","5c92879a":"markdown","0ae8195c":"markdown","81c2a005":"markdown","06f7dea5":"markdown","a9640299":"markdown","2630f67c":"markdown","d1d646d8":"markdown","ebfd6d75":"markdown","5d5cb78d":"markdown","c5300a03":"markdown","1090a013":"markdown","63317d8a":"markdown","b8c6d55f":"markdown","d1be01a9":"markdown","025e195a":"markdown","1c255f6b":"markdown"},"source":{"640f5525":"# Comparison operator\nprint(3 > 2)\nprint(5<4)\nprint('Apple' in ['App','Appl','Apple'])\nprint(3!=2)\n# Boolean operators\nprint(True and False)\nprint(True or False)","5ef19b87":"#Example 1\nprint(2+2)\n\n#Example 2\na=(50-5*6)\/4\nprint(a)\n\n#Example 3\nprint(8\/5.0)\n\n#Example 4\nprint(10+80)\nprint(10-(25-85)+45)\nprint(5*6-(2-8))","cf0a445c":"#Example 5\nprint(17\/\/3.0) # explicit floor division discards the fractional part\n\n#Example 6\nprint(18\/\/4.0)\n#The \/\/ operator is also provided for doing floor division no \n#matter what the operands are.\n#Example 7\nprint(17%3)\n\n#Example 6 Mode operation; between the first number and the second number.\n#As a result of this operation, the remaining number is obtained.","d14ab1b4":"#With Python, it is possible to use the ** operator to calculate powers\n\n#Example 8\nprint(5**2) #5 squared\n\n#Example 9\nprint(2**8) #2 to power of 8","e59a34b7":"#The equal sign (=) is used to assign a value to a variable.\n\n#Example 10\nwidth=8\nheight=10\nprint(width*height)","0de8ae46":"s1='string'\ns2='data'\nprint(s1+' '+s2)","b36fea97":"#Strings can be concatenated (glued together) with the \n#+ operator, and repeated with *:\n\nindex=3\nprint('un '*index)\n","6449693e":"#Two or more string literals\n\nprint('Py' 'thon')","1f04dc83":"prefix='Py'\n#prefix='thon'\n\nprefix+'thon'","3397d55c":"#Strings can be indexed (subscripted)\n\nword='Python'\nprint(word[0]) # character in position 0\nprint(word[5]) # character in position 5","b5239f3a":"print(word[-1]) # last character\nprint(word[-2]) #second-last character","550cc261":"#In addition to indexing, slicing is also supported. \n#While indexing is used to obtain individual characters, \n#slicing allows you to obtain a substring:\n\nprint(word[0:2]) # characters from position 0 (included) to 2 (excluded)\nprint(word[2:5]) # characters from position 2 (included) to 5 (excluded)","3b383beb":"#Note how the start is always included, and the end always \n#excluded. This makes sure that s[:i] + s[i:] is always equal to s:\n\nprint(word[:2]+word[2:])\nprint(word[:4]+word[4:])","76de2ea3":"#Slice indices have useful defaults; an omitted first index defaults \n#to zero, an omitted second index defaults to the size of the \n#string being sliced.\n\nprint(word[:2])  # character from the beginning to position 2 (excluded)\nprint(word[4:])\nprint(word[-2:])","2508d7b0":"print(word[1:3])  # character from the beginning to position 3 (excluded)","5ad61f8c":"print('J' + word[1:])\nprint(word[:2]+'py')","33e117cd":"squares=[1,4,9,16,25]\nsquares","95629778":"#Like strings (and all other built-in sequence type), \n#lists can be indexed and sliced:\n\nprint(squares[0]) # indexing returns the item \nprint(squares[-1])\nprint(squares[-3:]) # slicing returns a new list\nprint(squares[:]) #all","ca8f8718":"#All slice operations return a new list containing the requested\n#elements. This means that the following slice returns a new \n#(shallow) copy of the list:\n\nsquares+ [36,49,64,81,100]","4d3e1865":"cubes=[1,8,27,65,125]\n4**3\ncubes[3]=64 # replace the wrong value\ncubes","f647c4ae":"#You can also add new items at the end of the list, by using the\n#append() method (we will see more about methods later):\n\ncubes.append(216) # add the cube of 6\ncubes.append(7**3) # and the cube of 7\ncubes","e8e8d331":"#Assignment to slices is also possible, and this can even change\n#the size of the list or clear it entirely:\n\nletters=['a','b','c','d','e','f','g']\nprint(letters)\n# replace some values\nletters[2:5]=['C','D','E']\nprint(letters)\n# now remove them\nletters[2:5]=[]\nletters\n\n# clear the list by replacing all the elements with an empty list\nletters[:]=[]\nletters","c53ae4b0":"#The built-in function len() also applies to lists:\nletters = ['a', 'b', 'c', 'd']\nlen(letters)","8f94a7e2":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","9df092b5":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","06b681aa":"# If the number is positive, we print an appropriate message\nnum=3\nif num>0:\n    print(num,' is a positive number')\nprint('This is always printed')\n\nnum=-1\nif num>0:\n    print(num,' is a positive number')\nprint('This is also always printed')\n","0b3b9dcd":"# Program checks if the number is positive or negative\n# And displays an appropriate message\n\nnum = 3\n\n# Try these two variations as well. \n# num = -5\n# num = 0\n\nif num >= 0:\n    print(\"Positive or Zero\")\nelse:\n    print(\"Negative number\")","7706e068":"# In this program, \n# we check if the number is positive or\n# negative or zero and \n# display an appropriate message\n\nnum = 3.4\n\n# Try these two variations as well:\n# num = 0\n# num = -4.5\n\nif num > 0:\n    print(\"Positive number\")\nelif num == 0:\n    print(\"Zero\")\nelse:\n    print(\"Negative number\")","de397e37":"# In this program, we input a number\n# check if the number is positive or\n# negative or zero and display\n# an appropriate message\n# This time we use nested if\n\n# num = float(input(\"Enter a number: \")) Uncomment and run to see \nnum = 15\nif num >= 0:\n    if num == 0:\n        print(\"Zero\")\n    else:\n        print(\"Positive number\")\nelse:\n    print(\"Negative number\")","d05356e4":"var = 100\nif (var == 100): \n    print(\"Value of expression is 100\")\nprint(\"Good bye!\")","df4c725d":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 5 :\n    print('i is: ',i)\n    i +=1 \nprint(i,' is equal to 5')","e5eabc3a":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')","d0357200":"i=1\nwhile i<6:\n    print(i)\n    i+=1","4b4e8fbd":"#With the break statement we can stop the loop even if the while condition is true:\ni=1\nwhile i<6:\n    print(i)\n    if i==3:\n        break\n    i+=1","d0bac0fc":"#With the continue statement we can stop the current iteration, and continue with the next:\ni=0\nwhile i<6:\n    i+=1\n    if i==3:\n        continue\n    print(i)","ae2c446d":"words=['cats','window','defenstrate']\nfor w in words:\n    print(w,len(w))","6b73af9d":"for w in words[:]:\n    if len(w)>6:\n        words.insert(0,w)","580b664a":"for i,w in enumerate(words):\n    print((i+1),':',w)","ce43aa25":"#Loop through the letters in the word \"banana\":\nfor x in 'banana':\n    print(x)","7189e527":"for i in range(10):\n    print(i)","eff15022":"for i in range(5,10):\n    print(i)\nprint('#'*30)\nfor i in range(0,10,3): # 0 start 10 finish 3 step\n    print(i)\nprint('#'*30)\nfor i in range(-10,-100,-30): # 0 start 10 finish 3 step\n    print(i)","5fee1bf7":"a=['Mary','had','a','little','lamb']\nfor i in range(len(a)):\n    print(i,a[i])","d539ee51":"import numpy as np\nnew_list=np.arange(1,20)\nfor i in np.arange(1,30,2):\n    print(i)","1f655540":"#The else keyword in a for loop specifies a block of code to be executed when the loop is finished:\nfor x in range(6):\n    print(x)\nelse:\n    print('Finish')","bcafcd1e":"for n in range(2,10):\n    for x in range(2,n):\n        if n%x==0:\n            print(n,' equal',x,'*',n\/x)\n            break\n    else:\n            # loop fell through without finding a factor\n            print(n,' is a prime number')\n        ","5c79ef48":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","842b841d":"for num in range(2,10):\n    if num%2==0:\n        print('Found an even number',num)\n        continue\n    print('Found a number',num)","7f39bb3e":"def fib(n):\n    #print a fibonacci series up to n\n    a,b=0,1\n    while a<n:\n        print(a)\n        a,b=b,a+b\nfib(2000)","872a4b88":"def my_function1(country='Turkey'):\n    print('I am from '+ country)\nmy_function1()\nmy_function1('Canada')","321c8738":"def ask_ok(prompt, retries=4, complaint='Yes or no, please!'):\n    while True:\n        ok = raw_input(prompt)\n        if ok in ('y', 'ye', 'yes'):\n            return True\n        if ok in ('n', 'no', 'nop', 'nope'):\n            return False\n        retries = retries - 1\n        if retries < 0:\n            raise IOError('refusenik user')\n        print(complaint)","3059ca2a":"i=5\ndef f(arg=i):\n    print(arg)\ni=6\nf()","53a520a0":"def f(a,L=[]):\n    L.append(a)\n    return L\nprint(f(1))\nprint(f(2))\nprint(f(3))","5f64d4af":"def f(a,L=None):\n    if L is None:\n        L=[]\n    L.append(a)\n    return L","1f667363":"f([5,4,3])","ac67e4a8":"def parrot(voltage, state='a stiff', action='voom', type='Norwegian Blue'):\n    print(\"-- This parrot wouldn't\", action,)\n    print(\"if you put\", voltage, \"volts through it.\")\n    print(\"-- Lovely plumage, the\", type)\n    print(\"-- It's\", state, \"!\")","8379452b":"parrot(1000)                                          # 1 positional argument\nparrot(voltage=1000)                                  # 1 keyword argument\nparrot(voltage=1000000, action='VOOOOOM')             # 2 keyword arguments\nparrot(action='VOOOOOM', voltage=1000000)             # 2 keyword arguments\nparrot('a million', 'bereft of life', 'jump')         # 3 positional arguments\nparrot('a thousand', state='pushing up the daisies')  # 1 positional, 1 keyword","1c3a515a":"def cheeseshop(kind,*arguments,**keywords):\n    print('-- Do you have any',kind,'?')\n    print(\"-- I'm sorry, we're all out of\", kind)\n    for arg in arguments:\n        print(arg)\n    print(\"-\" * 40)\n    keys = sorted(keywords.keys())\n    for kw in keys:\n        print(kw, \":\", keywords[kw])","ad6f4060":"'''cheeseshop(\"Limburger\", \"It's very runny, sir.\",\n           \"It's really very, VERY runny, sir.\",\n           shopkeeper='Michael Palin',\n           client=\"John Cleese\",\n           sketch=\"Cheese Shop Sketch\")'''","84494fc2":"print(list(range(3,6)))  # normal call with separate arguments\nargs=[3,6]\nlist(range(*args))  # call with arguments unpacked from a list","563cd415":"def tri_recursion(k):\n    if(k>0):\n        result=k+tri_recursion(k-1)\n        print(result)\n    else:\n        result=0\n    return result\ntri_recursion(6)","41502588":"def make_incrementor(n):\n    return lambda x:x+n\nf=make_incrementor(50)","054e76bb":"print(f(2))\nprint(f(1))","f9019bb9":"pairs=[(1,'one'),(2,'two'),(3,'three'),(4,'four')]\npairs.sort(key=lambda pair:pair[1])\npairs","0369e19f":"#A lambda function that adds 10 to the number passed in as an argument, and print the result:\nx=lambda a:a+10\nprint(x(5))","920950f3":"x=5\ny=lambda x:x**2\ny(10)","920f7588":"x=lambda a:a+120\nprint(x(15))","574bcbdd":"x=lambda a,b,c:a+b+c\nprint(x(5,6,2))","b3133bb9":"number_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","81d99e1f":"def myfunc(n):\n      return lambda a : a * n\n\nmydoubler = myfunc(2)\n\nprint(mydoubler(11))","346f898c":"def my_fucntion():\n    '''Do nothing, but document it\n    \n    No,really, it doesn't do anything.\n    '''\n    pass\nprint(my_fucntion)   ","d6552696":"a=[66.25,333,333,1,12,154,789]\nprint(a.count(333),a.count(66.25),a.count('x'))\na.insert(2,-1)\na.append(333)\nprint(a)\na.index(333)\na.remove(333)\na.reverse()\nprint(a)\na.sort()\nprint(a.pop())\na","f64aa5be":"stack=[3,4,5]\nstack.append(6)\nstack.append(7)\nprint(stack)","a62dc1ec":"print(stack.pop())\nprint(stack.pop())\nprint(stack)","0b5e82ed":"def f(x): return x % 3 == 0 or x % 5 == 0\nf(9)","b1678762":"def oddAndEven(x):\n    if x%2==0:\n        return \"Even\"\n    else:\n        return \"Odd\"","5302d0be":"print(' Odd Or Even Number : '+str(oddAndEven(13)))\nprint(' Odd Or Even Number : '+str(oddAndEven(10)))","55d3e7ad":"def cube(x): return x*x*x\ncube(5)","a4cf37a9":"seq=range(1,8)\nlist(seq)\ndef add(x, y): return x+y\nadd(5,7)","888c819e":"squares=[]\nfor x in range(10):\n    squares.append(x**2)\nsquares","3a8b9c94":"for x in range(0,18,2):\n    print(x)","5c72a112":"squares=[i*2 for i in range(1,10,1)]\nsquares","fc70f724":"[(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]","cf3a9326":"a=[-1,1,66,45,87,65,12,65]\ndel a[0]\nprint(a)\ndel a[2:4]\nprint(a)\ndel a[:]\nprint(a)","76727906":"t=123,45,65,78,'hi!'\nprint(t[0])\nprint(t)\n# Tuples may be nested:\nu=t,(1,2,3,4,5,6)\nu","2997a315":"empty=()\nsingleton='hello',\nlen(empty)\nlen(singleton)\nprint(singleton)","3b335c8a":"#create dictionary and look its keys and values\ndictionary = {'spain' : 'madrid','usa' : 'vegas'}\nprint(dictionary.keys())\nprint(dictionary.values())","eca004ee":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['spain'] = \"barcelona\"    # update existing entry\nprint(dictionary)\ndictionary['france'] = \"paris\"       # Add new entry\nprint(dictionary)\ndel dictionary['spain']              # remove entry with key 'spain'\nprint(dictionary)\nprint('france' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)","efdf22dc":"tel={'jack':4098,'sape':4139}\ntel['guido']=4127\nprint(tel)\nprint(tel['jack'])\ndel tel['sape']\ntel['irv']=4127\nprint(tel)\nprint(tel.keys())\nprint(tel.values())\n\n'jack' in tel","42802473":"dict([('sape',4139),('guido',4127),('jack',4098)])","f946f797":"{x:x**2 for x in (2,4,6)}","ba2af7d8":"for i,v in enumerate(['tic','tac','toe']):\n    print(i,v)","db6d5f1c":"# Fibonacci numbers module\n\ndef fib(n):    # write Fibonacci series up to n\n    a, b = 0, 1\n    while b < n:\n        print(b),\n        a, b = b, a+b\n\ndef fib2(n):   # return Fibonacci series up to n\n    result = []\n    a, b = 0, 1\n    while b < n:\n        result.append(b)\n        a, b = b, a+b\n    return result","2ef8790b":"# How can we learn what is built in scope\nimport builtins\ndir(builtins)","57ffbd45":"# example of what we learn above\ndef tuble_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","68c1900b":"import sys\n'''\nThe built-in function dir() is used to find out which names a \nmodule defines. It returns a sorted list of strings:\n'''\nprint(dir(sys))","e979a85d":"s='Hello world'\nprint(str(s))\nprint(repr(s))\nprint(str(1.0\/7.0))\nx=10*3.25\ny=200*200\ns = 'The value of x is ' + repr(x) + ', and y is ' + repr(y) + '...'\nprint(s)","27678126":"#while True:print('Hello World')\n#Syntax errors, also known as parsing errors, are perhaps \n#he most common kind of complaint you get while you are still \n#earning Python:","2e9d0ec0":"def this_fails():\n    x=1\/10\ntry:\n    this_fails()\nexcept ZeroDivisonError as detail:\n    print('Handling run-time error :',detail)   ","b19c707d":"class MyClass:\n    ''' A simple example class '''\n    i=12345\n    \n    def f(self):\n        return 'hello world'","bdf67509":"x=MyClass()","aa85a2d0":"class Complex:\n    def __init__(self,realpart,imagpart):\n        self.r=realpart\n        self.i=imagpart\nx=Complex(3.0,-4.5)\nprint(x.i,x.r)","7b43736b":"x.counter=1\nwhile x.counter<10:\n    x.counter=x.counter*2\nprint(x.counter)\ndel x.counter","24887643":"class Dog:\n    trick=[]\n    kind='canine'\n    def __init__(self,name):\n        self.name=name\n    def add_trick(self,trick):\n        self.tricks.append(trick)\nd=Dog('Fibo')\ne=Dog('Buddy')\nprint(d.kind)\nprint(e.kind)\nprint(d.name)\nprint(e.name)","2a41edf3":"class Dog:\n\n    tricks = []             # mistaken use of a class variable\n\n    def __init__(self, name):\n        self.name = name\n\n    def add_trick(self, trick):\n        self.tricks.append(trick)\n\nd = Dog('Fido')\ne = Dog('Buddy')\nd.add_trick('roll over')\ne.add_trick('play dead')\nd.tricks                # unexpectedly shared by all dogs\n['roll over', 'play dead']","23e53aa6":"import pandas as pd # import library as pd\nnames=['Bob','Jessica','Mary','Jhon','Mel']\nbirths=[968,45,756,12,65]\n#To merge these two lists together we will use the zip function.","34890d9a":"BabyDataSet=list(zip(names,births))\nprint(BabyDataSet)","827dce6e":"df=pd.DataFrame(data=BabyDataSet,columns=['Names','Births'])\ndf","fce5d256":"#df.to_csv('C:\\\\Users\\\\aAa\\\\Desktop\\\\Kaggle-Python-Learn\\\\biths.csv',index=False,header=False)","15e13493":"#Merge the names and the births data set using the zip function.\nBabyDataSet = list(zip(names,births))\nBabyDataSet[:10]","a11cebd7":"# Lets add a column\ndf['Year']=2019","9a8e599b":"# using loc accessor\ndf.loc[1:5,[\"Names\"]]","82126c73":"# Slicing and indexing series\ndf.loc[1:10,\"Names\":]   # 10 and \"Defense\" are inclusive","ba3329e2":"# replaces the deprecated ix function\n#df.ix[5:,'col']\ndf.loc[df.index[1:],'Names']","514b0107":"# replaces the deprecated ix function\n#df.ix[:3,['col', 'test']]\ndf.loc[df.index[:3],['Names', 'Year']]","7067fbbe":"#df=pd.read_csv('C:\\\\Users\\\\aAa\\\\Desktop\\\\Kaggle-Python-Learn\\\\biths.csv')\ndf","3c712908":"##df=pd.read_csv('C:\\\\Users\\\\aAa\\\\Desktop\\\\Kaggle-Python-Learn\\\\biths.csv',header=None)\nprint(df)\n#df=pd.read_csv('C:\\\\Users\\\\aAa\\\\Desktop\\\\Kaggle-Python-Learn\\\\biths.csv',names=['Name','Birth'])\nprint(df)","615b2e68":"df.info()","2ca0fd84":"df.head(4)","e1a3bf2d":"#Now lets take a look at the last five records of the dataframe\ndf.tail(4)","f06c42f7":"df.sample()","b029d54f":"# Check data type of the columns\ndf.dtypes","01e9c9df":"#Check data type of births column\ndf.Births.dtype","c0e3e6b7":"#We can use the unique property of the dataframe to find all the unique records of the \"Names\" column.\n\ndf['Names'].unique()","30692ac8":"# If you actually want to print the unique values:\nfor x in df['Names'].unique():\n    print(x)","599b6507":"print(df['Names'].describe())","1acb971d":"#clean name column convert to upper\ndf['Names']=df.Names.apply(lambda x:x.upper())\ndf","0b8206f5":"#clean name column convert to upper\ndf['Names']=df.Names.apply(lambda x:x.lower())\ndf","6c0218a5":"name=df.groupby('Names')\ndf1=name.sum()\ndf1","889989a4":"df","693a72d2":"sorted=df.sort_values(['Births'],ascending=False)\nsorted.head(1)","e1e59534":"df['Births'].max()","0db3bd46":"import numpy as np\na=np.arange(15).reshape(3,5)\na","7b69550d":"a.shape","ba6546bf":"a.ndim","7826aea4":"a.dtype.name","8ea92ca0":"a.itemsize","231e8458":"a=np.array([2,3,4])\na","cad6caff":"a.dtype","b683d9fe":"b=np.array([1.2,3.5,5.1])\nb.dtype","1a17a3c9":"#a=np.array(1,2,3,4) #that's not true\na=np.array([1,2,3,4]) # that's true","c82e2167":"#array transforms sequences of sequences into two-dimensional \n#arrays, sequences of sequences of sequences into three-dimensional arrays, and so on.\n\nb=np.array([(1.5,2,3),(4,5,6)])\nb\n","ef1a7124":"np.zeros((3,4))","32bf7a1a":"np.eye(4,4)","02b77b26":"eyes=np.eye(5,5)","c98f393b":"np.diagonal(eyes)","6bf1d9a4":"array=np.array([[2,3,4],[6,7,8],[10,11,12]])","0f3aa67b":"array.T","ca4dc33f":"np.ones((2,3,4),dtype=np.int16)","f0f392c0":"np.empty((2,3))","b2c727bb":"np.arange(10,30,5)","c60b7dbb":"np.arange(-1,1,0.1)","46369779":"np.arange(0,2,.3)","42cbffc4":"np.linspace(0,2,9)","17796e2b":"np.linspace(0,2,10)","bc8cca68":"from numpy import pi\nx=np.linspace(0,2*pi,100)\nf=np.sin(x)","4f8d9d89":"a=np.arange(6) #1d array\nprint(a)\nb=np.arange(12).reshape(4,3) #2d array\nprint(b)\nc=np.arange(24).reshape(2,3,4) #3d array\nprint(c)","2b0ca7c3":"print(np.arange(10000))","303a7a7c":"print(np.arange(10000).reshape(100,100))","0cbb4de2":"a=np.array([20,30,40,50])\nb=np.arange(4)\nprint(b)\nc=a-b\nprint(c)\nprint(b**2)\nprint(10*np.sin(a))\nprint(a<35)","6194333c":"B=np.arange(3)\nprint(B)","81c7681f":"np.exp(B)","6406480d":"np.sqrt(B)","31837ba7":"C=np.array([2.,-1.,4.])\nnp.add(B,C)","52f91f3b":"np.abs(-100)","c6f3dc44":"a=np.arange(10)**3\nprint(a)","9d795aee":"print(a[2])\nprint(a[2:5])\na[:6:2]=-1100\nprint(a)","5a73777b":"a=np.floor(10*np.random.random((3,4)))\nprint(a)","86eb1f12":"a.shape","6f9cddab":"print(a.shape[0])","a27a6b79":"a.ravel() # returns the array,flattend","85e4264b":"a.shape","d381552b":"b.T","dbe7a49f":"b.T.shape","0705de1c":"d=a.copy()\nprint(d)","78591ffd":"print(d is a)","e9788da6":"print(d.base is a)","da023b53":"a=np.arange(12)**2\ni=np.array([1,1,3,8,5])\nprint(a[i])\nj=np.array([[3,4],[9,7]])\nprint(a[j])","4a7dbea1":"from numpy import poly1d\np = poly1d([3,4,5])","c68310ea":"print(p)\nprint(p*p)\nprint(p.integ(k=6))\nprint(p.deriv())\np([4, 5])","dea5e1a1":"from scipy import special\ndef drumhead_height(n, k, distance, angle, t):\n    kth_zero = special.jn_zeros(n, k)[-1]\n    return np.cos(t) * np.cos(n*angle) * special.jn(n, distance*kth_zero)\ntheta = np.r_[0:2*np.pi:50j]\nradius = np.r_[0:1:50j]\nx = np.array([r * np.cos(theta) for r in radius])\ny = np.array([r * np.sin(theta) for r in radius])\nz = np.array([drumhead_height(1, 1, r, theta, 0.5) for r in radius])","f5a5d83d":"import matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nfig = plt.figure()\nax = Axes3D(fig)\nax.plot_surface(x, y, z, rstride=1, cstride=1, cmap=cm.jet)\nax.set_xlabel('X')\nax.set_ylabel('Y')\nax.set_zlabel('Z')\nplt.show()","e709a2a1":"import numpy as np\nimport scipy.signal as signal\nimport matplotlib.pyplot as plt","cb05b0db":"b1 = signal.firwin(40, 0.5)\nb2 = signal.firwin(41, [0.3, 0.8])\nw1, h1 = signal.freqz(b1)\nw2, h2 = signal.freqz(b2)","f533a2d0":"plt.title('Digital filter frequency response')\nplt.plot(w1, 20*np.log10(np.abs(h1)), 'b')\nplt.plot(w2, 20*np.log10(np.abs(h2)), 'r')\nplt.ylabel('Amplitude Response (dB)')\nplt.xlabel('Frequency (rad\/sample)')\nplt.grid()\nplt.show()","ebedc43a":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport os\nprint(os.listdir(\"..\/input\"))","9a541376":"#read_csv load data\ndata = pd.read_csv('..\/input\/google-play-store-apps\/googleplaystore.csv')","db8b844a":"#first 5 rows\ndata.head()","202e2f61":"#last 5 rows\ndata.tail()","5796834f":"data.sample(5)","c7d22aef":"data.sample(frac=0.1)","5793e77a":"#Can you show your data's columns?\ndata.columns","2e2a6a68":"#so data's info \ndata.info()","c2b843c5":"#Empty fields within the data set\ndata.isnull().sum()\n#It appears that the value of the rating is a little empty. We're gonna have to fill it.","b79b7401":"from sklearn.impute import SimpleImputer\nim=SimpleImputer(missing_values=np.nan, strategy='mean')\ndata.iloc[:,2:3]=im.fit_transform(data.iloc[:,2:3])\n#so,We've done adding implants to the empty spaces by taking the mean.\ndata.isnull().sum()","e122e3c1":"data.head()","e3a5c7a2":"# For example lets look frequency of pokemom types\nprint(data['Category'].value_counts(dropna =False))  # if there are nan values that also be counted\n# As it can be seen below there are 112 water pokemon or 70 grass pokemon","6f5b5c28":"#Category Analysis\nsns.barplot(x=data['Category'].value_counts().index,y=data['Category'].value_counts().values)\nplt.xlabel(\"Category\")\nplt.ylabel(\"Count\")\nplt.title(\"Category Count Operation\")\nplt.xticks(rotation=90)\nplt.show()\n#It seems that the most family and game categories are traded.","2d6a066e":"\nfig, ax = plt.subplots()\nax.scatter(x = data.groupby('Category')['Rating'].mean()[1:].index, y = data.groupby('Category')['Rating'].mean()[1:].values)\nplt.ylabel('Category', fontsize=13)\nplt.xlabel('Rating', fontsize=13)\nplt.xticks(rotation=90)\nplt.show()","b893546a":"ax = sns.boxplot(x=\"Rating\", y=\"Size\", data=data)\nplt.show()","a586783a":"data[data['Reviews']==max(data.Reviews)]\n#most viewed and displayed application","7236c2c4":"data[data['Reviews']==min(data.Reviews)]\n#least viewed and displayed application","bd2692bc":"#scaling and cleaning size of installation\ndef change_size(size):\n    if 'M' in size:\n        x = size[:-1]\n        x = float(x)*1000000\n        return(x)\n    elif 'k' == size[-1:]:\n        x = size[:-1]\n        x = float(x)*1000\n        return(x)\n    else:\n        return None\n\ndata[\"Size\"] = data[\"Size\"].map(change_size)\n\n#filling Size which had NA\ndata.Size.fillna(method = 'ffill', inplace = True)","0b793ee2":"data.head()","d9aff7cc":"filter_data=data[data['Size']>int(data['Size'].mean())]","5d6ce3ff":"import warnings\nwarnings.filterwarnings(\"ignore\")  # to ignore warning\n\nfilter_data.Reviews=filter_data.Reviews.astype(float)\nfilter_data[filter_data['Reviews']>15].Type.value_counts()","c39f60d0":"sns.countplot(filter_data[filter_data['Reviews']>15].Type)\nplt.title(\"Free vs Paid\")\nplt.show()","d278dbef":"filter_data[(filter_data['Reviews']>15)&(filter_data['Type']=='Paid')]\n#The value of the type in the data we filter is analyzed for payment. For this, the total price value will be calculated. \n#For this, we need to remove the $ symbol from the charge column. In addition, it is necessary to change the type of milk.\n","f68df793":"filter_data['Price'] = filter_data.Price.str.replace(\"$\",\"\")\nfilter_data.Price=filter_data.Price.astype('float')","40320c8c":"#Calculating the total fee\nstr(sum(filter_data[(filter_data['Reviews']>15)&(filter_data['Type']=='Paid')].Price))+' $'","a162341c":"#filter_data[(filter_data['Reviews']>15)&(filter_data['Type']=='Paid')]\ndf_filter=filter_data.groupby('Category')['Price'].sum()\n#sum and display of paid products for the filtered area in terms of categorical\nd1=pd.DataFrame(df_filter.index,columns=['Category'])\nd2=pd.DataFrame(df_filter.values,columns=['Price'])\ndf_data_filter=pd.concat([d1,d2],axis=1)","bb46c3fc":"df_data_filter=df_data_filter.sort_values(by='Price',ascending=False)","8838dc3b":"df_data_filter","3fcc2bc6":"cmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(data.corr(), cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5},annot=True)\nplt.show()","24d30845":"plt.figure(figsize=(5,5))\nplt.pie(df_data_filter.Price[0:5], labels=df_data_filter.Category[0:5], autopct='%1.1f%%',shadow=True, startangle=90)\n#ax.axis('Price')  # Equal aspect ratio ensures that pie is drawn as a circle.\n#plt.legend()\nplt.show()","46c57490":"#sns.relplot(x=\"Rating\",y=\"Reviews\",data=data)\n#plt.show()\n#sns.lmplot(x=\"Review\", y=\"Rating\", hue=\"Category\",data=data)\n#plt.show()\ndata.dropna(inplace=True)","de952bf7":"everyone=[]\nteen=[]\neveryone10=[]\nmature17=[]\nadults18=[]\nunrates=[]\n\neveryone.append(sum(data[(data['Content Rating']==\"Everyone\")].Size))\nteen.append(sum(data[(data['Content Rating']==\"Teen\")].Size))\nmature17.append(sum(data[(data['Content Rating']==\"Mature 17+\")].Size))\nadults18.append(sum(data[(data['Content Rating']==\"Adults only 18+\")].Size))\nunrates.append(sum(data[(data['Content Rating']==\"Unrated\")].Size))\neveryone10.append(sum(data[(data['Content Rating']==\"Everyone 10+\")].Size))   \n#data.groupby('Content Rating')['Size'].mean().values\nplt.plot(data['Content Rating'].unique(),[everyone,teen,mature17,adults18,unrates,everyone10])\nplt.xlabel('Content Rating')\nplt.ylabel('Sum Of Size')\nplt.xticks(rotation=90)\nplt.show()","a0f5e256":"data['Content Rating'].unique()\n#everyone","00ebd848":"data.head()","9b797eab":"len(data[data['Category']=='FAMILY'])","b099ba4b":"sns.barplot(x=data['Category'].unique(),y=data.groupby('Category')['Rating'].mean().values)\nplt.xticks(rotation=90)\nplt.xlabel('Category')\nplt.ylabel('Mean')\nplt.show()","af4a5372":"data.head()","a4d0e329":"data.Price=data.Price.str.replace(\"$\",\"\")\nprint(max(data[data['Type']=='Paid'].Price.values))\nprint(min(data[data['Type']=='Paid'].Price.values))\npaid_filter=data[data['Type']=='Paid']","bd394593":"paid_filter.Price=paid_filter.Price.astype(float)\npaid_filter.Reviews=paid_filter.Reviews.astype(float)\npaid_filter.groupby('Category')['Reviews'].sum().values","5b8d6f42":"plt.scatter(x=paid_filter.Category.unique(),y=paid_filter.groupby('Category')['Reviews'].sum().values)\nplt.xticks(rotation=90)\nplt.show()","514d8155":"data.Genres.unique()","d87dfd90":"countplot=data.Genres.value_counts()","23d30885":"plt.figure(figsize=(10,10))\nsns.barplot(x=countplot.index[:50],y=countplot[:50])\nplt.xticks(rotation=90)\nplt.title(\"Count Genres of DataSet\")\nplt.show()","3248ecba":"data[data['Genres']=='Tools'].Type.value_counts().index","bef09cb5":"explode=[0,0.1]\nlabels=[\"Free\",\"Paid\"]\nplt.figure(figsize=(5,5))\nplt.pie(data[data['Genres']=='Tools'].Type.value_counts().values,labels=data[data['Genres']=='Tools'].Type.value_counts().index,explode=explode, autopct='%1.1f%%')\nplt.title(\"Genres Tools Type System\")\nplt.show()","c66f217e":"data.head()","9cd3b71b":"data.Reviews=data.Reviews.astype(float)\ns=paid_filter[paid_filter['Price']==0.99].Category.unique()\n\npaid_filter[paid_filter['Price']==0.99].groupby('Category')['Rating'].mean()\n\n\nplt.figure(1, figsize=(15, 7))\n\nplt.subplot(131)\nplt.bar(paid_filter[paid_filter['Price']==0.99].groupby('Category')['Rating'].mean().index, paid_filter[paid_filter['Price']==0.99].groupby('Category')['Rating'].mean().values)\nplt.xticks(rotation=90)\nplt.subplot(132)\nplt.scatter(paid_filter[paid_filter['Price']==0.99].groupby('Category')['Rating'].mean().index, paid_filter[paid_filter['Price']==0.99].groupby('Category')['Rating'].mean().values)\nplt.xticks(rotation=90)\nplt.subplot(133)\nplt.plot(paid_filter[paid_filter['Price']==0.99].groupby('Category')['Rating'].mean().index, paid_filter[paid_filter['Price']==0.99].groupby('Category')['Rating'].mean().values)\nplt.suptitle('Categorical Plotting')\nplt.xticks(rotation=90)\nplt.tight_layout()\nplt.show()","d55d2e38":"data.head()","0f311184":"# Plot miles per gallon against horsepower with other semantics\nsns.relplot(x=\"Rating\", y=\"Reviews\", hue=\"Type\", \n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=6, data=data)\nplt.show()","fd9ca09c":"g = sns.PairGrid(data, diag_sharey=False)\ng.map_lower(sns.kdeplot)\ng.map_upper(sns.scatterplot)\ng.map_diag(sns.kdeplot, lw=3)\nplt.show()","bacafc4d":"ax = sns.kdeplot(data.Rating, data.Size,\n                 cmap=\"Blues\", shade=True)\nplt.show()","9f8acf45":"data.head()","897a022f":"data.Type=[ 1 if type==\"Free\" else 0 for type in data.Type]","1a5b37e7":"data.head(2)","d7001066":"data.columns","b6c70376":"col={\"Content Rating\":\"ContentRating\",\"Last Updated\":\"LastUpdated\",\"Current Ver\":\"CurrentVer\",\"Android Ver\":\"AndroidVer\"}\ndata.rename(columns=col,inplace=True)","a0c3e2f1":"def showColumns(data):\n    for i,col in enumerate(data):\n        print(\"{} . columns {}\".format(i,col))","c6d88820":"showColumns(data.columns)","9796c78d":"data.dtypes","f1126ccc":"data.Price=data.Price.astype('float')","99d0e70e":"data.Price=[ 1 if price>0 else -1 for price in data.Price]","2e21d308":"np.mean(data.Price)","031ec367":"np.eye(5)","e5d69b99":"np.std(data[:5],axis=1)","c35312b3":"np.var(data)","81072116":"<p  id='28'><h3><b>Analyze Data<\/b><\/h3><\/p>\n<p>To find the most popular name or the baby name with the higest birth rate, we can do one of the following.<\/p>\n<ul>\n    <li>Sort the dataframe and select the top row<\/li>\n    <li>Use the <b>max()<\/b> attribute to find the maximum value<\/li>\n<\/ul>","4a601f33":"<p  id='35'><h3><b>Universal Functions<\/b><\/h3><\/p>\n<p>NumPy provides familiar mathematical functions such as sin, cos, and exp. In NumPy, these are called \u201cuniversal functions\u201d(ufunc). Within NumPy, these functions operate elementwise on an array, producing an array as output.<\/p>","b8684725":"<p>The shape of an array can be changed with various commands. Note that the following three commands all return a modified array, but do not change the original array:<\/p>","ede377ab":"<p id='13'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Introduction to Functions<\/b><\/h3><\/p>\n<p>We can create a function that writes the Fibonacci series to an arbitrary boundary:<\/p>","d139601d":"<p>This function can be called in several ways:<\/p>\n<ul>\n<li>giving only the mandatory argument: ask_ok('Do you really want to quit?')<\/li>\n<li>giving one of the optional arguments: ask_ok('OK to overwrite the file?', 2)<\/li>\n<li>or even giving all arguments: ask_ok('OK to overwrite the file?', 2, 'Come on, only yes or no!')<\/li>\n<\/ul>\n\n<p>The default values are evaluated at the point of function definition in the defining scope, so that<\/p>","13be869c":"<p>accepts one required argument (voltage) and three optional arguments (state, action, and type). This function can be called in any of the following ways:<\/p>","13c77141":"<br>We use list comprehension for data analysis often. \n<br> list comprehension: collapse for loops for building lists into a single line\n<br>Ex: num1 = [1,2,3] and we want to make it num2 = [2,3,4]. This can be done with for loop. However it is  unnecessarily long. We can make it one line code that is list comprehension.","6bfcf061":"<p>The reverse situation occurs when the arguments are already in a list or tuple but need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in range() function expects separate start and stop arguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple:<\/p>","b5cf5d00":"<p id='36'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Indexing, Slicing and Iterating<\/b><\/h3><\/p>\n<p>One-dimensional arrays can be indexed, sliced and iterated over, much like lists and other Python sequences.<\/p>","9c05bdb4":"<p>Export the dataframe to a csv file. We can name the file births1880.csv. The function to_csv will be used to export the file. The file will be saved in the same location of the notebook unless specified otherwise.<\/p>","61b8b0fd":"<p>The above example uses a lambda expression to return a function. Another use is to pass a small function as an argument:<\/p>","8cb9c35f":"<p><h2 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\">Scipy<\/h2><\/p>\n<p>There are two (interchangeable) ways to deal with 1-d polynomials in SciPy. The first is to use the poly1d class from Numpy. This class accepts coefficients or polynomial roots to initialize a polynomial. The polynomial object can then be manipulated in algebraic expressions, integrated, differentiated, and evaluated. It even prints like a polynomial:<\/p>","286221ed":"while True:\n    try:\n        x=int(input('Please enter a number :'))\n        break\n    except ValueError:\n        print('Stop!')","1af31f55":"<p>The keyword def introduces a function definition. It must be followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, and must be indented.<\/p>","f1d2b05b":"<p id='7'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Lists Operation<\/b><\/h3><\/p>\n<p>Python knows a number of compound data types, used to group together other values. The most versatile is the list, which can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type.<\/p>","c173ed6f":"<p id='17'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Dictionaries<\/b><\/h3><\/p>\n<p>Another useful data type built into Python is the dictionary (see Mapping Types \u2014 dict). Dictionaries are sometimes found in other languages as \u201cassociative memories\u201d or \u201cassociative arrays\u201d. Unlike sequences, which are indexed by a range of numbers, dictionaries are indexed by keys, which can be any immutable type; strings and numbers can always be keys. Tuples can be used as keys if they contain only strings, numbers, or tuples; if a tuple contains any mutable object either directly or indirectly, it cannot be used as a key. You can\u2019t use lists as keys, since lists can be modified in place using index assignments, slice assignments, or methods like append() and extend().<\/p>","b32379c5":"<pre>Before continue with pandas, we need to learn logic, control flow and filtering. \nComparison operator: ==, <, >, <= \nBoolean operators: and, or ,not \nFiltering pandas<\/pre>","f9ad9c3d":"<p>The dict() constructor builds dictionaries directly from sequences of key-value pairs:<\/p>","dca8def5":"<p id='34'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Basic Operations<\/b><\/h3><\/p>\n<p>Arithmetic operators on arrays apply elementwise. A new array is created and filled with the result.<\/p>","b6d4bf5b":"<p>A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective. For example:<\/p>","2fdaff43":"<p id='19'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b> Input and Output<\/b><\/h3><\/p>\n<p>There are several ways to present the output of a program; data can be printed in a human-readable form, or written to a file for future use. This chapter will discuss some of the possibilities.<\/p>","8b3b6411":"<p id='27'><h3><b>Prepare Data<\/b><\/h3><\/p>\n<p>The data we have consists of baby names and the number of births in the year 1880. We already know that we have 5 records and none of the records are missing (non-null values).<\/p>\n<p>Realize that aside from the check we did on the \"Names\" column, briefly looking at the data inside the dataframe should be as far as we need to go at this stage of the game. As we continue in the data analysis life cycle we will have plenty of opportunities to find any issues with the data set.<\/p>","2295380c":"<pre>value_counts(): Frequency counts\noutliers: the value that is considerably higher or lower from rest of the data\n\nLets say value at 75% is Q3 and value at 25% is Q1.\nOutlier are smaller than Q1 - 1.5(Q3-Q1) and bigger than Q3 + 1.5(Q3-Q1). (Q3-Q1) = IQR \nWe will use describe() method. Describe method includes:\ncount: number of entries\nmean: average of entries\nstd: standart deviation\nmin: minimum entry\n25%: first quantile\n50%: median or second quantile\n75%: third quantile\nmax: maximum entry\n\nWhat is quantile?\n\n1,4,5,6,8,9,11,12,13,14,15,16,17\nThe median is the number that is in middle of the sequence. In this case it would be 11.\n\nThe lower quartile is the median in between the smallest number and the median i.e. in between 1 and 11, which is 6.\n\nThe upper quartile, you find the median between the median and the largest number i.e. between 11 and 17, which will be 14 according to the question above.\n<pre>","e43cf897":"<p>In addition, dict comprehensions can be used to create dictionaries from arbitrary key and value expressions:<\/p>","2d7ffe97":"<p id='8'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>if-elif-else<\/b><\/h3><\/p>\n<p>Decision making is required when we want to execute a code only if a certain condition is satisfied.<\/p>\n<p>[i + 1 for i in num1 ]: list of comprehension\n<br> i +1: list comprehension syntax\n<br> for i in num1: for loop syntax\n<br> i: iterator\n<br> num1: iterable object<\/p>\n<p>\nThe if\u2026elif\u2026else statement is used in Python for decision making.\nPerhaps the most well-known statement type is the if statement. For example:\n<\/p>","1891d9d4":"<p>The given end point is never part of the generated list; range(10) generates a list of 10 values, the legal indices for items of a sequence of length 10. It is possible to let the range start at another number, or to specify a different increment (even negative; sometimes this is called the \u2018step\u2019):<\/p>","56c6ca13":"<p>The function zeros creates an array full of zeros, the function ones creates an array full of ones, and the function empty creates an array whose initial content is random and depends on the state of the memory. By default, the dtype of the created array is float64.<\/p>","98c16f94":"<p id='5'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Maths Operations<\/b><\/h3><\/p>\n\n<p>Python can do a variety of mathematical operations. In this case, we do not need to define any variables. This is described in the examples below for this situation.<\/p>\n\n<p>The following mathematical operations are given 3 kinds of examples. In the first example, only data from the variable definition are given. Thus, results were obtained. In the second example, a variable is defined. In this example, the operations were performed. In the last example, a decimal data is obtained by dividing int data with decimal data.<\/p>**","59c29c41":"<p id='21'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Conclusion<\/b><\/h3><\/p>\n<p>As a result, we have explained the seaborn library in a very detailed way and created a wide variety of graphs.<\/p>\n\n**<span style=\"color:teal;\"> If you liked this Notebook, please do <b>UPVOTED<\/b>.<\/span>**\n\n**<span style=\"color:teal;\"> If you have any suggestions or questions, I am all ears!<\/span>**\n**<span style=\"color:teal;\"> If you are new to Kaggle World, <br> Please do visit to know about Kaggle life style at - <\/span> <a style=\"color:red;\" href='https:\/\/towardsdatascience.com\/happy-kaggling-data-scientists-competition-5e617d1512f2'>Happy Kaggling<\/a>**\n\n**<span style=\"color:teal;\">Best Wishes!<\/span>**","85331279":"<p>List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.\n\nFor example, assume we want to create a list of squares, like:<\/p>","56e62f51":"<p>Class instantiation uses function notation. Just pretend that the class object is a parameterless function that returns a new instance of the class. For example (assuming the above class):<\/p>","4279dee0":"<p>More than one sequence may be passed; the function must then have as many arguments as there are sequences and is called with the corresponding item from each sequence (or None if some sequence is shorter than another). For example:<\/p>","b29e8d96":"<p id='pythonforbeginners'><h3><b>Python for Beginners<\/b><\/h3><\/p>\n<p id='4'><h3><b>Python Installation<\/b><\/h3><\/p>\n<p>Link: https:\/\/www.youtube.com\/watch?v=dX2-V2BocqQ<\/p>\n<p>There is very good expression in this section.<\/p>","4471327d":"<h1 style=\"text-align:center;font-size:50px;background:#6D929B; border:0; color:black\" > Python For Data Scientists <\/h1>\n\n<ul>\n    <a href='#Introduction'><li>Introduction<\/li><\/a>\n    <ul>\n        <a href='#1'><li>What is Python Programming Language?<\/li><\/a>\n        <a href='#2'><li>Why Python Programming Language?<\/li><\/a>\n        <a href='#3'><li>Required Libraries<\/li><\/a>\n    <\/ul>\n<\/ul>\n\n<ul>\n    <a href='#pythonforbeginners'><li>Python for Beginners<\/li><\/a>\n    <ul>\n        <a href='#4'><li>Python Installation<\/li><\/a>\n        <a href='#5'><li>Maths Operations<\/li><\/a>\n        <a href='#6'><li>Strings Operation<\/li><\/a>\n       <a href='#7'> <li>Lists Operation<\/li><\/a>\n       <a href='#8'> <li>if-elif-else<\/li><\/a>\n        <a href='#9'><li>While Statement<\/li><\/a>\n        <a href='#10'><li>For Statement<\/li><\/a>\n        <a href='#11'><li>Range<\/li><\/a>\n        <a href='#12'><li>Break and Continue<\/li><\/a>\n        <a href='#13'><li>Introduction to Functions<\/li><\/a>\n        <a href='#14'><li>Lambda Expressions<\/li><\/a>\n        <a href='#15'><li>Documentation Strings<\/li><\/a>\n        <a href='#16'><li>Data Structure<\/li><\/a>\n        <a href='#17'><li>Dictionaries<\/li><\/a>\n        <a href='#18'><li>Modules<\/li><\/a>\n        <a href='#19'><li>Input and Output<\/li><\/a>\n        <a href='#20'><li>Reading and Writing Files<\/li><\/a>\n        <a href='#21'><li>Errors and Exceptions<\/li><\/a>\n            <a href='#22'><li>Classes<\/li><\/a>\n    <\/ul>\n<\/ul>\n\n\n<ul>\n    <a href='#23'><li>Data Preparation and Processing<\/li><\/a>\n    <ul>\n        <a href='#24'><li>Pandas<\/li><\/a>\n            <ul>\n                <a href='#25'> <li>Create Data<\/li><\/a>\n                <a href='#26'><li>Get Data<\/li><\/a>\n                <a href='#27'><li>Prepare Data <\/li><\/a>\n                <a href='#28'><li>Analyze Data <\/li><\/a>\n                <a href='#29'><li>Presedent Data <\/li><\/a>\n            <\/ul>\n            <br>\n        <a href='#30'><li>NumPy<\/li><\/a>\n            <ul>\n                <a href='#31'><li>The Basics<\/li><\/a>\n                <a href='#32'><li>Array Creation<\/li><\/a>\n               <a href='#33'> <li>Printing Arrays <\/li><\/a>\n                <a href='#34'><li>Basic Operations <\/li><\/a>\n                <a href='#35'><li>Universal Functions <\/li><\/a>\n                <a href='#36'><li>Indexing, Slicing and Iterating <\/li><\/a>\n                <a href='#37'><li>Shape Manipulation <\/li><\/a>\n                <a href='#38'><li>Deep Copy <\/li><\/a>\n            <\/ul>\n           <br>\n    <\/ul>\n    <a href='#39'><li>Feature Work<\/li><\/a>\n<\/ul>\n\n<p><a href='#20'>References<\/a><\/p>\n<p><a href='#21'>Conclusion<\/a><\/p>\n\n**<span style=\"color:teal;\"> If you liked this Notebook, please do upvote.<\/span>**\n**<span style=\"color:teal;\"> If you are new to Kaggle World, <br> Please do visit to know about Kaggle life style at - <\/span> <a style=\"color:red;\" href='https:\/\/towardsdatascience.com\/happy-kaggling-data-scientists-competition-5e617d1512f2'>Happy Kaggling<\/a>**\n\n**<span style=\"color:teal;\">Best Wishes!<\/span>**","a57dc0e3":"<p>(Yes, this is the correct code. Look closely: the else clause belongs to the for loop, not the if statement.)\n\nWhen used with a loop, the else clause has more in common with the else clause of a try statement than it does that of if statements: a try statement\u2019s else clause runs when no exception occurs, and a loop\u2019s else clause runs when no break occurs. For more on the try statement and exceptions, see Handling Exceptions.\n\nThe continue statement, also borrowed from C, continues with the next iteration of the loop:<\/p>","e1b6f842":"<p id='32'><h3><b>Array Creation<\/b><\/h3><\/p>\n<p>There are several ways to create arrays.\n\nFor example, you can create an array from a regular Python list or tuple using the array function. The type of the resulting array is deduced from the type of the elements in the sequences.<\/p>","da023a2a":"<p id='10'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>For Statements<\/b><\/h3><\/p>\n<p>The for statement in Python differs a bit from what you may be used to in C or Pascal. Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to define both the iteration step and halting condition (as C), Python\u2019s for statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence. For example (no pun intended):<\/p>","916a1737":"<p>If an exception has an argument, it is printed as the last part (\u2018detail\u2019) of the message for unhandled exceptions.\n\nException handlers don\u2019t just handle exceptions if they occur immediately in the try clause, but also if they occur inside functions that are called (even indirectly) in the try clause. For example:<\/p>","41a3e13a":"<p id='23'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Data Preparation and Processing<\/b><\/h3><\/p>\n <p id='24'><h3>Pandas<\/h3><\/p>\n<p>import pandas as pd<\/p>\n\n<p id='25'><h3>Create Data<\/h3><\/p>\n<p>The data set will consist of 5 baby names and the number of births recorded for that year (1880).<\/p>","e08c6a60":"<p id='30'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>NumPy<\/b><\/h3><\/p>\n<p id='31'><h3>The Basic<\/h3><\/p>\n<p>NumPy\u2019s main object is the homogeneous multidimensional array. It is a table of elements (usually numbers), all of the same type, indexed by a tuple of positive integers. In NumPy dimensions are called axes.<\/p>","44758340":"<p d='12'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Break and Continue<\/b><\/h3><\/p>\n<p>The break statement, like in C, breaks out of the innermost enclosing for or while loop.\n\nLoop statements may have an else clause; it is executed when the loop terminates through exhaustion of the list (with for) or when the condition becomes false (with while), but not when the loop is terminated by a break statement. This is exemplified by the following loop, which searches for prime numbers:<\/p>","dd0ee03f":"<p id='20'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>References<\/b><\/h3><\/p>\n<p>https:\/\/www.kaggle.com\/spscientist\/students-performance-in-exams<\/p>\n<p>https:\/\/seaborn.pydata.org\/<\/p>\n<p>https:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners<\/p>\n<p>https:\/\/www.kaggle.com\/biphili\/seaborn-plot-to-visualize-iris-data<\/p>\n<p>https:\/\/www.kaggle.com\/kralmachine\/seaborn-tutorial-for-beginners<\/p>","bc12813d":"<p>FIR Filter\nThe function firwin designs filters according to the window method. Depending on the provided arguments, the function returns different filter types (e.g. low-pass, band-pass\u2026).\n\nThe example below designs a low-pass and a band-stop filter, respectively.<\/p>","100ce0bb":"<p>Functions can also be called using keyword arguments of the form kwarg=value. For instance, the following function:<\/p>","f338379b":"<p>When arange is used with floating point arguments, it is generally not possible to predict the number of elements obtained, due to the finite floating point precision. For this reason, it is usually better to use the function linspace that receives as an argument the number of elements that we want, instead of the step:<\/p>","f48d3cd4":"<p  id='9'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>While<\/b><\/h3><\/p>\n<p>With the while loop we can execute a set of statements as long as a condition is true.<\/p>","2d2d7749":"<p>A lambda function that adds 10 to the number passed in as an argument, and print the result:<\/p>","ebff3726":"<p id='22'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Classes<\/b><\/h3><\/p>\n<p>Compared with other programming languages, Python\u2019s class mechanism adds classes with a minimum of new syntax and semantics. It is a mixture of the class mechanisms found in C++ and Modula-3. Python classes provide all the standard features of Object Oriented Programming: the class inheritance mechanism allows multiple base classes, a derived class can override any methods of its base class or classes, and a method can call the method of a base class with the same name. Objects can contain arbitrary amounts and kinds of data. As is true for modules, classes partake of the dynamic nature of Python: they are created at runtime, and can be modified further after creation.<\/p>\n<p>Class objects support two kinds of operations: attribute references and instantiation.\n\nAttribute references use the standard syntax used for all attribute references in Python: obj.name. Valid attribute names are all the names that were in the class\u2019s namespace when the class object was created. So, if the class definition looked like this:<\/p>","23aa53ff":"<p>The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (\u201clast-in, first-out\u201d). To add an item to the top of the stack, use append(). To retrieve an item from the top of the stack, use pop() without an explicit index. For example:<\/p>","1a95c2c0":"<p id='21'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Errors and Exceptions<\/b><\/h3><\/p>\n<p>Until now error messages haven\u2019t been more than mentioned, but if you have tried out the examples you have probably seen some. There are (at least) two distinguishable kinds of errors: syntax errors and exceptions.<\/p>","757e0f6c":"<p><b>Important warning:<\/b> The default value is evaluated only once. This makes a difference when the default is a mutable object such as a list, dictionary, or instances of most classes. For example, the following function accumulates the arguments passed to it on subsequent calls:<\/p>","43b9293f":"<p>Since we have multiple values per baby name, we need to aggregate this data so we only have a baby name appear once. This means the 1,000 rows will need to become 5. We can accomplish this by using the groupby function.<\/p>","9b964144":"<p>Of course, the __init__() method may have arguments for greater flexibility. In that case, arguments given to the class instantiation operator are passed on to __init__(). For example,<\/p>","dacffdad":"<p>We can obtain the same result with:<\/p>","f9f6e601":"\n<h1 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\" > <b>Introduction<\/b> <\/h1>\n<br>\n<ul>\n<li><p id='1'><b>What is Python Programming Language?<\/b><\/p><\/li>\n<p>Python is the programming language. Kdnuggets is the most used programming language in data science with 65.5% according to Analytics data. Open source is free and free software. Python is a programming language that supports the object-oriented programming paradigm. Web, mobile and socket programming etc. is a scripting language with many features. However, it can operate independently on every platform. This is an indispensable programming language for data scientists and other programmers thanks to their diversity. In addition, it has a clear and easy-to-read format compared to other programming languages. With its wide library, it helps us in all kinds of software works. All software will be written in this programming language.<\/p><br>\n\nLink: https:\/\/www.python.org\/downloads\/ <br\/><br\/>\n\n<li><p id='2'><b>Why Python Programming Language?<\/b><\/p><\/li>\n<p>It is one of the most used programming languages by data scientists. Because there are developers all around the world. In this way, a wide variety of operations are performed. In addition, very few transactions can be performed with very little code. More than one operation is performed.Python is a powerful programming language that is easy to learn. It has a simple but effective approach to effective high-level data structures and object-oriented programming. Python's exquisite syntax and dynamic writing, combined with its interpreted nature, has made it an ideal language for scripting and rapid application development across many platforms.\n\nThe Python interpreter can be easily expanded with new functions and data types implemented in C or C ++ (or other languages that can be called from C). Python is also available as an extension language for customizable applications.<\/p>\n<br>\n\n<li><p id='3'><b>Required Libraries<\/b><\/p><\/li>\n<ul>\n    <li>Numpy<\/li>\n    <p>It is a Python library that allows us to perform multiple operations on arrays, including multidimensional arrays, various derived objects (such as masked arrays and matrices) and lots of mathematical, logical, shape manipulation, sorting, sorting, discrete Fourier. Statistical procedures and simulations can be performed using NumPy. NumPy library with C ++ does not cause any loss of performance.<\/p><br>\n    <li>Pandas<\/li>\n    <p>Pandas is an open source, BSD licensed library, offering high-performance, easy-to-use data structures and data analysis tools for the Python programming language. It is a library designed to work with data, allowing you to run your non-structural data as in structural databases. Pandas is designed for fast and easy data processing, collection and visualization. Therefore, it is a very preferred library for data scientists. In addition, with its own data-editing functions, you can convert your data into any format. Thanks to Pandas, we make preliminary work for our model and make it ready for the model. As a preliminary study, it is necessary to carry out editing studies by detecting missing, slingshot, incompatible and repetitive data. In this way, you can train your model smoothly and get the results properly. To use the Pandas library, we need to upload it to Anaconda.<\/p><br>\n    <li>Scikit-Learn<\/li>\n    <p>It includes many machine learning algorithms such as classification, regression, clustering, size reduction, model selection and data removal. It is an open source library with BSD license. Together with the algorithms it contains, it creates a fast and secure coding structure. It includes the functions of expressing frequently used mathematical and physical problems in computer environment. In addition, thanks to its own web site you can look at the working principle of the algorithm you want. However, you can learn the mathematical infrastructure of the algorithm. In this way, according to your own data set you can develop the mathematical model of the algorithm yourself. By applying the model you have made on the data set, results can be obtained. Which of these results is effective in the mathematical model you will make out. In addition, you must install the scikit-learn library to Anaconda to use it.<\/p><br>\n    <li>Seaborn<\/li>\n    <p>Seaborn is a library in Python for making interesting and informative statistical graphs. Built on Matplotlib, numpy has been tightly integrated with the PyData stack, providing support for statistical templates from scipy, statsmodel, pandas data structures. It is used for graphs depicting general distributions that summarize data as in heat maps. Thanks to the many methods included in the content of high-level analysis can be made. However, the user can perform analyzes in interactive and animation structure. Today's data scientists put the seaborn library in place where the matplotlib library is missing. Thanks to Seaborn, interactive plots can be removed. In this way, we will show the dimensions of inter-feature interaction more clearly. Thanks to the different types of plots within itself, we are able to make analyzes in every format.<\/p><br>\n    <li>Matplotlib<\/li> \n    <p>Matplotlib graphical drawing package is one of the most important tools of scientific programming. With Matplotlib, a very powerful package, data can be visualized interactively, and high quality printouts are available for publishing. Both two- and three-dimensional graphics can be created. However, it is very simple to use. In addition, there are a lot of information about this package on the internet, but for data scientists can take all kinds of analysis. As a result of your analysis, you can save the resulting graph as output. You can then add it as an addition to the report you made later. It will be used to explain the results obtained from various analyzes and evaluations in the application orally and graphically. So much so that we use the algorithm to show us the most accurate results. In this way, we will guide us for further analysis. In addition, our corporate website helps us for all the plots we will use.<\/p><br>\n<\/ul>\n<li>Scipy<\/li> \n    <p>SciPy refers to several related but distinct entities:The SciPy ecosystem, a collection of open source software for scientific computing in Python.The community of people who use and develop this stack.Several conferences dedicated to scientific computing in Python - SciPy, EuroSciPy and SciPy.in.The SciPy library, one component of the SciPy stack, providing many numerical routines.<\/p><br>\n<\/ul>\n\n","b2426e16":"<p>Info says:<\/p>\n<ul>\n    <li>There are 999 records in the data set<\/li>\n    <li>There is a column named Mary with 999 values<\/li>\n    <li>There is a column named 968 with 999 values<\/li>\n    <li>Out of the two columns, one is numeric, the other is non numericli>\n<\/ul>\n\n<p>To actually see the contents of the dataframe we can use the head() function which by default will return the first five records. You can also pass in a number n to return the top n records of the dataframe.<\/p>","29c04e46":"<p id='14'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Lambda Expressions<\/b><\/h3><\/p>\n<p>Small anonymous functions can be created with the lambda keyword. This function returns the sum of its two arguments: lambda a, b: a+b. Lambda functions can be used wherever function objects are required. They are syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a normal function definition. Like nested function definitions, lambda functions can reference variables from the containing scope:<\/p>","e746b46f":"<p>A lambda function that multiplies argument a with argument b and print the result:<\/p>","a9a742c4":"<p>The most useful form is to specify a default value for one or more arguments. This creates a function that can be called with fewer arguments than it is defined to allow. For example:<\/p>","0f94f3d5":"<p id='38'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Deep Copy<\/b><\/h3><\/p>\n<p>The copy method makes a complete copy of the array and its data.<\/p>","c292859a":"<p>map(function, sequence) calls function(item) for each of the sequence\u2019s items and returns a list of the return values. For example, to compute some cubes:<\/p>","430a19eb":"<p>It is possible to write programs that handle selected exceptions. Look at the following example, which asks the user for input until a valid integer has been entered, but allows the user to interrupt the program (using Control-C or whatever the operating system supports); note that a user-generated interruption is signalled by raising the KeyboardInterrupt exception.<\/p>","d3dadd5c":"<p>The power of lambda is better shown when you use them as an anonymous function inside another function.\n\nSay you have a function definition that takes one argument, and that argument will be multiplied with an unknown number:<\/p>","07953abc":"<p>If you need to modify the sequence you are iterating over while inside the loop (for example to duplicate selected items), it is recommended that you first make a copy. Iterating over a sequence does not implicitly make a copy. The slice notation makes this especially convenient:<\/p>","2fe8472b":"<p id='15'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Documentation Strings<\/b><\/h3><\/p>\n<p>There are emerging conventions about the content and formatting of documentation strings.\n\nThe first line should always be a short, concise summary of the object\u2019s purpose. For brevity, it should not explicitly state the object\u2019s name or type, since these are available by other means (except if the name happens to be a verb describing a function\u2019s operation). This line should begin with a capital letter and end with a period.\n\nIf there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description. The following lines should be one or more paragraphs describing the object\u2019s calling conventions, its side effects, etc.<\/p>\n<p>Here is an example of a multi-line docstring:<\/p>","8e96aeb5":"<p>Generally speaking, instance variables are for data unique to each instance and class variables are for attributes and methods shared by all instances of the class:<\/p>","dccb7425":"<p>Now what can we do with instance objects? The only operations understood by instance objects are attribute references. There are two kinds of valid attribute names, data attributes and methods.\n\ndata attributes correspond to \u201cinstance variables\u201d in Smalltalk, and to \u201cdata members\u201d in C++. Data attributes need not be declared; like local variables, they spring into existence when they are first assigned to. For example, if x is the instance of MyClass created above, the following piece of code will print the value 16, without leaving a trace:<\/p>","66c11976":"<p  id='33'><h3><b>Printing Arrays<\/b><\/h3><\/p>\n<p>When you print an array, NumPy displays it in a similar way to nested lists, but with the following layout:<\/p>\n<ul>\n    <li>the last axis is printed from left to right,<\/li>\n    <li>the second-to-last is printed from top to bottom,<\/li>\n    <li>the rest are also printed from top to bottom, with each slice separated from the next by an empty line.<\/li>\n<\/ul>","9bb0571a":"<p>This brings us to the first problem of the exercise. The read_csv function treated the first record in the csv file as the header names. This is obviously not correct since the text file did not provide us with header names.\n\nTo correct this we will pass the header parameter to the read_csv function and set it to None (means null in python).<\/p>","7380a699":"<p>A frequent error consists in calling array with multiple numeric arguments, rather than providing a single list of numbers as an argument.<\/p>","5c92879a":"<pre>\nITERATORS\niterable is an object that can return an iterator\niterable: an object with an associated iter() method \nexample: list, strings and dictionaries\niterator: produces next value with next() method\n<\/pre>","0ae8195c":"<p id='16'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Data Structures<\/b><\/h3><\/p>\n<p>This chapter describes some things you\u2019ve learned about already in more detail, and adds some new things as well.<\/p>","81c2a005":"<p>When a final formal parameter of the form **name is present, it receives a dictionary (see Mapping Types \u2014 dict) containing all keyword arguments except for those corresponding to a formal parameter. This may be combined with a formal parameter of the form *name (described in the next subsection) which receives a tuple containing the positional arguments beyond the formal parameter list. (*name must occur before **name.) For example, if we define a function like this:<\/p>","06f7dea5":"<p id='18'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Modules<\/b><\/h3><\/p>\n<p>If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead. This is known as creating a script. As your program gets longer, you may want to split it into several files for easier maintenance. You may also want to use a handy function that you\u2019ve written in several programs without copying its definition into each program.<\/p>\n<p>A module is a file containing Python definitions and statements. The file name is the module name with the suffix .py appended. Within a module, the module\u2019s name (as a string) is available as the value of the global variable __name__. For instance, use your favorite text editor to create a file called fibo.py in the current directory with the following contents:<\/p>","a9640299":"<p id='11'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Range<\/b><\/h3><\/p>\n<p>If you do need to iterate over a sequence of numbers, the built-in function range() comes in handy. It generates lists containing arithmetic progressions:<\/p>\n<p>To loop through a set of code a specified number of times, we can use the range() function,\nThe range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.<\/p>","2630f67c":"<p>We are basically done creating the data set. We now will use the pandas library to export this data set into a csv file.\n\ndf will be a DataFrame object. You can think of this object holding the contents of the BabyDataSet in a format similar to a sql table or an excel spreadsheet. Lets take a look below at the contents inside df.<\/p>","d1d646d8":"<p>To create sequences of numbers, NumPy provides a function analogous to range that returns arrays instead of lists.<\/p>","ebfd6d75":"<p  id='26'><h3>Get Data<\/h3><\/p>\n<p>To pull in the csv file, we will use the pandas function read_csv. Let us take a look at this function and what inputs it takes.<\/p>","5d5cb78d":"<pre>\nWhat we need to know about functions:\n<ul>\n<li>docstrings: documentation for functions. Example: \nfor f(): \n\"\"\"This is docstring for documentation of function f\"\"\"<\/li>\n<li>tuble: sequence of immutable python objects. \ncant modify values \ntuble uses paranthesis like tuble = (1,2,3) \nunpack tuble into several variables like a,b,c = tuble<\/li>\n<ul>\n<\/pre>","c5300a03":"<p id='37'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Shape Manipulation<\/b><\/h3><\/p>","1090a013":"<p>The main feature of the scipy.special package is the definition of numerous special functions of mathematical physics. Available functions include airy, elliptic, bessel, gamma, beta, hypergeometric, parabolic cylinder, mathieu, spheroidal wave, struve, and kelvin. There are also some low-level stats functions that are not intended for general use as an easier interface to these functions is provided by the stats module. Most of these functions can take array arguments and return array results following the same broadcasting rules as other math functions in Numerical Python. Many of these functions also accept complex numbers as input. For a complete list of the available functions with a one-line description type >>> help(special). Each function also has its own documentation accessible using help. If you don\u2019t see a function you need, consider writing it and contributing it to the library. You can write the function in either C, Fortran, or Python. Look in the source code of the library for examples of each of these kinds of functions.<\/p>","63317d8a":"<p>accepts one required argument (voltage) and three optional arguments (state, action, and type). This function can be called in any of the following ways:<\/p>","b8c6d55f":"<p id='20'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Reading and Writing Files<\/b><\/h3><\/p>\n<p>open() returns a file object, and is most commonly used with two arguments: open(filename, mode).<\/p>","d1be01a9":"<p>If you don\u2019t want the default to be shared between subsequent calls, you can write the function like this instead:<\/p>","025e195a":"<p id='29'><h3><b>Present Data<\/b><\/h3><\/p>\n<p>Here we can plot the <b>Births<\/b> column and label the graph to show the end user the highest point on the graph. In conjunction with the table, the end user has a clear picture that <b>Mel<\/b> is the most popular baby name in the data set.\n\n<b>plot()<\/b> is a convinient attribute where pandas lets you painlessly plot the data in your dataframe. We learned how to find the maximum value of the Births column in the previous section. Now to find the actual baby name of the 973 value looks a bit tricky, so lets go over it.<\/p>s","1c255f6b":"<p id='6'><h3 style=\"text-align:center;font-size:30px;background:#a9a799; border:0; color:black\"><b>Strings Operation<\/b><\/h3><\/p>\n<p>Besides numbers, Python can also manipulate strings, which can be expressed in several ways. They can be enclosed in single quotes ('...') or double quotes (\"...\") with the same result. \\ can be used to escape quotes:<\/p>"}}