{"cell_type":{"834b5cd1":"code","699bb267":"code","c564df06":"code","47401cf8":"code","e0671e09":"code","469e579f":"code","4154f446":"code","cffbb218":"code","90fe7643":"code","b2ce78dc":"code","5ea9fa50":"code","8ba5eb52":"code","3dc47ed5":"code","c265b947":"code","060a674b":"code","97693e99":"code","785fea57":"code","48a2480d":"code","2d5d34da":"code","634f0d8a":"code","22f7109d":"markdown"},"source":{"834b5cd1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","699bb267":"# data analysis and wrangling\nimport pandas as pd\nimport numpy as np\nimport random as rnd\n\n# visualization\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","c564df06":"train_data = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntrain_data.head()","47401cf8":"test_data = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ntest_data.head()","e0671e09":"train_data.info()\nprint('_'*40)\ntest_data.info()","469e579f":"train_data.describe()","4154f446":"train_data[['Pclass', 'Survived']] \\\n    .groupby(['Pclass'], as_index=False) \\\n    .mean() \\\n    .sort_values(by='Survived', ascending=False)","cffbb218":"train_data[['Sex', 'Survived']] \\\n    .groupby(['Sex'], as_index=False) \\\n    .mean() \\\n    .sort_values(by='Survived', ascending=False)","90fe7643":"train_data[['SibSp', 'Survived']] \\\n    .groupby(['SibSp'], as_index=False) \\\n    .mean() \\\n    .sort_values(by='SibSp', ascending=False)","b2ce78dc":"train_data[['Parch', 'Survived']] \\\n    .groupby(['Parch'], as_index=False) \\\n    .mean() \\\n    .sort_values(by='Survived', ascending=False)","5ea9fa50":"g = sns.FacetGrid(train_data, col='Survived')\ng.map(plt.hist, 'Age', bins=20)","8ba5eb52":"for d_set in [train_data, test_data]:\n    d_set['Sex'] = d_set['Sex'].map( {'female': 1, 'male': 0} ).astype(int)\n\n\ntrain_data.head()","3dc47ed5":"median_age = train_data['Age'].median()\n\nfor d_set in [train_data, test_data]:\n    d_set.loc[d_set['Age'].isnull(), 'Age'] = median_age","c265b947":"pd.cut(train_data['Age'], 5)","060a674b":"for d_set in [train_data, test_data]:\n    d_set.loc[ d_set['Age'] <= 16, 'Age'] = 0\n    d_set.loc[(d_set['Age'] > 16) & (d_set['Age'] <= 32), 'Age'] = 1\n    d_set.loc[(d_set['Age'] > 32) & (d_set['Age'] <= 48), 'Age'] = 2\n    d_set.loc[(d_set['Age'] > 48) & (d_set['Age'] <= 64), 'Age'] = 3\n    d_set.loc[ d_set['Age'] > 64, 'Age'] = 4\n    d_set['Age'] = d_set['Age'].astype(int)\n\n\ntrain_data.head()","97693e99":"train_data[['Age', 'Survived']] \\\n    .groupby(['Age'], as_index=False) \\\n    .mean() \\\n    .sort_values(by='Age', ascending=False)","785fea57":"for d_set in [train_data, test_data]:\n    d_set['IsAlone'] = 0\n    d_set.loc[d_set['SibSp'] + d_set['Parch'] == 0, 'IsAlone'] = 1","48a2480d":"train_data[['IsAlone', 'Survived']] \\\n    .groupby(['IsAlone'], as_index=False) \\\n    .mean() \\\n    .sort_values(by='IsAlone', ascending=False)","2d5d34da":"train_data.head()","634f0d8a":"from sklearn.ensemble import RandomForestClassifier\n\ny = train_data[\"Survived\"]\n\nfeatures = [\"IsAlone\", \"Sex\", \"Age\", \"Pclass\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])\n\nmodel = RandomForestClassifier(n_estimators=100)\nmodel.fit(X, y)\npredictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('submission4.csv', index=False)\nprint(\"Your submission was successfully saved!\")","22f7109d":"\u0410 Sex \u0443 \u043d\u0430\u0441 \u0432\u0441\u0435 \u0435\u0449\u0435 \u043d\u0435 numeric!"}}