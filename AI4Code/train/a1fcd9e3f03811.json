{"cell_type":{"3b42848d":"code","941642b5":"code","150a8dfc":"code","c5438c57":"code","ff570f1a":"code","d9bba75b":"code","ae5f6313":"code","771aeb54":"code","f877a2e2":"code","8a1cca11":"code","95c7a532":"code","b5670e26":"code","fcebc4ce":"code","7f445084":"code","d508acb7":"code","bb76f26a":"code","d446bf8f":"code","1bb99622":"code","6fdb2739":"code","0300bfe0":"code","4a6520f3":"code","b84255ec":"code","92a05b36":"code","8a3751d6":"code","3a5fbe3a":"code","bfb58587":"code","95c23e70":"code","fcc660a9":"code","e6cedcbb":"code","544fe07f":"code","90cd3884":"code","647f6c21":"code","7d9ac89c":"code","16a3c15d":"code","9dc9fadc":"code","dbedf837":"code","d3c7fa5c":"code","2cdee687":"code","a82c1f61":"code","ff4e96a1":"code","9a348836":"code","2d4ad5d7":"code","5328d523":"code","92f38ff9":"code","63a6b9f3":"code","7fc31e08":"code","a07f0485":"code","1c604fc6":"code","fc6ba172":"code","e207ff9b":"code","436eff07":"code","1e7e0104":"code","5829491f":"code","70ef3ddd":"code","c00942b0":"code","ba45ef8a":"code","31f7af9a":"markdown","c1c5cf15":"markdown","250222b0":"markdown","4e78bc36":"markdown","a8b4a82c":"markdown","8bfba2e1":"markdown","c9e8e6e4":"markdown","c7de3d93":"markdown","2f9c4a0c":"markdown","f77906d3":"markdown","2369c87f":"markdown","fa7a6148":"markdown","304ebb9d":"markdown","9e1fb670":"markdown","1fe33f29":"markdown"},"source":{"3b42848d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# preprocessing\nfrom sklearn.preprocessing import LabelEncoder, StandardScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV, StratifiedKFold\nimport pandas_profiling as pp\n\n# models\nfrom sklearn.linear_model import LinearRegression, SGDRegressor, RidgeCV\nfrom sklearn.svm import SVR, LinearSVR\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, ExtraTreesRegressor \nfrom sklearn.ensemble import BaggingRegressor, AdaBoostRegressor, VotingRegressor \nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nimport sklearn.model_selection\nfrom sklearn.model_selection import cross_val_predict as cvp\nfrom sklearn import metrics\nfrom sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\nimport xgboost as xgb\nimport lightgbm as lgb\n\n# model tuning\nfrom hyperopt import STATUS_OK, Trials, fmin, hp, tpe, space_eval\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","941642b5":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()","150a8dfc":"def plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()","c5438c57":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()","ff570f1a":"valid_part = 0.3","d9bba75b":"train0 = pd.read_csv('\/kaggle\/input\/suspended-substances-prediction-in-river-water\/train.csv')","ae5f6313":"train0.head(10)","771aeb54":"train0.info()","f877a2e2":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# test.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/suspended-substances-prediction-in-river-water\/test.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'test.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","8a1cca11":"df1.head()","95c7a532":"plotPerColumnDistribution(df1, 10, 5)","b5670e26":"plotCorrelationMatrix(df1, 8)","fcebc4ce":"plotScatterMatrix(df1, 20, 10)","7f445084":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# train.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/suspended-substances-prediction-in-river-water\/train.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'train.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","d508acb7":"df2.head(5)","bb76f26a":"plotPerColumnDistribution(df2, 10, 5)","d446bf8f":"plotCorrelationMatrix(df2, 8)","1bb99622":"plotScatterMatrix(df2, 20, 10)","6fdb2739":"pp.ProfileReport(train0)","0300bfe0":"train0 = train0.drop(['Id','3','4','5','6','7'], axis = 1)\ntrain0 = train0.dropna()\ntrain0.info()","4a6520f3":"train0.head(3)","b84255ec":"train0.describe(percentiles = [.1, .9])","92a05b36":"train0 = train0[((train0 ['target'] < 37.00) & (train0['1'] < 37.00) & (train0['2'] < 37.00))]\ntrain0.info()","8a3751d6":"train0.head()","3a5fbe3a":"target_name = 'target'","bfb58587":"# For boosting model\ntrain0b = train0\ntrain_target0b = train0b[target_name]\ntrain0b = train0b.drop([target_name], axis=1)\n# Synthesis valid as test for selection models\ntrainb, testb, targetb, target_testb = train_test_split(train0b, train_target0b, test_size=valid_part, random_state=0)","95c23e70":"train_target0 = train0[target_name]\ntrain0 = train0.drop([target_name], axis=1)","fcc660a9":"#For models from Sklearn\nscaler = StandardScaler()\ntrain0 = pd.DataFrame(scaler.fit_transform(train0), columns = train0.columns)","e6cedcbb":"train0.head(3)","544fe07f":"len(train0)","90cd3884":"# Synthesis valid as test for selection models\ntrain, test, target, target_test = train_test_split(train0, train_target0, test_size=valid_part, random_state=0)","647f6c21":"train.head(3)","7d9ac89c":"test.head(3)","16a3c15d":"train.info()","9dc9fadc":"test.info()","dbedf837":"acc_train_r2 = []\nacc_test_r2 = []\nacc_train_d = []\nacc_test_d = []\nacc_train_rmse = []\nacc_test_rmse = []","d3c7fa5c":"def acc_d(y_meas, y_pred):\n    # Relative error between predicted y_pred and measured y_meas values\n    return mean_absolute_error(y_meas, y_pred)*len(y_meas)\/sum(abs(y_meas))\n\ndef acc_rmse(y_meas, y_pred):\n    # RMSE between predicted y_pred and measured y_meas values\n    return (mean_squared_error(y_meas, y_pred))**0.5","2cdee687":"def acc_boosting_model(num,model,train,test,num_iteration=0):\n    # Calculation of accuracy of boosting model by different metrics\n    \n    global acc_train_r2, acc_test_r2, acc_train_d, acc_test_d, acc_train_rmse, acc_test_rmse\n    \n    if num_iteration > 0:\n        ytrain = model.predict(train, num_iteration = num_iteration)  \n        ytest = model.predict(test, num_iteration = num_iteration)\n    else:\n        ytrain = model.predict(train)  \n        ytest = model.predict(test)\n\n    print('target = ', targetb[:5].values)\n    print('ytrain = ', ytrain[:5])\n\n    acc_train_r2_num = round(r2_score(targetb, ytrain) * 100, 2)\n    print('acc(r2_score) for train =', acc_train_r2_num)   \n    acc_train_r2.insert(num, acc_train_r2_num)\n\n    acc_train_d_num = round(acc_d(targetb, ytrain) * 100, 2)\n    print('acc(relative error) for train =', acc_train_d_num)   \n    acc_train_d.insert(num, acc_train_d_num)\n\n    acc_train_rmse_num = round(acc_rmse(targetb, ytrain) * 100, 2)\n    print('acc(rmse) for train =', acc_train_rmse_num)   \n    acc_train_rmse.insert(num, acc_train_rmse_num)\n\n    print('target_test =', target_testb[:5].values)\n    print('ytest =', ytest[:5])\n    \n    acc_test_r2_num = round(r2_score(target_testb, ytest) * 100, 2)\n    print('acc(r2_score) for test =', acc_test_r2_num)\n    acc_test_r2.insert(num, acc_test_r2_num)\n    \n    acc_test_d_num = round(acc_d(target_testb, ytest) * 100, 2)\n    print('acc(relative error) for test =', acc_test_d_num)\n    acc_test_d.insert(num, acc_test_d_num)\n    \n    acc_test_rmse_num = round(acc_rmse(target_testb, ytest) * 100, 2)\n    print('acc(rmse) for test =', acc_test_rmse_num)\n    acc_test_rmse.insert(num, acc_test_rmse_num)","a82c1f61":"def acc_model(num,model,train,test):\n    # Calculation of accuracy of model \u0430\u043a\u0449\u044c Sklearn by different metrics   \n  \n    global acc_train_r2, acc_test_r2, acc_train_d, acc_test_d, acc_train_rmse, acc_test_rmse\n    \n    ytrain = model.predict(train)  \n    ytest = model.predict(test)\n\n    print('target = ', target[:5].values)\n    print('ytrain = ', ytrain[:5])\n\n    acc_train_r2_num = round(r2_score(target, ytrain) * 100, 2)\n    print('acc(r2_score) for train =', acc_train_r2_num)   \n    acc_train_r2.insert(num, acc_train_r2_num)\n\n    acc_train_d_num = round(acc_d(target, ytrain) * 100, 2)\n    print('acc(relative error) for train =', acc_train_d_num)   \n    acc_train_d.insert(num, acc_train_d_num)\n\n    acc_train_rmse_num = round(acc_rmse(target, ytrain) * 100, 2)\n    print('acc(rmse) for train =', acc_train_rmse_num)   \n    acc_train_rmse.insert(num, acc_train_rmse_num)\n\n    print('target_test =', target_test[:5].values)\n    print('ytest =', ytest[:5])\n    \n    acc_test_r2_num = round(r2_score(target_test, ytest) * 100, 2)\n    print('acc(r2_score) for test =', acc_test_r2_num)\n    acc_test_r2.insert(num, acc_test_r2_num)\n    \n    acc_test_d_num = round(acc_d(target_test, ytest) * 100, 2)\n    print('acc(relative error) for test =', acc_test_d_num)\n    acc_test_d.insert(num, acc_test_d_num)\n    \n    acc_test_rmse_num = round(acc_rmse(target_test, ytest) * 100, 2)\n    print('acc(rmse) for test =', acc_test_rmse_num)\n    acc_test_rmse.insert(num, acc_test_rmse_num)","ff4e96a1":"# Linear SVR\n\nlinear_svr = LinearSVR()\nlinear_svr.fit(train, target)\nacc_model(2,linear_svr,train,test)","9a348836":"# MLPRegressor\n\nmlp = MLPRegressor()\nparam_grid = {'hidden_layer_sizes': [i for i in range(2,20)],\n              'activation': ['relu'],\n              'solver': ['adam'],\n              'learning_rate': ['constant'],\n              'learning_rate_init': [0.01],\n              'power_t': [0.5],\n              'alpha': [0.0001],\n              'max_iter': [1000],\n              'early_stopping': [True],\n              'warm_start': [False]}\nmlp_GS = GridSearchCV(mlp, param_grid=param_grid, \n                   cv=10, verbose=True, pre_dispatch='2*n_jobs')\nmlp_GS.fit(train, target)\nacc_model(3,mlp_GS,train,test)","2d4ad5d7":"# Stochastic Gradient Descent\n\nsgd = SGDRegressor()\nsgd.fit(train, target)\nacc_model(4,sgd,train,test)","5328d523":"models = pd.DataFrame({\n    'Model': ['Linear SVR', 'MLPRegressor', 'Stochastic Gradient Decent' ],\n    \n    'r2_train': acc_train_r2,\n    'r2_test': acc_test_r2,\n    'd_train': acc_train_d,\n    'd_test': acc_test_d,\n    'rmse_train': acc_train_rmse,\n    'rmse_test': acc_test_rmse\n                     })","92f38ff9":"pd.options.display.float_format = '{:,.2f}'.format","63a6b9f3":"print('Prediction accuracy for models by R2 criterion - r2_test')\nmodels.sort_values(by=['r2_test', 'r2_train'], ascending=False)","7fc31e08":"print('Prediction accuracy for models by relative error - d_test')\nmodels.sort_values(by=['d_test', 'd_train'], ascending=True)","a07f0485":"print('Prediction accuracy for models by RMSE - rmse_test')\nmodels.sort_values(by=['rmse_test', 'rmse_train'], ascending=True)","1c604fc6":"# Plot\nplt.figure(figsize=[25,6])\nxx = models['Model']\nplt.tick_params(labelsize=14)\nplt.plot(xx, models['r2_train'], label = 'r2_train')\nplt.plot(xx, models['r2_test'], label = 'r2_test')\nplt.legend()\nplt.title('R2-criterion for 3 popular models for train and test datasets')\nplt.xlabel('Models')\nplt.ylabel('R2-criterion, %')\nplt.xticks(xx, rotation='vertical')\nplt.savefig('graph.png')\nplt.show()","fc6ba172":"# Plot\nplt.figure(figsize=[25,6])\nxx = models['Model']\nplt.tick_params(labelsize=14)\nplt.plot(xx, models['d_train'], label = 'd_train')\nplt.plot(xx, models['d_test'], label = 'd_test')\nplt.legend()\nplt.title('Relative errors for 3 popular models for train and test datasets')\nplt.xlabel('Models')\nplt.ylabel('Relative error, %')\nplt.xticks(xx, rotation='vertical')\nplt.savefig('graph.png')\nplt.show()","e207ff9b":"# Plot\nplt.figure(figsize=[25,6])\nxx = models['Model']\nplt.tick_params(labelsize=14)\nplt.plot(xx, models['rmse_train'], label = 'rmse_train')\nplt.plot(xx, models['rmse_test'], label = 'rmse_test')\nplt.legend()\nplt.title('RMSE for 3 popular models for train and test datasets')\nplt.xlabel('Models')\nplt.ylabel('RMSE, %')\nplt.xticks(xx, rotation='vertical')\nplt.savefig('graph.png')\nplt.show()","436eff07":"testn = pd.read_csv('\/kaggle\/input\/suspended-substances-prediction-in-river-water\/test.csv')\ntestn.info()","1e7e0104":"testn = testn.drop(['Id','3','4','5','6','7'], axis = 1)\ntestn.head(3)","5829491f":"#For models from Sklearn\ntestn = pd.DataFrame(scaler.transform(testn), columns = testn.columns)","70ef3ddd":"sgd.fit(train0, train_target0)\nsgd.predict(testn)[:3]","c00942b0":"mlp_GS.fit(train0, train_target0)\nmlp_GS.predict(testn)[:3]","ba45ef8a":"linear_svr.fit(train0, train_target0)\nlinear_svr.predict(testn)[:3]","31f7af9a":"##  Preparing to modeling <a class=\"anchor\" id=\"4\"><\/a>\n\n","c1c5cf15":"##  Download datasets <a class=\"anchor\" id=\"2\"><\/a>\n\n","250222b0":"<a class=\"anchor\" id=\"0\"><\/a>\n\n# Suspended substances prediction in river water","4e78bc36":"**Linear SVR** is a similar to SVM method. Its also builds on kernel functions but is appropriate for unsupervised learning. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Support-vector_machine#Support-vector_clustering_(svr).","a8b4a82c":"###  Stochastic Gradient Descent <a class=\"anchor\" id=\"5.5\"><\/a>\n\n","8bfba2e1":"The **MLPRegressor** optimizes the squared-loss using LBFGS or stochastic gradient descent by the Multi-layer Perceptron regressor. Reference [Sklearn documentation](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neural_network.MLPRegressor.html#sklearn.neural_network.MLPRegressor).","c9e8e6e4":"Thanks to [Vitalii Mokin](https:\/\/www.kaggle.com\/vbmokin)\nfor his kernels:\n* [BOD prediction in river - 15 regression models](https:\/\/www.kaggle.com\/vbmokin\/bod-prediction-in-river-15-regression-models)\n* [Code starter: Ammonium prediction in river](https:\/\/www.kaggle.com\/vbmokin\/code-starter-ammonium-prediction-in-river)","c7de3d93":"##  Prediction <a class=\"anchor\" id=\"7\"><\/a>\n\n","2f9c4a0c":"##  EDA <a class=\"anchor\" id=\"3\"><\/a>\n","f77906d3":"##  Models comparison <a class=\"anchor\" id=\"6\"><\/a>\n\n","2369c87f":"**Stochastic gradient descent** (often abbreviated **SGD**) is an iterative method for optimizing an objective function with suitable smoothness properties (e.g. differentiable or subdifferentiable). It can be regarded as a stochastic approximation of gradient descent optimization, since it replaces the actual gradient (calculated from the entire data set) by an estimate thereof (calculated from a randomly selected subset of the data). Especially in big data applications this reduces the computational burden, achieving faster iterations in trade for a slightly lower convergence rate. Reference [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Stochastic_gradient_descent).","fa7a6148":"##  Import libraries <a class=\"anchor\" id=\"1\"><\/a>\n\n","304ebb9d":"### MLPRegressor <a class=\"anchor\" id=\"5.4\"><\/a>\n\n","9e1fb670":"Thanks to:\n* https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.neural_network.MLPRegressor.html#sklearn.neural_network.MLPRegressor\n* https:\/\/stackoverflow.com\/questions\/44803596\/scikit-learn-mlpregressor-performance-cap","1fe33f29":"###  Linear SVR <a class=\"anchor\" id=\"5.3\"><\/a>\n\n"}}