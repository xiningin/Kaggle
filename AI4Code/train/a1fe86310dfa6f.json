{"cell_type":{"1abb8cd8":"code","2a3637fd":"code","e9458b4d":"code","0165f595":"code","fef9d6ab":"code","9c35e066":"code","061eea02":"code","9e39c8d0":"code","71d64567":"code","29478947":"code","74c3c7cb":"code","c81e7ba3":"code","3d46563c":"code","1c05a5a3":"code","c8e60999":"code","637acb9e":"code","50f665c6":"code","ecea3771":"code","58923e05":"code","7a28d1df":"markdown","8c2671b6":"markdown"},"source":{"1abb8cd8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","2a3637fd":"import nltk\nfrom nltk.corpus import stopwords\nfrom nltk.stem import WordNetLemmatizer\nfrom tqdm import tqdm\nimport seaborn as sns\nimport re\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n\nnltk.download('stopwords')\nnltk.download('wordnet')","e9458b4d":"train_path = '..\/input\/nlp-getting-started\/train.csv'\ntest_path = '..\/input\/nlp-getting-started\/test.csv'\nsubmission_path = '..\/input\/nlp-getting-started\/sample_submission.csv'\n\ntrain = pd.read_csv(train_path)\ntest = pd.read_csv(test_path)\nsubmission = pd.read_csv(submission_path)","0165f595":"train.head()","fef9d6ab":"train.isnull().sum()","9c35e066":"texts = train['text'].to_list()\nlabels = train['target'].to_list()","061eea02":"lemmatizer = WordNetLemmatizer()\nstop_words = stopwords.words('english')","9e39c8d0":"def preprocess(texts):\n    x_train = []\n    for sent in tqdm(texts):\n        sent = re.sub(\"[^a-zA-Z]\", \" \", sent)\n        sent = sent.lower().split()\n        sent = [lemmatizer.lemmatize(word) for word in sent if word not in set(stop_words)]\n        sent = ' '.join(sent)\n        x_train.append(sent)\n    return x_train","71d64567":"X = preprocess(texts)","29478947":"tfidf = TfidfVectorizer(max_features=5000, analyzer='word', ngram_range=(1,2), stop_words='english')\nX_train = tfidf.fit_transform(X).toarray()","74c3c7cb":"x_train, x_test, y_train, y_test = train_test_split(X_train, labels, test_size=0.2, random_state=0)","c81e7ba3":"classifiers = [RandomForestClassifier(n_estimators=100, random_state=0), MultinomialNB()]\n\nfor clf in classifiers:\n    \n    clf.fit(x_train, y_train)\n    y_pred = clf.predict(x_test)\n    print('Classifier: {} \\tAccuracy score: {}%'.format(clf.__class__.__name__, \n                                                        accuracy_score(y_pred, y_test)))\n    \n    print('Classification report:')\n    print(classification_report(y_test, y_pred))\n    \n    print('Confusion matrix:')\n    \n    conf_mat = confusion_matrix(y_test, y_pred)\n    df = pd.DataFrame(conf_mat, columns=['Good', 'Bad'])\n    plt.figure(figsize=(20, 20))\n    sns.heatmap(df, annot=True)\n    plt.show()","3d46563c":"test_text = test['text'].to_list()\nids = test['id']","1c05a5a3":"process_test_text = preprocess(test_text)","c8e60999":"X_test = tfidf.fit_transform(process_test_text).toarray()","637acb9e":"y_submission_pred = clf.predict(X_test)","50f665c6":"sub = pd.Series(y_submission_pred)","ecea3771":"data = {'id':ids,\n        'target':sub}\n\nfinal = pd.DataFrame(data)","58923e05":"final.to_csv('submission.csv', index=False)","7a28d1df":"TESTING\/EVALUATING","8c2671b6":"**GENERATING SUBMISSION.CSV**"}}