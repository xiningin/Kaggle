{"cell_type":{"a168861a":"code","49279312":"code","4e6909b5":"code","6348179d":"code","ec8ae9d9":"code","d33469ff":"code","7652cb36":"code","23aef9f6":"code","11f0936e":"code","431a1ba0":"code","ec51247c":"code","4c7e48db":"code","4c8111ac":"code","f68ea64d":"code","cef6696f":"markdown","156184c8":"markdown"},"source":{"a168861a":"# LOAD LIBRARIES\nimport numpy as np, pandas as pd, os\nimport matplotlib.pyplot as plt, cv2\nimport tensorflow as tf, re, math\nimport glob\nfrom sklearn.model_selection import StratifiedKFold","49279312":"FOLDS = 5\nIMG_SIZE = 512\nSEED = 42","4e6909b5":"BASE = '..\/input\/cassava-leaf-disease-classification'","6348179d":"# LOAD TRAIN META DATA\ntrain = pd.read_csv(BASE+os.sep+'train.csv')\ntrain['external']=0","ec8ae9d9":"train.head(10)","d33469ff":"folders=[]\nfolders.append(glob.glob(\"..\/input\/cassavadisease\/train\/train\/cbb\"))\nfolders.append(glob.glob(\"..\/input\/cassavadisease\/train\/train\/cbsd\"))\nfolders.append(glob.glob(\"..\/input\/cassavadisease\/train\/train\/cgm\"))\nfolders.append(glob.glob(\"..\/input\/cassavadisease\/train\/train\/cmd\"))\nfolders.append(glob.glob(\"..\/input\/cassavadisease\/train\/train\/healthy\"))\nfolders = np.concatenate(folders)\nfolders","7652cb36":"imgs = []\nlabels = []\nfor i,j in enumerate(folders):\n    img = glob.glob(j + '\/*')\n    label = [i] * len(img)\n    imgs.append(img)\n    labels.append(label)\nimgs = np.concatenate(imgs)\nlabels = np.concatenate(labels)","23aef9f6":"df=pd.DataFrame({'image_id': imgs,\n                    'label': labels})\ndf['external'] = 1","11f0936e":"df.head()","431a1ba0":"train = pd.concat([train,df])\ntrain = train.reset_index(drop=True)","ec51247c":"folds = train.copy()\nFold = StratifiedKFold(n_splits=FOLDS, shuffle=True, random_state=SEED)\nfor n, (train_index, val_index) in enumerate(Fold.split(folds, folds['label'])):\n    folds.loc[val_index, 'fold'] = int(n)\nfolds['fold'] = folds['fold'].astype(int)\nprint(folds.groupby(['fold', 'label']).size())","4c7e48db":"def _bytes_feature(value):\n  \"\"\"Returns a bytes_list from a string \/ byte.\"\"\"\n  if isinstance(value, type(tf.constant(0))):\n    value = value.numpy() # BytesList won't unpack a string from an EagerTensor.\n  return tf.train.Feature(bytes_list=tf.train.BytesList(value=[value]))\n\ndef _float_feature(value):\n  \"\"\"Returns a float_list from a float \/ double.\"\"\"\n  return tf.train.Feature(float_list=tf.train.FloatList(value=[value]))\n\ndef _int64_feature(value):\n  \"\"\"Returns an int64_list from a bool \/ enum \/ int \/ uint.\"\"\"\n  return tf.train.Feature(int64_list=tf.train.Int64List(value=[value]))","4c8111ac":"def serialize_example(feature0, feature1):\n  feature = {\n      'image': _bytes_feature(feature0),\n      'target': _int64_feature(feature1)\n  }\n  example_proto = tf.train.Example(features=tf.train.Features(feature=feature))\n  return example_proto.SerializeToString()","f68ea64d":"for f in range(FOLDS):\n    ct = (folds['fold'] == f).sum()\n    idx = folds[folds['fold'] == f].index\n    print(idx)\n    print(ct)\n    print('Writing TFRecord %i of %i...'%(f,ct))\n    with tf.io.TFRecordWriter('train%.2i-%i.tfrec'%(f,ct)) as writer:\n        for k in range(ct):\n            path = ''\n            if folds['external'][idx[k]] == 0:\n                path = BASE + '\/train_images\/' + folds['image_id'][idx[k]]    \n            elif folds['external'][idx[k]] == 1:\n                path = folds['image_id'][idx[k]]          \n            img = cv2.imread(path)\n            img = cv2.resize(img, (IMG_SIZE, IMG_SIZE))\n            img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) # Fix incorrect colors\n            if k == 0: plt.imshow(img),plt.show()\n            img = cv2.imencode('.jpg', img, (cv2.IMWRITE_JPEG_QUALITY, 94))[1].tostring()\n            name = folds['image_id'][idx[k]].split('.')[0]\n            row = folds.loc[folds.image_id==name]\n            example = serialize_example(\n                img, \n                folds['label'][idx[k]],\n                )\n            writer.write(example)\n            if k%100==0: print(k,', ',end='')","cef6696f":"Version 2: cassava-leaf-disease-classification dataset only\n\nVersion 4: using Previous competition of [Cassava Disease Classification](https:\/\/www.kaggle.com\/c\/cassava-disease)","156184c8":"# Recreate Stratificated tfrecords\n\nreferences:\n\n[How To Create TFRecords](https:\/\/www.kaggle.com\/cdeotte\/how-to-create-tfrecords)"}}