{"cell_type":{"33094a70":"code","e22d3d51":"code","8280ee0f":"code","9361fa0e":"code","ca7d8077":"code","c7b9d666":"code","e5006404":"code","1a367f5a":"code","9c4e0720":"code","1abfc869":"code","d324e088":"code","8f4ffd3d":"code","49aff5f9":"code","665d9f8d":"code","a8a10fb7":"code","92146afd":"code","8519fe9e":"code","70eaa26a":"code","8933e51f":"code","cf409f74":"markdown","3663ad93":"markdown"},"source":{"33094a70":"import cudf\nimport cuml\nimport cupy as cp\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport glob\nimport os\nfrom scipy.interpolate import interp1d\nimport gc\nfrom cuml.linear_model import Ridge\nfrom cuml.neighbors import KNeighborsRegressor\nfrom cuml.svm import SVR\nfrom cuml.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GroupKFold, KFold\nfrom cuml.metrics import mean_squared_error\n\nimport soundfile as sf\n# Librosa Libraries\nimport librosa\nimport librosa.display\nimport IPython.display as ipd\nimport matplotlib.pyplot as plt\nfrom tqdm.notebook import tqdm\n\nfrom sklearn.metrics import roc_auc_score, label_ranking_average_precision_score","e22d3d51":"train = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-jan-2021\/train.csv\")\ntest = cudf.read_csv(\"\/kaggle\/input\/tabular-playground-series-jan-2021\/test.csv\")\nsample_submission = cudf.read_csv('..\/input\/tabular-playground-series-jan-2021\/sample_submission.csv')","8280ee0f":"target = train['target'].values\ncolumns = test.columns[1:]","9361fa0e":"rr_train_oof = cp.zeros((300000,))\nrr_test_preds = 0\nrr_train_oof.shape","ca7d8077":"NUM_FOLDS = 5\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train, target))):\n        #print(f'Fold {f}')\n        train_df, val_df = train.iloc[train_ind][columns], train.iloc[val_ind][columns]\n        train_target, val_target = target[train_ind], target[val_ind]\n        \n        model = Ridge(alpha=0.01)\n        model.fit(train_df, train_target)\n        temp_oof = model.predict(val_df)\n        temp_test = model.predict(test[columns])\n\n        rr_train_oof[val_ind] = temp_oof\n        rr_test_preds += temp_test\/NUM_FOLDS","c7b9d666":"mean_squared_error(rr_train_oof, target, squared=False)","e5006404":"rf_train_oof = cp.zeros((300000,))\nrf_test_preds = 0\nrf_train_oof.shape","1a367f5a":"NUM_FOLDS = 5\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train, target))):\n        #print(f'Fold {f}')\n        train_df, val_df = cp.asnumpy(train.iloc[train_ind][columns].values), cp.asnumpy(train.iloc[val_ind][columns].values)\n        train_target, val_target = cp.asnumpy(target[train_ind]), cp.asnumpy(target[val_ind])\n        \n        model = RandomForestRegressor(n_estimators=1000, max_depth=15)\n        model.fit(np.float32(train_df), np.float32(train_target))\n        temp_oof = model.predict(val_df)\n        temp_test = model.predict(test[columns])\n\n        rf_train_oof[val_ind] = temp_oof\n        rf_test_preds += temp_test\/NUM_FOLDS","9c4e0720":"mean_squared_error(rf_train_oof, target, squared=False)","1abfc869":"mean_squared_error(0.9*rf_train_oof+0.1*rr_train_oof, target, squared=False)","d324e088":"knn_train_oof = cp.zeros((300000,))\nknn_test_preds = 0\nknn_train_oof.shape","8f4ffd3d":"NUM_FOLDS = 5\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train, target))):\n        #print(f'Fold {f}')\n        train_df, val_df = train.iloc[train_ind][columns], train.iloc[val_ind][columns]\n        train_target, val_target = target[train_ind], target[val_ind]\n        \n        model = KNeighborsRegressor(n_neighbors=150)\n        model.fit(train_df, train_target)\n        temp_oof = model.predict(val_df)\n        temp_test = model.predict(test[columns])\n\n        knn_train_oof[val_ind] = temp_oof\n        knn_test_preds += temp_test\/NUM_FOLDS","49aff5f9":"mean_squared_error(knn_train_oof, target, squared=False)","665d9f8d":"mean_squared_error(0.5*rf_train_oof+0.5*knn_train_oof, target, squared=False)","a8a10fb7":"svr_train_oof = cp.zeros((300000,))\nsvr_test_preds = 0\nsvr_train_oof.shape","92146afd":"NUM_FOLDS = 5\nkf = KFold(n_splits=NUM_FOLDS, shuffle=True, random_state=0)\n\nfor f, (train_ind, val_ind) in tqdm(enumerate(kf.split(train, target))):\n        #print(f'Fold {f}')\n        train_df, val_df = train.iloc[train_ind][columns], train.iloc[val_ind][columns]\n        train_target, val_target = target[train_ind], target[val_ind]\n        \n        model = SVR(C=0.1)\n        model.fit(train_df, train_target)\n        temp_oof = model.predict(val_df)\n        temp_test = model.predict(test[columns])\n\n        svr_train_oof[val_ind] = temp_oof\n        svr_test_preds += temp_test\/NUM_FOLDS","8519fe9e":"mean_squared_error(svr_train_oof, target, squared=False)","70eaa26a":"mean_squared_error(0.35*rf_train_oof+0.34*knn_train_oof+0.31*svr_train_oof, target, squared=False)","8933e51f":"sample_submission['target'] = 0.35*rf_test_preds+0.34*knn_test_preds+0.31*svr_test_preds\nsample_submission.to_csv('submission.csv', index=False)","cf409f74":"[Rapids](https:\/\/rapids.ai) is an open-source GPU accelerated Data Sceince and Machine Learning library, developed and mainatained by [Nvidia](https:\/\/www.nvidia.com). It is designed to be compatible with many existing CPU tools, such as Pandas, scikit-learn, numpy, etc. It enables **massive** acceleration of many data-science and machine learning tasks, oftentimes by a factor fo 100X, or even more. If you are interested in installing and running Rapids locally on your own machine, then you should [refer to the followong instructions](https:\/\/rapids.ai\/start.html).","3663ad93":"<img src=\"https:\/\/developer.nvidia.com\/sites\/default\/files\/pictures\/2018\/rapids\/rapids-logo.png\"\/>"}}