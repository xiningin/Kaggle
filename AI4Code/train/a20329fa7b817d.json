{"cell_type":{"1edd03ce":"code","1895f0fb":"code","2ca67621":"code","d8560c1a":"code","04ecda92":"code","11f92552":"code","de5daef2":"code","77efe98f":"code","e8441297":"code","a0ab5dde":"code","9b983f03":"code","0e0380e7":"code","c6971ea4":"code","3f9d0a64":"code","2cd8d10a":"code","89af5b42":"code","e9cac38d":"code","927f3f03":"code","a1633229":"code","6963433f":"code","383ad90c":"code","a4843c0e":"code","2aba1e59":"code","95ae0697":"code","b134fa2f":"code","f7d1647d":"code","67eb2fd6":"code","e01bd607":"code","714156f1":"code","b41bcf7c":"code","2318306f":"code","eda715a8":"code","671a7a0f":"code","6bd0716b":"code","c2f52065":"code","3fe66172":"code","4e47df60":"code","b10fab4b":"code","6aea168b":"code","b706fe24":"code","236cfdaa":"code","f7afd429":"code","5e4e074f":"code","5003c7e6":"code","34964944":"code","5026b8b8":"code","05fe1b85":"code","d50ddb11":"code","b31c2fb7":"code","492a04ac":"code","926662e5":"code","2190f8f3":"code","9315dafb":"code","e3dc9e8c":"code","845db275":"code","7ea2de7c":"code","1b88c7cc":"code","9790adbb":"code","4396caae":"code","efb9f6e2":"code","64a64402":"code","312d3d8a":"code","9912bdaa":"code","2621ff1c":"code","2ba52c42":"code","96e0bdb1":"code","eb8b6131":"code","48350d58":"code","9e15b818":"code","0c0409c3":"code","6695a2f4":"markdown","4a822551":"markdown","b90254e0":"markdown","afb1f6e3":"markdown","a812cd55":"markdown","e75ca004":"markdown","944b5670":"markdown","87eebb2a":"markdown","9b80193f":"markdown","f7b2e232":"markdown","ae536155":"markdown","9512d51e":"markdown","7380cc82":"markdown"},"source":{"1edd03ce":"import numpy as np\nimport pandas as pd \nimport tensorflow as tf\nimport seaborn as sns","1895f0fb":"data = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv')\ndata.head()","2ca67621":"data.info()","d8560c1a":"data.isnull().sum()","04ecda92":"sns.countplot(data=data,x='habitat', hue='class',palette='viridis')","11f92552":"sns.countplot(data=data,x='population', hue='class',palette='viridis')","de5daef2":"sns.countplot(data=data,x='spore-print-color', hue='class',palette='viridis')","77efe98f":"sns.countplot(data=data,x='ring-type', hue='class',palette='viridis')","e8441297":"sns.countplot(data=data,x='ring-number', hue='class',palette='viridis')","a0ab5dde":"sns.countplot(data=data,x='veil-color', hue='class',palette='viridis')","9b983f03":"sns.countplot(data=data,x='veil-type', hue='class',palette='viridis')","0e0380e7":"sns.countplot(data=data,x='stalk-color-below-ring', hue='class',palette='viridis')","c6971ea4":"sns.countplot(data=data,x='stalk-color-above-ring', hue='class',palette='viridis')","3f9d0a64":"sns.countplot(data=data,x='stalk-surface-below-ring', hue='class',palette='viridis')","2cd8d10a":"sns.countplot(data=data,x='stalk-surface-above-ring', hue='class',palette='viridis')","89af5b42":"sns.countplot(data=data,x='stalk-root', hue='class',palette='viridis')","e9cac38d":"sns.countplot(data=data,x='stalk-shape', hue='class',palette='viridis')","927f3f03":"sns.countplot(data=data,x='gill-spacing', hue='class',palette='viridis')","a1633229":"sns.countplot(data=data,x='gill-attachment', hue='class',palette='viridis')","6963433f":"sns.countplot(data=data,x='bruises', hue='class',palette='viridis')","383ad90c":"sns.countplot(data=data,x='odor', hue='class',palette='viridis')","a4843c0e":"print(\"Dataset shape:\", data.shape)","2aba1e59":"sns.countplot(data=data,x='cap-shape', hue='class',palette='viridis')","95ae0697":"sns.countplot(data=data,x='cap-surface',hue='class',palette='viridis')","b134fa2f":"data.groupby('cap-surface')['class'].value_counts()","f7d1647d":"sns.countplot(data=data,x='cap-shape')","67eb2fd6":"sns.countplot(data=data,x='gill-size', hue='class',palette='viridis')","e01bd607":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()\ndf = data.apply(LabelEncoder().fit_transform)   \ndf.head()","714156f1":"sns.boxplot(x='class',y='cap-shape',data=df)","b41bcf7c":"sns.boxplot(x='class',y='cap-surface',data=df)","2318306f":"sns.boxplot(x='class',y='cap-color',data=df)","eda715a8":"sns.boxplot(x='class',y='bruises',data=df)","671a7a0f":"sns.boxplot(x='class',y='odor',data=df)","6bd0716b":"sns.boxplot(x='class',y='gill-size',data=df)","c2f52065":"sns.boxplot(x='class',y='gill-color',data=df)","3fe66172":"mush = df[\"veil-type\"].unique()\nmush","4e47df60":"df.drop([\"veil-type\"],axis=1, inplace = True)","b10fab4b":"df.shape","6aea168b":"df.describe()","b706fe24":"df['class'].unique()","236cfdaa":"df['class'].value_counts()","f7afd429":"import matplotlib.pyplot as plt\nplt.figure(figsize = (15, 10))\nsns.heatmap(df.corr(), annot = True, cmap = 'coolwarm')","5e4e074f":"count = df['class'].value_counts()\nsns.barplot(count.index, count.values)\nplt.ylabel('count', fontsize=20)\nplt.xlabel('class', fontsize=20)\nplt.title('Number of poisonous\/edible mushrooms', fontsize=22)\nplt.show()","5003c7e6":"x = df.drop(['class'] , axis = 1)\ny = df['class']\n","34964944":"from sklearn.model_selection import train_test_split\nx_train , x_test , y_train , y_test = train_test_split(x,y,test_size = 0.3 , random_state = 0)","5026b8b8":"from sklearn.tree import DecisionTreeClassifier\ndt = DecisionTreeClassifier(random_state = 0 , max_depth = 5)\ndt.fit(x_train , y_train)","05fe1b85":"dt.score(x_train , y_train)","d50ddb11":"predictions = dt.predict(x_test)","b31c2fb7":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test , predictions)","492a04ac":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(max_depth = 5)","926662e5":"rf.fit(x_train , y_train)\nrf.score(x_train , y_train)","2190f8f3":"predictions = rf.predict(x_test)\nrf.score(x_test , y_test)","9315dafb":"accuracy_score(y_test , predictions)","e3dc9e8c":"from sklearn.neighbors import KNeighborsClassifier\nclassifier_KNN = KNeighborsClassifier(3)\nclassifier_KNN.fit(x_train,y_train)","845db275":"prediction_KNN = classifier_KNN.predict(x_test)\nclassifier_KNN.score(x_test , y_test)","7ea2de7c":"from sklearn.svm import SVC\nclassifier_svm = SVC()\nclassifier_svm.fit(x_train,y_train)","1b88c7cc":"prediction_svm = classifier_svm.predict(x_test)\nclassifier_svm.score(x_test , y_test)","9790adbb":"from sklearn.ensemble import GradientBoostingClassifier as gbc\nclassifier_gbc = gbc()\nclassifier_gbc.fit(x_train,y_train)","4396caae":"prediction_gbc = classifier_gbc.predict(x_test)\nclassifier_gbc.score(x_test , y_test)","efb9f6e2":"from sklearn.ensemble import  AdaBoostClassifier as abc\nclassifier_abc = abc()\nclassifier_abc.fit(x_train,y_train)","64a64402":"prediction_abc = classifier_abc.predict(x_test)\nclassifier_abc.score(x_test , y_test)","312d3d8a":"from sklearn.naive_bayes import GaussianNB as gnb\nclassifier_gnb = gnb()\nclassifier_gnb.fit(x_train,y_train)","9912bdaa":"prediction_gnb = classifier_gnb.predict(x_test)\nclassifier_gnb.score(x_test , y_test)","2621ff1c":"names = ['Decision', 'Random', 'KNN','SVM','GBC','ABC', 'GNB' ]\nscores = [0.9778403095321843, 0.9899753781217024, 0.9987694831829368, 0.9897456931911403, 1.0, 1.0, 0.9150943396226415]","2ba52c42":"sc = pd.DataFrame()\nsc['names'] = names\nsc['scores'] = scores\nsc","96e0bdb1":"classifier_GBC = gbc()\nclassifier_gbc.fit(x_train,y_train)","eb8b6131":"y_pred = classifier_gbc.predict(x_test)\ny_pred","48350d58":"from sklearn.metrics import classification_report,roc_auc_score,roc_curve,auc\nreport = classification_report(y_test,y_pred)\nprint(report)","9e15b818":"roc_auc_score(y_test,y_pred)","0c0409c3":"fpr,tpr,threshold =roc_curve(y_test,y_pred)\nauc = auc(fpr,tpr)\nplt.figure(figsize=(5,5),dpi=100)\nplt.plot(fpr,tpr,linestyle='-',label = \"(auc = %0.3f)\" % auc)\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.legend()\nplt.show()","6695a2f4":"# Ada Boost Classifier","4a822551":"# Gradient Boosting Classifier","b90254e0":"# Problem Statement :\n### To predict whether the mushroom is edible or poisonous","afb1f6e3":"# Gaussian Naive Bayes","a812cd55":"# Decision Tree Model","e75ca004":"# Outlier Detection","944b5670":"# AUC Curve","87eebb2a":"# Attribute Information: (classes: edible=e, poisonous=p)\ncap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n\ncap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n\ncap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y\n\nbruises: bruises=t,no=f\n\nodor: almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s\n\ngill-attachment: attached=a,descending=d,free=f,notched=n\n\ngill-spacing: close=c,crowded=w,distant=d\n\ngill-size: broad=b,narrow=n\n\ngill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y\n\nstalk-shape: enlarging=e,tapering=t\n\nstalk-root: bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=?\n\nstalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n\nstalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nstalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y\n\nveil-type: partial=p,universal=u\n\nveil-color: brown=n,orange=o,white=w,yellow=y\n\nring-number: none=n,one=o,two=t\n\nring-type: cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z\n\nspore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y\n\npopulation: abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y\n\nhabitat: grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d","9b80193f":"# Accuracy prediction","f7b2e232":"# K Nearest Neighbour","ae536155":"# Train_Test_Split Data ","9512d51e":"# Support Vector Machine","7380cc82":"# Random Forest Model"}}