{"cell_type":{"45ab41d2":"code","0f3113ab":"code","4b23271d":"code","c90dd581":"code","1bbed1a7":"code","297695bd":"code","082dd6f4":"code","03531851":"code","9014736f":"code","37cf3bfb":"code","436fd21e":"code","6781118a":"code","88d581fb":"code","2c4b5339":"code","2db97eaa":"code","8390c351":"code","ba8a4c96":"code","4f377cb3":"code","f5da7204":"code","c5a1ab46":"markdown"},"source":{"45ab41d2":"from sklearn.manifold import TSNE\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, accuracy_score, classification_report, cohen_kappa_score\n\nfrom operator import truediv\nfrom plotly.offline import init_notebook_mode\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.io as sio\nimport os\nimport spectral\n\ninit_notebook_mode(connected=True)\n%matplotlib inline","0f3113ab":"## GLOBAL VARIABLES\ndataset = 'IP'\ntest_ratio = 0.7\nwindowSize = 25","4b23271d":"def loadData(name):\n    \n    if name == 'IP':\n        data = sio.loadmat('..\/input\/hsi-dataset\/Indian_pines_corrected.mat')['indian_pines_corrected']\n        labels = sio.loadmat('..\/input\/hsi-dataset\/Indian_pines_gt.mat')['indian_pines_gt']\n    elif name == 'SA':\n        data = sio.loadmat('..\/input\/hsi-dataset\/Salinas_corrected.mat')['salinas_corrected']\n        labels = sio.loadmat('..\/input\/hsi-dataset\/Salinas_gt.mat')['salinas_gt']\n    elif name == 'PU':\n        data = sio.loadmat('..\/input\/hsi-dataset\/PaviaU.mat')['paviaU']\n        labels = sio.loadmat('..\/input\/hsi-dataset\/PaviaU_gt.mat')['paviaU_gt']\n    \n    return data, labels","c90dd581":"def splitTrainTestSet(X, y, testRatio, randomState=345):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=testRatio, random_state=randomState,\n                                                        stratify=y)\n    return X_train, X_test, y_train, y_test","1bbed1a7":"def applyTSNE(X, numComponents):\n    newX = np.reshape(X, (-1, X.shape[2]))\n    tsne = TSNE(n_components=numComponents)\n    newX = tsne.fit_transform(newX)\n    newX = np.reshape(newX, (X.shape[0],X.shape[1], numComponents))\n    return newX, tsne","297695bd":"X, y = loadData(dataset)","082dd6f4":"X.shape, y.shape","03531851":"K =3\nX,tsne = applyTSNE(X,numComponents=K)\nprint('X.shape',X.shape)\nprint('y.shape',y.shape)","9014736f":"sio.savemat('.\/tsne3dimension.mat', {'X': X})","37cf3bfb":"\nplt.xlabel('Number of components')\nplt.ylabel('Cumulative explained variance')\nplt.show()","436fd21e":"X = np.reshape(X, (-1, X.shape[2]))\nX.shape","6781118a":"y = np.reshape(y, (-1))\ny.shape","88d581fb":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = .2, random_state = 0)","2c4b5339":"print('X_train.shape',X_train.shape)\nprint('X_test.shape',X_test.shape)\nprint('y_train.shape',y_train.shape)\nprint('y_test.shape',y_test.shape)","2db97eaa":"from sklearn.svm import SVC\nclassifier =SVC(random_state=0, tol=1e-5,kernel='rbf', degree = 10, gamma='scale', cache_size=1024*7,max_iter=99999)\nclassifier.fit(X_train, y_train)","8390c351":"# Predicting the Test set results\ny_pred = classifier.predict(X_test)\n","ba8a4c96":"from sklearn.metrics import accuracy_score\nacc = accuracy_score(y_test, y_pred)\nprint(acc)","4f377cb3":"print('Classification report:\\n',classification_report(y_test,y_pred,zero_division=0))","f5da7204":"import scikitplot as skplt\n\nskplt.metrics.plot_confusion_matrix(\n    y_test, \n    y_pred,\n    figsize=(12,12));","c5a1ab46":"**MOdel and traing**"}}