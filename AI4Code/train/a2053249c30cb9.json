{"cell_type":{"ecc4fa6a":"code","58a4ecdb":"code","686885bc":"code","dbc9d65f":"code","8da87957":"code","c6e78221":"code","c010a16f":"code","30337beb":"code","6a4565af":"code","c0435cdb":"code","cef8fd36":"code","b1b2143b":"code","81386363":"code","e5820abe":"code","f179b2d6":"code","a86cd395":"code","2d44e9ed":"code","7925d8c7":"code","638c57bd":"code","0399d41d":"code","48112ad4":"code","4876520c":"code","f0cb64d8":"code","ed31055d":"code","5fa416c2":"code","76f55f19":"code","9a216ad3":"code","f64b01dd":"code","df4dd5a4":"code","b6d80436":"markdown","e3047e3a":"markdown","ab604690":"markdown","5889e4ec":"markdown","3c82239f":"markdown","8e400308":"markdown","7fdf3b20":"markdown","0ee72c8a":"markdown","9eb32552":"markdown","b67860f8":"markdown","0a3c532c":"markdown","b3743e62":"markdown","66931865":"markdown","2cdd545d":"markdown"},"source":{"ecc4fa6a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58a4ecdb":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","686885bc":"#\u30c7\u30fc\u30bf\u306e\u30b5\u30a4\u30ba\uff08\u4f55\u884c\u3001\u4f55\u5217\u304b\uff09\ntrain.shape","dbc9d65f":"#\u30ab\u30e9\u30e0\uff08\u5217\uff09\u306e\u30d8\u30c3\u30c0\u30fc\u3092\u8868\u793a\ntest.columns","8da87957":"#non-null\uff08\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u308b\uff09\u306e\u30bb\u30eb\u6570\u3092\u30ab\u30a6\u30f3\u30c8\ntest.info()","c6e78221":"#null\uff08\u7a7a\u767d\uff09\u306e\u30bb\u30eb\u306fTrue\u306b\u306a\u308b\ntrain.isnull()","c010a16f":"#null\u306e\u30bb\u30eb\u306e\u5408\u8a08\u6570\ntrain.isnull().sum()","30337beb":"#\u30c7\u30fc\u30bf\u78ba\u8a8d\ntrain.head(5)","6a4565af":"#One-Hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\ntrain = pd.get_dummies(train,columns=['Sex','Embarked'])\ntest = pd.get_dummies(test,columns=['Sex','Embarked'])","c0435cdb":"#One-Hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u304d\u305f\u304b\u78ba\u8a8d\ntrain.head(5)","cef8fd36":"#'PassengerId','Name','Cabin','Ticket'\u306f\u4e0d\u8981\u3068\u3057\u3066\u524a\u9664\ntrain.drop(['PassengerId','Name','Cabin','Ticket'],axis=1,inplace=True)#inplace=True\u3067\u5143\u306eDataframe\u304c\u5909\u66f4\u3055\u308c\u308b\ntest.drop(['PassengerId','Name','Cabin','Ticket'],axis=1,inplace=True)\n","b1b2143b":"#train\u306e\u8868\u793a\ndisplay(train.head())","81386363":"#train\u3092X_train\u3068y_train\u306b\u5206\u3051\u308b\n#X_train\u306ftrain\u306esurvived\u5217\u4ee5\u5916\u3001y_train\u306ftrain\u306esurvived\u5217\nX_train = train.drop(['Survived'],axis=1)\ny_train = train['Survived']","e5820abe":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score","f179b2d6":"# \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5\nfrom IPython.display import Image\nImage(\"..\/input\/images\/hold_out.png\")","a86cd395":"#X_train\u3068y_train\u3092train\u3068valid\u306b\u5206\u5272\u3059\u308b\ntrain_x,valid_x,train_y,valid_y = train_test_split(X_train,y_train,test_size=0.33,random_state=0)\n\nlgb_train = lgb.Dataset(train_x,train_y)\nlgb_eval = lgb.Dataset(valid_x,valid_y)","2d44e9ed":"#\u76ee\u7684\uff08objective\uff09\u306f\u4e8c\u5024\u5206\u985e(binary)\nlgbm_params = {'objective':'binary'}\n\nevals_result = {}\ngbm = lgb.train(params = lgbm_params,\n               train_set = lgb_train,\n               valid_sets = [lgb_train,lgb_eval],\n               early_stopping_rounds = 20,\n               evals_result = evals_result,\n               verbose_eval=10);","7925d8c7":"import matplotlib.pyplot as plt\n\nplt.plot(evals_result['training']['binary_logloss'],label='train_loss')\nplt.plot(evals_result['valid_1']['binary_logloss'],label='valid_loss')\nplt.legend()","638c57bd":"oof = (gbm.predict(valid_x)>0.5).astype(int)\nprint('score',round(accuracy_score(valid_y,oof)*100,2))","0399d41d":"# gbm.predict\u3067\u63a8\u8ad6\u5b9f\u884c\ntest_pred=(gbm.predict(test)>0.5).astype(int)","48112ad4":"# \u7d50\u679c\u3092\u898b\u3066\u307f\u308b\nprint(test_pred)","4876520c":"# \u63d0\u51fa\u30c7\u30fc\u30bf\u3092\u7c21\u5358\u306b\u3064\u304f\u308b\u305f\u3081\u3001gender_submission\u3092\u8aad\u307f\u8fbc\u3080\nsubmission_example = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission_example.head(5)","f0cb64d8":"# submission_example\u306eSurvived\u5217\u3092\u63a8\u8ad6\u7d50\u679c\u306b\u66f8\u304d\u63db\u3048\u308b\nsubmission_example['Survived']=test_pred\n# \u66f8\u304d\u63db\u308f\u3063\u305f\u304b\u78ba\u8a8d\nsubmission_example.head(5)","ed31055d":"# \u63d0\u51fa\u306e\u305f\u3081\u306bcsv\u51fa\u529b\nsubmission_example.to_csv('train_test_split.csv',index=False)","5fa416c2":"# \u4ea4\u5dee\u691c\u8a3c\nfrom IPython.display import Image\nImage(\"..\/input\/images\/cross_validation.png\")","76f55f19":"from sklearn.model_selection import KFold\n\n#3\u5206\u5272\u4ea4\u5dee\u691c\u8a3c\u3092\u6307\u5b9a\u3057\u3001\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\nkf = KFold(n_splits=3,shuffle=True)\n\n#\u30b9\u30b3\u30a2\u3068\u30e2\u30c7\u30eb\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nscore_list=[]\nmodels=[]\n\n\nfor fold_,(train_index,valid_index) in enumerate(kf.split(X_train,y_train)):\n    print(f'fold{fold_ +1} start')\n    train_x = X_train.iloc[train_index]\n    valid_x = X_train.iloc[valid_index]\n    train_y = y_train[train_index]\n    valid_y = y_train[valid_index]\n    \n    # lgb.Dataset\u3092\u4f7f\u3063\u3066\u3001train\u3068valid\u3092\u3064\u304f\u3063\u3066\u304a\u304f\n    lgb_train = lgb.Dataset(train_x,train_y)\n    lgb_valid = lgb.Dataset(valid_x,valid_y)\n    \n    # \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\n    lgbm_params = {'objective':'binary'}\n    \n    # lgb.train\u3067\u5b66\u7fd2\n    gbm = lgb.train(params = lgbm_params,\n               train_set = lgb_train,\n               valid_sets = [lgb_train,lgb_valid],\n               early_stopping_rounds = 20,\n               verbose_eval=10);\n    \n    oof = (gbm.predict(valid_x)>0.5).astype(int)\n    score_list.append(round(accuracy_score(valid_y,oof)*100,2))\n    \n    models.append(gbm)#\u5b66\u7fd2\u304c\u7d42\u308f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u30ea\u30b9\u30c8\u306b\u5165\u308c\u3066\u304a\u304f\n    \n    print(f'fold{fold_ +1} end\\n')\nprint(score_list,'\u5e73\u5747 score',round(np.mean(score_list),2))","9a216ad3":"test_pred = np.zeros((len(test),3))\n\nfor fold_,gbm in enumerate(models):\n    pred_ = gbm.predict(test)\n    test_pred[:,fold_] = pred_\n\npred = (np.mean(test_pred,axis = 1)>0.5).astype(int)\nsubmission_example['Survived']=pred\nsubmission_example.to_csv('cv_train_test_split.csv',index=False)","f64b01dd":"from sklearn.model_selection import StratifiedKFold\n\n\ncv = StratifiedKFold(n_splits=10, shuffle=True, random_state=0)\n\n#\u30b9\u30b3\u30a2\u3068\u30e2\u30c7\u30eb\u3092\u683c\u7d0d\u3059\u308b\u30ea\u30b9\u30c8\nscore_list=[]\nmodels=[]\n\n\nfor fold_,(train_index,valid_index) in enumerate(cv.split(X_train,y_train)):\n    print(f'fold{fold_ +1} start')\n    train_x = X_train.iloc[train_index]\n    valid_x = X_train.iloc[valid_index]\n    train_y = y_train[train_index]\n    valid_y = y_train[valid_index]\n    \n    # lgb.Dataset\u3092\u4f7f\u3063\u3066\u3001train\u3068valid\u3092\u3064\u304f\u3063\u3066\u304a\u304f\n    lgb_train = lgb.Dataset(train_x,train_y)\n    lgb_valid = lgb.Dataset(valid_x,valid_y)\n    \n    # \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\n    lgbm_params = {'objective':'binary'}\n    \n    # lgb.train\u3067\u5b66\u7fd2\n    gbm = lgb.train(params = lgbm_params,\n               train_set = lgb_train,\n               valid_sets = [lgb_train,lgb_valid],\n               early_stopping_rounds = 20,\n               verbose_eval=10);\n    \n    oof = (gbm.predict(valid_x)>0.5).astype(int)\n    score_list.append(round(accuracy_score(valid_y,oof)*100,2))\n    \n    models.append(gbm)#\u5b66\u7fd2\u304c\u7d42\u308f\u3063\u305f\u30e2\u30c7\u30eb\u3092\u30ea\u30b9\u30c8\u306b\u5165\u308c\u3066\u304a\u304f\n    \n    print(f'fold{fold_ +1} end\\n')\nprint(score_list,'\u5e73\u5747 score',round(np.mean(score_list),2))","df4dd5a4":"test_pred = np.zeros((len(test),10))\n\nfor fold_,gbm in enumerate(models):\n    pred_ = gbm.predict(test)\n    test_pred[:,fold_] = pred_\n\npred = (np.mean(test_pred,axis = 1)>0.5).astype(int)\n# \u63d0\u51fa\u30c7\u30fc\u30bf\u3092\u7c21\u5358\u306b\u3064\u304f\u308b\u305f\u3081\u3001gender_submission\u3092\u8aad\u307f\u8fbc\u3080\nsubmission_example = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\nsubmission_example['Survived']=pred\nsubmission_example.to_csv('cv10_train_test_split.csv',index=False)","b6d80436":"\u5b66\u7fd2\u66f2\u7dda  \nhttps:\/\/aizine.ai\/learning-curve0218\/\n\nlogloss  \nhttps:\/\/qiita.com\/exp\/items\/1c6c9a3fae2d97bfa0c7","e3047e3a":"### \u30db\u30fc\u30eb\u30c9\u30a2\u30a6\u30c8\u6cd5","ab604690":"## \u524d\u51e6\u7406","5889e4ec":"#### \u63a8\u8ad6","3c82239f":"lightgbm\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066  \nhttps:\/\/lightgbm.readthedocs.io\/en\/latest\/Parameters.html","8e400308":"#### \u5b66\u7fd2","7fdf3b20":"### k\u5206\u5272\u4ea4\u5dee\u691c\u8a3c","0ee72c8a":"train\u30c7\u30fc\u30bf\u3001test\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u3053\u3080\u3002","9eb32552":"#### \u5b66\u7fd2","b67860f8":"\u30c7\u30fc\u30bf\u306e\u6982\u8981\u3092\u3064\u304b\u3080\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3044\u308d\u3044\u308d","0a3c532c":"## \u5b66\u7fd2\u30fb\u63a8\u8ad6","b3743e62":"#### \u63a8\u8ad6","66931865":"X_train\u3068y_train\u3092scikitlearn\u306etrain_test_split\u3092\u7528\u3044\u3066\u300167%:33%\u306e\u5272\u5408\u3067train\u30bb\u30c3\u30c8\u3068valid\u30bb\u30c3\u30c8(\u691c\u8a3c\u30bb\u30c3\u30c8)\u306b\u5206\u5272\u3057\u3066\u5b66\u7fd2\u3057\u6027\u80fd\u306e\u8a55\u4fa1\u3092\u884c\u3044\u307e\u3059\u3002","2cdd545d":"\u6027\u5225\uff08Sex\uff09\u3068Emberked\uff08\u51fa\u6e2f\u5730\uff1aC\uff1dCherbourg\uff1a\u30b7\u30a7\u30eb\u30d6\u30fc\u30eb\u3001Q\uff1dQueenstown\uff1a\u30af\u30a4\u30fc\u30f3\u30ba\u30bf\u30a6\u30f3\u3001S\uff1dSouthampton\uff1a\u30b5\u30a6\u30b5\u30f3\u30d7\u30c8\u30f3\uff09\u306f\u5b66\u7fd2\u306b\u4f7f\u3044\u305f\u3044\u304c\u6587\u5b57\u5217\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001One-Hot\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u6570\u5b57\u306b\u7f6e\u304d\u63db\u3048\u308b"}}