{"cell_type":{"b9e055af":"code","76745d5e":"code","4769d8f0":"code","5870bdcc":"code","cc33866b":"code","8c5c4cbf":"code","39f600fb":"code","cbee3c81":"code","5c9d3511":"code","60096791":"code","5815bf6f":"code","1f0f0ef8":"code","647f19ae":"code","b036d00a":"code","24feea2c":"code","c62b3ab2":"code","7cb6f5f9":"code","c925f657":"code","af6f2b2f":"code","17959d12":"markdown","2033a7c5":"markdown"},"source":{"b9e055af":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","76745d5e":"import pandas as pd\ndf = pd.read_csv('\/kaggle\/input\/housesalesprediction\/kc_house_data.csv')\ndf.head()","4769d8f0":"X = df.drop(['price', 'id', 'date', 'zipcode', 'lat', 'long'  ], axis=1)\ny = df['price']","5870bdcc":"from sklearn.neighbors import KNeighborsRegressor\n\nmodel = KNeighborsRegressor(n_neighbors=5)\n\nmodel.fit(X, y)","cc33866b":"model.score(X, y)","8c5c4cbf":"y_pred = model.predict(X)","39f600fb":"y_pred","cbee3c81":"from sklearn.metrics import mean_squared_error\nmean_squared_error(y, y_pred)","5c9d3511":"model.predict([[3, 1, 1190, 5700, 1, 0, 0, 3, 7, 1190, 100, 1960, 0, 1370, 5700 ]])","60096791":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42, shuffle=True)","5815bf6f":"len(X_train)","1f0f0ef8":"len(X_test)","647f19ae":"from sklearn.neighbors import KNeighborsRegressor\n\nmodel = KNeighborsRegressor(n_neighbors=5)\n\nmodel.fit(X_train,y_train)\n\nprint('Train:', model.score(X_train, y_train))\nprint('Test:', model.score(X_test, y_test))","b036d00a":"from sklearn.metrics import mean_squared_error\ny_pred_test = model.predict(X_test)\nmean_squared_error(y_test, y_pred_test)","24feea2c":"from sklearn.model_selection import cross_validate\n\nresults = []\nfor k in [1,3,5,7,9,10,12,15,20]:\n    model = KNeighborsRegressor(n_neighbors=k)\n    cv_results = cross_validate(model, X_train, y_train, cv=3)\n    results.append(sum(cv_results['test_score'])\/3)","c62b3ab2":"results","7cb6f5f9":"model = KNeighborsRegressor(n_neighbors=9)\n\nmodel.fit(X_train,y_train)\n\nprint('Train:', model.score(X_train, y_train))\nprint('Test:', model.score(X_test, y_test))","c925f657":"model.predict([[3, 1, 1190, 5700, 1, 0, 0, 3, 7, 1190, 100, 1960, 0, 1370, 5700 ]])","af6f2b2f":"model.predict([[3, 2.25, 2570, 7242, 2, 0, 0, 3, 7, 2170, 400, 1951, 1991, 1690, 7639 ]])","17959d12":"# Data for a house with a price of 538k","2033a7c5":"# The same data that were for testing with k = 5. The model has become more accurate."}}