{"cell_type":{"1618214c":"code","e056e34e":"code","889fdbea":"code","3008c6f6":"code","ceb57d86":"code","193d256e":"code","880239d9":"code","97722cb4":"code","fb431ee2":"code","f0eacbc1":"code","a382d0c4":"code","45718201":"markdown","05ee940b":"markdown","ed315ca8":"markdown","82fbe9f5":"markdown","4a2aff60":"markdown","4b835f60":"markdown","a2d0bbc9":"markdown","104b51ab":"markdown","92a42530":"markdown","ec5500cf":"markdown","2fb9e54f":"markdown","00c8f5e4":"markdown","80fa1f4c":"markdown"},"source":{"1618214c":"#import packages\n\nimport numpy as np \nimport pandas as pd \nimport os\nimport matplotlib.pyplot as plt \n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\ndf_total = pd.read_csv(\"\/kaggle\/input\/animated-bubble-chart-and-more\/df_bubble.csv\") #colnames : COU, Country, Time, houseprice, gdp, population, t_gdp, Code, Continent\ndf_rent = pd.read_csv(\"\/kaggle\/input\/animated-bubble-chart-and-more\/df_bubble_rent.csv\")\ninterest_rate = pd.read_csv(\"\/kaggle\/input\/animated-bubble-chart-and-more\/Interest_rate_filtered.csv\") \n\n#Sort the data by year and drop NAs\n\ndf = df_total.sort_values(by=['Time'])\ndf = df.dropna(how = 'any')       #This drops all NA\n","e056e34e":"#Animated Bubble Graph - 1 (Total)\n\nfig1 = px.scatter(df, x='gdp', y='houseprice', animation_frame='Time',\n                animation_group= 'Country', size='population', \n                color='Continent', hover_name='Country',\n                log_x=False,size_max=60, range_x=[0,70000],range_y=[0,200])   #Customize size, range\nfig1.layout.updatemenus[0].buttons[0].args[1][\"frame\"][\"duration\"]=700\nfig1.update_xaxes(title_text='GDP\/Capita', title_font_size=15)\nfig1.update_yaxes(title_text='House Price Index', title_font_size=15)\nfig1.show() \n","889fdbea":"#Clustering - Increasing vs Decreasing (2015=100)\n\n#Find Countries whose houseprice index was bigger than 100 before 2015\ndf_DEC = df[df['Time']<2015]\ndf_DEC = df_DEC[df_DEC['houseprice']>100]\nv_DEC = set(df_DEC.Country) #19 Countries\nv_TOT = set(df.Country) #43 Countries\nv_INC = v_TOT-v_DEC  #24 Countries\n\n#China should be included in 'increasing' group. (Very slight decrease in 2014-2015)\n\nv_DEC.remove(\"China (People's Republic of)\")\nv_INC.add(\"China (People's Republic of)\")\n","3008c6f6":"#Trend - INC Group\n\ndf_f_i = df_total[df_total['Country'].isin(v_INC)] #filter Countries with increasing Price\nfig = px.line(df_f_i, x='Time', y='houseprice', color='Continent',\n              line_group='Country', hover_name='Country')\nfig.update_layout(\n    title = 'Houseprice Index Trend (1980-2020)')\nfig.show()","ceb57d86":"#Trend - DEC Group\n\ndf_f_d = df_total[df_total['Country'].isin(v_DEC)] #filter Countries with Decreasing Price\nfig = px.line(df_f_d, x='Time', y='houseprice', color='Continent',\n              line_group='Country', hover_name='Country')\n\nfig.update_layout(\n    title = 'Houseprice Index Trend (1980-2019)'\n)\nfig.show()\n","193d256e":"# Aggregate data (comparing the first year with the last year)\n\ndf_f = df_f_i.copy()\ndf_f['Time_recent'] = df_f['Time']\ndf_f['houseprice_recent'] =df_f['houseprice']\ndf_f['houseprice_std'] =df_f['houseprice']\n\nDF_f = df_f.groupby('Country').agg({\n                    'Time' : ['first'],\n                    'Time_recent' : ['last'],\n                    'houseprice' : ['first'],\n                    'houseprice_recent' : ['last']})\nDF_f = DF_f.copy()\nDF_f['range_year'] = np.array(DF_f['Time_recent']) - np.array(DF_f['Time'])\nDF_f['range_price'] = np.array(DF_f['houseprice_recent']) - np.array(DF_f['houseprice'])\nDF_f.columns = DF_f.columns.droplevel(1)  #drop multi-level index from columns\nDF_f = DF_f.sort_values(['houseprice_recent'], ascending = True)\nDF_f['CAGR'] = round(((DF_f.houseprice_recent\/DF_f.houseprice)**(1\/DF_f.range_year)-1)*100,1)\n","880239d9":"# Draw Dash Plot \n\nfig = go.Figure()\n\n#Add Time 1\nfig.add_trace(go.Scatter(\n    x=DF_f['houseprice'],\n    y=DF_f.index,\n    name='Houseprice Index (past)',\n    marker=dict(\n        color='rgba(204, 204, 204, 0.95)',\n        line_color='rgba(217, 217, 217, 1.0)'\n    )\n))\n\n#Add Lines\nfor i in range(0,DF_f.shape[0]):\n    fig.add_shape(type=\"line\",\n                   x0 = DF_f.houseprice[i],\n                   y0 = i,\n                   x1 = DF_f.houseprice_recent[i],\n                   y1 = i,\n                   line = dict(color='rgba(204, 204, 204, 0.3)',width = 5))\n\n#Add Time 2\nfig.add_trace(go.Scatter(\n    x=DF_f['houseprice_recent'], \n    y=DF_f.index,\n    name='Houseprice Index (recent)',\n    marker=dict(\n        # color='rgba(114, 86, 245, 0.75)',   #Purple       \n        # line_color='rgba(114, 86, 245, 1.0)'\n\n        color='rgba(179, 166, 183, 1.0)',          #Tone Down Purple\n        line_color='rgba(179, 166, 183, 1.0)'\n\n        # color='rgba(156, 165, 196, 0.95)',          #Tone Down Blue\n        # line_color='rgba(156, 165, 196, 1.0)'\n    )\n))\nfig.update_traces(mode='markers', marker=dict(line_width=1, symbol='circle', size=11))\n\n\nfig.update_layout(\n   title=\"Houseprice Index Gap\",\n    xaxis=dict(\n        showgrid=False,\n        showline=True,\n        linecolor='rgb(102, 102, 102)',\n        tickfont_color='rgb(102, 102, 102)',\n        showticklabels=True,\n        dtick=10,\n        ticks='outside',\n        tickcolor='rgb(102, 102, 102)',\n    ),\n    margin=dict(l=140, r=40, b=50, t=80),\n    legend=dict(\n        font_size=10,\n        yanchor='middle',\n        xanchor='right',\n    ),\n    width=800,\n    height=600,\n    paper_bgcolor='white',\n    plot_bgcolor='white',\n    hovermode='closest',\n)\nfig.show()\n","97722cb4":"# Aggregate data (comparing the first year with the last year)\n\ndf_f = df_f_d.copy()\ndf_f['Time_recent'] = df_f['Time']\ndf_f['houseprice_recent'] =df_f['houseprice']\ndf_f['houseprice_std'] =df_f['houseprice']\n\nDF_f = df_f.groupby('Country').agg({\n                    'Time' : ['first'],\n                    'Time_recent' : ['last'],\n                    'houseprice' : ['first'],\n                    'houseprice_recent' : ['last']})\nDF_f = DF_f.copy()\nDF_f['range_year'] = np.array(DF_f['Time_recent']) - np.array(DF_f['Time'])\nDF_f['range_price'] = np.array(DF_f['houseprice_recent']) - np.array(DF_f['houseprice'])\n\nDF_f.columns = DF_f.columns.droplevel(1) #drop multi-level index from columns\nDF_f = DF_f.sort_values(['houseprice_recent'], ascending = True)\nDF_f['CAGR'] = round(((DF_f.houseprice_recent\/DF_f.houseprice)**(1\/DF_f.range_year)-1)*100,1)\n","fb431ee2":"# Draw Dash Plot - Compare first year with last year\nfig = go.Figure()\n\n#Add Time 1\nfig.add_trace(go.Scatter(\n    x=DF_f['houseprice'],\n    y=DF_f.index,\n    name='Houseprice Index (past)',\n    marker=dict(\n        color='rgba(204, 204, 204, 0.95)',\n        line_color='rgba(217, 217, 217, 1.0)'\n    )\n))\n\n#Add Lines\nfor i in range(0,DF_f.shape[0]):\n    fig.add_shape(type=\"line\",\n                   x0 = DF_f.houseprice[i],\n                   y0 = i,\n                   x1 = DF_f.houseprice_recent[i],\n                   y1 = i,\n                   line = dict(color='rgba(204, 204, 204, 0.3)',width = 5))\n\n#Add Time 2\nfig.add_trace(go.Scatter(\n    x=DF_f['houseprice_recent'], \n    y=DF_f.index,\n    name='Houseprice Index (recent)',\n    marker=dict(\n        # color='rgba(114, 86, 245, 0.75)',   #Purple       \n        # line_color='rgba(114, 86, 245, 1.0)'\n\n        color='rgba(179, 166, 183, 1.0)',          #Tone Down Purple\n        line_color='rgba(179, 166, 183, 1.0)'\n\n        # color='rgba(156, 165, 196, 0.95)',          #Tone Down Blue\n        # line_color='rgba(156, 165, 196, 1.0)'\n    )\n))\nfig.update_traces(mode='markers', marker=dict(line_width=1, symbol='circle', size=11))\n\n\nfig.update_layout(\n   title=\"Houseprice Index Gap\",\n    xaxis=dict(\n        showgrid=False,\n        showline=True,\n        linecolor='rgb(102, 102, 102)',\n        tickfont_color='rgb(102, 102, 102)',\n        showticklabels=True,\n        dtick=10,\n        ticks='outside',\n        tickcolor='rgb(102, 102, 102)',\n    ),\n    margin=dict(l=140, r=40, b=50, t=80),\n    legend=dict(\n        font_size=10,\n        yanchor='middle',\n        xanchor='right',\n    ),\n    width=800,\n    height=600,\n    paper_bgcolor='white',\n    plot_bgcolor='white',\n    hovermode='closest',\n)\nfig.show()\n","f0eacbc1":"#Comparison between Index       \n\n###Filter Country\nV_F = ['Japan']     ##Country Filter\ndf_rent_f = df_rent[df_rent['Country'].isin(V_F)] \n\n#Create traces\nfig = make_subplots(rows=2, cols=1,\n                    shared_xaxes=True,\n                    vertical_spacing=0.1)\n# fig = go.Figure()\nfig.append_trace(go.Scatter(x=df_rent_f['Time'], y=df_rent_f['rentprice'],\n                    mode='lines',\n                    name='Rent Prices Index'),\n                    row=1, col=1)\nfig.append_trace(go.Scatter(x=df_rent_f['Time'], y=df_rent_f['houseprice'],\n                    mode='lines',\n                    name='House Prices Index'),\n                    row=1, col=1)\nfig.append_trace(go.Bar(x=df_rent_f['Time'], y= df_rent_f['population2'],\n                    yaxis='y2',\n                    name='Population'),\n                    row=2, col=1)\n\n\n#Update Layout\n\nfig.update_layout(\n    title=\"Houseprice Index vs Rentprice Index (Japan)\",  \n    xaxis=dict(\n        showgrid=False,\n        showline=True,\n        linecolor='rgb(102, 102, 102)',\n        tickfont_color='rgb(102, 102, 102)',\n        showticklabels=True,\n        dtick=5,\n        ticks='outside',\n        tickcolor='rgb(102, 102, 102)',\n    ),\n    xaxis2=dict(\n        showgrid=False,\n        showline=True,\n        linecolor='rgb(102, 102, 102)',\n        tickfont_color='rgb(102, 102, 102)',\n        showticklabels=True,\n        dtick=5,\n        ticks='outside',\n        tickcolor='rgb(102, 102, 102)',\n    ),\n    margin=dict(l=90, r=40, b=50, t=80),\n    legend=dict(\n        font_size=10,\n        yanchor='middle',\n        xanchor='right',\n    ),\n    width=800,\n    height=600,\n    paper_bgcolor='white',\n    plot_bgcolor='white',\n    hovermode='closest',\n)\n\nfig.show()  \n","a382d0c4":"#Rentratio vs Incomeratio\n###Filter Country\nV_F = ['United States', 'USA']     \ndf_rent_f = df_rent[df_rent['Country'].isin(V_F)] \ninterest_rate_f = interest_rate[interest_rate['Country.Code'].isin(V_F)].reset_index()  #reset index\ninterest_rate_f = interest_rate_f.loc[0][5:47]        #select data\n\n\n#  Create traces\nfig = make_subplots(rows=2, cols=1,\n                    shared_xaxes=True,\n                    vertical_spacing=0.1)\n# fig = go.Figure()\nfig.append_trace(go.Scatter(x=df_rent_f['Time'], y=df_rent_f['rentratio'],\n                    mode='lines',\n                    name='Price-to-Rent Ratio'),\n                    row=1, col=1)\nfig.append_trace(go.Scatter(x=df_rent_f['Time'], y=df_rent_f['incomeratio'],\n                    mode='lines',\n                    name='Price-to-Income Ratio'),\n                    row=1, col=1)\n#\nfig.append_trace(go.Scatter(x=df_rent_f['Time'], y=df_rent_f['houseprice'],\n                    mode='lines',\n                    name='Houseprice index'),\n                    row=1, col=1)\n\nfig.append_trace(go.Bar(x=interest_rate_f.index, y= interest_rate_f,\n                    yaxis='y2',\n                    name='Lending interest rate'),\n                    row=2, col=1)\n\n#Update Layout\n\nfig.update_layout(\n    title=\"Houseprice Indicators (USA)\",\n    xaxis=dict(\n        showgrid=False,\n        showline=True,\n        linecolor='rgb(102, 102, 102)',\n        tickfont_color='rgb(102, 102, 102)',\n        showticklabels=True,\n        dtick=5,\n        ticks='outside',\n        tickcolor='rgb(102, 102, 102)',\n    ),\n    xaxis2=dict(\n        showgrid=False,\n        showline=True,\n        linecolor='rgb(102, 102, 102)',\n        tickfont_color='rgb(102, 102, 102)',\n        showticklabels=True,\n        dtick=5,\n        ticks='outside',\n        tickcolor='rgb(102, 102, 102)',\n    ),\n    margin=dict(l=90, r=40, b=50, t=80),\n    legend=dict(\n        font_size=10,\n        # yanchor='top',\n        # y=1,\n        # xanchor='left',\n        # x=0.01\n        orientation=\"h\",\n        yanchor=\"bottom\",\n        y=1,\n        xanchor=\"right\",\n        x=0.93\n    ),\n    width=800,\n    height=600,\n    paper_bgcolor='white',\n    plot_bgcolor='white',\n    hovermode='closest',\n)\n\nfig.show()","45718201":"**2.2. Basic Line Chart**\n\n> Before drawing all 43 countries on the same plot, I divided groups by comparing its trends. While 'Increasing' group includes countries which show increasing curve before 2015 and even after 2015, 'Decreasing' group includes countries that have decreasing period before 2015.\n ![image.png](attachment:image.png)","05ee940b":"**2.2.1. Increasing Group**","ed315ca8":"---\n# **Table of Contents**\n\n\n1.  Introduction\n2.  Graphs  \n    2.1. Animated Bubble Chart  \n    2.2. Basic Line Chart  \n    2.3. Dumbbell Chart  \n    2.4. Subplots  \n3.  Additional Questions\n***","82fbe9f5":"**2.3.1. Increasing Group**","4a2aff60":"**2.3.2. Decreasing Group**","4b835f60":"**1.3. Import Packages and Data**","a2d0bbc9":"![image.png](attachment:image.png)\n\n","104b51ab":"**2.2.2.Decreasing Group**","92a42530":"# 1. Introduction\n\n**1.1. Why am I writing this notebook?**\n\n>  I was attracted to the Animated Bubble Chart of **Gapminder** (https:\/\/www.gapminder.org\/), which gives a 'snapshot' of global economic growth and relationship with life expectancy. Since it intuitively gives information by comparing the speed of the growth and movement of bubbles, I wanted to apply this visualization to more data and variables.   \n> \n>  Honestly, I am not very skilled in using python (since I have used R so far). However, while exploring with a myriad of graph options provided by Plotly package, I could customize graphs and draw what I wanted to see from the data. I wanted to organize my code on the notebook and share (I hope this notebook is helpful:) \n>  \n>  Moreover, the data that I will use is **'Global Houseprice Index Data (1980-2020)'**. Since I was about to commit 'Panic Buying' of the house in Korea, I needed to know more about the Real Estate world. I think house prices in Korea are in the middle of drastic changes and unpredictability. By analzing data and writing this notebook,I could prevent myself from jumping to the hasty decision and be more prudent. \n> \n\n**1.2. Data**\n\n> I found the data from OECD,IMF,and Worldbank websites.  \n   *  https:\/\/stats.oecd.org  \n   *  https:\/\/www.imf.org\/en\/Data  \n   *  https:\/\/databank.worldbank.org  \n>   \n> I could get the most recent data of 'Real House Prices Indices', 'GDP per capita', 'Interest Rate', 'Housing Price-to-income Ratio' etc. I filtered and combined necessary columns to csv file and uploaded here in this notebook!  ","ec5500cf":"**2.3. Dumbbell Chart**\n\n> To visualize house prices gaps between the past and the recent effectively, I adopted 'Dumbbell Chart' format. Those graphs show which countries experienced radical changes and have mostly increased since 2015. My codes are quite long because of adjusting sizes and colors. Please feel free to share some ideas to make it neat:) ","2fb9e54f":"# 2. Graphs\n\n\n**2.1. Animated Bubble Chart**\n\n\n> To get the snapshot of overall housing price changes among 43 countries, I draw an animated bubble chart below. \n* x axis = 'GDP per capita'  \n* y axis = 'Real House Prices Indices' (2015 = 100)  \n* Size of bubbles = 'Population'  ","00c8f5e4":"# 3. Additional Questions\n\n> After drawing all those graphs, I could observe some trends. However, to draw out meaningful insights from the data, I should conduct exploratory data analysis, implement modeling and take more precise look at the variables. \n\n> I would like to find out which signals we should look at to detect housing price bubbles. Even though the data that I have contains limited information about the housing markets, I could notice that it is critical to follow 'Housing Price-to-income' trend since it might respond faster in the market compared to other indices (Price-to-Rent ratio etc.). \n\n> I would like to explore more about this issue and I need more time:) If you want to give me comments and ideas, please feel free to share! Thank you for reading this notebook!\n\n![image.png](attachment:image.png)\n\n","80fa1f4c":"** 2.4. Subplots**\n\nTo visualize more variables, it is efficient to draw on the same plot using 'Subplots' from Plotly package. "}}