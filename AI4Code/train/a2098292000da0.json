{"cell_type":{"f096db49":"code","4be8380f":"code","40071383":"code","c57e413d":"code","9b1a234e":"code","7acc8458":"code","40952754":"code","3261cc4f":"code","20e94186":"code","f502f9d4":"code","7cc2a091":"code","066fc98e":"code","6f83ec6e":"code","aec85154":"code","ece08bd8":"code","dabd1e53":"code","28c256fb":"code","64f14fba":"code","91f9dd9d":"code","9b8dcb02":"code","d62e96e5":"code","c23b97c9":"code","5281eec7":"code","bcf14312":"code","c6d747ee":"code","90ac0b95":"code","08b285a5":"code","106580a1":"code","316611f4":"code","79029e3a":"code","b7e3c638":"code","7bb6f99f":"code","78ccf0d6":"code","8d183844":"code","bf776b87":"code","27148e75":"code","03a9e58f":"code","db101552":"code","e805fe61":"code","616fa254":"code","4056dff7":"code","765704a7":"code","e777ef03":"code","738dd422":"code","e6e99161":"code","8e9bb762":"code","65aadc9f":"code","c4cd040a":"code","10d460d2":"code","84212a48":"code","6fd8992d":"code","f59eae51":"code","8533a978":"code","36ac6a76":"code","d15ce77d":"code","261bad60":"code","d2b98074":"code","b137c404":"code","034a9c50":"code","a9696638":"code","e42a0b80":"code","b6a2835c":"code","c5214178":"code","b9ac0e2f":"code","bc59a8d2":"code","15d64f17":"code","ff43c87a":"code","fb23a281":"code","eeff33d7":"code","cd794843":"code","7fb4e726":"code","1d806a2e":"code","bb7b0123":"code","0f6a0cbd":"code","855dcd2c":"code","14e76287":"code","aceabbe7":"markdown","06ad8ba7":"markdown","363bc8cc":"markdown","10e8b1c5":"markdown","d02904db":"markdown","bc1a7935":"markdown","77683fb2":"markdown","724cde2b":"markdown","4f15fa4d":"markdown","724cdc26":"markdown","e4368988":"markdown","1f5f46fa":"markdown","353bbb49":"markdown","cccb5a50":"markdown","d04bc335":"markdown","e0d6c9ff":"markdown","68f2dd0d":"markdown","de587f9f":"markdown","8c81d1a4":"markdown","95008abb":"markdown","f8e5d681":"markdown","8257e325":"markdown","b528fcf1":"markdown","b5223825":"markdown","7b988288":"markdown","c5078e6e":"markdown","2633bbb9":"markdown","9fc076dd":"markdown","facf7e78":"markdown","23fe3b64":"markdown","4bc2921a":"markdown","d896a43d":"markdown","d88a231a":"markdown","ed5ee195":"markdown","62bcf803":"markdown","f76bfef5":"markdown","cd602a3f":"markdown","1ccce22f":"markdown","3e25cf4c":"markdown","83f6c051":"markdown","bdc8379e":"markdown","dfc7363c":"markdown","3ea853ee":"markdown","eab45276":"markdown","986cc0c6":"markdown","b51721ce":"markdown","8e758d1c":"markdown","4070d18b":"markdown","a13f0020":"markdown","0b08140f":"markdown","18d4594b":"markdown","02b3783d":"markdown","83335d38":"markdown","af720abb":"markdown","eab616e6":"markdown","f9bc7df1":"markdown","4ee4d7a1":"markdown","b270f312":"markdown","6618103f":"markdown","b844dbf6":"markdown","cab0163b":"markdown","ef83865f":"markdown","8c80de15":"markdown","3c3db61e":"markdown","88696b07":"markdown","602ce58c":"markdown","ac650370":"markdown","6f136cc6":"markdown","a4306544":"markdown","052ba067":"markdown","29687cfd":"markdown","5afa41ce":"markdown","815e17e8":"markdown","11add60a":"markdown","0f88f910":"markdown","79371fc6":"markdown","0c43c028":"markdown","62e5f06a":"markdown","616ddcc7":"markdown","d7441961":"markdown","b99f7771":"markdown","0e7872d5":"markdown","3e966547":"markdown","f9abe083":"markdown","6640a9db":"markdown","31853471":"markdown","9eeb0f6f":"markdown","4a2d35fe":"markdown"},"source":{"f096db49":"import matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.ticker as mticker\nfrom matplotlib.ticker import MaxNLocator\nfrom matplotlib.colors import LogNorm, Normalize\nfrom matplotlib.lines import Line2D\nfrom scipy import stats as st\nfrom scipy.stats import norm\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.colors import n_colors\nfrom catboost import CatBoostClassifier\nfrom sklearn import model_selection, tree, linear_model, metrics, ensemble, preprocessing, neighbors, naive_bayes, svm\nimport shap\nimport optuna\nimport warnings\nimport catboost as cb\nfrom catboost.utils import get_gpu_device_count\nfrom catboost import Pool\nwarnings.filterwarnings('ignore')\n\nimport sys\n# if 'BorutaShap' not in sys.modules:\n#     print('Installing BorutaShap')\n#     !{sys.executable} -m pip install -U BorutaShap --quiet #--default-timeout=100 -i https:\/\/pypi.tuna.tsinghua.edu.cn\/simple\n#     from BorutaShap import BorutaShap\n\nsns.set_theme()\nsns.set(rc = {'figure.figsize':(12,8)})\nsns.set_style(\"whitegrid\")\nsns.set_palette('pastel')\nplt.rcParams[\"figure.figsize\"] = (12, 8)\n\npercentiles = [0.25, 0.5, 0.75]\n\nrandom_state = 12345\n\nGPU_aval = get_gpu_device_count() > 0\nprint('GPU avaliable:', GPU_aval)\n#import os\n#or dirname, _, filenames in os.walk('\/kaggle\/input'):\n#   for filename in filenames:\n#        print(os.path.join(dirname, filename))","4be8380f":"dat = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndat.columns = [i.lower() for i in dat.columns]\ndat.head()","40071383":"passengerid = 'passengerid'\nsurvived = 'survived'\npclass = 'pclass'\nname = 'name'\nsex = 'sex'\nage = 'age'\nsibsp = 'sibsp'\nparch = 'parch'\nticket = 'ticket'\nfare = 'fare'\ncabin = 'cabin'\nembarked = 'embarked'\nfamily_name = 'family_name'\nfamily_number = 'family_number'\nfamily_size = 'family_size'\nmarital_status = 'marital_status'\nnickname = 'nickname'\ndeck = 'deck'\nroom = 'room'\nmale = 'male'\nfemale = 'female'\nfeatures = 'features'\ntargets = 'targets'\n\ndat['embarked'] = dat['embarked'].replace({'S': 'Southampton', 'C': 'Cherbourg', 'Q': 'Queenstown'})","c57e413d":"display(dat.info())\ndat.describe()","9b1a234e":"report = dat.isna().sum().to_frame().rename(columns = {0: 'missing_values'})\nreport['% of total'] = (100 * report['missing_values'] \/ dat.shape[0]).round(1)\ndisplay(report.sort_values(by = 'missing_values', ascending = False).style.background_gradient('coolwarm'))\n\ncols_with_misses = [i for i in dat.columns if dat[i].isnull().sum() > 0]\nsns.heatmap(dat[cols_with_misses].isnull(), cmap='cividis_r').set(title='Map of missing values in columns');","7acc8458":"tmp = dat.copy()\n\nfor col in tmp.columns:\n    missing = tmp[col].isnull()\n    num_missing = np.sum(missing)\n    if num_missing > 0:  \n        tmp['{}_ismissing'.format(col)] = missing\n\nismissing_cols = [col for col in tmp.columns if 'ismissing' in col]\ntmp['num_missing'] = tmp[ismissing_cols].sum(axis=1)\ntmp['num_missing'].value_counts().reset_index().sort_values(by='index').plot.bar(x='index', y='num_missing').set(\n    title='Number of rows with specific number of missing values', \n    xlabel='Number of missing values in a row', ylabel='Number of rows');","40952754":"display(sum(dat.duplicated()))\ndisplay(sum(dat.passengerid.duplicated()))\ndisplay(sum(dat.name.duplicated()))","3261cc4f":"len(dat.passengerid) - len(dat.passengerid.unique())","20e94186":"def pie_chart (df, col_name):\n    tmp = df[col_name].value_counts().sort_values()\n    tmp.plot(kind='pie', y=col_name, startangle=90)\n    tmp = pd.DataFrame([tmp, tmp\/tmp.sum()]).T\n    tmp.columns = ['Count', 'Part_%']\n    display(tmp.sort_values(by='Count', ascending=False))\n    print('Missing values:', df[col_name].isna().sum())","f502f9d4":"pie_chart(dat, survived)","7cc2a091":"pie_chart(dat, pclass)","066fc98e":"len(dat.name) - len(dat.name.unique())","6f83ec6e":"display(pd.concat([dat.name.head(5), dat.name.tail(5)]))","aec85154":"dat[family_name] = dat[name].str.split(',').str[0]\nprint(f'Total passengers = {len(dat[family_name])}, unique family names = {len(dat[family_name].unique())}')\nprint(f'Part of unique family names = {len(dat[family_name].unique()) \/ len(dat[family_name])}')\n\ndat[family_number] = dat[(dat.sibsp > 0) | (dat.parch > 0)].groupby(family_name)[family_name].transform('count')\ndat[family_number] = dat[family_number].fillna(1)\nsns.histplot(data=dat, x=family_number, binwidth=1);","ece08bd8":"dat[marital_status] = np.nan\nfor i in ['mr.', 'mrs.', 'miss', 'ms.']:\n    dat.loc[dat[name].str.lower().str.contains(' ' + i), marital_status] = i\ndat.loc[dat[sex] == male, marital_status] = dat.loc[dat[sex] == male, marital_status].fillna('mr.')\ndat.loc[dat[sex] == female, marital_status] = dat.loc[dat[sex] == female, marital_status].fillna('ms.')\ndat[marital_status].value_counts().sort_values().plot(kind='pie', startangle=90)\ndisplay(dat[marital_status].value_counts())","dabd1e53":"dat[dat[marital_status] == 'ms.']","28c256fb":"dat[nickname] = dat[name].str.extract(r'(\"[^\"]+\")')\ndisplay(dat[dat.nickname.notna()].info())\ndisplay(dat[dat.nickname.notna()].describe())\ndisplay(dat[dat.nickname.notna()][sex].value_counts())","64f14fba":"pie_chart(dat, sex)","91f9dd9d":"sns.histplot(data=dat, x=age, bins=np.arange(0, dat.age.max() + 1, 5))\ndat.age.describe(percentiles=percentiles)\nprint('Missing values:', dat[age].isna().sum())","9b8dcb02":"sns.histplot(data=dat, x=age, bins=np.arange(0, 16, 1));","d62e96e5":"tmp = dat[dat[age].isna()]\nprint(len(tmp) \/ len(dat))\ndisplay(tmp.head(7))","c23b97c9":"sns.histplot(data=dat, x=sibsp, bins=np.arange(0, dat.sibsp.max() + 1, 1))\ndisplay(dat.sibsp.describe(percentiles=[]))\ntmp = dat.pivot_table(index=sibsp, values=sex, aggfunc='count')\ntmp['%'] = tmp[sex] \/ tmp[sex].sum()\ntmp","5281eec7":"sns.histplot(data=dat, x=parch, bins=np.arange(0, dat.parch.max() + 1, 1))\ndisplay(dat.parch.describe(percentiles=[]))\ntmp = dat.pivot_table(index=parch, values=sex, aggfunc='count')\ntmp['%'] = tmp[sex] \/ tmp[sex].sum()\ntmp","bcf14312":"len(dat.ticket.unique()) \/ len(dat.ticket)","c6d747ee":"tmp = dat.sort_values(by=ticket)\ntmp = tmp[tmp[ticket].duplicated(keep=False)]\ntmp.head(10)","90ac0b95":"sns.histplot(data=dat, x=fare, bins=np.arange(0, dat.fare.max() + 1, 20))\ndat.fare.describe(percentiles=percentiles)","08b285a5":"dat[dat[fare] > 300].sort_values(by=fare, ascending=False)","106580a1":"dat[dat[fare] < 6].sort_values(by=fare, ascending=False)","316611f4":"dat.loc[dat[fare] < 6, fare] = np.nan","79029e3a":"print(f'Missing values {sum(dat.cabin.isna())}, % {round(sum(dat.cabin.isna())\/len(dat), 2)}')\nprint(f'Unique values {len(dat.cabin.unique())}, % of not missing {round(len(dat.cabin.unique()) \/ len(dat[~dat[cabin].isna()]), 2)}')\n\ndat[dat[cabin].isna()]","b7e3c638":"dat[deck] = dat.cabin.str.extract(r'([a-zA-Z ]+)')\ndat[room] = dat.cabin.str.extract(r'([0-9]+)').astype('float')","7bb6f99f":"tmp = dat.pivot_table(index=deck, values=survived, aggfunc='count').reset_index()\nsns.barplot(data=tmp, x=deck, y=survived);","78ccf0d6":"sns.histplot(data=dat, x=room, binwidth=5);","8d183844":"sns.catplot(data=dat.sort_values(by=deck), x=deck, y=room, hue=pclass);","bf776b87":"pie_chart(dat, embarked)","27148e75":"dat[dat[embarked].isna()]","03a9e58f":"tickets = dat[dat[embarked].isna()][ticket]\ncabins = dat[dat[embarked].isna()][cabin]\n\ndat[(dat[ticket].isin(tickets)) | (dat[cabin].isin(cabins))]","db101552":"dat['tmp'] = dat.ticket.replace('[^0-9]+', '', regex=True).replace('[^0-9]?', '', regex=True).replace('', np.nan).astype('float')\ndat['tmp'] = np.abs(dat['tmp'] - 113572)\ndisplay(dat.sort_values(by='tmp').head(10))\ndat = dat.drop(columns='tmp');","e805fe61":"dat['tmp'] = dat.ticket.replace('[^0-9]+', '', regex=True).replace('[^0-9]?', '', regex=True).replace('', np.nan).astype('float')\ndat['tmp'] = np.abs(dat[fare] - 80)\ndisplay(dat.sort_values(by='tmp').head(10))\ndat = dat.drop(columns='tmp');","616fa254":"sns.pairplot(data=dat.drop(columns=passengerid), hue=survived, kind='scatter', plot_kws={'alpha': 0.4});","4056dff7":"tmp = dat.pivot_table(index=pclass, columns=sex, values=survived)\nax = sns.heatmap(data=tmp,square=True, annot=True, fmt='.0%', annot_kws={'size': 15}, cmap=\"Greens\").set(title='Percentage of survivors', ylabel='Passenger class')","765704a7":"tmp = dat.pivot_table(index=[pclass, sex], values=survived, aggfunc='count').reset_index().sort_values(by=[sex, pclass], ascending=False)\nax = sns.barplot(data=tmp, x=pclass, y=survived, hue=sex).set(title='Passenger number in classes', xlabel='Passenger class', ylabel='Count')","e777ef03":"\nfig = px.scatter(dat,\n                x=age, y=fare,\n                color=dat[pclass].astype('category'),\n                size=(dat[survived] + 1) ** 2,\n                size_max=10,\n                color_discrete_sequence=px.colors.qualitative.Plotly,\n                hover_data=dat.columns,\n                 hover_name=survived,\n                 opacity=0.7,\n                 log_y=True,\n                 marginal_y='rug',\n                 marginal_x='histogram',\n                 labels=dict(color = pclass)\n                )\nfig.update_layout()\n#fig.update_layout(legend= {'itemsizing': 'trace'})\nfig.show()","738dd422":"sns.set_style(\"whitegrid\")\n\ng = sns.relplot(data=dat, x=age, y=fare, hue=pclass, size=survived, sizes=(200, 30), palette='muted', alpha=0.7, height=8, aspect=15\/10, linewidth=1.25)#, legend=False)\ng.set(yscale=\"log\")\ng.set(ylim=(5,550))\ng.set(xlim=(-1,81))\ng.ax.yaxis.grid(True, \"minor\", linewidth=.75)\ng.ax.yaxis.set_minor_formatter(mticker.ScalarFormatter())\ng.ax.yaxis.set_major_formatter(mticker.ScalarFormatter())\ng.set(title='Passengers age, fare, class and survived status');\ng._legend.texts[0].set_text('Class')\ng._legend.texts[4].set_text('Survived')\ng._legend.set_bbox_to_anchor([1.01, 0.5])\nsns.despine(left=True, bottom=True)","e6e99161":"fig, ax = plt.subplots(1, 2, figsize=(15,7))\nfig.suptitle(\"Passenger age distribution for different classes\", fontsize=16)\nsns.violinplot(ax=ax[0], data=dat, x=pclass, y=age, hue=sex, split=True, inner=\"quartile\", palette='pastel').set(xlabel='Class', ylabel='Age')\nsns.histplot(ax=ax[1], data=dat, x=age, hue=pclass, palette='muted', multiple='stack').set(xlabel='\u0412\u043e\u0437\u0440\u0430\u0441\u0442', ylabel='Count')\nprint('Mean age of classes:')\ndat.pivot_table(index=pclass, columns=sex, values=age).round(1)","8e9bb762":"fig, ax = plt.subplots(4, 2, figsize=(10,18))\nfig.suptitle(\"Survival rate distribution\", fontsize=16)\nplt.tight_layout(pad=3)\nplt.subplots_adjust(wspace=0)\n\nmax_age = 65\nage_step = 4.99999\nbins = np.arange(0, max_age + 1, age_step)\n\nfor pcl in [0, 1, 2, 3]:\n    if pcl == 0:\n        tmp_dat = dat.copy()\n    else:\n        tmp_dat = dat[dat[pclass] == pcl].copy()\n    \n    ax1 = ax[pcl, 0]\n    ax2 = ax[pcl, 1]\n    \n    g_male = sns.histplot(ax=ax1, data=tmp_dat[(dat.sex == male)].sort_values(by=survived).replace({survived: {0: 'no', 1: 'yes'}}), y=age, hue=survived, palette='Paired', bins=bins, multiple='stack', **dict(edgecolor=\"black\", linewidth=1))\n    ax1.set(ylabel='Age', xlabel='')\n    ax1.invert_xaxis()\n    max_val = max(list(ax1.get_xlim())) * 1.1\n    ax1.set(xlim=(max_val, 0))\n\n    g_female = sns.histplot(ax=ax2, data=tmp_dat[(dat.sex == female)].sort_values(by=survived).replace({survived: {0: 'no', 1: 'yes'}}), y=age, hue=survived, palette='Oranges', bins=bins, multiple='stack', **dict(edgecolor=\"black\", linewidth=1))\n    ax2.set(yticklabels=[], ylabel='', xlabel='Count')\n    if pcl == 0:\n        title='All classes'\n    else: \n        title='Class {}'.format(pcl)\n    ax2.set_title(title, x=0.00, y=1.08, pad=-14, fontsize=16)\n    ax2.set(xlim=(0, max_val))\n    ax2.xaxis.set_label_coords(.00, -0.08)\n    \n    if pcl == 0:\n        ax1.get_legend().set_title(\"Men: survived\")\n        ax2.get_legend().set_title(\"Women: survived\")\n    else:\n        ax1.legend().set_visible(False)\n        ax2.legend().set_visible(False)\n\n    tmp_dat['age_cat'] = pd.cut(tmp_dat[age], bins=bins, labels=bins[:-1])\n    tmp = tmp_dat[~dat.age.isna()].pivot_table(index='age_cat', columns=sex, values=survived, aggfunc=['mean', 'count'])\n    tmp.columns = [i[0] + '_' + i[1] if i[0] != 'mean' else i[1] for i in tmp.columns]\n    tmp_dat = tmp_dat.drop(columns='age_cat')\n\n    for i, row in tmp.iterrows():\n        if row[male] >= 0:\n            ax1.text(row['count_male'] + max_val \/ 100, i + age_step \/ 2, '{:.0%}'.format(row[male]), fontdict=dict(fontsize=13, color='black', verticalalignment='center', horizontalalignment='right'))\n        if row[female] >= 0:\n            ax2.text(row['count_female'] + max_val \/ 100, i + age_step \/ 2, '{:.0%}'.format(row[female]), fontdict=dict(fontsize=13, color='black', verticalalignment='center', horizontalalignment='left'))\n            \nplt.savefig('Titanic_survival.png')","65aadc9f":"tmp = dat[dat[age].notna()]\ntmp['age_int'] = (tmp[age] \/ 3).astype('int16') * 3\nsns.lineplot(data=tmp, x='age_int', y=survived, hue=pclass, palette='pastel');","c4cd040a":"sns.boxplot(data=dat, x=pclass, y=fare, hue=sex, palette='pastel').set(xlabel='Class', ylim=(0,300))\nprint('Fare of classes:')\ntmp = dat.pivot_table(index=[pclass, sex], values=fare, aggfunc=['min', 'median', 'mean', 'max']).round(0).astype('int')\ntmp.columns = [i[0] for i in tmp.columns]\ntmp","10d460d2":"dat['age_cat'] = pd.cut(dat[age], 5, labels=np.linspace(dat[age].min(), dat[age].max(), 5))\nsns.lineplot(data=dat, x='age_cat', y=fare, hue=pclass, palette='pastel').set(xlabel='age')\ndat = dat.drop(columns='age_cat')","84212a48":"rows = len(dat.pclass.unique())\ncols = len(dat.sex.unique())\n\nfig, ax = plt.subplots(rows, cols, figsize=(12,12))\nfig.suptitle(\"Passenger fare distribution for different classes\", fontsize=16)\nplt.tight_layout(pad=2)\nplt.subplots_adjust(hspace=0.5)\n\nfor i, sex_val in enumerate(sorted(dat.sex.unique())):\n    for j, class_val in enumerate(sorted(dat.pclass.unique())):\n        g = sns.boxplot(ax=ax[j, i],\n            data=dat[(dat.pclass == class_val) & (dat.sex == sex_val) & (dat.age >= 18)],\n            x=survived, y=fare, palette='pastel',\n            showfliers = False)\n        g.set(title=f'Class {class_val}, {sex_val}')\n        \n        sns.stripplot(ax=ax[j, i],\n            data=dat[(dat.pclass == class_val) & (dat.sex == sex_val) & (dat.age >= 18)],\n            x=survived, y=fare, palette='muted', s=7, jitter=0.1, alpha=0.5, **dict(edgecolor=\"black\", linewidth=1))","6fd8992d":"fig, ax = plt.subplots(1, 2, figsize=(8,8))\nfig.suptitle(\"Mean and median fare for passenger groups\", fontsize=16)\nplt.subplots_adjust(wspace=0.7)\n\ntmp = dat[dat.age >= 18].pivot_table(index=[pclass, sex], values=fare, columns=survived, aggfunc=['mean', 'median'])#.reset_index()\ntmp.columns = ['mean: dead', 'mean: alive', 'median: dead', 'median: alive']\ntmp = tmp.reset_index()\ntmp['group'] = tmp[sex] + ' of ' + tmp[pclass].apply(str) + ' class' \ntmp = tmp.set_index('group')\ntmp = tmp[['mean: dead', 'mean: alive', 'median: dead', 'median: alive']]\nvmin = tmp.min().min()\nvmax = tmp.max().max()\n\nfor i, group_value in enumerate([['mean: dead', 'mean: alive'], ['median: dead', 'median: alive']]):\n    g = sns.heatmap(ax=ax[i],\n                data=tmp[group_value].rename(columns={group_value[0]: 'dead', group_value[1]: 'alive'}), \n                annot=True, \n                fmt='.0f', \n                annot_kws={'size': 20},\n                cmap='Blues', \n                norm=LogNorm(),\n                cbar=False,\n                vmin=vmin, vmax=vmax,\n                cbar_kws={\"format\": mticker.ScalarFormatter()})\n    g.set(title=group_value[0].split(':')[0] + ' fare')\n    g.set(ylabel='')","f59eae51":"dat['missing_cabin'] = 'not-missing'\ndat.loc[dat.cabin.isna(), 'missing_cabin'] = 'missing'\n\nax = sns.histplot(data=dat, y=pclass, hue='missing_cabin', multiple='stack', palette='RdYlGn', bins=np.arange(0.5, 3.6, 1), shrink=.6)\nax.xaxis.set_major_locator(MaxNLocator(integer=True))\n\ndat = dat.drop(columns='missing_cabin')\n\ntmp = dat.copy().fillna('temp_123')\ntmp = tmp.pivot_table(index=pclass, values=cabin, aggfunc=['count', lambda x: x[x == 'temp_123'].count()])\ntmp.columns = ['total', 'missing']\ntmp['present'] = tmp.total - tmp.missing\nfor i in ['present', 'missing']:\n    tmp[i + '_%'] = (tmp[i] \/ tmp.total).round(2)\ntmp","8533a978":"display(dat[((dat[deck].isna()) | (dat[room].isna())) & (~dat[cabin].isna())])\nprint('\\nPassengers on deck T:')\ndat[dat.deck == 'T']","36ac6a76":"fig = plt.figure(figsize=(8,10))\ntmp = dat[(dat.pclass == 1) & (dat.deck != 'T')].sort_values(by=[deck]).sort_values(by=[deck])\ng1 = sns.stripplot(data=tmp[tmp.survived == 1],\n            x=deck, y=room, hue=sex, \n            s=14,\n            palette='pastel', alpha=0.5, **dict(edgecolor=\"white\", linewidth=1), jitter=0)\ng2 = sns.stripplot(data=tmp[tmp.survived == 0],\n            x=deck, y=room, hue=sex, \n            s=7, \n            palette='muted', alpha=1, **dict(edgecolor=\"white\", linewidth=1), jitter=0)\ng.set(title='Passenger rooms distribution on decks for class 1');\n\nhandles, labels = g1.get_legend_handles_labels()\n\nlegend_elements = [Line2D([0], [0], marker='o', color='w', label='survived',\n                          markerfacecolor='gray', markersize=14),\n                   Line2D([0], [0], marker='o', color='w', label='dead',\n                          markerfacecolor='gray', markersize=7)]\n\nplt.legend(handles=handles[0:2] + legend_elements);","d15ce77d":"fig = plt.figure(figsize=(6,10))\ntmp = dat[(dat.pclass == 1)]\n#tmp = tmp[tmp.age >= 18]\ntmp.loc[tmp.deck == 'T', deck] = np.nan\ntmp[deck] = tmp[deck].fillna('unknown')\ntmp1 = tmp.pivot_table(index=deck, columns=sex, values=survived)\n\nsns.heatmap(data=tmp1,\n                annot=True, fmt='.0%', annot_kws={'size': 20},\n                cmap='Greens', \n                cbar=False).set(title='Survival rate of 1st class on decks')\nplt.yticks(rotation=0)     \n\ntmp.pivot_table(index=deck, columns=sex, values=survived, aggfunc=['mean', 'count'])","261bad60":"fig, ax = plt.subplots(1, 2, figsize=(6,8))\nfig.suptitle(\"Mean and median fare for decks (only 1st class)\", fontsize=16)\nplt.subplots_adjust(wspace=0.7)\n\ntmp = dat[(dat.pclass == 1)]\ntmp.loc[tmp.deck == 'T', deck] = np.nan\ntmp[deck] = tmp[deck].fillna('unknown')\ntmp = tmp.pivot_table(index=deck, values=fare, columns=sex, aggfunc=['mean', 'median'])\ntmp.columns = ['mean: female', 'mean: male', 'median: female', 'median: male']\nvmin = tmp.min().min()\nvmax = tmp.max().max()\n\nfor i, group_value in enumerate([['mean: female', 'mean: male'], ['median: female', 'median: male']]):\n    g = sns.heatmap(ax=ax[i],\n                data=tmp[group_value].rename(columns={group_value[0]: 'female', group_value[1]: 'male'}), \n                annot=True, \n                fmt='.0f', \n                annot_kws={'size': 20},\n                cmap='Blues', \n                norm=LogNorm(),\n                cbar=False,\n                vmin=vmin, vmax=vmax,\n                cbar_kws={\"format\": mticker.ScalarFormatter()})\n    g.set(title=group_value[0].split(':')[0] + ' fare')\n    g.set(ylabel='')\n    g.set_yticklabels(g.get_yticklabels(), rotation = 0)#, fontsize = 8)   ","d2b98074":"tmp = dat.pivot_table(index=embarked, columns=pclass, values=survived, aggfunc='count')\ntmp = tmp.reindex(sorted(tmp.columns, reverse=True), axis=1)\n\ng = tmp.plot(kind='bar', stacked=True)\ng.set_xticklabels(g.get_xticklabels(), rotation = 0)\ng.set(ylabel='Passenger count')\ng.set(title='Passenger class distribution from different ports of embarkation')\n\nhandles, labels = g.get_legend_handles_labels()\n\nl = plt.legend(handles=handles[-1::-1], labels=labels[-1::-1], title='Passenger\\nclass');\nl.get_title().set_ha(\"center\")","b137c404":"tmp = dat.pivot_table(index=[embarked, pclass, sex], values=survived, aggfunc=['mean', 'count'])\ntmp.columns = ['surv_rate', 'survived']\ntmp = tmp.reset_index()\ng = sns.FacetGrid(tmp, row=sex, col=pclass, margin_titles=True)\ng.map(sns.barplot, 'surv_rate', embarked)\ng.fig.subplots_adjust(top=0.9)\ng.fig.suptitle('Survival rate for different ports');","034a9c50":"tmp = dat.pivot_table(index=[sibsp, pclass, sex], values=survived, aggfunc=['mean', 'count'])\ntmp.columns = ['surv_rate', 'survived']\ntmp = tmp.reset_index()\ng = sns.FacetGrid(tmp, row=sex, col=pclass, margin_titles=True)\ng.map(sns.barplot, sibsp, 'surv_rate')\ng.fig.subplots_adjust(top=0.9)\ng.fig.suptitle('Survival rate for different numbers of siblings\/spouses');","a9696638":"tmp = dat.pivot_table(index=[parch, pclass, sex], values=survived, aggfunc=['mean', 'count'])\ntmp.columns = ['surv_rate', 'survived']\ntmp = tmp.reset_index()\ng = sns.FacetGrid(tmp, row=sex, col=pclass, margin_titles=True)\ng.map(sns.barplot, parch, 'surv_rate')\ng.fig.subplots_adjust(top=0.9)\ng.fig.suptitle('Survival rate for different number of parents\/children');","e42a0b80":"dat['family_size'] = dat[parch] + dat[sibsp]\ntmp = dat.pivot_table(index=[family_size, pclass, sex], values=survived, aggfunc=['mean', 'count'])\ntmp.columns = ['surv_rate', 'survived']\ntmp = tmp.reset_index()\ng = sns.FacetGrid(tmp, row=sex, col=pclass, margin_titles=True)\ng.map(sns.barplot, family_size, 'surv_rate')\ng.fig.subplots_adjust(top=0.9)\ng.fig.suptitle('Survival rate for different number of parents\/children');","b6a2835c":"test_pass_id = False\ndef load_dataset(verbose=False, fare_low_limit=6, fare_high_limit=200, children_cats=1, age_float=False):\n    global test_pass_id\n    train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\n    train.columns = [i.lower() for i in train.columns]\n    test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\n    test.columns = [i.lower() for i in test.columns]\n    test_pass_id = test['passengerid']\n    dataset = pd.concat([train, test])\n    dataset[deck] = dataset.cabin.str.extract(r'([a-zA-Z ]+)')\n    dataset[deck] = dataset[deck].fillna('Unknown')\n    dataset[family_size] = dataset[sibsp] + dataset[parch]\n    dataset[embarked] = dataset[embarked].fillna(dataset[embarked].value_counts().index[0])\n    \n    dataset['age_float'] = dataset[age]\n    dataset[age] = 'unknown'\n    if children_cats == 1:\n        dataset.loc[dataset['age_float'] < 16, age] = 'child'\n    if children_cats == 2:\n        dataset.loc[dataset['age_float'] < 16, age] = 'child'\n        dataset.loc[dataset['age_float'] < 10, age] = 'small child'\n    dataset.loc[dataset['age_float'] >= 16, age] = 'adult'\n\n    dataset[dataset[fare] < fare_low_limit][fare] = np.nan\n    fare_to_fill = dataset.groupby([pclass, sex])[fare].transform('median')\n    dataset[fare] = dataset[fare].fillna(fare_to_fill)\n    dataset.loc[dataset[fare] > fare_high_limit, fare] = fare_high_limit\n\n    dataset = dataset.drop(columns=[name, ticket, cabin, passengerid, sibsp, parch])\n    if age_float:\n        dataset = dataset.drop(columns=[age])\n    else:\n        dataset = dataset.drop(columns=['age_float'])\n    cat_list = [pclass, sex, age, embarked, deck]\n    for i in [a for a in cat_list if a in dataset.columns.tolist()]:\n        dataset[i] = dataset[i].astype('O')\n   \n    if verbose:\n        display(dataset)\n        dataset.info()\n    return dataset\n\na = load_dataset(verbose=True)","c5214178":"def objective(trial, train, n_splits=6, test_size=0.2, random_state=1, random_state_bonus=1):\n    \n    # indices of train dataframe columns with 'object' type\n    cat_features = []\n    for i, t in enumerate(train[features].dtypes):\n        cond = ('object' in str(t))\n        if cond: cat_features.append(i)\n    cat_features = tuple(cat_features)\n    \n    param = {\n        #\"objective\": trial.suggest_categorical(\"objective\", [\"Logloss\", \"CrossEntropy\"]),\n        \"objective\": trial.suggest_categorical(\"objective\", [\"CrossEntropy\"]),\n        \"colsample_bylevel\": trial.suggest_float(\"colsample_bylevel\", 0.01, 0.1),\n        'learning_rate': trial.suggest_float(\"learning_rate\", 0.02, 0.95),\n        'l2_leaf_reg': trial.suggest_float(\"l2_leaf_reg\", 0.00001, 3000),\n        \"depth\": trial.suggest_int(\"depth\", 6, 12),\n        'iterations': trial.suggest_int(\"iterations\", 200, 1000),\n        #\"boosting_type\": trial.suggest_categorical(\"boosting_type\", [\"Ordered\", \"Plain\"]),\n        \"boosting_type\": trial.suggest_categorical(\"boosting_type\", [\"Plain\"]),\n        \"bootstrap_type\": trial.suggest_categorical(\"bootstrap_type\", [\"MVS\"]),\n        #\"used_ram_limit\": \"3gb\",\n        'logging_level': trial.suggest_categorical('logging_level', ['Silent']),\n        'cat_features': trial.suggest_categorical('cat_features', [cat_features]),\n        'random_seed': trial.suggest_categorical(\"random_seed\", [random_state + random_state_bonus]),\n        'early_stopping_rounds': trial.suggest_categorical('early_stopping_rounds', [20]),\n    }\n\n    model = cb.CatBoostClassifier(**param)\n\n    # we'll use standart sklearn cross_val_score function instead of catboost cv\n    cv = model_selection.StratifiedShuffleSplit(n_splits=n_splits, test_size=test_size, random_state=random_state)\n    mean_cv_score = model_selection.cross_val_score(model, \n                                                    train[features],\n                                                    train[targets], \n                                                    cv=cv, n_jobs=-1, scoring='accuracy', error_score=\"raise\")\n    # requiered for stopping calculations for 'bad' hyperparameters\n    if trial.should_prune():\n        raise optuna.TrialPruned()\n            \n    return mean_cv_score.mean()\n\n\ndef one_study(dataset, result, n_trials=10000, timeout=60, plots=False, n_splits=6, test_size=0.2, random_state=1, random_state_bonus=1, text_explanation='_'):\n    # prepare features and targets\n    train_df = dataset[dataset[survived].notna()]\n    test_df = dataset[dataset[survived].isna()]\n    train = {}\n    test = {}\n    train[features] = train_df.drop(columns=survived)\n    train[targets] = train_df[survived].astype('category')\n    test[features] = test_df.drop(columns=survived)\n\n    # optuna magic\n    study = optuna.create_study(direction=\"maximize\", study_name='Catboost optimizer',\n                               pruner=optuna.pruners.SuccessiveHalvingPruner(),\n                               )\n    study.optimize(lambda trial: objective(trial, train, n_splits=n_splits, test_size=test_size, random_state=random_state, random_state_bonus=random_state_bonus), \n                   n_trials=n_trials, \n                   timeout=timeout,\n                   show_progress_bar=True\n                  )\n\n    print(\"Number of finished trials: {}\".format(len(study.trials)))\n    print(\"Best trial:\")\n    trial = study.best_trial\n    parameters = trial.params\n    print(\"  Value: {}\".format(trial.value))\n    print(\"  Params: \", parameters)\n\n    if plots:\n        # select only varying parameters for plotting\n        full_param_series_list = []\n        for i in range(len(study.trials)):\n            full_param_series_list.append(pd.Series(study.trials[i].params))\n        param_df = pd.DataFrame(full_param_series_list)\n        interestring_params = []\n        for c in param_df.columns.tolist():\n            if len(param_df[c].unique().tolist()) > 1:\n                interestring_params.append(c)\n        \n        # all good plots\n        fig_list = [\n            optuna.visualization.plot_optimization_history(study),\n            optuna.visualization.plot_slice(study, params=interestring_params),\n            optuna.visualization.plot_parallel_coordinate(study, params=interestring_params),\n            optuna.visualization.plot_param_importances(study, params=interestring_params),\n            optuna.visualization.plot_param_importances(\n                study, target=lambda t: t.duration.total_seconds(), target_name=\"duration\", params=interestring_params\n            )\n        ]\n        # show them and set adequate size\n        for fig in fig_list:\n            fig.update_layout(width=1000)\n            fig.show()\n    \n    model = cb.CatBoostClassifier(**parameters)\n    pool = cb.Pool(data=train[features], label=train[targets], cat_features=parameters['cat_features'])\n    model.fit(pool)\n    feature_importances = model.get_feature_importance(data=pool,\n                                 type='PredictionValuesChange',\n                                prettified=True,\n                                )\n    print(feature_importances)\n    \n    # save all important stuff as a new line in result-dataframe\n    result.loc[len(result)]=[trial.value, dataset, text_explanation, parameters]\n    return study","b9ac0e2f":"result = pd.DataFrame(columns=['cv_score', 'dataset', 'text_explanation', 'best_params'])\nn_trials = 50\ntimeout = 12000","bc59a8d2":"optuna.logging.set_verbosity(optuna.logging.WARNING)\n\ndataset = load_dataset()\n\ns = one_study(dataset, result,\n              n_trials=n_trials, \n              timeout=timeout, \n              plots=True, \n              random_state=random_state, random_state_bonus=1,\n              text_explanation='age_cat')\nresult","15d64f17":"dataset = load_dataset(age_float=True)\n\ns = one_study(dataset, result,\n              n_trials=n_trials, \n              timeout=timeout, \n              random_state=random_state, random_state_bonus=1,\n              text_explanation='age_float')\nresult","ff43c87a":"dataset = load_dataset()\ndataset = dataset.drop(columns=[fare])\n\ns = one_study(dataset, result,\n              n_trials=n_trials, \n              timeout=timeout, \n              random_state=random_state, random_state_bonus=1,\n              text_explanation='no_fare')\nresult","fb23a281":"dataset = load_dataset()\ndataset = dataset.drop(columns=[embarked])\ns = one_study(dataset, result,\n              n_trials=n_trials, \n              timeout=timeout, \n              random_state=random_state, random_state_bonus=1,\n              text_explanation='no_embark')\nresult","eeff33d7":"dataset = load_dataset(children_cats=2)\ns = one_study(dataset, result,\n              n_trials=n_trials, \n              timeout=timeout, \n              random_state=random_state, random_state_bonus=1,\n              text_explanation='two_children_age_cats')\nresult","cd794843":"dataset = load_dataset()\ndataset = dataset.drop(columns=[age])\ns = one_study(dataset, result,\n              n_trials=n_trials, \n              timeout=timeout, \n              random_state=random_state, random_state_bonus=1,\n              text_explanation='no_age')\nresult","7fb4e726":"dataset = load_dataset()\ndataset = dataset.drop(columns=[deck])\ns = one_study(dataset, result,\n              n_trials=n_trials, \n              timeout=timeout, \n              random_state=random_state, random_state_bonus=1,\n              text_explanation='no_deck')\nresult","1d806a2e":"dataset = load_dataset()\ndataset = dataset.drop(columns=[deck, embarked])\ns = one_study(dataset, result,\n              n_trials=n_trials, \n              timeout=timeout, \n              random_state=random_state, random_state_bonus=1,\n              text_explanation='no_deck_embark')\nresult","bb7b0123":"dataset = load_dataset()\ndataset = dataset.drop(columns=[deck, fare])\ns = one_study(dataset, result,\n              n_trials=n_trials, \n              timeout=timeout, \n              random_state=random_state, random_state_bonus=1,\n              text_explanation='no_deck_fare')\nresult","0f6a0cbd":"dataset = load_dataset()\ndataset = dataset.drop(columns=[embarked, fare])\ns = one_study(dataset, result,\n              n_trials=n_trials, \n              timeout=timeout, \n              random_state=random_state, random_state_bonus=1,\n              text_explanation='no_embark_fare')\nresult","855dcd2c":"best_result = result.sort_values(by='cv_score', ascending=False).reset_index(drop=True).head(1)\nparameters = best_result.loc[0, 'best_params']\ndataset = best_result.loc[0, 'dataset']\nprint('Best result on', best_result.loc[0, 'text_explanation'])\n\ntrain_df = dataset[dataset[survived].notna()]\ntest_df = dataset[dataset[survived].isna()]\ntrain = {}\ntest = {}\ntrain[features] = train_df.drop(columns=survived)\ntrain[targets] = train_df[survived].astype('category')\ntest[features] = test_df.drop(columns=survived)\n\nmodel = cb.CatBoostClassifier(**parameters)\nmodel.fit(train[features], train[targets])\ntest_predict = model.predict(test[features])","14e76287":"sample_submission = pd.DataFrame()\nsample_submission['PassengerId'] = test_pass_id\nsample_submission[\"Survived\"] = test_predict\nsample_submission.to_csv(\"submission.csv\", index=False)\nprint(\"Your submission was successfully saved!\")\nsample_submission['Survived'].value_counts()","aceabbe7":"# TITANIC - exploratory data analysis + catboost + optuna\n\nMotivation:\n- get aquainted with titanic dataset\n- learn new visualization tricks\n- learn using catboost with optuna\n\nPlan:\n- import dataset\n- read dataset thechical characteristics\n- study each feature individually\n- try to split complex features into simple ones\n- fill missing values (gently)\n- study features in groups, look for patterns\n- make qualitative assessment of features for applicability for use in machine learning\n- define functions for ML and hyperparameter tuning\n- manually select features and check prediction accuracy with cross-val\n- submit result with highest accuracy on c-v","06ad8ba7":"Ok, here we can see that all 'good' models give approximately same results - about 83%+.\n\nNow we'll choose the model with the highest score and use it to predict target for test.","363bc8cc":"Probably there is a way to get a bit higher score with ensembles and with different random seed, but I'm doing this for studying and not for the score.\n\nHope you liked it!","10e8b1c5":"In general for all classes:\n- in every age group, women were more likely to be saved\n- among children, this difference is minimal\n- on average, children are more likely to be saved than adults\n- young men (15-25 years old) and old men survived least of all (although there are not enough statistics there)\n- Most of all women aged over 50 survived\n\nAnalysis by class:\n- in classes 1 and 2, the vast majority of women were saved\n- in classes 1 and 2 there were very few children and a quite a lot of old people\n- there were very few people over 50 in class 3\n- in the 2nd and 3rd classes, very few men were saved","d02904db":"There are 53 nicknames. It seems these people don't really stand out - they are from different classes, they have different sex (although more women) and overall same survival rate (a bit higher, but again - there are more women in this list).","bc1a7935":"And again - most were without relatives of older\/younger generation.","77683fb2":"# Pre-processing","724cde2b":"As we have already seen, passenger class and sex was very important for survival. We have decided to analyze only class 1 rooms.\n\nLet's look at passengers distribution between decks and rooms.","4f15fa4d":"This is really strange.\n\n- all true zero values embarked in one port - Southampton\n- all of them are men without relatives\n- almost all of them didn't survive\n- there are lots of missing values in there (much more than average 20% of dataset)\n- there are people with strange tickets \"LINE\"\n- there are people of all 3 classes in this list. So it seems there were free 1st class tickets. Niiiiice!\n\nThese values clearly have different origin than others. As they might mess up our plots, we will remove them.","724cdc26":"### Name\n\nLet's check if all values are unique.","e4368988":"# EDA results\n\nLets sum up our discoveries concerning importance of given features:\n\n- PassengerId - useless\n- Pclass - super useful. Shoud be categorical, not numerical or even ranged in my opinion\n- Name - full name including some titles. There is lots of information there, but it doesn't seem to have any predictive power\n- Sex - super useful (pun intended)\n- Age - useful, especially for children (higher survival rate). Problem: lots of missing values! Probably should be converted into categories like: child, adult, unknown\n- SibSp + Parch - somewhat useful, not explicit. Maybe shoud be aggregated into one feature 'family_size'\n- Ticket - seems to be useless\n- Fare - maybe useful, maybe not. Should be tested\n- Cabin - lots of missimg values. Consists of deck (letter) and room number. Room number is useless, deck letter probably can be useful\n- Embarked - maybe useful, maybe not. Should be tested. There are a few missing values, can be safely filled with most popular value","1f5f46fa":"### Ticket","353bbb49":"Let's look at very small values.","cccb5a50":"Same plot in seaborn.","d04bc335":"- on average in all classes, women are several years younger than men\n- the more expensive the class, the higher the average age there is and the fewer children\n- in 1st class there are very few passengers under 15 years old","e0d6c9ff":"Surprisingly, female tickets are consistently more expensive than male tickets.\n\nAnd only the 2nd class, as usual, breaks the pattern.","68f2dd0d":"### Survived","de587f9f":"### Survival rate in classes and sexes","8c81d1a4":"The survival rate for women is much higher.\nAlso the survival rate for the 1st class is higher.\n2nd class is strange - women survival rate is close to 1st class, but men survival rate is close to 3rd.\n\nLet's see how many men and women were in classes.","95008abb":"There are missing values in all 3 classes.\n\nIn 2nd and 3rd more than 90% of cabin values are missing, so there seems to be no point in analyzing them.\n\nLet's see if there are passengers with some cabin value that wasn't successfully parsed into deck + room.","f8e5d681":"### Embarked","8257e325":"There is huge difference in classes from different ports. Almost everyone from Queenstown were 3rd class. And half of people from Cherbourg were 1st class.\n\nThe survival rate from different ports will be different, since, as we know, it primarily depends on pclass and sex.\n\nLets see at the same data differenty: survival rates for different sex\/pclass\/port.","b528fcf1":"- decks have different number of rooms\n- different decks seems to host different passenger classes (although, there is not much statistics here)\n- for most passengers of 2-3 class cabins are not specified","b5223825":"### Pclass","7b988288":"Now lets prepare functions for catboost learning with optuna.","c5078e6e":"Now to the marital status.\n- Mrs - married\n- Miss - not married\n- Ms - unknown","2633bbb9":"Important note: there is some sort of threshold at 16 years - starting from this age survival rate drops drastically. So maybe a good idea to call age<16 'child' and age>=16 'adult'.","9fc076dd":"There are no explicit duplicates.","facf7e78":"### Parch","23fe3b64":"- women almost always pay more than men\n- mean price vary very much\n- decks B and C are most expensive\n- deck A is cheapest\n- unknown cabins have much haigher price. Strange... As we've seen earlier, they have much lower survival rate for men.","4bc2921a":"## Duplicates","d896a43d":"### Ports of embarkation\n\nFirst let's look at passenger classes from different ports","d88a231a":"Almost nothing useful. Potentially interesting:\n- 1st class have higher survival rate\n- 3rd class was travelling in larger families\n- 2nd and 3rd class fare was very close\n- larger families had more children (low age passengers) in them","ed5ee195":"As a matter of fact, there is lots of info here:\n- females are called Mrs. or Miss. so there is some info about marital status here\n- we can get last names (the first word in column) and try to analyze families as a whole\n- some passengers have their preferred name and also original name\n- some passengers have a nicknamt like \"Carrie\"\n\nLet's start with creating new column - family name.\n\nWe will exclude people who have zero SibSp + Parch on board - we think they are travelling without family.\n\nObviously in this calculation we didn't include parents on wife side and stuff like that, so it is a rough approximation.","62bcf803":"### PassengerId","f76bfef5":"There are lots of missing values in 'age'.\n\nHere are some rows with them.\n\nThere is no nice way to fill them, but here are some ideas:\n- mrs. probably are not children\n- fill with median values for group [pclass, sex]\n\nIn this EDA we will not do that - we want only clean primary data. But for ML it will be reasonable to try and fill these gaps.","cd602a3f":"# Missing values handling\n\nThere are 3 columns with missing values (and strategies for hadling):\n- embarked - fill with most popular values\n- cabin - fill deck number with 'unknown', ignore room number\n- age - one of the most important features, should be treated with care. There seems to be no way to fill it with adequate integers, so it might be a good idea to make age feature categorical","1ccce22f":"- it looks a bit like normal distribution, but with heavy right tail and lots of zeroes.\n\nLet's look at those \"zeroes\".","3e25cf4c":"Numer of unique values = overall number of values, so each value is unique.\n\nIt's very likely that this feature will give us nothing in analisys.","83f6c051":"### Family size","bdc8379e":"First - interactive plot in log scale.\nLarge points for survived=1, small for 0.","dfc7363c":"Great figure: lots of stuff, but very hard to calculate anything.\n\n- each class has a lower ticket price threshold\n- most of the 1st class passengers escaped\n- most of the 1st class passengers were not children\n- most of the children were saved\n- prices for children's tickets are higher than for adults\n- among the 3rd class, most survivors were under 33\n- among 1st class, young people had a little more chances than old, but the tendency is weak\n\nIt will be interesting to look at all these trends separately. To do this, we need to look at the distributions:\n- age of passengers of each class\n- survival depending on age\n- prices depending on age","3ea853ee":"So we see that there is no explicit correlation between fare and survival (except for the fare => pclass => survival logic).","eab45276":"There are two women with no embarked values. They were traveling 1st class with one ticket in one cabin.","986cc0c6":"Not all tickets are unique. It seems tickets were bought for entige groups of people. Let's check it.","b51721ce":"# Classification algorithm\n\nFirst lets prepare the data. Since we might want to do this a few times, we'll define a fuction for that and test it right away.\n\nThe fuction will create a single dataframe for train and test for simultaneous manipulations.","8e758d1c":"Same thing but with fare value.","4070d18b":"### Fare for different classes, sexes and ages","a13f0020":"# Group analisys\n\nWe looked at each column separately. Now let's look at their combintaions.\n\nWe'll start with simplest instrument - pairplot.","0b08140f":"### SibSp","18d4594b":"All other features look fine. Interesting: same ticket all different last names, two men and one single wonam. It seems there is a whole story behind these rows.\n\nInteresting! But no useful info.","02b3783d":"### Fare","83335d38":"We have about 200 pervect rows and another 500 with 1 missing value.","af720abb":"There are 4 passengers with some cabin parsing problems. 1st and 2nd classes. Travelling without family.\n\nAs was shown earlier, there are lots of passengers on deck D.\n\nAnd here we see, that there is only one passenger on deck T.","eab616e6":"# Technical imports","f9bc7df1":"It seems there are very high values and also very low. Let's check them.","4ee4d7a1":"And again there is no explicit trends, but we can see some sort of dependence and it looks similar for these two features: subsp and parch.\n\nLets sum them into a new feature \"family_size'.","b270f312":"Ok, so we see that survival rate for pclass 1 and 2 almost doesn't depend on the port. For pclass 3 there is some kind of dependence. But we should remember that most of the passengers boarded in S, so for other ports there is much less observations.","6618103f":"Most passengers were travelling without relatives of their generation.","b844dbf6":"- more than 50% of 3rd class\n- about 25% of 1st class\n- about 20% of 2 class (less than 1st? Strange)","cab0163b":"### Survival rate distribution in classes, sexes and age groups","ef83865f":"### Let's add age","8c80de15":"## Individual column analisys","3c3db61e":"Indeed, with increasing age, the price of tickets drops in all classes. How is it possible?\n\nAnother question: did the fare value influence survival chance? We've seen that survival greatly depends on class, sex and age, so in this plot we will consider only adults and count sex and class separately.\n\nHypothesys is: survived passengers of those groups payed more than dead passengers of the same groups.","88696b07":"### Sex","602ce58c":"There seems to be no real effect of deck number on survival rate.\n\nBut! As we've seen earlier there are a lot of missing values in cabin (and therefore deck) column. In 1st class there are 20% missing values. And in this unknown category survival rate of men is much lower.\n\nLet's look at fare for cabins on different decks. Also we've seen earlier that women tend to pay more, so we'll split data on men and women.","ac650370":"We'll collect best results in a single dataframe.","6f136cc6":"Let's look at missing values.","a4306544":"# Dataset import","052ba067":"Lets plot histograms of age, but include info about class, sex and survival.","29687cfd":"There are missing values in 3 columns. Let's visualize them.","5afa41ce":"Nothing useful. In this analisys missing values will stay.\n\nIn ML we should probably fill them with most popular value.","815e17e8":"About 38% survived.","11add60a":"Features list:\n- PassengerId - unique ID\n- Survived - status 1 (yes) or 0 (no)\n- Pclass - passenger class from 1 to 3. 3 being lowest\n- Name - full name including some titles\n- Sex - male or female\n- Age - age\n- SibSp - number of siblings \/ spouses aboard the Titanic\n- Parch - of parents \/ children aboard the Titanic\n- Ticket - ticket number (different format)\n- Fare - ticket price (per person!)\n- Cabin - cabin number. Generally, it includes a letter and a number\n- Embarked - port of Embarkation (C = Cherbourg, Q = Queenstown, S = Southampton)\n\nLet's simplify the features addressing.","0f88f910":"I've googled some of Ms. Some of them were married and some - not. It seems we can't get such info only from this dataset.\n\nSome passengers had some sort of nicknames\/aliases written like \"Carrie\". We will extract them in separate column and briefly analyze.","79371fc6":"### Decks and rooms\n\nFirst, let's see in which class all those missing values are. Maybe all in 3rd?","0c43c028":"Well, there there seem to be no explicit correlation between survival and fare.","62e5f06a":"There were no other people in their cabin or on their ticket.\n\nMaybe the port is somehow coded into ticket number?\n\nLet's sort rows wo that ticket numbers closest to '113572' are on the top.","616ddcc7":"### Cabin\n\nCabin usually is written like \"letter + number\".\n\nIs seems letter is ship deck and number is cabin number on the deck.\n\nLet's make new columns for these values.","d7441961":"There are missing values in 3 columns: \n- cabin. Lots of nan. Maybe there in no info on low class passengers?\n- age. 20% nan. Quite a lot\n- embarked. Only 2 nan\n\nThere is no explicit correlation between missing values in columns.\n\nLet's see how many \"good\" rows we have.","b99f7771":"It may seem that names are as useless as passengerID since the all are unique categorical values. But! There may be some additional info buried in those strings.","0e7872d5":"Now let's try to use all useful (and somewhat useful) features and see cv-score.","3e966547":"### Age distribution in classes and sexes","f9abe083":"This feature could be useful.","6640a9db":"### Age","31853471":"Yep, same ticket usually means same (or ajacent) cabin.","9eeb0f6f":"Also let's look at the same dependence with smaller age step (2 years).","4a2d35fe":"- decks have different number of rooms. Maybe their lenght is different, or maybe room size is different\n- somehow almos all passengers of deck A are men\n- there seems to be no pattern in suvival in different rooms, so room number probably doesn't matter\n\nNow let's look at numbers."}}