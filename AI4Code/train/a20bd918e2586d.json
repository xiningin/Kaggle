{"cell_type":{"20065296":"code","93c1fbe9":"code","e10c467b":"code","4ff281fb":"code","00fce502":"code","8f006aa9":"code","2b9e3b7d":"code","424eadae":"code","9df45092":"code","749b5bdb":"markdown","c741f9fe":"markdown","3d2cc742":"markdown","afc913b0":"markdown","8ff0c1fa":"markdown","6b40a09c":"markdown","85b448cd":"markdown","c5bd3805":"markdown","bdf85803":"markdown","3b24f3c2":"markdown","f81efafb":"markdown","f485402c":"markdown"},"source":{"20065296":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom pickle import load\nimport json\n!cp ..\/input\/ventilator-feature-engineering\/VFE.py .\nfrom VFE import add_features\nimport gc","93c1fbe9":"RS = load(open('..\/input\/ventilator-feature-engineering\/RS.pkl', 'rb'))","e10c467b":"with open('..\/input\/train-ventilator-lstm-model-part-i\/train_params.json', 'r') as fp:\n    config = json.load(fp)","4ff281fb":"m = '..\/input\/train-ventilator-lstm-model-part-i\/lstm_fold0.hdf5'\nstrategy = tf.distribute.get_strategy()\nwith strategy.scope():\n    model = keras.models.load_model(m)","00fce502":"pressure = np.load('..\/input\/ventilator-feature-engineering\/y_train.npy')\nP_MIN = np.min(pressure)\nP_MAX = np.max(pressure)\nP_STEP = pressure[0][1] - pressure[0][0]\nprint('Min pressure: {}'.format(P_MIN))\nprint('Max pressure: {}'.format(P_MAX))\nprint('Pressure step: {}'.format(P_STEP))\nprint('Unique values:  {}'.format(np.unique(pressure).shape[0]))","8f006aa9":"#Load test features, sample submission file\ntest_ori = pd.read_csv('..\/input\/ventilator-pressure-prediction\/test.csv')\nsubmission = pd.read_csv('..\/input\/ventilator-pressure-prediction\/sample_submission.csv')\n\n#Add features used by the model, drop unused columns\ntest = add_features(test_ori)\ntest.drop(['id', 'breath_id'], axis=1, inplace=True)\n\n#Scale and reshape\ntest = RS.transform(test)\ntest = test.reshape(-1, 80, test.shape[-1])\n\n#Predict\nwith strategy.scope():\n    submission['pressure'] = model.predict(test, batch_size=config['BATCH_SIZE'], verbose=2).squeeze().reshape(-1, 1).squeeze()\n\n#Round to the grid of pressure values\nsubmission['pressure'] = np.round((submission['pressure'] - P_MIN)\/P_STEP) * P_STEP + P_MIN\nsubmission['pressure'] = np.clip(submission['pressure'], P_MIN, P_MAX)\n\n#Save\nsubmission.to_csv('submission.csv', index=False)\n\n# Clean up\ndel submission, test, test_ori\ntf.keras.backend.clear_session()\ngc.collect()","2b9e3b7d":"results = np.zeros(6036000)\n\n# Load train features, remove the pressure to mock the test data\ntrain_ori = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\ntrain_ori.drop(['pressure'], axis=1, inplace=True)\n\n# Add features used by the model, drop unused columns \ntrain = add_features(train_ori)\ntrain.drop(['id', 'breath_id'], axis=1, inplace=True)\n\n#Scale and reshape\ntrain = RS.transform(train)\ntrain = train.reshape(-1, 80, train.shape[-1])\n\n#Predict\nwith strategy.scope():\n    results[:] = model.predict(train, batch_size=config['BATCH_SIZE'], verbose=1).squeeze().reshape(-1, 1).squeeze()\n\n#Round to the grid of pressure values\nresults = np.round((results - P_MIN)\/P_STEP) * P_STEP + P_MIN\nresults = np.clip(results, P_MIN, P_MAX)\n\n# Clean up\ndel train, train_ori\ntf.keras.backend.clear_session()\ngc.collect()\n\n#Save the results\nnp.save(f'results.npy', results)","424eadae":"RC_pairs = [[5,10], [5,20], [5,50], [20,10], [20,20], [20,50], [50,10], [50,20], [50,50]]","9df45092":"results = np.zeros((9, 6036000))\n\n#For each R, C combination, make predictions for each train breath assuming it has this R, C\nfor idx, (our_R, our_C) in enumerate(RC_pairs):\n    \n    # Load train features, remove the pressure to mock the test data\n    train_ori = pd.read_csv('..\/input\/ventilator-pressure-prediction\/train.csv')\n    train_ori.drop(['pressure'], axis=1, inplace=True)\n\n    # Add features used by the model, drop unused columns \n    train = add_features(train_ori)\n    train.drop(['id', 'breath_id'], axis=1, inplace=True)\n    \n    # Artificially set R, C to the values assumed in this loop\n    for x in ['R_20', 'R_5', 'R_50', 'C_10', 'C_20','C_50', \n          'R__C_20__10', 'R__C_20__20', 'R__C_20__50', \n          'R__C_50__10', 'R__C_50__20', 'R__C_50__50', \n          'R__C_5__10', 'R__C_5__20', 'R__C_5__50'\n         ]:\n            train[x] = 0\n\n    train['R_' + str(our_R)] = 1\n    train['C_' + str(our_C)] = 1\n    train['R__C_' + str(our_R) + '__' + str(our_C)] = 1\n    \n    #Scale and reshape\n    train = RS.transform(train)\n    train = train.reshape(-1, 80, train.shape[-1])\n    \n    #Predict\n    with strategy.scope():\n        results[idx] = model.predict(train, batch_size=config['BATCH_SIZE'], verbose=1).squeeze().reshape(-1, 1).squeeze()\n    \n    #Round to the grid of pressure values\n    results[idx] = np.round((results[idx] - P_MIN)\/P_STEP) * P_STEP + P_MIN\n    results[idx] = np.clip(results[idx], P_MIN, P_MAX)\n    \n    # Clean up\n    del train, train_ori\n    tf.keras.backend.clear_session()\n    gc.collect()\n\n#Save the results\nnp.save(f'results_vary_RC.npy', results)","749b5bdb":"Define all possible R, C combinations","c741f9fe":"Pressure statistics used later for [rounding](https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/276083)","3d2cc742":"# Train dataset - original R, C","afc913b0":"# Test dataset","8ff0c1fa":"# Train dataset - all R, C combinations","6b40a09c":"In [this notebook](https:\/\/www.kaggle.com\/c\/ventilator-pressure-prediction\/discussion\/280996) @lucasmorin suggested that some of the R and C values might be mislabeled in the training set. In this notebook we use a reasonably good [model](https:\/\/www.kaggle.com\/mistag\/train-ventilator-lstm-model-part-i) by @mistag to **predict pressures** for **all training breaths** and **all possible R and C combinations** (so we have nine predictions for each training breath).\n\nOriginal @mistag's prediction is in [notebook](https:\/\/www.kaggle.com\/mistag\/pred-ventilator-lstm-model-0-149).\n\nWe only use **model trained on 80% of the data** to ensure that 20% of the data was not part of the training process. If we train on all the data, we might not be able to distinguish R and C mislabelling if the model is overfit. This model on its own scores 0.1756.","85b448cd":"# Preliminaries","c5bd3805":"Predict pressure values for all breaths and all possible R, C combinations","bdf85803":"Rescaler","3b24f3c2":"# Introduction","f81efafb":"Fetch batch size from training session:","f485402c":"Pretrained model, tensorflow strategy"}}