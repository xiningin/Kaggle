{"cell_type":{"3e39ce4a":"code","8f9969ac":"code","b9774d0b":"code","764a7a41":"code","c3ef2f28":"code","ccd7a1d5":"code","81320dfd":"code","e73cb442":"code","3ac5ecf5":"code","a4acf9c7":"code","2e639f46":"code","a907bdc4":"code","002532da":"code","30a4f6e2":"code","61379c59":"code","74217e8a":"code","19726a94":"code","376d5618":"code","21ddab53":"code","025cb23e":"code","54f407e7":"code","3021e63a":"code","c1d415e5":"code","fdfd76f2":"code","841713c5":"code","09a68323":"code","83b84517":"code","65f34011":"code","182a70b6":"markdown","d80e0bdf":"markdown","68f6508d":"markdown","76963224":"markdown","97b266e7":"markdown","32276f28":"markdown","68c8b3a9":"markdown","655b4baf":"markdown","5ba47104":"markdown","44e577ba":"markdown","134c42c5":"markdown","5f994d09":"markdown","adf8d732":"markdown","d90c9362":"markdown","c85b7628":"markdown"},"source":{"3e39ce4a":"# Data Manipulation, Linear Algebra\nimport pandas as pd\nimport numpy as np\n\n# Plots\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nimport matplotlib.pyplot as plt\n\n#ignore warning messages \nimport warnings\nwarnings.filterwarnings('ignore')","8f9969ac":"base_path = \"..\/input\/tabular-playground-series-jan-2022\/\"\n\ntrain_data = pd.read_csv(base_path + \"train.csv\")\ntest_data = pd.read_csv(base_path + \"test.csv\")\nsample_submission_data = pd.read_csv(base_path + \"sample_submission.csv\")","b9774d0b":"train_data.head()","764a7a41":"test_data.head()","c3ef2f28":"full_data = pd.concat([train_data.iloc[:, :-1], test_data])\nfull_data.reset_index(drop=True, inplace=True)\nfull_data","ccd7a1d5":"full_data[\"year\"] = full_data[\"date\"].apply(lambda x: int(x[:4]))\nfull_data[\"month\"] = full_data[\"date\"].apply(lambda x: int(x[5:7]))\nfull_data[\"day\"] = full_data[\"date\"].apply(lambda x: int(x[8:]))\n\n# Dropping the \"date\" and \"row_id\" Column\nfull_data.drop(columns=[\"date\", \"row_id\"], inplace=True)","81320dfd":"full_data","e73cb442":"def Pie_Bar_Plot(data, col):\n    # Gettting Column Value Counts\n    column_value_counts = full_data[col].value_counts()\n\n    # Creating the explode values_list\n    explode_len = len(column_value_counts) - 1\n    explode = [0]\n    for i in range(explode_len):\n        explode.append(0.1)\n\n    # Creating Subplots\n    f, ax = plt.subplots(1, 2, figsize=(18, 8))\n\n    # Pie Plot\n    column_value_counts.plot.pie(explode=explode, autopct='%1.1f%%', ax=ax[0], shadow=True)\n    ax[0].set_title(f'{col.capitalize()} Pie Plot', fontsize=16, fontweight=\"bold\")\n    ax[0].set_ylabel('')\n\n    # Barplot \/ Count Plot\n    sns.barplot(x=column_value_counts.index, y=column_value_counts.values, ax=ax[1])\n    ax[1].set_title(f'{col.capitalize()} Count Plot', fontsize=16, fontweight=\"bold\")\n    plt.show()\n\n    print(\"\\n\\n\")","3ac5ecf5":"for col in full_data.columns:\n    Pie_Bar_Plot(full_data, col)","a4acf9c7":"pd.crosstab(full_data.country, full_data.store, margins=True).style.background_gradient(cmap='summer_r')","2e639f46":"pd.crosstab(full_data.country, full_data.year, margins=True).style.background_gradient(cmap='summer_r')","a907bdc4":"pd.crosstab(full_data.country, full_data.month, margins=True).style.background_gradient(cmap='summer_r')","002532da":"pd.crosstab(full_data.year, full_data.month, margins=True).style.background_gradient(cmap='summer_r')","30a4f6e2":"train_data[\"date\"] = pd.to_datetime(train_data[\"date\"])","61379c59":"def Date_Sales_Plot(data, hue=None):\n    plt.figure(figsize=(25, 6))\n    sns.lineplot(data=train_data, x=\"date\", y=\"num_sold\", hue=hue, err_style=None)\n    plt.xlabel(\"Date\", fontsize=12, fontweight=\"bold\")\n    plt.ylabel(\"Products Sold\", fontsize=12, fontweight=\"bold\")\n    plt.title(\"Date vs Products Sold\", fontsize=16, fontweight=\"bold\")\n    if hue:\n        plt.legend(fontsize=13, edgecolor=None, facecolor=None, markerscale=2, handlelength=1, title=None)\n    plt.show()","74217e8a":"Date_Sales_Plot(train_data)","19726a94":"Date_Sales_Plot(train_data, \"country\")","376d5618":"Date_Sales_Plot(train_data, \"store\")","21ddab53":"Date_Sales_Plot(train_data, \"product\")","025cb23e":"full_data = pd.concat([pd.get_dummies(full_data[[\"country\", \"store\", \"product\"]]), full_data[[\"year\", \"month\", \"day\"]]], axis=1)","54f407e7":"# Getting only last two digits of the year\nfull_data[\"year\"] = full_data[\"year\"].apply(lambda x: int(str(x)[2:]))\nfull_data","3021e63a":"# Seperating Training and Testing Data\ntrain = full_data.iloc[:len(train_data), :]\ntest = full_data.iloc[len(train_data):, :]","c1d415e5":"# Train Test Split for training and testing the Regressor\nfrom sklearn.model_selection import train_test_split\n\n# Different Mathematical functions to calculate the Accuracy of Regression Model\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n\n# Using CatBoostRegressor\nfrom catboost import CatBoostRegressor","fdfd76f2":"X_train, X_test, y_train, y_test = train_test_split(train, train_data[\"num_sold\"], test_size = 0.2, random_state=0)","841713c5":"# Initializing the Regressor\nregressor = CatBoostRegressor(silent=True)\n\n# Training the Regressor\nregressor.fit(X_train, y_train)\n\n# Predict the Values for X_test\ny_pred = regressor.predict(X_test)\n\n# Calculating R^2 Score\nregressor_r2_score = r2_score(y_test, y_pred)\n\n# Calculating Mean Squared Error\nregressor_mse = mean_squared_error(y_test, y_pred)\n\n# Calculating Root Mean Squared Error\nregressor_rmse = np.sqrt(regressor_mse)\n\n# Calculating Mean Absolute Error\nregressor_mae = mean_absolute_error(y_test, y_pred)","09a68323":"print( f\"\"\"\nRegressor Name                    : {regressor.__class__.__name__}\n\nRegressor R^2 Score               : {regressor_r2_score}\n\nRegressor Mean Squared Error      : {regressor_mse}\n\nRegressor Root Mean Squared Error : {regressor_rmse}\n\nRegressor Mean Absolute Error     : {regressor_mae}\n\"\"\")","83b84517":"predictions = regressor.predict(test)\npredictions","65f34011":"# Using Sample Submission file to create the Submission file\nsample_submission_data[\"num_sold\"] = predictions\n\n# Saving the Submission file\nsample_submission_data.to_csv(\"submission.csv\", index=False)","182a70b6":"# Preparing Data","d80e0bdf":"## Year vs Number of Sales (for Training Data)","68f6508d":"### Getting Year, Month and Day from Date","76963224":"## Distribution Plots using Pie and Bar Plot","97b266e7":"## Concatenating Training and Testing Data","32276f28":"## OneHotEncoding Categorical Variables","68c8b3a9":"# Imports","655b4baf":"# Machine Learning Model","5ba47104":"# Creating the Submission File","44e577ba":"## Getting the Data","134c42c5":"Thanks to https:\/\/www.kaggle.com\/vad13irt\/tps-jan-2022-exploratory-data-analysis for plot idea below.","5f994d09":"# Analysis and EDA on FullData","adf8d732":"## Crosstabs","d90c9362":"## Feature Engineering","c85b7628":"# Data Preprocessing"}}