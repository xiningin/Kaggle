{"cell_type":{"d5eca4c0":"code","30d045c2":"code","41bdc133":"code","8a835f1f":"code","d14af181":"code","d8cf303a":"code","03ad56c2":"code","8c079cd0":"code","9e37d1d4":"code","49a4055e":"code","715ce43c":"code","bd9ddf71":"code","d562b2b1":"code","779e5855":"code","055bfe6c":"code","7a22e34c":"code","ceba5320":"markdown","ff62c0db":"markdown","9d84a730":"markdown","6e8c234a":"markdown","9e57d67a":"markdown","c942c83d":"markdown","bb8bff4f":"markdown","a7812448":"markdown"},"source":{"d5eca4c0":"from IPython.display import YouTubeVideo      \nYouTubeVideo('fKCayvKYqm8')","30d045c2":"import pandas as pd\nfrom sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\nfrom sklearn.base import TransformerMixin  #custom transform\nfrom sklearn.pipeline import Pipeline\nimport string  #in this use case,it will handle punctuation mark\nimport spacy\nfrom spacy.lang.en.stop_words import STOP_WORDS\nfrom spacy.lang.en import English\nfrom sklearn import metrics\nimport seaborn as sns\nimport matplotlib.pyplot as plt","41bdc133":"df_amazon = pd.read_csv(\"..\/input\/amazon-alexa-reviews\/amazon_alexa.tsv\", sep=\"\\t\")","8a835f1f":"df_amazon.head()","d14af181":"df_amazon.shape","d8cf303a":"df_amazon.feedback.value_counts()","03ad56c2":"# Create our list of punctuation marks\npunctuations = string.punctuation\nprint(punctuations)\n# Create our list of stopwords\nnlp = spacy.load('en')\nstop_words = spacy.lang.en.stop_words.STOP_WORDS\n\n# Load English tokenizer, tagger, parser, NER and word vectors\nparser = English() #comes from import lang.en\n\n# Creating our tokenizer function\ndef spacy_tokenizer(sentence):\n    # Creating our token object, which is used to create documents with linguistic annotations.\n    mytokens = parser(sentence)\n\n    # Lemmatizing each token and converting each token into lowercase , strip all extra spaces,\n    # pron is like he,she,i ==> so != pron \n\n    mytokens = [ word.lemma_.lower().strip() if word.lemma_ != \"-PRON-\" else word.lower_ for word in mytokens ]\n\n    # Removing stop words\n    mytokens = [ word for word in mytokens if word not in stop_words and word not in punctuations ]\n\n    # return preprocessed list of tokens\n    return mytokens","8c079cd0":"# Custom transformer using spaCy\nclass predictors(TransformerMixin):\n\n    def fit(self, X, y=None, **fit_params):      #uses the input data to train the transformer\n        return self\n    \n    def transform(self, X, **transform_params):  #takes the input feature and transform them\n        # Cleaning Text\n        return [clean_text(text) for text in X]\n\n    def get_params(self, deep=True):\n        return {}\n\n# Basic function to clean the text\ndef clean_text(text):\n    # Removing spaces and converting text into lowercase\n    return text.strip().lower()","9e37d1d4":"tfidf_vector = TfidfVectorizer(tokenizer = spacy_tokenizer)","49a4055e":"bow_vector = CountVectorizer(tokenizer = spacy_tokenizer, ngram_range=(1,1))","715ce43c":"from sklearn.model_selection import train_test_split\n\nX = df_amazon['verified_reviews'] # the features we want to analyze\nylabels = df_amazon['feedback']   # the labels, or answers, we want to test against\n\nX_train, X_test, y_train, y_test = train_test_split(X, ylabels, test_size=0.3)","bd9ddf71":"from sklearn.tree import DecisionTreeClassifier\nclassifier=DecisionTreeClassifier(class_weight='balanced')","d562b2b1":"# Create pipeline using CountVectoe\npipe1 = Pipeline([(\"cleaner\", predictors()),\n                 ('vectorizer', bow_vector),\n                 ('classifier', classifier)])\n\n# model generation\npipe1.fit(X_train,y_train)","779e5855":"# Create pipeline using tf-idf\npipe2 = Pipeline([(\"cleaner\", predictors()),\n                 ('vectorizer', tfidf_vector),\n                 ('classifier', classifier)])\n\n# model generation\npipe2.fit(X_train,y_train)","055bfe6c":"from sklearn import metrics\n# Predicting with a test dataset\npredicted = pipe1.predict(X_test)\n\n# Model Accuracy\nprint(\" Accuracy:\",metrics.accuracy_score(y_test, predicted))\nprint(\" Precision:\",metrics.precision_score(y_test, predicted))\nprint(\" Recall:\",metrics.recall_score(y_test, predicted))","7a22e34c":"# Predicting with a test dataset\npredicted2 = pipe2.predict(X_test)\n\n# Model Accuracy\nprint(\" Accuracy:\",metrics.accuracy_score(y_test, predicted2))\nprint(\" Precision:\",metrics.precision_score(y_test, predicted2))\nprint(\" Recall:\",metrics.recall_score(y_test, predicted2))\n","ceba5320":"![pip.PNG](attachment:pip.PNG)","ff62c0db":"### Problem:\nThe data set consists of records of customers review regarding Alexa. Each customer's review has been categorized into Postive and Negatve based on the reviews given.\n### Objective:\nThe objective of this analysis is ,build a predictive classification model on text data highly processed by scpCy and predict future instances.","9d84a730":"Hello,\n\n You can go also through the video explanation of this notebook below with technical rythm:)\n \n https:\/\/youtu.be\/fKCayvKYqm8","6e8c234a":"## Import packages","9e57d67a":"## Data Preparation(Train Test Split)","c942c83d":"## Building your own custom transform","bb8bff4f":"## Tokenization ","a7812448":"## Evaluation<br\/>\n**Evaluation of simple Decision Tree model**"}}