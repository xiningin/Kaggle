{"cell_type":{"86891def":"code","0759a0a0":"code","a70a8c4f":"code","cef9b397":"code","fca27571":"code","f04ec352":"code","d3d477b0":"code","e02dcad5":"code","afc24018":"code","d49b9191":"code","17fd1b5c":"code","8c6a5e19":"code","0d28df63":"code","fc02c5fa":"code","9584ad35":"code","1f6c0d40":"code","ff2dd082":"code","b6905eb2":"code","feecc95f":"code","3f325370":"code","ae3b5bdd":"code","79658cf4":"markdown"},"source":{"86891def":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0759a0a0":"df = pd.read_csv('\/kaggle\/input\/real-time-advertisers-auction\/Dataset.csv')","a70a8c4f":"df.shape","cef9b397":"#make trg\n\ndef weird_division(n, d):\n    return n \/ d if d else 0\n\ndf['CPM'] = df.apply(lambda x: weird_division(((x['total_revenue']*100)),x['measurable_impressions'])*1000 , axis=1)","fca27571":"#drop like orig sol\ndf.drop(['order_id' , 'line_item_type_id', 'integration_type_id' , 'revenue_share_percent'], axis = 1, inplace=True)","f04ec352":"perc95 = df['CPM'].describe([.95])[5]\nprint(perc95)\n\nsplit_date = '2019-06-22'","d3d477b0":"df = df[(df['CPM'] >= 0) & (df['CPM'] <= perc95)]","e02dcad5":"df.shape","afc24018":"df.dtypes","d49b9191":"for col in df.columns:\n    print(col, len(df[col].unique()))","17fd1b5c":"cat_feats = []\nfor col in df.columns:\n    if col.find('id') >= 0:\n        print(col, len(df[col].unique()))\n        cat_feats.append(col)","8c6a5e19":"set(df.columns) - set(cat_feats)","0d28df63":"fin_cols = list(set(df.columns) - set(['CPM', 'date', 'total_revenue']))","fc02c5fa":"train = df[df['date'] < split_date]\ntest = df[df['date'] >= split_date]","9584ad35":"from catboost import CatBoostRegressor\n\nclf = CatBoostRegressor(iterations = 300, \n                       has_time = True, cat_features = cat_feats,\n                       task_type = 'CPU', eval_metric = \"RMSE\", \n                       random_state = 1337)\n\nclf.fit(train[fin_cols], train['CPM'], silent = True)","1f6c0d40":"from sklearn.metrics import mean_squared_error\n\npred = clf.predict(test[fin_cols])\nprint('Is score better?' , mean_squared_error(test['CPM'], pred) < 4850)\nmean_squared_error(test['CPM'], pred)","ff2dd082":"impotances = pd.DataFrame([clf.feature_names_, clf.feature_importances_]).T\nimpotances.sort_values(by=1, ascending=False).head(20)","b6905eb2":"el = 5\nfin_cols2 = impotances[0].head(el).values\ncat_feats2 = set(impotances[0].head(el).values) & set(cat_feats)","feecc95f":"clf2 = CatBoostRegressor(iterations = 300, \n                       has_time = True, cat_features = cat_feats2,\n                       task_type = 'CPU', eval_metric = \"RMSE\", \n                       random_state = 1337)\n\nclf2.fit(train[fin_cols2], train['CPM'], silent = True)","3f325370":"pred2 = clf2.predict(test[fin_cols2])\nprint('Is score better?' , mean_squared_error(test['CPM'], pred2) < 4850)\nmean_squared_error(test['CPM'], pred2)","ae3b5bdd":"print('Curr best MSE =' , mean_squared_error(test['CPM'], pred))","79658cf4":"### Get some features from top"}}