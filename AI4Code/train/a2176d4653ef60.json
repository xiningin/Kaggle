{"cell_type":{"499dc0d4":"code","ecc4b626":"code","84f34671":"code","ecd46761":"code","536c42b3":"code","322deefb":"code","db9f9e69":"code","ee7e4b51":"code","678f416e":"code","ef13a3c2":"code","8d7546f1":"code","87513639":"code","6d7959ad":"code","72f26b19":"code","d329ab78":"code","8c20cd1b":"code","fa02d651":"code","23514fae":"code","f4077d55":"code","f63d5d0f":"code","5a8a998e":"code","ca85eb18":"code","ba607f79":"code","91d0d83f":"code","e1e9ae25":"code","1b2bbaf4":"code","bc96e320":"code","10d728e3":"code","61b61650":"code","1791b1d5":"code","4ba148f6":"code","68ef1cc5":"code","33522d98":"code","72469030":"code","b8b0cb2e":"code","f2d84c0b":"code","ddce9313":"code","52da660b":"code","06028c71":"code","580975f3":"code","898c9585":"code","718597d3":"code","c28dc04a":"code","1a6471f4":"code","62d55d8b":"code","53e49909":"code","fb8d8110":"code","5207381d":"code","eb8cfee2":"code","255a160f":"code","042b36b6":"code","e9238ed2":"code","8d85899a":"code","a77208c0":"code","574b0316":"code","9bebbc8e":"code","4fef05dc":"code","85e02ecc":"code","397c1ee7":"code","11172a8f":"code","1299b7ea":"code","b2f28360":"code","beb5cebb":"code","1285775e":"code","ddc765bc":"code","871a0eb7":"code","c267c79f":"code","4a8422e9":"code","c56411db":"code","475efcb8":"code","a697326b":"code","14de2fb0":"code","fadba47e":"code","b4ee6bc4":"code","c548784f":"code","b4349131":"code","c51d68b4":"code","b1ae3a89":"code","77e8ede8":"code","11ff2a1e":"code","20d7662a":"code","635c1b4e":"code","57046773":"code","e7c8dfbe":"code","43edf1c7":"code","5d41bec5":"code","e3bc7495":"code","fe6abba8":"code","73c7e99e":"code","44e0eb63":"code","bb249ede":"code","2f4d03ae":"code","b15d7f0a":"code","7458ff05":"code","c9a806c0":"markdown","23ba82f0":"markdown","21e76016":"markdown","8132aa78":"markdown","ce19d876":"markdown","32f94fa2":"markdown","b127f598":"markdown","3f8125fd":"markdown","a96c3050":"markdown"},"source":{"499dc0d4":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","ecc4b626":"# train = pd.read_csv('train.csv')\n# test = pd.read_csv('test.csv')\n# sample = pd.read_csv('gender_submission.csv')\n\n\n# Competition input path\ntrain =pd.read_csv('..\/input\/titanic\/train.csv')\ntest =pd.read_csv('..\/input\/titanic\/test.csv')","84f34671":"train.head()","ecd46761":"test.head()","536c42b3":"train.info()","322deefb":"# Check % columns with null values\ntrain.isnull().sum()\/len(train)*100","db9f9e69":"# Ensure each record has unique Passenger Id\nlen(train['PassengerId'].unique())","ee7e4b51":"test.info()","678f416e":"# Check label balance\nsns.countplot(train['Survived'])\n\n# Survival is not too far imbalance although most passengers did not survive","ef13a3c2":"# Compare survival by class\nsns.countplot(data=train,x='Pclass',hue='Survived')\n\n# majority of people who did not survived have 3rd ticket class","8d7546f1":"survived = train[train['Survived'] == 1].groupby('Pclass').count()['Survived']\nnot_survived = train[train['Survived'] == 0].groupby('Pclass').count()['Survived']\ndat = (survived\/(not_survived + survived) * 100).reset_index()\n\nsns.barplot(data=dat,x='Pclass',y='Survived')\n\n# There is significant surivival pattern based on ticket class. \n# Ticket class 1 having the highest survival rate followed\n# by 2 and then 3.","87513639":"# Compare survival by sex\nsns.countplot(data=train,x='Sex',hue='Survived')\n\n# more females than males survived","6d7959ad":"plt.figure(figsize=(10,4))\nplt.hist(train[train['Survived']==0]['Age'],bins=40,label='Not Survived')\nplt.hist(train[train['Survived']==1]['Age'],bins=40,label='Survived',alpha=0.7)\nplt.legend()\n\n# younger and middle aged (20s-30s) people tend to survive","72f26b19":"# Compare survival by sibling numbers\nsns.countplot(data=train,x='SibSp',hue='Survived')\n\n# Most people with no siblings or spouses did not survive in comparison to those who has siblings or spouses on board\n# This is also true for those who survived","d329ab78":"# Compare survival by parent and children numbers\nsns.countplot(data=train,x='Parch',hue='Survived')\n\n# Similar pattern as those who have siblings or spouses onboard","8c20cd1b":"# Check distinct ticket values\n\nlen(train['Ticket'].unique())","fa02d651":"train['Ticket'].sort_values()\n\n# Ticket values seems not standardized to a specific syntax","23514fae":"# Analyze Fare\nplt.figure(figsize=(10,4))\nplt.hist(train[(train['Survived']==1) & (train['Sex']=='female')]['Fare'],bins=80,label='Survived')\nplt.hist(train[(train['Survived']==0) & (train['Sex']=='female')]['Fare'],bins=80,label='Not Survived',alpha=0.7)\nplt.legend()\n\n# most females across all fare survived","f4077d55":"plt.figure(figsize=(10,4))\nplt.hist(train[(train['Survived']==1) & (train['Sex']=='male')]['Fare'],bins=80,label='Survived')\nplt.hist(train[(train['Survived']==0) & (train['Sex']=='male')]['Fare'],bins=80,label='Not Survived',alpha=0.5)\nplt.legend()\n\n# most males in the lower fare group did not survive","f63d5d0f":"# Analyze Cabin\nprint(len(train['Cabin'].unique()))\nprint(len(train['Cabin'].str[0].unique()))\nprint(train['Cabin'].str[0].unique())","5a8a998e":"train['Cabin_Prefix'] = train['Cabin'].str[0]","ca85eb18":"train.groupby(['Cabin_Prefix','Pclass']).count()","ba607f79":"sns.boxplot(data=train,x='Cabin_Prefix',y='Fare',order=['A','B','C','D','E','F','G','T'])","91d0d83f":"sns.countplot(x='Cabin_Prefix',hue='Survived',data=train,order=['A','B','C','D','E','F','G','T'])","e1e9ae25":"sns.boxplot(data=train,x='Pclass',y='Fare')","1b2bbaf4":"# Analyze Embarked\nsns.countplot(data=train,x='Embarked',hue='Survived')\n\n# Most passengers embarked from Southampton followed by Cherbourg and Queenstown","bc96e320":"sns.boxplot(data=train,x='Embarked',y='Fare')","10d728e3":"#  Check correlation\n# Check features that are highly correlated to Age to identify a pattern to fill missing data\n\ntrain.corr()","61b61650":"\ntrain[train['Sex']=='female'].corr()","1791b1d5":"train[train['Sex']=='male'].corr()","4ba148f6":"sns.boxplot(data=train,x='Sex',y='Age')\n# no significant differences of age by sex","68ef1cc5":"age_lookup = train.groupby(['Pclass','Sex']).mean()['Age']\nage_lookup = pd.DataFrame(age_lookup)\nage_lookup.columns = ['Age_Val']\nage_lookup","33522d98":"# Age seems to be most correlated to combination of Pclass and Sex therefore we will \n# attempt to fill in missing values by using the mean of each Pclass and Sex","72469030":"# Fill missing Age values based on mean Age grouped by Sex and Pclass\n\ntrain = train.join(age_lookup, on=['Pclass','Sex'])\ntest = test.join(age_lookup, on=['Pclass','Sex'])","b8b0cb2e":"train['Age'].fillna(train['Age_Val'],inplace=True)\ntest['Age'].fillna(train['Age_Val'],inplace=True)","f2d84c0b":"# Drop Cabin since >70% of the data is missing\ntrain.drop('Cabin',axis=1,inplace=True)\ntest.drop('Cabin',axis=1,inplace=True)","ddce9313":"# Drop records with missing Embarkment since these are less than 0.5% of the total\ntrain.dropna(subset=['Embarked'],inplace=True)\ntest.dropna(subset=['Embarked'],inplace=True)","52da660b":"train.drop('Cabin_Prefix',axis=1,inplace=True)","06028c71":"test.isnull().sum()","580975f3":"train.isnull().sum()","898c9585":"fare_mean = test['Fare'].mean()\ntest['Fare'].fillna(fare_mean,inplace=True)","718597d3":"train.drop('Age_Val',axis=1,inplace=True)\ntest.drop('Age_Val',axis=1,inplace=True)","c28dc04a":"# Create dummy variables for Pclass\ndummy_var = pd.get_dummies(train['Pclass'],drop_first=True,prefix='Pclass')\ntrain = pd.concat([train,dummy_var],axis=1)","1a6471f4":"train.drop('Pclass',axis=1,inplace=True)","62d55d8b":"dummy_var = pd.get_dummies(test['Pclass'],drop_first=True,prefix='Pclass')\ntest = pd.concat([test,dummy_var],axis=1)","53e49909":"test.drop('Pclass',axis=1,inplace=True)","fb8d8110":"# Create dummy variables for Sex\ndummy_var = pd.get_dummies(train['Sex'],drop_first=True,prefix='Sex')\ntrain = pd.concat([train,dummy_var],axis=1)","5207381d":"train.drop('Sex',axis=1,inplace=True)","eb8cfee2":"dummy_var = pd.get_dummies(test['Sex'],drop_first=True,prefix='Sex')\ntest = pd.concat([test,dummy_var],axis=1)","255a160f":"test.drop('Sex',axis=1,inplace=True)","042b36b6":"# Drop Name, PassengerId, Ticket because these are non-numeric features that highly varies\ntrain.drop(['Name','PassengerId','Ticket'],axis=1,inplace=True)\ntest.drop(['Name','Ticket'],axis=1,inplace=True)","e9238ed2":"# Create dummy variables for Embarked\ndummy_var = pd.get_dummies(train['Embarked'],drop_first=True,prefix='Embarked')\ntrain = pd.concat([train,dummy_var],axis=1)","8d85899a":"train.drop('Embarked',axis=1,inplace=True)","a77208c0":"dummy_var = pd.get_dummies(test['Embarked'],drop_first=True,prefix='Embarked')\ntest = pd.concat([test,dummy_var],axis=1)","574b0316":"test.drop('Embarked',axis=1,inplace=True)","9bebbc8e":"train.info()","4fef05dc":"test.info()","85e02ecc":"train.head()","397c1ee7":"from sklearn.model_selection import train_test_split","11172a8f":"X = train.drop('Survived',axis=1)\ny = train['Survived']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","1299b7ea":"from sklearn.svm import SVC","b2f28360":"model_svc = SVC()","beb5cebb":"model_svc.fit(X_train,y_train)","1285775e":"from sklearn.metrics import confusion_matrix,classification_report","ddc765bc":"predictions = model_svc.predict(X_test)","871a0eb7":"print(confusion_matrix(y_test,predictions))","c267c79f":"print(classification_report(y_test,predictions))","4a8422e9":"from sklearn.preprocessing import StandardScaler","c56411db":"X = train.drop('Survived',axis=1)\ny = train['Survived']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","475efcb8":"scaler = StandardScaler()\nX_train = pd.DataFrame(scaler.fit_transform(X_train))\nX_test = pd.DataFrame(scaler.transform(X_test))","a697326b":"from sklearn.neighbors import KNeighborsClassifier","14de2fb0":"# Find the best K\nerror_rate = []\nfor i in range(1,40):\n    model_knn = KNeighborsClassifier(n_neighbors=i)\n    model_knn.fit(X_train,y_train)\n    pred = model_knn.predict(X_test)\n    error_rate.append(np.mean(pred != y_test))\n    ","fadba47e":"plt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',\n         markerfacecolor='red', markersize=10)\n\n# Best K = 13","b4ee6bc4":"# Refit model with K=6\nmodel_knn = KNeighborsClassifier(n_neighbors=13)\nmodel_knn.fit(X_train,y_train)\npredictions = model_knn.predict(X_test)","c548784f":"print(confusion_matrix(y_test,predictions))","b4349131":"print(classification_report(y_test,predictions))","c51d68b4":"from sklearn.preprocessing import MinMaxScaler","b1ae3a89":"X = train.drop('Survived',axis=1).values\ny = train['Survived'].values\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","77e8ede8":"scaler = MinMaxScaler()\nX_train = scaler.fit_transform(X_train)\nX_test = scaler.transform(X_test)","11ff2a1e":"from tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dropout,Dense\nfrom tensorflow.keras.callbacks import EarlyStopping","20d7662a":"model_nn = Sequential()\nmodel_nn.add(Dense(9,activation='relu'))\n#model_nn.add(Dropout(0.2))\nmodel_nn.add(Dense(9,activation='relu'))\n#model_nn.add(Dropout(0.2))\n\nmodel_nn.add(Dense(1,activation='sigmoid'))\n\nmodel_nn.compile(optimizer='adam',loss='binary_crossentropy')","635c1b4e":"early_stop = EarlyStopping(monitor='val_loss',mode='min',verbose=1,patience=50)","57046773":"model_nn.fit(x=X_train,y=y_train,validation_data=(X_test,y_test),epochs=600,callbacks=[early_stop])","e7c8dfbe":"pd.DataFrame(model_nn.history.history).plot()","43edf1c7":"predictions = (model_nn.predict(X_test)>0.5).astype('int32')","5d41bec5":"print(confusion_matrix(y_test,predictions))","e3bc7495":"print(classification_report(y_test,predictions))","fe6abba8":"# Since our KNN model performs the best we will predict using this model","73c7e99e":"X_test = scaler.transform(test.drop('PassengerId',axis=1).values)\npredictions = (model_nn.predict(X_test)>0.5).astype('int32')","44e0eb63":"pd.DataFrame(predictions)","bb249ede":"submission = pd.concat([pd.Series(test['PassengerId'].values),pd.DataFrame(predictions)],axis=1)","2f4d03ae":"submission.columns = ['PassengerId','Survived']","b15d7f0a":"submission","7458ff05":"submission.to_csv('submission.csv',index=False)","c9a806c0":"# Split Training Data","23ba82f0":"# Data Modeling - Neural Networks","21e76016":"# Testing and Submission","8132aa78":"# Data Modeling - KNN","ce19d876":"# Data Evaluation - KNN","32f94fa2":"# Data Modeling - SVC","b127f598":"# Data Preprocessing","3f8125fd":"# Data Evaluation - SVC","a96c3050":"# Data Exploration"}}