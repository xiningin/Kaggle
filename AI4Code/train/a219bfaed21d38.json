{"cell_type":{"28588ffe":"code","c6d30c16":"code","998b69ce":"code","de52def2":"code","5733cf17":"code","6cb505ab":"code","c82cee1d":"code","8faa4fa6":"code","4c07268c":"code","0301a2bc":"code","49151ac1":"code","f6cf1e5d":"code","dc5e3222":"code","2aed0b8c":"code","94343293":"code","541083aa":"code","ee3d7664":"code","10ff9a42":"code","7f5647fd":"code","e14b910a":"code","a14e0135":"code","210afd2f":"code","d4f2d9a9":"code","6817231f":"code","0939ff1a":"code","6d5ef026":"code","16946a18":"code","e79e94e9":"code","4f9027fe":"code","b32706d3":"code","1578d9d6":"code","67c7152f":"code","da35406e":"code","d5af65d3":"code","a19e0698":"code","5c7f3a0d":"code","f07f5ce7":"code","e4a1eea2":"code","1d853041":"code","4988e894":"code","d674b2a2":"code","458bbd90":"code","b48604d5":"code","77eed76b":"code","d22fe4db":"code","470c98ec":"code","a453f746":"code","1442a7cf":"code","4706151b":"code","37ca0f56":"code","26279079":"code","2a35d0a1":"code","eeda4828":"code","21b97416":"code","c1b80eb7":"code","eb571030":"code","ef5b82c1":"code","d0eebb53":"code","68db26e8":"code","b125769e":"code","526a9f9d":"code","ed6fb706":"code","504f612b":"code","12a7a5d9":"code","663bbc6f":"code","cc38a5ff":"code","a5f636ab":"code","7674cd38":"code","b2fdcd24":"code","0116c013":"code","954f95fc":"code","c3c3bd56":"code","62341d90":"code","564e1502":"code","daa5a230":"code","02b46546":"code","f1d9ecd7":"code","55cb2941":"markdown","ca9b0507":"markdown","4223e383":"markdown","2043c7ff":"markdown","18feab6d":"markdown","f567adbf":"markdown","06ee4b16":"markdown","7f4ffc74":"markdown","ae61ba22":"markdown","344e88db":"markdown","a7758e05":"markdown","0adeb8fc":"markdown","273a19d7":"markdown","5c547aa3":"markdown","050e6228":"markdown","46d62db9":"markdown","2ef94ad4":"markdown","479f88b0":"markdown","9cd1cf48":"markdown","365b5d78":"markdown","3ca05430":"markdown","4957f7bc":"markdown"},"source":{"28588ffe":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.cbook import boxplot_stats\nfrom sklearn.preprocessing import KBinsDiscretizer\nimport seaborn as sns\nimport datetime","c6d30c16":"df = pd.read_csv('..\/input\/vehicle-dataset-from-cardekho\/car data.csv')\ndf.head()","998b69ce":"df.describe()","de52def2":"df.isnull().any()","5733cf17":"df.Car_Name.value_counts()","6cb505ab":"ax = sns.boxplot(x=df.Year, orient='v')","c82cee1d":"print(boxplot_stats(df.Year)[0])\ndf = df[df.Year >= boxplot_stats(df.Year)[0]['whislo']]","8faa4fa6":"ax = sns.boxplot(x=df.Year, orient='v')","4c07268c":"ax = sns.distplot(df.Year)","0301a2bc":"ax = sns.distplot(df.Present_Price)","49151ac1":"ax = sns.boxplot(x=df.Present_Price, orient='v')","f6cf1e5d":"ax = sns.pairplot(df, y_vars='Selling_Price', x_vars=['Present_Price'], kind='reg', height=5)\nax.fig.suptitle('Selling_Price and Present_Price', fontsize=20, y=1.05)\nax","dc5e3222":"boxplot_stats(df.Present_Price)[0]\ndf = df[df.Present_Price <=  boxplot_stats(df.Present_Price)[0]['whishi']]\nax = sns.boxplot(x=df.Present_Price, orient='v')","2aed0b8c":"ax = sns.distplot(df.Present_Price)","94343293":"k = 4\ndiscr = KBinsDiscretizer(n_bins=k, encode='ordinal', strategy='uniform')\ndf = df.assign(Present_Price_Disc = discr.fit_transform(df.Present_Price.values.reshape(-1,1)) )","541083aa":"[ df[df.Present_Price_Disc == i].Present_Price.plot.density() for i in range(k)]","ee3d7664":"ax = sns.boxplot(x=df.Kms_Driven, orient='v')","10ff9a42":"ax = sns.distplot(df.Kms_Driven)","7f5647fd":"ax = sns.pairplot(df, y_vars='Selling_Price', x_vars=['Kms_Driven'], kind='reg', height=5)\nax.fig.suptitle('Selling_Price and Kms_Driven', fontsize=20, y=1.05)\nax","e14b910a":"boxplot_stats(df.Kms_Driven)[0]\ndf = df[df.Kms_Driven <= boxplot_stats(df.Kms_Driven)[0]['whishi']]\n\nax = sns.pairplot(df, y_vars='Selling_Price', x_vars=['Kms_Driven'], kind='reg', height=5)\nax.fig.suptitle('Selling_Price and Kms_Driven', fontsize=20, y=1.05)\nax","a14e0135":"ax = sns.distplot(df.Kms_Driven)","210afd2f":"k = 4\ndiscr = KBinsDiscretizer(n_bins=k, encode='ordinal', strategy='uniform')\ndf = df.assign(Kms_Driven_Disc = discr.fit_transform(df.Kms_Driven.values.reshape(-1,1)) )","d4f2d9a9":"[df[df.Kms_Driven_Disc == i].Kms_Driven.plot.density() for i in range(k) ]","6817231f":"df.Fuel_Type.value_counts().plot.bar()\ndf.Fuel_Type.value_counts()","0939ff1a":"df.Seller_Type.value_counts().plot.bar()\ndf.Seller_Type.value_counts()","6d5ef026":"df.Transmission.value_counts().plot.bar()\ndf.Transmission.value_counts()","16946a18":"df.Owner.value_counts().plot.bar()\ndf.Owner.value_counts()","e79e94e9":"def Owner_type(x: int) -> str:\n    if x == 0:\n        return 'one_owner'\n    else:\n        return 'more_than_one'\n\ndf = df.assign(Owner_type = df.Owner.apply(Owner_type))\ndf.head()","4f9027fe":"df.Owner_type.value_counts().plot.bar()","b32706d3":"def car_type(c:int, y:int, k:int, o:str) -> str:\n    if ((c-y) <= 3) and (k <= 30000) and (o == 'one_owner'):\n        return 'newest'\n    else:\n        return 'oldest'\n\nnow = datetime.datetime.now()\ndf = df.assign(Car_Type = df.apply(lambda x: car_type(now.year, x.Year, x.Kms_Driven, x.Owner_type), axis=1))\ndf.head()  ","1578d9d6":"df = df.assign(Kms_Year = df.apply(lambda x: (x.Kms_Driven\/x.Year), axis=1))\ndf.head() ","67c7152f":"now = datetime.datetime.now()\ndf = df.assign(Years_Use = df.apply(lambda x: (now.year-x.Year), axis=1))\ndf.head() ","da35406e":"ax = sns.distplot(df.Kms_Year)","d5af65d3":"k = 3\ndiscr = KBinsDiscretizer(n_bins=k, encode='ordinal', strategy='uniform')\ndf = df.assign(Kms_Year_Disc = discr.fit_transform(df.Kms_Year.values.reshape(-1,1)) )","a19e0698":"[df[df.Kms_Year_Disc == i].Kms_Year.plot.density() for i in range(k)]","5c7f3a0d":"ax = sns.boxplot(data=df.Selling_Price, orient='v', width=0.2)\nax.figure.set_size_inches(12,6)\nax.set_title('Selling_Price', fontsize=20)\nax","f07f5ce7":"boxplot_stats(df.Selling_Price)[0]","e4a1eea2":"df = df[df.Selling_Price <= boxplot_stats(df.Selling_Price)[0]['whishi']]","1d853041":"ax = sns.boxplot(y='Selling_Price', x='Car_Type', data=df, orient='v', width=0.5)\nax.figure.set_size_inches(12,6)\nax.set_ylabel('Selling_Price', fontsize=16)\nax.set_xlabel('Car_Type', fontsize=16)\nax","4988e894":"ax = sns.boxplot(y='Selling_Price', x='Seller_Type', data=df, orient='v', width=0.5)\nax.figure.set_size_inches(12,6)\nax.set_ylabel('Selling_Price', fontsize=16)\nax.set_xlabel('Seller_Type', fontsize=16)\nax","d674b2a2":"ax = sns.boxplot(y='Selling_Price', x='Transmission', data=df, orient='v', width=0.5)\nax.figure.set_size_inches(12,6)\nax.set_ylabel('Selling_Price', fontsize=16)\nax.set_xlabel('Transmission', fontsize=16)\nax","458bbd90":"ax = sns.boxplot(y='Selling_Price', x='Year', data=df, orient='v', width=0.5)\nax.figure.set_size_inches(12,6)\nax.set_ylabel('Selling_Price', fontsize=16)\nax.set_xlabel('Year', fontsize=16)\nax","b48604d5":"ax = sns.pairplot(df, y_vars='Selling_Price', x_vars=['Year'], kind='reg', height=5)\nax.fig.suptitle('Selling_Price and Year', fontsize=20, y=1.05)\nax","77eed76b":"ax = sns.distplot(df.Selling_Price)","d22fe4db":"varX = ['Year', 'Years_Use','Present_Price', 'Present_Price_Disc', 'Kms_Driven', 'Kms_Driven_Disc', 'Kms_Year', 'Kms_Year_Disc', 'Owner']\nax = sns.pairplot(df, y_vars='Selling_Price', x_vars=varX, kind='reg')\nax.fig.suptitle('Selling_Price and independent variables', fontsize=20, y=1.05)\nax","470c98ec":"df.corr()","a453f746":"df['Fuel_Type_Transmission'] = df['Fuel_Type'].astype(str) + '_' + df['Transmission'].astype(str)        \ndf['Seller_Type_Owner_type'] = df['Seller_Type'].astype(str) + '_' + df['Owner_type'].astype(str)\ndf['Kms_Year_Disc_Kms_Driven_Disc'] = df['Kms_Year_Disc'].astype(str) + '_' + df['Kms_Driven_Disc'].astype(str)\ndf['Transmission_Car_Type'] = df['Transmission'].astype(str) + '_' + df['Car_Type'].astype(str) \ndf.head()","1442a7cf":"[df[df.Kms_Driven_Disc == i].Selling_Price.plot.density() for i in range(4)]","4706151b":"df[df.Kms_Driven_Disc == 0].Selling_Price.plot.density()\ndf[df.Kms_Driven_Disc != 0].Selling_Price.plot.density()","37ca0f56":"[df[df.Kms_Year_Disc == i].Selling_Price.plot.density() for i in range(3)]","26279079":"df[df.Fuel_Type == 'Petrol'].Selling_Price.plot.density()\ndf[df.Fuel_Type == 'Diesel'].Selling_Price.plot.density()\ndf[df.Fuel_Type == 'CNG'].Selling_Price.plot.density()","2a35d0a1":"df[df.Seller_Type == 'Dealer'].Selling_Price.plot.density()\ndf[df.Seller_Type != 'Dealer'].Selling_Price.plot.density()\ndf.Seller_Type.unique()","eeda4828":"df[df.Fuel_Type_Transmission == 'Petrol_Manual'].Selling_Price.plot.density()\ndf[df.Fuel_Type_Transmission != 'Petrol_Manual'].Selling_Price.plot.density()","21b97416":"df[df.Transmission == 'Manual'].Selling_Price.plot.density()\ndf[df.Transmission != 'Manual'].Selling_Price.plot.density()","c1b80eb7":"[df[df.Present_Price_Disc == i].Selling_Price.plot.density() for i in range(4)]","eb571030":"df[df.Present_Price_Disc == 0].Selling_Price.plot.density()\ndf[df.Present_Price_Disc != 0].Selling_Price.plot.density()","ef5b82c1":"df = df.assign(Present_Price_Disc_type = df.Present_Price_Disc.apply(lambda x: 'yes' if x == 0 else 'no'))","d0eebb53":"df[df.Kms_Driven_Disc.isin([0,1])].Selling_Price.plot.density()\ndf[~df.Kms_Driven_Disc.isin([0,1])].Selling_Price.plot.density()","68db26e8":"df[df.Owner_type == 'one_owner'].Selling_Price.plot.density()\ndf[df.Owner_type != 'one_owner'].Selling_Price.plot.density()","b125769e":"df[df.Car_Type == 'oldest'].Selling_Price.plot.density()\ndf[df.Car_Type != 'oldest'].Selling_Price.plot.density()","526a9f9d":"df[df.Kms_Year_Disc.isin([4,3,0])].Selling_Price.plot.density()\ndf[~df.Kms_Year_Disc.isin([4,3,0])].Selling_Price.plot.density()","ed6fb706":"df[df.Years_Use <= 5].Selling_Price.plot.density()\ndf[df.Years_Use > 5].Selling_Price.plot.density()","504f612b":"df[df.Seller_Type_Owner_type == 'Dealer_one_owner'].Selling_Price.plot.density()\ndf[df.Seller_Type_Owner_type != 'Dealer_one_owner'].Selling_Price.plot.density()","12a7a5d9":"df = df.assign(Dealer_unico_dono = df.Seller_Type_Owner_type.apply(lambda x: 'yes' if x == 'Dealer_one_owner' else 'no'))","663bbc6f":"df[df.Kms_Year_Disc_Kms_Driven_Disc == '0.0_1.0'].Selling_Price.plot.density()\ndf[df.Kms_Year_Disc_Kms_Driven_Disc == '1.0_1.0'].Selling_Price.plot.density()\ndf[df.Kms_Year_Disc_Kms_Driven_Disc == '0.0_0.0'].Selling_Price.plot.density()\ndf[df.Kms_Year_Disc_Kms_Driven_Disc == '1.0_2.0'].Selling_Price.plot.density()\ndf[df.Kms_Year_Disc_Kms_Driven_Disc == '2.0_3.0'].Selling_Price.plot.density()\ndf[df.Kms_Year_Disc_Kms_Driven_Disc == '2.0_2.0'].Selling_Price.plot.density()","cc38a5ff":"df[df.Transmission_Car_Type == 'Automatic_newest'].Selling_Price.plot.density()\ndf[df.Transmission_Car_Type != 'Automatic_newest'].Selling_Price.plot.density()","a5f636ab":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom math import sqrt\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndef yes_no_mapping(x: str) -> int:\n    if x == 'yes':\n        return 1\n    else:\n        return 0\n    \ndef return_model(alg: str):\n    model = None\n    if alg == 'lr':\n        model = LinearRegression()\n    elif alg == 'lasso':\n        model = LassoCV(alphas=np.linspace(0, 5, num=100), cv=KFold(n_splits=k, shuffle=True))\n    elif alg == 'ridge':\n        model = RidgeCV(alphas=np.linspace(0, 5, num=100), cv=KFold(n_splits=k, shuffle=True))\n    \n    return model ","7674cd38":"def build_features(df_train, df_test, mode):\n    mm = MinMaxScaler()\n    ohe = OneHotEncoder(sparse=False)                     \n          \n    if mode == 'full':\n        x_train_mm = mm.fit_transform(df_train[['Year','Present_Price','Kms_Driven','Kms_Year','Years_Use']])\n        x_test_mm = mm.transform(df_test[['Year','Present_Price','Kms_Driven','Kms_Year','Years_Use']])\n        x_train_ohe = ohe.fit_transform(df_train[['Fuel_Type','Seller_Type','Transmission','Owner_type','Car_Type','Present_Price_Disc','Kms_Driven_Disc','Kms_Year_Disc','Fuel_Type_Transmission','Seller_Type_Owner_type','Kms_Year_Disc_Kms_Driven_Disc','Transmission_Car_Type','Present_Price_Disc_type','Dealer_unico_dono']])\n        x_test_ohe = ohe.transform(df_test[['Fuel_Type','Seller_Type','Transmission','Owner_type','Car_Type','Present_Price_Disc','Kms_Driven_Disc','Kms_Year_Disc','Fuel_Type_Transmission','Seller_Type_Owner_type','Kms_Year_Disc_Kms_Driven_Disc','Transmission_Car_Type','Present_Price_Disc_type','Dealer_unico_dono']])\n    elif mode == 'm1':\n        x_train_mm = mm.fit_transform(df_train[['Kms_Year','Present_Price','Years_Use','Kms_Driven']])\n        x_test_mm = mm.transform(df_test[['Kms_Year','Present_Price','Years_Use','Kms_Driven']])\n        x_train_ohe = ohe.fit_transform(df_train[['Fuel_Type_Transmission','Present_Price_Disc','Seller_Type_Owner_type','Kms_Year_Disc_Kms_Driven_Disc', 'Present_Price_Disc_type', 'Transmission_Car_Type']])\n        x_test_ohe = ohe.transform(df_test[['Fuel_Type_Transmission','Present_Price_Disc','Seller_Type_Owner_type','Kms_Year_Disc_Kms_Driven_Disc', 'Present_Price_Disc_type', 'Transmission_Car_Type']])\n    else:\n        x_train_mm = mm.fit_transform(df_train[[ 'Year','Present_Price','Kms_Driven','Kms_Year'  ]])\n        x_test_mm = mm.transform(df_test[[ 'Year','Present_Price','Kms_Driven','Kms_Year'  ]])\n        x_train_ohe = ohe.fit_transform(df_train[['Fuel_Type','Seller_Type','Transmission','Present_Price_Disc','Kms_Driven_Disc','Kms_Year_Disc','Present_Price_Disc_type']])\n        x_test_ohe = ohe.transform(df_test[['Fuel_Type','Seller_Type','Transmission','Present_Price_Disc','Kms_Driven_Disc','Kms_Year_Disc','Present_Price_Disc_type']])\n        \n    x_train = np.hstack([x_train_ohe, x_train_mm])\n    x_test = np.hstack([x_test_ohe, x_test_mm])\n    y_train = df_train.Selling_Price.values.reshape(-1, 1)\n    y_test = df_test.Selling_Price.values.reshape(-1, 1)\n    \n    return x_train, y_train, x_test, y_test","b2fdcd24":"for alg in ['lr', 'lasso', 'ridge']:\n    k = 5\n    mean_r2 = np.zeros(shape=(k, 2))\n    mean_rmse = np.zeros(shape=(k, 2))\n    cv = KFold(n_splits=k, shuffle=True)\n    \n    for fold, (train, test) in enumerate(cv.split(df)):\n        df_train = df.iloc[train]\n        df_test = df.iloc[test]\n        x_train, y_train, x_test, y_test = build_features(df_train, df_test, mode='full')\n        \n        model = return_model(alg)\n        model.fit(x_train, y_train)\n        \n        y_predict_train = model.predict(x_train)\n        rmse_train = sqrt(mean_squared_error(y_train, y_predict_train))\n        r2_train = r2_score(y_train, y_predict_train)\n\n        y_predict_test = model.predict(x_test)\n        rmse_test = sqrt(mean_squared_error(y_test, y_predict_test))  \n        r2_test = r2_score(y_test, y_predict_test)\n\n        mean_rmse[fold, 0] = rmse_train\n        mean_rmse[fold, 1] = rmse_test\n        \n        mean_r2[fold, 0] = r2_train\n        mean_r2[fold, 1] = r2_test\n    \n    print('-' * 50)\n    print('Algoritmo:', alg)\n    print('-' * 50)\n    print('Treino - M\u00e9dia RMSE:', mean_rmse[:,0].mean())\n    print('Teste - M\u00e9dia RMSE:', mean_rmse[:,1].mean())\n    print('-' * 50)\n    print('Treino - M\u00e9dia R2:', mean_r2[:,0].mean())\n    print('Teste - M\u00e9dia R2:', mean_r2[:,1].mean())\n    print('-' * 50)\n    print()  ","0116c013":"for alg in ['lr', 'lasso', 'ridge']:\n    k = 5\n    mean_r2 = np.zeros(shape=(k, 2))\n    mean_rmse = np.zeros(shape=(k, 2))\n    cv = KFold(n_splits=k, shuffle=True)\n    \n    for fold, (train, test) in enumerate(cv.split(df)):\n        df_train = df.iloc[train]\n        df_test = df.iloc[test]\n        x_train, y_train, x_test, y_test = build_features(df_train, df_test, mode='m1')\n        \n        model = return_model(alg)\n        model.fit(x_train, y_train)\n        \n        y_predict_train = model.predict(x_train)\n        rmse_train = sqrt(mean_squared_error(y_train, y_predict_train))\n        r2_train = r2_score(y_train, y_predict_train)\n\n        y_predict_test = model.predict(x_test)\n        rmse_test = sqrt(mean_squared_error(y_test, y_predict_test))  \n        r2_test = r2_score(y_test, y_predict_test)\n\n        mean_rmse[fold, 0] = rmse_train\n        mean_rmse[fold, 1] = rmse_test\n        \n        mean_r2[fold, 0] = r2_train\n        mean_r2[fold, 1] = r2_test\n    \n    print('-' * 50)\n    print('Algoritmo:', alg)\n    print('-' * 50)\n    print('Treino - M\u00e9dia RMSE:', mean_rmse[:,0].mean())\n    print('Teste - M\u00e9dia RMSE:', mean_rmse[:,1].mean())\n    print('-' * 50)\n    print('Treino - M\u00e9dia R2:', mean_r2[:,0].mean())\n    print('Teste - M\u00e9dia R2:', mean_r2[:,1].mean())\n    print('-' * 50)\n    print()  ","954f95fc":"for alg in ['lr', 'lasso', 'ridge']:\n    k = 5\n    mean_r2 = np.zeros(shape=(k, 2))\n    mean_rmse = np.zeros(shape=(k, 2))\n    cv = KFold(n_splits=k, shuffle=True)\n    \n    for fold, (train, test) in enumerate(cv.split(df)):\n        df_train = df.iloc[train]\n        df_test = df.iloc[test]\n        x_train, y_train, x_test, y_test = build_features(df_train, df_test, mode='m2')\n        \n        model = return_model(alg)\n        model.fit(x_train, y_train)\n        \n        y_predict_train = model.predict(x_train)\n        rmse_train = sqrt(mean_squared_error(y_train, y_predict_train))\n        r2_train = r2_score(y_train, y_predict_train)\n\n        y_predict_test = model.predict(x_test)\n        rmse_test = sqrt(mean_squared_error(y_test, y_predict_test))  \n        r2_test = r2_score(y_test, y_predict_test)\n\n        mean_rmse[fold, 0] = rmse_train\n        mean_rmse[fold, 1] = rmse_test\n        \n        mean_r2[fold, 0] = r2_train\n        mean_r2[fold, 1] = r2_test\n    \n    print('-' * 50)\n    print('Algoritmo:', alg)\n    print('-' * 50)\n    print('Treino - M\u00e9dia RMSE:', mean_rmse[:,0].mean())\n    print('Teste - M\u00e9dia RMSE:', mean_rmse[:,1].mean())\n    print('-' * 50)\n    print('Treino - M\u00e9dia R2:', mean_r2[:,0].mean())\n    print('Teste - M\u00e9dia R2:', mean_r2[:,1].mean())\n    print('-' * 50)\n    print()  ","c3c3bd56":"cv = KFold(n_splits=k, shuffle=True)\n\npredicted = list()\nground_truth = list()\nfor fold, (train, test) in enumerate(cv.split(df)):\n    df_train = df.iloc[train]\n    df_test = df.iloc[test]\n\n    x_train, y_train, x_test, y_test = build_features(df_train, df_test, mode='m1')\n        \n    model = return_model('ridge')\n    model.fit(x_train, y_train)\n\n    predicted.extend(model.predict(x_test))\n    ground_truth.extend(y_test)","62341d90":"y_true = pd.DataFrame(ground_truth, columns=[\"Selling_Price\"]) \ny_true=y_true.reset_index()[\"Selling_Price\"]\ny_pred = pd.DataFrame(predicted, columns=[\"predicted\"]) \ny_pred=y_pred.reset_index()[\"predicted\"]\nresiduals = y_true - y_pred","564e1502":"ax = sns.distplot(residuals)","daa5a230":"ax = sns.scatterplot(x=y_pred, y=residuals, s=100)\nax.figure.set_size_inches(20,8)\nax.set_title('Residual X Predict', fontsize=18, y=1.05)\nax.set_xlabel('Selling Price (y_pred)', fontsize=14)\nax.set_ylabel('Residuals', fontsize=14)\nax","02b46546":"ax = sns.scatterplot(x=y_pred, y=y_true)\nax.figure.set_size_inches(12,6)\nax.set_title('y_pred X y_true', fontsize=18, y=1.05)\nax.set_xlabel('Selling Price - Predict', fontsize=14)\nax.set_ylabel('Selling Price - Real', fontsize=14)\nax","f1d9ecd7":"ax=y_true.plot(label=\"y_true\",color=\"b\")\nax.figure.set_size_inches(12,6)\nax=y_pred.plot(label = \"y_pred\",color=\"g\")\nax.figure.set_size_inches(12,6)\nplt.legend()\nplt.title(\"y_true x y_pred\")\nplt.xlabel(\"index\")\nplt.ylabel(\"value\")\nplt.show()","55cb2941":"Using all features","ca9b0507":"Created a new column Kms_Driven_Disc with discrete data od KMS_Driven.","4223e383":"Create four new variables for testing later","2043c7ff":"Seller_Type can help to identify the dependent variable. Has different behaviors according to Selling_Price","18feab6d":"This separation of Present_Price_Disc helps to identify the dependent variable","f567adbf":"New column for Kms_Driven by Year","06ee4b16":"Kms_Driven also has outliers, the regression line can't identify a relation between the variables.","7f4ffc74":"There is some outliers on Present_Price column, they'll be removed.","ae61ba22":"Created a new column called Present_Price_Disc with a discrete separation for Present_Price column","344e88db":"New column for car usage time.","a7758e05":"Creating a new column to try to separate the newest and oldest cars:<br>\n - Owner_Type = 0<br>\n - Kms_Driven between 20,000 and 30,000<br>\n - Year betwenn 2 and 3","0adeb8fc":"Checking the relationship of categorical variables to the dependent variable","273a19d7":"First combination of features","5c547aa3":"Created a column with discrete data for Kms_Year","050e6228":"The ridge algorithm of the second combination of features has the best R\u00b2 for test (0.89535) and the lower RMSE too.<br>\n","46d62db9":"Starting the prediction with linear regression, lasso and ridge","2ef94ad4":"Residuals distribution","479f88b0":"Removing outliers","9cd1cf48":"The combination of the Seller_Type and Owner_type columns where the value is 'Dealer_one_owner' can help to identify the dependent variable","365b5d78":"Here the features will be treated, three combinations of features will be tested and the result will be measured","3ca05430":"Basic stats","4957f7bc":"Second combination of features"}}