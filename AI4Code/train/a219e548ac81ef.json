{"cell_type":{"4b077c7a":"code","8457f8f6":"code","8bc84654":"code","535908b0":"code","ea1f8f73":"code","c589bcdd":"code","2fb6c7dd":"code","de663f2c":"code","98f97180":"code","712d9fe1":"code","0a996f28":"code","d2bcb4a5":"code","8ca321ed":"code","450fe17f":"code","b5e5c4e8":"code","7a4daebe":"code","738f5c86":"code","7cd8fb60":"code","a1ed5419":"code","00c8d2d0":"code","f06ed65d":"markdown","8d5fe205":"markdown","c9479713":"markdown","b7def00b":"markdown","66ea7d8f":"markdown","42170d37":"markdown","3ffadc82":"markdown","45d6a8d4":"markdown"},"source":{"4b077c7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8457f8f6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom tensorflow.python.keras.utils import np_utils","8bc84654":"data_train= pd.read_csv(\"..\/input\/heartbeat\/mitbih_train.csv\")","535908b0":"data_train.info()","ea1f8f73":"data_train.iloc[:,-1].value_counts()","c589bcdd":"data_test= pd.read_csv(\"..\/input\/heartbeat\/mitbih_test.csv\")","2fb6c7dd":"data_test.info()","de663f2c":"data_test.iloc[:,-1].value_counts()","98f97180":"x_train = data_train.iloc[:,0:187]\ny_train= data_train.iloc[:,-1]\nx_test= data_test.iloc[:,0:187]\ny_test= data_test.iloc[:,-1]","712d9fe1":"y_train.value_counts()","0a996f28":"y_test.value_counts()","d2bcb4a5":"from sklearn.preprocessing import LabelEncoder\n\nencoder = LabelEncoder()\n\nencoder.fit(y_train)\n\ny_train_enc= encoder.transform(y_train)\ny_test_enc= encoder.transform(y_test)\n\ny_train_cat= np_utils.to_categorical(y_train_enc)\ny_test_cat= np_utils.to_categorical(y_test_enc)\n","8ca321ed":"y_train_f= pd.DataFrame(y_train_cat)\ny_train_f.value_counts()","450fe17f":"y_test_f= pd.DataFrame(y_test_cat)\ny_test_f.value_counts()","b5e5c4e8":"from tensorflow import keras\nfrom tensorflow.keras import layers\nfrom tensorflow.keras.callbacks import EarlyStopping\n\nmodel = keras.Sequential([\n    layers.BatchNormalization(input_shape=[187]),\n    layers.Dense(256, activation='relu'),\n    layers.Dropout(0.3),\n    layers.BatchNormalization(),\n    layers.Dense(256, activation='relu'),\n    layers.Dropout(0.3),\n    layers.BatchNormalization(),\n    layers.Dense(256, activation='relu'),\n    layers.Dropout(0.3),\n    layers.BatchNormalization(),\n    layers.Dense(256, activation='relu'),\n    layers.Dropout(0.3),\n    layers.BatchNormalization(),\n    layers.Dense(5, activation='softmax'),\n])\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy', \n    metrics=['accuracy'])\n\n\nearly_stopping = EarlyStopping(\n    min_delta=0.001, # minimium amount of change to count as an improvement\n    patience=50, # how many epochs to wait before stopping\n    restore_best_weights=True,\n)","7a4daebe":"history = model.fit(\n    x_train, y_train_f,\n    validation_data=(x_test, y_test_f),\n    batch_size=3000,\n    epochs=250,\n    callbacks=[early_stopping],\n    verbose=0,  \n)\n\nhistory_df = pd.DataFrame(history.history)","738f5c86":"history_df.loc[:, ['loss', 'val_loss']].plot()\nhistory_df.loc[:, ['accuracy', 'val_accuracy']].plot()\n\nprint((\"Best Validation Loss: {:0.4f}\" +\\\n      \"\\nBest Validation Accuracy: {:0.4f}\")\\\n      .format(history_df['val_loss'].min(), \n              history_df['val_accuracy'].max()))","7cd8fb60":"from sklearn.metrics import classification_report, confusion_matrix,accuracy_score\n\npreds_1 = model.predict(x_test)\npreds_1_rounded = np.round(preds_1)\n","a1ed5419":"y_test_fn = np.array(y_test_f)","00c8d2d0":"print(classification_report(np.argmax(y_test_fn, axis = 1), np.argmax(preds_1_rounded, axis = 1)))","f06ed65d":"# Neural Network","8d5fe205":"As we can observe, the classes are not balanced; then we can expect the model perform better in the classes with more samples","c9479713":"get some info of the data","b7def00b":"Due to the preprocessing of the target we can see that the number identification of the classes has changed (number of support in each class)\n\nthen this can be interpreted with the original identities of each class.","66ea7d8f":"In this part we are going to preprocess the target on both set for building a model ","42170d37":"### In this notebook we are gonna work with the MIT-BIH Arrhythmia Dataset ","3ffadc82":"# Preprocessing","45d6a8d4":"# EDA"}}