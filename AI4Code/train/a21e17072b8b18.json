{"cell_type":{"f3d9a81a":"code","f8ece473":"code","251566dc":"code","1a9b198e":"code","e738dbcf":"code","e0bd9df2":"code","31eb010f":"code","e672d414":"code","27b940f6":"code","0fc8e2fd":"code","8e4f3def":"code","f2a15834":"code","6dab87c4":"code","ee973be4":"code","7c973358":"code","b0a12db0":"code","af6d29ef":"code","a0307491":"code","ab4479df":"code","f8ebacbc":"code","801e8395":"code","d8dae1f1":"code","31f140e1":"code","ec331200":"code","f38253a7":"code","d1442194":"code","e97abea4":"code","c543ac29":"code","13625160":"code","f95a9dac":"code","c7dbad84":"code","f0df3d50":"code","9197ba68":"code","ddbf16b5":"code","1614e6bc":"code","4db09ad8":"code","1959f8b8":"code","6319bbb4":"code","faec710f":"code","6bd84fe9":"code","2074df96":"markdown","1aa8e466":"markdown","fdb14780":"markdown","22ad5510":"markdown","7fa69a62":"markdown","52cf28d2":"markdown","1853759a":"markdown","79e62af5":"markdown","1019beba":"markdown","2f726b3e":"markdown","a97218eb":"markdown","d3e43f13":"markdown","47bebf3d":"markdown","d209b6df":"markdown","aa6bf64e":"markdown","de54a6b2":"markdown","c5b55f6f":"markdown","5a197558":"markdown","3adc6dd8":"markdown","6d0c51de":"markdown","12921def":"markdown","840e937f":"markdown","47bb862a":"markdown","86c94532":"markdown","17df2d37":"markdown","0d44874d":"markdown","8bcfefc5":"markdown","bb73b5f2":"markdown","4946318c":"markdown","f46e82dc":"markdown","2d3eb958":"markdown","bc6b7944":"markdown","ab538c0a":"markdown","38c37740":"markdown","ad6f97a0":"markdown","a1fc7b31":"markdown","eb6661f0":"markdown","572a79ab":"markdown"},"source":{"f3d9a81a":"%matplotlib inline\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport random as rd\nimport statsmodels.api as sm\nimport warnings\nwarnings.filterwarnings('ignore')\nplt.style.use('seaborn-paper')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f8ece473":"df = pd.read_csv(\"\/kaggle\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\", index_col=0)","251566dc":"df.head(5)","1a9b198e":"df['neighbourhood_group'].value_counts()","e738dbcf":"df.info()","e0bd9df2":"df = df.dropna(subset=['name', 'host_name', 'last_review', 'reviews_per_month'])","31eb010f":"#\uacb0\uce21\uce58 \uc0ad\uc81c\ub410\ub294\uc9c0 \ud655\uc778\ndf.isnull().sum()","e672d414":"df.describe()","27b940f6":"#\uac00\uaca9 $0 \uc219\uc18c \uc0ad\uc81c\ndf = df[df.price != 0]\n\n#\uc774\uc6a9 \uac00\ub2a5 \uc77c\uc218 0\uc77c \uc219\uc18c \uc0ad\uc81c\ndf = df[df.availability_365 != 0]","0fc8e2fd":"binslist = np.arange(0, max(df['minimum_nights']+1), 5)\nplt.hist(df['minimum_nights'], bins =binslist)\nplt.xlabel('minimum nights')\nplt.ylabel('frequency')\nplt.title('Histogram of Minimum Nights')\nplt.grid(True)\nplt.show()","8e4f3def":"#\ucd5c\uc18c \uc219\ubc15 \uc77c\uc218\uc758 \ud37c\uc13c\ud2b8 \ubd84\ud3ec \ud50c\ub86f\na = df['minimum_nights']\np = np.linspace(0, 100, 100)\nax = plt.gca()\n\nax.plot(p, np.percentile(a, p, interpolation='linear'), linestyle=None)\nax.set(\n    title='Percentile Distribution for Minimum Nights',\n    xlabel='Percentile',\n    ylabel='List item returned',\n    yticks=a)\nax.legend()\nplt.show()","f2a15834":"#\ucd5c\uc18c \uc219\ubc15 \uc77c\uc218\uc758 \ud37c\uc13c\ud2b8 \ubd84\ud3ec \uc5b4\ub808\uc774\ncontent = np.percentile(df['minimum_nights'], p, interpolation='nearest')","6dab87c4":"#\ucd5c\uc18c \uc219\ubc15 \uc77c\uc218\uac00 \ubcc0\ud560 \ub54c\ub9c8\ub2e4 \ud37c\uc13c\ud2b8 \ucd9c\ub825\ndef minimum_nights_percentage_to_string(start, stop, step):\n    p = np.arange(start, stop, step)\n    prev = 'start'\n    try:\n        for i in p:\n            if prev != content[i]:\n                msg = '\ucd5c\uc18c \uc219\ubc15 \uc77c\uc218\uac00 ' + str(content[i]) + '\uc77c \uc774\ub0b4\uc5d0 \ubd84\ud3ec\ud558\ub294 \uc219\uc18c\ub294 \uc804\uccb4 \ub370\uc774\ud130\uc758 ' + str(i) + '\ud37c\uc13c\ud2b8\uc785\ub2c8\ub2e4.'\n                print(msg)\n                prev = content[i]\n    except IndexError:\n        pass\nminimum_nights_percentage_to_string(0, 101, 1)","ee973be4":"#\ucd5c\uc18c \uc219\ubc15 \uc77c\uc218\uac00 32\uc77c \uc774\uc0c1\uc778 \ub370\uc774\ud130\uc758 \uc218 \ud655\uc778 \ubc0f \ucd9c\ub825\ntemp = sum(df.minimum_nights > 31)\nprint(temp) \n\n#\ucd5c\uc18c \uc219\ubc15 \uc77c\uc218\uac00 32\uc77c \uc774\uc0c1\uc778 \ub370\uc774\ud130 \uc0ad\uc81c \ubc0f \ucd9c\ub825\ndf = df[df.minimum_nights <= 31] # 225\uac1c \ud589 \uc0ad\uc81c, 25913\uac1c \ud589 \ub0a8\uc74c.\nprint(sum(df.minimum_nights <= 31))","7c973358":"binslist = np.arange(0, max(df['price']+1), 5)\nplt.hist(df['price'], bins =binslist)\nplt.xlabel('price')\nplt.ylabel('frequency')\nplt.title('Histogram of NYC Room Prices($) in 2019 ')\nplt.grid(True)\nplt.show()","b0a12db0":"#\uac00\uaca9\uc758 \ud37c\uc13c\ud2b8 \ubd84\ud3ec \ud50c\ub86f\np = np.linspace(0, 100, 100)\nax = plt.gca()\n\nax.plot(p, np.percentile(df['price'], p, interpolation='linear'), linestyle=None)\nax.set(\n    title='Percentile Distribution for price',\n    xlabel='Percentile',\n    ylabel='List item returned',\n    yticks=a)\nax.legend()\nplt.show()","af6d29ef":"#\uac00\uaca9\uc758 \ud37c\uc13c\ud2b8 \ubd84\ud3ec \uc5b4\ub808\uc774\np = np.linspace(0, 100, 100)\nprice_list = np.percentile(df['price'], p, interpolation='nearest')","a0307491":"# \uac00\uaca9\uc774 50\ub2ec\ub7ec \uc774\uc0c1 \ucc28\uc774\ub098\ub294 \ud37c\uc13c\ud2b8 \uad6c\uac04\ub9cc \ucd9c\ub825\ndef price_percentage_to_string(start, stop, step):\n    try:\n        p = np.arange(start, stop, step)\n        prev = 0\n        for i in p:\n            if price_list[i]-prev>=50: \n             #if price_list[i] != prev:\n                msg = '\uac00\uaca9\uc774 $' + str(price_list[i]) +' \uc774\ub0b4\uc5d0 \ubd84\ud3ec\ud558\ub294 \uc219\uc18c\ub294 \uc804\uccb4 \ub370\uc774\ud130\uc758 ' + str(i) + '\ud37c\uc13c\ud2b8\uc785\ub2c8\ub2e4.'\n                print(msg)\n                prev = price_list[i]\n    except IndexError:\n        pass\nprice_percentage_to_string(0, 100, 1)","ab4479df":"#\uac00\uaca9\uc774 $750 \uc774\uc0c1\uc778 \ub370\uc774\ud130 \uc0ad\uc81c \ubc0f \ucd9c\ub825\ndf = df[df.price <= 749] # 263\uac1c \ud589 \uc0ad\uc81c, 25650\uac1c \ud589 \ub0a8\uc74c.\nprint(sum(df.price <= 749))","f8ebacbc":"import pandas_profiling\n\n# \ub808\ud3ec\ud2b8 \uc0dd\uc131 --> html \ud30c\uc77c\ub85c \uc800\uc7a5\ud558\uae30  \nreport = df.profile_report()\nreport.to_file('.\/report.html')","801e8395":"#neighbour_group \ubcc4\ub85c \uac00\uaca9 \ubd84\ud3ec \uadf8\ub824\ubcf4\uae30\ndf.boxplot(column=[\"price\"], by=[\"neighbourhood_group\"])\nplt.show()","d8dae1f1":"#room_type \ubcc4\ub85c \uac00\uaca9 \ubd84\ud3ec \uadf8\ub824\ubcf4\uae30\ndf.boxplot(column=[\"price\"], by=[\"room_type\"])\nplt.show()","31f140e1":"#neighbour_group \ubcc4\ub85c \uac00\uaca9 \ubd84\ud3ec \uadf8\ub824\ubcf4\uae30\ndf.boxplot(column=[\"price\"], by=[\"neighbourhood_group\", \"room_type\"])\nplt.show()","ec331200":"#\uc0c1\uad00\uad00\uacc4 \ud1b5\uacc4\ndf.corr(method='spearman', min_periods=1)","f38253a7":"# \uc0c1\uad00\uad00\uacc4 \ud788\ud2b8\ub9f5\n# \uadf8\ub9bc \uc0ac\uc774\uc988 \uc9c0\uc815\nfig, ax = plt.subplots( figsize=(7,7) )\n\n# \uc0bc\uac01\ud615 \ub9c8\uc2a4\ud06c\ub97c \ub9cc\ub4e0\ub2e4(\uc704 \ucabd \uc0bc\uac01\ud615\uc5d0 True, \uc544\ub798 \uc0bc\uac01\ud615\uc5d0 False)\nmask = np.zeros_like(df.corr(), dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\n# \ud788\ud2b8\ub9f5\uc744 \uadf8\ub9b0\ub2e4\nsns.heatmap(df.corr(method='spearman'), \n            cmap = 'RdYlBu_r', \n            annot = True,   # \uc2e4\uc81c \uac12\uc744 \ud45c\uc2dc\ud55c\ub2e4\n            mask=mask,      # \ud45c\uc2dc\ud558\uc9c0 \uc54a\uc744 \ub9c8\uc2a4\ud06c \ubd80\ubd84\uc744 \uc9c0\uc815\ud55c\ub2e4\n            linewidths=.5,  # \uacbd\uacc4\uba74 \uc2e4\uc120\uc73c\ub85c \uad6c\ubd84\ud558\uae30\n            cbar_kws={\"shrink\": .5},# \uceec\ub7ec\ubc14 \ud06c\uae30 \uc808\ubc18\uc73c\ub85c \uc904\uc774\uae30\n            vmin = -1,vmax = 1   # \uceec\ub7ec\ubc14 \ubc94\uc704 -1 ~ 1\n           )  \nplt.show()","d1442194":"df['intercept'] = 1\ndf_new = df.join(pd.get_dummies(df.neighbourhood_group))\nsm.OLS(df_new['price'], df_new[['Bronx', 'Brooklyn', 'Manhattan','Queens', 'Staten Island', 'intercept']]).fit().summary()","e97abea4":"df['intercept'] = 1\ndf_new = df.join(pd.get_dummies(df.neighbourhood_group))\nsm.OLS(df_new['price'], df_new[['Brooklyn', 'Manhattan','Queens', 'Staten Island', 'intercept']]).fit().summary()","c543ac29":"df['intercept'] = 1\ndf_new = df.join(pd.get_dummies(df.room_type))\nsm.OLS(df_new['price'], df_new[['Entire home\/apt', 'Shared room', 'intercept']]).fit().summary()","13625160":"manhattan_df = df[df.neighbourhood_group==\"Manhattan\"]\nbronx_df = df[df.neighbourhood_group==\"Bronx\"]\nqueens_df = df[df.neighbourhood_group==\"Queens\"]\nstaten_df = df[df.neighbourhood_group==\"Staten Island\"]\nbrooklyn_df = df[df.neighbourhood_group==\"Brooklyn\"]","f95a9dac":"manhattan_df['intercept'] = 1\nmanhattan_df_new = manhattan_df.join(pd.get_dummies(manhattan_df.neighbourhood))\nsm.OLS(manhattan_df_new['price'], manhattan_df_new[['Murray Hill', \"Hell's Kitchen\", 'Chinatown', 'Upper West Side', 'Chelsea', 'Inwood', 'East Village', 'Harlem', 'Lower East Side', 'Kips Bay', 'SoHo', 'Upper East Side', 'East Harlem', 'Washington Heights', 'West Village', 'Morningside Heights', 'NoHo', 'Flatiron District', 'Roosevelt Island', 'Greenwich Village', 'Little Italy', 'Two Bridges', 'Nolita', 'Gramercy', 'Theater District', 'Tribeca', 'Financial District', 'Civic Center', 'Battery Park City', 'Stuyvesant Town', 'Marble Hill', 'intercept']]).fit().summary()","c7dbad84":"brooklyn_df['intercept'] = 1\nbrooklyn_df_new = brooklyn_df.join(pd.get_dummies(brooklyn_df.neighbourhood))\nsm.OLS(brooklyn_df_new['price'], brooklyn_df_new[['Clinton Hill', 'South Slope', 'Williamsburg',\n       'Fort Greene', 'Crown Heights', 'Park Slope', 'Bedford-Stuyvesant',\n       'Windsor Terrace', 'Greenpoint', 'Bushwick',\n       'Prospect-Lefferts Gardens', 'Prospect Heights', 'Flatbush',\n       'Carroll Gardens', 'Gowanus', 'Flatlands', 'Boerum Hill', 'DUMBO',\n       'Cobble Hill', 'East Flatbush', 'Brooklyn Heights',\n       'East New York', 'Sheepshead Bay', 'Fort Hamilton', 'Bensonhurst',\n       'Brighton Beach', 'Bay Ridge', 'Columbia St', 'Canarsie',\n       'Sunset Park', 'Gravesend', 'Cypress Hills', 'Borough Park',\n       'Downtown Brooklyn', 'Midwood', 'Red Hook', 'Dyker Heights',\n       'Navy Yard', 'Brownsville', 'Vinegar Hill', 'Manhattan Beach',\n       'Bergen Beach', 'Coney Island', 'Bath Beach', 'Mill Basin',\n       'Sea Gate', 'intercept']]).fit().summary()","f0df3d50":"bronx_df['intercept'] = 1\nbronx_df_new = bronx_df.join(pd.get_dummies(bronx_df.neighbourhood))\nsm.OLS(bronx_df_new['price'], bronx_df_new[['Eastchester', 'Kingsbridge', 'Woodlawn', 'University Heights', 'Allerton', 'Concourse Village', 'Concourse', 'Wakefield', 'Spuyten Duyvil', 'Mott Haven', 'Longwood', 'Morris Heights', 'Port Morris', 'Fieldston', 'Mount Eden', 'Williamsbridge', 'Soundview', 'Co-op City', 'City Island', 'North Riverdale', 'Riverdale', 'Norwood', 'Claremont Village', 'Fordham', 'Mount Hope', 'Clason Point', 'Van Nest', 'East Morrisania', 'Hunts Point', 'Pelham Bay', 'Throgs Neck', 'West Farms', 'Pelham Gardens', 'Parkchester', 'Baychester', 'Bronxdale', 'Melrose', 'Tremont', 'Schuylerville', 'Castle Hill', 'Morris Park', 'Edenwald', 'Morrisania', 'Westchester Square', 'Unionport', 'Belmont', 'Olinville', 'intercept']]).fit().summary()","9197ba68":"queens_df['intercept'] = 1\nqueens_df_new = queens_df.join(pd.get_dummies(queens_df.neighbourhood))\nsm.OLS(queens_df_new['price'], queens_df_new[['Woodside', 'Flushing', 'Sunnyside', 'Ridgewood', 'Jamaica', 'Middle Village', 'Ditmars Steinway', 'Astoria', 'Rockaway Beach', 'Forest Hills', 'Elmhurst', 'Jackson Heights', 'Ozone Park', 'Briarwood', 'East Elmhurst', 'Rego Park', 'Arverne', 'Bayside', 'Kew Gardens', 'College Point', 'Glendale', 'Richmond Hill', 'Queens Village', 'St. Albans', 'Maspeth', 'Woodhaven', 'Kew Gardens Hills', 'Bay Terrace', 'Whitestone', 'Bayswater', 'Springfield Gardens', 'Howard Beach', 'Belle Harbor', 'Jamaica Estates', 'Bellerose', 'Fresh Meadows', 'Far Rockaway', 'South Ozone Park', 'Corona', 'Neponsit', 'Laurelton', 'Holliswood', 'Rosedale', 'Edgemere', 'Cambria Heights', 'Douglaston', 'Little Neck', 'Hollis', 'Breezy Point', 'Jamaica Hills', 'intercept']]).fit().summary()","ddbf16b5":"staten_df['intercept'] = 1\nstaten_df_new = staten_df.join(pd.get_dummies(staten_df.neighbourhood))\nsm.OLS(staten_df_new['price'], staten_df_new[['Tompkinsville', 'Emerson Hill', 'Shore Acres', 'Arrochar', 'Clifton', 'Graniteville', 'Stapleton', 'New Springville', 'Tottenville', 'Mariners Harbor', 'Concord', 'Eltingville', 'Lighthouse Hill', 'West Brighton', 'Great Kills', 'Randall Manor', 'Silver Lake', 'Castleton Corners', 'New Brighton', 'Richmondtown', 'Howland Hook', 'South Beach', 'Midland Beach', 'Oakwood', 'Huguenot', 'Dongan Hills', 'Grant City', 'Port Richmond', 'Westerleigh', 'Rosebank', 'Arden Heights', 'Grymes Hill', 'Rossville', 'Willowbrook', 'New Dorp Beach', 'Todt Hill', \"Bull's Head\", \"Prince's Bay\", 'intercept']]).fit().summary()","1614e6bc":"df2 = df[[\"latitude\", \"longitude\", \"room_type\",\"price\", \"minimum_nights\", \"number_of_reviews\", \"last_review\", \"availability_365\"]]\ndf2","4db09ad8":"import plotly_express as px\npx.set_mapbox_access_token(\"pk.eyJ1Ijoic2hha2Fzb20iLCJhIjoiY2plMWg1NGFpMXZ5NjJxbjhlM2ttN3AwbiJ9.RtGYHmreKiyBfHuElgYq_w\")\npx.scatter_mapbox(df2, lat=\"latitude\", lon=\"longitude\", zoom=9)","1959f8b8":"df2[\"geom\"] =  df2[\"latitude\"].map(str)  + ',' + df2['longitude'].map(str)\ndf2.head()","6319bbb4":"from geopy.geocoders import Nominatim\nfrom geopy.extra.rate_limiter import RateLimiter\nimport tqdm\nfrom tqdm import tqdm\nfrom tqdm._tqdm_notebook import tqdm_notebook","faec710f":"locator = Nominatim(user_agent=\"myGeocoder\", timeout=10)\nrgeocode = RateLimiter(locator.reverse, min_delay_seconds=0.001)\nrgeocode","6bd84fe9":"#50\uc77c \uac78\ub9b0\ub2e8\ub2e4 \u3160\u3160 \uc5b4\ub5a1\ud558\uc9c0?\n#tqdm.pandas()\n#df2['address'] = df2['geom'].progress_apply(rgeocode)","2074df96":"# \uc704\ub3c4, \uacbd\ub3c4\ub97c \uc8fc\uc18c\ub85c \ubcc0\ud658\n\ud544\uc694\ud55c \uac74 \uc544\ub2c8\uace0 \uadf8\ub0e5 \ud574\ubcf4\uace0 \uc2f6\uc5b4\uc11c","1aa8e466":"# \uc8fc\uc694 \ud1b5\uacc4 \uc0b4\ud3b4\ubcf4\uae30 - \ucd5c\uc18c \uc219\ubc15 \uc77c\uc218 - \uadf8\ub798\ud504\ub85c \ud655\uc778","fdb14780":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 neighbourhood\uc640 \uc218\uce58\ud615 \ubcc0\uc218 price\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d - Staten Island \ub300\uc0c1","22ad5510":"# \ub3c5\ub9bd\ubcc0\uc218\uc640 \uc885\uc18d\ubcc0\uc218 \ubd84\ud3ec \uadf8\ub798\ud504\ub85c \ubcf4\uae30 \n\ub3c5\ub9bd\ubcc0\uc218: neighbourhood_group, room_type, latitude, longitude\n\uc885\uc18d\ubcc0\uc218: price","7fa69a62":"\ud574\uc57c \ud558\ub294 \uc77c\n1. Bronx, Staten Island \uc0ad\uc81c \uc5ec\ubd80 \ub17c\uc758\n1. \uc0c8\ub85c \ubc1c\uacac\ud55c \uceec\ub7fc \uc804\ucc98\ub9ac(\uacb0\uce21\uce58, \uc774\uc0c1\uce58, \uc911\ubcf5 \ub9e4\ubb3c \ucc3e\uae30)\n1. \uc0c8\ub85c \ubc1c\uacac\ud55c \uce7c\ub7fc \uc911 price\uc5d0 \uc601\ud5a5\uc744 \uc904\ub9cc\ud55c \uc694\uc778 \uac78\ub7ec\ub0b4\uae30\n1. \uc801\uc815 price\ub97c \uc608\uce21\ud558\uae30 \uc704\ud55c \ubd84\uc11d \ubaa8\ub378 \ud6c4\ubcf4 \ucc3e\uae30\n1. \ubd84\uc11d \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \uce21\uc815\ud560 \ud3c9\uac00 \ubaa8\ub378 \ud6c4\ubcf4 \ucc3e\uae30\n1. \ubd84\uc11d \ubaa8\ub378 - \ud3c9\uac00 \ubaa8\ub378 \uc5ec\ub7ec \uac1c\ub97c \uc9c1\uc811 \ub3cc\ub824\ubcf4\uace0 \uc131\ub2a5 \ube44\uad50\ud558\uae30\n","52cf28d2":"'Highbridge'\ub97c baseline variable\ub85c \uc0bc\uc740 \uacb0\uacfc.\n\uadf8\ub798\ub3c4 \uc2e0\ub8b0\uad6c\uac04\uc774 \ub108\ubb34 \ub113\ub2e4. \ub370\uc774\ud130 \uc218\uac00 \uc801\uae30 \ub54c\ubb38\uc778\uac78\uae4c?","1853759a":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 neighbourhood\uc640 \uc218\uce58\ud615 \ubcc0\uc218 price\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d - Manhattan \ub300\uc0c1","79e62af5":"Columns Information\n* id: \uc219\uc18c \uc2dd\ubcc4\uc790\n* name: \uc219\uc18c \uc774\ub984\n* host_id: \ud638\uc2a4\ud2b8 \uc2dd\ubcc4\uc790\n* host_name: \ud638\uc2a4\ud2b8 \uc774\ub984\n* neighbourhood_group: \uc219\uc18c\uac00 \uc704\uce58\ud55c \ud589\uc815\uc790\uce58\uad6c(Manhattan, Brooklyn, Queens, Bronx, Staten island)\n* neighbourhood: \uc219\uc18c\uac00 \uc704\uce58\ud55c \ub3d9\ub124\n* latitude: \uc704\ub3c4\n* longitude: \uacbd\ub3c4\n* room_type: \uc219\uc18c \ud615\ud0dc(\uac1c\uc778 \ubc29, \uc9d1 \uc804\uccb4, \uacf5\uc720 \ubc29,,) \t\n* price: 1\uc77c \uc219\ubc15\ube44\n* minimum_nights: \ucd5c\uc18c \uc219\ubc15 \uac00\ub2a5 \uc77c\uc218\n* number_of_reviews: \ucd1d \ub9ac\ubdf0 \uc218\n* last_review: \uac00\uc7a5 \ucd5c\uadfc \ub9ac\ubdf0\uc758 \uc791\uc131\uc77c\n* reviews_per_month: \uc6d4 \ud3c9\uade0 \ub9ac\ubdf0 \uc218\n* calculated_host_listings_count: \ub3d9\uc77c\ud55c \ud638\uc2a4\ud2b8\uac00 \ub0b4\ub193\uc740 \uc219\uc18c \ub9e4\ubb3c\uc758 \uc218\n* availability_365: \uc5f0\uc911 \uc774\uc6a9 \uac00\ub2a5 \uc77c\uc218","1019beba":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 neighbourhood\uc640 \uc218\uce58\ud615 \ubcc0\uc218 price\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d - Brooklyn \ub300\uc0c1","2f726b3e":"\ucd5c\uc18c \uc219\ubc15 \uc77c\uc218\uc640 \uc6d4\ubcc4 \ub9ac\ubdf0 \uc218\ub294 \uc57d\ud55c \uc74c\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uac16\ub294\ub2e4","a97218eb":"1\uc77c \uc774\uc0c1 3\uc77c \uc774\ud558\uc5d0 \ubd84\ud3ec\ud558\ub294 \uc219\uc18c\ub294 \uc804\uccb4 \ub370\uc774\ud130\uc758 50%,\n\n4\uc77c \uc774\uc0c1 7\uc77c \uc774\ud558\uc5d0 \ubd84\ud3ec\ud558\ub294 \uc219\uc18c\ub294 \uc804\uccb4 \ub370\uc774\ud130\uc758 30%,\n\n8\uc77c \uc774\uc0c1 31\uc77c \uc774\ud558\uc5d0 \ubd84\ud3ec\ud558\ub294 \uc219\uc18c\ub294 \uc804\uccb4 \ub370\uc774\ud130\uc758 20%\uc774\ub2e4. \n\n\ucd5c\uc18c \uc219\ubc15 \uc77c\uc218 \uad6c\uac04\uc744 \ub098\ub208\ub2e4\uba74\n\n\ub2e8\uae30, \uc911\uae30, \uc7a5\uae30\ub85c \ub098\ub20c \uac83\uc744 \uc81c\uc548\ud55c\ub2e4. \n\n","d3e43f13":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 neighbourhood_group\uacfc \uc218\uce58\ud615 \ubcc0\uc218 price\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d","47bebf3d":"# \uc8fc\uc694 \ud1b5\uacc4 \uc0b4\ud3b4\ubcf4\uae30 - \ucd5c\uc18c \uc219\ubc15 \uc77c\uc218 - \uc22b\uc790\ub85c \ud655\uc778","d209b6df":"'Private room'\uc744 intecept(baseline variable)\ub85c \uc7a1\uc740 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d \uacb0\uacfc\ub2e4.\n\n1\uc77c \ud3c9\uade0 \uc219\ubc15\ube44\ub294 Entire home\/apt($190)>Private room($82)>Shared room($56) \uc21c\uc11c\ub85c \ube44\uc30c\ub2e4. \n\np-value\uac00 0\uc774\uace0, \uc2e0\ub8b0 \uad6c\uac04\uc774 \uc11c\ub85c \uacb9\uce58\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 room type\uc5d0 \ub530\ub978 \uac00\uaca9\uc740 \uc720\uc758\ubbf8\ud55c \ucc28\uc774\ub97c \ubcf4\uc600\ub2e4.","aa6bf64e":"# \uc804\ucc98\ub9ac \uacb0\uacfc review","de54a6b2":"# \uc8fc\uc694 \ud1b5\uacc4 \uc0b4\ud3b4\ubcf4\uae30 - \uac00\uaca9 - \uadf8\ub798\ud504\ub85c \ud655\uc778","c5b55f6f":"\uc2e0\ub8b0 \uad6c\uac04\uc758 \ubc94\uc704\uac00 \uc544\uc8fc \ucee4\uc11c \uc758\ubbf8\uac00 \uc5c6\ub2e4. \n\uc774\ub294 \ub3c5\ub9bd \ubcc0\uc218 \ud589\ub82c X\uac00 full rank\uac00 \uc544\ub2d0 \ub54c, \uc989 \ub3c5\ub9bd \ubcc0\uc218\uac00 independent\uac00 \uc544\ub2d0 \ub54c \ubc1c\uc0dd\ud55c\ub2e4. \n\uc774\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574\uc11c \ud558\ub098\uc758 \uce7c\ub7fc\uc744 drop\ud55c \ub4a4 \ubaa8\ub378\ub9c1\ud574\uc918\uc57c \ud55c\ub2e4. \n\uba3c\uc800, Bronx\ub97c drop\ud558\uace0 baseline variable\ub85c \uc0bc\uc544\ubcf4\uaca0\ub2e4. ","5a197558":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 neighbourhood\uc640 \uc218\uce58\ud615 \ubcc0\uc218 price\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d - Bronx \ub300\uc0c1","3adc6dd8":"'Kensington' \uc744 baseline\uc73c\ub85c \uc7a1\uc740 \ubd84\uc11d \uacb0\uacfc.","6d0c51de":"'St. George'\ub97c baseline variable\ub85c \uc0bc\uc740 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d \uacb0\uacfc\ub2e4.\n\uc774\uacf3\uc5d0\ub3c4 \uc2e0\ub8b0\uad6c\uac04\uc774 $200 \uc774\uc0c1 \ucc28\uc774\ub098\ub294 neighbour\uac00 \uc874\uc7ac\ud55c\ub2e4.","12921def":"'Long Island City'\ub97c baseline variable\ub85c \uc0bc\uc740 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d \uacb0\uacfc\ub2e4.\n\uc774\uacf3\uc5d0\ub3c4 \uc2e0\ub8b0\uad6c\uac04\uc774 150\ub2ec\ub7ec \uc774\uc0c1\uc73c\ub85c \ub113\uc740 neighbourhood\uac00 \uc874\uc7ac\ud55c\ub2e4.","840e937f":"# \uc8fc\uc694 \ud1b5\uacc4 \uc0b4\ud3b4\ubcf4\uae30 - \uac00\uaca9 - \uc22b\uc790\ub85c \ud655\uc778\ud558\uae30","47bb862a":"# \uacb0\uce21\uce58 \ubc1c\uacac! \n\n\uc0ad\uc81c\ud560 \uac12\ub4e4\n\n* name\uc774 \uc5c6\ub294 \uacbd\uc6b0\n\n* host_name\uc774 \uc5c6\ub294 \uacbd\uc6b0\n\n* last_review\uac00 \uc5c6\ub294 \uacbd\uc6b0\n\n* reviews_per_month\uac00 \uc5c6\ub294 \uacbd\uc6b0\n\n=> \ud5c8\uc704 \ub9e4\ubb3c\uc774\uac70\ub098 \uc2e0\uaddc \uc9c4\uc785 \ub9e4\ubb3c\uc73c\ub85c \uc0ad\uc81c\ud55c\ub2e4.\n\n\uae30\uc874\uc5d0 \uac70\ub798\ub418\ub294 \ub9e4\ubb3c\uc744 \ubc14\ud0d5\uc73c\ub85c \uac00\uaca9\uc744 \ucd94\ucc9c\ud558\ub824\ub294 \ubd84\uc11d \ubaa9\ud45c\uc640 \ub9de\uc9c0 \uc54a\ub294 \ub370\uc774\ud130\ub2e4.","86c94532":"'Midtown'\uc744 baseline variable\ub85c \uc0bc\uc740 Manhattan \ub0b4 Neighbourhood \uac04\uc758 price \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d \uacb0\uacfc\n\nMidtown($253.7731)\uacfc Financial District($238.4911)\ub294 1\uc77c Airbnb \ud3c9\uade0 \uc219\ubc15\ube44\uac00 \uac00\uc7a5 \ube44\uc2fc \ub3d9\ub124 Top 5 \uc548\uc5d0 \ub4e0\ub2e4. ","17df2d37":"Bronx\ub97c intercept(baseline variable)\ub85c \uc7a1\uc740 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d \uacb0\uacfc\ub2e4.\n\n\nprice\ub294 Manhattan($164)> Brooklyn($122)> Queens($93)>Bronx($79) \uc21c\uc11c\ub85c \ub192\ub2e4. \n\nStaten Island($89)\ub294 Manhattan, Brooklyn\ubcf4\ub2e4 price\uac00 \ub0ae\uc9c0\ub9cc Queens($93)\uc640 Bronx($79)\uc640 \ube44\uad50\ud574 \uc720\uc758\ubbf8\ud55c \ucc28\uc774\ub97c \ubcf4\uc774\uc9c0 \uc54a\uc544 \uc21c\uc704\uc5d0\uc11c \uc81c\uac70\ud588\ub2e4.","0d44874d":"32\uc77c \uc774\uc0c1\uc778 \ub370\uc774\ud130\ub294 \uc804\uccb4\uc758 1%\uc774\ubbc0\ub85c \uc544\uc6c3\ub77c\uc774\uc5b4\ub85c \uac04\uc8fc\ud558\uace0 \uc0ad\uc81c\ud55c\ub2e4","8bcfefc5":"\uac00\uaca9\uc774 $750 \uc774\uc0c1\uc778 \ub370\uc774\ud130\ub294 \uc804\uccb4 \ub370\uc774\ud130\uc758 1%\uc774\uba74\uc11c \uc804\uccb4 \ud1b5\uacc4\uc5d0 \ud070 \uc601\ud5a5\uc744 \uc900\ub2e4. \uc0ad\uc81c\ud55c\ub2e4.","bb73b5f2":"# \uac1c\uc694\n\ubd84\uc11d \ub300\uc0c1: 2019\ub144 \ub274\uc695\uc2dc \uc5d0\uc5b4\ube44\uc564\ube44(Airbnb) \uc219\uc18c \uc815\ubcf4\n\n\ubd84\uc11d \ubaa9\ud45c: \uc5d0\uc5b4\ube44\uc564\ube44 \uc774\uc6a9\uc744 \uace0\ub824\ud558\ub294 \ubd80\ub3d9\uc0b0 \uc18c\uc720\uc8fc\ub97c \uc704\ud55c \uc801\uc815 \uac00\uaca9 \ucd94\ucc9c","4946318c":"# \uc774\uc0c1\uce58 \ubc1c\uacac! \n\n* \uac00\uaca9 \ucd5c\uc19f\uac12 $0\n* \uc774\uc6a9 \uac00\ub2a5 \uc77c\uc218 \ucd5c\uc19f\uac12 0\uc77c\n\n=> \ud5c8\uc704 \ub9e4\ubb3c\uc774\uac70\ub098 \ubd84\uc11d \uacb0\uacfc\uc5d0 \ub9ce\uc740 \uc601\ud5a5\uc744 \uc8fc\ub294 \uc544\uc6c3\ub77c\uc774\uc5b4\ub85c \uac04\uc8fc\ud558\uace0 \uc0ad\uc81c\ud55c\ub2e4.","f46e82dc":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 neighbourhood\uc640 \uc218\uce58\ud615 \ubcc0\uc218 price\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d","2d3eb958":"# EDA","bc6b7944":"# Preprocessing\n* \uc774\uc0c1\uce58 \ud655\uc778 \ubc0f \uc0ad\uc81c\n* \uacb0\uce21\uce58 \ud655\uc778 \ubc0f \uc0ad\uc81c","ab538c0a":"$100 \uc774\ub0b4\uc5d0 \ubd84\ud3ec\ud558\ub294 \uc219\uc18c\ub294 \uc804\uccb4 \ub370\uc774\ud130\uc758 45%,\n\n$100 \uc774\uc0c1 $200 \uc774\ud558 \ubd84\ud3ec\ud558\ub294 \uc219\uc18c\ub294 \uc804\uccb4 \ub370\uc774\ud130\uc758 36%,\n\n$200 \uc774\uc0c1 $300 \uc774\ud558 \ubd84\ud3ec\ud558\ub294 \uc219\uc18c\ub294 \uc804\uccb4 \ub370\uc774\ud130\uc758 11%,\n\n$300 \uc774\uc0c1 \ubd84\ud3ec\ud558\ub294 \uc219\uc18c\ub294 \uc804\uccb4 \ub370\uc774\ud130\uc758 8%\ub2e4. \n\n\ub9cc\uc57d \uc219\uc18c\ub97c \ub098\ub208\ub2e4\uba74 \uc800\uac00 \/ \uc911\uac00 \/ \uace0\uac00 \/ \ucd08\uace0\uac00\uc758 4\uac1c \uad6c\uac04\uc73c\ub85c \ubd84\ub958\ud560 \uac83\uc744 \uc81c\uc548\ud55c\ub2e4.","38c37740":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 room_type\uacfc \uc218\uce58\ud615 \ubcc0\uc218 price\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d","ad6f97a0":"# \ubc94\uc8fc\ud615 \ubcc0\uc218 neighbourhood\uc640 \uc218\uce58\ud615 \ubcc0\uc218 price\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d - Queens \ub300\uc0c1","a1fc7b31":"\ub300\ubd80\ubd84\uc758 \uc219\uc18c\uac00 2000\ub2ec\ub7ec \ubbf8\ub9cc\uc5d0 \ubd84\ud3ec\ud55c\ub2e4. ","eb6661f0":"\uac00\uc124: \ubaa8\ub4e0 neighbourhood group\uc740 \ud3c9\uade0 price\uc5d0 \uc720\uc758\ubbf8\ud55c \ucc28\uc774\uac00 \uc788\ub2e4.\n\nBronx(baseline)\uacfc \ub2e4\ub978 Neighbourhood group \uac04\uc758 Airbnb 1\uc77c \ud3c9\uade0 \uc219\ubc15\ube44\uc5d0 \ucc28\uc774\uac00 \uc788\ub2e4\ub294 \uac00\uc124\uc744 \uac80\uc99d\ud558\uae30 \uc704\ud574\uc11c\ub294 p-value\ub97c \ubcf4\uba74 \ub41c\ub2e4. \nBronx(baseline)\uc744 \uc81c\uc678\ud55c \ub2e4\ub978 Neighbourhood group \uac04\uc744 \ube44\uad50\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc2e0\ub8b0 \uad6c\uac04\uc744 \ubcf4\uba74 \ub41c\ub2e4. \uc2e0\ub8b0 \uad6c\uac04\uc774 \uacb9\uce58\uc9c0 \uc54a\uc73c\uba74 \uac00\uc124\uc774 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ud558\ub2e4.\n\nintercept \uacc4\uc218\uac00 79.8094\ub2e4. \uc774\ub294 Neighbourhood group\uac00 Bronx\uc77c \ub54c\uc758 \ud3c9\uade0 Airbnb 1\uc77c \uc219\ubc15\ube44\uac00 $79.8094\ub77c\ub294 \ub73b\uc774\ub2e4. baseline\uc744 intercept\ub85c \ubcf4\uba74 \ub41c\ub2e4.\n\nBrroklyn\uc758 \uacc4\uc218\ub294 42.2719\ub2e4. \uc774\ub294 baseline \ub300\ube44 \ucc28\uc774\uc774\ub2e4. \ub530\ub77c\uc11c Neighbourhood group\uc774 Brooklyn\uc77c \ub54c \ud3c9\uade0 price\ub294 Bronx\uc77c \ub54c\ubcf4\ub2e4 42.2710 \ub192\uc740 79.8094+42.2710=122.0804\ub2e4. \n\nStaten Island($89)\ub294 p value\uac00 0.165\ub85c \uc77c\ubc18\uc801\uc778 \uc720\uc758 \ud655\ub960\uc778 0.01\uc774\ub098 0.05\ubcf4\ub2e4 \ud06c\ub2e4. \n\uc774\ub294 Staten Island\uc5d0 \ub300\ud574 \ud45c\ubcf8 \uc774\uc0c1\uc73c\ub85c \uadf9\ub2e8\uc801\uc778 \uacb0\uacfc\ub97c \uc5bb\uc744 \uac00\ub2a5\uc131\uc774 \ub192\uc74c\uc744 \uc758\ubbf8\ud55c\ub2e4. \n\uadf8\ub798\uc11c Staten Island\uc640 bronx\uc758 price\uc5d0\ub294 \uc720\uc758\ubbf8\ud55c \ucc28\uc774\uac00 \uc5c6\ub2e4. \n\n\ub610\ud55c Queens\uc640 Staten Island\uc758 \uc2e0\ub8b0 \uad6c\uac04\uc774 \uacb9\uce5c\ub2e4. \n\uadf8\ub798\uc11c \ub450 \uc9c0\uc5ed\uc758 price\uc5d0\ub294 \uc720\uc758\ubbf8\ud55c \ucc28\uc774\uac00 \uc5c6\ub2e4.","572a79ab":"# \uc218\uce58\ud615 \ubcc0\uc218 \uac04\uc758 \uc0c1\uad00\uad00\uacc4 \ubd84\uc11d"}}