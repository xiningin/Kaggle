{"cell_type":{"30a5430f":"code","9edbda61":"code","fa2803f9":"code","51201e56":"code","e76659ae":"code","fb03d72f":"code","dab1a72f":"code","e11355ad":"code","3c0ed0b4":"code","3411f1c8":"code","a88c0aa2":"code","5b935dc5":"code","55b21924":"code","12852de1":"code","61bee9bc":"code","fc790d22":"code","7ba5de61":"code","0a51d403":"code","9c3ee363":"code","5126e9f2":"code","e6c506ad":"markdown","34c4de1e":"markdown","1bdcf645":"markdown","7ff5688f":"markdown","a8a08998":"markdown","21d45c15":"markdown","582ae60f":"markdown","bfafa110":"markdown","f67a7f35":"markdown","e984f47d":"markdown","0b1df602":"markdown","da44a2b3":"markdown","11bdca18":"markdown","c57f892b":"markdown","7b60efee":"markdown","1d902ef0":"markdown","f719f30c":"markdown","9cf010eb":"markdown","9fe548ab":"markdown"},"source":{"30a5430f":"import numpy as np\nimport pandas as pd","9edbda61":"train_filepath = \"..\/input\/train.csv\"\ntest_filepath = \"..\/input\/test.csv\"\n\nData_train = pd.read_csv(train_filepath, index_col = 'PassengerId')\nX_test = pd.read_csv(test_filepath, index_col = 'PassengerId')","fa2803f9":"Data_train_sur = Data_train[(Data_train['Survived'] == 1)]\nData_train_non_sur = Data_train[(Data_train['Survived'] == 0)]\nData_train_sur.head()","51201e56":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nsns.kdeplot(data = Data_train_sur['Age'], label = 'Survived')\nsns.kdeplot(data = Data_train_non_sur['Age'], label = 'Non-Survived')\nplt.title(\"Distribution of Age\")","e76659ae":"sns.kdeplot(data = Data_train_sur['Fare'], label = 'Survived')\nsns.kdeplot(data = Data_train_non_sur['Fare'], label = 'Non Survived')\nplt.title(\"Distribution of Fare\")","fb03d72f":"sns.countplot(x=\"Sex\", hue=\"Survived\", data=Data_train) \nplt.title(\"Distribution of Sex\")","dab1a72f":"sns.countplot(x=\"Pclass\", hue=\"Survived\", data=Data_train) \nplt.title(\"Distribution of Pclass\")","e11355ad":"sns.countplot(x=\"Embarked\", hue=\"Survived\", data=Data_train) \nplt.title(\"Distribution of Embarked\")","3c0ed0b4":"sns.countplot(x=\"SibSp\", hue=\"Survived\", data=Data_train) \nplt.title(\"Distribution of SibSp\")","3411f1c8":"sns.countplot(x=\"Parch\", hue=\"Survived\", data=Data_train) \nplt.title(\"Distribution of Parch\")","a88c0aa2":"y_train = Data_train.Survived #target column\nX_train = Data_train.drop(['Survived'], axis = 1) # Input columns\n\nX_train.info()","5b935dc5":"X_train[\"child\"] = X_train[\"Age\"].apply(lambda x: 1 if x < 16 else 0)\nX_train[\"family\"] = X_train[\"SibSp\"] + X_train[\"Parch\"]\n#X_train['NumEmbarked'] = X_train[\"Embarked\"].apply(lambda x: 1 if x != 'NaN' else 0)","55b21924":"cols_with_missing_train = [col for col in X_train.columns\n                     if X_train[col].isnull().any()]\nobject_cols = ['Embarked', 'Sex']\nall_need_cols = ['Sex', 'Embarked', 'Pclass', 'family', 'Fare', 'child']\ncols_with_missing_train","12852de1":"#X_train['NUmEmbarked'].value_counts()","61bee9bc":"X_train['Age'].fillna(X_train['Age'].mean(), inplace = True)\nX_train['Embarked'].fillna('C', inplace = True)\nX_train.head(10)\n#X_train","fc790d22":"cols_with_missing_test = [col for col in X_test.columns\n                     if X_test[col].isnull().any()]\ncols_with_missing_test","7ba5de61":"X_test['Age'].fillna(X_test['Age'].mean())\nX_test['Fare'].fillna(X_test['Fare'].mean())\nX_test[\"child\"] = X_test[\"Age\"].apply(lambda x: 1 if x < 16 else 0)\nX_test[\"family\"] = X_test[\"SibSp\"] + X_test[\"Parch\"]\n#X_test['NumEmbarked'] = X_test[\"Embarked\"].apply(lambda x: 1 if x != 'NaN' else 0)\nX_test.info()","0a51d403":"from sklearn.preprocessing import LabelEncoder\n\nlabel_X_train = X_train.copy()\nlabel_X_test = X_test.copy()\n\nlabel_encoder = LabelEncoder()\nfor col in object_cols:\n    label_X_train[col] = label_encoder.fit_transform(X_train[col])\n    label_X_test[col] = label_encoder.transform(X_test[col])\n\nlabel_X_train.head()\nX_train_need = label_X_train[all_need_cols]\n\nfrom sklearn.model_selection import train_test_split\n\nX_train_real, X_valid, y_train_real, y_valid = train_test_split(X_train_need, y_train)\nX_train_real.info()","9c3ee363":"from xgboost import XGBClassifier\n\nmy_model = XGBClassifier(learning_rate=0.02, max_depth=2, \nsilent=True, objective='binary:logistic')\n\nX_test_need = label_X_test[all_need_cols]\n\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\nparam_test = {\n    'n_estimators': range(30, 50, 2),\n    'max_depth': range(2, 7, 1)\n}\n\ngrid_search = GridSearchCV(estimator = my_model, param_grid = param_test, \nscoring='accuracy', cv=5)\ngrid_search.fit(X_train_real, y_train_real)\ngrid_search.best_index_, grid_search.best_params_, grid_search.best_score_","5126e9f2":"y_test = grid_search.predict(X_test_need)\ny_valid_predict = grid_search.predict(X_valid)\n\noutput = pd.DataFrame({'PassengerId' : X_test_need.index,\n                     'Survived' : y_test})\noutput.to_csv('submission11.csv', index = False)\nprint(output)","e6c506ad":"### Create bar plots of Embarked\n- We can see that the difference in Embarked has a significant relationship with survival.","34c4de1e":"### Create bar plots of SibSp\n- We can see that the difference in SibSp has a significant relationship with survival.","1bdcf645":"- Encodering object columns","7ff5688f":"## 3. Feature Engineering\n- Divid Data into input and target","a8a08998":"- Filling missing data","21d45c15":"### Create bar plots of Parch\n- We can see that the difference in Parch has a significant relationship with survival.\n- The distribution of SibSp and Parch is similar, so we combine them together.","582ae60f":"- if a person's age is less than 15, we assign him or her as a child.\n- we use the sum of SibSp and Parch as the number of family number of a person.","bfafa110":"- determine which columns has missing data in test data","f67a7f35":"### Create bar plots of Pclass\n- We can see that the difference in class has a significant relationship with survival.","e984f47d":"### 5. Generate output csv","0b1df602":"Train data is divided Divid by Survived or not, which is used for data visualization.","da44a2b3":"### Create bar plots of Sex\n- We can see that the difference in sex has a significant relationship with survival.","11bdca18":"- determine which columns have missing data\n- determine which columns will be used as features","c57f892b":"- Filling missing data\n- The same data processing as train data","7b60efee":"## 2. Data Visualization\n### Create density plots of Age \n- We can see that the children's survived rate is significantly different, so we will use whether or not a child as a feature.","1d902ef0":"### Create density plots of Fare\n- We can see that the difference in cost has a significant relationship with survival.","f719f30c":"### 4. Model Construction\n- Using XGboost to construct model\n- using cross validate to confirm parameters","9cf010eb":"### Load data\n- train data\n- test data","9fe548ab":"## 1. preparation\n\n### Import required packages\n- Numpy\n- Pandas"}}