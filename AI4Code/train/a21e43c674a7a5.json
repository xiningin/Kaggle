{"cell_type":{"ff97526a":"code","b03f7e85":"code","7e929f0f":"code","f150412c":"code","98a6ee76":"code","6f895e10":"code","c21b9a50":"code","403abd28":"code","8ba957c2":"code","928c743e":"code","630232b2":"code","907c2751":"code","a71b6260":"code","b0d14178":"code","dee727fd":"code","bc73a630":"code","a37a450e":"code","9ac0ddb7":"code","1aa46022":"code","04cbea30":"code","a7e683a1":"code","e9237f83":"code","a5ec066b":"code","35efe59d":"code","2748cf99":"code","2c0994d2":"code","48d3a0c3":"code","1202bc78":"code","74b17b85":"code","f7af9c70":"code","40b032ff":"code","494b25d0":"code","ac590675":"code","f33aebe6":"markdown","5b2bb408":"markdown","b3bfcf38":"markdown","d770698a":"markdown","3b3ebf74":"markdown"},"source":{"ff97526a":"# # This Python 3 environment comes with many helpful analytics libraries installed\n# # It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# # For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# # Input data files are available in the \"..\/input\/\" directory.\n# # For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n# for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))\n\n# # Any results you write to the current directory are saved as output.","b03f7e85":"import gc\nimport os\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\n\nfrom keras import backend as K\nwarnings.filterwarnings(action='ignore')\n\nK.image_data_format()","7e929f0f":"DATA_PATH = '\/kaggle\/input\/dogs-vs-cats-redux-kernels-edition\/'\n\nimport re\nlist_for_df = []\nfor traindata in os.listdir(os.path.join(DATA_PATH, 'train\/train')):\n#   print(traindata)\n  tmplist = []\n  if traindata[0] == 'c':\n    tmplist.append(0)\n  else:\n    tmplist.append(1)\n  tmplist.append(traindata)\n  list_for_df.append(tmplist)\n\ntrain_df = pd.DataFrame(data=list_for_df, columns=['class','fname'])\ntrain_df['class'] = train_df['class'].astype('str')\ntrain_df.head()\ntrain_df.shape","f150412c":"train_df.head()","98a6ee76":"list_for_df = []\nfor testdata in os.listdir(os.path.join(DATA_PATH, 'test\/test')):\n#   print(traindata)\n  tmplist = []\n  tmplist.append(testdata)\n  list_for_df.append(tmplist)\n\ndf_test = pd.DataFrame(data=list_for_df, columns=['fname'])","6f895e10":"df_test.head()","c21b9a50":"df_test.shape","403abd28":"from sklearn.model_selection import train_test_split\ndf_train, df_val = train_test_split(train_df)","8ba957c2":"df_train.head()","928c743e":"df_val.head()","630232b2":"original_dataset_dir = os.path.join(DATA_PATH, 'train\/train')\n\nimport PIL\nfrom PIL import ImageDraw\n\ntmp_imgs = df_train['fname'][100:110]\nplt.figure(figsize=(12,20))\n\nfor num, f_name in enumerate(tmp_imgs):\n  img = PIL.Image.open(os.path.join(original_dataset_dir, f_name))\n  plt.subplot(5,2,num+1)\n  plt.title(f_name)\n  plt.imshow(img)\n  plt.axis('off')","907c2751":"from keras.applications import Xception\n\nconv_base = Xception(weights='imagenet',\n                  include_top=False,\n                  input_shape=(224,224,3))\n\nconv_base.summary()","a71b6260":"conv_base.trainable = True\n\nset_trainable = False\nfor layer in conv_base.layers:\n  if layer.name.split('_')[0] == 'block1':\n    set_trainable = True\n  if layer.name.split('_')[0] == 'block2':\n    set_trainable = True\n  if layer.name.split('_')[0] == 'block13':\n    set_trainable = True\n  if layer.name.split('_')[0] == 'block14':\n    set_trainable = True\n  if set_trainable:\n    layer.trainable = True\n  else:\n    layer.trainable = False","b0d14178":"from keras.applications.resnet50 import ResNet50, preprocess_input\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimg_size = (224,224)\nnb_train_samples = len(df_train)\nnb_validation_samples = len(df_val)\nnb_test_samples = len(df_test)\nepochs = 12\nbatch_size = 64\n\n# Define Generator config\ntrain_datagen = ImageDataGenerator(\n  horizontal_flip = True,\n  vertical_flip = False,\n  zoom_range = 0.10,\n  rescale=1.\/255\n)\n\nval_datagen = ImageDataGenerator(rescale=1.\/255)\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\noriginal_dataset_dir = os.path.join(DATA_PATH, 'train\/train')\n\ntrain_generator = train_datagen.flow_from_dataframe(\n    dataframe = df_train,\n    directory = original_dataset_dir,\n    x_col = 'fname',\n    y_col = 'class',\n    target_size = img_size,\n    color_mode = 'rgb',\n    class_mode = 'binary',\n    batch_size = batch_size,\n    seed = 42\n)\n\nvalidation_generator = val_datagen.flow_from_dataframe(\n    dataframe = df_val,\n    directory = original_dataset_dir,\n    x_col = 'fname',\n    y_col = 'class',\n    target_size = img_size,\n    color_mode = 'rgb',\n    class_mode = 'binary',\n    batch_size = batch_size,\n    shuffle = False\n)\n\ntest_data_path = os.path.join(DATA_PATH, 'test\/test')\n\ntest_generator = test_datagen.flow_from_dataframe(\n    dataframe = df_test,\n    directory = test_data_path,\n    x_col = 'fname',\n    y_col = None,\n    target_size = img_size,\n    color_mode = 'rgb',\n    class_mode = None,\n    batch_size = batch_size,\n    shuffle = False\n)","dee727fd":"from sklearn.metrics import f1_score\n\ndef micro_f1(y_true, y_pred):\n  return f1_score(y_true, y_pred, average='micro')\n\ndef get_step(num_samples, batch_size):\n  if (num_samples % batch_size) > 0:\n    return (num_samples \/\/ batch_size) + 1\n  else:\n    return num_samples \/\/ batch_size\n\nimport keras\n\nclass LossHistory(keras.callbacks.Callback):\n  def on_train_begin(self, logs={}):\n    self.losses = []\n    self.val_losses = []\n    self.acces = []\n    self.val_acces = []\n\n\n  def on_batch_end(self, batch, logs={}):\n    self.losses.append(logs.get('loss'))\n    self.val_losses.append(logs.get('val_loss'))\n    self.acces.append(logs.get('acc'))\n    self.val_acces.append(logs.get('val_acc'))\n\nloss_history = LossHistory()","bc73a630":"def freeze(model):\n    \"\"\"Freeze model weights in every layer.\"\"\"\n    for layer in model.layers:\n        layer.trainable = False\n\n        if isinstance(layer, models.Model):\n            freeze(layer)","a37a450e":"from keras import models\nfrom keras import layers\nfrom keras import optimizers\n\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping\n\nfilepath = \"Xception_bin.h5\"\n\nes = EarlyStopping(monitor='val_acc', min_delta=0, patience=3, verbose=1, mode='auto')\ncallbackList = [es, loss_history]\n\n\nmodel = models.Sequential()\nmodel.add(conv_base)\nmodel.add(layers.GlobalAveragePooling2D())\n# model.add(layers.Flatten())\n# model.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(256,activation='relu'))\nmodel.add(layers.Dropout(0.5))\nmodel.add(layers.Dense(1))\nmodel.add(layers.Activation('sigmoid'))\nmodel.compile(optimizer=optimizers.RMSprop(lr=1e-4), loss='binary_crossentropy', metrics=['acc'])\n\nhistory = model.fit_generator(train_generator,\n                   steps_per_epoch=100,\n                   epochs=50,\n                   validation_data=validation_generator,\n                   validation_steps=100,\n                   callbacks=callbackList)\n\n# freeze \ud574\uc918\uc57c\ud568\nfrom keras import models\n\ndef freeze(model):\n    \"\"\"Freeze model weights in every layer.\"\"\"\n    for layer in model.layers:\n        layer.trainable = False\n\n        if isinstance(layer, models.Model):\n            freeze(layer)\n\nfreeze(model)\nmodel.save(filepath)","9ac0ddb7":"import matplotlib.pyplot as plt\n\nhistory = model.history\n\nplt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(history.history['acc'])\nplt.plot(history.history['val_acc'])\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(loss_history.acces)\nplt.plot(loss_history.val_acces)\nplt.title('Model accuracy')\nplt.ylabel('Accuracy')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()\n\nplt.plot(loss_history.losses)\nplt.plot(loss_history.val_losses)\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","1aa46022":"steps = len(df_test) \/\/ batch_size + 1","04cbea30":"mypred = model.predict_generator(\n    test_generator,\n    steps=steps\n)","a7e683a1":"mypred_val = mypred\nmypred_val.shape","e9237f83":"df_test.head()","a5ec066b":"id_val = df_test['fname'].str.split(\".\").str[0].values\nid_val","35efe59d":"np.shape(id_val)","2748cf99":"sptl = df_test['fname'][:30].values","2c0994d2":"sptl","48d3a0c3":"import matplotlib.pyplot as plt\nplt.figure(figsize=(20,40))\n\ntestdir = os.path.join(DATA_PATH, 'test\/test')\n\nimport PIL\n\nnum = 0\n\nfor fname in sptl:\n  img = PIL.Image.open(os.path.join(testdir, fname))\n  plt.subplot(8,4,num+1)\n  if mypred_val[num]<0.5:\n    plt.title('cat')\n  else:\n    plt.title('dog')\n  plt.axis('off')\n  plt.imshow(img)\n  num += 1","1202bc78":"submission = pd.read_csv(os.path.join(DATA_PATH, \"sample_submission.csv\"))","74b17b85":"submission['id'] = id_val\nsubmission['label'] = mypred_val","f7af9c70":"submission.head()","40b032ff":"my_submission = submission.set_index('id')","494b25d0":"my_submission.head()","ac590675":"my_submission.to_csv(\"Xception_submit.csv\")","f33aebe6":"# Load Data","5b2bb408":"# get answer","b3bfcf38":"# submit!","d770698a":"# check_by_eye","3b3ebf74":"# Xception with fine tuning + data_gen"}}