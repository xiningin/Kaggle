{"cell_type":{"634423ff":"code","6b4d5d0c":"code","de15898f":"code","c1d86f0e":"code","34440ad1":"code","c1069266":"code","51896e51":"code","77a430c1":"code","73845f43":"code","d49a8d47":"code","5aa6f21e":"code","68f1ffda":"code","08e4d8ee":"code","4cb804e8":"code","a13d758d":"markdown"},"source":{"634423ff":"import numpy as np\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score","6b4d5d0c":"data = pd.read_csv('..\/input\/palmerpenguins\/penguins.csv')\ndata.info()","de15898f":"# Eliminar NaN\ndata = data.dropna()\ndata","c1d86f0e":"data.describe()","34440ad1":"#Codificaci\u00f3n\nspecies_encoder = OrdinalEncoder()\nisland_encoder = OrdinalEncoder()\nsex_encoder = OrdinalEncoder()\n\ndata[['species']] = species_encoder.fit_transform(data[['species']])\ndata[['island']] = island_encoder.fit_transform(data[['island']])\ndata[['sex']] = sex_encoder.fit_transform(data[['sex']])\ndata","c1069266":"data['species'] .value_counts()","51896e51":"data.corr()\n\n#mas correlacionadas\n#flipper_length_mm\n#body_mass_g","77a430c1":"#1 Ajustar el modelo incluidos sus hiperpar\u00e1metros (3 pts)\n# Modelo KNN necesitara normalizacion?\n\nX = data.drop(['species'], axis=1)\ny = data[\"species\"]","73845f43":"knnmodel1 = KNeighborsClassifier(n_neighbors=10)\nknnmodel1.fit(X, y)","d49a8d47":"score = knnmodel1.score(X, y)\nscores_cross = cross_val_score(knnmodel1, X, y, cv=10)\n\nprint(f\"Model Accuracy: {score}\")\nprint(f\"Cross Validation Mean Accuracy: {scores_cross.mean()}, Scores: {scores_cross}\")","5aa6f21e":"#2 Muestre UN contorno de las clases tal como se muestra en el notebook 2 (2pts)\n# Se usan solo dos columnas para poder hacer el grafico 2D\n\npen_X = data[['flipper_length_mm', 'body_mass_g']]\npen_y = data['species']\n\ndef draw_kernel(model, fig, r, c):\n    \n    x1 = np.linspace(pen_X['flipper_length_mm'].min(), pen_X['flipper_length_mm'].max(), 50)\n    x2 = np.linspace(pen_X['body_mass_g'].min(), pen_X['body_mass_g'].max(), 50)\n    xx1, xx2 = np.meshgrid(x1, x2)\n\n    Z = model.predict(np.c_[xx1.ravel(), xx2.ravel()])\n    Z = Z.reshape(xx1.shape)\n\n    fig.add_trace(go.Contour(\n        x=x1,\n        y=x2,\n        z=Z,\n        showscale=False,\n        opacity=0.40,\n        colorscale=[[0, \"#0075a2\"], [0.5, \"#481620\"], [1, \"#D55672\"]]\n    ), row=r, col=c)\n    \n    fig.add_trace(go.Scatter(\n        x=pen_X['flipper_length_mm'], \n        y=pen_X['body_mass_g'],\n        text=pen_y,\n        mode='markers',\n        marker_symbol=pen_y,\n        marker=dict(\n            color=pen_y,\n            colorscale=[[0, \"#0075a2\"], [0.5, \"#481620\"], [1, \"#D55672\"]]\n        )\n    ), row=r, col=c)\n\n    \n\nfig = make_subplots(\n    rows=1, \n    cols=1,)\n\n\nknnmodel = KNeighborsClassifier(n_neighbors=5).fit(pen_X, pen_y)\ndraw_kernel(knnmodel, fig, 1, 1)\n\nfig.update_layout(\n    showlegend=False,\n    height=600, \n    width=600)\n\nfig.show()","68f1ffda":"#3 Muestre sus resultados con una matriz de confusi\u00f3n y el reporte correspondiente (2 pts)\n# Matriz de confucion\n\ny_pred = knnmodel1.predict(X)\ncm = confusion_matrix(y , y_pred)","08e4d8ee":"cm","4cb804e8":"fig_cm = px.imshow(cm)\nfig_cm.show()","a13d758d":"**Utilice el dataset de los pinguinos (data\/penguins.csv) para ajustar un modelo knn.**\n\n1. Ajustar el modelo incluidos sus hiperpar\u00e1metros (3 pts)\n\n2. Muestre UN contorno de las clases tal como se muestra en el notebook 2 (2pts)\n \n3. Muestre sus resultados con una matriz de confusi\u00f3n y el reporte correspondiente (2 pts)"}}