{"cell_type":{"e26eaa40":"code","fa7c4d9e":"code","d065eab0":"code","c0816f1f":"code","222ef047":"code","362f4bcf":"code","0b4bfb24":"code","dea2234e":"code","0c9703c5":"code","5b77783b":"code","f0f3d7d7":"code","da26c811":"code","45b1b153":"code","f981d1c1":"code","a76096c5":"code","65e15905":"code","e1801ffc":"code","e8888862":"code","65d0aa76":"code","d45dc4e0":"code","e7649dba":"code","f08e19bf":"code","14314d2e":"code","378aed89":"code","92ad8cf2":"code","56d5b5b0":"code","37c9ff45":"code","55c2f67e":"code","313a5cae":"code","2ad94407":"code","8aee9fef":"code","ebcf62f8":"code","1c0cc3a0":"code","e9f942cc":"code","d498ea61":"code","e4550cd4":"code","339a549f":"code","d07c581e":"code","980a075d":"code","4e21760a":"code","9c1eda92":"code","5f65d8bd":"code","28fe5787":"code","c471d6ec":"markdown","061cfa6b":"markdown","d92a8242":"markdown","478187bb":"markdown","4f7c4406":"markdown","b6390d27":"markdown","bb0d034d":"markdown","055ca8d6":"markdown","af3df587":"markdown","ed784cbe":"markdown","21b543f6":"markdown","5c6fa7c0":"markdown","725b37e3":"markdown","c4c17013":"markdown","4a5c1b7d":"markdown","aaec6e2e":"markdown","203b203b":"markdown","948f3545":"markdown","07f42307":"markdown","5485f12b":"markdown","08414889":"markdown","b2fa4888":"markdown","5c168f42":"markdown","ec5cebd8":"markdown","217b77e6":"markdown","4249df09":"markdown","f55e185e":"markdown"},"source":{"e26eaa40":"import pandas as pd#linear algebra\nimport numpy as np# data processing I\/O CSV files\n\n#data visualization library\nimport matplotlib.pyplot as plt\nplt.rc(\"font\", size=14)\nimport seaborn as sns\nsns.set()\n\n#machine learning library\n\n#label encoding library\nfrom sklearn.preprocessing import LabelEncoder\n\n#cross validation score,kfold and stratified kfold library\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.model_selection import KFold, StratifiedKFold\n\n#gradient boosting library\nfrom catboost import CatBoostClassifier\nfrom lightgbm import LGBMClassifier\nfrom xgboost import XGBClassifier\n\n#roc auc score library\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\n\n#filter out warnings\nimport warnings\nwarnings.simplefilter(action='ignore')","fa7c4d9e":"data_train=pd.read_csv(\"..\/input\/jobathon-may-2021-credit-card-lead-prediction\/Train_Data.csv\")\ndata_test=pd.read_csv(\"..\/input\/jobathon-may-2021-credit-card-lead-prediction\/Test_Data.csv\")","d065eab0":"data_train.head()","c0816f1f":"data_test.head()","222ef047":"data_train.shape","362f4bcf":"data_test.shape","0b4bfb24":"data_train.info()","dea2234e":"data_test.info()","0c9703c5":"data_train[data_train.duplicated(keep= False)]","5b77783b":"data_test[data_test.duplicated(keep=False)]","f0f3d7d7":"data_train.describe()","da26c811":"data_test.describe()","45b1b153":"sns.set_style('darkgrid')#set background \n\nfig, ax = plt.subplots(1, 1, figsize=(10, 5))\nsns.countplot(data=data_train, x='Credit_Product', hue='Is_Lead', ax=ax, palette='rocket')\nax.set_title('Credit_Product - Is_Lead Plot', size=20, loc='Left', y=1.04)\n\nsns.despine()#remove axes spines\nplt.show()","f981d1c1":"plt.figure(figsize=(16, 7))\ntemp = data_train.copy()\ntemp['Age'] = pd.cut(temp.Age, bins=[20, 35, 50, 65, 80, 95])\n\nsns.countplot(data=temp, x='Age', hue='Is_Lead', palette='ocean_r')\n\nplt.show()","a76096c5":"numerical = ['Age','Vintage','Avg_Account_Balance']\nsns.pairplot(data=data_train,x_vars=numerical, hue = 'Is_Lead', palette='BuPu')","65e15905":"temp1 = data_train.copy()\ntemp1[numerical] = np.log(data_train[numerical])\nsns.pairplot(data=temp1,x_vars=numerical, hue = 'Is_Lead', palette='OrRd')","e1801ffc":"def get_combined_data():\n    train = pd.read_csv('..\/input\/jobathon-may-2021-credit-card-lead-prediction\/Train_Data.csv')\n    test = pd.read_csv('..\/input\/jobathon-may-2021-credit-card-lead-prediction\/Test_Data.csv')\n    targets = train.Is_Lead\n    train.drop('Is_Lead', 1, inplace=True)\n    combined = train.append(test)\n    combined.reset_index(inplace=True)\n    combined.drop(['index', 'ID'], inplace=True, axis=1)\n    return combined","e8888862":"combined = get_combined_data()\ncombined.describe()","65d0aa76":"combined.shape","d45dc4e0":"def impute_Credit_Product():\n    global combined\n    combined['Credit_Product'].fillna('Yes', inplace=True) ","e7649dba":"impute_Credit_Product()","f08e19bf":"combined.info()","14314d2e":"def process_gender():\n    global combined\n    combined['Gender'] = combined['Gender'].map({'Male':1,'Female':0})   ","378aed89":"def process_Occupation():\n    global combined\n    combined['Occupation'] = combined['Occupation'].map({'Other':0,'Salaried':1,'Self_Employed':2,'Entrepreneur':3})","92ad8cf2":"def process_Credit_Product():\n    global combined\n    combined['Credit_Product'] = combined['Credit_Product'].map({'No':0,'Yes':1})","56d5b5b0":"def process_Is_Active():\n    global combined\n    combined['Is_Active'] = combined['Is_Active'].map({'No':0,'Yes':1})","37c9ff45":"process_gender()\nprocess_Occupation()\nprocess_Credit_Product()\nprocess_Is_Active()","55c2f67e":"combined.head()","313a5cae":"combined.shape","2ad94407":"label = LabelEncoder()\nvar_label = ['Region_Code','Channel_Code']\nfor i in var_label:\n    combined[i]=label.fit_transform(combined[i])","8aee9fef":"sns.distplot(combined[\"Avg_Account_Balance\"])","ebcf62f8":"combined[\"Avg_Account_Balance\"]=np.log(combined[\"Avg_Account_Balance\"])","1c0cc3a0":"sns.distplot(combined[\"Avg_Account_Balance\"])","e9f942cc":"train=combined[:245725]\ntest=combined[245725:]\ntargets=data_train.Is_Lead","d498ea61":"def cross_val_score(train,targets,model,params, folds=9): \n    \n    skf = StratifiedKFold(n_splits=folds, shuffle=True, random_state=21)\n    \n    for fold, (train_temp,test_temp) in enumerate(skf.split(train,targets)):\n        \n        x_train,y_train = train.iloc[train_temp], targets.iloc[train_temp]\n    \n        x_test,y_test = train.iloc[test_temp],targets.iloc[test_temp]\n    \n    \n        models=model(**params)\n        models.fit(x_train,y_train,\n                  eval_set=[(x_test, y_test)],\n                  early_stopping_rounds=100,\n                  verbose=400)\n    \n        pred = models.predict_proba(x_test)[:, 1]\n        roc = roc_auc_score(y_test, pred)\n        print(f\"roc_auc_score: {roc}\")\n        print(\"-\"*50)\n        \n    return models","e4550cd4":"cat_params= {'n_estimators': 20000, \n                  'depth': 4, \n                  'learning_rate': 0.023, \n                  'colsample_bylevel': 0.655, \n                  'bagging_temperature': 0.921, \n                  'l2_leaf_reg': 10.133}","339a549f":"result_cat_boost=cross_val_score(train,targets,CatBoostClassifier,cat_params)","d07c581e":"lgb_params= {'learning_rate': 0.045, \n             'n_estimators': 20000, \n             'max_bin': 94,\n             'num_leaves': 10, \n             'max_depth': 27, \n             'reg_alpha': 8.457, \n             'reg_lambda': 6.853, \n             'subsample': 0.749}","980a075d":"result_lgb = cross_val_score(train,targets,LGBMClassifier,lgb_params)","4e21760a":"xgb_params= {'n_estimators': 20000, \n             'max_depth': 6, \n             'learning_rate': 0.0201, \n             'reg_lambda': 29.326, \n             'subsample': 0.818, \n             'colsample_bytree': 0.235, \n             'colsample_bynode': 0.820, \n             'colsample_bylevel': 0.453}","9c1eda92":"result_xgb = cross_val_score(train,targets,XGBClassifier,xgb_params)","5f65d8bd":"pred_test_lgb = result_lgb.predict_proba(test)[:,1]\npred_test_xgb = result_xgb.predict_proba(test)[:,1]\npred_test_cat = result_cat_boost.predict_proba(test)[:,1]\nprediction = (pred_test_lgb + pred_test_cat+pred_test_xgb)\/3","28fe5787":"output = prediction\ndf_output = pd.DataFrame()\ntemp = pd.read_csv('..\/input\/jobathon-may-2021-credit-card-lead-prediction\/Test_Data.csv')\ndf_output['ID'] = temp['ID']\ndf_output['Is_Lead'] = output\ndf_output.to_csv('output_cxl.csv',index=False)","c471d6ec":"### Normalize The Data","061cfa6b":"### Combined The Train and Test Data ","d92a8242":"### Analysis The Train And Test Datasets","478187bb":"We shall log trasform the variables and plot again","4f7c4406":"### Output File","b6390d27":"### Extreame Gradiant Boosting","bb0d034d":"### Light Gradiant Boosting","055ca8d6":"### Checking The Rows In Train And Test Data","af3df587":"### Filling The Null Values","ed784cbe":"### Spiliting The Data","21b543f6":"### Changing To Labelencoding","5c6fa7c0":"#  Credit Card Leads Prediction \n\n\n***A JOB-A-THON conducted by Analytics Vidhya***","725b37e3":"### Cat Boosting","c4c17013":"We shall now plot the numberical variables to look at the distribution","4a5c1b7d":"# Conclusion\nWe have obtained a good roc_auc_score score for test data.\nThe thresholds for each of the model has helped in decent split and we have successfully achieved the objective\n### Future Improvements:\nThe models can be tuned for hyperparameter optimization, but because the training data is large, it takes time for parametrs to get tuned.","aaec6e2e":"### User defined function for validating all the models","203b203b":"### loading The Train Data And Test Data","948f3545":"As only 'Credit_Product'columns has missing values, we shall visualize it first.","07f42307":"### Checking The Null Values In Train And Test Data ","5485f12b":"### Data Visualizations","08414889":"## Solution:\nWe are going to look at boosting, Data processing and Data Modeling and selecting Optimal Threshold for optimal split.","b2fa4888":"### Average We Are Taking  of XGB,LGB And CAT","5c168f42":"It was found that the age could be dividen into age groups","ec5cebd8":"## Problem Statment:\n\n### To find the probabilities of customer interested in getting a credit card, which will help the bank in cross selling amongst different bank account categories using the variables such as Age, Occupation, Avg_Account Balance,etc..","217b77e6":"### Checking Duplicated Values In Train And Test Data","4249df09":"It can be observed that only 'Credit_Product' coloumn has missing values.","f55e185e":"## Import necesary libraries"}}