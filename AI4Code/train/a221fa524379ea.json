{"cell_type":{"0fc92c90":"code","3cfa7aea":"code","8a4fc8ea":"code","ddd7b9a1":"code","ab87113c":"code","93b944f1":"code","273ac909":"code","1223624a":"code","3399a52d":"code","1190d890":"code","48b095ae":"code","90073ea4":"code","efca6853":"code","1d5f9b56":"code","4f907a27":"code","e7f94929":"code","bf119db3":"code","ea3519f1":"code","310e173f":"code","348595b5":"code","6e4ea6bf":"code","2d2f312d":"code","bb9c8d0c":"code","c8c3e3dd":"code","49df6682":"code","dfc8d791":"code","b3c7b16b":"code","c1491d40":"code","8b8cabd3":"code","03b01380":"code","dc760c5e":"code","d796ab2c":"code","5a3ce85b":"markdown","b26ef9a8":"markdown","74f26d64":"markdown"},"source":{"0fc92c90":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nsns.set()\npd.set_option('display.expand_frame_repr',False)\nfrom PIL import Image\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import LinearSVC,SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier,GradientBoostingClassifier,AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.naive_bayes import GaussianNB\n \n\n#regression\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso,RidgeCV\nfrom sklearn.ensemble import RandomForestRegressor,BaggingRegressor,GradientBoostingRegressor,AdaBoostRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\n\n#model selection\nfrom sklearn.model_selection import train_test_split,cross_validate\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\n\n#preprocessing\nfrom sklearn.preprocessing import MinMaxScaler,StandardScaler,Imputer,LabelEncoder\n\n#evaluation metrics\nfrom sklearn.metrics import mean_squared_log_error,mean_squared_error, r2_score,mean_absolute_error # for regression\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score  # for classification\n\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","3cfa7aea":"df = pd.read_csv(\"..\/input\/wine-reviews\/winemag-data_first150k.csv\")","8a4fc8ea":"df.columns","ddd7b9a1":"df.head(10)","ab87113c":"country_point = df['points'].value_counts()\nplace = df['country'].value_counts()\nlabel = place.index\nsize = country_point.values\n\ncolors = ['green','blue','yellow','purple']\ntrace = go.Pie(labels=label,\n               hoverinfo='label+value', textinfo='percent', \n               values=size,\n               marker=dict(colors=colors,line=dict(color='#fff', width=.4)))\n\n\n\n\nlayout = go.Layout(\n    title='Points')\n\ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\npy.iplot(fig)","93b944f1":"df=df.drop(columns=['Unnamed: 0', 'description'])\ndf=df.reset_index(drop=True)","273ac909":"df['price'].min()","1223624a":"df['points'].max()","3399a52d":"df['country'].value_counts().plot(kind = 'bar',figsize=(13,8),fontsize=13)\nplt.show()","1190d890":"df.boxplot(column='price',by='points')\nplt.show()","48b095ae":"v_map = pd.DataFrame(df['country'].value_counts())\nv_map['Country'] = v_map.index\nv_map.columns = ['Points','Country']\nv_map.reset_index().drop('index',axis = 1)\n\ndata = [ dict(\n        type = 'choropleth',\n        locations = v_map['Country'],\n        locationmode = 'country names',\n        z = v_map['Points'],\n        text = v_map['Country'],\n        colorscale = 'Reds',\n        marker = dict(\n            line = dict (\n                color = 'Black',\n                width = 0.5\n            ) ),\n        colorbar = dict(\n            autotick = False,\n            tickprefix = '$',\n            title = 'Rate'))]\n\nlayout = dict(\n    #title = 'Country',\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        projection = dict(\n            type = 'Mercator')))\n\nfig = dict(data=data, layout=layout )\npy.iplot(fig, validate=False)","90073ea4":"df.head(10)","efca6853":"df.info()","1d5f9b56":"df.describe()","4f907a27":"fig, ax = plt.subplots(figsize=(20,10))\nsns.boxplot(x='points', y='price', data=df)\nplt.xticks(fontsize=10) # X Ticks\nplt.yticks(fontsize=10) # Y Ticks\nax.set_title('Description Length per Points', fontweight=\"bold\", size=20) # Title\nax.set_ylabel('Price', fontsize = 25) # Y label\nax.set_xlabel('Points', fontsize = 25) # X label\nplt.show()","e7f94929":"fig, ax = plt.subplots(figsize=(20,10)) \nsns.violinplot(\n    x='points',\n    y='price',\n    data=df\n)","bf119db3":"df['price'].describe() \n","ea3519f1":"df['price'].dtypes","310e173f":"df['points'].astype(float)","348595b5":"df['price'].values","6e4ea6bf":"df['points'].values","2d2f312d":"df['points'].describe()","bb9c8d0c":"y_prices = df['price']\nN_price = (y_prices - np.min(y_prices))\/(np.max(y_prices)-np.min(y_prices))","c8c3e3dd":"x_points = df['points']\nN_points = (x_points - np.min(x_points))\/(np.max(x_points)-np.min(x_points))","49df6682":"type(X_points)\nprint(X_points.shape)","dfc8d791":"fig, ax = plt.subplots(figsize=(20,10)) \nplt.scatter(X_points,Y_price)","b3c7b16b":"X = df['price']\nX=X.fillna(df['price'].mean())\nX = X.as_matrix()","c1491d40":"X = X.reshape(-1,1)","8b8cabd3":"X.shape","03b01380":"y= df['points']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)","dc760c5e":"clf =  LogisticRegression()\nclf.fit(X_train,y_train)\npred = clf.predict(X_test)\nresult = {'Model Regression\\'s accuracy {}'.format(accuracy_score(pred,y_test))}","d796ab2c":"result","5a3ce85b":"**Describing the best wine match according to price and point**","b26ef9a8":"*Normalization of price and points. Because the numbers are far from each other*","74f26d64":"df['price'].fillna((df['price'].mean()), inplace=True)\ndf['points'].fillna((df['points'].mean()), inplace=True)"}}