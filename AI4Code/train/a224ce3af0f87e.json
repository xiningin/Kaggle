{"cell_type":{"0338efbf":"code","2e35728c":"code","116716b0":"code","d0f269ec":"code","bed16a23":"code","4092cd2b":"code","baa65309":"code","461aff1b":"code","e9a65ff7":"code","1b8da3ac":"code","13077eec":"code","8a4597fd":"code","236ed137":"code","7c85cc7c":"code","5bdcce15":"code","f069af5c":"code","446a70e3":"code","7936448b":"code","8b550756":"code","80cdb798":"code","1e695370":"code","f7bfd623":"code","230bb0ce":"code","f6edcf55":"code","19f4c1cf":"code","fd7d6ca0":"code","eca4672d":"code","ab60f9ff":"code","34f3bcd4":"code","0b23c20d":"code","b71dcf4d":"code","79e3023e":"code","d743ea35":"code","1322eec9":"code","fadb504d":"code","4b5ad0cf":"code","084103ef":"code","7275fff1":"markdown","8f0981f0":"markdown","4d41ca8c":"markdown","f7e0d114":"markdown","23c6c4f1":"markdown","dc34179c":"markdown","5f3dcfb3":"markdown","18f417b3":"markdown","0ea1efb2":"markdown","45595f4c":"markdown","13b1398c":"markdown","8043b4c3":"markdown","ac60e294":"markdown","494bbe1a":"markdown","3af1245f":"markdown","3a556345":"markdown","cf48938d":"markdown","ed473414":"markdown","811bd3a4":"markdown","1386c88f":"markdown","dfb2c233":"markdown","bfe6a305":"markdown","08152340":"markdown","c9647df8":"markdown","80b7f97b":"markdown","1139f7b2":"markdown","6971bddc":"markdown","9119df46":"markdown","77e837a9":"markdown","e7de3c89":"markdown","4a59fcf7":"markdown","d227ce43":"markdown","dae0b917":"markdown","919a7240":"markdown","671960f5":"markdown","56a4f05c":"markdown","855e814c":"markdown","a3f6776a":"markdown","fb90fe30":"markdown","62d7afbf":"markdown","798baeea":"markdown","eadf057e":"markdown","1163011d":"markdown","9351f767":"markdown","9d91d7a2":"markdown","7cd7f37d":"markdown","0ac3672d":"markdown","a16ca0c1":"markdown","180a440e":"markdown","cd62e750":"markdown","02ae8b75":"markdown","df9ca22c":"markdown","e4a7cdae":"markdown","fca66e5d":"markdown","e518373a":"markdown","006eb2e5":"markdown","edd4fd67":"markdown"},"source":{"0338efbf":"'''Libraries to manipulate data'''\nimport numpy as np\nimport pandas as pd\nimport os\nimport math\nimport copy\nimport glob\n\n'''Labraries for Data Visualization'''\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom wordcloud import WordCloud, STOPWORDS\nimport plotly.graph_objs as go \nfrom plotly.subplots import make_subplots\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport plotly.figure_factory as ff\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","2e35728c":"'''Set directories, Get LearnPlatform data, Process data in a single dataframe'''\nos.chdir('..\/input')\n\ndistricts_df = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/districts_info.csv')\nproducts_df = pd.read_csv('..\/input\/learnplatform-covid19-impact-on-digital-learning\/products_info.csv')\n\n\ndata_path = '..\/input\/learnplatform-covid19-impact-on-digital-learning\/engagement_data' \ncsv_files = glob.glob(data_path + \"\/*.csv\")\ndfs = []\n\nfor filename in csv_files:\n    df = pd.read_csv(filename, index_col=None, header=0)\n    district_id = filename.split(\"\/\")[-1].split(\".\")[0]\n    df[\"district_id\"] = district_id\n    dfs.append(df)\n    \nengagement_df = pd.concat(dfs)\nengagement_df = engagement_df.reset_index(drop=True)\n\nengagement_df[['district_id']] = engagement_df[['district_id']].astype(int)\nengagement_df2 = pd.merge(engagement_df, districts_df, on='district_id')\n\nengagement_complete = pd.merge(engagement_df2, products_df, left_on='lp_id', right_on='LP ID')\n\npct_black_hispanic = []\nfor value in engagement_complete['pct_black\/hispanic']:\n    val = 0\n    if isinstance(value, float):\n        val = None\n    else:\n        k = value.split(\", \")\n        val = k[0][1:]\n    pct_black_hispanic.append(val)\npct_free_reduced = []\nfor value in engagement_complete['pct_free\/reduced']:\n    val = 0\n    if isinstance(value, float):\n        val = None\n    else:\n        k = value.split(\", \")\n        val = k[0][1:]\n    pct_free_reduced.append(val)\npp_total_raw = []\nfor value in engagement_complete['pp_total_raw']:\n    val = 0\n    if isinstance(value, float):\n        val = None\n    else:\n        k = value.split(\", \")\n        val = k[0][1:]\n    pp_total_raw.append(val)\n        \nengagement_complete['pct_black_hispanic'] = pct_black_hispanic\nengagement_complete['pct_free_reduced'] = pct_free_reduced\nengagement_complete['pp_total_raw'] = pp_total_raw\nengagement_complete = engagement_complete.drop(['lp_id','URL','county_connections_ratio','pct_black\/hispanic','pct_free\/reduced'], axis=1)\n\nengagement_complete['pct_black_hispanic'] = engagement_complete['pct_black_hispanic'].astype(float)\nengagement_complete['pct_free_reduced'] = engagement_complete['pct_free_reduced'].astype(float)\nengagement_complete['pp_total_raw'] = engagement_complete['pp_total_raw'].astype(float)","116716b0":"grouped_by_date = engagement_complete[['time','pct_access','engagement_index']].groupby('time', as_index=False).mean()\ngrouped_by_date_noscale = engagement_complete[['time','pct_access','engagement_index']].groupby('time', as_index=False).mean()\nfrom sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\ngrouped_by_date[['engagement_index','pct_access']] = sc.fit_transform(grouped_by_date[['engagement_index','pct_access']])\n\nfig = px.line(grouped_by_date, x='time', y=['pct_access', 'engagement_index'],height=500,\n        title='Engagement Index vs Average Percentage Access - for each day',\n        color_discrete_map={ # replaces default color mapping by value\n            \"pct_access\": \"Red\", \"engagement_index\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nfig.layout.legend.x = 0.75\nfig.layout.legend.y = 1.15\nfig.layout.legend.title.text = ''\n\nfig.add_vrect(y0=0.3, y1=0.8, x0='2020-01-03', x1='2020-02-13', fillcolor=\"black\",\n            annotation_text=\"<b>4. Mismatch<\/b>\", annotation_position=\"left\", annotation_yshift=85,\n            opacity=0.7, line_width=2, line_color='lime', layer='below')\nfig.add_vrect(x0='2020-06-18', x1='2020-08-10', fillcolor=\"black\",\n            annotation_text=\"<b>2. Summer Holidays<\/b>\", annotation_position=\"top left\", \n            opacity=0.7, line_width=2, line_color='lime', layer='below')\nfig.add_hrect(y0=-1.3, y1=-0.15, fillcolor=\"black\",\n            annotation_text=\"<b>3. Pre-pandemic Levels<\/b>\", annotation_position=\"bottom right\", \n            opacity=0.7, line_width=2, line_color='lime', layer='below')\nfig.add_annotation(x='2020-04-30', y='0.9544',\n            text=\"1. Within-week Levels\",\n            showarrow=True,\n            font=dict(\n                color=\"white\",\n                size=12\n            ),\n            xanchor='left',\n            align=\"center\",\n            arrowhead=0,\n            arrowsize=2,\n            arrowwidth=2,\n            arrowcolor=\"lime\",\n            ax=40,\n            ay=-35,\n            bordercolor=\"lime\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"black\",\n            opacity=0.8\n                  )\nfig.add_annotation(x='2020-05-02', y='-0.870',\n            text=\"1. Week-end Levels\",\n            showarrow=True,\n            font=dict(\n                color=\"white\",\n                size=12\n            ),\n            xanchor='left',\n            align=\"center\",\n            arrowhead=0,\n            arrowsize=2,\n            arrowwidth=3,\n            arrowcolor=\"lime\",\n            ax=40,\n            ay=50,\n            bordercolor=\"lime\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"black\",\n            opacity=0.8\n                  )\nfig.add_vrect(x0='2020-11-24', x1='2020-12-01', fillcolor=\"black\",\n            annotation_text=\"<b>5. Thanksgiving<\/b>\", annotation_position=\"top left\", \n            opacity=0.7, line_width=2, line_color='lime', layer='below', annotation_xshift=-65)\nfig.add_vrect(x0='2020-12-23', x1='2020-12-31',y0=0,y1=0.90, fillcolor=\"black\",\n            annotation_text=\"<b>6.C.<\/b>\", annotation_position=\"top right\", \n            opacity=0.7, line_width=2, line_color='lime', layer='below', annotation_yshift=-30,\n            annotation_font={'size':14})\nfig.show()","d0f269ec":"for_sunburst = engagement_complete[['Primary Essential Function','Provider\/Company Name','Product Name']]\nfor_sunburst = for_sunburst.dropna()\n\nsymbol = []\nfor funct in for_sunburst['Primary Essential Function']:\n    f = funct.split(' - ')\n    symbol.append(f[0])\nfor_sunburst['Symbol'] = symbol\n\nfor_sunburst['engagement_index'] = engagement_complete['engagement_index']\ngrouped_for_sunburst = for_sunburst.groupby(['Primary Essential Function','Provider\/Company Name','Product Name', 'Symbol'], as_index=False).mean() \n\n        #treemap \/ sunburst\nfig1 = px.treemap(grouped_for_sunburst, path=['Symbol','Primary Essential Function','Provider\/Company Name'], \n                  values='engagement_index', color='Symbol', color_discrete_map={'LC':'blue','SDO':'cyan','CM':'lightcyan','LC\/CM\/SDO':'white'})\n\nfig1.update_layout(\n    title={\n        'text': \"Products by Primary Essential Function - Overall Engagement Indices\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    template='plotly_dark'\n    )    \n\ngrouped_for_sunburst_sorted = grouped_for_sunburst.sort_values('engagement_index')[-15:]\nfig2 = px.bar(grouped_for_sunburst_sorted, x='Product Name', y='engagement_index', color='engagement_index')\n\n\nfig = make_subplots(rows=1, cols=2, specs=[\n    [{\"type\": \"sunburst\"}, {\"type\": \"bar\"}]\n])\n\nfig.add_trace(fig1.data[0], row=1, col=1)\nfig.add_trace(fig2.data[0], row=1, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement by Primary Essential Function | Engagement by Product - 2020\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    xaxis_tickangle=45\n    )\n\nfig.layout.coloraxis.colorscale = [(0.0, 'cyan'),(0.5,'blue'),(1.0,'darkblue')]\n\nfig.show()","bed16a23":"engagement_complete_sorted = engagement_complete.sort_values('time')\ngrouped_by_date = engagement_complete_sorted[['time','pct_access','engagement_index']].groupby('time', as_index=False).mean()\ngrouped_by_date['time'] = pd.to_datetime(grouped_by_date['time'])\ngrouped_by_date = grouped_by_date.set_index('time', drop=False)\n\ncols = []\nfor _, grp in grouped_by_date.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    cols.append((grp['time'][0], grp['engagement_index'].mean()))\n\nweekly = pd.DataFrame(cols, columns=['time','engagement_index']) #select the desired weeks rather than the desired days\n#weekly['time'] = pd.to_datetime(weekly['time'])\n#weekly = weekly.set_index('time', drop=False)\n\nperiod = []\nfor week in weekly['time']:\n    if week <= pd.to_datetime('2020-04-23'):\n        period.append('Pre-Threat to Threat')\n    if week > pd.to_datetime('2020-04-23') and week <= pd.to_datetime('2020-09-03'):\n        period.append('Summer Holidays')\n    if week > pd.to_datetime('2020-09-03'):\n        period.append('Outbreak')\nweekly['period'] = period \n\nfig = make_subplots(rows=2, cols=1)\n\nline = px.line(weekly, x='time', y=['engagement_index'], height=400, width=1000,\n        title='Engagement Index - Weekly',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_index\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nbp1 = px.box(weekly, x='period', y=\"engagement_index\")\nbp1.data[0].marker.color = 'cyan'\n\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.add_trace(bp1.data[0], row=2, col=1)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - High % Free\/Reduced vs Low % Free\/Reduced - Weekly\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    legend=dict(\n        y=1.15,\n        x=0.35,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    )\n    )\nfig.layout.yaxis2.title = 'Engagement Index'\nfig.data[0].showlegend = False\nfig.add_vrect(x0='2020-01-01', x1='2020-05-06', row=1, col=1,\n          fillcolor=\"cyan\", opacity=0.1, line_width=0)\nfig.add_vrect(x0='2020-05-06', x1='2020-08-26', row=1, col=1,\n          fillcolor=\"white\", opacity=0.1, line_width=0)\nfig.add_vrect(x0='2020-08-26', x1='2020-12-30', row=1, col=1,\n          fillcolor=\"blue\", opacity=0.1, line_width=0)\n\nfig.show()\n","4092cd2b":"fig = make_subplots(rows=1, cols=2)\n\nengagement_complete[\"time\"] = pd.to_datetime(engagement_complete[\"time\"])\nengagement_complete_sorted = engagement_complete.sort_values('time')\ngrouped_by_date = engagement_complete_sorted[['time','pct_access','engagement_index']].groupby('time', as_index=False).mean()[:98]\n\ngrouped_by_date_noscale = engagement_complete_sorted[['time','pct_access','engagement_index']].groupby('time', as_index=False).mean()[:98]\n#from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\ngrouped_by_date[['engagement_index','pct_access']] = sc.fit_transform(grouped_by_date[['engagement_index','pct_access']])\n\ntrace1 = px.line(grouped_by_date_noscale, x='time', y=['engagement_index'], height=400, width=500,\n        title='Engagement Index - Threat',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_index\": \"Cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\n\nengagement_complete_sorted = engagement_complete.sort_values('time')\ngrouped_by_date = engagement_complete_sorted[['time','pct_access','engagement_index']].groupby('time', as_index=False).mean()[:98]\ngrouped_by_date = grouped_by_date.set_index('time', drop=False)\n\ncols = []\nfor _, grp in grouped_by_date.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    cols.append((grp['time'][0], grp['engagement_index'].mean()))\n\nweekly = pd.DataFrame(cols, columns=['time','engagement_index'])\n\ntrace2 = px.line(weekly, x='time', y=['engagement_index'], height=400, width=500,\n        title='Engagement Index - Threat',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_index\": \"Cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nfor d in trace1.data:\n    fig.add_trace((go.Scatter(x=d['x'], \n                              y=d['y'], \n                              name = 'Engagement Index - Daily',\n                              mode='lines',\n                              marker_color='Cyan')), \n                  row=1, \n                  col=1)\n        \nfor d in trace2.data:\n    fig.add_trace((go.Scatter(x=d['x'], \n                              y=d['y'], \n                              name = 'Engagement Index - Weekly',\n                              mode='lines',\n                              marker_color='Red')), \n                  row=1, \n                  col=2)    \n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - Daily vs Weekly - Pre-Threat to Threat Phase\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    template='plotly_dark'\n    )    \nfig.layout.legend.x = 0.35\nfig.layout.legend.y = 1.15\n\nfig.add_hrect(y0=20,y1=194, fillcolor=\"black\",\n            annotation_text=\"<b>Pre-pandemic levels<\/b>\", annotation_position=\"bottom right\", \n            opacity=0.7, line_width=2, line_color='lime', layer='below', row=1,col=1)\nfig.add_hrect(y0=87,y1=194, fillcolor=\"black\",\n            annotation_text=\"<b>Pre-pandemic levels<\/b>\", annotation_position=\"bottom right\", \n            opacity=0.7, line_width=2, line_color='lime', layer='below', row=1,col=2)\n\nfig.show()\n\n","baa65309":"fig = make_subplots(rows=1, cols=2)\n\nengagement_complete[\"time\"] = pd.to_datetime(engagement_complete[\"time\"])\nengagement_complete_sorted = engagement_complete.sort_values('time')\ngrouped_by_date = engagement_complete_sorted[['time','pct_access','engagement_index']].groupby('time', as_index=False).mean()[-120:] #select the desired days \n\ngrouped_by_date_noscale = engagement_complete_sorted[['time','pct_access','engagement_index']].groupby('time', as_index=False).mean()[-120:]\n#from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\ngrouped_by_date[['engagement_index','pct_access']] = sc.fit_transform(grouped_by_date[['engagement_index','pct_access']])\n\ntrace1 = px.line(grouped_by_date_noscale, x='time', y=['engagement_index'], height=400, width=500,\n        title='Engagement Index - Outbreak',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_index\": \"Cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\n\nengagement_complete_sorted = engagement_complete.sort_values('time')\ngrouped_by_date = engagement_complete_sorted[['time','pct_access','engagement_index']].groupby('time', as_index=False).mean()[-120:]\ngrouped_by_date = grouped_by_date.set_index('time', drop=False)\n\ncols = []\nfor _, grp in grouped_by_date.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    cols.append((grp['time'][0], grp['engagement_index'].mean()))\n\nweekly = pd.DataFrame(cols, columns=['time','engagement_index']) #select the desired weeks rather than the desired days\n\ntrace2 = px.line(weekly, x='time', y=['engagement_index'], height=400, width=500,\n        title='Engagement Index - Outbreak',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_index\": \"Cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nfor d in trace1.data:\n    fig.add_trace((go.Scatter(x=d['x'], \n                              y=d['y'], \n                              name = 'Engagement Index - Daily',\n                              mode='lines',\n                              marker_color='Cyan')), \n                  row=1, \n                  col=1)\n        \nfor d in trace2.data:\n    fig.add_trace((go.Scatter(x=d['x'], \n                              y=d['y'], \n                              name = 'Engagement Index - Weekly',\n                              mode='lines',\n                              marker_color='Red')), \n                  row=1, \n                  col=2)    \n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - Daily vs Weekly - Outbreak Phase\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    template='plotly_dark'\n    )    \n\nfig.layout.legend.x = 0.35\nfig.layout.legend.y = 1.15\n\nfig.add_hrect(y0=20,y1=194, fillcolor=\"black\",\n            annotation_text=\"<b>Pre-pandemic levels<\/b>\", annotation_position=\"bottom right\", \n            opacity=0.7, line_width=2, line_color='lime', layer='below', row=1,col=1)\nfig.add_hrect(y0=87,y1=194, fillcolor=\"black\",\n            annotation_text=\"<b>Pre-pandemic levels<\/b>\", annotation_position=\"bottom right\", \n            opacity=0.7, line_width=2, line_color='lime', layer='below', row=1,col=2)\n\nfig.show()\n\n","461aff1b":"uscoviddata_df = pd.read_csv(\"..\/input\/usa-statewise-latest-covid19-data\/USA Covid Data.csv\")\nuscoviddata_df['CasesOverTests'] = uscoviddata_df['Total Cases'] \/ uscoviddata_df['Total Tests']\n\n#Stored abbreviations for US states\nus_state_abbrev = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District Of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\n\n\n\ncodes = []\nfor i in uscoviddata_df['State']:\n    codes.append(us_state_abbrev[i])\n\ndata = dict(\n        type = 'choropleth',\n        colorscale = 'blues',\n        locations = codes,\n        locationmode = 'USA-states',\n        z = list(uscoviddata_df['Death\/1 mil population']),\n        colorbar = {'title':'Deaths by Covid-19'}\n      )\n\nengagement_complete_sorted2 = copy.copy(engagement_complete_sorted)\nengagement_complete_sorted2['state'] = engagement_complete_sorted2['state'].dropna()\ngrouped_by_wstate = engagement_complete_sorted2[['time','pct_access','engagement_index','state']].groupby('state', as_index=False).mean() \n\n\nus_state_abbrev2 = copy.copy(us_state_abbrev)\nfor state in us_state_abbrev:\n    if state not in grouped_by_wstate['state'].to_list():\n        del us_state_abbrev2[state]\n\ncodes2 = []\nfor i in grouped_by_wstate['state']:\n    codes2.append(us_state_abbrev2[i])\n\ndata2 = dict(\n        type = 'choropleth',\n        colorscale = 'blues',\n        locations = codes2,\n        locationmode = 'USA-states',\n        z = list(grouped_by_wstate['engagement_index']),\n        colorbar = {'title':'Engagement Index'}\n      )\n\nlayout = dict(title= 'States - Engagement Index',\n              geo = {'scope':'usa'},\n              template='plotly_dark',\n            width=500,\n            height=400)\n\n\nfig = make_subplots(\n    rows=1, cols=2,\n    specs = [[{'type': 'choropleth'} for c in np.arange(2)] for r in np.arange(1)])\n\nfig.add_trace(go.Choropleth(data), row = 1, col = 1)\nfig.add_trace(go.Choropleth(data2), row = 1, col = 2)\n \nfig.update_layout(\n        title= 'States - Total Covid-19 Deaths per 1Million Population | Engagement Index',\n        geo_scope = 'usa',\n        template='plotly_dark',\n        height=400,\n        coloraxis_colorbar_x=-0.15)\nfig.layout['geo2'].scope = 'usa'\nfig.data[0].colorbar.x=-0.1\nfig.show()\n\n\n","e9a65ff7":"dailycovidusa = pd.read_csv(\"..\/input\/us-covid19-dataset-live-hourlydaily-updates\/Country.csv\")\ndailycovidusa = dailycovidusa[:346]\n\nprocessed = []\nsumcases = 0\nsumdeaths = 0\nfor i in range(len(dailycovidusa['date'])):\n    cases = dailycovidusa['cases'][i] - sumcases\n    deaths = dailycovidusa['deaths'][i] - sumdeaths\n    date = dailycovidusa['date'][i]\n    processed.append((date, cases, deaths))\n    sumcases += cases\n    sumdeaths += deaths\n\ndailycovidusa = pd.DataFrame(processed, columns=['time','cases','deaths'])\n\ngrouped_by_date = engagement_complete[['time','pct_access','engagement_index']].groupby('time', as_index=False).mean()\ngrouped_by_date.index.name = None\ndailycovidusa[\"time\"] = pd.to_datetime(dailycovidusa[\"time\"])\njoint_df = pd.merge(grouped_by_date, dailycovidusa, on='time')\n\n\njoint_df_sorted = joint_df.sort_values('time')\njoint_df2 = joint_df_sorted[['time','engagement_index','cases','deaths']].groupby('time', as_index=False).mean()\njoint_df2 = joint_df2.set_index('time', drop=False)\ncols = []\nfor _, grp in joint_df2.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    cols.append((grp['time'][0], grp['engagement_index'].mean(), grp['cases'].sum(), grp['deaths'].sum()))\nweekly = pd.DataFrame(cols, columns=['time','engagement_index','cases','deaths'])\n\ntrace1 = px.line(weekly, x='time', y=['engagement_index'], height=400, width=500,\n        title='Engagement Index',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_index\": \"Cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\ntrace2 = px.line(joint_df, x='time', y=['cases'], height=400, width=500,\n        title='Cases',\n        color_discrete_map={ # replaces default color mapping by value\n            \"cases\": \"Cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\ntrace3 = px.line(joint_df, x='time', y=['deaths'], height=400, width=500,\n        title='Cases',\n        color_discrete_map={ # replaces default color mapping by value\n            \"deaths\": \"Lime\"\n        },\n        template=\"plotly_dark\"\n        )\n\nfig = make_subplots(rows=3, cols=1)\n\nfor d in trace1.data:\n    fig.add_trace((go.Scatter(x=d['x'], \n                              y=d['y'], \n                              name = 'Engagement Index - Weekly',\n                              mode='lines',\n                              marker_color='Cyan')), \n                  row=1, \n                  col=1)\n        \nfor d in trace2.data:\n    fig.add_trace((go.Scatter(x=d['x'], \n                              y=d['y'], \n                              name = 'Total Covid-19 Cases per Week',\n                              mode='lines',\n                              marker_color='Red')), \n                  row=2, \n                  col=1)    \n\n\nfor d in trace3.data:\n    fig.add_trace((go.Scatter(x=d['x'], \n                              y=d['y'], \n                              name = 'Total Covid-19 Dases per Week',\n                              mode='lines',\n                              marker_color='Lime')), \n                  row=3, \n                  col=1)  \n    \nfig.update_layout(\n    title={\n        'text': \"Mean Engagement Index per Week vs Covid-19 Weekly Cases&Deaths\",\n        'y':0.96,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    template='plotly_dark',\n    legend=dict(\n        y=1.18,\n        x=0.30,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    ))\nfig.show()","1b8da3ac":"engagement_complete_toclean = copy.copy(engagement_complete)\n\nengagement_complete_clean = engagement_complete_toclean.dropna(subset=['Primary Essential Function'])\n\nengagement_complete_sorted = engagement_complete_clean.sort_values('time')\ngrouped_by_date = engagement_complete_sorted[['time','engagement_index','Primary Essential Function','Provider\/Company Name']].groupby(['time','Primary Essential Function','Provider\/Company Name'], as_index=False).mean()\ngrouped_by_date = grouped_by_date.groupby(['time','Primary Essential Function'], as_index=False).sum()\ngrouped_by_date['time'] = pd.to_datetime(grouped_by_date[\"time\"])\ngrouped_by_date = grouped_by_date.set_index('time', drop=False)\n\ngrouped_by_date_LC = grouped_by_date[grouped_by_date['Primary Essential Function'].str.contains('LC')]\ngrouped_by_date_SDO = grouped_by_date[grouped_by_date['Primary Essential Function'].str.contains('SDO')]\ngrouped_by_date_CM = grouped_by_date[grouped_by_date['Primary Essential Function'].str.contains('CM')]\n\ncols = []\nfor _, grp in grouped_by_date_LC.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    functions = []\n    for function in grp['Primary Essential Function']:\n        if function not in functions:\n            cols.append((grp['time'][0], grp[grp['Primary Essential Function']==function]['engagement_index'].mean(), function))\n            functions.append(function)\n        else:\n            break\n\nweekly = pd.DataFrame(cols, columns=['time','engagement_index','Primary Essential Function'])\n\n#grouped_by_date: by day; weekly: by week\nfig = px.line(weekly, x='time', y='engagement_index', facet_col=\"Primary Essential Function\", \n              facet_col_wrap=3,color_discrete_map={'engagement_index':'cyan'},\n             facet_row_spacing = 0.10, facet_col_spacing=0.05)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index per Primary Essential Function - Learning and Curriculum (LC)\",\n        'y':0.99,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    height=1150,\n    margin=dict(\n        l=8,\n        r=16,\n    ))\nfig.update_yaxes(matches=None, showticklabels=True, title_text='')\nfig.update_xaxes(matches=None, showticklabels=True)\n\n\nfor i in range(len(fig.data)):\n    #fig.data[i].xaxis = f'x{i+1}'\n    #fig.data[i].yaxis = f'y{i+1}'\n    fig.data[i].line.color = 'cyan'\n    fig.layout.annotations[i].text = '<br>'.join(fig.layout.annotations[i].text[27:].split('-'))\n    \n    if fig.data[i].xaxis == 'x18':\n        fig.data[i].xaxis = 'x3'\n        fig.data[i].yaxis = 'y3'\n    \n    k = fig.data[i].xaxis\n    if len(k) > 1:\n        k = k[1:]\n    else:\n        k = 1\n    k = int(k)\n    \n    fig.layout.annotations[-1].y = fig.layout.annotations[0].y\n\n    \n    row = int((k-1)\/3) + 1\n    col = ((k-1) % 3) + 1\n    minimum = min(fig.data[i].y[:5])\n    maximum = max(fig.data[i].y[:5])\n    global_maximum = max(fig.data[i].y)\n\n    minimum_pos = minimum \/ global_maximum\n    maximum_pos = maximum \/ global_maximum\n    \n    max_index = np.argmax(fig.data[i].y, axis=0)    \n    max_date = fig.data[i].x[max_index]\n    \n\n    fig.add_vrect(x0='2020-05-06', x1='2020-08-26', row=row, col=col,\n          fillcolor=\"white\", opacity=0.1, line_width=0)\n    fig.add_vrect(x0='2020-06-17', x1='2020-07-29', y0=0, y1=1, row=row, col=col,\n                  fillcolor='white', opacity=0.3, line_width=0)\n    fig.add_vline(x=max_date, line_color='blue', line_width=2, row=row, col=col)\n    \n    fig.add_hrect(y0=minimum, y1=maximum, row=row, col=col,\n          fillcolor=\"purple\", opacity=0.4, line_width=0)\n    \nfig.add_annotation(x=0.99, y=0.99, xref='paper',yref='paper',\n        text=\"- 2020 Maximum\",\n        showarrow=False,\n        font=dict(\n            color=\"blue\",\n            size=14\n        ),\n        xanchor='right',\n        align=\"center\",\n        bordercolor=\"Blue\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"black\",\n        opacity=0.8\n              )\nfig.add_annotation(x=0.99, y=0.95, xref='paper',yref='paper',\n        text=\"- Pre-pandemic Levels\",\n        showarrow=False,\n        font=dict(\n            color=\"purple\",\n            size=14\n        ),\n        xanchor='right',\n        align=\"center\",\n        bordercolor=\"purple\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"black\",\n        opacity=0.8\n              )\nfig.add_annotation(x=0.99, y=0.91, xref='paper',yref='paper',\n        text=\"- End of School Year\",\n        showarrow=False,\n        font=dict(\n            color=\"white\",\n            size=14\n        ),\n        xanchor='right',\n        align=\"center\",\n        bordercolor=\"white\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"black\",\n        opacity=0.8\n              )\n\nfig.layout.annotations[-8].text = 'LC<br>Online Course Providers &<br>Technical Skills Development'\n\nfig.show()","13077eec":"cols = []\nfor _, grp in grouped_by_date_CM.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    functions = []\n    for function in grp['Primary Essential Function']:\n        if function not in functions:\n            cols.append((grp['time'][0], grp[grp['Primary Essential Function']==function]['engagement_index'].mean(), function))\n            functions.append(function)\n        else:\n            break\n\nweekly = pd.DataFrame(cols, columns=['time','engagement_index','Primary Essential Function'])\n\n#grouped_by_date: by day; weekly: by week\nfig = px.line(weekly, x='time', y='engagement_index', facet_col=\"Primary Essential Function\", \n              facet_col_wrap=3,color_discrete_map={'engagement_index':'cyan'},\n             facet_row_spacing = 0.22, facet_col_spacing=0.05)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index per Primary Essential Function - Classroom Management (CM)\",\n        'y':0.99,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    height=600,\n    margin=dict(\n        l=8,\n        r=16,\n    ))\n\nfig.update_yaxes(matches=None, showticklabels=True, title_text='')\nfig.update_xaxes(matches=None, showticklabels=True)\n\nfor i in range(len(fig.data)):\n    #fig.data[i].xaxis = f'x{i+1}'\n    #fig.data[i].yaxis = f'y{i+1}'\n    fig.data[i].line.color = 'cyan'\n    if len(fig.layout.annotations[i].text) < 89: #threshold to visualize longer labels without overlapping\n        fig.layout.annotations[i].text = '<br>'.join(fig.layout.annotations[i].text[27:].split('-'))\n    else:\n        fig.layout.annotations[i].text = '<br>'.join(fig.layout.annotations[i].text[32:].split('-'))\n\n\n    k = fig.data[i].xaxis\n    if len(k) > 1:\n        k = k[1:]\n    else:\n        k = 1\n    k = int(k)\n    \n    \n    row = int((k-1)\/3) + 1\n    col = ((k-1) % 3) + 1\n    minimum = min(fig.data[i].y[:5])\n    maximum = max(fig.data[i].y[:5])\n    global_maximum = max(fig.data[i].y)\n\n    minimum_pos = minimum \/ global_maximum\n    maximum_pos = maximum \/ global_maximum\n    \n    max_index = np.argmax(fig.data[i].y, axis=0)    \n    max_date = fig.data[i].x[max_index]\n    \n\n    fig.add_vrect(x0='2020-05-06', x1='2020-08-26', row=row, col=col,\n          fillcolor=\"white\", opacity=0.1, line_width=0)\n    fig.add_vrect(x0='2020-06-17', x1='2020-07-29', y0=0, y1=1, row=row, col=col,\n                  fillcolor='white', opacity=0.3, line_width=0)\n    fig.add_vline(x=max_date, line_color='blue', line_width=2, row=row, col=col)\n    \n    fig.add_hrect(y0=minimum, y1=maximum, row=row, col=col,\n          fillcolor=\"purple\", opacity=0.4, line_width=0)\n \nfig.add_annotation(x=0.99, y=0.17, xref='paper',yref='paper',\n        text=\"- 2020 Maximum\",\n        showarrow=False,\n        font=dict(\n            color=\"blue\",\n            size=14\n        ),\n        xanchor='right',\n        align=\"center\",\n        bordercolor=\"Blue\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"black\",\n        opacity=0.8\n              )\nfig.add_annotation(x=0.99, y=0.10, xref='paper',yref='paper',\n        text=\"- Pre-pandemic Levels\",\n        showarrow=False,\n        font=dict(\n            color=\"purple\",\n            size=14\n        ),\n        xanchor='right',\n        align=\"center\",\n        bordercolor=\"purple\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"black\",\n        opacity=0.8\n              )\nfig.add_annotation(x=0.99, y=0.03, xref='paper',yref='paper',\n        text=\"- End of School Year\",\n        showarrow=False,\n        font=dict(\n            color=\"white\",\n            size=14\n        ),\n        xanchor='right',\n        align=\"center\",\n        bordercolor=\"white\",\n        borderwidth=2,\n        borderpad=4,\n        bgcolor=\"black\",\n        opacity=0.8\n              )\nfig.show()","8a4597fd":"cols = []\nfor _, grp in grouped_by_date_SDO.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    functions = []\n    for function in grp['Primary Essential Function']:\n        if function not in functions:\n            cols.append((grp['time'][0], grp[grp['Primary Essential Function']==function]['engagement_index'].mean(), function))\n            functions.append(function)\n        else:\n            break\n\nweekly = pd.DataFrame(cols, columns=['time','engagement_index','Primary Essential Function'])\n\n#grouped_by_date: by day; weekly: by week\nfig = px.line(weekly, x='time', y='engagement_index', facet_col=\"Primary Essential Function\", \n              facet_col_wrap=3,color_discrete_map={'engagement_index':'cyan'},\n             facet_row_spacing = 0.16, facet_col_spacing=0.05)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index per Primary Essential Function - School & District Operations (SDO)\",\n        'y':0.99,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    height=800,\n    margin=dict(\n        l=8,\n        r=16,\n    ))\n\nfig.update_yaxes(matches=None, showticklabels=True, title_text='')\nfig.update_xaxes(matches=None, showticklabels=True)\n\nfor i in range(len(fig.data)):\n    #fig.data[i].xaxis = f'x{i+1}'\n    #fig.data[i].yaxis = f'y{i+1}'\n    fig.data[i].line.color = 'cyan'\n    fig.layout.annotations[i].text = '<br>'.join(fig.layout.annotations[i].text[27:].split(' - '))\n\n    k = fig.data[i].xaxis\n    if len(k) > 1:\n        k = k[1:]\n    else:\n        k = 1\n    k = int(k)\n    \n    \n    row = int((k-1)\/3) + 1\n    col = ((k-1) % 3) + 1\n    minimum = min(fig.data[i].y[:5])\n    maximum = max(fig.data[i].y[:5])\n    global_maximum = max(fig.data[i].y)\n\n    minimum_pos = minimum \/ global_maximum\n    maximum_pos = maximum \/ global_maximum\n    \n    max_index = np.argmax(fig.data[i].y, axis=0)    \n    max_date = fig.data[i].x[max_index]\n    \n\n    fig.add_vrect(x0='2020-05-06', x1='2020-08-26', row=row, col=col,\n          fillcolor=\"white\", opacity=0.1, line_width=0)\n    fig.add_vrect(x0='2020-06-17', x1='2020-07-29', y0=0, y1=1, row=row, col=col,\n                  fillcolor='white', opacity=0.3, line_width=0)\n    fig.add_vline(x=max_date, line_color='blue', line_width=2, row=row, col=col)\n    \n    fig.add_hrect(y0=minimum, y1=maximum, row=row, col=col,\n          fillcolor=\"purple\", opacity=0.4, line_width=0)\n    \nfig.layout.annotations[-4].text = 'SDO<br>Environmental, Health &<br>Safety (EHS) Compliance'\n\nfig.show()","236ed137":"engagement_complete[\"time\"] = pd.to_datetime(engagement_complete[\"time\"])\nengagement_complete_sorted = engagement_complete.sort_values('time')\n\nfor_sunburst = engagement_complete_sorted[['time','Primary Essential Function','Provider\/Company Name','Product Name']][engagement_complete_sorted['time'] <= '2020-02-10']\nfor_sunburst = for_sunburst.dropna()\nfor_sunburst['engagement_index'] = engagement_complete_sorted['engagement_index']\n\nsymbol = []\nfor funct in for_sunburst['Primary Essential Function']:\n    f = funct.split(' - ')\n    symbol.append(f[0])\nfor_sunburst['Symbol'] = symbol\n\ngrouped_for_sunburst = for_sunburst.groupby(['Symbol','Primary Essential Function','Provider\/Company Name', 'Product Name'], as_index=False).mean()\n        #treemap \/ sunburst\nfig1 = px.treemap(grouped_for_sunburst, path=['Symbol','Primary Essential Function','Provider\/Company Name'], values='engagement_index',\n                  color='Symbol', color_discrete_map={'LC':'blue','SDO':'cyan','CM':'lightcyan','LC\/CM\/SDO':'white'})\n\ngrouped_for_sunburst_sorted = grouped_for_sunburst.sort_values('engagement_index')[-15:]\nfig2 = px.bar(grouped_for_sunburst_sorted, x='Provider\/Company Name', y='engagement_index',\n              hover_data=['Product Name','Primary Essential Function'], color='engagement_index')\n\n\nfig = make_subplots(rows=1, cols=2, specs=[\n    [{\"type\": \"sunburst\"}, {\"type\": \"bar\"}]\n])\n\nfig.add_trace(fig1.data[0], row=1, col=1)\nfig.add_trace(fig2.data[0], row=1, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement by Primary Essential Function | Engagement by Provider<br>Pre-Threat Phase\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    xaxis_tickangle=45\n    )\n\nfig.layout.coloraxis.colorscale = [(0.0, 'cyan'),(0.5,'blue'),(1.0,'darkblue')]\n\nfig.show()","7c85cc7c":"engagement_complete[\"time\"] = pd.to_datetime(engagement_complete[\"time\"])\nengagement_complete_sorted = engagement_complete.sort_values('time')\n\nfor_sunburst = engagement_complete_sorted[['time','Primary Essential Function','Provider\/Company Name','Product Name']][engagement_complete_sorted['time'] > '2020-02-10'][engagement_complete_sorted['time'] <= '2020-04-28']\nfor_sunburst = for_sunburst.dropna()\nfor_sunburst['engagement_index'] = engagement_complete_sorted['engagement_index']\n\nsymbol = []\nfor funct in for_sunburst['Primary Essential Function']:\n    f = funct.split(' - ')\n    symbol.append(f[0])\nfor_sunburst['Symbol'] = symbol\n\ngrouped_for_sunburst = for_sunburst.groupby(['Symbol','Primary Essential Function','Provider\/Company Name', 'Product Name'], as_index=False).mean()\n        #treemap \/ sunburst\nfig1 = px.treemap(grouped_for_sunburst, path=['Symbol','Primary Essential Function','Provider\/Company Name'], values='engagement_index',\n                  color='Symbol', color_discrete_map={'LC':'blue','SDO':'cyan','CM':'lightcyan','LC\/CM\/SDO':'white'})\n\nfig1.update_layout(\n    title={\n        'text': \"Products by Primary Essential Function - Overall Engagement Indices\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    template='plotly_dark'\n    )   \n\ngrouped_for_sunburst_sorted = grouped_for_sunburst.sort_values('engagement_index')[-15:]\nfig2 = px.bar(grouped_for_sunburst_sorted, x='Provider\/Company Name', y='engagement_index',\n              hover_data=['Product Name','Primary Essential Function'], color='engagement_index')\n\n\nfig = make_subplots(rows=1, cols=2, specs=[\n    [{\"type\": \"sunburst\"}, {\"type\": \"bar\"}]\n])\n\nfig.add_trace(fig1.data[0], row=1, col=1)\nfig.add_trace(fig2.data[0], row=1, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement by Primary Essential Function | Engagement by Provider<br>Threat Phase\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    xaxis_tickangle=45\n    )\n\nfig.layout.coloraxis.colorscale = [(0.0, 'cyan'),(0.5,'blue'),(1.0,'darkblue')]\n\nlabs = fig.data[0].hovertemplate.split(\"<br>\")\nfig.data[0].hovertemplate = '<br>'.join(labs[:-1])\n\nfig.show()","5bdcce15":"engagement_complete[\"time\"] = pd.to_datetime(engagement_complete[\"time\"])\nengagement_complete_sorted = engagement_complete.sort_values('time')\n\nfor_sunburst = engagement_complete_sorted[['time','Primary Essential Function','Provider\/Company Name','Product Name']][engagement_complete_sorted['time'] > '2020-09-01'][engagement_complete_sorted['time'] <= '2020-12-18']\nfor_sunburst = for_sunburst.dropna()\nfor_sunburst['engagement_index'] = engagement_complete_sorted['engagement_index']\n\nsymbol = []\nfor funct in for_sunburst['Primary Essential Function']:\n    f = funct.split(' - ')\n    symbol.append(f[0])\nfor_sunburst['Symbol'] = symbol\n\ngrouped_for_sunburst = for_sunburst.groupby(['Symbol','Primary Essential Function','Provider\/Company Name', 'Product Name'], as_index=False).mean()\n        #treemap \/ sunburst\nfig1 = px.treemap(grouped_for_sunburst, path=['Symbol','Primary Essential Function','Provider\/Company Name'], values='engagement_index',\n                  color='Symbol', color_discrete_map={'LC':'blue','SDO':'cyan','CM':'lightcyan','LC\/CM\/SDO':'white'})\n\nfig1.update_layout(\n    title={\n        'text': \"Products by Primary Essential Function - Overall Engagement Indices\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n    template='plotly_dark'\n    )   \n\ngrouped_for_sunburst_sorted = grouped_for_sunburst.sort_values('engagement_index')[-15:]\nfig2 = px.bar(grouped_for_sunburst_sorted, x='Provider\/Company Name', y='engagement_index',\n              hover_data=['Product Name','Primary Essential Function'], color='engagement_index')\n\n\nfig = make_subplots(rows=1, cols=2, specs=[\n    [{\"type\": \"sunburst\"}, {\"type\": \"bar\"}]\n])\n\nfig.add_trace(fig1.data[0], row=1, col=1)\nfig.add_trace(fig2.data[0], row=1, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement by Primary Essential Function | Engagement by Provider<br>Outbreak Phase\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    xaxis_tickangle=45\n    )\nfig.layout.coloraxis.colorscale = [(0.0, 'cyan'),(0.5,'blue'),(1.0,'darkblue')]\n\nfig.show()","f069af5c":"engagement_complete[\"time\"] = pd.to_datetime(engagement_complete[\"time\"])\nengagement_complete_sorted = engagement_complete.sort_values('time')\n\nfor_sunburst = engagement_complete_sorted[['time','Primary Essential Function','Provider\/Company Name','Product Name']][engagement_complete_sorted['time'] <= '2020-02-10']\nfor_sunburst = for_sunburst.dropna()\nfor_sunburst['engagement_index'] = engagement_complete_sorted['engagement_index']\ngrouped_for_sunburst = for_sunburst.groupby(['Primary Essential Function','Provider\/Company Name', 'Product Name'], as_index=False).mean()\n\ngrouped_for_sunburst_sorted = grouped_for_sunburst.sort_values('engagement_index')[-15:]\nfig1 = px.bar(grouped_for_sunburst_sorted, x='Product Name', y='engagement_index', \n              hover_data=['Primary Essential Function', 'Provider\/Company Name'], color='engagement_index')\n\n\nfor_sunburst = engagement_complete_sorted[['time','Primary Essential Function','Provider\/Company Name','Product Name']][engagement_complete_sorted['time'] > '2020-02-10'][engagement_complete_sorted['time'] <= '2020-04-28']\nfor_sunburst = for_sunburst.dropna()\nfor_sunburst['engagement_index'] = engagement_complete_sorted['engagement_index']\ngrouped_for_sunburst = for_sunburst.groupby(['Primary Essential Function','Provider\/Company Name', 'Product Name'], as_index=False).mean()\n \ngrouped_for_sunburst_sorted = grouped_for_sunburst.sort_values('engagement_index')[-15:]\nfig2 = px.bar(grouped_for_sunburst_sorted, x='Product Name', y='engagement_index',\n              hover_data=['Primary Essential Function', 'Provider\/Company Name'], color='engagement_index')\n\n\nfor_sunburst = engagement_complete_sorted[['time','Primary Essential Function','Provider\/Company Name','Product Name']][engagement_complete_sorted['time'] > '2020-09-01'][engagement_complete_sorted['time'] <= '2020-12-18']\nfor_sunburst = for_sunburst.dropna()\nfor_sunburst['engagement_index'] = engagement_complete_sorted['engagement_index']\ngrouped_for_sunburst = for_sunburst.groupby(['Primary Essential Function','Provider\/Company Name', 'Product Name'], as_index=False).mean()\n \ngrouped_for_sunburst_sorted = grouped_for_sunburst.sort_values('engagement_index')[-15:]\nfig3 = px.bar(grouped_for_sunburst_sorted, x='Product Name', y='engagement_index', \n              hover_data=['Primary Essential Function', 'Provider\/Company Name'], color='engagement_index')\n\n\nfig = make_subplots(rows=1, cols=3, specs=[\n    [{\"type\": \"bar\"}, {\"type\": \"bar\"}, {\"type\":\"bar\"}]\n    ],\n    subplot_titles=(\"1st Jan - 10th Feb\",\"10th Feb - 28th Apr\", \"1st Sept - 18th Dec\"))\n\n\nfig.add_trace(fig1.data[0], row=1, col=1)\n\nfig.add_trace(fig2.data[0], row=1, col=2)\n\nfig.add_trace(fig3.data[0], row=1, col=3)\n\n\nfig.update_layout(\n    title={\n        'text': \"Engagement by Product - Comparison: (Pre-Threat - Threat - Outbreak)\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark'\n    )\nfig.layout.xaxis.tickangle = 45\nfig.layout.xaxis2.tickangle = 45\nfig.layout.xaxis3.tickangle = 45\nfig.layout.coloraxis.colorscale = [(0.0, 'cyan'),(0.5,'blue'),(1.0,'darkblue')]\n\n#fig.layout.annotations[0].x = 0.12\n\nfig.show()","446a70e3":"grouped_by_date = engagement_complete[['time','pct_access','engagement_index','pct_black_hispanic','state']].groupby(['state','time'], as_index=False).mean() #0.25 or 0.3\ngrouped_by_date_lowbh = engagement_complete[['time','pct_access','engagement_index','pct_black_hispanic','state']][engagement_complete['pct_black_hispanic']<0.25].groupby(['state','time'], as_index=False).mean()\ngrouped_by_date_highbh = engagement_complete[['time','pct_access','engagement_index','pct_black_hispanic','state']][engagement_complete['pct_black_hispanic']>=0.25].groupby(['state','time'], as_index=False).mean()\n\ngrouped_by_date_lowbh['time'] = pd.to_datetime(grouped_by_date_lowbh[\"time\"])\ngrouped_by_date_lowbh = grouped_by_date_lowbh.sort_values('time')\ngrouped_by_date_lowbh = grouped_by_date_lowbh.set_index('time', drop=False)\n\ngrouped_by_date_highbh['time'] = pd.to_datetime(grouped_by_date_highbh[\"time\"])\ngrouped_by_date_highbh = grouped_by_date_highbh.sort_values('time')\ngrouped_by_date_highbh = grouped_by_date_highbh.set_index('time', drop=False)\n\n\ncols_low = []\ncols_high = []\nfor _, grp in grouped_by_date_lowbh.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_low.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \nfor _, grp in grouped_by_date_highbh.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_high.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \n        \nweekly_low = pd.DataFrame(cols_low, columns=['time','engagement_index','state'])\nweekly_low = weekly_low.groupby('time', as_index=False).mean()\n\nweekly_high = pd.DataFrame(cols_high, columns=['time','engagement_index','state'])\nweekly_high = weekly_high.groupby('time', as_index=False).mean()\n\nper_state_engagement_ethn = grouped_by_date.groupby('state', as_index=False).mean() #store for barplot\n\nlines = pd.DataFrame()\nlines['time'] = weekly_low['time']\nlines['engagement_lowbh'] = weekly_low['engagement_index']\nlines['engagement_highbh'] = weekly_high['engagement_index']\n\n\nline = px.line(lines, x='time', y=['engagement_lowbh', 'engagement_highbh'], height=400, width=1000,\n        title='Engagement Index - High % Black\/Hispanic vs Low % Black\/Hispanic - Daily',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_lowbh\": \"Red\", \"engagement_highbh\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nlines2 = pd.DataFrame()\nlines2['engagement_index'] = lines['engagement_lowbh']\nlines2['% Black\/Hispanic'] = 'Low'\n\nlines3 = pd.DataFrame()\nlines3['engagement_index'] = lines['engagement_highbh']\nlines3['% Black\/Hispanic'] = 'High'\n\nlines_concat = pd.concat([lines2, lines3])\n\nbp1 = px.box(lines_concat, x='% Black\/Hispanic', y=\"engagement_index\")\nbp1.data[0].marker.color = 'cyan'\n\nridge = px.violin(lines_concat, x='engagement_index', y='% Black\/Hispanic', orientation='h')\n\nridge.update_layout(   \n    template='plotly_dark',\n    height=700\n    )\nridge.data[0].marker.color = 'cyan'\nridge.update_traces(side=\"positive\", width=4)\n\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", \"colspan\":2}, {}], [{\"type\": \"box\"}, {\"type\": \"violin\"}]\n                   ],\n    )\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.add_trace(line.data[1], row=1, col=1)\n\nfig.add_trace(bp1.data[0], row=2, col=1)\nfig.add_trace(ridge.data[0], row=2, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - High % Black\/Hispanic vs Low % Black\/Hispanic - Weekly\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    legend=dict(\n        y=1.15,\n        x=0.35,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    )\n    )\nfig.layout.yaxis3.title = 'Engagement Index'\nfig.layout.xaxis4.title = 'Engagement Index'\nfig.layout.yaxis4.title = '% Black\/Hispanic'\nfig.show()","7936448b":"per_state_engagement2 = copy.copy(per_state_engagement_ethn)\n\nper_state_engagement2.sort_values(by='engagement_index')\npct_black_hispanic = []\nfor elem in per_state_engagement2['pct_black_hispanic']:\n    pct_black_hispanic.append(elem + 0.1)\nper_state_engagement2['pct_black_hispanic'] = pct_black_hispanic\n\nthreshold = 0.25 + 0.1\n\nbar = px.bar(per_state_engagement2, x='pct_black_hispanic', y='state', color='engagement_index',\n             labels={'Black\/Hispanic People':'Black\/Hispanic People per 1 million inhabitants'}, height=800, color_continuous_scale=[\"cyan\", \"blue\", \"darkblue\"])\n\n\nbar.update_layout(\n    title={\n        'text': \"Engagement Index, Black\/Hispanic People - By state\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    barmode='stack', \n    yaxis={'categoryorder':'total descending'},\n    height=600,\n    #bargap=0.3\n    )\nbar.add_vline(x=threshold, line_dash=\"solid\", line_color='red', line_width=3)\nbar.add_annotation(x=threshold, y='Connecticut',\n            text=\"<b>% Black\/Hispanic People Threshold<\/b>\",\n            showarrow=True,\n            font=dict(\n                color=\"red\",\n                size=12\n            ),\n            xanchor='left',\n            align=\"center\",\n            arrowhead=2,\n            arrowsize=1,\n            arrowwidth=2,\n            arrowcolor=\"cyan\",\n            ax=20,\n            ay=-20,\n            bordercolor=\"red\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"black\",\n            opacity=0.8\n                  )\n\nbar.add_hline(y='Arizona', line_dash=\"dash\", line_color='cyan', line_width=1)\nbar.add_hline(y='District Of Columbia', line_dash=\"dash\", line_color='cyan', line_width=1)\n\nbar.add_hline(y='Tennessee', line_dash=\"dash\", line_color='blue', line_width=1)\nbar.add_hline(y='Virginia', line_dash=\"dash\", line_color='blue', line_width=1)\nbar.add_hline(y='Utah', line_dash=\"dash\", line_color='blue', line_width=1)\nbar.add_hline(y='Missouri', line_dash=\"dash\", line_color='blue', line_width=1)\n\nbar.add_annotation(x=0.5, y='Illinois',\n            text=\"<b>Engagement Index > 180; <\/b>\",\n            showarrow=True,\n            font=dict(\n                color=\"Blue\",\n                size=12\n            ),\n            xanchor='left',\n            align=\"center\",\n            arrowhead=2,\n            arrowsize=1,\n            arrowwidth=2,\n            arrowcolor=\"cyan\",\n            ax=40,\n            ay=7,\n            bordercolor=\"Blue\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"black\",\n            opacity=0.8\n                  )\n\nbar.add_annotation(x=0.5, y='North Carolina',\n            text=\"<b>Engagement Index < 180; <\/b>\",\n            showarrow=True,\n            font=dict(\n                color=\"cyan\",\n                size=12\n            ),\n            xanchor='left',\n            align=\"center\",\n            arrowhead=2,\n            arrowsize=1,\n            arrowwidth=2,\n            arrowcolor=\"cyan\",\n            ax=40,\n            ay=-5,\n            bordercolor=\"Blue\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"black\",\n            opacity=0.8\n                  )\n\nbar.add_annotation(x=0.7, y='New Hampshire',\n            text=\"<b>Exception.1: Engagement=138<\/b>\",\n            showarrow=False,\n            font=dict(\n                color=\"Blue\",\n                size=14\n            ),\n            bgcolor=\"black\"\n            )\nbar.add_annotation(x=0.7, y='Wisconsin',\n            text=\"<b>Exception.2: Engagement=71<\/b>\",\n            showarrow=False,\n            font=dict(\n                color=\"Blue\",\n                size=14\n            ),\n            bgcolor=\"black\"\n            )\nbar.add_annotation(x=0.9, y='Ohio',\n            text=\"<b>Exception.3: Engagement=144<\/b>\",\n            showarrow=False,\n            font=dict(\n                color=\"Blue\",\n                size=14\n            ),\n            bgcolor=\"black\"\n            )\nbar.add_annotation(x=0.9, y='Indiana',\n            text=\"<b>Exc.4: Engagement=126<\/b>\",\n            showarrow=False,\n            font=dict(\n                color=\"Blue\",\n                size=14\n            ),\n            bgcolor=\"black\"\n            )\n\nbar.add_annotation(x=0.9, y='Texas',\n            text=\"<b>Exc.5+6: Engagement>240<\/b>\",\n            showarrow=False,\n            font=dict(\n                color=\"cyan\",\n                size=14\n            ),\n            bgcolor=\"black\"\n            )\n\n\nbar.add_hrect(y0='Washington',y1='Arizona', fillcolor='cyan',opacity=0.05, layer='below')\nbar.add_hrect(y0='Missouri',y1='Washington', fillcolor='blue',opacity=0.05, layer='below')\nbar.layout.xaxis.title.text = 'Percentage of Black\/Hispanic People'\nbar.layout.coloraxis.colorbar.title.text = 'Engagement<br>index'\nbar.layout.coloraxis.colorbar.title.font.size = 12\n\nbar.show()","8b550756":"### grouped_by_date = engagement_complete[['time','pct_access','engagement_index','pct_black_hispanic']].groupby('time', as_index=False).mean()\ngrouped_by_date_lowfr = engagement_complete[['time','pct_access','engagement_index','pct_free_reduced','state']][engagement_complete['pct_free_reduced']<=0.3].groupby(['state','time'], as_index=False).mean()\ngrouped_by_date_highfr = engagement_complete[['time','pct_access','engagement_index','pct_free_reduced','state']][engagement_complete['pct_free_reduced']>0.3].groupby(['state','time'], as_index=False).mean()\n\ngrouped_by_date_lowfr['time'] = pd.to_datetime(grouped_by_date_lowfr[\"time\"])\ngrouped_by_date_lowfr = grouped_by_date_lowfr.sort_values('time')\ngrouped_by_date_lowfr = grouped_by_date_lowfr.set_index('time', drop=False)\n\ngrouped_by_date_highfr['time'] = pd.to_datetime(grouped_by_date_highfr[\"time\"])\ngrouped_by_date_highfr = grouped_by_date_highfr.sort_values('time')\ngrouped_by_date_highfr = grouped_by_date_highfr.set_index('time', drop=False)\n\n\ncols_low = []\ncols_high = []\nfor _, grp in grouped_by_date_lowfr.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_low.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \nfor _, grp in grouped_by_date_highfr.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_high.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \n        \nweekly_low = pd.DataFrame(cols_low, columns=['time','engagement_index','state'])\nweekly_low = weekly_low.groupby('time', as_index=False).mean()\n\nweekly_high = pd.DataFrame(cols_high, columns=['time','engagement_index','state'])\nweekly_high = weekly_high.groupby('time', as_index=False).mean()\n\n\nlines = pd.DataFrame()\nlines['time'] = weekly_low['time']\nlines['engagement_lowfr'] = weekly_low['engagement_index']\nlines['engagement_highfr'] = weekly_high['engagement_index']\n\n\nline = px.line(lines, x='time', y=['engagement_lowfr', 'engagement_highfr'], height=400, width=1000,\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_lowfr\": \"Red\", \"engagement_highfr\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nlines2 = pd.DataFrame()\nlines2['engagement_index'] = lines['engagement_lowfr']\nlines2['% Free\/Reduced'] = 'Low'\n\nlines3 = pd.DataFrame()\nlines3['engagement_index'] = lines['engagement_highfr']\nlines3['% Free\/Reduced'] = 'High'\n\nlines_concat = pd.concat([lines2, lines3])\n\nbp1 = px.box(lines_concat, x='% Free\/Reduced', y=\"engagement_index\")\nbp1.data[0].marker.color = 'cyan'\n\nridge = px.violin(lines_concat, x='engagement_index', y='% Free\/Reduced', orientation='h')\n\nridge.update_layout(   \n    template='plotly_dark',\n    height=700\n    )\nridge.data[0].marker.color = 'cyan'\nridge.update_traces(side=\"positive\", width=4)\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", \"colspan\":2}, {}], [{\"type\": \"box\"}, {\"type\":\"violin\"}]\n                   ],\n    )\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.add_trace(line.data[1], row=1, col=1)\n\nfig.add_trace(bp1.data[0], row=2, col=1)\nfig.add_trace(ridge.data[0], row=2, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - High % Free\/Reduced vs Low % Free\/Reduced - Weekly\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    legend=dict(\n        y=1.15,\n        x=0.35,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    )\n    )\nfig.layout.yaxis3.title = 'Engagement Index'\nfig.layout.xaxis4.title = 'Engagement Index'\nfig.layout.yaxis4.title = '% Free\/Reduced'\nfig.show()","80cdb798":"### grouped_by_date = engagement_complete[['time','pct_access','engagement_index','pct_black_hispanic']].groupby('time', as_index=False).mean()\ngrouped_by_date_lowexp = engagement_complete[['time','pct_access','engagement_index','pp_total_raw','state']][engagement_complete['pp_total_raw']<=17000].groupby(['state','time'], as_index=False).mean()\ngrouped_by_date_highexp = engagement_complete[['time','pct_access','engagement_index','pp_total_raw','state']][engagement_complete['pp_total_raw']>=18000].groupby(['state','time'], as_index=False).mean()\n\n\ngrouped_by_date_lowexp['time'] = pd.to_datetime(grouped_by_date_lowexp[\"time\"])\ngrouped_by_date_lowexp = grouped_by_date_lowexp.sort_values('time')\ngrouped_by_date_lowexp = grouped_by_date_lowexp.set_index('time', drop=False)\n\ngrouped_by_date_highexp['time'] = pd.to_datetime(grouped_by_date_highexp[\"time\"])\ngrouped_by_date_highexp = grouped_by_date_highexp.sort_values('time')\ngrouped_by_date_highexp = grouped_by_date_highexp.set_index('time', drop=False)\n\n\ncols_low = []\ncols_high = []\nfor _, grp in grouped_by_date_lowexp.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_low.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \nfor _, grp in grouped_by_date_highexp.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_high.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \n        \nweekly_low = pd.DataFrame(cols_low, columns=['time','engagement_index','state'])\nweekly_low = weekly_low.groupby('time', as_index=False).mean()\n\nweekly_high = pd.DataFrame(cols_high, columns=['time','engagement_index','state'])\nweekly_high = weekly_high.groupby('time', as_index=False).mean()\n\n\nlines = pd.DataFrame()\nlines['time'] = weekly_low['time']\nlines['engagement_lowexp'] = weekly_low['engagement_index']\nlines['engagement_highexp'] = weekly_high['engagement_index']\n\n\nline = px.line(lines, x='time', y=['engagement_lowexp', 'engagement_highexp'], height=400, width=1000,\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_lowexp\": \"Red\", \"engagement_highexp\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nlines2 = pd.DataFrame()\nlines2['engagement_index'] = lines['engagement_lowexp']\nlines2['Per-Pupil Total Expenditure'] = 'Low'\n\nlines3 = pd.DataFrame()\nlines3['engagement_index'] = lines['engagement_highexp']\nlines3['Per-Pupil Total Expenditure'] = 'High'\n\nlines_concat = pd.concat([lines2, lines3])\n\nbp1 = px.box(lines_concat, x='Per-Pupil Total Expenditure', y=\"engagement_index\")\nbp1.data[0].marker.color = 'cyan'\n\nridge = px.violin(lines_concat, x='engagement_index', y='Per-Pupil Total Expenditure', orientation='h')\n\nridge.update_layout(   \n    template='plotly_dark',\n    height=700\n    )\nridge.data[0].marker.color = 'cyan'\nridge.update_traces(side=\"positive\", width=4)\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", \"colspan\":2}, {}], [{\"type\": \"box\"}, {\"type\":\"violin\"}]\n                   ],\n    )\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.add_trace(line.data[1], row=1, col=1)\n\nfig.add_trace(bp1.data[0], row=2, col=1)\nfig.add_trace(ridge.data[0], row=2, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - High vs Low Per-Pupil Total Expenditure - Weekly\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    legend=dict(\n        y=1.15,\n        x=0.35,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    )\n    )\nfig.layout.yaxis3.title = 'Engagement Index'\nfig.layout.xaxis4.title = 'Engagement Index'\nfig.layout.yaxis4.title = 'Per-Pupil T. Expenditure'\nfig.show()","1e695370":"grouped_by_date = engagement_complete[['time','pct_access','engagement_index','locale']].groupby(['time','locale'], as_index=False).mean()\n#grouped_by_date_lowexp = engagement_complete[['time','pct_access','engagement_index','pp_total_raw']][engagement_complete['pp_total_raw']<=17000].groupby('time', as_index=False).mean()\n#grouped_by_date_highexp = engagement_complete[['time','pct_access','engagement_index','pp_total_raw']][engagement_complete['pp_total_raw']>=18000].groupby('time', as_index=False).mean()\n\ngrouped_by_date_sorted = grouped_by_date.sort_values('time')\ngrouped_by_date_sorted2 = grouped_by_date_sorted[['time','engagement_index','locale']].groupby(['time','locale'], as_index=False).mean()\ngrouped_by_date_sorted2 = grouped_by_date_sorted2.set_index('time', drop=False)\ncols = []\nfor _, grp in grouped_by_date_sorted2.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    locale = []\n    for loc in grp['locale']:\n        if loc not in locale:\n            cols.append((grp['time'][0], grp[grp['locale']==loc]['engagement_index'].mean(), loc))\n            locale.append(loc)\n        else:\n            break\nweekly = pd.DataFrame(cols, columns=['time','engagement_index','locale'])\n\n#weekly: mean engagement by week; grouped_by_date: engagement day by day\nline = px.line(weekly, x='time', y=['engagement_index'], color='locale', height=400, width=1000,\n        title='Engagement Index - High Per-Pupil Total Expenditure vs Low Per-Pupil Total Expenditure',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_lowexp\": \"Red\", \"engagement_highexp\": \"MediumPurple\"\n        },\n        template=\"plotly_dark\"\n        )\n\nlines1 = pd.DataFrame()\nlines1['engagement_index'] = grouped_by_date[grouped_by_date['locale']=='City']['engagement_index']\nlines1['locale'] = 'City'\nlines2 = pd.DataFrame()\nlines2['engagement_index'] = grouped_by_date[grouped_by_date['locale']=='Town']['engagement_index']\nlines2['locale'] = 'Town'\nlines3 = pd.DataFrame()\nlines3['engagement_index'] = grouped_by_date[grouped_by_date['locale']=='Suburb']['engagement_index']\nlines3['locale'] = 'Suburb'\nlines4 = pd.DataFrame()\nlines4['engagement_index'] = grouped_by_date[grouped_by_date['locale']=='Rural']['engagement_index']\nlines4['locale'] = 'Rural'\n\n\nlines_concat = pd.concat([lines1, lines2, lines3, lines4])\n\nbp1 = px.box(lines_concat, x='locale', y=\"engagement_index\")\n\n#bp1 = px.box(grouped_by_date, y=\"engagement_index\", color=\"locale\")\nbp1.data[0].marker.color = 'Cyan'\n\n'''\nridge = px.violin(weekly, x='engagement_index', y='locale', orientation='h')\n\nridge.update_layout(\n    title={\n        'text': \"Mean Engagement Index per Week - Grouped by Location Context\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    height=700\n    )\nridge.data[0].marker.color = 'cyan'\nridge.update_traces(side=\"positive\", width=4)\n\n#fig.add_trace(ridge.data[0], row=2, col=2)\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", 'colspan':2},{}], \n    [{\"type\": \"box\"},{\"type\":\"violin\"}]\n                   ],\n    )\n'''\n\nfig = make_subplots(rows=2, cols=1,\n                   specs=[\n    [{\"type\": \"scatter\"}], \n    [{\"type\": \"box\"}]\n                   ],\n    )\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.data[0].line.color='red'\nfig.add_trace(line.data[1], row=1, col=1)\nfig.data[1].line.color='cyan'\nfig.add_trace(line.data[2], row=1, col=1)\nfig.data[2].line.color='lime'\nfig.add_trace(line.data[3], row=1, col=1)\nfig.data[3].line.color='orange'\n\nfig.add_trace(bp1.data[0], row=2, col=1)\n\n\nfig.update_layout(\n    title={\n        'text': \"Mean Engagement Index per Week - Grouped by Location Context\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    height=700\n    )\nfig.layout.yaxis2.title = 'Engagement '\n\nfig.show()","f7bfd623":"pop = pd.read_csv(\"..\/input\/2019-census-us-population-data-by-state\/2019_Census_US_Population_Data_By_State_Lat_Long.csv\")\nnew = []\ni = 0\nfor state in pop['STATE']:\n    try:\n        new.append((us_state_abbrev[state], pop['POPESTIMATE2019'][i]))\n        i += 1\n    except:\n        new.append((\"DC\", pop['POPESTIMATE2019'][i]))\n        i += 1\nnew = pd.DataFrame(new, columns=['State','Pop'])\n\nmuseums = pd.read_csv(\"..\/input\/usa-museums-ds\/museums_separated.csv\")\nmuseums = museums[['State..Administrative.Location.','Annual.Revenue']]\nmuseums_grouped = museums.groupby('State..Administrative.Location.', as_index=False).count()#\n\npopul = []\nfor state in museums_grouped['State..Administrative.Location.']:\n    for i in range(len(new)):\n        if state==new['State'][i]:\n            popul.append(new['Pop'][i])\n            \nmuseums_grouped['pop'] = popul\nmuseums_grouped['countOverPop'] =  museums_grouped['Annual.Revenue'] \/ (museums_grouped['pop'] \/ 1000000)\n            \nmuseums_grouped['state_abbrev'] = museums_grouped['State..Administrative.Location.']\n\nengagement_complete_grouped = engagement_complete.groupby(['time','state'], as_index=False).mean()\n\nstates = []\nfor state in engagement_complete_grouped['state']:\n    states.append(us_state_abbrev[state])\nengagement_complete_grouped['state_abbrev'] = states\n\nengagement_complete_grouped2 = pd.merge(engagement_complete_grouped, museums_grouped, on='state_abbrev')[['time','state','engagement_index','countOverPop','pop']]\n\ngrouped_by_date_lowEdPlaces = engagement_complete_grouped2[['time','engagement_index','state','countOverPop']][engagement_complete_grouped2['countOverPop']<40].groupby(['state','time'], as_index=False).mean()\ngrouped_by_date_highEdPlaces = engagement_complete_grouped2[['time','engagement_index','state','countOverPop']][engagement_complete_grouped2['countOverPop']>=40].groupby(['state','time'], as_index=False).mean()\n\ngrouped_by_date_lowEdPlaces['time'] = pd.to_datetime(grouped_by_date_lowEdPlaces[\"time\"])\ngrouped_by_date_lowEdPlaces = grouped_by_date_lowEdPlaces.sort_values('time')\ngrouped_by_date_lowEdPlaces = grouped_by_date_lowEdPlaces.set_index('time', drop=False)\n\ngrouped_by_date_highEdPlaces['time'] = pd.to_datetime(grouped_by_date_highEdPlaces[\"time\"])\ngrouped_by_date_highEdPlaces = grouped_by_date_highEdPlaces.sort_values('time')\ngrouped_by_date_highEdPlaces = grouped_by_date_highEdPlaces.set_index('time', drop=False)\n\n\ncols_low = []\ncols_high = []\nfor _, grp in grouped_by_date_lowEdPlaces.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_low.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \nfor _, grp in grouped_by_date_highEdPlaces.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_high.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \n        \nweekly_low = pd.DataFrame(cols_low, columns=['time','engagement_index','state'])\nweekly_low = weekly_low.groupby('time', as_index=False).mean()\n\nweekly_high = pd.DataFrame(cols_high, columns=['time','engagement_index','state'])\nweekly_high = weekly_high.groupby('time', as_index=False).mean()\n\n\nper_state_engagement = engagement_complete_grouped2.groupby('state', as_index=False).mean()[['state','engagement_index','countOverPop']]\n\nlines = pd.DataFrame()\nlines['time'] = weekly_low['time']\nlines['engagement_lowEdPlaces'] = weekly_low['engagement_index']\nlines['engagement_highEdPlaces'] = weekly_high['engagement_index']\n\n\nline = px.line(lines, x='time', y=['engagement_lowEdPlaces', 'engagement_highEdPlaces'], height=400, width=1000,\n        title='Engagement Index - High Education Places vs Low Education Places  - Daily',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_lowEdPlaces\": \"Red\", \"engagement_highEdPlaces\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nlines2 = pd.DataFrame()\nlines2['engagement_index'] = lines['engagement_lowEdPlaces']\nlines2['nEducationPlaces'] = 'Low'\n\nlines3 = pd.DataFrame()\nlines3['engagement_index'] = lines['engagement_highEdPlaces']\nlines3['nEducationPlaces'] = 'High'\n\nlines_concat = pd.concat([lines2, lines3])\n\nbp1 = px.box(lines_concat, x='nEducationPlaces', y=\"engagement_index\")\nbp1.data[0].marker.color = 'cyan'\n\nridge = px.violin(lines_concat, x='engagement_index', y='nEducationPlaces', orientation='h')\n\nridge.update_layout(   \n    template='plotly_dark',\n    height=700\n    )\nridge.data[0].marker.color = 'cyan'\nridge.update_traces(side=\"positive\", width=4)\n\n\n\n'''density2d = px.density_contour(lines, x=\"engagement_lowEdPlaces\", y=\"engagement_highEdPlaces\")\ndensity2d.update_traces(contours_coloring=\"fill\", contours_showlabels = False, colorscale='Electric')\ndensity2d.update_layout(title={\n        'text': \"Engagement Index - High Education Places vs Low Education Places  - Daily\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},\n        template='plotly_dark')\ndensity2d.data[0].showscale = False\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", \"colspan\":2}, {}], [{\"type\": \"box\"}, {}]\n                   ],\n    )\n'''\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", 'colspan':2},{}], \n    [{\"type\": \"box\"},{\"type\":\"violin\"}]\n                   ],\n    )\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.add_trace(line.data[1], row=1, col=1)\n\nfig.add_trace(bp1.data[0], row=2, col=1)\nfig.add_trace(ridge.data[0], row=2, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - High Education Places vs Low Education Places - Weekly\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    legend=dict(\n        y=1.15,\n        x=0.35,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    )\n    )\nfig.layout.yaxis3.title = 'Engagement Index'\nfig.layout.xaxis4.title = 'Engagement Index'\nfig.layout.yaxis4.title = 'n.EducationPlaces'\nfig.show()    ","230bb0ce":"public_schools = pd.read_csv(\"..\/input\/us-schools-dataset\/Public_Schools.csv\")\npublic_schools['isprivate'] = 0\npublic_schools = public_schools[['STATE','isprivate']]\n\nprivate_schools = pd.read_csv(\"..\/input\/us-schools-dataset\/Private_Schools.csv\")\nprivate_schools['isprivate'] = 1\nprivate_schools = private_schools[['STATE','isprivate']]\n\nschools = pd.concat([public_schools, private_schools])\n\nschools2 = copy.copy(schools)\nschools2 = schools2.dropna(subset=['STATE'])\n\npublic_grouped = schools2[['STATE', 'isprivate']][schools2['isprivate']==0].groupby('STATE', as_index=False).count() \npublic_grouped['public'] = public_grouped['isprivate']\npublic_grouped = public_grouped.drop(['isprivate'], axis=1)\n\nprivate_grouped = schools2[['STATE', 'isprivate']][schools2['isprivate']==1].groupby('STATE', as_index=False).count() \nprivate_grouped['private'] = private_grouped['isprivate']\nprivate_grouped = private_grouped.drop(['isprivate'], axis=1)\n\nschools_grouped = pd.merge(public_grouped, private_grouped, on='STATE')\nschools_grouped['privOverPub'] = schools_grouped['private'] \/ schools_grouped['public']\n\nschools_grouped['state_abbrev'] = schools_grouped['STATE']\n\nengagement_complete_grouped = engagement_complete.groupby(['time','state'], as_index=False).mean()\n\nstates = []\nfor state in engagement_complete_grouped['state']:\n    states.append(us_state_abbrev[state])\nengagement_complete_grouped['state_abbrev'] = states\n\nengagement_complete_grouped2 = pd.merge(engagement_complete_grouped, schools_grouped, on='state_abbrev')[['time','state','engagement_index','privOverPub']]\n\n\ngrouped_by_date_lowPrivOverPub = engagement_complete_grouped2[['time','engagement_index','state','privOverPub']][engagement_complete_grouped2['privOverPub']<0.34].groupby(['state','time'], as_index=False).mean()\ngrouped_by_date_highPrivOverPub = engagement_complete_grouped2[['time','engagement_index','state','privOverPub']][engagement_complete_grouped2['privOverPub']>=0.34].groupby(['state','time'], as_index=False).mean()\n\ngrouped_by_date_lowPrivOverPub['time'] = pd.to_datetime(grouped_by_date_lowPrivOverPub[\"time\"])\ngrouped_by_date_lowPrivOverPub = grouped_by_date_lowPrivOverPub.sort_values('time')\ngrouped_by_date_lowPrivOverPub = grouped_by_date_lowPrivOverPub.set_index('time', drop=False)\n\ngrouped_by_date_highPrivOverPub['time'] = pd.to_datetime(grouped_by_date_highPrivOverPub[\"time\"])\ngrouped_by_date_highPrivOverPub = grouped_by_date_highPrivOverPub.sort_values('time')\ngrouped_by_date_highPrivOverPub = grouped_by_date_highPrivOverPub.set_index('time', drop=False)\n\n\ncols_low = []\ncols_high = []\nfor _, grp in grouped_by_date_lowPrivOverPub.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_low.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \nfor _, grp in grouped_by_date_highPrivOverPub.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_high.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \n        \nweekly_low = pd.DataFrame(cols_low, columns=['time','engagement_index','state'])\nweekly_low = weekly_low.groupby('time', as_index=False).mean()\n\nweekly_high = pd.DataFrame(cols_high, columns=['time','engagement_index','state'])\nweekly_high = weekly_high.groupby('time', as_index=False).mean()\n\n\nper_state_engagement['PrivOverPub'] = engagement_complete_grouped2.groupby('state', as_index=False).mean()[['privOverPub']]\n\nlines = pd.DataFrame()\nlines['time'] = weekly_low['time']\nlines['engagement_lowPrivOverPub'] = weekly_low['engagement_index']\nlines['engagement_highPrivOverPub'] = weekly_high['engagement_index']\n\n\nline = px.line(lines, x='time', y=['engagement_lowPrivOverPub', 'engagement_highPrivOverPub'], height=400, width=1000,\n        title='Engagement Index - High PrivatePublic Ratio vs Low PrivatePublic Ratio - Daily',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_lowPrivOverPub\": \"red\", \"engagement_highPrivOverPub\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nlines2 = pd.DataFrame()\nlines2['engagement_index'] = lines['engagement_lowPrivOverPub']\nlines2['PrivOverPubRatio'] = 'Low'\n\nlines3 = pd.DataFrame()\nlines3['engagement_index'] = lines['engagement_highPrivOverPub']\nlines3['PrivOverPubRatio'] = 'High'\n\nlines_concat = pd.concat([lines2, lines3])\n\nbp1 = px.box(lines_concat, x='PrivOverPubRatio', y=\"engagement_index\")\nbp1.data[0].marker.color = 'cyan'\n\nridge = px.violin(lines_concat, x='engagement_index', y='PrivOverPubRatio', orientation='h')\n\nridge.update_layout(   \n    template='plotly_dark',\n    height=700\n    )\nridge.data[0].marker.color = 'cyan'\nridge.update_traces(side=\"positive\", width=4)\n\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", 'colspan':2},{}], \n    [{\"type\": \"box\"},{\"type\":\"violin\"}]\n                   ],\n    )\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.add_trace(line.data[1], row=1, col=1)\n\nfig.add_trace(bp1.data[0], row=2, col=1)\nfig.add_trace(ridge.data[0], row=2, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - High PrivatePublic Ratio vs Low PrivatePublic Ratio - Weekly\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    legend=dict(\n        y=1.15,\n        x=0.35,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    )\n    )\nfig.layout.yaxis3.title = 'Engagement Index'\nfig.layout.xaxis4.title = 'Engagement Index'\nfig.layout.yaxis4.title = 'PrivOverPubRatio'\nfig.show()    ","f6edcf55":"more_demographics = pd.read_csv(\"..\/input\/usa-weed-price-data\/Demographics_State.csv\")\nstates = []\nfor state in more_demographics['region']:\n    state_ = state.split()\n    state_upper = []\n    for word in state_:\n        word_ = ''\n        word_ += f\"{word[0].upper()}{word[1:]}\"\n        state_upper.append(word_)\n    state = ' '.join(state_upper)\n    states.append(us_state_abbrev[state])\n\nmore_demographics['state_abbrev'] = states\n\nengagement_complete_grouped = engagement_complete.groupby(['time','state'], as_index=False).mean()\n\nstates = []\nfor state in engagement_complete_grouped['state']:\n    states.append(us_state_abbrev[state])\nengagement_complete_grouped['state_abbrev'] = states\n\nengagement_complete_grouped2 = pd.merge(engagement_complete_grouped, more_demographics, on='state_abbrev')[['time','state','engagement_index','percent_asian','per_capita_income']]\n\ngrouped_by_date_lowIncome = engagement_complete_grouped2[['time','engagement_index','state','per_capita_income']][engagement_complete_grouped2['per_capita_income']<27000].groupby(['state','time'], as_index=False).mean()\ngrouped_by_date_highIncome = engagement_complete_grouped2[['time','engagement_index','state','per_capita_income']][engagement_complete_grouped2['per_capita_income']>=27000].groupby(['state','time'], as_index=False).mean()\n\ngrouped_by_date_lowIncome['time'] = pd.to_datetime(grouped_by_date_lowIncome[\"time\"])\ngrouped_by_date_lowIncome = grouped_by_date_lowIncome.sort_values('time')\ngrouped_by_date_lowIncome = grouped_by_date_lowIncome.set_index('time', drop=False)\n\ngrouped_by_date_highIncome['time'] = pd.to_datetime(grouped_by_date_highIncome[\"time\"])\ngrouped_by_date_highIncome = grouped_by_date_highIncome.sort_values('time')\ngrouped_by_date_highIncome = grouped_by_date_highIncome.set_index('time', drop=False)\n\n\ncols_low = []\ncols_high = []\nfor _, grp in grouped_by_date_lowIncome.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_low.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \nfor _, grp in grouped_by_date_highIncome.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_high.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \n        \nweekly_low = pd.DataFrame(cols_low, columns=['time','engagement_index','state'])\nweekly_low = weekly_low.groupby('time', as_index=False).mean()\n\nweekly_high = pd.DataFrame(cols_high, columns=['time','engagement_index','state'])\nweekly_high = weekly_high.groupby('time', as_index=False).mean()\n\n\n\nper_state_engagement['INCOME'] = engagement_complete_grouped2.groupby('state', as_index=False).mean()[['per_capita_income']]\n\nlines = pd.DataFrame()\nlines['time'] = weekly_low['time']\nlines['engagement_lowIncome'] = weekly_low['engagement_index']\nlines['engagement_highIncome'] = weekly_high['engagement_index']\n\n\nline = px.line(lines, x='time', y=['engagement_lowIncome', 'engagement_highIncome'], height=400, width=1000,\n        title='Engagement Index - High Income vs Low Income - Daily',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_lowIncome\": \"red\", \"engagement_highIncome\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nlines2 = pd.DataFrame()\nlines2['engagement_index'] = lines['engagement_lowIncome']\nlines2['Income'] = 'Low'\n\nlines3 = pd.DataFrame()\nlines3['engagement_index'] = lines['engagement_highIncome']\nlines3['Income'] = 'High'\n\nlines_concat = pd.concat([lines2, lines3])\n\nbp1 = px.box(lines_concat, x='Income', y=\"engagement_index\")\nbp1.data[0].marker.color = 'cyan'\n\nridge = px.violin(lines_concat, x='engagement_index', y='Income', orientation='h')\n\nridge.update_layout(   \n    template='plotly_dark',\n    height=700\n    )\nridge.data[0].marker.color = 'cyan'\nridge.update_traces(side=\"positive\", width=4)\n\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", 'colspan':2},{}], \n    [{\"type\": \"box\"},{\"type\":\"violin\"}]\n                   ],\n    )\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.add_trace(line.data[1], row=1, col=1)\n\nfig.add_trace(bp1.data[0], row=2, col=1)\nfig.add_trace(ridge.data[0], row=2, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - High Income vs Low Income - Weekly\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    legend=dict(\n        y=1.15,\n        x=0.35,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    )\n    )\nfig.layout.yaxis3.title = 'Engagement Index'\nfig.layout.xaxis4.title = 'Engagement Index'\nfig.layout.yaxis4.title = 'Income Band'\nfig.show()    ","19f4c1cf":"per_state_engagement2 = copy.copy(per_state_engagement)\ncorr = per_state_engagement2[['engagement_index','countOverPop','PrivOverPub','INCOME']].corr()\nmask = np.triu(np.ones_like(corr, dtype=bool))\ndf_mask = corr.mask(mask)\n\nfig = ff.create_annotated_heatmap(z=df_mask.to_numpy(), \n                                  x=df_mask.columns.tolist(),\n                                  y=df_mask.columns.tolist(),\n                                  hoverinfo=\"none\", #Shows hoverinfo for null values\n                                  showscale=True, ygap=0, xgap=0\n                                 )\n\nfig.update_xaxes(side=\"bottom\")\n\nfig.update_layout(\n    title_text='Correlation Matrix', \n    title_x=0.5, \n    width=750, \n    height=750,\n    yaxis_autorange='reversed',\n    template='plotly_dark'\n)\n\nfor i in range(len(fig.layout.annotations)):\n    if fig.layout.annotations[i].text == 'nan':\n        fig.layout.annotations[i].text = \"\"\n\nfig.data[0].x = fig.data[0].x[:-1]\nfig.data[0].y = fig.data[0].y[1:]        \n        \nfig.data[0].z = fig.data[0].z[1:]\nnew_array = []\nfor i in range(len(fig.data[0].z)):\n    new_array.append(fig.data[0].z[i][:-1])\nfig.data[0].z = np.array(new_array)        \nfig.data[0].colorscale = [[0, 'cyan'], [1, 'blue']]\n\nfig.add_annotation(x='PrivOverPub', y=0.25,\n            text=\"<b><span style='color:blue'>countOverPop<\/span> = Number of non-school Education<br>Infrastructures per 1 million inhabitants<\/b>\",\n            showarrow=False,\n            font=dict(\n                color=\"Cyan\",\n                size=12\n            ),\n            bordercolor=\"Cyan\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"black\",\n            opacity=1.0\n            )\nfig.add_annotation(x='PrivOverPub', y='countOverPop',\n            text=\"<b><span style='color:blue'>PrivOverPub<\/span> = Number of Private<br>schools over number of Public schools (ratio)<\/b>\",\n            showarrow=False,\n            font=dict(\n                color=\"Cyan\",\n                size=12\n            ),\n            bordercolor=\"Cyan\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"black\",\n            opacity=1.0\n            )\nfig.add_annotation(x='PrivOverPub', y=-0.20,\n            text=\"<b><span style='color:blue'>INCOME<\/span> = Income per capita<\/b>\",\n            showarrow=False,\n            font=dict(\n                color=\"Cyan\",\n                size=12\n            ),\n            bordercolor=\"Cyan\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"black\",\n            opacity=1.0\n            )\nfig.show()","fd7d6ca0":"per_state_engagement2 = copy.copy(per_state_engagement)\n\nper_state_engagement2.sort_values(by='engagement_index')\n\nbar1 = px.bar(per_state_engagement2, x='INCOME', y='state', color='engagement_index',\n             labels={'INCOME':'Median Income per Capita'}, height=800, color_continuous_scale=[\"blue\", \"purple\", \"red\"])\nbar2 = px.bar(per_state_engagement2, x='countOverPop', y='state', color='engagement_index',\n             labels={'INCOME':'Median Income per Capita'}, height=800, color_continuous_scale=[\"blue\", \"purple\", \"red\"])\nbar3 = px.bar(per_state_engagement2, x='PrivOverPub', y='state', color='engagement_index',\n             labels={'INCOME':'Median Income per Capita'}, height=800, color_continuous_scale=[\"blue\", \"purple\", \"red\"])\n\n\n\nfig = make_subplots(rows=1, cols=3, horizontal_spacing = 0.15,\n                    subplot_titles=(\"Income per Capita\",\"Education Places per 1 Million Pop.\", \"Private\/Public Schools Ratio\"))\n                        \nfig.add_trace(bar1.data[0], row=1, col=1)\nfig.add_trace(bar2.data[0], row=1, col=2)\nfig.add_trace(bar3.data[0], row=1, col=3)\n\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - By state\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    barmode='stack', \n    yaxis={'categoryorder':'total descending'},\n    yaxis2={'categoryorder':'total descending'},\n    yaxis3={'categoryorder':'total descending'}\n    )\nfig.layout.coloraxis.colorscale = [(0.0, 'cyan'),(0.5,'blue'),(1.0,'darkblue')]\n\nfig.add_vline(x=27000, line_dash=\"solid\", line_color='red', line_width=3, col=1)\nfig.add_vline(x=40, line_dash=\"solid\", line_color='red', line_width=3, col=2)\nfig.add_vline(x=0.34, line_dash=\"solid\", line_color='red', line_width=3, col=3)\n\nfig.layout.annotations[0].x = 0.01\nfig.layout.annotations[1].x = 0.43\nfig.layout.annotations[2].x = 0.93\n\ny = list(fig.data[0].y)\ny[3] = 'D.C.'\ny[11] = 'N.Hampshire'\nfig.data[0].y = y\nfig.data[1].y = y\nfig.data[2].y = y\n\nfig.show()","eca4672d":"engagement_complete_grouped = engagement_complete.groupby(['time','state'], as_index=False).mean()\n\nstates = []\nfor state in engagement_complete_grouped['state']:\n    states.append(us_state_abbrev[state])\nengagement_complete_grouped['state_abbrev'] = states\n\nengagement_complete_grouped2 = pd.merge(engagement_complete_grouped, more_demographics, on='state_abbrev')[['time','state','engagement_index','percent_asian','per_capita_income']]\n\ngrouped_by_date_lowPctAsian = engagement_complete_grouped2[['time','engagement_index','state','percent_asian']][engagement_complete_grouped2['percent_asian']<=2.0].groupby(['state','time'], as_index=False).mean()\ngrouped_by_date_highPctAsian = engagement_complete_grouped2[['time','engagement_index','state','percent_asian']][engagement_complete_grouped2['percent_asian']>3.0].groupby(['state','time'], as_index=False).mean()\n\ngrouped_by_date_lowPctAsian['time'] = pd.to_datetime(grouped_by_date_lowPctAsian[\"time\"])\ngrouped_by_date_lowPctAsian = grouped_by_date_lowPctAsian.sort_values('time')\ngrouped_by_date_lowPctAsian = grouped_by_date_lowPctAsian.set_index('time', drop=False)\n\ngrouped_by_date_highPctAsian['time'] = pd.to_datetime(grouped_by_date_highPctAsian[\"time\"])\ngrouped_by_date_highPctAsian = grouped_by_date_highPctAsian.sort_values('time')\ngrouped_by_date_highPctAsian = grouped_by_date_highPctAsian.set_index('time', drop=False)\n\n\ncols_low = []\ncols_high = []\nfor _, grp in grouped_by_date_lowPctAsian.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_low.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \nfor _, grp in grouped_by_date_highPctAsian.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_high.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \n        \nweekly_low = pd.DataFrame(cols_low, columns=['time','engagement_index','state'])\nweekly_low = weekly_low.groupby('time', as_index=False).mean()\n\nweekly_high = pd.DataFrame(cols_high, columns=['time','engagement_index','state'])\nweekly_high = weekly_high.groupby('time', as_index=False).mean()\n\n\nlines = pd.DataFrame()\nlines['time'] = weekly_low['time']\nlines['engagement_lowPctAsian'] = weekly_low['engagement_index']\nlines['engagement_highPctAsian'] = weekly_high['engagement_index']\n\nline = px.line(lines, x='time', y=['engagement_lowPctAsian', 'engagement_highPctAsian'], height=400, width=1000,\n        title='Engagement Index - High Percentage of Asian vs Low Percentage of Asian - Daily',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_lowPctAsian\": \"red\", \"engagement_highPctAsian\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nlines2 = pd.DataFrame()\nlines2['engagement_index'] = lines['engagement_lowPctAsian']\nlines2['PctAsian'] = 'Low'\n\nlines3 = pd.DataFrame()\nlines3['engagement_index'] = lines['engagement_highPctAsian']\nlines3['PctAsian'] = 'High'\n\nlines_concat = pd.concat([lines2, lines3])\n\nbp1 = px.box(lines_concat, x='PctAsian', y=\"engagement_index\")\nbp1.data[0].marker.color = 'cyan'\n\nridge = px.violin(lines_concat, x='engagement_index', y='PctAsian', orientation='h')\n\nridge.update_layout(   \n    template='plotly_dark',\n    height=700\n    )\nridge.data[0].marker.color = 'cyan'\nridge.update_traces(side=\"positive\", width=4)\n\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", 'colspan':2},{}], \n    [{\"type\": \"box\"},{\"type\":\"violin\"}]\n                   ],\n    )\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.add_trace(line.data[1], row=1, col=1)\n\nfig.add_trace(bp1.data[0], row=2, col=1)\nfig.add_trace(ridge.data[0], row=2, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - High Percentage of Asian vs Low Percentage of Asian - Weekly\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    legend=dict(\n        y=1.15,\n        x=0.35,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    )\n    )\nfig.layout.yaxis3.title = 'Engagement Index'\nfig.layout.xaxis4.title = 'Engagement Index'\nfig.layout.yaxis4.title = 'PctAsian'\nfig.show()    ","ab60f9ff":"crimes = pd.read_csv(\"..\/input\/united-states-crime-rates-by-county\/crime_data_w_population_and_crime_rate.csv\")[['county_name','crime_rate_per_100000']]\nstates = []\nfor county in crimes['county_name']:\n    states.append(county[-2:])\ncrimes['state_abbrev'] = states\n\ncrimes = crimes.groupby('state_abbrev', as_index=False).mean()\n\n\nengagement_complete_grouped = engagement_complete.groupby(['time','state'], as_index=False).mean()\n\nstates = []\nfor state in engagement_complete_grouped['state']:\n    states.append(us_state_abbrev[state])\nengagement_complete_grouped['state_abbrev'] = states\n\nengagement_complete_grouped2 = pd.merge(engagement_complete_grouped, crimes, on='state_abbrev')[['time','state','engagement_index','crime_rate_per_100000']]\n\n\ngrouped_by_date_lowCrimeRate = engagement_complete_grouped2[['time','engagement_index','state','crime_rate_per_100000']][engagement_complete_grouped2['crime_rate_per_100000']<=240.0].groupby(['state','time'], as_index=False).mean()\ngrouped_by_date_highCrimeRate = engagement_complete_grouped2[['time','engagement_index','state','crime_rate_per_100000']][engagement_complete_grouped2['crime_rate_per_100000']>245.0].groupby(['state','time'], as_index=False).mean()\n\ngrouped_by_date_lowCrimeRate['time'] = pd.to_datetime(grouped_by_date_lowCrimeRate[\"time\"])\ngrouped_by_date_lowCrimeRate = grouped_by_date_lowCrimeRate.sort_values('time')\ngrouped_by_date_lowCrimeRate = grouped_by_date_lowCrimeRate.set_index('time', drop=False)\n\ngrouped_by_date_highCrimeRate['time'] = pd.to_datetime(grouped_by_date_highCrimeRate[\"time\"])\ngrouped_by_date_highCrimeRate = grouped_by_date_highCrimeRate.sort_values('time')\ngrouped_by_date_highCrimeRate = grouped_by_date_highCrimeRate.set_index('time', drop=False)\n\n\ncols_low = []\ncols_high = []\nfor _, grp in grouped_by_date_lowCrimeRate.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_low.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \nfor _, grp in grouped_by_date_highCrimeRate.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_high.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \n        \nweekly_low = pd.DataFrame(cols_low, columns=['time','engagement_index','state'])\nweekly_low = weekly_low.groupby('time', as_index=False).mean()\n\nweekly_high = pd.DataFrame(cols_high, columns=['time','engagement_index','state'])\nweekly_high = weekly_high.groupby('time', as_index=False).mean()\n\nper_state_engagement = engagement_complete_grouped2.groupby('state', as_index=False).mean() #store for barplot\n\nlines = pd.DataFrame()\nlines['time'] = weekly_low['time']\nlines['engagement_lowCrimeRate'] = weekly_low['engagement_index']\nlines['engagement_highCrimeRate'] = weekly_high['engagement_index']\n\nline = px.line(lines, x='time', y=['engagement_lowCrimeRate', 'engagement_highCrimeRate'], height=400, width=1000,\n        title='Engagement Index - High Crime Rate vs Low Crime Rate - Daily',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_lowCrimeRate\": \"red\", \"engagement_highCrimeRate\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nlines2 = pd.DataFrame()\nlines2['engagement_index'] = lines['engagement_lowCrimeRate']\nlines2['CrimeRate'] = 'Low'\n\nlines3 = pd.DataFrame()\nlines3['engagement_index'] = lines['engagement_highCrimeRate']\nlines3['CrimeRate'] = 'High'\n\nlines_concat = pd.concat([lines2, lines3])\n\nbp1 = px.box(lines_concat, x='CrimeRate', y=\"engagement_index\")\nbp1.data[0].marker.color = 'cyan'\n\nridge = px.violin(lines_concat, x='engagement_index', y='CrimeRate', orientation='h')\n\nridge.update_layout(   \n    template='plotly_dark',\n    height=700\n    )\nridge.data[0].marker.color = 'cyan'\nridge.update_traces(side=\"positive\", width=4)\n\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", 'colspan':2},{}], \n    [{\"type\": \"box\"},{\"type\":\"violin\"}]\n                   ],\n    )\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.add_trace(line.data[1], row=1, col=1)\n\nfig.add_trace(bp1.data[0], row=2, col=1)\nfig.add_trace(ridge.data[0], row=2, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - High Crime Rate vs Low Crime Rate - Weekly\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    legend=dict(\n        y=1.15,\n        x=0.35,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    )\n    )\nfig.layout.yaxis3.title = 'Engagement Index'\nfig.layout.xaxis4.title = 'Engagement Index'\nfig.layout.yaxis4.title = 'CrimeRate'\nfig.show()    \n","34f3bcd4":"homeless = pd.read_csv(\"..\/input\/homelessness\/2007-2016-Homelessnewss-USA.csv\")\n\nhomeless = homeless[homeless['Year'].str.contains(\"2016\")][['State','Count']]\n\ncount = []\nfor c in homeless['Count']:\n    c = c.replace(',','')\n    count.append(int(c))\nhomeless['Count'] = count\n\nhomeless = homeless.groupby('State', as_index=False).mean()\n\npop_per_state = copy.copy(new)\nhomeless_withpop = pd.merge(homeless, pop_per_state, on='State') \nhomeless_withpop['countOverPop'] =  homeless_withpop['Count'] \/ (homeless_withpop['Pop'] \/ 1000000)\nhomeless_withpop['state_abbrev'] = homeless_withpop['State']\n\nengagement_complete_grouped = engagement_complete.groupby(['time','state'], as_index=False).mean()\n\nstates = []\nfor state in engagement_complete_grouped['state']:\n    states.append(us_state_abbrev[state])\nengagement_complete_grouped['state_abbrev'] = states\n\nengagement_complete_grouped2 = pd.merge(engagement_complete_grouped, homeless_withpop, on='state_abbrev')[['time','state','engagement_index','countOverPop']]\n\ngrouped_by_date_lowHomelessness = engagement_complete_grouped2[['time','engagement_index','state','countOverPop']][engagement_complete_grouped2['countOverPop']<=17.0].groupby(['state','time'], as_index=False).mean()\ngrouped_by_date_highHomelessness = engagement_complete_grouped2[['time','engagement_index','state','countOverPop']][engagement_complete_grouped2['countOverPop']>17.0].groupby(['state','time'], as_index=False).mean()\n\ngrouped_by_date_lowHomelessness['time'] = pd.to_datetime(grouped_by_date_lowHomelessness[\"time\"])\ngrouped_by_date_lowHomelessness = grouped_by_date_lowHomelessness.sort_values('time')\ngrouped_by_date_lowHomelessness = grouped_by_date_lowHomelessness.set_index('time', drop=False)\n\ngrouped_by_date_highHomelessness['time'] = pd.to_datetime(grouped_by_date_highHomelessness[\"time\"])\ngrouped_by_date_highHomelessness = grouped_by_date_highHomelessness.sort_values('time')\ngrouped_by_date_highHomelessness = grouped_by_date_highHomelessness.set_index('time', drop=False)\n\n\ncols_low = []\ncols_high = []\nfor _, grp in grouped_by_date_lowHomelessness.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_low.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \nfor _, grp in grouped_by_date_highHomelessness.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_high.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \n        \nweekly_low = pd.DataFrame(cols_low, columns=['time','engagement_index','state'])\nweekly_low = weekly_low.groupby('time', as_index=False).mean()\n\nweekly_high = pd.DataFrame(cols_high, columns=['time','engagement_index','state'])\nweekly_high = weekly_high.groupby('time', as_index=False).mean()\n\nper_state_engagement_homelessness = engagement_complete_grouped2.groupby('state', as_index=False).mean() #store for barplot\n\nlines = pd.DataFrame()\nlines['time'] = weekly_low['time']\nlines['engagement_lowHomelessness'] = weekly_low['engagement_index']\nlines['engagement_highHomelessness'] = weekly_high['engagement_index']\n\nline = px.line(lines, x='time', y=['engagement_lowHomelessness', 'engagement_highHomelessness'], height=400, width=1000,\n        title='Engagement Index - High Homelessness vs Low Homelessness - Daily',\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_lowHomelessness\": \"red\", \"engagement_highHomelessness\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nlines2 = pd.DataFrame()\nlines2['engagement_index'] = lines['engagement_lowHomelessness']\nlines2['Homelessness'] = 'Low'\n\nlines3 = pd.DataFrame()\nlines3['engagement_index'] = lines['engagement_highHomelessness']\nlines3['Homelessness'] = 'High'\n\nlines_concat = pd.concat([lines2, lines3])\n\nbp1 = px.box(lines_concat, x='Homelessness', y=\"engagement_index\")\nbp1.data[0].marker.color = 'cyan'\n\nridge = px.violin(lines_concat, x='engagement_index', y='Homelessness', orientation='h')\n\nridge.update_layout(   \n    template='plotly_dark',\n    height=700\n    )\nridge.data[0].marker.color = 'cyan'\nridge.update_traces(side=\"positive\", width=4)\n\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", 'colspan':2},{}], \n    [{\"type\": \"box\"},{\"type\":\"violin\"}]\n                   ],\n    )\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.add_trace(line.data[1], row=1, col=1)\n\nfig.add_trace(bp1.data[0], row=2, col=1)\nfig.add_trace(ridge.data[0], row=2, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - High Homelessness vs Low Homelessness - Weekly\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    legend=dict(\n        y=1.15,\n        x=0.35,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    )\n    )\nfig.layout.yaxis3.title = 'Engagement Index'\nfig.layout.xaxis4.title = 'Engagement Index'\nfig.layout.yaxis4.title = 'Homelessness'\nfig.show()    \n","0b23c20d":"per_state_engagement2 = copy.copy(per_state_engagement_homelessness[per_state_engagement_homelessness['state']!='District Of Columbia'])\n\nper_state_engagement2.sort_values(by='engagement_index')\n\nbar = px.bar(per_state_engagement2, x='countOverPop', y='state', color='engagement_index',\n             labels={'Homelessness':'Homeless per 1 million inhabitants'}, height=800, color_continuous_scale=[\"cyan\", \"blue\", \"darkblue\"])\n\n\nbar.update_layout(\n    title={\n        'text': \"Engagement Index, Homelessness - By state\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    barmode='stack', \n    yaxis={'categoryorder':'total descending'},\n    height=500,\n    #bargap=0.3\n    )\nbar.add_vline(x=17, line_dash=\"solid\", line_color='red', line_width=3)\nbar.add_annotation(x=17.17, y='Virginia',\n            text=\"<b>Homelessness Threshold<\/b>\",\n            showarrow=True,\n            font=dict(\n                color=\"red\",\n                size=12\n            ),\n            xanchor='left',\n            align=\"center\",\n            arrowhead=2,\n            arrowsize=1,\n            arrowwidth=2,\n            arrowcolor=\"cyan\",\n            ax=20,\n            ay=10,\n            bordercolor=\"red\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"black\",\n            opacity=0.8\n                  )\nbar.add_hline(y='Illinois', line_dash=\"dash\", line_color='cyan', line_width=1)\nbar.add_annotation(x=107.17, y='Michigan',\n            text=\"<b>Exception: Engagement > 200, Low Homelessness<\/b>\",\n            showarrow=False,\n            font=dict(\n                color=\"cyan\",\n                size=12\n            ),\n            bgcolor=\"black\",\n            )\n\nbar.add_hline(y='Utah', line_dash=\"dash\", line_color='blue', line_width=1)\nbar.add_annotation(x=107.17, y='Wisconsin',\n            text=\"<b>Exception: Engagement < 200, High Homelessness<\/b>\",\n            showarrow=False,\n            font=dict(\n                color=\"blue\",\n                size=12\n            ),\n            bgcolor=\"black\",\n            )\n\nbar.add_hline(y='Washington', line_dash=\"dash\", line_color='blue', line_width=1)\nbar.add_annotation(x=107.17, y='New Hampshire',\n            text=\"<b>Exception: Engagement < 200, High Homelessness<\/b>\",\n            showarrow=False,\n            font=dict(\n                color=\"blue\",\n                size=12\n            ),\n            bgcolor=\"black\",\n            )\n\nbar.add_annotation(x=40, y='Ohio',\n            text=\"<b>Engagement Index < 200; 1 exception<\/b>\",\n            showarrow=True,\n            font=dict(\n                color=\"cyan\",\n                size=12\n            ),\n            xanchor='left',\n            align=\"center\",\n            arrowhead=2,\n            arrowsize=1,\n            arrowwidth=2,\n            arrowcolor=\"cyan\",\n            ax=40,\n            ay=20,\n            bordercolor=\"Blue\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"black\",\n            opacity=0.8\n                  )\n\nbar.add_annotation(x=40, y='Massachusetts',\n            text=\"<b>Engagement Index > 200; 2 exceptions<\/b>\",\n            showarrow=True,\n            font=dict(\n                color=\"blue\",\n                size=12\n            ),\n            xanchor='left',\n            align=\"center\",\n            arrowhead=2,\n            arrowsize=1,\n            arrowwidth=2,\n            arrowcolor=\"cyan\",\n            ax=40,\n            ay=-35,\n            bordercolor=\"Blue\",\n            borderwidth=2,\n            borderpad=4,\n            bgcolor=\"black\",\n            opacity=0.8\n                  )\n\nbar.add_hrect(y0='Michigan',y1='Missouri', fillcolor='cyan',opacity=0.05)\nbar.add_hrect(y0='Missouri',y1='North Dakota', fillcolor='blue',opacity=0.05)\nbar.layout.xaxis.title.text = 'Homeless Individuals per 1 million Inhabitants'\nbar.layout.coloraxis.colorbar.title.text = 'Engagement<br>index'\nbar.layout.coloraxis.colorbar.title.font.size = 12\n\nbar.show()","b71dcf4d":"meteo_events = pd.read_csv('..\/input\/noaa-severe-storm-database\/Storms_2020.csv')\nmeteo_events = meteo_events.drop_duplicates(subset='episode_id')\nmeteo_events = meteo_events.groupby(['state','event_begin_time','event_type'], as_index=False).mean()#[['state','event_begin_time','deaths_direct']]\n\ndates = [day[:10] for day in meteo_events['event_begin_time']]\nmeteo_events['date'] = dates\nmeteo_events = meteo_events.drop_duplicates(subset=['state','date'])[['state','date','event_type']]\n\ncounts = []\nfor state in meteo_events['state'].unique():\n    count = len(meteo_events[meteo_events['state'] == state])\n    counts.append((state, count))\n    \nmeteo_events_count = pd.DataFrame(counts, columns=['state','events'])\nstates = []\nfor state in meteo_events_count['state']:\n    try:\n        states.append(us_state_abbrev[state])\n    except:\n        states.append(\"Not in list\")\nmeteo_events_count['state_abbrev'] = states\n\nengagement_complete_grouped = engagement_complete.groupby(['time','state'], as_index=False).mean()\n\nstates = []\nfor state in engagement_complete_grouped['state']:\n    states.append(us_state_abbrev[state])\nengagement_complete_grouped['state_abbrev'] = states\n\nengagement_complete_grouped2 = pd.merge(engagement_complete_grouped, meteo_events_count, on='state_abbrev')[['time','state_x','engagement_index','events']]\nengagement_complete_grouped2['state'] = engagement_complete_grouped2['state_x']\n\ngrouped_by_date_lowMeteorologicalEvents = engagement_complete_grouped2[['time','engagement_index','state','events']][engagement_complete_grouped2['events']<=63.0].groupby(['state','time'], as_index=False).mean()\ngrouped_by_date_highMeteorologicalEvents = engagement_complete_grouped2[['time','engagement_index','state','events']][engagement_complete_grouped2['events']>63.0].groupby(['state','time'], as_index=False).mean()\n\ngrouped_by_date_lowMeteorologicalEvents['time'] = pd.to_datetime(grouped_by_date_lowMeteorologicalEvents[\"time\"])\ngrouped_by_date_lowMeteorologicalEvents = grouped_by_date_lowMeteorologicalEvents.sort_values('time')\ngrouped_by_date_lowMeteorologicalEvents = grouped_by_date_lowMeteorologicalEvents.set_index('time', drop=False)\n\ngrouped_by_date_highMeteorologicalEvents['time'] = pd.to_datetime(grouped_by_date_highMeteorologicalEvents[\"time\"])\ngrouped_by_date_highMeteorologicalEvents = grouped_by_date_highMeteorologicalEvents.sort_values('time')\ngrouped_by_date_highMeteorologicalEvents = grouped_by_date_highMeteorologicalEvents.set_index('time', drop=False)\n\n\ncols_low = []\ncols_high = []\nfor _, grp in grouped_by_date_lowMeteorologicalEvents.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_low.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \nfor _, grp in grouped_by_date_highMeteorologicalEvents.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols_high.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\n        \n        \nweekly_low = pd.DataFrame(cols_low, columns=['time','engagement_index','state'])\nweekly_low = weekly_low.groupby('time', as_index=False).mean()\n\nweekly_high = pd.DataFrame(cols_high, columns=['time','engagement_index','state'])\nweekly_high = weekly_high.groupby('time', as_index=False).mean()\n\nper_state_engagement_MeteorologicalEvents = engagement_complete_grouped2.groupby('state', as_index=False).mean() #store for barplot\n\nlines = pd.DataFrame()\nlines['time'] = weekly_low['time']\nlines['engagement_lowMeteorologicalEvents'] = weekly_low['engagement_index']\nlines['engagement_highMeteorologicalEvents'] = weekly_high['engagement_index']\n\nline = px.line(lines, x='time', y=['engagement_lowMeteorologicalEvents', 'engagement_highMeteorologicalEvents'], height=400, width=1000,\n        color_discrete_map={ # replaces default color mapping by value\n            \"engagement_lowMeteorologicalEvents\": \"red\", \"engagement_highMeteorologicalEvents\": \"cyan\"\n        },\n        template=\"plotly_dark\"\n        )\n\nlines2 = pd.DataFrame()\nlines2['engagement_index'] = lines['engagement_lowMeteorologicalEvents']\nlines2['MeteorologicalEvents'] = 'Low'\n\nlines3 = pd.DataFrame()\nlines3['engagement_index'] = lines['engagement_highMeteorologicalEvents']\nlines3['MeteorologicalEvents'] = 'High'\n\nlines_concat = pd.concat([lines2, lines3])\n\nbp1 = px.box(lines_concat, x='MeteorologicalEvents', y=\"engagement_index\")\nbp1.data[0].marker.color = 'cyan'\n\nridge = px.violin(lines_concat, x='engagement_index', y='MeteorologicalEvents', orientation='h')\n\nridge.update_layout(   \n    template='plotly_dark',\n    height=700\n    )\nridge.data[0].marker.color = 'cyan'\nridge.update_traces(side=\"positive\", width=4)\n\n\nfig = make_subplots(rows=2, cols=2,\n                   specs=[\n    [{\"type\": \"scatter\", 'colspan':2},{}], \n    [{\"type\": \"box\"},{\"type\":\"violin\"}]\n                   ],\n    )\n\nfig.add_trace(line.data[0], row=1, col=1)\nfig.add_trace(line.data[1], row=1, col=1)\n\nfig.add_trace(bp1.data[0], row=2, col=1)\nfig.add_trace(ridge.data[0], row=2, col=2)\n\nfig.update_layout(\n    title={\n        'text': \"Engagement Index - High vs Low Meteorological Events - Weekly\",\n        'y':0.95,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    legend=dict(\n        y=1.15,\n        x=0.35,\n        traceorder='normal',\n        font=dict(\n            size=12,),\n    )\n    )\nfig.layout.yaxis3.title = 'Engagement Index'\nfig.layout.xaxis4.title = 'Engagement Index'\nfig.layout.yaxis4.title = 'Meteorological Events'\nfig.show()    \n","79e3023e":"policies = pd.read_csv(\"..\/input\/covid19-us-state-policy-database\/data.csv\")\npolicies = policies[['STATE','STEMERG','CLSCHOOL','STAYHOME','STAYHOMENOGP','END_STHM',\n                     'FM_ALL','CLBSNS','FM_END','CLREST','ENDREST','CLGYM','ENDGYM',\n                     'CLMOVIE','END_MOV','CLOSEBAR','END_BRS','ENDRETL','QR_ALLST',\n                    'EMSTART','EMEND','PAYSTART','PAYEND','CDCSTART','CDCEND','LATESTART','LATEEND',\n                     'SMSTART','SMEND','URSTART','UREND','WV_WTPRD','REI_WTPRD','EBSTART','EBEND']]\n\nengagement_complete_toclean = copy.copy(engagement_complete)\n\nengagement_complete_clean = engagement_complete_toclean.dropna(subset=['state'])\n\nengagement_complete_sorted = engagement_complete_clean.sort_values('time')\ngrouped_by_date = engagement_complete_sorted[['time','pct_access','engagement_index','state']].groupby(['time','state'], as_index=False).mean()\ngrouped_by_date = grouped_by_date[grouped_by_date['state']!='North Dakota'][grouped_by_date['state']!='North Carolina'][grouped_by_date['state']!='Tennessee'][grouped_by_date['state']!='Texas'][grouped_by_date['state']!='Minnesota']\ngrouped_by_date['time'] = pd.to_datetime(grouped_by_date[\"time\"])\ngrouped_by_date = grouped_by_date.set_index('time', drop=False)\n\ncols = []\nfor _, grp in grouped_by_date.groupby(pd.Grouper(freq=\"7D\", origin=\"start_day\")):\n    try:\n        states = []\n        for state in grp['state']:\n            if state not in states:\n                cols.append((grp['time'][0], grp[grp['state']==state]['engagement_index'].mean(), state))\n                states.append(state)\n            else:\n                break\n    except:\n        continue\nweekly = pd.DataFrame(cols, columns=['time','engagement_index','state'])\n\n#grouped_by_date: by day; weekly: by week\nfig = px.line(weekly, x='time', y='engagement_index', facet_col=\"state\", facet_col_wrap=3, facet_col_spacing=0.05)\n\nfig.update_layout(\n    title={\n        'text': \"Mean Daily Engagement Index per Week - Restriction Policies\",\n        'y':0.99,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    height=1500,\n    margin=dict(\n        l=8,\n        r=16,\n    ))\n\nfig.update_yaxes(matches=None, showticklabels=True, title_text='')\nfig.update_xaxes(matches=None, showticklabels=True)\nfig.layout.xaxis16.title = {\n    'font':{\n            'color':'red'\n            },\n    'text':'- Emergency State Issued'}\n\nfig.layout.xaxis17.title = { \n    'font':{\n            'color':'blue'\n            },\n    'text':'- Schools Closed'}\n    \nfig.layout.xaxis18.title = { \n    'font':{\n            'color':'green'\n            },\n    'text':'- Face Mask Obligation'}\n\nfig.layout.xaxis13.title = { \n    'font':{\n            'color':'orange'\n            },\n    'text':'- Stay Home Issued'}\n\n\nfor k in range(len(fig.data)):\n    fig.data[k].line.color = 'cyan'\n\nfor k in range(18):\n    fig.layout.annotations[k].text = fig.layout.annotations[k].text[6:]\n    i = fig.data[k].xaxis\n    if len(i) > 1:\n        i = i[1:]\n    else:\n        i = 1\n    i = int(i)\n    \n    state = fig.data[k].hovertemplate.split('<br>')[0][6:]\n    if state == 'District Of Columbia':\n        state = 'District of Columbia'\n    row = int((i-1)\/3) + 1\n    col = ((i-1) % 3) + 1\n\n    date = policies[policies['STATE']==state]['STEMERG'].item()\n    if date is not np.nan:\n        enddate = pd.to_datetime(date) + pd.DateOffset(days=14)\n        fig.add_vline(x=date, line_dash=\"solid\", line_color='red', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date, x1=enddate, row=row, col=col,\n                  fillcolor=\"red\", opacity=0.4, line_width=0)\n    \n    date2 = policies[policies['STATE']==state]['CLSCHOOL'].item()\n    if date2 is not np.nan:\n        enddate2 = pd.to_datetime(date2) + pd.DateOffset(days=14)\n        fig.add_vline(x=date2, line_dash=\"solid\", line_color='blue', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date2, x1=enddate2, row=row, col=col,\n                  fillcolor=\"blue\", opacity=0.4, line_width=0)\n\n    date3 = policies[policies['STATE']==state]['FM_ALL'].item()\n    if date3 is not np.nan:\n        enddate3 = pd.to_datetime(date3) + pd.DateOffset(days=14)\n        fig.add_vline(x=date3, line_dash=\"solid\", line_color='green', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date3, x1=enddate3, row=row, col=col,\n                  fillcolor=\"green\", opacity=0.4, line_width=0)\n  \n    date4 = policies[policies['STATE']==state]['STAYHOME'].item()\n    if date4 is not np.nan:\n        enddate4 = pd.to_datetime(date4) + pd.DateOffset(days=14)\n        fig.add_vline(x=date4, line_dash=\"solid\", line_color='orange', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date4, x1=enddate4, row=row, col=col,\n                  fillcolor=\"orange\", opacity=0.4, line_width=0)\n       \nfig.show()","d743ea35":"#grouped_by_date: by day; weekly: by week\nfig = px.line(weekly, x='time', y='engagement_index', facet_col=\"state\", facet_col_wrap=3, facet_col_spacing=0.05)\n\nfig.update_layout(\n    title={\n        'text': \"Mean Daily Engagement Index per Week - Closing Policies\",\n        'y':0.99,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    height=1500,\n    margin=dict(\n        l=8,\n        r=16,\n    ))\nfig.update_yaxes(matches=None, showticklabels=True, title_text='')\nfig.update_xaxes(matches=None, showticklabels=True)\nfig.layout.xaxis16.title = {\n    'font':{\n            'color':'red'\n            },\n    'text':'- Restaurants Closed'}\n\nfig.layout.xaxis17.title = { \n    'font':{\n            'color':'blue'\n            },\n    'text':'- Gyms Closed'}\n    \nfig.layout.xaxis18.title = { \n    'font':{\n            'color':'green'\n            },\n    'text':'- Cinemas Closed'}\n\nfig.layout.xaxis13.title = { \n    'font':{\n            'color':'orange'\n            },\n    'text':'- Bars Closed'}\n    \n\nfor k in range(len(fig.data)):\n    fig.data[k].line.color = 'cyan'\n\nfor k in range(18):\n    fig.layout.annotations[k].text = fig.layout.annotations[k].text[6:]\n    i = fig.data[k].xaxis\n    if len(i) > 1:\n        i = i[1:]\n    else:\n        i = 1\n    i = int(i)\n    \n    state = fig.data[k].hovertemplate.split('<br>')[0][6:]\n    if state == 'District Of Columbia':\n        state = 'District of Columbia'\n    row = int((i-1)\/3) + 1\n    col = ((i-1) % 3) + 1\n\n    date = policies[policies['STATE']==state]['CLREST'].item()\n    if date is not np.nan:\n        enddate = pd.to_datetime(date) + pd.DateOffset(days=14)\n        fig.add_vline(x=date, line_dash=\"solid\", line_color='red', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date, x1=enddate, row=row, col=col,\n                  fillcolor=\"red\", opacity=0.4, line_width=0)\n    \n    date2 = policies[policies['STATE']==state]['CLGYM'].item()\n    if date2 is not np.nan:\n        enddate2 = pd.to_datetime(date2) + pd.DateOffset(days=14)\n        fig.add_vline(x=date2, line_dash=\"solid\", line_color='blue', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date2, x1=enddate2, row=row, col=col,\n                  fillcolor=\"blue\", opacity=0.4, line_width=0)\n\n    date3 = policies[policies['STATE']==state]['CLMOVIE'].item()\n    if date3 is not np.nan:\n        enddate3 = pd.to_datetime(date3) + pd.DateOffset(days=14)\n        fig.add_vline(x=date3, line_dash=\"solid\", line_color='green', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date3, x1=enddate3, row=row, col=col,\n                  fillcolor=\"green\", opacity=0.4, line_width=0)\n  \n    date4 = policies[policies['STATE']==state]['CLOSEBAR'].item()\n    if date4 is not np.nan:\n        enddate4 = pd.to_datetime(date4) + pd.DateOffset(days=14)\n        fig.add_vline(x=date4, line_dash=\"solid\", line_color='orange', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date4, x1=enddate4, row=row, col=col,\n                  fillcolor=\"orange\", opacity=0.4, line_width=0) \n\nfig.show()","1322eec9":"#grouped_by_date: by day; weekly: by week\nfig = px.line(weekly, x='time', y='engagement_index', facet_col=\"state\", facet_col_wrap=3, facet_col_spacing=0.05)\n\nfig.update_layout(\n    title={\n        'text': \"Mean Daily Engagement Index per Week - Reopening Policies\",\n        'y':0.99,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    height=1500,\n    margin=dict(\n        l=8,\n        r=16,\n    ))\nfig.update_yaxes(matches=None, showticklabels=True, title_text='')\nfig.update_xaxes(matches=None, showticklabels=True)\nfig.layout.xaxis16.title = {\n    'font':{\n            'color':'red'\n            },\n    'text':'- Restaurants Reopened'}\n\nfig.layout.xaxis17.title = { \n    'font':{\n            'color':'blue'\n            },\n    'text':'- Gyms Reopened'}\n    \nfig.layout.xaxis18.title = { \n    'font':{\n            'color':'green'\n            },\n    'text':'- Cinemas Reopened'}\n\nfig.layout.xaxis13.title = { \n    'font':{\n            'color':'orange'\n            },\n    'text':'- Bars Reopened'}\n    \n\nfor k in range(len(fig.data)):\n    fig.data[k].line.color = 'cyan'\n\nfor k in range(18):\n    fig.layout.annotations[k].text = fig.layout.annotations[k].text[6:]\n    i = fig.data[k].xaxis\n    if len(i) > 1:\n        i = i[1:]\n    else:\n        i = 1\n    i = int(i)\n    \n    state = fig.data[k].hovertemplate.split('<br>')[0][6:]\n    if state == 'District Of Columbia':\n        state = 'District of Columbia'\n    row = int((i-1)\/3) + 1\n    col = ((i-1) % 3) + 1\n\n    date = policies[policies['STATE']==state]['ENDREST'].item()\n    if date is not np.nan and '2021' not in date:\n        enddate = pd.to_datetime(date) + pd.DateOffset(days=14)\n        fig.add_vline(x=date, line_dash=\"solid\", line_color='red', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date, x1=enddate, row=row, col=col,\n                  fillcolor=\"red\", opacity=0.4, line_width=0)\n    \n    date2 = policies[policies['STATE']==state]['ENDGYM'].item()\n    if date2 is not np.nan and '2021' not in date2:\n        enddate2 = pd.to_datetime(date2) + pd.DateOffset(days=14)\n        fig.add_vline(x=date2, line_dash=\"solid\", line_color='blue', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date2, x1=enddate2, row=row, col=col,\n                  fillcolor=\"blue\", opacity=0.4, line_width=0)\n\n    date3 = policies[policies['STATE']==state]['END_MOV'].item()\n    if date3 is not np.nan and '2021' not in date3:\n        enddate3 = pd.to_datetime(date3) + pd.DateOffset(days=14)\n        fig.add_vline(x=date3, line_dash=\"solid\", line_color='green', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date3, x1=enddate3, row=row, col=col,\n                  fillcolor=\"green\", opacity=0.4, line_width=0)\n  \n    date4 = policies[policies['STATE']==state]['END_BRS'].item()\n    if date4 is not np.nan and '2021' not in date4:\n        enddate4 = pd.to_datetime(date4) + pd.DateOffset(days=14)\n        fig.add_vline(x=date4, line_dash=\"solid\", line_color='orange', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date4, x1=enddate4, row=row, col=col,\n                  fillcolor=\"orange\", opacity=0.4, line_width=0) \n\nfig.show()","fadb504d":"#grouped_by_date: by day; weekly: by week\nfig = px.line(weekly, x='time', y='engagement_index', facet_col=\"state\", facet_col_wrap=3, facet_col_spacing=0.05)\n\nfig.update_layout(\n    title={\n        'text': \"Mean Daily Engagement Index per Week - Support 1 Policies Issued\",\n        'y':0.99,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    height=1500,\n    margin=dict(\n        l=8,\n        r=16,\n    ))\nfig.update_yaxes(matches=None, showticklabels=True, title_text='')\nfig.update_xaxes(matches=None, showticklabels=True)\nfig.layout.xaxis16.title = {\n    'font':{\n            'color':'red'\n            },\n    'text':'- Eviction Moratorium Issued'}\n\nfig.layout.xaxis17.title = { \n    'font':{\n            'color':'blue'\n            },\n    'text':'- Late Fee Ban Issued'}\n    \nfig.layout.xaxis18.title = { \n    'font':{\n            'color':'green'\n            },\n    'text':'- Non-payment Limitation Issued'}\n\nfig.layout.xaxis13.title = { \n    'font':{\n            'color':'orange'\n            },\n    'text':'- CDC Moratorium Issued'}\n    \n\nfor k in range(len(fig.data)):\n    fig.data[k].line.color = 'cyan'\n\nfor k in range(18):\n    fig.layout.annotations[k].text = fig.layout.annotations[k].text[6:]\n    i = fig.data[k].xaxis\n    if len(i) > 1:\n        i = i[1:]\n    else:\n        i = 1\n    i = int(i)\n    \n    state = fig.data[k].hovertemplate.split('<br>')[0][6:]\n    if state == 'District Of Columbia':\n        state = 'District of Columbia'\n    row = int((i-1)\/3) + 1\n    col = ((i-1) % 3) + 1\n\n    date = policies[policies['STATE']==state]['EMSTART'].item()\n    if date is not np.nan and '2021' not in date:\n        enddate = pd.to_datetime(date) + pd.DateOffset(days=14)\n        fig.add_vline(x=date, line_dash=\"solid\", line_color='red', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date, x1=enddate, row=row, col=col,\n                  fillcolor=\"red\", opacity=0.4, line_width=0)\n    \n    date2 = policies[policies['STATE']==state]['LATESTART'].item()\n    if date2 is not np.nan and '2021' not in date2:\n        enddate2 = pd.to_datetime(date2) + pd.DateOffset(days=14)\n        fig.add_vline(x=date2, line_dash=\"solid\", line_color='blue', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date2, x1=enddate2, row=row, col=col,\n                  fillcolor=\"blue\", opacity=0.4, line_width=0)\n\n    date3 = policies[policies['STATE']==state]['PAYSTART'].item()\n    if date3 is not np.nan and '2021' not in date3:\n        enddate3 = pd.to_datetime(date3) + pd.DateOffset(days=14)\n        fig.add_vline(x=date3, line_dash=\"solid\", line_color='green', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date3, x1=enddate3, row=row, col=col,\n                  fillcolor=\"green\", opacity=0.4, line_width=0)\n  \n    date4 = policies[policies['STATE']==state]['CDCSTART'].item()\n    if date4 is not np.nan and '2021' not in date4:\n        enddate4 = pd.to_datetime(date4) + pd.DateOffset(days=14)\n        fig.add_vline(x=date4, line_dash=\"solid\", line_color='orange', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date4, x1=enddate4, row=row, col=col,\n                  fillcolor=\"orange\", opacity=0.4, line_width=0) \n\n\nfig.show()","4b5ad0cf":"#grouped_by_date: by day; weekly: by week\nfig = px.line(weekly, x='time', y='engagement_index', facet_col=\"state\", facet_col_wrap=3, facet_col_spacing=0.05)\n\nfig.update_layout(\n    title={\n        'text': \"Mean Daily Engagement Index per Week - Support 2 Policies Issued\",\n        'y':0.99,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    height=1500,\n    margin=dict(\n        l=4,\n        r=8,\n    ))\nfig.update_yaxes(matches=None, showticklabels=True, title_text='')\nfig.update_xaxes(matches=None, showticklabels=True)\nfig.layout.xaxis16.title = {\n    'font':{\n            'color':'red'\n            },\n    'text':'- Utilities Shutoff Moratorium Start'}\n\nfig.layout.xaxis17.title = { \n    'font':{\n            'color':'blue'\n            },\n    'text':'- Utilities Reconnection Start'}\n    \nfig.layout.xaxis18.title = { \n    'font':{\n            'color':'green'\n            },\n    'text':'- Extended Benefits Program'}\n\nfig.layout.xaxis13.title = { \n    'font':{\n            'color':'orange'\n            },\n    'text':'- Two Weeks U.I. Waiting Period Waive Issued'}\n    \n\nfor k in range(len(fig.data)):\n    fig.data[k].line.color = 'cyan'\n\nfor k in range(18):\n    fig.layout.annotations[k].text = fig.layout.annotations[k].text[6:]\n    i = fig.data[k].xaxis\n    if len(i) > 1:\n        i = i[1:]\n    else:\n        i = 1\n    i = int(i)\n    \n    state = fig.data[k].hovertemplate.split('<br>')[0][6:]\n    if state == 'District Of Columbia':\n        state = 'District of Columbia'\n    row = int((i-1)\/3) + 1\n    col = ((i-1) % 3) + 1\n\n    date = policies[policies['STATE']==state]['SMSTART'].item()\n    if date is not np.nan and '2021' not in date:\n        enddate = pd.to_datetime(date) + pd.DateOffset(days=14)\n        fig.add_vline(x=date, line_dash=\"solid\", line_color='red', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date, x1=enddate, row=row, col=col,\n                  fillcolor=\"red\", opacity=0.4, line_width=0)\n    \n    date2 = policies[policies['STATE']==state]['URSTART'].item()\n    if date2 is not np.nan and '2021' not in date2:\n        enddate2 = pd.to_datetime(date2) + pd.DateOffset(days=14)\n        fig.add_vline(x=date2, line_dash=\"solid\", line_color='blue', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date2, x1=enddate2, row=row, col=col,\n                  fillcolor=\"blue\", opacity=0.4, line_width=0)\n\n    date3 = policies[policies['STATE']==state]['EBSTART'].item()\n    if date3 is not np.nan and '2021' not in date3:\n        enddate3 = pd.to_datetime(date3) + pd.DateOffset(days=14)\n        fig.add_vline(x=date3, line_dash=\"solid\", line_color='green', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date3, x1=enddate3, row=row, col=col,\n                  fillcolor=\"green\", opacity=0.4, line_width=0)\n  \n    date4 = policies[policies['STATE']==state]['WV_WTPRD'].item()\n    if date4 is not np.nan and '2021' not in date4:\n        enddate4 = pd.to_datetime(date4) + pd.DateOffset(days=14)\n        fig.add_vline(x=date4, line_dash=\"solid\", line_color='orange', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date4, x1=enddate4, row=row, col=col,\n                  fillcolor=\"orange\", opacity=0.4, line_width=0) \n\nfig.show()","084103ef":"#grouped_by_date: by day; weekly: by week\nfig = px.line(weekly, x='time', y='engagement_index', facet_col=\"state\", facet_col_wrap=3, facet_col_spacing=0.05)\n\nfig.update_layout(\n    title={\n        'text': \"Mean Daily Engagement Index per Week - Support 1-2 Policies End\",\n        'y':0.99,\n        'x':0.5,\n        'xanchor': 'center',\n        'yanchor': 'top'},    \n    template='plotly_dark',\n    height=1500,\n    margin=dict(\n        l=8,\n        r=16,\n    ))\nfig.update_yaxes(matches=None, showticklabels=True, title_text='')\nfig.update_xaxes(matches=None, showticklabels=True)\nfig.layout.xaxis16.title = {\n    'font':{\n            'color':'red'\n            },\n    'text':'- Utilities Shutoff Moratorium End'}\n\nfig.layout.xaxis17.title = { \n    'font':{\n            'color':'blue'\n            },\n    'text':'- Utilities Reconnection End'}\n    \nfig.layout.xaxis18.title = { \n    'font':{\n            'color':'green'\n            },\n    'text':'- Extended Benefits Program End'}\n\nfig.layout.xaxis13.title = { \n    'font':{\n            'color':'orange'\n            },\n    'text':'- Eviction Moratorium End'}\n\nfig.layout.xaxis14.title = { \n    'font':{\n            'color':'purple'\n            },\n    'text':'- Late Fee Ban End'}\nfig.layout.xaxis15.title = { \n    'font':{\n            'color':'white'\n            },\n    'text':'- Non-payment Limitation End'}\n\n        \n\nfor k in range(len(fig.data)):\n    fig.data[k].line.color = 'cyan'\n\n    \nfor k in range(18):\n    fig.layout.annotations[k].text = fig.layout.annotations[k].text[6:]\n    i = fig.data[k].xaxis\n    if len(i) > 1:\n        i = i[1:]\n    else:\n        i = 1\n    i = int(i)\n    \n    state = fig.data[k].hovertemplate.split('<br>')[0][6:]\n    if state == 'District Of Columbia':\n        state = 'District of Columbia'\n    row = int((i-1)\/3) + 1\n    col = ((i-1) % 3) + 1\n\n    date = policies[policies['STATE']==state]['SMEND'].item()\n    if date is not np.nan and '2021' not in date:\n        enddate = pd.to_datetime(date) + pd.DateOffset(days=14)\n        fig.add_vline(x=date, line_dash=\"solid\", line_color='red', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date, x1=enddate, row=row, col=col,\n                  fillcolor=\"red\", opacity=0.4, line_width=0)\n    \n    date2 = policies[policies['STATE']==state]['UREND'].item()\n    if date2 is not np.nan and '2021' not in date2:\n        enddate2 = pd.to_datetime(date2) + pd.DateOffset(days=14)\n        fig.add_vline(x=date2, line_dash=\"solid\", line_color='blue', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date2, x1=enddate2, row=row, col=col,\n                  fillcolor=\"blue\", opacity=0.4, line_width=0)\n\n    date3 = policies[policies['STATE']==state]['EBEND'].item()\n    if date3 is not np.nan and '2021' not in date3:\n        enddate3 = pd.to_datetime(date3) + pd.DateOffset(days=14)\n        fig.add_vline(x=date3, line_dash=\"solid\", line_color='green', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date3, x1=enddate3, row=row, col=col,\n                  fillcolor=\"green\", opacity=0.4, line_width=0)\n  \n\n    date4 = policies[policies['STATE']==state]['EMEND'].item()\n    if date4 is not np.nan and '2021' not in date4:\n        enddate4 = pd.to_datetime(date4) + pd.DateOffset(days=14)\n        fig.add_vline(x=date4, line_dash=\"solid\", line_color='orange', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date4, x1=enddate4, row=row, col=col,\n                  fillcolor=\"orange\", opacity=0.4, line_width=0)\n    \n    date5 = policies[policies['STATE']==state]['LATEEND'].item()\n    if date5 is not np.nan and '2021' not in date5:\n        enddate5 = pd.to_datetime(date5) + pd.DateOffset(days=14)\n        fig.add_vline(x=date5, line_dash=\"solid\", line_color='purple', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date5, x1=enddate5, row=row, col=col,\n                  fillcolor=\"purple\", opacity=0.4, line_width=0)\n\n    date6 = policies[policies['STATE']==state]['PAYEND'].item()\n    if date6 is not np.nan and '2021' not in date6:\n        enddate6 = pd.to_datetime(date6) + pd.DateOffset(days=14)\n        fig.add_vline(x=date6, line_dash=\"solid\", line_color='white', line_width=2, row=row, col=col)\n        fig.add_vrect(x0=date6, x1=enddate6, row=row, col=col,\n                  fillcolor=\"white\", opacity=0.4, line_width=0)\n        \nfig.show()","7275fff1":"# <div style=\"background-color:cyan\"> <b>1. Introduction<\/b><\/div>\nAlmost two years have passed since the first positive case of Covid-19 was reported. Since then, our overall approach to the learning process moved towards the digital world, a shift that was eased by the outstanding digital technologies we today have in our hands. The engagement of students on learning digital products has intuitively increased with the <span style=\"background-color:lightcyan\">advent of distance learning<\/span>, a countermeasure to defend populations against the spread of Coronavirus. The question that naturally arises is the following: By how much? How strong is the thrust of the pandemic towards keeping distances in a digital fashion when it comes to learning? Several other questions more or less related to these thematic areas can and must be answered if we want to deeply understand the impact of COVID-19 on our learning paths, and this is what we are going to address. The US is composed by a wide variety of individuals with different cultures, origins, and situations (regarding social, economic, and health positions), and such a variety includes people from all ages thus being incorporated in the whole American learning machine. Addressing these thematic areas will highlight a <span style=\"background-color:lightcyan\">clear picture<\/span> of Education and the effects of COVID-19 on it, and hopefully help to draw <span style=\"background-color:lightcyan\">more effective policies<\/span> to reduce the gaps, exacerbated by the pandemic itself, among all the learning individuals in the United States (and not only).","8f0981f0":"Issuing of Utilities Shutoff Moratorium and U.I. Waiting Period Waive correlates with increases in digital engagement: they are issued during the already highlighted 'Threat' phase together with some closures (schools, activities, ...), thus the overall effects of all these policies might be a strongly contributing factor to the increase in digital engagement in such a phase, together with the increasing need to adopt digital learning solutions; the latter policy seems to have stronger effects anyway, while Utilities Shutoff Moratorium is often issued some days after the Waiting Period Waive and in correspondence of peaks in digital engagement, making its effects less clear. Strangely, the activation of the Extended Benefits Program is correlated with falling student engagement towards digital learning technologies; strangely because, as we know, relieving policies that contribute to the economic stability of families are unlikely to also contribute to less digital engagement of student family members. The reason behind this is pretty straightforward and similar to what already saw with the emanation of Late Fee Ban policy: occurring always between May and June, which are, respectively, the periods of strongest decrease and of lower level in digital engagement due to the end of the school year, the Extended Benefits Program cannot offset the too strong and actually inevitable decrease in student engagement; we already experienced a similar situation before, but now it is even more tangible. Utilities reconnection, by itself, does not provide particular support in economic terms and is unlikely to have palpable consequences on students themselves; we observe it being issued in several periods of the year across different states, and the overall relationship appears to be positive.\n\nIt would be interesting to see what happens to digital engagement concurrently with the end of such policies;","4d41ca8c":"# <div style=\"background-color:cyan\"> <b>9. References<\/b><\/div>\n<ul>\n    <li>\n        [1] U.S. Covid-19 Aggregated Statewise Contagion Data:<br>Kaggle Dataset: https:\/\/www.kaggle.com\/anandhuh\/usa-statewise-latest-covid19-data<br>Original Source: https:\/\/www.worldometers.info\/coronavirus\/country\/us\/<br>\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [2] NyTimes article - Schools after the Pandemic:<br>https:\/\/www.nytimes.com\/2020\/05\/05\/learning\/when-the-pandemic-ends-will-school-change-forever.html\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [3] U.S. Covid-19 Contagion Data:<br>Kaggle Dataset: https:\/\/www.kaggle.com\/imoore\/us-covid19-dataset-live-hourlydaily-updates<br>Original Source: https:\/\/www.nytimes.com\/interactive\/2021\/us\/covid-cases.html<br>\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [4] The Verge article - Zoom:<br>https:\/\/www.theverge.com\/2020\/4\/3\/21207053\/zoom-video-conferencing-security-privacy-risk-popularity\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [5] U.S. Public and Private Schools:<br>Kaggle Dataset: https:\/\/www.kaggle.com\/andrewmvd\/us-schools-dataset?select=Private_Schools.csv<br>Original Source: https:\/\/www.dhs.gov\/data<br>\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [6] U.S. State Policies against Covid-19:<br>Kaggle Dataset: https:\/\/www.kaggle.com\/cavfiumella\/covid19-us-state-policy-database?select=data.csv<br>Original Source: https:\/\/github.com\/USCOVIDpolicy\/COVID-19-US-State-Policy-Database<br>\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [7] U.S. Population Dataset:<br>Kaggle Dataset: https:\/\/www.kaggle.com\/peretzcohen\/2019-census-us-population-data-by-state<br>Original Source: https:\/\/www.census.gov\/data\/datasets\/time-series\/demo\/popest\/2010s-state-total.html<br>\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [8] U.S. Education Places (by State) Dataset:<br>Kaggle Dataset: https:\/\/www.kaggle.com\/emilianoalvz\/usa-museums-ds<br>Original Source: https:\/\/www.codecademy.com\/catalog<br>\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [9] U.S. Demographics Data (Income per Capita and Percentage of Asian people, by State):<br>Kaggle Dataset: https:\/\/www.kaggle.com\/adarshsng\/usa-weed-price-data?select=Demographics_State.csv<br>Original Source: https:\/\/www.priceofweed.com\/<br>\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [10] U.S. 2016 Crime Rates (by County):<br>Kaggle Dataset: https:\/\/www.kaggle.com\/mikejohnsonjr\/united-states-crime-rates-by-county<br>Original Source: https:\/\/www.icpsr.umich.edu\/web\/pages\/<br>\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [11] U.S. 2007-2016 Homelessness Data (by State):<br>Kaggle Dataset: https:\/\/www.kaggle.com\/adamschroeder\/homelessness<br>Original Source: https:\/\/www.hudexchange.info\/resource\/3031\/pit-and-hic-data-since-2007\/<br>\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [12] Curbed article on the relationship between Homelessness and Richness of a State:<br>https:\/\/archive.curbed.com\/2016\/8\/26\/12652130\/homelessness-economy-affordable-housing-poverty\n    <\/li>\n<\/ul>\n<ul>\n    <li>\n        [13] U.S. Meteorological Events (by State, from NOAA Severe Storm Database):<br>Kaggle Dataset: https:\/\/www.kaggle.com\/atinakarim\/noaa-severe-storm-database?select=Storms_2020.csv<br>Original Source: https:\/\/www.hudexchange.info\/resource\/3031\/pit-and-hic-data-since-2007\/<br>\n    <\/li>\n<\/ul>","f7e0d114":"The two categories display some differences, with states having more private schools showing slightly higher engagement indices (especially during the end of 2019-2020 school year) and states with a low value of such ratio having lower engagement indices (except for the beginning of 2020-2021 school year period). \nThe results are very similar to what we experienced with the number of education places, and this can be further noticed comparing Boxplots and Ridge plots (the two bottom charts); likewise, the explanation of such differences is likely to be the same for what observed before, <b>linked to the economic context of each state and its inhabitants<\/b>.\n\nNow, still taking into account the economic context behind each location (state), we can expect similar results for states with higher Income per capita, as well. The dataset containing Income per capita data [9] is, once again, external, and contains other demographics as well (like percentage of Asian individuals per state, which we will focus on later).","23c6c4f1":"Interestingly, the more we move away from the urban context (City), the higher the levels of digital engagement. This may be caused by the fact that, getting farther from Cities and moving to Rural contexts, the quality of education encounters some flaws; for examples, urban school districts often enclose several sorts of education institutions apart from school themselves: museums, galleries, education-empowerment institutions, all of these features and several others are seldomly present in rural contexts, and the higher levels in digital engagement might be a direct response to make up for these shortcomings.\n\nWe now introduce two new datasets: the first one [7] contains information about U.S. states' population, while the second dataset [8] deals with Museums and other education places (different than schools) in the United States; we will aggregate both datasets to obtain, for each state, the number of education places per 1 million of inhabitants.\nNote that this time, contrary to the what we saw so far with data divided into districts, data will be aggregated by states. Hence, if before we had Engagement Index of <u>districts<\/u> with high % Black\/Hispanic compared to Engagement Index of <u>districts<\/u> with low % Black\/Hispanic, we now have Engagement Index of <u>states<\/u> with higher number of education places compared to Engagement Index of <u>states<\/u> with lower number of education places.","dc34179c":"The situation changed, with the expected doubling of engagement levels. This is not the only change though: this phase sees even more Google products appearing in the top 15, 7 now. Thus, we notice that almost half of the most engaged digital products are provided by Google LLC, and companies such as Renaissance Learning and Epic Creations left the top tiers. This does not mean the engagement level towards these two companies' offers fell, but rather that <b>Google's products were seen as more attractive by students<\/b> in this Threat phase, and the engagement of other providers' products increased less compared to them.\n\nAlso, notice that the Digital Learning Platforms category has been surpassed by the Content Creation & Curation category, and is approached by Learning Management Systems (belonging to the SDO Primary Function) which is boosted by the overwhelming increase in engagement of Google Classroom during this phase.\n\n\n### Outbreak Phase: 1st September - 18th December","5f3dcfb3":"The answer is a simple yes, it is.\n\nDistrict of Columbia has not been included in the previous plot, since it exceeds 1500 homeless per 1 million inhabitants. Apart from Illinois, all the low-homelessness states (not exceeding the red line) have a mean daily digital engagement index below 200. Interestingly, only 2 among 10 high-homelessness states (11, if we consider D.C.) do not overcome that value. The colorscale also gives us an instant visual glance of this concept, with darker bars as homelessness increases and lighter ones when homelessness is lower.\n\nStates and the respective populations do not live in the same conditions throughout the year, and this is true for several contexts: economic, social, etc. Another context that differentiates inhabitants of different states and that lead them to live in different conditions (not necessarily divided into 'bad' and 'good') is the Meteorological one. States experienced various meteorological events during the course of 2020, but not all of them did so in the same proportion: in fact, there are some states which are more prone towards detrimental meteorological events and some others living in relatively mild conditions, thus facing a lower number of such events. The population of the most affected states is influenced by these conditions, hence the same is likely to apply to their engagement towards digital learning technologies. We could highlight this as a sort of 'Environmental' or 'Meteorological' vulnerability, leading some portions of the U.S. population to suffer from meteorological conditions and having such suffering translated into leakages in digital engagement terms. To analyze whether such weaknesses are actual and significant, we make use of data taken from the National Oceanic and Atmospheric Administration (NOAA) database of Severe Storm Events [13].","18f417b3":"Among the states with more deaths by Covid-19 there are New York (NY), Arizona (AZ), North Dakota (ND); Interestingly, these states are also the states with the highest Engagement Indices overall in 2020.\nWhat might be the reason behind this? An explanation may be that deaths by Covid-19 are a good indicator of how much strongly Coronavirus hit a state, hence states with high number of deceases are also those where countermeasures were necessary and people feared the danger of Covid-19 (hence, face-to-face physical lessons over distance learning) the most. The complete picture is more complex than that though, and there are other factors likely to influence  the digital engagement levels in each state (demographic context, social and economic conditions, etc.); we will investigate them in the next sections, but now we can be more convinced that the strength with which Covid-19 invades a state influences, to some extent, the whole digital engagement context. \n\nLet us focus deeper on the relationship between engagement index and Covid-19 behavior, either Coronavirus cases or related deaths. To do so, we introduce a new external dataset [1] containing the daily data about Covid-19 infection\/death for the whole U.S. country.","0ea1efb2":"The proportion of population belonging to the Black\/Hispanic ethnicity seems to have <b>very weak effects<\/b> on the distribution of Engagement Index, almost negligible. The top chart shows the engagement indices, in 2020, of districts with a low percentage of Black\/Hispanic individuals compared to the digital engagement of districts with a prevalence of such ethnic groups. We can observe slightly higher digital engagement levels in those districts with higher proportions of such ethnic groups during the course of the pandemic, when online learning became a real need rather than a way to enhance the learning process, but the difference is unlikely to be significant. This is strange: we would have expected some more consistent difference to hold, and the districts with more Black\/Hispanic people displaying overall lower digital engagement levels, but what we see here is very different from that.\n\nSomething is likely to bring distortions in the above plot's distributions; let us investigate this.","45595f4c":"As anticipated: even if some policy issuing dates are missing for some states (or maybe they are never issued in such states), all of them were released in the great majority of the United States in the same weeks. The effects are very similar to what we experienced with the previous policies, with a likewise positive balance over Digital Engagement. Actually, in almost all cases this time the bunch of implemented policies leads to a <span style=\"background-color:lightcyan\">sudden increase in digital engagement index<\/span>, regardless of its previous direction. This makes sense since these specific policies consistently affect the behavior of students that are no longer able to practice sport or out-of-home recreational activities. \n\nNow, we can move on to category of policies from which we can expect the opposite effects on Digital Engagement: Reopening policies.","13b1398c":"As we already mentioned, Engagement Index is not a measure representing a single block of digital product, but rather it spans a huge amount of Digital Learning -related products, offered by several companies and performing a wide range of functions. We already portrayed a picture of such span of categories and functions for the 2020 as a whole, but we now know that there are some salient phases in the first pandemic year and it is unlikely that the composition of digital learning -related engagement has been the same for all the year and throughout the different phases.\n\nThere are several Primary Essential Functions performed by specific products supplied by specific providers; to delve deep into the providers and products section, we must first have clear in mind the patterns behind engagement towards functionalities, thus understanding the rationale behind changes in each specific functionality (or group of functionalities). Let's start with the most engaged: Learning & Curriculum LC;","8043b4c3":"This thematic is delicate and crucial at the same time. This initially unknown and misterious pandemic revealed to be remarkably persistent, and almost two years have now passed from the initial outbreak. The effects of such pandemic on the education setting, with specific regard to digital learning and education, are extremely broad and will be further decomposed and analyzed in the next steps (4.3 - 4.5); let us now focus on what we saw in the previous point, when analyzing the broad picture of digital engagement in 2020. We clearly noticed some differences among the months of 2020, some imputable to periods of less emphasis on school (summer, weekends), some other attributable to COVID-19 itself.\n\n","ac60e294":"States with higher homeless per 1 million of inhabitants show steadily higher values of digital engagement compared to states with lower homelessness! Strange, isn't it? If at a first sight these results might seem definitely distorted, when we think about the background of homelessness everything adds up. The major driver of homelessness in the United States is the <span style='background-color:lightcyan'>price of households<\/span>, which often <span style='background-color:lightcyan'>depends on the overall economic wellbeing<\/span> of a state. Hence, the relationship is clear: <b>the higher the overall economic welfare in a state, the higher household prices, the higher the number of homeless<\/b>. This further strengthen our idea according to which states with overall higher economic welfare are associated with overall higher student engagement towards digital learning technologies, as well.\n\nAn article on Curbed [12], an American real estate website, describes this paradox: \n> ...there is no correlation between the number of impoverished residents and homeless residents in the U.S. In fact, the richer the state, the higher the homelessness rate.\n\nFocusing on why richer states have more homeless population:\n> The not-so-obvious reason for this is that the richer states have higher housing costs.\n\nNow, the question arises: is such difference so remarkable in practice? Let's see.","494bbe1a":"As anticipated, but with a slight variation: the engagement levels were more or less the same before the end of March, indicating that <span style='background-color:lightcyan'>states that attract more Asians were more able to face the increasing need of digitalization of learning<\/span>, thus leading the distribution of Engagement Indices in states with high percentages of Asians to be skewed towards high values. This may be <b>due to some characteristics of those states<\/b>, like <span style='background-color:lightcyan'>orientation towards more effective learning or having more\/better universities<\/span>, <b>making them more appealing towards individuals belonging to this particular ethnic group<\/b>. Not only to this one, actually: the trends are very similar to what we observed with black&hispanic ethnicities, and this is unlikely to be just a coincidence.\n\nNow, we can try to tackle the analysis of online engagement using a different approach: Crime Rates. The dataset we are going to introduce now [10] contains the 2016 crime rates of U.S. counties; we will simply aggregate those counties to states, to finally obtain the average crime rates per each U.S. state, thus obtaining states with higher crime rates and states with lower ones. It is reasonable to expect states with less criminality to display a higher overall digital engagement, but let's see.","3af1245f":"We analyzed several aspects behind digital engagement in 2020 but, as anticipated, the complete picture involves also the contextual factors behind territories: learning context, population (language, ethnicity, ...), economic and social status. These are the aspects we are going to explore now.\n\nLet us start with the percentage of black and hispanic individuals in a given district, which is likely to have some potential to influence the course of digital engagement during 2020.","3a556345":"# <div style=\"background-color:cyan\"> <b>3. What is the picture of digital connectivity and engagement in 2020?<\/b><\/div>\n","cf48938d":"# <div style=\"background-color:cyan\"><b>8. Wrap-up<\/b><\/div>\n\nDuring the course of our journey up to here, we encountered a high number of factors affecting digital engagement in essentially two ways:\n* Influencing the overall level of digital engagement (factors like Income, per-pupil Total Expenditure, ...)\n* Influencing the trend of digital engagement in a transitory way, with subsequent peaks (Government policies, Holidays, ...)\n\nUnderstanding both typologies of factors is important to arrive at well-founded conclusions, and among them the first category is of more interest for our purposes; we now know what are the factors, transitory and non-transitory, influencing student engagement towards digital learning technologies and we are currently interested in is reducing the gap between all the 'categories' of digital learners, which are more easily delineated through the analysis of factors affecting digital engagement levels non-transiently. Still, the insights derived from the steps throughout the transiently-influencing factors may be crucial, as well: transience does not imply uniqueness and unrepeatability, and such transient events might occur again in the future; holidays for example, are cyclical, and the Covid-19 pandemic is not over yet and related government policies may be issued again. Our journey touched various issues, vulnerabilities and facts that, in most of the cases, existed much before Covid-19 and whose strength has only been exhacerbated by the advent of the virus. As the digital learning setting seems to be destined to being increasingly engaged by students in the United States and worldwide, partially due to the increasingly advanced technologies and partly pushed by the pandemic, the need to narrow the highlighted divide is now more crucial than ever: there is always room for improvement and if this is true in all the facets of life, it is even more so in the learning setting; my aim was thus to uncover and depict the directions in which regard those improvements need to be made, hopefully helping to facilitate the process towards a more conducive learning environment for each student. \n\n<p style='font-family:cursive'><font size='5'>Thank you for your attention, and a true good luck to all the students and learners, and to everyone who is reading!<\/font><\/p>\n","ed473414":"# <div style=\"background-color:cyan\"> <b>7. Do certain state interventions, practices or policies correlate with the increase or decrease of online engagement?<\/b><\/div>\n","811bd3a4":"We can clearly see that Reopening policies are issued in two situations:\n* <u>After or during<\/u> a <span style='background-color:lightcyan'>steady reduction of digital engagement<\/span>, caused by the end of the school year\n* <u>During<\/u> an already <span style='background-color:lightcyan'>ongoing rise of digital engagement<\/span>, caused by the beginning of the next school year\n\nThe first one is the most common case, since states probably reopened Restaurants, Gyms, Bars and Cinemas in this period because students are likely to go there the most during summer, thus benefitting the economy. Note also that such reopenings often occur closely with the obligation of face masks, probably a way to mitigate the effects of reopenings by limiting the repercussions extended closures would have on the economy. In most cases the reduction continued also slight after the reopenings, but probably it is mostly (not entirely) an effect of the school year being finished; reopenings <b>might have exhacerbated<\/b> the trend, explaining why the difference between spring and summer is so sharp, but we cannot be sure about the magnitude of their contribution to the inevitable fall during summer.\n\nIf we take into account the second case, anyway, policies issued in concurrence with rising digital engagement levels due to the beginning of the school year seem not to have had particularly remarkable effects on slowering this trend (look at the Gyms Reopening policies issued in this kind of situation). \n\nThe next category of policies is a bit different, since they affect U.S. residents in a more indirect way, and on the economic side: we are talking about Economic Support policies. The consequences of Economic Support policies on Digital Engagement are more subtle since their direct effects usually impact adult workers rather than more or less young students. Still, the fact that we call these policies 'Support' policies is not random: they provide relief to U.S. residents, mostly in economic and financial terms. Such relief thus improves, even if temporarily, the economic status of individuals in the United States or, as we observed in previous points, the economic wellbeing. We now know that economic wellbeing is consistently related to the levels of digital engagement, hence policies that improve overall welfare are also likely to increase, or contribute to increase, the engagement of students towards digital learning technologies. ","1386c88f":"To better analyze the effects of Covid-19 on Distance Learning, let us introduce a new dataset [1] about Covid-19 data in the U.S. This dataset is up-to-date and only contains aggregate information (not day-by-day data) about Covid-19 in the United States. We can easily compare the number of deaths per 1 million of population of the single US states, to see which states have been hit the most by Covid-19, with the aggregated engagement index of each state.","dfb2c233":"Clearly, the distribution of student engagement towards digital learning technologies is highly affected by the specific period we are taking into account, as the boxplots (bottom-level plots) of the previous picture tell us. Breaks lead to consistent reduction in engagement, and this aspect is highlighted by both the Summer Holidays picture and the outliers in the Outbreak period, caused by the fact that such period includes Christmas Holidays as well.\n\nNow that we have the big picture in mind, let us decompose the Engagement Index metric throughout 2020 into two stages: the <span style=\"background-color:lightcyan\">Pre-Threat to Threat Phase<\/span> and the <span style=\"background-color:lightcyan\">Outbreak Phase<\/span>, looking both at the <span style=\"background-color:lightcyan\">daily<\/span> changes in engagement index and at the whole digital engagement trend (i.e., <span style=\"background-color:lightcyan\">weak-wise<\/span>).","bfe6a305":"<div style='background-color:lime;width:60%;margin-left:20%;box-shadow: 3px 6px 6px gray'>\n<b>\n<font size='4'>\n    KEY INSIGHTS:\n<\/font>\n<font size='2'>\n    <ul>\n        <li> Learning and Curriculum devoted products are the most engaged ones overall<\/li>\n        <li> Comfort and ease of use of some technologies is crucial for the further establishment of digital learning<\/li>\n        <li> Changing engagement among primary functions throughout 2020 reflects an undergoing adaptation towards digital learning<\/li>\n        <li> Some characteristics are common to the majority of most engaged products: Cheapness and Ease of use (and brand popularity, to a lesser extent)<\/li> \n    <\/ul>\n<\/font>\n<\/b>\n<\/div>\n\n","08152340":"We saw that the threat of Covid-19 diffusion throughout the U.S. presented a relationship with increases in Digital Engagement, but these increases are not simply a 'blind' consequence of such threat. Rather, there often are evaluations of the threat, decisions and announcements that influence the perception of the threat itself and the subsequent behavior (including the rise in Digital Engagement). \n\nThis is what we are going to tackle now: whether decisions, announcements, overall policies undertaken by the U.S. government and\/or U.S. singular states actually affect the levels of online engagement, and in what manner.\n\nTo do so, let's introduce a new external dataset [6] containing information about dates assciated to policies for each U.S. state, including the issuing and dismissal of the Emergency Status, closures and openings of schools, and several others.\nThe families of policies we will take into account are the following:\n* Restriction Policies\n* Closure Policies\n* Reopening Policies\n* Support Policies\n* Support Policies - End\n","c9647df8":"The situation becomes much more interesting now. Districts with high per-pupil Total Expenditure are associated to much higher engagement levels for <u>almost<\/u> the entire 2020, including break periods. Actually, the engagement levels were very similar at the beginning of 2020, before the advent of Covid-19, and also when it was initially being considered a threat. From the top chart we can notice that the levels of digital engagement rose on February, for both district categories and in very similar proportions; then, engagement levels continued to increase for high-expenditure districts, while for low-expenditure districts they kept being more or less the same for all the first half of 2020, and increasing slightly in the Outbreak phase (from September to December). \n\nWhat can we deduce about it is that high-expenditure districts' students were always slightly more digital learning -oriented, but <span style=\"background-color:lightcyan\">Covid-19 emphasized <\/span> the (mainly economic) <span style=\"background-color:lightcyan\">differences<\/span> highlighted by per-pupil total expenditure, thus yielding districts that switched to digital learning more easily when the pandemic made it a necessity, and districts that faced more difficulties to keep up with such a need.\n\nWe focused on ethnic differences and economic ones; anyway, also territorial-context factors might be of interest for our purpose. ","80b7f97b":"The Threat phase brings two Google products in the top tiers, Meet and Google Sheets, at the expense of other two ones, *Freckle by Renaissance* and *Epic! - Unlimited Books for Kids*. The Outbreak phase introduces Youtube, which is widely known but was not in the top 15 until now since engagement data concerning it was not available until this phase. The main reasons behind such products being so successful and engaged by students throughout the pandemic might be three:\n* <span style=\"background-color:lightcyan\"><u>Economic<\/u><\/span>: all the top-engagement Google-provided products are free; Meet required a business account to access great part of its services, but this policy has been disrupted in the first months of 2020 (from the Threat phase onwards, just a coincidence? Unlikely).\n* <span style=\"background-color:lightcyan\"><u>Practical<\/u><\/span>: all the top-engagement Google-provided technologies are easy to use and comfortable, which is a very important aspect according to the perspective of a student.\n* <span style=\"background-color:lightcyan\"><u>Brand-related<\/u><\/span>: Google is famous worldwide, students knew and habitually made use of some of its products even before Covid-19; the pandemic only exhacerbated the need to rely on digital learning technologies, and known and reliable platforms such as Youtube and Google Docs were ready to fulfill this need.\n\nBut how can other products such as Zoom can be so engaged, when there are Google-made products with the same functions and the three preceding characteristics? Of those three aspects, Zoom satisfies the first two ones; in fact, according to an article of The Verge [4]:\n> People continue to use Zoom because it\u2019s <span style=\"background-color:lightcyan\"><u>easy<\/u><\/span> and <span style=\"background-color:lightcyan\"><u>free<\/u><\/span>\n","1139f7b2":"As anticipated, high crime rates -states show a different distribution of student digital engagement, with overall lower values especially for the first half of 2020. The situation became similar for the two categories of states from September onwards, still having states with less delinquency showing slightly higher engagement values but with a much less sharp difference. \nThe explanation behind such a picture can be found in the nature of crime itself. In fact, criminality occurs for mainly two reasons:\n\n* <span style=\"background-color:lightcyan\">Economic<\/span>: Theft, Robbery, Kidnapping with Ransom, Drug Dealing, and many others; the final aim is often obtaining money\n* <span style=\"background-color:lightcyan\">Cultural<\/span>: Violence, Rape, Murder, Vandalism; behind these crimes there is often a cultural and educational leakage, even if this is not always the case\n\nThis is why states with higher crime rates exhibit lower digital engagement of students compared to states with lower crime: there probably is a more solid (even slightly more) <b>educational and\/or economic background<\/b> in the latter ones that <b>translates in a stronger involvement of students towards digital learning technologies<\/b>.\n\nWe can now deepen the analysis with another demographics-related measure: Homelessness. To carry on, we will make use of a dataset containing homelessness data [11] up to 2016. Given the concept of homelessness, one would expect states with more homeless people to have lower engagement index since the higher the number of homeless in a state, the higher the number of extremely poor people in that state; nevertheless, the reality is much different than that.","6971bddc":"<div style='background-color:lime;width:60%;margin-left:20%;box-shadow: 3px 6px 6px gray'>\n<b>\n<font size='4'>\n    KEY INSIGHTS:\n<\/font>\n<font size='2'>\n    <ul>\n        <li> The percentage of people belonging to different ethnicities has effects on digital engagement levels: Black\/Hispanic(-) and Asian(+)<\/li>\n        <li> Economic conditions (e.g. Income per capita, Per-pupil total expenditure) are, intuitively, crucial to detect vulnerabilities and detecting the gap in engagement towards digital learning technologies<\/li>\n        <li> The farther a school district is from urban contexts, the higher the student engagement towards digital learning technologies<\/li>\n        <li> The prevalence of private schools over public schools is overall higher in states displaying higher digital engagement levels<\/li> \n        <li> The number of non-school cultural infrastructures (such as Museums) is overall higher in states displaying higher digital engagement levels<\/li> \n        <li> Crime rates of a state appear to be a good indicator of its overall engagement levels, related to both Economic and Cultural rationales<\/li> \n        <li> Homelessness shows a very marked relationship with digital engagement of a state, attributable to the overall higher economic wellbeing (and subsequent higher households prices) of a state<\/li> \n        <li> States with more adverse meteorological conditions and events display a neat gap in digital engagement compared to those with less adverse meteorological events<\/li> \n    <\/ul>\n<\/font>\n<\/b>\n<\/div>","9119df46":"# <div style=\"background-color:cyan\"><b>2. Statement of Purpose<\/b><\/div>\n\nOur aim is to carry out a concise analysis of Digital Learning and, more precisely, Digital Learning after the explosion of COVID-19 pandemic, i.e., from 2020 onwards. The products related to digital learning are not treated uniformly in the US territory, but there are several differences on the engagement of students (and, more generally, of learners) towards such digital learning products. Differences in engagement are likely to be driven some other kind of differences that we did not know about so far, at least not with a consistent degree of confidence, since this is a completely new situation. After all, it is the first pandemic the humanity faces since the advent of the Digital Age. Such \u2018other kind of differences\u2019 are the factors we are going to investigate and point out. To do so, we will follow an approach based on several questions that are closely related to our main aim, questions whose answers will give us crucial insights to truly understand digital learning and the related challenges.\nThe main points that will be developed one by one in the analysis are the following:\n-\tWhat is the <span style=\"background-color:lightcyan\">picture<\/span> of digital connectivity and engagement in 2020?\n-\tWhat is the <span style=\"background-color:lightcyan\">effect<\/span> of the COVID-19 pandemic <span style=\"background-color:lightcyan\">on online and distance learning<\/span>, and how might this also evolve in the future?\n-\tHow does student engagement with <span style=\"background-color:lightcyan\">different types of education technology<\/span> change over the course of the pandemic?\n-\tHow does student engagement with online learning technologies relate to <span style=\"background-color:lightcyan\">different location-specific characteristics<\/span>?\n-\tDo certain <span style=\"background-color:lightcyan\">state interventions, practices or policies<\/span> correlate with the increase or decrease of online engagement?\n\n\n","77e837a9":"<div style='background-color:lime;width:60%;margin-left:20%;box-shadow: 3px 6px 6px gray'>\n<b>\n<font size='4'>\n    KEY INSIGHTS:\n<\/font>\n<font size='2'>\n    <ul>\n    <li> Government policies seem to exhacerbate some trends in digital engagement, but they are unlikely to reverse them (e.g., no pandemic-related government policy is able to make digital engagement rise during summer)<\/li>\n        <li> Closure policies occur in periods of increasing digital engagement, probably contributing to such increases<\/li>\n        <li> Reopenings often correlate with decreasing digital engagement<\/li>\n        <li> Policies giving economic relief seem to be contributing factors to strengthening digital engagement <\/li> \n    <\/ul>\n<\/font>\n<\/b>\n<\/div>\n","e7de3c89":"CDC Moratorium and Non-payment Limitation, both of which are support policies that aim at reducing the financial pressure on residents who might have experienced blows at their source(s) of income. Interestingly, both of them correlate with increases in digital engagement (see Washington, New Hampshire, Connecticut), with the exception of situation of steady decrease (end of school year, regularly). Eviction Moratorium correlates with increases in Digital Engagement even more compared to them, but Late Fee Ban policy occurs in different contexts; we would expect it to have relieving effects on the population, thus pushing the student engagement on digital learning upwards, but the picture is slightly different. Whereas Eviction Moratorium seems to be positively correlated with rising engagement, except for a couple of cases in which it is issued after engagement itself reached a peak (New Jersey, New Hampshire), Late Fee Ban is always emanated during the end of 2019-2020 school year: digital engagement is inevitably falling, hence the effect of such policy on it cannot be assessed. The same reasoning as before could apply, accounting for the possibility of Late Fee Ban being a driver, together with other factors like the end of school year, of such fall; anyway, this is unlikely to reflect the reality: unless it carries some veiled implication, a policy that economically supports citizens <b>will not cause students to reduce their focus towards digital learning, especially in a context in which digital learning is necessary<\/b>. A different situation could have been composed by a support policy issued together with the announcement of return to full face-to-face learning: in this case, digital learning would have become an enhancement tool rather than a necessity, thus disjoining it from the positive effect on the economic side. \n\nLet us make an example: the pandemic has enhanced economic and social diversity, when dealing with digital engagement, due to more vulnerable categories having difficulties to afford the necessary technologies (economic vulnerability), for instance; improving their situation on the economic side would indeed have very appreciable effects, but this would translate on digital engagement increases only as long as the interested actors feel it necessary\/worth to spend a part of their already little wealth on digital learning. Nevertheless, Digital learning is or paramount importance for students, even more nowadays, during pandemic times; hence, considering these arguments, a policy which supports population on the economic side during such a situation is very unlikely to have negative effects on that population students' engagement towards the digital learning technologies that emerged and that are still emerging.\n\nLet's thus move on to the second portion of Support policies.","4a59fcf7":"Now, another crucial part: how might the digital learning context evolve in the future?\nOur data is focused on 2020, but we already lived more than 2\/3 of 2021 and we know that the situation has changed further. In fact, in 2021 we entered in a sort of \"Coexistence\" phase, with the pandemic being more under control (at least in the U.S.) thanks to the advance of the vaccination campaign. We can presumably infer that the digital engagement situation was similar throughout the last months of 2020-2021 school year to what we saw in the previous chart, and probably being reduced in the last months due both to the end of the school year and to the vaccination campaign. But what happens next to the huge reliance on online and digital learning depends on several factors such as the advent of new Covid-19 variants, the long-term effectiveness of vaccines, and also the satisfaction of who was involved in the digital learning context the most.\n\nWe can distinguish among three possible scenarios in the future:\n* <span style=\"background-color:lightcyan\">Covid-19 <b>threat<\/b> is drastically reduced or disappears<\/span>: either because the vaccines work well on future variants as well, or because pharmaceutical companies reveal themselves to be able to adapt currently existing vaccines and new ones to any variant that overrides the standard serums; in this case, there are two sub scenarios:\n    * <span style=\"background-color:lightcyan\">Digital learning revealed effective<\/span>, able to keep up with face-to-face learning or even to enhance the learning process itself, online learners are satisfied. In this case, the changes brought by the perspective of digital learning to learning institutions (schools, universities, ...) will be <span style=\"background-color:lightcyan\">implemented permanently<\/span>, maybe with some sort of blended learning between face-to-face learning and online learning, or implementing the digital learning part in face-to-face sessions as well.\n    * <span style=\"background-color:lightcyan\">Digital learning reveal to be ineffective<\/span>, either becuase unequal among users (e.g. different social\/demographic\/economic context, etc.), difficult to sustain in the long run, it causes discrepancies in the learning process or simply leaves the parts involved unsatisfied; this is the scenario in which the future of digital engagement is less rosy, with <span style=\"background-color:lightcyan\">levels similar to the pre-covid ones<\/span>.\n* <span style=\"background-color:lightcyan\">Covid-19 poses some <b>threat<\/b><\/span> due to difficulties with vaccines on future variants. In this case, distancing countermeasures might be necessary, at least in the near future, to stem the risk of Covid-19 infection. This, in turn, would lead to <span style=\"background-color:lightcyan\">more reliance on digital learning<\/span>, with levels around the ones experienced in the Outbreak phase or even higher.\n\nAn article of the New York Times [2] about the future of schools after the end of the pandemic takes into account a sort of survey asking almost 400 students their own opinions about distance learning; The overall response highlights both positive and negative aspects:\n\n> ... They told us about all the things they miss about going to school: their friends, teachers, sports, extracurricular activities, even \u201cthe loud and crazy lunchroom.\u201d\n\n> ... Some also recounted the challenges of distance learning, like struggling to understand assignments, getting easily distracted and not having reliable internet\n\n> ... Many students also said there were aspects of remote learning they enjoyed, such as getting to work at their own pace, setting their own schedule and being free from \u201cthe stressful environment of school.\u201d\n\nIt is anyway not a novelty that distance learning comes with both challenges and positives. These citations highlight some of the challenges for Digital Learners; the challenge of Digital Instructors (and not only) stands in making the digital learning process as smooth as possible, given that the future scenario is one involving the consistent presence of digital learning (and high digital engagement of students, as a consequence). We will soon investigate this latter challenge deeper.\n","d227ce43":"The majority of subcategories beloning to the SDO primary function displays peaks during the first half of 2020, with the only exception of Learning Management Systems, which is the most engaged one among the SDO-related functionalities and reaches its global maximum (slightly higher than the one reached in March) in September and still experiencing a slightly lower local peak before Summer.\nThus, it seems that <span style='background-color:lightcyan'>the effects of the pandemic on student engagement towards SDO technologies are mostly limited to the 'Threat' phase of Covid-19 diffusion<\/span>, i.e., the period of time between February and the end of the 2019-2020 school year; still keeping in mind the consistent exception depicted by Learning Management Systems, whose engagement levels are reasonably justified by the need to digitally deal with teaching materials throughout the whole 2020. This conclusion can be further corroborated by observing <b>pre-pandemic engagement levels<\/b> which <b>are<\/b>, in the great majority of subfunctions, <b>similar to the engagement levels observed in the last months of 2020<\/b>.","dae0b917":"# <div style=\"background-color:cyan\"> <b>5. How does student engagement with different types of education technology change over the course of the pandemic?<\/b><\/div>\n","919a7240":"The left-side plot shows the shift from the pre-Threat to the Threat phase with the engagement index for each day, while the right-hand side plot displays the data weak by weak (e.g., the engagement index for 1 Jan is the mean of the engagement index between 1 Jan and 7 Jan). As previously highlighted, in the first month of 2020 Covid-19 was not considered a real threat, hence no countermeasures were adopted yet, neither in terms of entries into the nation nor in terms of distance-learning adoption. Engagement index was already quite high though, we were already living in the so-called Digital Age long before Covid-19 even existed and the digital technologies (including the ones related to Digital Learning) pervade our lives, and this is by now a fact. \nWhat is interesting is the <b>sharp increase in digital engagement<\/b> in the second week of February, which continued up to March and even beyond. This is the initial 'threat' phase, where digital engagement rose as a response to the advance of the virus <span style=\"background-color:lightcyan\">outside<\/span> the U.S.\n\nIn fact, Covid-19 was not even widespread when the threat of its outbreak hit the U.S. government and its population, with a subsequent increase in Digital Engagement. What happened in the next phase, after the end of the 2019-2020 school year and at the beginning of the 2020-2021 one? \n\nThe real and heavy outbreak of Covid-19 in the American territories came from the second half of October onwards, with the peak reached at the beginning of 2021; let us investigate the reaction of the U.S. to such spread in terms of digital and online engagement.","671960f5":"Multicollinearity is negligible and the measures we introduced seems to be only partially correlated to one another, strengthening the idea that the explanations behind the effect each of these measures appear to exert on Digital Engagement are only partially related to their economic implications.","56a4f05c":"The left chart shows the overall picture of how digital learning technologies have been engaged overall in the whole U.S. during the first pandemic year. Clearly, LC-type technologies (Learning and Curriculum) come with much higher engagement compared to the other primary functions' products, being these technologies a <b>really precious resource for students in the distance learning context<\/b>. Students also engaged Learning Management Systems (SDO type) consistently, mainly those provided by Google LLC, which appears to be the main provider of Digital Learning systems and technologies in the whole 2020. Google LLC is, in fact, the main provider appearing in several other categories, including CM and LC categories. Looking at the right plot, we can further notice this trend; in fact, the first two products by engagement index in 2020 are 'Google Docs' and 'Google Classroom', with other 3 Google products in the rest of the top 15 of products ranked by engagement (5 actually, if we consider that Meet and Youtube are owned by Google, as well).\nInterestingly, both <span style=\"background-color:lightcyan\">Meet<\/span> and <span style=\"background-color:lightcyan\">Zoom<\/span> appear in the list; Interestingly because Zoom has been created almost a decade ago, and it was almost unknown to the great majority of students (and non-students) before 2020, while Meet had a much lower usage and several features reserved to business accounts until the advent of Covid-19.","855e814c":"The previous charts display the mean weekly levels of digital engagement throughout 2020 for each of the U.S. states we are taking into account (18 in total, with 5 which are not considered here due to noisy engagement values), with 4 vertical lines per state. Each vertical line represents the four main Restrictive policies:\n* <span style=\"background-color:red\"><b>Emergency State<\/b> <\/span>\n* <span style=\"background-color:blue;color:white\"><b>School closure<\/b><\/span>\n* <span style=\"background-color:lime\"><b>Face Mask Obligation<\/b><\/span> and \n* <span style=\"background-color:orange\"><b>Stay Home Obligation<\/b><\/span>\n\nInterestingly, each policy among Emergency State, School Closure and Stay Home Obligation occurs in very similar contexts and has more or less the same consequences for every state. They are issued in periods close to each other, between the second half of February and the beginning of April, and they come with some discordant effects on digital engagement: for some cases, such as Indiana, Virginia and Michigan where digital engagement was already falling, it decreases also in correspondence of these policies; in other more common situations, like for example Wisconsin, Ohio, New York and Connecticut, digital engagement is boosted when these policies are issued. Then there are some more 'neutral' states, like Washington, California, D.C., where engagement levels are more or less unchanged even a couple of week after the policies have been issued, which is a reasonable time for such policies' effects to consolidate. The <span style=\"background-color:lightcyan\">overall relationship with Digital Engagement is positive<\/span>, considering also the magnitude of its boosts when they occur (see Arizona and Wisconsin versus Virginia and Missouri), but we already knew that since this is the phase we highlighted as 'Threat' phase, which displayed consistent increases of Digital Engagement levels. For 'overall positive relationship' we are not implying that they have some direct effect on it, only that the close periods following issuing of such policies are often charcterized by rising digital engagement. This may be interpreted in two ways:\n* Policies exert an indirect effect on digital engagement leading its levels to change as a result of their issue\n* They are issued in periods characterized by already ongoing trends (like increases of engagement at the beginning of the new school year), in which case the effect of policies may have no effect at all, or they may bring an opposite effect which is not strong enough to offset the initial trand, or rather they might being a contributing factor strengthening the trend \n\nFor this reason we should consider signals from changes in digital engagement levels after issued policies taking into account the context as a whole to draw more realistic conclusions: in case a policy is issued in all states during a single ongoing trend, its result can only be assessed considering all the factors at stake.\n\nWe also recall that Learning & Curriculum -related functionalities reached their 2020 maxima in the three weeks between 26th of February and 18th of March, and it is not a coincidence that, in the great majority of the states, <b>Emergency State and School Closed were issued within the 18th of March<\/b>. \n\nThe issuing of Face Mask Obligation is less standardized and occurs in various periods of 2020, depending on the State, and for this reason it is difficult to detect a common pattern behind its consequences. We can anyway notice that for most states Face Mask becomes mandatory during summer holidays, between its beginning (in which case digital engagement was already decreasing) and its end (where digital engagement rises due to the proximity of the new school year). It is easy to deduce that states felt necessary to impose such an obligation in periods of low digital engagement because several students were actually not digitally-engaging at all, but rather physically-engaging with each other and in summer activities, thus contributing to the birth of new outbreaks in the U.S. territory. For this reason, the face mask was made mandatory as a security measure against the risk of new infections during the summer period.\n\nWe now take under scrutiny the strictly 'Closing' policies, expecting them to be issued in similar periods as the first three Restriction policies we just analyzed and to carry analogous effects.","a3f6776a":"*Note: The % of Black\/Hispanic people in the previous chart has been increased by 0.1 for each state and for the threshold, for sake of interpretability* \n\nThe intuition was correct: a couple of 'outliers', i.e., D.C. and Arizona, display high engagement values despite having a very high percentage of Black\/Hispanic people living in their districts. The reason may be related to the low number of available school districts data for these states, especially Arizona which <b>comes with only a single district<\/b>, yielding distorted results: if a state is represented by a single district, there is a higher probability of the representation being biased; if that district represents an exception, the whole state might be misclassified as a high black\/hispanic district. This is pretty much what happened before, and observing this plot we can conclude that the proportion of inhabitants of a state belonging to black\/hispanic ethnicities is related, at least partially, to the levels of engagement towards digital learning technologies in that state. Indeed, almost all the states with & Black\/Hispanic above the threshold display mean daily engagement index values much below 200, with only two exceptions and of which one is an underrepresented state coming with a single district! This is incredible, if we consider that we are only taking into account a single representative feature, i.e., the percentage of people belonging to Black or Hispanic ethnicities.\n\nGoing on, we can similarly investigate on the percentage of students that, given their economic conditions, are eligible for free or reduced-price lunch.","fb90fe30":"*note: hover on the tree plot (left side) to better read components*\n\nSpanning in all the Primary Function typologies, Google LLC is by far the major provider of digital learning services and technologies in the pre-Threat phase, with 5 products offered in the top 15 of providers ranked by engagement. The overall levels of engagement are consistent with what we previously observed, and we expect engagement levels to double in the next phase (Threat phase). \nThere is only one CM (Classroom Management) product listed, and this is likely to be caused by the fact that <b>students are learning-oriented<\/b>, thus focusing on learning-oriented digital technologies rather than classroom management ones, which are engaged by teachers and educational staff.\n\nLooking at the tree plot (on the left), we can observe which categories of products have been more engaged: Digital Learning Platforms had a consistent advantage in this phase, when distance learning was not implemented yet. Follow other Learning&Curriculum (LC) products, which make up almost 75% of total Pre-threat phase engagement.\n\n### Threat Phase: 10th February - 28th April","62d7afbf":"*note: engagement_index and pct_access have been standardized for this chart to better represent them jointly* <br>\n*note: 6.C. = Christmas Holidays*\n\nThis is the overall picture of Digital Engagement in 2020 in the United States of America, regardless of the specific states, producs, product functions, and context (demographic, social, territorial, etc.), and there are several insights that can be drawn from this chart.\n- There is a <b>cyclic behavior<\/b> which is always repeated throughout the year, i.e., <b>the drastic reduction in digital engagement during the weekend<\/b>. Each week, the level of digital engagement is high in the first 4 days (Monday, Tuesday, Wednesday, Thursday), then it slightly decreases on Friday, up to a much lower value (usually the minimum) on Saturday and on Sunday. This behavior clearly shows that the level of attention towards digital and online product engagement is proportional to the amount of work and\/or study imposed on that specific time. In fact, the great majority of school weeks' end on Friday, between 12.00 p.m. and 14.00 p.m., and it is unlikely to be just a coincidence that the last school day of the week is coupled with lower online engagement. \n- The engagement level <b>drastically drops when getting closer to the summer season<\/b>. It starts decreasing from the end of April, and only starts rising again in August. Remember: in the U.S. the school year usually starts from August, and that is probably the reason of such a behavior. Engagement stands far below the weekend level during the year, even during the week, and it decreases further during weekends (the difference between middle-week and week-end is extremely smaller compared to that observed during the school year).\n- The level of <b>engagement was overall lower at the beginning of 2020<\/b>, when Covid-19 was not considered a threat yet. Moreover, the overall level of engagement was even higher in the second half of 2020, with the beginning of 2020-2021 school year, compared to the one observed between February and May. These are clear signals that Covid-19 has some role in altering digital engagement trends, and we will explore this further. \n- There is a clear <b>mismatch between Engagement Index and Pct Access before the advent of Covid-19<\/b>; in this period, Pct Access levels were much higher compared to digital engagement ones, differently from the rest of 2020 where the two measures are almost perfectly correlated.\n- Thanksgiving day (and the closest following days) exhibits a sudden decrease in digital engagement similar to the fall induced by the weekends, regardless of the fact that the 25th of November 2020 was Wednesday. It is thus likely that <b>important holidays lead to<\/b> more or less sharp <b>decreases in student engagement<\/b> caused by the fact that students tend to spend more time with family members and\/or friends and less engaging digital learning technologies.\n- The days representing the so-called Christmas Holidays display, similarly to what we just saw with Thanksgiving, a consistently lower level of digital engagement; the reason is likely to be the same as for Thanksgiving, and also considering the explanation behind low engagement during summer: Christmas Holidays, as the Summer ones, imply <b>school breaks<\/b> that <b>inevitably lead students to be less engaged towards learning technologies<\/b>, regardless of whether they are digital or not.\n\nNow, it is worth remarking that the digital engagement index is not always made up by the same components; they may vary throughout the pandemic, with some digital products being engaged more and some less at certain points in 2020. ","798baeea":"Intuitively, Covid-19 cases and related deaths are positively correlated, with a slight shift (an increase in cases translates into an increase in deaths after about 10 days). The relationship between these two metrics and Engagement Index, anyway, is rather ambiguous and difficult to interpret; for the first months in which Covid-19 appeared (more than half of 2020), there were two main problems with the recording of Coronavirus cases and deaths and both related to the lack of experience and preparedness to handle such an unusual and unexpected situation:\n* Low number of tests, with a subsequent misleading number of registered cases: cases at the beginning of April are underestimated, but their true number is likely to be close to that of November or even December (which are more realistic thanks to the higher number of tests performed), considering the respective deaths\n* Little knowledge and\/or preparedness on how to efficiently handle severe Coronavirus infections, leading to a higher lethality in the first months of pandemic\n\nAnyway, even with the forementioned discrepancies, it is possible to deduce a recurrent behavior of engagement index compared to Covid-19 cases: not only it rises in correspondence of epidemic peaks, rather it starts increasing <span style=\"background-color:lightcyan\"><b>before<\/b><\/span> the actual increase in cases, and if at a first glance this might sound strange, it perfectly matches what we previously supposed: the major relationship between digital engagement and Covid-19 diffusion integrates the <span style=\"background-color:lightcyan\"><b>threat of diffusion<\/b><\/span> of Covid-19 rather than being limited to Covid-19 diffusion itself. Online engagement rises as a response to the increase in threat posed by Covid-19, and by its already established spread outside the U.S.\nBefore peaks in Covid-19 cases in the U.S., there have already been peaks in several nations worldwide, and these peaks are likely to influence U.S. digital engagement more than the internal ones. Thus, for the 'threat' phase, this relationship makes perfectly sense; besides, the threat is exhacerbated by the cases of Covid-19 in the U.S. increasing unexpectedly fast, from 500 to 5000 in a single week, leading to a further boost in digital engagement. For what concerns the outbreak phase and the burst in digital engagement between August and September, it is the result of the new school year being starting, probably combined with the local peak in cases experienced in July and the almost constant number of infections of that period; in this case, in fact, the threat had come true, with a consistent number of cases <b>inside<\/b> the U.S. and which did not seem to be intended to go down. \n","eadf057e":"Differently from LC-related products, the ones belonging to Classroom Management (CM) subfunctions appear much less ambiguous and with a <span style='background-color:lightcyan'>clear prevalence of higher engagement values in the second half of 2020<\/span>: the functionalities having their engagement maximum in the first half of the year are associated to very low overall engagement levels, from 40 to 85; conversely, the functionalities with a maximum in the latter half span from 250 to 3000 of digital engagement index (apart from Teacher Resources - Lesson Planning). Not only: taking a look at pre-pandemic levels, we can notice that CM-related products underwent a consistent boost throughout the first pandemic year, with the great majority of functionalities displaying <b>incredibly higher values at the end of 2020 compared to the pre-pandemic ones<\/b>.\n\nIt is feasible, keeping into account the context behind each functionality, to outline the reasons behind these behaviors. Distance learning brought Classroom Management and Teaching Enhancement tools in the foreground, making it of <b>paramount importance to <u>strengthen communication<\/u> between instructors and students<\/b>, in terms of assignments (Classroom Engagement & Instriction - Communication & Messaging) and, even more important, of distance lectures and tests (Virtual Classroom - Video Conferencing & Screen Sharing, Classroom Engagement & Instruction - Assessment & Classroom Response).\n\n\nLastly, the School & District Operations (SDO) primary essential function;","1163011d":"This time, the situation is a bit different: districts with higher percentage of students eligible for Free or Reduced -price lunch, thus referring to students with unfavorable economic conditions, are associated with slightly lower engagement levels throughout the entire 2020 (except for break periods) compared to students living in better economic contexts. The proportion of such <b>discrepancy is not heavy<\/b> actually, as we can observe from the top-level plot; anyway, that plot also tells us that the <b>discrepancy is constant<\/b>, existing even before the first case of Covid-19 in the U.S.\n\nAnother rather interesting feature is 'pp_total_raw', which stands for the Per-Pupil Total Expenditure (intended as the sum of Local expenditure plus Federal expenditure). ","9351f767":"The outbreak phase displays much higher digital engagement values (peaks around 500) compared to the Threat phase, and stable values between 260 and 360 which are around 100 units higher compared to the Threat phase). As anticipated, the sharp fall in engagement at the end of December can be attributed to the reduction in school commitment related to Christmas holidays.\nThus, there is clear evidence that whereas the threat of Covid-19 diffusion led to increased Digital Engagement, the actual Covid-19 outbreak (started in April, with a peak in summer and another one in Winter) contributed to a much higher rise of such index.\n\n","9d91d7a2":"<div style='background-color:lime;width:60%;margin-left:20%;box-shadow: 3px 6px 6px gray'>\n<b>\n<font size='4'>\n    KEY INSIGHTS:\n<\/font>\n<font size='2'>\n    <ul>\n        <li> Digital engagmeent is always lower during the weekends and higher during the week<\/li>\n        <li> Digital engagmeent is lower during non-school periods (like Summer Holidays and Christmas Holidays)<\/li>\n        <li> Overall engagement levels in 2020 are clearly higher than pre-pandemic levels<\/li>\n        <li> Throughout 2020, Google LLC products are the most engaged overall<\/li> \n        <li> Covid19 pandemic pushed already existing technology upwards (Meet and Zoom)<\/li>\n    <\/ul>\n<\/font>\n<\/b>\n<\/div>\n","7cd7f37d":"Learning and Curriculum (LC) -related Primary Essential Functions are the most engaged ones overall, as we observed in the first point (4.1), when exploring the overall Digital Engagement picture in 2020. The behavior of individual functionalities is far from being regular though; rather, some primary functions have seen highly varying engagement towards them throughout the various phases of 2020, and there is an explanation behind such a behavior.\n\nSeveral Learning & Curriculum -related functionalities had their maxima during the 'Threat' phase, some weeks before Covid-19 cases reached alarming levels but anyway in a period where the fear related to Covid-19 threat was high, and increasing. Such fear led to improvement in the digital learning tissue in the whole United States territory, including what concerns the specific functionalites under the Learning and Curriculum category. This incorporates Digital Learning Platforms, Courseware & Textbooks, various kinds of Study Tools and also the Sites, Resources & References (some of them) functionalities: all of them reached their highest levels within the end of March. \nAnyway, there are also functionalities that displayed much lower engagement levels throughout the first half of 2020, and then reached summits, in the latter half, rarely observed before. We are talking about Content Creation & Curation, Online Course Providers & Technical Skills Development and, the most peculiar, Streaming Services subcategory of Sites, Resources & References.\n\nSome further insights can be easily extracted from the chart:\n\n* The advent of some technologies and their becoming more engaged led some others to be disregarded, leading their engagement levels, in the last months of 2020, below the pre-pandemic levels (purple band)\n* The reduction in engagement for what concerns Digital Learning Platforms is likely to be caused by the preparedness developed by the U.S. system, moving from a lockdown of schools during\/right after the Threat phase to a more blend-oriented learning. This reduced, at least partially, the need to rely on these platforms and increased the need to lean towards other more blend-oriented technologies. Partially because, as we can observe from the chart, Digital Learning Platforms' engagement levels at the end of 2020 are still above the pre-pandemic levels\n* Some technologies are likely to be <b>found more <u>'comfortable'<\/u><\/b> compared to the respective face-to-face counterpart (e.g. Content Creation & Curation); for digital learning technologies <u>being appreciated by students in this specific aspect may reveal to be a real warhorse in the future<\/u>\n\nGoing on with Classroom Management CM primary essential function;","0ac3672d":"<span style='background-color:lightcyan'>Meteorological vulnerability<\/span> doesn't seem to be only a mere conjecture after all; the distributions are <u>unequivocally different<\/u> from one another, with states experiencing less meteorological events having overall higher digital engagement levels compared to states with more adverse meteorological conditions. \n\nKnowing this appears to be particularly important since states are not the only territories associated with particular climate trends: also specific districts, located in some areas of specific states, might be characterized by detrimental environmental events and this, in turn, might <span style='background-color:lightcyan'>expose students belonging to those districts to vulnerable situations in terms of engagement towards digital learning technologies<\/span>.\n\nA single explanation behind this is unlikely to be found; anyway, there might be several reasons for meteorological events affecting digital engagement:\n* <b>Influence on connections<\/b>: adverse meteorological events might cause <span style='background-color:lightcyan'>internet connections to become weaker or drop<\/span>; in some cases they might even lead to <span style='background-color:lightcyan'>blackouts<\/span>\n* <b>Direct influence on students<\/b>: some climatic events might lead students to less engagement towards learning, regardless of whether it is face-to-face or distance learning, due to <span style='background-color:lightcyan'>unexpected and unavoidable contingencies<\/span> (e.g. Hurricanes)\n* <b>Indirect influence on students and their families<\/b>: locations more prone towards adverse meteorological events are likely to <span style='background-color:lightcyan'>suffer from such events in economic terms<\/span>, leading more economically vulnerable students to reduce their engagement towards digital learning technologies.\n","a16ca0c1":"*note: hover on the tree plot (left side) to better read components*\n\nThe composition of Google LLC's offered producs in the top 15 changed: the Outbreak phase pushed out Google sites while bringing to the fore a widely known platform (again owned by Google): Youtube. The reason why this well-known and long-established platform did not appear in the previous phases consists simply in the lack of Youtube engagement data for those periods.\n\nLet us analyze more in depth the differences between the three phases to understand why such changes in engagement among different Digital Technologies occurred.","180a440e":"The previous plot shows the contribution of each state to Engagement Index (mapped by bar color) and each state levels of Income per capita, number of non-school Education Places per 1 million of inhabitants, and Private over Public schools ratio. As highlighted, the high-level group for each measure (states that exceed the red line) is composed by similar states overall, but with consistent variations from measure to measure. For example, Connecticut displays different levels for all the measures: Very high for Income per capita, moderately high for the number of Education Places, and medium for Private over Public schools ratio. Something similar happens with Indiana, North Dakota, Virginia, and others.\nThus, the intuition behind investigating these three measures was correct, as <span style='background-color:lightcyan'>they independently exert some influence on the levels of Engagement Index in each state<\/span>.\n\nWe are not stopping here though; the previous external dataset we introduced contains another interesting demographics feature we have not explored yet, and that may be of interest for the Digital Learning context. \n\nThat said, the new feature we will investigate on right now is partially similar to what we saw before with percentage of Black\/Hispanic people in each district: this time, we will deal with the percentage of Asian people, per state rather than per district (since the external dataset is aggregated into states), and from which we expect more marked results from the previous Ethnic -related feature. In fact, despite being both attributes referring to ethnicities different from the far more common in the U.S. 'White' group, <span style='background-color:lightcyan'>people belonging to Asian ethnicity usually move to the United States for work- and study-related reasons<\/span>, hence if we expected (and observed) districts with higher pct_black_hispanic displaying similar overall digital engagement levels and with slightly higher levels after the advent of Covid-19, we can reasonably expect to observe states with higher pct_asian displaying even higher digital engagement levels.","cd62e750":"# <div style=\"background-color:cyan\"> <b>4. What is the effect of the COVID-19 pandemic on online and distance learning, and how might this also evolve in the future?<\/b><\/div>\n","02ae8b75":"# <div style=\"background-color:cyan\"> <b>6. How does student engagement with online learning technologies relate to different location-specific characteristics?<\/b><\/div>\n","df9ca22c":"How can these changes in specific Primary Functions, once aggregated, be coupled to specific providers and products? Knowing the rationale behind the difference in Digital Engagement trends among different functionalities allows us to understand what aspects of digital learning are favored the most and how the pandemic influenced this pattern, but what are the changes in specific products throughout the whole pandemic and, in the end, what are the aspects driving a digital learning product (or its provider) to prevail over others with the same functionality? Let's discover this.\n\n### Pre-Threat Phase: 1st January - 10th February","e4a7cdae":"<div style=\"background-color:cyan\"> <font size=\"5\"> <b> 0. Outline <\/b> <\/font> <\/div>\n<div style=\"background-color:lightcyan\"> <font size=\"3\"> <b> 1. Introduction <\/b> <\/font> <\/div>\n<div style=\"background-color:lightcyan\"> <font size=\"3\"> <b> 2. Statement of Purpose <\/b> <\/font> <\/div>\n<div style=\"background-color:lightcyan\"> <font size=\"3\"> <b> 3. What is the picture of digital connectivity and engagement in 2020? <\/b> <\/font> <\/div>\n<ol>\n3.1 \tOverall Picture: Engagement Index and Percentage Access<br>\n3.2 \t2020 Most Engaged Products<br>\n<\/ol>\n<div style=\"background-color:lightcyan\"> <font size=\"3\"> <b> 4. What is the effect of the COVID-19 pandemic on online and distance learning, and how might this also evolve in the future? <\/b> <\/font> <\/div>\n<ol>\n4.1 \tOverall Picture<br>\n4.2 \tPre-Threat to Threat<br>\n4.3 \tOutbreak<br>\n4.4 \tStatewise<br>\n4.5 \tDigital Engagement versus Covid-19 Cases\/Deaths<br>\n<\/ol>\n<div style=\"background-color:lightcyan\"> <font size=\"3\"> <b> 5. How does student engagement with different types of education technology change over the course of the pandemic? <\/b> <\/font> <\/div>\n<ol>\n5.1 \tEngagement Index per Primary Essential Function: LC<br>\n5.2 \tEngagement Index per Primary Essential Function: CM<br>\n5.3 \tEngagement Index per Primary Essential Function: SDO<br>\n5.4 \tPre-Threat Phase<br>\n5.5 \tThreat Phase<br>\n5.6 \tOutbreak Phase<br>\n5.7 \tPhases Compared<br>\n<\/ol>\n<div style=\"background-color:lightcyan\"> <font size=\"3\"> <b> 6. How does student engagement with online learning technologies relate to different location-specific characteristics? <\/b> <\/font> <\/div>\n<ol>\n6.1 \tPercentage Black\/Hispanic<br>\n6.2 \tPercentage Free\/Reduced Lunch Prize -eligible Students<br>\n6.3 \tPer-pupil Total Expenditure<br>\n6.4 \tLocation Context<br>\n6.5 \tNumber of Education Places<br>\n6.6 \tPrivate\/Public Schools Ratio<br>\n6.7 \tIncome per Capita<br>\n6.8 \tMulticollinearity between 6.5, 6.6, 6.7<br>\n6.9 \tPercentage Asian<br>\n6.10 \tCrime Rate<br>\n6.11 \tHomelessness<br>\n6.12 \tMeteorological Events<br>\n<\/ol>\n<div style=\"background-color:lightcyan\"> <font size=\"3\"> <b> 7. Do certain state interventions, practices or policies correlate with the increase or decrease of online engagement? <\/b> <\/font> <\/div>\n<ol>\n7.1 \tRestriction Policies<br>\n7.2 \tClosure Policies<br>\n7.3 \tReopening Policies<br>\n7.4 \tSupport Policies<br>\n7.5 \tSupport Policies - End<br>\n<\/ol>\n<div style=\"background-color:lightcyan\"> <font size=\"3\"> <b> 8. Wrap up discussion and conclusions <\/b> <\/font> <\/div>\n<div style=\"background-color:lightcyan\"> <font size=\"3\"> <b> 9. References <\/b> <\/font> <\/div>\n","fca66e5d":"Several of these dates are not available or, rather, they are issued after the end of 2020 year. For the great majority of policies, they are issued in periods of lowering Digital Engagement (like summer) or local reductions of its levels (reductions that we can observe multiple times in the 'Outbreak' phase, from September onwards); it is reasonable to consider these events, which actually represent the end (or reduction) of economic relief on several families whose financial stability has been damaged (or worsened, in case of already vulnerable situations) by the pandemic, a <span style='background-color:lightcyan'><b>contributing factor<\/b><\/span> to the downward peaks in students engagement towards digital learning technologies; some exception holds, mostly represented by some state-specific occurrences.\n\nOverall, assessing the effect of a policy on digital engagement levels is not trivial, but taking into account the whole context (policy meaning and implications, period of issue, etc.) allows us to draw more reasonable conclusions. Indeed, the evidence shows that some policies show a strong correlation with the behavior of digital engagement, with both positive and negative relationships; some of these policies appear thus likely to be some of the various drivers behind increases\/decreases in student engagement towards digital learning technologies, and understanding this means understanding more deeply the story behind Digital Learning itself.","e518373a":"It seems that the distribution of engagement indices in states with less Education Places (<u>per 1 million of inhabitants<\/u>) is characterized by overall lower values compared to states with more Education Places: this applies in the whole 2020, even before the first Covid-19 case in the U.S., but the pandemic seems to emphasize this trend. \nThere are two ways of interpreting this: \n* The high number of education places per 1 million inhabitants denotes a <span style='background-color:lightcyan'>high need for such infrastructures<\/span>, in turn denoting <span style='background-color:lightcyan'>students which are more prone to learning overall<\/span>\n* Such high number may indicate <span style='background-color:lightcyan'>more economic wellbeing<\/span>, even slightly, that might in turn be partially associated with overall higher engagement towards digital learning\n\nThe reality is likely to <b>fall in between<\/b> these two interpretations, dealing with states that are more prone towards learning (regardless of its modality) also by virtue of their populations' economic and cultural status.\n\nLet us investigate another possibly important aspect related to each location (again, focusing on State): the ratio between the number of Private schools and the number of Public ones. Data from an external dataset [5], containing information about the great majority of schools in the U.S. territory (state by state), is crucial to perform such an analysis.","006eb2e5":"<div style='background-color:lime;width:60%;margin-left:20%;box-shadow: 3px 6px 6px gray'>\n<b>\n<font size='4'>\n    KEY INSIGHTS:\n<\/font>\n<font size='2'>\n    <ul>\n        <li> Three engagement development phases can be highlighted: Pre-threat, Threat, Outbreak<\/li>\n        <li> Digital engagement is higher in the second half of 2020, in the Outbreak phase<\/li>\n        <li> Mismatch between Covid19 cases\/deaths and Digital Engagement levels<\/li>\n        <li> Apparent increase in Digital Engagement when the threat of Covid19 diffusion increases<\/li> \n        <li> Digital Learning technologies are likely to become part of everyday learning activities<\/li>\n    <\/ul>\n<\/font>\n<\/b>\n<\/div>\n\n","edd4fd67":"As predicted, the digital engagement levels of states with high median income is overall higher than the less wealthy ones. It seems that, to quite a high extent, <span style='background-color:lightcyan'>several facets of economic conditions play an important role on determining the overall digital engagement <u><b>levels<\/b><\/u><\/span> (apart from their movements, which are similar).\n\nMulticollinearity is a factor to take into account: since the last three groups of charts displayed very similar results, we could expect the three measures we introduced (median income per capita, number of non-school education places per million of inhabitants, and ratio of private over public schools) to be highly correlated. Let us quantify and visualize whether this is the case."}}