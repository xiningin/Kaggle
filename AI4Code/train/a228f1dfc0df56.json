{"cell_type":{"a6f461f9":"code","b2bfb599":"code","02438d99":"code","cc20faa5":"code","3ed8358e":"code","11a3e5de":"code","89787f9b":"code","6f646b24":"code","64cbfadb":"code","086a6cb0":"code","393fd351":"code","d0ed3f88":"code","58113dbb":"code","4469896c":"code","0f7e5480":"code","2c8a0d95":"code","4c604c56":"code","ddda92c5":"code","e59bc3b0":"code","b11b044f":"code","a0837e50":"code","da7d1bd8":"code","8bac5de9":"code","b73ab610":"code","8dbacf7d":"code","cfbc012e":"code","916c298e":"code","54176bc1":"code","72a0b0de":"code","da67d7d8":"code","0615a68e":"code","ff73c0d2":"code","f571e6be":"code","e6217954":"code","3243a4b5":"code","d107c8c8":"code","5e8873b1":"code","693f46bd":"code","97f0e69d":"code","d05f4466":"code","d5c37a24":"code","8f996288":"code","2e288a15":"code","dc659127":"code","2829dfa1":"code","9e69c967":"code","5deafad2":"code","d38d2622":"code","ca6590e0":"code","6e7e0549":"code","b63f0434":"code","e421335a":"code","0e4ecea6":"code","fa2b6aa1":"code","87dd3ba1":"code","10d589d9":"code","976ae189":"code","ca577e14":"code","8258569e":"code","21dab659":"code","abd6351e":"code","4d324974":"code","5989f52b":"code","265aa5ab":"code","2f38e98e":"code","830ad529":"code","e1cb43d3":"code","6d0f079b":"code","00c359fa":"code","fcc2cd3a":"code","4c1b75bd":"code","c8dee57f":"markdown","518a6551":"markdown","90750796":"markdown","a654c572":"markdown","d49c3a14":"markdown","5ad87901":"markdown","40aa29fd":"markdown","399b3d54":"markdown","bb9b16b3":"markdown","dc3ca3d8":"markdown","9606243e":"markdown","9272b588":"markdown","5ea95696":"markdown","5894b661":"markdown","78840bf3":"markdown","3a9c71c7":"markdown","ce83644c":"markdown","95fc5c90":"markdown","8b5c870c":"markdown","9ee7f817":"markdown","c035b4ea":"markdown","15f6271d":"markdown","4a9b7661":"markdown","45da114a":"markdown","b55c452d":"markdown","153e6b31":"markdown","fe72d0c2":"markdown","d28eb0ff":"markdown","9f3c500d":"markdown","706f980e":"markdown","cd6a80b0":"markdown","d1b36371":"markdown","fa6c0ee5":"markdown","df4cd10d":"markdown","1a9a19dd":"markdown","7cf7f467":"markdown","99e53f73":"markdown","410f3001":"markdown","0b5da88f":"markdown","ef3e8538":"markdown","91f9bc94":"markdown","1ca70cb8":"markdown","7684a26e":"markdown","333be5dc":"markdown","f1e40635":"markdown","d32adf84":"markdown","eda1f215":"markdown","ff90be11":"markdown","462cd94a":"markdown","1d12d617":"markdown","02787a4d":"markdown","032a416f":"markdown","9cef8749":"markdown","0da78b16":"markdown","6637ea8f":"markdown","5c80adf4":"markdown","37165a0e":"markdown","4861dc21":"markdown","933e194f":"markdown","52505ba9":"markdown","b77477ff":"markdown","aa3b3062":"markdown","1b40034e":"markdown","3d686737":"markdown","0c66a16d":"markdown","d5f85805":"markdown","36eba074":"markdown","1b61d1bd":"markdown","af87da36":"markdown","f1382042":"markdown","429bf49f":"markdown","c1717b07":"markdown","325fc884":"markdown","fc53dd52":"markdown"},"source":{"a6f461f9":"print(\"Hello, World!\")","b2bfb599":"print(\"Hello, World!\")","02438d99":"a = 5\nprint(a) # Integer\n\nb = 5.5\nprint(b) # Float\n\nc = \"Hello!\"\nprint(c) # String","cc20faa5":"\"\"\"Yorum \nSat\u0131rlar\u0131\nDocstring\"\"\"\nprint(a)","3ed8358e":"a = 5\nA = 6\nprint(a,A)","11a3e5de":"print(\"a'n\u0131n tipi:\", type(a))\nprint(\"b'nin tipi:\", type(b))\n\na = str(a)\nb = int(b)\n\nprint(\"a'n\u0131n tipi:\", type(a))\nprint(\"b'nin tipi:\", type(b))","89787f9b":"a = 5\nb = 6\nprint(a+b)","6f646b24":"a = 5\nb = 3\n\nprint(\"a + b =\", a + b)\nprint(\"a - b =\", a - b)\nprint(\"a * b =\", a * b)\nprint(\"a \/ b =\", a \/ b)\nprint(\"a % b =\", a % b)\nprint(\"a ** b =\", a ** b)","64cbfadb":"a = 5\nb = 7\n\na += b # a = a + b\nb **= 2 # b = b**2\n\nprint(a)\nprint(b)","086a6cb0":"a = 5\nb = 5\n\nprint(a == b) # a b'ye e\u015fittir.\nprint(a >= b) # a b'ye e\u015fittir veya b\u00fcy\u00fckt\u00fcr.\nprint(a != b) # a b'den farkl\u0131d\u0131r.","393fd351":"a = 6\nb = 6\nc = 2\nprint(a == b or c == 5)\nprint(a == b and c == 3)","d0ed3f88":"print(\"alp\" in \"alpha\")\nprint(\"b\" in \"alpha\")","58113dbb":"liste = [\"Alpha\", \"Gamma\", \"Delta\"]\nprint(liste)","4469896c":"print(liste[0])","0f7e5480":"liste[0] = \"Omega\"\nprint(liste)","2c8a0d95":"print(len(liste))","4c604c56":"liste.append(\"Alpha\")\nprint(liste)","ddda92c5":"liste.insert(2, \"Epsilon\")\nprint(liste)","e59bc3b0":"liste.remove(\"Delta\")\nprint(liste)","b11b044f":"liste.sort()\nprint(liste)","a0837e50":"print(liste)\nprint(liste[0:2])","da7d1bd8":"print(liste[1:])","8bac5de9":"liste.append(\"Theta\")\nprint(liste)\nprint(liste[1:5:2])","b73ab610":"a = \"Hello, World!\"\nprint(type(a))\nprint(a[0])\nprint(len(a))","8dbacf7d":"print(a.lower())","cfbc012e":"print(a.replace('World', 'Sekai'))","916c298e":"print(a[0:9])\nprint(a[2:11:3])","54176bc1":"part1, part2 = a.split(',')\nprint(part1)\nprint(part2)","72a0b0de":"print(a.split('o'))\nx, y, z = a.split('o')\nprint(x)\nprint(y)\nprint(z)","da67d7d8":"var = \"Narita\"\nprint(\"Buras\u0131 \"+var+\" \u015fehridir.\")","0615a68e":"tupleA = (\"Alpha\", \"Bravo\", \"Charlie\")\nprint(tupleA)","ff73c0d2":"print(tupleA[1])","f571e6be":"k\u00fcme = {\"Quadra\", \"Double\", \"Triple\"}\nprint(k\u00fcme)","e6217954":"k\u00fcme.add(\"Hexa\")\nprint(k\u00fcme)","3243a4b5":"s\u00f6zl\u00fck = {\n    \"Isim\": \"Otostop\u00e7unun Galaksi Rehberi\",\n    \"Yazar\": \"Douglas Adams\",\n    \"Dil\": \"T\u00fcrk\u00e7e\"\n}\nprint(s\u00f6zl\u00fck[\"Dil\"])","d107c8c8":"s\u00f6zl\u00fck[\"Dil\"] = \"Almanca\"\nprint(s\u00f6zl\u00fck)","5e8873b1":"s\u00f6zl\u00fck[\"T\u00fcr\"] = \"Bilim Kurgu\"\nprint(s\u00f6zl\u00fck)","693f46bd":"ya\u011fmur = 0\n\nif (ya\u011fmur == 1):\n    perde = 1\n    lamba = \"Yar\u0131m g\u00fc\u00e7\"\n    print(\"Ya\u011fmur ya\u011f\u0131yor\")\n    \nelse:\n    print(\"Ya\u011fmur ya\u011fm\u0131yor\")","97f0e69d":"Elektrik = \"Yok\"\nBenzin = \"Var\"\n\nif Elektrik == \"Yok\" and Benzin == \"Var\":\n    Jenerat\u00f6rler = \"A\u00e7\u0131k\"\n    print(\"Jenerat\u00f6rler \u00e7al\u0131\u015ft\u0131r\u0131l\u0131yor.\")","d05f4466":"\u00e7al\u0131\u015fma_modu = \"Yar\u0131 Otomatik\"\n\nif \u00e7al\u0131\u015fma_modu == \"Tam Otomatik\":\n    print(\"Sistem Tam Otomatik Modda\")\nelif \u00e7al\u0131\u015fma_modu == \"Yar\u0131 Otomatik\":\n    print(\"Sistem Yar\u0131 Otomatik Modda\")\nelse:\n    print(\"Sistem Manuel Modda\")","d5c37a24":"\u00e7al\u0131\u015fma_modu = \"Yar\u0131 Otomatik\"\n\nif \u00e7al\u0131\u015fma_modu == \"Tam Otomatik\":\n    print(\"Sistem Tam Otomatik Modda\")\n    if \u00e7al\u0131\u015fma_modu == \"Yar\u0131 Otomatik\":\n        print(\"Sistem Yar\u0131 Otomatik Modda\")\nelse:\n    print(\"Sistem Manuel Modda\")","8f996288":"\u00e7al\u0131\u015fma_modu = \"Yar\u0131 Otomatik\"\n\nif \"Otomatik\" in \u00e7al\u0131\u015fma_modu:\n    if \u00e7al\u0131\u015fma_modu == \"Tam Otomatik\":\n        print(\"Sistem Tam Otomatik Modda\")\n    if \u00e7al\u0131\u015fma_modu == \"Yar\u0131 Otomatik\":\n        print(\"Sistem Yar\u0131 Otomatik Modda\")\nelse:\n    print(\"Sistem Manuel Modda\")","2e288a15":"saya\u00e7 = 0\n\nwhile (saya\u00e7 < 3):\n    print(saya\u00e7)\n    saya\u00e7 = saya\u00e7 + 1","dc659127":"saya\u00e7 = 0\n\nwhile saya\u00e7 < 10:\n    if saya\u00e7 % 2 == 0:\n        print(saya\u00e7)\n    saya\u00e7 = saya\u00e7 + 1","2829dfa1":"print(list(range(10)))","9e69c967":"print(range(10))\nprint(type(range(10)))","5deafad2":"for i in range(3):\n    print(i)","d38d2622":"print(list(range(6,14,3)))","ca6590e0":"liste = list(range(4))\n\nprint(liste)\n\nfor i in liste:\n    print(i)","6e7e0549":"liste = [\"Uniform\", \"Delta\", \"Sierra\", \"Oscar\"]\n\nfor i in liste:\n    print(\"--> \"+i)","b63f0434":"print(liste)\nprint(len(liste))\nprint(range(len(liste)))\nprint(\"-------------------\")\n\nfor i in range(len(liste)):\n    print(i)","e421335a":"for index, i in enumerate(liste):\n    print(\"index =\", index, \"\/ iterator =\", i)","0e4ecea6":"for i in range(5):\n    if i == 3:\n        break\n    print(i)\n","fa2b6aa1":"for i in range(5):\n    if i == 3:\n        continue\n    print(i)\n","87dd3ba1":"def kare_alan_fonksiyon(sayi):\n    karesi = sayi * sayi\n    return karesi\n","10d589d9":"a = 7\nsonu\u00e7 = kare_alan_fonksiyon(a)\n\nprint(sonu\u00e7)","976ae189":"print(kare_alan_fonksiyon(11))","ca577e14":"def b\u00f6lme(sayiA, sayiB):\n    \n    if sayiB == 0:\n        print(\"S\u0131f\u0131r ile b\u00f6l\u00fcnemez.\")\n        return 0, 0\n    \n    b\u00f6l\u00fcm = int(sayiA \/ sayiB)\n    kalan = sayiA % sayiB\n    \n    return b\u00f6l\u00fcm, kalan","8258569e":"print(b\u00f6lme(17, 5))","21dab659":"b\u00f6l\u00fcm, kalan = b\u00f6lme(21, 10)\nprint(\"B\u00f6l\u00fcm =\", b\u00f6l\u00fcm, \"Kalan =\", kalan)","abd6351e":"b\u00f6l\u00fcm, kalan = b\u00f6lme(6, 0)\nprint(\"B\u00f6l\u00fcm =\", b\u00f6l\u00fcm, \"Kalan =\", kalan)","4d324974":"mod = lambda sayi1, sayi2 : sayi1 % sayi2\nprint(mod(11, 8))","5989f52b":"liste = [1, 2, 3, 4, 5]\nkareler = []\nfor i in liste:\n    kareler.append(i**2)\n    \nprint(kareler)","265aa5ab":"print(list(map(lambda x: x**2, list(range(1,6)))))","2f38e98e":"import math\n\nprint(math.sin(math.radians(30)))","830ad529":"!pip install colorama","e1cb43d3":"liste = list(range(100))\n\nistenen_liste = []\n\nfor i in liste:\n    if i % 2 != 0:\n        istenen_liste.append(i**2)\n\nprint(istenen_liste)","6d0f079b":"liste = list(range(100))\n\nprint([i**2 for i in liste if i % 2 != 0])\n\n# Tek Sat\u0131rda = print([i**2 for i in list(range(100)) if i % 2 != 0])","00c359fa":"import os\n\nos.listdir(\"..\/input\/\") ","fcc2cd3a":"os.mkdir(\".\/test\")\nos.listdir(\".\")","4c1b75bd":"os.rmdir(\".\/test\")\nos.listdir(\".\")","c8dee57f":"## **1-Giri\u015f** [^](#0) <a id=\"1\"><\/a> <br>\nSiber G\u00fcvenlikten Yapay Zeka'ya bir \u00e7ok alanda Python'u kullan\u0131yoruz. Gelin daha fazla bakal\u0131m.\n\n### **a) Python Nedir?** [^](#0) <a id=\"2\"><\/a> <br>\nPython genel ama\u00e7l\u0131 bir yaz\u0131l\u0131m dilidir t\u0131pk\u0131 Java ve C++ gibi ama bu dillere g\u00f6re yazmas\u0131 daha basittir ve bu i\u015fe yeni ba\u015flayacak olanlar i\u00e7in daha kolayd\u0131r. C++'\u0131n aksine Python kodlar\u0131 derlenmez yorumlan\u0131r. C++ kodunu derledikten sonra i\u015fletim sistemine g\u00f6re .exe ya da .elf dosyas\u0131 elde ederiz daha sonra bu dosyalar\u0131 \u00e7al\u0131\u015ft\u0131r\u0131r\u0131z. Python'da ise biz Enter tu\u015funa bast\u0131\u011f\u0131m\u0131z anda ya Run butonuna t\u0131klad\u0131\u011f\u0131m\u0131z anda kodlar \u00e7al\u0131\u015ft\u0131r\u0131l\u0131r. Herhangi bir .exe dosyas\u0131 yoktur.\n\n### **b) Neden Python?** [^](#0) <a id=\"3\"><\/a> <br>\nPython derlenmez yorumlan\u0131r ve C++ ya da Java'dan daha yava\u015f \u00e7al\u0131\u015f\u0131r ancak daha kolayd\u0131r. A\u015fa\u011f\u0131da bir ka\u015f\u0131la\u015ft\u0131rma tablosu mevcut.\n\n|               **C++**              |               **Python**               |\n|:----------------------------------:|:--------------------------------------:|\n|                H\u0131zl\u0131                |                  Yava\u015f                  |\n|                Zor                |                  Kolay                  |\n|     K\u00fct\u00fcphanelere Eri\u015fim Zor     |        K\u00fct\u00fcphanelere Eri\u015fim Kolay        |\n| Derlenir ve .exe Dosyas\u0131 Olu\u015fur |      Yorumlan\u0131r ve .exe\/.elf Dosyas\u0131 Yoktur.        |\n| Topluluk Deste\u011fi Azd\u0131r | Bilimsel Alanlarda G\u00fc\u00e7l\u00fc Topluluk Deste\u011fi Vard\u0131r |\n\n**-**\n\n\u015eimdi de Syntax'lar\u0131na bakal\u0131m. A\u015fa\u011f\u0131da ki iki kod par\u00e7as\u0131n\u0131nda amac\u0131 ekrana \"Hello, World!\" bast\u0131rmak.\n\n**C++**\n```c++\n#include <iostream>\nusing namespace std;\n\nint main() \n{\n    cout << \"Hello, World!\";\n    return 0;\n}\n```\n\n**Python**\n```python\nprint (\"Hello, World!\")\n```\n\nG\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi Python ile dahaz az kod daha \u00e7ok i\u015f yapabiliyoruz.\n\n### **c) Kaggle Hakk\u0131nda** [^](#0) <a id=\"4\"><\/a> <br>\nDaha \u00f6ncede belirtti\u011fim \u00fczere Python yorumlan\u0131r yani bir yorumlay\u0131c\u0131 gerekir. Kaggle platformu sayesinde hi\u00e7 bir \u015feyi bilgisayar\u0131m\u0131za kurmadan online ortamda yine Kaggle'\u0131n bize ay\u0131rd\u0131\u011f\u0131 CPU ve RAM'i kullanarak kodlar\u0131m\u0131z\u0131 \u00e7al\u0131\u015ft\u0131rabiliyoruz. Ayr\u0131ca bir \u00e7ok ML k\u00fct\u00fcphanesi ve veriseti haz\u0131r olarak geliyor ve indirmemize gerek kalm\u0131yor. Son olarak Kaggle'da bir notebook a\u00e7t\u0131ktan sonra CPU ve RAM durumunu gri bardan takip edebiliyoruz.\n\nE\u011fer Kaggle notebook \u00fczerinde bir kod \u00e7al\u0131\u015ft\u0131r\u0131rsak ve \u015fayet kodun bir \u00e7\u0131kt\u0131s\u0131 yani output'u varsa bu kodun hemen alt\u0131nda siyah bir kutunun i\u00e7inde g\u00f6z\u00fckecektir.\n","518a6551":"\u0130lk bak\u0131\u015fta g\u00f6ze \u00e7arpan yazd\u0131\u011f\u0131m\u0131z if \u015fart\u0131 oluyor. B\u00f6lme i\u015flemi yapt\u0131\u011f\u0131m\u0131z i\u00e7in e\u011fer bu duruma dikkat etmeseydik yorumlay\u0131c\u0131 sayiB = 0 durumu i\u00e7in hata mesaj\u0131 basacak ve \u00e7al\u0131\u015fmay\u0131 durduracakt\u0131. Onun yerine biz orada 0, 0 d\u00f6nd\u00fcrerek fonksiyonu sonland\u0131r\u0131yoruz.\n\nB\u00f6l\u00fcm'\u00fc hesaplarken **int()** kullanmam\u0131z\u0131n sebebi ise b\u00f6l\u00fcmden sonra elde edece\u011fimiz say\u0131 duruma g\u00f6re **float** olma durumu y\u00fcz\u00fcndendi. B\u00f6l\u00fcm\u00fcn ondal\u0131kl\u0131 bir say\u0131 olmamas\u0131 gerekiyor. **int()** kullanarak say\u0131n\u0131n sadece tam k\u0131sm\u0131n\u0131 alm\u0131\u015f oluyoruz.\n\n\u015eimdi deneme yapma zaman\u0131.","90750796":"## **2-\u0130lk Ad\u0131mlar** [^](#0) <a id=\"6\"><\/a> <br>\nKurulumdan sonra art\u0131k kodlar\u0131m\u0131z\u0131 yazmaya ba\u015flayabiliriz.\n\n### **a) Print Komutu** [^](#0) <a id=\"7\"><\/a> <br>\n\u00d6ncelikle Python iki farkl\u0131 temel s\u00fcr\u00fcmden olu\u015fuyor. Python 2.x.x ve Python 3.x.x . Bu iki s\u00fcr\u00fcmde ilk dikkat \u00e7eken farkl\u0131l\u0131klardan biri print komutu. Python 2' de print komutunu kullan\u0131rken parantezler kullanmay\u0131z \u00e7\u00fcnk\u00fc Python 2' de print fonksiyon de\u011fil.\n\nPython 2' ye sa\u011flanan destek bir y\u0131l i\u00e7inde kesilece\u011fi i\u00e7in Python 3 kullanaca\u011f\u0131z.","a654c572":"### **b) Anonim(Lambda) Fonksiyonlar** [^](#0) <a id=\"23\"><\/a> <br>\nLambda fonksiyonlar\u0131n di\u011fer fonksiyonlardan tek fark\u0131 tek sat\u0131rda yaz\u0131labilne basit fonksiyonlar olmas\u0131.","d49c3a14":"### **b) Strings** [^](#0) <a id=\"12\"><\/a> <br>\nListelerin \u00f6zel bir hali olan Strings asl\u0131nda karakterlerden olu\u015fan kelimeleri hatta c\u00fcmleleri depolayabilmek i\u00e7in kullan\u0131lan bir veri yap\u0131s\u0131. C++' da bulunan Strings'lere benzer bir yap\u0131. Listelerin aksine k\u00f6\u015feli parantez ile t\u0131rnak i\u015faretleri ile tan\u0131mlad\u0131\u011f\u0131m\u0131z Stringler de listelerin \u00e7o\u011fu fonksyionunu kullanabiliyoruz.","5ad87901":"G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi \u00e7\u0131kt\u0131lar farkl\u0131 oldu. elif yap\u0131s\u0131 ile i\u00e7 i\u00e7e kullan\u0131lan if ifadeleri aras\u0131nda fark var. Ancak elif kullanmak zoruda da de\u011filiz.","40aa29fd":"### **e) Dictionaries** [^](#0) <a id=\"15\"><\/a> <br>\nDictionaries yani s\u00f6zl\u00fckler bu ba\u015fl\u0131k alt\u0131nda \u015fuana kadar g\u00f6rd\u00fc\u011f\u00fcm\u00fcz di\u011fer veri tiplerinden biraz daha farkl\u0131 ve \u00f6zel bir veri tipini olu\u015fturuyorlar. De\u011fi\u015ftirilebilirler ve s\u00fcsl\u00fc parantezler ile ifade edilirler. Di\u011fer t\u00fcrlerden farkl\u0131 olarak key ve value yani anahtar ve de\u011fer sistemi ile \u00e7al\u0131\u015f\u0131rlar. Index numaralar\u0131ndan ziyade de\u011ferlere anahtarlar yard\u0131m\u0131 ile eri\u015firiz.","399b3d54":"1. index ile ba\u015fla son elemana kadar git demek i\u00e7in ise \u015f\u00f6yle yapabiliyoruz.","bb9b16b3":"## **7-Paketler** [^](#0) <a id=\"24\"><\/a> <br>\nPython ile sorun \u00e7\u00f6zerken \u00e7o\u011fu zaman bir \u00e7ok \u00f6zel algoritmaya ya da fonksyiona ihtiya\u00e7 duyar\u0131z. \u00d6rne\u011fin sin\u00fcs fonksiyonu gibi. Bu fonksiyonlar\u0131n hepsini teker teker yazamayaca\u011f\u0131m\u0131z i\u00e7in yani zaten icat edilmi\u015f bir \u015feyi tekrar icat etmemek ve zaman kazanmak i\u00e7in d\u0131\u015far\u0131dan haz\u0131r python kodlar\u0131n\u0131 kendi kodumuza dahil edebiliriz. Bu haz\u0131r kod ya da fonksyion paketlerine mod\u00fcl diyoruz. Paketler ise mod\u00fcllerin bir araya gelmesi ile olu\u015fuyorlar.\n\n### **a) Paketlerin Kullan\u0131m\u0131** [^](#0) <a id=\"25\"><\/a> <br>\nElimizde mevcut olan mod\u00fclleri kullanmak i\u00e7in yapmam\u0131z gereken tek \u015fey **import** komutu ile onlar\u0131 kodlar\u0131m\u0131za dahil etmek. Bu C++' da ki **include** komutuna benziyor.\n\n\u00d6rne\u011fin sin\u00fcs fonksiyonu Python' da [math](https:\/\/docs.python.org\/3\/library\/math.html) paketi ile haz\u0131r geliyor. Dahil etmek i\u00e7in tek yapmam\u0131z gereken \u015fey \u015fu:","dc3ca3d8":"Son olarak belirli bir \u00f6r\u00fcnt\u00fcde eleman atlayarakda listede ki elemanlara eri\u015febiliriz. Bunun i\u00e7in bir adet **:** daha gerekmekte. \u0130kinci **:**' dan sonra atlama say\u0131s\u0131n\u0131 belirtebiliriz. A\u015fa\u011f\u0131da ki \u00f6rnekte g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere 1. index ile ba\u015flan\u0131p 5. indexe kadar elemanlar d\u00f6nd\u00fcr\u00fclm\u00fc\u015f ancak liste 2\u015fer 2\u015fer gezlmi\u015f.","9606243e":"Biraz daha karma\u015f\u0131k \u00f6rnekler yapal\u0131m. Bu sefer verilen iki say\u0131y\u0131 b\u00f6len bir fonksiyon yazal\u0131m ve iki farkl\u0131 de\u011fer d\u00f6nd\u00fcrs\u00fcn. \u0130lk de\u011fer b\u00f6l\u00fcm di\u011feri ise kalan olsun.","9272b588":"Son olarak \u00fcyelik operat\u00f6rleri ise yine ileride g\u00f6rece\u011fimiz **list** ya da **tuple** konusu ile ilgili. K\u0131saca anlatmak gerekirse list birden fazla de\u011fi\u015fkenin tek bir de\u011fi\u015fken i\u00e7erisinde tutulmas\u0131 oluyor. \u00d6rne\u011fin string olarak bahsetti\u011fimiz veri tip asl\u0131nda karakter de\u011fi\u015fkenlerinin olu\u015fturdu\u011fu bir liste. \u00d6rne\u011fe bakal\u0131m.","5ea95696":"Peki neden *radians* ' \u0131 kulland\u0131k? \u00c7\u00fcnk\u00fc e\u011fer d\u00f6k\u00fcmantasyonu okursak **math.sin()** fonksiyonu a\u00e7\u0131 birimi olarak radyan kabul ediyor. Radyan'\u0131 dereceye \u00e7evirmek i\u00e7in **radians()** fonksiyonunu kulland\u0131k.\n\n### **b) Paket Bulmak ve \u0130ndirmek** [^](#0) <a id=\"26\"><\/a> <br>\nPython' nun en g\u00fczel yan\u0131 internette her t\u00fcrl\u00fc sorunu \u00e7\u00f6zmek i\u00e7in bir \u00e7ok paketin bulunuyor olmas\u0131. Baz\u0131lar\u0131 indirdi\u011finiz python s\u00fcr\u00fcm\u00fcne ya da yard\u0131mc\u0131 sistemlere (Anaconda) gibi haz\u0131r gelirken baz\u0131lar\u0131n\u0131 indirmemiz gerekiyor. Burada devreye [Pip](https:\/\/pypi.org\/project\/pip\/) yani Package Installer for Python giriyor. Bu g\u00fczel ara\u00e7 sayesinde istedi\u011fimiz paketleri indirebiliyoruz. Peki *Pip* arac\u0131n\u0131 nas\u0131l kuraca\u011f\u0131z?\n\n**Linux Da\u011f\u0131t\u0131mlarda**\n* Debian Tabanl\u0131 Da\u011f\u0131t\u0131mlar\n```bash\nsudo apt update\nsudo apt install python3-pip\n```\n* Red Hat Tabanl\u0131 Da\u011f\u0131t\u0131mlar\n```bash\nsudo yum install python34-setuptools\nsudo easy_install pip\n```\n* Arch Tabanl\u0131 Da\u011f\u0131t\u0131mlar\n```bash\nsudo pacman -S python-pip\n```\n\n**Windows Sistemlerde**\n* Anaconda Prompt\n\nAnaconda indirdikten sonra ba\u015flat men\u00fcs\u00fcnde **Anaconda Prompt** isimli CLI sistemin gelmi\u015f olmas\u0131 gerekiyor. Bu terminal benzeri sistem \u00fczerinde Pip y\u00fckl\u00fc halde gelmekte.\n\nPeki Pip arac\u0131n\u0131 kurduk \u015fimdi nas\u0131l istedi\u011fimiz paketi y\u00fckleyece\u011fiz? \u00d6nce bir paket belirleyelim. \u00d6rne\u011fin print komutunun \u00e7\u0131kt\u0131s\u0131n\u0131 renkli bast\u0131rmak istiyor olal\u0131m. \u00d6nce k\u00fc\u00e7\u00fck bir google ara\u015ft\u0131rmas\u0131 yap\u0131yoruz. Ben [\u015fu](https:\/\/stackoverflow.com\/a\/45528334) sayfay\u0131 buldum ve burada **colorama** isimli bir yard\u0131mc\u0131 bir paket kullan\u0131lm\u0131\u015f. \u015eimdi yapmam\u0131z gereken colorama isimli paketi pypi yani Python Paketlerini indirdi\u011fimiz siteden bulmak. Bu site bir organizasyon ve sizde kendi paketleriniz yazd\u0131ktan sonra burada di\u011fer insanlar\u0131n ula\u015fabilmesi i\u00e7in yay\u0131nlayabilirsiniz. [colorama](https:\/\/pypi.org\/project\/colorama\/)' y\u0131 pypi' de bulduktan sonra yukar\u0131da pip ile indirebilmek i\u00e7in gereken kodu g\u00f6r\u00fcyor olmal\u0131s\u0131n\u0131z:\n\n```bash\npip install colorama\n```\nbu kod ile pip kullanarak paketi indirebiliriz. Art\u0131k tek yapmam\u0131z gereken *import colorama* yazmak ve kullanmak. Yine pypi \u00fczerinde nas\u0131l kullanabilece\u011finizi bulacaks\u0131n\u0131z.\n\nKaggle \u00fczerinde \u00f6rnek g\u00f6stermek gerekirse:","5894b661":"G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi bu \u015fekilde de sorunu \u00e7\u00f6zm\u00fc\u015f olduk.\n\n## **5-D\u00f6ng\u00fcler** [^](#0) <a id=\"18\"><\/a> <br>\n\u015eartl\u0131 yap\u0131lar konusundan sonra en \u00f6nemli konulardan biride d\u00f6ng\u00fcler oluyor. Python' da farketti\u011finiz \u00fczere bir kod bir kere \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131ktan sonra tekrar \u00e7al\u0131\u015ft\u0131r\u0131lm\u0131yor \u00e7\u00fcnk\u00fc yorumlay\u0131c\u0131 yukar\u0131dan a\u015fa\u011f\u0131ya do\u011fru tek tek sat\u0131rlar\u0131 yorumluyor. Peki e\u011fer bir blo\u011fu tekrar tekrar \u00e7al\u0131\u015ft\u0131rmam\u0131z gerekirse ne yapaca\u011f\u0131z? elbette her seferinde ayn\u0131 kodu tekrar tekrar yazmam\u0131za gerek yok bu noktada d\u00f6ng\u00fcler yard\u0131m\u0131za geliyor.\n\n### **a) While D\u00f6g\u00fcs\u00fc** [^](#0) <a id=\"19\"><\/a> <br>\nWhile d\u00f6ng\u00fcs\u00fc, d\u00f6g\u00fcler aras\u0131ndan en basiti. If yap\u0131s\u0131nda oldu\u011fu gibi kendine ait bir kod blo\u011funa ve bir ifadeye sahip. Her seferinde ifadenin **True** ya da **False** olmas\u0131na bak\u0131yor ve e\u011fer **True** ise kendi kod blo\u011funu tekrar \u00e7al\u0131\u015ft\u0131r\u0131yor. Kod blo\u011fu bitince While tekrar ifadeye bak\u0131yor ve bu d\u00f6ng\u00fc sonsuza kadar gidiyor ta ki bir \u015fekilde ifade **False** olana kadar. \u0130fade **False** oldu\u011funda ise d\u00f6ng\u00fc duruyor ve kod While blo\u011funun alt\u0131ndan devam ediyor.","78840bf3":"Yukar\u0131da g\u00f6rd\u00fc\u011f\u00fcn\u00fcz yap\u0131da iki adet kod blopu bulunmakta. Python'da bloklar\u0131 ifade etmek i\u00e7in **indent** ismi verilen bo\u015fluklardan ve **:**' dan yararlan\u0131yoruz. **:** ile bloklar\u0131n ba\u015flang\u0131c\u0131n\u0131 ifade ediyoruz. Arka arkaya gelen sat\u0131rlar\u0131n ba\u015flar\u0131nda ayn\u0131 miktarda bo\u015fluk varsa ayn\u0131 blok i\u00e7erisinde oluyorlar ta ki bir sonraki sat\u0131r\u0131n bo\u015fluk say\u0131s\u0131 de\u011fi\u015fene kadar. Yukar\u0131da ilk blok \u00fc\u00e7 ikinci blok ise tek sat\u0131rdan olu\u015fuyor.\n\nE\u011fer if i\u00e7ine yazd\u0131\u011f\u0131m\u0131z \u015fart sonucunda **True** oluyor ise o blok \u00e7al\u0131\u015ft\u0131r\u0131l\u0131yor. E\u011fer blok **False** ve else ifadesi varsa else ifadesinin blo\u011fu \u00e7al\u0131\u015ft\u0131r\u0131l\u0131yor. else ifadesi yoksa hi\u00e7 bir kod \u00e7al\u0131\u015ft\u0131r\u0131lmadan ge\u00e7iliyor.\n\nDi\u011fer operat\u00f6rleri kullanarak bir ka\u00e7 \u00f6rnek daha yapal\u0131m.\n\nBu sefer **and** operat\u00f6r\u00fcn\u00fc kullanarak iki ifadeyi birle\u015ftirelim. Ancak mant\u0131k tablosuna bir g\u00f6z atmakta fayda var. Unutmadan **True** yerine **1** ve **False** yerine **0** kullan\u0131lm\u0131\u015f.\n\n| A | B | A and B |\n|---|---|---------|\n| 0 | 0 | 0       |\n| 0 | 1 | 0       |\n| 1 | 0 | 0       |\n| 1 | 1 | 1       |\n\n| A | B | A or  B |\n|---|---|---------|\n| 0 | 0 | 0       |\n| 0 | 1 | 1       |\n| 1 | 0 | 1       |\n| 1 | 1 | 1       |\n\n| A | not A |\n|---|-------|\n| 0 | 1     |\n| 1 | 0     |","3a9c71c7":"Bir ka\u00e7 operat\u00f6r d\u0131\u015f\u0131nda Python'da ki t\u00fcm operat\u00f6rlerden bahsettik. Bu operat\u00f6rler ML kullan\u0131rken ba\u015flang\u0131\u00e7 i\u00e7in yeterli olacakt\u0131r.\n\n## **3-\u00c7ok De\u011fi\u015fkenli Yap\u0131lar** [^](#0) <a id=\"10\"><\/a> <br>\nBu b\u00f6l\u00fcmde i\u00e7erisinde birden fazla de\u011fi\u015fken i\u00e7eren \u00f6zel de\u011fi\u015fken yap\u0131lar\u0131na g\u00f6z ataca\u011f\u0131z.\n\n### **a) Lists** [^](#0) <a id=\"11\"><\/a> <br>\nLists yani listeler \u00e7ok de\u011fi\u015fken tutan yap\u0131lardan en temelidir. C++' da array yap\u0131lar\u0131na benzetilebilir. K\u00f6\u015feli parantezler kullan\u0131larak tan\u0131mlan\u0131r. Liste'lerin kendilerine \u00f6zel fonksyionlar\u0131 vard\u0131r.","ce83644c":"Stringler \u00fczerinde **replace()** metodu ile belirli bir karakteri ya da karakterleri ba\u015fka bir karakter ya da karakterler ile de\u011fi\u015ftirebiliyoruz.","95fc5c90":"\u015eimdiye kadar \u00f6\u011frendiklerimiz ile bu \u015fekilde bir d\u00f6ng\u00fc kodlayarak sorunu \u00e7\u00f6zm\u00fc\u015f olduk. Lambda fonkisyonlar ile **map()**' \u0131 birle\u015ftirerek burda ki her \u015feyi tek sat\u0131rda yazabiliriz.","8b5c870c":"Burda c de\u011fi\u015fkenini herhangi bir \u015feye d\u00f6n\u00fc\u015ft\u00fcrmeye \u00e7al\u0131\u015fmad\u0131k \u00e7\u00fcnk\u00fc string'i int'e d\u00f6n\u00fc\u015ft\u00fcremeyiz.\n\n### **c) Operat\u00f6rler** [^](#0) <a id=\"9\"><\/a> <br>\nPython' da de\u011fi\u015fkenleri kullanarak matematiksel i\u015flemler yapabiliriz \u00f6rne\u011fin:","9ee7f817":"## The End\nBuraya kadar okudu\u011funuz i\u00e7in te\u015fekk\u00fcrler. Yanl\u0131\u015f g\u00f6rd\u00fc\u011f\u00fcn\u00fcz yerleri ya da \u00f6nerilerinizi l\u00fctfen yorum at\u0131n. Sonraki part'lar\u0131 yazd\u0131ktan sonra linklerini buraya koyaca\u011f\u0131m.","c035b4ea":"burada **+** operat\u00f6r\u00fcn\u00fc kulland\u0131k. Peki ba\u015fka hangi operat\u00f6rler var? \u00d6ncelikle listeye bakal\u0131m.\n\n| Tipi          | Operat\u00f6r | \u0130smi          |\n|---------------|----------|---------------|\n| Aritmetik     | +        | Toplama       |\n| Aritmetik     | -        | \u00c7\u0131kartma      |\n| Aritmetik     | *        | \u00c7arpma        |\n| Aritmetik     | \/        | B\u00f6lme         |\n| Aritmetik     | %        | Mod\u00fclasyon    |\n| Aritmetik     | **       | \u00dcs            |\n| Atama         | =        |               |\n| Kar\u015f\u0131la\u015ft\u0131rma | ==       | E\u015fittir       |\n| Kar\u015f\u0131la\u015ft\u0131rma | !=       | E\u015fit De\u011fildir |\n| Kar\u015f\u0131la\u015ft\u0131rma | >        | B\u00fcy\u00fckt\u00fcr      |\n| Kar\u015f\u0131la\u015ft\u0131rma | <        | K\u00fc\u00e7\u00fckt\u00fcr      |\n| Kar\u015f\u0131la\u015ft\u0131rma | >=       | B\u00fcy\u00fck e\u015fittir |\n| Kar\u015f\u0131la\u015ft\u0131rma | <=       | K\u00fc\u00e7\u00fck e\u015fittir |\n| Mant\u0131ksal |  and      | Ve          |\n| Mant\u0131ksal |  or       | Veya        |\n| Mant\u0131ksal |  not        | De\u011fil       |\n| \u00dcye       | in       | \u00dcyesi       |\n| \u00dcye       | not in   | \u00dcyesi De\u011fil |\n\n**-**\n\nAritmetik operat\u00f6rler ile ba\u015flayal\u0131m bu opreat\u00f6rler ile temel matematiksel i\u015flemleri yapabiliriz.","15f6271d":"Kar\u015f\u0131la\u015ft\u0131rma operat\u00f6rleri ise say\u0131lar\u0131 birbirleri ile kar\u015f\u0131la\u015ft\u0131rmak i\u00e7in kullan\u0131l\u0131yor. Sonu\u00e7 olarak ise di\u011fer operat\u00f6rlerden farkl\u0131 olarak **True** ya da **False** d\u00f6nd\u00fcr\u00fcyorlar.","4a9b7661":"<img src=\"https:\/\/www.python.org\/static\/community_logos\/python-logo-master-v3-TM.png\" width=\"500\" height=\"500\"\/>\n\n# **ML El Kitaplar\u0131 Serisi 1 - Temel Python** <a id=\"0\"><\/a> <br>\n[English](https:\/\/www.kaggle.com\/behcetsenturk\/python-yet-another-ml-handbook-part-1)\n\n## ML E\u011fitim Serisine Ho\u015fgeldiniz.\n\n**Biliyorum bir \u00e7ok yerde bu konu ile ilgili bir \u00e7ok kaynak var ama hem kendime not olmas\u0131 hemde \u00e7e\u015fitlili\u011fi artt\u0131rmak amac\u0131 ile bende yazmaya karar verdim. Sonraki b\u00f6l\u00fcmleri yazd\u0131\u011f\u0131m zaman linklerini buraya koyaca\u011f\u0131m.** \n\nAyr\u0131ca bu alanda profesyonel olmad\u0131\u011f\u0131m i\u00e7in baz\u0131 hatalar olabilir elimden geldi\u011fince bildiklerimi anlatmaya \u00e7al\u0131\u015ft\u0131m e\u011fer bir hata g\u00f6r\u00fcrseniz l\u00fctfen yorumlarda belirtin. Okudu\u011funuz i\u00e7in te\u015fekk\u00fcrler.\n\n#### **\u0130\u00e7erik:**\n* 1-[Giri\u015f](#1)\n    * a-[Python Nedir?](#2)\n    * b-[Neden Python?](#3)\n    * c-[Kaggle Hakk\u0131nda](#4)\n    * d-[Python Kurulumu](#5)\n* 2-[\u0130lk Ad\u0131mlar](#6)\n    * a-[Print Komutu](#7)\n    * b-[De\u011fi\u015fkenler](#8)\n    * c-[Operat\u00f6rler](#9)\n* 3-[\u00c7ok De\u011fi\u015fkenli Yap\u0131lar](#10)\n    * a-[Lists](#11)\n    * b-[Strings](#12)\n    * c-[Tuples](#13)\n    * d-[Sets](#14)\n    * e-[Dictionaries](#15)\n* 4-[\u015eartl\u0131 Yap\u0131lar](#16)\n    * a-[If-Else](#17)\n* 5-[D\u00f6ng\u00fcler](#18)\n    * a-[While](#19)\n    * b-[For](#20)\n* 6-[Fonksiyonlar](#21)\n    * a-[Normal Fonksiyonlar](#22)\n    * b-[Anonim(Lambda) Fonksyionlar](#23)\n* 7-[Paketler](#24)\n    * a-[Paketler Kullan\u0131m\u0131](#25)\n    * b-[Paket Bulmak ve \u0130ndirmek](#26)\n* 8-[Di\u011fer Konular](#27)\n    * a-[List Comprehensions](#28)\n    * b-[OS Mod\u00fcl\u00fc](#29)\n","45da114a":"Yukar\u0131da da g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere *print* komutu \u00fc\u00e7 defa \u00e7al\u0131\u015fm\u0131\u015f oldu.\n\nPeki sizce altta ki kod ne i\u015fe yar\u0131yor tahmin edebilir misiniz?","b55c452d":"Peki a\u015fa\u011f\u0131da ki \u00f6rnek ve yukar\u0131da ki \u00f6rnek sizce ayn\u0131 m\u0131?","153e6b31":"Yapt\u0131\u011f\u0131m\u0131z \u015fey bir de\u011fi\u015fkene fonksiyonun d\u00f6n\u00fc\u015f de\u011ferini atamak oldu. Fonksiyon a = 7 i\u00e7in \u00e7al\u0131\u015ft\u0131 ve 49 say\u0131s\u0131n\u0131 d\u00f6nd\u00fcrd\u00fc. Sonra bu say\u0131y\u0131 sonu\u00e7 de\u011fi\u015fkenin i\u00e7ine koydu. Kare alma fonksiyonunu art\u0131k her yerden \u00e7a\u011f\u0131rabiliriz.","fe72d0c2":"Listeler daha fazla fonksiyona sahip olsada ML i\u00e7in bunlar i\u015fimize fazlas\u0131yla yeterli.\n\nListeleri bitirmeden \u00f6nce son olarak bakmam\u0131z gereken konu listeleri b\u00f6lmek. \u0130ndex numaralar\u0131 ile tek tek elemanlara eri\u015fti\u011fimiz gibi birden fazla elemanada eri\u015febiliriz.\n\nBunun i\u00e7in k\u00f6\u015feli parantezler i\u00e7erisinde ki lokasyon yap\u0131s\u0131na **:** ekliyoruz. A\u015fa\u011f\u0131da g\u00f6r\u00fcnen \u00f6rnekte 0. index ile ba\u015fla ve 2.index'e kadar(dahil de\u011fil) al(d\u00f6nd\u00fcr) denilmi\u015f.","d28eb0ff":"Son olarak Stringler ile **+** operat\u00f6r\u00fc ile stringleri birbirlerine ekleyebiliriz.","9f3c500d":"Mevcut de\u011fi\u015fkenlerinin veri tiplerini \u00f6\u011frenmek i\u00e7in **type()** fonksiyonunu kullanabiliriz ayr\u0131ca e\u011fer m\u00fcmk\u00fcn ise mu de\u011fi\u015flkenlerinin tiplerini de\u011fi\u015ftirebiliriz. Bu i\u015fleme casting diyoruz","706f980e":"**os.mkdir** ile dizin olu\u015fturabiliriz.","cd6a80b0":"Listenin istedi\u011fimiz herhangi bir yerine eleman eklemek i\u00e7in **insert()** fonksiyonunu kullanabiliriz.","d1b36371":"## **4-\u015eartl\u0131 Yap\u0131lar** [^](#0) <a id=\"16\"><\/a> <br>\nDaha \u00f6nce operat\u00f6rler konusunda aritmetik operat\u00f6rler d\u0131\u015f\u0131nda kalan di\u011fer operat\u00f6rler bize \u015fartl\u0131 ifadeler yani if else b\u00f6l\u00fcm\u00fcnde yaracak demi\u015ftim. Bu operat\u00f6rler sadece **True** ya da **False** d\u00f6nd\u00fcr\u00fcyordu.\n\n### **a) If Else Yap\u0131s\u0131** [^](#0) <a id=\"17\"><\/a> <br>\nPython ya da di\u011fer dillerde s\u0131kl\u0131kla kullan\u0131lan bu yap\u0131 sayesinde belirli durumlara g\u00f6re belirli kodlar\u0131 \u00e7al\u0131\u015ft\u0131rabiliyoruz. Mesela elinizde bir ya\u011fmur sens\u00f6r\u00fc var ve kod i\u00e7erisinde bulunan **ya\u011fmur** isimli bir de\u011fi\u015fkeni ya\u011fmur ya\u011f\u0131yorsa 1 ya\u011fm\u0131yorsa 0 yap\u0131yor. Ya\u011fmur ya\u011fd\u0131\u011f\u0131nda **perde** de\u011fi\u015fkenini 1 ve **lamba** de\u011fi\u015fkenini \"Yar\u0131m g\u00fc\u00e7\" yapmak istedi\u011finizi farz edelim. \u0130\u015fte bu durumlar i\u00e7in if yap\u0131s\u0131 imdad\u0131m\u0131za yeti\u015fiyor.","fa6c0ee5":"Stringleri listelerde oldu\u011fu gibi b\u00f6lebiliyoruz.","df4cd10d":"Listelerde ki gibi index numaralar\u0131 ile i\u00e7inde ki \u015feylere eri\u015febiliriz.","1a9a19dd":"Listeler ile kullanabilece\u011fimiz fonksiyonlara ge\u00e7ecek olursak ilk ba\u015flamam\u0131z gereken ve s\u0131k kullan\u0131lan **len()** fonksyionu olur. ","7cf7f467":"Eleman silmek i\u00e7in **remove()**' u kullanabiliriz.","99e53f73":"Son olarak s\u0131ralamak i\u00e7in **sort()**' u kullanabiliriz.","410f3001":"Not olarak de\u011fi\u015fken isimleri Python' da b\u00fcy\u00fck-k\u00fc\u00e7\u00fck harf duyarl\u0131d\u0131r.","0b5da88f":"Ba\u015fka bir \u00f6rnek yapal\u0131m. Bu sefer elif isimli yeni bir yap\u0131y\u0131 kullanal\u0131m. elif yap\u0131s\u0131 ile arka arkaya \u00fc\u00e7 ya da daha fazla \u015fart yazabiliyoruz.","ef3e8538":"if \u015fart\u0131n\u0131n \u00e7al\u0131\u015f\u0131p \u00e7al\u0131\u015fmad\u0131\u011f\u0131na bakal\u0131m.","91f9bc94":"Python'da bir objeye ait fonksiyonlar\u0131 \u00e7a\u011f\u0131rmak i\u00e7in objenin sonuna **.** koyar sonra fonksyion ismini yazar\u0131z. **len()**'i bu \u015fekilde kullanmad\u0131\u011f\u0131m\u0131zdan anla\u015f\u0131lacakt\u0131r ki **len()** listelere \u00f6zel fonksiyon de\u011fildir.\n\n**type()**, **len()** gibi ba\u015fka fonksiyonlara listeyi parametre olarak g\u00f6nderebiliriz. Parametre ve fonksyion konusuna ayr\u0131nt\u0131l\u0131 bakaca\u011f\u0131z.\n\nListelere ait fonksiyonlara bakacak olursa en \u00e7ok kullan\u0131lanlardan biri **append()** fonksiyonu olur. Append ile listenin sonuna eleman ekleyebiliriz.","1ca70cb8":"Stringlerin listelere ek olarak t\u00fcm elemanlar\u0131n\u0131 b\u00fcy\u00fck ya da k\u00fc\u00e7\u00fck harfe d\u00f6nd\u00fcrebilmemize olanak sa\u011flayan **lower()** ya da **upper()** gibi fonksiyonlar\u0131 bulunuyor.","7684a26e":"Stringleri ayr\u0131ca **split()** isimli \u00f6zel bir fonksyion ile belirli karakterlere g\u00f6rede b\u00f6lebiliyoruz. Bu \u00f6rnekte **,**' \u00fc kullanarak b\u00f6lece\u011fiz ve iki par\u00e7ay\u0131 iki farkl\u0131 de\u011fi\u015fkene atayaca\u011f\u0131z.","333be5dc":"Bu arada **#** ile ba\u015flayan sat\u0131rlar Python' da yorum sat\u0131rlar\u0131 olarak ge\u00e7er. Komut sat\u0131rlar\u0131n\u0131n normal kod \u00fczerine herhangi bir etkisi yoktur sadece kodu okuyacak olan insanlar i\u00e7in yaz\u0131l\u0131r ve yorumay\u0131c\u0131 yorum sat\u0131rlan\u0131r\u0131n\u0131 dikkate almaz.\n\nBirden fazla sat\u0131r\u0131 da tek seferde yorum haline getirebiliriz, bunun i\u00e7in bize alt\u0131 adet \u00e7ift t\u0131rnak gerekiyor. Ayr\u0131ca buna **Docstring** diyoruz ve d\u00f6k\u00fcmantasyon s\u0131ras\u0131nda kullan\u0131yoruz.","f1e40635":"Bu \u00f6rnekte map'\u0131n ilk parametresine direk fonksiyon kodlar\u0131n\u0131 yazm\u0131\u015f olduk. Lambda fonksiyon kullanmay\u0131p normal bir fonksiyonun isminide yazabilirdik.","d32adf84":"Peki b\u00f6yle bir durumda biz index'i istiyorsak ne yapaca\u011f\u0131z. Yani **i**' nin listenin eleman\u0131 de\u011filde index numaras\u0131 olmas\u0131n\u0131 istiyorsak? O zaman iki y\u00f6ntem var. \u0130lki **len()** kullanarak listesinin uzunlu\u011funu almak ve bunu **range()**' e vererek say\u0131lardan olu\u015fan bir liste elde etmek.","eda1f215":"Evet 0'dan 10'a kadar olan \u00e7ift say\u0131lar\u0131 bast\u0131ran bir kod yazd\u0131k. E\u011fer saya\u00e7'\u0131 artt\u0131rmasayd\u0131k d\u00f6ng\u00fc sonsuza kadar \u00e7al\u0131\u015facakt\u0131 \u00e7\u00fcnk\u00fc hi\u00e7 bir zaman *saya\u00e7 < 10* **False** olmayacakt\u0131.\n\n### **b) For D\u00f6g\u00fcs\u00fc** [^](#0) <a id=\"20\"><\/a> <br>\nWhile d\u00f6ng\u00fcs\u00fcnden farkl\u0131 olarak For d\u00f6ng\u00fcs\u00fcnde saya\u00e7 k\u0131sm\u0131n\u0131 manuel olarak artt\u0131rmam\u0131z gerekmiyor. Bu \u00f6zelli\u011fi ile di\u011fer dillerde ki For d\u00f6ng\u00fclerine benziyor olsada Python'da ki For d\u00f6ng\u00fcs\u00fcn\u00fcn olaya yakla\u015f\u0131m tarz\u0131 biraz farkl\u0131. Python'da For d\u00f6ng\u00fclerinin as\u0131l amac\u0131 bir obje \u00fczerinde tek tek gezinmek. Biz bu \u00f6zelli\u011fi manipule ederek istedi\u011fimiz say\u0131da tekrar eden d\u00f6ng\u00fcler olu\u015fturabiliyoruz. \u00d6rne\u011fin amac\u0131m\u0131z d\u00f6ng\u00fcn\u00fcn 10 kez d\u00f6nmesi ise 10 elemana sahip bir liste olu\u015fturuyoruz ve For ile liste \u00fczerinde geziniyoruz b\u00f6ylece d\u00f6ng\u00fc 10 kez tekrar ediyor.\n\nPeki 10 elemanl\u0131 bir listeyi nas\u0131l olu\u015fturaca\u011f\u0131z? Bunun i\u00e7in tek tek listeye ekleme yapmam\u0131za gerek yok onun yerine **range()** fonksiyonunu kullanaca\u011f\u0131z.","ff90be11":"Mant\u0131ksal operat\u00f6rler ile mant\u0131ksal i\u015flemleri yapabiliriz. Bu operat\u00f6rleri genelde **if else** yani \u015fartl\u0131 yap\u0131lar b\u00f6l\u00fcm\u00fcnde kullan\u0131yoruz. **if else** b\u00f6l\u00fcm\u00fcn\u00fc de yak\u0131nda g\u00f6rece\u011fiz.","462cd94a":"\u00dcstte ki fonksyon yard\u0131m\u0131 ile kalan bulabiliyoruz. Lambda fonksiyonlar\u0131 ile beraber son olarak \u00f6nemli bir fonksiyon olan **map()**' den de bahsetmemiz gerekiyor. Elinizde \u00e7ok b\u00fcy\u00fck bir liste var ve her bir eleman\u0131na ayn\u0131 fonkiyonu uygulamak istiyorsan\u0131z **map()** \u00e7ok g\u00fczel i\u015f g\u00f6rebiliyor. \u0130ki parametre alan map' \u0131n ilk parametresi uygulanmak istenen fonksiyon iken ikinci parametresi listemiz oluyor. Sonra d\u00f6nd\u00fcrd\u00fc\u011f\u00fc map objesini **list** ile listeye \u00e7evirerek her eleman\u0131na fonksiyon uygulanm\u0131\u015f listeyi elede edebiliyoruz.\n\nKar\u015f\u0131la\u015ft\u0131rma i\u00e7in \u00f6ncelikle bir \u00f6rnek yapal\u0131m. Elimizde bir liste olsun ve bu listede ki her eleman\u0131n karesini al\u0131p tekrar liste olu\u015ftural\u0131m:","1d12d617":"**range()** ayr\u0131ca ba\u015fka parametreler de alabiliyor. Ba\u015flang\u0131\u00e7 say\u0131s\u0131n\u0131, son say\u0131y\u0131 ve istersek her seferinde ka\u00e7 say\u0131 atlayaca\u011f\u0131n\u0131 se\u00e7ebiliyoruz. \u00d6rne\u011fin 6' dan 14'e kadar 3er 3er giden bir liste yapmak i\u00e7in \u015funu yap\u0131yoruz:","02787a4d":"K\u00fcmelere **add()** fonksiyonu ile eleman eklenebilir.","032a416f":"Yeni bir eleman eklemek i\u00e7in yeni bir anahtar kullanabiliriz.","9cef8749":"Son olarak d\u00f6ng\u00fcleri yar\u0131da kesmemize ya da atlamam\u0131za yard\u0131mc\u0131 olan iki adet **statement**'\u0131 g\u00f6stermekte fayda var. Bunlardan biri **break** \u00f6b\u00fcr\u00fc ise **continue**. Bu iki statement ile ak\u0131\u015f\u0131 kontrol edebiliyoruz.","0da78b16":"\u00d6rnekte g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere \u00f6nce fonksiyon tan\u0131mlad\u0131k. **def** \u00f6zel kelimesi Python'da fonksiyon tan\u0131mlamak i\u00e7in kullan\u0131l\u0131yor. Sonra parametreleri belirledik. Bu \u00f6rnekte sadece bir tanesine ihtiyac\u0131m\u0131z vard\u0131 daha fazla istersek \u015fayet **,** yard\u0131m\u0131 ile belirtebiliriz. Daha sonra fonksiyon blo\u011funu yazd\u0131k ve return b\u00f6l\u00fcm\u00fcn\u00fc ifade ettik. B\u00f6ylece fonksiyon tan\u0131m\u0131 tamamlanm\u0131\u015f oldu.\n\nArt\u0131k istedi\u011fimiz zaman \u00e7a\u011f\u0131rabilece\u011fimiz bir fonksiyona sahibiz. \u015eimdi onu \u00e7a\u011f\u0131ral\u0131m.","6637ea8f":"G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi bir ka\u00e7 sat\u0131r kod yazmak zorunda kald\u0131k. Peki list comprehensionlar ile?","5c80adf4":"Genelde **range()** tek ba\u015f\u0131na kullan\u0131l\u0131r ikinci \u00f6rnekte ki gibi bir zahmete girilmez mant\u0131kl\u0131 da de\u011fil.\n\nAyr\u0131ca dikkat \u00e7ekilmesi gereken bir konuda **i**' nin her d\u00f6ng\u00fcde listenin bir eleman\u0131 olmas\u0131. **i** burada iterator'un k\u0131saltmas\u0131 oluyor. Bir sonra ki \u00f6rnekte fark daha belirgin olacak.","37165a0e":"G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi range isimli \u00f6zel bir obje. For d\u00f6ng\u00fcs\u00fcne geri d\u00f6encek olursak iki range objesini ya da liste'yi kullanmak aras\u0131nda bir fark yok.","4861dc21":"Atama operat\u00f6r\u00fc olarak bahsetti\u011fimiz **=** ise tahmin edecebilece\u011finiz gibi bir de\u011fi\u015fkene veri atarken kullan\u0131l\u0131yor. Atama operat\u00f6r\u00fcn\u00fc di\u011fer baz\u0131 operat\u00f6rler ile birlikte kullanabiliyoruz.","933e194f":"1. Liste i\u00e7erisinde her bir de\u011fi\u015fkenin bir s\u0131ras\u0131 yani index'i vard\u0131r. Bu s\u0131ra t\u0131pk\u0131 C++ array'leri gibi 0' dan ba\u015flar. Biz bu s\u0131ra numaras\u0131n\u0131 kullanarak direk bir elemana eri\u015febiliriz ve istersek onu de\u011fi\u015ftirebiliriz.","52505ba9":"### **c) Tuples** [^](#0) <a id=\"13\"><\/a> <br>\nPython da tuple'lar listelere benzerler ancak sonradan de\u011fi\u015ftirilemezler. Normal parantezleri ile tan\u0131mlan\u0131rlar.","b77477ff":"\u00d6rnekte g\u00f6r\u00fcld\u00fc\u011f\u00fc \u00fczere break yard\u0131m\u0131 ile d\u00f6ng\u00fcy\u00fc k\u0131rabiliyoruz. Continue ise d\u00f6ng\u00fcy\u00fc k\u0131rm\u0131yor ancak d\u00f6ng\u00fcy\u00fc atlat\u0131yor.","aa3b3062":"\u015eimdide **o** karakterine g\u00f6re b\u00f6lelim.","1b40034e":"Daha g\u00fczel bir \u00e7\u0131kt\u0131 yapal\u0131m.","3d686737":"Command Line \u00fczerinde ise Python bu \u015fekilde g\u00f6r\u00fcn\u00fcyor. Bu \u015fekilde Python'u bilgisayar\u0131m\u0131za kurarak CMD(Windows) ya da Terminal(Linux) \u00fczerinde \u00e7al\u0131\u015ft\u0131rabiliriz.\n\n<img src=\"https:\/\/www.thecrazyprogrammer.com\/wp-content\/uploads\/2015\/08\/Python-Hello-World-Program.png\"\/>\n\n### **d) Python Kurulumu** [^](#0) <a id=\"5\"><\/a> <br>\nDaha \u00f6ncede belirtti\u011fim \u00fczere Python'u indirmemize gerek yok bunun i\u00e7in Kaggle'\u0131 kullanabiliriz ama yine de offline \u00e7al\u0131\u015fmak istiyorsak indirebiliriz. Linux da\u011f\u0131t\u0131mlar\u0131n\u0131n bir \u00e7o\u011funda zaten y\u00fckl\u00fc geliyor. \u0130\u015fler Windows i\u00e7in az\u0131c\u0131k farkl\u0131.\n\n**Linux Da\u011f\u0131t\u0131mlar\u0131nda Python Kurulumu**\n* Debian\/Ubuntu -- APT\n```bash\nsudo apt-get install python3\n```\n* Red Hat -- YUM\n```bash\nsudo yum install python3\n```\n* SuSE -- ZYPPER\n```bash\nsudo zypper install python3\n```\n\n**Windows'da Python Kurulumu**\n\u00d6nce [buradan](https:\/\/www.anaconda.com\/distribution\/) Anaconda'y\u0131 indirin.\n\nAnaconda Python i\u00e7in bir sanal ortam olu\u015fturacakt\u0131r. Bu ortamda Python yorumlay\u0131c\u0131s\u0131 ve bir \u00e7ok ML k\u00fct\u00fcphanesi kullan\u0131labilir durumda olacakt\u0131r. Ayr\u0131ca Anaconda Navigator isimli Grafik Aray\u00fcz Program\u0131n\u0131n kullan\u0131m\u0131 \u00e7ok kolayd\u0131r. Daha fazlas\u0131 i\u00e7in [buradan](https:\/\/hackernoon.com\/installing-python-and-anaconda-on-windows-f9059ba8b136) devan edin.","0c66a16d":"Ya da **enumerate()** isimli \u00f6zel fonksiyonu kullanmak. **enumerate**' in g\u00fczel yan\u0131 liste \u00fczerinde For ile gezinirken index numaras\u0131n\u0131 da alabiliyor olmam\u0131z.","d5f85805":"\n \n* Anaconda Navigator\n\nAnaconda'n\u0131n GUI arac\u0131 olan Navigator \u00fczerinden mouse klavye kombinasyonu ile de paketleri y\u00fckleyebiliriz. [Detayl\u0131 Anlat\u0131m](https:\/\/docs.anaconda.com\/anaconda\/navigator\/tutorials\/manage-packages\/)\n\n## **8-Di\u011fer Konular** [^](#0) <a id=\"27\"><\/a> <br>\nBu b\u00f6l\u00fcmde ML \u00e7al\u0131\u015f\u0131rken i\u015fimize yarayacak di\u011fer her \u015feyden bahsetmeyi planl\u0131yorum.\n\n### **a) List Comprehensions** [^](#0) <a id=\"28\"><\/a> <br>\nList Comprehensions her ne kadar ihtiyac\u0131m\u0131z olmasada bazen \u00e7ok fazla sat\u0131rda yapabildi\u011fimiz bir i\u015fi tek sat\u0131rda yapmam\u0131za olanak tan\u0131yor. Ad\u0131ndanda anla\u015f\u0131laca\u011f\u0131 \u00fczerine bir listede bulunan her eleman\u0131n \u00fczerinde teker teker i\u015flem ve filtreleme yapmaya olanak tan\u0131r ve t\u00fcm bu \u00e7\u0131kt\u0131lar\u0131 tekrar bir listeye koyar. \u00d6rne\u011fin elimizde 1' den 100' e kadar olan say\u0131lardan olu\u015fan bir liste olsun. Bu listeden \u00f6yle bir liste olu\u015ftural\u0131m ki bu liste yaln\u0131zca tek say\u0131lar\u0131n karelerinden olu\u015fsun.","36eba074":"G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi tek seferde 10 elamanl\u0131 bir liste olu\u015fturduk. Peki neden **list()** fonksiyonunu kulland\u0131k? Normalde **range()** tek ba\u015f\u0131na bir liste d\u00f6nd\u00fcrmemekte ben g\u00f6rsel olarak g\u00f6r\u00fcnmesi i\u00e7in onu listeye **list()** fonksiyonu yard\u0131m\u0131yla \u00e7evirdim.Peki neder **range()** liste d\u00f6nd\u00fcrm\u00fcyor da obje d\u00f6nd\u00fcr\u00fcyor? Bunun sebebi performans ile ilgili.","1b61d1bd":"Ayr\u0131ca \u00e7ift ya da tek t\u0131rnaklar ile sarmalanan her yaz\u0131 ya da karakter python' da string tipinde veri olarak alg\u0131lan\u0131r ve Kaggle notebook'da k\u0131rm\u0131z\u0131 renge \u00e7evrilir.\n\n### **b) De\u011fi\u015fkenler** [^](#0) <a id=\"8\"><\/a> <br>\nYaz\u0131l\u0131m dillerinde de\u011fi\u015fkenler verileri tutan depolar gibi \u00e7al\u0131\u015f\u0131rlar. Bir \u00e7ok veri tipi mevcuttur \u00f6rne\u011fin *int* tam say\u0131lar i\u00e7in kullan\u0131l\u0131rken *float* ondal\u0131kl\u0131 say\u0131lar i\u00e7in kullan\u0131l\u0131r.\n\nE\u011fer C++ ile kod yaz\u0131yor olsayd\u0131k bu veri tiplerini de\u011fi\u015fken olu\u015ftururken belirtmemiz gerekirdi:\n```c++\nint a = 5;  \/\/Declaring an integer variable in C++\n```\nAncak Python' da veri tipini belirtmemize gerek yoktur:","af87da36":"Bir de\u011feri de\u011fi\u015ftirmek istedi\u011fimizde yine anahtar ile eri\u015fip de\u011fi\u015ftirebiliriz.","f1382042":"**os.rmdir** ile dizin silebiliriz..","429bf49f":"G\u00f6rd\u00fc\u011f\u00fcn\u00fcz gibi tek sat\u0131r ile problemi \u00e7\u00f6zd\u00fck. List comprehension' lar tan\u0131mlan\u0131rken iki k\u00f6\u015feli parantez aras\u0131nda tan\u0131mlan\u0131r t\u0131pk\u0131 liste gib ve sonu\u00e7 olarak bir liste d\u00f6nd\u00fcr\u00fcrler. Orta tarafta for d\u00f6ng\u00fcs\u00fc ile gezilir ve en sa\u011fda ki **if** yard\u0131m\u0131yla sonu\u00e7lar filtrelenir. D\u00f6ng\u00fcn\u00fcn sol taraf\u0131nda yani en sol tarafta ise filtrelen sonu\u00e7 yani **i** \u00fczerine uygulanmak istenen i\u015flem yaz\u0131l\u0131r. Daha detayl\u0131 olarak ifade etmek gerekirse:\n\n```python\n[i**2  # sol par\u00e7a\n     for i in listA  # orta par\u00e7a\n                    if i % 2 != 0] # sa\u011f par\u00e7a\n```\n\n#### For Loop  ----->  T\u00fcm Girdiler ----> Filtre --> Filtreli Girdiler -> \u0130\u015flem ----> \u00c7\u0131kt\u0131 ----> Yeni Liste\n**for i in listA** -------> **i**  ------->  **if i % 2 != 0** ---------> **i** ----------> **i^2** ---------> **i'**  ----------> **Yeni Liste**\n\n### **b) OS Mod\u00fcl\u00fc** [^](#0) <a id=\"29\"><\/a> <br>\nOS mod\u00fcl\u00fc k\u0131saca Python ile i\u015fletim sistemini kontrol etmeye olanak tan\u0131yan bir mod\u00fcl olarak tan\u0131mlanabilir. Kaggle \u00fczerinde bazen dosya ile i\u015flem yapmam\u0131z gereken durumlar olur. Bu durumlarda \u00e7ok i\u015fe yarayan bir mod\u00fcl'd\u00fcr. \u00d6rne\u011fin Windows CMD i\u00e7in **dir** ya da Unix terminali i\u00e7in **ls** mevcut dizinde ki dosya ve dizinleri listeler. OS ile bu komutu i\u015fletim sistemi \u00fczerinde \u00e7al\u0131\u015ft\u0131rabilir ve \u00e7\u0131kt\u0131lar\u0131n\u0131 bir de\u011fi\u015fkene koyabiliriz. Tabi bu mod\u00fcl\u00fcn kullan\u0131m\u0131 baz\u0131 g\u00fcvenlik a\u00e7\u0131klar\u0131 do\u011furabilir \u00f6zellikle web \u00fczerinde \u00e7al\u0131\u015f\u0131yorken. \u00d6rne\u011fin bu \u015fekilde bir sisteme restart komutu verebiliriz. Kaggle sunucular\u0131na bunun yap\u0131lmas\u0131n\u0131 istemedi\u011fi i\u00e7in baz\u0131 \u00f6nlemler al\u0131nm\u0131\u015f durumda yani bo\u015funa denemeyin :)\n\nPeki ne gibi \u015feyleri kullanabiliriz?\n\n**os.listdir()** ile parametre olarak verdi\u011fimiz dizinde ki dosyalar\u0131 g\u00f6rebiliriz.","c1717b07":"### **d) Sets** [^](#0) <a id=\"14\"><\/a> <br>\nSets yani k\u00fcmeler listlere benzer ancak index numaralar\u0131 yoktur ve s\u00fcsl\u00fc parantezler ile ifade edilirler. En \u00f6nemli \u00f6zellikleri ise bir elemandan bir set i\u00e7inde iki tane olamaz.","325fc884":"Burada 3 ekrana bas\u0131lmad\u0131.\n\nB\u00f6ylece d\u00f6ng\u00fclerin sonuna gelmi\u015f oluyoruz. \u00d6nemli bir k\u0131sm\u0131 tamamlam\u0131\u015f bulunmaktay\u0131z.\n\n## **6-Fonksiyonlar** [^](#0) <a id=\"21\"><\/a> <br>\nFonksiyonlarda yine di\u011fer bir \u00e7ok konu gibi \u00e7ok \u00f6nemli konular aras\u0131nda yer al\u0131yor. Bunu \u015fuana kadar bir \u00e7ok fonksiyonu kullanm\u0131\u015f olmam\u0131zdan da anlayabilirsiniz.\n\n### **a) Normal Fonksiyonlar** [^](#0) <a id=\"22\"><\/a> <br>\nTan\u0131m olarak fonksiyonlar asl\u0131nda kod bloklar\u0131 oluyorlar. \u00d6rne\u011fin sin\u00fcs fonksiyonunu bir kere yaz\u0131yorsunuz ve blok olarak bir yere koyuyorsunuz sonra onu istedi\u011finiz kadar \u00e7a\u011f\u0131r\u0131yorsunuz yani kullan\u0131yorsunuz. Tabi tan\u0131mlarken belirtmemiz gereken baz\u0131 \u015feyler var. Matematikte'de oldu\u011fu gibi inputlar ve outputlar yani girdi ve \u00e7\u0131kt\u0131lar fonksiyonu anlaml\u0131 hale getiriyorlar ve bizimde onlar\u0131 kod yazarken tan\u0131mlamam\u0131z gerekiyor. Yine sin\u00fcs fonksiyonundan devam edersek girdi olarak bir a\u00e7\u0131 vermeli ve \u00e7\u0131kt\u0131 olarak say\u0131sal bir de\u011fer elde etmeliyiz.\n\nYazd\u0131\u011f\u0131m\u0131z kodun hergan bir yerinde 30 derece i\u00e7in sin\u00fcs de\u011ferini bulmak istersek \u015fayet yapmam\u0131z gerek \u015fu oluyor. Bir de\u011fi\u015fken ismi yaz\u0131yoruz ve kar\u015f\u0131s\u0131na **=** koyup Sin\u00fcs fonksyionunun ismini yaz\u0131yoruz. \u0130smini yazd\u0131ktan sonra parantez a\u00e7\u0131p kapat\u0131yor ve parantezler i\u00e7erisine parametre olarak 30 derece yaz\u0131yoruz. De\u011fi\u015fkenimiz fonksiyonun return de\u011feri yani d\u00f6nd\u00fcrd\u00fc\u011f\u00fc de\u011fer yani 1\/2 oluyor.\n\n\u015eimdi basit bir \u00f6rnek yapal\u0131m. Verilen say\u0131n\u0131n karesini d\u00f6nd\u00fcren bir fonksiyon yazal\u0131m.","fc53dd52":"Bu \u015fekilde istedi\u011fimiz gibi \u00f6r\u00fcnt\u00fcl\u00fc say\u0131lar \u00fcretebiliriz. For ile kullan\u0131m\u0131na gelecek olursak:"}}