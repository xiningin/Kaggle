{"cell_type":{"3f678cc9":"code","926d78b4":"code","96e7864f":"code","f21f14e0":"code","c5dc0304":"code","a9c80a3c":"code","b9031190":"code","9b6e598d":"code","595d5701":"code","3bd7add6":"code","2ccd707e":"code","516c20a5":"code","deb39fff":"code","47e89bd1":"code","6e6954c9":"code","6c2e83b6":"code","49c94b67":"code","38c1d9dd":"code","5ae67e60":"code","7509646f":"code","693f4631":"code","afbd7296":"code","8ea14dbb":"code","e9a7d714":"code","eacb7470":"markdown","ff4f7f4c":"markdown","1963c1d4":"markdown","b7a6b5d4":"markdown","28d0e29d":"markdown","3ce9fa33":"markdown","78d3284a":"markdown"},"source":{"3f678cc9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","926d78b4":"%matplotlib inline\n\nimport pandas as pd\nimport numpy as np\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nimport cv2\nimport os\nimport glob\nimport matplotlib.pyplot as plt\nfrom PIL import Image\nimport os\nimport numpy as np\nfrom skimage import io\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom matplotlib import cm\nfrom mpl_toolkits.axes_grid1 import ImageGrid\nimport math\n%matplotlib inline\n","96e7864f":"# import os\n# for dirname,_,filenames in os.walk('\/kaggle\/input'):\n#     for filename in filenames:\n#         print(os.path.join(dirname, filename))","f21f14e0":"IMAGE_SIZE=224","c5dc0304":"img_dir= \"..\/input\/car-plate-detection\/images\"\n\ndata_path = os.path.join(img_dir,'*g')\nfiles = glob.glob(data_path)\nfiles.sort() #We sort the images in alphabetical order to match them to the xml files containing the annotations of the bounding boxes\nX=[]\nfor f1 in files:\n    img = cv2.imread(f1)\n    img = cv2.resize(img, (IMAGE_SIZE,IMAGE_SIZE))\n    X.append(np.array(img))","a9c80a3c":"from lxml import etree\ndef resizeannotation(f):\n    tree = etree.parse(f)\n    for dim in tree.xpath(\"size\"):\n        width = int(dim.xpath(\"width\")[0].text)\n        height = int(dim.xpath(\"height\")[0].text)\n    for dim in tree.xpath(\"object\/bndbox\"):\n        xmin = int(dim.xpath(\"xmin\")[0].text)\/(width\/IMAGE_SIZE)\n        ymin = int(dim.xpath(\"ymin\")[0].text)\/(height\/IMAGE_SIZE)\n        xmax = int(dim.xpath(\"xmax\")[0].text)\/(width\/IMAGE_SIZE)\n        ymax = int(dim.xpath(\"ymax\")[0].text)\/(height\/IMAGE_SIZE)\n    return [int(xmax), int(ymax), int(xmin), int(ymin)]","b9031190":"path = '..\/input\/car-plate-detection\/annotations'\ntext_files = ['..\/input\/car-plate-detection\/annotations\/'+ f for f in sorted(os.listdir(path))]\ny=[]\nfor i in text_files:\n    y.append(resizeannotation(i))","9b6e598d":"X= np.array(X)\nY= np.array(y)\n","595d5701":"X= X\/255\nY= Y\/255","3bd7add6":"#import imgaug","2ccd707e":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.1, random_state=42)\nX_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.15, random_state=1)","516c20a5":"# datagen = ImageDataGenerator(\n#     featurewise_center=True,\n#     featurewise_std_normalization=True,\n#     rotation_range=20,\n#     width_shift_range=0.2,\n#     height_shift_range=0.2,\n#     horizontal_flip=True,\n#     validation_split=0.2)\n\n","deb39fff":"import tensorflow as tf","47e89bd1":"from keras.models import Sequential\nfrom keras.layers import Dense, Flatten\n","6e6954c9":"model= Sequential()\nmodel.add(tf.keras.applications.EfficientNetB0(weights=\"imagenet\", include_top=False, input_shape=(IMAGE_SIZE, IMAGE_SIZE, 3)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dense(128, activation=\"relu\"))\nmodel.add(Dense(64, activation=\"relu\"))\nmodel.add(Dense(4, activation=\"sigmoid\"))\n\nmodel.summary()","6c2e83b6":"model.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])","49c94b67":"model=tf.keras.models.load_model(\".\/ANPR_ASH.h5\")","38c1d9dd":"train = model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=200, batch_size=32, verbose=1)","5ae67e60":"model.save('ANPR_ASH.h5', overwrite=True) ","7509646f":"model.save_weights(\"ANPR_ASH_WEIGHTS.H5\")","693f4631":"accuracy=model.evaluate(X_test, y_test, verbose=0)\nprint(\"Accuracy : %.2f%%\" % (accuracy[1]*100))","afbd7296":"X_test\ny_cnn= model.predict(X_test)","8ea14dbb":"plt.figure(figsize=(20,40))\nfor i in range(0,2) :\n        plt.subplot(1,5,i + 1)\n        plt.axis('off')\n        ny = y_cnn[i+5]*255\n        image = cv2.rectangle(X_test[i+5],(int(ny[0]),int(ny[1])),(int(ny[2]),int(ny[3])),(0,0,255))\n        plt.imshow(image)","e9a7d714":"y_cnn.shape","eacb7470":"# ****Predictions****","ff4f7f4c":"# SCOPE OF IMPROVEMENT\n\n1. Need More Training data.\n2. Ability to properly implement some real-time image augmentations like horizontal flip.\n3. Generate Synthetic Images.","1963c1d4":"# Training Step","b7a6b5d4":"# Splitting Data","28d0e29d":"# Resizing and Appending to Lists","3ce9fa33":"# Importing Libraries","78d3284a":"# Modelling and Compiling "}}