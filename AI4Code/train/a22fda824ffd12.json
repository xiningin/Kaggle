{"cell_type":{"a74bfadf":"code","9b8e5fd7":"code","6ab68f7d":"code","e3ac0f38":"code","5c3ac8a9":"code","6373d25f":"code","e65e5834":"code","c06f714e":"code","8831d2f2":"code","f86d58c6":"code","577e4b57":"code","bf3a57d1":"code","77bfb6de":"code","f49005cc":"markdown","5376b56a":"markdown","20136415":"markdown","959b43cd":"markdown","ee721074":"markdown","fb32de76":"markdown","9d1a1838":"markdown"},"source":{"a74bfadf":"import pandas as pd\nimport sklearn as sk\nimport requests\nimport bs4\n\nimport matplotlib.pyplot as plt\n\n%matplotlib inline","9b8e5fd7":"# http request\nr1 = requests.get('https:\/\/www.washingtonpost.com\/politics\/2019\/07\/31\/transcript-first-night-second-democratic-debate')\nr2 = requests.get('https:\/\/www.washingtonpost.com\/politics\/2019\/08\/01\/transcript-night-second-democratic-debate\/')","6ab68f7d":"def parse_requests(r, night=None):\n    # Parse html\n    soup = bs4.BeautifulSoup(r.content)\n    graphs = soup.find_all('p')\n    utterances = [x.get_text() for x in graphs if 'data-elm-loc' in x.attrs.keys()]\n\n    # Parse utterances\n    utterances = utterances [2:]\n    seq = 0\n    data = []\n    for i in utterances:\n        i = i.replace('DE BLASIO:', 'DEBLASIO:')\n        graph = i.split()\n        if graph[0][-1] == ':':\n            text = ' '.join(graph[1:])\n            num_words = len(graph) - 1\n            name = graph[0][:-1]\n            seq += 1\n        elif len(graph) > 1 and graph[1] == '(?):':\n            # Cases like 'WARREN (?):'\n            text = ' '.join(graph[2:])\n            num_words = len(graph) - 2\n            name = graph[0]\n            seq += 1\n        else:\n            text = ' '.join(graph)\n        if name == '[Transcript':\n            pass\n        else:\n            data.append({\"name\": name,\n              \"graph\": text,\n              \"seq\": seq,\n              \"num_words\": num_words,\n              \"night\": night\n            })\n    return data\n\ndata = parse_requests(r1, night=0) + parse_requests(r2, night=1)","e3ac0f38":"df = pd.DataFrame(data)\ndf.name.unique()","5c3ac8a9":"# \"Unknown\", O'Rourke parsing errors\ndf = df[df.name != \"(UNKNOWN)\"]\ndf['name'] = df['name'].apply(lambda x: ''.join([char for char in x if char.isalpha()]))\n\n# There was also a protestor on night 2\ndf = df[df.name != \"PROTESTOR\"]\n\ndf.name.unique()","6373d25f":"data.head()","e65e5834":"# Example quick plotting\nplt.style.use('fivethirtyeight')\nwords_freq_plot = df.groupby('name').sum()['num_words'].plot(\n    kind='bar', figsize=(8, 4)\n);\nwords_freq_plot.set_ylabel('Words Spoken')\nwords_freq_plot.set_title(\"Candidate Approx Word Totals\");","c06f714e":"# Squash multiple lines with same name\ndf['graph'] = df.groupby('seq')['graph'].transform(' '.join)\ndf = df[['graph', 'seq', 'name', 'night']].drop_duplicates()\ndf.head()","8831d2f2":"df.name.unique()","f86d58c6":"import numpy as np\nimport sklearn.feature_extraction.text as skt\nfrom wordcloud import WordCloud\n\nimport nltk\nfrom nltk import word_tokenize \nfrom nltk.stem.porter import PorterStemmer\n\n#######\n# based on http:\/\/www.cs.duke.edu\/courses\/spring14\/compsci290\/assignments\/lab02.html\nstemmer = PorterStemmer()\ndef stem_tokens(tokens, stemmer):\n    stemmed = []\n    for item in tokens:\n        stemmed.append(stemmer.stem(item))\n    return stemmed\n\ndef tokenize(text):\n    tokens = nltk.word_tokenize(text)\n    return tokens\n######## \n\ndef topwords_candidate(candidate_name, n):\n    vectorizer = skt.TfidfVectorizer(stop_words='english', tokenizer=tokenize)\n    X = vectorizer.fit_transform(df[df['name']==candidate_name]['graph'])\n    feature_names = vectorizer.get_feature_names()\n    doc = 0 # Opening statement\n    feature_index = X[doc,:].nonzero()[1]\n    \n    tfidf_scores = zip(feature_index, [X[doc, x] for x in feature_index])\n    scored_features = sorted([(feature_names[i], s) for (i, s) in tfidf_scores], key=lambda x: x[1])\n    \n    data = scored_features[-n:]\n    \n    \n    # Generate a word cloud image\n    wordcloud = WordCloud().generate(' '.join([x[0] for x in data][::-1]))\n    plt.imshow(wordcloud, interpolation='bilinear')\n    plt.axis(\"off\")\n    return data, wordcloud","577e4b57":"figs, axs = plt.subplots(4, 5, figsize=(24, 8))\nfigs.suptitle(\"\"\"Top TF-IDF Weighted Words in Opening Speeches, by Candidate\"\"\",\n             fontsize=24)\ncandidates = list(filter(lambda x: x not in ['BASH', 'TAPPER', 'LEMON'], df.name.unique()))\nfor k in range(4):\n    for i in range(5):\n    \n        mod = k*5\n        axs[k][i].imshow(topwords_candidate(candidates[i+mod], 10)[1])\n        axs[k][i].axis('off')\n        axs[k][i].set_title(candidates[i+mod], fontsize=16)","bf3a57d1":"def get_all_text(candidate):\n    all_docs = df[df.name == candidate]['graph']\n    all_docs = ' '.join(all_docs.values)\n    return all_docs\n\ncorpus = [get_all_text(cand) for cand in df.name.unique()]","77bfb6de":"vect = skt.TfidfVectorizer(min_df=1)\ntfidf = vect.fit_transform(corpus)\n\ndistance_matrix = (tfidf * tfidf.T).A\n\ndef colorval_name(k):\n    if k in ['BASH', 'TAPPER', 'LEMON']:\n        return 'r', 'CNN'\n    elif k in ['SANDERS', 'WARREN', 'HARRIS', 'BIDEN']:\n        return 'b', 'Tier 1'\n    else:\n        return 'g', 'Tier 2'\n\ndrawn_labels = []\nfor i, name in enumerate(df.name.unique()):\n    c, label = colorval_name(name)\n    plt.scatter(distance_matrix[i, 0], distance_matrix[i, 1], c=c, label=label if label not in drawn_labels else '')\n    drawn_labels.append(label)\nplt.title(\"Candidate Similarity\", fontsize=20)\n\nlegend = plt.legend(loc='lower right')","f49005cc":"\"Tonight...as we speak...percent of income goes...\" sounds like Sanders to me.\n\nLet's plot them all:","5376b56a":"We should also do some data cleaning -- the apostraphe in O'Rourke is inconsistently given and there's an (UNKNOWN) name in there, as shown below:","20136415":"When candidates give multiple paragraph answers the text is split across rows, let's squash those together.","959b43cd":"#### Quickly get started working with the transcript from the first night of the second Democratic Primary debates.\n\nBegin by getting the parsed transcript","ee721074":"We've done some good data cleaning but it's not perfect. There are still artifacts and errors in the text, but I am going to end my data cleaning here in the interests of my own time. In a mission-critical model you wouldn't do that, so be warned before copying this code.\n\nA quick plot of the data can show how many words each candidate (and host) got in, roughly.","fb32de76":"Next we'll form a distance matrix, quantifying how similar each candidate's full performance was to eachother.","9d1a1838":"We can also do some crude TF-IDF vectorization to rank the importance of the words in their opening statements."}}