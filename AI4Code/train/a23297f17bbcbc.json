{"cell_type":{"40dc1049":"code","22096fdc":"code","0850ae37":"code","f59b2950":"code","65f60ad5":"code","69918504":"code","da7d6450":"code","ff5a225d":"code","c57082bb":"code","475b9e50":"code","13b3fb2e":"code","1255891a":"code","6eca4ab3":"code","5d438da5":"code","b77b4871":"markdown","48066894":"markdown","a2617778":"markdown","19cf3e71":"markdown","ae3aeaff":"markdown","48322ca3":"markdown","57db4598":"markdown","b0cd6835":"markdown","032c0d29":"markdown","1580e6e2":"markdown"},"source":{"40dc1049":"import pandas as pd\nimport spacy\n\nfrom spacy import displacy\nfrom spacy.matcher import Matcher\n\nnlp = spacy.load(\"en_core_web_sm\")","22096fdc":"active = ['Hens lay eggs.',\n         'Birds build nests.']\npassive = ['Eggs are laid by hens',\n           'Nests are built by birds']","0850ae37":"doc = nlp(active[0])\n\nfor token in doc:\n    print(token.text, \" -- \", token.dep_)","f59b2950":"displacy.render(doc, style=\"dep\")","65f60ad5":"print(\"Active Voice Sentences\")\nprint(\"------------------------------------------------------------------\")\nfor sent in active:\n    doc = nlp(sent)\n\n    for token in doc:\n        print(token.text, \" -- \", token.dep_)\n    \n    displacy.render(doc, style=\"dep\")\n\nprint(\"\\n\")\nprint(\"Passive Voice Sentences\")\nprint(\"------------------------------------------------------------------\")\nfor sent in passive:\n    doc = nlp(sent)\n\n    for token in doc:\n        print(token.text, \" -- \", token.dep_)\n    \n    displacy.render(doc, style=\"dep\")","69918504":"passive_rule = [{'DEP':'nsubjpass'}]\n\nmatcher = Matcher(nlp.vocab)\nmatcher.add(\"Rule\", [passive_rule])\nmatcher(nlp(passive[0]))","da7d6450":"def is_passive(doc):\n    \n    passive_rule = [{'DEP':{\"IN\":['nsubjpass', 'auxpass']}}]\n\n    matcher = Matcher(nlp.vocab)\n    matcher.add(\"Rule\", [passive_rule])\n    \n    if len(matcher(doc)) > 0:\n        words = []\n        \n        for match in matcher(doc):\n            words.append(doc[match[1]:match[2]])\n            \n        return True, words\n    else:\n        return False","ff5a225d":"for sent in active:\n    doc = nlp(sent)\n    print(is_passive(doc))","c57082bb":"for sent in passive:\n    doc = nlp(sent)\n    print(is_passive(doc))","475b9e50":"active_passive = pd.read_csv(\"..\/input\/activepassive\/active_passive.csv\")\nactive_passive.head(2)","13b3fb2e":"active_passive.shape","1255891a":"active_set = active_passive.Active\npassive_set = active_passive.Passive","6eca4ab3":"cnt = 0\nfor sent in active_passive.Active:\n    if not is_passive(nlp(sent)):\n        cnt += 1\n        \nprint(\"Active Sentences : \", cnt)","5d438da5":"cnt = 0\nfor sent in active_passive.Passive:\n    if is_passive(nlp(sent)):\n        cnt += 1\n        \nprint(\"Passive Sentences : \", cnt)","b77b4871":"## Importing Libraries","48066894":"## `Passive Voice` : A Function","a2617778":"## Check Function on `Passive Sentences`","19cf3e71":"## Check Function on `Active Sentences`","ae3aeaff":"## Verifying All Parses","48322ca3":"## Visualizing All Parses","57db4598":"## Example Set","b0cd6835":"## A Dataset","032c0d29":"## Creating a Rule for `passive voice`","1580e6e2":"## Visualizing the First Parse"}}