{"cell_type":{"c13c1c4f":"code","2692a2c4":"code","490c6e78":"code","454811a4":"code","05632f1e":"code","eedc6907":"code","fe127d9f":"code","d71f9dcf":"code","f9691909":"code","a03b8f68":"code","d63c9f18":"code","6c5e3dbb":"code","83bd93d2":"code","e446f869":"code","4644afdc":"code","ce1e292f":"code","8214a975":"code","2848b192":"code","a1e2a2f0":"code","6237b326":"markdown","d6da034e":"markdown","8c783be4":"markdown","c9d95ea6":"markdown"},"source":{"c13c1c4f":"!pip install swifter","2692a2c4":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport swifter","490c6e78":"path_to_data = '..\/input\/poker-rule-induction\/'\n\ntrain_data = pd.read_csv(path_to_data+'train.csv.zip')\ntest_data = pd.read_csv(path_to_data+'test.csv.zip')\n\ntrain_data.head()","454811a4":"train_data.isnull().sum()","05632f1e":"train_data.nunique()","eedc6907":"f, ax = plt.subplots(2, 2, figsize=(14, 8), sharex=True)\nsns.set()\nsns.despine(left=True)\n\nsns.countplot(train_data['S1'], color='r', ax=ax[0, 0])\n\nsns.countplot(train_data['C1'], color='b', ax=ax[0, 1])\n\nsns.distplot(train_data['C2'], color='g', kde_kws={'shade': True}, ax=ax[1, 0])\n\nsns.countplot(train_data['hand'], color='y', ax=ax[1, 1])\n\nplt.tight_layout()","fe127d9f":"train_data['hand'].value_counts()","d71f9dcf":"def pair(row):\n    cards = list(row[['C1', 'C2', 'C3', 'C4', 'C5']].values)\n    for card in cards:\n        if cards.count(card) == 2:\n            return True\n    return False\n\ndef two_pair(row):\n    cards = list(row[['C1', 'C2', 'C3', 'C4', 'C5']].values)\n    for card in cards:\n        if cards.count(card) == 2:\n            cards.remove(card)\n            for second_pair in cards:\n                if cards.count(second_pair) == 2:\n                    return True\n    return False\n\ndef three(row):\n    cards = list(row[['C1', 'C2', 'C3', 'C4', 'C5']].values)\n    for card in cards:\n        if cards.count(card) == 3:\n            return True\n    return False\n\ndef straight(row):\n    cards = list(sorted(row[['C1', 'C2', 'C3', 'C4', 'C5']].values))\n    need_to_straight = [4, 3, 2, 1, 0]\n    straight_to_2 = [1, 10, 11, 12, 13]\n    last_card = cards[-1]\n    res = []\n    if cards == straight_to_2:\n        return True\n    for card in cards:\n        res.append(last_card - card)\n    if res == need_to_straight:\n        return True\n    return False\n\ndef flush(row):\n    suits = list(row[['S1', 'S2', 'S3', 'S4', 'S5']].values)\n    if len(set(suits)) == 1:\n        return True\n    return False\n\ndef full_house(row):\n    cards = list(row[['C1', 'C2', 'C3', 'C4', 'C5']].values)\n    for card in cards:\n        if cards.count(card) == 3:\n            check_full_house = list(filter(lambda x: x != card, cards))\n            for second_pair in check_full_house:\n                if check_full_house.count(second_pair) == 2:\n                    return True\n    return False\n\ndef four_pair(row):\n    cards = list(row[['C1', 'C2', 'C3', 'C4', 'C5']].values)\n    for card in cards:\n        if cards.count(card) == 4:\n            return True\n    return False\n\ndef straight_flush(row):\n    cards = list(sorted(row[['C1', 'C2', 'C3', 'C4', 'C5']].values))\n    suits = list(row[['S1', 'S2', 'S3', 'S4', 'S5']].values)\n    \n    need_to_straight = [4, 3, 2, 1, 0]\n    last_card = cards[-1]\n    res = []\n    \n    if len(set(suits)) == 1:\n        for card in cards:\n            res.append(last_card - card)\n        if res == need_to_straight:\n            return True\n    return False\n\ndef royal(row):\n    cards = list(sorted(row[['C1', 'C2', 'C3', 'C4', 'C5']].values))\n    suits = list(row[['S1', 'S2', 'S3', 'S4', 'S5']].values)\n    \n    need_to_royal = [1, 10, 11, 12, 13]\n    \n    if cards == need_to_royal and len(set(suits)) == 1:\n        return True\n    return False","f9691909":"def poker_combinations(row):\n    \"\"\"\n    This function converts information about card in dataset in number of combinations.\n    0 - no combinations; 1 - pair; 2 - two pair; 3 - three pair; 4 - straight;\n    5 - flush; 6 - full house; 7 - four pair; 8 - straight flush; 9 - royal flush\n\n    Apply this function to train and test dataframe\n    \"\"\"\n    if royal(row):\n        return 9\n    elif straight_flush(row):\n        return 8\n    elif four_pair(row):\n        return 7\n    elif full_house(row):\n        return 6\n    elif flush(row):\n        return 5\n    elif straight(row):\n        return 4\n    elif three(row):\n        return 3\n    elif two_pair(row):\n        return 2\n    elif pair(row):\n        return 1\n    else:\n        return 0","a03b8f68":"compare_combinations = train_data.copy()","d63c9f18":"compare_combinations['combinations'] = compare_combinations.swifter.apply(poker_combinations, axis=1)","6c5e3dbb":"for i in range(10):\n    print('Class ', i)\n    print('True number of samples: ', len(compare_combinations[compare_combinations['hand'] == i]), end=', ')\n    print('My number of samples: ', len(compare_combinations[compare_combinations['combinations'] == i]))","83bd93d2":"ssubm = pd.read_csv(path_to_data+'sampleSubmission.csv.zip')","e446f869":"test_data = test_data.drop('id', axis=1)\ntest_data.head()","4644afdc":"n_start = 0\nn_features = 25000\nn_iterations = int(len(test_data) \/ n_features)\n\nresult = np.array([])\n\nfor i in range(n_iterations):\n    chunk = test_data[n_start:n_features]\n    chunk_res = np.array(chunk.swifter.apply(poker_combinations, axis=1))\n    result = np.append(result, chunk_res)\n    n_start = n_features\n    n_features += 25000","ce1e292f":"ssubm['hand'] = result","8214a975":"ssubm = ssubm.astype('int')","2848b192":"ssubm.head()","a1e2a2f0":"ssubm.to_csv('submission_1.csv', index=False)","6237b326":"Result on test data - 1.00.\nThe execution time of this code on test data is 1 hour. If you have any suggestions, how to decrease execution time, write this in comments.","d6da034e":"Check, how many unique values in our columns","8c783be4":"Check missing values in training dataset","c9d95ea6":"**Load data**"}}