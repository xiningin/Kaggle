{"cell_type":{"fc9d869e":"code","f520ce0a":"code","26b9c8f0":"code","46619088":"code","8c9ac1fd":"code","404ad1fb":"code","b45e24f9":"code","093e60a1":"code","62d62394":"code","4b09b5b9":"code","1f05221b":"code","0dc63303":"code","7ac79e5c":"code","15f7acd4":"code","dfcaff2b":"code","44994748":"code","ce8cf732":"code","f18e09c9":"code","1ac21ba6":"code","3b14c2f2":"code","37e0d2eb":"code","ebaf60b1":"code","1571198c":"code","3276b4a5":"code","a7ac7221":"code","a3f9f1e3":"code","188d4017":"code","48c59fc5":"markdown","4960ec73":"markdown","941aa4c5":"markdown","849aafce":"markdown","e24320ee":"markdown","74431bdb":"markdown","15038da4":"markdown","1a136991":"markdown","307f4fd7":"markdown","6602f13a":"markdown","663ff150":"markdown","07df0b5d":"markdown","9844615d":"markdown","fdb7c755":"markdown","1bd7a06e":"markdown"},"source":{"fc9d869e":"import pandas as pd\nimport numpy as np\nimport random\nimport seaborn as sns\nfrom sklearn.metrics import r2_score\nfrom matplotlib import pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import PolynomialFeatures","f520ce0a":"data=pd.read_csv(\"..\/input\/predict-test-scores-of-students\/test_scores.csv\")\ndata.head(5)","26b9c8f0":"#drop the student_id Column\ndata.drop(['student_id'],axis=1,inplace=True)","46619088":"data.isnull().sum()","8c9ac1fd":"#numerical attributes\nnumeric_columns=data.select_dtypes(include=['number']).columns.tolist()\n\n#categorical attributes\ncat_columns=data.select_dtypes(exclude=['number','bool_']).columns.tolist()","404ad1fb":"def label_function(val):\n    return f'{val \/ 100 * len(data):.0f}\\n{val:.0f}%'","b45e24f9":"colors=['tomato', 'gold', 'skyblue','violet', 'lime']\nfor col in cat_columns:\n    col_no=len(pd.unique(data[col]))\n    if col_no<4:\n        color=(random.sample(colors, col_no))\n        data.groupby(col).size().plot(kind='pie', autopct=label_function, textprops={'fontsize': 15},colors=color)\n        #plt.xlabel('Per country', size=22)\n        #plt.ylabel('Per gender', size=22)\n        plt.ylabel(\"\")\n        plt.tight_layout()\n        plt.title(\"Distibution of {}\".format(col),size=22)\n        plt.show()","093e60a1":"pd.crosstab(data['school_setting'],data['school_type'], normalize='index')","62d62394":"pd.crosstab(data['school_type'],data['lunch'], normalize='index')","4b09b5b9":"pd.pivot_table(data, values='posttest', index=['school_type'],columns=['lunch'], aggfunc=np.mean)","1f05221b":"f, axes = plt.subplots(1, 3,figsize=(15,8))\nsns.boxplot(data=data, x='lunch', y='posttest', ax=axes[0])\n#plt.xticks(fontsize=14)\nsns.boxplot(data=data, x='school_setting', y='posttest', ax=axes[1])\n#plt.xticks(fontsize=14)\nsns.boxplot(data=data, x='school_type', y='posttest', ax=axes[2])\nplt.tight_layout()\n#plt.xticks(fontsize=14)\nplt.show()","0dc63303":"f, axes = plt.subplots(1, 2,figsize=(15,8))\nsns.boxplot(data=data, x='gender', y='posttest', ax=axes[0])\nsns.boxplot(data=data, x='teaching_method', y='posttest', ax=axes[1])","7ac79e5c":"plt.figure(figsize=(15,8))\nsns.boxplot(data=data, x='n_student', y='posttest',hue='school_type')\nplt.show()","15f7acd4":"new_data=[]\nfor col in numeric_columns:\n    if col=='n_student':\n        continue\n    new_data.append(data[col].tolist())\n\nfig = plt.figure(figsize =(15,5))\nax = fig.add_subplot(111)\n\n# Creating axes instance\nbp = ax.boxplot(new_data, patch_artist = True,\n                notch ='True', vert = 0)\n\ncolors = ['#0000FF', '#00FF00']\n\nfor patch, color in zip(bp['boxes'], colors):\n    patch.set_facecolor(color)\n\n# changing color and linewidth of\n# whiskers\nfor whisker in bp['whiskers']:\n    whisker.set(color ='#8B008B',\n                linewidth = 1.5,\n                linestyle =\":\")\n\n# changing color and linewidth of\n# caps\nfor cap in bp['caps']:\n    cap.set(color ='#8B008B',\n            linewidth = 2)\n\n# changing color and linewidth of\n# medians\nfor median in bp['medians']:\n    median.set(color ='red',\n               linewidth = 3)\n\n# changing style of fliers\nfor flier in bp['fliers']:\n    flier.set(marker ='D',\n              color ='#e7298a',\n              alpha = 0.5)\n\n# x-axis labels\nax.set_yticklabels(['pretest','posttest'])\n\n# Adding title\nplt.title(\"Customized box plot\")\n\n# Removing top axes and right axes\n# ticks\nax.get_xaxis().tick_bottom()\nax.get_yaxis().tick_left()\n\n# show plot\nplt.show(bp)","dfcaff2b":"label_encoder = LabelEncoder()\nfor col in cat_columns:\n    data[col]=label_encoder.fit_transform(data[col])\n","44994748":"data","ce8cf732":"for col in numeric_columns:\n    data[col]= MinMaxScaler().fit_transform(np.array(data[col]).reshape(-1,1))","f18e09c9":"target=data['posttest']\ndata=data.drop(['posttest'],axis=1)\ndata.head(5)","1ac21ba6":"X_train, X_test, y_train, y_test = train_test_split(data,target, test_size = 0.25)","3b14c2f2":"regression = LinearRegression()\nregression.fit(X_train, y_train)\nprint(regression.score(X_test, y_test))\ny_pred = regression.predict(X_test)","37e0d2eb":"def evaluvate(y_test,y_pred):\n    result={}\n    result['MAE'] = round(mean_absolute_error(y_test, y_pred),4)\n    result['MSE'] = round(mean_squared_error(y_test, y_pred),4)\n    result['r2'] = round(r2_score(y_test, y_pred),4)\n    return result\n    ","ebaf60b1":"result=evaluvate(y_test,y_pred)\n","1571198c":"print(\"{:<25} {:<15}\".format('Model','Accuracy'))\nfor k, v in sorted(result.items(), key=lambda item :item[1],reverse=True):\n    \n    print(\"{:<25} {:<15}\".format(k,v))","3276b4a5":" poly = PolynomialFeatures(degree = 2)\nX_poly = poly.fit_transform(data)\nX_train, X_test, y_train, y_test = train_test_split(X_poly,target, test_size = 0.25)\npoly.fit(X_train, y_train)\npoly_reg = LinearRegression()\npoly_reg.fit(X_train, y_train)\nprint(poly_reg.score(X_test, y_test))\ny_pred = poly_reg.predict(X_test)","a7ac7221":"def evaluvate(y_test,y_pred):\n    result={}\n    result['MAE'] = round(mean_absolute_error(y_test, y_pred),4)\n    result['MSE'] = round(mean_squared_error(y_test, y_pred),4)\n    result['r2'] = round(r2_score(y_test, y_pred),4)\n    return result\n    ","a3f9f1e3":"result=evaluvate(y_test,y_pred)\n","188d4017":"print(\"{:<25} {:<15}\".format('Model','Accuracy'))\nfor k, v in sorted(result.items(), key=lambda item :item[1],reverse=True):\n    \n    print(\"{:<25} {:<15}\".format(k,v))","48c59fc5":"<h1 style=\"background-color:MediumSeaGreen;font-family:newtimeroman;font-size:500%;text-align:center;border-radius: 15px 50px;padding: 5px 5px 5px 5px\">\n    <b>Visuzlisation<\/b><\/h1>","4960ec73":"There are no missing values in any attributes","941aa4c5":"<h1 style=\"background-color:MediumSeaGreen;font-family:newtimeroman;font-size:500%;text-align:center;border-radius: 15px 50px;padding: 5px 5px 5px 5px\">\n    <b>Transforming Categorical to Numerical values<\/b><\/h1>","849aafce":"<h1 style=\"background-color:MediumSeaGreen;font-family:newtimeroman;font-size:500%;text-align:center;border-radius: 15px 50px;padding: 5px 5px 5px 5px\">\n    <b>Dataset Overview<\/b><\/h1>","e24320ee":"* School : Name of the school the student is enrolled in.\n* School setting : The location of the school.\n* School type : The type of school. Either public or non-public.\n* Classroom : The type of classroom.\n* Teaching method : Teaching methods: Either experimental or Standard.\n* n_student : Number of students in the class.\n* Student_id : A unique ID for each student.\n* Gender : The gender of the students: male or female.\n* Lunch : Whether a student qualifies for free\/subsidized lunch or not.\n* Pretest : The pretest score of the students out of 100.\n\n\n","74431bdb":"<center><img src=\"https:\/\/ivybound.net\/wp-content\/uploads\/2016\/11\/score-300x300.jpg\",height='500',width='500'><\/center>","15038da4":"# If you find this notebook useful\n<h1 style=\"background-color:tomato;font-family:newtimeroman;font-size:500%;text-align:center;border-radius: 15px 50px;padding: 5px 5px 5px 5px\">\n    <b>feel free to upvote!<\/b><\/h1>","1a136991":"The above table shows,Most of the students from non-public school are not qualified for reduced\/free lunch.","307f4fd7":"<h1 style=\"background-color:MediumSeaGreen;font-family:newtimeroman;font-size:500%;text-align:center;border-radius: 15px 50px;padding: 5px 5px 5px 5px\">\n    <b>Polynomial Regression<\/b><\/h1>","6602f13a":"<h1 style=\"background-color:MediumSeaGreen;font-family:newtimeroman;font-size:500%;text-align:center;border-radius: 15px 50px;padding: 5px 5px 5px 5px\">\n    <b>Evaluvation<\/b><\/h1>","663ff150":"<h1 style=\"background-color:MediumSeaGreen;font-family:newtimeroman;font-size:500%;text-align:center;border-radius: 15px 50px;padding: 5px 5px 5px 5px\">\n    <b>Evaluvation<\/b><\/h1>","07df0b5d":"<h1 style=\"background-color:MediumSeaGreen;font-family:newtimeroman;font-size:500%;text-align:center;border-radius: 15px 50px;padding: 5px 5px 5px 5px\">\n    <b>Linear Regression<\/b><\/h1>","9844615d":"<h1 style=\"background-color:MediumSeaGreen;font-family:newtimeroman;font-size:500%;text-align:center;border-radius: 15px 50px;padding: 5px 5px 5px 5px\">\n    <b>Importing libraries and loading Dataset<\/b><\/h1>","fdb7c755":"<h1 style=\"background-color:MediumSeaGreen;font-family:newtimeroman;font-size:500%;text-align:center;border-radius: 15px 50px;padding: 5px 5px 5px 5px\">\n    <b>Normalizing Numerical values<\/b><\/h1>","1bd7a06e":"\nFrom the above table it is clear that the highest score is from the private school that doesnot qualify for the reduced\/free lunch"}}