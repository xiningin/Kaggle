{"cell_type":{"8f7d4b47":"code","c5231a70":"code","b6fd5fb5":"code","d383ff7e":"code","f15d5370":"code","2208cccf":"code","824a1a00":"code","dc8e0b8c":"code","c441eae2":"code","56495269":"code","e952507a":"code","fd2361b4":"code","6e4448f5":"code","f12190de":"code","589caf97":"code","f18e6206":"code","850e5d5b":"code","3ca33791":"code","63d7ed50":"code","a6a37d2e":"code","c753c670":"code","c5d8af27":"code","25936e2a":"code","6de05c31":"code","fbb99de9":"code","ffd78959":"code","fac0d902":"code","d116fc2e":"code","f398da33":"code","5665064c":"code","68b23933":"code","58ba6650":"code","696b97a5":"code","f101132e":"code","a8bd3fe2":"code","18bde107":"code","80013674":"code","a59c6ef7":"code","a2bef67b":"code","b621f182":"code","3d677fb3":"code","b07fe32a":"code","42df1541":"code","4d0acad5":"code","05624836":"code","213a8bfc":"code","c9540248":"code","3ce6e228":"code","2ef451e3":"code","905393de":"code","8345de3e":"code","7f4ac942":"code","118363da":"code","9ba1ee60":"code","91b90eda":"code","274efabe":"code","d8bfd163":"code","d7a7f32c":"code","1a84a153":"code","750debb2":"code","aa814fc5":"code","484261e0":"markdown","9787f09c":"markdown","639f4a13":"markdown","3488a1d6":"markdown","56cd5fbe":"markdown","1a6015a8":"markdown","01e5d51b":"markdown","36e4eac1":"markdown","3ccc1fad":"markdown","88f13b69":"markdown","81713fe0":"markdown","6f3d2da8":"markdown","682b5784":"markdown","05c428f4":"markdown","66172fba":"markdown","56cfcb83":"markdown","be348e39":"markdown","8236a7e8":"markdown","edc30ad6":"markdown","eca7ad41":"markdown","3b47e1b0":"markdown","b1b4d40d":"markdown","df9cd471":"markdown","17a54ff3":"markdown","54ccd1cd":"markdown","9f53553b":"markdown","4f2a3f6e":"markdown","43d17c23":"markdown","e699d7f5":"markdown","a5da4659":"markdown","cda23db9":"markdown"},"source":{"8f7d4b47":"import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nimport seaborn as sns\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing\nfrom sklearn.metrics import confusion_matrix\n\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics\n\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom tensorflow.keras import layers","c5231a70":"cd \/kaggle\/working","b6fd5fb5":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d383ff7e":"base = pd.read_csv('\/kaggle\/input\/bank-marketing-dataset\/bank.csv')\nprint(base.shape)","f15d5370":"base.duplicated().sum()","2208cccf":"base.isnull().sum().sum()","824a1a00":"base.head(10)","dc8e0b8c":"base.info()","c441eae2":"base.describe()","56495269":"cols= ['#1A5B6D','#D8C99B','#D8973C','#BD632F','#273E47']\nsns.set(style=\"darkgrid\")","e952507a":"sns.palplot(cols)","fd2361b4":"fig = plt.figure(figsize=(12,8))\nplt.suptitle(\"Comparision of Education with deposit\", family='Serif', size=17, ha='center', weight='bold')\nplt.figtext(0.5,0.93,\"comparing the education impact on deposit\", family='Serif', size=12, ha='center')\ngs = GridSpec(nrows=1, ncols=2, width_ratios=[5,2])\nax1=plt.subplot(gs[0,0])\nax1=plt.pie(base[base['deposit']=='yes']['education'].value_counts(),\n            labels=base[base['deposit']=='yes']['education'].unique(), autopct='%2d', colors=cols)\nax2=plt.subplot(gs[0,1])\nax2=plt.pie(base[base['deposit']=='no']['education'].value_counts(),\n            labels=base[base['deposit']=='no']['education'].unique(), autopct='%2d', colors=cols)","6e4448f5":"plt.figure(figsize=(12,9))\nsns.boxplot(x=\"marital\",y=\"balance\", data=base[base['deposit']=='yes'], palette=\"Blues\")\nplt.show()","f12190de":"df_marital=base[[\"marital\",\"previous\"]]\ndf_marital.describe()","589caf97":"plt.figure(figsize=(12,6))\nsns.countplot(x=\"marital\",data=base, palette=\"Blues\")\nplt.show()","f18e6206":"plt.figure(figsize=(12,6))\nsns.countplot(x=\"campaign\",data=base, palette=\"dark\")\nplt.show()","850e5d5b":"plt.figure(figsize=(12, 6))\nsns.heatmap(base.corr(method='pearson'), cmap=\"Greys\", annot=True)","3ca33791":"base","63d7ed50":"#  prediction attributes\nprevisores = base.iloc[:, 0:16].values\n\n# Class\nclasse = base.iloc[:, 16].values","a6a37d2e":"classe","c753c670":"for i, v in enumerate(classe):\n    if v == \"yes\":\n        classe[i] = 1\n    else:\n         classe[i] = 0","c5d8af27":"print(previsores[1])","25936e2a":"type(previsores)","6de05c31":"type(classe)","fbb99de9":"print(classe[0: 100])","ffd78959":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer","fac0d902":"onehotencoder = ColumnTransformer(transformers=[(\"OneHot\", OneHotEncoder(), [1, 2, 3, 4, 6, 7, 8, 10, 15])],remainder='passthrough')\nprevisores = onehotencoder.fit_transform(previsores)\nprevisores[1].dtype","d116fc2e":"type(previsores)","f398da33":"normalizar = preprocessing.normalize\nprevisores = normalizar(previsores)","5665064c":"previsores.shape","68b23933":"print(previsores[1])","58ba6650":"X_train,X_test,Y_train,Y_test = train_test_split(previsores,classe,test_size=0.25, random_state=2)","696b97a5":"type(X_train)","f101132e":"X_train[1]","a8bd3fe2":"Y_train[2: 10]","18bde107":"X_train = X_train.astype(np.float32)\nX_test = X_test.astype(np.float32)\n\nY_train = np.asarray(Y_train).astype(np.int).reshape((-1, 1))\nY_test = np.asarray(Y_test).astype(np.int).reshape((-1, 1))","80013674":"print(type(X_train), type(Y_train))\nprint(type(X_test), type(Y_test))","a59c6ef7":"print(X_train.shape, Y_train.shape)\nprint(X_test.shape, Y_test.shape)","a2bef67b":"# Define Sequential model with 3 layers\nmodel = keras.Sequential()\nmodel.add(layers.Dense(units = 250, activation=\"relu\", input_dim=51))\nmodel.add(layers.Dropout(0.3))\n\nmodel.add(layers.Dense(units = 150, activation=\"relu\"))\nmodel.add(layers.Dropout(0.3))\n\nmodel.add(layers.Dense(units = 150, activation=\"relu\"))\nmodel.add(layers.Dropout(0.2))\n\nmodel.add(layers.Dense(units = 50, activation=\"relu\"))\nmodel.add(layers.Dropout(0.2))\n\nmodel.add(layers.Dense(units = 50, activation=\"relu\"))\nmodel.add(layers.Dropout(0.2))\n\nmodel.add(layers.Dense(units = 1, activation=\"sigmoid\"))\n\nmodel.summary()\n","b621f182":"model.compile(optimizer = \"adam\", loss = \"binary_crossentropy\", metrics = [\"accuracy\"])","3d677fb3":"model.fit(X_train, Y_train, batch_size = 300, epochs=300, validation_data=(X_test, Y_test), verbose = 2)","b07fe32a":"previsoes = model.predict(X_test)","42df1541":"previsoes","4d0acad5":"for i in range(len(previsoes)):\n    if previsoes[i] > 0.75:\n        previsoes[i] = 1\n    else:\n        previsoes[i] = 0","05624836":"previsoes","213a8bfc":"Y_test","c9540248":"confusion_matrix = confusion_matrix(Y_test, previsoes)\nconfusion_matrix","3ce6e228":"import seaborn as sn\nimport matplotlib.pyplot as plt","2ef451e3":"sn.set(font_scale=1.4) # for label size\nplt.figure(figsize=(10,7))\nsn.heatmap(confusion_matrix, annot=True, annot_kws={\"size\": 14}) # font size\n\nplt.show()","905393de":"results = model.evaluate(X_test, Y_test, batch_size=128)","8345de3e":"results","7f4ac942":"\n# Criar objeto classificador de \u00e1rvore de decis\u00e3o\nclf = DecisionTreeClassifier()\n\n# Classificador de \u00e1rvore de decis\u00e3o Trainamento\nclf = clf.fit(X_train,Y_train)\n\n#Preveja a resposta para o conjunto de dados de teste\ny_pred = clf.predict(X_test)","118363da":"print(\"Accuracy:\",metrics.accuracy_score(Y_test, y_pred))","9ba1ee60":"# Criando o objeto classificador Random Forest\nrfc = RandomForestClassifier()\n\n# Classificador Random Forest Trainamento do modelo\nrfc = clf.fit(X_train,Y_train)\n\n# Preveja a resposta para o conjunto de dados de teste\ny_pred = rfc.predict(X_test)","91b90eda":"print(\"Accuracy:\",metrics.accuracy_score(Y_test, y_pred))","274efabe":"# Example for testing algorithms\nexemplo =np.array([20,\"student\",\"single\",\"secondary\",\"no\",502,\"no\",\"no\",\"cellular\",30,\"apr\",\"261\",1,-1,0,\"unknown\"]).reshape(1, -1) ","d8bfd163":"# Applying HotEncoder to Categorical Variables\nexemplo = onehotencoder.transform(exemplo)\nexemplo = normalizar(exemplo)","d7a7f32c":"rfc.predict(exemplo)","1a84a153":"clf.predict(exemplo)","750debb2":"ex_model = model.predict(exemplo)","aa814fc5":"ex_model","484261e0":"We must discard the duration attribute and convert categorical variables into numeric ones.\n","9787f09c":"# Checking for duplicate data in the database","639f4a13":"# DataFrame Info","3488a1d6":"The second model is also right","56cd5fbe":"# Creating machine learning model with sklearn","1a6015a8":"# Creating Model with DecisionTreeClassifier() Algorithm","01e5d51b":"# Creating a Machine Learning Model with Tensorflow and Keras","36e4eac1":"# Testing with DecisionTreeClassifier()","3ccc1fad":"# Viewing Data Description","88f13b69":"# Creating the Training and Testing databases","81713fe0":"# Applying the Normalization of Predictive Attributes","6f3d2da8":"# Plot Confusion Matrix of Machine Learning Model","682b5784":"# Attribute","05c428f4":"# Applying OneHotEncoder to Categorical Attributes of Forecasters","66172fba":"# Creating Model with RandomForestClassifier() Algorithm","56cfcb83":"# Context\nFind the best strategies to improve for the next marketing campaign. How can the financial institution have a greater effectiveness for future marketing campaigns? In order to answer this, we have to analyze the last marketing campaign the bank performed and identify the patterns that will help us find conclusions in order to develop future strategies.","be348e39":"# Database overview","8236a7e8":"# Predicting an Example\n## Actual Answer: \"yes\"","edc30ad6":"# Accuracy: 0.7628","eca7ad41":"# Testing with the Machine Learning Model","3b47e1b0":"# Bank Marketing - Predicting Term Deposit Suscriptions","b1b4d40d":"# Accuracy: 0.7671","df9cd471":"# Pearson correlations, which measures the strength of a linear relationship\nIn this case, we are checking the correlation between the attributes","17a54ff3":"# Database pre-processing","54ccd1cd":"# Accuracy: 0.8348","9f53553b":"#### we can see that the model got the prediction right, since for this example the answer was \"yes\"","4f2a3f6e":"# Checking for null data in the database","43d17c23":"# Analyze with graphics using Matplotlib + Seaborn","e699d7f5":"# Separating the prediction attributes and the database class","a5da4659":"# Converting the Class to Numeric Attributes","cda23db9":"# Testing with RandomForestClassifier() template"}}