{"cell_type":{"fa38d871":"code","592df5a7":"code","d7ac8f1e":"code","511294da":"code","461a1b2b":"code","c7a577b9":"code","6fd311b9":"code","daca04a9":"code","1b149eb5":"code","bbfd4f1a":"code","e4ebac60":"code","fbf19807":"code","78ed44b4":"code","55f3d0dc":"code","ce0ff5f0":"code","80166790":"code","b3f5a992":"code","f6332a55":"code","976382e9":"code","15f96ffb":"code","67f5972d":"code","5241a954":"code","ea60832e":"code","9e508b1a":"code","22491a46":"code","abc846ec":"code","ab4ddeeb":"code","3a44fa7f":"code","c55bbff3":"code","0d432c56":"code","0669af8c":"code","76dcbac1":"code","2f35e9bf":"markdown","8cf51d49":"markdown"},"source":{"fa38d871":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport sys\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nfrom torch.utils.data import Dataset, DataLoader\n\nfrom sklearn.preprocessing import StandardScaler    \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, classification_report\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import svm\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","592df5a7":"#Read procurement data\ndf_procurement = pd.read_csv('\/kaggle\/input\/prozorro-public-procurement-dataset\/Competitive_procurements.csv')\ndf_procurement.head()","d7ac8f1e":"df_procurement.info()\n#Some columns format are not correct","511294da":"df_procurement['lot_announce_date'] = pd.to_datetime(df_procurement['lot_announce_date'])","461a1b2b":"df_procurement.isnull().sum()","c7a577b9":"df_procurement.describe()","6fd311b9":"df_procurement.nunique()","daca04a9":"#Handle Missing values\ndf = df_procurement[['organizer_name','organizer_code']].drop_duplicates().reset_index(drop=True)\ndf[df['organizer_code'].isna()]","1b149eb5":"df[df['organizer_name']==df.at[70, 'organizer_name']]\ndf_procurement['organizer_code']=df_procurement['organizer_code'].fillna(20517231.0)\ndf_procurement.isnull().sum()\n#Finding: There is only one NaN in original data which is not a missing value","bbfd4f1a":"df = df_procurement[['participant_name','participant_code']].drop_duplicates().reset_index(drop=True)\ndf[df['participant_code'].isna()]","e4ebac60":"df_procurement['participant_code'] = df_procurement['participant_code'].fillna(df_procurement['participant_name'])","fbf19807":"df_procurement.isnull().sum()\n#All missing values are handled","78ed44b4":"#Number of procurements, organizers and participant over the years\ndf = pd.concat([df_procurement.groupby('lot_announce_year').lot_id.nunique(),\n          df_procurement.groupby('lot_announce_year').organizer_code.nunique(),\n          df_procurement.groupby('lot_announce_year').participant_code.nunique()], axis=1)\ndf.plot.bar()\n#Findings: Number of procurements, organizers and participants increased from 2015 to 2017. Then number of procurements starts to decrease but organizers and participants remains same.","55f3d0dc":"#What changes over the years.\n##Top 5 lot_cpv each year under each lot_procur_type.\ndf = pd.concat([df_procurement.groupby('lot_announce_year').lot_procur_type.nunique(),\n          df_procurement.groupby('lot_announce_year').lot_cpv.nunique(),\n          df_procurement.groupby('lot_announce_year').lot_cpv_2_digs.nunique(),\n               df_procurement.groupby('lot_announce_year').lot_cpv_4_digs.nunique()], axis=1)\ndf.plot.bar()\n#sns.pairplot(df_procurement, x_vars=['lot_initial_value'], y_vars=['lot_final_value'], kind='reg')\n#df_suppliers = pd.read_csv('\/kaggle\/input\/prozorro-public-procurement-dataset\/Suppliers.csv')#\n#df_suppliers.shape\n#df_suppliers.head()","ce0ff5f0":"df_procurement.columns","80166790":"df=df_procurement[['lot_announce_date','organizer_code','lot_cpv','lot_cpv_4_digs', 'lot_cpv_2_digs']]\ndf=df.drop_duplicates()\ndf['temp']=1\ndf['Org_lot_cpv_cumsum'] = df.groupby(['organizer_code','lot_cpv','lot_cpv_4_digs', 'lot_cpv_2_digs'])['temp'].cumsum()\ndf=df.drop(['temp'],axis=True)\ndf_procurement=df_procurement.merge(df,on=['lot_announce_date','organizer_code','lot_cpv','lot_cpv_4_digs', 'lot_cpv_2_digs'])\n\ndf=df_procurement[['lot_announce_date','organizer_code','lot_procur_type']]\ndf=df.drop_duplicates()\ndf['temp']=1\ndf['Org_lot_procur_type_cumsum'] = df.groupby(['organizer_code','lot_procur_type'])['temp'].cumsum()\ndf=df.drop(['temp'],axis=True)\ndf_procurement=df_procurement.merge(df,on=['lot_announce_date','organizer_code','lot_procur_type'])","b3f5a992":"df_procurement['temp']=1\ndf_procurement['Org_Par_Connection'] = df_procurement.groupby(['organizer_code','participant_code'])['temp'].cumsum()\ndf_procurement['Org_Par_lot_cpv_cumsum'] = df_procurement.groupby(['organizer_code','participant_code','lot_cpv','lot_cpv_4_digs', 'lot_cpv_2_digs'])['temp'].cumsum()\ndf_procurement['no_of_participant']=df_procurement.groupby(['organizer_code','lot_id'])['temp'].transform(\"count\")\ndf_procurement = df_procurement.drop(['temp'], axis=1)\ndf_procurement['Org_Par_supplier_cnt'] = df_procurement.groupby(['organizer_code','participant_code'])['supplier_dummy'].cumsum()\ndf_procurement['business_value'] = df_procurement['supplier_dummy']*df_procurement['lot_final_value']\ndf_procurement['Org_Par_business_value'] = df_procurement.groupby(['organizer_code','participant_code'])['business_value'].cumsum()\ndf_procurement = df_procurement.drop(['business_value'], axis=1)\ndf_procurement['Org_Par_region'] = (df_procurement['organizer_region']== df_procurement['participant_region']).astype(int)\ndf_procurement.describe()\n#Findings: Very few participant become frequent supplier to organizers over time\n#Findings: Very few participant made strong connections with Organizer over time","f6332a55":"df = df_procurement.groupby(['organizer_code','participant_code'])['lot_announce_date'].first().reset_index()\ndf.columns = ['organizer_code','participant_code', 'joining_date']\ndf_procurement = pd.merge(df_procurement,df,on=['organizer_code','participant_code'])\ndf_procurement['no_days_of_connectison']=(df_procurement['lot_announce_date']-df_procurement['joining_date']) \/ np.timedelta64(1, 'D')\n#df_procurement['no_of_participant']=df_procurement.groupby(['organizer_code','lot_id','participant_code']).sum()\n#df_procurement['no_days_of_time_pass'] = (df_procurement['lot_announce_date']-df_procurement['lot_announce_date'].min()) \/ np.timedelta64(1, 'D')\ndf_procurement.head(6)","976382e9":"df_procurement.columns","15f96ffb":"#1. Shift Org_Par_supplier_cnt and Org_Par_business_value one row down within group inorder to avoid seeing future\ndf_procurement['Org_Par_supplier_cnt_shift']=df_procurement.groupby(['organizer_code','participant_code'])['Org_Par_supplier_cnt'].shift()\ndf_procurement['Org_Par_business_value_shift']=df_procurement.groupby(['organizer_code','participant_code'])['Org_Par_business_value'].shift()\ndf_procurement['Org_Par_supplier_cnt_shift']=df_procurement['Org_Par_supplier_cnt_shift'].fillna(0)\ndf_procurement['Org_Par_business_value_shift']=df_procurement['Org_Par_business_value_shift'].fillna(0)","67f5972d":"sns.countplot(x=df_procurement['supplier_dummy'])","5241a954":"#X=df_procurement[['lot_initial_value','Org_lot_cpv_cumsum',\n#       'Org_lot_procur_type_cumsum', 'Org_Par_Connection',\n#       'Org_Par_lot_cpv_cumsum', 'no_of_participant', 'Org_Par_supplier_cnt',\n#       'Org_Par_business_value', 'Org_Par_region',\n#       'no_days_of_connectison']]\n#Y=df_procurement['supplier_dummy']\n#X['lot_initial_value']=((X['lot_initial_value']-X['lot_initial_value'].min())\/(X['lot_initial_value'].max()-X['lot_initial_value'].min()))\n#X['Org_Par_business_value']=((X['Org_Par_business_value']-X['Org_Par_business_value'].min())\/(X['Org_Par_business_value'].max()-X['Org_Par_business_value'].min()))\n#X.head()","ea60832e":"X=df_procurement[['lot_procur_type','Org_lot_cpv_cumsum',\n       'Org_lot_procur_type_cumsum', 'Org_Par_Connection',\n       'Org_Par_lot_cpv_cumsum', 'no_of_participant', 'Org_Par_supplier_cnt',\n       'Org_Par_business_value', 'Org_Par_region',\n       'no_days_of_connectison']]\nY=df_procurement['supplier_dummy']\nX['Org_Par_business_value'] = pd.cut(X['Org_Par_business_value'], bins=10)\nX.head()\nX=pd.get_dummies(X)","9e508b1a":"X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.2,random_state=10)","22491a46":"lr = LogisticRegression()\nlr.fit(X_test, Y_test)\ny_prob=lr.predict_proba(X_test)[:,1]\ny_pred=np.where(y_prob>0.5,1,0)\nconfusion_matrix = metrics.confusion_matrix(Y_test, y_pred)\nprint(confusion_matrix)\nauc_roc = metrics.roc_auc_score(Y_test, y_pred)\nprint(auc_roc)","abc846ec":"#LDA\nlda = LinearDiscriminantAnalysis()\nlda.fit(X_test, Y_test)\ny_pred=lda.predict(X_test)\nconfusion_matrix = metrics.confusion_matrix(Y_test, y_pred)\nprint(confusion_matrix)","ab4ddeeb":"SVM = svm.LinearSVC()\nSVM.fit(X_test, Y_test)\ny_pred=SVM.predict(X_test)\nconfusion_matrix = metrics.confusion_matrix(Y_test, y_pred)\nconfusion_matrix","3a44fa7f":"RF = RandomForestClassifier(n_estimators=100, max_depth=10, random_state=0)\nRF.fit(X_test, Y_test)\ny_pred=RF.predict(X_test)\nconfusion_matrix = metrics.confusion_matrix(Y_test, y_pred)\nprint(confusion_matrix)\nprint(classification_report(Y_test, y_pred))","c55bbff3":"RF = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=0)\nRF.fit(X_test, Y_test)\ny_pred=RF.predict(X_test)\nconfusion_matrix = metrics.confusion_matrix(Y_test, y_pred)\nprint(confusion_matrix)\nprint(classification_report(Y_test, y_pred))","0d432c56":"NN = MLPClassifier(solver='lbfgs', alpha=1e-5, hidden_layer_sizes=(100, 20), random_state=1)\nNN.fit(X_test, Y_test)\ny_pred=NN.predict(X_test)\nconfusion_matrix = metrics.confusion_matrix(Y_test, y_pred)\nconfusion_matrix","0669af8c":"EPOCHS = 10\nBATCH_SIZE = 64\nLEARNING_RATE = 0.001\n\n\n#X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=69)\ny_train = Y_train\ny_test = Y_test\n\n## train data\nclass trainData(Dataset):\n    \n    def __init__(self, X_data, y_data):\n        self.X_data = X_data\n        self.y_data = y_data\n        \n    def __getitem__(self, index):\n        return self.X_data[index], self.y_data[index]\n        \n    def __len__ (self):\n        return len(self.X_data)\n\n\ntrain_data = trainData(torch.Tensor(X_train.values), torch.FloatTensor(y_train.values))\n## test data    \nclass testData(Dataset):\n    \n    def __init__(self, X_data):\n        self.X_data = X_data\n        \n    def __getitem__(self, index):\n        return self.X_data[index]\n        \n    def __len__ (self):\n        return len(self.X_data)\n    \n\ntest_data = testData(torch.FloatTensor(X_test.values))\n\ntrain_loader = DataLoader(dataset=train_data, batch_size=BATCH_SIZE, shuffle=True)\ntest_loader = DataLoader(dataset=test_data, batch_size=1)\n\nclass binaryClassification(nn.Module):\n    def __init__(self):\n        super(binaryClassification, self).__init__()\n        # Number of input features is 10.\n        self.layer_1 = nn.Linear(22, 64) #10,22\n        self.layer_2 = nn.Linear(64, 64)\n        self.layer_out = nn.Linear(64, 1) \n        \n        self.relu = nn.ReLU()\n        self.dropout = nn.Dropout(p=0.1)\n        self.batchnorm1 = nn.BatchNorm1d(64)\n        self.batchnorm2 = nn.BatchNorm1d(64)\n        \n    def forward(self, inputs):\n        x = self.relu(self.layer_1(inputs))\n        x = self.batchnorm1(x)\n        x = self.relu(self.layer_2(x))\n        x = self.batchnorm2(x)\n        x = self.dropout(x)\n        x = self.layer_out(x)\n        \n        return x\n    \ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(device)\n\nmodel = binaryClassification()\nmodel.to(device)\nprint(model)\ncriterion = nn.BCEWithLogitsLoss()\noptimizer = optim.Adam(model.parameters(), lr=LEARNING_RATE)\n\ndef binary_acc(y_pred, y_test):\n    y_pred_tag = torch.round(torch.sigmoid(y_pred))\n\n    correct_results_sum = (y_pred_tag == y_test).sum().float()\n    acc = correct_results_sum\/y_test.shape[0]\n    acc = torch.round(acc * 100)\n    \n    return acc\n\n\nmodel.train()\nfor e in range(1, EPOCHS+1):\n    epoch_loss = 0\n    epoch_acc = 0\n    for X_batch, y_batch in train_loader:\n        X_batch, y_batch = X_batch.to(device), y_batch.to(device)\n        optimizer.zero_grad()\n        \n        y_pred = model(X_batch)\n        #print(y_pred)\n        #print(y_batch.unsqueeze(1))\n        \n        loss = criterion(y_pred, y_batch.unsqueeze(1))\n        acc = binary_acc(y_pred, y_batch.unsqueeze(1))\n        \n        loss.backward()\n        optimizer.step()\n        \n        epoch_loss += loss.item()\n        epoch_acc += acc.item()\n        \n\n    print(f'Epoch {e+0:03}: | Loss: {epoch_loss\/len(train_loader):.5f} | Acc: {epoch_acc\/len(train_loader):.3f}')\n    \n    \n    \ny_pred_list = []\nmodel.eval()\nwith torch.no_grad():\n    for X_batch in test_loader:\n        X_batch = X_batch.to(device)\n        y_test_pred = model(X_batch)\n        y_test_pred = torch.sigmoid(y_test_pred)\n        y_pred_tag = torch.round(y_test_pred)\n        y_pred_list.append(y_pred_tag.cpu().numpy())\n\ny_pred_list = [a.squeeze().tolist() for a in y_pred_list]\n\nconfusion_matrix(y_test, y_pred_list)","76dcbac1":"print(classification_report(y_test, y_pred_list))","2f35e9bf":"## 2.1. Extract organizer features","8cf51d49":"# 2.**Feature Extraction between Organizer and Participant over time**"}}