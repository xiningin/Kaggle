{"cell_type":{"bf4e742d":"code","88d2a6e5":"code","478616f2":"code","f01cf84c":"code","6f571392":"code","6ed33727":"code","e94e8802":"code","11071d16":"code","2c228509":"code","f55398f0":"code","f697e7ad":"code","4e253ae6":"code","cd92f80b":"code","e0bd3e95":"code","c4ef3ac8":"code","797cbbc5":"code","021ab9f3":"code","62ae5003":"code","87f1086c":"code","10cea5e2":"code","11b7b9ca":"code","67a0a8b9":"code","7886b0a3":"code","9d1a51d6":"code","25f3c6ff":"code","ef2adaf4":"code","bb8990e1":"code","89b25157":"code","01a17fef":"code","65a1807c":"code","48b4b209":"code","fbcdb8f1":"markdown","97406ae4":"markdown","12ab0718":"markdown","19d08773":"markdown","06ffc34c":"markdown","de8b5562":"markdown","bf29ce09":"markdown","6b2a28e0":"markdown","eab933e2":"markdown","15c5ec8d":"markdown","a02dfc7c":"markdown","5a6629b0":"markdown","25c97659":"markdown","fb795d15":"markdown","96551e6b":"markdown","42a17504":"markdown","777b2533":"markdown","16ca1e95":"markdown","dc1693b9":"markdown","27f2658c":"markdown","8fcabb0b":"markdown","a2626a67":"markdown","b6f7933d":"markdown","303433a9":"markdown","b8d3ae14":"markdown","fec671f4":"markdown","203cc76e":"markdown","fa69dcd8":"markdown","780c7366":"markdown","c779fe20":"markdown","c5b53520":"markdown","27881186":"markdown","04ea1ae6":"markdown","58a01ea3":"markdown","3652138c":"markdown","a75b81c8":"markdown","7a8b30e6":"markdown","b38fe9c6":"markdown","2ad6ebae":"markdown","407bedff":"markdown"},"source":{"bf4e742d":"import numpy as np \nimport pandas as pd\nimport os\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt\nimport matplotlib.cbook as cbook\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom plotly.offline import init_notebook_mode, plot, iplot\nimport plotly\nimport plotly.graph_objs as go\ninit_notebook_mode(connected=True)\nimport plotly.plotly as py\nimport plotly.graph_objs as go\n\n","88d2a6e5":"train = pd.read_csv('..\/input\/train_V2.csv')","478616f2":"train.sample(5)","f01cf84c":"train.info()","6f571392":"f,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(train.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax,center=0)\nplt.show()","6ed33727":"corr_with_target = train.drop(['Id', 'matchId', 'groupId', 'winPlacePerc'], 1).corrwith(train['winPlacePerc'])\ncorr_with_target\n\ncombat_features=['assists',\n'damageDealt',\n'DBNOs' ,\n'headshotKills',\n'kills',\n'killStreaks',\n'vehicleDestroys',\n'weaponsAcquired',\n'longestKill']\ncombat_with_target = train[combat_features].corrwith(train['winPlacePerc'])\ntrace_combat = go.Scatter(\n    x = combat_with_target.index,\n    y = combat_with_target.values,\n    mode = 'markers+lines',\n    marker = dict(\n        size = 10,\n        color = 'rgba(255, 182, 193, .9)',\n        line = dict(\n            width = 2\n        )))\ndata_combat = [trace_combat]\nlayout = {'title': 'Correlation between winPlacePerc and combat attributes',\n          'yaxis' : {'title' : 'winPlacePerc'},\n          'xaxis' : {'tickangle' : 45}}\n\n\nfig = go.Figure(data=data_combat, layout=layout)\niplot(fig, show_link=False)\n\n\n","e94e8802":"print(\"**** Weapons Acquired Stats ****\")\nprint(\"Average person acquires {:f} weapons per match\".format(train['weaponsAcquired'].mean()))\nprint(\"Maximum weapons ever recorded in a match is  :{:f}\".format(train['weaponsAcquired'].max()))","11071d16":"plt.figure(figsize=(15,10))\nplt.title(\"weaponsAcquired\",fontsize=15)\nsns.distplot(train['weaponsAcquired'])","2c228509":"data_fist_attack=train.copy()\nplt.figure(figsize=(15,10))\ndata_fist_attack=data_fist_attack[data_fist_attack.weaponsAcquired==0]\ndata_fist_attack_grouped=data_fist_attack.groupby('kills')['damageDealt'].mean()\nplt.title(\"Damage and kills by players without weapons\")\ndata_fist_attack_grouped.plot()\nplt.show()","f55398f0":"print(\"**** Kill Streaks Stats ****\")\n\nprint(\"Average Kill streaks per match is {:f}.\".format(train['killStreaks'].mean()))\nprint(\"highest kill streaks ever recorded in a match is  {:f}\".format(train['killStreaks'].max()))\nsns.distplot(train['killStreaks'])","f697e7ad":"sns.jointplot(x=\"winPlacePerc\", y=\"killStreaks\",  data=train,  ratio=3, color=\"blue\")\nplt.show()","4e253ae6":"plt.figure(figsize=(15,10))\nplt.title(\"longestKill\",fontsize=15)\nsns.distplot(train['longestKill'])\nprint(\"**** Longest Kill Stats ****\")\nprint(\"longest kill ever recorded was :{:f} meters\".format(train['longestKill'].max()))\nprint(\"Average shot is about {:f} meters\".format(train['longestKill'].mean()))","cd92f80b":"train_headshotkills_temp=train.copy()\ntrain_headshotkills_temp.loc[train_headshotkills_temp['headshotKills']>4]='4+'\nsns.countplot(x=train_headshotkills_temp['headshotKills'].astype('str').sort_values())\n","e0bd3e95":"print(\"****HeadShot Kills Stats****\")\nprint(\"Most recorded headshots ever in a match is :{:f}\".format(train['headshotKills'].max()))\nprint(\"83% of people have {} headshots\".format(train['headshotKills'].quantile(0.83)))\nprint(\"Avergare Headshots:{:f}\".format(train['headshotKills'].mean()))","c4ef3ac8":"data_headshot0 = train.copy()\ndata_headshot0 = data_headshot0[data_headshot0['headshotKills']==0]\nsns.jointplot(x=\"winPlacePerc\", y=\"kills\",  data=data_headshot0,  ratio=3, color=\"blue\")\nplt.show()","797cbbc5":"train_temp=train.copy()\ntrain_temp.loc[train_temp['kills']>7]='7+'\ntrain_temp.groupby(['kills']).groups.keys()\nplt.figure(figsize=(15,10))\nsns.countplot(y=train_temp['kills'].astype('str').sort_values())","021ab9f3":"print(\"****Kills Stats*****\")\n\nprint(\"Most num of kills  ever recorded in a match is :{:f}\".format(train['kills'].max()))\nprint(\"90% of people have {} kills\".format(train['kills'].quantile(0.99)))\nprint(\"Strangly last 10% of the data have a drastic increase in kill count, which is  {}\".format(train['kills'].quantile(0.99)))\nprint(\"Avergare kills:{:f}\".format(train['kills'].mean()))","62ae5003":"kills = train.copy()\n\nkills['killsCategories'] = pd.cut(kills['kills'], [-1, 0, 2, 5, 10, 60], labels=['0_kills','1-2_kills', '3-5_kills', '6-10_kills', '10+_kills'])\nsns.barplot(x=\"winPlacePerc\", y=\"killsCategories\",\n              data=kills)\n","87f1086c":"train_temp2=train.copy()\nvar=train_temp2[train_temp2.kills<2]\n\nsns.jointplot(x=var['winPlacePerc'], y=var['kills'],  data=var,  ratio=3, color=\"blue\")\nplt.show()\n","10cea5e2":"train_temp3=train.copy()\nvar3=train_temp3[train_temp3.kills<2]\nvar4 = var3.corr()['winPlacePerc'].nlargest(5)\nvar4=var4.drop(labels=['winPlacePerc' ])\n\ntrace3 = go.Scatter(\n    x = var4.index,\n    y = var4.values,\n    mode = 'markers+lines',\n    marker = dict(\n        size = 10,\n        color = 'rgba(255, 182, 193, .9)',\n        line = dict(\n            width = 2\n        )))\n\ndata2 = [trace3]\n\nlayout = {'title': '0 - 1 kills Correlation with Target(top 5)',\n          'yaxis' : {'title' : 'winPlacePerc'},\n          'xaxis' : {'tickangle' : 45}}\n\nfig = go.Figure(data=data2, layout=layout)\niplot(fig, show_link=False)","11b7b9ca":"        \ndamage = train.copy()\ndamage_bins=[-1,0,200,400,600,1000,3000,6616]\ndamage_groups=[\"0\",\"1-200\",\"200-400\",\"400-600\",\"600-1000\",\"1000-3000\",\"3000-6616\"]\ndamage['damageCategories'] = pd.cut(damage['damageDealt'],damage_bins,labels=damage_groups)\nplt.figure(figsize=(15,10))\nkill_bins=[-1, 0, 2, 5, 10, 60]\nkill_groups=['0_kills','1-2_kills', '3-5_kills', '6-10_kills', '10+_kills']\ndamage['killsCategories'] = pd.cut(damage['kills'],kill_bins, labels=kill_groups)      \nsns.barplot(x=\"damageCategories\", y=\"winPlacePerc\",\n              data=damage,hue='killsCategories')","67a0a8b9":"print(\"Max damage dealt ever :{:f}\".format(train['damageDealt'].max()))\nprint(\"50% of people have dealt: {} \".format(train['damageDealt'].quantile(0.50)))\nprint(\"min damage dealt :  {}\".format(train['kills'].min()))\nprint(\"Avergare damage:{:f}\".format(train['damageDealt'].mean()))","7886b0a3":"train_temp4=train.copy()\nkills_wins = ['kills',\n              'DBNOs',              \n'headshotKills',\n'heals',     \n'killPlace',       \n'killPoints',        \n'kills',        \n'killStreaks',\n'longestKill']\nkills_wins_with_damage = train[kills_wins].corrwith(train['damageDealt'])\n\ntrace6 = go.Bar(\n    x=kills_wins_with_damage.index,\n    y=kills_wins_with_damage.values,\n     marker=dict(\n        color='rgb(49,130,189)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5,\n        )\n    ),\n    opacity=0.6\n)\n\ndata = [trace6]\n\nlayout = {'title': '0 - 1 kills Correlation with Target',\n          'yaxis' : {'title' : 'Combat co-relation with Damage'},\n          'xaxis' : {'tickangle' : 45}}\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, show_link=False)","9d1a51d6":"train_temp4=train.copy()\nkills_wins = ['kills','damageDealt']\nkills_wins_with_damage = train[kills_wins].corrwith(train['winPlacePerc'])\n\ntrace6 = go.Bar(\n    x=kills_wins_with_damage.index,\n    y=kills_wins_with_damage.values,\n     marker=dict(\n        color='rgb(158,202,225)',\n        line=dict(\n            color='rgb(8,48,107)',\n            width=1.5,\n        )\n    ),\n    opacity=0.6\n)\n\ndata = [trace6]\n\nlayout = {'title': 'kills vs Damage Correlation with Target',\n          'yaxis' : {'title' : 'Damage Dealth Co-relations'},\n          'xaxis' : {'tickangle' : 45}}\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig, show_link=False)","25f3c6ff":"\nsurvival_features=[\n'heals',\n'boosts',]\n\nsurvival_with_target = train[survival_features].corrwith(train['winPlacePerc'])\n    \ntrace = go.Scatter(\n    x = survival_with_target.index,\n    y = survival_with_target.values,\n    mode = 'markers+lines',\n    marker = dict(\n        size = 20,\n        color = 'rgba(255, 182, 193, .9)',\n        line = dict(\n            width = 2\n        )))\ndata = [trace]\nlayout = {'title': 'Correlation between winPlacePerc and survival attributes',\n          'yaxis' : {'title' : 'winPlacePerc'},\n          'xaxis' : {'tickangle' : 45}}\n\n# Display it\nfig = go.Figure(data=data, layout=layout)\niplot(fig, show_link=False)","ef2adaf4":"print(\"**** Boost and Heal Stats ****\")\nprint(\"The average person uses {:.1f} heal items\".format(train['heals'].mean()))\nprint(\"99% of people use {} or less,\".format(train['heals'].quantile(0.99)) )\nprint(\"Maximum heal items ever used in a match {:.1f} heal items\".format(train['heals'].max()))\n\nprint(\"The average person uses {:.1f} boost items\".format(train['boosts'].mean()))\nprint(\"99% of people use {} or less,\".format(train['boosts'].quantile(0.99)) )\nprint(\"Maximum heal items ever used in a match {:.1f} heal items\".format(train['boosts'].max()))\n","bb8990e1":"print(\"**** WalkDistance Stats ****\")\nprint(\"The average person runs\/walks {:.1f} meters\".format(train['walkDistance'].mean()))\nprint(\"Maximum distance covered on foot is {:.1f} meters\".format(train['walkDistance'].max()))\n\nprint(\"**** Swimming Stats ****\")\nprint(\"The average person swims {:.1f} meters\".format(train['swimDistance'].mean()))\nprint(\"Maximum swim distance covered in a match is  {:.1f} meters \".format(train['swimDistance'].max()))\n\nprint(\"**** Ride Distance Stats ****\")\nprint(\"An average person covers : {:.2f} meters on a vehicle\".format(train['rideDistance'].mean()))\nprint(\"Max distance covered on vehicle in a game is  : {} meters\".format(train['rideDistance'].max()))\n","89b25157":"distance_covered_features=['rideDistance','swimDistance','walkDistance']\n\ndistance_covered_with_target = train[distance_covered_features].corrwith(train['winPlacePerc'])\n    \ntrace = go.Scatter(\n    x = distance_covered_with_target.index,\n    y = distance_covered_with_target.values,\n    mode = 'markers+lines',\n    marker = dict(\n        size = 20,\n        color = 'rgba(255, 182, 193, .9)',\n        line = dict(\n            width = 2\n        )))\ndata = [trace]\nlayout = {'title': 'Correlation between winPlacePerc and distance covered attributes',\n          'yaxis' : {'title' : 'winPlacePerc'},\n          'xaxis' : {'tickangle' : 45}}\n\n# Display it\nfig = go.Figure(data=data, layout=layout)\niplot(fig, show_link=False)","01a17fef":"plt.figure(figsize=(15,10))\ndf1= pd.pivot_table(train, values=['walkDistance','swimDistance','rideDistance'],index='winPlacePerc')\ng = sns.pairplot(df1)","65a1807c":"data_teams=train.copy()\nsolos=data_teams[data_teams['numGroups']>50]\nduos = data_teams[(data_teams['numGroups']>25) & (data_teams['numGroups']<=50)]\nsquads = data_teams[data_teams['numGroups']<=25]\nprint(\"Out of total {} games,there are {} ({:.2f}%) solo games, {} ({:.2f}%) duo games and {} ({:.2f}%) squad games.\".format(len(data_teams),len(solos), 100*len(solos)\/len(data_teams), len(duos), 100*len(duos)\/len(data_teams), len(squads), 100*len(squads)\/len(data_teams),))","48b4b209":"sns.lmplot(x='kills', y='winPlacePerc', data=solos,fit_reg=False)\nax = plt.gca()\nax.set_title(\"Solo Games \")\n\nsns.lmplot(x='kills', y='winPlacePerc', data=duos,fit_reg=False)\nax = plt.gca()\nax.set_title(\"Duo Games\")\n\nsns.lmplot(x='kills', y='winPlacePerc', data=squads,fit_reg=False)\nax = plt.gca()\nax.set_title(\"Squad Games \")","fbcdb8f1":"## Exploratory Data Analysis - Player Unknown Battlegrounds(PUBG)","97406ae4":"walk distance,weapons acquired and boosts are still the key features here","12ab0718":"**Weapons Acquired** - Number of weapons acquired in a match (this also included weapons that you have used and dropped)","19d08773":"![](https:\/\/lh3.googleusercontent.com\/zBCKXXknEGqFPbRJ9mnQfELBvFFaQOrSTPWN1liFno_OfgBgkLxI4ItLBYsdcpHoGRD_K3Q3qL5n7blH94WW1eztNtP-LvcEEAx5TgMBo1ExaaKEjVmhRSu_HJFE-NTUperD_ThiK1BsfwMmXb27LK7vdZJAU8qkmN5ozv83Jl3k30e8nWnCUJpOJaNuDQZFbauhCVxAc9Ea0PkD5BzaipLsT2p9gGTlFynYUW6GjJXrNbdqpMzh8XV8QsjfLteB9m9grR9NLT72K_FLY8Kvll1GAYQ8RlkDanGKCtUszS6ZnHgBbRL3I7xSXzkOFbNYp-MhNBwPtMhSyOgel0a2Klh4pQDzc3l88G4gpAfLMrPIGgwr5civgc8KFAeHJgFF617BApOJMb_ACOV26mWQ-h2qkAH7DpVryPt6e61TvntfiwgK1hX6LICcR-ut1ifFxCL11HfHhvQYVO55zj7yNHAiz5tBf8yVGmRc-fpCGqujQXj4ZSqWQT9Z-ZDXXqHk2MdJXpsmZshdcuMzTjI6ybccJ1aQqB7Hz_b27XQyjzl8-8xR5iC1nOWKlcv4gquGqMBdgnAQ3xR6ZXj_pPzBxZOjnBBGLqIUOU1I1nMfkRpX3jqu9CP4_tMne2llXYEqlUqi79aC8siY9QK9foxylvnq=w1120-h608-no)","06ffc34c":"**[Combat Features](#Combat)**","de8b5562":"we certainly have some Muhammad Ali fans out here\n","bf29ce09":"Apparently most of the players prefer riding and running over swimming","6b2a28e0":"kills in a certain timeframe, not sure how long that period is.\nCouple of cases that comes to my mind:-\n- After every kill, you spend some time healing before kill the next one.\n- You run up on a 4 man squad, knock three of them, then kill the fourth, your kill streak would be 4, as the other three would insta-die, in the certain time frame as referenced by \n- Gamers like shroud,ninja,docdisrespect wipes out an entire squad (one after another) in a span of few secs.\n","eab933e2":"Can players with 0 or just 1 kill contribute or make a difference","15c5ec8d":"couple of observations\n1. --Walk distance is highly co-related among all other features.\n1. --Kill place is negatively co-related with target\n1. --Boosts and weapons acquired have the 2nd highest co-relation.\n\nLets break it down into combat, survival, distance covered and check the co-relations to proceeed further.","a02dfc7c":"Creating Kill Categories in-order to have a better visibility","5a6629b0":"Kills and Damage vs Target","25c97659":"Weapons Acquired has the highest co-relation among all the other combat  features.","fb795d15":"This clearly show kills do not contribute much in squad game play's, as it is more of a team gameplay. ","96551e6b":"winPerc distribution from 0.4 till 1.0 is quite close, this shows that number of headshots doesnot really matter. Lets dive deep into damage and kills\n","42a17504":"Apparently players with less then 2 kills are also winners, what are the odds\n\nlets see how the other features contribute","777b2533":"winners have 10+ kills and  damage caused by them is in between 200 - 400","16ca1e95":"![](https:\/\/lh3.googleusercontent.com\/d4h89nYI18GD2Xd0braJVh38eNrvRu0wXvj1gv24P5Dfgw2JWn1WR_4hp_SdKz6MpdcUmH_JmK0UI955MqSfAOuNfz8gF2XrGJaWBdtVAJIVVs9L5UeY8IhWIciFKN953lyEHLsiMM6Jltom_nrOZfXy_w0d3KeFa08N8UiIgdxmFzFVV7KCYLouxMya9QYkdYaZEL0piQx0VuW5VfwDr3Pyr2g-VFu3lNoxR9fc9lLBN3LTbblXOYKaRcdHtBcFW0HN7IoBU9aOFVVBa2J8372-gFS1gvLmT9wfGCy_I2Bo89AQKgv_v3VmCmFXHVJggxDAFfXup1fsJcTDJ3lVrQsW-SdaEPmHK8ILqGXF9TLiTjpaVUPP9TfZEvyCBRt63FblA-6rqOtzi09uUM8He4N9tp-HnaJcrKYdmW3hSXM_CyPPjzjgHcXytKQfubLKAMmAzO68lDjcbN8K_fXTQ9TgJwT-0Pbk7e1thYPG9kYuNfcEJxzSQ4JhNxIJdftzTLb3dqq9x6wb6EFxDFkMjTeSZrK0olDYsG0gGon1ITgRt8dGVS0cZOfvnKtSuaRmuoWFVhDdaQdzcK69Y0GnMhudJhSMEg4_NFdP-hENGZH8na6Q7vYLn5aHGVuHdE5A_a8_0EmOxcJsmwaFG-bRYxaB=w1081-h608-no)","dc1693b9":"Lets see how  other combat features are co-related to damage","27f2658c":"**Longest Kill Shots** - From what distance the,the player have killed an enemy\n\n**Headshot Kills** - number of enemies killed via headshots","8fcabb0b":"![](https:\/\/lh3.googleusercontent.com\/wp4NJbtEcT97Js7vwZu0GBvDVMD17WiXzilU-krE0O8UYsJkE-YPX3scTEX4bOhLfTbdlQfSE29aCVzN0jlR18OWoqXFrTXWCunSXEYeki2LqUa_ktfK3GkgKZayQJuGPt7PtsdGseIa4gfq4StIF7V9uK7qwdF_3LCzRK4VjxRdTKiyX5K1D8OwVYx2myasgSJ8exbtYMOr0InIDUPzunvH67CsJQXhW_WfgL5vEnHDaITvk5M-loX8mLNxTNz_mfu2Dk685GhWuffkoe9QC_IlCYQidl4n0S78dn312xl2pyCm3kKL7TSDWnjbBqjqV7TLlQGpx22RBQxAGR8CqUog5XRhCGtDGS03MrLEwDGRSpzPWzOvAVT2vnWYOYIIBLbKmhtWSsx0xLxkyIJaTsIhfBThuecrC8JkdDr5QKGevwy-QKG3Rm0h168wAg1H02fBhkXS16PHHZwZSxTS1dgefOvnltB54DttKvmBlgj25DgoSHYrcl3Xfbdvs302_wcie4M9pkCPlYADGjkKztfMfQz22HLy-P8aguTpZtUrrzN7tz5cgKu7f7KLAffVpZSzAz6ntqtk3NHHy1bPMcHrNA9QAh_Yu6Y6FbCLIVRxx2rZDlvcKwpBH2jzUEj-SFhn1AtbRRNJoSnKKPC0iDNs=w1115-h608-no)","a2626a67":"Both are positively corelated with WinPlacePerc but boost is a bit high","b6f7933d":"**Boost**  - Number of Boost items used in a match.\n\n**Heals**  - Number of Heal items used in a match.\n","303433a9":"Co-Relation between walking and target is highest, keep running fellas","b8d3ae14":"  ** [Survival Features](#Survival)**\n","fec671f4":"**Kills** - Number of enemy players killed in a match  \n**Damage Dealt** - Amount of damage caused","203cc76e":"what about people with no weapons, lets see avegage damagedealt by players with no weapons","fa69dcd8":"![](https:\/\/lh3.googleusercontent.com\/aA6vbfu63on6cGM7FEOth-yU1pYj_A9OebxFRddp1mw3ZrToKTWdyteJTPwC97vdDqFb7MSZwqCIVZSEtcIiZYuaKhS0AUWf-PXz-MaZvAjJYlhuXpKSPim0YbSoYS7zpQhoUlqs0Fh5i7BxB8ngL1vcL3huB4QOmytQiplewCYl8hu3FqpD4Xxxaj-gvmmGt8bFrZPvljWLDrlbEk-PIcCh9ZZ43Khr__iq-BiOVb3htzrGzGL6vAt9JXvvMkNw218TieawJDYeygM6IKEdsCufzXGGQvNGkCMsb742cyUrke50s4g5P55qw443dV2kEl1CNfXyjZwdZt_KcDG6VjZmMEsjYFdH-O4_Hr3pGW1tS1y9ed1CgWmw8UfskIdjIRuv1Vp9RFrBz3dDFevj9oBBwI48TZQfvoGbfA3A4i4noeSCrxXaYQlGktYyzfEBn7tveew9isUbRBxMF4nRcy-Oy45nD5e1mVbUH3WASG0s1pvrmQ_zi7L0oRC4Q5ct-uU8EA8rdevENeUJZu_SOvUa8We4FeoJPwKXnyAMtl4t3QwgAn_4pd6K_Y0FE5MiiT4hHuHK0hVbaafGJdH4dwaKvqam4zkbNskDyfPRTRSkRU2KC5X389ekfkLXL4NEZ6A0NoChTw6PHXqj0gsCWLKhpyvKly_yu9213sCetFbnTXqxof8T1ofw-4bwZH5eCjuMp0dnMHPF43KnEg=w1239-h608-no)","780c7366":"Lets see how the winPlacePerc is distributed since 83% player have 0 headshot kills","c779fe20":"Lets see how the data looks","c5b53520":"**[Distance Covered Features](#Distance)**\n  ","27881186":"Data type,Memory usage and total number of records","04ea1ae6":"![](https:\/\/lh3.googleusercontent.com\/BBUOavltUo9SBR9TamY_j2bUG94KKTK8ej_BRhyfJPEJyEUJLepVPBOQzpZtG6-QAQGmoljyKyc-K_fuUdEZ-JHUGXzVDozVqd2EuglowasmPVnbjzM6qCcThU_Yp1AVebIdfO5GFMqGvxmhhuRnGAewnpWqHJKssrpak8XXaKLImBT1tgtlaEit81owCype1mMskdHFEroZ4gbngxwJz3Y-_LtmbITMtnQs-TJQc_mkqHsjt59f1DIZxkkpOwClDWhsOzdiuy53JUSGZO2fTd2tk7w03TPr_kN-O7n8-ql7ov95sfvZ9sOrkn56PeM7kQr3PWLMEmGItW8rxNxj9adaDCmO6HiH-ySv4fBGofXEG3VdVHzRGol9gyNyP-AKJJ8xW4ta9DKx7xJYTkJmHkI1GLmjbYE2oluZKUe8V1IKRiwYJNMSJlq0bhBl3JowgDPLkJEYUXaTcFTYArMNfOprwX3QG8ANbxCHpj9rkuDi26Ajyzvuvf9fy9lTMsTenKsBvgrwVK5MYbBv1JvDsrreGPbgTR-0q24zn7OKcYfAXTH-84SQkaWoXC6bsglrZTcYA_S6nlmLGWRyhhkAFwRQ6C2XfDgp5Rt8IxtKKelBxSeNGZPcmYFiGy3XdixzLhVkcuvBtis5iM0d6u2SZfBK3lu9WGo4IeJPpv5iYmd5dWKSbjFACGxlI8XrNR-IDmjF98FXsojqh6Ii-g=w1239-h608-no)","58a01ea3":"Co-Relation Matrix \n","3652138c":"kills and damage are highl co-related.\n\nLets comapare how Kills and Damage are co-related with Target","a75b81c8":"**kill Streaks** - Number of enemy killed in a short time frame.","7a8b30e6":"** Solo \/ Duo \/ Squad  games**","b38fe9c6":"![](https:\/\/lh3.googleusercontent.com\/XYar0zRLl0jL_YlrvwdmH0HurNHJSvMXm7SOyUph7UCxTOKylpuv9lCEegn_ReYFyQWlLl0oPUsRnqLEt4EyHR1afXji872eVvNn055zdAg-gUN9d6QheS9qQ9iA8ZGRRSBJ4S_FdFy9NcjOjzrbtcvGFlcnKr2Qr2mkWXFChOVU8vkSe-ifFvJEau0KZ-JhEOftNxvzNvctZJSRAu3G8uKyVOmgp2AiwM0TbZy2xA49mMzqSmqQlpPg4Sq82or2ELWiu7rMTqy91l4HvE6Q_LR3rGlPdm6FGybtk4wiQekrwq_cWCa16JqaONb2kjy6FN1HrnH7jCfaw9K5flucJMcdNxiysJ13s9QEg-ylg5JvKwaEL502Hv_cNigcGEcUiOjd_5rkcEH4wOf-VUyeh_EYcLCYi9-biNWaf799GPp9G2P1MJT9vEa-WrC49Nvivo_6aWGY2yymCw9Cbg_qYKbN8NtW4MljbI3GNmu7BsPAmealSRhb2MiDwvmWVlby2k0jFLjj2Z_JXytQpqa4wMDfq9PL7Fh4V9974slcGO-eDz9WflSDX2bLOhrdv7fPApPTffwOMrU5yhFDJoKchpdrgdvHs6_oLa2GlPEkz6wK9R_0W5VuAg_nqtuNcwA9fKpdaMZWOkD7dRBxW6OfExRdjMTYjqtaiQfs8gU0YmFwf7_5ofz-bXLHvr5BAEMeiM2uK0_lfgAURwDKNg=w1239-h608-no)","2ad6ebae":"**This was my first pubic kernal (as a beginner), feel free to advice and comment. \nFeature Engineering and ML is in-progress**\n\n**Cheers!!**\n","407bedff":"![](https:\/\/lh3.googleusercontent.com\/xRS__DjcEbRYOMrSIdt10vDEvrsUV2B1FPbrL5wIrGQJJ1hHU5aS5ogEm-s7zA-mMOsrNEB659FFTo1sYEyhj04ayc06UFDd7J1HD5tsbqkNjlyZZYKx13S843yRiKcZ40BQucI1uy1he7pynepxSm_RuSS_-LRFoTv2vw6QJNxAohCP7AEZf0YZzFdgsjgdkLlD28_QxQGCXv3wcZKsw5oiXfx5yJ5gg5vVo4E_N0PzKuxcpsiXdUjJrirCzecnI-IGTHB1599WK0fGH0IDuG-4vKmpqv1Nxt8DsqKK_cYCyz0vxSZOuiX78m10QLU_LmH47jLhfTXBe57mWF086NE2cpjWffV9Slpmq-ONS6wLJN3MPb7Xq4uXIVSgEIqaMBltqI7vB75rmO0PbTqcFzWxRpvKX61qSUdIUigveFNyjCX4AikMdJ3itfoYaTHEfWQ--p69Kz2InunHaSkrYoFLrgRKTY-r5iTJHm7EP0vAB1-E_G8YMWIxOYsbrj7xb8YKAmySS0Y5u_6wEZ3EiqL19AjFG3V7yrOt3A1nLA517F7HmlxnClfS4t1TSskA_tulWa_ION1htxIhBFaeYOg1cCGxWheJc9qtnZ6IK2lpr3B_wpwRFOZ9NaiXLXfBh4HWiGImsB8BGPavv9A0KDns=w1239-h608-no)"}}