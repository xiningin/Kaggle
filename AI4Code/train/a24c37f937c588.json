{"cell_type":{"fcb9275d":"code","b3d5fe8f":"code","1b6fff89":"code","2f119b95":"code","eb9e9d3d":"code","37b6994f":"code","1a907baa":"code","980e5124":"code","df759e94":"code","7a8a2a98":"code","14142a95":"code","c184c1fa":"code","49fe8e0b":"code","b42db4c6":"code","495f5d59":"code","a401c6f4":"code","77406cd7":"code","53959eed":"code","07208155":"code","9c24cf79":"code","6a7a0f25":"code","62f6cfaa":"code","f0eca9c9":"code","a4002df0":"code","c16c4f4d":"code","80053edd":"code","f67a47a5":"code","73e9063d":"code","c7bd20d2":"code","df228d1e":"code","e2f09197":"code","feb22c0c":"code","c9f65dc3":"code","9b5fb738":"code","4d22a2f1":"code","ce36d55c":"code","27ca3c1a":"code","32e4a643":"code","57a63146":"code","136bd62a":"code","1ca672c2":"code","85bceda2":"code","916db907":"code","fbd119a9":"code","33aff4be":"code","d4be33ba":"code","750dca0a":"code","0bb43559":"code","78927dac":"code","0aa059f4":"code","fd9dd3ce":"code","f0a8d0e8":"code","d82dea01":"code","28dc95e9":"code","382814df":"code","c77f201c":"code","68c222b5":"code","bdc8ac00":"code","743b6249":"code","58b14fa2":"code","58375905":"code","4f076b76":"code","d7383a1b":"code","acac3a16":"code","4c08f53b":"code","9d4abf7d":"code","b8803dc2":"code","1815a8d6":"code","9e6fcfa6":"code","a264bd79":"code","d564cfd2":"code","c83344ee":"code","0a6409c9":"code","c74a1122":"code","a73c4187":"code","f628d8f9":"code","d445bce9":"code","9cf81f12":"code","300ce6d5":"code","f1d339f0":"code","37ca9c92":"code","1bc699a2":"code","839f10de":"code","4b38f891":"code","b9a62afc":"code","20ceb860":"code","c8f47207":"code","97b820ed":"code","f6888c74":"code","9dff3b86":"code","d4ed671c":"code","005da0cf":"code","b2d70ea1":"code","bbce7212":"code","8a2a35e3":"code","289289f6":"code","1178a0b1":"code","e49fbf5e":"code","955c268d":"code","1f0fde08":"code","23733226":"code","1b376a86":"code","fcd76d0f":"code","37e86a06":"code","b46e2a5c":"code","54723b3b":"code","d3920de1":"code","79863144":"code","8a6926b4":"code","7dfb3c13":"code","5d9815bd":"code","968d5399":"code","41be326f":"code","c818b529":"code","1e5be6d4":"code","8b08dd5d":"code","624f37f5":"code","76514c28":"code","28ac0ac6":"code","2016cc5d":"code","29a2ca37":"code","2e82203d":"code","6ee15b35":"code","af307ad6":"code","36964f0c":"code","7958875f":"code","d3dab63c":"markdown","24442538":"markdown","7bf6d12c":"markdown","e9e980f4":"markdown","25116f77":"markdown","e7e213a1":"markdown","360bdb21":"markdown","b810cf96":"markdown","d05a29b7":"markdown","65250f04":"markdown","bfa91291":"markdown","2faa92a2":"markdown","33d627d1":"markdown","6a714057":"markdown","bbf8b8f8":"markdown","f1ec3253":"markdown","eb8a2119":"markdown","785b88f3":"markdown","132ebe77":"markdown","489c3feb":"markdown","174e60a1":"markdown","3d48297d":"markdown","f53fbbe2":"markdown","ba7ac8cd":"markdown","0d3a39bb":"markdown","d04d244d":"markdown","33f38562":"markdown","8dcff79e":"markdown","000356a7":"markdown","d5459571":"markdown","883ea1a9":"markdown","5c054f6c":"markdown"},"source":{"fcb9275d":"import numpy as np                     # linear algebra\nimport pandas as pd                    # data processing\nimport matplotlib.pyplot as plt\nimport seaborn as sns","b3d5fe8f":"train=pd.read_csv('..\/input\/ml-lab-exam\/traindata_SJC.csv')","1b6fff89":"train.head()","2f119b95":" #Dataframe Summary","eb9e9d3d":"train.info()                                              ","37b6994f":"#Finding the shape of the data.","1a907baa":"train.shape                     ","980e5124":" #To find the summary of the data.","df759e94":"train.describe()                  ","7a8a2a98":"#Finding the missing value.","14142a95":"train.isnull().sum()","c184c1fa":"train1=train.copy()\ntrain1.info()","49fe8e0b":"#Missing value treatment.\n## We are replacing the categorical with its mode and numerical with its mean.","b42db4c6":"train1['MaritalStatus'].fillna(train1['MaritalStatus'].mode()[0],inplace = True)\ntrain1.isnull().sum()","495f5d59":"\n  \ntrain1['WeeklyWages'].fillna(int(train1['WeeklyWages'].mean()), inplace=True)\n","a401c6f4":"train1['HoursWorkedPerWeek'].fillna(float(train1['HoursWorkedPerWeek'].mean()), inplace=True)\n","77406cd7":"train1.isnull().sum()","53959eed":"train1['DateTimeOfAccident'] = pd.to_datetime(train1['DateTimeOfAccident'])\ntrain1['DateReported'] = pd.to_datetime(train1['DateReported'])","07208155":"print(train1['Age'].max())\nprint(train1['Age'].min())","9c24cf79":"#Binning the age\n\n#train1['Age'] = pd.cut(train1['Age'], bins = [0, 10, 20, 30, 40, 50, 60, 70,80],\n                       #labels = ['0-10','11-20','21-30','31-40', '41-50', '51-60', '61-70','71-80'])","6a7a0f25":"train1['PartTimeFullTime'].value_counts()","62f6cfaa":"train1['Gender'].value_counts()","f0eca9c9":"train1['MaritalStatus'].value_counts()","a4002df0":"train1.describe().transpose()","c16c4f4d":"train1.select_dtypes(include='object').describe().transpose()","80053edd":"train1.plot.box(figsize = (16,6))\nplt.xticks(rotation = 90)","f67a47a5":"#correlation matrix for numerical variables\n\nplt.figure(figsize = (10, 10))\nsns.heatmap(train1.corr(), annot = True, cmap = 'Blues')\nplt.title('Correlation matrix for numerical features')","73e9063d":"sns.boxplot(data=train1,x='UltimateIncurredClaimCost',hue='Gender')","c7bd20d2":"sns.boxplot(data=train1,x='WeeklyWages',hue='Gender')","df228d1e":"sns.catplot(data=train1,x='UltimateIncurredClaimCost',col='Gender',kind='violin')","e2f09197":"train1.columns","feb22c0c":"sns.countplot(data=train1,x='Gender')","c9f65dc3":"sns.countplot(data=train1,x='MaritalStatus')","9b5fb738":"sns.countplot(data=train1,x='PartTimeFullTime')","4d22a2f1":"sns.countplot(data=train1,x='PartTimeFullTime',hue='DaysWorkedPerWeek')","ce36d55c":"sns.countplot(data=train1,x='Gender',hue='DaysWorkedPerWeek')","27ca3c1a":"sns.pairplot(data=train1)","32e4a643":"sns.distplot(train1['HoursWorkedPerWeek'],bins=20,color='g',kde=False)","57a63146":"sns.barplot(data=train1,x='InitialIncurredCalimsCost',y='Age')","136bd62a":"sns.scatterplot(data=train1, y='UltimateIncurredClaimCost', x ='InitialIncurredCalimsCost')","1ca672c2":"sns.scatterplot(data=train1, y='UltimateIncurredClaimCost', x ='Age')","85bceda2":"sns.scatterplot(data=train1, y='UltimateIncurredClaimCost', x ='Gender')","916db907":"sns.scatterplot(data=train1, y='WeeklyWages', x ='PartTimeFullTime')","fbd119a9":"(pd.to_datetime(train1['DateTimeOfAccident']).dt.month).value_counts().plot.bar()","33aff4be":"plt.rcParams['figure.figsize'] = (15, 5)\nplt.subplot(1, 2, 1)\nsns.distplot(train1['InitialIncurredCalimsCost'], color = 'purple')\n\nplt.subplot(1,2,2)\nsns.boxplot(train1['InitialIncurredCalimsCost'],color='purple')\n\nplt.show()","d4be33ba":"# finding the columns and info","750dca0a":"train1.columns\ntrain1.info()","0bb43559":"import sklearn.preprocessing as pre\nle=pre.LabelEncoder()","78927dac":"# for label encoding\nfor x in train1.select_dtypes(include=('object','category')).columns:\n    train1[x]=le.fit_transform(train1[x])","0aa059f4":"train1","fd9dd3ce":"train1.columns","f0a8d0e8":"train1=train1[[  'Age', 'Gender',\n       'MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredCalimsCost',\n       'UltimateIncurredClaimCost']]\n#train test split\nfrom sklearn.model_selection import train_test_split\n\n\n\n# Getting the output variable\ny = train1['UltimateIncurredClaimCost']\ndf_test = train1.drop(['UltimateIncurredClaimCost'], axis=1)\nmix_max=pre.minmax_scale\nx=mix_max(df_test.values)\n# Getting the input variables\n\n\n\n\n# Diving our input and output into training and testing sets\nx_train, x_test, y_train, y_test = train_test_split(\nx, y,\ntest_size=0.4,random_state=123456\n)\n\n","d82dea01":"df_test","28dc95e9":"x_train, x_test, y_train, y_test = train_test_split(\nx, y,\ntest_size=0.4,random_state=10000\n)\n","382814df":"x_train.shape,x_test.shape,y_train.shape,y_test.shape","c77f201c":"import sklearn.linear_model as lm","68c222b5":"glm=lm.LinearRegression()","bdc8ac00":"glm.fit(x_train,y_train)","743b6249":"glm.score(x_test,y_test)","58b14fa2":"glm.score(x_train,y_train)","58375905":"import sklearn.metrics as mt","4f076b76":"glm.coef_","d7383a1b":"print(glm.intercept_)","acac3a16":"dict(zip(train1.columns.to_list(),glm.coef_))","4c08f53b":"def feature_train_test_score(train1,list_columns_drop):\n    features=pre.minmax_scale(train1.drop(list_columns_drop,axis=1))\n    outcome=train1['UltimateIncurredClaimCost']\n    x_train,x_test,y_train,y_test=ms.train_test_split(features,outcome,test_size=0.3,random_state=1234561)\n    glm=lm.LinearRegression()\n    glm.fit(x_train,y_train)\n    print(\"The test score is\",glm.score(x_test,y_test))\n    print(\"The train score is\",glm.score(x_train,y_train))","9d4abf7d":"train1.info()","b8803dc2":"train1.tail()","1815a8d6":"y_pred = glm.predict(x_test)\ny_pred","9e6fcfa6":"from sklearn.metrics import mean_squared_error\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","a264bd79":"# From sklearn we import Decisiontree regressor ","d564cfd2":"from sklearn.tree import DecisionTreeRegressor \nx_train, x_test, y_train, y_test = train_test_split(\nx, y,\ntest_size=0.4,random_state=123456\n)\nx_train.shape,x_test.shape,y_train.shape,y_test.shape","c83344ee":"regressor = DecisionTreeRegressor(random_state = 11100) \n  ","0a6409c9":"\n# fit the model\nregressor.fit(x_train, y_train)\n# get importance\nimportance = regressor.feature_importances_\n\n# summarize feature importance\nfor i,v in enumerate(importance):\n    print('Feature: %0d, Score: %.5f' % (i,v))\n# plot feature importance\n\n\nplt.bar([x for x in range(len(importance))], importance)\nplt.show()","c74a1122":"#fitting of the model\nregressor.fit(x_train, y_train)","a73c4187":"regressor.score(x_train,y_train)","f628d8f9":"regressor.score(x_test,y_test)","d445bce9":"#prediction\ny_pred = regressor.predict(x_test)\ny_pred","9cf81f12":"#length of y_pred\nlen(y_pred)\n","300ce6d5":"print( y_pred)","f1d339f0":"#calculating mean square error\nfrom sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","37ca9c92":"#importing libraries\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import r2_score,mean_squared_error","1bc699a2":"x_train, x_test, y_train, y_test = train_test_split(\nx, y,\ntest_size=0.4,random_state=123456\n)\n\n#shape of data.\nx_train.shape,x_test.shape,y_train.shape,y_test.shape","839f10de":"regressor = RandomForestRegressor(n_estimators = 10, random_state = 0)","4b38f891":"#model fitting.\nregressor.fit(x_train,y_train)","b9a62afc":"regressor.score(x_train,y_train)","20ceb860":"regressor.score(x_test,y_test)","c8f47207":"#prediction\ny_pred = regressor.predict(x_test)\ny_pred","97b820ed":"#mean error\nfrom sklearn import metrics\nprint('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","f6888c74":"x_train, x_test, y_train, y_test = train_test_split(\nx, y,\ntest_size=0.3,random_state=123456\n)\n\n#shape of data.\nx_train.shape,x_test.shape,y_train.shape,y_test.shape","9dff3b86":"from sklearn.svm import SVR\nregressor = SVR(kernel = 'rbf',degree=3,gamma='scale')\n","d4ed671c":"regressor.fit(x_train,y_train)","005da0cf":"\nregressor.score(x_train,y_train)","b2d70ea1":"regressor.score(x_test,y_test)","bbce7212":"y_pred = regressor.predict(x_test)\ny_pred","8a2a35e3":"print(np.sqrt(mean_squared_error(y_test, y_pred)))","289289f6":"x_train, x_test, y_train, y_test = train_test_split(\nx, y,\ntest_size=0.3,random_state=10000\n)\n\n#shape of data.\nx_train.shape,x_test.shape,y_train.shape,y_test.shape\nfrom sklearn.linear_model import  Lasso\n\n#shape of data.\n","1178a0b1":"lasso = Lasso()\nlasso.fit(x_train,y_train)\n\n","e49fbf5e":"#testing and training score\nprint(\"Train data :\",lasso.score(x_train,y_train))\nprint(\"Test data :\",lasso.score(x_test,y_test))","955c268d":"y_pred = lasso.predict(x_test)","1f0fde08":"#Root mean square\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","23733226":"from sklearn.linear_model import Ridge","1b376a86":"#Ridge\nRidge = Ridge()\n#Fitting of model\nRidge.fit(x_train,y_train)\n\n","fcd76d0f":"#Training and testing score\nprint(\"Train data :\",lasso.score(x_train,y_train))\nprint(\"Test data :\",lasso.score(x_test,y_test))","37e86a06":"#Root mean square\ny_pred =Ridge.predict(x_test)\nprint(np.sqrt(mean_squared_error(y_test, y_pred)))","b46e2a5c":"import pandas as pd # Data Analytical library\nimport numpy as np # Fast Linear Alegbra \nimport matplotlib.pyplot as plt # Visulizations\nimport seaborn as sns # Statistical Viz","54723b3b":"test=pd.read_csv('..\/input\/ml-lab-exam\/testdata_SJC.csv')","d3920de1":"test.head()","79863144":"#Data Frame Summary","8a6926b4":"test.info()","7dfb3c13":"#Data Summary","5d9815bd":"test.describe()","968d5399":"#Check for Missing Values","41be326f":"test.isnull().sum()","c818b529":"#Missing value imputation\ntest['MaritalStatus'].fillna(test['MaritalStatus'].mode()[0],inplace = True)\ntest.isnull().sum()","1e5be6d4":"test['DateTimeOfAccident'] = pd.to_datetime(test['DateTimeOfAccident'])\ntest['DateReported'] = pd.to_datetime(test['DateReported'])","8b08dd5d":"#Binning the age\n\n#test['Age'] = pd.cut(test['Age'], bins = [0, 10, 20, 30, 40, 50, 60, 70,80],\n                       #labels = ['0-10','11-20','21-30','31-40', '41-50', '51-60', '61-70','71-80'])","624f37f5":"test.columns\ntest.info()","76514c28":"#Encoding\nimport sklearn.preprocessing as pre\nle=pre.LabelEncoder()","28ac0ac6":"test=test[['Age','Gender',\n       'MaritalStatus', 'DependentChildren', 'DependentsOther', 'WeeklyWages',\n       'PartTimeFullTime', 'HoursWorkedPerWeek', 'DaysWorkedPerWeek',\n       'ClaimDescription', 'InitialIncurredCalimsCost',\n       ]]","2016cc5d":"test.info()","29a2ca37":"for x in test.select_dtypes(include=('object','category')).columns:\n    test[x]=le.fit_transform(test[x])","2e82203d":"test","6ee15b35":"test.info()","af307ad6":"mix_max=pre.minmax_scale\nx_test=mix_max(test.values)","36964f0c":"#Prediction\ny_pred = glm.predict(x_test)\ny_pred","7958875f":"\nsub=pd.read_csv('..\/input\/ml-lab-exam\/sample_submission_csv.csv')\nsub['UltimateIncurredClaimCost'] = y_pred\nsub.to_csv('submission_linear.csv', index = False)\nsub.head(5)\nprint(np.mean(sub['UltimateIncurredClaimCost']))","d3dab63c":"In the case of Martialstatus Single workers are more in number than the Married and unknown.\n\n","24442538":"## 1. Descriptive Statistics","7bf6d12c":"### The challenge is to predict Workers Compensation claims using the realistic data give data tab.","e9e980f4":"Most workers were doing  Fulltime jobs.","25116f77":"## 2. Outlier Analysis","e7e213a1":"It is a countplot between parttime fulltime job and number of days workers is working per week.Most of the workers works for 5 days in a week as a fulltimejob.","360bdb21":"Total insurance claim by comany is also more for males than others.","b810cf96":"#### SVM","d05a29b7":"Most of the workers have  weakly wages in the range of 500-3000 rupees.","65250f04":"## 2. Correlation Plot","bfa91291":"The age group in the range of 61-70 have more Intialincurrentclaim cost.","2faa92a2":"## 3. Data Visualisation","33d627d1":"### Lasso and Ridge Regression","6a714057":"# Data Normilization\n\n- Min Max Norm\n- Standard Scaler\n- Scaler\n","bbf8b8f8":"# Data Pre Processing\n-  Data cleaning\n-  Data Transformation\n-  Data Integration","f1ec3253":"\n There is no much relation between intial estimate and total estimate by the insurance comany.Those who have less Initial estimate by the insurer of the claim cost also have less total claims payment by the insurance company.","eb8a2119":"### Random forest","785b88f3":"It is between AGender and Days per week workers are working.Mainly males work most of the time  as compared to female.Also it can be so because the number of male workers  are more as compared to the female.","132ebe77":"##### We are loading the dataset.","489c3feb":"#### We need to import all essential libraries.","174e60a1":"## Data Transformation","3d48297d":"It is the count of Gender.Male workers are most common.","f53fbbe2":"### Feature enginerring","ba7ac8cd":"## Data Transformation","0d3a39bb":"We take different algorithms like Linear regression,Decision Tree,Random Forest,Support Vector Machines,Lasso and Ridge Regression.Here we use different algorithms because actually we are not getting sufficient accuracy or root mena square error so just do with try and error approach.\n\nAmong these models Lasso ,ridge , and linear are giving much more less root mean square.So we can prefer that more.So i took linear regression as my algorithm.It is easy to implement and  understand also.","d04d244d":"### Decision tree","33f38562":"# Data Normilization\n\n- Min Max Norm\n- Standard Scaler\n- Scaler\n","8dcff79e":"# EDA \n- Descriptive Statistics\n- Outlier Analysis\n- Data Visualisation","000356a7":"## Test data","d5459571":"Weakly wages is more for the workers working fulltimejob.","883ea1a9":"# Data Pre processing\n- Data Cleaning\n- Data Transformation\n- Data Intergration","5c054f6c":"Pairplot of trained dataset."}}