{"cell_type":{"d9016e51":"code","1113bed3":"code","83e3a2d2":"code","798a25c6":"code","27a8f9e5":"code","85df2cec":"code","e97526f8":"code","85860176":"code","19ce75b9":"code","ce68de88":"code","fba2499e":"code","73e17edb":"code","a46b0fb9":"code","ff05cb58":"code","cb4a15e8":"code","95048cd7":"code","c69cc0c6":"code","97e38d29":"code","50e5240f":"code","7648426e":"code","7f9fb3fa":"code","71dc166d":"markdown"},"source":{"d9016e51":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","1113bed3":"train = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/test.csv\")","83e3a2d2":"train.head()","798a25c6":"Name0=train['target'].unique()\nName=sorted(Name0)\nprint(Name)","27a8f9e5":"N=[]\nfor i in range(4):\n    N+=[i]\n    \nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","85df2cec":"target = train['target'].map(normal_mapping)\ndata = train.drop(['target','id'],axis=1)","e97526f8":"columns=data.columns.to_list()\nprint(columns)","85860176":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 2, 256),\n        'objective': trial.suggest_categorical('objective',['regression','rmse','multiclass','binary']),  \n        'max_depth': -1,\n        'learning_rate': 0.1,\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n        \"bagging_freq\": 5,\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": -1,\n    }\n    model = lgb.LGBMClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","19ce75b9":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=32)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","ce68de88":"study.trials_dataframe()","fba2499e":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","73e17edb":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","a46b0fb9":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","ff05cb58":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','objective'])","cb4a15e8":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","95048cd7":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","c69cc0c6":"Best_trial=study.best_trial.params\nprint(Best_trial)","97e38d29":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-may-2021\/sample_submission.csv\")\nprint(sample.shape)","50e5240f":"preds = np.zeros((sample.shape[0],sample.shape[1]-1))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = lgb.LGBMClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict_proba(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","7648426e":"print(preds.shape)\nprint(preds[0])","7f9fb3fa":"subm = sample\nsubm[Name] = preds\nsubm.to_csv('submission.csv',index=False)\nsubm","71dc166d":"# LightGBM with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna"}}