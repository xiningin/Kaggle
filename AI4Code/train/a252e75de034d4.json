{"cell_type":{"7073f763":"code","92464751":"code","29c0247d":"code","2c5f2bfe":"code","14072fe1":"code","1bc440bc":"code","f481172c":"code","55afccde":"code","daacea90":"code","48bcb96d":"code","85baa9ba":"code","f2ec5556":"code","4f373ef1":"code","fc5060ab":"code","a3624ac6":"code","626578be":"code","973d5cbf":"code","424d8ab2":"code","3b157172":"code","795c2c4d":"code","68398974":"code","d92b162f":"code","6bd4d9e2":"code","26c51951":"code","f4f0bb59":"code","f6e74a29":"code","85ca074e":"code","c79b2521":"code","d10777eb":"code","68b1f7f8":"code","2049d8e6":"code","aa364b25":"code","8ca6eab6":"code","1db18ad7":"code","b655fa94":"code","37c6e4a0":"code","5606e9b3":"code","b0dcafa8":"code","ebb2510e":"code","09224afe":"code","c26bf0b8":"code","3f2ab9ff":"code","9f2be7b0":"code","f9c5944f":"code","dbcbc88b":"code","7f244565":"code","cef49660":"code","c3ff273f":"code","609c168f":"code","8d0b1584":"code","9bfd6b66":"code","66816441":"code","798da9c3":"code","d31b0472":"code","4a3eddd2":"code","9e593279":"code","05df28c3":"code","49d1bd50":"code","d8dace46":"code","bfb82490":"code","f260ad6f":"code","0b19f651":"code","f4407c0e":"code","65c50883":"code","5bc02bfc":"code","afcbb3b0":"code","95dba144":"code","61a1bd6d":"code","43a7fa61":"code","ccd5fcdf":"code","69890077":"code","dde888a5":"code","5ee54327":"code","c0f376fc":"code","c149a3b7":"code","eb28befa":"code","2247a75d":"code","65407756":"code","b81a5bd2":"code","159fd242":"code","ef8451e0":"code","ba51ac1e":"markdown","bfc34a1d":"markdown","bc91cd45":"markdown","cd3d4250":"markdown","801feb76":"markdown","0827f62d":"markdown","3b14c95f":"markdown","cb7aeaa5":"markdown","06b44929":"markdown","f7788f84":"markdown","62a5ae04":"markdown","e83c8346":"markdown","f07ee4e8":"markdown","7d1783a0":"markdown","d46755ed":"markdown","01af3e1b":"markdown","6b23d68c":"markdown","4bd3ca57":"markdown","59966ff0":"markdown","cac725bd":"markdown","3f3ebf6d":"markdown","202b6af6":"markdown","64538cf1":"markdown","725b01dd":"markdown","ed65992f":"markdown","e1455c6e":"markdown","552e239b":"markdown","d4fb7126":"markdown","d477825c":"markdown","2d8a9cd3":"markdown","d048b6ff":"markdown","f68595c5":"markdown","9c661780":"markdown","39a977b7":"markdown","11702ce9":"markdown","42233093":"markdown","eca4219f":"markdown","d7f5745b":"markdown","26d054bf":"markdown","8d401970":"markdown","6984f214":"markdown","3790e1c2":"markdown","aa5473ea":"markdown"},"source":{"7073f763":"import numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error,mean_squared_error\nimport plotly.graph_objs as go\nimport datetime\nimport plotly.express as px\nimport folium\nimport warnings\nimport folium \nfrom folium import plugins\nfrom math import sqrt\nfrom sklearn.preprocessing import PolynomialFeatures\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nfrom plotly.graph_objs import *\nfrom plotly.subplots import make_subplots\n\n#Optimizacion bayesiana con hyperopt\nfrom hyperopt import STATUS_OK\nfrom timeit import default_timer as timer\nfrom hyperopt import tpe\nfrom hyperopt import Trials\nfrom hyperopt import fmin\nfrom hyperopt import hp, tpe\nfrom hyperopt.fmin import fmin\nfrom hyperopt import hp, tpe, Trials, STATUS_OK\nfrom hyperopt.fmin import fmin\nfrom hyperopt.pyll.stochastic import sample\nimport ast\n\nimport warnings\n\nwarnings.filterwarnings('ignore')\n\n%matplotlib inline\n\n#Funciones:\n\ndef rmsle_cv(model,x_test,y_test):\n    kf = KFold(5, shuffle=True, random_state=42).get_n_splits(x_test)\n    rmse= np.sqrt(-cross_val_score(model, x_test, y_test, scoring=\"neg_mean_squared_error\", cv = kf))\n    return(rmse)","92464751":"data_chile = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto3\/CasosTotalesCumulativo.csv')\n\n\nultima_fecha_cl = data_chile.columns\nultima_fecha_cl= ultima_fecha_cl[-1]\nprint(\"Ultima Actualizaci\u00f3n:\",ultima_fecha_cl)","29c0247d":"data_chile_r = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto5\/TotalesNacionales.csv')\ngrupo_fallecidos = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto10\/FallecidosEtario.csv')\ndata_crec_por_dia = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto5\/TotalesNacionales.csv')\ncasos_por_comuna = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto25\/CasosActualesPorComuna.csv')\nsintomas = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto21\/SintomasHospitalizados.csv')\n\n\n\nfechas_chile_crec = data_crec_por_dia.columns[-1]\nfechas_chile = data_crec_por_dia.loc[:, '2020-03-03': fechas_chile_crec]\nfechas_chile = fechas_chile.keys()\n\nfechas_death = data_crec_por_dia.columns[-1]\n\ndeath_cl = grupo_fallecidos.loc[:, '2020-04-09': ultima_fecha_cl]\ndates_d = death_cl.keys()\nc_d = []\n\nfor i in dates_d:\n   \n    c_d.append(grupo_fallecidos[i].sum())\n    \nconfirmed_chile = data_chile.loc[:, '2020-03-03': ultima_fecha_cl]\ndates_chile = confirmed_chile.keys()\ndays_chile = np.array([i for i in range(len(dates_chile))]).reshape(-1, 1)\n\ncasos_chile = []\n\nfor i in dates_chile:\n   \n    casos_chile.append(data_chile[i].iloc[16])\n    \n\ncasos_por_dia_sintomas = []\ncasos_por_dia_asintomaticos = []\nfallecidos_por_dia =[]\nrecuperados_por_dia=[]\ncasos_por_dia_totales =[]\nactivos_por_dia = []\ncasos_totales_acum_list = []\nfor i in fechas_chile:\n    \n    f = data_crec_por_dia[data_crec_por_dia['Fecha']=='Fallecidos'][i].sum()\n    c_sintomas = data_crec_por_dia[data_crec_por_dia['Fecha']=='Casos nuevos con sintomas'][i].sum()\n    c_asintomaticos = data_crec_por_dia[data_crec_por_dia['Fecha']=='Casos nuevos sin sintomas'][i].sum()\n\n    c_t = data_crec_por_dia[data_crec_por_dia['Fecha']=='Casos nuevos totales'][i].sum()\n\n    r = data_crec_por_dia[data_crec_por_dia['Fecha']=='Casos recuperados'][i].sum()\n\n    activos = data_crec_por_dia[data_crec_por_dia['Fecha']=='Casos activos'][i].sum()\n    casos_totales_acum = data_crec_por_dia[data_crec_por_dia['Fecha']=='Casos totales'][i].sum()\n\n\n    casos_por_dia_sintomas.append(c_sintomas)\n    casos_por_dia_asintomaticos.append(c_asintomaticos)\n\n    casos_por_dia_totales.append(c_t)\n    fallecidos_por_dia.append(f)\n    recuperados_por_dia.append(r)\n    activos_por_dia.append(activos)\n    \n    casos_totales_acum_list.append(casos_totales_acum)\n    \ndata_death_date = pd.DataFrame({'Date':dates_d,'Death':c_d})\n\ndates_cl_ = data_chile.drop(['Region'], axis=1)\n\ndatos_chile_cd_date = pd.DataFrame({'Date':dates_cl_.columns,'Cases':data_chile.iloc[16,1:].values})\n\ndata_cs_cl = pd.merge(datos_chile_cd_date, data_death_date, on='Date', how='outer')\ndata_cs_cl = data_cs_cl.replace(np.nan, 0)    ","2c5f2bfe":"data_chile_map = data_chile.drop([16,9],axis=0)\ndata_chile_map.head()","14072fe1":"print(\"ACTUALIZADO \"+data_chile.columns[-1])","1bc440bc":"data_chile_map = data_chile_map.reset_index()\ntotal =len(data_chile.columns)\n\n# Adding Location data (Latitude,Longitude)\nlocations = {\n    \"Arica y Parinacota\" : [-18.4745998,-70.2979202],\n    \"Tarapac\u00e1\" : [-20.2132607,-70.1502686],\n    \"Antofagasta\" : [-23.6523609,-70.395401],\n    \"Atacama\" : [-27.3667908,-70.331398],\n    \"Coquimbo\" : [-29.9533195,-71.3394699],\n    \"Valpara\u00edso\" : [-33.0359993,-71.629631],\n    \"Metropolitana\" : [-33.4726900,-70.6472400],\n    \"O\u2019Higgins\" : [-48.4862300,-72.9105900],\n    \"Maule\" : [-35.5000000,-71.5000000],\n    #\"\u00d1uble\" : [1,1],\n    \"Biob\u00edo\" : [-37.0000000,-72.5000000],\n    \"Araucan\u00eda\" : [-38.7396507,-72.5984192],\n    \"Los R\u00edos\" : [-40.293129,-73.0816727],\n    \"Los Lagos\" : [-41.7500000,-73.0000000],\n    \"Ays\u00e9n\" : [-45.4030304,-72.6918411],\n    \"Magallanes\" : [-53.1548309,-70.911293]\n        \n   \n}\n\ndata_chile_map[\"Lat\"] = \"\"\ndata_chile_map[\"Long\"] = \"\"\nfor index in data_chile_map.Region :\n    data_chile_map.loc[data_chile_map.Region == index,\"Lat\"] = locations[index][0]\n    data_chile_map.loc[data_chile_map.Region == index,\"Long\"] = locations[index][1]\n    #print(locations[index][0])\n    \n\n\nchile = folium.Map(location=[-30.0000000,-71.0000000], zoom_start=4,max_zoom=6,min_zoom=4,height=500,width=\"80%\")\n\n\nfor i in range(0,len(data_chile_map[data_chile[ultima_fecha_cl]>0].Region)):\n    folium.Circle(\n        location=[data_chile_map.loc[i,\"Lat\"],data_chile_map.loc[i,\"Long\"]],\n        \n    \n     tooltip = \"<h5 style='text-align:center;font-weight: bold'>\"+data_chile_map.iloc[i].Region+\"<\/h5>\"+\n                    \"<hr style='margin:10px;'>\"+\n                    \"<ul style='color: #444;list-style-type:circle;align-item:left;padding-left:20px;padding-right:20px'>\"+\n        \"<li>Confirmed: \"+str(data_chile_map.iloc[i,total])+\"<\/li>\"+\n        \"<\/ul>\",\n    \n        radius=(int(np.log2(data_chile_map.iloc[i,total]+1)))*7000,\n\n         color='#ff6600',\n        fill_color='#ff8533',\n        fill=True).add_to(chile)\nchile","f481172c":"data_chile_r","55afccde":"num_cases_cl = data_chile.drop([16],axis=0)\nnum_cases_cl = num_cases_cl[ultima_fecha_cl].sum()\nnum_death =  grupo_fallecidos[ultima_fecha_cl].sum()\nnum_rec = data_chile_r.iloc[2,-1].sum()\n\nnum_active = data_chile_r.iloc[4,-1].sum()\n\ndatos_chile_rdca = pd.DataFrame({'Fecha':[ultima_fecha_cl],'Fallecidos(Acumulados)':[num_death],'Cases Confirmados (Acumulados)': [num_cases_cl],'Recuperados(Acumulados)':[num_rec],\n                                 'Activos': [num_active] })\ntemp = datos_chile_rdca\ntemp.style.background_gradient(cmap='Pastel1')","daacea90":"data_total_cl_2 = pd.DataFrame({'Fecha': pd.to_datetime(fechas_chile),'Activos Sintomaticos': \n                                casos_por_dia_sintomas ,'Activos Asintomaticos':casos_por_dia_asintomaticos ,'Totales Activos':activos_por_dia, \n                                'Fallecidos(Acumulados)': fallecidos_por_dia,'Recuperados(Acumulados)':recuperados_por_dia,'Casos Totales(Acumulados)':casos_por_dia_totales })\n\nconfirmed = '#393e46' \ndeath = '#ff2e63' \nrecovered = '#21bf73' \nactive = '#fe9801' \n\n\ntm = temp.melt(id_vars=\"Fecha\", value_vars=['Activos', 'Fallecidos(Acumulados)','Recuperados(Acumulados)'])\nfig = px.treemap(tm, path=[\"variable\"], values=\"value\", height=400, width=600,\n                 color_discrete_sequence=[recovered, active, death])\n\nfig5 = go.Figure()\nfig5.add_trace(go.Scatter(x=data_total_cl_2['Fecha'], y=data_total_cl_2['Totales Activos'], name='Activos',line_color='#fe9801'))\nfig5.add_trace(go.Scatter(x=data_total_cl_2['Fecha'], y=data_total_cl_2['Recuperados(Acumulados)'], name='Recuperados(Acumulados)',line_color='green'))\nfig5.layout.update(title_text='Activo vs. Recuperado '+fechas_chile[-1],xaxis_showgrid=False, yaxis_showgrid=False, width=700,\n            height=600,font=dict(\n            size=15,\n            color=\"Black\"    \n        ))\nfig5.layout.plot_bgcolor = 'White'\nfig5.layout.paper_bgcolor = 'White'\n\n\nfig5.show()\nfig.show()","48bcb96d":"trace1 = go.Scatter(\n                x=dates_chile,\n                y=casos_totales_acum_list,\n                name=\"Casos Acumulados\",\n                mode='lines+markers',\n                line_color='orange')\ntrace2 = go.Scatter(\n                x=dates_chile,\n                y=fallecidos_por_dia ,\n                name=\"Fallecidos Acumulados\",\n                mode='lines+markers',\n                line_color='red')\n\ntrace3 = go.Scatter(\n                x=dates_chile,\n                y=recuperados_por_dia,\n                name=\"Recuperados Acumulados\",\n                mode='lines+markers',\n                line_color='green')\n\n\nlayout = go.Layout(template=\"ggplot2\", width=800, height=500, title_text = '<b>Casos vs Repurados vs Fallecidos<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1,trace2,trace3], layout = layout)\nfig.show()","85baa9ba":"trace = go.Scatter(\n                x=fechas_chile,\n                y=casos_por_dia_totales,\n                name=\"growth\",\n                mode='lines+markers',\n                line_color='red')\n\nlayout = go.Layout(template=\"ggplot2\", width=850, height=800, title_text = '<b>Numero de Casos por d\u00eda<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace], layout = layout)\nfig.show()","f2ec5556":"confirmados = data_chile.loc[:, '2020-03-03': ultima_fecha_cl]\ndates_chile = confirmados.keys()\ndatos = data_chile[['Region',ultima_fecha_cl]].drop([16],axis=0)\n\n\n#Grafico 1\ntitulo ='COVID-19: Total de Casos acumulados de COVID19'\n\nfig = px.bar(datos.sort_values(ultima_fecha_cl),\n            x='Region', y=ultima_fecha_cl,\n            title=titulo,\n            text=ultima_fecha_cl \n            \n)\nfig.update_xaxes(title_text=\"Regiones\")\nfig.update_yaxes(title_text=\"Numero de casos\")\n\n#Grafico 2\n\nfig2 = px.bar(datos.sort_values(ultima_fecha_cl), \n             x=ultima_fecha_cl, y=\"Region\", \n             title=titulo,\n              text=ultima_fecha_cl, \n             orientation='h', \n             width=800, height=700)\nfig2.update_traces(marker_color='#008000', opacity=0.8, textposition='inside')\n\nfig2.update_layout(template = 'plotly_white')\n\n\n#Grafico 3\n\ntotal_chile = []\nfor i in dates_chile:\n    total_chile.append(data_chile[data_chile['Region']=='Total'][i].sum())\n\ndata_total_cl = pd.DataFrame({'Date': dates_chile,'Total Cases': total_chile})\n\nfig3 = px.bar(data_total_cl,x='Date', y='Total Cases', color='Total Cases', orientation='v', height=600,\n             title=titulo, color_discrete_sequence = px.colors.cyclical.mygbm)\n\nfig3.update_layout(plot_bgcolor='rgb(250, 242, 242)')\n\n\n\n\nfig.show()\nfig2.show()\nfig3.show()","4f373ef1":"#https:\/\/www.kaggle.com\/gatunnopvp\/covid-19-in-brazil-prediction-updated-04-20-20\nby_date = data_cs_cl[['Date','Cases','Death']]\n\nlayout = Layout(\n    paper_bgcolor='rgba(0,0,0,0)',\n    plot_bgcolor='rgba(0,0,0,0)',\n    title=\"Cases and Deaths by Day\"\n)\n\nfig = go.Figure(data=[\n    \n    go.Bar(name='Cases'\n           , x=by_date['Date']\n           , y=by_date['Cases']),\n    \n    go.Bar(name='Death'\n           , x=by_date['Date']\n           , y=by_date['Death']\n           , text=by_date['Death']\n           , textposition='outside')\n])\n\nfig.update_layout(barmode='stack')\nfig['layout'].update(layout)\n\nfig.show()","fc5060ab":"grupo_fallecidos = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto10\/FallecidosEtario.csv')\ngrupo_casos_genero= pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto16\/CasosGeneroEtario.csv')\ngrupo_fallecidos","a3624ac6":"grupo_casos_genero.head()","626578be":"fecha_grupo_edad = grupo_casos_genero.columns[-1]\n\ngrupo_edad = grupo_casos_genero.iloc[0:17,0]\ndata_casos_grupo_edad_mf = pd.DataFrame({'Grupo de edad': grupo_edad, fecha_grupo_edad : 0})\n\nfila = 0\nfor grupo in data_casos_grupo_edad_mf['Grupo de edad']:\n    suma_casos_MF = grupo_casos_genero[grupo_casos_genero['Grupo de edad'] == grupo].iloc[:,-1].sum()\n    data_casos_grupo_edad_mf.iloc[fila,1] = suma_casos_MF\n    fila=fila+1\ndata_casos_grupo_edad_mf.head()","973d5cbf":"titulo ='Casos por grupo de edad Fecha: '+fecha_grupo_edad\n\nfig = px.bar(data_casos_grupo_edad_mf.sort_values(fecha_grupo_edad),\n            x='Grupo de edad', y=fecha_grupo_edad,\n            title=titulo,\n            text=fecha_grupo_edad \n            \n)\nfig.update_xaxes(title_text=\"Regiones\")\nfig.update_yaxes(title_text=\"Numero de casos\")\n\n#colors = ['gold', 'darkorange', 'crimson','mediumturquoise', 'sandybrown', 'grey',  'lightgreen','navy','deeppink','purple']\ntrace1 = go.Pie(\n                labels=data_casos_grupo_edad_mf['Grupo de edad'],\n                values=data_casos_grupo_edad_mf[fecha_grupo_edad],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(#colors=colors, \n                            line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=700, height=500,title_text = '<b>Porcentaje de Casos acumulados por Grupo de Edad '+fecha_grupo_edad+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig2 = go.Figure(data = [trace1], layout = layout)\n\nfig.show()\nfig2.show()\n","424d8ab2":"casso_m = grupo_casos_genero[grupo_casos_genero['Sexo'] == 'M']\ncasso_f = grupo_casos_genero[grupo_casos_genero['Sexo'] == 'F']\n\n#https:\/\/stackoverrun.com\/es\/q\/8510875\n#https:\/\/www.it-swarm.dev\/es\/python\/anadir-una-fila-pandas-dataframe\/1066944305\/\nf = casso_f.columns[1:]\ndata_suma_casos_f = pd.DataFrame(index=np.arange(0, 1), columns=(f) )\n\nfor date in data_suma_casos_f:\n    data_suma_casos_f[date].iloc[0] = casso_f[date].sum()\ndata_suma_casos_f['Sexo'].iloc[0] = 'F'\n\nm = casso_m.columns[1:]\ndata_suma_casos_m = pd.DataFrame(index=np.arange(0, 1), columns=(f) )\n\nfor date in data_suma_casos_m:\n    data_suma_casos_m[date].iloc[0] = casso_m[date].sum()\ndata_suma_casos_m['Sexo'].iloc[0] = 'M'\n\n\nunion = pd.concat([data_suma_casos_m, data_suma_casos_f])\n\nfig1 = go.Figure()\n\nfig1.add_trace(go.Scatter(x=data_suma_casos_f.columns, y=data_suma_casos_f.iloc[0], name='F'))\nfig1.add_trace(go.Scatter(x=data_suma_casos_m.columns, y=data_suma_casos_m.iloc[0], name='M'))\n\nfig1.layout.update(title_text='Total de casos por genero : '+fecha_grupo_edad,xaxis_showgrid=False, yaxis_showgrid=False, width=700,\n            height=600,font=dict(\n            size=15,\n            color=\"Black\"    \n        ))\nfig1.layout.plot_bgcolor = 'White'\nfig1.layout.paper_bgcolor = 'White'\n\ncolors = ['#2356E7','#CD0ADD']\nn_f = union[fecha_grupo_edad].iloc[1]\nn_m = union[fecha_grupo_edad].iloc[0]\n\nplt.figure(figsize=(7,7))\nplt.title(\"Porcentaje de casos por Genero\",fontsize=20)\nlabels='M','F'\nsizes=[n_m,n_f]\nexplode=[0.1,0.1]\ncolors=['skyblue','lightcoral']\nplt.axis('equal')\nplt.pie(sizes,labels=labels,colors=colors,explode=explode,autopct='%1.1f%%',shadow=True,startangle=90)\nplt.legend(labels, loc=\"best\") \n\n\n\nfig1.show()\nplt.show()","3b157172":"from plotly.subplots import make_subplots\nfecha_frupo_fallecidos=grupo_fallecidos.columns[-1]\nfig = make_subplots(rows=1, cols=2)\ncolors = ['gold', 'darkorange', 'crimson','mediumturquoise', 'sandybrown', 'grey',  'lightgreen','navy','deeppink','purple']\ntrace1 = go.Pie(\n                labels=grupo_fallecidos['Grupo de edad'],\n                values=grupo_fallecidos[ultima_fecha_cl],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(colors=colors, \n                            line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=700, height=500,title_text = '<b>Porcentaje de personas fallecidas por grupo de edad : '+fecha_frupo_fallecidos+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\n\ncolors = ['lightslategray']*10 \ncolors[2] = 'crimson'\ntrace2 = go.Bar(\n            x=grupo_fallecidos['Grupo de edad'], \n            y=grupo_fallecidos[ultima_fecha_cl],\n            text=grupo_fallecidos[ultima_fecha_cl],\n            textposition='auto',\n            marker_color=colors)\nlayout = go.Layout(template=\"ggplot2\",width=700, height=500, )\n\nfig = go.Figure(data = [trace2], layout = layout)\nfig.show()","795c2c4d":"jovenes_fallecidos_chile = []\n\nfor i in dates_d :\n    f_j = grupo_fallecidos[grupo_fallecidos['Grupo de edad']=='<=39'][i].sum()\n    jovenes_fallecidos_chile.append(f_j)\n\ntrace = go.Scatter(\n                x=grupo_fallecidos.iloc[:,1:].columns,\n                y=jovenes_fallecidos_chile,\n                name=\"Pacientes Criticos\",\n                mode='lines+markers',\n                line_color='red')\n\nlayout = go.Layout(template=\"ggplot2\", width=800, height=600,title_text = '<b>Numero de Fallecidos Jovenes (<=39 a\u00f1os) fallecidos: '+ ultima_fecha_cl+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace], layout = layout)\nfig.show()","68398974":"grupo_fallecidos","d92b162f":"num_casos_jovenes_acumulados = data_casos_grupo_edad_mf.iloc[0:8,1].sum()\nfallecidos_jovenes = pd.DataFrame({'Numero Casos <=39 a\u00f1os': [num_casos_jovenes_acumulados], 'Fallecidos' : grupo_fallecidos[fecha_grupo_edad].iloc[0].sum()})\nfallecidos_jovenes","6bd4d9e2":"colors = ['green', 'red']\ntrace1 = go.Pie(\n                labels=fallecidos_jovenes.columns,\n                values=fallecidos_jovenes.iloc[0,:],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(colors=colors, \n                            line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=800, height=600,title_text = '<b>Porcentaje de personas <=39 fallecidas del total de personas <=39 contagiadas: '+fecha_grupo_edad+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","26c51951":"num_casos_ancianos_acumulados = data_casos_grupo_edad_mf.iloc[12:17,1].sum()\nfallecidos_ancianos = pd.DataFrame({'Numero Casos >=60 a\u00f1os': [num_casos_ancianos_acumulados], 'Fallecidos' : grupo_fallecidos[fecha_grupo_edad].iloc[3:7].sum()})\nfallecidos_ancianos","f4f0bb59":"colors = ['green', 'red']\ntrace1 = go.Pie(\n                labels=fallecidos_ancianos.columns,\n                values=fallecidos_ancianos.iloc[0,:],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(colors=colors, \n                            line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=800, height=600,title_text = '<b>Porcentaje de personas >=60 fallecidas del total de personas >=60 contagiadas: '+fecha_grupo_edad+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()","f6e74a29":"grupo_uci = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto9\/HospitalizadosUCIEtario.csv')\npacientes_criticos = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto23\/PacientesCriticos.csv')\ngrupo_uci_reg = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto8\/UCI.csv')\ntipo_cama = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto24\/CamasHospital_Diario.csv')\npacientes_ventilacion = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto30\/PacientesVMI.csv')","85ca074e":"trace = go.Scatter(\n                x=pacientes_criticos.iloc[:,1:].columns,\n                y=pacientes_criticos.iloc[0,1:],\n                name=\"Pacientes Criticos\",\n                mode='lines+markers',\n                line_color='red')\n\nlayout = go.Layout(template=\"ggplot2\", width=800, height=600,title_text = '<b>Numero de Pacientes Criticos Fecha: '+ ultima_fecha_cl+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace], layout = layout)\nfig.show()","c79b2521":"fig = make_subplots(rows=1, cols=2)\ncolors = ['gold', 'darkorange', 'crimson','mediumturquoise', 'sandybrown', 'grey',  'lightgreen','navy','deeppink','purple']\ntrace1 = go.Pie(\n                labels=grupo_uci['Grupo de edad'],\n                values=grupo_uci[ultima_fecha_cl],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(colors=colors, \n                            line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=700, height=500,title_text = '<b>Porcentaje de personas hospitalizadas por grupo de edad : '+ultima_fecha_cl+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1], layout = layout)\n\n#Grafico 1\ntitulo ='Numero de personas Hopitalizadas por grupo de edad Fecha: '+ultima_fecha_cl\n\nfig2 = px.bar(x=grupo_uci['Grupo de edad'], y=grupo_uci[ultima_fecha_cl],\n            title=titulo,\n           text=grupo_uci[ultima_fecha_cl]\n            \n)\nfig2.update_xaxes(title_text=\"Age Group\")\nfig2.update_yaxes(title_text=\"Number of cases\")\n\nfig.show()\nfig2.show()","d10777eb":"titulo ='N\u00famero de pacientes hospitalizados seg\u00fan el tipo de cama.: '+ultima_fecha_cl\n\nfig = make_subplots(rows=1, cols=2)\ncolors = ['gold', 'darkorange', 'crimson','mediumturquoise', 'sandybrown', 'grey',  'lightgreen','navy','deeppink','purple']\ntrace1 = go.Pie(\n                labels=tipo_cama['Tipo de cama'],\n                values=tipo_cama[ultima_fecha_cl],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(colors=colors, \n                            line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=700, height=500,title_text = '<b>Porcentaje de pacientes hospitalizados seg\u00fan el tipo de cama.: '+ultima_fecha_cl+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1], layout = layout)\n\n\n#Grafico 1\n\nfig2 = px.bar(x=tipo_cama['Tipo de cama'], y=tipo_cama[ultima_fecha_cl],\n            title=titulo,\n           text=tipo_cama[ultima_fecha_cl]\n            \n)\nfig2.update_xaxes(title_text=\"type of bed\")\nfig2.update_yaxes(title_text=\"Number cases\")\nfig.show()\nfig2.show()","68b1f7f8":"pacientes_ventilacion\n","2049d8e6":"trace2 = go.Scatter(\n                x=pacientes_ventilacion.iloc[:,1:].columns,\n                y=pacientes_ventilacion.iloc[0,1:],\n                name=\"Pacientes VMI\",\n                mode='lines+markers',\n                line_color='red')\n\n\n\nlayout = go.Layout(template=\"ggplot2\", width=800, height=600,title_text = '<b>Paciente VMI '+ ultima_fecha_cl+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace2], layout = layout)\nfig.show()","aa364b25":"trace = go.Scatter(\n                x=data_chile_r.iloc[:,1:].columns,\n                y=data_chile_r.iloc[6,1:],\n                name=\"Casos Nuevos Totales por d\u00eda\",\n                mode='lines+markers',\n                line_color='blue')\n\ntrace2 = go.Scatter(\n                x=pacientes_ventilacion.iloc[:,1:].columns,\n                y=pacientes_ventilacion.iloc[0,1:],\n                name=\"Pacientes VMI\",\n                mode='lines+markers',\n                line_color='red')\n\nlayout = go.Layout(template=\"ggplot2\", width=850, height=600,title_text = '<b>Casos Nuevos vs Pacientes VMI '+ ultima_fecha_cl+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace,trace2], layout = layout)\nfig.show()","8ca6eab6":"fig = px.bar(x=grupo_uci_reg[ultima_fecha_cl], y=grupo_uci_reg['Region'], \n             title='Numero de personas Hospitalizadas por Regi\u00f3n: '+ultima_fecha_cl,\n             orientation='h',\n             width=800, height=700)\nfig.update_traces(marker_color='#008000', opacity=0.8, textposition='inside')\n\nfig.update_layout(template = 'plotly_white')\nfig.update_yaxes(title_text=\"Age Group\")\nfig.update_xaxes(title_text='Number of Hospitalized')\n\ntrace1 = go.Pie(\n                labels=grupo_uci_reg['Region'],\n                values=grupo_uci_reg[ultima_fecha_cl],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(colors=colors, \n                            line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=800, height=650,title_text = '<b>Porcentaje de personas Hospitalizadas por Regi\u00f3n <\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig2 = go.Figure(data = [trace1], layout = layout)\n\nfig.show()\nfig2.show()","1db18ad7":"fecha_uci_ge = fecha_grupo_edad\nprint(\"ACTUALIZADO FECHA: \"+fecha_grupo_edad)\n\njovenes = data_casos_grupo_edad_mf.iloc[0:7,1].sum()\ngrupo_jovenes_uci = pd.DataFrame({'Numero Casos': [jovenes], 'UCI' : grupo_uci[fecha_grupo_edad].iloc[0]})\ngrupo_jovenes_uci","b655fa94":"trace = go.Scatter(\n                x=grupo_uci.iloc[:,1:].columns,\n                y=grupo_uci.iloc[0,1:],\n                name=\"Pacientes <39 en UCI\",\n                mode='lines+markers',\n                line_color='red')\n\nlayout = go.Layout(template=\"ggplot2\", width=800, height=600,title_text = '<b>N\u00famero de Pacientes <=39 en UCI '+ grupo_uci.columns[-1]+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig2 = go.Figure(data = [trace], layout = layout)\n\n\n\ncolors = ['green', 'red']\ntrace1 = go.Pie(\n                labels=grupo_jovenes_uci.columns,\n                values=grupo_jovenes_uci.iloc[0,:],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(colors=colors, \n                            line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=700, height=500,title_text = '<b>Porcentaje de personas <=39 en UCI: '+fecha_uci_ge+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\nfig2.show()","37c6e4a0":"mayores = data_casos_grupo_edad_mf.iloc[13:17,1].sum()\ngrupo_mayores_uci = pd.DataFrame({'Numero Casos': [mayores], 'UCI' : grupo_uci['2020-05-08'].iloc[3:5].sum()})\ngrupo_mayores_uci","5606e9b3":"trace = go.Scatter(\n                x=grupo_uci.iloc[:,1:].columns,\n                y=grupo_uci.iloc[3:5,1:].sum(),\n                name=\"Pacientes >=70 en UCI\",\n                mode='lines+markers',\n                line_color='red')\n\nlayout = go.Layout(template=\"ggplot2\", width=800, height=600,title_text = '<b>N\u00famero de Pacientes >=60 en UCI '+ grupo_uci.columns[-1]+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig2 = go.Figure(data = [trace], layout = layout)\n\n\ncolors = ['green', 'red']\ntrace1 = go.Pie(\n                labels=grupo_mayores_uci.columns,\n                values=grupo_mayores_uci.iloc[0,:],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(colors=colors, \n                            line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=700, height=500,title_text = '<b>Porcentaje de personas >=60 en UCI: '+fecha_uci_ge+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1], layout = layout)\nfig.show()\nfig2.show()","b0dcafa8":"sintomas.head()\n","ebb2510e":"fecha_sint = sintomas.columns[-1]\nsintomas_ultima_fecha = sintomas[['Sintomas',fecha_sint]]\n\nfig2 = px.bar(sintomas_ultima_fecha.sort_values(fecha_sint), \n             x=fecha_sint, y=\"Sintomas\", \n             title='Sintomas de los casos Confirmados con Fecha: '+fecha_sint,\n              text=fecha_sint, \n             orientation='h', \n             width=800, height=700)\nfig2.update_traces(marker_color='#008000', opacity=0.8, textposition='inside')\n\nfig2.update_layout(template = 'plotly_white')","09224afe":"num_vent = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto20\/NumeroVentiladores.csv')\ndates_vent = num_vent.loc[:, '2020-04-14': ultima_fecha_cl]\ndates_vent = dates_vent.keys()\n\nventiladores_oc =[]\nventiladores_dis = []\nventiladores_total = []\nfor i in dates_vent:\n    oc = num_vent[num_vent['Ventiladores']=='ocupados'][i].sum()\n    dis = num_vent[num_vent['Ventiladores']=='disponibles'][i].sum()\n    total = num_vent[num_vent['Ventiladores']=='total'][i].sum()\n    \n    ventiladores_oc.append(oc)\n    ventiladores_dis.append(dis)\n    ventiladores_total.append(total)\n    \nnum_vent","c26bf0b8":"trace = go.Scatter(\n                x=dates_vent,\n                y=ventiladores_dis,\n                name=\"Ventiladores Disponibles\",\n                mode='lines+markers',\n                line_color='green')\ntrace2 = go.Scatter(\n                x=dates_vent,\n                y=ventiladores_oc,\n                name=\"Ventiladores Ocupados\",\n                mode='lines+markers',\n                line_color='red')\n\nlayout = go.Layout(template=\"ggplot2\", width=800, height=600,title_text = '<b>Numero de Ventiladores Fecha: '+ ultima_fecha_cl+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig2 = go.Figure(data = [trace,trace2], layout = layout)\nfig2.show()","3f2ab9ff":"ventiladiores = num_vent.drop([0],axis=0)\n\nfig2 = make_subplots(rows=1, cols=2)\ncolors = ['green','red']\ntrace1 = go.Pie(\n                labels=ventiladiores['Ventiladores'],\n                values=ventiladiores[ultima_fecha_cl],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(colors=colors, \n                            line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=700, height=500,title_text = '<b>Porcentaje de ventiladores Fecha: '+ultima_fecha_cl+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig2 = go.Figure(data = [trace1], layout = layout)\n\nfig2.show()","9f2be7b0":"datos = data_chile[['Region',ultima_fecha_cl]].drop([16],axis=0)\n\nfig = px.scatter(datos, y=datos.loc[:,ultima_fecha_cl],\n                    x= datos.loc[:,\"Region\"],\n                    color= \"Region\", hover_name=\"Region\",\n                    color_continuous_scale=px.colors.sequential.Plasma,\n                    title='COVID-19: Numero Total de casos por Region',\n                    size = np.power(datos[ultima_fecha_cl]+1,0.3)-0.5,\n                    size_max = 30,\n                    height =600,\n                    )\nfig.update_coloraxes(colorscale=\"hot\")\nfig.update(layout_coloraxis_showscale=False)\nfig.update_yaxes(title_text=\"Numero casos\")\nfig.update_xaxes(title_text=\"Regiones\")\nfig.show()","f9c5944f":"data_por_comuna = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto19\/CasosActivosPorComuna.csv')\ndata_por_comuna.head()","dbcbc88b":"data_casos_por_comuna = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto2\/2020-05-25-CasosConfirmados.csv')\nfecha='2020-05-25'\ndata_casos_por_comuna_maule = data_casos_por_comuna[data_casos_por_comuna['Region']=='Maule']\ndata_casos_por_comuna.head()","7f244565":"data_casos_por_comuna_maule = data_casos_por_comuna_maule.sort_values('Casos Confirmados')\n\ntotal_maule= data_casos_por_comuna_maule['Casos Confirmados'].sum()\ntotal_maule = str(total_maule)\n\nfig2 = px.bar(x=data_casos_por_comuna_maule['Comuna'], y=data_casos_por_comuna_maule['Casos Confirmados'],\n            title='Numero de casos Totales Confirmados en el Maule por Comuna Total: '+total_maule+' Fecha: '+fecha,\n           text=data_casos_por_comuna_maule['Casos Confirmados']\n            \n)\nfig2.update_xaxes(title_text=\"Comunas\")\nfig2.update_yaxes(title_text=\"Numero de Casos\")","cef49660":"fig2 = make_subplots(rows=1, cols=2)\n\ntrace1 = go.Pie(\n                labels=data_casos_por_comuna_maule['Comuna'],\n                values=data_casos_por_comuna_maule['Casos Confirmados'],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=800, height=1000,title_text = '<b>Porcentaje de casos Totales Confirmados en el maule: '+fecha+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig2 = go.Figure(data = [trace1], layout = layout)\n\nfig2.show()","c3ff273f":"data_casos_por_comuna_talca = data_casos_por_comuna[data_casos_por_comuna['Comuna']=='Talca']\ndata_talca = pd.DataFrame({'Tipo':['Enfermos','Sanos'],'Numero': [data_casos_por_comuna_talca.iloc[0,-1],data_casos_por_comuna_talca.iloc[0,4]]})\nfig2 = make_subplots(rows=1, cols=2)\n\ntrace1 = go.Pie(\n                labels=data_talca['Tipo'],\n                values=data_talca['Numero'],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=700, height=500,title_text = '<b>Porcentajes de enfermos en Talca: '+fecha+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig2 = go.Figure(data = [trace1], layout = layout)\n\nfig2.show()","609c168f":"talca = data_por_comuna[data_por_comuna['Comuna']== 'Talca']\ndata_talca = pd.DataFrame({'Cases':['Sick','Healthy'],'Number Cases': [talca.iloc[0,-1],talca.iloc[0,4]]})\n\nfecha_talca_act =talca.columns[-1]\n\ntrace = go.Scatter(\n                x=talca.columns[5:],\n                y=talca.iloc[0,5:],\n                name=\"Pacientes Criticos\",\n                mode='lines+markers',\n                line_color='red')\n\nlayout = go.Layout(template=\"ggplot2\", width=800, height=500,title_text = '<b>Casos activos por fecha de inicio de s\u00edntomas en Talca '+ fecha_talca_act+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace], layout = layout)\nfig.show()","8d0b1584":"data_casos_por_comuna_M = data_casos_por_comuna[data_casos_por_comuna['Region']=='Metropolitana']\ntotal_santiago = str(data_casos_por_comuna_M['Casos Confirmados'].sum())\n\ndata_casos_por_comuna_M = data_casos_por_comuna_M.sort_values('Casos Confirmados',ascending=False)\nfig2 = px.bar(x=data_casos_por_comuna_M['Comuna'], y=data_casos_por_comuna_M['Casos Confirmados'],\n            title='Numero de casos Totales Confirmados en Santiago por Comuna Total: '+total_santiago+' Fecha: '+fecha,\n           text=data_casos_por_comuna_M['Casos Confirmados']\n            \n)\nfig2.update_xaxes(title_text=\"Comunas\")\nfig2.update_yaxes(title_text=\"Numero de Casos\")","9bfd6b66":"fig2 = make_subplots(rows=1, cols=2)\n\ntrace1 = go.Pie(\n                labels=data_casos_por_comuna_M['Comuna'],\n                values=data_casos_por_comuna_M['Casos Confirmados'],\n                hoverinfo='label+percent', \n                textfont_size=12,\n                marker=dict(line=dict(color='#000000', width=2)))\nlayout = go.Layout(width=800, height=1000,title_text = '<b>Numero de casos Totales Confirmados en Santiago: '+fecha+'<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig2 = go.Figure(data = [trace1], layout = layout)\n\nfig2.show()","66816441":"data_casos_por_comuna_r = data_casos_por_comuna[data_casos_por_comuna['Region']=='Los R\u00edos']\n\ndata_casos_por_comuna_r = data_casos_por_comuna_r.sort_values('Casos Confirmados')\n\ntotal_rios= data_casos_por_comuna_r['Casos Confirmados'].sum()\ntotal_rios = str(total_rios)\n\nfig2 = px.bar(x=data_casos_por_comuna_r['Comuna'], y=data_casos_por_comuna_r['Casos Confirmados'],\n            title='Numero de casos Totales Confirmados en el Los R\u00edos por Comuna'+' Fecha: '+fecha,\n           text=data_casos_por_comuna_r['Casos Confirmados']\n            \n)\nfig2.update_xaxes(title_text=\"Comunas\")\nfig2.update_yaxes(title_text=\"Numero de Casos\")","798da9c3":"fallecimientos_en_chile = pd.read_csv('https:\/\/raw.githubusercontent.com\/MinCiencia\/Datos-COVID19\/master\/output\/producto32\/Defunciones_T.csv')\nfallecimientos_en_chile.head()","d31b0472":"data_fallecidos = fallecimientos_en_chile.drop(0,axis=0)\ndata_fallecidos = data_fallecidos.drop(1,axis=0)\ndata_fallecidos = data_fallecidos.drop(2,axis=0)\ndata_fallecidos","4a3eddd2":"data_fallecidos","9e593279":"#https:\/\/www.it-swarm.dev\/es\/python\/pandas-suma-las-filas-de-dataframe-para-columnas-dadas\/1047832035\/\ndata_fallecidos = fallecimientos_en_chile.drop(0,axis=0)\ndata_fallecidos = data_fallecidos.drop(1,axis=0)\ndata_fallecidos = data_fallecidos.drop(2,axis=0)\n\ncolum= data_fallecidos.iloc[:,1:].columns.tolist()\ndata_fallecidos[colum] = data_fallecidos[colum].astype(np.int64)\ndata_fallecidos['Total'] = data_fallecidos.sum(axis=1)\ncolum_el= data_fallecidos.iloc[:,1:338].columns.tolist()\ndata_fallecidos_sum = data_fallecidos.drop(colum_el,axis=1)\ndata_fallecidos_sum['Region'] = pd.to_datetime(data_fallecidos_sum.Region)\ndata_fallecidos_sum","05df28c3":"a\u00f1os = data_fallecidos_sum['Region'].dt.strftime('%Y').unique()\ntotal_fallecimientos_mes = pd.DataFrame({'A\u00f1os': a\u00f1os,'January':0,'February':0,'March':0,'April':0,'May':0,'June':0,'July':0,'August':0,'August':0,'September':0,'October':0,'November':0,'December':0})\ntotal_fallecimientos_mes","49d1bd50":"#https:\/\/stackoverrun.com\/es\/q\/5246269\n#filtro_registros_a\u00f1o = data_fallecidos_sum[data_fallecidos_sum['Region'].dt.strftime('%Y') == '2010']\n#meses = filtro_registros_a\u00f1o.groupby(a\u00f1o['Region'].dt.strftime('%B'))['Total'].sum()\n#meses\nregistros_meses = ['January','February','March','April','May','June','July','August','September','October','November','December']\nfor a\u00f1o_c in a\u00f1os:\n    filtro_registros_a\u00f1o = data_fallecidos_sum[data_fallecidos_sum['Region'].dt.strftime('%Y') == a\u00f1o_c]\n    #filtro_registros_mes = filtro_registros_a\u00f1o.groupby(a\u00f1o['Region'].dt.strftime('%B'))['Total'].sum()\n    for i_meses in registros_meses:\n        num_f = filtro_registros_a\u00f1o[filtro_registros_a\u00f1o['Region'].dt.strftime('%B') == i_meses].sum().values\n        if(num_f[0] == 0):\n            total_fallecimientos_mes.loc[total_fallecimientos_mes.A\u00f1os == a\u00f1o_c, i_meses] = 0\n        else:\n            total_fallecimientos_mes.loc[total_fallecimientos_mes.A\u00f1os == a\u00f1o_c, i_meses] = num_f\n\ntotal_fallecimientos_mes    ","d8dace46":"a\u00f1o_2010 =[]\na\u00f1o_2011 =[]\na\u00f1o_2012 =[]\na\u00f1o_2013 =[]\na\u00f1o_2014 =[]\na\u00f1o_2015 =[]\na\u00f1o_2016 =[]\na\u00f1o_2017 =[]\na\u00f1o_2018 =[]\na\u00f1o_2019 =[]\na\u00f1o_2020 =[]\n\nfor i in registros_meses:\n    reg_a\u00f1o_2010 = total_fallecimientos_mes[total_fallecimientos_mes['A\u00f1os']==2010][i].sum()\n    reg_a\u00f1o_2011 = total_fallecimientos_mes[total_fallecimientos_mes['A\u00f1os']==2011][i].sum()\n    reg_a\u00f1o_2012 = total_fallecimientos_mes[total_fallecimientos_mes['A\u00f1os']==2012][i].sum()\n    reg_a\u00f1o_2013 = total_fallecimientos_mes[total_fallecimientos_mes['A\u00f1os']==2013][i].sum()\n    reg_a\u00f1o_2014 = total_fallecimientos_mes[total_fallecimientos_mes['A\u00f1os']==2014][i].sum()\n    reg_a\u00f1o_2015 = total_fallecimientos_mes[total_fallecimientos_mes['A\u00f1os']==2015][i].sum()\n    reg_a\u00f1o_2016 = total_fallecimientos_mes[total_fallecimientos_mes['A\u00f1os']==2016][i].sum()\n    reg_a\u00f1o_2017 = total_fallecimientos_mes[total_fallecimientos_mes['A\u00f1os']==2017][i].sum()\n    reg_a\u00f1o_2018 = total_fallecimientos_mes[total_fallecimientos_mes['A\u00f1os']==2018][i].sum()\n    reg_a\u00f1o_2019 = total_fallecimientos_mes[total_fallecimientos_mes['A\u00f1os']==2019][i].sum()\n    reg_a\u00f1o_2020 = total_fallecimientos_mes[total_fallecimientos_mes['A\u00f1os']==2020][i].sum()\n\n    a\u00f1o_2010.append(reg_a\u00f1o_2010)\n    a\u00f1o_2011.append(reg_a\u00f1o_2011)\n    a\u00f1o_2012.append(reg_a\u00f1o_2012)\n    a\u00f1o_2013.append(reg_a\u00f1o_2013)\n    a\u00f1o_2014.append(reg_a\u00f1o_2014)\n    a\u00f1o_2015.append(reg_a\u00f1o_2015)\n    a\u00f1o_2016.append(reg_a\u00f1o_2016)\n    a\u00f1o_2017.append(reg_a\u00f1o_2017)\n    a\u00f1o_2018.append(reg_a\u00f1o_2018)\n    a\u00f1o_2019.append(reg_a\u00f1o_2019)\n    a\u00f1o_2020.append(reg_a\u00f1o_2020)","bfb82490":"trace = go.Scatter(\n                x=registros_meses,\n                y=a\u00f1o_2010,\n                name=\"2010\",\n                mode='lines+markers',\n                line_color='#800080')\ntrace2 = go.Scatter(\n                x=registros_meses,\n                y=a\u00f1o_2011,\n                name=\"2011\",\n                mode='lines+markers',\n                line_color='green')\ntrace3 = go.Scatter(\n                x=registros_meses,\n                y=a\u00f1o_2012,\n                name=\"2012\",\n                mode='lines+markers',\n                line_color='#000080')\ntrace4 = go.Scatter(\n                x=registros_meses,\n                y=a\u00f1o_2013,\n                name=\"2013\",\n                mode='lines+markers',\n                line_color='#00FFFF')\ntrace5 = go.Scatter(\n                x=registros_meses,\n                y=a\u00f1o_2014,\n                name=\"2014\",\n                mode='lines+markers',\n                line_color='#FFFF00')\ntrace6 = go.Scatter(\n                x=registros_meses,\n                y=a\u00f1o_2015,\n                name=\"2015\",\n                mode='lines+markers',\n                line_color='#000000')\ntrace7 = go.Scatter(\n                x=registros_meses,\n                y=a\u00f1o_2016,\n                name=\"2016\",\n                mode='lines+markers',\n                line_color='#808080')\ntrace8 = go.Scatter(\n                x=registros_meses,\n                y=a\u00f1o_2017,\n                name=\"2017\",\n                mode='lines+markers',\n                line_color='#008080')\ntrace9 = go.Scatter(\n                x=registros_meses,\n                y=a\u00f1o_2018,\n                name=\"2018\",\n                mode='lines+markers',\n                line_color='#00FF00')\ntrace10 = go.Scatter(\n                x=registros_meses,\n                y=a\u00f1o_2019,\n                name=\"2019\",\n                mode='lines+markers',\n                line_color='#800000')\ntrace11 = go.Scatter(\n                x=registros_meses,\n                y=a\u00f1o_2020,\n                name=\"2020\",\n                mode='lines+markers',\n                line_color='red')\n\n\nlayout = go.Layout(template=\"ggplot2\", width=1000, height=600,title_text = '<b>Numero de Fallecidos entre 2010-2020 hasta el momento en Chile(2020 no esta completo)<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig2 = go.Figure(data = [trace,trace2,trace3,trace4,trace5,trace6,trace7,trace8,trace9,trace10,trace11], layout = layout)\nfig2.show()","f260ad6f":"suma_4meses = total_fallecimientos_mes\ncol_list= ['January','February','March','April']\nsuma_4meses['Total 4 Meses'] = suma_4meses[col_list].sum(axis=1)\nsuma_4meses","0b19f651":"fig2 = px.bar(x=suma_4meses['Total 4 Meses'], y=total_fallecimientos_mes['A\u00f1os'], \n             title='Total de Fallecidos en los meses de Enero a Abril',\n              text=suma_4meses['Total 4 Meses'], \n             orientation='h', \n             width=800, height=500)\nfig2.update_traces(marker_color='#008000', opacity=0.8, textposition='inside')\n\nfig2.update_layout(template = 'plotly_white')\nfig2.update_xaxes(title_text=\"N\u00famero de Fallecidos\")\nfig2.update_yaxes(title_text=\"A\u00f1os\")","f4407c0e":"def hyperopt_kr(X,y,max_iter):\n\n    def objective(hyperparameters):\n        \n        global ITERATION\n    \n        ITERATION += 1\n        start = timer()\n        clf = KernelRidge(**hyperparameters)\n        \n        cv_results = cross_val_score(clf,X, y,cv=10,scoring='neg_mean_squared_error',n_jobs=-1).mean() \n\n        run_time = timer() - start\n        \n        best_score = cv_results\n        loss = 1 - cv_results\n\n        return {'loss': loss, 'hyperparameters': hyperparameters, 'iteration': ITERATION,\n                'train_time': run_time, 'status': STATUS_OK}\n    \n    kernel_list = [ 'polynomial']\n\n    \n    space = {\n            'alpha': hp.quniform('alpha', 0.000001, 20, 0.000001),\n            'degree': hp.quniform('degree', 0.000001, 10, 0.00001),\n            'coef0': hp.quniform('coef0', 0.000001, 10, 0.00001),\n            'kernel': hp.choice('kernel', kernel_list),\n\n    }\n\n\n\n\n    tpe_algorithm = tpe.suggest\n    trials = Trials()\n    \n    # Ejecutar optimizaci\u00f3n\n    best = fmin(fn = objective, space = space, algo = tpe.suggest, trials = trials,\n                max_evals = max_iter)\n    \n    best['kernel'] = kernel_list[best['kernel']]\n    return best","65c50883":"X_cl = days_chile\ny_cl = casos_chile\n\ny_cl = np.array(casos_chile).reshape(-1, 1)\n\n#from scipy.stats import boxcox\n\n#y_cl, lam = boxcox(casos_chile)\n\nX_train, X_test, y_train, y_test = train_test_split(X_cl\n                                                    , y_cl\n                                                    , test_size= 0.05\n                                                    , shuffle=False\n                                                    , random_state = 42)\n#poly = PolynomialFeatures(degree=4)\n#poly_X_train = poly.fit_transform(X_train)\n#poly_X_test = poly.fit_transform(X_test)\n\n\n#FUNCION OBTENIDA DE: https:\/\/www.kaggle.com\/gatunnopvp\/covid-19-in-brazil-prediction-updated-05-23-20\nrmse = 10000\ndegree = 0\nfor i in range(71):\n    # Transform our cases data for polynomial regression\n    poly = PolynomialFeatures(degree=i)\n    poly_X_train = poly.fit_transform(X_train)\n    poly_X_test = poly.fit_transform(X_test)\n\n    \n    #b = hyperopt_svm(poly_X_train,y_train,500)\n    # polynomial regression cases\n    model_kr_cl = KernelRidge()\n    model_kr_cl.fit(poly_X_train, y_train)\n    test_linear_pred = model_kr_cl.predict(poly_X_test)\n\n    # evaluating with RMSE\n    rm = sqrt(mean_squared_error(y_test, test_linear_pred))\n    if(rm<rmse):\n        rmse = rm\n        degree = i\n    if(i==70):\n        print('the best mae is:',round(rmse,2))\n        print('the best degree for cases is:',degree)\n        ","5bc02bfc":"global  ITERATION\nITERATION = 0\npoly = PolynomialFeatures(degree=degree)\npoly_X_train = poly.fit_transform(X_train)\npoly_X_test = poly.fit_transform(X_test)\nparam = hyperopt_kr(poly_X_train,y_train,500)\n\n#poly_X_train=X_train\n#poly_X_test = X_test\n\nmodel_kr_cl_1 = KernelRidge(**param)\nmodel_kr_cl_1.fit(poly_X_train, y_train)\npred_rg_cl_1=model_kr_cl_1.predict(poly_X_test)\n\nprint('RMSE:', sqrt(mean_squared_error(y_test, pred_rg_cl_1)))\nscore = rmsle_cv(model_kr_cl_1,poly_X_test,y_test)\nprint(\"Kernel Ridge score CV: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n","afcbb3b0":"dataframe=pd.DataFrame(X_test, columns=['D\u00edas'])\n\nprint(\"Root Mean Square Value:\",np.sqrt(mean_squared_error(y_test,pred_rg_cl_1)))\nprint('MAE:', mean_absolute_error(pred_rg_cl_1, y_test))\nprint('MSE:',mean_squared_error(pred_rg_cl_1, y_test))\n\nplt.figure(figsize=(11,6))\nplt.plot(y_test,label=\"Actual Confirmed Cases\")\nplt.plot(dataframe.index,pred_rg_cl_1, linestyle='--',label=\"Predicted Confirmed Cases using Kernel Ridge\",color='black')\nplt.xlabel('D\u00edas')\nplt.ylabel('Casos Confirmados')\nplt.xticks(rotation=90)\nplt.legend()","95dba144":"days_in_future_cl = 20\nfuture_forcast_cl = np.array([i for i in range(len(dates_chile)+days_in_future_cl)]).reshape(-1, 1)\nadjusted_dates_cl = future_forcast_cl[:-days_in_future_cl]\nstart_cl = '03\/03\/2020'\nstart_date_cl = datetime.datetime.strptime(start_cl, '%m\/%d\/%Y')\nfuture_forcast_dates_cl = []\nfor i in range(len(future_forcast_cl)):\n    future_forcast_dates_cl.append((start_date_cl + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))\n\nfuture_forcast_cl = poly.fit_transform(future_forcast_cl)\n\nkr_pred_cl = model_kr_cl_1.predict(future_forcast_cl)\n\nPredict_df_cl_1= pd.DataFrame()\nPredict_df_cl_1[\"Fecha\"] = list(future_forcast_dates_cl[-days_in_future_cl-1:])\nPredict_df_cl_1[\"N\u00b0 Casos\"] =np.round(kr_pred_cl[-days_in_future_cl-1:])\nPredict_df_cl_1","61a1bd6d":"trace1 = go.Scatter(\n                x= np.array(future_forcast_dates_cl),\n                y=casos_chile,\n                name=\"Casos Confirmados\",\n                mode='lines+markers',\n                line_color='green')\n\ntrace2 = go.Scatter(\n                x=Predict_df_cl_1[\"Fecha\"],\n                y=Predict_df_cl_1[\"N\u00b0 Casos\"],\n                name=\"Predicciones\",\n                mode='lines+markers',\n                line_color='blue')\n\nlayout = go.Layout(template=\"ggplot2\", width=900, height=600, title_text ='<b>Prediccion del N\u00famero de casos para los siguientes '+str(days_in_future_cl)+' d\u00edas en Chile<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1,trace2], layout = layout)\nfig.show()","43a7fa61":"X_cl = days_chile\ny_cl = casos_chile\n\n#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.10,shuffle=False) \n#Splitting data into train and test to evaluate our model\n\nparameters = {\n        'alpha':[0.000001,0.0001,0.001,0.1,0.0002,0.2,0.25,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.2,1.3,1.4,1.5,1.6,2,2.1,2.2,2.3,2.4,2.5,3,4,5],\n        'kernel': ['polynomial'],\n        'degree': [0.0001,0.001,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1,1.5,1.6,2,2.1,2.2,2.3,2.4,3,4,4.2,4.3,4.5,5,6],\n        'coef0': [0.0001,0.001, 0.1,0.0002,0.2,0.25,1,1.2,1.5,2,2.1,2.2,2.5,3,3.2,3.5,4,4.1,4.2,4.3,4.5,5]\n    }\nclf =KernelRidge()\nclf1 = GridSearchCV(clf, parameters,scoring='neg_mean_squared_error', n_jobs=-1, cv=10)\n#clf1.fit(X_cl, y_cl)\nclf1.fit(X_cl, y_cl)\n\nbest_params = clf1.best_params_\nbeast_score =clf1.best_score_\n\nprint(\"Mejor puntuacion:\",beast_score)\nprint(\"Mejores Parametros;\",best_params)\n\nmodel_kr_cl = KernelRidge(**best_params)\n#model_kr_cl.fit(X_cl, y_cl)\nmodel_kr_cl.fit(X_cl, y_cl)\n\n\n#score = rmsle_cv(model_kr_cl,X_cl,y_cl)\nscore = rmsle_cv(model_kr_cl,X_cl,y_cl)\n\nprint(\"Kernel Ridge score: {:.4f} ({:.4f})\\n\".format(score.mean(), score.std()))\n\ndataframe=pd.DataFrame(X_cl, columns=['Days'])\npred_rg_cl=model_kr_cl.predict(np.array(X_cl).reshape(-1,1))\nprint(\"Root Mean Square Value:\",np.sqrt(mean_squared_error(y_cl,pred_rg_cl)))\nprint('MAE:', mean_absolute_error(pred_rg_cl, y_cl))\nprint('MSE:',mean_squared_error(pred_rg_cl, y_cl))\n\nplt.figure(figsize=(11,6))\nplt.plot(y_cl,label=\"Actual Confirmed Cases\")\nplt.plot(dataframe.index,pred_rg_cl, linestyle='--',label=\"Predicted Confirmed Cases using Kernel Ridge\",color='black')\nplt.xlabel('Days')\nplt.ylabel('Confirmed Cases')\nplt.xticks(rotation=90)\nplt.legend()","ccd5fcdf":"days_in_future_cl = 20\nfuture_forcast_cl = np.array([i for i in range(len(dates_chile)+days_in_future_cl)]).reshape(-1, 1)\nadjusted_dates_cl = future_forcast_cl[:-days_in_future_cl]\nstart_cl = '03\/03\/2020'\nstart_date_cl = datetime.datetime.strptime(start_cl, '%m\/%d\/%Y')\nfuture_forcast_dates_cl = []\nfor i in range(len(future_forcast_cl)):\n    future_forcast_dates_cl.append((start_date_cl + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))\n    \nkr_pred_cl = model_kr_cl.predict(future_forcast_cl)\n\nPredict_df_cl= pd.DataFrame()\nPredict_df_cl[\"Date\"] = list(future_forcast_dates_cl[-days_in_future_cl-1:])\nPredict_df_cl[\"N\u00b0 Cases\"] =np.round(kr_pred_cl[-days_in_future_cl-1:])\nPredict_df_cl","69890077":"trace1 = go.Scatter(\n                x= np.array(future_forcast_dates_cl),\n                y=casos_chile,\n                name=\"Casos Confirmados\",\n                mode='lines+markers',\n                line_color='green')\n\ntrace2 = go.Scatter(\n                x=Predict_df_cl[\"Date\"],\n                y=Predict_df_cl[\"N\u00b0 Cases\"],\n                name=\"Predicciones\",\n                mode='lines+markers',\n                line_color='blue')\n\nlayout = go.Layout(template=\"ggplot2\", width=900, height=600, title_text ='<b>Prediccion del N\u00famero de casos para los siguientes '+str(days_in_future_cl)+' d\u00edas en Chile<\/b>',\n                  font=dict(family=\"Arial, Balto, Courier New, Droid Sans\",color='black'))\nfig = go.Figure(data = [trace1,trace2], layout = layout)\nfig.show()","dde888a5":"days_chile2 = np.array([i for i in range(len(dates_chile))])\n\ndata_ch = pd.DataFrame({'D\u00edas': list(days_chile2), 'Casos':casos_chile})\ndata_ch.head()","5ee54327":"from statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing\n\nmodel_scores= []\n\nx_train=data_ch.iloc[:int(data_ch.shape[0]*0.95)]\nx_test=data_ch.iloc[int(data_ch.shape[0]*0.95):]\ny_pred=x_test.copy()\n\nes=ExponentialSmoothing(np.asarray(x_train['Casos']),seasonal_periods=3,trend='add', seasonal='mul').fit()\ny_pred[\"prediccion\"]=es.forecast(len(x_test))\n\nmodel_scores.append(np.sqrt(mean_squared_error(y_pred[\"Casos\"],y_pred[\"prediccion\"])))\nprint(\"Root Mean Square Error: \",np.sqrt(mean_squared_error(y_pred[\"Casos\"],y_pred[\"prediccion\"])))","c0f376fc":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=x_train.index, y=x_train[\"Casos\"],\n                    mode='lines+markers',name=\"Casos Reales\"))\nfig.add_trace(go.Scatter(x=x_test.index, y=x_test[\"Casos\"],\n                    mode='lines+markers',name=\"Casos de Validacion\",))\nfig.add_trace(go.Scatter(x=x_test.index, y=y_pred[\"prediccion\"],\n                    mode='lines+markers',name=\"Casos Predichos\",))\nfig.update_layout(title=\"Prediccion de Casos\",\n                 xaxis_title=\"Date\",yaxis_title=\"Casos Confirmados\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","c149a3b7":"es=ExponentialSmoothing(np.asarray(data_ch['Casos']),seasonal_periods=10,trend='add', seasonal='mul').fit()\n\ndays_in_future_cl = 20\nfuture_forcast_cl = np.array([i for i in range(len(dates_chile)+days_in_future_cl)]).reshape(-1, 1)\nadjusted_dates_cl = future_forcast_cl[:-days_in_future_cl]\nstart_cl = '03\/03\/2020'\nstart_date_cl = datetime.datetime.strptime(start_cl, '%m\/%d\/%Y')\nfuture_forcast_dates_cl = []\nfor i in range(len(future_forcast_cl)):\n    future_forcast_dates_cl.append((start_date_cl + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))\n        \nPredict_df_cl_1= pd.DataFrame()\nPredict_df_cl_1[\"Fecha\"] = list(future_forcast_dates_cl[-days_in_future_cl:])\nPredict_df_cl_1[\"N\u00b0 Casos\"] =np.round(list(es.forecast(20)))\nPredict_df_cl_1","eb28befa":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=np.array(future_forcast_dates_cl), y=data_ch[\"Casos\"],\n                        mode='lines+markers',name=\"Casos Reales\"))\nfig.add_trace(go.Scatter(x=Predict_df_cl_1['Fecha'], y=Predict_df_cl_1[\"N\u00b0 Casos\"],\n                        mode='lines+markers',name=\"Predicci\u00f3n de Casos\",))\n\nfig.update_layout(title=\"Proyecci\u00f3n de casos en 20 d\u00edas\",\n                    xaxis_title=\"Fecha\",yaxis_title=\"N\u00famero de Casos\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","2247a75d":"days_fallecidos_chile = np.array([i for i in range(len(fechas_chile ))])\n\ndata_ch_fallecidos = pd.DataFrame({'D\u00edas': list(days_fallecidos_chile), 'Fallecidos': [int(x) for x in fallecidos_por_dia]})\ncasos_f = data_ch_fallecidos['Fallecidos']+1\ndata_ch_fallecidos = pd.DataFrame({'D\u00edas': list(days_fallecidos_chile), 'Fallecidos':casos_f})\ndata_ch_fallecidos.head()","65407756":"from statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing\n\nmodel_scores= []\n\nx_train=data_ch_fallecidos.iloc[:int(data_ch_fallecidos.shape[0]*0.95)]\nx_test=data_ch_fallecidos.iloc[int(data_ch_fallecidos.shape[0]*0.95):]\ny_pred=x_test.copy()\n\nes=ExponentialSmoothing(np.asarray(x_train['Fallecidos']),seasonal_periods=3,trend='add', seasonal='mul').fit()\ny_pred[\"prediccion\"]=es.forecast(len(x_test))\n\nmodel_scores.append(np.sqrt(mean_squared_error(y_pred[\"Fallecidos\"],y_pred[\"prediccion\"])))\nprint(\"Root Mean Square Error: \",np.sqrt(mean_squared_error(y_pred[\"Fallecidos\"],y_pred[\"prediccion\"])))","b81a5bd2":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=x_train.index, y=x_train[\"Fallecidos\"],\n                    mode='lines+markers',name=\"Casos Reales\"))\nfig.add_trace(go.Scatter(x=x_test.index, y=x_test[\"Fallecidos\"],\n                    mode='lines+markers',name=\"Fallecidos de Validacion\",))\nfig.add_trace(go.Scatter(x=x_test.index, y=y_pred[\"prediccion\"],\n                    mode='lines+markers',name=\"Fallecidos Predichos\",))\nfig.update_layout(title=\"Prediccion de Fallecidos\",\n                 xaxis_title=\"Date\",yaxis_title=\"Fallecidos Confirmados\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","159fd242":"es=ExponentialSmoothing(np.asarray(data_ch_fallecidos['Fallecidos']),seasonal_periods=5,trend='add', seasonal='mul').fit()\n\ndays_in_future_cl = 20\nfuture_forcast_cl = np.array([i for i in range(len(dates_chile)+days_in_future_cl)]).reshape(-1, 1)\nadjusted_dates_cl = future_forcast_cl[:-days_in_future_cl]\nstart_cl = '03\/03\/2020'\nstart_date_cl = datetime.datetime.strptime(start_cl, '%m\/%d\/%Y')\nfuture_forcast_dates_cl = []\nfor i in range(len(future_forcast_cl)):\n    future_forcast_dates_cl.append((start_date_cl + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))\n        \nPredict_df_cl_1= pd.DataFrame()\nPredict_df_cl_1[\"Fecha\"] = list(future_forcast_dates_cl[-days_in_future_cl:])\nPredict_df_cl_1[\"N\u00b0 Fallecidos\"] =np.round(list(es.forecast(20)))\nPredict_df_cl_1","ef8451e0":"fig=go.Figure()\nfig.add_trace(go.Scatter(x=np.array(future_forcast_dates_cl), y=data_ch_fallecidos[\"Fallecidos\"],\n                        mode='lines+markers',name=\"Fallecidos Reales\"))\nfig.add_trace(go.Scatter(x=Predict_df_cl_1['Fecha'], y=Predict_df_cl_1[\"N\u00b0 Fallecidos\"],\n                        mode='lines+markers',name=\"Predicci\u00f3n de Fallecidos\",))\n\nfig.update_layout(title=\"Proyecci\u00f3n de Fallecidos en 20 d\u00edas\",\n                    xaxis_title=\"Fecha\",yaxis_title=\"N\u00famero de Fallecidos\",legend=dict(x=0,y=1,traceorder=\"normal\"))\nfig.show()","ba51ac1e":"# 7.Casos por Region","bfc34a1d":"### 3.5.1 Numero de paciente jovenes(<=39) hospitalizados del total de contagiados","bc91cd45":"**7.1.1.1 Casos activos por fecha de inicio de s\u00edntomas : Talca\n**","cd3d4250":"## Modelo 1: Divisi\u00f3n de datos + PolynomialFeatures + Hyperopt","801feb76":"# 4.Sintomas confimados","0827f62d":"### Prediccion a 20 dias","3b14c95f":"### Prediccion a 20 dias","cb7aeaa5":"## 2.3.1.1. Numero de paciente jovenes(<=39) Fallecidos del total de personas <=39 a\u00f1os contagiadas","06b44929":"## 2.3.2. Numero de paciente mayores (>=60) Fallecidos del totla de personas >=60 a\u00f1os contagiadas","f7788f84":"# 1. Casos Activos v\/s Casos Recuperados","62a5ae04":"## 2.3 Numero de personas fallecidas por grupo de edad","e83c8346":"## 2. Prediccion del N\u00famero de Fallecidos (acumulados)","f07ee4e8":"# Mapa de Casos acumulados de COVID19\n\nArchivo que da cuenta de los casos totales diarios confirmados por laboratorio en cada una de las regiones de Chile, seg\u00fan residencia, y concatena la informaci\u00f3n reportada por el Ministerio de Salud del pa\u00eds.","7d1783a0":"## 7.1.3 Region de Los R\u00edos","d46755ed":"## 1.2 Total de Casos Acumulados de COVID19","01af3e1b":"## Modelo 3: Series de Tiempo","6b23d68c":"### 7.1.1 Casos totales por Region: Maule\n","4bd3ca57":"## 7.1 Casos por Comuna","59966ff0":"**data_por_comuna** = Archivo que da cuenta del n\u00famero de casos confirmados activos notificados en cada una de las comunas de Chile, seg\u00fan residencia, y concatena la historia de los informes epidemiol\u00f3gicos publicados por el Ministerio de Salud del pa\u00eds.\n\nSe entiende por caso confirmado activo a la persona viva que cumple con los criterios de definici\u00f3n de casos sospechoso con una muestra positiva de SARS-CoV-2, cuya fecha de inicio de s\u00edntomas en la notificaci\u00f3n es menor o igual a 14 d\u00edas a la fecha del reporte actual (considera solo vivos).\n\nActualizado Cada 2 a 3 d\u00edas.\n","cac725bd":"## Modelo 2: Todos los Datos + GridSearchCV","3f3ebf6d":"## 3.2 N\u00famero de pacientes hospitalizados seg\u00fan el tipo de cama","202b6af6":"## Dashboard: An\u00e1lisis de Datos Sobre COVID-19 en Chile: ","64538cf1":"# 2. Grupos de Edad","725b01dd":"## 2.3.1.Numero de Fallecidos Jovenes (<=39 a\u00f1os) fallecidos","ed65992f":"## 8.1 Total de Fallecidos en los primeros 4 meses del 2010-2020","e1455c6e":"## 3.5 Numero de pacientes por grupo de edad Hopitalizados en UCI\n","552e239b":"### 3.5.2 Numero de paciente viejos (>=60) hospitalizados del total de contagiados","d4fb7126":"## 1.1 COVID-19:  Total de Casos por d\u00eda en Chile","d477825c":"## 3.1 Pacientes Criticos","2d8a9cd3":"<center><a href=\"https:\/\/covid19-chile-an.herokuapp.com\"><img src=\"https:\/\/i.ibb.co\/PZpHtpz\/dashf.png\" alt=\"dashf\" border=\"0\"><\/a><\/center>\n\n\n\n\n\n\n### Todo el trabajo sera implementado como pagina web, alojada en heroku: https:\/\/covid19-chile-an.herokuapp.com\n### All work will be implemented as a web page, hosted on heroku: https:\/\/covid19-chile-an.herokuapp.com","d048b6ff":"### Todos los Datos se actualizan cada d\u00eda al igual que los modelos predictivos, a excepci\u00f3n de los datos por comuna que se actualizan cada 3 dias \n### Los datos se obtuvieron de: https:\/\/github.com\/MinCiencia\/Datos-COVID19","f68595c5":"## 3.4 Numero de Hospitalizacion por region","9c661780":"grupo_fallecidos = **n\u00famero de fallecidos por grupos etarios (<=39; 40-49; 50-59; 60-69; 70-79; 80-89; y >=90) reportados diariamente por el Ministerio de Salud, desde el 09-04-2020.**\n\n**Actualizaci\u00f3n diaria.**\n\ngrupo_casos_genero = **n\u00famero acumulado de casos confirmados distribuidos por g\u00e9nero y grupo de edad, para cada fecha reportada. Este concatena la historia de los informes epidemiol\u00f3gicos publicados por el Ministerio de Salud del pa\u00eds** \n\n**Actualizado: Cada 2 a 3 d\u00edas.**","39a977b7":"### 7.1.2 Santiago\n","11702ce9":"## 3.3 Casos Nuevos con sitomas vs N\u00famero de paciente en Ventilaci\u00f3n Mec\u00e1nica Intensiva","42233093":"# 1. Predicciones Utilizando un modelo de Machine Learning","eca4219f":"# An\u00e1lisis completo del COVID-19 en Chile + Implementacion de modelos predictivos del N\u00famero de casos acumulativos por d\u00eda y el n\u00famero de Muertes desde la fecha hasta 20 d\u00edas en el futuro\n\n<center><img src='https:\/\/i2.wp.com\/www.cronicadigital.cl\/imagenes\/noticias\/2018\/03\/chile-la-moneda.jpeg?resize=696%2C477&ssl=1'><\/center>","d7f5745b":"## 2.1 Total de Casos por Grupo de Edad","26d054bf":"# 8.Defunciones en Chile \n\nLos datos aqu\u00ed publicados provienen de registros administrativos correspondientes a los tr\u00e1mites de defunci\u00f3n desde el a\u00f1o 2010.\n\nDefunciones se refiere a la fecha en que se inscribi\u00f3 la defunci\u00f3n en el Registro Civil. El plazo para hacer la inscripci\u00f3n es de tres d\u00edas desde el fallecimiento y debe realizarse en la comuna donde ocurri\u00f3 el deceso.","8d401970":"## 1.1 Prediccion de Casos de COVID19 en Chile(acumulados) para 20 d\u00edas en el futuro\n","6984f214":"# 6.Numero de Ventiladores Mecanicos","3790e1c2":"## 2.2Total de casos por grupo de Edad y genero","aa5473ea":"# 3.Hospitalizaciones en UCI\n\n**grupo_uci** = cuenta del n\u00famero de pacientes en UCI por grupos etarios (<=39; 40-49; 50-59; 60-69; y >=70) reportados diariamente por el Ministerio de Salud, desde el 01-04-2020.\n\nActualizaci\u00f3n diaria.\n\n**pacientes_criticos**= cuenta del n\u00famero de pacientes hospitalizados en la Unidad de Cuidados Intensivos (UCI) y se consideran en situaci\u00f3n m\u00e9dica cr\u00edtica. Se concatena la historia de reportes diarios publicados por el Ministerio de Salud del pa\u00eds.\nSe entiende por paciente en hospitalizaci\u00f3n la persona que cumple con los criterios de definici\u00f3n de caso sospechoso con una muestra positiva de SARS-CoV-2 que ha sido ingresado en el sistema integrado y reportado por la Unidad de Gesti\u00f3n Centralizada de Camas (UGCC).\n\nActualizaci\u00f3n diaria.\n\n\n**grupo_uci_reg** = archivos que dan cuenta del n\u00famero de pacientes en UCI por regi\u00f3n reportados diariamente por el Ministerio de Salud, desde el 01-04-2020.\n\nActualizaci\u00f3n diaria.\n\n\n**tipo_cama** = da cuenta del n\u00famero de pacientes en hospitalizaci\u00f3n seg\u00fan el tipo de cama que ocupan: B\u00e1sica, Media, UTI y UCI. Se concatena la historia de reportes diarios publicados por el Ministerio de Salud del pa\u00eds.\n\nSe entiende por paciente en hospitalizaci\u00f3n la persona que cumple con los criterios de definici\u00f3n de caso sospechoso con una muestra positiva de SARS-CoV-2 que ha sido ingresado en el sistema integrado y reportado por la Unidad de Gesti\u00f3n Centralizada de Camas (UGCC).\n\nActualizaci\u00f3n diaria.\n\n\n**pacientes_ventilacion** = Este producto da cuenta del n\u00famero de pacientes hospitalizados y que se encuentran conectados a ventilaci\u00f3n mec\u00e1nica invasiva y que son casos confirmados por COVID-19. Se concatena la historia de reportes diarios publicados por el Ministerio de Salud del pa\u00eds.\n\nSe entiende por paciente en hospitalizaci\u00f3n la persona que cumple con los criterios de definici\u00f3n de caso sospechoso con una muestra positiva de SARS-CoV-2 que ha sido ingresado en el sistema integrado y reportado por la Unidad de Gesti\u00f3n Centralizada de Camas (UGCC).\n\nActualizaci\u00f3n diaria.\n\n"}}