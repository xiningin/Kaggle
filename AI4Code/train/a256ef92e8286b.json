{"cell_type":{"b8653872":"code","dff9bdb7":"code","5ccbda4f":"code","0d0e1041":"code","27cf2af1":"code","95279f89":"code","d8ee9fc7":"code","efccc84e":"code","b5dcb866":"code","26404333":"code","4f7d3daa":"code","8e851229":"code","3c25ed5d":"code","e0237adb":"code","b084b8c9":"code","b2204d4a":"code","02e5b849":"code","10fc26fa":"code","bfa3a08a":"code","5fe79548":"code","d392a170":"code","c13f58f8":"code","95a3ff7f":"code","a869fe14":"code","7d5214f9":"markdown","b4aa5017":"markdown","7b1aa7e8":"markdown","eba2c5ea":"markdown","5da5fcc9":"markdown","450f5bf8":"markdown","a00361b1":"markdown","3ab0d1e7":"markdown","a3caa1b6":"markdown","05dca217":"markdown","a0aa3e16":"markdown","aadaab69":"markdown","6a14407f":"markdown","5d476e45":"markdown"},"source":{"b8653872":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        break\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","dff9bdb7":"\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport cv2\nimport os\nfrom keras.utils import to_categorical\nfrom sklearn.model_selection import train_test_split\n","5ccbda4f":"DATA_DIR = '\/kaggle\/input\/african-wildlife'\nCATEGORIES = os.listdir(DATA_DIR)\nIMG_SIZE=100\nCATEGORIES\n","0d0e1041":"data = []\nfor category in CATEGORIES:\n    label = CATEGORIES.index(category)\n    path = os.path.join(DATA_DIR, category)\n    for img in os.listdir(path):\n        try:\n            img_array = cv2.imread(os.path.join(path,img))\n            new_array = cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))\n            data.append([label,new_array])\n        except Exception as E:\n            pass","27cf2af1":"data","95279f89":"#checking shape\nnp.shape(data)","d8ee9fc7":"X = []\nY = []\n\nfor label,feature in data:\n    X.append(feature)\n    Y.append(label)\n\n","efccc84e":"#checking shape of features\nprint(np.shape(X))","b5dcb866":"#checking shape of labels\nprint(np.shape(Y))","26404333":"#converting both array to numpy array\nX = np.array(X)\nY = np.array(Y)","4f7d3daa":"X = X \/ 255","8e851229":"X","3c25ed5d":"np.max(X)","e0237adb":"Y","b084b8c9":"val = np.random.randint(0, len(X), 12)\nr = 1\nplt.figure(figsize=(25,20))\nfor value in val:\n    plt.subplot(3,4,r)\n    plt.subplots_adjust(hspace = 0.5, wspace = 0.5)\n    plt.xticks([]) , plt.yticks([])\n    plt.title(CATEGORIES[Y[value]])\n    r += 1\n    plt.imshow(X[value])\nplt.show()","b2204d4a":"Y = to_categorical(Y)","02e5b849":"x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size=0.15,random_state=0)\nx_train,x_val,y_train,y_val = train_test_split(x_train,y_train,test_size=0.1,random_state=0)","10fc26fa":"from keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout, BatchNormalization\nmodel = Sequential()\nmodel.add(Conv2D(64,3,padding='same', input_shape=(100,100,3)))\nmodel.add(MaxPool2D((4,4)))\nmodel.add(Conv2D(32,3,padding='same', input_shape=(100,100,3)))\nmodel.add(MaxPool2D((4,4)))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(64))\nmodel.add(Dense(32))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(16))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(4))\n\nmodel.add(Dense(4, activation='softmax'))\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nmodel.summary()","bfa3a08a":"from keras.preprocessing.image import ImageDataGenerator\ndatagen = ImageDataGenerator(\n    rotation_range = 10,\n    zoom_range = 0.1,\n    width_shift_range = 0.1,\n    height_shift_range = 0.1\n)\ndatagen.fit(x_train)","5fe79548":"history = model.fit_generator(datagen.flow(x_train,y_train,batch_size=32), epochs=100, validation_data=(x_val,y_val))","d392a170":"y_pred = model.predict(x_test)","c13f58f8":"from sklearn.metrics import accuracy_score\nprint(accuracy_score(y_test, y_pred.round()))","95a3ff7f":"loss = history.history['loss']\nval_loss = history.history['val_loss']\nepochs = range(1, len(loss) + 1)\nplt.plot(epochs, loss, 'y', label='Training loss')\nplt.plot(epochs, val_loss, 'r', label='Validation loss')\nplt.title('Training and validation loss')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","a869fe14":"acc = history.history['accuracy']\nval_acc = history.history['val_accuracy']\nplt.plot(epochs, acc, 'y', label='Training acc')\nplt.plot(epochs, val_acc, 'r', label='Validation acc')\nplt.title('Training and validation accuracy')\nplt.xlabel('Epochs')\nplt.ylabel('Accuracy')\nplt.legend()\nplt.show()","7d5214f9":"# Plotting loss graph","b4aa5017":"# Loading the data","7b1aa7e8":"# Data Augumentation","eba2c5ea":"# Fitting the model","5da5fcc9":"# Plotting Some value with labels","450f5bf8":"# Converting labels to categorical values","a00361b1":"# Plotting accuracy graph","3ab0d1e7":"# accuracy of the model","a3caa1b6":"# Spliting the data into train,test and validation","05dca217":"# model","a0aa3e16":"# Separating label and feature","aadaab69":"# Importing Necessary Libraries","6a14407f":"# Predicting the test values","5d476e45":"# Normalization"}}