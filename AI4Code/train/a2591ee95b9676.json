{"cell_type":{"78d661e0":"code","f22d7b1a":"code","792210cf":"code","1ec900d6":"code","0d759f90":"code","1a4b4b38":"code","3881e127":"code","b64529f2":"code","f7574013":"code","56edb4a2":"markdown","50799eff":"markdown"},"source":{"78d661e0":"# Importing librarires\n\nimport numpy as np\nimport pandas as pd\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","f22d7b1a":"# Reading data\n\ndf = pd.read_csv('\/kaggle\/input\/indian-food-101\/indian_food.csv')\ndf.head(20)","792210cf":"## Viewing unique ingredients to make sure that the data is clean\n\n# Creating list from 'ingredients' column\ningredients_list = []\ningredients_list = df['ingredients'].tolist()\n\n# Getting set from list\ningredients = []\nfor list in ingredients_list:\n    temp = list.split(', ')\n    for ingredient in temp:\n        ingredients.append(ingredient.lower().strip())\n\nunique_ingredients = sorted(set(ingredients))\n# print(unique_ingredients)\n","1ec900d6":"## Cleaning ingredients column\n\n# Lowercase\ndf['ingredients'] = df['ingredients'].str.lower()\n\n# Removing white spaces\ndf['ingredients'] = df['ingredients'].str.strip()\n\ndef comma_space(x):\n    x = x.replace(', ',',')\n    return x\n\ndf['ingredients'] = df['ingredients'].apply(comma_space)\ndf.head(10)","0d759f90":"# Creating key-value pairs (name: ingredients)\nrecipe_dict = dict(zip(df.name, df.ingredients))\n\nclean_recipe_dict = {}\nfor recipe, ingredients in recipe_dict.items():\n    temp = ingredients.split(\",\")\n    clean_recipe_dict[recipe] = temp\n\n# print(clean_recipe_dict)","1a4b4b38":"# Creating recipe combinations\n\nfrom itertools import combinations\n\nrecipe_combinations = []\nfor a,b in combinations(clean_recipe_dict.keys(), 2):\n    recipe_combinations.append((a,b))\n    ","3881e127":"# Determining similarity score per recipe pair\n# Score is determined as follows:\n# num of ingredients in both a and b \/ num of ingredients in a\n\ndef similarity_score(a,b):\n    ingredients_a = clean_recipe_dict[a]\n    ingredients_b = clean_recipe_dict[b]\n    num_similar = len(set(ingredients_a) & set(ingredients_b))\n    num_a = len(ingredients_a)\n    return num_similar\/num_a\n\nscore_dict = {}\nfor combination in recipe_combinations:\n    score = similarity_score(combination[0], combination[1])\n    score_dict[combination] = score\n\n# print(score_dict)","b64529f2":"# EXAMPLE:\nuser_recipe = 'Kaju katli'\nresults = {}\nfor key in score_dict:\n    if key[0] == user_recipe:\n        results[key] = score_dict[key]\n\ntop_10_recipes = sorted(results, key=results.get, reverse=True)[:10]\n\nresults_with_scores = {}\nfor recipe in top_10_recipes:\n    results_with_scores[recipe] = score_dict[recipe]\n\nprint(results_with_scores)","f7574013":"### UI: Choose a recipe to find the top 10 most similar recipes ###\n# print(\"Enter a recipe name (case sensitive):\")\n# user_recipe = input()\n\n# results = {}\n# for key in score_dict:\n#     if key[0] == user_recipe:\n#         results[key] = score_dict[key]\n\n# top_10_recipes = sorted(results, key=results.get, reverse=True)[:10]\n\n# results_with_scores = {}\n# for recipe in top_10_recipes:\n#     results_with_scores[recipe] = score_dict[recipe]\n\n# print(results_with_scores)","56edb4a2":"# Finding similar recipes using pairwise-scoring\n\nThe goal is simple. For each recipe pair (a,b), we're finding the number of similar ingredients in a & b divided by the number of ingredients in recipe a.\n\nFeel free to try the UI at the end and let me know if this returns similar recipes!\n","50799eff":"### Below is the code used to actually interact with the recommendation system. Open this kernel in a notebook to interact with it and uncomment the code below:"}}