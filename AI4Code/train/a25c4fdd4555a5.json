{"cell_type":{"a11defe0":"code","5228d798":"code","09555cd0":"code","60a3b96d":"code","fa59acc4":"code","2a5ea9db":"code","815cbdb6":"code","103f128e":"code","a92d730b":"code","96d01b8c":"code","f8b2ed73":"code","22ebaea6":"code","0def64ff":"code","e9ebe396":"code","c8f7ed84":"code","e5c9a9e4":"code","dc7ec88e":"code","aa01d3ee":"code","a6b2a55d":"code","4d70cfdd":"code","c603bbc9":"code","bcb8dc81":"code","1419197c":"code","227a503a":"code","c42de4ed":"code","f78f9ce4":"code","e5e3cd96":"code","f8f045da":"code","61be1b27":"code","70fa13df":"code","fac28871":"code","67ac9205":"code","a177ab34":"code","c7bbd08b":"code","914b391b":"code","5cb1c1b6":"code","93ae1698":"code","4644410f":"code","d59a8818":"code","c72554f4":"code","57964f75":"code","75f393a4":"code","5f01093c":"code","b561d5a0":"code","03932080":"code","fc797f11":"code","b82b9b65":"code","401b7ec6":"code","80cbbcd3":"code","1b50e617":"code","36e6460c":"code","b2562382":"code","fea70389":"code","87236e94":"code","2f6fc345":"code","15742f96":"code","270cbcae":"code","9d2b6129":"code","e49a87b9":"code","9caa4034":"code","54f18a53":"code","ec09dfc9":"code","6ee88fa0":"code","1dfcbaa3":"markdown","4ca2b924":"markdown","ed422594":"markdown","4f84cbd6":"markdown","217f5932":"markdown","b05f1de7":"markdown","03355c94":"markdown","8aa30d34":"markdown","ae95b9bd":"markdown","231da675":"markdown"},"source":{"a11defe0":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom wordcloud import WordCloud, STOPWORDS, ImageColorGenerator\n\nimport os","5228d798":"df = pd.read_csv('..\/input\/data-scientist-jobs\/DataScientist.csv')\ndf.head()","09555cd0":"# remove redundant columns\ndf = df.drop('Unnamed: 0', 1)\ndf = df.drop('index', 1)","60a3b96d":"df.head()","fa59acc4":"df.shape","2a5ea9db":"df.columns","815cbdb6":"# job titles\ndf['Job Title'].value_counts()","103f128e":"# show top 25 only\ntemp = df['Job Title'].value_counts()\nsns.barplot(x=temp.index[0:25], y=temp[0:25])\nplt.title('Top 25 - Job Title')\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","a92d730b":"df['Salary Estimate'].value_counts()","96d01b8c":"# show top 25 only\ntemp = df['Salary Estimate'].value_counts()\nsns.barplot(x=temp.index[0:25], y=temp[0:25])\nplt.title('Top 25 - Salary Estimate')\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","f8b2ed73":"# Filter out the hourly rates! Set to minus one is this case.\ndef aux1(i_string):    \n    if (i_string.find('Per Hour')>0):\n        return -1\n    else:\n        return pd.to_numeric((i_string.split('K')[0]).split('$')[1])\n\ndef aux2(i_string):\n     if (i_string.find('Per Hour')>0):\n        return -1\n     else:\n        return pd.to_numeric((i_string.split('K')[1]).split('$')[1])","22ebaea6":"df['Salary_LoB'] = list(map(aux1, df['Salary Estimate']))\ndf['Salary_UpB'] = list(map(aux2, df['Salary Estimate']))","0def64ff":"df.shape","e9ebe396":"# for the sake of simplicity: remove the rows with hourly rates... \ndf = df[df['Salary_LoB']!=-1]\ndf.shape","c8f7ed84":"df['Salary_Mid'] = (df['Salary_LoB'] + df['Salary_UpB'])\/2","e5c9a9e4":"df.Salary_LoB.hist(bins=25)\nplt.title('Salary Lower Bound (in 1000 USD)')\nplt.show()","dc7ec88e":"df.Salary_LoB.describe()","aa01d3ee":"df.Salary_UpB.hist(bins=25)\nplt.title('Salary Upper Bound (in 1000 USD)')\nplt.show()","a6b2a55d":"df.Salary_UpB.describe()","4d70cfdd":"df.Salary_Mid.hist(bins=25)\nplt.title('Salary Mid Point of range (in 1000 USD)')\nplt.show()","c603bbc9":"df.Salary_Mid.describe()","bcb8dc81":"# Rating\ndf.Rating.plot(kind='hist')\nplt.title('Rating')\nplt.grid()\nplt.show()","1419197c":"# Companies\ndf['Company Name'].value_counts()","227a503a":"# utility function for text cleaning\ndef chop_name(i_string):\n    return i_string.split('\\n')[0]","c42de4ed":"# show top 25 only\ntemp = df['Company Name'].value_counts()\nsns.barplot(x=list(map(chop_name,temp.index[0:25])), y=temp[0:25])\nplt.title('Top 25 - Company Name')\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","f78f9ce4":"# add clean company name as addition column\ndf['Company'] = list(map(chop_name,df['Company Name']))","e5e3cd96":"df['Headquarters'].value_counts()","f8f045da":"# show top 25 only\ntemp = df['Headquarters'].value_counts()\nsns.barplot(x=temp.index[0:25], y=temp[0:25])\nplt.title('Top 25 - Headquarters')\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","61be1b27":"# Size\ndf['Size'] = df['Size'].replace(\"-1\",\"Unknown\") # merge \"-1\" into \"Unknown\"\ndf['Size'].value_counts().plot(kind='bar')\nplt.grid()\nplt.show()","70fa13df":"df.Founded.plot(kind='hist')\nplt.title('Founded')\nplt.grid()\nplt.show()","fac28871":"# show Founded w\/o missings (-1)\ntemp = df.Founded[df.Founded>-1]\nplt.hist(temp,50)\nplt.title('Founded, excluding missing values')\nplt.grid()\nplt.show()","67ac9205":"# Founded summary\ntemp.describe()","a177ab34":"# Type of ownership\ndf['Type of ownership'] = df['Type of ownership'].replace(\"-1\",\"Unknown\") # merge \"-1\" into \"Unknown\"\ndf['Type of ownership'].value_counts().plot(kind='bar')\nplt.grid()\nplt.show()","c7bbd08b":"df['Industry'].value_counts()","914b391b":"# show top 25 only\ntemp = df['Industry'].value_counts()\nsns.barplot(x=temp.index[0:25], y=temp[0:25])\nplt.title('Top 25 - Industry')\nplt.xticks(rotation=90)\nplt.grid()\nplt.show()","5cb1c1b6":"df['Sector'].value_counts().plot(kind='bar')\nplt.title('Sector')\nplt.grid()\nplt.show()","93ae1698":"# Revenue\ndf['Revenue'] = df['Revenue'].replace(\"-1\",\"Unknown \/ Non-Applicable\") # merge \"-1\" into \"Unknown...\"\ndf['Revenue'].value_counts().plot(kind='bar')\nplt.title('Revenue')\nplt.grid()\nplt.show()","4644410f":"df['Easy Apply'].value_counts().plot(kind='bar')\nplt.title('Easy Apply')\nplt.grid()\nplt.show()","d59a8818":"# means by company\ndf_means = df.groupby('Company').mean()\ndf_means.head(25)","c72554f4":"sel_company = 'Amazon'\ndf_means[df_means.index==sel_company]","57964f75":"df_temp = df[df.Company==sel_company]\ndf_temp.Salary_Mid.hist()\nplt.title(sel_company)\nplt.show()","75f393a4":"sel_company = 'Apple'\ndf_means[df_means.index==sel_company]","5f01093c":"df_temp = df[df.Company==sel_company]\ndf_temp.Salary_Mid.hist()\nplt.title(sel_company)\nplt.show()","b561d5a0":"sel_company = 'Humana'\ndf_means[df_means.index==sel_company]","03932080":"df_temp = df[df.Company==sel_company]\ndf_temp.Salary_Mid.hist()\nplt.title(sel_company)\nplt.show()","fc797f11":"sel_company = 'Google'\ndf_means[df_means.index==sel_company]","b82b9b65":"df_temp = df[df.Company==sel_company]\ndf_temp.Salary_Mid.hist()\nplt.title(sel_company)\nplt.show()","401b7ec6":"stopwords = set(STOPWORDS)\ntext = \" \".join(txt for txt in df['Job Description'])","80cbbcd3":"wordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","1b50e617":"sel_company = 'Apple'\ndf_temp = df[df.Company==sel_company]\ntext = \" \".join(txt for txt in df_temp['Job Description'])\n\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","36e6460c":"sel_company = 'Amazon'\ndf_temp = df[df.Company==sel_company]\ntext = \" \".join(txt for txt in df_temp['Job Description'])\n\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","b2562382":"sel_company = 'Google'\ndf_temp = df[df.Company==sel_company]\ntext = \" \".join(txt for txt in df_temp['Job Description'])\n\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","fea70389":"sel_company = 'Facebook'\ndf_temp = df[df.Company==sel_company]\ntext = \" \".join(txt for txt in df_temp['Job Description'])\n\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","87236e94":"sel_sector = 'Information Technology'\ndf_temp = df[df.Sector==sel_sector]\ntext = \" \".join(txt for txt in df_temp['Job Description'])\n\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","2f6fc345":"sel_sector = 'Finance'\ndf_temp = df[df.Sector==sel_sector]\ntext = \" \".join(txt for txt in df_temp['Job Description'])\n\nwordcloud = WordCloud(stopwords=stopwords, max_font_size=50, max_words=500,\n                      width = 600, height = 400,\n                      background_color=\"white\").generate(text)\nplt.figure(figsize=(12,8))\nplt.imshow(wordcloud, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","15742f96":"# filter \"cool\" jobs\nmin_Rating = 4.5\nmin_SalaryLoB = 150\n\ncool_jobs = df[(df.Rating>=min_Rating) & (df.Salary_LoB>=min_SalaryLoB)]\ncool_jobs.shape","270cbcae":"cool_jobs","9d2b6129":"# show location of selected jobs\ncool_jobs.Location.value_counts().plot(kind='bar')\nplt.grid()\nplt.show()","e49a87b9":"# filter further, e. g. by location\ncool_jobs_NY = cool_jobs[cool_jobs.Location=='New York, NY']\ncool_jobs_NY","9caa4034":"# select two locations \nlocation_1 = df[df.Location == 'San Jose, CA']\nlocation_2 = df[df.Location == 'New York, NY']","54f18a53":"print('New York # Jobs:', location_1.shape[0])\nprint('San Jose # Jobs:', location_2.shape[0])","ec09dfc9":"print('Rating New York: ', np.round(location_1.Rating.mean(),2))\nprint('Rating San Jose: ', np.round(location_2.Rating.mean(),2))","6ee88fa0":"print('Mid Point Salary New York: ', np.round(location_1.Salary_Mid.mean(),2))\nprint('Mid Point Salary San Jose: ', np.round(location_2.Salary_Mid.mean(),2))","1dfcbaa3":"#### A few examples","4ca2b924":"### Company specific wordclouds","ed422594":"### If you are interested look also at my notebook for Data Engineer Jobs:\nhttps:\/\/www.kaggle.com\/docxian\/data-engineer-jobs","4f84cbd6":"# Explore Data Science job offers by Company, Location, Industry etc.","217f5932":"#### So we have lost only a few rows by that...","b05f1de7":"# Job Descriptions","03355c94":"# Find out the \"best\" jobs","8aa30d34":"### The previous evaluation is actually not very helpful. We extract the lower and upper bounds as numeric values in the following.","ae95b9bd":"### Sector specific wordclouds","231da675":"# Compare two locations"}}