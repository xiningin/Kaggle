{"cell_type":{"68b6f522":"code","3661cefb":"code","ebb8cd40":"code","dcb2b424":"code","55a62d24":"code","ce8a033d":"code","1aef2d5c":"code","b1203f82":"code","611b034a":"code","8b68989b":"code","efc94c0c":"code","d0d6fe52":"code","766240e3":"code","5475f09d":"code","330c96f1":"code","eb758f7e":"code","c51e7670":"code","c0ca197f":"code","d526bbb6":"code","c9a6b2ed":"code","093bed99":"code","2d7ec4a0":"code","adae3b92":"code","77a4821c":"code","fd28de46":"code","31108e33":"code","ef02b31a":"code","6769f020":"markdown","cfab561e":"markdown"},"source":{"68b6f522":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3661cefb":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df\n\n\ndef import_data(file):\n    \"\"\"create a dataframe and optimize its memory usage\"\"\"\n    df = pd.read_csv(file, parse_dates=True, keep_date_col=True)\n    df = reduce_mem_usage(df)\n    return df","ebb8cd40":"print('-' * 80)\nprint('train')\ntrain = import_data('\/kaggle\/input\/pubg-finish-placement-prediction\/train_V2.csv')\n\nprint('-' * 80)\nprint('test')\ntest = import_data('\/kaggle\/input\/pubg-finish-placement-prediction\/test_V2.csv')","dcb2b424":"train.shape","55a62d24":"train.info()","ce8a033d":"train['playersjoined']=train.groupby('matchId')['matchId'].transform('count')\ntrain.head()","1aef2d5c":"train['traveldistance']=train['walkDistance']+train['swimDistance']+train['rideDistance']\ntrain['healsandboosts']=train['heals']+train['boosts']","b1203f82":"train['killingwithoutmoving']=(train['kills']>0) & (train['traveldistance']== 0)\ntrain.drop(train[train['killingwithoutmoving']==True].index,inplace=True)\ntrain[train['winPlacePerc'].isnull()]","611b034a":"train.drop(2744604,inplace=True)\ntrain[train['winPlacePerc'].isnull()]","8b68989b":"train.shape","efc94c0c":"train[train['walkDistance']>10000]","d0d6fe52":"train.drop(train[train['walkDistance']>10000].index,inplace=True)\ntrain[train['swimDistance']>2000]","766240e3":"train.drop(train[train['swimDistance']>2000].index,inplace=True)\ntrain[train['rideDistance']>20000]","5475f09d":"train.drop(train[train['rideDistance']>20000].index,inplace=True)\ntrain[train['longestKill']>1000]","330c96f1":"train.drop(train[train['longestKill']>1000].index,inplace=True)\ntrain[train['kills']>30]","eb758f7e":"train.drop(train[train['kills']>30].index,inplace=True)\ntrain[train['roadKills']>12]","c51e7670":"train.drop(train[train['roadKills']>12].index,inplace=True)\ntrain[train['weaponsAcquired']>70]","c0ca197f":"train.drop(train[train['weaponsAcquired']>70].index,inplace=True)\ntrain[train['heals']>35]","d526bbb6":"train.drop(train[train['heals']>35].index,inplace=True)\ntrain.shape","c9a6b2ed":"df=pd.concat([train,test],ignore_index=True)","093bed99":"df.shape","2d7ec4a0":"enc_df2 = pd.get_dummies(df[[\"matchType\"]])\ndf.drop(['matchType'],axis=1,inplace=True)\n#df.rename(columns={0.0:'Ungraduated',1.0:'Graduated'},inplace=True)\ndf = df.join(enc_df2)\n\ndf.drop(['Id','groupId','matchId'],axis=1,inplace=True)\ntrainx = df.iloc[:4444630]\ntestx = df.iloc[4444631:].fillna(0)\ny=trainx[\"winPlacePerc\"]\nX = trainx.drop([\"winPlacePerc\"],axis=1)\nX_test = testx.drop([\"winPlacePerc\"],axis=1)\n\nfrom sklearn.model_selection import train_test_split\n#xtrain,xtest,ytrain,ytest = train_test_split(X,y,test_size=0.4,random_state=42)\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import MinMaxScaler\n\nprep = MinMaxScaler()","adae3b92":"from sklearn.svm import SVR\nfrom sklearn.tree import DecisionTreeRegressor\ny.fillna(0,inplace=True)","77a4821c":"X_train,X_val,y_train,y_val = train_test_split(X,y,test_size=0.4,random_state=42)\nDTree_clf = DecisionTreeRegressor()\nDTree_clf.fit(X, y)","fd28de46":"DTree_pred = DTree_clf.predict(X_test)\nDTree_pred[:20]","31108e33":"output = pd.DataFrame({'Id':test.Id,'winPlacePerc':DTree_pred})","ef02b31a":"output.to_csv(\"submission.csv\",index = False)","6769f020":"## outliers","cfab561e":"## Prediction modeling"}}