{"cell_type":{"1d41eb52":"code","534c712d":"code","b6e3aa8f":"code","67747a7b":"code","6a41db15":"code","38b041e4":"code","7226d2cb":"code","8117e835":"code","444b2857":"code","d8a27b8c":"code","37c6c1f7":"code","9923605c":"code","339d6391":"code","c6a428da":"code","d0f3e49b":"code","c487ba2e":"code","a2eecad5":"code","9d5f3d6e":"code","accb67fc":"code","e7d2c5ec":"code","fc4ce566":"code","dc2bca98":"code","be95d481":"code","80d0f311":"code","3a42193f":"code","cfa9daf4":"code","35e6c3aa":"markdown","1bbf4fc4":"markdown","840ede0e":"markdown","086ed680":"markdown","18b39e3d":"markdown"},"source":{"1d41eb52":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","534c712d":"#Importing the libraries \nimport numpy as np \nimport matplotlib.pyplot as plt \nimport pandas as pd","b6e3aa8f":"#Importing the\tdataset \ndataset = pd.read_csv('..\/input\/social-network-ads\/Social_Network_Ads.csv') \nX = dataset.iloc[:,2:4].values \ny = dataset.iloc[:,4].values ","67747a7b":"# Splitting the dataset into the Training set and Test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)","6a41db15":"# Feature Scaling\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nX_train = sc_X.fit_transform(X_train)\nX_test = sc_X.transform(X_test)","38b041e4":"# Fitting K Nearest Neighbor Classification to the Training Set\nfrom sklearn.neighbors import KNeighborsClassifier\nclassifier = KNeighborsClassifier(n_neighbors = 6, metric = 'minkowski', p = 2)\nclassifier.fit(X_train, y_train)","7226d2cb":"# Predicting the Test Set results\ny_pred = classifier.predict(X_test)","8117e835":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","444b2857":"# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\nnp.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75, cmap =\nListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('KNN (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","d8a27b8c":"# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_test, y_test\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\nnp.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75, cmap =\nListedColormap(('red', 'green')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('red', 'green'))(i), label = j)\nplt.title('KNN (Test set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","37c6c1f7":"# Fitting SVM to the Training Set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'linear', degree = 3, random_state = 0)\nclassifier.fit(X_train, y_train)","9923605c":"# Predicting the Test Set results\ny_pred = classifier.predict(X_test)\n","339d6391":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","c6a428da":"# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.1),\n                    np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.1))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75, cmap =\nListedColormap(('brown', 'red')))\nplt.xlim(X1.min()-1, X1.max()+1)\nplt.ylim(X2.min()-1, X2.max()+1)\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('black', 'pink'))(i), label = j)\nplt.title('SVM (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","d0f3e49b":"# Fitting SVM to the Training Set\nfrom sklearn.svm import SVC\nclassifier = SVC(kernel = 'poly', degree = 3, random_state = 0)\nclassifier.fit(X_train, y_train)","c487ba2e":"# Predicting the Test Set results\ny_pred = classifier.predict(X_test)","a2eecad5":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","9d5f3d6e":"# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\n                    np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75, cmap =\nListedColormap(('brown', 'red')))\nplt.xlim(X1.min()-1, X1.max()+1)\nplt.ylim(X2.min()-1, X2.max()+1)\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('black', 'pink'))(i), label = j)\nplt.title('SVM (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","accb67fc":"# Fitting Naive Bayes to the Training Set\nfrom sklearn.naive_bayes import GaussianNB\nclassifier = GaussianNB()\nclassifier.fit(X_train, y_train)","e7d2c5ec":"# Predicting the Test Set results\ny_pred = classifier.predict(X_test)","fc4ce566":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)","dc2bca98":"# Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),\nnp.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75, cmap =\nListedColormap(('brown', 'red')))\nplt.xlim(X1.min()-1, X1.max()+1)\nplt.ylim(X2.min()-1, X2.max()+1)\nfor i, j in enumerate(np.unique(y_set)):\n    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('black', 'pink'))(i), label = j)\nplt.title('Na\u00efve Bayes (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","be95d481":"from sklearn.tree import DecisionTreeClassifier\nclassifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)\nclassifier.fit(X_train, y_train)","80d0f311":"#Predicting the Test Set results\ny_pred = classifier.predict(X_test)","3a42193f":"# Making the Confusion Matrix\nfrom sklearn.metrics import confusion_matrix\ncm = confusion_matrix(y_test, y_pred)","cfa9daf4":"#Visualising the Training set results\nfrom matplotlib.colors import ListedColormap\nX_set, y_set = X_train, y_train\nX1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 1),\nnp.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 1))\nplt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.75, cmap =\nListedColormap(('black', 'Pink')))\nplt.xlim(X1.min(), X1.max())\nplt.ylim(X2.min(), X2.max())\nfor i, j in enumerate(np.unique(y_set)):plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1], c = ListedColormap(('blue', 'red'))(i), label = j)\nplt.title('Decision Tree (Training set)')\nplt.xlabel('Age')\nplt.ylabel('Estimated Salary')\nplt.legend()\nplt.show()","35e6c3aa":"# NA\u00cfVE BAYES","1bbf4fc4":"# **SVM**","840ede0e":"# **MULTIPLE\tLINEAR\tREGRESSION **","086ed680":"\n**DECISION TREE**","18b39e3d":"# Poly"}}