{"cell_type":{"7a70aa7b":"code","f9dfd32f":"code","d0a06f85":"code","33f1b7e9":"code","12d02bf6":"code","c4f9b7cc":"code","31de7b63":"code","4bb79143":"markdown","d24cd77f":"markdown","a0092a4f":"markdown","d5b5bf9e":"markdown"},"source":{"7a70aa7b":"from sklearn.datasets import make_classification \nimport numpy as np\nimport pandas as pd","f9dfd32f":"def gen_data_0():\n    # generate dataset \n    train, target = make_classification(512, 255, n_informative=np.random.randint(33, 47), n_redundant=0, flip_y=0.08)\n    train = np.hstack((train, np.ones((len(train), 1))*0))\n\n    for i in range(1, 512):\n        X, y = make_classification(512, 255, n_informative=np.random.randint(33, 47), n_redundant=0, flip_y=0.08)\n        X = np.hstack((X, np.ones((len(X), 1))*i))\n        train = np.vstack((train, X))\n        target = np.concatenate((target, y))\n    return train, target","d0a06f85":"%%time\ntrain0, target0 = gen_data_0()","33f1b7e9":"def gen_data(N=512, M=255):\n    train = np.zeros((N**2, M + 1,), dtype=np.float)\n    target = np.zeros((N**2,), dtype=np.float)\n    for i in range(N):\n        X, y = make_classification(N, M, n_informative=np.random.randint(33, 47), n_redundant=0, flip_y=0.08)\n        X = np.hstack([X, i * np.ones((N, 1,))])\n\n        start, stop = i * N, (i + 1) * N\n        train[start: stop] = X\n        target[start: stop] = y\n    return train, target","12d02bf6":"%%time\ntrain, target = gen_data()","c4f9b7cc":"np.random.seed(2019)\ntrain0, target0 = gen_data_0()\n\nnp.random.seed(2019)\ntrain, target = gen_data()","31de7b63":"np.allclose(train, train0) and np.allclose(target, target0)","4bb79143":"^ the results are the same.","d24cd77f":"### Original","a0092a4f":"mhviraf's terrific [\"Synthetic data for (next?) Instant Gratification\"](https:\/\/www.kaggle.com\/mhviraf\/synthetic-data-for-next-instant-gratification) kernel shows how to generate data very much like the data in this comp (if you are reading this, please upvote his kernel). At heart of that kernel is a loop that repeatedly calls `sklearn.datasets.make_classification`. Below is a  refactored version of his loop that runs about 10x quicker. It's probably the only useful thing I've done so far so I thought I'd share it in case someone finds it handy.","d5b5bf9e":"### Refactored"}}