{"cell_type":{"d869e4b5":"code","a1a7841a":"code","6acd7bc3":"code","9b11fb91":"code","71a4da9a":"code","3754a008":"code","0cc56109":"code","f365e1f3":"code","e3e35a96":"code","1f7d36d7":"code","fbd76424":"code","7a9300b5":"code","f2b29b62":"code","6217391c":"code","1290f3be":"code","359483b3":"code","20ef131b":"code","94ee0454":"code","411e13a6":"code","fd61d4a6":"code","1ddffb1d":"code","963d2407":"code","6d63d981":"code","a609b28d":"code","fc884d90":"code","7de30631":"code","6e3892cf":"code","dbd008d3":"code","ce2cb12c":"code","f94489b9":"code","b0dd6ceb":"code","fc1b5262":"code","85b9b6bb":"code","69ba8c53":"code","e9b8844d":"code","ae423af9":"code","b1fca94f":"code","d7f4100e":"code","49f1f329":"code","9da4768f":"code","f28c6974":"code","4f153fa4":"code","e13d39b4":"code","9d91f900":"code","6e8e9bf5":"code","689761b4":"code","00582a5c":"code","c43d4e93":"code","be0f9601":"code","2fe30f38":"code","daf31e7c":"code","203e5694":"code","e227fcd2":"code","1c8cf34f":"code","84740a0a":"code","2cabd2d0":"code","aed58f4f":"code","3a4a71c0":"code","1cd182e5":"code","78cef3e2":"code","e42a5062":"code","0587792d":"code","d9c3b637":"code","f6cb1de3":"code","d3833cab":"code","6ece4684":"code","92a24dc1":"code","373fd8d7":"code","19b894bb":"code","a2780254":"code","ff98cd5f":"code","757350e5":"code","778c14c9":"code","4d03d050":"code","0cd0bc4b":"code","ec60fce1":"code","8ae4c07c":"code","6434e8b6":"code","40c47238":"code","aea856ce":"code","4d7dc7c1":"code","4484f6e5":"code","d511565d":"code","97e9b7d4":"code","9012914b":"code","e9e024fe":"code","7ab8a917":"code","e6cf62ba":"code","61eba0de":"code","2c3f678f":"code","377d1bd0":"code","09bc1742":"code","98f991e4":"code","ddfabf5f":"code","20c423d8":"code","3c896e2f":"code","8997e598":"code","9cac4251":"code","11f566be":"code","bb06c405":"code","52e0d032":"code","9d8c2ff7":"code","025e6ead":"code","391ffc99":"code","7cef1c8b":"code","9933a52c":"code","15c24d57":"code","3f50ef82":"code","9420a8f9":"code","8596154c":"code","de90121f":"code","f48ee566":"code","d23cd6ab":"code","a032bcb9":"code","7e7186ae":"code","7fe2b9c5":"code","4dd8495e":"code","23dec859":"code","158c7ead":"code","8531a3ab":"code","75749ed7":"code","43dd1ea1":"code","13eda526":"code","c21f72b5":"code","2719cd91":"code","dd054777":"code","8f2f24bc":"code","340ce5bf":"code","b38f8a83":"code","bdf6f763":"code","7326958f":"code","2bbdd812":"code","33928b72":"code","10f40c28":"code","8691adc5":"code","75e86a1c":"code","24b94bba":"code","0d7b0a3b":"code","80b38516":"code","2863ab0c":"code","dfb66f4f":"code","ae74772d":"code","f56eb0aa":"code","15f05a74":"code","3ccb5cf3":"code","6a445f94":"code","960f1a95":"code","479e4f89":"code","4912073b":"code","c093ee22":"code","b0789d05":"code","2bfc9f16":"code","9b823d27":"code","eca11002":"code","f0a4797e":"code","c6fb556d":"code","ea1d69a9":"code","0c45fd7f":"markdown","3e02f6b4":"markdown","40e8331f":"markdown","c4865f85":"markdown","0380b247":"markdown","9345331b":"markdown","7e41f6e8":"markdown","b1808c25":"markdown","09592cf7":"markdown","8405223d":"markdown","1629261f":"markdown","508d9aea":"markdown","7ebb77bf":"markdown","9678d2f1":"markdown","8325d833":"markdown","07555e66":"markdown","2c24c96d":"markdown","0cc56619":"markdown","0ea1dc9c":"markdown","158eb96b":"markdown","6d5be916":"markdown","2ed92051":"markdown","74e158ff":"markdown","57d2bac5":"markdown","80d9d45e":"markdown","fd8cd69a":"markdown","8c16e0b4":"markdown","9f0f236a":"markdown","085ee42e":"markdown","18b704e9":"markdown","4f565aff":"markdown","5460925c":"markdown","e81b61ac":"markdown","56811d65":"markdown","9718db78":"markdown","ebae841e":"markdown","4961c9de":"markdown","170a1893":"markdown","eb2d37de":"markdown","c3c481b3":"markdown","0e56ca19":"markdown","fe062a13":"markdown","e02517b6":"markdown","f1189147":"markdown","626f8ae1":"markdown","f47fae42":"markdown","dda0cdc0":"markdown","f7304567":"markdown","c964b340":"markdown","2f868f29":"markdown","35f2a3ca":"markdown","7bb68241":"markdown","bbeac9eb":"markdown","65c0ca83":"markdown","3cfe28bf":"markdown","5ba28fdb":"markdown"},"source":{"d869e4b5":"import numpy as np\na = np.arange(20).reshape(4, 5)\na","a1a7841a":"a.shape","6acd7bc3":"a.ndim","9b11fb91":"a.dtype.name","71a4da9a":"a.itemsize","3754a008":"a.size","0cc56109":"type(a)","f365e1f3":"b = np.array([6, 7, 8])\nb","e3e35a96":"type(b)","1f7d36d7":"import numpy as np\na = np.array([2,3,4])\na","fbd76424":"a.dtype","7a9300b5":"b = np.array([1.2, 3.5, 5.1])\nb","f2b29b62":"b.dtype","6217391c":"b = np.array([(1.5,2,3), (4,5,6)])\nb","1290f3be":"c = np.array([(1.5,2,3), (4,5,6),(4,5,6)])\nc","359483b3":"d = np.array( [ [1,2], [3,4] ], dtype=complex )\nd","20ef131b":"np.zeros( (3,4) )","94ee0454":"np.ones( (2,3,4), dtype=np.int16 )                # dtype can also be specified","411e13a6":"np.empty( (2,3) )                                 # uninitialized, output may vary","fd61d4a6":"np.arange( 10, 30, 5 )","1ddffb1d":"np.arange( 0, 2, 0.3 )                 # it accepts float arguments","963d2407":"from numpy import pi\nnp.linspace( 0, 2, 9 )                 # 9 numbers from 0 to 2","6d63d981":"x = np.linspace( 0, 2*pi, 100 )        # useful to evaluate function at lots of points\nf = np.sin(x)\nf","a609b28d":"g=np.cos(x)\ng","fc884d90":"arr = np.arange(6)                         # 1d array\nprint(arr)","7de30631":"arr2 = np.arange(12).reshape(4,3)           # 2d array\nprint(arr2)","6e3892cf":"arr3 = np.arange(24).reshape(2,3,4)         # 3d array\nprint(arr3)","dbd008d3":"print(np.arange(10000))","ce2cb12c":"print(np.arange(10000).reshape(100,100))","f94489b9":"# np.set_printoptions(threshold=np.nan)","b0dd6ceb":"arr1 = np.array( [20,30,40,50,60,70,80] )\narr2 = np.arange( 7 )\narr2","fc1b5262":"result = arr1-arr2\nresult","85b9b6bb":"print(arr2**2)\nprint(10*np.sin(arr1))\nprint(arr1<56)","69ba8c53":"X = np.array( [[1,4],\n            [5,1]] )\nY = np.array( [[8,0],\n            [2,4]] )","e9b8844d":"# elementwise product\nX * Y                      ","ae423af9":"# matrix product\nX @ Y                                        ","b1fca94f":"# another matrix product\nX.dot(Y) ","d7f4100e":"a = np.ones((2,5), dtype=int)\nb = np.random.random((2,5))","49f1f329":"a *= 3\na","9da4768f":"b += a\nb","f28c6974":"a += b                  # b is not automatically converted to integer type","4f153fa4":"a = np.ones(3, dtype=np.int32)\nb = np.linspace(0,pi,3)","e13d39b4":"b.dtype.name","9d91f900":"c = a+b\nc","6e8e9bf5":"c.dtype.name","689761b4":"d = np.exp(c*1j)\nd","00582a5c":"d.dtype.name","c43d4e93":"a = np.random.random((2,12))\na","be0f9601":"a.sum()","2fe30f38":"a.min()","daf31e7c":"a.max()","203e5694":"b = np.arange(15).reshape(3,5)\nb","e227fcd2":"# sum of each column\nb.sum(axis=0)                                                  ","1c8cf34f":"# min of each row\nb.min(axis=1)                            ","84740a0a":"# cumulative sum along each row\nb.cumsum(axis=1) ","2cabd2d0":"B = np.arange(3)\nB","aed58f4f":"np.exp(B)","3a4a71c0":"np.sqrt(B)","1cd182e5":"C = np.array([2., -1., 4.])\nnp.add(B, C)","78cef3e2":"a = np.arange(10)**3\na","e42a5062":"a[2]","0587792d":"a[2:5]","d9c3b637":"# equivalent to a[0:6:2] = -1000; from start to position 6, exclusive, set every 2nd element to -1000\na[:6:2] = -1000\na","f6cb1de3":"# reversed a\na[ : :-1]                                 ","d3833cab":"for i in a:\n    print(i**(1\/3.0))","6ece4684":"def f(x,y):\n    return 10*x+y","92a24dc1":"b = np.fromfunction(f,(5,4),dtype=int)\nb","373fd8d7":"b[2,3]","19b894bb":"# each row in the second column of b\nb[0:5, 1]                      ","a2780254":"# equivalent to the previous example\nb[ : ,1]                       ","ff98cd5f":"# each column in the second and third row of b\nb[1:3, : ]                     ","757350e5":"for row in b:\n    print(row)","778c14c9":"for element in b.flat:\n    print(element)","4d03d050":"a = np.floor(10*np.random.random((3,5)))\na","0cd0bc4b":"a.shape","ec60fce1":"a.ravel()  # returns the array, flattened","8ae4c07c":"a.reshape(5,3)  # returns the array with a modified shape","6434e8b6":"a.T  # returns the array, transposed","40c47238":"a.T.shape","aea856ce":"a.shape","4d7dc7c1":"a","4484f6e5":"a.resize((5,3))\na","d511565d":"a.reshape(5,-1)","97e9b7d4":"a = np.floor(10*np.random.random((4,4)))\na","9012914b":"b = np.floor(10*np.random.random((4,4)))\nb","e9e024fe":"np.vstack((a,b))","7ab8a917":"np.hstack((a,b))","e6cf62ba":"from numpy import newaxis\nnp.column_stack((a,b))     # with 2D arrays","61eba0de":"a = np.array([4.,2.])\nb = np.array([3.,8.])\nnp.column_stack((a,b))     # returns a 2D array","2c3f678f":"np.hstack((a,b))           # the result is different","377d1bd0":"a[:,newaxis]               # this allows to have a 2D columns vector","09bc1742":"np.column_stack((a[:,newaxis],b[:,newaxis]))","98f991e4":"np.hstack((a[:,newaxis],b[:,newaxis]))   # the result is the same","ddfabf5f":"np.r_[1:4,0,4]","20c423d8":"a = np.floor(10*np.random.random((2,12)))\na","3c896e2f":"np.hsplit(a,3)   # Split a into 3","8997e598":"np.hsplit(a,(3,4))   # Split a after the third and the fourth column","9cac4251":"a = np.arange(12)\nb = a            # no new object is created","11f566be":"b is a           # a and b are two names for the same ndarray object","bb06c405":"b.shape = 3,4    # changes the shape of a\na.shape","52e0d032":"c = a.view()\nc is a","9d8c2ff7":"c.base is a                        # c is a view of the data owned by a","025e6ead":"c.flags.owndata","391ffc99":"c.shape = 2,6                      # a's shape doesn't change\na.shape","7cef1c8b":"c[0,4] = 1234                      # a's data changes\na","9933a52c":"s = a[ : , 1:3]\ns[:] = 10           # s[:] is a view of s. Note the difference between s=10 and s[:]=10\na","15c24d57":"d = a.copy()                          # a new array object with new data is created\nd is a","3f50ef82":"d.base is a                           # d doesn't share anything with a","9420a8f9":"d[0,0] = 9999\na","8596154c":"a = np.arange(12)**2                       # the first 12 square numbers\ni = np.array( [ 1,1,3,8,5 ] )              # an array of indices\na[i]                                       # the elements of a at the positions i","de90121f":"j = np.array( [ [ 3, 4], [ 9, 7 ] ] )      # a bidimensional array of indices\na[j]                                       # the same shape as j\n","f48ee566":"palette = np.array( [ [0,0,0],                # black\n                      [255,0,0],              # red\n                      [0,255,0],              # green\n                      [0,0,255],              # blue\n                      [255,255,255] ] )       # white\nimage = np.array( [ [ 0, 1, 2, 0 ],           # each value corresponds to a color in the palette\n                    [ 0, 3, 4, 0 ]  ] )","d23cd6ab":"palette[image]                            # the (2,4,3) color image","a032bcb9":"a = np.arange(12).reshape(3,4)\na","7e7186ae":"i = np.array( [ [0,1],                        # indices for the first dim of a\n                [1,2] ] )\nj = np.array( [ [2,1],                        # indices for the second dim\n                [3,3] ] )\n\n","7fe2b9c5":"a[i,j]                                     # i and j must have equal shape","4dd8495e":"a[i,2]","23dec859":"a[:,j]                                     # i.e., a[ : , j]","158c7ead":"time = np.linspace(20, 145, 5)                 # time scale\ndata = np.sin(np.arange(20)).reshape(5,4)      # 4 time-dependent series\ntime","8531a3ab":"data","75749ed7":"ind = data.argmax(axis=0)                  # index of the maxima for each series\nind","43dd1ea1":"time_max = time[ind]                       # times corresponding to the maxima\n\ndata_max = data[ind, range(data.shape[1])] # => data[ind[0],0], data[ind[1],1]...","13eda526":"time_max","c21f72b5":"data_max","2719cd91":"np.all(data_max == data.max(axis=0))","dd054777":"a = np.arange(5)\na","8f2f24bc":"a[[1,3,4]] = 0\na","340ce5bf":"a = np.arange(12).reshape(3,4)\nb = a > 4\nb                                          # b is a boolean with a's shape","b38f8a83":"a[b]                                       # 1d array with the selected elements","bdf6f763":"a[b] = 0                                   # All elements of 'a' higher than 4 become 0\na","7326958f":"import numpy as np\nimport matplotlib.pyplot as plt\ndef mandelbrot( h,w, maxit=20 ):\n    \"\"\"Returns an image of the Mandelbrot fractal of size (h,w).\"\"\"\n    y,x = np.ogrid[ -1.4:1.4:h*1j, -2:0.8:w*1j ]\n    c = x+y*1j\n    z = c\n    divtime = maxit + np.zeros(z.shape, dtype=int)\n\n    for i in range(maxit):\n        z = z**2 + c\n        diverge = z*np.conj(z) > 2**2            # who is diverging\n        div_now = diverge & (divtime==maxit)  # who is diverging now\n        divtime[div_now] = i                  # note when\n        z[diverge] = 2                        # avoid diverging too much\n\n    return divtime\nplt.imshow(mandelbrot(400,400))\nplt.show()","2bbdd812":"a = np.arange(12).reshape(3,4)\nb1 = np.array([False,True,True])             # first dim selection\nb2 = np.array([True,False,True,False])       # second dim selection\n\na[b1,:]                                   # selecting rows","33928b72":"a[b1]                                     # same thing","10f40c28":"a[:,b2]                                   # selecting columns","8691adc5":"a[b1,b2]                                  # a weird thing to do","75e86a1c":"a = np.array([2,3,4,5])\nb = np.array([8,5,4])\nc = np.array([5,4,6,8,3])\nax,bx,cx = np.ix_(a,b,c)\nax","24b94bba":"bx","0d7b0a3b":"cx","80b38516":"ax.shape, bx.shape, cx.shape","2863ab0c":"result = ax+bx*cx\nresult","dfb66f4f":"result[3,2,4]","ae74772d":"a[3]+b[2]*c[4]","f56eb0aa":"def ufunc_reduce(ufct, *vectors):\n   vs = np.ix_(*vectors)\n   r = ufct.identity\n   for v in vs:\n       r = ufct(r,v)\n   return r","15f05a74":"ufunc_reduce(np.add,a,b,c)","3ccb5cf3":"import numpy as np\na = np.array([[1.0, 2.0], [3.0, 4.0]])\nprint(a)","6a445f94":"a.transpose()","960f1a95":"np.linalg.inv(a)","479e4f89":"u = np.eye(4) # unit 4x4 matrix; \"eye\" represents \"I\"\nu","4912073b":"j = np.array([[0.0, -1.0], [1.0, 0.0]])\n\nj @ j        # matrix product","c093ee22":"np.trace(u)  # trace","b0789d05":"y = np.array([[5.], [7.]])\nnp.linalg.solve(a, y)","2bfc9f16":"np.linalg.eig(j)","9b823d27":"a = np.arange(30)\na.shape = 2,-1,3  # -1 means \"whatever is needed\"\na.shape","eca11002":"a","f0a4797e":"x = np.arange(0,10,2)                     # x=([0,2,4,6,8])\ny = np.arange(5)                          # y=([0,1,2,3,4])\nm = np.vstack([x,y])                      # m=([[0,2,4,6,8],\n                                          #     [0,1,2,3,4]])\nxy = np.hstack([x,y])                     # xy =([0,2,4,6,8,0,1,2,3,4])","c6fb556d":"import numpy as np\nimport matplotlib.pyplot as plt\n# Build a vector of 10000 normal deviates with variance 0.5^2 and mean 2\nmu, sigma = 2, 0.5\nv = np.random.normal(mu,sigma,10000)\n# Plot a normalized histogram with 50 bins\nplt.hist(v, bins=50, density=1)       # matplotlib version (plot)\nplt.show()","ea1d69a9":"# Compute the histogram with numpy and then plot it\n(n, bins) = np.histogram(v, bins=50, density=True)  # NumPy version (no plot)\nplt.plot(.5*(bins[1:]+bins[:-1]), n)\nplt.show()","0c45fd7f":"Give indexes for more than one dimension. The arrays of indices for each dimension must have the same shape.","3e02f6b4":"### Stacking together different arrays\n\nSeveral arrays can be stacked together along different axes:","40e8331f":"\n\nNumpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays. Using NumPy, mathematical and logical operations on arrays can be performed.\n","c4865f85":"Indexing with arrays as a target to assign to:","0380b247":"**Multidimensional** arrays can have one index per axis. These indices are given in a tuple separated by commas:","9345331b":"### \u201cAutomatic\u201d Reshaping\n\nTo change the dimensions of an array, you can omit one of the sizes which will then be deduced automatically:","7e41f6e8":"## Linear Algebra\n\n### Simple Array Operations","b1808c25":"**Array Creation**\n\nThere are several ways to create arrays.\n\n An array  can create from a regular Python list or tuple using the **array** function. The type of the resulting array is deduced from the type of the elements in the sequences.","09592cf7":"The function **column_stack** stacks 1D arrays as columns into a 2D array. It is equivalent to ** hstack** only for 2D arrays:","8405223d":"### Indexing with Boolean Arrays\n\nWhen we index arrays with arrays of (integer) indices we are providing the list of indices to pick. With boolean indices the approach is different; we explicitly choose which items in the array we want and which ones we don\u2019t.\n\nThe most natural way one can think of for boolean indexing is to use boolean arrays that have the same shape as the original array:","1629261f":"### Functions and Methods Overview\n\nHere is a list of some useful NumPy functions and methods names ordered in categories. See Routines for the full list.\n\n**Array Creation**\n    arange, array, copy, empty, empty_like, eye, fromfile, fromfunction, identity, linspace, logspace, mgrid, ogrid, ones, ones_like, r, zeros, zeros_like\n    \n**Conversions**\n    ndarray.astype, atleast_1d, atleast_2d, atleast_3d, mat\n    \n**Manipulations**\n    array_split, column_stack, concatenate, diagonal, dsplit, dstack, hsplit, hstack, ndarray.item, newaxis, ravel, repeat, reshape, resize, squeeze, swapaxes, take, transpose, vsplit, vstack\n    \n**Questions**\n    all, any, nonzero, where\n    \n**Ordering**\n    argmax, argmin, argsort, max, min, ptp, searchsorted, sort\n    \n**Operations**\n    choose, compress, cumprod, cumsum, inner, ndarray.fill, imag, prod, put, putmask, real, sum\n    \n**Basic Statistics**\n    cov, mean, std, var\n    \n**Basic Linear Algebra**\n    cross, dot, outer, linalg.svd, vdot\n\n","508d9aea":"## NumPy Array\n\nNumpy array is a powerful N-dimensional array object which is in the form of rows and columns. We can initialize numpy arrays from nested Python lists and access it elements.\n\nNumPy\u2019s array class is called `ndarray`. It is also known by the alias array. Note that `numpy.array` is not the same as the Standard Python Library class `array.array`, which only handles one-dimensional arrays and offers less functionality. The more important attributes of an ndarray object are:\n\n**ndarray.ndim**\n\n    The number of axes (dimensions) of the array.\n**ndarray.shape**\n\n    The dimensions of the array. This is a tuple of integers indicating the size of the array in each dimension. For a matrix with n rows and m columns, shape will be (n,m). The length of the shape tuple is therefore the number of axes, ndim.\n    \n**ndarray.size**\n\n    The total number of elements of the array. This is equal to the product of the elements of shape.\n    \n**ndarray.dtype**\n\n    An object describing the type of the elements in the array. One can create or specify dtype\u2019s using standard Python types. Additionally NumPy provides types of its own. numpy.int32, numpy.int16, and numpy.float64 are some examples.\n    \n**ndarray.itemsize**\n\n    The size in bytes of each element of the array. For example, an array of elements of type float64 has itemsize 8 (=64\/8), while one of type complex32 has itemsize 4 (=32\/8). It is equivalent to ndarray.dtype.itemsize.\n    \n**ndarray.data**\n\n    The buffer containing the actual elements of the array. Normally, we won\u2019t need to use this attribute because we will access the elements in an array using indexing facilities. \n","7ebb77bf":"If a dimension is given as -1 in a reshaping operation, the other dimensions are automatically calculated:","9678d2f1":"The **reshape** function returns its argument with a modified shape, whereas the **ndarray.resize** method modifies the array itself:","8325d833":"However, if one wants to perform an operation on each element in the array, one can use the **flat** attribute which is an iterator over all the elements of the array:","07555e66":"### The ix_() function\n\nThe ix_ function can be used to combine different vectors so as to obtain the result for each n-uplet. For example, if you want to compute all the a+b*c for all the triplets taken from each of the vectors a, b and c:","2c24c96d":"Operations, such as += and *=, act in place to modify an existing array rather than create a new one.","0cc56619":"### No Copy at All\nSimple assignments make no copy of array objects or of their data.","0ea1dc9c":"array transforms sequences of sequences into two-dimensional arrays, sequences of sequences of sequences into three-dimensional arrays, and so on.","158eb96b":"The matrix product can be performed using the @ operator (in python >=3.5) or the dot function or method:","6d5be916":"#### Note\n\nIn complex cases, r_ and c_ are useful for creating arrays by stacking numbers along one axis. They allow the use of range literals (\u201c:\u201d)","2ed92051":"Better to use the function** linspace** that receives as an argument the number of elements that we want, instead of the step:","74e158ff":"Common use of indexing with arrays is the search of the maximum value of time-dependent series:","57d2bac5":"When operating with arrays of different types, the type of the resulting array corresponds to the more general or precise one (a behavior known as upcasting).","80d9d45e":"You could also implement the reduce as follows:","fd8cd69a":"## Shape Manipulation","8c16e0b4":"On the other hand, the function row_stack is equivalent to vstack for any input arrays. In general, for arrays of with more than two dimensions, hstack stacks along their second axes, vstack stacks along their first axes, and concatenate allows for an optional arguments giving the number of the axis along which the concatenation should happen.","9f0f236a":"## Copies and Views","085ee42e":"**Iterating** over multidimensional arrays is done with respect to the first axis:","18b704e9":"## Fancy indexing and index tricks\nNumPy offers more indexing facilities than regular Python sequences. In addition to indexing by integers and slices, as we saw before, arrays can be indexed by arrays of integers and arrays of booleans.\n### Indexing with Arrays of Indices","4f565aff":"\nSlicing an array returns a view of it:","5460925c":"### Splitting one array into several smaller ones\n\nUsing hsplit, you can split an array along its horizontal axis, either by specifying the number of equally shaped arrays to return, or by specifying the columns after which the division should occur:","e81b61ac":"### Histograms\n\nThe NumPy histogram function applied to an array returns a pair of vectors: the histogram of the array and the vector of bins. Beware: matplotlib also has a function to build histograms (called hist, as in Matlab) that differs from the one in NumPy. The main difference is that pylab.hist plots the histogram automatically, while numpy.histogram only generates the data.","56811d65":"**A simple example**","9718db78":"### Vector Stacking\n\nHow do we construct a 2D array from a list of equally-sized row vectors? In MATLAB this is quite easy: if x and y are two vectors of the same length you only need do m=[x;y]. In NumPy this works via the functions column_stack, dstack, hstack and vstack, depending on the dimension in which the stacking is to be done. For example:","ebae841e":"# Content\n* Data types\n* Array creation\n*  I\/O with NumPy\n* Indexing\n* Broadcasting\n* Byte-swapping\n* Structured arrays\n* Subclassing ndarray\n\n","4961c9de":"Use boolean indexing to generate an image of the Mandelbrot set:","170a1893":"This property can be very useful in assignments:","eb2d37de":"**Printing Arrays**\n\nWhen you print an array, NumPy displays it in a similar way to nested lists, but with the following layout:\n\n  * the last axis is printed from left to right,\n  * the second-to-last is printed from top to bottom,\n  * the rest are also printed from top to bottom, with each slice separated from the next by an empty line.\n\nOne-dimensional arrays are then printed as rows, bidimensionals as matrices and tridimensionals as lists of matrices.","c3c481b3":"By default, these operations apply to the array as though it were a list of numbers, regardless of its shape. However, by specifying the axis parameter you can apply an operation along the specified axis of an array:","0e56ca19":"Many unary operations, such as computing the sum of all the elements in the array, are implemented as methods of the ndarray class.","fe062a13":"The shape of an array can be changed with various commands. Note that the following three commands all return a modified array, but do not change the original array:","e02517b6":"To create sequences of numbers, NumPy provides a function analogous to range that returns arrays instead of lists.","f1189147":"If an array is too large to be printed, NumPy automatically skips the central part of the array and only prints the corners:","626f8ae1":"**One-dimensional** arrays can be indexed, sliced and iterated over, much like lists and other Python sequences.","f47fae42":"The function zeros creates an array full of zeros, the function ones creates an array full of ones, and the function empty creates an array whose initial content is random and depends on the state of the memory. By default, the dtype of the created array is float64.","dda0cdc0":"# Getting Started with NumPy \ud83d\udc0d \ud83d\udc0d\n![65354639-dd928f80-dba4-11e9-833b-bc3e8c6a737d.png](attachment:65354639-dd928f80-dba4-11e9-833b-bc3e8c6a737d.png)","f7304567":"### Changing the shape of an array\n\nAn array has a shape given by the number of elements along each axis:","c964b340":"The type of the array can also be explicitly specified at creation time:","2f868f29":"The second way of indexing with booleans is more similar to integer indexing; for each dimension of the array we give a 1D boolean array selecting the slices we want:","35f2a3ca":"### Universal Functions\nNumPy provides familiar mathematical functions such as sin, cos, and exp. In NumPy, these are called \u201cuniversal functions\u201d(ufunc). Within NumPy, these functions operate elementwise on an array, producing an array as output.","7bb68241":"### Indexing, Slicing and Iterating","bbeac9eb":"To disable this behaviour and force NumPy to print the entire array, you can change the printing options using **set_printoptions**.","65c0ca83":"### Basic Operations\nArithmetic operators on arrays apply elementwise. A new array is created and filled with the result.","3cfe28bf":"### View or Shallow Copy\nDifferent array objects can share the same data. The view method creates a new array object that looks at the same data.","5ba28fdb":"### Deep Copy\nThe copy method makes a complete copy of the array and its data."}}