{"cell_type":{"61eb7b01":"code","4b647e6b":"code","b58d3ce5":"code","ae651119":"code","63c6daca":"code","ab2b6fa2":"code","58940078":"code","10907916":"code","0fe69729":"code","61f0fa83":"code","d7e990a7":"code","01cd00de":"code","ddc3d00b":"code","5fc8a8db":"code","8fdecc93":"code","1b323ff1":"code","cf34a2cd":"code","aa77ec52":"code","cc19c46c":"code","fa1e7a74":"code","a522179b":"code","ffbefc47":"code","843c76db":"code","64977574":"code","f20700a1":"code","4643a205":"code","501b1c1d":"code","344ea889":"code","a6e0080c":"code","9c2266ce":"code","0e2298d2":"code","68540323":"code","8393e860":"code","c1875284":"code","0dfd727a":"code","6df3078f":"code","30eef41f":"code","cc7f6986":"code","20279496":"code","1211e4e8":"code","af3e7cd3":"code","d3303eb3":"code","2fd63abd":"code","ac8350c7":"code","d296eef2":"code","84fe2bb7":"code","bc44e105":"code","63587860":"code","082994e5":"code","4a57d306":"code","8e13dd3e":"code","2e21948d":"markdown","bc5fe1cd":"markdown"},"source":{"61eb7b01":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set()","4b647e6b":"train_data = pd.read_excel('..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx')","b58d3ce5":"train_data.head()","ae651119":"train_data.info()","63c6daca":"train_data.dropna(inplace = True)","ab2b6fa2":"train_data.isnull().sum()","58940078":"train_data.drop(['Arrival_Time'],axis=1, inplace=True)","10907916":"# date of journey to date time obj and taking date adn month out\ntrain_data[\"Journey_day\"] = pd.to_datetime(train_data.Date_of_Journey, format=\"%d\/%m\/%Y\").dt.day\ntrain_data[\"Journey_month\"] = pd.to_datetime(train_data[\"Date_of_Journey\"], format = \"%d\/%m\/%Y\").dt.month\n","0fe69729":"train_data.drop([\"Date_of_Journey\"], axis = 1, inplace = True)","61f0fa83":"train_data.head()","d7e990a7":"# Depature Time\ntrain_data[\"Dep_hour\"] = pd.to_datetime(train_data[\"Dep_Time\"]).dt.hour\n\ntrain_data[\"Dep_min\"] = pd.to_datetime(train_data[\"Dep_Time\"]).dt.minute","01cd00de":"train_data.drop([\"Dep_Time\"], axis = 1, inplace = True)","ddc3d00b":"train_data.head()\n","5fc8a8db":"train_data.drop(['Duration'],axis=1, inplace =True)","8fdecc93":"train_data.head()","1b323ff1":"train_data[\"Airline\"].value_counts()","cf34a2cd":"# performing oneHotEncoding\nAirline = train_data[[\"Airline\"]]\n\nAirline = pd.get_dummies(Airline, drop_first= True)\n\nAirline.head()","aa77ec52":"train_data[\"Source\"].value_counts()","cc19c46c":"#ONeHotEncoding\nSource = train_data[[\"Source\"]]\n\nSource = pd.get_dummies(Source, drop_first= True)\n\nSource.head()","fa1e7a74":"train_data[\"Destination\"].value_counts()","a522179b":"# OneHotEncoding\nDestination = train_data[[\"Destination\"]]\n\nDestination = pd.get_dummies(Destination, drop_first = True)\n\nDestination.head()","ffbefc47":"train_data[\"Route\"]","843c76db":"# most of the \"Additional_info\" Coloumn is filled with no_info so droping that col and route, Total_stops are correlated to each other so removong one of them\ntrain_data.drop([\"Route\", \"Additional_Info\"], axis = 1, inplace = True)","64977574":"train_data[\"Total_Stops\"].value_counts()","f20700a1":"# LAbelEncoder\ntrain_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)","4643a205":"final_data = pd.concat([train_data, Airline, Source, Destination], axis = 1)","501b1c1d":"final_data.head()","344ea889":"final_data.drop([\"Airline\", \"Source\", \"Destination\"], axis = 1, inplace = True)","a6e0080c":"final_data.head()","9c2266ce":"final_data.shape","0e2298d2":"# features an labels\ny=final_data.iloc[:,1]\ny.head()","68540323":"final_data.drop([\"Price\"],axis=1, inplace=True)\n","8393e860":"x=final_data","c1875284":"x.head(), x.shape","0dfd727a":"# Train Test Split\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 42)","6df3078f":"# comparing all regressor models using lazypredict\nimport lazypredict","30eef41f":"from lazypredict.Supervised import LazyRegressor\nreg = LazyRegressor(verbose=0,ignore_warnings=False, custom_metric=None )\nmodels,predictions = reg.fit(X_train, X_test, y_train, y_test)","cc7f6986":"models","20279496":"from sklearn.experimental import enable_hist_gradient_boosting\nfrom sklearn.ensemble import HistGradientBoostingRegressor\t\nreg_rf = HistGradientBoostingRegressor()\nreg_rf.fit(X_train, y_train)","1211e4e8":"y_pred = reg_rf.predict(X_test)","af3e7cd3":"reg_rf.score(X_train, y_train)","d3303eb3":"reg_rf.score(X_test, y_test)","2fd63abd":"sns.distplot(y_test-y_pred)\nplt.show()","ac8350c7":"\nplt.scatter(y_test, y_pred, alpha = 0.5)\nplt.xlabel(\"y_test\")\nplt.ylabel(\"y_pred\")\nplt.show()","d296eef2":"from sklearn import metrics\n\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))\nprint('MSE:', metrics.mean_squared_error(y_test, y_pred))\nprint('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","84fe2bb7":"# calculating RMSE\n\n2090.5509\/(max(y)-min(y))","bc44e105":"metrics.r2_score(y_test, y_pred)","63587860":"import pickle\n\nfile = open('flight_fare_new_model.pkl', 'wb')\npickle.dump(reg_rf, file)","082994e5":"model = open('.\/flight_fare_new_model.pkl','rb')\nHist = pickle.load(model)","4a57d306":"y_prediction = Hist.predict(X_test)","8e13dd3e":"metrics.r2_score(y_test, y_prediction)","2e21948d":"Converting into required Formats","bc5fe1cd":"Handling Categorical Data"}}