{"cell_type":{"c668720d":"code","68f7fb9e":"code","0cf402c0":"code","c477840e":"code","0a026633":"code","912431ef":"code","01b4056e":"code","623e3d81":"code","70264453":"code","aecb7de8":"code","a149b9ab":"code","ecd1a264":"code","e19dc908":"code","2cc53fc8":"code","7069170c":"code","575eb2ca":"code","df58b599":"code","dfb84af1":"code","42c36929":"code","dbc62ee2":"code","a4d0ac03":"markdown","a4f2fce5":"markdown","51bb25c1":"markdown","7a0e4174":"markdown","c13eab54":"markdown","4bf60536":"markdown","211e4cdf":"markdown","2391ae6e":"markdown","e5434c96":"markdown","fb9f8588":"markdown"},"source":{"c668720d":"import os\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport re\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, Dropout, Input\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.models import Model, load_model\nfrom tensorflow.keras.callbacks import ReduceLROnPlateau, EarlyStopping, ModelCheckpoint\nfrom kaggle_datasets import KaggleDatasets\nimport transformers\nfrom tqdm.notebook import tqdm\nfrom tokenizers import BertWordPieceTokenizer","68f7fb9e":"def clean_text(text):\n    text = str(text)\n    text = re.sub(r'[0-9\"]', '', text) # number\n    text = re.sub(r'#[\\S]+\\b', '', text) # hash\n    text = re.sub(r'@[\\S]+\\b', '', text) # mention\n    text = re.sub(r'https?\\S+', '', text) # link\n    text = re.sub(r'\\s+', ' ', text) # multiple white spaces\n#     text = re.sub(r'\\W+', ' ', text) # non-alphanumeric\n    return text.strip()","0cf402c0":"def text_process(text):\n    ws = text.split(' ')\n    if(len(ws)>160):\n        text = ' '.join(ws[:160]) + ' ' + ' '.join(ws[-32:])\n    return text","c477840e":"def fast_encode(texts, tokenizer, chunk_size=256, maxlen=512):\n \n    tokenizer.enable_truncation(max_length=maxlen)\n    tokenizer.enable_padding(max_length=maxlen)\n    all_ids = []\n    \n    for i in tqdm(range(0, len(texts), chunk_size)):\n        text_chunk = texts[i:i+chunk_size].tolist()\n        encs = tokenizer.encode_batch(text_chunk)\n        all_ids.extend([enc.ids for enc in encs])\n    \n    return np.array(all_ids)","0a026633":"# First load the real tokenizer\ntokenizer = transformers.BertTokenizer.from_pretrained('bert-large-uncased')\n\n# Save the loaded tokenizer locally\nsave_path = '\/kaggle\/working\/bert_base_uncased\/'\nif not os.path.exists(save_path):\n    os.makedirs(save_path)\ntokenizer.save_pretrained(save_path)\n\n# Reload it with the huggingface tokenizers library\nfast_tokenizer = BertWordPieceTokenizer('bert_base_uncased\/vocab.txt', lowercase=True)\nfast_tokenizer","912431ef":"# Detect hardware, return appropriate distribution strategy\ntry:\n    # TPU detection. No parameters necessary if TPU_NAME environment variable is\n    # set: this is always the case on Kaggle.\n    tpu = tf.distribute.cluster_resolver.TPUClusterResolver()\n    print('Running on TPU ', tpu.master())\nexcept ValueError:\n    tpu = None\n\nif tpu:\n    tf.config.experimental_connect_to_cluster(tpu)\n    tf.tpu.experimental.initialize_tpu_system(tpu)\n    strategy = tf.distribute.experimental.TPUStrategy(tpu)\nelse:\n    # Default distribution strategy in Tensorflow. Works on CPU and single GPU.\n    strategy = tf.distribute.get_strategy()\n\nprint(\"REPLICAS: \", strategy.num_replicas_in_sync)","01b4056e":"# Configuration\nAUTO = tf.data.experimental.AUTOTUNE\nEPOCHS_1 = 20\nEPOCHS_2 = 2\nBATCH_SIZE = 16 * strategy.num_replicas_in_sync\nMAX_LEN = 192\nSHUFFLE = 2048\nVERBOSE = 1","623e3d81":"train1 = pd.read_csv(\"\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/jigsaw-toxic-comment-train.csv\")\ntrain2 = pd.read_csv(\"\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/jigsaw-unintended-bias-train.csv\")\ntrain2.toxic = train2.toxic.round().astype(int)\n\nvalid = pd.read_csv('\/kaggle\/input\/val-en-df\/validation_en.csv')\n\ntest1 = pd.read_csv('\/kaggle\/input\/test-en-df\/test_en.csv')\ntest2 = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-test-translated\/jigsaw_miltilingual_test_translated.csv')\n\nsub = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/sample_submission.csv')\nsub1 = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/sample_submission.csv')\nsub2 = pd.read_csv('\/kaggle\/input\/jigsaw-multilingual-toxic-comment-classification\/sample_submission.csv')","70264453":"# oversample====\ntrain = pd.concat([\n    train1[['comment_text', 'toxic']],\n    train2[['comment_text', 'toxic']].query('toxic==1'),\n    train2[['comment_text', 'toxic']].query('toxic==0').sample(n=100000, random_state=1234)\n    ])\n# shufle it just to make sure\ntrain = train.sample(frac=1, random_state=1234)","aecb7de8":"train['comment_text'] = train.apply(lambda x: clean_text(x['comment_text']), axis=1)\nvalid['comment_text_en'] = valid.apply(lambda x: clean_text(x['comment_text_en']), axis=1)\ntest1['content'] = test1.apply(lambda x: clean_text(x['content_en']), axis=1)\ntest2['content'] = test2.apply(lambda x: clean_text(x['translated']), axis=1)\n\ntrain['comment_text'] = train['comment_text'].apply(lambda x: text_process(x))\nvalid['comment_text_en'] = valid['comment_text_en'].apply(lambda x: text_process(x))\ntest1['content'] = test1['content_en'].apply(lambda x: text_process(x))\ntest2['content'] = test2['translated'].apply(lambda x: text_process(x))","a149b9ab":"x_train = fast_encode(train1.comment_text.astype(str), fast_tokenizer, maxlen=MAX_LEN)\nx_valid = fast_encode(valid.comment_text_en.astype(str), fast_tokenizer, maxlen=MAX_LEN)\nx_test1 = fast_encode(test1.content_en.astype(str), fast_tokenizer, maxlen=MAX_LEN)\nx_test2 = fast_encode(test2.translated.astype(str), fast_tokenizer, maxlen=MAX_LEN)\n\ny_train = train1.toxic.values\ny_valid = valid.toxic.values","ecd1a264":"train_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_train, y_train))\n    .repeat()\n    .shuffle(SHUFFLE)\n    .batch(BATCH_SIZE)\n    .prefetch(AUTO)\n)\n\nvalid_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices((x_valid, y_valid))\n    .batch(BATCH_SIZE)\n    .cache()\n    .prefetch(AUTO)\n)\n\ntest1_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(x_test1)\n    .batch(BATCH_SIZE)\n)\n\ntest2_dataset = (\n    tf.data.Dataset\n    .from_tensor_slices(x_test2)\n    .batch(BATCH_SIZE)\n)","e19dc908":"lrs = ReduceLROnPlateau(monitor='val_accuracy', mode ='max', factor = 0.7, min_lr= 1e-7, verbose = 1, patience = 2)\nes1 = EarlyStopping(monitor='val_accuracy', mode='max', verbose = 1, patience = 5, restore_best_weights=True)\nes2 = EarlyStopping(monitor='accuracy', mode='max', verbose = 1, patience = 1, restore_best_weights=True)\ncallbacks_list1 = [lrs,es1]\ncallbacks_list2 = [lrs,es2]","2cc53fc8":"def build_model(transformer, max_len=512):\n\n    input_word_ids = Input(shape=(max_len,), dtype=tf.int32, name=\"input_word_ids\")\n    sequence_output = transformer(input_word_ids)[0]\n    cls_token = sequence_output[:, 0, :]\n    x = tf.keras.layers.Dropout(0.4)(cls_token)\n    out = Dense(1, activation='sigmoid')(cls_token)\n    \n    model = Model(inputs=input_word_ids, outputs=out)\n    model.compile(Adam(lr=1e-5), loss='binary_crossentropy', metrics=[tf.keras.metrics.AUC(name='auc'), 'accuracy'])\n    \n    return model","7069170c":"%%time\nwith strategy.scope():\n    transformer_layer = transformers.TFBertModel.from_pretrained('bert-large-uncased')\n    model = build_model(transformer_layer, max_len=MAX_LEN)\nmodel.summary()","575eb2ca":"n_train_steps = train.shape[0] \/\/ (BATCH_SIZE*16)\nmodel_history_1 = model.fit(\n    train_dataset,\n    steps_per_epoch=n_train_steps,\n    validation_data=valid_dataset,\n    epochs=EPOCHS_1,\n    callbacks=callbacks_list1,\n    verbose=VERBOSE\n )","df58b599":"n_valid_steps = valid.shape[0] \/\/ (BATCH_SIZE)\nmodel_history_2 = model.fit(\n    valid_dataset.repeat(),\n    steps_per_epoch=n_valid_steps,\n    epochs=EPOCHS_2,\n    callbacks=callbacks_list2,\n    verbose=VERBOSE\n)","dfb84af1":"eng1 = model.predict(test1_dataset, verbose=1)\neng2 = model.predict(test2_dataset, verbose=1)","42c36929":"sub['toxic'] = eng1*0.5 + eng2*0.5\nsub.toxic.hist(bins=100, log=False, alpha=1)","dbc62ee2":"sub.to_csv('submission.csv', index=False)","a4d0ac03":"## TPU config","a4f2fce5":"## Load model into TPU","51bb25c1":"## Load libraries","7a0e4174":"## Helper functions","c13eab54":"## Build model","4bf60536":"## Read data","211e4cdf":"## Build dataset objects","2391ae6e":"## Callbacks","e5434c96":"## Submission","fb9f8588":"## Run model"}}