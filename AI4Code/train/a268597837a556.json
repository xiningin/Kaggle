{"cell_type":{"a9e31cf3":"code","b5b40d1c":"code","3fc08f61":"code","9f816e36":"code","b0458c82":"code","f9a82d3b":"code","4621aed9":"code","b3a4b1bb":"code","f505f6fa":"code","c33a5262":"code","c0f25e7c":"code","763cc100":"code","8659f892":"code","d361d347":"code","5cd3da98":"code","1d9d0ca2":"code","ec55b6fa":"code","6f95294d":"code","df2c69f1":"code","e528e4b4":"code","d2b182af":"code","b4561995":"code","0ee444a4":"code","8a903ab6":"code","9b62078b":"code","95d08709":"code","3f6f4b3b":"code","64c4a20d":"code","60e0b3f7":"code","09d1089c":"code","8fd08db2":"code","3ab1b8d0":"code","d756b480":"code","b7666440":"code","940bf9da":"code","fcb293ef":"code","8ee18dd2":"code","87358c95":"code","bcf1af8b":"code","38217d42":"code","f550de6d":"markdown","ab68fb6c":"markdown","1bc546bb":"markdown","ef4dfca7":"markdown","672787cc":"markdown","d50d3d42":"markdown"},"source":{"a9e31cf3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b5b40d1c":"# Importing the necessary Libraries\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\nsb.set_style(\"whitegrid\")","3fc08f61":"# Importing the Dataset\nloan_train = pd.read_csv(\"\/kaggle\/input\/loan-prediction-problem-dataset\/train_u6lujuX_CVtuZ9i.csv\")\nloan_test = pd.read_csv(\"\/kaggle\/input\/loan-prediction-problem-dataset\/test_Y3wMUE5_7gLdaTN.csv\")","9f816e36":"loan_train.columns","b0458c82":"loan_test.columns","f9a82d3b":"loan_train.head()","4621aed9":"# Checking for duplicate records\nloan_train.duplicated().sum()","b3a4b1bb":"# Dropping Unwanted columns\nloan_train.drop(axis = 1, columns = \"Loan_ID\", inplace = True)","f505f6fa":"# Splitting the train dataset into dependent and Independent Variable\n\nX = loan_train.iloc[:, :-1].values\ny = loan_train.iloc[:, -1].values","c33a5262":"X[:5, :]","c0f25e7c":"# Checking for Null values\npd.isnull(X[:, [0]]).sum()","763cc100":"cols = loan_train.columns","8659f892":"for i in cols:\n    print(i)\n    print(\"Total Null Values\\t:\\t\", loan_train[i].isnull().sum())\n    print(loan_train[i].value_counts())\n    print()","d361d347":"# Filling the Null values\n\nfrom sklearn.impute import SimpleImputer\n\ngender_imputer = SimpleImputer(strategy = \"most_frequent\")\nX[:, [0]] = gender_imputer.fit_transform(X[:, [0]])\n\nmarry_imputer = SimpleImputer(strategy = \"most_frequent\")\nX[:, [1]] = marry_imputer.fit_transform(X[:, [1]])\n\ndependents_imputer = SimpleImputer(strategy = \"most_frequent\")\nX[:, [2]] = dependents_imputer.fit_transform(X[:, [2]])\n\nemploy_imputer = SimpleImputer(strategy = \"most_frequent\")\nX[:, [4]] = employ_imputer.fit_transform(X[:, [4]])\n\nLA_imputer = SimpleImputer(strategy = \"mean\")\nX[:, [7]] = LA_imputer.fit_transform(X[:, [7]])\n\nLAT_imputer = SimpleImputer(strategy = \"most_frequent\")\nX[:, [8]] = LAT_imputer.fit_transform(X[:, [8]])\n\ncred_imputer = SimpleImputer(strategy = \"most_frequent\")\nX[:, [9]] = cred_imputer.fit_transform(X[:, [9]])","5cd3da98":"pd.Series(X[:, 10]).value_counts()","1d9d0ca2":"from sklearn.preprocessing import LabelEncoder, OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\n\ngender_encoder = LabelEncoder()\nX[:, 0] = gender_encoder.fit_transform(X[:, 0])\n\nmarry_encoder = LabelEncoder()\nX[:, 1] = marry_encoder.fit_transform(X[:, 1])\n\n\n\ngraduate_encoder = LabelEncoder()\nX[:, 3] = graduate_encoder.fit_transform(X[:, 3])\n\nself_emp_encoder = LabelEncoder()\nX[:, 4] = self_emp_encoder.fit_transform(X[:, 4])\n\n\n\ncolumn_transformer = ColumnTransformer(transformers = [('PA_encoder', OneHotEncoder(), [10])], remainder=\"passthrough\")\nX = column_transformer.fit_transform(X)","ec55b6fa":"X[:5, :]","6f95294d":"print(X[:, 5])","df2c69f1":"def dependents_column_changer(a):\n    if a == \"0\":\n        return 0\n    elif a == \"1\":\n        return 1\n    elif a == \"2\":\n        return 2\n    else:\n        return 3","e528e4b4":"X[:, 5] = [dependents_column_changer(a) for a in X[:, 5]]","d2b182af":"X[:10, :]","b4561995":"y[:10]","0ee444a4":"sb.relplot(x = \"LoanAmount\", y = \"ApplicantIncome\", data = loan_train, hue = \"Loan_Status\", col = \"Gender\")","8a903ab6":"X[:5, :]","9b62078b":"corr = loan_train.corr()\ncorr","95d08709":"sb.heatmap(data = corr)","3f6f4b3b":"from sklearn.linear_model import LogisticRegression","64c4a20d":"classifier = LogisticRegression(solver = \"liblinear\")","60e0b3f7":"classifier.fit(X, y)","09d1089c":"classifier.predict([[1.0, 0.0, 0.0, 1, 0, 0, 0, 0, 5849, 0.0, 146.41216216216216, 360.0, 1.0]])","8fd08db2":"loan_test.head()","3ab1b8d0":"loan_test.drop(axis = 1, columns = \"Loan_ID\", inplace = True)","d756b480":"X_test = loan_test.iloc[:, :].values","b7666440":"\nX_test[:, [0]] = gender_imputer.transform(X_test[:, [0]])\n\nX_test[:, [1]] = marry_imputer.transform(X_test[:, [1]])\n\nX_test[:, [2]] = dependents_imputer.transform(X_test[:, [2]])\n\nX_test[:, [4]] = employ_imputer.transform(X_test[:, [4]])\n\nX_test[:, [7]] = LA_imputer.transform(X_test[:, [7]])\n\nX_test[:, [8]] = LAT_imputer.transform(X_test[:, [8]])\n\nX_test[:, [9]] = cred_imputer.transform(X_test[:, [9]])","940bf9da":"pd.isnull(X_test).sum()","fcb293ef":"X_test[:, 0] = gender_encoder.transform(X_test[:, 0])\n\nX_test[:, 1] = marry_encoder.transform(X_test[:, 1])\n\nX_test[:, 3] = graduate_encoder.transform(X_test[:, 3])\n\nX_test[:, 4] = self_emp_encoder.transform(X_test[:, 4])\n\nX_test = column_transformer.transform(X_test)","8ee18dd2":"X_test[:, 5] = [dependents_column_changer(a) for a in X_test[:, 5]]","87358c95":"X_test[:1, :]","bcf1af8b":"# Predicting the test Data\n\ny_pred = classifier.predict(X_test)","38217d42":"y_pred","f550de6d":"# Thank You","ab68fb6c":"# Visualization of the DataSet","1bc546bb":"## Thus the Loan Prediction","ef4dfca7":"# Please give an upvote, if you like it","672787cc":"# Predicting the Test Data Results","d50d3d42":"----------------------------------------------------------------------------------------------------------------"}}