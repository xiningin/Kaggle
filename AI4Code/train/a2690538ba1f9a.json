{"cell_type":{"2879e11f":"code","0697bc9d":"code","94a00d11":"code","e7139104":"code","505b76ae":"code","c36a004f":"code","bd7e5026":"code","6c72addd":"code","72d98cf6":"code","68f2a941":"code","c1010a56":"code","3a2fa8c3":"code","a2287881":"code","7488f302":"code","6a4fbc77":"code","0f028c7f":"code","4ce9fe7d":"code","78e139e3":"code","224ea3c9":"code","a822c635":"code","8c57d26c":"code","a85faceb":"code","601161aa":"code","5af29c1c":"code","0c6a8260":"code","4f6db6ab":"code","90b80d24":"code","1f953f63":"code","7d9ca738":"code","ebe04433":"code","6a9b8020":"code","160d7b18":"code","a133fe60":"code","4812e4f8":"code","460fe04e":"code","1a78b7c5":"code","6ea386b4":"code","d6e766ed":"code","655cd09f":"code","1ed70447":"code","bb81813e":"code","23dc7374":"code","0f7f14ab":"code","f2981a10":"code","42a82765":"code","c8c1b525":"code","fb0f37f1":"code","e9c57b8e":"code","8542a178":"code","6ed2eb47":"code","4933c811":"code","3f04af59":"code","6fbfd8fa":"code","4d9451a3":"code","42ce1ca0":"code","f7680f95":"code","b94b7d13":"code","c90e210c":"code","5db6ab2a":"code","98d09f63":"code","053273af":"code","97ae8147":"code","f1b9ea3c":"code","cae7914a":"code","ed5c5314":"code","80a25e48":"code","e023220a":"code","efa283ca":"code","2802b182":"code","efdb9d65":"code","b66a0f42":"code","9616d436":"code","c1c71283":"code","69f76c3c":"code","cd5e5aa3":"code","7042ff22":"code","269715ce":"code","35bb909c":"code","b12098cd":"code","a50fa441":"code","9e50badf":"code","760119fd":"code","92806436":"code","3e347944":"code","7b5010e0":"code","a510614d":"code","cccda73f":"code","3e7fbe67":"code","6a77555e":"code","43d02634":"code","54f6fbde":"code","417fe64e":"code","01ecd579":"code","9975a80a":"code","55cd6845":"code","cff94d88":"code","d34fe402":"code","327b9552":"code","7e560822":"code","750d0732":"code","462d6c53":"code","b7c7eb66":"code","acc32e3d":"markdown","ad3e4230":"markdown","43fef98b":"markdown","f80826ae":"markdown","55825df2":"markdown","86178f22":"markdown","69597eea":"markdown","7c8564bf":"markdown","37012e1a":"markdown","b2ac2524":"markdown","5f9cb118":"markdown","0e4ca55a":"markdown","a054d089":"markdown","b8c0bcc5":"markdown","0d26deb0":"markdown","2057bb47":"markdown","08712f11":"markdown","7cb430cc":"markdown","9cca1e39":"markdown","d878b8f2":"markdown","448d13e9":"markdown","7be35e47":"markdown","d86fdd27":"markdown","5e51a862":"markdown","c5a1fd97":"markdown","c787aaca":"markdown","4c4ce506":"markdown","5fc19528":"markdown","cc086497":"markdown","645ac7ee":"markdown","632c7948":"markdown","158fe032":"markdown","3a3e5581":"markdown","a45d01ba":"markdown","b5d251b6":"markdown","6cbe79a2":"markdown","398275d6":"markdown","0e2c3908":"markdown","9a3d2e1a":"markdown","affb942d":"markdown","2e2663bf":"markdown","22f7d49e":"markdown","44c1b6c2":"markdown","800e814b":"markdown","8fe76d22":"markdown","e337c62b":"markdown","92d10bb2":"markdown","cbe2dc82":"markdown","a063776a":"markdown","a6b5c95e":"markdown","17f2a47e":"markdown","69b51427":"markdown","eec38681":"markdown","2fed0de5":"markdown","f5d8e0fe":"markdown","6eb0a46c":"markdown","1674004c":"markdown","92d4f657":"markdown","7ef9d70c":"markdown","5f119848":"markdown","19ccb1ee":"markdown","2fb53751":"markdown","265665e4":"markdown","b85a06da":"markdown","9d387d29":"markdown","49362367":"markdown","6f40c27b":"markdown","3d2c278d":"markdown","a12e0c8f":"markdown","3090e9e4":"markdown","9760e22f":"markdown","dcdd80c1":"markdown","a5bf3b8c":"markdown","d06443b6":"markdown"},"source":{"2879e11f":"#Download libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport scipy.stats as stats\n\npd.set_option(\"display.max_columns\", None)    ","0697bc9d":"!head -2 '..\/input\/madrid-real-estate-market\/houses_Madrid.csv'","94a00d11":"data = pd.read_csv('..\/input\/madrid-real-estate-market\/houses_Madrid.csv', sep=',', header=0, index_col=0)\ndata.head()","e7139104":"print(\"The number of rows is {} and the number of columns is {}\".format(data.shape[0], data.shape[1]))\nprint(\"---------------------------------------------------------------\")\nprint(data.info(verbose=True))\n","505b76ae":"data.duplicated().any()","c36a004f":"data.drop(columns=['is_exact_address_hidden', 'street_name', 'street_number', 'is_rent_price_known', 'is_buy_price_known', 'rent_price'], inplace=True)\n#Drop columns with missing values in every row\ndata.dropna(axis=1, how='all', inplace=True)\nprint(\"The new number of columns is {}\".format(data.shape[1]))","bd7e5026":"corr = data.iloc[:,1:].corr()\nf, ax = plt.subplots(figsize=(11, 9))\nsns.heatmap(corr ,annot=True, fmt='.1g',center=0) \nplt.show()","6c72addd":"y = data['buy_price']\nplt.figure(1); plt.title('Johnson SU')\nsns.distplot(y, kde=False, fit=stats.johnsonsu)\nplt.figure(2); plt.title('Normal')\nsns.distplot(y, kde=False, fit=stats.norm)\nplt.figure(3); plt.title('Log Normal')\nsns.distplot(y, kde=False, fit=stats.lognorm)\nplt.show()\n","72d98cf6":"fig, ax = plt.subplots(1, 3, figsize=(10,2.5), dpi=100, sharex=True, sharey=True)\n\nax[0].hist(data.sq_mt_built, bins=100, color='b')\nax[0].set_title('Built')\nax[1].hist(data.sq_mt_useful, bins=100, color='g')\nax[1].set_title('Useful')\nax[2].hist(data.sq_mt_allotment, bins=100, color='r')\nax[2].set_title('Allotment')\nplt.show()","68f2a941":"%matplotlib inline\nf, ax = plt.subplots(figsize=(8, 6.5))\n\ndata.boxplot(column=['sq_mt_built', 'sq_mt_useful', 'sq_mt_allotment'])\nplt.show()","c1010a56":"data.agg({'sq_mt_useful': ['min', 'max'], 'sq_mt_built': ['min', 'max'], 'sq_mt_allotment': ['min', 'max']})","3a2fa8c3":"data[['sq_mt_useful', 'sq_mt_built', 'sq_mt_allotment']].describe()","a2287881":"data.query('sq_mt_built<23.0')[['title','sq_mt_built', 'sq_mt_useful', 'n_rooms']]","7488f302":"data.query('sq_mt_useful<15.0')[['title','sq_mt_built', 'sq_mt_useful', 'n_rooms', 'n_bathrooms']]","6a4fbc77":"f, ax = plt.subplots(figsize=(8, 6.5))\n\nsns.scatterplot(data=data, x='buy_price', y='buy_price_by_area', hue='sq_mt_built', palette='crest', ax=ax)\nplt.show()","0f028c7f":"rel_built = data['sq_mt_built'].isnull()\ndata.loc[(rel_built), 'sq_mt_built'] = (data['buy_price'] \/ data['buy_price_by_area'])\n\nprint('The final number of missing values for sq_mt_built is: {}'.format(data.sq_mt_built.isnull().sum()))\n\ndata.drop(columns=[\"sq_mt_useful\"], inplace=True)","4ce9fe7d":"data.house_type_id = data.house_type_id.astype('str')","78e139e3":"allotment_notnull = ((data.sq_mt_allotment.notnull())& (data.house_type_id.str.contains('Casa'))).sum()\nprint(\"The number of houses with no empty values in 'sq_mt_allotment' is {} from a total of 1432 no null values\".format(allotment_notnull))","224ea3c9":"data[(data.sq_mt_allotment.notnull())& (~data.house_type_id.str.contains('Casa'))][['title', 'sq_mt_built', 'sq_mt_allotment', 'n_floors', 'house_type_id']]","a822c635":"data['sq_mt_allotment'].plot.hist(bins=40)\nplt.show()","8c57d26c":"print(\"Number of houses with less than 6 m\u00b2: {}\".format(data.query('sq_mt_allotment<6').shape[0]))\nprint(\"Number of houses between 4 y 10 m\u00b2: {}\".format(data.query('4<sq_mt_allotment<10').shape[0]))\nprint(\"Number of houses between 9 y 15 m\u00b2: {}\".format(data.query('9<sq_mt_allotment<15').shape[0]))\nprint(\"Number of houses between 15 y 20 m\u00b2: {}\".format(data.query('15<sq_mt_allotment<20.0').shape[0]))\nprint(\"Number of houses between 19 y 25 m\u00b2: {}\".format(data.query('19<sq_mt_allotment<25').shape[0]))\nprint(\"Number of houses between 29 y 35 m\u00b2: {}\".format(data.query('29<sq_mt_allotment<35').shape[0]))","a85faceb":"data.query('sq_mt_allotment<6')[['title', 'subtitle', 'sq_mt_built', 'n_rooms', 'n_bathrooms', 'n_floors', 'sq_mt_allotment', 'buy_price']].head()","601161aa":"rel_allotment1 = (data['sq_mt_allotment'] <10)\ndata.loc[(rel_allotment1), 'sq_mt_allotment'] = (data['sq_mt_allotment'] * 1000)","5af29c1c":"rel_allotment2 = (data['sq_mt_allotment'] <30) & (data['buy_price'] > 1000000)\ndata.loc[(rel_allotment2), 'sq_mt_allotment'] = (data['sq_mt_allotment'] * 1000)","0c6a8260":"print(data.sq_mt_allotment.describe())\ndata.query('sq_mt_allotment<30')[['title', 'subtitle', 'sq_mt_built', 'n_rooms', 'n_bathrooms', 'n_floors', 'sq_mt_allotment', 'buy_price']].head()","4f6db6ab":"data['sq_mt_allotment'] = data['sq_mt_allotment'].fillna(0)\nprint(\"Number of missing values in 'sq_mt_allotment': {}\".format(data.sq_mt_allotment.isnull().sum()))","90b80d24":"data.house_type_id.value_counts() ","1f953f63":"print(data[(data.title.str.contains('Estudio')) & (data.house_type_id.str.contains('nan'))].shape[0])\nrel_housetype = ((data.title.str.contains('Estudio')) & (data.house_type_id.str.contains('nan')))","7d9ca738":"data.loc[(rel_housetype), 'house_type_id'] = \"HouseType 3: Estudio\"\n\ndata.drop(index=[7578, 8400, 8423], inplace=True)","ebe04433":"data[(data.house_type_id.str.contains('Estudio') & (data.n_rooms == 0))].shape[0]","6a9b8020":"rel_estudios = (data.house_type_id.str.contains('Estudio') & (data.n_rooms > 0))\ndata[rel_estudios]","160d7b18":"data.loc[(rel_estudios), 'house_type_id'] = \"HouseType 1: Pisos\"","a133fe60":"print(\"Data on 'Estudios'\", data.loc[data.house_type_id.str.contains('Estudio')][['sq_mt_built', 'buy_price']].describe(), sep=\"\\n\") \nprint(\"Data on 'Pisos' flats\", data.loc[data.house_type_id.str.contains('Piso')][['sq_mt_built', 'buy_price']].describe(), sep=\"\\n\")","4812e4f8":"data[(data.house_type_id.str.contains('Estudio')) & (data.floor == 'Bajo') & (data.sq_mt_built > 100)][['title', 'subtitle', 'sq_mt_built', \n                                                                                                        'n_bathrooms', 'buy_price']].sort_values(by='sq_mt_built')","460fe04e":"f, ax = plt.subplots(figsize=(9, 6))\n\nsns.stripplot(y='house_type_id', x='buy_price', data=data, ax=ax)\nplt.show()","1a78b7c5":"f, ax = plt.subplots(figsize=(8, 6.5))\n\nsns.scatterplot(data=data, x='n_rooms', y='buy_price', hue='house_type_id', style='house_type_id', palette='crest', ax=ax)\nplt.show()","6ea386b4":"data.n_rooms.value_counts()","d6e766ed":"rel_noestudios = (data.n_rooms == 0) & (~data.house_type_id.str.contains('Estudio'))\ndata.loc[(rel_noestudios)]['house_type_id'].value_counts()","655cd09f":"rel_casa_norooms = data.loc[(rel_noestudios) & (data.house_type_id == \"HouseType 2: Casa o chalet\")]\nrel_casa_norooms","1ed70447":"data[(data.subtitle.str.contains('Fuencarral')) & (data.title.str.contains('Casa', 'independiente')) & (250 < data.sq_mt_built) & \n     (data.sq_mt_built < 350)]","bb81813e":"data.loc[9347,'n_rooms'] = 4\ndata.loc[9347,'n_bathrooms'] = 3","23dc7374":"data[(data.title.str.contains('pareado')) & (700 < data.sq_mt_built) & (data.sq_mt_built < 800)]","0f7f14ab":"#We'll use the median for all three.\ndata.loc[14045, 'n_rooms'] = 6\ndata.loc[14045, 'n_bathrooms'] = 7\ndata.loc[14045, 'n_floors'] = 4","f2981a10":"rel_atico_norooms = data.loc[(rel_noestudios) & (data.house_type_id == \"HouseType 5: \u00c1ticos\")]\nrel_atico_norooms","42a82765":"data[(data.title.str.contains('\u00c1tico')) & (data.sq_mt_built < 60)]['n_rooms'].value_counts()","c8c1b525":"rel_pisos_norooms = data.loc[(rel_noestudios) & (data.house_type_id == \"HouseType 1: Pisos\")]\nrel_pisos_norooms","fb0f37f1":"rel_duplex_norooms = data.loc[(rel_noestudios) & (data.house_type_id == \"HouseType 4: D\u00faplex\")]\nrel_duplex_norooms","e9c57b8e":"f, ax = plt.subplots(figsize=(8, 6.5))\n\nsns.scatterplot(data=data, x='n_bathrooms', y='buy_price', hue='house_type_id', style='house_type_id', palette='crest', ax=ax)\nplt.show()","8542a178":"data.n_bathrooms.value_counts()","6ed2eb47":"data.loc[data.n_bathrooms.isnull(),['title', 'subtitle','sq_mt_built', 'n_rooms','n_floors', 'floor', 'buy_price', 'house_type_id']]","4933c811":"data[data.house_type_id.str.contains('Piso') | data.house_type_id.str.contains('Estudio') | \n     data.house_type_id.str.contains('D\u00faplex')].groupby(['house_type_id', 'n_bathrooms']).agg({'n_bathrooms': ['count']}).unstack()","3f04af59":"def fill_missing(column_to_change, column_ref, **kwargs):\n    '''Fill missing values in a column by grouping them to categories in another column.\n       Parameters: column to change; column used as reference; dictionary with pairs category:new_value\n       Returns: Nothing, the changes are done in place. Outputs progress.'''\n    \n    for type_house, new_number in kwargs.items():\n        #Select the null rows to change of a especific category\n        rel_no = (data[column_ref].str.contains(type_house)) & (data[column_to_change].isnull())\n        #Apply the new value\n        data.loc[(rel_no), column_to_change] = new_number\n        print('Done ' + type_house)","6fbfd8fa":"bathrooms_data = {'D\u00faplex': 2, 'Piso': 1, 'Estudio': 1}\nfill_missing('n_bathrooms', 'house_type_id', **bathrooms_data)","4d9451a3":"#Finally, we change the type\ndata = data.astype({'n_bathrooms' : 'int64'})","42ce1ca0":"print(data.n_floors.notnull().sum())\ndata[(data.n_floors.notnull())]['house_type_id'].value_counts()","f7680f95":"floors_data = {'D\u00faplex': 2, 'Piso': 1, 'Estudio': 1, '\u00c1tico': 1}\nfill_missing('n_floors', 'house_type_id', **floors_data)","b94b7d13":"data[(data.n_floors.isnull())]['house_type_id'].value_counts()","c90e210c":"print(\"Data from houses without number of floors: \")\nprint(data.loc[data.n_floors.isnull(),['sq_mt_built', 'n_rooms', 'n_bathrooms', 'sq_mt_allotment', 'buy_price']].describe())\nprint(\"Data from the rest of the houses: \")\nprint(data.loc[data.n_floors.notnull() & data.house_type_id.str.contains('Casa'),['sq_mt_built', 'n_rooms', 'n_bathrooms', 'sq_mt_allotment', 'n_floors',\n                                                                                  'buy_price']].describe())\nprint(\"Number of floors: \")\nfloor_number = data[(data.n_floors.notnull()) & (data.house_type_id.str.contains('Casa'))]['n_floors'].value_counts()\nprint(floor_number)","5db6ab2a":"print(\"Houses without number of floors\")\ndata[data.n_floors.isnull()].groupby('n_rooms').agg({'sq_mt_built': ['min','max', 'mean'], 'id':'count'})","98d09f63":"print(\"Houses with number of floors\")\ndata[(data.n_floors.notnull()) & (data.house_type_id.str.contains('Casa'))].groupby(['n_floors', 'n_rooms']).agg({'sq_mt_built': ['min','max', 'mean'], \n                                                                                                                  'id':'count'})","053273af":"def fill_nfloors(column_to_change, column_ref, **kwargs):\n    '''Fill number of floors' column grouping them by number of rooms.\n       Parameters: column to change; column used as reference; dictionary with pairs number_of_rooms: number_of_floors\n       Return: Nothing, changes are done on site. Output progress.'''\n    \n    for nrooms, new_number in kwargs.items():\n        #Select null rows with correct number of rooms\n        rel_no = (data[column_ref] == int(nrooms)) & (data[column_to_change].isnull())\n        #Apply new number of floors\n        data.loc[(rel_no), column_to_change] = new_number\n        print('Done ' + nrooms)","97ae8147":"n_floors_data = {'1':2, '2':2, '3':3, '4':3, '5':4, '6':4, '7':4, '8':4, '9':4, '10':4, '11':4, '12':4, '13':4, '18':4}\nfill_nfloors('n_floors', 'n_rooms', **n_floors_data)","f1b9ea3c":"data = data.astype({'n_floors' : 'int64'})","cae7914a":"print(\"Number of null entries: {}\".format(data.floor.isnull().sum()))\nprint(\"---------Types of floors-----------\")\nprint(data.floor.value_counts())","ed5c5314":"print(data.loc[(data.floor.notnull()) & (data.floor.str.contains('S\u00f3tano$')), ['sq_mt_built', 'n_rooms', 'n_bathrooms', 'buy_price']].describe())\nprint(data.loc[(data.floor.notnull()) & (data.floor.str.contains('S\u00f3tano interior')), ['sq_mt_built', 'n_rooms', 'n_bathrooms', 'buy_price']].describe())\nprint(data.loc[(data.floor.notnull()) & (data.floor.str.contains('S\u00f3tano exterior')), ['sq_mt_built', 'n_rooms', 'n_bathrooms', 'buy_price']].describe())","80a25e48":"data.floor.replace({'Bajo': -1,'Entreplanta exterior': 0, 'Entreplanta interior': 0, 'Entreplanta' : 0, 'Semi-s\u00f3tano exterior' : -2, 'Semi-s\u00f3tano interior': -2,\n                   'Semi-s\u00f3tano': -2, 'S\u00f3tano interior' : -3, 'S\u00f3tano' : -3, 'S\u00f3tano exterior': -3}, inplace=True)","e023220a":"#Let's check the missing values.\nprint(\"Not null values: \")\nprint(data.loc[(data.floor.notnull()),'house_type_id'].value_counts())\nprint(\"Null values: \")\nprint(data.loc[(data.floor.isnull()),'house_type_id'].value_counts())","efa283ca":"def check_values(column_ref, house_type):\n    '''Find out how many unique values each house's category has in a column.\n       Parameters: column to check; type of house\n       Returns: a Series with the unique values for a house's category'''\n    \n    return data.loc[(data[column_ref].notnull()) & (data.house_type_id.str.contains(house_type)), column_ref].value_counts()","2802b182":"check_values('floor', 'Estudio')","efdb9d65":"floor_heigth = {'\u00c1ticos': 10, 'Casa': -5, 'Estudio': -1}","b66a0f42":"check_values('floor', 'D\u00faplex')","9616d436":"#We'll give the most common value\nfloor_heigth['D\u00faplex'] = -1\nfill_missing('floor', 'house_type_id', **floor_heigth)","c1c71283":"pisos_floor = check_values('floor', 'Piso')\npisos_floor_total = pisos_floor.sum()\npisos_floor","69f76c3c":"floor1 = pisos_floor.loc['1']\/pisos_floor_total*100\nfloor2 = pisos_floor.loc['2']\/pisos_floor_total*100\nfloor3 = pisos_floor.loc['3']\/pisos_floor_total*100\nfloor4 = pisos_floor.loc['4']\/pisos_floor_total*100\nfloor_total = floor1 + floor2 + floor3 + floor4\n\n#Floors 1, 2, 3 and 4 contain 72% of all flats.","cd5e5aa3":"rng = np.random.default_rng()\n\ndef random_number(options):\n    '''Chose an integer among the ones given based on their probalities\n       Parameters: list of integers.\n       Return: An integer'''\n    \n    return rng.choice(options, p=[floor1\/floor_total,floor2\/floor_total,floor3\/floor_total,floor4\/floor_total])\n\n#Call the function, receive an integer and apply it to a null row in floor's column\ndata.floor.mask(data.floor.isnull(), random_number([1,2,3,4]), inplace=True)\n\ndata = data.astype({'floor' : 'int64'})","7042ff22":"data.drop(columns=['is_floor_under'], inplace=True)","269715ce":"data.neighborhood_id.iloc[0]","35bb909c":"data['neighborhood'] = data.neighborhood_id.str.extract('(\\d+):', expand=True)\ndata['district'] = data.neighborhood_id.str.extract('District (\\d+)', expand=True)\n\ndata.drop(columns=['neighborhood_id'], inplace=True)\n\ndata = data.astype({'neighborhood' : 'int64'})\ndata = data.astype({'district' : 'int64'})","b12098cd":"data.drop(columns=['operation', 'buy_price_by_area'], inplace=True)","a50fa441":"data.house_type_id.unique()","9e50badf":"#We only need the number so:\ndata['house_type'] = data.house_type_id.str.extract('(\\d)', expand=True)\n\ndata.drop(columns=['house_type_id'], inplace=True)\n\ndata = data.astype({'house_type' : 'int64'})","760119fd":"data.drop(columns=['is_new_development', 'built_year'], inplace=True)","92806436":"data.drop(columns=['has_central_heating', 'has_individual_heating'], inplace=True)","3e347944":"data[data.has_lift.notnull()].groupby('house_type').house_type.count()","7b5010e0":"rel_casa_nolift = (data.house_type == 2)\ndata.loc[(rel_casa_nolift), 'has_lift'] = False","a510614d":"data[data.has_lift.isnull()].groupby('house_type').house_type.count()","cccda73f":"data.has_lift.fillna(False, inplace=True)","3e7fbe67":"f, ax = plt.subplots(figsize=(8, 6.5))\n\nsns.violinplot(x='house_type', y='buy_price', hue='has_lift', data=data, split=True, scale='count')\nax.set_ylim(0,3000000)\nplt.title(\"House type vs Price with lift\", size=20)\nplt.show()","6a77555e":"data[data.is_exterior.isnull()].groupby('house_type').house_type.count()","43d02634":"rel_casa_exterior = (data.house_type == 2)\ndata.loc[(rel_casa_exterior), 'is_exterior'] = True","54f6fbde":"rng = np.random.default_rng()\n\ndef random_number(options, prob):\n    '''Select a value based on its given probabilities\n       Parameters: a list of values; a list of their probabilities\n       Returns: a value'''\n    \n    #select an option based on their probabilities\n    return rng.choice(options, p=[prob[1],prob[0]])","417fe64e":"def ext_prob(house_type):\n    '''Fill the null values in the \"exterior\" column according to the probabilites of each house's type\n       Parameters: the house's type\n       Returns: Nothing, changes are done in place'''\n    \n    #Calculate the number of trues and falses for houses of a specific type\n    ext0, ext1 = data[(data.is_exterior.notnull()) & (data.house_type == house_type)].groupby('is_exterior').is_exterior.count()\n    #Obtain the total number of houses of this category without null values\n    ex_total = ext0 + ext1\n    #Find out houses with null values in 'exterior'\n    mask_ex = (data.is_exterior.isnull()) & (data.house_type == house_type)\n    #Select an option, True or False, according to the probabilities of this house's type and apply it to the null ones\n    data.is_exterior.mask(mask_ex, random_number([True, False], [ext1\/ex_total, ext0\/ex_total]), inplace=True) ","01ecd579":"exterior_null = [1,3,4,5]\nmap(ext_prob, exterior_null)","9975a80a":"data = data.astype({'is_exterior' : 'bool'})","55cd6845":"columns_todrop = ['has_ac', 'has_fitted_wardrobes', 'has_garden', 'has_pool','has_terrace', 'has_balcony', 'has_storage_room', 'is_accessible', 'has_green_zones',\n                 'is_parking_included_in_price', 'parking_price','is_orientation_north', 'is_orientation_west', 'is_orientation_south', 'is_orientation_east']\n\ndata.drop(columns=columns_todrop, inplace=True)","cff94d88":"data.energy_certificate.value_counts()","d34fe402":"data.energy_certificate.replace({'en tr\u00e1mite': 0,'no indicado': 0, 'inmueble exento': 0, 'G' : 1, 'F' : 2, 'E': 3, 'D': 4, 'C':5, 'B':6, 'A':7}, inplace=True)","327b9552":"data.drop(columns=['title', 'subtitle', 'raw_address'], inplace=True)","7e560822":"print(data.info(verbose=True))","750d0732":"corr = data.iloc[:,1:].corr()\nf, ax = plt.subplots(figsize=(11, 9))\nsns.heatmap(corr ,annot=True, fmt='.1g',center=0) \nplt.show()","462d6c53":"corr = data.iloc[:,1:].corr(\"spearman\")\nf, ax = plt.subplots(figsize=(11, 9))\nsns.heatmap(corr ,annot=True, fmt='.1g',center=0) \nplt.show()","b7c7eb66":"data.to_csv('madrid_houses_clean.csv')","acc32e3d":"We have a few houses left with no values, so we'll give them False, too.","ad3e4230":"Let's take a closer look at the limits of these three atributes.","43fef98b":"Let's find out the size of the table and learn a bit about the columns and their elements.","f80826ae":"Let's check the structure of the file","55825df2":"We'll use the median for number of rooms, because the mode, 5, may be a bit too much. For bathrooms, we'll use the mode.","86178f22":"Let's take a look at the correlation between numerical features, knowing that our target is 'buy_price'.","69597eea":"We are left with 502 houses without number of floors. Let's take a look at them.","7c8564bf":"We'll give 'Aticos' the highest number: 10. We don't know the exact height but to point out that it's the highest.\n\nA random value for detached houses because height doesn't matter there: -5\n\nLet's check the others:","37012e1a":"There is no significant difference between basement flats and the same happens for the other two. \n\nWe are going to group together the same levels and turn them all into numbers.","b2ac2524":"## Now, we'll analyse the columns.\n\n'Title' includes the full address and the type (piso, casa,...) and 'subtitle' describes the area in Madrid, both with no missing values. We'll leave them like that for the moment while we study the rest of the data.\n\n'sq_mt_built' and 'sq_mt_useful' are two ways of measuring the size of a house. They are equivalent and 'sq_mt_built' has fewer missing values (126 vs over 13000). The first option would be to drop the second column, but let's check the three atributes related to size.","5f9cb118":"There's something wrong here. It's very weird for detached houses or duplex not to have rooms.","0e4ca55a":"## is_exterior\n\nLet's do the same with 'is_exterior'","a054d089":"Now we can see that the smallest value is 10 and the biggest is 21.000 m\u00b2. (Checking real state web pages, I found houses with these characteristics)\n\nSize and price of the houses still under 30, justify not changing 'sq_mt_allotment'\n\nFor the rest of the houses, we'll replace the missing value NaN with 0. Because they don't have gardens of any kind.","b8c0bcc5":"'is_exact_address_hidden' is not necessary as well as 'street_name' and 'street_number'. We already have that info in 'raw_address'.\n\n'rent_price' is not usefull to this analysis because we'll be focusing on buying.\n\n'is_rent_price_known' and 'is_buy_price_known' don't give any interesting information because they only have one value.\n\nWe'll eliminate them, as well as columns filled with missing values.\n","0d26deb0":"## Neighborhood_id","2057bb47":"Wow! There is something weird here. Houses with 1 m\u00b2 useful and 1 m\u00b2 allotment?","08712f11":"## floor - height\nLet's check the 'floor' column.","7cb430cc":"No, there are 3 houses with at least one room. Let's see them.","9cca1e39":"Saving the dataframe to a file was the last step. Now we can use it in other notebooks.\n\nMy next step will be to explore a bit more about this data placing each house on a map. This will allow us to see better the relationships between variables and how they are scattered among Madrid.\n\nStay tuned!","d878b8f2":"Calculating the spearman correlation shows small differences. While the first one searches for linear relationships, this one looks for monotonic relationships.","448d13e9":"We'll replace letters with numbers.","7be35e47":"In most cases, prices are under 300000\u20ac.\n\nLet's confirm that we don't have any missing values for 'built' and we will get rid of 'sq_mt_useful':","d86fdd27":"## n_rooms\n\nLet's continue with the number of rooms and bathrooms.\n\n'n_rooms' doesn't have any missing values and it's of type integer.","5e51a862":"Let's change this three into flats 'Pisos'.","c5a1fd97":"'neighborhood_id' consists of a number, a name and the mean price by neighborhood. Also, the district's number and its name.\n\nWe can use this to help locate the houses but we'll only keep the numbers and separate them in two new columns.","c787aaca":"After studying both statistics these are the actions we'll take:\n* Those with just one room will get 2 floors. There are more houses with 1 room and 2 floors.\n* Those with 2 rooms will get also 2 floors. They fit better.\n* Those with 3 rooms will get 3 floors. It's the mode.\n* Those with 4 rooms will get 3 floors too. Again, it's the mode and the means are similar.\n* Those with 5 rooms will get 4 floors. Folowing the mode.\n* The rest will get 4 floors. It's the most common number.\n\nWe'll define a new function to fill them.","4c4ce506":"## First impressions:\nThere are no significant negative correlations, they are all positive or 0.\n\nThere's a perfect correlation between 'sq_mt_built' and 'sq_mt_useful', which makes sense because they are two similar ways of measuring a house.\n\n'buy_price' is positive correlated with these two attributes, which shows that the bigger the house, the more expensive.\n\nHowever 'buy_price' has no correlation (-0.03) with 'sq_mt_allotment' which is mainly used for houses, including garden, pool, ..., the whole lot. Although there are very few non null values.\n\n'buy_price' is also correlated with the number of rooms and bathrooms, which are correlated to the flat's size.","5fc19528":"Square meter allotment is a challenge because it's difficult to tell the right size for many houses. \n\nThe histogram shows almost 500 houses with very small plots. Checking in more detail, we find that the majority are between 1 and 5 square meters, which makes no sense.","cc086497":"And, finally, this is the result. 16 columns with no missing values.","645ac7ee":"# Introduction\n\nWe are going to explore 'Madrid real estate market' dataset. The goal is to select and clean the appropriate features for a machine learning project, namely predicting the price of a house. \n\nWe will learn techniques for dealing with missing values and preparing data for the algorithm.\n\nThis is a long notebook starting with over 50 attributes.","632c7948":"There are three types of names for ground, basement and subbasement levels. Normally, we may expect some price's difference from an exterior anything to an interior one. \n\nLet's see if this is true.","158fe032":"Looking at real state web pages it's possible to have big flats with no rooms. They are normally lofts, transformed recently or in need of repairs. So we'll leave them like that, with no rooms.","3a3e5581":"The next columns, 'operation' and 'buy_price_by_area' are not needed. We'll only keep buy_price.\n\nrent_price could be useful for another project!","a45d01ba":"## has_lift","b5d251b6":"The majority of missing values belong to flats besides 1 duplex and 2 studies.\n\nLet's see what is the most common number for each type.","6cbe79a2":"It looks like the numbers were cut after 1.000. Let's see the smallest values of m\u00b2 built","398275d6":"Surprise, surprise. A 300 m\u00b2 studio! This is weird. Let's take a look.","0e2c3908":"The correlation between rooms and price was 0.6. We can see this value explained in the plot. Increasing the number of rooms, increase the price but only up to a point. After 5 there isn't a significant increase.\n\nHouse types 2 and 5 with 4 to 10 rooms are the most expensive.","9a3d2e1a":"Let's check similar houses in Fuencarral to impute the missing values.","affb942d":"Boxplots show more information although it may be more difficult to see. Let's take it one step at a time.\n\n* m\u00b2 built and m\u00b2 useful boxes are shorter, which means that their values are grouped together (their standard deviations are smaller), with the median closer to the first quartile. We saw this in the previous plot with their high and narrow peaks.\n* However, m\u00b2 allotment's box is bigger, showing that its values are more scattered (the standard deviation is bigger) and the median is closer to the third quartile.\n* This also shows that the majority of the values for m\u00b2 built and m\u00b2 useful are between 100 and almost 200 m\u00b2 (more or less). While the majority of the values for m\u00b2 allotment are in a wider range, between 0 and almost 400 m\u00b2.\n* The longer upper whisker for m\u00b2 allotment shows a very long right tail.\n* All of them have outliers (the circles). These are values beyond 1.5 times the distance between the third and the first quartile. \n* All of this shows (for the first two) that while the majority of the houses are small (75% are less than 200 m\u00b2), there are still many items (25%) much much bigger.","2e2663bf":"## n_floors\n\nNext one: 'n_floors' is useful when it's a house not a flat.","22f7d49e":"Comparing both groups we can see that they have similar values. So we can assume that the number of floors would be similar.\n\nChecking the number of floors for the second group we can see that mean and median are 3. Investigating a bit more, we can see that the most frequent number is 4.\n\nHowever, we can't give 3 floors to a 30 m\u00b2 built house.\n\nWe'll need more than their size because values overlapped, so we'll add rooms and check them in more detail.","44c1b6c2":"'is_new_development' and 'built_year are a bit confusing because we don't know since when a house is considered  new. And 'built_year' has some values like 2022, so we'll drop them.","800e814b":"It seems weird for a house of over 500 m\u00b2 and over a million euros to have 3 m\u00b2 of garden\/land. So we may hypothesize that plots over a thousand meters lost everything after the point, like it happened with square meters build. \n\nHowever the solution here is not easy, because we may have big, expensive houses with over 20.000 m\u00b2 plots and other ones with a small inner courtyard.\n\nSo, in this case, we'll apply two strategies:\n\n1. Houses with less than 10 m\u00b2 allotment: multiply the size by 1000.\n2. Houses between 10 and 30 m\u00b2 allotment: we need two parameters, the plot's size and the prize of the house.\n\nWe'll put the limit in 30 m\u00b2 because there aren't houses over 30 m\u00b2 allotment expensive enough to have 30.000, 40.000 or more meters.","8fe76d22":"'is_floor_under' is true when it's a ground floor or basement. It's not necessary. We already have that information in 'floor'.\n","e337c62b":"'is_renewal_needed' is a basic feature that will impact the final price.\n\nWe'll keep 'has_parking' because it always afects the price and remove 'is_parking_included_in_price' and 'parking_price' because they have too many missing values and don't add anything.","92d10bb2":"All type 2 houses 'Casa o chalet' have missing values. This is fine because this houses don't have lifts (normally), so we'll give them a False value.","cbe2dc82":"## house_type_id\n\nLet's deal with 'house_type_id' to add a new class we'll need.","a063776a":"There are no hints about this missing values. So we'll assing the values according to their proportions.\n\nWe'll define a function to fill the null 'exterior' cells with a random option.\n\nWe also define a slight different version of the previous function 'randon_number'.","a6b5c95e":"So 388 out of these 391 missing values contain the word 'Estudio' in 'title'. Let's change the value adding a new type: \"Housetype 3: Estudio\".\n\nThe other 3 are the ones we found earlier and we can eliminate.","17f2a47e":"All of them, except one, are under 65. They are small flats with one bathroom.\n\nLet's check all of this kind.","69b51427":"There are no others 'chalets' in Chamartin as big as this one, so we'll go for size instead of location.","eec38681":"Let's see what has happened to the correlation matrix","2fed0de5":"We are going to try something different here as the proportions aren't very different.\n\nInstead of chosing the most common value, we are going to select randomly among the 4 most common.","f5d8e0fe":"## n_bathrooms\n\nLet's check the bathrooms. 'n_bathrooms' is missing a few values and it's of type float which makes no sense.\n","6eb0a46c":"Let's check if all these 'Estudios' have 0 rooms:","1674004c":"Aha! There are two types of flats in this category: the small ones and the big ones, which may come from a previous store transformed into an appartment. All of them with the same number of bathrooms.\n\nFinally, this is the distributions of houses' types versus prices.","92d4f657":"Three houses with 24 rooms. Wow!\n\nThere are 439 houses with no rooms which should be 'Estudios' but we only had 385 'Estudios'.\n\nLet's check the rest of these houses with no rooms.","7ef9d70c":"Now every single house has it's size. Next one:\n\n## sq_mt_allotment\n\nLet's see the relationship between 'sq_mt_allotment' and the house's type:","5f119848":"We'll asign 1 to flats, 2 to duplex and 1 to studies.\n\nWe'll define a function to fill missing values of every house's type.","19ccb1ee":"Which means that this colum, m\u00b2 allotment, is almost exclusively for detached houses. Let's see the other three.","2fb53751":"The first line contains the columns' names. The first column, with no name, is the index. Columns are separated by commas. We include all this information when reading the file and we take a look at the data.","265665e4":"There are certainly weird relationships here between these two columns with very small numbers for m\u00b2 useful. But the values for houses ('Casa o chalet') seeing the number of rooms and bathrooms, may be in the range of thousands. \n\nWe can use two other atributes to find the right size: 'buy_price' and 'buy_price_by_area'. Both with no missing values.","b85a06da":"## Last impressions\n\nThere's more colour in this plot, with more positive and negative correlations than before.\n\n'buy_price' keeps the same values for m\u00b2 built, number of rooms and bathrooms. Number of floors and m\u00b2 allotment increase their correlations, although they aren't significant enough.\n\nFlat's height has a -0.2 value. Maybe explained by giving a -5 to 'Casas' category. \n\nThe rest of the columns have very small values, showing a small direct effect on our target variable and among them. \n\nHowever, houses' prices depend on more than linear correlations (or so I hypothesize), but testing that will have to wait for another notebook.\n","9d387d29":"## energy_certificate\n\n'energy_certificate' is compulsory in Spain for buying a flat since several years ago.","49362367":"We have worked with 'house_type_id' many times, but let's see the elements again.","6f40c27b":"m\u00b2 built and m\u00b2 useful have similar right skewed distributions with many small houses. It's more difficult to see the shape for m\u00b2 allotment. \n\nLet's try another type of plot.","3d2c278d":"We have 21742 rows (houses) and 57 columns (attributes). Only 13 columns don't have missing values and 10 columns *only* have missing values. We will get rid of these in the first place. We'll have to analyse the rest.\n\nAs data types, we have object, boolean and numbers. Reading the names of the columns, it looks like sometimes the type should be different. Like all the columns with the word 'has_*something*' are object, and they should be boolean. We'll look into that too.\n\nLet's check if there are duplicates.","a12e0c8f":"Considering their size, these could be 'Estudios' with no rooms on the top floor of a building. We'll leave them like that.","3090e9e4":"The only ones with values are houses. We'll have to add 1 floor for 'Estudios', top floors and flats, and 2 for duplex.","9760e22f":"It's a country house and two fields.\n\nThese three rows could be dropped if there are no more elements of the same type. We'll check 'house_type_id' later.","dcdd80c1":"Some look like 'Estudios' on the ground floor, others are small... \n\nIt's difficult to tell if these values are wrong or not, so for the moment, we'll leave them like that.","a5bf3b8c":"The next 13 columns are boolean. They describe interesting features but many of them have more than 50% of missing values. This is impossible to fill. We'll eliminate them except 'has_lift' and 'is_exterior' which have less missing values. \n\nThe type of heating (central or individual) is a bit irrelevant so we'll eliminate them too. \n","d06443b6":"The first one is weird. A 16 m\u00b2 flat with 3 rooms, but the rest make sense. They are small flats with no rooms (Estudio) or just one room.\n\nLet's see the smallest values for square meter useful:"}}