{"cell_type":{"634efae6":"code","768b4122":"code","d1debdc2":"code","08b7b262":"code","8ee958d1":"code","01145835":"code","6bca65f8":"code","74663b27":"code","fa47c916":"code","dd555e14":"code","0b4c88d7":"code","e5ba5f75":"code","cd315bc4":"code","48f212cc":"code","deffe2aa":"code","95ec355b":"code","875fa230":"code","8105bc69":"code","96a35c67":"code","a0f86b38":"code","7b78e6d8":"code","13c7d2d6":"code","f1dc3832":"code","8e292086":"code","ed1d754b":"code","cb86976c":"code","84e92f81":"code","7281c77a":"markdown","71c76cbe":"markdown","2300bb24":"markdown","a02ddf06":"markdown","a9637c8f":"markdown","82fdd73f":"markdown","a880d4bf":"markdown","38d81004":"markdown","7c2ff1c8":"markdown","8b9b0547":"markdown","622ac8ec":"markdown","cb51207a":"markdown","51b5c72a":"markdown","7eb337dd":"markdown"},"source":{"634efae6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","768b4122":"df_train = pd.read_csv('\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_test.csv')\ndf_submit = pd.read_csv('\/kaggle\/input\/covid19-local-us-ca-forecasting-week-1\/ca_submission.csv')\ndf_train.head()","d1debdc2":"df_train.info()","08b7b262":"print(df_train['Province\/State'].unique())\nprint(df_train['Country\/Region'].unique())","8ee958d1":"import matplotlib.pyplot as plt\nplt.figure(figsize=(14,6))\nplt.hist(df_train['ConfirmedCases'],bins=10,color='green')\nplt.xlabel('Confirmed Cases')\nplt.ylabel('Count')\nplt.title('Count of Confirmed Cases')","01145835":"import matplotlib.pyplot as plt\nplt.figure(figsize=(15,10))\nplt.plot(df_train['Fatalities'])\nplt.xlabel('Fatalities')\nplt.ylabel('Count')\nplt.title('Graph of Fatalities ')","6bca65f8":"df_train = df_train[['Date','ConfirmedCases','Fatalities']]\ndf_train.head()","74663b27":"plt.figure(figsize=(15,10))\nsns.barplot(x=df_train['Date'] , y = df_train['ConfirmedCases'])\nplt.xticks(rotation=90)\n","fa47c916":"plt.figure(figsize=(15,10))\nsns.barplot(x=df_train['Date'] , y = df_train['Fatalities'])\nplt.xticks(rotation=90)","dd555e14":"df_train_new = df_train.query('ConfirmedCases > 0')\ndf_train_new","0b4c88d7":"plt.figure(figsize=(15,10))\n#sns.barplot(x=df_train_new['Date'] , y = df_train_new['Fatalities'])\nsns.barplot(x=df_train_new['Date'] , y = df_train_new['ConfirmedCases'])\nplt.xticks(rotation=45)\nplt.title('ConfirmedCases as per Date')","e5ba5f75":"df_train['Date'] = pd.to_datetime(df_train['Date'])\ndf_train.insert(1,'Week',df_train['Date'].dt.week)\ndf_train.insert(2,'Day',df_train['Date'].dt.day)\ndf_train.insert(3,'DayofWeek',df_train['Date'].dt.dayofweek)\ndf_train.insert(4,'DayofYear',df_train['Date'].dt.dayofyear)","cd315bc4":"df_train","48f212cc":"from sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import BayesianRidge \nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn.model_selection import train_test_split","deffe2aa":"X = df_train.drop(['Date', 'ConfirmedCases', 'Fatalities'], axis=1)\ny = df_train[['ConfirmedCases', 'Fatalities']]","95ec355b":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)","875fa230":"y_train.head()","8105bc69":"#Function that predicts the scores of models.\ndef predict_scores(reg_alg):\n    m = reg_alg()\n    m.fit(X_train, y_train['ConfirmedCases'])\n    y_pred = m.predict(X_test)\n    m_r = r2_score(y_test['ConfirmedCases'], y_pred)\n    sc_Cases.append(m_r)\n    \n    m.fit(X_train, y_train['Fatalities'])\n    y_pred = m.predict(X_test)\n    m_r2 = r2_score(y_test['Fatalities'], y_pred)\n    sc_Fatalities.append(m_r2)\n\n\n    \nreg_models = [KNeighborsRegressor, LinearRegression, RandomForestRegressor, GradientBoostingRegressor, DecisionTreeRegressor,BayesianRidge]\n\nsc_Cases = []\nsc_Fatalities = []\n\nfor x in reg_models:\n    predict_scores(x)","96a35c67":"sc_Cases","a0f86b38":"sc_Fatalities","7b78e6d8":"models = pd.DataFrame({\n    'Model': ['KNeighborsRegressor', 'LinearRegression', 'RandomForestRegressor', 'GradientBoostingRegressor', 'DecisionTreeRegressor','BayesianRidge' ],\n    'ConfirmedCase_r2': sc_Cases,\n    'Fatalities_r2' : sc_Fatalities\n})\n\nmodels","13c7d2d6":"df_test.head()","f1dc3832":"df_test.info()","8e292086":"df_test = df_test[['ForecastId', 'Date']]\n\ndf_test['Date'] = pd.to_datetime(df_test['Date'])\ndf_test.insert(1,'Week',df_test['Date'].dt.week)\ndf_test.insert(2,'Day',df_test['Date'].dt.day)\ndf_test.insert(3,'DayofWeek',df_test['Date'].dt.dayofweek)\ndf_test.insert(4,'DayofYear',df_test['Date'].dt.dayofyear)\n\ndf_test.head()","ed1d754b":"model1 = RandomForestRegressor()\nmodel1.fit(X_train, y_train['ConfirmedCases'])\n\nmodel2 = RandomForestRegressor()\nmodel2.fit(X_train, y_train['Fatalities'])\n\ndf_test['ConfirmedCases'] = model1.predict(df_test.drop(['Date', 'ForecastId'], axis=1))\ndf_test['Fatalities'] = model2.predict(df_test.drop(['Date', 'ForecastId', 'ConfirmedCases'], axis=1))","cb86976c":"import warnings\nwarnings.filterwarnings('ignore')\ndf_results = df_test[['ForecastId', 'ConfirmedCases', 'Fatalities']] \ndf_results['ConfirmedCases'] = df_results['ConfirmedCases'].astype(int)\ndf_results['Fatalities'] = df_results['Fatalities'].astype(int)\n\ndf_results.head()","84e92f81":"df_results.to_csv('submission.csv', index=False)","7281c77a":"We observe that initially the fatalities were zero as there were no confirmed cases but after that it increases to a vast extent.","71c76cbe":"This bar chart explains us more specifically as only the confirmed date cases are considered. The graph is increasing as the days increase.","2300bb24":"We observe that there were unconfirmed cases so the maximum count is of zero following some cases of confirmation which might have resulted in fatalities later.","a02ddf06":"It's time for using models and fitting our dataset for obtaining the results. We will use few models for the same.","a9637c8f":"Here is our Test set:","82fdd73f":"The above obtained are our final results.","a880d4bf":"Creating and Fitting model(DecisionTreeRegressor,RandomForestRegressor) to test set.","38d81004":"The results obtained are quite good for KNeighborsRegressor , RandomForestRegressor , GradientBoostingRegressor , DecisionTreeRegressor.\nWe can try using DecisionTreeRegressor and RandomForestRegressor on test set.","7c2ff1c8":"As from the previous explanation , the fatalities were observed which also follows an increasing trend.","8b9b0547":"From the above bar graph , we see most of the cases aren't confirmed till 2020-03-08 following that the graph follows an increasing trend. We would later include the dates from which the confirmation cases starts.","622ac8ec":"Adding new columns to the test set. Use the same methodology that was followed for training dataset.","cb51207a":"We will now take into consideration the cases were greater than zero.","51b5c72a":"We see there are no null or missing values in the dataset.","7eb337dd":"This dataset is for the US province California."}}