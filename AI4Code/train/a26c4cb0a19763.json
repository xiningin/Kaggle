{"cell_type":{"3a64c6d5":"code","03d2b10b":"code","391d1120":"code","7f94993c":"code","981ffc68":"code","7a935b19":"code","dea0bc09":"code","4937f8cd":"code","d67ceefa":"code","e8abe35a":"code","cf0da687":"code","99f3cb02":"code","933c390d":"code","dba50f7c":"code","5923f168":"code","35b92ca4":"code","9ac2fd2b":"code","5aba8018":"code","380d133e":"code","fad22926":"code","12d225f6":"code","9d0143e4":"code","6e2678bd":"code","a8e79de8":"code","0958f031":"code","445876ce":"code","4537f63c":"code","bcea5203":"code","d7e12786":"code","3799bdaa":"code","49292837":"code","8da367e4":"code","1d90b055":"code","85f409cf":"code","b77f0b03":"code","c59c092b":"code","b30895cb":"code","63845c23":"code","7f3a28af":"code","df4ef638":"code","7b4c36f6":"code","8ff30ec0":"code","c448418f":"code","67c28e34":"code","d449ee4e":"code","b6c4ce87":"code","21073f79":"code","cfb0f806":"code","3670bedd":"code","cbc121c5":"code","1692a828":"code","66e5a4b5":"code","2c716169":"code","41f772a2":"code","fcf4212a":"code","65b66eab":"code","0a0e3698":"code","a87560b6":"code","bb87ba7b":"code","66b9e807":"code","f67fdea0":"code","777fe6cf":"code","09d53cbb":"code","a89135d3":"code","1c8b3dec":"code","a4a5a8c7":"code","9459b840":"code","e1334ad3":"code","1bd0dbb1":"code","505b4076":"code","3aa9177e":"code","fb1745b9":"code","6847bca8":"code","3b8b7e46":"code","222c92d3":"code","4df178f6":"code","0d66c573":"code","bbca16a7":"code","c9d979d6":"code","a90189b7":"code","c40ad15f":"code","653c2e95":"code","f280630c":"code","47dbf886":"code","269d5aa2":"code","ccb60a7c":"code","9fc7589d":"code","2f6b67cd":"code","5f9a36aa":"code","2cfbdbfc":"code","73a217a9":"code","6edd8604":"code","9d7d7dc3":"code","066014b9":"code","7503fd91":"code","de7263cd":"code","b2d1ac09":"code","b86e5e6e":"code","753630af":"code","fa3c6a15":"code","71fcbfd1":"code","68a67038":"code","6060645d":"code","c3feaf88":"code","6f09a8de":"code","371e08bd":"code","ba8d068c":"code","97e0ae4a":"code","2607906e":"code","6a5e8e8c":"code","aa89a91e":"code","04dec76d":"code","a5f743cb":"code","a0a788a2":"code","82e2f6ce":"code","9bea6677":"code","ed4c2c49":"code","83aa8dd4":"code","5ae07bf0":"code","fa495e4d":"code","3327c7fa":"code","ccb77e15":"code","763ef60b":"code","95a14a48":"code","8e5b9906":"code","2bf7cf1a":"code","21945c23":"code","38818419":"code","8f8477a3":"code","94e7b710":"code","8b7fde45":"code","8334b65f":"code","2cbeae4c":"code","1a244eae":"code","3426df7b":"code","34d579c1":"code","ae9befe2":"code","3ad90308":"code","598e124a":"code","9457c9e7":"code","2e9a9207":"markdown"},"source":{"3a64c6d5":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","03d2b10b":"import matplotlib.pyplot as plt\nimport seaborn as sns","391d1120":"df_city = pd.read_csv('..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCity.csv')\ndf_city.head()","7f94993c":"uk_cities = df_city[df_city['Country']== 'United Kingdom']\nuk_cities.head()","981ffc68":"uk_cities.shape","7a935b19":"print(uk_cities.City.unique())","dea0bc09":"uk_cities.isnull().sum()","4937f8cd":"uk_data=['London','Glasgow', 'Oxford']","d67ceefa":"df= uk_cities[uk_cities['City'].isin(uk_data)]\ndf.head()","e8abe35a":"df1=df[['dt', 'AverageTemperature']]\ndf1.head()","cf0da687":"df1.columns=['Date', 'Temperature']\ndf1.head()","99f3cb02":"df1['Date']= pd.to_datetime(df1['Date'])","933c390d":"df1.head()","dba50f7c":"df1.isnull().sum()","5923f168":"df1.shape","35b92ca4":"df1['Temperature'].fillna(int(df1['Temperature'].mean()), inplace=True)","9ac2fd2b":"df1.isnull().sum()","5aba8018":"df1.set_index('Date',inplace=True)","380d133e":"df1.head()","fad22926":"import seaborn as sns\n#Check for stationarity. Is it stationary or not\n#Conditions for stationarity\n\n#1. Time series should haave a constant mean.\n#2. Time series should have a constant standard deviation.\n#3. Time series's auto-covariance should not depend on time.\n\n#sns.lineplot(x=df1.index,y=df1['Temperature'])","12d225f6":"from statsmodels.tsa.stattools import adfuller\ntest_result= adfuller(df1['Temperature'])","9d0143e4":"def adfuller_test(temp):\n    result= adfuller(temp)\n    labels= ['ADF Test Statistic','p-value','#Lags Used','Number of Observations Used']\n    for value,label in zip(result,labels):\n         print(label+ ' : ' +str(value))\n   \n    if result[1] <= 0.05:\n        print(\"strong evidence against the null hypothesis(Ho), reject the null hypothesis. Data has no unit root and is stationary\")\n    else:\n        print(\"weak evidence against the null hypothesis(Ho), time series has a unit root, indicating it is stationary\")","6e2678bd":"adfuller_test(df1['Temperature'])","a8e79de8":"df1.head()","0958f031":"df2=df1.copy()","445876ce":"df2.head()","4537f63c":"df2['First_temp_diff']= df2['Temperature']-df2['Temperature'].shift(12)","bcea5203":"df2.head()","d7e12786":"df2.shape","3799bdaa":"df2.isnull().sum()","49292837":"adfuller_test(df2['First_temp_diff'].dropna())","8da367e4":"df2[['First_temp_diff']].plot(figsize=(30,15))","1d90b055":"#To examine if there is a seasonality factor in data or not","85f409cf":"df1['year']= df1.index.year","b77f0b03":"df1['month']= df1.index.month","c59c092b":"df1.head()","b30895cb":"pivot= df1.pivot_table(values= 'Temperature', index='month', columns= 'year' )","63845c23":"pivot","7f3a28af":"pivot.plot(figsize=(20,6))\nplt.legend().remove()\nplt.xlabel('Months')\nplt.ylabel('Temperature')","df4ef638":"#There is seasonality in the data","7b4c36f6":"monthly_seasonality= pivot.mean(axis=1)\nmonthly_seasonality.plot(figsize=(20,6))","8ff30ec0":"#Building Time Series Using Moving Average\n#\ndf2.head()","c448418f":"df2.isnull().sum()","67c28e34":"df2['First_temp_diff'].unique()","d449ee4e":"df2=df2[['First_temp_diff']]\ndf2.dropna(inplace=True)","b6c4ce87":"df2.head()","21073f79":"df2['First_temp_diff'].rolling(window=5).mean()","cfb0f806":"value=pd.DataFrame(df2['First_temp_diff'])","3670bedd":"temp_df=pd.concat([value,df2['First_temp_diff'].rolling(window=5).mean()],axis=1)","cbc121c5":"temp_df.columns=['actual_temp','forecast_temp']\ntemp_df.head()","1692a828":"from sklearn.metrics import mean_squared_error\nMA_mSe= mean_squared_error(temp_df['forecast_temp'][4:],temp_df['actual_temp'][4:])\nMA_mSe","66e5a4b5":"MA_rmSe=np.sqrt(mean_squared_error(temp_df['forecast_temp'][4:],temp_df['actual_temp'][4:]))\nMA_rmSe","2c716169":"from sklearn.metrics import mean_absolute_error\nMA_mAe= mean_absolute_error(temp_df['forecast_temp'][4:],temp_df['actual_temp'][4:])\nMA_mAe","41f772a2":"MA_rmAe=np.sqrt(mean_absolute_error(temp_df['forecast_temp'][4:],temp_df['actual_temp'][4:]))\nMA_rmAe","fcf4212a":"plt.plot(temp_df['forecast_temp'][:100])\nplt.plot(temp_df['actual_temp'][:100],'r')\nplt.legend([\"original\", \"predicted\"], loc =\"lower right\")\nplt.xlabel('Time')\nplt.show()","65b66eab":"from statsmodels.graphics.tsaplots import plot_acf,plot_pacf","0a0e3698":"plot_acf(df2['First_temp_diff'].dropna())","a87560b6":"plot_pacf(df2['First_temp_diff'].dropna())","bb87ba7b":"df2.isna().sum()","66b9e807":"#training data\ntraining_data=df2*0.8\ntest_data = df2-training_data","f67fdea0":"from statsmodels.tsa.arima_model import ARIMA","777fe6cf":"arima = ARIMA(training_data,order=(2,1,3))","09d53cbb":"#fit the model\nmodel= arima.fit()","a89135d3":"#predictions \npredictions=model.forecast(steps=len(test_data))[0]\npredictions","1c8b3dec":"ARIMA_mSe= mean_squared_error(test_data,predictions)\nARIMA_mSe","a4a5a8c7":"ARIMA_rmSe= np.sqrt(mean_squared_error(test_data,predictions))\nARIMA_rmSe\n","9459b840":"ARIMA_mAe= mean_absolute_error(test_data,predictions)\nARIMA_mAe","e1334ad3":"ARIMA_rmAe= np.sqrt(mean_absolute_error(test_data,predictions))\nARIMA_rmAe","1bd0dbb1":"plt.plot(predictions[:100])\nplt.plot(test_data[:100],'r')\nplt.legend([\"original\", \"predicted\"], loc =\"lower right\")\nplt.xlabel('Time')\nplt.show()\n","505b4076":"import fbprophet\nfrom fbprophet import Prophet\n# load data\npath = '..\/input\/climate-change-earth-surface-temperature-data\/GlobalLandTemperaturesByCity.csv'\ndf = pd.read_csv(path, header=0)\ndf.head()","3aa9177e":"uk_cities = df[df['Country']== 'United Kingdom']\nuk_cities.head()","fb1745b9":"uk_cities.isnull().sum()","6847bca8":"uk_data=['London','Glasgow', 'Oxford']","3b8b7e46":"df= uk_cities[uk_cities['City'].isin(uk_data)]\ndf.head()","222c92d3":"df1=df[['dt','AverageTemperature']]\ndf1.head()","4df178f6":"# prepare expected column names\ndf1.columns = ['ds', 'y']\ndf1['ds']= pd.to_datetime(df1['ds'])\ndf1.head()\n","0d66c573":"df1.dropna(inplace=True)\ndf1.head()","bbca16a7":"print(df1.shape)","c9d979d6":"df1=df1.iloc[:700,:]","a90189b7":"# define the model\nmodel = Prophet()\n# fit the model\nmodel.fit(df1)","c40ad15f":"future = list()\nfor i in range(1, 13):\n\tdate = '2025-%02d' % i\n\tfuture.append([date])\nfuture = pd.DataFrame(future)\nfuture.columns = ['ds']\nfuture['ds']= pd.to_datetime(future['ds'])","653c2e95":"# summarize the forecast\nforecast = model.predict(future)\nprint(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].head())","f280630c":"# calculate MAE between expected and predicted values for december\nfrom sklearn.metrics import mean_absolute_error\ny_true = df1['y'][-12:].values\ny_pred = forecast['yhat'].values\nPROPHET_mAe = mean_absolute_error(y_true, y_pred)\nprint ('PROPHET_mAe')","47dbf886":"PROPHET_rmAe = np.sqrt(mean_absolute_error(y_true, y_pred))\nprint('PROPHET_rmAe')","269d5aa2":"from sklearn.metrics import mean_squared_error\nPROPHET_mSe = mean_squared_error(y_true, y_pred)\nPROPHET_mSe","ccb60a7c":"PROPHET_rmSe = np.sqrt(mean_squared_error(y_true, y_pred))\nPROPHET_rmSe","9fc7589d":"plt.plot(forecast)","2f6b67cd":"df2=df[['dt','AverageTemperature']]\ndf2.head()","5f9a36aa":"df2['Year']= df2['ds'].apply(lambda x: str(x)[-4:])\ndf2['Month']= df2['ds'].apply(lambda x: str(x)[-6:-4:])\ndf2['Day']= df2['ds'].apply(lambda x: str(x)[:-6])\ndf2['ds']= pd.DatetimeIndex(df2['Year']+'_'+df2['Month']+'_'+df2['Day'])","2cfbdbfc":"df2.columns=['y','ds']\ndf2.head()          ","73a217a9":"df2.dropna(inplace=True)\ndf2.head()","6edd8604":"m=Prophet(interval_width=0.95, daily_seasonality=True)\nmodel= m.fit(df2)","9d7d7dc3":"df2.head()","066014b9":"future= m.make_future_dataframe(periods=100, freq='D')\nforecast.predict(future)\nforecast.head()","7503fd91":"forecast.tail()","de7263cd":"forecast[['ds','yhat']]","b2d1ac09":"plot1=m.plot(forecast)","b86e5e6e":"plot2=m.plot_components(forecast)","753630af":"PROPHET2_mAe = mean_absolute_error(yhat, future)\nPROPHET2_mAe","fa3c6a15":"PROPHET2_rmAe = np.sqrt(mean_absolute_error(yhat, future))\nPROPHET2_rmAe","71fcbfd1":"PROPHET2_mSe = mean_squared_error(yhat, future)\nPROPHET2_mSe","68a67038":"PROPHET2_rmSe = np.sqrt(mean_squared_error(yhat, future))\nPROPHET2_rmSe","6060645d":"h====","c3feaf88":"df.head()","6f09a8de":"df4=df[['dt', 'AverageTemperature']]\ndf4.head()","371e08bd":"df4.isnull().sum()","ba8d068c":"df4['AverageTemperature'].fillna(int(df4['AverageTemperature'].mean()), inplace=True)","97e0ae4a":"df4.isnull().sum()","2607906e":"df4['AverageTemperature'].dropna()","6a5e8e8c":"df4.shape","aa89a91e":"df4=df.reset_index()['AverageTemperature']\ndf4.shape","04dec76d":"df4.head()","a5f743cb":"df4.isnull().sum()","a0a788a2":"plt.plot(df4)","82e2f6ce":"##LSTM is sensitive to the scale of the data. So I apply MinMax scaler","9bea6677":"from sklearn.preprocessing import MinMaxScaler\nscaler=MinMaxScaler(feature_range=(0,1))\ndf4=scaler.fit_transform(np.array(df4).reshape(-1,1))","ed4c2c49":"df4.shape","83aa8dd4":"df4= np.nan_to_num(df4,df4.mean())","5ae07bf0":"#splitting dataset into train set and test set\ntraining_size=int(len(df4)*0.80)\ntest_size=len(df4)-training_size\ntrain_data, test_data= df4[0:training_size,:], df4[training_size:len(df4),:1]","fa495e4d":"training_size, test_size","3327c7fa":"#create an array of values into a dataset matrix\ndef create_dataset(dataset, time_step=1):\n    X,y= [],[]\n    for i in range(len(dataset)-time_step-1):\n        a= dataset[i:(i+time_step),0] ###i= 0, 0,1,2,3\n        X.append(a)\n        y.append(dataset[i+ time_step,0])\n    return np.array(X), np.array(y)","ccb77e15":"#reshape into X=t, t+1, t+2, t+3 and t+4\ntime_step=100\nX_train, y_train= create_dataset(train_data, time_step)\nX_test, y_test= create_dataset(test_data, time_step)","763ef60b":"print(X_train)","95a14a48":"print(X_train.shape), print(y_train.shape)","8e5b9906":"# reshape input to be [samples, time steps, features] which is required for LSTM\nX_train= X_train.reshape(X_train.shape[0], X_train.shape[1],1)\nX_test= X_test.reshape(X_test.shape[0], X_test.shape[1],1)","2bf7cf1a":"#Create the LSTM model\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Dropout\nfrom tensorflow.keras.layers import LSTM","21945c23":"model= Sequential()\nmodel.add(LSTM(50, return_sequences= True, input_shape=(100,1)))\nmodel.add(LSTM(50, return_sequences=True))\nmodel.add(Dropout(0.5))\nmodel.add(LSTM(50))\nmodel.add(Dense(1))\nmodel.compile(loss= 'mean_squared_error', optimizer= 'rmsprop')\n","38818419":"model.summary()","8f8477a3":"model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs= 50, batch_size=32, verbose=1)","94e7b710":"from keras.models import load_model\nmodel.save_weights('my_model1.weights.h5')\nmodel.save('my_model1.h5')\n#model= load_model('my_model1.h5')\n#model.load_weights('my_model1.h5')","8b7fde45":"#Prediction and performance metrics check\ntrain_predict= model.predict(X_train)\ntest_predict= model.predict(X_test)","8334b65f":"LSTM_mSe= mean_squared_error(y_test,test_predict)\nLSTM_mSe","2cbeae4c":"LSTM_rmSe= np.sqrt(mean_squared_error(y_test,test_predict))\nLSTM_rmSe","1a244eae":"LSTM_mAe= mean_absolute_error(y_test,test_predict)\nLSTM_mAe","3426df7b":"LSTM_rmAe= np.sqrt(mean_absolute_error(y_test,test_predict))\nLSTM_rmAe","34d579c1":"plt.plot(test_predict[:100])\nplt.plot(y_test[:100],'r')\nplt.legend([\"original\", \"predicted\"], loc =\"lower right\")\nplt.xlabel('Time')\nplt.show()","ae9befe2":"print('Moving Average Mean Squared Error: %.3f' % MA_mSe)\nprint('Moving Average Mean Absolute Error: %.3f' % MA_mAe)\nprint('Moving Average Root Mean Squared Error: %.3f' % MA_rmSe)\nprint('Moving Average Root Mean Absolute Error: %.3f' % MA_rmAe)","3ad90308":"print('ARIMA Mean Squared Error: %.3f' % ARIMA_mSe)\nprint('ARIMA Mean Absolute Error: %.3f' % ARIMA_mAe)\nprint('ARIMA Root Mean Squared Error: %.3f' % ARIMA_rmSe)\nprint('ARIMA Root Mean Absolute Error: %.3f' % ARIMA_rmAe)","598e124a":"print('Prophet Mean Squared Error: %.3f' % PROPHET_mSe)\nprint('Prophet Mean Absolute Error: %.3f' % PROPHET_mAe)\nprint('Prophet Root Mean Squared Error: %.3f' % PROPHET_rmSe)\nprint('Prophet Root Mean Absolute Error: %.3f' % PROPHET_rmAe)","9457c9e7":"print('LSTM Mean Squared Error: %.3f' % LSTM_mSe)\nprint('LSTM Mean Absolute Error: %.3f' % LSTM_mAe)\nprint('LSTM Root Mean Squared Error: %.3f' % LSTM_rmSe)\nprint('LSTM Root Mean Absolute Error: %.3f' % LSTM_rmAe)","2e9a9207":"Using ARIMA ARIMA stands for Autoregressive Integrated Moving Average. It is a combination of two models which are autoregressive and moving average. ARIMA Model has three parameters: p: it is the number of autoregressive lags. d: it is the order of differencing required to make the series stationary. q: it is the number of moving average lags."}}