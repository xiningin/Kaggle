{"cell_type":{"1af98c3e":"code","da05355e":"code","92e775ec":"code","3ac81c53":"code","f1aa17ef":"markdown"},"source":{"1af98c3e":"# !pip install nb_black\n# %load_ext nb_black\nimport pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\nimport plotly.io as pio\nfrom ipywidgets import widgets\n\npio.templates.default = \"plotly_white\"\n\ndata_path = \"..\/input\/kaggle-survey-2019\/\"\nmultiple_choice_responses_19 = pd.read_csv(\n    data_path + \"multiple_choice_responses.csv\", engine=\"c\", low_memory=False\n)\nquestions_only_19 = pd.read_csv(data_path + \"questions_only.csv\", engine=\"c\")","da05355e":"# Table with countries and respondents, ordered descending.\n# It's necessary later to make the data proportional to the number of the respondents of the country.\ncountries = (\n    multiple_choice_responses_19[\"Q3\"][1:]\n    .value_counts()\n    .to_frame(name=\"count\")\n    .rename_axis(\"country\")\n    .reset_index()\n)","92e775ec":"def where(question):\n    \"\"\"\n    This function gets the data for the question, processes it and plot a Choropleth map\n    \n    :param question: Question to plot\n    :return: DataFrame with country and percentage of each response of the question\n    \"\"\"\n    # Skip the Question 3 'In which country do you currently reside?'    \n    if question == \"Q3\":\n        return\n\n    # Plot title    \n    title = f\"<b>{question}<\/b>: {questions_only_19[question].values[0]}\"\n    \n    # NORMAL QUESTION\n    # ---------------    \n    # If the question is single choice, it is in the multiple_choice_responses columns\n\n    if question in multiple_choice_responses_19.columns:\n        # Get the country and question #n columns of the multiple_choice_responses_19 table\n        # and skip the first row        \n        m = multiple_choice_responses_19[[\"Q3\", question]][1:]\n        # Create a count column        \n        m[\"count\"] = 1\n        # Do the magic        \n        p = (\n            m.groupby([\"Q3\", question]) # Group the country - response combination\n            .agg(np.sum) # Get the sum\n            .reset_index() # Plot.ly needs normal columns\n            .rename(columns={\"Q3\": \"country\"}) # Rename country column\n        )\n\n    # MULTIPLE CHOICE QUESTION\n    # ------------------------\n    # If the question is multiple choice, the question is followed by _Part_\n    # Get all columns with _Part_\n    \n    else:\n        m = multiple_choice_responses_19[1:].filter(\n            like=f\"{question}_Part_\", axis=\"columns\"\n        )\n        # Get the relation of the part number and the most frequent value       \n        parts = {v + 1: k for v, k in enumerate(m.mode().values[0].tolist())}\n        # Add the country column \n        m[\"country\"] = multiple_choice_responses_19[\"Q3\"][1:]\n        # Group the table by country and do the counting\n        g = m.groupby([\"country\"]).agg(\"count\").reset_index()\n        # Convert a wide table to a long table using _Part_ columns\n        p = (\n            pd.wide_to_long(g, stubnames=f\"{question}_Part_\", i=\"country\", j=\"part\")\n            .reset_index()\n            .rename(columns={f\"{question}_Part_\": \"count\"})\n        )\n        # Create a new column with the part most frequent value instead of the part number\n        p[question] = p[\"part\"].map(parts)\n\n    # COMMON\n    # ------\n    # Instead of the value, get the percentage for each country\n    \n    p[\"percentage\"] = p.apply(\n        lambda x: x[\"count\"]\n        \/ countries[countries[\"country\"] == x[\"country\"]][\"count\"].values[0],\n        axis=\"columns\",\n    )\n    \n    return p","3ac81c53":"# Create the options for the questions widget\n# It should be a list of tuples with the index and value (text shown)\noptions = [\n    (f\"{index}: {value}\", index)\n    for index, value in questions_only_19.iloc[:, 1:].T[0].items()\n]\ndel options[2]\n\n# Question dropdown widget\nquestion = widgets.Dropdown(\n    options=options, value=\"Q1\", description=\"Question:\", disabled=False,\n)\n\n# Slider widget\nslider = widgets.SelectionSlider(\n    options=[\"\"],\n    value=\"\",\n    description=\"\",\n    disabled=False,\n    continuous_update=False,\n    orientation=\"horizontal\",\n    readout=True,\n)\n\n# Color widget\ncolor = widgets.Dropdown(\n    options=[\"aggrnyl\", \"agsunset\", \"algae\", \"amp\", \"armyrose\", \"balance\", \"blackbody\", \"bluered\", \"blues\", \"blugrn\", \"bluyl\", \"brbg\", \"brwnyl\", \"bugn\", \"bupu\", \"burg\", \"burgyl\", \"cividis\", \"curl\", \"darkmint\", \"deep\", \"delta\", \"dense\", \"earth\", \"edge\", \"electric\", \"emrld\", \"fall\", \"geyser\", \"gnbu\", \"gray\", \"greens\", \"greys\", \"haline\", \"hot\", \"hsv\", \"ice\", \"icefire\", \"inferno\", \"jet\", \"magenta\", \"magma\", \"matter\", \"mint\", \"mrybm\", \"mygbm\", \"oranges\", \"orrd\", \"oryel\", \"peach\", \"phase\", \"picnic\", \"pinkyl\", \"piyg\", \"plasma\", \"plotly3\", \"portland\", \"prgn\", \"pubu\", \"pubugn\", \"puor\", \"purd\", \"purp\", \"purples\", \"purpor\", \"rainbow\", \"rdbu\", \"rdgy\", \"rdpu\", \"rdylbu\", \"rdylgn\", \"redor\", \"reds\", \"solar\", \"spectral\", \"speed\", \"sunset\", \"sunsetdark\", \"teal\", \"tealgrn\", \"tealrose\", \"tempo\", \"temps\", \"thermal\", \"tropic\", \"turbid\", \"twilight\", \"viridis\", \"ylgn\", \"ylgnbu\", \"ylorbr\", \"ylorrd\"],\n    value=\"deep\",\n    description=\"Color:\",\n    disabled=False,\n)\n\n# Basic data part of the plot. Only common configuration.\ndata = go.Choropleth(\n    locations=[],\n    locationmode=\"country names\",\n    colorbar=go.choropleth.ColorBar(tickformat=\",.0%\"),\n    hovertemplate=\"%{location}: %{z:.2%}\",\n)\n\n# Basic layout part of the plot.\nlayout = go.Layout(sliders=[go.layout.Slider(active=0)], height=800)\n\n# Figure\ng = go.FigureWidget(data=data, layout=layout)\n\n# Callback that the widgets call\ndef response(change):\n    # Get the information of the question\n    p = where(question.value)\n    # Update values\n    with g.batch_update():\n        g.layout.title.text = (\n            f\"<b>{question.value}<\/b>: {questions_only_19[question.value].values[0]}\"\n        )\n        slider.options = p[question.value].unique().tolist()\n        slider.description = f\"Responses: \"\n        g.data[0].locations = p[p[question.value] == slider.value][\"country\"]\n        g.data[0].z = p[p[question.value] == slider.value][\"percentage\"]\n        g.data[0].colorscale = color.value\n\n\n# Set buttons' callback\nquestion.observe(response, names=\"value\")\nslider.observe(response, names=\"value\")\ncolor.observe(response, names=\"value\")\n\n# Force refreshing at init\nresponse(\"refresh\")\n\n# Plot components\ncontrol = widgets.HBox([question, color])\nwidgets.VBox([control, g, slider])","f1aa17ef":"# Introduction\n\nThe aim of this notebook is to view where in the world people is using a programming language, or how the yearly compensation is distributed.\n\nThe values are relative to the number of respondents of that country.\n\n**It seems to work only in edit mode**. I leave here an screenshot:\n\n![](https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F645169%2F914a4a6aa6624e51f08b6ce2200953a9%2FCaptura%20de%20pantalla%20de%202019-11-17%2005-34-15.png?generation=1573965281339160&alt=media)"}}