{"cell_type":{"25645685":"code","824aedf5":"code","a77cc94a":"code","e95e4e0f":"code","4e99633d":"code","b6f7940c":"code","93d00df2":"code","3a7826b7":"code","a0ef32bb":"code","89188c6a":"code","17a97787":"code","8391dc04":"code","776ad024":"code","4ea26004":"code","f19ae581":"code","67630dbe":"markdown","84150afd":"markdown","6c70b6cf":"markdown","780dae00":"markdown","08b592ae":"markdown","c1c081a0":"markdown","f7271753":"markdown","c7d832bd":"markdown","9432ec41":"markdown","34831106":"markdown","dbad1e08":"markdown","f1398e6f":"markdown"},"source":{"25645685":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import MinMaxScaler","824aedf5":"data = pd.read_csv(\"..\/input\/chocolate-bar-ratings\/flavors_of_cacao.csv\")\ndf = data.copy()","a77cc94a":"def df_summary(df):\n    print(\"############### OBSERVATIONS-COLUMNS COUNTS ###############\")\n    print(\"\\n\")\n    print(df.shape)\n    print(\"############### INDEX ###############\")\n    print(\"\\n\")\n    print(df.index)\n    print(\"############### COLUMNS ###############\")\n    print(\"\\n\")\n    print(df.columns)\n    print(\"############### DATAFRAME INFORMATIONS ###############\")\n    print(\"\\n\")\n    print(df.info())\n    print(\"############### DATAFRAME INFORMATIONS ###############\")\n    print(\"\\n\")\n    print(df.describe().T)\n    print(\"############### FIRST FIVE OBSERVATION ###############\")\n    print(\"\\n\")\n    print(df.head())\n\ndf_summary(df)","e95e4e0f":"def missing_value_analysis(df):\n    print(\"Is there any missing value on the dataset?\")\n    print(df.isnull().values.any())\n    missing = df.isnull().values.any()\n\n    if (missing == True):\n        print(\"############### MISSING VALUE COUNTS BY VARIABLES ###############\")\n        print(df.isnull().sum())\n        print(\"############### TOTAL MISSING VALUE COUNTS ###############\")\n        print(df.isnull().sum().sum())\n    else:\n        pass\n\nmissing_value_analysis(df)","4e99633d":"def item_based_rating(df, w1 = 0.50, w2 = 0.30, w3 = 0.20):\n    \n    q1 = df[\"REF\"].quantile(0.25)\n    q3 = df[\"REF\"].quantile(0.75)\n    \n    return df.loc[df[\"REF\"] < q1, \"Rating\"].mean() * w1 + \\\n           df.loc[(df[\"REF\"] >= q1) & (df[\"REF\"] < q3), \"Rating\"].mean() * w2 + \\\n           df.loc[df[\"REF\"] >= q3, \"Rating\"].mean() * w3","b6f7940c":"print(\"Item-Based Rating Mean: \", item_based_rating(df))\nprint(\"Rating Mean: \", df[\"Rating\"].mean())","93d00df2":"scaler = MinMaxScaler(feature_range = (1,5))\nscaler.fit(df[[\"REF\"]])\ndf[\"Scaled_REF\"] = scaler.transform(df[[\"REF\"]])\n\ndef weighted_rating(df):\n    df[\"Score\"] = (df[\"Rating\"] + df[\"Scaled_REF\"]) \/ 2\n    return df[\"Score\"]","3a7826b7":"df[\"Score\"] = weighted_rating(df)","a0ef32bb":"sort_df = df.groupby(\"Specific Bean Origin\\nor Bar Name\").agg({\"Score\": \"mean\"})","89188c6a":"sort_df = pd.DataFrame(sort_df)\nsort_df = sort_df.reset_index()","17a97787":"sort_df.head()","8391dc04":"def sorting_products(df, var, rec_count = 5):\n    sorted_df = df.sort_values(by = var, ascending = False)\n    return sorted_df.head(rec_count)","776ad024":"sorting_products(sort_df, var = \"Score\", rec_count = 10)b","4ea26004":"rating_average_sort_df = df.groupby(\"Specific Bean Origin\\nor Bar Name\"). \\\nagg({\"Rating\": \"mean\"})\n\nrating_average_sort_df = pd.DataFrame(rating_average_sort_df)\nrating_average_sort_df = rating_average_sort_df.reset_index()","f19ae581":"sorting_products(rating_average_sort_df, var = \"Rating\", rec_count = 10)","67630dbe":"In this section, we will try to create a new variable to rerate and sort products which's name is \"Score\".It contains multiplication of rating and REF that is standardized between 1 and 5.","84150afd":"Firstly, we will evaluate our average based on time recency and compare with the existing current average.\n\nAfter that we will try to sort of our product in a different way ","6c70b6cf":"#### It seem like there is a difference between two sorting types' results that I applied.One that is the most suitable with firm's strategy can be used to sort the products.","780dae00":"## Sorting Product","08b592ae":"## Getting Dataset","c1c081a0":"### 2 - Sorting with rating means","f7271753":"# Final Note","c7d832bd":"## Analyzing Dataset","9432ec41":"## Rating and Sorting","34831106":"## Item Product Rating","dbad1e08":"## Librarires","f1398e6f":"### 1 - Sorting with impacts of REF and Rating"}}