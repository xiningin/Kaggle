{"cell_type":{"ef1a976b":"code","c7a7413f":"code","ef1b9fea":"code","8427f26e":"code","8282faf1":"code","94a445ff":"code","110d8e39":"markdown","ad7ba113":"markdown","00709a8a":"markdown"},"source":{"ef1a976b":"import numpy as np\nimport pandas as pd\nimport os\n\nimport tensorflow as tf\nfrom tensorflow.keras.layers import Dense, BatchNormalization, Dropout, Conv1D, Flatten, MaxPool1D\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.data import Dataset\nfrom tensorflow import keras\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import QuantileTransformer\nfrom sklearn import metrics\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.pipeline import Pipeline","c7a7413f":"%%time\ntrain = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv')\ntest  = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv')\nsub   = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv')","ef1b9fea":"%%time\ntrain['n_missing'] = train.isna().sum(axis=1)\ntest['n_missing'] = test.isna().sum(axis=1)\ntrain['claim'] = train['claim'].astype(str)\n\nfeatures = [col for col in train.columns if col not in ['claim', 'id']]\npipe = Pipeline([\n        ('imputer', SimpleImputer(strategy='mean',missing_values=np.nan)),\n        (\"scaler\", QuantileTransformer(n_quantiles=256,output_distribution='uniform')),\n        ])\ntrain[features] = pipe.fit_transform(train[features])\ntest[features] = pipe.transform(test[features])\n\nX_train = np.reshape(train[features].values, (train[features].values.shape[0], train[features].values.shape[1], 1))\nX_test = np.reshape(test[features].values, (test[features].values.shape[0], test[features].values.shape[1], 1))","8427f26e":"model = Sequential([\n    Conv1D(filters=64, kernel_size=3, activation=\"relu\", input_shape=(X_train.shape[1], 1)),\n    Conv1D(filters=64, kernel_size=3, activation=\"relu\"),\n    MaxPool1D(pool_size=2),\n    Dropout(0.5),\n    BatchNormalization(),\n    Conv1D(filters=64, kernel_size=3, activation=\"relu\"),\n    Conv1D(filters=64, kernel_size=3, activation=\"relu\"),\n    MaxPool1D(pool_size=2),\n    Dropout(0.5),\n    Flatten(),\n    BatchNormalization(),\n    Dense(128,  activation='relu'),\n    Dropout(0.5),\n    BatchNormalization(),\n    Dense(128,  activation='relu'),\n    Dropout(0.5),\n    Dense(1, activation='sigmoid'),\n])\n\nauc = tf.keras.metrics.AUC(name='aucroc')\nmodel.compile(loss='binary_crossentropy', optimizer = 'adam', metrics=[auc]) ","8282faf1":"model.fit(\n    x = np.float32(X_train),\n    y = np.float32(train.claim),\n    batch_size = 1024,\n    shuffle = True,\n    epochs = 100\n)","94a445ff":"sub['claim'] = model.predict(np.float32(X_test))\nsub=sub.set_index('id')\nsub.to_csv('submission.csv')","110d8e39":"# Preprocessing","ad7ba113":"# Load Dataset","00709a8a":"# Modeling"}}