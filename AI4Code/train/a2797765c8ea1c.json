{"cell_type":{"7918b602":"code","24bfd075":"code","57a06422":"code","f4d09e5f":"code","cbd72a00":"code","c7cb30e1":"code","74c3da69":"code","d18d7dd2":"code","08b07823":"code","23be57f0":"code","1028c536":"code","d8eb0b9f":"code","d137cf88":"code","9f5c0240":"code","32eb7dc0":"code","d5d4878a":"code","162e553f":"code","cbe680bb":"code","2ec082df":"markdown","42cb6d03":"markdown","201ee365":"markdown"},"source":{"7918b602":"# \uae30\uc874 \ucf54\ub4dc\uc640 \ucc28\ubcc4\uc810 : \n# \ud30c\ub77c\ubbf8\ud130 \ubcc0\uacbd  \n# NN \uc7ac\uc124\uacc4  \n# \ub370\uc774\ud130 \ucc98\ub9ac\ubc29\ubc95 \ubcc0\uacbd  \n# \ub808\uc774\uc5b4 \ucd94\uac00","24bfd075":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","57a06422":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\n\nfrom sklearn import preprocessing","f4d09e5f":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","cbd72a00":"# \ud559\uc2b5 \ud30c\ub77c\ubbf8\ud130 \uc124\uc815\nlearning_rate = 0.001\ntraining_epochs = 50\nbatch_size = 100","c7cb30e1":"train=pd.read_csv('\/kaggle\/input\/2020ai-project-18011797\/waterquality_train.csv',header=None, skiprows=1)\n\ntrain[0] = train[0]%10000\/100\n\ndata_x = train.loc[:, 0:7]\ndata_y = train.loc[:,[8]]\n\ndata_x = np.array(data_x)\ndata_y = np.array(data_y)\n\n# \uc2a4\ucf00\uc77c\ub7ec \ud65c\uc6a9\nScaler = preprocessing.StandardScaler()\ndata_x = Scaler.fit_transform(data_x)\n\nx_train = torch.FloatTensor(data_x)\ny_train = torch.FloatTensor(data_y)","74c3da69":"train_dataset = torch.utils.data.TensorDataset(x_train, y_train)","d18d7dd2":"data_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","08b07823":"# \ub808\uc774\uc5b4 \uc0dd\uc131\nlinear1 = torch.nn.Linear(8,512, bias = True)\nlinear2 = torch.nn.Linear(512,512, bias = True)\nlinear3 = torch.nn.Linear(512,512, bias = True)\nlinear4 = torch.nn.Linear(512,512, bias = True)\nlinear5 = torch.nn.Linear(512,1, bias = True)\nrelu = torch.nn.ReLU()\ndropout = torch.nn.Dropout(p=0.3)","23be57f0":"torch.nn.init.xavier_uniform_(linear1.weight)\ntorch.nn.init.xavier_uniform_(linear2.weight)\ntorch.nn.init.xavier_uniform_(linear3.weight)\ntorch.nn.init.xavier_normal_(linear4.weight)\ntorch.nn.init.xavier_normal_(linear5.weight)","1028c536":"model = torch.nn.Sequential(linear1, relu, dropout,\n                            linear2, relu, dropout,\n                            linear3, relu, dropout,\n                            linear4, relu, dropout,\n                            linear5).to(device)","d8eb0b9f":"# \uc190\uc2e4\ud568\uc218\uc640 \ucd5c\uc801\ud654 \ud568\uc218\nloss = torch.nn.MSELoss().to(device)\noptimizer = torch.optim.Adam(model.parameters(), lr=learning_rate) ","d137cf88":"total_batch = len(data_loader)\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        X = X.to(device)\n        Y = Y.to(device)\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n        # Forward \uacc4\uc0b0\n        hypothesis = model(X)\n        # Error \uacc4\uc0b0\n        cost = loss(hypothesis, Y)\n        # Backparopagation\n        cost.backward()\n        # \uac00\uc911\uce58 \uac31\uc2e0\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n\n    print('Epoch:', '%03d' % (epoch + 1), 'rate =', '{:.1f}'.format(avg_cost))\n\nprint('Learning finished')","9f5c0240":"test_xy = pd.read_csv(\"\/kaggle\/input\/2020ai-project-18011797\/waterquality_test.csv\", header=None, skiprows=1)\ntest_xy[0] = test_xy[0]%10000\/100\n\nwith torch.no_grad():\n\n  x_test_data=test_xy.loc[:,:]\n  x_test_data=np.array(x_test_data)\n  x_test_data = Scaler.transform(x_test_data)\n  x_test_data=torch.from_numpy(x_test_data).float().to(device)\n\n  prediction = model(x_test_data)","32eb7dc0":"correct_prediction = prediction.cpu().numpy().reshape(-1,1)","d5d4878a":"submit=pd.read_csv('\/kaggle\/input\/2020ai-project-18011797\/waterquality_submit.csv')","162e553f":"for i in range(len(correct_prediction)):\n  submit['Expected'][i]=correct_prediction[i].item()","cbe680bb":"submit.to_csv('submit.csv',index=False,header=True)","2ec082df":"## \ubaa8\ub378 \ud559\uc2b5","42cb6d03":"## \ubaa8\ub378 \ud14c\uc2a4\ud2b8\n","201ee365":"## \ub370\uc774\ud130 \ub85c\ub354"}}