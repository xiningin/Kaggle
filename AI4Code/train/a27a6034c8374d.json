{"cell_type":{"d77da4da":"code","f07e435a":"code","fd9f04e4":"code","4c64454c":"code","41e5ff73":"code","3f7f2a02":"code","dd873657":"code","aedb59de":"code","d7116b96":"code","ba8c9487":"code","2009080b":"code","cb592de0":"code","0648d70e":"code","d30042b6":"code","b1c26231":"code","1d091f29":"code","ae3e4acc":"code","72fbaf50":"markdown","c41d21e2":"markdown","0b545861":"markdown"},"source":{"d77da4da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f07e435a":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","fd9f04e4":"df = pd.read_csv('..\/input\/factors-affecting-campus-placement\/Placement_Data_Full_Class.csv')\nprint('row:',df.shape[0],'column:',df.shape[1])\nprint('-'*20)\nprint(df.sample(7))\nprint('-'*20)\nprint(df.isna().sum())","4c64454c":"##salary \u6709\u907a\u5931\u503c\u7684\u90a3\u4e9b\u8cc7\u6599\u5c1a\u672a\u627e\u5230\u9069\u7576\u7684\u5de5\u4f5c,\u6240\u4ee5\u6c92\u85aa\u6c34\nprint(df[df['salary'].isna()].status.unique())\ndf['salary'] =df['salary'].fillna(0)","41e5ff73":"print(df.nunique())\ncate_var = [i for i in df if df[i].nunique()<10]\nprint(cate_var)\ncontinuous_var = [i for i in df if (df[i].nunique()>10)]\nprint(continuous_var)\ny = df['salary']","3f7f2a02":"print('salary_median: %.2f'%df['salary'].median())\nprint('salary_mean: %.2f'%df['salary'].mean())\n##check the outlier of salary and its distribution\nsns.boxplot(data=df['salary'])\nplt.show()\nbox_length = np.percentile(df['salary'],75)-np.percentile(df['salary'],25)\nmax_ = 1.5*box_length + np.percentile(df['salary'],75)\nprint(df[df['salary']>max_])\n\nsns.distplot(df['salary'])\nplt.show()","dd873657":"#check the relationship between continuous varibles\nsns.pairplot(df[continuous_var])\nplt.show()","aedb59de":"##Let's start to do some data visualization\n##the relationship between specialisation and salary\n##by the following plot, we can understand which specialisation get more money than fifty percent of people\n\nprint('salary > %.2f'% df['salary'].median())\nfor i in df['specialisation'].unique():\n    for gender in df['gender'].unique():\n        print(i,gender,len(df[(df['specialisation']==i)&(df['salary']>df['salary'].median())&(df['gender']==gender)]))\nprint('-'*15)\nprint('Not Placed (salary=0)')\nfor i in df['specialisation'].unique():\n    for gender in df['gender'].unique():\n        print(i,gender,len(df[(df['specialisation']==i)&(df['salary']==0)&(df['gender']==gender)]))\nsns.catplot(x='specialisation',y='salary',data=df,hue='gender')\nplt.show()","d7116b96":"#the population in every category\nplt.figure(figsize=(16,10))\nfor index,crv in enumerate(cate_var):\n    plt.subplot(2,4,index+1)\n    plt.title('%s'%crv)\n    plt.bar(x=df[crv].unique(),height=df[crv].value_counts())","ba8c9487":"fig = plt.figure(figsize=(20,12))\nfor index,crv in enumerate(cate_var):\n    ax = fig.add_subplot(2,4,index+1)\n    sns.boxplot(x=crv,y='salary',data=df,ax=ax)\nplt.show()","2009080b":"print('salary > %.2f'% df['salary'].median())\nprint()\nfor crv in cate_var:\n    print(crv)\n    for i in df[crv].unique():\n        print(i+':',len(df[(df[crv]==i)&(df['salary']>df['salary'].median())])\/len(df[df[crv]==i]),\n              end=' | ' if df[crv].unique()[-1]!=i else '\\n')\n    print('-'*15 if crv!=cate_var[-1] else '-'*70)\nprint('Not Placed (salary=0)')\nprint()\nfor crv in cate_var:\n    print(crv)\n    for i in df[crv].unique():\n        print(i+':',len(df[(df[crv]==i)&(df['salary']==0)])\/len(df[df[crv]==i]),\n             end=' | ' if df[crv].unique()[-1]!=i else '\\n')\n    print('-'*15)","cb592de0":"# According the proportion of salary which surpass the median of salary ,choose some features to explore \nfig = plt.figure(figsize=(15,6))\nax1 = fig.add_subplot(131)\ndf.groupby(by='gender').salary.mean().plot(kind='bar',ax=ax1)\nax2 = fig.add_subplot(132)\ndf.groupby(by='workex').salary.mean().plot(kind='bar',ax=ax2)\nax3 = fig.add_subplot(133)\ndf.groupby(by='specialisation').salary.mean().plot(kind='bar',ax=ax3)\nplt.show()\nprint(df.groupby(by='gender').salary.mean())\nprint('-'*10)\nprint(df.groupby(by='workex').salary.mean())\nprint('-'*10)\nprint(df.groupby(by='specialisation').salary.mean())","0648d70e":"from sklearn.preprocessing import StandardScaler\ncontinuous_var.remove('salary') ##remove y(target)\nscaler = StandardScaler()\nscaler.fit(df[continuous_var])\ndf[continuous_var] = scaler.transform(df[continuous_var])\ndf = pd.get_dummies(df,columns=cate_var) #one-hot encoding","d30042b6":"df = df.drop(['sl_no','salary'],axis=1)\ndf.head()","b1c26231":"# split the data into two pieces\nfrom sklearn.model_selection import train_test_split\nX_train,X_test,y_train,y_test = train_test_split(df,y,test_size=0.2)\nX_train.shape,X_test.shape,y_train.shape,y_test.shape","1d091f29":"# import Alogrithm and evaluate the efficacy (predict salary)\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import r2_score,mean_squared_error\n\ndef relu(a):\n    '''\n    relu\n    '''\n    for index,item in enumerate(a):\n        if item<=0:\n            a[index] =0\n        else:\n            a[index] =item\n    return(a)\n\nlr = LinearRegression()\nlr.fit(X_train,y_train)\ny_pre = lr.predict(X_test)\n#print(y_pre)\ny_pre = relu(y_pre)\n#print(y_pre)\nr2 = r2_score(y_test,y_pre)\nmse = mean_squared_error(y_test,y_pre)\nprint('r2:%.2f'%r2)\nprint('mse:%.2f'%mse)","ae3e4acc":"#cross validation\nfrom sklearn.model_selection import cross_val_score\ncv_score = cross_val_score(estimator=lr,X=df,y=y,cv=5)\nprint('r2:',cv_score.mean())","72fbaf50":"# Feature engineer","c41d21e2":"# EDA","0b545861":"## Proportion of Salary which surpass the median of Salary"}}