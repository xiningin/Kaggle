{"cell_type":{"ea8c27fb":"code","1b891dfc":"code","656a740a":"code","87f2c2b6":"code","531bcb05":"code","86b4bdae":"code","2a6d4a38":"code","05d27d44":"code","7aa79dcf":"code","8409b39d":"code","11caddd3":"code","642a6693":"code","306f532f":"code","9e82ff4d":"markdown","72dadb5c":"markdown","2243d697":"markdown"},"source":{"ea8c27fb":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1b891dfc":"import warnings\nwarnings.filterwarnings(\"ignore\")\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV","656a740a":"df = pd.read_csv('\/kaggle\/input\/bank-loan-classification\/UniversalBank.csv')\ndf.head()","87f2c2b6":"df.isnull().sum()","531bcb05":"df.drop(['ID','ZIP Code'], axis = 1, inplace = True)","86b4bdae":"cols = ['Family','Education', 'Securities Account', 'CD Account',\n       'Online', 'CreditCard']\n\ndf = pd.get_dummies(df, columns = cols,drop_first = True)","2a6d4a38":"y = df.loc[:,['Personal Loan']]\nX = df.drop('Personal Loan', axis =1)\n\ntrain_x, test_x, train_y, test_y = train_test_split(X,y, test_size = 0.3, random_state = 42)","05d27d44":"scaler = StandardScaler()\nscaler.fit(train_x)\nscaler.transform(train_x)\nscaler.transform(test_x)","7aa79dcf":"knn_classifier = KNeighborsClassifier(n_neighbors=1)\ncross_val = cross_val_score(knn_classifier,train_x,train_y, cv = 10)\nprint('Cross Val Score: {}%'.format(round(cross_val.mean()*100,2)))","8409b39d":"error_rate = []\nfor i in range(1,40):\n    knn = KNeighborsClassifier(n_neighbors = i)\n    score = cross_val_score(knn,train_x,train_y, cv = 10)\n    error_rate.append(1 - score.mean())\n    \nplt.plot(range(1,40), error_rate, color = 'red', linestyle = 'dashed', marker = 'o', markerfacecolor = 'blue', markersize = 10)\nplt.title('K value vs Error rate')\nplt.xlabel('K value')\nplt.ylabel('Error rate')","11caddd3":"knn1 = KNeighborsClassifier(n_neighbors = 21)\ncross_val = cross_val_score(knn1, train_x, train_y,cv = 10)\nprint('Cross Val Score: {}%'.format(round(cross_val.mean()*100,2)))","642a6693":"k_range = list(range(1,40))\nweight_options = [\"uniform\",\"distance\"]\nparam_grid = {'n_neighbors' : k_range, 'weights' : weight_options}\n\nknn = KNeighborsClassifier()\ngrid = GridSearchCV(knn,param_grid,cv = 8)\ngrid.fit(train_x,train_y)\nprint(grid.best_score_)\nprint(grid.best_params_)","306f532f":"knn1 = KNeighborsClassifier(n_neighbors = 20, weights = 'uniform')\ncross_val = cross_val_score(knn1, train_x, train_y,cv = 10)\nprint('Cross Val Score: {}%'.format(round(cross_val.mean()*100,2)))","9e82ff4d":"### **Importing the libraries**","72dadb5c":"### **Modelling with KNeighbors Classifier**","2243d697":"### **Grid-search CV using KNeighbors Classifier**"}}