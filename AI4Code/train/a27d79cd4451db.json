{"cell_type":{"cb6709fd":"code","84b7194e":"code","58130821":"code","50978b2a":"code","bfa78157":"code","1596a7f9":"code","2ba61a80":"code","3d86325f":"code","83bd894c":"code","bf0983cf":"code","3dd3f8d4":"code","231470ef":"code","fa86fc99":"code","7a3e40c9":"code","8ac72dbb":"code","e97b79b1":"code","cda70bce":"code","4b2eb49d":"markdown"},"source":{"cb6709fd":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","84b7194e":"# load the data\ndf = pd.read_csv(\"..\/input\/cardio_train.csv\",sep=';')\ndf.head()","58130821":"df.info()","50978b2a":"df.describe()","bfa78157":"corr_matrix = df.corr()\ncorr_matrix[\"cardio\"].sort_values(ascending=False)","1596a7f9":"df['BMI'] = df['weight'] \/ (df['height']\/100)**2\ncorr_matrix = df.corr()\ncorr_matrix[\"cardio\"].sort_values(ascending=False)","2ba61a80":"years = (df['age'] \/ 365).round().astype('int')\npd.crosstab(years, df.cardio).plot(kind='bar', figsize=(12,8))\nplt.title('Cardio by age')\nplt.legend(['Does not have CVD', 'Has CVD'])\nplt.show()","3d86325f":"from sklearn.model_selection import StratifiedShuffleSplit\n\ns = StratifiedShuffleSplit(n_splits=10, test_size=0.2)\nfor train_index, test_index in s.split(df, df[\"cardio\"]):\n    train_set = df.loc[train_index]\n    test_set = df.loc[test_index]","83bd894c":"training = train_set.copy()","bf0983cf":"training_data = training.drop([\"cardio\", \"id\", \"alco\"], axis=1)\ncardio_labels = training[\"cardio\"].copy()","3dd3f8d4":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\ndata_scaled = scaler.fit_transform(training_data)","231470ef":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.ensemble import RandomForestClassifier\n\nparam_grid = [\n{'n_estimators': [100, 500, 1000], 'max_features': [2, 4, 6, 8]},\n{'bootstrap': [False], 'n_estimators': [100, 500, 100], 'max_features': [2, 4, 6]},\n]\n\nclf = RandomForestClassifier()\n\ngrid_search = GridSearchCV(clf, param_grid, cv=5)\ngrid_search.fit(data_scaled, cardio_labels)","fa86fc99":"cvres = grid_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(mean_score, params)","7a3e40c9":"grid_search.best_params_","8ac72dbb":"from sklearn.model_selection import cross_val_score\n\nclf = RandomForestClassifier(max_features=4, n_estimators=500)\nscores = cross_val_score(clf, data_scaled, cardio_labels, cv=5, scoring=\"accuracy\")\nprint(\"Scores: \", scores)\nprint(\"Mean: \", scores.mean())\n","e97b79b1":"from sklearn.metrics import precision_score, recall_score, f1_score\nfrom sklearn.model_selection import cross_val_predict\n\ntraining_pred = cross_val_predict(clf, data_scaled, cardio_labels, cv=5)\nprint(\"Precision: \", precision_score(cardio_labels, training_pred))\nprint(\"Recall: \", recall_score(cardio_labels, training_pred))\nprint(\"F1 Score: \", f1_score(cardio_labels, training_pred))","cda70bce":"cols = [\"cardio\", \"id\", \"alco\"]\nX_test = test_set.drop(cols, axis=1)\nY_test = test_set[\"cardio\"].copy()\n\nX_test[\"BMI\"] = X_test[\"weight\"] \/ (X_test[\"height\"]\/100)**2\nX_test_prepared = scaler.fit_transform(X_test)\n\nclf.fit(data_scaled, cardio_labels)\nfinal_predictions = clf.score(X_test_prepared, Y_test)\nprint(final_predictions)","4b2eb49d":"We can see that the feature that has the most effect on the prediction is age. ID has no relevance so we can drop this from our training set. Some of the other features don't appear to have much effect, particularly the 'subjective' ones. We may consider dropping these also. Since age is important I will plot a barchart of age in years. I will also add BMI as we have both height and weight"}}