{"cell_type":{"b118baff":"code","5798c8b8":"code","d5bd9e36":"code","f44020f9":"code","574cc36d":"code","8be64e3c":"code","06fbe05c":"code","aca9df7f":"code","457160d9":"code","508f6f49":"code","955f9d31":"code","5ed167b5":"code","0528c048":"code","3e45986b":"code","223bc9b5":"code","476c28d4":"code","162a11fa":"code","dd954f3f":"code","f7827225":"code","0e0047d3":"code","4d9f4082":"code","292e9191":"code","9a78160b":"code","da7181a9":"code","55d6c861":"code","d4d1aacf":"code","c1353c88":"code","62a81268":"code","855fe304":"code","4f3bb651":"code","0159efdf":"markdown","af463be2":"markdown","87221e3b":"markdown","5b77863d":"markdown","d28a4b08":"markdown","94a5f591":"markdown","f579d241":"markdown","644606bb":"markdown","473e5347":"markdown","9687bb53":"markdown","28dc65aa":"markdown","6d3199ea":"markdown","1b08ac13":"markdown","214467f2":"markdown","712a647f":"markdown","75168b15":"markdown","67e036cd":"markdown","e541ec24":"markdown","2389d109":"markdown","5e585889":"markdown"},"source":{"b118baff":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport re","5798c8b8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n\nfile_paths = []\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        file_paths.append(os.path.join(dirname, filename))\n        print(os.path.join(dirname, filename))\n","d5bd9e36":"def merge_files(file_paths=file_paths):\n    final_df = pd.DataFrame()\n    for file_path in file_paths:\n        df = pd.read_pickle(file_path)\n        df = pd.DataFrame(df)\n        \n        # Getting Stock Name\n        pattern = \"historical\\\/(.*?)\\-\"\n        stock_name = re.search(pattern, file_path).group(1)\n        \n        # Preprocessing\n        df['date'] = df['date'].apply(pd.to_datetime)\n        df['time'] = df['date'].dt.time\n        df['date'] = df['date'].dt.date\n        \n        temp = df.groupby(['date']).agg({'low':'min', 'high':'max', 'open':'first', 'close':'last', 'volume':'sum'})\n        temp = temp.reset_index()\n        temp['stock_name'] = stock_name\n        \n        final_df = final_df.append(temp, ignore_index=True)\n    \n    return final_df","f44020f9":"file_paths = [\n    '\/kaggle\/input\/bse-stocks-data-15-minute-interval-historical\/RELIANCE-15minute-Hist',\n    '\/kaggle\/input\/bse-stocks-data-15-minute-interval-historical\/TCS-15minute-Hist',\n    '\/kaggle\/input\/bse-stocks-data-15-minute-interval-historical\/WIPRO-15minute-Hist',\n    '\/kaggle\/input\/bse-stocks-data-15-minute-interval-historical\/ASIANPAINT-15minute-Hist',\n    '\/kaggle\/input\/bse-stocks-data-15-minute-interval-historical\/HDFC-15minute-Hist'\n]","574cc36d":"df_merged = merge_files(file_paths=file_paths)","8be64e3c":"ril_data = pd.read_pickle('\/kaggle\/input\/bse-stocks-data-15-minute-interval-historical\/RELIANCE-15minute-Hist')\nril_data = pd.DataFrame(ril_data)","06fbe05c":"ril_data.head()","aca9df7f":"ril_data.tail()","457160d9":"ril_data.isnull().sum()","508f6f49":"ril_data.describe()","955f9d31":"ril_data['date'] = ril_data['date'].apply(pd.to_datetime)\nril_data.head()","5ed167b5":"# Splitting date into date and time\ndf = ril_data.copy()\ndf['time'] = df['date'].dt.time\ndf['date'] = df['date'].dt.date\ndf.head()","0528c048":"temp1 = df.groupby(['date']).agg({'low':'min', 'high':'max', 'open':'first', 'close':'last', 'volume':'sum'})\n","3e45986b":"temp = df.groupby(['date']).mean()","223bc9b5":"fig = px.line(temp, x=temp.index, y='high')\n\nfig.update_layout(title='Reliance Stock Mean Data', xaxis_title='Date', yaxis_title='Mean of High for the day')\n\nfig.add_hline(y=np.average(temp['high']),\n              line={\n                  'color':'Orange',\n                  'dash':'dot'\n              },\n              annotation_text=f\"Mean:{np.average(temp['high'])}\")\n\nfig.add_vrect(x0=\"2018-06-28\", x1=\"2018-08-29\",\n              annotation_position=\"bottom right\",\n              annotation_text=\"Rise\",\n              fillcolor=\"Green\", opacity=0.2,\n              line_width=0\n             )\n\nfig.show()","476c28d4":"fig = go.Figure()\n\nfig.add_trace(go.Scatter(x=temp1.index, y=temp1['low'],\n                        mode='lines',\n                        name='Low',\n                        ))\n\nfig.add_trace(go.Scatter(x=temp1.index, y=temp1['high'],\n                        mode='lines',\n                        name='High',\n                        fill='tonexty'))\n\n\n\nfig.update_layout(title=\"Reliance Daily Stock Prices(2015-2019)\")\n\nfig.show()","162a11fa":"temp1.reset_index(inplace=True)\ntemp1['date'] = temp1['date'].apply(pd.to_datetime)","dd954f3f":"def add_missing_data(year):\n    \n    df = temp1.copy()\n    df = df[df['date'].dt.year == year]\n#     df['day_of_year'] = df['date'].dt.strftime('%j')\n    \n    dates = pd.date_range(start=f'{year}-01-01', end=f'{year}-12-31').to_frame()\n    dates = dates[~dates.index.isin(df['date'])]\n    dates = dates.reset_index()\n    \n    df = pd.merge(df, dates, left_on='date', right_on=0, how='outer').sort_values(by=['date'])\n    df = df.reset_index()\n    df = df.drop([0, 'level_0', 'index'], axis=1)\n    df.index += 1    \n    \n    return df","f7827225":"df_15 = add_missing_data(2015)\ndf_16 = add_missing_data(2016)\ndf_17 = add_missing_data(2017)\ndf_18 = add_missing_data(2018)\ndf_19 = add_missing_data(2019)","0e0047d3":"df_19[:128] = df_19[:128].fillna(method='ffill')","4d9f4082":"fig = make_subplots(rows=5, cols=1, start_cell=\"top-left\", vertical_spacing=0.02)\n\nfig.add_trace(go.Scatter(x=df_15['date'], y=df_15.fillna(method='ffill')['high'], name=2015), row=1, col=1)\n\nfig.add_trace(go.Scatter(x=df_16['date'], y=df_16.fillna(method='ffill')['high'], name=2016), row=2, col=1)\n\nfig.add_trace(go.Scatter(x=df_17['date'], y=df_17.fillna(method='ffill')['high'], name=2017), row=3, col=1)\n\nfig.add_trace(go.Scatter(x=df_18['date'], y=df_18.fillna(method='ffill')['high'], name=2018), row=4, col=1)\n\nfig.add_trace(go.Scatter(x=df_19['date'], y=df_19['high'], name=2019), row=5, col=1)\n\nfig.update_layout(height=1000, width=800, \n                  title=\"Reliance Stock Prices Yearly\",\n                  xaxis1=dict(\n                      showticklabels=False\n                  ),\n                  xaxis2=dict(\n                      showticklabels=False\n                  ),\n                  xaxis3=dict(\n                      showticklabels=False\n                  ),\n                  xaxis4=dict(\n                      showticklabels=False\n                  ),\n                  xaxis5_tickformat='%B',\n                 )","292e9191":"df_year = temp1.copy()\ndf_year['year'] = df_year['date'].dt.year\ndf_year = df_year.groupby(['year']).agg({'volume': 'sum'})\ndf_year","9a78160b":"fig = go.Figure()\n\nfig.add_trace(go.Bar(x=df_year.index, y=df_year.volume,\n                     marker_color=['#636EFA','#636EFA','#636EFA','#636EFA','#EF553B']\n                    ))\n\nfig.add_annotation(x=2019, y=700000000, \n                   text=\"Till May\", \n                   showarrow=False, \n                   opacity=0.7,\n                   font_color=\"white\"\n                  )\n\nfig.update_layout(title=\"Total Volume traded\", yaxis_title=\"Volume\")\nfig.show()","da7181a9":"fig = go.FigureWidget(make_subplots(specs=[[{\"secondary_y\": True}]]))\n\nfig.add_trace(go.Candlestick(x=temp1['date'],\n                             open=temp1['open'],\n                             high=temp1['high'],\n                             low=temp1['low'],\n                             close=temp1['close'],\n                             name=\"Stock Prices\"\n                            ), secondary_y=True)\n\nfig.add_trace(go.Bar(x=temp1['date'],\n                     y=temp1['volume'],\n                     name=\"Volume\"\n                     ), secondary_y=False)\n\nfig.update_layout(height=650, width=1000, title=\"Candlechart\", yaxis1_title=\"Volume\", yaxis2_title=\"Stock Prices(\u20b9)\")\n\n# def zoom(layout, xrange):\n#     in_view = temp1.loc[fig.layout.xaxis.range[0]:fig.layout.xaxis.range[1]]\n#     fig.layout.yaxis.range = [in_view['volume'].min() - 10, in_view['volume'].max() + 10]\n\n# fig.layout.on_change(zoom, 'xaxis.range')\n\nfig.show()","55d6c861":"fig = px.line(df_merged, x='date', y='high', color='stock_name')\n\nfig.update_layout(title=\"Stock Prices of Selected Stocks\", \n                  xaxis_title=\"Daily High\", \n                  yaxis_title=\"Date\", \n                  legend_title=\"Stocks\", \n                 )\n\nfig.show()","d4d1aacf":"def convert_df_to_yearly(file_paths=file_paths):\n    final_df = pd.DataFrame()\n    for file_path in file_paths:\n        df = pd.read_pickle(file_path)\n        df = pd.DataFrame(df)\n        \n        # Getting Stock Name\n        pattern = \"historical\\\/(.*?)\\-\"\n        stock_name = re.search(pattern, file_path).group(1)\n        \n        # Preprocessing\n        \n        df['date'] = df['date'].apply(pd.to_datetime)\n        df['time'] = df['date'].dt.time\n        df['year'] = df['date'].dt.strftime('%Y')\n        df['date'] = df['date'].dt.date\n        \n        temp = df.groupby(['year']).agg({'low':'min', 'high':'max', 'open':'first', 'close':'last', 'volume':'sum'})\n#         print(temp)\n        temp = temp.reset_index()\n#         temp.date = temp.date.apply(pd.to_datetime)\n#         temp = add_missing_data(temp, '2015-02-02', '2019-05-15')\n        temp = temp.reset_index()\n        temp['stock_name'] = stock_name\n        \n        final_df = final_df.append(temp, ignore_index=True)\n    \n    return final_df","c1353c88":"df_yearly = convert_df_to_yearly()","62a81268":"fig = px.bar(df_yearly, x=df_yearly['stock_name'], y=df_yearly['low'], \n             color=df_yearly['stock_name'], \n             animation_frame='year',\n             range_y=[0, 2500]\n            )\n\nfig.update_layout(title=\"Yearly change in Stock Prices\",\n                  showlegend=False,\n                  yaxis_title=\"Low(\u20b9)\",\n                  xaxis_title=\"Stocks\"\n                 )\n\nfig.show()","855fe304":"data = {\n        'Total Revenue':[383732.00, 301494.00, 255573.00, 236808.00, 335854.00,],\n        'Gross Profit':[57925.00, 55305.00, 49242.00, 44606.00, 37956.00],\n        'Net Profit':[35163.00, 33612.00, 31425.00, 27384.00, 22719.00]\n       }\nfinancials = pd.DataFrame(data, index=[2019, 2018, 2017, 2016, 2015])\nfinancials","4f3bb651":"fig = go.Figure()\n\nfig.add_trace(go.Bar(x=financials.index, y=financials['Total Revenue'].apply(lambda x: x \/ 10),\n                     name=\"Total Revenue(\u20b9 10x crores)\",\n                    ))\n\nfig.add_trace(go.Bar(x=financials.index, y=financials['Net Profit'],\n                     name=\"Net Profit(\u20b9 crores)\",\n                    ))\n\nfig.add_trace(go.Bar(x=df_yearly[df_yearly['stock_name'] == 'RELIANCE']['year'], \n                     y=df_yearly[df_yearly['stock_name'] == 'RELIANCE']['high'],\n                     name=\"Highest Stock Price(\u20b9)\",\n                    ))\n\nfig.show()","0159efdf":"<div style=\"font-family:verdana; \n            text-align:center; \n            font-weight:bold; \n            display:fill; \n            background-color:#5642C5;\n            color:white;\n            border-radius:5px\">\n    <h1 style=\"padding:20px 10px\">Reliance Industries Stock Prices - EDA<\/h1>\n<\/div>","af463be2":"# Importing Libraries \ud83d\udcda","87221e3b":"<div class=\"alert alert-info\">\n    <strong>\ud83d\udccc Converting 15 min interval data to mean data for 1 day<\/strong>\n    <p>\n        Convert the 15 min interval data for each column into mean data for each of the columns for that complete day. This is not correct way for grouping this kind of problem, the previous <code>temp1<\/code> dataframe is more appropriate.\n    <\/p>\n<\/div>","5b77863d":"<div class=\"alert alert-info\">\n    <strong>\ud83d\udccc Converting the data with 15 min interval to 1 day interval<\/strong>\n    <p>\n        <li>df['open'] = Open price at start of day | when time==9.15\n        <li>df['high'] = Max value in 'high' fot the whole day\n        <li>df['low] = Min value in 'low' for the whole day\n        <li>df['close'] = Close price at end of day | when time==5.15\n        <li>df['volume'] = Sum of volume for the entire day\n    <\/p>\n<\/div>","d28a4b08":"<div class=\"alert alert-info\">\n    <strong>\ud83d\udccc Add missing dates<\/strong>\n    <p>Add missing dates in the data for each year for the sake of plotting for each year with uniformity. Also, fill the missing values with vlaue from the previous day.<\/p>\n<\/div>","94a5f591":"<!-- ![Reliance](https:\/\/upload.wikimedia.org\/wikipedia\/en\/thumb\/9\/99\/Reliance_Industries_Logo.svg\/375px-Reliance_Industries_Logo.svg.png) -->\n<div align=center>\n    <img src=https:\/\/upload.wikimedia.org\/wikipedia\/en\/thumb\/9\/99\/Reliance_Industries_Logo.svg\/375px-Reliance_Industries_Logo.svg.png>\n<\/div>","f579d241":"# Loading Data \u23f3","644606bb":"<div class=\"alert alert-info\">\n    <strong>\ud83d\udccc Reliance Financial (2015-2019)<\/strong>\n    <p>Financial features for Reliance procured from reliable resources available on the web. These features impact the stock prices of the company.<\/p>\n<\/div>","473e5347":"<div style=\"font-family:verdana;\">\n    <blockquote>\n        Reliance Industries Limited (RIL) is an Indian multinational conglomerate headquartered in Mumbai. Reliance owns businesses across India engaged in energy, petrochemicals, textiles, natural resources, retail, and telecommunications. Reliance is one of the most profitable companies in India, the largest publicly traded company in India by market capitalisation, and the largest company in India as measured by revenue after recently surpassing the government-controlled Indian Oil Corporation. It is also the eighth largest employer in India with nearly 195,000 employees. On 10 September 2020, Reliance Industries became the first Indian company to cross $200 billion in market capitalisation.\n    <\/blockquote>\n<\/div>","9687bb53":"<!-- ![Plotly](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/37\/Plotly-logo-01-square.png\/330px-Plotly-logo-01-square.png) -->\n<div align=center>\n    <img src=https:\/\/upload.wikimedia.org\/wikipedia\/commons\/thumb\/3\/37\/Plotly-logo-01-square.png\/330px-Plotly-logo-01-square.png>\n<\/div>","28dc65aa":"\n<div align=center>\n    <img src=https:\/\/i.imgur.com\/lbVlAYr.png>\n<\/div>","6d3199ea":"-----------------","1b08ac13":"# Preprocessing \u2692","214467f2":"*************","712a647f":"*****************","75168b15":"# EDA \ud83d\udcc8","67e036cd":"<div class=\"alert alert-info\">\n    <strong>\ud83d\udccc Merging Dataframes<\/strong>\n    <p>Read and merge dataframes of selected companies with <code>Reliance<\/code> data. The selected stocks are <code>TCS<\/code>, <code>Wipro<\/code>, <code>Asian Paints<\/code> and <code>HDFC<\/code>. These stocks are in the similar range as that of Reliance. This merged dataset will be used to compare the stocks of these companies with Reliance.<\/p>\n<\/div>","e541ec24":"<div style=\"font-family:verdana;\">\n    <center><h1>About the data \ud83d\udcc3<\/h1><\/center>\n    <br>\n    <blockquote>\n        The dataset contains individual files for each stock in the BSE(Bombay Stock Exchange) at an interval of 15 minutes. It contains stock in formation for the interval i.e. <code>high<\/code>, <code>low<\/code>, <code>open<\/code>, <code>close<\/code> and <code>volume<\/code>. This notebook focuses on the stock data for Reliance Industries Limited.\n    <\/blockquote>\n    <blockquote>\n        <li>high - Highest price in the interval\n        <li>low - Lowest price in the interval\n        <li>open - Price at start of the interval\n        <li>close - Price at closing of the interval\n        <li>volume - Quantity of stocks traded in the interval\n    <\/blockquote>\n<\/div>","2389d109":"<center><h3><br>Thank You! Upvote if you liked or learned.<br><br> Feel free to comment any suggestions or improvements.<\/h3><\/center>","5e585889":"<div style=\"font-family:verdana;\">\n    <blockquote>\n        Plotly is a technical computing company headquartered in Montreal, Quebec, that develops online data analytics and visualization tools. Plotly provides online graphing, analytics, and statistics tools for individuals and collaboration, as well as scientific graphing libraries for Python, R, MATLAB, Perl, Julia, Arduino, and REST.\n        Plotly was founded by Alex Johnson, Jack Parmer, Chris Parmer, and Matthew Sundquist.\n        The Boston Globe and Washington Post newsrooms have produced data journalism using Plotly. In 2020, Plotly was named a Best Place to Work by the Canadian SME National Business Awards, and nominated as Business of the Year.\n    <\/blockquote>\n    <blockquote>\n        Plotly was founded by Alex Johnson, Jack Parmer, Chris Parmer, and Matthew Sundquist.\n    <\/blockquote>\n    <blockquote>\n        The Boston Globe and Washington Post newsrooms have produced data journalism using Plotly. In 2020, Plotly was named a Best Place to Work by the Canadian SME National Business Awards, and nominated as Business of the Year.\n    <\/blockquote>\n<\/div>"}}