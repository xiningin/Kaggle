{"cell_type":{"c19b0354":"code","5a3b2ae2":"code","e57401bb":"code","394fe5f6":"code","97b6337c":"code","57eb50df":"code","62b6b30b":"code","1e9f997c":"code","78babb56":"code","7635940a":"code","ff7ddd32":"code","8906ca89":"code","0b7936f2":"code","83fe566c":"code","b1244c6e":"code","3c069f28":"markdown","0459392d":"markdown","5165a4ef":"markdown","401fbfdf":"markdown","2935f722":"markdown","138d85e3":"markdown","643d2505":"markdown","084ee91a":"markdown","1b0f92f9":"markdown","5a027bd4":"markdown","8baecdfa":"markdown","e6a92008":"markdown","4b93808a":"markdown","bd179d19":"markdown","bcadbd65":"markdown"},"source":{"c19b0354":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt","5a3b2ae2":"data = pd.read_csv('..\/input\/linear-regression-dataset\/Linear Regression - Sheet1.csv')","e57401bb":"data.head()","394fe5f6":"fig = plt.figure()\nax = fig.add_subplot(1,1,1)\n\nax.plot(data['X'], data['Y'])\nax.set_xlabel('input - x')\nax.set_ylabel('target - y')\nplt.show()","97b6337c":"data.tail()","57eb50df":"data = data.iloc[:298]","62b6b30b":"fig = plt.figure()\nax = fig.add_subplot(1,1,1)\n\nax.plot(data['X'], data['Y'])\nax.set_xlabel('input - x')\nax.set_ylabel('target - y')\nplt.show()","1e9f997c":"\nX = data['X'].to_numpy().reshape(-1, 1)\ny = data['Y'].to_numpy()\n","78babb56":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X ,y , test_size=0.3, random_state = 2)","7635940a":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression()","ff7ddd32":"from sklearn.model_selection import cross_val_score\n\nscores = cross_val_score(model, X_train, y_train, cv= 5)\nprint(scores)","8906ca89":"model.fit(X_train, y_train)","0b7936f2":"y_pred = model.predict(X_test)","83fe566c":"from sklearn.metrics import mean_squared_error, r2_score\n\nMSE = mean_squared_error(y_test, y_pred)\nr2 = r2_score(y_test, y_pred)\n\nprint('Mean squared error: ', MSE)\nprint('R2 Score: ', r2)","b1244c6e":"print('Slope :', model.coef_)\nprint('Intercept :',model.intercept_)\n\nprint('The line is of the form \"y = ({:.3f}) * x + {:.3f}\"'.format(model.coef_[0], model.intercept_))","3c069f28":"load the data","0459392d":"Evaluate the predictions by using different metrics. \n\nMean squared error or R2 score can be used as metrics for Regression analysis.","5165a4ef":"Fitting the model on training data","401fbfdf":"Making predictions on test data","2935f722":"Explore the data","138d85e3":"Ignoring the last two values, as they seem to not lie on the line and may effect the performance of the model. ","643d2505":"The Mean square error should be as close to zero as possible and the R2 Score should be as close as to 1 as possible. Since this is a simple task, the results are extremely satisfying. But in most cases it takes time and effort to figure the right hyper-parameters which give the best performance.","084ee91a":"Visualize Data","1b0f92f9":"Getting model attributes. In this case the slope and intercept.","5a027bd4":"The end of the line is not obeying y=mx+c","8baecdfa":"Splitting the data into training and testing set","e6a92008":"Initializing the model","4b93808a":"Import required libraries","bd179d19":"Evaluating the performance of model using cross validation","bcadbd65":"This notebook shows how to approach any machine learning problem. As this is a simple Linear Regression problem and where everyone starts. I just wanted to show the kind of workflow when trying to solve machine learning problems. "}}