{"cell_type":{"b31da70a":"code","a4eee419":"code","48c48581":"code","9145027a":"code","95cdab7f":"code","6fca70f5":"code","1766b65e":"code","96edca69":"code","cc95f0ee":"code","a8fdd915":"code","97c5488a":"code","73be7c59":"code","a92ce07b":"code","6447c70e":"code","5677c38a":"code","96c6b192":"code","a1d695e3":"code","0a3cfcd5":"code","9c0be26d":"code","a8519b47":"code","38f961ba":"code","ff03bd19":"code","acacd8e1":"code","1a571338":"code","97215e2d":"code","5c4e2aea":"code","3a62c0f5":"code","3eabf021":"code","097f3393":"code","265c0bf2":"code","9cece0d9":"code","ab229afe":"code","695e89fc":"code","c023a36d":"code","bc350505":"markdown"},"source":{"b31da70a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a4eee419":"data_train = pd.read_csv(\"..\/input\/train.csv\")\ndata_test = pd.read_csv(\"..\/input\/test.csv\")\ncombine = [data_train,data_test]","48c48581":"data_train","9145027a":"data_train.info()","95cdab7f":"data_train.describe()","6fca70f5":"#coding:utf-8\nimport matplotlib.pyplot as plt\nfig = plt.figure(figsize=(30,10))\nfig.set(alpha=0.2)#\u56fe\u8868alpha\u53c2\u6570\nplt.subplot2grid((2,3),(0,0))\ndata_train.Survived.value_counts().plot(kind=\"bar\")\nplt.title(\"The number of surviving(1 for survived)\")\nplt.ylabel(\"numbers of passengers\")\n\nplt.subplot2grid((2,3),(0,1))\ndata_train.Pclass.value_counts().plot(kind=\"bar\")\nplt.title(\"the Pclass of passengers\")\nplt.ylabel(\"numbers of passengers\")\n\nplt.subplot2grid((2,3),(0,2))\nplt.scatter(data_train.Survived, data_train.Age)\nplt.ylabel(u\"age\")                         # \u8bbe\u5b9a\u7eb5\u5750\u6807\u540d\u79f0\nplt.grid(b=True, which='major', axis='y') \nplt.title(u\"survived by age (1 for survived)\")\n\nplt.subplot2grid((2,3),(1,0), colspan=2)\ndata_train.Age[data_train.Pclass == 1].plot(kind='kde')   \ndata_train.Age[data_train.Pclass == 2].plot(kind='kde')\ndata_train.Age[data_train.Pclass == 3].plot(kind='kde')\nplt.xlabel(u\"age\")# plots an axis lable\nplt.ylabel(u\"density\") \nplt.title(u\"passengers' age by Pclass\")\nplt.legend((u'top', u'2',u'3'),loc='best') # sets our legend for our graph.\n\nplt.subplot2grid((2,3),(1,2))\ndata_train.Embarked.value_counts().plot(kind='bar')\nplt.title(u\"the number embarked from differet harbors\")\nplt.ylabel(u\"numbers\")\n\nplt.show()","1766b65e":"#\u4e0d\u540c\u6027\u522b\u5bf9\u662f\u5426\u83b7\u6551\u7684\u5f71\u54cd\nfig = plt.figure()\nfig.set(alpha=0.2)\n\nSurvived_m = data_train.Survived[data_train.Sex == 'male'].value_counts()\nSurvived_f = data_train.Survived[data_train.Sex == 'female'].value_counts()\ndf = pd.DataFrame({'female':Survived_f,'male':Survived_m})\ndf.plot(kind=\"bar\",stacked=\"True\")\nplt.title(\"Survived by different sex\")\nplt.xlabel(\"sex\")\nplt.ylabel(\"numbers\")\n\nplt.show()","96edca69":"#\u4e0d\u540c\u8231\u7b49\u7ea7\u5bf9\u662f\u5426\u83b7\u6551\u7684\u5f71\u54cd\nfig = plt.figure()\nfig.set(alpha=0.2)\nSurvived_0 = data_train.Pclass[data_train.Survived == 0].value_counts()\nSurvived_1 = data_train.Pclass[data_train.Survived == 1].value_counts()\ndf = pd.DataFrame({'Survived':Survived_1,'not Survived':Survived_0})\ndf.plot(kind=\"bar\",stacked=\"True\")\nplt.title(\"Survived by different class\")\nplt.xlabel(\"class\")\nplt.ylabel(\"numbers\")\n\nplt.show()\n\n","cc95f0ee":"#\u4e0d\u540c\u8231\u7ea7\u522b\u7537\u5973\u83b7\u6551\u60c5\u51b5\nfig = plt.figure(figsize=(30,20))\nfig.set(alpha=0.65)\nplt.title(\"Survived by class and by age\")\n\nax1=fig.add_subplot(141)\nS1=data_train.Survived[data_train.Sex=='female'][data_train.Pclass != 3].value_counts()\nS1.plot(kind='bar',label='female highclass',color='#FA2479')\nax1.set_xticklabels([u\"Survived\", u\"not Survived\"], rotation=0)\nax1.legend([u\"female\/high class\"], loc='best')\n\nax2=fig.add_subplot(142)\nS2=data_train.Survived[data_train.Sex=='male'][data_train.Pclass != 3].value_counts()\nS2.plot(kind='bar',label='male highclass',color='pink')\nax2.set_xticklabels([u\"Survived\", u\"not Survived\"], rotation=0)\nax2.legend([u\"male\/high class\"], loc='best')\n\nax3=fig.add_subplot(143)\nS3=data_train.Survived[data_train.Sex=='female'][data_train.Pclass == 3].value_counts()\nS3.plot(kind='bar',label='female lowclass',color='lightblue')\nax3.set_xticklabels([u\"Survived\", u\"not Survived\"], rotation=0)\nax3.legend([u\"female\/low class\"], loc='best')\n\nax4=fig.add_subplot(144)\nS4=data_train.Survived[data_train.Sex=='male'][data_train.Pclass == 3].value_counts()\nS4.plot(kind='bar',label='male lowclass',color='steelblue')\nax4.set_xticklabels([u\"Survived\", u\"not Survived\"], rotation=0)\nax4.legend([u\"male\/low class\"], loc='best')\n\n","a8fdd915":"#\u4e0d\u540c\u6e2f\u53e3\u5bf9\u662f\u5426\u83b7\u6551\u7684\u5f71\u54cd\nfig = plt.figure()\nfig.set(alpha=0.2)  # \u8bbe\u5b9a\u56fe\u8868\u989c\u8272alpha\u53c2\u6570\n\nSurvived_0 = data_train.Embarked[data_train.Survived == 0].value_counts()\nSurvived_1 = data_train.Embarked[data_train.Survived == 1].value_counts()\ndf=pd.DataFrame({u'Survived':Survived_1, u'not Survived':Survived_0})\ndf.plot(kind='bar', stacked=True)\nplt.title(u\"Survived by different harbors\")\nplt.xlabel(u\"harbor\") \nplt.ylabel(u\"numbers\") \n\nplt.show()","97c5488a":"#\ng = data_train.groupby(['SibSp','Survived'])\ndf = pd.DataFrame(g.count()['PassengerId'])\nprint(df)\n\ng = data_train.groupby(['Parch','Survived'])\ndf = pd.DataFrame(g.count()['PassengerId'])\nprint(df)","73be7c59":"data_train.Cabin.value_counts()","a92ce07b":"#\u4f7f\u7528 RandomForestClassifier \u586b\u8865\u7f3a\u5931\u7684\u5e74\u9f84\u5c5e\u6027\nfrom sklearn.ensemble import RandomForestRegressor\ndef get_rfr(df):\n\n    # \u628a\u5df2\u6709\u7684\u6570\u503c\u578b\u7279\u5f81\u53d6\u51fa\u6765\u4e22\u8fdbRandom Forest Regressor\u4e2d\n    age_df = df[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]\n\n    # \u4e58\u5ba2\u5206\u6210\u5df2\u77e5\u5e74\u9f84\u548c\u672a\u77e5\u5e74\u9f84\u4e24\u90e8\u5206\n    known_age = age_df[age_df.Age.notnull()].values\n#     unknown_age = age_df[age_df.Age.isnull()].values\n    # y\u5373\u76ee\u6807\u5e74\u9f84\n    y = known_age[:, 0]\n\n    # X\u5373\u7279\u5f81\u5c5e\u6027\u503c\n    X = known_age[:, 1:]\n\n    # fit\u5230RandomForestRegressor\u4e4b\u4e2d\n    rfr = RandomForestRegressor(random_state=0, n_estimators=2000, n_jobs=-1)\n    rfr.fit(X, y)\n    return rfr\n\n    \ndef set_missing_ages(rfr,df):\n    df.loc[(df.Fare.isnull(),'Fare')]=0\n    age_df = df[['Age','Fare', 'Parch', 'SibSp', 'Pclass']]\n    unknown_age = age_df[age_df.Age.isnull()].values    \n    predictedAges = rfr.predict(unknown_age[:, 1::])\n\n    # \u7528\u5f97\u5230\u7684\u9884\u6d4b\u7ed3\u679c\u586b\u8865\u539f\u7f3a\u5931\u6570\u636e\n    df.loc[ (df.Age.isnull()), 'Age' ] = predictedAges \n    return df\n\n    \n\n# def set_Cabin_type(df):\n#     df.loc[ (df.Cabin.notnull()), 'Cabin' ] = \"Yes\"\n#     df.loc[ (df.Cabin.isnull()), 'Cabin' ] = \"No\"\n#     return df\n# data_train = set_Cabin_type(data_train)\nrfr = get_rfr(data_train)\ndata_train = set_missing_ages(rfr,data_train)\ndata_test = set_missing_ages(rfr,data_test)\n","6447c70e":"#\u6e2f\u53e3\u767b\u9646\u4fe1\u606ftrain_data\u7f3a\u59312\u4e2a,\u7528S(\u6700\u901a\u7528)\u586b\u8865\ndata_train.loc[data_train.Embarked.isnull(),'Embarked']='S'\ndata_train.info()\ncombine = [data_train,data_test]","5677c38a":"data_train.info()\ndata_test.info()","96c6b192":"#\u52a0\u4e00\u4e2achild\u7684\u7279\u5f81 \u5e74\u9f84\u5c0f\u4e8e14\u5c81\ncombine=[data_train,data_test]\n\n# for dataset in combine:\n#     dataset['isChild']=0\n#     dataset.loc[dataset['Age']<=14,'isChild']=1\n# data_train.shape","a1d695e3":"#\u878d\u5408 SibSp\u548cPArch\u4e3a\u4e00\u4e2afamliysize\u7279\u5f81\nfor dataset in combine:\n    dataset['FamliySize']=dataset['SibSp']+dataset['Parch']+1\ndata_train.head()","0a3cfcd5":"for dataset in combine:\n    dataset.loc[dataset['Sex']=='male','Sex'] = 0 \n    dataset.loc[dataset['Sex']=='female','Sex'] = 1\ndata_train.head()","9c0be26d":"#\u52a0\u4e00\u4e2aisAlone\u7279\u5f81\nfor dataset in combine:\n    dataset['isAlone']=0\n    dataset.loc[dataset['FamliySize']==1,'isAlone'] = 1    \ndata_train","a8519b47":"#\u5e74\u9f84\u5206\u6bb5\u5212\u52060-80\u5c81\nfor dataset in combine:\n    dataset['AgeBand']='0'\n    dataset.loc[(dataset['Age']>0)&(dataset['Age']<16),'AgeBand']=0\n    dataset.loc[(dataset['Age']>=16)&(dataset['Age']<32),'AgeBand']=1\n    dataset.loc[(dataset['Age']>=32)&(dataset['Age']<48),'AgeBand']=2\n    dataset.loc[(dataset['Age']>=48)&(dataset['Age']<64),'AgeBand']=3\n    dataset.loc[(dataset['Age']>=64),'AgeBand']=4\ndata_train.info()\n    ","38f961ba":"# #\u7279\u5f81\u56e0\u5b50\u5316 data_train\n# dummies_Embarked  = pd.get_dummies(data_train['Embarked'],prefix='Embarked')\n\n# dummies_Sex = pd.get_dummies(data_train['Sex'],prefix='Sex')\n\n# dummies_Pclass = pd.get_dummies(data_train['Pclass'],prefix = 'Pclass')\n\n# dummies_isChild = pd.get_dummies(data_train['isChild'],prefix = 'isChild')\n\n# dummies_FamliySize =pd.get_dummies(data_train['FamliySize'],prefix = 'FamliySize')\n\n# dummies_isAlone =pd.get_dummies(data_train['isAlone'],prefix = 'isAlone')\n\n# dummies_AgeBand =pd.get_dummies(data_train['AgeBand'],prefix = 'AgeBand')\n\n# data_train = pd.concat([data_train,dummies_Embarked,dummies_Sex,dummies_Pclass,dummies_isChild,dummies_FamliySize,dummies_isAlone,dummies_AgeBand],axis=1)\n    \n# data_train.head()","ff03bd19":"# #\u7279\u5f81\u56e0\u5b50\u5316 data_test\n# dummies_Embarked  = pd.get_dummies(data_test['Embarked'],prefix='Embarked')\n\n# dummies_Sex = pd.get_dummies(data_test['Sex'],prefix='Sex')\n\n# dummies_Pclass = pd.get_dummies(data_test['Pclass'],prefix = 'Pclass')\n\n# dummies_isChild = pd.get_dummies(data_test['isChild'],prefix = 'isChild')\n\n# dummies_FamliySize =pd.get_dummies(data_test['FamliySize'],prefix = 'FamliySize')\n\n# dummies_isAlone =pd.get_dummies(data_test['isAlone'],prefix = 'isAlone')\n\n# dummies_AgeBand =pd.get_dummies(data_test['AgeBand'],prefix = 'AgeBand')\n\n# data_test = pd.concat([data_test,dummies_Embarked,dummies_Sex,dummies_Pclass,dummies_isChild,dummies_FamliySize,dummies_isAlone,dummies_AgeBand],axis=1)\n    \n# data_test.info()","acacd8e1":"data_train.drop(['PassengerId','Name','Sex','Age','SibSp','Parch','Ticket','Cabin','Embarked'],axis=1,inplace=True)\ndata_test.drop(['Pclass','Name','Sex','Age','SibSp','Parch','Ticket','Cabin','Embarked',], axis=1, inplace=True)\n","1a571338":"train_df = data_train\ntest_df = data_test","97215e2d":"# #\u5f52\u4e00\u5316\n# import sklearn.preprocessing as preprocessing\n# scaler = preprocessing.StandardScaler()\n# age_scale_param = scaler.fit(train_df['Age'].values.reshape(-1,1))\n# train_df['Age_scaled']= scaler.fit_transform(train_df['Age'].values.reshape(-1,1),age_scale_param)\n# fare_scale_param = scaler.fit(train_df['Fare'].values.reshape(-1,1))\n# train_df['Fare_scaled'] = scaler.fit_transform(train_df['Fare'].values.reshape(-1,1),fare_scale_param)\n# train_df","5c4e2aea":"# test_df['Age_scaled'] = scaler.fit_transform(test_df['Age'].values.reshape(-1,1), age_scale_param)\n# test_df['Fare_scaled'] = scaler.fit_transform(test_df['Fare'].values.reshape(-1,1), fare_scale_param)\n# test_df","3a62c0f5":"#\u4f7f\u7528sklearn\u91cc\u7684bagging \u6a21\u578b\u878d\u5408\nfrom sklearn.ensemble import BaggingRegressor\nfrom sklearn import linear_model\n\n# train_df = train_df.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Embarked_.*|Sex_.*|Pclass_.*')\n# train_np = train_df.values\ny = train_df.values[:,0]\nX = train_df.values[:,1::]\nclf = linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)\nbagging_clf = BaggingRegressor(clf,n_estimators=20,max_samples=0.8,n_jobs=-1)\nbagging_clf.fit(X,y)\n\n# test = test_df.filter(regex='Age_.*|SibSp|Parch|Fare_.*|Embarked_.*|Sex_.*|Pclass_.*')\npredictions = bagging_clf.predict(test_df)\nresult = pd.DataFrame({'PassengerId':test_df['PassengerId'].values,'Survived':predictions.astype(np.int32)})\nresult.to_csv('bagging_submission.csv',index = False)","3eabf021":"#\u4f7f\u7528sklearn\u4e2d\u5f97\u5230LogisticsRegression\u5efa\u6a21\nfrom sklearn import linear_model\ny = train_df.values[:,0]\nX = train_df.values[:,1::]\n\nclf= linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)\nclf.fit(X,y)\nclf","097f3393":"\n# test = test_df.filter(regex='Age_.*|SibSp|Parch|Fare_.*|Embarked_.*|Sex_.*|Pclass_.*')\n# predictions = clf.predict(test)\n# result = pd.DataFrame({'PassengerId':data_test['PassengerId'].values,'Survived':predictions.astype(np.int32)})\n# result","265c0bf2":"# result.to_csv('Submission.csv',index=False)","9cece0d9":"pd.DataFrame({\"columns\":list(train_df.columns)[1:],\"coef\":list(clf.coef_.T)})","ab229afe":"# #\u67e5\u770b\u6253\u5206\u60c5\u51b5\n# from sklearn import cross_validation\n# clf =linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)\n# all_data = train_df.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Embarked_.*|Sex_.*|Pclass_.*')\n# X = all_data.values[:,1:]\n# y = all_data.values[:,0]\n# print (cross_validation.cross_val_score(clf,X,y,cv=5))\n","695e89fc":"# #\u5206\u5272\u6570\u636e \u8bad\u7ec3\u6570\u636e:cv\u6570\u636e=7:3\n# split_train,split_cv = cross_validation.train_test_split(train_df,test_size=0.3,random_state=0)\n# split_train_df =split_train.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Embarked_,*|Sex_.*|Pclass_.*')\n# #\u751f\u6210,\u6a21\u578b\n# clf = linear_model.LogisticRegression(C=1.0,penalty='l1',tol=1e-6)\n# X =split_train_df.values[:,1:]\n# y = split_train_df.values[:,0]\n# clf.fit(X,y)\n# #\u5bf9cross validation\u6570\u636e\u8fdb\u884c\u9884\u6d4b\n# split_cv_df = split_cv.filter(regex='Survived|Age_.*|SibSp|Parch|Fare_.*|Embarked_.*|Sex_.*|Pclass_.*')\n# predictions = clf.predict(split_cv_df.values[:,1:])\n\n# origin_data_train = pd.read_csv(\"..\/input\/train.csv\")\n# bad_cases = origin_data_train.loc[origin_data_train['PassengerId'].isin(split_cv[predictions!=split_cv_df.values[:,0]]['PassengerId'].values)]\n# bad_cases\n","c023a36d":"# # \u6839\u636e\u5b66\u4e60\u66f2\u7ebf\u5224\u65ad\u6a21\u578b\u72b6\u6001 \u8fc7\u62df\u5408 \u6b20\u62df\u5408\n# import numpy as np \n# import matplotlib.pyplot as plt\n# from sklearn.learning_curve import learning_curve\n\n# #\u7528sklearn\u7684learning_curve\u5f97\u5230training_score, \u4f7f\u7528matplot\u753b\u51falearning curve\n# def plot_learning_curve(estimator,title,X,y,ylim=None,cv=None,n_jobs=1,train_sizes=np.linspace(.05,1.,20),verbose=0,plot=True):\n#     \"\"\"\n#     \u753b\u51fadata\u5728\u67d0\u6a21\u578b\u4e0a\u7684learning curve\n#     \u53c2\u6570\u8bf4\u660e:\n#     ----------------------------------\n#     estimateor:\u4f60\u7528\u7684\u5206\u7c7b\u5668\n#     title: \u6807\u9898\n#     X : \u8f93\u5165\u7684feature,numpy\u7c7b\u578b\n#     y : \u8f93\u5165\u7684target \n#     ylim  : tuple\u683c\u5f0f\u7684(ymin,ymax),\u8bbe\u5b9a\u56fe\u50cf\u4e2d\u5750\u6807\u7684\u6700\u9ad8\u70b9\u548c\u6700\u4f4e\u70b9\n#     cv :\u505across validation\u7684\u65f6\u5019,\u6570\u636e\u5206\u6210\u7684\u4efd\u6570 ,\u9ed8\u8ba4\u662f3\u4efd\n#     n_jobs:\u5e76\u884c\u7684\u4efb\u52a1\u6570(\u9ed8\u8ba41)\n#     \"\"\"\n#     train_sizes,train_scores,test_scores = learning_curve(estimator,X,y,cv=cv,n_jobs=n_jobs,train_sizes=train_sizes,verbose=verbose)\n#     train_scores_mean  = np.mean(train_scores,axis=1)\n#     train_scores_std = np.std(train_scores,axis=1)\n#     test_scores_mean = np.mean(test_scores,axis=1)\n#     test_scores_std = np.std(test_scores,axis=1)\n    \n#     if plot:\n#         plt.figure()\n#         plt.title(title)\n#         if ylim is not None:\n#             plt.ylim(*ylim)\n#         plt.xlabel('train samples')\n#         plt.ylabel('score')\n# #         plt.gca().invert_yaxis()\n#         plt.grid()\n        \n#         plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, \n#                          alpha=0.1, color=\"b\")\n#         plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, \n#                          alpha=0.1, color=\"r\")\n#         plt.plot(train_sizes, train_scores_mean, 'o-', color=\"b\", label=u\"scores on train dataset\")\n#         plt.plot(train_sizes, test_scores_mean, 'o-', color=\"r\", label=u\"scores on cv dataset\")\n\n#         plt.legend(loc=\"best\")\n\n#         plt.draw()\n#         plt.show()\n# #         plt.gca().invert_yaxis()\n\n#     midpoint = ((train_scores_mean[-1] + train_scores_std[-1]) + (test_scores_mean[-1] - test_scores_std[-1])) \/ 2\n#     diff = (train_scores_mean[-1] + train_scores_std[-1]) - (test_scores_mean[-1] - test_scores_std[-1])\n#     return midpoint, diff\n        \n# plot_learning_curve(clf, u\"learning curve\", X, y)","bc350505":"###C\u6e2f\u53e3\u597d\u50cf\u6d3b\u7684\u591a\u70b9"}}