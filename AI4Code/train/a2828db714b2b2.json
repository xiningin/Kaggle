{"cell_type":{"a9daad0a":"code","d50d913d":"code","753b17ff":"code","9c7c9450":"code","c6221b82":"code","cb049005":"code","ca0f13cb":"code","9ecec2f8":"code","94f841c5":"code","4c928073":"code","ca9bed0d":"code","0038b5be":"code","310a3b05":"code","74726e17":"code","a96c17e6":"code","46a82ff2":"code","6d9d5379":"code","3c12169b":"code","e4f3ca07":"code","83b7e77e":"code","576c2e39":"code","d17dd686":"code","5678cad6":"code","e5f0f3ab":"code","d76acf05":"code","d97ec10b":"code","7cb2b2e9":"code","9600077a":"code","d2b62217":"code","61e0c9c3":"code","f4b9f280":"code","bbfdcc32":"code","ddc24d20":"code","83fccff1":"code","ff376268":"code","d0db63bc":"code","1a3da9f9":"code","5fb1e21b":"code","20e53596":"code","d2a71345":"code","8f6c3b55":"code","be84f304":"code","1379ffd6":"code","d08da5ce":"code","997392ba":"code","36187f82":"code","c8dce2eb":"code","a8b4cac9":"code","f3b64c38":"code","d7ba6e43":"code","aab12e9f":"code","733797cd":"code","476fbbd1":"markdown","6ea0ceb8":"markdown","0edf4b8c":"markdown","3d40e992":"markdown","99c519b6":"markdown","685d8ca8":"markdown","1882ecdf":"markdown","8bfdcfc8":"markdown","3572905b":"markdown","2ab4f1d6":"markdown","b0131aee":"markdown","f2feb0db":"markdown","1d7ff8df":"markdown","c8faf7f9":"markdown","9eff6062":"markdown","8dec48a0":"markdown","d40fb53b":"markdown","cc9e52b0":"markdown","9f38b0ad":"markdown","9a88cbdb":"markdown","0b90a5a4":"markdown","3b82cc07":"markdown","39723732":"markdown","2428af9c":"markdown","22b85055":"markdown","7ee30c6d":"markdown","1180967d":"markdown","cac1f7bd":"markdown","dfb4f8b7":"markdown","f77f259e":"markdown","e12e7181":"markdown","c1a97714":"markdown","12aab066":"markdown","ea7a505c":"markdown","d8c45d2c":"markdown","a71cd92b":"markdown","3d5ca0cc":"markdown","ef89c443":"markdown","80299a57":"markdown","308748aa":"markdown","78fcf805":"markdown","5407ba0e":"markdown","2c9bbb0e":"markdown","6e8ea2e3":"markdown","810abcef":"markdown","c9ea45a7":"markdown","598c8f6d":"markdown","e274f217":"markdown"},"source":{"a9daad0a":"# data processing tools \nimport numpy as np \nimport pandas as pd \n\n# for visualization puposes \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n# sns.set(style=\"white\", color_codes=True)\n\n# To supress any warnings. If you want to see the warnings just comment below two lines.\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nprint(os.listdir(\"..\/input\"))","d50d913d":"# We will import the .csv format data\n# we could have used sqlite database and with some changes it would be same\niris = pd.read_csv(\"..\/input\/Iris.csv\")\n\n# Showing top 5 (by default) rows of our data\niris.head()","753b17ff":"iris.info()","9c7c9450":"stats = iris.describe()\nstats","c6221b82":"# axis=1 means dropping a colum\n# inplace=True does changes in place (intuitive :P)\niris.drop(labels=[\"Id\"], axis=1, inplace=True)\n# iris = iris.drop(labels=[\"Id\"], axis = 1)\niris.columns = [\"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\", \"Species\"]\niris.head()","cb049005":"print(iris.shape)","ca0f13cb":"print(\"What categories are there and how many instances for each category?\\n\")\nprint(iris[\"Species\"].value_counts())\nprint(\"\\n\\nWhat are the unique categories?\")\nprint(iris[\"Species\"].unique())\n# How many unique values are there\nprint(\"\\n\\nHow many unique categories there are?\")\nprint(iris[\"Species\"].nunique())\nprint(\"\\n\\nWhat is the shape of our dataframe?\")\nprint(iris.shape)","9ecec2f8":"iris.loc[iris[\"Species\"] == \"Iris-setosa\", [\"Species\"]] = \"Setosa\"\niris.loc[iris[\"Species\"] == \"Iris-virginica\", [\"Species\"]] = \"Virginica\"\niris.loc[iris[\"Species\"] == \"Iris-versicolor\", [\"Species\"]] = \"Versicolor\"\niris.head()","94f841c5":"sns.countplot(x=\"Species\", data=iris)","4c928073":"# modify the size of the plot using matplotlib\nplt.figure(figsize=(8, 6))\nsns.scatterplot(x=\"SepalLength\", y=\"SepalWidth\", data=iris)","ca9bed0d":"plt.figure(figsize=(8, 6))\nsns.scatterplot(x=\"SepalLength\", y=\"SepalWidth\", hue=\"Species\", data=iris)","0038b5be":"plt.figure(figsize=(15, 8))\nplt.subplot(1,2,1)\nsns.scatterplot(x=\"SepalLength\", y=\"SepalWidth\", hue=\"Species\", data=iris)\nplt.subplot(1, 2, 2)\nsns.scatterplot(x=\"SepalWidth\", y=\"SepalLength\", hue=\"Species\", data=iris)","310a3b05":"plt.figure(figsize=(15, 8))\nplt.subplot(1,2,1)\nsns.scatterplot(x=\"PetalLength\", y=\"PetalWidth\", hue=\"Species\", data=iris)\nplt.subplot(1, 2, 2)\nsns.scatterplot(x=\"PetalWidth\", y=\"PetalLength\", hue=\"Species\", data=iris)","74726e17":"# height parameter decides the size of the plot here\nsns.lmplot(x=\"SepalLength\", y=\"SepalWidth\", hue=\"Species\", data=iris, height=8, markers=[\"o\", \"x\", \"^\"])","a96c17e6":"sns.lmplot(x=\"PetalLength\", y=\"PetalWidth\", hue=\"Species\", data=iris, height=8)","46a82ff2":"species = [\"Setosa\", \"Versicolor\", \"Virginica\"]\nfeatures = [\"SepalLength\", \"SepalWidth\", \"PetalLength\", \"PetalWidth\"]\nd = {\"Median\":[], \"Features\":[],  \"Species\":[]}\nfor s in species:\n    for f in features:\n        d[\"Median\"].append(iris[iris[\"Species\"] == s][f].mean())\n        d[\"Features\"].append(f)\n        d[\"Species\"].append(s)\n\n        \nnew_df = pd.DataFrame(data=d)\nnew_df","6d9d5379":"plt.figure(figsize=(12, 6))\nsns.lineplot(x=\"Features\", y=\"Median\", hue=\"Species\", data=new_df)","3c12169b":"plt.figure(figsize=(12, 6))\nsns.pointplot(x=\"Features\", y=\"Median\", hue=\"Species\", data=new_df)","e4f3ca07":"plt.figure(figsize=(20, 15))\nsns.stripplot(x=\"Species\", y=\"SepalLength\", data=iris, jitter=True, size=7)","83b7e77e":"plt.figure(figsize=(20, 20))\nplt.subplot(2, 2, 1)\nsns.stripplot(x=\"Species\", y=\"PetalLength\", data=iris, jitter=True, size=7)\nplt.subplot(2, 2, 2)\nsns.stripplot(x=\"Species\", y=\"PetalWidth\", data=iris, jitter=True, size=7)\nplt.subplot(2, 2, 3)\nsns.stripplot(x=\"Species\", y=\"SepalLength\", data=iris, jitter=True, size=7)\nplt.subplot(2, 2, 4)\nsns.stripplot(x=\"Species\", y=\"SepalWidth\", data=iris, jitter=True, size=7)","576c2e39":"plt.figure(figsize=(20, 20))\nplt.subplot(2, 2, 1)\nsns.stripplot(x=\"Species\", y=\"PetalLength\", data=iris, jitter=False,size=7)\nplt.subplot(2, 2, 2)\nsns.stripplot(x=\"Species\", y=\"PetalWidth\", data=iris, jitter=False, size=7)\nplt.subplot(2, 2, 3)\nsns.stripplot(x=\"Species\", y=\"SepalLength\", data=iris, jitter=False, size=7)\nplt.subplot(2, 2, 4)\nsns.stripplot(x=\"Species\", y=\"SepalWidth\", data=iris, jitter=False, size=7)","d17dd686":"plt.figure(figsize=(20, 20))\nplt.subplot(2, 2, 1)\nsns.swarmplot(x=\"Species\", y=\"PetalLength\", data=iris, size=7)\nplt.subplot(2, 2, 2)\nsns.swarmplot(x=\"Species\", y=\"PetalWidth\", data=iris, size=7)\nplt.subplot(2, 2, 3)\nsns.swarmplot(x=\"Species\", y=\"SepalLength\", data=iris, size=7)\nplt.subplot(2, 2, 4)\nsns.swarmplot(x=\"Species\", y=\"SepalWidth\", data=iris, size=7)","5678cad6":"sns.set(style=\"whitegrid\")\nplt.figure(figsize=(20, 20))\nplt.subplot(2, 2, 1)\nsns.violinplot(x=\"Species\", y=\"PetalLength\", data=iris)\nplt.subplot(2, 2, 2)\nsns.violinplot(x=\"Species\", y=\"PetalWidth\", data=iris)\nplt.subplot(2, 2, 3)\nsns.violinplot(x=\"Species\", y=\"SepalLength\", data=iris)\nplt.subplot(2, 2, 4)\nsns.violinplot(x=\"Species\", y=\"SepalWidth\", data=iris)","e5f0f3ab":"plt.figure(figsize=(12, 8))\nsns.violinplot(x=\"Species\", y=\"PetalWidth\", data=iris, inner=\"quartile\")","d76acf05":"# for inner = stick\nplt.figure(figsize=(12, 8))\nsns.violinplot(x=\"Species\", y=\"PetalWidth\", data=iris, inner=\"stick\")","d97ec10b":"plt.figure(figsize=(15, 15))\nbinsize = 10\nplt.subplot(2, 2, 1)\nsns.distplot(a=iris[\"PetalLength\"], bins=binsize)\nplt.subplot(2, 2, 2)\nsns.distplot(a=iris[\"PetalWidth\"], bins=binsize)\nplt.subplot(2, 2, 3)\nsns.distplot(a=iris[\"SepalLength\"], bins=binsize)\nplt.subplot(2, 2, 4)\nsns.distplot(a=iris[\"SepalWidth\"], bins=binsize)","7cb2b2e9":"plt.figure(figsize=(20, 20))\nsns.set(style=\"dark\")\nplt.subplot(2, 2, 1)\nsns.boxplot(x=\"Species\", y=\"PetalLength\", data=iris)\nplt.subplot(2, 2, 2)\nsns.boxplot(x=\"Species\", y=\"PetalWidth\", data=iris)\nplt.subplot(2, 2, 3)\nsns.boxplot(x=\"Species\", y=\"SepalLength\", data=iris)\nplt.subplot(2, 2, 4)\nsns.boxplot(x=\"Species\", y=\"SepalWidth\", data=iris)","9600077a":"plt.figure(figsize=(20, 20))\nsns.set(style=\"darkgrid\")\nplt.subplot(2, 2, 1)\n# lets try pallete attribute\nsns.boxenplot(x=\"Species\", y=\"PetalLength\", data=iris, palette=\"Set1\")\nplt.subplot(2, 2, 2)\n# some changes as range of y was cutting the boxen plot\n# you can remove this weird syntax and see what changes come in top right plot\nax = sns.boxenplot(x=\"Species\", y=\"PetalWidth\", data=iris, palette=\"Set1\")\nax.set(ylim=(0, 2.75))\nplt.subplot(2, 2, 3)\nsns.boxenplot(x=\"Species\", y=\"SepalLength\", data=iris, palette=\"Set1\")\nplt.subplot(2, 2, 4)\nsns.boxenplot(x=\"Species\", y=\"SepalWidth\", data=iris, palette=\"Set1\")","d2b62217":"# We can actually combine the box plot and striplot from before \nplt.figure(figsize=(20, 20))\nplt.subplot(2, 2, 1)\nsns.boxplot(x='Species',y='PetalLength',data=iris, palette=\"Set1\")\nsns.stripplot(x='Species',y='PetalLength',data=iris, jitter=True, color=\"yellow\")\nplt.subplot(2, 2, 2)\nsns.boxplot(x='Species',y='PetalWidth',data=iris, palette=\"Set1\")\nsns.stripplot(x='Species',y='PetalWidth',data=iris, jitter=True, color=\"yellow\")\nplt.subplot(2, 2, 3)\nsns.boxplot(x='Species',y='SepalLength',data=iris, palette=\"Set1\")\nsns.stripplot(x='Species',y='SepalLength',data=iris, jitter=True, color=\"yellow\")\nplt.subplot(2, 2, 4)\nsns.boxplot(x='Species',y='SepalWidth',data=iris, palette=\"Set1\")\nsns.stripplot(x='Species',y='SepalWidth',data=iris, jitter=True, color=\"yellow\")","61e0c9c3":"# We can actually combine the box plot and striplot from before \nplt.figure(figsize=(20, 20))\nplt.subplot(2, 2, 1)\nsns.boxplot(x='Species',y='PetalLength',data=iris)\nsns.swarmplot(x='Species',y='PetalLength',data=iris,  color=\"yellow\")\nplt.subplot(2, 2, 2)\nsns.boxplot(x='Species',y='PetalWidth',data=iris)\nsns.swarmplot(x='Species',y='PetalWidth',data=iris, color=\"yellow\")\nplt.subplot(2, 2, 3)\nsns.boxplot(x='Species',y='SepalLength',data=iris)\nsns.swarmplot(x='Species',y='SepalLength',data=iris, color=\"yellow\")\nplt.subplot(2, 2, 4)\nsns.boxplot(x='Species',y='SepalWidth',data=iris)\nsns.swarmplot(x='Species',y='SepalWidth',data=iris, color=\"yellow\")","f4b9f280":"# We can actually combine the box plot and striplot from before \nplt.figure(figsize=(20, 20))\nplt.subplot(2, 2, 1)\nsns.violinplot(x='Species',y='PetalLength',data=iris, palette=\"Set1\")\nsns.swarmplot(x='Species',y='PetalLength',data=iris,  color=\"yellow\")\nplt.subplot(2, 2, 2)\nsns.violinplot(x='Species',y='PetalWidth',data=iris, palette=\"Set1\")\nsns.swarmplot(x='Species',y='PetalWidth',data=iris, color=\"yellow\")\nplt.subplot(2, 2, 3)\nsns.violinplot(x='Species',y='SepalLength',data=iris, palette=\"Set1\")\nsns.swarmplot(x='Species',y='SepalLength',data=iris, color=\"yellow\")\nplt.subplot(2, 2, 4)\nsns.violinplot(x='Species',y='SepalWidth',data=iris, palette=\"Set1\")\nsns.swarmplot(x='Species',y='SepalWidth',data=iris, color=\"yellow\")","bbfdcc32":"# We can actually combine the box plot and striplot from before \nplt.figure(figsize=(20, 20))\nplt.subplot(2, 2, 1)\nsns.boxenplot(x='Species',y='PetalLength',data=iris)\nsns.swarmplot(x='Species',y='PetalLength',data=iris,  color=\"yellow\")\nplt.subplot(2, 2, 2)\nsns.boxenplot(x='Species',y='PetalWidth',data=iris)\nsns.swarmplot(x='Species',y='PetalWidth',data=iris, color=\"yellow\")\nplt.subplot(2, 2, 3)\nsns.boxenplot(x='Species',y='SepalLength',data=iris)\nsns.swarmplot(x='Species',y='SepalLength',data=iris, color=\"yellow\")\nplt.subplot(2, 2, 4)\nsns.boxenplot(x='Species',y='SepalWidth',data=iris)\nsns.swarmplot(x='Species',y='SepalWidth',data=iris, color=\"yellow\")","ddc24d20":"# We can also use jointplot to see relation between the data, they also show where \n# the data values lie\nsns.jointplot(x=\"SepalLength\", y=\"SepalWidth\", data=iris[iris[\"Species\"] == \"Setosa\"])\n# sns.jointplot(x=\"SepalLength\", y=\"SepalWidth\", data=iris[iris[\"Species\"] == \"Virsicolor\"])\n# sns.jointplot(x=\"SepalLength\", y=\"SepalWidth\", data=iris[iris[\"Species\"] == \"Virginica\"])","83fccff1":"sns.jointplot(x=\"SepalLength\", y=\"SepalWidth\", kind=\"hex\", data=iris[iris[\"Species\"] == \"Setosa\"])","ff376268":"joint_kws=dict(gridsize=10)\nsns.jointplot(x=\"SepalLength\", y=\"SepalWidth\", kind=\"hex\", data=iris, joint_kws=joint_kws)","d0db63bc":"joint_kws=dict(gridsize=7)\nsns.jointplot(x=\"PetalLength\", y=\"PetalWidth\", kind=\"hex\", data=iris, ratio=5, joint_kws=joint_kws)","1a3da9f9":"sns.jointplot(x=\"PetalLength\", y=\"PetalWidth\", kind=\"reg\", data=iris, ratio=5)","5fb1e21b":"sns.jointplot(x=\"PetalLength\", y=\"PetalWidth\", data=iris,kind=\"kde\", color=\"red\")","20e53596":"sns.jointplot(x=\"SepalLength\", y=\"SepalWidth\", data=iris,kind=\"kde\", color=\"blue\")","d2a71345":"sns.kdeplot(data=iris[\"PetalLength\"], data2=iris[\"PetalWidth\"])","8f6c3b55":"sns.kdeplot(data=iris[\"PetalLength\"], shade=True, color=\"red\")","be84f304":"sns.kdeplot(data=iris[\"SepalWidth\"])","1379ffd6":"sns.FacetGrid(iris, hue=\"Species\", size=5).map(sns.kdeplot, \"PetalLength\").add_legend()","d08da5ce":"sns.FacetGrid(iris, hue=\"Species\", size=5).map(sns.kdeplot, \"PetalWidth\").add_legend()","997392ba":"sns.FacetGrid(iris, hue=\"Species\", size=5).map(sns.kdeplot, \"SepalLength\").add_legend()","36187f82":"sns.FacetGrid(iris, hue=\"Species\", size=5).map(sns.kdeplot, \"SepalWidth\").add_legend()","c8dce2eb":"sns.pairplot(data=iris, hue=\"Species\", size=3, diag_kind=\"hist\")","a8b4cac9":"sns.pairplot(data=iris, hue=\"Species\", size=3, diag_kind=\"kde\")","f3b64c38":"# We have pandas boxplot \niris.boxplot(by=\"Species\", figsize=(12, 6))","d7ba6e43":"plt.subplots(figsize = (10,7))\nfrom pandas.plotting import andrews_curves\nandrews_curves(frame=iris, class_column=\"Species\", colormap=\"rainbow\")","aab12e9f":"plt.subplots(figsize = (10,7))\nfrom pandas.plotting import parallel_coordinates\nparallel_coordinates(frame=iris, class_column=\"Species\")","733797cd":"from pandas.plotting import radviz\nradviz(frame=iris, class_column=\"Species\")","476fbbd1":"We see that Petal's dimensions are more segregating at least for Setosa., but they are quite a bit mixed for Virsicolor and Verginica.\n\nIf we make the value of jitter as False, it will show a single line with points overlapping. \nYou can also give floating values for jitter. (How ?)","6ea0ceb8":"Wwe have two types of same data. We will use csv file. May be in my next kernel I will use database type :) ","0edf4b8c":"Pandas also have plotting features. It has some unique good plots. You can check it out it on their official docs.","3d40e992":"Iris is one of the go to Dataset in Data Science world. Almost everyone must have come across this cute data set at least once at some stage in nevee ending their Data Science journey. I say it's cute because its very simple in terms of size and fetaures it holds, but it can actually be used to show the use of different libraries for Exploratory Data Analysis and Machine Learning implmentations. In this kernel **we will mainly focus on exploring and visualizing** the Iris dataset using famous libraries like Matplotlib and Seaborn and for some data processing we will use Numpy and Pandas.  We will use some plots of Pandas also.\n\nYou can learn more about Iris DataSet in [Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Iris_flower_data_set) and  [UCI Machine Learning Repository](https:\/\/archive.ics.uci.edu\/ml\/datasets\/Iris\/) which is a host to many useful data set for you to apply your knowledge.\n\n I will try to make this kernel as intuitive as I can. The key to EDA is that you should be ablet to convey your conclusions and your findings in a very intuitive way, so that your audience can grasp it properly. \n \nFollowing are other kernels which helped me a lot to understand this EDA. They include data visualuization, machine learning implementation ( a typical classification problem), neural networks, visualization using plotly, desicion boundary visualization and many morethings. (Yessss !!!)\n\nI encourage you to go and check them out, few things will be similar as of mine, few would be different. But they are worth checking out.\n\n[Python Data Visualizations](https:\/\/www.kaggle.com\/benhamner\/python-data-visualizations)\n\n[ML from Scratch with IRIS!!](https:\/\/www.kaggle.com\/ash316\/ml-from-scratch-with-iris)\n\n[Decision Boundaries visualised via Python & Plotly](https:\/\/www.kaggle.com\/arthurtok\/decision-boundaries-visualised-via-python-plotly)\n\n[Rare Visualization Tools](https:\/\/www.kaggle.com\/kanncaa1\/rare-visualization-tools)\n\n[Visualizing KNN, SVM, and XGBoost on Iris Dataset](https:\/\/www.kaggle.com\/mgabrielkerr\/visualizing-knn-svm-and-xgboost-on-iris-dataset)\n\n[Visualization -> Machine learning -> Deep learning](https:\/\/www.kaggle.com\/ranjeetjain3\/visualization-machine-learning-deep-learning)\n\n[Another Neural Network From Scratch](https:\/\/www.kaggle.com\/antmarakis\/another-neural-network-from-scratch)\n \n\n\nThis is my first kernel for Data Visualization and overall in Kaggle also. I have tried to be intuitive and make it simple, complete and verbose. Once you read it I highly appreciate that you will tell me how it is. Even if you don't like it please leave your views in comments section, that would help me improve.\n\nSo let's start it then.","99c519b6":"See, as we could see in the scatterplot of sepalLEngth anf sepalWidth, we can see that values are clustered in three with two clusters at closer distance. In fact they are almost mixed you can say.\n\nNow I cant stop myself from trying petal' dimensions","685d8ca8":"We will start my importing two main libraries for data processing, that is, [Numpy](http:\/\/www.numpy.org\/) and [Pandas](https:\/\/www.scipy.org\/), then we import visualization libraries [Matplotlib](https:\/\/matplotlib.org\/) and [Seabron](https:\/\/seaborn.pydata.org\/) (which is built on top of Matplotlib). Matplotlib ans Seaborn can be used together which is amazing. Seaborn is also easier to learn.","1882ecdf":"Scatterplot plots the correlation of two variables shown on x-axis and y-axis. Roughly, we can say that with SepalLength, PetalLength also increase. But this plot is not that much great in looking is it?\nLet's add a hue so that we can differentiate what is the relationship of these two features in different Species.","8bfdcfc8":"[describe](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.describe.html) function tells us about the numerical values only. It tells about mean, median and quantile values and minimum and maximum. 25% is a quantile value. So for SepalLengthCm, 25% is 5.1 cm. That means that 25% of flowers have sepalLengthCm value lower than or equal to 5.1. Similarly for others. \nAlso 50% actually is the median value of that feature, which also means that 50% of the instances have values lower than or equal to that value.","3572905b":"What we have done is that for every Species and for every Feature (sepal's and petal's dimensions) we have created a value which is median of that feature. ","2ab4f1d6":"Both the plots show the data in almost same format, apart from the ordering of features. What we can observe from both the graphs is that median of lengths is greater than corresponding median of widths.\n\nAll the features follow the same ordering Virginica > Versicolor > Setosa except for SepalWidth which is actually largest for Setosa.\n\nSepals are larger for Iris flower than petals.\n\nSetosas have larger Sepals and the main Petal part is much smaller than Sepals. They have smaller purple part around larger green part.\n\nOne thing to notice in point plot is that for Setosas (I am obsessed with Setosa)  SepalWidth is even greater larger than PetalLength which is not the case for other two Species.","b0131aee":"It can tell you about sparsity in one dimension. But for large ranges of values with equal density its not that much helpful. (Why?)\n\nWe can also make another similar plot which I like a lot, which is [swarmplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.swarmplot.html).","f2feb0db":"To categorize data according to species, we can use FacetGrid plot also which plots one plot and then map it some other plot. I will use FacetGrid and subplotting in oneplot only as you must be able to grasp now becoming a bit faster.","1d7ff8df":"Lets do a fun thing lets combine the different plots which we can actually do.\n","c8faf7f9":"We see bars which is called historgram. They generally show the count of points within a particular range of values. We control that range using `binsize` attribute. Try changing the values and see what happens.\n\nOn top of histograms, we have KDE plot which estimates the probability density. \n\nHere, we just see one dimenional or univariate KDE plot (the wave). I will show you bivariate KDE plots later in the kernel.","9eff6062":"Finally, if you found this kernel useful then you can show your appreciation by upvoting it.","8dec48a0":"Once we load our csv file, it will be loaded in pandas DataFrame, which is like a rectangular table in Relational DBMS. We have five columns or features namely PetalLengthCm, PetalWidthCm, SepalLengthCm, SepalLengthCm adn Species (Phewww!!! so much to type). The Id is not muc of out worth and its not a feature, it is just serial number. Every row represents an instance of Iris flower and Species column tells which soecies it belongs to.\n\n**Note:** In a typical machine learning classification problem, all the sepal's and petal's dimensions will be used to predict which species it represents. Just a food for thought.","d40fb53b":"Finally I want to show you one plot where you can see every numerical data plotted against every numerical data.","cc9e52b0":"When inner's vaue is default, that is, box, in that case the white point is actually the mean of the data. With different inner values we see some different plots. Quantile shows at what level each quantile value is.\n\nWe talked about KDE above. Let's use another plot, [distplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.distplot.html) to make it more clear.","9f38b0ad":"In swarmplot, all the points are visible and pasted side by side. It shows that which particular values are coming how many times. For a dataset small (and cute) like Iris, its actually good. Swarmplot might not be able to do justice to larger datasets.\n\nIt seems to be discrete version of [violinplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.stripplot.html), with one difference. Yes I haven't told you about it. Let's see how they look first","9a88cbdb":"Lets plot just one dimensional KDE plots.","0b90a5a4":"\nWow!!! PetalLength and PetalWidth are actually some great insight giving features which clearly tells many things. First of all they also tend to have positive relationship, that means if one increases then other value also increases. Petal's dimensions are clearly smallest for Setosa which are smaller than Versicolor's which are mostly smaller than Verginica's but the line is a bit blurry. But Setosa's are clustered away. It seems  petal's dimesnions are better information in terms of distinguishing the species. These things will come handy when we will try to do machine learning with Iris data. (Of course we are not doing ML here, not here atleast :) )\n\nThere is one more plot which shows the realtionship also along with data points, and that is [lmplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.lmplot.html)","3b82cc07":"In diagonal rather than a scatter plot with itself, it shows the histogram for the particular feature. We ca actually change its default value which is `hist` to `kde`. Lets see what happens.","39723732":"Boxenplots have more quantiles, that means it is better for large datasets. ","2428af9c":"We will just plot a simple plot to see the counts using [countplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.countplot.html)","22b85055":"Let's move back to Multivariate Analysis. Yes, we have more plots or visualization to cover.\n\nOne thing I tell you that even after publishing this kernel, there would be many beautiful visualizations which would be left. Visualizing is also an art, where you try to apply different plots to your data, which in turn can be modified to match with the plot. So, I encourage you to go to Seaborn official docs and spend some time there. Try to play with different values and let meknow which one you liked the most. All the Best!!!\n\nFor now we will try [jointplot](http:\/\/seaborn.pydata.org\/generated\/seaborn.jointplot.html)","7ee30c6d":"Hex plots are very good to visualize. Wherever you see darker colour, that means there have been high density of points there. \nYou can change the value of data to original dataframe and we can see much varied plot.\n\nThe size of the bins actually can change the way you see hexbin plots. We can use `joint_kws` attribute to change this, I encourage you to play with gridsize variable a bit and see how your hexbin plot's density and changes.","1180967d":"[info](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.info.html#pandas.DataFrame.info) function gives us many information. It tells us about each column in our DataFrame. So it seems we have 150 rows corresponding to each instance of Iris flower we have. \nAll the columns contain non null values that means we don't have any missing data (Iris is cute), whichis normally not the case in reality. You will come across a lot different datasets which will have missing values or garbage data. You will need to clean and modify your data before applying any machine learning model. There are different ways to do it in Pandas only, but for now we are good.\n\nSo we have Id column which is 64 bit integer type, sepal and petal informations are all floats and species is of type object, which we will see that its categorical, having few descrete values only.","cac1f7bd":"Looking at the values we can see that species column is categorical, which I mentioned. We have 50 instances of 3 unique categories which are actually types of species in our case. Namely, Iris-setosa, Iris-versicolor and  Iris-virginica. We can see that by below graph also, which uses seaborn's countplot(). Overall we can see our DataFrame has 150 rows and 5 columns.","dfb4f8b7":"It looks similar to out lineplot which used with meadian values of the features. Here its plotting for every data point.","f77f259e":"Till now we have compared the features in pair and tried to get some insights into the features' relation between them and tried to find the pattern in those values.  This is actually called **Bivariate Analysis**. \nBut we can actually explore single feature one at a time and our guesses or patterns which have tried to figure out will become more clear. We can verify whether our pattern are actually some serious realtions or just random (Of course they are serious, I am serious!!!).\n\nAlthough, good practice is always that you first try to analyze one feature or column at a time, that is called **Univariate Analysis**. After that only, go for multivariate analysis (more than 2 is also possible). \nBut what Steve Jobs said\n> You can only connect the dots looking backward\n\nSo let's plot [stripplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.stripplot.html) then.","e12e7181":"Here, the slope is steeper for Versicolor than other two, but they are comparable.\n\n\nBefore we move further I want to mention one thing here. By visualizing data you can always get a lot of information, and a lot more noise. Which information you want to take away or which information is of use to you, that depends on the problem which you are solving. Also, its not always necessary that you will get any useful information from a particual plot. So always keep the problem in mind.","c1a97714":"Looks similar right, but we can also notice the one dimensional KDE plot along with histograms is given there. \n\nLets try one more `kind` attribute's value that is `kde`.","12aab066":"This is also KDE plot, but for tow dimensions. This seems very intriguing and colour rich to me. Its able to cluster the points better. \n\nWe can plot the values with seaborn's kdeplot of multivariate type.","ea7a505c":"It gives you the line, called regression line which makes it clear about the relationship we are talking about, alongwith that its actually the line with smallest Root Mean Square Error(RMSE) with respect to the data points (Oh its Machine Learning, is it?). This is called [Linear Regression](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LinearRegression.html).  \nYou can read about that in Internet.\n\nFor now,  the value of SepalWidth for Setosa changes rapidly with respect to SepalLength than other two as the slope is steeper for Setosa.\n\nThere is one more similar plot named [regplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.regplot.html#seaborn.regplot), which is almost same but has some differences, you can also learn about and the diffrence [here](https:\/\/seaborn.pydata.org\/generated\/seaborn.regplot.html#seaborn.regplot).\n\nLets plot lmplot for petals also.","d8c45d2c":"Its not the end yet, there's a lot outside to learn and visualize. So many datasets but the visualizations are few. Not fair. So go out and find different plots which are suitable for different types of values or distribution. ","a71cd92b":"We dropped the Id column of our DataFrame. [drop](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.drop.html) method returns a new dataframe and doesn't alter the original dataframe by default. I have commented code if you wanna try other way, but I like it inplace.\nWe have also changed the column names to simpler names, although not much simpler :(  but you can change it to simpler one if you like to, for example,  sl for sepalLength or whatever you like.","3d5ca0cc":"Jointplot is similar to scatterplot but here we are only analysing the one species (Look at the value of data attribute).  This is only Setosa's part which we had in our scatter plot. You can actually change the value of data attribute of this function and see. We have only plotted setosa (As I am obsessed with them). \n\nIt also shows the histogram for two features.\n\nWe can actually pay with its kind attribute and see different kind of plots.","ef89c443":"I encourage you to play with any combination of plots to see what they look like. Please let me know about what you created with different combination.","80299a57":"So, things we have learnt till now about our dataset.\n1. Our DataFrame has 150 rows of data and 5 columns of different features, namely Sepal and Petal lengths and widths and the type of species it belongs to.\n2. Four columns are numerical and one is categorical.\n3. There are 3 different categories of species, namely Setosa, Virginica and and Virsicolor which have equal number of instances, that is,  50.\n\n\nLet's start visualizing our data now. So we first start with a [scatterplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.scatterplot.html).","308748aa":"Boxplots give similar information but in a different way. They are actually base on percentiles. Top and the bottom are 75th adn 25th percentiles respectively. Horizontal line is there for median value. Thin vertical lines are known as whiskers, which indicate about the range for the bulk of the data. The \u201cwhiskers\u201d extend to points that lie within 1.5 Inter Quantile Range of the lower(25%) and upper(75%) quartile, and then observations that fall outside this range are displayed independently, by diamonds. You can read more about it [here](http:\/\/seaborn.pydata.org\/tutorial\/categorical.html#categorical-tutorial) as these terms are out of bounds for this tutorial.\n\n\nLets see [boxenplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.boxenplot.html) which is a variation of boxplot but is much fun than that. (Don't judge my taste).","78fcf805":"I told you right they look similar. But violinplot actually plots the Kernel Density Estimation (Whaaaaattttt???) of underlying distribution. \nKDE is a fundamental data smoothing problem, which estimates the probability density function of the data is focus. You can learn about it online.\n\nYou can also see a dark vertical line inside each violin plot and inside that also you can see white dot. The white dot tells you about the median of that value.\n\nYou can also create one plot at a time so that you can clearly see whats goin on there.\nIn fact we will create single plot with some values of inner attribute.","5407ba0e":"We used matplotlib's subplots function to declare a matrix of subplot of (1, 2) dimension. Left plot is same as the previous one but from right one we can see that Setosa's generally have larger SepalWidth than Versicolor. There is one instance near the left corner which we can see. \n\nIf you think you want to see one plot at a time feel free to do that as even I can see it becomes a bit blurry here for scatter plots. But we will keep using subplots with other kind of plots where its not much of a problem.\n\nLet's see the variation of PetalLength and PetalWidth with each other.","2c9bbb0e":"Finally, lets compare all the four features' values by using central tendency of those features (mean or median). Central tendency is like the cetral point of that data, if we have to represent a set of data woth onvalue, then that is the centrality, for example, mean, median etc. We will use median as it is less prone to outliers ( What are they? ). We will use median of each feature and try to compare them wih a [pointplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.pointplot.html) or [lineplot](https:\/\/seaborn.pydata.org\/generated\/seaborn.lineplot.html).\n\nFor that we will create a new DataFrame from our original DataFrame.","6e8ea2e3":"Now we can see it with more clarity. We can observe that for Setosa's maximum value of SepalLength is less than 6 cm. They tend to have smaller sepalLength, although many of Versicolor's SepalLength is also small. But Virginica's SepalLength majorly tends to be larger. Also, SepalWidth for Setosa's varies much with SepalLength than other twos.\n\nI need to turn my head a little to see how is the variation with SepalWidth. So lets plot SepalWidth also on horzontal line.\nActually lets plot both the plots side by side.","810abcef":"Here, you can say that we are doing multivariate analysis, but we are actually comparing one feature at a time given the Species, which is a categorical feature. So this is also a kind of Univariate Analysis of a real valued feature with constant Categorical values.\n\nWe see that we can't actually segregate these three species  on the basis of sepal length. There are good amount of instances mixed with each other. So, SepalLength is actually quite mixed and we can't segregate them on the basis of it. Our minds tend to find patterns very easily, even in noise (I can find patterns in clouds). But we should make sure that any pattern is supported by the data.\n\nLets plot others using subplot.","c9ea45a7":"Lets first change the categorical values to simpler one. We know that each species is of Iris flower, we will drop prefix 'Iris-' from each category.","598c8f6d":"Let's look at [boxplot](http:\/\/seaborn.pydata.org\/generated\/seaborn.violinplot.html) now.","e274f217":"You actually have many values to put for kind attribute. You can check out the docs of seaborn joinplot.\nWe can also use reg as value"}}