{"cell_type":{"8d634563":"code","3fdd4bea":"code","b7326993":"code","34355996":"code","664fbe5f":"code","96dfdce4":"code","dedb2964":"code","8fde855f":"code","2f6d5c76":"code","3def18b3":"code","956293e5":"code","53b3f07f":"code","b14acb18":"code","60fa375e":"code","dafa323d":"code","2a4f4480":"code","92f72116":"code","97f49aed":"markdown","ac356710":"markdown","af0863f4":"markdown","69d9f652":"markdown","d78a24d5":"markdown","f9c54f61":"markdown","21abf7ec":"markdown","58c87b0a":"markdown","e594ecf0":"markdown","0696a4a2":"markdown","e995c69a":"markdown"},"source":{"8d634563":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nfrom IPython.display import Image","3fdd4bea":"Image(\"\/kaggle\/input\/week9dataset\/Guide of OpenAI Gym1.png\")","b7326993":"!pip install stable-baselines3[extra] pyvirtualdisplay gym pyglet\n!apt-get install python-opengl -y","34355996":"import gym\nfrom stable_baselines3 import PPO      #PPO -> Proximal Policy Optimization\nfrom stable_baselines3.common.vec_env import DummyVecEnv \nfrom stable_baselines3.common.evaluation import evaluate_policy  #to evaluate the model \nfrom stable_baselines3.common.callbacks import EvalCallback, StopTrainingOnRewardThreshold","664fbe5f":"from pyvirtualdisplay import Display\ndisplay = Display(visible=0, size=(1024, 768))\ndisplay.start()\n\n\nfrom matplotlib import pyplot as plt, animation\n%matplotlib inline\nfrom IPython import display\n\ndef create_anim(frames, dpi, fps):\n    plt.figure(figsize=(frames[0].shape[1] \/ dpi, frames[0].shape[0] \/ dpi), dpi=dpi)\n    patch = plt.imshow(frames[0])\n    def setup():\n        plt.axis('off')\n    def animate(i):\n        patch.set_data(frames[i])\n    anim = animation.FuncAnimation(plt.gcf(), animate, init_func=setup, frames=len(frames), interval=fps)\n    return anim\n\ndef display_anim(frames, dpi=72, fps=60):\n    anim = create_anim(frames, dpi, fps)\n    return anim.to_jshtml()\n\ndef save_anim(frames, filename, dpi=72, fps=50):\n    anim = create_anim(frames, dpi, fps)\n    anim.save(filename)\n\n\nclass trigger:\n    def __init__(self):\n        self._trigger = True\n\n    def __call__(self, e):\n        return self._trigger\n\n    def set(self, t):\n        self._trigger = t","96dfdce4":"environment_name = 'CartPole-v0'    \nenv = gym.make(environment_name)\n\"\"\"\nEpisode Termination:\n        Pole Angle is more than 12 degrees.\n        Cart Position is more than 2.4 (center of the cart reaches the edge of\n        the display).\n        Episode length is greater than 200.\n        Solved Requirements:\n        Considered solved when the average return is greater than or equal to\n        195.0 over 100 consecutive trials\n\"\"\"","dedb2964":"frames = []\nepisodes = 5\nfor episode in range(1, episodes+1):\n    state = env.reset()\n    done = False\n    score = 0\n    \n    while not done:\n        frames.append(env.render(mode='rgb_array'))\n        action = env.action_space.sample()\n        n_state, reward, done, info = env.step(action)\n        score += reward\n    print(\"Episode:{} Score:{}\".format(episode,score))\nenv.close()","8fde855f":"display.HTML(display_anim(frames))","2f6d5c76":"log_path = os.path.join('.\/Training\/Logs')\nenv = gym.make(environment_name)\nenv = DummyVecEnv([lambda: env])","3def18b3":"model = PPO('MlpPolicy', env, verbose=1, tensorboard_log=log_path) #MlpPolicy = MultiLayerPerceptron","956293e5":"model.learn(total_timesteps=50000)","53b3f07f":"save_path = os.path.join('.\/Training','Saved_Models')\nmodel.save(save_path)\neval_env = model.get_env()","b14acb18":"evaluate_policy(model, eval_env, n_eval_episodes=20, render = False)","60fa375e":"episodes = 5\nframes = []\nfor episode in range(1, episodes+1):\n    obs = env.reset()  #state = env.reset()\n    done = False\n    score = 0\n    \n    while not done:\n        frames.append(env.render(mode='rgb_array'))\n        action , _ = model.predict(obs) \n        obs, reward, done, info = env.step(action) \n        score += reward\n    print(\"Episode:{} Score:{}\".format(episode,score))\nenv.close()","dafa323d":"display.HTML(display_anim(frames))","2a4f4480":"filename = 'CartPole-v0.mp4'\nsave_anim(frames, filename=filename)","92f72116":"display.Video(filename, width=300, height=400)","97f49aed":"<div class=\"alert alert-info\">  \n<h3><strong>2.Test Environment<\/strong><\/h3>\n<\/div>","ac356710":"<div class=\"alert alert-info\">  \n<h3><strong>1.Import Dependencies<\/strong><\/h3>\n<\/div>","af0863f4":"<div class=\"alert alert-info\">  \n<h3><strong>3.Train Model<\/strong><\/h3>\n<\/div>","69d9f652":"#### Upcoming Notebooks Using GPU\n* Atari Breakout Using Kaggle\n* Car-Racing(Box2d) Environment","d78a24d5":"<div class=\"alert alert-info\">  \n<h1><strong>Guide To Setup Open AI Gym In Kaggle<\/strong><\/h1>\n<\/div>","f9c54f61":"<div class=\"alert alert-info\">  \n<h3><strong>4.Save Model<\/strong><\/h3>\n<\/div>","21abf7ec":"<div class=\"alert alert-info\">  \n<h3><strong>5.Evaluate<\/strong><\/h3>\n<\/div>","58c87b0a":"<div class=\"alert alert-info\">  \n<h3><strong>6. Test<\/strong><\/h3>\n<\/div>","e594ecf0":"<div class=\"alert alert-info\">  \n<h5><strong>Save Video(mp4)<\/strong><\/h5>\n<\/div>","0696a4a2":"<div class=\"alert alert-info\">  \n<h3><strong>Functions for Visualization<\/strong><\/h3>\n<\/div>","e995c69a":"# References Used\n#### [Setup Notebook](https:\/\/www.kaggle.com\/abechanta\/setup-openai-gym-on-kaggle)\n#### [Stablebaseline Tutorial Youtube link](https:\/\/www.youtube.com\/watch?v=Mut_u40Sqz4&t=8298s)\n#### [Github Code - Gym CartPole](https:\/\/github.com\/openai\/gym\/blob\/master\/gym\/envs\/classic_control\/cartpole.py)"}}