{"cell_type":{"e92ded75":"code","8237bf1a":"code","069bb547":"code","8145c75e":"code","4851a751":"code","320d6d77":"code","7d9092ed":"code","3d457d9c":"code","8ada1dad":"code","683580b7":"code","395a94dc":"code","b1ab3b5f":"code","14dd7acf":"markdown","185ecd31":"markdown","2940ea82":"markdown","efb9e28a":"markdown","dd75538d":"markdown","d259a6a6":"markdown"},"source":{"e92ded75":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\"\"\"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\"\"\"\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8237bf1a":"import keras\nfrom keras.models import Sequential\nfrom glob import glob\nfrom keras.layers import Dense, Dropout, Flatten,Activation\nfrom keras.layers import Conv2D, MaxPooling2D, Conv3D, BatchNormalization\nfrom keras.preprocessing.image import ImageDataGenerator, load_img,img_to_array\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","069bb547":"test_path=\"..\/input\/chest-xray-pneumonia\/chest_xray\/test\"\ntrain_path=\"..\/input\/chest-xray-pneumonia\/chest_xray\/train\"\nval_path=\"..\/input\/chest-xray-pneumonia\/chest_xray\/val\"","8145c75e":"img = load_img(train_path +\"\/NORMAL\/IM-0119-0001.jpeg\")\nplt.imshow(img)\nplt.show()","4851a751":"x=img_to_array(img)\nx.shape","320d6d77":"className=glob(train_path+\"\/*\")\nnumberOfClasses =len(className)\nprint(\"NumberOfClasses\",numberOfClasses)","7d9092ed":"\nmodel = Sequential()\nmodel.add(Conv2D(64, kernel_size=(3,3), activation='relu', input_shape=(64, 64, 3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(32, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(16, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Conv2D(8, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Flatten())\nmodel.add(Activation(\"relu\"))\nmodel.add(Dense(1024))\nmodel.add(Dropout(0.4))\nmodel.add(Dense(numberOfClasses))\nmodel.add(Activation(\"softmax\"))\nmodel.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n\nbatch_size =10","3d457d9c":"train_datagen = ImageDataGenerator(rescale=1\/255.,\n                                        rotation_range=0.2,\n                                        horizontal_flip=True,\n                                        vertical_flip=True,\n                                        zoom_range=0.2)\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_set = train_datagen.flow_from_directory(train_path,\n                                                 target_size=(64, 64),\n                                                 batch_size=batch_size,\n                                                 class_mode='categorical')\n\n\n\ntest_set = test_datagen.flow_from_directory(test_path,\n                                            target_size=(64, 64),\n                                            batch_size=batch_size,\n                                            class_mode='categorical')\n\n\n\nval_set = train_datagen.flow_from_directory(val_path,\n                                            target_size=(64, 64),\n                                            batch_size=batch_size,\n                                            shuffle=True,\n                                            class_mode='categorical')","8ada1dad":"history = model.fit_generator(train_set,\n                    steps_per_epoch=3800\/\/10,\n                    epochs=25,\n                    validation_data=test_set,\n                    validation_steps=2200\/\/10,\n                    )","683580b7":"model.metrics_names","395a94dc":"plt.plot(history.history[\"loss\"], label =\"Train loss\")\nplt.show()","b1ab3b5f":"plt.plot(history.history[\"accuracy\"], label =\"Accuracy\")\nplt.show()","14dd7acf":"# Model Fit","185ecd31":"# Number Of Classes","2940ea82":"# Sample Picture","efb9e28a":"# Import Library","dd75538d":"# Model Create","d259a6a6":"# Loading in Data"}}