{"cell_type":{"46b3a82a":"code","93cb1c18":"code","403f607f":"code","bce92452":"code","f19e1311":"code","8c4d3620":"code","a681c74e":"code","d9d63de0":"code","f1301b02":"code","9ec15f08":"code","d8183e98":"code","952c4dfc":"code","853e858d":"code","f55fedcf":"code","3f4e5bdc":"code","43b1e69d":"code","8ede8617":"code","63a4997e":"code","f3f63170":"code","d7417b64":"code","5ee00c94":"code","c8cb0b8d":"code","1476d09c":"code","81ae3934":"code","7e9bb04f":"code","a3c544ca":"code","49a742f1":"code","4b7e8121":"code","6563d77d":"code","6752f3b1":"code","e5480280":"code","687446a3":"code","0866e5f2":"code","fc6aaed7":"code","908036b6":"code","293747b5":"code","81cc4515":"code","7e3f456d":"code","642460b9":"code","1e853eff":"code","390e5774":"code","7d29a42b":"code","5e65e1f8":"code","617dba4c":"markdown","de2bb0d4":"markdown","ae0ade37":"markdown","8283fd56":"markdown","9fa1e29b":"markdown","cb3d3be2":"markdown","b424359e":"markdown","b812aff3":"markdown","11dda338":"markdown","48478af8":"markdown","6b0f3f55":"markdown","177aca2f":"markdown","f9b861bf":"markdown","367f52bd":"markdown","d48ddedc":"markdown","086285b5":"markdown","6d632708":"markdown","ec4fe015":"markdown","345694cd":"markdown","6bbb3484":"markdown","535a456a":"markdown","898541c4":"markdown","78b1d142":"markdown","8a798102":"markdown","b0e0c932":"markdown","935804ec":"markdown","3f61590f":"markdown","c371bc20":"markdown","3168cbae":"markdown","18aaf2b3":"markdown","d981f4a7":"markdown","d6f33a37":"markdown","46719093":"markdown","78c3eee6":"markdown","711889a5":"markdown","492b5acd":"markdown"},"source":{"46b3a82a":"import tensorflow as tf\nfrom keras.preprocessing.image import ImageDataGenerator","93cb1c18":"import numpy as np","403f607f":"tf.__version__","bce92452":"train_datagen = ImageDataGenerator(rescale = 1.\/255,\n                                   shear_range = 0.2,\n                                   zoom_range = 0.2,\n                                   horizontal_flip = True)\ntraining_set = train_datagen.flow_from_directory('..\/input\/mnistasjpg\/trainingSet\/trainingSet',\n                                                 target_size = (64, 64),\n                                                 batch_size = 32,\n                                                 class_mode = 'categorical')","f19e1311":"test_datagen = ImageDataGenerator(rescale = 1.\/255)\ntest_set = test_datagen.flow_from_directory('..\/input\/mnistasjpg\/testSet',\n                                            target_size = (64, 64),\n                                            batch_size = 32,\n                                            class_mode = 'input')","8c4d3620":"cnn = tf.keras.models.Sequential()","a681c74e":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu', input_shape=[64, 64, 3]))","d9d63de0":"cnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","f1301b02":"cnn.add(tf.keras.layers.Conv2D(filters=32, kernel_size=3, activation='relu'))\ncnn.add(tf.keras.layers.MaxPool2D(pool_size=2, strides=2))","9ec15f08":"cnn.add(tf.keras.layers.Flatten())","d8183e98":"cnn.add(tf.keras.layers.Dense(units=128, activation='relu'))","952c4dfc":"cnn.add(tf.keras.layers.Dense(units=10, activation='softmax'))","853e858d":"cnn.compile(optimizer = 'adam', loss = 'categorical_crossentropy', metrics = ['accuracy'])","f55fedcf":"cnn.fit(x = training_set, epochs = 10)","3f4e5bdc":"import numpy as np\nfrom PIL import Image\nfrom keras.preprocessing import image\ntest_image = image.load_img('..\/input\/mnistasjpg\/testSet\/testSet\/img_10.jpg', target_size = (64, 64))\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)","43b1e69d":"#test_image\n#test_image.show()","8ede8617":"training_set.class_indices","63a4997e":"if result[0][0] == 1:\n    prediction = 0\nelif result[0][1] == 1:\n    prediction = 1\nelif result[0][2] == 1:\n    prediction = 2\nelif result[0][3] == 1:\n    prediction = 3\nelif result[0][4] == 1:\n    prediction = 4\nelif result[0][5] == 1:\n    prediction = 5\nelif result[0][6] == 1:\n    prediction = 6\nelif result[0][7] == 1:\n    prediction = 7\nelif result[0][8] == 1:\n    prediction = 8\nelif result[0][9] == 1:\n    prediction = 9\n\nprint(prediction)","f3f63170":"from PIL import Image\ntest_image = Image.open('..\/input\/mnist-digits\/mnist_digits\/samples_0000.png').crop((0, 0, 95, 95))\ncoordinate = x, y = 0, 0\nprint(test_image.getpixel(coordinate))\ntest_image = test_image.convert('RGB')\ntest_image.save('\/kaggle\/working\/img_new1.png')\ntest_image = image.load_img('\/kaggle\/working\/img_new1.png', target_size = (64, 64))\ntest_image.save('\/kaggle\/working\/img_new1.png')\ntest_image = image.img_to_array(test_image)\ntest_image = np.expand_dims(test_image, axis = 0)\nresult = cnn.predict(test_image)","d7417b64":"if result[0][0] == 1:\n    prediction = 0\nelif result[0][1] == 1:\n    prediction = 1\nelif result[0][2] == 1:\n    prediction = 2\nelif result[0][3] == 1:\n    prediction = 3\nelif result[0][4] == 1:\n    prediction = 4\nelif result[0][5] == 1:\n    prediction = 5\nelif result[0][6] == 1:\n    prediction = 6\nelif result[0][7] == 1:\n    prediction = 7\nelif result[0][8] == 1:\n    prediction = 8\nelif result[0][9] == 1:\n    prediction = 9\n\nprint(prediction)","5ee00c94":"lst = []\nrs = []\nx_cursor = 73\ny_cursor = 69\nfor i in range(0,4):\n    for j in range(0, 4):\n        test_image = Image.open('..\/input\/gan-generated\/samples\/samples_0000.png').crop((x_cursor, y_cursor, x_cursor + 95, y_cursor + 95))\n        test_image = test_image.convert('RGB')\n        #test_image.show()\n        test_image.save('\/kaggle\/working\/img_new1.jpg')\n        test_image = image.load_img('\/kaggle\/working\/img_new1.jpg', target_size = (64, 64))\n        test_image = image.img_to_array(test_image)\n        test_image = np.expand_dims(test_image, axis = 0)\n        result = cnn.predict(test_image)\n        rs = cnn.predict(test_image\/255)\n        if result[0][0] == 1:\n            prediction = 0\n        elif result[0][1] == 1:\n            prediction = 1\n        elif result[0][2] == 1:\n            prediction = 2\n        elif result[0][3] == 1:\n            prediction = 3\n        elif result[0][4] == 1:\n            prediction = 4\n        elif result[0][5] == 1:\n            prediction = 5\n        elif result[0][6] == 1:\n            prediction = 6\n        elif result[0][7] == 1:\n            prediction = 7\n        elif result[0][8] == 1:\n            prediction = 8\n        elif result[0][9] == 1:\n            prediction = 9    \n       # print(rs)    \n        if rs.all() < 0.7:\n            lst.append(10)\n        else:    \n            lst.append(prediction)\n        x_cursor += 115\n\n    y_cursor += 115\n    x_cursor = 72\n        \n\n","c8cb0b8d":"np.reshape(lst, (-1, 4))","1476d09c":"lst1 = []\nx_cursor = 37\ny_cursor = 35\nfor i in range(0,4):\n    for j in range(0, 4):\n        test_image = Image.open('..\/input\/kaggle-mnist-digits\/mnist_digits_kaggle\/img_0.png').crop((x_cursor, y_cursor, x_cursor + 48, y_cursor + 48))\n        test_image = test_image.convert('RGB')\n        test_image.show()\n        test_image.save('\/kaggle\/working\/img_new1.jpg')\n        test_image = image.load_img('\/kaggle\/working\/img_new1.jpg', target_size = (64, 64))\n        test_image = image.img_to_array(test_image)\n        test_image = np.expand_dims(test_image, axis = 0)\n        result = cnn.predict(test_image)\n        if result[0][0] == 1:\n            prediction = 0\n        elif result[0][1] == 1:\n            prediction = 1\n        elif result[0][2] == 1:\n            prediction = 2\n        elif result[0][3] == 1:\n            prediction = 3\n        elif result[0][4] == 1:\n            prediction = 4\n        elif result[0][5] == 1:\n            prediction = 5\n        elif result[0][6] == 1:\n            prediction = 6\n        elif result[0][7] == 1:\n            prediction = 7\n        elif result[0][8] == 1:\n            prediction = 8\n        elif result[0][9] == 1:\n            prediction = 9\n        \n        lst1.append(prediction)\n        \n        x_cursor += 58\n    y_cursor += 56\n    x_cursor = 37\n        \n\n","81ae3934":"np.reshape(lst1, (-1, 4))","7e9bb04f":"'''lst_test = []\nimport os\nfor filename in os.listdir('..\/input\/mnistasjpg\/testSet\/testSet'):\n    img_path = os.path.join('..\/input\/mnistasjpg\/testSet\/testSet', filename)\n    \n    \n    test_image = image.load_img(img_path, target_size = (64, 64))\n    test_image = image.img_to_array(test_image)\n    test_image = np.expand_dims(test_image, axis = 0)\n    result = cnn.predict(test_image)\n    if result[0][0] == 1:\n        prediction = 0\n    elif result[0][1] == 1:\n        prediction = 1\n    elif result[0][2] == 1:\n        prediction = 2\n    elif result[0][3] == 1:\n        prediction = 3\n    elif result[0][4] == 1:\n        prediction = 4\n    elif result[0][5] == 1:\n        prediction = 5\n    elif result[0][6] == 1:\n        prediction = 6\n    elif result[0][7] == 1:\n        prediction = 7\n    elif result[0][8] == 1:\n        prediction = 8\n    elif result[0][9] == 1:\n        prediction = 9\n        \n    lst_test.append(prediction)'''\n        \n    \n        \n\n\n    \n    ","a3c544ca":"#lst_test","49a742f1":"test_list = []\nimport os\nfor filename in os.listdir('..\/input\/kaggle-mnist-digits\/mnist_digits_kaggle'):\n    img_path = os.path.join('..\/input\/kaggle-mnist-digits\/mnist_digits_kaggle', filename)\n    \n    lst1 = []\n    x_cursor = 37\n    y_cursor = 35\n    for i in range(0,4):\n        for j in range(0, 4):\n            test_image = Image.open(img_path).crop((x_cursor, y_cursor, x_cursor + 48, y_cursor + 48))\n            test_image = test_image.convert('RGB')\n            test_image.show()\n            test_image.save('\/kaggle\/working\/img_new1.jpg')\n            test_image = image.load_img('\/kaggle\/working\/img_new1.jpg', target_size = (64, 64))\n            test_image = image.img_to_array(test_image)\n            test_image = np.expand_dims(test_image, axis = 0)\n            result = cnn.predict(test_image)\n            if result[0][0] == 1:\n                prediction = 0\n            elif result[0][1] == 1:\n                prediction = 1\n            elif result[0][2] == 1:\n                prediction = 2\n            elif result[0][3] == 1:\n                prediction = 3\n            elif result[0][4] == 1:\n                prediction = 4\n            elif result[0][5] == 1:\n                prediction = 5\n            elif result[0][6] == 1:\n                prediction = 6\n            elif result[0][7] == 1:\n                prediction = 7\n            elif result[0][8] == 1:\n                prediction = 8\n            elif result[0][9] == 1:\n                prediction = 9\n        \n            lst1.append(prediction)\n        \n            x_cursor += 58\n    \n        y_cursor += 56\n        x_cursor = 37\n    lst1 = np.reshape(lst1, (-1, 4))\n    test_list.append(lst1)\n    lst1 = []\n    \n        \n\n\n    \n    ","4b7e8121":"#print(test_list)\nnp.reshape(test_list, (-1, 4))","6563d77d":"os.listdir('..\/input\/gan-generated\/samples')\n#os.path.join('..\/input\/gan-generated\/samples', 'samples_0057.png')","6752f3b1":"test_list_gan = []\nimport os\nfor filename in os.listdir('..\/input\/gan-generated\/samples'):\n    img_path = os.path.join('..\/input\/gan-generated\/samples', filename)\n    \n    \n    lst_gan = []\n    x_cursor = 72\n    y_cursor = 70\n    for i in range(0,4):\n        for j in range(0, 4):\n            test_image = Image.open(img_path).crop((x_cursor, y_cursor, x_cursor + 95, y_cursor + 95))\n            test_image = test_image.convert('RGB')\n            #test_image.show()\n            test_image.save('\/kaggle\/working\/img_new1.jpg')\n            test_image = image.load_img('\/kaggle\/working\/img_new1.jpg', target_size = (64, 64))\n            test_image = image.img_to_array(test_image)\n            test_image = np.expand_dims(test_image, axis = 0)\n            result = cnn.predict(test_image)\n            if result[0][0] == 1:\n                prediction = 0\n            elif result[0][1] == 1:\n                prediction = 1\n            elif result[0][2] == 1:\n                prediction = 2\n            elif result[0][3] == 1:\n                prediction = 3\n            elif result[0][4] == 1:\n                prediction = 4\n            elif result[0][5] == 1:\n                prediction = 5\n            elif result[0][6] == 1:\n                prediction = 6\n            elif result[0][7] == 1:\n                prediction = 7\n            elif result[0][8] == 1:\n                prediction = 8\n            elif result[0][9] == 1:\n                prediction = 9\n        \n            lst_gan.append(prediction)\n        \n            x_cursor += 115\n\n        y_cursor += 115\n        x_cursor = 72\n    lst_gan = np.reshape(lst_gan, (-1, 4))\n    test_list_gan.append(lst_gan)\n        \n    ","e5480280":"print(test_list_gan)","687446a3":"from PIL import Image\ntest_image = Image.open('..\/input\/read-plate\/plateread.png')\nx_len, y_len = test_image.size","0866e5f2":"test_image.getpixel((0, 0))!=(0, 0, 0)","fc6aaed7":"x_before = []\nx_after = [0, ]\nk = 0\ni = 0 \ni_plus = 0\nwhile i < x_len:\n    #print(i)\n    j=0\n    flag = False\n    i_plus = i + 1\n    while flag==False and j < y_len:\n        if test_image.getpixel((i, j))!=(0, 0, 0):\n            x_before.append(i)\n            flag = True\n            \n            flag1 = False\n            k = i\n            while k < x_len:\n                #print(k)\n                j = 0\n                flag1 = True\n                while flag1 == True and j < y_len:\n                    #\n                    #print(j)\n                    if test_image.getpixel((k, j)) != (0, 0, 0):\n                        flag1 = False\n                    \n                    j += 1\n                \n                if flag1 == True:\n                    x_after.append(k)\n                    i_plus = k\n                    #print(i_plus)\n                    k = x_len\n                    \n                k += 1\n            \n            \n        j += 1\n        #print(i, j)\n    \n    i = i_plus\n    \n\n    \nx_before.append(x_len)    ","908036b6":"x_before","293747b5":"x_after","81cc4515":"x_cor_values = []\nfor i in range(len(x_before)):\n    x_cor_values.append(int((x_before[i] + x_after[i])\/2))","7e3f456d":"x_cor_values","642460b9":"y_before = []\ny_after = []\nk = 0\ni = 0 \ni_plus = 0\n\nfor i in range(len(x_before)-1):\n    flag = True\n    l=0\n    while flag and l < y_len:\n        j = x_cor_values[i]\n        flag = True\n        while flag and j < x_cor_values[i+1]:\n            if test_image.getpixel((j, l)) != (0, 0, 0):\n                flag=False\n                \n                y_before.append(l\/2)\n                \n                k = l\n                while k < y_len:\n                    flag1 = True\n                    j = x_cor_values[i]\n                    while flag1 and j < x_cor_values[i+1]:\n                        if test_image.getpixel((j, k)) != (0, 0, 0):\n                            flag1 = False\n                            \n                        j += 1    \n                    \n                    if flag1 == True:\n                        y_after.append((k + y_len)\/2)\n                        k = y_len\n                \n                    k += 1\n                    \n                \n            j += 1\n            \n        l += 1\n            \n                ","1e853eff":"y_before","390e5774":"y_after","7d29a42b":"lst = []\nimport numpy as np\nfrom keras.preprocessing import image\nfor i in range(len(x_before)-1):\n    test_image = Image.open('..\/input\/read-plate\/plateread.png').crop((x_cor_values[i], y_before[i],x_cor_values[i+1], y_after[i]))\n    test_image = test_image.convert('RGB')\n    test_image.save('\/kaggle\/working\/img_new1.png')\n    test_image = image.load_img('\/kaggle\/working\/img_new1.png', target_size = (64, 64))\n    test_image.save('\/kaggle\/working\/img_new1.png')\n    test_image = image.img_to_array(test_image)\n    test_image = np.expand_dims(test_image, axis = 0)\n    result = cnn.predict(test_image)\n    \n    if result[0][0] == 1:\n        prediction = 0\n    elif result[0][1] == 1:\n        prediction = 1\n    elif result[0][2] == 1:\n        prediction = 2\n    elif result[0][3] == 1:\n        prediction = 3\n    elif result[0][4] == 1:\n        prediction = 4\n    elif result[0][5] == 1:\n        prediction = 5\n    elif result[0][6] == 1:\n        prediction = 6\n    elif result[0][7] == 1:\n        prediction = 7\n    elif result[0][8] == 1:\n        prediction = 8\n    elif result[0][9] == 1:\n        prediction = 9\n\n    print(prediction)\n    lst.append(prediction)\n    ","5e65e1f8":"lst","617dba4c":"# Below is output of Sample image passed above for prediction","de2bb0d4":"#This is Single Digit prediction out of 16 digits in mnist original dataset image. One sample of MNIST Original dataset is shown below. And i am predicting **1st digit** of below image.","ae0ade37":"#I had GAN Generated output which were produced in onw of my project. Predicting the digits in these gan generated images.\n","8283fd56":"# Final Evaluation of Image","9fa1e29b":"# Prediction of images in order attached above","cb3d3be2":"# IMPLEMENTATION USING CNN","b424359e":"### Step 2 - Pooling","b812aff3":"**MNIST ORIGINAL DATASET  \"SINGLE IMAGE\"  CONSISTS OF 16 DIGITS. I CAME ACROSS THE SITUATION WHERE I WANT TO PREDICT THOSE 16 DIGITS IN SINGLE IMAGE AS A REQUIREMENT. SO HERE IS BELOW SOLUTION FOR THAT. I HAVE USED PAINT FOR GETTING INFORMATION OF PIXEL VALUES FOR CROPPING SINGLE DIGITS IN THAT IMAGE.**\n\n-**PREDICTING 16 DIGITS INDIVIDUALLY IN SINGLE IMAGE OF MNIST ORIGINAL DATASET. ONE SAMPLE IS SHOWN BELOW. I HAVE ATTACHED THE MNIST SAMPLE IMAGES FOR THIS EXERCISE. HOPE THAT HELPS SOME WAY.**\n\n","11dda338":"![img_2.png](attachment:img_2.png)![img_3.png](attachment:img_3.png)![img_0.png](attachment:img_0.png)","48478af8":"### Training the CNN on the Training set and evaluating it on the Test set","6b0f3f55":"# calculating y_cor_values","177aca2f":"### Compiling the CNN","f9b861bf":">1) FIRST OF ALL MAKING THE CONVOLUTIONAL NEURAL NETWORK FOR THIS DATASET AND PREDICTING THE TEST SET RESULT.\n\n**SECOND AND MOST IMPORTANT**\n\n>2) MNIST ORIGINAL DATASET \"SINGLE IMAGE\" CONSISTS OF 16 DIGITS. I CAME ACROSS THE SITUATION WHERE I HAD TO PREDICT THOSE 16 DIGITS IN SINGLE IMAGE AS A REQUIREMENT. SO AT THE END OF KERNEL ,IS SOLUTION FOR THAT. I HAVE USED PAINT FOR GETTING INFORMATION OF PIXEL VALUES FOR CROPPING 16 DIGITS INDIVIDUALLY IN THAT IMAGE.","367f52bd":"# Below is output of Sample image passed above for prediction","d48ddedc":"### Step 1 - Convolution","086285b5":"### Step 4 - Full Connection","6d632708":"# Prediction of digits in images are in order shown in above output","ec4fe015":"## Part 3 - Training the CNN","345694cd":"# Prediction of all images in mnist original dataset folder attached below.","6bbb3484":"### Adding a second convolutional layer","535a456a":"### Preprocessing the Training set","898541c4":"## Part 4 - Making a single prediction from test set","78b1d142":"### Importing the libraries","8a798102":"## Part 2 - Building the CNN","b0e0c932":"![samples_0000.png](attachment:samples_0000.png)","935804ec":"# READ A NUMBER PLATE","3f61590f":"![samples_0000.png](attachment:samples_0000.png)","c371bc20":"### Preprocessing the Test set","3168cbae":"# Prediction for all testSet Images","18aaf2b3":"### Step 5 - Output Layer","d981f4a7":"#-PREDICTING 16 DIGITS INDIVIDUALLY IN SINGLE IMAGE OF MNIST ORIGINAL DATASET **TRAINING SET SAMPLE**. ONE SAMPLE IS SHOWN BELOW. I HAVE ATTACHED THE MNIST SAMPLE IMAGES FOR THIS EXERCISE. HOPE THAT HELPS SOME WAY","d6f33a37":"### Step 3 - Flattening","46719093":"### Initialising the CNN","78c3eee6":"## Part 1 - Data Preprocessing","711889a5":"![img_0.png](attachment:img_0.png)","492b5acd":"# Calculating x_cor_values"}}