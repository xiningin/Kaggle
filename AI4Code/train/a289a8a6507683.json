{"cell_type":{"39dd2dae":"code","4b0cf8ff":"code","19c2aa18":"code","3789da40":"code","11f39a80":"code","286c7c83":"code","a8fadcf9":"code","71eac627":"code","712e8218":"code","ba9f4b25":"code","56b9b194":"code","5e79de19":"code","4c764f6a":"code","10e92073":"code","0e4f9f1e":"code","e22ec701":"code","027a3882":"code","196764e6":"code","6f986e00":"code","3158a2c7":"code","7c0e1616":"code","1340b4f9":"code","72e279bc":"code","c91be3c1":"code","be222ef2":"code","bd7bd616":"code","e5f9130b":"code","843edb67":"code","1695ed19":"code","30dc996e":"code","14c8979f":"code","d519827f":"code","10b6d1a9":"code","924c5b67":"code","b8660120":"markdown","80a794fc":"markdown","87f12c1b":"markdown","ae6a077b":"markdown","bb68b6ab":"markdown","8230babe":"markdown","16bbb956":"markdown","594253c3":"markdown","417d1025":"markdown","cc26e319":"markdown","81d97f70":"markdown","d4118392":"markdown","bf0e683b":"markdown","f77b22ea":"markdown","178b3ef1":"markdown","ad0b1fba":"markdown","d9ced1bf":"markdown","3a9b618b":"markdown","c00d66b2":"markdown","a428191e":"markdown","f4cebc1f":"markdown","c3a54e4b":"markdown"},"source":{"39dd2dae":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\n","4b0cf8ff":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n    \nfrom sklearn.preprocessing import OneHotEncoder\n%matplotlib inline","19c2aa18":"data = pd.read_csv('..\/input\/WA_Fn-UseC_-Telco-Customer-Churn.csv')\ndata.head()","3789da40":"data['Churn'].value_counts()","11f39a80":"data.shape","286c7c83":"data.dtypes","a8fadcf9":"data['TotalCharges'] = pd.to_numeric(data['TotalCharges'], errors='coerce')","71eac627":"data.isnull().sum()","712e8218":"categorical_var = list(data.dtypes.loc[data.dtypes == 'object'].index)\nprint(len(categorical_var))\nprint(categorical_var)","ba9f4b25":"categorical_var.remove('customerID')","56b9b194":"fig, ax =plt.subplots(6,3,figsize=(12,20))\n\n\nsns.countplot(data['gender'], ax=ax[0][0])\nsns.countplot(data['Partner'], ax=ax[0][1])\nsns.countplot(data['Dependents'], ax=ax[0][2])\n\nsns.countplot(data['PhoneService'], ax=ax[1][0])\nsns.countplot(data['MultipleLines'], ax=ax[1][1])\nsns.countplot(data['InternetService'], ax=ax[1][2])\n\nsns.countplot(data['OnlineSecurity'], ax=ax[2][0])\nsns.countplot(data['OnlineBackup'], ax=ax[2][1])\nsns.countplot(data['DeviceProtection'], ax=ax[2][2])\n\nsns.countplot(data['TechSupport'], ax=ax[3][0])\nsns.countplot(data['StreamingTV'], ax=ax[3][1])\nsns.countplot(data['StreamingMovies'], ax=ax[3][2])\n\nsns.countplot(data['Contract'], ax=ax[4][0])\nsns.countplot(data['PaperlessBilling'], ax=ax[4][1])\nsns.countplot(data['PaymentMethod'], ax=ax[4][2])\n\nsns.countplot(data['Churn'], ax=ax[5][0])\n\nfig.show()","5e79de19":"continuous_var = ['SeniorCitizen','tenure','MonthlyCharges','TotalCharges']\ndata.describe()","4c764f6a":"nd = pd.melt(data, value_vars = continuous_var)\nn1 = sns.FacetGrid (nd, col='variable', col_wrap=2, sharex=False, sharey = False)\nn1 = n1.map(sns.distplot, 'value')\nn1","10e92073":"corr = data[continuous_var].corr()\nsns.heatmap(corr)","0e4f9f1e":"print (corr['TotalCharges'].sort_values(ascending=False), '\\n') ","e22ec701":"sns.jointplot(x=data['TotalCharges'], y=data['tenure'])","027a3882":"for var in categorical_var:\n    if var!='Churn':\n        test = data.groupby([var,'Churn'])\n        print(test.size(),'\\n\\n')","196764e6":"import scipy.stats as stats\nfrom scipy.stats import chi2_contingency\n\nclass ChiSquare:\n    def __init__(self, dataframe):\n        self.df = dataframe\n        self.p = None #P-Value\n        self.chi2 = None #Chi Test Statistic\n        self.dof = None\n        \n        self.dfObserved = None\n        self.dfExpected = None\n        \n    def _print_chisquare_result(self, colX, alpha):\n        result = \"\"\n        if self.p<alpha:\n            result=\"{0} is IMPORTANT for Prediction\".format(colX)\n        else:\n            result=\"{0} is NOT an important predictor. (Discard {0} from model)\".format(colX)\n\n        print(result)\n        \n    def TestIndependence(self,colX,colY, alpha=0.05):\n        X = self.df[colX].astype(str)\n        Y = self.df[colY].astype(str)\n        \n        self.dfObserved = pd.crosstab(Y,X) \n        chi2, p, dof, expected = stats.chi2_contingency(self.dfObserved.values)\n        self.p = p\n        self.chi2 = chi2\n        self.dof = dof \n        \n        self.dfExpected = pd.DataFrame(expected, columns=self.dfObserved.columns, index = self.dfObserved.index)\n        \n        self._print_chisquare_result(colX,alpha)\n\ndf = data\n#Initialize ChiSquare Class\ncT = ChiSquare(df)\n\n#Feature Selection\nfor var in categorical_var:\n    cT.TestIndependence(colX=var,colY=\"Churn\" ) ","6f986e00":"# ANOVA test\nimport scipy.stats as stats\n    \nfor var in continuous_var:    \n    result = stats.f_oneway(data[var][data['Churn'] == 'Yes'], \n                            data[var][data['Churn'] == 'No'])\n    print(var)\n    print(result)","3158a2c7":"from sklearn.feature_selection import SelectKBest\nfrom scipy.stats import ttest_ind\n\nt_stat = []\nfor var in continuous_var:\n    var_no_churn = data[var][data[\"Churn\"] == \"No\"]\n    var_yes_churn = data[var][data[\"Churn\"] == \"Yes\"]\n    t_value = ttest_ind(var_no_churn, var_yes_churn, equal_var=False)\n    print(var)\n    print(t_value)\n    #t_stat.append(t_value)","7c0e1616":"data.isnull().sum()","1340b4f9":"data['TotalCharges'].fillna(data['TotalCharges'].mean(), inplace=True)","72e279bc":"categorical_var","c91be3c1":"#first convert all the string columns to categorical form\nfor var in categorical_var:\n    data[var] = data[var].astype('category')","be222ef2":"data[categorical_var] = data[categorical_var].apply(lambda x: x.cat.codes)","bd7bd616":"target = data['Churn']\ndata=data.drop('customerID',axis=1)\nall_columns = list(data.columns)\nall_columns.remove('Churn')","e5f9130b":"import warnings\nwarnings.filterwarnings('ignore')\nfrom sklearn.feature_selection import RFE\nfrom sklearn.linear_model import LogisticRegression\n\nX = data[all_columns] # Features\ny = data['Churn'] # Target variable\n\n# Feature extraction\nmodel = LogisticRegression()\nrfe = RFE(model, 8)\nfit = rfe.fit(X, y)\nprint(\"Num Features: %s\" % (fit.n_features_))\nprint(\"Selected Features: %s\" % (fit.support_))\nprint(\"Feature Ranking: %s\" % (fit.ranking_))","843edb67":"selected_features_rfe = list(fit.support_)\n","1695ed19":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\n\nfinal_features_rfe = []    \nfor status, var in zip(selected_features_rfe, all_columns):\n    if status == True:\n        final_features_rfe.append(var)\n        \nfinal_features_rfe","30dc996e":"X_rfe_lr = data[final_features_rfe]\ny = data['Churn']\n\nX_train_rfe_lr,X_test_rfe_lr,y_train_rfe_lr,y_test_rfe_lr=train_test_split(X_rfe_lr,y,test_size=0.25,random_state=0)\n\nlr_model = LogisticRegression()\n\n# fit the model with data\nlr_model.fit(X_train_rfe_lr,y_train_rfe_lr)\ny_pred_rfe_lr=lr_model.predict(X_test_rfe_lr)\n\nacc_rfe_lr = metrics.accuracy_score(y_test_rfe_lr, y_pred_rfe_lr)\nprint(\"Accuracy: \",acc_rfe_lr)\n","14c8979f":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=0)\n# instantiate the model (using the default parameters)\nlr_model_single = LogisticRegression()\n\n# fit the model with data\nlr_model_single.fit(X_train,y_train)\ny_pred=lr_model_single.predict(X_test)\n\nlr_acc = metrics.accuracy_score(y_test, y_pred)\nprint(\"Accuracy: \",lr_acc)","d519827f":"# import the metrics class\nfrom sklearn import metrics\ncnf_matrix = metrics.confusion_matrix(y_test, y_pred)\ncnf_matrix","10b6d1a9":"from sklearn.metrics import roc_curve, auc\nfpr_1, tpr_1, thresholds = roc_curve(y_test, y_pred_rfe_lr)\nfpr_2, tpr_2, thresholds = roc_curve(y_test, y_pred)\nroc_auc_1 = auc(fpr_1, tpr_1)\nroc_auc_2 = auc(fpr_2, tpr_2)","924c5b67":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,10))\nplt.title('Receiver Operating Characteristic')\nplt.plot(fpr_1,tpr_1, color='red',label = 'AUC = %0.2f' % roc_auc_1)\nplt.plot(fpr_2,tpr_2, color='green',label = 'AUC = %0.2f' % roc_auc_2)\nplt.legend(loc = 'lower right')\nplt.plot([0, 1], [0, 1],linestyle='--')\nplt.axis('tight')\nplt.ylabel('True Positive Rate')\nplt.xlabel('False Positive Rate')","b8660120":"## Bivariate Analysis\n\nBivariate analysis deals with the analysis of two variables, to find the relationship between them. There are three cases which we will discuss here.\n\n### Continuous -Continuous Variables :\n    1. Scatter plots\n    2. Correlation\n\n### Categorical-Categorical Variables:\n    1. cross tables\n    2. stacked column charts\n    3. chi-square test\n    \n### Categorical-Continuous Variables:\n    1. z-test\/t-test\n    2. ANOVA test","80a794fc":"#### t-test\/z-test\n","87f12c1b":"### Logistic regression","ae6a077b":"## Univariate Analysis\n\nUnivariate analysis is the simplest form of analyzing data. \u201cUni\u201d means \u201cone\u201d, so in other words your data has only one variable. It doesn\u2019t deal with causes or relationships (unlike regression) and it\u2019s major purpose is to describe; it takes data, summarizes that data and finds patterns in the data. source [here](https:\/\/www.statisticshowto.datasciencecentral.com\/univariate\/)\n\n\n### Categorical Variables:\n   1. customerID\n   2. gender\n   3. Partner\n   4. Dependents\n   5. PhoneService\n   6. MultipleLines\n   7. InternetService\n   8. OnlineSecurity\n   9. OnlineBackup\n   10. DeviceProtection\n   11. TechSupport\n   12. StreamingTV\n   13. StreamingMovies\n   14. Contract\n   15. PaperlessBilling\n   16. PaymentMethod\n   17. Churn\n","bb68b6ab":"### 2. Categorical-Categorical Vairables","8230babe":"Now we will now encode all the categorical variables into numeric values as some of the ML algorithms will not work direclty with the categorical variables.`LabelEncoder` function from sklearn is used to encode variables.","16bbb956":"As we can see from the data, the variable 'TotalChares' is numerical but when we are reading it using pandas it is of type object so convert it back to numerical.","594253c3":"## Feature selection \/ extraction\n There are three ways for performing the feature seletion:\n 1. Filter based method\n 3. Wrapper based methods\n 4. Embedded methods\n \n### 1. Filter based methods\nStatistical tests can be used to select those features that have the strongest relationship with the output variable. Here we can select the features based on the output of the statistical test. Different statistical which can be use for feature selection are:\n  - chi-square test\n  - z\/t test\n  - ANOVA\n\n### 2. Filter based methods\n  - Forward selection\n  - Backward elimination\n  - Recursive Feature elimination\n  \n### 3. Embedded methods\n  - LASSO\n  - Elastic net\n  - Ridge regression\n","417d1025":"Convert all the categorical variables to numerical form using labelencoder","cc26e319":"We can say that the variable `TotalCharges` and `tenure` are highly positive correlated.","81d97f70":"### 3. Categorical-Continuous Variables","d4118392":"You can analyze all relevant customer data and develop focused customer retention programs.\" [IBM Sample Data Sets]\nEach row represents a customer, each column contains customer\u2019s attributes described on the column Metadata.\nThe raw data contains 7043 rows (customers) and 21 columns (features).\nThe \u201cChurn\u201d column is our target.\n\nkaggle competion: https:\/\/www.kaggle.com\/blastchar\/telco-customer-churn\n\n## Dataset Description:\n\n**customerID:** Customer ID\n\n**gender:** Customer gender (female, male)\n\n**SeniorCitizen:** Whether the customer is a senior citizen or not (1, 0)\n\n**Partner:** Whether the customer has a partner or not (Yes, No)\n\n**Dependents:** Whether the customer has dependents or not (Yes, No)\n\n**tenure:** Number of months the customer has stayed with the company\n\n**PhoneService:** Whether the customer has a phone service or not (Yes, No)\n\n**MultipleLines:** Whether the customer has multiple lines or not (Yes, No, No phone service)\n\n**InternetService:** Customer\u2019s internet service provider (DSL, Fiber optic, No)\n\n**OnlineSecurity:** Whether the customer has online security or not (Yes, No, No internet service)\n\n**OnlineBackup:** Whether the customer has online backup or not (Yes, No, No internet service)\n\n**DeviceProtection:** Whether the customer has device protection or not (Yes, No, No internet service)\n\n**TechSupport:** Whether the customer has tech support or not (Yes, No, No internet service)\n\n**StreamingTV:** Whether the customer has streaming TV or not (Yes, No, No internet service)\n\n**StreamingMovies:** Whether the customer has streaming movies or not (Yes, No, No internet service)\n\n**Contract:** The contract term of the customer (Month-to-month, One year, Two year)\n\n**PaperlessBilling:** Whether the customer has paperless billing or not (Yes, No)\n\n**PaymentMethod:** The customer\u2019s payment method (Electronic check, Mailed check, Bank transfer (automatic), Credit card (automatic))\n\n**MonthlyCharges:** The amount charged to the customer monthly\n\n**TotalCharges:** The total amount charged to the customer\n\n**Churn:** Whether the customer churned or not (Yes or No)\n","bf0e683b":"here also we can see the direct correlation between thse two variables. We can also spot that there is no outliers present in them.","f77b22ea":"### using RFE + logistic_regression","178b3ef1":"## Model buidling","ad0b1fba":"### Continuous Variables\n\n1. SeniorCitizen\n2. tenure\n3. MonthlyCharges\n4. TotalCharges","d9ced1bf":"### Chi Square test\n","3a9b618b":"#### ANOVA test","c00d66b2":"### 1. Continuous-Continuous Variables","a428191e":"## Missing Value treatment\n","f4cebc1f":"## Performance Measures\n","c3a54e4b":"Finally, to get a quick glimpse of all continuous variables in a data set, let's plot histograms for all numeric variables to determine if all variables are skewed. "}}