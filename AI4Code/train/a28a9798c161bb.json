{"cell_type":{"f23e2fb4":"code","4599a5fe":"code","c52b67c1":"code","610015b7":"code","e0b89128":"code","3e6f29ee":"code","dc4fb2be":"code","010eee75":"code","0deb0e05":"code","10cd9f7b":"code","b8d12f77":"code","e5f835b8":"code","d3db5a6e":"code","4e7cba54":"code","dc450207":"code","e53ef785":"code","4b6c11be":"code","c825f06a":"code","8d0c621d":"code","ec842632":"code","d29dcff4":"code","8af4a8d5":"code","091db4a7":"code","519a58fc":"code","e48fa2f8":"code","47c0d926":"markdown","49ad56ed":"markdown","91257881":"markdown","6dbe2ba1":"markdown","cd364ec5":"markdown","9278dddd":"markdown","c5ec4927":"markdown","c824de27":"markdown","fb1c23ae":"markdown","b43c1574":"markdown","4b904b84":"markdown","7e81d0fe":"markdown","567122ff":"markdown","6ab3895b":"markdown","a5deb2e8":"markdown","79db81ca":"markdown","678f3ed4":"markdown","85bad6e3":"markdown","5ed7341d":"markdown"},"source":{"f23e2fb4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\nprint('\\n ')\nprint('Getting traing dataset...')\ndata = pd.read_csv('..\/input\/fifa19\/data.csv', index_col=0)\nprint('Traing data set obtained. \\n')","4599a5fe":"data.head(3)","c52b67c1":"data.drop('Photo', inplace=True, axis=1)\ndata.drop('Flag', inplace=True, axis=1)\ndata.drop('Club Logo', inplace=True, axis=1)\ndata.fillna(0, inplace=True)\ndata.head(3)","610015b7":"data.columns","e0b89128":"stats = ['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing',\n       'Volleys', 'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing',\n       'BallControl', 'Acceleration', 'SprintSpeed', 'Agility', 'Reactions',\n       'Balance', 'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\n\nfor st in stats: \n    print('Best 3 players in', st)\n    print(data.sort_values(st, ascending = False)[['Name', st]].head(3))\n    print('\\n')\n    ","3e6f29ee":"plt.figure(figsize=(15,8))\nfor st in stats:\n    b = sns.distplot(data[st], label=st, kde=False)\n    b.set_xlabel('Stats', fontsize=20)\n    b.set_ylabel('Count', fontsize=20)\n    \nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()","dc4fb2be":"stats_ballskills = ['BallControl', 'Dribbling']\nstats_defence = ['Marking', 'SlidingTackle', 'StandingTackle']\nstats_mental = ['Aggression', 'Reactions', 'Positioning', 'Interceptions', 'Vision', 'Composure']\nstats_passing = ['Crossing', 'ShortPassing', 'LongPassing']\nstats_physical = ['Acceleration', 'Stamina', 'Strength', 'Balance', 'SprintSpeed', 'Agility', 'Jumping']\nstats_shooting = ['HeadingAccuracy', 'ShotPower', 'Finishing', 'LongShots', 'Curve', 'FKAccuracy', 'Penalties', 'Volleys']\n\nstats_GK = ['GKDiving','GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\n\nplt.figure(figsize=(15,8))\nfor st in stats_ballskills:\n    b = sns.distplot(data[st], label=st, kde=False)\n    plt.title('Ball Skills', fontsize=25)\n    b.set_xlabel('Stats', fontsize=20)\n    b.set_ylabel('Count', fontsize=20)\n    \nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()\n\nplt.figure(figsize=(15,8))\nfor st in stats_defence:\n    b = sns.distplot(data[st], label=st, kde=False)\n    plt.title('Defence', fontsize=25)\n    b.set_xlabel('Stats', fontsize=20)\n    b.set_ylabel('Count', fontsize=20)\n    \nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()\n\nplt.figure(figsize=(15,8))\nfor st in stats_mental:\n    b = sns.distplot(data[st], label=st, kde=False)\n    plt.title('Mental', fontsize=25)\n    b.set_xlabel('Stats', fontsize=20)\n    b.set_ylabel('Count', fontsize=20)\n    \nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()\n\nplt.figure(figsize=(15,8))\nfor st in stats_passing:\n    b = sns.distplot(data[st], label=st, kde=False)\n    plt.title('Passing', fontsize=25)\n    b.set_xlabel('Stats', fontsize=20)\n    b.set_ylabel('Count', fontsize=20)\n    \nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()\n\nplt.figure(figsize=(15,8))\nfor st in stats_physical:\n    b = sns.distplot(data[st], label=st, kde=False)\n    plt.title('Physical', fontsize=25)\n    b.set_xlabel('Stats', fontsize=20)\n    b.set_ylabel('Count', fontsize=20)\n    \nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()\n\nplt.figure(figsize=(15,8))\nfor st in stats_shooting:\n    b = sns.distplot(data[st], label=st, kde=False)\n    plt.title('Shooting', fontsize=25)\n    b.set_xlabel('Stats', fontsize=20)\n    b.set_ylabel('Count', fontsize=20)\n    \nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()\n\nplt.figure(figsize=(15,8))\nfor st in stats_GK:\n    c = sns.distplot(data[st], label=st, kde=False)\n    plt.title('Goalkeeper', fontsize=25)\n    c.set_xlabel('Stats', fontsize=20)\n    c.set_ylabel('Count', fontsize=20)\n    \nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()","010eee75":"plt.figure(figsize=(15,8))\nsns.distplot(data[data['Age']<23]['Overall'], label='Under 23', kde=False)\nsns.distplot(data[(data['Age']>=23) & (data['Age']<28)]['Overall'], label='[23, 28)', kde=False)\nsns.distplot(data[(data['Age']>=28) & (data['Age']<33)]['Overall'], label='[28, 33)', kde=False)\nc = sns.distplot(data[data['Age']>=33]['Overall'], label='Over 33', kde=False)\nplt.title('Overall by age (Histogram)', fontsize=25)\nc.set_xlabel('Overall', fontsize=20)\nc.set_ylabel('Count', fontsize=20)\nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()\n\nplt.figure(figsize=(15,8))\nsns.distplot(data[data['Age']<23]['Overall'], label='Under 23', kde=True, hist=False)\nsns.distplot(data[(data['Age']>=23) & (data['Age']<28)]['Overall'], label='[23, 28)', kde=True,hist=False)\nsns.distplot(data[(data['Age']>=28) & (data['Age']<33)]['Overall'], label='[28, 33)', kde=True,hist=False)\nc = sns.distplot(data[data['Age']>=33]['Overall'], label='Over 33', kde=True,hist=False)\nplt.title('Overall by age (KDE)', fontsize=25)\nc.set_xlabel('Overall', fontsize=20)\nc.set_ylabel('Percentage', fontsize=20)\nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()","0deb0e05":"plt.figure(figsize=(15,8))\nsns.distplot(data[data['Age']<23]['Potential'], label='Under 23', kde=False)\nsns.distplot(data[(data['Age']>=23) & (data['Age']<28)]['Potential'], label='[23, 28)', kde=False)\nsns.distplot(data[(data['Age']>=28) & (data['Age']<33)]['Potential'], label='[28, 33)', kde=False)\nc = sns.distplot(data[data['Age']>=33]['Potential'], label='Over 33', kde=False)\nplt.title('Potential by age (Histogram)', fontsize=25)\nc.set_xlabel('Potential', fontsize=20)\nc.set_ylabel('Count', fontsize=20)\nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()\n\nplt.figure(figsize=(15,8))\nsns.distplot(data[data['Age']<23]['Potential'], label='Under 23', kde=True, hist=False)\nsns.distplot(data[(data['Age']>=23) & (data['Age']<28)]['Potential'], label='[23, 28)', kde=True,hist=False)\nsns.distplot(data[(data['Age']>=28) & (data['Age']<33)]['Potential'], label='[28, 33)', kde=True,hist=False)\nc = sns.distplot(data[data['Age']>=33]['Potential'], label='Over 33', kde=True,hist=False)\nplt.title('Potential by age (KDE)', fontsize=25)\nc.set_xlabel('Potential', fontsize=20)\nc.set_ylabel('Percentage', fontsize=20)\nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()","10cd9f7b":"plt.figure(figsize=(15,8))\nsns.distplot(data[data['Age']<23]['Potential'], label='Under 23', kde=True, hist=False)\nsns.distplot(data[(data['Age']>=23) & (data['Age']<28)]['Potential'], label='[23, 28)', kde=True,hist=False)\nsns.distplot(data[(data['Age']>=28) & (data['Age']<33)]['Overall'], label='[28, 33)', kde=True,hist=False)\nc = sns.distplot(data[data['Age']>=33]['Overall'], label='Over 33', kde=True,hist=False)\nplt.title('Evolution of Overall stats by age', fontsize=25)\nc.set_xlabel('Potential\/Overall', fontsize=20)\nc.set_ylabel('Percentage', fontsize=20)\nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()","b8d12f77":"print('Number of players Nationalities in the dataset:')\nprint(data['Nationality'].nunique())\nprint('\\n')\nprint('List of players Nationalities in the dataset:')\nnationality = data['Nationality'].unique()\nprint(nationality)","e5f835b8":"plt.figure(figsize=(40,20))\nb = sns.countplot(x = 'Nationality', data=data, order = data['Nationality'].value_counts().index)\nb.axes.set_title(\"Distribution of Nationalities\",fontsize=30)\nb.set_xlabel(\"Nationality\",fontsize=25)\nb.set_ylabel(\"# of Players\",fontsize=25)\nb.set_xticklabels(b.get_xticklabels(), rotation=90, fontsize=12)\nplt.show()","d3db5a6e":"df = data\nfor nat in nationality:\n    if ((data[data['Nationality'] == nat].count()[0])<=100):\n        df = df[~df.Nationality.str.contains(nat)]\n\nplt.figure(figsize=(20,12))\nb = sns.countplot(x = 'Nationality', data=df, order = df['Nationality'].value_counts().index)\nb.axes.set_title(\"Distribution of Nationalities with more than 100 players\",fontsize=30)\nb.set_xlabel(\"Nationality\",fontsize=25)\nb.set_ylabel(\"# of Players\",fontsize=25)\nb.set_xticklabels(b.get_xticklabels(), rotation=90, fontsize=16)\nplt.show()","4e7cba54":"from plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)\nfrom plotly import tools\nimport plotly.graph_objs as go","dc450207":"def show_stat(data, xx):\n    x = data[data['Name'] == xx]\n    # define the average stats\n    ball_skills = np.mean(np.array([x['BallControl'].values[0], x['Dribbling'].values[0]]))\n    defense = np.mean(np.array([x['Marking'].values[0], x['SlidingTackle'].values[0], x['StandingTackle'].values[0]]))\n    mental = np.mean(np.array([x['Aggression'].values[0], x['Reactions'].values[0], x['Positioning'].values[0], x['Interceptions'].values[0],x['Vision'].values[0]]))\n    passing =  np.mean(np.array([x['Crossing'].values[0], x['ShortPassing'].values[0], x['LongPassing'].values[0]]))\n    physical = np.mean(np.array([x['Acceleration'].values[0], x['Stamina'].values[0], x['Strength'].values[0], x['Balance'].values[0],x['SprintSpeed'].values[0],x['Agility'].values[0],x['Jumping'].values[0]]))\n    shooting = np.mean(np.array([x['HeadingAccuracy'].values[0], x['ShotPower'].values[0], x['Finishing'].values[0], x['LongShots'].values[0],x['Curve'].values[0],x['FKAccuracy'].values[0],x['Penalties'].values[0], x['Volleys'].values[0]]))\n    \n    goalkeeper = np.mean(np.array([x['GKPositioning'].values[0],x['GKKicking'].values[0],x['GKHandling'].values[0],x['GKReflexes'].values[0],x['GKDiving'].values[0]]))\n    \n    if goalkeeper<30 :\n        data = [go.Scatterpolar(\n        r = [\n            mental,\n            ball_skills,\n            passing, \n            physical, \n            shooting, \n            defense, \n            #goalkeeper,\n            mental #has to be the same as the beginning\n        ],\n        theta = [\n            'Mental', 'Ball Skills',  'Passing', 'Physical', 'Shooting', 'Defense', 'Mental'\n        ],fill = 'toself')]\n    else : \n        data = [go.Scatterpolar(\n        r = [\n            mental,\n            ball_skills,\n            passing, \n            physical, \n            #shooting, \n            defense, \n            goalkeeper,\n            mental #has to be the same as the beginning\n        ],\n        theta = [\n            'Mental', 'Ball Skills',  'Passing', 'Physical',  'Defense', 'Goalkeeper', 'Mental'\n        ],fill = 'toself')]\n    \n\n    layout = go.Layout(polar = dict(\n        radialaxis = dict(\n            visible = True,\n            range = [0, 99]\n        )\n    ),showlegend = False,\n                       title = \"Stats of {}\".format(x.Name.values[0]))\n    \n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig, filename = \"Single Player stats\")","e53ef785":"show_stat(data, 'V. van Dijk')","4b6c11be":"show_stat(data, 'T. Courtois')","c825f06a":"# Creating a method to compare 2 player\ndef compare_players(data, xx,yy):\n    x = data[data['Name'] == xx]\n    y = data[data['Name'] == yy]\n    \n    # define the average stats\n    # player x\n    ball_skills = np.mean(np.array([x['BallControl'].values[0], x['Dribbling'].values[0]]))\n    defense = np.mean(np.array([x['Marking'].values[0], x['SlidingTackle'].values[0], x['StandingTackle'].values[0]]))\n    mental = np.mean(np.array([x['Aggression'].values[0], x['Reactions'].values[0], x['Positioning'].values[0], x['Interceptions'].values[0],x['Vision'].values[0]]))\n    passing =  np.mean(np.array([x['Crossing'].values[0], x['ShortPassing'].values[0], x['LongPassing'].values[0]]))\n    physical = np.mean(np.array([x['Acceleration'].values[0], x['Stamina'].values[0], x['Strength'].values[0], x['Balance'].values[0],x['SprintSpeed'].values[0],x['Agility'].values[0],x['Jumping'].values[0]]))\n    shooting = np.mean(np.array([x['HeadingAccuracy'].values[0], x['ShotPower'].values[0], x['Finishing'].values[0], x['LongShots'].values[0],x['Curve'].values[0],x['FKAccuracy'].values[0],x['Penalties'].values[0], x['Volleys'].values[0]]))\n    goalkeeper = np.mean(np.array([x['GKPositioning'].values[0],x['GKKicking'].values[0],x['GKHandling'].values[0],x['GKReflexes'].values[0],x['GKDiving'].values[0]]))\n    \n    #player y\n    # define the average stats\n    y_ball_skills = np.mean(np.array([y['BallControl'].values[0], y['Dribbling'].values[0]]))\n    y_defense = np.mean(np.array([y['Marking'].values[0], y['SlidingTackle'].values[0], y['StandingTackle'].values[0]]))\n    y_mental = np.mean(np.array([y['Aggression'].values[0], y['Reactions'].values[0], y['Positioning'].values[0], y['Interceptions'].values[0],y['Vision'].values[0]]))\n    y_passing =  np.mean(np.array([y['Crossing'].values[0], y['ShortPassing'].values[0], y['LongPassing'].values[0]]))\n    y_physical = np.mean(np.array([y['Acceleration'].values[0], y['Stamina'].values[0], y['Strength'].values[0], y['Balance'].values[0],y['SprintSpeed'].values[0], y['Agility'].values[0], y['Jumping'].values[0]]))\n    y_shooting = np.mean(np.array([y['HeadingAccuracy'].values[0], y['ShotPower'].values[0], y['Finishing'].values[0], y['LongShots'].values[0], y['Curve'].values[0], y['FKAccuracy'].values[0], y['Penalties'].values[0], y['Volleys'].values[0]]))\n    y_goalkeeper = np.mean(np.array([y['GKPositioning'].values[0],y['GKKicking'].values[0], y['GKHandling'].values[0], y['GKReflexes'].values[0], y['GKDiving'].values[0]]))\n    \n    if ((goalkeeper <30) & (y_goalkeeper <30)):\n        trace0 = go.Scatterpolar(r = [\n            mental,ball_skills,passing, physical, shooting, defense, #goalkeeper,\n                                      mental #has to be the same as the beginning\n                                     ],\n                                 theta = ['Mental', 'Ball Skills',  'Passing', 'Physical', 'Shooting', 'Defense',  'Mental'\n                                         ],\n                                 fill = 'toself', \n                                 name = x.Name.values[0]\n                                )\n\n        trace1 = go.Scatterpolar(r = [\n            y_mental, y_ball_skills, y_passing, y_physical, y_shooting, y_defense, #y_goalkeeper,\n                                      y_mental #has to be the same as the beginning\n                                     ],\n                                 theta = ['Mental', 'Ball Skills',  'Passing', 'Physical', 'Shooting', 'Defense',  'Mental'\n                                         ],\n                                 fill = 'toself', \n                                 name = y.Name.values[0]\n                                )\n    elif ((goalkeeper >=30) & (y_goalkeeper >=30)): \n        trace0 = go.Scatterpolar(\n            r = [\n            mental,\n            ball_skills,\n            passing, \n            physical, \n            #shooting, \n            defense, \n            goalkeeper,\n            mental #has to be the same as the beginning\n        ],\n        theta = [\n            'Mental', 'Ball Skills',  'Passing', 'Physical',  'Defense', 'Goalkeeper', 'Mental'\n        ],\n        fill = 'toself', \n        name = x.Name.values[0]\n    )\n\n        trace1 = go.Scatterpolar(\n        r = [\n            y_mental,\n            y_ball_skills,\n            y_passing, \n            y_physical, \n            #y_shooting, \n            y_defense, \n            y_goalkeeper,\n            y_mental #has to be the same as the beginning\n        ],\n        theta = [\n            'Mental', 'Ball Skills',  'Passing', 'Physical',  'Defense', 'Goalkeeper', 'Mental'\n        ],\n        fill = 'toself',\n        name = y.Name.values[0]\n    )\n    else : \n        trace0 = go.Scatterpolar(\n        r = [\n            mental,\n            ball_skills,\n            passing, \n            physical, \n            shooting, \n            defense, \n            goalkeeper,\n            mental #has to be the same as the beginning\n        ],\n        theta = [\n            'Mental', 'Ball Skills',  'Passing', 'Physical', 'Shooting', 'Defense', 'Goalkeeper', 'Mental'\n        ],\n        fill = 'toself', \n        name = x.Name.values[0]\n    )\n\n        trace1 = go.Scatterpolar(\n        r = [\n            y_mental,\n            y_ball_skills,\n            y_passing, \n            y_physical, \n            y_shooting, \n            y_defense, \n            y_goalkeeper,\n            y_mental #has to be the same as the beginning\n        ],\n        theta = [\n            'Mental', 'Ball Skills',  'Passing', 'Physical', 'Shooting', 'Defense', 'Goalkeeper', 'Mental'\n        ],\n        fill = 'toself',\n        name = y.Name.values[0]\n    )\n            \n    \n\n    data = [trace0, trace1]\n\n    layout = go.Layout(\n      polar = dict(\n        radialaxis = dict(\n          visible = True,\n          range = [0, 99]\n        )\n      ),\n      showlegend = True,\n      title = \"{} vs {}\".format(x.Name.values[0],y.Name.values[0])\n    )\n    fig = go.Figure(data=data, layout=layout)\n    iplot(fig, filename = \"Two Player stats\")","8d0c621d":"compare_players(data, 'Sergio Ramos', 'Cristiano Ronaldo')","ec842632":"compare_players(data, 'T. Courtois', 'B. Dr\u0105gowski')","d29dcff4":"compare_players(data, 'T. Courtois', 'Cristiano Ronaldo')","8af4a8d5":"data_ita = data[data['Nationality']=='Italy']\ndata_ita.head(5)","091db4a7":"plt.figure(figsize=(15,8))\nsns.distplot(data_ita[data_ita['Age']<23]['Potential'], label='Under 23', kde=True, hist=False)\nsns.distplot(data_ita[(data_ita['Age']>=23) & (data_ita['Age']<28)]['Potential'], label='[23, 28)', kde=True,hist=False)\nsns.distplot(data_ita[(data_ita['Age']>=28) & (data_ita['Age']<33)]['Overall'], label='[28, 33)', kde=True,hist=False)\nc = sns.distplot(data_ita[data_ita['Age']>=33]['Overall'], label='Over 33', kde=True,hist=False)\nplt.title('Evolution of Overall stats of Italian players by age', fontsize=25)\nc.set_xlabel('Potential\/Overall', fontsize=20)\nc.set_ylabel('Percentage', fontsize=20)\nplt.legend(fontsize=10, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()","519a58fc":"clubs_serieA = ['Juventus', 'Napoli', 'Atalanta', 'Inter', 'Milan', 'Roma',  'Torino', \n                'Lazio','Sampdoria', 'Sassuolo',   'Genoa', 'Chievo Verona',\n                'Fiorentina', 'SPAL', 'Frosinone', 'Cagliari','Bologna', 'Parma', 'Udinese','Empoli']\n\nclubs_serieB = ['Brescia', 'Benevento', 'Livorno', 'Foggia',  'Hellas Verona', \n              'Palermo',  'Lecce','US Salernitana 1919', 'Crotone', \n              'Spezia', 'Cittadella','Perugia', 'Carpi',  'Pescara',\n              'Venezia FC', 'Cosenza', 'Reading', 'Ascoli','Padova']\n\n# Serie A\nplt.figure(figsize=(15,8))\nfor club in clubs_serieA:\n    c = sns.distplot(data_ita[data_ita['Club']==club]['Overall'], label=club, kde=True,hist=False)\n\n    \nplt.title('Dustribution of Overall by Serie A clubs', fontsize=25)\nc.set_xlabel('Overall', fontsize=20)\nc.set_ylabel('Percentage', fontsize=20)    \nplt.legend(fontsize=14, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()\n\n\n# Serie B\nplt.figure(figsize=(15,8))\nfor club in clubs_serieB:\n    c = sns.distplot(data_ita[data_ita['Club']==club]['Overall'], label=club, kde=True,hist=False)\n\n    \nplt.title('Dustribution of Overall by Serie B clubs', fontsize=25)\nc.set_xlabel('Overall', fontsize=20)\nc.set_ylabel('Percentage', fontsize=20)    \nplt.legend(fontsize=14, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()","e48fa2f8":"clubs_top4 = ['Juventus', 'Napoli', 'Atalanta', 'Inter', \n              'FC Barcelona', 'Atl\u00e9tico Madrid' , 'Real Madrid', 'Valencia CF',\n             'Manchester City', 'Liverpool', 'Chelsea', 'Tottenham',\n             'FC Bayern M\u00fcnchen', 'Borussia Dortmund', 'RB Leipzig', 'Bayer 04 Leverkusen',\n             'Paris Saint-Germain', 'LOSC Lille', 'Olympique Lyonnais', 'AS Saint-\u00c9tienne']\n\nplt.figure(figsize=(15,8))\nfor club in clubs_top4:\n    c = sns.distplot(data[data['Club']==club]['Overall'], label=club, kde=True,hist=False)\n\n    \nplt.title('Dustribution of Overall by Top 4 Teams of Top 5 European National League', fontsize=25)\nc.set_xlabel('Overall', fontsize=20)\nc.set_ylabel('Percentage', fontsize=20)    \nplt.legend(fontsize=14, loc='center left', bbox_to_anchor=(1, 0.5))\nplt.show()","47c0d926":"The conclusions seem to be uneffected anyway: according to FIFA19, the new generation of football players are, in average, better than the previous generations; in fact, not only their average Potential is higher, but also the distribution is right-asymmetrical; it seems that we will see more skilled players in the near future!","49ad56ed":"## Nationality distribution","91257881":"It is a difficult graph to read. Let us cut off to nations that have at least 100 players","6dbe2ba1":"It seems that the future is bright: we may'll be able to find 23 decent players for the 2022 World Cup!","cd364ec5":"## Overall Distribution by Team in Serie A and Serie B\n\nWhat About the distribution of Overall by Team in Each PRO series, i.e. Serie A and Serie B","9278dddd":"We now plot the list of the top 3 players for each stat","c5ec4927":"# FIFA 19 Players Dataset\n\n","c824de27":"This case instead is not fair for the Older players, because it is expected that, due to age, their potential will be going to drop. \n\nThe fairest option is thus to plot the Potential of the young (<28) and the Overall for the old (<=28) players:","fb1c23ae":"We may plot an histogram for each statistics to see how those are distributed among all the players in the dataset;","b43c1574":"## Pre-analysis: exploring the Dataset","4b904b84":"## Distribution of Overall and Potential by age\n\nOne may ask: according to FIFA19, are younger players expected to be weaker, equal or stronger than older players? ","7e81d0fe":"## Distribution of Overall by Top 4 Teams per Top 5 Country League","567122ff":"# Analysis of Italian Players","6ab3895b":"## Overall\/Potential of all Italian players: future prospects\n\nLet us analyze how the young players are going to develop w.r.t. the old players. The goal is to understand the future prospects of Italian National Team according to the prediction of FIFA19.","a5deb2e8":"### Histogram plots of the distribution of statistics by type","79db81ca":"As we could have suspected, we have a different behaviour in the distribution of stats of different knid; the brightest examples are the Goalkeeper stats, that are extremely bimodal (a reasonable distribution of high values coming from goalkeepers and a very peaked distribution of low values coming from the other players). \n\nIt is thus wiser to plot histrogram for each class of stats. ","678f3ed4":"Of course plotting the Overall isn't fair for the youngster; we should plot the *expected* overall in the nearby future, that in FIFA19 is encoded into the 'Potential' entry:","85bad6e3":"## Distribution of stats","5ed7341d":"# Showing single player's stats and comparing two players' stats"}}