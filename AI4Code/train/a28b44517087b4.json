{"cell_type":{"a7c550e8":"code","73d67115":"code","873fcf7d":"code","12e7139d":"code","739073fa":"code","288385fa":"code","a1234e4c":"code","4847e78b":"code","3c5b7e98":"code","3dbb86ba":"code","d2c3d126":"code","e57e045c":"code","fd40fbdb":"code","4a226080":"code","0f64b359":"code","1374a2e1":"code","365561e6":"code","ebf891d2":"code","eacb1201":"code","4bdb7511":"code","7d1ce74c":"code","c007200b":"code","1a0be55e":"code","1f858a1f":"code","efde3e08":"code","b6e6c14f":"markdown","3345c846":"markdown","3b3a2df9":"markdown","70da1f3b":"markdown","81f13f93":"markdown","5b835086":"markdown","1c266770":"markdown","bd25174b":"markdown","b625ce6e":"markdown","91f5da15":"markdown","04c264f3":"markdown","c9e5fbf7":"markdown","88d57a3b":"markdown","30d91ecc":"markdown","7d7d785f":"markdown","c6a9658b":"markdown","c195bd12":"markdown","e6d12852":"markdown","244493ef":"markdown","9030cafc":"markdown","f578ae13":"markdown"},"source":{"a7c550e8":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ntmdb = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")\nmovies = pd.read_csv(\"..\/input\/movielens-100k-small-dataset\/movies.csv\")\nratings = pd.read_csv(\"..\/input\/movielens-100k-small-dataset\/ratings.csv\")","73d67115":"# defining a function for plot ours series and not repeat code a lot...\ndef plot_serie(serie):\n    f, axes = plt.subplots(2, 2, figsize=(25, 10)) \n\n    # Axis 1\n    ax1 = axes[0,0]\n    sns.distplot(serie, norm_hist = False, kde=False, ax=ax1)\n    ax1.set(xlabel=\"Average rate\", ylabel=\"Frequency\")\n    ax1.set_title(\"Distribuition of average vote (not normalized)\")\n\n    # Axis 2\n    ax2 = axes[0,1]\n    sns.distplot(serie, ax=ax2)\n    ax2.set(xlabel=\"Average rate\", ylabel=\"Density\")\n    ax2.set_title(\"Distribuition of average vote (normalized)\")\n\n    # Axis 3\n    ax3 = axes[1,0]\n    sns.boxplot(x=serie, ax=ax3)\n    ax3.set(title='Distribution of average vote', xlabel='')\n\n    # Axis 4\n    ax4 = axes[1,1]\n    sns.distplot(serie, hist_kws = {'cumulative':True}, kde_kws = {'cumulative':True}, ax=ax4)\n    ax4.set(xlabel='Average vote', ylabel='Movies %')\n    ax4.set_title('Cumulative average vote')\n\n    f.show()","873fcf7d":"tmdb.head(2)","12e7139d":"# Plot brute date\nplot_serie(tmdb.vote_average)\ntmdb.vote_average.describe()","739073fa":"tmdb_fmt = tmdb.query('vote_count >= 100')\n# Plot formatted date\nplot_serie(tmdb_fmt.vote_average)\nprint(tmdb_fmt.vote_average.describe())","288385fa":"# The TMBD ratings vary from 0 to 10, and here in movie lens, the ratings vary from 0 to 5... we have to fix this, how? just normalize the data. (x 2)\nratings['rating_norm'] = ratings.rating * 2","a1234e4c":"# Plot brute date\nplot_serie(ratings.rating_norm)\nprint(ratings.rating_norm.describe())","4847e78b":"counter_votes = ratings.groupby(\"movieId\").count()\nmovie_id = counter_votes.query(\"rating >= 10\").index\nmovies_fmt = ratings.loc[movie_id.values].dropna()\nmovies_fmt.head(2)","3c5b7e98":"# Plot brute date\nplot_serie(movies_fmt.rating_norm)\nprint(movies_fmt.rating_norm.describe())","3dbb86ba":"from statsmodels.stats.weightstats import DescrStatsW\n\ndef print_ci_with_z(serie,name):\n    ci = DescrStatsW(serie).zconfint_mean()\n    ci_range = round(ci[1] - ci[0],3)\n    ci_rounded = (round(ci[0],3),round(ci[1],3))\n    string = \"The confidence interval (Z) for the {} is {} with a range of {}\".format(name, ci_rounded, ci_range)\n    print(string) \n\ndef print_ci_with_t(serie,name):\n    ci = DescrStatsW(serie).tconfint_mean()\n    ci_range = round(ci[1] - ci[0],3)\n    ci_rounded = (round(ci[0],3),round(ci[1],3))\n    string = \"The confidence interval (T) for the {} is {} with a range of {}\".format(name, ci_rounded, ci_range)\n    print(string)  \n    \ndef print_comp_ci_with_t(serie,name):\n    ci = DescrStatsW(serie).tconfint_mean()\n    ci_range = round(ci[1] - ci[0],3)\n    ci_rounded = (round(ci[0],3),round(ci[1],3))\n    string = \"The confidence interval (T) for the {} is {} with a range of {}\".format(name, ci_rounded, ci_range)\n    descr_todas_as_notas = DescrStatsW(notas.rating)\n    descr_toystory = DescrStatsW(notas1.rating)\n    comparacao = descr_todas_as_notas.get_compare(descr_toystory)\n    print(string)  ","d2c3d126":"# Distribution Z\nprint_ci_with_z(tmdb.vote_average,'brute data')\nprint_ci_with_z(tmdb_fmt.vote_average,'formatted data')\n# Distribution T student\nprint_ci_with_t(tmdb.vote_average,'brute data')\nprint_ci_with_t(tmdb_fmt.vote_average,'formatted data')","e57e045c":"# Distribution Z\nprint_ci_with_z(ratings.rating_norm,'brute data')\nprint_ci_with_z(movies_fmt.rating_norm,'formatted data')\n# Distribution T student\nprint_ci_with_t(ratings.rating_norm,'brute data')\nprint_ci_with_t(movies_fmt.rating_norm,'formatted data')","fd40fbdb":"from statsmodels.stats.weightstats import ztest,zconfint\n# example\nztest(ratings.rating_norm, value = 7.003113967233924)","4a226080":"import numpy as np\nimport math as mt\n\ndef plot_pvalue_confint(series):\n    zvalues = zconfint(series)\n    nmin = mt.floor(zvalues[0])\n    nmax = mt.ceil(zvalues[1])\n    nrange = np.arange(nmin,nmax,1\/100000)\n\n    pvalues = list()\n    for n in nrange:\n        aux = ztest(series, value = n)\n        if aux[1] != 0.0:\n            pvalues.append((n,aux[1]))\n    pvalues = pd.DataFrame(pvalues, columns= ['guess','pvalue'])\n    f, ax = plt.subplots(figsize=(20, 5))\n    sns.scatterplot(x=\"guess\", y=\"pvalue\",\n                    linewidth=0,\n                    data=pvalues, ax=ax)","0f64b359":"plot_pvalue_confint(ratings.rating_norm)","1374a2e1":"f, ax = plt.subplots(figsize=(10, 5))\nsns.violinplot(\n    x=\"movieId\",\n    y=\"rating\",\n    split=True,\n    data=ratings[ratings.movieId.isin([2571,45,356])],\n    ax=ax\n)","365561e6":"# Movie id 2571\nmovie_2571 = ratings[ratings.movieId == 2571]\ndesc_movie_2571 = DescrStatsW(movie_2571.rating)\n\n# Movie id 45\nmovie_45 = ratings[ratings.movieId == 45]\ndesc_movie_45 = DescrStatsW(movie_45.rating)\n\n# Movie id 356\nmovie_356 = ratings[ratings.movieId == 356]\ndesc_movie_356 = DescrStatsW(movie_356.rating)\n","ebf891d2":"desc_movie_2571.get_compare(desc_movie_45).summary()","eacb1201":"desc_movie_2571.get_compare(desc_movie_356).summary()","4bdb7511":"desc_movie_45.get_compare(desc_movie_356).summary()","7d1ce74c":"movies[\"genres\"] = movies[\"genres\"].str.replace(\"-\", \"\")\ngenres = movies[\"genres\"].str.get_dummies()\nprint(\"How much genres we have? %d genres\" % genres.shape[1])\ngen_col = list(genres.columns)\nmovies = movies.join(genres).drop(columns=[\"genres\"], axis=1)\nmovies.head()","c007200b":"def get_rating_by_user(userId):\n    return ratings[ratings[\"userId\"] == userId]\n\ndef get_rating_by_gen(gen, user_rate):\n    ids = movies[movies[gen] == 1].index\n    return user_rate[user_rate.movieId.isin(ids)]\n\ndef get_rating_user_by_gen(userId):\n    user_rating = get_rating_by_user(userId)\n    return user_rating.merge(movies, on=\"movieId\")\n\ndef best_gen(userId):\n    try:\n        user_rate = get_rating_user_by_gen(userId)\n        rate_by_gen = [get_rating_by_gen(gen, user_rate) for gen in gen_col]\n        rate_by_gen = pd.DataFrame(\n            [ng.describe()[\"rating\"] for ng in rate_by_gen], index=gen_col\n        )\n        rate_by_gen[\"cv\"] = (rate_by_gen[\"std\"]) \/ (rate_by_gen[\"mean\"])\n        table = round(\n            rate_by_gen[[\"count\", \"mean\", \"std\", \"cv\"]]\n            .query(\"count > 10\")\n            .sort_values(\"cv\"),\n            3,\n        )\n        return table.index[0]\n    except:\n       # Caso a pessoa n\u00e3o tenha mais de 10 votos em um especifico genero....\n       return \"Not found\"","1a0be55e":"%%time\nfrom joblib import Parallel, delayed\n    \ngen_fav = Parallel(verbose=1, n_jobs=-1)(delayed(best_gen)(uid) for uid in ratings.userId.unique())","1f858a1f":"users = pd.DataFrame(gen_fav, index=ratings.userId.unique(),columns=['Favorite Genre'])","efde3e08":"cout_users = pd.DataFrame(users[\"Favorite Genre\"].value_counts())\ncout_users[\"Genre\"] = cout_users.index\nplt.figure(figsize=(20, 6))\nax = sns.barplot(x=\"Genre\", y=\"Favorite Genre\", data=cout_users)\nplt.title(\"Number of users by favorite genre\")\nplt.ylabel(\"Users\")\nplt.xlabel(\"Genre\")\nplt.show()","b6e6c14f":"### Removing movies with few votes and plot again\nRemoving movies with less than one hundred votes to improve the credibility of our graphic.","3345c846":"# Importing datas and libs","3b3a2df9":"# TMDB\nLet's see how the TMDB votes os distributed in values varying from 0 to 10. We will plot four graphics and compare brute data and formatted data, how extremely serious is clean our dataset? remove the outlines? ","70da1f3b":"### Movies: 45 x 356","81f13f93":"# Compare movies using test\n","5b835086":"Pvalue = 0, means the means are different, and the interval shows the movie 45 is not better than movie 356.","1c266770":"# Confidence interval\n\"Confidence interval. In statistics, a confidence interval (CI) is a type of estimate computed from the statistics of the observed data. This proposes a range of plausible values for an unknown parameter. The interval has an associated confidence level that the true parameter is in the proposed range.\" \n\n[Wikipedia](https:\/\/en.wikipedia.org\/wiki\/Confidence_interval)","bd25174b":"### For TMDB","b625ce6e":"Let's figure out the preferred genre of all the users.","91f5da15":"### For MovieLens","04c264f3":"# MOVIELENS\nNow will be done the same analysis than TMDB, but the datasets are different and cause this we have to 'normalize', or better, make similar to TMDB.","c9e5fbf7":"### Z-Test\n'ztest' -> we will use to test the 'ztest' to verify, how is the probability of the value passed is the mean of our series(numeric set). \n* pvalues = 1.0, means the value equals the mean.\n* pvalues => 0.05, means the value is accepted as the mean, near the mean.\n* pvalues < 0.05, means the value is not accepted as the mean.","88d57a3b":"Pvalue = 0.700, means the means almost equal, and the interval shows the movie 2571 could be better\/not better than movie 356.","30d91ecc":"# Preferred Genre","7d7d785f":"The average rate for Movielens seems different than a normal distribution, centred in ~7. In this example, we eliminated more the 90 thousand movies ( with less vote than 9).","c6a9658b":"### Movies: 2571 x 45","c195bd12":"The average rate seems a normal distribution, centred in 6.35. In this example, we eliminated more the one thousand movies ( with less vote than 99).","e6d12852":"Drama is the most favorite genre in your dataset. ","244493ef":"It's good just plot a graphic and see the difference between the movies, but has a best way. we will compare the confidence intervel","9030cafc":"Pvalue = 0.0, means the means aren't equals, and the interval shows the movie 2571 is better than movie 45.","f578ae13":"### Movies: 2571 x 356"}}