{"cell_type":{"e7df1dee":"code","276800f4":"code","34ac0e87":"code","b97d682c":"code","5abedf00":"code","c0df14e8":"code","85a3c4e6":"code","50c2f65e":"code","23271187":"code","ad4dcf9b":"code","09ce8b00":"code","fab0f372":"code","4905276e":"code","cba49d02":"code","73442b6e":"code","84d195b8":"code","65a066be":"code","08a5dc5f":"code","5a4ca39a":"code","8811375d":"code","19d2fd71":"code","94e57947":"code","39c49dd8":"code","500f4d70":"code","6c9cf3c2":"code","273b0661":"code","be85b9ef":"code","249755af":"code","6db47f34":"code","4fc5ad6c":"code","2a9105e2":"markdown","b9db737f":"markdown","30fd9351":"markdown","65a6b05c":"markdown","85320082":"markdown","c1a39535":"markdown","b9a64f17":"markdown","e15f626e":"markdown","9c863e26":"markdown","37788650":"markdown","d18a57a6":"markdown","8df95ec6":"markdown","1d6269d3":"markdown","0698b941":"markdown","d655a0f2":"markdown","6bfd2b0d":"markdown","21c8004c":"markdown","be3037b7":"markdown","0db539d3":"markdown","01dc92a8":"markdown","b5f93cb6":"markdown","c10cfe1f":"markdown","9f323d32":"markdown","dc1e1ab4":"markdown","2d289163":"markdown","7350016c":"markdown","c8a5ec35":"markdown","cd91abde":"markdown","1214015e":"markdown","2cc51580":"markdown","8dfc6d81":"markdown","2d4f91a9":"markdown","1e6e3939":"markdown"},"source":{"e7df1dee":"from Bio import SeqIO\nfor sequence in SeqIO.parse('..\/input\/dna-sequence-dataset\/example_dna.fa', \"fasta\"):\n    print(sequence.id)\n    print(sequence.seq)\n    print(len(sequence))","276800f4":"import numpy as np\nimport re\ndef string_to_array(seq_string):\n   seq_string = seq_string.lower()\n   seq_string = re.sub('[^acgt]', 'n', seq_string)\n   seq_string = np.array(list(seq_string))\n   return seq_string\n# create a label encoder with 'acgtn' alphabet\nfrom sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()\nlabel_encoder.fit(np.array(['a','c','g','t','z']))","34ac0e87":"def ordinal_encoder(my_array):\n    integer_encoded = label_encoder.transform(my_array)\n    float_encoded = integer_encoded.astype(float)\n    float_encoded[float_encoded == 0] = 0.25 # A\n    float_encoded[float_encoded == 1] = 0.50 # C\n    float_encoded[float_encoded == 2] = 0.75 # G\n    float_encoded[float_encoded == 3] = 1.00 # T\n    float_encoded[float_encoded == 4] = 0.00 # anything else, lets say n\n    return float_encoded\n\n\n#Let\u2019s try it out a simple short sequence:\nseq_test = 'TTCAGCCAGTG'\nordinal_encoder(string_to_array(seq_test))","b97d682c":"from sklearn.preprocessing import OneHotEncoder\ndef one_hot_encoder(seq_string):\n    int_encoded = label_encoder.transform(seq_string)\n    onehot_encoder = OneHotEncoder(sparse=False, dtype=int)\n    int_encoded = int_encoded.reshape(len(int_encoded), 1)\n    onehot_encoded = onehot_encoder.fit_transform(int_encoded)\n    onehot_encoded = np.delete(onehot_encoded, -1, 1)\n    return onehot_encoded\n\n\n#So let\u2019s try it out with a simple short sequence:\nseq_test = 'GAATTCTCGAA'\none_hot_encoder(string_to_array(seq_test))","5abedf00":"def Kmers_funct(seq, size):\n    return [seq[x:x+size].lower() for x in range(len(seq) - size + 1)]\n\n\n#So let\u2019s try it out with a simple sequence:\nmySeq = 'GTGCCCAGGTTCAGTGAGTGACACAGGCAG'\nKmers_funct(mySeq, size=7)","c0df14e8":"words = Kmers_funct(mySeq, size=6)\njoined_sentence = ' '.join(words)\njoined_sentence","85a3c4e6":"mySeq1 = 'TCTCACACATGTGCCAATCACTGTCACCC'\nmySeq2 = 'GTGCCCAGGTTCAGTGAGTGACACAGGCAG'\nsentence1 = ' '.join(Kmers_funct(mySeq1, size=6))\nsentence2 = ' '.join(Kmers_funct(mySeq2, size=6))","50c2f65e":"#Creating the Bag of Words model:\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer()\nX = cv.fit_transform([joined_sentence, sentence1, sentence2]).toarray()\nX","23271187":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","ad4dcf9b":"human_dna = pd.read_table('..\/input\/dna-sequence-dataset\/human.txt')\nhuman_dna.head()","09ce8b00":"human_dna['class'].value_counts().sort_index().plot.bar()\nplt.title(\"Class distribution of Human DNA\")","fab0f372":"chimp_dna = pd.read_table('..\/input\/dna-sequence-dataset\/chimpanzee.txt')\nchimp_dna.head()","4905276e":"chimp_dna['class'].value_counts().sort_index().plot.bar()\nplt.title(\"Class distribution of Chimpanzee DNA\")","cba49d02":"dog_dna = pd.read_table('..\/input\/dna-sequence-dataset\/dog.txt')\ndog_dna.head()","73442b6e":"dog_dna['class'].value_counts().sort_index().plot.bar()\nplt.title(\"Class distribution of Dog DNA\")","84d195b8":"def Kmers_funct(seq, size=6):\n    return [seq[x:x+size].lower() for x in range(len(seq) - size + 1)]\n\n#convert our training data sequences into short overlapping k-mers of length 6. \n#Lets do that for each species of data we have using our Kmers_funct function.\n\nhuman_dna['words'] = human_dna.apply(lambda x: Kmers_funct(x['sequence']), axis=1)\nhuman_dna = human_dna.drop('sequence', axis=1)\n\nchimp_dna['words'] = chimp_dna.apply(lambda x: Kmers_funct(x['sequence']), axis=1)\nchimp_dna = chimp_dna.drop('sequence', axis=1)\n\ndog_dna['words'] = dog_dna.apply(lambda x: Kmers_funct(x['sequence']), axis=1)\ndog_dna = dog_dna.drop('sequence', axis=1)","65a066be":"human_dna.head()","08a5dc5f":"human_texts = list(human_dna['words'])\nfor item in range(len(human_texts)):\n    human_texts[item] = ' '.join(human_texts[item])\n#separate labels\ny_human = human_dna.iloc[:, 0].values # y_human for human_dna","5a4ca39a":"chimp_texts = list(chimp_dna['words'])\nfor item in range(len(chimp_texts)):\n    chimp_texts[item] = ' '.join(chimp_texts[item])\n#separate labels\ny_chim = chimp_dna.iloc[:, 0].values # y_chim for chimp_dna\n\ndog_texts = list(dog_dna['words'])\nfor item in range(len(dog_texts)):\n    dog_texts[item] = ' '.join(dog_texts[item])\n#separate labels\ny_dog = dog_dna.iloc[:, 0].values  # y_dog for dog_dna","8811375d":"y_human","19d2fd71":"from sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(ngram_range=(4,4)) #The n-gram size of 4 is previously determined by testing\nX = cv.fit_transform(human_texts)\nX_chimp = cv.transform(chimp_texts)\nX_dog = cv.transform(dog_texts)","94e57947":"print(X.shape)\nprint(X_chimp.shape)\nprint(X_dog.shape)","39c49dd8":"# Splitting the human dataset into the training set and test set\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, \n                                                    y_human, \n                                                    test_size = 0.20, \n                                                    random_state=42)","500f4d70":"from sklearn.naive_bayes import MultinomialNB\nclassifier = MultinomialNB(alpha=0.1)\nclassifier.fit(X_train, y_train)","6c9cf3c2":"y_pred = classifier.predict(X_test)","273b0661":"from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score\nprint(\"Confusion matrix for predictions on human test DNA sequence\\n\")\nprint(pd.crosstab(pd.Series(y_test, name='Actual'), pd.Series(y_pred, name='Predicted')))\ndef get_metrics(y_test, y_predicted):\n    accuracy = accuracy_score(y_test, y_predicted)\n    precision = precision_score(y_test, y_predicted, average='weighted')\n    recall = recall_score(y_test, y_predicted, average='weighted')\n    f1 = f1_score(y_test, y_predicted, average='weighted')\n    return accuracy, precision, recall, f1\naccuracy, precision, recall, f1 = get_metrics(y_test, y_pred)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))\n","be85b9ef":"# Predicting the chimp, dog sequences\ny_pred_chimp = classifier.predict(X_chimp)","249755af":"# performance on chimpanzee genes\nprint(\"Confusion matrix for predictions on Chimpanzee test DNA sequence\\n\")\nprint(pd.crosstab(pd.Series(y_chim, name='Actual'), pd.Series(y_pred_chimp, name='Predicted')))\naccuracy, precision, recall, f1 = get_metrics(y_chim, y_pred_chimp)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","6db47f34":"y_pred_dog = classifier.predict(X_dog)","4fc5ad6c":"# performance on dog genes\nprint(\"Confusion matrix for predictions on Dog test DNA sequence\\n\")\nprint(pd.crosstab(pd.Series(y_dog, name='Actual'), pd.Series(y_pred_dog, name='Predicted')))\naccuracy, precision, recall, f1 = get_metrics(y_dog, y_pred_dog)\nprint(\"accuracy = %.3f \\nprecision = %.3f \\nrecall = %.3f \\nf1 = %.3f\" % (accuracy, precision, recall, f1))","2a9105e2":"The double-helix is the correct chemical representation of DNA. But DNA is special. It\u2019s a nucleotide made of four types of nitrogen bases: Adenine (A), Thymine (T), Guanine (G), and Cytosine. We always call them A, C, Gand T.\n\nThese four chemicals link together via hydrogen bonds in any possible order making a chain, and this gives one thread of the DNA double-helix. And the second thread of the double-helix balance the first. So if you have A on the first thread, you have to have T on the second. \n\nFurthermore, C and G always balance each other. So once you identify one thread of the helix, you can always spell the other.","b9db737f":"## Now that we can load and manipulate biological sequence data easily, how can we use it for machine learning or deep learning?\n\nNow since machine learning or deep learning models require input to be feature matrices or numerical values and currently we still have our data in character or string format. So the next step is to encode these characters into matrices.\n\n\nThere are 3 general approaches to encode sequence data:\n\n1. Ordinal encoding DNA Sequence\n\n2. One-hot encoding DNA Sequence\n\n3. DNA sequence as a \u201clanguage\u201d, known as k-mer counting\n\nSo let us implement each of them and see which gives us the perfect input features.","30fd9351":"The DNA sequence is changed to lowercase, divided into all possible k-mer words of length 6, and ready for the next step.","65a6b05c":"### Load human DNA data","85320082":"**** DNA Sequencing with Machine Learning","c1a39535":"## DNA sequence as a \u201clanguage\u201d, known as k-mer counting\n\nA hurdle that still remains is that none of these above methods results in vectors of uniform length, and that is a necessity for feeding data to a classification or regression algorithm. So with the above methods, you have to resort to things like truncating sequences or padding with \u201cn\u201d or \u201c0\u201d to get vectors of uniform length.\n\n\nDNA and protein sequences can be seen as the language of life. The language encodes instructions as well as functions for the molecules that are found in all life forms. The sequence language resemblance continues with the genome as the book, subsequences (genes and gene families) are sentences and chapters, k-mers and peptides are words, and nucleotide bases and amino acids are the alphabets. Since the relationship seems so likely, it stands to reason that the natural language processing(NLP) should also implement the natural language of DNA and protein sequences.\n\n\nThe method we use here is manageable and easy. We first take the long biological sequence and break it down into k-mer length overlapping \u201cwords\u201d. For example, if we use \u201cwords\u201d of length 6 (hexamers), \u201cATGCATGCA\u201d becomes: \u2018ATGCAT\u2019, \u2018TGCATG\u2019, \u2018GCATGC\u2019, \u2018CATGCA\u2019. Hence our example sequence is broken down into 4 hexamer words.\n\n\nIn genomics, we refer to these types of manipulations as \u201ck-mer counting\u201d, or counting the occurrences of each possible k-mer sequence and Python natural language processing tools make it super easy.","b9a64f17":"## One-hot encoding DNA Sequence\n\nAnother approach is to use one-hot encoding to represent the DNA sequence. This is widely used in deep learning methods and lends itself well to algorithms like convolutional neural networks. In this example, \u201cATGC\u201d would become [0,0,0,1], [0,0,1,0], [0,1,0,0], [1,0,0,0]. And these one-hot encoded vectors can either be concatenated or turned into 2-dimensional arrays.","e15f626e":"#Now let's make predictions on the human hold out test set and see how it performes on unseen data.","9c863e26":"Now we have all our data loaded, the next step is to convert a sequence of characters into k-mer words, default **size = 6 (hexamers)**. The function **Kmers_funct()** will collect all possible overlapping k-mers of a specified length from any sequence string.","37788650":"### Load Dog DNA data","d18a57a6":"It returns a list of k-mer \u201cwords.\u201d You can then join the \u201cwords\u201d into a \u201csentence\u201d, then apply your favorite natural language processing methods on the \u201csentences\u201d as you normally would.","8df95ec6":"So the target variable contains an array of class values.","1d6269d3":"## Ordinal encoding DNA sequence data\n\nIn this approach, we need to encode each nitrogen bases as an ordinal value. For example \u201cATGC\u201d becomes [0.25, 0.5, 0.75, 1.0]. Any other base such as \u201cN\u201d can be a 0.\n\n\nSo let us create functions such as for creating a NumPy array object from a sequence string, and a label encoder with the DNA sequence alphabet \u201ca\u201d, \u201cc\u201d, \u201cg\u201d and \u201ct\u201d, but also a character for anything else, \u201cn\u201d.","0698b941":"Creating the Bag of Words model using CountVectorizer(). This is equivalent to k-mer counting. The n-gram size of 4 was previously determined by testing.\n\nConvert our k-mer words into uniform length numerical vectors that represent counts for every k-mer in the vocabulary:","d655a0f2":"**Objective:** Build a classification model that is trained on the human DNA sequence and can predict a gene family based on the DNA sequence of the coding sequence. To test the model, we will use the DNA sequence of humans, dogs, and chimpanzees and compare the accuracies.\n\nGene families are groups of related genes that share a common ancestor. Members of gene families may be paralogs or orthologs. Gene paralogs are genes with similar sequences from within the same species while gene orthologs are genes with similar sequences in different species.\n\nThe dataset contains human DNA sequence, Dog DNA sequence, and Chimpanzee DNA sequence.","6bfd2b0d":"Let us now do predictions on Dog test DNA sequence.","21c8004c":"## DNA data handling using Biopython\n\nHere is a brief example of how to work with a DNA sequence in fasta format using Biopython. The sequence object will contain attributes such as id and sequence and the length of the sequence that you can work with directly.\n\n\nWe will use Bio.SeqIO from Biopython for parsing DNA sequence data(fasta). It provides a simple uniform interface to input and output assorted sequence file formats.","be3037b7":"![3eee0b_61e8ff912b9d4daf8381ccc8101ec088_mv2.webp](attachment:3eee0b_61e8ff912b9d4daf8381ccc8101ec088_mv2.webp)\n\n\nThe order, or sequence, of these bases, determines what biological instructions are contained in a strand of DNA. For example, the sequence ATCGTT might instruct for blue eyes, while ATCGCT might instruct for brown.\n\n","0db539d3":" Here comes machine learning\u2026\n\n\nNow that we have learned how to extract feature matrix from the DNA sequence, let us apply our newly acquired knowledge to a real-life machine learning use case.","01dc92a8":"The model seems to produce good results on human data. It also does on Chimpanzee which is because the Chimpanzee and humans share the same genetic hierarchy. The performance of the dog is not quite as good which is because the dog is more diverging from humans than the chimpanzee.","b5f93cb6":"### Load Chimpanzee DNA data","c10cfe1f":"You can tune both the word length and the amount of overlap. This allows you to determine how the DNA sequence information and vocabulary size will be important in your application. For example, if you use words of length 6, and there are 4 letters, you have a vocabulary of size 4096 possible words. You can then go on and create a bag-of-words model like you would in NLP.\n\n\nLet\u2019s make a couple more \u201csentences\u201d to make it more interesting.","9f323d32":"So, for humans we have **4380** genes converted into uniform length feature vectors of 4-gram k-mer (length 6) counts. For chimp and dog, we have the same number of features with **1682** and **820** genes respectively.\n\n\nSo now that we know how to transform our DNA sequences into uniform length numerical vectors in the form of k-mer counts and ngrams, we can now go ahead and build a classification model that can predict the DNA sequence function based only on the sequence itself.\n\n\nHere I will use the human data to train the model, holding out 20% of the human data to test the model. Then we can challenge the model\u2019s generalizability by trying to predict sequence function in other species (the chimpanzee and dog).\n\n\nNext, train\/test split human dataset and build simple multinomial naive Bayes classifier.\n\n\nYou might want to do some parameter tuning and build a model with different ngram sizes, here I\u2019ll go ahead with an ngram size of 4 and a model alpha of 0.1.","dc1e1ab4":"We will create a multinomial naive Bayes classifier. I previously did some parameter tuning and found the ngram size of 4 (reflected in the Countvectorizer() instance) and a model alpha of 0.1 did the best. Just to keep it simple I won't show that code here.","2d289163":"Here are the definitions for each of the 7 classes and how many there are in the human training data:\n![3eee0b_06abe8649116492ea56ad4a64017260c_mv2.webp](attachment:3eee0b_06abe8649116492ea56ad4a64017260c_mv2.webp)","7350016c":"## Introduction\n\nA genome is a complete collection of DNA in an organism. All living species possess a genome, but they differ considerably in size. The human genome, for instance, is arranged into 23 chromosomes, which is a little bit like an encyclopedia being organized into 23 volumes. And if you counted all the characters (individual DNA \u201cbase pairs\u201d), there would be more than 6 billion in each human genome. So it\u2019s a huge compilation.\n\n\nA human genome has about 6 billion characters or letters. If you think the genome(the complete DNA sequence) is like a book, it is a book about 6 billion letters of \u201cA\u201d, \u201cC\u201d, \u201cG\u201d and \u201cT\u201d. Now, everyone has a unique genome. Nevertheless, scientists find most parts of the human genomes are alike to each other.\n\n\nAs a data-driven science, genomics extensively utilizes machine learning to capture dependencies in data and infer new biological hypotheses. Nonetheless, the ability to extract new insights from the exponentially increasing volume of genomics data requires more powerful machine learning models. By efficiently leveraging large data sets, deep learning has reconstructed fields such as computer vision and natural language processing. It has become the method of preference for many genomics modeling tasks, including predicting the influence of genetic variation on gene regulatory mechanisms such as DNA receptiveness and splicing.\n\n\nSo in this article, we will understand how to interpret a DNA structure and how machine learning algorithms can be used to build a prediction model on DNA sequence data.\n\n\n## How is a DNA Sequence represented?\n\nThe diagram shows a tiny bit of a DNA double helix structure.\n![3eee0b_4f3f6d138e764ea8a9860381c4e52c01_mv2%20%281%29.gif](attachment:3eee0b_4f3f6d138e764ea8a9860381c4e52c01_mv2%20%281%29.gif)","c8a5ec35":"So it produces the sequence ID, sequence and length of the sequence.\n\n","cd91abde":"Now for the real test. Let's see how our model perfoms on the DNA sequences from other species. First we'll try the Chimpanzee, which we would expect to be very similar to human. Then we will try man's (and woman's) best friend, the Dog DNA sequences.","1214015e":"![title](data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMTERUTExMWFhUXFxoXGBcXFxgaHRobFxcXFxoaGBgZHiggGh0lHRUVITEhJSkrLi4uFx8zODMtNygtLisBCgoKDg0OGxAQGy8lICUtLS0tLS8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLf\/AABEIAOEA4QMBEQACEQEDEQH\/xAAbAAACAwEBAQAAAAAAAAAAAAACAwEEBQYAB\/\/EAEoQAAEDAgIHBQIKCAQFBQEAAAECAxEABBIhBSIxQVFhgQYTMnGRodEUI0JSU3KSscHhFTM0YoKTotIHVNPwJGNzg7JDlLPC8Rb\/xAAZAQADAQEBAAAAAAAAAAAAAAAAAQIDBAX\/xAA0EQACAgIBAgQFAwQCAgMBAAABAgADESESIjEEE0GhMlFhcZEUgbFCUtHwI+HB8TNikjT\/2gAMAwEAAhEDEQA\/APlzTLal\/Fqw80n8K9dK63f\/AIzj7TIkgbkOKdQvJeLgCPdSbzkfTZ+8AARCvbxYICm48jNO69xpkgqj0MF66ZUjMQfKPbSe6hk2PaADAwGWUFBIXB4TSSusplWx+8ZJz2g2bazJSuPOlVXZsq0CREpUsLygmayBtVsDcrUi4cXjlSc6VllgbqWIAS18OCShXdkFKgr0IP4VrZcAoysXHORNzSmhUOAuMBOsMcFSUgg5yCogDbMedaNWhTkB3maOexmExo3bJa\/ns\/31zIqDvNcyGtGa2a2v57P99StacsmGZ650ZmddqB\/z2vuxUWIhbvAGX3uz4StKA6JgkEESqAT8WMQK5jI5dKvykwCDgyef0jMC2ypBdaUUqI1nW0nLli99dKeJ4jZzIKBt4l6zUg+J1lP\/AH2vwVW36tCJHlkSx+jkOfKZWP8AqIPtmmWrsGxn9otrKt52YbOYUE\/VUlY6iZ9tYHw9b9hj9pYsImPpy07ghsoElIUFDeCSPXI1ha6qOIWarvcqsuud2QE5caaWWlNLHgZg2SXCThgUqvOY6wIEgTzbCseFS4oWpy2GaGYV0ygKzUT5mi2utW6j7wBMY88yAMIk8hVvZQqjiPaIBs7j2rteDJvqTFapfZw6U\/MkqM956zS4qZcw8gJ++ipbWzlsfYQbA9IDTDeKXFT9Y\/hUrXUDmw5+5jJONRpvEBQDacX1Rl61fnoGxWM\/aLicbln4S59Cr7Sa086z+w\/kSOI+cx2Wm1rIkAZ57K4lSix8Z\/8AE2JIE8plSXISozOROdBqdXwjfmLOtxmknHcgvCqN4qr3uXTYP2goHpBuLsFsAtkcDU2Xg1gMsAu4tktFJnJVZoaCu+8rcixZCiYXh60UVqzHDYgTACVBeSt+2oAYWYDQkPrWVZkE8aLXs57MANQ7lxcCQNlXa9gAyIDE3ez2kyUdysRHgVuz+SfXL04V0eFuJ0w1MbF9RIvtHCStKATvT+I510PQoyyjMSP6Gc+lYC80b9kV5YdQ+1m\/pCu3EE5Jine6E6WAi3nEwNWKTupAwsc09H6MW4lAS2DjWUDPZGGSoCSlIxpzI+UK1Qpw+GSTHWeiVBa0LLKClRSQtwTKTBhCQVkcDhzp0YH9MCZraI7LYlg98rM7ENKE9XCk\/wBNaBShL9v9+kxa5e3edlo3QQSV4iSpIBGOOfDLdzos8UcDHrJALZ9MTkP8TCfhKQiCkNpz5kq\/L1rANZ5fabqB6TmWEOlswRFa1i5q9YjOMxVqkyZWR5VnUrHOWxGYDaUYtZRjzqVWvl1NDcdeFoEYc+Na2nw6np3EOXrG3F0CkYUEdIFaPflRxUxATzZdLZgAD20Kb2TQAENZjbGzK5KnFcIGVXTQzAlmP7aidsekhtplCziIMcTNJU8PW\/Vj+YHkRqMN2Cr4tCldIHtqzeCf+NSfaGNblrvnvok\/b\/Ktud39g\/P\/AFMsL85moLKlnFlwxZVyA0O+G99TY5xFLtk49VUCdxmKg0Jy6Tj7GPOoWkm1hQBXiy3iKfiK7QccsxKRiTcuOYAFIEbiKLXt8vDLAAZiG3kYCFIM8YrJbE4EMsreYFsGzOLpWdQqOeUDmLCEk7YqAqF8Z1HJfaAOSpp21hTowEl1BEa007FIA3mAjELWERIjhVq1gr0dRazNbRWlVHUczO5f93v9eNdXhPEMRxb8zJ6\/UTSRbtKVicCifklBAnzJBy6V2vWGwwxn5zJXK6lHSrgQqU2iFfvLW4v1SkoHsNcHiUtB5Yz9R\/ibIwOsyLbSV4oBLKQifo20I\/qAn21B81x8MGdE2xmpY6DcVk+4SSc8yTKoBlRzzAHpXSiFU6t\/aclnix3QTpGNDN2xTgAg7eOXM1COGUgDEx5ux2YOme1FshaC2ZWNoSAeh3cayrQgFHOczp4FiGQYnMaf7aXS1nuwGZESM1R5nIVlYpr6AJ0BMnkZzdz3hTKlzPEyetOxbQm2mgxBbb1CcfSaaVnhnlDMXbIROsayqWonqMDmSktheyRTBpV9bENwrl4YtVJ9IrSy0culYsR908spGpA4k1rZZawGFxAYjG0ud3PeADZAFUFuKZ5Y+wi1ntDsbFBkuLMfWinV4dcEu3viJmPpIt1soVlBjZAmaK2orbXtuByRHG6UVajav4tWtPOZm6EP76ixgbMtYnvmt\/aV7q2zf8h+T\/iZ4WUhdtlRxpI+sKwF9ZbrGPuJrxONRK2mVKyI\/hMVkyeHZtY\/YxjOJN9ZQrVWo5b86dtBB6WP8wVsjc9dtOhAkpP30WJcF2QYAgwGXFhsju5HGpR7AhBSGBnvEWrsEyicuFY1PgnKyiJXSUYs8hWClC3V2jhPpROqcqdgr5dJ1F95L7SQBBqrK0AyphJRbgpJxdKa0gpnlDMi2bM5KilSjE6OIzNDQjVwpcN5ic58Pru6VtQbg2jr1+UytKAdU7S00WCoBas\/Z0416LWkLkCeXdcw7Sys9yuZBCegqR\/yLMuLWLE6T0wnVMFcxIRGqOJJiT+6PUVC1ugPETop8NjTGc1pS3ulJLhfC2ScIKZTuBgpOYOezOIrmxaxwWx9J3olafCJziWzi8VcoQ88cptmTcIz8U86dy4O2zASXmkhI15PCnZWgXPLMJ5BbwHjSXyghz3huetVtg6wnlRS1SnqGYHM825rylJ25CmrjnlFhGXTiyvNMHnWlj2ltrFgSxdl3CASmDuFb2eeQASIhiGzYEokuHjA2U18MWTqcxFsHGIVixbiS4RykzSrroXbEfuYMW9JNtdNpVCElX1U1dd1athBn7CDKSI0vuFWq3h5rP4Cr8y1m6Vx94sDEtQ\/xa9Fe+tf+f6e8jpma3pAhWshQ8s65V8SQ3Up\/maldRReaWvWAAJ4RWZsod+qPBA1J0gw0CMB9FTTuqqHwnH7xKT6z1ykhCYcJncRRYrBBh4Dv2k263QjLCRzp1m8J6GBAzE2bzgJITPGs6rLQTgRkCJS7rayZz2ViLMP1LHIuXUlUhMcqVzozZxiAh3CmsIwgg76dppKjiNwGYoFOGM5qAa+GPWPc6fs72RLkLdkDaEbCfrcPKtq6Ao5P+Jy3eIC6WdMzctW23ClIyG704122Ace+JwFGtMyNK6TCz\/w79uJ3rXhI5AKAHtrNr8DipE608KBt5jLsrycSSXfqqS4PRJPsrMtam1bM6cJ2xHtuLDZW42pASsNqJEQoiQCDmMvvFddfiwR16mbV7wDNO1XgWpCoO5aFQoEEbFDyPnWrhLV+cgZG5naS0Bbk42VKRO1tUqwnkrenzzFcX6EE7\/9\/wCP4motmJpDRqmzJSSn5wzHXh1rm8RR5ZzjU0VgYhxTeEQM6lmp46G5W55t4YCMPWKaWDyyAsMQrN4gyETTosKnS5gRIQpZXkkAzQGsZ9CGsQrpK8WZEmqsW3lsiLUsXFksJBK5itn8O\/HLPEGGZ5q0bwSpef1vwoWirh1N7wLHMZYPMJB2T5TVUvQnbv8AmJgxh295rHA2pXQCrrv6ulSfaDLrZhrU6VZJSnzM\/dVE3M2gB7xDAEs90\/8ASI+x+dacbv7h+P8AuR0\/KZVtcKQvNBO7IzXHXa6NtfxNSMiC\/coLgKkkDeCKh762frU\/uIAHGoWke4MFuOcSKPEfpyBwxBeXrFvWqMGJKs\/Ok9Ffl8lPvHk5gN4ggkLI5VCchWSGjnrTHnBEb5oo83fEwOIlK1YqzDOH+sc864ZzFKx25ZIhDuXDAlMZVd1hIGRiITs+x2hEhtL7qczmgcB87zO6t6R0dtznuf0EZp3tI20pSGxiX7E+Z48qt71TR2ZlXQX2e04m4vVOOY3JUef3Abq4jbyfk252KoUYES8oFWyBUuyls4lTyyiBApuUwOIhuWGtJOJbKErWEnakKMGYnfyFMXYTERUE5lyz7QupUo6qsRKjibbVmYEyUyNg2VdV2Dv2i4jGJbtu1ZCvjLZpY\/dCmz\/SY9lWvi7M4yf9+8k1rOh0fpi1dIhtaFfNx59AoZ9DXWlpcY5fsRj\/AMzJlx6TB7ZWyWnQlDeHEgLgCIJKhsGzYMq5bnAHECaoSRuZDTi+7Iw5cadb2eXpZWNxdqVyYiop83eIzieZQsrEGDNCraX0dw1iNv2FhWsqfKtL6nDdTRBgRqeumkgJ1iZ4miyusAZb3gCYbSWAjMjF1NUo8ME3jMR5ZlnRt2gAgIUTxSmtaL0A6Qf2El1JkM3DhVqtn+IxTS2wt0p+TiMgY3GBLxVtQn+qq43lu4HvFlcSx8Hd+m\/oFa+Vd\/f7CRyX5TOZDqVnVBO+DHpXKnnq\/YGanBERcvnHJQQRu21lZa3PJUiMDUjSNwFKnCRkNqYqPEWqzZxj9oKMCeeDODVOt1oceHKZXvAZzFt26SgnFB3CahKkZCeW48yLRGZ14ypULknqxAxKQcW2s1zz0Y550GYmaLA3LBhNHR9gpx5lC\/CpaQfInP2TWzV2aLdpJOp2favtAWfim0BUCFTICQdgGEgz1yrZiUHIDMwROWzOMa0inP8A4Vr7Tv8AfWSWnfFZvj6zzOkUYv2Vo9Xf76lberS7\/wB+kMH5yLvSCST\/AMM0k7s3D7CuKHt6truGPrLNxp6XQ4WdyhmskpxYvAYhMYssjECqbxB0SszFOFxn\/frFv6XSpSlfBmziM6ynCdgG0KE7OFPzyRnj\/v4lKnEAZk2OlEg5WjJ6u\/30VWknoX+P8SiPrNHRlo7cODBZspBMSougdNeTVgt8ZXH1P\/qZs6jWdzutG9mWkqKltpS6hMgiYnPMBSjH50rLc4I3I2cg6nE\/4kXIcuwW\/CltKT9YFRI6SKxdLFUZ7TdcGc+1j7s6wjhWieZ5ROdRnGYu2QZ8UVFKsT8WIGeYalQlUc6ETk+2hDu2UhUYiR5zWltdYbZ94gTGvpYCciJ6mrceGC6iHLMNq5bCICTO+E\/jVpdUEwo9oYOY7R90uFBDajI8qqm5jnih\/iJgPUz1st6ckJHHEfdVVtfnSgfcwbjjcaWXirNYT9Ue+rNdxbbAfYScriP+CL+mX6J91a+U\/wDefaTyHylIJex5FKj5RXMBeH0QZprEUFOJckoBM7Aajlar7XP7x6IjdMXZMAtKSeceyn4i44AKGSi49ZTuLhJQkYYI2mKwtuRkAx7SwNxQU3gOWturMNTw2Nx7nrVLZJxHdxpVConqgc+kWhtJO2KhVUtjOoQn2QDkqadtYQ6MYmroM4bm3151xl61uQQVHLMh\/hMbpTRV0XXSEOrClkyltagQcxBA4QOlFiuM9X7QTGBKjXZ+63tKR\/1IR\/8AIRWKVv6HErIgp0I4Dm6wDOzv2lHMxsQo8aFqblgHcOUs6T0Uyy44kvh3VBbUgga0pBChhM7VGAZ1OYqmqxtzuTyJ7RS7FjL49xfJDG37Sx91WaSQMnMeZr6M7OtrAB74TkAotp9QJ++uhPD8V3mclvi1Xtublt2catVpVhxSdpMnLb5U6Ur4nh3nK\/ibG7zQ012gtWVoUhQChtSBnyyrNQQCtp7zdU5ENWMTju0vbJ59RCCG0kRKfER57ulc9jcOhJ2LXk8m7zm3Jga01NmeIy2ZoIaG04CSrPhTVF8sktF6yLZpBOsqOtFKVt8RgSZIS2F7ZE0calf5iG5NypvFqjKqsanloagMyxcPtFICUmRvit3tp4jivtJAOdxzV0e7gNq891aLceGkMMb7yxo5x0hUNgjbmqKul7SNL+TJcD1MBhLxVtQnpNCC8t3A94NxxuNVauKObp\/hSBWhptJ2\/wCBiLkAO0s\/AD9K59oVXkn+5vz\/ANSeX0maw27iOFwH6wrnRLuWm\/ImhxjcU+p3HtSTyyrNzfy9DKGMQL95xSpUkbIyNTbZbnJWIKAIy5uiWwC0RwNVbc3l4KQC7zmJZuUBBBQZ4xWaXJwwVjIMC0dbE4h5ZVFVlIzyEZB9IkFGLlWWay++0c9cBE6uyizy89MPvLCHENqbcQqVJUFR5GYrRxUoDIdydnIM7DTKPhDIKHFQRKNYxB3ET05EV2mpbkyujMFYqcGcOu2wKKV5Ef7kca8\/yyjEOcGdAOdiFZWqnF4UAq8vXP0NTUhd8CJmCjJnR6P7IqcXDi43wPfXY3hQOpySJw3ePCDpE6C3s27dUBIhO3n5k12Kqmvp1OGyx7h3lPTHaNgGUZkbk8eZ2VkLkrUgnM1o8FYR1anM3\/aN97IrKE8Ac\/WuFvEs2h0iejX4WtPTMyEiVZnrXOoBbZnRDuG0g5Kkcau1EU9JzEPrCWhGGQc6tkqC5B3CMbDeAz4qpBTw33huDaludYVNJqB6oHPpDbcbDkhMjhFWr1CzIGoYOI6+fQSMKCOOUVtdahIwp\/ElQfUx1zcEpA7ojga0suYqMIYAb7wmi6UQECOZpqbymAvvEeOZY0ey+rFGBI2ZyaqsX\/Qe8TlfWeZtncUFwDyT76tKrc7f2iLLjtC+BEnN1Z8iB91V+nJOS5\/iLl9JY\/RSPnr+2r30\/wBOvzP5MXMzKt7VWLVcUPPOuWul+XS5mrEY3FPpcC\/HJ8oqHW0N8XtGMYi7tLgOtFRaLgd4gMRt2t3AMSU+v4VdrXcOoCAx6RbNwoNkYJG81FdrisjjkQI3KqXDwrnRyPSOQHM9lQrYbOI5Di5Mx0odstnEIb60kCBFXaykDAxCaGh9Md0nAoEoJ3bQTvT7q18P4kV6xM3TludZbaGS+PjEyCJSM0nrIkeVehcUdRkTia7y+0t6PZaYkBACR\/uSTtp+WAuE1OO0vae+5g6R7TISSGwVHjsA\/E1jb4xF6Rszqr8ET8c53SWlHHvEoxwGQ9N9cN3iDZO+upa\/hEqDDHOsenH1mkhEb6S49YTySJ5U1K532hDeKZyFVYVJ6RCG4tGEQkzxq3asrgDcUELy8NSrjjjEcbavEHJM9K0psKnS5iInmXVBQISZnZTSxw+lgQI66ccxyUQcoE1tZZdy2skAYlq6cdwiUpHWtrGvIGQPzBQIbXfYNqBwyNWv6jh3Ek8cyxotD2sQ8EwJyTNFaWnu3tE+PlFs2ylKlTq+kCmlTk5LmMkAdoXwFM5qWfNZ\/Cr\/AE652T+ZPI4j\/wBHM8\/tq99H6av\/AEn\/ADDm0ymbQFZCVqTE7FVyp4cF8BiP3mhOom4YUFxjUTuM1m9LB8BjGDBu2lgiVzU3JYvdsxjEbdMu92lSiCDs41Vq3CsFjqSCM4EU2twIMEYTUI1wr1jEeBmV0FVYVl89MoyELOLZnSVm55A3CS+4SqSBPKna7FskbhDuSqBKYEVdxcgZGIhO67K9ng22l55MrOaQR4Ru\/i+6uikYXHrOa5z2EjTXaNtlRSgFa\/mjYPrK\/CtHvCa7mY1+HL7PaU7ftPbO6rra2iRtCsaQYMEZAjOJmazq8Yc7OJ0eQF+GRc6Ht3c0vIJO9SVNn7QBT6muuytbRlk\/cEH\/AAfaIMV9Zz99olY8MKA9fca5b\/BP3TY95otoPeZ6pAgpjzFcJyBgiawGzymkpx6QkoVrbOlNDhsgQhvqM5pjlVWkltjEBGvPEpAwgRvrWyxioBXEQgIWqNlSjuF0IGNs3FgkpA61dD2jaiBAksLcLgIAmqRrTZrGYjjEZfuOlQxFMjhV3G7lsiIBQNRl53mFMrBngK0tF2Blh+IDENtC+7nvTGyIpqlnl\/H7Q1ntJtbVRB+NX0NOuliD1mIkfKMtrFJVmtf2op1+HXO2P5gzECGbFoKg+1RP41Z8PSG3\/Mnk2I\/4GxwT6\/nV+RR8hJ5NMhm1bLhBIwic8VcK0Ul8Z95qScRdwwkLICstxms7KlD4B95QJxBuWIPiJ61NtXHs0AY+5tFBpKu8mfkzsrW2l1qB5Z+kQO8SuhtWCcWXCslRvLzy1HEtg7jWKcvQxyETO3OhORbXeE87M5mh8ht94TT0HLlzbtrzSXE5cgZj2Vp5rthSYiMAzsu1elJSppq4ZbMwvEVhQ5JwoI6zW7lgupgiZ2ZxrWiTuubbq7H\/AJJFc6BgcqZvmAvRC9vfW58n2\/uJzqOJJ7iGZfXoZ1pxQDohKCvKCVQvB+rBKsJ24o2Z1shsQ9Lf79pBII2Jetra4IGNpOe9LrRHpjmvQr8Ye1gmZrHpLLmhnFiC1iHKD9xrZrKbBgkSByXtMa+7NuI1khSRwWD7FVxN4ME5qb9pqLfnMZTK0rAIIVun8Dsrj8uxHAIwZqCCNSbzHi19tO\/zOXX3gPpPO4oEmi3ngcjAQU4o21Kl+OjqOMtkqMwqKulXOeJxEZNu2orEKg8aaK5sxy3A9od42rFBWTzrS5G5YLQHaMu7XCBrk1dtBAHUYgYSLQd3ONXlOymtC8M8j+YZ3PWlsgziUR\/FFOuis9294iT6RlpaMlWscht1qaUU53\/MGJxqMcYYSv5BHMzVFPDq3pFliJYw23Br+mtseF\/+vtI65ktlrvM8OGT5VxKaOe8Ymu4pYRiMQBPsrFhUW+kc882gbDStWofCYbkvobwJwkzvzp2LUEBXvAZ9YCUpwEyZ4VICcCc7jikAcYrMAHvCeQnOJjnQoy2MwhXCIMAzzp2KFbAOYpd7PqCbpgz\/AOon25fjTrxzET\/CZp9qNDFKlPJkpUZUPmk7T5GurxHh8ZcSK3zqc80J3xXIi5+k1gCpxCeIFGIS85op3E2jDiW4JQkFKpBkzkTGw7a1dGGBnMnkMZlRslOYJB5VKllGVJEojM07HS6tixI4jI+413UeOfs+\/rMWqB7TZtXW3chChvBH3g16Aeu1dbmJVkMo6V0Ac1MyrfgOZ\/hO\/wAtvnsrzPE+EI6l3NktzozCc2DOa5HxgYOZtISMttSAMd4Rlq2Cc1Ya0pRWOziIzzTaccFWXGhEXzME6+cfpHXzCEkQqes1p4itFIwcyVJMi4S3CcJ3Z50WrVgYPvGMxzLLODNQnzrVK\/DlNnf3iJOYFqlrPFHWprWj1gcxtp3GM4sMbp2VrV+n5bxE3LGowuMBfyI5DKq5eHD+kW8S18It+Lfp+Vb+Z4b6fiRh5mWzzeKVAR5VxpbRy6v4mpBg3K2yrKI8qzsektrt9oDMC4U3Or91RaaT8MYzHvqY7vV8Xka1c+HNfT3iHLO4lnusJnxVmnk8OrvGcyujDOdYrwz1RzyIxZ7KS8eW+0JL+GdWYqrOHLo7QgkgZiQeNQcekJ3GhtPB1EFZS9EKgxi5iPaPwr1PD3q4Ct3nO6cdiVb3viSpFw8Dw71cdM8q2s8KGOVOP4iWzGiJgvaRukGFPPj\/ALi\/YZzrybBZWcNkTccT2il6XuDI796DuLi\/fUc2+ceBPJ0m6mMDq0wkJyJEAAgRG+CRO3M1TPrCxcR6wkaWdEw+6kklRCVqSJUZJhJjM0w+tk5j4iQnTFx\/mHv5q\/fUBz6mGBCRpm4n9oe\/mL99NXOdmGBOhse0XeKShxaiZyJJgnnwNenV4mrPETB6yNiZ3bO2bQ\/KRBWgLIHEkgnrhnqa4\/EKik\/OaVnImCmIz21zjjjfeaQ7bBOvMcqury89cR+kE4Z5VB48tdo5JKaGK51COfcbIThEZZ5VtY9RA4iIZjEuNYN2LmK0V6OH1+0NyLd1sTMTukTSrekDf8Q3DsrhtK5UBH1ZrSq6kNv+JLAkQ03LZXJgCfm7qoX0lt\/xHg4l\/wDSLHD+k+6uj9V4f\/RM+LygxdALnCrnlWCeIUNnB\/E0I1EOPArJKTt2RWTWqW2p\/EMSbp5JIhBHSputVuyn8RgSbi6CkJTh2bTAzotuDIBxiAwZLDyQggoPnFVXYgTawwZUSrlXKrAHtKkIOezpSU4bOITzqpMxHKnYctnGITylCNlIkY7QhpWcOQ61YY8MY\/eE0bHTShksFY4\/K68a6qPGsum2PeZNUD2mxZ3rawdVDg3pWCY6SK9APX4hcA\/7+8x4skG4aR8i3tweBSuPYvKsbPBDHR3+stbD6zNu70o8VlbAcQlyPUOV59yOnxLNVIPYyUdoiEISGG4QvGIxwIKjqpnI63iz8KeFZ+brGI+MrnTAJJNuyskzic7xaj5qxifSp5b7R4nhphM\/slt9l3\/UpBt9oYmnoUG6cAFnbBAIxqwuQBy+MzPKtkBsOcakOwUd5Z\/xLbCLlKIzDKc\/NS6VlgZe37xouBORBy2VjnUuHbrg7JrSpuJ7ZhBBz2VAOD2hCK89lMsOWcQlq7fBAhBHQV1XWqyjpP4kgSEv\/FxhO3bFIW\/8eOJ\/EeNz1u+BOqTI4UV3AA9J\/EWIzR92ErBIJ8hNa1XqG7H8RMuRGJvE45KVbfm1Y8QvPJB\/EMHGJf8A0ij977CvdXV+pr+v4Mz4GVG7whZPdrznzrnW8h88DLK6iLm5JXOAiNxrOy5i2QhjA1Au3lGJQRUW2Of6YwItx1WEanWoaxyvwxwm1ud2oBOrvNCtb5ZAXUWsxLalcKzrZx2Ec82pWIQM6Ss\/PIG4ekm7WoqzABovZi3UICKcxRmKhg2NiOPQ4sNnIRWyvYK+2osbi7ZahJSBWdJcZKiBiwo4pG2s8tyyO8cvsaWcSYUAoe31rsr8dYpw25m1QM2Gr1CwBME7j\/uDXppcjjHbPoZjwIlg6OtFJEpeQqMygtkT9Upy9a57PCFshcAShZjvKb2iLcAhKngcoUG8ajmqZSFhPDpEZzXG\/hHT0\/cTQWAy5ozsUFuIBdJSrdgwHyOZjpSHhuA5P2EybxAzxTvOyeuGNHNrDgEYdQJAkkzkAd548qHbmgYaAiQHkQ2zPlmm7159wvO7VbOAAEADyFY2K\/EEjAnSNalNBMbKlSwXQ1HG2SlA6oBrXw7OCeIzEfrBUtRVMVJdi+cbhPKKp8NNi\/LJEJfvbheABTcTsM113W2cACkkAZ7xSFud1GAxMzNQr2+XjjqGBmetHVCYQoyKddj76TGQJY0ddFKv1azlGW2tKriD8BkuMjvGLvdeS251AmqPiMPkqfxDjrEs\/Dx8xz7Fb\/qR\/a34mfCUkPud4YazzyKtnWuZbbeek95oQMd5XuHnMclIB4TWdj3F\/hEoAYg3bjhyUEiota3sQIDEB1bmEAxFS5u44OI9R7KnQ2YKQmtK\/PFeiMSTjMptoUdhrnRLCdGVPNtKKgJzpLW\/PAO48wrphSVZmTTuqdTsxA5i3EKjM1NiuAMmMSMJjblU4bj31CeYG3OKdYJzvEIsbdvWs\/WE8du2j1hLJtVKjDKidwzroalyBg5iLAd50eg9DvynGuAcsBzPruru8Ot1Yy7a+XecN3iawOnc6pWj+4KSQCDmY3xtBmtVtFoOJxF2bvGac0y2QkswFid2w7iY3dayposAYNOrAYggYE+badduFu4rhRUo7Fbo\/d\/3Nedcjq2G\/wCp3pxxqV3wrCJVI4Vdq2BRlsyhFpbMbaha2K5BjzHWbCyThMVdFdjE8TiIn5wC0sKic6QrsV8A7hJcCyYkTVOLScGGpbvLd7CCrCQK6La7+IJxIBU9obanu78KSBv31Sm\/y+wh05kWi3QCAgEecUVtdscQf3jOJY0dcOheTOKcoBE1VdloPwe8TgY7w1vrx5sr8pBNaeY\/LaH2k4GO8t\/D3PoF\/wBPvq\/Nb+w+0niPnMpLzqnVEJQDnI3CuYNeXOAJpgYlS4xlWeGeWysH80t6ftK1PXTTgOsRsqbUtB6jGMQXEKgSqh0sC7aEc0wruicZjhWiVP5eeUWdyuyzJ8UVhXXyPxYjzIbaBUAVRzqVQF8Fv3hmFeNAKjHi51V6BWwGzAbinECPFNQ6qBo5jgwI21GFxCeaw76acP6oRtlZLdVCEk89w8zVV1NYekSHdUGWM6TRXZDGoBxXOBs6nb6V2DwaoOTnM4LvHhfhE6VNq1bkDCkJTtj3nbXUgHA8dTksZrRo7MyNM9qWAfihiPLIT51j+pWtdnJm1HgrCOvU5jSemXnjDq1AD5OYA85zrhe5mODofIT0aqK6\/hEXY6ULZgnEjgdo8jWlHi2r0diW1YadNbhq4Rh8STw2pPEcCK9FhX4ivX\/qYbQzm9K2HcrLalSU+hnMEeYIrzLa1Ud50KcyohsR4qhEUrnlKj7FgKPjw9a08PVyPxYiY4gKaOKMW\/bNI1nnjlCE8yQfFPOrepgfiizL18lwJSO9JBGyK6bUtCgc5K4z2httvBvxiI2RVKl4T4h+IZXPaDapeAMFEc5pVjxA7EQbj6yzo5VwF6qEK2yJIypobs9h+Ym44h3Vw8XJLKRySqr53A\/D7xALjvLHwt76BX2k++r81\/7PcSeI+cxW2ne9IBSFZzAyrkVb\/M7gTUkYzEXLaws4lZ8QKzsrtD9TRgiRdNGYKyai2s522YxIdtwEg455TSekBcloZjra1bLaiXIVuE1ddNZrJLe8RJz2lVlCJ1jWNa1E9RjnmgjFnsoUVc99obnrjBiy2UW+Xy6YCApSYyFSxrxoRyxo\/R63zhbQSd53DzO6hELjAH7yWcLszsNB9kG0\/rSFq2x8kfia7FoWsZOzOKzxJ\/p1NI3bVvJXhCRkBkPQV1PgJ3xOJq3tPTOcu+1iUrlpBOe0kpHSM657PGqBhRmdaeB11mV9Jdp0OgYrVsn95bpHpiArmfxAYY7\/AInYlIT4YhrtFhawBhsQoKHiwgg4skk7Z3k0heOOMRmsE5zKytNKKioIbEmc0JcIyjxOhSuk1Iu3kiUF1iEjtHcDwrCR+620n7kVmXyY8CWLftZcoWFF5wpHiTIEjfkIzqxYoYHGvlEVyJa7braU42oTKmkqniCVRW3iCmN9\/wDxIq7TnkYIMzNYr5XHfeaxtolszi6VdIpPxxHPpF4EYtuVLjUW76huG80gHVVI86pqqs6aGTHuWqYkLPrWxoXGmP5izLLTB7qQ6ryyrZamFenMnPV2k2zDkGHfVM0667d4f2gxHylnRjdxj1FIORnEMo3zQouHqPxE3HG4bhfS54W9u4kDplWub89h+TJ6cS3if+gT\/M\/Knzt\/tH5\/6iwvzmM224pwlThCjMkAVzpXYX2+PtNDgDtKz1vK4K1HOJJrJ6MttjKB1Bu7VCY1p61NtFa+vvAExSw3AjbvrJhSBrvHuWbc2\/dqxePdlsrRD4cJ1d5J5Z1KjS0icp6Vkj1juJU805CgQmelJHAfIEIVyslU4I5U7mJbJXEBH2DHfOtNRhxqCZ8zmfOKGblgccQ7T6W6lm0aAEIQnjvP3qJrqXAH0nEwZzMG57TNrB7txSCdpLJVHlrU1tDDplr4fHecu8lpaypV0tSuJZUf\/tXI2GbJb2nSNDAETcsMwSHyVAZDuSJPCcWVJ1X57+0YJ+Ut3LNqFNQ6VJ1Q4MKhnIxKSYyTBkbfDVME1uZA2YOpXQw0oE94WxJhPdqXA3a0j7qYQFTg4H2mgyO881bMbrg\/yVf3VKBAdN7Q38pHwZif2g\/yVf3UuKZ+L2jyflNXQ3Z5FwqQ6VISRi+KUmeQJO2tRSCck+0zeziJd\/xKcSm5DSUg4G0CRumTHoR61m1uUwRKVcTk0uZeGhX6ccZWI2zeAJlE5cKqiwKT0wIikrTOsPZUhq+XUIbjHy1OqIHlVsaCdQ3GOpagQR6mqK+HI1Dcei3aLc4jM\/O\/CthTSa8g+8nJzDtrOQYcWPI1dfh++GMGb6R9mh1CpQ6QeYBqkqszpvyJLFcbEe85crXJKFE8iPuqwt66GPeLoxLnfXXzWvtn3U82\/Ifk\/wCJPTMZqyles4r7qxXw5Zupj\/E0LYGom7s20rjF6qrO2ipWwT7xqSRE3iWRGAg8d9Z2jw6\/DGOU8463hyGflSaynjoe0MGKS7qkBJ9KgWdOAseIVu8QckTRVYwOlzAieYcVjEJEzspo9nmaED2h37qyrMAEU\/EvYWwREoAEuaAWoXVuVRAcT7TA9tI+Zrl2g2MTp+0mikXCsZuFoUBGEt4kj6sKy9K3s8PY2l7TFHCzmk6ICVEC6aTycS63PUoI9tYLXYmR2m3IGVndDrBlLrDhPzHkEmcskmCegrFULHRGYyYzSHZ91tbiVKQcCcQIJIWJSNSAc5WkZxVGpjuSLBKdxo19PiacHmhY+8VBrf5Ssj5xMkJ2xyNUOap3jgNAnYazQEnUJ0nZ3sm484nvNRJOz5R9w9tdCUFRzfsJg94zxXZnd3t+1o1paSASUw2kZSc8vLPM1VjCxQ\/bElFYMQdz5RdvuOLU4sypRkn\/AH6Vi4sIyZ0DA0JDal4TAy31aNYE0NQ1LGjXVgmETWvhXsBOFzEwBEUu4JXODpUm4l88Y8anrh8E+AjpTe4Z2sWJLr6CBqx0oa2ogZHtHiW0fBy38md8kgzW4\/SlPTMjqzItbVpQOtnyVFFVNLDR942JEaxZmdVxQ9DWldBz0uREzfSOS08FDC6Cd2JI\/Cr4XA6fP3EnK47TZ+B3vzWvQ++lzf5j3k9P1nNt2yAvXUT5qisVprDdZP7maknGpWd7rGdkT51i3kBoxnEm7ebMYB7KdltP9A9oAH1gOvEpGqct9S1rFdLDElt1eEwkRQtlnHSx4EG2Lk6sTU1G3J44gcSGm1lcTBqVSxn77hPXTKgogqk0XVsrbMAYC0EAHFSdCFyWgJuWnaElIDxxfvjb\/EN\/n\/8AtdVHigq4czJqs9praO+DvSFqlMboMHiUnP7jXWzravRg\/T\/e0zwVO5RvuyBhS2lAoGeJJBGwnYdZJgbDXI3hamOASp+RliwjvOeurJbfGNkjZEzu3TXNd4eyvZzj5zVWDTyL91I1H3ByC1D7jWRYjs0eBOi0QxeOgS6oA\/PCVT5BQJrtrrcrljic9l1aTpGtEhooLqEqM+MIQCePhArdOJHT3nE97P8AQSO03ae2aUkMQXANgyAO7Ea5lcoCtpz9J0CkOQVGBPn2lr5x9wuOuFSjx3DgBuFc1uM6M7VXErKH71SwwO8cY22rCYVlWqJYUyDFGWTThJKSBlVUJYclTAkRScQVuJmoHmK\/zhDuHFk6yc60sssztYYEl55RAlJEU2ubA5LDEtou2u6gpg79WZ61uL6fL2PaRxPLMCzDBnFE88qmoeGbviNuXpGW9ogqOFZH1VVddFZbpJH2MCTiWG7dwLGB1UzliANaeXYG05\/eTkY2Ju\/ozSH049PzqOr+4f8A5kZX5TmWmGUr1yOpqVroV+rH7maEtjUXcvNBYwAEchUWWUh+kZ+wjUHG4F49MQhQ8xFK20n4VMeJ511wozQAONDPcV+GGotDLhTtEVmK7SvePUi3aUT4oorrf+7EMwC3reLrWfl4fBaEF5InxTU2qoPfMIK8NS4T+mOe1Yo6OP1hPNLAMiQeIpIwXcJt6D0vchR7tKljLEAJG+MXyTsO2uuvxLueLDl\/P5mTogGe06tu0Q8AotFtw+JCSMJHHPwHlmPKu8OyDZ19e\/8A3OG3xCJ2g2+jGUODE2AZzMZ0cFI5IBmc1niLHXRlnSd8y0MSJJGcJzM8qgeZxJcR01Fxg+84\/Svax18wSUp2QNvUiuEeJUEgDA956VfhVTZ2ZgkpmubKcvpOmeXhnKm\/DPTCSQmKZFeNHcUNttMeKqREK\/FCTbpM5LinSpzpsQMhKFTkrOgK\/PR3CMuAsHMg1dgtB2YDEl5S4Epqna0DYi1LqLs9zBbVGyREda6Be3lbQyePVnMr2jzWeMeorKu2j+se0ZB9IVuy0pW0DnMU666Gbv7xkkCWmbJXeAIcUDORma28ghulj\/MkkY2JpfBn\/wDNq+xV+Tb\/AH+wmeV+UzGDboXnhIG4CZrIfp0b0\/maHkRAfuUlcttkidkRSa4cuhSf2xGAcbi7xTh+Rh8zSta0n4cfvBcTz6HigSQE8AKGW8oMkAQ6cxbVqooJxxyqFofjkvHmKtmEknEuOtZpTXnqaPJiiEBXHOs8VBvnHuQspnIVLGvOhDcN5SYEJq7GTGlilzRujXXhDbRInxnJI6+6qrHJcBf3ks4XuZ0ui+x6QfjFBR2wMh67T7K3Slaxk7nJb4o+k2bNtlmZSlKRwy9eNdLKePRqcVhdz9ZnXmmC24UtNuKWBigJIhO4kkbKiy1QOJGTNl8IXHVoTBc0lfPqxIaWQfmoUQf4orlPibhjiMD5TrTwtSDE0bZt3D8ahLXNxxtP\/kqfZXdV4nkMsMe8bV47Rd5oxBE4m1KPzCSfMmIPrVmtLN8cfWIOV1OcvbJbZkplO5Q2deBry7qXrfJGpurhhqVXV5+GKwsbJ7YlieUoR4abMpHaEJBRBkZ01NXHq7wgpw1KcP6oTyEAnbFCKC3fEI15sg+Ka2srYEYaLMN7HABUDVuLQNnMNSwnvu5jDqzMz+Fag3Cr4dfeR05g2VylM4kEzviaKrwM81MZHykMdypWtAHPKpQ+HZt4\/iM5xqWmLBJcAQspk5EK2VqPDpy6Dj7GSW1kzZ+Auf5l37Arfyn\/ALz7f4mXIfKZlneNJWClGKNyU7azW2oHCD8CaFTiLu7halnC0UzuVlUvZYx6U\/MagAd4q6aeOZKR5UrEvOyQI1K+ki4tlYdZwnlupPS3HqcwBHyiUst4ZKpPnWQrqC7PvKyYFqWgTiE0qz4cHcDmAHE4skyOEVAdA3SsMT1w7JyRFFlhJ0sMS9ohgu3DKFp1FLSD5cKpjYcZGoj2n0nSF01btgnChKcgAOG5KR+FarvZnIVLHU5V\/teCo4GSocVLw+wA\/fR5jHSCUPDD+ozGf08tapDTQO4q7xyOYC1FIPkKw8y1mxN1RVGot\/TlyFlQUhJO0BCSJJmdYEzOe3LdSsNi9zHxEoXF48oQt5ahshS1Ee01D8wO8rU8htXdzIitgtnl94azCsH3UnVMj5p2flS8M9qnp7fKSyhu837K7S4IynYUn\/eYr00tW0Y9flOcqVMy9NaMU3roEoO3fhPPkdx6cJ83xVLK3IdpvW+dGZiirhWDl8bEsQkL1SMHWqR8LjjCA2obx7KitlHxCMyJTNGU5fSElaUzkfbQwQt0mEa40QBCia2eogaaLMspedDcapG6Rn0rYNcExoycDOZFjcqTIwEjblTpude65+0CAZ5q5bx6yYB4ikt1RbrH5EZBxqNYZaUsRln8kwelUtdLNlfYxHOJ1P6DT\/mbj7X51r5TfM\/n\/qY8\/oJh218Mfxbal+Qj2mqF4Jwik+38yyutmJuFPFeSQjzM1Lm5m0APeMcQIN3buQMTmXIRStqtI6n\/ABGpHoIh9hsJzVP8X4VlZVUq9Rz+8oExSFtBOyT5VmGoC6j3PWlxByQT0p1XDPSsREWtxRXITFSbLC2ljwILwXOcVD+bncNS9YXC2XWnV5pSsKIG2Ac60YWgDkdRHBnYL0g27KgUOg7lT7U5Eda7q+LrgTmIKmZb9q1nhZaB\/wC5HoFij9KuNShYfWZj1upJkW7KgN4Dv3d5XKfCurZwCPeaCwH1me\/eIkgsMg+Tsj1crmsYBsf+JYEtr0uAWFJbQkswEkFUlKSDhJmDJC5MfLOVUxrABBk8DvPrEtXiO7OJDa1kklSy5Jk7ylYHsqgyeXs7lYgs3aPoWR1e\/wBWlUVPyECDPN3yQoEMsgjfL3+rSVsPrEManTaO0ih9JQpCAYhQTi1knLLET+Vd6MLAVJzMHUrsTl9KaPW0tSCZg5HiNoPoRXBZVYB3m6sCMxTIcwmACKaeaF1HqKbKvmzWaGwHQhqClWesk1IIDdSxwnygnIRyqrDUTrUUY6yiAUqz351bVVY6W94ZMa1bLwSF5cNtarTZx00WRCsXHEzhSFDfuq6muXOADEQJNtcpCjjQQPKYoruAbrU\/zAg41HsssOupEgAkZjKmV8PY+sfxFlgJufoNv\/n\/AMz8638lfmfyZl5hmbZ3Tilw21M\/POEUhc7HpX86llRjZle5Q6VmVJT9XOOtQ4tZtkD7SlxjUTesAHWWo+ZqLqlHxsT+8an6RLy2gkYQJ6msmbw6gYEYzJbuAEEBsnnVLcAvSkCPrAtHFycIHWpre0nQhgReupW0A1GLWbvHqeuGlTmqlYj5wzQnn2QANeeU0WVgDbZgDIbSkJnGQrdB\/Gkq1hc8tw3LdrpdScirEOfvrarxfEYJzINYM0bHtCArJSmydsEwfSugeMpfTiZmojtNJd8HBroadHFTaCftABQ9a28iqwZH8yOTLKb9hbKH6gpPFt1SfYsLFYv4FT2\/38YlrcfWCbKxDaQouNqxwoqSSSmVTrD4sZYMxzkVztWEGGWaBie0oNaJSpSu7W0eCS82FepKUq8xtrFBV6ysmJd0K8kyphyPnBJUn7SZT7aXCvluPMrsXAacC0HNJ9eIPnVdFbgqYiMjE1u1+FTqFJVkppJ6ZwfStLwGOcyKtAj6zLaQQgkL6UIjBdNLzItUOTqwaVaXA6hkQZXj8Mmd1LNvLOI9SLhZxaySOlKx99awjH+5KRhyPpVN+nYDGotwm2BglKyDwBqlqXj0MfzDO4+zaeAOEpI5itakvUdJB+8luPrIZfWlWs2f4c\/ZSS10bqX8bjIyIy1LDjgS5ABVnIg0cqbG33+uojkDU6T\/APn7fgf\/AHBq\/KX6+\/8AmZc2mGwt5a9RARzX7hV87XbS4+\/+JZCgble4tFles5MncIFZvQ5bqb8alKwxoRV3btJ3yfOai2qhPXPvGpYyHX04dRB9Pxoa1OPQvtGAc7gN96UEBOXOpBuZdDENQbW3WomDFTXVax74gSBFBjWgq61Hk4bDNHmRcNICvFNTYlQbvmG5L+CBFN\/JA1DclCkYPCZ401avh8MNyGHAPkTU1uB\/TDEBKzOSaQY8shYQ1OrSqQCDyyptZYrZxiGAZfb0soRiRI4jI11r411+JZkage06mwv2n2sDgAMAJcI3DYlwbxuxbudb9+tNg9x\/j\/EzxjRmNfaCLZnAMxOGQQduxQkDYYmp8pNtWM\/SWLD2aYbT6mnJSFtqB+SSk+org8zD7Wbd5pr0486tKP1hJAAdQhySeawT7atnQkKF7yewzLXbZhtDqEQAQ0nICANZewbqH8rHVJqziYjLDZSdaDTSqkr3l5Mm0YJOquKdVJJ6XgTCS24F5EE0wlwbRzDWId0tyRiQOlXY9oPUsS49JNw8kgYmyOlFliFRyUj9oAHPeQ3bsqTkQFecUlq8O66O4EsDHWtqsZocgcCJrWqmwbR\/zuJmHqJLTjqVGUBX1TH30I1yNtc\/aIgERzL7K3Uh4FKZAOIR7aHtrc4YYP1EMMBqb36Lsvomf5\/51Hl1\/T8TPk8q6J\/XetdjesG7TF7Q\/rDXH4z0mlXaZLe2uCr4pqZuq\/V9K9g\/\/HMv6p638FCfDA95np+V1rm+cqZ6vFXmt8UsTx20vWOWFbK7T8MmW2PAa3T4JJgWG0+VKruYQGfH1qF+OOHf+IVV3cRCFeeFNO74YxL1j4E+Yroq+ATNu86pP7Cn\/qD73aD\/AP0H7f4mI7Tk9M\/rUfV\/E1nb\/wDJNq+0Z2f\/AG1vzP8A4ms2+KFnwx3b\/wDav4EfjXNZ8AlV9pze6sf6ZfrBapVd4zNDR\/jr0aPikN2l662iui3uJC9od54Kq34YL3mC9XkXTUTT0HsNd3gPhMztmgjxGuxfiMhuwlTSfhNYeJ7S0nN14M2n\/9k=)","2cc51580":"Now let's do the same for chimp and dog.","8dfc6d81":"And here is a function to encode a DNA sequence string as an ordinal vector. It returns a NumPy array with A=0.25, C=0.50, G=0.75, T=1.00, n=0.00.","2d4f91a9":"We need to now convert the lists of k-mers for each gene into string sentences of words that can be used to create the Bag of Words model. We will make a target variable y to hold the class labels.","1e6e3939":"Okay, so let's look at some model performce metrics like the confusion matrix, accuracy, precision, recall and f1 score. We are getting really good results on our unseen data, so it looks like our model did not overfit to the training data. In a real project I would go back and sample many more train test splits since we have a relatively small data set."}}