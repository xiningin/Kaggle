{"cell_type":{"6c2a5687":"code","612f974d":"code","fd6be074":"code","4c2d61d3":"code","cb944c43":"markdown","4fcbfee1":"markdown","a6252968":"markdown","845487c3":"markdown","e9d95a4c":"markdown"},"source":{"6c2a5687":"import pandas as pd\n\nuserItemData = pd.read_csv('..\/input\/ratingscsv\/ratings.csv')\nuserItemData.head()","612f974d":"#Get list of unique items\nitemList=list(set(userItemData[\"ItemId\"].tolist()))\n\n#Get count of users\nuserCount=len(set(userItemData[\"ItemId\"].tolist()))\n\n#Create an empty data frame to store item affinity scores for items.\nitemAffinity= pd.DataFrame(columns=('item1', 'item2', 'score'))\nrowCount=0","fd6be074":"#For each item in the list, compare with other items.\nfor ind1 in range(len(itemList)):\n    \n    #Get list of users who bought this item 1.\n    item1Users = userItemData[userItemData.ItemId==itemList[ind1]][\"userId\"].tolist()\n    #print(\"Item 1 \", item1Users)\n    \n    #Get item 2 - items that are not item 1 or those that are not analyzed already.\n    for ind2 in range(ind1, len(itemList)):\n        \n        if ( ind1 == ind2):\n            continue\n       \n        #Get list of users who bought item 2\n        item2Users=userItemData[userItemData.ItemId==itemList[ind2]][\"userId\"].tolist()\n        #print(\"Item 2\",item2Users)\n        \n        #Find score. Find the common list of users and divide it by the total users.\n        commonUsers= len(set(item1Users).intersection(set(item2Users)))\n        score=commonUsers \/ userCount\n\n        #Add a score for item 1, item 2\n        itemAffinity.loc[rowCount] = [itemList[ind1],itemList[ind2],score]\n        rowCount +=1\n        #Add a score for item2, item 1. The same score would apply irrespective of the sequence.\n        itemAffinity.loc[rowCount] = [itemList[ind2],itemList[ind1],score]\n        rowCount +=1\n        \n#Check final result\nitemAffinity.head()","4c2d61d3":"searchItem=5001\nrecoList=itemAffinity[itemAffinity.item1==searchItem]\\\n        [[\"item2\",\"score\"]]\\\n        .sort_values(\"score\", ascending=[0])\n        \nprint(\"Recommendations for item 5001\\n\", recoList)","cb944c43":"## Loading the Dataset\n\nThe source data set contains in each row a User ID and an Item ID. This is the list of users and the items they bought, one line at a time","4fcbfee1":"## Building the Affinity Score\n\nFor building the affinity score, we can use out-of-the-box open source and commercial collaborative filtering libraries. In this example though, we are going to write a simple algorithm to generate user \/ item affinities.","a6252968":"Collaborative Filtering is a popular technique that is used for coming up with User-Item recommendations. In this example, we will use the list of which users bought which items and build an affinity score between items. When a customers buys an item, we use this affinity score to recommend other items to the customer ","845487c3":" #  <p style=\"text-align: center;\">Recommending Items to Users<\/p> ","e9d95a4c":"## Recommending Items\n\nLet us say that a customer bought an item 5001. We can query this data frame for item1-5001 and get items2 with score in desending order. This is the item list that you can recommend to the user in that order."}}