{"cell_type":{"14c2c983":"code","1be82fe0":"code","39dd7f0e":"code","2f674c1a":"code","02a0e17e":"code","c5c71a63":"code","a2f75977":"code","d8e3951e":"code","de5b4622":"code","f7943a72":"code","6e86e1ef":"code","11c99281":"code","5d4ecc79":"code","09ba142c":"code","d903cbfb":"code","0d5f855e":"code","fa7b2e45":"code","7ca9a947":"code","511355c3":"code","939f91bf":"code","75f6aa50":"code","cda7712f":"code","66384d34":"code","8f5c8cb6":"code","8968a824":"code","6f8eb8ea":"code","8bd4a198":"code","03cef748":"code","f5bef2e5":"code","a5046414":"code","23e7784b":"markdown","d07b445f":"markdown","1b9cc145":"markdown","4da815a5":"markdown","be07771b":"markdown","db60745d":"markdown","e574c7ec":"markdown","a9a9e640":"markdown","0d74bf79":"markdown","fe4a8bb2":"markdown","564c3a5b":"markdown","c7cf9382":"markdown","52eaba67":"markdown","a891bc20":"markdown","00430b2b":"markdown","70dabe1e":"markdown"},"source":{"14c2c983":"!pip install requests-futures\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport requests\nfrom requests_futures.sessions import FuturesSession\nfrom joblib import Memory\nimport cv2\nimport imageio","1be82fe0":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","39dd7f0e":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","2f674c1a":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","02a0e17e":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","c5c71a63":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# imagenet_bbox.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/imagenet_bbox.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'imagenet_bbox.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","a2f75977":"df1.head(5)","d8e3951e":"plotPerColumnDistribution(df1, 10, 5)","de5b4622":"plotCorrelationMatrix(df1, 8)","f7943a72":"plotScatterMatrix(df1, 12, 10)","6e86e1ef":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# imagenet_dd_person_merge.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/imagenet_dd_person_merge.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'imagenet_dd_person_merge.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","11c99281":"df2.head(5)","5d4ecc79":"plotPerColumnDistribution(df2, 10, 5)","09ba142c":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# imagenet_dd_person_url.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/imagenet_dd_person_url.csv', delimiter=',')# nrows = nRowsRead)\ndf3.dataframeName = 'imagenet_dd_person_url.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","d903cbfb":"df3.head(5)","0d5f855e":"session = FuturesSession()\n\n\ndf3_1=df3.sample(frac=1)","fa7b2e45":"# df3_1[\"req\"]=df3_1.url.apply(lambda x:session.get(x,timeout =2) )\n# df3_1","7ca9a947":"def detcode(f):\n    if f.exception() is not None:\n        return 0\n    else :\n        return f.result().status_code\n# df3_1[\"status\"]=df3_1.req.apply(detcode)\n# df3_1","511355c3":"# (df3_1.status==200).describe()","939f91bf":"plotPerColumnDistribution(df3, 10, 5)","75f6aa50":"\ndf_wnid=pd.read_csv(\"..\/input\/imagenet_person_wnid.csv\")[[\"wnid\",\"lemmas\"]]#.set_index(\"wnid\")\ndf_wnid","cda7712f":"\n\ndf4=pd.read_csv(\"..\/input\/imagenet_person_mappings.csv\")\ndf4=df4.merge(pd.read_csv(\"..\/input\/imagenet_bbox.csv\"),on=[\"id\"],how=\"left\")\ndf4[\"wnid\"]=df4.wnid_x\ndf4.xmin.fillna(0,inplace=True)\ndf4.ymin.fillna(0,inplace=True)\ndf4.xmax.fillna(1,inplace=True)\ndf4.ymax.fillna(1,inplace=True)\ndf4=df4.merge(df_wnid)\ndel df4[\"wnid_x\"]\ndel df4[\"wnid_y\"]\ndf4\n\n","66384d34":"!mkdir \/tmp\/imgcache\n\nmemory =Memory(location=\"\/tmp\/imgcache\", backend='local',mmap_mode=\"r+\",verbose=0)","8f5c8cb6":"@memory.cache()\ndef imgget(url):\n    img= imageio.imread(t.url)\n    return img\n    \ndef getimg(df=df4,marging=0):\n    for t in df.sample(frac=1).itertuples():\n        try:\n            img= imageio.imread(t.url)\n            w,h,_=img.shape\n        except:\n            continue\n        \n        \n        xmin=int(t.xmin*w-w*marging)\n        xmax=np.ceil(t.xmax*w+w*marging)\n        ymin=int(t.ymin*h-h*marging)\n        ymax=np.ceil(t.ymax*h+h*marging)\n\n        if xmin<0:\n            xmin=0\n        if ymin<0:\n            ymin=0\n        if xmax>w:\n            xmax=w\n        if ymax>h:\n            ymax=h\n        xmin,xmax,ymin,ymax=np.array((xmin,xmax,ymin,ymax),dtype=np.int)\n    #     img1=img[xmin:xmax,ymin:ymax]\n\n    #     img3=cv2.rectangle(img.copy(),color=(255,0,0),pt1=( xmin,ymin),pt2=(xmax,ymax),thickness=5)\n    #     plt.imshow(img3)\n        yield img,xmin,xmax,ymin,ymax,t.wnid\n    ","8968a824":"fig=plt.figure(figsize=(20,20))\nfor n,(img,xmin,xmax,ymin,ymax,wnid) in enumerate(getimg(df4),start=1):\n    plt.subplot(3,3,n)\n    img1=cv2.rectangle(img.copy(),color=(255,0,0),pt1=( xmin,ymin),pt2=(xmax,ymax),thickness=1)\n    plt.imshow(img1)\n    txt=\",\".join(df_wnid[df_wnid.wnid==wnid].lemmas)\n    if txt!='':\n        txt=wnid+\": \"+txt \n    else:\n        txt=wnid\n    plt.title(txt)\n    plt.axis(\"off\")\n    if n>8:\n        break\n","6f8eb8ea":"fig=plt.figure(figsize=(20,20))\nfor n,(img,xmin,xmax,ymin,ymax,wnid) in enumerate(getimg(df4,marging=0.5),start=1):\n    plt.subplot(3,3,n)\n    img1=cv2.rectangle(img.copy(),color=(255,0,0),pt1=( xmin,ymin),pt2=(xmax,ymax),thickness=5)\n    plt.imshow(img1)\n    txt=\",\".join(df_wnid[df_wnid.wnid==wnid].lemmas)\n    if txt!='':\n        txt=wnid+\": \"+txt \n    else:\n        txt=wnid\n    plt.title(txt)\n    plt.axis(\"off\")\n    if n>8:\n        break\n\n","8bd4a198":"df_wnid=df4[[\"wnid\"]].groupby(\"wnid\").size()\ndf_wnid.name=\"num\"\ndf_wnid.sort_values(inplace=True,ascending=False,)\ndf_wnid=df_wnid.reset_index()\ndf_wnid.describe()\n\ndf_wnid=df_wnid.merge(pd.read_csv('..\/input\/imagenet_person_wnid.csv'))[['wnid', 'num','wnid_offset', 'synset', 'lemmas', 'definition']].reset_index()\ndf_wnid.rename(columns={'index': 'class'}, inplace=True)\ndf_wnid.to_csv(\"classes.csv\",index=False)\ndf_wnid.head(30)\n","03cef748":"df4_1=df4.merge(df_wnid[[\"class\" ,\t\"wnid\" \t]]).sample(frac=1).reset_index(drop=True)\ndel df4_1[\"lemmas\"]\n\n\ndf4_1","f5bef2e5":"split_level=0.2\nlval=np.ceil(len(df4_1)*split_level)\nlval=int(lval)\nlval","a5046414":"df4_1[\"split\"]=\"train\"\ndf4_1.loc[:lval*2,\"split\"]=\"val\"\ndf4_1.loc[:lval,\"split\"]=\"test\"\ndf4_1.to_csv(\"dataset.csv\",index=False)\ndf4_1","23e7784b":"Distribution graphs (histogram\/bar graph) of sampled columns:","d07b445f":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","1b9cc145":"### Let's check 3rd file: \/kaggle\/input\/imagenet_dd_person_url.csv","4da815a5":"Let's take a quick look at what the data looks like:","be07771b":"Let's take a quick look at what the data looks like:","db60745d":"Distribution graphs (histogram\/bar graph) of sampled columns:","e574c7ec":"Scatter and density plots:","a9a9e640":"Let's take a quick look at what the data looks like:","0d74bf79":"Distribution graphs (histogram\/bar graph) of sampled columns:","fe4a8bb2":"There are 7 csv files in the current version of the dataset:\n","564c3a5b":"with some marging to  correct bounding boxes problems","c7cf9382":"Correlation matrix:","52eaba67":"[See how an AI system classifies you based on your selfie](https:\/\/www.theverge.com\/tldr\/2019\/9\/16\/20869538\/imagenet-roulette-ai-classifier-web-tool-object-image-recognition)","a891bc20":"### Let's check 2nd file: \/kaggle\/input\/imagenet_dd_person_merge.csv","00430b2b":"### Let's check 1st file: \/kaggle\/input\/imagenet_bbox.csv","70dabe1e":"Now you're ready to read in the data and use the plotting functions to visualize the data."}}