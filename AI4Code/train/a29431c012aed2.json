{"cell_type":{"2e3a1958":"code","e7206efb":"code","872354d1":"code","89c4a125":"code","660ac2b3":"code","f87036d3":"code","78fdbcda":"code","50efa4fc":"code","a2bd968e":"code","fda1e138":"code","dd9fa06e":"code","b999599b":"code","7125fb22":"code","e93a8c2e":"code","904fbfbc":"code","968f631e":"code","639786db":"code","21784403":"code","ba927936":"code","f27da580":"code","b7311910":"code","d9e383db":"code","b0071e96":"code","4047539b":"code","db9dd593":"code","e631fbf0":"code","75c6c082":"code","9023bdb8":"code","80db4d0d":"code","33ef7bab":"code","94041df9":"code","b14e47b3":"code","1012dcb2":"code","f4b9ba93":"code","d532957e":"code","1782f2e3":"code","7d6ceffc":"code","e921ea21":"code","4ad0ccc7":"code","de465395":"code","2feaa01b":"code","d09d16ed":"code","0925a19e":"code","a0e61e6f":"code","4a765f60":"code","57946763":"code","328ea481":"code","82b9864d":"code","cae029ec":"code","560d7e3f":"code","a6852ac8":"code","18ce476d":"code","6d32cba4":"code","43c52d88":"code","6fbfc6b6":"code","89546c74":"code","8b844063":"code","7b58483a":"code","35253cac":"code","300d2258":"code","81db85f9":"code","f305c721":"code","7a0b3747":"code","4606f683":"code","2577121c":"code","c9172166":"code","ad9f641e":"code","34aad4d5":"code","ee1f92fc":"code","feb1250c":"code","44c9475a":"code","6dcc1b93":"code","a204317a":"code","dd695997":"code","bf9dcb53":"code","35ee60f3":"code","1b2c29b6":"code","662bba92":"code","aaa68e59":"code","b620503d":"code","8c22a56a":"code","4188bfa7":"code","c7ac72cb":"code","867d1d9d":"code","031b2610":"code","b244d0c7":"code","34cf7696":"code","99ec73c9":"code","932b1b5a":"code","29eb82a4":"code","22cedcc3":"code","e159cf71":"code","628dc918":"code","2aa628ef":"code","65f3cac9":"code","66f9f4e0":"code","fd8b641b":"code","a7502f2a":"code","ce068fe5":"code","5268d12e":"code","fc773f88":"code","5c450594":"code","2d8cdbcb":"code","f9cf3266":"code","687595ab":"code","4ba96762":"code","c6ba4c0f":"code","d7343073":"code","2b7448c8":"code","f1d06b4f":"code","a4120338":"code","a9fa5cba":"code","98c21506":"code","3a9c6644":"code","230812e6":"code","d991665b":"code","e55e3a81":"code","bd33ca5f":"code","20b1d3d3":"code","05929e24":"code","81d5355e":"code","31e4de56":"code","8b3a950e":"code","8789d6f7":"code","a7add812":"code","7d9f83fb":"code","29773325":"code","2bbcb706":"code","aec95857":"code","37e61afd":"code","2c2bd7ef":"code","279eba2c":"code","73ad8174":"code","58642dfe":"code","d4cd5965":"code","c53f9067":"code","7ed7a4e5":"code","78335926":"code","301615b4":"code","b1091f6e":"code","8edb655f":"code","06d13880":"code","8c8fc3e7":"code","9e9fe2d1":"code","2f51f5e2":"code","ec52b183":"code","8ee8e32d":"code","3e08a7cf":"code","40742133":"code","387e3cda":"code","e7de4df3":"code","dbdfe940":"code","23b68dba":"code","6b837215":"code","f50737ed":"code","37b7774e":"code","4878d868":"code","249d72b0":"code","f58ba490":"code","8a5ab121":"code","d713d839":"code","b99f3a37":"code","27960b08":"code","70dc0445":"code","d1d8ed20":"code","688d5d09":"code","f2436689":"code","b779a3f9":"code","c3de0a9f":"code","fd79fe7f":"code","fdb6c377":"code","2e2bc80c":"code","3b2d78f9":"code","77239bc6":"code","59d2e256":"code","53e4b839":"code","23b5c5b5":"code","8c0762ae":"code","bb3d74b0":"code","6aff46e9":"code","eaf5656f":"code","6eb234f0":"code","0def74d8":"code","fbc9da95":"code","6961a7aa":"code","966885d1":"code","afdae93b":"code","da57ff5b":"code","3ba99a20":"code","36346d7b":"code","0a29d6f9":"code","01730c86":"markdown","3850162e":"markdown","a8c402ae":"markdown","bd93ef65":"markdown","04b44946":"markdown","0cbb1de6":"markdown","5d68993e":"markdown","48c17d65":"markdown","7c7e56f4":"markdown","ae847944":"markdown","bd5ddf07":"markdown","b7aa556b":"markdown","f5f5c316":"markdown","dba83930":"markdown","157dcf1a":"markdown","4ab9d24e":"markdown","275ea249":"markdown","9efcb77f":"markdown","2392763f":"markdown","022c4ebb":"markdown","de46ace0":"markdown","7ca55dc5":"markdown","7cc1112b":"markdown","42d0432e":"markdown","9988d4d3":"markdown","7fd2656a":"markdown","3ee4a1a6":"markdown","2c0a8310":"markdown"},"source":{"2e3a1958":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e7206efb":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nimport scipy.stats as stats\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures, OneHotEncoder, StandardScaler, PowerTransformer, MinMaxScaler, RobustScaler\nfrom sklearn.model_selection import KFold, cross_val_predict, train_test_split, GridSearchCV, cross_val_score, cross_validate\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge,ElasticNet\nfrom sklearn.metrics import plot_confusion_matrix, r2_score, mean_absolute_error, mean_squared_error, classification_report, confusion_matrix, accuracy_score, classification_report\nfrom sklearn.metrics import make_scorer, precision_score, precision_recall_curve, plot_precision_recall_curve, plot_roc_curve, roc_auc_score, roc_curve, f1_score, accuracy_score, recall_score\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier, GradientBoostingRegressor, ExtraTreesRegressor, AdaBoostClassifier\nfrom sklearn.feature_selection import SelectKBest, SelectPercentile, f_classif, f_regression, mutual_info_regression\nfrom xgboost import XGBRegressor, XGBClassifier\nfrom xgboost import plot_importance\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.tree import plot_tree\nfrom sklearn.impute import SimpleImputer, KNNImputer\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC\n\n#importing plotly and cufflinks in offline mode\nimport cufflinks as cf\nimport plotly.offline\ncf.go_offline()\ncf.set_config_file(offline=False, world_readable=True)\n\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.warn(\"this will not show\")\nplt.rcParams[\"figure.figsize\"] = (10,6)\npd.set_option('max_colwidth',200)\n\n# pd.set_option('display.max_rows', 100) # if you wish to see more rows rather than default, just uncomment this line.\npd.set_option('display.max_columns', 200)\npd.set_option('display.float_format', lambda x: '%.3f' % x)\n\nimport colorama\nfrom colorama import Fore, Style  # maakes strings colored\n# !pip3 install termcolor\nfrom termcolor import colored","872354d1":"# Function for determining the number and percentages of missing values\n\ndef missing (df):\n    missing_number = df.isnull().sum().sort_values(ascending=False)\n    missing_percent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\n    missing_values = pd.concat([missing_number, missing_percent], axis=1, keys=['Missing_Number', 'Missing_Percent'])\n    return missing_values","89c4a125":"# To view summary information about the column\n\ndef first_looking(col):\n    print(\"column name    : \", col)\n    print(\"--------------------------------\")\n    print(\"per_of_nulls   : \", \"%\", round(df[col].isnull().sum()\/df.shape[0]*100, 2))\n    print(\"num_of_nulls   : \", df[col].isnull().sum())\n    print(\"num_of_uniques : \", df[col].nunique())\n    print(df[col].value_counts(dropna = False))","660ac2b3":"df0 = pd.read_csv(\"..\/input\/world-military-power-2020\/World military power.csv\", header=1)\ndf = df0.copy()","f87036d3":"# df0 = pd.read_csv(\"World military power.csv\")\n# df = df0.copy()","78fdbcda":"df0.head(1)","50efa4fc":"df.head(3)","a2bd968e":"df.tail(3)","fda1e138":"df.sample(10)","dd9fa06e":"df.columns","b999599b":"df.columns = df.columns.str.lower().str.replace('&', '_').str.replace(' ', '_')","7125fb22":"df.columns","e93a8c2e":"df.shape","904fbfbc":"print(\"There is\", df.shape[0], \"observation and\", df.shape[1], \"columns in the dataset\")","968f631e":"df.info()","639786db":"df.describe().T","21784403":"df.describe(include=object).T","ba927936":"df.nunique()","f27da580":"# to find how many unique values object features have\nfor col in df.select_dtypes(include=[np.number]).columns:\n  print(f\"{col} has {df[col].nunique()} unique value\")","b7311910":"df.duplicated().value_counts()","d9e383db":"duplicate = df[df.duplicated()]","b0071e96":"duplicate","4047539b":"df.drop_duplicates(keep=False, inplace=True)","db9dd593":"df.shape","e631fbf0":"df.head(1)","75c6c082":"df.rename(columns={'military_strength': 'country'}, inplace=True)","9023bdb8":"df.head(1)","80db4d0d":"df.columns","33ef7bab":"drop_columns = ['aircraft_strength',\n               'fighter\/interceptor_strength',\n               'attack_aircraft_strength',\n               'transport_aircraft_fleet_strength',\n               'trainer_aircraft_fleet',\n               'helicopter_fleet_strength',\n               'attack_helicopter_fleet_strength',\n               'tank_strength',\n               'afv\/apc_strength',\n               'self-propelled_artillery_strength',\n               'towed_artillery_strength',\n               'rocket_projector_strength',\n               'navy_fleet_strengths',\n               'aircraft_carrier_fleet_strength',\n               'submarine_fleet_strength',\n               'destroyer_fleet_strength',\n               'frigate_fleet_strength',\n               'defense_spending_budget',\n               'external_debt',\n               'airport_totals', \n               'oil_production',\n               'oil_consumption',\n               'proven_oil_reserves',\n               'available_manpower',\n               'total_population',\n               'total_square_land_area',\n               'total_coastline_coverage',\n               'total_waterway_coverage',\n               'total_border_coverage',\n               ]","94041df9":"df.drop(drop_columns, axis = 1, inplace = True)","b14e47b3":"df.head(1)","1012dcb2":"df.shape","f4b9ba93":"missing (df)","d532957e":"# submarine_fleet_strength_value : South Korea --> 22\n# frigate_fleet_strength_value : South Korea --> 4\n# destroyer_fleet_strength_value : South Korea --> 12","1782f2e3":"df.loc[(df['country']==\"South Korea\") & (df['submarine_fleet_strength_value'].isnull()), 'submarine_fleet_strength_value'] = 22","7d6ceffc":"df.loc[(df['country']==\"South Korea\") & (df['frigate_fleet_strength_value'].isnull()), 'frigate_fleet_strength_value'] = 4","e921ea21":"df.loc[(df['country']==\"South Korea\") & (df['destroyer_fleet_strength_value'].isnull()), 'destroyer_fleet_strength_value'] = 12","4ad0ccc7":"missing (df)","de465395":"df.fillna(0, inplace=True)","2feaa01b":"missing (df)","d09d16ed":"df.dtypes","0925a19e":"df.head(1)","a0e61e6f":"df = df.reset_index()   # df = df.reset_index(drop = True)\ndel df['index']","4a765f60":"df.set_index('country', inplace=True)","57946763":"for col in df.columns:\n    if df.dtypes[col] == np.object:\n        df[col] = df[col].apply(lambda x : x.replace(\",\", \"\") if type(x) != int else x).astype(\"float\")","328ea481":"df.info()","82b9864d":"missing(df)","cae029ec":"df.head(1)","560d7e3f":"df.columns","a6852ac8":"df.shape","18ce476d":"for col in df.select_dtypes(include=[np.number]).columns:\n    if df[col].min() == 0:\n        print(col)","6d32cba4":"# Georeferences\n\n# \"total_coastline_coverage_value\"\n# \"total_waterway_coverage_value\"\n# \"total_border_coverage_value\"\n# \"total_square_land_area_value\"","43c52d88":"df[df[\"total_coastline_coverage_value\"]==0][\"total_coastline_coverage_value\"]","6fbfc6b6":"df[df[\"total_waterway_coverage_value\"]==0][\"total_waterway_coverage_value\"]","89546c74":"df[df[\"total_border_coverage_value\"]==0][\"total_border_coverage_value\"]","8b844063":"df[df[\"total_square_land_area_value\"]==0][\"total_square_land_area_value\"]","7b58483a":"drop_columns = [\"total_coastline_coverage_value\",\n               \"total_waterway_coverage_value\",\n               \"total_border_coverage_value\",\n               \"total_square_land_area_value\"]","35253cac":"df.drop(drop_columns, axis = 1, inplace = True)","300d2258":"df.shape","81db85f9":"df.columns","f305c721":"df.head(1)","7a0b3747":"sns.pairplot(df, palette=\"inferno\", corner=True);","4606f683":"for col in df.columns:\n    plt.figure(figsize = (22,6))\n    sns.barplot(y = df[col], x = df.index, data = df)\n    plt.xticks(rotation = 45);","2577121c":"df.describe().T","c9172166":"from sklearn.preprocessing import StandardScaler, RobustScaler, MinMaxScaler, scale\nimport warnings\nwarnings.filterwarnings('ignore')\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\nwarnings.filterwarnings(\"ignore\", category=FutureWarning)\nfrom sklearn.cluster import KMeans","ad9f641e":"df1 = df.copy()","34aad4d5":"df1.reset_index(inplace=True)","ee1f92fc":"df1.head(1)","feb1250c":"X = df1.drop([\"country\"], axis = 1)","44c9475a":"scaler = scale","6dcc1b93":"X_scaled = pd.DataFrame(scaler(X))","a204317a":"X_scaled.head(1)","dd695997":"X_scaled.shape","bf9dcb53":"K_means_model = KMeans(random_state = 101)","35ee60f3":"K_means_model.fit_predict(X)","1b2c29b6":"!pip install pyclustertend","662bba92":"from pyclustertend import hopkins","aaa68e59":"hopkins(df, df.shape[0])","b620503d":"df11 = df.copy()\ndf12 = df.copy()\ndf13 = df.copy()","8c22a56a":"hopkins(scale(df11), df11.shape[0])","4188bfa7":"hopkins(MinMaxScaler().fit_transform(df12), df12.shape[0])","c7ac72cb":"hopkins(StandardScaler().fit_transform(df13), df13.shape[0])","867d1d9d":"hopkins(scale(df), df.shape[0])","031b2610":"ssd = []\n\nK = range(2,10)\n\nfor k in K:\n    model = KMeans(n_clusters =k, random_state=101)\n    model.fit(X_scaled)\n    ssd.append(model.inertia_)","b244d0c7":"plt.plot(K, ssd, \"bo-\")\nplt.xlabel(\"Different k values\")\nplt.ylabel(\"inertia-error\") \nplt.title(\"elbow method\") ","34cf7696":"ssd # sum of squared distance","99ec73c9":"pd.Series(ssd).diff()","932b1b5a":"df1_diff =pd.DataFrame(-pd.Series(ssd).diff()).rename(index = lambda x : x+1)\ndf1_diff","29eb82a4":"df1_diff.plot(kind='bar')","22cedcc3":"from yellowbrick.cluster import KElbowVisualizer\n\nmodel_ = KMeans(random_state=101)\nvisualizer = KElbowVisualizer(model_, k=(2,9))\n\nvisualizer.fit(X_scaled)        # Fit the data to the visualizer\nvisualizer.show();","e159cf71":"from sklearn.metrics import silhouette_score","628dc918":"silhouette_score(X_scaled, K_means_model.labels_)","2aa628ef":"range_n_clusters = range(2,9)\nfor num_clusters in range_n_clusters:\n    # intialise kmeans\n    kmeans = KMeans(n_clusters=num_clusters, random_state=101)\n    kmeans.fit(X_scaled)\n    cluster_labels = kmeans.labels_\n    # silhouette score\n    silhouette_avg = silhouette_score(X_scaled, cluster_labels)\n    print(f\"For n_clusters={num_clusters}, the silhouette score is {silhouette_avg}\")","65f3cac9":"from sklearn.cluster import KMeans\n\nfrom yellowbrick.cluster import SilhouetteVisualizer\n\nmodel3 = KMeans(n_clusters=4, random_state=101)\nvisualizer = SilhouetteVisualizer(model3)\n\nvisualizer.fit(X_scaled)    # Fit the data to the visualizer\nvisualizer.poof();","66f9f4e0":"model = KMeans(n_clusters = 4, random_state = 101)\nmodel.fit_predict(X_scaled)","fd8b641b":"model.labels_","a7502f2a":"X[\"clusters\"] = model.fit_predict(X_scaled)","ce068fe5":"X.head()","5268d12e":"X.clusters.value_counts()","fc773f88":"df1.head(1)","5c450594":"df1[\"predicted_clusters\"] = model.fit_predict(X_scaled)","2d8cdbcb":"df1[\"predicted_clusters\"].value_counts().plot(kind=\"pie\", startangle=0, labeldistance=1.1, autopct='%1.1f%%',figsize=(10,10));","f9cf3266":"df1.predicted_clusters.value_counts()\n\nsns.countplot(x=df1[\"predicted_clusters\"], data=df1)\nfor index,value in enumerate(df1.predicted_clusters.value_counts().sort_index()):\n     plt.text(index, value, f\"{value}\", ha=\"center\", va=\"bottom\", fontsize = 13)","687595ab":"df1[df1[\"predicted_clusters\"]==0][[\"country\", \"military_strength_power_index\"]].sort_values(by=\"military_strength_power_index\")","4ba96762":"df1[df1[\"predicted_clusters\"]==1][[\"country\", \"military_strength_power_index\"]].sort_values(by=\"military_strength_power_index\")","c6ba4c0f":"df1[df1[\"predicted_clusters\"]==2][[\"country\", \"military_strength_power_index\"]].sort_values(by=\"military_strength_power_index\")","d7343073":"df1[df1[\"predicted_clusters\"]==3][[\"country\", \"military_strength_power_index\"]].sort_values(by=\"military_strength_power_index\")","2b7448c8":"df1['military_strength_power_index'].describe()","f1d06b4f":"df1['military_strength_power_index'].value_counts().index.sort_values()","a4120338":"df1['military_strength_power_index'].iplot(kind='hist', bins=200)","a9fa5cba":"def classification(military_strength_power_index):\n    if military_strength_power_index <= 0.065:\n        return 1\n    elif 0.065 < military_strength_power_index <= 0.1:\n        return 2\n    elif 0.1 < military_strength_power_index <= 0.5:\n        return 3\n    else:\n        return 0","98c21506":"df1['classification'] = df1['military_strength_power_index'].apply(classification)","3a9c6644":"df1.head(1)","230812e6":"df1['classification'].value_counts()","d991665b":"df1[\"classification\"].value_counts().plot(kind=\"pie\", startangle=0, labeldistance=1.1, autopct='%1.1f%%',figsize=(10,10));","e55e3a81":"df1.classification.value_counts()\n\nsns.countplot(x=df1[\"classification\"], data=df1)\nfor index,value in enumerate(df1.classification.value_counts().sort_index()):\n     plt.text(index, value, f\"{value}\", ha=\"center\", va=\"bottom\", fontsize = 13)","bd33ca5f":"df1[df1[\"classification\"]==2][[\"country\", \"military_strength_power_index\"]].sort_values(by=\"military_strength_power_index\")","20b1d3d3":"len(df1[df1[\"classification\"]==2][\"country\"])","05929e24":"df1[df1[\"classification\"]==1][[\"country\", \"military_strength_power_index\"]].sort_values(by=\"military_strength_power_index\")","81d5355e":"len(df1[df1[\"classification\"]==1][\"country\"])","31e4de56":"df1[df1[\"classification\"]==0][[\"country\", \"military_strength_power_index\"]].sort_values(by=\"military_strength_power_index\")","8b3a950e":"len(df1[df1[\"classification\"]==0][\"country\"])","8789d6f7":"df1[df1[\"classification\"]==3][[\"country\", \"military_strength_power_index\"]].sort_values(by=\"military_strength_power_index\")","a7add812":"len(df1[df1[\"classification\"]==3][\"country\"])","7d9f83fb":"from sklearn.metrics import adjusted_rand_score","29773325":"df1_end = df1\ndf1_end","2bbcb706":"df1.predicted_clusters.value_counts()","aec95857":"df1.classification.value_counts()","37e61afd":"df1[[\"classification\", \"predicted_clusters\"]].value_counts()","2c2bd7ef":"df1[[\"country\", \"classification\", \"predicted_clusters\"]]","279eba2c":"df1[df1[\"classification\"]!=df1[\"predicted_clusters\"]][[\"country\", \"classification\", \"predicted_clusters\"]]","73ad8174":"df2 = df.copy()","58642dfe":"df2.head(1)","d4cd5965":"X_scaled = scale(df2)","c53f9067":"pd.DataFrame(X_scaled)","7ed7a4e5":"hopkins(df2, df2.shape[0])","78335926":"df21 = df.copy()\ndf22 = df.copy()\ndf23 = df.copy()","301615b4":"hopkins(scale(df21), df21.shape[0])","b1091f6e":"hopkins(MinMaxScaler().fit_transform(df22), df22.shape[0])","8edb655f":"hopkins(StandardScaler().fit_transform(df23), df23.shape[0])","06d13880":"hopkins(scale(df2), df.shape[0])","8c8fc3e7":"from scipy.cluster.hierarchy import dendrogram, linkage","9e9fe2d1":"hc_ward = linkage(y = df2, method = \"ward\")\nhc_complete = linkage(df2, \"complete\")\nhc_average = linkage(df2, \"average\")\nhc_single = linkage(df2, \"single\")","2f51f5e2":"plt.figure(figsize = (14,7))\ndendrogram(hc_ward, leaf_font_size = 10);","ec52b183":"plt.figure(figsize = (14,7))\ndendrogram(hc_ward,\n           truncate_mode = \"lastp\",\n           p = 10,\n           show_contracted = True,\n           leaf_font_size = 10);","8ee8e32d":"plt.figure(figsize = (20,12))\n\nplt.subplot(221)\nplt.title(\"Ward\")\nplt.xlabel(\"Observations\")\nplt.ylabel(\"Distance\")\ndendrogram(hc_ward, truncate_mode = \"lastp\", p = 10, show_contracted = True, leaf_font_size = 10)\n\nplt.subplot(222)\nplt.title(\"Complete\")\nplt.xlabel(\"Observations\")\nplt.ylabel(\"Distance\")\ndendrogram(hc_complete, truncate_mode = \"lastp\", p = 10, show_contracted = True, leaf_font_size = 10)\n\nplt.subplot(223)\nplt.title(\"Average\")\nplt.xlabel(\"Observations\")\nplt.ylabel(\"Distance\")\ndendrogram(hc_average, truncate_mode = \"lastp\", p = 10, show_contracted = True, leaf_font_size = 10)\n\nplt.subplot(224)\nplt.title(\"Single\")\nplt.xlabel(\"Observations\")\nplt.ylabel(\"Distance\")\ndendrogram(hc_single, truncate_mode = \"lastp\", p = 10, show_contracted = True, leaf_font_size = 10);","3e08a7cf":"sns.clustermap(df2);","40742133":"sns.clustermap(df2, col_cluster=False);","387e3cda":"sns.clustermap(df2, row_cluster=False);","e7de4df3":"from sklearn.cluster import AgglomerativeClustering","dbdfe940":"from sklearn.metrics import silhouette_score","23b68dba":"K = range(2,10)\n\nfor k in K:\n    model_labels = AgglomerativeClustering(n_clusters = k,  \n                                    affinity='euclidean', \n                                    linkage='ward').fit_predict(X_scaled)\n    print(f'Silhouette Score for {k} clusters: {silhouette_score(X_scaled, model_labels)}')","6b837215":"model = AgglomerativeClustering(n_clusters = 5,\n                                affinity='euclidean',\n                                linkage='ward')","f50737ed":"clusters = model.fit_predict(X_scaled)","37b7774e":"plt.scatter(df2.iloc[:,0], df2.iloc[:,1], c = clusters, cmap = \"viridis\")","4878d868":"plt.figure(figsize = (20,60))\n\nplt.subplot(9,3,1)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,1], c = clusters, cmap = \"viridis\");\nplt.subplot(9,3,2)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,2], c = clusters, cmap = \"viridis\");\nplt.subplot(9,3,3)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,3], c = clusters, cmap = \"viridis\");\nplt.subplot(9,3,4)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,4], c = clusters, cmap = \"viridis\");\nplt.subplot(9,3,5)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,5], c = clusters, cmap = \"viridis\");\nplt.subplot(9,3,6)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,6], c = clusters, cmap = \"viridis\");\nplt.subplot(9,3,7)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,7], c = clusters, cmap = \"viridis\");\nplt.subplot(9,3,8)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,8], c = clusters, cmap = \"viridis\");\nplt.subplot(9,3,9)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,9], c = clusters, cmap = \"viridis\");\nplt.subplot(9,3,10)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,10], c = clusters, cmap = \"viridis\");\nplt.subplot(9,3,11)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,11], c = clusters, cmap = \"viridis\");\nplt.subplot(9,3,12)\nplt.title(\"Original\")\nplt.scatter(df2.iloc[:,0], df2.iloc[:,12], c = clusters, cmap = \"viridis\");","249d72b0":"df2[\"predicted_clusters_hc\"] = clusters","f58ba490":"df2.head()","8a5ab121":"df2.groupby(\"predicted_clusters_hc\").mean()","d713d839":"df2.predicted_clusters_hc.value_counts()","b99f3a37":"df2[df2[\"predicted_clusters_hc\"]==0].index","27960b08":"df2[df2[\"predicted_clusters_hc\"]==1].index","70dc0445":"df2[df2[\"predicted_clusters_hc\"]==2].index","d1d8ed20":"df2[df2[\"predicted_clusters_hc\"]==3].index","688d5d09":"df2[df2[\"predicted_clusters_hc\"]==4].index","f2436689":"df2[\"military_power\"] = df2[\"predicted_clusters_hc\"].map({  0 : \"low\",\n                                                            1 : \"medium\",\n                                                            2 : \"most_powerfull\",\n                                                            3 : \"powerfull\",\n                                                            4 : \"weak\",\n                                                         })","b779a3f9":"df2.head(1)","c3de0a9f":"df2.reset_index(inplace=True)","fd79fe7f":"df2[\"predicted_clusters_hc\"].value_counts().plot(kind=\"pie\", startangle=0, labeldistance=1.1, autopct='%1.1f%%',figsize=(10,10));","fdb6c377":"df2.predicted_clusters_hc.value_counts()","2e2bc80c":"df2.predicted_clusters_hc.value_counts()\n\nsns.countplot(x=df2[\"predicted_clusters_hc\"], data=df2)\nfor index,value in enumerate(df2.predicted_clusters_hc.value_counts().sort_index()):\n     plt.text(index, value, f\"{value}\", ha=\"center\", va=\"bottom\", fontsize = 13)","3b2d78f9":"df2.groupby(\"predicted_clusters_hc\")[\"country\"].unique()","77239bc6":"df2[\"military_power\"].value_counts()","59d2e256":"df2.groupby(\"military_power\")[\"country\"].unique()[\"weak\"]","53e4b839":"df2.groupby(\"military_power\")[\"country\"].unique()[\"low\"]","23b5c5b5":"df2.groupby(\"military_power\")[\"country\"].unique()[\"medium\"]","8c0762ae":"df2.groupby(\"military_power\")[\"country\"].unique()[\"powerfull\"]","bb3d74b0":"df2.groupby(\"military_power\")[\"country\"].unique()[\"most_powerfull\"]","6aff46e9":"df1['military_strength_power_index'].iplot(kind='hist', bins=200)","eaf5656f":"def classification1(military_strength_power_index):\n    if military_strength_power_index <= 0.065:\n        return \"most_powerfull\"\n    elif 0.065 < military_strength_power_index <= 0.070:\n        return \"powerfull\"\n    elif 0.070 < military_strength_power_index <= 0.1:\n        return \"medium\"\n    elif 0.1 < military_strength_power_index <= 0.85:\n        return \"low\"\n    else:\n        return \"weak\"","6eb234f0":"df.military_strength_power_index.sort_values()","0def74d8":"df2['classification'] = df2['military_strength_power_index'].apply(classification1)","fbc9da95":"df2['classification'].value_counts()","6961a7aa":"df2['military_power'].value_counts()","966885d1":"df2[\"classification\"].value_counts().plot(kind=\"pie\", startangle=0, labeldistance=1.1, autopct='%1.1f%%',figsize=(10,10));","afdae93b":"df2.classification.value_counts()","da57ff5b":"df2.classification.value_counts()\n\nsns.countplot(x=df2[\"classification\"], data=df2)\nfor index,value in enumerate(df2.classification.value_counts()):\n     plt.text(index, value, f\"{value}\", ha=\"center\", va=\"bottom\", fontsize = 13)","3ba99a20":"df2[[\"classification\", \"military_power\"]].value_counts()","36346d7b":"df2[[\"country\", \"classification\", \"military_power\"]]","0a29d6f9":"df2[df2[\"classification\"]!=df2[\"military_power\"]][[\"country\", \"classification\", \"military_power\"]]","01730c86":"### Dendogram","3850162e":"## Convert multi index columns to one level","a8c402ae":"## Hopkins Test \n#### Assess the clusterability of a dataset. A score between 0 and 1, a score around 0.5 express no clusterability, a score tending to 1 express an uniform distrubution so clustering can't be useful and  0 express  not an uniform distrubution hence clusterering can be useful.","bd93ef65":"# Data Preprocessing","04b44946":"## Deal with missing values ","0cbb1de6":"## Clustering with K-means","5d68993e":"## Detect and drop duplicated columns","48c17d65":"# Ingest Data  ","7c7e56f4":"### Model Building and label visualisation","ae847944":"## Visualy inspect the some features","bd5ddf07":"### Evaluate ","b7aa556b":"# Modelling","f5f5c316":"## Descriptive statistics","dba83930":"# Import Libraries","157dcf1a":"### Elbow Method \nWe use this method to find optimal k value by looking up to break point of graph. ","4ab9d24e":"### Evaluate ","275ea249":"## Fix the dtypes","9efcb77f":"### S(Silhouette) Score","2392763f":"# Military Power Clustering\n\nSource : globalfirepower.com on 1st may 2020","022c4ebb":"# User Defined Function","de46ace0":"## Implement basic steps to see how is your data looks like","7ca55dc5":"# EDA","7cc1112b":"### Silhouette analysis","42d0432e":"### Hopkins Test","9988d4d3":"## Check for missing values ","7fd2656a":"### Model Building and label visualisation","3ee4a1a6":"## Hierarchical Clustering","2c0a8310":"## Drop the features that not affect military power"}}