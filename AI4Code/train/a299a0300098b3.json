{"cell_type":{"cfa0fb4e":"code","a4a42e55":"code","647310e2":"code","ae6c0ebd":"code","cdd17169":"code","50b3ae91":"code","ad098d17":"code","331b0532":"code","1e06357b":"code","7b8e4c80":"code","e1e0e70e":"code","93dfafec":"code","9614c55e":"code","2ab6b53e":"code","e932e314":"code","062822ac":"code","bcf4f560":"code","99475a2a":"code","d8e9bbdc":"code","f044068f":"code","251339b3":"code","60337212":"code","79c2400c":"code","b89d126d":"code","636a7290":"code","a4685586":"code","133166ad":"code","d6c7be08":"code","3d9d6073":"code","666ac1d5":"code","73db88a2":"code","3bc9147e":"code","61bf29ba":"code","8ada0a89":"code","488d7c1f":"code","fa9a1b2f":"code","cf7fdc4c":"code","99de83e1":"code","f938cd5c":"markdown","32e3875d":"markdown","817286af":"markdown","39cf1345":"markdown","4e88f52e":"markdown","036d1568":"markdown","32feac56":"markdown","1b3eca28":"markdown","96639107":"markdown","75934de1":"markdown","ae0b4b31":"markdown","189a9fea":"markdown","6b24755c":"markdown","4f908d8a":"markdown","99090a39":"markdown","0168b00e":"markdown"},"source":{"cfa0fb4e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n\nimport folium\nimport math\nimport random\nfrom datetime import timedelta\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n#Color Palletes\n\ncnf = '#393e46'\ndth = '#ff2e63'\nrec = '#21bf73'\nact = '#fe9801'\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a4a42e55":"covid_df = pd.read_csv(\"\/kaggle\/input\/corona-virus-report\/covid_19_clean_complete.csv\",parse_dates=['Date'])","647310e2":"covid_df.head()","ae6c0ebd":"covid_df[\"Province\/State\"] = covid_df[\"Province\/State\"].fillna(\"\")\ncovid_df","cdd17169":"country_daywise =pd.read_csv(\"\/kaggle\/input\/corona-virus-report\/full_grouped.csv\",parse_dates=['Date'])\ncountrywise =pd.read_csv(\"\/kaggle\/input\/corona-virus-report\/country_wise_latest.csv\")\ndaywise =pd.read_csv(\"\/kaggle\/input\/corona-virus-report\/day_wise.csv\",parse_dates=['Date'])","50b3ae91":"confirmed = covid_df.groupby('Date').sum()['Confirmed'].reset_index()\nconfirmed","ad098d17":"recovered = covid_df.groupby('Date').sum()['Recovered'].reset_index()\nrecovered","331b0532":"deaths = covid_df.groupby('Date').sum()['Deaths'].reset_index()\ndeaths","1e06357b":"covid_df.isnull().sum()","7b8e4c80":"covid_df.info()","e1e0e70e":"fig =go.Figure()\nfig.add_trace(go.Scatter(x=confirmed['Date'],y =confirmed['Confirmed'], mode='lines+markers',name= 'Confirmed',line=dict(color=\"Orange\",width=2)))\nfig.add_trace(go.Scatter(x=recovered['Date'],y =recovered['Recovered'], mode='lines+markers',name= 'Recovered',line=dict(color=\"Green\",width=2)))\nfig.add_trace(go.Scatter(x=confirmed['Date'],y =deaths['Deaths'], mode='lines+markers',name= 'Deaths',line=dict(color=\"Red\",width=2)))\nfig.update_layout(title='Worldwide Covid-19 cases',xaxis_tickfont_size =14,yaxis=dict(title=\"No of cases\"))\nfig.show()","93dfafec":"covid_df[\"Date\"]=covid_df[\"Date\"].astype(str)","9614c55e":"covid_df.info()","2ab6b53e":"fig = px.density_mapbox(covid_df,lat = \"Lat\",lon=\"Long\",hover_name=\"Country\/Region\",hover_data=['Confirmed','Recovered','Deaths'],animation_frame='Date',color_continuous_scale='Portland',radius=7,zoom=0,height=700)\nfig.update_layout(title='WorldWide Covid 19 cases with Time lapse')\nfig.update_layout(mapbox_style= \"open-street-map\",mapbox_center_lon=0)\nfig.show()","e932e314":"temp = covid_df.groupby('Date')['Confirmed','Deaths','Recovered','Active'].sum().reset_index()\ntemp = temp[temp['Date']==max(temp['Date'])].reset_index(drop= True)\ntm = temp.melt(id_vars='Date',value_vars=['Active','Deaths','Recovered'])\nfig = px.treemap(tm,path=[\"variable\"],values='value',height=250,width = 800,color_discrete_sequence=[act,rec,dth])\nfig.data[0].textinfo ='label+text+value'\nfig.show()","062822ac":"temp = covid_df.groupby('Date')[\"Recovered\",\"Deaths\",\"Active\"].sum().reset_index()\ntemp = temp.melt(id_vars= \"Date\",value_vars= [\"Recovered\",\"Deaths\",\"Active\"],var_name='Case',value_name=\"Count\")\nfig = px.area(temp,x=\"Date\",y=\"Count\",color=\"Case\",height=400,title=\"Cases Over time\",color_discrete_sequence=[rec,dth,act])\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","bcf4f560":"temp = covid_df[covid_df[\"Date\"]==max(covid_df[\"Date\"])]\nm = folium.Map(location =[0,0],titles = 'cartodbpositron',min_zoom=1, max_zomm=4,zoom_start=1)\nfor i in range(0,len(temp)):\n    folium.Circle(location=[temp.iloc[i]['Lat'],temp.iloc[i]['Long']],color= 'crimson',fill = 'crimson',\n                  tooltip='<li><bold> Country: ' + str(temp.iloc[i]['Country\/Region'])+\n                           '<li><bold> Province: ' + str(temp.iloc[i]['Province\/State'])+\n                            '<li><bold> Confirmed Cases: ' + str(temp.iloc[i]['Confirmed'])+\n                            '<li><bold> Deaths Cases: ' + str(temp.iloc[i]['Deaths']),\n                  radius=int(temp.iloc[i]['Confirmed'])**0.5).add_to(m)\nm","99475a2a":"fig = px.choropleth(country_daywise,locations='Country\/Region',locationmode='country names',color=np.log(country_daywise['Confirmed']),\n                   hover_name='Country\/Region',animation_frame=country_daywise['Date'].dt.strftime('%Y-%m-%d'),\n                   title='Cases over time',color_continuous_scale=px.colors.sequential.Inferno)\nfig.update(layout_coloraxis_showscale= True)\nfig.show()","d8e9bbdc":"daywise.head()","f044068f":"fig_c = px.bar(daywise,x='Date',y = 'Confirmed',color_discrete_sequence=[act])\nfig_d = px.bar(daywise,x='Date',y = 'Deaths',color_discrete_sequence=[dth])\n\nfig = make_subplots(rows=1,cols=2,shared_xaxes=False,horizontal_spacing=0.1,\n                   subplot_titles=('Confirmed Cases','Death Cases'))\nfig.add_trace(fig_c['data'][0],row=1,col=1)\nfig.add_trace(fig_d['data'][0],row=1,col=2)\n\nfig.update_layout(height=400)\nfig.show()","251339b3":"fig_c= px.choropleth(countrywise,locations='Country\/Region',locationmode='country names',\n                    color=np.log(countrywise['Confirmed']),hover_name=\"Country\/Region\",\n                    hover_data=['Confirmed'])\ntemp= countrywise[countrywise[\"Deaths\"]>0]\nfig_d= px.choropleth(temp,locations='Country\/Region',locationmode='country names',\n                    color=np.log(temp['Deaths']),hover_name=\"Country\/Region\",\n                    hover_data=['Deaths'])\nfig = make_subplots(rows=1,cols=2,subplot_titles=['Confirmed','Deaths'],\n                   specs=[[{'type':'choropleth'},{'type':'choropleth'}]])\n\nfig.add_trace(fig_c['data'][0],row=1,col=1)\nfig.add_trace(fig_c['data'][0],row=1,col=2)\nfig.update(layout_coloraxis_showscale=False)\nfig.show()","60337212":"daywise.columns","79c2400c":"fig1=px.line(daywise,x='Date',y='Deaths \/ 100 Cases',color_discrete_sequence=[dth])\nfig2=px.line(daywise,x='Date',y='Recovered \/ 100 Cases',color_discrete_sequence=[rec])\nfig3=px.line(daywise,x='Date',y='Deaths \/ 100 Recovered',color_discrete_sequence=[rec])\n\nfig=make_subplots(rows=1,cols=3,shared_xaxes=False,\n                 subplot_titles=('Deaths \/ 100 Cases','Recovered \/ 100 Cases','Deaths \/ 100 Recovered'))\n\nfig.add_trace(fig1['data'][0],row=1,col=1)\nfig.add_trace(fig2['data'][0],row=1,col=2)\nfig.add_trace(fig3['data'][0],row=1,col=3)\n\nfig.update_layout(height=400)\nfig.show()","b89d126d":"fig_c=px.bar(daywise,x='Date',y='Confirmed',color_discrete_sequence=[act])\nfig_d=px.bar(daywise,x='Date',y='No. of countries',color_discrete_sequence=[dth])\n\nfig= make_subplots(rows=1,cols=2,shared_xaxes=False,horizontal_spacing=0.1,\n                  subplot_titles=('No of new cases per day','No of countries'))\n\nfig.add_trace(fig_c['data'][0],row=1,col=1)\nfig.add_trace(fig_d['data'][0],row=1,col=2)\n\nfig.show()","636a7290":"countrywise.head()","a4685586":"top =15\n\nfig_c=px.bar(countrywise.sort_values('Confirmed').tail(top),x='Confirmed',y=\"Country\/Region\",\n            text='Confirmed',orientation='h',color_discrete_sequence=[act])\nfig_d=px.bar(countrywise.sort_values('Deaths').tail(top),x='Deaths',y=\"Country\/Region\",\n            text='Deaths',orientation='h',color_discrete_sequence=[dth])\n\nfig_a=px.bar(countrywise.sort_values('Active').tail(top),x='Active',y=\"Country\/Region\",\n            text='Active',orientation='h',color_discrete_sequence=['#434343'])\nfig_r=px.bar(countrywise.sort_values('Recovered').tail(top),x='Recovered',y=\"Country\/Region\",\n            text='Recovered',orientation='h',color_discrete_sequence=[rec])\n\nfig_dc=px.bar(countrywise.sort_values('Deaths \/ 100 Cases').tail(top),x='Deaths \/ 100 Cases',y=\"Country\/Region\",\n            text='Deaths \/ 100 Cases',orientation='h',color_discrete_sequence=['#f84351'])\nfig_rc=px.bar(countrywise.sort_values('Recovered \/ 100 Cases').tail(top),x='Recovered \/ 100 Cases',y=\"Country\/Region\",\n            text='Recovered \/ 100 Cases',orientation='h',color_discrete_sequence=['#a45398'])\n\nfig_nc=px.bar(countrywise.sort_values('New cases').tail(top),x='New cases',y=\"Country\/Region\",\n            text='New cases',orientation='h',color_discrete_sequence=['#f04341'])\n\nfig_wc=px.bar(countrywise.sort_values('1 week change').tail(top),x='1 week change',y=\"Country\/Region\",\n            text='1 week change',orientation='h',color_discrete_sequence=['#c04341'])\ntemp = countrywise[countrywise['Confirmed'] > 100]\nfig_wi=px.bar(temp.sort_values('1 week % increase').tail(top),x='1 week % increase',y=\"Country\/Region\",\n            text='1 week % increase',orientation='h',color_discrete_sequence=['#b05398'])\n\nfig=make_subplots(rows=5,cols=2,shared_xaxes=False,horizontal_spacing=0.14,\n                 vertical_spacing=0.1,subplot_titles=('Confirmed Cases','Deaths Reported','Active Cases',\n                                                      'Recovered Cases','Deaths \/ 100 Cases','Recovered \/ 100 Cases',\n                                                      'New Cases','Cases \/ Million People',\n                                                     '1 week % increase'))\n\nfig.add_trace(fig_c['data'][0],row=1,col=1)\nfig.add_trace(fig_d['data'][0],row=1,col=2)\nfig.add_trace(fig_a['data'][0],row=2,col=1)\nfig.add_trace(fig_r['data'][0],row=2,col=2)\n\nfig.add_trace(fig_dc['data'][0],row=3,col=1)\nfig.add_trace(fig_rc['data'][0],row=3,col=2)\n\nfig.add_trace(fig_nc['data'][0],row=4,col=1)\nfig.add_trace(fig_wc['data'][0],row=4,col=2)\n\nfig.add_trace(fig_wi['data'][0],row=5,col=1)\n\nfig.update_layout(height=3000)\nfig.show()","133166ad":"top=15\nfig = px.scatter(countrywise.sort_values('Deaths',ascending=False).head(top),\n                x= 'Confirmed',y='Deaths',color='Country\/Region',size = 'Confirmed',height=600,\n                text='Country\/Region',log_x=True,log_y=True,title ='Deaths vs Confirmed Cases (Cases on log scales)')\nfig.update_traces(textposition='top center')\nfig.update_layout(showlegend= True)\nfig.update_layout(xaxis_rangeslider_visible=True)\nfig.show()","d6c7be08":"fig=px.bar(country_daywise,x='Date',y='Confirmed',color='Country\/Region',height=600,\n          title='Confirmed Cases',color_discrete_sequence=px.colors.cyclical.mygbm)\nfig.show()","3d9d6073":"fig=px.bar(country_daywise,x='Date',y='Deaths',color='Country\/Region',height=600,\n          title='Deaths Cases',color_discrete_sequence=px.colors.cyclical.mygbm)\nfig.show()","666ac1d5":"fig=px.bar(country_daywise,x='Date',y='Recovered',color='Country\/Region',height=600,\n          title='Recovered Cases',color_discrete_sequence=px.colors.cyclical.mygbm)\nfig.show()","73db88a2":"fig=px.bar(country_daywise,x='Date',y='New cases',color='Country\/Region',height=600,\n          title='New cases',color_discrete_sequence=px.colors.cyclical.mygbm)\nfig.show()","3bc9147e":"fig =px.line(country_daywise,x='Date',y='Confirmed',color='Country\/Region',height=600,\n            title='Confirmed',color_discrete_sequence=px.colors.cyclical.mygbm)\nfig.show()","61bf29ba":"fig =px.line(country_daywise,x='Date',y='Deaths',color='Country\/Region',height=600,\n            title='Deaths cases',color_discrete_sequence=px.colors.cyclical.mygbm)\nfig.show()","8ada0a89":"fig =px.line(country_daywise,x='Date',y='Recovered',color='Country\/Region',height=600,\n            title='Recovered cases',color_discrete_sequence=px.colors.cyclical.mygbm)\nfig.show()","488d7c1f":"full_latest= covid_df[covid_df['Date'] == max(covid_df['Date'])]\nfig = px.treemap(full_latest.sort_values(by='Confirmed',ascending=False).reset_index(drop=True),\n                path=['Country\/Region','Province\/State'],values='Confirmed',height=700,\n                title='Number of Confirmed Cases',\n                color_discrete_sequence=px.colors.qualitative.Dark2)\nfig.data[0].textinfo='label+text+value'\nfig.show()","fa9a1b2f":"full_latest= covid_df[covid_df['Date'] == max(covid_df['Date'])]\nfig = px.treemap(full_latest.sort_values(by='Deaths',ascending=False).reset_index(drop=True),\n                path=['Country\/Region','Province\/State'],values='Deaths',height=700,\n                title='Number of Deaths Cases',\n                color_discrete_sequence=px.colors.qualitative.Dark2)\nfig.data[0].textinfo='label+text+value'\nfig.show()","cf7fdc4c":"#Wikipedia Source\nepidemics = pd.DataFrame({\n    'epidemic': ['COVID-19','SARS','EBOLA','MERS','H1N1'],\n    'start_year': [2019,2002,2013,2012,2009],\n    'end_year': [2020,2004,2016,2020,2010],\n    'confirmed' : [full_latest['Confirmed'].sum(),8422,28646,2519,6724149],\n    'deaths' : [full_latest['Deaths'].sum(),813,11323,866,19654]\n})\n\nepidemics['mortality'] = round((epidemics['deaths']\/epidemics['confirmed'])*100,2)\nepidemics.head()","99de83e1":"temp = epidemics.melt(id_vars='epidemic',value_vars=['confirmed','deaths','mortality'],\n                     var_name='Case',value_name='Value')\nfig=px.bar(temp,x='epidemic',y='Value',color='epidemic',text='Value',facet_col='Case',\n          color_discrete_sequence=px.colors.qualitative.Bold)\nfig.update_traces(textposition='outside')\nfig.update_layout(uniformtext_minsize=8,uniformtext_mode='hide')\nfig.update_yaxes(showticklabels=False)\nfig.layout.yaxis2.update(matches=None)\nfig.layout.yaxis3.update(matches=None)\nfig.show()","f938cd5c":"# News cases and new countries","32e3875d":"## Confirmed Cases","817286af":"## Bar Plot","39cf1345":"# Tree Map Analysis","4e88f52e":"# Confirmed Cases with Choropleth Map","036d1568":"## Death cases","32feac56":"## Line Plot ","1b3eca28":"# Folium Maps","96639107":"# Death and Recoveries per 100 cases","75934de1":"# Cases Over the time","ae0b4b31":"# Confirmed Deaths,New Cases vs Conutry and Date","189a9fea":"# Worldwide Total Confirmed, Recovered and Deaths","6b24755c":"# Scatter Plot for Deaths vs Confirmed Cases","4f908d8a":"# Covid 19 vs Other Pandemic","99090a39":"# Confirmed and Death Cases with Color Map","0168b00e":"# Cases Density Animation on world Map"}}