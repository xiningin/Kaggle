{"cell_type":{"9b96bd4c":"code","77731813":"code","2e48f90b":"code","89978c35":"code","f141aaf7":"code","442c3ebc":"markdown"},"source":{"9b96bd4c":"from concorde.tsp import TSPSolver\nfrom matplotlib import collections  as mc\nimport numpy as np\nimport pandas as pd\nimport time\nimport pylab as pl","77731813":"cities = pd.read_csv('..\/input\/cities.csv')","2e48f90b":"# Instantiate solver\nsolver = TSPSolver.from_data(\n    cities.X,\n    cities.Y,\n    norm=\"EUC_2D\"\n)\n\nt = time.time()\ntour_data = solver.solve(time_bound = 10.0, verbose = True, random_seed = 42) # solve() doesn't seem to respect time_bound for certain values?\nprint(time.time() - t)\nprint(tour_data.found_tour)","89978c35":"pd.DataFrame({'Path': np.append(tour_data.tour,[0])}).to_csv('submission.csv', index=False)","f141aaf7":"# Plot tour\nlines = [[(cities.X[tour_data.tour[i]],cities.Y[tour_data.tour[i]]),(cities.X[tour_data.tour[i+1]],cities.Y[tour_data.tour[i+1]])] for i in range(0,len(cities)-1)]\nlc = mc.LineCollection(lines, linewidths=2)\nfig, ax = pl.subplots(figsize=(20,20))\nax.set_aspect('equal')\nax.add_collection(lc)\nax.autoscale()","442c3ebc":"* This kernel hands off the cities to the very fast Concorde TSP solver\n* Ignores the prime twist on this problem\n* You must have https:\/\/github.com\/jvkersch\/pyconcorde installed in Kernels to run this\n"}}