{"cell_type":{"0f7e8860":"code","25bc5b24":"code","fd1b69f8":"code","ddd7863b":"code","3bfcb034":"code","2cd0c181":"code","ee4c58b9":"code","28baf066":"code","e93b255a":"code","b703d8df":"code","685fd726":"code","0b1a819e":"code","e84a3122":"code","9b642587":"code","8bba5a0b":"code","81dc24c5":"code","d69f54cb":"code","58888160":"code","666b1c59":"code","2919c33c":"code","f3b9fc8f":"code","aec221f2":"code","4af800d5":"code","48da8c1b":"code","9104aba5":"code","57eb2d5c":"code","0fb95c07":"code","9cda1162":"markdown","14235de1":"markdown","a643c431":"markdown","abe99c1b":"markdown","49867b03":"markdown","f83ee121":"markdown"},"source":{"0f7e8860":"from pandas.io.json import json_normalize\nimport folium\nfrom geopy.geocoders import Nominatim\nimport requests\nimport pandas as pd\nfrom bs4 import BeautifulSoup\nimport seaborn as sns\n\nimport requests # library to handle requests\nimport numpy as np # library to handle data in a vectorized manner\nimport random # library for random number generation\n\nfrom geopy.geocoders import Nominatim # module to convert an address into latitude and longitude values\n\n# libraries for displaying images\nfrom IPython.display import Image \nfrom IPython.core.display import HTML \n    \n# tranforming json file into a pandas dataframe library\nfrom pandas.io.json import json_normalize\n\nimport time\nimport folium # plotting library\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', 500)\n\n#libraries for Data preprocess\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import Normalizer\n\n#librarie for ML Clustring\nfrom sklearn.cluster import KMeans","25bc5b24":"# Read Toronto neighbourhood profiles 2016 Data as DataFrame\ndf = pd.read_csv('..\/input\/neighbourhood-profiles-2016-csv.csv')\nprint(df.shape)\ndf.head()","fd1b69f8":"# create a new dataframe that contains the df swivel with the demographic characteristics in features, and the meighborhoods in index\n\ndf_final = pd.DataFrame(columns = df['Characteristic'] + ' ' + df['Topic'], index = df.columns)\n\nfor index, row in df.iterrows():\n    for x in df_final.columns:\n        if (row['Characteristic'] + ' ' + row['Topic']) == x:\n            df_final[x] = row\n\n# delete unnecessary fields and treat null values\ndf_final.drop(['_id', 'Category', 'Topic', 'Data Source'], inplace = True)\nindexe_nan = df_final.isna().sum().to_frame()[df_final.isna().sum().to_frame()[0] >= 140].index\ndf_final.drop(indexe_nan, axis = 1, inplace = True)\ndf_final.columns = df_final.columns.str.strip()\n\n# Suppression of duplications\ndf_final = df_final.loc[:,~df_final.columns.duplicated()]\n\ndf_final.drop(['Characteristic', 'City of Toronto'], axis = 0 , inplace = True)\n\n# Converting character strings to float and int\ndf_final= df_final.apply(lambda x: x.str.replace(',',''))\ndf_final=df_final.apply(lambda x: x.str.replace('%',''))\n\nfor col in df_final.columns:\n    if col != 'TSNS2020 Designation Neighbourhood Information' :\n        df_final[col] = df_final[col].astype(float)\nprint(df_final.shape)\ndf_final.head()","ddd7863b":"# For each neighborhood I assign its coordinates.\n\n# geolocator does not recognize all the nominations of the neighbor hood, \n# for that I had to look for the longitudes and latitudes of these neighborhoods unknown by \n# the geolocator on wikipedia and I left him the rest of the neighborhoods that he recognizes.\n\nfor index, row in df_final.iterrows():\n    if index == 'Agincourt South-Malvern West' :\n        df_final.loc[index, 'latitude'] =  43.7925\n        df_final.loc[index, 'longitude'] =  -79.283889\n    elif index == 'Bedford Park-Nortown' :\n        df_final.loc[index, 'latitude'] =  43.73\n        df_final.loc[index, 'longitude'] =  -79.411\n    elif index == 'Cabbagetown-South St. James Town' :\n        df_final.loc[index, 'latitude'] =  43.620543\n        df_final.loc[index, 'longitude'] =  -79.47793\n    elif index == 'Downsview-Roding-CFB' :\n        df_final.loc[index, 'latitude'] =  43.732222\n        df_final.loc[index, 'longitude'] =  -79.493333\n    elif index == 'Mimico (includes Humber Bay Shores)' :\n        df_final.loc[index, 'latitude'] =  43.612778\n        df_final.loc[index, 'longitude'] =  -79.494167\n    elif index == 'Beechborough-Greenbrook' :\n        df_final.loc[index, 'latitude'] =  43.6943\n        df_final.loc[index, 'longitude'] =  -79.4748\n    elif index == 'Birchcliffe-Cliffside' :\n        df_final.loc[index, 'latitude'] =  43.7089\n        df_final.loc[index, 'longitude'] =  -79.2485\n    elif index == 'Bridle Path-Sunnybrook-York Mills' :\n        df_final.loc[index, 'latitude'] =  43.7359\n        df_final.loc[index, 'longitude'] =  -79.3719\n    elif index == 'Brookhaven-Amesbury' :\n        df_final.loc[index, 'latitude'] =  43.6969\n        df_final.loc[index, 'longitude'] =  -79.4938\n    elif index == 'Clairlea-Birchmount' :\n        df_final.loc[index, 'latitude'] =  43.7162\n        df_final.loc[index, 'longitude'] =  -79.2828\n    elif index == 'Dovercourt-Wallace Emerson-Junction' :\n        df_final.loc[index, 'latitude'] =  43.663\n        df_final.loc[index, 'longitude'] =  -79.441\n    elif index == 'Eringate-Centennial-West Deane' :\n        df_final.loc[index, 'latitude'] =  43.6599\n        df_final.loc[index, 'longitude'] =  -79.5833\n    elif index == 'Greenwood-Coxwell' :\n        df_final.loc[index, 'latitude'] =  43.6721\n        df_final.loc[index, 'longitude'] =  -79.3228\n    elif index == 'Humbermede' :\n        df_final.loc[index, 'latitude'] =  43.746297\n        df_final.loc[index, 'longitude'] =  -79.541186\n    elif index == 'Islington-City Centre West' :\n        df_final.loc[index, 'latitude'] =  43.6309\n        df_final.loc[index, 'longitude'] =  -79.5435\n    elif index == 'Leaside-Bennington' :\n        df_final.loc[index, 'latitude'] =  43.708\n        df_final.loc[index, 'longitude'] =  -79.368\n    elif index == 'Mount Olive-Silverstone-Jamestown' :\n        df_final.loc[index, 'latitude'] =  43.739722\n        df_final.loc[index, 'longitude'] =  -79.580278\n    elif index == 'Parkwoods-Donalda' :\n        df_final.loc[index, 'latitude'] =  43.7528\n        df_final.loc[index, 'longitude'] =  -79.3264\n    elif index == 'Playter Estates-Danforth' :\n        df_final.loc[index, 'latitude'] =  43.68\n        df_final.loc[index, 'longitude'] =  -79.349\n    elif index == 'Princess-Rosethorn' :\n        df_final.loc[index, 'latitude'] =  43.6700\n        df_final.loc[index, 'longitude'] =  -79.5477\n    elif index == 'Rockcliffe-Smythe' :\n        df_final.loc[index, 'latitude'] =  43.6769\n        df_final.loc[index, 'longitude'] =  -79.4894\n    elif index == 'St.Andrew-Windfields' :\n        df_final.loc[index, 'latitude'] =  43.7548\n        df_final.loc[index, 'longitude'] =  -79.3855\n    elif index == \"Tam O'Shanter-Sullivan\" :\n        df_final.loc[index, 'latitude'] =  43.7811\n        df_final.loc[index, 'longitude'] =  -79.2981\n    elif index == \"Thistletown-Beaumond Heights\" :\n        df_final.loc[index, 'latitude'] =  43.737222\n        df_final.loc[index, 'longitude'] =  -79.565278\n    elif index == \"Westminster-Branson\" :\n        df_final.loc[index, 'latitude'] =  43.7856\n        df_final.loc[index, 'longitude'] =  -79.4511\n    elif index == \"Wexford\/Maryvale\" :\n        df_final.loc[index, 'latitude'] =  43.7613\n        df_final.loc[index, 'longitude'] =  -79.3008\n    elif index == \"Willowridge-Martingrove-Richview\" :\n        df_final.loc[index, 'latitude'] =  43.6762\n        df_final.loc[index, 'longitude'] =  -79.5705\n    elif index == \"Bay Street Corridor\" :\n        df_final.loc[index, 'latitude'] =  43.657291\n        df_final.loc[index, 'longitude'] =  -79.384302\n        \n        \n    elif index == \"Bathurst Manor\" :\n        df_final.loc[index, 'latitude'] =  43.7628\n        df_final.loc[index, 'longitude'] =  -79.4569\n    elif index == \"Bay Street Corridor\" :\n        df_final.loc[index, 'latitude'] =  43.7303\n        df_final.loc[index, 'longitude'] =  -79.384302\n    elif index == \"Bedford\" :\n        df_final.loc[index, 'latitude'] =  43.7628\n        df_final.loc[index, 'longitude'] =  -79.4114\n    elif index == \"Black Creek\" :\n        df_final.loc[index, 'latitude'] =  43.669444\n        df_final.loc[index, 'longitude'] =  -79.511389\n    elif index == \"Briar Hill-Belgravia\" :\n        df_final.loc[index, 'latitude'] =  43.7037\n        df_final.loc[index, 'longitude'] =  -79.4524\n    elif index == \"Forest Hill South\" :\n        df_final.loc[index, 'latitude'] =  43.6932\n        df_final.loc[index, 'longitude'] =  -79.4126\n\n    elif index == \"Glenfield-Jane Heights\" :\n        df_final.loc[index, 'latitude'] =  43.757222\n        df_final.loc[index, 'longitude'] =  -79.517778\n\n    elif index == \"Junction Area\" :\n        df_final.loc[index, 'latitude'] =  43.665556\n        df_final.loc[index, 'longitude'] =  -79.464444\n    elif index == \"Kennedy Park\" :\n        df_final.loc[index, 'latitude'] =  43.716667\n        df_final.loc[index, 'longitude'] =  -79.259722\n\n    elif index == \"Kingsway South\" :\n        df_final.loc[index, 'latitude'] =  43.6527\n        df_final.loc[index, 'longitude'] =  -79.5072\n\n    elif index == \"Lambton Baby Point\" :\n        df_final.loc[index, 'latitude'] =  43.6575\n        df_final.loc[index, 'longitude'] =  -79.4925\n\n    elif index == \"Malvern\" :\n        df_final.loc[index, 'latitude'] =  43.811667\n        df_final.loc[index, 'longitude'] =  -79.231111\n\n    elif index == \"Markland Wood\" :\n        df_final.loc[index, 'latitude'] =  43.6336\n        df_final.loc[index, 'longitude'] =  -79.5708\n\n    elif index == \"Milliken\" :\n        df_final.loc[index, 'latitude'] =  43.825833\n        df_final.loc[index, 'longitude'] =  -79.300833\n\n    elif index == \"Morningside\" :\n        df_final.loc[index, 'latitude'] =  43.787\n        df_final.loc[index, 'longitude'] =  -79.206\n\n    elif index == \"Roncesvalles\" :\n        df_final.loc[index, 'latitude'] =  43.6463\n        df_final.loc[index, 'longitude'] =  -79.4491\n\n    elif index == \"Rouge\" :\n        df_final.loc[index, 'latitude'] =  43.820833\n        df_final.loc[index, 'longitude'] =  -79.206111\n\n    elif index == \"Rustic\" :\n        df_final.loc[index, 'latitude'] =  43.713\n        df_final.loc[index, 'longitude'] =  -79.489\n\n    elif index == \"South Parkdale\" :\n        df_final.loc[index, 'latitude'] =  43.640454\n        df_final.loc[index, 'longitude'] =  -79.436731\n\n\n    elif index == \"South Riverdale\" :\n        df_final.loc[index, 'latitude'] =  43.66775\n        df_final.loc[index, 'longitude'] =  -79.34961\n\n    elif index == \"Stonegate-Queensway\" :\n        df_final.loc[index, 'latitude'] =  43.630278\n        df_final.loc[index, 'longitude'] =  -79.484167\n\n    elif index == \"University\" :\n        df_final.loc[index, 'latitude'] =  43.661667\n        df_final.loc[index, 'longitude'] =  -79.395\n\n    elif index == \"Waterfront Communities-The Island\" :\n        df_final.loc[index, 'latitude'] =  43.620833\n        df_final.loc[index, 'longitude'] =  -79.378611\n\n    elif index == \"West Humber-Clairville\" :\n        df_final.loc[index, 'latitude'] =  43.742\n        df_final.loc[index, 'longitude'] =  -79.617\n\n    elif index == \"Weston\" :\n        df_final.loc[index, 'latitude'] =  43.700989\n        df_final.loc[index, 'longitude'] =  -79.5197\n\n    elif index == \"Wychwood\" :\n        df_final.loc[index, 'latitude'] =  43.68\n        df_final.loc[index, 'longitude'] =  -79.423611\n        \n        \n    elif index == 'Blake-Jones' :\n        df_final.loc[index, 'latitude'] =  43.66775\n        df_final.loc[index, 'longitude'] =  -79.34961\n    elif index == 'Clanton Park' :\n        df_final.loc[index, 'latitude'] =  43.75\n        df_final.loc[index, 'longitude'] =  -79.45\n    elif index == 'Mount Pleasant East' :\n        df_final.loc[index, 'latitude'] =  43.696351\n        df_final.loc[index, 'longitude'] =  -79.384882\n    elif index == 'Mount Pleasant West' :\n        df_final.loc[index, 'latitude'] =  43.696351\n        df_final.loc[index, 'longitude'] =  -79.384882\n    elif index == 'North Riverdale' :\n        df_final.loc[index, 'latitude'] =  43.66775\n        df_final.loc[index, 'longitude'] =  -79.34961\n    elif index == 'Oakwood Village' :\n        df_final.loc[index, 'latitude'] =  43.6925\n        df_final.loc[index, 'longitude'] =  -79.440833\n    elif index == 'Danforth' :\n        df_final.loc[index, 'latitude'] =  43.68\n        df_final.loc[index, 'longitude'] =   -79.349\n    elif index == 'Kensington-Chinatown' :\n        df_final.loc[index, 'latitude'] =  43.6529\n        df_final.loc[index, 'longitude'] =  -79.3980\n    elif index == 'Woburn' :\n        df_final.loc[index, 'latitude'] =  43.766667\n        df_final.loc[index, 'longitude'] =  -79.227778\n    elif index == 'Weston-Pelham Park' :\n        df_final.loc[index, 'latitude'] =  43.672\n        df_final.loc[index, 'longitude'] =  -79.457\n    elif index == 'Mount Pleasant West' :\n        df_final.loc[index, 'latitude'] =  43.672\n        df_final.loc[index, 'longitude'] =  -79.457\n    elif index == 'Lawrence Park South' :\n        df_final.loc[index, 'latitude'] =  43.722\n        df_final.loc[index, 'longitude'] =  -79.388\n    elif index == 'York University Heights' :\n        df_final.loc[index, 'latitude'] =  43.762\n        df_final.loc[index, 'longitude'] =  -79.5\n    elif index == 'Long Branch' :\n        df_final.loc[index, 'latitude'] =  43.762\n        df_final.loc[index, 'longitude'] =  -79.5\n    elif index == 'Lawrence Park North' :\n        df_final.loc[index, 'latitude'] =  43.722\n        df_final.loc[index, 'longitude'] =  -79.388\n    elif index == 'Lansing-Westgate' :\n        df_final.loc[index, 'latitude'] =  43.757\n        df_final.loc[index, 'longitude'] =  -79.417\n    elif index == 'Forest Hill North' :\n        df_final.loc[index, 'latitude'] =  43.7\n        df_final.loc[index, 'longitude'] =  -79.416667\n    elif index == 'Niagara' :\n        df_final.loc[index, 'latitude'] =  43.643\n        df_final.loc[index, 'longitude'] =  -79.408\n\n    else :\n        address = index\n#         print(str(i) +' ' + str(index))\n        geolocator = Nominatim(user_agent=\"foursquare_agent\")\n        location = geolocator.geocode(address, timeout=15)\n        latitude = location.latitude\n        longitude = location.longitude\n        df_final.loc[index, 'latitude'] =  latitude\n        df_final.loc[index, 'longitude'] =  longitude\nprint('Done!')      \ndf_final[['latitude', 'longitude']].head(10)","3bfcb034":"# Subsequently, using the foursquare API I look for all the sites that are within 1 mile \n# (1.6Km) from the neighborhoods coordinates obtained with the geolocator \n# and I generate a Data Frame that lists all these sites.\n\nCLIENT_ID = 'AEHGFLPSQSKF4AAG4OVSJHIPSK3MKEGADCYDVLT5UTXCZBJY' \nCLIENT_SECRET = 'LF0DLT1CGXR4KTMKGWHHVZM1XWUDTHUAPA4LVIE1ASHFU1OO' \nVERSION = '20180604'\nLIMIT = 100\n\ni = 0\nsearch_query = ''\nradius = 1610\n\nfor index, row in df_final.iterrows():\n    \n    url = 'https:\/\/api.foursquare.com\/v2\/venues\/search?client_id={}&client_secret={}&ll={},{}&v={}&query={}&radius={}&limit={}'.format(CLIENT_ID, CLIENT_SECRET, row.latitude, row.longitude, VERSION, search_query, radius, LIMIT)\n    results = requests.get(url).json()\n    results\n\n    venues = results['response']['venues']\n\n    dataframe = json_normalize(venues)\n    \n    if dataframe.empty == False :\n\n        filtered_columns = ['name', 'categories'] + [col for col in dataframe.columns if col.startswith('location.')] + ['id']\n        dataframe_filtered = dataframe.loc[:, filtered_columns]\n\n        def get_category_type(row):\n            try:\n                categories_list = row['categories']\n            except:\n                categories_list = row['venue.categories']\n\n            if len(categories_list) == 0:\n                return None\n            else:\n                return categories_list[0]['name']\n\n        dataframe_filtered['categories'] = dataframe_filtered.apply(get_category_type, axis=1)\n\n        dataframe_filtered.columns = [column.split('.')[-1] for column in dataframe_filtered.columns]\n        if i == 0 :\n            dataframe_filtered['Neighborhoods'] = index\n            df_fc = dataframe_filtered\n        else:\n            dataframe_filtered['Neighborhoods'] = index\n            df_fc = pd.concat([df_fc, dataframe_filtered], ignore_index=True)\n        i = i+1\nprint('Done!')\nprint(df_fc.shape)\ndf_fc.head(10)","2cd0c181":"# Now I display the neighborhood marker and their sites\n\nvenues_map = folium.Map(location=[43.6532, -79.3832], zoom_start=5) # generate map centred around the Conrad Hotel\n\nlabel= ''\nfolium.CircleMarker(\n    [latitude, longitude],\n    radius=10,\n    color='red',\n    popup='Toronto',\n    fill = True,\n    fill_color = 'red',\n    fill_opacity = 0.6\n).add_to(venues_map)\n\nlabel = ''\nfor lat, lng,  in zip(df_fc.lat, df_fc.lng):\n    folium.CircleMarker(\n        [lat, lng],\n        radius=1,\n        color='blue',\n        popup=label ,\n        fill = True,\n        fill_color='blue',\n        fill_opacity=0.1\n    ).add_to(venues_map)\nfor lat, lng,  in zip(df_final.latitude, df_final.longitude):\n    folium.CircleMarker(\n        [lat, lng],\n        radius=5,\n        color='yellow',\n        popup=label ,\n        fill = True,\n        fill_color='yellow',\n        fill_opacity=0.6,\n        clustered_marker = True\n    ).add_to(venues_map)\n\n# display map\nprint('Done!')\nvenues_map\n# venues_map.save('map.html')","ee4c58b9":"# for analysis purposes I merge neighborhood profile data with site data for each neighborhood\n# I keep that columns necessary for viewing\ndf_venues = df_final.merge(df_fc, left_on=df_final.index, right_on='Neighborhoods', how  = 'left')\ndf_venues.drop(['latitude','longitude','address','cc','city','country','Neighborhoods', 'crossStreet','distance','formattedAddress','id','labeledLatLngs','lat','lng','name','neighborhood','postalCode','state'], axis = 1, inplace = True)\nprint(df_venues.shape)\ndf_venues.head()","28baf066":"# I delete sites with an unknown category and keep the restaurant category\n# I apply hot encoding on the result\ndf_venues.dropna(inplace = True)\ndf_restaurent = df_venues[df_venues['categories'].str.contains('Restaurant', case = False)]\ndf_restaurent_dum = pd.get_dummies(df_restaurent)\nprint(df_restaurent_dum.shape)\ndf_restaurent_dum.head()","e93b255a":"%matplotlib inline\n# I calculate the correlation between the features and plot the correlation between all the featires\n# and a specific category of restoration.\ncorrelation_restaurant = df_restaurent_dum.corr()","b703d8df":"# categories_Afghan Restaurant correlation\nsns.set(rc={'figure.figsize':(40,30), \"axes.labelsize\":100})\nsns.set(font_scale = 3)  \ncorr = correlation_restaurant['categories_Afghan Restaurant'].to_frame().sort_values(by= 'categories_Afghan Restaurant', ascending = False).iloc[1:50,:]\nsns.barplot(x=corr['categories_Afghan Restaurant'], y=corr.index)\n# as we can see Ganda, gush tic and Urdu are the languages most present at the location of the Afghan restaurants,\n# it is logical because these languages are spoken in the east of Africa and south east of Asia.","685fd726":"# categories_Halal Restaurant correlation\ncorr = correlation_restaurant['categories_Halal Restaurant'].to_frame().sort_values(by= 'categories_Halal Restaurant', ascending = False).iloc[1:50,:]\nsns.barplot(x=corr['categories_Halal Restaurant'], y=corr.index)\n# the languages that stands out for the hallal restaurant are Sindhi,\n# Creol and Swampy Creed. the first is an Afghan language which explains the Muslim community, \n# the second is a street language a little distorted and the trixiemme is a language of northern canada","0b1a819e":"# categories_Jewish Restaurant correlation\ncorr = correlation_restaurant['categories_Jewish Restaurant'].to_frame().sort_values(by= 'categories_Jewish Restaurant', ascending = False).iloc[1:50,:]\nsns.barplot(x=corr['categories_Jewish Restaurant'], y=corr.index)\n# Peul and Bavarian ethnic are the most present in the neighborhoods with the most Jewish restaurant\n# and the average income and also high","e84a3122":"# count the number of categories of restaurent most present in canada\ndf_fc['categories'] = df_fc['categories'].fillna(value='NoN')\n# df_fc.dropna(inplace = True)\ndf_fc['categories'].value_counts().to_frame().head(50).plot(kind= 'barh')\n# The value NoN indicates no category for the site found by foursquare and that is generally present. H\n# owever, Salon \/ Barbershop and Park are most present in Toronto","9b642587":"df_fc[df_fc['categories'].str.contains('Restaurant')]['categories'].value_counts().to_frame().head(50).plot(kind= 'barh')\n# we can notice that the chinese restaurant, the fast food restaurant and the restaurants without specifity \n# are the categories of restaurents most spread to torornto","8bba5a0b":"# To perform a clustering and find out which are the most favorable neighborhoods to open a restaurant,\n# I had to choose some features that can foster income in the area.\n\n# Population\n# Population density\n# Persons living alone (per cent)\n# Total income: Average\n# Non-permanent residents Immigran\n# Youth (15-24 years)\n# Working Age (25-54 years)\n# females\n# Males\n# After-tax income\n# langitude (to save the location)\n# latitude (to save the location)\n\ndf_Pop = df_final[['Population, 2016 Population and dwellings','Population density per square kilometre Population and dwellings', 'Persons living alone (per cent) Family characteristics of adults','Total income: Average amount ($) Income sources', 'Non-permanent residents Immigrant status and period of immigration', 'Youth (15-24 years) Age characteristics', 'Working Age (25-54 years) Age characteristics','Total - Population aged 15 years and over by Labour force status (Females) - 25% sample data Labour force status','Total - Population aged 15 years and over by Labour force status (Males) - 25% sample data Labour force status','After-tax income: Population with an amount Income sources','latitude', 'longitude']]\ndf_Pop.columns = ['Population','Population density', 'Persons living alone (per cent)', 'Total income: Average', 'Non-permanent residents Immigran', 'Youth (15-24 years)', 'Working Age (25-54 years)', 'females', 'Males', 'After-tax income','langitude', 'latitude']\nprint(df_Pop.shape)\ndf_Pop.head()","81dc24c5":"# normalisation de ces features \nscaler = Normalizer()\ndf_Pop_norm = scaler.fit_transform(df_Pop[['Population','Population density', 'Persons living alone (per cent)', 'Total income: Average', 'Non-permanent residents Immigran', 'Youth (15-24 years)', 'Working Age (25-54 years)', 'females', 'Males', 'After-tax income']])\npd.DataFrame(df_Pop_norm).head()","d69f54cb":"# calculates the score of each neighborhood\nscore = np.sum(df_Pop_norm, axis=1)\ndf_Pop = df_Pop.copy()\ndf_Pop.loc[:,'score'] = score\ndf_Pop.head()","58888160":"# keep the 50 best neighborhoods according to the scor, then join the result with the sites available in these neighborhoods \n# by keeping that restaurants.\ndf_Pop = df_Pop.sort_values(by = 'score', ascending = False).head(50)\ndf_venues = df_Pop.merge(df_fc[df_fc['categories'].str.contains('Restaurant|NoN')], left_on=df_Pop.index, right_on='Neighborhoods', how  = 'left')\nprint(df_venues.shape)\ndf_venues.head()","666b1c59":"# count the number of pat neighborhood restaurants and add it as a new feature for the training dataset.\n# I removed a 1 for the values NoN, so that they are not counted as a restaurant\ndf_Pop.loc[:,'Number_of_Restaurant'] = df_venues.groupby(['Neighborhoods']).count()['Population'].to_frame()['Population']\ndf_Pop['Number_of_Restaurant'] = df_Pop['Number_of_Restaurant']-1\n(df_Pop.shape)\ndf_Pop.head()","2919c33c":"# Fit the K Means on the learning data and assign a label to each neighborhood\nX = df_Pop[['langitude', 'latitude', 'score','Number_of_Restaurant']]\nscaler = StandardScaler()\nX= scaler.fit_transform(X)\nKM = KMeans(n_clusters=4, random_state=0).fit(X)\ndf_Pop.loc[:,'labels'] = KM.labels_","f3b9fc8f":"# assign a color to each cluster and display it on the map\n\ncolors = ['red', 'blue', 'green', 'yellow']\n\nthis_map = folium.Map(prefer_canvas=True)\n\ndef plotDot(point):\n    '''input: series that contains a numeric named latitude and a numeric named longitude\n    this function creates a CircleMarker and adds it to your this_map'''\n    folium.CircleMarker(location=[point.langitude, point.latitude],\n                        radius=1,\n                        color = np.array(colors)[int(point.labels)],\n                        label = point.index,\n                        weight=12).add_to(this_map)\n\n#use df.apply(,axis=1) to \"iterate\" through every row in your dataframe\ndf_Pop.apply(plotDot, axis = 1)\n\n\n#Set the zoom to the maximum possible\nthis_map.fit_bounds(this_map.get_bounds())\n\n#Save the map to an HTML file\n# this_map.save('html_map_output\/simple_dot_plot.html')\n\nthis_map","aec221f2":"print(df_Pop[df_Pop.labels == 0 ].shape)\nprint('average Number_of_Restaurant cluster 1 : '+ str(df_Pop[df_Pop.labels == 0 ]['Number_of_Restaurant'].mean()))\nprint('average score cluster 1 : ' + str(df_Pop[df_Pop.labels == 0 ]['score'].mean()))\ndf_Pop[df_Pop.labels == 0 ].head()","4af800d5":"print(df_Pop[df_Pop.labels == 1 ].shape)\nprint('average Number_of_Restaurant cluster 2 : '+ str(df_Pop[df_Pop.labels == 1 ]['Number_of_Restaurant'].mean()))\nprint('average score cluster 2 : '+ str(df_Pop[df_Pop.labels == 1 ]['score'].mean()))\ndf_Pop[df_Pop.labels == 1 ].head()","48da8c1b":"print(df_Pop[df_Pop.labels == 2 ].shape)\nprint('average Number_of_Restaurant cluster 3 : '+ str(df_Pop[df_Pop.labels == 2 ]['Number_of_Restaurant'].mean()))\nprint('average score cluster 3 : '+ str(df_Pop[df_Pop.labels == 2 ]['score'].mean()))\ndf_Pop[df_Pop.labels == 2 ].head()","9104aba5":"print(df_Pop[df_Pop.labels == 3 ].shape)\nprint('average Number_of_Restaurant cluster 4 : ' +str(df_Pop[df_Pop.labels == 3 ]['Number_of_Restaurant'].mean()))\nprint('average score cluster 4 : '+ str(df_Pop[df_Pop.labels == 3 ]['score'].mean()))\ndf_Pop[df_Pop.labels == 3 ].head()","57eb2d5c":"# I scrap WikiPedia to associate a borough to each neighborhood\n\nurl=\"https:\/\/en.wikipedia.org\/wiki\/List_of_city-designated_neighbourhoods_in_Toronto\"\n\npage = requests.get(url)\n\nsoup = BeautifulSoup(page.content, 'lxml')\n\ntbl = soup.find('table',{'class':'wikitable sortable'})\ndf_borough = pd.read_html(str(tbl))[0]\n\nprint(df_borough.shape)\ndf_borough.head(5)","0fb95c07":"df_result = df_Pop.merge(df_borough[['City-designated area', 'Former city\/borough']], left_on=df_Pop.index, right_on='City-designated area', how  = 'left')\ndf_result.index = df_Pop.index\nprint(df_result.shape)\ndf_result.head()","9cda1162":"# Importing library","14235de1":"# Importing data","a643c431":"# Clustring","abe99c1b":"# Data Visualisation","49867b03":"# The Battle of the Neighborhood \n\n## 1. Introduction & Business Problem \n\n### 1.1\tProblem Background\n\nThe city of Toronto is the most populated city in Canada, it is the capital of the province of Ontario and home to more than 2.7 million people, making it the fourth most populated city in America. North. In the 20th century, the city experienced significant industrial development and subsequently became the English-speaking banking, financial and commercial heart of Canada and was named in the 21st century as one of the most important financial centers in the world thanks to his medical research, his film production, technology and computer science, the arts, education and many more.\n\nWith its diverse cultural institutions, including many museums and art galleries, festivals and public events, and many more, Toronto becomes America's most visited city.\n\nThese important tourist visits generate a very high competitive on the market. As it is a very developed city, so is the business case. That's why any new investment or company that wants to move to Toronto needs to use market-based insights that will help them understand the business environment, allowing for a strategy to reduce risk. And increase the return on investment.\n\n### 1.2\tProblem Description\n\nA restaurant is a business establishment that serves prepared meals and beverages on the premises in exchange for a payment.\n\nThe food is usually prepared by a chef. The term covers a multiplicity of places and a great diversity of types of cuisine, both local and foreign. The restaurants are sometimes the device reserved for serving meals within a larger entity (hotel, university, airport ...), we speak then of collective restaurant as opposed to the kitchen site. They can also be associated with a catering or grocery business. The restaurant offers more or less comfort conditions, and the restaurant is called \"fast\" when the customer can order and eat in minutes or tens of minutes, possibly standing.\n\nWhile searching on the internet I found that Toronto has several types of restaurants:\n\u2022\tSpecific theme restaurants such as: Greek restaurants, French restaurants, Halal restaurants, Jewish restaurants and many more.\n\u2022\t2-there are restaurants in hotels like the Drake Hotel.\n\u2022\tThere are pizzerias also like Pizza Nova or Pizzayolo.\n\u2022\t4-bistros like Bistro 990\n\u2022\t5- Global restaurants like Big smoke Burger or fan's restaurant.\n\u2022\t6- Restoring bars like the Rivoli\n\nAll this leads to a competitive market that requires distinguishing which are the criteria of location to choose to optimize income:\n\u2022\tPresence of supplier nearby?\n\u2022\tThe demography of Toronto.\n\u2022\tNumber of competitors nearby\n\u2022\tThe demography of the neighborhood.\n\u2022\tThe contribution of the people of Toronto.\n\u2022\tThe list can continue ...\nThis analysis allows an investor to be able to choose an optimal location for his business and can use this analysis to move or open an extension of his business.","f83ee121":"## Discuss the Results\n\nKmeans returned 4 clusters and each cluster has its own characteristics:\n\u2022\tCluster 1 in red: groups together neighborhoods with a relatively low score and with a relatively low restaurant count in its perimeter\naverage Number_of_Restaurant cluster 1 : 12.0\naverage score cluster 1 : 2.27\n\u2022\tCluster 2 in blue: groups neighborhoods with a relatively high score and a relatively high number of restaurants also in its perimeter\naverage Number_of_Restaurant cluster 2 : 18.8\naverage score cluster 2 : 2.39\n\n\u2022\tCluster 3 in green : groups neighborhoods with a relatively low score and a relatively high number of restaurants also in its perimeter\naverage Number_of_Restaurant cluster 3 : 19.64\naverage score cluster 3 : 2.30\n\u2022\tCluster 4 in yellow : groups neighborhoods with a relatively high score and a relatively low number of restaurants also in its perimeter\naverage Number_of_Restaurant cluster 4 : 13.692307692307692\naverage score cluster 4 : 2.4528401540266525\n\n## Recommendations \n\nThe recommendations I bring for a restaurant opening after all this project:\n\n\u2022\tThe criteria for opening a restaurant depend partly on the category of restaurant, if you want to open a Chinese restaurant, you target neighborhoods with a Chinese population quite present, as well as for an Italian restaurant or other.\n\n\u2022\tThe Chinese restaurants and the fast foods are the most present by conceiving the competition is rough so it is preferable to choose another category.\n\n\u2022\tI recommend the East Willowdale, Mount Olive-Silverstone-Jamestown, Waterfront Communities-The Island and Dovercourt-Wallace Emerson-Junction neighborhoods to open a restaurant because they are part of a cluster that has the fewest restaurants so less competition and they have a high demographic score so it is favorable to a high turnover.\n\n## Conclusion \n\nwe can rely on the results quoted before even if it remains imprecise and that because of the lack of data provided by the foursquare API, a premium account will give us the possibility of seeing the note of the people and it will facilitate us the work better, by using a far-off regression we will get the right selection of a neighborhood and the result will be more accurate.\nAlso later we will consider more data to reinforce our choice like, the trade surrounding the restaurants, the crime scene of neighborhoods and others. Thanx =)\n"}}