{"cell_type":{"35830221":"code","2f9a42a1":"code","e8a84153":"code","8671a78a":"code","d67d924a":"code","1e7e0efc":"code","f4b44582":"code","c6c6f44e":"code","7de9d82f":"code","c9bbf2c0":"code","4967683b":"code","51a5b0a4":"code","353b44ad":"code","b2023c2a":"code","7deda554":"code","69f348bc":"code","be29d3f7":"code","9b659621":"code","15d81dda":"code","31272078":"code","92cf7f0e":"code","89eb0217":"code","a3eb8c97":"code","d51322e5":"code","0105f731":"code","3743849a":"code","6ccb853f":"code","244a81ec":"code","5aef43d5":"code","11a89598":"code","63e217ab":"code","7ac6180d":"code","f0e523de":"code","f9c2fafc":"code","1e8a4e76":"code","a52265b8":"code","32a0e7e3":"code","76ca0d78":"code","ad802c64":"markdown","2cc45014":"markdown","e458213e":"markdown","be7614dd":"markdown","514127d8":"markdown","4e962efa":"markdown","a9fe935a":"markdown","69c321f7":"markdown","e35ac3bf":"markdown"},"source":{"35830221":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","2f9a42a1":"data = pd.read_csv('..\/input\/mushroom-classification\/mushrooms.csv',na_values = '?')","e8a84153":"data.head()","8671a78a":"data.info()","d67d924a":"data.isnull().sum()","1e7e0efc":"#Here I'm dropping values equivalent to '?'\ndata = data.dropna()","f4b44582":"#We use Label Encoder and Ordinal Encoder for Feature Processing\n\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.preprocessing import OrdinalEncoder","c6c6f44e":"ordinal_enc = OrdinalEncoder()\nlabel_enc = LabelEncoder()","7de9d82f":"label_cat = data['class']","c9bbf2c0":"label_class = label_enc.fit_transform(label_cat).reshape(-1,1)","4967683b":"ord_cat = data.iloc[:,1:]","51a5b0a4":"ord_cat.columns","353b44ad":"ordinal_class = ordinal_enc.fit_transform(ord_cat)","b2023c2a":"ordinal_class[0:5]","7deda554":"NewData1 = pd.DataFrame(ordinal_class,columns = ord_cat.columns)","69f348bc":"NewData1.head()","be29d3f7":"NewData2 = pd.DataFrame(label_class,columns = [\"class\"])","9b659621":"NewData2.head()","15d81dda":"NewData = pd.concat([NewData1,NewData2],axis=1)","31272078":"NewData.head()","92cf7f0e":"NewData['class'] = NewData['class'].astype(float)","89eb0217":"NewData.head()","a3eb8c97":"NewData.columns","d51322e5":"x=NewData.iloc[:,:-1].values","0105f731":"y = NewData['class'].values","3743849a":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,random_state=0)","6ccb853f":"from sklearn.ensemble import RandomForestClassifier\nclf = RandomForestClassifier(n_estimators=200)\nclf.fit(x_train,y_train)","244a81ec":"clf.score(x_test,y_test)","5aef43d5":"from sklearn.model_selection import cross_val_score\ncv_scores = cross_val_score(clf,x_train,y_train)","11a89598":"cv_scores","63e217ab":"from sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 10)","7ac6180d":"knn.fit(x_train,y_train)","f0e523de":"knn.score(x_test,y_test)","f9c2fafc":"cv_scores2 = cross_val_score(knn,x_train,y_train)","1e8a4e76":"cv_scores2","a52265b8":"from sklearn.metrics import plot_confusion_matrix","32a0e7e3":"plot_confusion_matrix(knn, x_test, y_test, cmap=\"Greens\", display_labels=np.asarray(data['class'].unique()))\nplt.title(\"K-Nearest Neighbours (KNN) Confusion Matrix\")\nplt.xlabel(\"Predicted Mushroom\")\nplt.ylabel(\"Actual Mushroom\")","76ca0d78":"plot_confusion_matrix(clf, x_test, y_test, cmap=\"Greens\", display_labels=np.asarray(data['class'].unique()))\nplt.title(\"Random Forest Classifier\")\nplt.xlabel(\"Predicted Mushroom\")\nplt.ylabel(\"Actual Mushroom\")","ad802c64":"# FEATURE PROCESSING\n \n##### Since our dataset consists of categorical values in the form of characters so we need to convert them into numerical form hence we are doing feature processing.","2cc45014":"# READING DATA\n\n#### NOTE - I took na_values = '?' because there is an attribute which we will se furthur which determines '?' as a category so I think this might be a garbage value because it is affecting the dataset hence I'm dropping these values from dataset","e458213e":"# KNeighbors Classifier\n","be7614dd":"## ACCURACY\n#### Here we can see that using kNeighbors Classifier we are getting an accuracy of almost 99%","514127d8":"\n### Accuracy Glitch\n\nAs we can see we are getting an accuracy of 100%.\nIn most of such situations there is a possibility of overfitting\nSo we will be checking the condition of overfitting furthur in our notebool","4e962efa":"## CONFUSION MATRIX FOR BETTER UNDERSTANDING OF OUR MODEL","a9fe935a":"### Now after we are done with the feature processing, we are making a parallel dataset for applying our machine learning models on them\n#### Our new dataset is a numerical dataset ","69c321f7":"# Splitting of data for training and testing","e35ac3bf":"# RANDOM FOREST CLASSIFIER\n\n##### Firstly we are using a Random forest Classifier for classification of mushrooms in our mashrooms.csv dataset"}}