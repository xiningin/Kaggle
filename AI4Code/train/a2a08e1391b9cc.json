{"cell_type":{"601eef73":"code","cac5cb2a":"code","054e10f4":"code","abccdb76":"code","86999c67":"code","368dea35":"code","bfeb4ce9":"code","f6c9ae88":"code","191cfddd":"code","2c6d195e":"code","a4d873a7":"code","a51b1fb6":"code","4d676d88":"code","b88a1bfa":"code","e9719831":"code","44f61ee1":"code","db443540":"code","cc76a327":"code","c3782a3e":"code","c4b445b7":"code","fcba1a82":"code","19ba2b27":"code","aeb9d573":"code","3de55825":"code","3d899522":"code","48a8cce5":"code","59c3a741":"code","ff95b264":"code","da0d684e":"code","bd184248":"code","f154c26a":"code","287a2b6a":"code","b34ab0a2":"code","de6a10e3":"markdown","898c3406":"markdown","0569293f":"markdown","2c31abb7":"markdown","a4d59823":"markdown","26501303":"markdown","2dde4b9b":"markdown","bae4ec10":"markdown","f39970bf":"markdown","f9efb3d4":"markdown","1e5a24d9":"markdown","53f3b704":"markdown","98e32af0":"markdown","e4aa6af0":"markdown","c29bf5ca":"markdown","21e57612":"markdown","8f8c0436":"markdown","8909daee":"markdown","4c5bb25c":"markdown","50b17d21":"markdown","88691a68":"markdown","f888da81":"markdown","045e4970":"markdown","3d046350":"markdown","2087a9c3":"markdown","32914e67":"markdown","a4194c72":"markdown","0067c663":"markdown","84ac200b":"markdown","fc7f91f8":"markdown","a07ce695":"markdown","cf5f2e9c":"markdown","18b61b75":"markdown"},"source":{"601eef73":"import pandas as pd\nfrom pandas.api.types import CategoricalDtype\n\nimport seaborn as sns\n\nimport plotly.express as px\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\ninit_notebook_mode(connected=True)\n\nimport cufflinks as cf\n\n# Importing Necessary Python Libraries.","cac5cb2a":"Oct_2020 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2020_10-divvy-tripdata.csv')\nNov_2020 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2020_11-divvy-tripdata.csv')\nDec_2020 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2020_12-divvy-tripdata.csv')\nJan_2021 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2021_01-divvy-tripdata.csv')\nFeb_2021 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2021_02-divvy-tripdata.csv')\nMar_2021 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2021_03-divvy-tripdata.csv')\nApl_2021 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2021_04-divvy-tripdata.csv')\nMay_2021 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2021_05-divvy-tripdata.csv')\nJun_2021 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2021_06-divvy-tripdata.csv')\nJul_2021 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2021_07-divvy-tripdata.csv')\nAug_2021 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2021_08-divvy-tripdata.csv')\nSep_2021 = pd.read_csv('..\/input\/cyclistics-historical-trip-data\/2021_09-divvy-tripdata.csv')\n\n# Importing 12 CSV files.","054e10f4":"df = pd.concat([Oct_2020,Nov_2020,Dec_2020,Jan_2021,Feb_2021,Mar_2021,Apl_2021,May_2021,Jun_2021,Jul_2021,Aug_2021,Sep_2021], ignore_index = True)\n\n# Joining 12 CSV's into 1 and naming it as \"df\".\n\ndf\n\n# Top 5 & bottom 5 rows of dataframe \"df\".","abccdb76":"df = df.drop(columns=['start_station_name', 'start_station_id', 'end_station_name', 'end_station_id', 'start_lat', 'start_lng', 'end_lat', 'end_lng'])\n\n# Deleting Columns which are not relevant for my analysis.\n\ndf.tail()","86999c67":"df['started_at'] = df['started_at'].astype('datetime64')\ndf['ended_at'] = df['ended_at'].astype('datetime64')\n\n# Coverting datatype of \"started_at\" & \"ended_at\" columns to \"datetime64\" type.","368dea35":"df['ride_length'] = (df['ended_at'] - df['started_at'])\/pd.Timedelta(minutes=1)\ndf['ride_length'] = df['ride_length'].astype('int32')\n\n# Creating New Column \"ride_length\" and changing its datatype to \"int32\"\n# In this column, each row contains the difference between \"starting time\" and \"ending time\" columns in minutes.\n\ndf.head()","bfeb4ce9":"df.sort_values(by = 'ride_length')\n\n# Sorting Values by \"ride_length\" column in Ascending order.","f6c9ae88":"# Its seen that many rows in some months contained negative values. \n# Such errors happened because the \"ending time\" is earlier than the \"starting time\" in their respective rows.\n\ndf[df['ride_length'] < 0].count()\n\n# Number of rows containing Negative Values.","191cfddd":"df[df['ride_length'] < 1].count()\n\n# Number of rows containing \"ride length\" less than \"1\" minute.","2c6d195e":"df = df[df['ride_length'] >= 1]\ndf = df.reset_index()\ndf = df.drop(columns=['index'])\n\n# Removing 80845 rows containing negative values & ride length less than 1 minute. \n# Any trips that were below 60 seconds in length are potentially false starts or users trying to re-dock a bike to ensure it was secure.\n\ndf","a4d873a7":"sns.boxplot(data = df, x ='member_casual', y = 'ride_length', order = ['member', 'casual'])\n\n# Boxplot of column \"Ride Length\" to see the distribution of data between Member and Casual Rider.","a51b1fb6":"df = df.astype({'ride_id':'string', 'rideable_type':'category', 'member_casual':'category'})\n\n# Coverting datatypes of each columns.\n\ndf.info()","4d676d88":"df.shape\n\n# Number of Rows and Columns.","b88a1bfa":"df.isna().sum()\n\n# Checking if Dataframe \"df\" contains any missing values.","e9719831":"df['ride_id'] = df['ride_id'].str.strip()\n\n# Removing leading and trailing whitespaces in column \"Ride Id\".\n\ndf[df['ride_id'].duplicated()]\n\n# View any duplicate rows.","44f61ee1":"df['year'] = df['started_at'].dt.year\n\ncats1 = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\ndf['month'] = df['started_at'].dt.month_name()\ndf['month'] = df['month'].astype(CategoricalDtype(categories=cats1, ordered=False))\n\ncats2 = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\ndf['day_of_week'] = df['started_at'].dt.day_name()\ndf['day_of_week'] = df['day_of_week'].astype(CategoricalDtype(categories=cats2, ordered=False))\n\ndf['hour'] = df['started_at'].dt.hour\n\ndf = df.astype({'year':'int16', 'hour':'int8'})\n\n# Creating new columns \"year\", \"month\", \"day_of_week\", \"hour\" and Converting datatypes.\n\ndf.head()","db443540":"df.info()","cc76a327":"pd.pivot_table(df,\n              index = 'member_casual',\n              values = 'ride_id',\n              aggfunc = ['count'],\n              margins = True,\n              margins_name = 'Total Count')","c3782a3e":"fig_1 = df.groupby('member_casual', as_index=False).count()\n\npx.bar(fig_1, y = 'member_casual', x = 'ride_id', range_x = [0,3000000],\n        color = 'member_casual', \n        height = 300,\n        text = 'ride_id', \n        labels = {'ride_id': 'No. of Rides', 'member_casual': 'Member\/Casual'},\n        hover_name = 'member_casual', hover_data = {'member_casual': False, 'month': False, 'ride_id': True}, \n        color_discrete_map = {'casual': '#FF934F', 'member': '#058ED9'})","c4b445b7":"df_pv1 = pd.pivot_table(df,\n              index = ['year', 'month', 'member_casual'],\n              values = 'ride_id',\n              aggfunc = ['count'],\n              margins = True,\n              margins_name = 'Total Count')\ndf_pv1 = df_pv1.loc[(df_pv1 != 0).any(axis=1)]\ndf_pv1","fcba1a82":"fig_2 = df.groupby(['year', 'month', 'member_casual'], as_index=False).count()\nfig_2 = fig_2[fig_2['ride_id'] != 0]\n\npx.line(fig_2, x = 'month', y = 'ride_id', range_y = [0,450000],\n        color = 'member_casual', \n        line_shape = 'spline',\n        markers=True, \n        labels = {'ride_id': 'No. of Rides', 'month': 'Months (Oct 2020 - Sep 2021)', 'member_casual': 'Member\/Casual'},\n        hover_name = 'member_casual', hover_data = {'member_casual': False, 'month': True, 'ride_id': True}, \n        color_discrete_map = {'casual': '#FF934F', 'member': '#058ED9'})","19ba2b27":"pd.pivot_table(df,\n              index = ['day_of_week', 'member_casual'],\n              values = 'ride_id',\n              aggfunc = ['count'],\n              margins = True,\n              margins_name = 'Total Count')","aeb9d573":"fig_3 = df.groupby(['day_of_week', 'member_casual'], as_index=False).count()\n\npx.line(fig_3, x = 'day_of_week', y = 'ride_id', range_y = [0,550000],\n        color = 'member_casual',  \n        line_shape = 'spline',\n        markers=True,\n        labels = {'ride_id': 'No. of Rides', 'day_of_week': 'Weekdays', 'member_casual': 'Member\/Casual'},\n        hover_name = 'member_casual', hover_data = {'member_casual': False, 'month': False, 'ride_id': True}, \n        color_discrete_map = {'casual': '#FF934F', 'member': '#058ED9'})","3de55825":"pd.pivot_table(df,\n              index = ['hour', 'member_casual'],\n              values = 'ride_id',\n              aggfunc = ['count'],\n              margins = True,\n              margins_name = 'Total Count')","3d899522":"fig_4 = df.groupby(['hour', 'member_casual'], as_index=False).count()\n\nfig_4a = px.line(fig_4, x = 'hour', y = 'ride_id', range_x = [0,23], range_y = [0,300000],\n                 color = 'member_casual',\n                 line_shape = 'spline',\n                 markers=True,\n                 labels = {'ride_id': 'No. of Rides', 'hour': '24 Hours', 'member_casual': 'Member\/Casual'},\n                 hover_name = 'member_casual', hover_data = {'member_casual': False, 'month': False, 'ride_id': True},\n                 color_discrete_map = {'casual': '#FF934F', 'member': '#058ED9'})\nfig_4a.update_xaxes(dtick=1)\nfig_4a.show()","48a8cce5":"pd.pivot_table(df,\n               index = 'member_casual',\n               values = ['ride_length'],\n               aggfunc = ['mean'],\n               margins = True,\n               margins_name = 'Total Ride Average')","59c3a741":"fig_4 = round(df.groupby('member_casual', as_index=False).mean(),2)\n\npx.bar(fig_4, y = 'member_casual', x = 'ride_length', range_x = [0,35],\n        color = 'member_casual', \n        height = 300,\n        text = 'ride_length', \n        labels = {'ride_length': 'Average Ride Length (minutes)', 'member_casual': 'Member\/Casual'},\n        hover_name = 'member_casual', hover_data = {'member_casual': False, 'ride_length': True}, \n        color_discrete_map = {'casual': '#FF934F', 'member': '#058ED9'})","ff95b264":"pd.pivot_table(df,\n               index = ['year', 'month', 'member_casual'],\n               values = ['ride_length'],\n               aggfunc = ['mean'],\n               margins = True,\n               margins_name = 'Total Ride Average')","da0d684e":"fig_5 = round(df.groupby(['year', 'month', 'member_casual'], as_index=False).mean(),2).dropna()\n\npx.bar(fig_5, x = 'month', y = 'ride_length',\n        color = 'member_casual',\n        barmode='group',\n        text = 'ride_length', \n        labels = {'ride_length': 'Average Ride Length (minutes)', 'member_casual': 'Member\/Casual', 'month': 'Months (Oct 2020 - Sep 2021)'},\n        hover_name = 'member_casual', hover_data = {'member_casual': False, 'ride_length': True}, \n        color_discrete_map = {'casual': '#FF934F', 'member': '#058ED9'})","bd184248":"pd.pivot_table(df,\n               index = ['day_of_week', 'member_casual'],\n               values = ['ride_length'],\n               aggfunc = ['mean'],\n               margins = True,\n               margins_name = 'Total Ride Average')","f154c26a":"fig_6 = round(df.groupby(['day_of_week', 'member_casual'], as_index=False).mean(),2)\n\npx.bar(fig_6, x = 'day_of_week', y = 'ride_length',\n        color = 'member_casual',\n        barmode='group',\n        text = 'ride_length', \n        labels = {'ride_length': 'Average Ride Length (minutes)', 'member_casual': 'Member\/Casual', 'day_of_week': 'Weekdays'},\n        hover_name = 'member_casual', hover_data = {'member_casual': False, 'ride_length': True}, \n        color_discrete_map = {'casual': '#FF934F', 'member': '#058ED9'})","287a2b6a":"pd.pivot_table(df,\n               index = ['rideable_type', 'member_casual'],\n               values = ['ride_id'],\n               aggfunc = ['count'],\n               margins = True,\n               margins_name = 'Total Rides')","b34ab0a2":"fig_7 = df.groupby(['rideable_type', 'member_casual'], as_index=False).count()\n\npx.bar(fig_7, x = 'rideable_type', y = 'ride_id',\n        color = 'member_casual',\n        barmode='group',\n        text = 'ride_id', \n        labels = {'ride_id': 'No. of Rides', 'member_casual': 'Member\/Casual', 'rideable_type' : 'Rideable Type'},\n        hover_name = 'member_casual', hover_data = {'member_casual': False, 'ride_length': False}, \n        color_discrete_map = {'casual': '#FF934F', 'member': '#058ED9'})","de6a10e3":"* If the personally identifiable information and financial information were available, I could have calculated whether the casual riders had spent more money than if they opt for taking annual memberships.","898c3406":"> * Annual members and Casual riders use Cyclistic bike share **differently**.\n\n> * The **average ride length** of causual riders are **more than twice** as of members.\n\n> * From the **average ride length difference**, we can conclude that Annual members usually use bike share for **daily commuting**, while casual riders mostly use bike share for **leisure rides** mostly during **Weekends**.\n\n> * But there are a **fixed number of casual riders** who use bike share for **commuting**.","0569293f":"> # 5.2  \n> # **Analyzing Difference in Average Ride Length Between Casual riders and Members**.","2c31abb7":"# 1. **Introduction**","a4d59823":"* The average ride length of casual riders are **more than twice** of members.","26501303":"> # 5.1.A  \n> # **Total Number of Rides in 1 Year**","2dde4b9b":"# 4. **Process**","bae4ec10":"* It shows that the total number of rides **fall during winter season** and **rise during summer season**. \n* The behaviour of casual riders and members **tend to be the same as the season changes**.\n* **Maximum riders** are using bikes in **summer** season. \n* **Casual riders** overtake members during **summer**. ","f39970bf":"> # 5.2.B  \n> # **Average Ride Length in Each Month**","f9efb3d4":"> # 5.1.D  \n> # **Average Number of Rides in Each Hour**","1e5a24d9":"> # 4.1 \n> # **Cleaning Process**","53f3b704":"# 2. **Ask**","98e32af0":"> # 5.2.A  \n> # **Average Ride Length in 1 Year**","e4aa6af0":"> # 5.1.C  \n> # **Average Number of Rides in Each Weekday**","c29bf5ca":"* Its seen that casual riders use bikes for **more duration** (might be returning bikes after days) than members.","21e57612":"* In Weekends casual riders' ride length is **maximum when compared to Weekdays**. \n* Members' ride length **tend to be almost same** in all Weekdays and marginally higher in Weekends.\n* **Both** Casual riders and Members use bikes for **long rides** during **Weekends**.","8f8c0436":"> # 5.2.C  \n> # **Average Ride Length in each WeekDay**","8909daee":"> # 6.2\n> # **Additional Data to expand the findings**","4c5bb25c":">* **How do Annual members and Casual riders use Cyclistic bikes differently?**\n\n>* The key stakeholders are:\n     >  1. **Lily Moreno**, the director of marketing and my manager.\n     >  2. **Cyclistic executive team**.\n\n* **First the Cyclistic executive team must approve our recommendations, so they must be backed up with data insights and data visualizations.**\n\n* **Then from the insights of my analysis, my team will design a new marketing strategy to convert casual riders into annual members.**\n","50b17d21":"> # 5.1.B  \n> # **Number of Rides in Each Month**","88691a68":"> # 6.3\n> # **Recommendations**","f888da81":"# 3. **Prepare**","045e4970":"* Here it shows **more casual riders** are using bike share on **Weekends** (ie., Saturdays and Sundays). \n* But there are a fixed number of casual riders using on **Weekdays**, might be commuting. \n* While the number of members riding **tend to be same almost daily**.\n","3d046350":"# 6.  **Act**","2087a9c3":"> * A **new Annual Membership package for Weekend usage only** will attract current Weekend casual riders.\n\n> * **Promotions** aiming at **current Weekday casual riders** must be implemented as soon as possible. Those promtions must include the financial savings of taking membership when compared to single passes and full day passes for a year long period.\n\n> * A **Loyalty Program** for casual riders can be implemented, where **occasional membership fees discounts** must be given to casual riders with **high loyalty points**.","32914e67":"* Average ride length of casual riders are **more than twice** than members in **all months**.\n* Its seen that Average ride length of **February 2021** is unusually higher than the adjacent months. As reported in News earlier, ([You can read news here](https:\/\/www.nbcchicago.com\/news\/local\/nws-chicago-had-9th-snowiest-february-on-record-with-nearly-2-feet-of-snow\/2450777\/)) Chicago had **9th Snowiest February on Record and snowstorm** in 2021. \n* So my conclusion is that **riders were not able to return bikes as usual** and bikes were stuck with them in February. This increased the ride length. In the graph of **Number of Rides Each Month (5.1.B)** we can see that February has the **lowest number of rides** in all months. ","a4194c72":"> # 5.1  \n> # **Analyzing the Difference in Number of Rides Between Casual riders and Members**.","0067c663":"* The **data** I used is ***[Cyclistic\u2019s Historical Trip Data](https:\/\/divvy-tripdata.s3.amazonaws.com\/index.html)*** to analyze and identify trends. \n\n* The **previous 12 months** data from **2020 October 1 to 2021 September 30** is used for analysis.\n\n* The data is stored in **CSV** files. Each file contains **one month data**. Thus a total of **12** .csv files.\n\n* The data is **structured data** ie., Organised data.\n\n* The datasets have a different name because Cyclistic is a fictional company. For the purposes of this case study, the datasets are **appropriate**. \n\n* The data has been made available by **Motivate International Inc.** under this ***[license](https:\/\/www.divvybikes.com\/data-license-agreement)***. \n\n* As this data is collected by a real bike sharing company in Chicago, there are no issues with **bias** or **credibility**. So its **Reliable**, **Original**, **Current** and **Cited** (as in ROCCC). I do not think its **Comprehensive** because this data lacks some information.\n\n* As of data Integrity, its **Accurate**, **Consistent** and **Trustworthy**.\n\n> **Limitations**\n\n* The **data-privacy issues prohibit me from using riders\u2019 personally identifiable information**. This means that I won\u2019t be able to connect pass purchases to credit card numbers to determine if casual riders live in the Cyclistic service area or if they have purchased multiple single passes.\n\n* The **financial information** such as each Ride Id ticket fare is not available.\n\n* If the personally identifiable information and financial information were available, I could have calculated whether the casual riders had spent more money than if they opt for taking annual memberships.\n\n* This data does not contain data about the use of reclining bikes, hand tricycles and cargo bikes. It is said that about 8% of total riders use assistive options.","84ac200b":"> # 5.3  \n> # **Analyzing Difference in Rideable Type Usage Between Casual riders and Members**.","fc7f91f8":"# 5. **Analyze** **And** **Share**","a07ce695":"> # 6.1  \n> # **Conclusion**","cf5f2e9c":"This case study is the ***[Capstone Project](https:\/\/www.coursera.org\/learn\/google-data-analytics-capstone)*** of ***[Google Data Analytics Professional Certificate](https:\/\/www.coursera.org\/professional-certificates\/google-data-analytics)*** . In this case study I am working as a junior data analyst in the marketing analyst team at Cyclistic, a fictional bike-share company in Chicago. \n\nCyclistic is a bike-share program that features more than 5,800 bicycles and 600 docking stations. Cyclistic sets itself apart by also offering reclining bikes, hand tricycles, and cargo bikes, making bike-share more inclusive to people with disabilities and riders who can\u2019t use a standard two-wheeled bike. The majority of riders opt for traditional bikes; about 8% of riders use the assistive options. Cyclistic users are more likely to ride for leisure, but about 30% use them to commute to work each day.\n\nIn 2016, Cyclistic launched a successful bike-share offering. Since then, the program has grown to a fleet of 5,824 bicycles that are geotracked and locked into a network of 692 stations across Chicago. The bikes can be unlocked from one station and returned to any other station in the system anytime.\n\nThe director of marketing believes the company\u2019s future success depends on maximizing the number of annual memberships. Therefore, my team wants to understand **how casual riders and annual members use Cyclistic bikes differently**. From the insights, our team will design a new marketing strategy to convert casual riders into annual members. But first, Cyclistic executives must approve our recommendations, so they must be backed up with **compelling data insights and professional data visualizations**.\n\nThere are  3 pricing plans: single-ride passes, full-day passes, and annual memberships. **Customers who purchase single-ride or full-day passes are referred to as Casual riders. Customers who purchase annual memberships are Cyclistic members**.\n\nIn order to answer the key business questions, I followed the steps of the data analysis process: **ask**, **prepare**, **process**, **analyze**, **share**, and **act**.","18b61b75":"* In a day, casual riders and members use bike share **more during afternoon**, peak use during **evening**. \n* While in the morning time, the number of **casual riders are way less** than the members."}}