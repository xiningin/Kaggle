{"cell_type":{"9a27c1c1":"code","b2d84bb4":"code","3d0470ff":"code","d23418f3":"code","d72e32f4":"code","913b8970":"code","f777ae6b":"code","c14b89fd":"code","cbad5208":"code","e54b238d":"code","e904212b":"code","bb763190":"code","6f01fdc1":"code","cd5792b6":"code","d14ad257":"code","a2da7d76":"markdown","adce837e":"markdown"},"source":{"9a27c1c1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b2d84bb4":"import numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n","3d0470ff":"fruits = pd.read_csv(\"..\/input\/fruit-data-with-colours\/fruit_data_with_colours.csv\")","d23418f3":"fruits","d72e32f4":"\nlookup_fruit_name = dict(zip(fruits.fruit_label.unique(), fruits.fruit_name.unique()))   \nlookup_fruit_name","913b8970":"# plotting a scatter matrix\nfrom matplotlib import cm\n\nX = fruits[['height', 'width', 'mass', 'color_score']]\ny = fruits['fruit_label']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)\n\ncmap = cm.get_cmap('gist_rainbow')\nscatter = pd.plotting.scatter_matrix(X_train, c= y_train, marker = 'o', s=40, hist_kwds={'bins':15}, figsize=(9,9), cmap=cmap)","f777ae6b":"# plotting a 3D scatter plot\nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure(20)\nax = fig.add_subplot(111, projection = '3d')\nax.scatter(X_train['width'], X_train['height'], X_train['color_score'], c = y_train, marker = 'o', s=100)\nax.set_xlabel('width')\nax.set_ylabel('height')\nax.set_zlabel('color_score')\nplt.show()","c14b89fd":"# For this example, we use the mass, width, and height features of each fruit instance\nX = fruits[['mass', 'width', 'height']]\ny = fruits['fruit_label']\n\n# default is 75% \/ 25% train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)","cbad5208":"from sklearn.neighbors import KNeighborsClassifier\n\nknn = KNeighborsClassifier(n_neighbors = 5)","e54b238d":"knn.fit(X_train, y_train)","e904212b":"knn.score(X_test, y_test)","bb763190":"# first example: a small fruit with mass 20g, width 4.3 cm, height 5.5 cm\nfruit_prediction = knn.predict([[20, 4.3, 5.5]])\nlookup_fruit_name[fruit_prediction[0]]","6f01fdc1":"# second example: a larger, elongated fruit with mass 100g, width 6.3 cm, height 8.5 cm\nfruit_prediction = knn.predict([[100, 6.3, 8.5]])\nlookup_fruit_name[fruit_prediction[0]]","cd5792b6":"k_range = range(1,20)\nscores = []\n\nfor k in k_range:\n    knn = KNeighborsClassifier(n_neighbors = k)\n    knn.fit(X_train, y_train)\n    scores.append(knn.score(X_test, y_test))\n\nplt.figure()\nplt.xlabel('k')\nplt.ylabel('accuracy')\nplt.scatter(k_range, scores)\nplt.xticks([0,5,10,15,20]);","d14ad257":"t = [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2]\n\nknn = KNeighborsClassifier(n_neighbors = 5)\n\nplt.figure()\n\nfor s in t:\n\n    scores = []\n    for i in range(1,1000):\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1-s)\n        knn.fit(X_train, y_train)\n        scores.append(knn.score(X_test, y_test))\n    plt.plot(s, np.mean(scores), 'bo')\n\nplt.xlabel('Training set proportion (%)')\nplt.ylabel('accuracy');","a2da7d76":"The file contains the mass, height, and width of a selection of oranges, lemons and apples. The heights were measured along the core of the fruit. The widths were the widest width perpendicular to the height.","adce837e":"# create a mapping from fruit label value to fruit name to make results easier to interpret"}}