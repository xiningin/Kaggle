{"cell_type":{"6f99a623":"code","dcb04f52":"code","b13ef999":"code","6eae2cd0":"code","85970d4c":"code","7c1a2d53":"code","5ab218a3":"code","5b7c4366":"code","76d6ed2a":"code","22a84efc":"code","9ad15376":"code","4d4851a5":"code","3fd7e782":"code","eef0a080":"code","ff46f301":"code","bbf19b17":"code","eacf2ecf":"code","ad3bb37b":"code","49903de3":"code","a086a78c":"code","b7e402e1":"code","ef312950":"code","394ea214":"code","2f38ef88":"code","3fc3a957":"code","9b53d405":"code","b686e781":"code","839b94a9":"code","fd141c55":"code","33066c65":"code","c6461561":"code","fa92c0ea":"code","222fa4f8":"code","0ddd3304":"code","55960e1e":"code","ad393e38":"code","e7628320":"code","e967eaea":"code","a2139fb2":"code","cfa8f04d":"code","bb0c3a80":"code","d5a19a3b":"code","3ca76f9e":"code","34da20db":"code","cce3265c":"code","9746f53f":"code","6b84ead5":"code","b30f79bc":"code","53c6cc91":"code","c095499c":"code","feb7e4e5":"code","201eefa7":"code","de8b9f80":"code","2c723e43":"code","7362a8f7":"code","5411bf8d":"code","ac5ec0ed":"code","70cc9622":"code","a95bb341":"code","9d7bfc65":"code","cf56fdd0":"code","81573f63":"code","db2d666d":"code","df0bef5c":"code","5bea2b76":"code","1f8930bc":"markdown","f25baf8f":"markdown","ca032402":"markdown","97783b3c":"markdown","0e0b19ca":"markdown","9feeeec1":"markdown","38b5cfbe":"markdown","09c17765":"markdown","ac96c445":"markdown","12500811":"markdown","431347c8":"markdown"},"source":{"6f99a623":"# import misc packages\nimport numpy as np\nimport pandas\nimport seaborn\nimport matplotlib.pyplot as plt\n\n# import keras from tensorflow\nfrom tensorflow import keras\n\n# import sklearn packages\nfrom sklearn.model_selection import train_test_split, GridSearchCV, KFold\nfrom sklearn.metrics import accuracy_score, classification_report, mean_squared_error","dcb04f52":"df = pandas.read_csv('..\/input\/age-gender-and-ethnicity-face-data-csv\/age_gender.csv')","b13ef999":"df.iloc[0]","6eae2cd0":"df = df.drop(['img_name'], axis = 1)","85970d4c":"X = df['pixels'].apply(lambda x : np.array(x.split(), dtype = float))\nX_bar = [np.array([val for val in X[i]]).reshape(48, 48) for i in range(X.shape[0])]","7c1a2d53":"X = np.array(X_bar)\nX = X\/255.0","5ab218a3":"print(X.shape)","5b7c4366":"from tabulate import tabulate\ninfo = [[col, len(df[col].unique()), df[col].count(), df[col].max(), df[col].min()] for col in ['age', 'ethnicity', 'gender']]\nprint(tabulate(info, headers = ['Feature', 'Unique vals', 'Count', 'Maximum', 'Minimum'], tablefmt = 'orgtbl'))","76d6ed2a":"fig = plt.figure(figsize = (10,10))\ni = 6\nwhile i:\n    x = np.random.randint(0, 20000)\n    plt.subplot(2, 3, i)\n    plt.imshow(X[x])\n    plt.axis ('off')\n    i -= 1\nplt.show()","22a84efc":"y = np.array(df['ethnicity'])\ny = keras.utils.to_categorical(y)","9ad15376":"print(y[35:50, :])","4d4851a5":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)","3fd7e782":"print(X_train.shape)\nprint(y_train.shape)","eef0a080":"print(X_test.shape)\nprint(y_test.shape)","ff46f301":"def cnn (num_filters_1, num_filters_2, hidden_nodes) :\n    \n    # add input  layer\n    feature = keras.Input(shape = (48, 48, 1, ))\n    \n    # 1st convolution layer\n    conv_layer_1 = keras.layers.Conv2D(num_filters_1, (3,3), padding = 'valid', activation = 'relu')(feature)\n    drop_layer_1 = keras.layers.Dropout(0.2)(conv_layer_1)\n    maxp_layer_1 = keras.layers.MaxPooling2D()(drop_layer_1)\n    \n    # 2nd convolution layer\n    conv_layer_2 = keras.layers.Conv2D(num_filters_2, (3,3), padding = 'valid', activation = 'relu')(maxp_layer_1)\n    drop_layer_2 = keras.layers.Dropout(0.2)(conv_layer_2)\n    maxp_layer_2 = keras.layers.MaxPooling2D()(drop_layer_2)\n    \n    # 1st hidden layer\n    flatten = keras.layers.Flatten()(maxp_layer_2)\n    hidden_layer = keras.layers.Dense(hidden_nodes, activation = 'relu')(flatten)\n    \n    # add output layer\n    output  = keras.layers.Dense(y.shape[1], activation= 'softmax')(hidden_layer)\n    \n    # compile the layers\n    cnn = keras.Model(inputs = feature, outputs = output, name = 'MLP')\n    cnn.compile(loss = 'categorical_crossentropy', optimizer  = 'adam', metrics = ['accuracy'])\n    \n    return cnn","bbf19b17":"model = keras.wrappers.scikit_learn.KerasClassifier(build_fn = cnn, verbose = 1)\nparam = {'num_filters_1' : [80, 100, 150],\n         'num_filters_2' : [50,  60,  75],\n         'hidden_nodes'  : [10]}\ngrd = GridSearchCV(estimator = model, param_grid = param, cv = KFold(n_splits = 3, shuffle = True, random_state = 1), verbose = 1)","eacf2ecf":"search = grd.fit(X_train, y_train, epochs = 100, batch_size = 32, verbose = 0)","ad3bb37b":"print(search.best_params_)","49903de3":"model = cnn(search.best_params_['num_filters_1'], search.best_params_['num_filters_2'], search.best_params_['hidden_nodes'])\nprint(model.summary())","a086a78c":"model.fit(X_train, y_train, epochs = 135, batch_size = 32)","b7e402e1":"y_pred = model.predict(X_test)","ef312950":"print(y_pred[0,:])","394ea214":"y_pred = np.around(y_pred)","2f38ef88":"print(y_pred[0,:])\nprint(y_test[0,:])","3fc3a957":"print('accuracy : ' + str(accuracy_score(y_test, y_pred)))\nprint(classification_report(y_test, y_pred))","9b53d405":"print(X.shape)","b686e781":"fig = plt.figure(figsize = (10,10))\nplt.imshow(X[9])\nplt.axis ('off')","839b94a9":"y = np.array(df['gender'])\ny = keras.utils.to_categorical(y)","fd141c55":"print(y[:10, :])","33066c65":"print(y.shape)","c6461561":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)","fa92c0ea":"print(X_train.shape)\nprint(y_train.shape)","222fa4f8":"print(X_test.shape)\nprint(y_test.shape)","0ddd3304":"model = keras.wrappers.scikit_learn.KerasClassifier(build_fn = cnn, verbose = 1)\nparam = {'num_filters_1' : [75,100],\n         'num_filters_2' : [40, 50],\n         'hidden_nodes'  : [25, 50]}\ngrd = GridSearchCV(estimator = model, param_grid = param, cv = KFold(n_splits = 3, shuffle = True, random_state = 1), verbose = 1)","55960e1e":"search = grd.fit(X_train, y_train, epochs = 50, batch_size = 32, verbose = 0)","ad393e38":"print(search.best_params_)","e7628320":"model = cnn(search.best_params_['num_filters_1'], search.best_params_['num_filters_2'], search.best_params_['hidden_nodes'])\nprint(model.summary())","e967eaea":"model.fit(X_train, y_train, epochs = 50, batch_size = 32)","a2139fb2":"y_pred = model.predict(X_test)","cfa8f04d":"y_pred = np.around(y_pred)","bb0c3a80":"print(y_pred[0,:])\nprint(y_test[0,:])","d5a19a3b":"print('Accuracy : ' + str(accuracy_score(y_test, y_pred)))\nprint(classification_report(y_test, y_pred))","3ca76f9e":"print(X.shape)","34da20db":"y = np.array(df['age'], dtype = float)","cce3265c":"print(y[:])","9746f53f":"print(y.shape)","6b84ead5":"def cnn_cont (num_filters_1, num_filters_2, hidden_nodes) :\n    \n    # add  input layer\n    feature = keras.Input(shape = (48, 48, 1))\n    \n    # 1st convolution layer\n    conv_layer_1 = keras.layers.Conv2D(num_filters_1, (3,3), padding = 'valid', activation = 'relu')(feature)\n    drop_layer_1 = keras.layers.Dropout(0.2)(conv_layer_1)\n    maxp_layer_1 = keras.layers.MaxPooling2D((2,2), padding = 'valid')(drop_layer_1)\n    \n    # 2nd convolution layer\n    conv_layer_2 = keras.layers.Conv2D(num_filters_2, (3,3), padding = 'valid', activation = 'relu')(maxp_layer_1)\n    drop_layer_2 = keras.layers.Dropout(0.2)(conv_layer_2)\n    maxp_layer_2 = keras.layers.MaxPooling2D((2,2), padding = 'valid')(drop_layer_2)\n    \n    # hidden layer\n    flatten = keras.layers.Flatten()(maxp_layer_2)\n    hidden_layer = keras.layers.Dense(hidden_nodes, activation = 'relu')(flatten)\n    \n    # add output layer\n    output = keras.layers.Dense(1, activation = 'linear')(hidden_layer)\n    \n    # compile the model\n    cnn = keras.Model(inputs = feature, outputs = output, name = 'CNN')\n    cnn.compile(loss = 'mse', metrics = ['mae'],  optimizer  =  'adam')\n    \n    return cnn","b30f79bc":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)","53c6cc91":"model = keras.wrappers.scikit_learn.KerasRegressor(build_fn = cnn_cont, verbose = 1)\nparam = {'num_filters_1' : [75,100],\n         'num_filters_2' : [30, 40],\n         'hidden_nodes' : [250,400]}\ngrd = GridSearchCV(estimator = model, param_grid = param, cv = KFold(n_splits = 3, shuffle = True, random_state = 1), verbose = 1)","c095499c":"print(X_train.shape)\nprint(y_train.shape)","feb7e4e5":"print(X_test.shape)\nprint(y_test.shape)","201eefa7":"search = grd.fit(X_train, y_train, epochs = 150, batch_size= 32, verbose = 0)","de8b9f80":"print('Best score : ' + str(search.best_params_))\nprint(search.best_params_)","2c723e43":"model = cnn_cont(search.best_params_['num_filters_1'],search.best_params_['num_filters_2'],search.best_params_['hidden_nodes'])\nprint(model.summary())","7362a8f7":"model.fit(X_train, y_train, epochs = 150, batch_size = 32)","5411bf8d":"y_pred = model.predict(X_test)","ac5ec0ed":"print(y_pred.shape)","70cc9622":"y_pred = np.array(y_pred.reshape(-1))","a95bb341":"print(y_pred[3000:3010])\nprint(y_test[3000:3010])","9d7bfc65":"from sklearn.metrics import mean_absolute_error\nprint('Error : ' + str(mean_absolute_error(y_test, y_pred)))","cf56fdd0":"i = 10\nwhile i :\n    fig = plt.figure(figsize = (15,5))\n    x = np.random.randint(0, 5000)\n    plt.plot(y_test[x:x+150])\n    plt.plot(y_pred[x:x+150])\n    \n    plt.legend(['actual values', 'predicted values'])\n    plt.show()\n    i -= 1","81573f63":"fig = plt.figure(figsize=(5,5))\nplt.imshow(X_test[355])\nplt.axis ('off')\nprint(y_pred[355])","db2d666d":"fig = plt.figure(figsize=(5,5))\nplt.imshow(X_test[877])\nplt.axis ('off')\nprint(y_pred[877])","df0bef5c":"fig = plt.figure(figsize=(5,5))\nplt.imshow(X_test[999])\nplt.axis ('off')\nprint(y_pred[999])","5bea2b76":"fig = plt.figure(figsize=(5,5))\nplt.imshow(X_test[666])\nplt.axis ('off')\nprint(y_pred[666])","1f8930bc":"# Ethnicity, age and gender classifier using vanilla CNN","f25baf8f":"## Lastly, work out for age. We will keep age as a continueous values (Even though they are finite and discrete, this makes more sense).","ca032402":"> define a new **cnn** model for this task","97783b3c":"> delete **image_name** column","0e0b19ca":"> Applying to_categorical(), was not needed at all but this was sheer **laziness XD**","9feeeec1":"## Next let's go for Gender","38b5cfbe":"## Import Packages and Data Preprocessing","09c17765":"> Results for gender","ac96c445":"## First predict their ethnicity","12500811":"> Results for classifying **Ethnicity**","431347c8":"> To get a better understanding of how well the model is performing, draw several plots"}}