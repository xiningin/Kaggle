{"cell_type":{"2c56507a":"code","754cea86":"code","ae0a194c":"code","6babe119":"code","f51f0773":"code","a99c4a11":"code","6850d35d":"code","01c95ba9":"code","938051fa":"code","7e6d760c":"code","892f7d91":"code","cbe4ed51":"code","36abebd8":"code","5bc14fbc":"code","a3ce5305":"code","c54723e5":"code","8a06481c":"code","a7324102":"code","609a3cf1":"code","1ab92059":"code","b654faba":"code","9545b5d6":"code","9dec4686":"code","94421c2b":"code","24937188":"code","fe16d1c6":"code","ada50f3b":"code","824ae044":"code","f46f4cfd":"code","0ed89f28":"markdown","1731c659":"markdown","4394e694":"markdown","609b3a3c":"markdown","8347a1f2":"markdown","7c1c50fb":"markdown","f39e5a02":"markdown"},"source":{"2c56507a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","754cea86":"import seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom plotly import __version__\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nimport cufflinks as cf\ninit_notebook_mode(connected=True)\ncf.go_offline()\n","ae0a194c":"w = pd.read_csv('\/kaggle\/input\/wine-reviews\/winemag-data_first150k.csv')","6babe119":"w.info()","f51f0773":"w.head()","a99c4a11":"#selection of numerical columns W\ndf_numeric = w.select_dtypes(include=[np.number])\nnumeric_cols = df_numeric.columns.values\nprint(numeric_cols)\n\n#selection of non-numerical columns W\ndf_non_numeric = w.select_dtypes(exclude=[np.number])\nnon_numeric_cols = df_non_numeric.columns.values\nprint(non_numeric_cols)","6850d35d":"#start working with missing values. Lets make a heatmap with the help of Seaborn library to colour missing values.\ncols = w.columns[:12]\ncolours = ['#8B0000', '#F0E68C'] \nsns.heatmap(w[cols].isnull(), cmap=sns.color_palette(colours))","01c95ba9":"for col in w.columns:\n    pct_missing = np.mean(w[col].isnull())\n    print('{} - {}%'.format(col, round(pct_missing*100)))","938051fa":"w[['region_1','region_2']]","7e6d760c":"med = w['price'].median()\nprint(med)\nw['price'] = w['price'].fillna(med)","892f7d91":"w.info()","cbe4ed51":"w['designation'] = w['designation'].fillna('missing_value')\nw['region_1'] = w['region_1'].fillna(w['region_2'])\nw['region_2'] = w['region_2'].fillna(w['region_1'])\nw['region_2'] = w['region_2'].fillna(w['region_1'])\nw = w.drop('Unnamed: 0', 1)","36abebd8":"w.info()","5bc14fbc":"#Lets check replaced values\nprint(w.isnull().sum())","a3ce5305":"#After all, some values are still null, it was decided to delete them, so they represent a tiny error, and null values in columns with regions are also replaced with the default value missing_value.\nw = w[pd.notnull(w['country'])]\nw['region_1'] = w['region_1'].fillna('missing_value')\nw['region_2'] = w['region_2'].fillna('missing_value')\nw.info()","c54723e5":"#The describe method (above) allows you to describe the numerical characteristics of an array in one method.\nw.describe()","8a06481c":"#Distribution of qualitative assessment of wines, or its 'points' \nsns.distplot(w['points'], bins = 10)","a7324102":"#Which countries' wines are most often found in the store\nvar = w.groupby('country').count()['variety']\nframe = pd.DataFrame(var)\nwine_sorted = frame.sort_values(by = 'variety', ascending=False).reset_index()\nwine_sorted.head()","609a3cf1":"#Wines of what countries are more common in the shop\nwine_sorted[:11].iplot(kind='bar', x='country', y = 'variety')","1ab92059":"#How depends points and price \nsns.jointplot(x = 'points', y = 'price', data = w, color = 'red')","b654faba":"#What is the mean price of Pinot Noir?\nw[w['variety']=='Pinot Noir']['price'].mean()","9545b5d6":"#What are the max points of Montepulciano?\nw[w['variety']=='Montepulciano']['points'].max()","9dec4686":"#What about its prices?\nprint('The highest price of my favorite sort of wine called {} in this dataset is {} dollars and the lowest price is {} dollars.'.format('Montepulciano', (w[w['variety']=='Montepulciano']['price'].max()), (w[w['variety']=='Montepulciano']['price'].min())))","94421c2b":"#Now I'd like to know, how many wines have an oak taste in its description\ndef oak(description):\n    if 'oak' in description.lower().split():\n        return True\n    else:\n        return False\n\noaks = sum(w['description'].apply(lambda x: oak(x)))\nprint('The number of wines that contains oak taste is {} positions.'.format(oaks))","24937188":"#Creating a new table with favorites\nfavorites = pd.concat([ (w[w['variety']=='Tempranillo']), (w[w['variety']=='Pinot Noir']), (w[w['variety']=='Montepulciano'])])","fe16d1c6":"favorites.head(10)","ada50f3b":"sns.boxplot(x = 'variety', y = 'points', data = favorites )","824ae044":"favorites.iplot(kind = 'scatter', x = 'variety', y = 'price', mode = 'markers', size = 15)","f46f4cfd":"sns.jointplot(x = 'points', y = 'price', data = favorites, hue = 'variety')","0ed89f28":"So, we see that WineMag offers more Pinot Noir wines, then Montepulciano, for example, but the second one have better points and higher price for them. More rare is Tempranillo sort so it will be interesting to choose it for a special case and for 'daily usage' it will be better to buy Montepulciano - not so expensive as Pinot Noir could be and also have high quality.","1731c659":"Next, replacing missing values. You can use some default placeholder for NaNs, for example, a new category \"missing_value\" for categorical features or the number '111111' for numeric ones. This way, we save data about missing values, which can also be valuable information. In the code below, I replaced the missing values in the 'designation' column with the default value, and in the region_1 and region_2 columns, I supplemented the missing values with data from them.","4394e694":"Based on the table above, we can suggest that if region_1 is filled, then region_2 is not, and vice versa.\n\nStart working with data. For numerical features, we can use the method of filling in the gaps, for example, the average or median value obtained from the remaining records. For categorical features, we can use the most common value as a placeholder. Let's take the 'price' attribute as an example and replace all the missing values with the median of this attribute:","609b3a3c":"Now I'm going to explore a bit about my favorite sorts of wine as Tempranillo, Montepulciano and Pinot Noir.","8347a1f2":"A bit of visualisation below to find out correlations and certain patterns. ","7c1c50fb":"Next, let's compare the data from two columns with each other, the data in which are similar in meaning - columns with regions.","f39e5a02":"The heatmap above shows a pattern of missing values the set. The signs are located on the horizontal axis, and the number of records\/rows is located on the vertical axis. Beige color corresponds to missing data, burgundy - filled data. It is noticeable, for example, that the 'region-2' attribute and the 'designation' have quite a lot of empty lines, and the 'price' attribute does not have so many. If there are a lot of features in the set and visualization takes a long time, we can make a list of the missing values for each attribute."}}