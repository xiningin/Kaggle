{"cell_type":{"bd8b544d":"code","18c358db":"code","9d2f89d1":"code","b9652c43":"code","77a08dbe":"code","e2d8aa00":"code","8972fa7c":"code","a85cebc6":"code","c4e86d5e":"code","393f8575":"code","fbae463a":"code","7e8dc73c":"code","3dd57b0d":"code","641752e9":"code","aec37938":"code","ff056859":"code","6ce83dcb":"code","e4cc8944":"code","7de0a15b":"code","9ccf515d":"code","5f5516d0":"code","ae8c584c":"markdown","7f7aedde":"markdown"},"source":{"bd8b544d":"import lightgbm as lgb\nimport numpy as np\nimport pandas as pd\nimport random\nimport optuna\nfrom sklearn.model_selection import KFold, train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error","18c358db":"train = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/test.csv\")","9d2f89d1":"train.head()","b9652c43":"Name0=train['target'].unique()\nName=sorted(Name0)\nprint(Name)","77a08dbe":"N=[]\nfor i in range(9):\n    N+=[i]\n    \nnormal_mapping=dict(zip(Name,N)) \nreverse_mapping=dict(zip(N,Name)) ","e2d8aa00":"target = train['target'].map(normal_mapping)\ndata = train.drop(['target','id'],axis=1)","8972fa7c":"columns=data.columns.to_list()\nprint(columns)","a85cebc6":"def objective(trial,data=data,target=target):\n    \n    train_x, test_x, train_y, test_y = train_test_split(data, target, test_size=0.2,random_state=42)\n    param =   {\n        'num_leaves': trial.suggest_int('num_leaves', 2, 256),\n        'objective': trial.suggest_categorical('objective',['regression','rmse','multiclass','binary']),  \n        'max_depth': -1,\n        'learning_rate': 0.1,\n        \"boosting\": \"gbdt\",\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n        \"bagging_freq\": 5,\n        \"bagging_fraction\": trial.suggest_uniform('bagging_fraction', 0.1, 1.0),\n        \"feature_fraction\": trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        \"verbosity\": -1,\n    }\n    model = lgb.LGBMClassifier(**param)      \n    model.fit(train_x,train_y,eval_set=[(test_x,test_y)],early_stopping_rounds=100,verbose=False)\n    preds = model.predict(test_x)\n    rmse = mean_squared_error(test_y, preds,squared=False)\n    \n    return rmse","c4e86d5e":"study = optuna.create_study(direction='minimize')\nstudy.optimize(objective, n_trials=32)\nprint('Number of finished trials:', len(study.trials))\nprint('Best trial:', study.best_trial.params)","393f8575":"study.trials_dataframe()","fbae463a":"# shows the scores from all trials\noptuna.visualization.plot_optimization_history(study)","7e8dc73c":"# interactively visualizes the hyperparameters and scores\noptuna.visualization.plot_parallel_coordinate(study)","3dd57b0d":"# shows the evolution of the search\noptuna.visualization.plot_slice(study)","641752e9":"# parameter interactions on an interactive chart.\noptuna.visualization.plot_contour(study, params=['num_leaves','objective'])","aec37938":"# Visualize parameter importances.\noptuna.visualization.plot_param_importances(study)","ff056859":"# Visualize empirical distribution function\noptuna.visualization.plot_edf(study)","6ce83dcb":"Best_trial=study.best_trial.params\nprint(Best_trial)","e4cc8944":"sample = pd.read_csv(\"..\/input\/tabular-playground-series-jun-2021\/sample_submission.csv\")\nprint(sample.shape)","7de0a15b":"preds = np.zeros((sample.shape[0],sample.shape[1]-1))\nkf = KFold(n_splits=5,random_state=48,shuffle=True)\nfor trn_idx, test_idx in kf.split(train[columns],target):\n    X_tr,X_val=train[columns].iloc[trn_idx],train[columns].iloc[test_idx]\n    y_tr,y_val=target.iloc[trn_idx],target.iloc[test_idx]\n    model = lgb.LGBMClassifier(**Best_trial)\n    model.fit(X_tr,y_tr,eval_set=[(X_val,y_val)],early_stopping_rounds=100,verbose=False)\n    preds+=model.predict_proba(test[columns])\/kf.n_splits   ###### predict_proba\n    rmse=mean_squared_error(y_val, model.predict(X_val),squared=False)\n    print(rmse)","9ccf515d":"print(preds.shape)\nprint(preds[0])","5f5516d0":"subm = sample\nsubm[ Name ] = preds\nsubm.to_csv('submission.csv',index=False)\nsubm","ae8c584c":"Optuna can tune every parameter including objective. What gives better results are justuce. ","7f7aedde":"# LightGBM with Optuna tuning\n* doc: \nhttps:\/\/github.com\/optuna\/optuna"}}