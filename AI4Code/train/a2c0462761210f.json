{"cell_type":{"65f2cbbe":"code","fc40e3e6":"code","7aabc6fc":"code","d73586ba":"code","bf2130c7":"code","2a600938":"code","8ad0c3ab":"code","08d54e37":"code","8c548116":"code","a4e0aae4":"code","8f3faf98":"code","f5df102f":"code","8f5d371e":"code","69333ea6":"code","1d3f45af":"markdown","d28b7527":"markdown","ad045a89":"markdown","e6cb2fb9":"markdown","e388af60":"markdown","0f9d66ea":"markdown"},"source":{"65f2cbbe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\nimport numpy as np\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n","fc40e3e6":"data = pd.read_csv('\/kaggle\/input\/novel-corona-virus-2019-dataset\/covid_19_data.csv')\nfilteredDataTurkey = data.loc[data['Country\/Region'] == \"Turkey\"]  # filter data for Turkey\nfilteredDataItaly = data.loc[data['Country\/Region'] == \"Italy\"]  # filter data for Italy\nfilteredDataTurkey.info()\nfilteredDataItaly.info()\n","7aabc6fc":"filteredDataTurkey.corr()  # Recovered and SNo has low correlation, Confirmed and Deaths has big correlation\n","d73586ba":"# correlation map for Turkey\nf, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(filteredDataTurkey.corr(), annot=True, linewidth=.5, fmt='.1f', ax=ax)\nplt.show()\n","bf2130c7":"filteredDataTurkey.drop([\"Province\/State\"], axis=1, inplace=True)\nfilteredDataItaly.drop([\"Province\/State\"], axis=1, inplace=True)\n","2a600938":"filteredDataTurkey.columns","8ad0c3ab":"# Confirmed-Recovered Line Plot\n# Lets look Confirmed and Recovered cases for Turkey and Italy\nfilteredDataTurkey.Confirmed.plot(kind='line', color='r', label='Confirmed-Turkey', linewidth=1, alpha=0.75, grid=True,linestyle=':')\nfilteredDataTurkey.Recovered.plot(color='r', label='Recovered-Turkey', linewidth=1, grid=True)\nfilteredDataItaly.Confirmed.plot(kind='line', color='b', label='Confirmed-Italy', linewidth=1, alpha=0.75, grid=True,linestyle=':')\nfilteredDataItaly.Recovered.plot(color='b', label='Recovered-Italy', linewidth=1, grid=True)\nplt.legend(loc='upper right')  # legend = puts label into plot\nplt.xlabel('Confirmed')  # label = name of label\nplt.ylabel('Recovered')\nplt.title('Confirmed and Recovered cases for Turkey and Italy')\nplt.show()\n","08d54e37":"plt.scatter(filteredDataTurkey.Confirmed, filteredDataTurkey.Recovered, c='g', linestyle=':', label='Turkey')\nplt.scatter(filteredDataItaly.Confirmed, filteredDataItaly.Recovered, c='b', linestyle=':', label='Italy')\nplt.xlabel('Confirmed')\nplt.ylabel('Recovered')\nplt.title('Confirmed and Recovered cases for Turkey and Italy')\nplt.legend(loc='upper left')\nplt.show()\n","8c548116":"# Histogram\nfilteredDataTurkey.Confirmed.plot(kind='hist', bins=100)\nplt.show()\n# plt.clf()\n","a4e0aae4":"i = 0\ndailyDeathNumberListTurkey = [0] * filteredDataTurkey.shape[\n    0]  # we create a list full with zeros with same dimension of our filterData\nwhile i < filteredDataTurkey.shape[0]:  # filteredDataTurkey.shape[c,r]: will give column and row count\n    if (i == 0):\n        dailyDeathNumberListTurkey[i] = filteredDataTurkey.iloc[i, :].Deaths\n    else:\n        dailyDeathNumberListTurkey[i] = filteredDataTurkey.iloc[i, :].Deaths - filteredDataTurkey.iloc[i - 1, :].Deaths\n    i += 1\n\n# Same for Italy\nj = 0\ndailyDeathNumberListItaly = [0] * filteredDataItaly.shape[0]\nwhile j < filteredDataItaly.shape[0]:\n    if (j == 0):\n        dailyDeathNumberListItaly[j] = filteredDataItaly.iloc[j, :].Deaths\n    else:\n        dailyDeathNumberListItaly[j] = filteredDataItaly.iloc[j, :].Deaths - filteredDataItaly.iloc[j - 1, :].Deaths\n    j += 1\n","8f3faf98":"filteredDataTurkey[\"DailyDeathNumber\"]=dailyDeathNumberListTurkey\nfilteredDataItaly[\"DailyDeathNumber\"]=dailyDeathNumberListItaly\n# After adding Daily Death Number, our filteredData;\nfilteredDataTurkey.head(10)\n","f5df102f":"print(filteredDataTurkey.loc[filteredDataTurkey['DailyDeathNumber'].idxmax()])","8f5d371e":"print(filteredDataItaly.loc[filteredDataItaly['DailyDeathNumber'].idxmax()])","69333ea6":"plt.scatter(filteredDataTurkey.ObservationDate, filteredDataTurkey.Recovered, c='g', linestyle=':', label='Turkey')\nplt.scatter(filteredDataItaly.ObservationDate, filteredDataItaly.Recovered, c='b', linestyle=':', label='Italy')\nplt.xlabel('Confirmed')\nplt.ylabel('Recovered')\nplt.xticks([])  # used for hiding dates at x-axis\nplt.legend(loc='upper left')\nplt.show()\n","1d3f45af":"In this notebook, using **\"covid_19_data.csv\"**, i will compare Turkey and Italy's data in coronavirus outbreak.","d28b7527":"In our dataset has many different country's data but we want to just look Turkey and Italy so we will filter using **Country\/Region**.","ad045a89":"In our data just show total death number but i want to show daily death number. Thats why im gonna decrease **Deaths**  from the previous day and gonna put a list that i call **dailyDeathNumberList**. After fill this list im gonna add to my **filterData** as a new column.\n","e6cb2fb9":"Now, plotting **Recovered** number of changes daily","e388af60":"We dont have any Province\/State  values, lets drop it.","0f9d66ea":"Find the day's data with the highest number of deaths"}}