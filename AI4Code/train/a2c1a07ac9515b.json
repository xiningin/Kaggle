{"cell_type":{"5c7ef6dc":"code","094ba512":"code","2807fcad":"code","f4be6031":"code","a97b5ceb":"code","c427e45b":"code","933de485":"code","25bee464":"code","6abb5be4":"code","2cbcb461":"code","7d3ff9d7":"code","d851494b":"code","bc1e09a0":"code","4bab8081":"code","30181262":"code","30763c62":"code","6fa01481":"code","a58bc6cc":"markdown"},"source":{"5c7ef6dc":"# import libraries\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","094ba512":"# Load data set\ndf = pd.read_csv(\"\/kaggle\/input\/mydata\/restaurantreviews.csv\", sep=\"\\t\", names=['Review','Liked'], encoding=\"latin-1\")","2807fcad":"# Print all data\ndf = df[1:]\ndf","f4be6031":"# Rows and columns\ndf.shape","a97b5ceb":"# Rows\ndf.shape[0]","c427e45b":"# columns\ndf.shape[1]","933de485":"#First 5 rows\ndf.head(5)","25bee464":"#Last 5 records\ndf.tail(5)","6abb5be4":"# filter data\nimport re\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nfrom nltk.stem import WordNetLemmatizer\nps = PorterStemmer()\nwordnet=WordNetLemmatizer()\ncorpus = []\nfor i in range(0, len(df)):\n    review = re.sub('[^a-zA-Z]', ' ', df['Review'].values[i])\n    review = review.lower()\n    review = review.split()\n    \n    review = [wordnet.lemmatize(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","2cbcb461":"# Vectorize setences and define x and y\nfrom sklearn.feature_extraction.text import CountVectorizer\ncv = CountVectorizer(max_features=2500)\nx = cv.fit_transform(corpus).toarray()\ny = df['Liked'].values","7d3ff9d7":"#Split test train data into 70:30\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 0)","d851494b":"#Prepare Multinomial Naive Bayes model\nfrom sklearn.naive_bayes import MultinomialNB","bc1e09a0":"#fit the data\ndetect_model = MultinomialNB().fit(x_train, y_train)","4bab8081":"#Predict result\ny_pred=detect_model.predict(x_test)","30181262":"#classification Report\nfrom sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","30763c62":"#Confusion matrix\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test,y_pred)","6fa01481":"#Accuracy score\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","a58bc6cc":"# Multinomial Naive Bayes classifier"}}