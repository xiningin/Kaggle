{"cell_type":{"46cd8096":"code","3f7dfae9":"code","833e3043":"code","e2fd650f":"code","67a0c2de":"code","6ddf339a":"code","a4c8fe02":"code","109c90cd":"code","b170019a":"code","cbbef27c":"code","f91334ad":"code","a5ebb88d":"code","da41f223":"code","0bbe0915":"code","a78347b9":"code","c3638942":"code","52c6fd9b":"code","d579cdb3":"code","0bcd835a":"markdown","73cc708c":"markdown","892d00e7":"markdown","2977a4f7":"markdown","d0f4936d":"markdown","5ac9102c":"markdown","b755bd1c":"markdown","c7428c64":"markdown","66d4553d":"markdown","e2ead6e3":"markdown","e0ea19a6":"markdown","9da7b804":"markdown","ca265c27":"markdown","5b07dcb9":"markdown","05879bb3":"markdown"},"source":{"46cd8096":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","3f7dfae9":"import matplotlib.pyplot as plt\nimport seaborn as sns","833e3043":"dataset = pd.read_csv('\/kaggle\/input\/pima-indians-diabetes-database\/diabetes.csv')","e2fd650f":"sns.heatmap(dataset.isnull())","67a0c2de":"dataset.head(10)","6ddf339a":"df = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']\ndataset[df] = dataset[df].replace({0:np.nan})","a4c8fe02":"dataset.head(10)","109c90cd":"dataset.describe()","b170019a":"dataset['Glucose'].fillna(120.894531, inplace = True)\ndataset['BloodPressure'].fillna(72.40518, inplace = True)\ndataset['SkinThickness'].fillna(29.153420, inplace = True)\ndataset['Insulin'].fillna(155.548223, inplace = True)\ndataset['BMI'].fillna(32.457464, inplace = True)","cbbef27c":"dataset.head(10)","f91334ad":"sns.countplot(x='Outcome', data=dataset)","a5ebb88d":"X = dataset.iloc[:, :-1].values\ny = dataset.iloc[:, -1].values","da41f223":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)","0bbe0915":"from sklearn.preprocessing import StandardScaler\nsc = StandardScaler()\nX_train = sc.fit_transform(X_train)\nX_test = sc.transform(X_test)","a78347b9":"from sklearn.linear_model import LogisticRegression\nclassifier = LogisticRegression(random_state = 0)\nclassifier.fit(X_train, y_train)","c3638942":"from sklearn.metrics import confusion_matrix, accuracy_score\ny_pred = classifier.predict(X_test)\ncm = confusion_matrix(y_test, y_pred)\nprint(cm)\naccuracy_score(y_test, y_pred)","52c6fd9b":"from sklearn.model_selection import cross_val_score\naccuracies = cross_val_score(estimator = classifier, X = X_train, y = y_train, cv = 10)\nprint(\"Accuracy: {:.2f} %\".format(accuracies.mean()*100))\nprint(\"Standard Deviation: {:.2f} %\".format(accuracies.std()*100))","d579cdb3":"from sklearn.metrics import classification_report\nprint(classification_report(y_test,y_pred))","0bcd835a":"# IMPORTING THE LIBRARIES","73cc708c":"# REPLACING NaN WITH MEAN VALUES","892d00e7":"# APPLYING k-FOLD CROSS VALIDATION","2977a4f7":"# SPLITTING THE DATASET INTO TRAINING SET & TEST SET","d0f4936d":"# CHECKING FOR NULL VALUES","5ac9102c":"# DECLARING INDEPENDENT & DEPENDENT VARIABLES","b755bd1c":"# MAKING THE CONFUSION MATRIX","c7428c64":"# REPLACING '0's WITH NaN","66d4553d":"# FEATURE SCALING","e2ead6e3":"*All the NaN values have been replaced by the mean values*","e0ea19a6":"*The '0's have been replaced by NaN values*","9da7b804":"# CLASSIFICATION REPORT","ca265c27":"# IMPORTING THE DATASET","5b07dcb9":"*As we can see, there are 4 columns ('BloodPressure', 'SkinThickness', 'Insulin' & 'BMI') in the dataset that contain '0' values in some places which makes no sense. So, in order to obtain a more accurate result, we need to replace those '0' values with the average values. Therefore, first we need to convert these '0's with the null value and then further replace them with the mean values.*","05879bb3":"# TRAINING LOGISTIC REGRESSION MODEL ON THE TRAINING SET"}}