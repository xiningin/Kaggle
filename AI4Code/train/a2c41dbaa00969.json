{"cell_type":{"749ce56c":"code","17827882":"code","81f9ac9d":"code","d4feca36":"code","b3e0e0bb":"code","2049aad3":"code","2d783884":"code","cd494420":"code","f1f57688":"code","1ade11b3":"code","aedde2b2":"code","cbeb6901":"code","86194489":"code","31b40715":"code","f7b679d5":"code","49dab2f6":"code","d68a492c":"code","74ea99f2":"markdown","92832453":"markdown"},"source":{"749ce56c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))","17827882":"train = pd.read_csv(\"..\/input\/train.csv\")\ntrain.head()","81f9ac9d":"test = pd.read_csv(\"..\/input\/test.csv\")\ntest.head()","d4feca36":"###########################################\n# Suppress matplotlib user warnings\n# Necessary for newer version of matplotlib\nimport warnings\nwarnings.filterwarnings(\"ignore\", category = UserWarning, module = \"matplotlib\")\n#\n# Display inline matplotlib plots with IPython\nfrom IPython import get_ipython\nget_ipython().run_line_magic('matplotlib', 'inline')\n###########################################\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef filter_data(data, condition):\n    \"\"\"\n    Remove elements that do not match the condition provided.\n    Takes a data list as input and returns a filtered list.\n    Conditions should be a list of strings of the following format:\n      '<field> <op> <value>'\n    where the following operations are valid: >, <, >=, <=, ==, !=\n    \n    Example: [\"Sex == 'male'\", 'Age < 18']\n    \"\"\"\n\n    field, op, value = condition.split(\" \")\n    \n    # convert value into number or strip excess quotes if string\n    try:\n        value = float(value)\n    except:\n        value = value.strip(\"\\'\\\"\")\n    \n    # get booleans for filtering\n    if op == \">\":\n        matches = data[field] > value\n    elif op == \"<\":\n        matches = data[field] < value\n    elif op == \">=\":\n        matches = data[field] >= value\n    elif op == \"<=\":\n        matches = data[field] <= value\n    elif op == \"==\":\n        matches = data[field] == value\n    elif op == \"!=\":\n        matches = data[field] != value\n    else: # catch invalid operation codes\n        raise Exception(\"Invalid comparison operator. Only >, <, >=, <=, ==, != allowed.\")\n    \n    # filter data and outcomes\n    data = data[matches].reset_index(drop = True)\n    return data\n\ndef survival_stats(data, outcomes, key, filters = []):\n    \"\"\"\n    Print out selected statistics regarding survival, given a feature of\n    interest and any number of filters (including no filters)\n    \"\"\"\n    \n    # Check that the key exists\n    if key not in data.columns.values :\n        print(\"'{}' is not a feature of the Titanic data. Did you spell something wrong?\".format(key))\n        return False\n\n    # Return the function before visualizing if 'Cabin' or 'Ticket'\n    # is selected: too many unique categories to display\n    if(key == 'Cabin' or key == 'PassengerId' or key == 'Ticket'):\n        print(\"'{}' has too many unique categories to display! Try a different feature.\".format(key))\n        return False\n\n    # Merge data and outcomes into single dataframe\n    all_data = pd.concat([data, outcomes.to_frame()], axis = 1)\n    \n    # Apply filters to data\n    for condition in filters:\n        all_data = filter_data(all_data, condition)\n\n    # Create outcomes DataFrame\n    all_data = all_data[[key, 'Survived']]\n    \n    # Create plotting figure\n    plt.figure(figsize=(8,6))\n\n    # 'Numerical' features\n    if(key == 'Age' or key == 'Fare'):\n        \n        # Remove NaN values from Age data\n        all_data = all_data[~np.isnan(all_data[key])]\n        \n        # Divide the range of data into bins and count survival rates\n        min_value = all_data[key].min()\n        max_value = all_data[key].max()\n        value_range = max_value - min_value\n\n        # 'Fares' has larger range of values than 'Age' so create more bins\n        if(key == 'Fare'):\n            bins = np.arange(0, all_data['Fare'].max() + 20, 20)\n        if(key == 'Age'):\n            bins = np.arange(0, all_data['Age'].max() + 10, 10)\n        \n        # Overlay each bin's survival rates\n        nonsurv_vals = all_data[all_data['Survived'] == 0][key].reset_index(drop = True)\n        surv_vals = all_data[all_data['Survived'] == 1][key].reset_index(drop = True)\n        plt.hist(nonsurv_vals, bins = bins, alpha = 0.6,\n                 color = 'red', label = 'Did not survive')\n        plt.hist(surv_vals, bins = bins, alpha = 0.6,\n                 color = 'green', label = 'Survived')\n    \n        # Add legend to plot\n        plt.xlim(0, bins.max())\n        plt.legend(framealpha = 0.8)\n    \n    # 'Categorical' features\n    else:\n       \n        # Set the various categories\n        if(key == 'Pclass'):\n            values = np.arange(1,4)\n        if(key == 'Parch' or key == 'SibSp'):\n            values = np.arange(0,np.max(data[key]) + 1)\n        if(key == 'Embarked'):\n            values = ['C', 'Q', 'S']\n        if(key == 'Sex'):\n            values = ['male', 'female']\n\n        # Create DataFrame containing categories and count of each\n        frame = pd.DataFrame(index = np.arange(len(values)), columns=(key,'Survived','NSurvived'))\n        for i, value in enumerate(values):\n            frame.loc[i] = [value, \\\n                   len(all_data[(all_data['Survived'] == 1) & (all_data[key] == value)]), \\\n                   len(all_data[(all_data['Survived'] == 0) & (all_data[key] == value)])]\n\n        # Set the width of each bar\n        bar_width = 0.4\n\n        # Display each category's survival rates\n        for i in np.arange(len(frame)):\n            nonsurv_bar = plt.bar(i-bar_width, frame.loc[i]['NSurvived'], width = bar_width, color = 'r')\n            surv_bar = plt.bar(i, frame.loc[i]['Survived'], width = bar_width, color = 'g')\n\n            plt.xticks(np.arange(len(frame)), values)\n            plt.legend((nonsurv_bar[0], surv_bar[0]),('Did not survive', 'Survived'), framealpha = 0.8)\n\n    # Common attributes for plot formatting\n    plt.xlabel(key)\n    plt.ylabel('Number of Passengers')\n    plt.title('Passenger Survival Statistics With \\'%s\\' Feature'%(key))\n    plt.show()\n\n    # Report number of passengers with missing values\n    if sum(pd.isnull(all_data[key])):\n        nan_outcomes = all_data[pd.isnull(all_data[key])]['Survived']\n        print(\"Passengers with missing '{}' values: {} ({} survived, {} did not survive)\".format( \\\n              key, len(nan_outcomes), sum(nan_outcomes == 1), sum(nan_outcomes == 0)))","b3e0e0bb":"import numpy as np\nimport pandas as pd\nfrom IPython.display import display # Allows the use of display() for DataFrames\n\n# Import supplementary visualizations code visuals.py\n#import visuals as vs\n\n# Pretty display for notebooks\n%matplotlib inline\n\n# Load the dataset\n#in_file = 'titanic_data.csv'\n#full_data = pd.read_csv(\"..\/input\/titanictrial1\/titanic_data.csv\")\nfull_data = pd.read_csv(\"..\/input\/train.csv\")\n\n# Print the first few entries of the RMS Titanic data\ndisplay(full_data.head())","2049aad3":"# Store the 'Survived' feature in a new variable and remove it from the dataset\noutcomes = full_data['Survived']\ndata = full_data.drop('Survived', axis = 1)\n\n# Show the new dataset with 'Survived' removed\ndisplay(data.head())","2d783884":"def accuracy_score(truth, pred):\n    \"\"\" Returns accuracy score for input truth and predictions. \"\"\"\n    \n    # Ensure that the number of predictions matches number of outcomes\n    if len(truth) == len(pred): \n        \n        # Calculate and return the accuracy as a percent\n        return \"Predictions have an accuracy of {:.2f}%.\".format((truth == pred).mean()*100)\n    \n    else:\n        return \"Number of predictions does not match number of outcomes!\"\n    \n# Test the 'accuracy_score' function\npredictions = pd.Series(np.ones(5, dtype = int))\nprint(accuracy_score(outcomes[:5], predictions))","cd494420":"def predictions_0(data):\n    \"\"\" Model with no features. Always predicts a passenger did not survive. \"\"\"\n\n    predictions = []\n    for _, passenger in data.iterrows():\n        \n        # Predict the survival of 'passenger'\n        predictions.append(0)\n    \n    # Return our predictions\n    return pd.Series(predictions)\n\n# Make the predictions\npredictions = predictions_0(data)","f1f57688":"print(accuracy_score(outcomes, predictions))","1ade11b3":"survival_stats(data, outcomes, 'Sex')","aedde2b2":"def predictions_1(data):\n    \"\"\" Model with one feature: \n            - Predict a passenger survived if they are female. \"\"\"\n    \n    predictions = []\n    for _, passenger in data.iterrows():\n        predictions.append(1)\n        \n        # Remove the 'pass' statement below \n        # and write your prediction conditions here\n        #pass\n    \n    # Return our predictions\n    return pd.Series(predictions)\n\n# Make the predictions\npredictions = predictions_1(data)","cbeb6901":"print(accuracy_score(outcomes, predictions))","86194489":"survival_stats(data, outcomes, 'Age', [\"Sex == 'male'\"])","31b40715":"def predictions_2(data):\n    \"\"\" Model with two features: \n            - Predict a passenger survived if they are female.\n            - Predict a passenger survived if they are male and younger than 10. \"\"\"\n    \n    predictions = []\n    for _, passenger in data.iterrows():\n        predictions.append(2)\n        \n        # Remove the 'pass' statement below \n        # and write your prediction conditions here\n        #pass\n    \n    # Return our predictions\n    return pd.Series(predictions)\n\n# Make the predictions\npredictions = predictions_2(data)","f7b679d5":"print(accuracy_score(outcomes, predictions))","49dab2f6":"def predictions_3(data):\n    \"\"\" Model with multiple features. Makes a prediction with an accuracy of at least 80%. \"\"\"\n    \n    predictions = []\n    for _, passenger in data.iterrows():\n        predictions.append(3)\n        \n        # Remove the 'pass' statement below \n        # and write your prediction conditions here\n        #pass\n    \n    # Return our predictions\n    return pd.Series(predictions)\n\n# Make the predictions\npredictions = predictions_3(data)","d68a492c":"print(accuracy_score(outcomes, predictions))","74ea99f2":"# Making Predictions","92832453":"# Titanic Survival Exploration"}}