{"cell_type":{"9bd78063":"code","86c0ba7f":"code","7a8b5746":"code","335662e7":"code","84b221db":"code","959e6b7f":"code","6130294f":"code","cb5c0441":"code","2c2c42ee":"code","0bc89a1a":"code","69327d5d":"code","1fccabed":"code","04719ad6":"code","e50dbe36":"code","6efaeac8":"code","5e6903f7":"code","b66336b8":"code","41a67b47":"code","f60655ba":"code","f399cd66":"code","4bb602b6":"markdown","b07d3e04":"markdown","ea1ae476":"markdown","68a5c39a":"markdown","866e98b7":"markdown","cd137b0c":"markdown","57f63fad":"markdown","c7aebe39":"markdown","6096e85d":"markdown","1a36cbd5":"markdown","bc4fdcd1":"markdown","7810b9f8":"markdown","efc10f88":"markdown","1a33579f":"markdown","8fa36f1a":"markdown","96deac06":"markdown","0797d63f":"markdown","1ec149be":"markdown","b73b9846":"markdown","0ca9ceb6":"markdown","f7e4c53a":"markdown","691a9514":"markdown","b6eece50":"markdown","62823ae7":"markdown","e5879b87":"markdown"},"source":{"9bd78063":"import pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport datetime as dt\nimport warnings\nfrom wordcloud import WordCloud","86c0ba7f":"df = pd.read_csv('..\/input\/netflix-shows\/netflix_titles.csv')\ndf.head(3)","7a8b5746":"df.drop(columns=['show_id'], inplace=True)","335662e7":"df['duration'] = df['duration'].apply(lambda x: x.split(' ')[0])\ndf['duration'] = pd.to_numeric(df['duration'])","84b221db":"df.dropna(subset=['rating', 'date_added'], inplace=True)","959e6b7f":"#CREATE DF\ndf_content = df.groupby('country').count().sort_values('type', ascending=False)\ndf_content.reset_index(inplace=True)\n\n#PLOT\nplt.style.use('ggplot')\nfig1, ax1 = plt.subplots(figsize=(11,7))\n#define x, y\nx_content = df_content[['country', 'type']].head(10)['type']\ny_content = df_content[['country', 'type']].head(10)['country']\n#plot\nax1.barh(y_content, x_content, color='steelblue')\n#sort bars ASC\nplt.gca().invert_yaxis()\n#annotate values\nfor i, v in enumerate(x_content):\n    ax1.text(v+8, i+0.1, str(v))\n    \n#labels\nax1.set_title('Amount of Content', fontsize=15)\nplt.show()","6130294f":"#CREATE DF\ncontent_type = df.groupby('type').count()\ncontent_type.reset_index(inplace=True)\ncontent_type = content_type[['type', 'title']]\ncontent_type.columns = ['type', 'count']\n\n#PLOT\nfig2, ax2 = plt.subplots(figsize=(25, 6))\ncolors = ['steelblue', 'lightsalmon']\n#plot\nax2.pie(x=content_type['count'], startangle=90, explode=(0, 0.03), colors=colors, autopct='%1.1f%%', textprops={'fontsize': 12})\n#labels\nax2.legend(labels=content_type['type'], loc='upper left')\nplt.show()","cb5c0441":"df_country = df[~df['country'].isna()]\ncountries = ['United States', 'India', 'United Kingdom', 'Japan']\n\n#CREATE COUNTRY DF's\ndef country_type(country):\n    df_country_type = df_country[df_country['country'] == country]\n    df_country_type = df_country_type.groupby('type').count()\n    df_country_type.reset_index(inplace=True)\n    df_country_type = df_country_type[['type', 'title']]\n    df_country_type.columns = ['type', 'count']\n    return df_country_type\n\n\nusa_type = country_type('United States')\nindia_type = country_type('India')\nuk_type = country_type('United Kingdom')\njapan_type = country_type('Japan')\n\n#PLOT\ncolor1 = 'steelblue'\ncolor2 = 'lightsalmon'\nfig3, ax3 = plt.subplots(figsize=(11, 7))\n#plot\nax3.bar(x='USA', height=usa_type.iloc[0][1], color=color1)\nax3.bar(x='USA', height=usa_type.iloc[1][1], bottom=usa_type.iloc[0][1], color=color2)\nax3.bar(x='India', height=india_type.iloc[0][1], color=color1)\nax3.bar(x='India', height=india_type.iloc[1][1], bottom=india_type.iloc[0][1], color=color2)\nax3.bar(x='UK', height=uk_type.iloc[0][1], color=color1)\nax3.bar(x='UK', height=uk_type.iloc[1][1], bottom=uk_type.iloc[0][1], color=color2)\nax3.bar(x='Japan', height=japan_type.iloc[0][1], color=color1)\nax3.bar(x='Japan', height=japan_type.iloc[1][1], bottom=japan_type.iloc[0][1], color=color2)\n#labels\nax3.legend(labels=usa_type['type'], loc='upper right', prop={'size': 15})\nax3.set_title('Content Type by Country', fontsize=15)\nplt.show()","2c2c42ee":"#CREATE DF\nrating_type = df['rating'].value_counts().reset_index()\n#PLOT\nfig4, ax4 = plt.subplots(figsize=(11,7))\nax4.tick_params(axis='x', rotation=45)\n#define x, y\nx_rating_type = rating_type['index']\ny_rating_type = rating_type['rating']\n#plot\nax4.bar(x=x_rating_type, height=y_rating_type, color='steelblue')\n#annotate values\nfor a,b in zip(x_rating_type, y_rating_type): \n    plt.annotate('{:.0f}%'.format(round(int(b)\/y_rating_type.sum()*100,0)), xy=(a, b), xytext=(-10,4), textcoords='offset points')\n#labels\nax4.set_title('Rating Type in all Countries', fontsize=15)\nplt.show()","0bc89a1a":"#CREATE DF's\nusa = df[df['country'] == 'United States']\nindia = df[df['country'] == 'India']\nuk = df[df['country'] == 'United Kingdom']\njapan = df[df['country'] == 'Japan']\nrating_type_usa = usa['rating'].value_counts().reset_index()\nrating_type_india = india['rating'].value_counts().reset_index()\nrating_type_uk = uk['rating'].value_counts().reset_index()\nrating_type_japan = japan['rating'].value_counts().reset_index()\n\n#ALIGN DF's\nfor x in rating_type['index']:\n    if not rating_type_usa['index'].str.match(x).any():\n        rating_type_usa = rating_type_usa.append({'index' : x, 'rating' : 0}, ignore_index=True)\n\nfor x in rating_type['index']:\n    if not rating_type_india['index'].str.match(x).any():\n        rating_type_india = rating_type_india.append({'index' : x, 'rating' : 0}, ignore_index=True)\n\nfor x in rating_type['index']:\n    if not rating_type_uk['index'].str.match(x).any():\n        rating_type_uk = rating_type_uk.append({'index' : x, 'rating' : 0}, ignore_index=True)\n        \nfor x in rating_type['index']:\n    if not rating_type_japan['index'].str.match(x).any():\n        rating_type_japan = rating_type_japan.append({'index' : x, 'rating' : 0}, ignore_index=True)\n\n        #PLOT\nfig5, ax5 = plt.subplots(figsize=(12,7))\nax5.tick_params(axis='x', rotation=45)\n#define y\ny_rating_type_usa = rating_type_usa['rating']\/rating_type_usa['rating'].sum()\ny_rating_type_india = rating_type_india['rating']\/rating_type_india['rating'].sum()\ny_rating_type_uk = rating_type_uk['rating']\/rating_type_uk['rating'].sum()\ny_rating_type_japan = rating_type_japan['rating']\/rating_type_japan['rating'].sum()\n#plot\nax5.plot(x_rating_type, y_rating_type_usa, 'o-', color='steelblue', label='USA')\nax5.plot(x_rating_type, y_rating_type_india, 'o-', color='lightsalmon', label='India')\nax5.plot(x_rating_type, y_rating_type_uk, 'o-', color='olivedrab', label='UK')\nax5.plot(x_rating_type, y_rating_type_japan, 'o-', color='indianred', label='Japan')\n#labels\nax5.set_title('Rating Type Comparison', fontsize=15)\nax5.set_ylabel('Ratio', fontsize=15)\nax5.legend(loc='upper right', prop={'size': 15})\nplt.show()","69327d5d":"#FORMAT\ndf['date_added'] = df['date_added'].str.replace(',', '')\ndf['date_added'] = df['date_added'].str.strip()\ndf['date_added'] = pd.to_datetime(df['date_added'], format='%B %d %Y')\ndf['date_added'] = df['date_added'].dt.strftime('%m\/%d\/%Y')\n#df['date_added'] = pd.to_datetime(df['date_added'], format='%m\/%d\/%Y')\n\n#CREATE DF\ndf['year'] = df['date_added'].str.split('\/').str[2]\ndf_without_2020 = df[~(df['year']=='2020')]\ndf_added = df_without_2020.groupby('year').agg('count')\ndf_added.reset_index(inplace=True)\ndf_added = df_added[['year', 'type']]\n\n#PLOT\nfig6, ax6 = plt.subplots(figsize=(11,7))\n#plot\nax6.bar(df_added['year'], df_added['type'], color='steelblue')\n#annotate values\nfor a,b in zip(df_added['year'], df_added['type']): \n    plt.annotate(str(b), xy=(a, b), xytext=(-8,4), textcoords='offset points')\n#labels\nax6.set_title('Content added over the years', fontsize=15)\nplt.show()","1fccabed":"#CREATE DF's\ndf3 = df_without_2020[df_without_2020['type'] == 'Movie']\ndf4 = df_without_2020[df_without_2020['type'] == 'TV Show']\nx3 = df3.groupby('year').agg('count')\nx3.reset_index(inplace=True)\nx4 = df4.groupby('year').agg('count')\nx4.reset_index(inplace=True)\n\n#PLOT\nfig7, ax7 = plt.subplots(figsize=(11, 7))\n#plot\nax7.plot(x3['year'], x3['type'], 'o-', color='steelblue')\nax7.plot(x4['year'], x4['type'], 'o-', color='lightsalmon')\n#define max values\ny_max_movies = max(x3['type'])\ny_max_tv = max(x4['type'])\nx_max_movies = x3.iloc[x3['type'].idxmax]['year']\nx_max_tv = x4.iloc[x4['type'].idxmax]['year']\n#annotate max values\nplt.annotate(str(y_max_movies), xy=(x_max_movies, y_max_movies), xytext=(0,5), textcoords='offset points')\nplt.annotate(str(y_max_tv), xy=(x_max_tv, y_max_tv), xytext=(0,5), textcoords='offset points')\n#labels\nplt.yticks(np.arange(0, y_max_movies, step=200))\nax7.legend(labels=['Movies', 'TV Shows'], loc='lower right', prop={'size': 13})\nax7.set_title('Movies\/TV Shows added over the years', fontsize=15)\nplt.show()","04719ad6":"df_oldest_movies = df.sort_values('release_year')[['type', 'title', 'release_year']]\ndf_oldest_movies[df_oldest_movies['type'] == 'Movie']\ndf_oldest_movies = df_oldest_movies[['title', 'release_year']]\ndf_oldest_movies.head(10)","e50dbe36":"df_oldest_shows = df.sort_values('release_year')[['type', 'title', 'release_year']]\ndf_oldest_shows[df_oldest_shows['type'] == 'TV Show']\ndf_oldest_shows = df_oldest_shows[['title', 'release_year']]\ndf_oldest_shows.head(10)","6efaeac8":"#CREATE DF's\ndf_director = df[~df['director'].isna()]\n#all countries\ndf_director_all = df_director.groupby('director').count().sort_values('type', ascending=False)\ndf_director_all.reset_index(inplace=True)\ndf_director_all = df_director_all[['director', 'type']].head(10)\ndf_director_all = df_director_all.sort_values('type')\n\n#countries\ndef country_director(country):\n    df_country_director = df_director[df_director['country'] == country]\n    df_country_director = df_country_director.groupby('director').count().sort_values('type', ascending=False)\n    df_country_director.reset_index(inplace=True)\n    df_country_director = df_country_director[['director', 'type']].head(10)\n    df_country_director = df_country_director.sort_values('type') \n    return df_country_director\n\ndf_director_usa = country_director('United States')\ndf_director_india = country_director('India')\ndf_director_uk = country_director('United Kingdom')\ndf_director_japan = country_director('Japan')\n\n#PLOT\nfig8, ax8 = plt.subplots(2, 3, figsize=(17,12))\nax8[0, 0].barh(df_director_all['director'], df_director_all['type'], color='steelblue')\nax8[0, 0].set_title('Top 10 Directors Worldwide', fontsize=15)\n\nax8[0, 1].barh(df_director_usa['director'], df_director_usa['type'], color='steelblue')\nax8[0, 1].set_title('Top 10 Directors USA', fontsize=15)\n\nax8[0, 2].barh(df_director_india['director'], df_director_india['type'], color='steelblue')\nax8[0, 2].set_title('Top 10 Directors India', fontsize=15)\n\nax8[1, 0].barh(df_director_uk['director'], df_director_uk['type'], color='steelblue')\nax8[1, 0].set_title('Top 10 Directors UK', fontsize=15)\n\nax8[1, 1].barh(df_director_japan['director'], df_director_japan['type'], color='steelblue')\nax8[1, 1].set_title('Top 10 Directors Japan', fontsize=15)\n\nax8[1, 2].axis('off')\n\nfig8.tight_layout(pad=2)","5e6903f7":"#FORMAT\ndf_cast = df[~df['cast'].isna()]\ncast = ', '.join(str(v) for v in df_cast['cast'])\ncast = cast.split(', ') \ncast_list = []\nfor x in cast:\n    cast_list.append((x.strip(), cast.count(x)))\ncast_list = sorted(cast_list, key=lambda x: x[1], reverse=True)\ncast_list = list(dict.fromkeys(cast_list))\n\n#CREATE DF's\n#all countries\ndf_cast_all = pd.DataFrame(cast_list, columns=('actor', 'count'))\ndf_cast_all = df_cast_all.head(10)\ndf_cast_all.sort_values('count', inplace=True)\n#countries\ndef country_cast(country):\n    df_country_cast = df_cast[df_cast['country'] == country]\n    df_country_cast = ', '.join(str(v) for v in df_country_cast['cast'])\n    df_country_cast = df_country_cast.split(', ')\n    cast_list1 = []\n    for x in df_country_cast:\n        cast_list1.append((x.strip(), df_country_cast.count(x)))\n    cast_list1 = sorted(cast_list1, key=lambda x: x[1], reverse=True)\n    cast_list1 = list(dict.fromkeys(cast_list1))\n    cast_list1 = pd.DataFrame(cast_list1, columns=('actor', 'count'))\n    cast_list1 = cast_list1.head(10)\n    cast_list1.sort_values('count', inplace=True)\n    return cast_list1\n\ndf_cast_usa = country_cast('United States')\ndf_cast_india = country_cast('India')\ndf_cast_uk = country_cast('United Kingdom')\ndf_cast_japan = country_cast('Japan')\n\n#PLOT\nfig15, ax15 = plt.subplots(2, 3, figsize=(17,12))\nax15[0, 0].barh(df_cast_all['actor'], df_cast_all['count'], color='steelblue')\nax15[0, 0].set_title('Top 10 Actors Worldwide', fontsize=15)\n\nax15[0, 1].barh(df_cast_usa['actor'], df_cast_usa['count'], color='steelblue')\nax15[0, 1].set_title('Top 10 Actors USA', fontsize=15)\n\nax15[0, 2].barh(df_cast_india['actor'], df_cast_india['count'], color='steelblue')\nax15[0, 2].set_title('Top 10 Actors India', fontsize=15)\n\nax15[1, 0].barh(df_cast_uk['actor'], df_cast_uk['count'], color='steelblue')\nax15[1, 0].set_title('Top 10 Actors UK', fontsize=15)\n\nax15[1, 1].barh(df_cast_japan['actor'], df_cast_japan['count'], color='steelblue')\nax15[1, 1].set_title('Top 10 Actors Japan', fontsize=15)\n\nax15[1, 2].axis('off')\n\nfig15.tight_layout(pad=2)","b66336b8":"#CREATE DF's\ndf_movies = df[df['type'] == 'Movie']\n#all countries\ndf_country_duration_all = df_movies.groupby('duration').count()\ndf_country_duration_all.reset_index(inplace=True)\ndf_country_duration_all = df_country_duration_all[['duration', 'type']]\ndf_country_duration_all.columns = ['duration', 'count']\ndf_country_duration_all.sort_values('duration', inplace=True)\ndf_country_duration_all['rel'] = df_country_duration_all['count']\/df_country_duration_all['count'].sum()\ndf_country_duration_all['durcount']=df_country_duration_all['duration']*df_country_duration_all['count']\naverage_all_movies = df_country_duration_all['durcount'].sum()\/df_country_duration_all['count'].sum()\n#countries\ndef country_duration(country):\n    df_country_duration = df[(df['country'] == country) & (df['type'] == 'Movie')]\n    df_country_duration = df_country_duration.groupby('duration').count()\n    df_country_duration.reset_index(inplace=True)\n    df_country_duration = df_country_duration[['duration', 'type']]\n    df_country_duration.columns = ['duration', 'count']\n    df_country_duration.sort_values('duration', inplace=True)\n    df_country_duration['rel'] = df_country_duration['count']\/df_country_duration['count'].sum()\n    df_country_duration['durcount']=df_country_duration['duration']*df_country_duration['count']\n    return df_country_duration\n\n#PLOT\n#all countries\nfig9, ax9 = plt.subplots(figsize=(20, 3))\n#plot\nax9.plot(df_country_duration_all['duration'], df_country_duration_all['rel'], color='steelblue')\nplt.axvline(x=average_all_movies, color='lightsalmon', linestyle='--')\n#labels\nax9.set_title('Movie duration in all countries', fontsize=15)\nax9.set_ylabel('Relative Distribution', fontsize=15)\nax9.set_xlabel('Minutes', fontsize=15)\nax9.legend(labels=['duration', 'average duration'],loc='upper right', prop={'size': 15})\n#countries\nfor x in range(4):\n    for y in range(1):\n        df_count = country_duration(countries[x])\n        fig10, ax10 = plt.subplots(figsize=(20, 3))\n        #plot\n        ax10.plot(df_count['duration'], df_count['rel'], color='steelblue')\n        ax10.set_title('Movie duration in '+countries[x], fontsize=15)\n        ax10.set_ylabel('Relative Distribution', fontsize=15)\n        ax10.set_xlabel('Minutes', fontsize=15)\n        average_movies = df_count['durcount'].sum()\/df_count['count'].sum()\n        plt.axvline(x=average_movies, color='lightsalmon', linestyle='--')\n        ax10.legend(labels=['duration', 'average duration'],loc='upper right', prop={'size': 15})\n        plt.show()","41a67b47":"#CREATE DF's\ndf_shows = df[df['type'] == 'TV Show']\ndf_shows['duration'].value_counts()\n\n#all countries\ndf_seasons_all = df_shows.groupby('duration').count()\ndf_seasons_all.reset_index(inplace=True)\ndf_seasons_all = df_seasons_all[['duration', 'type']]\ndf_seasons_all.columns = ['seasons', 'count']\n#countries\ndef country_seasons(country):\n    df_country_seasons = df[(df['country'] == country) & (df['type'] == 'TV Show')]\n    df_country_seasons = df_country_seasons.groupby('duration').count()\n    df_country_seasons.reset_index(inplace=True)\n    df_country_seasons = df_country_seasons[['duration', 'type']]\n    df_country_seasons.columns = ['seasons', 'count']\n    return df_country_seasons\n\n#PLOT\n#all countries\nfig11, ax11 = plt.subplots(figsize=(9, 5))\n#plot\nax11.bar(df_seasons_all['seasons'], df_seasons_all['count'], color='steelblue')\n#annotate values\nfor a,b in zip(df_seasons_all['seasons'], df_seasons_all['count']): \n    plt.annotate('{:.0f}%'.format(round(int(b)\/df_seasons_all['count'].sum()*100)), xy=(a, b), xytext=(-8,3), textcoords='offset points', fontsize = 10)\n\n#labels\nplt.xticks(np.arange(0, 16, step=1))\nax11.set_title('Number of Seasons in TV Shows Worldwide', fontsize=15)\nax11.set_ylabel('# TV Shows', fontsize=15)\nax11.set_xlabel('Seasons', fontsize=15)\n#countries\nfor x in range(4):\n    for y in range(1):\n        df_count_sea = country_seasons(countries[x])\n        fig12, ax12 = plt.subplots(figsize=(9, 5))\n        #plot\n        ax12.bar(df_count_sea['seasons'], df_count_sea['count'], color='steelblue')\n        #annotate values\n        for a,b in zip(df_count_sea['seasons'], df_count_sea['count']): \n            plt.annotate('{:.0f}%'.format(round(int(b)\/df_count_sea['count'].sum()*100)), xy=(a, b), xytext=(-8,3), textcoords='offset points', fontsize = 10)\n\n        #labels\n        ax12.set_title('Number of Seasons in TV Shows from '+countries[x], fontsize=15)\n        #ax12.set_ylabel('Relative Distribution', fontsize=15)\n        ax12.set_xlabel('Seasons', fontsize=15)\n        ax12.set_ylabel('# TV Shows', fontsize=15)\n        #ax12.legend(labels=['duration', 'average duration'],loc='upper right', prop={'size': 15})\n        plt.xticks(np.arange(0, 16, step=1))\nplt.show()","f60655ba":"#FORMAT\nvalues = ', '.join(str(v) for v in df_director['listed_in'])\nvalues = values.split(', ')\nlst1 = []\nfor x in values:\n    lst1.append((x.strip(), values.count(x)))\nlst1 = sorted(lst1, key=lambda x: x[1], reverse=True)\nlst1 = list(dict.fromkeys(lst1))\n#CREATE DF\ndf_cat = pd.DataFrame(lst1, columns=('category', 'count'))\ndf_cat = df_cat.head(15)\n\n#PLOT\nfig13, ax13 = plt.subplots(figsize=(11, 7))\n#plot\nax13.barh(df_cat['category'], df_cat['count'], color='steelblue')\n#sort bars ASC\nplt.gca().invert_yaxis()\n#annotate values\nfor i, v in enumerate(df_cat['count']):\n    ax13.text(v+5, i+0.1, str(v))\n    \n#labels\nax13.set_title('Top 15 Categories', fontsize=15)\nplt.xticks(np.arange(0, 2000, step=200))\nplt.show()","f399cd66":"#CREATE WORDCLOUD\nwords = ' '.join(str(v) for v in df['title'])\nwordcloud = WordCloud(max_words=200, width=1920, height=1080, background_color='gainsboro').generate(words)\n#PLOT\nfig16, ax16 = plt.subplots(figsize=(20,15))\n#plot\nax16.imshow(wordcloud, interpolation='None')\n#labels\nax16.set_title('Most used Words for Titles',fontsize = 30)\nax16.axis(\"off\")\nplt.show()","4bb602b6":"# 5. Directors with the most content","b07d3e04":"* From 2016 onwards, Netflix started to add alot more movies than TV shows (nearly twice as many movies than shows every year).","ea1ae476":"### Some of the oldest movies","68a5c39a":"* This analysis contains country exclusive content only, e.g. movies that are available in multiple countries are not considered.\n* The US has by far the most content, followed by India with less than half the amount.\n* Only 5 more countries (the UK, Japan, Canada, South Korea and Spain) pass the 100 mark.","866e98b7":"**The purpose of this notebook is trying to answer the following questions about the Netflix-Content dataset by comparing the United States, India, the United Kingdom and Japan:**","cd137b0c":"### Some of the oldest TV shows","57f63fad":"# 8. Average number of season per TV show","c7aebe39":"# 7. Average movie duration","6096e85d":"# 3. Rating type","1a36cbd5":"# 9. Top 15 genres","bc4fdcd1":"* One third of the content falls under TV-MA: *This program is specifically designed to be viewed by adults and therefore may be unsuitable for children under 17)*.\n* 27% of the content falls under TV-14: *This program contains some material that many parents would find unsuitable for children under 14 years of age.*\n* 11% of the content falls under TV-PG: *This program contains material that parents may find unsuitable for younger children.*\n* 8% of the content is rated R: *Viewers under 17 require a accompanying parent or adult guardian.*\n* It is important to mention that TV-MA and R are fairly similar on how they are rated. \n* **According to this analysis, more than 75% of the content are not suitable for younger viewers and children under the age of 13.**","7810b9f8":"* The US movie\/TV show ratio closely resembles the worldwide ratio.\n* India's content almost completely consists of movies.\n* In the UK the ratio is close to 50\/50.\n* Japan has more TV shos than movies.","efc10f88":"# 6. Actors with the most content","1a33579f":"* The US has relatively more content suitable for younger viewers and less adult-rated content compared to other countries.\n* India has the highest ratio on adult-rated content.","8fa36f1a":"### Clean Data","96deac06":"Hey there! I am new to Data Science and Kaggle so please review my work. Any kind of feedback is welcomed!","0797d63f":"### Movies \/ TV Shows added over the years","1ec149be":"1. Countries with most content\n2. Content type\n3. Rating type\n4. Content added over the years\n5. Directors with the most content\n6. Actors with the most content\n7. Average movie duration \n8. Average number of season per TV show \n9. Top 15 genres\n10. Most used words for titles","b73b9846":"* There are about twice as many movies than TV shows on Netflix worldwide.","0ca9ceb6":"* The global average is at around 100 minutes.\n* Movies in the UK are shorter than in other countries (just over 80 minutes).\n* Movies in the US and Japan are on average between 90 and 100 minutes.\n* Movies in India are especially long with an average of over 125 minutes.","f7e4c53a":"# 1. Countries with most content (country-only content)","691a9514":"# 2. Content type","b6eece50":"* The amount of content on Netflix exploded in 2016\n* At least 400 movies\/TV shows are added every year since 2016\n* The biggest yearly conten growth was in 2017","62823ae7":"# 10. Most used words for titles","e5879b87":"# 4. Content added over the years"}}