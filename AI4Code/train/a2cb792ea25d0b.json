{"cell_type":{"7470d9fd":"code","875eadb9":"code","45a8e4dd":"code","22da8193":"code","bf8d8ba1":"code","6c179fd6":"code","1a1b5a87":"code","24640e62":"code","61ace3f8":"code","20c33a48":"code","c1057c1b":"code","e3c007d8":"code","177f44e5":"code","771ed8e9":"code","cf7c7d2a":"code","ab477687":"code","13bbb24d":"code","75280899":"code","27357dfe":"code","6e38e9e9":"code","ea603390":"code","1a9609f0":"code","04e35967":"code","e0508bef":"code","c1b3c72c":"code","324974dc":"code","2ac6939a":"code","fe3248d4":"code","e5fdce51":"code","08cd3381":"code","e0092ffe":"code","44a7c49e":"code","9d3c6b50":"code","3aa325f3":"markdown","e9738c62":"markdown","4eb138aa":"markdown","84144ba2":"markdown","8265b64a":"markdown","3b84bd0a":"markdown","854e5be0":"markdown","67f1db9c":"markdown","951e27c2":"markdown","f19bc89e":"markdown","2086fc84":"markdown","83d73491":"markdown","dfa30530":"markdown","31b805f3":"markdown","b8c99396":"markdown","8eab700a":"markdown","a536bd8a":"markdown","2306cd73":"markdown","44485939":"markdown","d3f4c15a":"markdown","62fba391":"markdown","c1876610":"markdown","328ee9a1":"markdown","1b366f8a":"markdown","7addef80":"markdown","5e9eb074":"markdown","7c9c14d5":"markdown","b4aab90f":"markdown","e5de4760":"markdown","2e43a96e":"markdown","82fb0c88":"markdown","e57051a8":"markdown","15a0144a":"markdown","f9b5916f":"markdown"},"source":{"7470d9fd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('..\/input\/acea-water-prediction'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","875eadb9":"Aquifer_Doganella = pd.read_csv('..\/input\/acea-water-prediction\/Aquifer_Doganella.csv', index_col = 'Date')\nAquifer_Auser = pd.read_csv('..\/input\/acea-water-prediction\/Aquifer_Auser.csv', index_col = 'Date')\nWater_Spring_Amiata = pd.read_csv('..\/input\/acea-water-prediction\/Water_Spring_Amiata.csv', index_col = 'Date')\nLake_Bilancino = pd.read_csv('..\/input\/acea-water-prediction\/Lake_Bilancino.csv', index_col = 'Date')\nWater_Spring_Madonna_di_Canneto = pd.read_csv('..\/input\/acea-water-prediction\/Water_Spring_Madonna_di_Canneto.csv', index_col = 'Date')\nAquifer_Luco = pd.read_csv('..\/input\/acea-water-prediction\/Aquifer_Luco.csv', index_col = 'Date')\nAquifer_Petrignano = pd.read_csv('..\/input\/acea-water-prediction\/Aquifer_Petrignano.csv', index_col = 'Date')\nWater_Spring_Lupa = pd.read_csv('..\/input\/acea-water-prediction\/Water_Spring_Lupa.csv', index_col = 'Date')\nRiver_Arno = pd.read_csv('..\/input\/acea-water-prediction\/River_Arno.csv', index_col = 'Date')\n\n\nprint('Datasets shape:')\nprint('*'*30)\nprint('Aquifer_Doganella --> {}'.format(Aquifer_Doganella.shape))\nprint('Aquifer_Auser --> {}'.format(Aquifer_Auser.shape))\nprint('Water_Spring_Amiata --> {}'.format(Water_Spring_Amiata.shape))\nprint('Lake_Bilancino --> {}'.format(Lake_Bilancino.shape))\nprint('Water_Spring_Madonna_di_Canneto --> {}'.format(Water_Spring_Madonna_di_Canneto.shape))\nprint('Aquifer_Luco --> {}'.format(Aquifer_Luco.shape))\nprint('Aquifer_Petrignano --> {}'.format(Aquifer_Petrignano.shape))\nprint('Water_Spring_Lupa --> {}'.format(Water_Spring_Lupa.shape))\nprint('River_Arno --> {}'.format(River_Arno.shape))\nprint('*'*30)","45a8e4dd":"datasets = [Aquifer_Doganella, Aquifer_Auser, Water_Spring_Amiata,\n            Lake_Bilancino, Water_Spring_Madonna_di_Canneto, Aquifer_Luco,\n            Aquifer_Petrignano, Water_Spring_Lupa, River_Arno]\n\ndatasets_names = ['Aquifer_Doganella', 'Aquifer_Auser', 'Water_Spring_Amiata',\n                'Lake_Bilancino', 'Water_Spring_Madonna_di_Canneto', 'Aquifer_Luco',\n                'Aquifer_Petrignano', 'Water_Spring_Lupa', 'River_Arno']\ndef bar_plot(x, y, title, palette_len, xlim = None, ylim = None, \n             xticklabels = None, yticklabels = None, \n             top_visible = False, right_visible = False, \n             bottom_visible = True, left_visible = False,\n             xlabel = None, ylabel = None, figsize = (10, 4),\n             axis_grid = 'y'):\n    fig, ax = plt.subplots(figsize = figsize)\n    plt.title(title, size = 15, fontweight = 'bold', fontfamily = 'serif')\n\n    for i in ['top', 'right', 'bottom', 'left']:\n        ax.spines[i].set_color('black')\n    \n    ax.spines['top'].set_visible(top_visible)\n    ax.spines['right'].set_visible(right_visible)\n    ax.spines['bottom'].set_visible(bottom_visible)\n    ax.spines['left'].set_visible(left_visible)\n\n    sns.barplot(x = x, y = y, edgecolor = 'black', ax = ax,\n                palette = reversed(sns.color_palette(\"viridis\", len(palette_len))))\n    ax.set_xlim(xlim)\n    ax.set_ylim(ylim)    \n    ax.set_xticklabels(xticklabels, fontfamily = 'serif')\n    ax.set_yticklabels(yticklabels, fontfamily = 'serif')\n    plt.xlabel(xlabel, fontfamily = 'serif')\n    plt.ylabel(ylabel, fontfamily = 'serif')\n    ax.grid(axis = axis_grid, linestyle = '--', alpha = 0.9)\n    plt.show()\n    \n\nfor i in range(len(datasets)):\n    NaN_values = (datasets[i].isnull().sum() \/ len(datasets[i]) * 100).sort_values(ascending = False)\n    bar_plot(x = NaN_values, \n             y = NaN_values.index,\n             title = '{}: NaN values (%)'.format(datasets_names[i]),\n             palette_len = NaN_values.index, \n             xlim = (0, 100), \n             xticklabels = range(0, 101, 20),\n             yticklabels = NaN_values.index,\n             left_visible = True,\n             figsize = (10, 8), axis_grid = 'x')","22da8193":"Aquifer_Doganella = Aquifer_Doganella.fillna(method='bfill')\nprint(Aquifer_Doganella.shape)\n\n# Add averages isntead of still missing values\nAquifer_Doganella = Aquifer_Doganella.fillna(Aquifer_Doganella.mean())\nprint(Aquifer_Doganella.shape)\n# Drop rows with NaN value\n# Aquifer_Doganella = Aquifer_Doganella.dropna()\n# print(Aquifer_Doganella.shape)","bf8d8ba1":"Aquifer_Doganella=pd.read_csv(\"..\/input\/acea-water-prediction\/Aquifer_Doganella.csv\")\nAquifer_Doganella = Aquifer_Doganella.fillna(method='bfill')\nprint(\"Aquifer_Doganella-:\")\nprint(Aquifer_Doganella.shape)\nprint(\"*\"*30)\n\nAquifer_Auser=pd.read_csv(\"..\/input\/acea-water-prediction\/Aquifer_Auser.csv\")\nAquifer_Auser = Aquifer_Auser.fillna(method='bfill')\nprint(\"Aquifer_Auser-:\")\nprint(Aquifer_Auser.shape)\nprint(\"*\"*30)\n\nWater_Spring_Amiata=pd.read_csv(\"..\/input\/acea-water-prediction\/Water_Spring_Amiata.csv\")\nWater_Spring_Amiata = Water_Spring_Amiata.fillna(method='bfill')\nprint(\"Water_Spring_Amiata-:\")\nprint(Water_Spring_Amiata.shape)\nprint(\"*\"*30)\n\nLake_Bilancino=pd.read_csv(\"..\/input\/acea-water-prediction\/Lake_Bilancino.csv\")\nLake_Bilancino = Lake_Bilancino.fillna(method='bfill')\nprint(\"Lake_Bilancino-:\")\nprint(Lake_Bilancino.shape)\nprint(\"*\"*30)\n\nWater_Spring_Madonna_di_Canneto=pd.read_csv(\"..\/input\/acea-water-prediction\/Water_Spring_Madonna_di_Canneto.csv\")\nWater_Spring_Madonna_di_Canneto = Water_Spring_Madonna_di_Canneto.fillna(method='bfill')\nprint(\"Water_Spring_Madonna_di_Canneto-:\")\nprint(Water_Spring_Madonna_di_Canneto.shape)\nprint(\"*\"*30)\n\nAquifer_Luco=pd.read_csv(\"..\/input\/acea-water-prediction\/Aquifer_Luco.csv\")\nAquifer_Luco = Aquifer_Luco.fillna(method='bfill')\nprint(\"Aquifer_Luco-:\")\nprint(Aquifer_Luco.shape)\nprint(\"*\"*30)\n\nAquifer_Petrignano=pd.read_csv(\"..\/input\/acea-water-prediction\/Aquifer_Petrignano.csv\")\nAquifer_Petrignano = Aquifer_Petrignano.fillna(method='bfill')\nprint(\"Aquifer_Petrignano-:\")\nprint(Aquifer_Petrignano.shape)\nprint(\"*\"*30)\n\nWater_Spring_Lupa=pd.read_csv(\"..\/input\/acea-water-prediction\/Water_Spring_Lupa.csv\")\nWater_Spring_Lupa = Water_Spring_Lupa.fillna(method='bfill')\nprint(\"Water_Spring_Lupa-:\")\nprint(Water_Spring_Lupa.shape)\nprint(\"*\"*30)\n\nRiver_Arno=pd.read_csv(\"..\/input\/acea-water-prediction\/River_Arno.csv\")\nRiver_Arno = River_Arno.fillna(method='bfill')\nprint(\"River_Arno-:\")\nprint(River_Arno.shape)\nprint(\"*\"*30)\n\n","6c179fd6":"print(\"Aquifer_Doganella:\")\nprint('*'*30)\nprint(Aquifer_Doganella.columns)\nprint()\nprint(\"Aquifer_Auser:\")\nprint('*'*30)\nprint(Aquifer_Auser.columns)\nprint()\nprint(\"Aquifer_Luco:\")\nprint('*'*30)\nprint(Aquifer_Luco.columns)\nprint()\nprint(\"Aquifer_Petrignano:\")\nprint('*'*30)\nprint(Aquifer_Petrignano.columns)","1a1b5a87":"print(\"Aquifer_Doganella:\")\nprint('*'*30)\nprint(Aquifer_Doganella.describe())\nprint()\nprint(\"Aquifer_Auser:\")\nprint('*'*30)\nprint(Aquifer_Auser.describe())\nprint()\nprint(\"Aquifer_Luco:\")\nprint('*'*30)\nprint(Aquifer_Luco.describe())\nprint()\nprint(\"Aquifer_Petrignano:\")\nprint('*'*30)\nprint(Aquifer_Petrignano.describe())","24640e62":"#Checking relationship between variables\ndatasets = [Aquifer_Doganella, Aquifer_Auser,Aquifer_Luco,Aquifer_Petrignano]\ndatasets_names = [\"Aquifer_Doganella\", \"Aquifer_Auser\",\"Aquifer_Luco\",\"Aquifer_Petrignano\"]\ni=0\nfor data in datasets:\n    cor=data.corr()\n    plt.figure(figsize=(20,10), facecolor='w')\n    sns.heatmap(cor,xticklabels=cor.columns,yticklabels=cor.columns,annot=True)\n    plt.title(\"Correlation among all the Variables of the \"+datasets_names[i]+\" data\", size=20)\n    cor\n    i+=1","61ace3f8":"datasets = [Aquifer_Doganella, Aquifer_Auser,Aquifer_Luco,Aquifer_Petrignano]\nfor data in datasets:\n    features=data.columns.to_list()\n    index=[1,3,5]\n    features = [features[i] for i in index] \n    num_plots = len(features)\n    total_cols = 2\n    total_rows = num_plots\/\/total_cols + 1\n    color = ['m', 'g', 'b', 'r', 'y', 'v', 'o']\n    fig, axs = plt.subplots(nrows=total_rows, ncols=total_cols,\n                            figsize=(7*total_cols, 7*total_rows), facecolor='w', constrained_layout=True)\n    \n    #For violin plots\n    for i, var in enumerate(features):\n        row = i\/\/total_cols\n        pos = i % total_cols\n        plot = sns.violinplot(y=var, data=data, ax=axs[row][pos], linewidth=2)\n     \n    #For histogram or bar plots and line plots\n#     for feature in features:\n#         plt.figure(figsize=(18, 10), facecolor='w')\n#         sns.distplot(data[feature])\n#         plt.title('{} Distribution'.format(feature), fontsize=20)\n#         plt.show()","20c33a48":"plt.figure(figsize=(20,10), facecolor='w')\nsns.boxplot(x=\"Rainfall_Monteporzio\",y=\"Depth_to_Groundwater_Pozzo_1\",data=Aquifer_Doganella)\nplt.title(\"Distribution of Rainfall_Monteporzio with respect to Depth_to_Groundwater_Pozzo_1\", size=5)\nplt.show()","c1057c1b":"plt.figure(figsize=(20,10), facecolor='w')\nsns.boxplot(x=\"Rainfall_Gallicano\",y=\"Depth_to_Groundwater_PAG\",data=Aquifer_Auser)\nplt.title(\"Distribution of Rainfall_Gallicano with respect to Depth_to_Groundwater_PAG\", size=5)\nplt.show()","e3c007d8":"\ngraph_1 = Aquifer_Doganella.groupby(\"Date\").Rainfall_Monteporzio.mean()\ngraph_2 = Aquifer_Doganella.groupby(\"Date\").Rainfall_Velletri.mean()\ngraph_3 = Aquifer_Doganella.groupby(\"Date\").Temperature_Monteporzio.mean()\ngraph_4 = Aquifer_Doganella.groupby(\"Date\").Temperature_Velletri.mean()\n\nplt.figure(figsize=(20,10), facecolor='w')\nsns.lineplot(data=graph_1, label=\"Rainfall_Monteporzio\")\nsns.lineplot(data=graph_2, label=\"Rainfall_Velletri\")\nsns.lineplot(data=graph_3, label=\"Temperature_Monteporzio\")\nsns.lineplot(data=graph_4, label=\"Temperature_Velletri\")\nplt.title(\"Graph showing Rainfall and Temperature date wise \", size=20)\nplt.xlabel(\"Date\", size=20)\nplt.ylabel(\"Value\", size=20)\nplt.xticks(size=12)\nplt.yticks(size=12)","177f44e5":"graph_1 = Aquifer_Auser.groupby(\"Date\").Rainfall_Gallicano.mean()\ngraph_2 = Aquifer_Auser.groupby(\"Date\").Rainfall_Pontetetto.mean()\ngraph_3 = Aquifer_Auser.groupby(\"Date\").Temperature_Orentano.mean()\ngraph_4 = Aquifer_Auser.groupby(\"Date\").Temperature_Monte_Serra.mean()\n\nplt.figure(figsize=(20,10), facecolor='w')\nsns.lineplot(data=graph_1, label=\"Rainfall_Gallicano\")\nsns.lineplot(data=graph_2, label=\"Rainfall_Pontetetto\")\nsns.lineplot(data=graph_3, label=\"Temperature_Orentano\")\nsns.lineplot(data=graph_4, label=\"Temperature_Monte_Serra\")\nplt.title(\"Graph showing Rainfall and Temperature date wise \", size=20)\nplt.xlabel(\"Date\", size=20)\nplt.ylabel(\"Value\", size=20)\nplt.xticks(size=12)\nplt.yticks(size=12)","771ed8e9":"PATH = \"..\/input\/acea-water-prediction\/\"\naquifer_auser_df = pd.read_csv(f\"{PATH}Aquifer_Auser.csv\")\naquifer_doganella_df = pd.read_csv(f\"{PATH}Aquifer_Doganella.csv\")\naquifer_luco_df = pd.read_csv(f\"{PATH}Aquifer_Luco.csv\")\naquifer_petrignano_df = pd.read_csv(f\"{PATH}Aquifer_Petrignano.csv\")\n\nlake_biliancino_df = pd.read_csv(f\"{PATH}Lake_Bilancino.csv\")\n\nriver_arno_df = pd.read_csv(f\"{PATH}River_Arno.csv\")\n\nwater_spring_amiata_df = pd.read_csv(f\"{PATH}Water_Spring_Amiata.csv\")\nwater_spring_lupa_df = pd.read_csv(f\"{PATH}Water_Spring_Lupa.csv\")\nwater_spring_madonna_df = pd.read_csv(f\"{PATH}Water_Spring_Madonna_di_Canneto.csv\")\n\nwaterbodies_df = aquifer_auser_df.merge(aquifer_doganella_df, on='Date', how='outer')\nwaterbodies_df = waterbodies_df.merge(aquifer_luco_df, on='Date', how='outer')\nwaterbodies_df = waterbodies_df.merge(aquifer_petrignano_df, on='Date', how='outer')\nwaterbodies_df = waterbodies_df.merge(lake_biliancino_df[['Date','Temperature_Le_Croci','Lake_Level', 'Flow_Rate']], on='Date', how='outer') # Only merge specific columns because 'Rainfall_S_Piero', 'Rainfall_Mangona', 'Rainfall_S_Agata', 'Rainfall_Cavallina', 'Rainfall_Le_Croci' are shared with river_arno_df\nwaterbodies_df = waterbodies_df.merge(river_arno_df, on='Date', how='outer')\nwaterbodies_df = waterbodies_df.merge(water_spring_amiata_df, on='Date', how='outer')\nwaterbodies_df = waterbodies_df.merge(water_spring_lupa_df, on='Date', how='outer')\nwaterbodies_df = waterbodies_df.merge(water_spring_madonna_df, on='Date', how='outer')\n\nwaterbodies_df['Date_dt'] = pd.to_datetime(waterbodies_df.Date, format = '%d\/%m\/%Y')\nwaterbodies_df = waterbodies_df.sort_values(by='Date_dt').reset_index(drop=True)\n\nn_targets = 1\nheight=4\n\ncustom_colors = ['mediumblue', 'steelblue', 'dodgerblue', 'cornflowerblue', 'lightblue', \n                 'cadetblue', 'teal', 'mediumaquamarine', 'lightseagreen']\nf, ax = plt.subplots(nrows=n_targets, ncols=1, figsize=(15, height*n_targets))\nf.suptitle('Targer Variables for Aquifier Auser', fontsize=16)\n\nfor i, target in enumerate(['Depth_to_Groundwater_LT2', 'Depth_to_Groundwater_SAL', 'Depth_to_Groundwater_CoS', ]): # 'Depth_to_Groundwater_PAG', 'Depth_to_Groundwater_DIEC']): not targets\n    sns.lineplot(x=waterbodies_df.Date_dt, y=waterbodies_df[target].replace({np.nan : np.inf}), ax=ax, color=custom_colors[i], label=target)\n\nax.set_ylabel('Depth to Groundwater', fontsize=14)\nax.set_xlabel('Date', fontsize=14)\nplt.show()\n\n\nf, ax = plt.subplots(nrows=n_targets, ncols=1, figsize=(15, height*n_targets))\nf.suptitle('Targer Variables for Aquifier Doganella', fontsize=16)\n\nfor i, target in enumerate(['Depth_to_Groundwater_Pozzo_1_x', 'Depth_to_Groundwater_Pozzo_2', 'Depth_to_Groundwater_Pozzo_3_x', 'Depth_to_Groundwater_Pozzo_4_x',\n               'Depth_to_Groundwater_Pozzo_5', 'Depth_to_Groundwater_Pozzo_6', 'Depth_to_Groundwater_Pozzo_7', 'Depth_to_Groundwater_Pozzo_8',\n              'Depth_to_Groundwater_Pozzo_9']):\n    sns.lineplot(x=waterbodies_df.Date_dt, y=waterbodies_df[target].replace({np.nan : np.inf}), ax=ax, color=custom_colors[i], label=target)\n\nax.set_ylabel('Depth to Groundwater', fontsize=14)\nax.set_xlabel('Date', fontsize=14)\nplt.show()\n\n\nf, ax = plt.subplots(nrows=n_targets, ncols=1, figsize=(15, height*n_targets))\nf.suptitle('Targer Variables for Aquifier Luco', fontsize=16)\nfor i, target in enumerate(['Depth_to_Groundwater_Podere_Casetta',]): # 'Depth_to_Groundwater_Pozzo_1_y', 'Depth_to_Groundwater_Pozzo_3_y', 'Depth_to_Groundwater_Pozzo_4_y']): not targets\n    sns.lineplot(x=waterbodies_df.Date_dt, y=waterbodies_df[target].replace({np.nan : np.inf}), ax=ax, color=custom_colors[i], label=target)\n\nax.set_ylabel('Depth to Groundwater', fontsize=14)\nax.set_xlabel('Date', fontsize=14)\nplt.show()\n\n\nf, ax = plt.subplots(nrows=n_targets, ncols=1, figsize=(15, height*n_targets))\nf.suptitle('Targer Variables for Aquifier Petrignano', fontsize=16)\n\nfor i, target in enumerate(['Depth_to_Groundwater_P24', 'Depth_to_Groundwater_P25']):\n    sns.lineplot(x=waterbodies_df.Date_dt, y=waterbodies_df[target].replace({np.nan : np.inf}), ax=ax, color=custom_colors[i], label=target)\n\nax.set_ylabel('Depth to Groundwater', fontsize=14)\nax.set_xlabel('Date', fontsize=14)\nplt.show()\n\n","cf7c7d2a":"print(\"Water_Spring_Amiata:\")\nprint('*'*30)\nprint(Water_Spring_Amiata.columns)\nprint()\nprint(\"Water_Spring_Lupa:\")\nprint('*'*30)\nprint(Water_Spring_Lupa.columns)\nprint()\nprint(\"Water_Spring_Madonna_di_Canneto:\")\nprint('*'*30)\nprint(Water_Spring_Madonna_di_Canneto.columns)\nprint()","ab477687":"print(\"Water_Spring_Amiata:\")\nprint('*'*30)\nprint(Water_Spring_Amiata.describe())\nprint()\nprint(\"Water_Spring_Lupa:\")\nprint('*'*30)\nprint(Water_Spring_Lupa.describe())\nprint()\nprint(\"Water_Spring_Madonna_di_Canneto:\")\nprint('*'*30)\nprint(Water_Spring_Madonna_di_Canneto.describe())\nprint()","13bbb24d":"datasets = [Water_Spring_Amiata,Water_Spring_Madonna_di_Canneto,Water_Spring_Lupa]\ndatasets_names = [\"Water_Spring_Amiata\",\"Water_Spring_Madonna_di_Canneto\",\"Water_Spring_Lupa\"]\ni=0\nfor data in datasets:\n    cor=data.corr()\n    plt.figure(figsize=(20,10), facecolor='w')\n    sns.heatmap(cor,xticklabels=cor.columns,yticklabels=cor.columns,annot=True)\n    plt.title(\"Correlation among all the Variables of the \"+datasets_names[i]+\" data\", size=20)\n    cor\n    i+=1","75280899":"datasets = [Water_Spring_Amiata,Water_Spring_Madonna_di_Canneto,Water_Spring_Lupa]\n\nfor data in datasets:\n    features=data.columns.to_list()\n    index=[1,2]\n    features = [features[i] for i in index] \n    num_plots = len(features)\n    total_cols = 2\n    total_rows = num_plots\/\/total_cols + 1\n    color = ['m', 'g', 'b', 'r', 'y', 'v', 'o']\n    fig, axs = plt.subplots(nrows=total_rows, ncols=total_cols,\n                            figsize=(7*total_cols, 7*total_rows), facecolor='w', constrained_layout=True)\n    \n    #For violin plots\n    for i, var in enumerate(features):\n        row = i\/\/total_cols\n        pos = i % total_cols\n        plot = sns.violinplot(y=var, data=data, ax=axs[row][pos], linewidth=2)\n     \n    #For histogram or bar plots and line plots\n#     for feature in features:\n#         plt.figure(figsize=(18, 10), facecolor='w')\n#         sns.distplot(data[feature])\n#         plt.title('{} Distribution'.format(feature), fontsize=20)\n#         plt.show()","27357dfe":"graph_1 = Water_Spring_Amiata.groupby(\"Date\").Rainfall_Castel_del_Piano.mean()\ngraph_2 = Water_Spring_Amiata.groupby(\"Date\").Rainfall_Abbadia_S_Salvatore.mean()\ngraph_3 = Water_Spring_Amiata.groupby(\"Date\").Temperature_Abbadia_S_Salvatore.mean()\ngraph_4 = Water_Spring_Amiata.groupby(\"Date\").Temperature_S_Fiora.mean()\n\nplt.figure(figsize=(20,10), facecolor='w')\nsns.lineplot(data=graph_1, label=\"Rainfall_Castel_del_Piano\")\nsns.lineplot(data=graph_2, label=\"Rainfall_Abbadia_S_Salvatore\")\nsns.lineplot(data=graph_3, label=\"Temperature_Orentano\")\nsns.lineplot(data=graph_4, label=\"Temperature_S_Fiora\")\nplt.title(\"Graph showing Rainfall and Temperature date wise \", size=20)\nplt.xlabel(\"Date\", size=20)\nplt.ylabel(\"Value\", size=20)\nplt.xticks(size=12)\nplt.yticks(size=12)","6e38e9e9":"graph_1 = Water_Spring_Lupa.groupby(\"Date\").Rainfall_Terni.mean()\ngraph_2 = Water_Spring_Lupa.groupby(\"Date\").Flow_Rate_Lupa.mean()\n\n\nplt.figure(figsize=(20,10), facecolor='w')\nsns.lineplot(data=graph_1, label=\"Rainfall_Terni\")\nsns.lineplot(data=graph_2, label=\"Flow_Rate_Lupa\")\nplt.title(\"Graph showing Rainfall and Temperature date wise \", size=20)\nplt.xlabel(\"Date\", size=20)\nplt.ylabel(\"Value\", size=20)\nplt.xticks(size=12)\nplt.yticks(size=12)","ea603390":"n_targets = 1\nf, ax = plt.subplots(nrows=n_targets, ncols=1, figsize=(15, height*n_targets))\nf.suptitle('Target Variables for Water Spring Amiata', fontsize=16)\n\nfor i, target in enumerate(['Flow_Rate_Bugnano', 'Flow_Rate_Arbure', 'Flow_Rate_Ermicciolo', 'Flow_Rate_Galleria_Alta']):\n    sns.lineplot(x=waterbodies_df.Date_dt, y=waterbodies_df[target].replace({np.nan : np.inf}), ax=ax, color=custom_colors[i], label=target)\n\nax.set_ylabel('Flow Rate', fontsize=14)\nax.set_xlabel('Date', fontsize=14)\nplt.show()\n\n\nf, ax = plt.subplots(nrows=n_targets, ncols=1, figsize=(15, height*n_targets))\nf.suptitle('Target Variables for Water Spring Lupa', fontsize=16)\nsns.lineplot(x=waterbodies_df.Date_dt, y=waterbodies_df.Flow_Rate_Lupa.replace({np.nan : np.inf}), ax=ax, color=custom_colors[0])\n\nax.set_ylabel('Flow Rate', fontsize=14)\nax.set_xlabel('Date', fontsize=14)\nplt.show()\n\n\nf, ax = plt.subplots(nrows=n_targets, ncols=1, figsize=(15, height*n_targets))\nf.suptitle('Target Variables for Water Spring Madonna di Canneto', fontsize=16)\nsns.lineplot(x=waterbodies_df.Date_dt, y=waterbodies_df.Flow_Rate_Madonna_di_Canneto.replace({np.nan : np.inf}), ax=ax, color=custom_colors[0])\n\nax.set_ylabel('Flow Rate', fontsize=14)\nax.set_xlabel('Date', fontsize=14)\nplt.show()","1a9609f0":"print(\"Lake_Bilancino:\")\nprint('*'*30)\nprint(Lake_Bilancino.columns)","04e35967":"Lake_Bilancino.describe()","e0508bef":"cor=Lake_Bilancino.corr()\nplt.figure(figsize=(20,10), facecolor='w')\nsns.heatmap(cor,xticklabels=cor.columns,yticklabels=cor.columns,annot=True)\nplt.title(\"Correlation among all the Variables of the Lake_Bilancino data\", size=20)\ncor","c1b3c72c":"features=Lake_Bilancino.columns.to_list()\nindex=[1,3,5]\nfeatures = [features[i] for i in index] \nnum_plots = len(features)\ntotal_cols = 2\ntotal_rows = num_plots\/\/total_cols + 1\ncolor = ['m', 'g', 'b', 'r', 'y', 'v', 'o']\nfig, axs = plt.subplots(nrows=total_rows, ncols=total_cols,\n                        figsize=(7*total_cols, 7*total_rows), facecolor='w', constrained_layout=True)\n\n#For violin plots\nfor i, var in enumerate(features):\n    row = i\/\/total_cols\n    pos = i % total_cols\n    plot = sns.violinplot(y=var, data=Lake_Bilancino, ax=axs[row][pos], linewidth=2)\n\n#For histogram or bar plots and line plots\nfor feature in features:\n    plt.figure(figsize=(18, 10), facecolor='w')\n    sns.distplot(Lake_Bilancino[feature])\n    plt.title('{} Distribution'.format(feature), fontsize=20)\n    plt.show()","324974dc":"graph_1 = Lake_Bilancino.groupby(\"Date\").Rainfall_S_Piero.mean()\ngraph_2 = Lake_Bilancino.groupby(\"Date\").Rainfall_Mangona.mean()\ngraph_3 = Lake_Bilancino.groupby(\"Date\").Temperature_Le_Croci.mean()\ngraph_4 = Lake_Bilancino.groupby(\"Date\").Lake_Level.mean()\n\nplt.figure(figsize=(20,10), facecolor='w')\nsns.lineplot(data=graph_1, label=\"Rainfall_S_Piero\")\nsns.lineplot(data=graph_2, label=\"Rainfall_Mangona\")\nsns.lineplot(data=graph_3, label=\"Temperature_Le_Croci\")\nsns.lineplot(data=graph_4, label=\"Lake_Level\")\nplt.title(\"Graph showing Rainfall and Temperature date wise \", size=20)\nplt.xlabel(\"Date\", size=20)\nplt.ylabel(\"Value\", size=20)\nplt.xticks(size=12)\nplt.yticks(size=12)","2ac6939a":"n_targets = 2\nf, ax = plt.subplots(nrows=n_targets, ncols=1, figsize=(15, height*n_targets))\nf.suptitle('Target Variables for Lake Biliancino', fontsize=16)\nsns.lineplot(x=waterbodies_df.Date_dt, y=waterbodies_df.Lake_Level.replace({np.nan : np.inf}), ax=ax[0], color=custom_colors[0])\nsns.lineplot(x=waterbodies_df.Date_dt, y=waterbodies_df.Flow_Rate.replace({np.nan : np.inf}), ax=ax[1], color=custom_colors[0])\nax[0].set_ylabel('Lake Level', fontsize=14)\nax[1].set_ylabel('Flow Rate', fontsize=14)\n\nfor i in range(n_targets):\n    ax[i].set_xlabel('Date', fontsize=14)\nplt.show()","fe3248d4":"print(\"River_Arno:\")\nprint('*'*30)\nprint(River_Arno.columns)","e5fdce51":"River_Arno.describe()","08cd3381":"cor=River_Arno.corr()\nplt.figure(figsize=(20,10), facecolor='w')\nsns.heatmap(cor,xticklabels=cor.columns,yticklabels=cor.columns,annot=True)\nplt.title(\"Correlation among all the Variables of the River_Arno data\", size=20)\ncor","e0092ffe":"features=River_Arno.columns.to_list()\nindex=[1,3,5]\nfeatures = [features[i] for i in index] \nnum_plots = len(features)\ntotal_cols = 2\ntotal_rows = num_plots\/\/total_cols + 1\ncolor = ['m', 'g', 'b', 'r', 'y', 'v', 'o']\nfig, axs = plt.subplots(nrows=total_rows, ncols=total_cols,\n                        figsize=(7*total_cols, 7*total_rows), facecolor='w', constrained_layout=True)\n\n#For violin plots\nfor i, var in enumerate(features):\n    row = i\/\/total_cols\n    pos = i % total_cols\n    plot = sns.violinplot(y=var, data=River_Arno, ax=axs[row][pos], linewidth=2)\n\n#For histogram or bar plots and line plots\nfor feature in features:\n    plt.figure(figsize=(18, 10), facecolor='w')\n    sns.distplot(River_Arno[feature])\n    plt.title('{} Distribution'.format(feature), fontsize=20)\n    plt.show()","44a7c49e":"graph_1 = River_Arno.groupby(\"Date\").Rainfall_Le_Croci.mean()\ngraph_2 = River_Arno.groupby(\"Date\").Rainfall_Cavallina.mean()\ngraph_3 = River_Arno.groupby(\"Date\").Temperature_Firenze.mean()\ngraph_4 = River_Arno.groupby(\"Date\").Hydrometry_Nave_di_Rosano.mean()\n\nplt.figure(figsize=(20,10), facecolor='w')\nsns.lineplot(data=graph_1, label=\"Rainfall_Le_Croci\")\nsns.lineplot(data=graph_2, label=\"Rainfall_Cavallina\")\nsns.lineplot(data=graph_3, label=\"Temperature_Firenze\")\nsns.lineplot(data=graph_4, label=\"Hydrometry_Nave_di_Rosano\")\nplt.title(\"Graph showing Rainfall and Temperature date wise \", size=20)\nplt.xlabel(\"Date\", size=20)\nplt.ylabel(\"Value\", size=20)\nplt.xticks(size=12)\nplt.yticks(size=12)","9d3c6b50":"n_targets=1\nf, ax = plt.subplots(nrows=n_targets, ncols=1, figsize=(15, height*n_targets))\nf.suptitle('Target Variables for River Arno', fontsize=16)\nsns.lineplot(x=waterbodies_df.Date_dt, y=waterbodies_df.Hydrometry_Nave_di_Rosano.replace({np.nan : np.inf}), ax=ax, color=custom_colors[0], label='Hydrometry_Nave_di_Rosano')\nax.set_ylabel('Hydrometry', fontsize=14)\nax.set_xlabel('Date', fontsize=14)\nplt.show()","3aa325f3":"Target Distribution","e9738c62":"> ## So basically we are given 9 datasets, having 4 different water bodies --> Aquifier, Water Spring, Lake and River...\nAnd In this notebook, I am first trying to do some analysis of each water bodies (how data is distributed and how we can apply modelling on top of that)","4eb138aa":"## Multivariate analysis","84144ba2":"## Doing Univariate analysis of first 4 features\/columns only of all 4 datasets","8265b64a":"# Multivariate analysis","3b84bd0a":"You can choose any two features and do analysis of dataset..","854e5be0":"This can help to tell which features are different and have their role in prediction of amount of water in their water bodies.","67f1db9c":"Multivariate analysis","951e27c2":"## Checking for NAN values","f19bc89e":"So, we can see that there are so many NAN values in datasets, So we would handle these NAN values by filling up mean of that column.","2086fc84":"![img](https:\/\/marketingmaverick.in\/wp-content\/uploads\/2019\/03\/images1-2.jpg)","83d73491":"> > > Visualization taken from Leonie's notebook","dfa30530":"# <center>ACEA Water Analytics<\/center>","31b805f3":"Multivariate analysis","b8c99396":"\n# EDA on Aquifer Water Body","8eab700a":"## Target Distribution","a536bd8a":"We can do any type of univariate analysis.. I am doing voilin plot analysis..Also i have commented the code for histogram plots.. We can do analysis for those plots..\nAlso, in index, just mention the features for which you want to do univariate analysis. The code will do the part.","2306cd73":"## Basic EDA","44485939":"## Bivariate analysis","d3f4c15a":"# EDA on Water_Spring","62fba391":"## Target distribution","c1876610":"> ### Water is one of the most valueable resources not only to we humans but also for many other living organisms as well. Although, water security often gets less media attention than climate change topics, water scarcity is a serious issue that affects us all. Water scarcity is created where the water withdrawal from a basin exceeds its recharge and water stress level is the freshwater withdrawal as a proportion of available freshwater resources. Managing water as a ressource can be challenging. Therefore, the goal of this challenge is to predict water levels to help Acea Group preserve precious waterbodies. In this notebook we are getting an overview of the challenge first and then explore the various datasets and see if we can find some interesting insights.\n\n> > > Special thanks to [Leonie's notebook](https:\/\/www.kaggle.com\/iamleonie\/eda-quenching-the-thirst-for-insights).. Some ideas have been taken from that notebook. Please upvote that notebook as well.","328ee9a1":"## Handling missing values of all 9 datasets","1b366f8a":"![img](https:\/\/www.kaggleusercontent.com\/kf\/49696239\/eyJhbGciOiJkaXIiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0..SAo3B3vMxdhgnFNdyEhCBw.eJJFrtOEINVD9Ced1up4dpCzR-UF1s5SS5xlWiZDgdP2Bgi0T5OJEB65h8LSzv_62TsslGVUulIy7tc0ENc6TV5yZ5N7x9yDPYYGedNrl8lhTuFA5SdDVKDE5kDubs9_hFrTn9eQqWlbt1-OhfbUrzvge0j7PDilBkOs9l34_DY7W0npCOe5Wsa4UNU2XF1orbM-AMkd2waRCixQDBbrHcy6c9j4rkRmK8TdHkibV6m9nWDfLRxxHqTXJEDXxdDis0XvLObucPOBJexB58nTcjagg8ijFV2bjCmETRX-_pXO_nQpL8kAa7PGWQ7ZFtVhTI29QPFksh8Vtusg7iYiySFYmbMXdQDodKmQRnU4Iip5v7lrJhvQuGQt-kQGPiiGkq7aLV8WRcoXOkLqps6IXIvr6C7vShtUgOM3gZy-7vLnQs1WP-qkGG-8YIMSSpXpa1yvsZBlyN8xMKp-hSoTzj5TKXcDMY00ApSUR3QiU0tEOW-4F8gQermtJBXdvNcrt_c5Ux6WGsY1LeMzNhlL3dOnFrdJUV-JamkJ33JIotlkdbeMsmotvbt4KNJYF1cU5ZZa5zbdKSaUAoyRk4-aiSHOeV2EG5aUdiBeTEPHgsiJ3OUl9MjgoXtrV0qd3Qxyc7rISekcqXiWvSrdFfdZKKEORHVGyKTT2RqdFeYae2g.Flk7gpzebDQcXm_H3eB9Wg\/__results___files\/__results___1_1.png)","7addef80":"## Target Distribution ","5e9eb074":"# Importing Libraries","7c9c14d5":"Thanks for reading out my notebook. Hope you like some visualisations.. ","b4aab90f":"# EDA on River","e5de4760":"# EDA On Lake","2e43a96e":"Univariate analysis","82fb0c88":"# Univariate analysis","e57051a8":"# Univariate analysis","15a0144a":"Now handling all missing values by bfill method-->","f9b5916f":"Firstly I am showing 3 different ways to handle missing values.."}}