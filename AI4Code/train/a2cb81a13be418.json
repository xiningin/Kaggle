{"cell_type":{"4a728023":"code","3138cb0e":"code","00b050eb":"code","7936fd64":"code","606defa9":"code","fca7d1da":"code","9221c675":"markdown","a77f9f8a":"markdown","a95bc5e0":"markdown","2c765ccd":"markdown"},"source":{"4a728023":"from keras import models\nfrom keras import layers\nfrom keras import optimizers\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import TensorBoard","3138cb0e":"!mkdir log\n!wget https:\/\/bin.equinox.io\/c\/4VmDzA7iaHb\/ngrok-stable-linux-amd64.zip\n!unzip ngrok-stable-linux-amd64.zip\n\nLOG_DIR = '.\/log\/' \nget_ipython().system_raw(\n    'tensorboard --logdir {} --host 0.0.0.0 --port 6006 &'\n    .format(LOG_DIR)\n)\nget_ipython().system_raw('.\/ngrok http 6006 &')\n! curl -s http:\/\/localhost:4040\/api\/tunnels | python3 -c \\\n    \"import sys, json; print(json.load(sys.stdin)['tunnels'][0]['public_url'])\"","00b050eb":"def get_generator(path):\n    image_data_generator=ImageDataGenerator(\n        rescale=1.\/255.,\n        validation_split=0.1)\n    training_generator = image_data_generator.flow_from_directory(\n        directory = path,\n        batch_size = 64,\n        seed = 42,\n        shuffle = True,\n        subset = \"training\",\n        target_size = (200, 200))\n    validation_generator = image_data_generator.flow_from_directory(\n        directory = path,\n        batch_size = 64,\n        seed = 42,\n        shuffle = True,\n        subset = \"validation\",\n        target_size = (200, 200))\n    return training_generator, validation_generator\n","7936fd64":"training_generator, validation_generator = get_generator('\/kaggle\/input\/asl-alphabet\/asl_alphabet_train\/asl_alphabet_train')","606defa9":"from keras.applications import VGG16\nconv_base = VGG16(weights='imagenet',\n                  include_top=False,\n                  input_shape=(200, 200, 3))\nconv_base.trainable = False\n\nmodel = models.Sequential()\nmodel.add(conv_base)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dense(1024, activation='relu'))\nmodel.add(layers.Dropout(0.3))\nmodel.add(layers.Dense(29, activation='softmax'))\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","fca7d1da":"model.fit_generator(\n    training_generator,\n    steps_per_epoch=1350,\n    epochs=10,\n    validation_data=validation_generator,\n    validation_steps=135,\n    callbacks=[TensorBoard(log_dir='.\/log')])","9221c675":"# Model Specification","a77f9f8a":"# Use TensorBoard","a95bc5e0":"# Create Image Data Generator","2c765ccd":"# Model Fitting"}}