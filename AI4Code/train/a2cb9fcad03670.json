{"cell_type":{"313e9e69":"code","76d782b1":"code","5857e22d":"code","f1755bc2":"code","83e51e30":"code","5638ea2c":"markdown","6017afc6":"markdown","b7cdba5c":"markdown","78858c63":"markdown"},"source":{"313e9e69":"import os\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy import interpolate","76d782b1":"DATA_PATH = '..\/input\/made-cv-2021-contest-01-facial-landmarks\/contest01_data\/train\/images\/'\nLAND_PATH = '..\/input\/made-cv-2021-contest-01-facial-landmarks\/contest01_data\/train\/landmarks.csv'\n\nIMAGE_PATHS = np.array([os.path.join(DATA_PATH, f) for f in os.listdir(DATA_PATH)])\nLANDMARKS = pd.read_csv(LAND_PATH, sep='\\t').set_index('file_name')\n\nTEST_IMAGES = [\n    '9bf446840146e01c50fc0556f456b66b.jpg',\n    '3280be57f3c13f4344188777dd64c022.jpg',\n    '99f3d132cff5017c0f53285016f5d73e.jpg'\n]\n\nFACE_ZONES = [0,64,128,273,337,401,464,527,587,714,841,873,905,937,969]","5857e22d":"def show_image(file, landmark, title, rad=1, ax=None):\n    src = cv2.imread(DATA_PATH + file)\n    src = cv2.cvtColor(src, cv2.COLOR_BGR2RGB)\n    for i, (x, y) in enumerate(landmark):\n        cv2.circle(src, (int(x), int(y)), rad, (0, 255, 0), -1)\n        \n    ax = ax or plt.gca()\n    ax.set_title(title)\n    ax.imshow(src)","f1755bc2":"def kalman(x_observ, Q=1e-5, R=0.0001):\n    n = len(x_observ)\n    x_hat = np.zeros(n)      # a posteri estimate of x\n    P = np.zeros(n)          # a posteri error estimate\n    x_hatminus = np.zeros(n) # a priori estimate of x\n    P_minus = np.zeros(n)    # a priori error estimate\n    K = np.zeros(n)          # gain or blending factor\n\n    # intial guesses\n    x_hat[0] = x_observ[0]\n    P[0] = 1.0\n\n    for k in range(1, n):\n        # time update\n        x_hatminus[k] = x_hat[k-1]\n        P_minus[k] = P[k-1]+Q\n\n        # measurement update\n        K[k] = P_minus[k] \/ (P_minus[k] + R)\n        x_hat[k] = x_hatminus[k] + K[k]*(x_observ[k] - x_hatminus[k])\n        P[k] = (1 - K[k])*P_minus[k]\n\n    return x_hat\n\n\ndef bidir_kalman(x_observ, Q=1e-5, R=0.0003, iters=2):\n    n = len(x_observ)\n    \n    for _ in range(iters):\n        x_forw = kalman(x_observ, Q, R)\n        x_back = np.flip(kalman(np.flip(x_observ), Q, R))\n\n        k = 7\n        x_full = np.zeros(n+k)\n        x_full[:k] = x_forw[:k]\n        x_full[k:n] = (x_forw[k:] + x_back[:n-k])\/2\n        x_full[n:] = x_back[n-k:]\n\n        f = interpolate.interp1d(np.linspace(0, n+k, n+k), x_full, kind='quadratic')\n        x_observ = f(np.linspace(0, n+k, n))\n\n    return x_observ\n\n\ndef fix_face(landmark):\n    landmark = landmark.astype(float)\n\n    for i in range(1, len(FACE_ZONES)):\n        zone = landmark[FACE_ZONES[i-1]:FACE_ZONES[i]]\n        x_filt = bidir_kalman(zone[:, 0], iters=1)\n        y_filt = bidir_kalman(zone[:, 1], iters=1)\n        np.copyto(zone, np.array([x_filt, y_filt]).T)\n        \n    return landmark","83e51e30":"fig, axes = plt.subplots(2, 3, figsize=(17, 15))\n\nfor i, file in enumerate(TEST_IMAGES):\n    landmark = LANDMARKS.loc[file, :].values.reshape(971, 2).copy()\n    show_image(file, landmark, title='before', rad=1, ax=axes[0][i])\n\n    fixed = fix_face(landmark)\n    show_image(file, fixed, title='after', rad=1, ax=axes[1][i])","5638ea2c":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:","6017afc6":"\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c, \u0447\u0442\u043e \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0438\u0441\u043f\u043e\u0440\u0447\u0435\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0448\u0443\u043c\u0430. \u0422\u043e\u0433\u0434\u0430 \u043e\u0434\u043d\u0438\u043c \u0438\u0445 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0435\u0441\u0442\u0435\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u043f\u0443\u0442\u0435\u0439 \u0432\u043e\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043a\u0440\u044b\u0442\u043e\u0439 \u0438\u0441\u0442\u0438\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0438 \u0432 \u0431\u0430\u0439\u0435\u0441\u043e\u0432\u0441\u043a\u043e\u0439 \u043f\u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f **\u0444\u0438\u043b\u044c\u0442\u0440 \u041a\u0430\u043b\u043c\u0430\u043d\u0430**. \u0415\u0433\u043e \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u043c. \n\n\u0412 \u0438\u0434\u0435\u0430\u043b\u0435 \u043c\u0435\u0442\u0430\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0444\u0438\u043b\u044c\u0442\u0440\u0430 \u041a\u0430\u043b\u043c\u0430\u043d\u0430 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c EM-\u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u043e\u043c, \u043d\u043e \u043d\u0435 \u0431\u0443\u0434\u0435\u043c \u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u043c\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0441\u043e \u0432\u0441\u0435\u043c \u044d\u0442\u0438\u043c, \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u0445\u0430\u0440\u0434\u043a\u043e\u0434\u0438\u043c.","b7cdba5c":"\u0412\u0438\u0434\u043d\u043e, \u0447\u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u043c\u043e\u043c\u0435\u043d\u0442\u0430\u0445 \u043d\u0435 \u0431\u0435\u0437 \u0433\u0440\u0435\u0445\u0430, \u043d\u043e \u0432 \u0446\u0435\u043b\u043e\u043c \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u0441\u043a\u043e\u0440\u0435\u0435 \u0443\u043b\u0443\u0447\u0448\u0438\u043b\u0430\u0441\u044c.","78858c63":"## Kalman Faces\n\n\u0412 [\u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0435](https:\/\/www.kaggle.com\/sergemsu\/noisy-people) \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c, \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u044e\u0449\u0438\u0439 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043d\u0430\u0439\u0442\u0438 \u043b\u0438\u0446\u0430 \u0441 \u0441\u0438\u043b\u044c\u043d\u043e \u0437\u0430\u0448\u0443\u043c\u043b\u0435\u043d\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u043e\u0439. \u0412 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c\u043e\u0433\u043e \u043f\u043e\u0440\u043e\u0433\u0430 \u0438\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 3 \u0434\u043e 7 \u0442\u044b\u0441\u044f\u0447. \u042d\u0442\u043e \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0432\u0435\u0441\u043e\u043c\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e, \u0438 \u043f\u0440\u043e\u0441\u0442\u043e \u0432\u044b\u043a\u0438\u043d\u0443\u0442\u044c \u0438\u0445 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435 \u043e\u0447\u0435\u043d\u044c \u0445\u043e\u0440\u043e\u0448\u0435\u0439 \u0438\u0434\u0435\u0435\u0439. \n\n\u0417\u0434\u0435\u0441\u044c \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0440\u0438\u043c\u0435\u0440 \u0442\u043e\u0433\u043e, \u043a\u0430\u043a \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0432\u044b\u0431\u0440\u0430\u0441\u044b\u0432\u0430\u0442\u044c \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e \u0440\u0430\u0437\u043c\u0435\u0447\u0435\u043d\u043d\u044b\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u0430 \u043f\u043e\u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u0438\u0445 \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u0442\u044c."}}