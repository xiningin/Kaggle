{"cell_type":{"2a5458b1":"code","80be5a7b":"code","8bd929b5":"code","6d55a3fc":"code","4bf15a05":"code","f9b6d256":"markdown","512c20af":"markdown","7b5b780f":"markdown","c513c7e7":"markdown","aca6bdb8":"markdown"},"source":{"2a5458b1":"# this is a python language cell\n# click here and then hit Ctrl-Enter to run the code\n1+2","80be5a7b":"# Install phosphorus from GitHub:\n!pip install git+https:\/\/github.com\/EasyArray\/phosphorus#egg=phosphorus\n\n# Load phosphorus:\n%load_ext phosphorus","8bd929b5":"# Numbers\n1\n2\n\n# Sets\n{3,2,1,3,2,1}\n\n# Lists \/ Tuples\n[3,2,1,3,2,1]\n\u27e83,2,1,3,2,1\u27e9","6d55a3fc":"abcde\na1_b\n\n1           # This is a number\n\"1\"         # This is a constant\n\"^a4&aa324\" # This constant contains special characters\n\n\u27e8a,1,{2,a,\u27e8a,1\u27e9},\u27e82,a\u27e9\u27e9\n\n\"aaa324\"","4bf15a05":"tree[_S [_NP [_N Jasmine]] [_VP [_V jumped]]]\n\n\ud83c\udf32[Jasmine [ate broccoli]]\n\ntree[\u27e82,1\u27e9 {2,1}]","f9b6d256":"The software for LING 516 is running on [Jupyter](https:\/\/jupyter.org\/), with a special extension called \"phosphorus\". Jupyter notebooks are a series of cells, such as this one, which simply contains text, and the next one, which allows code. \n\nYou can click on a cell to edit its contents, and hit Ctrl-Enter (or \u2318-Enter on Mac) to run the cell. Shift-Enter runs the cell and moves to the next one. Code cells, like the next one, run the python programming language. The first two lines, starting with \"#\" are comments and are ignored when running the code.\n\nNote: the first time you run code, Kaggle will take a while to start up a new session.","512c20af":"### Constants\nSequences of letters, numbers, and underscores (but only sequences **not** starting with a number) represent constants or strings in phosphorus. Unless they have been assigned a special value as a variable (more on this later), they print out as themselves. If you want to write a constant using other characters, or one starting with a number, simply put it in quotes.\n\nSets and lists may contain any type of item, including numbers, constants, and other sets and lists. (Notice, too, that blank lines in code cells are OK.)","7b5b780f":"Once the code is loaded, we can enter numbers, sets, and tuples (also known as lists). Any item that is recognized as a phosphorus value will appear with a purple type designation at the righthand side of the output. (Ignore any green type information for now.)\n\nNote that tuples may be entered with square brackets `[ ]` or angle brackets `\u27e8 \u27e9`, but not less-than and greater-than signs `< >`. Once phosphorus is loaded, you can type angle brackets by entering `\\<` or `\\>` and then hitting tab. Give it a try!\n\n\ud83e\udd14 What do you notice about the type information on the right in purple?\n\n\ud83e\udd14 What differences do you notice between sets and lists?","c513c7e7":"### Loading Phosphorus, Numbers, Sets, & Lists\n\nLING 516 requires a special phosphorus extension, which allows certain expressions not normally allowed in python. The following cell first installs this extension from GitHub, and then loads it for use below. These steps only need to be run once per session, so feel free comment them out if you end up running the whole notebook multiple times.\n\n**Note:** Before running the next cell, you must turn on Internet access under the \"Settings\" menu to the right. (You'll need to phone verify your account if you haven't already.) Once the Internet is on, run the following cell.","aca6bdb8":"### Trees\nOne more type of value in phosphorus is a syntactic tree. Some examples are given in the next cell. Try running them! Note that while leaf nodes may contain any type of value, parent nodes may only be constants.\n\nFor fun, you can use a tree emoji \ud83c\udf32 to introduce a tree. To type it, simply enter `\\tree` and hit tab."}}