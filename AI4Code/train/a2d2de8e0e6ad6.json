{"cell_type":{"2dc0665b":"code","2ba1f952":"code","4fafa590":"code","cb29f0ff":"code","3ecfca73":"code","a9b82853":"code","2da396d2":"code","95b99748":"code","e972c658":"code","d95b7f62":"code","3d434989":"code","a71f3a71":"code","0d6a2149":"code","8f2eb961":"code","40666633":"code","97c7ed55":"code","9c4c7685":"code","f8c319ea":"code","239c1b03":"code","1440af39":"code","b9a7600a":"code","188f70b9":"code","f1c5a06b":"code","93701f49":"code","58249a8e":"code","bb527986":"code","2265802e":"code","dcd00cde":"code","81f478a2":"code","2e2d9610":"code","e6eb09f9":"code","08194cfb":"code","d5633cd6":"code","ac072f77":"code","e266481c":"code","a2be6f44":"code","c898b8e0":"code","10719905":"code","8f6b4d36":"code","fc78c7c3":"code","70db0732":"code","4bd54eec":"code","99e1d01f":"code","fb93cdc7":"code","8ef1a771":"code","63e7d31c":"code","6fab49b6":"code","47936cbd":"code","5bcd0b87":"code","69f7a055":"code","6fed8c22":"code","6a83b7ed":"code","686cf882":"code","ea3f711d":"code","8687b159":"code","c2f88bfd":"code","b06e8dd0":"code","3dad0f94":"code","4253dfcc":"code","3ea49691":"code","c5369b46":"code","b12e52e9":"code","1c13c69b":"code","716c807d":"code","274123f5":"code","e127821e":"code","18c3562e":"code","79029cf6":"code","5130418a":"markdown","901c0849":"markdown","48fc821b":"markdown","e32618a6":"markdown","7902a236":"markdown","a57cacc7":"markdown","9bf16da6":"markdown","335ff3aa":"markdown","3b6de8e9":"markdown","37248108":"markdown","044e193a":"markdown","014e569b":"markdown","f6609197":"markdown","3d307743":"markdown","17facfb1":"markdown","ebfa0c2f":"markdown","761e606b":"markdown","e1324443":"markdown","4dd24036":"markdown","bc6af84c":"markdown","1edc3c75":"markdown","4e9c2780":"markdown","b4d0138f":"markdown","5a73391c":"markdown","36c075de":"markdown","ea116f6d":"markdown","fb69ba65":"markdown","f5e69f88":"markdown","69cc7fa9":"markdown","37763f9c":"markdown","58933046":"markdown"},"source":{"2dc0665b":"import pandas as pd\nlabels =['a','b','c']\nmy_data=[10,20,30]\n\nd={'a':10,'b':10,'c':30}","2ba1f952":"pd.Series(d)","4fafa590":"import numpy as np\n\nx=np.random.randint(100,size=(5,4)) \nprint(\"Numpy Array:\")\nx","cb29f0ff":"import pandas as pd\ndf = pd.DataFrame(x)\nprint(\"Pandas DataFrame:\")\ndf","3ecfca73":"df = pd.DataFrame(x,['x','b','c','d','e'],['W','X','Y','Z'])\nprint(\"Pandas DataFrame with custom indexing:\")\ndf","a9b82853":"df['X']","2da396d2":"#ENTERING ANATHER COLUMN IN A DATAFRAME\ndf['new_col']=[1,2,3,4,5]\ndf","95b99748":"#how delete column in dataframe:\ndf.drop('Y',axis=1,inplace=True)\nprint(df)","e972c658":"#how delete column in dataframe:\ndf.drop('c',axis=0,inplace=True)\nprint(df)","d95b7f62":" df = pd.read_csv('\/kaggle\/input\/sales-dataset-cse422csv\/Sales Data (CSE422_ Pandas) - sales.csv',index_col='month')\n df.head()","3d434989":"df = pd.read_csv('\/kaggle\/input\/sales-dataset-cse422csv\/Sales Data (CSE422_ Pandas) - sales.csv',index_col='month')\ndf.head()","a71f3a71":" df['eggs']['Mar'] # df[column]['rows']\n type(df)","0d6a2149":"df.eggs['Apr']","8f2eb961":"df.salt['Apr']","40666633":"df_new = df[['salt','spam']]\ndf_new","97c7ed55":" df['eggs'] ","9c4c7685":"#printing type of the column selected\ntype(df['eggs'])","f8c319ea":"#selecting part of a series\ndf['eggs'][1:4]","239c1b03":"df['eggs'][4] ","1440af39":"#we can access row by 2 ways:\n# 1. location based selection .loc('rowname')\n# 2. numerical based selection  iloc(rowindex)\ndf2 = pd.DataFrame(x,['x','b','c','d','e'],['W','X','Y','Z'])\ndf2.loc[:,'X']","b9a7600a":"df","188f70b9":"df.loc['Feb':'Mar','eggs':'salt']","f1c5a06b":"df.loc['Feb',:]   #df.loc[rows,column] ","93701f49":" df.loc['Jan': 'Mar', ['eggs','spam']] ","58249a8e":"df.loc[:, ['eggs','salt']]   # All rows, some columns ","bb527986":" df.loc['Jan':'Apr',:]  # Some rows, all columns ","2265802e":"df.loc['Mar':'May', 'salt':'spam'] ","dcd00cde":"df","81f478a2":"df.iloc[2]  #indexwise\ndf.iloc[2,2]","2e2d9610":" df.iloc[2:4, 2]","e6eb09f9":" df","08194cfb":"df.iloc[2:5, 1:] # A block from middle of the DataFrame ","d5633cd6":"df.loc['Jan':'May', ['eggs','salt']]   ","ac072f77":"df.iloc[[0,4,5], 0:2] ","e266481c":" df['eggs']\n ","a2be6f44":"type(df['eggs'])","c898b8e0":"df[['eggs']] ","10719905":"type(df[['eggs']]) ","8f6b4d36":"df","fc78c7c3":"df['salt'] > 60","70db0732":"df.salt > 60","4bd54eec":"a = df.salt > 60","99e1d01f":"type(a) #this is a series","fb93cdc7":"df[a]","8ef1a771":"df[df.salt>60]","63e7d31c":"(df.salt >= 50) & (df.eggs < 200)","6fab49b6":" df[(df.salt >= 50) & (df.eggs < 200)] # Both conditions","47936cbd":"(df.salt >= 50) | (df.eggs < 200)","5bcd0b87":" df[(df.salt >= 50) | (df.eggs < 200)] # Either condition","69f7a055":"df2 = df.copy()\ndf2","6fed8c22":" df2['bacon']=[0,0,60,0,90,100]\n df2","6a83b7ed":"df3=df2.copy()\ndf3","686cf882":"other = pd.DataFrame({'eggs': ['K0', 'K1', 'K2'],\n                      'salt': ['b10', 'b20', 'b50'],\n                      'spam': ['s1', 's2', 's3'],\n                      'bacon': ['bc0', 'bc1', 'cb2']},index=[\"July\", \"Aug\", \"Sept\"])\nother","ea3f711d":"df2.append(other)","8687b159":"df3","c2f88bfd":"df3.columns=['X', 'Y', 'Z','T']\ndf3","b06e8dd0":"df3.drop(\"T\",axis=1,inplace=True)\ndf3","3dad0f94":"df","4253dfcc":"df['bacon']=[0,0,0,0,0,1]\ndf['bacon'].any()","3ea49691":"df","c5369b46":"df.loc[:, df.all()] ","b12e52e9":"df.loc[:, df.isnull().any()]","1c13c69b":"df","716c807d":"df.loc[:, df.notnull().any()] ","274123f5":"df.dropna(how='any') ","e127821e":"df","18c3562e":"df.salt > 55","79029cf6":"df.eggs[df.salt > 55]  #returns a series","5130418a":"#DataFrame Append","901c0849":"Selecting a column (i.e., Series)","48fc821b":"#DataFrame","e32618a6":"Select columns without NaNs","7902a236":"#Series : First main data type in Pandas","a57cacc7":"Combining filters","9bf16da6":"# Slicing DataFrames","335ff3aa":"Using lists rather than slices (2)","3b6de8e9":"# Introduction to Pandas\n---","37248108":"Using the .loc accessor\n* Access a group of rows and columns by label(s) or a boolean array.","044e193a":"Using the .iloc accessor\n* Purely integer-location based indexing for selection by position.","014e569b":"Using lists rather than slices (1)","f6609197":"Drop rows with any NaNs","3d307743":"Filtering with a Boolean Series","17facfb1":"A series is a 1D-array that can store any data type","ebfa0c2f":"#Importing pandas library and reading a CSV file into a dataframe.","761e606b":"Series versus 1-column DataFrame","e1324443":"Slicing and indexing a Series","4dd24036":"Select columns with all nonzeros","bc6af84c":"* LOC is not based on index. The stop limit is **not** exclusive\n* ILOC is based on index. The stop limit is exclusive","1edc3c75":"\nPandas is an open-source easy-to-use python library for data manipulation and analysis.","4e9c2780":"#DataFrames with zeros and NaNs","b4d0138f":"Selecting only some columns","5a73391c":"## Indexing using square brackets","36c075de":"DataFrame is a 2-dimensional labeled data structure with columns of potentially different types. You can think of it like a spreadsheet or SQL table, or a dictionary of Series objects. ","ea116f6d":"Filtering a column based on another","fb69ba65":"Using column atribute and row index\/label","f5e69f88":"# Indexing DataFrames\n ","69cc7fa9":"Select columns with any NaNs","37763f9c":"#Filtering DataFrames","58933046":"Creating a Boolean Series"}}