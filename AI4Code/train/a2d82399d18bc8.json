{"cell_type":{"add41b7b":"code","1ddcc553":"code","55c6ea85":"code","71d0a0a9":"code","ceb2d582":"code","087c8cc4":"code","3ada1a13":"code","40eb77ee":"code","8b212162":"code","d718d8ba":"code","bea7ef09":"code","9f9f8b60":"code","f21d553f":"code","1b5e8747":"code","44d50b0b":"code","c518485d":"code","099245a5":"code","53ec3a77":"code","6a962d62":"code","34ed0e79":"code","6c3bdad5":"code","918032fa":"code","cb263931":"code","95ec0d3b":"code","fdba1e2b":"code","8f09159b":"code","c5bf83ab":"code","620dfebf":"code","0842c1b9":"code","bb0f2e96":"code","b92f260a":"code","9dad9132":"code","5c7b1b78":"code","f4ddfebc":"code","92d8431f":"code","4c3bb4fb":"code","226d2703":"code","562e0285":"code","7656d5e8":"code","c546342f":"code","714e941b":"code","aac00100":"code","dcbceb3c":"code","1e44de80":"code","da7433e3":"code","9377d350":"code","7506c268":"code","d197c8c3":"code","4f7ac916":"code","9359c729":"code","3ddf3f84":"code","3a31fd9e":"code","27570ec1":"code","6253a89a":"code","b4119084":"code","6a27b1a8":"code","fb4e0294":"code","1bb18bd1":"code","d7663c4f":"code","c8ffc5fe":"code","7ca9c1e3":"code","20264443":"code","f5593d47":"code","b6d6f240":"code","18ec13c0":"code","c07bd20c":"code","53b80d34":"code","5e48c0a7":"code","4ee42798":"code","df4f953b":"code","9a9c7350":"code","989171fa":"code","79da4fc1":"code","ed252253":"code","55002f57":"code","5e1526a9":"code","92a6c694":"code","13413d0b":"code","0354fc6f":"markdown","9e3a31a2":"markdown","4773112c":"markdown","74c5857b":"markdown","bd71c63f":"markdown","f3993d98":"markdown","594c6ffb":"markdown","7409323f":"markdown","f4449c77":"markdown","1a32e240":"markdown","8783f430":"markdown","0996afce":"markdown","20684272":"markdown","c985456a":"markdown","5dd383b5":"markdown","17a9c5a3":"markdown","00840cb4":"markdown","213b84ed":"markdown","3ff52af7":"markdown","9bec99f1":"markdown","2e31e4e1":"markdown","f8cb9726":"markdown","0fe56afd":"markdown","20eed85f":"markdown","416e8e41":"markdown","e43f573f":"markdown","1bb01637":"markdown"},"source":{"add41b7b":"import numpy as np\nimport pandas as pd\npd.options.mode.chained_assignment = None\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nfrom numpy import mean\nfrom skimage.io import imread\nfrom sklearn.preprocessing import StandardScaler,LabelEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import preprocessing","1ddcc553":"data = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')\ndata.head()","55c6ea85":"data.shape","71d0a0a9":"data.describe()","ceb2d582":"data.dtypes","087c8cc4":"#Identifying number of rooms of each time\ndata['room_type'].value_counts()","3ada1a13":"f, ax = plt.subplots(figsize=(15, 5))\ncolors = sns.color_palette('pastel')[0:3]\nplt.pie(data.room_type.value_counts(sort=True),labels=data.room_type.unique(),autopct='%.0f%%', colors=colors, radius=2);","40eb77ee":"##rooms with price\nrooms = data.groupby('room_type')['price']\nrooms.describe()","8b212162":"sns.countplot(x='room_type',data=data,palette='viridis')\nplt.title(\"Number of Rooms of Each Type\",fontsize=20)","d718d8ba":"# different neighbourhood groups \nf,ax = plt.subplots(figsize=(12,6))\nax = sns.countplot(data.neighbourhood_group,palette='Blues_d');\nax.set_title('Neighbourhood Groups');","bea7ef09":"##Counts of airbnb in neighbourhoods with room type category\nplt.figure(figsize=(12,6))\nsns.countplot(data=data, x='neighbourhood_group', hue='room_type', palette='pastel')\nplt.title('Counts of airbnb in neighbourhoods with room type category');\n","9f9f8b60":"#looking for the average price each neighbourhood groups holds in a seaborn pointplot\nsns.pointplot(x = 'neighbourhood_group', y='price', data=data, estimator=mean)","f21d553f":"#top 10 hosts on the basis of no of listings in entire NYC\ntop_10_hosts=data['host_name'].value_counts()[:10] ","1b5e8747":"top_10_hosts\n","44d50b0b":"##Top 10 hostes by host_name\ntop_host = data.host_name.value_counts()[:10]\nf,ax = plt.subplots(figsize=(12,6))\nax = sns.barplot(x = top_host.index,y=top_host.values,palette=\"pastel\")\nax.set_xticklabels(ax.get_xticklabels(), rotation=45);","c518485d":"##checking top 10 neighbourhoods on the basis of no of listings in entire NYC\ntop_10_neigbours= data['neighbourhood'].value_counts()[:10] \ntop_10_neigbours.plot(kind='bar',color='g')\nplt.xlabel('neighbourhood')\nplt.ylabel('counts in entire NYC')\nplt.title('Top neighbourhoods in entire NYC on the basis of count of listings')","099245a5":"#count of each room types in entire NYC\nplt.rcParams['figure.figsize'] = (8, 5)\nax= sns.countplot(x='room_type',hue='neighbourhood_group',data=data,palette='bright')\n\ntotal = len(data['room_type'])\nfor p in ax.patches:\n        percentage = '{:.1f}%'.format(100 * p.get_width()\/total)\n        x = p.get_x() + p.get_width() + 0.02\n        y = p.get_y() + p.get_height()\/2\n        ax.annotate(percentage, (x, y))\n\nplt.title('count of each room types in entire NYC')\nplt.xlabel('Rooms')\nplt.xticks(rotation=90)\nplt.ylabel('Room Counts')\n\nplt.show()","53ec3a77":"data['availability_365'].mean()","6a962d62":"#distribution of listings availability at NYC!\nsns.distplot(data['availability_365'])\n","34ed0e79":"## Most Expensive\ndata.nlargest(5,'price')[['name','neighbourhood_group','neighbourhood','host_name','room_type']]","6c3bdad5":"##Cheapest\ndata.sort_values(by='price',ascending=True)[['name','neighbourhood_group','neighbourhood','host_name','room_type']][:5]","918032fa":"#top 10 most reviewed listings in NYC!\ntop10_reviewed_listings= data.nlargest(10,'reviews_per_month')\ntop10_reviewed_listings[['name','reviews_per_month','neighbourhood_group']]","cb263931":"f,ax = plt.subplots(figsize=(10,8))\nax= sns.stripplot(x='room_type',y='reviews_per_month',hue='neighbourhood_group',dodge=True,data=data,palette='Set2')\nax.set_title('Most Reviewed room_types in each Neighbourhood Groups')","95ec0d3b":"##10 reviewed hosts on the basis of reviews\/month\nreviews_df=top10_reviewed_listings.groupby('host_name')['reviews_per_month'].mean() \nreviews_df=reviews_df.reset_index().sort_values(by='reviews_per_month',ascending=False)\nreviews_df.plot(x='host_name',y='reviews_per_month',kind='bar',color='b')\nplt.ylabel('Reviews counts')\nplt.xlabel('Host names')\nplt.title('Top 10 Reviews\/month received by hosts')","fdba1e2b":"## find where the coordinates belong from the latitude and longitude\nsns.set(rc={\"figure.figsize\": (10, 8)})\nax= sns.scatterplot(data=data, x=\"longitude\", y=\"latitude\",hue='neighbourhood_group',palette='bright')\nax.set_title('Location Co-ordinates')","8f09159b":"##observe the type of rooms as well\nsns.set(rc={\"figure.figsize\": (10, 8)})\nax= sns.scatterplot(x=data.longitude, y=data.latitude,hue=data.room_type,palette='muted')\nax.set_title('Distribution of type of rooms across NYC')","c5bf83ab":"data.info()","620dfebf":"data.isna().sum()","0842c1b9":"##Replacing missing values of reviews_per_month will be replaced with a score of 0.0\ndata['reviews_per_month'] = data['reviews_per_month'].fillna(0.0)","bb0f2e96":"## We have replaced all the missing reviews_per_month with a 0.0\n\ndata['reviews_per_month'].isnull().value_counts() ","b92f260a":"#Deleting rows with missing name values\ndata.dropna(subset=['name'], inplace=True)","9dad9132":"#Deleting rows with missing 'host_name' values\ndata.dropna(subset=['host_name'], inplace=True)","5c7b1b78":"data.info()\n","f4ddfebc":"f,ax = plt.subplots(figsize=(15,6))\nsns.distplot(data.price);\nplt.axvline(data.price.mean(), color='r');\n","92d8431f":"f,ax = plt.subplots(figsize=(15,6))\nsns.boxplot(data.price);","4c3bb4fb":"data[data.price == 0].shape","226d2703":"#using quantile approach to remove outliers.\n\nmin_threshold,max_threshold= data.price.quantile([0.01,0.999])\nmin_threshold,max_threshold","562e0285":"data[data.price<min_threshold].shape #prices less than min threshold!\n","7656d5e8":"df_n= data[(data.price>min_threshold)&(data.price<max_threshold)]\n","c546342f":"f,ax = plt.subplots(figsize=(15,6))\nsns.distplot(df_n.price);","714e941b":"def outliers_detection(col):\n    sorted(col)\n    Q1,Q3 = np.percentile(col , [25,75])\n    IQR = Q3 - Q1\n    lower = Q1 - (1.5 * IQR)\n    upper = Q3 + (1.5 * IQR)\n\n    return lower, upper","aac00100":"lower, upper = outliers_detection(data.price)\nlower, upper","dcbceb3c":"data= data[(data.price>lower)&(data.price<upper)]\n","1e44de80":"f,ax = plt.subplots(figsize=(15,6))\nsns.distplot(data.price);","da7433e3":"f,ax = plt.subplots(figsize=(15,6))\nsns.boxplot(data.price);","9377d350":"data.head()","7506c268":"#selecting useful columns\ndf = data[['neighbourhood_group','neighbourhood','room_type','minimum_nights','number_of_reviews','availability_365','price']]","d197c8c3":"df.head()","4f7ac916":"df.info()","9359c729":"#label encoding\ndf['neighbourhood_group'] = LabelEncoder().fit_transform(df['neighbourhood_group'])\ndf['neighbourhood'] = LabelEncoder().fit_transform(df['neighbourhood'])\ndf['room_type'] = LabelEncoder().fit_transform(df['room_type'])","3ddf3f84":"df.head()","3a31fd9e":"X = df.drop('price',axis=1)\n","27570ec1":"Y = df.price\n","6253a89a":"X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.30,random_state=1)","b4119084":"#Standardization","6a27b1a8":"#firt way by min_max_scaler\nmin_max_scaler = preprocessing.MinMaxScaler()","fb4e0294":"X_train = min_max_scaler.fit_transform(X_train)\nX_test = min_max_scaler.fit_transform(X_test)","1bb18bd1":"#second way by StandardScaler","d7663c4f":"from sklearn.preprocessing import StandardScaler\n","c8ffc5fe":"ss = StandardScaler()","7ca9c1e3":"X_train = ss.fit_transform(X_train)\nX_test = ss.transform(X_test)","20264443":"#Linear Regression Model\nfrom sklearn.linear_model import LinearRegression\nreg=LinearRegression()\nreg.fit(X_train,Y_train)\n","f5593d47":"Y_pred1=reg.predict(X_test)\n","b6d6f240":"from sklearn.metrics import r2_score\nacc1=r2_score(Y_test,Y_pred1)","18ec13c0":"acc1","c07bd20c":"#Decision Tree Regression Model\nfrom sklearn.tree import DecisionTreeRegressor\nDTree=DecisionTreeRegressor(min_samples_leaf=.0001)\nDTree.fit(X_train,Y_train)\n","53b80d34":"Y_pred2=DTree.predict(X_test)","5e48c0a7":"acc2=r2_score(Y_test,Y_pred2)","4ee42798":"acc2","df4f953b":"#Random forest Model\nfrom sklearn.ensemble import RandomForestRegressor\nR=RandomForestRegressor()\nR.fit(X_train,Y_train)","9a9c7350":"Y_pred3=R.predict(X_test)","989171fa":"acc3=r2_score(Y_test,Y_pred3)","79da4fc1":"acc3","ed252253":"#Ensemble Model\nY_pred_ensemble = (Y_pred1+Y_pred2+Y_pred3)\/3\n","55002f57":"acc_ensemble = (r2_score(Y_test,Y_pred_ensemble))\nprint(acc_ensemble)","5e1526a9":"performance = pd.DataFrame([acc1,acc2,acc3,acc_ensemble],index=['Model 1','Model 2','Model 3','Ensemble Model'],columns=['Accuracy'])","92a6c694":"performance","13413d0b":"sns.barplot(x=performance.Accuracy.values,y=performance.Accuracy.index)\n","0354fc6f":"#### check the expensive & cheapest listings with respect to prices leading in entire NYC","9e3a31a2":"availability_365 have uniform distribution with availability ranging from 0 to 370\n\nAlso the distribution looks flatter as compared to a normal distribution, known to be platykurtosis with a negative kurtosis(lack of outliers)","4773112c":"#### We see that the Ensemble model achieve the highest accuracy around to 50% ","74c5857b":"So, this are the listings with highest number of reviews, the highest being: Enjoy great views of the City in our Deluxe Room! with 58 reviews\/month followed by Great Room in the heart of Times Square! with a total of 27 reviews\/month. Top 2 are from Manhattan so we can decide the best suited place for a comfortable stay but the prices are high to afford.\n","bd71c63f":"#### Availability","f3993d98":"Manhattan has more listed properties with Entire home\/apt around 27% of total listed properties followed by Brooklyn with around 19.6%.\n\nPrivate rooms are more in Brooklyn as in 20.7% of the total listed properties followed by Manhattan with 16.3% of them. While 6.9% of private rooms are from Queens.\n\nVery few of the total listed have shared rooms listed on Airbnb where there's negligible or almost very rare shared rooms in Staten Island and Bronx.\n\nWe can infer that Brooklyn,Queens,Bronx has more private room types while Manhattan which has the highest no of listings in entire NYC has more Entire home\/apt room types.","594c6ffb":"#### Neighbourhood groups ","7409323f":"### Price\n","f4449c77":"## Applying Machine Learning Model","1a32e240":"Also, the cheapest listings mostly comes from Brooklyn and all are private rooms which makes sense.\n","8783f430":"## Exploratory data analysis\n","0996afce":"## Data Preprocessing","20684272":"#### Identifying and Replacing Missing Values","c985456a":"We can see that Private room recieved the most no of reviews\/month where Manhattan had the highest reviews received for Private rooms with more than 50 reviews\/month, followed by Manhattan in the chase.\n\nManhattan & Queens got the most no of reviews for Entire home\/apt room type.\n\nThere were less reviews recieved from shared rooms as compared to other room types and it was from Staten Island followed by Bronx.","5dd383b5":"#### Handling the outliers\n\n","17a9c5a3":"#### Checking for missing values","00840cb4":"#### reviews on listings in NYC","213b84ed":"## Read Data","3ff52af7":"#### lat&long","9bec99f1":"We can see that Manhattan has the highest(the costliest) average of price  followed by Brooklyn\n\nQueens and Staten Island have same average price\/day, while Bronx comes out to be the cheapest neighbourhood group in NYC.","2e31e4e1":"#### top 10 hosts","f8cb9726":"Looks like the most of the top 5 costliest listings belongs to Manhattan itself(being the most costliest place of living in NYC)","0fe56afd":"## Import libraries","20eed85f":"### Data Identification","416e8e41":"By the two scatterplots of latitude vs longitude we can infer there's is very less shared room throughout NYC as compared to private and Entire home\/apt.\n\n95% of the listings on Airbnb are either Private room or Entire\/home apt. Very few guests had opted for shared rooms on Airbnb.\n\nWe can infer that there are high range of prices across Manhattan being the most costliest place to stay in NYC","e43f573f":"#### Deleting Missing Values","1bb01637":"#### Room Type"}}