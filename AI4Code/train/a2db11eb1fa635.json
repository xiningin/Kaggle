{"cell_type":{"53fb739d":"code","a76d2417":"code","e6488706":"code","2da2fd77":"code","e74d2bf2":"code","c64bd24e":"code","b84daab8":"code","a7ae43b2":"code","f65bb2b3":"code","4eb49701":"code","fc56592c":"code","5b8a84b2":"code","5ebc049f":"code","e6ab762e":"code","1d4b55c6":"code","bebb8f0c":"code","bb599b97":"code","3303e11a":"code","c2cb1876":"code","7a171769":"code","79a674cf":"code","aa9944cb":"code","3a65a7d0":"code","40068268":"markdown","20a4ef01":"markdown","340841be":"markdown"},"source":{"53fb739d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set_style('whitegrid')","a76d2417":"train = pd.read_csv(\"..\/input\/predict-the-diabetes\/train.csv\",index_col='Id')\ntest = pd.read_csv(\"..\/input\/predict-the-diabetes\/test.csv\",index_col='Id')\ndata = pd.concat([train,test])","e6488706":"data = data.reset_index()","2da2fd77":"plt.figure(figsize=(9,5))\ncorr_mat = data.corr('pearson')\nmask = np.triu(np.ones_like(corr_mat, dtype=np.bool))\nsns.heatmap(corr_mat,cmap='RdBu',annot=True,mask=mask)","e74d2bf2":"sns.pairplot(data,\n             hue='Outcome',\n             vars=['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin','BMI', 'DiabetesPedigreeFunction', 'Age']);","c64bd24e":"plt.figure(figsize=(25,10))\nfor i,col in enumerate(data.drop(columns=['Outcome','Id']).columns):\n    plt.subplot(2,4,i+1)\n    #sns.kdeplot(train[col])\n    gr = data.groupby('Outcome')[col]\n    for label, arr in gr:\n        sns.kdeplot(arr, label=label,shade=True)\n    plt.title(col)","b84daab8":"plt.figure(figsize=(10,10))\n\nplt.subplot(2,2,1)\nsns.scatterplot(x='SkinThickness',y='Insulin',hue='Outcome',data=train )\n\nplt.subplot(2,2,2)\nsns.scatterplot(x='Glucose',y='Insulin',data=train,hue='Outcome')\n\nplt.subplot(2,2,3)\nsns.scatterplot(x='BloodPressure',y='Insulin',data=train,hue='Outcome')\n\nplt.subplot(2,2,4)\nsns.scatterplot(x='BMI',y='Insulin',data=train,hue='Outcome')","a7ae43b2":"plt.figure(figsize=(25,10))\nfor i,col in enumerate(data.drop(columns=['Outcome','Id']).columns):\n    plt.subplot(2,4,i+1)\n    sns.boxplot(data[col])","f65bb2b3":"data['Preg_Band']=pd.cut(data['Pregnancies'],\n                               bins=[0,1,2,3,5,7,18],\n                               labels = [0,1,2,3,4,5],include_lowest=True)\n    \ndata['Pedigree_Band'] = pd.cut(data['DiabetesPedigreeFunction'],\n                                    bins=[0,0.25,0.5,0.75,1,1.5,7],\n                                   labels=[0,1,2,3,4,5])\ndata['Insulin_Band'] = pd.cut(data['Insulin'],\n                                   bins=[0,50,100,150,300,800],\n                                  labels=[0,1,2,3,4],include_lowest=True)\n    \ndata['Glucose_Band'] = pd.cut(data['Glucose'],\n                                   bins=[0,50,100,125,150,300],\n                                  labels=[0,1,2,3,4],include_lowest=True)","4eb49701":"data","fc56592c":"data.drop(columns=['Pregnancies','DiabetesPedigreeFunction','Insulin','Glucose'],inplace=True)","5b8a84b2":"data.info()","5ebc049f":"data.loc[:,'Preg_Band':'Glucose_Band'] = data.loc[:,'Preg_Band':'Glucose_Band'].fillna(0).astype(int)","e6ab762e":"train = data.loc[data['Outcome'] <= 1,:]\ntest = data.loc[data['Outcome'].isna(),:]","1d4b55c6":"X = train.drop(['Outcome','Id'],axis=1)\ny = train['Outcome']\n\nindexes = test['Id']\ntest = test.drop(['Outcome','Id'],axis=1)","bebb8f0c":"from sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state=42)","bb599b97":"X_test.head()","3303e11a":"from sklearn.metrics import accuracy_score, log_loss\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC, LinearSVC, NuSVC\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nfrom sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n\nclassifiers = [\n    LogisticRegression(),\n    KNeighborsClassifier(5),\n    SVC(kernel=\"rbf\", C=0.025, probability=True),\n    NuSVC(probability=True),\n    DecisionTreeClassifier(),\n    RandomForestClassifier(),\n    AdaBoostClassifier(),\n    GradientBoostingClassifier(),\n    GaussianNB(),\n    LinearDiscriminantAnalysis(),\n    QuadraticDiscriminantAnalysis()]\n\n# Logging for Visual Comparison\nlog_cols=[\"Classifier\", \"Accuracy\", \"Log Loss\"]\nlog = pd.DataFrame(columns=log_cols)\n\nfor clf in classifiers:\n    clf.fit(X_train, y_train)\n    name = clf.__class__.__name__\n    \n    #print(\"=\"*30)\n    #print(name)\n    \n    #print('****Results****')\n    train_predictions = clf.predict(X_test)\n    acc = accuracy_score(y_test, train_predictions)\n    #print(\"Accuracy: {:.4%}\".format(acc))\n    \n    train_predictions = clf.predict_proba(X_test)\n    ll = log_loss(y_test, train_predictions)\n    #print(\"Log Loss: {}\".format(ll))\n    \n    log_entry = pd.DataFrame([[name, acc*100, ll]], columns=log_cols)\n    log = log.append(log_entry)\n    \n#print(\"=\"*30)","c2cb1876":"sns.set_color_codes(\"muted\")\nsns.barplot(x='Accuracy', y='Classifier', data=log, color=\"b\")\n\nplt.xlabel('Accuracy %')\nplt.title('Classifier Accuracy')\nplt.show()","7a171769":"log.sort_values(by='Accuracy')","79a674cf":"gnb =  GaussianNB()\ngnb.fit(X,y)\npreds = gnb.predict(test)","aa9944cb":"submission = pd.DataFrame({\n    'Id' : indexes ,\n    'Outcome' : preds\n})\nsubmission","3a65a7d0":"submission.to_csv('Submission.csv',index=False)","40068268":"## Exploratory Data Analysis","20a4ef01":"## Feature Manipulation","340841be":"## Modelling"}}