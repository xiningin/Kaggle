{"cell_type":{"b6845e19":"code","41eb4e43":"code","1cadb835":"code","78f3a823":"code","0dc173ca":"code","6412a550":"code","b21c69f5":"code","89063088":"code","5c412924":"code","06867842":"code","5f4be254":"code","d54cf3d6":"code","effbc74b":"code","65754cc3":"code","ced10ee9":"code","58352962":"code","003d7ba8":"code","1ac7d584":"code","c1310097":"code","bcaa03f8":"code","7e84b4b0":"code","649799aa":"code","e3b9a0e8":"code","913fb640":"code","c8da3831":"code","89a0fbfa":"code","f9862b99":"code","03eb35be":"code","8e853b8b":"code","385e4a25":"code","9cd8136f":"code","e51a2054":"code","f0de99af":"code","5fa6f797":"code","e013f38f":"code","95518d8e":"code","1bbbac5f":"code","31ef8349":"code","4724b6b3":"code","a049b0d5":"code","834688fa":"code","b7d2a770":"code","c8316eca":"code","06193ed3":"code","604c63ca":"code","bad0a28d":"code","93ab74b2":"code","f21de05d":"code","a2d8866c":"code","aec67b72":"code","e3cde8e4":"code","4eddb5b9":"code","7b799525":"code","c2f081a2":"code","e33c3882":"code","90ad4806":"markdown","6ecfde33":"markdown","947aa40a":"markdown","4d58d017":"markdown","04793bb4":"markdown","6b5bdae5":"markdown","22ea225b":"markdown","7166293c":"markdown","f5ebf4b7":"markdown","6f25c79e":"markdown","0283225a":"markdown","0c964eb9":"markdown"},"source":{"b6845e19":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# For data visualization\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns; sns.set()\n\n# Disabling warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")\n\n# ML \nfrom sklearn.model_selection import train_test_split,ShuffleSplit,GridSearchCV\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score,mean_squared_error,roc_curve,roc_auc_score,classification_report,r2_score,confusion_matrix\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC,SVR\nfrom sklearn.svm import LinearSVC\nfrom sklearn.linear_model import Perceptron\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier,RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier,KNeighborsRegressor\nfrom sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier,GradientBoostingRegressor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","41eb4e43":"hd = pd.read_csv(\"\/kaggle\/input\/heart-disease-uci\/heart.csv\")\ndf = hd.copy()\ndf.tail()","1cadb835":"df.info()\ndf.isnull().any()","78f3a823":"df.target.value_counts()","0dc173ca":"df.target.value_counts().plot.barh();","6412a550":"sns.countplot(x=\"target\",hue = \"sex\", data=df, palette=\"bwr\");","b21c69f5":"df.describe().T","89063088":"a = pd.get_dummies(df['cp'], prefix = \"cp\")\nb = pd.get_dummies(df['thal'], prefix = \"thal\")\nc = pd.get_dummies(df['slope'], prefix = \"slope\")","5c412924":"frames = [df, a, b, c]\ndf = pd.concat(frames, axis = 1)\ndf.head()","06867842":"df = df.drop(columns = ['cp', 'thal', 'slope'])\ndf.head()","5f4be254":"y = df.target.values\nx_data = df.drop(['target'], axis = 1)","d54cf3d6":"# Normalization\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values","effbc74b":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)","65754cc3":"lr = LogisticRegression(solver = 'liblinear')\nlr_model = lr.fit(x_train,y_train)\nlr_model","ced10ee9":"y_pred = lr_model.predict(x_test)","58352962":"confusion_matrix(y_test,y_pred)","003d7ba8":"accuracy_score(y_test,y_pred)","1ac7d584":"print(classification_report(y_test,y_pred))","c1310097":"lr_model.predict(x_test)[-10:]","bcaa03f8":"lr_model.predict_proba(x_test)[-10:]","7e84b4b0":"y_probs = lr_model.predict_proba(x_test)[:,1]","649799aa":"y_pred = [1 if i>0.52 else 0 for i in y_probs]\ny_pred[-10:]","e3b9a0e8":"confusion_matrix(y_test,y_pred)","913fb640":"accuracy_score(y_test,y_pred)","c8da3831":"logit_roc_auc = roc_auc_score(y_test,lr_model.predict(x_test))\n\nfpr, tpr, tresholds = roc_curve(y_test,lr_model.predict_proba(x_test)[:,1])\nplt.figure(figsize=(8,8))\nplt.plot(fpr,tpr,label = \"AUC (area = %0.2f)\"%logit_roc_auc)\nplt.plot([0,1],[0,1],\"r--\")\nplt.xlim([0.0,1.0])\nplt.ylim([0.0,1.0])\nplt.xlabel(\"False Positive Ratio\")\nplt.ylabel(\"True Positive Ratio\")\nplt.title('ROC Curve');","89a0fbfa":"print('Accuracy Rate:',accuracy_score(y_test, y_pred))\nprint(\"Logistic TRAIN score with \",format(lr_model.score(x_train, y_train)))\nprint(\"Logistic TEST score with \",format(lr_model.score(x_test, y_test)))\ncm=confusion_matrix(y_test,y_pred)\nprint(cm)","f9862b99":"y = df.target\nx = df.drop('target',axis = 1)\nx_train,x_test,y_train,y_test = train_test_split(x,y,\n                                                test_size = 0.20,\n                                                random_state = 42)","03eb35be":"nb = GaussianNB()\nnb_model = nb.fit(x_train,y_train)\nnb_model","8e853b8b":"y_pred = nb_model.predict(x_test)\ny_pred[-10:]","385e4a25":"accuracy_score(y_test,y_pred)","9cd8136f":"y_probs = nb_model.predict_proba(x_test)[:,1]\ny_pred = [1 if i>0.4 else 0 for i in y_probs]\ny_pred[-10:]","e51a2054":"accuracy_score(y_test,y_pred)","f0de99af":"y = df.target\nx = df.drop('target',axis = 1)\nx_train,x_test,y_train,y_test = train_test_split(x,y,\n                                                test_size = 0.20,\n                                                random_state = 42)","5fa6f797":"knn =KNeighborsClassifier()\nknn_model = knn.fit(x_train,y_train)\nknn_model","e013f38f":"y_pred = knn_model.predict(x_test)","95518d8e":"accuracy_score(y_test,y_pred)","1bbbac5f":"knn_params = {\"n_neighbors\":np.arange(1,50)}","31ef8349":"knn =KNeighborsClassifier()\nknn_cv = GridSearchCV(knn,knn_params,cv = 10)\nknn_cv = knn_cv.fit(x_train,y_train)","4724b6b3":"print(\"Best Score:\"+str(knn_cv.best_score_))\nprint(\"Best Parameters:\"+str(knn_cv.best_params_))","a049b0d5":"knn_final =KNeighborsClassifier(n_neighbors = 21)\nknn_final = knn_final.fit(x_train,y_train)\ny_pred = knn_final.predict(x_test)\naccuracy_score(y_test,y_pred)","834688fa":"y = df.target\nx = df.drop('target',axis = 1)\nx_train,x_test,y_train,y_test = train_test_split(x,y,\n                                                test_size = 0.20,\n                                                random_state = 42)","b7d2a770":"svm_model = SVC(kernel='linear').fit(x_train,y_train)\nsvm_model","c8316eca":"y_pred = svm_model.predict(x_test)","06193ed3":"accuracy_score(y_test,y_pred)","604c63ca":"svc_params = {\"C\":np.arange(1,50)}\nsvc = SVC(kernel = 'linear')\nsvc_cv_model = GridSearchCV(svc,svc_params,\n                           cv = 10,\n                           n_jobs = -1,\n                           verbose = 2)\nsvc_cv_model.fit(x_train,y_train)\n","bad0a28d":"print(\"Best Parameters:\"+str(svc_cv_model.best_params_))\naccuracy_score(y_test,y_pred)","93ab74b2":"svc_tuned = SVC(kernel = \"linear\",C=2).fit(x_train,y_train)\ny_pred = svc_tuned.predict(x_test)","f21de05d":"accuracy_score(y_test,y_pred)","a2d8866c":"svc_model = SVC(kernel = \"rbf\").fit(x_train,y_train)\nsvc_model","aec67b72":"y_pred = svc_model.predict(x_test)\naccuracy_score(y_test,y_pred)","e3cde8e4":"svc_params ={\"C\":[0.00001,0.001,0.01,5,10,50,100],\n            \"gamma\":[0.0001,0.001,0.01,1,5,10,50,100]}","4eddb5b9":"svc =SVC()\nsvc_cv_model = GridSearchCV(svc,svc_params,\n                           cv = 10,\n                           n_jobs = -1,\n                           verbose = 2)\nsvc_cv_model.fit(x_train,y_train)","7b799525":"print(\"Best Parameters:\"+str(svc_cv_model.best_params_))","c2f081a2":"svc_tuned = SVC(C=100,gamma = 0.0001).fit(x_train,y_train)\n","e33c3882":"y_pred = svc_tuned.predict(x_test)\naccuracy_score(y_test,y_pred)","90ad4806":"### Tuning","6ecfde33":"### Now we will try to predict patients with given specifities has the heart attack or not.","947aa40a":"## 2) Naive Bayes","4d58d017":"## 5) SVM-RBF","04793bb4":"# Exploring the data","6b5bdae5":"## 3) KNN ","22ea225b":"### Model Tuning","7166293c":"### ROC Curve","f5ebf4b7":"### Tuning","6f25c79e":"## 4) SVM (Support Vector Machines)","0283225a":"## 1) Logistic Regression","0c964eb9":"### Tuning"}}