{"cell_type":{"14380af0":"code","d7553639":"code","606bf7f8":"code","0fd84016":"code","0daca8e5":"code","62491b5d":"code","1ceaae11":"code","ec7a9b47":"code","c1d49682":"code","a705239a":"code","e8611db0":"code","c1ac2f36":"code","a3d75345":"code","2e40eab8":"code","efc5fe75":"code","dba2ae81":"code","32e99278":"code","413f2208":"code","bc75bda5":"code","aadc1249":"code","b556d999":"code","0b2142f7":"code","16f325a8":"code","4be47683":"code","cad5a3dd":"code","c77c4024":"code","3073eb92":"code","5252b514":"code","84f635ad":"code","7df8976a":"code","63d2d167":"code","51c8dfd3":"code","c2a63b91":"code","a0f3fe7f":"code","d6f51027":"code","1e0605f4":"code","2631fe60":"code","da377b77":"code","db9deabd":"code","d67c9419":"code","135f0be1":"code","8b56fa4e":"code","d08fb77f":"code","13830f25":"code","6ff63a70":"code","e03aa36c":"code","73c8838e":"code","91a50e50":"code","db95389d":"code","9c845ae2":"code","3f556583":"code","79a9d12a":"code","bdfc6bee":"code","73e17587":"code","5ccb9fda":"code","ff0741fb":"code","59e4c036":"code","b70a2652":"code","f07c47a1":"code","f1a2f2c3":"code","2170ccb7":"code","bacc9779":"markdown","6ff0cd8e":"markdown","b3307d12":"markdown","c32bf1de":"markdown","db838210":"markdown","f15824cc":"markdown","e0ff20ee":"markdown","94fe9d98":"markdown","5366ade7":"markdown","0dca55a3":"markdown","015dd468":"markdown","4deeef5a":"markdown","9a29363a":"markdown","89537d1b":"markdown","5c6b49ca":"markdown","4ecc2243":"markdown","deeda808":"markdown","a54a6667":"markdown","3dfd42a2":"markdown","e97cfa06":"markdown","539c5201":"markdown","70ba2fcd":"markdown","b4076642":"markdown","4844e84c":"markdown","14aa94a3":"markdown","3b3f1b25":"markdown","75699a42":"markdown","eb7b0c81":"markdown"},"source":{"14380af0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d7553639":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport statistics\nimport sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom pandas.plotting import scatter_matrix\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import StandardScaler\n%matplotlib inline\nimport sklearn.metrics as sm\nfrom sklearn.base import TransformerMixin,BaseEstimator\nfrom sklearn.preprocessing import StandardScaler,OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.model_selection import ShuffleSplit\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.linear_model import Lasso\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import Ridge\nfrom xgboost import XGBRegressor\nfrom sklearn.neighbors import KNeighborsRegressor\n\npd.options.display.max_rows = 1500\npd.options.display.max_columns = 100\n","606bf7f8":"#read data\ntrain_set = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest_set = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","0fd84016":"print(len(train_set))\nprint(len(test_set))","0daca8e5":"train_set.head()","62491b5d":"print(len(train_set.columns))","1ceaae11":"train_set.info()","ec7a9b47":"train_set.describe()","c1d49682":"print(train_set.dtypes) ","a705239a":"train_set.isnull().sum().sort_values(ascending = False)","e8611db0":"def remove_null_columns(dataset):\n    dataset = dataset.drop(columns=['PoolQC', 'MiscFeature', 'Alley', 'Fence'])\n    return dataset","c1ac2f36":"def clean_categorical(dataset):\n    dataset = pd.DataFrame(dataset)\n    categorical_data = dataset.select_dtypes(['object']).columns\n    dataset[categorical_data] = dataset[categorical_data].fillna(dataset[categorical_data].mode().iloc[0])\n    dataset[categorical_data].mode()\n    #convert categorical data into type int\n    dataset[categorical_data] = dataset[categorical_data].astype('category').apply(lambda x: x.cat.codes)\n    \n    return dataset","a3d75345":"\ndef clean_numerical(dataset):\n    numerical_data = dataset.select_dtypes(['float64','int64']).columns\n    dataset[numerical_data] = dataset[numerical_data].fillna(dataset[numerical_data].mean())\n    dataset[numerical_data].mean()\n    \n    return dataset","2e40eab8":"def clean_dataset(dataset):\n    \n    # Remove features with lot of null values\n    dataset = remove_null_columns(dataset)\n    \n    # Replace categorical null values with most frequent values present in each column\n    dataset = clean_categorical(dataset) \n    \n    #replace numerical null values with the mean value of each column\n    dataset = clean_numerical(dataset)\n    \n\n    return dataset","efc5fe75":"train_set = clean_dataset(train_set)\n","dba2ae81":"train_set.head()","32e99278":"print(len(train_set.columns))","413f2208":"print(train_set.isnull().sum().sort_values(ascending = False))","bc75bda5":"train_set.head()","aadc1249":"train_set.hist(figsize=(30,30), bins=20)\nplt.show()","b556d999":"def remove_irrelavant(dataset):\n    dataset = dataset.drop(columns=['LowQualFinSF','PoolArea','MiscVal','3SsnPorch','Heating', 'RoofMatl','Condition2','Utilities','Street'])\n    \n    return dataset","0b2142f7":"train_set = remove_irrelavant(train_set)\nprint(len(train_set.columns))","16f325a8":"print(train_set.dtypes)","4be47683":"def convert_float(dataset):\n    float_columns = dataset.select_dtypes(['float64']).columns\n    dataset[float_columns] = dataset[float_columns].applymap(np.int64)\n    dataset = dataset.astype('int64')\n    \n    return dataset","cad5a3dd":"#convert all the float values into int\ntrain_set = convert_float(train_set)\n    ","c77c4024":"print(train_set.dtypes)","3073eb92":"train_set['SalePrice'].describe()","5252b514":"sns.displot(train_set['SalePrice'])","84f635ad":"correlation_matrix = train_set.corr()\ncorrelation_matrix['SalePrice'].sort_values(ascending = False)","7df8976a":"\ncorrelation_num = 30\ncorrelation_cols = correlation_matrix.nlargest(correlation_num,'SalePrice')['SalePrice'].index\ncorrelation_mat_sales = np.corrcoef(train_set[correlation_cols].values.T)\nsns.set(font_scale=1.25)\nf, ax = plt.subplots(figsize=(12, 9))\nhm = sns.heatmap(correlation_mat_sales, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 7}, yticklabels=correlation_cols.values, xticklabels=correlation_cols.values)\nplt.show()","63d2d167":"grph= pd.concat([train_set['SalePrice'], train_set['GrLivArea']], axis=1)\ngrph.plot.scatter(x='GrLivArea', y='SalePrice', ylim=(0,800000))","51c8dfd3":"train_set = train_set.drop(train_set[(train_set['GrLivArea']>4000) & (train_set['SalePrice']<300000)].index)\n\n# plot again\ngrph = pd.concat([train_set['SalePrice'], train_set['GrLivArea']], axis=1)\ngrph.plot.scatter(x='GrLivArea', y='SalePrice', ylim=(0,800000))\n","c2a63b91":"train_set.shape","a0f3fe7f":"y= train_set['SalePrice']\nx= train_set.drop(columns=['SalePrice','Id'])\nprint(len(train_set.columns))","d6f51027":"X_train, X_test, Y_train, Y_test = train_test_split(x,y, test_size = 0.3, random_state = 60,shuffle=True)\nprint(len(X_train))\nprint(len(X_test))\n ","1e0605f4":"linear_model = LinearRegression()\nlinear_model.fit(X_train, Y_train)\n\n#make predictions using linear regression\nprice_predict =(linear_model.predict(X_test))\n\n#Measure Performance \nlinear_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared error: \",linear_mse)\nlinear_SqMse = np.sqrt(linear_mse)\nprint(\"Root Mean Squared error: \", linear_SqMse)\n\nprint(\"Explain variance score for Linear Regression =\", round(sm.explained_variance_score(Y_test,price_predict),2)) \nprint(\"R2 score for Linear Regression =\", round(sm.r2_score(Y_test, price_predict), 2))\n","2631fe60":"plt.scatter(Y_test, price_predict)","da377b77":"\nlasso_model= Lasso(max_iter=5000)\n\n# Train the model with training data\nlasso_model.fit(X_train,Y_train)\n#make predictions \nprice_predict =(lasso_model.predict(X_test))\n\n\nlasso_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared Error : \" , lasso_mse)\nlasso_SqMse = np.sqrt(lasso_mse)\nprint(\"Root Mean Squared error: \", lasso_SqMse)\n\nprint(\"Explain variance score for Lasso Regression =\", round(sm.explained_variance_score(Y_test,price_predict), 2)) \nprint(\"R2 score for Lasso Regression =\", round(sm.r2_score(Y_test, price_predict), 2))\n\n","db9deabd":"plt.scatter(Y_test, price_predict)","d67c9419":"# Create a model with 50 decision trees\nforest_model= RandomForestRegressor(n_estimators = 50, random_state = 42)\n\n# Train the model with training data\nforest_model.fit(X_train,Y_train)\n#make predictions using random forest model\nprice_predict =(forest_model.predict(X_test))\n\n\nforest_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared Error : \" , forest_mse)\nforest_SqMse = np.sqrt(forest_mse)\nprint(\"Root Mean Squared error: \", forest_SqMse)\n\nprint(\"Explain variance score for Random Forest Regression =\", round(sm.explained_variance_score(Y_test,price_predict), 2)) \nprint(\"R2 score for Random Forest Regression =\", round(sm.r2_score(Y_test, price_predict), 2))\n\n","135f0be1":"plt.scatter(Y_test, price_predict)","8b56fa4e":"tree_model= DecisionTreeRegressor()\n\n# Train the model with training data\ntree_model.fit(X_train,Y_train)\n#make predictions \nprice_predict =(tree_model.predict(X_test))\n\n\ntree_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared Error : \" , tree_mse)\ntree_SqMse = np.sqrt(tree_mse)\nprint(\"Root Mean Squared error: \", tree_SqMse)\n\nprint(\"Explain variance score for Decision Tree Regression =\", round(sm.explained_variance_score(Y_test,price_predict), 2)) \nprint(\"R2 score for Decision Tree Regression =\", round(sm.r2_score(Y_test, price_predict), 2))\n\n","d08fb77f":"plt.scatter(Y_test, price_predict)","13830f25":"ridge_model = Ridge()\nridge_model.fit(X_train, Y_train)\n\n#make predictions using linear regression\nprice_predict =(ridge_model.predict(X_test))\n\n#Measure Performance \nridge_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared error: \",ridge_mse)\nridge_SqMse = np.sqrt(ridge_mse)\nprint(\"Root Mean Squared error: \", ridge_SqMse)\n\nprint(\"Explain variance score for Lasso Regression =\", round(sm.explained_variance_score(Y_test,price_predict),2)) \nprint(\"R2 score for Lasso Regression =\", round(sm.r2_score(Y_test, price_predict), 2))","6ff63a70":"plt.scatter(Y_test, price_predict)","e03aa36c":"xgb_model = XGBRegressor()\nxgb_model.fit(X_train, Y_train)\n\n#make predictions using linear regression\nprice_predict =(xgb_model.predict(X_test))\n\n#Measure Performance \nxgb_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared error: \",xgb_mse)\nxgb_SqMse = np.sqrt(xgb_mse)\nprint(\"Root Mean Squared error: \", xgb_SqMse)\n\nprint(\"Explain variance score for Lasso Regression =\", round(sm.explained_variance_score(Y_test,price_predict),2)) \nprint(\"R2 score for Lasso Regression =\", round(sm.r2_score(Y_test, price_predict), 2))","73c8838e":"plt.scatter(Y_test, price_predict)","91a50e50":"knn_model = KNeighborsRegressor()\nknn_model.fit(X_train, Y_train)\n\n#make predictions using linear regression\nprice_predict =(knn_model.predict(X_test))\n\n#Measure Performance \nknn_mse = mean_squared_error(Y_test,price_predict)\nprint(\"Mean Squared error: \",knn_mse)\nknn_SqMse = np.sqrt(knn_mse)\nprint(\"Root Mean Squared error: \", knn_SqMse)\n\nprint(\"Explain variance score for Lasso Regression =\", round(sm.explained_variance_score(Y_test,price_predict),2)) \nprint(\"R2 score for Lasso Regression =\", round(sm.r2_score(Y_test, price_predict), 2))","db95389d":"plt.scatter(Y_test, price_predict)","9c845ae2":"test_set.head()","3f556583":"test_set.dtypes","79a9d12a":"test_set.isnull().sum().sort_values(ascending = False)","bdfc6bee":"test_set = clean_dataset(test_set)","73e17587":"test_set.isnull().sum().sort_values(ascending = False)","5ccb9fda":"test_set = convert_float(test_set)","ff0741fb":"test_set.dtypes","59e4c036":"test_set = remove_irrelavant(test_set)","b70a2652":"test_id = test_set['Id']\ntest_x= test_set.drop(columns=['Id'])\nprint(len(test_x.columns))","f07c47a1":"y_prdict = lasso_model.predict(test_x)","f1a2f2c3":"submission = pd.DataFrame(list(zip(test_id, y_prdict)),\n               columns =['Id', 'SalePrice'])\nsubmission.head(20)","2170ccb7":"submission.to_csv('submission.csv', index=False)","bacc9779":"**Remove irrelevent data**","6ff0cd8e":"# **Random Forest Regressor**","b3307d12":"**convert all the float values into int64**","c32bf1de":"Most of the data are categorical. Before training the model, categorical data should be converted into numerical data\n\n","db838210":"# **XGBRegressor**","f15824cc":"**Replace numerical null values with the mean value of each column**","e0ff20ee":"# **Data Visualization**","94fe9d98":"# **Linear Regression**","5366ade7":"# **Find the correlation  with the SalePrice**","0dca55a3":"# **Ridge**","015dd468":"Now the new column count is 77. ","4deeef5a":"**Remove features with lot of null values**","9a29363a":"# **Lasso**","89537d1b":"16 features have null values\n* PoolQC 1453\n* MiscFeature 1406\n* Alley 1369\n* Fence 1179\n* FireplaceQu 690\n* LotFrontage 259\n* GarageType 81\n* GarageYrBlt 81\n* GarageFinish 81\n* GarageQual 81\n* GarageCond 81\n* BsmtExposure 38\n* BsmtFinType2 38\n* BsmtQual 37\n* BsmtCond 37\n* BsmtFinType1 37\n\nMost of the data in PoolQC, MiscFeature, Alley, Fence, are null data so I will remove those columns from dataset.","5c6b49ca":"**Convert data type of all features to int64**","4ecc2243":"**1. Read Data**","deeda808":"# **Sales Price**","a54a6667":"**3. Null values**","3dfd42a2":"# **Clean the dataset**","e97cfa06":"# **Decision Tree Regressor**","539c5201":"# **Let's now test with the Test set**","70ba2fcd":"**Replace categorical null values with most frequent values present in each column**","b4076642":"**2. Informantion about Dataset**","4844e84c":"# **Clean Test Set**","14aa94a3":"Based on the histograms, LowQualFinSF, PoolArea, MiscVal, 3SsnPorch have  lot of values near 0. Therefore, will remove these features from the dataset before training the model as they will not make much effect on the data.","3b3f1b25":"# Outliers","75699a42":"# **KNeighbors Regressor**","eb7b0c81":"# **Heat Map**"}}