{"cell_type":{"0aa4a227":"code","6129f452":"code","6107590a":"code","7f04aeb7":"code","fbebd2de":"code","cedb7539":"code","ecb75f65":"code","e007028c":"code","9d6dcec2":"code","b7daf74f":"code","aeff5d97":"code","7c4966dc":"code","07df0a8d":"code","033bc1ca":"code","b60b4dea":"code","dbf0971b":"code","a8759378":"code","1ee52ab9":"code","13463708":"code","123c9395":"code","ef5d4b33":"code","a83901ec":"code","8ffd80c9":"code","d3a62d09":"code","e631502d":"code","a519fcf5":"code","8de3b89b":"code","9a7e8d5a":"code","e0bd38ee":"code","3c160bca":"code","ce635799":"code","e4ae6dcf":"code","9d526efe":"code","abd696f8":"code","8a08c2c7":"code","68f71d50":"code","1dd9d16d":"code","47c568e8":"code","87e4dc44":"code","f5633e49":"code","2e9c5a50":"code","636239d6":"code","3d49a069":"code","bc8a423a":"code","3f60ca2a":"code","11602d64":"code","e5e50e6a":"code","316b0cc2":"code","3451080a":"code","5017cd10":"code","91f70a4a":"code","8da4f07a":"code","a03169fe":"code","4f57816a":"code","3ce9925b":"code","5f18d3db":"code","93af441b":"code","82609298":"code","3fcd6804":"code","7c419d31":"code","f4ff72bc":"markdown","daf9568f":"markdown"},"source":{"0aa4a227":"#Importing the required libraries and setting up the figure parameters\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport folium\nfrom folium import plugins\nimport lightgbm as lgb\nfrom sklearn.model_selection import KFold\nfrom matplotlib import rcParams\ndark_colors = [\"#99D699\", \"#B2B2B2\",\n                (0.8509803921568627, 0.37254901960784315, 0.00784313725490196),\n                (0.4588235294117647, 0.4392156862745098, 0.7019607843137254),\n                (0.9058823529411765, 0.1607843137254902, 0.5411764705882353),\n                (0.4, 0.6509803921568628, 0.11764705882352941),\n                (0.9019607843137255, 0.6705882352941176, 0.00784313725490196),\n                (0.6509803921568628, 0.4627450980392157, 0.11372549019607843),\n                (0.4, 0.4, 0.4)]\nrcParams['figure.figsize'] = (12, 9)\nrcParams['figure.dpi'] = 150\nrcParams['lines.linewidth'] = 2\nrcParams['axes.facecolor'] = \"white\"\nrcParams['axes.titlesize'] = 20      \nrcParams['axes.labelsize'] = 17.5\nrcParams['xtick.labelsize'] = 15 \nrcParams['ytick.labelsize'] = 15\nrcParams['legend.fontsize'] = 17.5\nrcParams['patch.edgecolor'] = 'none'\nrcParams['grid.color']=\"white\"   \nrcParams['grid.linestyle']=\"-\" \nrcParams['grid.linewidth'] = 1\nrcParams['grid.alpha']=1\nrcParams['text.color'] = \"444444\"\nrcParams['axes.labelcolor'] = \"444444\"\nrcParams['ytick.color'] = \"444444\"\nrcParams['xtick.color'] = \"444444\"","6129f452":"trips_df = pd.read_csv('..\/input\/trip.csv')\nstations_df = pd.read_csv('..\/input\/station.csv')","6107590a":"stations_df.head()","7f04aeb7":"stations_df.dtypes","fbebd2de":"heatmap = folium.Map([stations_df[\"lat\"].median(),stations_df[\"long\"].median()],zoom_start=10,tiles='Stamen Toner')","cedb7539":"stations_df[\"lat\"] = stations_df[\"lat\"].apply(lambda x:str(x))\nstations_df[\"long\"] = stations_df[\"long\"].apply(lambda x:str(x))","ecb75f65":"stations_df.head()","e007028c":"from folium.plugins import HeatMap\nstations_loc = [[float(stations_df.lat.values[i]),float(stations_df.long.values[i])] for i in range(len(stations_df))]\nheatmap.add_child(HeatMap(stations_loc,radius=10))\nfor index,row in stations_df.iterrows():\n    folium.Marker([float(row['lat']),float(row['long'])],popup=row['name']).add_to(heatmap)","9d6dcec2":"heatmap","b7daf74f":"trips_df.head()","aeff5d97":"trips_df['start_date'] = pd.to_datetime(trips_df['start_date'])\ntrips_df['end_date'] = pd.to_datetime(trips_df['end_date'])","7c4966dc":"start_station_info = stations_df[[\"id\",\"lat\",\"long\"]]\nstart_station_info.columns = [\"start_station_id\",\"start_lat\",\"start_long\"]\nend_station_info = stations_df[[\"id\",\"lat\",\"long\"]]\nend_station_info.columns = [\"end_station_id\",\"end_lat\",\"end_long\"]\ntrips_df = trips_df.merge(start_station_info,on=\"start_station_id\")\ntrips_df = trips_df.merge(end_station_info,on=\"end_station_id\")","07df0a8d":"trips_df.head()","033bc1ca":"plot_dict = dict()\nfor index,row in trips_df.iterrows():\n    start_lat = row['start_lat']\n    start_long = row['start_long']\n    end_lat = row['end_lat']\n    end_long = row['end_long']\n    key = str(start_lat)+'_'+str(start_long)+'_'+str(end_lat)+'_'+str(end_long)\n    if key in plot_dict:\n        plot_dict[key] += 1\n    else:\n        plot_dict[key] = 1","b60b4dea":"start_lat = []\nstart_long = []\nend_lat = []\nend_long = []\nnb_trips = []\nfor key,value in plot_dict.items():\n    start_lat.append(float(key.split('_')[0]))\n    start_long.append(float(key.split('_')[1]))\n    end_lat.append(float(key.split('_')[2]))\n    end_long.append(float(key.split('_')[3]))\n    nb_trips.append(int(value))","dbf0971b":"temp_df = pd.DataFrame({\"start_lat\":start_lat,\"start_long\":start_long,\"end_lat\":end_lat,\"end_long\":end_long,\"nb_trips\":nb_trips})","a8759378":"temp_df.dtypes","1ee52ab9":"temp_df.nb_trips.plot()","13463708":"temp_df.info()","123c9395":"temp_df.head()","ef5d4b33":"ave_lat = (temp_df.start_lat.median()+temp_df.end_lat.median())\/2\nave_lon = (temp_df.start_long.median()+temp_df.end_long.median())\/2\ndirections_map = folium.Map(location=[ave_lat, ave_lon], zoom_start=15)","a83901ec":"for index,row in temp_df.iterrows():\n    points = []\n    points.append(tuple([row['start_lat'],row['start_long']]))\n    points.append(tuple([row['end_lat'],row['end_long']]))\n    folium.PolyLine(points,color='red',weight=row['nb_trips']\/1000).add_to(directions_map)","8ffd80c9":"for index,row in stations_df.iterrows():\n    folium.Marker([float(row['lat']),float(row['long'])],popup=row['name']).add_to(directions_map)","d3a62d09":"directions_map","e631502d":"fig, ax1 = plt.subplots(figsize = (10,7))\nax1.grid(zorder=1)\nax1.xaxis.grid(False)\ntrip_dur = trips_df['duration'].values\/60\nplt.hist(trip_dur, bins = range(0,45,2),normed=True,zorder=0,color=dark_colors[1])\nplt.xlabel('Trip Duration (Minutes)')\nplt.ylabel('Percent of Trips')\nplt.title('Trip Duration Distribution')\nplt.figure(figsize=(15,12))\nhist, bin_edges = np.histogram(trip_dur, range(0,45,1), normed=True)\ncum_trip_dur = np.cumsum(hist)\nax2 = ax1.twinx()\nax2.plot(range(1,45,1),cum_trip_dur,c=dark_colors[0])\nax2.set_ylabel('Cumulative Proportion of Trips')\nax2.grid(b=False)","a519fcf5":"trips_df.head()","8de3b89b":"trips_df['week']=trips_df.start_date.dt.dayofweek\ntrips_df['start_hour'] = trips_df.start_date.dt.hour\ntrips_df['start_day'] = trips_df.start_date.dt.day\ntrips_df['end_hour'] = trips_df.end_date.dt.hour\ntrips_df['end_day'] = trips_df.end_date.dt.day","9a7e8d5a":"plt.figure(figsize=(15,12))\nweekdaytrips_df = trips_df.loc[(trips_df.duration <= 7200) & (trips_df.week <5)]\nweekdaytrips_df.boxplot(column=\"duration\",by=\"start_hour\",figsize=(15,12))\nplt.ylim(0,3600)\nplt.ylabel('Trip Duration (Seconds)')\nplt.xlabel('Hour of Day')\nplt.title('Trip Duration Distribution Over Time of Day (Week Days)')","e0bd38ee":"plt.figure(figsize=(15,12))\nweekendtrips_df = trips_df.loc[(trips_df.duration <= 7200) & (trips_df.week >4)]\nweekendtrips_df.boxplot(column=\"duration\",by=\"start_hour\",figsize=(15,12))\nplt.ylim(0,3600)\nplt.ylabel('Trip Duration (Seconds)')\nplt.xlabel('Hour of Day')\nplt.title('Trip Duration Distribution Over Time of Day (Weekend days)')","3c160bca":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    for col in df.columns:\n        col_type = df[col].dtype\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    return df","ce635799":"status_df = reduce_mem_usage(pd.read_csv('..\/input\/status.csv'))","e4ae6dcf":"status_df.head()","9d526efe":"status_df.info()","abd696f8":"status_df.time = pd.to_datetime(status_df.time)\nstatus_df = status_df[status_df.time.dt.minute%5 ==0]","8a08c2c7":"stations_df.rename(columns={\"id\":\"station_id\"},inplace=True)","68f71d50":"stations_df.installation_date = pd.to_datetime(stations_df.installation_date)","1dd9d16d":"status_df = status_df.merge(stations_df,on=\"station_id\",how=\"left\")","47c568e8":"status_df.head()","87e4dc44":"status_df.reset_index(inplace=True)\nstatus_df.drop(columns=[\"index\"],inplace=True)","f5633e49":"status_df[\"date\"] = status_df.time.dt.date","2e9c5a50":"status_df.head()","636239d6":"weather_df = reduce_mem_usage(pd.read_csv('..\/input\/weather.csv'))","3d49a069":"weather_df.date = pd.to_datetime(weather_df.date)","bc8a423a":"weather_df.head()","3f60ca2a":"zipcode_city_dict = dict()\nzipcode_city_dict[95113] = 'San Jose'\nzipcode_city_dict[94301] = 'Palo Alto'\nzipcode_city_dict[94107] = 'San Francisco'\nzipcode_city_dict[94063] = 'Redwood City'\nzipcode_city_dict[94041] = 'Mountain View'","11602d64":"weather_df[\"city\"] = weather_df.zip_code.apply(lambda x:zipcode_city_dict[x])","e5e50e6a":"weather_df.head()","316b0cc2":"status_df.date = pd.to_datetime(status_df.date)","3451080a":"status_df = status_df.merge(weather_df,how=\"left\",on=[\"date\",\"city\"])","5017cd10":"status_df.head()","91f70a4a":"status_df.dropna(inplace=True)","8da4f07a":"from sklearn.preprocessing import LabelEncoder\nle = LabelEncoder()","a03169fe":"status_df[\"events\"] = le.fit_transform(status_df[\"events\"])\nstatus_df[\"precipitation_inches\"] = le.fit_transform(status_df[\"precipitation_inches\"])\nstatus_df[\"name\"] = le.fit_transform(status_df[\"name\"])\n","4f57816a":"status_df.head()","3ce9925b":"df = pd.DataFrame(np.random.randn(len(status_df), 1))\nmsk = np.random.rand(len(df)) < 0.6666\nstatus_df_train = status_df[msk]\nstatus_df_test = status_df[~msk]","5f18d3db":"y_train = status_df_train.bikes_available\nstatus_df_train.drop(columns=[\"bikes_available\"],inplace=True)\ny_test = status_df_test.bikes_available\nstatus_df_test.drop(columns=[\"bikes_available\"],inplace=True)","93af441b":"features = [c for c in status_df_train.columns if c not in ['time','installation_date','date','city','lat','long','name']]","82609298":"features","3fcd6804":"import time\nfolds = KFold(n_splits=5, shuffle=True, random_state=15)\noof = np.zeros(len(status_df_train))\npredictions = np.zeros(len(status_df_test))\nstart = time.time()\nfeature_importance_df = pd.DataFrame()\n\n\nparam = {'num_leaves': 100,\n         'min_data_in_leaf': 30, \n         'objective':'regression',\n         'max_depth': 6,\n         'learning_rate': 0.005,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1}\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(status_df_train.values, y_train.values)):\n    print(\"fold n\u00b0{}\".format(fold_))\n    trn_data = lgb.Dataset(status_df_train.iloc[trn_idx][features], label=y_train.iloc[trn_idx])\n    val_data = lgb.Dataset(status_df_train.iloc[val_idx][features], label=y_train.iloc[val_idx])\n\n    num_round = 500\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=100, early_stopping_rounds = 200)\n    oof[val_idx] = clf.predict(status_df_train.iloc[val_idx][features], num_iteration=clf.best_iteration)\n    \n    fold_importance_df = pd.DataFrame()\n    fold_importance_df[\"feature\"] = features\n    fold_importance_df[\"importance\"] = clf.feature_importance()\n    fold_importance_df[\"fold\"] = fold_ + 1\n    feature_importance_df = pd.concat([feature_importance_df, fold_importance_df], axis=0)\n    \n    predictions += clf.predict(status_df_test[features], num_iteration=clf.best_iteration) \/ folds.n_splits","7c419d31":"cols = (feature_importance_df[[\"feature\", \"importance\"]]\n        .groupby(\"feature\")\n        .mean()\n        .sort_values(by=\"importance\", ascending=False)[:1000].index)\n\nbest_features = feature_importance_df.loc[feature_importance_df.feature.isin(cols)]\n\nplt.figure(figsize=(14,25))\nsns.barplot(x=\"importance\",\n            y=\"feature\",\n            data=best_features.sort_values(by=\"importance\",\n                                           ascending=False))\nplt.title('LightGBM Features (avg over folds)')\nplt.tight_layout()\nplt.savefig('lgbm_importances.png')","f4ff72bc":"## There is a lot to be done in feature engineering area using windowing method as this is time series model and the number of bikes at current time depend upon the past available number of bikes like within last 10 minutes and 30 minutes window . I will commit the second version with in short span","daf9568f":"## Mapping of Zip Codes ans City names\n### 95113 - San Jose\n### 94301 - Palo Alto\n### 94107 - San Francisco\n### 94063 - Redwood City\n### 94041 - Mountain View\n"}}