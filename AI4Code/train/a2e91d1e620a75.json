{"cell_type":{"e58742aa":"code","5f2883da":"code","79e78df4":"code","7d3a7401":"code","16305466":"code","ad546336":"code","766fc23c":"code","e2d17389":"code","d39baebf":"code","0ee31efa":"code","64818a4b":"code","3e1a4b80":"code","33eb4467":"code","ece3773f":"code","01a32215":"code","5abd5763":"code","df174a09":"code","72c35a1a":"markdown","e6b1c600":"markdown","65fd0cc8":"markdown","f077174d":"markdown","1c0c7511":"markdown","9ca97b79":"markdown","fef7f281":"markdown","69cef225":"markdown","51ddec02":"markdown","6fa19fa3":"markdown","5a90be97":"markdown"},"source":{"e58742aa":"pretrain_dir = None # model dir for resuming training. if None, train from scrach\n\none_fold = False # if True, train model at only first fold. use if you try a new idea quickly.\nrun_test = False # if True, use small data. you can check whether this code run or not\ndenoise = True # if True, use train data whose signal_to_noise > 1\n\nae_epochs = 20 # epoch of training of denoising auto encoder\nae_epochs_each = 5 # epoch of training of denoising auto encoder each time. \n                   # I use train data (seqlen = 107) and private test data (seqlen = 130) for auto encoder training.\n                   # I dont know how to easily fit keras model to use both of different shape data simultaneously, \n                   # so I call fit function several times. \nae_batch_size = 32\n\nepochs_list = [30, 10, 3, 3, 5, 5]\nbatch_size_list = [8, 16, 32, 64, 128, 256] \n\n## copy pretrain model to working dir\nimport shutil\nimport glob\nif pretrain_dir is not None:\n    for d in glob.glob(pretrain_dir + \"*\"):\n        shutil.copy(d, \".\")\n    \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport gc\nimport os\nimport matplotlib.pyplot as plt\n%matplotlib inline","5f2883da":"import json\nimport glob\nfrom tqdm.notebook import tqdm\n\ntrain = pd.read_json(\"\/kaggle\/input\/stanford-covid-vaccine\/train.json\",lines=True)\nif denoise:\n    train = train[train.signal_to_noise > 1].reset_index(drop = True)\ntest  = pd.read_json(\"\/kaggle\/input\/stanford-covid-vaccine\/test.json\",lines=True)\ntest_pub = test[test[\"seq_length\"] == 107]\ntest_pri = test[test[\"seq_length\"] == 130]\nsub = pd.read_csv(\"\/kaggle\/input\/stanford-covid-vaccine\/sample_submission.csv\")\n\nif run_test: ## to test \n    train = train[:30]\n    test_pub = test_pub[:30]\n    test_pri = test_pri[:30]\n\nAs = []\nfor id in tqdm(train[\"id\"]):\n    a = np.load(f\"\/kaggle\/input\/stanford-covid-vaccine\/bpps\/{id}.npy\")\n    As.append(a)\nAs = np.array(As)\nAs_pub = []\nfor id in tqdm(test_pub[\"id\"]):\n    a = np.load(f\"\/kaggle\/input\/stanford-covid-vaccine\/bpps\/{id}.npy\")\n    As_pub.append(a)\nAs_pub = np.array(As_pub)\nAs_pri = []\nfor id in tqdm(test_pri[\"id\"]):\n    a = np.load(f\"\/kaggle\/input\/stanford-covid-vaccine\/bpps\/{id}.npy\")\n    As_pri.append(a)\nAs_pri = np.array(As_pri)","79e78df4":"print(train.shape)\ntrain.head()","7d3a7401":"print(test.shape)\ntest.head()","16305466":"print(sub.shape)\nsub.head()","ad546336":"targets = list(sub.columns[1:])\nprint(targets)\n\ny_train = []\nseq_len = train[\"seq_length\"].iloc[0]\nseq_len_target = train[\"seq_scored\"].iloc[0]\nignore = -10000\nignore_length = seq_len - seq_len_target\nfor target in targets:\n    y = np.vstack(train[target])\n    dummy = np.zeros([y.shape[0], ignore_length]) + ignore\n    y = np.hstack([y, dummy])\n    y_train.append(y)\ny = np.stack(y_train, axis = 2)\ny.shape","766fc23c":"def get_structure_adj(train):\n    ## get adjacent matrix from structure sequence\n    \n    ## here I calculate adjacent matrix of each base pair, \n    ## but eventually ignore difference of base pair and integrate into one matrix\n    Ss = []\n    for i in tqdm(range(len(train))):\n        seq_length = train[\"seq_length\"].iloc[i]\n        structure = train[\"structure\"].iloc[i]\n        sequence = train[\"sequence\"].iloc[i]\n\n        cue = []\n        a_structures = {\n            (\"A\", \"U\") : np.zeros([seq_length, seq_length]),\n            (\"C\", \"G\") : np.zeros([seq_length, seq_length]),\n            (\"U\", \"G\") : np.zeros([seq_length, seq_length]),\n            (\"U\", \"A\") : np.zeros([seq_length, seq_length]),\n            (\"G\", \"C\") : np.zeros([seq_length, seq_length]),\n            (\"G\", \"U\") : np.zeros([seq_length, seq_length]),\n        }\n        a_structure = np.zeros([seq_length, seq_length])\n        for i in range(seq_length):\n            if structure[i] == \"(\":\n                cue.append(i)\n            elif structure[i] == \")\":\n                start = cue.pop()\n#                 a_structure[start, i] = 1\n#                 a_structure[i, start] = 1\n                a_structures[(sequence[start], sequence[i])][start, i] = 1\n                a_structures[(sequence[i], sequence[start])][i, start] = 1\n        \n        a_strc = np.stack([a for a in a_structures.values()], axis = 2)\n        a_strc = np.sum(a_strc, axis = 2, keepdims = True)\n        Ss.append(a_strc)\n    \n    Ss = np.array(Ss)\n    print(Ss.shape)\n    return Ss\nSs = get_structure_adj(train)\nSs_pub = get_structure_adj(test_pub)\nSs_pri = get_structure_adj(test_pri)","e2d17389":"def get_distance_matrix(As):\n    ## adjacent matrix based on distance on the sequence\n    ## D[i, j] = 1 \/ (abs(i - j) + 1) ** pow, pow = 1, 2, 4\n    \n    idx = np.arange(As.shape[1])\n    Ds = []\n    for i in range(len(idx)):\n        d = np.abs(idx[i] - idx)\n        Ds.append(d)\n\n    Ds = np.array(Ds) + 1\n    Ds = 1\/Ds\n    Ds = Ds[None, :,:]\n    Ds = np.repeat(Ds, len(As), axis = 0)\n    \n    Dss = []\n    for i in [1, 2, 4]: \n        Dss.append(Ds ** i)\n    Ds = np.stack(Dss, axis = 3)\n    print(Ds.shape)\n    return Ds\n\nDs = get_distance_matrix(As)\nDs_pub = get_distance_matrix(As_pub)\nDs_pri = get_distance_matrix(As_pri)","d39baebf":"## concat adjecent\nAs = np.concatenate([As[:,:,:,None], Ss, Ds], axis = 3).astype(np.float32)\nAs_pub = np.concatenate([As_pub[:,:,:,None], Ss_pub, Ds_pub], axis = 3).astype(np.float32)\nAs_pri = np.concatenate([As_pri[:,:,:,None], Ss_pri, Ds_pri], axis = 3).astype(np.float32)\ndel Ss, Ds, Ss_pub, Ds_pub, Ss_pri, Ds_pri\nAs.shape, As_pub.shape, As_pri.shape","0ee31efa":"## sequence\ndef return_ohe(n, i):\n    tmp = [0] * n\n    tmp[i] = 1\n    return tmp\n\ndef get_input(train):\n    ## get node features, which is one hot encoded\n    mapping = {}\n    vocab = [\"A\", \"G\", \"C\", \"U\"]\n    for i, s in enumerate(vocab):\n        mapping[s] = return_ohe(len(vocab), i)\n    X_node = np.stack(train[\"sequence\"].apply(lambda x : list(map(lambda y : mapping[y], list(x)))))\n\n    mapping = {}\n    vocab = [\"S\", \"M\", \"I\", \"B\", \"H\", \"E\", \"X\"]\n    for i, s in enumerate(vocab):\n        mapping[s] = return_ohe(len(vocab), i)\n    X_loop = np.stack(train[\"predicted_loop_type\"].apply(lambda x : list(map(lambda y : mapping[y], list(x)))))\n    \n    mapping = {}\n    vocab = [\".\", \"(\", \")\"]\n    for i, s in enumerate(vocab):\n        mapping[s] = return_ohe(len(vocab), i)\n    X_structure = np.stack(train[\"structure\"].apply(lambda x : list(map(lambda y : mapping[y], list(x)))))\n    \n    \n    X_node = np.concatenate([X_node, X_loop], axis = 2)\n    \n    ## interaction\n    a = np.sum(X_node * (2 ** np.arange(X_node.shape[2])[None, None, :]), axis = 2)\n    vocab = sorted(set(a.flatten()))\n    print(vocab)\n    ohes = []\n    for v in vocab:\n        ohes.append(a == v)\n    ohes = np.stack(ohes, axis = 2)\n    X_node = np.concatenate([X_node, ohes], axis = 2).astype(np.float32)\n    \n    \n    print(X_node.shape)\n    return X_node\n\nX_node = get_input(train)\nX_node_pub = get_input(test_pub)\nX_node_pri = get_input(test_pri)","64818a4b":"import tensorflow as tf\nfrom tensorflow.keras import layers as L\nimport tensorflow_addons as tfa\nfrom tensorflow.keras import backend as K\n\ndef mcrmse(t, p, seq_len_target = seq_len_target):\n    ## calculate mcrmse score by using numpy\n    t = t[:, :seq_len_target]\n    p = p[:, :seq_len_target]\n    \n    score = np.mean(np.sqrt(np.mean(np.mean((p - t) ** 2, axis = 1), axis = 0)))\n    return score\n\ndef mcrmse_loss(t, y, seq_len_target = seq_len_target):\n    ## calculate mcrmse score by using tf\n    t = t[:, :seq_len_target]\n    y = y[:, :seq_len_target]\n    \n    loss = tf.reduce_mean(tf.sqrt(tf.reduce_mean(tf.reduce_mean((t - y) ** 2, axis = 1), axis = 0)))\n    return loss\n\ndef attention(x_inner, x_outer, n_factor, dropout):\n    x_Q =  L.Conv1D(n_factor, 1, activation='linear', \n                  kernel_initializer='glorot_uniform',\n                  bias_initializer='glorot_uniform',\n                 )(x_inner)\n    x_K =  L.Conv1D(n_factor, 1, activation='linear', \n                  kernel_initializer='glorot_uniform',\n                  bias_initializer='glorot_uniform',\n                 )(x_outer)\n    x_V =  L.Conv1D(n_factor, 1, activation='linear', \n                  kernel_initializer='glorot_uniform',\n                  bias_initializer='glorot_uniform',\n                 )(x_outer)\n    x_KT = L.Permute((2, 1))(x_K)\n    res = L.Lambda(lambda c: K.batch_dot(c[0], c[1]) \/ np.sqrt(n_factor))([x_Q, x_KT])\n#     res = tf.expand_dims(res, axis = 3)\n#     res = L.Conv2D(16, 3, 1, padding = \"same\", activation = \"relu\")(res)\n#     res = L.Conv2D(1, 3, 1, padding = \"same\", activation = \"relu\")(res)\n#     res = tf.squeeze(res, axis = 3)\n    att = L.Lambda(lambda c: K.softmax(c, axis=-1))(res)\n    att = L.Lambda(lambda c: K.batch_dot(c[0], c[1]))([att, x_V])\n    return att\n\ndef multi_head_attention(x, y, n_factor, n_head, dropout):\n    if n_head == 1:\n        att = attention(x, y, n_factor, dropout)\n    else:\n        n_factor_head = n_factor \/\/ n_head\n        heads = [attention(x, y, n_factor_head, dropout) for i in range(n_head)]\n        att = L.Concatenate()(heads)\n        att = L.Dense(n_factor, \n                      kernel_initializer='glorot_uniform',\n                      bias_initializer='glorot_uniform',\n                     )(att)\n    x = L.Add()([x, att])\n    x = L.LayerNormalization()(x)\n    if dropout > 0:\n        x = L.Dropout(dropout)(x)\n    return x\n\ndef res(x, unit, kernel = 3, rate = 0.1):\n    h = L.Conv1D(unit, kernel, 1, padding = \"same\", activation = None)(x)\n    h = L.LayerNormalization()(h)\n    h = L.LeakyReLU()(h)\n    h = L.Dropout(rate)(h)\n    return L.Add()([x, h])\n\ndef forward(x, unit, kernel = 3, rate = 0.1):\n#     h = L.Dense(unit, None)(x)\n    h = L.Conv1D(unit, kernel, 1, padding = \"same\", activation = None)(x)\n    h = L.LayerNormalization()(h)\n    h = L.Dropout(rate)(h)\n#         h = tf.keras.activations.swish(h)\n    h = L.LeakyReLU()(h)\n    h = res(h, unit, kernel, rate)\n    return h\n\ndef adj_attn(x, adj, unit, n = 2, rate = 0.1):\n    x_a = x\n    x_as = []\n    for i in range(n):\n        x_a = forward(x_a, unit)\n        x_a = tf.matmul(adj, x_a) ## aggregate neighborhoods\n        x_as.append(x_a)\n    if n == 1:\n        x_a = x_as[0]\n    else:\n        x_a = L.Concatenate()(x_as)\n    x_a = forward(x_a, unit)\n    return x_a\n\n\ndef get_base(config):\n    ## base model architecture \n    ## node, adj -> middle feature\n    \n    node = tf.keras.Input(shape = (None, X_node.shape[2]), name = \"node\")\n    adj = tf.keras.Input(shape = (None, None, As.shape[3]), name = \"adj\")\n    \n    adj_learned = L.Dense(1, \"relu\")(adj)\n    adj_all = L.Concatenate(axis = 3)([adj, adj_learned])\n        \n    xs = []\n    xs.append(node)\n    x1 = forward(node, 128, kernel = 3, rate = 0.0)\n    x2 = forward(x1, 64, kernel = 6, rate = 0.0)\n    x3 = forward(x2, 32, kernel = 15, rate = 0.0)\n    x4 = forward(x3, 16, kernel = 30, rate = 0.0)\n    x = L.Concatenate()([x1, x2, x3, x4])\n    \n    for unit in [64, 32]:\n        x_as = []\n        for i in range(adj_all.shape[3]):\n            x_a = adj_attn(x, adj_all[:, :, :, i], unit, rate = 0.0)\n            x_as.append(x_a)\n        x_c = forward(x, unit, kernel = 30)\n        \n        x = L.Concatenate()(x_as + [x_c])\n        x = forward(x, unit)\n        x = multi_head_attention(x, x, unit, 4, 0.0)\n        xs.append(x)\n        \n    x = L.Concatenate()(xs)\n\n    model = tf.keras.Model(inputs = [node, adj], outputs = [x])\n    return model\n\n\ndef get_ae_model(base, config):\n    ## denoising auto encoder part\n    ## node, adj -> middle feature -> node\n    \n    node = tf.keras.Input(shape = (None, X_node.shape[2]), name = \"node\")\n    adj = tf.keras.Input(shape = (None, None, As.shape[3]), name = \"adj\")\n\n    x = base([L.SpatialDropout1D(0.3)(node), adj])\n    x = forward(x, 64, rate = 0.3)\n    p = L.Dense(X_node.shape[2], \"sigmoid\")(x)\n    \n    loss = - tf.reduce_mean(20 * node * tf.math.log(p + 1e-4) + (1 - node) * tf.math.log(1 - p + 1e-4))\n    model = tf.keras.Model(inputs = [node, adj], outputs = [loss])\n    \n    opt = get_optimizer()\n    model.compile(optimizer = opt, loss = lambda t, y : y) ## given label t is ignored\n    return model\n\n\ndef get_model(base, config):\n    ## regression part\n    ## node, adj -> middle feature -> prediction of targets\n    \n    node = tf.keras.Input(shape = (None, X_node.shape[2]), name = \"node\")\n    adj = tf.keras.Input(shape = (None, None, As.shape[3]), name = \"adj\")\n    \n    x = base([node, adj])\n    x = forward(x, 128, rate = 0.4)\n    x = L.Dense(5, None)(x)\n\n    model = tf.keras.Model(inputs = [node, adj], outputs = [x])\n    \n    opt = get_optimizer()\n    model.compile(optimizer = opt, loss = mcrmse_loss)\n    return model\n\ndef get_optimizer():\n#     sgd = tf.keras.optimizers.SGD(0.05, momentum = 0.9, nesterov=True)\n    adam = tf.optimizers.Adam()\n#     radam = tfa.optimizers.RectifiedAdam()\n#     lookahead = tfa.optimizers.Lookahead(adam, sync_period=6)\n#     swa = tfa.optimizers.SWA(adam)\n    return adam","3e1a4b80":"## here train denoising auto encoder model using all data\n\nconfig = {} ## not use now\nif ae_epochs > 0:\n    base = get_base(config)\n    ae_model = get_ae_model(base, config)\n    ## TODO : simultaneous train\n    for i in range(ae_epochs\/\/ae_epochs_each):\n        print(f\"------ {i} ------\")\n        print(\"--- train ---\")\n        ae_model.fit([X_node, As], [X_node[:,0]], # dummy target. loss is calculated in model \n                  epochs = ae_epochs_each,\n                  batch_size = ae_batch_size)\n        print(\"--- public ---\")\n        ae_model.fit([X_node_pub, As_pub], [X_node_pub[:,0]],\n                  epochs = ae_epochs_each,\n                  batch_size = ae_batch_size)\n        print(\"--- private ---\")\n        ae_model.fit([X_node_pri, As_pri], [X_node_pri[:,0]],\n                  epochs = ae_epochs_each,\n                  batch_size = ae_batch_size)\n        gc.collect()\n    print(\"****** save ae model ******\")\n    base.save_weights(\".\/base_ae\")","33eb4467":"## here train regression model from pretrain auto encoder model\n\nfrom sklearn.model_selection import KFold\nkfold = KFold(5, shuffle = True, random_state = 42)\n\nscores = []\npreds = np.zeros([len(X_node), X_node.shape[1], 5])\nfor i, (tr_idx, va_idx) in enumerate(kfold.split(X_node, As)):\n    print(f\"------ fold {i} start -----\")\n    print(f\"------ fold {i} start -----\")\n    print(f\"------ fold {i} start -----\")\n    X_node_tr = X_node[tr_idx]\n    X_node_va = X_node[va_idx]\n    As_tr = As[tr_idx]\n    As_va = As[va_idx]\n    y_tr = y[tr_idx]\n    y_va = y[va_idx]\n    \n    base = get_base(config)\n    if ae_epochs > 0:\n        print(\"****** load ae model ******\")\n        base.load_weights(\".\/base_ae\")\n    model = get_model(base, config)\n    if pretrain_dir is not None:\n        d = f\".\/model{i}\"\n        print(f\"--- load from {d} ---\")\n        model.load_weights(d)\n    for epochs, batch_size in zip(epochs_list, batch_size_list):\n        print(f\"epochs : {epochs}, batch_size : {batch_size}\")\n        model.fit([X_node_tr, As_tr], [y_tr],\n                  validation_data=([X_node_va, As_va], [y_va]),\n                  epochs = epochs,\n                  batch_size = batch_size, validation_freq = 3)\n        \n    model.save_weights(f\".\/model{i}\")\n    p = model.predict([X_node_va, As_va])\n    scores.append(mcrmse(y_va, p))\n    print(f\"fold {i}: mcrmse {scores[-1]}\")\n    preds[va_idx] = p\n    if one_fold:\n        break\n        \npd.to_pickle(preds, \"oof.pkl\")","ece3773f":"print(scores)","01a32215":"p_pub = 0\np_pri = 0\nfor i in range(5):\n    model.load_weights(f\".\/model{i}\")\n    p_pub += model.predict([X_node_pub, As_pub]) \/ 5\n    p_pri += model.predict([X_node_pri, As_pri]) \/ 5\n    if one_fold:\n        p_pub *= 5\n        p_pri *= 5\n        break\n\nfor i, target in enumerate(targets):\n    test_pub[target] = [list(p_pub[k, :, i]) for k in range(p_pub.shape[0])]\n    test_pri[target] = [list(p_pri[k, :, i]) for k in range(p_pri.shape[0])]","5abd5763":"preds_ls = []\nfor df, preds in [(test_pub, p_pub), (test_pri, p_pri)]:\n    for i, uid in enumerate(df.id):\n        single_pred = preds[i]\n\n        single_df = pd.DataFrame(single_pred, columns=targets)\n        single_df['id_seqpos'] = [f'{uid}_{x}' for x in range(single_df.shape[0])]\n\n        preds_ls.append(single_df)\n\npreds_df = pd.concat(preds_ls)\npreds_df.to_csv(\"submission.csv\", index = False)\npreds_df.head()","df174a09":"print(scores)\nprint(np.mean(scores))","72c35a1a":"## predict","e6b1c600":"## structure adj","65fd0cc8":"## node","f077174d":"## target","1c0c7511":"### training scheme\n#### (1) train denoising auto encoder model using all data including train and test data\n#### (2) from the weights of denoising auto encoder model, finetune to predict targets such as reactivity\n\n### rough network architecture\n#### inputs -> conv1ds -> aggregation of neighborhoods -> multi head attention -> aggregation of neighborhoods -> multi head attention -> conv1d -> predict\n#### this architecture was inspired by https:\/\/www.kaggle.com\/cpmpml\/graph-transfomer\n","9ca97b79":"## train","fef7f281":"## sub","69cef225":"## distance adj","51ddec02":"## load","6fa19fa3":"## model","5a90be97":"## pretrain"}}