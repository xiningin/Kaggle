{"cell_type":{"f71f8239":"code","9a1020fb":"code","ef51d79b":"code","a1beccd1":"code","116103f6":"code","3f6bff08":"code","04593434":"code","895bd88b":"code","0ccd9a57":"code","97315516":"code","470f577c":"code","78424e25":"code","1feaf659":"code","b9865e0a":"code","2332f540":"code","16e2c2a6":"code","f07777c7":"code","7ce0adb2":"code","3be2c656":"code","95300250":"code","542a9713":"code","e7a8db7e":"code","32eef6a6":"code","13d73abe":"code","a768eeae":"code","0f3e8aa3":"code","47b585ee":"code","6e3b38aa":"code","89e537fa":"code","7148624e":"code","38b5e9b2":"code","347c1181":"code","776c0fb2":"code","17d436ea":"code","3055249d":"code","e81270b6":"markdown","e676779f":"markdown","3055ee13":"markdown","c02b7408":"markdown","da43db75":"markdown","fa6641fa":"markdown","0c2d7e82":"markdown","1e3786a2":"markdown","3b906a74":"markdown","c2765292":"markdown","dbf7f243":"markdown","bd84d1bf":"markdown","9961a431":"markdown","33c78b20":"markdown","48c9b6cb":"markdown","a27c2fe0":"markdown","9ca4c069":"markdown","c896f27c":"markdown","0c8a5b00":"markdown","cef7f435":"markdown","752f07d9":"markdown","ae1608e0":"markdown","874fe1a3":"markdown","e11b6d0a":"markdown","6e6be4b3":"markdown","c3955805":"markdown","c6f86f76":"markdown","b7f23ffb":"markdown"},"source":{"f71f8239":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9a1020fb":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objects as go\nimport plotly.express as px","ef51d79b":"df = pd.read_csv(\"\/kaggle\/input\/hepatitis-data\/hepatitis_csv.csv\")\ndf.head()","a1beccd1":"df.columns","116103f6":"df.shape","3f6bff08":"df.info()","04593434":"df.describe()","895bd88b":"df.isnull().sum()","0ccd9a57":"df.corr()","97315516":"df.drop(\"protime\", axis = 1, inplace=True)\ndf.shape","470f577c":"numeric_data = df._get_numeric_data()\nnumeric_data.head()","78424e25":"numeric_data.drop('antivirals', axis=1, inplace=True)\nnumeric_data.drop('histology', axis=1, inplace=True)","1feaf659":"numeric_data.info()","b9865e0a":"sns.set(style = \"ticks\", context = \"talk\")\nplt.figure(figsize=(20, 12))\nsns.heatmap(df.corr(), annot=True, cmap='viridis')","2332f540":"x = list(df.corr().columns)\ny = list(df.corr().index)\nvalues = np.array(df.corr().values)\nfig = go.Figure(data=go.Heatmap(\n    x = x,\n    y = y,\n    z = values,\n    hoverongaps = False\n))\nfig.show()","16e2c2a6":"plt.figure(figsize=(20, 10))\nsns.displot(df.age, bins=40)","f07777c7":"sns.kdeplot(df.age)","7ce0adb2":"px.histogram(df.age)","3be2c656":"plt.figure(figsize=(20, 10))\nsns.displot(df.bilirubin, bins=40)","95300250":"sns.kdeplot(df.bilirubin)","542a9713":"px.histogram(df.bilirubin)","e7a8db7e":"plt.figure(figsize=(20, 10))\nsns.displot(df.sgot, bins=40)","32eef6a6":"sns.kdeplot(df.sgot)","13d73abe":"px.histogram(df.sgot)","a768eeae":"plt.figure(figsize=(20, 10))\nsns.displot(df.alk_phosphate, bins=40)","0f3e8aa3":"sns.kdeplot(df.alk_phosphate)","47b585ee":"px.histogram(df.alk_phosphate)","6e3b38aa":"plt.figure(figsize=(20, 10))\ndf['sex'].value_counts().plot(kind=\"bar\", color='blue', title='Gender Distribution')","89e537fa":"px.pie(df['sex'], labels = df['sex'].value_counts().index,\n       values = df['sex'].value_counts().values,\n       names = df['sex'].value_counts().index,\n       title = 'Gender Distribution in the Data'\n      )","7148624e":"px.histogram(df.sex)","38b5e9b2":"df['class'].value_counts()","347c1181":"px.histogram(df['class'])","776c0fb2":"px.pie(df['class'], labels = df['class'].value_counts().index,\n       values = df['class'].value_counts().values,\n       names = df['class'].value_counts().index,\n       title = 'Distribution of Deaths vs Alive in the Data'\n      )","17d436ea":"from plotly.subplots import make_subplots\nfeatures = ['age', 'sex', 'steroid', 'antivirals', 'fatigue', 'malaise', 'anorexia',\n       'liver_big', 'liver_firm', 'spleen_palpable', 'spiders', 'ascites',\n       'varices', 'bilirubin', 'alk_phosphate', 'sgot', 'albumin',\n       'histology', 'class']\nrows = 3\ncols = 5\nfig = make_subplots(rows=rows, cols=cols, subplot_titles=features)\nx, y = np.meshgrid(np.arange(rows)+1, np.arange(cols)+1)\ncount  = 0\nfor row, col in zip(x.T.reshape(-1), y.T.reshape(-1)):\n    fig.add_trace(\n        go.Histogram(x = df[features[count]].values),\n        row = row,\n        col = col\n    )\n    count+=1\n    \nfig.update_layout(height=900, width=900, title_text='Feature Distribution', showlegend=False)\nfig.show()","3055249d":"box_cols = ['age', 'sex', 'steroid', 'antivirals', 'fatigue', 'malaise', 'anorexia',\n       'liver_big', 'liver_firm', 'spleen_palpable', 'spiders', 'ascites',\n       'varices', 'bilirubin', 'alk_phosphate', 'sgot', 'albumin',\n       'histology', 'class']\nrows = 3\ncols = 5\nfig = make_subplots(rows=rows, cols=cols, subplot_titles=box_cols)\nx, y = np.meshgrid(np.arange(rows)+1, np.arange(cols)+1)\ncount = 0\nfor row, col in zip(x.T.reshape(-1), y.T.reshape(-1)):\n    try:\n        fig.add_trace(\n            go.Box(x = df[box_cols[count]].values, name=''),\n            row = row,\n            col = col\n        )\n        count+=1\n    except:\n        break\n    \nfig.update_layout(height=900, width=900, title_text='Boxplot Distribution', showlegend=False)\nfig.show()","e81270b6":"This implies that most of the people in the given dataset are female and Females are more prone to Hepatitis as compared to Males","e676779f":"The correlation plot here shows us that features 'bilirubin' and 'alk_phosphate' both have higher positive correlation with 'histology' and features 'bilirubin' and 'alk_phosphate' both hae higher negative correlation with 'albumin'","3055ee13":"Piechart for the gender Distribution","c02b7408":"Various Plots for Checking the Bilirubin distribution for various integer values","da43db75":"Using plotly.express library","fa6641fa":"Creating a dataframe which only contains numeric data of the main dataset","0c2d7e82":"Histogram plot for the gender distribution using plotly.express","1e3786a2":"This implies that Maximum people have alkaline phosphate value of 80-100","3b906a74":"This shows that most of the people in the dataset have age between 25-50(approx.) with maximum people having age = 36-38 and 50-55. Only a few people with age<=30 and age>=62 suffer from Hepatitis","c2765292":"Dropping the 'protime' column in the dataframe as it contains a lot of null values and is of no use in the EDA","dbf7f243":"# Seeing the Correlation(statistical relationship) among the various features of the dataset. \n\nA positive correlation means a variable increases \/ decreases as other other variable increases \/ decreases respectively. Negative Correlation means a variable increases \/ decreases as the other variable decreases \/ increases respectively","bd84d1bf":"# Reading the Dataset","9961a431":"See how many null values(NA) values are there in each of the columns of the dataset","33c78b20":"# Creating a Correlation Plot to understand the correlation among various features in a better way visually","48c9b6cb":"Dropping the columns 'antivirals' and 'histology' as they are not numeric data","a27c2fe0":"Describing each of the columns of the dataset by values such as count, mean, standard deviation, minimum value,maximum value, Quarter Percentile, Half Percentile and 75% Percentile","9ca4c069":"Creating a displot using seaborn library\n\ndistplot(now deprecated to 'displot') => combines the matplotlib hist function with the seaborn kdeplot() and rugplot() functions","c896f27c":"Listing the columns provided in the dataset","0c8a5b00":"Creating a KDE Plot using seaborn library\n\nKDE plot - Kernel Density Estimation Plot - visualizes the distribution of obserations in a dataset","cef7f435":"All these plots indicate that people with lower bilirubin (values between 0-2) are more prone to Hepatitis","752f07d9":"Similar to the displot, the kde plot shows a bit more clearer distribution of age and we can clearly see that the average age of people suffering from Hepatitis lies in the range 35-40","ae1608e0":"Using Seaborn Library","874fe1a3":"Bar Chart for the Gender Distribution using matplotlib","e11b6d0a":"# Comparing the Gender Distribution in the given Dataset","6e6be4b3":"# Making Boxplots for each of the features in the dataset","c3955805":"# Making Histograms for each of the features in the dataset","c6f86f76":"Getting some information for each of the columns in the dataset","b7f23ffb":"Getting the shape => (rows, cols) of the dataset"}}