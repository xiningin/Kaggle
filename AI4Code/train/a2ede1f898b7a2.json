{"cell_type":{"f7b01c03":"code","f5ceacb8":"code","34f4770b":"code","6b03bf82":"code","3e54d1b3":"code","a8b394da":"code","7ee4ac5d":"code","2dcb1044":"code","d56bd68f":"code","249d3d7a":"code","750868c8":"markdown","20c90f66":"markdown","739c3914":"markdown","8ce283b7":"markdown","5a53f94e":"markdown"},"source":{"f7b01c03":"# Import modules\nimport numpy as np\nimport pandas as pd\nimport re\nimport requests\nimport csv\nfrom datetime import datetime, timedelta\nfrom bs4 import BeautifulSoup","f5ceacb8":"\"\"\"\n# Get html from Wikipedia\nurl = 'https:\/\/en.wikipedia.org\/wiki\/List_of_Tour_de_France_general_classification_winners'\nr = requests.get(url).text\n\n# Instantiate Soup Object\nsoup = BeautifulSoup(r, features='lxml')\nx = soup.find_all('table', class_=\"wikitable\")\n\n# Isolate desired table and get column headings\nmy_table = x[1]\nrow_list = my_table.find_all('tr')\n\n# Loop over table and collect rows in list\nfinal_list = []\nno_of_rows = len(row_list)\nfor i in range(no_of_rows):\n    # Parse strings for better formatting \n    lists = row_list[i].text.split('\\n')\n    b = [l for l in lists if l != '']\n    c = list(map(lambda x: x.replace('\\xa0',''),b))\n    final_list.append(c)\n    \n# Convert scraped data to pandas DataFrame\n# df = pd.DataFrame(final_list)\n# df.columns = df.iloc[0]\n# df.drop(0, inplace=True)\n\n# Uncomment to save unprocessed data to csv \n# with open(\"tdf_scraped_data.csv\", \"w\", newline=\"\") as f:\n#    writer = csv.writer(f)\n#    writer.writerows(final_list)\n\"\"\"","34f4770b":"path = '..\/input\/tdf-winners-unprocessed\/tdf_scraped_data.csv'\ndf = pd.read_csv('..\/input\/tdf-winners-unprocessed\/tdf_scraped_data.csv', encoding='latin')","6b03bf82":"# Remove years cancelled due to war \ndf = df.dropna()\n\n# Reformat column names for readability\/typability\ndf.columns = map(str.lower, df.columns)\ndf.columns = [s.replace(' ', '_') for s in df.columns]\ndf.set_index('year', inplace=True)\n\n# Add a column for Lance Armstrong controversies\ndf['controversial'] = df.index.map(lambda x: x.endswith('[B]'))","3e54d1b3":"# Fix year formatting\ndef removeB(x):\n    if x.endswith('[B]'):\n        x = x[:4]\n    return x\n        \ndf.index = df.index.map(removeB)\ndf.index = df.index.astype(int)","a8b394da":"# Cast distance, stage_wins, and stages_in_lead to int \ndf.rename(columns={'distance': 'distance_km'}, inplace=True)\ndf['distance_km'] = df['distance_km'].map(lambda x : x[:5])\ndf['distance_km'] = df['distance_km'].map(lambda x : x.replace(',', ''))\ndf = df.astype({'distance_km': 'int','stage_wins': 'int',\n           'stages_in_lead': 'int'})","7ee4ac5d":"# Cast margin column to timedeltas\nhelper = list(df['margin'])\nhelper[22] = '+ 44\\' 23\"'\ndf['margin'] = helper\ndf['margin'].unique()\n\n# Render points years as nan\ndef margin_strip(x):\n    if 'h' in x:\n        fin = datetime.strptime(x, '+ %Hh %M\\' %S\\\"')\n    elif ' \\'' in x:\n        fin = datetime.strptime(x, '+ %M \\'%S\\\"')\n    elif '\\'' in x:\n        fin = datetime.strptime(x, '+ %M\\' %S\\\"')\n    elif '\\\"' in x:\n        fin = datetime.strptime(x, '+ %S\\\"')\n    else: \n        return np.nan\n    return timedelta(hours=fin.hour, minutes=fin.minute, \n                     seconds=fin.second)\n\ndf['margin'] = df['margin'].map(margin_strip)","2dcb1044":"# Rename and cast time\/points column to timedelta\ndf.rename(columns={'time\/points':'overall_time'}, inplace=True)\n\n# Render points years as nan\ndef time_points_parse(x):\n    try:\n        pattern_text = r'(?P<hour>\\w+)h\\s+(?P<minute>\\w+)\\'\\s(?P<second>\\w+)\\\"'\n        pattern = re.compile(pattern_text)\n        match = pattern.match(x)\n        h, m, s = map(int, match.groups())\n        return timedelta(hours=h, minutes=m, seconds=s)\n    except:\n        return np.nan\n    \ndf['overall_time'] = df['overall_time'].map(time_points_parse)","d56bd68f":"# Add columns for overall_time and margin in seconds\ndef to_seconds(x):\n    return x.total_seconds()\ndf[['overall_time_sec','margin_sec']] = df[['overall_time','margin']].applymap(to_seconds)","249d3d7a":"# Uncomment below to save as csv\n\n#df.to_csv('tdf_winners.csv')","750868c8":"### Step 2: Read into DataFrame and cleanse data","20c90f66":"### Step 1: Scrape Wikipedia table \nPython script to scrape Wikipedia page on TdF GC winners. Script was not runnable on Kaggle at time of publishing, but does work in normal computing environment.","739c3914":"The script in Step 1 scrapes the Wikipedia article about Tour de France General Classifications winners. Step 2 cleanses the data for analsysis.\n\nData source: https:\/\/en.wikipedia.org\/wiki\/List_of_Tour_de_France_general_classification_winners","8ce283b7":"Code below processes the output from the above script.","5a53f94e":"# Tour de France Winners (Scrape and Wrangle)"}}