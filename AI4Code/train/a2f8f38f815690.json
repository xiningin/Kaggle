{"cell_type":{"686bb1fe":"code","a6739153":"code","e1567419":"code","87f40c61":"code","6047b94a":"markdown"},"source":{"686bb1fe":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport os\nprint(os.listdir(\"..\/input\"))","a6739153":"#Hot encode the labels to create y_train \nraw = pd.read_csv(\"..\/input\/train.csv\")\nlabels = raw['Target'].str.split()\nlabels = np.asarray(labels.values.tolist())\ny_train = np.zeros([len(raw['Target']),28]).astype(np.int)\nfor i in range(len(labels)):\n    for j in range (len(labels[i])):\n        k = int(labels[i][j])\n        y_train[i][k] = 1","e1567419":"#Which images have the same label(multi-label class)\nB = np.zeros([len(y_train),len(y_train)]).astype(np.int)\nfor i in range (len(y_train)):\n    A = abs(y_train[i]-y_train)  # square matrix where a row of zeros means the image labels match\n    B[i,:] = np.sum(A,axis=1)  #square matrix of scalars.  A zero value means an image label match.  Each row is for a single image compared against all images\n","87f40c61":"#for each row (an image), how many images exist with the same multi-label\nHMC = np.array([]).astype(np.int)  # a vector of how many counts for each image\nfor i in range(len(B)):\n    HMC = np.append(HMC,((31072-np.count_nonzero(B[i,:]))-1))# for each row, count the number of nonzero values.  Each zero is a duplicate multi-label class\nUnique = np.unique(HMC,return_index=True,return_counts=True)\n\n#now count how many unique classes there are for a given copy count\nUCFAGCC = np.zeros_like(Unique[2])    #Unique Class multi-labels For A Given Copy Count\nfor i in range(len(Unique[2])):\n    if i == 0:\n        UCFAGCC[i] = Unique[2][i]\n    else:\n        UCFAGCC[i] = Unique[2][i]\/(Unique[0][i] +1)\n\n#now plot out the answer\nplt.plot(Unique[0],UCFAGCC,'b.')\nplt.xlim(0,120)\nplt.xlabel('Count of How Many Copies with that Unique Class Label')\nplt.ylabel('Number of Unique Class Labels')\nplt. show()\nprint (\"Some Examples\")\nprint (\"There are\", Unique[2][0], \"images in the dataset that have\", Unique[0][0],\"class copies and therefore\",UCFAGCC[0],\"unique class labels that are only found\",Unique[0][0]+1,\"time in X_train\")\nprint (\"There are\", Unique[2][6], \"images in the dataset that have\", Unique[0][6],\"class copies and therefore\",UCFAGCC[6],\"unique class labels that are only found\",Unique[0][6]+1,\"times in X_train\")\nprint (\"There are\", Unique[2][10], \"images in the dataset that have\", Unique[0][10], \"class copies and therefore\",UCFAGCC[10],\"unique class labels that are only found\",Unique[0][10]+1,\"times in X_train\")  \nprint (\"There are\", Unique[2][30], \"images in the dataset that have\", Unique[0][30], \"class copies and therefore\",UCFAGCC[30],\"unique class labels that are only found\",Unique[0][30]+1,\"times in X_train\")\nprint (\"There are\", Unique[2][60], \"images in the dataset that have\", Unique[0][60], \"class copies and therefore\",UCFAGCC[60],\"unique class labels that are only found\",Unique[0][60]+1,\"times in X_train\")\n\n","6047b94a":"***A proposed route to determine which images could be augmented and copied, to help balance the training data set***"}}