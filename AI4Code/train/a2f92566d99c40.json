{"cell_type":{"1a0e8e5c":"code","58e0fa2e":"code","2b48439d":"code","5eca3432":"code","5752b720":"code","2fd43733":"code","2f4f82d7":"code","2462d190":"code","e4623b34":"code","ce4501b2":"code","34cec3c7":"code","164ecf45":"code","5d25a73e":"code","30a0ca9f":"code","4df29fe1":"code","429ce8a1":"markdown","34cda4df":"markdown","a38cbac5":"markdown","ac7d5a29":"markdown","0de0b3f6":"markdown","af046fd9":"markdown","f5687a7f":"markdown","99011068":"markdown","1b6e604b":"markdown","d9e6e005":"markdown","627c0e5c":"markdown","513352fa":"markdown","033fc93c":"markdown"},"source":{"1a0e8e5c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","58e0fa2e":"train_df = pd.read_csv('\/kaggle\/input\/random-linear-regression\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/random-linear-regression\/test.csv')","2b48439d":"train_df.head()","5eca3432":"test_df.head()","5752b720":"test_df.isnull().values.any()","2fd43733":"train_df['x'].isnull().values.any()","2f4f82d7":"train_df['y'].isnull().values.any()","2462d190":"train_df.loc[train_df['y'].isnull()]","e4623b34":"train_df = train_df.dropna()\n\ntrain_df.isnull().values.any()","ce4501b2":"X_train = np.array(train_df['x'])\ny_train = np.array(train_df['y'])\n\nX_train[:5]\ny_train[:5]","34cec3c7":"X_train = X_train.reshape( -1 ,1 )\nX_train[:5], y_train[:5]","164ecf45":"from sklearn.linear_model import LinearRegression\n\nreg = LinearRegression()\nreg.fit(X_train,y_train)","5d25a73e":"reg.score(X_train, y_train)","30a0ca9f":"X_test = np.array(test_df.iloc[:,0].values)\ny_test = np.array(test_df.iloc[:,1].values)","4df29fe1":"import matplotlib.pyplot as plt\nplt.scatter( X_test , y_test )\n\nplt.plot( X_test, reg.predict(X_test.reshape(- 1 , 1)) , 'r')","429ce8a1":"As its only one Nan value we can just drop it.","34cda4df":"# Testing the model","a38cbac5":"Nan in training dataset","ac7d5a29":"There is no Nan in test data\n","0de0b3f6":"# Assigning input and output from dataset","af046fd9":"so we got Nan in y columns","f5687a7f":"changing the dimension of the array\n","99011068":"# Checking for NaN","1b6e604b":"Assigning the test values ","d9e6e005":"Now we're good to go","627c0e5c":"# Fitting the model\n","513352fa":"Assigning data to a vaiable","033fc93c":"# Plotting the graph"}}