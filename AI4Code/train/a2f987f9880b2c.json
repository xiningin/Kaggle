{"cell_type":{"f2b50714":"code","2c9a738a":"code","af99aa12":"code","673a8011":"code","9c8eec5d":"code","f7c38e75":"code","3f665ad7":"code","31362b16":"code","0f57bcaf":"code","4537e47f":"code","f45e8c99":"code","9524935d":"code","4289b92b":"code","025f9f6e":"code","75e41e98":"code","a5438c03":"code","4a78dfe0":"code","f5f7c3c6":"markdown","2f0ef143":"markdown","990e37aa":"markdown","940f0f1d":"markdown","f2745ace":"markdown","cdca5f5d":"markdown","062558c4":"markdown","76a8da09":"markdown","84370c0c":"markdown","4bd0e0c8":"markdown","202ecba5":"markdown","4bd9a2a8":"markdown","698b7d1f":"markdown","af7a54be":"markdown"},"source":{"f2b50714":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2\nfrom scipy.spatial import distance\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2c9a738a":"#loading haarcascade_frontalface_default.xml\nface_model = cv2.CascadeClassifier('..\/input\/haarcascades\/haarcascade_frontalface_default.xml')","af99aa12":"import matplotlib.pyplot as plt\n#trying it out on a sample image\nimg = cv2.imread('..\/input\/raw-images\/544097.png')\n\nimg = cv2.cvtColor(img, cv2.IMREAD_GRAYSCALE)\n\nfaces = face_model.detectMultiScale(img,scaleFactor=1.1, minNeighbors=4) #returns a list of (x,y,w,h) tuples\n\nout_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) #colored output image\n\n#plotting\nfor (x,y,w,h) in faces:\n    cv2.rectangle(out_img,(x,y),(x+w,y+h),(0,0,255),1)\nplt.figure(figsize=(12,12))\nplt.imshow(out_img)","673a8011":"MIN_DISTANCE = 130","9c8eec5d":"if len(faces)>=2:\n    label = [0 for i in range(len(faces))]\n    for i in range(len(faces)-1):\n        for j in range(i+1, len(faces)):\n            dist = distance.euclidean(faces[i][:2],faces[j][:2])\n            if dist<MIN_DISTANCE:\n                label[i] = 1\n                label[j] = 1\n    new_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) #colored output image\n    for i in range(len(faces)):\n        (x,y,w,h) = faces[i]\n        if label[i]==1:\n            cv2.rectangle(new_img,(x,y),(x+w,y+h),(255,0,0),1)\n        else:\n            cv2.rectangle(new_img,(x,y),(x+w,y+h),(0,255,0),1)\n    plt.figure(figsize=(10,10))\n    plt.imshow(new_img)\n            \nelse:\n    print(\"No. of faces detected is less than 2\")","f7c38e75":"from keras.applications.vgg19 import VGG19\nfrom keras.applications.vgg19 import preprocess_input\nfrom keras import Sequential\nfrom keras.layers import Flatten, Dense\nfrom keras.preprocessing.image import ImageDataGenerator","3f665ad7":"#Load train and test set\ntrain_dir = '..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train'\ntest_dir = '..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test'\nval_dir = '..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Validation'","31362b16":"# Data augmentation\n\ntrain_datagen = ImageDataGenerator(rescale=1.0\/255, horizontal_flip=True, zoom_range=0.2,shear_range=0.2)\ntrain_generator = train_datagen.flow_from_directory(directory=train_dir,target_size=(128,128),class_mode='categorical',batch_size=32)\n\nval_datagen = ImageDataGenerator(rescale=1.0\/255)\nval_generator = train_datagen.flow_from_directory(directory=val_dir,target_size=(128,128),class_mode='categorical',batch_size=32)\n\ntest_datagen = ImageDataGenerator(rescale=1.0\/255)\ntest_generator = train_datagen.flow_from_directory(directory=val_dir,target_size=(128,128),class_mode='categorical',batch_size=32)","0f57bcaf":"vgg19 = VGG19(weights='imagenet',include_top=False,input_shape=(128,128,3))\n\nfor layer in vgg19.layers:\n    layer.trainable = False\n    \nmodel = Sequential()\nmodel.add(vgg19)\nmodel.add(Flatten())\nmodel.add(Dense(2,activation='sigmoid'))\nmodel.summary()","4537e47f":"model.compile(optimizer=\"adam\",loss=\"categorical_crossentropy\",metrics =\"accuracy\")","f45e8c99":"history = model.fit_generator(generator=train_generator,\n                              steps_per_epoch=len(train_generator)\/\/32,\n                              epochs=20,validation_data=val_generator,\n                              validation_steps=len(val_generator)\/\/32)","9524935d":"model.evaluate_generator(test_generator)","4289b92b":"sample_mask_img = cv2.imread('..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test\/WithMask\/1565.png')\nsample_mask_img = cv2.resize(sample_mask_img,(128,128))\nplt.imshow(sample_mask_img)\nsample_mask_img = np.reshape(sample_mask_img,[1,128,128,3])\nsample_mask_img = sample_mask_img\/255.0","025f9f6e":"model.predict(sample_mask_img)","75e41e98":"model.save('masknet.h5')","a5438c03":"mask_label = {0:'MASK',1:'NO MASK'}\ndist_label = {0:(0,255,0),1:(255,0,0)}","4a78dfe0":"if len(faces)>=2:\n    label = [0 for i in range(len(faces))]\n    for i in range(len(faces)-1):\n        for j in range(i+1, len(faces)):\n            dist = distance.euclidean(faces[i][:2],faces[j][:2])\n            if dist<MIN_DISTANCE:\n                label[i] = 1\n                label[j] = 1\n    new_img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR) #colored output image\n    for i in range(len(faces)):\n        (x,y,w,h) = faces[i]\n        crop = new_img[y:y+h,x:x+w]\n        crop = cv2.resize(crop,(128,128))\n        crop = np.reshape(crop,[1,128,128,3])\/255.0\n        mask_result = model.predict(crop)\n        cv2.putText(new_img,mask_label[mask_result.argmax()],(x, y-10),cv2.FONT_HERSHEY_SIMPLEX,0.5,dist_label[label[i]],2)\n        cv2.rectangle(new_img,(x,y),(x+w,y+h),dist_label[label[i]],1)\n    plt.figure(figsize=(10,10))\n    plt.imshow(new_img)\n            \nelse:\n    print(\"No. of faces detected is less than 2\")","f5f7c3c6":"### Using haar cascade to detect faces\n\nObject Detection using Haar feature-based cascade classifiers is an effective object detection method proposed by Paul Viola and Michael Jones in their paper, \"Rapid Object Detection using a Boosted Cascade of Simple Features\" in 2001. It is a machine learning based approach where a cascade function is trained from a lot of positive and negative images. It is then used to detect objects in other images. We'll be using a Haar Cascade Model trained to detect faces in order to obtain the bounding box coordinates of faces in an image.","2f0ef143":"### Building VGG19 transfer learning model.","990e37aa":"![d8ce0480-9ac0-11ea-8062-809a1b8bfab6.png](attachment:d8ce0480-9ac0-11ea-8062-809a1b8bfab6.png)","940f0f1d":"We now take crops of the faces detected in the image and use the model trained in the above section to determine whether the individual faces have a mask or not.","f2745ace":"### Save the model.","cdca5f5d":"**Objective** is to build a model which can identify if the person is wearing a mask or not, also detecting if people are violating social distancing norms.","062558c4":"#### Red box shows violation of social distancing.","76a8da09":"### Detecting social distancing violations\n\nThis can be done by iterating over the coordinates of faces and calculating the distance for each possible pair, if the distance for a particular pair is less than MIN_DISTANCE then the bounding boxes for those faces are colored red. MIN_DISTANCE must be manually initialized in such a way that it corresponds to the minimum allowable distance in real life.","84370c0c":"### Integrating with haar cascade","4bd0e0c8":"### Testing the model on the test data","202ecba5":"### Using VGG19 for mask detection\n","4bd9a2a8":"# Mask and Social distancing Detection ","698b7d1f":"#### Red boxes shows violation of social distancing.","af7a54be":"The model is able to classify if the person is wearing a mask or not."}}