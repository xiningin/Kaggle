{"cell_type":{"b3e599d7":"code","ef8e7b62":"code","069eeb0f":"code","2d256bad":"code","c4de52fe":"code","240ad2d6":"code","f0092612":"code","2619f439":"code","7e8111b7":"code","05480996":"code","905a4ba2":"code","7baf2adb":"code","016daac1":"code","d58c3b8a":"code","e6a44451":"code","cf2cbde1":"code","7d3203c0":"code","08498f66":"code","2787ad52":"code","e7bff069":"code","bd4a3986":"code","ad770966":"code","37547e34":"code","4fd4415d":"code","25f6632e":"code","7dd2fa72":"code","efe8d337":"code","fedd8a96":"code","5ed3275f":"code","589715c4":"code","e5add9fc":"code","95dac336":"code","fba3a1ca":"code","69a7da7c":"markdown","5baac9e4":"markdown","6efac6d1":"markdown","7e4c1138":"markdown","58c65329":"markdown","6ddee571":"markdown","effbb9ed":"markdown","d9a37ffd":"markdown","076f3d4c":"markdown","f5fb1817":"markdown","2b3568b9":"markdown"},"source":{"b3e599d7":"import h5py\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.model_selection import GridSearchCV, KFold\nimport scipy as sp\nimport random\nimport nilearn as nl\nfrom nilearn import datasets\nfrom nilearn import plotting\nfrom nilearn import image\nimport nibabel as nib\nimport nilearn.plotting as nlplt\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom functools import partial\n\nfrom sklearn.model_selection import StratifiedKFold, GroupKFold, KFold\nfrom sklearn import preprocessing\nimport category_encoders as ce\nfrom sklearn.metrics import mean_squared_error\n\nimport torch\n\nimport lightgbm as lgb\nfrom glob import glob\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","ef8e7b62":"train = pd.read_csv('\/kaggle\/input\/trends-assessment-prediction\/train_scores.csv').sort_values(by='Id')\n\nloadings = pd.read_csv('\/kaggle\/input\/trends-assessment-prediction\/loading.csv')\n\nfnc = pd.read_csv('\/kaggle\/input\/trends-assessment-prediction\/fnc.csv')\n\nsample = pd.read_csv('\/kaggle\/input\/trends-assessment-prediction\/sample_submission.csv')\n\nreveal = pd.read_csv('\/kaggle\/input\/trends-assessment-prediction\/reveal_ID_site2.csv')\n\nICN = pd.read_csv('\/kaggle\/input\/trends-assessment-prediction\/ICN_numbers.csv')","069eeb0f":"!wget https:\/\/github.com\/Chaogan-Yan\/DPABI\/raw\/master\/Templates\/ch2better.nii","2d256bad":"mat = h5py.File('\/kaggle\/input\/trends-assessment-prediction\/fMRI_train\/10046.mat','r')\nmat.keys()","c4de52fe":"sample = mat['SM_feature']","240ad2d6":"array = sample[()]\narray.shape","f0092612":"print(array.min(),array.max(),array.mean())","2619f439":"mat, ax = plt.subplots(1,4)\nmat.set_size_inches(25, 10)\nfor i in range(4):\n    Temp = array[i*10, :, 10, :] !=0  \n    ax[i].imshow(Temp)\nplt.show()","7e8111b7":"motor_images = datasets.fetch_neurovault_motor_task()\nimg = motor_images.images[0]","05480996":"nii_loc = \"\/kaggle\/input\/trends-assessment-prediction\/fMRI_mask.nii\"\nnii_loc2 = \"\/kaggle\/input\/trends-assessment-prediction\/fMRI_train\/10009.mat\"\nniiplot = plotting.plot_glass_brain(img)\nniiplot","905a4ba2":"maskni = nl.image.load_img(nii_loc)\nsubjectimage = nl.image.new_img_like(nii_loc, array, affine=maskni.affine, copy_header=True)","7baf2adb":"smri = 'ch2better.nii'\nnum_components = subjectimage.shape[-1]","016daac1":"grid_size = int(np.ceil(np.sqrt(num_components)))\nfig, axes = plt.subplots(grid_size, grid_size, figsize=(grid_size*10, grid_size*10))\n[axi.set_axis_off() for axi in axes.ravel()]\nrow = -1\nfor i, cur_img in enumerate(nl.image.iter_img(subjectimage)):\n    col = i % grid_size\n    if col == 0:\n        row += 1\n    nlplt.plot_stat_map(cur_img, bg_img=smri, title=\"IC %d\" % i, axes=axes[row, col], threshold=3, colorbar=False)","d58c3b8a":"train.isnull().sum()","e6a44451":"reveal.head()","cf2cbde1":"ICN.head()","7d3203c0":"fnc.head()","08498f66":"train_ids = sorted(loadings[loadings['Id'].isin(train.Id)]['Id'].values)\ntest_ids = sorted(loadings[~loadings['Id'].isin(train.Id)]['Id'].values)\npredictions = pd.DataFrame(test_ids, columns=['Id'], dtype=str)\nfeatures = ('age', 'domain1_var1', 'domain1_var2','domain2_var1','domain2_var2')","2787ad52":"data = pd.merge(loadings, train, on='Id').dropna()\nX_train = data.drop(list(features), axis=1).drop('Id', axis=1)\ny_train = data[list(features)]\nX_test = loadings[loadings.Id.isin(test_ids)].drop('Id', axis=1)","e7bff069":"X_test.head()","bd4a3986":"y_train.head()","ad770966":"def plot_bar(df, feature, title='', show_percent = False, size=2):\n    f, ax = plt.subplots(1,1, figsize=(4*size,3*size))\n    total = float(len(df))\n    sns.barplot(np.round(df[feature].value_counts().index).astype(int), df[feature].value_counts().values, alpha=0.8, palette='Set2')\n\n    plt.title(title)\n    if show_percent:\n        for p in ax.patches:\n            height = p.get_height()\n            ax.text(p.get_x()+p.get_width()\/2.,\n                    height + 3,\n                    '{:1.2f}%'.format(100*height\/total),\n                    ha=\"center\", rotation=45) \n    plt.xlabel(feature, fontsize=12, )\n    plt.ylabel('Number of Occurrences', fontsize=12)\n    plt.xticks(rotation=90)\n    plt.show()","37547e34":"plot_bar(y_train, 'age', 'age count and %age plot', show_percent=True, size=4)","4fd4415d":"def plot_bar(df, feature, title='', show_percent = False, size=2):\n    f, ax = plt.subplots(1,1, figsize=(4*size,3*size))\n    total = float(len(df))\n    sns.barplot(np.round(df[feature].value_counts().index).astype(int), df[feature].value_counts().values, alpha=0.8, palette='Set2')\n\n    plt.title(title)\n    if show_percent:\n        for p in ax.patches:\n            height = p.get_height()\n            ax.text(p.get_x()+p.get_width()\/2.,\n                    height + 3,\n                    '{:1.2f}%'.format(100*height\/total),\n                    ha=\"center\", rotation=45) \n    plt.xlabel(feature, fontsize=12, )\n    plt.ylabel('Number of Occurrences', fontsize=12)\n    plt.xticks(rotation=90)\n    plt.show()","25f6632e":"### Age count Distribution\nfor col in y_train.columns[2:]:\n    plot_bar(y_train, col, f'{col} count plot', size=4)","7dd2fa72":"plt.figure(figsize = (12, 8))\nsns.heatmap(y_train.corr(), annot = True, cmap=\"RdYlGn\")\nplt.yticks(rotation=0) \n\nplt.show()","efe8d337":"temp_data =  loadings.drop(['Id'], axis=1)\n\nplt.figure(figsize = (20, 20))\nsns.heatmap(temp_data.corr(), annot = True, cmap=\"RdYlGn\")\nplt.yticks(rotation=0) \n\nplt.show()","fedd8a96":"model = RandomForestRegressor(\n    max_depth=15,\n    min_samples_split=8,\n    min_samples_leaf=7\n)\ncv = KFold(n_splits = 7, shuffle=True, random_state=35)\ngrid = {\n    'n_estimators':[5,10,20,100]\n}\ngs = GridSearchCV(model, grid, n_jobs=-1, cv=cv, verbose=1, scoring='neg_mean_absolute_error')","5ed3275f":"best_models = {}\nfor col in features:\n    gs.fit(X_train, y_train[col])\n    best_models[col] = gs.best_estimator_\n    print(gs.best_score_)","589715c4":"for col in features:\n    predictions[col] = best_models[col].predict(X_test)","e5add9fc":"def make_sub(predictions):\n    features = ('age', 'domain1_var1', 'domain1_var2','domain2_var1','domain2_var2')\n    _columns = (0,1,2,3,4)\n    tests = predictions.rename(columns=dict(zip(features, _columns)))\n    tests = tests.melt(id_vars='Id',value_vars=_columns,value_name='Predicted')\n    tests['target'] = tests.variable.map(dict(zip(_columns, features)))\n    tests['Id_'] = tests[['Id', 'target']].apply(lambda x: '_'.join((str(x[0]), str(x[1]))), axis=1)\n  \n    return tests.sort_values(by=['Id', 'variable'])\\\n              .drop(['Id', 'variable', 'target'],axis=1)\\\n              .rename(columns={'Id_':'Id'})\\\n              .reset_index(drop=True)\\\n              [['Id', 'Predicted']]","95dac336":"sub = make_sub(predictions)","fba3a1ca":"sub.to_csv('submission.csv', index=False)","69a7da7c":"# read and load files","5baac9e4":"# Thanks...","6efac6d1":"inference\n\n- Top 5 most frequent ages are 57, 60, 54, 55, 50\n- Most of the patients lie between the age group 22 to 77.","7e4c1138":"Human brain research is among the most complex areas of study for scientists. We know that age and other factors can affect its function and structure, but more research is needed into what specifically occurs within the brain. With much of the research using MRI scans, data scientists are well positioned to support future insights. In particular, neuroimaging specialists look for measurable markers of behavior, health, or disorder to help identify relevant brain regions and their contribution to typical or symptomatic effects.","58c65329":"# Import Required Modules","6ddee571":"# EDA","effbb9ed":"# Introduction","d9a37ffd":"**What us to be predicted ?** \n- you will predict multiple assessments plus age from multimodal brain MRI features. You will be working from existing results from other data scientists, doing the important work of validating the utility of multimodal features in a normative population of unaffected subjects. Due to the complexity of the brain and differences between scanners, generalized approaches will be essential to effectively propel multimodal neuroimaging research forward.","076f3d4c":"# Data Cleaning","f5fb1817":"Reading a .mat file","2b3568b9":"![image.png](attachment:image.png)"}}