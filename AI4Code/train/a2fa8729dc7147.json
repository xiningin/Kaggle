{"cell_type":{"076d4881":"code","398f6603":"code","0304196d":"code","e0315c65":"code","08e0c06d":"code","d58fa6e3":"code","b408bfd1":"markdown","4a39cd6b":"markdown","9f61301a":"markdown","dc0854d7":"markdown","723d1fe5":"markdown","bba55b2a":"markdown","139dacc9":"markdown"},"source":{"076d4881":"import pandas as pd \nimport os\nfrom datetime import datetime\n\nprint(os.listdir(\"..\/input\"))\npd.options.mode.chained_assignment = None\n\ndf = pd.read_csv(\"..\/input\/eurusd-mar2019\/eurusd_mar2019.csv\", sep='\\t')\ndf.columns = ['Date', 'Time', 'Open', 'High', 'Low', 'Close', 'Tickvol', 'Vol', 'Spread']\ndf.drop(['Vol'], axis=1, inplace=True)\n\ndf['Datetime'] =  pd.to_datetime(df['Date'] + \" \" + df['Time'], format='%Y.%m.%d  %H:%M:%S')\ndf.set_index('Datetime', inplace=True)","398f6603":"price = df[['Close']]\n\n#NORMALIZATION: y = (x - min) \/ (max - min)\nprice['max'] = price['Close'].rolling(10).max()\nprice['min'] = price['Close'].rolling(10).min()\n\nprice['+1'] = (price['Close'].shift(-1) - price['min']) \/ (price['max'] - price['min'])\nprice['0'] = (price['Close'] - price['min']) \/ (price['max'] - price['min'])\nprice['-1'] = (price['Close'].shift(1) - price['min']) \/ (price['max'] - price['min'])\nprice['-2'] = (price['Close'].shift(2) - price['min']) \/ (price['max'] - price['min'])\nprice['-3'] = (price['Close'].shift(3) - price['min']) \/ (price['max'] - price['min'])\nprice['-4'] = (price['Close'].shift(4) - price['min']) \/ (price['max'] - price['min'])\nprice['-5'] = (price['Close'].shift(5) - price['min']) \/ (price['max'] - price['min'])\nprice['-6'] = (price['Close'].shift(6) - price['min']) \/ (price['max'] - price['min'])\nprice['-7'] = (price['Close'].shift(7) - price['min']) \/ (price['max'] - price['min'])\nprice['-8'] = (price['Close'].shift(8) - price['min']) \/ (price['max'] - price['min'])\nprice['-9'] = (price['Close'].shift(9) - price['min']) \/ (price['max'] - price['min'])\n\nprice.dropna(inplace=True)\n","0304196d":"from sklearn.cluster import KMeans\n\nml = price[['-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '+1']]\n\nkmeans = KMeans(n_clusters=20)\nkmeans.fit(ml)\nclasse = kmeans.predict(ml)\n\ncenters = kmeans.cluster_centers_\ncenters_df = pd.DataFrame(data=centers,     # values\nindex=['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20'],\ncolumns=['-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '+1'])\ncenters_df['Target'] = (centers_df['+1'] - centers_df['0']) > 0","e0315c65":"df1 = pd.read_csv(\"..\/input\/eurusd-apr\/eurusd_apr2019.csv\", sep='\\t')\ndf1.columns = ['Date', 'Time', 'Open', 'High', 'Low', 'Close', 'Tickvol', 'Vol', 'Spread']\ndf1.drop(['Vol'], axis=1, inplace=True)\ndf1['Datetime'] = pd.to_datetime(df1['Date'] + \" \" + df1['Time'], format='%Y.%m.%d  %H:%M:%S')\ndf1.set_index('Datetime', inplace=True)\n\ntest = df1[['Close']]\ntest['max'] = test['Close'].rolling(10).max()\ntest['min'] = test['Close'].rolling(10).min()\n\ntest['+1'] = (test['Close'].shift(-1) - test['min']) \/ (test['max'] - test['min'])\ntest['0'] = (test['Close'] - test['min']) \/ (test['max'] - test['min'])\ntest['-1'] = (test['Close'].shift(1) - test['min']) \/ (test['max'] - test['min'])\ntest['-2'] = (test['Close'].shift(2) - test['min']) \/ (test['max'] - test['min'])\ntest['-3'] = (test['Close'].shift(3) - test['min']) \/ (test['max'] - test['min'])\ntest['-4'] = (test['Close'].shift(4) - test['min']) \/ (test['max'] - test['min'])\ntest['-5'] = (test['Close'].shift(5) - test['min']) \/ (test['max'] - test['min'])\ntest['-6'] = (test['Close'].shift(6) - test['min']) \/ (test['max'] - test['min'])\ntest['-7'] = (test['Close'].shift(7) - test['min']) \/ (test['max'] - test['min'])\ntest['-8'] = (test['Close'].shift(8) - test['min']) \/ (test['max'] - test['min'])\ntest['-9'] = (test['Close'].shift(9) - test['min']) \/ (test['max'] - test['min'])\ntest.dropna(inplace=True)\n\ntest_ml = test[['-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0', '+1']]","08e0c06d":"X = test[['-9', '-8', '-7', '-6', '-5', '-4', '-3', '-2', '-1', '0']]\ny = test['+1']-test['0']>0\n\ncount = 0\nfor index in range(len(X['0'])):\n    x = X.iloc[index]\n    y_iterated = y[index]\n    check = []\n    for i in range(20):\n        msd = 0\n        for j in range(10):\n            msd += (centers_df.iloc[i,j]-x[j])**2\n        check.append(msd\/10)\n    count+=int(centers_df.iloc[check.index(min(check))]['Target']==y_iterated)\nprint(count\/len(X['0']))","d58fa6e3":"y.value_counts()\n653\/(820+653)","b408bfd1":"Create series of size N (in minutes) of prices","4a39cd6b":"Some of the values obtained by refitting the model:\n0.506449422946368\n0.5057705363204344\n0.4697895451459606\n0.5084860828241684","9f61301a":"Score","dc0854d7":"Benchmark","723d1fe5":"Load and prepare the data","bba55b2a":"Create train dataset and train a KMeans clustering model","139dacc9":"Create test dataset"}}