{"cell_type":{"2c900596":"code","545553ee":"code","e1112c31":"code","1ee94936":"code","11c3676f":"code","68037b2a":"code","5ed153b0":"code","67a25a1b":"code","0a7c1415":"code","7437fb28":"code","480bc287":"code","4eca32bd":"code","c375add3":"code","0b0d43a0":"code","f0cf7ad5":"code","c78a5747":"code","6019e805":"code","1a6dd8d4":"code","4fad39eb":"code","eb7ac678":"code","d39eafec":"code","ab031648":"code","088263de":"code","bdbbea41":"code","cf1c5448":"code","95b43dd9":"code","d8a068d5":"code","c71457c1":"code","e9b41be4":"code","45263a87":"code","65064d51":"code","0a0b86ed":"code","75db0320":"code","8bb35cb7":"code","0a18e407":"code","21a1fd17":"code","33c492dc":"code","5ad2026e":"code","2fb0b57d":"code","343c3ee8":"markdown","c8d11428":"markdown","40796884":"markdown","13f4f349":"markdown","077fface":"markdown","723edc1d":"markdown","5e1f60a3":"markdown","aad2e547":"markdown","bda23ead":"markdown"},"source":{"2c900596":"!pip install pillow","545553ee":"import PIL\nprint('Pillow Version:', PIL.__version__)","e1112c31":"from PIL import Image\nimg1= Image.open(\"..\/input\/cassava-leaf-disease-classification\/train_images\/1000015157.jpg\")","1ee94936":"print(img1.format,img1.size,img1.mode)","11c3676f":"# load and display an image with Matplotlib\nfrom matplotlib import image\nfrom matplotlib import pyplot\n# load image as pixel array\ndata = image.imread('..\/input\/cassava-leaf-disease-classification\/train_images\/1000201771.jpg')\n# summarize shape of the pixel array\nprint(data.dtype)\nprint(data.shape)\n# display the array of pixels as an image\npyplot.imshow(data)\npyplot.show()","68037b2a":"from PIL import Image\nfrom numpy import asarray\n# load the image\nimage = Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/100042118.jpg')\ndata = asarray(image)\n# summarize shape\nprint(data.shape)\n# create Pillow image\nimage2 = Image.fromarray(data)\n# summarize image details\nprint(image2.format)\nprint(image2.mode)\nprint(image2.size)","5ed153b0":"pyplot.imshow(image2)","67a25a1b":"# load and display an image with Matplotlib\nfrom matplotlib import image\nfrom matplotlib import pyplot\n# load image as pixel array\ndata = image.imread('..\/input\/cassava-leaf-disease-classification\/train_images\/1000910826.jpg')\n# summarize shape of the pixel array\nprint(data.dtype)\nprint(data.shape)\n# display the array of pixels as an image\npyplot.imshow(data)\npyplot.show()","0a7c1415":"# load and display an image with Matplotlib\nfrom matplotlib import image\nfrom matplotlib import pyplot\n# load image as pixel array\ndata = image.imread('..\/input\/cassava-leaf-disease-classification\/train_images\/1004826518.jpg')\nprint(data.dtype)\nprint(data.shape)\n# display the array of pixels as an image\npyplot.imshow(data)\npyplot.show()","7437fb28":"# create a thumbnail of an image\nfrom PIL import Image\n# load the image\nimage = Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/1004826518.jpg')\nprint(image.size)\n# create a thumbnail and preserve aspect ratio\nimage.thumbnail((100,100))\n# report the size of the thumbnail\nprint(image.size)","480bc287":"image = Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/1004163647.jpg')\n# report the size of the image\nprint(image.size)\n# resize image and ignore original aspect ratio\nimg_resized = image.resize((200,200))\n# report the size of the thumbnail\nprint(img_resized.size)","4eca32bd":"# load image\nimage = Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/1004881261.jpg')\n# horizontal flip\nhoz_flip = image.transpose(Image.FLIP_LEFT_RIGHT)\n# vertical flip\nver_flip = image.transpose(Image.FLIP_TOP_BOTTOM)\n# plot all three images using matplotlib\npyplot.subplot(311)\npyplot.imshow(image)\npyplot.subplot(312)\npyplot.imshow(hoz_flip)\npyplot.subplot(313)\npyplot.imshow(ver_flip)\npyplot.show()","c375add3":"# load image\nimage = Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/1005739807.jpg')\n# plot original image\npyplot.subplot(311)\npyplot.imshow(image)\n# rotate 45 degrees\npyplot.subplot(312)\npyplot.imshow(image.rotate(45))\n# rotate 90 degrees\npyplot.subplot(313)\npyplot.imshow(image.rotate(90))\npyplot.show()\n#rotates 270 degrees\npyplot.imshow(image.rotate(270))\npyplot.show()","0b0d43a0":"from PIL import Image\n# load image\nimage = Image.open('..\/input\/cassava-leaf-disease-classification\/train_images\/1017006970.jpg')\n# create a cropped image\ncropped = image.crop((100, 100, 370, 280))\n# show cropped image\npyplot.imshow(cropped)","f0cf7ad5":"import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout, Flatten\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.utils import to_categorical\nfrom keras.layers import BatchNormalization\nfrom keras.preprocessing import image\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tqdm import tqdm\n%matplotlib inline","c78a5747":"train = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')    # reading the csv file\ntrain.head()  ","6019e805":"train.head(20)","1a6dd8d4":"train.tail()","4fad39eb":"train.shape","eb7ac678":"train.columns","d39eafec":"train_image = []\nfor i in tqdm(range(3000)):\n    img = image.load_img('..\/input\/cassava-leaf-disease-classification\/train_images\/'+train['image_id'][i], target_size=(200,200,3), grayscale=False)\n    img = image.img_to_array(img)\n    img = img\/255\n    train_image.append(img)\nX = np.array(train_image)","ab031648":"X.shape","088263de":"plt.imshow(X[17])","bdbbea41":"plt.imshow(X[35])","cf1c5448":"plt.imshow(X[60])","95b43dd9":"plt.imshow(X[2])","d8a068d5":"plt.imshow(X[69])","c71457c1":"plt.imshow(X[86])","e9b41be4":"y=train[0:3000]['label'].values\ny = to_categorical(y)","45263a87":"y.shape","65064d51":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=45, test_size=0.10)","0a0b86ed":"model = Sequential()\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation=\"relu\", input_shape=(200,200,3)))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.25))\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(filters=128, kernel_size=(3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.25))\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(Dense(5, activation='softmax'))","75db0320":"model.summary()","8bb35cb7":"model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])","0a18e407":"history = model.fit(X_train, y_train, epochs=50, validation_data=(X_test, y_test), batch_size=64, verbose=2)","21a1fd17":"from matplotlib import pyplot\n# plot history\npyplot.plot(history.history['accuracy'], label='train')\npyplot.plot(history.history['val_accuracy'], label='test')\npyplot.legend()\npyplot.show()","33c492dc":"import cv2\nimport numpy as np\nimg = cv2.imread('..\/input\/cassava-leaf-disease-classification\/test_images\/2216849948.jpg')\nplt.imshow(img)\nimg = cv2.resize(img,(200, 200))\nimg = np.reshape(img,[1,200, 200,3])\nclasses = model.predict_classes(img)\nprint(classes)","5ad2026e":"scores = model.evaluate(X_test, y_test, verbose=0)\nprint(\"%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))","2fb0b57d":"model.save_weights(\"model.h5\")\nprint(\"Saved model to disk\")","343c3ee8":"# Deep learning model from scratch","c8d11428":"**Converting images into numpy arrays and back**","40796884":"**Resizing Images**","13f4f349":"# Loads Image and training set resized","077fface":"**Cropping Images**","723edc1d":"**Rotating Image**","5e1f60a3":"**Loads the photo as a Pillow Image object and converts it to a NumPy array, then converts it back to an Image object again.**","aad2e547":" Resize a new image and ignore the original aspect ratio.","bda23ead":"# Flipping, Rotating and Cropping images\n**Flipping Image**"}}