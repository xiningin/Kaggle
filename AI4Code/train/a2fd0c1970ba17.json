{"cell_type":{"3f49abdc":"code","e9f1d6ea":"code","2bdff4c2":"code","8f7b0b1e":"code","51afce93":"code","f8e23a6f":"code","53e38059":"code","e13466ff":"code","3c194a74":"code","6ad3d3ea":"code","280773a1":"code","8a8b37a1":"code","db7f1add":"code","9acac63d":"code","c2cc3be9":"code","6e7ba517":"code","d8fafde7":"code","d428a1f4":"code","43e46761":"code","e9f3d33c":"code","ea422893":"code","abcb4cea":"code","07b2271b":"code","5246bc91":"code","44341c90":"code","0beca11b":"code","f8908aae":"code","23a0c6c2":"code","a0ce5428":"code","0eb841cc":"code","9176191c":"code","3ea99714":"code","49607d2e":"code","166f79f7":"code","6dadac88":"code","c1473387":"code","a78299b0":"code","3d4501af":"code","51c58b67":"code","d20fee8c":"code","773eb09f":"code","523b1a9b":"code","5af56228":"code","8cc09226":"code","a43f2fce":"code","376d4f8f":"code","a433023a":"code","ac1c5aab":"code","ffaf8802":"code","59179084":"code","f3856a71":"code","b6679731":"code","e8044425":"code","9aa36096":"code","99a2d17c":"code","49bfc7d7":"code","3a36ff44":"code","d69f895c":"code","23897efb":"code","9776558d":"code","cf53e2d8":"code","15a2fa56":"code","8efdad19":"code","6c0d1b82":"code","01cdd1a0":"code","3c0a93b9":"code","1c1283c8":"code","915cd293":"code","9339065b":"markdown","222c6f27":"markdown","92d6130a":"markdown","d37af1c6":"markdown","13a2f1ac":"markdown","ddbe7e39":"markdown","e34d923a":"markdown","a48ce1f2":"markdown","783fa9ff":"markdown","43d6c1a3":"markdown","1ab8cd0d":"markdown","907aad32":"markdown","4feac78c":"markdown","d9c8d323":"markdown","1945bb2a":"markdown","bfe1805d":"markdown","2e3ed2c1":"markdown","4c0634f6":"markdown","eaa50cc7":"markdown","52fee938":"markdown","462ceab3":"markdown","4b1bd23a":"markdown","a3bcb26a":"markdown","45671b6f":"markdown","564b9035":"markdown","0a5cb37c":"markdown","4cf0180e":"markdown","a990512c":"markdown","1b698b9c":"markdown","643af795":"markdown","e747047b":"markdown","45bb3e5c":"markdown","34ca4d42":"markdown","51d0b50b":"markdown","762b4a24":"markdown","97066224":"markdown","ad0f3f33":"markdown","634b8ea6":"markdown","3562590c":"markdown","65ce6af7":"markdown","0ba5e030":"markdown","ba7be385":"markdown","21d5ef6f":"markdown","11553d0e":"markdown","36b776ee":"markdown","d6d02b51":"markdown","ac17eb5a":"markdown","c501ec73":"markdown","bfd9bb8a":"markdown","147e5a91":"markdown","8b753c94":"markdown","16d82614":"markdown","1576a510":"markdown","c6b46f8b":"markdown","83a537a8":"markdown","2a632a2e":"markdown","539448e6":"markdown","c588170c":"markdown"},"source":{"3f49abdc":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e9f1d6ea":"airbnb_data = pd.read_csv(\"..\/input\/airbnb_dataset.csv\")","2bdff4c2":"airbnb_data.head()","8f7b0b1e":"print('AirBnB Data: ', airbnb_data.shape) ","51afce93":"print('Data information')\nprint('-'*50)\nairbnb_data.info()","f8e23a6f":"print('-'*50)\nprint(airbnb_data.isnull().sum().head(20))\nprint('*'*50)","53e38059":"# Check unique state by state\nairbnb_data.state.unique()","e13466ff":"# Load data that is only in Washington, DC\ndc_data = airbnb_data[airbnb_data.state.isin(['DC', 'Washington DC'])]","3c194a74":"%%HTML\n<style type=\"text\/css\">\ntable.dataframe td, table.dataframe th {\n    border: 1px  black solid !important;\n  color: black !important;\n}\n<\/style>","6ad3d3ea":"#load your dataframe\n\nrevenue_df = dc_data[['id','price','guests_included', 'extra_people', 'number_of_reviews','minimum_nights', 'accommodates', 'host_name', 'host_id', 'neighbourhood_cleansed']]","280773a1":"revenue_df.head(15)","8a8b37a1":"revenue_data = revenue_df\nprint('Missing Values in Revenue Data')\nprint('-'*30)\nprint(revenue_data.isnull().sum())\nprint('*'*30)","db7f1add":"# Check datatype of each column \nrevenue_data.info()","9acac63d":" #Remove '$' sign in String from 'price'\n # Use 'pd.to_numeric' to convert to float \n\nrevenue_data['price'] = revenue_data['price'].map(lambda x: x.lstrip('$'))\nrevenue_data['price'] = pd.to_numeric(revenue_data['price'],errors='coerce')\nrevenue_data['extra_people'] = revenue_data['extra_people'].map(lambda x: x.lstrip('$'))\nrevenue_data['extra_people'] = pd.to_numeric(revenue_data['extra_people'],errors='coerce')","c2cc3be9":"# Check datatype again of each column and review \"price\" & \"extra_people\" are converted into float\nrevenue_data.info()","6e7ba517":"# Replace '0' values in 'extra_people' to Nan value\nrevenue_data['extra_people'].replace(0.0, np.nan, inplace=True)\nrevenue_data.extra_people.head(10)","d8fafde7":"# To see which number is the average of the revenue_data['extra_people'] that is not Null\nrevenue_data.extra_people.describe()","d428a1f4":"#### Now let's fill columns with Null data in 'extra_people' with the average\nrevenue_data.extra_people.fillna(revenue_data.extra_people.mean(), inplace = True)\nrevenue_data.extra_people.head(10)","43e46761":"conditions = [\n    (revenue_data['guests_included'] > 1) & (revenue_data['accommodates'] > 1),\n    (revenue_data['guests_included'] == 1 ) & (revenue_data['accommodates'] == 1),\n    (revenue_data['guests_included'] == 1 ) & (revenue_data['accommodates'] > 1),\n    (revenue_data['guests_included'] == 0 ) ]\n\nchoices = [revenue_data['price'], revenue_data['price'], revenue_data['price']+revenue_data['extra_people'], revenue_data['price']]\n\nrevenue_data['est_daily_revenue'] = np.select(conditions, choices, default='null')\nrevenue_data.head(15)","e9f3d33c":"#drop listings without reviews\n\nrevenue_data.number_of_reviews.replace(0, np.nan, inplace=True)\nrevenue_data = revenue_data.dropna()\nrevenue_data.info()","ea422893":"revenue_data['est_number_stays'] = revenue_data.number_of_reviews*2\nrevenue_data.head()","abcb4cea":"# Convert revenue_data['est_daily_revenue'] from object to float\nrevenue_data['est_daily_revenue'] = pd.to_numeric(revenue_data['est_daily_revenue'],errors='coerce')\n# Round the 'est_daily_revenue'\nrevenue_data = revenue_data.round({\"est_daily_revenue\":2})","07b2271b":"# Calculate the estimated total revenue for each listing by multiplying the estimated revenue per booking by the estimated number of stays (minimum nights).\nrevenue_data['total_revenue'] = revenue_data['est_daily_revenue'] *  revenue_data['est_number_stays']\n","5246bc91":"# convert 'est_daily_revenue' to a number and round it up\n\nrevenue_data['total_revenue'] = pd.to_numeric(revenue_data['total_revenue'],errors='coerce')\n\nrevenue_data = revenue_data.round({\"total_revenue\":2, \"extra_people\":2}) \nrevenue_data.head()","44341c90":"# sort by highest revenue\nrevenue_data.sort_values(by='total_revenue', ascending=False).head(10)","0beca11b":"pvt = revenue_data.pivot_table(index=['host_id','host_name'], values=['total_revenue'], aggfunc=['sum','count'])\npvt.head(15)","f8908aae":"pvt.columns = pvt.columns.get_level_values(0)\npvt.columns = [' '.join(col).strip() for col in pvt.columns.values]\npvt = pvt.reset_index()","23a0c6c2":"pvt.head()","a0ce5428":"# Rename columns\npvt = pvt.rename(columns={'s u m': 'total_revenue', 'c o u n t': 'num_listings'})\npvt.head()","0eb841cc":"# show top 15 highest revenue\ntop_15 = pvt.sort_values(by='total_revenue',ascending=False).head(15)\ntop_15","9176191c":"formatted_top_15 = top_15.style.format({\"total_revenue\": \"${:20,.0f}\" })\nformatted_top_15","3ea99714":"plt.figure(figsize=(17,10))\nplt.bar(top_15['host_name'], top_15['total_revenue'])\n\nplt.xlabel('Host Name', fontsize=10)\nplt.ylabel('Total Revenue', fontsize=10)\nplt.xticks(fontsize=10, rotation=30)\nplt.yticks(fontsize=10, rotation=30)\nplt.title('Top 15 Successful Hosts by Revenue')","49607d2e":"fig = plt.figure(figsize=(15,7))\n\nax1 = fig.add_subplot(1,2,1)\nax2 = fig.add_subplot(1,2,2)\n\nax1.bar(top_15['host_name'], top_15['total_revenue'])\nax1.set_xticklabels(top_15['host_name'], rotation=60, horizontalalignment='right', fontsize=12)\nax1.set_title('Top 15 Successful Hosts by Revenue', fontsize=15)\nax1.set_ylabel('Total Revenue', fontsize=12)\nax1.set_xlabel('Host Name', fontsize=12)\n\n\nax2.plot(top_15['host_name'], top_15['num_listings'])\nax2.set_xticklabels(top_15['host_name'], rotation=60, horizontalalignment='right', fontsize=12)\nax2.set_title('Top 15 Successful Hosts with Number of Listings', fontsize=15)\nax2.set_ylabel('Number of Listings', fontsize=10)\nax2.set_xlabel('Host Name', fontsize=12)\n\nplt.savefig('Top 15 Successful Hosts.jpg', bbox_inches = 'tight')\nplt.show()","166f79f7":"# Style graphs using seaborn\nplt.rcParams.update(plt.rcParamsDefault)\nplt.style.use(\"fivethirtyeight\")\nplt.show()","6dadac88":"# create a new dataframe and load only relevant columns\n\nproperty_type_df = dc_data[['id','price','guests_included', 'extra_people', 'number_of_reviews','minimum_nights', 'accommodates', 'host_name', 'host_id', 'neighbourhood_cleansed', 'property_type','review_scores_rating']]\nproperty_type_df.head()","c1473387":"# Remove listing without 'reviews'\n# but Replace '0' with nan values first\n\nproperty_type_df['number_of_reviews'].replace(0.0, np.nan, inplace=True)\nproperty_type_df.dropna(subset=['number_of_reviews'], inplace=True)\nproperty_type_df.head()","a78299b0":"#cross check for nan values('review_scores_rating ' has only 2843 entries; while 'property_type' has 2879)\nproperty_type_df.info() ","3d4501af":"#cross check for nan values\nproperty_type_df.isnull().sum()","51c58b67":"# so let's fill it with the mean value\n\nproperty_type_df['review_scores_rating'] = property_type_df['review_scores_rating'].fillna((property_type_df['review_scores_rating'].mean()))\nproperty_type_df.isnull().sum() # Now the only null value is the 'property_type', so we can remove\/drop it","d20fee8c":"# Drop Nan values in 'property_type '\n\nproperty_type_df.property_type.replace(0, np.nan, inplace=True)\nproperty_type_df = property_type_df.dropna()","773eb09f":"property_type_df.isnull().sum() #Nan values in 'property_type ' is now dropped","523b1a9b":"conditions = [\n    (property_type_df.review_scores_rating >= 70.00),\n    (property_type_df.review_scores_rating < 70.00 )]\n\nchoices = ['positive review', 'negative review']\n\nproperty_type_df['review_status'] = np.select(conditions, choices, default='null')\nproperty_type_df.tail(10)","5af56228":"# Pivot table to show positive and negative reviews by 'property type'\nmost_positive_reviews = property_type_df.pivot_table(index=['property_type', 'review_status', 'review_scores_rating'], values=['host_id'], aggfunc=['count'])                                                                                                       \nmost_positive_reviews.head(25)","8cc09226":"dropped_neg_review_df = property_type_df\ndropped_neg_review_df = dropped_neg_review_df[dropped_neg_review_df.review_status != 'negative review']\ndropped_neg_review_df.info()","a43f2fce":"# now review status should be only positive reviews\ndropped_neg_review_df.head()","376d4f8f":"# Check pivot table again to make sure\nmost_positive_reviews = dropped_neg_review_df.pivot_table(index=['property_type', 'review_status', 'review_scores_rating'], values=['host_id'], aggfunc=['count'])                                                                                                       \nmost_positive_reviews","a433023a":"# Pivot for avg rating\npvt_avgreviews = dropped_neg_review_df.pivot_table(index=['property_type'], values=['review_scores_rating'], aggfunc=['mean', 'count'])\npvt_avgreviews.sort_values(by='property_type', ascending=True)\n","ac1c5aab":"#reset index\npvt_avgreviews =  pvt_avgreviews.reset_index()\npvt_avgreviews.columns =  pvt_avgreviews.columns.get_level_values(0)\npvt_avgreviews","ffaf8802":"# Rename columns\npvt_avgreviews.rename(columns = {'mean': 'avg_rating','count': 'num_of_listings' }, inplace = True) \npvt_avgreviews","59179084":"pvt_avgreviews.sort_values(by='num_of_listings', ascending=False)","f3856a71":"plt.figure(figsize=(10,6))\nplt.bar(pvt_avgreviews['property_type'], pvt_avgreviews['num_of_listings'])\n\nplt.xlabel('Property Type', fontsize=14)\nplt.ylabel('Number of Listings with positive reviews', fontsize=14)\nplt.xticks(fontsize=10, rotation=60)\nplt.yticks(fontsize=10, rotation=30)\nplt.title('Most positive reviews by Property Type')","b6679731":"# Pivot to show Neigborhood with positive and negative reviews \nneighborhood_positive_reviews = property_type_df.pivot_table(index=['neighbourhood_cleansed', 'review_status', 'review_scores_rating'], values=['host_id'], aggfunc=['count'])                                                                                                       \nneighborhood_positive_reviews","e8044425":"# done on the first part using \"dropped_neg_review_df\"\ndropped_neg_review_df = property_type_df\ndropped_neg_review_df = dropped_neg_review_df[dropped_neg_review_df.review_status != 'negative review']\ndropped_neg_review_df.info()","9aa36096":"# Transfer dataframe to \nneighborhood_positive_reviews_df = dropped_neg_review_df","99a2d17c":"# Explore neighborhood's positive review categories using pivot table again using \npvt_most_positive_reviews_neighbor = neighborhood_positive_reviews_df.pivot_table(index=['neighbourhood_cleansed', 'review_status', 'review_scores_rating'], values=['host_id'], aggfunc=['count'])                                                                                                       \npvt_most_positive_reviews_neighbor","49bfc7d7":"# Explore how many listing with positive reviews by \"neighbourhood_cleansed\"\npvt_most_positive_reviews_neighbor_count = neighborhood_positive_reviews_df.pivot_table(index=['neighbourhood_cleansed'], values=['host_id'], aggfunc=['count'])                                                                                                       \npvt_most_positive_reviews_neighbor_count","3a36ff44":"# Pivot for avg rating\npvt_avgreviews_neighbor = dropped_neg_review_df.pivot_table(index=['neighbourhood_cleansed'], values=['review_scores_rating'], aggfunc=['mean', 'count'])\npvt_avgreviews_neighbor.sort_values(by='neighbourhood_cleansed', ascending=True)","d69f895c":"#reset index\npvt_avgreviews_neighbor =  pvt_avgreviews_neighbor.reset_index()\npvt_avgreviews_neighbor.columns =  pvt_avgreviews_neighbor.columns.get_level_values(0)\npvt_avgreviews_neighbor.head()","23897efb":"# Rename columns\npvt_avgreviews_neighbor.rename(columns = {'neighbourhood_cleansed': 'Neighborhood','mean': 'avg_rating','count': 'num_of_listings' }, inplace = True) \npvt_avgreviews_neighbor.head(10)","9776558d":"pvt_avgreviews_neighbor = pvt_avgreviews_neighbor.sort_values(by='num_of_listings', ascending=False).head(15)\npvt_avgreviews_neighbor","cf53e2d8":"plt.figure(figsize=(20,14))\nplt.bar(pvt_avgreviews_neighbor['Neighborhood'], pvt_avgreviews_neighbor['num_of_listings'])\n\nplt.xlabel('Neighborhood', fontsize=12)\nplt.ylabel('Number of Listings with positive reviews', fontsize=12)\nplt.xticks(fontsize=10, rotation=85)\nplt.yticks(fontsize=10, rotation=0)\nplt.title('Most positive reviews by Neighborhood')\nplt.savefig('Most positive reviews by Neighborhood.jpg', bbox_inches = 'tight')","15a2fa56":"plt.figure(figsize=(15,13))\nplt.plot(pvt_avgreviews_neighbor['Neighborhood'], pvt_avgreviews_neighbor['avg_rating'])\n\nplt.xlabel('Neighbourhood', fontsize=12)\nplt.ylabel('Average Rating', fontsize=12)\nplt.xticks(fontsize=10, rotation=85)\nplt.yticks(fontsize=10, rotation=0)\nplt.title('Avg. Rating of Positive Reviews by Neighbourhood')\n\nplt.savefig('Avg. Rating of Positive Reviews by Neighbourhood.jpg', bbox_inches = 'tight')","8efdad19":"neighborhood_most_revenues = revenue_data.pivot_table(index=['neighbourhood_cleansed'], values=['total_revenue'], aggfunc=['sum','count'])                                                     \nneighborhood_most_revenues.head()","6c0d1b82":"neighborhood_most_revenues =  neighborhood_most_revenues.reset_index()\nneighborhood_most_revenues.columns =  neighborhood_most_revenues.columns.get_level_values(0)\nneighborhood_most_revenues.head()","01cdd1a0":"# Rename columns\nneighborhood_most_revenues = neighborhood_most_revenues.rename(columns={'neighbourhood_cleansed':'neighbourhood','sum': 'total_revenue', 'count': 'num_listings'})\nneighborhood_most_revenues.head()","3c0a93b9":"neighborhood_most_revenues_top10 = neighborhood_most_revenues.sort_values(by='total_revenue',ascending=False).head(10)\nneighborhood_most_revenues_top10","1c1283c8":"format_top_10 = neighborhood_most_revenues_top10.style.format({\"total_revenue\": \"${:20,.0f}\" })\nformat_top_10","915cd293":"fig = plt.figure(figsize=(25,10))\n\nax3 = fig.add_subplot(1,3,1)\nax4 = fig.add_subplot(1,3,2)\n\nax3.bar(neighborhood_most_revenues_top10['neighbourhood'], neighborhood_most_revenues_top10['total_revenue'])\n\nax3.set_xticklabels(neighborhood_most_revenues_top10['neighbourhood'], rotation=90, horizontalalignment='right', fontsize=12)\nax3.set_title('Top 15 Neighbourhoods by Revenue', fontsize=15)\nax3.set_ylabel('Total Revenue', fontsize=12)\nax3.set_xlabel('Neighbourhood', fontsize=12)\n\n\nax4.plot(neighborhood_most_revenues_top10['neighbourhood'], neighborhood_most_revenues_top10['num_listings'])\n\nax4.set_xticklabels(neighborhood_most_revenues_top10['neighbourhood'], rotation=90, horizontalalignment='right', fontsize=12)\nax4.set_title('Top 15 Successful Hosts with Number of Listings', fontsize=15)\nax4.set_ylabel('Number of Listings', fontsize=10)\nax4.set_xlabel('Neighbourhood', fontsize=12)\n\nplt.savefig('Top 15 Successful Neighbourhoods.jpg', bbox_inches = 'tight')\nplt.show()","9339065b":"So far, there's no Null value in the columns that we have loaded","222c6f27":"## <a id='57'>PROMPT 2: Which property types receive the most positive reviews?<\/a>","92d6130a":"## <a id=\"52\">Check the data with relevant columns<\/a>\nWe start by looking to the data features. ","d37af1c6":"## Which neighbourhoods generate the most revenue?\n### Answer: Capitol Hill, Lincoln Park","13a2f1ac":"[1] Using Pandas Dataframe for Data Manipulation, https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/frame.html#missing-data-handling  \n[2] Style Pandas Dataframe Like a Master, https:\/\/towardsdatascience.com\/style-pandas-dataframe-like-a-master-6b02bf6468b0  \n[3] Styling Charts and Graphs, https:\/\/python-graph-gallery.com\/  \n ","ddbe7e39":"## <a id=\"53\">Check missing values<\/a>","e34d923a":"### <a id='55.1'>Calculate estimated daily revenue for two guests<\/a> ","a48ce1f2":"# <a id=\"5\">Data exploration<\/a>","783fa9ff":"### Plot info to a bar graph","43d6c1a3":"Looking at the data, we can confirm that it contains **3723** rows and **92** columns","1ab8cd0d":"## <a href='#51'>Load relevant columns<\/a>","907aad32":"#### Show Only Relevant Columns\nBut first, style your table","4feac78c":"### Build several PivotTables in order to quickly explore the data at a high level: \n* PivotTables should contain the neighborhood, number of listings (make sure to exclude listings with no bookings), and average rating.\n* Additional PivotTables are welcome and useful for gaining a better understanding of the data.\n* Remove listing without any reviews","d9c8d323":"<h1><center><font size=\"6\">Exploratory Data Analysis using Python: Airbnb Investment in Washington, DC<\/font><\/center><\/h1>\n\n# <a id='0'>Content<\/a>\n\n- <a href='#1'>Introduction<\/a>  \n- <a href='#2'>Load packages<\/a>  \n- <a href='#3'>Read the data<\/a>  \n- <a href='#4'>Check the data<\/a>  \n    - <a href='#41'>Glimpse the data<\/a>  \n    - <a href='#42'>Check missing data<\/a>\n- <a href='#5'>Data exploration<\/a>\n    - <a href='#51'>Load relevant columns<\/a>  \n    - <a href='#52'>Check the data with relevant columns<\/a>  \n    - <a href='#53'>Check missing values<\/a> \n    - <a href='#54'>Dealing with Datatypes<\/a> \n    - <a href='#55'>Calculate the Revenue<\/a> \n        - <a href='#55.1'>Calculate estimated daily revenue for two guests<\/a>\n        - <a href='#55.2'>Calculate a proxy number of stays for each listing <\/a> \n        - <a href='#55.3'>Calculate the Estimated Total Revenue for each listing <\/a>   \n    - <a href='#56'>PROMPT 1: How much revenue do successful hosts make?<\/a> \n    - <a href='#57'>PROMPT 2: Which property types receive the most positive reviews?<\/a> \n    - <a href='#58'>PROMPT 3: Which neighborhood receive the most positive reviews?<\/a> \n    - <a href='#59'>PROMPT 4: Which neighbourhoods generate the most revenue?<\/a> \n- <a href='#6'>Summary & Conclusions<\/a>  \n- <a href='#7'>References<\/a>\n","1945bb2a":"# <a id=\"1\">Introduction<\/a>  \nNovember 26, 2019\n\nMy name is Clariza and I am beginnner and still learning data science using python. Below is just an example to showcase my knowledge in python programming language and demonstrating the step by step process of the data cleaning, data manipulation, analysis and conclusion. My programming background is really just minimal and everything I learned here is through self help from youtube tutorials, stack overflow, other kaggle projects and other data science tutorial websites. \n\nThe dataset is based from the project of a friend of mine who was tasked to solve data questions using Microsoft excel. I took the challenge and build the report (graphs) and analysis using python. \n\n**Project Details:**\n\nYou\u2019re working for a client who wishes to invest in an Airbnb property in Washington, D.C. Before your client decides to invest, they\u2019d like clean data about Airbnb performance in D.C.\u2019s neighborhoods that supports a clear recommendation for an investment in a specific market.\n\nThe datasets contains the scraped data captured by a web program with listing information from the Airbnb website. This data may contain unformatted data points with duplicate entries. You\u2019ll want to clean and format the data prior to performing exploratory analysis \u2014 this will help you better understand the available data and build some business context.\n\nWe\u2019ll address the main prompt: Should our investor invest in an Airbnb hotel in Washington, D.C.? If so, in which neighborhood should they invest?\n\nChoose one of the following sub-prompts to help guide your analysis:\n* Prompt 1: Host revenue \u2014 How much revenue do successful hosts generate? \n* Prompt 2: Property reviews \u2014 Which property types receive the most positive reviews?\n* Prompt 3: Neighborhood popularity \u2014 Which neighborhoods host the most listings?\n* Prompt 4: Neighborhood sentiment \u2014 Which neighborhoods receive the most positive reviews?\n","bfe1805d":"#### Flatten pivot table","2e3ed2c1":"## <a id=\"41\">Glimpse the data<\/a>\nLet's look into more details to the data.","4c0634f6":"### ANOTHER VERSION OF THE GRAPH","eaa50cc7":"#### Convert 'total_revenue' to dollars","52fee938":"## <a id=\"54\">Dealing with Datatypes<\/a>","462ceab3":"### Plot info to a bar graph","4b1bd23a":"#### Pivot table for roperty types with most positive reviews","a3bcb26a":"There's quite a mixture of missing data in different columns, but we will only use specific columns in our analysis. So only those columns that we are going to use are the ones needs fixing for the missing values","45671b6f":"## <a id='56'>PROMPT 1: How much revenue do successful hosts make?<\/a>","564b9035":"### Plot into bar graph","0a5cb37c":"## Which neighborhood receive the most positive reviews?\n### Answer: Columbia Heights, Mt. Pleasant,","4cf0180e":"### Now Calculate \"avg_rating\" of positive reviews by \"neighborhood\"","a990512c":"### FLATTEN PIVOT 'pvt_avgreviews_neighbor'","1b698b9c":"#### Now, Nan values are all filled, so what makes it a positive or a negative review score. Separate into groups\n* Review score with 70% above means positive review\n* Review score with 70% below means negative review","643af795":"# <a id=\"4\">Check the data<\/a>\nWe start by looking to the data features. ","e747047b":"> ##### Calculate estimated daily revenue for two guests, unless the accommodation explicitly accepts only one.\n##### Use the following logic to create a nested IF statement:\n\n* a. Determine if \u201cguests_included > 1\u201d (i.e., whether the price quoted already includes two or more people). This price represents daily revenue under the assumptions.\n\n* b. If \u201cguest_included = 1\u201d and \u201caccommodates = 1,\u201d then the listing is only for one person. This price represents daily revenue under the assumptions.\n\n* c. If \u201cguest_included = 1\u201d but \u201caccommodates > 1\u201d, then the price listed is only for one person but the property can accommodate two or more, so you need to add in the additional price for another person to get the daily revenue for two people. This additional price is contained in column V.\n\n* d. (if 'guest_included' == 0, then it follows condition 'a' in calculating the daily revenue)\n\n> ##### Grouping Data To Calculate Revenue","45bb3e5c":"* Assuming that 50 percent of customers who stayed left a review (use the data in the \u201cnumber_of_reviews\u201d column). \n* If 10 customers leave a review, you can assume the listing had 20 stays in total (create a new column with a number that\u2019s an estimate for how many stays each listing has received).\n* Remove listings without any reviews and duplicate rows where the bot may have re-recorded listing data.","34ca4d42":"## <a id='59'>PROMPT 4: Which neighbourhoods generate the most revenue?<\/a>","51d0b50b":"Looking at the data, we can see that 'price' & 'extra_people' are in string form. They should be converted into float so we can use in the calculation of revenue.","762b4a24":"### Build several PivotTables in order to quickly explore the data at a high level: \n* PivotTables should contain the property type, number of listings (make sure to exclude listings with no bookings), and average rating.\n* Additional PivotTables are welcome and useful for gaining a better understanding of the data.\n* Remove listing without any reviews","97066224":"## <a id='58'>PROMPT 3: Which neighborhood receive the most positive reviews?<\/a>","ad0f3f33":"### Plot into bar graph","634b8ea6":"* In order to calculate the daily revenue per listing, 'extra people' needs to have a value other than zero\n* So it needs to have a number for it's price\n* What number are we going to fill in for '0' values in \"extra_people\"?(mean)\n* * Basically the best number is the avg. of all numbers that is not of zero value","3562590c":"#### Drop all Rows with negative review in 'neighborhood_positive_reviews' dataframe","65ce6af7":"### Build several PivotTables in order to quickly explore the data at a high-level:\n* PivotTables should contain the host name, total revenue, and number of listings (make sure to exclude listings with no bookings).\n* Additional PivotTables are welcome and useful for gaining a better understanding of the data.\n* Format: Currency\/thousands separators should be used where appropriate.","0ba5e030":"## Which property types receive the most positive reviews?\n## Answer: Apartment has the most positive reviews","ba7be385":"## Choosing the Relevant Columns For Analysis\n* Choose properties that are only located in Washington, DC","21d5ef6f":"### Pivot table to show host name, total revenue and num of listings","11553d0e":"# <a id=\"7\">References<\/a> ","36b776ee":"### <a id='55.2'>Calculate a proxy number of stays for each listing <\/a> ","d6d02b51":"#### Convert 'total_revenue' to dollars","ac17eb5a":"* Capitol Hill, Lincoln Park is the best neighbourhood to invest in airbnb in Washington, DC\n* It has the highest revenue among other neighbourhoods which is $ 1,957,424\n* This is followed by Dupont Circle, Connecticut Avenue","c501ec73":"### <a id='55.3'>Calculate the Estimated Total Revenue for each listing<\/a> ","bfd9bb8a":"# <a id=\"3\">Read the data<\/a>","147e5a91":"It shows above that 'review_scores_rating' has 37 Nan Values despite having reviews given","8b753c94":"# <a id=\"2\">Load packages<\/a>","16d82614":"## <a id=\"42\">Check missing data<\/a>  \n\nLet's check if there is any missing data.","1576a510":"# <a id=\"6\">Summary & Conclusion<\/a> ","c6b46f8b":"## <a id='55'>Calculate the Revenue<\/a>","83a537a8":"#### Drop all Rows with negative review in 'property_type_df' dataframe","2a632a2e":"### FLATTEN PIVOT 'pvt_avgreviews'","539448e6":"### Now Calculate \"avg_rating\" of positive reviews","c588170c":"#### Flatten pivot table"}}