{"cell_type":{"436bc37b":"code","297e68d3":"code","4b5d6500":"code","9835621f":"code","f7a2952b":"code","01dfa3c8":"code","3ecc2141":"code","08cd68ab":"code","3a32d83a":"code","d547afeb":"code","559280b5":"code","9f8756af":"code","aff0e609":"code","6ed3275c":"code","645c717d":"code","1a258b87":"code","33db14f9":"code","0b7e05c8":"code","a37d927a":"code","65d231ba":"code","cc2fcd68":"code","3ec0f41b":"code","2d9fd376":"code","92aac076":"code","15e432bf":"markdown","1d3c386c":"markdown","464c9fdd":"markdown","7c0e69be":"markdown","2613e488":"markdown","078b3faf":"markdown","1d104e17":"markdown","827577c0":"markdown","e3a6dac0":"markdown","094cb619":"markdown","1e47cb6f":"markdown","56ada6f6":"markdown","d93c3ac5":"markdown","f78adefd":"markdown"},"source":{"436bc37b":"import pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf\nfrom tensorflow import keras","297e68d3":"dataset = pd.read_csv(r'..\/input\/cat-in-the-dat\/train.csv')\ntestset = pd.read_csv(r'..\/input\/cat-in-the-dat\/test.csv')","4b5d6500":"X= dataset.loc[:,:'month']\nY= dataset.loc[:,'target']","9835621f":"alldata = pd.concat((X,testset))\nalldata.drop('id', axis=1, inplace=True)","f7a2952b":"print(str(X.shape[0])+\" rows of X\")\nprint(str(testset.shape[0])+\" rows of testSet\")\nprint(str(alldata.shape[0])+\" rows of Combined\")","01dfa3c8":"ohcInstance=OneHotEncoder()\nohcInstance.fit(alldata)\nalldata=ohcInstance.transform(alldata)","3ecc2141":"print(\"After one hot encoding no. of columns become \"+str(alldata.shape[1]))","08cd68ab":"X=alldata[0:300000]\nTest_X=alldata[300000:]","3a32d83a":"model = keras.models.Sequential([\n                                 tf.keras.layers.Dense(512,input_dim=X.shape[1],activation='relu'),\n                                tf.keras.layers.Dense(128,activation='relu'),\n                                 tf.keras.layers.Dense(64,activation='relu'),\n                                  tf.keras.layers.Dense(1, activation='sigmoid')\n])","d547afeb":"model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])","559280b5":"model.summary()","9f8756af":"history_OneHot=model.fit(X, np.asarray(Y).astype(np.int32), epochs=11, batch_size=10000, verbose=1)\n","aff0e609":"predictions = model.predict(Test_X)\nsubmit = pd.concat([testset['id'], pd.Series(predictions[:,0]).rename('target')], axis=1)\nsubmit.to_csv('submission.csv', index=False, header=True)","6ed3275c":"submit","645c717d":"dataset = pd.read_csv(r'..\/input\/cat-in-the-dat\/train.csv')\n\nX= dataset.iloc[:,1:24].values\nY= dataset.iloc[:,24].values\n","1a258b87":"def labelEncode(listData,index):\n    labelEncoder=LabelEncoder()\n    listData[:,index]=labelEncoder.fit_transform(listData[:,index]) ","33db14f9":"dataset.iloc[:,1:24]","0b7e05c8":"from sklearn.preprocessing import LabelEncoder\nfor i in range(3,15):\n    labelEncode(X,i)\nfor i in range(16,21):\n    labelEncode(X,i)\n","a37d927a":"model = keras.models.Sequential([\n                                 tf.keras.layers.Dense(512,input_dim=X.shape[1],activation='relu'),\n                                tf.keras.layers.Dense(128,activation='relu'),\n                                 tf.keras.layers.Dense(64,activation='relu'),\n                                  tf.keras.layers.Dense(1, activation='sigmoid')\n])","65d231ba":"model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])","cc2fcd68":"history_label=model.fit(np.asarray(X).astype(np.int32), np.asarray(Y).astype(np.int32), epochs=11, batch_size=10000, verbose=1)","3ec0f41b":"# PLOT LOSS AND ACCURACY\n%matplotlib inline\n\nimport matplotlib.image  as mpimg\nimport matplotlib.pyplot as plt\noneacc=history_OneHot.history['acc']\nlabelacc=history_label.history['acc']\noneloss=history_OneHot.history['loss']\nlabelloss=history_label.history['loss']","2d9fd376":"epochs=range(len(oneacc)) # Get number of epochs\n\nplt.plot(epochs, oneacc, 'b', \"Label Encoding Accuracy\")\nplt.plot(epochs, labelacc, 'r', \"OneHotEncoding Accuracy\")\nplt.title('Difference between accuracy of Label and OneHotEncoder')\nplt.figure()\n\n\n","92aac076":"plt.plot(epochs, oneloss, 'r', \"Label Encoding  Loss\")\nplt.plot(epochs, labelloss, 'b', \"OneHotEncoding Loss\")\nplt.title('Difference between Loss of Label and OneHotEncoder')\nplt.figure()","15e432bf":"Seperating the training set into Input and target.","1d3c386c":"Combining data for **OneHotEncoding**","464c9fdd":"if We observe the dataset only columns 3-14 and 16-21 are having **Categorical Data**.\nHence, Applying encoding on that data only.","7c0e69be":"Reducing back to X and Test_X(testSet).","2613e488":"Read **training and testing datasets** form csv as a dataframe","078b3faf":"# **Model Fitting**\nIn order to avoid overfitting no. of epochs and batchsize are tweaked by hit and trial to get highest accuracy and minimum loss.","1d104e17":"# Writing in to the output file\nie .\/submission.csv","827577c0":"# Defining the Model\nUsed Multilayer perceptron. \nSince, Our problem is kind of a logistic regression problem. A single layered perceptron would have done the work. \nBut to increase the accuracy, multiple layers are used(for early convergence also) and  non-linearity is introduced by 'RELU' activation functions. \n","e3a6dac0":"# Training same model,But Label Encoding is Used.\n**To prove our comparison** ","094cb619":"After Onehot encoding we get roughly 16000 columns,form 24.","1e47cb6f":"As you can see in the above plot, Loss of OneHotEncoder is very less from the initial Epoch, which in the case of Labelled Encoder will take a large no. of epochs to reach so.\n","56ada6f6":"As you can see in the above plot, Accuracy of OneHotEncoder approches 1 nearby 6th epoch. Which in the case of Labelled Encoder has very low slope so will take more no. of epochs to reach.","d93c3ac5":"# Applying OneHotEncoding\nI chose One Hot Encoding because Label Encoding was giving lesser score(0.71) and loss was greater in the given no. of epochs ie. model was less accurate.\n\n<a href='#comparison'>**See comparison**<\/a>","f78adefd":"# Label Encoding vs One Hot Encoding\n<a id=\"comparison\">**The Following is the comparison of Accuracy and Loss for Both the techniques.**<\/a>"}}