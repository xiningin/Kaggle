{"cell_type":{"4e599f4c":"code","41e6ccf2":"code","03255779":"code","73aff8d0":"code","92f00038":"code","42bfe2f1":"code","933ddfa0":"code","a9df141f":"code","d64f9319":"code","809bdc31":"code","270fd382":"code","dd5ac3bb":"code","a58a756d":"code","84fb4c3e":"code","91edbc0e":"code","82e5f61b":"code","7fa435b0":"code","2fb85cb2":"markdown","529e4c9c":"markdown"},"source":{"4e599f4c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","41e6ccf2":"data=pd.read_csv('..\/input\/ipldata\/matches.csv')\ndata.head()","03255779":"print('Total no. of Cities: ', data['city'].nunique())\nprint('Total no. of Teams: ', data['team2'].nunique())\nprint('Total no. of Seasons: ', data['season'].nunique())\nprint('Total no. of Venue: ', data['venue'].nunique())","73aff8d0":"print('Total number of players who won player of the match: ', data['player_of_match'].nunique())\n\nprint('players who won player of the match title most of time: ')\ndata['player_of_match'].value_counts().head(10)","92f00038":"from ipywidgets import interact\n\n@interact\ndef best_players(season = list(data['season'].unique()),team = list(data['team1'].unique())):\n    a = data[(data['season'] == season) & (data['team1'] == team)]\n    return a['player_of_match'].value_counts()","42bfe2f1":"# Lets find all the Umpires who had umpired for the Matches\n\nump_1 = set(data['umpire1'])               \nump_2 = set(data['umpire2'])\nump_3 = set(data['umpire3'])\n\nump = ump_1.intersection(ump_2)\nump = ump.intersection(ump_3)\n\nprint(\"The Number of Umpires: \", len(ump))\nprint(\"Names of The Umpires :\", ump)","933ddfa0":"# lets see the types of toss decisions\n\ndata['toss_decision'].value_counts()","a9df141f":"# lets see the types of matches Results\n\ndata['result'].value_counts()","d64f9319":"# lets analyze the winning scores\n\nprint(data[['win_by_runs', 'win_by_wickets']].describe())\n\nimport matplotlib.pyplot as plt\nplt.rcParams['figure.figsize'] = (10, 3)\ndata[['win_by_runs', 'win_by_wickets']].describe().plot(kind = 'bar')\nplt.show()","809bdc31":"# lets check the Team who lost the Match by 146 Runs\n\ndata[data['win_by_runs'] == 146][['season','team1', 'team2','winner','win_by_runs','player_of_match']]","270fd382":"# lets also check the Teams who lost the Match by all the 10 Wickets\ndata[data['win_by_wickets']==10][['season','team1', 'team2','winner','win_by_wickets','player_of_match']]","dd5ac3bb":"#tie and no result matches\ndata[(data['result']=='tie')|(data['result']=='no result')][['date','team1','team2', 'result', 'winner']]","a58a756d":"# lets check the Number matches in each Season\nimport seaborn as sns\nplt.style.use('fivethirtyeight')\nplt.rcParams['figure.figsize'] = (12, 5)\nsns.countplot(x = data['season'].sort_values(), palette = 'viridis')\nplt.title('Number matches in each Season', fontsize = 20)\nplt.show()","84fb4c3e":"# lets find out in which cities the each IPLseason matches were held out\n@interact\ndef match_city(season=list(data['season'].unique())):\n    a=data[(data['season']==season)]\n    a=pd.DataFrame(a['city'].value_counts())\n    return a.style.background_gradient(cmap='plasma')\n    ","91edbc0e":"teams_matches1=pd.DataFrame(data['team1'].value_counts())\nteams_matches2=pd.DataFrame(data['team2'].value_counts())\nteam_matches=pd.DataFrame(pd.concat([teams_matches1, teams_matches2], axis=1).sum(axis=1)).reset_index()\nplt.rcParams['figure.figsize']=15,7\nsns.barplot(y=team_matches['index'], x=team_matches[0], palette = 'Wistia')\nplt.title('Each teams\\' matches count', fontsize = 25)\nplt.xlabel('count', fontsize = 20)\nplt.ylabel('teams', fontsize = 20)\nplt.show()","82e5f61b":"sns.barplot(y=data['venue'].value_counts().head(10).index, x=data['venue'].value_counts().head(10).values, palette = 'cool')\nplt.title('most matches played venues', fontsize=25)\nplt.xlabel('count', fontsize=20)\nplt.ylabel('venues',fontsize=20)\nplt.show()","7fa435b0":"# lets compare the Toss Decisions\n\nsns.countplot(data['season'].sort_values(), hue = data['toss_decision'], palette = 'plasma')\nplt.title(\"Decision to field or bat across seasons\", fontsize = 20)\nplt.xlabel(\" \")\nplt.ylabel(\" \")\nplt.show()","2fb85cb2":"Players who are all won player of the match tile so far","529e4c9c":"Let's check the total number of cities, teams, seasons, and venues associated in this data"}}