{"cell_type":{"9d5db8dd":"code","6a5c0f33":"code","4ba85ce0":"code","6ff27114":"code","f54c9a5d":"markdown"},"source":{"9d5db8dd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nimport matplotlib.pylab as plt\nimport plotly\nimport plotly.graph_objs as go\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\nfrom sklearn.linear_model import LinearRegression\nimport datetime\nimport colorlover as cl\nplt.style.use('ggplot')\ncolor_pal = [x['color'] for x in plt.rcParams['axes.prop_cycle']]\n\n# Format the dataa\ndf = pd.read_csv('..\/input\/liverpoolionpubliclb\/liverpool-ion-switching-publicleaderboard_05102020.csv')\ndf['SubmissionDate'] = pd.to_datetime(df['SubmissionDate'])\ndf = df.set_index(['TeamName','SubmissionDate'])['Score'].unstack(-1).T\ndf.columns = [name for name in df.columns]\n\nFIFTEENTH_SCORE = df.max().sort_values(ascending=False)[15]\nFIFTYTH_SCORE = df.max().sort_values(ascending=False)[50]\nTOP_SCORE = df.max().sort_values(ascending=False)[0]","6a5c0f33":"# Scores of top teams over time\nplt.rcParams[\"font.size\"] = \"12\"\nALL_TEAMS = df.columns.values\nALL_TEAMS = [x for x in ALL_TEAMS if type(x) == str]\ndf[ALL_TEAMS].ffill() \\\n    .T.sample(1000).T \\\n    .plot(figsize=(20, 10),\n                           color=color_pal[0],\n                           legend=False,\n                           alpha=0.05,\n                           ylim=(0.92, 0.947),\n                           title='All Teams Public LB Scores over Time')\n#df.ffill().max(axis=1).plot(color=color_pal[1], label='1st Place Public LB', legend=True)\nplt.show()","4ba85ce0":"team_over_time = df.ffill() \\\n    .count(axis=1)\n\nlr = LinearRegression()\n_ = lr.fit(np.array(pd.to_numeric(team_over_time.index).tolist()).reshape(-1, 1),\n           team_over_time.values)\n\nteamcount_df = pd.DataFrame(team_over_time)\n\nteamcount_pred_df = pd.DataFrame(index=pd.date_range('04-20-2020','05-29-2020'))\nteamcount_pred_df['teamcount_predict'] = lr.predict(np.array(pd.to_numeric(teamcount_pred_df.index).tolist()).reshape(-1, 1))\n\nlr = LinearRegression()\n_ = lr.fit(np.array(pd.to_numeric(team_over_time[-1000:].index).tolist()).reshape(-1, 1),\n           team_over_time[-1000:].values)\n\nteamcount_pred_df['teamcount_predict_recent'] = lr.predict(np.array(pd.to_numeric(teamcount_pred_df.index).tolist()).reshape(-1, 1))\n\nplt.rcParams[\"font.size\"] = \"12\"\nax =df.ffill() \\\n    .count(axis=1) \\\n    .plot(figsize=(20, 8),\n          title='Forecasting the Final Number of Teams',\n         color=color_pal[5], lw=5,\n         xlim=('02-29-2020','05-29-2020'),\n         label='Acutal Team Count by Date')\nax.set_ylabel('Number of Teams')\nteamcount_pred_df['teamcount_predict'].plot(ax=ax, style='.-.', alpha=0.5, label='Regression Using All Data')\nteamcount_pred_df['teamcount_predict_recent'].plot(ax=ax, style='.-.', alpha=0.5, label='Regression Using last 1000 observations')\nplt.legend()\nplt.axvline(pd.to_datetime('05-18-2020'), color='orange', linestyle='-.')\nplt.text(pd.to_datetime('05-18-2020'), 500,'Merger Deadline',rotation=-90)\nplt.axvline(pd.to_datetime('05-25-2020'), color='orange', linestyle='-.')\nplt.text(pd.to_datetime('05-25-2020'), 500,'Final Deadline',rotation=-90)\nplt.show()","6ff27114":"import warnings\nimport matplotlib.cbook\nwarnings.filterwarnings(\"ignore\",category=matplotlib.cbook.mplDeprecation)\nplt.rcParams[\"font.size\"] = \"10\"\nn_weeks = (datetime.date(2020, 5, 10) - datetime.date(2020, 2, 27)).days \/ 7 # Num days of the comp\nn_weeks = int(n_weeks)\n#n_weeks = 5\nfig, axes = plt.subplots(n_weeks, 1, figsize=(15, 20), sharex=True)\n#plt.subplots_adjust(top=8, bottom=2)\nfor x in range(n_weeks):\n    date2 = df.loc[df.index.date == datetime.date(2020, 2, 28) + datetime.timedelta(x*7+1)].index.min()\n    num_teams = len(df.ffill().loc[date2].dropna())\n    max_cutoff = df.ffill().loc[date2] < 5\n#     df.ffill().loc[date2].loc[max_cutoff].plot(kind='hist',\n#                                bins=500,\n#                                ax=axes[x],\n#                                title='{} ({} Teams)'.format(date2.date().isoformat(),\n#                                                             num_teams),\n#                                               xlim=(0.93, 0.95))\n    df.ffill().loc[date2].loc[max_cutoff] \\\n        .where(df.ffill().loc[date2].loc[max_cutoff] > 0.9) \\\n        .dropna().plot(kind='hist', bins=100, ax=axes[x],\n                       title='{} ({} Teams)'.format(date2.date().isoformat(), num_teams))\n#     pd.Series(df.ffill().loc[date2].loc[max_cutoff] \\\n#               .round(4) \\\n#               .value_counts()) \\\n#     .sort_index() \\\n#     .plot(ax=axes[x],\n#           kind='bar',\n#           title='{} ({} Teams)'.format(date2.date().isoformat(), num_teams))\n    y_axis = axes[x].yaxis\n    y_axis.set_label_text('')\n    y_axis.label.set_visible(False)\n    axes[x].grid(False)","f54c9a5d":"# Liverpool Ion Public Leaderboard Tracking"}}