{"cell_type":{"53664dc8":"code","4b623944":"code","c6fe9ff5":"code","0cb0c87d":"code","95b56fc7":"code","1413f9ef":"code","769f91a5":"code","169b6e38":"code","5a8becca":"code","6afda6a9":"code","9fc382f2":"code","1aa76b89":"code","af600065":"code","19586604":"code","8565cc30":"code","959c3997":"code","0fb43509":"code","1d9d3864":"code","b57c96ed":"code","9a94b974":"code","0e932359":"code","c89734ec":"code","652a3444":"code","5bf4cc2e":"code","41db57ba":"code","9bb154bd":"code","2489d562":"code","72dfad10":"code","30766a15":"code","531ed8df":"code","43bd6e77":"code","e12aa09f":"code","cc7ddc67":"code","85820955":"code","ccec4c0f":"code","ac2a271f":"code","523e7a54":"code","f6044b84":"code","159a48d4":"markdown","4bdb4c25":"markdown","d9eafc45":"markdown","35f305da":"markdown","91c42430":"markdown","427689f9":"markdown","baee82a5":"markdown","7ce363cb":"markdown","9646f581":"markdown","1ab06544":"markdown","9f49b4d2":"markdown","b2917838":"markdown","1a2488f8":"markdown","fdb89dbe":"markdown","af098a9d":"markdown"},"source":{"53664dc8":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4b623944":"items1 = pd.read_csv('..\/input\/item_properties_part1.csv')\nitems2 = pd.read_csv('..\/input\/item_properties_part2.csv')\nitems = pd.concat([items1, items2])\nitems.head(10)","c6fe9ff5":"items.shape","0cb0c87d":"import datetime\ntimes =[]\nfor i in items['timestamp']:\n    times.append(datetime.datetime.fromtimestamp(i\/\/1000.0)) ","95b56fc7":"items['timestamp'] = times","1413f9ef":"items.head(10)","769f91a5":"#loading the event dataset\n\nevents = pd.read_csv('..\/input\/events.csv')","169b6e38":"events.head(10)","5a8becca":"events.shape","6afda6a9":"print(events['event'].value_counts())\nsns.countplot(x= 'event', data=events, palette=\"pastel\")","9fc382f2":"data = events.event.value_counts()\nlabels = data.index\nsizes = data.values\nexplode = (0, 0.15, 0.15)  # explode 1st slice\nplt.subplots(figsize=(8,8))\n# Plot\nplt.pie(sizes, explode=explode, labels=labels,autopct='%1.1f%%', shadow=False, startangle=0)\n \nplt.axis('equal')\nplt.show()","1aa76b89":"category_tree = pd.read_csv('..\/input\/category_tree.csv')","af600065":"category_tree.head(10)","19586604":"items.loc[(items.property=='categoryid')&(items.value == '1016')].sort_values('timestamp').head()","8565cc30":"# all unique visitors\nall_customers = events['visitorid'].unique()\nprint(\"Unique visitors:\", all_customers.size)\n\n# all visitors\nprint('Total visitors:', events['visitorid'].size)","959c3997":"customer_purchased = events[events.transactionid.notnull()].visitorid.unique()\ncustomer_purchased.size","0fb43509":"items_new = items.loc[items.property.isin(['categoryid', 'available']), :]\nprint(\"items with categoryid and available as propery:\", items_new.size)\nitems_new.head(20)","1d9d3864":"#grouping itemid by its event type and creating list of each of them\ngrouped = events.groupby('event')['itemid'].apply(list)\ngrouped","b57c96ed":"import operator\nviews = grouped['view']\n# creating dictionary for key value pair \ncount_view ={}\n#since views is a list, we will convert it into numpy array for further manipulations\nviews = np.array(views[:])\n#counting uniques values of views of this numpy views array\nunique, counts = np.unique(views, return_counts=True)\n# converting unique and counts as a dictionay with key as unique and value as counts\ncount_view = dict(zip(unique, counts))\n#sorting the dictionary\nsort_count_view = sorted(count_view.items(), key = operator.itemgetter(1), reverse = True)\n# keeping number of unique views on X-axis\nx = [i[0] for i in sort_count_view[:7]]\n# keeping count number of views on Y-axis\ny = [i[1] for i in sort_count_view[:7]]\nsns.barplot(x, y, order=x, palette=\"rocket\")","9a94b974":"addtocart = grouped['addtocart']\n# creating dictionary for key value pair \ncount_addtocart ={}\n#since addtocart is a list, we will convert it into numpy array for further manipulations\naddtocart = np.array(addtocart[:])\n#counting uniques values of addtocart items of this numpy addtocart array\nunique, counts = np.unique(addtocart, return_counts=True)\n# converting unique and counts as a dictionay with key as unique and value as counts\ncount_addtocart = dict(zip(unique, counts))\n#sorting the dictionary\nsort_count_addtocart = sorted(count_addtocart.items(), key = operator.itemgetter(1), reverse = True)\n# keeping number of unique views on X-axis\nx = [i[0] for i in sort_count_addtocart[:7]]\n# keeping count number of views on Y-axis\ny = [i[1] for i in sort_count_addtocart[:7]]\nsns.barplot(x, y, order=x, palette=\"pastel\")","0e932359":"transaction = grouped['transaction']\n# creating dictionary for key value pair \ncount_transaction ={}\n#since addtocart is a list, we will convert it into numpy array for further manipulations\ntransaction = np.array(transaction[:])\n#counting uniques values of addtocart items of this numpy addtocart array\nunique, counts = np.unique(transaction, return_counts=True)\n# converting unique and counts as a dictionay with key as unique and value as counts\ncount_transaction = dict(zip(unique, counts))\n#sorting the dictionary\nsort_count_transaction = sorted(count_transaction.items(), key = operator.itemgetter(1), reverse = True)\n# keeping number of unique views on X-axis\nx = [i[0] for i in sort_count_transaction[:7]]\n# keeping count number of views on Y-axis\ny = [i[1] for i in sort_count_transaction[:7]]\nsns.barplot(x, y, order=x, palette=\"vlag\")","c89734ec":"#analyzing 461686 itemid\nevents.loc[(events.itemid==461686)]","652a3444":"# first - lets create a list of visitors who made a purchase\ncustomer_purchased = events[events.transactionid.notnull()].visitorid.unique()\n\n#lets create a list of purchased items\npurchased_items = []\n\nfor customer in customer_purchased:\n    purchased_items.append(list(events.loc[(events.visitorid == customer) & (events.transactionid.notnull())].itemid.values))","5bf4cc2e":"purchased_items[:7]","41db57ba":"def recommend_items(item_id, purchased_items):\n    recommendation_list =[]\n    for x in purchased_items:\n        if item_id in x:\n            recommendation_list +=x\n    \n    # remove the pass item from the list and merge the above created list\n    recommendation_list = list(set(recommendation_list) - set([item_id]))\n    return recommendation_list\n            ","9bb154bd":"recommend_items(200793, purchased_items)","2489d562":"events.head(5)","72dfad10":"from lightfm import LightFM\nfrom lightfm.evaluation import auc_score\nfrom scipy.sparse import coo_matrix\nfrom sklearn import preprocessing","30766a15":"events = events.assign(date=pd.Series(datetime.datetime.fromtimestamp(i\/1000).date() for i in events.timestamp))\nevents = events.sort_values('date').reset_index(drop=True)\nevents = events[['visitorid','itemid','event', 'date']]\nevents.head(5)","531ed8df":"start_date = '2015-5-3'\nend_date = '2015-5-18'\nfd = lambda x: datetime.datetime.strptime(x, '%Y-%m-%d').date()\nevents = events[(events.date >= fd(start_date)) & (events.date <= fd(end_date))]","43bd6e77":"split_point = np.int(np.round(events.shape[0]*0.8))\nevents_train = events.iloc[0:split_point]\nevents_test = events.iloc[split_point::]\nevents_test = events_test[(events_test['visitorid'].isin(events_train['visitorid'])) & (events_test['itemid'].isin(events_train['itemid']))]","e12aa09f":"id_cols=['visitorid','itemid']\ntrans_cat_train=dict()\ntrans_cat_test=dict()\n\nfor k in id_cols:\n    cate_enc=preprocessing.LabelEncoder()\n    trans_cat_train[k]=cate_enc.fit_transform(events_train[k].values)\n    trans_cat_test[k]=cate_enc.transform(events_test[k].values)","cc7ddc67":"ratings = dict()\n\ncate_enc=preprocessing.LabelEncoder()\nratings['train'] = cate_enc.fit_transform(events_train.event)\nratings['test'] = cate_enc.transform(events_test.event)","85820955":"n_users=len(np.unique(trans_cat_train['visitorid']))\nn_items=len(np.unique(trans_cat_train['itemid']))","ccec4c0f":"rate_matrix = dict()\nrate_matrix['train'] = coo_matrix((ratings['train'], (trans_cat_train['visitorid'], trans_cat_train['itemid'])), shape=(n_users,n_items))\nrate_matrix['test'] = coo_matrix((ratings['test'], (trans_cat_test['visitorid'], trans_cat_test['itemid'])), shape=(n_users,n_items))","ac2a271f":"model = LightFM(no_components=10, loss='warp')\nmodel.fit(rate_matrix['train'], epochs=100, num_threads=8)","523e7a54":"auc_score(model, rate_matrix['train'], num_threads=8).mean()","f6044b84":"auc_score(model, rate_matrix['test'], num_threads=10).mean()","159a48d4":"Checking the most TRANSACION itemids","4bdb4c25":"lets import required libraries","d9eafc45":"Category IDs explain the relationship of different products with each other e.g. Category ID 1016 is a child of Parent ID 213.\n\nBelow shows the number of items under category id 1016","35f305da":"Now lets see the number of customers who acutally bought something","91c42430":"Lets start modeling using **LightFM**","427689f9":"lets define the function that would show items that were bought together by the same customer","baee82a5":"Lets see unique and total visitors from event datasets","7ce363cb":"Lets recommend items from a customer who previously bought ,when a visitor is viewing item_id = 200793","9646f581":"now lets see how many items has categoyid or available as property","1ab06544":"Lets see the most ADDTOCART items","9f49b4d2":"Lets analyze events types","b2917838":"Now lets check the most VIEWED items ","1a2488f8":"This shows that out of 1407580 unique visitors, 11719 visitors made at least a single purchase","fdb89dbe":"Now lets offer visitor a list of items of what previous visitors bought TOGETHER with the item they are currently viewing. This way we can guide them in their buying journey","af098a9d":"Lets see category tree dataset"}}