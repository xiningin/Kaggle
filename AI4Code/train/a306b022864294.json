{"cell_type":{"8a6f76e3":"code","aebd17d5":"code","708abbcc":"code","7079e964":"code","8cdd63f9":"code","8c73cb46":"code","a30cf443":"code","9ab8ea00":"code","f6bb5566":"code","9b266d24":"code","62a059db":"code","5316b288":"code","86ed4b07":"code","bb7f1dad":"code","ce43ccc1":"code","46f26d4a":"code","047bcf50":"code","05c00bba":"code","a1499929":"code","e1ee9a43":"code","3557e91a":"code","3e9bd1cf":"code","c543fccc":"code","0ff5992d":"code","3cfa8a82":"code","317c97f2":"code","15274979":"code","84105cee":"code","a5dcddb4":"code","fac7f9c6":"code","8699034e":"code","ef03f674":"code","7a4057e3":"code","49241f2a":"code","b53d9c32":"code","b7dbdce7":"code","9088a362":"code","556ef7ec":"code","12eaa9d2":"code","e90073e6":"code","4ca1bed5":"code","12fea82b":"code","34ae5dfc":"code","01dde3f0":"code","126efb32":"code","c123f7cf":"code","4a19f3d9":"code","d66b3a7a":"code","73b6c56d":"markdown","665d6dc9":"markdown","18a15bce":"markdown","5f67595d":"markdown","e3a923d1":"markdown","f7b16e8f":"markdown","41b3350b":"markdown","899abd29":"markdown","cdcc97e5":"markdown","05a9c502":"markdown","1ca6be3e":"markdown","220453f9":"markdown","c498d135":"markdown","793924c5":"markdown","e112269c":"markdown","d327a602":"markdown","68a7f8b4":"markdown","85202c54":"markdown","68490586":"markdown","d9bcd8b6":"markdown","96c26be6":"markdown"},"source":{"8a6f76e3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","aebd17d5":"import time\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.decomposition import TruncatedSVD\nimport umap\n","708abbcc":"l = os.listdir('\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/')\nl\nl = list( filter(lambda x: 'sciPlex2' in x, l ) )\nprint(l)\n'''\n['GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_hashSampleSheet.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_hashTable.out.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n 'GSM4150377_sciPlex2_pData.txt']\n'''\ndirname =  '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/'\nll = list( filter(lambda x: 'gene.annotations' in x, l ) )\nprint(ll)\ngenes = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\n\ndisplay(genes)\nll = list( filter(lambda x: 'cell.annotations' in x, l ) )\nprint(ll)\ncells = pd.read_csv(dirname + ll[0], sep = '\\t', header = None)\ndisplay(cells)\n\nll = list( filter(lambda x: 'hashTable' in x, l ) )\nprint(ll)\ninfo_dict_cells2drugs = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(info_dict_cells2drugs)\ns = set(cells[0]) & set( info_dict_cells2drugs[1] ) \nprint( len(s), len(cells) )\n\nll = list( filter(lambda x: 'hashSampleSheet' in x, l ) )\nprint(ll)\nhashSampleSheet = pd.read_csv(dirname + ll[0],sep = '\\t', header = None)\ndisplay(hashSampleSheet)\n\nll = list( filter(lambda x: 'pData' in x, l ) )\nprint(ll)\npData = pd.read_csv(dirname + ll[0],sep = ' ')# , header = None)\ndisplay(pData)\n\n\n","7079e964":"print()\nt0 = time.time()\nll = list( filter(lambda x: 'count.matrix' in x, l ) )\nexpression_matrix_in_sparse_form = pd.read_csv( dirname + ll[0], sep = '\\t', header = None)\nprint(np.round(time.time() - t0,2),'seconds passed' )\nprint('Each row in file has format - (i,j, value) - that means that count_matrix[i,j]=value')\nexpression_matrix_in_sparse_form[0] -= 1\nexpression_matrix_in_sparse_form[1] -= 1\ndisplay(expression_matrix_in_sparse_form)\n\nfrom scipy.sparse import csr_matrix\nm = csr_matrix((expression_matrix_in_sparse_form[2].values, (expression_matrix_in_sparse_form[0].values, \n                     expression_matrix_in_sparse_form[1].values))) # , shape=(len(genes), len(cells) ))#.toarray()\n\nprint(m.shape)\n","8cdd63f9":"m.shape\nm = m.transpose()\nm.shape","8c73cb46":"pData.head(2)","a30cf443":"df = pd.DataFrame(index = pData.index, data = range(len(pData) ), columns = ['i'] )\ndf['n.umi'] = pData['n.umi']\ndf['Size_Factor'] = pData['Size_Factor']\n\nf = lambda x: x if not isinstance(x, str)  else x.split('_')[0]\ndf['drug'] = pData['top_oligo'].apply(f )\nf = lambda x: x if not isinstance(x, str)  else float(x.split('_')[1])\ndf['dose'] = pData['top_oligo'].apply(f )\nprint(np.sort( df['dose'].unique()), df['dose'].isnull().sum() )\nprint(( df['dose'].value_counts()) )\n\n\nm2 = m != 0\ndf['count genes expressed'] = np.array( m2.sum(axis = 1) ).ravel()\n\nl = np.array( [ x.startswith('MT-')  for x in genes[1]], dtype = bool )\nmask_MT_genes = l\nprint('Count mitochondrial genes:', l.sum(), ' out of: ', len(genes) )\nmt_expression_sum = np.array(m[:,mask_MT_genes].sum(axis=1)).ravel()\nnon_mt_expression_sum = np.array( m[:,~mask_MT_genes].sum(axis=1)).ravel()\nratio_mt2non_mt = (1+mt_expression_sum)\/(1+non_mt_expression_sum)\ndf['ratio mt2non_mt'] = ratio_mt2non_mt\n\n\ndf","9ab8ea00":"df.describe()","f6bb5566":"# Consistency check. Check that 'n_umi' is exactly the m.sum(axis = 1)\n(m.sum(axis = 1).ravel() != df['n.umi'].values ).sum()","9b266d24":"df['drug'].fillna('NAN',inplace = True)\ndf['dose'].fillna('NAN',inplace = True)\ndf.groupby( ['drug','dose'])['dose'].count()","62a059db":"\nif 1:\n    m2 = m.copy()\n    m2.data = np.log(1+m2.data)\n    m2 = m2.multiply( 1\/m2.sum(axis=1))\n    m2 = m2.tocsr()\n    str_preproc = 'LogThenNorm'\nelse:\n    m2 = m.multiply( 1\/m.sum(axis=1))\n    m2 = m2.tocsr()\n    m2.data = np.log(1+m2.data)\n    str_preproc = 'NormThenLog'\n\nprint(str_preproc)#  \nprint(m2[:4,:4].toarray())\nprint(m2.sum(axis = 1)[:4])\n    ","5316b288":"lg = list(genes[1].values)\nlen(lg), len(set(lg))","86ed4b07":"flag_use_mygene = 1\nif flag_use_mygene:\n    !pip install mygene\n    import mygene\n    mg = mygene.MyGeneInfo()","bb7f1dad":"fn  = '\/kaggle\/input\/singlecell-rnaseq-exposed-to-multiple-compounds\/cell_cycle_genes_reactome_extended.txt'\nd = pd.read_csv(fn,header = None)\ncell_cycle_genes_reactome_extended = d[0].values\nlen(cell_cycle_genes_reactome_extended)","ce43ccc1":"from scipy.stats import chi2_contingency\ndef get_independence_pvalue_chi2(v1,v2, verbosity = 0 ):\n    tbl = np.zeros( (2,2) )\n    tbl[0,0] = (( v1 == 0 ) & (v2 == 0) ).sum()\n    tbl[0,1] = (( v1 == 0 ) & (v2 != 0) ).sum()\n    tbl[1,0] = (( v1 != 0 ) & (v2 == 0) ).sum()\n    tbl[1,1] = (( v1 != 0 ) & (v2 != 0) ).sum()\n\n    if verbosity > 0:\n        print( tbl )\n    g, p, dof, expctd = chi2_contingency(tbl, lambda_=\"log-likelihood\")\n    return p\n    \np = get_independence_pvalue_chi2(np.random.randint(0,2,size=1000) ,np.random.randint(0,2,size=1000) )\np","46f26d4a":"cc_genes = pd.read_csv('https:\/\/raw.githubusercontent.com\/hbc\/tinyatlas\/master\/cell_cycle\/Homo_sapiens.csv')\ncc_genes","047bcf50":"flag_use_mygene = 1\nif flag_use_mygene:\n    !pip install mygene\n    import mygene\n    mg = mygene.MyGeneInfo()\n    \nfor i in range(len(cc_genes)):\n    ensembl_id = cc_genes['geneID'].iat[i] # genes[0].iat[IX1].split('.')[0]\n    ix = cc_genes.index[i]\n    g_inf = mg.getgene(ensembl_id )\n    cc_genes.loc[ix,'symbol'] = g_inf['symbol']    \n    \ncc_genes    ","05c00bba":"mask = cc_genes['phase'] == 'G2\/M'\nprint(mask.sum())\nprint( list( cc_genes['symbol'][mask] ) )\nmask = cc_genes['phase'] == 'S'\nprint(mask.sum())\nprint( list( cc_genes['symbol'][mask] ) )\n\n","a1499929":"list_selected_genes = list(  cc_genes['symbol'] )\n\n#['HDAC1', 'HDAC2', 'HDAC3', 'HDAC4', 'HDAC5', 'HDAC6', 'HDAC7', 'HDAC8', \n#                       'HDAC9', 'HDAC10', 'HDAC11'] + ['SIRT1', 'SIRT2', 'SIRT3', 'SIRT4', 'SIRT5', 'SIRT6', 'SIRT7']\n#[ 'CCNE1', 'CCNE2', 'CDK2'] +  ['CCNB1','CCNB2','CCNB3'] + ['CCNA1', 'CCNA2','CCNF', 'CDK1'] + ['CCND1', 'CCND2', 'CCND3']\n    \nl = list_selected_genes\nt = pd.DataFrame()\nfor g in l:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    \n#display( t.corr() )\n\nst = pd.DataFrame()\nfor g in l : # [ 'CCNE1', 'CCNE2']: #  list_selected_genes:\n    #print(g)\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        st.loc[g,'Found'] = False\n        continue\n    st.loc[g,'Found'] = True\n    IX1 = IX1[0]\n    v = m[:,IX1].toarray().ravel()\n\n    st.loc[g,'Expression sum'] = v.sum()\n    st.loc[g,'Count Expressed cells'] = (v != 0 ).sum()\n    v = m2[:,IX1].toarray().ravel()\n    st.loc[g,'Expression sum normed'] = (v ).sum()\n    st.loc[g,'In cc reactome'] = g in cell_cycle_genes_reactome_extended\n    \n\nst.sort_values('Expression sum', ascending = False, inplace = True)\nst.head(20)\n\nt0 = time.time()\n\nfor g in list_selected_genes:\n    #print(g)\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        st.loc[g,'Found'] = False\n        continue\n    st.loc[g,'Found'] = True\n    IX1 = IX1[0]\n    ensembl_id = genes[0].iat[IX1].split('.')[0]\n    g_inf = mg.getgene(ensembl_id )\n    st.loc[g,'Count Pubmed'] = len( g_inf.get('generif',[]) ) #  g_inf.get('summary','No summary') )\n    st.loc[g,'Location'] = g_inf.get('map_location', np.nan ) #  g_inf.get('summary','No summary') )\n    st.loc[g,'Name'] = g_inf.get('name', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n    st.loc[g,'Summary'] = g_inf.get('summary', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n    if 0:\n        print( len( g_inf['generif']) )\n        print( g_inf['symbol'])\n        print( g_inf['map_location'])\n        print( 'alias', g_inf.get( 'alias','No' ) )\n        print( 'name', g_inf['name'])\n        print( g_inf['other_names'])\n        print()\n\nprint( time.time() - t0, 'seconds passed')\nst.head(20)","e1ee9a43":"g = 'HIST1H2AC' # S-phase of cell cycle expressed gene\n\ndef get_top_correlated_genes(g, n_top_expressed2look = 1000 , n_correlations2return = 3):\n    import time\n\n    IX1 = np.where( genes[1] == g)[0][0]\n    v1 = m2[:,IX1].toarray().ravel()\n\n    s = np.asarray( m.sum(axis = 0)).ravel()\n    IX = np.argsort(s)[::-1][:n_top_expressed2look] # indices for top expressed\n    v2 = m2[:,IX].toarray() # convert top expressed to numpy array from sparse \n\n    #t0 = time.time()\n    d = pd.DataFrame()\n    d['gene'] = genes[1].values[IX]\n    if (np.abs(v1).sum() != 0):\n        cr = np.corrcoef(v1,v2.T)[0,:][1:] # some strange reindex to extract correlation vector from matrix ( I do not know why matrix her)\n        #print(time.time()-t0,'seconds passed')\n    else:\n        cr = np.ones(len(d)) * np.nan\n    d['correlation'] = cr\n    d['Abs correlation'] = np.abs(cr)\n\n    d = d.sort_values('Abs correlation', ascending = False)\n\n    str_result = ''\n    cc = 0\n    for i in range(n_correlations2return+1):\n        if d['gene'].iat[i] != g:\n            str_result += d['gene'].iat[i]\n            str_result += ' '\n            str_result += str(np.round(d['correlation'].iat[i] ,2) )\n            str_result += ' '\n            cc += 1\n        if cc >= n_correlations2return:\n            break\n    df_corr_stat = d \n    return str_result, df_corr_stat\nimport time\nt0 = time.time()\nstr_result, df_corr_stat = get_top_correlated_genes(g)\nprint(time.time() - t0,'seconds passed')\nprint( str_result )\n\nprint()\nstr_result, df_corr_stat = get_top_correlated_genes(g , n_top_expressed2look = 10000 )\nprint(time.time() - t0,'seconds passed')\nprint( str_result )","3557e91a":"t0 = time.time()\n\nfor g in list_selected_genes: # range( len(genes) ):\n    i = np.where(genes[1].values == g)[0][0] #.iat[i]\n    ensembl_id = genes[0].iat[i]\n    #i = np.where(st['gene'].values == g)\n    #IX = st.index[i]\n    \n    str_corr_info, df_corr_info = get_top_correlated_genes(g, n_top_expressed2look = 1000 , n_correlations2return = 5)\n    \n    st.loc[g,'Top Correlated'] = str_corr_info\n    \nprint(time.time()-t0,'seconds passed')    \nst.sort_values('Expression sum', ascending = False, inplace = True)\nst  ","3e9bd1cf":"t = pd.DataFrame()\nfor g in list_selected_genes:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    print(g, m[:,IX].sum(), (m[:,IX] != 0).sum() )\n# display(t.describe())\ndf_corr = t.corr()\ndisplay(  )\n\nimport time\nt0 = time.time()\n\nc = pd.DataFrame()\nfor g1 in l:\n    for g2 in l:\n        p = get_independence_pvalue_chi2(t[g1].values,t[g2].values)\n        c.loc[g1,g2] = p\n        #print(g1,g2, p , time.time()-t0,'seconds passed')\n        \nnp.round(c,3)\n","c543fccc":"np.round(df_corr,3)","0ff5992d":"np.round(c,3)\n","3cfa8a82":"cm = df_corr.values\nv = np.triu(cm,1).ravel()\nv= v[ v!= 0 ]\nplt.plot(np.sort(v),'*-')\nplt.show()","317c97f2":"plt.hist(v,bins = 50)\nplt.show()","15274979":"#correlation heatmap\nplt.figure(figsize=(10,6));\nsns.heatmap(df_corr );","84105cee":"sns.clustermap(df_corr,cmap='vlag');\n","a5dcddb4":"from scipy.stats import chi2_contingency\n\ndef get_independence_pvalue_chi2(v1,v2, verbosity = 0 ):\n    tbl = np.zeros( (2,2) )\n    tbl[0,0] = (( v1 == 0 ) & (v2 == 0) ).sum()\n    tbl[0,1] = (( v1 == 0 ) & (v2 != 0) ).sum()\n    tbl[1,0] = (( v1 != 0 ) & (v2 == 0) ).sum()\n    tbl[1,1] = (( v1 != 0 ) & (v2 != 0) ).sum()\n\n    if verbosity > 0:\n        print( tbl )\n    g, p, dof, expctd = chi2_contingency(tbl, lambda_=\"log-likelihood\")\n    return p\n    \np = get_independence_pvalue_chi2(np.random.randint(0,2,size=1000) ,np.random.randint(0,2,size=1000) )\np","fac7f9c6":"a,b = np.where( np.triu(cm,1) > 0.1 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[a[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v1 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene1 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[b[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v2 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene2 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    d.loc[i,'Correlation binarized'] = np.corrcoef(v1,v2)[0][1]\n    d.loc[i,'p-value Independence'] = get_independence_pvalue_chi2(v1,v2, verbosity = 0 )\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)\n","8699034e":"a,b = np.where( np.triu(cm,1) < -.005 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[a[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v1 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene1 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[b[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v2 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene2 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    d.loc[i,'Correlation binarized'] = np.corrcoef(v1,v2)[0][1]\n    d.loc[i,'p-value Independence'] = get_independence_pvalue_chi2(v1,v2, verbosity = 0 )\n    \nd.sort_values('Correlation Abs',ascending = False).head(30)\n","ef03f674":"\nfor i,g in enumerate(st.index[:3]) : #list_selected_genes:\n    name = st.loc[st.index[i], 'Name']\n    IX1 = np.where( genes[1] == g)[0]\n    if len(IX1) == 0:\n        continue\n    IX1 = IX1[0]\n\n    fig = plt.figure(figsize = (20,4) )\n\n    fig.add_subplot(1,2,1)\n    v = m[:,IX1].toarray().ravel()\n    plt.plot(np.sort(v))\n    plt.grid()\n    plt.title('Expression sum ' + g + '\\n '+ name)\n    plt.xlabel('genes sorted by expression sum')\n\n    fig.add_subplot(1,2,2)\n    v = m2[:,IX1].toarray().ravel()\n    plt.plot(np.sort(v))\n    plt.grid()\n    plt.title('Expression sum ' + g + '\\n '+ name)\n    plt.xlabel('genes sorted by expression sum')\n    plt.show()\n","7a4057e3":"import matplotlib.pyplot as plt\nimport seaborn  as sns\nfrom sklearn.decomposition import TruncatedSVD\nimport time\nimport umap\n\nreducer = umap.UMAP()\nstr_reducer = 'UMAP'\n#reducer = ncvis.NCVis()\n#reducer =  trimap.TRIMAP()\nsvd = TruncatedSVD( n_components=50, n_iter=7, random_state=42)\n\n\nv = np.asarray(m2.sum(axis=0)).ravel()\nIX = np.argsort(v )\n\nt00 = time.time()\nfor count_made_zeros in [10]: # range(10,100,10):\n\n    m3 = m2.copy()#  != 0 # \n    if count_made_zeros != 0:\n        #m3[:,IX[-count_made_zeros:]] = 0\n        m3 = m3[:,IX[:-count_made_zeros]] # droping columns - same as make them zeros , but does not create memory alloc prob\n\n\n    t0 = time.time()\n    r = svd.fit_transform(m3)\n    print(time.time() - t0, 'seconds passed on svd')\n    t0 = time.time()\n    r = reducer.fit_transform(r)\n    print(time.time() - t0, 'seconds passed on ', str_reducer)\n    \n    fig = plt.figure(figsize = (20,12))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['drug'].copy()\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by drug. count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n\n    c+=1; fig.add_subplot(1, 2 , c)         \n    color_by = df['dose'].copy()\n    color_by[color_by == 'NAN'] = -1\n    color_by = color_by.astype(float)\n    color_by = np.log10(2+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + ' Color by log10 of dose. count_made_zeros='  +str( count_made_zeros )+ ' Non binarized' )\n    plt.show()\n    \n    print(time.time() - t0, 'seconds passed')\n\nprint('Finished.', time.time() - t00, 'seconds passed total ')    ","49241f2a":"try:\n    list_selected_genes_ordered = list(st.index)\nexcept:\n    list_selected_genes_ordered = list_selected_genes\n    print('use all selected genes')\n    \nfor g in list_selected_genes_ordered: # [ 'CCNE1', 'CCNE2', 'CDK2']: # list_selected_genes_ordered: #'CDKN1A', 'LINC01021', 'MALAT1', 'NEAT1', 'TP53I3', 'FDXR', 'TMSB10' ]:\n    fig = plt.figure(figsize = (20,6))\n    c = 0; \n\n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g)[0][0]\n    color_by = m[:,IX1].toarray().ravel() != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2] )\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    str_info = ''\n    str_info = '\\nExpressed in '+str((m[:,IX1].toarray().ravel() != 0).sum()) + ' cells'\n    plt.title(str_reducer + '.  Color by gene '+g + str_info)#  count_made_zeros='  +str( count_made_zeros ) + ' Non binarized' )\n    \n    c+=1; fig.add_subplot(1, 2 , c)    \n    IX1 = np.where( genes[1] == g )[0][0]\n    color_by = m[:,IX1].toarray().ravel() # != 0 # ['drug'].copy()\n    #color_by = np.digitize( color_by, [1,2,3,4] )\n    color_by = np.log10(1+color_by)\n    sns.scatterplot(x=r[:,0],y=r[:,1],   hue= color_by, alpha = 0.7, marker = '.')\n    plt.title(str_reducer + '.  Color by gene '+g )#. count_made_zeros=')#   +str( count_made_zeros ) + ' Non binarized' )\n    \n    plt.show()  ","b53d9c32":"\ng = st.index[0]\n\n\nimport time\n\nIX1 = np.where( genes[1] == g)[0][0]\nprint(g,'internal number:',IX1, 'Expression', m[:,IX1].sum(), 'Count cells expressed:', (m[:,IX1]!=0 ).sum() )\nv1 = m2[:,IX1].toarray().ravel()\n\ns = np.asarray( m.sum(axis = 0)) .ravel()\nIX = np.argsort(s)[::-1][:10000]\nlen(IX)\nv2 = m2[:,IX].toarray()\nv2.shape,v1.shape\n\nt0 = time.time()\ncr = np.corrcoef(v1,v2.T)[0,:][1:]\nprint(time.time()-t0,'seconds passed')\nd = pd.DataFrame()\nd['gene'] = genes[1].values[IX]\nd['correlation'] = cr\nd['Abs correlation'] = np.abs(cr)\n\nd = d.sort_values('Abs correlation', ascending = False)\n\nfor i in range(40):\n    t = d['gene'].iat[i]\n    if t in cell_cycle_genes_reactome_extended:\n        d.loc[d.index[i],'In cell cycle list'] = True\n    else:\n        d.loc[d.index[i],'In cell cycle list'] = False\n    IX = np.where( genes[1] == t)[0][0]\n    d.loc[d.index[i],'Expression sum'] = m[:,IX].sum()\n    d.loc[d.index[i],'Count cells expressed'] = (m[:,IX] !=0).sum()\n    \n    if flag_use_mygene:\n        ensembl_id = genes[0].iat[IX].split('.')[0]\n        g_inf = mg.getgene(ensembl_id )\n        if isinstance(g_inf,dict):\n            d.loc[d.index[i],'Count Pubmed'] = len( g_inf.get('generif',[]) ) #  g_inf.get('summary','No summary') )\n            d.loc[d.index[i],'Location'] = g_inf.get('map_location', np.nan ) #  g_inf.get('summary','No summary') )\n            d.loc[d.index[i],'Name'] = g_inf.get('name', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n            d.loc[d.index[i],'Summary'] = g_inf.get('summary', np.nan ) # g_inf['map_location'] #  g_inf.get('summary','No summary') )\n\n\nd.head(40)","b7dbdce7":"t = pd.DataFrame()\nfor g in list_selected_genes:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    print(g, m[:,IX].sum(), (m[:,IX] != 0).sum() )\n# display(t.describe())\ncm = np.corrcoef(t.T)\ncm = pd.DataFrame(cm, index = t.columns, columns = t.columns )\n\na,b = np.where( np.triu(cm,1) > 0.2 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[a[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v1 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene1 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[b[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v2 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene2 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    d.loc[i,'Correlation binarized'] = np.corrcoef(v1,v2)[0][1]\n    d.loc[i,'p-value Independence'] = get_independence_pvalue_chi2(v1,v2, verbosity = 0 )\n    \n    g = cm.index[a[i]]\n    IX = np.where( cc_genes['symbol'].values == g )[0][0]\n    d.loc[i,'phase1'] = cc_genes['phase'].iat[IX] \n    g = cm.index[b[i]]\n    IX = np.where( cc_genes['symbol'].values == g )[0][0]\n    d.loc[i,'phase2'] = cc_genes['phase'].iat[IX] \n    \n    \nd.sort_values('Correlation Abs',ascending = False).head(30)\n","9088a362":"d.sort_values('Correlation Abs',ascending = False).head(30)\n","556ef7ec":"t = pd.DataFrame()\nfor g in list_selected_genes:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = m2[:,IX].toarray().ravel()\n    print(g, m[:,IX].sum(), (m[:,IX] != 0).sum() )\n# display(t.describe())\ncm = np.corrcoef(t.T)\ncm = pd.DataFrame(cm, index = t.columns, columns = t.columns )\n\na,b = np.where( np.triu(cm,1) < -0.0001 )\n\nd = pd.DataFrame()\nfor i in range(len(a)):\n    d.loc[i,'Gene1'] = cm.index[a[i]] \n    d.loc[i,'Gene2'] = cm.index[b[i]] \n    d.loc[i,'Correlation'] = cm.iloc[a[i],b[i]]\n    d.loc[i,'Correlation Abs'] = np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[a[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v1 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene1 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    g = cm.index[b[i]]\n    IX = np.where(genes[1].values == g)[0][0]\n    v2 = (m[:,IX] != 0).toarray().ravel()\n    d.loc[i,'Gene2 Expressions Sum'] = m[:,IX].sum()# np.abs( cm.iloc[a[i],b[i]] )\n    d.loc[i,'Correlation binarized'] = np.corrcoef(v1,v2)[0][1]\n    d.loc[i,'p-value Independence'] = get_independence_pvalue_chi2(v1,v2, verbosity = 0 )\n    \n    g = cm.index[a[i]]\n    IX = np.where( cc_genes['symbol'].values == g )[0][0]\n    d.loc[i,'phase1'] = cc_genes['phase'].iat[IX] \n    g = cm.index[b[i]]\n    IX = np.where( cc_genes['symbol'].values == g )[0][0]\n    d.loc[i,'phase2'] = cc_genes['phase'].iat[IX] \n    \n    \nd.sort_values('Correlation Abs',ascending = False).head(30)\n","12eaa9d2":"d.shape","e90073e6":"pd.set_option('display.max_columns', 200) # increase the number of visible columns in output to 200\npd.set_option('display.max_rows', 200) # increase the number of visible rows in output to 200","4ca1bed5":"d.sort_values('Correlation Abs',ascending = False).head(70)\n","12fea82b":"for g in st.index:\n    IX = np.where(cc_genes['symbol'] == g)[0][0]\n    st.loc[g,'phase'] = cc_genes['phase'].iat[IX]\n    \nst.head(30)    ","34ae5dfc":"st.groupby('phase').mean()","01dde3f0":"s2 = st.sort_values('phase')\nt = pd.DataFrame()\nfor g in s2.index:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = (m2[:,IX].toarray()).ravel()\n    \n#correlation heatmap\nplt.figure(figsize=(10,6));\nsns.heatmap(t.corr() );","126efb32":"mask = st['Count Expressed cells'] > 5000\nprint( mask.sum( )  )\ns2 = st[mask].sort_values('phase')\nt = pd.DataFrame()\nfor g in s2.index:\n    IX = np.where(genes[1].values == g)[0][0]\n    t[g] = (m2[:,IX].toarray()).ravel()\n    \nt.corr()    \n\nprint('G2\/M',(s2['phase'] == 'G2\/M').sum() , s2[s2['phase'] == 'G2\/M' ].index )\nprint('S', (s2['phase'] == 'S').sum() , s2[s2['phase'] == 'S' ].index)\n#correlation heatmap\nplt.figure(figsize=(10,6));\nsns.heatmap(t.corr() );","c123f7cf":"l = ['CENPF', 'NUSAP1', 'G2E3', 'CDCA2', 'CBX5', 'CTCF', 'TMPO', 'ANLN',\n       'NCAPD2', 'CKS2', 'TPX2', 'KIF20B', 'ECT2', 'MKI67', 'TOP2A', 'JPT1',\n       'TUBB4B', 'SMC4', 'CKAP5', 'LBR', 'CENPE']\n\nfor g in l:\n    IX = np.where(genes[1].values == g)[0][0]\n    ensembl_id = genes[0].iat[IX].split('.')[0]\n    g_inf = mg.getgene(ensembl_id )\n    print(g)\n    if isinstance(g_inf,dict):\n        print( len( g_inf['generif']) )\n        print( g_inf['symbol'])\n        print( g_inf['map_location'])\n        print( 'alias', g_inf.get( 'alias','No' ) )\n        print( 'name', g_inf['name'])\n        print( g_inf['other_names'])  \n        print( g_inf.get('summary','No summary')  ) \n        \n    print()","4a19f3d9":"# G2\/M top:\nl = ['CENPF', 'NUSAP1', 'G2E3', 'CDCA2', 'CBX5', 'CTCF', 'TMPO', 'ANLN',\n       'NCAPD2', 'CKS2', 'TPX2', 'KIF20B', 'ECT2', 'MKI67', 'TOP2A', 'JPT1',\n       'TUBB4B', 'SMC4', 'CKAP5', 'LBR', 'CENPE']\n\n# S phase top: \nl = ['BRIP1', 'ATAD2', 'MSH2', 'RRM1', 'MCM6', 'PCNA', 'HELLS', 'POLA1',\n       'CASP8AP2']\nfor g in l:\n    IX = np.where(genes[1].values == g)[0][0]\n    ensembl_id = genes[0].iat[IX].split('.')[0]\n    g_inf = mg.getgene(ensembl_id )\n    print(g)\n    if isinstance(g_inf,dict):\n        print( len( g_inf['generif']) )\n        print( g_inf['symbol'])\n        print( g_inf['map_location'])\n        print( 'alias', g_inf.get( 'alias','No' ) )\n        print( 'name', g_inf['name'])\n        print( g_inf['other_names'])  \n        print( g_inf.get('summary','No summary')  ) \n        \n    print()","d66b3a7a":"list_histone_genes_from_wiki = ['H1F0' , 'H1FNT' , 'H1FOO' , 'H1FX' ,\n'HIST1H1A' , 'HIST1H1B' , 'HIST1H1C' , 'HIST1H1D' , 'HIST1H1E' , 'HIST1H1T' ,\n'H2AFB1' , 'H2AFB2' , 'H2AFB3' , 'H2AFJ' , 'H2AFV' , 'H2AFX' , 'H2AFY' , 'H2AFY2' , 'H2AFZ' ,\n'HIST1H2AA' , 'HIST1H2AB' , 'HIST1H2AC' , 'HIST1H2AD' , 'HIST1H2AE' , 'HIST1H2AG' , 'HIST1H2AI' , 'HIST1H2AJ' , 'HIST1H2AK' , 'HIST1H2AL' , 'HIST1H2AM' ,\n'HIST2H2AA3' , 'HIST2H2AC' ,\n'H2BFM' , 'H2BFS' , 'H2BFWT' ,\n'HIST1H2BA' , 'HIST1H2BB' , 'HIST1H2BC' , 'HIST1H2BD' , 'HIST1H2BE' , 'HIST1H2BF' , 'HIST1H2BG' , 'HIST1H2BH' , 'HIST1H2BI' , \n'HIST1H2BJ' , 'HIST1H2BK' , 'HIST1H2BL' , 'HIST1H2BM' , 'HIST1H2BN' , 'HIST1H2BO' ,\n'HIST2H2BE' ,\n'HIST1H3A' , 'HIST1H3B' , 'HIST1H3C' , 'HIST1H3D' , 'HIST1H3E' , 'HIST1H3F' , 'HIST1H3G' , 'HIST1H3H' , 'HIST1H3I' , 'HIST1H3J' ,\n'HIST2H3C' ,\n'HIST3H3' ,\n'HIST1H4A' , 'HIST1H4B' , 'HIST1H4C' , 'HIST1H4D' , 'HIST1H4E' , 'HIST1H4F' , 'HIST1H4G' , 'HIST1H4H' , 'HIST1H4I' , 'HIST1H4J' , 'HIST1H4K' , 'HIST1H4L' ,\n'HIST4H4' ]\nlen(list_histone_genes_from_wiki)\nlen(list_histone_genes_from_wiki), len( set(list_histone_genes_from_wiki) & set(genes[1].values) )","73b6c56d":"# Load count matrix and convert it to sparse matrix csr_matrix","665d6dc9":"# Histone genes info","18a15bce":"# Color by genes\n","5f67595d":"# Output info on top expressed G2\/M genes","e3a923d1":"# Info on genes","f7b16e8f":"# Look at duplicates","41b3350b":"# Create columns with information on each cell (drug, dose, etc)","899abd29":"# Add statistics on top correlated","cdcc97e5":"# UMAP visualization","05a9c502":"# Closer look on correlations for genes with respect to groups","1ca6be3e":"# Correlation analysis","220453f9":"# get_independence_pvalue_chi2","c498d135":"# What is about \n\nHere we analyse sciPlex2 subdataset looking at cell cycle marker genes.\n\nCell cycle genes taken from https:\/\/github.com\/hbc\/tinyatlas\/tree\/master\/cell_cycle\nwhich up to a couple of genes coincide with the set from \n\nTirosh 2016 - the strategy described and marker genes proposed\nhttps:\/\/science.sciencemag.org\/content\/352\/6282\/189\nDissecting the multicellular ecosystem of metastatic melanoma by single-cell RNA-seq\n\nused in Seurat and scanpy examples: \nhttps:\/\/satijalab.org\/seurat\/archive\/v3.0\/cell_cycle_vignette.html\nsatijalab: Cell-Cycle Scoring and Regression\n\nscanpy :\nhttps:\/\/github.com\/theislab\/scanpy_usage\/blob\/master\/180209_cell_cycle\/cell_cycle.ipynb\n\n\n### Conclusions:\n\n1\nWe see that G2\/M are quite correlated , while top anticorrelated are mostly G2\/M  vs. S phase genes .\nWhich supports  that these genes are quite good for that dataset. \nThe exception (amonge quite expressed): 'G2E3',  'CBX5', 'CTCF' ,\n'JPT1','CKAP5', 'LBR',\ngenes - which are G2\/M genes but strikingly lower correlated than others. \n\n2\naverage expression over groups G2\/M and S - G2M is higher expressed\n\n\n\n\n\n------------------\n\n#### Dataset reminder:\n\nIt is the second \"toy\" subdataset, while sciPlex3 is the main very huge subdataset.\n\nHere - only one cell line - A549 - human lung adenocarcinoma.\n\nExposed to 4 different compounds DEXA, nutlin, BMS, SAHA (HDAC).\n\n24 hours across SEVEN doses. \n\n24262 cells x 58347 genes\n\n\n'GSM4150377_sciPlex2_pData.txt' - contains information on: cell+drugs+doses+etc... There are 24262 rows - one row - one cell.\nThe index (=row number) of cell in that file corresponds to its index in the countmatrix (after transforming csv file with count matrix to sparse countmatrix)\n\nCount matrix (in list of edges format), cell ids, genes ids are in the files (respectively):\n'GSM4150377_sciPlex2_A549_Transcription_Modulators_UMI.count.matrix',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_cell.annotations.txt',\n 'GSM4150377_sciPlex2_A549_Transcription_Modulators_gene.annotations.txt',\n \n ","793924c5":"# Plot expressions of top selected genes ","e112269c":"# Normalization and log ","d327a602":"# get_top_correlated_genes","68a7f8b4":"# Top correlated - G2\/M phase genes , anti-correlated - mostly G2\/M vs. S phase ","85202c54":"# Load information files: genes annotations, cells info etc...","68490586":"# Top correlated with selected genes ","d9bcd8b6":"# Preliminaries","96c26be6":"# Analyse average expression over groups G2\/M and S - G2M is higher expressed\n"}}