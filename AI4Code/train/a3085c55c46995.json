{"cell_type":{"20abfd27":"code","d8d0326a":"code","b0a68634":"code","07079d46":"code","cc7227f9":"code","3a10c951":"code","49b17dd7":"code","eb42276e":"code","62c60aba":"code","04827dc9":"code","95ed9b83":"code","e743fb83":"code","110e6b4f":"code","410a24eb":"code","34a0bdd4":"code","22f6f1a8":"code","b3a832d7":"code","95775e1d":"code","0806e07e":"code","9052a556":"code","2eb849d4":"code","feea9265":"code","74d4b7ee":"code","6cd9dd89":"code","7d2f99a5":"code","2b8f670e":"code","4efe7166":"code","6767047a":"code","eaea59c7":"code","f07c51cb":"code","f72f4d37":"code","6ee6e03d":"code","13506bbc":"code","548060af":"code","6ad782fc":"code","7d4d110c":"code","87aa392c":"code","54713046":"code","68d2b129":"code","c56c5f76":"code","39f940f2":"code","857ab972":"code","56833048":"code","5a1c506d":"code","00f045d4":"code","d2245b45":"code","1f3f5536":"code","36d4a9c5":"code","3d8cb401":"code","95c0ef89":"code","46f43573":"code","ec0bc9c1":"code","1134360e":"code","648d8cfe":"code","5c61b35c":"code","a0297f46":"code","9fa69158":"markdown","883c9827":"markdown"},"source":{"20abfd27":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","d8d0326a":"dflojas = pd.read_csv(\"..\/input\/lojas.csv\")\ndflojas.head(10)","b0a68634":"dftreino = pd.read_csv(\"..\/input\/dataset_treino.csv\")\ndftreino.head(10)","07079d46":"dflojas.describe()","cc7227f9":"dfteste = pd.read_csv(\"..\/input\/dataset_teste.csv\")\ndfteste.head()","3a10c951":"dfteste.info()","49b17dd7":"plt.figure(figsize=(10, 12))\nplt.scatter(dftreino['Customers'], dftreino['Sales'])","eb42276e":"dftreino.info()","62c60aba":"plt.figure(figsize=(10, 12))\nplt.scatter(dftreino['Store'], dftreino['Sales'])","04827dc9":"type(dftreino['Date'].iloc[0])","95ed9b83":"dftreino['Timestamp'] = pd.to_datetime(dftreino['Date'])","e743fb83":"type(dftreino['Timestamp'].iloc[0])","110e6b4f":"dftreino.head()","410a24eb":"sns.lmplot(x = 'Customers', y = 'Sales', data = dftreino)","34a0bdd4":"plt.figure(figsize=(10, 12))\nplt.hist(x = 'Customers', data = dftreino)","22f6f1a8":"dftreino['Timestamp'].iloc[0].day","b3a832d7":"dftreino['Year'] = dftreino['Timestamp'].apply(lambda data: data.year)\ndftreino['Month'] = dftreino['Timestamp'].apply(lambda data: data.month)\ndftreino['Day'] = dftreino['Timestamp'].apply(lambda data: data.day)\ndftreino.head()","95775e1d":"porMes = dftreino.groupby('Month').count()\nporMes['Sales'].head(12)","0806e07e":"porMes['Sales'].plot()","9052a556":"dftreino.corr()","2eb849d4":"sns.pairplot(dftreino)","feea9265":"sns.distplot(dftreino['Sales'])","74d4b7ee":"fig, ax = plt.subplots(figsize=(10,10))\nsns.heatmap(dftreino.corr(), annot = True, linewidths=.5, ax=ax)","6cd9dd89":"dftreino.columns","7d2f99a5":"dftreino.isnull().values.any()","2b8f670e":"dftreino[dftreino.isna().values]","4efe7166":"dftreino.info()","6767047a":"dftreino.groupby('StateHoliday').count()","eaea59c7":"def strToInt(x):\n    if x == 0:\n        return 0\n    if x == '0':\n        return 1\n    elif x == 'a':\n        return 2\n    elif x == 'b':\n        return 3\n    elif x == 'c':\n        return 4\n    \ndftreino['StateHoliday'] = dftreino['StateHoliday'].apply(lambda x: strToInt(x))","f07c51cb":"dftreino.head()","f72f4d37":"dftreino.info()","6ee6e03d":"X = dftreino[['Store', 'DayOfWeek', 'Customers', 'Open', 'Promo', 'StateHoliday', 'SchoolHoliday', 'Year', 'Month', 'Day']]\ny = dftreino['Sales']","13506bbc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.35, random_state = 64)","548060af":"from sklearn.linear_model import LinearRegression","6ad782fc":"X_train.info()","7d4d110c":"lm = LinearRegression()\nlm.fit(X_train, y_train)","87aa392c":"#Verificando a qualidade do modelo\nprint(lm.intercept_)","54713046":"lm.coef_","68d2b129":"cdf = pd.DataFrame(lm.coef_, X.columns, columns=['Coeficiente'])\ncdf","c56c5f76":"predicao = lm.predict(X_test)\npredicao","39f940f2":"plt.scatter(y_test, predicao)","857ab972":"fig, ax = plt.subplots(figsize=(10,10))\nsns.distplot(y_test-predicao, label = 'Distribui\u00e7\u00e3o diferen\u00e7a entre o real e a predi\u00e7\u00e3o', ax=ax)","56833048":"dfteste.head()","5a1c506d":"dfteste['Timestamp'] = dfteste['Date'].apply(lambda x: pd.to_datetime(x))\ndfteste['Year'] = dfteste['Timestamp'].apply(lambda time: time.year)\ndfteste['Month'] = dfteste['Timestamp'].apply(lambda time: time.month)\ndfteste['Day'] = dfteste['Timestamp'].apply(lambda time: time.day)\ndfteste.head()","00f045d4":"dfteste.columns","d2245b45":"XTest = dfteste[['Store', 'DayOfWeek', 'Open', 'Promo', 'StateHoliday', 'SchoolHoliday', 'Year', 'Month', 'Day']]","1f3f5536":"predicaoDFTeste = lm.predict(X_test)\npredicaoDFTeste","36d4a9c5":"plt.scatter(y_test, predicaoDFTeste)","3d8cb401":"fig, ax = plt.subplots(figsize=(10,10))\nsns.distplot(y_test-predicaoDFTeste, label = 'Distribui\u00e7\u00e3o diferen\u00e7a entre o real e a predi\u00e7\u00e3o', ax=ax)","95c0ef89":"dfPredito = pd.DataFrame(predicaoDFTeste)\ndfPredito.count()","46f43573":"dfPredito.describe()","ec0bc9c1":"dfPredito.to_csv('submission.csv', index = True)","1134360e":"from sklearn import metrics","648d8cfe":"metrics.mean_absolute_error(y_test, predicaoDFTeste)","5c61b35c":"metrics.mean_squared_error(y_test, predicaoDFTeste)","a0297f46":"np.sqrt(metrics.mean_squared_error(y_test, predicaoDFTeste))","9fa69158":"A Solar \u00e9 uma rede de farm\u00e1cias que opera com mais de 3.000 estabelecimentos em 7 pa\u00edses. Atualmente, os gerentes de cada farm\u00e1cia da rede Solar t\u00eam a tarefa de prever suas vendas di\u00e1rias com at\u00e9 seis semanas de anteced\u00eancia. As vendas nas lojas s\u00e3o influenciadas por v\u00e1rios fatores, incluindo promo\u00e7\u00f5es, competidores, feriados escolares e estaduais, sazonalidade e localidade. Com milhares de gerentes prevendo vendas com base em suas circunst\u00e2ncias \u00fanicas, a precis\u00e3o dos resultados pode ser bastante variada.\n\nPara as previs\u00f5es voc\u00ea deve considerar um ID, que \u00e9 um n\u00famero representando a combina\u00e7\u00e3o entre o ID da loja e uma data. Al\u00e9m do ID, sua submiss\u00e3o deve conter a previs\u00e3o do volume de vendas. Leia atentamente a descri\u00e7\u00e3o dos principais campos nos arquivos fornecidos nesta competi\u00e7\u00e3o.","883c9827":"# Descri\u00e7\u00e3o dos Campos\n* ID - um ID que representa uma tupla (Store, Date) dentro do conjunto de dados\n* Store - um ID \u00fanico para cada loja\n* Sales - o volume de neg\u00f3cios de um determinado dia (\u00e9 isso que voc\u00ea est\u00e1 prevendo)\n* Customers - o n\u00famero de clientes em um determinado dia\n* Open - um indicador para saber se a loja estava aberta: 0 = fechada, 1 = aberta\n* StateHoliday - indica um feriado estadual. Normalmente, todas as lojas, com poucas exce\u00e7\u00f5es, est\u00e3o fechadas nos feriados estaduais. Note que todas as escolas est\u00e3o fechadas nos feriados e fins de semana. a = feriado p\u00fablico, b = feriado de P\u00e1scoa, c = Natal, 0 = Nenhum\n* SchoolHoliday - indica se a (Store, Date) foi afetada pelo fechamento de escolas p\u00fablicas\n* StoreType - diferencia entre 4 modelos de lojas diferentes: a, b, c, d\n* Assortment - descreve um n\u00edvel: a = b\u00e1sico, b = extra, c = estendido\n* CompetitionDistance - dist\u00e2ncia em metros at\u00e9 a loja concorrente mais pr\u00f3xima\n* CompetitionOpenSince[Month\/Year] - indica o ano e m\u00eas aproximado da hora em que o concorrente mais pr\u00f3ximo foi aberto\n* Promo - indica se uma loja est\u00e1 executando uma promo\u00e7\u00e3o nesse dia\n* Promo2 - promo\u00e7\u00e3o cont\u00ednua e consecutiva para algumas lojas: 0 = loja n\u00e3o est\u00e1 participando, 1 = loja est\u00e1 participando\n* Promo2Since[Year\/Week] - descreve o ano e a semana do calend\u00e1rio em que a loja come\u00e7ou a participar do Promo2\n* PromoInterval - descreve os intervalos consecutivos que o Promo2 \u00e9 iniciado, indicando os meses em que a promo\u00e7\u00e3o \u00e9 iniciada novamente. Por exemplo. \"Feb, May, Aug, Nov\" significa que cada rodada come\u00e7a em fevereiro, maio, agosto, novembro de qualquer ano para aquela loja."}}