{"cell_type":{"42616f31":"code","04257fc8":"code","67999fda":"code","6c98893b":"code","ba364689":"code","637778d1":"code","43957a28":"code","3bcaa4f5":"code","9ef07be3":"code","470e46c1":"code","eafb692c":"code","2d9f11ee":"code","c6a65518":"code","81944b4b":"code","410ce171":"code","d9b601f3":"code","5cb0bc0d":"code","fc162722":"code","5ea3a5a2":"code","7a9bfe6d":"code","f3f5b913":"code","a79635a4":"code","003bb79c":"code","f0a58fff":"code","fceb3ce3":"code","3e50fa58":"markdown","e3ff214e":"markdown","69c215e5":"markdown","c4690cdc":"markdown","fc59ece4":"markdown","c9b57022":"markdown","54fbd9ed":"markdown","09ee2f3f":"markdown","a4bcfe61":"markdown","bfb020ac":"markdown","48301ef3":"markdown","5691a515":"markdown","a1a3c79b":"markdown","fdead735":"markdown","3b4d3449":"markdown","dfb40762":"markdown"},"source":{"42616f31":"from pathlib import Path\nimport os, shutil, time\nfrom skimage import io\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport plotly.express as px\nimport plotly.figure_factory as ff\nimport plotly.graph_objects as go\n\nimport keras\nfrom keras.applications import VGG16\nfrom keras import models, layers, optimizers\nfrom keras.preprocessing.image import ImageDataGenerator\n\nimport tensorflow as tf\nfrom sklearn.metrics import roc_auc_score, roc_curve, precision_recall_curve, auc ,confusion_matrix, classification_report","04257fc8":"train = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/train'\ntest = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/test'\nval = '..\/input\/chest-xray-pneumonia\/chest_xray\/chest_xray\/val'","67999fda":"list_dir_nor = os.listdir(os.path.join(train, 'NORMAL'))\nlist_dir_pneu = os.listdir(os.path.join(train, 'PNEUMONIA'))\n\nlist_dir_nor[:5]","6c98893b":"for i in range(3):\n    img = io.imread(os.path.join(train, 'NORMAL', list_dir_nor[i]))\n    fig = px.imshow(img, color_continuous_scale='gray', title='Normal')\n    fig.show()\n    \nfor i in range(3):\n    img = io.imread(os.path.join(train, 'PNEUMONIA', list_dir_pneu[i]))\n    fig = px.imshow(img, color_continuous_scale='gray', title='Pneumonia')\n    fig.show()","ba364689":"conv_base = VGG16(weights = 'imagenet',\n                 include_top = False,\n                 input_shape=(150,150,3))","637778d1":"conv_base.summary()","43957a28":"model = models.Sequential()\nmodel.add(conv_base)\nmodel.add(layers.Flatten())\nmodel.add(layers.Dropout(0.25))\nmodel.add(layers.Dense(256, activation='relu'))\nmodel.add(layers.Dense(1, activation='sigmoid'))\n\nmodel.summary()","3bcaa4f5":"len(model.trainable_weights)","9ef07be3":"conv_base.trainable = True\n\nset_traninable = False\nfor layer in conv_base.layers:\n    if layer.name == 'block5_conv1':\n        set_traninable = True\n    if set_traninable:\n        layer.traninable = True\n    else:\n        layer.trainable = False\n\nlen(model.trainable_weights)","470e46c1":"train_datagen = ImageDataGenerator(rescale=1.\/255,\n                                  rotation_range=40,\n                                  width_shift_range=0.2,\n                                  shear_range=0.2,\n                                  zoom_range=0.2,\n                                  horizontal_flip=True,\n                                  fill_mode='nearest')\n\ntest_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(train,\n                                                   target_size=(150, 150),\n                                                   batch_size=50,\n                                                   class_mode='binary')\n\n\ntest_generator = test_datagen.flow_from_directory(test,\n                                                    target_size=(150, 150),\n                                                    batch_size=156,\n                                                    class_mode='binary',\n                                                    shuffle=False)   \n\nvalidation_generator = train_datagen.flow_from_directory(val,\n                                                   target_size=(150, 150),\n                                                   batch_size=40,\n                                                   class_mode='binary')","eafb692c":"train_generator.reset\nvalidation_generator.reset\ntest_generator.reset\n\ntrain_list_y = np.concatenate([train_generator.next()[1] for i in range (train_generator.__len__())])\nval_list_y = np.concatenate([validation_generator.next()[1] for i in range (validation_generator.__len__())])\ntest_list_y = np.concatenate([test_generator.next()[1] for i in range (test_generator.__len__())])\n\ndf = pd.DataFrame([train_list_y, val_list_y, test_list_y], dtype=np.int8).T\ndf.set_axis(['train', 'val', 'test'], axis='columns', inplace=True)","2d9f11ee":"columns=df.columns\n\nfig = go.Figure(data=[\n    go.Bar(name='Pneumonia', x=columns, y=df.sum()),\n    go.Bar(name='Normal', x=columns, y=df.count()-df.sum())\n])\n# Change the bar mode\nfig.update_layout(barmode='group')\nfig.show()","c6a65518":"time_start = time.process_time()\n\nmodel.compile(loss='binary_crossentropy',\n             optimizer=optimizers.RMSprop(lr=2e-5),\n             metrics=['acc'])\n\ncallbacks_list = [keras.callbacks.ModelCheckpoint('pneu_model_all_data2.h5', save_best_only=True, monitor='val_loss'),\n                 keras.callbacks.ReduceLROnPlateau(monitor='val_loss', factor=0.8, patience=3)]\n\n\nhistory = model.fit(train_generator,\n                    steps_per_epoch=100,\n                    epochs=25,\n                    validation_data=validation_generator,\n                    validation_steps=1,\n                    callbacks=callbacks_list)\n\n\ntime_end = time.process_time()\nprint(f'\\n\\nIt took: {(time_end-time_start)\/60} min')\n\npx.line(history.history)","81944b4b":"model = keras.models.load_model('pneu_model_all_data2.h5')","410ce171":"test_generator.reset\n\nX_test = np.concatenate([test_generator.next()[0] for i in range (test_generator.__len__())])\ny_test = np.concatenate([test_generator.next()[1] for i in range (test_generator.__len__())])","d9b601f3":"test_generator.reset\ny_pred = model.predict(X_test)","5cb0bc0d":"precisions, recalls, thresholds = precision_recall_curve(y_test, y_pred)\n\n\ndf = pd.DataFrame({\n    'Precision': precisions[:len(thresholds)],\n    'Recall': recalls[:len(thresholds)]},\n    index=thresholds\n)\ndf.index.name = \"Thresholds\"\ndf.columns.name = \"Rate\"\n\nfig_thresh = px.line(\n    df, title='Precission and recall at every threshold')\n\nfig_thresh.show()","fc162722":"fpr, tpr, thresholds = roc_curve(y_test, y_pred)\n\nfig = px.area(\n    x=fpr, y=tpr,\n    title=f'Receiver Operating Characteristic (AUC={auc(fpr, tpr):.3f})',\n    labels=dict(x='False Positive Rate', y='True Positive Rate'),\n    width=900, height=700\n)\nfig.add_shape(\n    type='line', line=dict(dash='dash'),\n    x0=0, x1=1, y0=0, y1=1\n)\n\nfig.update_yaxes(scaleanchor=\"x\", scaleratio=1)\nfig.update_xaxes(constrain='domain')\nfig.show()","5ea3a5a2":"threshold = 0.4\ny_pred_binary = (y_pred > threshold).astype(int)","7a9bfe6d":"print(classification_report(y_test, y_pred_binary, target_names = ['Normal','Pneumonia']))","f3f5b913":"cm = confusion_matrix(y_test, y_pred_binary)\n\nx = ['Pred false', 'Pred true']\ny = ['GT false', 'GT true']\n\nfig = ff.create_annotated_heatmap(cm, x=x, y=y, colorscale='mint')\nfig.update_layout(title_text=\"Stacking Classifier Confusion Matrix (Number)\")\nfig.show()","a79635a4":"y_pred_binary = y_pred_binary.reshape(1,-1)[0]\n\ncorrect = np.nonzero(y_pred_binary == y_test)[0]\nincorrect = np.nonzero(y_pred_binary != y_test)[0]\nprint(f'Number of incorrect classified images: {len(incorrect)} ~ {round(len(incorrect)\/len(y_test)*100,1)}% \\nNumber of correct classified images: {len(correct)} ~ {round(len(correct)\/len(y_test)*100,1)}%')\n","003bb79c":"i=0\nfor c in incorrect:\n    print(y_pred[c])\n    print(y_pred_binary[c])\n    print(y_test[c],'\\n')\n    i += 1\n    if i == 4:\n        break","f0a58fff":"print(test_generator.class_indices)","fceb3ce3":"i=0\n\nfor c in incorrect:\n    if y_pred_binary[c] == 0: \n        predicted = 'Normal'\n    if y_pred_binary[c] == 1: \n        predicted = 'Pneumonia'\n    if y_test[c] == 0: \n        GT = 'Normal'\n    if y_test[c] == 1: \n        GT = 'Pneumonia'\n    fig = px.imshow(X_test[c][:][:][:], title=f'Groundtruth: {GT} <br>Predicted: {predicted}')\n    fig.show()\n    i += 1\n    if i == 4:\n        break","3e50fa58":"## Importing libraries","e3ff214e":"## Finding pictures","69c215e5":"## Image Data Generator\nThe image data generator makes it easy to import the pictures from directories in batches and also to do image augmentation.","c4690cdc":"## Adding top layers","fc59ece4":"It is impossible to see the learning rate on the graph, but if you hover the line you will find that is has been reduced. This is due to \"keras.callbacks.ReduceLROnPlateau\". A technique used to avoid stopping in a local minima.","c9b57022":"Plotting some of the x-rays the model got wrong.","54fbd9ed":"## Precision recal curve\nThis graphs presents the precisions and recall at different thresholds.","09ee2f3f":"Based on the precission recall curve the threshold can be set. Lets see the stats for the model with the new threshold.","a4bcfe61":"# **Pneumonia**\n\nPneumonia is an inflammatory condition of the lung primarily affecting the small air sacs known as alveoli. Symptoms typically include some combination of productive or dry cough, chest pain, fever and difficulty breathing. The severity of the condition is variable. Pneumonia is usually caused by infection with viruses or bacteria, and less commonly by other microorganisms. Identifying the responsible pathogen can be difficult. Diagnosis is often based on symptoms and physical examination. **Chest X-rays**, blood tests, and culture of the sputum may help confirm the diagnosis (from wikipedia).\n\n![Picture not showing](attachment:image-2.png)","bfb020ac":"# Credits\n\n- https:\/\/en.wikipedia.org\/wiki\/Pneumonia\n- https:\/\/plotly.com\/python\/\n- https:\/\/www.kaggle.com\/kashyapgohil\/pneumonia-detection-using-cnn\n- https:\/\/keras.io\/api\/\n- Image from https:\/\/pixabay.com\/da\/images\/search\/lunge\/\n- Deep Learning with Python by Fran\u00e7ois Chollet","48301ef3":"## Importing VGG16 model","5691a515":"## ROC Curve","a1a3c79b":"In general the model is quiet sure about the predictions that it got wrong.","fdead735":"The data seems imbalanced, most importantly the train data is 74% pneumonia. To increase the no. of training examples, we will use data augmentation. This is set in the train ImageDataGenerator (see above).","3b4d3449":"## Freezing\n\nIn order to take advantage of the VGG16 model, while still enabeling the model to adapt to the new data i want to keep most of the model as it is, and only letting the top layers adjust to the trainning data.\nThis is done by freezing all layers from bottom to \"block5_conv1\" (\"set_traninable\" as False) and activating layers above (\"set_traninable\" as True).","dfb40762":"As a sanity check lets look at the predictions and ground truths. "}}