{"cell_type":{"e72c8b5b":"code","7412d313":"code","f9915059":"code","1af89cc8":"code","b8f0c64a":"code","810f7004":"code","ecb151ea":"code","13206985":"code","3ebde509":"code","5003947d":"code","f4ac937c":"code","99509172":"code","faaae2ed":"code","4b224176":"code","8a28aa67":"code","12e416b1":"code","efc19677":"code","9c162c16":"code","aa7ef7db":"code","6f9cd236":"code","baeeccf5":"markdown","578595b5":"markdown","13dea580":"markdown","481ace0d":"markdown","4491aee3":"markdown","f298427a":"markdown","04bb63eb":"markdown","aa54b03e":"markdown","0ccd8736":"markdown","901a1713":"markdown","5e2abdcf":"markdown","45a8712f":"markdown","c23c38cd":"markdown","2c5ef7b6":"markdown","0d9394c2":"markdown","caa161f3":"markdown","b19142fc":"markdown","abac0fae":"markdown","dad4fa6b":"markdown","404f0c7e":"markdown","cedd7868":"markdown"},"source":{"e72c8b5b":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","7412d313":"for dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","f9915059":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","1af89cc8":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","b8f0c64a":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","810f7004":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# NSE_1001_TO_1050_start_to_15082020.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/NSE_1001_TO_1050_start_to_15082020.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'NSE_1001_TO_1050_start_to_15082020.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","ecb151ea":"df1.head(5)","13206985":"plotPerColumnDistribution(df1, 10, 5)","3ebde509":"plotCorrelationMatrix(df1, 8)","5003947d":"plotScatterMatrix(df1, 18, 10)","f4ac937c":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# NSE_101_TO_150_start_to_15082020.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/NSE_101_TO_150_start_to_15082020.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'NSE_101_TO_150_start_to_15082020.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","99509172":"df2.head(5)","faaae2ed":"plotPerColumnDistribution(df2, 10, 5)","4b224176":"plotCorrelationMatrix(df2, 8)","8a28aa67":"plotScatterMatrix(df2, 18, 10)","12e416b1":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# NSE_1051_TO_1100_start_to_15082020.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/NSE_1051_TO_1100_start_to_15082020.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'NSE_1051_TO_1100_start_to_15082020.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","efc19677":"df3.head(5)","9c162c16":"plotPerColumnDistribution(df3, 10, 5)","aa7ef7db":"plotCorrelationMatrix(df3, 8)","6f9cd236":"plotScatterMatrix(df3, 18, 10)","baeeccf5":"There are 20 csv files in the current version of the dataset:\n","578595b5":"### Let's check 3rd file: \/kaggle\/input\/NSE_1051_TO_1100_start_to_15082020.csv","13dea580":"## Conclusion\nThis concludes your starter analysis! To go forward from here, click the blue \"Fork Notebook\" button at the top of this kernel. This will create a copy of the code and environment for you to edit. Delete, modify, and add code as you please. Happy Kaggling!","481ace0d":"Scatter and density plots:","4491aee3":"Correlation matrix:","f298427a":"Scatter and density plots:","04bb63eb":"Correlation matrix:","aa54b03e":"Let's take a quick look at what the data looks like:","0ccd8736":"Let's take a quick look at what the data looks like:","901a1713":"Scatter and density plots:","5e2abdcf":"Distribution graphs (histogram\/bar graph) of sampled columns:","45a8712f":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","c23c38cd":"Correlation matrix:","2c5ef7b6":"### Let's check 2nd file: \/kaggle\/input\/NSE_101_TO_150_start_to_15082020.csv","0d9394c2":"Distribution graphs (histogram\/bar graph) of sampled columns:","caa161f3":"Distribution graphs (histogram\/bar graph) of sampled columns:","b19142fc":"Now you're ready to read in the data and use the plotting functions to visualize the data.","abac0fae":"### Let's check 1st file: \/kaggle\/input\/NSE_1001_TO_1050_start_to_15082020.csv","dad4fa6b":"Let's take a quick look at what the data looks like:","404f0c7e":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","cedd7868":"## Introduction\nNSE stocks data available in the below link.\n\nhttps:\/\/www.kaggle.com\/laxmankusuma\/nse-stocks-data-fetched-from-yahoo\n\nyou can download nse stock data.\n\nFor Python code to fetch nsestock data, available in my github,\nfind link below.\n\nhttps:\/\/github.com\/laxmankusuma\/NSE-STOCK-HISTORICAL-DATA-FETCHING"}}