{"cell_type":{"ff3dfc53":"code","98c0415b":"code","299e8327":"code","5df2af8e":"code","a9e5a7b1":"code","60d88b59":"code","1d4a4282":"code","143bc4ba":"code","d95c5c1d":"code","7266aac1":"code","aef2e719":"code","193ac3a4":"code","2882542e":"code","fa48557d":"code","a9fef346":"code","31b29950":"code","9e0c1610":"code","9542367d":"code","df9635d8":"code","13cb48c4":"code","7335924e":"markdown","4c2ba8f4":"markdown","d236c71d":"markdown","9982dc6e":"markdown","679bdd33":"markdown","4054da04":"markdown"},"source":{"ff3dfc53":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxQHBhUTBxQVFhUXGCAbGBgVGRsZHhkiHRgXHSAaHR8dICghGyYmHh0bJTchJSksMC8vHiA\/PTMvQyguLysBCgoKDg0OGxAQGislHyU3LTAuKzU3LTUtLS8yLS0tLy41LS41LzIuLS4yLS0wLy0rLS4tLS0tLS0tLS8tLS0tLf\/AABEIAKkBKwMBIgACEQEDEQH\/xAAcAAEBAQADAQEBAAAAAAAAAAAABwYDBAUBAgj\/xABFEAACAQMDAgQDBgMDBw0AAAABAgADBBEFEiEGMQcTQVEiYXEUIzJCgZEVUoIXVKMWU3OhsdLTJCUzNTdDcpKTorO0wf\/EABkBAQEBAQEBAAAAAAAAAAAAAAABAgMFBP\/EACQRAQACAQUBAQEAAgMAAAAAAAABAhEDEhMxYSFBUSKhMnGB\/9oADAMBAAIRAxEAPwCaRET2HpEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQERNDp3RV5f2S1lpKlBhuFatUSmgHucnOD9JJtEdpMxHbPRNR\/BLDT\/8ArfUPNYd6djTNTP0qvhPf09v1+jX7KwP\/ADLpyu3o945rE+33YwgOT6fKZ356hnd\/IZylavWtmqUUdkT8TqpKrn+ZgMD9ZwyvXPWp0CpQs9dWlUDjN6gpqqUVqKAtFVX+RcM2c57evGT8QOjP8n7lqulHzLUsBnOTRLAEK\/upBG1\/XsecFs11czifn8St8z9Y2IidXQiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgIiICIiB63S+j\/xvVwlU7KSg1K79hTppy7Z+nA+ZE3mh9dVNYv6tpaOLdHwLH4V20ygwtFwRgrUAxznDHj0wveibjRelfstF7ZKlw2+4qPWCAqh+Ckm4BiBncxwBk45zMovSS0ypuNS05Rn8lc1GX54VP\/2fPM1vnM\/9OMzWzmudZtbu4an1RYeVVUlXqWZ8p1I75pN92xz6kzYdD+H1Jrhb2xr+agBaglei1L4\/yu+T8SrwQVGCccjE9FumKGsUEv8AdRurkUuxby6NdqZ2Cs4IJOMDPZSQJOtavNS0bqRbrWVqU6yn4Sw+7xjHlrtJQoRxtB\/18zMTvjFZwznd8rOHd13p220u\/dup724aqxYsEtHUu2c5D1SFbPyGPnNBU6ktbPoZK+l061U06gsyLrZmrT2mqadUISrKELKpxlT9W3edqGu1qWk\/bOn3D2jkJXtK485Leofy4bkU2J+EqQOcccAe109Qsuo+in8+0FJ6ldilGjUKCtUpUgc0d3C5RmXb24P1knqJsk9RNmC6g0OmtmLzp8l7Rzgg8vbOf+6qfLn4X9ePkWzspHQeu2dPX1t7TT6i\/aD5Tl7hqgIOeHpFApxz9OZgtWKNq1b7Gu2n5r7FHou84HPyxO9LTnEu1ZnqXUJwOZrKPhvqdaiGpW2QwBB82jyCMj88yT\/gP0l08SNcuNC6Ps30iqabMUViApyPJY4+IH1Ak1L2iYiv6l7TExEfqO61oVxoVcLq9F6RPbdghvowyp\/QzzpcekdT\/tK6QuLfXVU1EwN4AHJUlKgH5WBBzjj98SPdOaS\/UGsUre34NRgCf5R3Zv0XJ\/aKamc7u4K3znP46la2ehTRqylRUXchI\/ENxXI\/UETu6FoVx1Bdmno9PzHVdxG5V4yBnLEDuRK74maBR1PpM\/wXBfTsKVXuqBELIfohV\/6TI3p2qVtJrF9MqvSYjBZDgkZBx+4EU1JvXMdlb7o+NH\/Znqn91\/xaP\/EmWu7drO6encjDoxVhkHBUkEZHB5B7S19faxXsvDWzrWdaolV\/J3OpwzbqDk5Prk8yNW1CrrOqqlPL1a1TGTySztyx\/Ukk\/WTSva0ZthNO0zGZcVS1elbJUqKQjlgjHsxTG7H0yP3nDL11V0rRvuizYaUQ1ezRaiKPxZIbv\/pAH\/Ug+kgoORxNaepvhaX3PW0\/py51HSKtzZUt1Gju8x9yDbtUO3BYMcKQeAZ1NK02rq9+tHTl31HztXIXOASeWIA4B9ZU\/DG0e\/8AC3UKVoNz1HqogyBktbUgBk4A5PrOj0B0Jf6R1fQrajQ2U0Lbm8ym2M03A4ViTyR6THNjdn86Z5O8p3q2mVdG1BqOpJsqLjcuVbGQGHKkjsR6zhpWr1rd6lJSUp7d7Dsu47Vz9TxNV4uHHiBc59qf\/wANOUforpijp\/RotNYwK1+rMyn8X4MhR80XB+TEy21dtItP6s6mKxKET1ND6dutfqEaPRepjuRhVHyLMQoPyzmcN7pNSy1prW44qLU8sn0yWADfQ5B+hle8QNbPh\/oVvZ9MgU2YN8eASAuAW54LMzZyQex+Ut7zGIr3K2tMYiP1MtZ6MvtEtvM1K2dUHdlKOB822Mdo+ZwJ1bPpy5vdFqXdrS3UKed77kGNoBPwltx4I7CaXSfFS+slcXxS5DDAFVQNp\/oAyPdT+4mp6CtH1jwsvKVkqh6tWqEUZCqWWngc5IUZ+fA9Zm171j\/LDM3tWPqXaFoNx1Bcmno9I1GUZbBVQB8yxAGfbPPPtPRsuhr6\/uKqWdEO1FttQLVo\/CxGdud+CffHab\/qLUKfhl0ytlopBu6y7nq4AI9DUI5+YVfTBPpy8Dw1XQ77yid5cYJPOTTPOfr6zNtW22bR1+JOpON0dMX\/AGZ6p\/df8Wj\/AMSdWy6Ev796gtLfcaTmnU+8pDawCkjlxnhhyMianUtG1\/S9NqVru7fZTQu2K+ThRk4GOZ6vh1f1n8OdTrh3NfdWcP3bcLamQfmc4idS8RnMSTe0Rn4wt34ealaW5etaNgcnY9Nz\/wCVGLH9BMzTQ1KgWmCSTgADJJJwAAOSc+kp\/hfr+p33VCJdPWq0Du83zVJCjYcHcRkHdtGM85P1HFXrW2k+OO4lVpCp8R\/KtR6JH0H3jAk+hJ9pqNS0TMT\/ADPxqLzEzEvEXwx1JrLzPIH+jNRN+PfGcfpnPymSr0Wt6zJcKVZThlYEEEdwQe0ufVNlrFr1IbrQKgrW\/wAJFvuC8ADcpVhg5wTuBzz8pHuqdYqa9rb1tRppTqHCsqqVwV4+IMSd3oc+w9pdK9rd4NO027w8mIidnUiIgaPRupB9n+zdShri1Y+pJqUDjAqUWPIwPydj++eWv0TW\/jFClYMK1G4bFK4p8qVz8Rb+RlXJKn2PeZeaPpLrOv0pTqrYBHWqOUqbioIyNwAI7g4Pvge052rMfasTEx9q7WtdUta9XiroRApWwFCip5VqafCQw\/MHOT+o9QJ6Oo6rW0azW66XqE2FY4NvVAqJQf8ANQdWztB7gjGQfoT49PrDYPi0\/TD9bbH+xp7PT3iUNMuSKljZpRfAqi3pmmxGe\/JIbALfCRznuJiazj5Viaz\/AB6nQNxS1jUC1Gwq0Q4KVmt+bWqpBBFRKhAQDkjYxIPyznm6w6Rq29vZ0ejXDihvqqBVQVc1Km5agyRuA27Q3J\/1z89e2a65dKlnqDIKiB6FKuQlvVU4x5ToAoI7bKg3Z+WCer1r0vRsbq2qdQXHk06drSprTpjzK7tTB3BPyqASPjJxmcon\/KJz\/wCfZc47z\/p6WkaK9z1HS1OvSa3qUxUN5TZSgWoKL4rID+JH9cdm98kiQBi4y\/c8n9ZtdQ8Q6o0w2uhK1KgQVLVajV6rAjH4nJVMj0UcehmKHE76VbR9s7acTHb4\/wCA\/Sf0B1t0rW6s6TtKemNSVk2OfNLKMeUV42q3OT7SAT0F126RMJdXIA7AVqnH\/ujUpNpiYnovWZxMfivUEo+E\/SlQVKq1Lutyqjjc2MLhe4Re5Y9+fcCeZ4P6dS0LRampayy01b7umz8AKGAJ\/qfA\/p+ck9Wo1aqWrMWY92Ykk\/UnkzlqX1WpainUq1DTXshdiox2wpOB+0zwziYz32zx\/MZ77W3pKvpej6tVay1Fqz3TAOtVkId2Y4OFprySxHtzJR110+emupKtBR93+OkfdGzgfpyv9M8IHB+Hv8pzXd7UvnBvalSoQMA1HZyB7AsTiappzW2ctVptnOVb8Sf+yew+tD\/67zyvBvSEt3ralqpCUqAKozdgSPjf9FO0f+JvaTutqFW4twlxVqui42ozsyjAwMKTgYHHE+fbqos\/K82p5X+b3ts75\/Dnb357d5mNKYptykac7duVr0u\/0rT+qat7S1NmqVsh1dl2EHGBgUwfhwAOeAPmZO\/FHp\/+A9VOaIxSr\/e08dhk\/Gv6Nz9GWZDv3nYur6reKovKtSoF\/D5js+3OO24nHYdvYS00prbMSV09s5yqfhtcNa+FOovbMVdGrMrDggi2pEEfQzxvDfqe8v8ArW3p31zWdGLblZsg4pueR9QJhaN9VoW7U6FWoqNnciuwVsjB3KDg5HHPpOO3rtbVg1szIw7MhKkfQjkRxf8ALP6cffqraj0\/\/lD411VqjNKn5dSp7ELSpYX+psDHtunta7e6XqfUtK6uNSZKluQEVGXYMMSeDTJO7seeRiRddWuErMyV6wZ8b2FVwWwMDcc5bA4Ge06Y47ScMzjM9RhOLP6qfi9pyXSUNV0NlZGwrOvIyp+B\/wBwVOfZRPd1ewo+K\/TdKrptRadzSzlW52lgNyMByASAQ+DwO3JEi4vaotPKFWp5f+b3ts75\/Dnb357d5+La4e1rb7V2Rv5kYqf3BBjinEffsdHHOI+9KZaeEy6fZVKvV12lJFHBonIHzY1FGfUbQMn39J6\/hzqP8F8M7yvZ\/GKVWqybht3YSntJHOM8EjP6yQXuoVb\/AB9vq1amO3mOz4+m4nE+U76rStTTpVai02\/EiuwU575UHB\/UROla0YtKzpzMfZVumafiv0ph9lO\/tx3PAPbnjnY+Pb4W98c\/vwYs6ttpV\/SqKUqrUC4bgq3lkf7fWR+2uXtKu60d0bGNyMVOD6ZUgzsLrNylQslxXBbG4irUBbAwMndzge8k6M4msT8SdOcTEdKLX6H125til1dh1YYZWuKhDA9wRt5nseHq1eluitT3hDVtqlVsclSyW9Nh7EjI+Ukv8euv71c\/+tU\/3pw\/xOvscefWxUzvHmPh8jB3DPxZHBzniJ0rTGJwTS0xicLV4feILdWXFS21YJSqlSaZpbl3DGGA3EkMO4+WfaTf\/JEW\/Xf2LqGuaYZiRWIz5u45U5Y4BfkZOfiyOe8y1Cs1vVDW7MrDsykqR9CORP3eXlS+YG+qVKhAwDUdnwPYbicTVdLbM7fkSsaeJnC19KdG6j071Ovl3W+xUn4WdiSu07V2EYUg45UgcH3xJ14qXVK764rtp+CAFVyvZnVcMf04X6qZ4Y166Fn5Qua\/l\/yea+O2Md+2PTtPOAwOIppzFt0yVpMTmSIidnUiIgIiICIiBr+iqya4o0vV8mnVYtQfPNCoFJ45HwuMgr7njk5m18RtBbXdMr1qr0FqWbOV2OGLUcZCP6o4ZTjPzHrmRwcHiM9\/n3+frz78zlbTzbdEuc0+5iXyIidXR2NPpJWv6a3bbaZcB29lyNx\/bM0FylheazWqKwSk6I9NADT2ElRVAUbviXDMqZwcjk9pl4mZrlmYbZLLSlq4qvnLDO2q+FG6iDtO0bhtao2T6oR6Tg+w6ammZNXNVlyMO3wEW27lcYya4K49mEyETOyf7KbfZUK5ttLroyLWpqm+q6sGIYllpheAoCANuwvI2qDjmdLVqOnNo5FtUBenSbytrHLEvVIZyQMt\/wBHlOcBmA7ZGKiI0\/ZNnrdVKGmXVRWuXQMUpghXYL8NKmCSABhiwdducfhORkmfKdHTbOjVFKsp3JWUE\/G2NtdUYEjgkFMAbTnvngzDRHH7Js9betaaWLjZTqAoC2Czn1a2AJZRuI2mq20ngg\/hn40yhp1vc3QrVQULMiMSSwpt5ZDUxtO5vxgk8javvzi4jZ7Jt9bGw+w21\/cDdRNEVKJ+9AqM1Py6\/mrSOGIYuaeMEHheeJ2bPTtKyFuKyYIpFnLuCD\/ygVAn+CcH3PHG2YWInT9k2+tZpaWlTRxT1B6KlarYIxvq\/i2h38svRXIX41Ygqx+EHmc32fTW05WrvmqE+JFbauVpZC5Ay2XyN3J4GT742Jdnpt9bFrDTFNTbVJUCpsO8hiRVYKMEAACnsYHncS3ttn60AWdDSvL1dqHmLckM+FYlRUtcFc0yzKQK3O4KATlWyMYyJNnsm31tX0uhpVegSETzbN2D3O10800kK5UhgCrMPy45Hec93a6VULNbVKYLhhgl1VCalLDKuMjAFXAwOCBjtMIWLY3EnAwM+g9hPkcc\/wBk2etNdWdglW78ioSFRTbgNwSaZLjJPO2pgY54zjP4h6CVNNurVKThKbItHzKvYVNtI71XGCCXYhjkZKqc+sxMSzT2Tb63KUNNtq9aklRGosF2VC5L5Bc5I24XB2jGMMMZzPlzZ6VVu3K1SB8eArYDHFEgjIATG6qABx8A4PY4eJOP2TZ61VlaWNxbUm1Cqi4tcFEO1vNFVsl+MZ8sjBOc4HfAB7N1ZaXbOPKqeZwxOKjgZWk+B2z8VQL6559PTGRLs9k2+t9b6Tpuoas1K2ffw3lsrFdwp07bAIVRndmuxbv92f1xmrUBa6rVRFKhajKFY5IAYgAkEgnGPWdVWKtlTg+44iK1mP1YjH6+RETbRERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQEREBERAREQERED5vHuI3j3EqkTlyeOe9K949xG8e4lUiOTw3pXvHuI3j3EqkRyeG9K949xG8e4lUiOTw3pXvHuI3j3EqkRyeG9K949xG8e4lUiOTw3pXvHuI3j3EqkRyeG9K949xG8e4lUiOTw3pXvHuI3j3EqkRyeG9K949xG8e4lUiOTw3pXvHuI3j3EqkRyeG9K949xG8e4lUiOTw3pXvHuI3j3EqkRyeG9K949xG8e4lUiOTw3pXvHuI3j3EqkRyeG9K949xG8e4lUiOTw3pXvHuI3j3EqkRyeG9K949xG8e4lUiOTw3pXvHuI3j3EqkRyeG9\/\/2Q==',width=400,height=400)","98c0415b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.express as px\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","299e8327":"df=pd.read_csv(\"..\/input\/pesquisa-data-hackers-2019\/datahackers-survey-2019-anonymous-responses.csv\")\ndf.head()","5df2af8e":"fig,axes = plt.subplots(1,1,figsize=(20,5))\nsns.heatmap(df.isna(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","a9e5a7b1":"df = df.rename(columns={\"('P1', 'age')\":\"age\", \"('P2', 'gender')\": \"gender\", \"('P3', 'living_in_brasil')\": \"resident\", \"('P34', 'kaggle_learn')\": \"kaggle\", \"('P20', 'linear regression')\": \"linear\", \"('P24', 'sql')\": \"sql\", \"('P24', 'imagens')\": \"images\", \"('P20', 'nlp')\": \"nlp\", \"('P20', 'gans')\": \"gans\", \"('P35', 'data_science_plataforms_preference')\": \"platforms\", \"('P27', 'google_data_studio')\": \"google\"})","60d88b59":"px.histogram(df, x='resident', color='kaggle')","1d4a4282":"fig = px.bar(df, y=\"kaggle\", x=\"resident\", color=\"age\", orientation=\"h\",\n             color_continuous_scale='Bluered_r', hover_name=\"gender\")\n\nfig.show()","143bc4ba":"fig = px.bar(df,\n             y='kaggle',\n             x='resident',\n             orientation='h',\n             color='age',\n             title='Data Hackers Survey 2019',\n             opacity=0.8,\n             color_discrete_sequence=px.colors.diverging.Armyrose,\n             template='plotly_dark'\n            )\nfig.update_xaxes(range=[0,35])\nfig.show()","d95c5c1d":"corr=df[df.columns.sort_values()].corr()\nmask = np.zeros_like(corr, dtype=np.bool)\nmask[np.triu_indices_from(mask)] = True\n\nfig = go.Figure(data=go.Heatmap(z=corr.mask(mask),\n                                x=corr.columns.values,\n                                y=corr.columns.values,\n                                xgap=1, ygap=1,\n                                colorscale=\"Rainbow\",\n                                colorbar_thickness=20,\n                                colorbar_ticklen=3,\n                                zmid=0),\n                layout = go.Layout(title_text='Correlation Matrix', template='plotly_dark',\n                height=900,\n                xaxis_showgrid=False,\n                yaxis_showgrid=False,\n                yaxis_autorange='reversed'))\nfig.show()","7266aac1":"fig = px.bar_polar(df, r=\"kaggle\", theta=\"age\", color=\"resident\", template=\"plotly_dark\",\n            color_discrete_sequence= px.colors.sequential.Plasma_r)\nfig.show()","aef2e719":"fig = px.parallel_categories(df, color=\"kaggle\", color_continuous_scale=px.colors.sequential.Viridis)\nfig.show()","193ac3a4":"fig = px.bar(df, x= \"kaggle\", y= \"resident\", color_discrete_sequence=['crimson'],)\nfig.show()","2882542e":"fig = px.line(df, x=\"resident\", y=\"kaggle\", color_discrete_sequence=['green'], \n              title=\"Data Hackers Survey 2019\")\nfig.show()","fa48557d":"fig = px.bar(df[['resident','kaggle']].sort_values('kaggle', ascending=False), \n                        y = \"kaggle\", x= \"resident\", color='kaggle', template='ggplot2')\nfig.update_xaxes(tickangle=45, tickfont=dict(family='Rockwell', color='crimson', size=14))\nfig.update_layout(title_text=\"Data Hackers Survey 2019\")\n\nfig.show()","a9fef346":"fig = px.pie(df, values=df['kaggle'], names=df['resident'],\n             title='Data Hackers Survey 2019 ',\n            )\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","31b29950":"fig = px.density_contour(df, x=\"kaggle\", y=\"resident\", color_discrete_sequence=['purple'])\nfig.show()","9e0c1610":"fig = px.histogram(df[df.kaggle.notna()],x=\"kaggle\",marginal=\"box\",nbins=10)\nfig.update_layout(\n    title = \"Data Hackers Survey 2019\",\n    xaxis_title=\"Kaggle\",\n    yaxis_title=\"resident\",\n    template='plotly_dark',\n    barmode=\"group\",\n    bargap=0.1,\n    xaxis = dict(\n        tickmode = 'linear',\n        tick0 = 0,\n        dtick = 10),\n    font=dict(\n        family=\"Arial, monospace\",\n        size=15,\n        color=\"#7f7f7f\"\n    )\n    )\npy.iplot(fig)","9542367d":"fig = px.scatter(df, x=\"age\", y=\"resident\", color=\"kaggle\", marginal_y=\"rug\", marginal_x=\"histogram\")\nfig","df9635d8":"fig = px.scatter(df, x=\"kaggle\", y=\"resident\", color=\"age\", marginal_y=\"violin\",\n           marginal_x=\"box\", trendline=\"ols\")\nfig.show()","13cb48c4":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url = 'https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcSG4amSI0Xu4hLrHS2MNVF2r0UdAoVenr9lQtnRnUAViWzKskUR&usqp=CAU',width=400,height=400)","7335924e":"Kaggle Notebook Runner: Mar\u00edlia Prata   @mpwolke","4c2ba8f4":"rsirius.uerj.br - Database providers provide access to research on COVID-19\n\nhttps:\/\/translate.googleusercontent.com\/translate_c?depth=1&hl=en&prev=search&rurl=translate.google.com.br&sl=pt&sp=nmt4&u=https:\/\/portal.fiocruz.br\/coronavirus\/informacao-em-saude&usg=ALkJrhg26hAOPyFE3sbkKbtG2depzZkp4Q\n\nhttps:\/\/translate.googleusercontent.com\/translate_c?depth=1&hl=en&prev=search&rurl=translate.google.com.br&sl=pt&sp=nmt4&u=https:\/\/complete.bioone.org\/covid-19&usg=ALkJrhjmamh-PPxnTeLOxPw8u7buWX17xA\n\nhttps:\/\/translate.google.com\/translate?depth=1&hl=en&prev=search&rurl=translate.google.com.br&sl=pt&sp=nmt4&u=https:\/\/www.microbiologyresearch.org\/content\/coronaviruses","d236c71d":"#I'm probably the worst Kaggler ever (in skills terms not commitment terms). But as far as I can see there aren't many brazilian residents kaggling in Kaggle micro-courses.","9982dc6e":"That's very messy.","679bdd33":"#Data Hackers \n\nExcellent content on data science available in blog, newsletter, podcast and Slack format. \n\nCreated by the community, for the Brazilian community of data science, machine learning, big data and artificial intelligence.","4054da04":"slideshare.net"}}