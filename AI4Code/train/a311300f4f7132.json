{"cell_type":{"6ce65449":"code","ff2bd2fb":"code","17685d72":"code","2a0eb82b":"code","bb6732fa":"code","f371ecc8":"code","ac528f9d":"code","2cbd448c":"code","15015f6c":"code","45cd0289":"code","f3e93d1f":"code","089d75df":"code","50ad310b":"code","d1363a62":"code","fe28368b":"code","05ba485d":"code","7d9703e9":"code","19c1fc61":"code","e9a0b20d":"code","e99a25b3":"code","10ead2e8":"code","aaf778ba":"code","05649a60":"code","eaa27e93":"code","efa21203":"code","b51ff2cb":"code","a0682afb":"code","96aaf97d":"code","582c5e6d":"code","3f119b58":"code","63897f51":"code","ccd36cfa":"code","b9ec9f88":"code","c10ba593":"code","955a360c":"code","aab9254b":"code","78ecdca2":"code","a5b7f118":"code","65f28674":"code","a21ae59f":"code","c4e548df":"code","c0852edf":"code","2e1b471b":"code","c61dea3c":"code","87711cf6":"code","78b32ee4":"code","6c108633":"code","3f0c8b58":"code","936437f9":"code","30f0e19f":"markdown","d9aec2cc":"markdown"},"source":{"6ce65449":"import numpy as np \nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nfrom tqdm import tqdm\nfrom random import shuffle\nfrom keras.utils  import to_categorical\nimport pickle","ff2bd2fb":"def load_rand():\n    X=[]\n    dir_path='\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train'\n    for sub_dir in tqdm(os.listdir(dir_path)):\n        print(sub_dir)\n        path_main=os.path.join(dir_path,sub_dir)\n        i=0\n        for img_name in os.listdir(path_main):\n            if i>=6:\n                break\n            img=cv2.imread(os.path.join(path_main,img_name))\n            img=cv2.resize(img,(100,100))\n            img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n            X.append(img)\n            i+=1\n    return X\n    ","17685d72":"X=load_rand()","2a0eb82b":"X=np.array(X)\nX.shape","bb6732fa":"def show_subpot(X,title=False,Y=None):\n    if X.shape[0]==36:\n        f, ax= plt.subplots(6,6, figsize=(40,60))\n        list_fruits=['rottenoranges', 'rottenapples', 'freshbanana', 'freshoranges', 'rottenbanana', 'freshapples']\n        for i,img in enumerate(X):\n            ax[i\/\/6][i%6].imshow(img, aspect='auto')\n            if title==False:\n                ax[i\/\/6][i%6].set_title(list_fruits[i\/\/6])\n            elif title and Y is not None:\n                ax[i\/\/6][i%6].set_title(Y[i])\n        plt.show()\n    else:\n        print('Cannot plot')","f371ecc8":"show_subpot(X)","ac528f9d":"del X","2cbd448c":"def load_rottenvsfresh():\n    quality=['fresh', 'rotten']\n    X,Y=[],[]\n    z=[]\n    for cata in tqdm(os.listdir('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train')):\n        if quality[0] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,0])\n        else:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,1])\n    print('Shuffling your data.....')\n    shuffle(z)\n    for images, labels in tqdm(z):\n        X.append(images);Y.append(labels)\n    return X,Y","15015f6c":"X,Y=load_rottenvsfresh()","45cd0289":"Y=np.array(Y)\nX=np.array(X)","f3e93d1f":"y_ser=pd.Series(Y)\ny_ser.value_counts()","089d75df":"def load_rottenvsfresh_valset():\n    quality=['fresh', 'rotten']\n    X,Y=[],[]\n    z=[]\n    for cata in tqdm(os.listdir('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test')):\n        if quality[0] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,0])\n        else:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,1])\n    print('Shuffling your data.....')\n    shuffle(z)\n    for images, labels in tqdm(z):\n        X.append(images);Y.append(labels)\n    return X,Y            ","50ad310b":"X_val,Y_val=load_rottenvsfresh_valset()","d1363a62":"Y_val=np.array(Y_val)\nX_val=np.array(X_val)\ny_ser=pd.Series(Y_val)\ny_ser.value_counts()","fe28368b":"import keras \nfrom keras.layers import Dense,Dropout, Conv2D,MaxPooling2D , Activation, Flatten, BatchNormalization, SeparableConv2D\nfrom keras.models import Sequential","05ba485d":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu', input_shape=(100,100,3)))\nmodel.add(BatchNormalization())\nmodel.add(SeparableConv2D(32, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\n\nmodel.add(SeparableConv2D(64, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(SeparableConv2D(64, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(Conv2D(128, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\n# model.add(BatchNormalization())\nmodel.add(Conv2D(128, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\n\n#model.add(Dense(512, activation='relu', kernel_initializer='he_uniform'))\n#model.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(1, activation='sigmoid'))","7d9703e9":"model.summary()","19c1fc61":"import tensorflow as tf","e9a0b20d":"lr_rate=keras.callbacks.ReduceLROnPlateau(\n    monitor='val_loss', factor=0.5, patience=6, verbose=1, mode='max',\n    min_lr=0.00002, cooldown=2)\ncheck_point=tf.keras.callbacks.ModelCheckpoint(\n    filepath='\/kaggle\/working\/rotten.h5', monitor='val_loss', verbose=1, save_best_only=True,\n    save_weights_only=False, mode='min')\n\nmodel.compile(loss=keras.losses.binary_crossentropy, optimizer = keras.optimizers.Adam(lr = 0.001), metrics=['accuracy'])","e99a25b3":"X=X\/255.0\nX_val=X_val\/255.0","10ead2e8":"history=model.fit(X,Y,batch_size=20,validation_data=(X_val,Y_val),epochs= 50,\n                 callbacks=[check_point])","aaf778ba":"plt.figure(1, figsize = (20, 12))\nplt.subplot(1,2,1)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot( history.history[\"loss\"], label = \"Training Loss\")\nplt.plot( history.history[\"val_loss\"], label = \"Validation Loss\")\nplt.grid(True)\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.plot( history.history[\"accuracy\"], label = \"Training Accuracy\")\nplt.plot( history.history[\"val_accuracy\"], label = \"Validation Accuracy\")\nplt.grid(True)\nplt.legend()","05649a60":"model.evaluate(X_val,Y_val)","eaa27e93":"model.save('\/kaggle\/working\/rottenvsfresh.h5')","efa21203":"from keras.models import Model, load_model","b51ff2cb":"new_model=load_model('\/kaggle\/working\/rotten.h5')","a0682afb":"new_model.evaluate(X_val,Y_val)","96aaf97d":"plt.imshow(X_val[0])","582c5e6d":"model.predict(X_val[0].reshape(1,100,100,3))","3f119b58":"show_subpot(X_val[-36*11:-36*10])","63897f51":"model.predict_classes(X_val[-36*11:-36*10])","ccd36cfa":"def load_fruits_data():\n    quality=['apples', 'banana','oranges']\n    X,Y=[],[]\n    z=[]\n    for cata in tqdm(os.listdir('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test')):\n        if quality[0] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,0])\n        elif quality[1] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,1])\n        elif quality[2] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/test',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,2])\n        \n    print('Shuffling your data.....')\n    shuffle(z)\n    for images, labels in tqdm(z):\n        X.append(images);Y.append(labels)\n    return X,Y \n    ","b9ec9f88":"def load_fruits_train_data():\n    quality=['apples', 'banana','oranges']\n    X,Y=[],[]\n    z=[]\n    for cata in tqdm(os.listdir('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train')):\n        if quality[0] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,0])\n        elif quality[1] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,1])\n        elif quality[2] in cata:\n            path_main=os.path.join('\/kaggle\/input\/fruits-fresh-and-rotten-for-classification\/dataset\/train',cata)\n            for img_name in os.listdir(path_main):\n                img=cv2.imread(os.path.join(path_main,img_name))\n                img=cv2.resize(img,(100,100))\n                img=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)\n                z.append([img,2])\n        \n    print('Shuffling your data.....')\n    shuffle(z)\n    for images, labels in tqdm(z):\n        X.append(images);Y.append(labels)\n    return X,Y \n    ","c10ba593":"X_val,Y_val=load_fruits_data()","955a360c":"X,Y=load_fruits_train_data()","aab9254b":"X=np.array(X)\nX_val=np.array(X_val)","78ecdca2":"X.shape,X_val.shape","a5b7f118":"X=X\/255.0\nX_val=X_val\/255.0","65f28674":"Y=to_categorical(Y)\nY","a21ae59f":"Y_test=to_categorical(Y_val)\nY_val=np.array(Y_val)","c4e548df":"Y.shape,Y_test.shape, Y_val.shape","c0852edf":"model = Sequential()\n\nmodel.add(Conv2D(32, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu', input_shape=(100,100,3)))\nmodel.add(BatchNormalization())\nmodel.add(SeparableConv2D(32, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.3))\n\nmodel.add(SeparableConv2D(64, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(SeparableConv2D(64, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(SeparableConv2D(64, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.4))\n\nmodel.add(SeparableConv2D(128, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(SeparableConv2D(128, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(SeparableConv2D(128, (3, 3), kernel_initializer='he_uniform', padding='same', activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(MaxPooling2D((2, 2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\n\n#model.add(Dense(512, activation='relu', kernel_initializer='he_uniform'))\n#model.add(Dropout(0.5))\nmodel.add(Dense(128, activation='relu', kernel_initializer='he_uniform'))\nmodel.add(Dropout(0.3))\n\nmodel.add(Dense(3, activation='softmax'))","2e1b471b":"lr_rate=keras.callbacks.ReduceLROnPlateau(\n    monitor='val_loss', factor=0.5, patience=6, verbose=1, mode='max',\n    min_lr=0.00002, cooldown=2)\ncheck_point=tf.keras.callbacks.ModelCheckpoint(\n    filepath='\/kaggle\/working\/fruit_cata.h5', monitor='val_loss', verbose=1, save_best_only=True,\n    save_weights_only=False, mode='min')\n\nmodel.compile(loss=keras.losses.categorical_crossentropy, optimizer = keras.optimizers.Adam(lr = 0.001), metrics=['accuracy'])","c61dea3c":"history=model.fit(X,Y,batch_size=20,validation_data=(X_val,Y_test),epochs= 40,\n                 callbacks=[check_point])","87711cf6":"plt.figure(1, figsize = (20, 12))\nplt.subplot(1,2,1)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Loss\")\nplt.plot( history.history[\"loss\"], label = \"Training Loss\")\nplt.plot( history.history[\"val_loss\"], label = \"Validation Loss\")\nplt.grid(True)\nplt.legend()\n\nplt.subplot(1,2,2)\nplt.xlabel(\"Epochs\")\nplt.ylabel(\"Accuracy\")\nplt.plot( history.history[\"accuracy\"], label = \"Training Accuracy\")\nplt.plot( history.history[\"val_accuracy\"], label = \"Validation Accuracy\")\nplt.grid(True)\nplt.legend()","78b32ee4":"model=load_model('fruit_cata.h5')","6c108633":"model.evaluate(X,Y)","3f0c8b58":"show_subpot(X_val[:36],title=True,Y=model.predict_classes(X_val[:36]))","936437f9":"model.predict_classes(X_val[:36])","30f0e19f":"# Category of Fruits","d9aec2cc":"# Rotten vs fresh"}}