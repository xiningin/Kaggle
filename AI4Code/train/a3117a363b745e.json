{"cell_type":{"f9e67547":"code","0e88bd1c":"code","d14e4a7a":"code","84abfc5f":"code","86d69674":"code","03a4daec":"code","9652fbc4":"code","8f032f8d":"code","03cf0d93":"code","3331dd51":"code","495c7e5a":"code","6f8ffd6d":"code","3f4d5091":"code","fee42554":"code","da04e003":"code","144637b5":"code","30f49952":"code","2fd64f09":"code","08d35a56":"code","317a052f":"code","a3c24281":"code","ee296473":"code","8d5529e7":"code","5f3c45bb":"code","2e784a16":"code","bb0b77c9":"code","b92829ed":"code","bacc2a4b":"code","ab4aa787":"markdown","871e4162":"markdown","d69486d7":"markdown","074df336":"markdown","4661d1cf":"markdown","d3bdae9a":"markdown"},"source":{"f9e67547":"import tensorflow as tf\nfrom tqdm import tqdm","0e88bd1c":"from tensorflow.examples.tutorials.mnist import input_data","d14e4a7a":"mnist = input_data.read_data_sets(\"..\/input\/mnist_data\/MNIST_data\", one_hot = True)","84abfc5f":"def init_weights(shape):\n    init_random_dist = tf.truncated_normal(shape, stddev=0.1)\n    return tf.Variable(init_random_dist)","86d69674":"def init_bias(shape):\n    init_random_bias = tf.constant(0.1, shape=shape)\n    return tf.Variable(init_random_bias)","03a4daec":"def conv2d(x,W):\n    # Creating a convolutional Neural Network\n    # x ----> [batch, H, W, Channel]\n    # W ----> [filter H, filter w, channels IN, channel out]\n    return tf.nn.conv2d(x, W, strides=[1,1,1,1], padding=\"SAME\")","9652fbc4":"def max_pool_2by2(x):\n    # function for max pooling\n    # x ----> [batch, H, W, Channel]\n    return tf.nn.max_pool(x, ksize=[1,2,2,1] , strides = [1,2,2,1], padding=\"SAME\")","8f032f8d":"def convolutional_layer(input_x, shape):\n    # returning the output after passing the Convolutional Neural Network to Relu Activation Function\n    W = init_weights(shape)\n    b = init_bias([shape[3]])\n    return tf.nn.relu(conv2d(input_x, W) + b)","03cf0d93":"def normal_full_layer(input_layer, size):\n    # Fully connected layer for last\n    input_size = int(input_layer.get_shape()[1])\n    W = init_weights([input_size, size])\n    b = init_bias([size])\n    return tf.matmul(input_layer, W) + b","3331dd51":"# Placeholders for our input x and output y\nx = tf.placeholder(tf.float32, shape=[None, 784])\ny_true = tf.placeholder(tf.float32, shape=[None,10])","495c7e5a":"# Reshaping our input x (2-D) into our accepted input for CNN Network that is 4-D\nx_image = tf.reshape(x, shape=[-1,28,28,1]) # 784 = 28*28","6f8ffd6d":"convo1 = convolutional_layer(x_image, shape = [5,5,1,32])\nconvo_1_pooling = max_pool_2by2(convo1)","3f4d5091":"convo_2 = convolutional_layer(convo_1_pooling,shape=[6,6,32,64])\nconvo_2_pooling = max_pool_2by2(convo_2)","fee42554":"# After first max pooling : 28\/2 = 14\n# After second max pooling : 14\/2 = 7\nconvo_2_flat = tf.reshape(convo_2_pooling,[-1,7*7*64])\nfull_layer_one = tf.nn.relu(normal_full_layer(convo_2_flat,1024))\n#1024 is the nos. of neurons we want in our fully connected layer","da04e003":"hold_prob = tf.placeholder(tf.float32)\nfull_one_dropout = tf.nn.dropout(full_layer_one,keep_prob=hold_prob)","144637b5":"y_pred = normal_full_layer(full_one_dropout,10)","30f49952":"print(\"input Size: \", x.get_shape())\nprint(\"After reshaping, input Size: \", x_image.get_shape())\nprint(\"After first conolution: \", convo1.get_shape())\nprint(\"After first Pooling: \", convo_1_pooling.get_shape())\nprint(\"After second conolution: \", convo_2.get_shape())\nprint(\"After second Pooling: \", convo_2_pooling.get_shape())\nprint(\"After flatening: \",convo_2_flat.get_shape())\nprint(\"After first fully dense NN: \",full_layer_one.get_shape())\nprint(\"After first dropout: \",full_one_dropout.get_shape())\nprint(\"Prediction: \", y_pred.get_shape())","2fd64f09":"cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=y_true,logits=y_pred))","08d35a56":"optimizer = tf.train.AdamOptimizer(learning_rate=0.0001)\ntrain = optimizer.minimize(cross_entropy)","317a052f":"init = tf.global_variables_initializer()","a3c24281":"sess = tf.Session()","ee296473":"sess.run(init)","8d5529e7":"epochs = 50000\nfor i in tqdm(range(epochs)):\n\n    batch_x , batch_y = mnist.train.next_batch(50)\n\n    sess.run(train,feed_dict={x:batch_x,y_true:batch_y,hold_prob:0.5})","5f3c45bb":"saver = tf.train.Saver()","2e784a16":"# To restore the previous weights run the next command\nsaver.save(sess, \".\/CNN Model\/CNN Model\")","bb0b77c9":"saver.restore(sess, \".\/CNN Model\/CNN Model\")","b92829ed":"matches = tf.equal(tf.argmax(y_pred,1),tf.argmax(y_true,1))\nacc = tf.reduce_mean(tf.cast(matches,tf.float32))\nprint(sess.run(acc,feed_dict={x:mnist.test.images,y_true:mnist.test.labels,hold_prob:1.0}))","bacc2a4b":"sess.close()","ab4aa787":"# Functions to Create Layers","871e4162":"# Dimensions after different layers","d69486d7":"# Loss","074df336":"## 99.36%","4661d1cf":"# Accuracy","d3bdae9a":"#  Network"}}