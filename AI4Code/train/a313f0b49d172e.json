{"cell_type":{"792dc874":"code","2b8428a0":"code","999b0267":"code","6e861a33":"code","91217422":"code","0953497e":"code","6ed3f496":"code","5bd0107d":"code","d4ffb08a":"code","9f4ef241":"code","8c26e9a0":"code","9587780f":"code","34b75e43":"code","21074741":"code","f9464922":"code","5f1aa02e":"code","b19b070d":"code","2d1e7080":"code","099e2b5d":"code","ac2478f9":"code","cc43b9a9":"code","a9cfd09a":"code","502dab39":"code","d85190c4":"code","68a55f4c":"code","09fb3fe2":"code","7448ae23":"code","b575cc69":"code","b578c6a7":"code","5db17274":"code","99b0e386":"code","e818cc3a":"code","c0e795f0":"code","6d5a05e4":"code","d71fa056":"code","6c432f95":"markdown","9fe3ef80":"markdown","3b1bfd99":"markdown","3692dff8":"markdown","0225a749":"markdown"},"source":{"792dc874":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport datetime\nwarnings.filterwarnings(\"ignore\")\nimport gc\n# Any results you write to the current directory are saved as output.","2b8428a0":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df","999b0267":"train = pd.read_csv(\"..\/input\/train.csv\", parse_dates=[\"first_active_month\"])\ntest = pd.read_csv(\"..\/input\/test.csv\", parse_dates=[\"first_active_month\"])","6e861a33":"new_m_trans=reduce_mem_usage(pd.read_csv(\"..\/input\/new_merchant_transactions.csv\"))\nhist_trans=reduce_mem_usage(pd.read_csv(\"..\/input\/historical_transactions.csv\"))","91217422":"train.head()","0953497e":"new_m_trans.head(10)","6ed3f496":"train.head()","5bd0107d":"plt.figure(figsize=(12,8))\nsns.distplot(train[\"target\"].values,kde=True)\nplt.xlabel(\"score\")\nplt.title(\"histogram of Loyality score\")\nplt.show()","d4ffb08a":"train[train[\"target\"]<-30].shape[0]\/train.shape[0] * 100","9f4ef241":"plt.figure(figsize=(10,8))\nimport seaborn as sns \nsns.boxplot(train[\"target\"].values)","8c26e9a0":"plt.figure(figsize=(10,8))\nsns.set_style(\"whitegrid\")\nsns.violinplot(train[\"target\"].values)","9587780f":"f, (ax1,ax2,ax3) = plt.subplots(ncols=3, figsize=(17, 6), sharex=True)\nsns.despine(left=True)\n\nsns.distplot(train[\"feature_1\"].values,kde=False,ax=ax1)\nsns.distplot(train[\"feature_2\"].values,kde=False,ax=ax2)\nsns.distplot(train[\"feature_3\"].values,kde=False,ax=ax3)","34b75e43":"new_m_trans.isnull().sum()","21074741":"new_m_trans.category_3.value_counts(),new_m_trans.category_2.value_counts()","f9464922":"dic=pd.read_excel(\"..\/input\/Data_Dictionary.xlsx\")\ndic","5f1aa02e":"merchants=pd.read_csv(\"..\/input\/merchants.csv\")\nmerchants.head()","b19b070d":"new_m_trans.installments.value_counts()\n","2d1e7080":"train=pd.get_dummies(train,columns=[\"feature_1\",\"feature_2\"])\ntest=pd.get_dummies(test,columns=[\"feature_1\",\"feature_2\"])","099e2b5d":"train.head()","ac2478f9":"for df in [new_m_trans,hist_trans]:\n    df[\"category_2\"].fillna(df[\"category_2\"].mode(),inplace=True,)\n    df[\"category_3\"].fillna(\"A\",inplace=True)\n    df['merchant_id'].fillna('M_ID_00a6ca8a8a',inplace=True)","cc43b9a9":"hist_trans.installments.replace(999,0,inplace=True)\nhist_trans.installments.replace(-1,0,inplace=True)\nnew_m_trans.installments.replace(999,0,inplace=True)\nnew_m_trans.installments.replace(-1,0,inplace=True)","a9cfd09a":"for df in [hist_trans,new_m_trans]:\n    df[\"purchase_date\"]=pd.to_datetime(df[\"purchase_date\"])\n    df[\"year\"]=df[\"purchase_date\"].dt.year\n    df[\"weekofyear\"]=df[\"purchase_date\"].dt.weekofyear\n    df[\"month\"]=df[\"purchase_date\"].dt.month\n    df[\"dayofweek\"]=df[\"purchase_date\"].dt.dayofweek\n    df['weekend'] = (df.purchase_date.dt.weekday >=5).astype(int)\n    df[\"hour\"]=df[\"purchase_date\"].dt.hour\n    df[\"authorized_flag\"]=df[\"authorized_flag\"].map({\"Y\":1,\"N\":0})\n    df[\"category_1\"]=df[\"category_1\"].map({\"Y\":1,\"N\":0})\n    df[\"month_diff\"]=((datetime.datetime.today() - df['purchase_date']).dt.days)\/\/30\n    df[\"month_diff\"]+= df['month_lag']","502dab39":"hist_trans = pd.get_dummies(hist_trans, columns=['category_2', 'category_3'])\nnew_m_trans=pd.get_dummies(new_m_trans, columns=[\"category_2\",\"category_3\"])","d85190c4":"hist_trans.head()","68a55f4c":"def get_new_columns(name,aggs):\n    return [name + '_' + k + '_' + agg for k in aggs.keys() for agg in aggs[k]]\n","09fb3fe2":"aggs = {}\nfor col in ['month','hour','weekofyear','dayofweek','year','subsector_id','merchant_id','merchant_category_id','state_id']:\n    aggs[col] = ['nunique']\n\naggs['purchase_amount'] = ['sum','max','min','mean','var']\naggs['installments'] = ['sum','max','min','mean','var']\naggs['purchase_date'] = ['max','min']\naggs['month_lag'] = ['max','min','mean','var']\naggs['month_diff'] = [\"min\",\"max\",'mean']\naggs['authorized_flag'] = ['sum', 'mean']\naggs['weekend'] = ['sum', 'mean']\naggs['category_1'] = ['sum', 'mean']\naggs['card_id'] = ['size']\naggs['category_1']= ['sum','mean']\naggs['category_2_1.0']= ['mean','sum']\naggs['category_2_2.0']= ['mean','sum']\naggs['category_2_3.0']= ['mean','sum']\naggs['category_2_4.0']=['mean','sum']\naggs['category_2_5.0']= ['mean','sum']\naggs['category_3_A']= ['mean','sum']\naggs['category_3_B']= ['mean','sum']\naggs['category_3_C']= ['mean','sum']\n\n\n\nnew_columns = get_new_columns('hist',aggs)\nhist_trans_group = hist_trans.groupby('card_id').agg(aggs)\nhist_trans_group.columns = new_columns\nhist_trans_group.reset_index(drop=False,inplace=True)\nhist_trans_group['hist_purchase_date_diff'] = (hist_trans_group['hist_purchase_date_max'] - hist_trans_group['hist_purchase_date_min']).dt.days\nhist_trans_group['hist_purchase_date_average'] = hist_trans_group['hist_purchase_date_diff']\/hist_trans_group['hist_card_id_size']\nhist_trans_group['hist_purchase_date_uptonow'] = (datetime.datetime.today() - hist_trans_group['hist_purchase_date_max']).dt.days\ntrain = train.merge(hist_trans_group,on='card_id',how='left')\ntest = test.merge(hist_trans_group,on='card_id',how='left')\ndel hist_trans_group;gc.collect();gc.collect()","7448ae23":"aggs = {}\nfor col in ['month','hour','weekofyear','dayofweek','year','subsector_id','merchant_id','merchant_category_id','state_id']:\n    aggs[col] = ['nunique']\naggs['purchase_amount'] = ['sum','max','min','mean','var']\naggs['installments'] = ['sum','max','min','mean','var']\naggs['purchase_date'] = ['max','min']\naggs['month_lag'] = ['max','min','mean','var']\naggs['month_diff'] = [\"min\",\"max\",'mean']\naggs['authorized_flag'] = ['sum', 'mean']\naggs['weekend'] = ['sum', 'mean']\naggs['category_1'] = ['sum', 'mean']\naggs['card_id'] = ['size']\naggs['category_1']= ['sum','mean']\naggs['category_2_1.0']= ['mean','sum']\naggs['category_2_2.0']= ['mean','sum']\naggs['category_2_3.0']= ['mean','sum']\naggs['category_2_4.0']=['mean','sum']\naggs['category_2_5.0']= ['mean','sum']\naggs['category_3_A']= ['mean','sum']\naggs['category_3_B']= ['mean','sum']\naggs['category_3_C']= ['mean','sum']\n\n\n    \nnew_columns = get_new_columns('new_hist',aggs)\nhist_trans_group = new_m_trans.groupby('card_id').agg(aggs)\nhist_trans_group.columns = new_columns\nhist_trans_group.reset_index(drop=False,inplace=True)\nhist_trans_group['new_hist_purchase_date_diff'] = (hist_trans_group['new_hist_purchase_date_max'] - hist_trans_group['new_hist_purchase_date_min']).dt.days\nhist_trans_group['new_hist_purchase_date_average'] = hist_trans_group['new_hist_purchase_date_diff']\/hist_trans_group['new_hist_card_id_size']\nhist_trans_group['new_hist_purchase_date_uptonow'] = (datetime.datetime.today() - hist_trans_group['new_hist_purchase_date_max']).dt.days\ntrain = train.merge(hist_trans_group,on='card_id',how='left')\ntest = test.merge(hist_trans_group,on='card_id',how='left')\ndel hist_trans_group;gc.collect();gc.collect()","b575cc69":"\ndel hist_trans;gc.collect()\ndel new_m_trans;gc.collect()\ntrain.head(5)\n","b578c6a7":"train['outliers'] = 0\ntrain.loc[train['target'] < -30, 'outliers'] = 1\ntrain['outliers'].value_counts()","5db17274":"\nfor df in [train,test]:\n    df['first_active_month'] = pd.to_datetime(df['first_active_month'])\n    df['dayofweek'] = df['first_active_month'].dt.dayofweek\n    df['weekofyear'] = df['first_active_month'].dt.weekofyear\n    df['month'] = df['first_active_month'].dt.month\n    df['elapsed_time'] = (datetime.datetime.today() - df['first_active_month']).dt.days\n    df['hist_first_buy'] = (df['hist_purchase_date_min'] - df['first_active_month']).dt.days\n    df['new_hist_first_buy'] = (df['new_hist_purchase_date_min'] - df['first_active_month']).dt.days\n    for f in ['hist_purchase_date_max','hist_purchase_date_min','new_hist_purchase_date_max',\\\n                     'new_hist_purchase_date_min']:\n        df[f] = df[f].astype(np.int64) * 1e-9\n    df['card_id_total'] = df['new_hist_card_id_size']+df['hist_card_id_size']\n    df['purchase_amount_total'] = df['new_hist_purchase_amount_sum']+df['hist_purchase_amount_sum']\n\n\n","99b0e386":"\nfor f in ['feature_1_1',\"feature_1_2\",\"feature_1_3\",\"feature_1_4\",\"feature_1_5\",'feature_2_1',\"feature_2_2\",\"feature_2_3\"]:\n    order_label = train.groupby([f])['outliers'].mean()\n    train[f] = train[f].map(order_label)\n    test[f] = test[f].map(order_label)","e818cc3a":"train_columns = [c for c in train.columns if c not in ['card_id', 'first_active_month','target','outliers']]\ntarget = train['target']\ndel train['target']","c0e795f0":"\nimport lightgbm as lgb\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import KFold\nparam = {'num_leaves': 31,\n         'min_data_in_leaf': 30, \n         'objective':'regression',\n         'max_depth': -1,\n         'learning_rate': 0.01,\n         \"min_child_samples\": 20,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.9,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.9 ,\n         \"bagging_seed\": 11,\n         \"metric\": 'rmse',\n         \"lambda_l1\": 0.1,\n         \"verbosity\": -1,\n         \"nthread\": 4,\n         \"random_state\": 4590}\n\noof = np.zeros(len(train))\npredictions = np.zeros(len(test))\n#start = time.time()\n\nfolds = StratifiedKFold(n_splits=5, shuffle=True, random_state=15)\n\nfor fold_, (trn_idx, val_idx) in enumerate(folds.split(train,train['outliers'].values)):    \n    print(\"fold n\u00b0{}\".format(fold_))\n    trn_data = lgb.Dataset(train.iloc[trn_idx][train_columns], label=target.iloc[trn_idx])\n    val_data = lgb.Dataset(train.iloc[val_idx][train_columns], label=target.iloc[val_idx])\n\n    num_round = 10000\n    clf = lgb.train(param, trn_data, num_round, valid_sets = [trn_data, val_data], verbose_eval=100, early_stopping_rounds = 200)\n    oof[val_idx] = clf.predict(train.iloc[val_idx][train_columns], num_iteration=clf.best_iteration)\n    \n    predictions += clf.predict(test[train_columns], num_iteration=clf.best_iteration) \/ folds.n_splits\n\n","6d5a05e4":"from sklearn.metrics import mean_squared_error\nval_score = np.sqrt(mean_squared_error(target, oof))\nval_score","d71fa056":"sample_submission = pd.read_csv('..\/input\/sample_submission.csv')\nsample_submission['target'] = predictions\nsample_submission.to_csv('predict.csv', index=False)","6c432f95":"It shows clealy the data is not skewd and shows few outliers far away from the normal distribution. Its go and see what percentage of target is an outlier.","9fe3ef80":"\n\nThis shows that the Feature_1,2,3 are the discreate values of (0,1,2,3,4,5,) may be these are the categorical values.","3b1bfd99":"we can see clearly a small bump after -30 which shows clearly the outliers. Lets look the feature1,2 & 3.","3692dff8":"Lets look the violin plot so that we an get a good view of the outliers.","0225a749":"It shows around 1.09 percent of data is far away from the normal distribution. May be it will play an role in modeling. now lets hgo and look at the box plots."}}