{"cell_type":{"04f65deb":"code","774785ed":"code","7db8291c":"code","26b8a885":"code","22ce9b72":"code","600ec03a":"code","90dda5de":"code","a4c1aefc":"code","ae17bd06":"code","ade35287":"code","67e931f6":"code","427df8de":"code","d59ea770":"code","725d7ed6":"code","29cea37c":"code","283a3a0c":"code","bccc5411":"code","4be3a559":"code","8e462eef":"markdown","5d540292":"markdown","13786c09":"markdown","d22bc772":"markdown","4b94fcc7":"markdown","c3b77db0":"markdown","bb7a082b":"markdown","b7282517":"markdown","4a3a45f1":"markdown","13e0995a":"markdown","1291b5d3":"markdown","16fe1ad5":"markdown","d2f04114":"markdown"},"source":{"04f65deb":"import ee \nimport numpy as np \nimport os \nimport matplotlib.pyplot as plt \nimport folium\nimport pickle\nimport pandas as pd\nimport IPython.display as disp\n\nimport io\nfrom PIL import Image\n\n\n%matplotlib inline","774785ed":"\ndef get_coordinates(address,return_json=False,return_bb= False):\n    '''Get lat-long for a given address\n    SRC : https:\/\/stackoverflow.com\/questions\/25888396\/how-to-get-latitude-longitude-with-python'''\n    \n    import requests\n    from urllib import parse\n    \n    response = requests.get('https:\/\/nominatim.openstreetmap.org\/search\/' + parse.quote(address) + '?format=json')\n\n    resp= response.json()\n    \n    #return complete response file \n    if return_json:\n        return resp\n    \n    if return_bb:\n        return [(float(resp[0]['boundingbox'][i]),float(resp[0]['boundingbox'][i+2])) for i in range(len(resp[0]['boundingbox'])\/\/2)]\n    \n#   'returns LAT -  LONG'\n    \n    return (float(resp[0]['lat']),float(resp[0]['lon']))\n    ","7db8291c":"# setup to add ee layer to folium\n\ndef add_ee_layer(self, ee_image_object, vis_params, name,opacity=0.90):\n    '''function to add GEE layer to folium,\n    Source : GEE'''\n    map_id_dict = ee.Image(ee_image_object).getMapId(vis_params)\n    folium.raster_layers.TileLayer(\n          tiles=map_id_dict['tile_fetcher'].url_format,\n          attr='Map Data &copy; <a href=\"https:\/\/earthengine.google.com\/\">Google Earth Engine<\/a>',\n          name=name,\n          opacity=opacity,\n          overlay=True,\n          control=True\n      ).add_to(self)\n\nfolium.Map.add_ee_layer = add_ee_layer\n\n\ndef get_best_image(image_collection,\n                   year,\n                   area_of_interest,\n                   month=1):\n    '''filter the best image( with the least cloud cover value) for the given year and given month'''\n\n    start_date = ee.Date.fromYMD(**{\n        'day':1 ,\n        'month': month,\n        'year' : year})\n    end_date = ee.Date.fromYMD(**{\n        'day':30 ,\n        'month': month,\n        'year' : year})\n    \n    print(image_collection.filterDate(start_date,end_date).size().getInfo())\n    \n    if not area_of_interest:\n        # sort image by asc order of cloud pixel values\n        img = image_collection.filterDate(start_date,end_date).sort('CLOUD_COVER').first()\n    else:\n        img = image_collection.filterDate(start_date,end_date).sort('CLOUD_COVER').first().clip(area_of_interest)\n        \n    \n    return img ","26b8a885":"#authenticate earth engine\n# ee.Authenticate()","22ce9b72":"# inintialize earth engine\n\nee.Initialize()","600ec03a":"#VIIRS \nviirs_nightttime = ee.ImageCollection(\"NOAA\/VIIRS\/DNB\/MONTHLY_V1\/VCMCFG\")\n#dmps\n# dmsp = ee.ImageCollection(\"NOAA\/DMSP-OLS\/NIGHTTIME_LIGHTS\")\n\n# international boundaries dataset\ncountries = ee.FeatureCollection('USDOS\/LSIB_SIMPLE\/2017')","90dda5de":"\ncountry_list = ['India','USA','Germany','China','Russia','Japan']\n\n\n# get lat-long coordinates for above countries\ncoord_dict = {name:get_coordinates(name) for name in country_list}\n\n#visualizing params\nnighttimeVis = {'min': 0.0, \n                'max': 45}","a4c1aefc":"# getting a boundry \nindia = countries.filter(ee.Filter.eq('country_na','India'))\n\n# get best quality image (with lowest cloud cver), with a cliped image in area of interest\nIn_im = get_best_image(viirs_nightttime,year = 2020,area_of_interest=india,month = 11).select('avg_rad')\nIn_im2 = get_best_image(viirs_nightttime,year = 2012,area_of_interest=india,month = 11).select('avg_rad')\n\n\nM1 = folium.Map(location  = coord_dict['India'] ,min_zoom = 4,zoom_start= 6)\n\n\nM1.add_ee_layer(In_im, nighttimeVis, 'Nighttime 2020')\nM1.add_ee_layer(In_im2, nighttimeVis, 'Nighttime 2012')\nM1.add_child(folium.LayerControl())\n\nM1","ae17bd06":"dif1 = In_im.subtract(In_im2)\n\nM2 = folium.Map(location  = coord_dict['India'] ,min_zoom = 4,zoom_start= 6 )\n\n\nM2.add_ee_layer(dif1, nighttimeVis, 'Regions of New Growth(12-20)')\nM2.add_child(folium.LayerControl())\ndisplay(M2)","ade35287":"# get boundry and clipped image\nusa = countries.filter(ee.Filter.eq('country_na','United States'))\nUS_im = get_best_image(viirs_nightttime,year = 2020,area_of_interest=usa,month = 12).select('avg_rad')\nUS_im2 = get_best_image(viirs_nightttime,year = 2012,area_of_interest=usa,month = 12).select('avg_rad')\n\n\nM3 = folium.Map(location  = coord_dict['USA'] ,min_zoom = 4,zoom_start= 5)\n\n\nM3.add_ee_layer(US_im, nighttimeVis, 'Nighttime 2020')\nM3.add_ee_layer(US_im2, nighttimeVis, 'Nighttime 2012')\nM3.add_child(folium.LayerControl())\ndisplay(M3)","67e931f6":"dif2 = US_im.subtract(US_im2)\n\nM4 = folium.Map(location  = coord_dict['USA'] ,min_zoom = 4,zoom_start= 6 )\n\n\nM4.add_ee_layer(dif2, nighttimeVis, 'Regions of New Growth(12-20)')\nM4.add_child(folium.LayerControl())\ndisplay(M4)","427df8de":"\n# japan image \n\n# a radius of 1000 kms around returned coordinates\njapan = countries.filter(ee.Filter.eq('country_na','Japan'))\nJpn_im = get_best_image(viirs_nightttime,year = 2020,area_of_interest=japan,month = 12).select('avg_rad')\nJpn_im2 = get_best_image(viirs_nightttime,year = 2012,area_of_interest=japan,month = 12).select('avg_rad')\n\n\n\nM5 = folium.Map(location  = coord_dict['Japan'] ,min_zoom = 6,zoom_start= 7)\n\n\nM5.add_ee_layer(Jpn_im, nighttimeVis, 'Nighttime 2020')\nM5.add_ee_layer(Jpn_im2, nighttimeVis, 'Nighttime 2012')\nM5.add_child(folium.LayerControl())\nM5","d59ea770":"dif3 = Jpn_im.subtract(Jpn_im2)\n\nM6 = folium.Map(location  = coord_dict['Japan'] ,min_zoom = 4,zoom_start= 6 )\n\n\nM6.add_ee_layer(dif3, nighttimeVis, 'Regions of New Growth(12-20)')\nM6.add_child(folium.LayerControl())\ndisplay(M6)","725d7ed6":"# getting boundaries and clipped image\nger = countries.filter(ee.Filter.eq('country_na','Germany'))\nGer_im = get_best_image(viirs_nightttime,\n                        year = 2020,\n                        area_of_interest=ger\n                        ,month = 12).select('avg_rad')\nGer_im2 = get_best_image(viirs_nightttime,\n                        year = 2012,\n                        area_of_interest=ger\n                        ,month = 12).select('avg_rad')\n\n\nM7 = folium.Map(location  = coord_dict['Germany'] ,min_zoom = 6,zoom_start= 7)\n\n\nM7.add_ee_layer(Ger_im, nighttimeVis, 'Nighttime 2020')\nM7.add_ee_layer(Ger_im2, nighttimeVis, 'Nighttime 2012')\nM7.add_child(folium.LayerControl())\ndisplay(M7)","29cea37c":"dif4 = Ger_im.subtract(Ger_im2)\n\nM8= folium.Map(location  = coord_dict['Germany'] ,min_zoom = 4,zoom_start= 6 )\n\n\nM8.add_ee_layer(dif4, nighttimeVis, 'Regions of New Growth(12-20)')\nM8.add_child(folium.LayerControl())\ndisplay(M8)","283a3a0c":"# getting boundaries and clipped image\nchi = countries.filter(ee.Filter.eq('country_na','China'))\nChi_im = get_best_image(viirs_nightttime,\n                        year = 2020,\n                        area_of_interest=chi\n                        ,month = 12).select('avg_rad')\nChi_im2 = get_best_image(viirs_nightttime,\n                        year = 2012,\n                        area_of_interest=chi\n                        ,month = 12).select('avg_rad')\n\n\nM9 = folium.Map(location  = coord_dict['China'] ,min_zoom = 5,zoom_start= 6)\n\n\nM9.add_ee_layer(Chi_im, nighttimeVis, 'Nighttime 2020')\nM9.add_ee_layer(Chi_im2, nighttimeVis, 'Nighttime 2012')\nM9.add_child(folium.LayerControl())\ndisplay(M9)","bccc5411":"dif5 = Chi_im.subtract(Chi_im2)\n\nM10 = folium.Map(location  = coord_dict['China'] ,min_zoom = 4,zoom_start= 6 )\n\n\nM10.add_ee_layer(dif5, nighttimeVis, 'Regions of New Growth(12-20)')\nM10.add_child(folium.LayerControl())\ndisplay(M10)","4be3a559":"# getting boundaries and clipped image\nrus= countries.filter(ee.Filter.eq('country_na','Russia'))\nRus_im = get_best_image(viirs_nightttime,\n                        year = 2020,\n                        area_of_interest=rus\n                        ,month = 12).select('avg_rad')\n\nRus_im2 = get_best_image(viirs_nightttime,\n                        year = 2012,\n                        area_of_interest=rus\n                        ,month = 12).select('avg_rad')\n\nM11= folium.Map(location  = coord_dict['Russia'] ,min_zoom = 5,zoom_start= 6)\n\n\nM11.add_ee_layer(Rus_im, nighttimeVis, 'Nighttime 2020')\nM11.add_ee_layer(Rus_im2, nighttimeVis, 'Nighttime 2012')\nM11.add_child(folium.LayerControl())\ndisplay(M11)","8e462eef":"# **Japan**","5d540292":"**We can see growth around the outskirts of the major economical cities in India**","13786c09":"# **Germany**","d22bc772":"# **India**","4b94fcc7":"**The above visualization clearly shows that tokyo is one of the largest urban centers**","c3b77db0":"# USA \n\n","bb7a082b":"# Resources \n* Google maps API [https:\/\/github.com\/googlemaps\/google-maps-services-python]\n* Earth Data Science: https:\/\/www.earthdatascience.org\/courses\/scientists-guide-to-plotting-data-in-python\/plot-spatial-data\/customize-raster-plots\/interactive-maps\/ \n* Blog : https:\/\/medium.com\/omdena\/using-geospatial-data-analytics-a-friendly-guide-to-folium-and-rasterio-5568e724c699\n* Load layers as Numpy arrays https:\/\/gis.stackexchange.com\/questions\/350771\/earth-engine-simplest-way-to-move-from-ee-image-to-array-for-use-in-sklearn","b7282517":"**Finding regions with increased growth(By subtracting the first raster (2020) with sceond raster (2012))**","4a3a45f1":"# China","13e0995a":"# Note:\n* **The Layer on top of folium basemaps will disappear after a few days. Please re-run the notebook to see the Images with your authentication**","1291b5d3":"**Authenticate and Initialize Google Earth Engine**\n* **Running the ee.Authenticate() method generates a link, which is used to create a token for connecting to your google earth engine account.(If you don't have a Earth Engine account, you will have to sign up on the platform).After you sign in with your google account, you will get a token, which has to be pasted in the box generated by ee.Authenticate().** \n* **This completes the Authentication. Note that on Kaggle, you will have to generate a new Token for authenticating earth engine after a runtime a restarted(Atleast I know it this way.If anyone knows the right way, please correct me).**\n* **After Authenticating earth engine, you will have to Initialize Earth Engine with ee.Initialize(). Now you are good to go.**","16fe1ad5":"# **Russia**","d2f04114":"# Dataset Description\n**Monthly average radiance composite images using nighttime data from the Visible Infrared Imaging Radiometer Suite (VIIRS) Day\/Night Band (DNB).**\n\n**Prior to averaging, the DNB data is filtered to exclude data impacted by stray light, lightning, lunar illumination, and cloud-cover.**\n\n**Source :** [ https:\/\/developers.google.com\/earth-engine\/datasets\/catalog\/NOAA_VIIRS_DNB_MONTHLY_V1_VCMCFG#description ]"}}