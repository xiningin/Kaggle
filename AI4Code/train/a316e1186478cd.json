{"cell_type":{"2d813203":"code","523583c0":"code","77b81028":"code","3cc7ac9c":"code","5273a504":"code","de575aa8":"code","59bbcf57":"code","43c23ff1":"code","0eaa9d17":"code","7ccf8d7a":"code","5810d877":"code","c25ba205":"code","4adbe385":"code","bcaec801":"code","aa182a36":"code","68d5f687":"code","2130eba7":"code","00e1a944":"code","963200f8":"code","1617dde3":"code","80538d08":"code","6c4da6bb":"code","0da85a55":"code","d3b51009":"code","be7723df":"code","9c985f6d":"code","f8706cc8":"code","fe1e1993":"code","2f2d9771":"code","05144072":"code","6863ccc9":"code","4ef88bd8":"code","223f2fa3":"code","8a1bc11e":"code","00abf7d0":"code","79db7e99":"code","90b65ece":"code","a0b4e286":"code","2774c5e0":"code","0c4a1ef8":"code","58cec188":"code","485592af":"code","be216b87":"code","b13bcbef":"code","99e98c24":"code","961e4187":"code","7643920a":"code","d658f7d3":"code","01f1aeb7":"markdown","e6c277f3":"markdown","3f426a87":"markdown","69d456a1":"markdown","dea372a9":"markdown","22450cb1":"markdown","9e8367f6":"markdown","477d63e0":"markdown","b50336ea":"markdown"},"source":{"2d813203":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","523583c0":"import matplotlib.pyplot as plt\nimport seaborn as sns","77b81028":"filepath = \"..\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv\"","3cc7ac9c":"original_data = pd.read_csv(filepath)","5273a504":"original_data","de575aa8":"original_data.describe()","59bbcf57":"from sklearn.utils import shuffle\noriginal_data = shuffle(original_data)","43c23ff1":"original_data.head(10)","0eaa9d17":"original_data.isnull().sum()","7ccf8d7a":"original_data['bmi'].fillna(value=original_data['bmi'].mean(), inplace=True)\noriginal_data.head()","5810d877":"data = original_data.drop(columns = ['id','ever_married','Residence_type'],axis =1)\ndata.head()","c25ba205":"data = data.replace(to_replace = 'Male', value = 1)\ndata = data.replace(to_replace = 'Female', value = 0)\ndata.head()","4adbe385":"data.gender.value_counts()","bcaec801":"data = data.replace(to_replace = 'Other',value = 1)\ndata.gender.value_counts()","aa182a36":"data[\"work_type\"] = data[\"work_type\"].astype(\"category\")\ndata[\"work_type\"] = data[\"work_type\"].cat.codes\ndata.head()","68d5f687":"data[\"smoking_status\"] = data[\"smoking_status\"].astype(\"category\")\ndata[\"smoking_status\"] = data[\"smoking_status\"].cat.codes\ndata.head()","2130eba7":"X = data.drop(columns = 'stroke',axis =1)\ny = data['stroke']","00e1a944":"X","963200f8":"y","1617dde3":"from sklearn.model_selection import train_test_split","80538d08":"X_train, X_test, y_train, y_test = train_test_split(X,y,random_state = 7,shuffle ='True')","6c4da6bb":"from sklearn.metrics import accuracy_score","0da85a55":"from sklearn.ensemble import RandomForestClassifier\nrandom_forest_model = RandomForestClassifier(random_state =42)\nrandom_forest_model.fit(X_train,y_train)","d3b51009":"predict_train_data = random_forest_model.predict(X_test)","be7723df":"acc = accuracy_score(y_test,predict_train_data)\naccuracy = acc*100\nprint(str(accuracy)+\"%\")","9c985f6d":"from sklearn.linear_model import LogisticRegression\nlogistic_reg_model = LogisticRegression(random_state =42)\nlogistic_reg_model.fit(X_train,y_train)","f8706cc8":"predict_train_data = logistic_reg_model.predict(X_test)\nacc = accuracy_score(y_test,predict_train_data)\naccuracy = acc*100\nprint(str(accuracy)+\"%\")","fe1e1993":"from sklearn.neighbors import KNeighborsClassifier\nknn_model = KNeighborsClassifier(n_neighbors=9)\nknn_model.fit(X_train,y_train)","2f2d9771":"predict_train_data = knn_model.predict(X_test)\nacc = accuracy_score(y_test,predict_train_data)\naccuracy = acc*100\nprint(str(accuracy)+\"%\")","05144072":"from sklearn import svm\nsvm_model = svm.SVC(kernel='linear')\nsvm_model.fit(X_train,y_train)","6863ccc9":"predict_train_data = svm_model.predict(X_test)\nacc = accuracy_score(y_test,predict_train_data)\naccuracy = acc*100\nprint(str(accuracy)+\"%\")","4ef88bd8":"no = y.value_counts()\nprint(no)","223f2fa3":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import classification_report, recall_score, precision_score, f1_score\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import precision_recall_curve\nfrom sklearn.metrics import auc","8a1bc11e":"y_pred = random_forest_model.predict(X_test)\nconfusion_matrix(y_test,y_pred)\npd.crosstab(y_test, y_pred, rownames = ['Actual'], colnames =['Predicted'], margins = True)","00abf7d0":"y_pred_log = random_forest_model.predict(X_test)\ncr = classification_report(y_test, y_pred_log)\nprint(cr)","79db7e99":"from imblearn.over_sampling import SMOTE","90b65ece":"smote = SMOTE()\n\nx_oversample, y_oversample = smote.fit_resample(X, y)\n\nprint(y_oversample.value_counts())","a0b4e286":"X_train, X_test, y_train, y_test = train_test_split(x_oversample,y_oversample, shuffle = 'True',random_state = 1)","2774c5e0":"smote_logistic_reg_model = LogisticRegression(random_state =0)\nsmote_logistic_reg_model.fit(X_train,y_train)\npredict_train_data = smote_logistic_reg_model.predict(X_test)\naccuracy_score(y_test,predict_train_data)\n","0c4a1ef8":"smote_knn_model = KNeighborsClassifier(n_neighbors=3)\nsmote_knn_model.fit(X_train,y_train)\npredict_train_data = smote_knn_model.predict(X_test)\nacc = accuracy_score(y_test,predict_train_data)\nprint(acc)","58cec188":"y_pred = smote_knn_model.predict(X_test)\nconfusion_matrix(y_test,y_pred)\npd.crosstab(y_test, y_pred, rownames = ['Actual'], colnames =['Predicted'], margins = True)","485592af":"y_pred_log = smote_knn_model.predict(X_test)\ncr = classification_report(y_test, y_pred_log)\nprint(cr)","be216b87":"smote_random_forest_model = RandomForestClassifier(random_state =3)\nsmote_random_forest_model.fit(X_train,y_train)\npredict_train_data = smote_random_forest_model.predict(X_test)\nacc = accuracy_score(y_test,predict_train_data)\naccuracy = acc*100\nprint(accuracy)","b13bcbef":"y_pred = smote_random_forest_model.predict(X_test)\nconfusion_matrix(y_test,y_pred)\npd.crosstab(y_test, y_pred, rownames = ['Actual'], colnames =['Predicted'], margins = True)","99e98c24":"y_pred_log = smote_random_forest_model.predict(X_test)\ncr = classification_report(y_test, y_pred_log)\nprint(cr)","961e4187":"pred_prob1 = smote_knn_model.predict_proba(X_test)\npred_prob2 = smote_random_forest_model.predict_proba(X_test)\nfpr1, tpr1, thresh1 = roc_curve(y_test, pred_prob1[:,1], pos_label=1)\nfpr2, tpr2, thresh2 = roc_curve(y_test, pred_prob2[:,1], pos_label=1)\n\nrandom_probs = [0 for i in range(len(y_test))]\np_fpr, p_tpr, _ = roc_curve(y_test, random_probs, pos_label=1)","7643920a":"auc_score1 = roc_auc_score(y_test, pred_prob1[:,1])\nauc_score2 = roc_auc_score(y_test, pred_prob2[:,1])\n\nprint(auc_score1, auc_score2)","d658f7d3":"plt.plot(fpr1, tpr1,color='orange', label='KNN')\nplt.plot(fpr2, tpr2,color='green', label='RandomForest')","01f1aeb7":"We can use SMOTE(Synthetic Minority Oversampling Technique) to increase(oversample) the target varaible.\nIt works by duplicating examples in the minority class.","e6c277f3":"Lets take Knn and RandomForest","3f426a87":"\nMale=1\nFemale =0","69d456a1":"**As we can see the accuracy of models have reduced when SMOTE is applied but this going to help us with good recall score.**","dea372a9":"Only 249 of the total dataset is positive for stroke(4.8%)","22450cb1":"Now letz train our model again","9e8367f6":"**This happens when we have very less(<5%) diagnosed positive for stroke i.e unbalanced target variable.**","477d63e0":"TPR is the y-axis and FPR is the x-axis.\nTPR : True Positivity Rate\nFPR : False Positivity Rate","b50336ea":"Let us add 'Other' into Male"}}