{"cell_type":{"bea5a6b7":"code","09a4debf":"code","3e5971d5":"code","68dbd8ac":"code","b4e51dff":"code","8c722909":"code","9dbfc4df":"code","40c6d289":"code","7c927577":"code","2f1241f6":"code","0354d17f":"code","bd964c02":"code","480c4df6":"code","d1f6d257":"code","7b28e814":"code","56dd72fa":"code","03fd0d24":"code","a2eea776":"code","ed4fbdc0":"code","9466e125":"code","73c5e5e3":"code","1f5ec17b":"code","50c06f5c":"code","4ea1ed18":"code","e7e1a16e":"code","661286ec":"code","309072e5":"code","e6117cab":"code","0985b43c":"code","43765b78":"code","fa213956":"code","e482f961":"code","b4cc35f7":"code","9600740a":"code","cb3ab698":"code","e93afad7":"code","6f4284a1":"code","53eed1b0":"code","fa2c1c0a":"code","1269c40b":"code","8aa53f77":"code","ce038f72":"code","eda5235d":"code","1cac5abb":"code","91f56f07":"code","6490e49e":"code","26624a6e":"code","500b332e":"code","5b35e78f":"code","1ee6472f":"code","a63e2877":"code","efa1f0b6":"code","cf6a94f5":"code","7ba09b7d":"code","214ab614":"code","72f3ef70":"code","cb55e598":"code","9b208e50":"code","c2bb8ecc":"code","dfacd5d2":"code","febea55b":"code","6cd35964":"code","c3f0e302":"code","e6e59292":"code","01895a7c":"code","7faf5d37":"code","c40f1eae":"code","8d6e2d8d":"code","b9dc2449":"code","19f8bb1d":"code","6977332a":"code","13e07416":"code","8c1c61dc":"code","7995c37e":"code","a12bfa8b":"code","f0ac9eda":"code","320465d6":"code","92e07c0f":"code","900e908c":"code","733612ec":"code","59c59550":"code","73f01f7e":"code","4a021a42":"code","79c6a6bc":"code","afbf046d":"code","e5a9a2a8":"code","06a4e63b":"code","d35309b8":"code","e6b000c3":"code","0a7f38c7":"code","a9aeb0d8":"code","80cce8d6":"code","9d335c90":"code","03ea1ad0":"code","247bc98e":"code","dbb50c6e":"code","36211952":"code","72e1cd0b":"code","8275dee8":"markdown","71f36084":"markdown","0544fd5e":"markdown","2aeb241a":"markdown","3f596954":"markdown","f000cf16":"markdown","0fe14d29":"markdown"},"source":{"bea5a6b7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","09a4debf":"#dataset read operation\n#read_csv function is required to read the data.\ndata=pd.read_csv('..\/input\/master.csv')","3e5971d5":"#show data first 5 rows\ndata.head()","68dbd8ac":"#show data last 5 rows\ndata.tail()","b4e51dff":"#random rows in dataset\ndata.sample(5)","8c722909":"data.sample(frac=0.1)","9dbfc4df":"#Describe function includes analysis of all our numerical data. For this, count, mean, std, min,% 25,% 50,% 75, max values are given.\ndata.describe()","40c6d289":"data.iloc[:,1:5].describe()","7c927577":"#The info function shows the data types and numerical values of the features in our data set.\ndata.info()","2f1241f6":"#We will now set the headings of the feature values in the data set.\ndata.columns","0354d17f":"#so,change the names of the column. Because there may be problems for future analysis.\ndata=data.rename(columns={'country':'Country','year':'Year','sex':'Gender','age':'Age','suicides_no':'SuicidesNo','population':'Population','suicides\/100k pop':'Suicides100kPop','country-year':'CountryYear','HDI for year':'HDIForYear',' gdp_for_year ($) ':'GdpForYearMoney','gdp_per_capita ($)':'GdpPerCapitalMoney','generation':'Generation'})","bd964c02":"data.columns","480c4df6":"#And, how many rows and columns are there for all data?\nprint('Data Shape :')\ndata.shape","d1f6d257":"data.isnull().any()","7b28e814":"data.isnull().values.any()","56dd72fa":"#Now,I will check null on all data and If data has null, I will sum of null data's. In this way, how many missing data is in the data.\ndata.isnull().sum()","03fd0d24":"#As you can see, most of the HDIForYear value is empty. That's why I want this value deleted.\ndata=data.drop(['HDIForYear','CountryYear'],axis=1)","a2eea776":"#Now start analysis, min year and max year will find them\nmin_year=min(data.Year)\nmax_year=max(data.Year)\nprint('Min Year :',min_year)\nprint('Max Year :',max_year)\n\n#1985 min year,2016 max year.\n\ndata_country=data[(data['Year']==min_year)]\n\ncountry_1985=data[(data['Year']==min_year)].Country.unique()\ncountry_1985_male=[]\ncountry_1985_female=[]\n\nfor country in country_1985:\n    country_1985_male.append(len(data_country[(data_country['Country']==country)&(data_country['Gender']=='male')]))\n    country_1985_female.append(len(data_country[(data_country['Country']==country)&(data_country['Gender']=='female')])) \n    \n#We found the ratio of men and women who committed suicide in some countries in 1985 and we are now charting.\n\nplt.figure(figsize=(10,10))\nsns.barplot(y=country_1985,x=country_1985_male,color='red')\nsns.barplot(y=country_1985,x=country_1985_female,color='yellow')\nplt.ylabel('Countries')\nplt.xlabel('Count Male vs Female')\nplt.title('1985 Year Suicide Rate Gender')\nplt.show()\n\n#Very odd all the rates came on an equal level. So let's do max year.\n\ndata_country=data[(data['Year']==max_year)]\n\ncountry_2016=data[(data['Year']==max_year)].Country.unique()\ncountry_2016_male=[]\ncountry_2016_female=[]\n\nfor country in country_2016:\n    country_2016_male.append(len(data_country[(data_country['Country']==country)&(data_country['Gender']=='male')]))\n    country_2016_female.append(len(data_country[(data_country['Country']==country)&(data_country['Gender']=='female')])) \n    \n#We found the ratio of men and women who committed suicide in some countries in 1985 and we are now charting.\n\nplt.figure(figsize=(10,10))\nsns.barplot(y=country_2016,x=country_2016_male,color='red')\nsns.barplot(y=country_2016,x=country_2016_female,color='yellow')\nplt.ylabel('Countries')\nplt.xlabel('Count Male vs Female')\nplt.title('2016 Year Suicide Rate Gender')\nplt.show()","ed4fbdc0":"data_country=data[(data['Year']==min_year)]\n\ncountry_1985_population=[]\n\nfor country in country_1985:\n    country_1985_population.append(sum(data_country[(data_country['Country']==country)].Population))    \n\n#Now year 1985 find sum population every country\n\nplt.figure(figsize=(10,10))\nsns.barplot(y=country_1985,x=country_1985_population)\nplt.xlabel('Population Count')\nplt.ylabel('Countries')\nplt.title('1985 Year Sum Population for Suicide Rate')\nplt.show()\n\n#######################################################\n\ndata_country=data[(data['Year']==max_year)]\n\ncountry_2016_population=[]\n\nfor country in country_2016:\n    country_2016_population.append(sum(data_country[(data_country['Country']==country)].Population))    \n\n#Now year 1985 find sum population every country\n\nplt.figure(figsize=(10,10))\nsns.barplot(y=country_2016,x=country_2016_population)\nplt.xlabel('Population Count')\nplt.ylabel('Countries')\nplt.title('2016 Year Sum Population for Suicide Rate')\nplt.show()\n","9466e125":"suicideGender1985=data_country.groupby(['Country','Gender']).SuicidesNo.sum()","73c5e5e3":"suicideGender1985","1f5ec17b":"data_country=data[(data['Year']==min_year)]\n\ndata_age_5_14=[]\ndata_age_15_24=[]\ndata_age_25_34=[]\ndata_age_35_54=[]\ndata_age_55_74=[]\ndata_age_75=[]\n\nfor country in country_1985:\n        data_age_5_14.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='5-14 years')]))\n        data_age_15_24.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='15-24 years')]))\n        data_age_25_34.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='25-34 years')]))\n        data_age_35_54.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='35-54 years')]))\n        data_age_55_74.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='55-74 years')]))\n        data_age_75.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='75+ years')]))\n        \n\n#######################################################\n\ndata_country=data[(data['Year']==max_year)]\n\ndata_age_5_14=[]\ndata_age_15_24=[]\ndata_age_25_34=[]\ndata_age_35_54=[]\ndata_age_55_74=[]\ndata_age_75=[]\n\nfor country in country_2016:\n        data_age_5_14.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='5-14 years')]))\n        data_age_15_24.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='15-24 years')]))\n        data_age_25_34.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='25-34 years')]))\n        data_age_35_54.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='35-54 years')]))\n        data_age_55_74.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='55-74 years')]))\n        data_age_75.append(len(data_country[(data_country['Country']==country)&(data_country['Age']=='75+ years')]))\n        \n#there is an equal rate. We need to make the query process a little more complicated.","50c06f5c":"sns.countplot(data.Gender)\nplt.show()\n#there has been an even gender distribution.","4ea1ed18":"data.head()","e7e1a16e":"data['GdpPerCapitalMoney'].unique()","661286ec":"print(\"Max : \",max(data['GdpPerCapitalMoney'].unique()))\nprint('Min : ',min(data['GdpPerCapitalMoney'].unique()))","309072e5":"sns.countplot(data[data['GdpPerCapitalMoney']==251].Gender)\nplt.title(\"GdpPerCapitalMoney Gender (Male-Female)\")\nplt.show()","e6117cab":"sns.countplot(data[data['GdpPerCapitalMoney']==126352].Gender)\nplt.title(\"GdpPerCapitalMoney Gender (Male-Female)\")\nplt.show()","0985b43c":"plt.figure(figsize=(10,5))\nsns.countplot(data.Gender,hue=data.Age)\nplt.title('Gender & Age')\nplt.show()\n#there has been an even gender & hue age distribution.","43765b78":"data.groupby('Age')['Gender'].count()","fa213956":"sns.barplot(x=data.groupby('Age')['Gender'].count().index,y=data.groupby('Age')['Gender'].count().values)\nplt.xticks(rotation=90)\nplt.show()","e482f961":"suicidesNo=[]\nfor country in data.Country.unique():\n    suicidesNo.append(sum(data[data['Country']==country].SuicidesNo))   ","b4cc35f7":"suicidesNo=pd.DataFrame(suicidesNo,columns=['suicidesNo'])\ncountry=pd.DataFrame(data.Country.unique(),columns=['country'])\ndata_suicide_countr=pd.concat([suicidesNo,country],axis=1)\n#sns.barplot(x=data.Country.unique(),y=suicidesNo) \n#plt.show()","9600740a":"data_suicide_countr=data_suicide_countr.sort_values(by='suicidesNo',ascending=False)","cb3ab698":"sns.barplot(y=data_suicide_countr.country[:15],x=data_suicide_countr.suicidesNo[:15])\nplt.show()","e93afad7":"grouop_data=data.groupby(['Age','Gender'])['SuicidesNo'].sum().unstack()\ngrouop_data=grouop_data.reset_index().melt(id_vars='Age')","6f4284a1":"grouop_data_female=grouop_data.iloc[:6,:]\ngrouop_data_male=grouop_data.iloc[6:,:]","53eed1b0":"grouop_data_female","fa2c1c0a":"grouop_data_male","1269c40b":"female_=[175437,208823,506233,16997,430036,221984]\nmale_=[633105,915089,1945908,35267,1228407,431134]\nplot_id = 0\nfor i,age in enumerate(['15-24 years','25-34 years','35-54 years','5-14 years','55-74 years','75+ years']):\n    plot_id += 1\n    plt.subplot(3,2,plot_id)\n    plt.title(age)\n    fig, ax = plt.gcf(), plt.gca()\n    sns.barplot(x=['female','male'],y=[female_[i],male_[i]],color='blue')\n    plt.tight_layout()\n    fig.set_size_inches(10, 15)\nplt.show()  ","8aa53f77":"sns.countplot(data.Generation)\nplt.title('Generation Counter')\nplt.xticks(rotation=45)\nplt.show()","ce038f72":"sns.countplot(data.Generation,hue=data.Gender)\nplt.title('Generation hue Gender Counter')\nplt.show()","eda5235d":"data['Age'].unique()","1cac5abb":"index_population=[]\nfor age in data['Age'].unique():\n    index_population.append(sum(data[data['Age']==age].Population)\/len(data[data['Age']==age].Population))\n    \nplt.bar(['15-24 years','35-54 years','75+ years','25-34 years','55-74 years','5-14 years'],index_population,align='center',alpha=0.5)\nplt.xticks(rotation=90)\nplt.show()","91f56f07":"index_population","6490e49e":"plt.figure(figsize=(10,5))\nsns.set(style='whitegrid')\nsns.boxplot(data['Population'])\nplt.show()","26624a6e":"data.head()","500b332e":"sns.set(style='whitegrid')\nsns.boxplot(data['GdpPerCapitalMoney'])\nplt.show()","5b35e78f":"sns.set(style='whitegrid')\nsns.boxplot(data.Year)\nplt.show()","1ee6472f":"# Plot the crashes where alcohol was involved\nsns.set_color_codes(\"muted\")\nsns.barplot(x=\"Year\", y=\"SuicidesNo\", data=data,\n            label=\"Year Suicides\", color=\"b\")\nplt.xticks(rotation=90)\nplt.show()","a63e2877":"\nplt.figure(figsize=(7,7))\ng = sns.FacetGrid(data, col=\"Generation\", hue=\"Year\",\n                  subplot_kws=dict(projection='polar'), height=5.5,\n                  sharex=False, sharey=False, despine=False)\n\nplt.show()","efa1f0b6":"# Plot sepal with as a function of sepal_length across days\ng = sns.lmplot(x=\"Year\", y=\"SuicidesNo\", hue=\"Generation\",\n               truncate=True, height=5, data=data)\n\n# Use more informative axis labels than are provided by default\ng.set_axis_labels(\"Year\", \"Suicides No\")\nplt.show()","cf6a94f5":"data.head()","7ba09b7d":"data.describe().plot(kind = \"Area\",fontsize=15, figsize = (20,10), table = True,colormap=\"rainbow\")\nplt.xlabel('Statistics',)\nplt.ylabel('Value')\nplt.title(\"General Statistics\")\nplt.show()","214ab614":"f,ax=plt.subplots(1,2,figsize=(18,8))\ndata['Generation'].value_counts().plot.pie(explode=[0.1,0.1,0.1,0.1,0.1,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[0].set_title('Generations Count')\nax[0].set_ylabel('Count')\nsns.countplot('Generation',data=data,ax=ax[1])\nax[1].set_title('Generations Count')\nplt.show()","72f3ef70":"fig=sns.jointplot(y='Suicides100kPop',x='Year',data=data)\nplt.show()","cb55e598":"fig=sns.jointplot(y='SuicidesNo',x='Population',data=data)\nplt.show()","9b208e50":"sns.jointplot(\"Year\", \"GdpPerCapitalMoney\", data=data, kind=\"reg\")\nplt.show()","c2bb8ecc":"# Show the joint distribution using kernel density estimation\ng = sns.jointplot(data.Year,data.GdpPerCapitalMoney, kind=\"kde\", height=7, space=0)\nplt.show()","dfacd5d2":"fig=sns.jointplot(y='GdpPerCapitalMoney',x='SuicidesNo',kind='hex',data=data[data['Country']=='United States'])\nplt.show()","febea55b":"sns.jointplot(\"Suicides100kPop\", \"SuicidesNo\", data=data[data['Country']=='Russian Federation'], kind=\"kde\",space=0,color='g')\nplt.show()","6cd35964":"import matplotlib.pyplot as plt\n%matplotlib inline\nsns.FacetGrid(data,hue='Year',size=5).map(plt.scatter,'GdpPerCapitalMoney','Population').add_legend()\nplt.show()","c3f0e302":"sns.FacetGrid(data, hue=\"Generation\", size=6).map(sns.kdeplot, \"Population\").add_legend()\nplt.ioff() \nplt.show()","e6e59292":"sns.countplot(x=\"Generation\", hue=\"Gender\",\n                 data=data)\nplt.xticks(rotation=45)\nplt.show()","01895a7c":"sns.stripplot(x=data['SuicidesNo'])\nplt.show()","7faf5d37":"sns.set(style=\"white\")\n# Plot miles per gallon against horsepower with other semantics\nsns.relplot(x=\"Generation\",y=\"SuicidesNo\",hue=\"Gender\",\n            sizes=(40, 400), alpha=.5, palette=\"muted\",\n            height=6, data=data)\nplt.show()","c40f1eae":"plt.figure(figsize=(10,7))\nsns.stripplot(x=\"Year\",y='Suicides100kPop',data=data)\nplt.xticks(rotation=45)\nplt.show()","8d6e2d8d":"plt.figure(figsize=(10,10))\nsns.factorplot(x=\"SuicidesNo\", y=\"Gender\", kind='violin',data=data)\nplt.show()","b9dc2449":"plt.scatter(x=np.arange(1,27821),y=data['Suicides100kPop'].values.tolist())\nplt.show()","19f8bb1d":"plt.scatter(x=np.arange(1,27821),y=data['SuicidesNo'].values.tolist())\nplt.show()","6977332a":"plt.scatter(x=np.arange(1,27821),y=data['Population'].values.tolist())\nplt.show()","13e07416":"plt.scatter(x=np.arange(1,27821),y=data['GdpPerCapitalMoney'].values.tolist())\nplt.show()","8c1c61dc":"sns.distplot(data['Suicides100kPop'])\nplt.show()","7995c37e":"sns.set_color_codes()\nsns.distplot(data['Country'].value_counts().values,color='r')\nplt.show()","a12bfa8b":"data[(data['Gender']=='male')].Age.value_counts().values","f0ac9eda":"# Plot the responses for different events and regions\nsns.lineplot(x=\"SuicidesNo\", y=\"Suicides100kPop\",\n             hue=\"Gender\",data=data.sort_values(by='Suicides100kPop',ascending=False))\nplt.show()","320465d6":"sns.pairplot(data,hue='Generation')\nplt.show()","92e07c0f":"sns.pairplot(data, hue=\"Gender\")\nplt.show()","900e908c":"# Plot the residuals after fitting a linear model\nsns.residplot('SuicidesNo','Suicides100kPop', data=data,lowess=True, color=\"g\")\nplt.show()","733612ec":"sns.distplot(data[(data['Gender']=='female')].Age.value_counts().values)\nplt.show()","59c59550":"sns.violinplot(x=data['Generation'],y=data['Population'])\nplt.show()","73f01f7e":"sns.heatmap(data.corr(),cmap='YlGnBu',annot=True)\nplt.show()","4a021a42":"# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(data.corr(), vmax=.3, center=1,\n            square=True, linewidths=.5,annot=True)\nplt.show()","79c6a6bc":"cmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n# Draw the heatmap with the mask and correct aspect ratio\nsns.heatmap(data.corr(), cmap=cmap, vmax=.3, center=0,\n            square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\nplt.show()","afbf046d":"sns.boxplot(x=data['Generation'],y=data['Population'])\nplt.xticks(rotation=90)","e5a9a2a8":"sns.boxenplot(x=\"Generation\", y=\"SuicidesNo\",\n              color=\"b\",\n              scale=\"linear\", data=data)\nplt.tight_layout()\nplt.show()","06a4e63b":"data.head()","d35309b8":"max(data.SuicidesNo)","e6b000c3":"min(data.SuicidesNo)","0a7f38c7":"data[data.SuicidesNo==max(data.SuicidesNo)]","a9aeb0d8":"data[data['Country']=='Russian Federation'].hist()\nplt.tight_layout()\nplt.show()","80cce8d6":"data[data.SuicidesNo==min(data.SuicidesNo)]","9d335c90":"data[data['Country']=='Albania'].hist()\nplt.tight_layout()\nplt.show()","03ea1ad0":"# Show the results of a linear regression within each dataset\nsns.lmplot(x=\"Population\", y=\"GdpPerCapitalMoney\", data=data)\nplt.show()","247bc98e":"sns.set(style=\"whitegrid\")\n\n# Make an example dataset with y ~ x\nrs = np.random.RandomState(7)\nx = rs.normal(2, 1, 75)\ny = 2 + 1.5 * x + rs.normal(0, 2, 75)\n\n# Plot the residuals after fitting a linear model\nsns.residplot(x, y, lowess=True, color=\"g\")\nplt.show()","dbb50c6e":"from sklearn.preprocessing import LabelEncoder\nle=LabelEncoder()\ndata.iloc[:,-1]=le.fit_transform(data.iloc[:,-1])","36211952":"data.head(2)","72e1cd0b":"sns.pairplot(data, hue=\"Generation\")\nplt.show()","8275dee8":"<p>All data were analyzed. Graphical analysis was performed for all age rates for suicide rates.<\/p>","71f36084":"<p id='20'><h3><b>References<\/b><\/h3><\/p>\n<p>https:\/\/www.kaggle.com\/spscientist\/students-performance-in-exams<\/p>\n<p>https:\/\/seaborn.pydata.org\/<\/p>\n<p>https:\/\/www.kaggle.com\/kanncaa1\/seaborn-tutorial-for-beginners<\/p>\n<p>https:\/\/www.kaggle.com\/biphili\/seaborn-plot-to-visualize-iris-data<\/p>\n<p>https:\/\/www.kaggle.com\/kralmachine\/seaborn-tutorial-for-beginners<\/p>","0544fd5e":"<p>While the suicide rate was widespread in more countries in 1985, this ratio has fallen considerably in 2016. Now let us examine the other features of these countries.<\/p>","2aeb241a":"<p>The values we found on the upper side give the total population we found in 1985 in 2016.<\/p>","3f596954":"<h1>General Analysis of Suicide Rates<\/h1>\n\n<p>Our aim is to make general analysis of suicide rates and we will explain these rates in detail.<\/p>\n\n<p>\n\nDataset Feature List\n\n<ul>\n<li>country<\/li>\n<li>year<\/li>\n<li>sex<\/li>\n<li>age<\/li>\n<li>suicides_no<\/li>\n<li>population<\/li>\n<li>suicides\/100k pop<\/li>\n<li>country-year<\/li>\n<li>HDI for year<\/li>\n<li>gdp_for_year<\/li>\n<li>gdp_per_capita<\/li>\n<li>generation<\/li>\n\n<\/ul>\n\n<\/p>\n\n<p><a href='#20'>References<\/a><\/p>\n<p><a href='#21'>Conclusion<\/a><\/p>\n\n<p>Last Updated : <b>30.06.2019<\/b><\/p>\n<p><h2>if you like it, please upvoted<\/h2><\/p>","f000cf16":"<p>It appears that after examining our data, we examined the total suicide rates and prepared a chart that handled the most from the least.<\/p>","0fe14d29":"<p id='21'><h3><b>Conclusion<\/b><\/h3><\/p>\n<p>As a result, we have explained the seaborn library in a very detailed way and created a wide variety of graphs. If you like it, I expect your support. If you like <b>UPVOTED<\/b> I would be very happy if you do. If you have any questions, I am ready to answer your questions. At the bottom there are the kernel values that I have already done.<\/p>\n<p>https:\/\/www.kaggle.com\/kralmachine\/data-visualization-of-suicide-rates<\/p>\n<p>https:\/\/www.kaggle.com\/kralmachine\/gradient-admission-eda-ml-0-92<\/p>\n<p>https:\/\/www.kaggle.com\/kralmachine\/football-results-from-1872-to-2018-datavisulation<\/p>\n<p>https:\/\/www.kaggle.com\/kralmachine\/pandas-tutorial-for-beginner<\/p>\n<p>https:\/\/www.kaggle.com\/kralmachine\/visual-analysis-of-world-happiness-in-2015<\/p>"}}