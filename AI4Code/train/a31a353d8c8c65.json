{"cell_type":{"0b77e726":"code","b4931c86":"code","19715d56":"code","4a9764b6":"code","57c55608":"code","ba7a79fa":"code","ad598b65":"code","74d94f8c":"code","9ac121c7":"code","0c3d050d":"code","c415811e":"code","ca509c9d":"code","42915b46":"code","a39f82fb":"markdown","0ab09594":"markdown","a8ed3f6d":"markdown","8bce4626":"markdown"},"source":{"0b77e726":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# For pretty for loops. Not actually necessary :)\nfrom tqdm import tqdm_notebook\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelBinarizer\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsClassifier\n\n# Use input to run in kaggle\nDATA_PATH = \"..\/input\/\"\n#DATA_PATH = \"..\/\"","b4931c86":"# Bibliotecas de visualiza\u00e7\u00e3o\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set()\n","19715d56":"train_df = pd.read_csv(DATA_PATH + \"train.csv\", index_col=\"RowNumber\")\ntest_df = pd.read_csv(DATA_PATH + \"test.csv\", index_col=\"RowNumber\")\nsample = pd.read_csv(DATA_PATH + \"sampleSubmission.csv\", index_col=\"RowNumber\")\n\n# Drop useless cols\ntrain_df.drop(columns=\"CustomerId\", inplace=True)\ntest_df.drop(columns=\"CustomerId\", inplace=True)\n\ntrain_df.drop(columns=\"Surname\", inplace=True)\ntest_df.drop(columns=\"Surname\", inplace=True)","4a9764b6":"# Deal with NaN","57c55608":"# Primeiro o pais\ntrain_df.fillna({\"Geography\": \"France\"}, inplace=True)\ntest_df.fillna({\"Geography\": \"France\"}, inplace=True)\n\n# Agora o g\u00eanero\ntrain_df.fillna({\"Gender\": \"Male\"}, inplace=True)\ntest_df.fillna({\"Gender\": \"Male\"}, inplace=True)","ba7a79fa":"# Primeiro o pais\nnew_value = train_df[\"EstimatedSalary\"].mode()\ntrain_df.fillna({\"EstimatedSalary\": new_value.iloc[0]}, inplace=True)\ntest_df.fillna({\"EstimatedSalary\": new_value.iloc[0]}, inplace=True)\n\ntrain_df.isna().sum().sum(), test_df.isna().sum().sum()","ad598b65":"for col in train_df.columns:\n    print(col, \"\\t\\t\", train_df[col].dtype)","74d94f8c":"for col in [\"Gender\", \"Geography\"]:\n    # Criar o encoder\n    encoder = LabelBinarizer()\n    encoder.fit(train_df[col])\n    \n    # Substituir aquela coluna no treino e teste\n    train_df[col] = encoder.transform(train_df[col])\n    test_df[col] = encoder.transform(test_df[col])","9ac121c7":"from sklearn.preprocessing import StandardScaler\nx_train = train_df.copy(deep=True)\ny_train = x_train[\"Exited\"]\nx_train = x_train.drop(columns=\"Exited\")\n\nscaler = StandardScaler()\nx_train.loc[:] = scaler.fit_transform(x_train)\nx_test = pd.DataFrame(scaler.fit_transform(test_df), columns=test_df.columns,\n                      index=test_df.index)","0c3d050d":"model = KNeighborsClassifier(n_jobs=-1)\n\ngrid = {'n_neighbors': range(3, 50, 3),\n        'metric': [\"euclidean\", \"manhattan\", \"chebyshev\", \"minkowski\"],\n        }\n\nsearch = GridSearchCV(estimator=model, param_grid=grid, n_jobs=8, \n                             cv=2, verbose=1, return_train_score=True)\n\nsearch.fit(x_train, y_train)\n\n# and after some hours...\ndf_search = pd.DataFrame(search.cv_results_)\ndf_search.sort_values(\"mean_test_score\", inplace=True)","c415811e":"df_search.tail()","ca509c9d":"search.best_score_, search.best_params_","42915b46":"params = search.best_params_","a39f82fb":"# Tune\n","0ab09594":"# Categorias n\u00e3o num\u00e9ricas\n","a8ed3f6d":"# Ler e mostrar os dados","8bce4626":"# Exemplo K-NN\n\nVamos tunar os parametros do K-NN\n\n* * *\n\n"}}