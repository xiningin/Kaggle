{"cell_type":{"4f7793f3":"code","78e2d1be":"code","650cca0c":"code","0973b6ff":"code","98b588c2":"code","85a8aef6":"code","f2292cf9":"code","19a06bb6":"code","c001a954":"code","658f99ff":"code","d98a4986":"code","ea64e8cd":"code","739e4132":"code","c5c1fd03":"code","a95b2abc":"code","f1c26397":"code","ea515261":"code","f0eabd23":"code","63e25313":"code","210b6cc1":"markdown","bcf85a5f":"markdown","d1b39ba0":"markdown","722d858a":"markdown","c61faa1c":"markdown","9417f3b2":"markdown","801555ce":"markdown","f00ca4fd":"markdown","f7dff349":"markdown","79b1fb03":"markdown","525ff74c":"markdown"},"source":{"4f7793f3":"#functions and import\n\nimport numpy as np\nimport pandas as pd\n\n# display precision to 5 decimal points\npd.set_option('precision',5)\n\nimport statsmodels.api as sm\n\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nimport plotly.tools as tls\n","78e2d1be":"#reading data in\n\nglobal_temp = pd.read_csv(\"..\/input\/GlobalTemperatures.csv\", parse_dates = [0], infer_datetime_format=True)\n\nglobal_temp.dtypes, global_temp.shape","650cca0c":"# basic visualization of the data\nglobal_avg = go.Scatter(\n    x = global_temp.dt,\n    y = global_temp.LandAverageTemperature,\n    name = 'Average Temp'\n)\n\nglobal_avg_uncertainty = go.Scatter(\n    x = global_temp.dt,\n    y = global_temp.LandAverageTemperatureUncertainty,\n    name = 'Uncertainty',\n    yaxis='y2'\n)\n\nlayout = go.Layout(\n    title='Global Average Temperature and Measurement Uncertainty',\n    yaxis=dict(\n        title='Average Temperature'\n    ),\n    yaxis2=dict(\n        title='Measurement Uncertainty',\n        titlefont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        overlaying='y',\n        side='right'\n    )\n)\n\ndata = [global_avg, global_avg_uncertainty]\n\nfig = go.Figure(data=data, layout=layout)\nplot_url = py.iplot(fig)\n","0973b6ff":"global_temp['year'] = global_temp.dt.apply(lambda x : x.year)\n# , as_index=False\nglobal_temp_by_year = global_temp[global_temp['year'] >= 1850].groupby('year').agg(\n        {\n            'LandAverageTemperature': ['mean', 'std', 'max', 'min']\n        }\n    )\n\nglobal_temp_by_year.head()","98b588c2":"global_avg = go.Scatter(\n    x = global_temp_by_year.index,\n    y = global_temp_by_year.LandAverageTemperature['mean'],\n    name = 'Mean Average Temp'\n)\n\nglobal_avg_min = go.Scatter(\n    x = global_temp_by_year.index,\n    y = global_temp_by_year.LandAverageTemperature['min'],\n    name = 'Min Average Temp'\n)\n\nglobal_avg_max = go.Scatter(\n    x = global_temp_by_year.index,\n    y = global_temp_by_year.LandAverageTemperature['max'],\n    name = 'Max Average Temp'\n)\n\nglobal_avg_std = go.Scatter(\n    x = global_temp_by_year.index,\n    y = global_temp_by_year.LandAverageTemperature['std'],\n    name = 'Standard Deviation',\n    yaxis='y2'\n)\n\nlayout = go.Layout(\n    title='Global Average Temperature by year',\n    yaxis=dict(\n        title='Average Temperature'\n    ),\n    yaxis2=dict(\n        title='Standard Deviation',\n        titlefont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        tickfont=dict(\n            color='rgb(148, 103, 189)'\n        ),\n        overlaying='y',\n        side='right'\n    )\n)\n\ndata = [global_avg, global_avg_min, global_avg_max, global_avg_std]\n\nfig = go.Figure(data=data, layout=layout)\nplot_url = py.iplot(fig)","85a8aef6":"X = sm.add_constant(global_temp_by_year.index)\nmod = sm.OLS(global_temp_by_year['LandAverageTemperature']['mean'], X)\n\nres = mod.fit()\n\nprint(res.summary())\nprint(res.params)\nprint(res.pvalues)\n","f2292cf9":"act = go.Scatter(\n    x = global_temp_by_year.index,\n    y = global_temp_by_year.LandAverageTemperature['mean'],\n    name = 'Actual Average Temp'\n)\n\nmodel = go.Scatter(\n    x = global_temp_by_year.index,\n    y = res.predict(),\n    name = 'Model Average Temp'\n)\n\n\nlayout = go.Layout(\n    title='Global Average Temperature by year',\n    yaxis=dict(\n        title='Average Temperature'\n    )\n)\n\ndata = [act, model]\n\nfig = go.Figure(data=data, layout=layout)\nplot_url = py.iplot(fig)","19a06bb6":"X = sm.add_constant(global_temp_by_year.index)\nmod = sm.OLS(global_temp_by_year['LandAverageTemperature']['mean'][0:131], X[0:131])\nmod1 = sm.OLS(global_temp_by_year['LandAverageTemperature']['mean'][131:], X[131:])\nres = mod.fit()\nres1= mod1.fit()\n\nprint(res.summary())\nprint(res1.summary())","c001a954":"act = go.Scatter(\n    x = global_temp_by_year.index,\n    y = global_temp_by_year.LandAverageTemperature['mean'],\n    name = 'Actual Average Temp'\n)\n\nmodel = go.Scatter(\n    x = global_temp_by_year.index[0:131],\n    y = res.predict(),\n    name = 'Model Average Temp'\n)\n\nmodel1 = go.Scatter(\n    x = global_temp_by_year.index[131:],\n    y = res1.predict(),\n    name = 'Model1 Average Temp'\n)\n\nlayout = go.Layout(\n    title='Global Average Temperature by year',\n    yaxis=dict(\n        title='Average Temperature'\n    )\n)\n\ndata = [act, model, model1]\n\nfig = go.Figure(data=data, layout=layout)\nplot_url = py.iplot(fig)","658f99ff":"# reading in city level data\n\ntemp_by_cities = pd.read_csv(\"..\/input\/GlobalLandTemperaturesByCity.csv\", parse_dates = [0], infer_datetime_format=True)\n\ntemp_by_cities.dtypes, temp_by_cities.shape","d98a4986":"# derive year\n# group by year, country, city, calulate average to eliminate seasonality\n# run regression for each\n# get coefficient, and p value\n\ntemp_by_cities['year'] = temp_by_cities.dt.apply(lambda x : x.year)\n# , as_index=False\ntemp_by_cities_year = temp_by_cities[temp_by_cities['year'] >= 1850].groupby(['Country', 'City', 'year']).agg(\n        {\n            'AverageTemperature': ['mean']\n        }\n    )","ea64e8cd":"# define a custom aggreagtion functions that runs a regression and extracts the slope and the p value\ndef fit_linear_model(g):\n    g = g.dropna()\n    X = sm.add_constant(g.index.get_level_values('year'))\n    mod = sm.OLS(g['AverageTemperature'], X)\n    res = mod.fit()\n    \n    col_names = ['coef', 'coef p-val']\n    \n    return(pd.Series((res.params['x1'], res.pvalues.x1), index = col_names)) #x1 is the default for unnamed coefficient\n\ntemp_by_cities_year.columns = temp_by_cities_year.columns.get_level_values(0)\n    \ntemp_by_cities_year_regr = temp_by_cities_year.groupby(['Country', 'City'])\\\n    .apply(fit_linear_model)\n\n\ntemp_by_cities_year_regr.head()","739e4132":"# plot the distribution of p-value to see if we can reject null hypothesis (slope is 0)\ntrace = go.Histogram(x=temp_by_cities_year_regr['coef p-val'],\n                    name='P-val',\n                    marker=dict(\n                        color='rgb(49,130,189)')\n                )\nlayout = go.Layout(\n    title='Distribution of P-val of regression slope',\n    yaxis=dict(\n        title='count'\n    ),\n    xaxis=dict(\n        title='P-val'\n    )\n)\n            \ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\nplot_url = py.iplot(fig)","c5c1fd03":"# plot the distribution of actual slopes (rate of the temperature increases over time)\ntrace = go.Histogram(x=temp_by_cities_year_regr['coef'],\n                    name='slope',\n                    marker=dict(\n                        color='rgb(49,130,189)')\n                )\nlayout = go.Layout(\n    title='Distribution of rate of temperature increase across all cities',\n    yaxis=dict(\n        title='count'\n    ),\n    xaxis=dict(\n        title='rate of temperature increase'\n    )\n)\n            \ndata = [trace]\nfig = go.Figure(data=data, layout=layout)\nplot_url = py.iplot(fig)","a95b2abc":"# plot the cities and countries with highest and lowest rate of temperature increase\n# define a utility function for plotting pareto charts\n\ndef plot_pareto(source, colx, coly, colz, colw, asc):\n    \"\"\"Utility function for plotting pareto bar charts\n    \n    depends on pandas, plotly\n    import pandas as pd\n    import plotly.offline as py\n    py.init_notebook_mode(connected=True)\n    import plotly.graph_objs as go\n    import plotly.tools as tls\n\n    Args:\n        source (df): Pandas dataframe of the data to be plotted\n        colx (str): name of the col to group source by\n        coly (str): ['count', 'sum', 'mean', 'std', 'max', 'min', uniques] - aggregation operations to apply to the grouped df\n        colz (str): name of the col to apply the aggregation function on\n        colw (int): number of results to display in the chart\n        asc (str): ['Ascending', 'Descending'] - the order of the pareto chart\n\n    Returns:\n        A plot.ly chart\n    \"\"\"\n    sort_order = (asc == 'Ascending')\n    temp = source\n    grouped = temp.groupby(colx)\n\n    if(coly in ['count', 'sum', 'mean', 'std', 'max', 'min']):\n        grouped = grouped.agg(\n            {\n                colz : [coly]\n            }\n        )\n    elif(coly == 'uniques'):\n        grouped = grouped.apply(\n            lambda g: pd.Series(g[colz].unique().size, index = pd.MultiIndex.from_product([[colz],[coly]]))\n        )\n\n\n\n    grouped = grouped.reset_index().sort_values([(colz, coly)], ascending=sort_order).head(colw)\\\n        .sort_values([(colz, coly)], ascending = (not sort_order))\n\n#             print(grouped)\n\n    trace = go.Bar(\n        y=grouped[colx],\n        x=grouped[colz][coly],\n        name=colx,\n        marker=dict(\n            color='rgb(49,130,189)'\n        ),\n        orientation = 'h'\n    )\n    layout = go.Layout(\n        title=coly + ' of ' + colz + ' by ' + colx,\n        yaxis=dict(\n            title=colx,\n            type = \"category\",\n#                     categoryorder = \"category descending\"\n            tickformat =\".3f\"\n        ),\n        xaxis=dict(\n            title=coly + ' of ' + colz\n        ),\n        margin=dict(\n            l = 200\n        )\n    )\n    \n    data = [trace]\n    fig = go.Figure(data=data, layout=layout)\n    plot_url = py.iplot(fig)","f1c26397":"plot_pareto(temp_by_cities_year_regr, 'City', 'mean', 'coef', 20, 'Descending')","ea515261":"plot_pareto(temp_by_cities_year_regr, 'City', 'mean', 'coef', 20, 'Ascending')","f0eabd23":"plot_pareto(temp_by_cities_year_regr, 'Country', 'mean', 'coef', 20, 'Descending')","63e25313":"plot_pareto(temp_by_cities_year_regr, 'Country', 'mean', 'coef', 20, 'Ascending')","210b6cc1":"### Temperatures exhibit increasing trend\n* All of max, min and average global temperature appear to be increasing over time\n* The variability over the year (standard deviation) appears to be decreasing over time, albeit not by much\n    * This is interesting, because it is counter to the claim that climate change has been linked to more extreme temperature patterns\n    * It is possible that the averaging process used to aggregate individual regional measurement to obtain the global average has dampened the actual variability (possible follow up analysis that we won't explore here)\n    \n### To Assess the rate at which the temperature has been increasing, we will use a linear regression fit","bcf85a5f":"#### Countries with the fastest rate (average of cities) of temperature increase","d1b39ba0":"#### Most of the P Values are extremely small, with the largest value coming in at 0.0029. This suggests that we can be reasonably confident in rejecting the null hypothesis in the linear regression fits to the temperature trends at the city level.","722d858a":"### All of the temperature slopes are positive with low p-val. Temperatures are indeed rising across the world\n### What are the cities and countries with fastest (and slowest) rate of temperature increase?","c61faa1c":"#### Global average temperature is rising 0.02 degrees per year\n* regression coefficient p-value is very small at 3.7e-51, meaning that the probability that we observe this slope given that the null hypothesis is true (temperature is not rising over time) is very low\n* there appears to be two regimes of temperature rise. From 1980 onward, the temperature trends appears to have accelerated and have a higher slope\n    * To see that we will fit two separate models, one from 1850 - 1980, and one from 1980 onwards","9417f3b2":"#### Countries with the slowest rate (average of cities) of temperature increase","801555ce":"#### Rate of temperature increase appears to be accelerating\n* From 1850 to 1980, the temperature was rising 0.006 degrees per year\n* From 1980 onwards, the rate of increase was 0.0275 degress per year\n\n#### The above is based on the highly aggregated global average. To be more precise, let's take a look at the analysis at the city level, where the temperature measurements will be more self consistent","f00ca4fd":"#### Cities with the fastest rate of temperature increase","f7dff349":"# This analysis looks to answer the following questions in a statistical rigorous way\n### 1. Is the temperature rising? \n### 2. How fast? \n### 3. How does this differ across the world","79b1fb03":"### Observations\n* Uncertainty is relatively high prior to 1850, and making statistical inference less reliable\n    * For subsequent analysis, will filter out data prior to 1850\n* Temperature trend is expectedly seasonal. The seasonal trend is of secondary importance when it comes to examining the overall trends in temperature. \n    * For subsequent analysis, will aggregate data to yearly metrics to remove seasonality","525ff74c":"#### Cities with the slowest rate of temperature increase"}}