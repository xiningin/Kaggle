{"cell_type":{"f40784c7":"code","cfdbf9a4":"code","42da0449":"code","14c62259":"code","183ae0d6":"code","cc1786c5":"code","a987c357":"code","37faa307":"code","c0845000":"code","8eb51836":"code","e4ec9db3":"code","552518ce":"code","2656792b":"code","b48d24b5":"code","4ead5d8e":"code","8792224c":"code","d7031105":"code","200fde4e":"code","4b75427f":"code","e3287f35":"code","97628a35":"code","8d75cbb1":"code","549f8579":"markdown","c03e4701":"markdown","4751f870":"markdown","f5edd4ad":"markdown","6d97b584":"markdown","5924e476":"markdown","33bc2198":"markdown","33987b7b":"markdown","eb137ed8":"markdown","a99c7929":"markdown","8e534b52":"markdown","9402932a":"markdown","90ca4e9a":"markdown","8c34cb4d":"markdown","7a96b4d5":"markdown"},"source":{"f40784c7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt \nfrom collections import Counter\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# plotly\n# import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","cfdbf9a4":"# Load data that we will use.\ntimesData = pd.read_csv(\"..\/input\/world-university-rankings\/timesData.csv\")","42da0449":"timesData.info()","14c62259":"timesData.head(10)","183ae0d6":"timesData.tail(10)","cc1786c5":"# prepare data frame\ndf = timesData.iloc[:100,:]                             # dataframe ilk 100 uzerinden alindi!!!!\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.world_rank,                         # dataframe de sutun isimleri birebir\n                    y = df.citations,\n                    mode = \"lines\",\n                    name = \"citations\",\n                    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n                    text= df.university_name)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.world_rank,\n                    y = df.teaching,\n                    mode = \"lines+markers\",\n                    name = \"teaching\",\n                    marker = dict(color = 'rgba(80, 26, 80, 0.8)'),    #isaretleme noktalama renkleri ve saydamligi 0.8 olacak\n                    text= df.university_name)                          #grafikte uzerinde gelince isim gorunsun diye kullaniliyor\ndata = [trace1, trace2]\nlayout = dict(title = 'Citation and Teaching vs World Rank of Top 100 Universities',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)      #zeroline sifirdan baslamak gosterilsin mi?\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","a987c357":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:100,:]             # 2014 2015 2016 ilk 100 al\ndf2015 = timesData[timesData.year == 2015].iloc[:100,:]\ndf2016 = timesData[timesData.year == 2016].iloc[:100,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go                              # go burada modul ismi olarak adlandirildi\n# creating trace1\ntrace1 =go.Scatter(\n                    x = df2014.world_rank,\n                    y = df2014.citations,\n                    mode = \"markers\",\n                    name = \"2014\",\n                    marker = dict(color = 'rgba(255, 128, 255, 0.8)'),\n                    text= df2014.university_name)\n# creating trace2\ntrace2 =go.Scatter(\n                    x = df2015.world_rank,\n                    y = df2015.citations,\n                    mode = \"markers\",\n                    name = \"2015\",\n                    marker = dict(color = 'rgba(255, 128, 2, 0.8)'),\n                    text= df2015.university_name)\n# creating trace3\ntrace3 =go.Scatter(\n                    x = df2016.world_rank,\n                    y = df2016.citations,\n                    mode = \"markers\",\n                    name = \"2016\",\n                    marker = dict(color = 'rgba(0, 255, 200, 0.8)'),\n                    text= df2016.university_name)\ndata = [trace1, trace2, trace3]\nlayout = dict(title = 'Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False),\n              yaxis= dict(title= 'Citation',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data, layout = layout)\niplot(fig)","37faa307":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\ndf2014","c0845000":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.citations,\n                name = \"citations\",\n                marker = dict(color = 'rgba(255, 174, 255, 0.5)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\n# create trace2 \ntrace2 = go.Bar(\n                x = df2014.university_name,\n                y = df2014.teaching,\n                name = \"teaching\",\n                marker = dict(color = 'rgba(255, 255, 128, 0.5)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df2014.country)\ndata = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","8eb51836":"# prepare data frames\ndf2014 = timesData[timesData.year == 2014].iloc[:3,:]\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\nx = df2014.university_name\n\ntrace1 = {\n  'x': x,\n  'y': df2014.citations,\n  'name': 'citation',\n  'type': 'bar'\n};\ntrace2 = {\n  'x': x,\n  'y': df2014.teaching,\n  'name': 'teaching',\n  'type': 'bar'\n};\ndata = [trace1, trace2];\nlayout = {\n  'xaxis': {'title': 'Top 3 universities'},\n  'barmode': 'relative',\n  'title': 'citations and teaching of top 3 universities in 2014'\n};\nfig = go.Figure(data = data, layout = layout)\niplot(fig)","e4ec9db3":"# import graph objects as \"go\" and import tools\nimport plotly.graph_objs as go\nfrom plotly import tools\nimport matplotlib.pyplot as plt\n# prepare data frames\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\n\ny_saving = [each for each in df2016.research]\ny_net_worth  = [float(each) for each in df2016.income]\nx_saving = [each for each in df2016.university_name]\nx_net_worth  = [each for each in df2016.university_name]\ntrace0 = go.Bar(\n                x=y_saving,\n                y=x_saving,\n                marker=dict(color='rgba(171, 50, 96, 0.6)',line=dict(color='rgba(171, 50, 96, 1.0)',width=1)),\n                name='research',\n                orientation='h',\n)\ntrace1 = go.Scatter(\n                x=y_net_worth,\n                y=x_net_worth,\n                mode='lines+markers',\n                line=dict(color='rgb(63, 72, 204)'),\n                name='income',\n)\nlayout = dict(\n                title='Citations and income',\n                yaxis=dict(showticklabels=True,domain=[0, 0.85]),\n                yaxis2=dict(showline=True,showticklabels=False,linecolor='rgba(102, 102, 102, 0.8)',linewidth=2,domain=[0, 0.85]),\n                xaxis=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0, 0.42]),\n                xaxis2=dict(zeroline=False,showline=False,showticklabels=True,showgrid=True,domain=[0.47, 1],side='top',dtick=25),\n                legend=dict(x=0.029,y=1.038,font=dict(size=10) ),\n                margin=dict(l=200, r=20,t=70,b=70),\n                paper_bgcolor='rgb(248, 248, 255)',\n                plot_bgcolor='rgb(248, 248, 255)',\n)\nannotations = []\ny_s = np.round(y_saving, decimals=2)             #decimal 2 basamakli round ettir\ny_nw = np.rint(y_net_worth)\n\n# Adding labels\nfor ydn, yd, xd in zip(y_nw, y_s, x_saving):\n    # labeling the scatter savings\n    annotations.append(dict(xref='x2', yref='y2', y=xd, x=ydn - 4,text='{:,}'.format(ydn),font=dict(family='Arial', size=12,color='rgb(63, 72, 204)'),showarrow=False))\n    # labeling the bar net worth\n    annotations.append(dict(xref='x1', yref='y1', y=xd, x=yd + 3,text=str(yd),font=dict(family='Arial', size=12,color='rgb(171, 50, 96)'),showarrow=False))\n\nlayout['annotations'] = annotations\n\n# Creating two subplots\nfig = tools.make_subplots(rows=1, cols=2, specs=[[{}, {}]], shared_xaxes=True,\n                          shared_yaxes=False, vertical_spacing=0.001)\n\nfig.append_trace(trace0, 1, 1)\nfig.append_trace(trace1, 1, 2)\n\nfig['layout'].update(layout)\niplot(fig)","552518ce":"# data preparation\ndf2016 = timesData[timesData.year == 2016].iloc[:7,:]\n# df2016\n# burda num_students te ',' kullanilmis ve bunlari '.' ile degistirmemiz gerekiyor.\n\n#Replace yapiyoruz\npie1 = df2016.num_students\npie1_list = [float(each.replace(',', '.')) for each in df2016.num_students]  # str(2,4) => str(2.4) = > float(2.4) = 2.4\nlabels = df2016.university_name\n","2656792b":"# figure\nfig = {\n  \"data\": [\n    {\n      \"values\": pie1_list,\n      \"labels\": labels,\n      \"domain\": {\"x\": [0, .5]},\n      \"name\": \"Number Of Students Rates\",\n      \"hoverinfo\":\"label+percent+name\",\n      \"hole\": .3,                                   # simit seklinde gostermek icin\n      \"type\": \"pie\"\n    },],\n  \"layout\": {\n        \"title\":\"Universities Number of Students rates\",\n        \"annotations\": [\n            { \"font\": { \"size\": 20},\n              \"showarrow\": False,\n              \"text\": \"Number of Students\",\n                \"x\": 0.20,\n                \"y\": 1\n            },\n        ]\n    }\n}\niplot(fig)","b48d24b5":"df2016.info()","4ead5d8e":"# data preparation: buradada ',' ile '.' arasinda replace yaparak datamizi duzenleyelim\n\ndf2016 = timesData[timesData.year == 2016].iloc[:20,:]                 #ilk 20 degeri aldik\nnum_students_size  = [float(each.replace(',', '.')) for each in df2016.num_students]\ninternational_color = [float(each) for each in df2016.international]\ndata = [\n    {\n        'y': df2016.teaching,\n        'x': df2016.world_rank,\n        'mode': 'markers',\n        'marker': {\n            'color': international_color,\n            'size': num_students_size,\n            'showscale': True\n        },\n        \"text\" :  df2016.university_name    \n    }\n]\niplot(data)","8792224c":"# prepare data\nx2011 = timesData.student_staff_ratio[timesData.year == 2011]\nx2012 = timesData.student_staff_ratio[timesData.year == 2012]\n\ntrace1 = go.Histogram(\n    x=x2011,\n    opacity=0.75,\n    name = \"2011\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=x2012,\n    opacity=0.75,\n    name = \"2012\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay',                           # overlay ustuste sutunlari cizdirme yapiyor\n                   title=' students-staff ratio in 2011 and 2012',\n                   xaxis=dict(title='students-staff ratio'),\n                   yaxis=dict( title='Count'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","d7031105":"from wordcloud import WordCloud\n# data prepararion\nx2011 = timesData.country[timesData.year == 2011]\nplt.subplots(figsize=(8,8))\nwordcloud = WordCloud(\n                          background_color='white',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(x2011))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","200fde4e":"# data preparation\nx2015 = timesData[timesData.year == 2015]\n\ntrace0 = go.Box(\n    y=x2015.total_score,\n    name = 'total score of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace1 = go.Box(\n    y=x2015.research,\n    name = 'research of universities in 2015',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace0, trace1]\niplot(data)","4b75427f":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = timesData[timesData.year == 2015]\ndata2015 = dataframe.loc[:,[\"research\",\"international\", \"total_score\"]]\ndata2015[\"index\"] = np.arange(1,len(data2015)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(data2015, diag='box', index='index',colormap='Portland',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","e3287f35":"# first line plot\ntrace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.teaching,\n    name = \"teaching\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"income\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Income and Teaching vs World Rank of Universities'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","97628a35":"# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    z=dataframe.citations,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color='rgb(255,0,0)',                # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","8d75cbb1":"trace1 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.research,\n    name = \"research\"\n)\ntrace2 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.citations,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"citations\"\n)\ntrace3 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.income,\n    xaxis='x3',\n    yaxis='y3',\n    name = \"income\"\n)\ntrace4 = go.Scatter(\n    x=dataframe.world_rank,\n    y=dataframe.total_score,\n    xaxis='x4',\n    yaxis='y4',\n    name = \"total_score\"\n)\ndata = [trace1, trace2, trace3, trace4]\nlayout = go.Layout(\n    xaxis=dict(\n        domain=[0, 0.45]\n    ),\n    yaxis=dict(\n        domain=[0, 0.45]\n    ),\n    xaxis2=dict(\n        domain=[0.55, 1]\n    ),\n    xaxis3=dict(\n        domain=[0, 0.45],\n        anchor='y3'\n    ),\n    xaxis4=dict(\n        domain=[0.55, 1],\n        anchor='y4'\n    ),\n    yaxis2=dict(\n        domain=[0, 0.45],\n        anchor='x2'\n    ),\n    yaxis3=dict(\n        domain=[0.55, 1]\n    ),\n    yaxis4=dict(\n        domain=[0.55, 1],\n        anchor='x4'\n    ),\n    title = 'Research, citation, income and total score VS World Rank of Universities'\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","549f8579":"# Scatter Matrix Plots\n\nScatter Matrix = it helps us to see covariance and relation between more than 2 features\n\n    import figure factory as ff\n    create_scatterplotmatrix = creates scatter plot\n        data2015 = prepared data. It includes research, international and total scores with index from 1 to 401\n        colormap = color map of scatter plot\n        colormap_type = color type of scatter plot\n        height and weight\n\n","c03e4701":"# Baska sekilde cizimi alternatif","4751f870":"# Histogram\n\nLets look at histogram of students-staff ratio in 2011 and 2012 years.\n\n    trace1 = first histogram\n        x = x axis\n        y = y axis\n        opacity = opacity of histogram\n        name = name of legend\n        marker = color of histogram\n    trace2 = second histogram\n    layout = layout\n        barmode = mode of histogram like overlay. Also you can change it with stack\n\n","f5edd4ad":"# Word Cloud\n\nDegerlendirmeler yapilsin hangi daha coksa ve o ulkedeyse ona gore kelimeleri buyuk yapsin!\n\nNot a pyplot but learning it is good for visualization. Lets look at which country is mentioned most in 2011.\n\n    WordCloud = word cloud library that I import at the beginning of kernel\n        background_color = color of back ground\n        generate = generates the country name list(x2011) a word cloud\n","6d97b584":"\n\nThird Bar Charts Example: Horizontal bar charts. (style3) Citation vs income for universities\n\n    Import graph_objs as go and importing tools\n        Tools: used for subplots\n    Creating trace1\n        bar: bar plot\n            x = x axis\n            y = y axis\n            marker\n                color: color of bars\n                line: bar line color and width\n            name: name of bar\n            orientation: orientation like horizontal\n                creating trace2\n                scatter: scatter plot\n                    x = x axis\n                    y = y axis\n                    mode: scatter type line line + markers or only markers\n                    line: properties of line\n                        color: color of line\n                    name: name of scatter plot\n        layout: axis, legend, margin, paper and plot properties *\n\n","5924e476":"# Multiple Subplots\n\nMultiple Subplots: While comparing more than one features, multiple subplots can be useful. ","33bc2198":"# Pie Charts\n\nPie Charts Example: Students rate of top 7 universities in 2016\n\n    fig: create figures\n        data: plot type\n            values: values of plot\n            labels: labels of plot\n            name: name of plots\n            hoverinfo: information in hover\n            hole: hole width\n            type: plot type like pie\n        layout: layout of plot\n            title: title of layout\n            annotations: font, showarrow, text, x, y\n\n","33987b7b":"\n\nSecond Bar Charts Example: citations and teaching of top 3 universities in 2014 (style2)\nActually, if you change only the barmode from group to relative in previous example, you achieve what we did here. However, for diversity I use different syntaxes.\n\n    Import graph_objs as go\n    Creating traces\n        x = x axis\n        y = y axis\n        name = name of the plots\n        type = type of plot like bar plot\n    data = is a list that we add traces into it\n    layout = it is dictionary.\n        xaxis = label of x axis\n        barmode = bar mode of bars like grouped( previous example) or relative\n        title = title of layout\n    fig = it includes data and layout\n    iplot() = plots the figure(fig) that is created by data and layout\n\n","eb137ed8":"# Bubble Charts\n\nBubble Charts Example: University world rank (first 20) vs teaching score with number of students(size) and international score (color) in 2016\n\n    x = x axis\n    y = y axis\n    mode = markers(scatter)\n    marker = marker properties\n        color = third dimension of plot. Internaltional score\n        size = fourth dimension of plot. Number of students\n    text: university names\n\n","a99c7929":"# Bar Charts\n\nFirst Bar Charts Example: citations and teaching of top 3 universities in 2014 (style1)\n\n    Import graph_objs as go\n    Creating traces\n        x = x axis\n        y = y axis\n        mode = type of plot like marker, line or line + markers\n        name = name of the plots\n        marker = marker is used with dictionary.\n            color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n            line = It is dictionary. line between bars\n                color = line color around bars\n        text = The hover text (hover is curser)\n    data = is a list that we add traces into it\n    layout = it is dictionary.\n        barmode = bar mode of bars like grouped\n    fig = it includes data and layout\n    iplot() = plots the figure(fig) that is created by data and layout\n\n","8e534b52":"# Inset Plots\u00b6\n\nInset Matrix = 2 plots are in one frame ","9402932a":"# Line Charts\n\nLine Charts Example: Citation and Teaching vs World Rank of Top 100 Universities\n\n    Import graph_objs as go\n    Creating traces\n        x = x axis\n        y = y axis\n        mode = type of plot like marker, line or line + markers\n        name = name of the plots\n        marker = marker is used with dictionary.\n            color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        text = The hover text (hover is curser)\n    data = is a list that we add traces into it\n    layout = it is dictionary.\n        title = title of layout\n        x axis = it is dictionary\n            title = label of x axis\n            ticklen = length of x axis ticks\n            zeroline = showing zero line or not\n    fig = it includes data and layout\n    iplot() = plots the figure(fig) that is created by data and layout\n\n","90ca4e9a":"# Scatter\n\nScatter Example: Citation vs world rank of top 100 universities with 2014, 2015 and 2016 years\n\n    Import graph_objs as go\n    Creating traces\n        x = x axis\n        y = y axis\n        mode = type of plot like marker, line or line + markers\n        name = name of the plots\n        marker = marker is used with dictionary.\n            color = color of lines. It takes RGB (red, green, blue) and opacity (alpha)\n        text = The hover text (hover is curser)\n    data = is a list that we add traces into it\n    layout = it is dictionary.\n        title = title of layout\n        x axis = it is dictionary\n            title = label of x axis\n            ticklen = length of x axis ticks\n            zeroline = showing zero line or not\n        y axis = it is dictionary and same with x axis\n    fig = it includes data and layout\n    iplot() = plots the figure(fig) that is created by data and layout\n\n","8c34cb4d":"# 3D Scatter Plot with Colorscaling\n\n3D Scatter: Sometimes 2D is not enough to understand data. Therefore adding one more dimension increase the intelligibility of the data. Even we will add color that is actually 4th dimension.\n\n    go.Scatter3d: create 3d scatter plot\n    x,y,z: axis of plots\n    mode: market that is scatter\n    size: marker size\n    color: axis of colorscale\n    colorscale: actually it is 4th dimension\n\n","7a96b4d5":"# Box Plots\n\n    Box Plots\n\n        Median (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n            25th percentile = quartile 1 (Q1) that is lower quartile\n            75th percentile = quartile 3 (Q3) that is higher quartile\n            height of box = IQR = interquartile range = Q3-Q1\n            Whiskers = 1.5 * IQR from the Q1 and Q3\n            Outliers = being more than 1.5*IQR away from median commonly.\n\n        trace = box\n            y = data we want to visualize with box plot\n            marker = color\n"}}