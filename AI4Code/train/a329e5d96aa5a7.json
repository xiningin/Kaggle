{"cell_type":{"fbbd0524":"code","884f72a3":"code","8ebc956d":"code","54c69e8c":"code","408da688":"code","353497e8":"code","653535ab":"code","e3a1e07a":"code","e3f97b40":"code","25f7d9d2":"code","95783465":"code","5f740277":"code","7d488cce":"code","6d5e9508":"code","7f286b00":"code","c66f899a":"code","9c5d2c32":"code","860252c4":"code","8f4ca076":"code","a4fdd256":"code","2c1c5f22":"code","04c355de":"code","55c0ce05":"code","a64e470c":"code","1639f44d":"code","7a2e44c4":"code","d14ec978":"code","0fb1a0a3":"code","94738d75":"code","6ec0d586":"code","bab1b528":"code","2cf42f14":"code","cee20b22":"code","5ce6efa5":"code","db113207":"code","fd794bc4":"code","f366d52a":"code","224a8dc7":"code","d821c576":"code","deba710e":"code","032b216c":"code","006b2ae2":"code","38c017dc":"code","c49aacfa":"code","706565a0":"code","8eede9ce":"code","1f48f32a":"code","0bcd154a":"code","ba1bda96":"code","087b40b9":"code","f8c40148":"code","b8edb0cd":"code","fddfd1ab":"code","029eede4":"code","575406eb":"code","f6b04f69":"code","4bda3de1":"code","f76a19c4":"code","98d4ea34":"code","7004a1f8":"code","ea4aba4c":"code","3319a395":"code","6e2da689":"code","10296163":"code","fd6ec4e5":"code","f29fba86":"code","d1c1aa1d":"code","71dc14b1":"code","3621ab76":"code","af62dd8b":"code","d774ed5c":"code","4c00a8ac":"code","da587783":"code","9ebbbb8f":"code","af69e296":"code","97643f86":"code","46f56913":"code","1a120170":"code","f247e3a1":"code","6a037479":"code","2fd1aa04":"code","e2d658f3":"code","0311fa79":"code","0d717801":"code","20901053":"code","cc89165b":"code","6c36ec95":"code","d284fe54":"code","06171f84":"code","da61fceb":"code","2bdc24e3":"code","b2dcd1a9":"code","9c2cef58":"code","d5f9dce3":"code","25cdce7a":"code","909e2073":"code","91d6af84":"code","573a2aa3":"code","6dab9c8d":"code","222069ef":"code","33a562f9":"code","850bbaa5":"code","44869fa5":"code","0c6befbf":"code","f97d35a9":"code","54406cda":"code","c4a98edc":"code","71d3a769":"code","75872008":"code","59e138ce":"code","909d3ffb":"code","d1ab6647":"markdown","316cdfff":"markdown","30e53ab7":"markdown","eba654dd":"markdown","9c954fd2":"markdown","3baa0d53":"markdown","f519a68c":"markdown","49ffea5d":"markdown","f3017a49":"markdown","47b0471d":"markdown","596fb92b":"markdown","d6ca4df7":"markdown","679e8bed":"markdown","5960bcc2":"markdown","86c10025":"markdown","2a72f6ac":"markdown","fb5de9ca":"markdown","21225bc6":"markdown","c9e2cf6c":"markdown","491f8992":"markdown","2e7290ce":"markdown","12244a24":"markdown","21fc8382":"markdown","3b396f91":"markdown"},"source":{"fbbd0524":"!pip install regex","884f72a3":"#Importing Libraries\nimport math,time,random,datetime\nimport numpy as np\nimport pandas as pd\nimport regex as re\n\n#Visualization\nimport matplotlib.pyplot as plt\nimport missingno\nimport seaborn as sns\nplt.style.use(\"seaborn-whitegrid\")\nfrom plotly.subplots import make_subplots\nimport plotly.graph_objs as go\n\n#Preprocessing \nfrom sklearn.preprocessing import OneHotEncoder, LabelEncoder, label_binarize\nfrom sklearn.impute import SimpleImputer\n\n#Machine Learning\nimport catboost\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import model_selection, tree, preprocessing, metrics, linear_model\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LinearRegression, LogisticRegression, SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom catboost import CatBoostClassifier, Pool, cv\nfrom sklearn.ensemble import RandomForestClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nfrom sklearn.metrics import accuracy_score, classification_report\nfrom sklearn import metrics\n\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom mlxtend.feature_selection import SequentialFeatureSelector as SFS\nimport mlxtend\nfrom sklearn.model_selection import cross_val_score\n","8ebc956d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","54c69e8c":"#Importing Datasets\ntrain = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\nsubmission = pd.read_csv(\"\/kaggle\/input\/titanic\/gender_submission.csv\")","408da688":"train.head(20)","353497e8":"train.describe()","653535ab":"X_train = train.drop(columns = [\"PassengerId\", \"Survived\"])\ny_train = train[\"Survived\"]\nX_test = test","e3a1e07a":"X_train.head()","e3f97b40":"train.head()","25f7d9d2":"#Missing values?\nmissingno.matrix(train, figsize = (30,10))","95783465":"#Printing exact number of missing values\nprint(train.isnull().sum())\nprint()\nprint(\"Total records: \",len(train))","5f740277":"#How many passengers for each class?\nsns.countplot(data = train, x = \"Pclass\")","7d488cce":"#How many from each class survived?\nsns.countplot(data = train, x = \"Pclass\", hue = \"Survived\")","6d5e9508":"train.head()","7f286b00":"#How many survived and how many died\nsns.countplot(data = train, x = \"Survived\")","c66f899a":"train[\"Survived\"].value_counts()","9c5d2c32":"train.head(15)","860252c4":"train[\"Name\"].value_counts()","8f4ca076":"#Iterate through the name column in train\nfor index, record in X_train.iterrows():\n    print(record['Name'])","a4fdd256":"X_train.head()","2c1c5f22":"X_test.head()","04c355de":"X_test = X_test.drop(columns = [\"PassengerId\"])","55c0ce05":"X_train.head()","a64e470c":"#Creating a X df for all values in Name (in use later for labeling)\nX = pd.concat([X_train, X_test], axis=0, ignore_index = True)\nX","1639f44d":"X.tail()","7a2e44c4":"def func(row):\n    if \"Mr.\" in row['Name']:\n        return \"Mr\"\n    elif \"Mrs.\" in row['Name']:\n        return \"Mrs\"\n    elif \"Miss.\" in row['Name']:\n        return \"Miss\"\n    elif \"Don.\" in row['Name']:\n        return \"Don\"\n    elif \"Master.\" in row['Name']:\n        return \"Master\"\n    elif \"Rev.\" in row['Name']:\n        return \"Rev\"\n    elif \"Dr.\" in row['Name']:\n        return \"Dr\"\n    elif \"Ms.\" in row['Name']:\n        return \"Ms\"\n    elif \"Mlle.\" in row['Name']:\n        return \"Mlle\"\n    elif \"Col.\" in row['Name']:\n        return \"Col\"\n    elif \"Countess.\" in row['Name']:\n        return \"Countess\"\n    elif \"Jonkheer.\" in row['Name']:\n        return \"Jonkheer\"\n    elif \"Capt.\" in row['Name']:\n        return \"Capt\"\n    elif \"Sir.\" in row['Name']:\n        return \"Sir\"\n    elif \"Mme.\" in row['Name']:\n        return \"Mme\"\n    elif \"Major.\" in row['Name']:\n        return \"Major\"\n    elif \"Lady.\" in row['Name']:\n        return \"Lady\"\n    elif \"Dona.\"in row['Name']:\n        return \"Dona\"\n    return row['Name']\n\nX['Name'] = X.apply(func, axis=1)","d14ec978":"X","0fb1a0a3":"X_train_titles = X\nX_train_titles","94738d75":"for i in range(891,1309):\n    X_train_titles = X_train_titles.drop(X_train_titles.index[-1])","6ec0d586":"X_train_titles","bab1b528":"#Plotting count distribution for name feature\nsns.set(rc={'figure.figsize':(17,6)})\nsns.countplot(data = X_train_titles, x = \"Name\")","2cf42f14":"#Plotting how many of each title survived\nsns.countplot(data = X_train_titles, x = \"Name\", hue = train.Survived)","cee20b22":"# Plotting boxplots for each Title Name according to their ticket fare\nax = X_train_titles.boxplot(by='Name', column='Fare',\n                           figsize=(10, 8))\n\nax.set_xlabel('Name Title')\nax.set_ylabel('Fare')\nplt.suptitle('')\nplt.tight_layout()\nplt.show()","5ce6efa5":"# Plotting boxplots for each Title Name according to their age\nax = X_train_titles.boxplot(by='Name', column='Age',\n                           figsize=(10, 8))\n\nax.set_xlabel('Name Title')\nax.set_ylabel('Age')\nplt.suptitle('')\nplt.tight_layout()\nplt.show()","db113207":"#Plotting distribution of gender\nsns.set(rc={'figure.figsize':(5,5)})\nsns.countplot(data = train, x = \"Sex\")","fd794bc4":"#Plotting sex in relation to who survived\nsns.countplot(data = train, x = \"Sex\", hue = \"Survived\")","f366d52a":"#Plotting sex in relation to Passenger Class\nsns.countplot(data = train, x = \"Sex\", hue = \"Pclass\")","224a8dc7":"# How many missing values?\nprint(\"Missing values for Age: \", train.Age.isnull().sum())\nprint(\"Number of values in train data: \", len(train))","d821c576":"#Plotting freq histogram for Age\nax = (train[\"Age\"]).plot.hist(figsize = (15,8), bins = 85, xlim = [0,85])\nax.set_xlabel(\"Age\")","deba710e":"#Plotting freq histogram for Age with density\nax = (train[\"Age\"]).plot.hist(figsize = (15,8), density = True, bins = 85, xlim = [0,85])\nax.set_xlabel(\"Age with density\")\ntrain[\"Age\"].plot.density(ax = ax)","032b216c":"#Plotting age distribution histogram with density  in accordance with Survived\nplt.figure(figsize=(15,8))\nplt.xlim(0,85)\nsns.distplot(train.loc[train[\"Survived\"] == 1][\"Age\"], \n                     kde_kws={\"label\": \"Survived\"}, bins = 85)\nsns.distplot(train.loc[train[\"Survived\"] == 0][\"Age\"], \n                     kde_kws={\"label\": \"Did not survive\"}, bins = 85)","006b2ae2":"train.dtypes","38c017dc":"#See the numbers of the distribution of SibSp\ntrain.SibSp.value_counts()","c49aacfa":"#Plotting the distribution of SibSp\nsns.countplot(data = train, x = \"SibSp\")","706565a0":"#Plotting the distribution of SibSp in accordance with Survived\nsns.countplot(data = train, x = \"SibSp\", hue = \"Survived\")","8eede9ce":"#Plotting the distribution of SibSp in accordance with Passenger Class\nsns.countplot(data = train, x = \"SibSp\", hue = \"Pclass\")","1f48f32a":"#Plotting the distribution of SibSp in accordance with Parents\/Children\nplt.figure(figsize=(10,8))\nsns.countplot(data = train, x = \"SibSp\", hue = \"Parch\")","0bcd154a":"#Plotting the distribution of Parch\nsns.countplot(data = train, x = \"Parch\")","ba1bda96":"#Plotting the distribution of Parch\nfig = plt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.countplot(data = train, x = \"Parch\", hue = \"Survived\")\nplt.subplot(1,2,2)\nsns.countplot(data = train, x= \"SibSp\", hue = \"Survived\")","087b40b9":"train.head()","f8c40148":"#Iterate through the ticket column in train\nfor index, record in X_train.iterrows():\n    print(record['Ticket'])","b8edb0cd":"# Missing values?\ntrain.Ticket.isnull().sum()","fddfd1ab":"train.head()","029eede4":"X_train_titles_ticket = X_train_titles","575406eb":"def func(row):\n    if re.search('[a-zA-Z]', row[\"Ticket\"]):\n        return 1\n    return 0\n\nX_train_titles_ticket['Ticket'] = X_train_titles_ticket.apply(func, axis=1)","f6b04f69":"def func(row):\n    if re.search('[a-zA-Z]', row[\"Ticket\"]):\n        return 1\n    return 0\n\nX['Ticket'] = X.apply(func, axis=1)","4bda3de1":"X_train_titles_ticket.head()","f76a19c4":"#Plotting the distribution of Ticket whether it has a letter or not\nsns.countplot(data = X_train_titles_ticket, x = \"Ticket\")","98d4ea34":"#Plotting the distribution of Ticket whether it has a letter or not in accordance with the survival\nsns.countplot(data = X_train_titles_ticket, x = \"Ticket\", hue = train.Survived)","7004a1f8":"train[\"Fare\"].describe()","ea4aba4c":"#Plotting freq histogram for Fare\nax = (train[\"Fare\"]).plot.hist(figsize = (15,8), bins = 100, xlim = [0,515])\nax.set_xlabel(\"Fare\")","3319a395":"#Plotting freq histogram for Fare with density\nax = (train[\"Fare\"]).plot.hist(figsize = (15,8), density = True, bins = 100, xlim = [0,515])\nax.set_xlabel(\"Fare with density\")\ntrain[\"Fare\"].plot.density(ax = ax)","6e2da689":"#Plotting Fare distribution histogram with density  in accordance with Survived\nplt.figure(figsize=(15,8))\nplt.xlim(0,515)\nsns.distplot(train.loc[train[\"Survived\"] == 1][\"Fare\"], \n                     kde_kws={\"label\": \"Survived\"}, bins = 100)\nsns.distplot(train.loc[train[\"Survived\"] == 0][\"Fare\"], \n                     kde_kws={\"label\": \"Did not survive\"}, bins = 100)","10296163":"train.head()","fd6ec4e5":"# How many missing values?\nprint(\"Missing values for Cabin: \", train.Cabin.isnull().sum())\nprint(\"Number of values in train data: \", len(train))","f29fba86":"X_train_titles_ticket = X_train_titles_ticket.drop(columns = [\"Cabin\"])","d1c1aa1d":"X_train_titles_ticket.head()","71dc14b1":"# How many missing values?\nprint(\"Missing values for Embarked: \", train.Embarked.isnull().sum())\nprint(\"Number of values in train data: \", len(train))","3621ab76":"#Plotting the distribution of Embarked\nsns.countplot(data = train, x = \"Embarked\")","af62dd8b":"#Plotting the distribution of Embarked in accordance with Survived\nsns.countplot(data = train, x = \"Embarked\", hue = \"Survived\")","d774ed5c":"#Plotting the relationship between Embarked and Title Name\nfig = plt.figure(figsize=(20,5))\nsns.countplot(data = train, x = X_train_titles_ticket.Name, hue = \"Embarked\")","4c00a8ac":"X_train_titles_ticket.head()","da587783":"X_train.head()","9ebbbb8f":"train.head()","af69e296":"X_test.head()","97643f86":"#Used only for later for the one hot encoding of name\nX = X.drop(columns = [\"Cabin\"])\nX","46f56913":"X_train.head()","1a120170":"#Replacing missing age values with the median one\nimputer_age = SimpleImputer(missing_values=np.nan, strategy='median')\nimputer_age.fit(X[[\"Age\"]])\nX[[\"Age\"]] = imputer_age.transform(X[[\"Age\"]])","f247e3a1":"X.isnull().sum()","6a037479":"# Replacing missing Embarked values with the msot frequent one which is S\nX[\"Embarked\"] = X[\"Embarked\"].fillna(value = \"S\")","2fd1aa04":"X","e2d658f3":"# One hot encoding for X_train_titles_ticket the features name,pclass,sex,embarked, ticket\n\ndf_embarked_one_hot = pd.get_dummies(X['Embarked'], \n                                     prefix='embarked')\n\ndf_sex_one_hot = pd.get_dummies(X['Sex'], \n                                prefix='sex')\n\ndf_plcass_one_hot = pd.get_dummies(X['Pclass'], \n                                   prefix='pclass')\n\ndf_name_one_hot = pd.get_dummies(X['Name'], \n                                   prefix='name')\n\ndf_ticket_one_hot = pd.get_dummies(X['Ticket'], \n                                   prefix='ticket')\n\none_hot_encoded_X = pd.concat([X,\n                        df_ticket_one_hot,\n                        df_name_one_hot,\n                        df_embarked_one_hot, \n                        df_sex_one_hot, \n                        df_plcass_one_hot], axis=1)\n\none_hot_encoded_X = one_hot_encoded_X.drop(['Pclass', 'Sex', 'Embarked', 'Name', \"Ticket\"], axis=1)","0311fa79":"one_hot_encoded_X","0d717801":"# Dropping because the information can be contained in one column\none_hot_encoded_X = one_hot_encoded_X.drop([\"ticket_0\", \"sex_female\"], axis=1)","20901053":"one_hot_encoded_X.dtypes","cc89165b":"one_hot_encoded_X","6c36ec95":"one_hot_encoded_X_train = one_hot_encoded_X\none_hot_encoded_X_test = one_hot_encoded_X\n","d284fe54":"train","06171f84":"test","da61fceb":"one_hot_encoded_X","2bdc24e3":"for i in range(891,1309):\n    one_hot_encoded_X_train = one_hot_encoded_X_train.drop(one_hot_encoded_X_train.index[[-1]])\n\none_hot_encoded_X_train","b2dcd1a9":"one_hot_encoded_X_test","9c2cef58":"one_hot_encoded_X_test = one_hot_encoded_X\none_hot_encoded_X_test = one_hot_encoded_X_test.iloc[891:,:]","d5f9dce3":"one_hot_encoded_X_test","25cdce7a":"one_hot_encoded_X_train","909e2073":"#Which are the categorical features?\ncat_features = np.where(one_hot_encoded_X_train.dtypes != np.float)[0]\ncat_features","91d6af84":"#Defining train pool\ntrain_pool = Pool(one_hot_encoded_X_train, \n                  y_train,\n                  cat_features)","573a2aa3":"#Defining and fitting model\nmodel = CatBoostClassifier(iterations = 1000,\n                           custom_loss=['Accuracy'],\n                           loss_function='Logloss')\n\nmodel.fit(train_pool,plot=True)\n\n","6dab9c8d":"acc_model = round(model.score(one_hot_encoded_X_train, y_train) * 100, 2)","222069ef":"#Performing Cross-Validation 10fold\ncv_params = model.get_params()\n\n\ncv_data = cv(train_pool,\n             cv_params,\n             fold_count=10,\n             plot=True)\n\n\n# CatBoost CV results save into a dataframe (cv_data), let's withdraw the maximum accuracy score\nacc_cv_model = round(np.max(cv_data['test-Accuracy-mean']) * 100, 2)","33a562f9":"print(\"---CatBoost Accuracy with and without CV---\")\nprint(\"Accuracy: {}\".format(acc_model))\nprint(\"Accuracy cross-validation 10-Fold: {}\".format(acc_cv_model))","850bbaa5":"metrics = ['Precision', 'Recall', 'F1', 'AUC']\n\neval_metrics = model.eval_metrics(train_pool,\n                                  metrics=metrics,\n                                  plot=True)\n\nfor metric in metrics:\n    print(str(metric)+\": {}\".format(np.mean(eval_metrics[metric])))","44869fa5":"predictions = model.predict(one_hot_encoded_X_test)","0c6befbf":"predictions","f97d35a9":"test.head()","54406cda":"submission.head()","c4a98edc":"titanic_submission = pd.DataFrame()\ntitanic_submission[\"PassengerId\"] = test[\"PassengerId\"]\ntitanic_submission[\"Survived\"] = predictions\ntitanic_submission.head(15)","71d3a769":"titanic_submission.tail()","75872008":"print(len(titanic_submission[\"Survived\"]) == len(one_hot_encoded_X_test))\nprint(len(titanic_submission) == len(test))","59e138ce":"titanic_submission.to_csv('..\/working\/titanic_submission.csv', index=False)","909d3ffb":"check = pd.read_csv(\"..\/working\/titanic_submission.csv\")\ncheck.head()","d1ab6647":"Now we only have missing values in Age (177) and Embarked (2)","316cdfff":"Almost same distribution for the first three columns (0,1,2) with just different count for column 1 and 2 for each graph.","30e53ab7":"# Name Feature","eba654dd":"# Importing datasets","9c954fd2":"# Age Feature","3baa0d53":"# Cabin Feature","f519a68c":"More than 50% of those who embarked from Cherbourg survived.","49ffea5d":"Since i cannot see any pattern in the ticket names i will categorize them for whether they have a letter or not. ( 0 = no letter, \n                                                                                                                   1 = with letter)","f3017a49":"# Ticket Feature","47b0471d":"# Parch Feature\n\nDesc : Parents\/Children","596fb92b":"# Sex Feature","d6ca4df7":"From the graph above we see that people that paid ~30-20$ or more have a better chance of surviving.","679e8bed":"# Labeling and Encoding","5960bcc2":"# CatBoost Model","86c10025":"# Pclass Feature","2a72f6ac":"# Embarked Feature","fb5de9ca":"Let's see our dataframes","21225bc6":"# SibSp Feature\n\nDesc : Siblings\/Spouses","c9e2cf6c":"# Survived Target","491f8992":"Won't explore further...","2e7290ce":"# Taking care of missing values","12244a24":"# Fare Feature","21fc8382":"# Importing Libraries","3b396f91":"No point in exploring, too many missing vals. Dropping Feature."}}