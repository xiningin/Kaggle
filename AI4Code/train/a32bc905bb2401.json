{"cell_type":{"c2c9b4e2":"code","fd2bca12":"code","db1ae5f0":"code","5ff7718e":"code","24d7a41b":"code","d17a9ef3":"code","73fe86bf":"code","15196701":"code","4c497d24":"code","fbe4b56c":"code","8f958aae":"code","e011b372":"code","53a0bd01":"code","49687957":"code","1962196b":"code","3a698e39":"code","aa17f968":"code","d33c8626":"code","38d514f1":"code","bc2f3db6":"code","57f83e1e":"code","e4b3b41e":"code","2811d271":"code","43a2c147":"code","10c3c9e6":"code","c98cd89e":"code","c6d59aae":"code","1db24381":"code","f5ad5f87":"code","3cb866e2":"code","7ed0ba34":"code","83c194fb":"code","e7450233":"code","9a2c10fa":"code","b6a02871":"code","701e00bc":"code","c24061fc":"code","7fe3999f":"code","e016ceba":"code","6ed51b46":"code","fcb51122":"code","f89f4dfa":"code","a280334f":"code","1076a512":"code","d4ece31e":"code","867eef87":"code","5f3c1d6e":"code","f7bf7cc9":"code","66c7689d":"code","aa9ca87a":"code","0f7b9b5e":"code","49d8e8f2":"code","87a29527":"code","5d7ac014":"code","ddd75f7b":"code","bccd6a5b":"code","1dccf463":"code","69efcf6c":"code","ae61c715":"code","62808148":"code","baadb819":"code","f6a4e9e2":"code","dd5481c7":"code","9345d318":"code","0f22ad89":"code","eba99b67":"code","9df7185e":"code","3a42a69f":"code","5e403c7e":"code","39c6a7ee":"code","f3e217f8":"code","31d3ad2f":"code","16e1db72":"code","94d78dff":"code","6730e602":"code","af770abb":"code","c86a959a":"markdown","dd69a29a":"markdown","ff6d0ae8":"markdown","12f93455":"markdown","b63f52e2":"markdown","7a38c7b8":"markdown","ffaee485":"markdown","1b14b175":"markdown","c997f472":"markdown","adbf0f0e":"markdown","8251c03e":"markdown","1e2137e1":"markdown","2d4b476f":"markdown","13536a66":"markdown","4ab05a10":"markdown","18a3b674":"markdown","2026a9d6":"markdown","a33d0226":"markdown","bd44405f":"markdown","06c23a84":"markdown","396fcf6a":"markdown","ad72600c":"markdown","3ad3e0b7":"markdown","14ec14c0":"markdown","dd4338e7":"markdown","2e68b9fc":"markdown","380d78bb":"markdown","02b9a86c":"markdown","63d2b8f8":"markdown","092da420":"markdown","dd6c9ffb":"markdown","b8881cbc":"markdown","f6080a6b":"markdown","b40801b4":"markdown","5f071771":"markdown"},"source":{"c2c9b4e2":"import os\nimport warnings\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom scipy import stats\nfrom sklearn.ensemble import AdaBoostRegressor, BaggingRegressor, ExtraTreesRegressor, GradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.gaussian_process import GaussianProcessRegressor\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso, LassoCV, LassoLars, LassoLarsCV, ElasticNet, ElasticNetCV, BayesianRidge, ARDRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR, LinearSVR, NuSVR\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split, KFold, GridSearchCV, cross_validate, cross_val_score\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import PolynomialFeatures, RobustScaler\nfrom xgboost import XGBRegressor\n\n%matplotlib inline\nsns.set()\nwarnings.filterwarnings('ignore')\npd.set_option('display.max_columns', 300)","fd2bca12":"base_path = os.path.join('..\/input\/train.csv')\nbase_path","db1ae5f0":"df = pd.read_csv(base_path)","5ff7718e":"df.head()","24d7a41b":"for col in df.columns:\n    diff = df[col].isnull().sum()\n    if diff != 0:\n        print('missing values for {}: {}'.format(col, diff))","d17a9ef3":"def fill_missings(df):\n    df['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].median())\n    df['Alley'] = df['Alley'].fillna('Unknown')\n    df['MasVnrType'] = df['MasVnrType'].fillna('None')\n    df['MasVnrArea'] = df['MasVnrArea'].fillna(df['MasVnrArea'].median())\n    df['BsmtQual'] = df['BsmtQual'].fillna(df['BsmtQual'].mode()[0])\n    df['BsmtCond'] = df['BsmtCond'].fillna(df['BsmtCond'].mode()[0])\n    df['BsmtExposure'] = df['BsmtExposure'].fillna(df['BsmtExposure'].mode()[0])\n    df['BsmtFinType1'] = df['BsmtFinType1'].fillna('Unknown')\n    df['BsmtFinType2'] = df['BsmtFinType2'].fillna(df['BsmtFinType2'].mode()[0])\n    df['Electrical'] = df['Electrical'].fillna(df['Electrical'].mode()[0])\n    df['FireplaceQu'] = df['FireplaceQu'].fillna('Unknown')\n    df['GarageType'] = df['GarageType'].fillna('Unknown')\n    df['GarageYrBlt'] = df['GarageYrBlt'].fillna(df['GarageYrBlt'].median())\n    df['GarageFinish'] = df['GarageFinish'].fillna('Unknown')\n    df['GarageQual'] = df['GarageQual'].fillna(df['GarageQual'].mode()[0])\n    df['GarageCond'] = df['GarageCond'].fillna(df['GarageCond'].mode()[0])\n    df['PoolQC'] = df['PoolQC'].fillna('Unknown')\n    df['Fence'] = df['Fence'].fillna('Unknown')\n    df['MiscFeature'] = df['MiscFeature'].fillna('Unknown')\n    return df","73fe86bf":"df = fill_missings(df)\ndf.head()","15196701":"df.info()","4c497d24":"df.describe()","fbe4b56c":"df.shape","8f958aae":"df.set_index('Id', inplace=True)","e011b372":"df['TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']","53a0bd01":"df['TotalPorch'] = df['OpenPorchSF'] + df['EnclosedPorch'] + df['3SsnPorch'] + df['ScreenPorch']","49687957":"sns.scatterplot(x=df['TotalSF'], y=df['SalePrice']);","1962196b":"df['TotalSF'].loc[df['TotalSF'] > 6000].loc[df['SalePrice'] < 300000]","3a698e39":"Id_to_drop = [524, 1299]","aa17f968":"df.drop(Id_to_drop, inplace=True)","d33c8626":"df.reset_index(drop=True, inplace=True)","38d514f1":"df.shape","bc2f3db6":"df['SalePrice_log_transform'] = np.log(df['SalePrice'])","57f83e1e":"df.head()","e4b3b41e":"df_chi2_cols = ['Column', 'p_value']\n\nchi2_comparison = pd.DataFrame(columns=df_chi2_cols)","2811d271":"row = 0\n\nfor col in df.columns:\n    if col != 'SalePrice_log_transform':\n        chi2_comparison.loc[row, 'Column'] = col\n        df[[col, 'SalePrice_log_transform']].groupby(col, as_index=False).mean()\n        cross_table = pd.crosstab(df['SalePrice_log_transform'], df[col])\n        _, p_val, _, _ = stats.chi2_contingency(cross_table)\n        chi2_comparison.loc[row, 'p_value'] = p_val\n        row += 1\n\nchi2_comparison.sort_values(by=['p_value'], inplace=True)\nchi2_comparison.loc[chi2_comparison['p_value'] < 1e-50]","43a2c147":"df_pf = chi2_comparison['Column'].loc[chi2_comparison['p_value'] < 1e-50]\ndf_pf_list = df_pf.tolist()\ndf_pf_list.remove('SalePrice')\ndf_pf_list","10c3c9e6":"pf = PolynomialFeatures()","c98cd89e":"for col in df_pf_list:\n    array = pf.fit_transform(df[col].values.reshape(-1, 1))\n    df[col+'_poly1'] = array[:, 1]\n    df[col+'_poly2'] = array[:, 2]","c6d59aae":"df.head()","1db24381":"dum_lst = ['MSSubClass', 'MSZoning', 'Alley', 'LotConfig', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n           'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation',\n           'Heating', 'CentralAir', 'GarageType', 'MiscFeature', 'SaleType', 'SaleCondition']\n\nfor dum in dum_lst:\n    df = pd.concat([df, pd.get_dummies(df[dum], prefix=dum)], axis=1)","f5ad5f87":"df.drop(labels=dum_lst, axis=1, inplace=True)","3cb866e2":"df.head()","7ed0ba34":"df_q = df[['MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', '2ndFlrSF', 'LowQualFinSF', 'WoodDeckSF', 'OpenPorchSF',\n           'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'MiscVal', 'LotFrontage', 'LotArea', 'YearBuilt',\n           'YearRemodAdd', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', 'GrLivArea', 'TotRmsAbvGrd', 'GarageYrBlt',\n           'GarageArea', 'MoSold', 'YrSold', 'TotalSF', 'TotalPorch']]","83c194fb":"for col in df_q.columns:\n    df_q[col].replace(to_replace=0, value=None, inplace=True)","e7450233":"for col in df_q.columns:\n    quartiles_labels = ['0-25Q', '25-50Q', '50-75Q', '75-100Q']\n    df_q[col+'_quartiles_range'] = pd.qcut(df_q[col], q=4, duplicates='drop')\n    df_q[col+'_quartiles_label'] = pd.qcut(df_q[col], q=4, labels=quartiles_labels, duplicates='drop')\n    df_q[col+'_quartiles'] = df_q[col+'_quartiles_label'].astype('category', ordered=True,\n                                                                 categories=quartiles_labels).cat.codes\n    df_q.drop(labels=col+'_quartiles_range', axis=1, inplace=True)\n    df_q.drop(labels=col+'_quartiles_label', axis=1, inplace=True)\n    df_q.drop(labels=col, axis=1, inplace=True)","9a2c10fa":"df = pd.concat([df, df_q], axis=1)\ndf.head()","b6a02871":"df_num = df[['LotFrontage', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n             '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n             'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea',\n             'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n             'YearRemodAdd', 'TotalSF']]","701e00bc":"for col in df_num.columns:\n    df_num[col+'_log'] = np.log(1.01 + df_num[col])\n    df_num.drop(labels=col, axis=1, inplace=True)","c24061fc":"df = pd.concat([df, df_num], axis=1)","7fe3999f":"cols_to_drop = ['LotFrontage', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n             '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n             'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea',\n             'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n             'YearRemodAdd', 'TotalSF']\n\ndf.drop(cols_to_drop, axis=1, inplace=True)","e016ceba":"df.head()","6ed51b46":"df['MSSubClass_150'] = 0","fcb51122":"df.head()","f89f4dfa":"object_cols = df.select_dtypes(include='object')\n\ndf.drop(labels=object_cols, axis=1, inplace=True)","a280334f":"df.drop(labels='SalePrice', axis=1, inplace=True)","1076a512":"df.head()","d4ece31e":"df.describe()","867eef87":"X = df.loc[:, df.columns != 'SalePrice_log_transform']\ny = df['SalePrice_log_transform']","5f3c1d6e":"X.shape, y.shape","f7bf7cc9":"X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.3)","66c7689d":"X_train.shape, y_train.shape, X_test.shape, y_test.shape","aa9ca87a":"pipelines = [\n('AdaBoostRegressor', Pipeline([('RS', RobustScaler()), ('ABR', AdaBoostRegressor(random_state=42))])),\n('BaggingRegressor', Pipeline([('RS', RobustScaler()), ('BR', BaggingRegressor(random_state=42))])),\n('ExtraTreesRegressor', Pipeline([('RS', RobustScaler()), ('ETR', ExtraTreesRegressor(random_state=42))])),\n('GradientBoostingRegressor', Pipeline([('RS', RobustScaler()), ('GBR', GradientBoostingRegressor(random_state=42))])),\n('RandomForestRegressor', Pipeline([('RS', RobustScaler()), ('RFR', RandomForestRegressor(random_state=42))])),\n('GaussianProcessRegressor', Pipeline([('RS', RobustScaler()), ('GPR', GaussianProcessRegressor(random_state=42))])),\n('Ridge', Pipeline([('RS', RobustScaler()), ('R', Ridge(random_state=42))])),\n('Lasso', Pipeline([('RS', RobustScaler()), ('L', Lasso(random_state=42))])),\n('LassoCV', Pipeline([('RS', RobustScaler()), ('LCV', LassoCV(random_state=42))])),\n('LassoLars', Pipeline([('RS', RobustScaler()), ('LL', LassoLars())])),\n('LassoLarsCV', Pipeline([('RS', RobustScaler()), ('LLCV', LassoLarsCV())])),\n('ElasticNet', Pipeline([('RS', RobustScaler()), ('EN', ElasticNet(random_state=42))])),\n('ElasticNetCV', Pipeline([('RS', RobustScaler()), ('ECV', ElasticNetCV(random_state=42))])),\n('BayesianRidge', Pipeline([('RS', RobustScaler()), ('BR', BayesianRidge())])),\n('ARDRegression', Pipeline([('RS', RobustScaler()), ('ARDR', ARDRegression())])),\n('KNeighborsRegressor', Pipeline([('RS', RobustScaler()), ('KNR', KNeighborsRegressor())])),\n('SVR', Pipeline([('RS', RobustScaler()), ('SVR', SVR())])),\n('LinearSVR', Pipeline([('RS', RobustScaler()), ('LSVR', LinearSVR(random_state=42))])),\n('NuSVR', Pipeline([('RS', RobustScaler()), ('NuSVR', NuSVR())])),\n('DecisionTreeRegressor', Pipeline([('RS', RobustScaler()), ('DTR', DecisionTreeRegressor(random_state=42))])),\n('XGBRegressor', Pipeline([('RS', RobustScaler()), ('XGBR', XGBRegressor(random_state=42))])),\n('LinearRegression', Pipeline([('RS', RobustScaler()), ('LR', LinearRegression())]))\n]\n\ndf_models_cols = ['Name', 'Train_Acc_Mean', 'Test_Acc_Mean', 'Test_Acc_3*STD']\n\nmodels_comparison = pd.DataFrame(columns=df_models_cols)","0f7b9b5e":"kf = KFold(n_splits=5, random_state=42, shuffle=True)\n\nrow = 0\n\nfor name, model in pipelines:\n    models_comparison.loc[row, 'Name'] = name\n    cv_results = cross_validate(model, X_train, y_train, cv=kf, scoring='neg_mean_squared_log_error')\n    models_comparison.loc[row, 'Train_Acc_Mean'] = np.sqrt(-cv_results['train_score'].mean())\n    models_comparison.loc[row, 'Test_Acc_Mean'] = np.sqrt(-cv_results['test_score'].mean())\n    models_comparison.loc[row, 'Test_Acc_3*STD'] = np.sqrt(cv_results['test_score'].std() * 3)\n    model.fit(X_train, y_train)\n    row += 1\n\nmodels_comparison.sort_values(by=['Test_Acc_Mean'], inplace=True)\nmodels_comparison","49d8e8f2":"best_model_name = models_comparison.iloc[0, 0]\nTest_Acc_Mean = models_comparison.iloc[0, 2]\nprint('Best model: {} \\nTest_Acc_Mean: {}'.format(best_model_name, Test_Acc_Mean))","87a29527":"param_grid = {\n    'ENCV__l1_ratio': np.linspace(0.1, 1, 10), #0.5\n    'ENCV__n_alphas': [10], #100\n    'ENCV__max_iter': [200] #1000\n}\n    \npipe = Pipeline([('RS', RobustScaler()), ('ENCV', ElasticNetCV(random_state=42))])\n\ngs = GridSearchCV(pipe, param_grid, cv=kf)\n\ngs.fit(X_train, y_train)","5d7ac014":"print(\"best score: {}\".format(gs.best_score_))\nprint(\"best params: {}\".format(gs.best_params_))","ddd75f7b":"best_model = gs.best_estimator_\nbest_model","bccd6a5b":"best_model.fit(X_train, y_train)","1dccf463":"R2_train = best_model.score(X_train, y_train)\nR2_train","69efcf6c":"R2_test = best_model.score(X_test, y_test)\nR2_test","ae61c715":"base_path = os.path.join('..\/input\/test.csv')\nbase_path","62808148":"df_test = pd.read_csv(os.path.join(base_path))\ndf_test.head()","baadb819":"for col in df_test.columns:\n    diff = df_test[col].isnull().sum()\n    if diff != 0:\n        print('missing values for {}: {}'.format(col, diff))","f6a4e9e2":"def fill_missings_test(df):\n    df['MSZoning'] = df['MSZoning'].fillna(df['MSZoning'].mode()[0])\n    df['LotFrontage'] = df['LotFrontage'].fillna(df['LotFrontage'].median())\n    df['Alley'] = df['Alley'].fillna('Unknown')\n    df['Utilities'] = df['Utilities'].fillna('Unknown')\n    df['Exterior1st'] = df['Exterior1st'].fillna(df['Exterior1st'].mode()[0])\n    df['Exterior2nd'] = df['Exterior2nd'].fillna(df['Exterior2nd'].mode()[0])\n    df['MasVnrType'] = df['MasVnrType'].fillna('None')\n    df['MasVnrArea'] = df['MasVnrArea'].fillna(df['MasVnrArea'].median())\n    df['BsmtQual'] = df['BsmtQual'].fillna(df['BsmtQual'].mode()[0])\n    df['BsmtCond'] = df['BsmtCond'].fillna(df['BsmtCond'].mode()[0])\n    df['BsmtExposure'] = df['BsmtExposure'].fillna(df['BsmtExposure'].mode()[0])\n    df['BsmtFinType1'] = df['BsmtFinType1'].fillna('Unknown')\n    df['BsmtFinSF1'] = df['BsmtFinSF1'].fillna(0)\n    df['BsmtFinType2'] = df['BsmtFinType2'].fillna('Unknown')\n    df['BsmtFinSF2'] = df['BsmtFinSF2'].fillna(0)\n    df['BsmtUnfSF'] = df['BsmtUnfSF'].fillna(0)\n    df['TotalBsmtSF'] = df['TotalBsmtSF'].fillna(df['TotalBsmtSF'].median())\n    df['BsmtFullBath'] = df['BsmtFullBath'].fillna(0)\n    df['BsmtHalfBath'] = df['BsmtHalfBath'].fillna(0) \n    df['KitchenQual'] = df['KitchenQual'].fillna(df['KitchenQual'].mode()[0])\n    df['Functional'] = df['Functional'].fillna(df['Functional'].mode()[0])\n    df['FireplaceQu'] = df['FireplaceQu'].fillna(df['FireplaceQu'].mode()[0])\n    df['GarageType'] = df['GarageType'].fillna('Unknown')\n    df['GarageYrBlt'] = df['GarageYrBlt'].fillna(df['GarageYrBlt'].median())\n    df['GarageFinish'] = df['GarageFinish'].fillna(df['GarageFinish'].mode()[0])\n    df['GarageCars'] = df['GarageCars'].fillna(df['GarageCars'].median())\n    df['GarageArea'] = df['GarageArea'].fillna(df['GarageArea'].median())\n    df['GarageQual'] = df['GarageQual'].fillna(df['GarageQual'].mode()[0])\n    df['GarageCond'] = df['GarageCond'].fillna('Unknown')\n    df['PoolQC'] = df['PoolQC'].fillna(df['PoolQC'].mode()[0])\n    df['Fence'] = df['Fence'].fillna('Unknown')\n    df['MiscFeature'] = df['MiscFeature'].fillna('Unknown')\n    df['SaleType'] = df['SaleType'].fillna(df['SaleType'].mode()[0])\n    return df","dd5481c7":"df_test_clean = fill_missings_test(df_test)\ndf_test_clean.head()","9345d318":"def transform_df(df):\n    \n    df.set_index('Id', inplace=True)\n    \n    df['TotalSF'] = df['TotalBsmtSF'] + df['1stFlrSF'] + df['2ndFlrSF']\n    \n    df['TotalPorch'] = df['OpenPorchSF'] + df['EnclosedPorch'] + df['3SsnPorch'] + df['ScreenPorch']\n    \n    df_pf = ['GarageArea', 'TotalBsmtSF', 'MasVnrArea', 'OverallQual', 'TotalSF', '1stFlrSF', 'LotFrontage',\n             'LotArea', 'OpenPorchSF', 'GrLivArea', 'BsmtUnfSF']\n    pf = PolynomialFeatures()\n    for col in df_pf:\n        array = pf.fit_transform(df[col].values.reshape(-1, 1))\n        df[col+'_poly1'] = array[:, 1]\n        df[col+'_poly2'] = array[:, 2]\n            \n    dum_lst = ['MSSubClass', 'MSZoning', 'Alley', 'LotConfig', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n               'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation',\n               'Heating', 'CentralAir', 'GarageType', 'MiscFeature', 'SaleType', 'SaleCondition']\n    for dum in dum_lst:\n        df = pd.concat([df, pd.get_dummies(df[dum], prefix=dum)], axis=1)\n    df.drop(labels=dum_lst, axis=1, inplace=True)\n    \n    df_q = df[['MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', '2ndFlrSF', 'LowQualFinSF', 'WoodDeckSF', 'OpenPorchSF',\n           'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'MiscVal', 'LotFrontage', 'LotArea', 'YearBuilt',\n           'YearRemodAdd', 'BsmtUnfSF', 'TotalBsmtSF', '1stFlrSF', 'GrLivArea', 'TotRmsAbvGrd', 'GarageYrBlt',\n           'GarageArea', 'MoSold', 'YrSold', 'TotalSF', 'TotalPorch']]\n    for col in df_q.columns:\n        df_q[col].replace(to_replace=0, value=None, inplace=True)\n    for col in df_q.columns:\n        quartiles_labels = ['0-25Q', '25-50Q', '50-75Q', '75-100Q']\n        df_q[col+'_quartiles_range'] = pd.qcut(df_q[col], q=4, duplicates='drop')\n        df_q[col+'_quartiles_label'] = pd.qcut(df_q[col], q=4, labels=quartiles_labels, duplicates='drop')\n        df_q[col+'_quartiles'] = df_q[col+'_quartiles_label'].astype('category', ordered=True,\n                                                                     categories=quartiles_labels).cat.codes\n        df_q.drop(labels=col+'_quartiles_range', axis=1, inplace=True)\n        df_q.drop(labels=col+'_quartiles_label', axis=1, inplace=True)\n        df_q.drop(labels=col, axis=1, inplace=True)\n    df = pd.concat([df, df_q], axis=1)\n    \n    df_num = df[['LotFrontage', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n             '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n             'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea',\n             'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n             'YearRemodAdd', 'TotalSF']]\n    for col in df_num.columns:\n        df_num[col+'_log'] = np.log(1.01 + df_num[col])\n        df_num.drop(labels=col, axis=1, inplace=True)\n    df = pd.concat([df, df_num], axis=1)\n    \n    cols_to_drop = ['LotFrontage', 'LotArea', 'MasVnrArea', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF',\n             '1stFlrSF', '2ndFlrSF', 'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n             'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'TotRmsAbvGrd', 'Fireplaces', 'GarageCars', 'GarageArea',\n             'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'MiscVal',\n             'YearRemodAdd', 'TotalSF']\n    df.drop(cols_to_drop, axis=1, inplace=True)\n    \n    object_cols = df.select_dtypes(include='object')\n    df.drop(labels=object_cols, axis=1, inplace=True)\n    \n    return df","0f22ad89":"df_test_clean = transform_df(df_test_clean)","eba99b67":"df_test_clean.shape","9df7185e":"set(df_test_clean).difference(X_train)","3a42a69f":"set(X_train).difference(df_test_clean)","5e403c7e":"for col in set(X_train).difference(df_test_clean):\n    df_test_clean[col] = 0","39c6a7ee":"df_test_clean.head()","f3e217f8":"df_test_clean.shape","31d3ad2f":"df_test_clean = df_test_clean[X_train.columns]","16e1db72":"best_model.fit(X_train, y_train)","94d78dff":"y_pred = np.exp(best_model.predict(df_test_clean))\ny_pred","6730e602":"df_sample_submission = pd.DataFrame({'Id': df_test_clean.index, 'SalePrice': y_pred})","af770abb":"sample_submission = pd.DataFrame.to_csv(df_sample_submission, index=False)\nwith open ('..\/submissions\/sample_submission.csv', 'w') as f:\n    f.write(sample_submission)","c86a959a":"# -----------------------------------------------------------------------------------------------------","dd69a29a":"# -----------------------------------------------------------------------------------------------------","ff6d0ae8":"# Features Engineering - Dummies","12f93455":"# -----------------------------------------------------------------------------------------------------","b63f52e2":"# -----------------------------------------------------------------------------------------------------","7a38c7b8":"# -----------------------------------------------------------------------------------------------------","ffaee485":"# -----------------------------------------------------------------------------------------------------","1b14b175":"# -----------------------------------------------------------------------------------------------------","c997f472":"# Features Engineering - Quartiles","adbf0f0e":"# Feature Engineering - Polyfeatures","8251c03e":"# -----------------------------------------------------------------------------------------------------","1e2137e1":"# Machine Learning","2d4b476f":"# -----------------------------------------------------------------------------------------------------","13536a66":"# -----------------------------------------------------------------------------------------------------","4ab05a10":"# -----------------------------------------------------------------------------------------------------","18a3b674":"# -----------------------------------------------------------------------------------------------------","2026a9d6":"# Feature Engineering - Log features","a33d0226":"# Missing values","bd44405f":"# Feature Engineering - New features","06c23a84":"# -----------------------------------------------------------------------------------------------------","396fcf6a":"# Submission","ad72600c":"# Remove outliers","3ad3e0b7":"# -----------------------------------------------------------------------------------------------------","14ec14c0":"# -----------------------------------------------------------------------------------------------------","dd4338e7":"# -----------------------------------------------------------------------------------------------------","2e68b9fc":"# -----------------------------------------------------------------------------------------------------","380d78bb":"# -----------------------------------------------------------------------------------------------------","02b9a86c":"# Check NaN:","63d2b8f8":"# -----------------------------------------------------------------------------------------------------","092da420":"# -----------------------------------------------------------------------------------------------------","dd6c9ffb":"# -----------------------------------------------------------------------------------------------------","b8881cbc":"# Feature Engineering - Log transform on SalePrice feature","f6080a6b":"# -----------------------------------------------------------------------------------------------------","b40801b4":"# IMPORTATION & CLEANING DATATEST","5f071771":"# Importation dataset"}}