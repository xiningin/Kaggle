{"cell_type":{"e31cf939":"code","198adbb6":"code","68198939":"code","e1ad0be3":"code","5cd83ffd":"code","c383764f":"code","1016d02c":"code","5cf2fd4f":"code","63932b47":"code","b196501b":"code","97033ee5":"code","3d6e72c9":"code","8b4b233b":"code","1fd20da3":"code","6fd40138":"code","e2c50896":"code","c957f9eb":"code","086536e2":"code","536200a2":"code","6d6deb77":"code","d08a0c0d":"code","15282cdb":"code","cf965b30":"code","30632b1d":"code","c456606f":"code","76f2b5fa":"code","9ff5b39b":"code","a5c3d74e":"code","7b5ca6a8":"code","56256eb6":"code","4efb4453":"code","06e2e052":"code","3ca456f0":"code","615ca10b":"code","fc35e164":"markdown","56396fe2":"markdown","aff6b837":"markdown","dcfd3546":"markdown","ca4806ee":"markdown","ef7c7ff2":"markdown","eb4835b1":"markdown","c740f87e":"markdown","bc4ea968":"markdown","963530fd":"markdown","f47b35aa":"markdown","66da8847":"markdown","ad71956e":"markdown","02218505":"markdown","4895dfa9":"markdown","35d5a024":"markdown","06d36261":"markdown","ff4a3500":"markdown","879099cb":"markdown","7beeb52b":"markdown","69c3f50b":"markdown","f5b574b5":"markdown","34e6a6ad":"markdown"},"source":{"e31cf939":"import pandas as pd \nimport numpy as np \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set()\n\nfrom datetime import datetime\nfrom sklearn.preprocessing import LabelEncoder\nfrom xgboost.sklearn import XGBClassifier\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n#add colores for plot bars\ncolors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd',\n          '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']        ","198adbb6":"# convert date columns into datetime format while loading\ntrain_df = pd.read_csv('..\/input\/airbnb-recruiting-new-user-bookings\/train_users_2.csv.zip', parse_dates=['timestamp_first_active','date_account_created','date_first_booking'])\n\ntest_df= pd.read_csv('..\/input\/airbnb-recruiting-new-user-bookings\/test_users.csv.zip',parse_dates=['timestamp_first_active','date_account_created','date_first_booking'])\n\nbookings_data  = pd.read_csv(\"\/kaggle\/input\/airbnb-recruiting-new-user-bookings\/train_users_2.csv.zip\")","68198939":"train_test_combin = pd.concat((train_df, test_df), axis = 0, ignore_index = True)","e1ad0be3":"train_test_combin.head()","5cd83ffd":"train_test_combin.shape","c383764f":"train_df.head()","1016d02c":"train_df.shape","5cf2fd4f":"test_df.head()","63932b47":"test_df.shape","b196501b":"train_test_combin.isnull().sum()","97033ee5":"print(train_test_combin.date_account_created.min())\nprint(train_test_combin.date_account_created.max())","3d6e72c9":"train_test_combin['signup_method'].value_counts()","8b4b233b":"train_test_combin.signup_method.value_counts(dropna=False).plot(kind='bar', color=colors)","1fd20da3":"train_test_combin['first_device_type'].value_counts()","6fd40138":"train_test_combin.first_device_type.value_counts(dropna=False).plot(kind='bar', color=colors)\n","e2c50896":"plt.figure(figsize=(10,6))\ncd_count_idx = bookings_data['first_device_type'].value_counts().index\nsns.countplot(data = bookings_data, x = 'first_device_type', order = cd_count_idx, color = sns.color_palette()[0])\nplt.xlabel('Devices Type')\nplt.ylabel('Count')\nplt.title('Users Devices')\nplt.xticks(rotation=90)\ncd_count_val = bookings_data['first_device_type'].value_counts()\n\nfor i in range(cd_count_val.shape[0]):\n    count = cd_count_val[i]\n    percentage ='{:0.1f}%'.format(100 * count \/ len(bookings_data))\n    plt.text(i, count+1000, percentage, ha='center')","c957f9eb":"train_test_combin['first_browser'].value_counts()","086536e2":"train_test_combin['first_browser'].value_counts().head(10).plot(kind='bar', color=colors)","536200a2":"train_test_combin['gender'].value_counts()","6d6deb77":"train_test_combin.groupby('gender').age.agg(['min','max','mean','count'])","d08a0c0d":"train_test_combin.loc[train_test_combin.age > 100, 'age'] = np.nan","15282cdb":"train_test_combin.groupby('gender').age.agg(['min','max','mean','count'])","cf965b30":"train_test_combin['gender'].value_counts().plot(kind='bar', color=colors)","30632b1d":"plt.figure(figsize=(10,6))\ncd_count_idx = train_test_combin['gender'].value_counts().index\nsns.countplot(data = train_test_combin, x = 'gender', order = cd_count_idx, color = sns.color_palette()[0])\nplt.xlabel('gender')\nplt.ylabel('Count')\nplt.title('gender')\nplt.xticks(rotation=90)\n\ncd_count_val = train_test_combin['gender'].value_counts()\n\nfor i in range(cd_count_val.shape[0]):\n    count = cd_count_val[i]\n    percentage ='{:0.1f}%'.format(100 * count \/ len(train_test_combin))\n    plt.text(i, count+1000, percentage, ha='center')","c456606f":"# Splitting date into Day-Month-Year\n# account created\ntrain_test_combin['dac_year'] = train_test_combin.date_account_created.dt.year\ntrain_test_combin['dac_month'] = train_test_combin.date_account_created.dt.month\ntrain_test_combin['dac_day'] = train_test_combin.date_account_created.dt.day\n\n# Splitting date into Day-Month-Year\n# time first active\ntrain_test_combin['tfa_year'] = train_test_combin.timestamp_first_active.dt.year\ntrain_test_combin['tfa_month'] = train_test_combin.timestamp_first_active.dt.month\ntrain_test_combin['tfa_day'] = train_test_combin.timestamp_first_active.dt.day","76f2b5fa":"train_test_combin.dac_year.value_counts(sort=False).plot(kind='bar', title='User Accounts Created Per Year')","9ff5b39b":"train_test_combin.country_destination.value_counts(normalize=True).plot(kind='bar',title='Countries Visited by Users')","a5c3d74e":"X_train_data = train_df.drop(['id','date_account_created','date_first_booking','timestamp_first_active', 'country_destination'], axis=1)\nX_test_data = test_df.drop(['id','date_account_created','date_first_booking','timestamp_first_active'], axis=1)\ntrain_test_combin = train_test_combin.drop(['id', 'date_account_created','date_first_booking','timestamp_first_active','country_destination'], axis=1)\n","7b5ca6a8":"# Replace unknown with NAN to avoid error \ntrain_test_combin.gender.replace('-unknown-', np.nan, inplace=True)\ntrain_test_combin.first_browser.replace('-unknown-', np.nan, inplace=True)","56256eb6":"# Create Fetures categorical columns \n\nfeatures = ['gender', 'signup_method', 'signup_flow', 'language',\n                'affiliate_channel', 'affiliate_provider',\n                'first_affiliate_tracked', 'signup_app',\n                'first_device_type', 'first_browser']\n\n# Get Dummies Convert categorical variable into dummy\/indicator variables.\n\ntrain_test_combin = pd.get_dummies(train_test_combin,columns=features)","4efb4453":"train_test_combin.head()","06e2e052":"from xgboost.sklearn import XGBClassifier\nfrom sklearn.preprocessing import LabelEncoder","3ca456f0":"train_df_rows_no = train_df.shape[0]  \n\n# Splitting the data into train and test again for the classifier\n# rows number of train data will be used for splitting\n\n# convert train_test_combin dataset into list\nall_data_list = train_test_combin.values\nX_train = all_data_list[:train_df_rows_no] #213451\nX_test = all_data_list[train_df_rows_no:] # 213451\n\n#Create labels\n#labels = train_df['country_destination'].values\nlabler = LabelEncoder()\ny = labler.fit_transform(train_df['country_destination'].values)\n\n# Implementation of the classifier (decision tree)\nxgb = XGBClassifier(max_depth=6, learning_rate=0.3, n_estimators=22,\n                    objective='multi:softprob', subsample=0.6, colsample_bytree=0.6, seed=0)               \nxgb.fit(X_train, y)\ny_pred = xgb.predict_proba(X_test) \n","615ca10b":"#Taking the 5 classes with highest probabilities\n# the requirements is to predict 5 predicts for each ID (user)\n# so we will predict 5 times and save the result for each user \n\ntest_ids = test_df['id']\nids = []  #list of ids\ncts = []  #list of countries\nfor i in range(len(test_ids)):\n    idx = test_ids[i]\n    ids += [idx] * 5\n    #save 5 results for each user \n    cts += labler.inverse_transform(np.argsort(y_pred[i])[::-1])[:5].tolist()\n\n#Generate submission\nsub = pd.DataFrame(np.column_stack((ids, cts)), columns=['id', 'country'])\nsub.to_csv('submission.csv',index=False)","fc35e164":"**Min \/ Max Date in our data**\n\nThe data is 5 years data starting from 2010 up to 2014","56396fe2":"> Google Chrome is the most poular Internet exolorer ","aff6b837":"# Exploratory Data Analysis (EDA)","dcfd3546":"**Filter age between 1-100 and set others to NAN**\n\n>  some of the age valus are not logical like(2014, 188...etc.)","ca4806ee":"# Load data","ef7c7ff2":"\n# Air Bnb New User Bookings \n**Predict user country destination**\n\nNew users on Airbnb can book a place to stay in 34,000+ cities across 190+ countries. By accurately predicting where a new user will book their first travel experience, Airbnb can share more personalized content with their community, decrease the average time to first booking, and better forecast demand.\n\nIn this recruiting competition, Airbnb challenges you to predict in which country a new user will make his or her first booking. Kagglers who impress with their answer (and an explanation of how they got there) will be considered for an interview for the opportunity to join Airbnb's.\n\n# Important Notes\n* countries.csv: summary statistics of destination countries in this dataset and their locations\n* age_gender_bkts.csv: summary statistics of users' age group, gender, country of destination\n* **'NDF'** --> no booking\n* **country_destination** is our predection target it is not avalible at test dataset.\n\n**Submission File:**\nFor every user in the dataset, submission files should contain two columns: id and country. The destination country predictions must be ordered such that the most probable destination country goes first.\n\n**Evaluation:**\nFor each new user, you are to make a maximum of 5 predictions on the country of the first booking. The ground truth country is marked with relevance = 1, while the rest have relevance = 0.\n\nFor example, if for a particular user the destination is FR, then the predictions become\n\n","eb4835b1":"**Signup method used by users**","c740f87e":"> NDF: No data\n\n> US is the main visisted country ","bc4ea968":"# Data Visulization","963530fd":"**Internet browsers used**","f47b35aa":"# xgboost","66da8847":"**detailed view with % percent**","ad71956e":"**Data Cleansing & Preparation Summery**\n\n* Gender: convert all \"unknown\" values into nan \n* Filter age between 1-100 and set to others to NAN**\n* First_browser: convert all \"unknown\" values into nan\n* date_account_created: convert to datetime format\n* timestamp_first_active: convert to datetime format","02218505":"**Top 10 browsers**","4895dfa9":"**Gender % percent**","35d5a024":"**check for Null values**","06d36261":"**Dropping uneanted columns**\n\n* id: drop\n* date_first_booking: drop\n* date_account_created: drop\n* timestamp_first_active: drop\n* missing value: fill with 0\n* gender replace -unknown- with NA\n\nThere is no impact on dropping all date columns since it is not used for the predetion ","ff4a3500":"# Combining test and train datasets\n\nfor this compitition If this is not done, the number of dummy variable columns do not match in test and train data. Some items present in train data and are not present in test data like browser type. \n\ni got many errors like: **ValueError: X has 122 features per sample; expecting 155**","879099cb":"**Gender and Age**\n* Average age around 35.\n* we have more females users than male","7beeb52b":"# Create Fetures \nconvert all string values into numbers values using pandas get_dummies","69c3f50b":"**Countries visited by Users**","f5b574b5":"**Users Devices**","34e6a6ad":"**Please consider upvoting if you find it useful to you !**\n\nThanks"}}