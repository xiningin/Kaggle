{"cell_type":{"c9966e2a":"code","b876c446":"code","3d11470b":"code","e3a88c72":"code","95269e6d":"code","36342ef2":"code","920b1eb6":"code","47757b01":"code","39e38515":"code","7d1e349c":"code","dce0c9f6":"code","661fd11a":"code","cfd90175":"code","57afbe3f":"code","d704506a":"code","1f96ac47":"code","ebcf06ed":"code","73bd8dfb":"code","9c0b1e0a":"code","585ed344":"code","c734f3ed":"code","f5dcd59c":"code","fd404da4":"code","71ff0015":"code","4d288fca":"code","4e341956":"code","684b8b1d":"code","86b97e86":"code","a61d6fe6":"code","31f35581":"code","c9535caa":"code","3e7c1836":"code","56b6333d":"code","4e4b4dff":"code","79a8ac8c":"code","7090a210":"code","8a7861cf":"code","7e2399b8":"code","6ccb24c1":"code","08b35ad9":"code","d7947ee3":"code","0a0e4f34":"code","ce7c861c":"code","dc0267c5":"code","ecc713a6":"code","f7ab0db4":"code","1e623537":"code","24dc9133":"code","b36bf0b0":"code","73e96625":"code","a40e7437":"code","7d6ed967":"code","734f15f7":"code","14129175":"code","d074eb9e":"code","2c321423":"code","d093a478":"code","00926af3":"code","55ec5cab":"code","27e676fa":"code","0207b192":"code","ebbcddb6":"code","69855975":"code","4e899c2f":"code","95bb6624":"code","2513df54":"code","13ee9207":"code","dd6c3772":"code","ef01cecc":"code","92c9e287":"code","89519b60":"code","6d3dd994":"code","48dbdb08":"code","9b294404":"code","7d2c243c":"code","ab87490b":"code","fa80683c":"code","7b4ee062":"markdown","30cd480d":"markdown","2e6e61e4":"markdown","87f56edf":"markdown","55f90957":"markdown","4e5294bb":"markdown","351768f9":"markdown","8abc2cbc":"markdown","7ca547d5":"markdown","0529460d":"markdown","fc7b4b46":"markdown","36eff72b":"markdown","9e55d384":"markdown","a49ff54b":"markdown","cc49751a":"markdown","c5e8e30e":"markdown","7686d1ba":"markdown","d3345ebb":"markdown","73234898":"markdown","f1d5c482":"markdown","19f86765":"markdown","431e2b64":"markdown","34bcf721":"markdown","f05a7f80":"markdown","d751e430":"markdown","b7018d2b":"markdown","d2c4d139":"markdown","8a454c24":"markdown","d5d9c0bc":"markdown","1fbc7ffa":"markdown"},"source":{"c9966e2a":"# Import necessary tools\nimport tensorflow as tf\nimport tensorflow_hub as hub\nimport pandas as pd\nimport numpy as np\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nimport os\nimport datetime","b876c446":"print(\"TF version:\", tf.__version__)\nprint(\"TF Hub version:\", hub.__version__)\n\n# Check for GPU availability\nprint(\"GPU\", \"available\" if tf.config.list_physical_devices(\"GPU\") else \"not\")","3d11470b":"DATA_PATH = \"\/kaggle\/input\/dog-breed-identification\/\"\nMODELS_PATH = \"\/kaggle\/working\/models\/\"\nLOGS_PATH = \"\/kaggle\/working\/logs\/\"\nOUTPUT_PATH = \"\/kaggle\/working\/output\/\"\n\n# Make sure that the required directories path exists\nif not os.path.isdir(MODELS_PATH):\n    os.makedirs(MODELS_PATH)\nif not os.path.isdir(LOGS_PATH):\n    os.makedirs(LOGS_PATH)\nif not os.path.isdir(OUTPUT_PATH):\n    os.makedirs(OUTPUT_PATH)","e3a88c72":"labels_csv = pd.read_csv(DATA_PATH + \"labels.csv\")\ndisplay(labels_csv.describe())\ndisplay(labels_csv.head())","95269e6d":"# How manu images are there of each breed?\nlabels_csv.breed.value_counts().plot.bar(figsize=(20, 10))","36342ef2":"labels_csv.breed.value_counts().median()","920b1eb6":"# Let's view an image\nfrom IPython.display import Image\nImage(DATA_PATH + \"train\/001513dfcb2ffafc82cccf4d8bbaba97.jpg\")","47757b01":"filenames = [DATA_PATH + f\"train\/{fname}.jpg\" for fname in labels_csv[\"id\"]]\nfilenames[:10]","39e38515":"# Check whether number of filenames matches number of actual image files\nif len(os.listdir(DATA_PATH + \"train\")) == len(filenames):\n    print(\"Filenames match actual amount of files! Proceed.\")\nelse:\n    print(\n        \"Filenames do not match actual amount of files! Check target directory.\"\n    )","7d1e349c":"# One more check\nprint(labels_csv.breed[9000])\nImage(filenames[9000])","dce0c9f6":"labels = labels_csv.breed.values\nlabels","661fd11a":"len(labels)","cfd90175":"# See if number of labels matches the number of filenames\nif len(labels) == len(filenames):\n    print(\"Number of labels matches number of filenames!\")\nelse:\n    print(\n        \"Number of labels does note matches number of filenames! Check data directory.\"\n    )","57afbe3f":"# Find the uniques label values\nunique_breeds = np.unique(labels)\nprint(len(unique_breeds))\nprint(unique_breeds)","d704506a":"# Turn a single label into an array of booleans (one-hot array)\nprint(labels[0])\nlabels[0] == unique_breeds","1f96ac47":"# Turn every label into a boolean array\none_hot_labels = [label == unique_breeds for label in labels]\none_hot_labels[:2]","ebcf06ed":"# Setup X & y\nX = filenames\ny = one_hot_labels","73bd8dfb":"# Set number of images to use for experimenting\nNUM_IMAGES = 1000","9c0b1e0a":"# Split our data into training and validation of total size NUM_IMAGES\nX_train, X_val, y_train, y_val = train_test_split(X[:NUM_IMAGES],\n                                                  y[:NUM_IMAGES],\n                                                  test_size=0.2,\n                                                  random_state=42)\n\nlen(X_train), len(X_val), len(y_train), len(y_val)","585ed344":"# Let's have a look on our training data\nX_train[:2], y_train[:2]","c734f3ed":"IMG_SIZE = 224\n\n\n# Function for preprocessing images\ndef process_image(image_path, img_size=IMG_SIZE):\n    \"\"\"\n  Takes an image filepath and turns it into a Tensor\n  \"\"\"\n    # Read the image file\n    image = tf.io.read_file(image_path)\n    # Turn the jpeg image into numerical Tensor with 3 color channels (Red, Green, Blue)\n    image = tf.image.decode_jpeg(image, channels=3)\n    # Convert the color channels values range from 0-255 to 0-1\n    image = tf.image.convert_image_dtype(image, tf.float32)\n    # Resize the image to our desired values (224, 224)\n    image = tf.image.resize(image, size=(img_size, img_size))\n    # Return the modified image\n    return image","f5dcd59c":"# Simple function to return a tuple (image, label)\ndef get_image_label(image_path, label):\n    \"\"\"\n  Takes an image filepath name and the associated label, processes the image and return a tuple of (image, label)\n  \"\"\"\n    image = process_image(image_path)\n    return image, label","fd404da4":"# Define the batch size. 32 is a good start\nBATCH_SIZE = 32\n\n\n# Function to turn data into batches\ndef create_data_batches(X,\n                        y=None,\n                        batch_size=BATCH_SIZE,\n                        valid_data=False,\n                        test_data=False):\n    \"\"\"\n  Creates batches of data out of image (X) and label (y) pairs. Shuffles the data if it's validation data.\n  Also accepts test data as input (no labels).\n  \"\"\"\n    # If the data is test dataset, we probably don't have labels\n    if test_data:\n        print(\"Creating test data batches...\")\n        data = tf.data.Dataset.from_tensor_slices(\n            (tf.constant(X)))  # only filepaths (no labels)\n        data_batch = data.map(process_image).batch(BATCH_SIZE)\n        return data_batch\n\n    # If the data is a valid dataset, we don't need to shuffle ir\n    elif valid_data:\n        print(\"Creating validation data batches...\")\n        data = tf.data.Dataset.from_tensor_slices((\n            tf.constant(X),  # filepaths\n            tf.constant(y)))  # labels\n        data_batch = data.map(get_image_label).batch(BATCH_SIZE)\n        return data_batch\n\n    else:\n        print(\"Creating training data batches...\")\n        data = tf.data.Dataset.from_tensor_slices(\n            (tf.constant(X), tf.constant(y)))\n        # Shuffling pathnames and labels bafore mapping image processor function is faster than shuffling images\n        data = data.shuffle(buffer_size=len(X))\n\n        # Create (image, label) tuples (this also turns the image path into a preprocessed image)\n        data_batch = data.map(get_image_label).batch(BATCH_SIZE)\n\n        return data_batch","71ff0015":"# Create training and validation data batches\ntrain_data = create_data_batches(X_train, y_train)\nval_data = create_data_batches(X_val, y_val, valid_data=True)","4d288fca":"# Check out the different attributes of our data batches\ntrain_data.element_spec, val_data.element_spec","4e341956":"# Function for viewing images ina a data batch\ndef show_25_images(images, labels):\n    \"\"\"\n  Displays a plot of a 25 of images and their labels from a data batch.\n  \"\"\"\n    # Setup the figure\n    plt.figure(figsize=(10, 10))\n    # Loop through the 25 * for displaying 25 images:\n    for i in range(25):\n        ax = plt.subplot(5, 5, i + 1)\n        # Display an image\n        plt.imshow(images[i])\n        # Add the image label as the title\n        plt.title(unique_breeds[labels[i].argmax()])\n        # Turn the grid lines off\n        plt.axis(\"off\")","684b8b1d":"# Let's visualize our training set\ntrain_images, train_labels = next(train_data.as_numpy_iterator())\nshow_25_images(train_images, train_labels)","86b97e86":"# Now let's visualize our validation set\nval_images, val_labels = next(val_data.as_numpy_iterator())\nshow_25_images(val_images, val_labels)","a61d6fe6":"INPUT_SHAPE = [None, IMG_SIZE, IMG_SIZE,\n               3]  # batch, hieght, width, color channels\n\n# Setup output shape of our model\nOUTPUT_SHAPE = len(unique_breeds)\n\n# Setup the MobileNetV2 model URL from TensorFlow hub\nMODEL_URL = \"https:\/\/tfhub.dev\/google\/imagenet\/mobilenet_v2_130_224\/classification\/4\"","31f35581":"# Function which builds a Keras model\ndef create_model(input_shape=INPUT_SHAPE,\n                 output_shape=OUTPUT_SHAPE,\n                 model_url=MODEL_URL):\n    print(\"Building model with:\", model_url)\n\n    # Setup the model layers\n    model = tf.keras.Sequential([\n        hub.KerasLayer(model_url),  # layer 1 (input layer)\n        tf.keras.layers.Dense(units=output_shape,\n                              activation=\"softmax\")  # layer 2 (output layer)\n    ])\n\n    # Compile the model\n    model.compile(loss=tf.keras.losses.CategoricalCrossentropy(),\n                  optimizer=tf.keras.optimizers.Adam(),\n                  metrics=[\"accuracy\"])\n\n    # Build the model\n    model.build(input_shape)\n\n    return model","c9535caa":"model = create_model()\nmodel.summary()","3e7c1836":"# Load TensorBoard notebook extension\n%load_ext tensorboard","56b6333d":"# Function to build a TensorBoard callback\ndef create_tensorboard_callback():\n    # Create a log directory for storing TensorBoard logs\n    logdir = os.path.join(\n        LOGS_PATH,  # make it so the logs get tracked whenever we run an experiment\n        datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\"))\n    return tf.keras.callbacks.TensorBoard(logdir)","4e4b4dff":"# Create Early Stopping callback\nearly_stopping = tf.keras.callbacks.EarlyStopping(monitor=\"val_accuracy\",\n                                                  patience=3)","79a8ac8c":"NUM_EPOCHS = 100\n\n\n# Function to train and return a trained model\ndef train_model(num_epochs=NUM_EPOCHS):\n    \"\"\"\n  Trains a given model and return the trained version.\n  \"\"\"\n    # Create a model\n    model = create_model()\n\n    # Create a new TensorBoard session everytime we train a model\n    tensorboard = create_tensorboard_callback()\n\n    # Fit the model to the data passing it the callbacks we created\n    model.fit(x=train_data,\n              epochs=NUM_EPOCHS,\n              validation_data=val_data,\n              validation_freq=1,\n              callbacks=[tensorboard, early_stopping])\n\n    # Return the fitted model\n    return model","7090a210":"# Fit the model to the data\nmodel = train_model()","8a7861cf":"%tensorboard --logdir $LOGS_PATH","7e2399b8":"predictions = model.predict(val_data, verbose=1)\npredictions","6ccb24c1":"index = 42\nprint(predictions[index])\nprint(f\"Max value (probability of prediction): {np.max(predictions[index])}\")\nprint(f\"Sum: {np.sum(predictions[index])}\")\nprint(f\"Max index: {np.argmax(predictions[index])}\")\nprint(f\"Predicted label: {unique_breeds[np.argmax(predictions[index])]}\")","08b35ad9":"unique_breeds[113]","d7947ee3":"# Turn prediction probabilities into their respective label (easier to understand)\ndef get_pred_label(prediction_probabilities):\n    \"\"\"\n  Turn an array of prediction probabilities into a label\n  \"\"\"\n    return unique_breeds[np.argmax(prediction_probabilities)]","0a0e4f34":"# Get a predicted label based on an array of prediction probabilities\nget_pred_label(predictions[81])","ce7c861c":"# Function to unbatchify a batch dataset\ndef unbatchify(data):\n    \"\"\"\n  Takes a batched dataset of (image, label) Tensors and return separate arrays\n  of images and labels\n  \"\"\"\n    images = []\n    labels = []\n    # Loop trhough unbatched data\n    for image, label in data.unbatch().as_numpy_iterator():\n        images.append(image)\n        labels.append(get_pred_label(label))\n\n    return images, labels","dc0267c5":"# Unbatchify the validation data\nval_images, val_labels = unbatchify(val_data)\nval_images[0], val_labels[0]","ecc713a6":"def plot_pred(prediction_probabilities, labels, images, n=1):\n    \"\"\"\n  View the prediction ground truth and image for sample n\n  \"\"\"\n    pred_prob, true_label, image = prediction_probabilities[n], labels[\n        n], images[n]\n\n    # Get the pred label\n    pred_label = get_pred_label(pred_prob)\n\n    # Plot the image & remove ticks\n    plt.imshow(image)\n    plt.xticks([])\n    plt.yticks([])\n\n    # Change the color of the title depending if the prediction is right or wrong\n    if pred_label == true_label:\n        color = \"green\"\n    else:\n        color = \"red\"\n\n    # Change plot title to be predicted, probability of prediction and truth label\n    plt.title(f\"{pred_label} {np.max(pred_prob)*100:2.0f}% {true_label}\",\n              color=color)","f7ab0db4":"plot_pred(prediction_probabilities=predictions,\n          labels=val_labels,\n          images=val_images)","1e623537":"def plot_pred_conf(prediction_probabilities, labels, n=1):\n    \"\"\"\n  Plot the top 10 highest prediction confidences along with the truth label for\n  sample n\n  \"\"\"\n    pred_prob, true_label = prediction_probabilities[n], labels[n]\n\n    # Get the predicted label\n    pred_label = get_pred_label(pred_prob)\n\n    # Find the top 10 prediction confidence indexes\n    top_10_pred_indexes = pred_prob.argsort()[-10:][::-1]\n    # Find the top 10 prediction connfidence values\n    top_10_pred_values = pred_prob[top_10_pred_indexes]\n    # Find the top 10 prediction labels\n    top_10_pred_labels = unique_breeds[top_10_pred_indexes]\n\n    # Setup plot\n    top_plot = plt.bar(np.arange(len(top_10_pred_labels)),\n                       top_10_pred_values,\n                       color=\"grey\")\n    plt.xticks(np.arange(len(top_10_pred_labels)),\n               labels=top_10_pred_labels,\n               rotation=\"vertical\")\n\n    # Change color of true label\n    if np.isin(true_label, top_10_pred_labels):\n        top_plot[np.argmax(\n            top_10_pred_labels == true_label)].set_color(\"green\")\n    else:\n        pass","24dc9133":"plot_pred_conf(prediction_probabilities=predictions, labels=val_labels, n=9)","b36bf0b0":"# Let's check out a few predictions and their different values\ni_multiplier = 10\nn_rows = 3\nn_cols = 2\nn_images = n_cols * n_rows\nplt.figure(figsize=(10 * n_cols, 5 * n_rows))\nfor i in range(n_images):\n    plt.subplot(n_rows, 2 * n_cols, 2 * i + 1)\n    plot_pred(prediction_probabilities=predictions,\n              labels=val_labels,\n              images=val_images,\n              n=i + i_multiplier)\n    plt.subplot(n_rows, 2 * n_cols, 2 * i + 2)\n    plot_pred_conf(prediction_probabilities=predictions,\n                   labels=val_labels,\n                   n=i + i_multiplier)\nplt.show()","73e96625":"def plot_conf_matrix(prediction_probabilities, labels):\n    \"\"\"\n  Plot the confusion matrix of a trained model given its prediction\n  probabilities and desired labels\n  \"\"\"\n    # First, we get the corresponding labels of the predictions\n    pred_labels = [\n        get_pred_label(pred_probs) for pred_probs in prediction_probabilities\n    ]\n\n    # Check which breeds are present either in true and predicted labels\n    breeds_in_true_labels = set(labels)\n    breeds_in_pred_labels = set(pred_labels)\n    breeds_in_set = [\n        breed for breed in unique_breeds\n        if breed in breeds_in_pred_labels and breed in breeds_in_true_labels\n    ]\n\n    # Computes the confusion matrix\n    conf_mat = confusion_matrix(labels, pred_labels, labels=breeds_in_set)\n\n    # Builds the confusion matrix dataframe (for the x and y ticks in the heatmap)\n    conf_df = pd.DataFrame(conf_mat,\n                           index=breeds_in_set,\n                           columns=breeds_in_set)\n    conf_df.dropna(inplace=True)\n\n    # Now we plot the confusion matrix\n    fig, ax = plt.subplots(figsize=(20, 20))\n    conf_plot = sns.heatmap(conf_df, annot=True, cbar=False)\n\n    plt.title(\"Confusion matrix\")\n    plt.xlabel(\"True label\")\n    plt.ylabel(\"Predicted label\")","a40e7437":"plot_conf_matrix(predictions, val_labels)","7d6ed967":"# Create a function to save a model\ndef save_model(model, suffix=None):\n    \"\"\"\n  Save a given model in a model directory and appends a suffix (string)\n  \"\"\"\n    # Create a model directory with current time\n    modeldir = os.path.join(MODELS_PATH,\n                            datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\"))\n    model_path = modeldir + \"_\" + suffix + \".h5\"  # model save format\n    print(f\"Saving model to: {model_path}...\")\n    model.save(model_path)\n    return model_path","734f15f7":"# Create a function to load a trained model\ndef load_model(model_path):\n    print(f\"Loading saved model from: {model_path}...\")\n    model = tf.keras.models.load_model(\n        model_path, custom_objects={\"KerasLayer\": hub.KerasLayer})\n    return model","14129175":"# Save our model trained on 1000 images\nmodel_path = save_model(model, suffix=\"1000_images_mobilenetv2_Adam\")","d074eb9e":"# Load a trained model\nloaded_1000_image_model = load_model(model_path)","2c321423":"model.evaluate(val_data, )","d093a478":"model.metrics_names","00926af3":"# Create a data batch with the full data set\nfull_data = create_data_batches(X, y)","55ec5cab":"full_data","27e676fa":"# Create a model for full model\nfull_model = create_model()","0207b192":"# Create full model callbacks\nfull_model_tensorboard = create_tensorboard_callback()\n# No validation set when training on all the data, so we can't monitor validation accuracy\nfull_model_early_stopping = tf.keras.callbacks.EarlyStopping(\n    monitor=\"accuracy\", patience=3)","ebbcddb6":"# Fit the full model to the full data\nfull_model.fit(x=full_data,\n               epochs=NUM_EPOCHS,\n               callbacks=[full_model_tensorboard, full_model_early_stopping])","69855975":"full_model_path = save_model(full_model, suffix=\"full_image_set_mobilenetv2_Adam\")","4e899c2f":"loaded_full_model = load_model(full_model_path)","95bb6624":"# Load test image filenames\ntest_path = DATA_PATH + \"test\/\"\ntest_filenames = [test_path + fname for fname in os.listdir(test_path)]\ntest_filenames[:10]","2513df54":"len(test_filenames)","13ee9207":"# Create test data batch\ntest_data = create_data_batches(test_filenames, test_data=True)","dd6c3772":"test_data","ef01cecc":"# Make predictions on test data batch using the loaded full model\ntest_predictions = loaded_full_model.predict(test_data, verbose=1)","92c9e287":"# Save predictions (NumPy arrary) to csv file (for access later)\nnp.savetxt(OUTPUT_PATH + \"preds_array.csv\", test_predictions, delimiter=\",\")","89519b60":"test_predictions = np.loadtxt(OUTPUT_PATH + \"preds_array.csv\", delimiter=\",\")","6d3dd994":"test_predictions","48dbdb08":"test_predictions.shape","9b294404":"# Create a pandas DataFrame with empty columns\npreds_df = pd.DataFrame(columns=[\"id\"] + list(unique_breeds))\npreds_df","7d2c243c":"# Append test image ID's to predictions DataFrame\ntest_ids = [os.path.splitext(path)[0] for path in os.listdir(test_path)]\npreds_df[\"id\"] = test_ids\npreds_df.head()","ab87490b":"# Add the prediction probabilities to each dog breed column\npreds_df[list(unique_breeds)] = test_predictions\npreds_df.head()","fa80683c":"# Save our predictions dataframe to CSV for submission to Kaggle\npreds_df.to_csv(OUTPUT_PATH +\n                \"full_model_predictions_submission_1_mobilenetV2.csv\",\n                index=False)","7b4ee062":"We're going to start off experimenting with ~ 1000 images and increase as needed.","30cd480d":"## Checking the TensorBoard logs\n\nThe TensorBoard maginc function (`%tensorboard`) will access the logs directory we created earlier and visualize its contents","2e6e61e4":"Now we've got some function to help us visualize our predictions and evaluate our model, let's check out a few.","87f56edf":"## One-Hot Encoding","55f90957":"Since we've got our training image filepaths in a list, let's prepare our labels.","4e5294bb":"# Building a model\n\nBefore we build a model, there are a few things we need to define:\n\n* The input shape (our images shape, in the form of Tensors) to our model.\n* The output shape (image label, in the form of Tensors) of our model.\n* The URL of the model we want to use from [TensorFlow hub]( https:\/\/tfhub.dev\/google\/imagenet\/mobilenet_v2_130_224\/classification\/4)","351768f9":"Now we've got a way to turn our data into tuples of Tensors in the form: (`image`, `label`), let's make a function to turn all of our data (`X` & `y`) into batches!","8abc2cbc":"## Saving and reloading a trained model","7ca547d5":"Now we've got a function to save and load a trained mode, let's make sure they work!","0529460d":"Now sice our validation data is still in a batch dataset, we'll have to unbatchify it to make prediction on validation images and them compare those predictions to the validation labels (truth labels)","fc7b4b46":"## Getting images and their labels\n\nLet's get a list of all our image file path names.","36eff72b":"# Making and evaluating prediction using a pre-trained model","9e55d384":"Now we've got our inputs, outputs and model ready to g, let's put them together into a Keras deep learning model.\n\nKnowing this, let's create a function which:\n* Takes a input shape, output shape and the model we've chosen as parameters.\n* Defines the layers in a Keras model in sequential fashion (do this first, then this, then that).\n* Compiles the mode l(says it should be evaluated and improved).\n* Builds the model (tells the model the input shape it'll be getting).\n* Return the model\n\nAll these steps can be found [here](https:\/\/www.tensorflow.org\/guide\/keras\/sequential_model)","a49ff54b":"## Confusion matrix","cc49751a":"# Dog Breed Identification\n\nWho's a good dog? Who likes ear scratches? Well, it seems those fancy deep neural networks don't have all the answers. However, maybe they can answer that ubiquitous question we all ask when meeting a four-legged stranger: what kind of good pup is that?\n\nIn this playground competition, you are provided a strictly canine subset of ImageNet in order to practice fine-grained image categorization. How well you can tell your Norfolk Terriers from your Norwich Terriers? With 120 breeds of dogs and a limited number training images per class, you might find the problem more, err, ruff than you anticipated.\n\n![Dataset samples](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/3333\/media\/border_collies.png)\n\n## Acknowledgments\n\nWe extend our gratitude to the creators of the [Stanford Dogs Dataset](http:\/\/vision.stanford.edu\/aditya86\/ImageNetDogs\/) for making this competition possible: Aditya Khosla, Nityananda Jayadevaprakash, Bangpeng Yao, and Fei-Fei Li.\n\n## Problem\n\nIdentifying the breed of as dog given an image of a dog.\n\n## Data\n\nThe data we're using is from Kaggle's [Dog Breed Identification](https:\/\/www.kaggle.com\/c\/dog-breed-identification\/data) competition.\n\n# Evaluation\n\nThe evaluation is a file with prediction probabilities for each dog breed of each test image, as stated [here](https:\/\/www.kaggle.com\/c\/dog-breed-identification\/overview\/evaluation).\n\n## Features\n\nSome information about the data:\n\n* We're dealing with images (unstructured data) so it's probably best we use deep learning\/transfer learning.\n* There are 120 breed of dogs (this means there are 120 different classes).\n* There are around 10,000+ images in the training set (these images have labels).\n* There are around 10,000+ images in the test set (theses images have no labels, because we'll want to predict them).\n\n## Workspace setup","c5e8e30e":"## Preprocessing Image (turning images into Tensors)\n\nTo preprocess our images into Tensors we're going to write a function which does a few things:\n\n1. Take a image filepath as input\n2. Use TensorFlow to read the file and save it to a variable `image`\n3. Turn our `image` (a jpg) into Tensors\n4. Resize the `image` to be a shape of (224, 224)\n5. return the modified `image`\n","7686d1ba":"# Making predictions on the test dataset\n\nSince our model has been trained on images in the form of Tensor batches, to make predictions on the test data, we'll have to get it into the same format.\n\nTo make predictions on the test data, we'll:\n\n* Get the test images filenames.\n* Convert the filenames into test data batches using `create_data_batches()` and setting the `test_data` parameter to `True` (since the test data doesn't have labels).\n* Make predictions arrar by passing the test batches tot the `predict()` method called on our model.","d3345ebb":"Now we've got one function to visualize our models top predictions, let's make another to view our models top 10 predictions\n\nThis function will:\n* Take an input of prediction probabilities array and a ground truth array and an integer.\n* Find the prediction using `get_pred_label()`\n* Find the top 10:\n  * Prediction probabilities indexes\n  * Prediction probabilities values\n  *Prediction labels\n* Plot the top 10 prediction probability values and labels, coloring the true label green.","73234898":"## Visualizing data batches\n\nOur data is now in batches. However, these can be a little hard to understand\/comprehend. Let's visualize them!","f1d5c482":"Now we've got ways to get:\n* Prediction labels\n* validation labels\n* validation images\n\nLet's make some function to make these all a bit more visualize.\n\nWe'll create a function which:\n* Takens an array of prediction probabilities, an array of truth labels, an array of images and an integer.\n* Convert the prediction probabilities to a predicted label.\n* Plot the predicted label, its probability, the truth and the target image in a single plot.","19f86765":"Having the above functionality is greate but we want to be able to do it at scale. And it would be even better if we could see the image the prediction is being made on!\n\n**Note:** Prediction probabilities are also know as *confidence levels*","431e2b64":"## Turning our data into batches\n\nWhy turn our data into batches?\n\nLet's say you're trying to process 10,000+ images in one go... they all might not fit into memory.\n\nSo that's why we do about 32 (this is batch size) images at a time (you can manually adjust the batch size if needed).\n\nIn order to use TensorFlow effectively, we need our data in the form of Tensor tuples which look like this: (`image`, `label`)","34bcf721":"# Data Loading\n\nAs with all machine learning models, our data has to be in numerical format. So that's what we'll be doing first: turning our images into **Tensors**\n\nLet's tart by accessing our data and checking out the labels.","f05a7f80":"## Creating callbacks\n\nCallbacks are helper functions a model can use during training to do such things as save its prograss, check its progress or stop training early if a model stops improving.\n\nWe'll create two callbacks. One for TehsorBoard, which helps track our model progress, and another for early stopping, which prevents our model from training for too long.","d751e430":"## Creating our own validation set\n\nSince the dataset from Kaggle doesn't come with a validation set, we're going to create our own.","b7018d2b":"# Training a model (on a subset of data)\n\nOur first model is only going to train on 1000 images, to make sure everything is working.\n\nLet's create a function which trains a model.\n* Create a model using `create_model()`.\n* Setup a TensorBoard callback using `create_tensorboard_callback()`.\n* Call the `fit()` function on our model passing it the training data, validation data, number of epochs to train for (`NUM_EPOCHS`) and the callbacks we'd like to use.\n* Return the model.","d2c4d139":"# Preparing test dataset predictions for Kaggle\n\nLooking ar the [Kaggle sample submission](https:\/\/www.kaggle.com\/c\/dog-breed-identification\/overview\/evaluation), we find that it wants our models prediction probability outputs in a DataFrame with and ID and a column for each dog breed.\n\nTo get the data in this format, we'll:\n* Create a pandas DataFrame with and ID column as well as a column for each dog breed.\n* Add data to the ID column by extracting the test image ID's from their filepaths.\n* Add data ( the prediction probabilities) to each of the dog breed columns.\n* Export the DataFrame as a CSV to submit it to Kaggle.","8a454c24":"# Training on the full data","d5d9c0bc":"### Early Stopping callback\n\n[Early Stopping](https:\/\/www.tensorflow.org\/api_docs\/python\/tf\/keras\/callbacks\/EarlyStopping) helps stop our model overfitting by stopping training if a certain metric stops improving.","1fbc7ffa":"### TensorBoard callback\n\nTo setup a TensorBoard callback, we need to do 3 things:\n1. Load the TensorBoard notebook extension\n2. Create a TensorBoard callback which is able to save logs to a directory and pass it to our model's `fit()` function.\n3. visualize our models training log with the `%tensorboard` magic function (we'll do this after model training)"}}