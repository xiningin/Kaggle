{"cell_type":{"77200bfa":"code","bedeaca0":"code","bd2b04cb":"code","5f0a853f":"code","89232b83":"code","f2967783":"code","15eb611e":"code","6e14cb70":"code","2173090f":"code","b3430e84":"code","e113c4e6":"code","e7cb5d70":"code","6a51e8aa":"code","459adfa9":"code","6cb6a220":"code","73d8c87f":"code","18a27cbd":"code","b8710010":"code","2930d019":"code","9777511b":"code","46469765":"code","3a851ded":"code","1d6d27f3":"code","012c6b16":"code","00a8d4ab":"code","ed132e8f":"code","b8481788":"code","04e0101b":"code","71862331":"code","d7177e3e":"code","456ab42a":"code","c1f4c14b":"code","1b2f6f78":"code","f82b9e33":"code","564e4033":"code","b418f6e2":"code","e4d4816a":"code","767cbfab":"code","5b0b2501":"code","89cf16b1":"code","e92b2ef1":"code","32d2d984":"code","f5ca2b02":"code","70c65391":"markdown","821fb6f2":"markdown","a016aeed":"markdown","f3d5f8ec":"markdown","57869c1d":"markdown","7ba6c6a1":"markdown","7d0257aa":"markdown","361695ae":"markdown","bfc6f07f":"markdown","1931550a":"markdown","64ef6963":"markdown"},"source":{"77200bfa":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bedeaca0":"import numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt","bd2b04cb":"train = pd.read_csv('\/kaggle\/input\/digit-recognizer\/train.csv')","5f0a853f":"df = train\ntrain.head()","89232b83":"def show_image(pixel, label, index):\n    image2d = pixel.values.reshape(28,28)\n    plt.subplot('33%d' % (index))\n    plt.imshow(image2d, cmap=plt.cm.gray)\n    plt.title(label)\n\nplt.figure(figsize=(5,5))\nsample_image = train.sample(9).reset_index(drop=True)\n\nfor index, image in sample_image.iterrows():\n    label = image['label']\n    pixel = image.drop('label')\n    show_image(pixel, label, index)","f2967783":"#checking for count of each label of train dataset\ntargets = df['label']\ndf['label'].value_counts()","15eb611e":"# number of labels\ndf['label'].value_counts().index\n","6e14cb70":"labels = df['label'].unique()\ndf['label'].value_counts()","2173090f":"minimum_prior_number = df['label'].value_counts().min()\ntrain_prior = round(minimum_prior_number*0.9)\nvalidate_prior = minimum_prior_number-train_prior\nvalidate_prior","b3430e84":"round(minimum_prior_number*0.1)","e113c4e6":"train_equal_prior = train[train['label']==1][:train_prior]\ntrain_equal_prior\n","e7cb5d70":"validate_equal_prior = train[train['label']==1][-validate_prior:]\nvalidate_equal_prior","6a51e8aa":"for i in labels[1:]:\n    train_equal_prior = pd.concat([train_equal_prior,train[train['label']==i][:train_prior]],axis=0)\n    validate_equal_prior = pd.concat([validate_equal_prior,train[train['label']==i][-validate_prior:]],axis=0)\ntrain_equal_prior","459adfa9":"validate_equal_prior","6cb6a220":"train_equal_prior['label'].value_counts()","73d8c87f":"validate_equal_prior['label'].value_counts()","18a27cbd":"train_df = train_equal_prior.copy()\nvalidate_df = validate_equal_prior.copy()","b8710010":"from sklearn.utils import shuffle\ntrain_df = shuffle(train_df)\nvalidate_df = shuffle(validate_df)\ntrain_df.head()","2930d019":"inputs = train_df.columns[1:]\ninputs","9777511b":"X_train = train_df[inputs]\/255.0\nX_test = validate_df[inputs]\/255.0\ny_train = train_df['label']\ny_test = validate_df['label']","46469765":"np.savez('trainep',inputs =X_train , targets = y_train)","3a851ded":"training_data = np.load('trainep.npz')\ntrain_inputs = training_data['inputs'].astype(np.float)\ntrain_targets = training_data['targets'].astype(np.float)","1d6d27f3":"training_data['inputs']","012c6b16":"np.savez('valep',inputs = X_test , targets = y_test)","00a8d4ab":"validation_data = np.load('valep.npz')\nvalidation_inputs = validation_data['inputs'].astype(np.float)\nvalidation_targets = validation_data['targets'].astype(np.float)","ed132e8f":"validation_data['inputs']","b8481788":"input_size  = 784\noutput_size = 10\nhidden_layer_size = 170\n\nmodel = tf.keras.Sequential([\n    tf.keras.layers.Dense(hidden_layer_size, activation = 'relu'),\n    tf.keras.layers.Dense(hidden_layer_size, activation = 'relu'),\n    tf.keras.layers.Dense(hidden_layer_size, activation = 'relu'),\n    tf.keras.layers.Dense(output_size, activation = 'softmax'),\n])\nmodel.compile(optimizer='adam', loss= 'sparse_categorical_crossentropy', metrics=['accuracy'])\nbatch_size = 500\nmax_epochs = 20\nearly_stopping = tf.keras.callbacks.EarlyStopping(patience = 5)\nmodel.fit(train_inputs,\n         train_targets,\n         batch_size = batch_size,\n         epochs = max_epochs,\n         callbacks = [early_stopping],\n          validation_data = (validation_inputs,validation_targets),\n          verbose = 2\n         )","04e0101b":"#evaluating model\nmodel.evaluate(train_inputs, train_targets)","71862331":"test = pd.read_csv('\/kaggle\/input\/digit-recognizer\/test.csv')","d7177e3e":"test = test\/255.0","456ab42a":"np.savez('test',inputs =test)","c1f4c14b":"test_data = np.load('test.npz')","1b2f6f78":"test_inputs = test_data['inputs'].astype(np.float)","f82b9e33":"test_inputs","564e4033":"predictions = model.predict(train_inputs,batch_size=1)","b418f6e2":"pred_values = tf.argmax(input=predictions, axis=1)\npred_values","e4d4816a":"pred_values.numpy()","767cbfab":"train_targets.round()","5b0b2501":"test_predictions = model.predict(test_inputs,batch_size=1)","89cf16b1":"pred_values = tf.argmax(input=test_predictions, axis=1)\npred_values.numpy()\n# extracting the predicted value","e92b2ef1":"submission = pd.DataFrame({\n    \"ImageId\": range(1,28001),\n    \"Label\": pred_values\n    })","32d2d984":"submission","f5ca2b02":"submission.to_csv('submission.csv', index=False)","70c65391":"# standardising the inputs in training and validation dataframe","821fb6f2":"standardizing the test data","a016aeed":"# plotting pixel as images","f3d5f8ec":"# prediction","57869c1d":"# shuffling both dataframes ","7ba6c6a1":"# training and fiting the model","7d0257aa":"# creating training and validation dataset","361695ae":"# MNIST DATASET digit recognising using Tensorflow 2.0\nMNIST (\"Modified National Institute of Standards and Technology\") is the de facto \u201chello world\u201d dataset of computer vision. Since its release in 1999, this classic dataset of handwritten images has served as the basis for benchmarking classification algorithms. As new machine learning techniques emerge, MNIST remains a reliable resource for researchers and learners alike.","bfc6f07f":"# Making equal prior for each label so that it does not affect in training the model i.e.. for better training","1931550a":"# saving the data in form of tensors","64ef6963":"# About data\nThe data files train.csv and test.csv contain gray-scale images of hand-drawn digits, from zero through nine.\n\nEach image is 28 pixels in height and 28 pixels in width, for a total of 784 pixels in total. Each pixel has a single pixel-value associated with it, indicating the lightness or darkness of that pixel, with higher numbers meaning darker. This pixel-value is an integer between 0 and 255, inclusive.\nThe training data set, (train.csv), has 785 columns. The first column, called \"label\", is the digit that was drawn by the user. The rest of the columns contain the pixel-values of the associated image."}}