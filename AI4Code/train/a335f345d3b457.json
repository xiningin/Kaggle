{"cell_type":{"1d524d92":"code","f120d62b":"code","7ada445c":"code","d6bfddb1":"code","5ba6bcd5":"code","2127e34b":"code","7adccb92":"code","ab5ae94c":"code","ce4f32a9":"code","11625a66":"code","3321b6bd":"code","48657449":"code","f23f05be":"code","d566ac01":"code","54007578":"code","b998b23c":"code","4f1ed1c2":"code","f35947ac":"code","e90ef1dc":"code","7885f470":"code","d3828cf0":"code","1fced370":"code","d46e64d6":"code","190cc9c3":"code","c273f0bf":"code","c0ebc8f5":"code","f5963ff1":"code","d543d5b8":"code","bb99d804":"code","7a386ca8":"code","14955c2f":"code","022ed4ba":"code","934e198f":"markdown","7863cfb1":"markdown"},"source":{"1d524d92":"import pandas as pd\ntrain = pd.read_csv('\/kaggle\/input\/cassava-leaf-disease-classification\/train.csv')","f120d62b":"import os\npath = '\/kaggle\/input\/cassava-leaf-disease-classification\/'\nfor i in os.listdir(path):\n    print(i)","7ada445c":"train","d6bfddb1":"train.info()","5ba6bcd5":"train['label'].unique()","2127e34b":"from PIL import Image  \nim = Image.open(\"\/kaggle\/input\/cassava-leaf-disease-classification\/train_images\/999616605.jpg\")  \nprint('opened')\nim.size","7adccb92":"train_path = '\/kaggle\/input\/cassava-leaf-disease-classification\/train_images'\ntest_path = '\/kaggle\/input\/cassava-leaf-disease-classification\/test_images'","ab5ae94c":"import json\n\nfile = open('\/kaggle\/input\/cassava-leaf-disease-classification\/label_num_to_disease_map.json')\njson_data = json.load(file)","ce4f32a9":"json_data","11625a66":"for i in range(21397):\n    if train['label'][i] == 0:\n        train.replace(to_replace =train['label'][i], \n                 value ='Cassava Bacterial Blight (CBB)',inplace=True) \n    elif train['label'][i] == 1:\n        train.replace(to_replace =train['label'][i], \n                 value ='Cassava Brown Streak Disease (CBSD)',inplace=True) \n    elif train['label'][i] == 2:\n        train.replace(to_replace =train['label'][i], \n                 value ='Cassava Green Mottle (CGM)',inplace=True) \n    elif train['label'][i] == 3:\n        train.replace(to_replace =train['label'][i], \n                 value ='Cassava Mosaic Disease (CMD)',inplace=True) \n    elif train['label'][i] == 4:\n        train.replace(to_replace =train['label'][i], \n                 value ='Healthy',inplace=True) \n        ","3321b6bd":"train.head()","48657449":"import keras\nimport tensorflow as tf\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import * \nfrom tensorflow.keras.preprocessing import image","f23f05be":"size = 512\nbat_size = 16\nsplit = 0.31\nepoch = 10","d566ac01":"train_datagen = image.ImageDataGenerator(\n    rescale = 1.\/255,\n    featurewise_center=False,\n    samplewise_center=False,\n    featurewise_std_normalization=False,\n    samplewise_std_normalization=False,\n    zca_whitening=False,\n    zca_epsilon=1e-06,\n    rotation_range=2,\n    width_shift_range=0.0,\n    height_shift_range=0.0,\n    brightness_range=[0.0, 0.2],\n    shear_range=0.0,\n    zoom_range=0.1,\n    channel_shift_range=0.0,\n    fill_mode=\"nearest\",\n    cval=0.0,\n    horizontal_flip = True,\n    vertical_flip = True,\n    validation_split=split,\n)","54007578":"train_generator = train_datagen.flow_from_dataframe(\n    train,\n    directory=train_path,\n    x_col=\"image_id\",\n    y_col=\"label\",\n    weight_col=None,\n    target_size=(size, size),\n    color_mode=\"rgb\",\n    classes=None,\n    class_mode=\"categorical\",\n    batch_size=bat_size,\n    shuffle=True,\n    seed=None,\n    subset='training',\n    #save_to_dir=None,\n    #save_prefix=\"\",\n    #save_format=\"jpg\",\n    #subset=None,\n    interpolation=\"nearest\",\n    validate_filenames=True\n)","b998b23c":"validation_generator = train_datagen.flow_from_dataframe(\n    train,\n    directory=train_path,\n    x_col=\"image_id\",\n    y_col=\"label\",\n    weight_col=None,\n    target_size=(size, size),\n    color_mode=\"rgb\",\n    classes=None,\n    class_mode=\"categorical\",\n    batch_size=bat_size,\n    subset='validation',\n    shuffle=True,\n    seed=None,\n    #save_to_dir=None,\n    #save_prefix=\"\",\n    #save_format=\"png\",\n    #subset=None,\n    #interpolation=\"nearest\",\n    validate_filenames=True\n)","4f1ed1c2":"# -*- coding: utf-8 -*-\nfrom keras.models import Sequential\n#initialize nn\nimport keras\nfrom keras.layers import Conv2D\nfrom keras.layers import MaxPooling2D\nfrom keras.layers import Flatten\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.layers import Dense\nimport tensorflow as tf\nfrom keras.layers import BatchNormalization\nfrom keras.layers import Dropout\n\n#basic cnn\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape=(size,size, 3)))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(64, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(96, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(128, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Conv2D(256, kernel_size=(3,3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(BatchNormalization())\nmodel.add(Dropout(0.2))\nmodel.add(Flatten())\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(64, activation='relu'))\nmodel.add(Dense(128, activation='relu',kernel_regularizer=tf.keras.regularizers.l1_l2(l1=1e-5, l2=1e-4),\n    bias_regularizer=tf.keras.regularizers.l2(1e-4),\n    activity_regularizer=tf.keras.regularizers.l2(1e-5)))\nmodel.add(Dense(256, activation='relu',kernel_regularizer=tf.keras.regularizers.l1_l2(l1=1e-5, l2=1e-4),\n    bias_regularizer=tf.keras.regularizers.l2(1e-4),\n    activity_regularizer=tf.keras.regularizers.l2(1e-5)))\nmodel.add(Dropout(0.25))\nmodel.add(Dense(5, activation = 'softmax'))\n\nopt = keras.optimizers.Adam(learning_rate=0.001)\n#opt = tf.keras.optimizers.RMSprop(learning_rate=0.001)\n#opt = tf.keras.optimizers.SGD(learning_rate=0.01)\nmodel.compile(optimizer = opt, loss = 'categorical_crossentropy', metrics = ['accuracy'])","f35947ac":"callback = tf.keras.callbacks.EarlyStopping(\n    monitor=\"val_acc\",\n    min_delta=0.80,\n    patience=2,\n    verbose=0,\n    mode=\"auto\",\n    baseline=None,\n    restore_best_weights=False,\n)","e90ef1dc":"'''model.fit_generator(train_generator,\n                         epochs = epoch,\n                         validation_data = validation_generator,\n                         verbose=1,\n                         callbacks = [callback])'''","7885f470":"from tensorflow import keras\nfrom tensorflow.keras.applications import EfficientNetB7\n\n\nmodel = EfficientNetB7(include_top=False, weights=\"imagenet\", input_shape=(512, 512, 3))\n\n# Freeze the pretrained weights\nmodel.trainable = False\n\ninputs = keras.Input(shape=(512, 512, 3))\nx = model(inputs, training=False)\n#x = keras.layers.GlobalAveragePooling2D()(x)\nx = keras.layers.Flatten()(x)\n#x = keras.layers.Dense(64, activation='relu')(x)\n#x = keras.layers.Dropout(0.2)(x)\n#x = keras.layers.Dense(256, activation='relu')(x)\n#x = keras.layers.Dropout(0.2)(x)\noutputs = keras.layers.Dense(5, activation='softmax')(x)\nmodel = keras.Model(inputs, outputs)\n\n#x = Flatten()(model.layers[-1].output)\n#x = Dense(1024, activation='relu')(x)\n#outputs = layers.Dense(5, activation=\"softmax\")(x)\n\n# Compile\n#model = tf.keras.Model(model.inputs, outputs, name=\"EfficientNet\")\noptimizer = tf.keras.optimizers.Adam(learning_rate=0.001)\n\nmodel.compile(\n    optimizer=optimizer, loss=\"categorical_crossentropy\", metrics=[\"accuracy\"]\n)","d3828cf0":"model.summary()","1fced370":"'''model.fit(train_generator,\n         epochs = epoch,\n         validation_data = validation_generator,\n         verbose=1,\n         callbacks = [callback])'''","d46e64d6":"!pip install --upgrade tensorflow_hub","190cc9c3":"import tensorflow_hub as hub\nimport tensorflow as tf","c273f0bf":"m = tf.keras.Sequential([\n    hub.KerasLayer(\"https:\/\/tfhub.dev\/google\/imagenet\/mobilenet_v1_100_224\/classification\/4\"),\n    tf.keras.layers.Dense(64, activation='relu'),\n    tf.keras.layers.Dense(5, activation='softmax')\n])\nm.build([None, 512, 512, 3])# Batch input shape.","c0ebc8f5":"m.summary()","f5963ff1":"m.compile(optimizer = tf.keras.optimizers.Adam(learning_rate=0.001), loss = 'categorical_crossentropy', metrics = ['accuracy'])","d543d5b8":"m.fit(train_generator,\n     epochs = epoch,\n     validation_data = validation_generator,\n     verbose=1)","bb99d804":"import numpy as np\npreds = []\nss = pd.read_csv('..\/input\/cassava-leaf-disease-classification\/sample_submission.csv')\n\nfor image in ss.image_id:\n    img = keras.preprocessing.image.load_img('..\/input\/cassava-leaf-disease-classification\/test_images\/' + image)\n    img = keras.preprocessing.image.img_to_array(img)\n    img = keras.preprocessing.image.smart_resize(img, (size, size))\n    img = np.expand_dims(img, 0)\n    prediction = model.predict(img)\n    preds.append(np.argmax(prediction))\n\nmy_submission = pd.DataFrame({'image_id': ss.image_id, 'label': preds})\nmy_submission.to_csv('submission.csv', index=False) ","7a386ca8":"my_submission","14955c2f":"#model.save('model.h5')","022ed4ba":"m.save('mobile.h5')","934e198f":"# EfficientNet B7","7863cfb1":"# MobileNet"}}