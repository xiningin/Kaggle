{"cell_type":{"d2ea415c":"code","2f855bdd":"code","7aca6a2c":"code","c067a251":"code","7586928c":"code","79212247":"code","6f413511":"code","32181ddf":"code","f7e50d8c":"code","09c07d63":"code","2fbd142d":"code","5dbe2a50":"code","f22b541f":"code","82cca6f5":"code","f1eda383":"markdown","7308dfe0":"markdown","37f8b95d":"markdown","14977a52":"markdown","21343b6b":"markdown","265a387f":"markdown","9c03874b":"markdown","10ac73f9":"markdown","6c3ba77d":"markdown","dd417554":"markdown","ae32329e":"markdown","0406f024":"markdown","ce87dd73":"markdown"},"source":{"d2ea415c":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2f855bdd":"#first we must read our data to use it \ndata=pd.read_csv(\"..\/input\/first-data\/ab.csv\",sep=\";\")\n\n#ploting our data\nplt.scatter(data.speed,data.time)\nplt.xlabel(\"speed\")\nplt.ylabel(\"time\")\nplt.title(\"speed & time\")\nplt.show()","7aca6a2c":"#define linear regression\nlinear_reg=LinearRegression()\n#with \".values\" x will be numpy type and to make shape (14,1) we must use \".reshape(-1,1)\"\n#if we don't use .reshape, we will see our data like (14,)\n\nx=data.time.values.reshape(-1,1)\ny=data.speed.values.reshape(-1,1)\n\nplt.scatter(x,y)\n\n\nlinear_reg.fit(x,y) # with this commmand we will draw the fit line of linear regression\n\narray=np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]).reshape(-1,1)\ny_head=linear_reg.predict(array)\n\nplt.plot(array,y_head,color=\"red\")\nplt.show()\n\n","c067a251":"x=data.iloc[:,[0,2]].values\ny=data.speed.values.reshape(-1,1)\nmultiple_LN=LinearRegression()\nmultiple_LN.fit(x,y)\nmultiple_LN.predict(np.array([[10,35],[5,35]]))\n","7586928c":"#we will see from the graph that will show below, linear regression is not suitable for any data\n\nfrom sklearn.linear_model import LinearRegression\npr=pd.read_csv(\"..\/input\/poly-reg\/poly_Regr.csv\",sep=\";\")\n\nx=pr.CarSpeed.values.reshape(-1,1)\ny=pr.CarCost.values.reshape(-1,1)\n\nplt.scatter(x,y)\nplt.xlabel(\"Speed-car\")\nplt.ylabel(\"Price-car\")\n\nLR=LinearRegression()\nLR.fit(x,y)\ny_head=LR.predict(x)\nplt.plot(x,y_head,color=\"red\",Label=\"linear\")\n","79212247":"#import polinomial regression\nfrom sklearn.preprocessing import PolynomialFeatures\n\npol_reg=PolynomialFeatures(degree=4)\n#with degree we can make change degree of polinom degree, mean that x^4\n\nx_poly=pol_reg.fit_transform(x)\n\nlin_reg2=LinearRegression()\nlin_reg2.fit(x_poly,y)\ny_head2=lin_reg2.predict(x_poly)\n\nplt.scatter(x,y)\nplt.xlabel(\"Speed-Car\")\nplt.ylabel(\"Cost-Car\")\n\nplt.plot(x,y_head2,color=\"green\",label=\"poly\")\nplt.legend()\nplt.show()","6f413511":"#we will see 2 dimentions of decision tree graph with the below codes\nfrom sklearn.tree import DecisionTreeRegressor\n\nDt=pd.read_csv(\"..\/input\/decs-tree\/desicionTree.csv\",sep=\";\")\n\nx=Dt.one.values.reshape(-1,1)\ny=Dt.two.values.reshape(-1,1)\n\ndec_tree=DecisionTreeRegressor()\ndec_tree.fit(x,y)\n\nx_=np.arange(min(x),max(x),0.01).reshape(-1,1)\n\ny_head=dec_tree.predict(x_)\n\nplt.scatter(x,y,color=\"red\")\nplt.plot(x_,y_head,color=\"green\")\nplt.xlabel(\"tribun\")\nplt.ylabel(\"Cost\")\nplt.show()","32181ddf":"from sklearn.ensemble import RandomForestRegressor\n\nrfr=pd.read_csv(\"..\/input\/decs-tree\/desicionTree.csv\",sep=\";\")\n\nx=rfr.one.values.reshape(-1,1) # first column of our data\ny=rfr.two.values.reshape(-1,1) # second column of our data\n\nrf=RandomForestRegressor(n_estimators=100,random_state=21) \n#n_estimators= number of trees\n\nrf.fit(x,y)\nx_= np.arange(min(x),max(x),0.01).reshape(-1,1)\ny_head=rf.predict(x_)\n\nplt.scatter(x,y,color=\"red\")\nplt.plot(x_,y_head,color=\"blue\")\nplt.xlabel(\"Tribun-Level\")\nplt.ylabel(\"Cost\")\nplt.show()\n\n","f7e50d8c":"#we will use first_data\nfrom sklearn.metrics import r2_score\ndata=pd.read_csv(\"..\/input\/first-data\/ab.csv\",sep=\";\")\n\nx=data.speed.values.reshape(-1,1)\ny=data.time.values.reshape(-1,1)\n\nlinear_reg.fit(x,y)\ny_head=linear_reg.predict(x)\n\nr2_score(y,y_head)\n#we will seee our result that is 0.92899.... , this answer is near to 1, \n#because of this, we can say that our regression model is good","09c07d63":"#first we will read our data with pandas library\nex=pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\n\n#ploting scatter graph\nx=ex.lumbar_lordosis_angle.values.reshape(-1,1)\ny=ex.sacral_slope.values.reshape(-1,1)\n\nplt.scatter(x,y,color=\"green\")\nplt.xlabel(\"lumbar_lordosis_angle\")\nplt.ylabel(\"sacral_slope\")\n\n#ploting linear regression line\nLR=LinearRegression()\nLR.fit(x,y)\ny_head=LR.predict(x)\nplt.plot(x,y_head,color=\"red\",Label=\"linear\")\nplt.show()\n\n#last step, we can evalate our linear regression data with r-square method\n\nr2_score(y,y_head)\n\n#we will see our result that is 0.35806... and this result is not good, our linear regression model is not good for this data set\n#we can make polinomial regression model, will be better for our data ","2fbd142d":"from sklearn.preprocessing import PolynomialFeatures\npol_reg=PolynomialFeatures(degree=4)\n\nex=pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\n\n#ploting scatter graph\nx=ex.lumbar_lordosis_angle.values.reshape(-1,1)\ny=ex.sacral_slope.values.reshape(-1,1)\n\nx_poly=pol_reg.fit_transform(x)\n\nlin_reg2=LinearRegression()\nlin_reg2.fit(x_poly,y)\ny_head2=lin_reg2.predict(x_poly)\n\nplt.scatter(x,y,color=\"green\")\nplt.xlabel(\"lumbar_lordosis_angle\")\nplt.ylabel(\"sacral_slope\")\n\nplt.plot(x,y_head2,color=\"red\",label=\"poly\")\nplt.legend()\nplt.show()\n\n# We will evalate our data\nr2_score(y,y_head2)\n#we will see result of regression evaluation model that is 0.444661..., it is better then linear regression model","5dbe2a50":"ex=pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_2C_weka.csv\")\n\n#ploting scatter graph\nx=ex.lumbar_lordosis_angle.values.reshape(-1,1)\ny=ex.sacral_slope.values.reshape(-1,1)\n\n#we define our model\nreg=LinearRegression()\n\n#predict space\npredict_space=np.linspace(min(x),max(x)).reshape(-1,1)\n\n#fit\nreg.fit(x,y)\n#predict\npredict=reg.predict(predict_space)\n\n#ploting\nplt.scatter(x,y)\nplt.plot(predict_space,predict,color=\"red\",linewidth=3)\nplt.xlabel(\"lumbar_lordosis_angle\")\nplt.ylabel(\"sacral_slope\")\nplt.show()\n\n#we can evaluate our result\n\nreg.score(x,y)","f22b541f":"logr=pd.read_csv(\"..\/input\/biomechanical-features-of-orthopedic-patients\/column_3C_weka.csv\")\n\n#list comprehension\nlogr[\"class\"] = [1 if each==\"Normal\" else 0 for each in logr[\"class\"]]\n\ny=logr[\"class\"].values.reshape(-1,1)\nx_data=logr.drop([\"class\"],axis=1)\n\n# %% normalization\nx = (x_data - np.min(x_data))\/(np.max(x_data)-np.min(x_data)).values\n\n# (x - min(x))\/(max(x)-min(x))\n\n# %% train test split\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T\n\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)\n\n# %% parameter initialize and sigmoid function\n# dimension = 30\ndef initialize_weights_and_bias(dimension):\n    \n    w = np.full((dimension,1),0.01)\n    b = 0.0\n    return w,b\n\n# w,b = initialize_weights_and_bias(30)\n\ndef sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head\n# print(sigmoid(0))\n\ndef forward_backward_propagation(w,b,x_train,y_train):\n    # forward propagation\n    z = np.dot(w.T,x_train) + b\n    y_head = sigmoid(z)\n    loss = y_train*np.log(y_head)-(1-y_train)*np.log(1-y_head)\n    cost = (np.sum(loss))\/x_train.shape[1]      # x_train.shape[1]  is for scaling\n    \n    # backward propagation\n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1] # x_train.shape[1]  is for scaling\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]                 # x_train.shape[1]  is for scaling\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    \n    return cost,gradients\n\n#%% Updating(learning) parameters\ndef update(w, b, x_train, y_train, learning_rate,number_of_iterarion):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    # updating(learning) parameters is number_of_iterarion times\n    for i in range(number_of_iterarion):\n        # make forward and backward propagation and find cost and gradients\n        cost,gradients = forward_backward_propagation(w,b,x_train,y_train)\n        cost_list.append(cost)\n        # lets update\n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b - learning_rate * gradients[\"derivative_bias\"]\n        if i % 10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            print (\"Cost after iteration %i: %f\" %(i, cost))\n            \n    # we update(learn) parameters weights and bias\n    parameters = {\"weight\": w,\"bias\": b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list\n\n#%%  # prediction\ndef predict(w,b,x_test):\n    # x_test is a input for forward propagation\n    z = sigmoid(np.dot(w.T,x_test)+b)\n    Y_prediction = np.zeros((1,x_test.shape[1]))\n    # if z is bigger than 0.5, our prediction is sign one (y_head=1),\n    # if z is smaller than 0.5, our prediction is sign zero (y_head=0),\n    for i in range(z.shape[1]):\n        if z[0,i]<= 0.5:\n            Y_prediction[0,i] = 0\n        else:\n            Y_prediction[0,i] = 1\n\n    return Y_prediction\n\n# %% logistic_regression\ndef logistic_regression(x_train, y_train, x_test, y_test, learning_rate ,  num_iterations):\n    # initialize\n    dimension =  x_train.shape[0]  # that is 30\n    w,b = initialize_weights_and_bias(dimension)\n    # do not change learning rate\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate,num_iterations)\n    \n    y_prediction_test = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n\n    # Print test Errors\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))\n    \nlogistic_regression(x_train, y_train, x_test, y_test,learning_rate = 1, num_iterations = 40)    \n","82cca6f5":"#Logistic Regression with Sklearn Library\n\nfrom sklearn.linear_model import LogisticRegression\n\nLR=LinearRegression()\nLR.fit(x_train.T,y_train.T)\n\nprint(\"test_accuracy {}\".format(LR.score(x_test.T,y_test.T)))\n#finished:)","f1eda383":"DECISION TREE\n\nCART= Classification and Regression Tree\n","7308dfe0":"**WHAT WILL WE SEE IN THIS STUDY**\n\n\nREGRESSION MODELS\n1. Linear Regression\n2. Multiple Linear Regression\n3. Polinominal Linear Regression\n4. Decision Tree\n5. Random Forest Regression\n\nEVALUATION REGRESSION MODELS\n    1. R-Square\n\nCLASIFICATION METODS\n    1. Logistic regression\n        A. Computation Graph\n        B. ","37f8b95d":"**EXAMPLE-3**","14977a52":"EVALUATING REGRESSION MODEL\n\nWe can check results of regression models, is it true?, how many percent does it have true\/false rating?...\n\nwe will see our predictions true\/false rate\n","21343b6b":"**LOGISTIC REGRESSION**\n\nLogistic regresion is a model that is for data which has a 2 output datas","265a387f":"R-Square evaluation method","9c03874b":"**Thank you** for looking my kernel and thank you in advance for your comment and votes\n\nThanks to DATAI Team","10ac73f9":"RANDOM FOREST REGRESSION\n\n* random forest is member of the ensemble learning\n* ensemble learning is a model that uses many alghoritm in the same time  \n* mean of the decision trees algoritms are random forest \n* we will choose some data from our data and with this chosen data wil be maden new sub-datas\nsub-datas will be decision trees and average of these decision trees will be our random forest regression","6c3ba77d":"**EXAMPLE-1**\n\n#now we will make an example about Linear regression and evaluation","dd417554":"Multiple Linear Regression","ae32329e":"**EXAMPLE-2**\n\nPOLINOMIAL REGRESSION","0406f024":"POLINOMIAL LINEAR REGRESSION\n\npolinomial linear regression is y=b0 + b1*x + b2*x^2 +...+bn*x^n ","ce87dd73":"LINEAR REGRESSION\n\nwe will find liner regression  fit line (red line)"}}