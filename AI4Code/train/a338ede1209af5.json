{"cell_type":{"62b06548":"code","f7b36d1a":"code","85e22934":"code","7de09af2":"code","95d1c01f":"code","0ed45392":"code","adfb1066":"code","d8d79991":"code","ab929c06":"code","b762bc47":"code","b256a853":"code","bd1c8927":"code","c1e5dc0d":"code","04d54eda":"code","3e1d0931":"code","4c212a58":"code","3a5b766f":"code","a80d2322":"code","f529eb70":"code","35676121":"code","f0983b1e":"code","25c6efd4":"code","ea6cdb46":"code","5cce4a19":"code","45554f60":"code","eb39b452":"code","cc470065":"code","cc8df2d0":"markdown","67154efa":"markdown","3c345a90":"markdown","fb67758f":"markdown","a5f86edd":"markdown","52f5c18f":"markdown","c4b1bf93":"markdown","1d8ee01f":"markdown","7abc6d28":"markdown","9d2ca97d":"markdown","a41f9837":"markdown","b82f474f":"markdown","517329d0":"markdown"},"source":{"62b06548":"import numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport chardet\nimport nltk\nfrom nltk.probability import FreqDist\nfrom nltk.corpus import stopwords\nfrom nltk.corpus import sentiwordnet as swn\nimport string","f7b36d1a":"with open('\/kaggle\/input\/top50spotify2019\/top50.csv', 'rb') as f:\n    result = chardet.detect(f.read())\n    \n\nraw_data = pd.read_csv(\"..\/input\/top50spotify2019\/top50.csv\", encoding=result['encoding'])\nraw_data_lyrics = pd.read_csv(\"..\/input\/songs-lyrics\/Lyrics.csv\")","85e22934":"raw_data.info()","7de09af2":"raw_data = raw_data.drop('Unnamed: 0', axis = 1 )","95d1c01f":"raw_data.shape","0ed45392":"raw_data.head(3)","adfb1066":"raw_data_lyrics.info()","d8d79991":"raw_data_lyrics.head(3)","ab929c06":"raw_data_lyrics.shape","b762bc47":"raw_data.columns = ['Track_Name','Artist_Name','Genre','BPM','Energy','Danceability','Loudness', 'Liveness', 'Valence','Length', 'Acousticness', 'Speechiness','Popularity']","b256a853":"raw_data.describe()","bd1c8927":"sns.boxplot( y = raw_data[\"Popularity\"])","c1e5dc0d":"fig, ax = plt.subplots(1,3)\nfig.subplots_adjust(hspace=0.6, wspace=0.6)\n\nsns.boxplot( y = raw_data[\"BPM\"], ax=ax[0])\nsns.boxplot( y = raw_data[\"Energy\"], ax=ax[1])\nsns.boxplot( y = raw_data[\"Danceability\"], ax=ax[2])\n\nfig.show()","04d54eda":"fig, ax = plt.subplots(1,3)\nfig.subplots_adjust(hspace=0.6, wspace=0.6)\n\nsns.boxplot( y = raw_data[\"Loudness\"], ax=ax[0])\nsns.boxplot( y = raw_data[\"Liveness\"], ax=ax[1])\nsns.boxplot( y = raw_data[\"Valence\"], ax=ax[2])\n\nfig.show()","3e1d0931":"fig, ax = plt.subplots(1,3)\nfig.subplots_adjust(hspace=0.8, wspace=0.8)\n\nsns.boxplot( y = raw_data[\"Length\"], ax=ax[0])\nsns.boxplot( y = raw_data[\"Acousticness\"], ax=ax[1])\nsns.boxplot( y = raw_data[\"Speechiness\"], ax=ax[2])\n\nfig.show()","4c212a58":"sns.catplot(y = \"Genre\", kind = \"count\",\n            palette = \"pastel\", edgecolor = \".6\",\n            data = raw_data)","3a5b766f":"sns.catplot(x = \"Popularity\", y = \"Genre\", kind = \"bar\" ,\n            palette = \"pastel\", edgecolor = \".6\",\n            data = raw_data)","a80d2322":"sns.pairplot(raw_data)","f529eb70":"dataset = pd.merge(raw_data, raw_data_lyrics, left_on='Track_Name', right_on='Track.Name')\ndel dataset['Track.Name']\ndataset['Lyrics'] = dataset['Lyrics'].astype(str)","35676121":"dataset.head(3)","f0983b1e":"dataset = dataset.drop(dataset.index[[30, 22]])","25c6efd4":"dataset['Lyrics'] = dataset['Lyrics'].str.lower().replace(r'\\n',' ')","ea6cdb46":"tokens = dataset['Lyrics'].fillna(\"\").map(nltk.word_tokenize)","5cce4a19":"stop_words_en = set(stopwords.words(\"english\"))\nstop_words_es = set(stopwords.words(\"spanish\"))","45554f60":"punctuations = list(string.punctuation)","eb39b452":"forbidden = ['(',')',\"'\",',','oh',\"'s\", 'yo',\"'ll\", 'el', \"'re\",\"'m\",\"oh-oh\",\"'d\", \"n't\", \"``\", \"ooh\", \"uah\", \"'em\", \"'ve\", \"eh\", \"pa\", \"brr\", \"yeah\"] ","cc470065":"tokens = [i for i in tokens if i not in list(stop_words_en)]\ntokens = [i for i in tokens if i not in list(stop_words_es)]\ntokens = [i for i in tokens if i not in forbidden]\n\ntokens_= []\nfor w in tokens:\n    g = []\n    for strg in w:\n        if (strg not in forbidden):\n            g.append(strg)\n    tokens_.append(g)\n","cc8df2d0":"I decide to remove the column \"Unnamed: 0\", because it is not significant for the model.","67154efa":"Most of the songs of the top 50, possess a dancebility around 70, presumably there are very small outliers values compared to the median.","3c345a90":"Sentiment?","fb67758f":"**I got stuck, any ideas?**","a5f86edd":"**Loading of Datasets**\n* raw_data -> dataset about the top 50 songs\n* raw_data_lyrics -> dataset about the lyrics of the songs","52f5c18f":"The largest number of songs in the top 50 correspond to pop genre songs","c4b1bf93":"Let's take a closer look at the \"Popularity\" graphics.  There doesn't seem to be a strong relationship between popularity and BPM, Energy, Loudness, Valence, Length.\n\nHowever, there is a relationship between Popularity and the following variables:\n\n* More Danceability More Popularity?\n* More Acousticness More Popularity?\n* More Speechiness More Popularity?\n* Less Liveness More Popularity?\n","1d8ee01f":"Most of the songs in the top 50, have a popularity around 85, presumably there are very small outliers compared to the median.","7abc6d28":"**Loading of libraries**","9d2ca97d":"Most of the songs of the top 50, possess a loudness value with around -6db, however there are atypical values close to -10db.\n\nSame is the case of liveness, where most songs have low values, where only those with high values are songs recorded live.","a41f9837":"**Target: Popularity**","b82f474f":"I eliminate 2 registers with problems in the name of the song and with repeated songs.","517329d0":"However, the pop genre does not determine the popularity of the songs since there are songs from other genres with higher values of popularity."}}