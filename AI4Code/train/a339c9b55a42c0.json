{"cell_type":{"9a306d86":"code","f77a3a2e":"code","8c28ce54":"code","f09bf475":"code","67a8eb7a":"code","8da5dc9c":"code","8165dbb8":"code","ddfc40aa":"code","3a139be5":"code","f331890b":"code","018c2073":"code","240d0c4d":"code","5974fcfd":"code","22bf1ecf":"code","c9d7ead6":"code","d6a357fc":"code","2b41d21f":"code","b5e4e22f":"code","72f75d87":"code","9514ea9f":"code","21b6fe46":"code","ceb249b4":"code","c170d9d2":"code","af5dbbf5":"code","60835d51":"code","d9d334ef":"code","56aadc45":"code","9f4892aa":"code","2c31de07":"code","7ec3f79c":"code","15ba8288":"code","978b46fe":"code","ee75dd9c":"code","82a6b751":"code","40107696":"code","8585f6ec":"code","886c3835":"code","f611f782":"code","01d1a62a":"code","43c30238":"code","64f98cb4":"code","72e68cc1":"code","979ecff2":"code","3ba45d2d":"code","5238a4db":"code","48275643":"code","4b2eaa4b":"code","220152e8":"code","3871a22f":"code","54d9cddd":"code","99db7a69":"code","e6f6b2de":"code","dabef259":"code","7e093436":"code","ab6d482b":"code","d7f42844":"markdown","d4afdb2e":"markdown","fdca4023":"markdown","95b44d14":"markdown","f4cea025":"markdown"},"source":{"9a306d86":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f77a3a2e":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n","8c28ce54":"data = pd.read_excel('\/kaggle\/input\/data.xlsx')\ndata.head()","f09bf475":"cc = pd.read_excel('\/kaggle\/input\/Country-Code.xlsx')","67a8eb7a":"df_rest = pd.merge(data,cc,on='Country Code',how='left')\ndf_rest.head()","8da5dc9c":"df_rest.columns = df_rest.columns.str.replace(' ','_')\ndf_rest.columns","8165dbb8":"df_rest.info()","ddfc40aa":"df_rest.isnull().sum() #total number of null entries per column","3a139be5":"df_rest[df_rest['Restaurant_Name'].isnull()]","f331890b":"#Since the restaurant name is missing, we dropped the record and reset the index.\ndf_rest.dropna(axis=0,subset=['Restaurant_Name'],inplace=True)\ndf_rest.reset_index(drop=True,inplace=True)\ndf_rest[df_rest['Cuisines'].isnull()]","018c2073":"#Since there were only 9 records without cuisines, we have replace the null values with Others.\ndf_rest['Cuisines'].fillna('Others',inplace=True)","240d0c4d":"df_rest.isnull().sum()\ndf_rest.info()","5974fcfd":"cntry_dist = df_rest.groupby(['Country_Code','Country']).agg( Count = ('Restaurant_ID','count'))\ncntry_dist.sort_values(by='Count',ascending=False)\n#We observe that India has then highest number of restaurants with 8651 restaurants and USA is number 2 with 434 restaurants","22bf1ecf":"cntry_dist.plot(kind='barh')","c9d7ead6":"city_dist = df_rest.groupby(['Country','City']).agg(Count = ('Restaurant_ID','count'))\ncity_dist.describe()\n#city with max restaurant has count = 5473\n#city with min restaurant has count = 1","d6a357fc":"city_dist.sort_values(by='Count',ascending=False)\n# we see that new Delhi has the maximum restaurant with 5473\n# we observe that multiple cities have only one restaurant.","2b41d21f":"min_cnt_rest = city_dist[city_dist['Count']==1]\nmin_cnt_rest.info()\nmin_cnt_rest\n#There are 46 cities in 7 different countries with 1 restaurants","b5e4e22f":"max_rate = df_rest.sort_values(by='Aggregate_rating',ascending=False).groupby(['Country','City'],as_index=False).first()\n#highest rating restaurants\n\nmin_rate = df_rest.sort_values(by='Aggregate_rating',ascending=False).groupby(['Country','City'],as_index=False).last()\n#lowest rating restaurants\n\ndf_max=max_rate[['Country','City','Restaurant_Name','Aggregate_rating']] #new dataframe created for high rated restaurants\n\ndf_min=min_rate[['Country','City','Restaurant_Name','Aggregate_rating']] #new dataframe created for low rated restaurants\n\nrating_rest=df_max.merge(df_min,left_on='City',right_on='City',how='inner') #merge into single dataframe","72f75d87":"rating_rest","9514ea9f":"rating_rest.drop(columns='Country_y',axis=1,inplace=True)\nrating_rest.columns = ['Country','City','Highest Rated Restaurant','Rating Max','Lowest Rated Restaurant','Rating Min']\nrating_rest","21b6fe46":"#since India and USA has the most number of restaurants, \n#we will try to see the distribution of restaurants ratings for these two countries.\n\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, iplot\nfrom plotly.graph_objs import * \ninit_notebook_mode()\nimport plotly.graph_objs as go #importing plotly or graphs\n","ceb249b4":"rating_rest_city_india=rating_rest[rating_rest['Country']=='India'] #storing the dataframe only for country 'India'\nrating_rest_city_india #In India\ncity=rating_rest_city_india['City'].tolist()#converting the series to list \nrate_max=rating_rest_city_india['Rating Max'].tolist()#converting the series to list\nrate_min=rating_rest_city_india['Rating Min'].tolist()#converting the series to list\nrest_name_high=rating_rest_city_india['Highest Rated Restaurant'].tolist()#converting the series to list\nrest_name_low=rating_rest_city_india['Lowest Rated Restaurant'].tolist()","c170d9d2":"stack0 = go.Bar( # GroupBarChart 1 (Highest Rated Resturant)\n    x=city,#x axis label\n    y=rate_max,# y axis label\n    text=rest_name_high,# the value of the restaurant\n    name='Highest Rated Restaurant',\n     marker=dict(\n        color='rgb(76,153,0)', #color of the bar graph's marker\n        line=dict(\n            color='rgb(76,153,0)', #color of the bar graph's line\n            width=1.5, #width of the bar graph\n        )\n    ),\n    opacity=1.0\n)\nstack1 = go.Bar( # GroupBarChart 2 (Lowest Rated Resturant)\n    x=city,\n    y=rate_min,\n    text=rest_name_low,\n    name='Lowest Rated Restaurant',\n     marker=dict(\n        color='rgb(255,0,0)',#color of the bar graph's marker\n        line=dict(\n            color='rgb(255,0,0)',#color of the bar graph's line\n            width=1.5, #width of the bar graph\n        )\n    ),\n    opacity=1.0\n)\n\ndata = [stack0,stack1]\nlayout = go.Layout(\n    legend=dict( #the layout of the graph( beautification)\n        x=0,\n        y=1,\n        traceorder='normal',\n        font=dict(\n            family='sans-serif',\n            size=12,\n            color='#000'\n        ),\n        bgcolor='#E2E2E2',\n        bordercolor='#FFFFFF',\n        borderwidth=2\n    ),\n    autosize=False,\n    width=1000, # size of the graph\n    height=450,\n    barmode='group',\n    title=\"Graph 1.1: Restaurants rating of India <br>\\\n    <i>hover with cursor to see restaurant's name<\/i>\", #title of the graph\n    plot_bgcolor='rgba(245, 246, 249, 1)',\n    xaxis=dict(tickangle=-45,title= 'City of India'), #making the graphs label inclined at 45 deg\n    yaxis= {'title': 'Rating(scale of 5)'} #label of y-axis\n)\nfig = go.Figure(data=data, layout=layout) #plotting the graph\niplot(fig, filename='style-barbar')","af5dbbf5":"#perform the same steps as above for Country='United States'\nrating_rest_city_usa = rating_rest[rating_rest['Country']=='United States']\nrating_rest_city_usa\ncityu = rating_rest_city_usa['City'].tolist()\nrate_maxu = rating_rest_city_usa['Rating Max'].tolist()\nrate_minu = rating_rest_city_usa['Rating Min'].tolist()\nrest_name_highu = rating_rest_city_usa['Highest Rated Restaurant'].tolist()\nrest_name_lowu = rating_rest_city_usa['Lowest Rated Restaurant'].tolist()","60835d51":"stack0 = go.Bar( # GroupBarChart 1 (Highest Rated Resturant)\n    x=cityu,#x axis label\n    y=rate_maxu,# y axis label\n    text=rest_name_highu,# the value of the restaurant\n    name='Highest Rated Restaurant',\n     marker=dict(\n        color='rgb(76,153,0)', #color of the bar graph's marker\n        line=dict(\n            color='rgb(76,153,0)', #color of the bar graph's line\n            width=1.5, #width of the bar graph\n        )\n    ),\n    opacity=1.0\n)\nstack1 = go.Bar( # GroupBarChart 2 (Lowest Rated Resturant)\n    x=cityu,\n    y=rate_minu,\n    text=rest_name_lowu,\n    name='Lowest Rated Restaurant',\n     marker=dict(\n        color='rgb(255,0,0)',#color of the bar graph's marker\n        line=dict(\n            color='rgb(255,0,0)',#color of the bar graph's line\n            width=1.5, #width of the bar graph\n        )\n    ),\n    opacity=1.0\n)\n\ndata = [stack0,stack1]\nlayout = go.Layout(\n    legend=dict( #the layout of the graph( beautification)\n        x=0,\n        y=1,\n        traceorder='normal',\n        font=dict(\n            family='sans-serif',\n            size=12,\n            color='#000'\n        ),\n        bgcolor='#E2E2E2',\n        bordercolor='#FFFFFF',\n        borderwidth=2\n    ),\n    autosize=False,\n    width=1000, # size of the graph\n    height=450,\n    barmode='group',\n    title=\"Graph 1.1: Restaurants rating of USA <br>\\\n    <i>hover with cursor to see restaurant's name<\/i>\", #title of the graph\n    plot_bgcolor='rgba(245, 246, 249, 1)',\n    xaxis=dict(tickangle=-45,title= 'City of USA'), #making the graphs label inclined at 45 deg\n    yaxis= {'title': 'Rating(scale of 5)'} #label of y-axis\n)\nfig = go.Figure(data=data, layout=layout) #plotting the graph\niplot(fig, filename='style-barbar')","d9d334ef":"df_rest1 = df_rest.copy()\ndf_rest1.columns","56aadc45":"dummy = ['Has_Table_booking','Has_Online_delivery']\ndf_rest1 = pd.get_dummies(df_rest1,columns=dummy,drop_first=True)\ndf_rest1.head()\n# 0 indicates 'NO'\n# 1 indicates 'YES'","9f4892aa":"#Ration between restaurants allowing table booking and those which dont\ntable_booking = df_rest1[df_rest1['Has_Table_booking_Yes']==1]['Restaurant_ID'].count()\ntable_nbooking =df_rest1[df_rest1['Has_Table_booking_Yes']==0]['Restaurant_ID'].count()\nprint('Ratio between restaurants that allow table booking vs. those that do not allow table booking: ',\n      round((table_booking\/table_nbooking),2))","2c31de07":"print(table_booking,table_nbooking)","7ec3f79c":"#Pie chart to show percentage of restaurants which allow table booking and those which don't\nlabels = 'Table Booking', 'No Table Booking'\nsizes = [table_booking,table_nbooking]\nexplode = (0.1, 0)  # only \"explode\" the 2nd slice (i.e. 'Hogs')\n\nfig1, ax1 = plt.subplots(figsize=(9,9))\nax1.pie(sizes, explode=explode, labels=labels, autopct='%1.1f%%',shadow=True, startangle=90)\nax1.set_title(\"Table Booking vs No Table Booking\")\nax1.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.\n\nplt.show()","15ba8288":"#Percentage of restaurant that has online delivery\nrest_od = df_rest1[df_rest1['Has_Online_delivery_Yes'] == 1]['Restaurant_ID'].count()\nrest_nod = df_rest1[df_rest1['Has_Online_delivery_Yes'] == 0]['Restaurant_ID'].count()\nprint('Percentage of restaurants providing online delivery : {} %'.format((round(rest_od\/len(df_rest1),3)*100)))","978b46fe":"#pie chart to show percentages of restaurants allowing online delivery vs those which do not have online delivery\nlabels = 'Online Delivery','No Online Delivery'\nsize = [rest_od,rest_nod]\nexplode = (0.1,0)\nfig1,ax1 = plt.subplots(figsize=(9,9))\nax1.pie(size,explode=explode,labels=labels,autopct='%1.1f%%',shadow=True,startangle=90)\nax1.set_title(\"Online Delivery vs No Online Delivery\")\nax1.axis('equal')\nplt.show()","ee75dd9c":"rest_deliver = df_rest1[df_rest1['Has_Table_booking_Yes'] == 1]['Votes'].sum()\nrest_ndeliver = df_rest1[df_rest1['Has_Table_booking_Yes'] == 0]['Votes'].sum()\nprint('Difference in number of votes for restaurants that deliver and dont deliver: ',abs((rest_deliver - rest_ndeliver)))","82a6b751":"labels = 'Online Delivery','No Online Delivery'\nsize = [rest_ndeliver,rest_deliver]\nexplode = (0,0.1)\nfig1,ax1 = plt.subplots(figsize=(9,9))\nax1.pie(size,explode=explode,labels=labels,autopct='%1.1f%%',shadow=True,startangle=90)\nax1.set_title(\"Votes: Online Delivery vs Votes:No Online Delivery\")\nax1.axis('equal')\nplt.show()\n#out of the total votes about 27.3% votes were given to restaurants that dont have online delivery option\n#out of the total votes about 72.7% votes were given to restaurants that dont have online delivery option\n#This clearly shows that restaurants that have online delivery are more likely to get a vote(feedback) ","40107696":"df_rest.columns\ncuisines = df_rest['Cuisines'].apply(lambda x: pd.Series(x.split(',')))","8585f6ec":"cuisines.columns = ['Cuisine_1','Cuisine_2','Cuisine_3','Cuisine_4','Cuisine_5','Cuisine_6','Cuisine_7','Cuisine_8']\ncuisines.tail()","886c3835":"df_cuisines = pd.concat([df_rest,cuisines],axis=1)\ndf_cuisines.head()","f611f782":"cuisine_loc = pd.DataFrame(df_cuisines[['Country','City','Locality_Verbose','Cuisine_1','Cuisine_2','Cuisine_3',\n                                        'Cuisine_4','Cuisine_5','Cuisine_6','Cuisine_7','Cuisine_8']])","01d1a62a":"cuisine_loc_stack=pd.DataFrame(cuisine_loc.stack()) #stacking the columns \ncuisine_loc.head()","43c30238":"keys = [c for c in cuisine_loc  if c.startswith('Cuisine')]\na=pd.melt(cuisine_loc, id_vars='Locality_Verbose', value_vars=keys, value_name='Cuisines') \n#melting the stack into one row\nmax_rate=pd.DataFrame(a.groupby(by=['Locality_Verbose','variable','Cuisines']).size().reset_index())\n#find the highest restuarant in the city\nmax_rate\ndel max_rate['variable']\nmax_rate.columns=['Locality_Verbose','Cuisines','Count']\nmax_rate.head()","64f98cb4":"#find the highest restuarant in the city\nloc=max_rate.sort_values('Count', ascending=False).groupby(by=['Locality_Verbose'],as_index=False).first()\nloc.head()","72e68cc1":"rating_res=loc.merge(df_rest,left_on='Locality_Verbose',right_on='Locality_Verbose',how='inner') \n#inner join to merge the two dataframe\ndf=pd.DataFrame(rating_res[['Country','City','Locality_Verbose','Cuisines_x','Count']]) \n#making a dataframe of rating restaurant\ncountry=rating_res.sort_values('Count', ascending=False).groupby(by=['Country'],as_index=False).first()\n#grouping the data by country code\ncon=pd.DataFrame(country[['Country','City','Locality','Cuisines_x','Count']])\ncon.columns=['Country','City','Locality','Cuisines','Number of restaurants in the country']\n#renaming the columns\ncon1=con.sort_values('Number of restaurants in the country', ascending=False) \n#sorting the restaurants on the basis of the number of restaurants in the country\ncon1[:10]\nfinal_con=con1.drop(con1.index[[7,10]])","979ecff2":"final_con","3ba45d2d":"loc_list=final_con['City'] #converting the series to dataframe\na_list=loc_list.tolist()\n\ncui_list=final_con['Cuisines']# converting the series to dataframe\nb_list=cui_list.tolist()\n\ncount_list=final_con['Number of restaurants in the country']# converting the series to dataframe\nc_list=count_list.tolist()","5238a4db":"trace0 = go.Bar(# BarChart 1 (Popular cuisines of the country)\n    x=b_list, #x axis label\n    y=c_list, # y axis label\n    text=loc_list, # location of the cuisine\n    name='Popular Cuisine',\n     marker=dict(\n        color=['rgb(255,69,0)',\n                'rgb(255,140,0)',\n                'rgb(165,42,42)',\n                'rgb(220,20,60)',\n                'rgb(255,0,0)',\n                'rgb(255,99,71)',\n                'rgb(255,127,80)',\n                'rgb(205,92,92)',\n                'rgb(240,128,128)',\n                'rgb(233,150,122)',\n                'rgb(250,128,114)',\n                'rgb(255,160,122)'],\n        line=dict(\n            color='rgb(255,0,0)',#color of the bar graph's line\n            width=1.5, #width of the bar graph\n        )\n    ),\n    opacity=1.0\n)\ndata = [trace0] \nlayout = go.Layout(\n\n    legend=dict( #the layout of the graph( beautification)\n        x=0,\n        y=1,\n        traceorder='normal',\n        font=dict(\n            family='sans-serif',\n            size=12,\n            color='#000'\n        ),\n        bgcolor='#E2E2E2',\n        bordercolor='#FFFFFF',\n        borderwidth=20,\n    ),\n    autosize=False,\n    width=1000, # size of the graph\n    height=450,\n    margin=Margin(r=20, l=300,\n                  b=75, t=125),\n    title=\"Graph 2.1 : Most popular cuisines in the World<br>\\\n    <i>hover with cursor to see location in the country where they are most popular <\/i>\", #title of the graph\n    plot_bgcolor='rgba(245, 246, 249, 1)',\n    xaxis=dict(tickangle=-45,title= '<br>Cuisine<br>',mirror=True,showticklabels=True), \n    #making the graphs label inclined at 45 deg\n    yaxis= {'title': 'Number of restaurants offering<br> cuisine in the location'},#label of y-axis\n)\nfig = go.Figure(data=data, layout=layout)#plotting the graph\niplot(fig)","48275643":"rest_cuisine = pd.DataFrame(df_cuisines[['Restaurant_Name','City','Cuisine_1','Cuisine_2','Cuisine_3','Cuisine_4',\n                                         'Cuisine_5','Cuisine_6','Cuisine_7','Cuisine_8']])\nrest_cuisine_stack=pd.DataFrame(rest_cuisine.stack()) #stacking the columns \nrest_cuisine.head()","4b2eaa4b":"keys1 = [c for c in rest_cuisine  if c.startswith('Cuisine')]\nb=pd.melt(rest_cuisine, id_vars='Restaurant_Name', value_vars=keys, value_name='Cuisines') \n#melting the stack into one row\nmax_rate1=pd.DataFrame(b.groupby(by=['Restaurant_Name','variable','Cuisines']).size().reset_index()) \n#find the highest restuarant in the city\nmax_rate1\ndel max_rate1['variable']\nmax_rate1.columns=['Restaurant_Name','Cuisines','Count']\nmax_rate1.head(20)","220152e8":"max_rate1.sort_values('Count',ascending=False)\n#Cafe Coffee Day has the max number of cuisines and The least number of cuisines in a resaurant is 1.","3871a22f":"rating = df_rest1[['Restaurant_ID','Restaurant_Name','Country','City','Aggregate_rating','Average_Cost_for_two','Votes','Price_range','Has_Table_booking_Yes','Has_Online_delivery_Yes']]","54d9cddd":"rating = rating.merge(max_rate1,left_on='Restaurant_Name',right_on='Restaurant_Name',how='left')\nrating","99db7a69":"sns.regplot(x='Count',y='Aggregate_rating',data=rating)\nrating[[\"Count\", \"Aggregate_rating\"]].corr()\n#Number of cuisines is not a good factor to decide the rating of a restaurant","e6f6b2de":"sns.regplot(x='Average_Cost_for_two',y='Aggregate_rating',data=rating)\nrating[[\"Average_Cost_for_two\", \"Aggregate_rating\"]].corr()\n#Average cost for two is a weak positive factor to decide the rating of a restaurant","dabef259":"sns.regplot(x='Votes',y='Aggregate_rating',data=rating)\nrating[['Votes','Aggregate_rating']].corr()\n##Average cost for two can be a factor to decide the rating of a restaurant","7e093436":"abc = df_rest1[df_rest1['Has_Online_delivery_Yes'] == 1]['Aggregate_rating'].mean()\nxyz = df_rest1[df_rest1['Has_Online_delivery_Yes'] == 0]['Aggregate_rating'].mean()\nsns.regplot(x='Price_range',y='Aggregate_rating',data=rating)\nrating[['Price_range','Aggregate_rating']].corr()\n##Price range can be a factor to decide the rating of a restaurant","ab6d482b":"sns.regplot(x='Has_Table_booking_Yes',y='Aggregate_rating',data=rating)\nrating[['Has_Table_booking_Yes','Aggregate_rating']].corr()\n##Table booking can be a factor to decide the rating of a restaurant","d7f42844":"EDA -IV\n* What are the top 10 cuisines served across cities?\n* What is the maximum and minimum no. of cuisines that a restaurant serves?","d4afdb2e":"EDA - III\u00b6\n* Ratio between restaurants that allow table booking vs that do not allow table booking.\n* Percentage of restaurants providing online delivery.\n* Difference in no. of votes for the restaurants that deliver and the restaurant that don\u2019t.","fdca4023":"EDA-1\n* Explore the geographical distribution of the restaurants.\n* Finding out the cities with maximum \/ minimum number of restaurants","95b44d14":"EDA-II\n* Explore how ratings are distributed overall\n* Evaluate the Highest Rated and Lowest Rated Restaurant of the City in all the countries.","f4cea025":"We see that there is no single variable that affects the rating strongly, however table booking,online delivery,avg price for two and price range, number of votes do play a part in affecting the rating of a restaurant."}}