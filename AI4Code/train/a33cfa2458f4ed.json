{"cell_type":{"c17b4504":"code","3e823841":"code","b08110dd":"code","d523dff1":"code","bc8b0023":"code","1462855f":"code","f4850df5":"code","57560993":"code","bc2b1d1d":"code","ba7ab2c3":"code","32fed1b3":"code","ae96c28b":"code","611fd8ee":"code","fba81f80":"code","b223107c":"code","2d3c2ae2":"code","2e9f2a75":"code","7b19ab15":"code","d9142dfc":"code","e2c9b5a4":"code","3e70f599":"code","9c2c563a":"code","23d0821f":"code","e1912672":"code","17b35603":"code","066db87e":"code","ad5d3a9f":"code","5ca3eb59":"code","4a31b4d8":"code","c916f937":"code","3788ec27":"code","146a7c46":"code","a0e5683e":"code","8cffedc3":"code","76f2f574":"code","115dee52":"code","b75ae7d9":"code","8ec89145":"code","818e318c":"code","b14fb5c6":"code","fa2ee9e8":"code","f3b59b41":"code","9d0e028b":"code","dbe17336":"code","495a27f5":"code","8e3b2469":"code","882b3626":"code","f068de25":"code","e2cf0b8d":"code","b665ddce":"markdown","dc013a3e":"markdown","8eda1761":"markdown","01906c51":"markdown","70197203":"markdown","ca95a8b1":"markdown","3a5211a7":"markdown","6506c90f":"markdown","36f7fdbd":"markdown","ac689cd6":"markdown","3021f12f":"markdown","068076b7":"markdown","30c1ded7":"markdown","e6284ba9":"markdown","36d3b320":"markdown","47141b6f":"markdown","a952d337":"markdown","8b934f17":"markdown","56047b20":"markdown","ac2af932":"markdown","43f8b4e1":"markdown","d5290fca":"markdown"},"source":{"c17b4504":"import warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np\nimport pandas as pd\n\nimport seaborn as sns\nimport plotly.express as px\n\nimport matplotlib.pyplot as plt\n%matplotlib inline","3e823841":"df = pd.read_csv('\/kaggle\/input\/used-cars-dataset-from-cardekhocom\/cardekho_updated.csv')\n\nprint(\"Data frame has {}rows and {}columns\".format(df.shape[0],df.shape[1]))\ndf.head()","b08110dd":"df.isnull().sum()","d523dff1":"# dropping all except \"new_price\"\n\ndf.dropna(subset=['full_name', 'selling_price', 'year', 'seller_type','km_driven', 'fuel_type', 'transmission_type', 'mileage', 'engine','max_power', 'seats'],how='any',axis=0, inplace=True)\ndf = df.rename(columns={\"new-price\":\"new_price\"})\ndf.shape","bc8b0023":"dataset_year=2021\ndf['vehicle_age'] = dataset_year - df['year']\ndf.drop(['year'],axis=1, inplace=True)\n\ndf.head(1)","1462855f":"# Creating brand\ndf[\"full_name\"] = df[\"full_name\"].str.replace(\" New \", \" \")\ndf['brand']=df.full_name.str.split(' ').str.get(0)\ndf.loc[(df.brand == 'Land'),'brand']='Land Rover'\n\n# Creating model\ndf['model']=df['full_name'].apply(lambda x: ' '.join(x.split(' ')[1:3]) if 'Dzire' in x else ''.join(x.split(' ')[1]))","f4850df5":"# Renaming car models\n\ndf.loc[(df.model == 'Wagon'),'model'] = 'Wagon R'\ndf.loc[(df.model == 'E'),'model'] = 'E Verito'\ndf.loc[(df.model == 'Land'),'model'] = 'Land Cruiser'","57560993":"# Dropping \"full_name\"\n\ndf.drop('full_name',axis = 1, inplace=True)","bc2b1d1d":"# Creating column \"car_name\"\n\ndf['car_name'] = df[\"brand\"] +\" \"+ df[\"model\"]\ndf_unique= pd.DataFrame(df['car_name'].value_counts())\ndf.head(1)","ba7ab2c3":"df['new_price1']=df['new_price'].str.lstrip('New Car (On-Road Price) : Rs.')\ndf.new_price1 = df.new_price1.str.replace('[*,,]', '')\n\ndf[['new_price1','unit']] = df.new_price1.str.split(\" \",expand=True)\n\ndf[['min_cost_price','max_cost_price']] = df.new_price1.str.split(\"-\",expand=True)\ndf.min_cost_price = df.min_cost_price.str.replace('[A-Za-z]', '')\ndf.max_cost_price = df.max_cost_price.str.replace('[A-Za-z]', '')\n\ndf.drop(['new_price1'],axis=1)\ndf.head(1)","32fed1b3":"# Changing datatype into float\n\ndf['max_cost_price'] = df['max_cost_price'].astype('float64', errors = 'raise')\ndf['min_cost_price'] = df['min_cost_price'].astype('float64', errors = 'raise')","ae96c28b":"# Converting cost price to appropriate units\n\ndf.loc[df.unit == \"Lakh\", 'min_cost_price'] = df['min_cost_price']*100000.0\ndf.loc[df.unit == \"Lakh\", 'max_cost_price'] = df['max_cost_price']*100000.0\n\ndf.loc[df.unit == \"Cr\", 'min_cost_price'] = df['min_cost_price']*10000000.0\ndf.loc[df.unit == \"Cr\", 'max_cost_price'] = df['max_cost_price']*10000000.0\n\ndf.drop(['unit','new_price1'],axis=1, inplace=True)","611fd8ee":"# Filling cars whose \"max_cost_price\" is missing with \"min_cost_price\"\n\ndf['max_cost_price'] = df['max_cost_price'].fillna(df['min_cost_price'])\ndf.drop(df[(df['max_cost_price'])==(df['min_cost_price'])].index, inplace=True)","fba81f80":"#Filling missing cost price of cars with the mean of their respective car models\n\ndf['min_cost_price'] = df['min_cost_price'].fillna(df.groupby(['car_name'])['min_cost_price'].transform('mean'))\ndf['max_cost_price'] = df['max_cost_price'].fillna(df.groupby(['car_name'])['max_cost_price'].transform('mean'))","b223107c":"df.selling_price = df.selling_price.str.replace('[*,,]', '')\ndf[['selling_price','unit']] = df.selling_price.str.split(expand=True)\ndf['selling_price'] = df['selling_price'].astype('float64', errors = 'raise')\n\ndf.head(1)","2d3c2ae2":"df.loc[df.unit == \"Lakh\", 'selling_price'] = df['selling_price']*100000.0\ndf.loc[df.unit == \"Cr\", 'selling_price'] = df['selling_price']*10000000.0\n\n\ndf=df.drop(['unit','new_price'],axis=1)\n\ndf.head()","2e9f2a75":"rep_cols = [ \"mileage\",\"km_driven\",\"engine\",\"max_power\",\"seats\"]\ndf[rep_cols] = df[rep_cols].replace(r'[^\\d.]+', '', regex=True)\ndf[rep_cols]= df[rep_cols].replace('', '0', regex=True)","7b19ab15":"# Dropping null values\ndf.dropna(how='any',axis=0, inplace=True)\n\n# Changing datatype to float\ndf= df.astype({'km_driven': 'float64', 'mileage': 'float64', 'engine': 'float64', 'max_power': 'float64', 'seats': 'float64','min_cost_price': 'float64','max_cost_price': 'float64'})\nprint(df.dtypes)","d9142dfc":"# Reordering columns\n\ncol_order=['car_name','brand','model','min_cost_price','max_cost_price','vehicle_age','km_driven','seller_type','fuel_type','transmission_type','mileage','engine','max_power','seats','selling_price']\ndf=df[col_order]\ndf.head(1)","e2c9b5a4":"df.describe()","3e70f599":"# Dropping zero valued cells\n\ndf.drop(df[df['seats'] == 0].index, inplace = True)\ndf.drop(df[df['mileage'] == 0].index, inplace = True)\ndf.drop(df[df['km_driven'] == 0].index, inplace = True)\ndf.drop(df[df['vehicle_age'] == 0].index, inplace = True)\ndf.drop(df[df['max_power'] == 0].index, inplace = True)","9c2c563a":"df.info()","23d0821f":"# Dropping out of boundary values\n\ndf.drop(df[(df['vehicle_age'] > 20) ].index, inplace = True)\ndf.drop(df[df['km_driven'] >300000 ].index, inplace = True)","e1912672":"# Removing the outliers using Interquartile Range for all columns\n\ndef removeOutliers(data, col):\n    Q3 = np.quantile(data[col], 0.75)\n    Q1 = np.quantile(data[col], 0.25)\n    IQR = Q3 - Q1\n      \n    print(\"IQR value for column %s is: %s\" % (col, IQR))\n    global outlier_free_list\n    global filtered_data\n      \n    lower_range = Q1 - 1.5 * IQR\n    upper_range = Q3 + 1.5 * IQR\n    outlier_free_list = [x for x in data[col] if (\n        (x > lower_range) & (x < upper_range))]\n    filtered_data = data.loc[data[col].isin(outlier_free_list)]\n\nout_columns = df[['km_driven','vehicle_age','mileage','engine','max_power','seats','selling_price','min_cost_price','max_cost_price']]  \nfor i in out_columns:\n    removeOutliers(df, i)\n  \n# Assigning filtered data back to our original variable'\n\ndf = filtered_data\nprint(\"Shape of data after outlier removal is: \", df.shape)","17b35603":"df['avg_cost_price']=(df['min_cost_price']+df['max_cost_price'])\/2","066db87e":"df=df.drop(['min_cost_price','max_cost_price'], axis=1)","ad5d3a9f":"df['avg_cost_price']=df['avg_cost_price']\/100000\ndf['selling_price']=df['selling_price']\/100000","5ca3eb59":"df.head()","4a31b4d8":"top_sell = df.sort_values(by='avg_cost_price', ascending=False)\n\nax = plt.subplots(figsize=(20,30))\n  \n# plotting columns\nax = sns.barplot(x=top_sell.avg_cost_price, y=top_sell.car_name, color='violet')\nax = sns.barplot(x=top_sell.selling_price, y=top_sell.car_name,color='orange')\n  \n# renaming the axes\nax.set(xlabel=\"Avg CostPrice & SellingPrice\", ylabel=\"Car Name\")\n  \n# visulaizing illustration\nplt.show()","c916f937":"# Dropping Hyundai Aura Hyundai Aura\ndf.drop(df[df['car_name']=='Hyundai Aura'].index, axis=0,  inplace=True,)","3788ec27":"figure = plt.figure(figsize=(8,10))\nsns.boxplot(x='seller_type',y='selling_price', data=df, palette=\"Set2\")","146a7c46":"figure = plt.figure(figsize=(8,10))\nsns.countplot(x='seller_type', data=df, palette=\"Set2\")","a0e5683e":"figure = plt.figure(figsize=(8,10))\nsns.countplot(x='fuel_type', data=df, palette=\"Set2\")","8cffedc3":"plt.figure(figsize=(20,10))\nsns.lineplot(x='vehicle_age',y='selling_price',data=df)\nplt.ticklabel_format(style='plain')","76f2f574":"plt.figure(figsize=(40,40))\nfig = px.scatter_3d(df, x='vehicle_age', y='km_driven', z='selling_price', color='brand')\nfig.show()","115dee52":"vehicles=df.copy()\nvehicles=vehicles.drop(['car_name'], axis=1)\nvehicles.head()","b75ae7d9":"sns.heatmap(vehicles.corr(), annot=True, cmap=\"RdBu\")\nplt.show()","8ec89145":"numeric = vehicles[vehicles.select_dtypes(include=['number']).columns]\nnumeric = numeric.drop(['selling_price'],axis=1)\nnumy=vehicles['selling_price']","818e318c":"vehicles1=vehicles.copy()","b14fb5c6":"vehicles1.head()","fa2ee9e8":"vehicles1=pd.get_dummies(vehicles1,columns=['fuel_type','transmission_type','seller_type','brand','model'],drop_first=True)\nvehicles1.head()","f3b59b41":"from sklearn.model_selection import train_test_split\n\nX=vehicles1.drop(columns=['selling_price'],axis=1)\ny=vehicles1['selling_price']\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=101)","9d0e028b":"print(\"x train: \",X_train.shape)\nprint(\"x test: \",X_test.shape)\nprint(\"y train: \",y_train.shape)\nprint(\"y test: \",y_test.shape)","dbe17336":"from statsmodels.api import OLS\n\nmodel= OLS(y_train, X_train).fit()\nprint(model.summary())","495a27f5":"from sklearn.metrics import r2_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import metrics\n\nCV = []\nR2_train = []\nR2_test = []\n\ndef car_pred_model(model,model_name):\n    # Training model\n    model.fit(X_train,y_train)\n            \n    # R2 score of train set\n    y_pred_train = model.predict(X_train)\n    R2_train_model = r2_score(y_train,y_pred_train)\n    R2_train.append(round(R2_train_model,2))\n    \n    # R2 score of test set\n    y_pred_test = model.predict(X_test)\n    R2_test_model = r2_score(y_test,y_pred_test)\n    R2_test.append(round(R2_test_model,2))\n    \n    # R2 mean of train set using Cross validation\n    cross_val = cross_val_score(model ,X_train ,y_train ,cv=3)\n    cv_mean = cross_val.mean()\n    CV.append(round(cv_mean,2))\n    \n    # MAE\n    mae = metrics.mean_absolute_error(y_test,y_pred_test)\n    \n    # MSE\n    mse = metrics.mean_squared_error(y_test,y_pred_test)\n    \n    \n    # Printing results\n    print(\"Train R2-score :\",round(R2_train_model,2))\n    print(\"Test R2-score :\",round(R2_test_model,2))\n    print(\"Train CV scores :\",cross_val)\n    print(\"Train CV mean :\",round(cv_mean,2))\n    print(\"MAE :\", round(mae,5))\n    print(\"MSE :\", round(mse,5))\n    \n    # Plotting Graphs \n    # Residual Plot of train data\n    fig, ax = plt.subplots(1,2,figsize = (10,4))\n    ax[0].set_title('Residual Plot of Train samples')\n    sns.distplot((y_train-y_pred_train),hist = False,ax = ax[0])\n    ax[0].set_xlabel('y_train - y_pred_train')\n    \n    # Y_test vs Y_train scatter plot\n    ax[1].set_title('y_test vs y_pred_test')\n#     ax[1].scatter(x = y_test, y = y_pred_test)\n    sns.regplot(x=y_test, y=y_pred_test, robust=True, ci=None)\n    ax[1].set_xlabel('y_test')\n    ax[1].set_ylabel('y_pred_test')\n    \n    plt.show()","8e3b2469":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\ncar_pred_model(lr,\"Linear_regressor.pkl\")","882b3626":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Creating Ridge model object\nrg = Ridge()\n# range of alpha \nalpha = np.logspace(-3,3,num=14)\n\n# Creating RandomizedSearchCV to find the best estimator of hyperparameter\nrg_rs = RandomizedSearchCV(estimator = rg, param_distributions = dict(alpha=alpha))\n\ncar_pred_model(rg_rs,\"ridge.pkl\")","f068de25":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import RandomizedSearchCV\n\nls = Lasso()\nalpha = np.logspace(-3,3,num=14) # range for alpha\n\nls_rs = RandomizedSearchCV(estimator = ls, param_distributions = dict(alpha=alpha))\n\ncar_pred_model(ls_rs,\"lasso.pkl\")","e2cf0b8d":"Technique = [\"LinearRegression\",\"Ridge\",\"Lasso\"]\nresults=pd.DataFrame({'Model': Technique,'R Squared(Train)': R2_train,'R Squared(Test)': R2_test,'CV score mean(Train)': CV})\ndisplay(results)","b665ddce":"> ### Count of Seller Types","dc013a3e":"> ### Creating column **\"vehicle_age\"** from **\"year\"**","8eda1761":"> ### SellerType vs SellingPrice","01906c51":"> ### Creating column **\"brand\"** & **\"model\"** from **\"full_name\"**","70197203":"![](http:\/\/cdn.dribbble.com\/users\/1239720\/screenshots\/3506944\/car_mg.gif)","ca95a8b1":"> ### CarName vs CostPrice","3a5211a7":"> ### Converting **\"selling_price\"** to appropriate units","6506c90f":"<div>  \n<h2><center style=\"background-color:#0093AF; color:white;\"><strong>Removing Outliers<\/strong><\/center><\/h2>\n<\/div>","36f7fdbd":"<div>  \n<h2><center style=\"background-color:#0093AF; color:white;\"><strong>Exploratory Data Analysis<\/strong><\/center><\/h2>\n<\/div>","ac689cd6":"<div>  \n<h2><center style=\"background-color:#0093AF; color:white;\"><strong>Data Cleaning and Preprocessing<\/strong><\/center><\/h2>\n<\/div>","3021f12f":"<div>  \n<h3><center style=\"background-color:#0093AF; color:white;\"><strong>Importing Libraries<\/strong><\/center><\/h3>\n<\/div>","068076b7":"<div class=\"alert alert-warning\" color=black>\n<p>I've always wondered what drives the price of a car. Superficially, we know that the car's brand and it's features but what is the real crux that decides the cost of a particular car.\n<br>\nA car dealer may emphasis on the car's features and convince you to buy it. The rela problem arises when you have to sell the car or buy a used car. How do you judge the price of the car?\n<br><br>\nNow let's delve into the factors that govern the pricing!\n<\/p>\n<\/div>","30c1ded7":"> ### Dropping null values","e6284ba9":"> ### SellingPrice vs VehicleAge vs KilometersDriven","36d3b320":"> ### Converting **\"new_price\"** into **\"min_price\"** & **\"max_price\"**","47141b6f":"> ### Count of Fuel Types","a952d337":"<div>  \n<h1><center style=\"background-color:#0093AF; color:white;\"><strong>Used Car Price Prediction in India \ud83d\ude97<\/strong><\/center><\/h1>\n<\/div>","8b934f17":"<div>  \n<h2><center style=\"background-color:#0093AF; color:white;\"><strong>Model Creation<\/strong><\/center><\/h2>\n<\/div>","56047b20":"<div>  \n<h2><center style=\"background-color:#0093AF; color:white;\"><strong>Final Preprocessing<\/strong><\/center><\/h2>\n<\/div>","ac2af932":"> ### Converting **\"min_cost_price\"** and **\"max_cost_price\"** to **\"avg_cost_price\"** using mean","43f8b4e1":"> ### Removing unwanted non-numeric data from columns","d5290fca":"> ### SellingPrice vs VehicleAge"}}