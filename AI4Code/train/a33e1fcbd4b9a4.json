{"cell_type":{"5746e980":"code","28a3e6cd":"code","f3371d3d":"code","fb0245c6":"code","1fd86939":"code","2a428758":"code","2d5c110d":"code","800f890c":"code","027166f2":"code","2f4eb98a":"code","5c66d444":"code","d44fb575":"code","b074287e":"code","91948779":"markdown","5a156cba":"markdown"},"source":{"5746e980":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","28a3e6cd":"train_data = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntrain_data.head()","f3371d3d":"test_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_data.head()","fb0245c6":"women = train_data.loc[train_data.Sex == 'female'][\"Survived\"]\nrate_women = sum(women)\/len(women)\n\nprint(\"% of women who survived:\", rate_women)","1fd86939":"men = train_data.loc[train_data.Sex == 'male'][\"Survived\"]\nrate_men = sum(men)\/len(men)\n\nprint(\"% of men who survived:\", rate_men)","2a428758":"# Searching missing data\n\nprint(\"train_data missing\")\nmissing_val_count_by_column = (train_data.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])\n\nprint(\"\\n\")\nprint(\"test_data missing\")\nmissing_val_count_by_column = (test_data.isnull().sum())\nprint(missing_val_count_by_column[missing_val_count_by_column > 0])","2d5c110d":"train_data","800f890c":"# Age column\n# NaN -> \ud3c9\uade0\uc73c\ub85c \ucc44\uc6b0\uae30\n\n#new_train_data = train_data.copy()\n\nmean = 29.7\n\ntrain_data[\"Age\"].fillna(value=mean, inplace=True)\nprint(train_data[\"Age\"])\n\ntest_data[\"Age\"].fillna(value=mean, inplace=True)\nprint(test_data[\"Age\"])\n","027166f2":"# Fare column\n# NaN -> \ud3c9\uade0\uc73c\ub85c \ucc44\uc6b0\uae30\n# Class 1 \ud3c9\uade0 : 84.15\n# Class 2 \ud3c9\uade0 : 20.66\n# Class 3 \ud3c9\uade0 : 13.68\n\n# test data\uc5d0 1\uac1c missing\n\ntest_data[test_data[\"Fare\"].isnull()]\ntest_data[\"Fare\"][152] = 13.68","2f4eb98a":"y = train_data[\"Survived\"]","5c66d444":"features = [\"Pclass\", \"Sex\", \"Age\", \"SibSp\", \"Parch\", \"Fare\"]\nX = pd.get_dummies(train_data[features])\nX_test = pd.get_dummies(test_data[features])","d44fb575":"from sklearn.svm import SVC # support vector classification\nimport matplotlib.pyplot as plt\n\nmodel=SVC(kernel='rbf',gamma='auto')\nmodel.fit(X,y)\n#plt.scatter(X[\"Fare\"],X[\"Pclass\"],c=model.predict(X))\nplt.scatter(X[\"Age\"],X[\"Fare\"],c=model.predict(X))\nmodel.score(X,y)\n","b074287e":"predictions = model.predict(X_test)\n\noutput = pd.DataFrame({'PassengerId': test_data.PassengerId, 'Survived': predictions})\noutput.to_csv('my_submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")","91948779":"### Imputation","5a156cba":"# Model\n### train"}}