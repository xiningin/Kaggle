{"cell_type":{"8390192c":"code","6087da42":"code","89b37928":"code","9e1df168":"code","e9bd01ee":"code","6b8e7757":"code","36ca0745":"code","8aab3fb3":"code","f435f055":"code","8c760132":"code","a5e70f39":"code","a3f26344":"code","bd96027a":"code","c2824bab":"code","03457add":"code","ef0b01f4":"code","3c64ac5a":"code","cd276e73":"code","8b86af3c":"code","8dc1c66d":"code","0923fb58":"code","1fec13d5":"code","6dc62ab3":"code","edbe7d2a":"code","682accd7":"code","beb4fe48":"code","df44ce9b":"code","d7d6ab61":"code","474f47c1":"code","fd39f785":"code","7322ef87":"code","e7b5fc80":"code","a3605ea2":"code","e50401f4":"code","343bc5d1":"code","4705132b":"code","602988e4":"code","2799e348":"code","06ce9b8d":"code","52c18c68":"code","7cdc38dd":"code","20bea542":"code","0610d37a":"code","945c6422":"code","b8a263eb":"code","6f50de2a":"code","07b7f13e":"code","7ea8f5fb":"code","062d9964":"code","eccb1c96":"code","a4ff0801":"code","d9c519f9":"code","51248090":"code","b3c17d8d":"code","0d66c1bf":"code","0e353683":"code","aae7eeae":"code","dcb43c14":"code","329c8cf3":"code","62e0c548":"code","0337cb73":"code","e555f5ae":"code","fe20f9e8":"code","f77a0d46":"code","276cf848":"code","fde17024":"code","cf1ce27e":"code","ca912fbf":"code","80831056":"code","42a2e35f":"code","e0ed8d59":"code","f7cca922":"code","935cfc53":"code","4009a6f5":"markdown","38a377fe":"markdown","760f1a28":"markdown","7da72cbd":"markdown","eb6c9ef1":"markdown","e82e0be3":"markdown","afe9c1f7":"markdown"},"source":{"8390192c":"#Importing the essential libraries \nimport pandas as pd\nimport numpy as np\n\n#Importing the graph plotting libraries  \nfrom matplotlib import pyplot as plt\n%matplotlib inline\nimport matplotlib \nmatplotlib.rcParams[\"figure.figsize\"] = (20,10)\n\nimport seaborn as sns\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","6087da42":"pwd","89b37928":"#Loading the data into data frame\n\ndf = pd.read_csv(\"..\/input\/zomato-bangalore-restaurants\/zomato.csv\")\ndf.head()","9e1df168":"df.shape","e9bd01ee":"df.columns","6b8e7757":"df['online_order'].unique()","36ca0745":"df['book_table'].unique()","8aab3fb3":"len(df['location'].unique())","f435f055":"len(df['rest_type'].unique())","8c760132":"df['approx_cost(for two people)'].unique()","a5e70f39":"len(df['approx_cost(for two people)'].unique())","a3f26344":"df['listed_in(type)'].unique()","bd96027a":"len(df['listed_in(type)'].unique())","c2824bab":"df['listed_in(city)'].unique()","03457add":"len(df['listed_in(city)'].unique())","ef0b01f4":"df.info()","3c64ac5a":"#Droping the features that are not required to build our model\n\ndf1 = df.drop(['url','address','phone','location','dish_liked','cuisines','reviews_list','menu_item'],axis = 'columns')\ndf1.head()","cd276e73":"#Checking the Null Values\n\ndf1.isnull().sum()","8b86af3c":"#Dropping the Null Values\n\ndf2 = df1.dropna() \ndf2.isnull().sum()","8dc1c66d":"#Assiging lables to the categorical variable to Online Order attribute \n\ndef conv(conv):\n    if conv == 'No':\n        return 0\n    else:\n        return 1\n\ndf2['online_order'] = df2['online_order'].map(conv)","0923fb58":"df2.head()","1fec13d5":"#Ploting the online orders attributes value count\n\nplt.figure(figsize=(10,5))\ndf['online_order'].value_counts().plot.bar()\nplt.title('Online orders', fontsize = 20)\nplt.ylabel('Frequency',size = 15)","6dc62ab3":"#Assiging lables to the categorical variables to Table Booking attribute\n\ndef conv(conv):\n    if conv == 'No':\n        return 0\n    else:\n        return 1\n\ndf2['book_table'] = df2['book_table'].map(conv)","edbe7d2a":"df2.head()","682accd7":"#Ploting the booking table attributes value count\n\nplt.figure(figsize=(10,5))\ndf['book_table'].value_counts().plot.bar()\nplt.title('Booking Table', fontsize = 20,pad=15)\nplt.ylabel('Frequency', fontsize = 15)","beb4fe48":"df2['rate'].unique()","df44ce9b":"#Replacing the NaN values \n\ndf2['rate'] = df2['rate'].replace('NEW',np.NaN)\ndf2['rate'] = df2['rate'].replace('-',np.NaN)","d7d6ab61":"from scipy.stats import norm\nfrom scipy import stats","474f47c1":"#Converting rating values into the float values from string \n\ndf2.rate=df2.rate.astype(str)\ndf2.rate=df2.rate.apply(lambda x : x.replace('\/5','')).astype(float)\ndf2.head()","fd39f785":"df2['rate'] = df2['rate'].fillna(df2['rate'].mean())","7322ef87":"df2.isnull().sum()","e7b5fc80":"#histogram of Price\n\nplt.figure(figsize=(10,5))\nsns.distplot(df2['rate'],color='b');\nplt.title(\"Rating Distrubition\")\nplt.show()","a3605ea2":"#Renaming the Columns Names\n\ndf2=df2.rename(columns={'approx_cost(for two people)':'cost','listed_in(type)':'type',\n                         'listed_in(city)':'Location_in_City'})","e50401f4":"df2.cost.dtype","343bc5d1":"#Converting the cost value to float from string\n\ndf2.cost=df2.cost.astype(str)\ndf2.cost=df2.cost.apply(lambda y : y.replace(',','')).astype(float)\ndf2.head()","4705132b":"#Applying One hot encoding on the Rest Type attribute \n\ndummiesresttype = pd.get_dummies(df2.rest_type)\ndummiesresttype.head(3)","602988e4":"#Applying One hot encoding on the Type attribute\n\ndummiestype = pd.get_dummies(df2.type)\ndummiestype.head(3)","2799e348":"#Applying One hot encoding on the Location in city attribute\n\ndummiescity = pd.get_dummies(df2.Location_in_City)\ndummiescity.head(3)","06ce9b8d":"#Concating them into one data frame\n\ndf3 = pd.concat([df2,dummiesresttype,dummiestype,dummiescity],axis=\"columns\")\ndf3.head()","52c18c68":"dfname = df3[\"name\"]","7cdc38dd":"dfname.head()","20bea542":"dflocation = df3[\"Location_in_City\"]","0610d37a":"dflocation.head()","945c6422":"#Dropping the One unwanted columns\n\ndf4 = df3.drop([\"name\",\"rest_type\",\"type\",\"Location_in_City\"],axis = \"columns\")\ndf4.head()","b8a263eb":"df4.head()","6f50de2a":"corr = df4.corr()\ncorr","07b7f13e":"#Plotting correlation matrix without dummies \n\ncorr = df2.corr(method='kendall')\nplt.figure(figsize=(15,8))\nsns.heatmap(corr, annot=True)","7ea8f5fb":"X = df4.drop(['rate'],axis='columns')\nX.head(10)","062d9964":"X.shape","eccb1c96":"y = df4.rate\ny.head(10)","a4ff0801":"len(y)","d9c519f9":"#Spliting data into test and train\n\nfrom sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import r2_score, mean_squared_error\n\nX_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.20)","51248090":"from sklearn.neighbors import KNeighborsRegressor\n\nknn=KNeighborsRegressor(n_jobs=-1)\nknn.fit(X_train,y_train)\n\nY_knn_pred = knn.predict(X_test)\n\nY_knn_x_pred = knn.predict(X_train)","b3c17d8d":"r2 = r2_score(y_test,Y_knn_pred)\nprint('R-Square Score: ',r2*100)","0d66c1bf":"print(\"RMSE value of Training dataset:\" + np.sqrt(metrics.mean_squared_error(y_train,Y_knn_x_pred)).astype(str))\nprint(\"RMSE value of testing dataset:\" + np.sqrt(metrics.mean_squared_error(y_test,Y_knn_pred)).astype(str))","0e353683":"acc = knn.score(X_train,y_train)\nprint('Accuracy: ',acc*100)","aae7eeae":"from sklearn.model_selection import cross_val_score\ncv_res = cross_val_score(knn, X_train, y_train, cv=4, scoring=\"r2\")\nprint(cv_res.mean())\ncv_res","dcb43c14":"from sklearn.linear_model import LinearRegression\n\nlr = LinearRegression()\nlr.fit(X_train,y_train)\n\nY_lr_pred = lr.predict(X_test)\n\nY_lr_x_pred = knn.predict(X_train)","329c8cf3":"r2 = r2_score(y_test,Y_lr_pred)\nprint('R-Square Score: ',r2*100)","62e0c548":"print(\"RMSE value of Training dataset:\" + np.sqrt(metrics.mean_squared_error(y_train,Y_lr_x_pred)).astype(str))\nprint(\"RMSE value of testing dataset:\" + np.sqrt(metrics.mean_squared_error(y_test,Y_lr_pred)).astype(str))","0337cb73":"acc = lr.score(X_train,y_train)\nprint('Accuracy: ',acc*100)","e555f5ae":"from sklearn.model_selection import cross_val_score\ncv_res = cross_val_score(lr, X_train, y_train, cv=4, scoring=\"r2\")\nprint(cv_res.mean())","fe20f9e8":"#plotting the KNN values predicated Rating\n\nplt.figure(figsize=(12,7))\n# preds_rf = knn.predict(X_test)\nplt.scatter(y_test,X_test.iloc[:,2],color=\"blue\")\nplt.title(\"True rate vs Predicted rate\",size=20,pad=15)\nplt.xlabel('Rating',size = 15)\nplt.ylabel('Frequency',size = 15)\nplt.scatter(Y_knn_pred,X_test.iloc[:,2],color=\"yellow\")","f77a0d46":"type(Y_knn_pred)","276cf848":"dfrating = pd.Series(Y_knn_pred)","fde17024":"dfrating.head()","cf1ce27e":"dfreco = pd.concat([dfname,dfrating,dflocation],axis=\"columns\")","ca912fbf":"dfreco.head()","80831056":"dfreco = dfreco.rename(columns={0:'Predicated_Rating'})","42a2e35f":"dfreco.head()","e0ed8d59":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom plotly.offline  import download_plotlyjs,init_notebook_mode,plot, iplot\nfrom plotly.offline import init_notebook_mode\ninit_notebook_mode(connected=True)\nimport cufflinks as cf\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\ncf.go_offline()","f7cca922":"rest = pd.pivot_table(data = dfreco, index = 'name', values = 'Predicated_Rating' , aggfunc = np.sum).reset_index()\nrest = rest.sort_values(by = 'Predicated_Rating', ascending = False).reset_index(drop=True)\nrest.head(5).iplot(kind = 'pie', labels= 'name', values= 'Predicated_Rating', title = 'Top Resturent with most Ratings' )","935cfc53":"\nrat = dfreco[['Location_in_City','Predicated_Rating']]\nrat = rat.groupby('Location_in_City').sum().sort_values('Predicated_Rating',ascending = False)\nrat.head(10).iplot(kind = 'bar', title = ' Top 10 loaction with most number of Rating ')","4009a6f5":"# Exploratory Data Analysis","38a377fe":"# Building Model and Evalution Matrix","760f1a28":"Data Cleaning: Handle NA values","7da72cbd":"Linear Regression Model and Evalution","eb6c9ef1":"KNN Regressor Model and Evalution","e82e0be3":"One hot Encoding","afe9c1f7":"# Correlation Matrix and Distribution Plot of Dependent Variable"}}