{"cell_type":{"16a6ee3d":"code","e731e4af":"code","ed849157":"code","ac73bf44":"code","f3a85e4e":"code","e8111e6b":"code","580954fd":"code","1055db79":"code","5510c0f0":"code","c63991d8":"code","8fb3cf3c":"code","59688bf1":"code","0f3965fc":"code","74a5f09e":"code","bb0d1aca":"code","c378b590":"code","c9b1ebbd":"code","39965178":"code","98b1a1cf":"code","8055f8ed":"code","4d3d4ca3":"code","ff7d6a83":"code","3cc5710c":"code","941bacdb":"code","b583258a":"code","cac80953":"code","6b9982fd":"code","e7023627":"code","6d719999":"code","2326798c":"code","43f78776":"code","c71f0a4d":"code","545fc38b":"code","af3f5e1a":"code","fd8508ee":"code","1b32a647":"code","ce969a39":"code","9ea4b279":"code","db183bd9":"code","f2812533":"code","15aea2b6":"code","26cf1e79":"code","f2a9ed03":"code","5209fe49":"code","dc93c8a4":"code","ab77d9d1":"code","12576851":"code","c012810f":"code","019e03ab":"code","8ff4b053":"code","cf6c0fe2":"code","d300f248":"code","113720b9":"code","ccd430f1":"code","22c859bf":"markdown","b085ef68":"markdown","9abc1326":"markdown","b6b2408e":"markdown","3393136a":"markdown","7610c6e6":"markdown"},"source":{"16a6ee3d":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom lightgbm import LGBMClassifier\nimport xgboost as xb\nimport lightgbm as lbm\nfrom catboost import Pool, CatBoostClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix","e731e4af":"train = pd.read_csv('..\/input\/av-healthcare-analytics-ii\/healthcare\/train_data.csv')\ntest = pd.read_csv('..\/input\/av-healthcare-analytics-ii\/healthcare\/test_data.csv')","ed849157":"train.head()","ac73bf44":"train.info()","f3a85e4e":"train.describe()","e8111e6b":"train.isnull().sum()","580954fd":"test.isnull().sum()","1055db79":"train['kind'] = 'train'\ntest['kind']  = 'test'\ndata = pd.concat([train,test],axis=0,sort=False)","5510c0f0":"data.head()","c63991d8":"data.isnull().sum()","8fb3cf3c":"sns.set(rc = {'figure.figsize':(18,8)})\nsns.countplot('City_Code_Patient',data=data)","59688bf1":"data['City_Code_Patient'].unique()","0f3965fc":"sns.countplot('Bed Grade',data=data)","74a5f09e":"ds = data.groupby(['Hospital_type_code', 'kind'])['patientid'].count().reset_index()\nds.columns = ['hospital', 'dataset', 'count']\nfig = px.bar(\n    ds, \n    x='hospital', \n    y=\"count\", \n    color = 'dataset',\n    barmode='group',\n    orientation='v', \n    title='Cases hospital type distribution', \n    width=900,\n    height=600\n)\nfig.show()","bb0d1aca":"sns.countplot('Ward_Facility_Code',data=data)","c378b590":"sns.countplot('Ward_Type',data=data)","c9b1ebbd":"value = data['Ward_Type'].unique()\nper= []\nfor i in value:\n    per.append((data[data['Ward_Type']==i]['Ward_Type'].count())*100\/(len(data['Ward_Type'])))","39965178":"ds = data[data['kind']=='train']\nfig = px.pie(\n    ds, \n    names='Ward_Type', \n    title='Ward type pie chart for train set', \n    width=900,\n    height=600\n)\nfig.show()","98b1a1cf":"sns.set(rc = {'figure.figsize':(12,8)})\nsns.countplot('Department',data=data)","8055f8ed":"ds = data[data['kind']=='train']\nfig = px.pie(\n    ds, \n    names='Available Extra Rooms in Hospital', \n    title='Availablity of extra room', \n    width=900,\n    height=600\n)\nfig.show()","4d3d4ca3":"#Dealing with null values","ff7d6a83":"data.isnull().sum()","3cc5710c":"from sklearn.preprocessing import LabelEncoder\nlabel_encoder = LabelEncoder()","941bacdb":"data['Department'] = label_encoder.fit_transform(data['Department'])\nprint('Department :{}' .format(data['Department'].unique()))\n\ndata['Ward_Type'] = label_encoder.fit_transform(data['Ward_Type'])\nprint('Ward_Type : {}'.format(data['Ward_Type'].unique()))\n\ndata['Ward_Facility_Code'] = label_encoder.fit_transform(data['Ward_Facility_Code'])\nprint('Ward_Facility_Code :{}'.format(data['Ward_Facility_Code'].unique()))\n\ndata['Hospital_type_code'] = label_encoder.fit_transform(data['Hospital_type_code'])\nprint('Hospital_type_code: {}'.format(data['Hospital_type_code'].unique()))\n\ndata['Hospital_region_code'] = label_encoder.fit_transform(data['Hospital_region_code'])\nprint('Hospital_region_code: {}'.format(data['Hospital_region_code'].unique()))\n      \ndata['Type of Admission'] = label_encoder.fit_transform(data['Type of Admission'])\nprint('Type of Admission : {}'.format(data['Type of Admission'].unique()))\n      \ndata['Severity of Illness'] = label_encoder.fit_transform(data['Severity of Illness'])\nprint('Severity of Illness: {}'.format(data['Severity of Illness'].unique()))\n      \ndata['Age'] = label_encoder.fit_transform(data['Age'])\nprint('Age : {}'.format(data['Age'].unique()))","b583258a":"data['Bed Grade'].fillna(2.0,inplace=True)\ndata['City_Code_Patient'].fillna(8.0,inplace=True)","cac80953":"data.isnull().sum()","6b9982fd":"data.loc[data['Stay'] == '0-10', 'Stay'] = 0\ndata.loc[data['Stay'] == '11-20', 'Stay'] = 1\ndata.loc[data['Stay'] == '21-30', 'Stay'] = 2\ndata.loc[data['Stay'] == '31-40', 'Stay'] = 3\ndata.loc[data['Stay'] == '41-50', 'Stay'] = 4\ndata.loc[data['Stay'] == '51-60', 'Stay'] = 5\ndata.loc[data['Stay'] == '61-70', 'Stay'] = 6\ndata.loc[data['Stay'] == '71-80', 'Stay'] = 7\ndata.loc[data['Stay'] == '81-90', 'Stay'] = 8\ndata.loc[data['Stay'] == '91-100', 'Stay'] = 9\ndata.loc[data['Stay'] == 'More than 100 Days', 'Stay'] = 10","e7023627":"data.head()","6d719999":"train = data[data['kind'] == 'train']\ntest = data[data['kind'] == 'test']\n\ntrain.drop(['kind'], axis=1, inplace=True)\ntest.drop(['kind','Stay'], axis=1, inplace=True)","2326798c":"train.head()","43f78776":"test.head()","c71f0a4d":"X = train[['Hospital_code', 'Hospital_type_code', 'City_Code_Hospital',\n       'Hospital_region_code', 'Available Extra Rooms in Hospital',\n       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',\n        'City_Code_Patient', 'Type of Admission',\n       'Severity of Illness', 'Visitors with Patient', 'Age',\n       'Admission_Deposit']]\ny = train['Stay']\nX_predict = test[['Hospital_code', 'Hospital_type_code', 'City_Code_Hospital',\n       'Hospital_region_code', 'Available Extra Rooms in Hospital',\n       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',\n        'City_Code_Patient', 'Type of Admission',\n       'Severity of Illness', 'Visitors with Patient', 'Age',\n       'Admission_Deposit']]\ny=y.astype('int')","545fc38b":"from sklearn.preprocessing import StandardScaler\nstd = StandardScaler()","af3f5e1a":"X = std.fit_transform(X)\nX_predict = std.transform(X_predict)","fd8508ee":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train,y_test = train_test_split(X,y,test_size=0.2,shuffle = True)","1b32a647":"from sklearn.linear_model import LogisticRegression\nmodel1 = LogisticRegression(solver='sag',max_iter =1000)\nmodel1.fit(X_train,y_train)\nmodel1.score(X_test,y_test)","ce969a39":"train_dataset = Pool(data=X_train, label=y_train)\neval_dataset = Pool(data=X_test, label=y_test)\nmodel = CatBoostClassifier(iterations=750,\n                           learning_rate=0.08,\n                           depth=7,\n                           loss_function='MultiClass',\n                           eval_metric='Accuracy')\n\nmodel.fit(train_dataset)","9ea4b279":"model.get_best_score()","db183bd9":"eval_pred = model.predict(eval_dataset)","f2812533":"cm = confusion_matrix(y_test, eval_pred)\ncm","15aea2b6":"test_dataset = Pool(X_predict)","26cf1e79":"y_pred = model.predict(test_dataset)","f2a9ed03":"y_pred","5209fe49":"pd.DataFrame(y_pred).to_csv(\"prediction.csv\")","dc93c8a4":"output = pd.DataFrame(test['case_id'].values,columns=['case_id'])","ab77d9d1":"output","12576851":"len(y_pred)","c012810f":"len(X_predict)","019e03ab":"prediction = pd.read_csv('.\/prediction.csv',names=['Stay'],header=0)","8ff4b053":"prediction.loc[prediction['Stay'] == 0, 'Stay'] = '0-10'\nprediction.loc[prediction['Stay'] ==1 , 'Stay'] = '11-20'\nprediction.loc[prediction['Stay'] ==2 , 'Stay'] = '21-30'\nprediction.loc[prediction['Stay'] ==3 , 'Stay'] = '31-40'\nprediction.loc[prediction['Stay'] ==4 , 'Stay'] = '41-50'\nprediction.loc[prediction['Stay'] ==5 , 'Stay'] = '51-60'\nprediction.loc[prediction['Stay'] ==6 , 'Stay'] = '61-70'\nprediction.loc[prediction['Stay'] ==7 , 'Stay'] = '71-80'\nprediction.loc[prediction['Stay'] ==8 , 'Stay'] = '81-90'\nprediction.loc[prediction['Stay'] ==9 , 'Stay'] = '91-100'\nprediction.loc[prediction['Stay'] ==10, 'Stay'] = 'More than 100 Days'","cf6c0fe2":"output = pd.DataFrame(test['case_id'].values,columns=['case_id'])","d300f248":"output['Stay'] = prediction","113720b9":"output.head()","ccd430f1":"output.to_csv('Healthcare_Submission.csv',index=False)","22c859bf":"**The logistic regression as one of the most basic used , have a score of 0.37.**","b085ef68":"# Thats it with the visualisation lets go for the boss: Data engineering","9abc1326":"Since the data is not biased , we gotta need one more attribute to decide its missing value.","b6b2408e":"# Data Visualisation and Conclusion","3393136a":"Since 8.0 seems to be the mode of data we are most likely to fill the na value with mode.","7610c6e6":"**Its time to combine the data to engineer it once and not twice**"}}