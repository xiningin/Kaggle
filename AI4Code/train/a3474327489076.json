{"cell_type":{"e1b14589":"code","9e979007":"code","7f9bcec7":"markdown","aa7e82fd":"markdown","b615d2bd":"markdown","5b6430de":"markdown","c26d9209":"markdown","cfa6a54c":"markdown"},"source":{"e1b14589":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set_style('darkgrid')\nsns.set_palette('bone')\n\ntrain = pd.read_csv('..\/input\/pubg-finish-placement-prediction\/train_V2.csv')\n\nfig, ax = plt.subplots(1, 2, figsize=(12, 4))\n\ntrain.groupby('matchId')['matchType'].first().value_counts().plot.bar(ax=ax[0])\n\n'''\nsolo  <-- solo,solo-fpp,normal-solo,normal-solo-fpp\nduo   <-- duo,duo-fpp,normal-duo,normal-duo-fpp,crashfpp,crashtpp\nsquad <-- squad,squad-fpp,normal-squad,normal-squad-fpp,flarefpp,flaretpp\n'''\nmapper = lambda x: 'solo' if ('solo' in x) else 'duo' if ('duo' in x) or ('crash' in x) else 'squad'\ntrain['matchType'] = train['matchType'].apply(mapper)\ntrain.groupby('matchId')['matchType'].first().value_counts().plot.bar(ax=ax[1])","9e979007":"import os\nimport numpy as np\nimport pandas as pd\n\nprint(os.listdir(\"..\/input\/\"))\n\n# Any results you write to the current directory are saved as output.\ndf_sub = pd.read_csv(\"..\/input\/lightgbm-baseline\/submission_adjusted.csv\")\ndf_sub2 = pd.read_csv(\"..\/input\/pubg-lgb-ensamble-lvl-1\/submission_v8.csv\")\ndf_sub3 = pd.read_csv(\"..\/input\/pubg-nn-ensamble-lvl-1\/submission_nn_ensamble_v5.csv\")\ndf_test = pd.read_csv(\"..\/input\/pubg-finish-placement-prediction\/test_V2.csv\")\n\n# STACK\ndf_sub[\"winPlacePerc\"] = (df_sub2[\"winPlacePerc\"] + df_sub3[\"winPlacePerc\"]) \/ 2\n\ndf_sub = df_sub[[\"Id\", \"winPlacePerc\"]]\ndf_test = pd.read_csv(\"..\/input\/pubg-finish-placement-prediction\/test_V2.csv\")\n\n\n# Restore some columns\ndf_sub = df_sub.merge(df_test[[\"Id\", \"matchId\", \"groupId\", \"maxPlace\", \"numGroups\"]], on=\"Id\", how=\"left\")\n\n# Sort, rank, and assign adjusted ratio\ndf_sub_group = df_sub.groupby([\"matchId\", \"groupId\"]).first().reset_index()\ndf_sub_group[\"rank\"] = df_sub_group.groupby([\"matchId\"])[\"winPlacePerc\"].rank()\ndf_sub_group = df_sub_group.merge(\n    df_sub_group.groupby(\"matchId\")[\"rank\"].max().to_frame(\"max_rank\").reset_index(), \n    on=\"matchId\", how=\"left\")\ndf_sub_group[\"adjusted_perc\"] = (df_sub_group[\"rank\"] - 1) \/ (df_sub_group[\"numGroups\"] - 1)\n\ndf_sub = df_sub.merge(df_sub_group[[\"adjusted_perc\", \"matchId\", \"groupId\"]], on=[\"matchId\", \"groupId\"], how=\"left\")\ndf_sub[\"winPlacePerc\"] = df_sub[\"adjusted_perc\"]\n\n# Deal with edge cases\ndf_sub.loc[df_sub.maxPlace == 0, \"winPlacePerc\"] = 0\ndf_sub.loc[df_sub.maxPlace == 1, \"winPlacePerc\"] = 1\n\n# Align with maxPlace\n# Credit: https:\/\/www.kaggle.com\/anycode\/simple-nn-baseline-4\nsubset = df_sub.loc[df_sub.maxPlace > 1]\ngap = 1.0 \/ (subset.maxPlace.values - 1)\nnew_perc = np.around(subset.winPlacePerc.values \/ gap) * gap\ndf_sub.loc[df_sub.maxPlace > 1, \"winPlacePerc\"] = new_perc\n\n# Edge case\ndf_sub.loc[(df_sub.maxPlace > 1) & (df_sub.numGroups == 1), \"winPlacePerc\"] = 0\nassert df_sub[\"winPlacePerc\"].isnull().sum() == 0\n\ndf_sub[\"winPlacePerc\"] = df_sub[\"winPlacePerc\"]\n\n\ndf_sub[[\"Id\", \"winPlacePerc\"]].to_csv(\"submission_ensemble_lvl2_v4.csv\", index=False)","7f9bcec7":"So I just cut the data by game type (squad, duo, other) and **trained individual models\/kernels for each mode** (kernel example [*pubg-lgb-part-squad*](https:\/\/www.kaggle.com\/itslek\/pubg-lgb-part-squad). ) Then simply \"connected\" results in other kernel - [*pubg-lgb-ensamble-lvl-1*](https:\/\/www.kaggle.com\/itslek\/pubg-lgb-ensamble-lvl-1).  \nThus, I was able to expand the number of features to 303 and achieve better convergence in a limited time. \n\nOnly this decision has already given me **0.01974** [*pubg-lgb-ensamble-lvl-1*](https:\/\/www.kaggle.com\/itslek\/pubg-lgb-ensamble-lvl-1)","aa7e82fd":"#### let's start analyzing the solution. \nI took as a basis [LightGBM Baseline](https:\/\/www.kaggle.com\/chocozzz\/lightgbm-baseline)\nWhen adding new features, I faced the problem of **kernel memory and time limit**. Upload the output data of other kernals into the kernal helped me to bypass this limitation. \n<img src=\"https:\/\/i.ibb.co\/xhmgQ9q\/2019-02-15-20-43-05.png\" border=\"0\" width=\"300px\">\n<br \/>\n<img src=\"https:\/\/i.ibb.co\/XF3Wz0c\/2019-02-15-21-09-52.png\" border=\"0\"  width=\"500px\">","b615d2bd":"<img src=\"https:\/\/habrastorage.org\/files\/040\/6ca\/59e\/0406ca59e7c243e1bffae413d1d40947.png\" border=\"0\" width=\"500px\">\n\nNext I used [Simple NN Baseline 4](https:\/\/www.kaggle.com\/anycode\/simple-nn-baseline-4)  and likewise **made a decision based NN** - [*pubg-nn-ensamble-lvl-1*](https:\/\/www.kaggle.com\/itslek\/pubg-nn-ensamble-lvl-1) \n\nits result was lower than the solution on  [*LightGBM*](https:\/\/www.kaggle.com\/itslek\/pubg-lgb-ensamble-lvl-1). (0.02052 vs 0.01974) but ** when combining solutions I got the total score increase to 0.01946.**\n\n*Thanks to the organizers for the competition, it was interesting to practice with kernels*","5b6430de":"### in Russian language\n\n\u0417\u0430 \u043e\u0441\u043d\u043e\u0432\u0443 \u044f \u0432\u0437\u044f\u043b [LightGBM Baseline](https:\/\/www.kaggle.com\/chocozzz\/lightgbm-baseline)\n\n\u041d\u043e \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043d\u043e\u0432\u044b\u0445 \u0444\u0438\u0442\u0447\u0435\u0439 \u044f \u0441\u0442\u043e\u043b\u043a\u043d\u0443\u043b\u0441\u044f \u0441 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u043e\u0439 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043a\u0435\u0440\u043d\u0435\u043b\u043e\u0432 \u043f\u043e \u043f\u0430\u043c\u044f\u0442\u0438 \u0438 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u041e\u0431\u043e\u0439\u0442\u0438 \u044d\u0442\u043e \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043c\u043d\u0435 \u043f\u043e\u043c\u043e\u0433\u043b\u0430 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0442\u044c \u0432 \u043a\u0435\u0440\u043d\u0435\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u0435\u0440\u043d\u0435\u043b\u043e\u0432. \n\u042f \u0437\u043d\u0430\u044e \u0447\u0442\u043e \u0438\u0433\u0440\u044b \u0432 \u0440\u0435\u0436\u0438\u043c\u0430\u0445 solo, squad \u0438\u043b\u0438 duo \u0441\u0438\u043b\u044c\u043d\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u044c\u0441\u044f \u043f\u043e \u0434\u0438\u043d\u0430\u043c\u0438\u043a\u0435 \u0438 \u043f\u043e \u0442\u0430\u043a\u0442\u0438\u043a\u0435 \u0438\u0433\u0440\u044b. \u041f\u043e \u044d\u0442\u043e\u043c\u0443 \u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0440\u0430\u0437\u0431\u0438\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0442\u0438\u043f\u0443 \u0438\u0433\u0440\u044b (squad, duo, other) \u0438 **\u043e\u0431\u0443\u0447\u0430\u043b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043f\u043e\u0434 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u0436\u0438**\u043c (\u043f\u0440\u0438\u043c\u0435\u0440 \u043a\u0435\u0440\u043d\u0430\u043b\u0430 - [pubg-lgb-part-squad](https:\/\/www.kaggle.com\/itslek\/pubg-lgb-part-squad). ) \u041f\u043e\u0442\u043e\u043c \u043f\u0440\u043e\u0441\u0442\u043e \"\u0441\u043a\u043b\u0435\u0438\u0432\u0430\u043b\" \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043a\u0435\u0440\u043d\u0430\u043b\u0435 - [pubg-lgb-ensamble-lvl-1](https:\/\/www.kaggle.com\/itslek\/pubg-lgb-ensamble-lvl-1).  \n\u0422\u0435\u043c \u0441\u0430\u043c\u044b\u043c \u044f \u0441\u043c\u043e\u0433 \u0440\u0430\u0441\u0448\u0438\u0440\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0438\u0442\u0447\u0435\u0439 \u0434\u043e 303 \u0438 \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f \u043b\u0443\u0447\u0448\u0435\u0439 \u0441\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043e\u0435 \u0432\u0440\u0435\u043c\u044f. \u0422\u043e\u043b\u044c\u043a\u043e \u044d\u0442\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0443\u0436\u0435 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u043b\u043e \u0434\u043e\u0431\u0438\u0442\u044c\u0441\u044f **0.0197.**\n\n\u0414\u0430\u043b\u0435\u0435 \u044f \u0437\u0432\u0437\u044f\u043b [Simple NN Baseline 4](https:\/\/www.kaggle.com\/anycode\/simple-nn-baseline-4) \u0438 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c ** \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u0438\u043b \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 NN ** [pubg-nn-ensamble-lvl-1](https:\/\/www.kaggle.com\/itslek\/pubg-nn-ensamble-lvl-1) \u0435\u0433\u043e \u0441\u043a\u043e\u0440 \u0431\u044b\u043b \u043d\u0438\u0436\u0435 \u0447\u0435\u043c \u0443 \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0430 lgbm (0.02052 vs 0.0197) \u043d\u043e **\u043f\u0440\u0438 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0438 \u0440\u0435\u0448\u0435\u043d\u0438\u0439 \u044f \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043e\u0431\u0449\u0438\u0439 \u043f\u0440\u0438\u0440\u043e\u0441\u0442 score \u0434\u043e 0.01946.**\n\n\u0412\u043e\u0442 \u0438 \u0432\u0441\u0435)","c26d9209":"> Sorry about my English. \n\n> This is my first public competition.","cfa6a54c":"I know that the game modes *solo, quad or duo* are very different in dynamics and tactics of the game."}}