{"cell_type":{"b19c164b":"code","5a6b8a3b":"code","4e11fd23":"code","90c1c2c3":"code","53bf90bc":"code","aa2dab6f":"code","a0b3317e":"code","29356e55":"code","8f060991":"code","76da88b5":"code","1b935b72":"code","593e70ff":"code","7971b159":"code","d7fda31e":"code","2dfc5147":"code","aefec78d":"code","0a394811":"markdown","78ebd761":"markdown","dc84664c":"markdown","8095af8d":"markdown","512c25e6":"markdown","d7207f15":"markdown","d03ce344":"markdown","dadda1ce":"markdown","53440799":"markdown","d816c65b":"markdown","7d7f0d73":"markdown","733ef5ff":"markdown","ab9dba15":"markdown","4d776a1c":"markdown","57d9e17b":"markdown","c03f0183":"markdown","7d631693":"markdown","c7545862":"markdown","dd3d3f43":"markdown","02245162":"markdown","26a4150c":"markdown","3090724c":"markdown","9446b691":"markdown","daa16685":"markdown"},"source":{"b19c164b":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt \nfrom matplotlib import gridspec # flexible multi figure size\n \nimport seaborn as sns\n\nprint('matplotlib : ', mpl.__version__)\nprint('seaborn : ', sns.__version__)\nprint('pandas : ', pd.__version__)\n\nplt.rcParams['figure.dpi'] = 200","5a6b8a3b":"# load dataset by pandas's read_csv function\ndata = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\nprint(data.shape)","4e11fd23":"data.head()","90c1c2c3":"import missingno as msno\nmsno.matrix(data)","53bf90bc":"import missingno as msno\nmsno.matrix(data, sort='descending')","aa2dab6f":"data.info()","a0b3317e":"# count the value first!\nsurvived_count = data['Survived'].value_counts()\nprint(survived_count)","29356e55":"# No Custom Version\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\naxes[0].bar(survived_count.index, survived_count) # bar(x_label, y_label)\naxes[1].pie(survived_count) # pie chart\n\nplt.show()","8f060991":"# Custom Version\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\n# Custom Color Pallete\n\ncolor = ['gray', 'lightgreen']  # To express the meaning of survival\nnew_xlabel = list(map(str, survived_count.index))\n\n# Axes[0] : Bar Plot Custom\naxes[0].bar(new_xlabel, # redefine for categorical x labels \n            survived_count, \n            color=color,# color\n            width=0.65, # bar width \n            edgecolor='black', # bar color\n            # linewidth=1.5 # edge width\n        ) \n\naxes[0].margins(0.2, 0.2) # margin control (leftright, topbottom)\naxes[0].set_xlabel('Survived') # label info\n\n# Axes[0] : Pie Chart Custom\nexplode = [0, 0.05]\n\naxes[1].pie(survived_count,\n            labels=new_xlabel,\n            colors=color, # color\n            explode=explode, # explode\n            textprops={'fontsize': 12, 'fontweight': 'bold'}, # text setting\n            autopct='%1.1f%%', # notation\n            shadow=True # shadow\n           )\n\nfig.suptitle('[Titanic] Bar Plot vs Pie Chart', fontsize=15, fontweight='bold') # figure scale title\n\nplt.show()","76da88b5":"categorical_features = ['Sex', 'Embarked','Pclass']\n\nfor feature in categorical_features:\n    print(f'[{feature}]')\n    print(data[feature].value_counts(), '\\n')","1b935b72":"# Custom Version\nfig, axes = plt.subplots(1, 3, figsize=(12, 4))\n\n# Sex\nsns.countplot(data['Sex'], ax=axes[0])\n\n# Embarked\nsns.countplot(data['Embarked'], ax=axes[1])\n\n# Pclass\nsns.countplot(data['Pclass'], ax=axes[2])\n\n    \nplt.show()","593e70ff":"sns.set_style(\"whitegrid\")\n\n# Custom Version\nfig, axes = plt.subplots(1, 3, figsize=(12, 4), sharey=True)\n\n# Sex\n# New Palette\nsns.countplot(x='Sex', data=data, ax=axes[0], palette=\"Set2\", edgecolor='black') \n\n# Embarked\n# Fixed Color\nsns.countplot(data['Embarked'], ax=axes[1], color='gray', edgecolor='black') \n\n# Pclass\n# Gradient Palette\nsns.countplot(data['Pclass'], ax=axes[2], palette=\"Blues\", edgecolor='black') \n\n# Margin & Label Custom\nfor ax in axes : \n    ax.margins(0.12, 0.15)\n    # you can set axis setting like this\n    ax.xaxis.label.set_size(12)\n    ax.xaxis.label.set_weight('bold')\n    \n# figure title    \nfig.suptitle('[Titanic] Categorical Distribution', \n             fontsize=16, \n             fontweight='bold',\n             x=0.05, y=1.08,\n             ha='left' # horizontal alignment\n            ) \n\nplt.tight_layout()\nplt.show()","7971b159":"mpl.style.use ('default')","d7fda31e":"# No custom\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\nsns.distplot(data['Age'], ax=axes[0], kde=False)\nsns.distplot(data['Fare'],  ax=axes[1], kde=False)\nplt.tight_layout()\nplt.show()","2dfc5147":"fig, axes = plt.subplots(1, 2, figsize=(9, 4))\n\nsns.scatterplot(x='Sex', y='Age', data=data, ax=axes[0]) # ax.scatter(data['Sex'], data['Fare'])\nsns.scatterplot(x='Sex', y='Age', data=data, ax=axes[1], alpha=0.05)\n\nfor ax in axes : ax.margins(0.3, 0.1)\nplt.show()","aefec78d":"sns.set_style(\"whitegrid\")\nfig, axes = plt.subplots(2, 2, figsize=(9, 10), sharey=True)\n\nsns.stripplot(x='Sex', y='Age', data=data, ax=axes[0][0])\nsns.swarmplot(x='Sex', y='Age', data=data, ax=axes[0][1])\nsns.violinplot(x='Sex', y='Age', data=data, ax=axes[1][0])\nsns.boxplot(x='Sex', y='Age', data=data, ax=axes[1][1])\n\n# Tips for turning multiple plots into loops\n# use reshape!\nfor ax, title in zip(axes.reshape(-1), ['Strip Plot', 'Swarm Plot', 'Violin Plot', 'Box Plot'] ): \n    ax.set_title(title, fontweight='bold')\n    \nplt.show()","0a394811":"In this notebook, we use `matplotlib` and `seaborn` for visualization.\n\nSince `seaborn` is based on `matplotlib`, it is all possible with `matplotlib`, but I will use `seaborn`, which is useful for statistical information visualization.","78ebd761":"## 5. 2-Dimension Visualization\n\nIn fact, it's easy to look at the distribution of a feature in the data. Custom can also improve readability a bit, but it doesn't mean much.\nNow you need to be able to look at your data to better fit your goals.\n\nThe reason to look at the data is **the relationship between features and the relationship between features and targets.**\nNow let's take a look at the data more interestingly.\n\n- 2 axis\n    - swarm plot, violin plot, box plot (categorical * numerical)\n    - scatter plot (numerical & numerical)\n        - joint plot\n- use `hue` + `label` \n- heatmap\n- Multi-Plot","dc84664c":"This allows you to look at the original **density**.\n\nIn fact, it is difficult to understand or distribute the data because it is simply printed in *a straight line*.\n\nOf course, you can adjust the transparency with `alpha` as shown on the right, but it is still poorly readable.\n\nNow, I will introduce plots that can solve this.","8095af8d":"### 5-1. 2 Axis : Scatter Plot, Swarm plot, Violin Plot, Box Plot\n\nThe easiest way to view two or more features is by matching feature 1 on one axis(x) and feature 2 on the other axis(y).\n\nHowever, here, categorical variables can lead to misunderstanding, so first, draw the ordered variables.\n\nIn order to view the distribution by category, the order may not matter. Let's first look at the relationship between **categorical and numerical** features.","512c25e6":"You can see certain missing values in **Age**, **Cabin**, and **Embarked**.\n\nSuch data needs to be careful **not only in visualization, but also in forecasting.**\n\n","d7207f15":"This distribution can be seen, but there are various difficulties.\n\n- The division is unclear.\n- If the range is long and there are many divided sections, it is difficult to see.\n    - Just adjust the `bins` parameter.\n\nHowever, it seems that there is nothing that can be of great help to the details of the visualization here.\n\nThe title and margins have been touched above, so I'll skip this one first.\n\nLet's cover this a little more in 2D visualization.","d03ce344":"- In addition to labels, **color is used to improve readability**.\n\n- You can highlight the goals of your visualization by **adding titles** to **figures or axes**.\n\n- In the case of bar plots, it is also good to **make margins** appropriately because too few margins are difficult to read.\n\n- Pie charts can see the **whole as 1**, so indicating **percentages** is a bit easier to understand.\n\n- Pie charts can use `explode` to highlight what you want to emphasize.\n\n> There is no right answer for data visualization. If you have 100 readers, you may have 100 different tastes, so you need to practice constantly thinking and customizing.","dadda1ce":"### 3-2. Missing data check\n\n- [Exploring incomplete data using visualization techniques](https:\/\/personal.eur.nl\/alfons\/publications\/ADAC2012.pdf)\n- [Missingno: a missing data visualization suite](https:\/\/joss.theoj.org\/papers\/10.21105\/joss.00547)\n    - [github\/missingno](https:\/\/github.com\/ResidentMario\/missingno)\n\nThere are many ways to visualize missing values.\n\nI think the easiest and most intuitive way to do this is with **matrix plot**, and the `missingno` library makes it easy.","53440799":"### 4-3. Numerical features Distribution\n\nNumerical data, among other things, data with **continuous** meaning must be visualized in order.\n\nThis is the detailed difference between **histogram** and **bar plot**. [more read](https:\/\/keydifferences.com\/difference-between-histogram-and-bar-graph.html)\n\nThe histogram can be drawn with `hist` in `matplotlib` or `distplot` in `seaborn`.\n\nI prefer to use any good tools, so I'll use `seaborn`.\n\n- `Age` : Null is included, but it is omitted by itself.\n- `Fare` \n\n--- \n\n- `SibSp`\n- `Parch`","d816c65b":"### 4-1. Bar plot \/ Pie Chart\n\n> [What's the difference between a graph, a chart, and a plot?](https:\/\/english.stackexchange.com\/questions\/43027\/whats-the-difference-between-a-graph-a-chart-and-a-plot)\n\nTo see the overall composition, **Pie Chart** also gives visual fun, but it is **difficult to compare** because the axes are not fixed.\n\nSo, let's compare the two by applying them to `survived` feature.","7d7f0d73":"- `seaborn` can be drawn by selecting the x-axis when there is a dataset. (in `pandas DataFrame`)\n- Color can be set by color or palette.\n    - [Named Colors](https:\/\/matplotlib.org\/gallery\/color\/named_colors.html)\n    - [Choosing Colormaps in Matplotlib](https:\/\/matplotlib.org\/tutorials\/colors\/colormaps.html)\n    - Alternatively, you can use a custom palette after creating a color or rgb format according to the palette format.   \n- The location of the title can be customized as desired.\n    - All text in matplotlib can be customized with coordinates.\n    - Text is easy to customize if you understand weight, size, and family. (Close to web development \/ PPT)\n- `plt.tight_layout()` can narrow the distance between axes to eliminate the obscure margin.\n- Both seaborn and matplotlib can pick the theme early.\n    - The overall palette, grid, and font size are set.\n    - `plt.style.use()` : ggplot ...\n    - `sns.set_style()` : whitegrid ...\n    - Even if you choose this well, you can proceed with a pretty visualization.\n    - You can choose the style you want by looking at it yourself!\n    - You can also initialize the settings using `mpl.style.use ('default')`.\n    \nLast reset and proceed to the next turn.","733ef5ff":"### 4-2. Categorical features' Distribution\n\nLet's look at the distribution of the remaining categorical data as in the above method.\n\n- `Survived`\n- `Sex` : Similar to Survived\n- `Embarked` : Order does not matter (Sort by size is recommended)\n- `Pclass` : Order matter\n\nFirst, let's count and proceed.","ab9dba15":"## 4. 1-Dimension Visualization\n\n> The dimension will vary depending on the definition, but I will define it as the number of features used in this notebook.\n\nA single feature is good for looking at the composition and distribution of data.\n\nSo, before that, let's divide the type of data specifically.\n\n- Categorical\n    - Norminal\n        - `Survived` : most important info\n        - `Sex`\n        - `Embarked`\n    - Ordinal\n        - `Pclass`\n- Numerical\n    - Contnuous\n        - `Age`\n        - `Fare`\n    - Discreate\n        - `SibSp`\n        - `Parch`\n- Etc\n    - Meaningless to viz : *Because it is all individual information*\n        - `Name` : Title information can be extracted, but left as a future task\n        - `Ticket` \n        - `PassengerId`\n        - `Cabin`\nLet's visualize it by looking at the details of each data type.","4d776a1c":"- `Strip Plot` : scatter with width and overlap \n- `Swarm Plot` : scatter + no overlap (kde : kernel density estimate)\n- `Violin Plot` : swarm to kde\n- `Box Plot` : kde to rectangle (quartile, outliers notation)\n\nFirst of all, among these, `stripplot` is rarely used. Usually, `violinplot` or `boxplot` is used to check the distribution.\n\n","57d9e17b":"## 1. Why visualize information?\n\nThere are two main reasons for visualization.\n\n1. Insights to readers(including you)\n2. Fast decision making\n\nCurrently, there is a lot of visualization\/infographic related to **Corona 19**, and I think everyone knows the insights that visualization provides.\n\nThey give intuition and help that can't be achieved through figures such as *warnings, good \/ bad growth, cross-country comparisons, policy effectiveness, and etc.*\n\nAlso, for kagglers (machine learning \/ deep learning developers), it can help with feature extraction, feature selection, and result verification.\n\n\n## 2. What would you like to show?\n\nRepresentatively, we see a total of four.\n\n- Composition\n- Distribution\n- Comparison\n- Relationship\n\n<figure>\n<img src = \"https:\/\/www.googleapis.com\/download\/storage\/v1\/b\/kaggle-user-content\/o\/inbox%2F2332181%2Fa79590d04a5b86c4178f56f2d6e655ac%2FScreen%20Shot%202019-09-02%20at%2015.55.29.png?generation=1567428955573342&alt=media\" width=70%\/> \n    <figcaption> <a href=\"https:\/\/extremepresentation.typepad.com\/files\/choosing-a-good-chart-09.pdf\">original link<\/a><\/figcaption>\n<\/figure>\n\nAnd here are only three charts you should know.\n\n- **Bar graph**\n- **Line graph**\n- **Scatter plot**\n\nSpeaking a little differently, it means that the visualization proceeds with three components: **point, line, and plane**.\n\nData visualization is, after all, **a many-to-many mapping of data and graphic elements.** Now let's go through the visualization to see how to give meaning.","c03f0183":"It is also helpful later to sort by the number of missing values and check the row with the most null values.\n\nNow let's check the data type and statistical information.","7d631693":"The color is automatically selected from the color pallete, and the ticks are also well written.\n\nHowever, there are some inconveniences to readability, and we will fix it.\n\nThe fix also has the functionality of seaborn, but it can also be done with matplotlib.\n\n- **margin**\n- **Overlap of yticks** \n    - Since the numbers have similar scales, let's keep only the leftmost y-axis.\n    - use `sharey` parameter or use `ylim`(yticks range) parameter\n- **Repeat color palette** (In the end, you have to set it yourself.)\n    - You can keep `sex` and `embarked`, but repetition of the same color palette decreases readability. However, if you use too many colors, it can also reduce readability, so when visualizing multiple graphs, keeping it in a single color can be one way.\n    - The color of the pclass seems to adjust the brightness gradually to express the order rather than making the hue completely different.","c7545862":"## It is still being updated. If you like it, please upload it.","dd3d3f43":"In order to visualize with matplotlib, you need to count by `value_counts` and set it separately on x-axis and y-axis. \n\nThis process is a bit annoying, so let's visualize it more conveniently using `seaborn`.\n\n`countplot` makes existing preprocessing very easy.","02245162":"You can use the following elements to customize it a bit.\n\n- color palette\n- x,y axis\n- width\n- little notation","26a4150c":"## Multi-Dimension Visualization\n\n![](https:\/\/upload.wikimedia.org\/wikipedia\/commons\/d\/db\/Titanic-Cobh-Harbour-1912.JPG)\n\n\n- **main library : matplotlib + seaborn**\n- **sub library: missingno**\n\n> I am writing an information visualization book using a Python library in Korea. This notebook was created to test the visualizations in the book.\n\nThere are 7 kinds of information visualization. [link](http:\/\/www.interactiondesign.us\/courses\/2011_AD690\/PDFs\/Shneiderman_1996.pdf)\n\n- 1D\n- 2D\n- 3D\n- Multi-dimension\n- Temporal (time series)\n- Tree \n- Network\n\nHere I am going to do 5 visualizations as follows, grouped by task a little differently.\n\n- N dimension(1,2,3,..)\n- Time Series \n- Tree\n- Network\n- Geographic\n\nNow let's focus on the visualization library and see how we can achieve the desired visualization.","3090724c":"In pandas, `object` usually means when it contains non-numeric data.\n\n`object` is likely to be categorical and can have a lot of work to preprocess.","9446b691":"## 3. A Quick look at Data\n\nWe should always look at the data first. Here's what you'll see at the start:\n\n- **Missing value**: It is possible to visualize the biased content, and there is a high possibility of errors in the library.\n- **Number of data**: Error may occur depending on time and library\n- **Number of features**: Comparable visualization\n- **Data type**: Select the appropriate visualization\n    - **Numerical** \n        - continuous\n        - discrete\n    - **Categorical**\n        - norminal\n        - ordinal\n        \n\n### 3-1. Library for default setting","daa16685":"There are a total of 12 features.\n\nThe table is also a visualization. Let's take a look at some of the data and see how it is organized."}}