{"cell_type":{"cae07517":"code","bd6867a6":"code","de06a9c7":"code","9a7cbaf9":"code","0eeb9d16":"code","537f8716":"code","d9728548":"code","5633109b":"code","dd318b64":"code","1a9c2d16":"code","f67721b2":"code","7151e431":"code","d2b26aae":"code","c053d845":"code","816defda":"code","3c88ddc4":"code","3f4413c0":"code","9923e3ab":"code","bef912a6":"code","4abbd989":"code","4b5f6faa":"code","6185e4bc":"code","d7970c3a":"code","017c1d2b":"code","dab9f5a8":"code","ed235f6c":"code","5f641ccb":"code","8abcfc76":"code","758ba448":"code","6ca52a7a":"code","f09a3737":"code","4257cb9d":"code","f89f373e":"code","c600409c":"code","68985cc3":"code","1978630b":"code","a652f529":"code","ba9a026f":"code","ba584a6b":"code","335530d2":"code","892a2ac3":"code","e51ff3bd":"code","9c60f6c6":"code","46a7e344":"code","20d52b9d":"code","d9fcd941":"code","050c2c6f":"code","401ef609":"code","c60604f0":"code","011f531c":"code","c175a175":"code","e6c9c6d0":"code","88415653":"code","66937cef":"code","90f8b0eb":"code","d58626d5":"markdown","327005f1":"markdown","76c4f738":"markdown","7dec5cda":"markdown","a07759f1":"markdown","7769cec2":"markdown","9d966cbd":"markdown","9326cad7":"markdown","6eae2c8c":"markdown","dd39575c":"markdown","70d7fe0d":"markdown","156d06a4":"markdown","8894e45c":"markdown"},"source":{"cae07517":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\n%matplotlib inline","bd6867a6":"train = pd.read_csv('..\/input\/titanic\/train.csv')","de06a9c7":"train.head()","9a7cbaf9":"train.shape","0eeb9d16":"train.columns","537f8716":"train.info()","d9728548":"test = pd.read_csv('..\/input\/titanic\/test.csv')","5633109b":"test.head()","dd318b64":"test.shape","1a9c2d16":"sns.heatmap(train.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","f67721b2":"train.isna().sum()","7151e431":"train.describe().T.style.background_gradient(subset = ['mean','50%'], cmap = 'Reds').background_gradient(subset = ['min', 'max'], cmap = 'Blues')","d2b26aae":"correlations = train.corr()","c053d845":"sns.heatmap(correlations, annot = True, cmap = 'Blues')","816defda":"sns.countplot(data = train, x = 'Survived', hue = 'Sex')","3c88ddc4":"sns.countplot(data = train, x = 'Survived', hue = 'Pclass')","3f4413c0":"sns.histplot(data = train, x = 'Age', kde = True)","9923e3ab":"ds = np.log1p(train['Age'])\nsns.histplot(data = train, x = ds, kde = True)","bef912a6":"ds = np.sqrt(train['Age'])\nsns.histplot(data = train, x = ds, kde = True)","4abbd989":"ds = train['Fare']**(1\/3)\nsns.histplot(data = train, x = ds, kde = True)","4b5f6faa":"sns.histplot(data = train, x = 'Fare', kde = True)","6185e4bc":"ds = np.log1p(train['Fare'])\nsns.histplot(data = train, x = ds, kde = True)","d7970c3a":"ds = np.sqrt(train['Fare'])\nsns.histplot(data = train, x = ds, kde = True)","017c1d2b":"ds = train['Fare']**(1\/3)\nsns.histplot(data = train, x = ds, kde = True)","dab9f5a8":"sns.heatmap(train.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","ed235f6c":"plt.figure(figsize = (12, 7))\nsns.boxplot(x = 'Pclass', y = 'Age', palette = 'rainbow', data = train)","5f641ccb":"# mean Age of Pclass 1 = 38\n# mean Age of Pclass 2 = 30\n# mean Age of Pclass 3 = 25\n\ndef impute_age(col):\n    Age = col[0]\n    Pclass = col[1]\n    if pd.isnull(Age):\n        if(Pclass == 1):\n            return 38\n        elif(Pclass == 2):\n            return 30\n        else:\n            return 25\n    else:\n        return Age","8abcfc76":"def process_data(df):\n    df.Age = df[['Age', 'Pclass']].apply(impute_age, axis = 1)\n    df['Fare'] = np.log1p(df['Fare'])\n    df['Age'] = np.sqrt(df['Age'])\n    df.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis = 1, inplace = True)\n    return df","758ba448":"train = process_data(train)","6ca52a7a":"sns.heatmap(train.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","f09a3737":"train.head()","4257cb9d":"Id = test['PassengerId']\ntest = process_data(test)","f89f373e":"test.head()","c600409c":"sns.heatmap(test.isnull(), yticklabels = False, cbar = False, cmap = 'viridis')","68985cc3":"target = 'Survived'\ncols = ['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Embarked']","1978630b":"cols","a652f529":"num_cols = [col for col in cols if train[col].dtype in ['int64', 'float64']]\ncat_cols = [col for col in cols if train[col].dtype == 'object']","ba9a026f":"num_cols","ba584a6b":"cat_cols","335530d2":"from sklearn.preprocessing import OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer","892a2ac3":"num_processor = Pipeline(steps = [\n    ('imputer', SimpleImputer(strategy = 'most_frequent')),\n    ('scaler', StandardScaler())\n])","e51ff3bd":"cat_processor = Pipeline(steps = [\n    ('imputer', SimpleImputer(strategy = 'most_frequent')),\n    ('ohe', OneHotEncoder(handle_unknown = 'ignore'))\n])","9c60f6c6":"pre_processor = ColumnTransformer([\n    ('num', num_processor, num_cols),\n    ('cat', cat_processor, cat_cols)\n])","46a7e344":"X = train[cols]\ny = train[target]","20d52b9d":"from sklearn.model_selection import train_test_split\nfrom sklearn.metrics import plot_confusion_matrix\nfrom sklearn.metrics import classification_report","d9fcd941":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42)","050c2c6f":"print(X_train.shape)\nprint(y_train.shape)","401ef609":"print(X_test.shape)\nprint(y_test.shape)","c60604f0":"from sklearn.ensemble import GradientBoostingClassifier","011f531c":"model = GradientBoostingClassifier(learning_rate=0.05, n_estimators=200, random_state = 42)","c175a175":"def build_model(my_model):\n    clf = Pipeline(steps = [\n        ('preprocess', pre_processor),\n        ('model', my_model)\n    ])\n    clf.fit(X_train, y_train)\n    print(\"Train set score:\", clf.score(X_train, y_train))\n    print(\"Test set score:\", clf.score(X_test, y_test))\n    \n    #Predictions\n    pred_train = clf.predict(X_train)\n    pred_test = clf.predict(X_test)\n    predictions = clf.predict(test)\n    \n    #confusion_matrices\n    plot_confusion_matrix(clf, X_train, y_train)\n    plt.title('Confusion Matrix Training Dataset')\n    plot_confusion_matrix(clf, X_test, y_test)\n    plt.title('Confusion Matrix Testing Dataset')\n    \n    return pred_train, pred_test, predictions","e6c9c6d0":"pred_train, pred_test, predictions = build_model(model)","88415653":"print(classification_report(y_train, pred_train))\nprint(classification_report(y_test, pred_test))","66937cef":"output = pd.DataFrame({'PassengerId': Id, 'Survived': predictions})\noutput.to_csv('submission.csv', index = False)","90f8b0eb":"sub = pd.read_csv('.\/submission.csv')\nsub","d58626d5":"### Building a Model","327005f1":"**conclusion** - More people of Pclass 3 died, while more of Pclass 1 survived","76c4f738":"### EDA","7dec5cda":"### Read training dataset","a07759f1":"### Missing Data","7769cec2":"Fare dataset is **right-skewed**","9d966cbd":"Age dataset is **right-skewed**","9326cad7":"### **Feature Transformation of - 'Age' Column**","6eae2c8c":"### Read Testing Dataset","dd39575c":"### **Feature Transformation - 'Fare' Column**","70d7fe0d":"**Conclusion** - Number of females Survived is greater than the number of males Survived","156d06a4":"Most people fall between age group 18 to 35","8894e45c":"Minor Missing values can be handled as below"}}