{"cell_type":{"1e0f21ca":"code","79fc15b6":"code","4d4be7bb":"code","55830032":"code","373bf6ee":"code","5fb05f0c":"code","4ccfa6c7":"code","5cc80e1c":"code","1e2f74fe":"code","8a449712":"code","1d1344fa":"code","a1c6e9ed":"code","f145442a":"code","2f1924f3":"code","93c64673":"code","5e8dd4d7":"code","59957291":"code","6912a3dc":"code","ad7bb5b7":"code","33d77e3c":"code","d23d25d3":"code","3195962f":"code","5036948a":"code","89621ba7":"code","3657e22a":"code","cf3b7d4b":"code","556b8bd5":"code","bad0e829":"code","c0a9e916":"code","e3d12128":"code","abefd889":"code","8b294811":"code","94a5c62b":"code","6faf1a0c":"code","13838b66":"code","836007cb":"code","aa8c04f5":"code","a322c537":"code","452d5027":"code","206ef658":"code","e9037aef":"code","d92e5110":"code","cfc178eb":"code","90eac2c8":"code","cfaff5cb":"code","9a3b9259":"code","09219f06":"code","81ff6033":"code","2137a9b2":"code","ef3e2efc":"code","9d23ece3":"code","f5c4f708":"code","fc902f8d":"code","1b813237":"markdown","96807013":"markdown","6daed9ef":"markdown","0132036b":"markdown","c04b9634":"markdown","933dca6e":"markdown","b76c9a71":"markdown","add8f926":"markdown","8fe0c947":"markdown","539c9127":"markdown","cd8bf956":"markdown","c296d653":"markdown","0de9a341":"markdown","197418d9":"markdown","bd3ff3ca":"markdown","09fe108d":"markdown","cd033062":"markdown","4c6b0c25":"markdown","943769b7":"markdown","09bf2549":"markdown","95260b60":"markdown"},"source":{"1e0f21ca":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom random import sample\nimport os,gc,re\nimport warnings\nimport sys\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")","79fc15b6":"def data_loader():\n    train   = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/train.csv')\n    train.drop_duplicates(keep='first')\n    test   = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/test.csv')\n    submission = pd.read_csv('..\/input\/chaii-hindi-and-tamil-question-answering\/sample_submission.csv')\n    return train,test,submission\n\ntrain,test,_ = data_loader()\n\ntrain.info()","4d4be7bb":"train.language.value_counts()","55830032":"# function to get the starting index of character of answer text in the context and answer_text\ndef get_answers(x):\n    start = x[0]\n    text = x[1]\n    return {\n        'answer_start': [start],\n        'text': [text]\n    }","373bf6ee":"train['answers'] = train[['answer_start', 'answer_text']].apply(get_answers, axis=1)\npd.set_option('display.max_colwidth',None)\ntrain.head(1)","5fb05f0c":"test.head(1)","4ccfa6c7":"#!pip install -U --no-build-isolation --no-deps ..\/input\/transformers-master\/ -qq","5cc80e1c":"!pip install transformers -q","1e2f74fe":"import transformers\nprint(transformers.__version__)","8a449712":"from transformers import AutoTokenizer\n  \nmodel_checkpoint = \"salti\/bert-base-multilingual-cased-finetuned-squad\"\n\n\n## added these models to input from kaggle\n#'..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-large-squad2' --> mean jaccard 0.68\n#'..\/input\/xlm-roberta-squad2\/deepset\/xlm-roberta-base-squad2' --> mean jaccard 0.56\n# alon-albalak\/xlm-roberta-large-xquad -0.58\n# 'setu4993\/LaBSE' --> 0.4055\n# \"bert-large-uncased-whole-word-masking-finetuned-squad\" --> poor results\n# The following  models also tried:\n# neuralspace-reverie\/indic-transformers-hi-bert\n# neuralspace-reverie\/indic-transformers-bn-distilbert\n# ai4bharat\/indic-bert\n\ntokenizer = AutoTokenizer.from_pretrained(model_checkpoint)","1d1344fa":"import transformers\nassert isinstance(tokenizer, transformers.PreTrainedTokenizerFast)","a1c6e9ed":"!pip install datasets -qq # disable it to submit the notebook as it needs internet. Kaggle competitions does not use internet.","f145442a":"!pip uninstall fsspec -qq -y\n!pip install --no-index --find-links ..\/input\/hf-datasets\/wheels datasets -qq # added to input from kaggle","2f1924f3":"import torch\nfrom datasets import Dataset","93c64673":"train = train.sample(frac=1, axis=None,random_state=41).reset_index(drop=True)\ndf_train = train[:-128].reset_index(drop=True)\ndf_valid = train[-128:].reset_index(drop=True)\n\ntrain_dataset = Dataset.from_pandas(df_train)\nvalid_dataset = Dataset.from_pandas(df_valid)\ndf_train.shape,df_valid.shape","5e8dd4d7":"print(valid_dataset[0]) # This is the standard format of dataset to be tokenized by the HF trasnformenr models","59957291":"pad_on_right = tokenizer.padding_side == \"right\"","6912a3dc":"max_length = 512 # The maximum length of a feature (question and context)\ndoc_stride = 256 # The authorized overlap between two part of the context when splitting it is needed.","ad7bb5b7":"def prepare_train_features(examples):\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n    # The offset mappings will give us a map from token to character position in the original context. This will\n    # help us compute the start_positions and end_positions.\n    offset_mapping = tokenized_examples.pop(\"offset_mapping\")\n\n    # Let's label those examples!\n    tokenized_examples[\"start_positions\"] = []\n    tokenized_examples[\"end_positions\"] = []\n\n    for i, offsets in enumerate(offset_mapping):\n        # We will label impossible answers with the index of the CLS token.\n        input_ids = tokenized_examples[\"input_ids\"][i]\n        cls_index = input_ids.index(tokenizer.cls_token_id)\n\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        answers = examples[\"answers\"][sample_index]\n        # If no answers are given, set the cls_index as answer.\n        if len(answers[\"answer_start\"]) == 0:\n            tokenized_examples[\"start_positions\"].append(cls_index)\n            tokenized_examples[\"end_positions\"].append(cls_index)\n        else:\n            # Start\/end character index of the answer in the text.\n            start_char = answers[\"answer_start\"][0]\n            end_char = start_char + len(answers[\"text\"][0])\n\n            # Start token index of the current span in the text.\n            token_start_index = 0\n            while sequence_ids[token_start_index] != (1 if pad_on_right else 0):\n                token_start_index += 1\n\n            # End token index of the current span in the text.\n            token_end_index = len(input_ids) - 1\n            while sequence_ids[token_end_index] != (1 if pad_on_right else 0):\n                token_end_index -= 1\n\n            # Detect if the answer is out of the span (in which case this feature is labeled with the CLS index).\n            if not (offsets[token_start_index][0] <= start_char and offsets[token_end_index][1] >= end_char):\n                tokenized_examples[\"start_positions\"].append(cls_index)\n                tokenized_examples[\"end_positions\"].append(cls_index)\n            else:\n                # Otherwise move the token_start_index and token_end_index to the two ends of the answer.\n                # Note: we could go after the last offset if the answer is the last word (edge case).\n                while token_start_index < len(offsets) and offsets[token_start_index][0] <= start_char:\n                    token_start_index += 1\n                tokenized_examples[\"start_positions\"].append(token_start_index - 1)\n                while offsets[token_end_index][1] >= end_char:\n                    token_end_index -= 1\n                tokenized_examples[\"end_positions\"].append(token_end_index + 1)\n\n    return tokenized_examples","33d77e3c":"tokenized_train = train_dataset.map(prepare_train_features, batched=True, remove_columns=train_dataset.column_names)\ntokenized_valid = valid_dataset.map(prepare_train_features, batched=True, remove_columns=valid_dataset.column_names)","d23d25d3":"gc.collect()","3195962f":"print(tokenized_train[0])","5036948a":"from transformers import AutoModelForQuestionAnswering, TrainingArguments, Trainer\n\nmodel = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)","89621ba7":"# determine the device we will be using for training\nDEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nprint(\"[INFO] training using {}\".format(torch.cuda.get_device_name(0)))\n#print('There are %d GPU(s) available.' % torch.cuda.device_count())","3657e22a":"gc.collect()","cf3b7d4b":"torch.cuda.empty_cache()","556b8bd5":"%env WANDB_DISABLED=True","bad0e829":"model_name = model_checkpoint.split(\"\/\")[-1]\nepoch= 1\nbatch_size = 4\nweight_decay= 3e-7\nwarmup_steps = 500\n\nargs = TrainingArguments(\n    output_dir='.\/results2',\n    evaluation_strategy = \"epoch\",\n    save_strategy = \"epoch\",\n    learning_rate=5e-5,\n    per_device_train_batch_size=batch_size,\n    per_device_eval_batch_size=batch_size,\n    num_train_epochs=epoch,\n    warmup_ratio= 0.1,\n    warmup_steps = warmup_steps,\n    weight_decay = weight_decay,\n    gradient_accumulation_steps = 2,\n    fp16= True,\n    fp16_opt_level= \"O1\",\n    seed= 0,\n    load_best_model_at_end=True\n)","c0a9e916":"from transformers import default_data_collator\n\ndata_collator = default_data_collator","e3d12128":"trainer = Trainer(\n    model,\n    args=args,\n    train_dataset=tokenized_train,\n    eval_dataset =tokenized_valid,\n    data_collator=data_collator,\n    tokenizer=tokenizer\n)","abefd889":"trainer.train()","8b294811":"#trainer.save_model(\"chaii-xlm-roberta-large-squad2-model\")","94a5c62b":"#trainer.evaluate()","6faf1a0c":"def prepare_validation_features(examples):\n    tokenized_examples = tokenizer(\n        examples[\"question\" if pad_on_right else \"context\"],\n        examples[\"context\" if pad_on_right else \"question\"],\n        truncation=\"only_second\" if pad_on_right else \"only_first\",\n        max_length=max_length,\n        stride=doc_stride,\n        return_overflowing_tokens=True,\n        return_offsets_mapping=True,\n        padding=\"max_length\",\n    )\n\n    # Since one example might give us several features if it has a long context, we need a map from a feature to\n    # its corresponding example. This key gives us just that.\n    sample_mapping = tokenized_examples.pop(\"overflow_to_sample_mapping\")\n\n    # We keep the example_id that gave us this feature and we will store the offset mappings.\n    tokenized_examples[\"example_id\"] = []\n\n    for i in range(len(tokenized_examples[\"input_ids\"])):\n        # Grab the sequence corresponding to that example (to know what is the context and what is the question).\n        sequence_ids = tokenized_examples.sequence_ids(i)\n        context_index = 1 if pad_on_right else 0\n\n        # One example can give several spans, this is the index of the example containing this span of text.\n        sample_index = sample_mapping[i]\n        tokenized_examples[\"example_id\"].append(examples[\"id\"][sample_index])\n\n        # Set to None the offset_mapping that are not part of the context so it's easy to determine if a token\n        # position is part of the context or not.\n        tokenized_examples[\"offset_mapping\"][i] = [\n            (o if sequence_ids[k] == context_index else None)\n            for k, o in enumerate(tokenized_examples[\"offset_mapping\"][i])\n        ]\n\n    return tokenized_examples","13838b66":"valid_features = valid_dataset.map(prepare_validation_features,batched=True,remove_columns=valid_dataset.column_names)","836007cb":"import collections\n\nexamples = valid_dataset\nfeatures = valid_features\n\nexample_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\nfeatures_per_example = collections.defaultdict(list)\n\nfor i, feature in enumerate(features):\n    features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)","aa8c04f5":"gc.collect()","a322c537":"from tqdm.auto import tqdm\nsquad_v2 = False\n\ndef postprocess_qa_predictions(examples, features, raw_predictions, n_best_size = 20, max_answer_length = 24):\n    all_start_logits, all_end_logits = raw_predictions\n    # Build a map example to its corresponding features.\n    example_id_to_index = {k: i for i, k in enumerate(examples[\"id\"])}\n    features_per_example = collections.defaultdict(list)\n    for i, feature in enumerate(features):\n        features_per_example[example_id_to_index[feature[\"example_id\"]]].append(i)\n\n    # The dictionaries we have to fill.\n    predictions = collections.OrderedDict()\n\n    # Logging.\n    print(f\"Post-processing {len(examples)} example predictions split into {len(features)} features.\")\n\n    # Let's loop over all the examples!\n    for example_index, example in enumerate(tqdm(examples)):\n        # Those are the indices of the features associated to the current example.\n        feature_indices = features_per_example[example_index]\n\n        min_null_score = None # Only used if squad_v2 is True.\n        valid_answers = []\n        \n        context = example[\"context\"]\n        # Looping through all the features associated to the current example.\n        for feature_index in feature_indices:\n            # We grab the predictions of the model for this feature.\n            start_logits = all_start_logits[feature_index]\n            end_logits = all_end_logits[feature_index]\n            # This is what will allow us to map some the positions in our logits to span of texts in the original\n            # context.\n            offset_mapping = features[feature_index][\"offset_mapping\"]\n\n            # Update minimum null prediction.\n            cls_index = features[feature_index][\"input_ids\"].index(tokenizer.cls_token_id)\n            feature_null_score = start_logits[cls_index] + end_logits[cls_index]\n            if min_null_score is None or min_null_score < feature_null_score:\n                min_null_score = feature_null_score\n\n            # Go through all possibilities for the `n_best_size` greater start and end logits.\n            start_indexes = np.argsort(start_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            end_indexes = np.argsort(end_logits)[-1 : -n_best_size - 1 : -1].tolist()\n            for start_index in start_indexes:\n                for end_index in end_indexes:\n                    # Don't consider out-of-scope answers, either because the indices are out of bounds or correspond\n                    # to part of the input_ids that are not in the context.\n                    if (\n                        start_index >= len(offset_mapping)\n                        or end_index >= len(offset_mapping)\n                        or offset_mapping[start_index] is None\n                        or offset_mapping[end_index] is None\n                    ):\n                        continue\n                    # Don't consider answers with a length that is either < 0 or > max_answer_length.\n                    if end_index < start_index or end_index - start_index + 1 > max_answer_length:\n                        continue\n\n                    start_char = offset_mapping[start_index][0]\n                    end_char = offset_mapping[end_index][1]\n                    valid_answers.append(\n                        {\n                            \"score\": start_logits[start_index] + end_logits[end_index],\n                            \"text\": context[start_char: end_char]\n                        }\n                    )\n        \n        if len(valid_answers) > 0:\n            best_answer = sorted(valid_answers, key=lambda x: x[\"score\"], reverse=True)[0]\n        else:\n            # In the very rare edge case we have not a single non-null prediction, we create a fake prediction to avoid\n            # failure.\n            best_answer = {\"text\": \"\", \"score\": 0.0}\n        # Let's pick our final answer: the best one or the null answer (only for squad_v2)\n        if not squad_v2:\n            predictions[example[\"id\"]] = best_answer[\"text\"]\n        else:\n            answer = best_answer[\"text\"] if best_answer[\"score\"] > min_null_score else \"\"\n            predictions[example[\"id\"]] = answer\n    \n    return predictions","452d5027":"valid_feats = valid_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\nraw_predictions = trainer.predict(valid_feats)","206ef658":"final_predictions = postprocess_qa_predictions(valid_dataset, valid_features, raw_predictions.predictions)","e9037aef":"valid_preds = [{\"id\": ex[\"id\"], \"answer\": ex[\"answers\"]['text'][0]} for ex in valid_dataset]\npred_valid_df= pd.DataFrame(valid_preds)\npred_valid_df.head(1)","d92e5110":"def jaccard(row): \n    str1 = row[0]\n    str2 = row[1]\n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","cfc178eb":"pred_valid_df['prediction'] = pred_valid_df['id'].apply(lambda r: final_predictions[r])\npred_valid_df['jaccard'] = pred_valid_df[['answer', 'prediction']].apply(jaccard, axis=1)\npred_valid_df.head()","90eac2c8":"round(pred_valid_df.jaccard.mean(),4)","cfaff5cb":"_,_,sub=data_loader()","9a3b9259":"test_dataset = Dataset.from_pandas(test)\ntest_features = test_dataset.map(\n    prepare_validation_features,\n    batched=True,\n    remove_columns=test_dataset.column_names\n)","09219f06":"print(test_features[0])","81ff6033":"test_feats = test_features.map(lambda example: example, remove_columns=['example_id', 'offset_mapping'])\ntest_feats","2137a9b2":"raw_test_predictions = trainer.predict(test_feats)","ef3e2efc":"test_features.set_format(type=test_features.format[\"type\"], columns=list(test_features.features.keys()))\nfinal_test_predictions = postprocess_qa_predictions(test_dataset, test_features, raw_test_predictions.predictions)","9d23ece3":"sub['PredictionString'] = sub['id'].apply(lambda x: final_test_predictions[x])","f5c4f708":"sub['Correct Answers'] = ['\u092f\u0947\u0932\u0928','28 \u0928\u0935\u092e\u094d\u092c\u0930 2007','\u0967\u0968 \u092e\u093e\u0930\u094d\u091a \u0967\u096e\u0968\u096a','13','\u0b9a\u0bc1\u0bb5\u0bbe\u0bae\u0bbf\u0ba8\u0bbe\u0ba4\u0ba9\u0bcd \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd \u0bb5\u0bb0\u0bcd\u0b95\u0bc0\u0bb8\u0bcd \u0b95\u0bc1\u0bb0\u0bbf\u0baf\u0ba9\u0bcd']# As I get it manually.\nsub['jaccard score']   = sub[['PredictionString', 'Correct Answers']].apply(jaccard, axis=1)\nprint(sub.head())","fc902f8d":"sub.to_csv('submission.csv',index=False)","1b813237":"One specific thing for the preprocessing in question answering is how to deal with very long documents. We usually truncate them in other tasks, when they are longer than the model maximum sentence length, but here, removing part of the the context might result in losing the answer we are looking for. To deal with this, we will allow one (long) example in our dataset to give several input features, each of length shorter than the maximum length of the model (or the one we set as a hyper-parameter). Also, just in case the answer lies at the point we split a long context, we allow some overlap between the features we generate controlled by the hyper-parameter 'doc_stride'","96807013":"The code above only keeps answers that are inside the context, we will need to grab the score for the impossible answer (which has start and end indices corresponding to the index of the **CLS token**). \n\nWe predict the impossible answer when the score is greater than the score of the best non-impossible answer. All combined together, this gives us the following post-processing function:","6daed9ef":"### Preprocessing the data","0132036b":"In the case of impossible answers (the answer is in another feature given by an example with a long context), we set the cls index for both the start and end position. We could also simply discard those examples from the training set if the flag allow_impossible_answers is False.","c04b9634":"## Valid Features\n\nwe can sort the valid_answers according to their score and only keep the best one. \n\nThe only point left is how to check a given span is inside the context (and not the question) and how to get back the text inside. To do this, we need to add two things to our validation features:\n\nthe ID of the example that generated the feature (since each example can generate several features, as seen before);\nthe offset mapping that will give us a map from token indices to character positions in the context.","933dca6e":"![](https:\/\/blog.floydhub.com\/content\/images\/size\/w2000\/2018\/10\/tra.jpeg)","b76c9a71":"## Predictions of Test data","add8f926":"# Fine Tuning the pre-trained BERT on Downstream Task: 'Question - Answering'","8fe0c947":"### Refer the following link to get know the details of the generic function to prepare the data to feed to the model\nlink: https:\/\/github.com\/huggingface\/notebooks\/blob\/master\/examples\/question_answering.ipynb","539c9127":"## Evaluation\nEvaluating the model will require a bit more work, as we will need to map the predictions of the model back to parts of the context. The model itself predicts logits for the start and end position of the 'answers': if we take a batch from our validation datalaoder.","cd8bf956":"### Loading the data","c296d653":"### To avoid \u201cCUDA out of memory\u201d in PyTorch","0de9a341":"## Instantiating Trainer","197418d9":"The following assertion ensures that our tokenizer is a fast tokenizers (backed by Rust) from the \ud83e\udd17 Tokenizers library","bd3ff3ca":"### Importing the Transformer Model from Huggingface ","09fe108d":"Since one example can give several features, we will need to gather together all the answers in all the features generated by a given example, then pick the best one. The following code builds a map from example index to its corresponding features indices:","cd033062":"The most obvious thing to predict an answer for each feature is to take the **index for the maximum of the start logits** as a start position and **the index of the maximum of the end logits** as an end position.\n\nThis will work great in a lot of cases, but what if this prediction gives us something impossible: the start position could be greater than the end position, or point to a span of text in the question instead of the answer. In that case, we might want to look at the second best prediction to see if it gives a possible answer and select that instead.","4c6b0c25":"In the question-answering task, BERT has to return the text span that contains the answers from the context\/paragraphs.\n\nOur model has to understand the starting and ending index of the text span containing the answers. How? We have to calcuate the conditional probability of each token of the feature of being starting and ending token of the answers. Our model has pick the text span containing the answers using the maximum of logits of each token and each feature (question,context pair).","943769b7":"we will need a data collator that will batch our processed examples together, here the default one will work:","09bf2549":"The warning is telling us we are throwing away some weights (the vocab_transform and vocab_layer_norm layers) and randomly initializing some other (the pre_classifier and classifier layers). This is absolutely normal in this case, because we are removing the head used to pretrain the model on a masked language modeling objective and replacing it with a new head for which we don't have pretrained weights, so the library warns us we should fine-tune this model before using it for inference, which is exactly what we are going to do.","95260b60":"To instantiate a Trainer, we will need to define three more things. The most important is the TrainingArguments, which is a class that contains all the attributes to customize the training. It requires one folder name, which will be used to save the checkpoints of the model, and all other arguments are optional."}}