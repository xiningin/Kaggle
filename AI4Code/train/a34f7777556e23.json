{"cell_type":{"89522f42":"code","67dd17e2":"code","aeb9d423":"code","b632caf1":"code","63857de1":"code","d42a439a":"code","a5a5be45":"code","f0279a99":"code","298d18f5":"code","595b29e1":"code","fea04063":"code","dde78d72":"code","0b51ba32":"code","e09d57ca":"code","0d6b5c37":"code","b7610f27":"code","768f9f86":"code","a75c09f5":"code","7c6d6043":"code","677fa4c4":"code","970d02f3":"markdown","7b236b58":"markdown","e0559927":"markdown","fc47f4fe":"markdown","ea71472d":"markdown","1664ae6b":"markdown","9e031c24":"markdown","56be03d3":"markdown","c01fb38c":"markdown","647fa2cb":"markdown","4cbe40c0":"markdown","f8e5c281":"markdown","6bda2e47":"markdown","be072d31":"markdown","54cf2250":"markdown","d4ab9e41":"markdown","136ccc20":"markdown","125d90b0":"markdown","a42d5fbd":"markdown"},"source":{"89522f42":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67dd17e2":"pip install snap-stanford","aeb9d423":"import snap","b632caf1":"pathToGraph = '\/kaggle\/input\/ml-in-graphs-hw0\/wiki-Vote.txt'\nG = snap.LoadEdgeList(snap.PNGraph, pathToGraph, 0, 1)","63857de1":"print('Nodes amount: {}'.format(G.GetNodes()))","d42a439a":"print('Self-edged nodes amount: {}'.format(snap.CntSelfEdges(G)))","a5a5be45":"print('Directed edges amount: {}'.format(snap.CntUniqDirEdges(G)))","f0279a99":"print('Undirected edges amount: {}'.format(snap.CntUniqUndirEdges(G)))","298d18f5":"print('Reciprocated edges amount: {}'.format(snap.CntUniqDirEdges(G) - snap.CntUniqUndirEdges(G)))","595b29e1":"print('Number of nodes with zero out-degree: {}'.format(snap.CntOutDegNodes(G, 0)))","fea04063":"print('Number of nodes with zero in-degree: {}'.format(snap.CntInDegNodes(G, 0)))","dde78d72":"DegToCntV = snap.TIntPrV()\nsnap.GetOutDegCnt(G, DegToCntV)\namountNodes = sum([pair.GetVal2() for pair in DegToCntV if pair.GetVal1() > 10])\nprint('Number of nodes with more than 10 out-degree: {}'.format(amountNodes))","0b51ba32":"DegToCntV = snap.TIntPrV()\nsnap.GetInDegCnt(G, DegToCntV)\namountNodes = sum([pair.GetVal2() for pair in DegToCntV if pair.GetVal1() < 10])\nprint('Number of nodes with more than 10 out-degree: {}'.format(amountNodes))","e09d57ca":"DegToCntV = snap.TIntPrV()\nsnap.GetOutDegCnt(G, DegToCntV)\nhist = np.dstack([[pair.GetVal1(), pair.GetVal2()] for pair in DegToCntV if pair.GetVal1() > 0 and pair.GetVal2() > 0])[0]\nplt.figure(figsize=(10,7))\nplt.loglog(hist[0], hist[1], marker='h', markersize=3.5)\nplt.grid(True, which=\"both\", color=\"0.75\")\nplt.xlabel('Node degree')\nplt.ylabel('Node amount')\nplt.show();","0d6b5c37":"DegToCntV = snap.TIntPrV()\nsnap.GetOutDegCnt(G, DegToCntV)\nhist = np.dstack([[pair.GetVal1(), pair.GetVal2()] for pair in DegToCntV if pair.GetVal1() > 0 and pair.GetVal2() > 0])[0]\nplt.figure(figsize=(10,7))\nplt.loglog(hist[0], hist[1], marker='h', markersize=3.5, label=\"The distribution of out-degrees of nodes\")\nplt.grid(True, which=\"both\", color=\"0.75\")\nplt.xlabel('Node degree')\nplt.ylabel('Node amount')\n\na, b = np.polyfit(np.log10(hist[0]),np.log10(hist[1]), 1)\nreg_line = 10**(b) * (hist[0]**a)\nplt.loglog(hist[0], reg_line, color=\"r\", label=\"Reg-line - params for interpolation: a = {:.3f}, b = {:.3f}\".format(a, b))\nplt.ylim(0.8,3000)\nplt.legend()\n\nplt.show();","b7610f27":"pathToGraphJava = '\/kaggle\/input\/ml-in-graphs-hw0\/stackoverflow-Java.txt'\nJ = snap.LoadEdgeList(snap.PNGraph, pathToGraphJava, 0, 1)","768f9f86":"comp = snap.TCnComV()\nsnap.GetWccs(J, comp)\nprint(\"The number of weakly connected components in the network: {}\".format(len(comp)))","a75c09f5":"maxWCC = snap.GetMxWcc(J)\nprint(\"The number of edges: {}, the number of nodes: {}\".format(maxWCC.GetEdges(), maxWCC.GetNodes()))","7c6d6043":"pageRanks = snap.TIntFltH()\nsnap.GetPageRank(J, pageRanks)\ntopByPageRank = sorted([[id, pageRanks[id]] for id in pageRanks], key=lambda x: x[1], reverse=True)[:3]\nprint(\"IDs of the top 3 most central nodes in the network by PagePank scores: {}\".format([pair[0] for pair in topByPageRank]))","677fa4c4":"NIdHubH = snap.TIntFltH()\nNIdAuthH = snap.TIntFltH()\nsnap.GetHits(J, NIdHubH, NIdAuthH)\nhubs = [pair[0] for pair in sorted([[id, NIdHubH[id]] for id in NIdHubH], key=lambda x: x[1], reverse=True)[:3]]\nauths = [pair[0] for pair in sorted([[id, NIdAuthH[id]] for id in NIdAuthH], key=lambda x: x[1], reverse=True)[:3]]\nprint(\"IDs of the top 3 hubs by HITS scores: {}\".format(hubs))\nprint(\"IDs of the top 3 auths by HITS scores: {}\".format(auths))","970d02f3":"# 2 Further Analyzing the Wikipedia voters network [33 points]\nFor this problem, we use the Wikipedia voters network. If you are using Python, you might\nwant to use NumPy, SciPy, and\/or Matplotlib libraries.\n\n","7b236b58":"## The number of directed edges in the network, i.e., the number of ordered pairs (a, b) \u2208 E for which a 6 = b. (G small has 3 directed edges.)","e0559927":"# 3 Finding Experts on the Java Programming Language on StackOverflow [40 points]\nDownload the StackOverflow network stackoverflow-Java.txt.gz: http:\/\/snap.stanford.edu\/class\/cs224w-data\/hw0\/stackoverflow-Java.txt.gz. An edge (a, b) in the network means that person a endorsed an answer from person b on a Java-related question. Using one of the network analysis tools above, load the StackOverflow network. Note that StackOverflow is a directed network. Compute and print out the following statistics for the stackoverflow-Java network:\n\n","fc47f4fe":"## IDs of the top 3 most central nodes in the network by PagePank scores. PageRank scores are calculated in Snap.py with function GetPageRank.","ea71472d":"## The number of nodes of zero out-degree. (G small has 1 node with zero out-degree.)","1664ae6b":"## (15 points) Compute and plot the least-square regression line for the out-degree distribution in the log-log scale plot. Note we want to find coefficients a and b such that the function log 10 y = a \u00b7 log 10 x + b, equivalently, y = 10 b \u00b7 x a , best fits the out-degree distribution. What are the coefficients a and b? For this part, you might want to use the method called polyfit in NumPy with deg parameter equal to 1.","9e031c24":"## (18 points) Plot the distribution of out-degrees of nodes in the network on a log-log scale. Each data point is a pair (x, y) where x is a positive integer and y is the number of nodes in the network with out-degree equal to x. Restrict the range of x between the minimum and maximum out-degrees. You may filter out data points with a 0 entry. For the log-log scale, use base 10 for both x and y axes.\n","56be03d3":"## The number of nodes with more than 10 outgoing edges (out-degree > 10).","c01fb38c":"## The number of reciprocated edges in the network, i.e., the number of unique unordered pairs of nodes (a, b), a 6 = b, for which (a, b) \u2208 E and (b, a) \u2208 E. (G small has 1 reciprocated edge.)","647fa2cb":"## IDs of the top 3 hubs and top 3 authorities in the network by HITS scores. HITS scores are calculated in Snap.py with function GetHits.","4cbe40c0":"## The number of nodes with fewer than 10 incoming edges (in-degree < 10).","f8e5c281":"## The number of nodes of zero in-degree. (G small has 0 nodes with zero in-degree.)","6bda2e47":"## The number of weakly connected components in the network. This value can be calculated in Snap.py via function GetWccs.","be072d31":"## The number of nodes in the network. (G small has 3 nodes.)","54cf2250":"## The number of nodes with a self-edge (self-loop), i.e., the number of nodes a \u2208 V where (a, a) \u2208 E. (G small has 1 self-edge.)","d4ab9e41":"You can find more details about this exercise on the Snap.py tutorial page: http:\/\/snap.stanford.edu\/proj\/snap-icwsm\/. As an extra exercise, extend the tutorial to find experts in other programming languages or topics.","136ccc20":"# Analyzing the Wikipedia voters network [27 points]\nDownload the Wikipedia voting network wiki-Vote.txt.gz: http:\/\/snap.stanford.edu\/data\/wiki-Vote.html.\nUsing one of the network analysis tools above, load the Wikipedia voting network. Note that\nWikipedia is a directed network. Formally, we consider the Wikipedia network as a directed\ngraph G = (V, E), with node set V and edge set E \u2282 V \u00d7 V where (edges are ordered pairs\nof nodes). An edge (a, b) \u2208 E means that user a voted on user b.  \nTo make our questions clearer, we will use the following small graph as a running example:  \nG small = (V small , E small ), where V small = {1, 2, 3} and  \nE small = {(1, 2), (2, 1), (1, 3), (1, 1)}.  \nCompute and print out the following statistics for the wiki-Vote network:\n","125d90b0":"## The number of undirected edges in the network, i.e., the number of unique unordered pairs (a, b), a 6 = b, for which (a, b) \u2208 E or (b, a) \u2208 E (or both). If both (a, b) and (b, a) are edges, this counts a single undirected edge. (G small has 2 undirected edges.)\n","a42d5fbd":"## The number of edges and the number of nodes in the largest weakly connected component. The largest weakly connected component is calculated in Snap.py with function GetMxWcc."}}