{"cell_type":{"35e178c6":"code","ec68f17c":"code","b9449e2d":"code","9d377df2":"code","68bafdff":"code","012d0ab9":"code","5f08a9ad":"code","73888021":"code","8026ac64":"code","5954d958":"code","c4fffeea":"code","d4373b08":"code","d5dfa759":"code","e9b423e9":"code","09334da8":"code","92169ec4":"code","102bf9a0":"code","653fb3d3":"code","c77d9379":"code","6890a090":"code","92b5af31":"markdown","2a9032dc":"markdown","c994b235":"markdown","b9d6e088":"markdown","d5614af2":"markdown","8ef6eb20":"markdown","5c24b694":"markdown","5684e9e1":"markdown","e6d58bf8":"markdown","743af22f":"markdown"},"source":{"35e178c6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport glob\nimport os\n\nimport tensorflow as tf\nimport keras\nfrom keras.models import Model\nfrom keras.layers import Flatten, Dense\nfrom keras.applications.densenet import DenseNet121\n\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.applications.densenet import preprocess_input\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nprint(\"Module and Packages imported successfully.....!\")","ec68f17c":"train_dir = \"C:\/Users\/Ganpati Kumar Roy\/Desktop\/5 Ocular Disease\/Training\/\"\nval_dir = \"C:\/Users\/Ganpati Kumar Roy\/Desktop\/5 Ocular Disease\/Validation\/\"","b9449e2d":"def get_files(directory):\n  if not os.path.exists(directory):\n    return 0\n  count=0\n  for current_path,dirs,files in os.walk(directory):\n    for dr in dirs:\n      count+= len(glob.glob(os.path.join(current_path,dr+\"\/*\")))\n  return count    ","9d377df2":"train_samples =get_files(train_dir)\nnum_classes=len(glob.glob(train_dir+\"\/*\"))\nval_samples=get_files(val_dir) \nprint(\"Classes are :- \", num_classes)\nprint(\"Total train images :-\", train_samples)\nprint(\"Total validation images :-\", val_samples)","68bafdff":"train_datagen=ImageDataGenerator(rescale=1.\/255,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   validation_split=0.2, \n                                   horizontal_flip=True)\n\nvalidation_datagen=ImageDataGenerator(rescale=1.\/255,\n                                   shear_range=0.2,\n                                   zoom_range=0.2,\n                                   validation_split=0.2, \n                                   horizontal_flip=True)","012d0ab9":"img_width,img_height =256,256\ninput_shape=(img_width,img_height,3)\nbatch_size =32\n\ntrain_generator =train_datagen.flow_from_directory(train_dir,\n                                                   target_size=(img_width,img_height),\n                                                   batch_size=batch_size)\nvalidation_generator = validation_datagen.flow_from_directory(\n                                                    val_dir, \n                                                    target_size=(img_height, img_width),\n                                                    batch_size=batch_size) ","5f08a9ad":"train_generator.class_indices","73888021":"from keras.layers import BatchNormalization, Activation\ndensenet = DenseNet121(input_shape=(256,256,3), weights = 'imagenet', include_top = False)\nfor layer in densenet.layers:\n    layer.trainable = False\n    \nx = Flatten()(densenet.output)\nx = BatchNormalization()(x)\nx = Activation('relu')(x)\nx = Dense(num_classes, activation = 'softmax')(x)\nmodel = Model(inputs = densenet.input, outputs = x)\n\nmodel.summary()","8026ac64":"opt=keras.optimizers.Adam(lr=0.001)\nmodel.compile(optimizer=opt,loss='categorical_crossentropy',metrics=['accuracy'])\ntrain=model.fit(train_generator,\n                          epochs=10,\n                          steps_per_epoch=train_generator.samples \/\/ batch_size,\n                          validation_data=validation_generator,\n                          validation_steps= validation_generator.samples \/\/ batch_size,\n                          verbose=1)","5954d958":"from tensorflow.keras.models import load_model\nmodel.save('5-OD_DenseNet121.h5')","c4fffeea":"train.history","d4373b08":"def plot_accuracy(train,title):\n    plt.title(title)\n    plt.plot(train.history['accuracy']) \n    plt.plot(train.history['val_accuracy']) \n    plt.ylabel('accuracy')\n    plt.xlabel('epoch')\n    plt.legend(['train_accuracy', 'validation_accuracy'], loc='best')\n    plt.show()\n    \ndef plot_loss(train,title):\n    plt.title(title)\n    plt.plot(train.history['loss'])\n    plt.plot(train.history['val_loss'])\n    plt.ylabel('loss')\n    plt.xlabel('epoch')\n    plt.legend(['train_loss', 'validation_loss'], loc='best')\n    plt.show()\n\n    \nplot_accuracy(train,'Training and Validation Accuracy')\nplot_loss(train,'Training and Validation Loss')","d5dfa759":"train_generator.reset()\npredictions = model.predict_generator(generator = train_generator)\ny_pred = [np.argmax(probas) for probas in predictions]\ny_test = train_generator.classes","e9b423e9":"labels_map = (train_generator.class_indices)\nlabels = dict((v,k) for k,v in labels_map.items())\npredict = [labels[k] for k in y_pred]\n\nfilenames = train_generator.filenames\nresults = pd.DataFrame({\"Filename\":filenames,\"Predictions\":predict})","09334da8":"from sklearn.metrics import confusion_matrix\ndef plot_confusion_matrix(test_y,predict_y):\n    c = confusion_matrix(test_y, predict_y)\n    cmap = sns.light_palette(\"blue\")\n    plt.figure(figsize=(10,4))\n    sns.heatmap(c, annot = True, cmap=cmap, fmt=\".1f\", xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()","92169ec4":"import seaborn as sns\nplot_confusion_matrix(y_test, y_pred) ","102bf9a0":"validation_generator.reset()\npredictions = model.predict_generator(generator = validation_generator)\ny_pred = [np.argmax(probas) for probas in predictions]\ny_test = validation_generator.classes","653fb3d3":"labels_map = (train_generator.class_indices)\nlabels = dict((v,k) for k,v in labels_map.items())\npredict = [labels[k] for k in y_pred]\n\nfilenames = validation_generator.filenames\nresults = pd.DataFrame({\"Filename\":filenames,\"Predictions\":predict})","c77d9379":"from sklearn.metrics import confusion_matrix\ndef plot_confusion_matrix(test_y,predict_y):\n    c = confusion_matrix(test_y, predict_y)\n    cmap = sns.light_palette(\"blue\")\n    plt.figure(figsize=(10,4))\n    sns.heatmap(c, annot = True, cmap=cmap, fmt=\".1f\", xticklabels=labels, yticklabels=labels)\n    plt.xlabel('Predicted Class')\n    plt.ylabel('Original Class')\n    plt.show()","6890a090":"import seaborn as sns\nplot_confusion_matrix(y_test, y_pred) ","92b5af31":"#### DenseNet 121 Parameter Building","2a9032dc":"#### Loading Dataset","c994b235":"##### Validation :-","b9d6e088":"#### Model Saving","d5614af2":"#### Confusion Matrix","8ef6eb20":"#### Data Preprocessing","5c24b694":"#### About Dataset :--\n* Dataset is downloaded from IEEE dataport.\n* There are 10 classes in the dataset which contain 10 types of eye disease.\n** Diabetic Retinopathy :- It is an eye disease that can cause vision loss and blindness in people who have diabetes and  it affects the blood vessels in the retina.\n** Glaucoma Positive :- Glaucoma is an eye disease that damage the optic nerve and optic nerve supplies visual information from eye to brain.\n** Glaucoma Negative\n** Maculopathy :- It is a disease that affects the back of the retina, called the macula. The macula controls the ability to read, see fine detail in objects and recognize faces and colors.\n** Large Optic Cup :- Optic cup is the white, cup-like area in the center of the optic disc.\n** Blindness\n** Blur Fundus\n** BRVO :- Branch Retinal Vein Occlusion is a blockage of one or more branches of the central retinal vein, which runs through the optic nerve.\n** Pathological Myopia :- Pathological myopia is an extremely high amount of nearsightedness that causes a major alteration of the shape or globe of the eye, which may lead to profound vision loss.\n** Rhegmatogenous RD :- Rhegmatogenous detachments are caused by a hole or tear in the retina that allows fluid to pass through and collect underneath the retina, pulling the retina away from underlying tissues. \n","5684e9e1":"#### Data Read ","e6d58bf8":"##### Training :-","743af22f":"#### Accuracy Graph"}}