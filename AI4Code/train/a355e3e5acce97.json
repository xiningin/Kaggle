{"cell_type":{"d300bfe3":"code","0f763165":"code","ac14ab3e":"code","52aede4d":"code","09f20715":"code","90b92546":"code","0838678b":"code","3ab8f1c5":"code","ae9d9f73":"code","1f25d7db":"code","dbf8c413":"code","7b7cdd9f":"code","af73925c":"code","db9f97d3":"code","134844f9":"code","21261bad":"code","2998f595":"code","fd916886":"code","56a3c41d":"code","55fafe6e":"code","c3fbd253":"code","116e16fe":"code","37be8892":"code","c1bf0526":"code","6c5fe06c":"code","6f7cdbfe":"code","01215a74":"code","d9e2b4d2":"code","fd634132":"code","2b3773d7":"code","ce3d79d1":"code","2579ebed":"code","794bc606":"code","e818fa16":"code","57254f17":"code","405512f9":"code","c7ba6a9a":"code","40d6c9e1":"code","434d2ef0":"code","b7fdd50a":"code","87ce4e47":"code","02f5a314":"code","b808922d":"code","72d869b6":"code","b8824165":"code","88830f09":"code","8d2db252":"code","974b269d":"code","d0b514f8":"code","45d4ea60":"code","08d078f3":"code","74c4ae1a":"code","c52a8819":"code","e4473329":"code","030d963a":"code","327bd31b":"code","72f7b9a1":"code","b1d24130":"code","ac140d0e":"code","9a9e68a7":"code","c5a13ec8":"code","241784f5":"code","3f644811":"code","863cec65":"code","5de5363c":"code","0d0c9216":"code","7af65dee":"code","af9b4665":"code","ab757a01":"code","d386e4df":"code","7485678e":"code","2775915b":"code","0feaf632":"code","83ed4b82":"code","cfc45431":"code","66ec0a8b":"code","714192c3":"code","9dd274c6":"code","dc9d443d":"code","237e1832":"code","e9555f4d":"code","c2f31bdb":"code","ab69f27a":"code","a6979bff":"code","46c9e170":"code","7e79c706":"code","916d6041":"code","44f49724":"code","53669420":"code","a45c0190":"code","a2a782f9":"code","da2b9b13":"code","e46cc2d0":"code","48a5a2ef":"code","ee4ab035":"code","f4be0a46":"markdown","799d0557":"markdown","376051d7":"markdown","b767abd5":"markdown","5eb80331":"markdown","788538b1":"markdown","7d1f3b6c":"markdown","c69e3329":"markdown","2d7471ba":"markdown","71102db8":"markdown","a47fd594":"markdown","0ac0a63e":"markdown","4ced916d":"markdown","f5429e21":"markdown","d3f8bd1f":"markdown","b7c0862a":"markdown","f5c89002":"markdown","b97e9f0c":"markdown","4809ed90":"markdown","86b9dd72":"markdown","007317f3":"markdown","c1028ad0":"markdown","3c067c6a":"markdown","c82920f9":"markdown","f064251d":"markdown","6afe3d1b":"markdown","52e6b9c1":"markdown","2659a058":"markdown","1fca9f2d":"markdown"},"source":{"d300bfe3":"import numpy as np #for linear algebra and scientific computing\nimport pandas as pd #data analysis and manipulation\n\n# Input data files are available in the read-only \"..\/input\/\" directory\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","0f763165":"#data visualization libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ac14ab3e":"from sklearn.model_selection import train_test_split #split into training and testing data\nfrom sklearn.metrics import mean_squared_error #RMSE for evaluation\nfrom sklearn.model_selection import GridSearchCV #for exhaustive grid search(hyperparameter tuning)\n\n#encoders for categorical data\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder\nimport category_encoders as ce","52aede4d":"cars_Train = pd.read_csv(\"\/kaggle\/input\/used-cars-price-prediction\/train-data.csv\", index_col=0)\ncars_Test = pd.read_csv(\"\/kaggle\/input\/used-cars-price-prediction\/test-data.csv\", index_col=0)","09f20715":"cars = cars_Train.copy()","90b92546":"cars.head()","0838678b":"cars.info()","3ab8f1c5":"cars.describe()","ae9d9f73":"#1   Location\nplt.xticks(rotation = 90)\nsns.countplot(cars.Location)","1f25d7db":"#2   Year\nplt.xticks(rotation = 90)\nsns.countplot(cars.Year)","dbf8c413":"#3   Kilometers_Driven\nsns.distplot(cars[cars.Kilometers_Driven<500000].Kilometers_Driven, kde=False)","7b7cdd9f":"#setting the outliers as nan\ncars.loc[cars.Kilometers_Driven > 400000, \"Kilometers_Driven\"] = np.nan","af73925c":"#4   Fuel_Type\nsns.countplot(cars.Fuel_Type)","db9f97d3":"#5   Transmission\nsns.countplot(cars.Transmission, palette=\"Reds_r\")","134844f9":"#6   Owner_Type\nsns.countplot(cars.Owner_Type, order=['First','Second','Third','Fourth & Above'])","21261bad":"#7   Mileage\nprint(\"Null values:\", cars.Mileage.isnull().sum())\nprint(\"Outliers:\",(cars.Mileage==0).sum())","2998f595":"#Removing units and extracting numerical data from mileage\ncars.Mileage = cars.Mileage.str.split(expand=True)[0].astype(\"float64\")","fd916886":"#set the outliers as null\ncars[cars.Mileage==0].Mileage = np.nan","56a3c41d":"sns.distplot(cars.Mileage, kde=False)","55fafe6e":"#7   Engine\nprint(\"Total null values:\",cars.Engine.isnull().sum())\ncars[cars.Engine.isnull()].head()","c3fbd253":"#Removing units and extracting numerical data from Engine\ncars.Engine = cars.Engine.str.split(expand=True)[0].astype(\"float64\")","116e16fe":"sns.distplot(cars.Engine, kde=False)","37be8892":"#8 Power\nprint(\"Total null values:\",cars.Power.isnull().sum())\ncars[cars.Power.isnull()].head()","c1bf0526":"#Removing units and extracting numerical data from Power\ncars.Power = cars.Power.apply(lambda s: np.nan if \"null\" in str(s) else s).str.split(expand=True)[0].astype(\"float64\")","6c5fe06c":"sns.distplot(cars.Power, kde=False)","6f7cdbfe":"#9 Seats\nprint(\"Total null values:\",cars.Seats.isnull().sum())\ncars[cars.Seats.isnull()].head()","01215a74":"cars.loc[cars.Seats<1,\"Seats\"] = np.nan","d9e2b4d2":"sns.distplot(cars.Seats, kde=False)","fd634132":"#10 New_Price\nprint(\"Total null values:\",cars.New_Price.isnull().sum())\ncars[cars.New_Price.isnull()].head()","2b3773d7":"cars.New_Price = cars.New_Price.apply(lambda s: float(s.split()[0])*100 if \"Cr\" in str(s) else str(s).split()[0]).astype(\"float64\")","ce3d79d1":"print(\"Total null values:\",cars.New_Price.isnull().sum())\nsns.distplot(cars.New_Price, kde=False)","2579ebed":"#sns.pairplot(cars)","794bc606":"sns.heatmap(cars.corr(), cmap=\"coolwarm\")","e818fa16":"carnames = cars.Name.str.split(expand=True)[[0,1,2]]","57254f17":"carnames.rename(columns={0:'Brand',1:'Model',2:'Type'}, inplace=True)","405512f9":"cars = cars.join(carnames)\ncars = cars.drop(\"Name\", axis=1)","c7ba6a9a":"from itertools import combinations\n\nobject_cols = cars.select_dtypes(\"object\").columns\nlow_cardinality_cols = [col for col in object_cols if cars[col].nunique() < 15]\nlow_cardinality_cols.append(\"Brand\")\ninteractions = pd.DataFrame(index=cars.index)\n\n# Iterate through each pair of features, combine them into interaction features\nfor features in combinations(low_cardinality_cols,2):\n    \n    new_interaction = cars[features[0]].map(str)+\"_\"+cars[features[1]].map(str)\n    \n    encoder = LabelEncoder()\n    interactions[\"_\".join(features)] = encoder.fit_transform(new_interaction)","40d6c9e1":"cars = cars.join(interactions) #append to the dataset","434d2ef0":"cars.head(5)","b7fdd50a":"# cars.info()","87ce4e47":"features = cars.drop([\"Price\"], axis=1)\ntarget = cars[\"Price\"]\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.25, random_state=0)","02f5a314":"X_train.isnull().sum()","b808922d":"num_cols = X_train.drop('New_Price',1).select_dtypes(\"number\")\nnull_num_cols = num_cols.columns[num_cols.isnull().any()]\n\nfor cols in null_num_cols:\n    X_train.loc[:,cols] = X_train.loc[:,cols].fillna(X_train.groupby('Brand')[cols].transform('mean'))\n    X_train.loc[:,cols] = X_train.loc[:,cols].fillna(X_train[cols].mean())\n\n    X_test.loc[:,cols] = X_test.loc[:,cols].fillna(X_test.groupby('Brand')[cols].transform('mean'))\n    X_test.loc[:,cols] = X_test.loc[:,cols].fillna(X_test[cols].mean())","72d869b6":"# #Binning #didn't provide improvement to results\n# #Year\n# X_train=X_train.drop('Year',1).join(pd.cut(X_train.Year, range(1996,2021,4), False, range(6)).astype('int64'))\n# X_test=X_test.drop('Year',1).join(pd.cut(X_test.Year, range(1996,2021,4), False, range(6)).astype('int64'))\n\n# #Kilometers_Driven\n# X_train=X_train.drop('Kilometers_Driven',1).join(pd.cut(X_train.Kilometers_Driven, range(0,300001,10000), labels= range(30)).astype('int64'))\n# X_test=X_test.drop('Kilometers_Driven',1).join(pd.cut(X_test.Kilometers_Driven, range(0,300001,10000), labels= range(30)).astype('int64'))","b8824165":"cars.select_dtypes(\"object\").nunique()","88830f09":"OHE_cat_features = [\"Fuel_Type\",\"Transmission\", \"Location\", \"Owner_Type\", \"Brand\"]\nOH_encoder = OneHotEncoder(sparse=False,handle_unknown='ignore')\n\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(X_train[OHE_cat_features]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(X_test[OHE_cat_features]))\n\nOH_cols_train.index = X_train.index\nOH_cols_test.index = X_test.index\n\nOH_cols_train.columns = OH_encoder.get_feature_names(OHE_cat_features)\nOH_cols_test.columns = OH_encoder.get_feature_names(OHE_cat_features)\n\nX_train_enc = X_train.join(OH_cols_train)\nX_test_enc = X_test.join(OH_cols_test)","8d2db252":"X_train_enc.drop(OHE_cat_features, axis=1, inplace = True)\nX_test_enc.drop(OHE_cat_features, axis=1, inplace = True)","974b269d":"target_cat_features = X_train_enc.select_dtypes('object').columns\ntarget_enc = ce.TargetEncoder(cols=target_cat_features)\ntarget_enc.fit(X_train[target_cat_features], y_train)\nX_train_enc = X_train_enc.join(target_enc.transform(X_train[target_cat_features]).add_suffix('_enc'))\nX_test_enc = X_test_enc.join(target_enc.transform(X_test[target_cat_features]).add_suffix('_enc'))","d0b514f8":"object_cols = X_train_enc.select_dtypes('object')\nX_train_enc.drop(object_cols, axis=1, inplace = True)\nX_test_enc.drop(object_cols, axis=1, inplace = True)","45d4ea60":"# X_train_enc=X_train_enc.astype('int64')\n# X_test_enc=X_test_enc.astype('int64')","08d078f3":"X_train_enc.info()","74c4ae1a":"pcorr = X_train_enc.join(y_train).corr()\nimp_corr_cols = pcorr[['Price']][pcorr['Price']>-0.25].iloc[:-1].index\n\nX_train_enc = X_train_enc[imp_corr_cols]\nX_test_enc = X_test_enc[imp_corr_cols]","c52a8819":"from xgboost import XGBRegressor","e4473329":"base_xgbr = XGBRegressor(objective='reg:squarederror', tree_method='gpu_hist')\nbase_xgbr.fit(X_train_enc,y_train)\n\nbase_xgbr.score(X_test_enc,y_test) #r2 score","030d963a":"yhat_xgbr = base_xgbr.predict(X_test_enc)\nprint(mean_squared_error(y_test, yhat_xgbr, squared=False))\nsns.kdeplot(y_test)\nsns.kdeplot(yhat_xgbr)","327bd31b":"feat_imp = pd.DataFrame(base_xgbr.feature_importances_, index=X_train_enc.columns)\nsns.heatmap(feat_imp, cmap='Purples')","72f7b9a1":"impfeat = pd.Series(base_xgbr.feature_importances_, index=X_train_enc.columns)\nimpcols = impfeat[impfeat>0.005].index\nX_train_enc = X_train_enc[impcols]\nX_test_enc = X_test_enc[impcols]","b1d24130":"sns.heatmap(X_train_enc.join(y_train).corr()[['Price']], cmap='Reds')","ac140d0e":"#testing xgbr model\n# param_grid = {\n#     \"learning_rate\": [0.05],\n#     \"max_depth\": [6,8,10,12],\n#     \"min_child_weight\": [5],\n#     \"n_estimators\": [350,400,450,500],\n#     \"subsample\": [0.55]\n# }\n# gscv = GridSearchCV(estimator=base_xgbr, param_grid=param_grid, n_jobs=-1, verbose=5, cv=4)","9a9e68a7":"# gscv.fit(X_train_enc, y_train)","c5a13ec8":"#the best params from the given parameter grid\n# gscv.best_params_\n# gscv.score(X_test_enc,y_test) #r2 score","241784f5":"# tuned_xgbr = XGBRegressor(objective = 'reg:squarederror',\n#                     learning_rate = 0.05, max_depth = 12, min_child_weight = 5,\n#                     n_estimators = 500, subsample = 0.55)\n# tuned_xgbr.fit(X_train_enc,y_train)\n\n# tuned_xgbr.score(X_test_enc,y_test) #r2 score","3f644811":"# yhat_xgbr = tuned_xgbr.predict(X_test_enc)\n# print(mean_squared_error(y_test, yhat_xgbr, squared=False))\n# sns.kdeplot(y_test)\n# sns.kdeplot(yhat_xgbr)","863cec65":"from lightgbm import LGBMRegressor","5de5363c":"base_lgbmr = LGBMRegressor()","0d0c9216":"base_lgbmr.fit(X_train_enc, y_train)\nbase_lgbmr.score(X_test_enc,y_test)","7af65dee":"yhat_lgbmr = base_lgbmr.predict(X_test_enc)\nprint(mean_squared_error(y_test, yhat_lgbmr, squared=False))\nsns.kdeplot(y_test)\nsns.kdeplot(yhat_lgbmr)","af9b4665":"#feature importance\n#pd.Series(base_lgbmr.feature_importances_, index=X_train_enc.columns)","ab757a01":"base_lgbmr.get_params()","d386e4df":"#initial grid search\nparam_grid = {\n    \"learning_rate\": [0.15],\n    \"max_depth\": [5,8,10,12],\n    \"min_child_weight\": [3,5,6,8],\n    \"n_estimators\": [300,500,800,1000,1200],\n    \"num_leaves\": [20,25,40,50],\n    \"subsample\": [0.3,0.5]\n}\n# gscv_lgbm = GridSearchCV(estimator=base_lgbmr, param_grid=param_grid, n_jobs=-1, verbose=5, cv=4)","7485678e":"# gscv_lgbm.fit(X_train_enc, y_train)","2775915b":"# gscv_lgbm.best_params_","0feaf632":"# gscv_lgbm.score(X_test_enc,y_test) #r2 score","83ed4b82":"param_grid2 = {\n    \"learning_rate\": [0.15],\n    \"max_depth\": [8],\n    \"n_estimators\": [1500,1800],\n    \"num_leaves\": [25,27],\n    'reg_alpha': [0,0.001,0.01],\n    'reg_lambda': [0,0.001,0.01]\n}\ngscv_lgbm2 = GridSearchCV(estimator=base_lgbmr, param_grid=param_grid2, n_jobs=-1, verbose=5, cv=4)","cfc45431":"gscv_lgbm2.fit(X_train_enc, y_train)","66ec0a8b":"print(gscv_lgbm2.best_params_)\nprint(gscv_lgbm2.score(X_test_enc,y_test)) #r2 score","714192c3":"tuned_lgbmr = LGBMRegressor(**gscv_lgbm2.best_params_)\ntuned_lgbmr.fit(X_train_enc, y_train)\ntuned_lgbmr.score(X_test_enc,y_test)","9dd274c6":"yhat_lgbmr = tuned_lgbmr.predict(X_test_enc)\nprint(mean_squared_error(y_test, yhat_lgbmr, squared=False))\nsns.kdeplot(y_test)\nsns.kdeplot(yhat_lgbmr)","dc9d443d":"# Custom Label Encoder for handling unknown values\nclass LabelEncoderExt(object):\n    def __init__(self):\n        \"\"\"\n        It differs from LabelEncoder by handling new classes and providing a value for it [Unknown]\n        Unknown will be added in fit and transform will take care of new item. It gives unknown class id\n        \"\"\"\n        self.label_encoder = LabelEncoder()\n        # self.classes_ = self.label_encoder.classes_\n\n    def fit(self, data_list):\n        \"\"\"\n        This will fit the encoder for all the unique values and introduce unknown value\n        :param data_list: A list of string\n        :return: self\n        \"\"\"\n        self.label_encoder = self.label_encoder.fit(list(data_list) + ['Unknown'])\n        self.classes_ = self.label_encoder.classes_\n\n        return self\n\n    def transform(self, data_list):\n        \"\"\"\n        This will transform the data_list to id list where the new values get assigned to Unknown class\n        :param data_list:\n        :return:\n        \"\"\"\n        new_data_list = list(data_list)\n        for unique_item in np.unique(data_list):\n            if unique_item not in self.label_encoder.classes_:\n                new_data_list = ['Unknown' if x==unique_item else x for x in new_data_list]\n\n        return self.label_encoder.transform(new_data_list)\n","237e1832":"X_train = cars_Train.drop('Price',1)\ny_train = cars.Price\nX_test = cars_Test","e9555f4d":"carnames = X_train.Name.str.split(expand=True)[[0,1,2]]\ncarnames_test = X_test.Name.str.split(expand=True)[[0,1,2]]\n\ncarnames.rename(columns={0:'Brand',1:'Model',2:'type'}, inplace=True)\ncarnames_test.rename(columns={0:'Brand',1:'Model',2:'type'}, inplace=True)\n\nX_train = X_train.join(carnames)\nX_train = X_train.drop(\"Name\", axis=1)\nX_test = X_test.join(carnames_test)\nX_test = X_test.drop(\"Name\", axis=1)","c2f31bdb":"object_cols = X_train.select_dtypes(\"object\").columns\nlow_cardinality_cols = [col for col in object_cols if X_train[col].nunique() < 15]\nlow_cardinality_cols.append(\"Brand\")\ninteractions = pd.DataFrame(index=X_train.index)\ninteractions_test = pd.DataFrame(index=X_test.index)\n\nfor features in combinations(low_cardinality_cols,2):\n    \n    new_interaction = X_train[features[0]].map(str)+\"_\"+X_train[features[1]].map(str)\n    new_interaction_test = X_test[features[0]].map(str)+\"_\"+X_test[features[1]].map(str)\n    \n    encoder = LabelEncoderExt()\n    encoder.fit(new_interaction)\n    interactions[\"_\".join(features)] = encoder.transform(new_interaction)\n    interactions_test[\"_\".join(features)] = encoder.transform(new_interaction_test)","ab69f27a":"X_train = X_train.join(interactions)\nX_test = X_test.join(interactions_test)","a6979bff":"num_cols = X_train.drop('New_Price',1).select_dtypes(\"number\")\nnull_num_cols = num_cols.columns[num_cols.isnull().any()]\n\nfor cols in null_num_cols:\n    X_train.loc[:,cols] = X_train.loc[:,cols].fillna(X_train.groupby('Brand')[cols].transform('mean'))\n    X_train.loc[:,cols] = X_train.loc[:,cols].fillna(X_train[cols].mean())\n\n    X_test.loc[:,cols] = X_test.loc[:,cols].fillna(X_test.groupby('Brand')[cols].transform('mean'))\n    X_test.loc[:,cols] = X_test.loc[:,cols].fillna(X_test[cols].mean())","46c9e170":"num_cols = X_train.select_dtypes(\"number\")\nnull_num_cols = num_cols.columns[num_cols.isnull().any()]\n\nfor cols in null_num_cols:\n    X_train.loc[:,cols] = X_train.loc[:,cols].fillna(X_train.groupby('Brand')[cols].transform('mean'))\n    X_train.loc[:,cols] = X_train.loc[:,cols].fillna(X_train[cols].mean())\n\n    X_test.loc[:,cols] = X_test.loc[:,cols].fillna(X_test.groupby('Brand')[cols].transform('mean'))\n    X_test.loc[:,cols] = X_test.loc[:,cols].fillna(X_test[cols].mean())","7e79c706":"OHE_cat_features = [\"Fuel_Type\",\"Transmission\", \"Location\", \"Owner_Type\", \"Brand\"]\nOH_encoder = OneHotEncoder(sparse=False,handle_unknown='ignore')\n\nOH_cols_train = pd.DataFrame(OH_encoder.fit_transform(X_train[OHE_cat_features]))\nOH_cols_test = pd.DataFrame(OH_encoder.transform(X_test[OHE_cat_features]))\n\nOH_cols_train.index = X_train.index\nOH_cols_test.index = X_test.index\n\nOH_cols_train.columns = OH_encoder.get_feature_names(OHE_cat_features)\nOH_cols_test.columns = OH_encoder.get_feature_names(OHE_cat_features)\n\nX_train_enc = X_train.join(OH_cols_train)\nX_test_enc = X_test.join(OH_cols_test)","916d6041":"X_train_enc.drop(OHE_cat_features, axis=1, inplace = True)\nX_test_enc.drop(OHE_cat_features, axis=1, inplace = True)","44f49724":"target_cat_features = X_train_enc.select_dtypes('object').columns\ntarget_enc = ce.TargetEncoder(cols=target_cat_features)\ntarget_enc.fit(X_train[target_cat_features], y_train)\nX_train_enc = X_train_enc.join(target_enc.transform(X_train[target_cat_features]).add_suffix('_enc'))\nX_test_enc = X_test_enc.join(target_enc.transform(X_test[target_cat_features]).add_suffix('_enc'))","53669420":"object_cols = X_train_enc.select_dtypes('object')\nX_train_enc.drop(object_cols, axis=1, inplace = True)\nX_test_enc.drop(object_cols, axis=1, inplace = True)","a45c0190":"pcorr = X_train_enc.join(y_train).corr()\nimp_corr_cols = pcorr[['Price']][pcorr['Price']>-0.25].iloc[:-1].index\n\nX_train_enc = X_train_enc[imp_corr_cols]\nX_test_enc = X_test_enc[imp_corr_cols]","a2a782f9":"xgbr = XGBRegressor(objective='reg:squarederror', tree_method='gpu_hist')\nxgbr.fit(X_train_enc,y_train)","da2b9b13":"impfeat = pd.Series(xgbr.feature_importances_, index=X_train_enc.columns)\nimpcols = impfeat[impfeat>0.005].index\nX_train_enc = X_train_enc[impcols]\nX_test_enc = X_test_enc[impcols]","e46cc2d0":"lgbmr = LGBMRegressor(**gscv_lgbm2.best_params_)\n\nlgbmr.fit(X_train_enc, y_train)","48a5a2ef":"preds_test = lgbmr.predict(X_test_enc)","ee4ab035":"output = pd.DataFrame({'Id': X_test.index,\n                       'SalePrice': preds_test})\noutput.to_csv('submission.csv', index=False)","f4be0a46":"***Creating new features using combinations of categorical columns***","799d0557":"***Let's predict***","376051d7":"### Tuned LGBM model","b767abd5":"*The null values in `Mileage` is because `Fuel_Type` is `Electric`.*","5eb80331":"*Conversion of all columns into int64*","788538b1":"*Visualizing pearson correlation of finally selected columns*","7d1f3b6c":"***Some Feature Engineering and Preprocessing***","c69e3329":"### Let's explore the data","2d7471ba":"*The Tuned LGBM Regressor model will be used as the final model for our predictions*","71102db8":"### Base LGBM model","a47fd594":"*One-hot encoding*","0ac0a63e":"*Now, let's see those missing values*","4ced916d":"*Let's apply the feature engineering and preprocessing to the training and testing data*","f5429e21":"### Encoding the categorical columns","d3f8bd1f":"***Feature selection based on pearson correlation***","b7c0862a":"***Extracting brand and model names from name***","f5c89002":"*Drop OHE encoded columns*","b97e9f0c":"*Target encoding*","4809ed90":"*We need to fill missing values in Engine, Power and Seats only. Missing values in Subtype and Subtype_2 would provide a feature.*\n\n*Note: XGBoost and Light GBM have an inbuilt feature to handle missing values. So, we can also leave missing values as it is.*\n\n*Let's fill missing values based on brand column.*\n","86b9dd72":"*Model Training*","007317f3":"***Feature selection based on XGBoost model***","c1028ad0":"*Note: We will impute Engine, Power and seats based on Brand(extract brand during feature engineering).*","3c067c6a":"*We can observe outliers in the data as kilometers driven cannot be so large*","c82920f9":"*Drop categorical columns(dtype: object)*","f064251d":"*Now, we need to impute the missing values*\n\n*And before that we need to do train test split to prevent data leakage*","6afe3d1b":"***Let's preprocess our original training data.***","52e6b9c1":"*Feature importance based on the XGBoost model*","2659a058":"***XGB model***","1fca9f2d":"*Visualizing the test results*"}}