{"cell_type":{"8bf23830":"code","e39d6a1c":"code","e47ce00c":"code","b38723bd":"code","372e891f":"code","fc5b4826":"code","036cd305":"code","f0686382":"code","79ffbaa5":"code","cab356c8":"code","2ab2745f":"code","bbabe857":"code","74108b41":"code","07e12410":"code","df61766e":"code","03961324":"code","8ffff9da":"code","a69a6e26":"code","a5c8f007":"code","92add54b":"code","a72962f6":"code","5477fb88":"code","ac8c341a":"code","7b9f3370":"code","0e39738c":"code","ae4da699":"code","dd8c945b":"code","1ada45d4":"code","ce084afc":"code","2450aa52":"code","b07ac3dc":"code","40a962bd":"code","638d1a3a":"code","c2207afc":"code","30aee849":"code","0625eced":"code","6579eb81":"code","44b21647":"code","c3f305f5":"code","7cc79b36":"code","129f41bf":"code","00846d0c":"code","2bc0a4b0":"code","02b28e2f":"code","4a1f9251":"code","ebdf5a08":"code","b2fb4ecf":"markdown","8129fffb":"markdown","6a3029e8":"markdown","fe18e28e":"markdown","9fe2208e":"markdown","5f7b372d":"markdown","ccda90d1":"markdown","04962bb4":"markdown","033102bb":"markdown","f38b4372":"markdown","b01aebfd":"markdown","5db26af5":"markdown","fd38d92b":"markdown","ea1bd883":"markdown","a89553b0":"markdown","f8f9e311":"markdown","ceb836fa":"markdown","ab01b640":"markdown","98c62aea":"markdown","23190657":"markdown","c5fddef9":"markdown","1dbac35d":"markdown"},"source":{"8bf23830":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n","e39d6a1c":"iris=pd.read_csv(\"..\/input\/iris-flower-dataset\/IRIS.csv\")","e47ce00c":"iris.head()","b38723bd":"iris.tail()","372e891f":"iris.isnull().sum()","fc5b4826":"iris.shape","036cd305":"iris.info()","f0686382":"iris.describe()","79ffbaa5":"iris['species'].value_counts()","cab356c8":"sns.countplot('species',data=iris)\nplt.show()","2ab2745f":"sns.FacetGrid(iris,hue=\"species\",height=5).map(sns.distplot,\"petal_length\").add_legend();\n\n","bbabe857":"sns.FacetGrid(iris,hue=\"species\",height=5).map(sns.distplot,\"petal_width\").add_legend();","74108b41":"sns.FacetGrid(iris,hue=\"species\",height=5).map(sns.distplot,\"sepal_width\").add_legend();","07e12410":"sns.FacetGrid(iris,hue=\"species\",height=5).map(sns.distplot,\"sepal_length\").add_legend();","df61766e":"plt.figure(figsize=(7,7))\nsns.set_style('whitegrid')\nsns.scatterplot(x=iris['sepal_length'], y=iris['sepal_width'], hue=iris['species'], palette=['green','orange','dodgerblue'])","03961324":"plt.figure(figsize=(7,5))\nsns.set_style('whitegrid')\nsns.scatterplot(x=iris['petal_length'], y=iris['petal_width'], hue=iris['species'], palette=['green','orange','dodgerblue'])","8ffff9da":"plt.figure(figsize=(7,7))\nsns.set_style('whitegrid')\nsns.pairplot(data=iris, hue='species', palette=['green','orange','dodgerblue'])","a69a6e26":"plt.figure(figsize=(7,5))\nsns.heatmap(iris.corr(),annot=True,cmap='cubehelix_r')\n#draws  heatmap with input as the correlation matrix calculted by(iris.corr())\nplt.show()","a5c8f007":"x = iris.drop(['species'],axis=1)\ny = iris.species","92add54b":"from sklearn.preprocessing import StandardScaler\nx = StandardScaler().fit_transform(x)","a72962f6":"iris.describe()","5477fb88":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn import metrics","ac8c341a":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=123)","7b9f3370":"x_train.shape","0e39738c":"y_train.head()","ae4da699":"x_train.shape,x_test.shape","dd8c945b":"y_train.shape,y_test.shape","1ada45d4":"model=DecisionTreeClassifier()\nmodel.fit(x_train,y_train)\nprediction=model.predict(x_test)\nprint('The accuracy of the Decision Tree is',metrics.accuracy_score(prediction,y_test))","ce084afc":"model=LogisticRegression()\nmodel.fit(x_train,y_train)\nprediction=model.predict(x_test)\nprint('The accuracy of the Logistic Regression is',metrics.accuracy_score(prediction,y_test))                         \n                         \n          ","2450aa52":"from sklearn.cluster import KMeans\nwcss = []\n\nfor i in range(1, 11):\n    kmeans = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\n    kmeans.fit(x)\n    wcss.append(kmeans.inertia_)","b07ac3dc":"plt.plot(range(1, 11), wcss)\nplt.title('The elbow method')\nplt.xlabel('Number of clusters')\nplt.ylabel('WCSS')\nplt.show()","40a962bd":"kmeans = KMeans(n_clusters = 3, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)\ny_kmeans = kmeans.fit_predict(x)","638d1a3a":"y_kmeans","c2207afc":"centroids=kmeans.cluster_centers_\ncentroids","30aee849":"iris1=iris.copy()\niris1[\"species\"]=iris1[\"species\"].map({'Iris-versicolor':0,'Iris-setosa':1,'Iris-virginica':2}).astype(int)\niris1.head()","0625eced":"plt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], s = 70, label = 'Iris-setosa')\nplt.scatter(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1], s = 70, label = 'Iris-versicolour')\nplt.scatter(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1], s = 70, label = 'Iris-virginica')\n\n#Plotting the centroids of the clusters\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 70, c = 'black', label = 'Centroids')\n\nplt.legend()","6579eb81":"fig = plt.figure(figsize = (10,10))\nax = fig.add_subplot(111, projection='3d')\nplt.scatter(x[y_kmeans == 0, 0], x[y_kmeans == 0, 1], s = 100, label = 'Iris-setosa')\nplt.scatter(x[y_kmeans == 1, 0], x[y_kmeans == 1, 1], s = 100, label = 'Iris-versicolour')\nplt.scatter(x[y_kmeans == 2, 0], x[y_kmeans == 2, 1], s = 100, label = 'Iris-virginica')\n\nplt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s = 70, c = 'black', label = 'Centroids')\nplt.show()","44b21647":"iris_cov_matrix = np.cov(x.T)\niris_cov_matrix","c3f305f5":"eig_vals, eig_vecs = np.linalg.eig(iris_cov_matrix)\nprint('\\nEigenvalues \\n%s' %eig_vals)\nprint('Eigenvectors \\n%s' %eig_vecs)","7cc79b36":"eig_pairs = [(np.abs(eig_vals[i]), eig_vecs[:,i]) for i in range(len(eig_vals))]\nprint('Eigenvalues in descending order:')\nfor i in eig_pairs:\n    print(i[0])","129f41bf":"total = sum(eig_vals)\nvar_exp = [(i \/ total)*100 for i in sorted(eig_vals, reverse=True)]\ncum_var_exp = np.cumsum(var_exp)\nprint('Variance captured by each component is \\n',var_exp)\nprint('Cumulative variance captured as we travel with each component \\n',cum_var_exp)","00846d0c":"from sklearn import decomposition\n\npca = decomposition.PCA(n_components=2)\n\nx_transform = pca.fit_transform(x)","2bc0a4b0":"pc_df = pd.DataFrame(data = x_transform, columns = ['PC1', 'PC2'])\npc_df['species'] = y","02b28e2f":"pc_df.head()","4a1f9251":"pca.get_covariance()","ebdf5a08":"explained_variance=pca.explained_variance_ratio_\nexplained_variance","b2fb4ecf":"The flowers are classified by the features\n\n* sepal lenght in cm\n\n* sepal width in cm\n\n* petal lenth in cm\n\n* petal lenght in cm","8129fffb":"From above plot we can see that,\n\nIn case of sepal length & sepal width, setosa is easily seperable but versicolor & virginica have some overlap.\nIn case of petal length & petal width, all the species are quite seperable. And the useful features to distinguish flower types.","6a3029e8":"From above plot using sepal length and sepal width, the setosa variety is easily distinguishable. The versicolor and virginica are overlapping, so harder to distinguish.","fe18e28e":"# Build K mean Clustring Model","9fe2208e":"# Modelling with PCA","5f7b372d":"There are almost 300 different species of Iris has been already discoverd, for our Data Science purpose we are going to make EDA for following 3 different Iris species:\n\nSetosa\nVersicolor\nVirginica","ccda90d1":"Together, the first two principal components contain 95.80% of the information. The first principal component contains 72.77% of the variance and the second principal component contains 23.03% of the variance. The third and fourth principal component contained the rest of the variance of the dataset.","04962bb4":"From above plot, we see that on the basis of sepal width all species are tight overlapping\n\n","033102bb":"Load the important required libraries","f38b4372":"# * Iris Information\n\nIris is a genus of 260\u2013300 species of flowering plants with showy flowers. It takes its name from the Greek word for a rainbow, which is also the name for the Greek goddess of the rainbow, Iris. Iris is also widely used as a common name for all Iris species, as well as some belonging to other closely related genera. Iris is extensively grown as ornamental plant in home and botanical gardens. The Iris flowers color ranges from white, pink, orange, purple, lavender.","b01aebfd":"Since the data set is equally balanced, we got the equal no of counts","5db26af5":"# Build Decision tree moedel now","fd38d92b":"The correlation between the Sepal Width and Length was very low whereas the correlation between Petal Width and Length was very high.\n\nWe will use all the features for training the algorithm and check the accuracy.","ea1bd883":"Let us start with our work on Iris Dataset","a89553b0":"Let's check count for each species","f8f9e311":"![](https:\/\/miro.medium.com\/max\/1400\/1*7bnLKsChXq94QjtAiRn40w.png)","ceb836fa":"# Build Logistic Regression Model Now","ab01b640":"We can see here iris data set is a balanced dataset. The Iris dataset consists of 150 data instances. There are 3 classes(Features) - Iris Setosa,Iris Versicolor and Iris Virginica, each have 50 instances.","98c62aea":"From above plot using sepal length and sepal width, the setosa variety is easily distinguishable. The versicolor and virginica are overlapping, so harder to distinguish.","23190657":"Data set is completely balance data. No null value Present in the data set.","c5fddef9":"From above plot, we see that on the basis of sepal length all species are overlapping","1dbac35d":"From above plot, we see that on the basis of petal length setosa is separable while the other two are overlapping"}}