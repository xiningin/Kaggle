{"cell_type":{"bb3194c2":"code","c46c1835":"code","02cdeb0a":"code","97ec32ca":"code","46d2e6d7":"code","22078fd8":"code","78354bc2":"code","c394f098":"code","a86cf4c4":"code","51473b14":"code","c84714f3":"code","d80e25cc":"code","0ca2b15e":"code","57cd0690":"code","fa938673":"code","98973714":"code","a0cf6b86":"code","8b8aaa47":"markdown","5a13c9a2":"markdown","c8c57e7f":"markdown","09c37f0e":"markdown","53b80d7a":"markdown","9b21b549":"markdown","9158954c":"markdown","278c4ba8":"markdown"},"source":{"bb3194c2":"import numpy as np\nimport pandas as pd\n\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom statistics import mean,stdev\nfrom sklearn import metrics\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\nfrom tensorflow.keras.wrappers.scikit_learn import KerasClassifier\n\nimport matplotlib.pyplot as plt","c46c1835":"train1=pd.read_csv(\"\/kaggle\/input\/eeg-dataset-of-slow-cortical-potentials\/bsi_competition_ii_train1a.csv\")","02cdeb0a":"X = train1\ny = X['0']","97ec32ca":"X.drop('0',axis=1,inplace=True)","46d2e6d7":"n_cols = X.shape[1]","22078fd8":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30,random_state=42)","78354bc2":"def create_model():\n    # create model\n    model = Sequential()\n    model.add(Dense(10, activation='relu', input_shape=(n_cols,)))\n    model.add(Dense(10, activation='relu'))\n    model.add(Dense(10, activation='relu'))\n    model.add(Dense(1, activation='sigmoid'))\n    \n    # compile model\n    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n    return model","c394f098":"clf = KerasClassifier(build_fn=create_model)\n\npipe = Pipeline([('scaler', StandardScaler()), ('clf', clf)])","a86cf4c4":"# fit the model\npipe.fit(X_train, y_train, clf__epochs=100, clf__verbose=0)","51473b14":"pipe.score(X_test, y_test)","c84714f3":"pipe.score(X_train, y_train)","d80e25cc":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import precision_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import cohen_kappa_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.metrics import confusion_matrix","0ca2b15e":"yhat_probs = pipe.predict(X_test, verbose=0)\n# predict crisp classes for test set\nyhat_classes = pipe.predict(X_test, verbose=0)\n# reduce to 1d array\nyhat_probs = yhat_probs[:, 0]\nyhat_classes = yhat_classes[:, 0]\n \n# accuracy: (tp + tn) \/ (p + n)\naccuracy = accuracy_score(y_test, yhat_classes)\nprint('Accuracy: %f' % accuracy)\n# precision tp \/ (tp + fp)\nprecision = precision_score(y_test, yhat_classes)\nprint('Precision: %f' % precision)\n# recall: tp \/ (tp + fn)\nrecall = recall_score(y_test, yhat_classes)\nprint('Recall: %f' % recall)\n# f1: 2 tp \/ (2 tp + fp + fn)\nf1 = f1_score(y_test, yhat_classes)\nprint('F1 score: %f' % f1)\n \n# kappa\nkappa = cohen_kappa_score(y_test, yhat_classes)\nprint('Cohens kappa: %f' % kappa)\n# ROC AUC\nauc = roc_auc_score(y_test, yhat_probs)\nprint('ROC AUC: %f' % auc)\n# confusion matrix\nmatrix = confusion_matrix(y_test, yhat_classes)\nprint(\"confusion_matrix:\")\nprint(matrix)","57cd0690":"import timeit","fa938673":"preds_test = []\ntime_test = []\nfor i in range(X_test.shape[0]):\n  x = X_test.iloc[[i]]\n  start = timeit.default_timer()\n  pred = pipe.predict(x)\n  stop = timeit.default_timer()\n  preds_test.append(pred)\n  time_test.append(stop - start)\nnp.mean(time_test)","98973714":"preds_train = []\ntime_train = []\nfor i in range(X_train.shape[0]):\n  x = X_train.iloc[[i]]\n  start = timeit.default_timer()\n  pred = pipe.predict(x)\n  stop = timeit.default_timer()\n  preds_train.append(pred)\n  time_train.append(stop - start)\nnp.mean(time_train)","a0cf6b86":"import joblib\njoblib.dump(pipe, 'pipeline.pkl') ","8b8aaa47":"# Inference time","5a13c9a2":"# Training","c8c57e7f":"# Save pipeline","09c37f0e":"# Evaluate","53b80d7a":"# Model","9b21b549":"# Load data","9158954c":"# Imports","278c4ba8":"Notebook based on the work by [Ir0nMan](https:\/\/www.kaggle.com\/towsifahamed) that can be seen [here](https:\/\/www.kaggle.com\/towsifahamed\/eeg-dataset-of-slow-cortical-potentials\/code?datasetId=676465&sortBy=voteCount)"}}