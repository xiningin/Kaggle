{"cell_type":{"e5842a3b":"code","95ccaf4d":"code","6ce1804b":"code","8752582c":"code","f8e88af9":"code","349133f5":"code","fdd4d921":"code","425ee62e":"code","23fa0b65":"code","ef7f594b":"code","af6fb907":"code","d4e475c1":"code","a37a8e5e":"code","74710841":"code","c290df11":"code","1e3d50e5":"code","092f1eec":"code","094a77e6":"code","4f1634e7":"code","fab7d466":"code","9f83de88":"code","ad3ffa80":"code","5470bf9a":"code","6a3863e5":"code","04e5d5d5":"code","0e840d91":"code","bcb3d677":"code","2f7ea06d":"code","8e292707":"code","53eb6a03":"code","08aaadf4":"code","59021b3e":"code","2bcf6623":"code","22741733":"code","37a32d0c":"code","0202c9c4":"code","3bb26b45":"code","eba21996":"code","9020437d":"code","97da63dc":"code","c9d7bdf9":"code","81d9e53f":"code","d23edba5":"code","bef78885":"code","e783fc7b":"code","0a0fcc93":"code","f88547b3":"code","0c2fc650":"markdown","639e70af":"markdown","afcc4362":"markdown","43852813":"markdown","bc4baade":"markdown","f32e5bfb":"markdown","bd34655b":"markdown","f2159375":"markdown","eaf66c11":"markdown","d6943355":"markdown","0a08111d":"markdown","bf7e9354":"markdown","1d0becbb":"markdown","95399a04":"markdown","348afa05":"markdown","a50cd02d":"markdown","1b2ed522":"markdown","0cdf0698":"markdown","97cf945e":"markdown","bac8ad18":"markdown","96fa6660":"markdown","ca782c45":"markdown","b6c82c8f":"markdown","0d2e66f9":"markdown","86b554b8":"markdown","0193632c":"markdown","535e8457":"markdown","9c94b7be":"markdown","b64ceaa6":"markdown","eaa93759":"markdown","f5c58d9d":"markdown"},"source":{"e5842a3b":"import numpy as np\nimport pandas as pd\nimport xgboost as xgb\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_squared_error as MSE\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.preprocessing import LabelEncoder, RobustScaler\nfrom sklearn.ensemble import RandomForestRegressor, VotingRegressor, StackingRegressor\nimport warnings\nwarnings.filterwarnings('ignore')","95ccaf4d":"pd.options.display.max_columns = 100\npd.options.display.max_rows = 100\npd.options.display.width=1000","6ce1804b":"house_train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\nhouse_test = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","8752582c":"house_train.head()","f8e88af9":"house_train.columns","349133f5":"house_train.shape, house_test.shape","fdd4d921":"sns.distplot(house_train['SalePrice'])\nplt.show()","425ee62e":"def status_of_missing_data(df):\n    count = df.isnull().sum().sort_values(ascending=False) # missing value count\n    per = (df.isnull().sum()*100\/df.shape[0]).sort_values(ascending=False) # missing value percentage\n    missing_data = pd.concat([count, per], axis=1, keys=['Count', 'Percentage'])\n    features_with_null = missing_data[missing_data['Count']>0]\n    print('Total features with null values: - ', features_with_null.shape[0])\n    return features_with_null","23fa0b65":"status_of_missing_data(house_train)","ef7f594b":"status_of_missing_data(house_test)","af6fb907":"house_train.drop(columns=[ 'PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu'], inplace=True)\nhouse_test.drop(columns=['PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu'], inplace=True)\nhouse_train.shape, house_test.shape","d4e475c1":"house_train['LotFrontage'].sample(10)","a37a8e5e":"house_train['LotFrontage'].fillna(house_train['LotFrontage'].median(), inplace=True)\nhouse_test['LotFrontage'].fillna(house_train['LotFrontage'].median(), inplace=True)","74710841":"house_train[['GarageType', 'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual', 'GarageCond']].sample(10)","c290df11":"house_train['GarageType'].fillna('No Garage', inplace=True)\nhouse_test['GarageType'].fillna('No Garage', inplace=True)\n\nhouse_train['GarageYrBlt'].fillna(round(house_train['GarageYrBlt'].median()), inplace=True)\nhouse_test['GarageYrBlt'].fillna(round(house_train['GarageYrBlt'].median()), inplace=True)\n\nhouse_train['GarageFinish'].fillna('No Garage', inplace=True)\nhouse_test['GarageFinish'].fillna('No Garage', inplace=True)\n\nhouse_train['GarageCond'].fillna('No Garage', inplace=True)\nhouse_test['GarageCond'].fillna('No Garage', inplace=True)\n\nhouse_train['GarageQual'].fillna('No Garage', inplace=True)\nhouse_test['GarageQual'].fillna('No Garage', inplace=True)","1e3d50e5":"house_train['BsmtFinType2'].fillna('No Basement', inplace=True)\nhouse_test['BsmtFinType2'].fillna('No Basement', inplace=True)\n\nhouse_train['BsmtExposure'].fillna('No Basement', inplace=True)\nhouse_test['BsmtExposure'].fillna('No Basement', inplace=True)\n\nhouse_train['BsmtQual'].fillna('No Basement', inplace=True)\nhouse_test['BsmtQual'].fillna('No Basement', inplace=True)\n\nhouse_train['BsmtFinType1'].fillna('No Basement', inplace=True)\nhouse_test['BsmtFinType1'].fillna('No Basement', inplace=True)\n\nhouse_train['BsmtCond'].fillna('No Basement', inplace=True)\nhouse_test['BsmtCond'].fillna('No Basement', inplace=True)","092f1eec":"house_train['MasVnrType'].fillna('None', inplace=True)\nhouse_test['MasVnrType'].fillna('None', inplace=True)\n\nhouse_train['MasVnrArea'].fillna(0.0, inplace=True)\nhouse_test['MasVnrArea'].fillna(0.0, inplace=True)\n\nhouse_train['Electrical'].fillna('SBrkr', inplace=True)\n\nhouse_test['MSZoning'].fillna('RL', inplace=True)\nhouse_test['BsmtFullBath'].fillna(0.0, inplace=True)\nhouse_test['Utilities'].fillna('AllPub', inplace=True)\nhouse_test['BsmtHalfBath'].fillna(0, inplace=True)\nhouse_test['Functional'].fillna('Typ', inplace=True)\nhouse_test['TotalBsmtSF'].fillna(house_train['TotalBsmtSF'].median(), inplace=True)\nhouse_test['GarageArea'].fillna(house_train['GarageArea'].median(), inplace=True)\nhouse_test['BsmtFinSF2'].fillna(house_train['BsmtFinSF2'].median(), inplace=True)\nhouse_test['BsmtUnfSF'].fillna(house_train['BsmtUnfSF'].median(), inplace=True)\nhouse_test['SaleType'].fillna('WD', inplace=True)\nhouse_test['Exterior2nd'].fillna('VinylSd', inplace=True)\nhouse_test['Exterior1st'].fillna('VinylSd', inplace=True)\nhouse_test['KitchenQual'].fillna('Gd', inplace=True)\nhouse_test['GarageCars'].fillna(2, inplace=True)\nhouse_test['BsmtFinSF1'].fillna(house_train['BsmtFinSF1'].median(), inplace=True)","094a77e6":"numeric_col= set(['1stFlrSF', '2ndFlrSF', '3SsnPorch',\n              'BedroomAbvGr', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtFullBath', 'BsmtHalfBath', 'BsmtUnfSF',\n              'EnclosedPorch',\n              'Fireplaces', 'FullBath', \n              'GarageArea', 'GarageCars', 'GarageYrBlt', 'GrLivArea',\n              'HalfBath',\n              'KitchenAbvGr',\n                'Id',\n              'LotArea', 'LotFrontage', 'LowQualFinSF',\n              'MasVnrArea', 'MiscVal', \n              'OpenPorchSF',\n              'PoolArea',\n              'ScreenPorch',\n              'TotRmsAbvGrd', 'TotalBsmtSF',\n              'WoodDeckSF',\n              'YearBuilt', 'YearRemodAdd'])","4f1634e7":"categorical_col = set(house_train.columns) - numeric_col\ncategorical_col.remove('SalePrice')\ncategorical_col","fab7d466":"house_train.dtypes","9f83de88":"house_train['MSSubClass'] = house_train['MSSubClass'].astype(str)\nhouse_train['OverallQual'] = house_train['OverallQual'].astype(str)\nhouse_train['OverallCond'] = house_train['OverallCond'].astype(str)\nhouse_train['MoSold'] = house_train['MoSold'].astype(str)\nhouse_train['YrSold'] = house_train['YrSold'].astype(str)","ad3ffa80":"house_train['GarageYrBlt'] = house_train['GarageYrBlt'].astype(int)","5470bf9a":"house_test.dtypes","6a3863e5":"house_test['MSSubClass'] = house_test['MSSubClass'].astype(str)\nhouse_test['OverallQual'] = house_test['OverallQual'].astype(str)\nhouse_test['OverallCond'] = house_test['OverallCond'].astype(str)\n\nhouse_test['BsmtFinSF1'] = house_test['BsmtFinSF1'].astype(int)\nhouse_test['BsmtFinSF2'] = house_test['BsmtFinSF2'].astype(int)\nhouse_test['BsmtUnfSF'] = house_test['BsmtUnfSF'].astype(int)\nhouse_test['TotalBsmtSF'] = house_test['TotalBsmtSF'].astype(int)\nhouse_test['BsmtFullBath'] = house_test['BsmtFullBath'].astype(int)\nhouse_test['BsmtHalfBath'] = house_test['BsmtHalfBath'].astype(int)\nhouse_test['GarageYrBlt'] = house_test['GarageYrBlt'].astype(int)\nhouse_test['GarageCars'] = house_test['GarageCars'].astype(int)\nhouse_test['GarageArea'] = house_test['GarageArea'].astype(int)\n\nhouse_test['MoSold'] = house_test['MoSold'].astype(str)\nhouse_test['YrSold'] = house_test['YrSold'].astype(str)","04e5d5d5":"for col in categorical_col:\n    print('Feature name:- ', col)\n    ax = sns.catplot(kind='strip', x=col, y='SalePrice', data=house_train)\n    ax.set_xticklabels(rotation=60)\n    plt.show()","0e840d91":"house_train.drop(columns=['Street', 'Utilities', 'Condition2'], inplace=True)\nhouse_test.drop(columns=['Street', 'Utilities', 'Condition2'], inplace=True)","bcb3d677":"categorical_col -= {'Street', 'Utilities', 'Condition2'}","2f7ea06d":"le = LabelEncoder()\nall_data = pd.concat([house_train, house_test])\nall_data = all_data.reset_index(drop=True)\nfor col in categorical_col:\n    all_data[col] = le.fit_transform(all_data[col])\nhouse_train = all_data[: house_train.shape[0]]\nhouse_test = all_data[house_train.shape[0]:]\nhouse_test = house_test.drop('SalePrice', axis=1)\nhouse_train.shape, house_test.shape","8e292707":"house_train['TotalArea'] = house_train['TotalBsmtSF'] + house_train['1stFlrSF'] + house_train['2ndFlrSF']\n\nhouse_train['TotalBath'] = house_train['BsmtFullBath'] + house_train['FullBath'] + (house_train['BsmtHalfBath'] + house_train['HalfBath'])*0.5\n\nhouse_test['TotalArea'] = house_test['TotalBsmtSF'] + house_test['1stFlrSF'] + house_test['2ndFlrSF']\nhouse_test['TotalBath'] = house_test['BsmtFullBath'] + house_test['FullBath'] + (house_test['BsmtHalfBath'] + house_test['HalfBath'])*0.5\n\nhouse_train.drop(['TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'BsmtFullBath', 'FullBath',\n                  'BsmtHalfBath', 'HalfBath' ], axis=1, inplace=True)\n\nhouse_test.drop(['TotalBsmtSF', '1stFlrSF', '2ndFlrSF', 'BsmtFullBath', 'FullBath',\n                  'BsmtHalfBath', 'HalfBath' ], axis=1, inplace=True)\n","53eb6a03":"def corr_heatmap(corr, fig_size):\n    f, axes = plt.subplots(1, 1, figsize=fig_size)\n    mask = np.triu(np.ones_like(corr, dtype=bool))\n    sns.heatmap(corr, mask=mask, annot=True, square=True, linewidth=0.1, linecolor='black', \n                ax=axes, center=3, fmt='0.2f')\n    plt.show()","08aaadf4":"corr = house_train.corr()\ncorr_heatmap(corr, (55, 55))","59021b3e":"house_train.drop(columns=[ 'TotRmsAbvGrd','GarageArea', 'Exterior2nd'], inplace=True)\nhouse_test.drop(columns=[ 'TotRmsAbvGrd','GarageArea', 'Exterior2nd'], inplace=True)\nnumeric_col.difference_update(['TotRmsAbvGrd','GarageArea'])\ncategorical_col.difference_update(['Exterior2nd'])","2bcf6623":"corr_sale = house_train.corr()[['SalePrice']].sort_values('SalePrice', ascending=False)\ncorr_sale.reset_index(inplace=True)\ncorr_sale = corr_sale.loc[(corr_sale['SalePrice']> 0.03) | (corr_sale['SalePrice']< -0.03)]\nhighly_corr_feature = list(corr_sale['index'])\ntest_id = house_test['Id']\nhouse_train = house_train[highly_corr_feature]\nhouse_test = house_test[highly_corr_feature[1:]]","22741733":"new_numeric = []\nfor feature in highly_corr_feature:\n    if feature in numeric_col:\n        new_numeric.append(feature)        ","37a32d0c":"rs = RobustScaler()\nhouse_train[new_numeric] = rs.fit_transform(house_train[new_numeric])\nhouse_test[new_numeric] = rs.transform(house_test[new_numeric])","0202c9c4":"X_train, X_test, y_train, y_test = train_test_split(house_train.drop('SalePrice', axis=1), \n                                                                            house_train[['SalePrice']], test_size=0.3,\n                                                                            random_state=1126)","3bb26b45":"lr = LinearRegression()\nlr.fit(X_train, y_train)\nlr.score(X_train, y_train)","eba21996":"lr.score(X_test, y_test)","9020437d":"y_pred = lr.predict(X_test)\nnp.sqrt(MSE(y_test, y_pred))","97da63dc":"rfr = RandomForestRegressor()\nparams_rfr = {\n    'max_depth' :  [ 9, 10, 11, 12] ,                 \n    'max_features': ['auto',],\n    'n_estimators': [250, 270, 290, 300, 310, 330, 350],\n    'min_samples_leaf': [3, 4, 5],\n    'random_state': [1997]\n}\n\ng_rfr = GridSearchCV(rfr, param_grid=params_rfr, cv=5, verbose=1, scoring='neg_mean_squared_error', n_jobs=-1)\ng_rfr.fit(X_train, y_train) \ng_rfr.best_params_ ","c9d7bdf9":"best_rfr_model = g_rfr.best_estimator_\nbest_rfr_model.fit(X_train, y_train)\ny_pred_rfr = best_rfr_model.predict(X_test)\nnp.sqrt(MSE(y_test, y_pred_rfr))               ","81d9e53f":"housing_dmatrix = xgb.DMatrix(data = house_train.drop('SalePrice', axis=1), label=house_train[['SalePrice']])\ng_params_grid = {\n    'learning_rate': [0.03, 0.04, 0.05, 0.08, 0.1, 0.2, 0.3, 0.4,],\n    'n_estimators': [130, 140, 150, 160, 170, 180, 190, 200],\n'subsample': [0.2, 0.3, 0.4, 0.5, 0.6],\n    'seed' : [1997]\n}\n\nxbo = xgb.XGBRegressor()\ng_xbo = GridSearchCV(estimator=xbo, param_grid=g_params_grid, scoring='neg_mean_squared_error',\n                     cv=5, verbose=1, n_jobs=-1)\ng_xbo.fit(X_train, y_train)\ng_xbo.best_params_             ","d23edba5":"best_xgb_model = g_xbo.best_estimator_\nbest_xgb_model.fit(X_train, y_train)\ny_pred_xgb = best_xgb_model.predict(X_test)    \nnp.sqrt(MSE(y_test, y_pred_xgb))         ","bef78885":"base_model = {\n    ('xgb', xgb.XGBRegressor(learning_rate=0.1, n_estimators=190, seed=1997, subsample=0.6)), \n    ('rfr', RandomForestRegressor(max_depth=12, max_features='auto', min_samples_leaf=4, \n                                  n_estimators=350, random_state=1997)),\n    \n}\nreg = StackingRegressor(estimators=base_model, final_estimator=LinearRegression() , n_jobs=-1)\nreg.fit(X_train, y_train)\ny_pred_reg = reg.predict(X_test)\nnp.sqrt(MSE(y_test, y_pred_reg )) ","e783fc7b":"predict = reg.predict(house_test)\npredict.shape","0a0fcc93":"predict_df = pd.DataFrame({'Id': test_id.values,\n                           'SalePrice': predict.flatten()\n}, index=range(predict.shape[0]))\npredict_df.head()","f88547b3":"predict_df.to_csv('hosuing data reg_base_xgb_rfr.csv', index=False)","0c2fc650":"### Checking for data types of features","639e70af":"## Let's try different algorithms.","afcc4362":"### Correlation b\/w features","43852813":"Create some new features. ","bc4baade":"Let's checkout Categorical features","f32e5bfb":"Missing values in testing data","bd34655b":"# 2. Feature Engineering","f2159375":"Street, Utilities, Condition2. These features don't have variance, So I am going to drop them. ","eaf66c11":"In train data set column GarageYrBlt's is float which should be int","d6943355":"### Filling null values","0a08111d":"### Regression with XGBoost","bf7e9354":" # 3. Final Step","1d0becbb":"Now save the result to csv file. ","95399a04":"### Random Forest Regression","348afa05":"Basement related features","a50cd02d":"### Linear Regression","1b2ed522":"Removing null values of other features","0cdf0698":"Missing values in training data","97cf945e":"### Checking for missing values","bac8ad18":"I will replace numerical null values with median and \ncategorical null values with the absence of value.\n Example : - null value in garage feature will be replaced by No Garage","96fa6660":"From the data description, I know that the below-mentioned columns are numeric and others are categorical.","ca782c45":"# 1. EDA and Preprocessing","b6c82c8f":"Both train and test data sets have so many null values in columns PoolQC, MiscFeature, Alley, Fence, and FireplaceQu. So let's drop them. ","0d2e66f9":"Garage related features","86b554b8":"To get a better result I am stacking these algorithms.","0193632c":"sklearn doesn't accept object type categorical features so I will change them in numerical equivalent using Label Encoding.","535e8457":"Some rows have all null values regarding categorical garage features and Zero regarding numerical features i.e No Garage","9c94b7be":"Let's select features with high correlations with Sale Price.","b64ceaa6":"Some rows have all null values regarding categorical basement features and Zero regarding numerical features i.e No Basement","eaa93759":"Some features are represented as numeric values but are actually categorical values. Let's change their data types.","f5c58d9d":"#### Features with high correlation\n\n(Exterior2nd, Exterior1st)\n(TotRmsAbvGrd, GrLivArea)\n(GarageCars, GarageArea) are pair of features with high correlation. One feature can be select from each pair and other can be dropped. "}}