{"cell_type":{"d24039e9":"code","3a27b32e":"code","463a57ce":"code","02619abd":"code","0d3cfa3d":"code","39bc29c2":"code","ec8341d2":"code","d81e3e5b":"code","2c9f913f":"code","96a3f0e2":"code","a0d5d559":"code","8b5a148e":"code","27eb5663":"code","697ea07f":"code","3da3c0b0":"code","471f4b3c":"code","0464fd2e":"code","ebf86801":"code","61bd8f6c":"code","b1ecb016":"code","1f1e6224":"code","18a71f19":"code","ac96abca":"code","6f02f999":"code","0952fb22":"code","68caa4c8":"code","38c8857a":"code","b2bc9320":"code","28744480":"code","1a28ac78":"code","bfaa4c35":"code","63166761":"code","8f5aaf54":"code","b3ee3f59":"code","9b130fa9":"code","2705fcdb":"code","12d14d35":"code","ddec7a2a":"code","67f5f4c8":"markdown","311cc413":"markdown","b11544a4":"markdown","88943bb8":"markdown","efd8f12e":"markdown","d4a1f929":"markdown","23303b89":"markdown","9184f75b":"markdown","b28050f6":"markdown","80725ae3":"markdown","49e13acd":"markdown","f936b8bd":"markdown","a4cd0f21":"markdown","b4203a4c":"markdown","c2886b46":"markdown","2ec8a4b1":"markdown"},"source":{"d24039e9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n#!pip install pyramid.arima\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image\nimport seaborn as sns\nimport random\nfrom IPython.display import HTML\nimport matplotlib.ticker as ticker\nimport matplotlib.animation as animation\nimport matplotlib.colors as mc\nimport colorsys\nfrom random import randint\nimport re\nimport warnings\nwarnings.filterwarnings(action='ignore')\nimport matplotlib.font_manager as fm # For Windows\nimport matplotlib as mpl\nimport plotly.express as px\nimport plotly\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport cufflinks as cf\nfrom scipy import stats\nimport plotly.figure_factory as ff\nfrom IPython.core.interactiveshell import InteractiveShell\nfrom plotly.offline import iplot\n#import chart_studio.plotly as py\ncf.go_offline()\ncf.set_config_file(world_readable=True, theme='pearl', offline=True)\n\n\nimport datetime\nfrom dateutil.relativedelta import relativedelta\n\n#import statsmodels\n#import statsmodels.api as sm  \n#from statsmodels.tsa.stattools import acf  \n#from statsmodels.tsa.stattools import pacf\n#from statsmodels.tsa.seasonal import seasonal_decompose\n#from statsmodels.tsa.arima_model import ARIMA\n#from pyramid.arima import auto_arima\n#print(plt.rcParams['font.family'])\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\ncf.go_offline(connected=True)\n\nimport plotly.io as pio\npio.renderers.default = 'notebook_connected'\n\n#import os\n#file = []\n#for dirname, _, filenames in os.walk('\/kaggle\/input'):\n#    for filename in filenames:\n#        print(os.path.join(dirname, filename))\n    \n        #file.append(os.path.join(dirname, filename))\n# Any results you write to the current directory are saved as output.","3a27b32e":"PatientInfo = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/PatientInfo.csv')\nRegion = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Region.csv')\nSearchTrend = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/SearchTrend.csv')\nTimeGender = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/TimeGender.csv')\nWeather = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Weather.csv')\nCase = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Case.csv')\nTime = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Time.csv')\nTimeProvince = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/TimeProvince.csv')\nTimeAge = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/TimeAge.csv')\nPatientRoute = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/PatientRoute.csv')\nSeoulFloating = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/SeoulFloating.csv')","463a57ce":"!apt-get update -qq\n!apt-get install fonts-nanum* -qq","02619abd":"sys_font=fm.findSystemFonts()\nprint(f\"sys_font number: {len(sys_font)}\")\n\nnanum_font = [f for f in sys_font if 'Nanum' in f]\nprint(f\"nanum_font number: {len(nanum_font)}\")","0d3cfa3d":"nanum_font # \ub098\ub214 \ud3f0\ud2b8 \ud558\ub098 \uace8\ub77c\uc11c \uc501\uc2dc\ub2e4","39bc29c2":"fm._rebuild()\npath = '\/usr\/share\/fonts\/truetype\/nanum\/NanumGothicEcoExtraBold.ttf'  # \uc124\uce58\ub41c \ub098\ub214\uae00\uaf34\uc911 \uc6d0\ud558\ub294 \ub140\uc11d\uc758 \uc804\uccb4 \uacbd\ub85c\ub97c \uac00\uc838\uc624\uc790\nfont_name = fm.FontProperties(fname=path, size=10).get_name()\nprint(font_name)\nplt.rc('font', family=font_name)\nmpl.rcParams['axes.unicode_minus'] = False","ec8341d2":"province_to_kor = {'Seoul': '\uc11c\uc6b8',\n 'Busan' : '\ubd80\uc0b0',\n 'Daegu': '\ub300\uad6c',\n 'Incheon': '\uc778\ucc9c',\n 'Gwangju': '\uad11\uc8fc',\n 'Daejeon': '\ub300\uc804',\n 'Ulsan': '\uc6b8\uc0b0',\n 'Sejong': '\uc138\uc885',\n 'Gyeonggi-do': '\uacbd\uae30\ub3c4',\n 'Gangwon-do': '\uac15\uc6d0\ub3c4',\n 'Chungcheongbuk-do': '\ucda9\uccad\ubd81\ub3c4',\n 'Chungcheongnam-do': '\ucda9\uccad\ub0a8\ub3c4',\n 'Jeollabuk-do': '\uc804\ub77c\ubd81\ub3c4',\n 'Jeollanam-do': '\uc804\ub77c\ub0a8\ub3c4',\n 'Gyeongsangbuk-do': '\uacbd\uc0c1\ubd81\ub3c4',\n 'Gyeongsangnam-do': '\uacbd\uc0c1\ub0a8\ub3c4',\n 'Jeju-do':'\uc81c\uc8fc\ub3c4',\n'Chunghceongbuk-do': '\ucda9\uccad\ubd81\ub3c4'}","d81e3e5b":"PatientInfo['province_kr'] = PatientInfo['province'].map(province_to_kor)\nprovince_list = PatientInfo['province_kr'].unique().tolist()\nTimeProvince['province_kr'] = TimeProvince['province'].map(province_to_kor)","2c9f913f":"def random_color_generator(number_of_colors):\n    color = ['#'+''.join([random.choice('0123456789ABCDEF')])]\n    return color","96a3f0e2":"def transform_color(color, amount = 0.5):\n\n    try:\n        c = mc.cnames[color]\n    except:\n        c = color\n        c = colorsys.rgb_to_hls(*mc.to_rgb(c))\n    return colorsys.hls_to_rgb(c[0], 1 - amount * (1 - c[1]), c[2])\n\nrandom_hex_colors = []\nfor i in range(len(province_list)):\n    random_hex_colors.append('#' + '%06X' % randint(0, 0xFFFFFF))\n\n\nrgb_colors = [transform_color(i, 1) for i in random_hex_colors]\nrgb_colors_opacity = [rgb_colors[x] + (0.825,) for x in range(len(rgb_colors))]\nrgb_colors_dark = [transform_color(i, 1.12) for i in random_hex_colors]","a0d5d559":"normal_colors = dict(zip(province_list, rgb_colors_opacity))\ndark_colors = dict(zip(province_list, rgb_colors_dark))","8b5a148e":"Weather['date'] = pd.to_datetime(Weather['date'])\nWeather['year'] = Weather['date'].dt.year\nWeather['day'] = Weather['date'].dt.day\nWeather['Month'] = Weather['date'].dt.month\n\nPatientInfo['confirmed_date'] = pd.to_datetime(PatientInfo['confirmed_date'])\nPatientInfo['Month'] = PatientInfo['confirmed_date'].dt.month\nPatientInfo['day'] = PatientInfo['confirmed_date'].dt.day\n\nTimeProvince['date'] = pd.to_datetime(TimeProvince['date'])","27eb5663":"color = dict(zip(province_list, random_color_generator(len(province_list))))","697ea07f":"weather_01 = Weather[['province','avg_temp','avg_relative_humidity','date','year','Month','day']]\nweather_01['new_date'] =  weather_01[weather_01['year'] == 2020]['Month'].astype('str') + '\/' + weather_01[weather_01['year'] == 2020]['day'].astype('str')","3da3c0b0":"weather_2020 = weather_01[weather_01['year']==2020]\nweather_2020['province_kr'] = weather_2020['province'].map(province_to_kor)\nweather_2020 = weather_2020.sort_values(['province','Month','day'])\nweather_2020.reset_index(drop = True, inplace = True)","471f4b3c":"fnames = SearchTrend[SearchTrend['date'] >= '2020-01-01']['date'].tolist()","0464fd2e":"#fig, ax = plt.subplots(figsize = (30,15))\nplt.style.use('seaborn')\nelement = 10\ndef draw_temp(current_date):\n    \n    df = weather_2020[weather_2020['date'].eq(current_date)].sort_values(['avg_temp'])\n    df = df.reset_index(drop = True)\n    \n    ax.clear()\n    ax.barh(df['province'], df['avg_temp'], color = [normal_colors[p] for p in df['province_kr']], edgecolor = ([dark_colors[x] for x in df['province_kr']]), linewidth = '4', )\n    dx = df['avg_temp'].max() \/ 100\n    \n    for i, (value, name) in enumerate(zip(df['avg_temp'], df['province_kr'])):\n        ax.text(value + dx,\n               i + (element \/ 100), '' + name,\n               size = 32,\n               ha = 'left',\n               va = 'center',\n               fontdict = {'fontname':'NanumGothic Eco'})\n        \n#         ax.text(value + dx ,\n#                 i - (element \/ 200), \n#                 f'    {value:,.0f}', \n#                 size = 32, \n#                 ha = 'left', \n#                 va = 'center')\n                \n        time_unit_displayed = re.sub(r'\\^(.*)', r'', str(current_date))\n        ax.text(1.0, \n                1.1, \n                time_unit_displayed,\n                transform = ax.transAxes, \n                color = '#666666',\n                size = 32,\n                ha = 'right', \n                weight = 'bold', \n                fontdict = {'fontname': 'NanumGothic Eco'})\n        \n        ax.text(-0.005,\n                1.1,\n                '\uc804\uad6d \ud3c9\uade0 \uae30\uc628 2020-01-01 ~ 04-06',\n                transform = ax.transAxes,\n                size = 32,\n                ha = 'left',\n                va = 'center',\n                weight = 'bold',\n                fontdict = {'fontname':'NanumGothic Eco'}\n               )\n        \n        ax.xaxis.set_major_formatter(ticker.StrMethodFormatter('{x:,.0f}'))\n        ax.xaxis.set_ticks_position('top')\n        ax.tick_params(axis = 'x', colors = '#666666', labelsize = 28)\n        ax.set_yticks([])\n        ax.set_axisbelow(True)\n        ax.margins(0, 0.01)\n        ax.grid(which = 'major', axis = 'x', linestyle = '-')\n\n        plt.locator_params(axis = 'x', nbins = 4)\n        plt.box(False)\n        plt.subplots_adjust(left = 0.075, right = 0.75, top = 0.825, bottom = 0.05, wspace = 0.2, hspace = 0.2)","ebf86801":"fig, ax = plt.subplots(figsize = (36, 20))\nanimator = animation.FuncAnimation(fig, draw_temp, frames = fnames)\nHTML(animator.to_jshtml())\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","61bd8f6c":"test1 = weather_2020[weather_2020['date']>= '2020-01-20'].reset_index(drop = True)[['date','avg_temp','avg_relative_humidity']]\ntest2 = TimeProvince[['date','confirmed','deceased']].reset_index(drop = True)\ntest3 = pd.merge(test1,test2)","b1ecb016":"def temp_corr_plot(city):\n    tmp1 = weather_2020[weather_2020['province_kr']==city].reset_index(drop = True).iloc[19:][['date','avg_temp','avg_relative_humidity']].reset_index(drop = True)\n    tmp2 = TimeProvince[TimeProvince['province_kr']==city][['date','confirmed','deceased']].reset_index(drop = True)\n    tmp3 = pd.merge(tmp1, tmp2)\n    \n    kor_n = weather_2020[weather_2020[\"province_kr\"]==city][\"province\"].unique()[0]\n    plt.figure(figsize = (18,5))\n    sns.heatmap(data = tmp3.corr(), annot = True, linewidths = .5 , square = True, )\n    plt.title(f'Temp ~ Confirmed Correlation in {kor_n}', fontsize = 20)\n    plt.show()\n    \n    plots = tmp3[['date','avg_temp','confirmed']].iplot(asFigure = True, x = 'date', xTitle = 'Date', subplots=True ,title = f'Average temperature by year in {city}')\n    plots.show()\n    \n    fff = ff.create_scatterplotmatrix(tmp3[['avg_temp','avg_relative_humidity','confirmed','deceased']],\n                                    height=800,width=800, diag='histogram',title = f'Scatter Plot In {city}',size = 5)\n    iplot(fff)","1f1e6224":"temp_corr_plot('\ub300\uad6c')","18a71f19":"Time[['date','negative','confirmed','test','deceased']].plot(x = 'date',figsize = (15,8), fontsize = 10)\nplt.title('Current Situation', fontsize = 32)","ac96abca":"# \uc77c\uc77c \ud655\uc9c4\uc790 \uc218\ub97c \uad6c\ud569\ub2c8\ub2e4.\ntime_new = pd.DataFrame(Time)\n#Time.iloc[61,2]\nfor i in range(78,0,-1): # row \n   for ii in range(2,7): # col\n        time_new.iloc[i,ii] = time_new.iloc[i,ii] - time_new.iloc[i-1,ii]\ntime_new            \n#time.head()","6f02f999":"before_mask = time_new[time_new['date'] <= '2020-03-08']\nafter_mask = time_new[time_new['date'] > '2020-03-09']","0952fb22":"df0 = before_mask[['date','test','negative','confirmed','released','deceased']]\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x = df0['date'], y = df0['test'], mode = 'lines', name = 'test'))\nfig.add_trace(go.Scatter(x = df0['date'], y = df0['negative'], mode = 'lines', name = 'negative'))\nfig.add_trace(go.Scatter(x = df0['date'], y = df0['confirmed'], mode = 'lines', name = 'confirmed'))\nfig.add_trace(go.Scatter(x = df0['date'], y = df0['released'], mode = 'lines', name = 'released'))\nfig.add_trace(go.Scatter(x = df0['date'], y = df0['deceased'], mode = 'lines', name = 'deceased'))\n\nfig.update_layout(title = 'Before Mask Supply', xaxis_title = 'Date')","68caa4c8":"df = after_mask[['date','test','negative','confirmed','released','deceased']]\n\nfig = go.Figure()\n\nfig.add_trace(go.Scatter(x = df['date'], y = df['test'], mode = 'lines', name = 'test'))\nfig.add_trace(go.Scatter(x = df['date'], y = df['negative'], mode = 'lines', name = 'negative'))\nfig.add_trace(go.Scatter(x = df['date'], y = df['confirmed'], mode = 'lines', name = 'confirmed'))\nfig.add_trace(go.Scatter(x = df['date'], y = df['released'], mode = 'lines', name = 'released'))\nfig.add_trace(go.Scatter(x = df['date'], y = df['deceased'], mode = 'lines', name = 'deceased'))\n\nfig.update_layout(title = 'After Mask Supply', xaxis_title = 'Date')","38c8857a":"Time = pd.read_csv('\/kaggle\/input\/coronavirusdataset\/Time.csv')\ndecomposition = seasonal_decompose(Time['confirmed'], freq=12)  \nfig = plt.figure(figsize = (18,5))\ndecomposition.plot()\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","b2bc9320":"from statsmodels.tsa.stattools import adfuller\ndef test_stationarity(timeseries):\n\n    #Determing rolling statistics\n    rolmean = timeseries.rolling(12).mean()\n    rolstd = timeseries.rolling(12).std()\n    '''\n    window : Size of the moving window.\n    This is the number of observations used for calculating the statistic\n    '''\n    #Plot rolling statistics:\n    fig = plt.figure(figsize=(10, 6))\n    orig = plt.plot(timeseries, color='blue',label='Original')\n    mean = plt.plot(rolmean, color='red', label='Rolling Mean')\n    std = plt.plot(rolstd, color='black', label = 'Rolling Std')\n\n    plt.legend(loc='best'); plt.title('Rolling Mean & Standard Deviation')\n    plt.show()\n\n    #Perform Dickey-Fuller test:\n    print ('<Results of Dickey-Fuller Test>')\n    dftest = adfuller(timeseries, autolag='AIC')\n    dfoutput = pd.Series(dftest[0:4],\n                         index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])\n    for key,value in dftest[4].items():\n        dfoutput['Critical Value (%s)'%key] = value\n    print (dfoutput)\n    \n    ","28744480":"test_stationarity(Time.set_index('date')['confirmed'])","1a28ac78":"time_new = pd.DataFrame(Time)\n#Time.iloc[61,2]\nfor i in range(78,0,-1): # row \n   for ii in range(2,7): # col\n        time_new.iloc[i,ii] = time_new.iloc[i,ii] - time_new.iloc[i-1,ii]\ntime_new            \n#time.head()","bfaa4c35":"df = Time.set_index('date')['confirmed']\ndf = pd.DataFrame(df)\ndf['first_diff'] = df['confirmed'] - df['confirmed'].shift(20)\ntest_stationarity(df.first_diff.dropna(inplace=False))","63166761":"fig = plt.figure(figsize=(12,8))\nax1 = fig.add_subplot(211)\nfig = sm.graphics.tsa.plot_acf(df.first_diff.iloc[21:], lags=20, ax=ax1)\nax2 = fig.add_subplot(212)\nfig = sm.graphics.tsa.plot_pacf(df.first_diff.iloc[21:],lags=20,ax=ax2)","8f5aaf54":"from statsmodels.tsa.ar_model import AR\ndf['confirmed'] = df['confirmed'].astype('float64')\nmodel = ARIMA(df['confirmed'], order = (1,1,0))\nmodel_fit = model.fit(trend = 'c', full_output = True, disp = True)\nmodel_fit.summary()\n\n# model = ARIMA(arima_data['count'].values, order=(1, 2, 1))\n# fit_model = model.fit(trend='c', full_output=True, disp=True)\n# fit_model.summary()","b3ee3f59":"model_fit.plot_predict()\npd.DataFrame(model_fit.resid).plot()\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","9b130fa9":"sm.qqplot(model_fit.resid, fit = True, line = '45')\nplt.tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)","2705fcdb":"qvalue, pvalue = sm.stats.acorr_ljungbox(model_fit.resid, 20)\nplt.stem(pvalue)\n#sm.stats.acorr_ljungbox(model_fit.resid, 20)","12d14d35":"forcast = model_fit.forecast(steps = 15)\npred_y = forcast[0].tolist()\npd.DataFrame(pred_y)","ddec7a2a":"stepwise_model = auto_arima(df['confirmed'], start_p=1, start_q=1,\n                           max_p=3, max_q=3, m=12,\n                           start_P=0, seasonal=False,\n                           d=1, D=1, trace=True,\n                           error_action='ignore',  \n                           suppress_warnings=True,\n                           stepwise=True)","67f5f4c8":"# differencing","311cc413":"# ARIMA","b11544a4":"# Data Info\n\n## \ud658\uc790\ub370\uc774\ud130\n- PatientInfo : \ud55c\uad6d \ucf54\ub85c\ub098 \ubc14\uc774\ub7ec\uc2a4 \ud658\uc790\uc758 \uc5ed\ud559 \ub370\uc774\ud130\n- PatientRoute : \ud55c\uad6d \ucf54\ub85c\ub098 \ubc14\uc774\ub7ec\uc2a4 \ud658\uc790\uc758 \uacbd\ub85c \ub370\uc774\ud130\n\n## \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\n- Time : \ub300\ud55c\ubbfc\uad6d \ucf54\ub85c\ub098 \ubc14\uc774\ub7ec\uc2a4 \uc0c1\ud0dc\uc758 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\n- TimeProvince : \ub300\ud55c\ubbfc\uad6d \ub0b4 \ucf54\ub85c\ub098 \ubc14\uc774\ub7ec\uc2a4 \uc0c1\ud0dc\uc758 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\n- TimeAge : \ub300\ud55c\ubbfc\uad6d \uc5f0\ub839\ubcc4 \ucf54\ub85c\ub098 \ubc14\uc774\ub7ec\uc2a4 \uc0c1\ud0dc\uc758 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\n- TimeGender : \ub300\ud55c\ubbfc\uad6d \uc131\ubcc4\ub85c \ucf54\ub85c\ub098 \ubc14\uc774\ub7ec\uc2a4 \uc0c1\ud0dc\uc758 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\n\n## \ucd94\uac00 \ub370\uc774\ud130\n- Region : \ud55c\uad6d \uc9c0\uc5ed\uc758 \uc704\uce58 \ubc0f \ud1b5\uacc4 \ub370\uc774\ud130\n- Weather : \ub300\ud55c\ubbfc\uad6d \uc9c0\uc5ed\uc758 \ub0a0\uc528 \ub370\uc774\ud130\n- SearchTrend : \ud55c\uad6d\uc5d0\uc11c \uac00\uc7a5 \ud070 \ud3ec\ud138 \uc911 \ud558\ub098\uc778 \ub124\uc774\ubc84\uc5d0\uc11c \uac80\uc0c9\ub41c \ud0a4\uc6cc\ub4dc\uc758 \ud2b8\ub80c\ub4dc \ub370\uc774\ud130\n\n## \ub370\uc774\ucf58\uc5d0\uc11c \uc81c\uacf5\ud558\uc9c4 \uc54a\uc9c0\ub9cc \uce90\uae00\uc5d0 \uc788\ub294 \ub370\uc774\ud130..\n- Case\n- SeoulFloating","88943bb8":"# \ub370\uc774\ud130 \uc5c5\ub85c\ub4dc","efd8f12e":"# \uc9c0\uae08\uae4c\uc9c0\uc758 \uc0c1\ud669 \uadf8\ub9ac\uace0 \ub9c8\uc2a4\ud06c 5\ubd80\uc81c\uc758 \ud6a8\uacfc\n- \ud604\uc7ac\uae4c\uc9c0 \ub300\ud55c\ubbfc\uad6d \uc815\ubd80\uc758 \ubc1c\ube60\ub978 \ub300\ucc98\ub85c \uac80\uc0ac\uc790 \uc218 \ub300\ube44 \ud655\uc9c4\uc790\ub294 \ub9e4\uc6b0 \uc801\uc740\uac83\uc73c\ub85c \ub098\ud0c0\ub0a8\n- \uacf5\uacf5\ub9c8\uc2a4\ud06c 5\ubd80\uc81c\ub294 3\uc6d4 9\uc77c\ubd80\ud130 \uc2dc\ud589\ub418\uc5c8\uc74c\n- \ud574\ub2f9 \ub0a0\uc9dc \uc774\ud6c4\ubd80\ud130 \ud655\uc9c4\uc790\uac00 \uc904\uc5c8\ub294\uc9c0 \ud655\uc778\ud574\ubcf4\uc790","d4a1f929":"# \ucc38\uace0\ubb38\ud5cc\n- \uc774\uc720\ud55c\ub2d8\uc758 \uce90\uae00 \ucee4\ub110\uc744 \ucc38\uace0\ud558\uc600\uc2b5\ub2c8\ub2e4 https:\/\/www.kaggle.com\/youhanlee\/comfirmed-bar-chart-race-depending-on-province\n\n- \uad00\ub828\ub17c\ubb38 (Spread\tof\tSARS-CoV-2\tCoronavirus\tlikely\tto\tbe\tconstrained\tby\tclimate)\ub97c \ucc38\uace0\ud558\uc600\uc2b5\ub2c8\ub2e4.","23303b89":"# ljungbox","9184f75b":"- \uc2dc\ub3c4 \ubcc4\ub85c \ud655\uc778\ud574\ubcf8 \uacb0\uacfc \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130 \ub9cc\uc73c\ub85c \ucf54\ub85c\ub098\uc640 \ub0a0\uc528\uac04\uc758 \uad00\uacc4\ub97c \uc815\ud655\ud558\uac8c \ud30c\uc545\ud558\uae30\uc5d0\ub294 \ubb34\ub9ac\uac00 \uc788\ub294\uac83 \uac19\uc74c\n- \uc0c1\uad00\uad00\uacc4\uac00 \ub0ae\ub354\ub77c\ub3c4 \uc544\uc608 \uad00\ub828\uc774 \uc5c6\uc5b4\ubcf4\uc774\uc9c4 \uc54a\ub294\ub2e4.\n- \ub0a0\uc528\ub098 \uc628\ub3c4\uc5d0 \uad00\ub828\ud55c \ub370\uc774\ud130\uac00 \ub354 \uc788\uc5b4\uc57c \ud560\uac70\uac19\ub2e4","b28050f6":"# auto_arima","80725ae3":"# predict and fit resid","49e13acd":"# \ub370\uc774\ud130 \uc9d1\ud569 \uad6c\uc870\n- \uc0c9\uc0c1\uc758 \uc758\ubbf8\ub294 \ube44\uc2b7\ud55c \uc18d\uc131\uc744 \uac00\uc9c0\uace0 \uc788\ub2e4\ub294 \uac83\uc774\ub2e4.\n- \ud589\uc774 \uc5f4 \uc0ac\uc774\uc5d0 \uc5f0\uacb0\ub418\uba74 \uc5f4 \uac12\uc774 \ubd80\ubd84\uc801\uc73c\ub85c \uacf5\uc720\ub428\uc744 \uc758\ubbf8\ud568\n- \uc810\uc120\uc740 \uc57d\ud55c \uad00\ub828\uc131\uc744 \uc758\ubbf8\ud568\n\n![%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EA%B5%AC%EC%A1%B0.png](attachment:%EB%8D%B0%EC%9D%B4%ED%84%B0%20%EA%B5%AC%EC%A1%B0.png)","f936b8bd":"- \ub9c8\uc2a4\ud06c \uc218\uae09\uc804\uacfc \ud6c4\uc5d0 \uac80\uc0ac, \ud655\uc9c4\uc790 \uc218\uac00 \ud655\uc5f0\ud788 \uc900\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n- \uc815\ubd80\uc758 \ub9c8\uc2a4\ud06c \uacf5\uae09\uc73c\ub85c \ucf54\ub85c\ub098 \uc608\ubc29\uc5d0 \ud070 \ub3c4\uc6c0\uc774 \ub41c\uac83\uc73c\ub85c \ub098\ud0c0\ub0ac\uc2b5\ub2c8\ub2e4","a4cd0f21":"# acf and pacf","b4203a4c":"- \uae30\uc628\uc740 \ub300\uccb4\ub85c \uc81c\uc8fc\ub3c4, \ubd80\uc0b0\uc774 \uac00\uc7a5 \ub192\uc740\uac83\uc73c\ub85c \ub098\ud0c0\ub0ac\uace0 \uc218\ub3c4\uad8c, \uac15\uc6d0\ub3c4 \ucabd\uc73c\ub85c \ub0ae\uc740 \uae30\uc628\uc5d0 \uc18d\ud55c\ub2e4\uace0 \ubcf4\uc5ec\uc9d0\n- \ud658\uc790\uac00 \uac00\uc7a5 \ub9ce\uc740 \uacbd\uc0c1\ubd81\ub3c4, \ub300\uad6c\uc758 \uacbd\uc6b0 \uc218\ub3c4\uad8c\uacfc \uc804\ub0a8\ucabd\uc758 \uae30\uc628\uc758 \uc0ac\uc774\uc5d0 \ub9ce\uc774 \uc788\ub294\uac83\uc73c\ub85c \ud655\uc778\n- \uc628\uc2b5\ub3c4\uc640 \ud655\uc9c4\uc790, \uc0ac\ub9dd\uc790\uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uc54c\uc544\ubcf4\uace0 \uc628\ub3c4\uc640 \ud655\uc9c4\uc790\uc218\ub97c \ud568\uaed8 \uadf8\ub824\ubcf4\uc790\n- \ucd94\uac00\ub85c \ucd5c\uadfc \uc720\ub7fd(\uc774\ud0c8\ub9ac\uc544, \ud504\ub791\uc2a4 \ub4f1)\uc5d0\uc11c \ud3ed\ubc1c\uc801\uc778 \ud655\uc9c4\uc790 \uc99d\uac00\uac00 \ub098\ud0c0\ub098\uace0 \uc788\ub294\ub370 \ud5a5\ud6c4\uc5d0 \uc678\uad6d\ub370\uc774\ud130\ub3c4 \ud568\uaed8 \uc54c\uc544\ubcf4\uba74 \uc88b\uc744\uac83\uac19\ub2e4.","c2886b46":"# \ud55c\uae00\ud3f0\ud2b8 \uc124\uc815","2ec8a4b1":"# QQ Plot"}}