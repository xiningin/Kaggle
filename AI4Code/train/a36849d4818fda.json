{"cell_type":{"d0a53af8":"code","5366a975":"code","f978c6ad":"code","b5b199a9":"code","04ebe008":"code","d9771b54":"code","d607d210":"code","8c43614a":"code","23d40131":"code","7f2d23d2":"code","91ebb499":"code","d3d28623":"code","3336a130":"code","6d8a549c":"code","f36dc6e2":"code","2e1b654e":"code","04c6daa1":"code","f559816e":"code","7bd0b980":"code","1cc97411":"code","58f4c20e":"code","4148437a":"code","c0aa2f56":"code","af776159":"code","28b0eba9":"code","845ead1d":"code","06093c95":"code","fbfd6078":"code","28424abf":"code","04988af0":"code","378dbcf2":"code","3e76453b":"code","18870186":"code","5741070f":"code","fbec54a7":"code","9949be51":"code","33af7555":"code","05b2e0f9":"code","50b19d49":"code","b8a84ea3":"code","2040dea6":"code","a480a354":"code","2b2664f1":"markdown"},"source":{"d0a53af8":"import numpy as np # linear algebra\nimport pandas as pd # data processing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder\nfrom PIL import Image\nimport cv2\nimport torch\nimport torch.nn as nn\nimport torchvision.models as models\nfrom skimage import io\nfrom torch.utils.data import (\n    Dataset,\n    DataLoader,\n)\nfrom sklearn.preprocessing import LabelEncoder\nfrom tqdm import tqdm\nimport os\nimport torchvision.transforms as transforms\nimport matplotlib.pyplot as plt\nimport torchvision\nimport torch.optim as optim\nimport copy\nfrom sklearn.externals import joblib\nfrom skimage.transform import rotate, AffineTransform, warp\nfrom skimage.util import random_noise\nfrom skimage.filters import gaussian\nfrom skimage.transform import resize\nfrom sklearn.metrics import f1_score as f\nfrom PIL import Image ","5366a975":"#enable GPU\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nprint(device)","f978c6ad":"train=pd.read_csv('..\/input\/identify-the-dance-form\/test.csv')#specify input location\ntest=pd.read_csv('..\/input\/identify-the-dance-form\/test.csv')","b5b199a9":"Class_map={'manipuri':0, 'bharatanatyam':1, 'odissi':2 ,'kathakali':3, 'kathak':4, 'sattriya':5,\n 'kuchipudi':6, 'mohiniyattam':7}\ninverse_map={0:'manipuri', 1:'bharatanatyam', 2:'odissi' ,3:'kathakali',4: 'kathak', 5:'sattriya',\n 6:'kuchipudi', 7:'mohiniyattam'}\ntrain['target']=train['target'].map(Class_map)#repalcing names with repective labels","04ebe008":"train","d9771b54":"test_imgdir=[]#collecting all the locaions of test images\nfor img in list(test['Image']):\n  test_imgdir.append('..\/input\/identify-the-dance-form\/test\/'+str(img))\nprint(test_imgdir)","d607d210":"train_imgdir=[]#collecting all the locations of train images\nfor img in list(train['Image']):\n  train_imgdir.append('..\/input\/identify-the-dance-form\/train\/'+str(img))\nprint(train_imgdir)","8c43614a":"train_label=[]#collecting labels of train images\nfor i in list(train['target']):\n  train_label.append(i)\nprint(train_label)","23d40131":"#data agumentation by using various techniques\nextend_train_imgdir=[]\nextend_train_label=[]\nfor img,label in zip(train_imgdir,train_label):\n  image=io.imread(img)\n  name=img.split('\/')[-1].split('.')[0]\n  noice_img=random_noise(image,var=0.2**2)\n  blurred_img = gaussian(image,sigma=1,multichannel=True)\n  rotated_img = rotate(image, angle=45, mode = 'wrap')\n  flipped_img=np.fliplr(image)\n  #rotated_img2 = rotate(image, angle=315, mode = 'wrap')\n  #updown_img=np.flipud(image)\n  io.imsave('.\/dataset\/train\/'+name+'noice_img.jpg',noice_img)\n  io.imsave('.\/dataset\/train\/'+name+'blurred_img.jpg',blurred_img)\n  io.imsave('.\/dataset\/train\/'+name+'rotated_img.jpg',rotated_img)\n  io.imsave('.\/dataset\/train\/'+name+'flipped_img.jpg',flipped_img)\n  #io.imsave('.\/dataset\/train\/'+name+'inverserotated_img.jpg',rotated_img2)\n  extend_train_imgdir.append('.\/dataset\/train\/'+name+'noice_img.jpg')\n  extend_train_imgdir.append('.\/dataset\/train\/'+name+'blurred_img.jpg')\n  extend_train_imgdir.append('.\/dataset\/train\/'+name+'rotated_img.jpg')\n  extend_train_imgdir.append('.\/dataset\/train\/'+name+'flipped_img.jpg')\n  #extend_train_imgdir.append('.\/dataset\/train\/'+name+'inverserotated_img.jpg')\n  extend_train_label.append(label)\n  extend_train_label.append(label)\n  extend_train_label.append(label)\n  extend_train_label.append(label)\n  #extend_train_label.append(label)\nprint(extend_train_imgdir)\nprint(extend_train_label)","7f2d23d2":"print(len(extend_train_imgdir))\nprint(len(extend_train_label))","91ebb499":"train_imgdir.extend(extend_train_imgdir)\ntrain_label.extend(extend_train_label)\nprint(train_imgdir)\nprint(train_label)\nprint(len(train_imgdir))\nprint(len(train_label))","d3d28623":"x_train,x_val,y_train,y_val=train_test_split(train_imgdir,train_label,test_size=0.15,shuffle=True)","3336a130":"print(len(x_train))\nprint(len(x_val))","6d8a549c":"def returnpaths(imgdir,labeldir):\n  paths=[]\n  for dir,label in zip(imgdir,labeldir):\n    paths.append((dir,label))\n  return paths","f36dc6e2":"train_paths=returnpaths(x_train,y_train)\nval_paths=returnpaths(x_val,y_val)","2e1b654e":"print(train_paths)","04c6daa1":"class Load_testdata(Dataset):\n    def __init__(self,paths,transform=None):\n        self.paths = paths\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.paths)\n\n    def __getitem__(self,index):\n        img=self.paths[index]\n        name=img.split('\/')[-1]\n        img_path = os.path.join(img)\n        image = io.imread(img_path)\n        #image=cv2.resize(image,(224,224))\n        #image=image\/255\n        image=resize(image, output_shape=(400,400,3), mode='constant', anti_aliasing=True)\n        #y_label = torch.tensor(int(img[1]))\n\n        if self.transform:\n            transform_train = transforms.Compose([ \n                            transforms.ToTensor(),\n                            transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))\n                            ])\n            image = transform_train(image)\n\n        return image,name","f559816e":"testdataset = Load_testdata(\n    paths=test_imgdir,\n    transform=transforms.ToTensor()\n)","7bd0b980":"test_loader = DataLoader(dataset=testdataset)#specify batchsize if you need and modify other functions accordingly","1cc97411":"its=iter(test_loader)\nimg,name=next(its)\nprint(img.shape)\nprint(name[0])","58f4c20e":"class Load_data(Dataset):\n    def __init__(self,paths,transform=None):\n        self.paths = paths\n        self.transform = transform\n\n    def __len__(self):\n        return len(self.paths)\n\n    def __getitem__(self,index):\n        img=self.paths[index]\n        img_path = os.path.join(img[0])\n        image = io.imread(img_path)\n        #image=cv2.resize(image,(224,224)) \n        #image=image\/255\n        image=resize(image, output_shape=(400,400,3), mode='constant', anti_aliasing=True)       \n        y_label = torch.tensor(int(img[1]))\n        #print(y_label)\n        if self.transform :\n          transform_train = transforms.Compose([ \n                            transforms.ToTensor(),\n                            transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))\n                            ])\n          image = transform_train(image)\n\n        return (image, y_label)","4148437a":"traindataset = Load_data(\n    paths=train_paths,\n    transform=transforms.ToTensor()\n)\nvaldataset = Load_data(\n    paths=val_paths,\n    transform=transforms.ToTensor()\n)","c0aa2f56":"train_loader = DataLoader(dataset=traindataset)\nval_loader=DataLoader(dataset=valdataset)","af776159":"it=iter(val_loader)","28b0eba9":"image,label=next(it)\nprint(type(image))\nprint(type(label))\nprint(image)\nprint(label)\nprint(image.shape)","845ead1d":"def imshow(img, title):\n    npimg = img.numpy() \/ 2 + 0.5\n    plt.figure(figsize=(8,4))\n    plt.axis('off')\n    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n    plt.title(title)\n    plt.show()","06093c95":"def show_batch_images(dataloader):\n    images, labels = dataloader\n    img = torchvision.utils.make_grid(images)\n    # images=images.to(device)\n    # images=images.float()\n    # val=inception(images)\n    # print(val)\n    label=labels\n    imshow(img, title=(int(label),inverse_map[int(label)]))","fbfd6078":"var=iter(train_loader)\nfor i in range(4):\n    show=next(var)\n    show_batch_images(show)#printing images with labels","28424abf":"model=models.resnet34(pretrained=True)\n# for param in model.parameters():\n#     param.requires_grad = False\nin_features = model.fc.in_features\nmodel.fc = nn.Linear(in_features,8)","04988af0":"print(model)","378dbcf2":"#evaluation function for calculating accuracy\ndef evaluation(dataloader, model):\n    total, correct = 0, 0\n    y_true=[]\n    y_pred=[]\n    for data in dataloader:\n        inputs, labels = data\n        inputs, labels = inputs.to(device), labels.to(device)\n        inputs=inputs.float()\n        output = model(inputs)\n        pred = output.argmax(1)\n        #print(pred)\n        label=labels\n        y_pred.append(pred)\n        y_true.append(label)\n        total += labels.size(0)\n        correct += (pred == label).sum().item()\n    #print(f(y_true,y_pred,average='weighted'))\n    return 100 * correct \/ total","3e76453b":"evaluation(val_loader,model)#checking wether function is working well ","18870186":"model = model.to(device)#moving model to GPU\nloss_fn = nn.CrossEntropyLoss()\n#opt = optim.Adam(model.parameters(), lr=0.000155)","5741070f":"loss_epoch_arr = []\nmax_epochs =2\nopt = optim.Adam(model.parameters(),lr=0.00000125)\nmin_loss = 100\n\nn_iters =len(x_train)\n\nfor epoch in range(max_epochs):\n    print('Epoch: %d\/%d' % (epoch+1, max_epochs))\n    for i, data in enumerate(train_loader, 0):\n\n        inputs, labels = data\n        inputs, labels = inputs.to(device), labels.to(device)\n        inputs=inputs.float()\n        opt.zero_grad()\n\n        outputs = model(inputs)\n        loss = loss_fn(outputs, labels)\n        loss.backward()\n        opt.step()\n        # outputs, aux_outputs = model(inputs)\n        # loss = loss_fn(outputs, labels) + 0.3 * loss_fn(aux_outputs, labels)\n        # loss.backward()\n        # opt.step()\n        \n        if min_loss > loss.item():\n            min_loss = loss.item()\n            best_model = copy.deepcopy(model.state_dict())\n            print('Min loss %0.9f' % min_loss)\n        \n        if i % 100 == 0:\n            print('Iteration: %d\/%d, Loss: %0.7f' % (i, n_iters, loss.item()))\n            \n        del inputs, labels, outputs\n        torch.cuda.empty_cache()\n        \n    loss_epoch_arr.append(loss.item())\n        \n    \n    \n    \nplt.plot(loss_epoch_arr)\nplt.show()","fbec54a7":"#model.load_state_dict(best_model)\n#joblib.dump(model, 'dance_25.pkl')\n#print(evaluation(train_loader,model), evaluation(val_loader,model))","9949be51":"# model2=models.resnet34(pretrained=True)\n# # for param in model.parameters():\n# #     param.requires_grad = False\n# in_features = model2.fc.in_features\n# model2.fc = nn.Linear(in_features,8)\nmodel2.load_state_dict(best_model)#loading best model if you need to,but this best model will not assure to give heighest accuracy","33af7555":"#model2=model2.to(device)#uncomment this if you want to use model2","05b2e0f9":"#model=joblib.load('dance_25.pkl')","50b19d49":"#predicting test values\nnames=[]\npreds=[]\nfor data in test_loader:\n  img,name=data\n  img=img.to(device)\n  img=img.float()\n  out=model(img)\n  pred=int(out.argmax(1))\n  preds.append(str(inverse_map[pred]))\n  names.append(name[0])\nprint(names)\nprint(preds)\nprint(len(names))\nprint(len(preds))","b8a84ea3":"final_result5 = np.array(list(map(list, zip(names,preds))))","2040dea6":"df_final= pd.DataFrame(data=final_result5, columns=[\"Image\", \"target\"])","a480a354":"df_final.to_csv('submission_dance_31.csv', index=False)","2b2664f1":"By finetuning below part (learining rate)you can achieve accuracy upto 90%"}}