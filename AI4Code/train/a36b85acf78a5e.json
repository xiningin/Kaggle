{"cell_type":{"6c09895e":"code","a75d92c4":"code","ea3cbab8":"code","f2fd7982":"code","a57ac051":"code","b986e656":"code","e55cd430":"code","adef9734":"code","8c4df9af":"code","2829c29c":"code","0c2ed95d":"code","7353dffd":"code","3c90813f":"code","f418c813":"code","6b8e63af":"code","ae86adbd":"code","d50030e2":"code","d19a627d":"code","c158bbac":"code","a5114a37":"code","252dfc41":"code","2799a7ae":"code","5088f15a":"code","d2e262e6":"code","da06c459":"code","cc94b4b0":"code","2707b5cd":"code","b9e1f65b":"code","86cca102":"code","b15d45b1":"code","38aae99e":"code","8fee9a97":"code","96c318cc":"code","d4595354":"code","17619487":"code","ea9d1e90":"code","11a006bd":"code","d01d85be":"code","ebabfba2":"code","5fc6e091":"code","c4b0767c":"code","9ab39258":"code","1e87420c":"code","446f6214":"code","cbe25cee":"code","3e26788a":"code","679d747b":"code","c03cd31c":"code","8ea46af8":"code","5b359b46":"code","91238cca":"code","7c734ef7":"code","2804be69":"code","add1d5d1":"code","5cf474d5":"code","e2077159":"code","a0eedb37":"code","654c0980":"code","e5868cc6":"code","39c45116":"code","4d1e1fd8":"code","590ece63":"code","3ad21f2a":"code","293e360c":"code","894ff900":"code","94678f41":"code","70c8d8b0":"code","b20688b5":"code","6a44ed35":"code","72ee0a2c":"code","9d288a1e":"code","94985317":"code","e478b293":"code","640f2e54":"code","66851ac3":"code","b6de7bf1":"code","0f591548":"code","44973a14":"code","3a757e1d":"code","06aa4fb4":"code","32427e5c":"code","2a3f4b55":"code","40b178ad":"code","244bb57e":"code","9c472ff2":"markdown","dcaf8a31":"markdown","ab7f6bfc":"markdown","e46b15a1":"markdown","666f5f5f":"markdown","07b345a3":"markdown","17382325":"markdown","8110c665":"markdown","17d8b9a7":"markdown","236307e3":"markdown","75f3a10f":"markdown","21f8df98":"markdown","11037139":"markdown","e53b5194":"markdown","26436cf6":"markdown","ac44d28e":"markdown","32630ae2":"markdown","6c8ec84d":"markdown","6b81a900":"markdown","aa7cfe68":"markdown","0351faa8":"markdown","a980324d":"markdown","2570250e":"markdown","351a7c21":"markdown","e7a2ba60":"markdown","b58bd72f":"markdown","9b16c1fe":"markdown","aa914a9f":"markdown"},"source":{"6c09895e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a75d92c4":"#importing the necessary libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nimport time\nimport datetime\nfrom datetime import datetime\n\nimport plotly.express as px\nimport plotly.graph_objects as go\n\nimport warnings\nwarnings.filterwarnings('ignore')\n","ea3cbab8":"#reading the data set\n#test = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/test.csv')\n#train = pd.read_csv('..\/input\/covid19-global-forecasting-week-2\/train.csv')\ntest = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/covid19-global-forecasting-week-4\/train.csv\")\ndf_pop = pd.read_csv('..\/input\/population-by-country-2020\/population_by_country_2020.csv')\ncovid_pop = pd.read_csv('..\/input\/covid19-global-forecasting-locations-population\/locations_population.csv')","f2fd7982":"display(train.describe())\ndisplay(train.tail(5))\ndisplay(train.shape)\ntrain[['Province_State','Country_Region','Date']].describe()","a57ac051":"print(\"Max Date: \", max(train['Date']), \", Min Date: \", min(train['Date']))\nprint(\"Max Id: \", max(train['Id']), \", Unique Ids: \", train['Id'].nunique())\nprint(\"Max Date: \", max(test['Date']), \", Min Date: \", min(test['Date']))","b986e656":"train.isnull().sum()","e55cd430":"#plotting the daily trend\nww_df = train.groupby('Date')[['ConfirmedCases', 'Fatalities']].sum().reset_index()\n# shift is used to take the previous value\nww_df['New_Cases'] = ww_df['ConfirmedCases'] - ww_df['ConfirmedCases'].shift(1)\n#ww_df.tail()\n#pd.melt is used to create a simillar table like a pivot in excel\n\ntrend_df = pd.melt(ww_df, id_vars=['Date'], value_vars=['ConfirmedCases', 'Fatalities', 'New_Cases'])\ntrend_df.head(5)\n\nfig = px.line(trend_df, x=\"Date\", y=\"value\", color='variable', title=\"Worldwide Confirmed\/Death trend\")\nfig.show()","adef9734":"plt.style.use(['tableau-colorblind10'])\n\n#plotting the top 8 Countries with most Fatalities as per latest day\n\ndf_Country = train.groupby(['Country_Region'])[[\"Fatalities\",\"ConfirmedCases\"]].max().nlargest(8,'Fatalities')\n#df_Country = train[train['Date']=='2020-03-31'].groupby(['Country_Region'])[[\"Fatalities\",\"ConfirmedCases\"]].sum().nlargest(8,'Fatalities')\n#bycountry = train.groupby('Country_Region')['Fatalities'].max().sort_values(ascending=False).to_frame().reset_index()\n\n#fatality % = Fatality_Count \/ Confirmed_Count\n\ndf_Country['Fatality_Percentage'] = df_Country['Fatalities']\/ df_Country['ConfirmedCases']\ndf_Country = df_Country.reset_index()\ndf_Country.sort_values('Fatality_Percentage',inplace=True)\nfigure, axes = plt.subplots(1, 2,figsize=(12,4))\ndf_Country.plot(ax= axes[0],x = 'Country_Region', y = [\"Fatalities\",\"ConfirmedCases\"],kind='bar', title = 'Fatalities Vs Confirmed')\ndf_Country.plot(ax= axes[1],x = 'Country_Region', y = [\"Fatality_Percentage\"],kind='bar', title = 'Fatalities divided by Confirmed')","8c4df9af":"#getting the dates with at least 1 Fatality and atleast 1 confirmed case separately\ncond1 = train.Fatalities >=1\ncond2 = train.ConfirmedCases >= 1\ntrain_Fatal = train[['Country_Region','Date']][(cond1)]\ntrain_Confirm = train[['Country_Region','Date']][(cond2)]\n\n#getting the 1st Confirmed case date for each country\nConfirm_Min_Max = train_Confirm.groupby(\"Country_Region\", as_index=False)[\"Date\"].agg([\"min\",\"max\"])\n\n#getting the 1st Fatality date for each country\nFatal_Min_Max = train_Fatal.groupby(\"Country_Region\", as_index=False)[\"Date\"].agg([\"min\",\"max\"])\n\n#left outer join the above 2 dataFrames\n\nCountry_Dates = pd.merge(Confirm_Min_Max, Fatal_Min_Max, how='left', on=['Country_Region'])\nCountry_Dates = Country_Dates.rename(columns={'min_x': 'fst_Confirmed', 'max_x': 'last_Confirmed', 'min_y': 'fst_Fatal','max_y': 'last_Fatal'})\n    \n#setting a default date for null date values\n#should remove null day count to get fatality rate (to avoid Division with nulls)\n\n#Date_Cols = ['fst_Confirmed','last_Confirmed','fst_Fatal','last_Fatal']\n\n#Country_Dates[Date_Cols] = Country_Dates[Date_Cols].fillna(pd.to_datetime('2015-01-01'))\n\nCountry_Dates['Fatality_Days'] = pd.to_datetime(Country_Dates['last_Fatal']) - pd.to_datetime(Country_Dates['fst_Fatal'])\nCountry_Dates = Country_Dates.reset_index()\n#Country_Dates.head(5)","2829c29c":"# converting date counts to integer values\n\nCountry_Dates['Fatality_Days'] = Country_Dates['Fatality_Days'] \/ np.timedelta64(1, 'D')\n\nCountry_Dates.head(5)","0c2ed95d":"#consider the country wise fatalities and Confirmed cases\n\n#Country_Counts = train.groupby(['Country_Region'])[[\"Fatalities\",\"ConfirmedCases\"]].sum()\ncond1 = train.Date == '2020-04-12'\nCountry_Counts = train[['Country_Region','Date','Fatalities','ConfirmedCases']][(cond1)]\n#Country_Counts = train[train['Date']=='2020-03-31']\n#Getting min max dates and counts grouped by country\n\ndf_Country2 = pd.merge(Country_Dates, Country_Counts, how='left', on=['Country_Region'])\n\ndf_Country2['Fatality_Rate'] = round(df_Country2['Fatalities']\/pd.to_numeric(df_Country2['Fatality_Days']),2)\ndf_Country2['Fatality_Rate'] = round(df_Country2['Fatalities']\/pd.to_numeric(df_Country2['Fatality_Days']),2)\n\n#null fatality rates are set as 0\n#infinity fatality rates are set as NaN\n\ndf_Country2['Fatality_Rate'] = df_Country2['Fatality_Rate'].fillna(0)\ndf_Country2 = df_Country2.replace([np.inf, -np.inf], np.nan)\n#df_Country2['Country_Region'].describe()\n\n#top 8 countries with the largest Fatality Rates\n\ndf_Country3 = df_Country2[df_Country2['Fatality_Rate'] > 0].groupby(['Country_Region'])[[\"Fatality_Rate\"]].sum().nlargest(8,'Fatality_Rate')\ndf_Country3 = df_Country3.reset_index()","7353dffd":"#df_Country3.head(5)\n#df_Country3.plot(x='Country_Region', y= [\"Fatality_Rate\"], kind = 'bar', title = 'Top 8 countries with largest fatality rate (Fatalities\/Day)')\n\nfig = px.bar(df_Country3, x='Country_Region', y='Fatality_Rate',color='Fatality_Rate')\nfig.show()","3c90813f":"confirmed_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_China = train[train['Country_Region']=='China'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_China = confirmed_China.join(fatalities_China)\n\nconfirmed_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_Italy = train[train['Country_Region']=='Italy'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_Italy = confirmed_Italy.join(fatalities_Italy)\n\nconfirmed_Spain = train[train['Country_Region']=='Spain'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_Spain = train[train['Country_Region']=='Spain'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_Spain = confirmed_Spain.join(fatalities_Spain)\n\nconfirmed_Iran = train[train['Country_Region']=='Iran'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_Iran = train[train['Country_Region']=='Iran'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_Iran = confirmed_Iran.join(fatalities_Iran)\n\nconfirmed_France = train[train['Country_Region']=='France'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_France = train[train['Country_Region']=='France'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_France = confirmed_France.join(fatalities_France)\n\nconfirmed_Netherlands = train[train['Country_Region']=='Netherlands'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_Netherlands = train[train['Country_Region']=='Netherlands'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_Netherlands = confirmed_Netherlands.join(fatalities_Netherlands)\n\nconfirmed_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_UK = train[train['Country_Region']=='United Kingdom'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_UK = confirmed_UK.join(fatalities_UK)\n\nconfirmed_USA = train[train['Country_Region']=='US'].groupby(['Date']).agg({'ConfirmedCases':['sum']})\nfatalities_USA = train[train['Country_Region']=='US'].groupby(['Date']).agg({'Fatalities':['sum']})\ntotal_USA = confirmed_USA.join(fatalities_USA)\n","f418c813":"plt.figure(figsize=(24,18))\n\nplt.subplot(3, 3, 1)\ntotal_China.plot(ax=plt.gca(), title='China')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(3, 3, 2)\ntotal_Italy.plot(ax=plt.gca(), title='Italy')\n\nplt.subplot(3, 3, 3)\ntotal_Spain.plot(ax=plt.gca(), title='Spain')\n\nplt.subplot(3, 3, 4)\ntotal_Iran.plot(ax=plt.gca(), title='Iran')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(3, 3, 5)\ntotal_France.plot(ax=plt.gca(), title='France')\n\nplt.subplot(3, 3, 6)\ntotal_Netherlands.plot(ax=plt.gca(), title='Netherlands')\n\nplt.subplot(3, 3, 7)\ntotal_UK.plot(ax=plt.gca(), title='United Kingdom')\nplt.ylabel(\"Confirmed infection cases\", size=13)\n\nplt.subplot(3, 3, 8)\ntotal_USA.plot(ax=plt.gca(), title='USA')","6b8e63af":"#selecting only the needed columns from population \n#df_pop.columns\ndf_pop_sel = df_pop[['Country (or dependency)','Population (2020)','Density (P\/Km\u00b2)','Land Area (Km\u00b2)','Med. Age','Urban Pop %']]\n\n#renaming the columns\ndf_pop_sel.columns = ['Country_Region', 'Population (2020)', 'Density (P\/Km\u00b2)','Land Area (Km\u00b2)', 'Med. Age', 'Urban Pop %']\n\n# Remove the % sign from Urban Pop % field\ndf_pop_sel['Urban Pop %'] = df_pop_sel['Urban Pop %'].str.rstrip('%')\n\n# Replace United States by US\ndf_pop_sel.loc[df_pop_sel['Country_Region']=='United States', 'Country_Region'] = 'US'\n\ndf_country_pop = pd.merge(df_pop_sel, df_Country, how='inner', on=['Country_Region'])\ndf_country_pop","ae86adbd":"df_country_pop[\"pop_factor_fatal\"] = df_country_pop['Fatalities']\/df_country_pop['Population (2020)']\ndf_country_pop[\"pop_factor_confirmed\"] = df_country_pop['ConfirmedCases']\/df_country_pop['Population (2020)']\n#df_country_pop = df_country_pop.reset_index(drop = True)\ndf_country_pop.sort_values('pop_factor_fatal',inplace=True)\ndf_country_pop\ndf_country_pop.plot(x = 'Country_Region', y = [\"pop_factor_fatal\",\"pop_factor_confirmed\"],kind='barh', title = 'Fatalities, Confirmed considering population',figsize = (8,4))","d50030e2":"# filtering data before 26th March as for the competition rules for prediction\n\ncond1 = train['Date'] < '2020-04-01'\ntrain_fil = train[(cond1)]\ndisplay(train_fil['Date'].max())\ndisplay(train_fil['Date'].min())","d19a627d":"display(train_fil.head(5))\ndisplay(covid_pop.head(5))","c158bbac":"#preprocessing\n\ntrain_fil['Date'] = pd.to_datetime(train_fil['Date'])\ntrain_fil['Day_num'] = preprocessing.LabelEncoder().fit_transform(train_fil.Date)\ntrain_fil['Day'] = train_fil['Date'].dt.day\ntrain_fil['Month'] = train_fil['Date'].dt.month\ntrain_fil['Year'] = train_fil['Date'].dt.year\n\ntrain_fil_copy = train_fil\n\ntrain_fil['Province_State'].fillna(\"None\", inplace=True)\n\n#Checking null values\ntrain_fil[train_fil.iloc[:,0:].isnull().any(axis = 1)].iloc[:,0:].head()","a5114a37":"# there is a new data set uploaded for population details for covid data set. I am using this for the population data\n\ncovid_pop_sel = covid_pop[['Province.State','Country.Region','Population']]\ncovid_pop_sel['Province.State'].fillna(\"None\", inplace=True)\n\n#Checking null values\ncovid_pop_sel[covid_pop_sel.iloc[:,0:].isnull().any(axis = 1)].iloc[:,0:].head()","252dfc41":"#joining population details as previously done in EDA\n\ndf_train_pop = train_fil.merge(covid_pop_sel, left_on = ['Country_Region','Province_State'], right_on = ['Country.Region','Province.State'], how = 'left')\n#df_train_pop[df_train_pop.iloc[:,1:].isnull().any(axis = 1)].iloc[:,1:].head(3)","2799a7ae":"display(covid_pop_sel[covid_pop_sel['Country.Region']=='Italy'])\ndisplay(train_fil[train_fil['Country_Region']=='Italy'])","5088f15a":"#getting Country_Regions with Null population (These have not joined correctly when used the primary key as Country_Region)\n#check = df_train_pop[df_train_pop['Country_Region']=='Canada'][df_train_pop['Population'].isnull()]\ndf_train_pop['Province_State'][df_train_pop['Population'].isnull()].unique()\ndf_train_pop.reindex()\n#check[check['Date']=='2020-03-25']","d2e262e6":"#code to check column wise null count\n#pd.DataFrame(population_raw.isnull().sum()).T\n\n#wildcard matching \n#df_pop_sel[df_pop_sel['Country_Region'].str.match('Taiwan')]","da06c459":"# Replace Country names to match the train data set\n#df_pop_sel.loc[df_pop_sel['Country_Region']=='Czech Republic (Czechia)', 'Country_Region'] = 'Czechia'\n#df_pop_sel.loc[df_pop_sel['Country_Region']=='Taiwan', 'Country_Region'] = 'Taiwan*'","cc94b4b0":"#merging the data set again, after mapping the country names\n#df_train_pop = train_fil.merge(df_pop_sel, left_on = 'Country_Region', right_on = 'Country_Region', how = 'left')\n#df_train_pop[df_train_pop.iloc[:,1:].isnull().any(axis = 1)].iloc[:,1:].head(3)","2707b5cd":"df_train_pop[df_train_pop.iloc[:,1:].isnull().any(axis = 1)].iloc[:,1:].head(3)","b9e1f65b":"#treating null values\ndf_train_pop['Province.State'].fillna(\"None\", inplace=True)\ndf_train_pop['Country.Region'].fillna(\"None\", inplace=True)\ndf_train_pop['Population'] = df_train_pop['Population'].fillna(0)","86cca102":"#df_train_pop[['Population (2020)', 'Density (P\/Km\u00b2)', 'Land Area (Km\u00b2)', 'Med. Age', 'Urban Pop %']] = df_train_pop[['Population (2020)', 'Density (P\/Km\u00b2)', 'Land Area (Km\u00b2)', 'Med. Age', 'Urban Pop %']].fillna(0)","b15d45b1":"missings_count = {col:df_train_pop[col].isnull().sum() for col in df_train_pop.columns}\nmissings = pd.DataFrame.from_dict(missings_count, orient='index')\nprint(missings.nlargest(30, 0))","38aae99e":"#Arranging the data set as needed for the SIR model\n\ndf_train_pop.head(5)","8fee9a97":"df_fin_selc = df_train_pop[['Province_State','Country_Region','Date','ConfirmedCases','Fatalities','Day_num','Day','Month','Year','Population']]","96c318cc":"df_fin_selc[df_fin_selc['Date']=='2020-03-25'].head(5)","d4595354":"df_fin_selc['I'] = df_fin_selc['ConfirmedCases']-df_fin_selc['Fatalities']\ndf_fin_selc['R'] = df_fin_selc['Fatalities']\ndf_fin_selc['S'] = df_fin_selc['Population']-df_fin_selc['ConfirmedCases']\ndf_SIR = df_fin_selc[['Province_State','Country_Region','Population','Day_num','S','I','R']].reindex()\ndf_SIR[df_SIR['Country_Region'] == 'Italy'].tail(5)","17619487":"df_SIR[df_SIR['Country_Region']=='United Kingdom'].plot(x='Day_num',y= ['I','R'],kind = 'line')","ea9d1e90":"import numpy as np\nfrom scipy.integrate import odeint\nfrom scipy import integrate, optimize","11a006bd":"def SIR_testmodel(y,t,bta,gmma):\n    S, I, R = y\n    \n    dS_dt = -1*bta*I*S\/N\n    dI_dt = (bta*I*S\/N) - gmma*I\n    dR_dt = gmma*I\n    \n    return ([dS_dt, dI_dt, dR_dt])","d01d85be":"#defining initial conditions\n\nN = 1\nS00 = 0.9\nI00 = 0.1\nR00 = 0.0\nbta = 0.35\ngmma = 0.1\n\nt = np.linspace(0,100,1000)\n\nsol = odeint(SIR_testmodel,[S00,I00,R00],t,args = (bta,gmma))\nsol = np.array(sol)","ebabfba2":"#plotting results\n\nplt.figure(figsize=(6,4))\nplt.plot(t, sol[:,0],label = \"S(t)\")\nplt.plot(t, sol[:,1],label = \"I(t)\")\nplt.plot(t, sol[:,2],label = \"R(t)\")\nplt.legend()\nplt.show()","5fc6e091":"Italy_SIR_df = df_SIR[df_SIR['Country_Region']=='Italy']\n#covid_pop_sel[covid_pop_sel['Country.Region']=='Italy']\nItaly_SIR_df = Italy_SIR_df.reset_index(drop = True)\nItaly_SIR_df.tail(5)","c4b0767c":"display(covid_pop_sel[covid_pop_sel['Country.Region']=='Italy'])","9ab39258":"Country_Dates[Country_Dates['Country_Region'] == 'Italy']","1e87420c":"cond1 = Italy_SIR_df.I >= 1\ntest = Italy_SIR_df['Day_num'][(cond1)]\ntest\nItaly_SIR_df.iloc[:10]","446f6214":"Italy_S = Italy_SIR_df['S']\nItaly_I = Italy_SIR_df['I']\nItaly_R = Italy_SIR_df['R']\n\nItaly_s = np.array(Italy_S, dtype=float)\nItaly_i = np.array(Italy_I, dtype=float)\nItaly_r = np.array(Italy_R, dtype=float)\n\ndisplay(Italy_s[9],Italy_i[9], Italy_r[9])","cbe25cee":"def SIR_model(y,t,beta,gamma):\n    S, I, R = y\n    N = 60480000\n    dS_dt = -1*beta*I*S\/N\n    dI_dt = (beta*I*S\/N) - gamma*I\n    dR_dt = gamma*I\n    \n    return ([dS_dt, dI_dt, dR_dt])\n\ndef fit_odeint(x, beta, gamma):\n    return integrate.odeint(SIR_model, (S0, I0, R0), x, args=(beta, gamma))[:,1]","3e26788a":"xdata = Italy_SIR_df.Day_num\nydata = Italy_i\nxdata = np.array(xdata, dtype=float)\n\nS0 = 60479998.0\nI0 = 2.0\nR0 = 0\ny = S0, I0, R0\n\npopt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)","679d747b":"plt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"Fit of SIR model for Italy infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","c03cd31c":"#I am using the new data set with Recovered details included as I am getting gamma and beta values more than 1\n#this is the same above data set with more details incorporated like Recovered Count and longutude latitude details\n\ncomp_df = pd.read_csv('..\/input\/corona-virus-report\/covid_19_clean_complete.csv')\ncomp_df.head(5)","8ea46af8":"comp_df['Province\/State'].fillna(\"None\", inplace=True)\n\n#Checking null values\ncomp_df[comp_df.iloc[:,0:].isnull().any(axis = 1)].iloc[:,0:].head()","5b359b46":"comp_df['Date'] = pd.to_datetime(comp_df['Date'])","91238cca":"#covid_pop_sel \ncovid_pop_sel.loc[covid_pop_sel['Country.Region']=='Korea, South', 'Country.Region'] = 'South Korea'\ncomp_df_pop = comp_df.merge(covid_pop_sel, left_on = ['Country\/Region','Province\/State'], right_on = ['Country.Region','Province.State'], how = 'left')\ncomp_df_pop.tail(3)","7c734ef7":"comp_pop_sel = comp_df_pop[['Province\/State','Country\/Region','Date','Confirmed','Deaths','Recovered','Population']]","2804be69":"comp_pop_sel['Country\/Region'][comp_pop_sel['Population'].isnull()].unique()","add1d5d1":"#comp_df[comp_df['Country\/Region'].str.match('Canada')]\n#covid_pop_sel[covid_pop_sel['Country.Region'].str.match('Canada')].head(2)","5cf474d5":"missings_count = {col:comp_pop_sel[col].isnull().sum() for col in comp_pop_sel.columns}\nmissings = pd.DataFrame.from_dict(missings_count, orient='index')\nprint(missings.nlargest(30, 0))","e2077159":"#treating null values\ncomp_pop_sel['Population'] = comp_pop_sel['Population'].fillna(0)","a0eedb37":"comp_df_Italy = comp_pop_sel[comp_pop_sel['Country\/Region']=='Italy']\ncomp_df_Italy = comp_df_Italy.reset_index(drop = True)\ncomp_df_Italy.tail(5)","654c0980":"comp_df_Italy['Day_num'] = preprocessing.LabelEncoder().fit_transform(comp_df_Italy.Date)\ncomp_df_Italy.tail(3)","e5868cc6":"comp_df_Italy['R'] = comp_df_Italy['Deaths']+comp_df_Italy['Recovered']\ncomp_df_Italy['I'] = comp_df_Italy['Confirmed']- comp_df_Italy['R']\ncomp_df_Italy['S'] = comp_df_Italy['Population']-comp_df_Italy['I']-comp_df_Italy['R']\ncomp_df_Italy.tail(3)","39c45116":"comp_df_Italy_S = comp_df_Italy['S']\ncomp_df_Italy_I = comp_df_Italy['I']\ncomp_df_Italy_R = comp_df_Italy['R']\n\ncomp_df_Italy_s = np.array(comp_df_Italy_S, dtype=float)\ncomp_df_Italy_i = np.array(comp_df_Italy_I, dtype=float)\ncomp_df_Italy_r = np.array(comp_df_Italy_R, dtype=float)\n\ndisplay(comp_df_Italy_s[9],comp_df_Italy_i[9], comp_df_Italy_r[9])","4d1e1fd8":"N = 60480000\nS0 = 60479998\nI0 = 2\nR0 = 0\n\nxdata = comp_df_Italy.Day_num\nxdata = np.array(xdata, dtype=float)\nydata = comp_df_Italy_i\nydata = np.array(ydata, dtype=float)\n\npopt, pcov = optimize.curve_fit(fit_odeint, xdata, ydata)\nfitted = fit_odeint(xdata, *popt)\n\nplt.plot(xdata, ydata, 'o')\nplt.plot(xdata, fitted)\nplt.title(\"Fit of SIR model for Italy infected cases\")\nplt.ylabel(\"Population infected\")\nplt.xlabel(\"Days\")\nplt.show()\nprint(\"Optimal parameters: beta =\", popt[0], \" and gamma = \", popt[1])","590ece63":"df_train = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/test.csv')\ndf_subm = pd.read_csv('\/kaggle\/input\/covid19-global-forecasting-week-4\/submission.csv')","3ad21f2a":"df_train_copy = df_train.copy()\ndf_test_copy = df_test.copy()","293e360c":"df_train.rename(columns={'Country_Region':'Country'}, inplace=True)\ndf_train.rename(columns={'Province_State':'State'}, inplace=True)\ndf_train['Date'] = pd.to_datetime(df_train['Date'], infer_datetime_format=True)\n\ndf_test.rename(columns={'Country_Region':'Country'}, inplace=True)\ndf_test.rename(columns={'Province_State':'State'}, inplace=True)\ndf_test['Date'] = pd.to_datetime(df_test['Date'], infer_datetime_format=True)","894ff900":"#confirmed cases\ny1_df_Train = df_train.iloc[:, -2]\n#fatalities\ny2_df_Train = df_train.iloc[:, -1]\n\nNOVAL = \"NOVAL\"\ndef handlenullstate(State, Country):\n    if State == NOVAL: return Country\n    return State","94678f41":"#Data Cleansing and enrichment\n\ndf_train['State'].fillna(NOVAL, inplace=True)\ndf_train['State'] = df_train.loc[:, ['State', 'Country']].apply(lambda x : handlenullstate(x['State'], x['Country']), axis=1)\n\ndf_train.loc[:, 'Date'] = df_train.Date.dt.strftime(\"%m%d\")\ndf_train[\"Date\"]  = df_train[\"Date\"].astype(int)\n\ndf_test['State'].fillna(NOVAL, inplace=True)\ndf_test['State'] = df_test.loc[:, ['State', 'Country']].apply(lambda x : handlenullstate(x['State'], x['Country']), axis=1)\n\ndf_test.loc[:, 'Date'] = df_test.Date.dt.strftime(\"%m%d\")\ndf_test[\"Date\"]  = df_test[\"Date\"].astype(int)\n\ndf_test.head()","70c8d8b0":"covid_pop_taken = covid_pop[['Province.State','Country.Region','Population']]","b20688b5":"covid_pop_taken.rename(columns={'Province.State':'State'}, inplace=True)\ncovid_pop_taken.rename(columns={'Country.Region':'Country'}, inplace=True)","6a44ed35":"covid_pop_taken['State'].fillna(\"None\", inplace=True)\nNOVAL = 'None'\ncovid_pop_taken['State'] = covid_pop_taken.loc[:, ['State', 'Country']].apply(lambda x : handlenullstate(x['State'], x['Country']), axis=1)\ncovid_pop_taken.head(3)","72ee0a2c":"df_train_copy2 = df_train.copy()\ndf_test_copy2 = df_test.copy()\ndf_test.head(3)","9d288a1e":"df_train_co_pop = df_train.merge(covid_pop_taken, left_on = ['Country','State'], right_on = ['Country','State'], how = 'left')\ndf_test_co_pop = df_test.merge(covid_pop_taken, left_on = ['Country','State'], right_on = ['Country','State'], how = 'left')\ndf_test_co_pop.head(5)","94985317":"df_train_co_pop['Country'][df_train_co_pop['Population'].isnull()].unique()","e478b293":"#covid_pop_sel.loc[covid_pop_sel['Country']=='Korea, South', 'Country.Region'] = 'South Korea'","640f2e54":"df_train_co_pop[['Population']] = preprocessing.scale(df_train_co_pop[['Population']])\ndf_test_co_pop[['Population']] = preprocessing.scale(df_test_co_pop[['Population']])","66851ac3":"df_train_co_pop.head(3)","b6de7bf1":"df_train = df_train_co_pop \ndf_test = df_test_co_pop ","0f591548":"from sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\n\ndf_train.Country = le.fit_transform(df_train.Country)\ndf_train['State'] = le.fit_transform(df_train['State'])\ndf_train.Country = le.fit_transform(df_train.Country)\n\ndf_test.Country = le.fit_transform(df_test.Country)\ndf_test['State'] = le.fit_transform(df_test['State'])\n\ndf_test.head()","44973a14":"from warnings import filterwarnings\nfilterwarnings('ignore')\n\nfrom sklearn import preprocessing\n\nle = preprocessing.LabelEncoder()\n\nfrom xgboost import XGBRegressor\n\ncountries = df_train.Country.unique()","3a757e1d":"xout = pd.DataFrame({'ForecastId': [], 'ConfirmedCases': [], 'Fatalities': []})\n\nfor country in countries:\n    states = df_train.loc[df_train.Country == country, :].State.unique()\n    for state in states:\n        #trian\n        x_train_CS = df_train.loc[(df_train.Country == country) & (df_train.State == state), ['State', 'Country', 'Date', 'ConfirmedCases', 'Fatalities','Population']]\n        y1_train_CS = x_train_CS.loc[:, 'ConfirmedCases']\n        y2_train_CS = x_train_CS.loc[:, 'Fatalities']\n        x_train_CS = x_train_CS.loc[:, ['State', 'Country', 'Date','Population']]\n        x_train_CS.Country = le.fit_transform(x_train_CS.Country)\n        x_train_CS['State'] = le.fit_transform(x_train_CS['State'])\n        \n        #test\n        x_test_CS = df_test.loc[(df_test.Country == country) & (df_test.State == state), ['State', 'Country', 'Date', 'ForecastId','Population']]\n        x_test_CS_Id = x_test_CS.loc[:, 'ForecastId']\n        x_test_CS = x_test_CS.loc[:, ['State', 'Country', 'Date','Population']]\n        x_test_CS.Country = le.fit_transform(x_test_CS.Country)\n        x_test_CS['State'] = le.fit_transform(x_test_CS['State'])\n        \n        xmodel1 = XGBRegressor(n_estimators=1000)\n        xmodel1.fit(x_train_CS, y1_train_CS)\n        y1_xpred = xmodel1.predict(x_test_CS)\n        \n        xmodel2 = XGBRegressor(n_estimators=1000)\n        xmodel2.fit(x_train_CS, y2_train_CS)\n        y2_xpred = xmodel2.predict(x_test_CS)\n        \n        xdata = pd.DataFrame({'ForecastId': x_test_CS_Id, 'ConfirmedCases': y1_xpred, 'Fatalities': y2_xpred})\n        xout = pd.concat([xout, xdata], axis=0)\n","06aa4fb4":"xout.ForecastId = xout.ForecastId.astype('int')\nxout['ConfirmedCases'] = round(xout['ConfirmedCases'],1)\nxout['Fatalities'] = round(xout['Fatalities'],1)\ndisplay(xout.head())","32427e5c":"#xout['ForecastId'] = xout['ForecastId'].apply(int)\nxout['ConfirmedCases'] = xout['ConfirmedCases'].apply(int)\nxout['Fatalities'] = xout['Fatalities'].apply(int)","2a3f4b55":"xout.dtypes","40b178ad":"xout = xout.drop_duplicates()\nxout.reindex()","244bb57e":"xout.to_csv('submission.csv', index=False)","9c472ff2":"## exploring the data set","dcaf8a31":"EDA gives us some clear insights and a better understanding about the dataset. Therefore a better EDA should be done before directly moving to the modelling part. \nHere is how I started with my model...\n\nAs this is an epidemic, I searched what are the statistical models used for forecasting in epidemics. I have attached some links that I found useful to understand an epidemic on a statistical background.\n\n* [https:\/\/www.sciencedirect.com\/science\/article\/pii\/S1755436516300329](http:\/\/)\n* [https:\/\/www.universiteitleiden.nl\/binaries\/content\/assets\/science\/mi\/scripties\/statscience\/2017-2018\/2018_06_29_masterthesis_verkerk.pdf](http:\/\/)\n* [https:\/\/journals.plos.org\/ploscompbiol\/article?id=10.1371\/journal.pcbi.1006917](http:\/\/)\n\nI found this very interesing visualization for past pandemics.\n\n* https:\/\/www.visualcapitalist.com\/history-of-pandemics-deadliest\/\n\nSome models Used in forecasting epidemics :\n\n* autoregressive integrated moving average (ARIMA) model - accurate only short-term prediction\n* generalized linear model (GLM)\n* SIR (Susceptible \u2013 Infected \u2013 Removed) model\n* SEIR (Susceptible \u2013 Exposed - Infected \u2013 Removed) model","ab7f6bfc":"### Population wise, Land Area wise, Urban Population wise, Median Age wise fatality rate and confirmed rate","e46b15a1":"* Confirmed, Fatal and New Counts still shows a upward trend and increasing day by day.\n* USA shows the highest confirmed count.\n* Italy shows the highest fatal count.\n* Italy shows the highest ratio between Fatalities and Confirmed Cases.\n* Italy, Spain , USA, France are the top 4 countires with highest fatal rates. Fatal rate is the fatal count per day from the first identified fatal case of that country.\n* China's trend is different with the daily trends ( Confirmed and Fatal ) of other countries. This may be becuase the outbreak started and recorded first in China. Therefore, in the modelling part China should be considered separately.\n* Italy and Spain have a significant fatal count and a confirmed count when compaired with their population","666f5f5f":"![image.png](attachment:image.png)","07b345a3":"## SIR Model","17382325":"### Trying with XGBoost Algorithm","8110c665":"* \u03b2 - a parameter controlling how much the disease can be transmitted through exposure\n* \u03b3 - a parameter expressing how much the disease can be recovered in a specific period\n* D - the average days to recover from infectious\n* R0 - parameter to express the nature of the disease","17d8b9a7":"## Exploratory Analysis starts from here","236307e3":"### Insights from the EDA ( Exploratory Data Analysis ) as recorded on 4th April 2020","75f3a10f":"## Developing the model","21f8df98":"### Fitting the SIR model with real data","11037139":"Insight : Althougth the curve is fitting for data before April 1, the curve is not fitting to data after April 1st. So I am going to try XGBOOST classifier for this. XGBoost is an implementation of gradient boosted decision trees designed for speed and performance.","e53b5194":"Following chart shows the average increment of the fatality count for a day from the 1st fatality identified date","26436cf6":"> *Data Set Summary (this should be updated on the day you run this as the data set is live )*\n* size of the data set : 19404, 6\n* 173 unique countries\n* 125 unique Provice_states (11154 null records)\n* data for 66 days from 22-Jan-2020 to 27-Mar-2020","ac44d28e":"**Observations**\n* Above graphs clearly shows that the trend in China is different from the other countries\n* All the other countries shows a likely trend. However, considering the slopes of the graphs from visual level it can be oberved that USA is having a higher rate of Confirmed cases over a small time period\n* While other countries have gone to the ( I would call it \"Red Zone\" ) in a regular way ( Confirmed cases have gradually increased ), Iran has entered the \"Red Zone\" directly. It shows a sudden increment on confirmed cases.","32630ae2":"when going through articles about COVID - 19, following factors in a country was found as factors that are having an impact on COVID-19 outbreak in a country\n* Population density\n* Age of the infected person\n* Urban population - These areas are highly populated with people and high urban population may affect to a high spread ","6c8ec84d":"This is a mostly used model to study the behaviour of an epidemic. \n* **S - Susceptible** is a group of people who are vulnerable to exposure with infectious people. They can be patient when the infection happens\n* **I - infectious** represents the infected people\n* **R - Recovered\/ Removed** people get immunity so that they are not susceptible to the same illness anymore\n\nThis Model has some extended versions of it like SEIR (Cossidering the Exposed population) and SIRD (Considering the Deaths)","6b81a900":"#### Preprocessing","aa7cfe68":"### Plotting the Confirmed vs Fatalities trend for top 8 countries","0351faa8":"## Cleansing the data set","a980324d":"### Italy - Using the updated data set with Recovered Count","2570250e":"Looking at the above plots, I categorized the countries in to following groups.\n* China - As the first outbreak happened in China, this is an exceptional case. Need to be studies separately\n* Italy, Spain, USA, France - These are the top 4 countries affected when considered both the Fatality rate, (Fatalities\/ Confirmed) rate.\n* Netherlands, Iran, UK - These are the remaining countries from the top 8 affected\n* Other Countries","351a7c21":"![image.png](attachment:image.png)","e7a2ba60":"Classmethod and staticmethod :\n[https:\/\/stackoverflow.com\/questions\/136097\/difference-between-staticmethod-and-classmethod](http:\/\/)","b58bd72f":"Need to check how rapidly Fatalities are happenning in each country. For this I got the First Fatal Date, Last Fatal Date. The difference between those 2 values give us the no.of the days the country has been in the Fatality Status. Dividing the Fatal count by this number of Fatal Days give the fatal rate.","9b16c1fe":"### Italy","aa914a9f":"Let's create the following factors to get an idea about the affect from Population, Population Density, Median Age, Urban population %\n* pop_factor - considering the population (Fatalities\/ Population) : larger value, larger impact\n* Density_factor - considering the population density : \n* age_factor - considering the Median Age\n* urban_factor - considering the urban population\n\nI will use only the population factor for demonstration"}}