{"cell_type":{"1ed76856":"code","e339787a":"code","0105e2bf":"code","3cd1536c":"code","54b3b1d5":"code","7680cc57":"code","45eb03c5":"code","50560d76":"code","d65f2d2d":"code","a9e66137":"code","a340869a":"code","f55f1e07":"code","4ec91b1a":"code","f76255b2":"code","ec700ea9":"code","52fb0051":"code","8bce573c":"code","212bf1ca":"code","c4ce2130":"code","8e9168ff":"code","664878a5":"code","c5a9ffc7":"code","188ea965":"code","857c7647":"code","43513a1e":"code","96f6d5b4":"code","a6d72cec":"code","955bdb65":"code","e3c7d7a7":"code","aa92f48e":"code","312d2c50":"code","6b16e8c1":"code","e1634e70":"code","06fcf637":"code","00bc75a0":"code","e741dd39":"code","b86daeac":"code","07d8ad9f":"code","d5dbce55":"code","c7500bb9":"code","ca5f9d68":"code","0721a1c3":"code","a07c32a8":"code","1e5be9e7":"code","f08b43a7":"code","723135b0":"markdown","ae748353":"markdown","97f23669":"markdown","ba5df0ee":"markdown","4cddb737":"markdown","53f71b0f":"markdown","bfed3a9a":"markdown","38376c99":"markdown","f3e9c783":"markdown","0ab014ac":"markdown","98464042":"markdown","e520f383":"markdown","ecd66a23":"markdown","a07bcdf2":"markdown","eebcff81":"markdown","29e72a84":"markdown","de872a99":"markdown","4af87b32":"markdown","78777a70":"markdown","81c04e5e":"markdown","122bc6af":"markdown","bf593374":"markdown","a3881dd5":"markdown","2e19819e":"markdown","411c6c6a":"markdown","78a7f29f":"markdown","57377268":"markdown","452508ff":"markdown","41f97a04":"markdown","df9b3868":"markdown","f517261e":"markdown","637d0cb3":"markdown","5766dccc":"markdown"},"source":{"1ed76856":"import pandas as pd\nimport numpy as np\n\n\nimport plotly\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff","e339787a":"df = pd.read_csv(\"..\/input\/top-play-store-games\/android-games.csv\")","0105e2bf":"df.head()","3cd1536c":"df.shape","54b3b1d5":"df.isnull().sum()","7680cc57":"df.info()","45eb03c5":"df.describe()","50560d76":"df[\"installs\"]","d65f2d2d":"def numbers(df):\n    if df.split(\".\")[1].split(\" \")[1] == \"M\":\n        return int(df.split(\".\")[0])\n    else:\n        return int(df.split(\".\")[0])\/1000\ndf[\"installs\"] = df.installs.apply(numbers)\ndf = df.rename(columns={'installs': 'installs_in_million'})","a9e66137":"df[\"installs_in_million\"].head()","a340869a":"df.price.value_counts(normalize=True)","f55f1e07":"df.paid.value_counts(normalize=True)","4ec91b1a":"df.drop(\"price\", axis=1, inplace=True)","f76255b2":"df.info()","ec700ea9":"df[\"5 star ratings %\"] = round(df[\"5 star ratings\"]  \/ (df[\"5 star ratings\"] + df[\"4 star ratings\"] + df[\"3 star ratings\"] + df[\"2 star ratings\"] + df[\"1 star ratings\"]) * 100, 2)\ndf[\"4 star ratings %\"] = round(df[\"4 star ratings\"]  \/ (df[\"5 star ratings\"] + df[\"4 star ratings\"] + df[\"3 star ratings\"] + df[\"2 star ratings\"] + df[\"1 star ratings\"]) * 100, 2)\ndf[\"3 star ratings %\"] = round(df[\"3 star ratings\"]  \/ (df[\"5 star ratings\"] + df[\"4 star ratings\"] + df[\"3 star ratings\"] + df[\"2 star ratings\"] + df[\"1 star ratings\"]) * 100, 2)\ndf[\"2 star ratings %\"] = round(df[\"2 star ratings\"]  \/ (df[\"5 star ratings\"] + df[\"4 star ratings\"] + df[\"3 star ratings\"] + df[\"2 star ratings\"] + df[\"1 star ratings\"]) * 100, 2)\ndf[\"1 star ratings %\"] = round(df[\"1 star ratings\"]  \/ (df[\"5 star ratings\"] + df[\"4 star ratings\"] + df[\"3 star ratings\"] + df[\"2 star ratings\"] + df[\"1 star ratings\"]) * 100, 2)","52fb0051":"df.head(1)","8bce573c":"df[\"category\"].value_counts()","212bf1ca":"fig = px.histogram(df, x=\"category\", title=\"Game Categories\", labels={\"category\": \"Categories\"})\nfig.update_layout(xaxis={\"categoryorder\":\"total descending\"})\nfig.show()","c4ce2130":"df[\"total ratings\"].describe()","8e9168ff":"fig = px.histogram(df, x=\"total ratings\", title=\"Total Ratings\", labels={\"total ratings\": \"Total Ratings\"})\nfig.update_layout()\nfig.show()","664878a5":"fig = px.box(df, x=\"total ratings\", title=\"Total Ratings\", labels={\"total ratings\": \"Total Ratings\"},\n             hover_data = df[['title','category']])\nfig.update_traces(quartilemethod=\"inclusive\")\nfig.show()","c5a9ffc7":"df[\"installs_in_million\"].describe()","188ea965":"df[\"installs_in_million\"].value_counts().sort_index()","857c7647":"fig = px.histogram(df, x=\"installs_in_million\", title=\"Installs in Millions\", labels={\"installs_in_million\": \"Installs in Millions\"})\nfig.update_layout()\nfig.show()","43513a1e":"fig = px.box(df, x=\"installs_in_million\", title=\"Installs in Millions\",\n             labels={\"installs_in_million\": \"Installs in Millions\"},\n             hover_data = df[['title','category']])\nfig.update_traces(quartilemethod=\"inclusive\")\nfig.show()","96f6d5b4":"df.groupby(\"paid\").mean()","a6d72cec":"df.paid.value_counts()","955bdb65":"paid_free= df['paid'].value_counts()\nlabel =['Free','Paid']\nfig = px.pie(paid_free, values=df['paid'].value_counts().values, names=label,\n             title='Paid & Free Games')\nfig.update_traces(textposition='inside', textinfo='percent+label')\nfig.show()","e3c7d7a7":"total_ratings_by_category = df.groupby('category')['total ratings'].mean()\ntotal_ratings_by_category","aa92f48e":"fig = px.bar(total_ratings_by_category, x= total_ratings_by_category.index, y=total_ratings_by_category.values, labels={'y':'Total Ratings'})\nfig.update_layout(xaxis={'categoryorder':'total descending'})\nfig.show()","312d2c50":"install_by_category = df.groupby('category')['installs_in_million'].mean()\ninstall_by_category","6b16e8c1":"fig = px.bar(install_by_category, x=install_by_category.index, y=install_by_category.values,\n            labels={\"y\":\"Total Installs\"})\nfig.update_layout(xaxis={\"categoryorder\":\"total descending\"})\nfig","e1634e70":"growth = df.groupby(\"category\")[[\"growth (30 days)\", \"growth (60 days)\"]].mean()","06fcf637":"fig = px.bar(growth, y=\"growth (30 days)\", labels={\"category\": \"Category\", \"value\": \"Total Growth\"})\nfig.update_layout(xaxis={\"categoryorder\": \"total descending\"})","00bc75a0":"fig = px.bar(growth, y=\"growth (60 days)\", labels={\"category\": \"Category\", \"value\": \"Total Growth\"})\nfig.update_layout(xaxis={\"categoryorder\": \"total descending\"})","e741dd39":"fig = px.line(growth, y=[\"growth (30 days)\", \"growth (60 days)\"],\n             labels={\"category\": \"Category\", \"value\": \"Total Growth\"})\nfig.show()","b86daeac":"stars = df.groupby(\"category\")[[\"1 star ratings %\", \"5 star ratings %\"]].mean()","07d8ad9f":"fig = px.bar(stars, y=\"1 star ratings %\")\nfig.update_layout(xaxis={\"categoryorder\": \"total descending\"})\nfig.show()","d5dbce55":"fig = px.bar(stars, y=\"5 star ratings %\")\nfig.update_layout(xaxis={\"categoryorder\": \"total descending\"})\nfig.show()","c7500bb9":"df.groupby(\"category\")[[\"1 star ratings %\",\"5 star ratings %\"]].mean().sort_values(by=\"1 star ratings %\")","ca5f9d68":"df.groupby(\"category\")[[\"1 star ratings %\",\"5 star ratings %\"]].mean().sort_values(by=\"5 star ratings %\")","0721a1c3":"top_3 = df[df[\"rank\"]<4][['rank','title','category', 'total ratings', 'installs_in_million', '5 star ratings', \"5 star ratings %\"]]\ntop_3","a07c32a8":"fig = px.scatter(top_3, x=\"5 star ratings %\", \n                 hover_data = top_3[['category','rank']], color='category', \n                 title = \"Top 3 Games by Their % 5 Star Ratings\")\nfig.show()","1e5be9e7":"fig = px.scatter(top_3, x=\"5 star ratings\", \n                 hover_data = top_3[['category','rank']], color='category', \n                 title = \"Top 3 Games by Their 5 Star Ratings\")\nfig.show()","f08b43a7":"fig = px.scatter(top_3, x=\"installs_in_million\", \n                 hover_data = top_3[['category','rank']], color='category', \n                 title = \"Top 3 Games by Their Installs in Million\")\nfig.show()","723135b0":"## Growth by Category","ae748353":"- We have 15 columns(variables) and 1730 rows(games). What about missing values?","97f23669":"Great. Now it is more clear. Feature engineering part is done. Let's move on to analysis part.\n\n- First, let's look into `category` column if category samples are the same. ","ba5df0ee":"## Installs in Million","4cddb737":"- In dataset more than %99 of the games are free.\n- There is not enough sample size to make reliable conclusions about price ranges.\n- Let's drop `price` column.","53f71b0f":"- Most of the ratings are in the range of 0-500.000.\n- The mean is greater than the median.\n- We have highly right skewed distribution because of outliers on the maximum side of the distribution.\n- Because of outliers, it would be a good idea to look for the median based approach.","bfed3a9a":"- Casino games have the most 5 star ratings as a percentage by %75.4. Also has the fourth least 1 star rating as a percentage.\n- Music games has the least 5 star ratings and also have the most 1 star ratings. It doesn't look good for music games.\n- Most installed categories, Action, Arcade and Casual, have almost the same 5 star ratings as percentage. Among those, Casual has the least 1 star rating with just %8.46, Arcade is the second least with %9.79 and Action has most 1 star ratings among most installed game categories with %11.25.","38376c99":"## Category","f3e9c783":"- Games in the action, arcade and casual categories are installed significantly more than games in the trivia, casino and word categories.","0ab014ac":"## Top 3 Games by Category","98464042":"- Now, let's read and check dataset.","e520f383":"- Let's start with importing required libraries.","ecd66a23":"Now, let's work on *star ratings* columns.\n\n- Since, there are really big numbers, it is hard to compare them. I will create new colums by normalizing existing columns","a07bcdf2":"Before going further, let's summarize what we have got from the dataset.\n\n- Our dataset has games from different categories, different ratings and different number of installs.  \n- `installs` variable has a good numerical info to use. It would be a good idea to make adjustments on it to use it as a numerical variable\n- There is no missing value, which is very good during the data preparation stage.\n- `category` column is categorical variable, it would be good to see whether any significant differences among the categories of the games.\n-  Numerical variables deserves special attention for further analysis.\n- `paid` and `price` seems to have a lot on common. Needs to look in detail and if necessary to drop one of them for simplicity.","eebcff81":"## Paid-Free Games\n\n\n\n\n\n\n- Even though most of the games, more than %99, is free, let's check differences between paid and free games.","29e72a84":"- Let's look into `installs` column.","de872a99":"- What about installs? Let's check `installs_in_million` column.","4af87b32":"- Great! Now `installs` is a float type column.\n- Let's check `price` and `paid` columnn.","78777a70":"- In this notebook, I am going to make Exploratory Data Analysis (EDA) with the Top Games on Google Playstore dataset.\n- This is a dataset of top 100 games of each category of games on Google Play Store along with their ratings and other data like price and number of installs. Data as of Jun 9, 2021.\n- Let's start.","81c04e5e":"## Star Ratings by Category","122bc6af":"- We have rightly skewed distribution.\n- Just like `total ratings` column, `installs_in_million` columns also has outliers on the maximum side.\n- By looking at just boxplot, you may think that there are only two outliers but that may be wrong. Even though `installs_in_million` column seems like numerical type, it is actually categorical column because there are only 9 possible values in this column. Because of this, in box plot, outliers stacked on each other. You may understand better by looking at value counts of this column. I suspect there are 14 outliers in this column.\n- Most of the values are stacked between 1M and 100M.\n- Size of the outliers definitely affect  mean value and distributions.\n- Difference between mean value and median value is really huge (mean = 29.1M,median= 10M).","bf593374":"- As mentioned above, games in the action, casual, strategy,arcade, sports categories are getting considerably more ratings than, games in the educational, music categories.\n- It is the same even for the top ranked games in these categories.","a3881dd5":"- Even though games in the action categories get more ratings and were installed more than games in the other categories, games in the casino category have more growth in 30 days. \n- Growth in 60 days for the games in the casino, adventure, role playing categories are significantly lower than their growth in 30 days. \n- With given dataset, we can only speculate something, but we can not make an analytical assumptions based on the  given data. We need more variables to explain the signifcant differences for some of the categories in 30-60 days growth.","2e19819e":"## Total Ratings","411c6c6a":"- All looks OK except installs column. Although I would have expect it to be a numerical(int or float), it is object type. I will look into that later.","78a7f29f":"- As mentioned above, games in the action, arcade and casual categories are installed significantly more than games in the trivia, casino and word categories.\n- It is the same even for the top ranked games in these categories.","57377268":"## Total Ratings by Category","452508ff":"- Let's convert this column into numerical type by defining a function.","41f97a04":"It was a pleasure to work with this dataset for me. I would like to thank dataset contibutor for this data. I hope you enjoyed too. If you liked my EDA on this dataset, feel free to check my other notebooks as well. Looking forward for your feedback. Thanks a lot.\n\nHave a great day.","df9b3868":"- Not even a one missing value! We will be deprived of the joy of handling missing values!\n- Let's check general info of dataset.","f517261e":"- Games in the action, casual, strategy,arcade, sports categories are getting considerably more ratings than, games in the educational, music categories.","637d0cb3":"- It is time to check `total ratings` column.","5766dccc":"- Almost same category samples.\n- Let's visualize `category` column."}}