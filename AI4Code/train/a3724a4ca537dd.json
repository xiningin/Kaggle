{"cell_type":{"3d02ad14":"code","da76dc8f":"code","6acb3ffe":"code","e6fb2f63":"code","bce0bc17":"code","1cd7a6a2":"code","b0345dc3":"code","d2848e8b":"code","3d9a3d15":"code","fbd1eea3":"code","6d85051c":"markdown","ba17035e":"markdown","5e8a9dc4":"markdown"},"source":{"3d02ad14":"import pandas as pd\nimport numpy as np\nimport time","da76dc8f":"import gc\nimport riiideducation\nenv = riiideducation.make_env()\niter_tester = env.iter_test()","6acb3ffe":"results_c = pd.read_parquet('..\/input\/riiid-data-prparation\/results_question.parq')\nresults_u = pd.read_parquet('..\/input\/riiid-data-prparation\/results_user.parq')","e6fb2f63":"import lightgbm as lgbm","bce0bc17":"model = lgbm.Booster(model_file='..\/input\/riiid-training\/booster_075291.txt')","1cd7a6a2":"col1 = ['answered_correctly_content', 'content_id']\ncol2 = ['answered_correctly_user', 'questions_attempted', 'user_id']\nrem =  ['prior_question_elapsed_time'] \npk = ['user_id','content_id']","b0345dc3":"used_cols = rem+col1+col2\ninit_cols = pk+rem","d2848e8b":"# required only for numpy \nresults_u = results_u.values\nresults_c = results_c.values","3d9a3d15":"print('time on each step:')\nt = time.time()\nfor test_df, sample_prediction_df in iter_tester:\n    test_df = test_df.reset_index()\n    test_df['answered_correctly'] = 0.6571448171182185\n    nump = test_df[init_cols].values\n    for i in range(len(test_df)):\n        uinf = results_u[np.where(nump[i,0]==results_u[:,2])[0]]\n        qinf = results_c[np.where(nump[i,1]==results_c[:,1])[0]]\n        if len(uinf)==0 or len(qinf)==0:\n            continue\n        test_df.loc[i,'answered_correctly'] = model.predict(np.hstack((nump[i,2].reshape(1,-1),qinf,uinf)))\n    env.predict(test_df.loc[test_df['content_type_id']==0,['row_id','answered_correctly']])\n    print(time.time()-t)\n    t = time.time()","fbd1eea3":"print('time on each step:')\nt = time.time()\nfor test_df, sample_prediction_df in iter_tester:\n    test_df = test_df.reset_index()\n    test_df = test_df.merge(results_c,on='content_id',right_index=True)\n    temp = test_df.merge(results_u,on='user_id',right_index=True)\n    test_df['answered_correctly'] = 0.6571448171182185\n    test_df.loc[temp.index.to_list(),'answered_correctly'] = model.predict(temp[used_cols])\n    env.predict(test_df.loc[test_df['content_type_id']==0,['row_id','answered_correctly']])\n    print(time.time()-t)\n    t = time.time()","6d85051c":"Inference using pandas","ba17035e":"inference using numpy","5e8a9dc4":"I was able to get improvement in inference speed by using numpy instead of pandas"}}