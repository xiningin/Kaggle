{"cell_type":{"5c9e4f68":"code","d43d07b6":"code","bf996e82":"code","8cb8ff0a":"code","f7e5019e":"code","e02947f6":"code","b0a87ca7":"code","06870966":"code","8c209674":"code","80102647":"code","e01c8022":"markdown","82405b91":"markdown","28dc22c5":"markdown","ef4bcce2":"markdown","e1b9e9e9":"markdown","99c907f3":"markdown"},"source":{"5c9e4f68":"import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\n\ndf = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/train.csv')\ntest_df = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/test.csv')\nsubmission_df = pd.read_csv('..\/input\/tabular-playground-series-apr-2021\/sample_submission.csv')","d43d07b6":"df.head(2)","bf996e82":"names_cols_missing_values = list(df.columns[df.isna().any()])\nnames_cols_missing_values\n\ndf.drop(names_cols_missing_values, axis=1, inplace=True)","8cb8ff0a":"comma_and_space = 2\ndf[\"NameLength\"] = df.Name.apply(lambda x : len(x) - comma_and_space)\n\ndf[\"NameFirstChar\"] = df.Name.apply(lambda x : x[0])\n\ndf[\"IsNameDublicated\"] = df.Name.duplicated() \n\nremove_comma = -1\ndf[\"FirstName\"] = df.Name.apply(lambda x : x.partition(' ')[0][:remove_comma])\n\ndf[\"LastName\"] = df.Name.apply(lambda x : x.split()[-1])\n\ndf[\"LastNameFirstChar\"] = df.LastName.apply(lambda x : x[0])\n\ndf[\"IsFirstNameDublicated\"] = df.FirstName.duplicated()\n\ndf[\"IsLastNameDublicated\"] = df.LastName.duplicated()\n\ndf[\"IsFullNameDublicated\"] = df.Name.duplicated()\n\ndef check_two_same_sequence_letters(x):\n    current_letter = \"\"\n    for i in x:\n        if (i == current_letter):\n            return True\n        current_letter = i\n    else:\n        return False\ndf[\"FirstNameTwoSecLetters\"] = df.FirstName.apply(lambda x : check_two_same_sequence_letters(x))\ndf[\"LastNameTwoSecLetters\"] = df.LastName.apply(lambda x : check_two_same_sequence_letters(x))\n","f7e5019e":"df.head(2)","e02947f6":"def df_preparation(the_df):\n    the_df[\"Survived\"] = the_df[\"Survived\"].astype('int8')\n    the_df[\"Pclass\"] = the_df[\"Pclass\"].astype('int8')\n    the_df[\"Sex\"] = the_df[\"Sex\"].astype('category').cat.codes\n    the_df[\"Name\"] = the_df[\"Name\"].astype('category').cat.codes\n    the_df[\"SibSp\"] = the_df[\"SibSp\"].astype('int8')\n    the_df[\"Parch\"] = the_df[\"Parch\"].astype('int8')\n    # new features\n    the_df[\"NameLength\"] = the_df[\"NameLength\"].astype('int8')\n    the_df[\"NameFirstChar\"] = the_df[\"NameFirstChar\"].astype('category').cat.codes\n    the_df[\"IsNameDublicated\"] = the_df[\"IsNameDublicated\"].astype('int8')\n    the_df[\"FirstName\"] = the_df[\"FirstName\"].astype('category').cat.codes\n    the_df[\"LastName\"] = the_df[\"LastName\"].astype('category').cat.codes\n    the_df[\"LastNameFirstChar\"] = the_df[\"LastNameFirstChar\"].astype('category').cat.codes\n    the_df[\"IsFirstNameDublicated\"] = the_df[\"IsFirstNameDublicated\"].astype('int8')\n    the_df[\"IsLastNameDublicated\"] = the_df[\"IsLastNameDublicated\"].astype('int8')\n    the_df[\"IsFullNameDublicated\"] = the_df[\"IsFullNameDublicated\"].astype('int8')\n    df[\"FirstNameTwoSecLetters\"] = df[\"FirstNameTwoSecLetters\"].astype('int8')\n    df[\"LastNameTwoSecLetters\"] = df[\"LastNameTwoSecLetters\"].astype('int8')\n    \n    return the_df\n\ndf = df_preparation(df).copy()   ","b0a87ca7":"df.info()","06870966":"random_forest_model = RandomForestClassifier(random_state=0)","8c209674":"def make_model(new_column_name, chosen_columns, the_df):\n    X = the_df[chosen_columns]\n    y = the_df.Survived\n    X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 0)\n    \n    random_forest_model.fit(X_train,y_train)\n    prediction_score = random_forest_model.score(X_test,y_test)\n    print( '{:<25} score: {:>1.5f}'.format(new_column_name, prediction_score) )","80102647":"make_model(\"Without new features\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\"], df)\nmake_model(\"Name\", [\"Name\", \"Sex\", \"SibSp\", \"Parch\", \"Name\"], df)\nprint(\"\\n          New Features:\\n\")\nmake_model(\"NameLength\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"NameLength\"], df)\nmake_model(\"NameFirstChar\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"NameFirstChar\"], df)\nmake_model(\"IsNameDublicated\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"IsNameDublicated\"], df)\nmake_model(\"FirstName\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"FirstName\"], df)\nmake_model(\"LastName\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"LastName\"], df)\nmake_model(\"LastNameFirstChar\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"LastNameFirstChar\"], df)\nmake_model(\"IsFirstNameDublicated\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"IsFirstNameDublicated\"], df)\nmake_model(\"IsLastNameDublicated\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"IsLastNameDublicated\"], df)\nmake_model(\"IsFullNameDublicated\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"IsFullNameDublicated\"], df)\nmake_model(\"FirstNameTwoSecLetters\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"FirstNameTwoSecLetters\"], df)\nmake_model(\"LastNameTwoSecLetters\", [\"Pclass\", \"Sex\", \"SibSp\", \"Parch\", \"LastNameTwoSecLetters\"], df)","e01c8022":"#### So far, only IsLastNameDublicated slightly improved the score. I performed submission and it improved my score.","82405b91":"#### Checking the columns.","28dc22c5":"#### In this notebook I tried making new features from Name column. For those that created so far. Only the new feature \"IsLastNameDublicated\" improved the score.","ef4bcce2":"#### Creating new features from the Name column.","e1b9e9e9":"#### For the simplicity, I will use now only features that don't have missing values. And without the PassengerId.","99c907f3":"#### Making the models"}}