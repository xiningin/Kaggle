{"cell_type":{"20016e39":"code","261e537f":"code","b2d4f0b1":"code","36e313d7":"code","b754fce7":"code","7d6a06d2":"code","58464a29":"code","e7257917":"code","bbe507ef":"code","0bcd508a":"code","432a7724":"code","8a6d3336":"code","1aa2ab4c":"code","adf7bbb2":"code","110be61c":"code","ae343440":"code","1cafb301":"code","4a6aa64d":"code","76ae2a8f":"code","76a4f057":"code","42098705":"code","b81a9599":"code","be757876":"code","2e911d11":"code","75cecd96":"code","80e3487f":"code","f16ad6c0":"code","a4e83671":"code","18d33f2e":"code","e727be7e":"code","d35c1e62":"code","7d637a6e":"code","fba4c46a":"code","b225f254":"code","1e2da06a":"code","52b32b8d":"code","5cf35eb2":"code","f9cb714b":"code","d570691c":"code","1327b291":"code","b50bbd8f":"code","696d59ec":"code","64478f34":"code","6c5d881b":"code","e36236b6":"code","543460bd":"code","0a75ac7d":"code","ce579806":"code","e5c9d4df":"code","a798882d":"code","ee100a6c":"code","78040051":"code","85ce64e2":"code","24d33398":"markdown","67721aa4":"markdown","3628898c":"markdown","52d1fae4":"markdown","c065aec0":"markdown","edbe4be2":"markdown","667f4591":"markdown","7144475f":"markdown","abaf5bbe":"markdown","df24c4a6":"markdown","af47b476":"markdown","27347610":"markdown","1591ab62":"markdown","f91d1e39":"markdown","03b45307":"markdown","8ba3afea":"markdown","76253af1":"markdown","edd28fc4":"markdown","acfe7fef":"markdown","47727337":"markdown","4f548309":"markdown","6501cbff":"markdown","de27eb65":"markdown","b01ed488":"markdown","3fe4c3dc":"markdown","35649686":"markdown","9ad8e96d":"markdown","63fe86ee":"markdown","ac36d490":"markdown","d8bfe608":"markdown","69a94f3e":"markdown","6b8001fd":"markdown","50d62d4b":"markdown","1a82fa04":"markdown","9392367c":"markdown","2a8f3b84":"markdown","39cdb055":"markdown","5b4627cf":"markdown","13695743":"markdown","7076fc5e":"markdown","d127de7e":"markdown","6a938baa":"markdown","9b7ee15c":"markdown","952466c7":"markdown","04223254":"markdown","e9a438e2":"markdown","b4f71fc1":"markdown","d6b38ccc":"markdown","06348c39":"markdown","02c6a33e":"markdown"},"source":{"20016e39":"# importing python packages\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import metrics\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn import svm\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import jaccard_score","261e537f":"# loading primary results\n\ndf = pd.read_csv(\"..\/input\/2016-us-election\/primary_results.csv\")\ndf.head()","b2d4f0b1":"df.info()","36e313d7":"# detecting missing values in each column\n\nmissing_values = df.isnull()\n\nfor column in missing_values.columns.values.tolist():\n    print(column)\n    print(missing_values[column].value_counts())\n    print(\"\")","b754fce7":"# removing 'fips' column \n\ndf = df.drop(columns = ['fips'])\ndf.head()","7d6a06d2":"# searching for duplicated rows\n\nduplicated_rows = df[df.duplicated()]\nduplicated_rows","58464a29":"# creating dataframe for Democrats\n\ndf_dem = df.loc[df['party'] == 'Democrat']\ndf_dem.head()","e7257917":"# relevant candidates\n\ndf_dem = df_dem.loc[df_dem['candidate'].isin(['Hillary Clinton', 'Bernie Sanders'])]","bbe507ef":"# sorting candidates by total votes in \"battleground states\" \n\ndf_dem = df_dem.loc[df_dem['state_abbreviation'].isin(['CO', 'FL', 'IA', 'MI', 'NV', 'NH', 'NC', 'OH', 'PA', 'VA', 'WI'])]\ndf_dem_sorted = df_dem.groupby(by = ['candidate']).sum().sort_values(by = ['votes'], ascending = False)\ndf_dem_sorted.head()","0bcd508a":"# plotting results\n\ndf_dem_sorted.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes (in battleground states)', fontsize = 16)\nplt.xlabel('Votes (million)', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","432a7724":"df_dem_CO = df_dem.loc[df_dem['state_abbreviation'] == 'CO']\ndf_dem_CO = df_dem_CO.groupby(by = ['candidate']).sum()\ndf_dem_CO.head()","8a6d3336":"# plotting results\n\ndf_dem_CO.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes in Colorado', fontsize = 16)\nplt.xlabel('Votes', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","1aa2ab4c":"df_dem_FL = df_dem.loc[df_dem['state_abbreviation'] == 'FL']\ndf_dem_FL = df_dem_FL.groupby(by = ['candidate']).sum()\ndf_dem_FL.head()","adf7bbb2":"# plotting results\n\ndf_dem_FL.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes in Florida', fontsize = 16)\nplt.xlabel('Votes (million)', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","110be61c":"df_dem_IA = df_dem.loc[df_dem['state_abbreviation'] == 'IA']\ndf_dem_IA = df_dem_IA.groupby(by = ['candidate']).sum()\ndf_dem_IA.head()","ae343440":"# plotting results\n\ndf_dem_IA.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes in Iowa', fontsize = 16)\nplt.xlabel('Votes', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","1cafb301":"df_dem_MI = df_dem.loc[df_dem['state_abbreviation'] == 'MI']\ndf_dem_MI = df_dem_MI.groupby(by = ['candidate']).sum()\ndf_dem_MI.head()","4a6aa64d":"# plotting results\n\ndf_dem_MI.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes in Michigan', fontsize = 16)\nplt.xlabel('Votes', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","76ae2a8f":"df_dem_NV = df_dem.loc[df_dem['state_abbreviation'] == 'NV']\ndf_dem_NV = df_dem_NV.groupby(by = ['candidate']).sum()\ndf_dem_NV.head()","76a4f057":"# plotting results\n\ndf_dem_NV.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes in Nevada', fontsize = 16)\nplt.xlabel('Votes', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","42098705":"df_dem_NH = df_dem.loc[df_dem['state_abbreviation'] == 'NH']\ndf_dem_NH = df_dem_NH.groupby(by = ['candidate']).sum()\ndf_dem_NH.head()","b81a9599":"# plotting results\n\ndf_dem_NH.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes in New Hampshire', fontsize = 16)\nplt.xlabel('Votes', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","be757876":"df_dem_NC = df_dem.loc[df_dem['state_abbreviation'] == 'NC']\ndf_dem_NC = df_dem_NC.groupby(by = ['candidate']).sum()\ndf_dem_NC.head()","2e911d11":"# plotting results\n\ndf_dem_NC.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes in North Carolina', fontsize = 16)\nplt.xlabel('Votes', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","75cecd96":"df_dem_OH = df_dem.loc[df_dem['state_abbreviation'] == 'OH']\ndf_dem_OH = df_dem_OH.groupby(by = ['candidate']).sum()\ndf_dem_OH.head()","80e3487f":"# plotting results\n\ndf_dem_OH.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes in Ohio', fontsize = 16)\nplt.xlabel('Votes', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","f16ad6c0":"df_dem_PA = df_dem.loc[df_dem['state_abbreviation'] == 'PA']\ndf_dem_PA = df_dem_PA.groupby(by = ['candidate']).sum()\ndf_dem_PA.head()","a4e83671":"# plotting results\n\ndf_dem_PA.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes in Pennsylvania', fontsize = 16)\nplt.xlabel('Votes', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","18d33f2e":"df_dem_VA = df_dem.loc[df_dem['state_abbreviation'] == 'VA']\ndf_dem_VA = df_dem_VA.groupby(by = ['candidate']).sum()\ndf_dem_VA.head()","e727be7e":"# plotting results\n\ndf_dem_VA.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes in Virginia', fontsize = 16)\nplt.xlabel('Votes', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","d35c1e62":"df_dem_WI = df_dem.loc[df_dem['state_abbreviation'] == 'WI']\ndf_dem_WI = df_dem_WI.groupby(by = ['candidate']).sum()\ndf_dem_WI.head()","7d637a6e":"# plotting results\n\ndf_dem_WI.plot(kind = 'barh', figsize = (12, 8))\n\nplt.xticks(fontsize = 12)\nplt.yticks(fontsize = 12)\nplt.title('2016 Democratic Party Primaries Votes in Wisconsin', fontsize = 16)\nplt.xlabel('Votes', fontsize = 14)\nplt.ylabel('Candidates', fontsize = 14)\n\nplt.show()","fba4c46a":"# getting statistical summary of numeric-typed columns\n\ndf_dem.describe()","b225f254":"# checking correlations\n\ndf_dem.corr()","1e2da06a":"df_dem['state'] = pd.get_dummies(df_dem['state'])\ndf_dem['county'] = pd.get_dummies(df_dem['county'])","52b32b8d":"X = df_dem[['state', 'county', 'votes']].values\nX[0:5]","5cf35eb2":"y = df_dem['candidate'].values\ny[0:5]","f9cb714b":"X = preprocessing.StandardScaler().fit(X).transform(X.astype(float))\nX[0:5]","d570691c":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3)","1327b291":"# fitting and predicting(k = 13)\n\nknn = KNeighborsClassifier(n_neighbors = 13).fit(X_train, y_train)\n\nyhat_knn = knn.predict(X_test)\nyhat_knn[0:5]","b50bbd8f":"#fitting and predicting\n\ntree = DecisionTreeClassifier(criterion = 'entropy', max_depth = 6).fit(X_train, y_train)\n\nyhat_tree = tree.predict(X_test)\nyhat_tree[0:5]","696d59ec":"# fitting and predicting\n\nlr = LogisticRegression(C = 0.01, solver = 'liblinear').fit(X_train, y_train)\n\nyhat_lr = lr.predict(X_test)\nyhat_lr[0:5]","64478f34":"# fitting and predicting\n\nsvm_lin = svm.SVC(kernel = 'linear').fit(X_train, y_train)\n\nyhat_svm_lin = svm_lin.predict(X_test)\nyhat_svm_lin[0:5]","6c5d881b":"# fitting and predicting\n\nsvm_poly = svm.SVC(kernel = 'poly').fit(X_train, y_train)\n\nyhat_svm_poly = svm_poly.predict(X_test)\nyhat_svm_poly[0:5]","e36236b6":"# fitting and predicting\n\nsvm_rbf = svm.SVC(kernel = 'rbf').fit(X_train, y_train)\n\nyhat_svm_rbf = svm_rbf.predict(X_test)\nyhat_svm_rbf[0:5]","543460bd":"# fitting and predicting\n\nsvm_sig = svm.SVC(kernel = 'sigmoid').fit(X_train, y_train)\n\nyhat_svm_sig = svm_sig.predict(X_test)\nyhat_svm_sig[0:5]","0a75ac7d":"print(\"KNN evaluation\\n\")\nprint(\"F1 score: \", f1_score(y_test, yhat_knn, average = 'weighted'))\nprint(\"Jaccard index: \", jaccard_score(y_test, yhat_knn, average = 'weighted'))","ce579806":"print(\"Decision Tree evaluation\\n\")\nprint(\"F1 score: \", f1_score(y_test, yhat_tree, average = 'weighted'))\nprint(\"Jaccard index: \", jaccard_score(y_test, yhat_tree, average = 'weighted'))","e5c9d4df":"print(\"Logistic Regression evaluation\\n\")\nprint(\"F1 score: \", f1_score(y_test, yhat_lr, average = 'weighted'))\nprint(\"Jaccard index: \", jaccard_score(y_test, yhat_lr, average = 'weighted'))","a798882d":"print(\"SVM evaluation using linear kernel\\n\")\nprint(\"F1 score: \", f1_score(y_test, yhat_svm_lin, average = 'weighted'))\nprint(\"Jaccard index: \", jaccard_score(y_test, yhat_svm_lin, average = 'weighted'))","ee100a6c":"print(\"SVM evaluation using polynomial kernel\\n\")\nprint(\"F1 score: \", f1_score(y_test, yhat_svm_poly, average = 'weighted'))\nprint(\"Jaccard index: \", jaccard_score(y_test, yhat_svm_poly, average = 'weighted'))","78040051":"print(\"SVM evaluation using RBF kernel\\n\")\nprint(\"F1 score: \", f1_score(y_test, yhat_svm_rbf, average = 'weighted'))\nprint(\"Jaccard index: \", jaccard_score(y_test, yhat_svm_rbf, average = 'weighted'))","85ce64e2":"print(\"SVM evaluation using sigmoid kernel\\n\")\nprint(\"F1 score: \", f1_score(y_test, yhat_svm_sig, average = 'weighted'))\nprint(\"Jaccard index: \", jaccard_score(y_test, yhat_svm_sig, average = 'weighted'))","24d33398":"## 4. Support Vector Machine (SVM)","67721aa4":"## 1. KNN","3628898c":"* sigmoid kernel","52d1fae4":"* linear kernel","c065aec0":"# Acknowledgement","edbe4be2":"# Exploratory Data Analysis","667f4591":"## 3. Logistic Regression","7144475f":"### Nevada","abaf5bbe":"# References\n* 2016 Democratic Party presidential primaries. Wikipedia.\nhttps:\/\/en.wikipedia.org\/wiki\/2016_Democratic_Party_presidential_primaries\n\n* Mahtesian, Charlie (2016). What are the swing states in 2016? Politico.\nhttps:\/\/www.politico.com\/blogs\/swing-states-2016-election\/2016\/06\/what-are-the-swing-states-in-2016-list-224327","df24c4a6":"## Overall results in battleground states","af47b476":"## 1. K-Nearest Neighbor (KNN)","27347610":"## Normalization","1591ab62":"## Results state by state","f91d1e39":"### North Carolina","03b45307":"# Introduction","8ba3afea":"# Normalizing data for classification","76253af1":"## Train Test Split","edd28fc4":"### Pennsylvania","acfe7fef":"* radial basis function (RBF) kernel","47727337":"* polynomial kernel","4f548309":"# 2016 Democratic Party presidential primaries - Classification","6501cbff":"# Evaluation - F1 scores & Jaccard indices","de27eb65":"K-Nearest Neighbors algorithm (when k = 13) delivered us the best F1 score and Jaccard index.","b01ed488":"Thanks to Ben Hamner. I use a subset of his U.S. Election dataset.","3fe4c3dc":"### Colorado","35649686":"* radial basis function (RBF) kernel","9ad8e96d":"Altough we have found 100 missing values, we don't need 'fips' column in our analysis therefore it will be dropped.","63fe86ee":"## 3. Logistic Regression","ac36d490":"# Contents","d8bfe608":"## 2. Decision Tree","69a94f3e":"## 2. Decision Tree","6b8001fd":"### New Hampshire","50d62d4b":"# Data cleaning","1a82fa04":"* polynomial kernel","9392367c":"## 4. Support Vector Machine (SVM)","2a8f3b84":"# Conclusion","39cdb055":"### Florida","5b4627cf":"### Wisconsin","13695743":"# Model development - classification","7076fc5e":"### Ohio","d127de7e":"The main goal of this notebook is to practice classification methods through an interesting topic. Swing states or battleground states are the keys to winning the U.S. presidential election, therefore I think it would be cool to check the results of 2016 Democratic Party primaries, and build classification models.\n\n2016 swing states are the following based on Politico:\n* Colorado\n* Florida\n* Iowa\n* Michigan \n* Nevada\n* New Hampshire \n* North Carolina\n* Ohio\n* Pennsylvania\n* Virginia\n* Wisconsin","6a938baa":"# Importing packages, loading dataset","9b7ee15c":"* Introduction\n* Acknowledgement\n* Importing packages, loading dataset\n* Data cleaning\n* Exploratory data analysis\n* Normalizing data\n* Model development - classification\n* Evaluation - F1 scores & Jaccard indices\n* Conclusion\n* References","952466c7":"* sigmoid kernel","04223254":"### Michigan","e9a438e2":"![DemocraticLogo.svg](attachment:DemocraticLogo.svg)","b4f71fc1":"## Turning state and county values into quantitative variables - One-Hot Encoding","d6b38ccc":"* linear kernel","06348c39":"### Virginia","02c6a33e":"### Iowa"}}