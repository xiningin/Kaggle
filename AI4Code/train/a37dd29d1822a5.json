{"cell_type":{"5957b146":"code","1e173024":"code","25483974":"code","196cd47d":"code","6b6d3368":"code","a010cba7":"code","9a5c581e":"code","db289023":"code","61398a2d":"code","1bfdbb86":"code","efc9fdf8":"code","261ec123":"code","04981c9b":"code","be39e106":"code","6b92f00a":"code","8dbde024":"code","1737497f":"code","7d263df9":"code","9548b1c9":"code","fa36c64f":"code","d9b644e8":"code","974f6a0e":"code","ad3729bf":"code","3519407e":"code","8524a629":"code","15aae7a4":"code","1af5b459":"code","72e87e56":"code","d9e5610c":"code","7bc317a5":"code","8b17ee33":"code","ce761a8c":"code","c101c362":"code","58ad539f":"code","fd1fa002":"code","50314f50":"code","86a95b91":"code","82a0b3e8":"code","1589dba5":"code","25d14e01":"code","bd35ee2a":"code","3c552450":"code","35905ecf":"code","53d55368":"code","06479795":"code","30cd4080":"code","ec78d8e7":"code","2e8ae4ce":"code","b65c508f":"code","856ffbbd":"markdown","994610db":"markdown","3714fdfa":"markdown","81db8faf":"markdown","b8ead485":"markdown","6e35dde1":"markdown","d572c79f":"markdown","d042939f":"markdown","19a2bdeb":"markdown","791b4844":"markdown","23d1da5c":"markdown","47588f42":"markdown","d8156bc4":"markdown","ea855965":"markdown","cf29844f":"markdown","6016a516":"markdown","0ae0c9b9":"markdown","cb77cd0d":"markdown","a1a447d9":"markdown","1fdcd9da":"markdown","58ea27f1":"markdown","ddda4f0c":"markdown","97a55c83":"markdown","976181d5":"markdown"},"source":{"5957b146":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1e173024":"#Importing the libraries\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport plotly.express as px\nfrom pandas import set_option\nplt.style.use('ggplot') # nice plots","25483974":"df = pd.read_csv('\/kaggle\/input\/default-of-credit-card-clients-dataset\/UCI_Credit_Card.csv')","196cd47d":"df.describe()","6b6d3368":"df.info()","a010cba7":"df.rename(columns = {'PAY_0':'PAY_1', 'default.payment.next.month':'def_pay'}, inplace = True)\ndf","9a5c581e":"# Dealing with catagorical variable \ndf['EDUCATION'].value_counts()","db289023":"# Unknown Varable \ndf.loc[:,'EDUCATION'] = df.loc[:,'EDUCATION'].replace(0,5)\n\ndf.loc[:,'EDUCATION'] = df.loc[:,'EDUCATION'].replace(6,5)","61398a2d":"df.loc[:,'MARRIAGE'] = df.loc[:,'MARRIAGE'].replace(0,3)","1bfdbb86":"df['SEX'].value_counts()","efc9fdf8":"\"\"\"\nOutstading Amount\nCard issuers assign specific credit limits (spending limits) on your cards.\nYour outstanding balance helps determine how much credit (money left to spend) you have available. \nTo find out how much you have left, simply subtract your outstanding balance from your credit limit.\nIn simple words Money utilised \n\"\"\" \n\"\"\"\nOutstanding Amount for Bank will be Sum of limit Balance \n\"\"\"\ndf['bill_total'] =df['BILL_AMT1']+df['BILL_AMT2']+df['BILL_AMT3']+df['BILL_AMT4']+df['BILL_AMT5']+df['BILL_AMT6']\ndf['pay_amt_total'] =df['PAY_AMT1']+df['PAY_AMT2']+df['PAY_AMT3']+df['PAY_AMT4']+df['PAY_AMT5']+df['PAY_AMT6']\ndf['remaining_pay_balance'] =df['bill_total']-df['pay_amt_total']","261ec123":"f,ax=plt.subplots(1,2,figsize=(18,8))\ndf['def_pay'].value_counts().plot.pie(explode=[0,0.1],autopct='%1.1f%%',ax=ax[0],shadow=True)\nax[1].set_title('COUNT OF CREDIT CARDS')\nax[0].set_title('COUNT OF CREDIT CARDS')\nax[0].set_ylabel('')\nsns.countplot('def_pay',data=df,ax=ax[1])\nplt.annotate('Non-default: {}'.format(0), xy=(-0.3, 15000), xytext=(-0.3, 3000), size=12)\nplt.annotate('Default: {}'.format(1), xy=(0.7, 15000), xytext=(0.7, 3000), size=12)\nax[1].set_title('COUNT OF CREDIT CARDS')\nplt.show()\n","04981c9b":"set_option('display.width', 100)\nset_option('precision', 2)\n\nprint(\"SUMMARY STATISTICS OF NUMERIC COLUMNS\")\nprint()\nprint(df.describe().T)\ndf.describe().T.plot()","be39e106":"plt.figure(figsize=(12,4))\n\nsns.distplot(df['LIMIT_BAL'])\nplt.ticklabel_format(style='plain', axis='x') #repressing scientific notation on x\nplt.ylabel('')\nplt.show()","6b92f00a":" plt.figure(figsize=(12,4))\n\nsns.distplot(df['bill_total'])\nplt.ticklabel_format(style='plain', axis='x') #repressing scientific notation on x\nplt.ylabel('')\nplt.show()","8dbde024":"x1 = list(df[df['def_pay'] == 1]['LIMIT_BAL'])\nx2 = list(df[df['def_pay'] == 0]['LIMIT_BAL'])\n\nplt.figure(figsize=(12,4))\nsns.set_context('notebook', font_scale=1.2)\n\nplt.hist([x1, x2], bins = 40)\nplt.xlim([0,600000])\nplt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')\nplt.xlabel('Limit Balance (NT dollar)')\nplt.ylabel('Frequency')\nplt.title('LIMIT BALANCE HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)\nplt.box(False)","1737497f":"x1 = list(df[df['def_pay'] == 1]['bill_total'])\nx2 = list(df[df['def_pay'] == 0]['bill_total'])\n\nplt.figure(figsize=(12,4))\nsns.set_context('notebook', font_scale=1.2)\n#sns.set_color_codes(\"pastel\")\nplt.hist([x1, x2], bins = 40)\nplt.xlim([-10000,600000])\nplt.legend(['Yes', 'No'], title = 'Default', loc='upper right', facecolor='white')\nplt.xlabel('Limit Balance (NT dollar)')\nplt.ylabel('Frequency')\nplt.title('BIll Amount HISTOGRAM BY TYPE OF CREDIT CARD', SIZE=15)\nplt.box(False)","7d263df9":"df['LimitBin'] = pd.cut(df['LIMIT_BAL'],[5000, 50000, 100000, 150000, 200000, 300000, 400000, 500000, 1100000])\nprint(df['LimitBin'].value_counts())","9548b1c9":"df['def_pay'].groupby(df['LimitBin']).value_counts(normalize = True)","fa36c64f":"plt.figure(figsize=(14,4))\n\ndf['LimitBin'] = df['LimitBin'].astype('str')\nLimitBin_order = ['(5000, 50000]', '(50000, 100000]', '(100000, 150000]', '(150000, 200000]',\n                '(200000, 300000]', '(300000, 400000]', '(400000, 500000]', '(500000, 1100000]']\n\nax = sns.countplot(data = df, x = 'LimitBin', hue=\"def_pay\", order = LimitBin_order)\n\nplt.xlabel(\"Amount of Given Credit\", fontsize= 12)\nplt.ylabel(\"Number of customers\", fontsize= 12)\nplt.ylim(0,8000)\nax.tick_params(axis=\"x\", labelsize= 10)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.075, p.get_height()+300))\n\nplt.show()","d9b644e8":"plt.figure(figsize=(20,4))\n\nax = sns.barplot(x = \"LimitBin\", y = \"def_pay\", data = df, palette = 'flare', ci = None, order = LimitBin_order)\n\nplt.xlabel(\"Amount of Given Credit\", fontsize= 12)\nplt.ylabel(\"% of Default\", fontsize= 12)\nplt.ylim(0,0.5)\n\nfor p in ax.patches:\n    ax.annotate(\"%.2f\" %(p.get_height()), (p.get_x()+0.25, p.get_height()+0.03),fontsize=13)\n\nplt.show()","974f6a0e":"df['LimitBin_A'] = pd.cut(df['bill_total'],[-336000,-150000,-10000, -5000,0,5000, 50000, 100000, 150000, 200000, 300000, 400000, 500000, 1100000])\nprint(df['LimitBin_A'].value_counts())","ad3729bf":"df['def_pay'].groupby(df['LimitBin_A']).value_counts(normalize = True)","3519407e":"plt.figure(figsize=(25,4))\n\ndf['LimitBin_A'] = df['LimitBin_A'].astype('str')\nLimitBin_order = ['(-336000, -150000]','(-10000, -5000]','(-5000, 0]','(0, 5000]','(5000, 50000]', '(50000, 100000]', '(100000, 150000]', '(150000, 200000]',\n                '(200000, 300000]', '(300000, 400000]', '(400000, 500000]', '(500000, 1100000]']\n\nax = sns.countplot(data = df, x = 'LimitBin_A', hue=\"def_pay\",palette = 'rocket', order = LimitBin_order)\n\nplt.xlabel(\"Amount of Given Credit\", fontsize= 12)\nplt.ylabel(\"Number of customers\", fontsize= 12)\nplt.ylim(0,6000)\nax.tick_params(axis=\"x\", labelsize= 10)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.05, p.get_height()+200))\n\nplt.show()\n","8524a629":"\"\"\"\nWe can see that that \n(-336000, -150000]\n(-150000, -10000] are the outliers for the Total bill Amount \n\"\"\" ","15aae7a4":"LimitBin_order = ['(-10000, -5000]','(-5000, 0]','(0, 5000]','(5000, 50000]', '(50000, 100000]', '(100000, 150000]', '(150000, 200000]',\n                '(200000, 300000]', '(300000, 400000]', '(400000, 500000]', '(500000, 1100000]']\n\nplt.figure(figsize=(30,10))\n\nax = sns.barplot(x = \"LimitBin_A\", y = \"def_pay\", data = df,palette = 'rocket',  ci = None, order = LimitBin_order)\n\nplt.xlabel(\"Amount of Total Bill\", fontsize= 12)\nplt.ylabel(\"% of Default\", fontsize= 12)\nplt.ylim(0,0.5)\n\nfor p in ax.patches:\n    ax.annotate(\"%.2f\" %(p.get_height()), (p.get_x()+0.25, p.get_height()+0.03),fontsize=13)\n\nplt.show()","1af5b459":"# Distribution of age and remaining bill\nplt.subplots(figsize=(20,5))\n\nplt.subplot(221)\nsns.distplot(df.AGE)\n\n\nplt.subplot(222)\nsns.distplot(df.remaining_pay_balance)\n\n\n\nplt.show()","72e87e56":"# To deep Dive into age analysis analysis for the bill amount and Limit amount \ndf['AgeBin'] = pd.cut(df['AGE'],[20, 25, 30, 35, 40, 50, 60, 80])\nprint(df['AgeBin'].value_counts())","d9e5610c":"df['def_pay'].groupby(df['AgeBin']).value_counts(normalize = True)","7bc317a5":"plt.figure(figsize=(12,4))\n\ndf['AgeBin'] = df['AgeBin'].astype('str')\nAgeBin_order = ['(20, 25]', '(25, 30]', '(30, 35]', '(35, 40]', '(40, 50]', '(50, 60]', '(60, 80]']\n\nax = sns.countplot(data = df, x = 'AgeBin', hue=\"def_pay\", palette = 'rocket', order = AgeBin_order)\n\nplt.xlabel(\"Age Group\", fontsize= 12)\nplt.ylabel(\"# of Clients\", fontsize= 12)\nplt.ylim(0,8000)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.07, p.get_height()+200))\n\nplt.show()","8b17ee33":"plt.figure(figsize=(14,6))\n\nsns.boxplot(x = \"AgeBin\", y = \"LIMIT_BAL\",hue= 'def_pay', data = df, order = AgeBin_order, showmeans=True, \n            meanprops={\"markerfacecolor\":\"red\",  \"markeredgecolor\":\"black\", \"markersize\":\"10\"})\n\nplt.ticklabel_format(style='plain', axis='y')     \nplt.xlabel(\"Age Group\", fontsize= 12)\n\nplt.show()","ce761a8c":"plt.figure(figsize=(14,6))\n\nsns.boxplot(x = \"AgeBin\", y = 'bill_total', hue= 'def_pay',data = df, order = AgeBin_order, showmeans=True, \n            meanprops={\"markerfacecolor\":\"red\",  \"markeredgecolor\":\"black\", \"markersize\":\"10\"})\n\nplt.ticklabel_format(style='plain', axis='y')     \nplt.xlabel(\"Age Group\", fontsize= 12)\n\nplt.show()","c101c362":"# Defaulter with respect to the Education\n\nplt.subplots(figsize=(10,5))\n\nax = sns.countplot(data = df, x = 'EDUCATION', hue=\"def_pay\")\n\nplt.xlabel(\"Education\", fontsize= 12)\nplt.ylabel(\"Numbers of Clients\", fontsize= 12)\nplt.ylim(0,12000)\nplt.xticks([0,1,2,3,4],['Grad School','University','High School','Others','Unknown'], fontsize = 11)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.11, p.get_height()+500))\n\n\nplt.show()","58ad539f":"plt.subplots(figsize=(20,10))\nplt.subplot(211)\n\nsns.boxenplot(x = 'EDUCATION',y = 'bill_total',hue = 'MARRIAGE',data = df)\n\nplt.subplots(figsize=(20,10))\nplt.subplot(211)\nsns.boxenplot(x = 'EDUCATION',y = 'LIMIT_BAL',hue = 'MARRIAGE',data = df)\n","fd1fa002":"plt.figure(figsize=(12,4))\n\nax = sns.countplot(data = df, x = 'MARRIAGE', hue=\"def_pay\", palette = 'rocket')\n\nplt.xlabel(\"Marital Status\", fontsize= 12)\nplt.ylabel(\"# of Clients\", fontsize= 12)\nplt.ylim(0,15000)\nplt.xticks([0,1,2],['Married', 'Single', 'Other'], fontsize = 11)\n\nfor p in ax.patches:\n    ax.annotate((p.get_height()), (p.get_x()+0.12, p.get_height()+500))\n\nplt.show()","50314f50":"plt.figure(figsize=(12,4))\n\nax = sns.barplot(x = \"MARRIAGE\", y = \"def_pay\", data = df, palette = 'rocket', ci = None)\n\nplt.ylabel(\"% of Default\", fontsize= 12)\nplt.ylim(0,0.5)\nplt.xticks([0,1,2],['Married', 'Single', 'Other'],fontsize = 11)\n\nfor p in ax.patches:\n    ax.annotate(\"%.2f\" %(p.get_height()), (p.get_x()+0.30, p.get_height()+0.03),fontsize=13)\n\nplt.show()","86a95b91":"plt.subplots(figsize=(20,10))\nplt.subplot(211)\n\nax = sns.barplot(x = \"EDUCATION\", y = \"LIMIT_BAL\", hue = \"SEX\", data = df, ci = None)\n\nplt.ylabel(\"Limit balance \", fontsize= 12)\nplt.xticks([0,1,2,3,4],['Grad School','University','High School','Others','Unknown'], fontsize = 11)\n\n\nfor p in ax.patches:\n    ax.annotate(\"%.2f\" %(p.get_height()), (p.get_x()+0.06, p.get_height()+0.03),fontsize=10)\n\nplt.show()\nplt.subplots(figsize=(20,10))\nplt.subplot(211)\n\nax = sns.barplot(x = \"EDUCATION\", y = \"bill_total\", hue = \"SEX\", data = df, ci = None)\n\nplt.ylabel(\"Bill Amount \", fontsize= 12)\nplt.xticks([0,1,2,3,4],['Grad School','University','High School','Others','Unknown'], fontsize = 11)\n\n\nfor p in ax.patches:\n    ax.annotate(\"%.2f\" %(p.get_height()), (p.get_x()+0.06, p.get_height()+0.03),fontsize=10)\n\nplt.show()","82a0b3e8":"plt.subplots(figsize=(20,10))\n\nind = sorted(df.PAY_1.unique())\npay_0 = (df.PAY_1[df['def_pay'] == 0].value_counts(normalize=True))\npay_1 = (df.PAY_1[df['def_pay'] == 1].value_counts(normalize=True))\ntotal = pay_0.values+pay_1.values\npay_0_prop = np.true_divide(pay_0, total)*100\npay_1_prop = np.true_divide(pay_1, total)*100\nplt.subplot(231)\nplt.bar(ind, pay_1_prop, bottom=pay_0_prop, label='1')\nplt.bar(ind, pay_0_prop, label='0')\nplt.title(\"Repayment Status M-0- Coresponding to September\", fontsize=15)\n\nind = sorted(df.PAY_2.unique())\npay_0 = (df.PAY_2[df['def_pay'] == 0].value_counts(normalize=True))\npay_1 = (df.PAY_2[df['def_pay'] == 1].value_counts(normalize=True))\nfor i in pay_0.index:\n    if i not in pay_1.index:\n        pay_1[i]=0\ntotal = pay_0.values+pay_1.values\npay_0_prop = np.true_divide(pay_0, total)*100\npay_1_prop = np.true_divide(pay_1, total)*100\nplt.subplot(232)\nplt.bar(ind, pay_1_prop, bottom=pay_0_prop, label='1')\nplt.bar(ind, pay_0_prop, label='0')\nplt.title(\"Repayment Status M-1 Coresponding to Augest\", fontsize=15)\n\nind = sorted(df.PAY_3.unique())\npay_0 = (df.PAY_3[df['def_pay'] == 0].value_counts(normalize=True))\npay_1 = (df.PAY_3[df['def_pay'] == 1].value_counts(normalize=True))\nfor i in pay_0.index:\n    if i not in pay_1.index:\n        pay_1[i]=0\ntotal = pay_0.values+pay_1.values\npay_0_prop = np.true_divide(pay_0, total)*100\npay_1_prop = np.true_divide(pay_1, total)*100\nplt.subplot(233)\nplt.bar(ind, pay_1_prop, bottom=pay_0_prop, label='1')\nplt.bar(ind, pay_0_prop, label='0')\nplt.title(\"Repayment Status M-2 Coresponding to July\", fontsize=15)\n\nind = sorted(df.PAY_4.unique())\npay_0 = (df.PAY_4[df['def_pay'] == 0].value_counts(normalize=True))\npay_1 = (df.PAY_4[df['def_pay'] == 1].value_counts(normalize=True))\nfor i in pay_0.index:\n    if i not in pay_1.index:\n        pay_1[i]=0\ntotal = pay_0.values+pay_1.values\npay_0_prop = np.true_divide(pay_0, total)*100\npay_1_prop = np.true_divide(pay_1, total)*100\nplt.subplot(234)\nplt.bar(ind, pay_1_prop, bottom=pay_0_prop, label='1')\nplt.bar(ind, pay_0_prop, label='0')\nplt.title(\"Repayment Status M-3 Coresponding to June\", fontsize=15)\n\n\n\n\nind = sorted(df.PAY_5.unique())\npay_0 = (df.PAY_5[df['def_pay'] == 0].value_counts(normalize=True))\npay_1 = (df.PAY_5[df['def_pay'] == 1].value_counts(normalize=True))\nfor i in pay_0.index:\n    if i not in pay_1.index:\n        pay_1[i]=0\nfor i in pay_1.index:\n    if i not in pay_0.index:\n        pay_0[i]=0\ntotal = pay_0.values+pay_1.values\npay_0_prop = np.true_divide(pay_0, total)*100\npay_1_prop = np.true_divide(pay_1, total)*100\nplt.subplot(235)\nplt.bar(ind, pay_1_prop, bottom=pay_0_prop, label='1')\nplt.bar(ind, pay_0_prop, label='0')\nplt.title(\"Repayment Status M-5 Coresponding to May\", fontsize=15)\n\n\n\n\nind = sorted(df.PAY_6.unique())\npay_0 = (df.PAY_6[df['def_pay'] == 0].value_counts(normalize=True))\npay_1 = (df.PAY_6[df['def_pay'] == 1].value_counts(normalize=True))\nfor i in pay_0.index:\n    if i not in pay_1.index:\n        pay_1[i]=0\nfor i in pay_1.index:\n    if i not in pay_0.index:\n        pay_0[i]=0\ntotal = pay_0.values+pay_1.values\npay_0_prop = np.true_divide(pay_0, total)*100\npay_1_prop = np.true_divide(pay_1, total)*100\nplt.subplot(236)\nplt.bar(ind, pay_1_prop, bottom=pay_0_prop, label='1')\nplt.bar(ind, pay_0_prop, label='0')\nplt.title(\"Repayment Status M-6 Coresponding to April\", fontsize=15)\n\n\nplt.xticks(ind, fontsize=12)\nplt.yticks(fontsize=12)\nplt.legend(loc=\"upper right\", fontsize=15)\nplt.suptitle(\"Repayment Status for last 6 months with proportion of defaulting payment next month\", fontsize=20)\n\nplt.show()\n","1589dba5":"pay_amtx_fts = ['PAY_AMT1', 'PAY_AMT2', 'PAY_AMT3', 'PAY_AMT4', 'PAY_AMT5', 'PAY_AMT6']","25d14e01":"df['PAY_AMT1_bin'] = df['PAY_AMT1'].copy()\ndf['PAY_AMT2_bin'] = df['PAY_AMT2'].copy()\ndf['PAY_AMT3_bin'] = df['PAY_AMT3'].copy()\ndf['PAY_AMT4_bin'] = df['PAY_AMT4'].copy()\ndf['PAY_AMT5_bin'] = df['PAY_AMT5'].copy()\ndf['PAY_AMT6_bin'] = df['PAY_AMT6'].copy()","bd35ee2a":"pay_amtx_bins = ['PAY_AMT1_bin', 'PAY_AMT2_bin', 'PAY_AMT3_bin', 'PAY_AMT4_bin', 'PAY_AMT5_bin', 'PAY_AMT6_bin']\n\nfor i, col in enumerate (pay_amtx_bins):\n    df[col] = pd.cut(df[pay_amtx_fts[i]],[-1, 0, 25000, 50000, 100000, 2000000])\n    print(df[col].value_counts())","3c552450":"for col in pay_amtx_bins:\n    print(df['def_pay'].groupby(df[col]).value_counts(normalize = True))\n    ","35905ecf":"plt.figure(figsize=(20,15))\n\nfor i,col in enumerate(pay_amtx_bins):    \n    plt.subplot(3,2,i + 1)\n    ax = sns.countplot(data = df, x = col, hue=\"def_pay\")\n    plt.xticks( rotation='45')\n    plt.ylim(0,23000)\n    plt.ylabel('')\n    plt.tight_layout()\n    \n    for p in ax.patches:\n        ax.annotate((p.get_height()), (p.get_x()+0.05, p.get_height()+800), fontsize=10)    \n\nplt.show()","53d55368":"plt.figure(figsize=(15,12))\n\nfor i,col in enumerate(pay_amtx_bins):    \n    plt.subplot(3,2,i + 1)\n    ax = sns.barplot(x = col, y = \"def_pay\", data = df, palette = 'rocket', ci = None)\n    plt.ylabel(\"% of Default\", fontsize= 12)\n    plt.xticks( rotation='45')\n    plt.ylim(0,0.5)\n    plt.tight_layout()\n    \n    for p in ax.patches:\n        ax.annotate(\"%.2f\" %(p.get_height()), (p.get_x()+0.25, p.get_height()+0.03),fontsize=13)\n\nplt.show()","06479795":"sns.jointplot(x='LIMIT_BAL', y ='bill_total', data = df, hue = 'def_pay', kind = 'scatter')","30cd4080":"## general trends in Bill Amount (Outstanding Amount ) And Max_outstanding amout(Limit Credit)","ec78d8e7":"fig = px.box(df, x='LIMIT_BAL', notched= True, points= 'all')\nfig.show()\nfig = px.box(df, x='bill_total', notched= True, points= 'all')\nfig.show()","2e8ae4ce":"## data are distributed in a wide range (below), need to be normalizded.\nplt.figure(figsize=(15,3))\nax= df.drop('def_pay', axis=1).boxplot(df.columns.name, rot=90)\noutliers = dict(markerfacecolor='b', marker='p')\n#ax= features.boxplot(features.columns.name, rot=90, flierprops=outliers)\nplt.xticks(size=12)\nax.set_ylim([-5000,100000])\nplt.box(False);","b65c508f":"#  looking at correlations matrix, defined via Pearson function  \ncorr = df.corr() # .corr is used to find corelation\n\n\nplt.figure(figsize = (20,9))\nsns.heatmap(corr,vmax=1, annot=True, annot_kws={\"size\":7})\n","856ffbbd":"### Exploratory Data Analysis (EDA)\n\nMapping the target: categorizing\nFrom this sample of 30,000 credit card holders, there were 6,636 default credit cards; that is, the proportion of default in the data is 22,1%","994610db":"#### Hence they need to standerdized \nThe boxplot below reveals that features are in different scales and units.","3714fdfa":"###  Eduacational Analysis ","81db8faf":"As expected, those who have a negative bill statement have a lower chance of default than the rest. What stands out is that there is a little higher chance of default for those who didn't have a bill in the previous months.","b8ead485":"Changing \u2018PAY_0 to PAY_1\u2019 to keep in the same pattern as the other \u2018September\u2019 features . Changing Default's name to make it shorter.","6e35dde1":"The average value for the amount of credit card limit is 167,484 NT dollars. The standard deviation is 129,747 NT dollars, ranging from 10,000 to 1M NT dollars.\nEducation level is mostly graduate school (1) and university (2). Most of the clients are either marrined or single (less frequent the other status). Average age is 35.5 years, with a standard deviation of 9.2 years.","d572c79f":"### Amount of Given Credit (LIMIT_BAL)\n### The trend on outstanding amount for the bank ","d042939f":"Outstanding Amount for Bank will be Sum of limit Balance\nThe trend on the outstanding amount for the bank  ","19a2bdeb":"The analysis shows a a significant rate of default (over 30%) from customers with 50k or less of credit limit. We also can see that the higher the limit, the lower is the chance of defaulting.\n","791b4844":"#### It seems that the higher is the education, the lower is the probability of defaulting the next month. Only exception is for the category labeled \"Other\" that, if we stick to the documentation, would be lower than high school. However, numerically they will not have much weight in the final result.\n\nWe saw earlier that the average given credit for women was slightly higher than for men. That still holds up for several combinations of categories, except among customers that:\n\nHave a grad school diploma;\nAre married;\nAre 50+ years old.","23d1da5c":"Outliers are there which need to be removed as they will be affecting our analysis negatively","47588f42":"#### Summary\n1. Overall, the offered credit limit seems to match the ability to pay in time within each category.\n2. The age group of 60+, which, despite having one of the highest chances of default, receives, on average, the highest credit value. by age group. (Risky Group)\n3. The analysis shows that there is a higher default rate among those who paid nothing in previous months and lower rates among those who paid over 25k of NT dollars. \n4. Higher the Limit Amount lesser are the chances of being a Defaulter And same goes with Our Total bill amount. (Keeping outliers in mind)\n#### Analyzing the trends with age, education, marriage, credit limit\n1. The credit limit is the most important factor followed by the age\n2. The order of importance of other features is as followed  Education, Sex, Marriage. \n3. With Bivariate analysis and Correlation also we can say that the History of past payment(PAY_N) Out of which also September plays a major role in our analysis as it gives a clear picture of Delay in the months for payment. \n","d8156bc4":"As expected, the lowest chances of default are registered around 30-35 years old, while the highest occur at the extremes (20-25 and 60+).","ea855965":"Here it seems that married people are most likely to default as well as the  \"Other\" ( which is again numerically less relevant than the others)","cf29844f":"The analysis shows that  There is a higher default rate among those who paid nothing in previous months and lower rates among those paid over 25k of NT dollars.","6016a516":"### Till Now we have done with Univarient and bivarient analysis Now looking at the corelation will give us a faire say On Features","0ae0c9b9":"#### Above plot shows us the proportion of clients that will default payment next month based on repayment history.\n#### For Current month status, the earlier the payment is made lesser are the chances of those clients defaulting the payment.\n\n### General Trend stats that As people ask for more months they are more likely to not be a defaulter after observing the 6 plots \n\nMost customers are duly paying their credit card bills. And it's pretty clear that their likelihood of default are much lower than the rest.\n\nSince there are only a few customers with 4+ months of delay in all PAY_X features, we could make a new analysis with them all together just to have the average default of a more significant group.","cb77cd0d":"#### The negative values on BILL_AMTX also seemed odd, but it could simply mean that the customers paid more than their actual debts. A lower probability of default is expected for those customers.","a1a447d9":"## Amount of previous payment ","1fdcd9da":"Considering that about 22% of the customers will default, we see a couple of things:\n\n1. there are significantly more women than men\n2. men are most likely going to default the next month\n\n\nHowever, we don't have to jump to any conclusion just yet since there might be some lurking variable that justifies the data better (and, being SEX the first variable we look at, it is most likely the case). However, nice result and move on.","58ea27f1":"There are 30,000 credit card clients.\n\nThe average value for the amount of credit card limit is 167,484 NT dollars. The standard deviation is 129,747 NT dollars, ranging from 10,000 to 1M NT dollars\nAs the value 0 for default payment means 'not default' and value 1 means 'default', the mean of 0.221 means that there are 22.1% of credit card contracts that will default next month (will verify this in the next sections of this analysis).","ddda4f0c":"The trend on the outstanding amount for the Customer \n\n\nThe negative sign indicates an overpayment of the bill and you may be eligible for a refund. \n","97a55c83":"### Number of customers with outstanding amount (in different outstanding amount buckets)","976181d5":"### Analysis Based on the History of past payment."}}