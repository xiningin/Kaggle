{"cell_type":{"6a0ae347":"code","de10f2c7":"code","f5902333":"code","827f963b":"code","1e54e705":"code","c4ed5ad9":"code","50acf734":"code","82155b91":"code","14965a33":"code","6f89fca8":"code","ad2335c3":"code","3dbaac3b":"code","10b5a7ee":"code","422c681b":"code","f084f1a2":"code","3195d336":"code","6df2051a":"code","ede8cb4a":"code","9c4a2448":"code","90cddd67":"code","c718d6b8":"code","5861665c":"code","ccce5398":"code","91bef921":"code","e60a0117":"code","a19e6a06":"code","cba7d47a":"code","e5b56455":"code","108f166f":"code","d95c418a":"code","0910439b":"code","36c82565":"code","7a2076c6":"code","8ead5ffd":"code","0e9086d8":"code","e29a824c":"code","fba3bf98":"code","61be39a7":"code","67ed7862":"code","84d0d6a2":"code","042af859":"code","83cb8c9c":"code","acd85648":"code","72173719":"code","4b720127":"code","315c32c0":"code","b237e681":"code","9136c3c1":"code","c3783ccf":"code","48c26fac":"code","63a06a61":"code","5db72214":"code","d528d2fb":"code","52e6bdd5":"code","cf3a52dd":"code","87003484":"code","f76eb43b":"code","9f67a74f":"code","f95a8f77":"code","e46145a0":"code","4d9eef42":"code","0ef75f01":"code","45603ac6":"code","089e7b8d":"code","2a7a2680":"code","23addac0":"code","2c6a7272":"code","6e5c510f":"markdown","4122130f":"markdown","06df55c3":"markdown","fd3209db":"markdown","8579c1bc":"markdown","695d59aa":"markdown","e1087e6e":"markdown","ebab48ec":"markdown","610093ed":"markdown","2535c863":"markdown","9ae4337f":"markdown","0d52ec99":"markdown","1adb2f6b":"markdown","b221949c":"markdown","d8ee565b":"markdown","d032736b":"markdown","3cd62b9c":"markdown","c8c941a3":"markdown","69aa9fdd":"markdown","d60a76fb":"markdown","0d04a1c4":"markdown","60645842":"markdown","bb0daca3":"markdown","b064766e":"markdown","b1d31e8b":"markdown","342eafdd":"markdown","aba1b531":"markdown","4bf19fcc":"markdown","1cbd111a":"markdown","790055ac":"markdown","71ed0082":"markdown","c469abf1":"markdown","5e42ce5d":"markdown","cd1c5ecf":"markdown","8e260b34":"markdown","aeea98ae":"markdown","8c6bccd5":"markdown","d635aa26":"markdown","a96125ba":"markdown","a567e75f":"markdown","d8761595":"markdown","25649e61":"markdown","47f3ee5f":"markdown","233614fe":"markdown","55e08d2a":"markdown","70a3008f":"markdown","a6174c9a":"markdown","9243cef2":"markdown"},"source":{"6a0ae347":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use(\"seaborn-whitegrid\") # --> helps to visulize tools with grids. You can use another ones with looking plt.style.available\nimport seaborn as sns\nfrom collections import Counter\nimport warnings\nwarnings.filterwarnings(\"ignore\") # dont show warnings based on python\nimport plotly.graph_objs as go\n# plotly\n#import plotly.plotly as py\nfrom plotly.offline import init_notebook_mode, iplot, plot\nimport plotly as py\ninit_notebook_mode(connected=True)\nimport plotly.graph_objs as go\n\n# word cloud library\nfrom wordcloud import WordCloud\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","de10f2c7":"data = pd.read_csv(\"\/kaggle\/input\/world-happiness\/2019.csv\") # reading csv data which we want to analyze","f5902333":"data.columns # columns in data ","827f963b":"data.head() # first 5 information about data (default is 5. If you want to see more you can write specific number you want yo see eg: data.head(10))--> reads 10","1e54e705":"data.tail() # last 5 information about data.","c4ed5ad9":"data.info() # ","50acf734":"data.describe() # this will be used for mathematical calculations.","82155b91":"data.corr() # corrolations between columns. ","14965a33":"#correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","6f89fca8":"data1 = data.rename(columns={'GDP per capita':'GDPPC'}) # Changed for making readable. Unless the system will give us SyntaxError. Becouse column's name is discreate.","ad2335c3":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata1.GDPPC.plot(kind = 'line', color = 'g',label = 'GDPPC',linewidth=1,alpha = 0.5,grid = True,linestyle = ':')\ndata1.Score.plot(color = 'r',label = 'Score',linewidth=1, alpha = 0.5,grid = True,linestyle = '-.')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()\n","3dbaac3b":"# Scatter Plot \n# x = GDPPC, y = Score\ndata1.plot(kind='scatter', x='GDPPC', y='Score',alpha = 0.5,color = 'red')\nplt.xlabel('GDPPC')              # label = name of label\nplt.ylabel('Score')\nplt.title('GDPPC Score Scatter Plot')            # title = title of plot\nplt.show()","10b5a7ee":"# Histogram\n# bins = number of bar in figure\ndata1.GDPPC.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","422c681b":"data.info()","f084f1a2":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Country or region\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = data2[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{} : \\n{} : \".format(variable,varValue))","3195d336":"data2 = data.rename(columns={'Country or region':'CountryOrRegion'})","6df2051a":"category1 = [\"CountryOrRegion\"] # In this data it didnt work properly, but for learning I putted this there.\nfor c in category1:\n    bar_plot(c)","ede8cb4a":"category2 = [\"CountryOrRegion\"] # Secondly\nfor c in category2 : \n    print(\"{} \\n\".format(data2[c].value_counts()))","9c4a2448":"data3 = data.rename(columns={'Country or region':'CountryOrRegion', 'Overall rank':'OverallRank', 'Perceptions of corruption':'PerceptionsOfCorruption', 'GDP per capita':'GDPPC', 'Social support':'SocialSupport', 'Healthy life expectancy':'HealthyLifeExpectancy', 'Freedom to make life choices':'FreedomToMakeLifeChoices'})","90cddd67":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(data3[variable], bins = 50) # frequency of bars, default = 10\n    plt.xlabel(variable)\n    plt.ylabel(\"Frequency\")\n    plt.title(\"{} disturbiton with hist\".format(variable))\n    plt.show()","c718d6b8":"numericVar = [\"OverallRank\", \"PerceptionsOfCorruption\", \"Generosity\", \"FreedomToMakeLifeChoices\", \"HealthyLifeExpectancy\", \"SocialSupport\", \"GDPPC\", \"Score\"]\nfor n in numericVar:\n    plot_hist(n)\n    plt.show()","5861665c":"data3[[\"CountryOrRegion\",\"Generosity\"]].groupby([\"CountryOrRegion\"], as_index = False).mean().sort_values(by =\"Generosity\", ascending = False)","ccce5398":"data3[[\"CountryOrRegion\",\"HealthyLifeExpectancy\"]].groupby([\"CountryOrRegion\"], as_index = False).mean().sort_values(by =\"HealthyLifeExpectancy\", ascending = False)","91bef921":"data3[[\"CountryOrRegion\",\"GDPPC\",\"Score\"]].groupby([\"CountryOrRegion\",\"Score\"], as_index = False).mean().sort_values(by =\"GDPPC\", ascending = False)","e60a0117":"data3.describe()","a19e6a06":"def detect_outliers(data,features):\n    outlier_indices = []\n    \n    for c in features:\n        # 1st quartile\n        Q1 = np.percentile(data3[c],25)\n        # 3rd quartile\n        Q3 = np.percentile(data3[c],75)\n        # IQR\n        IQR = Q3 - Q1\n        # Outlier step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = data3[(data3[c] < Q1 - outlier_step) | (data3[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n    \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 1)\n    \n    return multiple_outliers","cba7d47a":"data3.loc[detect_outliers(data3, [\"OverallRank\",\"Score\",\"GDPPC\",\"SocialSupport\", \"HealthyLifeExpectancy\", \"FreedomToMakeLifeChoices\", \"Generosity\", \"PerceptionsOfCorruption\" ])]","e5b56455":"# drop outliers\ndata3 = data3.drop(detect_outliers(data3,[\"OverallRank\",\"Score\",\"GDPPC\",\"SocialSupport\", \"HealthyLifeExpectancy\", \"FreedomToMakeLifeChoices\", \"Generosity\", \"PerceptionsOfCorruption\"]),axis = 0).reset_index(drop = True)\n# if we had outlier, we could drop outliers with this code.","108f166f":"data_len = len(data)\ndata = pd.concat([data], axis = 0).reset_index(drop = True)","d95c418a":"data.head()","0910439b":"data.columns[data.isnull().any()] # in which columns there are missing values? ","36c82565":"data.isnull().sum() # how many ? ","7a2076c6":"\"\"\"\nLets say that Score and Social support have 2 missing values each.\ndata[data[\"Score\"].isnull()] --> NaN objects of Score\n****\ndata.boxplot(column =\"Scoure\", by =\"Scial support\")\nplt.show()--> graphic of outliers and values.\n***\ntrain_df[\"Score\"] = train_df[\"Score\"].fillna(\"5.40\") # filling missing values with 5.40 (mean value) or we can find index of missing value and checking upper score and lower score taking avarage of these scores and write it instead of 5.40\ntrain_df[train_df[\"Score\"].isnull()] # checking --> Will be no missing values\n***\n\n\"\"\"","8ead5ffd":"data.describe()","0e9086d8":"data3.head() # I used data3 becouse of make data readable. I used it before.","e29a824c":"new_index = (data3['GDPPC'].sort_values(ascending=False)).index.values # values were sorted according to descending order.\nsorted_data = data.reindex(new_index)\nsorted_data","fba3bf98":"#Visiualization\nplt.figure(figsize=(45,20))\nsns.barplot(x = sorted_data['Country or region'], y = sorted_data['GDP per capita'])\nplt.xticks(rotation = 90) # rotation of countries's names\nplt.xlabel('Country or region')\nplt.ylabel('GDP per capita')\nplt.title('GDP per capita Rates Given Countries')\nplt.show()","61be39a7":"#Happy Countries Respectively\nplt.figure(figsize=(45,20))\nax= sns.barplot(x=data3['CountryOrRegion'], y=data3['Score'],palette = sns.cubehelix_palette())\nplt.xticks(rotation = 90)\nplt.xlabel('Country Or Region')\nplt.ylabel('Happiness Frequency')\nplt.title('Happy Countries Respectively')\nplt.show()","67ed7862":"data3.corr()","84d0d6a2":"f,ax1 = plt.subplots(figsize =(40,20))\nsns.pointplot(x=data3['CountryOrRegion'],y=data3['GDPPC'],data=data3,color='lime',alpha=0.8)\nplt.xticks(rotation = 90)\nsns.pointplot(x=data3['CountryOrRegion'],y=data3['HealthyLifeExpectancy'],data=data3,color='red',alpha=0.8)\nplt.text(40,0.6,'Healthy Life Expectancy',color='red',fontsize = 25,style = 'italic')\nplt.text(40,0.55,'GDPPC',color='lime',fontsize = 25,style = 'italic')\nplt.xlabel('Countries',fontsize = 25,color='blue')\nplt.ylabel('Values',fontsize = 25,color='blue')\nplt.title('GDPPC and Healthy Life Expectancy',fontsize = 25,color='blue')\nplt.grid()","042af859":"\n# joint kernel density\n# pearsonr= if it is 1, there is positive correlation and if it is, -1 there is negative correlation.\n# If it is zero, there is no correlation between variables\n# Show the joint distribution using kernel density estimation \ng = sns.jointplot(data3['HealthyLifeExpectancy'], data3['GDPPC'], kind=\"kde\", size=7)\nplt.savefig('graph.png')\nplt.show()\n","83cb8c9c":"# you can change parameters of joint plot\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# Different usage of parameters but same plot with previous one\ng = sns.jointplot(data3[\"HealthyLifeExpectancy\"], data3[\"GDPPC\"], data=data,size=5, ratio=3, color=\"r\")","acd85648":"# Visualization of Score rate vs GDPPC of each country with different style of seaborn code\n# lmplot \n# Show the results of a linear regression within each dataset\nsns.lmplot(x='GDPPC', y='Score', data=data3)\nplt.show()","72173719":"# Visualization of GDPPC vs Score of each Country with different style of seaborn code\n# cubehelix plot\nsns.kdeplot(data3.GDPPC, data3.Score, shade=True, cut=3) # shade mavili\u011fin i\u00e7inin dolu olmasu cut b\u00fcy\u00fckl\u00fc\u011f\u00fc\nplt.show()","4b720127":"data.corr()","315c32c0":"#correlation map\nf,ax = plt.subplots(figsize=(5,5))\nsns.heatmap(data.corr(), annot=True, linewidths=0.5, linecolor=\"red\", fmt=\".1f\", ax=ax)\nplt.show()","b237e681":"data3.head()","9136c3c1":"data3.CountryOrRegion","c3783ccf":"sns.pairplot(data3)\nplt.show()","48c26fac":"data3 = data.rename(columns={'Country or region':'CountryOrRegion', 'Overall rank':'OverallRank', 'Perceptions of corruption':'PerceptionsOfCorruption', 'GDP per capita':'GDPPC', 'Social support':'SocialSupport', 'Healthy life expectancy':'HealthyLifeExpectancy', 'Freedom to make life choices':'FreedomToMakeLifeChoices'})","63a06a61":"# Line Charts Example: GDPPC and HealthyLifeExpectancy vs OverallRank of Top 100 Countries, I choose these 2 bec. there are good corrolation between them.\n\n# prepare data frame\ndf = data3.iloc[:100,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n\n# Creating trace1\ntrace1 = go.Scatter(\n                    x = df.OverallRank,\n                    y = df.GDPPC,\n                    mode = \"lines\",\n                    name = \"GDPPC\",\n                    marker = dict(color = 'rgba(1, 1, 250, 0.8)'),\n                    text= df.CountryOrRegion)\n# Creating trace2\ntrace2 = go.Scatter(\n                    x = df.OverallRank,\n                    y = df.HealthyLifeExpectancy,\n                    mode = \"lines+markers\",\n                    name = \"HealthyLifeExpectancy\",\n                    marker = dict(color = 'rgba(40, 200, 5, 0.8)'),\n                    text= df.CountryOrRegion)\ndata3 = [trace1, trace2]\nlayout = dict(title = 'GDPPC and HealhyLifeExpectancy vs World Rank of Top 100 Countries',\n              xaxis= dict(title= 'World Rank',ticklen= 5,zeroline= False)\n             )\nfig = dict(data = data3, layout = layout)\niplot(fig)\n\n","5db72214":"data3 = data.rename(columns={'Country or region':'CountryOrRegion', 'Overall rank':'OverallRank', 'Perceptions of corruption':'PerceptionsOfCorruption', 'GDP per capita':'GDPPC', 'Social support':'SocialSupport', 'Healthy life expectancy':'HealthyLifeExpectancy', 'Freedom to make life choices':'FreedomToMakeLifeChoices'})","d528d2fb":"# First Bar Charts Example: GDPPC and SocialSupport of top 5 cities in 2019 (style1)\n\ndf = data3.iloc[:5,:]\n\n# import graph objects as \"go\"\nimport plotly.graph_objs as go\n# create trace1 \ntrace1 = go.Bar(\n                x = df.CountryOrRegion,\n                y = df.GDPPC,\n                name = \"GDPPC\",\n                marker = dict(color = 'rgba(255, 174, 255, 1)',\n                             line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df.CountryOrRegion)\n# create trace2 \ntrace2 = go.Bar(\n                x = df.CountryOrRegion,\n                y = df.SocialSupport,\n                name = \"Social Support\",\n                marker = dict(color = 'rgba(255, 255, 128, 1)',\n                              line=dict(color='rgb(0,0,0)',width=1.5)),\n                text = df.CountryOrRegion)\ndata3 = [trace1, trace2]\nlayout = go.Layout(barmode = \"group\")\nfig = go.Figure(data = data3, layout = layout)\niplot(fig)\n\n","52e6bdd5":"data3 = data.rename(columns={'Country or region':'CountryOrRegion', 'Overall rank':'OverallRank', 'Perceptions of corruption':'PerceptionsOfCorruption', 'GDP per capita':'GDPPC', 'Social support':'SocialSupport', 'Healthy life expectancy':'HealthyLifeExpectancy', 'Freedom to make life choices':'FreedomToMakeLifeChoices'})","cf3a52dd":"# Generosity Rates of first 7 countries\n\n# data preparation\ndf = data3.iloc[:7,:]\npie = df.Generosity\n\n#Plotly calculates the rates automaticaly.\n\n#figure\nfig = {\n    \"data\" : [\n        {\n            \"values\" : pie,\n            \"labels\" : df.CountryOrRegion,\n            \"domain\": {\"x\": [0.1, .6]},\n            \"name\" : \"Generosity Rates\",\n            \"hoverinfo\" : \"label+percent+name\", # cursor shows the rates and name of country\n            \"hole\" : 0.2, # Magnitude of white hole\n            \"type\" : \"pie\"\n        }\n    ],\n    \"layout\" : {\n        \"title\" : \"Generosity Rates Of First 5 Countries\",\n        \"annotations\" : [\n            {\"font\" : { \"size\": 10}, #Magnitude of Generosity name at the top of pie chart\n            \"showarrow\" : False,\n             \"text\": \"Generosity\",\n            \"x\": 0.20,\n            \"y\": 1\n            }\n        ]\n    } \n}\niplot(fig)","87003484":"data3 = data.rename(columns={'Country or region':'CountryOrRegion', 'Overall rank':'OverallRank', 'Perceptions of corruption':'PerceptionsOfCorruption', 'GDP per capita':'GDPPC', 'Social support':'SocialSupport', 'Healthy life expectancy':'HealthyLifeExpectancy', 'Freedom to make life choices':'FreedomToMakeLifeChoices'})","f76eb43b":"df = data3.iloc[:20,:]\nsize  = df.Score\ncolor = [each for each in df.FreedomToMakeLifeChoices]\ndata = [\n    {\n        'y' : df.PerceptionsOfCorruption,\n        'x' : df.OverallRank,\n        'mode' : 'markers',\n        'marker':{\n            'color': color,\n            'size': size,\n            'showscale': True # Determines whether or not a colorbar is displayed for this trace. Default\n        },\n        'text' : df.CountryOrRegion\n    }\n]\niplot(data)","9f67a74f":"# prepare data\nG = data3.GDPPC\nH = data3.HealthyLifeExpectancy\n\ntrace1 = go.Histogram(\n    x=G,\n    opacity=0.75,\n    name = \"GDPPC\",\n    marker=dict(color='rgba(171, 50, 96, 0.6)'))\ntrace2 = go.Histogram(\n    x=H,\n    opacity=0.75,\n    name = \"HealthyLifeExpectancy\",\n    marker=dict(color='rgba(12, 50, 196, 0.6)'))\n\ndata = [trace1, trace2]\nlayout = go.Layout(barmode='overlay', # another mode is stack you can also use it.\n                   title=' GDPPC and HealthyLifeExpectancy ratio',\n                   xaxis=dict(title='X'),\n                   yaxis=dict( title='Y'),\n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","f95a8f77":"# data prepararion\nhappy = data3.CountryOrRegion\nplt.subplots(figsize=(7,7))\nwordcloud = WordCloud(\n                          background_color='purple',\n                          width=512,\n                          height=384\n                         ).generate(\" \".join(happy))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.savefig('graph.png')\n\nplt.show()","e46145a0":"\"\"\"\nMedian (50th percentile) = middle value of the data set. Sort and take the data in the middle. It is also called 50% percentile that is 50% of data are less that median(50th quartile)(quartile)\n\n25th percentile = quartile 1 (Q1) that is lower quartile\n75th percentile = quartile 3 (Q3) that is higher quartile\nheight of box = IQR = interquartile range = Q3-Q1\nWhiskers = 1.5 * IQR from the Q1 and Q3\nOutliers = being more than 1.5*IQR away from median commonly.\n\"\"\"\n# data preparation\n\n\ntrace1= go.Box(\n    y=data3.PerceptionsOfCorruption,\n    name = 'PerceptionsOfCorruption',\n    marker = dict(\n        color = 'rgb(12, 12, 140)',\n    )\n)\ntrace2 = go.Box(\n    y=data3.Generosity,\n    name = 'Generosity',\n    marker = dict(\n        color = 'rgb(12, 128, 128)',\n    )\n)\ndata = [trace1, trace2]\niplot(data)","4d9eef42":"# import figure factory\nimport plotly.figure_factory as ff\n# prepare data\ndataframe = data3\ndf = dataframe.loc[:,[\"GDPPC\",\"SocialSupport\", \"HealthyLifeExpectancy\"]]\ndf[\"index\"] = np.arange(1,len(df)+1)\n# scatter matrix\nfig = ff.create_scatterplotmatrix(df, diag='box', index='index',colormap='Picnic',\n                                  colormap_type='cat',\n                                  height=700, width=700)\niplot(fig)","0ef75f01":"# first line plot\ntrace1 = go.Scatter(\n    x=data3.OverallRank,\n    y=data3.HealthyLifeExpectancy,\n    name = \"HealthyLifeExpectancy\",\n    marker = dict(color = 'rgba(16, 112, 2, 0.8)'),\n)\n# second line plot\ntrace2 = go.Scatter(\n    x=data3.OverallRank,\n    y=data3.Score,\n    xaxis='x2',\n    yaxis='y2',\n    name = \"Score\",\n    marker = dict(color = 'rgba(160, 112, 20, 0.8)'),\n)\ndata = [trace1, trace2]\nlayout = go.Layout(\n    xaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='y2',        \n    ),\n    yaxis2=dict(\n        domain=[0.6, 0.95],\n        anchor='x2',\n    ),\n    title = 'Score and HealthyLifeExpectancy vs World Rank of Countries'\n\n)\n\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","45603ac6":"\n# create trace 1 that is 3d scatter\ntrace1 = go.Scatter3d(\n    x=data3.GDPPC,\n    y=data3.SocialSupport,\n    z=data3.HealthyLifeExpectancy,\n    mode='markers',\n    marker=dict(\n        size=10,\n        color=[each for each in data3.Score],   # set color to an array\/list of desired values      \n    )\n)\n\ndata = [trace1]\nlayout = go.Layout(\n    margin=dict(\n        l=0,\n        r=0,\n        b=0,\n        t=0  \n    )\n    \n)\nfig = go.Figure(data=data, layout=layout)\niplot(fig)","089e7b8d":"trace1 = [go.Choropleth(\n               colorscale = 'Balance',\n               locationmode = 'country names',\n               locations = data3['CountryOrRegion'],\n               text = data3['CountryOrRegion'], \n               z = data3['GDPPC'],\n               )]\n\nlayout = dict(title = 'GDPPC',\n                  geo = dict(\n                      showframe = True,\n                      showocean = True,\n                      showlakes = True,\n                      showcoastlines = True,\n                      projection = dict(\n                          type = 'hammer'\n        )))\n\n\nprojections = [ \"equirectangular\", \"mercator\", \"orthographic\", \"natural earth\",\"kavrayskiy7\", \n               \"miller\", \"robinson\", \"eckert4\", \"azimuthal equal area\",\"azimuthal equidistant\", \n               \"conic equal area\", \"conic conformal\", \"conic equidistant\", \"gnomonic\", \"stereographic\", \n               \"mollweide\", \"hammer\", \"transverse mercator\", \"albers usa\", \"winkel tripel\" ]\n\nbuttons = [dict(args = ['geo.projection.type', y],\n           label = y, method = 'animate' ) for y in projections]\nannot = list([ dict( x=0.1, y=0.8, text='Projection', yanchor='bottom', \n                    xref='paper', xanchor='right', showarrow=False )])\n\n\n# Update Layout Object\n\nlayout[ 'updatemenus' ] = list([ dict( x=0.1, y=0.8, buttons=buttons, yanchor='top' )])\nlayout[ 'annotations' ] = annot\n\n\nfig = go.Figure(data = trace1, layout = layout)\niplot(fig)","2a7a2680":"trace1 = [go.Choropleth(\n                colorscale = 'Viridis',\n                locationmode = 'country names',\n                locations = data3['CountryOrRegion'],\n                text = data3['CountryOrRegion'],\n                z = data3['PerceptionsOfCorruption'],\n)]\n\nlayout = dict(title = 'Perceptions Of Corruption',\n                geo = dict(\n                    showframe=True,\n                    showocean=True,\n                    showlakes=True,\n                    showcoastlines=True,\n                    projection = dict(\n                        type='hammer'\n                    )))\n\nprojections = [ \"equirectangular\", \"mercator\", \"orthographic\", \"natural earth\",\"kavrayskiy7\", \n               \"miller\", \"robinson\", \"eckert4\", \"azimuthal equal area\",\"azimuthal equidistant\", \n               \"conic equal area\", \"conic conformal\", \"conic equidistant\", \"gnomonic\", \"stereographic\", \n               \"mollweide\", \"hammer\", \"transverse mercator\", \"albers usa\", \"winkel tripel\" ]\n\nbuttons = [dict(args = ['geo.projection.types', y],\n               label = y, method = 'animate') for y in projections]\nannot = list([dict(x=0.1, y=0.8, text = 'Projection', yanchor='top',\n                    xref='paper', xanchor = 'right', showarrow=True)])\n\n# Update Layout Object\nlayout[ 'updatemenus' ] = list([ dict( x=0.1, y=0.8, buttons=buttons, yanchor='top' )])\nlayout[ 'annotations' ] = annot\n\n\nfig = go.Figure(data = trace1, layout = layout)\niplot(fig)","23addac0":"data3.head()","2c6a7272":"data3[data3[\"CountryOrRegion\"] == \"Turkey\"]","6e5c510f":"Like we did Buble charts we attributed to meaning to color. If we wish we could do same to size. But in this plot it will make things incomprehensible","4122130f":"## Box Plots","06df55c3":"1. <a id = '1'><\/a><br>\n# Load and Check Data","fd3209db":"# Box Plot","8579c1bc":"* This part is created for comparison of curious features.","695d59aa":"## Scatter Matrix Plots","e1087e6e":"> <a id = '10'><\/a><br>\n## Find Missing Value","ebab48ec":"## Line Charts","610093ed":"Outlier detection helps us to find values that irrelevantly high or low. Ex: [1,90,95,100,6000] 1 is lower outlier, 6000 is upper outlier. In our data as you see there are no outlier. We can say that values in data disturbuted properly and consistant.","2535c863":"# Introduction\n   All around the world, people are living different situations and in different countries. This causes over 7 billion different expectations and happiness states. In this section we are going to analyze world happiness reports in 2019 by using some methods.\n\n<font color = 'purple'>\nContent : \n\n1. [Load and Check Data](#1)\n    * [Matplotlib](#2)\n1. [Variable Description](#3)\n    * [Univariate Variable Analysis](#4)\n        - [Categorical Variable](#5)\n        - [Numerical Variable](#6)\n1. [Basic Data Analysis](#7)\n1. [Outlier Detection](#8)\n1. [Missing Value](#9)\n    * [Find Missing Value](#10)\n    * [Fill Missing Value](#11)\n1. [Visualization-1(Seaborn)](#12)\n1. [Visualization-2(Plotly)](#13)","9ae4337f":"# Point Plot","0d52ec99":"## Bubble Charts","1adb2f6b":"There are 156 features in data. \n* count: number of entries\n* mean : avarege.\n* std : standard daviation.\n* min : Minimum value of specific column. Ex : In Score min value is 2.853000\n* 25% : 1st quartile, lower percentile. half of first half part. Ex : In 39. index of Social support is 1.055750\n* 50% : Median. Ex:  In the middle of Social support : 1.27150\n* 75% : 3rd quartile, upper percentile. half of second half part.\n","b221949c":"# KDE Plot","d8ee565b":"If the corrolations between columns close to 1 this means, this 2 columns are nearly corrolated.","d032736b":"<a id = '3'><\/a><br>\n# Variable Description\n1. Overall rank : Ranking of specific country.\n2. Country or region : Which country  \n3. Score : Score of specific country\n4. GDP per capita : GDP per capita is a measure of a country's economic output that accounts for its number of people. It divides the country's gross domestic product by its total population.\n5. Social support : Social support means having friends and other people, including family, to turn to in times of need or crisis to give you a broader focus and positive self-image.\n6. Healthy life expectancy : Rate of expectation of livng healty.\n7. Freedom to make life choices : Freedom of choice describes an individual's opportunity and autonomy to perform an action selected from at least two available options, unconstrained by external parties.\n8. Generosity : the quality of being kind and generous.\n9. Perceptions of corruption : Illegality, lack of roads .\n","3cd62b9c":"<a id = '2'><\/a><br>\n# Matplotlib\nMatplot is a python library that help us to plot data. The easiest and most basic plots are line, scatter and histogram plots.\n\n* Line plot is better when x axis is time.\n* Scatter is better when there is correlation between two variables\n* Histogram is better when we need to see distribution of numerical data.\n* Customization: Colors,labels,thickness of line, title, opacity, grid, figsize, ticks of axis and linestyle","c8c941a3":"<a id = '5'><\/a><br>\n## Categorical Variable","69aa9fdd":"<a id = '11'><\/a><br>\n## Fill Missing Value","d60a76fb":"I wanted to show the corrolation between them. We can say that, they work coordinately. (Corrolated)","0d04a1c4":"You can click on the figure, rotate it and you can make it bigger or smaller. These steps can be applied for many we did before.","60645842":"As an \u0131llustration, we can say that score and GDP per capita is corrolated. ","bb0daca3":"# Bar Plot","b064766e":"## Inset Plots","b1d31e8b":"In our data there is no missing value so we can not fill missing values but \u0131 am sharing the codes as comment for you to use in different datas.\n","342eafdd":"<a id = '13'><\/a><br>\n# Visualization 2-(Plotly)","aba1b531":"# Lm Plot","4bf19fcc":"We used groupby method. In here, some values grouped based on another values. Examples can be enhece.","1cbd111a":"## 3D Scatter Plot with Colorscaling","790055ac":"* object(1) : Country or region\n* int64(1) : Overall rank\n* float64(7) : Perceptions of corruption, Generosity, Freedom to make life choices, Healthy life expectancy, Social support, GDP per capita, Score   ","71ed0082":"## Map Plot","c469abf1":"## Pie Charts","5e42ce5d":"# Heatmap","cd1c5ecf":"<a id = '4'><\/a><br>\n# Univariate Variable Analysis\n* Categorical Variable : Country or region\n* Numerical Variable : Overall rank Perceptions of corruption, Generosity, Freedom to make life choices, Healthy life expectancy, Social support, GDP per capita, Score, ","8e260b34":"- Non-null : not empty, every veriable is readable\n- Dtype : In programming 3 most using Data types : object(str)--> used to represent text eg. \"String\" , int --> whole numer eg. 4, float--> not whole numer eg. 4.7","aeea98ae":"<a id = '8'><\/a><br>\n# Outlier Detection","8c6bccd5":"## Histogram Plot","d635aa26":"In categorical variable analysis, there are variables created from categories, options. As an illustration, Gender : Female or male there are two options.\nIn numerical variable analysis, there are variables created from numbers. No options. As an illustration, Age : 24\nIn this data there are not much categorical variables. In datas, you must categorize your variables categorical or numerical.","a96125ba":"<a id = '6'><\/a><br>\n## Numerical Variable","a567e75f":"If number of PerceptionsOfCorruption close to 0.45299999999999996 (max = 0.45299999999999996) means Corruption level is low.\ny axis shows perceptions of corruption level. x axis shows rank of countries.\nIn this plot we attributed a meaning to color and size. Size shows us score's of countries. If size is big we can say that score of specific country is large. On the other hand, when we look at colors, we can optain that if the color yelowish; Freedom to make life choices level is high. I mean, by the helping this plot we can analyze more than 1 column .","d8761595":"## Bar Chart\n","25649e61":"<a id = '7'><\/a><br>\n# Basic Data Analysis\n* CountryOrRegion - Generosity \n* CountryOrRegion - HealthyLifeExpectancy\n* CountryOrRegion - GDPPC - Score\n\n","47f3ee5f":"As you see, There are no missing values. If we had it would write the names of columns\nNaN : standing for Not a Number, is a member of a numeric data type that can be interpreted as a value that is undefined or unrepresentable. Also, below of columns if NaN written we can understand that there is missing value ","233614fe":"<a id = '9'><\/a><br>\n# Missing Value\n* Find Missing Value\n* Fill Missing Value","55e08d2a":"# Joint Plot","70a3008f":"<a id = '12'><\/a><br>\n# Visualization 1-(Seaborn)","a6174c9a":"## Word Cloud","9243cef2":"# Pair Plot"}}