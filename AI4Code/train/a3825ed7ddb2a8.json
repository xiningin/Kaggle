{"cell_type":{"104a66b8":"code","4f13c3ec":"code","f88e7c5c":"code","5cf96ef8":"code","51a608d3":"code","f5f9bbbc":"code","92d9d8ed":"code","11489168":"code","d2df7d5e":"code","7632db9b":"code","d0e65ca4":"code","4643c3ba":"code","f99542c7":"code","a1cbafb9":"code","76545623":"code","d3ee5ae5":"code","17b993eb":"code","a5b0815a":"code","c852145f":"code","b0ef6656":"code","fe3ce285":"code","32c10a70":"code","d8ba1c33":"code","99761311":"code","d605a9e8":"markdown","9f824ef1":"markdown","53c4e977":"markdown","c2dc3150":"markdown","67e3cd09":"markdown","e496441b":"markdown","894392b3":"markdown","98b305d5":"markdown","f35ac870":"markdown","2d8f791c":"markdown","16483254":"markdown","9e87b9cc":"markdown","df5d369b":"markdown","c0dc6e22":"markdown"},"source":{"104a66b8":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","4f13c3ec":"df=pd.read_csv(\"..\/input\/penguins\/Penguindata.csv\")\ndf.head(3)","f88e7c5c":"df.shape","5cf96ef8":"df.duplicated().sum()","51a608d3":"df.info()","f5f9bbbc":"df.drop([\"Comments\"],axis = 1,inplace = True)\ndf.head(2)","92d9d8ed":"df.shape","11489168":"def missing_values_table(df):\n        mis_val = df.isnull().sum()\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n        table = pd.concat([mis_val, mis_val_percent], axis=1)\n\n        col_names = table.rename(\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n        \n        col_names= col_names[col_names.iloc[:,1] != 0].sort_values('% of Total Values',\n                                                                   ascending=False).round(1)\n        \n        print (\"Dataframe has \" + str(df.shape[1]) + \" columns,\"      \n            \"And there exist \" + str(col_names.shape[0]) +\n              \" columns missing value(s)\")\n        \n        return col_names","d2df7d5e":"summary=missing_values_table(df)\nsummary","7632db9b":"df=df.dropna(subset=[\"Culmen Length (mm)\",\"Culmen Depth (mm)\",\"Flipper Length (mm)\",\n                     \"Body Mass (g)\",\"Sex\",\"Delta 15 N (o\/oo)\",\"Delta 13 C (o\/oo)\"])\ndf.shape","d0e65ca4":"df.isnull().sum()","4643c3ba":"df['Species'].value_counts()","f99542c7":"x=df['Species'].value_counts().index\nprint(x)\nprint()\ny=df['Species'].value_counts().values.tolist()\nprint(y)","a1cbafb9":"plt.figure(figsize=(8,8))\npal = sns.color_palette(\"Paired\")\n#explode needs a length to function so making a for loop makes it more dynamic\nplt.pie(y, labels=x, colors=pal,autopct='%1.1f%%',\n        explode=[0.03 for i in df['Species'].value_counts().index])\nplt.show()","76545623":"import scipy.stats as stats\n#Kernel density estimation is a way to estimate \n#the probability density function (PDF) of a random variable\ndensity = stats.gaussian_kde(df[\"Body Mass (g)\"])\nplt.style.use(\"ggplot\")\nplt.figure(figsize=(10,5))\nn, bins, patches = plt.hist(df[\"Body Mass (g)\"],\n                            bins=20 ,\n                            color=\"lightseagreen\",\n                            density=True,\n                            alpha =0.6,\n                            edgecolor=\"white\")\nprint(\"histogram edges\")\nprint(bins)\nplt.xlabel('Body Mass')\nplt.ylabel('Probability')\nplt.title(\"Line Histogram\")\nplt.plot(bins,density(bins))\nplt.show()","d3ee5ae5":"plt.figure(figsize=(10,5))\nplt.hist(df[\"Culmen Length (mm)\"],color='yellowgreen',\n         bins=20,alpha =0.7,edgecolor=\"white\")\nplt.show()","17b993eb":"df[\"Island\"].value_counts()","a5b0815a":"df[\"Sex\"].value_counts()","c852145f":"df.drop(df.index[df['Sex'] == \".\"], inplace = True)","b0ef6656":"plt.figure(figsize=(10, 5))\nsns.scatterplot(x=\"Culmen Length (mm)\", \n                y=\"Culmen Depth (mm)\",\n                size=\"Body Mass (g)\",\n                #creates the range\n                sizes=(20,500),\n                alpha=0.5,\n                #to color the bubble chart by the fourth variable \n                hue=\"Sex\",\n                data=df,\n                palette=\"husl\")\n\nplt.legend(bbox_to_anchor=(1.0, 0.8))\nplt.xlabel(\"Culmen Length (mm)\")\nplt.ylabel(\"Culmen Depth (mm)\")\nplt.title(\"Bubble Plot\")\nplt.show()","fe3ce285":"plt.figure(figsize=(10,5))\nsns.scatterplot(x=\"Culmen Length (mm)\", \n                y=\"Culmen Depth (mm)\", \n                hue=\"Species\",\n                data=df,\n                palette=\"mako\",\n                alpha=0.8)\nplt.legend(bbox_to_anchor=(1.01, 1),\n           borderaxespad=0)\nplt.xlabel(\"Culmen Length (mm)\")\nplt.ylabel(\"Culmen Depth (mm)\")\nplt.show()","32c10a70":"import squarify\nsize=list(df['Species'].value_counts())\nlabel=[\"Adelie\",\"Gentoo\",\"Chinstrap\"]\nsquarify.plot(sizes=size, label=label)\nplt.show()","d8ba1c33":"fig, axes = plt.subplots(2, 1,figsize=(8,8))\n\naxes[0].hist('Culmen Length (mm)',bins=20,color='thistle',\n             edgecolor='white',data=df)\naxes[0].set_xlabel('Culmen Length (mm)')\naxes[0].set_ylabel('counts')\n\naxes[1].hist('Culmen Depth (mm)',bins=20,color='lightsteelblue',\n             edgecolor='white',data=df)\naxes[1].set_xlabel('Culmen Depth (mm)')\naxes[1].set_ylabel('counts')\n\nplt.show()","99761311":"df1 = df[['Culmen Length (mm)','Culmen Depth (mm)','Flipper Length (mm)']]\nplt.figure(figsize = (10, 5))\ndf1.boxplot(color =\"coral\")\nplt.show()","d605a9e8":"# Bubble Chart","9f824ef1":"#### notice how there is a wrong record ","53c4e977":"# Data Visualization","c2dc3150":"# box plot","67e3cd09":"# Line Histogram","e496441b":"# Scatter Chart ","894392b3":"# Pie Chart","98b305d5":"## Data Exploration and Cleaning","f35ac870":"## Handling Missing Values ","2d8f791c":"# Column Histogram","16483254":"### hist returns a tuple of 3 values (n, bins, patches) :n= array or list of arrays(The values of the histogram bin) \/ bins = bin edges \/ patches = list or list of lists (list of individual patches used to create the histogram)","9e87b9cc":"# subplots","df5d369b":"# Tree chart","c0dc6e22":"#### dropping the comments column as it contains so many missing values and it also won't really be needed for visualising the data "}}