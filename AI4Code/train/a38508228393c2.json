{"cell_type":{"5d7dc170":"code","a11083ff":"code","6706c7d9":"code","f8835027":"code","108b9b4b":"code","a55648e9":"code","52eed0ec":"code","cf977ec7":"code","e0fc538b":"code","1ece021e":"code","89f139f7":"code","8efa81f0":"code","6695a4fe":"code","b3cbf1d5":"code","059543fb":"code","e9be34df":"code","cfb9cbcb":"code","760ca77b":"code","4d42426f":"code","a3765ff8":"code","2d63628c":"code","77b2bba9":"code","917ffb20":"markdown","74654672":"markdown","6647c384":"markdown","036a191b":"markdown","d7a25e0a":"markdown"},"source":{"5d7dc170":"import os\nimport gc\nimport cv2\nimport time\nimport copy\nimport json\nimport random\nimport collections\nfrom tqdm import tqdm\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import StratifiedKFold\n\nimport torch\nimport torchvision\nfrom torchvision.transforms import functional as F\nfrom torch.utils.data import Dataset, DataLoader\nfrom torchvision.models.detection.faster_rcnn import FastRCNNPredictor","a11083ff":"def fix_all_seeds(seed):\n    np.random.seed(seed)\n    random.seed(seed)\n    os.environ['PYTHONHASHSEED'] = str(seed)\n    torch.manual_seed(seed)\n    torch.cuda.manual_seed(seed)\n    torch.cuda.manual_seed_all(seed)\n    \nfix_all_seeds(42)","6706c7d9":"TRAIN_CSV = \"..\/input\/tensorflow-great-barrier-reef\/train.csv\"\nIMAGE_PATH = \"..\/input\/tensorflow-great-barrier-reef\/train_images\/\"\nGEN_PATH = \"..\/input\/funie-gan1\/ganpic\/\"","f8835027":"WIDTH = 1280\nHEIGHT = 720\n\nNUM_CLASSES = 2\n\nDEVICE = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\nprint(DEVICE)\n\nRESNET_MEAN = (0.485, 0.456, 0.406)\nRESNET_STD = (0.229, 0.224, 0.225)\n\nRESIZE = None\n\nBATCH_SIZE = 4\n\nGEN = True\n\n# No changes tried with the optimizer yet.\nMOMENTUM = 0.9\nLEARNING_RATE = 0.01\nWEIGHT_DECAY = 0.0005\n\n# Normalize to resnet mean and std if True.\nNORMALIZE = False \n\n\n# Use a StepLR scheduler if True. Not tried yet.\nUSE_SCHEDULER = True\n\n# Amount of epochs\nNUM_EPOCHS = 25\n\nDEBUG = False","108b9b4b":"train = pd.read_csv(TRAIN_CSV)\ntrain['image_path'] = train['image_id'].apply(lambda x: IMAGE_PATH+'video_'+x.split('-')[0]+'\/'+x.split('-')[1]+'.jpg')\ntrain['annotations'] = train['annotations'].apply(lambda x: list(eval(x)))\ntrain['num_boxes'] = train['annotations'].apply(lambda x: len(x))\nimage_df = train[train['num_boxes'] != 0]\nimage_df.reset_index(drop=True, inplace=True)\nimage_df['Index'] = image_df.index\nimage_df['GAN_path'] = image_df['Index'].apply(lambda x: GEN_PATH + f'{x}.png')\n\ndel train","a55648e9":"skf = StratifiedKFold(n_splits=5, shuffle=True)\nfor fold, (train_idx, val_idx) in enumerate(skf.split(image_df, image_df[\"video_id\"])):\n    image_df.loc[val_idx, 'fold'] = fold","52eed0ec":"# These are slight redefinitions of torch.transformation classes\n# The difference is that they handle the target and the mask\n# Copied from Abishek\nclass Compose(object):\n    def __init__(self, transforms):\n        self.transforms = transforms\n\n    def __call__(self, image, target):\n        for t in self.transforms:\n            image, target = t(image, target)\n        return image, target\n\nclass VerticalFlip(object):\n    def __init__(self, prob):\n        self.prob = prob\n\n    def __call__(self, image, target):\n        if random.random() < self.prob:\n            height, width = image.shape[-2:]\n            image = image.flip(-2)\n            bbox = target[\"boxes\"]\n            bbox[:, [1, 3]] = height - bbox[:, [3, 1]]\n            target[\"boxes\"] = bbox\n        return image, target\n\nclass HorizontalFlip(object):\n    def __init__(self, prob):\n        self.prob = prob\n\n    def __call__(self, image, target):\n        if random.random() < self.prob:\n            height, width = image.shape[-2:]\n            image = image.flip(-1)\n            bbox = target[\"boxes\"]\n            bbox[:, [0, 2]] = width - bbox[:, [2, 0]]\n            target[\"boxes\"] = bbox\n        return image, target\n\nclass Normalize(object):\n    def __call__(self, image, target):\n        image = F.normalize(image, RESNET_MEAN, RESNET_STD)\n        return image, target\n\nclass ToTensor(object):\n    def __call__(self, image, target):\n        image = F.to_tensor(image)\n        return image, target\n\nclass AdBright(object):\n    def __call__(self, image, target):\n        image = F.adjust_brightness(image, brightness_factor=1.4)\n        return image, target\n    \n\ndef get_transform(train):\n    transforms = [ToTensor()]\n    if NORMALIZE:\n        transforms.append(Normalize())\n    \n    # Data augmentation for train\n    if train: \n        transforms.append(HorizontalFlip(0.5))\n        transforms.append(VerticalFlip(0.5))\n        #transforms.append(AdBright())\n\n    return Compose(transforms)","cf977ec7":"class GBRDataset(Dataset):\n    def __init__(self, df, transforms=None, resize=None):\n        self.transforms = transforms\n        self.df = df\n        self.resize = resize\n        if self.resize is not None:\n            self.height = int(HEIGHT * resize)\n            self.width = int(WIDTH * resize)\n        else:\n            self.height = HEIGHT\n            self.width = WIDTH\n        \n        self.image_info = collections.defaultdict(dict)\n        for index, row in df.iterrows():\n            self.image_info[index] = {\n                    'image_id': row['image_id'],\n                    'image_path': row['image_path'],\n                    'annotations': row[\"annotations\"],\n                    'GAN_path': row[\"GAN_path\"]\n                    }\n    \n    def get_box(self, item):\n        ''' Get the bounding box of a given mask '''\n        xmin = item['x']\n        xmax = xmin + item['width']\n        ymin = item['y']\n        ymax = ymin + item['height']\n        return [xmin, ymin, xmax, ymax]\n    \n    def resize_boxes(self, boxes, resize):\n        xmin, ymin, xmax, ymax = boxes.unbind(1)\n        xmin = xmin * resize\n        xmax = xmax * resize\n        ymin = ymin * resize\n        ymax = ymax * resize\n        return torch.stack((xmin, ymin, xmax, ymax), dim=1)\n\n    def __getitem__(self, idx):\n        ''' Get the image and the target'''\n        if GEN:\n            img_path = self.image_info[idx][\"GAN_path\"]\n            img = cv2.imread(img_path)\n            img = img.astype(np.float32)\n        else:\n            img_path = self.image_info[idx][\"image_path\"]\n            img = cv2.imread(img_path)\n            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB).astype(np.float32)\n        img \/= 255.0\n        \n        info = self.image_info[idx]\n\n        n_objects = len(info['annotations'])\n        boxes = [self.get_box(item) for item in info['annotations']]\n        boxes = torch.as_tensor(boxes, dtype=torch.float32)\n        \n        if self.resize is not None:\n            img = cv2.resize(img, (self.width, self.height), interpolation = cv2.INTER_LINEAR)\n            boxes = self.resize_boxes(boxes, self.resize)\n\n        # dummy labels\n        labels = [1 for _ in range(n_objects)]\n        labels = torch.as_tensor(labels, dtype=torch.int64)\n        \n        image_id = torch.tensor([idx])\n        \n        area = (boxes[:, 3] - boxes[:, 1]) * (boxes[:, 2] - boxes[:, 0])\n        area = torch.as_tensor(area, dtype=torch.float32)\n        \n        iscrowd = torch.zeros((n_objects,), dtype=torch.int64)\n\n        # This is the required target for the Faster R-CNN\n        target = {\n            'boxes': boxes,\n            'labels': labels,\n            'image_id': image_id,\n            'area': area,\n            'iscrowd': iscrowd\n        }\n\n        if self.transforms is not None:\n            img, target = self.transforms(img, target)\n\n        return img, target\n\n    def __len__(self):\n        return len(self.image_info)","e0fc538b":"def get_box(item):\n    xmin = item['x']\n    xmax = xmin + item['width']\n    ymin = item['y']\n    ymax = ymin + item['height']\n    return [xmin, ymin, xmax, ymax]\n\ndef plot_from_df(idx):\n    img_path = image_df.iloc[idx][\"image_path\"]\n    img = cv2.imread(img_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    boxes = [get_box(item) for item in image_df.iloc[idx]['annotations']]\n    for i in boxes:\n        cv2.rectangle(img, (int(i[0]),int(i[1])), (int(i[2]),int(i[3])), (255,0,0), thickness=2)\n    plt.figure(figsize=(10,10))\n    plt.imshow(img)\n    \ndef gen_from_df(idx):\n    img_path = image_df.iloc[idx][\"GAN_path\"]\n    img = cv2.imread(img_path)\n    boxes = [get_box(item) for item in image_df.iloc[idx]['annotations']]\n    for i in boxes:\n        cv2.rectangle(img, (int(i[0]),int(i[1])), (int(i[2]),int(i[3])), (255,0,0), thickness=2)\n    plt.figure(figsize=(10,10))\n    plt.imshow(img)","1ece021e":"t = GBRDataset(image_df[image_df['fold'] != 2].reset_index(drop=True), resize=None, transforms=get_transform(train=False))","89f139f7":"plot_from_df(2500)\ngen_from_df(2500)","8efa81f0":"del t\ngc.collect()","6695a4fe":"def collate_fn(batch):\n        return tuple(zip(*batch))\n\ndef prepare_loaders(fold):   \n    train_df = image_df[image_df.fold != fold].reset_index(drop=True)\n    valid_df = image_df[image_df.fold == fold].reset_index(drop=True)\n    \n    if DEBUG:\n        train_dataset = GBRDataset(train_df[:40], resize=RESIZE, transforms=get_transform(train=True))\n        valid_dataset = GBRDataset(valid_df[:40], resize=RESIZE, transforms=get_transform(train=True))\n    else:\n        train_dataset = GBRDataset(train_df, resize=RESIZE, transforms=get_transform(train=True))\n        valid_dataset = GBRDataset(valid_df, resize=RESIZE, transforms=get_transform(train=True))\n\n    train_loader = DataLoader(train_dataset, batch_size=BATCH_SIZE, \n                              num_workers=2, shuffle=False, collate_fn=collate_fn)\n    valid_loader = DataLoader(valid_dataset, batch_size=BATCH_SIZE, \n                              num_workers=2, shuffle=False, collate_fn=collate_fn)\n    print(f'Train_df has {len(train_loader)} rows')\n    print(f'Valid_df has {len(valid_loader)} rows')\n    \n    return train_loader, valid_loader","b3cbf1d5":"!mkdir -p \/root\/.cache\/torch\/hub\/checkpoints\/\n!cp ..\/input\/fasterrcnn\/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth \/root\/.cache\/torch\/hub\/checkpoints\/fasterrcnn_resnet50_fpn_coco-258fb6c6.pth","059543fb":"def get_model():\n    \n    if NORMALIZE:\n        model =  torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True,\n                                                                   image_mean=RESNET_MEAN, \n                                                                   image_std=RESNET_STD)\n    else:\n        model =  torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)\n\n    # get the number of input features for the classifier\n    in_features = model.roi_heads.box_predictor.cls_score.in_features\n    # replace the pre-trained head with a new one\n    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, NUM_CLASSES)\n\n    return model\n\n\n# Get the Faster R-CNN model\n# The model does classification, bounding boxes and MASKs for individuals, all at the same time\n# We only care about MASKS\nmodel = get_model()\nmodel.to(DEVICE)","e9be34df":"params = [p for p in model.parameters() if p.requires_grad]\noptimizer = torch.optim.SGD(params, lr=LEARNING_RATE, weight_decay=WEIGHT_DECAY, momentum = MOMENTUM)\nlr_scheduler = torch.optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.85)","cfb9cbcb":"def train_one_epoch(model, optimizer, scheduler, dataloader, device, epoch):\n    model.train()\n    train_loss = []\n    \n    pbar = tqdm(enumerate(dataloader), total=len(dataloader), desc='Train ')\n    for step, (images, targets) in pbar:         \n        images = list(image.to(device) for image in images)\n        targets = [{k: v.to(DEVICE) for k, v in t.items()} for t in targets] \n        \n        loss_dict = model(images, targets)\n            \n        losses = sum(loss for loss in loss_dict.values())\n        train_loss.append(losses.item())\n        \n        optimizer.zero_grad() # zero the parameter gradients\n        losses.backward()\n        optimizer.step()\n\n    if USE_SCHEDULER:\n        scheduler.step()    \n        \n    mem = torch.cuda.memory_reserved() \/ 1E9 if torch.cuda.is_available() else 0\n    \n    torch.cuda.empty_cache()\n    gc.collect()\n    \n    return np.mean(train_loss)","760ca77b":"def valid_one_epoch(model, dataloader, device, epoch): \n    valid_loss = []\n    \n    pbar = tqdm(enumerate(dataloader), total=len(dataloader), desc='Valid ')\n    with torch.no_grad():\n        for step, (images, targets) in pbar:         \n            images = list(image.to(device) for image in images)\n            targets = [{k: v.to(DEVICE) for k, v in t.items()} for t in targets]\n            \n            loss_dict = model(images, targets)\n            losses = sum(loss for loss in loss_dict.values())\n            valid_loss.append(losses.item())\n        \n    mem = torch.cuda.memory_reserved() \/ 1E9 if torch.cuda.is_available() else 0\n        \n    torch.cuda.empty_cache()\n    gc.collect()\n    \n    return np.mean(valid_loss)","4d42426f":"def run_training(model, optimizer, scheduler, device, num_epochs):\n    \n    if torch.cuda.is_available():\n        print(\"cuda: {}\\n\".format(torch.cuda.get_device_name()))\n    \n    start = time.time()\n    history = {}\n    best_loss = np.inf\n    best_epoch = -1\n    \n    for epoch in range(1, num_epochs + 1): \n        gc.collect()\n        print(f'Epoch {epoch}\/{num_epochs}', end='')\n        \n        train_loss = train_one_epoch(model, optimizer, scheduler, \n                                                            dataloader=train_loader, device=DEVICE, epoch=epoch)\n        val_loss = valid_one_epoch(model, valid_loader, device=DEVICE, epoch=epoch)\n        \n        if len(history) == 0:\n            history['train_loss'], history['valid_loss'] = [train_loss], [val_loss]\n        else:\n            history['train_loss'].append(train_loss)\n            history['valid_loss'].append(val_loss)\n        \n        if val_loss <= best_loss:\n            best_loss = val_loss\n            best_epoch = epoch\n        \n        # deep copy the model\n        PATH = f\"best_epoch-{epoch:02d}.bin\"\n        print(PATH)\n        torch.save(model.state_dict(), PATH)\n        # Save a model file from the current directory\n        print(f\"Model Saved\")\n            \n    \n    end = time.time()\n    time_elapsed = end - start\n    print('Training complete in {:.0f}h {:.0f}m {:.0f}s'.format(\n        time_elapsed \/\/ 3600, (time_elapsed % 3600) \/\/ 60, (time_elapsed % 3600) % 60))\n    print(\"Best Score: {:.4f}\".format(best_loss))\n    print(\"Best Epoch: {:3d}\".format(best_epoch))\n    \n    return model, history","a3765ff8":"train_loader, valid_loader = prepare_loaders(fold = 4)\nmodel, history = run_training(model, optimizer, lr_scheduler,device=DEVICE, num_epochs=NUM_EPOCHS if not DEBUG else 10)\n","2d63628c":"plt.plot(history['train_loss'], color = 'b', label = 'train_loss')\nplt.plot(history['valid_loss'], color = 'r', label = 'valid_loss')\nplt.xlabel('epoch')\nplt.ylabel('loss')\nplt.legend()","77b2bba9":"history['valid_loss']","917ffb20":"# Model","74654672":"# Data preprocessing","6647c384":"# Loss plot (train vs valid)","036a191b":"# Import libraries","d7a25e0a":"# Configuration"}}