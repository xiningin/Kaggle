{"cell_type":{"92f11da1":"code","be6f2818":"code","bfd455c4":"code","7f4ea618":"markdown","896b0484":"markdown"},"source":{"92f11da1":"# IMPORT LIBRARIES\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.animation import ArtistAnimation\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.metrics import roc_auc_score\n# LOAD THE DATA\ntest = pd.read_csv('..\/input\/test.csv')\ntrain = pd.read_csv('..\/input\/train.csv')","be6f2818":"train2 = train.loc[train['wheezy-copper-turtle-magic'] == 1, :].reset_index(drop=True)\ntrain2.drop('id', axis=1, inplace=True)\ntarget2 = train2.target\ntrain2.drop('target', axis=1, inplace=True)\ncols = [c for c in train2.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]\ntrain2 = train2[cols].values\n# FIND NORMAL TO HYPERPLANE\nclf = LogisticRegression(solver='liblinear',penalty='l2',C=0.1,class_weight='balanced')\nclf.fit(train2, target2)\nu1 = clf.coef_[0]\nu1 = u1\/np.sqrt(u1.dot(u1))\n# CREATE RANDOM DIRECTION PERPENDICULAR TO U1\nu2 = np.random.normal(0,1,len(u1))\nu2 = u2 - u1.dot(u2)*u1\nu2 = u2\/np.sqrt(u2.dot(u2))\n\n# CREATE RANDOM DIRECTION PERPENDICULAR TO U1 AND U2\nu3 = np.random.normal(0,1,len(u1))\nu3 = u3 - u1.dot(u3)*u1 - u2.dot(u3)*u2\nu3 = u3\/np.sqrt(u3.dot(u3))\nidx0 = np.where(target2==0)\nidx1 = np.where(target2==1)\n# CREATE AN ANIMATION\nimages = []\nsteps = 60\nfig = plt.figure(figsize=(8,8))\nfor k in range(steps):\n    # CALCULATE NEW ANGLE OF ROTATION\n    angR = k*(2*np.pi\/steps)\n    angD = round(k*(360\/steps),0)\n    u4 = np.cos(angR)*u1 + np.sin(angR)*u2\n    u = np.concatenate([u4,u3]).reshape((2,len(u1)))  \n    # PROJECT TRAIN AND TEST ONTO U3,U4 PLANE\n    p = u.dot(train2.transpose())\n    # PLOT TRAIN DATA (KEEP CORRECT COLOR IN FRONT)\n    if angD<180:\n        plt.title('wheezy-copper-turtle-magic=1; all features')\n        img2 = plt.scatter(p[0,idx1],p[1,idx1],c='yellow')\n        img3 = plt.scatter(p[0,idx0],p[1,idx0],c='blue')\n    else:\n        plt.title('wheezy-copper-turtle-magic=1; all features')\n        img2 = plt.scatter(p[0,idx0],p[1,idx0],c='blue')\n        img3 = plt.scatter(p[0,idx1],p[1,idx1],c='yellow')\n    images.append([img2, img3])\n# SAVE MOVIE TO FILE\nani = ArtistAnimation(fig, images)\nani.save('all_features.gif', writer='imagemagick', fps=15)\nplt.close()\n# PROJECT TRAIN ONTO U2, U3 PLANE\nu = np.concatenate([u1,u2]).reshape((2,len(u1)))\np = u.dot(train2.transpose())\nplt.figure(figsize=(6,6))\nplt.title('wheezy-copper-turtle-magic=1; all features')\nplt.scatter(p[0,idx1],p[1,idx1],c='yellow', alpha=0.9)\nplt.scatter(p[0,idx0],p[1,idx0],c='blue', alpha=0.9)\nprint(f'ROC: {roc_auc_score(target2, clf.predict(train2))}')","bfd455c4":"train2 = train.loc[train['wheezy-copper-turtle-magic'] == 1, :].reset_index(drop=True)\ntrain2.drop('id', axis=1, inplace=True)\ntarget2 = train2.target\ntrain2.drop('target', axis=1, inplace=True)\ncols = [c for c in train2.columns if c not in ['id', 'target', 'wheezy-copper-turtle-magic']]\nsel = VarianceThreshold(threshold=1.5).fit(train2[cols])\ntrain2 = sel.transform(train2[cols])\n# FIND NORMAL TO HYPERPLANE\nclf = LogisticRegression(solver='liblinear',penalty='l2',C=0.1,class_weight='balanced')\nclf.fit(train2, target2)\nu1 = clf.coef_[0]\nu1 = u1\/np.sqrt(u1.dot(u1))\n# CREATE RANDOM DIRECTION PERPENDICULAR TO U1\nu2 = np.random.normal(0,1,len(u1))\nu2 = u2 - u1.dot(u2)*u1\nu2 = u2\/np.sqrt(u2.dot(u2))\n\n# CREATE RANDOM DIRECTION PERPENDICULAR TO U1 AND U2\nu3 = np.random.normal(0,1,len(u1))\nu3 = u3 - u1.dot(u3)*u1 - u2.dot(u3)*u2\nu3 = u3\/np.sqrt(u3.dot(u3))\nidx0 = np.where(target2==0)\nidx1 = np.where(target2==1)\n# CREATE AN ANIMATION\nimages = []\nsteps = 60\nfig = plt.figure(figsize=(8,8))\nfor k in range(steps):\n    # CALCULATE NEW ANGLE OF ROTATION\n    angR = k*(2*np.pi\/steps)\n    angD = round(k*(360\/steps),0)\n    u4 = np.cos(angR)*u1 + np.sin(angR)*u2\n    u = np.concatenate([u4,u3]).reshape((2,len(u1)))  \n    # PROJECT TRAIN AND TEST ONTO U3,U4 PLANE\n    p = u.dot(train2.transpose())\n    # PLOT TRAIN DATA (KEEP CORRECT COLOR IN FRONT)\n    if angD<180:\n        plt.title('wheezy-copper-turtle-magic=1; only useful features')\n        img2 = plt.scatter(p[0,idx1],p[1,idx1],c='yellow')\n        img3 = plt.scatter(p[0,idx0],p[1,idx0],c='blue')\n    else:\n        plt.title('wheezy-copper-turtle-magic=1; only useful features')\n        img2 = plt.scatter(p[0,idx0],p[1,idx0],c='blue')\n        img3 = plt.scatter(p[0,idx1],p[1,idx1],c='yellow')\n    images.append([img2, img3])\n# SAVE MOVIE TO FILE\nani = ArtistAnimation(fig, images)\nani.save('useful_features.gif', writer='imagemagick', fps=15)\nplt.close()\n# PROJECT TRAIN ONTO U2, U3 PLANE\nu = np.concatenate([u1,u2]).reshape((2,len(u1)))\np = u.dot(train2.transpose())\nplt.figure(figsize=(6,6))\nplt.title('wheezy-copper-turtle-magic=1; only useful features')\nplt.scatter(p[0,idx1],p[1,idx1],c='yellow', alpha=0.9)\nplt.scatter(p[0,idx0],p[1,idx0],c='blue', alpha=0.9)\nprint(f'ROC: {roc_auc_score(target2, clf.predict(train2))}')","7f4ea618":"Now compare it to when we use only useful features","896b0484":"[This](https:\/\/www.kaggle.com\/c\/instant-gratification\/discussion\/93169#latest-536109) beautiful animation from Chris shows after filtering `wheezy-copper-turtle-magic` data could be splitted into useful and useless features based on features variances. However, this kernel shows, using all features could result in a better hyperplane as opposed to using useful features only. The hyperplane, when using all features, cuts through the data so perfectly that I thought (actually still think) there is a leakage.\n\nAnimations could be found in output section."}}