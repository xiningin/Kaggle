{"cell_type":{"e3a6b5ad":"code","83c1b4e2":"code","1bab8f13":"code","28d7dd3c":"code","7aa1aab9":"code","9a0c8819":"code","efa2cc25":"code","4afd6eaf":"code","eb670ef9":"code","261521d7":"code","85e93477":"code","df76a6fb":"code","7a66b3ea":"code","25fec4a4":"code","8bb2c80c":"code","f2011a1b":"code","759c63c1":"code","b4f917a0":"code","c20d0c63":"markdown","6ef28d7c":"markdown","331ce1d8":"markdown","c82770ec":"markdown","25034e94":"markdown"},"source":{"e3a6b5ad":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2 ## Open CV\n\nimport matplotlib\nfrom matplotlib import pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","83c1b4e2":"root_dir = \"..\/input\/yellow-and-read-autumn-color-grapeleafs\/data\/yellow\/\"\ncv_root_dir ='..\/input\/yellow-and-read-autumn-color-grapeleafs\/data\/red\/'\nroot_dir,cv_root_dir","1bab8f13":"#Return BGR to RGB - https:\/\/www.pyimagesearch.com\/2014\/11\/03\/display-matplotlib-rgb-image\/\ndef convert_BGR_to_RGB(image):\n    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\ndef plot_BGR_to_RGB(image,plt):\n    plt.imshow(convert_BGR_to_RGB(image))","28d7dd3c":"image_org = cv2.imread(root_dir + \"805b1658-6bad-11eb-9bcd-001583eb31c8.png\")\nprint(f\"Height: {image_org.shape[0]}\")\nprint(f\"Width: {image_org.shape[1]}\")\nprint(f\"Channels:  {image_org.shape[2]}\")#RGB Channel\nprint(f\"Image shape:{image_org.shape}\") #it is generally the matrix denoted with #rows * #columns with channel\nplot_BGR_to_RGB(image_org,plt)\nimage = image_org.copy()","7aa1aab9":"#Write the image back to disk\n\ncv2.imwrite(\"805b1658-6bad-11eb-9bcd-001583eb31c8.png\",image)","9a0c8819":"#Reading the pixel values from image by using the matrix notation of the rows and columns which is nothing but the height and width of the image, matrix is indexed from 0.\n\n(r,g,b) = image[0,0]\n(r,g,b)","efa2cc25":"image[15,15] = (255,0,0) #BGR for Open CV\n(r,g,b)= image[15,15]\n(r,g,b)","4afd6eaf":"plot_BGR_to_RGB(image_org,plt)# you can a red dot in the image","eb670ef9":"#Slicing the image. Read the portion of the image and update with different colors \n\nfig, ax = plt.subplots(1,2,figsize=(15,5))\nplot_BGR_to_RGB(image_org,ax[0])\nax[0].imshow(image_org)#original\nax[0].set_title(\"original\")\nimage[0:25,0:25] = (255,0,0)#updated the portion of the image with Red color\nax[1].imshow(image)\nplot_BGR_to_RGB(image_org,ax[0])","261521d7":"\nfrom PIL import Image\nim = Image.open(\"..\/input\/yellow-and-read-autumn-color-grapeleafs\/data\/red\/6b36a4bc-6bad-11eb-a151-001583eb31c8.png\")\n\nplt.imshow(im)\ndisplay(plt.show())","85e93477":"#Split method in open cv provides in BGR format, so we read as B,G,R Tuple\n\n(B,G,R) = cv2.split(image)\n\n\n\nfig,ax = plt.subplots(2,2, figsize=(10,10))\n\nax[0,0].imshow(convert_BGR_to_RGB(cv2.merge([B,G,R])))\nax[0,0].set_title(\"Got Original from Merged\")\n\nax[0,1].imshow(convert_BGR_to_RGB(B))\nax[0,1].set_title(\"Blue Channel\")\n\nax[1,0].imshow(convert_BGR_to_RGB(G))\nax[1,0].set_title(\"Green Channel\")\n\nax[1,1].imshow(convert_BGR_to_RGB(R))\nax[1,1].set_title(\"Red Channel\")","df76a6fb":"zeros = np.zeros(image.shape[:2], dtype=\"uint8\")\nred_channel = convert_BGR_to_RGB(cv2.merge([zeros,zeros, R]))\ngreen_channel = convert_BGR_to_RGB(cv2.merge([zeros,G, zeros]))\nblue_channel = convert_BGR_to_RGB(cv2.merge([B,zeros, zeros]))\n\nfig,ax = plt.subplots(2,2, figsize=(10,10))\n\nax[0,0].imshow(convert_BGR_to_RGB(cv2.merge([B,G,R])))\nax[0,0].set_title(\"Got Original from Merged\")\n\nax[0,1].imshow(blue_channel)\nax[0,1].set_title(\"Blue Channel\")\n\nax[1,0].imshow(green_channel)\nax[1,0].set_title(\"Green Channel\")\n\nax[1,1].imshow(red_channel)\nax[1,1].set_title(\"Red Channel\")","7a66b3ea":"#Gray Scale \n\ngray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\nhsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)\nlab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)\n\nfig,ax = plt.subplots(2,2, figsize=(10,10))\n\nax[0,0].imshow(convert_BGR_to_RGB(image))\nax[0,0].set_title(\"Original\")\n\nax[0,1].imshow(convert_BGR_to_RGB(gray))\nax[0,1].set_title(\"Gray\")\n\nax[1,0].imshow(convert_BGR_to_RGB(hsv))\nax[1,0].set_title(\"HSV\")\n\nax[1,1].imshow(convert_BGR_to_RGB(lab))\nax[1,1].set_title(\"L*a*b*\")","25fec4a4":"#Gray Scale Histogram\n\ngray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n#arguments\n#images list - pass in the images\n#channels list - specify the channels for which the hist need to be calculated\n#mask - calc hist only for mask region\n#histsize - size or number of bins\n#range - possible pixel value - [0,256] for RGB and different values for HSV\nhist = cv2.calcHist([gray_image],[0],None,[256],[0,256]) \n\nfig,ax = plt.subplots(1,2 , figsize=(15,5))\nax[0].imshow(convert_BGR_to_RGB(image))\nax[0].set_title(\"Gray Scale Image\")\n\nax[1].plot(hist)\nax[1].set_title(\"Histogram\")\nax[1].set_xlabel(\"Bins\")\nax[1].set_ylabel(\"Number of pixels\")\nax[1].set_xlim([0,256])","8bb2c80c":"#Color Histogram\n\nchannels = cv2.split(image)\ncolors = (\"b\" , \"g\" ,\"r\")\n\nfig,ax = plt.subplots(1,2 , figsize=(15,5))\nax[0].imshow(convert_BGR_to_RGB(image))\nax[0].set_title(\"Gray Scale Image\")\n\nax[1].set_title(\"Histogram\")\nax[1].set_xlabel(\"Bins\")\nax[1].set_ylabel(\"Number of pixels\")\nax[1].set_xlim([0,256])\nfor (chan, col) in zip(channels, colors):\n    hist = cv2.calcHist([chan],[0], None,[256],[0,256])\n    ax[1].plot(hist,color = col)","f2011a1b":"#2D & 3D histogram\n\nfig,ax = plt.subplots(1,3, figsize=(20,5))\n\nhist_GB = cv2.calcHist([channels[1], channels[0]],[0,1],None, [32,32],[0,256,0,256])\np = ax[0].imshow(hist_GB)\nax[0].set_title(\"2D Color Histograms of G and B channel\")\nfig.colorbar(p, ax=ax[0])\n\n\nhist_GR = cv2.calcHist([channels[1], channels[2]],[0,1],None, [32,32],[0,256,0,256])\np = ax[1].imshow(hist_GR)\nax[1].set_title(\"2D Color Histograms of G and R channel\")\nfig.colorbar(p, ax=ax[1])\n\nhist_BR = cv2.calcHist([channels[0], channels[2]],[0,1],None, [32,32],[0,256,0,256])\np = ax[2].imshow(hist_BR)\nax[2].set_title(\"2D Color Histograms of B and R channel\")\nfig.colorbar(p, ax=ax[2])","759c63c1":"#Equalization\nimage_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\neqHist =cv2.equalizeHist(image_gray)\n\nfig,ax = plt.subplots(1,2,figsize=(10,5))\n\nax[0].imshow(convert_BGR_to_RGB(image_gray))\nax[0].set_title(\"Gray scale\")\n\nax[1].imshow(convert_BGR_to_RGB(eqHist))\nax[1].set_title(\"Equalized Hist - Gray scale\")","b4f917a0":"#Code by Olga Belitskaya https:\/\/www.kaggle.com\/olgabelitskaya\/sequential-data\/comments\nfrom IPython.display import display,HTML\nc1,c2,f1,f2,fs1,fs2=\\\n'#eb3434','#eb3446','Akronim','Smokum',30,15\ndef dhtml(string,fontcolor=c1,font=f1,fontsize=fs1):\n    display(HTML(\"\"\"<style>\n    @import 'https:\/\/fonts.googleapis.com\/css?family=\"\"\"\\\n    +font+\"\"\"&effect=3d-float';<\/style>\n    <h1 class='font-effect-3d-float' style='font-family:\"\"\"+\\\n    font+\"\"\"; color:\"\"\"+fontcolor+\"\"\"; font-size:\"\"\"+\\\n    str(fontsize)+\"\"\"px;'>%s<\/h1>\"\"\"%string))\n    \n    \ndhtml('Sei geduldig, @mpwolke was hier.' )","c20d0c63":"#Vine leaf by INFOrmAtIc Teens https:\/\/www.youtube.com\/watch?v=5BT10fNQwy4\n\nhttps:\/\/github.com\/MareSeestern\/VineLeafDisease","6ef28d7c":"#Bundeswettbewerb - K\u00fcnstliche Intelligenz\n\nDie meisten KI-Bibliotheken wurden prim\u00e4r f\u00fcr Python entwickelt. Aufgrund der hohen Komplexit\u00e4t des maschinellen Lernens macht es Sinn, eine Programmiersprache zu w\u00e4hlen, welche sehr \u00fcbersichtlich ist, damit man sich prim\u00e4r auf das Verstehen der KI, anstatt auf das Verstehen des Codes konzentrieren kann.\n\nhttps:\/\/bw-ki.de\/grundlagen-in-python\/","331ce1d8":"<iframe width=\"727\" height=\"409\" src=\"https:\/\/www.youtube.com\/embed\/5BT10fNQwy4\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen><\/iframe>","c82770ec":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn:ANd9GcR9oyr-4-d1Qwrl-nTwypOOfrk5WvkBzQx_2A&usqp=CAU)pflanzmich.de","25034e94":"#Codes by Lokeshkumar Codes by Lokeshkumar https:\/\/www.kaggle.com\/lokeshkumarn\/open-cv-tutorials"}}