{"cell_type":{"f0efbf5c":"code","5645d60d":"code","9ab959f5":"code","abdf46bb":"code","4bbc80cb":"code","c98c7b85":"code","bccc37d1":"code","ab0820fc":"markdown","6d504ef2":"markdown","45e9f719":"markdown","17bf3df9":"markdown","097945c9":"markdown","b470271a":"markdown","4e46b68c":"markdown","14557ca3":"markdown","647379f2":"markdown"},"source":{"f0efbf5c":"# Import libraries to be used\nimport pandas as pd\nimport numpy as np\nimport re\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec","5645d60d":"filepath = input(\"Please Enter the Whatsapp chat export path below \\n*  eg. E:\\IIIT-B\\Projects\\WhatsappGroupChatAnalyses\\WhatsappGroupChatExport.txt \\n\")\ndf = pd.read_csv(filepath, sep = \"delimiter\",skip_blank_lines = True, header = None)","9ab959f5":"# extract date values and return as list of string\ndef getdate(x):\n    res = re.search(\"\\d\\d\/\\d\\d\/\\d\\d\",x)\n    if res != None:\n        return res.group()\n    else:\n        return \"\"\n#datepattern = re.compile(\"..\/..\/..\")\ndf[\"Date\"] = list(map(lambda x : getdate(x), df.iloc[:,0]))\n\n\n## Merge multiline chat data\n## Need to optimize this block\nfor i in range(0,len(df)):\n    if df[\"Date\"][i] == \"\":\n        c=i-1\n        for j in range(i,len(df)):\n            if df[\"Date\"][j] == \"\":\n                df.iloc[c,0] = \" \".join([df.iloc[c,0],df.iloc[j,0]])\n                    \n            else:\n                i=j-1\n                break\n    else:\n        df.iloc[i,0] = df.iloc[i,0]\n        \n        \n## Remove rows where date is empty\ndf.drop(np.where(df.iloc[:,1]==\"\")[0],inplace =True)\n## Reindex the dataframe\ndf.index = range(0,len(df))\n\n\n##Remove date from original text data using substitute function of regular expression\ndf.iloc[:,0] = list(map(lambda x : re.sub(\"..\/..\/..\",\"\", x)[2:],df.iloc[:,0]))\n\n\n\n## Extract Day Month and Year from Date \ndf[\"Day\"] = list(map(lambda d : d.split(\"\/\")[0], df.Date))\ndf[\"Months\"] = list(map(lambda d : d.split(\"\/\")[1], df.Date))\ndf[\"Year\"] = list(map(lambda d : d.split(\"\/\")[2], df.Date))\n\n\n## extract time stamp from chat data and store in new column Time and Am\ndef gettime(x):\n    res = re.search(\".*\\d:\\d\\d\\s[a|p]m\", x)\n    if res != None:\n        return res.group()\n    else:\n        return \"\"\nTimestamp = list(map(lambda x : gettime(x),df.iloc[:,0])) \n\ndf[\"Time\"] = list(map(lambda t : t.split(\" \")[0],Timestamp))\ndf[\"Hour\"] = list(map(int,list(map(lambda t : t.split(\":\")[0],df[\"Time\"]))))\ndf[\"Minute\"] = list(map(int,list(map(lambda t : t.split(\":\")[1],df[\"Time\"]))))\ndf[\"AmPm\"] = list(map(lambda t : t.split(\" \")[1],Timestamp))\n\n\n## Remove Timestamps from chat\ndf.iloc[:,0] = list(map(lambda x : re.sub(\".*\\d:\\d\\d\\s[a|p]m\",\"\", x)[2:],df.iloc[:,0]))\n\n\n## get sender\ndef getsender(x):\n    res = re.search(re.compile(\".*?: \"),x)\n    if res !=None:\n        return res.group()[1:-2]\n    else:\n        return \"\"\n    \n    \ndf[\"sender\"] =list(map(getsender,df.iloc[:,0]))\n\n\n## Drop rows of activity messages - member added\/removed\/left\/group name change\/icon change\/others\ndf.drop((np.where(df[\"sender\"]==\"\")[0]),inplace = True)\n## Reindex the dataframe\ndf.index = range(0,len(df))\n\n\n## extract final message from chat data\ndef getmessage(x):\n    res = re.search(\": .*\",x)\n    if res != None:\n        return res.group()[2:]\n    else:\n        return None\n\ndf[\"Message\"] = list(map(getmessage,df.iloc[:,0]))\n\n\n## Drop column 0\ndf = df.drop(0,axis =1)","abdf46bb":"df.head()","4bbc80cb":"## Preparing data for visualisation\n\n## Find unique members in group\ngroup_members = list(set(df[\"sender\"]))\n\n## Find count of messages shared by each member\nn_message = list(map(lambda x : len(np.where(df[\"sender\"]==x)[0]),group_members)) \n\n## Create a dataframe to store above values\nactivity_data = pd.DataFrame({\"sender\": group_members,\"n_count\":n_message})\n## Sort data for convenience and rearrange index\nactivity_data = activity_data.sort_values(by=[\"n_count\"], ascending=False)\nactivity_data.index = range(0,len(activity_data))\n\n## creating groups of data by time meridian\ntimemeridian = df.groupby(by = \"AmPm\")\n\namhours = timemeridian.get_group(\"am\")\npmhours = timemeridian.get_group(\"pm\")\n\n## getting hourly activity counts\namhourcounts = amhours.Hour.value_counts().sort_index()\npmhourcounts = pmhours.Hour.value_counts().sort_index()","c98c7b85":"## Most active members in group\n\nX = activity_data[\"sender\"][:10]\nY = activity_data.n_count[:10]\n\nplt.figure(figsize=[10,10])\n\nplt.title(\"Top 10 Active Members\", size = 16)\n\nplt.bar(x = X, height= Y, color = \"seagreen\")\nplt.xticks(rotation = 90, size = 12)\nplt.yticks(size = 12)\n\nfor i in range(0,10):\n    plt.annotate(s = Y[i], xy = (i-0.25,Y[i]+5), size = 12)\n\nplt.show()\n","bccc37d1":"fig = plt.figure(figsize=[20,10])\nmpl.rcParams['font.size'] = 14.0\n\nfig.suptitle(\"Activity wrt Time Meridian\", size = 16)\n\ngs = GridSpec(2,3) # 2 rows and 3 columns\nax1 = fig.add_subplot(gs[0,0]) # first row, first col\nax2 = fig.add_subplot(gs[0,1]) # first row, second col\nax3 = fig.add_subplot(gs[1,0]) # second row, first col\nax4 = fig.add_subplot(gs[1,1]) # second row, second col\nax5 = fig.add_subplot(gs[:,2]) # all row, third col\n\n# Pie plot for messages shared in AM time meridian\nax1.pie(amhourcounts.values, labels = amhourcounts.index)\nax1.set_title(\"AM\")\n# Bar plot for messages shared in AM time meridian\nax2.bar(amhourcounts.index,amhourcounts.values)\n\n# Pie plot for messages shared in PM time meridian\nax3.pie(pmhourcounts.values, labels = pmhourcounts.index)\nax3.set_title(\"PM\")\n# Bar plot for messages shared in PM time meridian\nax4.bar(pmhourcounts.index,pmhourcounts.values)\n\n# Bar plot showing AM vs PM\nax5.bar([\"AM\",\"PM\"], [len(amhours),len(pmhours)])\nax5.annotate(s = str(round(100*len(amhours)\/(len(amhours)+len(pmhours)))) + \"%\", xy = [0,len(amhours)\/2], color = \"white\", size = 14, horizontalalignment = \"center\")\nax5.annotate(s = str(round(100*len(pmhours)\/(len(amhours)+len(pmhours)))) + \"%\", xy = [1,len(pmhours)\/2], color = \"white\", size = 14, horizontalalignment = \"center\")\n\n\nplt.show()","ab0820fc":"## 1. Data Sourcing","6d504ef2":"### 1.2. Load Whatsapp Group Chat Data","45e9f719":"### 3.1 Top Active Members","17bf3df9":"# Whatsapp Group Chat Data Analysis","097945c9":"### 3.2 Activity Throughout Day","b470271a":"### 1.1. Import Libraries","4e46b68c":"**Purpose of project**\n* Find most active users in the group\n* Find time when most users are active\n\n**Scope**\n* Sentiment Analysis on individual member\n* Sentiment Analysis on Over-all group chat \n\n**Assumptions**\n* Group has more than 10 active members\n* You know how to export whatsapp group chat and enter file path when prompted in code\n\n**How To Use this Notebook**\n* Steps to follow:\n    * Export Whatsapp group chat as txt\n    * Make a copy of this notebook\n    * You will be prompted to enter file path in *1.2. Load Whatsapp Group Chat Data*\n    * Enter the path of your chat export\n\n**This workbook is interactive. \nYou will be prompted to give input file path of your Whatsapp chat export**","14557ca3":"## 2. Data Preperation","647379f2":"## 3. Data Exploration"}}