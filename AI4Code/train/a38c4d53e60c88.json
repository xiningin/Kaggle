{"cell_type":{"3d205bfc":"code","e2478acb":"code","49e695a0":"code","0533704b":"code","2b4478b8":"code","d4bd838d":"code","166b9a6f":"code","ec38e007":"markdown","ab8ed049":"markdown","22d20a48":"markdown","2ca61235":"markdown","e473df11":"markdown","fc2b8b5f":"markdown"},"source":{"3d205bfc":"import multiprocessing as mp\nimport pandas as pd\nimport numpy as np\nimport cv2\nimport tqdm\nimport multiprocessing as mp\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","e2478acb":"directory = \"..\/input\/test_preprocessed\/\"\nif not os.path.exists(directory):\n    os.makedirs(directory)\n    \ndf = pd.read_csv('..\/input\/aptos2019-blindness-detection\/sample_submission.csv')\nDATA_ROOT = '..\/input\/aptos2019-blindness-detection\/test_images\/'\nOUTPUT_DIR = directory\nSIZE = 224","49e695a0":"def crop_image_from_gray(img,tol=7):\n    # Taken from https:\/\/www.kaggle.com\/ratthachat\/aptos-updatedv14-preprocessing-ben-s-cropping\n    if img.ndim ==2:\n        mask = img>tol\n        return img[np.ix_(mask.any(1),mask.any(0))]\n    elif img.ndim==3:\n        gray_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)\n        mask = gray_img>tol\n        \n        check_shape = img[:,:,0][np.ix_(mask.any(1),mask.any(0))].shape[0]\n        if (check_shape == 0): # image is too dark so that we crop out everything,\n            return img # return original image\n        else:\n            img1=img[:,:,0][np.ix_(mask.any(1),mask.any(0))]\n            img2=img[:,:,1][np.ix_(mask.any(1),mask.any(0))]\n            img3=img[:,:,2][np.ix_(mask.any(1),mask.any(0))]\n    #         print(img1.shape,img2.shape,img3.shape)\n            img = np.stack([img1,img2,img3],axis=-1)\n    #         print(img.shape)\n        return img\n\ndef circle_crop(img):  \n    # Taken from  https:\/\/www.kaggle.com\/taindow\/pre-processing-train-and-test-images\n    \"\"\"\n    Create circular crop around image centre    \n    \"\"\"    \n    \n    img = crop_image_from_gray(img)    \n    \n    height, width, depth = img.shape    \n    \n    x = int(width\/2)\n    y = int(height\/2)\n    r = np.amin((x,y))\n    \n    circle_img = np.zeros((height, width), np.uint8)\n    cv2.circle(circle_img, (x,y), int(r), 1, thickness=-1)\n    img = cv2.bitwise_and(img, img, mask=circle_img)\n    img = crop_image_from_gray(img)\n    \n    return img \n\ndef preprocess_image(df, run_root=DATA_ROOT, out_root=OUTPUT_DIR, size=SIZE):\n    df = df.reset_index()\n    for i in tqdm.tqdm(range(df.shape[0])):\n        item = df.iloc[i]\n        path = run_root+item.id_code+'.png'\n        img = cv2.imread(path)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        img = circle_crop(img)\n        img = cv2.resize(img, (SIZE, SIZE))\n        img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)\n        cv2.imwrite(OUTPUT_DIR + item.id_code + '.png',img) ","0533704b":"n_cpu = mp.cpu_count()\npool = mp.Pool(n_cpu)\nn_cnt = df.shape[0] \/\/ n_cpu\ndfs = [df.iloc[n_cnt*i:n_cnt*(i+1)] for i in range(n_cpu)]\ndfs[-1] = df.iloc[n_cnt*(n_cpu-1):] \nres = pool.map(preprocess_image, [x_df for x_df in dfs])\npool.close()","2b4478b8":"fig, axes = plt.subplots(1, 2)\nimg_raw = cv2.imread(DATA_ROOT + df.iloc[0].id_code + '.png')\nimg_raw = cv2.cvtColor(img_raw, cv2.COLOR_BGR2RGB)\n\nimg = cv2.imread(OUTPUT_DIR + df.iloc[0].id_code + '.png', cv2.COLOR_BGR2RGB)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\naxes[0].imshow(img_raw)\naxes[1].imshow(img)\nprint(img_raw.shape, img.shape)","d4bd838d":"if os.path.exists(directory):\n    !rm -r '..\/input\/test_preprocessed'","166b9a6f":"print(os.listdir(\"..\/input\"))","ec38e007":"## Load necessary packages","ab8ed049":"## Preprocess image","22d20a48":"## Compare raw and processed images","2ca61235":"## Remove the directory at the end","e473df11":"## Preprocess image parallelly","fc2b8b5f":"## Build directory"}}