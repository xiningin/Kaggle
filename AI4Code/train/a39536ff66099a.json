{"cell_type":{"a4c573ab":"code","21539b52":"code","6a82983c":"code","6387e800":"code","0c6ff98c":"code","cf1746e1":"code","e0ca23ca":"code","875b7e36":"code","0d7c1eb4":"code","2424caf6":"code","69af7d64":"code","c42a9956":"code","39146625":"code","4531c6c2":"code","3520c183":"code","17ea4715":"code","4f588d53":"code","5b4edb5a":"code","8e485023":"code","a3ebd36d":"code","4b0b174c":"markdown","2069c20d":"markdown","01cf5f99":"markdown","ab3dd69a":"markdown","fe67d675":"markdown","247727ee":"markdown","e54d23d9":"markdown","b59782c2":"markdown","d1641bf2":"markdown","2921cd54":"markdown","61b8b2a0":"markdown","d772cd9b":"markdown","ff0ca3d4":"markdown","5b3c5655":"markdown","7360b49d":"markdown","70f7fee8":"markdown","60383c30":"markdown","28e5f395":"markdown"},"source":{"a4c573ab":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","21539b52":"import datetime\nimport seaborn as sns\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import RidgeCV\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split","6a82983c":"training = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/train.csv', low_memory=False)\ntesting = pd.read_csv('\/kaggle\/input\/cap-4611-2021-fall-assignment-1\/test.csv', low_memory=False)","6387e800":"print(print(pd.isna(training).sum()))\nprint()\nprint(training.head())\nprint()","0c6ff98c":"training['Week'] = [datetime.date(int(i[:4]), int(i[5:7]), int(i[8:])).isocalendar()[1] for i in training['End Date']]\ntesting['Week'] = [datetime.date(int(i[:4]), int(i[5:7]), int(i[8:])).isocalendar()[1] for i in testing['End Date']]","cf1746e1":"training = training.dropna(subset = ['COVID-19 Deaths', 'Total Deaths'])\ntraining['MMWR Week'] = training['MMWR Week'].fillna(training.Week)","e0ca23ca":"quantile = 0.99\nupperTD = training['Total Deaths'].quantile(quantile)\nupperCD = training['COVID-19 Deaths'].quantile(quantile)\nprint(f'upper {quantile} for Total Deaths: {upperTD}')\nprint(f'upper {quantile} for COVID-19 Deaths: {upperCD}')\nprint('max Total Deaths: ', max(training['Total Deaths']))\nprint('max COVID-19 Deaths: ', max(training['COVID-19 Deaths']))\nsns.boxplot(x=training['COVID-19 Deaths'])\nplt.show()\nsns.boxplot(x=training['Total Deaths'])\nplt.show()\nsns.boxplot(x=\"Week\", y=\"COVID-19 Deaths\", data=training)\nplt.title('Covid-19 deaths per week')\nplt.xticks(rotation=90)\nplt.show()\nsns.lineplot(x=\"Age Group\", y=\"COVID-19 Deaths\", data=training)\nplt.title('Covid-19 deaths per Age Group')\nplt.xticks(rotation=45)\nplt.show()\nsns.lineplot(x=\"Race and Hispanic Origin Group\", y=\"COVID-19 Deaths\", data=training)\nplt.title('Covid-19 deaths per Race and Hispanic Origin Group')\nplt.xticks(rotation=90)\nplt.show()","875b7e36":"training = training[training['COVID-19 Deaths'] < upperCD]\ntraining = training[training['Total Deaths'] < upperTD]\ntraining = training[training['Week'] < 53]\nprint('num rows left: ', len(training))","0d7c1eb4":"quantile = 0.99\nupperTD = training['Total Deaths'].quantile(quantile)\nprint(f'upper {quantile} for Total Deaths: {upperTD}')\nupperCD = training['COVID-19 Deaths'].quantile(quantile)\nprint(f'upper {quantile} for COVID-19 Deaths: {upperCD}')\nprint('max Total Deaths: ', max(training['Total Deaths']))\nprint('max COVID-19 Deaths: ', max(training['COVID-19 Deaths']))\nsns.boxplot(x=training['COVID-19 Deaths'])\nplt.show()\nsns.boxplot(x=training['Total Deaths'])\nplt.show()\nsns.boxplot(x=\"Week\", y=\"COVID-19 Deaths\", data=training)\nplt.title('Covid-19 deaths per week')\nplt.show()\nsns.lineplot(x=\"Age Group\", y=\"COVID-19 Deaths\", data=training)\nplt.title('Covid-19 deaths per Age Group')\nplt.xticks(rotation=45)\nplt.show()\nsns.lineplot(x=\"Race and Hispanic Origin Group\", y=\"COVID-19 Deaths\", data=training)\nplt.title('Covid-19 deaths per Race and Hispanic Origin Group')\nplt.xticks(rotation=90)\nplt.show()","2424caf6":"columns = ['HHS Region', 'Week', 'Race and Hispanic Origin Group', 'Age Group', 'Start Date', 'Total Deaths','MMWR Week']\ncategories = ['HHS Region', 'Race and Hispanic Origin Group', 'Age Group', 'Start Date']\n\nX = training[columns]\nX_submission = testing[columns]\nfor i in categories:\n    s = pd.Series(X[i])\n    s = s.astype('category').cat.codes\n    X.loc[:,i] = s\nfor i in categories:\n    s = pd.Series(X_submission[i])\n    s = s.astype('category').cat.codes\n    X_submission.loc[:,i] = s\ny = training['COVID-19 Deaths']\nX.groupby('Start Date').ngroup()\nprint(X)","69af7d64":"minimum_rmse, minimum_model = None, None\ntest_size = 0.23\nalpha = 13\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)\nmodels = {'linear': LinearRegression(), 'ridge': Ridge(alpha=alpha, solver='auto'), 'lasso': Lasso(alpha=alpha), 'elastic': ElasticNet(alpha=alpha), \\\n          'ridgeCV': RidgeCV(alphas=[1e-3, 1e-2, 1e-1, 1, 10, 20, 30], cv=6)}","c42a9956":"def distributeValidations(model, X, y):\n    num_runs = 50\n    scores = []\n    for i in range(num_runs):\n        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)\n        predictions = model.predict(X_test)\n        predictions = np.round(predictions, 0).astype('int')\n        stats = pd.DataFrame(predictions)\n        scores.append(mean_squared_error(y_test, predictions, squared=False))\n    sns.histplot(data=scores, bins=10)\n    plt.title('Validation Distribution')\n    plt.xlabel('RMSE')\n    plt.ylabel('Count')","39146625":"models['linear'].fit(X_train, y_train)\npredictions = models['linear'].predict(X_test)\npredictions = np.round(predictions, 0).astype('int')\nstats = pd.DataFrame(predictions)\nprint(stats.describe())\nrmse = mean_squared_error(y_test, predictions, squared=False)\nprint(rmse, 'linear')\nminimum_rmse, minimum_model = rmse, 'linear'\ndistributeValidations(models['linear'], X, y)","4531c6c2":"minimum = None\nfor i in range(0, 1000):\n    ridge = [Ridge(alpha=i), 0]\n    ridge[0].fit(X_train, y_train)\n    predictions = ridge[0].predict(X_test)\n    predictions = np.round(predictions, 0).astype('int')\n    rmse = mean_squared_error(y_test, predictions, squared=False)\n    #print(rmse, 'ridge')\n    ridge[1] = rmse\n    if not minimum:\n        minimum = ridge\n    else:\n        if ridge[1] < minimum[1]:\n            minimum = ridge\nmodels['ridge'] = minimum[0]\nstats = pd.DataFrame(minimum[0].predict(X_test))\nprint(stats.describe())\nprint(minimum)\ndistributeValidations(minimum[0], X, y)","3520c183":"ridge = models['ridgeCV']\nridge.fit(X_train, y_train)\npredictions = ridge.predict(X_test)\npredictions = np.round(predictions, 0).astype('int')\nstats = pd.DataFrame(predictions)\nprint(stats.describe())\nrmse = mean_squared_error(y_test, predictions, squared=False)\nprint(rmse, 'ridgeCV')\nif rmse < minimum_rmse:\n    minimum_rmse, minimum_model = rmse, 'ridgeCV'\ndistributeValidations(ridge, X, y)","17ea4715":"lasso = models['lasso']\nlasso.fit(X_train, y_train)\npredictions = lasso.predict(X_test)\npredictions = np.round(predictions, 0).astype('int')\nstats = pd.DataFrame(predictions)\nprint(stats.describe())\nrmse = mean_squared_error(y_test, predictions, squared=False)\nprint(rmse, 'lasso')\nif rmse < minimum_rmse:\n    minimum_rmse, minimum_model = rmse, 'lasso'\ndistributeValidations(lasso, X, y)","4f588d53":"models['elastic'].fit(X_train, y_train)\npredictions = models['elastic'].predict(X_test)\npredictions = np.round(predictions, 0).astype('int')\nstats = pd.DataFrame(predictions)\nprint(stats.describe())\nrmse = mean_squared_error(y_test, predictions, squared=False)\nprint(rmse, 'elastic')\nif rmse < minimum_rmse:\n    minimum_rmse, minimum_model = rmse, 'elastic'\ndistributeValidations(models['elastic'], X, y)","5b4edb5a":"print(minimum_rmse, minimum_model)","8e485023":"predictions = models[minimum_model].predict(X_submission)\npredictions = np.round(predictions, 0).astype('int')\npredictions = [0 if i < 0 else i for i in predictions]","a3ebd36d":"ids = testing.id\noutput = pd.DataFrame({'id': ids, 'COVID-19 Deaths': predictions})\nprint(output.to_string())\noutput.to_csv('submission.csv', index=False)\nprint(\"Your submission was successfully saved!\")\n\n\n\n\n\n\n\n\n","4b0b174c":"# Handle Outliers","2069c20d":"# Data Visualization Pre Outlier-Handling","01cf5f99":"# Lasso Regression","ab3dd69a":"# Elastic Net Regression","fe67d675":"# Pre-visualization data handling. Create column 'Week'\n### Esentially the same as MMWR Week but utilizes the End Date of each row. Results in lower RMSE.","247727ee":"# Load data from provided CSV files","e54d23d9":"###### ","b59782c2":"### Can't reliably train on data with a missing label and so drop all rows missing a COVID-19 Death value.\n### An alternative approach for handling the missing Total Deaths could be to use the average death rate, however, this could result in inaccuracies which can be avoided by dropping the row altogether (with the cost of less rows to train on).\n### If 'MMWR Week' is missing, we can utilize the 'Week' column previously made to fill","d1641bf2":"# Ridge Regression Using Cross Validation","2921cd54":"# Missing Values","61b8b2a0":"# Establish models, variables, and split data","d772cd9b":"# Initial Data Inspection","ff0ca3d4":"# Data Transformation\n### Converting categorical data into meaningful numerical data. This is so the model can detect patterns out of what would otherwise be meaningless string values\n### Example (not regarding this data set): ['US', 'Spain', 'US', 'Germany] would become [0, 1, 0, 2]","5b3c5655":"# Validation distribution function","7360b49d":"# Ordinary Least Squares","70f7fee8":"# Ridge Regression","60383c30":"# Import libraries","28e5f395":"# Data Visualization Post Outlier-Handling"}}