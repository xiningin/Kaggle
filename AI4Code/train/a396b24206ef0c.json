{"cell_type":{"3bd08d26":"code","6a802fc2":"code","9be47a13":"code","aa3a19aa":"code","703d4279":"code","721e3d4d":"code","c30da6a3":"code","d6151f59":"code","e740151f":"code","0443160e":"code","a8d48a89":"code","d6e1f5eb":"code","121209e6":"code","4532918e":"code","fb77b328":"code","340462dc":"code","2ea48ab9":"code","3138491b":"code","a60972de":"code","7ab8168f":"code","828720ed":"code","4222f744":"code","9236f2de":"code","dddac791":"code","aeac09e4":"code","91db1e63":"code","8240bb12":"code","cdfd4e03":"code","0b1eb1d1":"code","3b630964":"code","271404a0":"code","70f622d7":"code","a40266af":"code","1283e45a":"code","cd0aa2ea":"code","c1aa2dc8":"code","01216f46":"code","be68361b":"code","203fa506":"code","fd58f281":"code","4bad0d16":"code","2724f32b":"code","d4f71b7b":"code","7b3d1b7e":"code","504db3d5":"code","9d1de986":"code","beaae04d":"code","7433f70e":"code","cbd75580":"code","cb3ef1dc":"code","2e9c5fe7":"code","82a77ab0":"code","5a9d2f0b":"code","95c184fe":"code","85bd4522":"code","6372ca94":"code","d82c17bc":"code","491f942a":"code","543f76a6":"code","d1e17822":"code","76015a39":"code","9c378b6c":"code","5957503d":"markdown"},"source":{"3bd08d26":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a802fc2":"import seaborn as sns\nimport matplotlib.pyplot as plt","9be47a13":"train = pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest = pd.read_csv('..\/input\/titanic\/test.csv')","aa3a19aa":"train.info()","703d4279":"train_drop = train.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)\ntest_drop = test.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1)","721e3d4d":"train_drop","c30da6a3":"test_drop","d6151f59":"sns.countplot(train['Pclass'], hue=train['Survived'])","e740151f":"sns.countplot(train['Sex'], hue=train['Survived'])","0443160e":"sns.distplot(train['Age'], kde=False)","a8d48a89":"train['Age'].describe()","d6e1f5eb":"age_bins = [0, 2, 6, 11, 18, 30, 60, 80]\nage_labels = ['infant', 'early child', 'child', 'adolescence', 'young adult', 'adult', 'elder']","121209e6":"train_drop['Age'] = pd.cut(train['Age'], bins=age_bins, labels=age_labels, include_lowest=True)\ntrain_drop['Age'] = train_drop['Age'].astype('object')\ntrain_drop['Age']","4532918e":"plt.figure(figsize=(10,7))\nsns.countplot(train_drop['Age'], hue=train['Survived'])","fb77b328":"sns.countplot(train['SibSp'], hue=train['Survived'])","340462dc":"sns.countplot(train['Parch'], hue=train['Survived'])","2ea48ab9":"sns.distplot(train['Fare'], kde=False)","3138491b":"fare_summary = pd.DataFrame(train['Fare'].describe())\nfare_summary","a60972de":"fare_bins = fare_summary.iloc[3:,0].to_list()\nfare_labels = ['low','medium','high','very high']","7ab8168f":"train_drop['Fare'] = pd.cut(train['Fare'], bins=fare_bins, labels=fare_labels, include_lowest=True)\ntrain_drop['Fare'] = train_drop['Fare'].astype('object')\ntrain_drop['Fare']","828720ed":"sns.countplot(train_drop['Fare'], hue=train['Survived'])","4222f744":"sns.countplot(train['Embarked'], hue=train['Survived'])","9236f2de":"train_drop","dddac791":"test_drop['Age'] = pd.cut(test['Age'], bins=age_bins, labels=age_labels, include_lowest=True)\ntest_drop['Age'] = test_drop['Age'].astype('object')\ntest_drop['Age']","aeac09e4":"test_drop['Fare'] = pd.cut(test['Fare'], bins=fare_bins, labels=fare_labels, include_lowest=True)\ntest_drop['Fare'] = test_drop['Fare'].astype('object')\ntest_drop['Fare']","91db1e63":"test_drop","8240bb12":"def sorting(feature_name):\n    feature = train_drop[[feature_name,'Survived']]\n    feature_survived = train_drop[[feature_name,'Survived']][train_drop['Survived']==1]\n    \n    count = feature.groupby(feature_name).count()\n    count_survived = feature_survived.groupby(feature_name).count()\n\n    percent = count.join(count_survived, lsuffix = 'total')\n    percent['percentage'] = percent['Survived']\/percent['Survivedtotal']\n    percent = percent.fillna(0)\n    percent = percent.sort_values(by='percentage')\n    key = percent.index.tolist()\n    val = percent['percentage'].tolist()\n    return {key[i]:val[i] for i in range(len(key))}","cdfd4e03":"sorting('Pclass')","0b1eb1d1":"sorting('Sex')","3b630964":"sorting('Age')","271404a0":"sorting('SibSp')","70f622d7":"sorting('Parch')","a40266af":"sorting('Fare')","1283e45a":"sorting('Embarked')","cd0aa2ea":"X = train_drop.drop('Survived', axis=1)\nX_train = pd.DataFrame()\nfor i in X.columns:\n    X_train[i] = X[i].map(sorting(i))\nX_train.head()","c1aa2dc8":"X_test = pd.DataFrame()\nfor i in test_drop.columns:\n    X_test[i] = test_drop[i].map(sorting(i))\nX_test.head()","01216f46":"X_train['Age'].fillna(X_train['Age'].mode()[0], inplace=True)\nX_train['Embarked'].fillna(X_train['Embarked'].mode()[0], inplace=True)","be68361b":"X_test['Age'].fillna(X_test['Age'].mode()[0], inplace=True)\nX_test['Parch'].fillna(X_test['Parch'].mode()[0], inplace=True)\nX_test['Fare'].fillna(X_test['Age'].mode()[0], inplace=True)","203fa506":"X_train.info()","fd58f281":"X_train","4bad0d16":"y_train = train_drop['Survived']\ny_train","2724f32b":"X_test.info()","d4f71b7b":"X_test","7b3d1b7e":"from sklearn.model_selection import train_test_split\n\nX_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train)","504db3d5":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.svm import SVC","9d1de986":"from sklearn.metrics import accuracy_score","beaae04d":"reg = LogisticRegression()\nreg.fit(X_train,y_train)\nreg_train_pred = reg.predict(X_train)\nreg_valid_pred = reg.predict(X_valid)\n\nprint(accuracy_score(reg_train_pred, y_train))\nprint(accuracy_score(reg_valid_pred, y_valid))","7433f70e":"acc_train_tree = []\nacc_valid_tree = []\nmax_depth = np.arange(1,21)\n\nfor i in max_depth:\n    tree = DecisionTreeClassifier(max_depth=i)\n    tree.fit(X_train,y_train)\n    tree_train_pred = tree.predict(X_train)\n    tree_valid_pred = tree.predict(X_valid)\n\n    train = accuracy_score(tree_train_pred, y_train)\n    valid = accuracy_score(tree_valid_pred, y_valid)\n    \n    acc_train_tree.append(train)\n    acc_valid_tree.append(valid)\n\nplt.scatter(max_depth, acc_train_tree, label='Acc train', marker='+')\nplt.scatter(max_depth, acc_valid_tree, label='Acc valid', marker='+')\nplt.legend()\nplt.title('Acc vs max_depth')\nplt.xlabel('max_depth')\nplt.ylabel('Acc')\nplt.xticks(np.arange(1,21,step=2))\nplt.show()","cbd75580":"acc_train_knn = []\nacc_valid_knn = []\nneighbors = np.arange(1,51)\n\nfor i in neighbors:\n    knn = KNeighborsClassifier(n_neighbors=i)\n    knn.fit(X_train,y_train)\n    knn_train_pred = knn.predict(X_train)\n    knn_valid_pred = knn.predict(X_valid)\n\n    train = accuracy_score(knn_train_pred, y_train)\n    valid = accuracy_score(knn_valid_pred, y_valid)\n    \n    acc_train_knn.append(train)\n    acc_valid_knn.append(valid)\n    \nplt.scatter(neighbors, acc_train_knn, label='Acc train', marker='+')\nplt.scatter(neighbors, acc_valid_knn, label='Acc valid', marker='+')\nplt.legend()\nplt.title('Acc vs n_neighbors')\nplt.xlabel('n_neighbors')\nplt.ylabel('Acc')\nplt.show()","cb3ef1dc":"acc_train_svc = []\nacc_valid_svc = []\nC = np.arange(1,51)\n\nfor i in C:\n    svc = SVC(C=i)\n    svc.fit(X_train,y_train)\n    svc_train_pred = svc.predict(X_train)\n    svc_valid_pred = svc.predict(X_valid)\n\n    train = accuracy_score(svc_train_pred, y_train)\n    valid = accuracy_score(svc_valid_pred, y_valid)\n    \n    acc_train_svc.append(train)\n    acc_valid_svc.append(valid)\n    \nplt.scatter(C, acc_train_svc, label='Acc train', marker='+')\nplt.scatter(C, acc_valid_svc, label='Acc valid', marker='+')\nplt.legend()\nplt.title('Acc vs C')\nplt.xlabel('C')\nplt.ylabel('Acc')\nplt.show()","2e9c5fe7":"from sklearn.model_selection import GridSearchCV\n\nmax_depth = np.arange(1,21)\ntree_param_grid = [{'max_depth':max_depth, 'splitter':['best', 'random']}]\ntree_grid_search = GridSearchCV(tree, tree_param_grid, cv=5, scoring='accuracy')\n\ntree_grid_search.fit(X_train,y_train)","82a77ab0":"best_tree_params = tree_grid_search.best_params_\nbest_tree_params","5a9d2f0b":"tree_results = tree_grid_search.cv_results_\nfor mean_score, params in zip(tree_results[\"mean_test_score\"], tree_results[\"params\"]):\n    print(mean_score, params)","95c184fe":"neighbors = np.arange(1,21)\nknn_param_grid = [{'n_neighbors':neighbors, 'weights':['uniform', 'distance']}]\nknn_grid_search = GridSearchCV(knn, knn_param_grid, cv=5, scoring='accuracy')\n\nknn_grid_search.fit(X_train,y_train)","85bd4522":"best_knn_params = knn_grid_search.best_params_\nbest_knn_params","6372ca94":"knn_results = knn_grid_search.cv_results_\nfor mean_score, params in zip(knn_results[\"mean_test_score\"], knn_results[\"params\"]):\n    print(mean_score, params)","d82c17bc":"svc_param_grid = [{'C':C, 'gamma':['scale', 'auto']}]\nsvc_grid_search = GridSearchCV(svc, svc_param_grid, cv=5, scoring='accuracy')\n\nsvc_grid_search.fit(X_train,y_train)","491f942a":"best_svc_params = svc_grid_search.best_params_\nbest_svc_params","543f76a6":"svc_results = svc_grid_search.cv_results_\nfor mean_score, params in zip(svc_results[\"mean_test_score\"], svc_results[\"params\"]):\n    print(mean_score, params)","d1e17822":"svc = SVC(**best_svc_params)\nsvc.fit(X_train,y_train)\ntest_predict = svc.predict(X_test)","76015a39":"output = pd.DataFrame({'PassengerId':test['PassengerId'],\n                       'Survived':test_predict})\noutput","9c378b6c":"output.to_csv('titanic_sub.csv',index=False)","5957503d":"Retrieving data"}}