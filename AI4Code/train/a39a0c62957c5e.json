{"cell_type":{"773f79c5":"code","26e712c1":"code","3d857885":"code","c28dff20":"code","7b3f1170":"code","35ee613a":"code","326d72c2":"code","70682a22":"code","b0f96627":"code","44d9d487":"code","2ec52568":"code","6212d9aa":"code","e6444db3":"code","954817d6":"code","6f17d8cd":"code","18baf7d7":"code","d8676aa3":"code","2457ca00":"code","2d715618":"code","53d90355":"code","7491d82c":"code","94b9acf4":"code","6f696de2":"code","5cb10dc2":"code","c2332150":"code","816570d2":"code","21f276dc":"code","b4a995f2":"code","ddc731d6":"code","d198815d":"code","07c70927":"code","d8174505":"code","c6818b5b":"code","e78106f6":"code","75a5514b":"code","6236e5fd":"code","4ac7919b":"code","b075eb10":"code","88e5139e":"code","e7da53dd":"code","16f8d417":"code","4533221c":"code","3d036bc2":"code","560c033c":"code","bfaf3006":"code","ea479285":"code","881fbdf8":"code","e9240e66":"code","f1ceb0de":"code","75e8b543":"code","f27bec71":"code","b414a633":"code","0acf735e":"code","a9f7fc51":"code","b565e191":"code","3e0c9ef3":"code","66d4a491":"code","293f87c1":"code","ac5fa79f":"code","02a57ae4":"code","d6a25f4e":"code","5dbd5dd0":"code","69c88b7f":"code","7248bb40":"code","b62594ef":"code","b0f8f4a8":"code","33c795f8":"code","e35c6937":"code","bd187b25":"code","235bd005":"code","0e39c2dd":"code","b9602e72":"code","4926ac58":"code","d8413188":"code","46144293":"code","64ff1990":"code","2232bde2":"code","d015743d":"code","c8a30073":"code","5c2cd601":"code","05526149":"code","dcf78f14":"code","73b5460e":"code","291f2b6d":"code","f78cace0":"code","e21dc344":"code","cfcd45f6":"code","30a11bb2":"code","61096e01":"code","5928b002":"code","3488ed65":"code","a0de94b8":"code","f750ba69":"code","10ed6d65":"code","1aac7d01":"code","cfca7a5f":"code","ff3ff179":"markdown","051c5a79":"markdown","a4896da1":"markdown","38b943a5":"markdown","1e4d1522":"markdown","42e1200c":"markdown","0a4bbd8f":"markdown","49203e66":"markdown","bc15dff1":"markdown","dcdc1988":"markdown","c47e4882":"markdown","996123ee":"markdown","b5db8090":"markdown","98ca3f69":"markdown","dc2d2330":"markdown","a028fafb":"markdown","a16c77ec":"markdown","e7ccfc55":"markdown","aba8d5e5":"markdown","8faa1c7b":"markdown","bf291b1d":"markdown","8f3e17bb":"markdown","9feabb0c":"markdown","5fe37a53":"markdown","faa0bcbe":"markdown","81da3eb4":"markdown","254ffd77":"markdown","9a854b4b":"markdown","259c4cad":"markdown","a9ed5d49":"markdown","e5f33994":"markdown","68fbe2fc":"markdown","a0d19a8f":"markdown","e3b58b06":"markdown","629e37c6":"markdown","706e92a2":"markdown","6e7ef133":"markdown","5fb7343e":"markdown","d04bf2da":"markdown","f389ff41":"markdown","4efe9c2d":"markdown","4cab4ec1":"markdown","4289a7ef":"markdown","a6f3cad0":"markdown","198c5a99":"markdown","ce95e96e":"markdown","b243628a":"markdown","351126f4":"markdown","b2b15d43":"markdown","02ac9024":"markdown","2913ea74":"markdown","397ed2b3":"markdown","be5bf921":"markdown","15564ca9":"markdown","90867d2c":"markdown","c2bba5df":"markdown","453c02f7":"markdown","6b00e915":"markdown","980b7f0c":"markdown","12b39fe6":"markdown","4ee5e2fe":"markdown","e10c0e58":"markdown","8f9a4873":"markdown","7e18ff57":"markdown","41cc6236":"markdown","7ab6b56b":"markdown","8e7301a0":"markdown","fdce267f":"markdown","8d7d92de":"markdown","79a399ce":"markdown","c9f79e93":"markdown","299bcfda":"markdown","c691c85c":"markdown","729d4cfc":"markdown","883aabca":"markdown","ec2f405c":"markdown","0fedba9f":"markdown","a6d84807":"markdown","384fe3eb":"markdown","53453c19":"markdown","0b13144e":"markdown","59b3e52f":"markdown","bbaf1366":"markdown","141c0c6d":"markdown","d1cf7233":"markdown","352c790e":"markdown","db4ec3b0":"markdown","d4d6827d":"markdown","a3bed72a":"markdown","3f5e30e6":"markdown","85bf393c":"markdown","bb9fa3aa":"markdown","1f409875":"markdown","10b20ac9":"markdown"},"source":{"773f79c5":"import numpy as np\nimport pandas as pd\nfrom scipy import stats\nimport collections\nimport itertools\nimport math\nfrom scipy.stats import norm, skew\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nsns.set()\nsns.set_style('whitegrid')\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\n\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.preprocessing import LabelEncoder\nfrom category_encoders import BinaryEncoder\nfrom sklearn.preprocessing import OrdinalEncoder\n\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\n\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor\nimport lightgbm as lgb\nimport optuna.integration.lightgbm as lgb_optuna\nimport optuna\nimport xgboost as xgb","26e712c1":"train_df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u53d6\u308a\u51fa\u3057\ntest_df = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')\n\n# \u5f93\u5c5e\u5909\u6570\u53d6\u308a\u51fa\u3057\ntrain_SalePrice = train_df['SalePrice']","3d857885":"# \u4e2d\u8eab\u78ba\u8a8d\ntrain_df.head(5)","c28dff20":"# Id \u306f\u4e0d\u8981\u306a\u306e\u3067\u3001\u524a\u9664\u3057\u3066\u5225\u306b\u5909\u6570\u5316\ntrain_Id = train_df.Id\ntest_Id = test_df.Id\n\n# Id\u5217\u524a\u9664\ntrain_df.drop('Id', axis=1, inplace=True)\ntest_df.drop('Id', axis=1, inplace=True)","7b3f1170":"# \u5909\u6570\u306e\u6570\u304c\u591a\u3044\u306e\u3067\u3001\u5909\u6570\u306e\u610f\u5473\u3092\u53c2\u7167\u3067\u304d\u308b\u8f9e\u66f8\u3092\u4f5c\u6210\nfea_dic = {'MSSubClass': '\u4f4f\u5b85\u306e\u7a2e\u985e',\n           'MSZoning': '\u571f\u5730\u306e\u7a2e\u985e',\n           'LotFrontage': '\u4f4f\u5b85\u304b\u3089\u901a\u308a\u307e\u3067\u306e\u8ddd\u96e2',\n           'LotArea': '\u571f\u5730\u9762\u7a4d',\n           'Street': '\u4f4f\u5b85\u307e\u3067\u306e\u9053\u8def\u30bf\u30a4\u30d7\uff08\u8217\u88c5\u304b\u3069\u3046\u304b\uff09',\n           'Alley': '\u4f4f\u5b85\u307e\u3067\u306e\u5c0f\u9053\u306e\u30bf\u30a4\u30d7\uff08\u8217\u88c5\u304b\u3068\u304b\u5c0f\u9053\u304c\u306a\u3044\u3068\u304b\uff09',\n           'LotShape': '\u4f4f\u5b85\u30bf\u30a4\u30d7\uff08\u6a19\u6e96\u7684\u306a\u5f62\u3001\u3068\u304b\u5909\u308f\u3063\u305f\u5f62\u3068\u304b\uff09',\n           'Landcontour': '\u4f4f\u5b85\u5730\u306e\u4f4d\u7f6e\u74b0\u5883\uff08\u5e73\u3089\u306a\u5834\u6240\u306b\u3042\u308b\u304b\u3001\u4e18\u306b\u3042\u308b\u304b\u3001\u50be\u659c\u5730\u306b\u3042\u308b\u304b\u3068\u304b\uff09',\n           'Utilities': '\u30ac\u30b9\u3068\u304b\u96fb\u6c17\u3068\u304b\u306e\u8a2d\u5099\u72b6\u6cc1',\n           'LotConfig': '\u571f\u5730\u306e\u533a\u753b\u4f4d\u7f6e\uff08\u89d2\u3068\u304b\uff09',\n           'LandSlope': '\u571f\u5730\u306e\u50be\u659c\u72b6\u6cc1',\n           'Neighborhood': '\u7269\u4ef6\u306e\u5834\u6240',\n           'Condition1': '\u305d\u306e\u4ed6\u6761\u4ef6\uff11\uff08\u3069\u306e\u901a\u308a\u306b\u9762\u3057\u3066\u3044\u308b\u304b\u3068\u304b\uff09',\n           'Condition2': '\u305d\u306e\u4ed6\u6761\u4ef6\uff12\uff08\u3069\u306e\u901a\u308a\u306b\u9762\u3057\u3066\u3044\u308b\u304b\u3068\u304b\uff09',\n           'BldgType': '\u4f4f\u5b85\u30bf\u30a4\u30d7\uff08\uff11\u4e16\u5e2f\u7528\u3068\u304b\u3001\uff12\u4e16\u5e2f\u7528\u3068\u304b\uff09',\n           'HouseStyle': '\u4f4f\u5b85\u306e\u5f62\u72b6\uff08\uff12\u968e\u5efa\u3066\u3068\u304b\uff09',\n           'OverallQual': '\u4f4f\u5b85\u8a2d\u5099\u306e\u4fee\u7e55\u72b6\u6cc1',\n           'OverallCond': '\u4f4f\u5b85\u81ea\u4f53\u306e\u4fee\u7e55\u72b6\u6cc1',\n           'YearBuilt': '\u5efa\u7bc9\u5e74',\n           'YearRemodAdd': '\u5897\u7bc9\u3068\u304b\u6539\u7bc9\u3057\u305f\u5834\u5408\u306e\u5e74',\n           'RoofStyle7': '\u5c4b\u6839\u306e\u7a2e\u985e',\n           'RoofMatl': '\u5c4b\u6839\u306e\u6750\u8cea\u306e\u7a2e\u985e',\n           'Exterior1st': '\u4f4f\u5b85\u306e\u5916\u58c1\u306e\u7a2e\u985e',\n           'Exterior2nd': '\u4f4f\u5b85\u306e\u5916\u58c1\u306e\u7a2e\u985e\uff08\uff12\u7a2e\u985e\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\uff09',\n           'MasVnrType': '\u5916\u58c1\u30ec\u30f3\u30ac\u306e\u7a2e\u985e',\n           'MasVnrArea': '\u30ec\u30f3\u30ac\u30a8\u30ea\u30a2\u306e\u9762\u7a4d',\n           'ExterQual': '\u5c4b\u5916\u8a2d\u5099\u306e\u30af\u30aa\u30ea\u30c6\u30a3',\n           'ExterCond': '\u5c4b\u5916\u8a2d\u5099\u306e\u72b6\u614b',\n           'Foundation': '\u4f4f\u5b85\u306e\u57fa\u790e\u306e\u7a2e\u985e',\n           'BsmtQual': '\u5730\u4e0b\u5ba4\u306e\u9ad8\u3055',\n           'BsmtCond': '\u5730\u4e0b\u5ba4\u306e\u72b6\u614b',\n           'BsmtExposure': '\u5ead\u306e\u898b\u6674\u3089\u3057\u5177\u5408\uff1f',\n           'BsmtFinType1': '\u5730\u4e0b\u5ba4\u306e\u5efa\u7bc9\u72b6\u6cc1\uff11\uff08\u30ea\u30d3\u30f3\u30b0\u30eb\u30fc\u30e0\u7528\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3001\u3068\u304b\u30ec\u30af\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30e0\u7528\u3068\u304b\uff09',\n           'BsmtFinSF1': '\u5730\u4e0b\u5ba4\u306e\u5de5\u4e8b\u6e08\u307f\u9762\u7a4d1',\n           'BsmtFinType2': '\u5730\u4e0b\u5ba4\u306e\u5efa\u7bc9\u72b6\u6cc1\uff12\uff08\u30ea\u30d3\u30f3\u30b0\u30eb\u30fc\u30e0\u7528\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3001\u3068\u304b\u30ec\u30af\u30ea\u30a8\u30fc\u30b7\u30e7\u30f3\u30eb\u30fc\u30e0\u7528\u3068\u304b\uff09',\n           'BsmtFinSF2': '\u5730\u4e0b\u5ba4\u306e\u5de5\u4e8b\u6e08\u307f\u9762\u7a4d2',\n           'BsmtUnfSF': '\u5730\u4e0b\u5ba4\u3067\u5efa\u7bc9\uff08\u30ab\u30fc\u30da\u30c3\u30c8\u306e\u8a2d\u7f6e\u3068\u304b\uff09\u304c\u3055\u308c\u3066\u3044\u306a\u3044\u9762\u7a4d',\n           'TotalBsmtSF': '\u5730\u4e0b\u5ba4\u306e\u7dcf\u9762\u7a4d',\n           'Heating': '\u6696\u623f\u5668\u5177\u306e\u7a2e\u985e',\n           'HeatingQC':'\u6696\u623f\u5668\u5177\u306e\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3',\n           'CentralAir': '\u30bb\u30f3\u30c8\u30e9\u30eb\u30a8\u30a2\u30fc\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30ca\u30fc\u304c\u4ed8\u3044\u3066\u3044\u308b\u304b',\n           'Electrical': '\u96fb\u6c17\u30b7\u30b9\u30c6\u30e0\u306e\u7a2e\u985e',\n           '1stFlrSF': '\uff11\u968e\u306e\u9762\u7a4d',\n           '2ndFlrSF': '\uff12\u968e\u306e\u9762\u7a4d',\n           'LowQualFinSF': '\u30d5\u30ed\u30a2\u5168\u4f53\u3067\u5185\u88c5\u306e\u54c1\u8cea\u304c\u4f4e\u3044\u30a8\u30ea\u30a2\u306e\u7dcf\u9762\u7a4d',\n           'GrLivArea': 'Above grade living area(\u5c45\u4f4f\u3059\u308b\u306e\u306b\u5341\u5206\u306a\u5185\u88c5\u3084\u8a2d\u5099\u304c\u4f4f\u3093\u3060\u90e8\u5c4b\uff1f\uff09\u306e\u9762\u7a4d',\n           'BsmtFullBath': '\u5730\u4e0b\u306b\u3042\u308b full bathroom\u306e\u6570',\n           'BsmtHalfBath': '\u5730\u4e0b\u306b\u3042\u308b half bathroom\u306e\u6570',\n           'FullBath': '\u5730\u4e0a\u968e\u306b\u3042\u308b full bathroom\u306e\u6570',\n           'HalfBath': '\u5730\u4e0a\u968e\u306b\u3042\u308b half bathroom\u306e\u6570',\n           'BedroomAbvGr': '\u5730\u4e0a\u968e\u306b\u3042\u308b\u30d9\u30c3\u30c9\u30eb\u30fc\u30e0\u306e\u6570',\n           'KitchenAbvGr': '\u5730\u4e0a\u968e\u306b\u3042\u308b\u53f0\u6240\u306e\u6570',\n           'KitchenQual': '\u53f0\u6240\u306e\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3',\n           'TotRmsAbvGrd': '\u5730\u4e0a\u968e\u306e\u7dcf\u90e8\u5c4b\u6570',\n           'Functional': '\u4f4f\u5b85\u306e\u6a5f\u80fd\u6027\u306e\u30e9\u30f3\u30af',\n           'Fireplaces': '\u6696\u7089\u306e\u6570',\n           'FireplaceQu': '\u6696\u7089\u306e\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3',\n           'GarageType': '\u30ac\u30ec\u30fc\u30b8\u306e\u7a2e\u985e\uff08\u5730\u4e0b\u306b\u3042\u308b\u3068\u304b\u3001\u5bb6\u306b\u304f\u3063\u3064\u3044\u3066\u3044\u308b\u3068\u304b\uff09',\n           'GarageYrBlt': '\u30ac\u30ec\u30fc\u30b8\u306e\u5efa\u7bc9\u5e74',\n           'GarageFinish': '\u30ac\u30ec\u30fc\u30b8\u306e\u5185\u88c5\u304c\u7d42\u308f\u3063\u3066\u3044\u308b\u304b',\n           'GarageCars': '\u30ac\u30ec\u30fc\u30b8\u306b\u5165\u308b\u8eca\u306e\u53f0\u6570',\n           'GarageArea': '\u30ac\u30ec\u30fc\u30b8\u306e\u9762\u7a4d',\n           'GarageQual': '\u30ac\u30ec\u30fc\u30b8\u306e\u54c1\u8cea',\n           'GarageCond': '\u30ac\u30ec\u30fc\u30b8\u306e\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3',\n           'PavedDrive': '\u6577\u5730\u5185\u306e\u9053\u8def\u306e\u8217\u88c5\u72b6\u6cc1',\n           'WoodDeckSF': '\u30a6\u30c3\u30c9\u30c7\u30c3\u30ad\u30a8\u30ea\u30a2\u306e\u9762\u7a4d',\n           'OpenPorchSF': '\u5c4b\u5916\u306e\u5c4b\u6839\u306e\u3042\u308b\u30c6\u30e9\u30b9\u306e\u9762\u7a4d',\n           'EnclosedPorch': '\u7e01\u5074\uff08\u5916\u306b\u7a81\u304d\u51fa\u3057\u305f\u30ea\u30d3\u30f3\u30b0\u30eb\u30fc\u30e0\uff09\u306e\u9762\u7a4d',\n           '3SsnPorch': '\u51b7\u6696\u5bfe\u5fdc\u306e\u30dd\u30fc\u30c1\u306e\u9762\u7a4d',\n           'ScreenPorch': 'screnn\u30dd\u30fc\u30c1\u306e\u9762\u7a4d',\n           'PoolArea': '\u30d7\u30fc\u30eb\u306e\u9762\u7a4d',\n           'PoolQC': '\u30d7\u30fc\u30eb\u306e\u30af\u30aa\u30ea\u30c6\u30a3',\n           'Fence': '\u30d5\u30a7\u30f3\u30b9\u306e\u30af\u30aa\u30ea\u30c6\u30a3',\n           'MiscFeature': '\u305d\u306e\u4ed6\u7279\u5fb4\uff08\u30a8\u30ec\u30d9\u30fc\u30bf\u30fc\u4ed8\u304d\u3068\u304b\uff09',\n           'MiscVal': '\u305d\u306e\u4ed6\u7279\u5fb4\u306e\u30c9\u30eb\u4fa1\u5024',\n           'MoSold': '\u58f2\u308a\u306b\u51fa\u3055\u308c\u305f\u6708',\n           'YrSold': '\u58f2\u308a\u306b\u51fa\u3055\u308c\u305f\u5e74',\n           'SaleType': '\u8ca9\u58f2\u30bf\u30a4\u30d7',\n           'SaleCondition': '\u8ca9\u58f2\u72b6\u6cc1',\n           'SalePrice': '\u4f4f\u5b85\u4fa1\u683c\uff08\u203b\u4e88\u6e2c\u5bfe\u8c61\uff09'}","35ee613a":"# null\u5024\u306e\u3042\u308b\u5909\u6570\u306e\u78ba\u8a8d\nnull_col_train = ''\nnull_col_test = ''\nnull_train_list = []\nnull_test_list = []\n\nfor col in train_df.columns:\n    check = train_df[col].isnull().value_counts()\n    if len(check) != 1:\n        null_col_train = null_col_train + col + ', '\n        null_train_list.append(col)\n        \nfor col in test_df.columns:\n    check = test_df[col].isnull().value_counts()\n    if len(check) != 1:\n        null_col_test = null_col_test + col + ', '\n        null_test_list.append(col)\n        \nprint('\u8a13\u7df4\u30c7\u30fc\u30bf\u306enull\u5024\u3042\u308a\u5909\u6570\uff1a\\n', null_col_train, '\\n')\nprint('\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306enull\u5024\u3042\u308a\u5909\u6570\uff1a\\n', null_col_test)","326d72c2":"# object\u578b\u5909\u6570(Categorical)\u306e\u62bd\u51fa\nobject_list = train_df.select_dtypes(include='object').columns.to_list()\n\n# int\u578b\u5909\u6570(Categorical\u5909\u6570\u3068Numerical\u5909\u6570\u304c\u6df7\u3056\u3063\u3066\u3044\u308b)\u306e\u62bd\u51fa\nint_list = train_df.select_dtypes(include='int').columns.to_list()\n\n# float\u578b\u5909\u6570(Numerical\u5909\u6570)\u306e\u62bd\u51fa\nnumeric_list = train_df.select_dtypes(include='float').columns.to_list()","70682a22":"# ojbect_list\u3092\u540d\u7fa9\u5909\u6570\u30ea\u30b9\u30c8\u3068\u9806\u5e8f\u5909\u6570\u30ea\u30b9\u30c8\u306b\u5206\u3051\u308b\n\n# \u540d\u7fa9\u5909\u6570\nnominal_list = ['MSZoning', 'LotShape', 'LandContour', 'LotConfig', 'Neighborhood',\n                'Condition1', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n                'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation',\n                'GarageType', 'PavedDrive', 'SaleType', 'SaleCondition',\n                'Street', 'Alley', 'Condition2', 'Heating', 'MiscFeature']\n# \u9806\u5e8f\u5909\u6570\nordinal_list = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'BsmtExposure',\n                'BsmtFinType1', 'BsmtFinType2', 'HeatingQC', 'Electrical',\n                'KitchenQual', 'Functional', 'GarageFinish','GarageQual', 'GarageCond',\n                'Utilities', 'LandSlope', 'CentralAir', 'FireplaceQu', 'PoolQC',\n                'Fence' ]","b0f96627":"# Categorical-name\u5909\u6570\nto_nominal_list = ['MSSubClass', 'BsmtFullBath', 'BsmtHalfBath', 'KitchenAbvGr',\n                   'GarageCars']\n\n# Categorical-ordinal\u5909\u6570\nto_ordinal_list = ['OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd', \n                   'MoSold', 'YrSold']\n\n# numerical\u5909\u6570\nto_num_list = ['LotArea', '1stFlrSF', '2ndFlrSF',\n               'LowQualFinSF', 'GrLivArea', 'FullBath', 'HalfBath', 'BedroomAbvGr',\n               'TotRmsAbvGrd', 'Fireplaces', 'WoodDeckSF', 'OpenPorchSF',\n               'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea',\n               'MiscVal', 'BsmtFinSF1', 'BsmtFinSF2',\n               'BsmtUnfSF', 'TotalBsmtSF', 'GarageArea', ]","44d9d487":"numeric_list","2ec52568":"numeric_list.remove('GarageYrBlt')\nprint(\"modified numeric_list: \",numeric_list)\n\nto_ordinal_list.append('GarageYrBlt')","6212d9aa":"# \u540d\u7fa9\u5909\u6570\nall_nominal_list = nominal_list + to_nominal_list\n# \u9806\u5e8f\u5909\u6570\nall_ordinal_list = ordinal_list + to_ordinal_list\n# \u91cf\u7684\u5909\u6570\nall_numeric_list = numeric_list + to_num_list","e6444db3":"train_df.SalePrice.describe()","954817d6":"fig = plt.figure(figsize=(10, 4))\n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nsns.distplot(train_df['SalePrice'])","6f17d8cd":"fig = plt.figure(figsize=(25, 25))\nplt.subplots_adjust(hspace=0.6, wspace=0.4)\nfor i in range(len(all_nominal_list)):\n    ax = fig.add_subplot(6, 5, i+1)\n    sns.countplot(x=all_nominal_list[i], data=train_df, ax=ax)\nplt.show()","18baf7d7":"# \u53ef\u8996\u5316\u3057\u3066\u5206\u5e03\u72b6\u6cc1\u78ba\u8a8d\uff08\u8a13\u7df4\u30c7\u30fc\u30bf\u30fb\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u5408\u7b97\u306e\u5206\u5e03\uff09\nfig = plt.figure(figsize=(20,20))\nplt.subplots_adjust(hspace=0.4, wspace=0.4)\nfor i in range(len(all_ordinal_list)):\n    ax = fig.add_subplot(6, 5, i+1)\n    sns.countplot(x=all_ordinal_list[i], data=train_df, ax=ax)\nplt.show()","d8676aa3":"# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306b\u53ef\u8996\u5316\u3057\u3066\u5206\u5e03\u72b6\u6cc1\u78ba\u8a8d\nfig = plt.figure(figsize=(20,20))\nplt.subplots_adjust(hspace=0.4,wspace=0.4)\nfor i in range(len(all_numeric_list)):\n    ax = fig.add_subplot(5, 5, i+1)\n    sns.distplot(train_df[train_df[all_numeric_list[i]].notnull()][all_numeric_list[i]], kde=False, ax=ax)\nplt.show()","2457ca00":"corr = train_df.corr()\nfig = plt.figure(figsize=(12,12))\nsns.heatmap(corr, vmax=.8, square=True)","2d715618":"# SalePrice\u3068\u76f8\u95a2\u306e\u9ad8\u3044\u5909\u6570\u30c8\u30c3\u30d7\uff11\uff10\u3092\u78ba\u8a8d\ncorr\ncols_10 = corr.nlargest(11, 'SalePrice')['SalePrice'].index\ncorr_10 = np.corrcoef(train_df[cols_10].values.T) # \u8ee2\u7f6e\u3057\u3066\u5909\u6570\u3092\u884c\u6bce\u306b\u3057\u3066\u8a08\u7b97\nfig = plt.figure(figsize=(8,8))\nsns.set(font_scale=1.25)\nsns.heatmap(corr_10, cbar=True, annot=True, square=True,\n            fmt='.2f', annot_kws={'size': 11},\n            yticklabels=cols_10.values, xticklabels=cols_10.values)\nplt.show()","53d90355":"# \u53ef\u8996\u5316\u3057\u3066\u5206\u5e03\u72b6\u6cc1\u78ba\u8a8d\nfig = plt.figure(figsize=(25,20))\nplt.subplots_adjust(hspace=0.4,wspace=0.4)\nfor i in range(len(all_nominal_list)):\n    ax = fig.add_subplot(6, 5, i+1)\n    sns.boxplot(x=all_nominal_list[i],y='SalePrice', data=train_df, ax=ax)\nplt.show()","7491d82c":"fig = plt.figure(figsize=(20,15))\nplt.subplots_adjust(hspace=0.4, wspace=0.4)\nfor i in range(len(cols_10)):\n    ax = fig.add_subplot(3, 4, i+1)\n    sns.scatterplot(x=cols_10[i], y='SalePrice', data=train_df, ax=ax)\nplt.show()","94b9acf4":"train_df[(train_df.SalePrice < 200000) & (train_df.GrLivArea > 4000)][['GrLivArea', 'TotalBsmtSF', '1stFlrSF']]","6f696de2":"# \u5916\u308c\u5024\u9664\u304f\nGr_index = train_df[(train_df.SalePrice < 200000) & (train_df.GrLivArea > 4000)].index\ntrain_df.drop(index=Gr_index, inplace=True)\ntrain_Id.drop(index=Gr_index, inplace=True)\ntrain_SalePrice.drop(index=Gr_index, inplace=True)","5cb10dc2":"# \u5916\u308c\u5024\u7121\u304f\u306a\u3063\u305f\u304b\u78ba\u8a8d\nout_list = ['GrLivArea', 'TotalBsmtSF', '1stFlrSF']\n\nfig = plt.figure(figsize=(15,6))\nplt.subplots_adjust(wspace=0.6)\nfor i in range(len(out_list)):\n    ax = fig.add_subplot(1, 3, i+1)\n    sns.scatterplot(x=out_list[i], y='SalePrice', data=train_df, ax=ax)\nplt.show()","c2332150":"# \u6b20\u640d\u5024\u78ba\u8a8d\u7528\u306b\u30c7\u30fc\u30bf\u5408\u4f53\ntrain_num = len(train_df) # train_df\u306e\u30c7\u30fc\u30bf\u6570\u4fdd\u7ba1\ncombined_df = pd.concat([train_df, test_df], ignore_index=True)","816570d2":"# \u6b20\u640d\u5024\u6709\u308a\u5909\u6570\u4e00\u89a7\ncombined_df.isnull().sum().sort_values(ascending=False)[:40]","21f276dc":"# PoolQC(\u30d7\u30fc\u30eb\u306e\u30af\u30aa\u30ea\u30c6\u30a3) - \u30d7\u30fc\u30eb\u7121\u3044\u7269\u4ef6\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'PoolQC': 'None'}, inplace=True)\n\n# MiscFeature(\u305d\u306e\u4ed6\u7279\u5fb4) - \u8a72\u5f53\u7121\u3057\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'MiscFeature': 'None'}, inplace=True)\n\n# Alley(\u4f4f\u5b85\u307e\u3067\u306e\u5c0f\u9053\u306e\u30bf\u30a4\u30d7) - \u5c0f\u9053\u304c\u7121\u3044\u306e\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'Alley': 'None'}, inplace=True)\n\n# Fence(\u30d5\u30a7\u30f3\u30b9\u306e\u30af\u30aa\u30ea\u30c6\u30a3) - \u30d5\u30a7\u30f3\u30b9\u304c\u7121\u3044\u306e\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'Fence': 'None'}, inplace=True)\n\n# FireplaceQu(\u6696\u7089\u306e\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3) - \u6696\u7089\u306a\u3057\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'FireplaceQu': 'None'}, inplace=True)\n\n# GarageFinish(\u30ac\u30ec\u30fc\u30b8\u306e\u5185\u88c5\u304c\u7d42\u308f\u3063\u3066\u3044\u308b\u304b) - \u30ac\u30ec\u30fc\u30b8\u7121\u3057\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'GarageFinish': 'None'}, inplace=True)\n\n# GarageCond(\u30ac\u30ec\u30fc\u30b8\u306e\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3) - \u30ac\u30ec\u30fc\u30b8\u7121\u3057\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'GarageCond': 'None'}, inplace=True)\n\n# GarageQual(\u30ac\u30ec\u30fc\u30b8\u306e\u54c1\u8cea) - \u30ac\u30ec\u30fc\u30b8\u7121\u3057\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'GarageQual': 'None'}, inplace=True)\n\n# GarageType(\u30ac\u30ec\u30fc\u30b8\u306e\u7a2e\u985e\uff08\u5730\u4e0b\u306b\u3042\u308b\u3068\u304b\u3001\u5bb6\u306b\u304f\u3063\u3064\u3044\u3066\u3044\u308b\u3068\u304b\uff09) - \u30ac\u30ec\u30fc\u30b8\u7121\u3057\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'GarageType': 'None'}, inplace=True)\n\n# BsmtExposure(\u5ead\u306e\u898b\u6674\u3089\u3057\u5177\u5408\uff1f) - \u5730\u4e0b\u7121\u3057\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'BsmtExposure': 'None'}, inplace=True)\n\n# BsmtCond(\u5730\u4e0b\u5ba4\u306e\u72b6\u614b) - \u5730\u4e0b\u7121\u3057\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'BsmtCond': 'None'}, inplace=True)\n\n# BsmtQual(\u5730\u4e0b\u5ba4\u306e\u9ad8\u3055) - \u5730\u4e0b\u7121\u3057\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'BsmtQual': 'None'}, inplace=True)\n\n# BsmtFinType2(\u5730\u4e0b\u5ba4\u306e\u5efa\u7bc9\u72b6\u6cc1\uff12) - \u5730\u4e0b\u7121\u3057\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'BsmtFinType2': 'None'}, inplace=True)\n\n# BsmtFinType1(\u5730\u4e0b\u5ba4\u306e\u5efa\u7bc9\u72b6\u6cc1\uff11) - \u5730\u4e0b\u7121\u3057\u304cNA\u306a\u306e\u3067\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'BsmtFinType1': 'None'}, inplace=True)","b4a995f2":"# LotFrontage(\u4f4f\u5b85\u304b\u3089\u901a\u308a\u307e\u3067\u306e\u8ddd\u96e2)\n#  - Neighborhood(\u7269\u4ef6\u30a8\u30ea\u30a2\u30bf\u30a4\u30d7)\u6bce\u306b\u4f4f\u5b85\u307e\u3067\u306e\u8ddd\u96e2\u306f\u5171\u901a\u3057\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u308b\u306e\u3067\u3001\n#    \u5404Neighborhood\u3054\u3068\u306eLotFrontage\u306e\u4e2d\u592e\u5024\u3092\u4f7f\u3063\u3066\u88dc\u5b8c\ncombined_df['LotFrontage'] = combined_df.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))","ddc731d6":"# GarageYrBlt(\u30ac\u30ec\u30fc\u30b8\u306e\u5efa\u7bc9\u5e74) - \u30ac\u30ec\u30fc\u30b8\u7121\u3051\u308c\u3070\u5efa\u7bc9\u5e74\u304c\u672a\u8a18\u5165\u306b\u306a\u308b\u3068\u8003\u3048\u3089\u308c\u308b\u306e\u3067\u30010\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'GarageYrBlt': 0}, inplace=True)\n\n# GarageCars(\u30ac\u30ec\u30fc\u30b8\u306b\u5165\u308b\u8eca\u306e\u53f0\u6570) - \u30ac\u30ec\u30fc\u30b8\u304c\u7121\u3051\u308c\u3070\u53f0\u6570\u3082\u672a\u8a18\u5165\u306b\u306a\u308b\u3068\u8003\u3048\u3089\u308c\u308b\u306e\u3067\u30010\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'GarageCars': 0}, inplace=True)\n\n# GarageArea(\u30ac\u30ec\u30fc\u30b8\u306e\u9762\u7a4d) - \u30ac\u30ec\u30fc\u30b8\u304c\u7121\u3051\u308c\u3070\u53f0\u6570\u3082\u672a\u8a18\u5165\u306b\u306a\u308b\u3068\u8003\u3048\u3089\u308c\u308b\u306e\u3067\u30010\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'GarageArea': 0}, inplace=True)","d198815d":"# MasVnrType(\u5916\u58c1\u30ec\u30f3\u30ac\u306e\u7a2e\u985e) - \u30ec\u30f3\u30ac\u4f7f\u3063\u3066\u3044\u306a\u3044\u306e\u304c\u6b20\u640d\u5024\u3068\u60f3\u5b9a\u3057\u3001\u6587\u5b57\u5217'None'\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'MasVnrType': 'None'}, inplace=True)\n\n# MasVnrArea(\u30ec\u30f3\u30ac\u30a8\u30ea\u30a2\u306e\u9762\u7a4d) - \u30ec\u30f3\u30ac\u4f7f\u3063\u3066\u3044\u306a\u3044\u305f\u3081\u306b\u6b20\u640d\u5024\u3068\u60f3\u5b9a\u3057\u30010\u3067\u7f6e\u304d\u63db\u3048\ncombined_df.fillna({'MasVnrArea': 0}, inplace=True)","07c70927":"# \u5730\u4e0b\u5ba4\u304c\u7121\u3051\u308c\u3070\u672a\u8a18\u5165\u306b\u306a\u308b\u3068\u60f3\u5b9a\u3057\u30010\u3084'None'\u3067\u7f6e\u304d\u63db\u3048\n\n# BsmtFullBath(\u5730\u4e0b\u306b\u3042\u308b full bathroom\u306e\u6570)\ncombined_df.fillna({'BsmtFullBath': 0}, inplace=True)\n\n# BsmtHalfBath(\u5730\u4e0b\u306b\u3042\u308b half bathroom\u306e\u6570)\ncombined_df.fillna({'BsmtHalfBath': 0}, inplace=True)\n\n# TotalBsmtSF(\u5730\u4e0b\u5ba4\u306e\u7dcf\u9762\u7a4d)\ncombined_df.fillna({'TotalBsmtSF': 0}, inplace=True)\n\n# BsmtUnfSF(\u5730\u4e0b\u5ba4\u3067\u5efa\u7bc9\uff08\u30ab\u30fc\u30da\u30c3\u30c8\u306e\u8a2d\u7f6e\u3068\u304b\uff09\u304c\u3055\u308c\u3066\u3044\u306a\u3044\u9762\u7a4d)\ncombined_df.fillna({'BsmtUnfSF': 0}, inplace=True)\n\n# BsmtFinSF2(\u5730\u4e0b\u5ba4\u306e\u5de5\u4e8b\u6e08\u307f\u9762\u7a4d2)\ncombined_df.fillna({'BsmtFinSF2': 0}, inplace=True)\n\n# BsmtFinSF1(\u5730\u4e0b\u5ba4\u306e\u5de5\u4e8b\u6e08\u307f\u9762\u7a4d1)\ncombined_df.fillna({'BsmtFinSF1': 0}, inplace=True)","d8174505":"# Functional(\u4f4f\u5b85\u306e\u6a5f\u80fd\u6027\u306e\u30e9\u30f3\u30af)\ncombined_df['Functional'].value_counts()","c6818b5b":"# \u6b86\u3069\u304c'Typ'\u306a\u306e\u3067\u3001'Typ'\u3067\u57cb\u3081\u308b\ncombined_df.fillna({'Functional': 'Typ'}, inplace=True)","e78106f6":"# Utilities(\u30ac\u30b9\u3068\u304b\u96fb\u6c17\u3068\u304b\u306e\u8a2d\u5099\u72b6\u6cc1)\n\ncombined_df['Utilities'].value_counts()","75a5514b":"# \u307b\u307c\u5168\u3066\u304c'AbbPub'\u306a\u306e\u3067\u3001'AllPub'\u3067\u57cb\u3081\u308b\n# \u5b9f\u8cea\u7684\u306b\u5b9a\u6570\u3068\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3001\u5909\u6570\u9078\u629e\u6642\u306b\u524a\u9664\u5bfe\u8c61\ncombined_df.fillna({'Utilities': 'AllPub'}, inplace=True)","6236e5fd":"# Exterior1st(\u4f4f\u5b85\u306e\u5916\u58c1\u306e\u7a2e\u985e)\n# Exterior2nd(\u4f4f\u5b85\u306e\u5916\u58c1\u306e\u7a2e\u985e\uff08\uff12\u7a2e\u985e\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\uff09)\n\nprint(combined_df['Exterior1st'].value_counts()[:5])\nprint('\\n', combined_df['Exterior2nd'].value_counts()[:5])","4ac7919b":"# \u5916\u58c1\u306e\u7a2e\u985e\u3068\u95a2\u9023\u3059\u308b\u5909\u6570\u304c\u601d\u3044\u6d6e\u304b\u3070\u306a\u3044\u306e\u3067\u3001\u6700\u983b\u5024\u306e'VinylSd'\u3067\u57cb\u3081\u308b\ncombined_df.fillna({'Exterior1st': 'VinylSd'}, inplace=True)\ncombined_df.fillna({'Exterior2nd': 'VinylSd'}, inplace=True)","b075eb10":"# Electrical(\u96fb\u6c17\u30b7\u30b9\u30c6\u30e0\u306e\u7a2e\u985e)\n\ncombined_df['Electrical'].value_counts()","88e5139e":"# \u307b\u3068\u3093\u3069'SBrkr'\u306a\u306e\u3067\u3001'SBrkr'\u3067\u57cb\u3081\u308b\ncombined_df.fillna({'Electrical': 'SBrkr'}, inplace=True)","e7da53dd":"# KitchenQual(\u53f0\u6240\u306e\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3)\n\ncombined_df['KitchenQual'].value_counts()","16f8d417":"# KitchenQual(\u53f0\u6240\u306e\u30b3\u30f3\u30c7\u30a3\u30b7\u30e7\u30f3)\u3068\u95a2\u9023\u3059\u308b\u5909\u6570\u304c\u601d\u3044\u6d6e\u304b\u3070\u306a\u3044\u306e\u3067\u3001\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\ncombined_df.fillna({'KitchenQual': 'TA'}, inplace=True)","4533221c":"# MSZoning(\u571f\u5730\u306e\u7a2e\u985e)\n\n# \u5206\u5e03\u3092\u78ba\u8a8d\ncombined_df['MSZoning'].value_counts()","3d036bc2":"# MSzoning(\u571f\u5730\u306e\u7a2e\u985e)\u6bce\u306eLotFrontage(\u4f4f\u5b85\u307e\u3067\u306e\u8ddd\u96e2)\u306e\u4e2d\u592e\u5024\u3092\u7b97\u51fa\ncombined_df.groupby('MSZoning')['LotFrontage'].median()","560c033c":"# MSZoning\u304c\u6b20\u640d\u306eLotFrontage\u3092\u78ba\u8a8d\ncombined_df[combined_df['MSZoning'].isnull()]['LotFrontage']","bfaf3006":"# 1913,2214,2902 - \u6700\u983b\u5024\u306e'RL'\u3067\u57cb\u3081\u308b\n# 2248 - 'RH'\u3067\u57cb\u3081\u308b\n\ncombined_df.loc[[1913, 2214, 2902], 'MSZoning'] = 'RL'\ncombined_df.loc[2248, 'MSZoning'] = 'RH'","ea479285":"combined_df['SaleType'].value_counts()","881fbdf8":"# \u95a2\u9023\u3059\u308b\u5909\u6570\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\ncombined_df.fillna({'SaleType': 'WD'}, inplace=True)","e9240e66":"# \u6b20\u640d\u5024\u78ba\u8a8d\ncombined_df.isnull().sum().sort_values(ascending=False)","f1ceb0de":"# \u5206\u5e03\u78ba\u8a8d\nfig = plt.figure(figsize=(10, 4))\nplt.subplots_adjust(wspace=0.4)\n\n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nax = fig.add_subplot(1, 2, 1)\nsns.distplot(train_SalePrice, fit=norm, ax=ax)\n\n# QQ\u30d7\u30ed\u30c3\u30c8\nax2 = fig.add_subplot(1, 2, 2)\nstats.probplot(train_SalePrice, plot=ax2)\n\nplt.show()","75e8b543":"# \u5bfe\u6570\u5909\u63db\ntrain_SalePrice = np.log1p(train_SalePrice)","f27bec71":"# \u5909\u63db\u5f8c\nfig = plt.figure(figsize=(10, 4))\nplt.subplots_adjust(wspace=0.4)\n\n# \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\nax = fig.add_subplot(1, 2, 1)\nsns.distplot(train_SalePrice, fit=norm, ax=ax)\n\n# QQ\u30d7\u30ed\u30c3\u30c8\nax2 = fig.add_subplot(1, 2, 2)\nstats.probplot(train_SalePrice, plot=ax2)\n\nplt.show()","b414a633":"skewed_data = combined_df[int_list + numeric_list].apply(lambda x: skew(x)).sort_values(ascending=False)\nskewed_data[:10]","0acf735e":"skew_col = skewed_data[skewed_data > 10].index\n\n# \u53ef\u8996\u5316\nfig = plt.figure(figsize=(10, 8))\nfor i in range(len(skew_col)):\n    ax = fig.add_subplot(2, 3, i+1)\n    try:\n        sns.distplot(combined_df[skew_col[i]], fit=norm, ax=ax)\n    except:\n        # kde\u8a08\u7b97\u3067\u304d\u306a\u3044\u6642\u306f\u3001kde=False\n        sns.distplot(combined_df[skew_col[i]], fit=norm, kde=False, ax=ax)\nplt.show()","a9f7fc51":"# \u5bfe\u6570\u5909\u63db\nfor i in range(len(skew_col)):\n    combined_df[skew_col[i]] = np.log1p(combined_df[skew_col[i]])","b565e191":"# \u53ef\u8996\u5316\n# \u53ef\u8996\u5316\nfig = plt.figure(figsize=(10, 8))\nfor i in range(len(skew_col)):\n    ax = fig.add_subplot(2, 3, i+1)\n    try:\n        sns.distplot(combined_df[skew_col[i]], fit=norm, ax=ax)\n    except:\n        # kde\u8a08\u7b97\u3067\u304d\u306a\u3044\u6642\u306f\u3001kde=False\n        sns.distplot(combined_df[skew_col[i]], fit=norm, kde=False, ax=ax)\nplt.show()","3e0c9ef3":"var_df = combined_df[:train_num].copy()\n# label encodin\u5bfe\u8c61\u5217\u53d6\u308a\u51fa\u3057\nobject_df = var_df[object_list]\n# VarianceThreshold\u3092\u4f7f\u3046\u305f\u3081\u3001\u4e00\u6642\u7684\u306bobject\u578b\u3092label encoding\nobject_df = object_df.apply(LabelEncoder().fit_transform)\nvar_df[object_list] = object_df\n\n# \u6b63\u898f\u5316\u3057\u3066\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\nSS = MinMaxScaler()\nSS = SS.fit(var_df.values)\nobject_np = SS.transform(var_df.values)\nvar_df = pd.DataFrame(data=object_np, columns=var_df.columns)","66d4a491":"# threshlod=0.01\u3067\u5b9a\u6570\u306b\u8fd1\u3044\u304b\u5224\u5b9a\nconstant_filter = VarianceThreshold(threshold=0.01)\nconstant_filter.fit(var_df)\n\n# \u524a\u9664\u5bfe\u8c61\u5217\u53d6\u5f97\nconst_flag = constant_filter.get_support() # \u5b9a\u6570\u306b\u8fd1\u3044\u5909\u6570\u30d5\u30e9\u30b0\nconst_cols = [x for x in var_df.columns if x not in var_df.columns[const_flag]]\nprint('\u524a\u9664\u5bfe\u8c61\u5217\uff1a', const_cols)","293f87c1":"# \u524a\u9664\u3059\u308b\u524d\u306b\u3001\u524a\u9664\u5bfe\u8c61\u5217\u306e\u5206\u5e03\u78ba\u8a8d\nfig = plt.figure(figsize=(15, 10))\nplt.subplots_adjust(wspace=0.4, hspace=0.4)\n\nfor i in range(len(const_cols)):\n    ax = fig.add_subplot(2, 5, i+1)\n    sns.distplot(var_df[const_cols[i]], kde=False, ax=ax)\n\nplt.show()","ac5fa79f":"# \u5b9f\u8cea\u5b9a\u6570\u306e\u5909\u6570\u3092\u524a\u9664\n\n# \u540d\u7fa9\u5909\u6570\nall_nominal_list = list(set(all_nominal_list) - set(const_cols))\n# \u9806\u5e8f\u5909\u6570\nall_ordinal_list = list(set(all_ordinal_list) - set(const_cols))\n# \u91cf\u7684\u5909\u6570\nall_numeric_list = list(set(all_numeric_list) - set(const_cols))","02a57ae4":"# CentralAir\nCE_order = {'Y': 1, 'N': 0}\ncombined_df['CentralAir'] = combined_df['CentralAir'].map(CE_order).astype(int)\n\n# BsmtExposure\nBE_order = {'None': 0, 'No': 1, 'Mn': 2, 'Av': 3, 'Gd': 4}\ncombined_df['BsmtExposure'] = combined_df['BsmtExposure'].map(BE_order).astype(int)\n\n# ExterQual\nEQ_order = {'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ncombined_df['ExterQual'] = combined_df['ExterQual'].map(EQ_order).astype(int)\n\n# GarageQual\nGQ_order = {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ncombined_df['GarageQual'] = combined_df['GarageQual'].map(GQ_order).astype(int)\n\n# LandSlope\nLS_order = {'Sev': 0, 'Mod': 1, 'Gtl': 2}\ncombined_df['LandSlope'] = combined_df['LandSlope'].map(LS_order).astype(int)\n\n# OverallCond - \u4e0d\u8981\n\n# HeatingQC\nHQ_order = {'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ncombined_df['HeatingQC'] = combined_df['HeatingQC'].map(HQ_order).astype(int)\n\n# FireplaceQu\nFQ_order = {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ncombined_df['FireplaceQu'] = combined_df['FireplaceQu'].map(FQ_order).astype(int)\n\n# BsmtQual\nBQ_order = {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ncombined_df['BsmtQual'] = combined_df['BsmtQual'].map(BQ_order).astype(int)\n\n# KitchenQual\nKQ_order = {'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ncombined_df['KitchenQual'] = combined_df['KitchenQual'].map(KQ_order).astype(int)\n\n# OverallQual - \u4e0d\u8981\n\n# GarageCond\nGC_order = {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ncombined_df['GarageCond'] = combined_df['GarageCond'].map(GC_order).astype(int)\n\n# GarageFinish\nGF_order = {'None': 0, 'Unf': 1, 'RFn': 2, 'Fin': 3}\ncombined_df['GarageFinish'] = combined_df['GarageFinish'].map(GF_order).astype(int)\n\n# BsmtFinType2\nBF_order = {'None': 0, 'Unf': 1, 'LwQ': 2, 'Rec': 3, 'BLQ': 4, 'ALQ': 5, 'GLQ': 6}\ncombined_df['BsmtFinType2'] = combined_df['BsmtFinType2'].map(BF_order).astype(int)\n\n# BsmtFinType1\nBF_order = {'None': 0, 'Unf': 1, 'LwQ': 2, 'Rec': 3, 'BLQ': 4, 'ALQ': 5, 'GLQ': 6}\ncombined_df['BsmtFinType1'] = combined_df['BsmtFinType1'].map(BF_order).astype(int)\n\n# Functional\nF_order = {'Sal':1, 'Sev':2, 'Maj2': 3, 'Maj1': 4, 'Mod': 5, 'Min2': 6, 'Min1': 7, 'Typ': 8}\ncombined_df['Functional'] = combined_df['Functional'].map(F_order).astype(int)\n\n# Electrical\nE_order = {'Mix': 1, 'FuseP': 2, 'FuseF': 3, 'FuseA': 4, 'SBrkr': 5}\ncombined_df['Electrical'] = combined_df['Electrical'].map(E_order).astype(int)\n\n# ExterCond\nEC_order = {'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ncombined_df['ExterCond'] = combined_df['ExterCond'].map(EC_order).astype(int)\n\n# BsmtCond\nBC_order = {'None': 0, 'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5}\ncombined_df['BsmtCond'] = combined_df['BsmtCond'].map(BC_order).astype(int)\n\n# Fence\nFe_order = {'None': 0, 'MnWw': 1, 'GdWo': 2, 'MnPrv': 3, 'GdPrv': 4}\ncombined_df['Fence'] = combined_df['Fence'].map(Fe_order).astype(int)","d6a25f4e":"# \u5bfe\u8c61\u5909\u6570\ny_m_list = ['YearBuilt', 'YrSold', 'GarageYrBlt', 'YearRemodAdd', 'MoSold', 'SalePrice']\ny_m_df = combined_df.loc[:train_num, y_m_list]\n\n# \u53ef\u8996\u5316\ncorr_y_m = y_m_df.corr()\ncorr_y_m","5dbd5dd0":"# 'YrSold'\u3068'GarageYrBlt'\u3092\u540d\u7fa9\u5909\u6570\u3078\u79fb\u52d5\n\nall_nominal_list = all_nominal_list + ['YrSold', 'GarageYrBlt']\n\nall_ordinal_list.remove('YrSold')\nall_ordinal_list.remove('GarageYrBlt')","69c88b7f":"# \u540d\u7fa9\u5909\u6570\u30c7\u30fc\u30bf\u53d6\u308a\u51fa\u3057\nBE_df = combined_df[all_nominal_list].copy()\n\n# Binary Encoding\nBE_df = BinaryEncoder(cols=all_nominal_list).fit_transform(BE_df)\n\n# \u5909\u63db\u524d\u306e\u5909\u6570\u524a\u9664\ncombined_df.drop(all_nominal_list, axis=1, inplace=True)\n\n# Encoding\u5f8c\u306e\u30c7\u30fc\u30bf\u53cd\u6620\ncombined_df[BE_df.columns] = BE_df\n\n# \u540d\u7fa9\u5909\u6570\u30ea\u30b9\u30c8\u306e\u66f4\u65b0\nall_nominal_list = list(BE_df.columns)","7248bb40":"# \u5bfe\u8c61\u5909\u6570\u306e\u30c7\u30fc\u30bf\u53d6\u308a\u51fa\u3057\nselected_df = combined_df[all_nominal_list + all_ordinal_list + all_numeric_list]\n\n# \u30c7\u30fc\u30bf\u3092\u8a13\u7df4\u3001\u30c6\u30b9\u30c8\u7528\u306b\u5206\u5272\ntrain_df = selected_df.iloc[:train_num, :]\ntest_df = selected_df.iloc[train_num:, :]","b62594ef":"selected_df.to_csv('\/kaggle\/working\/selected_df_0616.csv', index=False)\ntrain_SalePrice.to_csv('\/kaggle\/working\/SalePrice_df_0616.csv', index=False)","b0f8f4a8":"# \u8a55\u4fa1\u95a2\u6570\u4f5c\u6210\ndef rmse_r2(y, pred_y):\n    rmse = np.sqrt(mean_squared_error(y, pred_y))\n    r2 = r2_score(y, pred_y)\n    print(\"test's rmse score: {:.3f}\".format(rmse))\n    print(\"test's r2 score: {:.3f}\".format(r2))","33c795f8":"# \u8a55\u4fa1\u7528\u306b\u30c7\u30fc\u30bf\u5206\u5272\ntrain_x, test_x, train_y, test_y = train_test_split(train_df, train_SalePrice, test_size=0.25, random_state=2)","e35c6937":"%%time\n\n# pipeline\u8a2d\u5b9a\npipeline = Pipeline(\n            [\n             ('preprocessing', StandardScaler()),\n             ('model', Ridge())\n            ])\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\n# params = {'model__alpha': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}\nparams = {'model__alpha': np.linspace(10, 150, 50)}\n\n# KFold\u8a2d\u5b9a\nr_kfold = RepeatedKFold(n_splits=8, n_repeats=3, random_state=42)\n\n# grid search\ngrid = GridSearchCV(pipeline, params, cv=r_kfold, scoring='neg_root_mean_squared_error', n_jobs=-1)\ngrid.fit(train_x, train_y)\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4fdd\u5b58\nRidge_param = grid.best_params_\n\nprint('Best score: {:.3f}'.format(np.abs(grid.best_score_)))\nprint('Best parameter: ', grid.best_params_)","bd187b25":"pred_y = grid.predict(test_x)\nrmse_r2(test_y, pred_y)","235bd005":"%%time\n\n# pipeline\u8a2d\u5b9a\npipeline = Pipeline(\n            [\n             ('preprocessing', StandardScaler()),\n             ('model', Lasso())\n            ])\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\n# params = {'model__alpha': [0.001, 0.01, 0.1, 1, 10, 100, 1000]}\nparams = {'model__alpha': [0.0005, 0.00075, 0.001, 0.0025, 0.005, 0.0075, 0.01]}\n\n# KFold\u8a2d\u5b9a\nr_kfold = RepeatedKFold(n_splits=8, n_repeats=3, random_state=42)\n\n# grid search\ngrid = GridSearchCV(pipeline, params, cv=r_kfold, scoring='neg_root_mean_squared_error', n_jobs=-1)\ngrid.fit(train_x, train_y)\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4fdd\u5b58\nLasso_param = grid.best_params_\n\nprint('Best score: {:.3f}'.format(np.abs(grid.best_score_)))\nprint('Best parameter: ', grid.best_params_, '\\n')","0e39c2dd":"pred_y = grid.predict(test_x)\nrmse_r2(test_y, pred_y)","b9602e72":"%%time\n\n# pipeline\u8a2d\u5b9a\npipeline = Pipeline(\n            [\n             ('preprocessing', StandardScaler()),\n             ('model', ElasticNet())\n            ])\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\n# params = {'model__alpha': [0.0001, 0.001, 0.01, 0.1, 1, 10, 100],\n        #   'model__l1_ratio': np.arange(0.0, 1.0, 0.1)}\nparams = {'model__alpha': [0.005, 0.0075, 0.01, 0.025, 0.05],\n          'model__l1_ratio': [0.015,0.0175, 0.2, 0.25, 0.275]}\n\n# KFold\u8a2d\u5b9a\nr_kfold = RepeatedKFold(n_splits=8, n_repeats=3, random_state=42)\n\n# grid search\ngrid = GridSearchCV(pipeline, params, cv=r_kfold, scoring='neg_root_mean_squared_error', n_jobs=-1)\ngrid.fit(train_x, train_y)\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4fdd\u5b58\nElastic_param = grid.best_params_\n\nprint('Best score: {:.3f}'.format(np.abs(grid.best_score_)))\nprint('Best parameter: ', grid.best_params_, '\\n')","4926ac58":"pred_y = grid.predict(test_x)\nrmse_r2(test_y, pred_y)","d8413188":"%%time\n\n# pipeline\u8a2d\u5b9a\npipeline = Pipeline(\n            [\n             ('preprocessing', StandardScaler()),\n             ('model', SVR())\n            ])\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\n# params = {'model__kernel': ['rbf'],\n#           'model__C' : [0.001, 0.01, 1, 10, 100,1000],\n#           'model__gamma':[0.001, 0.01, 1, 10, 100,1000]}\nparams = {'model__kernel': ['rbf'],\n          'model__C' : [0.05, 0.75, 1, 1.25, 1.5, 1.75, 2],\n          'model__gamma':[0.0005, 0.00075, 0.001, 0.0025, 0.005, 0.0075, 0.01]}\n\n# KFold\u8a2d\u5b9a\nr_kfold = RepeatedKFold(n_splits=8, n_repeats=3, random_state=42)\n\n# grid search\ngrid = GridSearchCV(pipeline, params, cv=r_kfold, scoring='neg_root_mean_squared_error', n_jobs=-1)\ngrid.fit(train_x, train_y)\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4fdd\u5b58\nSVR_param = grid.best_params_\n\nprint('Best score: {:.3f}'.format(np.abs(grid.best_score_)))\nprint('Best parameter: ', grid.best_params_, '\\n')","46144293":"pred_y = grid.predict(test_x)\nrmse_r2(test_y, pred_y)","64ff1990":"%%time\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\nn_estimators = [int(x) for x in np.linspace(start=200, stop=2000, num=10)] # 10\u500b\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(start=10, stop=200, num = 10)]\nmin_samples_split = [2,5,10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\n\nparams = {'n_estimators': n_estimators,\n          'max_features': max_features,\n          'max_depth': max_depth,\n          'min_samples_split': min_samples_split,\n          'min_samples_leaf': min_samples_leaf,\n          'bootstrap': bootstrap}\n\n# KFold\u8a2d\u5b9a\nr_kfold = RepeatedKFold(n_splits=8, n_repeats=3, random_state=42)\n\n# grid search\ngrid = RandomizedSearchCV(RandomForestRegressor(), params, cv=r_kfold, scoring='neg_root_mean_squared_error', n_jobs=-1)\ngrid.fit(train_x, train_y)\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4fdd\u5b58\nRF_param = grid.best_params_\n\nprint('Best score: {:.3f}'.format(np.abs(grid.best_score_)))\nprint('Best parameter: ', grid.best_params_, '\\n')","2232bde2":"pred_y = grid.predict(test_x)\nrmse_r2(test_y, pred_y)","d015743d":"%%time\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\nn_estimators = [int(x) for x in np.linspace(start=200, stop=2000, num=10)] # 10\u500b\nmax_features = ['auto', 'sqrt']\nmax_depth = [int(x) for x in np.linspace(start=10, stop=200, num = 10)]\nmin_samples_split = [2,5,10]\nmin_samples_leaf = [1, 2, 4]\nbootstrap = [True, False]\n\nparams = {\n    \"loss\":[\"huber\"],\n    \"learning_rate\": [0.01, 0.025, 0.05, 0.075, 0.1, 0.15, 0.2],\n    \"min_samples_split\": np.linspace(0.1, 0.5, 12),\n    \"min_samples_leaf\": np.linspace(0.1, 0.5, 12),\n    \"max_depth\":[3,5,8,11],\n    \"max_features\":[\"log2\",\"sqrt\", \"auto\"],\n    \"subsample\":[0.5, 0.618, 0.8, 0.85, 0.9, 0.95, 1.0],\n    \"n_estimators\":[50, 100, 150, 200, 250, 300]\n    }\n\n# KFold\u8a2d\u5b9a\nr_kfold = RepeatedKFold(n_splits=8, n_repeats=3, random_state=42)\n\n# grid search\ngrid = RandomizedSearchCV(GradientBoostingRegressor(), params, cv=r_kfold, scoring='neg_root_mean_squared_error', n_jobs=-1)\ngrid.fit(train_x, train_y)\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4fdd\u5b58\nGB_param = grid.best_params_\n\nprint('Best score: {:.3f}'.format(np.abs(grid.best_score_)))\nprint('Best parameter: ', grid.best_params_, '\\n')","c8a30073":"pred_y = grid.predict(test_x)\nrmse_r2(test_y, pred_y)","5c2cd601":"# lightgbm\u7528\u30c7\u30fc\u30bf\u6e96\u5099\nlgb_train = lgb.Dataset(train_x, train_y)\nlgb_test = lgb.Dataset(test_x, test_y)","05526149":"def objective(trial):\n    params = {\n        'objective': 'regression',\n        'metric': 'rmse',\n        'lambda_l1': trial.suggest_loguniform('lambda_l1', 1e-8, 10.0),\n        'lambda_l2': trial.suggest_loguniform('lambda_l2', 1e-8, 10.0),\n        'num_leaves': trial.suggest_int('num_leaves', 2, 256),\n        'feature_fraction': trial.suggest_uniform('feature_fraction', 0.4, 1.0),\n        'bagging_fraction': trial.suggest_uniform('bagging_fraction', 0.4, 1.0),\n        'bagging_freq': trial.suggest_int('bagging_freq', 1, 7),\n        'min_child_samples': trial.suggest_int('min_child_samples', 5, 100)\n    }\n    # \u8a13\u7df4\n    gbm = lgb_optuna.train(params,\n                           lgb_train,\n                           valid_sets=(lgb_train, lgb_test),\n                           num_boost_round=10000,\n                           early_stopping_rounds=100,\n                           verbose_eval=50)\n    # \u4e88\u6e2c\u3068\u30b9\u30b3\u30a2\n    predicted = gbm.predict(test_x)\n    rmse = np.sqrt(mean_squared_error(test_y, predicted))\n        \n    return rmse","dcf78f14":"# \u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\nstudy_gbm = optuna.create_study()\nstudy_gbm.optimize(objective, timeout=1800)","73b5460e":"print('best score: {:.3f}'.format(study_gbm.best_value))\nprint('parameters: ',study_gbm.best_params)","291f2b6d":"def objective(trial):\n    # \u30d1\u30e9\u30e1\u30fc\u30bf\u8a2d\u5b9a\n    n_estimators = trial.suggest_int('n_estimators', 0, 10000)\n    max_depth = trial.suggest_int('max_depth', 1, 20)\n    min_child_weight = trial.suggest_int('min_child_weight', 1, 20)\n    learning_rate = trial.suggest_discrete_uniform('learning_rate', 0.001, 0.01, 0.001)\n    scale_pos_weight = trial.suggest_int('scale_pos_weight', 1, 100)\n    subsample = trial.suggest_discrete_uniform('subsample', 0.5, 0.9, 0.1)\n    colsample_bytree = trial.suggest_discrete_uniform('colsample_bytree', 0.5, 0.9, 0.1)\n\n    xgb_ob = xgb.XGBRegressor(\n        random_state=42,\n        n_estimators = n_estimators,\n        max_depth = max_depth,\n        min_child_weight = min_child_weight,\n        learning_rate = learning_rate,\n        scale_pos_weight = scale_pos_weight,\n        subsample = subsample,\n        colsample_bytree = colsample_bytree\n    )\n\n    # \u8a13\u7df4\u30fb\u30b9\u30b3\u30a2\u30ea\u30f3\u30b0\n    xgb_ob.fit(train_x, train_y)\n    predicted = xgb_ob.predict(test_x)\n    rmse = np.sqrt(mean_squared_error(test_y, predicted))\n        \n    return rmse","f78cace0":"# \u8a13\u7df4\nstudy_xgb = optuna.create_study()\nstudy_xgb.optimize(objective, timeout=1800)\n\n# \u7d50\u679c\nprint('best score: {:.3f}'.format(study_xgb.best_value))\nprint('parameters: ', study_xgb.best_params)","e21dc344":"# \u5404\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\nridge_param = {'alpha': 50.0}\nlasso_param = {'alpha': 0.0025}\nelas_param = {'alpha': 0.0075, 'l1_ratio': 0.275}\nsvr_param = {'C': 2, 'gamma': 0.00075, 'kernel': 'rbf'}\n\n# \u30e2\u30c7\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\nmodel_list = [Ridge(**ridge_param), Lasso(**lasso_param), ElasticNet(**elas_param), SVR(**svr_param)]\n\nmodel_name = ['Ridge', 'Lasso', 'ElasticNet', 'SVR']","cfcd45f6":"for i in range(len(model_list)):\n    \n    # pipeline\u8a2d\u5b9a\n    pipeline = Pipeline(\n                [\n                 ('preprocessing', StandardScaler()),\n                 ('model', model_list[i])\n                ])\n\n    scores = cross_val_score(pipeline, train_df, train_SalePrice, cv=8, scoring='neg_root_mean_squared_error', n_jobs=-1)\n    scores = np.abs(scores)\n    print('-- ',model_name[i],' --')\n#     print('scores: ',scores)\n    print('rmse_mean: {:.4f} rmse_std: {:.4f}'.format(np.mean(scores), np.std(scores)))","30a11bb2":"# \u5404\u30e2\u30c7\u30eb\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\nRF_param = {'n_estimators': 200, 'min_samples_split': 2, 'min_samples_leaf': 2, \n            'max_features': 'sqrt', 'max_depth': 157, 'bootstrap': False}\nGB_param = {'subsample': 0.95, 'n_estimators': 250, 'min_samples_split': 0.1, \n            'min_samples_leaf': 0.13636363636363638, 'max_features': 'log2', \n            'max_depth': 8, 'loss': 'huber', 'learning_rate': 0.15}\n\n\n# \u30e2\u30c7\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\nmodel_list = [RandomForestRegressor(**RF_param), GradientBoostingRegressor(**GB_param)]\n\nmodel_name = ['Random Forest', 'Gradient Boosting']","61096e01":"for i in range(len(model_list)):\n\n    scores = cross_val_score(model_list[i], train_df, train_SalePrice, cv=8, scoring='neg_root_mean_squared_error', n_jobs=-1)\n    scores = np.abs(scores)\n    print('-- ',model_name[i],' --')\n#     print('scores: ',scores)\n    print('rmse_mean: {:.4f} rmse_std: {:.4f}'.format(np.mean(scores), np.std(scores)))","5928b002":"# lightgbm\u7528\u30c7\u30fc\u30bf\nlgb_data = lgb.Dataset(train_df.values, train_SalePrice.values)\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\nlgb_param = {'lambda_l1': 2.5456694926318675e-08, 'lambda_l2': 1.133230160071623e-08, \n             'num_leaves': 4, 'feature_fraction': 0.5607153808743172, \n             'bagging_fraction': 0.7817404071420171, 'bagging_freq': 1,\n             'min_child_samples': 5, 'objective': 'regression', 'metric': 'rmse'}\n\n\ncv_results = lgb.cv(lgb_param, \n                    lgb_data,\n                    num_boost_round=10000,\n                    nfold=8,\n                    verbose_eval=20,\n                    early_stopping_rounds=100,\n                    stratified=False) # regression\u306e\u6642\u306f\u3001stratified=False","3488ed65":"# \u30d6\u30fc\u30c8\u30e9\u30a6\u30f3\u30c9\u6bce\u306eRMSE\u5024\u53d6\u308a\u51fa\u3057\ncv_rmse = cv_results['rmse-mean']\n# \u30d6\u30fc\u30c8\u30e9\u30f3\u30c9\u6570array\u53d6\u308a\u51fa\u3057\nround_num = np.arange(len(cv_rmse))\n\n# \u6700\u826fRMSE\u30b9\u30b3\u30a2\u3068\u3001\u305d\u306e\u6642\u306e\u30d6\u30fc\u30c8\u30e9\u30a6\u30f3\u30c9\u6570\nprint('Best num_boost_round: ',len(cv_rmse))\nprint(\"Best CV's RMSE score: {:.3f}\".format(cv_rmse[-1]))\nprint(\"std: {:.4f}\".format(cv_results['rmse-stdv'][-1]))\n\n# \u30d6\u30fc\u30c8\u30e9\u30a6\u30f3\u30c9\u6bce\u306eRMSE\u30b9\u30b3\u30a2\u306e\u53ef\u8996\u5316\n# fig = plt.figure()\n# plt.xlabel('round')\n# plt.ylabel('RMSE-mean')\n# plt.plot(round_num, cv_rmse)\n# plt.show()","a0de94b8":"# \u30d1\u30e9\u30e1\u30fc\u30bf\nxgb_param = {'n_estimators': 998,'max_depth': 16, 'min_child_weight': 4,\n             'learning_rate': 0.01, 'scale_pos_weight': 14, 'subsample': 0.5,\n             'colsample_bytree': 0.9}\n\n# xgb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u7528\u610f\nxgb_ob = xgb.XGBRegressor(**xgb_param)\n\n# \u4ea4\u5dee\u691c\u8a3c\nkfold = KFold(n_splits=8, random_state=1)\nscores = cross_val_score(xgb_ob, train_df, train_SalePrice, cv=kfold,\n                         scoring='neg_root_mean_squared_error', n_jobs=-1)\n\n# \u7d50\u679c\nscores = np.abs(scores)\nprint('rmse_mean: {:.4f} \/ rmse_std: {:.4f}'.format(np.mean(scores), np.std(scores)))","f750ba69":"# \u30d1\u30e9\u30e1\u30fc\u30bf\nEN_param = {'alpha': 0.0075, 'l1_ratio': 0.275}\n\n# \u6b63\u898f\u5316\nscaler = StandardScaler()\nscaler.fit(train_df)\nSS_train = scaler.transform(train_df)\nSS_test = scaler.transform(test_df)\n\n# \u30e2\u30c7\u30ea\u30f3\u30b0\nEN_ob = ElasticNet(**EN_param)\nEN_ob.fit(SS_train, train_SalePrice)\n\n# \u4e88\u6e2c\nEN_predicted = EN_ob.predict(SS_test)\nEN_ex_predicted = np.expm1(EN_predicted)\npredicted_df = pd.DataFrame({'Id': test_Id.values, 'SalePrice': EN_ex_predicted})\npredicted_df.to_csv('\/kaggle\/working\/Ver6_ElasticNet_0619.csv', index=False)","10ed6d65":"# \u30d1\u30e9\u30e1\u30fc\u30bf\nRF_param = {'n_estimators': 200, 'min_samples_split': 2, 'min_samples_leaf': 2, \n            'max_features': 'sqrt', 'max_depth': 157, 'bootstrap': False}\n\n# \u30e2\u30c7\u30ea\u30f3\u30b0\nRF_ob = RandomForestRegressor(**RF_param)\nRF_ob.fit(train_df, train_SalePrice)\n\n# \u4e88\u6e2c\nRF_predicted = RF_ob.predict(test_df)\nRF_ex_predicted = np.expm1(RF_predicted)\npredicted_df = pd.DataFrame({'Id': test_Id.values, 'SalePrice': RF_ex_predicted})\npredicted_df.to_csv('\/kaggle\/working\/Ver6_RandomForest_0619.csv', index=False)","1aac7d01":"# \u30d1\u30e9\u30e1\u30fc\u30bf\nxgb_param = {'n_estimators': 998,'max_depth': 16, 'min_child_weight': 4,\n             'learning_rate': 0.01, 'scale_pos_weight': 14, 'subsample': 0.5,\n             'colsample_bytree': 0.9}\n\n# \u30e2\u30c7\u30ea\u30f3\u30b0\nxgb_ob = xgb.XGBRegressor(**xgb_param)\nxgb_ob.fit(train_df, train_SalePrice)\n\n# \u4e88\u6e2c\nxgb_predicted = xgb_ob.predict(test_df)\nxgb_ex_predicted = np.expm1(xgb_predicted)\npredicted_df = pd.DataFrame({'Id': test_Id.values, 'SalePrice': xgb_ex_predicted})\npredicted_df.to_csv('\/kaggle\/working\/Ver6_xgboost_0619.csv', index=False)","cfca7a5f":"# ElasticNet\u3068XGBoost\u306e\u4e88\u6e2c\u7d50\u679c\u306e\u5e73\u5747\u3092\u63d0\u51fa\nstacked_result = (EN_predicted + xgb_predicted) \/ 2\nex_stacked_reslut = np.expm1(stacked_result)\npredicted_df = pd.DataFrame({'Id': test_Id.values, 'SalePrice': ex_stacked_reslut})\npredicted_df.to_csv('\/kaggle\/working\/Ver6_ElasticNet&XGBoost_0619.csv', index=False)","ff3ff179":"Best score: 0.119  \nBest parameter:  {'model__C': 2, 'model__gamma': 0.00075, 'model__kernel': 'rbf'}   \ntest's rmse score: 0.115  \ntest's r2 score: 0.914  ","051c5a79":"-> \u3069\u306e\u5909\u6570\u3082\u5b9a\u6570\u306b\u8fd1\u3044\u5206\u5e03\u306a\u306e\u3067\u524a\u9664\u3059\u308b\u3002(\u898b\u305f\u611f\u3058LotFrontage\u304c\u6c17\u306b\u306a\u308b\u304c\u3068\u308a\u3042\u3048\u305a\u524a\u9664\u3057\u3066\u307f\u308b\uff09","a4896da1":"\u30fb\u540d\u7fa9\u5909\u6570\u306e\u6570\u5024\u5316\uff1aBinaryEncoding\u306e\u5229\u7528","38b943a5":"# (3) \u30e2\u30c7\u30ea\u30f3\u30b0  \n  \n+ \u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\n    + ElasticNet\n    + Ridge\n    + Lasso\n    + SVR\n+ \u6c7a\u5b9a\u6728\n    + RandomForestRegressor\n    + GradientBoostingRegressor\n    + lightgbm","1e4d1522":"\u30fc\uff1e\u3069\u306e\u5909\u6570\u3092\u91cd\u307f\u4ed8\u3051\u3059\u3079\u304d\u304b\u3001\u76ee\u8996\u3067\u898b\u3064\u3051\u308b\u306e\u304c\u96e3\u3057\u3044\u306e\u3067\u3001ANOVA\u306a\u3069\u306e\u5206\u6563\u5206\u6790\u3067\u3001\u6709\u610f\u5dee\u3042\u3063\u3066\u52b9\u679c\u91cf\u304c\u9ad8\u3044\u5909\u6570\u3092\u62bd\u51fa\u3059\u308b\u3068\u304b\u3059\u308c\u3070\u3044\u3044\u306e\u304b\uff1f\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f\u3001\u540d\u7fa9\u5909\u6570\u306b\u5206\u3051\u305f\u5909\u6570\u306f\u3059\u3079\u3066BinaryEncoding\u3057\u3066\u3057\u307e\u3046\u3002","42e1200c":"-> 1298\u304c\uff13\u5909\u6570\u306e\u5916\u308c\u5024\u6301\u3063\u3066\u3044\u305f\u3002","0a4bbd8f":"Best num_boost_round:  412  \nBest CV's RMSE score: 0.119  \nstd: 0.0131  \n  \n-> \u30d6\u30fc\u30c8\u30e9\u30a6\u30f3\u30c9\u6570412\u306e\u3068\u304d\u306b\u3001RMSE\u306e\u4ea4\u5dee\u691c\u8a3c\u5024\u304c\u6700\u826f\u3002","49203e66":"#### \u30fb\u91cf\u7684\u5909\u6570\u306e\u5206\u5e03\u78ba\u8a8d","bc15dff1":"### \u30fb\u5206\u985e\u6728\u30e2\u30c7\u30eb\uff12(lightgbm, xgboost)","dcdc1988":"\u30fblightgbm","c47e4882":"## \u30e2\u30c7\u30eb\u8a55\u4fa1  \n\u4ea4\u5dee\u691c\u8a3c\u306b\u3088\u308a\u3001\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3001\u5206\u985e\u6728\u30e2\u30c7\u30eb\u3001\u305d\u308c\u305e\u308c\u306e\u4e2d\u3067\u3001\u6c4e\u5316\u6027\u80fd\u304c\u4e00\u756a\u826f\u3044\u30e2\u30c7\u30eb\u3092\u6c7a\u3081\u308b\u3002  ","996123ee":"+ Ridge  \n        + rmse_mean: 0.1143\n        + rmse_std: 0.0120  \n+ Lasso  \n        + rmse_mean: 0.1136\n        + rmse_std: 0.0118  \n+ ElasticNet  \n        + rmse_mean: 0.1135\n        + rmse_std: 0.0118  \n+ SVR  \n        +rmse_mean: 0.1170\n        + rmse_std: 0.0115  \n  \n-> SVR\u4ee5\u5916\u306f\u3001\u307b\u3068\u3093\u3069\u9055\u3044\u304c\u306a\u3044\u304c\u3001ElasticNet\u3067\u6700\u7d42\u4e88\u6e2c\u7acb\u3066\u308b\u3002","b5db8090":"# (1) \u5185\u5bb9  \n  \nVer5\u3067\u306e\u4fee\u6b63\u70b9  \n+ \u5916\u308c\u5024\u306e\u51e6\u7406\uff1a\n    + \u524d\u56de\u307e\u3067\u5168\u3066\u306e\u5909\u6570\u306b\u5bfe\u3057\u3066\u4e00\u5f8b\u30671.5IQR\u306e\u5024\u3092\u8d85\u3048\u305f\u5024\u30925%,95%tile\u3067\u7f6e\u304d\u63db\u3048\u3066\u3044\u305f\u304c\u3001Ver5\u3067\u306f\u4e00\u5f8b\u306b\u7f6e\u304d\u63db\u3048\u305a\u306b\u3001\u91cd\u8981\u306a\u5909\u6570(SalePrice\u3068\u76f8\u95a2\u306e\u9ad8\u3044\u5909\u6570)\u306e\u307f\u5916\u308c\u5024\u306e\u524a\u9664\u3092\u691c\u8a0e\u3059\u308b\u3002  \n+ \u6b20\u640d\u5024\u306e\u51e6\u7406\uff1a\n    + \u554f\u984c\u70b9\uff11\uff1a\u3053\u306e\u30c7\u30fc\u30bf\u306e\u6b20\u640d\u5024\u306e\u610f\u5473\u3092\u6b63\u3057\u304f\u628a\u63e1\u305b\u305a\u3001\u4e00\u5f8b\u3067\u4e2d\u592e\u5024\u306a\u3069\u3067\u57cb\u3081\u5408\u308f\u305b\u3066\u3044\u305f\u3002\n    + \u554f\u984c\u70b9\uff12\uff1anan\u3092\u5358\u306a\u308b\u6b20\u640d\u5024\u3068\u601d\u3044\u3001nan\u304c\uff18\u5272\u4ee5\u4e0a\u3042\u308b\u5909\u6570\u3092\u4e00\u5f8b\u3067\u524a\u9664\u3057\u3066\u3044\u305f\u3002\n    + \u4fee\u6b63\u65b9\u6cd5\uff1a\u5909\u6570\u3054\u3068\u306e\u6b20\u640d\u5024\u306e\u610f\u5473\u3092\u628a\u63e1\u3057\u3001\u5909\u6570\u6bce\u306b\u9069\u5207\u306a\u5024\u3067\u57cb\u3081\u308b\u3002 \n+ \u5909\u6570\u5909\u63db\uff1a\n    + \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u6570\u5024\u5316\uff1a\u524d\u56de\u3068\u540c\u69d8\u306b\u3001\u540d\u7fa9\u5909\u6570\u306fBinary Encoding\u3001\u9806\u5e8f\u5909\u6570\u306fOrdinal Encoding\u3002\n    + \u7dda\u5f62\u56de\u5e30\u5bfe\u5fdc\uff1a\u5f93\u5c5e\u30fb\u72ec\u7acb\u5909\u6570\u3068\u3082\u306b\u6b6a\u5ea6\u306a\u3069\u3092\u8abf\u3079\u3066\u3001\u6b63\u898f\u5206\u5e03\u306b\u8fd1\u3065\u3051\u308b\u3002\n    + ~~\u30ab\u30c6\u30b4\u30ea\u6570\u306e\u5206\u5e03\u306b\u504f\u308a\u306e\u3042\u308b\u5909\u6570\uff1a\u5b9f\u8cea\u30ab\u30c6\u30b4\u30ea\uff12\u500b\u3057\u304b\u7121\u3044\u5909\u6570\u306f\uff12\u5024\u5909\u6570\u5316\u3059\u308b\u3002~~ (\u9762\u5012\u306a\u306e\u3067\u524a\u9664)\n    + ~~\u4f3c\u305f\u30b8\u30e3\u30f3\u30eb\u306e\u5909\u6570\u306f\u5408\u4f53\u3057\u3066\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u308b\u3002~~ (\u9762\u5012\u306a\u306e\u3067\u524a\u9664)\n+ \u5909\u6570\u9078\u629e\uff1a\n    + \u524d\u56de\u3068\u540c\u69d8\u306b\u5b9f\u8cea\u5b9a\u6570\u3068\u5909\u308f\u3089\u306a\u3044\u5909\u6570\u306f\u9664\u5916\u3059\u308b\u3002\n    + \u524a\u9664\u306e\u3057\u304d\u3044\u5024\u306f\u3001\u6b63\u898f\u5206\u5e03\u3068\u4eee\u5b9a\u3057\u5206\u6563\u304c0.01\u672a\u6e80\u306e\u5909\u6570\n+ \u30e2\u30c7\u30eb\u9078\u629e\uff1a\n    + stacked model \u8a66\u3059\n    + \u4ea4\u5dee\u691c\u8a3c\u3067\u3001\u5404\u30e2\u30c7\u30eb\u3054\u3068\u306e\u6c4e\u5316\u6027\u80fd\u3092\u8abf\u3079\u308b\n    + \u30c7\u30fc\u30bf\u30ea\u30fc\u30af\u8d77\u3053\u3055\u306a\u3044\u3088\u3046\u306b\u3001pipeline\u4f7f\u3046\n  ","98ca3f69":"### \u30fbCategorical\u5909\u6570\u3068Numerical\u5909\u6570\u306b\u5206\u3051\u308b\u3002  Categorical\u5909\u6570\u306f\u3055\u3089\u306b\u3001\u9806\u5e8f\u5909\u6570\u3068\u540d\u7fa9\u5909\u6570\u306b\u5206\u3051\u308b","dc2d2330":"### 6-3 \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u6570\u5024\u5316\uff1a\u524d\u56de\u3068\u540c\u69d8\u306b\u3001\u540d\u7fa9\u5909\u6570\u306fBinary Encoding\u3001\u9806\u5e8f\u5909\u6570\u306fOrdinal Encoding","a028fafb":"### float\u578b\u5909\u6570\u306e\u5185\u5bb9\u78ba\u8a8d","a16c77ec":"\u30fc\uff1eYrSold\u3068GarageYrBlt\u3092\u9664\u304d\u3001\u5168\u822c\u7684\u306b\u591a\u5c11\u76f8\u95a2\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u4f7f\u3046\u3002\uff08YrSold\u3068GarageYrBlt\u306f\u3001\u540d\u7fa9\u5909\u6570\u3068\u3057\u3066\u6271\u3046\u3002\uff09","e7ccfc55":"> + 400,000\u4ee5\u4e0a\u306e\u4fa1\u683c\u5e2f\u3092\u6b8b\u3059\u304b\u3001\u5916\u308c\u5024\u51e6\u7406\u306e\u3068\u304d\u306b\u691c\u8a0e\u3059\u308b\u3002\n> + \u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3082\u4f7f\u3046\u306e\u3067\u3001\u5bfe\u6570\u5909\u63db\u3067\u6b63\u898f\u5206\u5e03\u306b\u8fd1\u3065\u3051\u308b\u3002","aba8d5e5":"+ Random Forest  \n        + rmse_mean: 0.1350\n        + rmse_std: 0.0143  \n+ Gradient Boosting  \n        + rmse_mean: 0.1467\n        + rmse_std: 0.0136  \n  \n-> Random Forest \u3092\u5229\u7528\u3059\u308b","8faa1c7b":"\u30fbElasticNet","bf291b1d":"\u30fb\u30d6\u30fc\u30c8\u30e9\u30a6\u30f3\u30c9\u3054\u3068\u306ermse\u30b9\u30b3\u30a2\u306e\u78ba\u8a8d","8f3e17bb":"\u30fb\u9806\u5e8f\u5909\u6570\u306e\u6570\u5024\u5316\uff1a\u30ab\u30c6\u30b4\u30ea\u3054\u3068\u306b\u91cd\u307f\u4ed8\u3051\u3059\u308b","9feabb0c":"+ lightGBM:  \n        + RMSE score: 0.1190\n        + RMSE_std: 0.0131\n+ XGBoost:\n        + RMSE score: 0.1160\n        + RMSE_std: 0.0099\n\n\u30fc\uff1e \uff12\u7a2e\u306e\u30b9\u30b3\u30a2\u306b\u307b\u3068\u3093\u3069\u9055\u3044\u306a\u3044\u304c\u3001xgboost\u3092\u5229\u7528\u3059\u308b\u3002","5fe37a53":"#### 3-2-1 \u5f93\u5c5e\u5909\u6570\u3068\u76f8\u95a2\u306e\u9ad8\u3044\u72ec\u7acb\u5909\u6570\u306e\u78ba\u8a8d","faa0bcbe":"### \u30fb\u72ec\u7acb\u5909\u6570\u306e\u5206\u5e03\u78ba\u8a8d  \n","81da3eb4":"#### \u30fb\u540d\u7fa9\u5909\u6570\u306e\u5206\u5e03\u78ba\u8a8d","254ffd77":"### 3-1 \u72ec\u7acb\u5909\u6570\u9593\u306e\u95a2\u4fc2\uff1a\u72ec\u7acb\u5909\u6570\u9593\u3067\u76f8\u95a2\u306e\u9ad8\u3044\u5909\u6570\u306e\u78ba\u8a8d","9a854b4b":"\u30fbXGBoost","259c4cad":"\u30fbRandomForestRegressor","a9ed5d49":"\u30fc\uff1e GarageYrBlt \u306f\u3001\u9806\u5e8f\u5909\u6570\u306b\u5165\u308c\u308b","e5f33994":"\u30d1\u30d6\u30ea\u30c3\u30af\u30b9\u30b3\u30a2\uff1a0.12520","68fbe2fc":"\u30fb\u4f4f\u5b85\u8a2d\u5099\u95a2\u9023","a0d19a8f":"### 6-2 sklearn VarianceThreshold\u3067\u5b9a\u6570\u306b\u8fd1\u3044\u5909\u6570\u3092\u524a\u9664\u3059\u308b  \n  \n\u5168\u5909\u6570\u3092\u6b63\u898f\u5206\u5e03\u3068\u4eee\u5b9a\u3057\u3001\u3055\u3089\u306b\u6b63\u898f\u5316\u3057\u3066\u6700\u5c0f0\u30fb\u6700\u59271\u306b\u5909\u63db\u3057\u305f\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\u5206\u6563\u304c0.01\uff0899%\u304c\u540c\u3058\u30c7\u30fc\u30bf\uff09\u306e\u5909\u6570\u3092\u9664\u5916\u3059\u308b\u3002","e3b58b06":"### 3-2 \u5f93\u5c5e\u5909\u6570\u3068\u306e\u95a2\u4fc2\n  \n1. \u5f93\u5c5e\u5909\u6570\u3068\u76f8\u95a2\u306e\u9ad8\u3044\u72ec\u7acb\u5909\u6570\u306e\u78ba\u8a8d\n1. \u540d\u7fa9\u5909\u6570\u306e\u4e2d\u3067\u3001\u9806\u5e8f\u5909\u6570\u3068\u3057\u3066\u6271\u3046\u3079\u304d\u5909\u6570\u304c\u7121\u3044\u304b\u78ba\u8a8d","629e37c6":"## 2. \u5404\u5909\u6570\u306e\u5206\u6790  \n\u5404\u5909\u6570\u306e\u5206\u5e03\u72b6\u6cc1(\u5e73\u5747\u3001\u4e2d\u592e\u5024\u3001\u6700\u983b\u5ea6\u3001\u5206\u6563\u3001\u5916\u308c\u5024\u306e\u72b6\u6cc1\u306a\u3069)\u3092\u78ba\u8a8d\u3059\u308b  ","706e92a2":"> + \u5b9f\u8cea\u5b9a\u6570\u3068\u5909\u308f\u3089\u306a\u3044\u3088\u3046\u306a\u5909\u6570\u304c\u898b\u3089\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u3089\u306f\u5909\u6570\u9078\u629e\u306e\u969b\u306b\u524a\u9664\u3059\u308b\n> + \u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3059\u308b\u4e88\u5b9a\u306a\u306e\u3067\u3001\u6b63\u898f\u5206\u5e03\u306b\u8fd1\u3065\u3051\u308b\u305f\u3081\u3001\u3044\u304f\u3064\u304b\u306e\u5909\u6570\u3092\u5bfe\u6570\u5909\u63db\u3059\u308b","6e7ef133":"# (2) \u524d\u51e6\u7406 \n\n### \u4ee5\u4e0b\u306e\u9806\u756a\u3067\u524d\u51e6\u7406\u5b9f\u65bd  \n1. \u5909\u6570(\u7279\u5fb4\u91cf)\u306e\u78ba\u8a8d\n1. \u5404\u5909\u6570\u306e\u5206\u6790  \n1. \uff12\u5909\u6570\u9593\u306e\u5206\u6790 \n1. \u5916\u308c\u5024\u306e\u51e6\u7406\n1. \u6b20\u640d\u5024\u306e\u51e6\u7406\n1. \u5909\u6570\u9078\u629e\u3068\u5909\u6570\u5909\u63db\n\n","5fb7343e":"### \u30fb\u5909\u6570\u3054\u3068\u306e\u6b20\u640d\u5024\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3059\u308b","d04bf2da":"### \u30fb\u5f93\u5c5e\u5909\u6570\u306e\u5206\u5e03\u78ba\u8a8d(SalePrice)","f389ff41":"### \u30fb\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb(Ridge, Lasso, ElasticNet, SVR)","4efe9c2d":"best score: 0.113  \nparameters:  {'lambda_l1': 2.5456694926318675e-08, 'lambda_l2': 1.133230160071623e-08, 'num_leaves': 4, 'feature_fraction': 0.5607153808743172, 'bagging_fraction': 0.7817404071420171, 'bagging_freq': 1, 'min_child_samples': 5}","4cab4ec1":"\u30fbLotFrontage(\u4f4f\u5b85\u304b\u3089\u901a\u308a\u307e\u3067\u306e\u8ddd\u96e2)","4289a7ef":"\u30fb\u6b20\u640d\u5024\u30c7\u30fc\u30bf\u306e\u6570\u78ba\u8a8d  ","a6f3cad0":"## 5. \u6b20\u640d\u5024\u306e\u51e6\u7406  \n  \n### \u203b \u524d\u56de\u307e\u3067\u3001\u3053\u306e\u30c7\u30fc\u30bf\u306b\u304a\u3051\u308b\u6b20\u640d\u5024\u306e\u610f\u5473\u3092\u6b63\u78ba\u306b\u628a\u63e1\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3002\u4f8b\u3048\u3070\u3001BsmtQual\u306enan\u306f\u3001\u5730\u4e0b\u5ba4\u3092\u6301\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u610f\u5473\u304c\u3042\u308a\u3001\u8a00\u8449\u901a\u308a\u306e\u6b20\u640d\u5024\u3067\u306f\u306a\u304b\u3063\u305f\u3002\u306a\u306e\u3067\u3001\u3053\u306eVer\u3067\u306f\u3001\u5404\u5909\u6570\u3054\u3068\u306enan\u306e\u610f\u5473\u3092\u304d\u3061\u3093\u3068\u8abf\u3079\u3066\u5bfe\u5fdc\u3059\u308b\u3002  \n\u5404\u5909\u6570\u3054\u3068\u306b\u6b20\u640d\u5024\u306b\u610f\u5473\u304c\u3042\u308b\u306e\u3067\u3001\u5909\u6570\u6bce\u306b\u78ba\u8a8d\u3057\u3064\u3064\u57cb\u3081\u308b\u3002","198c5a99":"\u30fbxgboost  ","ce95e96e":"\u30fbXGBoost","b243628a":"Best score: 0.114  \nBest parameter:  {'model__alpha': 0.0075, 'model__l1_ratio': 0.275}   \ntest's rmse score: 0.114  \ntest's r2 score: 0.915  ","351126f4":"#### 3-2-2 \u540d\u7fa9\u5909\u6570\u306e\u4e2d\u3067\u3001\u9806\u5e8f\u5909\u6570\u3068\u3057\u3066\u6271\u3046\u3079\u304d\u5909\u6570\u304c\u7121\u3044\u304b\u78ba\u8a8d  \n  \n\u540d\u7fa9\u5909\u6570\u3068\u3057\u3066\u5206\u3051\u305f\u5909\u6570\u306e\u4e2d\u3067\u3001\u91cd\u307f\u4ed8\u3051\u304c\u5fc5\u8981\u306a\u5909\u6570\u304c\u7121\u3044\u304b\u78ba\u8a8d","b2b15d43":"## 3. \uff12\u5909\u6570\u9593\u306e\u5206\u6790  \n1. \u72ec\u7acb\u5909\u6570\u9593\u306e\u95a2\u4fc2\uff1a\u72ec\u7acb\u5909\u6570\u9593\u3067\u76f8\u95a2\u306e\u9ad8\u3044\u5909\u6570\u306e\u78ba\u8a8d\n1. \u5f93\u5c5e\u5909\u6570\u3068\u306e\u95a2\u4fc2\uff1a\u5f93\u5c5e\u5909\u6570\u3068\u76f8\u95a2\u306e\u9ad8\u3044\u72ec\u7acb\u5909\u6570\u306e\u78ba\u8a8d\n","02ac9024":"\u30fb\u5916\u58c1\u30ec\u30f3\u30ac\u95a2\u9023","2913ea74":"## 1. \u5909\u6570\u306e\u78ba\u8a8d  \n+ \u5909\u6570\u306e\u7a2e\u985e\u306a\u3069\u306e\u78ba\u8a8d","397ed2b3":"#### \u30fbint\u578b\u5909\u6570\u3092\u3001Categorical\u3068Numeric\u306b\u5206\u3051\u308b","be5bf921":"\u30fb\u30ac\u30ec\u30fc\u30b8\u95a2\u9023","15564ca9":"\u30d1\u30d6\u30ea\u30c3\u30af\u30b9\u30b3\u30a2\uff1a0.11915","90867d2c":"####\u30fbobject\u578b\u5909\u6570\u3092nominal\u3068ordinal feature \u306b\u5206\u3051\u308b","c2bba5df":"\u30fbElasticNet","453c02f7":"\u30fbSaleType(\u8ca9\u58f2\u30bf\u30a4\u30d7)","6b00e915":"\u30fbRidge","980b7f0c":"\u30d1\u30d6\u30ea\u30c3\u30af\u30b9\u30b3\u30a2\uff1a0.12109","12b39fe6":"\u30fb\u5f93\u5c5e\u5909\u6570\uff08SalePrice\uff09","4ee5e2fe":"\u30fbLasso","e10c0e58":"> + TotalBsmtSF(\u5730\u4e0b\u5ba4\u306e\u9762\u7a4d)\u3068\u30011stFlrSF(1\u968e\u306e\u9762\u7a4d)\u306e\u76f8\u95a2\u9ad8\u3044 -> \u3069\u3063\u3061\u304b\u6368\u3066\u308b\u304b\uff1f 1stFlrSF\u30682ndFlrSF\u3092\u5408\u4f53\u3059\u308b\u304b\uff1f\u691c\u8a0e\n> + GarageCars(\u8eca\u53f0\u6570)\u3068\u3001GarageArea(\u99d0\u8eca\u5834\u9762\u7a4d)\u306e\u76f8\u95a2\u9ad8\u3044 -> \u3069\u3063\u3061\u304b\u3042\u308c\u3070\u3088\u3055\u305d\u3046\u3060\u3051\u3069\u305d\u306e\u307e\u307e\u3067\u3082\u3044\u3044\u304b\uff1f\n> + YearBuilt(\u5efa\u7bc9\u5e74)\u3068GarageYrBlt(\u30ac\u30ec\u30fc\u30b8\u306e\u5efa\u7bc9\u5e74) -> \u3069\u3063\u3061\u304b\u3042\u308c\u3070\u3088\u3055\u305d\u3046\u3060\u3051\u3069\u305d\u306e\u307e\u307e\u3067\u3082\u3044\u3044\u304b\uff1f  \n> + TotRmsAbvGrd(\u5730\u4e0a\u968e\u306e\u7dcf\u90e8\u5c4b\u6570)\u3068GrLivArea(\u5c45\u4f4f\u3059\u308b\u306e\u306b\u5341\u5206\u306a\u5185\u88c5\u3084\u8a2d\u5099\u304c\u4f4f\u3093\u3060\u90e8\u5c4b) -> \u3069\u3063\u3061\u304b\u3042\u308c\u3070\u3088\u3055\u305d\u3046\u3060\u3051\u3069\u305d\u306e\u307e\u307e\u3067\u3082\u3044\u3044\u304b\uff1f","8f9a4873":"### \u30fb\u5206\u985e\u6728\u30e2\u30c7\u30eb\uff11(Random Forest, Gradient Boosting)","7e18ff57":"\u30fc\uff1e \u4e0a\u8a18\u5909\u6570\u306e\u6b20\u640d\u5024\u3092\u51e6\u7406\u3059\u308b\u6642\u306f\u3001\u5909\u6570\u3054\u3068\u306e\u6b20\u640d\u5024\u306e\u610f\u5473\u3092\u78ba\u8a8d\u3057\u3064\u3064\u884c\u3046\u3053\u3068\uff01","41cc6236":"\u5916\u308c\u5024  \n> + GrLivArea : SalePrice < 200000 and GrLivArea > 4000 \u3092\u6e80\u305f\u3059\u5024\n> + TotalBsmtSF : SalePrice < 200000 and TotalBsmtSF > 6000 \u3092\u6e80\u305f\u3059\u5024\n> + 1stFlrSF : SalePrice < 200000 and 1stFlrSF > 4000 \u3092\u6e80\u305f\u3059\u5024  \n\u30fc\uff1e\u3000\u4e0a\u8a18\uff13\u3064\u306e\u5916\u308c\u5024\u9664\u304f","7ab6b56b":"\u30fb\u5e74\u6570\u95a2\u9023: 'YearBuilt', 'YrSold', 'GarageYrBlt', 'YearRemodAdd', 'MoSold'  ","8e7301a0":"#### \u30fb\u6b20\u640d\u5024\u3092\u8a72\u5f53\u306a\u3057\u3068\u3057\u3066\u5229\u7528\u3057\u3066\u3044\u308b\u5909\u6570","fdce267f":"\u30fbSVR","8d7d92de":"> + \u5b9f\u8cea\u5b9a\u6570\u3068\u5909\u308f\u3089\u306a\u3044\u3088\u3046\u306a\u5909\u6570\u304c\u898b\u3089\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u3089\u306f\u5909\u6570\u9078\u629e\u306e\u969b\u306b\u524a\u9664\u3059\u308b\n> + \u5b9f\u8cea\uff12\u30ab\u30c6\u30b4\u30ea\u3057\u304b\u7121\u3044\u5909\u6570\u306f\u3001\u8a08\u7b97\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b\uff12\u5024\u5909\u6570(0, 1)\u5316\u3092\u691c\u8a0e\u3059\u308b\n> + \u5e74\u6570\u3092\u30d3\u30f3\u3067\u307e\u3068\u3081\u3089\u308c\u308b\u5909\u6570\u306f\u307e\u3068\u3081\u305f\u65b9\u304c\u3044\u3044\u304b\u30fb\u30fb\u30fb","79a399ce":"## 6. \u5909\u6570\u5909\u63db\u3068\u5909\u6570\u9078\u629e  \n1. \u7dda\u5f62\u56de\u5e30\u5bfe\u5fdc\uff1a\u5f93\u5c5e\u30fb\u72ec\u7acb\u5909\u6570\u3068\u3082\u306b\u6b6a\u5ea6\u306a\u3069\u3092\u8abf\u3079\u3066\u3001\u6b63\u898f\u5206\u5e03\u306b\u8fd1\u3065\u3051\u308b\u3002\n1. sklearn VarianceThreshold\u3067\u5b9a\u6570\u306b\u8fd1\u3044\u5909\u6570\u3092\u524a\u9664\u3059\u308b\n1. \u30ab\u30c6\u30b4\u30ea\u30ab\u30eb\u5909\u6570\u306e\u6570\u5024\u5316\uff1a\u524d\u56de\u3068\u540c\u69d8\u306b\u3001\u540d\u7fa9\u5909\u6570\u306fBinary Encoding\u3001\u9806\u5e8f\u5909\u6570\u306fOrdinal Encoding\u3002\n1. ~~\u30ab\u30c6\u30b4\u30ea\u6570\u306e\u5206\u5e03\u306b\u504f\u308a\u306e\u3042\u308b\u5909\u6570\uff1a\u5b9f\u8cea\u7684\u306b\u30ab\u30c6\u30b4\u30ea\u304c\uff12\u500b\u3057\u304b\u7121\u3044\u5909\u6570\u306f\uff12\u5024\u5909\u6570\u5316\u3059\u308b\u3002~~ -\u9762\u5012\u306a\u306e\u3067\u4e00\u65e6\u30b9\u30ad\u30c3\u30d7\n1. ~~\u4f3c\u305f\u30b8\u30e3\u30f3\u30eb\u306e\u5909\u6570\u306f\u5408\u4f53\u3057\u3066\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u308b\u3002~~ -\u9762\u5012\u306a\u306e\u3067\u4e00\u65e6\u30b9\u30ad\u30c3\u30d7","c9f79e93":"### 6-1 \u7dda\u5f62\u56de\u5e30\u5bfe\u5fdc\uff1a\u5f93\u5c5e\u30fb\u72ec\u7acb\u5909\u6570\u3068\u3082\u306b\u6b6a\u5ea6\u306a\u3069\u3092\u8abf\u3079\u3066\u3001\u6b63\u898f\u5206\u5e03\u306b\u8fd1\u3065\u3051\u308b\u3002","299bcfda":"\u30fblightgbm  ","c691c85c":"rmse_mean: 0.1160 \/ rmse_std: 0.0099","729d4cfc":"## \u63d0\u51fa  \n\n+ ElasticNet\n+ Random Forest\n+ XGBoost\n+ stacked model(\u8a66\u3057\u3068\u3057\u3066\u3001ElasticNet\u3068XGBoost\u306e\u4e88\u6e2c\u7d50\u679c\u306e\u5e73\u5747\u5024\u3082\u63d0\u51fa\u3057\u3066\u307f\u308b\u3002\uff09","883aabca":"## 4. \u5916\u308c\u5024\u306e\u51e6\u7406  \n  \n\u7dda\u5f62\u56de\u5e30\u30e2\u30c7\u30eb\u3082\u4f7f\u3063\u3066\u307f\u308b\u306e\u3067\u3001\u5f93\u5c5e\u5909\u6570\u3068\u76f8\u95a2\u306e\u9ad8\u3044\u72ec\u7acb\u5909\u6570\uff11\uff10\u500b\u3068\u306e\u5206\u5e03\u3092\u8abf\u3079\u3066\u5916\u308c\u5024\u3092\u898b\u3064\u3051\u308b","ec2f405c":"\u30fbGradientBoosting","0fedba9f":"Best score: 0.137  \nBest parameter:  {'n_estimators': 200, 'min_samples_split': 2, 'min_samples_leaf': 2, 'max_features': 'sqrt', 'max_depth': 157, 'bootstrap': False}   \ntest's rmse score: 0.129  \ntest's r2 score: 0.890","a6d84807":"\u30fb\u72ec\u7acb\u5909\u6570  \n  \n\u6570\u5024\u578b\u5909\u6570\u306e\u6b6a\u5ea6\u3092\u8abf\u3079\u3066\u3001\u6b6a\u5ea6\u304c\u4e00\u5b9a\u5024\u3092\u8d85\u3048\u308b\u5909\u6570\u3092\u5bfe\u6570\u5909\u63db\u3059\u308b","384fe3eb":"\u30fb MSZoing(\u571f\u5730\u306e\u7a2e\u985e)","53453c19":"\u30fc\uff1e \u76f8\u95a2\u4e0a\u4f4d\uff11\uff10\u5909\u6570\u5185\u3067\u3001\u76f8\u4e92\u306b\u76f8\u95a2\u9ad8\u3044\u5909\u6570(GarageCars-GarageArea, TotalBsmtSF-1stFlrSF)\u306e\u3069\u3063\u3061\u304b\u524a\u9664\u3059\u308b\u304b\u3001\u5225\u306a\u5909\u6570\u3068\u5408\u4f53\u3055\u305b\u308b\u304b\uff1f","0b13144e":"\u30fb\u5730\u4e0b\u5ba4\u95a2\u9023","59b3e52f":"\u30fc\uff1e \u6b6a\u5ea6\u304c10\u4ee5\u4e0a\u306e\u5909\u6570\u3092\u5bfe\u8c61\u306b\u5bfe\u6570\u5909\u63db\u3067\u5de6\u53f3\u5bfe\u79f0\u306b\u8fd1\u3065\u3051\u308b","bbaf1366":"Best score: 0.116  \nBest parameter:  {'model__alpha': 50.0}  \ntest's rmse score: 0.115  \ntest's r2 score: 0.913  ","141c0c6d":"\u30fbStacked-model(ElasticNet + XGBoost)  \n\u3000ElasticNet\u306e\u7d50\u679c\u3068\u3001XGBoost\u306e\u7d50\u679c\u306e\u5e73\u5747\u5024\u3092\u63d0\u51fa","d1cf7233":"\u30fbRandom Forest","352c790e":"Best score: 0.114  \nBest parameter:  {'model__alpha': 0.0025}   \ntest's rmse score: 0.113  \ntest's r2 score: 0.916  ","db4ec3b0":"best score: 0.116  \nparameters:  {'n_estimators': 998, 'max_depth': 16, 'min_child_weight': 4, 'learning_rate': 0.01, 'scale_pos_weight': 14, 'subsample': 0.5, 'colsample_bytree': 0.9}","d4d6827d":"> + \u5b9f\u8cea\u5b9a\u6570\u3068\u5909\u308f\u3089\u306a\u3044\u3088\u3046\u306a\u5909\u6570\u304c\u898b\u3089\u308c\u308b\u306e\u3067\u3001\u305d\u308c\u3089\u306f\u5909\u6570\u9078\u629e\u306e\u969b\u306b\u524a\u9664\u3059\u308b\n> + \u5b9f\u8cea\uff12\u30ab\u30c6\u30b4\u30ea\u3057\u304b\u7121\u3044\u5909\u6570\u306f\u3001\u8a08\u7b97\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b\uff12\u5024\u5909\u6570(0, 1)\u5316\u3092\u691c\u8a0e\u3059\u308b","a3bed72a":"#### \u4e0a\u8a18\u3092\u5143\u306b\u3001\u5168\u3066\u306e\u5909\u6570\u3092\u3001\u540d\u7fa9\u5909\u6570\u3001\u9806\u5e8f\u5909\u6570\u3001\u91cf\u7684\u5909\u6570\u306b\u308f\u3051\u308b\n","3f5e30e6":"## \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","85bf393c":"#### \u30fb\u305d\u306e\u4ed6\u30b8\u30e3\u30f3\u30eb\u6bce\u306b\u8abf\u3079\u3066\u78ba\u8a8d  \n  \n\u4ed6\u306e\u5909\u6570\u3068\u306e\u95a2\u9023\u3067\u60f3\u50cf\u3064\u304b\u306a\u3044\u6b20\u640d\u5024\u306f\u3001\u6700\u983b\u5024\u3067\u57cb\u3081\u308b\u3002","bb9fa3aa":"#### \u30fb\u9806\u5e8f\u5909\u6570\u306e\u5206\u5e03\u78ba\u8a8d","1f409875":"\u30d1\u30d6\u30ea\u30c3\u30af\u30b9\u30b3\u30a2\uff1a0.14486","10b20ac9":"Best score: 0.142  \nBest parameter:  {'subsample': 0.95, 'n_estimators': 250, 'min_samples_split': 0.1, 'min_samples_leaf': 0.13636363636363638, 'max_features': 'log2', 'max_depth': 8, 'loss': 'huber', 'learning_rate': 0.15}   \ntest's rmse score: 0.145  \ntest's r2 score: 0.861"}}