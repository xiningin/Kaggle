{"cell_type":{"13d0be64":"code","ebb6ba72":"code","cc36f6f4":"code","a2483d86":"code","e47a17c8":"code","c24cb01c":"code","2de21d82":"code","d4a26d56":"code","bf29740b":"code","84ccda76":"code","df7db4d0":"code","5cd58d70":"code","29995265":"code","f4905b1f":"code","e63e5e6c":"code","a6ddddfe":"code","a8dc06be":"code","c714b7d0":"code","17f40ef1":"code","48fe5b63":"code","4ea69df6":"code","e853d42a":"code","666f4eb9":"code","2ba14bf0":"code","a4667a49":"code","20f9ebe7":"code","fc10f67a":"code","3c241c8b":"code","ec290d4d":"code","978a4c67":"code","c71b9ac4":"code","8819abb8":"code","e9f33db4":"code","4f3419cc":"code","2fe25f08":"code","c5a69676":"code","4253ec4a":"code","f00ea807":"code","e9bc7c93":"code","049bb60a":"code","521a1ac9":"code","f4635653":"code","3322dee0":"code","9bc21a71":"code","780655c9":"code","b0cc5388":"code","33ec510f":"code","50896e98":"code","36734abe":"code","3922a0ad":"code","9bf888b6":"code","74b62520":"code","aaaf97b3":"code","e9aa39f9":"code","3c45b9a7":"code","c2dcd683":"code","35c00d3a":"code","11e319e1":"code","b141afe8":"code","dc23a408":"code","87b0cf6e":"code","4885b241":"code","3e91df39":"code","1f9cea5c":"code","9eaa6dc5":"code","f2f5fa30":"code","ce83c82a":"code","c84ff8b6":"code","571ad5ba":"code","50299721":"code","c35cad32":"markdown","c88bc951":"markdown","c8785380":"markdown","7f3bbcc5":"markdown","f0e76f4d":"markdown","466ceac1":"markdown","414a68e5":"markdown","68101b11":"markdown","1789d9ce":"markdown","7d587ffc":"markdown","d66acef2":"markdown","6bec6c04":"markdown","c1755d41":"markdown"},"source":{"13d0be64":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import StratifiedKFold, cross_val_score, train_test_split, GridSearchCV\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.preprocessing import LabelEncoder, RobustScaler\nfrom sklearn.pipeline import make_pipeline\n#\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.svm import LinearSVR\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nfrom sklearn.ensemble import RandomForestRegressor\n\nprefix_path = '..\/input\/'","ebb6ba72":"train_df = pd.read_csv(prefix_path+'train.csv') # 0 ~ 1459\ntest_df = pd.read_csv(prefix_path+'test.csv') # 1460 ~ 2919\ndataset_df = pd.concat([train_df, test_df], axis=0, ignore_index=True)","cc36f6f4":"# make 'SalePrice' be the last columns\ntemp = dataset_df['SalePrice']\ntemp1 = dataset_df.drop(['SalePrice'], axis=1).sort_index(axis=1)\ndataset_df = pd.concat([temp1,temp], axis=1)\ndel temp, temp1","a2483d86":"dataset_df.head()","e47a17c8":"# heatmap with correlation matrix\n# multicollinearity\u53ef\u80fd\u9020\u6210\u6a21\u578b\u9810\u6e2c\u5931\u771f\uff0c\u900f\u904eheatmap\u53ef\u4ee5\u9032\u884c\u521d\u6b65\u7684\u7be9\u9078\ncorr = dataset_df.corr()\nfig, ax = plt.subplots(figsize=(10, 10))\nsns.heatmap(corr, square=True, cmap='rainbow')","c24cb01c":"# check k most correlated features with 'SalePrice'\n# \u5f7c\u6b64\u76f8\u95dc\u6027\u592a\u9ad8\u7684\u5c31\u4e0d\u8981\u540c\u6642\u9078\n# \u6642\u9593\u5e8f\u5217\u7684\u7279\u5fb5\u8981\u591a\u8003\u616e\u4e00\u4e0b\nk_largest_features = corr.nlargest(10, 'SalePrice').index\nsns.heatmap(dataset_df[k_largest_features].corr(), square=True, cmap='rainbow', annot=True)","2de21d82":"selected_numerical_features = ['OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt', 'SalePrice']","d4a26d56":"sns.pairplot(train_df[selected_numerical_features])","bf29740b":"fig, [ax, ax1, ax2] = plt.subplots(1,3)\nfig.set_size_inches(16, 4)\nsns.distplot(dataset_df['SalePrice'].dropna(), label='skewness:%.2f'%dataset_df['SalePrice'].skew(), ax=ax).legend(loc='best')\nsns.distplot(dataset_df['GrLivArea'].dropna(), label='skewness:%.2f'%dataset_df['GrLivArea'].skew(), ax=ax1).legend(loc='best')\nsns.distplot(dataset_df['TotalBsmtSF'].dropna(), label='skewness:%.2f'%dataset_df['TotalBsmtSF'].skew(), ax=ax2).legend(loc='best')","84ccda76":"# RoofStyle\nprint('if exist missing values:', dataset_df['RoofStyle'].isnull().any())\nsns.factorplot(x='RoofStyle', y='SalePrice', data=dataset_df, kind='box')","df7db4d0":"# MSZoning\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(12, 4)\ng = sns.factorplot(x='MSZoning', y='SalePrice', data=dataset_df, kind='box', ax=ax)\nsns.countplot(x='MSZoning',data=dataset_df, ax=ax1)\nplt.close(g.fig)","5cd58d70":"# BldgType...\u597d\u50cf\u6c92\u4ec0\u9ebc\u5f71\u97ff\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(12, 4)\ng = sns.factorplot(x='BldgType', y='SalePrice', data=dataset_df, kind='box', ax=ax)\nsns.countplot(x='BldgType',data=dataset_df, ax=ax1)\nplt.close(g.fig)","29995265":"# HouseStyle\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(12, 4)\ng = sns.factorplot(x='HouseStyle', y='SalePrice', data=dataset_df, kind='box', ax=ax)\nsns.countplot(x='HouseStyle',data=dataset_df, ax=ax1)\nplt.close(g.fig)","f4905b1f":"# CentralAir\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(12, 4)\ng = sns.factorplot(x='CentralAir', y='SalePrice', data=dataset_df, kind='box', ax=ax)\nsns.countplot(x='CentralAir',data=dataset_df, ax=ax1)\nplt.close(g.fig)","e63e5e6c":"# ExterQual\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(12, 4)\ng = sns.factorplot(x='ExterQual', y='SalePrice', data=dataset_df, kind='box', ax=ax)\nsns.countplot(x='ExterQual',data=dataset_df, ax=ax1)\nplt.close(g.fig)","a6ddddfe":"# SaleType...\u6c92\u5565\u5f71\u97ff(\u56e0\u70baWD\u592a\u591a\u4e86)\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(12, 4)\ng = sns.factorplot(x='SaleType', y='SalePrice', data=dataset_df, kind='box', ax=ax)\nsns.countplot(x='SaleType',data=dataset_df, ax=ax1)\nplt.close(g.fig)","a8dc06be":"# LandSlope...\u6c92\u5565\u5f71\u97ff(\u56e0\u70baGtl\u592a\u591a\u4e86)\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(12, 4)\ng = sns.factorplot(x='LandSlope', y='SalePrice', data=dataset_df, kind='box', ax=ax)\nsns.countplot(x='LandSlope',data=dataset_df, ax=ax1)\nplt.close(g.fig)","c714b7d0":"# ExterCond...\u6c92\u5565\u5f71\u97ff(TA\u592a\u591a)\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(12, 4)\ng = sns.factorplot(x='ExterCond', y='SalePrice', data=dataset_df, kind='box', ax=ax)\nsns.countplot(x='ExterCond',data=dataset_df, ax=ax1)\nplt.close(g.fig)","17f40ef1":"# Foundation\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(12, 4)\ng = sns.factorplot(x='Foundation', y='SalePrice', data=dataset_df, kind='box', ax=ax)\nsns.countplot(x='Foundation',data=dataset_df, ax=ax1)\nplt.close(g.fig)","48fe5b63":"# PavedDrive\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(12, 4)\ng = sns.factorplot(x='PavedDrive', y='SalePrice', data=dataset_df, kind='box', ax=ax)\nsns.countplot(x='PavedDrive',data=dataset_df, ax=ax1)\nplt.close(g.fig)","4ea69df6":"# GarageFinish\nfig, [ax, ax1] = plt.subplots(1, 2)\nfig.set_size_inches(12, 4)\ng = sns.factorplot(x='GarageFinish', y='SalePrice', data=dataset_df, kind='box', ax=ax)\nsns.countplot(x='GarageFinish',data=dataset_df, ax=ax1)\nplt.close(g.fig)","e853d42a":"# GrLivArea\ndataset_df.plot.scatter('GrLivArea', 'SalePrice')","666f4eb9":"total_outlier_num = 0\noutlier_num = len(dataset_df[(dataset_df['GrLivArea']>4000) & (dataset_df['SalePrice']<300000)])\ntotal_outlier_num += outlier_num\ndataset_df.drop(dataset_df[(dataset_df['GrLivArea']>4000) & (dataset_df['SalePrice']<300000)].index, inplace=True)\ndataset_df.plot.scatter('GrLivArea', 'SalePrice')\nprint('delete %d data' % outlier_num)","2ba14bf0":"#numeric_features = dataset_df.select_dtypes(exclude='object').columns\n#feature_skewness = dataset_df[numeric_features].skew().sort_values()\n#for feature, skewness in zip(feature_skewness.index, feature_skewness):\n#    #print(feature, abs(skewness))\n#    if(abs(skewness) > 0.8):\n#        dataset_df[feature] = dataset_df[feature].apply(lambda i: np.log1p(i) if i >= 0 else np.nan)","a4667a49":"dataset_df['SalePrice'] = dataset_df['SalePrice'].apply(lambda i: np.log1p(i) if i >= 0 else np.nan)","20f9ebe7":"sns.distplot(dataset_df['SalePrice'].dropna(), label='skewness:%.2f'%dataset_df['SalePrice'].skew()).legend(loc='best')","fc10f67a":"sorted_missing_feature_df = pd.DataFrame({'count': dataset_df.isnull().sum().sort_values(ascending=False)})\n\nprint(sorted_missing_feature_df[sorted_missing_feature_df['count']>0])\nprint('total:', len(sorted_missing_feature_df[sorted_missing_feature_df['count']>0]), 'missing values')\n# total 35 features have missing value\nexist_missing_feature_df = sorted_missing_feature_df[sorted_missing_feature_df['count']>0]","3c241c8b":"fig, ax = plt.subplots()\nplt.xticks(rotation='75')\nfig.set_size_inches(15,9)\nsns.barplot(x=exist_missing_feature_df.index,y=exist_missing_feature_df['count'])","ec290d4d":"# PoolQC\n# NaN means no pool\ndataset_df['PoolQC'].fillna('None', inplace=True)","978a4c67":"# MiscFeature\n# NaN means no MiscFeature\ndataset_df['MiscFeature'].fillna('None', inplace=True)","c71b9ac4":"# Alley\n# NaN means no Alley access\ndataset_df['Alley'].fillna('None', inplace=True)","8819abb8":"# Fence\n# NaN means no Fence\ndataset_df['Fence'].fillna('None', inplace=True)","e9f33db4":"# FireplaceQu\n# NaN means no Fireplace\ndataset_df['FireplaceQu'].fillna('None', inplace=True)","4f3419cc":"# LotFrontage\n# fill missing value depends on LotFrontage groupy by neighborhood median\ndataset_df['LotFrontage'] = dataset_df.groupby('Neighborhood')['LotFrontage'].transform(lambda i: i.fillna(i.median()))","2fe25f08":"# GarageFinish GarageQual GarageType GarageCond\n# NaN means no Garage\ndataset_df['GarageFinish'].fillna('None', inplace=True)\ndataset_df['GarageQual'].fillna('None', inplace=True)\ndataset_df['GarageType'].fillna('None', inplace=True)\ndataset_df['GarageCond'].fillna('None', inplace=True)\n\n# GarageYrBlt GarageArea GarageCars\n# NaN means no Garage\ndataset_df['GarageYrBlt'].fillna(0, inplace=True)\ndataset_df['GarageArea'].fillna(0, inplace=True)\ndataset_df['GarageCars'].fillna(0, inplace=True)","c5a69676":"# BsmtFinSF1 BsmtFinSF2 BsmtUnfSF TotalBsmtSF BsmtFullBath BsmtHalfBath \n# NaN means no basement\ndataset_df['BsmtFinSF1'].fillna(0, inplace=True)\ndataset_df['BsmtFinSF2'].fillna(0, inplace=True)\ndataset_df['BsmtUnfSF'].fillna(0, inplace=True)\ndataset_df['TotalBsmtSF'].fillna(0, inplace=True)\ndataset_df['BsmtFullBath'].fillna(0, inplace=True)\ndataset_df['BsmtHalfBath'].fillna(0, inplace=True)\n\n# BsmtQual BsmtCond BsmtExposure BsmtFinType1 BsmtFinType2\n# NaN means no basement\ndataset_df['BsmtQual'].fillna('None', inplace=True)\ndataset_df['BsmtCond'].fillna('None', inplace=True)\ndataset_df['BsmtExposure'].fillna('None', inplace=True)\ndataset_df['BsmtFinType1'].fillna('None', inplace=True)\ndataset_df['BsmtFinType2'].fillna('None', inplace=True)","4253ec4a":"# MasVnrArea MasVnrType \n# NaN means no masonry veneer\ndataset_df['MasVnrArea'].fillna(0, inplace=True)\ndataset_df['MasVnrType'].fillna('None', inplace=True)","f00ea807":"# Functional  \n# fill with most common value\ndataset_df['Functional'].fillna(dataset_df['Functional'].mode()[0], inplace=True)","e9bc7c93":"# Utilities\n# data description says NaN means typical\ndataset_df['Utilities'].fillna('Typ', inplace=True)","049bb60a":"# Electrical \n# fill with most common value\ndataset_df['Electrical'].fillna(dataset_df['Electrical'].mode()[0], inplace=True)","521a1ac9":"# KitchenQual \n# fill with most common value\ndataset_df['KitchenQual'].fillna(dataset_df['KitchenQual'].mode()[0], inplace=True)","f4635653":"# Exterior1st Exterior2nd\n# fill with most common value\ndataset_df['Exterior1st'].fillna(dataset_df['Exterior1st'].mode()[0], inplace=True)\ndataset_df['Exterior2nd'].fillna(dataset_df['Exterior2nd'].mode()[0], inplace=True)","3322dee0":"# SaleType \n# fill with most common value\ndataset_df['SaleType'].fillna(dataset_df['SaleType'].mode()[0], inplace=True)","9bc21a71":"# MSSubClass \n# NaN means no type\ndataset_df['MSSubClass'].fillna('None', inplace=True)","780655c9":"# MSZoning\n# fill with most common value\ndataset_df['MSZoning'].fillna(dataset_df['MSZoning'].mode()[0], inplace=True)","b0cc5388":"dataset_df.isnull().sum().sort_values(ascending=False).head()","33ec510f":"# Transforming some numerical variables that are really categorical\ndataset_df['MSSubClass'] = dataset_df['MSSubClass'].apply(str)\ndataset_df['YrSold'] = dataset_df['YrSold'].apply(str)\ndataset_df['MoSold'] = dataset_df['MoSold'].apply(str)","50896e98":"ordinal_features_1 = ['BsmtQual', 'BsmtCond', 'GarageQual', 'FireplaceQu', 'GarageCond',\n                 'ExterQual', 'ExterCond','HeatingQC', 'PoolQC', 'KitchenQual']\nordinal_features_2 = ['BsmtFinType1', 'BsmtFinType2']","36734abe":"for feature in ordinal_features_1:\n    dataset_df[feature] = dataset_df[feature].map({'Ex':5, 'Gd':4, 'TA':3, 'Fa':2, 'Po':1, 'None':0})","3922a0ad":"for feature in ordinal_features_2:\n    dataset_df[feature] = dataset_df[feature].map({'GLQ':6, 'ALQ':5, 'BLQ':4,\n                                                   'Rec':3, 'LwQ':2, 'Unf':1, 'None':0})","9bf888b6":"# Fence\n# dataset_df['Fence'].unique()\ndataset_df['Fence'] = dataset_df['Fence'].map({'GdPrv':4, 'MnPrv':3, 'GdWo':2, 'MnWw':1, 'None':0})","74b62520":"# BsmtExposure\n# dataset_df['BsmtExposure'].unique()\ndataset_df['BsmtExposure'] = dataset_df['BsmtExposure'].map({'Gd':4, 'Av':3, 'Mn':2, 'No':1, 'None':0})","aaaf97b3":"# GarageFinish\ndataset_df['GarageFinish'] = dataset_df['GarageFinish'].map({'RFn':3, 'Unf':2, 'Fin':1, 'None':0})","e9aa39f9":"# LandSlope\n#dataset_df['LandSlope'].unique()\ndataset_df['LandSlope'] = dataset_df['LandSlope'].map({'Sev':2, 'Mod':1, 'Gtl':0})","3c45b9a7":"# LotShape\ndataset_df['LotShape'] = dataset_df['LotShape'].map({'Reg':3, 'IR1':2, 'IR2':1, 'IR3':0})","c2dcd683":"dataset_df = pd.get_dummies(dataset_df)","35c00d3a":"# drop 'Id' feature\ndataset_df = dataset_df.drop('Id', axis=1)","11e319e1":"#dataset_df = dataset_df[selected_features]\ntrain_data = dataset_df[:len(train_df)-total_outlier_num]\ntest_data = dataset_df[len(train_df)-total_outlier_num:]\nX_train = train_data.drop(['SalePrice'], axis=1).values\ny_train = train_data['SalePrice'].values\nX_test = test_data.drop(['SalePrice'], axis=1).values","b141afe8":"model_set = []\n#model_set.append(('LinearRegression',LinearRegression()))\nmodel_set.append(('Ridge',Ridge()))\nmodel_set.append(('Lasso',Lasso(alpha=0.0005)))\nmodel_set.append(('LinearSVR',LinearSVR()))\nmodel_set.append(('XGBRegressor',XGBRegressor()))\nmodel_set.append(('LGBMRegressor',LGBMRegressor()))\nmodel_set.append(('RandomForestRegressor', RandomForestRegressor()))\n\ncv_results = []\nfor _,reg in model_set:\n    mse_score = cross_val_score(reg, X_train, y_train.ravel(), scoring='neg_mean_squared_error', cv=10, n_jobs=4)\n    rmse_score = np.sqrt(-mse_score) #cross_val_score\u8fd4\u56de\u7684mse\u503c\u662f\u8ca0\u7684\uff0c\u8b8a\u500b\u865f\u5c31\u662f\u6b63\u78ba\u7684\u503c(\u539f\u56e0\u8a73\u898bgithub)\n    cv_results.append(rmse_score)\ncv_means = []\ncv_std = []\nfor cv in cv_results:\n    cv_means.append(cv.mean())\n    cv_std.append(cv.std())\ncv_df = pd.DataFrame({'CrossValMeans':cv_means, 'CrossValStd': cv_std, 'Algo': [name for name,_ in model_set]})\ncv_df.sort_values(by='CrossValMeans', inplace=True)\nprint(cv_df)\nsns.barplot('CrossValMeans', 'Algo', data=cv_df, palette='hls', **{'xerr':cv_std})","dc23a408":"robust_scaler = RobustScaler()\nrobust_X_train = robust_scaler.fit_transform(X_train)\nrobust_X_test = robust_scaler.transform(X_test)","87b0cf6e":"LassoRegression = Lasso(alpha=0.0005).fit(robust_X_train, y_train.ravel())\n\nfeature_importance = pd.DataFrame({'FeatureImportance':LassoRegression.coef_, 'Index':train_data.columns[:-1]})\nmse_score = cross_val_score(LassoRegression, robust_X_train, y_train.ravel(), scoring='neg_mean_squared_error', cv=10, n_jobs=4)\nprint('rmse:', np.sqrt(-mse_score).mean()) #cross_val_score\u8fd4\u56de\u7684mse\u503c\u662f\u8ca0\u7684\uff0c\u8b8a\u500b\u865f\u5c31\u662f\u6b63\u78ba\u7684\u503c(\u539f\u56e0\u8a73\u898bgithub)\n\n\nfeature_importance.sort_values(by='FeatureImportance', ascending=False, inplace=True)\n# select feature_importance != 0 features\nfeature_importance = feature_importance[feature_importance['FeatureImportance'] != 0]\nprint(feature_importance)\nfig, ax = plt.subplots()\nfig.set_size_inches(12,18)\nsns.barplot(x='FeatureImportance', y='Index', data=feature_importance, orient='h')","4885b241":"LinearRegression_prediction = LassoRegression.predict(robust_X_test)\nLinearRegression_prediction = np.expm1(LinearRegression_prediction)\nprint(LinearRegression_prediction)","3e91df39":"XGB = XGBRegressor(colsample_bytree=0.4603, gamma=0.0468, \n                             learning_rate=0.05, max_depth=3, \n                             min_child_weight=1.7817, n_estimators=2200,\n                             reg_alpha=0.4640, reg_lambda=0.8571,\n                             subsample=0.5213, silent=1,\n                             random_state =7, nthread = -1).fit(X_train, y_train)","1f9cea5c":"#XGB\nmse_score = cross_val_score(XGB, X_train, y_train.ravel(), scoring='neg_mean_squared_error', cv=5, n_jobs=4)\nprint('rmse:', np.sqrt(-mse_score).mean()) #cross_val_score\u8fd4\u56de\u7684mse\u503c\u662f\u8ca0\u7684\uff0c\u8b8a\u500b\u865f\u5c31\u662f\u6b63\u78ba\u7684\u503c(\u539f\u56e0\u8a73\u898bgithub)","9eaa6dc5":"XGB_prediction = XGB.predict(X_test)\nXGB_prediction = np.expm1(XGB_prediction)\nprint(XGB_prediction)","f2f5fa30":"LGB = LGBMRegressor(objective='regression',num_leaves=5,\n                    learning_rate=0.05, n_estimators=720,\n                    max_bin = 55, bagging_fraction = 0.8,\n                    bagging_freq = 5, feature_fraction = 0.2319,\n                    feature_fraction_seed=9, bagging_seed=9,\n                    min_data_in_leaf =6, min_sum_hessian_in_leaf = 11).fit(X_train, y_train)","ce83c82a":"#LGB\nmse_score = cross_val_score(LGB, X_train, y_train.ravel(), scoring='neg_mean_squared_error', cv=5, n_jobs=4)\nprint('rmse:', np.sqrt(-mse_score).mean()) #cross_val_score\u8fd4\u56de\u7684mse\u503c\u662f\u8ca0\u7684\uff0c\u8b8a\u500b\u865f\u5c31\u662f\u6b63\u78ba\u7684\u503c(\u539f\u56e0\u8a73\u898bgithub)","c84ff8b6":"LGB_prediction = LGB.predict(X_test)\nLGB_prediction = np.expm1(LGB_prediction)\nprint(LGB_prediction)","571ad5ba":"prediction = 0.3 * XGB_prediction + 0.4 * LinearRegression_prediction + 0.3 * LGB_prediction","50299721":"submission = pd.DataFrame({'Id':test_df['Id'],'SalePrice':prediction})\nsubmission.to_csv('submission.csv',index=False)","c35cad32":"### 1.Outliers","c88bc951":"### 3.Missing value","c8785380":"### 1.Numerical features","7f3bbcc5":"### 2.skewness","f0e76f4d":"#### nominal features","466ceac1":"## reference: \n- https:\/\/www.kaggle.com\/pmarcelino\/comprehensive-data-exploration-with-python\n- https:\/\/www.kaggle.com\/serigne\/stacked-regressions-top-4-on-leaderboard\n- https:\/\/www.kaggle.com\/plasticgrammer\/house-prices-prediction-playground","414a68e5":"### 2. skewness of numerical features","68101b11":"#### ordinal features","1789d9ce":"## Feature analysis","7d587ffc":"### 5.Encoding(Categorical features)\n\u91dd\u5c0dCatrgorical feature \u505aEncoding\uff0c\u53c8\u5206\u6210\u5169\u7a2e:\n- Catrgorical\u7684\u6578\u503c\u662f\u6709\u9806\u5e8f\u610f\u7fa9\u7684(\u6392\u540d...): \u505aLabel Encoding\n- Catrgorical\u7684\u6578\u503c\u53ea\u662f\u4ee3\u8868\u4e0d\u540c\u985e\u5225\u3001\u6c92\u6709\u9806\u5e8f\u6027\u7684: \u505aOne-hot Encoding(or pd. get dummies)\n\n\n---\n\n(2018.8.24\u66f4\u65b0)sklearn\u7684leabelencoder\u6709\u500b\u5927\u5751\uff0c\u4ed6\u5728string\u7684oreder\u662f\u4e00\u500bsorted order\uff0c\u4e5f\u5c31\u662f\u8aaa\u4ed6\u6703\u6309\u7167\u5b57\u6bcd\u7684\u6392\u5e8f\u505aclasses\u7684\u6392\u5e8f\uff0c\u5982\u679c\u4e0d\u60f3\u9019\u6a23...\u5c31\u81ea\u5df1\u523b\u5427","d66acef2":"## Feature Engineering","6bec6c04":"## Training","c1755d41":"### 3.Categorical features"}}