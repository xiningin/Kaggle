{"cell_type":{"e5bb4423":"code","5ec8b7fb":"code","30060a92":"code","aa0849fb":"code","7b466df5":"code","eaa13df1":"code","e077f524":"code","01ea9cf7":"code","6f5f362b":"code","a36b6bb1":"code","6d65d93d":"code","391ecf71":"code","0a0d3c1d":"code","1ee89bef":"code","29a884af":"code","42841f6e":"code","b6feea78":"code","4ffb8b04":"code","e594df89":"code","34e46899":"code","56e11677":"code","d629fe9f":"code","9cb06f2c":"code","039e6205":"code","96498d86":"code","0c00923d":"code","d30e3ec3":"code","dbc0a898":"code","122d404e":"code","32e56b44":"code","420a9b9d":"code","88fbc4ff":"code","8ebf15f7":"code","f4e7ac09":"code","d89e327e":"code","ce521fc8":"code","6c24e8e6":"code","3e324410":"code","3b88e15b":"code","68b462b2":"code","58c9a5ff":"code","2b20bf81":"code","4b76598b":"code","5d391719":"code","0b41183f":"code","301ac860":"code","e0e98ca2":"code","71660f42":"code","aaa1a667":"code","16ad0fd1":"code","0eec634d":"code","53dddaf8":"code","43352e61":"code","bd955fd2":"markdown","d23fb83a":"markdown","757ea043":"markdown","ce35efcb":"markdown","2910003c":"markdown","4028621f":"markdown","6adfad92":"markdown","416676a2":"markdown","43620169":"markdown","512b5b09":"markdown"},"source":{"e5bb4423":"import pandas as pd\nimport os\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport missingno as msno\n%matplotlib inline","5ec8b7fb":"data_2015 = pd.read_csv('..\/input\/building-energy-benchmarking-2015\/2015-building-energy-benchmarking.csv')\ndata_2016 = pd.read_csv('..\/input\/building-energy-benchmarking-2016\/2016-building-energy-benchmarking.csv')","30060a92":"print(data_2015.columns, data_2016.columns)","aa0849fb":"# Comparer les colonnes de la  data_2015 et  data_2016\n\ndf_2015_cols = data_2015.columns\ndf_2016_cols = data_2016.columns\n\ncommon_cols = df_2015_cols.intersection(df_2016_cols)\ndf2015_not_df2016 = df_2015_cols.difference(df_2016_cols)\ndf2016_not_df2015 = df_2016_cols.difference(df_2015_cols)","7b466df5":"# Colonnes identiques dans chaqu'une des Dataframes 2015 et 2016\ncommon_cols","eaa13df1":"# Les colonnes pr\u00e9sentes dans data_2015 et pas dans data_2016\ndf2015_not_df2016","e077f524":"# Les colonnes pr\u00e9sentes dans data_2016 et pas dans data_2015\ndf2016_not_df2015","01ea9cf7":"# Elimination des colonnes pr\u00e9sentant beaucoup de valeurs manquantes dans les deux Dataframes (2015 et 2016)\n\n\ndf_2015 = data_2015.drop(['2010 Census Tracts', 'City Council Districts','Comment','ThirdLargestPropertyUseType','ThirdLargestPropertyUseTypeGFA', 'YearsENERGYSTARCertified', 'Outlier'], axis = 1)\ndf_2016 = data_2016.drop(['Comments','ThirdLargestPropertyUseType','ThirdLargestPropertyUseTypeGFA', 'YearsENERGYSTARCertified', 'Outlier'], axis = 1)","6f5f362b":"# V\u00e9rifier  les colonnes pour les valeurs manquantes importantes\n\nmsno.bar(data_2015[df2015_not_df2016])","a36b6bb1":"msno.bar(data_2016[df2016_not_df2015])","6d65d93d":"msno.bar(data_2015[common_cols])","391ecf71":"msno.bar(data_2016[common_cols])","0a0d3c1d":"#  Eliminer les colonnes dans les deux dataframes concernant la Fuite de donn\u00e9es cad (d\u00e9tailles sur type de consommation d'\u00e9nergie)\n\ndf_2015_drops = df_2015.drop(['SteamUse(kBtu)','Electricity(kWh)','Electricity(kBtu)', 'NaturalGas(therms)', 'NaturalGas(kBtu)','OtherFuelUse(kBtu)',\\\n                              'Zip Codes', 'GHGEmissionsIntensity(kgCO2e\/ft2)','Seattle Police Department Micro Community Policing Plan Areas','SPD Beats' ,\\\n                             'SiteEUI(kBtu\/sf)', 'SiteEUIWN(kBtu\/sf)', 'SiteEnergyUseWN(kBtu)', 'SourceEUI(kBtu\/sf)', 'SourceEUIWN(kBtu\/sf)'], axis = 1)\n\ndf_2016_drops = df_2016.drop(['SteamUse(kBtu)','Electricity(kWh)','Electricity(kBtu)', 'NaturalGas(therms)', 'NaturalGas(kBtu)', 'SiteEnergyUseWN(kBtu)',\\\n                              'GHGEmissionsIntensity', 'SourceEUIWN(kBtu\/sf)', 'SourceEUI(kBtu\/sf)', 'SiteEUIWN(kBtu\/sf)','SiteEUI(kBtu\/sf)'], axis = 1)","1ee89bef":"# Afficher le contenue des valuers dans la colonne 'Location'\npd.options.display.max_colwidth = 200\nlocation = df_2015_drops['Location']\nlocation","29a884af":"# De la colonne 'Location' extraire latitude, longitude, address, city, state:\n\ndef parse_location(location):\n    loc_dict = json.loads(location.replace(\"'\", '\"').replace('\"{','{').replace('}\"','}'))\n    # recup\u00e9rer les differentes valeurs sur le dictionnaire\n    # retourner un tableau\n    return [loc_dict['latitude'], loc_dict['longitude'],loc_dict['human_address']['address'],loc_dict['human_address']['city'], loc_dict['human_address']['state'], loc_dict['human_address']['zip']]\n    \n# une liste de liste tel que chaque list contient les diff\u00e9rents \u00e9l\u00e9ments retourn\u00e9s par la methode\n    ","42841f6e":"# la m\u00e9thode json transforme notre cha\u00eene de charact\u00e8res en un dictionnaire qui nous permettra\n# d'en extraire les nouvelles colonnes qu'on veut cr\u00e9er ( latitude, longitde, address...)\nimport json\nexamples = location.apply(parse_location)","b6feea78":"location_extracted = pd.DataFrame(examples.tolist(), columns=['latitude','longitude','address', 'city', 'state', 'zip'])","4ffb8b04":"location_extracted.head()","e594df89":"# Mettre les premi\u00e8res lettres en majuscule pour les nouvelles colonnes cr\u00e9es\n\nlocation_extracted.columns = map(lambda x: str(x).capitalize(), location_extracted.columns)\n","34e46899":"# drop column ' Location' in data_2015_2\n\ndf_2015_drops.drop('Location', axis=1, inplace = True)","56e11677":"# Concat\u00e9ner dans un nouveau Dataframe \ndf_2015_1 = pd.concat([df_2015_drops, location_extracted], axis = 1)","d629fe9f":"df_2015_1.head().T","9cb06f2c":" df_2015_1.info()","039e6205":"df_2015_1.T","96498d86":"# Ces 2 colonnes representent les m\u00eames indicateurs voir le lien : \n# http:\/\/www.seattle.gov\/energybenchmarkingmap\/#seattle\/2015?layer=yearbuilt&metrics[]=energy_star_score&sort=yearbuilt&order=desc&lat=47.62670&lng=-122.33002&zoom=14&building=336\n\ndf_2015_drops['GHGEmissions(MetricTonsCO2e)']\ndf_2016_drops['TotalGHGEmissions']","0c00923d":"# Renommer les colonnes dans la dataframe 2015\n\ndf_2015_2 = df_2015_1.rename(columns={'GHGEmissions(MetricTonsCO2e)':'TotalGHGEmissions' })\n","d30e3ec3":"# Dans la colonne DefaultData les valeurs sont remplac\u00e9es , pour uniformiser les deux dataframes 2015 et 2016 avant de les merger\n\ndf_2016_drops['DefaultData'].replace('True', 'Yes',inplace=True)\ndf_2016_drops['DefaultData'].replace('False', 'No',inplace=True)","dbc0a898":"# Renommer les colonnes de la dataframe 2016\ndf_2016_2 = df_2016_drops.rename(columns={'ZipCode':'Zip'})","122d404e":"# Comparer les colonnes de la  data_2015 et  data_2016 apr\u00e8s les diff\u00e9rentes \u00e9liminations de colonnes dans les deux DataFrames\n\ndf_2015_col = df_2015_2.columns\ndf_2016_col = df_2016_2.columns\n\ncommon_col = df_2015_col.intersection(df_2016_col)\ndf2015_not_in_df2016 = df_2015_col.difference(df_2016_col)\ndf2016_not_in_df2015 = df_2016_col.difference(df_2015_col)","32e56b44":"df2015_not_in_df2016","420a9b9d":"df2016_not_in_df2015","88fbc4ff":"merged_data = pd.concat([df_2015_2,df_2016_2]).drop_duplicates(keep = 'last',  subset = ['OSEBuildingID'] ).drop(['OSEBuildingID' , 'TaxParcelIdentificationNumber', 'ListOfAllPropertyUseTypes'], axis=1)","8ebf15f7":"# Sauvegarder la nouvelle Dataframe \nmerged_data.to_csv('merged_data.csv', index = False)","f4e7ac09":"merged_data.shape","d89e327e":"merged_data = pd.read_csv('merged_data.csv')\n","ce521fc8":"AgeOfBuildings = pd.DataFrame(merged_data[\"DataYear\"] - merged_data[\"YearBuilt\"])\nAgeOfBuildings","6c24e8e6":"# Combiner les attributs: cr\u00e9ation d'une colonne 'AgeOfBuildings' \u00e0 la place des deux colonnes Yearbuilt et DataYear\n# Elimination des colonnes de valeurs constates \n\n# df.assign(DateTime=pd.to_datetime(df.Date + ' ' + df.Time))\n\nAgeOfBuildings['AgeOfBuildings'] = pd.DataFrame(merged_data[\"DataYear\"] - merged_data[\"YearBuilt\"])\n\n# DataYear_minus_YearBuilt\n\nmerged_data_b = merged_data.join(AgeOfBuildings['AgeOfBuildings']).drop(['DataYear','State', 'City'], axis = 1)\n\n","3e324410":"merged_data_b.T","3b88e15b":"# Elimination de type de batiments r\u00e9sidentiels  tel qu'il est demand\u00e9 dans l'\u00e9nonc\u00e9 du sujet \n\nnonres_buildings = merged_data_b[~merged_data_b.BuildingType.isin(['Multifamily MR (5-9)','Multifamily LR (1-4)', 'Multifamily HR (10+)' ])]","68b462b2":"msno.matrix(nonres_buildings)","58c9a5ff":"from sklearn.model_selection import train_test_split","2b20bf81":"train_set, test_set = train_test_split(nonres_buildings, test_size = 0.2)\nlen(train_set)","4b76598b":"len(test_set)","5d391719":"# Sauvegarder les  Dataframes train et test\ntrain_set.to_csv('train_set.csv', index = False)\ntest_set.to_csv('test_set.csv', index = False)","0b41183f":"%matplotlib inline\nimport matplotlib.pyplot as plt\ntrain_set.hist(bins=50, figsize=(20,15))\nplt.show()","301ac860":"\n\ndef matrice_correlation(variables, train_set):\n    X = []\n    for f in variables:\n        X.append(train_set[f].values)\n    \n    Mx = np.corrcoef(X)\n\n    mask = np.zeros_like(Mx)\n    n = mask.shape[0]\n    for i in range(0, n):\n        for j in range(0, n):\n            if j > i:\n                mask[i, j] = True \n            \n    with sns.axes_style(\"white\"):\n        ax = sns.heatmap(Mx, vmin=0, vmax=1, linewidths=.5,mask=mask, square=True, xticklabels=variables, yticklabels=variables)","e0e98ca2":"matrice = ['CouncilDistrictCode', 'NumberofBuildings', 'NumberofFloors', 'PropertyGFAParking','PropertyGFABuilding(s)','LargestPropertyUseTypeGFA',\\\n           'SecondLargestPropertyUseTypeGFA','ENERGYSTARScore','SiteEnergyUse(kBtu)','TotalGHGEmissions','Longitude', 'Latitude', 'AgeOfBuildings']\n\nmatrice_correlation(matrice, train_set)","71660f42":"\n # Les points plus intec\u00e9ment color\u00e9s repr\u00e9sentent des endroits \u00e0 haute dencit\u00e9 de points\ntrain_set.plot(kind = \"scatter\", x= 'Longitude', y = 'Latitude', alpha = 0.1)","aaa1a667":"train_set.plot(kind = \"scatter\", x= 'Longitude', y = 'Latitude', alpha = 0.4,\n                   s = train_set['TotalGHGEmissions']\/100, label = 'TotalGHGEmissions', figsize = (10,7),\n                  c = 'SiteEnergyUse(kBtu)', cmap = plt.get_cmap('jet'), colorbar= True,\n                  )\nplt.legend()","16ad0fd1":"sorted_df = train_set.sort_values(by=['AgeOfBuildings'], ascending=True)","0eec634d":"x = sorted_df['AgeOfBuildings']\ny1 = sorted_df['SiteEnergyUse(kBtu)']\ny2 = sorted_df['TotalGHGEmissions']\n\n# Plot Line1 (Left Y Axis)\nfig, ax1 = plt.subplots(1,1,figsize=(16,9), dpi= 80)\nax1.plot(x, y1, color='tab:red')\n\n# Plot Line2 (Right Y Axis)\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\nax2.plot(x, y2, color='tab:blue')\n\n# Decorations\n# ax1 (left Y axis)\nax1.set_xlabel('AgeOfBuildings', fontsize=20)\nax1.tick_params(axis='x', rotation=0, labelsize=12)\nax1.set_ylabel('Site Energy Use', color='tab:red', fontsize=20)\nax1.tick_params(axis='y', rotation=0, labelcolor='tab:red' )\nax1.grid(alpha=.4)\n\n# ax2 (right Y axis)\nax2.set_ylabel(\"# Total GHG Emissions\", color='tab:blue', fontsize=20)\nax2.tick_params(axis='y', labelcolor='tab:blue')\n#ax2.set_xticks(np.arange(0, len(x), 5))\n#ax2.set_xticklabels(x[::5], rotation=90, fontdict={'fontsize':10})\nax2.set_title(\"Site Energy Use vs Total  GHG Emissions: Plotting in Secondary Y Axis\", fontsize=22)\nfig.tight_layout()\nplt.show()","53dddaf8":"sns.set(style=\"ticks\", color_codes= \"palette\" )\nsns.pairplot(train_set, vars=[\"SiteEnergyUse(kBtu)\", \"ENERGYSTARScore\"])","43352e61":"train_set.describe()","bd955fd2":"        1.3 Merger les deux dataFrames 2015 et 2016","d23fb83a":"# Project name : Anticipate the needs in electricity consumption of buildings \n## Predict CO2 emissions and total consumption of electricity of new buildings \n## Evaluate the interest of \"ENERGY STAR score\" for prediction C02 emissions\n\n## 1) Preliminary study: structure of the data\n  \n    1.1 Comparing the contents of the data from 2015 and 2016 \n    1.2 Formatting the data \n    1.3 Merging two dataFrames 2015 et 2016\n    1.4 Splitting into train and test sets \n## 2)   Exploratory data analysis and visualizations\n\n    2.1 Histograms\n    2.2 Scatter- matrix function\n    2.3 Relation between 'SiteEnergyUse(kBtu)', 'TotalGHGEmissions' and \"ENERGYSTARScore\"\n    2.4 Statistics\n   ","757ea043":"## 2)  Exploration des donn\u00e9es\n     2.1 Histogramme","ce35efcb":"## 1) Etudes pr\u00e9liminaires\n### 1.1 Prise de connaissance sur la structure des donn\u00e9es","2910003c":"        2.3 Relation entre 'SiteEnergyUse(kBtu)', 'TotalGHGEmissions' et \"ENERGYSTARScore\"","4028621f":"        2.2  Matrice de corr\u00e9lation","6adfad92":"        2.4 Statistiques basiques","416676a2":"\n    1.1 Comparaison du contenu des deux fichiers de donn\u00e9es","43620169":"        1.4 Cr\u00e9ation de train set et test set","512b5b09":"        1.2 Mise en forme des donn\u00e9es "}}