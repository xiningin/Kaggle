{"cell_type":{"80478c19":"code","dd5e71d1":"code","502f2a08":"code","622af515":"code","4a62f0af":"code","f0c08098":"markdown","df750817":"markdown","db63f961":"markdown","19de997d":"markdown","ce29f1fd":"markdown","054d53dd":"markdown"},"source":{"80478c19":"import pandas\n!wget https:\/\/raw.githubusercontent.com\/MicrosoftDocs\/mslearn-introduction-to-machine-learning\/main\/graphing.py\n!wget https:\/\/raw.githubusercontent.com\/MicrosoftDocs\/mslearn-introduction-to-machine-learning\/main\/Data\/doggy-boot-harness.csv\n!pip install statsmodels\n\n\n# Make a dictionary of data for boot sizes\n# and harness size in cm\ndata = {\n    'boot_size' : [ 39, 38, 37, 39, 38, 35, 37, 36, 35, 40, \n                    40, 36, 38, 39, 42, 42, 36, 36, 35, 41, \n                    42, 38, 37, 35, 40, 36, 35, 39, 41, 37, \n                    35, 41, 39, 41, 42, 42, 36, 37, 37, 39,\n                    42, 35, 36, 41, 41, 41, 39, 39, 35, 39\n ],\n    'harness_size': [ 58, 58, 52, 58, 57, 52, 55, 53, 49, 54,\n                59, 56, 53, 58, 57, 58, 56, 51, 50, 59,\n                59, 59, 55, 50, 55, 52, 53, 54, 61, 56,\n                55, 60, 57, 56, 61, 58, 53, 57, 57, 55,\n                60, 51, 52, 56, 55, 57, 58, 57, 51, 59\n                ]\n}\n\n# Convert it into a table using pandas\ndataset = pandas.DataFrame(data)\n\n# Print the data\n# In normal python we would write\n# print(dataset)\n# but in Jupyter notebooks, if we simple write the name\n# of the variable and it is printed nicely \ndataset","dd5e71d1":"# Load a library to do the hard work for us\nimport statsmodels.formula.api as smf\n\n# First, we define our formula using a special syntax\n# This says that boot_size is explained by harness_size\nformula = \"boot_size ~ harness_size\"\n\n# Create the model, but don't train it yet\nmodel = smf.ols(formula = formula, data = dataset)\n\n# Note that we have created our model but it does not \n# have internal parameters set yet\nif not hasattr(model, 'params'):\n    print(\"Model selected but it does not have parameters set. We need to train it!\")","502f2a08":"# Load some libraries to do the hard work for us\nimport graphing \n\n# Train (fit) the model so that it creates a line that \n# fits our data. This method does the hard work for\n# us. We will look at how this method works in a later unit.\nfitted_model = model.fit()\n\n# Print information about our model now it has been fit\nprint(\"The following model parameters have been found:\\n\" +\n        f\"Line slope: {fitted_model.params[1]}\\n\"+\n        f\"Line Intercept: {fitted_model.params[0]}\")","622af515":"import graphing\n\n# Show a graph of the result\n# Don't worry about how this works for now\ngraphing.scatter_2D(dataset,    label_x=\"harness_size\", \n                                label_y=\"boot_size\",\n                                trendline=lambda x: fitted_model.params[1] * x + fitted_model.params[0]\n                                )","4a62f0af":"# harness_size states the size of the harness we are interested in\nharness_size = { 'harness_size' : [52.5] }\n\n# Use the model to predict what size of boots the dog will fit\napproximate_boot_size = fitted_model.predict(harness_size)\n\n# Print the result\nprint(\"Estimated approximate_boot_size:\")\nprint(approximate_boot_size[0])","f0c08098":"## Training our model\n\nOLS models have two parameters (a slope and an offset), but these have not been set in our model yet. We need to _train_ (_fit_) our model to find these values so that the model can reliably estimate dogs' boot size based on their harness size. \n\nThe code below fits our model to data you have now seen","df750817":"# Exercise: Training and Running Your First Model\n\nModels are computer code that processes information to make a prediction or a decision. Here we will train a model to guess a comfortable boot size for a dog, based on the size of the harness that fits them.\n\nIn the examples below, there is no need to edit any code. Try to read it, understand it, then press the run button to run it. As always with these notebooks, it is vitally important that these code blocks are run in the correct order, and nothing is missed.\n\n## Preparing data\n\nThe first thing we do with a model is load data. We will cover this in more detail in a later exercise. For now, we will just write our data directly in our code. Review and run the code below to get started \n","db63f961":"As you can see, we have the sizes of boots and harnesses for 50 avalanche dogs.\n\nWe want to use harness size to estimate boot size. This means `harness_size` is our _input_. We want a model that will process the input and make its own estimations the harness size (output).  \n\n## Selecting a model\n\nThe first thing we must do is select a model. We're just getting started, so we will start with a very simple model called _OLS_. This is just a straight line (sometimes called a trendline).\n\nLet's use an existing library to create our model, but we won't train it yet","19de997d":"Notice how training the model set its parameters. We could interpret these directly, but it's simpler to see it as a graph:\n","ce29f1fd":"\nThe graph above shows our original data as circles, with a red line through it. The red line shows our _model_.\n\nWe can look at this line to understand our model. For example, we can see that as harness size increases, so will the estimated boot size. \n\n## Using the model\n\nNow we've finished training, we can use our model to predict a dog's boot size from their harness size. \n\nFor example, by looking at the red line, we can see that that a harness size of `52.5` (x axis) corresponds to a boot size of about `36.5` (y axis).\n\nWe don't have to do this by eye though. We can use the model in our program to predict any boot size we like. Run the code below to see how we can use our model now it is trained","054d53dd":"If you would like, change the value of `52.5` in `harness_size` to a new value and run the block above to see the model in action.\n\n## Summary\n\nWell done! You've trained your first model."}}