{"cell_type":{"867f8ae7":"code","76e0b50e":"code","c612ca6e":"code","cd62533a":"code","da8e4a0b":"code","35b28b4b":"code","8ffc181d":"code","5fcbd433":"code","46b3b646":"code","a8dae385":"markdown","0046f9ce":"markdown","dab1eb8a":"markdown","bb288def":"markdown","bcfce515":"markdown","82c60e34":"markdown","84f857c6":"markdown","5bc8e6e0":"markdown"},"source":{"867f8ae7":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))","76e0b50e":"from sklearn.metrics import roc_curve, auc\nimport xgboost as xgb","c612ca6e":"print('Loading the training\/test data using pandas...')\ntrain = pd.read_csv('..\/input\/training.csv')\ntest = pd.read_csv('..\/input\/test.csv')\ncheck_agreement = pd.read_csv('..\/input\/check_agreement.csv')\ncheck_correlation = pd.read_csv('..\/input\/check_correlation.csv')","cd62533a":"def add_features(df):\n    # features from phunter\n    df['flight_dist_sig'] = df['FlightDistance']\/df['FlightDistanceError']\n    df['flight_dist_sig2'] = (df['FlightDistance']\/df['FlightDistanceError'])**2\n    df['NEW_IP_dira'] = df['IP']*df['dira']\n    df['p0p2_ip_ratio']=df['IP']\/df['IP_p0p2']\n    df['p1p2_ip_ratio']=df['IP']\/df['IP_p1p2']\n    df['DCA_MAX'] = df.loc[:, ['DOCAone', 'DOCAtwo', 'DOCAthree']].max(axis=1)\n    df['iso_bdt_min'] = df.loc[:, ['p0_IsoBDT', 'p1_IsoBDT', 'p2_IsoBDT']].min(axis=1)\n    df['iso_min'] = df.loc[:, ['isolationa', 'isolationb', 'isolationc','isolationd', 'isolatione', 'isolationf']].min(axis=1)\n    df['NEW_FD_LT']=df['FlightDistance']\/df['LifeTime']\n    return df","da8e4a0b":"train = add_features(train)\ntest = add_features(test)\ncheck_agreement = add_features(check_agreement)\ncheck_correlation = add_features(check_correlation)","35b28b4b":"filter_out = ['id','min_ANNmuon', 'production', 'mass', 'signal', 'SPDhits', 'isolationb', 'isolationc', 'DOCAone', 'DOCAtwo', 'DOCAthree','CDF1', 'CDF2', 'CDF3']\n#filter_out = ['id', 'min_ANNmuon', 'production', 'mass', 'signal','SPDhits','p0_track_Chi2Dof','CDF1', 'CDF2', 'CDF3','isolationb', 'isolationc','p0_pt', 'p1_pt', 'p2_pt', 'p0_p', 'p1_p', 'p2_p', 'p0_eta', 'p1_eta', 'p2_eta','DOCAone', 'DOCAtwo', 'DOCAthree']\nfeatures = list(f for f in train.columns if f not in filter_out)","8ffc181d":"print('Training XGBoost model...')\nmodel_xgb = xgb.XGBClassifier()\nparams ={'nthread': 4,\n         'objective': 'binary:logistic',\n         'max_depth' : 8,\n         'min_child_weight': 3,\n         'learning_rate' : 0.1, \n         'n_estimators' : 300, \n         'subsample' : 0.9, \n         'colsample_bytree' : 0.5,\n         'silent': 1}\nmodel_xgb.fit(train[features],train.signal)","5fcbd433":"pred_test = model_xgb.predict_proba(test[features])[:,1]\nresult = pd.DataFrame({'id': test.id})\nresult['prediction'] = pred_test","46b3b646":"result.to_csv('submission_nacho.csv', index=False, sep=',')","a8dae385":"# Predict test, create file for kaggle","0046f9ce":"#  Reading training data","dab1eb8a":"### 1. Define new potential features","bb288def":"# Selecting features","bcfce515":"# Importing ML models and Evaluation metrics","82c60e34":"# Training XGBoost model","84f857c6":"### 2. Add new potential features to datasets","5bc8e6e0":"# Import data processing and plotting libraries"}}