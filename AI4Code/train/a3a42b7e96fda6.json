{"cell_type":{"f1379c1a":"code","083405a5":"code","7f837bcf":"code","954e19f9":"code","edbc5683":"code","d31c9a63":"code","aec2d336":"code","f3802a33":"code","74ab6ad3":"code","8c607dc1":"code","241c55e2":"markdown","3774fc50":"markdown","f1f241ea":"markdown","3bedd9e2":"markdown","76db5b9b":"markdown"},"source":{"f1379c1a":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport random ","083405a5":"n = 100\np = 2\nk = 4 \nX = np.random.random((n, p))\n","7f837bcf":"Data=pd.DataFrame(X,columns=['x','y'])\nplt.scatter(Data[\"x\"],Data[\"y\"],c='black') \nplt.xlabel('X') \nplt.ylabel('Y') \nplt.show()","954e19f9":"centres = X[np.random.choice(n,size=k,replace=False)]\ndistances = np.zeros((n, k))\nfor i in range(k):    \n    distances[:, i] = ((X-centres[i])**2).sum(axis=1)**0.5     \n    first_closest = np.argmin(distances, axis=1) ","edbc5683":"cen=pd.DataFrame(centres,columns=['x','y'])\ncen","d31c9a63":"Data['first_closest']=first_closest\nprint(first_closest)\nData.head()","aec2d336":"colors = ['magenta', 'red', 'blue', 'green']  \n\nplt.scatter(cen[\"x\"],cen[\"y\"], s=200, c='yellow') \n    \nplt.scatter(Data[\"x\"],Data[\"y\"],color=[colors[i] for i in first_closest]) \nplt.title('Data points before clustering') \nplt.xlabel('X')\nplt.ylabel('Y') \nplt.show()  ","f3802a33":"new_closest = np.zeros(n).astype(int)\nwhile True:     \n    old_closest = new_closest.copy()\n    distances = np.zeros((n, k))     \n    for i in range(k):       #calculating new distances from centroids  \n        distances[:, i] = ((X-centres[i])**2).sum(axis=1)**0.5         \n        new_closest = np.argmin(distances, axis=1)    \n    for i in range(k):        #getting new centroids\n        centres[i, :] = X[new_closest == i].mean(axis=0)     \n    if all(old_closest == new_closest):         \n        break \n\nData['new_closest']=new_closest\nData.head()","74ab6ad3":"plt.scatter(cen[\"x\"],cen[\"y\"], s=200, c='yellow') \n    \nplt.scatter(Data[\"x\"],Data[\"y\"],color=[colors[i] for i in new_closest]) \nplt.title('Data points after clustering') \nplt.xlabel('X')\nplt.ylabel('Y') \nplt.show()  ","8c607dc1":"TotalPreicision=0\nfor i in range(k):\n    TP = 0\n    FP = 0\n    Precision= 0\n    for j in range(n):\n        if first_closest[j] == new_closest[j]:\n            TP = TP+1\n        elif first_closest[j] != new_closest[j]:\n            FP = FP+1\n    if TP != 0:\n        Precision = TP\/(TP+FP)\n        TotalPreicision=TotalPreicision+Precision\n        \nprint('Precision= ',TotalPreicision\/k)","241c55e2":"Randomly assigning the data points to create centroids of variable radius ","3774fc50":"Calculating Precision\n\n$\n Precision = \\frac{True~Positive}{True~Positive + False~Positive}\n$","f1f241ea":"Creating random dataset","3bedd9e2":"Plotting the ground truth colour before clustering","76db5b9b":"Applying the Kmeans algorithm "}}