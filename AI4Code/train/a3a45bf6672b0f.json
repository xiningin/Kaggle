{"cell_type":{"5f334e47":"code","afd80042":"code","9f995281":"code","11ae6037":"code","ad89d328":"code","480c51a5":"code","25cf1008":"code","350c7f2a":"code","8b4a4489":"code","fbaba5ca":"code","b5860d87":"code","2ec9be30":"code","b817de77":"code","e69b2f17":"code","7f05ca47":"code","cfc96c09":"code","aa4aba22":"code","d75fbab6":"code","a1770925":"code","0dd47776":"code","e387c805":"code","4765a0cd":"markdown","db06df55":"markdown","724002e9":"markdown","1a0afa9a":"markdown","29b0a8c9":"markdown","0206db34":"markdown","e678463b":"markdown"},"source":{"5f334e47":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd \nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\n# data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport warnings\nwarnings.filterwarnings(\"ignore\")","afd80042":"train=pd.read_csv('\/kaggle\/input\/mobile-price\/train_data.csv')\ntest=pd.read_csv('\/kaggle\/input\/mobile-price\/test_data.csv')","9f995281":"train.head()","11ae6037":"train.shape","ad89d328":"test.head()","480c51a5":"test.shape","25cf1008":"train.isnull().sum()","350c7f2a":"test.isnull().sum()","8b4a4489":"train.describe()","fbaba5ca":"train.plot(x='price_range', y='ram', kind='scatter')\nplt.show()","b5860d87":"train.plot(x='price_range', y='wifi', kind='scatter')\nplt.show()","2ec9be30":"train.plot(kind=\"box\",figsize=(20,10))\nplt.show()","b817de77":"x=train.drop('price_range', axis=1)\nx","e69b2f17":"y=train['price_range']\ny","7f05ca47":"from sklearn.preprocessing import StandardScaler\nstd=StandardScaler()","cfc96c09":"x_std=std.fit_transform(x)\nx_std","aa4aba22":"lr=LogisticRegression()\nlr.fit(x_std,y)","d75fbab6":"test_std=std.transform(test)\nresult=lr.predict(test_std)\nresult","a1770925":"lr.score(x_std,y)","0dd47776":"sub=pd.DataFrame({'id':test['id'], 'price_range': result})","e387c805":"sub.to_csv('submission2.csv', index=False)","4765a0cd":"5)PREPROCESSING\n* STANDARD_SCALER\n* scales the features to have zero mean and standard deviation of one, to give it a feel and properties of \"standard\" normal distribution\n* **It doesn't perform well on features that have outliers\n* xi = (xi - xm)\/xs","db06df55":"1)ANAYSIS OF DATA","724002e9":"3)CHECKING FOR OUTLIERS","1a0afa9a":"2)EXPLORATORY DATA ANAYSIS AND VISUALIZATION","29b0a8c9":"7)SUBMITION","0206db34":"4)TRAINING","e678463b":"6)LOGISTIC REGRESSION"}}