{"cell_type":{"f07477f5":"code","3ab28383":"code","654c6be9":"code","d3d03fd8":"code","322a1184":"code","4bc1aaec":"code","a2bb9ddb":"code","b8c79ad3":"code","5302cfcc":"code","c51638cd":"code","cff6a9e2":"code","07be87b6":"code","25e4d2d6":"code","44c4e4ed":"code","4f005e20":"code","23e51f8b":"code","f4a8d56a":"code","ba79937b":"code","647ff558":"code","3ba2c6b4":"code","b9034144":"code","45790541":"markdown","d63729dc":"markdown","7f465300":"markdown","110ef4fb":"markdown","1b1993c6":"markdown","d7ae3168":"markdown","5ac58fbb":"markdown","171eaf72":"markdown","65236188":"markdown","59400e24":"markdown","bf004b5d":"markdown","72751a91":"markdown","7a81462b":"markdown","9c50dc71":"markdown","5cf0d33d":"markdown"},"source":{"f07477f5":"# importing libraries\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt\nimport seaborn as sns\nsns.set_style('darkgrid')\nfrom sklearn.preprocessing import LabelEncoder\nimport warnings\nwarnings.filterwarnings('ignore')\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\n\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, roc_auc_score\nfrom sklearn.metrics import classification_report\n\ndf = pd.read_csv('\/kaggle\/input\/stroke-prediction-dataset\/healthcare-dataset-stroke-data.csv')\nprint('Let\\'s have a look at the dataset:')\ndf.head()","3ab28383":"print('Details of the dataset:')\nprint (\"Rows     : \" , df.shape[0])\nprint (\"Columns  : \" , df.shape[1])\nprint (\"\\nFeatures : \\n\" , df.columns.tolist())\nprint (\"\\nMissing values :  \", df.isnull().sum().values.sum())\nprint (\"\\nUnique values : \\n\",df.nunique())","654c6be9":"df.describe().T","d3d03fd8":"df.isnull().sum().sort_values(ascending=False)[:]","322a1184":"sns.boxenplot(x='avg_glucose_level',hue='gender',data=df, color='Red')\nplt.title('Distribution of Average glucose level');","4bc1aaec":"plt.figure(figsize=(10,5))\nsns.boxenplot(x='bmi',data=df, color = 'Green')\nplt.title('Distribution of BMI');","a2bb9ddb":"sns.set_style('whitegrid')\nsns.distplot(df['age'],color = 'black')\nplt.xlim(0)\nplt.title('Age distribution');","b8c79ad3":"# getting data of people who suffered stroke\nstroke = df.loc[df['stroke']==1]\nsns.countplot(data=stroke,x='ever_married', palette=\"flare\")\nplt.title(\"Stroke vs Ever-Married\");","5302cfcc":"plt.figure(figsize=(10,5))\nsns.countplot(data=stroke,x='work_type', palette=\"bwr\")\nplt.title(\"Stroke vs Work Type\");","c51638cd":"plt.figure(figsize=(10,5))\nsns.countplot(data=stroke,x='smoking_status', palette=\"Set2\")\nplt.title(\"Stroke vs Smoking Status\");","cff6a9e2":"sns.countplot(data=stroke,x='Residence_type', palette=\"summer\")\nplt.title(\"Stroke vs Residence Type\");","07be87b6":"sns.countplot(data=stroke,x='hypertension', palette=\"spring\")\nplt.title(\"Stroke vs Hypertension\");","25e4d2d6":"sns.countplot(data=stroke,x='heart_disease', palette=\"spring\")\nplt.title(\"Stroke vs Heart Disease\");","44c4e4ed":"fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(12, 10))\ndf.plot(kind=\"hist\", y=\"age\", bins=70, color=\"b\", ax=axes[0][0])\ndf.plot(kind=\"hist\", y=\"bmi\", bins=100, color=\"r\", ax=axes[0][1])\ndf.plot(kind=\"hist\", y=\"heart_disease\", bins=6, color=\"g\", ax=axes[1][0])\ndf.plot(kind=\"hist\", y=\"avg_glucose_level\", bins=100, color=\"orange\", ax=axes[1][1])\nplt.show()","4f005e20":"fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 5))\ndf.plot(kind='scatter', x='age', y='avg_glucose_level', alpha=0.5, color='green', ax=axes[0], title=\"Age vs. avg_glucose_level\")\ndf.plot(kind='scatter', x='bmi', y='avg_glucose_level', alpha=0.5, color='red', ax=axes[1], title=\"bmi vs. avg_glucose_level\")\nplt.show()","23e51f8b":"print('Now, let\\'s check correlation between features.')\nplt.figure(figsize=(10,10))\nsns.heatmap(df.corr(),annot=True,cmap='summer');","f4a8d56a":"#filling missing values\ndf['bmi'].fillna(df['bmi'].mean(), inplace=True)","ba79937b":"df.stroke.value_counts()","647ff558":"# over-sampling the minority class\n\nfrom sklearn.utils import resample,shuffle\ndf_majority = df[df['stroke']==0]\ndf_minority = df[df['stroke']==1]\ndf_minority_upsampled = resample(df_minority,replace=True,n_samples=4800,random_state = 123)\nbalanced_df = pd.concat([df_minority_upsampled,df_majority])\nbalanced_df = shuffle(balanced_df)\nbalanced_df.stroke.value_counts()\ndf=balanced_df.copy()\n\n# label encoding\n\nresidence_mapping = {'Urban': 0, 'Rural': 1}\ndf['Residence_type'] = df['Residence_type'].map(residence_mapping)\nmarriage_mapping = {'No': 0, 'Yes': 1}\ndf['ever_married'] = df['ever_married'].map(marriage_mapping)\n\n# one-hot encoding\n\ndfDummies = pd.get_dummies(df[[\"gender\",\"work_type\",\"smoking_status\"]],drop_first=True)\ndf.drop([\"gender\",\"work_type\",\"smoking_status\"], axis=1, inplace=True)\ndf = pd.concat([df, dfDummies], axis=1)\n\n# scaling\n\nfrom sklearn.preprocessing import StandardScaler\nstd=StandardScaler()\ncolumns = ['avg_glucose_level','bmi','age']\ndf[columns] = std.fit_transform(df[columns])\n\ndf.head(5)","3ba2c6b4":"#splitting data\n\ny = df[\"stroke\"]\nX = df.drop(['stroke'],axis=1)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state = 101,stratify=y)\n\n# ML model\n\nmodel_xgb = 'Extreme Gradient Boost'\nxgb = XGBClassifier(learning_rate=0.01, n_estimators=15, max_depth=10,gamma=0.6, subsample=0.52,colsample_bytree=0.6,seed=27, \n                    reg_lambda=2, booster='dart', colsample_bylevel=0.6, colsample_bynode=0.5)\nxgb.fit(X_train, y_train)\nxgb_predicted = xgb.predict(X_test)\nxgb_conf_matrix = confusion_matrix(y_test, xgb_predicted)\nxgb_acc_score = accuracy_score(y_test, xgb_predicted)\nprint(\"confusion matrix\")\nprint(xgb_conf_matrix)\nprint(\"-\"*30)\nprint(\"AUC-ROC score of Extreme Gradient Boost:\",roc_auc_score(y_test, xgb_predicted)*100,'\\n')\nprint(\"-\"*30)\nprint(classification_report(y_test,xgb_predicted))","b9034144":"# saving model and scaler for later use\n\n# import pickle\n# pickle.dump(xgb, open('model.pkl','wb'))\n# pickle.dump(std, open('scaler.pkl', 'wb'))","45790541":"People without hypertension has more risk to have a stroke","d63729dc":"*Let's find out what is missing*","7f465300":"Now we have a close distribution of rural and urban type of residence. Looks like it does not effect much.","110ef4fb":"   **PROBLEM STATEMENT**\n\n* A stroke occurs when the blood supply to part of your brain is interrupted or reduced, preventing brain tissue from getting oxygen and nutrients. Brain cells begin to die in minutes. A stroke is a medical emergency, and prompt treatment is crucial. Early action can reduce brain damage and other complications.\n* According to WHO, stroke is the second leading cause of death. If we are able to warn people in advance that they are likely to get a stroke in future then they can change their lifestyle and adopt healthy habits. So based on features like bmi, age, work and smoking status, I built a ML binary classification model.\n\nJump to:\n\n[EDA](#EDA)\n\n[Modeling](#model)\n\n[Deployment](#deploy)\n\n***DO UPVOTE!!***","1b1993c6":"* This is highly imbalanced dataset. I am up-sampling the minority class using sklearn module resample.\n* Then I label encoded the categorical features having 2 classes. For categorical features with multiple categories, I used one-hot encoding.\n* Then after scaling the numerical features I used XGBoost Classifier to build a model.","d7ae3168":"*Looks like  the number of married people tend to have stroke significantly higher than single people. Interesting!!*","5ac58fbb":"Only one column has missing values. We will fill it before building model. Before that let's do some exploratory data analysis. This is a crucial step as it helps to turn data into insights.\n\n## <a id='EDA'>EDA<\/a>","171eaf72":"People in private sector has higher risk of having a stroke.","65236188":"In total, former smokers and currently smokers has the highest risk ","59400e24":"As age increases average glucose level also increases.","bf004b5d":"People without any previous heart disease has more risk to have a stroke","72751a91":"Majority of average glucose level records lies around 100 which is normal range of glucose. Same goes for bmi. Some outliers are also present in the data. Age aries from 0 to 80.\n\n\n## Exploring data of people who suffered stroke.","7a81462b":"<a id='deploy'>DEPLOYMENT<\/a>\n\nWhen we build the model on our local system and make predictions till that time the model gives prediction but as soon as we close the python file everything gets destroyed. So, it becomes important to save the model to avoid doing all the steps again. This is called Pickling or Serialization in python. This can be done using pickle module.","9c50dc71":"Using Flask framework I deployed it in Heroku. Heroku is a platform as a service (PAAS).\n\nYoutube tutorial: https:\/\/www.youtube.com\/watch?v=mrExsjcvF4o\n\nMy Github link: https:\/\/github.com\/ayushikaushik\/ML-deployment-stroke-prediction\n\nWebsite: https:\/\/strokes-prediction-api.herokuapp.com\/\n\nBasic Steps:\n1. Train model.\n2. Create web app using Flask.\n3. Commit the code in GitHub.\n4. Create an account in Heroku.\n5. Link GitHub to Heroku.\n6. Deploy the model.","5cf0d33d":"<a id='model'> Modeling<\/a>\n\nFirst of all, I will impute missing values.\n\nHere, I have imputed it with mean. Though mean imputation is generally bad practice because it doesn\u2019t take into account feature correlation. For example, if we took the average bmi from an age range of 15 to 80, then the eighty-year-old will appear to have a much higher bmi score that he actually should. So, you can try filling it based on age or gender."}}