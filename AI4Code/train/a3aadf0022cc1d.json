{"cell_type":{"1f041e0d":"code","8b9ad941":"code","b0dca03c":"code","27990fcc":"code","0529c0db":"code","8ac15ec8":"code","17c10f59":"code","36b3c5c7":"code","4f39130c":"code","3a7fd282":"code","426e8ce1":"code","60ef10df":"code","2c9303a7":"code","c58c4613":"code","7bdd3990":"code","f534dde7":"code","382286c8":"code","a6da8930":"code","fdb949e3":"code","1db87b19":"code","877edaf8":"code","9f6a91a8":"code","9c9b7518":"code","814da0d1":"code","90001313":"code","2a059b6a":"code","80b163b4":"code","121e1985":"code","2856adf9":"code","ed47944d":"code","1fbfe714":"code","81d681ed":"code","add85832":"code","e127db71":"code","0022763e":"markdown","bacb99a8":"markdown","f485b177":"markdown","0ad3c351":"markdown","db488ebf":"markdown","b2b19eb6":"markdown","b5f4e2be":"markdown","7db447f9":"markdown","7f33cf86":"markdown","b84f2f6d":"markdown","e57c0397":"markdown","d98150d4":"markdown","f5239593":"markdown"},"source":{"1f041e0d":"import os\nprint(os.listdir('..\/input\/vehicles'))","8b9ad941":"dataPath = '..\/input\/vehicles'","b0dca03c":"# Import Libraries\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.utils import to_categorical\nfrom tensorflow.keras.applications.mobilenet_v2 import MobileNetV2\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import GlobalAveragePooling2D, Dense\nfrom sklearn.metrics import classification_report, confusion_matrix","27990fcc":"import numpy as np\nimport cv2\nimport glob\nimport random\n\nfrom IPython.display import Image\nimport matplotlib.pyplot as plt","0529c0db":"def prepare_image(filepath):\n    img = cv2.imread(filepath)\n    img_resized = cv2.resize(img, (224, 224), interpolation=cv2.INTER_CUBIC)\n    img_result  = cv2.cvtColor(img_resized, cv2.COLOR_BGR2RGB)\n    return img_result","8ac15ec8":"dirList = glob.glob(dataPath+'\/*') # list of all directories in dataPath\ndirList.sort() # sorted in alphabetical order\nprint(dirList)","17c10f59":"Y_data = []\nfor i in range(len(dirList)):\n    fileList = glob.glob(dirList[i]+'\/*')\n    [Y_data.append(i) for file in fileList]\nprint(Y_data)","36b3c5c7":"X_data = []\nfor i in range(len(dirList)):\n    fileList = glob.glob(dirList[i]+'\/*')\n    [X_data.append(prepare_image(file)) for file in fileList]\nX_data = np.asarray(X_data)\nprint(X_data.shape)","4f39130c":"## random shuffle\nfrom sklearn.utils import shuffle\nX_data, Y_data = shuffle(X_data, Y_data, random_state=0)","3a7fd282":"print(Y_data)","426e8ce1":"testNum = random.randint(0,len(X_data)-1)\nprint(testNum)\nplt.imshow(X_data[testNum])","60ef10df":"num_classes = len(dirList) \nlabels = [dir.replace(dataPath+\"\/\", \"\") for dir in dirList]\nprint(labels)","2c9303a7":"equilibre = []\n[equilibre.append(Y_data.count(i)) for i in range(len(dirList))]\nprint(equilibre)","c58c4613":"# plot the circle of value counts in dataset\nplt.figure(figsize=(5,5))\nmy_circle=plt.Circle( (0,0), 0.5, color='white')\nplt.pie(equilibre, labels=labels, colors=['red','green','blue','yellow'],autopct='%1.1f%%')\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.show()","7bdd3990":"# Data Normalisation\nX_train = X_data \/ 255.0\nprint(X_train.shape)","f534dde7":"# One-hot encoding\nY_train = to_categorical(Y_data)\nprint(Y_train.shape)","382286c8":"input_shape = (224, 224, 3)","a6da8930":"# use MobieNet V2 as base model\nnet=MobileNetV2(input_shape=(224,224,3),weights='imagenet',include_top=False) \n\n# add Fully-Connected Layers to Model\nx=net.output\nx=GlobalAveragePooling2D()(x)\nx=Dense(1024,activation='relu')(x) # FC layer 1\nx=Dense(64,activation='relu')(x)   # FC layer 2\nout=Dense(num_classes,activation='softmax')(x) #final layer with softmax activation\n\nmodel=Model(inputs=net.input,outputs=out)\n\nmodel.summary()","fdb949e3":"# show layers no. & name\nfor i,layer in enumerate(model.layers):\n    print(i,layer.name)","1db87b19":"# set extra layers to trainable \nfor layer in model.layers[:155]:\n    layer.trainable=False\nfor layer in model.layers[155:]:\n    layer.trainable=True","877edaf8":"model.summary()","9f6a91a8":"# Compile Model\nmodel.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])","9c9b7518":"# Train Model (target is loss <0.01)\nbatch_size= 16\nnum_epochs = 20\nhistory = model.fit(X_train,Y_train,batch_size=batch_size,epochs=num_epochs) #,validation_data=(X_valid,Y_valid))","814da0d1":"# Save Model\nmodel.save('tl_worms4.h5')","90001313":"def classify_worms(imageFile):\n    testData = prepare_image(imageFile).reshape(1,224,224,3)\n    testData = testData \/ 255.0\n    predictions = model.predict(testData)\n    maxindex = int(np.argmax(predictions))\n    print(predictions[0][maxindex],labels[maxindex])\n    return labels[maxindex]","2a059b6a":"imageFile=dirList[0]+'\/A_1.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_worms(imageFile)","80b163b4":"imageFile=dirList[1]+'\/B_1.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_worms(imageFile)","121e1985":"imageFile=dirList[2]+'\/C_1.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_worms(imageFile)","2856adf9":"imageFile=dirList[3]+'\/S_1.jpg'\nplt.imshow(prepare_image(imageFile))\nclassify_worms(imageFile)","ed47944d":"Y_pred = model.predict(X_train)\ny_pred = np.argmax(Y_pred,axis=1)\n#y_label= [labels[k] for k in y_pred]\ncm = confusion_matrix(Y_data, y_pred)\nprint(cm)","1fbfe714":"print(classification_report(Y_data, y_pred, target_names=labels))","81d681ed":"TP = cm[1, 1]\nTN = cm[0, 0]\nFP = cm[0, 1]\nFN = cm[1, 0]\nspecificity = TN \/ float( TN + FP)\nsensitivity = TP \/ float(FN + TP)\nprint('Specificity:',specificity)\nprint('Sensitivity:',sensitivity)","add85832":"import itertools\ndef plot_confusion_matrix(cm,\n                          target_names,\n                          title='Confusion matrix',\n                          cmap=None,\n                          normalize=True):\n    accuracy = np.trace(cm) \/ float(np.sum(cm))\n    misclass = 1 - accuracy\n\n    if cmap is None:\n        cmap = plt.get_cmap('Blues')\n\n    plt.figure(figsize=(8, 6))\n    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    plt.colorbar()\n\n    if target_names is not None:\n        tick_marks = np.arange(len(target_names))\n        plt.xticks(tick_marks, target_names, rotation=45)\n        plt.yticks(tick_marks, target_names)\n\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n    thresh = cm.max() \/ 1.5 if normalize else cm.max() \/ 2\n        \n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        if normalize:\n            plt.text(j, i, \"{:0.4f}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n        else:\n            plt.text(j, i, \"{:,}\".format(cm[i, j]),\n                     horizontalalignment=\"center\",\n                     color=\"white\" if cm[i, j] > thresh else \"black\")\n\n\n    plt.tight_layout()\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label\\naccuracy={:0.4f}; misclass={:0.4f}'.format(accuracy, misclass))\n    plt.show()","e127db71":"plot_confusion_matrix(cm, \n                      normalize=False,\n                      target_names = labels,\n                      title=\"Confusion Matrix, not Normalized\")","0022763e":"## Prepare Data","bacb99a8":"## Load MobileNet v2 model & add FC-layers","f485b177":"## Data Normalisation","0ad3c351":"## Confusion Matrix report","db488ebf":"## Dataset = worms4 (cabbage_worm, corn_earworm, cutworm, fall_armyworm)","b2b19eb6":"### set FC-layers to trainable","b5f4e2be":"## Plot Confusion Matrix","7db447f9":"# Worms Classification\n## Transfer Learning : Mobilenet V2","7f33cf86":"### shuffle data","b84f2f6d":"## Test Model","e57c0397":"### check 1 picture per category","d98150d4":"## Transfer Learning setup","f5239593":"## Save Model"}}