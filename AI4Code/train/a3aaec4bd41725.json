{"cell_type":{"25761612":"code","cd793323":"code","c6bf3960":"code","b69f72b7":"code","20d67a3d":"code","2af3a318":"code","9ac340fd":"code","e04f04c8":"code","5670fceb":"code","48d30a5b":"code","bf8f606a":"code","81503b0c":"code","09a13c31":"code","2c122704":"code","e81fbdf9":"code","4749613d":"code","d8a46034":"code","3d23dd37":"code","d5e15521":"code","dad796a6":"code","35451374":"code","e7524d0c":"code","25fff09b":"code","e191fb17":"code","cb8a30e3":"code","0979111f":"code","de94e1fd":"code","239a5ecd":"code","56124f79":"code","c11b531b":"code","60f11650":"code","46196c54":"code","1be0e096":"code","37b291c9":"code","959bd580":"code","e2cce7c9":"code","1049c214":"code","1ac636ae":"code","41e424f0":"code","b8a80306":"code","35c88c6f":"code","0fbda7b9":"code","0183b0e9":"code","75d9f45c":"code","5e1dcebb":"code","867f304d":"code","40e8b870":"code","7301b8c7":"code","b493e3cd":"code","be7bd9dc":"code","d57db293":"code","70c96290":"code","ae492e3a":"code","fb2310eb":"code","d5418e9c":"code","0753960b":"code","ba938794":"code","7a1374f4":"code","29d561d9":"code","3cff9248":"code","fad0ef44":"code","c6d7cbdd":"code","b0191d9b":"code","bd49947b":"code","e461a2b8":"code","e4815954":"code","d7288592":"code","1e318b64":"code","e96c97eb":"code","bc2f01ee":"code","210604eb":"code","4a193b2b":"code","94fd72ed":"code","5c2fcc7b":"code","ae32d95e":"code","2a8a00e2":"code","bee9c767":"code","7a3fef90":"code","a92945f1":"code","ca71f0ac":"code","0661ffa4":"code","eaba3617":"code","07404555":"code","98ac3f94":"code","4ac1a064":"code","a054eb50":"code","5f363a8b":"code","db3d5898":"code","9e088aeb":"code","4ce798ec":"code","c14f8749":"code","75059eff":"code","7dbcce75":"code","84f4a354":"code","8dac6ba0":"code","b95f8acd":"code","bfa4bba0":"code","7dec9486":"code","df1e3183":"code","0d6d2ba6":"code","bea8b2ab":"markdown","f2d03cd6":"markdown","28c84a42":"markdown","7a82ab8f":"markdown","4b55c423":"markdown","dbf0559a":"markdown"},"source":{"25761612":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error, mean_squared_error, mean_squared_log_error\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nimport warnings\nwarnings.filterwarnings('ignore')","cd793323":"plt.rcParams['axes.labelsize']= 13.\nplt.rcParams['xtick.labelsize']= 13.\nplt.rcParams['ytick.labelsize']= 13.\nplt.rcParams['legend.fontsize'] = 13.\nplt.rcParams['figure.figsize']= [15.,8.]","c6bf3960":"pip install openpyxl","b69f72b7":"train = pd.read_excel(\"..\/input\/flight-fare-prediction-mh\/Data_Train.xlsx\")","20d67a3d":"train.head(10)","2af3a318":"train.shape","9ac340fd":"train.info()","e04f04c8":"train[\"Airline\"].value_counts().plot(kind=\"barh\");","5670fceb":"train[\"Duration\"].value_counts()","48d30a5b":"train.isna().sum()","bf8f606a":"# Drop missing value column\ntrain.dropna(inplace=True)","81503b0c":"train.isna().sum()","09a13c31":"### Day, month and year will be extracted froo the Date_of_Journeyt\ntrain[\"Journey_date\"] = pd.to_datetime(train[\"Date_of_Journey\"],format=\"%d\/%m\/%Y\").dt.day\ntrain[\"Journey_month\"] = pd.to_datetime(train[\"Date_of_Journey\"],format=\"%d\/%m\/%Y\").dt.month\ntrain[\"Journey_year\"] = pd.to_datetime(train[\"Date_of_Journey\"],format=\"%d\/%m\/%Y\").dt.year","2c122704":"train.head()","e81fbdf9":"train[\"Journey_year\"].value_counts()","4749613d":"train.drop([\"Date_of_Journey\"], axis=1, inplace=True)","d8a46034":"train.head()","3d23dd37":"# extracting Departure Hours and minutes\ntrain[\"Dep_hour\"] = pd.to_datetime(train[\"Dep_Time\"]).dt.hour\ntrain[\"Dep_minutes\"] = pd.to_datetime(train[\"Dep_Time\"]).dt.minute\ntrain.drop([\"Dep_Time\"],axis=1,inplace=True)","d5e15521":"train.head()","dad796a6":"# Extracting arrival hours and minutes\ntrain[\"Arrival_hour\"] = pd.to_datetime(train[\"Arrival_Time\"]).dt.hour\ntrain[\"Arrival_minute\"] = pd.to_datetime(train[\"Arrival_Time\"]).dt.minute\ntrain.drop([\"Arrival_Time\"],axis=1,inplace=True)","35451374":"train.head()","e7524d0c":"# extraction duration hours and minutes from duration column\n\nduration = list(train[\"Duration\"])\n\nfor i in range(len(duration)):\n    if len(duration[i].split()) != 2: # Check if duration contains only hour or mins\n        if \"h\" in duration[i]:\n            duration[i] = duration[i].strip() + \" 0m\"   # Adds 0 minute\n        else:\n            duration[i] = \"0h \" + duration[i]  # Adds 0 hour\n\nduration_hours = []\nduration_mins = []\nfor i in range(len(duration)):\n    duration_hours.append(int(duration[i].split(sep = \"h\")[0]))    # Extract hours from duration\n    duration_mins.append(int(duration[i].split(sep = \"m\")[0].split()[-1]))   # Extracts only minutes from duration","25fff09b":"train[\"duration_hours\"] = duration_hours\ntrain[\"duration_mins\"]  = duration_mins","e191fb17":"train.head()","cb8a30e3":"train.drop([\"Duration\"],axis=1,inplace=True) ","0979111f":"train.head()","de94e1fd":"train[\"Additional_Info\"].value_counts()","239a5ecd":"# Most coloums of the additional info of having \" no info \" which is of no use \n# Route and No of Stops shows  and shares same info about the stops \ntrain.drop([\"Additional_Info\", \"Route\"], axis=1, inplace=True)","56124f79":"train.head()","c11b531b":"train.info()","60f11650":"train[\"Airline\"].value_counts()","46196c54":"sns.catplot(y = \"Price\",\n            x = \"Airline\", \n            data = train.sort_values(\"Price\", ascending = False), \n            kind=\"boxen\",\n            height = 6, \n            aspect = 3);","1be0e096":"Airlines = train[[\"Airline\"]]\nAirlines = pd.get_dummies(Airlines, drop_first=True)\nAirlines.head()","37b291c9":"Source = train[[\"Source\"]]\nSource = pd.get_dummies(Source,drop_first=True)\nSource.head()","959bd580":"Destination = train[[\"Destination\"]]\nDestination = pd.get_dummies(Destination, drop_first=True)\nDestination.head()","e2cce7c9":"train[\"Total_Stops\"].value_counts()","1049c214":"train.replace({\"non-stop\":0, \"1 stop\":1, \"2 stops\":2, \"3 stops\":3, \"4 stops\":4}, inplace=True) ","1ac636ae":"train.head()","41e424f0":"train.drop([\"Airline\", \"Source\", \"Destination\"], axis=1, inplace=True)","b8a80306":"train.head()","35c88c6f":"train_data = pd.concat([train,Airlines, Source, Destination], axis=1)","0fbda7b9":"train_data.head()","0183b0e9":"train_data.columns","75d9f45c":"train_data.shape","5e1dcebb":"train_data.info()","867f304d":"# Correlationm \nplt.figure(figsize = (18,18))\nsns.heatmap(train.corr(),annot=True, cmap=\"RdYlGn\");","40e8b870":"train_data.head()","7301b8c7":"x = train_data.drop([\"Price\"], axis=1)\ny = train[\"Price\"]","b493e3cd":"feature = ExtraTreesRegressor()\nfeature.fit(x,y)","be7bd9dc":"print(feature.feature_importances_)","d57db293":"feature_importance = pd.Series(feature.feature_importances_, index= x.columns)\nfeature_importance.nlargest(20).plot(kind=\"barh\");","70c96290":"train_data.head()","ae492e3a":"x.head()","fb2310eb":"y.head()","d5418e9c":"x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=42)","0753960b":"rf = RandomForestRegressor()\nrf.fit(x_train, y_train)","ba938794":"rf.score(x_train, y_train)","7a1374f4":"rf.score(x_test, y_test)","29d561d9":"y_preds = rf.predict(x_test)","3cff9248":"y_preds","fad0ef44":"sns.displot(y_test-y_preds);","c6d7cbdd":"plt.scatter(y_test, y_preds, alpha=0.5);","b0191d9b":"print('MAE:', mean_absolute_error(y_test, y_preds))\nprint('MSE:', mean_squared_error(y_test, y_preds))\nprint('MSLE:', mean_squared_log_error(y_test, y_preds))","bd49947b":"from sklearn.metrics import r2_score\nr2_score(y_test, y_preds)","e461a2b8":"# Randomized Search CV\n\nn_estimators = [int(x) for x in np.linspace(start=100, stop=1200, num=12)]\nmax_depth = [int(x) for x in np.linspace(5,30, num=6)]\nmax_features = ['auto', 'sqrt']\nmin_samples_slit = [2,5,10,15,100]\nmin_samples_leaf = [1,2,5,10]","e4815954":"rf_grid ={\"n_estimators\" : n_estimators,\n         \"max_features\": max_features,\n         \"max_depth\":max_depth,\n         \"min_samples_split\": min_samples_slit,\n         \"min_samples_leaf\": min_samples_leaf}","d7288592":"rf_random = RandomizedSearchCV(estimator=rf, \n                              param_distributions = rf_grid,\n                              scoring = 'neg_mean_squared_error',\n                              cv =5,\n                              n_iter = 10,\n                              verbose= 2,\n                              random_state=42,\n                              n_jobs = 1)","1e318b64":"rf_random.fit(x_train, y_train)","e96c97eb":"rf_random.best_params_","bc2f01ee":"rf_random.best_score_","210604eb":"prediction = rf_random.predict(x_test)","4a193b2b":"sns.displot(y_test-prediction);","94fd72ed":"plt.scatter(y_test, prediction, alpha=0.5);","5c2fcc7b":"print('MAE:', mean_absolute_error(y_test, prediction))\nprint('MSE:', mean_squared_error(y_test, prediction))\nprint('MSLE:', mean_squared_log_error(y_test, prediction))","ae32d95e":"r2_score(y_test, prediction)","2a8a00e2":"test = pd.read_excel('..\/input\/flight-fare-prediction-mh\/Test_set.xlsx')\ntest.head()","bee9c767":"test.columns","7a3fef90":"test.info()","a92945f1":"test.isna().sum()","ca71f0ac":"test[\"Airline\"].value_counts()","0661ffa4":"test[\"journey_day\"] = pd.to_datetime(test[\"Date_of_Journey\"], format=\"%d\/%m\/%Y\").dt.day\ntest[\"journey_month\"] = pd.to_datetime(test[\"Date_of_Journey\"], format=\"%d\/%m\/%Y\").dt.month\ntest[\"journey_year\"] = pd.to_datetime(test[\"Date_of_Journey\"], format=\"%d\/%m\/%Y\").dt.year\ntest[\"dep_hour\"] = pd.to_datetime(test[\"Dep_Time\"]).dt.hour\ntest[\"dep_minute\"] = pd.to_datetime(test[\"Dep_Time\"]).dt.minute\ntest[\"arrival_hour\"] = pd.to_datetime(test[\"Arrival_Time\"]).dt.hour\ntest[\"arrival_minute\"] = pd.to_datetime(test[\"Arrival_Time\"]).dt.minute\ntest.drop([\"Date_of_Journey\",\"Dep_Time\",\"Arrival_Time\"], axis=1, inplace=True)","eaba3617":"test.head()","07404555":"# Categorical Features\nAirline = pd.get_dummies(test[\"Airline\"], drop_first=True)\nSource = pd.get_dummies(test[\"Source\"], drop_first=True)\nDestination = pd.get_dummies(test[\"Destination\"], drop_first=True)","98ac3f94":"Airline.head()","4ac1a064":"Destination.head()","a054eb50":"Source.head()","5f363a8b":"test_data = pd.concat([test, Airline,Destination, Source], axis=1)","db3d5898":"test_data.head()","9e088aeb":"test_data.drop([\"Airline\", \"Destination\", \"Source\"], axis=1, inplace=True)","4ce798ec":"test_data.head()","c14f8749":"#Total_stops\ntest_data.replace({\"non-stop\": 0, \"1 stop\": 1, \"2 stops\": 2, \"3 stops\": 3, \"4 stops\": 4}, inplace = True)\n\n# Duration \nduration = list(test_data[\"Duration\"])\n\nfor i in range(len(duration)):\n    if len(duration[i].split()) != 2:    # Check if duration contains only hour or mins\n        if \"h\" in duration[i]:\n            duration[i] = duration[i].strip() + \" 0m\"   # Adds 0 minute\n        else:\n            duration[i] = \"0h \" + duration[i]           # Adds 0 hour\n\nduration_hours = []\nduration_mins = []\nfor i in range(len(duration)):\n    duration_hours.append(int(duration[i].split(sep = \"h\")[0]))    # Extract hours from duration\n    duration_mins.append(int(duration[i].split(sep = \"m\")[0].split()[-1]))   # Extracts only minutes from duration\n\n# Adding Duration column to test set\ntest_data[\"Duration_hours\"] = duration_hours\ntest_data[\"Duration_mins\"] = duration_mins\ntest_data.drop([\"Duration\"], axis = 1, inplace = True)","75059eff":"test_data.head()","7dbcce75":"test_data.drop([\"Route\", \"Additional_Info\"], axis=1, inplace=True)","84f4a354":"test_data.head(5)","8dac6ba0":"test_data.info()","b95f8acd":"rf_random.best_params_","bfa4bba0":"new_rf = RandomForestRegressor(n_estimators =700, min_samples_split=15, min_samples_leaf=1,max_features=\"auto\", max_depth=20)\nnew_rf.fit(x_train, y_train)","7dec9486":"new_rf.score(x_train, y_train)","df1e3183":"new_rf.score(x_test, y_test)","0d6d2ba6":"r2_score(y_test, prediction)","bea8b2ab":"## Test Data","f2d03cd6":"## Handling Categorical features\nOne can find many ways to handle categorical data. Some of them categorical data are,\n\n    **Nominal data** --> data are not in any order --> **OneHotEncoder** is used in this case\n    **Ordinal data** --> data are in order --> **LabelEncoder** is used in this case","28c84a42":"### 1 missing value found in Route and Total_Stops columns","7a82ab8f":"## Total Stops plays the most important role to decide the fare of the airlines","4b55c423":"Hyperparamter Tuning ","dbf0559a":"## Preprocessing"}}