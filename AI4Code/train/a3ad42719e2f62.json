{"cell_type":{"02b63c69":"code","24018c00":"code","1be2fcba":"code","bcac23b1":"code","4761c1d7":"code","5b7bbfa6":"code","27354462":"code","3a50b08e":"code","236b1c71":"code","2a4dcb9b":"code","64a168a6":"code","320afc6c":"code","39d77925":"code","91027a78":"code","c7b07818":"code","536e1de8":"code","de9ffe62":"code","769a4e90":"code","6a81b2ec":"code","8fc786cb":"code","acee7d11":"markdown","71aabc97":"markdown","5531b75b":"markdown","fbad8138":"markdown","b1dfe699":"markdown","48bf8fea":"markdown","12b37d43":"markdown","c4f2f158":"markdown","247d3aa5":"markdown"},"source":{"02b63c69":"!pip install -q efficientnet","24018c00":"train_dir = '..\/input\/railway-track-fault-detection\/Railway Track fault Detection Updated\/Train'\nval_dir   = '..\/input\/railway-track-fault-detection\/Railway Track fault Detection Updated\/Validation'\ntest_dir  = '..\/input\/railway-track-fault-detection\/Railway Track fault Detection Updated\/Test'","1be2fcba":"import os\ntrain_defective_fnames = os.listdir(train_dir+'\/Defective' )\ntrain_nondefective_fnames = os.listdir(train_dir+'\/Non defective')","bcac23b1":"import matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\n\n# Parameters for our graph; we'll output images in a 10x10 configuration\nnrows = 4\nncols = 4\n\n# Index for iterating over images\npic_index = 0\n\n# Set up matplotlib fig, and size it to fit 4x4 pics\nfig = plt.gcf()\nfig.set_size_inches(ncols * 4, nrows * 4)\n\npic_index += 8\nnext_defective_pix = [os.path.join(train_dir+'\/Defective', fname) \n                for fname in train_defective_fnames[pic_index-8:pic_index]]\nnext_nondefective_pix = [os.path.join(train_dir+'\/Non defective', fname) \n                for fname in train_nondefective_fnames[pic_index-8:pic_index]]\n\n\nfor i, img_path in enumerate(next_defective_pix+next_nondefective_pix):\n  # Set up subplot; subplot indices start at 1\n  sp = plt.subplot(nrows, ncols, i + 1)\n  sp.axis('Off') # Don't show axes (or gridlines)\n\n  img = mpimg.imread(img_path)\n  plt.imshow(img)\n\nplt.show()","4761c1d7":"from tensorflow.keras.preprocessing.image import ImageDataGenerator\n\ntarget_size=(300,300)\nbatch_size = 16","5b7bbfa6":"train_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',    \n    shuffle=True,\n    seed=42,\n    class_mode='categorical')","27354462":"val_datagen = ImageDataGenerator(rescale=1.\/255)\n\nval_generator = val_datagen.flow_from_directory(\n    val_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',\n    shuffle=False,    \n    class_mode='categorical')","3a50b08e":"test_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_datagen.flow_from_directory(\n    test_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',\n    shuffle=False,     \n    class_mode=None)","236b1c71":"num_classes = 2\ninput_shape = (300,300,3)","2a4dcb9b":"import efficientnet.tfkeras as efn\nfrom tensorflow.keras import models, layers, optimizers, regularizers, callbacks\n\nbase_model = efn.EfficientNetB7(input_shape=input_shape, weights='imagenet', include_top=False)\nbase_model.trainable = False # freeze the base model (for transfer learning)\n\nx = base_model.output\nx = layers.GlobalAveragePooling2D()(x)\nx = layers.Dense(128)(x)\nout = layers.Dense(num_classes, activation=\"softmax\")(x)\n\nmodel = models.Model(inputs=base_model.input, outputs=out)\n\nmodel.summary()","64a168a6":"# compile model\nmodel.compile(loss='categorical_crossentropy', optimizer='Adam', metrics=['accuracy'])","320afc6c":"## set Checkpoint : save best only, verbose on\n#checkpoint = callbacks.ModelCheckpoint(\"railtrack_enetB7.hdf5\", monitor='accuracy', verbose=0, save_best_only=True, mode='auto', save_freq=1)","39d77925":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VAL  =val_generator.n\/\/val_generator.batch_size\nSTEP_SIZE_TEST =test_generator.n\/\/test_generator.batch_size\nnum_epochs = 30","91027a78":"# Train Model\nhistory = model.fit(train_generator,steps_per_epoch=STEP_SIZE_TRAIN,epochs=num_epochs, validation_data=val_generator, validation_steps=STEP_SIZE_VAL) #, callbacks=[checkpoint])","c7b07818":"## Save Model\nmodels.save_model(model, 'railway_track_fault_detection.h5')","536e1de8":"## load best model weights if using callback (save-best-only)\n#model.load_weights(\"railtrack_enetB7.hdf5\")","de9ffe62":"score = model.evaluate(test_generator, steps=STEP_SIZE_TEST) # with test dataset\nprint(score)","769a4e90":"import numpy as np\nfrom sklearn.metrics import classification_report, confusion_matrix\n\npredY=model.predict(test_generator) # with validation dataset\ny_pred = np.argmax(predY,axis=1)\ny_actual = test_generator.classes\ncm = confusion_matrix(y_actual, y_pred)\nprint(cm)","6a81b2ec":"# report confusion matrix\nlabels = ['Defective', 'Non Defective']\nprint(classification_report(y_actual, y_pred, target_names=labels))","8fc786cb":"# Show Train History\nkeys=history.history.keys()\nprint(keys)\n\ndef show_train_history(hisData,train,val): \n    plt.plot(hisData.history[train])\n    plt.plot(hisData.history[val])\n    plt.title('Training History')\n    plt.ylabel(train)\n    plt.xlabel('Epoch')\n    plt.legend(['train', 'val'], loc='upper left')\n    plt.show()\n\nshow_train_history(history, 'loss', 'val_loss')\nshow_train_history(history, 'accuracy', 'val_accuracy')","acee7d11":"## Show Dataset Images","71aabc97":"## Training History","5531b75b":"## Confusion Matrix","fbad8138":"## Build Model (EfficienetNet)","b1dfe699":"# Railway Track Fault Detection\n## [Dataset](https:\/\/www.kaggle.com\/salmaneunus\/railway-track-fault-detection)","48bf8fea":"## Evaluate Model","12b37d43":"## Data Augmentation","c4f2f158":"## Train Model","247d3aa5":"## Save Model"}}