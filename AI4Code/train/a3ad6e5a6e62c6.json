{"cell_type":{"fe11ee3d":"code","4548dc08":"code","faa06fc7":"code","d1cb7487":"code","d422adc2":"code","28067de1":"code","dfa732c6":"code","dac29846":"code","bf702bf0":"code","9be722eb":"code","40e151e6":"code","1740ee04":"code","60a62659":"code","aa374e43":"code","580d27f3":"code","47c6db28":"code","38699e3c":"code","2f3623b0":"code","27ce4288":"code","de8168dc":"code","4b676a15":"code","60c8d4aa":"code","4d12e669":"code","5c2d5389":"code","1850b91d":"code","af7c6e7b":"code","a2182cdd":"code","64301f5c":"code","4125486f":"code","3a4a6042":"code","b33568e2":"code","2217a86f":"code","0c372df1":"code","c1407ce9":"code","35f3df6d":"code","13dab65f":"code","1e9743d3":"markdown","9a0de734":"markdown","3c04c94f":"markdown","0ee88dda":"markdown","6e2c19bf":"markdown","e006fc8c":"markdown","7918275f":"markdown","b16fc71d":"markdown","d4fc4298":"markdown","c624f9d4":"markdown","f05f181c":"markdown","2c90a035":"markdown"},"source":{"fe11ee3d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4548dc08":"import ast\nfrom sklearn.feature_extraction.text import CountVectorizer\nimport nltk \nfrom nltk.stem.porter import PorterStemmer\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport warnings\nwarnings.filterwarnings(\"ignore\")","faa06fc7":"movies = pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")\ncredits = pd.read_csv(\"\/kaggle\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv\")","d1cb7487":"movies.head()","d422adc2":"credits.head()","28067de1":"movies = movies.merge(credits,on='title')","dfa732c6":"movies.head()","dac29846":"movies.info()","bf702bf0":"# columns which are required will extract that\nmovies = movies[['movie_id','title','overview','genres','keywords','cast','crew']]","9be722eb":"movies.head()","40e151e6":"#droppping the null values\nmovies.dropna(inplace=True)","1740ee04":"#Looking for duplicate values\nmovies.duplicated().sum()","60a62659":"def convert(obj):\n    L = []\n    for i in ast.literal_eval(obj):\n        L.append(i['name'])\n    return L","aa374e43":"movies['genres'] = movies['genres'].apply(convert)","580d27f3":"movies['keywords'] = movies['keywords'].apply(convert)","47c6db28":"movies.head()","38699e3c":"#function for extracting top(first) 3 actors from the movie \n\ndef convert3(obj):\n    L = []\n    counter = 0\n    for i in ast.literal_eval(obj):\n        if counter !=3:\n            L.append(i['name'])\n            counter+=1\n        else:\n            break\n    return L","2f3623b0":"movies['cast'] = movies['cast'].apply(convert3)","27ce4288":"movies.head()","de8168dc":"#function to fetch the director of movie from the crew column\ndef fetch_director(obj):\n    L = []\n    for i in ast.literal_eval(obj):\n        if i['job'] == 'Director':\n            L.append(i['name'])\n            break\n    return L","4b676a15":"movies['crew'] = movies['crew'].apply(fetch_director)","60c8d4aa":"movies.head()","4d12e669":"movies['overview'] = movies['overview'].apply(lambda x:x.split())","5c2d5389":"movies.head()","1850b91d":"# applying a transformation to remove spaces between words \n\nmovies['genres'] = movies['genres'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['keywords'] = movies['keywords'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['cast'] = movies['cast'].apply(lambda x:[i.replace(\" \",\"\") for i in x])\nmovies['crew'] = movies['crew'].apply(lambda x:[i.replace(\" \",\"\") for i in x])","af7c6e7b":"movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']\n","a2182cdd":"#combine the things in a new dataframe\nnew_df = movies[['movie_id','title','tags']]\nnew_df['tags'] = new_df['tags'].apply(lambda x:\" \".join(x))","64301f5c":"new_df.head()","4125486f":"new_df['tags'] = new_df['tags'].apply(lambda x:x.lower()) #lower casing all the alphabets in the tags column","3a4a6042":"cv = CountVectorizer(max_features=5000,stop_words='english')\nvectors = cv.fit_transform(new_df['tags']).toarray()","b33568e2":"ps = PorterStemmer()\n#defining the stemming function\ndef stem(text):\n    y=[]\n    \n    for i in text.split():\n        y.append(ps.stem(i))\n    return \" \".join(y)","2217a86f":"new_df['tags'] = new_df['tags'].apply(stem) #appplying stemming process on tags column\n","0c372df1":"similarity = cosine_similarity(vectors)","c1407ce9":"def recommend(movie):\n    movie_index = new_df[new_df['title'] == movie].index[0]\n    distances = similarity[movie_index]\n    movies_list = sorted(list(enumerate(distances)),reverse=True, key=lambda x:x[1])[1:6]\n    \n    for i in movies_list:\n        print(new_df.iloc[i[0]].title)","35f3df6d":"recommend('John Carter')  #enter movies only which are in the dataset, otherwise it would result in error\n","13dab65f":"recommend('The Dark Knight Rises')","1e9743d3":"## Merging both the dataset (movie + credits)","9a0de734":"Now the 'tag' column will be used in the recommendation system, it contains the following data (in order) :\n\n<ul>Overview (Short summary of the movie)<\/ul>\n<ul>Genres (Type of movie)<\/ul>\n<ul>Keywords<\/ul>\n<ul>Cast (3 lead actors)<\/ul>\n<ul>Crew (Name of Director)<\/ul>","3c04c94f":"## Tags Column\nThe tags column is the combination of the following columns : title + overview + genres + cast + keywords + crew (director)","0ee88dda":"# Importing the libraries","6e2c19bf":"## If u like it upvote it ;)","e006fc8c":"### Genre extraction","7918275f":"# Similarity Measure Between Movies\nFor calculating similarity, the cosine distance between different vectors will be used.","b16fc71d":"# Recommendation Function\u00b6\n","d4fc4298":"# Stemming process","c624f9d4":"The movie dataset has the following features:-\n\n  <ul><li>budget - The budget in which the movie was made. <\/li>\n    <li>genre - The genre of the movie, Action, Comedy ,Thriller etc.<\/li>\n    <li>homepage - A link to the homepage of the movie.<\/li>\n    <li>id - This is infact the movie_id as in the first dataset.<\/li>\n    <li>keywords - The keywords or tags related to the movie.<\/li>\n    <li>original_language - The language in which the movie was made.<\/li>\n    <li>original_title - The title of the movie before translation or adaptation.<\/li>\n    <li>overview - A brief description of the movie.<\/li>\n    <li>popularity - A numeric quantity specifying the movie popularity.<\/li>\n    <li>production_companies - The production house of the movie.<\/li>\n    <li>production_countries - The country in which it was produced.<\/li>\n    <li>release_date - The date on which it was released.<\/li>\n    <li>revenue - The worldwide revenue generated by the movie.<\/li>\n    <li>runtime - The running time of the movie in minutes.<\/li>\n    <li>status - \"Released\" or \"Rumored\".<\/li>\n    <li>tagline - Movie's tagline.title - Title of the movie.<\/li>\n    <li>vote_average - average ratings the movie recieved.<\/li>\n    <li>vote_count - the count of votes recieved.<\/li>\n    <br>\n    \n\n    The credits dataset contains the following features:-\n    \n\n   <li>movie_id - A unique identifier for each movie.<\/li>\n   <li>cast - The name of lead and supporting actors.<\/li>\n    <li>crew - The name of Director, Editor, Composer, Writer etc.<\/li><\/ul>","f05f181c":"## Making the predicton","2c90a035":"# Text Vectorization"}}