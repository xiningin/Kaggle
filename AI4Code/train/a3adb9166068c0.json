{"cell_type":{"57a9137d":"code","aa7cb800":"code","3ada7890":"code","695b7f89":"code","5c3d330b":"code","32bc395a":"code","3923509f":"code","df214e47":"code","e2230ead":"code","b83e4b64":"code","d184a99d":"code","22b984be":"code","c9d5a51d":"markdown","fe3c87b7":"markdown","52f6653b":"markdown","0db1ffa2":"markdown","fd7d84c0":"markdown","8d510a4f":"markdown","d8ceff26":"markdown","11cd3720":"markdown","175673b4":"markdown","9a1de875":"markdown","06ce2ca8":"markdown","1650e3dd":"markdown","3c427205":"markdown","af8f699b":"markdown","0a67cbf4":"markdown"},"source":{"57a9137d":"# Using library\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom keras import layers, models\n\nimport matplotlib.font_manager as fm\nfont = fm.FontProperties(fname='..\/input\/staatfont\/Staatliches-Regular.ttf')","aa7cb800":"train = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/train.csv')\ntest = pd.read_csv('..\/input\/tabular-playground-series-jun-2021\/test.csv')\n\nX = train.drop(['target','id'],axis=1)\ny = train['target']\ntest = test.drop(['id'],axis=1)","3ada7890":"X","695b7f89":"from sklearn.decomposition import PCA\npca = PCA(n_components=27, svd_solver='randomized', whiten =True)\nX = pca.fit_transform(X)\n\nX = np.array(X)\ny = np.array(pd.get_dummies(y))\ntest = np.array(test)","5c3d330b":"model = models.Sequential()\nmodel.add(layers.Dense(9, input_shape=X.shape, activation='relu'))\nmodel.add(layers.Dense(9, activation='softmax'))\nmodel.compile(loss = 'categorical_crossentropy', optimizer='adam')\nmodel.summary()","32bc395a":"history = model.fit(X, y, epochs=30, batch_size=256, validation_split=0.3,verbose=1)","3923509f":"weight = model.get_weights()\nlayer1 = pd.DataFrame([list(range(1,28,1)),np.ones((27))]).T\nlayer2 = pd.DataFrame([list(range(1,28,3)),np.ones((9))]).T\nlayer2[1] = layer2[1]*2\nlayer3 = layer2.copy()\nlayer3[1] = 3\npoint = pd.concat([layer1,layer2,layer3]).reset_index(drop=True)\npoint.columns = ['y', 'x']","df214e47":"print(\"weight value shape : \",model.get_weights()[0].shape, model.get_weights()[2].shape)\nprint(\"bias value shape : \", model.get_weights()[1].shape, model.get_weights()[3].shape)","e2230ead":"fig = plt.figure(figsize=(20,13))\nplt.scatter( x= point['x'],y=point['y'], s=400,color='black')\n\nweight_i = 0\nweight_j =0\nfor i in range(1,28):\n    weight_j =0\n    for j in range(1,28,3):\n        tmp = pd.DataFrame({'x':[1,2], 'y': [i,j]})\n        we = weight[0][weight_i][weight_j]\n        if we >= 0:\n            color = 'green'\n        else:\n            color = 'red'\n        sns.lineplot(x=tmp['x'],y=tmp['y'],ci=None,lw=np.abs(we)**2*2,color=color)\n        weight_j = weight_j+1\n    weight_i = weight_i+1\n    \nweight_i = 0\nweight_j =0\nfor i in range(1,28,3):\n    weight_j =0\n    for j in range(1,28,3):\n        tmp = pd.DataFrame({'x':[2,3], 'y': [i,j]})\n        we = weight[2][weight_i][weight_j]\n        if we >= 0:\n            color = 'green'\n        else:\n            color = 'red'\n        sns.lineplot(x=tmp['x'],y=tmp['y'],lw=np.abs(we)**2*2,ci=None,color=color)\n        weight_j = weight_j+1\n    weight_i = weight_i+1\n        \nplt.axis('off')\nplt.text(s='Input_layer', x=1,y=28,font = font, fontsize=18,va='center',ha='center')\nplt.text(s='hidden_layer', x=2,y=28,font = font,fontsize=18,va='center',ha='center')\nplt.text(s='out_layer', x=3,y=28,font = font,fontsize=18,va='center',ha='center')\nplt.text(s='Consider only weight value', x=0.9,y=30,va='center',ha='left',font = font,fontsize=50)\n\nplt.show()","b83e4b64":"fig = plt.figure(figsize=(20,13))\nax = fig.add_subplot(111)\nplt.scatter( x= point['x'],y=point['y'], s=400,color='black')\n\nweight_i = 0\nweight_j =0\nfor i in range(1,28):\n    weight_j =0\n    for j in range(1,28,3):\n        tmp = pd.DataFrame({'x':[1,2], 'y': [i,j]})\n        we = weight[0][weight_i][weight_j]\n        bias = weight[1][weight_j]\n        value = we + bias\n        if value >= 0:\n            color = 'green'\n        else:\n            color = 'red'\n        sns.lineplot(x=tmp['x'],y=tmp['y'],ci=None,lw=np.abs(we)**2*2,color=color)\n        weight_j = weight_j+1\n    weight_i = weight_i+1\n    \nweight_i = 0\nweight_j =0\nfor i in range(1,28,3):\n    weight_j =0\n    for j in range(1,28,3):\n        tmp = pd.DataFrame({'x':[2,3], 'y': [i,j]})\n        we = weight[2][weight_i][weight_j]\n        bias = weight[3][weight_j]\n        value = we + bias\n        if value >= 0:\n            color = 'green'\n        else:\n            color = 'red'\n        sns.lineplot(x=tmp['x'],y=tmp['y'],lw=np.abs(we)**2*2,ci=None,color=color)\n        weight_j = weight_j+1\n    weight_i = weight_i+1\n        \n        \nplt.axis('off')\nplt.text(s='Input_layer', x=1,y=28,font = font, fontsize=18,va='center',ha='center')\nplt.text(s='hidden_layer', x=2,y=28,font = font,fontsize=18,va='center',ha='center')\nplt.text(s='out_layer', x=3,y=28,font = font,fontsize=18,va='center',ha='center')\nplt.text(s='Consider weight and bias value', x=0.9,y=30,va='center',ha='left',font = font,fontsize=50)\nplt.text(s='Consider Relu', x=2,y=27,font = font,fontsize=18,va='center',ha='center')\n\n\nax.axvspan(1.8, 2.2, fc=\"gray\", alpha=0.2)\n\nplt.show()","d184a99d":"fig = plt.figure(figsize=(20,13))\nax = fig.add_subplot(111)\nplt.scatter( x= point['x'],y=point['y'], s=400,color='black')\n\nweight_i = 0\nweight_j =0\nfor i in range(1,28):\n    weight_j =0\n    for j in range(1,28,3):\n        tmp = pd.DataFrame({'x':[1,2], 'y': [i,j]})\n        we = weight[0][weight_i][weight_j]\n        bias = weight[1][weight_j]\n        value = we + bias\n        if value >= 0:\n            color = 'green'\n        else:\n            color = 'red'\n        sns.lineplot(x=tmp['x'],y=tmp['y'],ci=None,lw=np.abs(we)**2*2,color=color)\n        weight_j = weight_j+1\n    weight_i = weight_i+1\n    \nweight_i = 0\nweight_j =0\nfor i in range(1,28,3):\n    weight_j =0\n    for j in range(1,28,3):\n        tmp = pd.DataFrame({'x':[2,3], 'y': [i,j]})\n        we = weight[2][weight_i][weight_j]\n        bias = weight[3][weight_j]\n        value = we + bias\n        if value >= 0:\n            color = 'green'\n        else:\n            color = 'red'\n        sns.lineplot(x=tmp['x'],y=tmp['y'],lw=np.abs(we)**2*2,ci=None,color=color)\n        weight_j = weight_j+1\n    weight_i = weight_i+1\n        \nfor i in range(1,28):\n    value = round(X[0][i-1],3)\n    plt.text(s =value, x=0.9, y=i,font=font, fontsize=18,va='center',ha='center')\n\ntmp_arr = []\nfor i in range(0,9):\n    value = 0\n    for j in range(0,27):\n        value = value + X[0][j] * weight[0][j][i] + weight[1][i]\n    tmp_arr.append(value)\n    value =round(value,3)\n    plt.text(s = value, x=1.9,y=i*3+1, font=font, fontsize=18,va='center',ha='center')\n    \nfor i in range(0,9):\n    if tmp_arr[i] > 0:\n        value = tmp_arr[i]\n    else:\n        tmp_arr[i] = 0\n        value = 0\n    value =round(value,3)\n    plt.text(s = value, x=2.1,y=i*3+1, font=font, fontsize=18,va='center',ha='center')\n\ntmp_arr2 = []\nfor i in range(0,9):\n    value = 0\n    for j in range(0,9):\n        value = value + tmp_arr[j] * weight[2][j][i] + weight[3][i]\n    value =round(value,3)\n    tmp_arr2.append(value)\n    plt.text(s = value, x=2.9,y=i*3+1, font=font, fontsize=18,va='center',ha='center')\n\nax.axvspan(1.8, 2.2, fc=\"gray\", alpha=0.2)\nax.axvspan(2.8, 3.2, fc=\"gray\", alpha=0.2)\n\ndef softmax(x):\n    e_x = np.exp(x - np.max(x))\n    return e_x \/ e_x.sum()\nsoft = softmax(tmp_arr2)\n\nfor i in range(0,9):\n    value =round(soft[i],3)\n    plt.text(s = value, x=3.1,y=i*3+1, font=font, fontsize=18,va='center',ha='center')\n    \nplt.axis('off')\nplt.text(s='Input_layer', x=1,y=28,font = font, fontsize=18,va='center',ha='center')\nplt.text(s='hidden_layer', x=2,y=28,font = font,fontsize=18,va='center',ha='center')\nplt.text(s='out_layer', x=3,y=28,font = font,fontsize=18,va='center',ha='center')\nplt.text(s='DNN Model', x=0.9,y=30,va='center',ha='left',font = font,fontsize=50)\nplt.text(s='Consider Relu', x=2,y=27,font = font,fontsize=18,va='center',ha='center')\nplt.text(s='Consider Softmax', x=3,y=27,font = font,fontsize=18,va='center',ha='center')\n\nplt.show()","22b984be":"y[0]","c9d5a51d":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nPrevious version - Visuailization\n<\/h1>\n<\/div>","fe3c87b7":"### We have weight value and, vais value each 2","52f6653b":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nBuild Model - DNN\n<\/h1>\n<\/div>","0db1ffa2":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nTabular Playground Series - Jun 2021\n<\/h1>\n<\/div>\n\n![](https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/25226\/logos\/header.png?t=2021-01-27-17-34-31)","fd7d84c0":"### The model predict 5! and real value is 5 too.\n### I wait your comments !\n### Feel free to comment me plz\n### And thanks for have interesting on my work ! (Many Kaggler)","8d510a4f":"### Then how about consider activation function like ReLu? \n### Activation function can't visualization totally so, I will trying visualization using Only one data","d8ceff26":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nImport Library and Dataset\n<\/h1>\n<\/div>","11cd3720":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nVisuailization\n<\/h1>\n<\/div>","175673b4":"### I just build so simple model. This time, I focus on visualization !","9a1de875":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nNew version - Visuailization\n<\/h1>\n<\/div>","06ce2ca8":"<div style=\"color:white;\n           display:fill;\n           border-radius:5px;\n           background-color:skyblue;\n           font-size:110%;\n           font-family:Verdana;\n           letter-spacing:0.5px\">\n<h1 style=\"text-align: center;\n           padding: 10px;\n              color:white\">\nDimensionality reduction - Using PCA \n<\/h1>\n<\/div>","1650e3dd":"![](https:\/\/www.icegif.com\/wp-content\/uploads\/thank-you-icegif-2.gif)","3c427205":"### Hello, This time, I try visualization Deep learning model. DNN !\n### This work is add bias and activation function version. If you want to check [Previous version](https:\/\/www.kaggle.com\/jeongbinpark\/tps-jun-try-visualization-dnn-model)","af8f699b":"### Dimensionality reduction. Because, It has so many columns. So I reduce the columns using PCA","0a67cbf4":"### After consider bias value, We can feel difference with previous version ( Not consider bias ) "}}