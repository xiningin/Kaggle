{"cell_type":{"ad542e05":"code","d6660d86":"code","876f5510":"code","1da59462":"code","ad5fe0ec":"code","add34dc3":"code","935327ff":"code","bd64a186":"code","cf3bbea9":"code","0afd5aec":"code","27a3f5db":"code","9c83f57e":"code","f7d1358b":"code","3759eac8":"code","087d094e":"code","2c62b351":"code","e903d1a0":"code","25dae8f6":"code","b918b014":"code","6e7bfe59":"code","a4aaf3d7":"code","8d2bd414":"code","d28a0f21":"code","929de28e":"code","6293aa03":"code","af6f9e8b":"code","74124752":"code","23769b3c":"code","730a19ec":"code","07250c6a":"code","8fb781bb":"code","da27328b":"code","caa8295b":"markdown","9b75f6c6":"markdown","75c549cd":"markdown","cb30905d":"markdown","361f8ddf":"markdown","e0f805df":"markdown","f7cb67f3":"markdown","3ff4ab63":"markdown","b4af667b":"markdown","acf67641":"markdown","b5fb3760":"markdown","58001b70":"markdown","38a5afa2":"markdown","57216b12":"markdown","4cdc7e45":"markdown","8bceadf5":"markdown"},"source":{"ad542e05":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom collections import Counter\n%matplotlib inline\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))\n\n# Any results you write to the current directory are saved as output.","d6660d86":"median_house_hold_in_come = pd.read_csv('..\/input\/MedianHouseholdIncome2015.csv', encoding=\"windows-1252\")\npercentage_people_below_poverty_level = pd.read_csv('..\/input\/PercentagePeopleBelowPovertyLevel.csv', encoding=\"windows-1252\")\npercent_over_25_completed_highSchool = pd.read_csv('..\/input\/PercentOver25CompletedHighSchool.csv', encoding=\"windows-1252\")\nshare_race_city = pd.read_csv('..\/input\/ShareRaceByCity.csv', encoding=\"windows-1252\")\nkill = pd.read_csv('..\/input\/PoliceKillingsUS.csv', encoding=\"windows-1252\")","876f5510":"percentage_people_below_poverty_level.head()","1da59462":"percentage_people_below_poverty_level.info()","ad5fe0ec":"percentage_people_below_poverty_level.poverty_rate.value_counts()","add34dc3":"percentage_people_below_poverty_level.poverty_rate.replace(['-'],0.0,inplace=True) # exchange ' - ' with '0.0'\npercentage_people_below_poverty_level.poverty_rate = percentage_people_below_poverty_level.poverty_rate.astype(float) # turn into float\narea_list = percentage_people_below_poverty_level['Geographic Area'].unique() \narea_poverty_ratio = []\n\nfor i in  area_list:\n    x = percentage_people_below_poverty_level[percentage_people_below_poverty_level['Geographic Area'] == i] # for every state\n    area_poverty_ratio.append(sum(x.poverty_rate)\/len(x)) # ratio \n    \ndata = pd.DataFrame({'area_list':area_list,'poverty_rate':area_poverty_ratio}) # new dataframe thru dictionary\nnewindex = (data.poverty_rate.sort_values(ascending=False)).index.values   #take the index of the sorted data\nsorted = data.reindex(newindex)  # set the new index to 'sorted'\n\n\nplt.figure(figsize=(15,10))                                  # figsize with matplotlib\nsns.barplot(data = sorted, x='area_list',y='poverty_rate')   # barplot \nplt.xticks(rotation=30)                                      # rotation of the states on x axis\nplt.xlabel('Area List')                                      \nplt.ylabel('Poverty Ratio')                                 \nplt.title(\"Powerty Rate with Respect to States\")\nplt.show()","935327ff":"percent_over_25_completed_highSchool.percent_completed_hs.replace(['-'],0.0,inplace = True) # replace ' - ' with 0.0\npercent_over_25_completed_highSchool.percent_completed_hs = percent_over_25_completed_highSchool.percent_completed_hs.astype(float) # float for calculation\n\n\narea_list = list(percent_over_25_completed_highSchool['Geographic Area'].unique()) # area list\narea_highschool = []\n\nfor i in area_list:\n    x = percent_over_25_completed_highSchool[percent_over_25_completed_highSchool['Geographic Area']==i] # filtered dataframe: x\n    area_highschool.append(sum(x.percent_completed_hs)\/len(x))              \n\ndata = pd.DataFrame({'area_list': area_list,'area_highschool_ratio':area_highschool}) #new dataframe\nnew_index = (data['area_highschool_ratio'].sort_values(ascending=True)).index.values # sort and take the index\nsorted2 = data.reindex(new_index)  \n\n# visualization\nplt.figure(figsize=(15,10)) # figsize thru matplotlib.pyplot\nsns.barplot(x='area_list', y= 'area_highschool_ratio', data=sorted2) # barplot\nplt.xticks(rotation= 45) # rotation of the values on x axis\nplt.xlabel('States')\nplt.ylabel('High School Graduate Rate')\nplt.title(\"Percentage of Given State's Population Above 25 that Has Graduated From High School\")\nplt.show()","bd64a186":"kill.name.value_counts()","cf3bbea9":"reserved = kill.name[kill.name != 'TK TK'].str.split() # take all names expect for 'TK TK'\na,b = zip(*reserved)                                    # unzip a,b (in Tuple format)\nname_list = a+b\nmost_common = Counter(name_list).most_common(15) # count and find the most common 15 names or surnames\n\nx,y = zip(*most_common)\nx,y = list(x),list(y)\nmost_commonnames = pd.DataFrame({\"names\":x,\"count\":y})\n\n### visualization\nplt.figure(figsize=(10,10))\nsns.barplot( x=most_commonnames['names'], y=most_commonnames['count'],palette = sns.cubehelix_palette(len(x)))\nplt.xlabel('Names or Surnames of Killed People')\nplt.ylabel('Frequency')\nplt.show()","0afd5aec":"most_common","27a3f5db":"share_race_city.info() # we have 4 different races, and the objects written numerically must be turned into float for calculation.","9c83f57e":"share_race_city.head()","f7d1358b":"#share_race_city.share_white.value_counts()\n#share_race_city.share_black.value_counts()\n#share_race_city.share_native_american.value_counts()\n#share_race_city.share_asian.value_counts()\n#share_race_city.share_hispanic.value_counts()","3759eac8":"share_race_city.replace(['-'],0.0,inplace=True) # replace '-' and save it (inplace=True)\nshare_race_city.replace(['(X)'],0.0,inplace=True)\nshare_race_city.share_white = share_race_city.share_white.astype(float)\nshare_race_city.share_black = share_race_city.share_black.astype(float)\nshare_race_city.share_native_american = share_race_city.share_native_american.astype(float)\nshare_race_city.share_asian = share_race_city.share_asian.astype(float)\nshare_race_city.share_hispanic = share_race_city.share_hispanic.astype(float)\n\nshare_white = []\nshare_black = []\nshare_native_american = []\nshare_asian = []\nshare_hispanic = []\narea_list = list(share_race_city['Geographic area'].unique())\n\nfor each in area_list:\n    x= share_race_city[share_race_city['Geographic area'] == each]\n    share_white.append(sum(x.share_white)\/len(x))\n    share_black.append(sum(x.share_black) \/ len(x))\n    share_native_american.append(sum(x.share_native_american) \/ len(x))\n    share_asian.append(sum(x.share_asian) \/ len(x))\n    share_hispanic.append(sum(x.share_hispanic) \/ len(x))\n    \nplt.subplots (figsize=(8,11))\nsns.barplot(x=share_white, y =area_list ,color='yellow',alpha=0.6, label='White')\nsns.barplot(x=share_black, y =area_list, color='purple',alpha=0.6, label='Black')\nsns.barplot(x=share_native_american, y =area_list , color='green', alpha=0.5, label='Native American')\nsns.barplot(x=share_asian, y =area_list , color='brown',alpha=1,label='Asian')\nsns.barplot(x=share_hispanic, y =area_list , color='red',alpha=0.8,label='Hispanic')\nplt.title('Percentage of Population According to Races')\nplt.xlabel('Areas')\nplt.ylabel('Percentage of Races')\nplt.legend(loc='upper right',frameon = True)\nplt.show()","087d094e":"sorted.head()","2c62b351":"sorted2.head()\ndata","e903d1a0":"sorted['poverty_rate']= sorted['poverty_rate']\/max(sorted['poverty_rate'])                      # normalization for graph scale\nsorted2['area_highschool_ratio']= sorted2['area_highschool_ratio']\/max(sorted2['area_highschool_ratio'])  #same here\ndata = pd.concat([sorted,sorted2['area_highschool_ratio']],axis=1)\ndata.sort_values('poverty_rate',inplace=True)\n\nplt.subplots(figsize=(13,8))\nsns.pointplot(x='area_list',y='area_highschool_ratio',data=data,color='red')\nsns.pointplot(x='area_list',y='poverty_rate',data=data,color='black')\nplt.xlabel('States',color='magenta',fontsize=15)\nplt.ylabel('Rates',color='magenta', fontsize=15)\nplt.title('Poverty Rate vs High School Graduation Rate',color='yellow',fontsize=20)\nplt.grid()\nplt.show()\n","25dae8f6":"plt.figure(figsize=(15,15))\nsns.jointplot(x=data.area_highschool_ratio,y=data.poverty_rate,kind='kde',height=7) # height determines the figsize (it will be square)\n# kind : { \u201cscatter\u201d | \u201creg\u201d | \u201cresid\u201d | \u201ckde\u201d | \u201chex\u201d }\n# scatter = scatter plot,  reg = lm plot, kde = kde plot\nplt.xlabel('High School',fontsize=15)\nplt.ylabel('Poverty',fontsize=15)\nplt.show()","b918b014":"kill.race.unique()","6e7bfe59":"kill.race.value_counts()","a4aaf3d7":"kill.race.dropna(inplace=True)\nlabels = kill.race.value_counts().index\nslices = kill.race.value_counts().values\ncolors = [\"pink\",\"red\",\"blue\",\"green\",\"cyan\",\"orange\"]\nexplode = [0,0,0,0,0,0]\n\nplt.figure(figsize=(5,5))\nplt.pie(slices,explode=explode,labels=labels,colors=colors,autopct='%1.1f%%')\nplt.show()","8d2bd414":"data.head()","d28a0f21":"sns.lmplot(data=data, x='area_highschool_ratio',y='poverty_rate')\nplt.show()","929de28e":"data.head()","6293aa03":"plt.figure(figsize=(8,8))\nsns.kdeplot(data.poverty_rate, data.area_highschool_ratio, shade=True, cut=4) # first written : x axis, second written : y axis\nplt.show()","af6f9e8b":"plt.figure(figsize=(5,5))\npal = sns.cubehelix_palette(2, rot=-.5, dark=.3)  # copied and pasted for colorization\nsns.violinplot(data=data,palette=pal,inner=\"point\")","74124752":"plt.subplots(figsize=(5, 5))\nsns.heatmap(data.corr(), annot=True, linewidths=.5,linecolor=\"red\", fmt= '.1f')\nplt.show() \n# annot: values on the squares.\n# fmt: int or float\n# ax = ","23769b3c":"sns.boxplot(x=\"gender\", y=\"age\", hue=\"manner_of_death\", data=kill, palette=\"PRGn\") \nplt.show()","730a19ec":"plt.figure(figsize=(10,10))\nsns.swarmplot(x=\"gender\", y=\"age\",hue=\"manner_of_death\", data=kill,size=15) # size : size of the cells\nplt.show()","07250c6a":"# Shows \"BAR PLOT\" & \"SCATTER PLOT side by side\"\nsns.pairplot(data)\nplt.show()","8fb781bb":"plt.figure(figsize=(20,10))\nsns.countplot(kill.armed)\nplt.title(\"gender\",color = 'red',fontsize=15)","da27328b":"armed = kill.armed.value_counts()\nplt.figure(figsize=(12,6))\nsns.barplot(x=armed[:8].index,    y=armed[:8].values)  # value_count : index , values\nplt.ylabel('Number of Weapon')\nplt.xlabel('Weapon Types')\nplt.title('Kill weapon',color = 'blue',fontsize=15)","caa8295b":"**KDE PLOT**","9b75f6c6":"**POINT PLOT**","75c549cd":"**VIOLIN PLOT** (VAGINA PLOT)","cb30905d":"**PERCENTAGE OF STATE'S POPULATION ACCORDONG TO THE RACES**","361f8ddf":"> **COUNT PLOT THROUGH BAR PLOT**","e0f805df":"**PIECHART**","f7cb67f3":"**MOST COMMON 15 NAMES OR SURNAMES OF KILLED PEOPLE**","3ff4ab63":"**JOINT PLOT**","b4af667b":"**PAIR PLOT**","acf67641":"**BOX PLOT**","b5fb3760":"**COUNT PLOT**","58001b70":"**HIGH SCHOOL GRADUATION RATE**","38a5afa2":"**HEAT MAP**","57216b12":"**POWERTY RATE OF EACH STATE**","4cdc7e45":"**LM PLOT**","8bceadf5":"**SWARM PLOT**"}}