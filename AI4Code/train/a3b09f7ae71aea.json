{"cell_type":{"16b196c4":"code","7525ac5d":"code","9ac88e70":"code","3749bf38":"code","a47ea4ed":"code","d0131b66":"code","5a4165f9":"code","2fa8495f":"code","5480dbce":"code","da5aa252":"code","dcc51c26":"code","201a2258":"code","5b3b4319":"code","95807479":"code","52aafbed":"code","35a8487a":"code","a8c5935f":"code","6a252e49":"code","f33a2806":"code","137155ca":"code","aaf17a93":"code","fd29d810":"markdown","38de507c":"markdown","ebd1ad0d":"markdown","f8f9fa18":"markdown","dc23313a":"markdown","52250597":"markdown","61f57492":"markdown","a9467d86":"markdown","1726ee50":"markdown","6a79416a":"markdown","17e13099":"markdown","0653c8ff":"markdown"},"source":{"16b196c4":"!pip install -U expertai-nlapi","7525ac5d":"from kaggle_secrets import UserSecretsClient\nuser_secrets = UserSecretsClient()\nsecret_value_0 = user_secrets.get_secret(\"Pass\")\nsecret_value_1 = user_secrets.get_secret(\"User\")","9ac88e70":"import os\nos.environ[\"EAI_USERNAME\"] = secret_value_1\nos.environ[\"EAI_PASSWORD\"] = secret_value_0","3749bf38":"from expertai.nlapi.cloud.client import ExpertAiClient\nclient = ExpertAiClient()","a47ea4ed":"text = '''Michael Jordan was one of the best basketball players \nof all time. Scoring was Jordan's stand-out skill, but he still holds a defensive NBA record.''' \nlanguage= 'en'","d0131b66":"document = client.specific_resource_analysis(\n    body={\"document\": {\"text\": text}}, \n    params={'language': language, 'resource': 'sentiment'\n})","5a4165f9":"document.sentiment.positivity","2fa8495f":"document.sentiment.negativity","5480dbce":"document.sentiment.overall","da5aa252":"print (f'{\"TERM\":{20}} {\"SENTIMENT\":{4}}')    \n\nfor item in document.sentiment.items:\n    if not item.lemma:\n        group_lemma=[]\n        for nested in item.items:\n            group_lemma.append(nested.lemma)\n        print (f'{str(group_lemma):{20}} {item.sentiment:{10}}')\n    else:\n        print (f'{item.lemma:{20}} {item.sentiment:{10}}')","dcc51c26":"import numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('..\/input\/movie-reviews-nlp\/moviereviews_100.tsv', sep='\\t')\ndf.head()","201a2258":"df.shape","5b3b4319":"df['label'].value_counts()","95807479":"def sentiment_overall(client, text, language):\n    try:\n        input_text = str(text)[0:10000]  # limit the input size\n        document = client.specific_resource_analysis(\n        body={\"document\": {\"text\": input_text}}, \n        params={'language':  language, 'resource': 'sentiment'\n       })\n        return document.sentiment.overall\n    except Exception as e: \n        print(str(e) +\": \" + str(text))","52aafbed":"df['overall'] = df['review'].apply(lambda review: sentiment_overall(client, review, language))\n\ndf.head()","35a8487a":"df['overall_score'] = df['overall'].apply(lambda c: 'pos' if c >=0 else 'neg')\n\ndf.head()","a8c5935f":"from sklearn.metrics import accuracy_score,classification_report,confusion_matrix","6a252e49":"print(classification_report(df['label'],df['overall_score']))","f33a2806":"cf_matrix = confusion_matrix(df['label'],df['overall_score'])","137155ca":"import seaborn as sns\ngroup_names = ['True Neg','False Pos','False Neg','True Pos']\ngroup_counts = [\"{0:0.0f}\".format(value) for value in\n                cf_matrix.flatten()]\ngroup_percentages = [\"{0:.2%}\".format(value) for value in\n                     cf_matrix.flatten()\/np.sum(cf_matrix)]\nlabels = [f\"{v1}\\n{v2}\\n{v3}\" for v1, v2, v3 in\n          zip(group_names,group_counts,group_percentages)]\nlabels = np.asarray(labels).reshape(2,2)\nsns.heatmap(cf_matrix, annot=labels, fmt='', cmap='Blues')","aaf17a93":"accuracy_score(df['label'],df['overall_score'])","fd29d810":"As today, v2 provides the sentiment analysis feature in English only\n\n## Let's play with it\n\nSentiment is availabble throught the `specific_resource_analysis` with the resource type `sentiment`","38de507c":"## Append to the dataset the sentiment result","ebd1ad0d":"Sentiment feature takes in a string and returns a score for:\n* negativity\n* positivity\n* overall (computed by normalizing the scores above)\n","f8f9fa18":"## Working with NL API in Python\nFirst you have to setup your account credentials; if you don't have them, get them at https:\/\/developer.expert.ai\/ui\/login\nSet your environment variables with your credentials \n\n```bash\nSET EAI_USERNAME=YOUR_USER\nSET EAI_PASSWORD=YOUR_PASSWORD\n```\n\nas an alternative you can always add to your notebook the following statements\n\n```python\nimport os\nos.environ[\"EAI_USERNAME\"] = 'YOUR_USER'\nos.environ[\"EAI_PASSWORD\"] = 'YOUR_PASSWORD'\n```\n\n\n\n## Initialize the library\n\n","dc23313a":"The overall value is then stored in the dataset, creating a new column `overall`.","52250597":"# Sentiment Analysis on the movie review dataset\n\nLet's apply now the  sentiment analysis to a dataset, i.e. the movie reviews dataset: we'll use a subset of the Cornell University Movie Review polarity dataset v2.0 obtained from http:\/\/www.cs.cornell.edu\/people\/pabo\/movie-review-data\/\n\nThe dataset contains the text of 2000 movie reviews: 1000 are positive, 1000 are negative, and the text has been preprocessed as a tab-delimited file. For demo purposes, We use a subset of this dataset, limited to 100 reviews per class.\n","61f57492":"During the sentiment analysis process, the terms that contributed to the score generation are reported, with their score.","a9467d86":"Now we compare the results with the annotated corpus, computing the precision and recall and then printing the confusion matrix. `sklearn` and `seaborn` packages need to be installed before proceeding.","1726ee50":"First, we create a function that calls the API and returns the overall value.\nPlease note that the current API allows to process 10 kB size document maximum; for this reason in the function we reduce the text size accordingly.","6a79416a":"Finally, we transform the value into `pos` and `neg` to be compared with the original dataset.","17e13099":"## Perform a comparison analysis between the original `label` and `overall_score`","0653c8ff":"<img style=\"float: right;\" src=\"https:\/\/docs.expert.ai\/logo.png\" width=\"150px\">\n\n\n# Sentiment Analysis with expert.ai NLAPI\nexpert.ai Natural Language API v2 introduces a sentiment analysis feature that identifies the sentiment polarity for text document such as positive, negative, overall and its associated intensity.\n\n## Installation and Setup\nFirst, install expert.ai-nlapi library using pip.\n* https:\/\/pypi.org\/project\/expertai-nlapi\/"}}