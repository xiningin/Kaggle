{"cell_type":{"a7e91726":"code","08071ede":"code","3c029c80":"code","ff2be0e8":"code","8769f042":"code","70f7d9bb":"code","1a711162":"code","af30053d":"code","9f7726d2":"code","dcbe2e27":"code","8b6d28f8":"code","0d0ac706":"code","fa6b55d2":"code","7558d3d7":"code","2ec6eea1":"code","69575ec7":"code","fbb4df65":"code","8cca65ba":"code","69f676bf":"code","91b7fce1":"code","81ce724f":"code","e73249a3":"code","c4be3dd0":"code","6714b30b":"code","9a3d466f":"code","50220c99":"code","870ab680":"code","b6f32c1d":"code","f06eec5f":"code","691a5d9b":"code","59d45214":"code","1a99fa73":"code","51e54c9a":"code","527a58bc":"code","8383c818":"code","728c8fb6":"code","08c6c856":"code","8c96f462":"code","4b0bd096":"code","358639ad":"code","dff22d35":"code","7de2c42d":"code","32fa2e49":"code","09857eeb":"code","8faabea1":"code","5bbfc3f6":"code","3348bd2b":"code","2e40c087":"code","8c5c5e9e":"code","7ae8bdb0":"code","8115dbb5":"code","4fef7862":"code","3ef4d01c":"code","1d5eb22d":"code","08968b65":"code","f1ddc87c":"code","34a142f2":"code","29fbdfb3":"code","265c0bf4":"code","50b6dbf0":"code","0ffbb62a":"code","0ea3d9fc":"code","9e5f5fb5":"code","1f600a9c":"code","d240f714":"code","1b43ff8f":"code","b772d438":"code","5cc6c0a7":"code","0f4c4a77":"code","95d4cb79":"code","99bd77d4":"code","9f00b448":"code","3882ee75":"code","39f75658":"code","08e66669":"code","9b96da47":"code","20c12f7d":"code","d7a4ae76":"code","e621508b":"code","566a925c":"code","fb392930":"code","a7c17124":"code","902d6004":"code","f7c87351":"code","cc7cd99c":"code","f1a0d39c":"code","d9dc5609":"code","a16f8662":"code","8c55b892":"code","1cf941f2":"code","89233d4f":"code","bb8800dd":"code","66fbcff7":"code","f83736b3":"code","877843be":"code","776042dd":"code","108f9f53":"code","7f539d32":"code","a6f0425a":"code","fd052301":"code","95eb194d":"code","2a07753e":"code","652b1130":"code","6a2033ff":"code","fc7e91fb":"code","2cee53f0":"code","b6ea2e8a":"code","f3975599":"code","3703eab5":"code","8d4289c9":"code","3037a8b0":"code","720ee1eb":"code","f5918277":"code","790fb080":"code","b4bd05bb":"code","6a48e310":"code","6fe79fdc":"code","b8411c14":"code","2e12d65e":"code","1b98cdc8":"code","8ca95a7f":"code","9ec65d1e":"code","2aac6ab8":"code","e52c0c96":"code","3e2688eb":"code","7d2d94a8":"code","25df9013":"code","f36f4183":"code","2ea652e9":"code","ef51bff3":"code","ee2dc36f":"code","06f53cbf":"code","2784923d":"code","8b758d72":"code","e809716f":"code","d118af40":"code","d72748ee":"code","b86353f7":"code","4531e2be":"code","65b0889b":"code","9243c79c":"code","876364ac":"code","fa002a06":"code","0acdd751":"code","d71797b5":"code","3c2f7ada":"code","33c30031":"code","41d115f9":"code","4dc6ee55":"code","1474bfdb":"code","3213aed6":"code","3684fc3d":"code","49548d4d":"code","9cd21930":"code","27fa0d3c":"code","73914dbf":"code","beb11a18":"code","53e86766":"code","b06ab41d":"code","c1f42c8c":"code","071add40":"code","1f598ec6":"code","2b6eda36":"code","03107e6b":"code","609b4abb":"code","328f965d":"code","c7b6fab0":"code","8355cc15":"code","981e0dfe":"code","d7c66d80":"code","b5e50e4d":"code","dcb4277e":"code","e44af999":"code","768ab165":"code","70e860ae":"code","eb579f88":"code","79729c0e":"code","7cc16415":"code","323b52b9":"code","4ac33d17":"code","90ac4ae4":"code","12aee591":"code","accce13c":"code","2a843635":"code","e16a8550":"code","caebcf82":"code","625c29ed":"code","b2814b01":"code","272adcee":"code","9bd29bc0":"code","0d9244e6":"code","035e27a2":"code","5a424bf2":"code","2265cf86":"code","8931ebb4":"code","42693722":"code","7a4626f5":"code","87c25f38":"code","472839a6":"code","b41fbfcd":"code","1b623e97":"code","d4e7363a":"code","efaac3f6":"code","2f43279c":"code","43a0f572":"code","8cdefd14":"code","f028fc4e":"code","d3e4188e":"code","b59b480c":"code","2b2f4f3d":"code","fb68122b":"code","9a28d684":"code","309c4a2a":"code","25b2663b":"code","7dcb1cfe":"code","5e1019a2":"code","2977ada8":"code","9d464834":"code","5414fa08":"code","516a579d":"code","aa1f299e":"code","fa397410":"code","bfb499cd":"markdown","bbb9acfa":"markdown","519bff14":"markdown","53d5a430":"markdown","a66684f6":"markdown"},"source":{"a7e91726":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","08071ede":"Students = ['Alice', 'Jack', 'Molly']\npd.Series(Students)","3c029c80":"numbers = [1,2,3]\npd.Series(numbers)","ff2be0e8":"Students = ['Alice', 'Jack', None]\npd.Series(Students)","8769f042":"numbers = [1,2,None]\npd.Series(numbers)","70f7d9bb":"np.nan == None","1a711162":"np.nan == np.nan","af30053d":"np.isnan(np.nan)","9f7726d2":"students_score = {'Alice' : 'physics',\n                 'jack' : 'chemistry',\n                 'molly' : 'english'}\ns = pd.Series(students_score)\ns","dcbe2e27":"s.index","8b6d28f8":"students = [('Alice','Brown'), ('Jack','White'),('Molly','Green')]\npd.Series(students)","0d0ac706":"s = pd.Series(['physics','chemistry','english'], index = ['Alice','Jack','Molly'])\ns","fa6b55d2":"students_score = {'Alice' : 'physics',\n                 'Jack' : 'chemistry',\n                 'Molly' : 'english'}\npd.Series(students_score, index = ['Alice','Molly','Sam'])","7558d3d7":"students_classes = {'Alice' : 'physics',\n                 'Jack' : 'chemistry',\n                 'Molly' : 'english',\n                   'Sam' : 'math'}\ns = pd.Series(students_classes)\ns","2ec6eea1":"s.iloc[3]","69575ec7":"s.loc['Molly']","fbb4df65":"s[3]","8cca65ba":"s['Molly']","69f676bf":"a = {'Sushil':'Narayan, More'}","91b7fce1":"s","81ce724f":"a","e73249a3":"pd.Series(a)","c4be3dd0":"class_code = {99 : 'Physics',\n             100 : 'Chemistry',\n             101 : 'English',\n             102 : 'History'}\ns = pd.Series(class_code)","6714b30b":"s.iloc[0]","9a3d466f":"s.loc[99]","50220c99":"grades = pd.Series([90, 80, 70, 60])\ntotal = 0\nfor grade in grades:\n    total += grade\nprint(total\/len(grades))","870ab680":"total = np.sum(grades)\nprint(total\/len(grades))","b6f32c1d":"numbers = pd.Series(np.random.randint(0, 1000, 10000))\nnumbers.head()","f06eec5f":"len(numbers)","691a5d9b":"%%timeit -n 100\ntotal = 0\nfor number in numbers:\n    total+=number\ntotal\/len(numbers)","59d45214":"%%timeit -n 100\ntotal = np.sum(numbers)\ntotal\/len(numbers)","1a99fa73":"numbers.head()","51e54c9a":"numbers+=2\nnumbers.head()","527a58bc":"%%timeit -n 10\ns = pd.Series(np.random.randint(0,1000,1000))\nfor label, value in s.iteritems():\n    s.loc[label] = value+2","8383c818":"%%timeit -n 10\ns = pd.Series(np.random.randint(0,1000,1000))\ns+=2","728c8fb6":"s = pd.Series([1, 2, 3])\ns.loc['History'] = 102\ns","08c6c856":"record1 = pd.Series({'Name' : 'Alice',\n                    'Class' : 'Physics',\n                    'Score' : 85} )\nrecord2 = pd.Series({'Name' : 'Jack',\n                    'Class' : 'Chemistry',\n                    'Score' : 82} )\nrecord3 = pd.Series({'Name' : 'Helen',\n                    'Class' : 'Biology',\n                    'Score' : 98} )","8c96f462":"df = pd.DataFrame([record1, record2, record3], index = ['School1','School2','School1'])\ndf","4b0bd096":"students = [{'Name' : 'Alice',\n             'Class' : 'Physics',\n             'Score' : 85},\n            {'Name' : 'Jack',\n             'Class' : 'Chemistry',\n             'Score' : 82},\n            {'Name' : 'Helen',\n             'Class' : 'Biology',\n             'Score' : 98}]\ndf = pd.DataFrame(students, index = ['School1','School2','School1'])","358639ad":"df","dff22d35":"df.loc['School2']","7de2c42d":"type(df.loc['School2'])","32fa2e49":"df.iloc[0,1]","09857eeb":"df.T","8faabea1":"df.T.loc['Name']","5bbfc3f6":"df['Name']","3348bd2b":"df.loc['School1']['Name']","2e40c087":"print(type(df.loc['School1']['Name']))\nprint(type(df.loc['School1']))","8c5c5e9e":"df.loc[:,['Name', 'Score']]","7ae8bdb0":"!cat datasets\/Admissions_predict.csv","8115dbb5":"import pandas as pd","4fef7862":"\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","3ef4d01c":"df = pd.read_csv('\/kaggle\/input\/admission-prediction-data\/Admission_Predict.csv', index_col = 'Serial No.')","1d5eb22d":"df","08968b65":"!cat \/kaggle\/input\/admission-prediction-data\/Admission_Predict.csv","f1ddc87c":"df.head()","34a142f2":"new_df = df.rename(columns = {'GRE Score':'GRE Score', 'TOEFL Score':'TOEFL Score', 'University Rating':'University Rating', 'SOP':'Statement of Purpose', 'LOR ':'Letter of Recommendation', 'CGPA':'CGPA',\n       'Research':'Research', 'Chance of Admit ':'Chance of Admit '})\nnew_df.head()","29fbdfb3":"df.columns","265c0bf4":"cols = list(new_df.columns)","50b6dbf0":"df","0ffbb62a":"admist_mask = df['Chance of Admit '] > 0.7","0ea3d9fc":"admist_mask","9e5f5fb5":"df.where(admist_mask).head()","1f600a9c":"df.where(admist_mask).dropna().head()","d240f714":"df[df['Chance of Admit '] > 0.7].head()","1b43ff8f":"df['GRE Score'].head()","b772d438":"df[['GRE Score','TOEFL Score']].head()","5cc6c0a7":"df[(df['Chance of Admit '] > 0.7)].head()","0f4c4a77":"df[(df['GRE Score']) >320 & (df['Chance of Admit '] > 0.7)].head()","95d4cb79":"df[(df['GRE Score'].gt(320)) & (df['Chance of Admit '].lt(0.7))].head()","99bd77d4":"df.head()","9f00b448":"df[\"Serial Number\"] = df.index","3882ee75":"df = df.set_index('Chance of Admit ')","39f75658":"df.head()","08e66669":"df = df.reset_index()","9b96da47":"df.head()","20c12f7d":"census = pd.read_csv('\/kaggle\/input\/census\/census.csv')\ncensus.head()","d7a4ae76":"census['SUMLEV'].unique()","e621508b":"census = census[census['SUMLEV'] ==50]\ncensus.head()","566a925c":"list(census.columns)","fb392930":"columns_to_keep = ['STNAME', 'CTYNAME', 'CENSUS2010POP', 'ESTIMATESBASE2010',\n                   'POPESTIMATE2010', 'POPESTIMATE2011', 'POPESTIMATE2012', \n                   'POPESTIMATE2013', 'POPESTIMATE2014', 'POPESTIMATE2015',\n                   'BIRTHS2010', 'BIRTHS2011', 'BIRTHS2012', 'BIRTHS2013', 'BIRTHS2014',\n                   'BIRTHS2015']\n","a7c17124":"df = census[columns_to_keep]\ndf.head()","902d6004":"df = df.set_index(['STNAME','CTYNAME'])\ndf.head()","f7c87351":"df.loc[[('Tennessee', 'Shelby County'),\n        ('New Jersey', 'Hudson County')]].T","cc7cd99c":"df = pd.read_csv('\/kaggle\/input\/log-data\/log.csv')\ndf.head()","f1a0d39c":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d9dc5609":"df = pd.read_csv('\/kaggle\/input\/class-grades\/class_grades.csv')","a16f8662":"df.head()","8c55b892":"mask = df.isnull()\nmask.head()","1cf941f2":"df.dropna().head(10)","89233d4f":"df.fillna(0, inplace = True)","bb8800dd":"df.head(10)","66fbcff7":"df = pd.read_csv('\/kaggle\/input\/log-data\/log.csv')\ndf","f83736b3":"df = df.set_index(['time', 'user'])\ndf","877843be":"df = df.fillna(method = 'ffill')\ndf.head()","776042dd":"df = pd.read_csv('\/kaggle\/input\/presidents\/presidents.csv')","108f9f53":"df.head()","7f539d32":"df['First'] = df['President']","a6f0425a":"df['First'] = df['First'].replace(\"[ ].*\", \"\", regex = True)","fd052301":"del(df['First'])","95eb194d":"def splitname(row):\n    row['First'] = row['President'].split(' ')[0]\n    row['Last'] = row ['President'].split(' ')[-1]\n    return row","2a07753e":"df = df.apply(splitname, axis = 'columns')\ndf.head()","652b1130":"df.head()","6a2033ff":"df['First'] = df['President']","fc7e91fb":"del(df['First'])","2cee53f0":"pattern = \"(^[\\w]*)(?:.* )([\\w]*$)\"","b6ea2e8a":"df['President'].str.extract(pattern).head()","f3975599":"pattern = \"(?P<First>^[\\w]*)(?:.* )(?P<Last>[\\w]*$)\"","3703eab5":"names = df[\"President\"].str.extract(pattern).head()\nnames","8d4289c9":"df['First'] = names['First']\ndf[\"Last\"] = names[\"Last\"]\ndf.head()","3037a8b0":"df[\"Born\"] = df[\"Born\"].str.extract(\"([\\w]{3} [\\w]{1,2}, [\\w]{4})\")\ndf[\"Born\"].head()","720ee1eb":"df[\"Born\"] = pd.to_datetime(df[\"Born\"])\ndf[\"Born\"].head()","f5918277":"import pandas as pd\nimport numpy as np\nimport timeit","790fb080":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","b4bd05bb":"df = pd.read_csv('\/kaggle\/input\/census\/census.csv')\ndf.head()","6a48e310":"(df.where(df['SUMLEV'] == 50)\n     .dropna()\n     .set_index(['STNAME','CTYNAME'])\n     .rename(columns = {\"CENSUS2010POP\" : \"CENSUS 2010 POP\"}))","6fe79fdc":"df.head()","b8411c14":"States = sorted(list(df['STNAME'].unique()))","2e12d65e":"for i in sorted((list(df.REGION.unique()))):\n    print((list(df.where(df['REGION'] == i)\n     .dropna()\n     .STNAME.unique())))","1b98cdc8":"sorted((list(df.REGION.unique())))","8ca95a7f":"df = df[df['SUMLEV'] == 50]\ndf.head()","9ec65d1e":"%%timeit -n 3\n\nfor state in df['STNAME'].unique():\n    avg = np.average(df.where(df['STNAME'] == state).dropna()['CENSUS2010POP'])\n    \n    print('Counties in state '+state+' have an average of '+str(avg))","2aac6ab8":"%%timeit -n 3\n\nfor group, frame in df.groupby('STNAME'):\n    \n    avg = np.average(frame['CENSUS2010POP'])\n    \n    print('Counties in state '+group+' have an average of '+str(avg))","e52c0c96":"df = df.set_index('STNAME')\n\ndef set_batch_number(item):\n    if item[0] < 'M':\n        return 0\n    if item[0] < \"Q\":\n        return 1\n    return 2\n\nfor group, frame, in df.groupby(set_batch_number):\n    print('There are '+str(len(frame))+' records in group '+str(group)+' for processing')","3e2688eb":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","7d2d94a8":"df = pd.read_csv('\/kaggle\/input\/boston\/listings.csv')","25df9013":"df.head()","f36f4183":"(sorted(list(df.columns)))","2ea652e9":"df = df.set_index(['cancellation_policy', 'review_scores_value'])\ndf.head()","ef51bff3":"for group, frame in df.groupby(level = (0,1)):\n    print(group)","ee2dc36f":"def grouping_fun(item):\n    if item[1] == 10.0:\n        return (item[0], '10,0')\n    else:\n        return (item[0], 'not 10.0')\nfor group, frame in df.groupby(by = grouping_fun):\n    print(group)","06f53cbf":"df.head()","2784923d":"df= df.reset_index()","8b758d72":"df.head()","e809716f":"import numpy as np\ndf.groupby('cancellation_policy').agg({'review_scores_value' : np.average})","d118af40":"df.groupby('cancellation_policy').agg({'review_scores_value' : np.nanmean})","d72748ee":"df.groupby('cancellation_policy').agg({'review_scores_value' : (np.nanmean, np.nanstd), 'reviews_per_month' : np.nanmean})","b86353f7":"cols = ['cancellation_policy', 'review_scores_value']\ntransform_df = df[cols].groupby('cancellation_policy').transform(np.nanmean)\ntransform_df.head()","4531e2be":"transform_df.rename({'review_scores_value' : 'mean_review_score'}, axis = 'columns', inplace = True)\ndf = df.merge(transform_df, left_index= True, right_index= True)\ndf.head()","65b0889b":"df['mean_diff'] = np.absolute(df['review_scores_value'] - df['mean_review_score'])\ndf.head()","9243c79c":"df.groupby('cancellation_policy').filter(lambda x : np.nanmean(x['review_scores_value'])>9.2)","876364ac":"df = pd.read_csv('\/kaggle\/input\/boston\/listings.csv')\ndf.head()","fa002a06":"df = df[cols]","0acdd751":"df.head()","d71797b5":"def calc_mean_review_scores(group):\n    avg=np.nanmean(group['review_scores_value'])\n    group['review_scores_value'] = np.abs(avg-group['review_scores_value'])\n    return group\n\ndf.groupby('cancellation_policy').apply(calc_mean_review_scores).head()","3c2f7ada":"import numpy as np\nimport pandas as pd\nfrom scipy import stats","33c30031":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","41d115f9":"df = pd.read_csv('\/kaggle\/input\/grades\/grades.csv')\ndf.head()","4dc6ee55":"print('there are {} rows and {} columns'.format(df.shape[0], df.shape[1]))","1474bfdb":"early_finishers = df[pd.to_datetime(df['assignment1_submission']) < '2016']\nearly_finishers.head()","3213aed6":"late_finishers = df[~df.index.isin(early_finishers.index)]\nlate_finishers.head()","3684fc3d":"print(early_finishers['assignment1_grade'].mean())\nprint(late_finishers['assignment1_grade'].mean())","49548d4d":"from scipy.stats import ttest_ind\nttest_ind(early_finishers['assignment1_grade'], late_finishers['assignment1_grade'])","9cd21930":"print(ttest_ind(early_finishers['assignment2_grade'], late_finishers['assignment2_grade']))\nprint(ttest_ind(early_finishers['assignment3_grade'], late_finishers['assignment3_grade']))\nprint(ttest_ind(early_finishers['assignment4_grade'], late_finishers['assignment4_grade']))\nprint(ttest_ind(early_finishers['assignment5_grade'], late_finishers['assignment5_grade']))\nprint(ttest_ind(early_finishers['assignment6_grade'], late_finishers['assignment6_grade']))","27fa0d3c":"df1 = pd.DataFrame([np.random.random(100) for x in range(100)])","73914dbf":"df1","beb11a18":"df2 = pd.DataFrame([np.random.random(100) for x in range(100)])\ndf2","53e86766":"def test_columns(alpha = 0.1):\n    num_diff = 0\n    for col in df1.columns:\n        teststat, pval = ttest_ind(df1[col], df2[col])\n        if pval <= alpha:\n            print('col {} is statitstically significantly different at alpha = {}, pval = {}'.format(col, alpha, pval))\n    print('total number different was {}, which is {}%'.format(num_diff, float(num_diff)\/len(df1.columns)*100))\ntest_columns()","b06ab41d":"import re\ndef names():\n    simple_string = \"\"\"Amy is 5 years old, and her sister Mary is 2 years old. \n    Ruth and Peter, their parents, have 3 kids.\"\"\"\n\n    # YOUR CODE HERE\n    return print(re.findall([a-zA-Z], simple_string))\n    raise NotImplementedError()","c1f42c8c":"import re\ndef names():\n    simple_string = \"\"\"Amy is 5 years old, and her sister Mary is 2 years old. \n    Ruth and Peter, their parents, have 3 kids.\"\"\"\n    words_pattern = '[A-Z][a-z]+'\n    return print(re.findall(words_pattern, simple_string))\n    raise NotImplementedError()","071add40":"assert len(names()) == 4, \"There are four names in the simple_string\"","1f598ec6":"import re\ntext = \"Amy is 5 years old, and her sister Mary is 2 years old. Ruth and Peter, their parents, have 3 kids.\"","2b6eda36":"words_pattern = '[A-Z][a-z]+'","03107e6b":"re.findall(words_pattern, text)","609b4abb":"names()","328f965d":"import re\ndef grades():\n    with open (\"assets\/grades.txt\", \"r\") as file:\n        grades = file.read()\n\n    # YOUR CODE HERE\n    raise NotImplementedError()","c7b6fab0":"Ronald Mayr: A\nBell Kassulke: B\nJacqueline Rupp: A \nAlexander Zeller: C\nValentina Denk: C \nSimon Loidl: B \nElias Jovanovic: B \nStefanie Weninger: A \nFabian Peer: C \nHakim Botros: B\nEmilie Lorentsen: B\nHerman Karlsen: C\nNathalie Delacruz: C\nCasey Hartman: C\nLily Walker : A\nGerard Wang: C\nTony Mcdowell: C\nJake Wood: B\nFatemeh Akhtar: B\nKim Weston: B\nNicholas Beatty: A\nKirsten Williams: C\nVaishali Surana: C\nCoby Mccormack: C\nYasmin Dar: B\nRomy Donnelly: A\nViswamitra Upandhye: B\nKendrick Hilpert: A\nKillian Kaufman: B\nElwood Page: B\nMukti Patel: A\nEmily Lesch: C\nElodie Booker: B\nJedd Kim: A\nAnnabel Davies: A\nAdnan Chen: B\nJonathan Berg: C\nHank Spinka: B\nAgnes Schneider: C\nKimberly Green: A\nLola-Rose Coates: C\nRose Christiansen: C\nShirley Hintz: C\nHannah Bayer: B","8355cc15":"import re\ndef grades():\n    with open (\"\/kaggle\/input\/asset-data\/New Text Document.txt\", \"r\") as file:\n        grades = file.read()\n\n    # YOUR CODE HERE\n    raise NotImplementedError()","981e0dfe":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","d7c66d80":"words_pattern = '[A-Z][a-z]+'","b5e50e4d":"with open (\"\/kaggle\/input\/asset-data\/New Text Document.txt\", \"r\") as file:\n        grades = file.read()\n","dcb4277e":"grades","e44af999":"words_pattern = ': (B)'\nre.findall(words_pattern, grades)","768ab165":"import re\ndef logs():\n    with open(\"\/kaggle\/input\/logdata\/logdata.txt\", \"r\") as file:\n        logdata = file.read()\n    \n    # YOUR CODE HERE\n    raise NotImplementedError()","70e860ae":"with open(\"\/kaggle\/input\/logdata\/logdata.txt\", \"r\") as file:\n        logdata = file.read()\n    ","eb579f88":"host_pattern = '([\\d]+[\\.]+[\\d]+[\\.]+[\\d]+[\\.]+[\\d]+)'\nre.findall(host_pattern,logdata)","79729c0e":"txt = \"\"\"146.204.224.152 - feest6811 [21\/Jun\/2019:15:45:24 -0700] \"POST \/incentivize HTTP\/1.1\" 302 4622\"\"\"\n#host_pattern = '^([\\d]+[\\.]+[\\d]+[\\.]+[\\d]+[\\.]+[\\d]+)'\nuser_pattern = ' - (.*[A-Za-z]+[\\d]+) - (.*) '\ndat_pattern = '' \n#print(re.findall(host_pattern,txt))\nprint(re.findall(user_pattern,txt))\n#^[^`~!@#$%^&*()_+={}\\[\\]|\\\\:;\u201c\u2019<,>.?\u0e50\u0e3f]*$","7cc16415":"import re\n#user_pattern = ' - ([A-Za-z]+[\\d]+)'\n#re.findall(user_pattern,logdata)\n#(re.findall('- ([A-Za-z]+[\\d]+)', logdata))","323b52b9":"#user_pattern = ' -'+' - '\n#(re.findall(user_pattern,logdata))","4ac33d17":"s = \"ftp:\/\/www.somewhere.com\/over\/the\/rainbow\/image.jpg\"\n\nre.match(r'^(ftp|http):\/\/.*\\.(jpg|png)$', s)","90ac4ae4":"#re.findall(user_pattern,logdata)\nl1 = ((re.findall(' - '+'(.*\/)'+'.*\/', logdata)))","12aee591":"((re.findall(' - '+'(.*\/)', logdata)))","accce13c":"with open(\"\/kaggle\/input\/logdata\/logdata.txt\", \"r\") as file:\n        logdata = file.read()\ndf = pd.read_csv(\"\/kaggle\/input\/logdata\/logdata.txt\", header = None)\ndf","2a843635":"df['host'] = re.findall('([\\d]+[\\.]+[\\d]+[\\.]+[\\d]+[\\.]+[\\d]+)',str(df))","e16a8550":"host_pattern = '([\\d]+[\\.]+[\\d]+[\\.]+[\\d]+[\\.]+[\\d]+)'\ndf['Host'] = re.findall(host_pattern,logdata)","caebcf82":"df","625c29ed":"txt = \"\"\"13.112.8.80 - rau5026 [21\/Jun\/2019:15:46:09 -0700] \"HEAD \/ubiquitous\/transparent HTTP\/1.1\" 200 16928\n159.253.153.40 - - [21\/Jun\/2019:15:46:10 -0700] \"POST \/e-business HTTP\/1.0\" 504 19845\n136.195.158.6 - feeney9464 [21\/Jun\/2019:15:46:11 -0700] \"HEAD \/open-source\/markets HTTP\/2.0\" 204 21149\n219.194.113.255 - - [21\/Jun\/2019:15:46:12 -0700] \"PATCH \/next-generation\/niches\/mindshare HTTP\/1.0\" 503 20246\n59.101.239.174 - brekke3293 [21\/Jun\/2019:15:46:13 -0700] \"DELETE \/ubiquitous\/seize\/web-enabled HTTP\/2.0\" 302 14017\n233.187.15.207 - - [21\/Jun\/2019:15:46:14 -0700] \"GET \/harness\/intuitive HTTP\/1.0\" 304 21006\n62.79.96.179 - mayer1069 [21\/Jun\/2019:15:46:15 -0700] \"HEAD \/facilitate HTTP\/1.0\" 404 7905\n217.70.194.150 - batz2602 [21\/Jun\/2019:15:46:16 -0700] \"PUT \/functionalities\/channels\/productize\/mission-critical HTTP\/2.0\" 404 23186\n161.242.130.180 - - [21\/Jun\/2019:15:46:17 -0700] \"DELETE \/methodologies\/experiences HTTP\/2.0\" 100 25437\n155.127.24.96 - - [21\/Jun\/2019:15:46:18 -0700] \"POST \/mindshare\/optimize\/vertical HTTP\/2.0\" 500 6154\n63.208.115.205 - - [21\/Jun\/2019:15:46:19 -0700] \"PATCH \/revolutionize HTTP\/1.0\" 404 4283\"\"\"\n","b2814b01":"ptn_host= r'([\\d]+[\\.?]+[\\d]+[\\.?]+[\\d]+[\\.?]+[\\d]+) -'\nre.findall(ptn_host, txt)","272adcee":"ptn_user = r' - ([A-Za-z]+[\\d]+) | - -'\nre.findall(ptn_user, txt)","9bd29bc0":"ptn_time = '\\[(.*)\\]'\nre.findall(ptn_time, txt)","0d9244e6":"ptn_req = '\\\"(.*)\\\"'\nre.findall(ptn_req, txt)","035e27a2":"re.sub(\"- -\", \"-\", txt)","5a424bf2":"txt","2265cf86":"ptn_user = r' - ([A-Za-z]+[\\d]+) | - -'\nptn_req = r'\\\"(.*)\\\"'\nptn_time = r'\\[(.*)\\]'\nptn_host= r'([\\d]+[\\.?]+[\\d]+[\\.?]+[\\d]+[\\.?]+[\\d]+) -'\nexample_dict = {\"host\":str(re.findall(ptn_host, logdata)), \n                \"user_name\":re.findall(ptn_user, logdata), \n                \"time\":re.findall(ptn_time, logdata),\n                \"request\":re.findall(ptn_req, logdata)}","8931ebb4":"df1 = pd.DataFrame(example_dict)\n#df1.where(df1['user_name'] == ' ').replace(to_replace=' ', value='-', inplace=True)\ndf1.where(df1['user_name'] == '').replace(to_replace='', value='-', inplace=True)","42693722":"df1['user_name'][1]","7a4626f5":"    ptn_user = r' - ([A-Za-z]+[\\d]+) | - -'\n    ptn_req = r'\\\"(.*)\\\"'\n    ptn_time = r'\\[(.*)\\]'\n    ptn_host = r'([\\d]+[\\.?]+[\\d]+[\\.?]+[\\d]+[\\.?]+[\\d]+) -'\n    dict1 = {\"host\":re.findall(ptn_host, logdata), \n            \"user_name\":re.findall(ptn_user, logdata), \n            \"time\":re.findall(ptn_time, logdata),\n            \"request\":re.findall(ptn_req, logdata)}","87c25f38":"import re\ndef logs():\n    with open(\"\/kaggle\/input\/logdata\/logdata.txt\", \"r\") as file:\n        logdata = file.read()\n    ptn_user = ' - ([A-Za-z]+[\\d]+) | - -'\n    ptn_req = '\\\"(.*)\\\"'\n    ptn_time = '\\[(.*)\\]'\n    ptn_host = '([\\d]+[\\.?]+[\\d]+[\\.?]+[\\d]+[\\.?]+[\\d]+) -'\n    log = {\"host\":[re.findall(ptn_host, logdata)], \n            \"user_name\":[re.findall(ptn_user, logdata)], \n            \"time\":[re.findall(ptn_time, logdata)],\n            \"request\":[re.findall(ptn_req, logdata)]}\n    raise NotImplementedError()\n#===============================================================\nassert len(logs()) == 979\n\none_item={'host': '146.204.224.152',\n  'user_name': 'feest6811',\n  'time': '21\/Jun\/2019:15:45:24 -0700',\n  'request': 'POST \/incentivize HTTP\/1.1'}\nassert one_item in logs()","472839a6":"import re\nwith open(\"\/kaggle\/input\/logdata\/logdata.txt\", \"r\") as file:\n    logdata = file.read()\n    logsdict = []\n    pattern = \"\"\"\n    (?P<host>.*)\n    (\\ -\\ )\n    (?P<usr_name>.*)\n    (\\ \\[)\n    (?P<time>.*)\n    (\\]\\ \")\n    (?P<request>.*)\n    (\\\" )\n    \"\"\"\nfor item in re.finditer(pattern, logdata, re.VERBOSE):\n    logsdict.append(item.groupdict())\n","b41fbfcd":"print(logsdict)","1b623e97":"#log\none_item={'host': '146.204.224.152',\n  'user_name': 'feest6811',\n  'time': '21\/Jun\/2019:15:45:24 -0700',\n  'request': 'POST \/incentivize HTTP\/1.1'}\n#assert one_item in logs()\none_item in log","d4e7363a":"pd.DataFrame(log)","efaac3f6":"zipbObj = zip(listOfStr, listOfInt)","2f43279c":"ptn_user = ' - ([A-Za-z]+[\\d]+) | - -'\nptn_req = '\\\"(.*)\\\"'\nptn_time = '\\[(.*)\\]'\nptn_host = '([\\d]+[\\.?]+[\\d]+[\\.?]+[\\d]+[\\.?]+[\\d]+) -'\nhost = re.findall(str(ptn_host), logdata)\nuser_name = re.findall(ptn_user, logdata) \ntime = re.findall(ptn_time, logdata)\nrequest = re.findall(ptn_req, logdata)\nlog = [{'host': host, 'user_name': user_name, 'time' : time, 'request': request} for host, user_name, time, request in zip(host, user_name, time, request)]\nlog\n#one_item in log","43a0f572":"#list_of_lists = [host, user_name, time, request]\n#{z[0]: list(z[1:]) for z in zip(*list_of_lists)} ","8cdefd14":"#[{'host': host, 'user_name': user_name, 'request': request} for host, user_name, time, request in zip(host, user_name, time, request)]","f028fc4e":"type(log)","d3e4188e":"# Python3 code to demonstrate working of \n# Convert list of dictionaries to Dictionary Value list\n# Using loop\nfrom collections import defaultdict\n  \n# initializing lists\ntest_list = [{\"Gfg\" : 6, \"is\" : 9, \"best\" : 10}, \n             {\"Gfg\" : 8, \"is\" : 11, \"best\" : 19},\n             {\"Gfg\" : 2, \"is\" : 16, \"best\" : 10},\n             {\"Gfg\" : 12, \"is\" : 1, \"best\" : 8},\n             {\"Gfg\" : 22, \"is\" : 6, \"best\" : 8}]\n  \n# printing original list\n#print(\"The original list : \" + str(test_list))\n  \n# using loop to get dictionaries\n# defaultdict used to make default empty list \n# for each key\nres = defaultdict(list)\nfor sub in log:\n    for key in sub:\n        res[key].append(sub[key])\n      \n# printing result \n#print(\"The extracted dictionary : \" + str(dict(res)))","b59b480c":"#res\none_item in res","2b2f4f3d":"re.findall('([\\d]+[\\.][\\d]+[\\.][\\d]+[\\.][\\d]+) \\- ([A-Za-z]+[\\d]+)|- -',logdata)","fb68122b":"    with open(\"assets\/logdata.txt\", \"r\") as file:\n        logdata = file.read()\n    logsdict = []\n    pattern = \"\"\"   (?P<host>.*)\n                    (\\ -\\ )\n                    (?P<usr_name>.*)\n                    (\\ \\[)\n                    (?P<time>.*)\n                    (\\] \\\")\n                    (?P<request>.*)\n                    (\\\" )             \"\"\"\n    for item in re.finditer(pattern, logdata, re.VERBOSE):\n        logsdict.append(item.groupdict())\n    return logsdict","9a28d684":"    simple_string = \"\"\"Amy is 5 years old, and her sister Mary is 2 years old. \n    Ruth and Peter, their parents, have 3 kids.\"\"\"\n    words_pattern = '[A-Z]+[a-z]+'\n    re.findall(words_pattern, simple_string)","309c4a2a":"with open (\"\/kaggle\/input\/asset-data\/New Text Document.txt\", \"r\") as file:\n        grades = file.read()\nstudent_with_B_grades = []\npattern_for_Searching_B_grades = \"\"\"\n(?P<name>.*)(\\: B)\n\"\"\"\nfor item in re.finditer(pattern_for_Searching_B_grades, grades):\n    student_with_B_grades.append(item.group('name'))","25b2663b":"student_with_B_grades","7dcb1cfe":"import pandas as pd\nsdata = {'Ohio': 35000, 'Texas': 71000, 'Oregon': 16000, 'Utah': 5000}\nobj1 = pd.Series(sdata)\nstates = ['California', 'Ohio', 'Oregon', 'Texas']\nobj2 = pd.Series(sdata, index=states)\nobj3 = pd.isnull(obj2)","5e1019a2":"obj2['California'] == None","2977ada8":"import pandas as pd\nd = {'1': 'Alice','2': 'Bob','3': 'Rita','4': 'Molly','5': 'Ryan'}\nS = pd.Series(d)","9d464834":"#S.loc[0:2]\nS.iloc[0:2]\n#S.loc[0:3]\n#S.iloc[0:3]","5414fa08":"import pandas as pd\ns1 = pd.Series({1: 'Alice', 2: 'Jack', 3: 'Molly'})\ns2 = pd.Series({'Alice': 1, 'Jack': 2, 'Molly': 3})","516a579d":"#s2[1]\n#s2.loc[1]\n#s1.loc[1]\ns2.iloc[1]","aa1f299e":"import pandas as pd\nd = {'1': 'Alice','2': 'Bob','3': 'Rita','4': 'Molly','5': 'Ryan'}\nS = pd.Series(d)","fa397410":"\nS.iloc[0:2]","bfb499cd":"# Transformation","bbb9acfa":"# Filtering","519bff14":"# Applying","53d5a430":"pattern = '(^[\\w]","a66684f6":"# Hello World !!! "}}