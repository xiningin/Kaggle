{"cell_type":{"5e95a78c":"code","760d0f06":"code","efaa2211":"code","21a0b4e0":"code","f7712c84":"code","903c78e7":"code","60d13ac2":"code","efa44242":"code","2675b630":"code","4fd0fb18":"code","c8b98acc":"code","56d0a8eb":"code","fe079b44":"code","9ac59f8d":"code","968b09c0":"code","9a0ff3dc":"code","96d345a8":"code","909e3004":"code","81671f28":"code","05b9e546":"code","280cd013":"code","e96aebbe":"code","9647ba1f":"code","c6937e96":"code","4f26b22f":"markdown","2f9f3634":"markdown","56fc133d":"markdown","f888cede":"markdown","4672db05":"markdown","1da43321":"markdown","ea83ee86":"markdown","6ec327b9":"markdown"},"source":{"5e95a78c":"import cv2 \nimport os\nimport numpy as np\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom keras import models\nfrom keras import layers\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom sklearn.metrics import confusion_matrix,classification_report\nhappy='..\/input\/mood-detection\/Happy'\n\nsad='..\/input\/mood-detection\/Sad'\n\nnuetral='..\/input\/mood-detection\/Nuetral'","760d0f06":"list_class=[happy,sad,nuetral]","efaa2211":"all_img=[]\nfor c in list_class:\n  print(c)\n  for filename in os.listdir(c):\n    img=cv2.imread(os.path.join(c,filename))\n    if img is not None:\n      gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)\n      resize_img=cv2.resize(gray,(100,100))\n      all_img.append(resize_img)","21a0b4e0":"plt.figure(figsize=(10,10))\nplt.subplot(2, 2, 1)\nplt.imshow(all_img[1],cmap='gray')\n\nplt.subplot(2, 2, 2)\nplt.imshow(all_img[30],cmap='gray')\n\nplt.subplot(2, 2, 3)\nplt.imshow(all_img[60],cmap='gray')\n","f7712c84":"import numpy as np\nImages=np.array(all_img)","903c78e7":"Image_pd=Images.reshape(90,100*100)","60d13ac2":"Image_pd=pd.DataFrame(Image_pd)","efa44242":"DATA=Image_pd","2675b630":"Y=pd.DataFrame(np.ones(90))\nY.iloc[0:30,:]=Y.iloc[0:30,:]*0\nY.iloc[30:60,:]=Y.iloc[30:60,:]*1\nY.iloc[60:,:]=Y.iloc[60:,:]*2","4fd0fb18":"Y_TRAIN=pd.DataFrame(Y)","c8b98acc":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(DATA, Y_TRAIN, test_size=0.30, random_state=42)","56d0a8eb":"NN=models.Sequential()\nNN.add(layers.Dense(728,activation=\"relu\",input_shape=(100*100,)))\n\nNN.add(layers.Dense(128,activation=\"relu\"))\n\nNN.add(layers.Dense(64,activation=\"relu\"))\n\nNN.add(layers.Dense(32,activation=\"relu\"))\nNN.add(layers.Dense(32,activation=\"relu\"))\nNN.add(layers.Dense(32,activation=\"relu\"))\nNN.add(layers.Dense(132,activation=\"relu\"))\n\n\n\n\nNN.add(layers.Dense(3,activation=\"softmax\"))\nNN.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n\n\n","fe079b44":" NN.fit(X_train,y_train,epochs=100,batch_size=32)","9ac59f8d":"pred=NN.predict(X_test)\nprediction=[]\nfor i in range(len(pred)):\n  prediction.append(np.argmax(pred[i]))\nprediction=np.array(prediction).reshape(-1,1)\nprediction=pd.DataFrame(prediction)\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, prediction)","968b09c0":"HAPPY=DATA.iloc[0:30,]\nSAD=DATA.iloc[30:60,]\nNUETRAL=DATA.iloc[60:,]","9a0ff3dc":"from sklearn.decomposition import PCA\nHAPPY_pca = PCA(n_components=10)\nHAPPY_pca.fit(HAPPY)\ntrans_happy = HAPPY_pca.transform(HAPPY)\n\n\nSAD_pca = PCA(n_components=10)\nSAD_pca.fit(SAD)\ntrans_sad = SAD_pca.transform(SAD)\n\n\nNUETRAL_pca = PCA(n_components=10)\nNUETRAL_pca.fit(NUETRAL)\ntrans_nuetral = NUETRAL_pca.transform(NUETRAL)","96d345a8":"print(f\"Happy Images : {sum(HAPPY_pca.explained_variance_ratio_)}\")\nprint(f\"Sad Images  : {sum(SAD_pca.explained_variance_ratio_)}\")\nprint(f\"Nuetral Images : {sum(NUETRAL_pca.explained_variance_ratio_)}\")","909e3004":"HAPPY_IMAGES = HAPPY_pca.inverse_transform(trans_happy)\nSAD_IMAGES = SAD_pca.inverse_transform(trans_sad)\nNUETRAL_IMAGES = NUETRAL_pca.inverse_transform(trans_nuetral)\n","81671f28":"NEW_DATA=pd.concat([pd.DataFrame(HAPPY_IMAGES),pd.DataFrame(SAD_IMAGES),pd.DataFrame(NUETRAL_IMAGES)],axis=0)","05b9e546":"plt.figure(figsize=(10,10))\nplt.subplot(2, 2, 1)\nplt.imshow(np.array(NEW_DATA.iloc[1,:]).reshape(100,100),cmap='gray')\n\nplt.subplot(2, 2, 2)\nplt.imshow(np.array(NEW_DATA.iloc[31,:]).reshape(100,100),cmap='gray')\n\nplt.subplot(2, 2, 3)\nplt.imshow(np.array(NEW_DATA.iloc[61,:]).reshape(100,100),cmap='gray')","280cd013":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(NEW_DATA, Y_TRAIN, test_size=0.30, random_state=42)","e96aebbe":"NN1=models.Sequential()\nNN1.add(layers.Dense(728,activation=\"relu\",input_shape=(100*100,)))\n\nNN1.add(layers.Dense(128,activation=\"relu\"))\n\nNN1.add(layers.Dense(64,activation=\"relu\"))\n\nNN1.add(layers.Dense(32,activation=\"relu\"))\nNN1.add(layers.Dense(32,activation=\"relu\"))\nNN1.add(layers.Dense(32,activation=\"relu\"))\nNN1.add(layers.Dense(132,activation=\"relu\"))\n\nNN1.add(layers.Dense(3,activation=\"softmax\"))\nNN1.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])\n\n\n","9647ba1f":" NN1.fit(X_train,y_train,epochs=100,batch_size=32)","c6937e96":"pred=NN1.predict(X_test)\nprediction=[]\nfor i in range(len(pred)):\n  prediction.append(np.argmax(pred[i]))\nprediction=np.array(prediction).reshape(-1,1)\nprediction=pd.DataFrame(prediction)\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, prediction)","4f26b22f":"<h2> Want to know more about PCA click the link below","2f9f3634":"<h2> Accuracy is 0.48%","56fc133d":"[Understanding PCA](https:\/\/www.kaggle.com\/amitprajapati191978\/understanding-pca)","f888cede":"# Using Nueral Network for Prediction","4672db05":"# PCA for dimention reduction","1da43321":"# Creating Target Column","ea83ee86":"# Reading the Data","6ec327b9":"<h2>The Accuracy After PCA is 70%"}}