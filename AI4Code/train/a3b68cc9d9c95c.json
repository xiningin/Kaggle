{"cell_type":{"a69e68f3":"code","f639fec2":"code","ef7f18d1":"code","c4141d88":"code","9aa8566f":"code","50c404b8":"code","8e3270c3":"code","d799e763":"code","cf0503fd":"code","e139983c":"code","22fb307b":"code","764814fd":"code","aacb540d":"code","4a214146":"code","fffcfbda":"code","b6667c60":"code","f73fe094":"code","d2ca3e81":"code","8f0d9202":"code","7ada8132":"code","8eb4788b":"code","5a6a6a43":"code","b41f9800":"code","62f82bcd":"code","c99d0903":"code","55cbd883":"code","6da45f5e":"code","6c9f60f4":"code","05d9ca8d":"code","be9d849f":"code","506f74f6":"code","a2901c32":"code","74cf52f7":"code","89d63a5d":"code","c5533406":"code","c29c3eaf":"code","33a58667":"code","a9aae864":"code","3a1118d7":"code","8b3a2f9f":"code","5772bad9":"code","4a18d16a":"code","0a281867":"code","6dfc5025":"code","d6bcc8eb":"code","27726a96":"code","de581ec2":"code","c289d18d":"code","0c42d683":"code","65ae78de":"code","ab7b2fb5":"code","0b741d23":"code","248b5fb4":"code","ba538f07":"code","ac23df14":"code","b2c4e39b":"code","dd0c2616":"markdown","0c514e74":"markdown","7c4674dc":"markdown","5db40db2":"markdown"},"source":{"a69e68f3":"import pandas as pd\ntitanic = pd.read_csv('..\/input\/train.csv')\ntitanic.head()","f639fec2":"#drop name and passenger ID\ntitanic.drop(['PassengerId', 'Name', 'Ticket'], axis=1, inplace=True)\ntitanic.head()","ef7f18d1":"#explore continuous features\ntitanic.describe()","c4141d88":"titanic.groupby('Survived').mean()","9aa8566f":"titanic.groupby(titanic['Age'].isnull()).mean()","50c404b8":"import seaborn as sns\nimport numpy as np\nimport matplotlib.pyplot as plt\nfor i in ['Age', 'Fare']:\n    died = list(titanic[titanic['Survived'] == 0][i].dropna())\n    survived = list(titanic[titanic['Survived'] == 1][i].dropna())\n    xmin = min(min(died), min(survived))\n    xmax = max(max(died), max(survived))\n    width = (xmax - xmin) \/ 40\n    sns.distplot(died, color='r', kde=False, bins=np.arange(xmin, xmax, width))\n    sns.distplot(survived, color='g', kde=False, bins=np.arange(xmin, xmax, width))\n    plt.legend(['Did not survive', 'Survived'])\n    plt.title('Overlaid histogram for {}'.format(i))\n    plt.show()","8e3270c3":"titanic['Age'].fillna(titanic['Age'].mean(), inplace=True)\ntitanic.isnull().sum()","d799e763":"for i, col in enumerate(['Pclass', 'SibSp', 'Parch']):\n    plt.figure(i)\n    sns.catplot(x=col, y='Survived', data=titanic, kind='point', aspect=2,)","cf0503fd":"titanic['Family_cnt'] = titanic['SibSp'] + titanic['Parch']\ntitanic.drop(['SibSp', 'Parch'], axis=1, inplace=True)\ntitanic.head()","e139983c":"#explore categorical festures\ntitanic.info()","22fb307b":"titanic.groupby(titanic['Cabin'].isnull())['Survived'].mean()","764814fd":"#whether or not the passenger had a cabin seems to be an indicator of survival\ntitanic['Cabin_ind'] = np.where(titanic['Cabin'].isnull(), 0, 1)\ntitanic.head(10)","aacb540d":"for i, col in enumerate(['Cabin_ind', 'Sex', 'Embarked']):\n    plt.figure(i)\n    sns.catplot(x=col, y='Survived', data=titanic, kind='point', aspect=2, )","4a214146":"titanic.pivot_table('Survived', index='Sex', columns='Embarked', aggfunc='count')","fffcfbda":"titanic.pivot_table('Survived', index='Cabin_ind', columns='Embarked', aggfunc='count')","b6667c60":"titanic.drop(['Cabin', 'Embarked'], axis=1, inplace=True)\ntitanic.head()","f73fe094":"gender_num = {'male': 0, 'female': 1}\n\ntitanic['Sex'] = titanic['Sex'].map(gender_num)\ntitanic.head()","d2ca3e81":"#train test split\nfrom sklearn.model_selection import train_test_split\nfeatures = titanic.drop('Survived', axis=1)\nlabels = titanic['Survived']\nX_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.5, random_state=42)","8f0d9202":"from sklearn.model_selection import GridSearchCV\nimport joblib","7ada8132":"def print_results(results):\n    print('BEST PARAMS: {}\\n'.format(results.best_params_))\n\n    means = results.cv_results_['mean_test_score']\n    stds = results.cv_results_['std_test_score']\n    for mean, std, params in zip(means, stds, results.cv_results_['params']):\n        print('{} (+\/-{}) for {}'.format(round(mean, 3), round(std * 2, 3), params))","8eb4788b":"import warnings\nwarnings.filterwarnings('ignore', category=FutureWarning)\nwarnings.filterwarnings('ignore', category=DeprecationWarning)","5a6a6a43":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression()\nparameters = {\n    'C': [0.001, 0.01, 0.1, 1, 10, 100, 1000]\n}\n\ncv = GridSearchCV(lr, parameters, cv=5)\ncv.fit(features, labels.values.ravel())\n\nprint_results(cv)","b41f9800":"cv.best_estimator_","62f82bcd":"joblib.dump(cv.best_estimator_, '..\/..\/..\/LR_model.pkl')","c99d0903":"from sklearn.svm import SVC\n\nSVC()","55cbd883":"svc = SVC()\nparameters = {\n    'kernel': ['linear', 'rbf'],\n    'C': [0.1, 1, 10]\n}\n\ncv = GridSearchCV(svc, parameters, cv=5)\ncv.fit(features, labels.values.ravel())\n\nprint_results(cv)","6da45f5e":"cv.best_estimator_","6c9f60f4":"joblib.dump(cv.best_estimator_, '..\/..\/..\/SVM_model.pkl')","05d9ca8d":"from sklearn.neural_network import MLPRegressor, MLPClassifier\n\nprint(MLPRegressor())\nprint(MLPClassifier())","be9d849f":"mlp = MLPClassifier()\nparameters = {\n    'hidden_layer_sizes': [(10,), (50,), (100,)],\n    'activation': ['relu', 'tanh', 'logistic'],\n    'learning_rate': ['constant', 'invscaling', 'adaptive']\n}\n\ncv = GridSearchCV(mlp, parameters, cv=5)\ncv.fit(features, labels.values.ravel())\n\nprint_results(cv)","506f74f6":"cv.best_estimator_","a2901c32":"joblib.dump(cv.best_estimator_, '..\/..\/..\/MLP_model.pkl')","74cf52f7":"from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor\n\nprint(RandomForestClassifier())\nprint(RandomForestRegressor())","89d63a5d":"rf = RandomForestClassifier()\nparameters = {\n    'n_estimators': [5, 50, 250],\n    'max_depth': [2, 4, 8, 16, 32, None]\n}\n\ncv = GridSearchCV(rf, parameters, cv=5)\ncv.fit(features, labels.values.ravel())\n\nprint_results(cv)","c5533406":"cv.best_estimator_","c29c3eaf":"joblib.dump(cv.best_estimator_, '..\/..\/..\/RF_model.pkl')","33a58667":"from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor\n\nprint(GradientBoostingClassifier())\nprint(GradientBoostingRegressor())","a9aae864":"gb = GradientBoostingClassifier()\nparameters = {\n    'n_estimators': [5, 50, 250, 500],\n    'max_depth': [1, 3, 5, 7, 9],\n    'learning_rate': [0.01, 0.1, 1, 10, 100]\n}\n\ncv = GridSearchCV(gb, parameters, cv=5)\ncv.fit(features, labels.values.ravel())\n\nprint_results(cv)","3a1118d7":"cv.best_estimator_","8b3a2f9f":"joblib.dump(cv.best_estimator_, '..\/..\/..\/GB_model.pkl')","5772bad9":"models = {}\n\nfor mdl in ['LR', 'SVM', 'MLP', 'RF', 'GB']:\n    models[mdl] = joblib.load('..\/..\/..\/{}_model.pkl'.format(mdl))","4a18d16a":"from sklearn.metrics import accuracy_score, precision_score, recall_score\nfrom time import time\n\ndef evaluate_model(name, model, features, labels):\n    start = time()\n    end = time()\n    pred = model.predict(features)\n    accuracy = round(accuracy_score(labels, pred), 3)\n    precision = round(precision_score(labels, pred), 3)\n    recall = round(recall_score(labels, pred), 3)\n    print('{} -- Accuracy: {} \/ Precision: {} \/ Recall: {} \/ Latency: {}ms'.format(name,\n                                                                                   accuracy,\n                                                                                   precision,\n                                                                                   recall,\n                                                                                   round((end - start)*1000, 1)))","0a281867":"for name, mdl in models.items():\n    evaluate_model(name, mdl, features, labels)","6dfc5025":"test = pd.read_csv('..\/input\/test.csv')\ntest.head()","d6bcc8eb":"test.isnull().sum()","27726a96":"test['Age'].fillna(test['Age'].mean(), inplace=True)\ntest.isnull().sum()","de581ec2":"test['Fare'].fillna(test['Fare'].mean(), inplace=True)\ntest.isnull().sum()","c289d18d":"test['Cabin_ind'] = np.where(test['Cabin'].isnull(), 0, 1)\ntest.drop('Cabin', axis = 1, inplace = True)\ntest.head(10)","0c42d683":"test['Family_cnt'] = test['SibSp'] + test['Parch']\ntest.drop(['SibSp', 'Parch'], axis=1, inplace=True)\ntest.head()","65ae78de":"gender_num = {'male': 0, 'female': 1}\ntest['Sex'] = test['Sex'].map(gender_num)\ntest.head()","ab7b2fb5":"test_features = X_train.columns\ntest_features","0b741d23":"model = GradientBoostingClassifier(learning_rate=0.1, max_depth=3, n_estimators=250)\nmodel.fit(features, labels)","248b5fb4":"predictions = model.predict(test[test_features])\npredictions","ba538f07":"submission = pd.DataFrame()\nsubmission['PassengerId'] = test['PassengerId']\nsubmission['Survived'] = predictions\nsubmission","ac23df14":"submission.to_csv('..\/titanic_submission.csv', index=False)","b2c4e39b":"test_submission = pd.read_csv('..\/titanic_submission.csv')\ntest_submission","dd0c2616":"Evaluate GB model on test set","0c514e74":"Multilayer Perceptron: Hyperparameters","7c4674dc":"Read in Models","5db40db2":"Model Evaluation"}}