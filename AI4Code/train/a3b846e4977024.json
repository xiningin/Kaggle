{"cell_type":{"c0232762":"code","e85a3384":"code","2a134bbb":"code","30f8a188":"code","90aa4cd4":"code","d810b36a":"code","040f9e19":"code","224bbc1a":"code","943d158a":"code","90247257":"code","b82d1ecd":"code","3313d033":"code","abba4956":"code","279463b7":"code","59b602ee":"code","7415e878":"code","f09df2ce":"code","414c75b2":"code","5f423099":"code","d57f7f29":"code","f12d08d3":"code","98b0c1e5":"code","337ef322":"code","721014b8":"code","3f6361a3":"code","ce7f5c34":"code","75d4d40b":"code","c6f4a112":"code","c07a1dd9":"code","839a1905":"code","052f4b48":"code","862f61e1":"code","02334d85":"code","5def613d":"code","5f271ef5":"code","adbeee64":"code","5ac621ba":"code","0ecb102d":"code","5974f0db":"code","323f32f7":"code","fffcdd90":"code","8f951654":"code","b3b48cea":"markdown","e8ffd1b7":"markdown","9e33c4b2":"markdown","6a12e03f":"markdown","1e024d0a":"markdown","4ab768c9":"markdown","308c0f7e":"markdown","d67836b5":"markdown","cadc0a96":"markdown","6122e313":"markdown","6ee5a481":"markdown","cc186b9f":"markdown","7d2b928a":"markdown"},"source":{"c0232762":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","e85a3384":"df = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/train.csv\")","2a134bbb":"df.head(60)","30f8a188":"df.drop([\"id\",\"breath_id\"], axis=1, inplace=True)","90aa4cd4":"df.head()","d810b36a":"#Checking the nan data\ndf.isnull().sum()","040f9e19":"#drop nan values in train_set\ndf.dropna(axis=0, inplace=True)","224bbc1a":"#Checking the data's type\ndf.info()\n# All of them as an integer format","943d158a":"df.isnull().sum()","90247257":"df.describe().round(2)","b82d1ecd":"fig = plt.subplots(figsize=(6,5), dpi=90)\nsns.boxplot(y=df[\"u_in\"], width=0.15)\nplt.title(\"The control input for the inspiratory solenoid valve percantage\")","3313d033":"sns.heatmap(df.corr(), cmap=\"viridis\", annot=True)","abba4956":"df.columns","279463b7":"plt.figure(figsize=(15,12))\n\nfor indis,label in enumerate(['R', 'C', 'time_step', 'u_in', 'u_out', 'pressure']):\n  plt.subplot(2,3,indis+1)\n  sns.histplot(df[label])\n  plt.title(\"{} distribution\".format(label))","59b602ee":"#Show the R and C value \nplt.figure(figsize=(12,6))\n\nfor indis, col in enumerate(['R', 'C']):\n  plt.subplot(1,2,indis+1)\n  sns.countplot(df[col], palette=\"viridis\")","7415e878":"df","f09df2ce":"df_train = df.iloc[:, 5:6].values","414c75b2":"df_train","5f423099":"len(df_train)","d57f7f29":"from sklearn.preprocessing import MinMaxScaler\nms = MinMaxScaler()\ntrain_set_with_s = ms.fit_transform(df_train) ","f12d08d3":"X_train = []\ny_train = []\n\nfor i in range(50,len(train_set_with_s)):\n  X_train.append(train_set_with_s[i-50:i, 0])\n  y_train.append(train_set_with_s[i,0])\n\nX_train, y_train = np.array(X_train), np.array(y_train)","98b0c1e5":"X_train","337ef322":"X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))","721014b8":"#importing keras libraries and packages\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dense, Activation, Dropout\nfrom keras.callbacks import EarlyStopping","3f6361a3":"model = Sequential()","ce7f5c34":"model.add(LSTM(units=20, activation=\"selu\", return_sequences=True, input_shape=(X_train.shape[1], 1)))\nmodel.add(Dropout(0.2))","75d4d40b":"model.add(LSTM(units=30, activation=\"selu\",return_sequences=True ))\nmodel.add(Dropout(0.2))","c6f4a112":"model.add(LSTM(units=40, activation=\"selu\", return_sequences=True))\nmodel.add(Dropout(0.3))","c07a1dd9":"model.add(LSTM(units=50, activation=\"selu\"))\nmodel.add(Dropout(0.3))","839a1905":"model.add(Dense(units=1))","052f4b48":"model.compile(optimizer=\"adam\", loss=\"mean_squared_error\")","862f61e1":"earlyStopping = EarlyStopping(monitor=\"val_loss\",mode=\"min\",verbose=1,patience=25)","02334d85":"model.fit(x=X_train, y=y_train, epochs = 1, batch_size=64, verbose = 1, callbacks=[earlyStopping])","5def613d":"df_test = pd.read_csv(\"..\/input\/ventilator-pressure-prediction\/test.csv\")","5f271ef5":"df_test","adbeee64":"df_test.dropna(axis=0, inplace=True)","5ac621ba":"test_pressure_value = df_test.iloc[:, 2:].values","0ecb102d":"\"\"\"\"\ndf_test = np.array(df_test)\ndf_test= np.array(df_test)[indices.astype(int)]\ndf_test.reshape((df_test, df_test[0], df_test[1], 1))\n\"\"\"\"","5974f0db":"type(df_test[0])","323f32f7":"y_pred = model.predict(test_pressure_value)","fffcdd90":"#Concat the real value and predicted value\ndf_total = pd.concat((df[\"pressure\"], y_pred), axis=0)\ninputs = df_total[len(df_total) - len(y_pred) - 50: ].values\ninputs.reshape(-1,1)\ninputs = sc.transform(inputs)","8f951654":"#Visualizing the results\nplt.plot(df[\"pressure\"], color=\"red\", label=\"Real Pressure Value\")\nplt.plot(y_pred, color=\"blue\", label=\"Predicted Pressure Value\")\nplt.xlabel(\"Time\")\nplt.ylabel(\"Pressure\")\nplt.title(\"Pressure Value Prediction\")\nplt.legend()","b3b48cea":"### Adding third LSTM layers and some dropout","e8ffd1b7":"## Reshaping","9e33c4b2":"### Adding fourth LSTM layers and some dropout","6a12e03f":"### Applying Feature Scaling","1e024d0a":"The loss value of the model was low as I expected, but I encountered a reshape error while testing the model. Please, you can freely discuss about model and you can upvote\n\nThe model was created only taking the pressure value so it made more sense to use another model with lstm(using the power of ensemble technique). Enjoy data science journey   ","4ab768c9":"### Compiling the LSTM","308c0f7e":"### Making predictions and visualizing the results","d67836b5":"### Creating a data structure with 50 timesteps and 1 output","cadc0a96":"### Adding second LSTM layers and some dropout","6122e313":"### Building the LSTM","6ee5a481":"### Adding first LSTM layers and some dropout","cc186b9f":"<a href=\"https:\/\/colab.research.google.com\/github\/ipek-yilmaz\/Google-Brain---Ventilator-Pressure-Prediction\/blob\/master\/Google_Pressure.ipynb\" target=\"_parent\"><img src=\"https:\/\/colab.research.google.com\/assets\/colab-badge.svg\" alt=\"Open In Colab\"\/><\/a>","7d2b928a":"## Adding the output layer"}}