{"cell_type":{"0f1e7b6c":"code","cf8aad8a":"code","1770ec36":"code","db7e994c":"code","7f55fa8a":"code","277f9983":"code","fc665652":"code","730ff4cc":"code","c4ce704f":"code","f3a539ab":"code","8950787c":"code","0a0d50c3":"code","e12ac199":"code","0cb62beb":"code","ac62dbfc":"code","485e2796":"markdown","7a792544":"markdown","97bf0b27":"markdown","c48f06d9":"markdown","d3e25771":"markdown","0e6a647b":"markdown","c9ecbab8":"markdown","70ea3a11":"markdown","526a63a3":"markdown","0b0c0900":"markdown","361803d0":"markdown","0f6f988a":"markdown","c13816e9":"markdown"},"source":{"0f1e7b6c":"import os\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input\nfrom tensorflow.keras.layers import Dense, Flatten\nfrom tensorflow.keras.layers import Conv2D\nfrom tensorflow.keras.layers import MaxPooling2D\nfrom tensorflow.keras.utils import plot_model\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img\nfrom tensorflow.keras.callbacks import EarlyStopping","cf8aad8a":"tf.__version__","1770ec36":"WIDTH = 150\nHEIGHT = 150\nBATCH_SIZE = 128\nTEST_SET_SIZE = 0.2 # 20%\n\ngenerator = ImageDataGenerator(rescale=1\/255.0, validation_split=TEST_SET_SIZE)\n\n# Training data \ntrain_gen = generator.flow_from_directory(\n    directory='..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n    target_size=(WIDTH, HEIGHT),\n    class_mode = 'binary',\n    batch_size = BATCH_SIZE,\n    subset='training')\n\n# Testing data\nval_gen = generator.flow_from_directory(\n    directory='..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/',\n    target_size=(WIDTH,HEIGHT),\n    class_mode = 'binary',\n    batch_size = BATCH_SIZE,\n    subset='validation')","db7e994c":"# class labels\nprint(train_gen.class_indices)\nprint(val_gen.class_indices)","7f55fa8a":"path = r'..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Parasitized\/'\nn_images = 9\nimages = os.listdir(path)[:n_images]\n\nf,axes = plt.subplots(3,3, figsize=(9,9))\naxes = np.ravel(axes)\nfor i, img in enumerate(images):\n    img = plt.imread(os.path.join(path,img))\n    axes[i].imshow(img)\n   ","277f9983":"path = r'..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Uninfected\/'\nn_images = 9\nimages = os.listdir(path)[:n_images]\n\nf,axes = plt.subplots(3,3, figsize=(9,9))\naxes = np.ravel(axes)\nfor i, img in enumerate(images):\n    img = plt.imread(os.path.join(path,img))\n    axes[i].imshow(img)\n   ","fc665652":"# function for creating a vgg block\ndef vgg_block(layer_in, n_filters, n_conv):\n    # add convolutional layers\n    for _ in range(n_conv):\n        layer_in = Conv2D(n_filters, (3,3), padding='same', activation='relu')(layer_in)\n    # add max pooling layer\n    layer_in = MaxPooling2D((2,2), strides=(2,2))(layer_in)\n    return layer_in\n \n# define model input\nvisible = Input(shape=(150, 150, 3))\n# add vgg module\nlayer = vgg_block(visible, 64, 2)\n# add vgg module\nlayer = vgg_block(layer, 128, 2)\n# add vgg module\nlayer = vgg_block(layer, 256, 2)\n\nx = Flatten()(layer)\nx =(Dense(128, activation='sigmoid'))(x)\n\ny = (Dense(1, activation='sigmoid'))(x)\n\n# create model\nmodel = Model(inputs=visible, outputs=y, name='VGG')\nmodel.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n# plot model architecture\nplot_model(model, show_shapes=True)","730ff4cc":"early_stopping = EarlyStopping(monitor='val_loss', patience=3)\nEPOCHS = 20","c4ce704f":"history = model.fit(train_gen,\n                    epochs = EPOCHS,\n                    validation_data = val_gen,\n                    callbacks=[early_stopping])","f3a539ab":"# plot the loss\nplt.plot(history.history['loss'], label='train loss')\nplt.plot(history.history['val_loss'], label='val loss')\nplt.legend()\nplt.show()","8950787c":"# plot the accuracy\nplt.plot(history.history['accuracy'], label='train acc')\nplt.plot(history.history['val_accuracy'], label='val acc')\nplt.legend()\nplt.show()","0a0d50c3":"# function to predict class of given image\ndef predict(img):\n    x = image.img_to_array(img)\n    x = x\/255.0\n    x = np.expand_dims(x,axis=0)\n    proba = model.predict(x)[0][0]\n    y = \"Uninfected\" if proba > 0.5 else \"Parasitized\"\n    return y","e12ac199":"#prediction on parasitized images\npath = r'..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Parasitized\/'\nn_images = 5\nimages = os.listdir(path)[:n_images]\nf,axes = plt.subplots(1,n_images, figsize=(20,4))\nfor i, img in enumerate(images):\n    img = image.load_img(os.path.join(path, img),target_size=(150, 150))\n    \n    axes[i].imshow(img)\n    \n    axes[i].set_title(\"True label : Parasitized\")\n    pred = predict(img) # Prediction\n    axes[i].set_xlabel(f\"Predicted label : {pred}\", fontsize=14)","0cb62beb":"#prediction on uninfected images\npath = r'..\/input\/cell-images-for-detecting-malaria\/cell_images\/cell_images\/Uninfected\/'\nn_images = 5\nimages = os.listdir(path)[:n_images]\nf,axes = plt.subplots(1,n_images, figsize=(20,4))\nfor i, img in enumerate(images):\n    img = image.load_img(os.path.join(path, img),target_size=(150, 150))\n    \n    axes[i].imshow(img)\n    \n    axes[i].set_title(\"True label : Uninfected\")\n    pred = predict(img) # Prediction\n    axes[i].set_xlabel(f\"Predicted label : {pred}\", fontsize=14)","ac62dbfc":"model.save(\"vgg.h5\")","485e2796":"## You can find the web application on my github\n\n<b>Link : <\/b>https:\/\/github.com\/ashok49473\/malaria-detection-app\n\n### Please upvote this kernel if you like my work!!\n\n#### ----- Thank you.!! -----\n","7a792544":"# Model Building (VGG)\nWe use VGG model Architecture and <b> customize it to our problem<\/b>.<br>\n<img src=\"https:\/\/miro.medium.com\/max\/2400\/1*Vz5n812l-J37a5wLxKbD8A.png\" align=\"left\" height=\"50%\">","97bf0b27":"# Data Visualization","c48f06d9":"<h1 align=\"center\"> Malaria cell image classification<\/h1>\n<center><img src=\"https:\/\/d12aarmt01l54a.cloudfront.net\/cms\/images\/Media-20210105074112\/1224-400.png\" width=\"60%\">","d3e25771":"# Save the model","0e6a647b":"## Uninfected Images","c9ecbab8":"### Problem statement : \nDetect whether the given cell image is malaria infected or not.\n\n### Machine Learning problem\n - Supervised Learning | Image Classification\n - Metrics : accuracy\n \n### Source : \nThis Dataset is taken from the official NIH Website: https:\/\/ceb.nlm.nih.gov\/repositories\/malaria-datasets\/","70ea3a11":"# Model Evaluation","526a63a3":"## Prediction on images","0b0c0900":"# Import modules\nImporting all the necessary python modules","361803d0":"# Data Splitting\nSplit the dataset into train and validation sets<br>\n<b>Train set<\/b> : 80% of data<br>\n<b>Test set<\/b> : 20% of data","0f6f988a":"## Parasitized cells","c13816e9":"# Model Training"}}