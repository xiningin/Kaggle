{"cell_type":{"28b5a122":"code","e8c9ff23":"code","292a75d7":"code","d245bada":"code","b818ec96":"code","7ad04086":"code","87d4e243":"code","98aad726":"markdown","af73e729":"markdown","3d0b8766":"markdown","1c4e3092":"markdown","ba427de0":"markdown"},"source":{"28b5a122":"import os\nimport time\nimport pickle\nimport random\nimport numpy as np\nimport pandas as pd\nfrom tqdm import tqdm\nfrom collections import namedtuple\nfrom sklearn.metrics import log_loss, roc_auc_score\n\nfrom random import choices\n\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nfrom torch.utils.data import DataLoader\nfrom torch.nn import CrossEntropyLoss, MSELoss\nfrom torch.nn.modules.loss import _WeightedLoss\nimport torch.nn.functional as F\n\nimport warnings\nwarnings.filterwarnings (\"ignore\")\n\npd.set_option('display.max_columns', 100)\npd.set_option('display.max_rows', 100)\n\nDATA_PATH = '..\/input\/jane-street-market-prediction\/'\n\nNFOLDS = 5\n\nTRAIN = False\nCACHE_PATH = '..\/input\/mlp012003weights'\n\ndef save_pickle(dic, save_path):\n    with open(save_path, 'wb') as f:\n        pickle.dump(dic, f)\n\ndef load_pickle(load_path):\n    with open(load_path, 'rb') as f:\n        message_dict = pickle.load(f)\n    return message_dict\n\nfeat_cols = [f'feature_{i}' for i in range(130)]\n\ntarget_cols = ['action', 'action_1', 'action_2', 'action_3', 'action_4']\n\nf_mean = np.load(f'{CACHE_PATH}\/f_mean_online.npy')\n\n##### Making features\nall_feat_cols = [col for col in feat_cols]\nall_feat_cols.extend(['cross_41_42_43', 'cross_1_2'])\n\n##### Model&Data fnc\nclass Model(nn.Module):\n    def __init__(self):\n        super(Model, self).__init__()\n        self.batch_norm0 = nn.BatchNorm1d(len(all_feat_cols))\n        self.dropout0 = nn.Dropout(0.2)\n\n        dropout_rate = 0.2\n        hidden_size = 256\n        self.dense1 = nn.Linear(len(all_feat_cols), hidden_size)\n        self.batch_norm1 = nn.BatchNorm1d(hidden_size)\n        self.dropout1 = nn.Dropout(dropout_rate)\n\n        self.dense2 = nn.Linear(hidden_size+len(all_feat_cols), hidden_size)\n        self.batch_norm2 = nn.BatchNorm1d(hidden_size)\n        self.dropout2 = nn.Dropout(dropout_rate)\n\n        self.dense3 = nn.Linear(hidden_size+hidden_size, hidden_size)\n        self.batch_norm3 = nn.BatchNorm1d(hidden_size)\n        self.dropout3 = nn.Dropout(dropout_rate)\n\n        self.dense4 = nn.Linear(hidden_size+hidden_size, hidden_size)\n        self.batch_norm4 = nn.BatchNorm1d(hidden_size)\n        self.dropout4 = nn.Dropout(dropout_rate)\n\n        self.dense5 = nn.Linear(hidden_size+hidden_size, len(target_cols))\n\n        self.Relu = nn.ReLU(inplace=True)\n        self.PReLU = nn.PReLU()\n        self.LeakyReLU = nn.LeakyReLU(negative_slope=0.01, inplace=True)\n        self.RReLU = nn.RReLU()\n\n    def forward(self, x):\n        x = self.batch_norm0(x)\n        x = self.dropout0(x)\n\n        x1 = self.dense1(x)\n        x1 = self.batch_norm1(x1)\n        x1 = self.LeakyReLU(x1)\n        x1 = self.dropout1(x1)\n\n        x = torch.cat([x, x1], 1)\n\n        x2 = self.dense2(x)\n        x2 = self.batch_norm2(x2)\n        x2 = self.LeakyReLU(x2)\n        x2 = self.dropout2(x2)\n\n        x = torch.cat([x1, x2], 1)\n\n        x3 = self.dense3(x)\n        x3 = self.batch_norm3(x3)\n        x3 = self.LeakyReLU(x3)\n        x3 = self.dropout3(x3)\n\n        x = torch.cat([x2, x3], 1)\n\n        x4 = self.dense4(x)\n        x4 = self.batch_norm4(x4)\n        x4 = self.LeakyReLU(x4)\n        x4 = self.dropout4(x4)\n\n        x = torch.cat([x3, x4], 1)\n\n        x = self.dense5(x)\n\n        return x\n\nif True:\n    device = torch.device(\"cpu\")\n    \n    model_list = []\n    tmp = np.zeros(len(feat_cols))\n    for _fold in range(NFOLDS):\n        torch.cuda.empty_cache()\n        model = Model()\n        model.to(device)\n        model_weights = f\"{CACHE_PATH}\/online_model{_fold}.pth\"\n        model.load_state_dict(torch.load(model_weights, map_location=torch.device('cpu')))\n        model.eval()\n        model_list.append(model)","e8c9ff23":"!ls ..\/input\/jane-street-with-keras-nn-overfit","292a75d7":"from tensorflow.keras.layers import Input, Dense, BatchNormalization, Dropout, Concatenate, Lambda, GaussianNoise, Activation\nfrom tensorflow.keras.models import Model, Sequential\nfrom tensorflow.keras.losses import BinaryCrossentropy\nfrom tensorflow.keras.optimizers import Adam\nfrom tensorflow.keras.callbacks import EarlyStopping\nfrom tensorflow.keras.layers.experimental.preprocessing import Normalization\nimport tensorflow as tf\nimport tensorflow_addons as tfa\n\nSEED = 1111\n\nnp.random.seed(SEED)\n\n# fit\ndef create_mlp(\n    num_columns, num_labels, hidden_units, dropout_rates, label_smoothing, learning_rate\n):\n\n    inp = tf.keras.layers.Input(shape=(num_columns,))\n    x = tf.keras.layers.BatchNormalization()(inp)\n    x = tf.keras.layers.Dropout(dropout_rates)(x)\n    for i in range(3):\n        x = tf.keras.layers.Dense(hidden_units)(x)\n        x = tf.keras.layers.BatchNormalization()(x)\n        x = tf.keras.layers.Activation(tf.keras.activations.swish)(x)\n        x = tf.keras.layers.Dropout(dropout_rates)(x)\n    \n    x = tf.keras.layers.Dense(num_labels)(x)\n    out = tf.keras.layers.Activation(\"sigmoid\")(x)\n\n    model = tf.keras.models.Model(inputs=inp, outputs=out)\n    model.compile(\n        optimizer=tfa.optimizers.RectifiedAdam(learning_rate=learning_rate),\n        loss=tf.keras.losses.BinaryCrossentropy(label_smoothing=label_smoothing),\n        metrics=tf.keras.metrics.AUC(name=\"AUC\"),\n    )\n\n    return model\n\nepochs = 200\nbatch_size = 4096\nhidden_units = 160\ndropout_rates = 0.2\nlabel_smoothing = 1e-2\nlearning_rate = 1e-3\n\ntf.keras.backend.clear_session()\ntf.random.set_seed(SEED)\nclf = create_mlp(\n    len(feat_cols), 5, hidden_units, dropout_rates, label_smoothing, learning_rate\n    )\nclf.load_weights('..\/input\/jane-street-with-keras-nn-overfit\/model.h5')\n\ntf_models = [clf]","d245bada":"N_FEAT_TAGS = 29\nDEVICE = device\nN_FEATURES = 130\nTHREE_HIDDEN_LAYERS = [400, 400, 400]\n\nclass FFN (nn.Module):\n    \n    def __init__(self, inputCount=130, outputCount=5, hiddenLayerCounts=[150, 150, 150], \n                 drop_prob=0.2, nonlin=nn.SiLU (), isOpAct=False):\n        \n        super(FFN, self).__init__()\n        \n        self.nonlin     = nonlin\n        self.dropout    = nn.Dropout (drop_prob)\n        self.batchnorm0 = nn.BatchNorm1d (inputCount)\n        self.dense1     = nn.Linear (inputCount, hiddenLayerCounts[0])\n        self.batchnorm1 = nn.BatchNorm1d (hiddenLayerCounts[0])\n        self.dense2     = nn.Linear(hiddenLayerCounts[0], hiddenLayerCounts[1])\n        self.batchnorm2 = nn.BatchNorm1d (hiddenLayerCounts[1])\n        self.dense3     = nn.Linear(hiddenLayerCounts[1], hiddenLayerCounts[2])\n        self.batchnorm3 = nn.BatchNorm1d (hiddenLayerCounts[2])        \n        self.outDense   = None\n        if outputCount > 0:\n            self.outDense   = nn.Linear (hiddenLayerCounts[-1], outputCount)\n        self.outActivtn = None\n        if isOpAct:\n            if outputCount == 1 or outputCount == 2:\n                self.outActivtn = nn.Sigmoid ()\n            elif outputCount > 0:\n                self.outActivtn = nn.Softmax (dim=-1)\n        return\n\n    def forward (self, X):\n        \n        # X = self.dropout (self.batchnorm0 (X))\n        X = self.batchnorm0 (X)\n        X = self.dropout (self.nonlin (self.batchnorm1 (self.dense1 (X))))\n        X = self.dropout (self.nonlin (self.batchnorm2 (self.dense2 (X))))\n        X = self.dropout (self.nonlin (self.batchnorm3 (self.dense3 (X))))\n        if self.outDense:\n            X = self.outDense (X)\n        if self.outActivtn:\n            X = self.outActivtn (X)\n        return X\n    \n    \nclass Emb_NN_Model (nn.Module):\n    \n    def __init__(self, three_hidden_layers=THREE_HIDDEN_LAYERS, embed_dim=(N_FEAT_TAGS),\n                 csv_file='..\/input\/jane-street-market-prediction\/features.csv'):\n        \n        super (Emb_NN_Model, self).__init__()\n        global N_FEAT_TAGS\n        N_FEAT_TAGS = 29\n        dtype = {'tag_0' : 'int8'}\n        for i in range (1, 29):\n            k = 'tag_' + str (i)\n            dtype[k] = 'int8'\n        t_df = pd.read_csv (csv_file, usecols=range (1,N_FEAT_TAGS+1), dtype=dtype)\n        t_df['tag_29'] = np.array ([1] + ([0] * (t_df.shape[0]-1)) ).astype ('int8')\n        self.features_tag_matrix = torch.tensor (t_df.to_numpy ())\n        N_FEAT_TAGS += 1\n        \n        self.embed_dim     = embed_dim\n        self.tag_embedding = nn.Embedding (N_FEAT_TAGS+1, embed_dim)\n        self.tag_weights   = nn.Linear (N_FEAT_TAGS, 1)\n        \n        drop_prob          = 0.5\n        self.ffn           = FFN (inputCount=(130+embed_dim), outputCount=0,\n                                  hiddenLayerCounts=[(three_hidden_layers[0]+embed_dim),\n                                                     (three_hidden_layers[1]+embed_dim),\n                                                     (three_hidden_layers[2]+embed_dim)],\n                                  drop_prob=drop_prob)\n        self.outDense      = nn.Linear (three_hidden_layers[2]+embed_dim, 5)\n        return\n    \n    def features2emb (self):\n        \n        all_tag_idxs = torch.LongTensor (np.arange (N_FEAT_TAGS))\n        tag_bools    = self.features_tag_matrix\n        f_emb        = self.tag_embedding (all_tag_idxs).repeat (130, 1, 1)\n        f_emb        = f_emb * tag_bools[:, :, None]\n        s            = torch.sum (tag_bools, dim=1)       \n        f_emb        = torch.sum (f_emb, dim=-2) \/ s[:, None]\n        return f_emb\n    \n    def forward (self, cat_featrs, features):\n        \n        cat_featrs = None\n        features   = features.view (-1, N_FEATURES)\n        f_emb      = self.features2emb ()\n        features_2 = torch.matmul (features, f_emb)\n        features   = torch.hstack ((features, features_2))\n        x          = self.ffn (features)\n        out_logits = self.outDense (x)\n        return out_logits","b818ec96":"embNN_model = Emb_NN_Model ()\n\ntry:\n    embNN_model.load_state_dict (torch.load (\"..\/input\/jane-embnn5-auc-400-400-400\/Jane_EmbNN5_auc_400_400_400.pth\"))\nexcept:\n    embNN_model.load_state_dict (torch.load (\"..\/input\/jane-embnn5-auc-400-400-400\/Jane_EmbNN5_auc_400_400_400.pth\", map_location='cpu'))\n    \nembNN_model = embNN_model.eval ()","7ad04086":"import janestreet\nenv = janestreet.make_env()\nenv_iter = env.iter_test()","87d4e243":"if True:\n\n    for (test_df, pred_df) in tqdm(env_iter):\n        if test_df['weight'].item() > 0:\n            x_tt = test_df.loc[:, feat_cols].values\n            if np.isnan(x_tt.sum()):\n                x_tt = np.nan_to_num(x_tt) + np.isnan(x_tt) * f_mean\n\n            cross_41_42_43 = x_tt[:, 41] + x_tt[:, 42] + x_tt[:, 43]\n            cross_1_2 = x_tt[:, 1] \/ (x_tt[:, 2] + 1e-5)\n            feature_inp = np.concatenate((\n                x_tt,\n                np.array(cross_41_42_43).reshape(x_tt.shape[0], 1),\n                np.array(cross_1_2).reshape(x_tt.shape[0], 1),\n            ), axis=1)\n\n            # torch_pred\n            torch_pred = np.zeros((1, len(target_cols)))\n            for model in model_list:\n                torch_pred += model(torch.tensor(feature_inp, dtype=torch.float).to(device)).sigmoid().detach().cpu().numpy() \/ NFOLDS\n            torch_pred = np.median(torch_pred)\n            \n            # tf_pred\n            tf_pred = np.median(np.mean([model(x_tt, training = False).numpy() for model in tf_models],axis=0))\n            \n            # torch embedding_NN pred\n            x_tt    = torch.tensor (x_tt).float ().view (-1, 130)\n            embnn_p = np.median (torch.sigmoid (embNN_model (None, x_tt)).detach ().cpu ().numpy ().reshape ((-1, 5)), axis=1)\n            \n            # avg\n            pred_pr = torch_pred*0.4 + tf_pred*0.4 + embnn_p*0.2\n            \n            pred_df.action = np.where (pred_pr >= 0.5, 1, 0).astype (int)\n        else:\n            pred_df.action = 0\n        env.predict(pred_df)","98aad726":" Used this notebook https:\/\/www.kaggle.com\/sapthrishi007\/pytorch-embeddingsnn-resnet-tensorflow\n        \n changes -\n        \n more readable,\n        \n deleted repeated & unnecessary lines","af73e729":"# EMbeddings NN","3d0b8766":"## tensorflow part","1c4e3092":"> ## pytorch Resnet part","ba427de0":"## Inference"}}