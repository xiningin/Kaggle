{"cell_type":{"14606b23":"code","c9c85150":"code","c169245c":"code","849c63fa":"code","66e7ea45":"code","1e636b75":"code","f7192d91":"code","782d5172":"code","796f6772":"code","71e61e88":"code","1f1cc62e":"code","a90f6cb9":"markdown","db4bc35e":"markdown","0a4ab95c":"markdown","8c2be71a":"markdown","114fe7fc":"markdown","867a4741":"markdown"},"source":{"14606b23":"\nimport gym\nimport time\nfrom IPython.display import clear_output\n\nenv = gym.make(\"Taxi-v3\").env\n\n# for i in range(0,100):\n#     clear_output(wait=True)\n#     env.reset()\n#     env.render()\n#     time.sleep(0.5)\n    ","c9c85150":"env.s = 328\nenv.render()\nprint(env.step(2))\ntime.sleep(10)\nclear_output(wait=True)\nenv.render()\n","c169245c":"env.P","849c63fa":"epochs = 0\npenalties, reward = 0, 0\n\nframes = [] # for animation\n\ndone = False\n\nwhile not done:\n    action = env.action_space.sample()\n    state, reward, done, info = env.step(action)\n\n    if reward == -10:\n        penalties += 1\n    \n    # Put each rendered frame into dict for animation\n    frames.append({\n        'frame': env.render(mode='ansi'),\n        'episode': '0',\n        'state': state,\n        'action': action,\n        'reward': reward\n        }\n    )\n\n    epochs += 1\n    \n    \nprint(\"Timesteps taken: {}\".format(epochs))\nprint(\"Penalties incurred: {}\".format(penalties))","66e7ea45":"def print_frames(frames):\n    for i, frame in enumerate(frames):\n        clear_output(wait=True)\n        print(frame['frame'])\n        print(f\"Episode: {frame['episode']}\")\n        print(f\"Timestep: {i + 1}\")\n        print(f\"State: {frame['state']}\")\n        print(f\"Action: {frame['action']}\")\n        print(f\"Reward: {frame['reward']}\")\n        time.sleep(1)","1e636b75":"print_frames(frames)","f7192d91":"import numpy as np\nq_table = np.zeros([env.observation_space.n, env.action_space.n])","782d5172":"%%time\n\"\"\"Training the agent\"\"\"\n\nimport random\nfrom IPython.display import clear_output\n\n# Hyperparameters\nalpha = 0.1\ngamma = 0.6\nepsilon = 0.1\n\n# For plotting metrics\nall_epochs = []\nall_penalties = []\n\nfor i in range(1, 100001):\n    state = env.reset()\n\n    epochs, penalties, reward, = 0, 0, 0\n    done = False\n    \n    while not done:\n        if random.uniform(0, 1) < epsilon:\n            action = env.action_space.sample() # Explore action space\n        else:\n            action = np.argmax(q_table[state]) # Exploit learned values\n\n        next_state, reward, done, info = env.step(action) \n        \n        old_value = q_table[state, action]\n        next_max = np.max(q_table[next_state])\n        \n        new_value = (1 - alpha) * old_value + alpha * (reward + gamma * next_max)\n        q_table[state, action] = new_value\n\n        if reward == -10:\n            penalties += 1\n\n        state = next_state\n        epochs += 1\n        \n    if i % 100 == 0:\n        clear_output(wait=True)\n        print(f\"Episode: {i}\")\n\nprint(\"Training finished.\\n\")","796f6772":"q_table[328]","71e61e88":"total_epochs, total_penalties = 0, 0\nepisodes = 100\nframes = []\n\nfor ep in range(episodes):\n    state = env.reset()\n    epochs, penalties, reward = 0, 0, 0\n    \n    done = False\n    \n    while not done:\n        action = np.argmax(q_table[state])\n        state, reward, done, info = env.step(action)\n\n        if reward == -10:\n            penalties += 1\n        \n        # Put each rendered frame into dict for animation\n        frames.append({\n            'frame': env.render(mode='ansi'),\n            'episode': ep, \n            'state': state,\n            'action': action,\n            'reward': reward\n            }\n        )\n        epochs += 1\n\n    total_penalties += penalties\n    total_epochs += epochs\n\nprint(f\"Results after {episodes} episodes:\")\nprint(f\"Average timesteps per episode: {total_epochs \/ episodes}\")\nprint(f\"Average penalties per episode: {total_penalties \/ episodes}\")","1f1cc62e":"print_frames(frames)","a90f6cb9":"# Reinforcement Q-Learning from Scratch in Python with OpenAI Gym\nhttps:\/\/www.learndatasci.com\/tutorials\/reinforcement-q-learning-scratch-python-openai-gym\/","db4bc35e":"# Evaluate agent's performance after Q-learning","0a4ab95c":"# Visualization","8c2be71a":"# Solution without RL Algorithm\nTaking random actions from each state","114fe7fc":"## Printing frames","867a4741":"# Reinforcement Learning using Q-Learning"}}