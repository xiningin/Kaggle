{"cell_type":{"970a95cf":"code","44636416":"code","dfa016fd":"code","205b6199":"code","4491b2bd":"code","1be9a1f3":"code","f24492d0":"code","28214d8a":"code","b44b2395":"code","20993f9a":"code","dfc5eb4f":"code","3e8a11b0":"code","fdf4e7af":"code","4255aa44":"code","db7009ff":"code","bd178ad1":"code","2fb474ea":"code","0ee160c4":"code","0cb61d1d":"markdown","161b94a1":"markdown","d7dbd5e1":"markdown","af34ba68":"markdown","b6fc84dd":"markdown","1d46e6e3":"markdown","90638612":"markdown","18c4163b":"markdown","28063f66":"markdown","95745a1f":"markdown","0bc2fe8d":"markdown","8c8a290b":"markdown","41a13be3":"markdown","0b50ba89":"markdown","e5b77379":"markdown","6831b1ee":"markdown"},"source":{"970a95cf":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\n%matplotlib inline\nsns.set_style(\"whitegrid\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","44636416":"calendar_data = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/calendar.csv') #, index_col=['date'])\nsales_train_validation_data = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sales_train_validation.csv') #, index_col=['id'])\nsell_prices_data = pd.read_csv('\/kaggle\/input\/m5-forecasting-accuracy\/sell_prices.csv') #, index_col=['store_id', 'item_id','wm_yr_wk'])","dfa016fd":"display(calendar_data.head())\ndisplay(sales_train_validation_data.head())\ndisplay(sell_prices_data.head())","205b6199":"def get_salse_data_without_date(sales_data):\n    sale_data_without_date = sales_data.iloc[:, 0:5]\n#     display(sale_data_without_date)\n    return sale_data_without_date","4491b2bd":"def get_sale_data_date(sales_data):\n    sale_data_date = sales_data.iloc[:, 6:]\n#     display(sale_data_date)\n    return sale_data_date","1be9a1f3":"def get_format_changed_sale_data(sale_data, index):\n    sale_date_data = get_sale_data_date(sale_data).T\n    sale_date_data = sale_date_data.iloc[:,:]\n    sale_date_data.columns = ['sale_count']\n\n    new_sale_data = sale_date_data.copy()\n    new_sale_data['d'] = new_sale_data.index\n    for col_name in ['id', 'item_id', 'dept_id', 'cat_id', 'store_id']:\n        new_sale_data[col_name] = sale_data.at[index, col_name]\n\n#     display(new_sale_data)\n    return new_sale_data","f24492d0":"def get_sell_price_filled_dataset(dataset):\n    sale_mean_value = dataset.mean(numeric_only=True)['sell_price']\n    dataset.loc[lambda df: df['sell_price'].isnull(), 'sell_price'] = sale_mean_value\n    return dataset","28214d8a":"# Features\n# FEATURES = ['id', 'item_id', 'dept_id', 'cat_id', 'store_id','date','sale_count']\n# FEATURES = ['date','id','wm_yr_wk','weekday','wday','month','year','d','snap_CA','snap_TX','snap_WI','item_id','dept_id','cat_id','store_id','sell_price']\nFEATURES = ['wm_yr_wk','wday','month','year','snap_CA','snap_TX','snap_WI','sell_price']\n","b44b2395":"loop_count = 0\n# for index, row in sales_train_validation_data.iloc[:,:].iterrows(): \nfor index, row in sales_train_validation_data.iloc[0:10,:].iterrows(): \n    \n    dataset = sales_train_validation_data.iloc[index:index+1,:]\n    \n    dataset = get_format_changed_sale_data(dataset, index)\n    \n    dataset = pd.merge(calendar_data, dataset, on=['d'])\n    dataset = pd.merge(dataset, sell_prices_data, how='left' ,on=['wm_yr_wk', 'store_id', 'item_id'])\n\n    dataset = get_sell_price_filled_dataset(dataset)\n    \n    if loop_count == 0:\n        dataset_all = dataset\n    else:\n        dataset_all = dataset_all.append(dataset, ignore_index=True)\n    loop_count += 1\n\n\n    ","20993f9a":"train_dataset = dataset_all.sample(frac=0.8,random_state=0)\ntest_dataset = dataset_all.drop(train_dataset.index)\n\ntrain_y = train_dataset.sale_count\ntrain_X = train_dataset[FEATURES]\n\nval_y = test_dataset.sale_count\nval_X = test_dataset[FEATURES]\n","dfc5eb4f":"def get_model_by_rondom_forest_training(train_X, train_y):\n    model = RandomForestRegressor(random_state=1)\n    model.fit(train_X, train_y)\n    return model","3e8a11b0":"def get_model_by_xgbooxting_training(train_X, train_y):\n    model = XGBRegressor(n_estimators=1000, learning_rate=0.05, random_state=0)\n    model.fit(train_X, train_y)\n    return model","fdf4e7af":"model = get_model_by_rondom_forest_training(train_X, train_y)\npredict = model.predict(val_X)\n\nvalidated_value = mean_absolute_error(predict, val_y)\nprint(\"Validation MAE for Random Forest Model: {}\".format(validated_value))","4255aa44":"predict","db7009ff":"model = get_model_by_xgbooxting_training(train_X, train_y)\npredict = model.predict(val_X)\n\nvalidated_value = mean_absolute_error(predict, val_y)\nprint(\"Validation MAE for Random Forest Model: {}\".format(validated_value))","bd178ad1":"predict","2fb474ea":"x_axis = [i for i in range(0, len(val_y))]","0ee160c4":"plt.scatter(x_axis, val_y)\nplt.scatter(x_axis, predict)\nplt.show()","0cb61d1d":"## Missing Values\n\n* event_name_1     True\n* event_type_1     True\n* event_name_2     True\n* event_type_2     True\n* sell_price       fill mean value","161b94a1":"# Note\n\n* calendar.csv\n\n * event_type1 and event_type2 contains same categorical value.\n \n * snap_XX: Supplemental Nutrition Assistance Program (SNAP) \u30d5\u30fc\u30c9\u30b9\u30bf\u30f3\u30d7\u5236\u5ea6\u3089\u3057\u3044\n\n* sales_train_validation.csv\n\n * id: concatenated by item_id and store_id\n \n * d_? column: corresponding to calendar.d; item is sold at d_? day.\n \n \n \n ## Mapping\n \n * price per date: \n \n  * calendar.weekday = sell_prices.wm_yr_wk\n  \n  * sales_train_validation.store_id = sell_prices.store_id\n  \n  * sales_train_validation.item_id = sell_prices.item_id\n  \n * sale per date:\n \n  * calendar.d = sell_prices.d_?","d7dbd5e1":"---","af34ba68":"### Train & Predict","b6fc84dd":"Functions","1d46e6e3":"## TODO\n\n* Add moving average 1week, 1month, 6month, 12month","90638612":"## XGBoosting","18c4163b":"## Feature","28063f66":"Check missing data","95745a1f":"### sell_price","0bc2fe8d":"# Training & Predict Data","8c8a290b":"# Train All Data","41a13be3":"# Fill Missing Data\n","0b50ba89":"# Load Data","e5b77379":"## Train Models","6831b1ee":"## Random Forest"}}