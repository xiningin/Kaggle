{"cell_type":{"fe156da2":"code","3d2d0836":"code","d9d4c8f4":"code","e84beff9":"code","f8493213":"code","c1c03fe7":"code","bf7bf3b1":"code","bbdd7e6a":"code","7422ff69":"code","36a332e9":"code","cc279d18":"code","c74166fe":"code","a5e2ac35":"code","e3e902d0":"code","d026de03":"code","28706168":"code","a59a12de":"code","1d6f2990":"code","30e1bb07":"markdown","a99b8892":"markdown","384cdd67":"markdown","8eb0124b":"markdown","2716fbdb":"markdown","135547ac":"markdown","820a15ab":"markdown","c1898a16":"markdown","dc1a78ad":"markdown","57aa7004":"markdown","7ccdef01":"markdown"},"source":{"fe156da2":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport os\nprint(os.listdir(\"..\/input\"))","3d2d0836":"data = pd.read_csv(\"..\/input\/data.csv\")","d9d4c8f4":"#print(data.info())\ndata.head()\n","e84beff9":"print(data['Overall'].max())\ndata[data['Overall']==data['Overall'].max()]","f8493213":"data[data['Overall']==data['Overall'].max()][['Overall','Name','Nationality','Age']]","c1c03fe7":"print(data[data['Overall']==data['Overall'].\\\n           min()][['Overall','Name','Nationality','Age']].\\\n          to_string(index = False)\n     )","bf7bf3b1":"data['Age'].corr(data['Overall'])","bbdd7e6a":"import re\n\n# some values has M on the end and some K for example (100M,900K)\n# if value has M we will multiply it by 1000\ndef value2float(value):\n    temp = list(value)\n    c=1\n    if 'M' in temp:\n        c=1000\n    # subtract everything except numbers 0-9 and point \n    value_float = float(re.sub(\"[^0-9_.]\",\"\",value))*c\n    return value_float\n\ndata['value_float']=data['Value'].map(lambda x :value2float(x))\n\n# print correlation\nprint(data['Overall'].corr(data['value_float']))\n\n# print some columns to see how it looks\ndata[['Name','Overall','Value','value_float']].sample(5)\n","7422ff69":"# index of column \"Crossing\"\nn = data.columns.get_loc(\"Crossing\")\n\n# index of column \"GKReflexes\"\nm = data.columns.get_loc(\"GKReflexes\")\n\nprint(\"Correlation between Overall and\")\nfor i in range(n, m+1):\n    print('{:<15} {}'.format(data.columns[i],data['Overall'].corr(data.iloc[:,i])))","36a332e9":"min_age = data['Age'].min()\nmax_age = data['Age'].max()\n\nprint('{:<3} {:<30} {:<7}'.format('Age','Name','Overall'))\nfor i in range(min_age,max_age+1):\n    \n    # all players who has i age\n    d1 = data[data['Age']==i]\n    \n    # player who has the best overall\n    d2 = d1[d1['Overall']==d1['Overall'].max()]\n    \n    # if we have more players or none\n    name = d2['Name']\n    if not name.empty:\n        overall = d2['Overall'].head(1).to_string(index=False)\n        name_list = name.to_string(index=False).split('\\n')\n        name = ','.join(n.strip() for n in name_list)\n        print('{:<3} {:<30} {:<7}'.format(i,name,overall))\n    else:\n        print(\"We don't have player who has {} years\".format(i))\n    \n","cc279d18":"min_jersey_num = data['Jersey Number'].min()\nmax_jersey_num = data['Jersey Number'].max()\n\nprint('{:<10} {:<30} {:<7}'.format('Jersey Num','Name','Overall'))\nfor i in range(int(min_jersey_num),int(max_jersey_num)+1):\n    \n    # all players who has i jersey number\n    d1 = data[data['Jersey Number']==i]\n    \n    # player who has the best overall\n    d2 = d1[d1['Overall']==d1['Overall'].max()]\n    \n    # if we have more players or none\n    name = d2['Name']\n    if not name.empty:\n        overall = d2['Overall'].head(1).to_string(index=False)\n        name_list = name.to_string(index=False).split('\\n')\n        name = ','.join(n.strip() for n in name_list)\n        print('{:<10} {:<30} {:<7}'.format(i,name,overall))\n    else:\n        print(\"We don't have player who has {} jersey number\".format(i))\n    \n","c74166fe":"\nsome_clubs = ('Juventus', 'Real Madrid','FC Barcelona', 'Manchester United')\n\nd2 = data[['Name','Overall','Club']]\ngrouped_dict = d2.groupby('Club').groups\n\nfor key in some_clubs:\n    indices = grouped_dict[key]\n    print(d2.loc[[*indices]].sort_values(by='Overall',ascending=False).head(5))","a5e2ac35":"import matplotlib.pyplot as plt\n\ndata.plot(y='value_float',x='Overall',kind='scatter',alpha = 0.3)\n","e3e902d0":"from math import pi\n\ndef compare_players_by_id(id1,id2,ratings):\n    df1 = data[['ID','Name',*ratings]]\n    df2 = df1[(df1['ID']==id1) | (df1['ID']==id2)]\n\n    # ------- PART 1: Create background\n    # number of variable\n    categories=list(df2)[2:]\n    N = len(categories)\n \n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n \n    # Initialise the spider plot\n    ax = plt.subplot(111, polar=True)\n \n    # If you want the first axis to be on top:\n    ax.set_theta_offset(pi \/ 2)\n    ax.set_theta_direction(-1)\n \n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories)\n \n    # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([40,60,80], [\"60\",\"80\",\"100\"], color='#6d6d6d', size=10)\n    plt.ylim(0,100)\n \n    # ------- PART 2: Add plots\n    # Plot each individual = each line of the data\n    # I don't do a loop, because plotting more than 3 groups makes the chart unreadable\n \n    # Ind1\n    values=df2.loc[df2['ID']==id1].drop(['ID','Name'],axis=1).values.flatten().tolist()\n    values += values[:1]\n    name_1 = df2.loc[df2['ID']==id1,'Name'].to_string(index=False)\n    ax.plot(angles, values, linewidth=1, linestyle='solid', label=name_1)\n    ax.fill(angles, values, 'b', alpha=0.1)\n\n    # Ind2\n    values=df2.loc[df2['ID']==id2].drop(['ID','Name'],axis=1).values.flatten().tolist()\n    values += values[:1]\n    name_2 = df2.loc[df2['ID']==id2,'Name'].to_string(index=False)\n    ax.plot(angles, values, linewidth=1, linestyle='solid', label=name_2)\n    ax.fill(angles, values, 'r', alpha=0.1)\n    #ax.set_facecolor(('#b2ff00'))\n    # Add legend\n    plt.legend(loc='upper right', bbox_to_anchor=(0.1, 0.1))\n","d026de03":"list_of_ratings = ['Curve','Dribbling','Stamina','Vision']\ncompare_players_by_id(41,169432,list_of_ratings)","28706168":"list_of_ratings = ['BallControl','Acceleration','SprintSpeed','Agility','Reactions']\nmax_overall_id=data[data['Overall']==data['Overall'].max()][['ID']]\\\n                                                    .head(1).values\nmin_overall_id=data[data['Overall']==data['Overall'].min()][['ID']]\\\n                                                    .head(1).values\n\ncompare_players_by_id(*max_overall_id[0],*min_overall_id[0],list_of_ratings)","a59a12de":"data[data['Nationality'].map(lambda x: x.startswith('Bosnia'))]\\\n                        .sort_values(by='Overall',ascending=False).head(5)","1d6f2990":"list_of_ratings=list_of_ratings+['Jumping','ShotPower']\ncompare_players_by_id(180206,180930,list_of_ratings)","30e1bb07":"We don't want to see all columns for players. Let's show only some of them.","a99b8892":"Let's see who has the best overall for every age","384cdd67":"That's better. Let's do the same for min overall without dataframe index","8eb0124b":"Let's see who has the best overall for every jersey number. it's similar like previous example","2716fbdb":"For every club in some_clubs tuple print top 5 players","135547ac":"Next, I will make some plots. We can try our new column 'value float' and 'Overall'","820a15ab":"It is positive as I expected.\n\nLet's see correlation between overall and all player ratings from crossing to gkreflexes","c1898a16":"Lets see what is a max and min overall and who has it. ","dc1a78ad":"For next plot I got inspiration from here: https:\/\/www.kaggle.com\/dczerniawko\/fifa19-analysis\nbut code is different","57aa7004":"Let's see correlation between overall and value. \n\nIf we call data['Overall'].corr(data['Value']) it will be an error because 'Value' is not numeric type. So, we can create new column 'float_value' that will contain only numeric values from column 'Value'","7ccdef01":"Let's see correlation between age and overall. \n\nCorrelation coefficient c is in range between **-1** and **1**.\n\nIf c is close to 1 that means we have a positive correlation.\nA positive correlation indicates that one variable ('age') increases while the other variable ('overall') increases too, or 'age' decreases while 'overall' decreases. Perfect positive correlation is c=1.\n\nIf c is close to -1 we have a negative correlation. That means one variable increases while the other decreases and vice versa. Perfect negative correlation is c=-1.\nIf c is close to 0 we don't have any correlation."}}