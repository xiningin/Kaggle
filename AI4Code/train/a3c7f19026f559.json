{"cell_type":{"49cb16d6":"code","18d4c897":"code","27915794":"code","8f71de1e":"code","bd94c02d":"code","6e6b339f":"code","0a177e31":"code","8f28b09e":"code","8eb9bc24":"code","86ca632f":"code","0b61101d":"code","c6c4799d":"code","e978cced":"code","a0ce4b48":"code","630f7857":"code","877cc748":"code","d508e1e5":"code","a29a8e56":"code","4b813951":"markdown","20c14427":"markdown","f9f4a470":"markdown","02f00266":"markdown","95ab8c8c":"markdown","826ffffb":"markdown","349b772c":"markdown","d3aa711c":"markdown","39cc02cf":"markdown"},"source":{"49cb16d6":"import tensorflow as tf\nprint(tf.__version__)","18d4c897":"train_dir = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Train\/\"\nvalid_dir = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Validation\/\"\ntest_dir  = \"..\/input\/face-mask-12k-images-dataset\/Face Mask Dataset\/Test\/\"","27915794":"from tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img","8f71de1e":"target_size=(96,96)\nbatch_size = 16","bd94c02d":"train_datagen = ImageDataGenerator(\n    rescale=1.\/255,\n    rotation_range=40,\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    shear_range=0.2,\n    zoom_range=0.2,\n    horizontal_flip=True,\n    vertical_flip=True)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',    \n    shuffle=True,\n    seed=42,\n    class_mode='categorical')","6e6b339f":"valid_datagen = ImageDataGenerator(rescale=1.\/255)\n\nvalid_generator = valid_datagen.flow_from_directory(\n    valid_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb',\n    shuffle=False,    \n    class_mode='categorical')","0a177e31":"test_datagen = ImageDataGenerator(rescale=1.\/255)\n\ntest_generator = test_datagen.flow_from_directory(\n    test_dir,\n    target_size=target_size,\n    batch_size=batch_size,\n    color_mode='rgb', \n    shuffle=False,    \n    class_mode='categorical')","8f28b09e":"from tensorflow.keras import models, layers\nfrom tensorflow.keras.regularizers import l2\nfrom tensorflow.keras.callbacks import ModelCheckpoint","8eb9bc24":"num_classes = 2 # WithMask, WithoutMask\ninput_shape = (96,96,3)","86ca632f":"# Build Model\nmodel = models.Sequential()\n# 1st Conv layer\nmodel.add(layers.Conv2D(16, (3, 3), activation='relu', padding='same', input_shape=input_shape))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 2nd Conv layer\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 3rd Conv layer\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 4th Conv layer\nmodel.add(layers.Conv2D(96, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# 5th Conv layer\nmodel.add(layers.Conv2D(128, (3, 3), activation='relu', padding='same'))\nmodel.add(layers.MaxPooling2D((2, 2)))\n# FC layers\nmodel.add(layers.Flatten())\n#model.add(layers.Dense(1024, kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))\nmodel.add(layers.Dense(1024))\n#model.add(layers.Dropout(0.2))\n\n#model.add(layers.Dense(64, kernel_regularizer=l2(0.01), bias_regularizer=l2(0.01)))\nmodel.add(layers.Dense(64))\n#model.add(layers.Dropout(0.2))\n\nmodel.add(layers.Dense(num_classes, activation='softmax'))\n\nmodel.summary()","0b61101d":"# Compile Model\nmodel.compile(loss='categorical_crossentropy', optimizer='Adam',  metrics=['accuracy'])","c6c4799d":"STEP_SIZE_TRAIN=train_generator.n\/\/train_generator.batch_size\nSTEP_SIZE_VALID=valid_generator.n\/\/valid_generator.batch_size\nSTEP_SIZE_TEST =test_generator.n\/\/test_generator.batch_size\nnum_epochs = 50","e978cced":"# Train Model\nmodel.fit(train_generator,steps_per_epoch=STEP_SIZE_TRAIN,epochs=num_epochs, validation_data=valid_generator, validation_steps=STEP_SIZE_VALID) #, callbacks=[checkpoint])","a0ce4b48":"models.save_model(model, \"facemask_cnn.h5\")","630f7857":"loss, acc = model.evaluate(test_generator, steps=STEP_SIZE_TEST)\nprint(\"The accuracy of the model is {:.3f}\\nThe Loss in the model is {:.3f}\".format(acc,loss))","877cc748":"import numpy as np\nfrom sklearn.metrics import classification_report, confusion_matrix","d508e1e5":"preds=model.predict(test_generator)\ny_pred = np.argmax(preds,axis=1)\ny_actual = test_generator.classes\ncm = confusion_matrix(y_actual, y_pred)\nprint(cm)","a29a8e56":"# report\nlabels = ['withMask', 'withoutMask']\nprint(classification_report(y_actual, y_pred, target_names=labels))","4b813951":"## Data Augmentation","20c14427":"### classification report","f9f4a470":"# FaceMask Image Classification\n### withMask, withoutMask","02f00266":"## Evaluate Model","95ab8c8c":"## Train Model","826ffffb":"## Save Model","349b772c":"## Build Model","d3aa711c":"## Confusion Matrix","39cc02cf":"## [Face Mask 12K images Dataset](https:\/\/www.kaggle.com\/ashishjangra27\/face-mask-12k-images-dataset)\n![image.png](attachment:image.png)"}}