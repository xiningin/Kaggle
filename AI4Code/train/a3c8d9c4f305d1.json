{"cell_type":{"1380406b":"code","facf2300":"code","24518d06":"code","36b68e21":"code","9b129e7d":"code","9e4b47be":"code","951e2b20":"code","a2b725d6":"code","f07f11b8":"code","d801e135":"code","f708da6d":"code","51173d6d":"code","8571b835":"code","13004667":"code","91e60042":"code","48efb84c":"code","476289c3":"code","49601132":"code","40c0a4d3":"code","df4e06cb":"code","4ea11b46":"code","94873cbf":"code","ac01097c":"code","df309d2a":"code","f0cbe7fa":"code","df755e75":"code","faf38d6c":"code","8be5ff49":"code","a5495654":"code","4a680a34":"markdown","4b2b85db":"markdown","d996a604":"markdown","12f9172e":"markdown","51cb6d22":"markdown","b4142653":"markdown","5e1346a9":"markdown"},"source":{"1380406b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","facf2300":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.compose import make_column_transformer\nfrom sklearn.impute import KNNImputer, SimpleImputer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import OrdinalEncoder, StandardScaler, OneHotEncoder, MinMaxScaler, RobustScaler\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.metrics import accuracy_score, f1_score, confusion_matrix","24518d06":"df = pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\", index_col=\"PassengerId\")\ntest_data = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\", index_col=\"PassengerId\")\ndf","36b68e21":"# shape of the training data\ndf.shape","9b129e7d":"# general info about columns of the data in our hand\ndf.info()","9e4b47be":"# information about numerical columns\ndf.describe()","951e2b20":"# number of null values in each column\ndf.isna().sum()","a2b725d6":"# here the percentage of null values in each column\ndf.isna().mean()","f07f11b8":"label = \"Survived\"","d801e135":"df.columns","f708da6d":"df[\"Age\"].unique(), df[\"Age\"].value_counts()","51173d6d":"df[\"Pclass\"].hist()","8571b835":"# df.Survived.plot.bar()","13004667":"df.boxplot(column=\"Pclass\")","91e60042":"plt.bar(df[\"Pclass\"].value_counts().index, df[\"Pclass\"].value_counts())\nplt.grid()","48efb84c":"print(df[\"Pclass\"].unique())\nsns.catplot(x=label, col=\"Pclass\", kind=\"count\", data=df)","476289c3":"print(df[\"SibSp\"].unique())\nsns.catplot(x=\"SibSp\", col=label, kind=\"count\", data=df)\nplt.show()","49601132":"print(df[\"Parch\"].unique())\nsns.catplot(x=\"Parch\", col=label, kind=\"count\", data=df)\nplt.show()","40c0a4d3":"df[\"Parch\"].nunique(), df[\"Parch\"].value_counts()","df4e06cb":"sns.catplot(x=\"Fare\", col=label, kind=\"count\", data=df)","4ea11b46":"df[\"Fare\"].nunique(), df[\"Fare\"].value_counts()","94873cbf":"sns.catplot(x=\"Ticket\", col=label, kind='count', data=df);","ac01097c":"df[\"Ticket\"].nunique(), df[\"Ticket\"].value_counts()","df309d2a":"y = df[label]\nx = df.drop(label, axis=1)\n\nfrom sklearn.model_selection import train_test_split\nxtrain, xtest, ytrain, ytest = train_test_split(x, y, random_state=7, stratify=y)","f0cbe7fa":"df.columns","df755e75":"x = df.drop(label, axis=1)\ncol_trans = make_column_transformer((\"drop\", [\"Name\", \"Cabin\", \"Ticket\", \"Fare\"]),\n                                    (KNNImputer(), [\"Age\"]), \n                                    (SimpleImputer(strategy=\"most_frequent\"), ['Embarked']), \n                                    (OneHotEncoder(), ['Sex']),\n#                                     (OneHotEncoder(drop=\"first\"), ['Pclass', 'SibSp', 'Parch']),\n                                    remainder=\"passthrough\")\ncol_trans_1 = make_column_transformer( \n                                    (StandardScaler(), [0]),    #Age\n                                    (OneHotEncoder(), [1]),    #Embarked\n                                     remainder=\"passthrough\")\nvt = VarianceThreshold(threshold=0.01)\n\n# col_trans.fit_transform(xtrain)","faf38d6c":"\n\nfrom sklearn.svm import SVC\nclf = SVC()\npipe = make_pipeline(col_trans,\n                     col_trans_1,\n                     vt,\n                    clf)\nparam_grid={\n\n}\nsearch = GridSearchCV(pipe, param_grid, cv=5)\nsearch.fit(xtrain, ytrain)\nsearch.best_score_\n","8be5ff49":"# clf = RandomForestClassifier(n_estimators=100, max_depth=3, random_state=2)\nclf = RandomForestClassifier(max_depth=5, n_estimators=10)\npipe = make_pipeline(col_trans, col_trans_1, vt, clf\n                    )\nparam_grid = {}\nrf_search = GridSearchCV(pipe, param_grid)\nrf_search.fit(xtrain, ytrain)\nrf_search.best_score_, confusion_matrix(ytest, rf_search.best_estimator_.predict(xtest))","a5495654":"search = rf_search\nbest_model = search.best_estimator_\nbest_model.fit(x, y)\npred = best_model.predict(test_data)\n\nindex = pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")[\"PassengerId\"]\nmy_submission = pd.DataFrame({'PassengerId': index, \"Survived\": pred})\nmy_submission.to_csv('submission.csv', index=False)","4a680a34":"#### also Ticket column needed to be deleted\n### **using train test split function to split the training data into training and validation set**","4b2b85db":"#### Import libraries and load data","d996a604":"#### **Reading the csv file**","12f9172e":"#### Fare column also will be deleted","51cb6d22":"### **Starting with Explolatory Data Analysis (EDA)**","b4142653":"## Columns that will be dropped\n**[\"Name\", \"Cabin\", \"Ticket\", \"Fare\"]**\n#### 1- name column as names doesn't carry relevant information, the same for (Ticket and Fare)\n#### 2- 77% of Cabin column is null values, so i will delete that column as we cann't impute it accurately","5e1346a9":"### *we will do all the preprocessing steps using the make_column_transformer this has many advantages, such as we can involve the preprocessing step in the fine tuning process, and we dont need the repeat the same steps for testing data step by step*"}}