{"cell_type":{"8d42bc56":"code","a42c7f83":"code","030239a9":"code","ad4f87cd":"code","8554fd7d":"code","6768c69f":"code","53ac0519":"code","1daad738":"code","f9ab0190":"code","0d7092be":"code","1ced4688":"code","a2b69d60":"code","9795daad":"code","687834ac":"code","554bf2d9":"code","1015204c":"code","273220e8":"code","8fdd5328":"code","3e97c611":"code","bdfcbb0e":"code","2ca3e428":"code","124eb8b9":"code","9c0b2ba7":"code","7e3541fc":"code","5a7c2654":"code","89f6ee46":"code","13bc2e19":"code","0d335aea":"code","2822e1af":"code","b0ebe8da":"code","9c03c8c7":"code","c4b3cdff":"code","0336cddb":"code","870dcb58":"markdown"},"source":{"8d42bc56":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","a42c7f83":"data = pd.read_csv(\"..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv\") # we can read our dataset by read_csv function of pandas","030239a9":"# we can get general information from our dataset\ndata.info()","ad4f87cd":"#for to see the columns of our dataset\ndata.columns","8554fd7d":"# with head() function, we can take a little look at our dataset to know what we are dealing with\ndata.head(10)","6768c69f":"# similar function to head(), but we see the last 5 (or whatever you write in) samples of our dataset\ndata.tail(10)","53ac0519":"# with corr() function, we see the correlation between the features of dataset\ndata.corr()","1daad738":"# correlation map\nf,ax = plt.subplots(figsize=(18, 18))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()","f9ab0190":"# Line Plot\n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.availability_365.plot(kind = \"line\",color = \"y\",label = \"availability 365\",alpha = 0.5,grid = True,linewidth = 1,linestyle = \":\")\ndata.price.plot(color = \"r\",label = \"price\",alpha = 0.5,grid = True,linewidth = 1,linestyle = \"-.\")\nplt.legend(loc = 'upper right') # legend = puts label into plot\nplt.xlabel('x axis')            # label = name of label\nplt.ylabel('y axis')\nplt.title('availability - price')  # title = title of plot\nplt.show()","0d7092be":"# Scatter Plot \n# x = number of reviews, y = reviews per month\n\ndata.plot(kind = 'scatter',x = 'number_of_reviews',y = 'reviews_per_month',color = 'red',alpha = 0.5)\nplt.xlabel('number of reviews')            # label = name of label\nplt.ylabel('reviews_per_month')\nplt.title('reviews')  # title = title of plot\nplt.show()","1ced4688":"# Histogram\n# bins = number of bar in figure\ndata.availability_365.plot(kind = 'hist',bins = 15,figsize = (7,7))\nplt.show()","a2b69d60":"# clf() = cleans it up again you can start a fresh\ndata.availability_365.plot(kind = 'hist',bins = 50)\n#plt.clf()\n# We cannot see plot due to clf()","9795daad":"#create dictionary and look its keys and values\ndictionary = {'turkey' : 'ankara','russia' : 'moscow'}\nprint(dictionary.keys())\nprint(dictionary.values())","687834ac":"#Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['turkey'] = \"istanbul\"    # update existing entry\nprint(dictionary)\ndictionary['kenya'] = \"nairobi\"       # Add new entry\nprint(dictionary)\ndel dictionary['kenya']              # remove entry with key 'kenya'\nprint(dictionary)\nprint('turkey' in dictionary)        # check include or not\ndictionary.clear()                   # remove all entries in dict\nprint(dictionary)","554bf2d9":"# In order to run all code you need to take comment this line\ndel dictionary         # delete entire dictionary     \nprint(dictionary)       # it gives error because dictionary is deleted","1015204c":"data = pd.read_csv('..\/input\/new-york-city-airbnb-open-data\/AB_NYC_2019.csv')","273220e8":"# 1 - Filtering Pandas data frame\nx = data['price']>8000    # There are only 7 airbnb rooms who have higher price value than 8000\ndata[x]","8fdd5328":"# 2 - Filtering pandas with logical_and\n# There are only 2 airbnb rooms who have higher price value than 8000 and higher minimum nights value than 50\ndata[np.logical_and(data['price']>8000, data['minimum_nights']>50 )]","3e97c611":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['price']>8000) & (data['minimum_nights']>50)]","bdfcbb0e":"def tuble_ex():\n    \"\"\" return defined t tuble\"\"\"\n    t = (1,2,3)\n    return t\na,b,c = tuble_ex()\nprint(a,b,c)","2ca3e428":"#nested function\ndef square():\n    \"\"\" return square of value \"\"\"\n    def add():\n        \"\"\" add two local variable \"\"\"\n        x = 2\n        y = 3\n        z = x + y\n        return z\n    return add()**2\nprint(square())    ","124eb8b9":"#Default argument example:\ndef f(a, b=1):\n  \"\"\" b = 1 is default argument\"\"\"\n#Flexible argument example:\ndef f(*args):\n \"\"\" *args can be one or more\"\"\"\n\ndef f(** kwargs):\n \"\"\" **kwargs is a dictionary\"\"\"\n","9c0b2ba7":"# default arguments\ndef f(a, b = 1, c = 2):\n    y = a + b + c\n    return y\nprint(f(5))\n# what if we want to change default arguments\nprint(f(5,4,3))","7e3541fc":"# flexible arguments *args\ndef f(*args):\n    for i in args:\n        print(i)\nf(1)\nprint(\"\")\nf(1,2,3,4)\n# flexible arguments **kwargs that is dictionary\ndef f(**kwargs):\n    \"\"\" print key and value of dictionary\"\"\"\n    for key, value in kwargs.items():               # If you do not understand this part turn for loop part and look at dictionary in for loop\n        print(key, \" \", value)\nf(country = 'spain', capital = 'madrid', population = 123456)","5a7c2654":"# lambda function\nsquare = lambda x: x**2     # where x is name of argument\nprint(square(4))\ntot = lambda x,y,z: x+y+z   # where x,y,z are names of arguments\nprint(tot(1,2,3))","89f6ee46":"# Anonymus function\nnumber_list = [1,2,3]\ny = map(lambda x:x**2,number_list)\nprint(list(y))","13bc2e19":"# iteration example\nname = \"ronaldo\"\nit = iter(name)\nprint(next(it))    # print next iteration\nprint(*it)         # print remaining iteration","0d335aea":"# zip example\nlist1 = [1,2,3,4]\nlist2 = [5,6,7,8]\nz = zip(list1,list2)\nprint(z)\nz_list = list(z)\nprint(z_list)","2822e1af":"un_zip = zip(*z_list)\nun_list1,un_list2 = list(un_zip) # unzip returns tuble\nprint(un_list1)\nprint(un_list2)\nprint(type(un_list2))","b0ebe8da":"# Example of list comprehension\nnum1 = [1,2,3]\nnum2 = [i + 1 for i in num1 ]\nprint(num2)","9c03c8c7":"# Conditionals on iterable\nnum1 = [5,10,15]\nnum2 = [i**2 if i == 10 else i-5 if i < 7 else i+5 for i in num1]\nprint(num2)","c4b3cdff":"# lets return pokemon csv and make one more list comprehension example\n# lets classify pokemons whether they have high or low speed. Our threshold is average speed.\nthreshold = sum(data.price)\/len(data.price)\nprint(\"threshold\",threshold)\ndata[\"price_level\"] = [\"high\" if i > threshold else \"low\" for i in data.price]\ndata.loc[:10,[\"price_level\",\"price\"]] # we will learn loc more detailed later","0336cddb":"data.describe()","870dcb58":"Why do we use the functions like head(), tail(), info(), columns or others?\nBeacuse we need to **observe**. We need to get **preliminary information**. "}}