{"cell_type":{"40e5ada3":"code","193cf92d":"code","52a7531b":"code","bef28733":"code","3e014c6e":"code","b652b6df":"code","755f720f":"code","36cfe1af":"code","0f52a761":"code","a9814676":"code","e4f2ace2":"code","8dd3aaf1":"code","db58a927":"code","2a931d94":"code","d87b82a2":"code","54f82e0a":"code","61970242":"code","033d90cc":"code","002148c7":"code","e397a632":"code","c1344217":"code","2e250d8d":"code","2e3dd676":"code","94cf42d7":"code","5605d022":"code","3fbf199e":"code","626b9256":"code","3e082265":"code","4efd0bd9":"code","93ec2c83":"code","3fcd6163":"code","762d6e27":"code","fcdcdbe8":"code","ebb322d7":"code","99337353":"code","f72dec0c":"code","79e37efb":"code","5288f224":"code","03a9e3bb":"code","bcb9153b":"code","d459de49":"code","8e3a8670":"code","7a6d39de":"code","5928c1d8":"code","c51caa14":"code","ba4da1b4":"code","2787be93":"code","8caa893d":"code","ddcda2ab":"code","4786938c":"code","fe96858d":"code","f95c0064":"code","22182a39":"code","5d6138ea":"code","3c2d19c6":"code","7f85716e":"code","fc646cd1":"code","c9278d64":"code","909733b9":"code","424fb0f3":"code","2a4690b1":"code","d962309d":"code","07a6e86d":"code","ae9edcdc":"code","cbfea901":"code","1c5dd3b9":"code","f5b1d80a":"code","6f4a3e2c":"code","7ab4933a":"code","adafb2a3":"code","02ffdfcb":"code","66c1380d":"code","a032cea6":"code","c7eb1157":"code","028261ca":"code","d6031791":"code","721b386c":"code","59c1961b":"code","8e7a8f96":"code","5be8e3dc":"code","8d5967cb":"code","f2ef67da":"code","0615326a":"code","26211b0f":"code","07aa0103":"code","c42defd9":"code","9d63b935":"code","0ffdb5f8":"code","54f918c4":"markdown","f8478a45":"markdown","b1dc36b1":"markdown","08499a16":"markdown","d5899e01":"markdown","883cc190":"markdown","32a413a2":"markdown","0df5c247":"markdown","8965930a":"markdown"},"source":{"40e5ada3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","193cf92d":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","52a7531b":"\nimport seaborn as sns\nimport numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split  , GridSearchCV, cross_val_score\nfrom sklearn.preprocessing import StandardScaler \nfrom sklearn.svm import SVC\nfrom sklearn.linear_model import LogisticRegression\nimport xgboost as xgb\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neighbors import KNeighborsClassifier  \nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import BernoulliNB\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import confusion_matrix , classification_report\nimport warnings\nfrom sklearn.metrics import roc_auc_score,roc_curve\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom xgboost import XGBClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom lightgbm import LGBMClassifier\nfrom catboost import CatBoostClassifier\nimport matplotlib.pyplot as plt\n\n\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.wrappers.scikit_learn import KerasClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom keras.callbacks import ModelCheckpoint, EarlyStopping","bef28733":"df=pd.read_csv('\/kaggle\/input\/heart-attack-analysis-prediction-dataset\/heart.csv')\ndf.head()","3e014c6e":"df.shape","b652b6df":"df.isnull().sum()","755f720f":"df.info()","36cfe1af":"df.describe().T\n","0f52a761":"df.corr()","a9814676":"df.corr()[\"output\"]","e4f2ace2":"sns.countplot(data=df, x=\"sex\")\nplt.show()","8dd3aaf1":"df[\"cp\"].value_counts()","db58a927":"sns.countplot(data=df, x=\"cp\")\nplt.show()","2a931d94":"df[\"fbs\"].value_counts()","d87b82a2":"df[\"fbs\"].value_counts().plot(kind=\"pie\", figsize= (8,6))","54f82e0a":"df[\"restecg\"].value_counts()","61970242":"sns.countplot(data=df, x=\"restecg\")\nplt.show()","033d90cc":"df[\"exng\"].value_counts()","002148c7":"df[\"exng\"].value_counts().plot(kind=\"bar\", figsize= (8,6))","e397a632":"df[\"thall\"].value_counts()","c1344217":"sns.countplot(data=df, x=\"thall\")\nplt.show()\n","2e250d8d":"plt.figure(figsize=(10,10))\nsns.displot(df.age, color=\"red\", label=\"Age\", kde= True)\nplt.legend()","2e3dd676":"sns.catplot(x = \"output\", y = \"age\", data = df);","94cf42d7":"plt.figure(figsize=(20,20))\nsns.displot(df.trtbps , color=\"green\",  kde= True)\nplt.legend()","5605d022":"plt.figure(figsize=(10,10))\nsns.distplot(df[df['output'] == 0][\"chol\"], color='green',kde=True,) \nsns.distplot(df[df['output'] == 1][\"chol\"], color='red',kde=True)\n\nplt.show()","3fbf199e":"plt.figure(figsize=(10,10))\nsns.distplot(df[df['output'] == 0][\"thalachh\"], color='green',kde=True,) \nsns.distplot(df[df['output'] == 1][\"thalachh\"], color='red',kde=True)\nplt.show()","626b9256":"plt.figure(figsize=(30,30))\nsns.pairplot(df)\nplt.show()","3e082265":"sns.pairplot(df, hue = \"output\");","4efd0bd9":"sns.pairplot(df, hue = \"sex\");","93ec2c83":"plt.figure(figsize=(13,13))\nplt.subplot(2,3,1)\nsns.violinplot(x = \"sex\", y = \"output\", data = df)\nplt.subplot(2,3,2)\nsns.violinplot(x = \"thall\", y = \"output\", data = df)\nplt.subplot(2,3,3)\nsns.violinplot(x = \"exng\", y = \"output\", data = df)\nplt.subplot(2,3,4)\nsns.violinplot(x = \"restecg\", y = \"output\", data = df)\nplt.subplot(2,3,5)\nsns.violinplot(x = \"cp\", y = \"output\", data = df)\nplt.subplot(2,3,6)\nsns.violinplot(x = \"fbs\", y = \"output\", data = df)\n\nplt.show()","3fcd6163":"plt.figure(figsize=(14,6))\nsns.barplot(x = \"cp\", y = \"output\", hue = \"sex\", data = df);","762d6e27":"plt.figure(figsize=(10,6))\nsns.barplot(x = \"fbs\", y = \"output\", hue = \"sex\", data = df);","fcdcdbe8":"plt.figure(figsize=(10,6))\nsns.barplot(x = \"restecg\", y = \"output\", hue = \"sex\", data = df);","ebb322d7":"plt.figure(figsize=(10,6))\nsns.barplot(x = \"exng\", y = \"output\", hue = \"sex\", data = df);","99337353":"df.head(2)","f72dec0c":"sns.distplot(df.chol, kde = False , bins=200);","79e37efb":"sns.catplot(x = \"cp\", y = \"output\", hue = \"sex\", kind = \"point\", data = df);","5288f224":"sns.boxplot(x = df[\"chol\"]);","03a9e3bb":"sns.boxplot(x = df[\"trtbps\"]);","bcb9153b":"sns.boxplot(x = df[\"thalachh\"]);","d459de49":"sns.boxplot(x = df[\"oldpeak\"]);","8e3a8670":"plt.figure(figsize=(12,7))\nsns.heatmap(df.corr(),annot=True,cmap=\"viridis\")\nplt.ylim(10, 0)\n","7a6d39de":"x = df.iloc[:, 0:-1].values\ny = df.iloc[:, -1].values\nx,y","5928c1d8":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size= 0.2, random_state= 42)\n","c51caa14":"print(x_train.shape)\nprint(y_train.shape)\nprint(x_test.shape)\nprint(y_test.shape)","ba4da1b4":"scaler = StandardScaler()\nx_train = scaler.fit_transform(x_train)\nx_test = scaler.transform(x_test)","2787be93":"loj_model = LogisticRegression()\nloj_model.fit(x_train, y_train)\npredicted=loj_model.predict(x_test)\nconf = confusion_matrix(y_test, predicted)","8caa893d":"print (conf)","ddcda2ab":"accuracy_score(y_test, predicted)","4786938c":"loj_model.coef_","fe96858d":"print(classification_report(y_test, predicted))","f95c0064":"loj_model.predict(x_test)[0:10]","22182a39":"y_test","5d6138ea":"loj_model.predict_proba(x_train)[0:10]","3c2d19c6":"logit_roc_auc = roc_auc_score(y_test,loj_model.predict(x_test))\n\nfpr, tpr, thresholds = roc_curve(y_test, loj_model.predict_proba(x_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label=\"AUC (area = %0.2f)\" % logit_roc_auc)\nplt.plot([0, 1], [0, 1],\"r--\")\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel(\"False Positive Oran\u0131\")\nplt.ylabel(\"True Positive Oran\u0131\")\nplt.title(\"ROC\")\nplt.show()","7f85716e":"cross_val_score(loj_model, x_test, y_test, cv = 10).mean()","fc646cd1":"knn = KNeighborsClassifier()\nknn_model = knn.fit(x_train, y_train)\nknn_model","c9278d64":"y_pred = knn_model.predict(x_test)","909733b9":"accuracy_score(y_test, y_pred)","424fb0f3":"print(classification_report(y_test, y_pred))","2a4690b1":"conf = confusion_matrix(y_test, y_pred)\n","d962309d":"print(conf)","07a6e86d":"rf_model = RandomForestClassifier().fit(x_train, y_train)","ae9edcdc":"rf_model","cbfea901":"y_pred = rf_model.predict(x_test)\naccuracy_score(y_test, y_pred)","1c5dd3b9":"rf_params = {\"max_depth\": [2,4,6,8,10],\n            \"max_features\": [2,4,6,8,10],\n            \"n_estimators\": [10,500,1000],\n            \"min_samples_split\": [2,4,6,8,10]}","f5b1d80a":"rf_model = RandomForestClassifier()\n\nrf_cv_model = GridSearchCV(rf_model, \n                           rf_params, \n                           cv = 10, \n                           n_jobs = -1, \n                           verbose = 2) ","6f4a3e2c":"rf_cv_model.fit(x_train, y_train)","7ab4933a":"print(\"best params \" + str(rf_cv_model.best_params_))","adafb2a3":"rf_tuned = RandomForestClassifier(max_depth = 2, \n                                  max_features = 2, \n                                  min_samples_split = 4,\n                                  n_estimators = 10)\n\nrf_tuned.fit(x_train, y_train)","02ffdfcb":"y_pred = rf_tuned.predict(x_test)\naccuracy_score(y_test, y_pred)","66c1380d":"knn_params = {\"leaf_size\" : [10,20,30,40,50,60],\n            \"n_neighbors\" : [10,20,30,40,50,60],\n            \"p\": [1,2]\n             }","a032cea6":"knn = KNeighborsClassifier()\nknn_cv = GridSearchCV(knn, knn_params, cv=10)\nknn_cv.fit(x_train, y_train)","c7eb1157":"print(\"best acc :\" + str(knn_cv.best_score_))\nprint(\"best params: \" + str(knn_cv.best_params_))","028261ca":"knn_tuned = KNeighborsClassifier(leaf_size=10,n_neighbors=30 , p= 1  )\nknn_tuned = knn.fit(x_train, y_train)","d6031791":"knn_tuned.score(x_test, y_test)","721b386c":"y_pred = knn_tuned.predict(x_test)","59c1961b":"accuracy_score(y_test, y_pred)","8e7a8f96":"knn_tuned_roc_auc = roc_auc_score(y_test,knn_tuned.predict(x_test))\n\nfpr, tpr, thresholds = roc_curve(y_test, knn_tuned.predict_proba(x_test)[:,1])\nplt.figure()\nplt.plot(fpr, tpr, label=\"AUC (area = %0.2f)\" % knn_tuned_roc_auc)\nplt.plot([0, 1], [0, 1],\"r--\")\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel(\"False Positive Oran\u0131\")\nplt.ylabel(\"True Positive Oran\u0131\")\nplt.title(\"ROC\")\nplt.show()","5be8e3dc":"svm_model = SVC(kernel = \"linear\").fit(x_train, y_train)\n\nsvm_model","8d5967cb":"y_pred = svm_model.predict(x_test)","f2ef67da":"accuracy_score(y_test, y_pred)","0615326a":"svc = SVC(kernel = \"linear\")","26211b0f":" svc_params={\"C\": [0.1,1, 10, 100], \"gamma\": [1,0.1,0.01,0.001],\"kernel\": ['rbf', 'poly', 'sigmoid']}","07aa0103":"svc_cv_model = GridSearchCV(svc,svc_params, \n                            cv = 10, \n                            n_jobs = -1, \n                            verbose = 2 )\n\nsvc_cv_model.fit(x_train, y_train)","c42defd9":"print(\"BEST PARAMS: \" + str(svc_cv_model.best_params_))","9d63b935":"svc_tuned = SVC(kernel = \"rbf\", C = 10 , gamma= 0.01).fit(x_train, y_train)","0ffdb5f8":"y_pred = svc_tuned.predict(x_test)\naccuracy_score(y_test, y_pred)","54f918c4":"# Model Tuning","f8478a45":"# LogisticRegression","b1dc36b1":"# KNN","08499a16":"# SVM","d5899e01":"# Model Tuning","883cc190":"# Random Forests","32a413a2":"# data preprocessing\n","0df5c247":"# Model Tuning","8965930a":"# DATA SCALE"}}