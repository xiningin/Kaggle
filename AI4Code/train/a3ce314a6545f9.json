{"cell_type":{"e30f983a":"code","ca1995ee":"code","7e7c3f88":"code","8070e603":"code","e3656085":"code","c9f07cdd":"code","e9a5780b":"code","6fe4512c":"code","964e3a98":"code","5cbdf095":"code","b93f2360":"code","ca129002":"code","7e96a705":"code","11f31baf":"code","c24b56e8":"code","5ad89143":"code","83d6f438":"markdown","acd1ee8a":"markdown"},"source":{"e30f983a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca1995ee":"import pandas as pd\ndata1=pd.read_csv(\"\/kaggle\/input\/movies-dataset-for-feature-extracion-prediction\/movies.csv\")\ndata1.head()","7e7c3f88":"data1.describe(include=\"all\")","8070e603":"data1.info","e3656085":"data1.isna().sum()","c9f07cdd":"remove=[]\nfor i in data1.columns:\n    if data1[i].isnull().sum()>len(data1)\/2:\n        remove.append(i)\n    elif data1[i].isnull().sum()!=0:\n        data1[i].fillna(method=\"ffill\",inplace=True)\ndata1.drop(remove,axis=1,inplace=True)","e9a5780b":"data1[\"YEAR\"]=data1[\"YEAR\"].str.replace(\"\\D\",\"\")\ndata1[\"YEAR\"]=data1[\"YEAR\"].map(lambda x:list(str(x)[:4])).map(lambda x:\"\".join(x))","6fe4512c":"data1[\"STARS\"]=data1[\"STARS\"].str.replace(\"\\n\",\"\")","964e3a98":"data1[\"GENRE\"]=data1[\"GENRE\"].apply(lambda x:str(x).strip(\"\\n\"))","5cbdf095":"data1[\"ONE-LINE\"]=data1[\"ONE-LINE\"].apply(lambda x:str(x).strip(\"\\n\"))","b93f2360":"from sklearn.feature_extraction.text import TfidfVectorizer\ntfidf = TfidfVectorizer(stop_words='english')","ca129002":"tfidf_matrix = tfidf.fit_transform(data1[\"ONE-LINE\"])","7e96a705":"from sklearn.metrics.pairwise import linear_kernel\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)","11f31baf":"indices=pd.Series(data1.index, index=data1['MOVIES']).drop_duplicates()","c24b56e8":"def get_recommendations(title, cosine_sim=cosine_sim):\n    \n    idx = indices[title]\n\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    sim_scores = sim_scores[1:11]\n\n    movie_indices = [i[0] for i in sim_scores]\n\n    return data1['MOVIES'].iloc[movie_indices]","5ad89143":"get_input=\"Sweet Tooth\"  #give (Sweet Tooth,Tidelands)\nget_recommendations(get_input)","83d6f438":"# BUILD RECOMMENDATION SYSTEM","acd1ee8a":"# **FEATURE ENGINEERING**"}}