{"cell_type":{"b4bb6903":"code","e9fa1dc0":"code","68bb8a14":"code","95feeca8":"code","f6699b7f":"code","79a50db0":"code","ed3ed35d":"code","65767551":"code","95321cbd":"code","20bd9f19":"code","d3671dd3":"code","113132f2":"code","90883010":"code","c22addfb":"code","09664ed4":"code","403fefe7":"code","e9d0edb6":"code","c0ea6f0d":"code","f2b11994":"code","64833fe4":"code","07c3aec2":"code","e1e68f39":"code","cc465d48":"code","7108ebf4":"code","d32f2827":"code","e826fb45":"markdown","e133517d":"markdown","62526037":"markdown","ad8e1884":"markdown","46c52176":"markdown","14fabf57":"markdown","ed953ed6":"markdown","17927839":"markdown","df612dd1":"markdown","18267c45":"markdown","cd71d526":"markdown"},"source":{"b4bb6903":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","e9fa1dc0":"train = pd.read_csv('..\/input\/titanic\/train.csv')\ntest = pd.read_csv('..\/input\/titanic\/test.csv')\nsubmission = pd.read_csv('..\/input\/titanic\/gender_submission.csv')\ntest['Survived']= submission['Survived']\n\n# Combine Train and Test Datasets for Data Cleaning\ndf = pd.concat([test.assign(ind=\"test\"), train.assign(ind=\"train\")])","68bb8a14":"df.head(2)","95feeca8":"[train.shape , test.shape , submission.shape]","f6699b7f":"df.info()","79a50db0":"sns.barplot(data=df, x='Sex', y= 'Survived')","ed3ed35d":"sns.countplot(data=df, x='Survived')","65767551":"sns.scatterplot(data=df, x='Age', y='Fare', hue='Survived')","95321cbd":"sns.pairplot(data = train,hue='Survived')","20bd9f19":"# Deal with \"Cabin\" Column\ndf = df.drop(['Cabin'] , axis=1)\n\n# Some columns have no effect on survival so we remove them:\ndf = df.drop(['PassengerId'] , axis=1)\ndf = df.drop(['Ticket'] , axis=1)\ndf = df.drop(['Name'] , axis=1)\n\n# Deal with \"Age\" Column\ndf = df.dropna(axis=0, subset=['Age'])\n\n# We have some null in Embarked and Fare columns:\ndf = df.dropna(axis=0, subset=['Embarked'])\ndf = df.dropna(axis=0, subset=['Fare'])\n\n# Dealing with Categorical Data\ndf['Pclass'] = df['Pclass'].apply(str)\n\n# Convert All Object type to One hot encoding\n\n# START ONE HOT ENCODING\ndf_num = df.select_dtypes(exclude='object')\ndf_obj = df.select_dtypes(include='object')\nnon_dummy_cols = ['ind']\ndummy_cols = list(set(df_obj.columns) - set(non_dummy_cols))\ndf_obj = pd.get_dummies(df_obj, columns=dummy_cols, drop_first=True)\ndf = pd.concat([df_num, df_obj], axis = 1)\n# END ONE HOT ENCODING\n\n# Split Test data from df\ntest, train = df[df[\"ind\"].eq(\"test\")], df[df[\"ind\"].eq(\"train\")]\n\n# We should Drop indicator Column from test and train dataframes:\ntest= test.drop(['ind'], axis=1)\ntrain= train.drop(['ind'], axis=1)","d3671dd3":"# Split the Data to Train & Test\nX_test, y_test = test.drop(columns='Survived').copy(), test['Survived'].copy()\nX_train, y_train = train.drop(columns='Survived').copy(), train['Survived'].copy()","113132f2":"from sklearn.tree import DecisionTreeClassifier","90883010":"model = DecisionTreeClassifier()","c22addfb":"model.fit(X_train,y_train)","09664ed4":"y_pred = model.predict(X_test)","403fefe7":"from sklearn.metrics import confusion_matrix,classification_report","e9d0edb6":"confusion_matrix(y_test,y_pred)","c0ea6f0d":"print(classification_report(y_test,y_pred))","f2b11994":"model.feature_importances_","64833fe4":"pd.DataFrame(index=X_train.columns,data=model.feature_importances_,columns=['Feature Importance'])","07c3aec2":"def report_model(model):\n    model_preds = model.predict(X_test)\n    print(classification_report(y_test,model_preds))\n    print('\\n')\n    plt.figure(figsize=(12,8),dpi=72)\n    plot_tree(model,filled=True,feature_names=X_train.columns);","e1e68f39":"pruned_tree = DecisionTreeClassifier(max_depth=2)\npruned_tree.fit(X_train,y_train)","cc465d48":"report_model(pruned_tree)","7108ebf4":"pruned_tree = DecisionTreeClassifier(max_leaf_nodes=3)\npruned_tree.fit(X_train,y_train)","d32f2827":"report_model(pruned_tree)","e826fb45":"# Reporting Model Results","e133517d":"# Import Dataset","62526037":"# Evaluating the Model","ad8e1884":"# Train the Model","46c52176":"# Determine the Features & Target Variable","14fabf57":"# Predicting Test Data","ed953ed6":"# Titanic Decision Tree\n\n## Decision Trees\n\nDecision Trees (DTs) are a non-parametric supervised learning method used for classification and regression. The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred from the data features. A tree can be seen as a piecewise constant approximation.\n\nFor instance, in the example below, decision trees learn from data to approximate a sine curve with a set of if-then-else decision rules. The deeper the tree, the more complex the decision rules and the fitter the model.\n\n![Decision Trees](https:\/\/scikit-learn.org\/stable\/_images\/sphx_glr_plot_tree_regression_001.png)\n\n### Some advantages of decision trees are:\n\n* Simple to understand and to interpret. Trees can be visualised.\n\n* Requires little data preparation. Other techniques often require data normalisation, dummy variables need to be created and blank values to be removed. Note however that this module does not support missing values.\n\n* The cost of using the tree (i.e., predicting data) is logarithmic in the number of data points used to train the tree.\n\n* Able to handle both numerical and categorical data. However scikit-learn implementation does not support categorical variables for now. Other techniques are usually specialised in analysing datasets that have only one type of variable. See algorithms for more information.\n\n* Able to handle multi-output problems.\n\n* Uses a white box model. If a given situation is observable in a model, the explanation for the condition is easily explained by boolean logic. By contrast, in a black box model (e.g., in an artificial neural network), results may be more difficult to interpret.\n\n* Possible to validate a model using statistical tests. That makes it possible to account for the reliability of the model.\n\n* Performs well even if its assumptions are somewhat violated by the true model from which the data were generated.\n\n([Read more about decision trees here](https:\/\/scikit-learn.org\/stable\/modules\/tree.html))","17927839":"# Data Cleaning\nI did this part with details on [this notebook](https:\/\/www.kaggle.com\/sajjadnajafi\/logistic-regression-titanic\/).","df612dd1":"# Max Leaf Nodes","18267c45":"# EDA","cd71d526":"# Data Overview"}}