{"cell_type":{"2de54ad4":"code","94a05625":"code","49ae4886":"code","c4f0f7ba":"code","61b2cec9":"code","127536c8":"code","32a91cf3":"code","3521a25e":"code","ee259dd8":"code","8eecbc1c":"code","8b9cb6e3":"code","c35147af":"code","6d349249":"code","3b2935a5":"code","b688031f":"code","9b651839":"code","5cc74e13":"code","afdcc9b6":"code","6150306c":"code","6fefd51a":"code","b6d7879a":"code","f9be9b0d":"code","0c1ffd99":"code","26f053e8":"code","421d755f":"code","cba85a6f":"code","78c2f4b6":"code","9daef6a9":"code","085b88b5":"code","5600a3b4":"code","08c607d3":"code","e53536b6":"markdown"},"source":{"2de54ad4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","94a05625":"df = pd.read_csv(\"..\/input\/fake-news\/train.csv\")","49ae4886":"df.head()","c4f0f7ba":"df = df.dropna()","61b2cec9":"X = df.drop('label' , axis =1)","127536c8":"y = df['label']","32a91cf3":"X.shape","3521a25e":"import tensorflow as tf","ee259dd8":"from tensorflow.keras.layers import Embedding\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import one_hot\nfrom tensorflow.keras.layers import LSTM\nfrom tensorflow.keras.layers import Dense","8eecbc1c":"voc_size = 5000","8b9cb6e3":"messages  = X.copy()","c35147af":"messages['title'][1]","6d349249":" messages.reset_index(inplace=True)","3b2935a5":"import nltk \nimport re\nfrom nltk.corpus import stopwords","b688031f":"nltk.download('stopwords')","9b651839":"### Dataset Preprocessing\nfrom nltk.stem.porter import PorterStemmer\nps = PorterStemmer()\ncorpus = []\nfor i in range(0, len(messages)):\n    print(i)\n    review = re.sub('[^a-zA-Z]', ' ', messages['title'][i])\n    review = review.lower()\n    review = review.split()\n    \n    review = [ps.stem(word) for word in review if not word in stopwords.words('english')]\n    review = ' '.join(review)\n    corpus.append(review)","5cc74e13":"corpus","afdcc9b6":"onehot_repr=[one_hot(words,voc_size)for words in corpus] \nonehot_repr","6150306c":"sent_length=20\nembedded_docs=pad_sequences(onehot_repr,padding='pre',maxlen=sent_length)\nprint(embedded_docs)","6fefd51a":"embedded_docs[0]","b6d7879a":"## Creating model\nembedding_vector_features=40\nmodel=Sequential()\nmodel.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel.add(LSTM(100))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nprint(model.summary())","f9be9b0d":"len(embedded_docs),y.shape","0c1ffd99":"import numpy as np\nX_final=np.array(embedded_docs)\ny_final=np.array(y)","26f053e8":"X_final.shape,y_final.shape","421d755f":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_final, y_final, test_size=0.33, random_state=42)","cba85a6f":"### Finally Training\nmodel.fit(X_train,y_train,validation_data=(X_test,y_test),epochs=200,batch_size=64)","78c2f4b6":"from tensorflow.keras.layers import Dropout\n## Creating model\nembedding_vector_features=40\nmodel=Sequential()\nmodel.add(Embedding(voc_size,embedding_vector_features,input_length=sent_length))\nmodel.add(Dropout(0.3))\nmodel.add(LSTM(100))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1,activation='sigmoid'))\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])","9daef6a9":"y_pred=model.predict_classes(X_test)","085b88b5":"from sklearn.metrics import confusion_matrix","5600a3b4":"confusion_matrix(y_test,y_pred)","08c607d3":"from sklearn.metrics import accuracy_score\naccuracy_score(y_test,y_pred)","e53536b6":"**Onehot Representation**"}}