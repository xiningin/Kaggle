{"cell_type":{"b2cd5c63":"code","e3392488":"code","574a5833":"code","d42ac072":"code","388ce88c":"code","22936d45":"code","9b79607b":"code","29089e2f":"code","a98d9cae":"code","10d743c1":"code","7fc5700c":"code","bc4f211e":"code","cf8e3a60":"code","ad34cec8":"code","4825deb8":"code","317495eb":"code","142c758d":"code","cc75073f":"code","787a60e8":"code","c82f48f8":"code","52bd46b0":"code","d46d31e0":"code","149e0cc5":"code","b4c2f99f":"markdown","cdff4bcc":"markdown","d842a9a9":"markdown","1c24ac2e":"markdown","232693e3":"markdown","b795ddad":"markdown","c812987f":"markdown","66176f66":"markdown","32f05e42":"markdown"},"source":{"b2cd5c63":"import pandas as pd\nimport numpy as np\n\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nimport json\nfrom functools import reduce","e3392488":"credits = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_credits.csv\")\nmovies = pd.read_csv(\"..\/input\/tmdb-movie-metadata\/tmdb_5000_movies.csv\")","574a5833":"# Dataset shape\nprint(\"Credits shape is {}\".format(credits.shape))\nprint(\"Movies shape is {}\".format(movies.shape))\n","d42ac072":"print(credits.columns)\nprint(movies.columns)","388ce88c":"credits.head()","22936d45":"movies.head()","9b79607b":"final_dataset = pd.merge(movies,credits,left_on='id',right_on='movie_id',how='left')","29089e2f":"final_dataset.isnull().sum() ","a98d9cae":"# drop homepage and release_date\nfinal_dataset.drop(['homepage','release_date','runtime'],axis=1,inplace=True)","10d743c1":"final_dataset['overview'].fillna('',inplace=True)\nfinal_dataset['tagline'].fillna('',inplace=True)","7fc5700c":"final_dataset.isnull().sum() ","bc4f211e":"# some of the columns are given in JSON format, We should convert this to Dictinary using json.loads method\n\ndef convertJson(y):\n    y = json.loads(y)\n    return \" \".join([val['name'] for val in y])\nfinal_dataset['genres'] = final_dataset['genres'].apply(convertJson)\nfinal_dataset['keywords'] = final_dataset['keywords'].apply(convertJson)\nfinal_dataset['production_companies'] = final_dataset['production_companies'].apply(convertJson)\nfinal_dataset['production_countries'] = final_dataset['production_countries'].apply(convertJson)","cf8e3a60":"final_dataset.drop(['id','spoken_languages','status','budget','popularity','revenue','vote_average','vote_count','crew'],inplace=True,axis=1)","ad34cec8":"final_dataset['genres']","4825deb8":"# Top 5 cast does better prediction\ndef get_cast(y):\n    y = json.loads(y)\n    return \" \".join([val['character']+\" \"+ val['name'] for val in y[:5]])\nfinal_dataset['cast'] = final_dataset['cast'].apply(get_cast)","317495eb":"columns = ['original_language','original_title','overview',\\\n              'production_countries','tagline','title_x','title_y','cast']\nfinal_dataset['title'] = final_dataset['title_x']\nfinal_dataset['keywords'] = final_dataset[['keywords','genres','production_companies'] + columns].apply(\" \".join,axis=1)\nfinal_dataset.drop(columns,inplace=True,axis=1)","142c758d":"final_dataset.head()","cc75073f":"# stop words will remove the common english words like a,an,the,i,me,my etc which increase the words count and \n# create noise in our model \n\nc_vect = TfidfVectorizer()\nX = c_vect.fit_transform(final_dataset['keywords'])","787a60e8":"# There are other similiary distance metric available which are euclidean distance,manhattan distance, \n# Pearson coefficient etc. But for sparse matrix cosine similarity works better\ncosine_sim = cosine_similarity(X)","c82f48f8":"def get_movie_recommendation(movie_name):\n    idx = final_dataset[final_dataset['title'].str.contains(movie_name)].index\n    if len(idx):\n        sorted_list_indices = sorted(list(enumerate(cosine_sim[idx[0]])), key=lambda x: x[1], reverse=True)[1:11]\n        sorted_list_indices = list(map(lambda x:x[0],sorted_list_indices))\n        return sorted_list_indices\n    else : \n        return []","52bd46b0":"title = \"The Avengers\"\nrecommended_movie_list = get_movie_recommendation(title)\nfinal_dataset.loc[recommended_movie_list,['title','genres']]","d46d31e0":"final_dataset.loc[[3, 65, 3854]]","149e0cc5":"title = \"The Dark Knight Rises\"\nrecommended_movie_list = get_movie_recommendation(title)\nfinal_dataset.loc[recommended_movie_list,['title','genres']]","b4c2f99f":"All keywords are in english. Our model can understand only numbers so We'll convert the keywords into sparse matrix form using either CountVectorizer or TfidfVectorizer. CountVectorizer just counts the words appear, there is a high chances that missing the rare words which could have helped for predicting the model effectively. So We'll use TfidfVectorizer which counts the frequency of the words and normalize them and this is mostly recommended.","cdff4bcc":"### Power of Recommendation Engine\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Suppose You're planning to buy a laptop without any idea about the right configuration. So You would check with Your friends and colleagues for recommendation and they suggests laptops based on Your requirement , their knowledge and trending one. The same way Recommendation engine works. For instance, Amazon recommends You a laptop based on Your previous search , popularity and keeps on showing the best recommendation and tempt You to buy a laptop even if You drop the plan. All the major company has recommendation in their products such as Youtube shows recommendations based on Your interests and activity.\n\nWe'll explore how to implement it, before that there are two types of Recommendation Engine\n\n1. **Content Based Filtering**\n2. **Collabarative Based Filtering**\n\n#### Content Based Filtering\nThis algorithm recommends products which are similar to the ones that a user has liked in the past.\n\n#### Collabaratvie Based Filtering\nThe collaborative filtering algorithm uses \u201cUser Behavior\u201d for recommending items.","d842a9a9":"I'm writing my other kernel for collabarative filtering. Will update once it is completed.\n\n**Please upvote it if you like it. Thanks**","1c24ac2e":"Implementation is so simple, We're going to combine all features and create a bulk of keywords for each movie from the given datasets and find similarity between each movie and popup the top similar movies","232693e3":"#### Data Preprocessing","b795ddad":"Our system predicts exactly the similar movies for Avengers with list of all marvel movies and for dark knight with list of DC movies.\n\nMajor drawback of this approach is that it predicts the same lists of movie for all the user who search Avengers irrespective of their interest and their likes. So we need an algorithm to predict based on User behaviour for that We'll use collabrative filtering.","c812987f":"**Our task is When User search a movie, We'll recommend the top 10 similar movies**","66176f66":"*In this Kernel, we shall look at Content Based Filtering implementation*","32f05e42":"movie_id in credits and id in movie datasets are same using that we'll combine both the dataset"}}