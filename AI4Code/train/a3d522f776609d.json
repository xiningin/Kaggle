{"cell_type":{"ced2bfbd":"code","1a9b3fcd":"code","67cb0389":"code","dc0d4dfc":"code","2c0dc5d5":"code","68eab554":"code","1bd6dcec":"code","e326a005":"code","631d20f9":"code","a1456349":"code","320a9d88":"code","c14a0d30":"code","ce546cb8":"code","a854b803":"code","1a53e88f":"code","bd234174":"code","3cefadb6":"code","84c71196":"code","8af39c0f":"code","6b6185aa":"code","d433cad8":"code","3f7057eb":"code","f4ae043d":"code","dcbdbb2e":"code","8fb347e0":"code","0f87a447":"code","7cf968a1":"code","45504454":"code","9a5804c0":"code","b4cf104e":"markdown","96e3f70f":"markdown","fbbce0a5":"markdown","af0b5367":"markdown","9e201dca":"markdown","589940cc":"markdown","76dd54b3":"markdown","c319734d":"markdown"},"source":{"ced2bfbd":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np","1a9b3fcd":"df1 = pd.read_csv(\"..\/input\/customer-modified-with-noise\/customer .csv\", sep = \",\" , encoding=\"utf-8\")","67cb0389":"df2 = df1.copy()\n# Copying original df into another one to edit and compare them","dc0d4dfc":"df1.info()","2c0dc5d5":"df1.head()\n# Getting a general idea of how the data looks","68eab554":"df1.isnull().sum()\n# The number of null values is small\n# in comparison to the size of data","1bd6dcec":"plt.figure(figsize=(12,8))\nsns.heatmap(df1.isnull(), cbar = False)\n# It is clear that dropping nulls will\n# have minimal effect on the accuracy of the data","e326a005":"df2.dropna(inplace = True)","631d20f9":"plt.figure(figsize=(8,8))\nsns.heatmap(df2.isnull(), cbar = False)\n# No more null values","a1456349":"df2.info()\n# So many object type features, need to be \n# converted to numerical","320a9d88":"# Checking the values of non-numerical features\nprint(\"Genders: \", df2['gender'].unique())\nprint(\"Partner: \", df2['Partner'].unique())\nprint(\"Dependents: \", df2['Dependents'].unique())\nprint(\"Phone service: \", df2['PhoneService'].unique())\nprint(\"Multiple lines service: \", df2['MultipleLines'].unique())\nprint(\"Internet service: \", df2['InternetService'].unique())\nprint(\"Online security: \", df2['OnlineSecurity'].unique())\nprint(\"Online backup: \", df2['OnlineBackup'].unique())\nprint(\"Device protection: \", df2['DeviceProtection'].unique())\nprint(\"Tech support: \", df2['TechSupport'].unique())\nprint(\"Streaming TV: \", df2['StreamingTV'].unique())\nprint(\"Streaming movies: \", df2['StreamingMovies'].unique())\nprint(\"Contract: \", df2['Contract'].unique())\nprint(\"Paperless billing: \", df2['PaperlessBilling'].unique())\nprint(\"Payment method: \", df2['PaymentMethod'].unique())\nprint(\"Churn: \", df2['Churn'].unique())","c14a0d30":"# Converting data types into integers\n# It might've been better to use one-hot encoding instead\n\n# Converting gender\ndf2.replace(\"Female\", 1 , inplace = True)\ndf2.replace(\"Male\", 0 , inplace = True)\n\n# Converting partner, dependents, PhoneService, MultipleLines, InternetService,\n# OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport, StreamingTV\n# StreamingMovies, PaperlessBilling, Churn\ndf2.replace(\"Yes\", 1 , inplace = True)\ndf2.replace(\"No\", 0 , inplace = True)\ndf2.replace(\"No phone service\", 2 , inplace = True) # For multiple lines\ndf2.replace(\"No internet service\", 2 , inplace = True) # For online security, OnlineBackup, DeviceProtection,\n                                                      # TechSupport, StreamingTV, StreamingMovies\n\n# For Internet Service\ndf2.replace(\"DSL\", 1 , inplace = True)\ndf2.replace(\"Fiber optic\", 2 , inplace = True)\n\n# For Contract\ndf2.replace(\"Month-to-month\", 0 , inplace = True)\ndf2.replace(\"One year\", 1 , inplace = True)\ndf2.replace(\"Two year\", 2 , inplace = True)\n\n# For PaymentMethod\ndf2.replace(\"Electronic check\", 0 , inplace = True)\ndf2.replace(\"Mailed check\", 1 , inplace = True)\ndf2.replace(\"Bank transfer (automatic)\", 2 , inplace = True)\ndf2.replace(\"Credit card (automatic)\", 3 , inplace = True)\n","ce546cb8":"df2.info()\n# Now they are all of numeric types","a854b803":"df2.duplicated().sum()\n# No duplicated values","1a53e88f":"plt.figure(figsize=(20,17))\nsns.heatmap(df2.corr(), cbar = True,annot = True, cmap='YlGnBu', linewidths=1, linecolor='black')","bd234174":"round(df2['Churn'].value_counts()\/df2.shape[0]*100,2).plot.pie()","3cefadb6":"df2.hist(bins=120 , figsize=(14,16))\nplt.show()\n# Checking data after change","84c71196":"plt.scatter(data = df2 , x=\"InternetService\" , y=\"TotalCharges\" , c =df2[\"Churn\"], cmap = 'RdPu', alpha = 0.3)\nplt.colorbar ()\nplt.show()\n# People using fiber have higher churn rates","8af39c0f":"plt.scatter(data = df2 , x=\"OnlineSecurity\" , y=\"MonthlyCharges\" , c =df2[\"Churn\"], cmap = 'Greens', alpha = 0.2)\nplt.colorbar ()\nplt.show()\n# Most people with high churn rates have No security","6b6185aa":"# Checking outliers\ndf2.plot(kind = \"box\" , subplots = True , figsize = (18,18) ,  layout = (10,4))\nplt.show()\n# Senior Citizen: Most citizens are not senior (more than 75%)\n# so all senior citizens are considered outliers\n# As for Phone Service, the exact opposite of that happened","d433cad8":"X = df2.drop([\"Churn\", \"TotalCharges\", \"customerID\"], axis = 1).values\n# Removed total charges as it is greatly related to monthly charges\n# and CustomerID as it does not affect churn\ny = df2['Churn'].values","3f7057eb":"from sklearn.model_selection import train_test_split\nX_train,X_test,Y_train,Y_test = train_test_split(X,y, test_size=0.3 , random_state=42)","f4ae043d":"from sklearn.preprocessing import StandardScaler\nscale = StandardScaler ()\nX_train = scale.fit_transform(X_train)\nX_test = scale.fit_transform(X_test)\n# Scaling the data before fitting","dcbdbb2e":"from sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators= 8,max_depth=8,  max_features=9, random_state=42)\nrf.fit(X_train,Y_train)\nrf.score(X_train,Y_train)","8fb347e0":"rf.score(X_test,Y_test)\n# This yields a reasonable score, without overfitting\n# It might've yielded an even better score if one-hot encoding\n# was used instead","0f87a447":"# Graphing the predicted against the actual\n# To check the accuracy practically\nY_pred = rf.predict(X_test)\ntest = pd.DataFrame({'Predicted_Y':Y_pred, 'Actual_Y':Y_test})\nfig = plt.figure(figsize=(15,8))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nplt.plot(test[120:170])\nplt.legend(['Actual_Y','Predicted_Y'])","7cf968a1":"from sklearn.tree import DecisionTreeClassifier\nTre= DecisionTreeClassifier()\nTre.fit(X_train,Y_train)\nTre.score(X_train,Y_train)\n# High chance of overfitting","45504454":"Tre.score(X_test,Y_test)\n# The difference between 2 scores is rather big\n# This is a result of overfitting","9a5804c0":"# Graphing the predicted against the actual\n# To check the accuracy practically\nY_pred = Tre.predict(X_test)\ntest = pd.DataFrame({'Predicted_Y':Y_pred, 'Actual_Y':Y_test})\nfig = plt.figure(figsize=(15,8))\ntest = test.reset_index()\ntest = test.drop(['index'],axis=1)\nplt.plot(test[1100:1150])\nplt.legend(['Actual_Y','Predicted_Y'])","b4cf104e":"# EDA","96e3f70f":"# Training the dataset using two different models","fbbce0a5":"# Importing the necessary libraries","af0b5367":"# Getting meaningful insight regarding data","9e201dca":"# Reading the data","589940cc":"# Checking for duplicated values","76dd54b3":"# Converting Data types into numeric","c319734d":"# Data preprocessing"}}