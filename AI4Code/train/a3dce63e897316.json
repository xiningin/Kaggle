{"cell_type":{"3a8e1a09":"code","eacc9822":"code","b7f3af1d":"code","aa03d296":"code","0ce6a026":"code","bcf5ca50":"code","19b143da":"code","7241e802":"code","3c99d586":"code","0e8b3c88":"code","7e88aea4":"code","35fb93a1":"code","c57c3d43":"code","c46b7ee3":"code","af956027":"code","574b24ef":"code","9a32d96e":"code","93d80dad":"code","aa90a9fd":"code","f8b5df59":"code","d52f4eab":"code","2cea8564":"code","18c85bbe":"code","c4818966":"code","cd938c31":"code","2ec24de8":"code","3e1bf718":"code","907a5850":"code","961d0244":"code","db2c48b7":"code","11950c1f":"code","4575b9ea":"code","5e420ef1":"code","641c8005":"code","4cb3127c":"code","703d0a79":"code","dcce4596":"code","961db9c6":"code","6a9a473c":"code","ab90250a":"code","83f8892c":"code","d26c4fc4":"code","46290305":"code","141d1c47":"code","6c6c4bfc":"code","d7454b47":"code","6ce4c1c8":"code","6c60e70e":"code","792ba7ba":"code","329ab17b":"code","d2c0437d":"code","0ed07b05":"code","575534a7":"code","542b092f":"code","4caa0550":"code","8cc02d88":"code","fb9fc9ba":"code","91cfdb62":"code","4d40beaa":"code","cc09000f":"code","590614c4":"code","e7937d75":"code","6979558b":"code","d84ab65d":"code","be8b1a2b":"code","6de656f9":"code","eeffbf50":"code","c2ee1164":"code","8a3bfe73":"code","7dc67a5f":"code","86f1f488":"code","455f1c48":"code","e4ded4f6":"code","d934080c":"code","986550dc":"code","de388875":"code","512439f7":"code","aea2b50c":"code","ba124d8b":"code","49241e28":"code","15c172ac":"code","a8e70a19":"code","11cc4a40":"code","216f26f4":"code","a07f5066":"code","62226fe8":"code","676d21c2":"code","10915b15":"code","d3a639b5":"code","25f674f1":"code","231a16c3":"code","71068259":"code","4ced7454":"code","d1305d4e":"code","53de012f":"code","4068fe0a":"code","64ebc611":"code","99ac3373":"code","26ffa17d":"code","e356a079":"code","f8038437":"code","1b4ff795":"code","6dd690db":"markdown","a79a27c0":"markdown","1b8fa84b":"markdown","da443257":"markdown","b8c252e5":"markdown","2d1e0d7e":"markdown","1f34b7eb":"markdown","bc351ef7":"markdown","83db88de":"markdown","de0c0f16":"markdown","2fd6b0d1":"markdown","73105eab":"markdown","8c613681":"markdown","03f383e0":"markdown","1bcdfe45":"markdown","d9f82e0a":"markdown","7dfc448e":"markdown","f7786b23":"markdown","496abcc3":"markdown","5b5b82ef":"markdown","5aa4f330":"markdown","1f81cb49":"markdown","aa97dea8":"markdown","e3500143":"markdown","0a993e34":"markdown","d6cebe96":"markdown","d3779787":"markdown","32b31a2e":"markdown","a3689b2a":"markdown","603d210e":"markdown"},"source":{"3a8e1a09":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra|\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n#Sklearn\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.tree import export_graphviz\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing\" Shift+Enter) will list the files in the input directory\nimport ast\nimport datetime\nfrom tqdm import tqdm\nimport os\nprint(os.listdir(\"..\/input\"))\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 25, 10\n# Any results you write to the current directory are saved as output.\nimport xgboost as xgb\n","eacc9822":"train=pd.read_csv(\"..\/input\/train.csv\")\ntest=pd.read_csv(\"..\/input\/test.csv\")\n","b7f3af1d":"train.head()","aa03d296":"test.head()","0ce6a026":"def getting_from_dicts(i,column='name'):\n\n    if pd.isna(i):\n        #print(i,'nan')\n        return 'NaN'\n    elif i=='[]':\n        return 'NaN'\n    elif type(ast.literal_eval(i[1:-1]))==dict:\n        #print(i,'dict')\n        return ast.literal_eval(i[1:-1])[column] \n    elif type(ast.literal_eval(i[1:-1]))==tuple:\n        #print(i,'tuple')\n        genres_of_cinema=[]\n        for ii in range(len(ast.literal_eval(i[1:-1]))):\n            genres_of_cinema.append(ast.literal_eval(i[1:-1])[ii][column])\n        return genres_of_cinema\n    ","bcf5ca50":"train_genres=pd.DataFrame()\ntest_genres=pd.DataFrame()\ntrain_genres['genres_list']=train.genres.apply(getting_from_dicts)\ntest_genres['genres_list']=test.genres.apply(getting_from_dicts)","19b143da":"train_genres['genres_list']","7241e802":"type(train_genres['genres_list'][2])","3c99d586":"test_genres['genres_list'].head()","0e8b3c88":"def creating_columns(dateframe,column='genres_list'):\n    genres=pd.Series()\n    for i in tqdm(range(dateframe[column].shape[0])):\n        if type(dateframe.at[i,column])==list:\n            for ii in range(len(dateframe.at[i,column])):\n                genres=genres.append(pd.Series(dateframe.at[i,column][ii]))\n        elif type(dateframe.at[i,column])==str:\n            genres=genres.append(pd.Series(dateframe.at[i,column]))\n    # creating columns\n    for i in tqdm(genres.unique()):\n        dateframe[i]=pd.Series(np.zeros(shape=(dateframe.shape[0],)))\n    #filling columns\n    for i in tqdm(range(dateframe[column].shape[0])):\n        if type(dateframe.at[i,column])==list:\n            for ii in range(len(dateframe.at[i,column])):\n                dateframe.at[i,dateframe.at[i,column][ii]]=1\n        elif type(dateframe[column].iloc[i])==str:\n            dateframe.at[i,dateframe.at[i,column]]=1","7e88aea4":"train_cast=pd.DataFrame()\ntest_cast=pd.DataFrame()\ntrain_cast['cast_list']=train.cast.apply(getting_from_dicts)\ntest_cast['cast_list']=test.cast.apply(getting_from_dicts)","35fb93a1":"def creatin_zero_col(train,test):\n    for i in test.columns.symmetric_difference(train.columns):\n        train[i]=pd.Series(np.zeros(shape=(train.shape[0],)))\n    for i in train.columns.symmetric_difference(test.columns):\n        test[i]=pd.Series(np.zeros(shape=(test.shape[0],)))","c57c3d43":"creating_columns(train_genres)\ncreating_columns(test_genres)","c46b7ee3":"creating_columns(train_cast,column='cast_list')\ncreating_columns(test_cast,column='cast_list')","af956027":"train_cast.head()","574b24ef":"train_cast.columns","9a32d96e":"test_cast.head()","93d80dad":"test_cast.columns","aa90a9fd":"test_genres.columns.symmetric_difference(train_genres.columns)","f8b5df59":"creatin_zero_col(train_genres,test_genres)","d52f4eab":"test_genres.columns.symmetric_difference(train_genres.columns)","2cea8564":"train_genres.drop(columns='genres_list',inplace=True)\ntest_genres.drop(columns='genres_list', inplace=True)","18c85bbe":"train_cast.drop('cast_list',axis=1,inplace=True)","c4818966":"train_cast.columns","cd938c31":"cast_stat=train_cast.apply(pd.value_counts)","2ec24de8":"top_cast=cast_stat.T[cast_stat.T[1.0]>17].index","3e1bf718":"train_cast=train_cast[top_cast]\ntrain_cast.drop('NaN',axis=1,inplace=True)","907a5850":"test_cast=test_cast[top_cast]\ntest_cast.drop('NaN',axis=1,inplace=True)","961d0244":"plt.figure(figsize=(40, 10))\nsns.barplot(data=train_cast[train_cast.columns[:24]])\n","db2c48b7":"plt.figure(figsize=(40, 10))\nsns.barplot(data=train_cast[train_cast.columns[24:]])\n","11950c1f":"plt.figure(figsize=(25, 6))\nsns.barplot(data=train_genres)","4575b9ea":"plt.figure(figsize=(23, 6))\nsns.barplot(data=test_genres, label='test Dataset')","5e420ef1":"train_spoken=pd.DataFrame()\ntest_spoken=pd.DataFrame()\ntrain_spoken['spoken_languages_list']=train.spoken_languages.apply(getting_from_dicts,args=('iso_639_1',))\ntest_spoken['spoken_languages_list']=test.spoken_languages.apply(getting_from_dicts,args=('iso_639_1',))\ncreating_columns(train_spoken,column='spoken_languages_list')\ncreating_columns(test_spoken,column='spoken_languages_list')","641c8005":"train_spoken.columns.symmetric_difference(test_spoken.columns)","4cb3127c":"creatin_zero_col(train_spoken,test_spoken)","703d0a79":"train_spoken.columns.symmetric_difference(test_spoken.columns)","dcce4596":"train_spoken.drop(columns='spoken_languages_list',inplace=True)\ntest_spoken.drop(columns='spoken_languages_list',inplace=True)","961db9c6":"print('spoken english train {} %, spoken english test {} %'.format(round(train_spoken.en.value_counts().iloc[0]\/train_spoken.shape[0],2)*100,round(test_spoken.en.value_counts().iloc[0]\/test_spoken.shape[0],2)*100))\n","6a9a473c":"plt.subplot(221)\nplt.title('train')\n\ntrain_spoken.en.value_counts().plot.bar()\n\nplt.subplot(222)\n\ntest_spoken.en.value_counts().plot.bar()\nplt.title('test')\nplt.show()","ab90250a":"train_companies=pd.DataFrame()\ntest_companies=pd.DataFrame()\ntrain_companies['companies']=train.production_companies.apply(getting_from_dicts)\ntest_companies['companies']=test.production_companies.apply(getting_from_dicts)\ncreating_columns(train_companies,column='companies')\ncreating_columns(test_companies,column='companies')\ntrain_companies.drop(columns='companies',inplace=True)\ntest_companies.drop(columns='companies',inplace=True)","83f8892c":"train_companies.head()","d26c4fc4":"col_comp=[]\nfor gen in train_companies:\n    per=100-round(train_companies[gen].value_counts().iloc[0]\/train_companies.shape[0]*100)\n    if(per>1):\n        print(\"{} {}%\".format(gen,per))\n        col_comp.append(gen)\ncol_comp","46290305":"train_companies_top=train_companies[col_comp]\ntest_companies_top=test_companies[col_comp]","141d1c47":"plt.figure(figsize=(36, 8))\nsns.barplot(data=train_companies_top)","6c6c4bfc":"plt.figure(figsize=(36, 8))\nsns.barplot(data=test_companies_top)","d7454b47":"train.release_date=pd.to_datetime(train.release_date)\ntest.release_date=pd.to_datetime(test.release_date)","6ce4c1c8":"train['weekday']=train.release_date.dt.weekday_name\ntest['weekday']=test.release_date.dt.weekday_name","6c60e70e":"train['year']=train.release_date.dt.year\ntest['year']=test.release_date.dt.year","792ba7ba":"train['month']=train.release_date.dt.month\ntest['month']=test.release_date.dt.month","329ab17b":"months={1:'January',2:'February',3:'March',4:'April',5:'May',6:'June',7:'July',8:'August',9:'September',10:'October',11:'November',12:'December'}\n\ntrain_months=train['month'].value_counts().index.map(months)\ntest_months=test['month'].value_counts().index.map(months)","d2c0437d":"plt.figure(figsize=(26,6))\nplt.pie(train['month'].value_counts(),labels=train_months)\nplt.title(\"month of release\")\nplt.show()","0ed07b05":"plt.figure(figsize=(26,6))\nplt.pie(test['month'].value_counts(),labels=test_months)\nplt.title(\"month of release\")\nplt.show()","575534a7":"def date_features(df, col, prefix):\n    df_new=pd.DataFrame()\n    today = datetime.datetime.today()\n    df[col] = pd.to_datetime(df[col])\n    cinema_start=datetime.date(year=1895,month=3,day=22)\n    df_new[prefix+'_day_of_week'] = df[col].dt.dayofweek\n    df_new[prefix+'_day_of_year'] = df[col].dt.dayofyear\n    df_new[prefix+'_month'] = df[col].dt.month\n    df_new[prefix+'_year'] = df[col].apply(lambda x: x.year-100 if (x>today) else x.year)\n    df_new[prefix+'_day'] = df[col].dt.day\n    df_new[prefix+'_is_year_end'] = df[col].dt.is_year_end\n    df_new[prefix+'_is_year_start'] = df[col].dt.is_year_start\n    df_new[prefix+'_week'] = df[col].dt.week\n    df_new[prefix+'_quarter'] = df[col].dt.quarter    \n    \n   \n\n    return df_new\n    ","542b092f":"today=datetime.datetime.now()\ntoday.date()","4caa0550":"release_year_train=date_features(train,'release_date','release')\nrelease_year_test=date_features(test,'release_date','release')\n","8cc02d88":"release_year_train.head()\n","fb9fc9ba":"release_year_test.head()","91cfdb62":"train_status=pd.get_dummies(train.status)\ntrain_or_lan=pd.get_dummies(train.original_language,prefix='original')\ntest_status=pd.get_dummies(test.status)\ntest_or_lan=pd.get_dummies(test.original_language,prefix='original')","4d40beaa":"train_status.columns.symmetric_difference(test_status.columns)","cc09000f":"creatin_zero_col(train_status,test_status)\ntrain_status.columns.symmetric_difference(test_status.columns)","590614c4":"train_or_lan.columns.symmetric_difference(test_or_lan.columns)","e7937d75":"creatin_zero_col(train_or_lan,test_or_lan)\ntrain_or_lan.columns.symmetric_difference(test_or_lan.columns)","6979558b":"train_or_lan.original_en.value_counts()","d84ab65d":"test_or_lan.original_en.value_counts()","be8b1a2b":"Y=train.revenue\n","6de656f9":"print(\"train original language:{},test original language:{},train status:{},test status:{},train genres:{},test genres:{}\".format(train_or_lan.original_en.shape,test_or_lan.original_en.shape,train_status.shape,test_status.shape,train_genres.shape,test_genres.shape))","eeffbf50":"train.runtime.describe()","c2ee1164":"train[train.runtime.isna()]","8a3bfe73":"test[test.runtime.isna()]","7dc67a5f":"print(\"train runtime std: {}, test runtime std: {}\".format(train.runtime.std(),test.runtime.std()))","86f1f488":"train.runtime.fillna(train.runtime.std(),inplace=True)\ntest.runtime.fillna(test.runtime.std(),inplace=True)","455f1c48":"print(\"train runtime count {},test runtime count {}\".format(train.runtime.count(),test.runtime.count()))","e4ded4f6":"print(\"train budget count {}, test budget count {}\".format(train.budget.count(),test.budget.count()))","d934080c":"print(\"train popularity count {}, test popularity count {}\".format(train.popularity.count(),test.popularity.count()))","986550dc":"from sklearn.preprocessing import MinMaxScaler","de388875":"train[[\"runtime\",\"budget\",\"popularity\"]].head()","512439f7":"x=train.runtime.values.astype(float)\nmin_max_scaler_train = MinMaxScaler()\nmin_max_scaler_test = MinMaxScaler()\nmin_max_scaler_train.fit(train[[\"runtime\",\"budget\",\"popularity\"]])\nmin_max_scaler_test.fit(test[[\"runtime\",\"budget\",\"popularity\"]])","aea2b50c":"\nnorm_train=min_max_scaler_train.transform(train[[\"runtime\",\"budget\",\"popularity\"]])\nnorm_test=min_max_scaler_test.transform(test[[\"runtime\",\"budget\",\"popularity\"]])","ba124d8b":"norm_train=pd.DataFrame(norm_train,columns=[\"runtime\",\"budget\",\"popularity\"])\nnorm_test=pd.DataFrame(norm_test,columns=[\"runtime\",\"budget\",\"popularity\"])","49241e28":"#train_or_lan,test_or_lan,train_status,test_status,train_genres,test_genres","15c172ac":"train_work=pd.DataFrame()\ntest_work=pd.DataFrame()\ntest_or_lan.original_en.shape,train_or_lan.original_en.shape","a8e70a19":"train_work=train_status.join(train_or_lan[\"original_en\"])\ntrain_work=train_work.join(train_genres)\ntrain_work=train_work.join(norm_train)\n#train_work=train_work.join(train_or_lan.original_en)\ntrain_work=train_work.join(train_spoken.en)\ntrain_work=train_work.join(release_year_train)\ntrain_work=train_work.join(train_cast)","11cc4a40":"test_work=test_status.join(test_or_lan[\"original_en\"])\ntest_work=test_work.join(test_genres)\ntest_work=test_work.join(norm_test)\n#test_work=test_work.join(test_or_lan.original_en)\ntest_work=test_work.join(test_spoken.en)\ntest_work=test_work.join(release_year_test)\ntest_work=test_work.join(test_cast)","216f26f4":"from sklearn.linear_model import Ridge\nclf = Ridge(alpha=1.0)\nclf.fit(train_work,Y)","a07f5066":"clf.score(train_work,Y)","62226fe8":"clf.get_params()","676d21c2":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(train_work, Y, test_size=0.75, random_state=42)","10915b15":"dtrain=xgb.DMatrix(X_train,label=y_train)\ndvalid=xgb.DMatrix(X_test,label=y_test)\n\nwatchlist = [(dtrain, 'train'), (dvalid, 'valid')]","d3a639b5":"xgb_pars = {'min_child_weight': 1, 'eta': 0.5, 'colsample_bytree': 0.9, \n            'max_depth': 15,\n'subsample': 0.9, 'lambda': 1., 'nthread': -1, 'booster' : 'gbtree', 'silent': 1,\n'eval_metric': 'rmse', 'objective': 'reg:linear'}","25f674f1":"model = xgb.train(xgb_pars, dtrain, 15, watchlist, early_stopping_rounds=2,\n      maximize=False, verbose_eval=1)\nprint('Modeling RMSLE %.5f' % model.best_score)","231a16c3":"xgb.plot_importance(model, max_num_features=28, height=0.7)","71068259":"train_predict=model.predict(dtrain)\nvalid_predict =model.predict(dvalid)","4ced7454":"from sklearn.metrics import mean_squared_error\nerr_train= mean_squared_error(y_train,train_predict)\nerr_test= mean_squared_error(y_test,valid_predict)\nprint(\"train error: {}, test error: {}\".format(err_train,err_test))","d1305d4e":"X_trainDF=pd.DataFrame({\"Predict\":train_predict,\"True\":y_train})\nX_testDF=pd.DataFrame({\"Predict\":valid_predict,\"True\":y_test})","53de012f":"len(train_predict)","4068fe0a":"X_trainDF.reset_index()[['Predict',\"True\"]].loc[450:500].plot()","64ebc611":"X_testDF.reset_index()[['Predict','True']][1000:1100].plot()","99ac3373":"dtest=xgb.DMatrix(test_work)","26ffa17d":"names=model.feature_names","e356a079":"dtest=xgb.DMatrix(test_work[names])","f8038437":"test_predicted =model.predict(dtest)","1b4ff795":"pred_df=pd.DataFrame({'id':test.id,'revenue':test_predicted})\npred_df.to_csv('submission.csv',index=False)","6dd690db":"\n\n# Trying to get dicts","a79a27c0":"## Creating new columns","1b8fa84b":"# Year","da443257":"# l2 regularization","b8c252e5":"Let's see what we get:","2d1e0d7e":"## New features from \"release_date\"","1f34b7eb":"## Set Y ","bc351ef7":"### Train data relese month","83db88de":"## Working with crew","de0c0f16":"## see train dataset","2fd6b0d1":"So, we got lists of genres in every film or just string.","73105eab":"How to handle this lists of genres? We'll create new columns for every genre.","8c613681":"## Cast","03f383e0":"Let's see what we get","1bcdfe45":"Cast of film are making film's boxoffice in general. So,  we'll get celebs from cast_list:","d9f82e0a":"## Genres","7dfc448e":"## Creating final datasets","f7786b23":"### Difference between train_cast and test_cast","496abcc3":"### Difference between train_genres and test_genres","5b5b82ef":"### Concatenate","5aa4f330":"In this part we add zero columns in DataFrames. In test data some genres and in train data some other genres. That way we'll made DataFrames same columns:","1f81cb49":"Check if columns are equal.","aa97dea8":"Function thats creating zero columns:","e3500143":"## Spoken Languages","0a993e34":"# XGBoosting ","d6cebe96":"# Production companies","d3779787":"# Dummies variables","32b31a2e":"### Test data relese month","a3689b2a":"## Normalization","603d210e":"\n\n\n'id' in genres is just code of genres. So id is useless"}}