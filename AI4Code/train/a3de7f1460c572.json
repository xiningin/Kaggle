{"cell_type":{"22769e06":"code","e011d08d":"code","51cb4426":"code","fca84866":"code","f9e55f87":"code","951ed75f":"code","116c708a":"code","670f1a8a":"code","3e5ad10f":"code","188f45c5":"code","76c21a57":"code","967e0cf1":"code","bdbe7359":"code","1adba786":"code","3e3b365b":"code","4ca155fd":"code","4cc02d3d":"markdown","c21c6879":"markdown","db3d5d8c":"markdown","7a9cecd3":"markdown","88e348a3":"markdown","d687c88b":"markdown"},"source":{"22769e06":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e011d08d":"!pip uninstall -y kaggle\n!pip install --upgrade pip\n!pip install kaggle==1.5.6\n!mkdir -p ~\/.kaggle\n!cp kaggle.json ~\/.kaggle\n!ls -lha kaggle.json\n!chmod 600 ~\/.kaggle\/kaggle.json\n!kaggle competitions download -c 2020-ai-exam-fashionmnist-2\n!unzip 2020-ai-exam-fashionmnist-2.zip","51cb4426":"import pandas as pd\nimport numpy as np\n\nimport torch\nimport torchvision.datasets as data\nimport torchvision.transforms as transforms\nimport random\nfrom sklearn import preprocessing","fca84866":"device = 'cuda' if torch.cuda.is_available() else 'cpu'\n\nrandom.seed(777)\ntorch.manual_seed(777)\nif device == 'cuda':\n  torch.cuda.manual_seed_all(777)","f9e55f87":"learning_rate = 0.001\ntraining_epochs = 15\nbatch_size = 100","951ed75f":"train = pd.read_csv(\"mnist_train_label.csv\", header=None)\ntest = pd.read_csv(\"mnist_test.csv\", header=None)\n\nprint(train)\n\nx_data = train.loc[:,1:785]\ny_data = train.loc[:,0]\n\nscaler = preprocessing.Normalizer()          # Normalizer\ubc29\uc2dd\uc73c\ub85c \uc815\uaddc\ud654\nx_data = scaler.fit_transform(x_data)\nx_train=np.array(x_data)\ny_train=np.array(y_data)\n\nx_train=torch.FloatTensor(x_train)\ny_train=torch.LongTensor(y_train)\ny_train","116c708a":"train_dataset = torch.utils.data.TensorDataset(x_train, y_train)","670f1a8a":"data_loader = torch.utils.data.DataLoader(dataset=train_dataset,\n                                          batch_size=batch_size,\n                                          shuffle=True,\n                                          drop_last=True)","3e5ad10f":"linear = torch.nn.Linear(784,10,bias=True)             # \ub808\uc774\uc5b4 1\uac1c\ntorch.nn.init.kaiming_normal_(linear.weight)            # kaiming\ubc29\uc2dd\uc73c\ub85c \ucd08\uae30\ud654","188f45c5":"model = torch.nn.Sequential(linear).to(device) # 'cuda'","76c21a57":"loss = torch.nn.CrossEntropyLoss().to(device)\noptimizer = torch.optim.SGD(model.parameters(), lr=learning_rate, momentum=0.9)","967e0cf1":"total_batch = len(data_loader)\nfor epoch in range(training_epochs):\n    avg_cost = 0\n\n    for X, Y in data_loader:\n\n        # (1000, 1, 28, 28) \ud06c\uae30\uc758 \ud150\uc11c\ub97c (1000, 784) \ud06c\uae30\uc758 \ud150\uc11c\ub85c \ubcc0\ud615\n        X = X.view(-1, 28 * 28).to(device)\n        # one-hot encoding\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc74c\n        Y = Y.to(device)\n        #%debug\n\n        # \uadf8\ub798\ub514\uc5b8\ud2b8 \ucd08\uae30\ud654\n        optimizer.zero_grad()\n        # Forward \uacc4\uc0b0\n        hypothesis = model(X)\n        # Error \uacc4\uc0b0\n        cost = loss(hypothesis, Y)\n        # Backparopagation\n        cost.backward()\n        # \uac00\uc911\uce58 \uac31\uc2e0\n        optimizer.step()\n\n        # \ud3c9\uade0 Error \uacc4\uc0b0\n        avg_cost += cost \/ total_batch\n\n    print('Epoch:', '%04d' % (epoch + 1), 'cost =', '{:.9f}'.format(avg_cost))\n\nprint('Learning finished')","bdbe7359":"with torch.no_grad():\n  model.eval() \n  x_test=test.loc[:,:]\n  x_test = scaler.transform(x_test)\n  x_test=np.array(x_test)\n  x_test=torch.from_numpy(x_test).float().to(device)\n\n  prediction = model(x_test)\n  correct_prediction = torch.argmax(prediction, 1)","1adba786":"correct_prediction = correct_prediction.cpu().numpy().reshape(-1,1)\nsubmit=pd.read_csv('submission.csv')\nsubmit","3e3b365b":"for i in range(len(correct_prediction)):\n  submit['Category'][i]=correct_prediction[i].item()\n\nsubmit.to_csv('submit.csv',index=False,header=True)\nsubmit","4ca155fd":"! kaggle competitions submit -c 2020-ai-exam-fashionmnist-2 -f submit.csv -m \"Message\"","4cc02d3d":"# \uc608\uce21\uac12 \uad6c\ud558\uae30","c21c6879":"# \ub370\uc774\ud130 \ub85c\ub4dc","db3d5d8c":"# import","7a9cecd3":"# \ud30c\ub77c\ubbf8\ud130 \uc124\uc815","88e348a3":"# \ubaa8\ub378 \ud559\uc2b5","d687c88b":"# \ub808\uc774\uc5b41\uac1c"}}