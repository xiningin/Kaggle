{"cell_type":{"55bc01e6":"code","08cf4706":"code","cc4920b2":"code","ef7bd575":"code","bbde09bb":"code","354d7445":"code","0969bca2":"code","9508238e":"code","2487358c":"code","b4950987":"code","a7fc0727":"code","806d04f2":"code","207c3cd1":"code","cb4c25e0":"code","04b6989e":"code","3e8c3fbd":"code","5a1c0e88":"code","5ab14a24":"code","c06d995d":"code","6ecd73a5":"code","e33588a5":"code","1ab5695c":"code","d4e82ce4":"code","4f47b6cc":"code","d91cd479":"code","89a4cab2":"code","b942a966":"code","3ff944ff":"code","c8c3763a":"code","141d62cc":"code","ae010183":"code","7e2ca12a":"code","bdad03fa":"code","f8e414be":"code","75d648be":"markdown","2f29c064":"markdown","2c8900d1":"markdown","7efb9c0c":"markdown","ba56bcc8":"markdown","f5b22907":"markdown","81eff68c":"markdown","f7b271bc":"markdown","1010e484":"markdown","5aff9532":"markdown","d4056312":"markdown","191d79ed":"markdown","9dfb6b4d":"markdown","4def8601":"markdown","89f14c03":"markdown","74f40714":"markdown","906faa96":"markdown","4c3c8a43":"markdown","52c9f638":"markdown","432d0876":"markdown","cb4a710d":"markdown","1e6fd717":"markdown","c2c58536":"markdown"},"source":{"55bc01e6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","08cf4706":"train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","cc4920b2":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport csv\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.metrics import accuracy_score, classification_report, roc_auc_score\nfrom sklearn.metrics import plot_roc_curve\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.preprocessing import OrdinalEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import RepeatedKFold\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import StratifiedShuffleSplit\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier","ef7bd575":"train.info()","bbde09bb":"train.describe(include='all')","354d7445":"plot_data = train.copy()\nplot_data = plot_data.drop('PassengerId',axis=1)\nfig, ax = plt.subplots(3,3,figsize=(15,15))\nsns.countplot(x=plot_data['Sex'], hue=plot_data['Survived'], ax=ax[0,0])\nsns.countplot(x=plot_data['Pclass'], hue=plot_data['Survived'], ax=ax[0,1])\nsns.kdeplot(x=plot_data['Age'], hue=plot_data['Survived'],shade=True, ax=ax[0,2])\nsns.countplot(x=plot_data['Embarked'], hue=plot_data['Survived'], ax=ax[1,0])\nsns.countplot(x=plot_data['Parch'], hue=plot_data['Survived'], ax=ax[1,1])\nsns.countplot(x=plot_data['SibSp'], hue=plot_data['Survived'], ax=ax[1,2])\nsns.kdeplot(x=plot_data['Fare'], hue=plot_data['Survived'],shade=True, ax=ax[2,0])\nfig.show()","0969bca2":"df_train = train.copy()\ndf_test = test.copy()","9508238e":"def getTitleFromName(name):\n    if \"Miss.\" in name:\n        return \"Miss\"\n    elif \"Mrs.\" in name:\n        return \"Mrs\"\n    elif \"Mr.\" in name:\n        return \"Mr\"\n    elif \"Master.\" in name:\n        return \"Master\"\n    else:\n        return \"Other\"","2487358c":"df_train[\"Title\"] = df_train[\"Name\"].apply(getTitleFromName)\ndf_test[\"Title\"] = df_test[\"Name\"].apply(getTitleFromName)","b4950987":"df_train['FamilySize'] = df_train[\"SibSp\"] + df_train[\"Parch\"] + 1\ndf_test['FamilySize'] = df_test[\"SibSp\"] + df_test[\"Parch\"] + 1","a7fc0727":"df_train['Alone'] = 0\ndf_train.loc[df_train['FamilySize'] == 1, 'Alone'] = 1\n\ndf_test['Alone'] = 0\ndf_test.loc[df_test['FamilySize'] == 1, 'Alone'] = 1","806d04f2":"df_train['Age'] = df_train['Age'].fillna(df_train.groupby('Title')['Age'].transform('mean'))\ndf_train['Age'] = df_train['Age'].astype(int)\ndf_test['Age'] = df_test['Age'].fillna(df_test.groupby('Title')['Age'].transform('mean'))\ndf_test['Age'] = df_test['Age'].astype(int)","207c3cd1":"df_train['Cabin'] = df_train['Cabin'].fillna(\"Unk\")\ndf_test['Cabin'] = df_test['Cabin'].fillna(\"Unk\")","cb4c25e0":"df_train['CabinLevel'] = df_train['Cabin'].str[0]\ndf_test['CabinLevel'] = df_test['Cabin'].str[0]","04b6989e":"def getCabinOrNot(level):\n    if level == 'U':\n        return 0\n    else:\n        return 1","3e8c3fbd":"df_train[\"isCabin\"] = df_train[\"CabinLevel\"].apply(getCabinOrNot)\ndf_test[\"isCabin\"] = df_test[\"CabinLevel\"].apply(getCabinOrNot)","5a1c0e88":"df_train['Fare'].fillna(df_train['Fare'].mean(), inplace=True)\ndf_test['Fare'].fillna(df_test['Fare'].mean(), inplace=True)","5ab14a24":"df_train['Fare4'] = pd.qcut(df_train['Fare'], 4)\ndf_train['Fare5'] = pd.qcut(df_train['Fare'], 5)\ndf_train['Fare6'] = pd.qcut(df_train['Fare'], 6)\ndf_train['Fare7'] = pd.qcut(df_train['Fare'], 7)\ndf_train['Fare8'] = pd.qcut(df_train['Fare'], 8)\n\ndf_test['Fare4'] = pd.qcut(df_test['Fare'], 4)\ndf_test['Fare5'] = pd.qcut(df_test['Fare'], 5)\ndf_test['Fare6'] = pd.qcut(df_test['Fare'], 6)\ndf_test['Fare7'] = pd.qcut(df_test['Fare'], 7)\ndf_test['Fare8'] = pd.qcut(df_test['Fare'], 8)","c06d995d":"df_train['Embarked'] = df_train['Embarked'].fillna('S')\ndf_test['Embarked'] = df_test['Embarked'].fillna('S')","6ecd73a5":"drop_elements = ['PassengerId', 'Name', 'Ticket', 'Cabin']\ndf_train = df_train.drop(drop_elements, axis = 1)\ndf_test  = df_test.drop(drop_elements, axis = 1)","e33588a5":"df_train = df_train.apply(LabelEncoder().fit_transform)\ndf_test = df_test.apply(LabelEncoder().fit_transform)","1ab5695c":"Y_train = df_train[\"Survived\"]\nX_train = df_train.drop(\"Survived\",axis=1)\nX_test = df_test","d4e82ce4":"class Classifier:\n    def __init__(self,n_estimators=100,min_samples_split=2):\n        self.clf_RF = RandomForestClassifier(n_estimators=n_estimators, min_samples_split=min_samples_split)\n    def train(self,X_train,Y_train):\n        self.x_train, self.x_test, self.y_train, self.y_test = train_test_split(X_train,Y_train, test_size = 0.2,random_state=42)\n        self.clf_RF.fit(self.x_train,self.y_train)\n    def predict(self,test):\n        return self.clf_RF.predict(test)\n    def get_report(self,y_train_pred_RF,y_pred_RF):\n        print(\"train accuracy= \",metrics.accuracy_score(self.y_train, y_train_pred_RF))\n        print(\"test accuracy= \", metrics.accuracy_score(self.y_test, y_pred_RF))\n        target_names = ['0','1']\n        print(classification_report(self.y_test, y_pred_RF, target_names=target_names))\n        ","4f47b6cc":"classifier = Classifier()\nclassifier.train(X_train,Y_train)\ny_pred_RF=classifier.predict(classifier.x_test)\ny_train_pred_RF = classifier.predict(classifier.x_train)","d91cd479":"classifier.get_report(y_train_pred_RF,y_pred_RF)","89a4cab2":"roc = plot_roc_curve(classifier.clf_RF, classifier.x_test, classifier.y_test)\nplt.show()","b942a966":"result = cross_val_score(estimator=classifier.clf_RF, X=classifier.x_train, y=classifier.y_train, cv=10)\nprint(\"Avg accuracy: {}\".format(result.mean()))","3ff944ff":"feature_imp = pd.Series(classifier.clf_RF.feature_importances_,index=X_train.columns).sort_values(ascending=False)\nsns.barplot(x=feature_imp, y=feature_imp.index)\n# Add labels to your graph\nplt.xlabel('Feature Importance Score')\nplt.ylabel('Features')\nplt.title(\"Visualizing Important Features\")\nplt.legend()\nplt.show()","c8c3763a":"Y_train = df_train[\"Survived\"]\nX_train = df_train.drop(\"Survived\",axis=1)\nX_test = df_test\nX_train = X_train[['Sex','Title','Fare','Age','Pclass','CabinLevel','FamilySize','isCabin']]\nX_test = X_test[['Sex','Title','Fare','Age','Pclass','CabinLevel','FamilySize','isCabin']]","141d62cc":"classifier = Classifier()\nclassifier.train(X_train,Y_train)\ny_pred_RF=classifier.predict(classifier.x_test)\ny_train_pred_RF = classifier.predict(classifier.x_train)\nclassifier.get_report(y_train_pred_RF,y_pred_RF)","ae010183":"# classifier1 = Classifier()\n# classifier1.train(X_train,Y_train)\n# grid_parameters = {'n_estimators': [i for i in range(100, 601, 50)], 'min_samples_split' : [2,4,6,810, 20, 30, 40]}\n# grid = GridSearchCV(estimator=classifier1.clf_RF, param_grid=grid_parameters)\n# grid_result = grid.fit(classifier1.x_train, classifier1.y_train)\n\n# # summarize results\n# print('Best: {} using {}'.format(grid_result.best_score_, grid_result.best_params_))","7e2ca12a":"# n_estimator = grid_result.best_params_['n_estimators']\n# min_samples_split = grid_result.best_params_['min_samples_split']\n# classifier = Classifier(n_estimator,min_samples_split)\n# classifier.train(X_train,Y_train)\n# y_pred_RF=classifier.predict(classifier.x_test)\n# y_train_pred_RF = classifier.predict(classifier.x_train)","bdad03fa":"Y_pred=classifier.clf_RF.predict(X_test)","f8e414be":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": Y_pred\n    })\nsubmission.to_csv('submission.csv', index=False)","75d648be":"Create a new feature FamilySize, using Sibsp and Parch","2f29c064":"# Import Data","2c8900d1":"Create new feature Alone from FamilySize","7efb9c0c":"Feature importances","ba56bcc8":"Filling missing values in Age feature using mean of the Title","f5b22907":"Filling Embarked missing values","81eff68c":"Classify using best hyperparamaters","f7b271bc":"# EDA","1010e484":"Create new features Fare Bins with diffrent bin sizes","5aff9532":"Confusion matrix and other reports","d4056312":"Separate features and label","191d79ed":"Predict and Save submission file","9dfb6b4d":"Grid Search","4def8601":"Train","89f14c03":"# Import Libraries","74f40714":"# Information from data","906faa96":"# Feature Engineering and Handle Missing Values","4c3c8a43":"Drop unwated features from data frame","52c9f638":"Create a new feature Title, containing the titles of passenger names","432d0876":"Label encode all categorical features","cb4a710d":"Filling Fare missing values","1e6fd717":"Filling missing values in Cabin and create new features CabinLevel, isCabin ","c2c58536":"Create Random Forest Classifier class"}}