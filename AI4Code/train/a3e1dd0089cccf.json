{"cell_type":{"305dcc6e":"code","3a7b3ed3":"code","ace537e3":"code","f8f826a2":"code","f1a611b8":"code","2c683405":"code","2f1d2c94":"code","7d3795d2":"code","e1bad84d":"code","31a0ebe3":"code","2ef4733e":"code","10ed7120":"code","75e9bf95":"code","b5be4e4b":"code","061b2fd4":"code","f6bff10c":"code","dccb9125":"code","1d056a20":"code","0945edc3":"code","27019d70":"code","9f9a2898":"code","5acf7543":"code","d4b335ea":"code","e735e082":"code","6a41249f":"code","18d80ea7":"code","aef6d563":"code","185cdd58":"code","6dd113e9":"code","113ff490":"code","a8374d4b":"code","4b70bae3":"code","c16ee7a1":"code","cb994932":"code","4f5581f8":"code","725a9a1b":"code","8e9bcedd":"code","f645ef39":"code","8d1249ec":"code","c38ecf71":"code","a21e1f4f":"code","ba7b488c":"code","638e7406":"code","520d1f6d":"code","95365ec7":"code","9d71dda2":"code","e7ab1998":"code","e8b55cf4":"code","84519b7f":"code","f9f96117":"code","64bf575a":"code","7d546ca0":"code","bebd4e48":"code","37cd4af0":"code","cbb6a83c":"code","b374be3e":"markdown","e1c93e3b":"markdown","72cf6b29":"markdown","f42f9f65":"markdown","5eb0da0a":"markdown"},"source":{"305dcc6e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","3a7b3ed3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","ace537e3":"data = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/train.csv')\nstore= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\ntest= pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/test.csv')","f8f826a2":"print(data.shape)\nprint(store.shape)","f1a611b8":"data.head()","2c683405":"store.head()","2f1d2c94":"data.info()\n# data.dtypes","7d3795d2":"data.describe(include='object')","e1bad84d":"data.describe()[['Sales','Customers']]","31a0ebe3":"data.describe()[['Sales','Customers']].loc['mean']","2ef4733e":"data.describe()[['Sales','Customers']].loc['min']","10ed7120":"data.describe()[['Sales','Customers']].loc['max']","75e9bf95":"data.Store.nunique()","b5be4e4b":"data.head()\ndata.Store.value_counts().head(50).plot.bar()","061b2fd4":"data.Store.value_counts().tail(50).plot.bar()","f6bff10c":"data.Store.value_counts()","dccb9125":"data.DayOfWeek.value_counts()","1d056a20":"data.Open.value_counts()","0945edc3":"data.Promo.value_counts()","27019d70":"data['Date']=pd.to_datetime(data['Date'],format='%Y-%m-%d')\nstore_id= data.Store.unique()[0]\nprint(store_id)\nstore_rows=data[data['Store']==store_id]\nprint(store_rows.shape)\n# store_rows.resample('1D',on='Date')['Sales'].sum().plot.line(figsize=(14,4))","9f9a2898":"# store_rows[store_rows['Sales']==0]","5acf7543":"test['Date']=pd.to_datetime(test['Date'],format='%Y-%m-%d')\nstore_test_rows = test[test['Store']==store_id]\nstore_test_rows['Date'].min(),store_test_rows['Date'].max()","d4b335ea":"store_rows['Sales'].plot.hist()\n# it is slightly skewed.","e735e082":"data['Sales'].plot.hist()\n# it is slightly skewed.","6a41249f":"store.head()","18d80ea7":"# store.isna.sum()","aef6d563":"store_id=store[store['Store']==1].T","185cdd58":"store[~store['Promo2SinceYear'].isna()].iloc[0]","6dd113e9":"# Method1\nstore = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/store.csv')\nstore['Promo2SinceWeek']= store['Promo2SinceWeek'].fillna(0)\nstore['Promo2SinceYear']= store['Promo2SinceYear'].fillna(store['Promo2SinceYear'].mode().iloc[0])\nstore['PromoInterval']= store['PromoInterval'].fillna(store['PromoInterval'].mode().iloc[0]) \n\nstore['CompetitionDistance']=store['CompetitionDistance'].fillna(store['CompetitionDistance'].max())\nstore['CompetitionOpenSinceMonth']= store['CompetitionOpenSinceMonth'].fillna(store['CompetitionOpenSinceMonth'].mode().iloc[0])\nstore['CompetitionOpenSinceYear']= store['CompetitionOpenSinceYear'].fillna(store['CompetitionOpenSinceYear'].mode().iloc[0])\nstore.isna().sum()\n      ","113ff490":"data_merged = data.merge(store, on='Store',how='left')\nprint(data.shape)\nprint(data_merged.shape)\nprint(data_merged.isna().sum().sum()) #to cross check if there are any missing values","a8374d4b":"# encoding\n# 3 categorical column,1 date column, rest are numerical\n# data_merged.dtypes\ndata_merged['day']=data_merged['Date'].dt.day\ndata_merged['month']=data_merged['Date'].dt.month\ndata_merged['year']=data_merged['Date'].dt.year\n#data_merged['dayofweek']=data_merged['Date'].dt.strftime('%a')\n","4b70bae3":"# Decision tress - label encoding should be used.\n# regression - one hot encoding must be used.","c16ee7a1":"# data_merged.dtypes\n# StateHoliday,StoreType,Assortment,PromoInterval\ndata_merged['StateHoliday'].unique()\n# for creating dummy variables - label encoding is used\ndata_merged['StateHoliday']=data_merged['StateHoliday'].map({'0':0,0:0,'a':1,'b':2,'c':3})\ndata_merged['StateHoliday']=data_merged['StateHoliday'].astype(int)\ndata_merged","cb994932":"# encoding assorted\ndata_merged['Assortment']\n# for creating dummy variables - label encoding is used\ndata_merged['Assortment']=data_merged['Assortment'].map({'a':1,'b':2,'c':3})\ndata_merged['Assortment']=data_merged['Assortment'].astype(int)\ndata_merged","4f5581f8":"data_merged['StoreType'].unique()\ndata_merged['StoreType']=data_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ndata_merged['StoreType']=data_merged['StoreType'].astype(int)\ndata_merged","725a9a1b":"data_merged['PromoInterval'].unique()\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ndata_merged['PromoInterval']=data_merged['PromoInterval'].map(map_promo)\ndata_merged","8e9bcedd":"# Train and validate Split\nfeatures= data_merged.columns.drop(['Sales','Date'])\nfrom sklearn.model_selection import train_test_split\ntrain_x,validate_x,train_y,validate_y = train_test_split(data_merged[features],np.log(data_merged['Sales']+1),test_size=0.2,random_state=1)\ntrain_x.shape,validate_x.shape,train_y.shape,validate_y.shape","f645ef39":"# from sklearn.tree import DecisionTreeRegressor\n\n# model_dt = DecisionTreeRegressor(max_depth=20,random_state=1).fit(train_x,train_y)\n# validate_y_pred = model_dt.predict(validate_x)\n\nfrom sklearn.tree import DecisionTreeRegressor\nmodel_dt=DecisionTreeRegressor(max_depth=10,random_state=1).fit(train_x,train_y)\nvalidate_y_pred=model_dt.predict(validate_x)","8d1249ec":"!pip install pydotplus","c38ecf71":"def draw_tree(model, columns):\n    import pydotplus\n    from sklearn.externals.six import StringIO\n    from IPython.display import Image\n    import os\n    from sklearn import tree\n    \n    graphviz_path = 'C:\\Program Files (x86)\\Graphviz2.38\/bin\/'\n    os.environ[\"PATH\"] += os.pathsep + graphviz_path\n\n    dot_data = StringIO()\n    tree.export_graphviz(model,\n                         out_file=dot_data,\n                         feature_names=columns)\n    graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n    return Image(graph.create_png())","a21e1f4f":"draw_tree(model_dt,features)","ba7b488c":"validate_y_pred = model_dt.predict(validate_x)\nfrom sklearn.metrics import mean_squared_error\nvalidate_y_inv = np.exp(validate_y) - 1\nvalidate_y_pred_inv = np.exp(validate_y_pred) - 1\nnp.sqrt(mean_squared_error(validate_y_inv , validate_y_pred_inv))","638e7406":"# submitting the train on test data set","520d1f6d":"model_dt.feature_importances_","95365ec7":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,5))\nplt.barh(features,model_dt.feature_importances_)\npd.Series(model_dt.feature_importances_,index=features)","9d71dda2":"# hyperparameter tuning\nfrom sklearn.model_selection import GridSearchCV\n\nparameters = {'max_depth': list(range(5,15))}\nbase_model= DecisionTreeRegressor()\ncv_model = GridSearchCV(base_model, param_grid = parameters).fit(train_x, train_y)\nparameters","e7ab1998":"cv_model.best_params_","e8b55cf4":"pd.DataFrame(cv_model.cv_results_)","84519b7f":"pd.DataFrame(cv_model.cv_results_).sort_values(by='mean_test_score',ascending=False) #[['param_max_depth','mean_test_score']]\n#differnt types tried with different max depth","f9f96117":"df_cv_results=pd.DataFrame(cv_model.cv_results_).sort_values(by='mean_test_score',ascending=False)\ndf_cv_results.set_index('param_max_depth')['mean_test_score'].plot.line()\ndf_cv_results.set_index('param_max_depth')['mean_train_score'].plot.line()","64bf575a":"stores_avg_cust = data.groupby(['Store'])[['Customers']].mean().reset_index().astype(int)\ntest_1 = test.merge(stores_avg_cust,on='Store',how='left')\ntest.shape,test_1.shape\ntest_merged = test_1.merge(store,on='Store',how='inner')\ntest_merged['Open']=test_merged['Open'].fillna(1)\ntest_merged['Date']=pd.to_datetime(test_merged[\"Date\"],format='%Y-%m-%d')\ntest_merged['day']=test_merged['Date'].dt.day\ntest_merged['month']=test_merged['Date'].dt.month\ntest_merged['year']=test_merged['Date'].dt.year\ntest_merged['StateHoliday']=test_merged['StateHoliday'].map({'0':0,'a':1})\ntest_merged['StateHoliday']=test_merged['StateHoliday'].astype(int)\ntest_merged['Assortment']=test_merged['Assortment'].map({'a':1,'b':2,'c':3})\ntest_merged['Assortment']=test_merged['Assortment'].astype(int)\ntest_merged['StoreType']=test_merged['StoreType'].map({'a':1,'b':2,'c':3,'d':4})\ntest_merged['StoreType']=test_merged['StoreType'].astype(int)\nmap_promo = {'Jan,Apr,Jul,Oct':1,'Feb,May,Aug,Nov':2,'Mar,Jun,Sept,Dec':3}\ntest_merged['PromoInterval']=test_merged['PromoInterval'].map(map_promo)\n","7d546ca0":"test_merged","bebd4e48":"test_pred = model_dt.predict(test_merged[features])\ntest_pred_inv = np.exp(test_pred) - 1","37cd4af0":"submission = pd.read_csv('\/kaggle\/input\/rossmann-store-sales\/sample_submission.csv')\nsubmission_predicted = pd.DataFrame({'Id':test['Id'],'Sales':test_pred_inv})\nsubmission_predicted.to_csv('submission.csv',index=False)\nsubmission_predicted.head()","cbb6a83c":"def ToWeight(y):\n    w = np.zeros(y.shape, dtype=float)\n    ind = y != 0\n    w[ind] = 1.\/(y[ind]**2)\n    return w\n\ndef rmspe(y, yhat):\n    w = ToWeight(y)\n    rmspe = np.sqrt(np.mean( w * (y - yhat)**2 ))\n    return rmspe\n# rmspe(validate_y_inv,validate_y_pred_inv)\nvalidate_y_inv=np.exp(validate_y)-1 #becaused we added +1 while log transformation\nvalidate_y_pred_inv=np.exp(validate_y_pred)-1\nrmse_val=np.sqrt(mean_squared_error(validate_y_inv,validate_y_pred_inv))\nrmspe_val=rmspe(validate_y_inv,validate_y_pred_inv)\nprint(rmse_val,rmspe_val)","b374be3e":"****Granularity - Here it is the metadata of the branches with respect to promotional events events conducted overall****","e1c93e3b":"****Granularity - One big brand has various number of branches and each rows is the data of that branch day wise****","72cf6b29":"# steps done in the current ml data\n\n* summary stats\n* understand your data\n* data preprocessing\n --missing value imputation\n --transformation\n --scaling\n --encoding\n* model fitting'\n* model summary\n* Prediction\n* Evaluation","f42f9f65":"****Store - It is categorical column hence min and max must not be done. we do value counts to check if every category has same amount of data********","5eb0da0a":"store_test_rows"}}