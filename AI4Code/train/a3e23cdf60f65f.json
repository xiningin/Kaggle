{"cell_type":{"76380688":"code","e8472e1c":"code","f1c5d3ac":"code","a5268b49":"code","846fad3a":"code","12d0d401":"code","691e646f":"code","9bd89b23":"code","1a52012d":"code","26204b03":"code","245fd642":"code","3efd971a":"code","7bbded4f":"code","335b7cb8":"code","5b424376":"code","897b5b67":"code","98a09d39":"code","182c9518":"code","4daddbe0":"code","4754c9eb":"code","5496bd8c":"markdown","90602669":"markdown","85e2f8d2":"markdown","b07f2a34":"markdown","676a449d":"markdown","d5e6f403":"markdown","a8c587c6":"markdown","e0047efb":"markdown","150f918d":"markdown","0101a0e0":"markdown","f5a1fd73":"markdown","5c76b1e8":"markdown","76a81525":"markdown","00bb27d2":"markdown","bde04a97":"markdown","62f5b2a8":"markdown","cf9b2d0b":"markdown","3dc95cec":"markdown","9e1d955e":"markdown","35279485":"markdown","65f437c0":"markdown","8293b1a9":"markdown","a9eae5d0":"markdown","74237fe3":"markdown"},"source":{"76380688":"import numpy as np\nimport pandas as pd\nfrom tqdm import tqdm, tqdm_notebook\nimport matplotlib.pyplot as plt\n\nfrom keras.models import Sequential\nfrom keras.layers import Dropout, BatchNormalization, Dense\nfrom keras.optimizers import Adam\nfrom keras.callbacks import EarlyStopping, TensorBoard, ReduceLROnPlateau, ModelCheckpoint\n\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\n\nimport os\nprint(os.listdir(\"..\/input\"))","e8472e1c":"base_dir = os.path.join(\"..\", \"input\")\ntrain_df = pd.read_csv(os.path.join(base_dir, \"train.csv\"))\ntest_df = pd.read_csv(os.path.join(base_dir, \"test.csv\"))","f1c5d3ac":"train_df.head()","a5268b49":"print(train_df['Pclass'].isnull().sum(axis=0)) # count number of NULL occurrences\ntrain_df[['Pclass', 'Survived']].groupby(['Pclass'], as_index=False).mean() # correlation with Survived","846fad3a":"print(train_df['Sex'].isnull().sum(axis=0)) \ntrain_df[['Sex', 'Survived']].groupby(['Sex'], as_index=False).mean() ","12d0d401":"train_df['SibSp'].isnull().sum(axis=0), train_df['Parch'].isnull().sum(axis=0)","691e646f":"train_df['Family'] = train_df['SibSp'] + train_df['Parch'] + 1 # creation of new feature\ntrain_df[['Family', 'Survived']].groupby(['Family'], as_index=False).mean()","9bd89b23":"print(train_df['Fare'].isnull().sum(axis=0))\ntrain_df[['Fare', 'Survived']].groupby(['Fare'], as_index=False).mean()","1a52012d":"print(\"NULL Records: \" + str(train_df['Cabin'].isnull().sum(axis=0)))\nprint(\"Total Number of Records: \" + str(len(train_df)))","26204b03":"train_df['Embarked'].isnull().sum(axis=0)","245fd642":"features = ['Pclass', 'Sex', 'Family', 'Fare']\nx = train_df[features]\ny = train_df['Survived']","3efd971a":"LE = LabelEncoder()\nx['Sex'] = LE.fit_transform(x['Sex'])","7bbded4f":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.1, shuffle=True)","335b7cb8":"%load_ext tensorboard.notebook\n%tensorboard --logdir logs","5b424376":"model = Sequential([\n    Dense(units=512, activation='relu', input_shape=(4,)),\n    BatchNormalization(),\n    Dropout(0.3),\n    Dense(units=1024, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.3),\n    Dense(units=1024, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.3),\n    Dense(units=512, activation='relu'),\n    BatchNormalization(),\n    Dropout(0.3),\n    Dense(units=1, activation='sigmoid')\n])\n\nmodel.compile(optimizer=Adam(lr=1e-3), loss='binary_crossentropy', metrics=['acc'])","897b5b67":"ckpt_path = 'titanic.hdf5'\n\nearlystop = EarlyStopping(monitor='val_acc', patience=20, verbose=1, restore_best_weights=True)\nreducelr = ReduceLROnPlateau(monitor='val_acc', factor=0.5, patience=3, verbose=1, min_lr=1e-7)\nmodelckpt = ModelCheckpoint(ckpt_path, monitor='val_acc', verbose=1, save_best_only=True, mode='max')\ntb = TensorBoard()\n\ncallbacks = [earlystop, reducelr, modelckpt, tb]","98a09d39":"history = model.fit(x_train, \n                    y_train, \n                    batch_size=128, \n                    validation_data = (x_test, y_test),\n                    epochs=100,\n                    callbacks=callbacks)","182c9518":"# Training plots\nepochs = [i for i in range(1, len(history.history['loss'])+1)]\n\nplt.plot(epochs, history.history['loss'], color='blue', label=\"training_loss\")\nplt.plot(epochs, history.history['val_loss'], color='red', label=\"validation_loss\")\nplt.legend(loc='best')\nplt.title('loss')\nplt.xlabel('epoch')\nplt.show()\n\nplt.plot(epochs, history.history['acc'], color='blue', label=\"training_accuracy\")\nplt.plot(epochs, history.history['val_acc'], color='red',label=\"validation_accuracy\")\nplt.legend(loc='best')\nplt.title('accuracy')\nplt.xlabel('epoch')\nplt.show()","4daddbe0":"test_df['Family'] = test_df['SibSp'] + test_df['Parch'] + 1\ntest = test_df[features]\ntest['Sex'] = LE.fit_transform(test['Sex']) # encode gender as a numerical value","4754c9eb":"pred = model.predict(test)\npred = (pred > 0.5).astype(int).reshape(test.shape[0])\ntest_df['Survived'] = pred\n\n# Submitting to competition\noutput = test_df[['PassengerId', 'Survived']]\noutput.to_csv('submission.csv', index=False)","5496bd8c":"As seen from the correlation, it is a deciding factor in survival","90602669":"687 out of 891 records are NULL. This feature is of no use for our prediction.","85e2f8d2":"## Fare","b07f2a34":"## SibSp and Parch","676a449d":"# Make predictions","d5e6f403":"# Read the dataset","a8c587c6":"## Cabin","e0047efb":"# Visualizations","150f918d":"Since it has NULL values, choosing Fare as a feature was a correct decision.","0101a0e0":"Gender has to be encoded as a numerical value.","f5a1fd73":"# Examine the features\n\nOn inspection of the features:\n1. PassengerId: Has nothing to do with our predictions.\n2. Survived: The target variable.\n3. Pclass: The class of the ticket purchased by the passenger (Decides survival).\n4. Name: Not required for prediction.\n5. Sex: Decides survival.\n6. SibSp - Number of siblings and spouses (Decides survival).\n7. Parch - Number of children (Decides survival).\n8. Ticket - Ticket number has nothing to do with our prediction.\n9. Fare - May decide survival.\n10. Cabin - The cabin number (May decide survival).\n11. Embarked - May be redundant as it may be captured by Fare and Pclass.","5c76b1e8":"The training set is split into train and val in a 90:10 ratio","76a81525":"# Training ","00bb27d2":"## Embarked","bde04a97":"## Sex","62f5b2a8":"## Edit features","cf9b2d0b":"Again, quite clear that females have better chance of survival than males","3dc95cec":"# Feature Selection\n\nAfter the examining of features, let's go ahead and select them.","9e1d955e":"## Fit the model","35279485":"## Set the callbacks","65f437c0":"## PClass","8293b1a9":"I will create a new feature called Family which clubs these 2 together","a9eae5d0":"## Building the keras model","74237fe3":"## Tensorboard setup\n\nHelps visualize loss and accuracy during training."}}