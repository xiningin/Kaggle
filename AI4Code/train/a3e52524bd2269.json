{"cell_type":{"6dc19b36":"code","d0540d59":"code","03814cdf":"code","8f3b32ae":"code","f5be3a02":"code","54e57db2":"code","f3a21f98":"code","f541fcdb":"code","5b7b3497":"code","990d0f97":"code","f36a62ce":"code","c65f0862":"code","e43ecb0a":"code","470e64ff":"code","fc549e4f":"code","55022104":"code","852abe53":"code","301388c6":"code","8a806ebe":"code","97ee4585":"code","d09ed9b4":"code","2a15b693":"markdown","d20e2f3d":"markdown","3c5ef142":"markdown","ae74ebfb":"markdown","7a08e7d9":"markdown","13abed76":"markdown","18895186":"markdown","689c8012":"markdown","34c21264":"markdown"},"source":{"6dc19b36":"import numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport tensorflow as tf\n\nfrom keras.preprocessing import image\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout,BatchNormalization,GlobalAveragePooling2D,UpSampling2D","d0540d59":"cifar10 = tf.keras.datasets.cifar100\n(X_train, Y_train), (X_test,Y_test) = cifar10.load_data()","03814cdf":"plt.figure(figsize=(12,12))\nfor i in range(100):\n  plt.subplot(10,10,1+i)\n  plt.axis('off')\n  plt.imshow(X_train[i],cmap='gray')","8f3b32ae":"from sklearn.model_selection import train_test_split\nx_train,x_val,y_train,y_val=train_test_split(X_train, Y_train,test_size=0.2)","f5be3a02":"from keras.utils.np_utils import to_categorical\ny_train=to_categorical(y_train,num_classes=100)\ny_val=to_categorical(y_val,num_classes=100)\ny_test=to_categorical(Y_test,num_classes=100)","54e57db2":"x_train = x_train*1.0\/255\nx_val = x_val*1.0\/255\nX_test = X_test*1.0\/255","f3a21f98":"print(x_train.shape,x_val.shape,X_test.shape)\nprint(y_train.shape,y_val.shape,y_test.shape)","f541fcdb":"train_datagen = ImageDataGenerator( \n        rotation_range = 10,  \n        zoom_range = 0.1, \n        width_shift_range = 0.1,  \n        height_shift_range = 0.1,\n        shear_range = 0.1,\n        horizontal_flip = True,  \n        vertical_flip = False\n        )\ntrain_datagen.fit(x_train)","5b7b3497":"from keras.callbacks import ReduceLROnPlateau\nlearning_rate_reduction = ReduceLROnPlateau(\n    monitor='val_accuracy', \n    patience=3, \n    verbose=1, \n    factor=0.6, \n    min_lr=1e-6)","990d0f97":"from tensorflow.keras.applications import InceptionV3\ninception_model = InceptionV3(\n    include_top=False,\n    weights='imagenet',\n    input_shape=(224,224,3)\n)\n\nfor layer in inception_model.layers:\n    if isinstance(layer, BatchNormalization):\n        layer.trainable = True\n    else:\n        layer.trainable = False","f36a62ce":"inception_model.summary()","c65f0862":"model=tf.keras.models.Sequential()\nmodel.add(UpSampling2D(size=(7, 7),interpolation='bilinear'))\nmodel.add(inception_model)\nmodel.add(GlobalAveragePooling2D())\nmodel.add(Dropout(.25))\nmodel.add(Dense(256, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(100, activation='softmax'))\n","e43ecb0a":"optimizer = tf.keras.optimizers.SGD(learning_rate=1e-3, momentum=0.9)","470e64ff":"model.compile(\n    optimizer = optimizer,\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)","fc549e4f":"result=model.fit(\n    train_datagen.flow(x_train, y_train, batch_size = 128),\n    validation_data = (x_val, y_val),\n    epochs = 60,\n    verbose = 1,\n    callbacks = [learning_rate_reduction]\n)\n","55022104":"model.summary()","852abe53":"model.summary()","301388c6":"acc = result.history['accuracy']\nval_acc = result.history['val_accuracy']\nloss = result.history['loss']\nval_loss = result.history['val_loss']\n\nplt.figure(figsize=(20, 10))\nplt.subplot(1, 2, 1)\nplt.title(\"Training and Validation Accuracy\")\nplt.plot(acc,color = 'green',label = 'Training Acuracy')\nplt.plot(val_acc,color = 'red',label = 'Validation Accuracy')\nplt.legend(loc='lower right')\nplt.ylabel('accuracy')\nplt.xlabel('epoch')\nplt.subplot(1, 2, 2)\nplt.title('Training and Validation Loss')\nplt.plot(loss,color = 'blue',label = 'Training Loss')\nplt.plot(val_loss,color = 'purple',label = 'Validation Loss')\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(loc='upper right')\nplt.show()","8a806ebe":"y_pred = np.argmax(model.predict(X_test), axis=-1)\ny_true = Y_test.ravel()\nprint(y_pred.shape,y_true.shape)","97ee4585":"from sklearn.metrics import accuracy_score,confusion_matrix\n\nprint(\"Testing Accuracy: \", accuracy_score(y_true,y_pred))","d09ed9b4":"cm = confusion_matrix(y_true,y_pred)\ncm","2a15b693":"# Importing Libraries","d20e2f3d":"# CIFAR 100 using Transfer Learning (Inceptionv3)","3c5ef142":"# Importing the Inceptionv3 Model","ae74ebfb":"# Importing the Cifar 100 Dataset\n","7a08e7d9":"# Reduce Learning Rate if accuracy is not improving for 3 epochs","13abed76":"# Image Data Augmentation","18895186":"# Predictions,Accuracy and Confusion Matrix","689c8012":"# Onehot encoding of the outputs\n","34c21264":"# Plotting some images"}}