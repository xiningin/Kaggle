{"cell_type":{"8a9e1469":"code","d066647c":"code","d2ad4c81":"code","01172875":"code","7fb2b231":"code","aa5e66ff":"code","782c4103":"code","1b537fa7":"code","90884741":"code","d1faa498":"code","b7140084":"code","52da9039":"code","665240f0":"code","b029088c":"code","420dc8a6":"code","001787f9":"code","66f7f21b":"code","4b5152f0":"code","45ec3896":"code","634dcdfb":"code","8fe2db95":"code","ea7ea163":"code","f1278f16":"code","76b7debc":"code","51821d55":"code","6c0f26e2":"code","ff5d9d28":"markdown","4c5aacfb":"markdown","40d863fd":"markdown","69b11e68":"markdown","e38d6622":"markdown"},"source":{"8a9e1469":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt \nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go","d066647c":"pred_2class = pd.read_csv(\"..\/input\/vinbigdata-2class-prediction\/2-cls test pred.csv\")\npred_2class","d2ad4c81":"# Tuning by LB private - the best option: my version (commit) 5:\nlow_threshold = 0.005\nhigh_threshold = 0.95","01172875":"# Tuning by LB private\ncommits_df = pd.DataFrame(columns = ['n_commit', 'low', 'high', 'LB_score'])","7fb2b231":"# From https:\/\/www.kaggle.com\/mahmudds\/vinbigdata-chest-x-ray-abnormalities-detection\nn=0\ncommits_df.loc[n, 'n_commit'] = 0                        # I didn't run it - that's the starting point\ncommits_df.loc[n, 'low'] = 0.001                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.87                         # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.246                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","aa5e66ff":"n=1\ncommits_df.loc[n, 'n_commit'] = n                        # Number of commit\ncommits_df.loc[n, 'low'] = 0.001                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.90                         # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.244                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","782c4103":"n=2\ncommits_df.loc[n, 'n_commit'] = n                        # Number of commit\ncommits_df.loc[n, 'low'] = 0.001                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.94                         # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.241                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.228                  # LB private","1b537fa7":"n=3\ncommits_df.loc[n, 'n_commit'] = n                        # Number of commit\ncommits_df.loc[n, 'low'] = 0.0                           # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.91                         # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.243                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","90884741":"n=4\ncommits_df.loc[n, 'n_commit'] = n                        # Number of commit\ncommits_df.loc[n, 'low'] = 0.002                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.9                          # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.244                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","d1faa498":"n=5\ncommits_df.loc[n, 'n_commit'] = n                        # Number of commit\ncommits_df.loc[n, 'low'] = 0.005                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.95                         # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.241                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.228                  # LB private","b7140084":"n=6\ncommits_df.loc[n, 'n_commit'] = n+1                      # Number of commit\ncommits_df.loc[n, 'low'] = 0.001                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.9                          # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.244                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","52da9039":"n=7\ncommits_df.loc[n, 'n_commit'] = n+3                      # Number of commit\ncommits_df.loc[n, 'low'] = 0.001                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.88                         # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.246                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","665240f0":"n=8\ncommits_df.loc[n, 'n_commit'] = n+3                      # Number of commit\ncommits_df.loc[n, 'low'] = 0.001                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.86                         # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.245                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","b029088c":"n=9\ncommits_df.loc[n, 'n_commit'] = n+3                      # Number of commit\ncommits_df.loc[n, 'low'] = 0.001                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.875                        # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.246                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.225                  # LB private","420dc8a6":"n=10\ncommits_df.loc[n, 'n_commit'] = n+3                      # Number of commit\ncommits_df.loc[n, 'low'] = 0.0                           # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.875                        # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.246                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.225                  # LB private","001787f9":"n=11\ncommits_df.loc[n, 'n_commit'] = n+3                      # Number of commit\ncommits_df.loc[n, 'low'] = 0.002                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.885                        # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.246                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","66f7f21b":"n=12\ncommits_df.loc[n, 'n_commit'] = n+3                      # Number of commit\ncommits_df.loc[n, 'low'] = 0.003                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.88                         # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.246                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","4b5152f0":"n=13\ncommits_df.loc[n, 'n_commit'] = n+3                      # Number of commit\ncommits_df.loc[n, 'low'] = 0.005                         # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.88                         # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.246                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","45ec3896":"n=14\ncommits_df.loc[n, 'n_commit'] = n+3                      # Number of commit\ncommits_df.loc[n, 'low'] = 0.01                          # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.88                         # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.246                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","634dcdfb":"n=15\ncommits_df.loc[n, 'n_commit'] = n+3                      # Number of commit\ncommits_df.loc[n, 'low'] = 0.1                           # Number of low_threshold\ncommits_df.loc[n, 'high'] = 0.88                         # Number of high_threshold\ncommits_df.loc[n, 'LB_score'] = 0.246                    # LB score after submitting\ncommits_df.loc[n, 'LB_private'] = 0.226                  # LB private","8fe2db95":"# Find and mark minimun value of LB score\ncommits_df['LB_score'] = pd.to_numeric(commits_df['LB_score'])\ncommits_df['LB_private'] = pd.to_numeric(commits_df['LB_private'])\ncommits_df = commits_df.sort_values(by=['LB_score'], ascending = False).reset_index(drop=True)\n\n# LB public\ncommits_df['max'] = 0\ncommits_df.loc[15, 'max'] = 1   # LB private maximum\ncommits_df.loc[0, 'max'] = 2   # LB public maximum\n\n# LB private\ncommits_df['max_private'] = 0\ncommits_df.loc[0, 'max_private'] = 1   # LB public maximum\ncommits_df.loc[15, 'max_private'] = 2   # LB private maximum","ea7ea163":"# LB public\ncommits_df.sort_values(by=['LB_score'], ascending = True)","f1278f16":"# LB private\ncommits_df.sort_values(by=['LB_private'], ascending = True)","76b7debc":"# Interactive plot with results of parameters tuning - LB public\nfig = px.scatter_3d(commits_df, x='low', y='high', z='LB_score', color='max',\n                    title='Parameters and LB score PUBLIC - visualization of solutions (start - yellow, private optimum - red)')\nfig.update(layout=dict(title=dict(x=0.1)))","51821d55":"# Interactive plot with results of parameters tuning - LB private\nfig = px.scatter_3d(commits_df, x='low', y='high', z='LB_private', color='max_private',\n                    title='Parameters and LB score PRIVATE - visualization of solutions (start - red, private optimum - yellow)')\nfig.update(layout=dict(title=dict(x=0.1)))","6c0f26e2":"# Thanks to https:\/\/www.kaggle.com\/muhammad4hmed\/lets-overfit-together\n# Thanks to https:\/\/www.kaggle.com\/mahmudds\/vinbigdata-chest-x-ray-abnormalities-detection\n\nNORMAL = \"14 1 0 0 1 1\"\n\npred_det_df = pd.read_csv(\"..\/input\/vinbigdatastack\/submission_postprocessed.csv\")\nn_normal_before = len(pred_det_df.query(\"PredictionString == @NORMAL\"))\nmerged_df = pd.merge(pred_det_df, pred_2class, on=\"image_id\", how=\"left\")\n\n\nif \"target\" in merged_df.columns:\n    merged_df[\"class0\"] = 1 - merged_df[\"target\"]\n\nc0, c1, c2 = 0, 0, 0\nfor i in range(len(merged_df)):\n    p0 = merged_df.loc[i, \"class0\"]\n    if p0 < low_threshold:\n\n        c0 += 1\n    elif low_threshold <= p0 and p0 < high_threshold:\n\n        merged_df.loc[i, \"PredictionString\"] += f\" 14 {p0} 0 0 1 1\"\n        c1 += 1\n    else:\n\n        merged_df.loc[i, \"PredictionString\"] = NORMAL\n        c2 += 1\n\nn_normal_after = len(merged_df.query(\"PredictionString == @NORMAL\"))\nprint(\n    f\"n_normal: {n_normal_before} -> {n_normal_after} with threshold {low_threshold} & {high_threshold}\"\n)\nprint(f\"Keep {c0} Add {c1} Replace {c2}\")\nsubmission_filepath = str(\"submission.csv\")\nsubmission_df = merged_df[[\"image_id\", \"PredictionString\"]]\nsubmission_df.to_csv(submission_filepath, index=False)\nprint(f\"Saved to {submission_filepath}\")","ff5d9d28":"# [VinBigData Chest X-ray Abnormalities Detection](https:\/\/www.kaggle.com\/c\/vinbigdata-chest-xray-abnormalities-detection)","4c5aacfb":"## Apply 2class filter","40d863fd":"### My versions (commits)","69b11e68":"### 0th version - [the starting point](https:\/\/www.kaggle.com\/mahmudds\/vinbigdata-chest-x-ray-abnormalities-detection) ","e38d6622":"### Acknowledgements:\n\n* notebook [VinBigData Chest X-ray Abnormalities Detection](https:\/\/www.kaggle.com\/mahmudds\/vinbigdata-chest-x-ray-abnormalities-detection)\n* notebook [Lets overfit together](https:\/\/www.kaggle.com\/muhammad4hmed\/lets-overfit-together)\n* dataset [VinBigData Chest X-ray models](https:\/\/www.kaggle.com\/bryanb\/vinbigdatastack)\n* dataset [VinBigData 2-class Prediction](https:\/\/www.kaggle.com\/awsaf49\/vinbigdata-2class-prediction) "}}