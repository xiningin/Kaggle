{"cell_type":{"d832afa7":"code","e61231b8":"code","9176316c":"code","660d120b":"code","6f019aaa":"code","9049aa31":"code","f155fa5e":"code","fab7634a":"code","92063a62":"code","04a85a8d":"code","2b68f33d":"code","6a7cc2b1":"code","4498b158":"code","65458781":"code","82de125c":"code","90d76e25":"code","2a651fa6":"code","095074e3":"markdown","c8c6afc3":"markdown","aa10bab5":"markdown","4a71969a":"markdown","ca2a10b9":"markdown","285a0165":"markdown","4c054952":"markdown","e4625e56":"markdown","eb351de3":"markdown","d778a79d":"markdown","d592aab3":"markdown","399eeb66":"markdown"},"source":{"d832afa7":"# Data analysis libraries\nimport pandas as pd\nimport numpy as np\n\n# Data visualization libraires\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# show plot in the notebook\n%matplotlib inline\n\n# Next, we'll load the Iris flower dataset, which is in the \"..\/input\/\" directory\niris = pd.read_csv(\"..\/input\/Iris.csv\") # the iris dataset is now a Pandas DataFrame","e61231b8":"# first five observations\niris.head()","9176316c":"# Number of observations and missing values. \n# There are 150 observations and no nan value\niris.info()","660d120b":"# Check basic description for features\niris.drop(['Id','Species'], axis=1).describe()","6f019aaa":"# Check the response variable frequency\niris['Species'].value_counts()","9049aa31":"# Create a pairplot of the data set. Which flower species seems to be the most separable?\nsns.pairplot(iris.drop(['Id'], axis=1),hue='Species')\n# Iris setosa seems most separable from the other two species","f155fa5e":"# Create a kde plot of sepal_length versus sepal width for setosa species of flower.\nsub=iris[iris['Species']=='Iris-setosa']\nsns.kdeplot(data=sub[['SepalLengthCm','SepalWidthCm']],cmap=\"plasma\", shade=True, shade_lowest=False)\nplt.title('Iris-setosa')\nplt.xlabel('Sepal Length Cm')\nplt.ylabel('Sepal Width Cm')","fab7634a":"sns.kdeplot(data=sub[['PetalLengthCm','PetalWidthCm']],cmap=\"plasma\", shade=True, shade_lowest=False)\nplt.title('Iris-setosa')\nplt.xlabel('Petal Length Cm')\nplt.ylabel('Petal Width Cm')","92063a62":"sub_virginica=iris[iris['Species']=='Iris-virginica']\n# Create a scatter plot of the Sepal\nplt.scatter(sub_virginica['SepalLengthCm'], sub_virginica['SepalWidthCm'], marker='o', color='r')\nplt.xlabel('Sepal Length Cm')\nplt.ylabel('Sepal Width Cm')\nplt.title('Sepal Width versus Length for virginica species')","04a85a8d":"# Split data into a training set and a testing set.\n# train_test_split shuffle the data before the split (shuffle=True by default)\nfrom sklearn.model_selection import train_test_split\nX=iris.drop(['Species', 'Id'], axis=1)\ny=iris['Species']\nX_train, X_test, y_train, y_test=train_test_split(X,y, test_size=0.5, shuffle=True,random_state=100)","2b68f33d":"# Now it's time to train a Support Vector Machine Classifier. \n# Call the SVC() model from sklearn and fit the model to the training data.\nfrom sklearn.svm import SVC\nmodel=SVC(C=1, kernel='rbf', tol=0.001)\nmodel.fit(X_train, y_train)","6a7cc2b1":"# Now get predictions from the model and create a confusion matrix and a classification report.\npred=model.predict(X_test)\nfrom sklearn.metrics import confusion_matrix, classification_report, accuracy_score\nprint(confusion_matrix(y_test, pred))\nprint('\\n')\nprint(classification_report(y_test, pred))\nprint('\\n')\nprint('Accuracy score is: ', accuracy_score(y_test, pred))","4498b158":"iris.head(20)","65458781":"from sklearn.utils import shuffle\nX=iris.drop('Species', axis=1)\ny=iris['Species']\nprint('Before shuffle: ',y[0:20])\nX,y = shuffle(X,y, random_state=0)\nprint(\"After shuffle: \", y[0:20])","82de125c":"# Create a dictionary called param_grid and fill out some parameters for C and gamma.\nparam_grid = {'C': [0.1, 0.5, 1, 5, 10, 50, 100, 500, 1000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']}\n# param_grid = {'C': [0.1,1, 10, 100, 1000], 'gamma': ['auto'], 'kernel': ['rbf']}\nfrom sklearn.model_selection import GridSearchCV\ngrid=GridSearchCV(estimator=SVC(), param_grid=param_grid, scoring='accuracy',cv=3, verbose=1, refit=True )\ngrid.fit(X, y)","90d76e25":"# The best hyperparameters chosen is\nprint(grid.best_params_)\nprint(grid.best_estimator_)\nprint('Mean cross-validated score of the best_estimator: ', grid.best_score_)\nprint('The number of cross-validation splits (folds\/iterations): ', grid.n_splits_)","2a651fa6":"# Another optition for shuffle is to use cv=KFold, we get 98% accuracy\nfrom sklearn.model_selection import KFold\nX=iris.drop(['Species', 'Id'], axis=1)\ny=iris['Species']\n# Create a dictionary called param_grid and fill out some parameters for C and gamma.\nparam_grid = {'C': [0.1, 0.5, 1, 5, 10, 50, 100, 500, 1000], 'gamma': [1,0.1,0.01,0.001,0.0001], 'kernel': ['rbf']}\n# param_grid = {'C': [0.1,1, 10, 100, 1000], 'gamma': ['auto'], 'kernel': ['rbf']}\nfrom sklearn.model_selection import GridSearchCV\ngrid=GridSearchCV(estimator=SVC(), param_grid=param_grid, scoring='accuracy',\n                  cv=KFold(n_splits=3, shuffle=True, random_state=0), verbose=1, refit=True )\ngrid.fit(X, y)\n\n# The best hyperparameters chosen is\nprint(grid.best_params_)\nprint(grid.best_estimator_)\nprint('Mean cross-validated score of the best_estimator: ', grid.best_score_)\nprint('The number of cross-validation splits (folds\/iterations): ', grid.n_splits_)","095074e3":"**Part 6: Model Evaluation**","c8c6afc3":"**Part I: Import library and load data**","aa10bab5":"**Introduction**\n\nFrom Wikipedia\n\nThe Iris flower data set or Fisher's Iris data set is a multivariate data set introduced by Ronald Fisher in his 1936 paper The use of multiple measurements in taxonomic problems as an example of linear discriminant analysis.[1] It is sometimes called Anderson's Iris data set because Edgar Anderson collected the data to quantify the morphologic variation of Iris flowers of three related species.[2] Two of the three species were collected in the Gasp\u00e9 Peninsula \"all from the same pasture, and picked on the same day and measured at the same time by the same person with the same apparatus\".[3]\n\nThe data set consists of 50 samples from each of three species of Iris (Iris setosa, Iris virginica and Iris versicolor). Four features were measured from each sample: the length and the width of the sepals and petals, in centimetres. Based on the combination of these four features, Fisher developed a linear discriminant model to distinguish the species from each other.\n\nThe iris dataset contains measurements for 150 iris flowers from three different species.\n\nThe three classes in the Iris dataset:\n\n    Iris-setosa (n=50). \n    Iris-versicolor (n=50).\n    Iris-virginica (n=50). \n\nThe four features of the Iris dataset:\n\n    sepal length in cm\n    sepal width in cm\n    petal length in cm\n    petal width in cm","4a71969a":"**Part 5: Train a Model**\n\nFor sklearn.svm.SVC(), The implementation is based on libsvm. The fit time complexity is more than quadratic with the number of samples which makes it hard to scale to dataset with more than a couple of 10000 samples. The multiclass support is handled according to a one-vs-one scheme.","ca2a10b9":"***  7.1 GridSearchCV does not shuffle the data before CV like train_test_split, we need to shuttle the Iris data by ourselves before using the GridSearchCV. Since in the original Iris data, data is sorted by species. ***","285a0165":"* If you think my kernel is helpful, please give me a voteup. This is very important for new people like me. Thank you in advance.\n* If you have any question, please feel free to leave me a message, I will check every day. Thank you so much.","4c054952":"**Part 4: Train Test Split**","e4625e56":"**Part II: Check the data information**","eb351de3":"**Part 7: Gridsearch to tune hyperparameters**","d778a79d":"* The GridSearchCV exhaustive search over specified parameter values for an estimator in param_grid.\n* CV=3 means we will use the three-fold cross-validation and check the performance of the mean accuracy score on the validation set (default is cv=3, three-fold cross-validation)\n* scoring='accuracy' means we choose parameters with the best accuracy score, this is the default setting. We can also use scoring='precision', 'f1', 'recall'\n* By using GridSearchCV to tune hyperparameters, we get 98.6% test accuracy score.","d592aab3":"For this classification exercise on the Iris species data, \n* I first use some simple Python techniques to explore the data set. \n* Then I split half of the data into the training set to train the hypothesis model and half of them as validation set to check the test accuracy score \n* At last, we use the support vector machine to train the classification model.\n* And we use GridSearchCV to tune the hyperparameters(C, gamma, kernel) in the SVC model to achieve 100% accuracy score.\n\nOne very import reminder is below. train_test_split shuffle the data before doing the split.  GridSearchCV does not shuffle the data before doing cross-validation. And our iris data is ordered by response variable Species ( 50 Iris-setosa, 50 Iris-versicolor, and 50 Iris-virginica)  so we need to shuffle iris before using GridSearchCV.\n\nIn the future, I will also add the decision tree, bagging, Boosting and AdaBoost,  random forest classifier, logistic regression, K nearest neighbor classifier, naive Bayes to classify the model. ","399eeb66":"**Part III: Explorary data analysis**"}}