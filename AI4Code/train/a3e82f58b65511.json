{"cell_type":{"6858ffca":"code","188f2f2d":"code","38fb0bff":"code","7aa8a333":"code","0ecfffe8":"code","65d95f4f":"code","dd53df53":"code","5283dfd6":"code","c260446a":"code","f76546d7":"code","aaac4207":"code","83cd0407":"code","441c6461":"code","420feea9":"code","51515a29":"code","4931ec5b":"code","4ecd40db":"code","eb1bac72":"code","8431a056":"code","8774a27f":"code","98684056":"code","9c63a99b":"code","c1718417":"code","70392502":"code","7b2cd7fa":"code","2d30df18":"code","da3bf8dc":"code","9d85a09a":"code","5a9a6aac":"code","d9b279bd":"code","fed90b1e":"code","b97d5a53":"code","b984220f":"code","5b523f4a":"code","7bfecedf":"code","635f341d":"code","b108b7dd":"code","52547c04":"code","db8f4630":"code","d8c201c6":"code","f8907aa3":"code","fb607040":"code","380ea377":"code","88cfcfae":"code","15c39539":"code","92eb18c4":"code","964d1ec2":"code","209fc690":"code","3165fa72":"code","9d7c0b69":"code","f98b5168":"code","fd01c3f5":"code","7d968413":"code","e4d0c209":"markdown","e35331eb":"markdown","71921baa":"markdown","235ad289":"markdown","d31decc8":"markdown","b77a2cd7":"markdown","9a44f877":"markdown","b5c51b75":"markdown","bb2d2e63":"markdown","c3fff527":"markdown","bf235885":"markdown","a86f1950":"markdown","355ea822":"markdown","b338856c":"markdown","03f98db5":"markdown","2e8522d0":"markdown","d70d3d25":"markdown","5b7cbef7":"markdown","bb91416f":"markdown","f7f0169c":"markdown","c2076cdc":"markdown","b1b48af8":"markdown","74d39dae":"markdown","73e0a28b":"markdown","928ef493":"markdown","c805fe69":"markdown","88998c58":"markdown","36ec3da8":"markdown"},"source":{"6858ffca":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","188f2f2d":"data=pd.read_csv('\/kaggle\/input\/league-of-legends-diamond-ranked-games-10-min\/high_diamond_ranked_10min.csv')","38fb0bff":"data.head()","7aa8a333":"data.info()","0ecfffe8":"sns.heatmap(data.isnull(),cmap='Blues')","65d95f4f":"result=pd.DataFrame({'BlueWin':data['blueWins']})\nresult.head()","dd53df53":"data.drop(['gameId'],inplace=True,axis=1)","5283dfd6":"data.head(1)","c260446a":"data.head(1)","f76546d7":"blue_features=[]\nred_features=[]\nfor col in list(data):\n    if(col[0]=='r'):\n        red_features.append(col)\n    if(col[0]=='b'):\n        blue_features.append(col)","aaac4207":"blue_features","83cd0407":"blue=data[blue_features]\nred_features.append(\"blueWins\")\nred=data[red_features]","441c6461":"blue.head()","420feea9":"red.head()","51515a29":"g=sns.PairGrid(data=red,hue='blueWins',palette='Set1')\ng.map_diag(plt.hist)\ng.map_offdiag(plt.scatter)\ng.add_legend();","4931ec5b":"g=sns.PairGrid(data=blue,hue='blueWins',palette='Set1')\ng.map_diag(plt.hist)\ng.map_offdiag(plt.scatter)\ng.add_legend();","4ecd40db":"Red_win=len(data[data['blueWins']==0])\nBlue_win=len(data['blueWins'])-len(data[data['blueWins']==1])\nprint(Blue_win)\nprint(Red_win)","eb1bac72":"g = sns.countplot(x=data['blueWins'])","8431a056":"plt.figure(figsize=(16,5))\nsns.heatmap(red.corr(),annot=True,cmap='Reds')","8774a27f":"red.drop(['redWardsPlaced','redWardsDestroyed','redFirstBlood','redHeralds','redTowersDestroyed','redTotalJungleMinionsKilled','blueWins'],axis=1,inplace=True)","98684056":"red.head(1)","9c63a99b":"plt.figure(figsize=(18,5))\nsns.heatmap(blue.corr(),annot=True,cmap='Blues')","c1718417":"blue.drop(['blueTotalJungleMinionsKilled','blueWardsPlaced','blueWardsDestroyed','blueFirstBlood','blueHeralds','blueTowersDestroyed'],axis=1,inplace=True)","70392502":"blue.head(1)","7b2cd7fa":"final_data=pd.concat([red,blue],axis=1)","2d30df18":"final_data.head(2)","da3bf8dc":"from sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.svm import SVC\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score\nfrom sklearn import preprocessing \nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA","9d85a09a":"x=data.drop('blueWins',axis=1)\ny=data['blueWins']","5a9a6aac":"x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=9)","d9b279bd":"final_LR=LogisticRegression()","fed90b1e":"final_LR.fit(x_train,y_train)","b97d5a53":"result_LR=final_LR.predict(x_test)\nprint(accuracy_score(result_LR,y_test))","b984220f":"x_mod=final_data.drop('blueWins',axis=1)\ny_mod=final_data['blueWins']","5b523f4a":"x_mod_train,x_mod_test,y_mod_train,y_mod_test=train_test_split(x_mod,y_mod,test_size=0.3,random_state=9)","7bfecedf":"mod_LR=LogisticRegression()","635f341d":"mod_LR.fit(x_mod_train,y_mod_train)","b108b7dd":"Mod_result=mod_LR.predict(x_mod_test)","52547c04":"accuracy_score(Mod_result,y_mod_test)","db8f4630":"x=data.drop('blueWins',axis=1)\ny=data['blueWins']","d8c201c6":"x=preprocessing.StandardScaler().fit_transform(x)","f8907aa3":"pca=PCA(n_components=2)","fb607040":"components=pca.fit_transform(x)","380ea377":"plt.figure(figsize=(10,8))\nplt.scatter(components[:,0],components[:,1],c=y,cmap='plasma')\nplt.xlabel('First Principal Comp')\nplt.ylabel('Second Principal COmp')","88cfcfae":"x=final_data.drop('blueWins',axis=1)\ny=data['blueWins']","15c39539":"x=preprocessing.StandardScaler().fit_transform(x)","92eb18c4":"pca=PCA(n_components=3)","964d1ec2":"components=pca.fit(x)","209fc690":"transfrom=components.transform(x)","3165fa72":"plt.figure(figsize=(10,8))\nplt.scatter(transfrom[:,0],transfrom[:,1],c=y,cmap='plasma')\nplt.xlabel('First Principal Comp')\nplt.ylabel('Second Principal COmp')","9d7c0b69":"components.components_","f98b5168":"final_data.drop('blueWins',axis=1,inplace=True)","fd01c3f5":"q=pd.DataFrame(components.components_,columns=final_data.columns)\nq","7d968413":"plt.figure(figsize=(12,6))\nsns.heatmap(q,cmap='plasma')","e4d0c209":"**Now let's work on our Model fitting and prediction**","e35331eb":"**Principal Component Analysis (PCA)**","71921baa":"**As our data is given in a well mannered form so let's split it into Red vs Blue , Removing the game id and storing the result in a new DataFrame**","235ad289":"Removing the data which doesn't giving any strong corelation","d31decc8":"**Well we get an accuracy of 73% just 1 more percent than the rwa data well well well the game is savage :(**","b77a2cd7":"Standardising our data so as to get our result much better :)","9a44f877":"**Now let's move towards predicting our model**","b5c51b75":"2. **Modified Data**","bb2d2e63":"2. **Now let's see the result of our modified data :)**","c3fff527":"As we are having both the data of both the teams so many of you will think we will predict using one of the team data and it will gonna to give correct result but it will goona to give **Baised** result so we will predict using **Principal Component Analysis** to get more accurate result","bf235885":"Now we will se the corelation between **blue Wins and Blue team other datasets** and will select the most positively correlated so to train our model for the most accurate **1** value results","a86f1950":"Well it's a tie betweem them :)","355ea822":"1. **Applying on the raw data**","b338856c":"**Well in this case the story remains the same :(**","03f98db5":"Now we will se the corelation between **blue Wins and Red team other datasets** and will select the most negatively correlated so to train our model for the most accurate **0** value results","2e8522d0":"1. **Now let's see the result if we take all of our data and use it for modeling and prediction**","d70d3d25":"**We are now ready to take off towards visualization of our data :)**","5b7cbef7":"Well that's great we are having no missing values :)","bb91416f":"**I HOPE YOU WILL LIKE THIS NOTEBOOK AND IT WILL ANSWER MANY OF YOUR QUESTION'S !!!**","f7f0169c":"In the above correlation is negative between blueWins and rest data because it is showing 1 for the **Blue win** and 0 for **Red win**","c2076cdc":"**Let's Check whether we are having missing values or not !**","b1b48af8":"**Well in the below 2 graphs blue one corresponds to BLUE team win and red one corresponds to RED team win :)**","74d39dae":"Let's check out how many times which team won most!","73e0a28b":"Well on doing nothing and puting our data as it is we get an accuracy of **72%** :)","928ef493":"Removing the least positively corelated items from it ","c805fe69":"**As you can see that we are having a different type of data which contains outlier's also in a large quantity that's why our prediction model is not giving much high accuracy**","88998c58":"Here in the component's we have transformed our data of many column into the 2 columns which predict our data best :)","36ec3da8":"Look above for the **PCA** visualization"}}