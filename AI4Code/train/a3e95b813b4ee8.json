{"cell_type":{"7f1a1f07":"code","b2d23080":"code","202d1586":"code","f2e27e94":"code","468f69d2":"code","3b0ed121":"code","fbf117b3":"code","1cc8ffc7":"code","9ab1de9f":"code","9bca039e":"code","b61c6cee":"code","bd2bceb6":"code","fe88f211":"code","6c46cbbf":"code","4916d035":"code","c07598c7":"code","358ffbfc":"code","0e4e353d":"code","14a7fa7d":"code","61128748":"code","4edd3d97":"code","cede180e":"code","c2ee55d2":"code","ef278bf7":"code","0903f203":"code","113e1ee7":"code","6497a0f0":"code","121aeacf":"code","565bd1c8":"code","15a49c1b":"code","b380b17e":"code","3c26eef4":"code","626b3baa":"code","22f88736":"code","72e0682f":"code","dcc19457":"code","52eb39bf":"code","d3231538":"code","8a71b974":"code","0704c069":"code","8f5e46da":"code","9a40e659":"code","1e2c80bf":"code","1d66b82e":"code","ec39fa10":"code","4a2d3542":"code","56d10eed":"code","d9731104":"code","ccd890e8":"code","e1dd89dc":"code","3c83439c":"code","2ef1dc8e":"code","c69b9f59":"code","3eb7f30f":"code","89f730ed":"markdown","908d24f9":"markdown","0557e613":"markdown","18af5a0e":"markdown","c2eada21":"markdown","d674b800":"markdown","2401ce35":"markdown","37a0ae6d":"markdown","a135aaa4":"markdown","79c5fd98":"markdown","edb342f1":"markdown","25a276be":"markdown","87621d10":"markdown","5992ed6f":"markdown","903321f1":"markdown","764837d3":"markdown","b4f31e90":"markdown","8873149b":"markdown","f2684352":"markdown","40fbf572":"markdown","ba0f9952":"markdown","2ff78586":"markdown","31036404":"markdown","d3bacdec":"markdown","2fafcda6":"markdown","1a30078b":"markdown","fb5875e7":"markdown","c72a31ed":"markdown","a2432707":"markdown","2e930754":"markdown","50c6497e":"markdown","ce3ec629":"markdown","26524a33":"markdown","d7758440":"markdown","81753cb3":"markdown","96c23509":"markdown"},"source":{"7f1a1f07":"# Importing relevant libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sb","b2d23080":"import matplotlib.dates as mdates\nimport plotly.express as px\nfrom datetime import date, timedelta\nfrom sklearn.cluster import KMeans\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, add_changepoints_to_plot\nimport plotly.offline as py\nfrom statsmodels.tsa.arima_model import ARIMA\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport statsmodels.api as sm\nfrom keras.models import Sequential\nfrom keras.layers import LSTM,Dense\nfrom keras.layers import Dropout\nfrom sklearn.preprocessing import MinMaxScaler\nfrom tensorflow.keras.preprocessing.sequence import TimeseriesGenerator\nfrom statsmodels.tsa.seasonal import seasonal_decompose","202d1586":"# Importing the datasets into a pandas dataframe\npatient=pd.read_csv('..\/input\/coronavirusdataset\/patient.csv')\ntime=pd.read_csv('..\/input\/coronavirusdataset\/time.csv')\nroute=pd.read_csv('..\/input\/coronavirusdataset\/route.csv')\ntrend=pd.read_csv('..\/input\/coronavirusdataset\/trend.csv')\ncase=pd.read_csv('..\/input\/coronavirusdataset\/case.csv')","f2e27e94":"patient.info()","468f69d2":"# Descriptive statistics of the patients table\npatient.describe()","3b0ed121":"# First few rows of the table\npatient.head()","fbf117b3":"# Checking for nulls in different columns\npatient.isna().sum()","1cc8ffc7":"# Creating a copy of patient table\ndf=patient.copy()","9ab1de9f":"# Changing the data type of year to int type\npatient['birth_year'] = patient.birth_year.fillna(0.0).astype(int)\npatient['birth_year'] = patient['birth_year'].map(lambda val: val if val > 0 else np.nan)","9bca039e":"patient['age']=2020-patient['birth_year']","b61c6cee":"import math\ndef age_group(age):\n    if(age>=0):\n        if age % 10 != 0:\n            lower=(math.floor(age\/10))*10\n            upper=(math.ceil(age\/10))*10-1\n            return(str(lower)+'-'+str(upper))\n        else:\n            lower = int(age)\n            upper = int(age + 9) \n            return f\"{lower}-{upper}\"\n    return('Unknown')","bd2bceb6":"patient[\"age_group\"] = patient[\"age\"].apply(age_group)","fe88f211":"patient['confirmed_date']=pd.to_datetime(patient['confirmed_date'])\npatient['released_date']=pd.to_datetime(patient['released_date'])\npatient['deceased_date']=pd.to_datetime(patient['deceased_date'])","6c46cbbf":"patient['release_time']=patient['released_date']-patient['confirmed_date']\npatient['death_time']=patient['deceased_date']-patient['confirmed_date']\npatient[\"duration_since_confirmed\"] = patient[[\"release_time\", \"death_time\"]].min(axis=1)\npatient[\"duration_days\"] = patient[\"duration_since_confirmed\"].dt.days","4916d035":"# Calculating the percentage of recovery,isolated and deceased patients.\nrp = patient.loc[patient[\"state\"] == \"released\"].shape[0]\ndp = patient.loc[patient[\"state\"] == \"deceased\"].shape[0]\nip = patient.loc[patient[\"state\"]== \"isolated\"].shape[0]\nrp=rp\/patient.shape[0]\ndp=dp\/patient.shape[0]\nip=ip\/patient.shape[0]\nprint(\"The percentage of recovery is \"+ str(rp*100) )\nprint(\"The percentage of deceased is \"+ str(dp*100) )\nprint(\"The percentage of isolated is \"+ str(ip*100) )","c07598c7":"k=patient['state'].value_counts()\nk.plot(kind='pie',figsize=(20,10),legend=True)\nplt.legend(loc=0,bbox_to_anchor=(1.5,0.5));","358ffbfc":"k=patient['infection_reason'].value_counts()\nk.plot(kind='pie',figsize=(20,10),legend=True)\nplt.legend(loc=0,bbox_to_anchor=(2.0,0.5));","0e4e353d":"# Splitting the data into three parts depending upo their state.\nreleased=patient[patient['state']=='released']\ndeceased=patient[patient['state']=='deceased']\nisolated=patient[patient['state']=='isolated']","14a7fa7d":"# Creating a new column of state by gender\npatient[\"state_by_gender\"] = patient[\"state\"] + \"_\" + patient[\"sex\"]","61128748":"plt.figure(figsize=[15,10])\nsb.barplot(x='country',y='age',hue='state',data=patient)\nplt.legend(loc='best');","4edd3d97":"plt.figure(figsize=[15,10])\nsb.barplot(x='country',y='age',hue='sex',data=deceased)\nplt.legend(loc='best');","cede180e":"plt.figure(figsize=[12,7])\nsb.countplot(data=patient,x='state',hue='sex');","c2ee55d2":"plt.figure(figsize=[12,7])\nsb.countplot(data=patient,x='state',hue='infection_reason');","ef278bf7":"plt.figure(figsize=[12,7])\nsb.violinplot(data=patient,x='state',y='age',hue='sex')\nplt.show();","0903f203":"plt.figure(figsize=[12,7])\nsb.violinplot(data=patient,x='sex',y='age')\nplt.show();","113e1ee7":"plt.figure(figsize=[12,7])\nsb.violinplot(data=patient,x='country',y='age',hue='sex')\nplt.show();","6497a0f0":"daily_count = patient.groupby(patient.confirmed_date).patient_id.count()","121aeacf":"accumulated_count = daily_count.cumsum()","565bd1c8":"plt.figure(figsize=[25,7])\naccumulated_count.plot()\nplt.title('Accumulated Confirmed Count');","15a49c1b":"sb.kdeplot(data=deceased['age'],label='deceased', shade=True)\nsb.kdeplot(data=released['age'],label='released', shade=True)\nsb.kdeplot(data=isolated['age'],label='isolated', shade=True);","b380b17e":"plt.figure(figsize=(15, 5))\nplt.title('Sex')\ndeceased.sex.value_counts().plot.bar();","3c26eef4":"plt.figure(figsize=[18,7])\nsb.countplot(data=patient,x='age_group',hue='state_by_gender')\nplt.legend(loc='best');","626b3baa":"sb.set_style(\"whitegrid\")\nsb.FacetGrid(patient, hue = 'state', height = 10).map(plt.scatter, 'age', 'region').add_legend()\nplt.title('Region by age and state')\nplt.show()","22f88736":"plt.figure(figsize=[12,7])\nsb.countplot(data=deceased,x='sex',hue='disease');","72e0682f":"plt.figure(figsize=[12,7])\nsb.countplot(data=patient,x='state',hue='disease');","dcc19457":"route.head()","52eb39bf":"route.info()","d3231538":"clus=route.loc[:,['id','latitude','longitude']]\nclus.head(10)","8a71b974":"K_clusters = range(1,8)\nkmeans = [KMeans(n_clusters=i) for i in K_clusters]\nY_axis = route[['latitude']]\nX_axis = route[['longitude']]\nscore = [kmeans[i].fit(Y_axis).score(Y_axis) for i in range(len(kmeans))]\nplt.plot(K_clusters, score)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Score')\nplt.show()","0704c069":"kmeans = KMeans(n_clusters = 4, init ='k-means++')\nkmeans.fit(clus[clus.columns[1:3]])\nclus['cluster_label'] = kmeans.fit_predict(clus[clus.columns[1:3]])\ncenters = kmeans.cluster_centers_\nlabels = kmeans.predict(clus[clus.columns[1:3]])","8f5e46da":"clus.plot.scatter(x = 'latitude', y = 'longitude', c=labels, s=50, cmap='viridis')\nplt.scatter(centers[:, 0], centers[:, 1], c='black', s=100, alpha=0.5);","9a40e659":"import folium\nsouthkorea_map = folium.Map(location=[36.55,126.983333 ], zoom_start=7,tiles='Stamen Toner')\n\nfor lat, lon,city in zip(route['latitude'], route['longitude'],route['city']):\n    folium.CircleMarker([lat, lon],\n                        radius=5,\n                        color='red',\n                      popup =('City: ' + str(city) + '<br>'),\n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(southkorea_map)\nsouthkorea_map","1e2c80bf":"plt.figure(figsize=(15,5))\nplt.title('Number patients in city')\nroute.city.value_counts().plot.bar();","1d66b82e":"plt.figure(figsize=(15,5))\nplt.title('Number patients in Province\/State')\nroute.province.value_counts().plot.bar();","ec39fa10":"plt.figure(figsize=(15,5))\nplt.title('Visit')\nroute.visit.value_counts().plot.bar();","4a2d3542":"plt.figure(figsize=(12, 8))\nsb.boxplot(x=\"sex\",\n            y=\"duration_days\",hue='state',\n            hue_order=[\"released\", \"deceased\"],\n            data=patient)\nplt.title(\"Time from confirmation to release or death\");","56d10eed":"plt.figure(figsize=(12, 8))\nsb.boxplot(x=\"age_group\",\n            y=\"duration_days\",hue='state',\n            hue_order=[\"released\", \"deceased\"],\n            data=patient)\nplt.title(\"Time from confirmation to release or death\");","d9731104":"trend.describe()","ccd890e8":"trend_cold=trend[['date','cold']]\ntrend_flu=trend[['date','flu']]\ntrend_pneumonia=trend[['date','pneumonia']]\ntrend_coronavirus=trend[['date','coronavirus']]","e1dd89dc":"trend_cold['date']=pd.to_datetime(trend_cold['date'])\ntrend_cold.index=trend_cold['date']\ntrend_cold.drop(['date'],axis=1,inplace=True)\ntrend_flu['date']=pd.to_datetime(trend_flu['date'])\ntrend_flu.index=trend_flu['date']\ntrend_flu.drop(['date'],axis=1,inplace=True)\ntrend_pneumonia['date']=pd.to_datetime(trend_pneumonia['date'])\ntrend_pneumonia.index=trend_pneumonia['date']\ntrend_pneumonia.drop(['date'],axis=1,inplace=True)\ntrend_coronavirus['date']=pd.to_datetime(trend_coronavirus['date'])\ntrend_coronavirus.index=trend_coronavirus['date']\ntrend_coronavirus.drop(['date'],axis=1,inplace=True)","3c83439c":"decomposition = seasonal_decompose(trend_cold) \ntrend_cld = decomposition.trend\nplt.figure(figsize=(18, 8))\nplt.plot(trend_cld, label='Trend')\nplt.title('Trend of Cold')\nplt.legend(loc='best');","2ef1dc8e":"plt.figure(figsize=(18, 8))\ndecomposition = seasonal_decompose(trend_flu) \ntrend_fl = decomposition.trend\nplt.plot(trend_fl, label='Trend')\nplt.title('Trend of flu')\nplt.legend(loc='best');","c69b9f59":"plt.figure(figsize=(18, 8))\ndecomposition = seasonal_decompose(trend_pneumonia) \ntrend_pneu = decomposition.trend\nplt.plot(trend_pneu, label='Trend')\nplt.title('Trend of Pneumonia')\nplt.legend(loc='best');","3eb7f30f":"plt.figure(figsize=(18, 8))\ndecomposition = seasonal_decompose(trend_coronavirus) \ntrend_corona = decomposition.trend\nplt.plot(trend_corona, label='Trend')\nplt.title('Trend of Coronavirus')\nplt.legend(loc='best');","89f730ed":"### Age wise distribution of patients depending upon their state.","908d24f9":"### Trend of patients infected with coronavirus.","0557e613":"> Route dataset.","18af5a0e":"### Cluster of patients depending upon their geographical location.","c2eada21":"### Distribution of patients with age and gender.","d674b800":"### Time from confirmation to release or death based on gender.","2401ce35":"## Patient Table","37a0ae6d":"### Distribution of patients by region,age and state.","a135aaa4":"> Crerating a column age so as to determine the age of patients whose birth year have provided.","79c5fd98":"### Distribution of patients with age,gender and country.","edb342f1":"### Accumulated confirmed count of patients till date.","25a276be":"> Creating a column age group in the patient table and defining the age group according to the function accordingly.","87621d10":"### Distribution of patients based on their age-group and state by gender.","5992ed6f":"### Gender wise distribution of patients depending upon their state.","903321f1":"### Pie chart for distribution of patients depending upon infection reason.","764837d3":"### Count of patients based on on their state and their infection reason accordingly.","b4f31e90":"### Pie chart for distribution of patients depending upon their state.","8873149b":"# Covid Analysis (South Korea)\n\nHere the covid dataset available of korea is analyzed for each section and category of patients.","f2684352":"### Age distribution of patients depending upon their state.","40fbf572":"### Count of patients gender wise from those who died.","ba0f9952":"### Count deceased patients gender wise.","2ff78586":"### Count of patients by type of places visited before getting infected.","31036404":"### Count of patients by State\/Province.","d3bacdec":"#### Trend of different diseases dataset.","2fafcda6":"> Converting the date columns to datetime format.","1a30078b":"### Count of patients based on their state and if they had any underlying disease.\n> disease = 1 (means the patient has an underlying disease.)","fb5875e7":"### Time from confirmation to release or death based on age group.","c72a31ed":"### Trend of patients infected with pneumonia.","a2432707":"### Trend of patients infected with flu.","2e930754":"### comparing the result with actual distribution of patients.","50c6497e":"### Gender wise distribution of patients depending upon their state.","ce3ec629":"### Count of patients according to city.","26524a33":"### Calculating release time,death time and duration after confirmation and storing it in a new column accordingly.","d7758440":"## Trend of patients suffering from cold.","81753cb3":"### Gender wise distribution of patients in different countries.","96c23509":"> Creating a function to define age group of 10 year span"}}