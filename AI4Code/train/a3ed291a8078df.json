{"cell_type":{"5559832a":"code","c17b4c71":"code","994568df":"code","c14c219b":"code","8e6da504":"code","226671ac":"code","c20e0b7d":"code","111ec8c4":"code","7a5ce745":"code","41a8950b":"code","e21653d6":"code","ef6bcf70":"code","0db37c7e":"code","cde535c7":"code","fdea2a81":"code","ce48aa56":"code","6c2d1c1f":"code","1b42f347":"code","e0e6a8aa":"code","3924facd":"code","5d940868":"code","ddc7c914":"code","5b5fba50":"code","9471590e":"code","35d9ae26":"code","d670b8cb":"code","012f4d5f":"code","d0718c18":"code","e0e9092b":"markdown","a400180e":"markdown","83be62f8":"markdown","a75a3ef3":"markdown"},"source":{"5559832a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c17b4c71":"!pip install transformers","994568df":"#import tensorflow as tf\nimport torch\nfrom torch.utils.data import TensorDataset, random_split\nfrom torch.utils.data import DataLoader, RandomSampler, SequentialSampler\nfrom transformers import BertTokenizer, get_linear_schedule_with_warmup\nfrom transformers import BertForSequenceClassification, AdamW, BertConfig\nimport torch.nn.functional as F\n\n\nimport pandas as pd\nimport numpy as np\nimport time\nimport datetime\nimport random, re\nimport seaborn as sns\nimport matplotlib.pyplot as plt","c14c219b":"# Check device \n# Get the GPU device name if available.\nif torch.cuda.is_available():    \n\n    # Tell PyTorch to use the GPU.    \n    device = torch.device(\"cuda\")\n\n    print('There are %d GPU(s) available. {}'.format(torch.cuda.device_count()))\n\n    print('We will use the GPU: {}'.format(torch.cuda.get_device_name(0)))\n\n# If we dont have GPU but a CPU, training will take place on CPU instead\nelse:\n    print('No GPU available, using the CPU instead.')\n    device = torch.device(\"cpu\")\n    \n# Set the seed value all over the place to make this reproducible.\nseed_val = 42\n\nrandom.seed(seed_val)\nnp.random.seed(seed_val)\ntorch.manual_seed(seed_val)\ntorch.cuda.manual_seed_all(seed_val)","8e6da504":"# Read the data\ntrain = pd.read_csv('..\/input\/nlp-getting-started\/train.csv')\ntest = pd.read_csv('..\/input\/nlp-getting-started\/test.csv')\npd.set_option('display.max_colwidth', 150)\ntrain.head()","226671ac":"train.info()","c20e0b7d":"# Report the number of sentences.\nprint('Number of training sentences: {:,}\\n'.format(train.shape[0]))\nprint('Number of test sentences: {:,}\\n'.format(test.shape[0]))","111ec8c4":"def clean_text(text):\n    \n    text = text.lower() #lowercase\n    \n    text = re.sub(r'[!]+','!',text)\n    text = re.sub(r'[?]+','?',text)\n    text = re.sub(r'[.]+','.',text)\n    text = re.sub(r\"'\",\"\",text)\n    text = re.sub('\\s+', '', text).strip() # Remove and double spaces\n    text = re.sub(r'&amp;?',r'and', text) # replace & -> and\n    text = re.sub(r\"https?:\\\/\\\/t.co\\\/[A-Za-z0-9]+\", \"\", text) # Remove URLs\n    text = re.sub(r'[:\"$%&\\*+,-\/:;<=>@\\\\^_`{|}~]+','',text) #remove some puncts (except . ! # ?)\n    \n    return text\n\n#train['text'] = train['text'].apply(clean_text)\n#test['text'] = test['text'].apply(clean_text)\n\ntrain.head()","7a5ce745":"# Plot count of true and false tweets in the train set\nsns.countplot(x=\"target\", data=train, palette=\"dark\", linewidth=5)\nplt.show()\n\nprint('Number of true and false tweets contained in the dataset:')\nprint(train['target'].value_counts())","41a8950b":"# Get the lists of sentences and their labels.\nsentences = train.text.values\nlabels = train.target.values\nsentences_test = test.text.values\n\n# Load the BERT tokenizer.\n#To feed our text to BERT, it must be split into tokens, and then these tokens must be \n#mapped to their index in the tokenizer vocabulary.\n#The tokenization must be performed by the tokenizer included with BERT\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased', do_lower_case=True)","e21653d6":"# Print the original sentence.\nprint(' Original: ', sentences[0])\n\n# Print the sentence split into tokens.\nprint('Tokenized: ', tokenizer.tokenize(sentences[0]))\n\n# Print the sentence mapped to token ids.\nprint('Token IDs: ', tokenizer.convert_tokens_to_ids(tokenizer.tokenize(sentences[0])))\n","ef6bcf70":"max_len = 0\n\n# Decide on a constant maximum sentence length for padding \/ truncating to \n# by choosing the max length of the sentences in the dataset.\nfor sent in sentences:\n\n    # Tokenize the text and add `[CLS]` and `[SEP]` tokens.\n    input_ids = tokenizer.encode(sent, add_special_tokens=True)\n\n    # Update the maximum sentence length.\n    max_len = max(max_len, len(input_ids))\n\nprint('Max sentence length: ', max_len)\n","0db37c7e":"# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\nattention_masks = []\n\n# For every sentence...\nfor sent in sentences:\n    # `encode_plus` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    #   (5) Pad or truncate the sentence to `max_length`\n    #   (6) Create attention masks for [PAD] tokens.\n    encoded_dict = tokenizer.encode_plus(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        max_length = 64,           # Pad & truncate all sentences.\n                        pad_to_max_length = True,\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    # Add the encoded sentence to the list.    \n    input_ids.append(encoded_dict['input_ids'])\n    \n    # And its attention mask (simply differentiates padding from non-padding).\n    attention_masks.append(encoded_dict['attention_mask'])\n\n# Convert the lists into tensors.\ninput_ids = torch.cat(input_ids, dim=0)\nattention_masks = torch.cat(attention_masks, dim=0)\nlabels = torch.tensor(labels)\n\n# Print sentence 0, now as a list of IDs.\nprint('Original sentence: ', sentences[0])\nprint('Token IDs list:', input_ids[0])\n","cde535c7":"# Combine the training inputs into a TensorDataset.\ndataset = TensorDataset(input_ids, attention_masks, labels)\n\n# Create a 80-20 train-validation split.\n# Calculate the number of samples to include in each set.\ntrain_size = int(0.8 * len(dataset))\nval_size = len(dataset) - train_size\n\n# Divide the dataset by randomly selecting samples.\ntrain_dataset, val_dataset = random_split(dataset, [train_size, val_size])\n\nprint('{:>5,} training samples'.format(train_size))\nprint('{:>5,} validation samples'.format(val_size))","fdea2a81":"# Define a batch size value for the DataLoader\n# It is not recommended to use a high value, usually batch size of 16 or 32 works perfectly\nbatch_size = 32\n\n# Create the DataLoaders for train set with the training samples in random order\ntrain_dataloader = DataLoader(\n            train_dataset,  # The training samples.\n            sampler = RandomSampler(train_dataset), # Select batches randomly\n            batch_size = batch_size \n        )\n\n# For validation the order doesn't really matter, \n# so DataLoader will just read them sequentially.\nvalidation_dataloader = DataLoader(\n            val_dataset, # The validation samples.\n            sampler = SequentialSampler(val_dataset), # Pull out batches sequentially.\n            batch_size = batch_size # Evaluate with this batch size.\n        )","ce48aa56":"# Load BertForSequenceClassification from_pretrained()\nmodel = BertForSequenceClassification.from_pretrained(\n    \"bert-base-uncased\", # Use the 12-layer BERT model, with an uncased vocab.\n    num_labels = 2, # Number of output labels--2 for binary classification (1 and 0).\n    output_attentions = False, # Whether the model returns attentions weights.\n    output_hidden_states = False, # Whether the model returns all hidden-states.\n)\n\n# Run this model on the GPU.\nmodel.cuda()","6c2d1c1f":"# Initialize the AdamW optimizer \n\noptimizer = AdamW(model.parameters(),\n                  lr = 2e-5,\n                  eps = 1e-8\n                )\n\n# Number of training epochs.\nepochs = 4\n\n# Total number of training steps is [number of batches] x [number of epochs]. \ntotal_steps = len(train_dataloader) * epochs\n\n# Create the learning rate scheduler.\nscheduler = get_linear_schedule_with_warmup(optimizer, \n                                            num_warmup_steps = 0,\n                                            num_training_steps = total_steps)","1b42f347":"# Function to calculate the accuracy of our predictions vs labels\ndef flat_accuracy(preds, labels):\n    pred_flat = np.argmax(preds, axis=1).flatten()\n    labels_flat = labels.flatten()\n    return np.sum(pred_flat == labels_flat) \/ len(labels_flat)\n\n# I will use this function to know how much time the model needed to train\ndef format_time(elapsed):\n    '''\n    Takes a time in seconds and returns a string hh:mm:ss\n    '''\n    # Round to the nearest second.\n    elapsed_rounded = int(round((elapsed)))\n    \n    # Format as hh:mm:ss\n    return str(datetime.timedelta(seconds=elapsed_rounded))","e0e6a8aa":"# We'll store a number of quantities such as training and validation loss, \n# validation accuracy, and timings.\ntraining_stats = []\n\n# Measure the total training time for the whole run.\ntotal_t0 = time.time()\n\n# For each epoch...\nfor epoch_i in range(0, epochs):\n    \n    # ========================================\n    #               Training\n    # ========================================\n    \n    # Perform one full pass over the training set.\n\n    print(\"\")\n    print('======== Epoch {:} \/ {:} ========'.format(epoch_i + 1, epochs))\n    print('Training...')\n\n    # Measure how long the training epoch takes.\n    t0 = time.time()\n\n    # Reset the total loss for this epoch.\n    total_train_loss = 0\n\n    # Put the model into training mode. Don't be mislead--the call to \n    # `train` just changes the *mode*, it doesn't *perform* the training.\n    # `dropout` and `batchnorm` layers behave differently during training\n    # vs. test (source: https:\/\/stackoverflow.com\/questions\/51433378\/what-does-model-train-do-in-pytorch)\n    model.train()\n\n    # For each batch of training data...\n    for step, batch in enumerate(train_dataloader):\n\n        # Progress update every 40 batches.\n        if step % 40 == 0 and not step == 0:\n            # Calculate elapsed time in minutes.\n            elapsed = format_time(time.time() - t0)\n            \n            # Report progress.\n            print('  Batch {:>5,}  of  {:>5,}.    Elapsed: {:}.'.format(step, len(train_dataloader), elapsed))\n\n        # Unpack this training batch from our dataloader. \n        #\n        # As we unpack the batch, we'll also copy each tensor to the GPU using the \n        # `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n\n        # Always clear any previously calculated gradients before performing a\n        # backward pass. PyTorch doesn't do this automatically because \n        # accumulating the gradients is \"convenient while training RNNs\". \n        # (source: https:\/\/stackoverflow.com\/questions\/48001598\/why-do-we-need-to-call-zero-grad-in-pytorch)\n        model.zero_grad()        \n\n        # Perform a forward pass (evaluate the model on this training batch).\n        # The documentation for this `model` function is here: \n        # https:\/\/huggingface.co\/transformers\/v2.2.0\/model_doc\/bert.html#transformers.BertForSequenceClassification\n        # It returns different numbers of parameters depending on what arguments\n        # arge given and what flags are set. For our useage here, it returns\n        # the loss (because we provided labels) and the \"logits\"--the model\n        # outputs prior to activation.\n        loss, logits = model(b_input_ids, \n                             token_type_ids=None, \n                             attention_mask=b_input_mask, \n                             labels=b_labels)\n\n        # Accumulate the training loss over all of the batches so that we can\n        # calculate the average loss at the end. `loss` is a Tensor containing a\n        # single value; the `.item()` function just returns the Python value \n        # from the tensor.\n        total_train_loss += loss.item()\n\n        # Perform a backward pass to calculate the gradients.\n        loss.backward()\n\n        # Clip the norm of the gradients to 1.0.\n        # This is to help prevent the \"exploding gradients\" problem.\n        torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)\n\n        # Update parameters and take a step using the computed gradient.\n        # The optimizer dictates the \"update rule\"--how the parameters are\n        # modified based on their gradients, the learning rate, etc.\n        optimizer.step()\n\n        # Update the learning rate.\n        scheduler.step()\n\n    # Calculate the average loss over all of the batches.\n    avg_train_loss = total_train_loss \/ len(train_dataloader)            \n    \n    # Measure how long this epoch took.\n    training_time = format_time(time.time() - t0)\n\n    print(\"\")\n    print(\"  Average training loss: {0:.2f}\".format(avg_train_loss))\n    print(\"  Training epcoh took: {:}\".format(training_time))\n        \n    # ========================================\n    #               Validation\n    # ========================================\n    # After the completion of each training epoch, measure our performance on\n    # our validation set.\n\n    print(\"\")\n    print(\"Running Validation...\")\n\n    t0 = time.time()\n\n    # Put the model in evaluation mode--the dropout layers behave differently\n    # during evaluation.\n    model.eval()\n\n    # Tracking variables \n    total_eval_accuracy = 0\n    total_eval_loss = 0\n    nb_eval_steps = 0\n\n    # Evaluate data for one epoch\n    for batch in validation_dataloader:\n        \n        # Unpack this training batch from our dataloader. \n        # As we unpack the batch, I'll also copy each tensor to the GPU using the `to` method.\n        #\n        # `batch` contains three pytorch tensors:\n        #   [0]: input ids \n        #   [1]: attention masks\n        #   [2]: labels \n        b_input_ids = batch[0].to(device)\n        b_input_mask = batch[1].to(device)\n        b_labels = batch[2].to(device)\n        \n        # Tell pytorch not to bother with constructing the compute graph during\n        # the forward pass, since this is only needed for backprop (training).\n        with torch.no_grad():        \n\n            # Forward pass, calculate logit predictions.\n            # token_type_ids is the same as the \"segment ids\", which \n            # differentiates sentence 1 and 2 in 2-sentence tasks.\n            # Get the \"logits\" output by the model. The \"logits\" are the output\n            # values prior to applying an activation function like the softmax.\n            (loss, logits) = model(b_input_ids, \n                                   token_type_ids=None, \n                                   attention_mask=b_input_mask,\n                                   labels=b_labels)\n            \n        # Accumulate the validation loss.\n        total_eval_loss += loss.item()\n\n        # Move logits and labels to CPU\n        logits = logits.detach().cpu().numpy()\n        label_ids = b_labels.to('cpu').numpy()\n\n        # Calculate the accuracy for this batch of test sentences, and\n        # accumulate it over all batches.\n        total_eval_accuracy += flat_accuracy(logits, label_ids)\n        \n\n    # Report the final accuracy for this validation run.\n    avg_val_accuracy = total_eval_accuracy \/ len(validation_dataloader)\n    print(\"  Accuracy: {0:.2f}\".format(avg_val_accuracy))\n\n    # Calculate the average loss over all of the batches.\n    avg_val_loss = total_eval_loss \/ len(validation_dataloader)\n    \n    # Measure how long the validation run took.\n    validation_time = format_time(time.time() - t0)\n    \n    print(\"  Validation Loss: {0:.2f}\".format(avg_val_loss))\n    print(\"  Validation took  {:} time\".format(validation_time))\n\n    # Record all statistics from this epoch.\n    training_stats.append(\n        {\n            'epoch': epoch_i + 1,\n            'Training Loss': avg_train_loss,\n            'Valid. Loss': avg_val_loss,\n            'Valid. Accur.': avg_val_accuracy,\n            'Training Time': training_time,\n            'Validation Time': validation_time\n        }\n    )\n\nprint(\"\")\nprint(\"Training complete!\")\n\nprint(\"Total training took {:} (h:mm:ss)\".format(format_time(time.time()-total_t0)))","3924facd":"# Display floats with two decimal places.\npd.set_option('precision', 2)\n\n# Create a DataFrame from our training statistics.\ndf_statistics = pd.DataFrame(data=training_stats)\n\n# Use the 'epoch' as the row index.\ndf_statistics = df_statistics.set_index('epoch')\n\n# A hack to force the column headers to wrap.\n#df = df.style.set_table_styles([dict(selector=\"th\",props=[('max-width', '70px')])])\n\n# Display the table.\ndf_statistics","5d940868":"# Use plot styling from seaborn.\nsns.set(style='darkgrid')\n\n# Increase the plot size and font size.\nsns.set(font_scale=1.5)\nplt.rcParams[\"figure.figsize\"] = (12,6)\n\n# Plot the learning curve.\nplt.plot(df_statistics['Training Loss'], 'b-o', label=\"Training\")\nplt.plot(df_statistics['Valid. Loss'], 'g-o', label=\"Validation\")\n\n# Label the plot.\nplt.title(\"Training & Validation Loss\")\nplt.xlabel(\"Epoch\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.xticks([1, 2, 3, 4])\n\nplt.show()","ddc7c914":"# Report the number of sentences.\nprint('Number of test sentences: {:,}\\n'.format(test.shape[0]))\n\n# Create sentence and label lists\nsentences_test = test.text.values\n\n# Tokenize all of the sentences and map the tokens to thier word IDs.\ninput_ids = []\nattention_masks = []\n\n# For every sentence...\nfor sent in sentences_test:\n    # `encode_plus` will:\n    #   (1) Tokenize the sentence.\n    #   (2) Prepend the `[CLS]` token to the start.\n    #   (3) Append the `[SEP]` token to the end.\n    #   (4) Map tokens to their IDs.\n    #   (5) Pad or truncate the sentence to `max_length`\n    #   (6) Create attention masks for [PAD] tokens.\n    encoded_dict = tokenizer.encode_plus(\n                        sent,                      # Sentence to encode.\n                        add_special_tokens = True, # Add '[CLS]' and '[SEP]'\n                        max_length = 64,           # Pad & truncate all sentences.\n                        pad_to_max_length = True,\n                        return_attention_mask = True,   # Construct attn. masks.\n                        return_tensors = 'pt',     # Return pytorch tensors.\n                   )\n    \n    # Add the encoded sentence to the list.    \n    input_ids.append(encoded_dict['input_ids'])\n    \n    # And its attention mask (simply differentiates padding from non-padding).\n    attention_masks.append(encoded_dict['attention_mask'])\n\n# Convert the lists into tensors.\ninput_ids = torch.cat(input_ids, dim=0)\nattention_masks = torch.cat(attention_masks, dim=0)\n\n# Set the batch size.  \nbatch_size = batch_size # same as in training: 32  \n\n# Create the DataLoader.\nprediction_data = TensorDataset(input_ids, attention_masks)\nprediction_sampler = SequentialSampler(prediction_data)\nprediction_dataloader = DataLoader(prediction_data, sampler=prediction_sampler, batch_size=batch_size)","5b5fba50":"# Prediction on test set\n\nprint('Predicting labels for {:,} test sentences...'.format(len(input_ids)))\n\nmodel.eval()\n# Tracking variables \npredictions = []\n\n# Predict \nfor batch in prediction_dataloader:\n    # Add batch to GPU\n    batch = tuple(t.to(device) for t in batch)\n\n    # Unpack the inputs from our dataloader\n    b_input_ids, b_input_mask = batch\n\n    # Telling the model not to compute or store gradients, saving memory and \n    # speeding up prediction\n    with torch.no_grad():\n      # Forward pass, calculate logit predictions\n      outputs = model(b_input_ids, token_type_ids=None, \n                      attention_mask=b_input_mask)\n\n    logits = outputs[0]\n\n    # Move logits and labels to CPU\n    #logits = logits.detach().cpu().numpy()\n\n    # Store predictions and true labels\n    predictions.append(logits)\n    #true_labels.append(label_ids)\n\nprint('DONE!')\n","9471590e":"all_logits = torch.cat(predictions, dim=0) # Concatenate logits from each batch\nprobs = F.softmax(all_logits, dim=1).cpu().numpy() # Apply softmax to calculate probabilities\nprobs","35d9ae26":"threshold = 0.5\npreds = np.where(probs[:, 1] > threshold, 1, 0)\npreds","d670b8cb":"# Number of tweets labeled as true disaster tweet\nprint(\"Number of tweets labeled as true disaster tweet: \", preds.sum())","012f4d5f":"Y_test = preds","d0718c18":"df_submission = pd.read_csv('..\/input\/nlp-getting-started\/sample_submission.csv', index_col=0).fillna('')\ndf_submission['target'] = Y_test\ndf_submission.to_csv('submission.csv')\n!head submission.csv","e0e9092b":"# Submission","a400180e":"We are required to achieve some formatting requirements before training BERT:\n\n- **Add special tokens to the start and end of each sentence** -> [SEP] token at the end of each sentence and [CLS] token at the beginning of every sentence\n- **Pad & truncate all sentences to a single constant length**. -> The maximum sentence length allowed is 512 tokens. Padding is done with a special [PAD] token, which is at index 0 in the BERT vocabular\n- **Explicitly differentiate real tokens from padding tokens with the \u201cattention mask\u201d**. -> The \u201cAttention Mask\u201d is simply an array of 1s and 0s indicating which tokens are padding and which aren\u2019t. This mask tells the \u201cSelf-Attention\u201d mechanism in BERT not to incorporate these PAD tokens into its interpretation of the sentence.\n","83be62f8":"I will first modify the pre-trained BERT model to give outputs for classification, and then I will train the model on the given dataset until that the entire model, end-to-end, is well-suited for our task. The huggingface pytorch implementation includes [BertForSequenceClassification](https:\/\/huggingface.co\/transformers\/model_doc\/bert.html#bertforsequenceclassification) which is a Bert Model transformer with a sequence classification\/regression head on top (a linear layer on top of the pooled output) e.g. for GLUE tasks. As we feed input data, the entire pre-trained BERT model and the additional untrained classification layer is trained on our specific task.","a75a3ef3":"In this notebook I will fine-tune BERT with PyTorch framework to perform a classification task by using Natural Language Processing with Disaster Tweets dataset. \nIn this notebook, I will:\n\n    Load the Disaster Tweets dataset\n    Pre-processing of tweets\n    Load a BERT model from TensorFlow Hub\n    Build a BertForSequenceClassification model\n    Train the model and fine-tuning BERT\n    Perform a tweet classification for submission\n"}}