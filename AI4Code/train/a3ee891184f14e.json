{"cell_type":{"aa7e06c2":"code","dd4c1e08":"code","11139ba8":"code","2d4e9b3e":"code","ce99ea4d":"code","12bb89d3":"code","28b1d474":"code","bd287113":"code","1b62d28b":"code","f5ae079f":"code","cc72d244":"code","a27964fc":"markdown","a67aefca":"markdown"},"source":{"aa7e06c2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","dd4c1e08":"import ast\nfrom datetime import datetime\n","11139ba8":"train_data=pd.read_csv('..\/input\/train.csv')","2d4e9b3e":"test_data=pd.read_csv('..\/input\/test.csv')","ce99ea4d":"train_data.describe()","12bb89d3":"train_data.info()","28b1d474":"train_data.head()","bd287113":"def strtoint(x):\n    if type(x)==str:\n        return 1\n    else:\n        return 0","1b62d28b":"data=train_data.copy()\n\n\n\n\n#belongs_to_collection\ndata['from_collection']=data['belongs_to_collection'].fillna(0)\ndata['from_collection']=data['from_collection'].apply(strtoint)\n\n#genres\ngenres_list=[]\nunique_genres=[]\nfor genre in data['genres']:\n    try:\n        gen=ast.literal_eval(genre)\n    except:\n        gen=[]\n    genres=[]\n    for j in gen:\n        genres.append(j['name'])\n        if j['name'] in unique_genres:\n            pass\n        else:\n            unique_genres.append(j['name'])\n    genres_list.append(genres)\ndata['genres_list']=genres_list\nfor genre in unique_genres:\n    data[genre]=[0]*len(data)\nfor i,genres in data['genres_list'].iteritems():\n    for gen in genres:\n        data.set_value(i,gen,1)\n\n#Homepage\ndata['has_homepage']=data['homepage'].fillna(0)\ndata['has_homepage']=data['homepage'].apply(strtoint)\n\n#production countries\ncountries_list=[]\nunique_country=[]\nfor country in data['production_countries']:\n    try:\n        gen=ast.literal_eval(country)\n    except:\n        gen=[]\n    countrys=[]\n    for j in gen:\n        countrys.append(j['name'])\n        if j['name'] in unique_prod:\n            pass\n        else:\n            unique_prod.append(j['name'])\n    countries_list.append(countrys)\ndata['countries_count']=[len(i) for i in countries_list]\n\n#production companies\ncompanies_list=[]\nunique_company=[]\nfor company in data['production_companies']:\n    try:\n        gen=ast.literal_eval(company)\n    except:\n        gen=[]\n    companys=[]\n    for j in gen:\n        companys.append(j['name'])\n        if j['name'] in unique_company:\n            pass\n        else:\n            unique_company.append(j['name'])\n    companies_list.append(companys)\ndata['companies_count']=[len(i) for i in companies_list]\n\n#release_date\ndata['release_date']=data['release_date'].apply(lambda i:datetime.strptime(i,'%m\/%d\/%y'))\n\n#spoken_languages\nlanguages_list=[]\nunique_language=[]\nfor language in data['spoken_languages']:\n    try:\n        gen=ast.literal_eval(language)\n    except:\n        gen=[]\n    languages=[]\n    for j in gen:\n        languages.append(j['name'])\n        if j['name'] in unique_language:\n            pass\n        else:\n            unique_language.append(j['name'])\n    languages_list.append(languages)\ndata['languages_count']=[len(i) for i in languages_list]\n\n#tagline\ndata['has_tagline']=data['tagline'].apply(strtoint)\ndata['tagline']=data['tagline'].fillna('')\ndata['tagline_len']=data['tagline'].apply(lambda x:len(x))\n\n#keywords\nkeywords_list=[]\nunique_keyword=[]\nfor keyword in data['Keywords']:\n    try:\n        gen=ast.literal_eval(keyword)\n    except:\n        gen=[]\n    keywords=[]\n    for j in gen:\n        keywords.append(j['name'])\n        if j['name'] in unique_keyword:\n            pass\n        else:\n            unique_keyword.append(j['name'])\n    keywords_list.append(keywords)\ndata['keywords_count']=[len(i) for i in keywords_list]\n\n#title\ndata['title_len']=data['title'].apply(lambda x:len(x))\n\n#cast\ncasts_count=[]\nmale_casts_count=[]\nfor cast in data['cast']:\n    try:\n        gen=ast.literal_eval(cast)\n    except:\n        gen=[]\n    casts_count.append(len(gen))\n    \n    male_casts=0\n    for j in gen:\n        if j['gender']==2:\n            male_casts=male_casts+1\n        else:\n            pass\n    male_casts_count.append(male_casts)\ndata['cast_count']=casts_count\ndata['male_cast_count']=male_casts_count\n\n#crews\ncrews_dicts=[]\nunique_crews=[]\ncrew_count_list=[]\nfor crew in data['crew']:\n    try:\n        gen=ast.literal_eval(crew)\n    except:\n        gen=[]\n    crews={}\n    for j in gen:\n        j=j['department']\n        try:\n            crews[j]=crews[j]+1\n        except KeyError:\n            crews[j]=1\n        if j in unique_crews:\n            pass\n        else:\n            unique_crews.append(j)\n    crews_dicts.append(crews)\ndata['crews_dicts']=crews_dicts\nfor crew in unique_crews:\n    data[crew]=[0]*len(data)\nfor i,crew in data['crews_dicts'].iteritems():\n    for dep,count in crew.items():\n        data.set_value(i,dep,count)\n\nredundant_features=['belongs_to_collection','genres','homepage','imdb_id','original_title','overview','poster_path','production_companies','production_countries','spoken_languages','status','tagline','title','Keywords','cast','crew','crews_dicts','genres_list']\ndata=data.drop(redundant_features,axis=1)","f5ae079f":"data.head()","cc72d244":"data['budget'].hist()","a27964fc":"Lets do some preprocessing","a67aefca":"**Lets start by analysing feature by feature**"}}