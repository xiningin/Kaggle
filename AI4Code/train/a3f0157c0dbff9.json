{"cell_type":{"3a14a77f":"code","4fd28fda":"code","d8c5ab0a":"code","e466d8d7":"code","b1e5bc08":"code","3b7c5cf5":"code","ca700ffa":"code","8aca34e8":"code","82d1471b":"code","0307b190":"code","9eaf288a":"code","93885188":"code","63a534bf":"code","5acb18c1":"code","d1484b7d":"code","5fa23341":"code","eb546ed6":"code","1bdebf2b":"code","96bc4d16":"code","208e185a":"code","a1f5a13f":"code","cbd50218":"code","0465c11f":"code","a214e3a1":"code","dd0a14fe":"code","1ff39fcf":"code","0b4a89f6":"code","6289800f":"code","d385a49d":"code","a2055836":"code","88160dfb":"markdown","ecd7adfa":"markdown","269c346c":"markdown","dea43252":"markdown","e395d536":"markdown","f2b69878":"markdown","46cafd8a":"markdown","f527512c":"markdown","f53031ae":"markdown","cbb3d1ac":"markdown","b739ada1":"markdown","ed7c2250":"markdown","fa41e57b":"markdown","c1e3b6a2":"markdown","0c8b22d2":"markdown"},"source":{"3a14a77f":"import tensorflow as tf\nfrom tensorflow import keras\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns","4fd28fda":"df=pd.read_csv('..\/input\/digit-recognizer\/train.csv')\ntest=pd.read_csv('..\/input\/digit-recognizer\/test.csv')\ndf.head(1)","d8c5ab0a":"df.isnull().any().describe()","e466d8d7":"test.isnull().any().describe()","b1e5bc08":"y=df['label']\ndf1= df.drop(labels = [\"label\"],axis = 1) \ndf1.head(1)","3b7c5cf5":"df2 = df1 \/ 255.0\ntest1= test \/ 255.0","ca700ffa":"X_train = df2.values.reshape(-1,28,28,1)\ntest2 = test1.values.reshape(-1,28,28,1)","8aca34e8":"X_train[1].shape","82d1471b":"plt.matshow(X_train[1])","0307b190":"y[0]","9eaf288a":"X_train_flattern=X_train.reshape(len(X_train),28*28)\ntest_flattern=test2.reshape(len(test),28*28)","93885188":"random_seed=2","63a534bf":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(X_train_flattern, y, test_size = 0.1, random_state=random_seed)","5acb18c1":"import tensorflow as tf\n\nfrom tensorflow.keras import layers, models\nmodel = models.Sequential()\nmodel.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='relu'))\nmodel.add(layers.MaxPooling2D((2, 2)))\nmodel.add(layers.Conv2D(64, (3, 3), activation='sigmoid'))","d1484b7d":"model.summary()","5fa23341":"model.add(layers.Flatten())\nmodel.add(layers.Dense(64, activation='relu'))\nmodel.add(layers.Dense(10))","eb546ed6":"model.summary()","1bdebf2b":"print(X_train.shape)\nprint(X_val.shape)\nprint(Y_train.shape)\nprint(Y_val.shape)","96bc4d16":"model1 = keras.Sequential([\n    keras.layers.Dense(100, input_shape=(784,), activation='relu'),\n    keras.layers.Dense(10, activation='sigmoid')\n])\n\nmodel1.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel1.fit(X_train, Y_train, epochs=100)","208e185a":"loss,acc=model1.evaluate(X_val,Y_val)","a1f5a13f":"y_predicted = model1.predict(X_val)\ny_predicted_labels = [np.argmax(i) for i in y_predicted]\ncm = tf.math.confusion_matrix(labels=Y_val,predictions=y_predicted_labels)\n\nplt.figure(figsize = (10,7))\nsns.heatmap(cm, annot=True, fmt='d')\nplt.xlabel('Predicted')\nplt.ylabel('Truth')","cbd50218":"probability_model = tf.keras.Sequential([model1, \n                                         tf.keras.layers.Softmax()])","0465c11f":"predition=probability_model.predict(test)","a214e3a1":"predition[1]","dd0a14fe":"np.argmax(predition[1])","1ff39fcf":"y[1]","0b4a89f6":"model = keras.Sequential([\n    keras.layers.Flatten(input_shape=(28, 28)),\n    keras.layers.Dense(100, activation='relu'),\n    keras.layers.Dense(10, activation='sigmoid')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(X_train, Y_train, epochs=100)","6289800f":"model.evaluate(X_val,Y_val)","d385a49d":"# predict results\nresults = model.predict(test)\n\n# select the indix with the maximum probability\nresults = np.argmax(results,axis = 1)\n\nresults = pd.Series(results,name=\"Label\")","a2055836":"submission = pd.concat([pd.Series(range(1,28001),name = \"ImageId\"),results],axis = 1)\n\nsubmission.to_csv(\"digit1.csv\",index=False)","88160dfb":"**removeing the label or output and stored to y variable**","ecd7adfa":"select maximum value from the array","269c346c":"**loading the train and test data**","dea43252":"split the data into train and test data","e395d536":"check the value","f2b69878":"**flattern the data**","46cafd8a":"**ploting accurcy using confusion matrix**","f527512c":"**evaluate accuracy and loss**","f53031ae":"**ploting the value**","cbb3d1ac":"[https:\/\/www.google.com\/url?sa=i&url=https%3A%2F%2Fwww.edureka.co%2Fblog%2Ftensorflow-tutorial%2F&psig=AOvVaw3UvYuQ7iKRvFtab_jqtJi6&ust=1631265549051000&source=images&cd=vfe&ved=0CAsQjRxqFwoTCNCCoPbH8fICFQAAAAAdAAAAABAD](http:\/\/)","b739ada1":"reshapeing train and test data","ed7c2250":"**Checking thetrain and test data value is null or not**","fa41e57b":"**\n Using hidden layer**","c1e3b6a2":"importing package","0c8b22d2":"**train the model using tensorflow**"}}