{"cell_type":{"02fc8d35":"code","89fe3d73":"code","9adef2a8":"code","1701d33b":"code","f4e9b001":"code","050e66f2":"code","4706145f":"code","22d7b6c7":"code","60e3afc9":"code","be5a7a2d":"code","a3d7f954":"code","074005ca":"code","906292a7":"code","e8bec16b":"code","d7ac8453":"code","3c4c53eb":"code","3d3bb6d4":"code","d24de4b6":"code","df394b2f":"code","79066c23":"code","48c76e4d":"code","791fd658":"code","4d64fe48":"code","be955803":"code","7f67906e":"markdown","d92adc7d":"markdown","4d3b480d":"markdown","53466029":"markdown","09359e5a":"markdown"},"source":{"02fc8d35":"import tensorflow as tf\ndevice_name = tf.test.gpu_device_name()\nif \"GPU\" not in device_name:\n    print(\"GPU device not found\")\nprint('Found GPU at: {}'.format(device_name))","89fe3d73":"import os\nimport numpy as np\nimport pandas as pd\nfrom glob import glob\nfrom itertools import chain\nfrom sklearn.metrics import roc_curve, auc, roc_auc_score, accuracy_score, average_precision_score\nfrom matplotlib import pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\nimport tensorflow as tf","9adef2a8":"os.environ['CUDA_VISIBLE_DEVICES'] = '0'","1701d33b":"DATA_DIR = '..\/input\/data\/'\nimage_size = 256\nbatch_size = 32","f4e9b001":"df = pd.read_csv(f'{DATA_DIR}Data_Entry_2017.csv')","050e66f2":"data_image_paths = {os.path.basename(x): x for x in glob(os.path.join(DATA_DIR, 'images*', '*', '*.png'))}","4706145f":"df['path'] = df['Image Index'].map(data_image_paths.get)","22d7b6c7":"df['Finding Labels'] = df['Finding Labels'].map(lambda x: x.replace('No Finding', ''))","60e3afc9":"labels = np.unique(list(chain(*df['Finding Labels'].map(lambda x: x.split('|')).tolist())))\nlabels = [x for x in labels if len(x) > 0]","be5a7a2d":"labels","a3d7f954":"for label in labels:\n    if len(label) > 1:\n        df[label] = df['Finding Labels'].map(lambda finding: 1.0 if label in finding else 0.0)","074005ca":"df.head()","906292a7":"labels = [label for label in labels if df[label].sum() > 1000]","e8bec16b":"labels","d7ac8453":"train_df, valid_df = train_test_split(df, test_size=0.20, random_state=2018, stratify=df['Finding Labels'].map(lambda x: x[:4]))","3c4c53eb":"train_df['labels'] = train_df.apply(lambda x: x['Finding Labels'].split('|'), axis=1)\nvalid_df['labels'] = valid_df.apply(lambda x: x['Finding Labels'].split('|'), axis=1)","3d3bb6d4":"core_idg = ImageDataGenerator(rescale=1 \/ 255,\n                                  samplewise_center=True,\n                                  samplewise_std_normalization=True,\n                                  horizontal_flip=True,\n                                  vertical_flip=False,\n                                  height_shift_range=0.05,\n                                  width_shift_range=0.1,\n                                  rotation_range=5,\n                                  shear_range=0.1,\n                                  fill_mode='reflect',\n                                  zoom_range=0.15)\n\ntrain_gen = core_idg.flow_from_dataframe(dataframe=train_df,\n                                             directory=None,\n                                             x_col='path',\n                                             y_col='labels',\n                                             class_mode='categorical',\n                                             batch_size=batch_size,\n                                             classes=labels,\n                                             target_size=(image_size, image_size))\n\nvalid_gen = core_idg.flow_from_dataframe(dataframe=valid_df,\n                                             directory=None,\n                                             x_col='path',\n                                             y_col='labels',\n                                             class_mode='categorical',\n                                             batch_size=batch_size,\n                                             classes=labels,\n                                             target_size=(image_size, image_size))\n\ntest_X, test_Y = next(core_idg.flow_from_dataframe(dataframe=valid_df,\n                                                       directory=None,\n                                                       x_col='path',\n                                                       y_col='labels',\n                                                       class_mode='categorical',\n                                                       batch_size=1024,\n                                                       classes=labels,\n                                                       target_size=(image_size, image_size)))","d24de4b6":"from tensorflow.keras.applications.densenet import DenseNet121\nfrom tensorflow.keras.applications.inception_v3 import InceptionV3\nfrom tensorflow.keras.applications.xception import Xception\nfrom tensorflow.keras.applications.nasnet import NASNetMobile\nfrom tensorflow.keras.applications.inception_resnet_v2 import InceptionResNetV2\n\nbase_model = InceptionResNetV2(include_top=False, weights='imagenet', input_shape=(256, 256, 3))\nx = base_model.output\nx = tf.keras.layers.GlobalAveragePooling2D()(x)\noutput = tf.keras.layers.Dense(len(labels), activation=\"sigmoid\")(x)\nmodel = tf.keras.Model(base_model.input, output)\nmodel.compile(optimizer=tf.keras.optimizers.RMSprop(), loss='binary_crossentropy', metrics=['accuracy'])","df394b2f":"def get_callbacks(model_name):\n    callbacks = []\n    tensor_board = tf.keras.callbacks.TensorBoard(log_dir='.\/logs', histogram_freq=0)\n    callbacks.append(tensor_board)\n    checkpoint = tf.keras.callbacks.ModelCheckpoint(\n        filepath=f'model.{model_name}.h5',\n        verbose=1,\n        save_best_only=True)\n    # erly = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)\n    callbacks.append(checkpoint)\n    # callbacks.append(erly)\n    return callbacks","79066c23":"callbacks = get_callbacks('inceptionresnetv2')\nmodel.fit(train_gen,\n              steps_per_epoch=100,\n              validation_data=(test_X, test_Y),\n              epochs=50,\n              callbacks=callbacks)","48c76e4d":"y_pred = model.predict(test_X)","791fd658":"for label, p_count, t_count in zip(labels,\n                                     100 * np.mean(y_pred, 0),\n                                     100 * np.mean(test_Y, 0)):\n    print('%s: actual: %2.2f%%, predicted: %2.2f%%' % (label, t_count, p_count))","4d64fe48":"fig, c_ax = plt.subplots(1, 1, figsize=(9, 9))\nfor (idx, c_label) in enumerate(labels):\n    fpr, tpr, thresholds = roc_curve(test_Y[:, idx].astype(int), y_pred[:, idx])\n    c_ax.plot(fpr, tpr, label='%s (AUC:%0.2f)' % (c_label, auc(fpr, tpr)))\nc_ax.legend()\nc_ax.set_xlabel('False Positive Rate')\nc_ax.set_ylabel('True Positive Rate')\nfig.savefig('trained_net.png')","be955803":"print('ROC auc score: {:.3f}'.format(roc_auc_score(test_Y.astype(int), y_pred)))","7f67906e":"## Data preprocessing","d92adc7d":"## Train model","4d3b480d":"### Define DataGenerator","53466029":"## Create model","09359e5a":"### Preprocessing Metadata"}}