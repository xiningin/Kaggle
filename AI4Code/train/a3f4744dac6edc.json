{"cell_type":{"4c6464d2":"code","ce31e4a3":"code","ed7fafdb":"code","15ea0964":"code","d91e998e":"code","ce1d95e8":"code","75d1736f":"code","ee3e2301":"code","9088abcb":"code","298d2b85":"code","84fb13e4":"code","163affa6":"code","4004a054":"code","322ad0d4":"code","bb4e5265":"code","8f4eb652":"code","e0fe759b":"code","e84d9a00":"code","f9578dba":"code","b563888f":"code","a8084d93":"code","b6a970e7":"code","c370735e":"code","e2a5c9eb":"code","02f219fb":"code","1f6261fc":"code","03548d60":"code","4d3320ba":"code","97b7758a":"code","8b8a0e31":"code","e93eb94b":"code","27172ed2":"code","236afa35":"code","bae59df0":"markdown","e3d0085c":"markdown"},"source":{"4c6464d2":"# First of all, I will import the two libraries that will help me analyze the 911 data. \n# One of them is the poweful Pandas.\ud83d\udc3c\n\nimport numpy as np\nimport pandas as pd","ce31e4a3":"# Secondly, I will import the libraries for data visualization.\n# For a greater practicality, I will tap a code which will enable to watch the graphs after coding them.\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n% matplotlib inline","ed7fafdb":"# Now I will read the file that I will analyze and visualize.\ndf = pd.read_csv('..\/input\/911.csv')","15ea0964":"# Let's extract some informations from this file.\n\ndf.info()   # We can see that there are more than 300,000 entries and 9 columns. \n            # There are numbers (floats and integers) and strings.","d91e998e":"# Let's check the head!\n\ndf.head()   # The data contains the following fields:\n\n            # lat : String variable, Latitude\n            # lng: String variable, Longitude\n            # desc: String variable, Description of the Emergency Call\n            # zip: String variable, Zipcode\n            # title: String variable, Title\n            # timeStamp: String variable, YYYY-MM-DD HH:MM:SS\n            # twp: String variable, Township\n            # addr: String variable, Address\n            # e: String variable, Dummy variable (always 1)","ce1d95e8":"# Now I will answer some basic questions!","75d1736f":"# What're the top 5 zipcodes for 911 calls?\n\ndf.zip.value_counts().head(5)","ee3e2301":"# What're the top 5 townships (twp) for 911 calls?\n\ndf.twp.value_counts().head(5)","9088abcb":"# How many unique title codes are there?\n\ndf.title.nunique()","298d2b85":"# To better understand the informations whitin the data and posteriorly to use for a better prediction, ...\n# ... is important create a new column from 'title' column with only the Reason.\n\ndf['Reason'] = df['title'].apply(lambda title: title.split(':')[0])","84fb13e4":"# Lets check the result!\n\ndf.head(3)","163affa6":"# What's the most common Reason for a 911 call based in this new column?\n\ndf.Reason.value_counts()","4004a054":"# Let's do the first graph visualization.\n# \"911 calls X Reason\"\"\n\nsns.countplot(x='Reason', data=df)","322ad0d4":"# What's the data type of the objects in the 'timeStamp' column?\n\ntype(df['timeStamp'].iloc[0])","bb4e5265":"# The timestamps are still strings. \n# I have to convert the column to DateTime objects with the purpose to better use in data analize.\n\ndf['timeStamp'] = pd.to_datetime(df['timeStamp'])","8f4eb652":"# One more time, to good understand the informations and get a better prediction, ...\n# ... is important create new columns, from 'timeStamp' column, called 'Hour', 'Month' and 'Day of Week'.\n\ndf['Hour'] = df['timeStamp'].apply(lambda time: time.hour)\ndf['Month'] = df['timeStamp'].apply(lambda time: time.month)\ndf['Day of Week'] = df['timeStamp'].apply(lambda time: time.dayofweek)\n\n# Let's see the result.\n\ndf.head(3) ","e0fe759b":"# The 'Day of Week' column has only number instead of strings, such as 'Mon', 'Sun', 'Thu' and so on.\n# I will solve this problem.\n\ndmap = {0:'Mon', 1:'Tue', 2:'Wed', 3:'Thu', 4:'Fri', 5:'Sat', 6:'Sun'}\ndf['Day of Week'] = df['Day of Week'].map(dmap)\n\n# Let's check if the problem was solved.\n\ndf.head(3) # Now we can see that the values in the 'Day of Week'changed from number to days of week.","e84d9a00":"# Now I can use these new columns to do a new graph using 'Day of Week' column with the hue based in the Reason column.\n\nsns.countplot(x='Day of Week',data=df,hue='Reason',palette='viridis')\n\n# To relocate the legend\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)","f9578dba":"# Now I will do the same thing for 'Month'\n\nsns.countplot(x='Month',data=df,hue='Reason',palette='viridis')\n\n# To relocate the legend\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.) \n\n# We can notice that is missing some months: 9,10, and 11 are not there.","b563888f":"# let's see if we can maybe fill in this information by plotting the information in another way.\n# I will create a gropuby object called 'byMonth', where I group the DataFrame by the month column and use the count() method for aggregation.\n\nbyMonth = df.groupby('Month').count()\n\n# Let's chck the result!\n\nbyMonth.head()","a8084d93":"# Now I will create a simple plot of the dataframe indicating the count of calls per month.\n# Could be any column\n\nbyMonth['twp'].plot() #That's it. I got it!","b6a970e7":"# I will see if I can use seaborn's lmplot() to create a linear fit on the number of calls per month. \n# I can't forget that I need to reset the index to a column.\n\n\nsns.lmplot(x='Month',y='twp',data=byMonth.reset_index())","c370735e":"# I will create a new column called 'Date' that contains the date from the timeStamp column.\n# As I sad before, these news columns helps better unsderstand the informations.\n\ndf['Date']=df['timeStamp'].apply(lambda t: t.date())\n\n# Let's check!\n\ndf.head(3)","e2a5c9eb":"# Now groupby this Date column with the count() aggregate and create a plot of counts of 911 calls.\n\nplt.figure(figsize=(14,6)) # To better distinguish the legends.\ndf.groupby('Date').count()['twp'].plot()\nplt.tight_layout()","02f219fb":"# Now I will recreate this plot, but creating 3 separate plots with each plot representing a Reason for the 911 call.\n\nplt.figure(figsize=(14,6))\ndf[df['Reason']=='Traffic'].groupby('Date').count()['twp'].plot()\nplt.title('Traffic')\nplt.tight_layout()","1f6261fc":"plt.figure(figsize=(14,6))\ndf[df['Reason']=='Fire'].groupby('Date').count()['twp'].plot()\nplt.title('Fire')\nplt.tight_layout()","03548d60":"plt.figure(figsize=(14,6))\ndf[df['Reason']=='EMS'].groupby('Date').count()['twp'].plot()\nplt.title('EMS')\nplt.tight_layout()\n\n# we can conclude that the 'Fire' has the lowest rate of call and 'EMS' has the uppest.  ","4d3320ba":"# Now let's move on to creating heatmaps with seaborn and our data. \n# We'll first need to restructure the dataframe, so that the columns become the Hours and the Index becomes the Day of the Week.\n\ndayHour = df.groupby(by=['Day of Week','Hour']).count()['Reason'].unstack()\n\n# Let'see...\ndayHour.head()","97b7758a":"# Now I will create a HeatMap using this new DataFrame.\n\nplt.figure(figsize=(12,6))\nsns.heatmap(dayHour,cmap='viridis')\n\n# We can notice that the higher volume of call happens Wednesday and Friday between 15h and 17h.","8b8a0e31":"# Now I will create a clustermap using this DataFrame.\n\n\nsns.clustermap(dayHour,cmap='viridis')\n\n# We can notice better is this clustermap graph that the higher volume of call happens only on Friday between 15h and 17h.","e93eb94b":"# Now I will repeat these same plots and operations for Month as the column.\n# I'm trying to get more and better informations and visualizations from data.\n\ndayMonth = df.groupby(by=['Day of Week','Month']).count()['Reason'].unstack()\n\n# Let's check!\n\ndayMonth.head()","27172ed2":"# Heatmap\n\nplt.figure(figsize=(12,6))\nsns.heatmap(dayMonth,cmap='viridis')\n\n# We can notice that 'Friday' appears again, but, joining the informations from the last heatmap, the higher calls happens in March, on friday and between 15h\/17h.","236afa35":"# Clustermap\n\nsns.clustermap(dayMonth,cmap='viridis')\n\n# This map reinforce the last conclusion.","bae59df0":"# For this Capstone Project we will be analyzing some 911 call data from Kaggle. \n\n# Just go along with this notebook and try to complete some tasks using my Python and Data Science skills!","e3d0085c":"# That's it!\n# See you in the next Project!! \ud83d\ude00\ud83d\ude0e\ud83d\udc0d"}}