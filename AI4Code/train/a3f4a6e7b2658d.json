{"cell_type":{"479b39ef":"code","dbafbdb8":"code","96db58d6":"code","a281ed35":"code","9c8f8610":"code","1e2ef1bd":"code","a742e322":"code","65586214":"code","c8701afc":"code","5543d8e9":"code","ec98504a":"markdown","c33851a7":"markdown","d462a5b1":"markdown","a89e4117":"markdown","f08acf43":"markdown","41f8551c":"markdown"},"source":{"479b39ef":"def state_fix(state):\n    #Is Abrv\n    if pd.isnull(state): return\n    if len(state) == 2:\n        return abbrev_us_state[state] if state in abbrev_us_state.keys() else state\n    #Is Fullname\n    else:\n        return us_state_abbrev[state] if state in us_state_abbrev.keys() else state\n        \nus_state_abbrev = {\n    'Alabama': 'AL',\n    'Alaska': 'AK',\n    'American Samoa': 'AS',\n    'Arizona': 'AZ',\n    'Arkansas': 'AR',\n    'California': 'CA',\n    'Colorado': 'CO',\n    'Connecticut': 'CT',\n    'Delaware': 'DE',\n    'District of Columbia': 'DC',\n    'Florida': 'FL',\n    'Georgia': 'GA',\n    'Guam': 'GU',\n    'Hawaii': 'HI',\n    'Idaho': 'ID',\n    'Illinois': 'IL',\n    'Indiana': 'IN',\n    'Iowa': 'IA',\n    'Kansas': 'KS',\n    'Kentucky': 'KY',\n    'Louisiana': 'LA',\n    'Maine': 'ME',\n    'Maryland': 'MD',\n    'Massachusetts': 'MA',\n    'Michigan': 'MI',\n    'Minnesota': 'MN',\n    'Mississippi': 'MS',\n    'Missouri': 'MO',\n    'Montana': 'MT',\n    'Nebraska': 'NE',\n    'Nevada': 'NV',\n    'New Hampshire': 'NH',\n    'New Jersey': 'NJ',\n    'New Mexico': 'NM',\n    'New York': 'NY',\n    'North Carolina': 'NC',\n    'North Dakota': 'ND',\n    'Northern Mariana Islands':'MP',\n    'Ohio': 'OH',\n    'Oklahoma': 'OK',\n    'Oregon': 'OR',\n    'Pennsylvania': 'PA',\n    'Puerto Rico': 'PR',\n    'Rhode Island': 'RI',\n    'South Carolina': 'SC',\n    'South Dakota': 'SD',\n    'Tennessee': 'TN',\n    'Texas': 'TX',\n    'Utah': 'UT',\n    'Vermont': 'VT',\n    'Virgin Islands': 'VI',\n    'Virginia': 'VA',\n    'Washington': 'WA',\n    'West Virginia': 'WV',\n    'Wisconsin': 'WI',\n    'Wyoming': 'WY'\n}\n\nabbrev_us_state = dict(map(reversed, us_state_abbrev.items()))","dbafbdb8":"#Load needed libraries\nimport pandas as pd\n\n#Settings to display pandas\npd.set_option('display.max_columns', None)\n\n#Read in dataframe and format datatime\nbase_path = \"\/kaggle\/input\/uncover\/\"\nihme_path = base_path + \"ihme\/2020_03_30\/\" + \"Hospitalization_all_locs.csv\"\nihme_df = pd.read_csv(ihme_path, usecols = [\"location\",\"date\",\"allbed_mean\", \"ICUbed_mean\", \"InvVen_mean\"])\nihme_df.rename(columns={\"location\":\"state\"}, inplace=True)\nihme_df[\"state_code\"] = ihme_df[\"state\"].apply(state_fix)\nihme_df.date = pd.to_datetime(ihme_df.date)\nihme_df.head(1)","96db58d6":"hosp_cap_path = base_path + \"harvard_global_health_institute\/\" + \"hospital-capacity-by-state-20-population-contracted.csv\"\nhosp_cap_df = pd.read_csv(hosp_cap_path, \n                            usecols=[\"state\", \"total_hospital_beds\", \"total_icu_beds\"])\nhosp_cap_df.rename(columns={\"state\":\"state_code\"}, inplace=True)\nhosp_cap_df[\"state\"] = hosp_cap_df[\"state_code\"].apply(state_fix)\nhosp_cap_df.head(1)","a281ed35":"resources_df = ihme_df.merge(hosp_cap_df, on=[\"state\",\"state_code\"])\n\n#Make new col for total_vents\nresources_df = resources_df.assign(total_vents=\n                                   resources_df.total_icu_beds\/4.0)\n\n#Subtract from total_icu_beds\nresources_df = resources_df.assign(total_icu_beds=\n                                   resources_df.total_icu_beds-resources_df.total_vents)\n\n#Calc net resources\nresources_df[[\"avail_beds\", \"avail_icu\", \"avail_vents\"]] = resources_df[[\"total_hospital_beds\", \"total_icu_beds\", \"total_vents\"]] - resources_df[[\"allbed_mean\", \"ICUbed_mean\", \"InvVen_mean\"]].values\n\n#Calc avail score\ndef calc_score(row):\n    return 3 * row[\"avail_vents\"] + 2* row[\"avail_icu\"] + 1* row[\"avail_beds\"]\nresources_df[\"avail_score\"] = resources_df.apply(calc_score, axis=1)\n\n#Make text column for display\nresources_df[\"text\"] = resources_df[\"avail_score\"].astype(str)\nresources_df.head(1)","9c8f8610":"import requests\nimport numpy as np\n\nr= requests.get(\"https:\/\/api.census.gov\/data\/2019\/pep\/population?get=POP,NAME,DENSITY&for=state:*&key=c2049966d9c7bf9e0b31496d60c598ffdd999ad9\")\nresults = r.json()\ncolumns = results.pop(0)\npop_info = pd.DataFrame(results, columns=columns, dtype='float')\npop_info.rename(columns={\"NAME\":\"state\", \"state\":\"state_ID\"}, inplace=True)\npop_info.head(1)","1e2ef1bd":"resources_df = resources_df.merge(pop_info, on=\"state\")\nresources_df = resources_df.assign(avail_dens_scaled = resources_df[\"avail_score\"] \/ resources_df[\"DENSITY\"])\nresources_df = resources_df.assign(avail_pop_scaled = resources_df[\"avail_score\"] \/ resources_df[\"POP\"])\nresources_df.head(1)","a742e322":"import plotly\nimport plotly.graph_objs as go\nimport plotly.offline as offline\nfrom plotly.graph_objs import *\nfrom plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot\n\ninit_notebook_mode(connected=True)\n\n### colorscale:    \n\nscl = [[0.0, '#b30000'],[0.1, '#e34a33'],[0.2, '#fc8d59'],[0.3, '#fdcc8a'],[0.4, '#fef0d9'],[0.5, '#fef0d9'],\n       [0.6, '#edf8fb'],[0.7, '#b2e2e2'],[0.8, '#66c2a4'],[0.9, '#2ca25f'],[1.0, '#006d2c']] # reds\n### create empty list for data object:    \n\ndata_slider = []\n","65586214":"data_slider = []\n#### I populate the data object\n\nall_dates = list(resources_df.date.unique())[::2]\nzmax,zmin = resources_df.avail_dens_scaled.max(), resources_df.avail_dens_scaled.min()\nfor date in all_dates:\n\n    # I select the year (and remove DC for now)\n    resources_date_df = resources_df[(resources_df['state']!= 'District of Columbia' ) &  (resources_df['date']== date )]\n\n    for col in resources_date_df.columns:  # I transform the columns into string type so I can:\n        resources_date_df[col] = resources_date_df[col].astype(str)\n\n    ### create the dictionary with the data for the current year\n    data_one_year = dict(\n                        type='choropleth',\n                        locations = resources_date_df['state_code'],\n                        z=resources_date_df['avail_dens_scaled'].astype(float),\n                        locationmode='USA-states',\n                        zmax = zmax,\n                        zmin=zmin,\n                        colorscale = scl,\n                        text = resources_date_df['text'],\n                        )\n\n    data_slider.append(data_one_year)  # I add the dictionary to the list of dictionaries for the slider\n","c8701afc":"steps = []\n\nfor i in range(len(data_slider)):\n    step = dict(method='restyle',\n                args=['visible', [False] * len(data_slider)],\n                label='Year {}'.format(all_dates[i])) # label to be displayed for each step (year)\n    step['args'][1][i] = True\n    steps.append(step)\n\n\n##  I create the 'sliders' object from the 'steps' \n\nsliders = [dict(active=0, pad={\"t\": 1}, steps=steps)]  ","5543d8e9":"# I set up the layout (including slider option)\n\nlayout = dict(geo=dict(scope='usa',\n                       projection={'type': 'albers usa'}),\n              sliders=sliders)\n\n# I create the figure object:\n\nfig = dict(data=data_slider, layout=layout) \n\n\n\n# to plot in the notebook\n\nplotly.offline.iplot(fig)","ec98504a":"## Merge and subtract\n\nStudies show that about 25% of ICU beds have ventalation capabilities so those are pulled out into \n>total_vents\n\nScore is then made up of:\n$$ \\text{availability_score} = 1 * \\text{avail_beds} + 2 * \\text{avail_icu} + 3*\\text{avail_vents}$$","c33851a7":"## Estimating the Supply: Harvard Global Health Institute\nThe Harvard Global Health institute created a model of hospital capacity and readiness across the US. This model builds on bed capacity data for each of 306 U.S. hospital markets (Hospital Referral Regions, HRR) with localized estimates of available beds, and beds needed to accommodate COVID-19 patients over the coming months. It highlights where hospitals might find additional bed and ICU bed capacity as well as other shortages that need to be addressed\u2014from workforce to ventilators.","d462a5b1":"## Read in Census Data with API","a89e4117":"## Estimating the Need: IHME\nData describes the forecasting carried out by the IHME on the COVID-19 impact on hospital bed-days, ICU-days, ventilator days and deaths by US state in the next 4 months","f08acf43":"## Graph with Plotly","41f8551c":"# \u046a:Time Series Map of Hospital Supplies and Demands\nThis notebook serves a both an example of how to use the Plotly Time Series Choropleth Map but also shows the changing trends in resource availability of hospitals on a state by state basis."}}