{"cell_type":{"766e9e39":"code","1af6672a":"code","893a3514":"code","72fb8b80":"code","c85b2b9a":"code","ab3a02d6":"code","9d2d002f":"code","9b4d3054":"code","33c94340":"code","31cf3352":"code","82fe9539":"code","2c18614a":"code","095c141b":"code","942be733":"code","b1ccd1ee":"code","a15f2517":"code","afbac269":"code","26b70458":"code","ee8b7804":"code","1cb376d8":"code","1bd9e396":"markdown","82d98515":"markdown"},"source":{"766e9e39":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nsns.set(rc={'figure.figsize':(12,8.27)})\nimport re\nimport matplotlib.pyplot as plt","1af6672a":"csv_path = '\/kaggle\/input\/jobs-on-naukricom\/home\/sdf\/marketing_sample_for_naukri_com-jobs__20190701_20190830__30k_data.csv'","893a3514":"ndf = pd.read_csv(csv_path)","72fb8b80":"ndf.drop(['Uniq Id','Crawl Timestamp'],axis=1,inplace=True)","c85b2b9a":"#Location wise job salary\n#-not much values for job salary","ab3a02d6":"locdf = ndf['Location'].str.split(\",\",expand=True)\nfor i in range(16):\n    locdf[i].fillna('GARBAGE',inplace=True)\ntotal_cities = []\nfor i in range(16):\n    total_cities = total_cities + locdf[i].unique().tolist()\ncities = np.unique(np.array(total_cities))\nfor i in range(len(cities)):\n    cities[i] = cities[i].strip()\nerr = []\nfor ct in cities:\n    try:\n        locdf['IN_'+ct] = ndf['Location'].str.contains(ct)\n    except:\n        err.append(ct)\nremoveCols = []\nfor col in locdf.columns[16:]:\n    if locdf[col].sum() < 300:\n        removeCols.append(col)\nlocdf.drop(removeCols,axis=1,inplace=True)\n#remove redundant columns\nredd_cols = ['IN_Delhi NCR','IN_Mumbai Suburbs','IN_Navi Mumbai','IN_']\nlocdf.drop(redd_cols,axis=1,inplace=True)\nlocCols = locdf.columns[16:]\nfor col in locCols:\n    ndf[col] = locdf[col]","9d2d002f":"#Location wise industries \n#This function will plot industry in top distribution among top job cities\ndef plotIndustryLocationDistribution(industry):\n    ndf['COL_'+industry] = ndf['Industry'].str.contains(industry,case=False,na=False)\n    locations = ['Ahmedabad','Bengaluru','Chandigarh','Chennai','Delhi','Gurgaon','Hyderabad','Kolkata','Mumbai','Noida','Pune']\n    sums = []\n    for loc in locations:\n        sums.append(ndf[ndf['COL_'+industry]]['IN_'+loc].sum())\n    return locations,sums","9b4d3054":"fig, axes = plt.subplots(2, 2,sharex=True)\n\naxes[1][1].tick_params(axis='x', rotation=90,pad=10)\naxes[1][0].tick_params(axis='x', rotation=90,pad=10)\n\nloc,sums = plotIndustryLocationDistribution('Education')\nsns.barplot(x=loc,y=sums,ax=axes[0][0]).set_title('Education')\n\nloc,sums = plotIndustryLocationDistribution('IT-Software')\nsns.barplot(x=loc,y=sums,ax=axes[0][1]).set_title('IT-Software')\n\nloc,sums = plotIndustryLocationDistribution('Media')\nsns.barplot(x=loc,y=sums,ax=axes[1][0]).set_title('Media')\n\nloc,sums = plotIndustryLocationDistribution('Advertising')\nsns.barplot(x=loc,y=sums,ax=axes[1][1]).set_title('Advertising')\n\nfig.text(0.5, -0.05, 'Cities', ha='center', va='center')\nfig.text(0.06, 0.5, 'Job Counts', ha='center', va='center', rotation='vertical')\n\nplt.suptitle('Location wise distribution of industries')","33c94340":"#top Skills Barplot\nskdf = ndf['Key Skills'].str.split(\"|\",expand=True)\nfor col in skdf.columns:\n    skdf[col] = skdf[col].str.strip()\nskillCountArray = skdf[0].value_counts()\ntotalClms = skdf.columns.stop\nfor i in range(1,185):\n    skillCountArray = skillCountArray.add(skdf[i].value_counts(),fill_value=0)\ncntArr = skillCountArray.sort_values(ascending=False)\nx = cntArr.index[:20]\ny = cntArr[x]\n","31cf3352":"axs = sns.barplot(y=x,x=y)\naxs.set_title('Top Skills Required Overall')\naxs.set_ylabel('Skills')\naxs.set_xlabel('Job Count')","82fe9539":"#plot experience wise jobs","2c18614a":"#looking at 'Job Experience Required' column, there are 5 types of experiences format \n# 1. x - y years\n# 2. x years and above\n# 3. X Years\n# 4. Not Mentioned\n# 5. NaN","095c141b":"#Removing type 4 and 5 values and stripping values\nexpSer = ndf['Job Experience Required'].dropna()\nexpSer.drop(expSer[expSer == 'Not Mentioned'].index,inplace=True)\nexpSer = expSer.str.strip()\n#extracting type 1 to 3 values\nexpSertyp1 = expSer[expSer.str.contains('\\d - \\d')]\nexpSertyp2 = expSer[expSer.str.contains('\\d years and above',flags=re.IGNORECASE)]\nexpSertyp3 = expSer[expSer.str.contains('^\\d Years$')]\n#considering 60 as maximum Age for work\n#Define Experience Array\nexpJobs = [0 for i in range(61)]\n","942be733":"#Fill Experience Array for Type 1\nexpdf = expSertyp1.value_counts().reset_index()\nexpdf['fiyr'] = expdf['index'].str.split(\"-\",expand=True)[0].astype('int')\nexpdf['seyr'] = expdf['index'].str.split(\"-\",expand=True)[1].str.strip().str.split(\" \",expand=True)[0].astype('int')\nexpdf.rename({'Job Experience Required':'cnt'},axis=1,inplace=True)","b1ccd1ee":"def fillExpArrayTyp1(row):\n    r1 = row['fiyr']\n    r2 = row['seyr'] + 1\n    for i in range(r1,r2):\n        expJobs[i] = expJobs[i] + row['cnt']\ntp = expdf.apply(fillExpArrayTyp1,axis=1)","a15f2517":"#Fill Experience Array for Type 2\ndef fillExpArrayTyp2(row):\n    r1 = int(row.split(\" \")[0])\n    r2 = 61\n    for i in range(r1,r2):\n        expJobs[i] = expJobs[i] + 1\ntp = expSertyp2.map(fillExpArrayTyp2)","afbac269":"#Fill Experience Array for Type 3\ndef fillExpArrayTyp3(row):\n    r1 = int(row.split(\" \")[0])\n    expJobs[r1] = expJobs[r1] + 1\ntp = expSertyp3.map(fillExpArrayTyp3)","26b70458":"#plot exper Experience wise Job Distribution\nx = [i for i in range(61)]\ny = expJobs\nfig = sns.lineplot(x = x,y=y,color='red',linewidth=2.5)\nfig.set_xlabel('AGE')\nfig.set_ylabel('Job Count')\nfig.set_title('Experience wise Job Distribution')\nfig.set_xticks(np.linspace(0,60,11), minor=False)","ee8b7804":"#From above plot we can conclude that we have more job opportunities in 0 to 6 years experience","1cb376d8":"sub = sns.countplot(y='Role Category',data=ndf,order=ndf['Role Category'].value_counts().iloc[:20].index,palette=\"Greens_d\")\nfor p in sub.patches:\n    width = p.get_width()\n    plt.text(5+p.get_width(), p.get_y()+0.55*p.get_height(),\n             '{}'.format(width),\n             ha='left', va='center')","1bd9e396":"## Please do comment if you have liked the notebook or have any feedback. I'll keep editing the notebook.","82d98515":"## Hi, This is my try on basic EDA."}}