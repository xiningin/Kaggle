{"cell_type":{"3bf00257":"code","94fd2f5c":"code","fe000c33":"code","d9b39d94":"code","3288ab68":"code","d3744bec":"code","045518d7":"code","ddd4b9d4":"code","e95b8182":"code","fd69e696":"code","4be4d928":"code","089abf94":"code","eacc1b3c":"code","cb87450a":"code","8e8d87a5":"code","e8c0fc65":"code","ab6e4021":"code","9617d234":"code","9d98b48d":"code","e89b5d76":"code","f03d3292":"markdown","4a2dbef5":"markdown"},"source":{"3bf00257":"!pip install iterative-stratification","94fd2f5c":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom iterstrat.ml_stratifiers import MultilabelStratifiedKFold","fe000c33":"train_path = '\/kaggle\/input\/lish-moa\/train_features.csv'\ndf_train_features = pd.read_csv(train_path)\ntest_path = '\/kaggle\/input\/lish-moa\/test_features.csv'\ndf_test_features = pd.read_csv(test_path)\ntrain_targets_path = '\/kaggle\/input\/lish-moa\/train_targets_scored.csv'\ndf_train_target = pd.read_csv(train_targets_path)","d9b39d94":"df_train_features.head()","3288ab68":"print(\"Total Records for train : \",df_train_features.sig_id.nunique())\nprint(\"Total Features for train : \", df_train_features.shape[1])\nprint(\"Total Records for test : \",df_test_features.sig_id.nunique())\nprint(\"Total Features for test : \", df_test_features.shape[1])","d3744bec":"print(\"Number of Nan in train : \",df_train_features.isnull().sum().sum())\nprint(\"Number of Nan in test : \",df_test_features.isnull().sum().sum())","045518d7":"print(\"Count plot for categorical feature in Train data\")\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20,5))\nsns.countplot(x=\"cp_type\", data=df_train_features, ax=ax1)\nsns.countplot(x=\"cp_time\", data=df_train_features, ax=ax2)\nsns.countplot(x=\"cp_dose\", data=df_train_features, ax=ax3)","ddd4b9d4":"print(\"Count plot for categorical feature in test data\")\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20,5))\nsns.countplot(x=\"cp_type\", data=df_test_features, ax=ax1)\nsns.countplot(x=\"cp_time\", data=df_test_features, ax=ax2)\nsns.countplot(x=\"cp_dose\", data=df_test_features, ax=ax3)","e95b8182":"df_train_features['cp_type'] = df_train_features['cp_type'].map({'trt_cp':0,'ctl_vehicle':1})\ndf_train_features['cp_time'] = df_train_features['cp_time'].map({24:0,48:1,72:2})\ndf_train_features['cp_dose'] = df_train_features['cp_dose'].map({'D1':0,'D2':1})\n\ndf_test_features['cp_type'] = df_test_features['cp_type'].map({'trt_cp':0,'ctl_vehicle':1})\ndf_test_features['cp_time'] = df_test_features['cp_time'].map({24:0,48:1,72:2})\ndf_test_features['cp_dose'] = df_test_features['cp_dose'].map({'D1':0,'D2':1})","fd69e696":"df_train_target.head()","4be4d928":"df_train_target_temp = df_train_target.drop('sig_id', axis=1) \ndf_count = df_train_target_temp.apply(pd.Series.value_counts)\ndf_count = df_count.sort_values(by = 1, axis = 1, ascending = False) ","089abf94":"df_T = df_count.T\ndf_T['Index'] = df_T.index","eacc1b3c":"df_T","cb87450a":"fig, (ax) = plt.subplots(1, 1, figsize=(15,20))\nax = sns.barplot(x=1, y=\"Index\", data=df_T.head(40), ax = ax)","8e8d87a5":"g_col = [col for col in df_train_features if col.startswith('g-')]\nc_col = [col for col in df_train_features if col.startswith('c-')]","e8c0fc65":"train_columns = df_train_features.columns.values[1:]\ntrain_columns","ab6e4021":"target_columns = df_train_target.columns.values[1:]\ntarget_columns","9617d234":"# df = pd.merge(df_train_features, df_train_target, on=['sig_id','sig_id'])","9d98b48d":"# df[\"kfold\"] = -1  \n# df = df.sample(frac=1).reset_index(drop=True)\n# X = df\n# y = df[target_columns]\n# mskf = MultilabelStratifiedKFold(n_splits=5, random_state=12)\n# for f, (t_, v_) in enumerate(mskf.split(X, y)):\n#      df.loc[v_, 'kfold'] = f\n","e89b5d76":"# df.to_csv('train_kfold.csv')\nkfold = '\/kaggle\/input\/kfold-train\/train_kfold.csv'\ndf = pd.read_csv(kfold)","f03d3292":"According to the reading which I did, MoA (Mechanism of Affect) describes the process by which a molecule, such as a drug, functions to produce a pharmacological effect.\n\nWe have given info such as:\n\n* Gene Expression Data (g-)\n* Cell Viability Data (c-)\n* Cp Type \n* cp_vehicle - indicates samples treated with a compound\n* ctrl_vehicle - with a control perturbation \n* control perturbations have no MoAs  --- Important to look at.   \n* Duration and Dose of the Treatment\n* MoA labels for prediction","4a2dbef5":"Mapping categorical data"}}