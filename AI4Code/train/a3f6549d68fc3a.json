{"cell_type":{"7c89e31f":"code","5c0d41c9":"code","0c7b567f":"code","fcf008a6":"code","94ee595b":"code","4287574f":"code","42128e88":"code","761c3c18":"code","df4e5be3":"code","97aa0244":"code","29f8a84e":"code","8c28d08e":"code","2e1c9ff4":"code","98e2c960":"code","6ba87342":"code","973ffa05":"code","e05a643c":"code","8188961a":"code","def4f666":"code","616e585c":"code","15e6a54a":"code","da2ac34b":"code","4a6f6ba1":"code","644f5ac8":"code","d9985218":"code","c0ac0a7b":"code","7effacc4":"code","04771be2":"code","f7782813":"code","c4b16037":"code","f60a95cf":"code","51d6722d":"code","62807e74":"code","41dd666e":"code","69b8d484":"code","b7c9d02a":"code","5ab88629":"code","2a0b7be5":"code","7adb5d7a":"code","7dc02698":"code","20df8f1b":"markdown","fbb58621":"markdown","6490d41f":"markdown","f85a8546":"markdown","443cba5c":"markdown","105b5745":"markdown","47a24b99":"markdown","f7c2cf9c":"markdown","d18a2ce9":"markdown","a720a588":"markdown"},"source":{"7c89e31f":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","5c0d41c9":"! tar xf ..\/input\/bird-songs-pad-and-resize-spectrogram\/spectrograms_resized.tar.bz2","0c7b567f":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline\n\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\n\nfrom fastai.vision import *","fcf008a6":"data_dir = Path('..\/input')\nlabel_dir = data_dir\/'multilabel-bird-species-classification-nips2013\/nips4b_bird_challenge_train_labels\/NIPS4B_BIRD_CHALLENGE_TRAIN_LABELS'\nspect_dir = Path('.\/spectrograms_resized')","94ee595b":"df = pd.read_csv(label_dir\/'nips4b_birdchallenge_train_labels.csv', skiprows=[0, 2])\ndf.tail()","4287574f":"df.drop(df.columns[[1, 3]],axis=1,inplace=True)  # drop colums 1 and 3\ndf.rename(columns={df.columns[0]:'file', df.columns[1]:'EMPTY'}, inplace=True)  # add 'EMPTY' label\ndf = df[:-1]  # drop last row\ndf.fillna(0, inplace=True)  # fill all the NaN's\ndf = df.astype('int32', errors='ignore') # make integer labels\ndf['file'] = df['file'].apply(lambda fn: str(Path(fn).with_suffix(''))) # drop .wav in the filenames\n\ndf.tail()","42128e88":"np.random.seed(42)\nsrc = (ImageList.from_df(df, spect_dir, folder='train', suffix='.png')\n                .split_by_rand_pct(0.2)\n                .label_from_df(cols=df.columns[1:].tolist()))","761c3c18":"tfms = get_transforms(do_flip=False, max_rotate=None, max_warp=None)\ndata = (src.transform(tfms, size=128)\n        .databunch(num_workers=0).normalize(imagenet_stats))","df4e5be3":"data.show_batch(rows=3, figsize=(12,9), ds_type=DatasetType.Valid)","97aa0244":"arch = models.resnet50\nacc_02 = partial(accuracy_thresh, thresh=0.2)\nlearn = cnn_learner(data, arch, metrics=acc_02, path='.')","29f8a84e":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","8c28d08e":"lr = 2.29E-02\nlearn.fit_one_cycle(5, slice(lr))","2e1c9ff4":"learn.recorder.plot_losses()","98e2c960":"learn.save('stage-1-rn50', return_path=True)","6ba87342":"# learn.load('stage-1-rn50')","973ffa05":"learn.unfreeze()","e05a643c":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","8188961a":"learn.fit_one_cycle(5, slice(3.02E-03, lr\/5))","def4f666":"learn.recorder.plot_losses()","616e585c":"learn.save('stage-2-rn50')","15e6a54a":"data_256 = (src.transform(tfms, size=256)\n            .databunch(num_workers=0).normalize(imagenet_stats))\n\nlearn.data = data_256\nlearn.data.train_ds[0][0].shape","da2ac34b":"learn.freeze()","4a6f6ba1":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","644f5ac8":"lr = 5E-03\nlearn.fit_one_cycle(5, slice(lr))","d9985218":"learn.recorder.plot_losses()","c0ac0a7b":"learn.save('stage-1-256-rn50')","7effacc4":"learn.unfreeze()","04771be2":"learn.lr_find()\nlearn.recorder.plot(suggestion=True)","f7782813":"learn.fit_one_cycle(5, slice(1.58E-06, lr\/5))","c4b16037":"learn.recorder.plot_losses()","f60a95cf":"learn.save('stage-2-256-rn50')","51d6722d":"learn.fit_one_cycle(5, slice(1.58E-06, lr\/5))","62807e74":"learn.recorder.plot_losses()","41dd666e":"learn.save('stage-2-256-rn50-10e')","69b8d484":"learn.export()","b7c9d02a":"test = ImageList.from_folder(spect_dir\/'test\/')\nlen(test)","5ab88629":"predictor = load_learner('.', test=test, num_workers=0)\npreds, _ = predictor.get_preds(ds_type=DatasetType.Test)\nfpreds = preds[:, 1:].reshape(-1, )","2a0b7be5":"import itertools\nnames = [f.stem for f in predictor.data.test_ds.items]\nfnames = [x + '.wav_classnumber_' + str(i) for x in names for i in range(1, len(data.classes))]","7adb5d7a":"test_df = pd.DataFrame({'ID':fnames, 'Probability':fpreds}, columns=['ID', 'Probability'])\ntest_df.to_csv('submission.csv', index=False)","7dc02698":"! rm -r $spect_dir","20df8f1b":"Run some more epochs","fbb58621":"## Load dataset","6490d41f":"Unfreeze and fine tune:","f85a8546":"## Train with size 128","443cba5c":"## Prediction and submission","105b5745":"Don't do flips, it doens't make sense for spectrograms:","47a24b99":"Unfreeze and fine tune:","f7c2cf9c":"Replace data in learner with size 256 images","d18a2ce9":"## Clean up labels","a720a588":"## Train with size 256"}}