{"cell_type":{"7117758c":"code","452cf347":"code","8c0eb61a":"code","381c874b":"code","01b43f43":"code","da9abe3a":"code","05ab62c6":"code","329e7416":"code","8d5642f3":"markdown","4134d956":"markdown","4ceef964":"markdown","c9d1eebc":"markdown","97de4ded":"markdown","0945f8ea":"markdown","2feda8f7":"markdown","61e3d97d":"markdown","6beaa9b4":"markdown","34bfeb65":"markdown","cc0da85e":"markdown","22e57b51":"markdown","63352bcd":"markdown","bc0fc4e8":"markdown","451ce318":"markdown","fd365611":"markdown","09242f3d":"markdown"},"source":{"7117758c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","452cf347":"url = 'https:\/\/www.kaggleusercontent.com\/episodes\/3634538.json'","8c0eb61a":"import urllib, json\n\nresponse = urllib.request.urlopen(url)\ndata = json.loads(response.read())","381c874b":"data.keys()","01b43f43":"data['configuration']","da9abe3a":"data['specification']","05ab62c6":"data['steps'][1000][0]","329e7416":"data['steps'][1000][1]","8d5642f3":"This consists of same data (for 3002 steps) mirrored appropriately for the left and right players, and giving action, active player and sticky action fields which differ between left and right players.","4134d956":"### Game Specifications","4ceef964":"### Game Configuration","c9d1eebc":"### EOF","97de4ded":"First index is for step(0 to 3001) and second for player(0 or 1)","0945f8ea":"Lets see a sample for step 1000.","2feda8f7":"# How to interpret Replay JSON","61e3d97d":"One thing that came to my mind on seeing game replays is that I need something to debug my submission file wrt actions in a game replay JSON similar to Halite without the nitty gritty graphics and something more Python like. So here I am starting with a set of notebooks that will allow you to do the same. The first in this series follows:","6beaa9b4":"### Step Data","34bfeb65":"This will be used in subsequent notebooks while loading the game.","cc0da85e":"## Enter URL of the game of interest","22e57b51":"### Keys in Replay JSON","63352bcd":"This will be used in subsequent notebooks while loading the game.","bc0fc4e8":"Refer [link](https:\/\/github.com\/google-research\/football\/blob\/master\/gfootball\/doc\/observation.md) for details on how to interpret these values.","451ce318":"## Import basic Libaries & Modules","fd365611":"## Get the JSON","09242f3d":"## Load JSON from URL"}}