{"cell_type":{"d860679a":"code","4a12127e":"code","2e59104d":"code","21a0f376":"code","4fed047d":"code","8e2112ac":"code","5036ba45":"code","5ba21c3b":"code","9d1a3915":"code","1e048f5c":"code","479e48b5":"code","33f730e9":"code","96872458":"code","700edde0":"code","4fe59cad":"code","cf27721c":"markdown"},"source":{"d860679a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4a12127e":"from IPython.display import Image\nfrom IPython.core.display import HTML \nImage(url= \"https:\/\/www.pyimagesearch.com\/wp-content\/uploads\/2020\/02\/keras_denoising_autoencoder_header.png\")\n\n","2e59104d":"import tensorflow as tf\nimport tensorflow.keras as keras\nimport tensorflow.keras.layers as layers\nfrom IPython.display import SVG\nprint(tf.__version__)\n##\u67e5\u770b\u7248\u672c","21a0f376":"#\u5206\u5f00\u6570\u636e\u96c6\n(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()","4fed047d":"##\u5c06\u6570\u636e\u5206\u621028*28\uff0c\u52a0\u4e0a\u5c06\u6570\u636e\u538b\u7f29\u62100-1\u4e4b\u95f4\nx_train = x_train.reshape((-1, 28*28)) \/ 255.0\nx_test = x_test.reshape((-1, 28*28)) \/ 255.0\n\nprint(x_train.shape, ' ', y_train.shape)\nprint(x_test.shape, ' ', y_test.shape)","8e2112ac":"\ncode_dim = 32\ninputs = layers.Input(shape=(x_train.shape[1],), name='inputs')\ncode = layers.Dense(code_dim, activation='relu', name='code')(inputs)\noutputs = layers.Dense(x_train.shape[1], activation='softmax', name='outputs')(code)\n\nauto_encoder = keras.Model(inputs, outputs)\nauto_encoder.summary()","5036ba45":"##\u6574\u4e2a autoencoder\u6d41\u7a0b\u56fe\nkeras.utils.plot_model(auto_encoder, show_shapes=True)","5ba21c3b":"#\u7f16\u7801\u5668\u56fe\u5f62\nencoder = keras.Model(inputs,code)\nkeras.utils.plot_model(encoder, show_shapes=True)","9d1a3915":"#\u89e3\u7801\u5668\u56fe\u5f62\ndecoder_input = keras.Input((code_dim,))\ndecoder_output = auto_encoder.layers[-1](decoder_input)\ndecoder = keras.Model(decoder_input, decoder_output)\nkeras.utils.plot_model(decoder, show_shapes=True)","1e048f5c":"#\u5b9a\u4e49\u8bad\u7ec3\u65b9\u5f0f\nauto_encoder.compile(optimizer='adam',\n                    loss='binary_crossentropy')","479e48b5":"#\u8bad\u7ec3\u6a21\u578b\nhistory = auto_encoder.fit(x_train, x_train, batch_size=64, epochs=100, validation_split=0.1)","33f730e9":"##\u9884\u6d4b\nencoded = encoder.predict(x_test)\ndecoded = decoder.predict(encoded)","96872458":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10,4))","700edde0":"\nn = 5\nfor i in range(n):\n    ax = plt.subplot(2, n, i+1)\n    plt.imshow(x_test[i].reshape(28,28))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\n    \n    ax = plt.subplot(2, n, n+i+1)\n    plt.imshow(decoded[i].reshape(28,28))\n    plt.gray()\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis().set_visible(False)\nplt.show()","4fe59cad":"##\u5b66\u4e60\u66f2\u7ebf\ndef plot_learning_curves(history):\n    pd.DataFrame(history.history).plot(figsize=(8, 5))\n    plt.grid(True)\n    plt.gca().set_ylim(0, 1)\n    plt.show()\n\nplot_learning_curves(history)","cf27721c":"AutoEncoder\u5c5e\u4e8e\u65e0\u76d1\u7763\u795e\u7ecf\u7f51\u7edc\uff0c\u79f0\u4e3a\u81ea\u52a8\u7f16\u7801\u5668\u3002\u53ef\u5206\u4e3aEncoder(\u7f16\u7801\u5668)\u548cDecoder(\u89e3\u7801\u5668)\u4e24\u4e2a\u90e8\u4efd\uff0c\u5206\u522b\u4f5c\u538b\u7f29\u4e0e\u89e3\u538b\u7f29\u4e24\u4e2a\u52a8\u4f5c\uff0c\u8ba9\u8f93\u51fa\u4e0e\u8f93\u5165\u76f8\u540c\u3002\u91cd\u6784\u51fa\u7684output\u548c\u539f\u59cbinput\u5c3d\u53ef\u80fd\u4e00\u81f4\u3002\u9690\u85cf\u5c42\u5411\u91cf\u5177\u6709\u964d\u7ef4\u4f5c\u7528\u3002"}}