{"cell_type":{"c52ab86d":"code","e9f2ce35":"code","416b4d47":"code","5efce9fe":"code","b6e0ae02":"code","cf4d5eb0":"code","7440a71c":"code","85525537":"code","2697cb83":"code","fce69a70":"code","00c4f7af":"code","1ca4bedb":"code","ec0af841":"code","52d4daaa":"code","bcbb8b32":"code","50975a1c":"code","8d944697":"code","9d2b9c2d":"code","feffb2b6":"code","7e523fbd":"code","b617c732":"code","614ae5db":"code","306ae3ad":"code","a76b8772":"code","74f83d71":"code","0b112440":"code","e97037b6":"code","bb29a69f":"code","931fd57a":"code","ce1a8e40":"code","3795ba04":"code","25e39531":"code","1328efbd":"code","1ed488b8":"code","90b074a6":"code","6004db62":"code","6d8fdac1":"code","5cbe469b":"code","a717f5d1":"code","3a563c3c":"code","d3d733b4":"code","0c4a9d02":"code","8f568850":"code","e350e987":"code","05b46881":"code","fbf07225":"code","44dac647":"code","da5dc71e":"code","86961212":"code","1f3f15e8":"code","c495ea00":"code","0403e440":"code","42a729db":"code","1800838b":"code","5c5231c8":"code","0be5e4f8":"code","3f9e74af":"code","72a7ccbe":"code","7b29f4b4":"code","9d07d7e1":"markdown","619b02b8":"markdown","95ed73ee":"markdown","caeec208":"markdown","4e69f828":"markdown","544de199":"markdown","13a6e91c":"markdown","9f5fc4e7":"markdown","31756a01":"markdown","5dd02c25":"markdown","aa00d98f":"markdown","dde7ed87":"markdown","d8291cd3":"markdown","8942368d":"markdown","2a66bc74":"markdown","fce991fd":"markdown","3826a259":"markdown","4d1ef333":"markdown","00ef60aa":"markdown","9663b491":"markdown","3e3145e4":"markdown","e43f4ccb":"markdown","809e47b5":"markdown","a3592881":"markdown","a10d80cf":"markdown","2ac66bf8":"markdown","3a91c140":"markdown","67f50db9":"markdown","adc529f5":"markdown","7239959c":"markdown","437506a9":"markdown","58c84e3c":"markdown","10ef9bc6":"markdown","721edf94":"markdown","44ab46c7":"markdown"},"source":{"c52ab86d":"!pip install missingno","e9f2ce35":"# Data manipulation\nimport pandas as pd\nimport numpy as np\nimport re\n\n#Libraray to visualise missing value\nimport missingno as msno\n\n# Data visualisation\nimport plotly\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom wordcloud import WordCloud, STOPWORDS\nimport matplotlib.pyplot as plt\n\n# Cleaning text\nimport nltk\n\n# Sentiment analysis\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom nltk.sentiment.util import *\nfrom nltk.corpus import stopwords","416b4d47":"from IPython.core.display import display, HTML, Javascript\n\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode(connected=True)","5efce9fe":"# Defining all our palette colours.\nprimary_blue = \"#496595\"\nprimary_blue2 = \"#85a1c1\"\nprimary_blue3 = \"#3f4d63\"\nprimary_grey = \"#c6ccd8\"\nprimary_black = \"#202022\"\nprimary_bgcolor = \"#f4f0ea\"\n\n# \"coffee\" pallette turqoise-gold.\nf1 = \"#a2885e\"\nf2 = \"#e9cf87\"\nf3 = \"#f1efd9\"\nf4 = \"#8eb3aa\"\nf5 = \"#235f83\"\nf6 = \"#b4cde3\"","b6e0ae02":"html_contents =\"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n    <style>\n    .toc h2{\n        color: white;\n        background: #3f4d63;\n        font-weight: 500;\n        font-family: Robot;\n        font-size: 22px;\n        padding: 6px 12px;\n        margin-bottom: 2px;\n        text-align: center;\n    }\n    \n    .toc h3{\n        color: #fff;\n        background: #3f4d63;\n        font-weight: 300;\n        font-family: Robot;\n        font-size: 20px;\n        padding: 6px 12px;\n        margin-bottom: 2px;\n        text-align: center;\n    }\n    \n    .toc ol li{\n        list-style:none;\n        line-height:normal;\n        }\n     \n    .toc li{\n        background: #235f83;\n        color: white;\n        font-weight: 500;\n        font-family: Helvetica;\n        font-size: 17px;\n        margin-bottom: 2px;\n        padding: 6px 12px;\n    }\n\n    .toc ol ol li{\n        background: #fff;\n        color: #4d4d4d;\n        font-weight: 400;\n        font-size: 15px;\n        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        margin-top: 0px;\n        margin-bottom: 0px;\n        padding: 3px 12px;\n    }  \n    <\/style>\n    <\/head>\n    <body>\n        <div class=\"toc\">\n        \n        <ol> \n        <h2> Table of Contents <\/h2>\n        <li>1. Data <\/li> \n        <li>2. Data Description<\/li>\n        <li>3. Data Cleaning<\/li>\n        <ol> \n            <li>1. Numerical Data <\/li>\n            <ol>\n                <li>3.1.1 Changing date columns into right date time format <\/li>\n                <li>3.1.2 Removing imdb_id, homepage features <\/li>\n                <li>3.1.3 Droping '0' values from budget & Revenue <\/li>\n            <\/ol>\n            \n            <li>2. Textual Data <\/li>\n            <ol>\n                <li>3.2.1 Cleaning the text <\/li>\n                <li>3.2.2 Removing Stop words <\/li>\n            <\/ol>\n        <\/ol>\n        <li>4. Sentiment Analysis <\/li>\n        <li>5. Data Visualization<\/li>\n        <ol> \n            <li>5.1 HeatMap<\/li>\n            <li>5.2 Scatter Matrix <\/li>\n            <li>5.3 Most Frequent\n                <ol>\n                    <li>5.3.1 Most Frequent Geners <\/li>\n                    <li>5.3.2 Most Frequent Actors <\/li>\n                    <li>5.3.3 Most Frequent Director <\/li>\n                    <li>5.3.4 Most frequent Production Companies <\/li>\n                 <\/ol> \n            <\/li>\n            <li>5.4 Impact of Movies over the Year<\/li>\n            <li>5.5 Movie Review Classification<\/li>\n            <li>5.6 Wordcloud\n                <ol>\n                    <li>5.6.1 Wordcloud for Positive Text <\/li>\n                    <li>5.6.2 Wordcloud for Negative Text <\/li>\n                    <li>5.6.3 Wordcloud for Neutral Text <\/li>\n                 <\/ol>\n            <\/li>\n            <li>5.7.1 Popularity Vs Budgets<\/li>\n            <li>5.7.2 Popularity Vs Budgets Bins<\/li>\n            <li>5.8 Top 10 Highest & Lowest Profit Movie<\/li>\n            <li>5.9.1 Which Year makes the highest Avg Profit bins<\/li>\n            <li>5.9.2 Which Year makes the highest Avg Profit <\/li>\n            <li>5.10 Top 10 Highest Runtime Movie<\/li>\n            <li>5.11 Top 10 movies in Drama Gener<\/li>\n            <li>5.12 Which genres are most popular from year to year?<\/li>\n            <li>5.13 Top 10 Highest Vote Count of Movies<\/li>\n            <li>5.14 Top 10 Highest Vote Average Movies<\/li>\n         <\/ol>   \n        <li>6. Conclusion<\/li>\n         <\/div>\n    <\/body>\n<\/html>\n\"\"\"\n\nHTML(html_contents)","cf4d5eb0":"# Reading the file\ndf = pd.read_csv('..\/input\/tmdbmovierating-sample\/tmdb-movies.csv')\ndf = df.reset_index()\ndf.head(3)","7440a71c":"# Finding how many Rows & Cols are there in dataframe.\ndf.shape","85525537":"# Finding the columns Name\ndf.columns","2697cb83":"df.info()","fce69a70":"# Gaining insights in terms of statistics\ndf.describe()","00c4f7af":"# visualising null values\nmsno.matrix(df)","1ca4bedb":"# Changing date time format\ndf['release_date'] = pd.to_datetime(df['release_date'])","ec0af841":"# rounding value upto 2 decimals for popularity\ndf['popularity'] = round(df['popularity'], 2)\ndf['popularity'][:2]","52d4daaa":"# Removing features which are not that much necessary\ndf.drop(['imdb_id', 'homepage', 'budget_adj','revenue_adj'], axis=1, inplace=True)","bcbb8b32":"# Making a dataframe for missing value & Unique values for easy interpretation\nunique_count = []\nfor x in df.columns:\n    unique_count.append([x, len(df[x].unique()), df[x].isnull().sum(), round(df[x].isnull().sum()\/len(df), 3)])\n    \npd.DataFrame(unique_count, columns=[\"Column\", \"Unique\", \"Missing\", \"Missing Percentage\"]).set_index(\"Column\")","50975a1c":"# Replacing features nan values with missing value\ndf['tagline'].fillna('missing',inplace=True)\ndf['keywords'].fillna('missing',inplace=True)\ndf['production_companies'].fillna('missing',inplace=True) \ndf['cast'].fillna('missing',inplace=True)\ndf['director'].fillna('missing',inplace=True)\ndf['genres'].fillna('missing',inplace=True)\ndf['overview'].fillna('missing',inplace=True)\n\n# checking if data has any nan values present or not\ndf.isnull().sum().sum()","8d944697":"# Revenue and budget value --> 0\nprint(\"Shape: \", df[(df['budget']==0) & (df['revenue']==0)][['id','popularity','original_title','runtime','revenue','budget']].shape)\ndf[(df['budget']==0) & (df['revenue']==0)][['id','popularity','original_title','runtime','revenue','budget']].head()","9d2b9c2d":"# Droping 0 values from budget & Revenue\ndf.drop(df[(df['budget']==0) & (df['revenue']==0)].index, inplace=True)","feffb2b6":"# After cleaning data looks like this\ndf[:1]","7e523fbd":"pd.set_option('max_colwidth', 500)\ndf[['original_title', 'keywords', 'tagline', 'overview']].head(2)","b617c732":"pd.set_option('max_colwidth', 500)\n\ndf['combine_text'] = df['keywords'] + \" \" + df['tagline'] + \" \" + df['overview']\ndf['combine_text'] .head(2)","614ae5db":"# Making a function to clean the text\ndef clean_fun(text):\n    # converting text into lower case\n    text = text.str.lower()\n              \n    # Remove punctuation\n    text = text.str.replace('[^\\w\\s]', ' ', regex=True)\n    \n    # Remove numbers\n    text = text.str.replace('\\d+', ' ', regex=True)\n \n    # Convert to string\n    text = text.astype(str)\n    \n    return text\n\n# Applying clean_text function to data\ndf['clean_text'] = clean_fun(df['combine_text'])\ndf['clean_text'].head(2)","306ae3ad":"# Removing stop words\nstop = stopwords.words('english')\n\ndf['clean_text'] = df['clean_text'].apply(lambda x: ' '.join([word for word in x.split() if word not in (stop)]))\ndf['clean_text'][:2]","a76b8772":"#Sentiment Analysis\nSIA = SentimentIntensityAnalyzer()\ndf['clean_text'] = df['clean_text'].astype(str)\n\n# Applying Model, Variable Creation\ndf['Polarity Score'] = df['clean_text'].apply(lambda x:SIA.polarity_scores(x)['compound'])\ndf['Neutral Score'] = df['clean_text'].apply(lambda x:SIA.polarity_scores(x)['neu'])\ndf['Negative Score'] = df['clean_text'].apply(lambda x:SIA.polarity_scores(x)['neg'])\ndf['Positive Score'] = df['clean_text'].apply(lambda x:SIA.polarity_scores(x)['pos'])\n\n# Converting 0 to 1 Decimal Score to a Categorical Variable\ndf['Sentiment']=''\ndf.loc[df['Polarity Score']>0,'Sentiment']='Positive'\ndf.loc[df['Polarity Score']==0,'Sentiment']='Neutral'\ndf.loc[df['Polarity Score']<0,'Sentiment']='Negative'\n\ndf[['clean_text', 'Sentiment','Polarity Score', 'Neutral Score', 'Negative Score', 'Positive Score']].head(3)","74f83d71":"# Heatmap\n# Correlation between the feature show with the help of visualisation\n\ncorrs = df.corr()\nfig = ff.create_annotated_heatmap(\n    z=corrs.values,\n    x=list(corrs.columns),\n    y=list(corrs.index),\n    annotation_text=corrs.round(2).values,\n    showscale=True)\nfig.update_layout(title= 'Correlation of whole Data',  \n                  title_font=dict(size=30, family=\"Times New Roman\"),\n                  font=dict(size=15, family=\"Times New Roman\"),\n                )\nfig.show()","0b112440":"dff = df[['popularity', 'budget', 'revenue', 'runtime', 'release_date', 'vote_count', 'vote_average', \n          'release_year']]\nfig = px.scatter_matrix(dff)\nfig.update_layout(\n    title='IMBD Rating Data set',\n    dragmode='select',\n    width=1000,\n    height=1600,\n    hovermode='closest',\n)\nfig.show()","e97037b6":"# Function for subtitle in charts\ndef format_title(title, subtitle=None, subtitle_font_size=14):\n    title = f'<b>{title}<\/b>'\n    if not subtitle:\n        return title\n    subtitle = f'<span style=\"font-size: {subtitle_font_size}\">{subtitle}<\/span>'\n    return f'{title}<br>{subtitle}'","bb29a69f":"# Function will split the string and return the count of each genre.\ndef count_genre(x):\n    # concatenate all the rows of the genrs.\n    data_plot = df[x].str.cat(sep = '|')\n    data = pd.Series(data_plot.split('|'))\n    info = data.value_counts(ascending=False)\n    return info","931fd57a":"#call the function for counting the movies of each genre.\ndf_genre_movies = count_genre('genres')\ndf_genre_movies = pd.DataFrame(df_genre_movies).reset_index().rename(columns={'index':'Drama', 0:'Count'})\ndf_genre_movies","ce1a8e40":"fig = px.bar(df_genre_movies, y='Drama', x='Count', \n             title=format_title('Top Movies Geners', 'Top 5 Movie Geners are Drama, Comedy, Thriller, Action, Romance'))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"y unified\", showlegend=False,\n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))\nfig.add_annotation(dict(\n        x=2500,\n        y=12,\n        text=\"<b>Top Movie Geners:<br><\/b> Most favourite gener of people is <b>Drama<\/b><br> followed by <b>Comedy<\/b> and <b>Thriller<\/b>\",    \n        showarrow = False,    \n))","3795ba04":"#call the function for counting the movies of each genre.\ndf_cast = count_genre('cast')\ndf_cast = pd.DataFrame(df_cast).reset_index().rename(columns={'index':'Cast', 0:'Count'})\ndf_cast = df_cast[:15]\ndf_cast","25e39531":"fig = px.bar(df_cast, y='Cast', x='Count', height=250,\n             title=format_title('Most frequent Actor', 'Top 15 Actors'))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"y unified\", showlegend=False,\n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","1328efbd":"#call the function for counting the movies of each genre.\ndf_director = count_genre('director')\ndf_director = pd.DataFrame(df_director).reset_index().rename(columns={'index':'Director', 0:'Count'})\ndf_director = df_director[:15]\ndf_director","1ed488b8":"fig = px.bar(df_director, y='Director', x='Count', height=250,\n             title=format_title('Most frequent Director', 'Top 15 Director'))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"y unified\", showlegend=False,\n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","90b074a6":"#call the function for counting the movies of each genre.\ndf_production_companies = count_genre('production_companies')\ndf_production_companies = pd.DataFrame(df_production_companies).reset_index().rename(columns={'index':'production_companies', 0:'Count'})\ndf_production_companies = df_production_companies[:15]\ndf_production_companies","6004db62":"fig = px.bar(df_production_companies, y='production_companies', x='Count', height=250,\n             title=format_title('Most frequent Production Companies', 'Top 15 Production Companies'))\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(categoryorder='total ascending', ticksuffix=' ', showline=False)\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"y unified\", showlegend=False,\n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","6d8fdac1":"data = df.groupby('release_year').count()['id']\nfig = px.area(data, title='Impact of Movies over the Year', height=300)\nfig.update_xaxes(showgrid=False),\nfig.update_yaxes(showgrid=False),\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"x unified\", showlegend=False,\n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))\nfig.add_annotation(dict(\n        x=1980,\n        y=240,\n        text=\"<b>Impact of Movies:<br><\/b> Signifigant improve in number of movie<br> watching audience after <b>1980<\/b> year\",    \n        showarrow = False,    \n))","5cbe469b":"fig = px.pie(df, names='Sentiment', title='Movie Review Classification', hole=0.6,\n                       template='presentation', height=350)\nfig.update_layout(title_font=dict(size=25),\n                      xaxis_title=' ', yaxis_title=' ',\n                      hovermode='x unified')\nfig.update_traces(hovertemplate=None, textposition='inside', pull=[0.2, 0, 0])\nfig.show()","a717f5d1":"df_pos = df[df['Sentiment']=='Positive']['clean_text']\nstopwords = set(STOPWORDS) \n\ntext_pos = ' '.join(df_pos)\nwordcloud_pos = WordCloud().generate(text_pos)\n# Generate plot\nplt.imshow(wordcloud_pos)\nplt.axis(\"off\")\nplt.show()","3a563c3c":"df_neg = df[df['Sentiment']=='Negative']['clean_text']\n\ntext_neg = ' '.join(df_neg)\nwordcloud_neg = WordCloud().generate(text_neg)\n# Generate plot\nplt.imshow(wordcloud_neg)\nplt.axis(\"off\")\nplt.show()","d3d733b4":"df_neu = df[df['Sentiment']=='Neutral']['clean_text']\n\ntext_neu = ' '.join(df['clean_text'])\nwordcloud_neu = WordCloud(max_words=1500, stopwords=STOPWORDS, max_font_size=200).generate(text_neu)\n# Generate plot\nplt.imshow(wordcloud_neu, interpolation=\"bilinear\")\nplt.axis(\"off\")\nplt.show()","0c4a9d02":"df['budget_bins'] = pd.qcut(df['budget'] , 4, labels=['Low', 'Medium', 'High', 'Extream High'])\ndf['budget_bins']","8f568850":"fig = px.scatter(df, x='popularity', y='budget', height=250,\n                 title=format_title('Popularity Vs Budgets', 'Helps to gain insights like if movies with higher budget have high popularity'))\nfig.update_xaxes(showgrid=False),\nfig.update_yaxes(showgrid=False),\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"x unified\", \n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))\nfig.add_annotation(dict(\n        x=30,\n        y=300000000,\n        text=\"<b>Popularity vs Budget:<br><\/b> We can say that movies with<br> highest budget has more popularity\",    \n        showarrow = False,    \n))","e350e987":"fig = px.scatter(df, x='popularity', color='budget_bins', title='Popularity vs Budgets Bins', height=250)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","05b46881":"df['profit'] = df['revenue'] - df['budget']","fbf07225":"df['profit_bins'] = pd.qcut(df['profit'] , 4, labels=['Low', 'Medium', 'High', 'Extream High'])\ndf['profit_bins'].head(2)","44dac647":"df[df['profit']==df['profit'].max()][['original_title', 'profit', 'release_year']]","da5dc71e":"df[df['profit']==df['profit'].min()][['original_title', 'profit', 'release_year']]","86961212":"dff_profit_movie = df[['profit','original_title']].sort_values(by='profit', ascending=False)[:10]\ndff_profit_movie = pd.DataFrame(dff_profit_movie)\ndff_profit_movie","1f3f15e8":"fig = px.histogram(dff_profit_movie, x='profit', y='original_title', title='Top 10 Profit Movie',\n                   height=250)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ')\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"x unified\", \n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","c495ea00":"dff_loss_movie = df[['profit','original_title']].sort_values(by='profit', ascending=False).tail(10)\ndff_loss_movie = pd.DataFrame(dff_loss_movie)\n\nfig = px.histogram(dff_loss_movie, x='profit', y='original_title', title='Top 10 Loss Movie', \n                   height=250)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ')\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"x unified\", \n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","0403e440":"fig = px.histogram(df, x='release_year', color='profit_bins', nbins=14, height=250,\n                   title='Which Year makes the highest Avg Profit bins')\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False)\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"x unified\", \n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","42a729db":"df_year_profit = df.groupby('release_year')['profit'].mean()\ndf_year_profit = pd.DataFrame(df_year_profit).reset_index()\ndf_year_profit[:3]","1800838b":"fig = px.area(df_year_profit, x='release_year', y='profit', \n              title='Which Year makes the highest Avg Profit', height=250)\nfig.update_xaxes(showgrid=False),\nfig.update_yaxes(showgrid=False),\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"x unified\", \n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","5c5231c8":"df_runtime = df[['runtime','original_title']].sort_values(by='runtime', ascending=False).head(10)\ndf_runtime = pd.DataFrame(df_runtime)\n\nfig = px.histogram(df_runtime, x='runtime', y='original_title', title='Top 10 Highest Runtime Movie', height=250)\nfig.update_xaxes(showgrid=False)\nfig.update_yaxes(showgrid=False, categoryorder='total ascending', ticksuffix=' ')\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"x unified\", \n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","0be5e4f8":"dfa = df[(df['genres']=='Drama') & (df['profit_bins']=='Extream High')][['profit','profit_bins','release_year','genres','original_title']]\ndfa = dfa.sort_values(by='profit', ascending=False)\ndfa[:3]","3f9e74af":"fig = px.histogram(dfa[:15], y='original_title', x='profit', title='Top 15 movies in Drama Gener', height=250)\nfig.update_xaxes(showgrid=False),\nfig.update_yaxes(categoryorder='total ascending', ticksuffix=' ')\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"y unified\",\n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","72a7ccbe":"df_vote_count = pd.DataFrame(df[['vote_count', 'original_title']].sort_values(by='vote_count', ascending = False))\n\nfig = px.histogram(df_vote_count[:15], y='original_title', x='vote_count', \n                   title='Top 15 Highest Vote Count of Movies', height=250)\nfig.update_xaxes(showgrid=False),\nfig.update_yaxes(categoryorder='total ascending', ticksuffix=' ')\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"y unified\",\n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","7b29f4b4":"df_vote_average = pd.DataFrame(df[['vote_average', 'original_title']].sort_values(by='vote_average', ascending = False))\n\nfig = px.histogram(df_vote_average[:10], y='original_title', x='vote_average', \n                   title='Top 10 Highest Vote Average Movies', height=250)\nfig.update_xaxes(showgrid=False),\nfig.update_yaxes(categoryorder='total ascending', ticksuffix=' ')\nfig.update_traces(hovertemplate=None)\nfig.update_layout(margin=dict(t=100, b=0, l=70, r=40),\n                  hovermode=\"y unified\",\n                  xaxis_title=' ', yaxis_title=\" \",\n                  plot_bgcolor='#2d3035', paper_bgcolor='#2d3035',\n                  title_font=dict(size=25, color='#a5a7ab', family=\"Lato, sans-serif\"),\n                  font=dict(color='#8a8d93'))","9d07d7e1":"<body>\n    <div class=\"toc\">\n    <H3 style='border-left: 10px solid #A8A8A8; border-radius: 0 0.5rem 0.5rem 0; text-decoration:underline; text-align:left; width:30%; color: white'> Interpret <\/H3>\n<\/body>\n    \n<b>Avatar<\/b> movie has make highest profit of <b> 2544505847<\/b> \u2b06\ufe0f  in year 2009 and <b>The Warrior's Way<\/b> movie has make the lowest profit of <b>-413912431 \u2b07\ufe0f<\/b> in year 2010.","619b02b8":"<body>\n    <div class=\"toc\">\n        <H2 style='color: white'>3. Data Cleaning <\/H2>\n        <ol> \n            <li>1. Numerical Data <\/li>\n            <ol>\n                <li>3.2.1 Changing date columns into right date time format. <\/li>\n                <li>3.2.2 Removing imdb_id, homepage features as there are of no use. <\/li>\n                <li>3.2.3 Droping '0' values from budget & Revenue <\/li>\n            <\/ol>\n        <\/ol>\n<\/body>","95ed73ee":"* **Popularity:** A numeric quantity specifying the movie popularity\n* **Budget:** The budget in which the movie was made.\n* **Revenue:** The worldwide revenue generated by the movie.\n* **Original Title:** The title of the movie before translation or adaptation.\n* **Cast:** The actor name who played a role in movie\n* **Homepage:** A link to the homepage of the movie.\n* **Director:** The director name who direccted the movie\n* **Title:** Title of the movie.\n* **Keywords:** The keywords or tags related to the movie.\n* **Overview:** A brief description of the movie.\n* **Runtime:** The running time of the movie in minutes.\n* **Geners:** The genre of the movie Drama, Action, Comedy ,Thriller etc.\n* **Production Company:** The production house of the movie.\n* **Vote Count:** The count of votes recieved.\n* **Vote Average:** Average ratings the movie recieved.\n \nDate Time \n* **Release Date:** The date on which movie was released.\n* **Release Year:** The year on which movie was released.","caeec208":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:80%; color: white'> Most Frequent Production Company \ud83d\udcb0<\/H3>\n    <\/body>","4e69f828":"#### If you want to gain more inisghts of sequeeze function do gave a look at this [blog](https:\/\/medium.com\/nerd-for-tech\/top-10-python-tips-to-make-our-life-easy-in-data-analysis-1cdf62d58efd)","544de199":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; color: white'> Wordcloud for Positive, Negative and Neutral Text<\/H3>\n    <\/body>","13a6e91c":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:60%; color: white'> Top 15 movies in Drama Gener <\/H3>\n    <\/body>","9f5fc4e7":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:40%; color: white'> Most frequent Actors \ud83c\udfad<\/H3>\n    <\/body>","31756a01":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:80%; color: white'> Top 15 Highest Vote Count of Movies <\/H3>\n    <\/body>","5dd02c25":"<body>\n    <div class=\"toc\">\n    <H3 style='color: white'> Conclusion <\/H3>\n    <\/body>\n    \nIn this notebook I tried to give an overiew of data with chart and table.","aa00d98f":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:80%; color: white'> Which Year makes the highest Avg Profit bins<\/H3>\n    <\/body>","dde7ed87":"<body>\n    <div class=\"toc\">\n        <H2 style='color: white'>3. Data Cleaning <\/H2>\n        <ol> \n            <li>2. Textual Data <\/li>\n            <ol>\n                <li>3.2.1 Cleaning the text <\/li>\n                <li>3.2.2 Removing Stop words <\/li>\n            <\/ol>\n        <\/ol>\n<\/body>","d8291cd3":"> **describe()** function help us to some basic statistical details like<br>\nPercentile, Mean, Std, Quantile Range of a data frame\nFind out skewness and outliers too. We can plot as a boxplot for outliers","8942368d":"<body>\n    <div class=\"toc\">\n        <H2 style='color: white'>4. Sentiment Analysis <\/H2>\n    <\/div>\n<\/body>","2a66bc74":"<body>\n    <div class=\"toc\">\n    <H3 style='color: white'> Final Notes <\/H3>\n    <\/body>\n    \nThis notebook was my first time using Plotly, so let me know if any part of my code is unclear or if you know a better way to do it! If you have suggestion about the notebook or code do let me know and I'll try my best to fix it.\n\nAdditionally feel free to reach out to me either in the comments or through Kaggle via email\/LinkedIn.","fce991fd":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:80%; color: white'> Impact of Movies over the Year <\/H3>\n    <\/body>","3826a259":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:40%'> Top 10 Highest Runtime Movie <\/H3>\n    <\/body>","4d1ef333":"<body>\n    <div class=\"toc\">\n        <H2 style='color: white'>5. Data Visualization<\/H2>\n        <ol> \n            <ol>\n                <li>3.2.1 Cleaning the text <\/li>\n                <li>3.2.2 Removing Stop words <\/li>\n            <\/ol>\n        <\/ol>\n<\/body>","00ef60aa":"<body>\n    <div class=\"toc\">\n    <H3 style='border-left: 10px solid #A8A8A8; border-radius: 0 0.5rem 0.5rem 0; text-decoration:underline; text-align:left; width:30%; color: white'> Interpret <\/H3>\n<\/body>\n    \n\nTo plot multiple pairwise bivariate distributions in a dataset, we can use the **scatter_matrix()** function. This shows the relationship for (n, 2) combination of variable in a DataFrame as a matrix of plots and the diagonal plots are the univariate plots.<br>\nIn chart release yera vs poularity there are three points which has highest popularity.<br>\nIf we compare chart with release year with different parameters. We can three clusters of data: one is on the left another one is on right and last one is the three points\n","9663b491":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:60%; color: white'> Most frequent Directors \ud83c\udfa5<\/H3>\n    <\/body>","3e3145e4":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:80%; color: white'> Top 10 Highest Vote Average Movies <\/H3>\n    <\/body>","e43f4ccb":"<body>\n    <div class=\"toc\">\n    <H3 style='border-left: 10px solid #A8A8A8; border-radius: 0 0.5rem 0.5rem 0; text-decoration:underline; text-align:left; width:30%; color: white'> Interpret <\/H3>\n<\/body>\n    \n\nThere are many rows which have 0 value for Revenue & Budject this can be due to lack of infomration, or those movies were never released there can be various factors.\nOmitting that data in cleaning phase.","809e47b5":"<body>\n    <div class=\"toc\">\n    <H3 style='border-left: 10px solid #A8A8A8; border-radius: 0 0.5rem 0.5rem 0; text-decoration:underline; text-align:left; width:20%'> qcut <\/H3>\n<\/body>\n    \nThe simplest use of qcut is to define the number of quantiles and let pandas figure out how to divide up the data.<br>\nIf you want equal distribution of the items in your bins, use qcut. <br>\nIf you want to define your own numeric bin ranges, then use cut","a3592881":"<body>\n    <div class=\"toc\">\n    <H3 style='color: white'> Data Description <\/H3>\n    <\/body>","a10d80cf":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:80%; color: white'> Which Year makes the highest Avg Profit <\/H3>\n    <\/body>","2ac66bf8":"> **info()**<br>\nFinding out the column data type,\nFinding how many null values are present in each column, and \nFinding the shape of data\nBasically we can tell **info = dtype + shape + isnull()**","3a91c140":"<body>\n    <div class=\"toc\">\n    <H3 style='border-left: 10px solid #A8A8A8; border-radius: 0 0.5rem 0.5rem 0; text-decoration:underline; text-align:left; width:30%;  color: white'> Interpret <\/H3>\n<\/body>\n    \nAs shown cast, director, geners missing values are very less. So we will replace them with 'missing'","67f50db9":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:80%; color: white'> Movie Review Classification \ud83d\ude0a \ud83d\ude10 \ud83d\ude14<\/H3>\n    <\/body>","adc529f5":"<body>\n    <div class=\"toc\">\n    <H3 style='border-left: 10px solid #A8A8A8; border-radius: 0 0.5rem 0.5rem 0; text-decoration:underline; text-align:left; width:30%; color: white'> Interpret <\/H3>\n<\/body>\n     \nThe **lowest** profit is made in between **1960 to 1976** year and **highest** profit is made in between **2014 to 2015**","7239959c":"<body>\n    <div class=\"toc\">\n    <H3 style='color: white'> Data  <\/H3>\n    <\/body>","437506a9":"<body>\n    <div class=\"toc\">\n    <H3 style='border-left: 10px solid #A8A8A8; border-radius: 0 0.5rem 0.5rem 0; text-decoration:underline; text-align:left; width:30%; color: white'> Interpret <\/H3>\n<\/body>\n    \nIf you just want to see one legend value like 'High'then click on legend 'Extream High', 'Low' and 'Medium' then this field will disappear from the chart. So now you can see the values of only popularity vs budget('High')","58c84e3c":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:40%; color: white'> Popularity Vs Budgets <\/H3>\n    <\/body>","10ef9bc6":"<body>\n    <div class=\"toc\">\n    <H3 style='color: white; text-align:left; width:40%'> Top Movies Geners <\/H3>\n    <\/body>","721edf94":"<body>\n    <div class=\"toc\">\n    <H3 style='text-align:left; width:80%; color: white'> Top 10 Highest & Lowest profit Movie <\/H3>\n    <\/body>","44ab46c7":"> There are some values which are 0 in budget,revenue. We will remove this rows. "}}