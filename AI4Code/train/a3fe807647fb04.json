{"cell_type":{"32f03d19":"code","70d63fe2":"code","b8e374ff":"code","8a5f21f6":"code","bc319d95":"code","9e79d55f":"code","6e0f9902":"code","f5fc7dba":"code","9faba438":"code","d510b0ff":"code","523b2a98":"code","d6a4570a":"code","2c803402":"code","d2c81d16":"code","6ba87d7d":"code","fe743285":"code","05a22418":"code","db40bb11":"code","99e58a22":"code","cec86f00":"code","a3d5c474":"code","86447f6c":"code","bf080f51":"code","e5af6dab":"code","a1058442":"code","112e57da":"code","0493270d":"code","5b6ed6f5":"code","0b6d07f7":"code","191dc3d1":"markdown"},"source":{"32f03d19":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","70d63fe2":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport eli5\nfrom eli5.sklearn import PermutationImportance\nfrom collections import Counter\nimport missingno as msno\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nsns.set_style('whitegrid')","b8e374ff":"data=pd.read_csv('..\/input\/data.csv')","8a5f21f6":"data.head()","bc319d95":"data.columns","9e79d55f":"# checking if the data contains any NULL value\n\ndata.isnull().sum()","6e0f9902":"data.info()","f5fc7dba":"data.describe()","9faba438":"#Number of countries available and top 5 countries with highest number of players\nprint('Total number of countries : {0}'.format(data['Nationality'].nunique()))\nprint(data['Nationality'].value_counts().head(5))\n\n#European Countries have most players","d510b0ff":"#Total number of clubs present and top 5 clubs with highest number of players\nprint('Total number of clubs : {0}'.format(data['Club'].nunique()))\nprint(data['Club'].value_counts().head(5))","523b2a98":"data.columns","d6a4570a":"#Player with maximum Potential and Overall Performance\nprint('Maximum Potential : '+str(data.loc[data['Potential'].idxmax()][2]))\nprint('Maximum Overall Perforamnce : '+str(data.loc[data['Overall'].idxmax()][2]))","2c803402":"pr_cols=['Crossing', 'Finishing', 'HeadingAccuracy', 'ShortPassing', 'Volleys',\n       'Dribbling', 'Curve', 'FKAccuracy', 'LongPassing', 'BallControl',\n       'Acceleration', 'SprintSpeed', 'Agility', 'Reactions', 'Balance',\n       'ShotPower', 'Jumping', 'Stamina', 'Strength', 'LongShots',\n       'Aggression', 'Interceptions', 'Positioning', 'Vision', 'Penalties',\n       'Composure', 'Marking', 'StandingTackle', 'SlidingTackle', 'GKDiving',\n       'GKHandling', 'GKKicking', 'GKPositioning', 'GKReflexes']\ni=0\nwhile i < len(pr_cols):\n    print('Best {0} : {1}'.format(pr_cols[i],data.loc[data[pr_cols[i]].idxmax()][2]))\n    i += 1","d2c81d16":"# filling the missing value for the continous variables for proper data visualization\n\ndata['ShortPassing'].fillna(data['ShortPassing'].mean(), inplace = True)\ndata['Volleys'].fillna(data['Volleys'].mean(), inplace = True)\ndata['Dribbling'].fillna(data['Dribbling'].mean(), inplace = True)\ndata['Curve'].fillna(data['Curve'].mean(), inplace = True)\ndata['FKAccuracy'].fillna(data['FKAccuracy'], inplace = True)\ndata['LongPassing'].fillna(data['LongPassing'].mean(), inplace = True)\ndata['BallControl'].fillna(data['BallControl'].mean(), inplace = True)\ndata['HeadingAccuracy'].fillna(data['HeadingAccuracy'].mean(), inplace = True)\ndata['Finishing'].fillna(data['Finishing'].mean(), inplace = True)\ndata['Crossing'].fillna(data['Crossing'].mean(), inplace = True)\ndata['Weight'].fillna('200lbs', inplace = True)\ndata['Contract Valid Until'].fillna(2019, inplace = True)\ndata['Height'].fillna(\"5'11\", inplace = True)\ndata['Loaned From'].fillna('None', inplace = True)\ndata['Joined'].fillna('Jul 1, 2018', inplace = True)\ndata['Jersey Number'].fillna(8, inplace = True)\ndata['Body Type'].fillna('Normal', inplace = True)\ndata['Position'].fillna('ST', inplace = True)\ndata['Club'].fillna('No Club', inplace = True)\ndata['Work Rate'].fillna('Medium\/ Medium', inplace = True)\ndata['Skill Moves'].fillna(data['Skill Moves'].median(), inplace = True)\ndata['Weak Foot'].fillna(3, inplace = True)\ndata['Preferred Foot'].fillna('Right', inplace = True)\ndata['International Reputation'].fillna(1, inplace = True)\ndata['Wage'].fillna('\u20ac200K', inplace = True)","6ba87d7d":"data.fillna(0, inplace = True)","fe743285":"def defending(data):\n    return int(round((data[['Marking', 'StandingTackle', \n                               'SlidingTackle']].mean()).mean()))\n\ndef general(data):\n    return int(round((data[['HeadingAccuracy', 'Dribbling', 'Curve', \n                               'BallControl']].mean()).mean()))\n\ndef mental(data):\n    return int(round((data[['Aggression', 'Interceptions', 'Positioning', \n                               'Vision','Composure']].mean()).mean()))\n\ndef passing(data):\n    return int(round((data[['Crossing', 'ShortPassing', \n                               'LongPassing']].mean()).mean()))\n\ndef mobility(data):\n    return int(round((data[['Acceleration', 'SprintSpeed', \n                               'Agility','Reactions']].mean()).mean()))\ndef power(data):\n    return int(round((data[['Balance', 'Jumping', 'Stamina', \n                               'Strength']].mean()).mean()))\n\ndef rating(data):\n    return int(round((data[['Potential', 'Overall']].mean()).mean()))\n\ndef shooting(data):\n    return int(round((data[['Finishing', 'Volleys', 'FKAccuracy', \n                               'ShotPower','LongShots', 'Penalties']].mean()).mean()))\n","05a22418":"# renaming a column\ndata.rename(columns={'Club Logo':'Club_Logo'}, inplace=True)\n\n# adding these categories to the data\n\ndata['Defending'] = data.apply(defending, axis = 1)\ndata['General'] = data.apply(general, axis = 1)\ndata['Mental'] = data.apply(mental, axis = 1)\ndata['Passing'] = data.apply(passing, axis = 1)\ndata['Mobility'] = data.apply(mobility, axis = 1)\ndata['Power'] = data.apply(power, axis = 1)\ndata['Rating'] = data.apply(rating, axis = 1)\ndata['Shooting'] = data.apply(shooting, axis = 1)","db40bb11":"players = data[['Name','Defending','General','Mental','Passing',\n                'Mobility','Power','Rating','Shooting','Flag','Age',\n                'Nationality', 'Photo', 'Club_Logo', 'Club']]\n\nplayers.head()","99e58a22":"import requests\nimport random\nfrom math import pi\n\nimport matplotlib.image as mpimg\nfrom matplotlib.offsetbox import (OffsetImage,AnnotationBbox)\n\ndef details(row, title, image, age, nationality, photo, logo, club):\n    \n    flag_image = \"img_flag.jpg\"\n    player_image = \"img_player.jpg\"\n    logo_image = \"img_club_logo.jpg\"\n        \n    img_flag = requests.get(image).content\n    with open(flag_image, 'wb') as handler:\n        handler.write(img_flag)\n    \n    player_img = requests.get(photo).content\n    with open(player_image, 'wb') as handler:\n        handler.write(player_img)\n     \n    logo_img = requests.get(logo).content\n    with open(logo_image, 'wb') as handler:\n        handler.write(logo_img)\n        \n    r = lambda: random.randint(0,255)\n    colorRandom = '#%02X%02X%02X' % (r(),r(),r())\n    \n    if colorRandom == '#ffffff':colorRandom = '#a5d6a7'\n    \n    basic_color = '#37474f'\n    color_annotate = '#01579b'\n    \n    img = mpimg.imread(flag_image)\n    \n    plt.figure(figsize=(15,8))\n    categories=list(players)[1:]\n    coulumnDontUseGraph = ['Flag', 'Age', 'Nationality', 'Photo', 'Logo', 'Club']\n    N = len(categories) - len(coulumnDontUseGraph)\n    \n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n    \n    ax = plt.subplot(111, projection='polar')\n    ax.set_theta_offset(pi \/ 2)\n    ax.set_theta_direction(-1)\n    plt.xticks(angles[:-1], categories, color= 'black', size=17)\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75,100], [\"25\",\"50\",\"75\",\"100\"], color= basic_color, size= 10)\n    plt.ylim(0,100)\n    \n    values = players.loc[row].drop('Name').values.flatten().tolist() \n    valuesDontUseGraph = [image, age, nationality, photo, logo, club]\n    values = [e for e in values if e not in (valuesDontUseGraph)]\n    values += values[:1]\n    \n    ax.plot(angles, values, color= basic_color, linewidth=1, linestyle='solid')\n    ax.fill(angles, values, color= colorRandom, alpha=0.5)\n    axes_coords = [0, 0, 1, 1]\n    ax_image = plt.gcf().add_axes(axes_coords,zorder= -1)\n    ax_image.imshow(img,alpha=0.5)\n    ax_image.axis('off')\n    \n    ax.annotate('Nationality: ' + nationality.upper(), xy=(10,10), xytext=(103, 138),\n                fontsize= 12,\n                color = 'white',\n                bbox={'facecolor': color_annotate, 'pad': 7})\n                      \n    ax.annotate('Age: ' + str(age), xy=(10,10), xytext=(43, 180),\n                fontsize= 15,\n                color = 'white',\n                bbox={'facecolor': color_annotate, 'pad': 7})\n    \n    ax.annotate('Team: ' + club.upper(), xy=(10,10), xytext=(92, 168),\n                fontsize= 12,\n                color = 'white',\n                bbox={'facecolor': color_annotate, 'pad': 7})\n\n    arr_img_player = plt.imread(player_image, format='jpg')\n\n    imagebox_player = OffsetImage(arr_img_player)\n    imagebox_player.image.axes = ax\n    abPlayer = AnnotationBbox(imagebox_player, (0.5, 0.7),\n                        xybox=(313, 223),\n                        xycoords='data',\n                        boxcoords=\"offset points\"\n                        )\n    arr_img_logo = plt.imread(logo_image, format='jpg')\n\n    imagebox_logo = OffsetImage(arr_img_logo)\n    imagebox_logo.image.axes = ax\n    abLogo = AnnotationBbox(imagebox_logo, (0.5, 0.7),\n                        xybox=(-320, -226),\n                        xycoords='data',\n                        boxcoords=\"offset points\"\n                        )\n\n    ax.add_artist(abPlayer)\n    ax.add_artist(abLogo)\n\n    plt.title(title, size=50, color= basic_color)","cec86f00":"# defining a polar graph\n\ndef graphPolar(id = 0):\n    if 0 <= id < len(data.ID):\n        details(row = players.index[id], \n                title = players['Name'][id], \n                age = players['Age'][id], \n                photo = players['Photo'][id],\n                nationality = players['Nationality'][id],\n                image = players['Flag'][id], \n                logo = players['Club_Logo'][id], \n                club = players['Club'][id])\n    else:\n        print('The base has 17917 players. You can put positive numbers from 0 to 17917')\n","a3d5c474":"graphPolar(0)","86447f6c":"graphPolar(1)","bf080f51":"# different positions acquired by the players \n\nplt.figure(figsize = (12, 8))\nsns.set(style = 'dark', palette = 'colorblind', color_codes = True)\nax = sns.countplot('Position', data = data, color = 'orange')\nax.set_xlabel(xlabel = 'Different Positions in Football', fontsize = 16)\nax.set_ylabel(ylabel = 'Count of Players', fontsize = 16)\nax.set_title(label = 'Comparison of Positions and Players', fontsize = 20)\nplt.show()","e5af6dab":"# Skill Moves of Players\n\nplt.figure(figsize = (7, 8))\nax = sns.countplot(x = 'Skill Moves', data = data, palette = 'pastel')\nax.set_title(label = 'Count of players on Basis of their skill moves', fontsize = 20)\nax.set_xlabel(xlabel = 'Number of Skill Moves', fontsize = 16)\nax.set_ylabel(ylabel = 'Count', fontsize = 16)\nplt.show()\n","a1058442":"player_features = (\n    'Acceleration', 'Aggression', 'Agility', \n    'Balance', 'BallControl', 'Composure', \n    'Crossing', 'Dribbling', 'FKAccuracy', \n    'Finishing', 'GKDiving', 'GKHandling', \n    'GKKicking', 'GKPositioning', 'GKReflexes', \n    'HeadingAccuracy', 'Interceptions', 'Jumping', \n    'LongPassing', 'LongShots', 'Marking', 'Penalties'\n)\n\nfrom math import pi\nidx = 1\nplt.figure(figsize=(15,45))\nfor position_name, features in data.groupby(data['Position'])[player_features].mean().iterrows():\n    top_features = dict(features.nlargest(5))\n    \n    # number of variable\n    categories=top_features.keys()\n    N = len(categories)\n\n    # We are going to plot the first line of the data frame.\n    # But we need to repeat the first value to close the circular graph:\n    values = list(top_features.values())\n    values += values[:1]\n\n    # What will be the angle of each axis in the plot? (we divide the plot \/ number of variable)\n    angles = [n \/ float(N) * 2 * pi for n in range(N)]\n    angles += angles[:1]\n\n    # Initialise the spider plot\n    ax = plt.subplot(10, 3, idx, polar=True)\n\n    # Draw one axe per variable + add labels labels yet\n    plt.xticks(angles[:-1], categories, color='grey', size=8)\n # Draw ylabels\n    ax.set_rlabel_position(0)\n    plt.yticks([25,50,75], [\"25\",\"50\",\"75\"], color=\"grey\", size=7)\n    plt.ylim(0,100)\n    \n    plt.subplots_adjust(hspace = 0.5)\n    \n    # Plot data\n    ax.plot(angles, values, linewidth=1, linestyle='solid')\n\n    # Fill area\n    ax.fill(angles, values, 'b', alpha=0.1)\n    \n    plt.title(position_name, size=11, y=1.1)\n    \n    idx += 1","112e57da":"df=pd.read_csv('..\/input\/data.csv')","0493270d":"#DROP UNNECESSARY VALUES\ndrop_cols = df.columns[28:54]\ndf = df.drop(drop_cols, axis = 1)\ndf = df.drop(['Unnamed: 0','ID','Photo','Flag','Club Logo','Jersey Number','Joined','Special','Loaned From','Body Type', 'Release Clause',\n               'Weight','Height','Contract Valid Until','Wage','Value','Club'], axis = 1)\ndf = df.dropna()\ndf.head()","5b6ed6f5":"#Turn Real Face into a binary indicator variable\ndef face_to_num(df):\n    if (df['Real Face'] == 'Yes'):\n        return 1\n    else:\n        return 0\n    \n#Turn Preferred Foot into a binary indicator variable\ndef right_footed(df):\n    if (df['Preferred Foot'] == 'Right'):\n        return 1\n    else:\n        return 0\n\n#Create a simplified position varaible to account for all player positions\ndef simple_position(df):\n    if (df['Position'] == 'GK'):\n        return 'GK'\n    elif ((df['Position'] == 'RB') | (df['Position'] == 'LB') | (df['Position'] == 'CB') | (df['Position'] == 'LCB') | (df['Position'] == 'RCB') | (df['Position'] == 'RWB') | (df['Position'] == 'LWB') ):\n        return 'CB'\n    elif ((df['Position'] == 'LDM') | (df['Position'] == 'CDM') | (df['Position'] == 'RDM')):\n        return 'DM'\n    elif ((df['Position'] == 'LM') | (df['Position'] == 'LCM') | (df['Position'] == 'CM') | (df['Position'] == 'RCM') | (df['Position'] == 'RM')):\n        return 'MF'\n    elif ((df['Position'] == 'LAM') | (df['Position'] == 'CAM') | (df['Position'] == 'RAM') | (df['Position'] == 'LW') | (df['Position'] == 'RW')):\n        return 'AM'\n    elif ((df['Position'] == 'RS') | (df['Position'] == 'ST') | (df['Position'] == 'LS') | (df['Position'] == 'CF') | (df['Position'] == 'LF') | (df['Position'] == 'RF')):\n        return 'ST'\n    else:\n        return df.Position\n\n#Get a count of Nationalities in the Dataset, make of list of those with over 250 Players (our Major Nations)\nnat_counts = df.Nationality.value_counts()\nnat_list = nat_counts[nat_counts > 250].index.tolist()\n\n#Replace Nationality with a binary indicator variable for 'Major Nation'\ndef major_nation(df):\n    if (df.Nationality in nat_list):\n        return 1\n    else:\n        return 0\n\n#Create a copy of the original dataframe to avoid indexing errors\ndf1 = df.copy()\n\n#Apply changes to dataset to create new column\ndf1['Real_Face'] = df1.apply(face_to_num, axis=1)\ndf1['Right_Foot'] = df1.apply(right_footed, axis=1)\ndf1['Simple_Position'] = df1.apply(simple_position,axis = 1)\ndf1['Major_Nation'] = df1.apply(major_nation,axis = 1)\n\n#Split the Work Rate Column in two\ntempwork = df1[\"Work Rate\"].str.split(\"\/ \", n = 1, expand = True) \n#Create new column for first work rate\ndf1[\"WorkRate1\"]= tempwork[0]   \n#Create new column for second work rate\ndf1[\"WorkRate2\"]= tempwork[1]\n#Drop original columns used\ndf1 = df1.drop(['Work Rate','Preferred Foot','Real Face', 'Position','Nationality'], axis = 1)\ndf1.head()\n","0b6d07f7":"#Split ID as a Target value\ntarget = df1.Overall\ndf2 = df1.drop(['Overall'], axis = 1)\n\n#Splitting into test and train\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(df2, target, test_size=0.2)\n\n#One Hot Encoding\nX_train = pd.get_dummies(X_train)\nX_test = pd.get_dummies(X_test)\nprint(X_test.shape,X_train.shape)\nprint(y_test.shape,y_train.shape)","191dc3d1":"[**Modeling**]"}}