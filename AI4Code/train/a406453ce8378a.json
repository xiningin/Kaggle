{"cell_type":{"d62480f1":"code","f7f46fc3":"code","b4f0da30":"code","7e8292f7":"code","0860c9a0":"code","1ab53a7a":"code","fe102fdd":"code","931f9050":"code","cc69be04":"code","f58d91d5":"code","03e1f1be":"code","8bf62f55":"code","0a946f1e":"markdown","05ea3ffe":"markdown"},"source":{"d62480f1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","f7f46fc3":"df_ksi = pd.read_csv('..\/input\/KSI.csv')","b4f0da30":"df_ksi.info()","7e8292f7":"df_ksi.sample(5)","0860c9a0":"from datetime import datetime\n\ndef str_to_datetime(string):\n    return datetime.strptime(string, \"%Y-%m-%dT%H:%M:%S.%fZ\")","1ab53a7a":"def calculate_minutes(row):\n    if row['Hour'] == 0:\n        return row['TIME']\n    else:\n        return int(str(row['TIME'])[len(str(row['Hour'])):])","fe102fdd":"def calculate_weekday(row):\n    return datetime(year = row['YEAR'],\n                    month = row['MONTH'],\n                    day = row['DAY'],\n                    hour = row['HOUR'],\n                    minute = row['MINUTES']\n                   ).weekday()","931f9050":"def data_clean(data):\n    # The commented code below is just for referrence on how to manipulate entire columns at once.\n    #data['Age'] = data['Age'].fillna(data['Age'].median())\n    #data['Gender'] = data['Sex'].map({'female':0, 'male':1}).astype(int)\n    #data['Family'] = data['Parch'] + data['SibSp']\n    #data['Fare'] = data['Fare'].fillna(data['Fare'].mean())\n    #data = data.drop(['SibSp','Parch','Sex','Name','Cabin','Embarked','Ticket'],axis=1)\n    \n    for attribute in ['PEDESTRIAN', 'CYCLIST', 'AUTOMOBILE', 'MOTORCYCLE', 'TRUCK', 'TRSN_CITY_VEH', 'EMERG_VEH', 'PASSENGER', 'SPEEDING', 'AG_DRIV', 'REDLIGHT', 'ALCOHOL', 'DISABILITY']:\n        data[attribute] = data[attribute].map({'Yes': 1,\n                                               '': 0}).fillna(0).astype(int)\n    \n    data['FATAL'] = data['ACCLASS'].map({'Non-Fatal Injury': 0,\n                                         'Property Damage Only': 0,\n                                         'Fatal': 1}).fillna(0)\n    \n    date_temp = data['DATE'].apply(str_to_datetime)\n    data['MONTH'] = date_temp.apply(lambda x: x.month)\n    data['DAY'] = date_temp.apply(lambda x: x.day)\n    data['HOUR'] = data['Hour']\n    data['MINUTES'] = data.apply(calculate_minutes, axis=1)\n    data['WEEKDAY'] = data.apply(calculate_weekday, axis=1)#.map({0: 'Monday',1: 'Tuesday',2: 'Wednesday',3: 'Thursday',4: 'Friday',5: 'Saturday',6: 'Sunday'})\n    \n    print(data.columns)\n        \n    return data[['ACCNUM',\n                 'YEAR',\n                 'MONTH',\n                 'DAY',\n                 'HOUR',                 \n                 'MINUTES',\n                 'WEEKDAY',\n                 'LATITUDE',\n                 'LONGITUDE',\n                 'Ward_Name',\n                 'Ward_ID',\n                 'Hood_Name',\n                 'Hood_ID',\n                 'Division',\n                 'District',\n                 'STREET1',\n                 'STREET2',\n                 'OFFSET',\n                 'ROAD_CLASS'] + list(data.columns[15:-12]) + ['FATAL']\n               ]","cc69be04":"df_ksi_clean = data_clean(df_ksi.copy())","f58d91d5":"df_ksi_clean.sample(5)","03e1f1be":"df_ksi_clean.info()","8bf62f55":"df_ksi_clean.to_csv('KSI_CLEAN.csv', index = False)","0a946f1e":"# Issues Discovered with Dataset that will be Cleaned\n\n1. DATE field is only accurate for year, month, & day\n2. Attribute 'ACCLASS' should be optimized for fatal vs non-fatal incidents\n3. Fatal incidents can be represented in a boolean manner\n4. The following attributes represent boolean values and should be encoded as such:\n\n\n* CYCLIST\n* AUTOMOBILE\n* MOTORCYCLE\n* TRUCK\n* TRSN_CITY_VEH\n* EMERG_VEH\n* PASSENGER\n* SPEEDING\n* AG_DRIV\n* REDLIGHT\n* ALCOHOL\n* DISABILITY","05ea3ffe":"# KSI Data Cleaning\n*[Geospatial Club](http:\/\/bit.ly\/uwgeospatial) - Winter 2019*\n\nThis notebook is about perfomring data cleaning on the dataset called [Killed or Seriously Injured](http:\/\/bit.ly\/open-data-ksi-toronto) provided by the City of Toronto Police Open Data portal.\n\nThe Data Cleaning of this dataset was in preparation for another kernel that was used for a workshop called [Machine Learning for Geospatial Data](https:\/\/www.kaggle.com\/jrmistry\/uwgeo-club-ml-for-vector-geodata-workshop-1\/)."}}