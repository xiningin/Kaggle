{"cell_type":{"1418db35":"code","4a385613":"code","54ba3d14":"code","ba34373e":"code","978cd7c0":"code","f319e89b":"code","80c4c48e":"code","428a6281":"code","64fc7079":"code","9836698f":"code","b0b5e41c":"markdown","45febd42":"markdown","99df647f":"markdown"},"source":{"1418db35":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4a385613":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.image as mpimg\nimport seaborn as sns\n%matplotlib inline\nfrom sklearn.preprocessing import MinMaxScaler\nimport tensorflow as tf\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nfrom keras.layers import Dropout\nfrom keras.layers import Flatten\nfrom keras.layers.convolutional import Conv2D\nfrom keras.layers.convolutional import MaxPooling2D\nfrom keras import backend as K\nfrom keras.utils import np_utils\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix\nimport warnings\nwarnings.filterwarnings('ignore') ","54ba3d14":"data = pd.read_csv(\"\/kaggle\/input\/az-handwritten-alphabets-in-csv-format\/A_Z Handwritten Data.csv\").astype('float32')\ndata.rename(columns={'0':'label'}, inplace=True)\ndata.head()\n","ba34373e":"data.shape\n# Split data into variables and target\nx=data.drop('label',axis = 1)\ny=data['label']\n\n","978cd7c0":"# Change label to alphabets\nalphabets_mapper = {0:'A',1:'B',2:'C',3:'D',4:'E',5:'F',6:'G',7:'H',8:'I',9:'J',10:'K',11:'L',12:'M',13:'N',14:'O',15:'P',16:'Q',17:'R',18:'S',19:'T',20:'U',21:'V',22:'W',23:'X',24:'Y',25:'Z'} \ndataset_alphabets = data.copy()\ndata['label'] = data['label'].map(alphabets_mapper)\n\nlabel_size = data.groupby('label').size()\nlabel_size.plot.barh(figsize=(10,10))\nplt.show()","f319e89b":"# splite the data\nX_train, X_test, y_train, y_test = train_test_split(x,y)\n\n# scale data\nstandard_scaler = MinMaxScaler()\nstandard_scaler.fit(X_train)\n\nX_train = standard_scaler.transform(X_train)\nX_test = standard_scaler.transform(X_test)\n\n","80c4c48e":"X_train = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32')\nX_test = X_test.reshape(X_test.shape[0], 28, 28, 1).astype('float32')\n\ny_train = np_utils.to_categorical(y_train)\ny_test = np_utils.to_categorical(y_test)","428a6281":"model = Sequential()\nmodel.add(Conv2D(32, (5,5), input_shape=(28, 28, 1), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Dropout(0.3))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(len(y.unique()), activation='softmax'))\n\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","64fc7079":"history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=18, batch_size=200, verbose=2)\n\nscores = model.evaluate(X_test,y_test, verbose=0)\nprint(\"Model Score:\",scores[1])","9836698f":"plt.plot(history.history['loss'])\nplt.plot(history.history['val_loss'])\nplt.title('Model loss')\nplt.ylabel('Loss')\nplt.xlabel('Epoch')\nplt.legend(['Train', 'Test'], loc='upper left')\nplt.show()","b0b5e41c":"**2. Data Preparation**","45febd42":"**1.  Import librarys and data**","99df647f":"**3. Build the model**"}}