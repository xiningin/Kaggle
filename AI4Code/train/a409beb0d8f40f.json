{"cell_type":{"78f0c225":"code","65fbfa39":"code","777db8f4":"code","149bcd25":"code","d0156277":"code","47af43db":"code","f40d00a9":"code","cef71219":"code","f2a4e061":"code","8d1653ab":"code","f44e34a7":"code","b0a0e903":"code","090a05d2":"code","8d528c06":"code","4dee3ccb":"code","ecf3f5f5":"code","26f0678a":"code","d1bdf7f0":"code","0637da91":"code","b9f3a544":"code","c7bb29a8":"code","a7bc72a2":"code","67cbcb52":"code","fa388802":"code","b86dd639":"code","5fffecdc":"code","caf121d2":"code","af7bf45a":"code","fb349eb3":"code","d64d5aac":"code","72ed9b9e":"code","83652702":"markdown","c742b857":"markdown","a7598a66":"markdown","a2869c9a":"markdown","c3996490":"markdown"},"source":{"78f0c225":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","65fbfa39":"#Importing Libraries\n\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\n%matplotlib inline","777db8f4":"#Importing DadaSet\ndf = pd.read_csv(\"..\/input\/latest-covid19-india-statewise-data\/Latest Covid-19 India Status.csv\")","149bcd25":"#Check Data\ndf.head()","d0156277":"#Check Features and rows\ndf.shape","47af43db":"#Checking Null Values\ndf.isnull().sum()","f40d00a9":"#Checking Duplicate Values\ndf.duplicated().sum()","cef71219":"df.describe()","f2a4e061":"#Checking Correlations Between Features\n\ndf.corr()","8d1653ab":"sns.heatmap(df.corr(), annot=True)","f44e34a7":"df.style.background_gradient(cmap=\"Reds\")","b0a0e903":"df.rename(columns = {'State\/UTs':'States'}, inplace = True)","090a05d2":"df.head()","8d528c06":"# Total Cases by States\nplt.figure(figsize=(10,4))\nplots = sns.barplot(x= df['States'],y= df['Total Cases'],order=df.sort_values('Total Cases',ascending=False).States)\nplt.xticks(rotation=90)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=8, xytext=(0, 8),\n                   textcoords='offset points')","4dee3ccb":"# Most Number of Deaths\nplt.figure(figsize=(10,4))\nplots = sns.barplot(x= df['States'],y= df['Deaths'],order=df.sort_values('Deaths',ascending=False).States)\nplt.xticks(rotation=90)\nfor bar in plots.patches:\n    plots.annotate(format(bar.get_height(), '.2f'),\n                   (bar.get_x() + bar.get_width() \/ 2,\n                    bar.get_height()), ha='center', va='center',\n                   size=8, xytext=(0, 8),\n                   textcoords='offset points')","ecf3f5f5":"px.scatter(df, x='Active Ratio (%)',y='Death Ratio (%)', color=df['States'])","26f0678a":"!pip install pycaret","d1bdf7f0":"from pycaret.regression import *","0637da91":"df.drop(['Death Ratio (%)', 'States'],axis=1,inplace=True)\nX_testing = df.iloc[:1]\ndf = df.iloc[1:]\nDeaths = X_testing.Deaths\nX_testing.drop('Deaths',axis=1)","b9f3a544":"#Checking Enviroment of Comparing Models\nenv = setup(data=df,target='Deaths',train_size=0.99,normalize=True,normalize_method='robust',session_id = 69,silent=True)","c7bb29a8":"#Compare Models on \"Root Mean Square Error\"\nModels = compare_models(sort='RMSE')","a7bc72a2":"print(Models)","67cbcb52":"type(Models)","fa388802":"huber = create_model('huber') #Using PyCaret we easily impliment Model just using their short forms","b86dd639":"# Hyperparameter Tunning Using PyCared\nTuned_huber = tune_model(huber)","5fffecdc":"print(Tuned_huber)","caf121d2":"evaluate_model(Models)","af7bf45a":"Final_Model = finalize_model(Tuned_huber)","fb349eb3":"print(Final_Model)","d64d5aac":"from sklearn.linear_model import HuberRegressor\n\ny_train = df.Deaths\ndf.drop(['Deaths'],axis=1)\nregressor =HuberRegressor(alpha=0.001, epsilon=1.7, fit_intercept=True, max_iter=100,\n               tol=1e-05, warm_start=False)\nregressor.fit(df,y_train)\nDeath_Prediction = regressor.predict(X_testing)","72ed9b9e":"print(f'Our Predictions        :{int(Death_Prediction[0])}')\nprint(f'Actual Deaths          :{Deaths.values[0]}')","83652702":"**Conclusion**\nIn Covid-19 Data Set all Features are perfectly Correlated to each other thats why model Predictions are so perfect\nMore the Covid cases more the deaths in every states.","c742b857":"# EDA","a7598a66":"# State Wise Covid-19 India","a2869c9a":"# Create Model","c3996490":"# Model Training & Prediction Using PyCaret"}}