{"cell_type":{"6f6881c3":"code","0978316d":"code","2a9e9c18":"code","5e0de947":"code","a78ee38f":"code","2d784376":"code","5e32874e":"code","b89242d7":"code","62d5f99c":"code","59e520ea":"code","c00f98eb":"code","55553a10":"code","e607446b":"code","d01a895b":"code","f81a351a":"code","5bdd0193":"code","eb9a97b9":"code","69cc0a2b":"code","2a25a200":"code","4b397e70":"code","9df1993d":"code","593ca329":"code","532e97e7":"code","ef7652a8":"code","bd776023":"code","b32ff3e5":"code","f188f7cd":"code","a7ff366b":"code","d2983376":"code","1f9b3601":"code","46cd75ba":"code","ce9fb93c":"code","d9792b96":"code","f2f62577":"code","e778fe60":"code","94371422":"code","c50e457e":"code","9e7d31fe":"code","7b9994fe":"code","ef7cda49":"code","d7adc5ec":"code","50441a65":"code","d14d9f29":"code","0db9e6a7":"code","41b4b899":"code","e17016ef":"code","9428d624":"code","dc9b7de5":"code","f805936b":"code","375f981e":"code","1cea7beb":"code","bceed4bf":"code","658a5168":"code","97a70505":"code","f5337b02":"markdown","113d0660":"markdown","da151aff":"markdown","5800594a":"markdown","c22e442d":"markdown","f24d33f2":"markdown","c658de5e":"markdown","87190af6":"markdown"},"source":{"6f6881c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0978316d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom pandas.plotting import scatter_matrix\nimport warnings\nwarnings.filterwarnings('ignore')","2a9e9c18":"df=pd.read_csv(\"..\/input\/red-wine-quality-cortez-et-al-2009\/winequality-red.csv\")","5e0de947":"df.head()","a78ee38f":"df.info()","2d784376":"df.describe()","5e32874e":"df.isnull().sum()","b89242d7":"df.duplicated().sum()","62d5f99c":"df.loc[df.duplicated(), :]","59e520ea":"df.drop_duplicates(keep='first',inplace=True)","c00f98eb":"df.duplicated().sum()","55553a10":"df.info()","e607446b":"df.corr()","d01a895b":"attributes = [\"alcohol\", \"volatile acidity\", \"citric acid\", \"sulphates\"]\nscatter_matrix(df[attributes], figsize = (12,8))","f81a351a":"X=df.drop('quality',axis=1)","5bdd0193":"y=df.quality","eb9a97b9":"y = df['quality'].apply(lambda y_value: 1 if y_value>=7 else 0 )","69cc0a2b":"##setting good quality wine level as score 7 or above","2a25a200":"y.value_counts()","4b397e70":"#over sampling\nfrom imblearn.over_sampling import RandomOverSampler\nros=RandomOverSampler(sampling_strategy='not majority')\nX_res, y_res = ros.fit_resample(X,y)","9df1993d":"y_res.value_counts()","593ca329":"y.head()","532e97e7":"X.head()","ef7652a8":"from sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import cross_val_score","bd776023":"from sklearn.ensemble import RandomForestClassifier","b32ff3e5":"score1=cross_val_score(RandomForestClassifier(),X_res,y_res,cv=10)","f188f7cd":"score1","a7ff366b":"score1.mean()","d2983376":"from xgboost import XGBClassifier","1f9b3601":"score2=cross_val_score(XGBClassifier(),X_res,y_res,cv=10)","46cd75ba":"score2","ce9fb93c":"score2.mean()","d9792b96":"X_train, X_test, y_train, y_test = train_test_split(X_res, y_res,test_size=.2,random_state =42)","f2f62577":"X_train.shape, y_train.shape","e778fe60":"X_test.shape, y_test.shape","94371422":"y_train.value_counts(),y_test.value_counts()","c50e457e":"from sklearn.linear_model import SGDClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import RandomForestClassifier\nfrom xgboost import XGBRegressor\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.neighbors import KNeighborsRegressor","9e7d31fe":"names = ['SGDClassifier()',\n               'DecisionTreeClassifier()',\n               'DecisionTreeRegressor()',\n               'RandomForestRegressor()',\n               'RandomForestClassifier()',\n               'XGBRegressor()',\n               'XGBClassifier()',\n               'KNeighborsClassifier(n_neighbors=1)',\n               'KNeighborsRegressor(n_neighbors=1)']\n\nclassifiers = [SGDClassifier(),\n               DecisionTreeClassifier(),\n               DecisionTreeRegressor(),\n               RandomForestRegressor(),\n               RandomForestClassifier(),\n               XGBRegressor(),\n               XGBClassifier(),\n               KNeighborsClassifier(n_neighbors=1),\n               KNeighborsRegressor(n_neighbors=1)]","7b9994fe":"scores = []\nfor name, clf in zip(names, classifiers):\n    clf.fit(X_train, y_train)\n    score = clf.score(X_test, y_test)\n    scores.append(score)","ef7cda49":"scores","d7adc5ec":"df = pd.DataFrame()\ndf['name'] = names\ndf['score'] = scores\ndf","50441a65":"##since random forest classifier performs the best we will choose it to make our model","d14d9f29":"model=RandomForestClassifier()","0db9e6a7":"from sklearn.model_selection import cross_val_predict\n\ny_train_pred = cross_val_predict(model, X_train, y_train, cv=10)","41b4b899":"y_train_pred","e17016ef":"s=lambda y_value: 1 if y_value>=0.5 else 0\ny_train_pred=np.array([s(x) for x in y_train_pred])","9428d624":"y_train_pred","dc9b7de5":"from sklearn.metrics import confusion_matrix\nconfusion_matrix(y_train, y_train_pred)","f805936b":"from sklearn.metrics import precision_score, recall_score\nps=precision_score(y_train, y_train_pred)\nps #precision score","375f981e":"rs=recall_score(y_train, y_train_pred)\nrs #recall score","1cea7beb":"f1=2*((ps*rs)\/(ps+rs))\nf1 #f1 score","bceed4bf":"model.fit(X_train,y_train)","658a5168":"## finally checking the score of the model on test set","97a70505":"result=model.score(X_test, y_test)\nprint(result)","f5337b02":"# EDA","113d0660":"# comparing two models","da151aff":"# Defining learning classifiers","5800594a":"# Build Model, Apply Model on Test Data & Record Accuracy Scores","c22e442d":"# importing libraries","f24d33f2":"# Build Classification Models","c658de5e":"# checking model accuracy","87190af6":"# oversampling to balance the dataset"}}