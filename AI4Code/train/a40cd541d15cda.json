{"cell_type":{"98fd5676":"code","c1ec10f2":"code","addaf6d5":"code","723e1506":"code","07b5ea56":"code","87da9973":"code","1f34701f":"code","2d8f6ff5":"code","53cac0b7":"code","ee55f364":"code","75298c5f":"code","097ecd79":"code","af9defd0":"code","38c24476":"code","3d85a698":"code","2b5833a3":"code","a097abbc":"code","f2120173":"code","c03cf8b0":"code","5cb1319f":"code","e8d22166":"code","8e8fbf8b":"code","175b7433":"code","30b9ec5d":"code","a375cf0f":"code","c2bf298b":"code","113171cf":"code","e016d0d1":"code","cd7cb37f":"code","2754bc1c":"code","876c4e33":"code","e37600ae":"code","bef9f0a1":"code","ab4b6cba":"code","a87c465f":"code","f4e1d46d":"code","2af623dd":"code","ad5d3d58":"code","d5845d61":"code","913f5e5d":"code","d97647d7":"code","5f71f3e9":"code","57cf1127":"code","00d4ee98":"code","6963f0bc":"code","ea873594":"markdown","ab5f1de6":"markdown","66e12ef8":"markdown","fc0cd3ce":"markdown","c6aa8060":"markdown","c38a2037":"markdown"},"source":{"98fd5676":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","c1ec10f2":"train_filepath = '..\/input\/tabular-playground-series-jul-2021\/train.csv'\ntrain_data = pd.read_csv(train_filepath, index_col='date_time', parse_dates=['date_time'])\n#train_data['date_time'] = pd.to_datetime(train_data['date_time'])\n\ntest_filepath = '..\/input\/tabular-playground-series-jul-2021\/test.csv'\ntest_data = pd.read_csv(test_filepath, index_col='date_time', parse_dates=['date_time'])\n#test_data['date_time'] = pd.to_datetime(test_data['date_time'])\n","addaf6d5":"train_data","723e1506":"print(train_data.info())","07b5ea56":"test_data","87da9973":"print(test_data.info())","1f34701f":"train_data.isnull().values.any()","2d8f6ff5":"train_data = train_data.iloc[:-1, :]\n\ntrain_data","53cac0b7":"'''\nplt.figure(figsize=(10,6))\nair_pol_data['relative_humidity'].asfreq('M').plot()\n\nplt.title('Relative humidity over time (by month)')\nplt.show()\n'''","ee55f364":"plt.figure(figsize=(20,6))\nsns.lineplot(data=train_data, x='date_time', y='relative_humidity')","75298c5f":"plt.figure(figsize=(20,6))\nsns.lineplot(data=train_data, x='date_time', y='absolute_humidity')","097ecd79":"plt.figure(figsize=(20,6))\nsns.lineplot(data=train_data, x='date_time', y='sensor_1')","af9defd0":"plt.figure(figsize=(20,6))\nsns.lineplot(data=train_data, x='date_time', y='sensor_2')","38c24476":"plt.figure(figsize=(20,6))\nsns.lineplot(data=train_data, x='date_time', y='sensor_3')","3d85a698":"plt.figure(figsize=(20,6))\nsns.lineplot(data=train_data, x='date_time', y='sensor_4')","2b5833a3":"plt.figure(figsize=(20,6))\nsns.lineplot(data=train_data, x='date_time', y='sensor_5')","a097abbc":"plt.figure(figsize=(20,6))\nsns.lineplot(data=train_data, x='date_time', y='target_carbon_monoxide')","f2120173":"plt.figure(figsize=(20,6))\nsns.lineplot(data=train_data, x='date_time', y='target_benzene')","c03cf8b0":"plt.figure(figsize=(20,6))\nsns.lineplot(data=train_data, x='date_time', y='target_nitrogen_oxides')","5cb1319f":"train_data_corr = train_data.corr()\nmask = np.triu(np.ones_like(train_data_corr, dtype=np.bool))\n\nfig = plt.figure(figsize=(16,10))\nsns.heatmap(train_data_corr, mask=mask)","e8d22166":"#train = train_data.drop('date_time', axis=1)\ntrain = train_data.copy()\n#test = train_data.drop('date_time', axis=1)\ntest = test_data.copy()","8e8fbf8b":"cols = [\n        'target_carbon_monoxide',\n        'target_benzene',\n        'target_nitrogen_oxides'\n       ]\n\nfor i in ['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']:\n    train[i] = np.log(train[i])\n    \ny_co = train.target_carbon_monoxide\ny_ben = train.target_benzene\ny_no = train.target_nitrogen_oxides\n\n#y_co_log = np.log1p(y_co)\n#y_ben_log = np.log1p(y_ben)\n#y_no_log = np.log1p(y_no)\n\nX = train.drop(cols, axis=1)\n","175b7433":"from sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler().fit(X)\nX_scaled = scaler.transform(X)","30b9ec5d":"display(y_co)","a375cf0f":"display(y_ben)","c2bf298b":"display(y_no)","113171cf":"from sklearn.model_selection import train_test_split\n\nX_co_train, X_co_val, y_co_train, y_co_val = train_test_split(X_scaled, y_co, random_state=0, test_size=0.5)\nX_ben_train, X_ben_val, y_ben_train, y_ben_val = train_test_split(X_scaled, y_ben, random_state=0, test_size=0.5)\nX_no_train, X_no_val, y_no_train, y_no_val = train_test_split(X_scaled, y_no, random_state=0, test_size=0.5)","e016d0d1":"#display(y_train)","cd7cb37f":"from xgboost import XGBRegressor\n'''\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n\nxgbr = XGBRegressor(seed=20)\n\nparams = { \"max_depth\": [2, 3, 4],\n           \"learning_rate\": [0.03, 0.04, 0.05],\n           \"n_estimators\": np.arange(100, 1000, 100),\n           \"colsample_bytree\": np.arange(0.2, 0.7, 0.1),\n            \"colsample_bylevel\": np.arange(0.2, 0.7, 0.1),\n            \"colsample_bynode\": np.arange(0.2, 0.7, 0.1)\n            }\n\nreg = RandomizedSearchCV(estimator=xgbr,\n                  param_distributions=params,\n                  scoring='neg_mean_squared_error',\n                   n_iter=50,\n                  verbose=1)\n'''","2754bc1c":"#reg.fit(X_train, y_co_train)\n\n#print(\"Best parameters for carbon monoxide:\", reg.best_params_)","876c4e33":"#reg.fit(X_train, y_ben_train)\n\n#print(\"Best parameters for benzene:\", reg.best_params_)","e37600ae":"#reg.fit(X_train, y_no_train)\n\n#print(\"Best parameters for nitrogen oxide:\", reg.best_params_)","bef9f0a1":"\nparams_1 = {'n_estimators': 900, \n          'learning_rate': 0.01, \n          'max_depth': 4,\n          'colsample_bytree': 0.5000000000000001, \n          'colsample_bylevel': 0.2}\n\nmodel_co = XGBRegressor(**params_1).fit(\n    X_co_train, \n    y_co_train,\n    eval_set=[(X_co_val, y_co_val)],\n    early_stopping_rounds=10,\n)\n","ab4b6cba":"\nparams_2 = {'n_estimators': 900, \n          'learning_rate': 0.01, \n          'max_depth': 4,\n          'colsample_bytree': 0.6000000000000001, \n          'colsample_bylevel': 0.5000000000000001}\n\nmodel_ben = XGBRegressor(**params_2).fit(\n    X_ben_train, \n    y_ben_train,\n    eval_set=[(X_ben_val, y_ben_val)],\n    early_stopping_rounds=10,\n)\n","a87c465f":"\nparams_3 = {'n_estimators': 900, \n          'learning_rate': 0.01, \n          'max_depth': 4,\n          'colsample_bytree': 0.5000000000000001, \n          'colsample_bylevel': 0.2}\n\nmodel_no = XGBRegressor(**params_3).fit(\n    X_no_train, \n    y_no_train,\n    eval_set=[(X_no_val, y_no_val)],\n    early_stopping_rounds=10,\n)\n","f4e1d46d":"from sklearn.metrics import accuracy_score\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_absolute_error, r2_score\n\npred_co = model_co.predict(X_co_val)\npred_ben = model_ben.predict(X_ben_val)\npred_no = model_no.predict(X_no_val)\n\nprint('target_carbon_monoxide\\n')\n#co_val = y_val.iloc[:, 0]\nmae_co = \"Mean absolute error: {}\".format(mean_absolute_error(y_co_val, pred_co))\nprint(mae_co)\n#print(\"Mean absolute error: {}\\n\".format(mean_absolute_error(y_val, pred_co)))\nprint(\"r2 score: {}\\n\".format(r2_score(y_co_val, pred_co)))\n#accuracy_co = accuracy_score(co_val, pred_co)\n#print(\"Accuracy: {}\".format(accuracy_co * 100))\n\nprint('target_benzene\\n')\n#mae_ben =\n#ben_val = y_val.iloc[:, 1]\nprint(\"Mean absolute error: {}\".format(mean_absolute_error(y_ben_val, pred_ben)))\nprint(\"r2 score: {}\\n\".format(r2_score(y_ben_val, pred_ben)))\n#accuracy_ben = accuracy_score(ben_val, pred_ben)\n#print(\"Accuracy: {}\".format(accuracy_ben * 100))\n\nprint('target_nitrogen_oxide\\n')\n#mae_no = \n#no_val = y_val.iloc[:, 2]\nprint(\"Mean absolute error: {}\".format(mean_absolute_error(y_no_val, pred_no)))\nprint(\"r2 score: {}\\n\".format(r2_score(y_no_val, pred_no)))\n#accuracy_no = accuracy_score(ben_val, pred_no)\n#print(\"Accuracy: {}\".format(accuracy_no * 100))","2af623dd":"#final_test = test.drop(['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides'], axis=0)\n#display(final_test)","ad5d3d58":"test_scaled = scaler.transform(test)","d5845d61":"final_preds_co = model_co.predict(test_scaled)\nfinal_preds_co = np.exp(final_preds_co)\n\nfinal_preds_ben = model_ben.predict(test_scaled)\nfinal_preds_ben = np.exp(final_preds_ben)\n\nfinal_preds_no = model_no.predict(test_scaled)\nfinal_preds_no = np.exp(final_preds_no)","913f5e5d":"print(\"'target_carbon_monoxide':\")\nprint(\"Mean absolute error: {}\".format(mean_absolute_error(y_co[:2247], final_preds_co)))\nprint(\"r2 score: {}\\n\".format(r2_score(y_co[:2247], final_preds_co)))\n\nprint(\"'target_benzene':\")\nprint(\"Mean absolute error: {}\".format(mean_absolute_error(y_ben[:2247], final_preds_co)))\nprint(\"r2 score: {}\\n\".format(r2_score(y_ben[:2247], final_preds_co)))\n\nprint(\"'target_nitrogen_oxides':\")\nprint(\"Mean absolute error: {}\".format(mean_absolute_error(y_no[:2247], final_preds_co)))\nprint(\"r2 score: {}\\n\".format(r2_score(y_no[:2247], final_preds_co)))","d97647d7":"sample_sub_fp = '..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv'\nsample_sub = pd.read_csv(sample_sub_fp)","5f71f3e9":"sample_sub","57cf1127":"export = sample_sub.copy()\n\nexport['target_carbon_monoxide'] = final_preds_co[:2247]\nexport['target_benzene'] = final_preds_ben[:2247]\nexport['target_nitrogen_oxides'] = final_preds_no[:2247]","00d4ee98":"export","6963f0bc":"export.to_csv('submission.csv', index=False)","ea873594":"<h1 style=\"text-align:center;\"> Tabular Playground Series - July 2021 <\/h1>\n<h2 style=\"text-align:center;\"> XGBoost Implementation <\/h2>\n<h3 style=\"text-align:center;\"> by Tariq Hussain <\/h3>","ab5f1de6":"## Preparing and pre-processing the data","66e12ef8":"## The XBoost Models","fc0cd3ce":"# Imports","c6aa8060":"# Loading and validating the data","c38a2037":"# Exploratory Data Analysis"}}