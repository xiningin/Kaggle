{"cell_type":{"dbe5aa7a":"code","55662cb3":"code","d919b6af":"code","3b9087a4":"code","4b15862c":"code","1eaedf7f":"code","7cff04b4":"code","5427adbc":"code","fd964ffc":"code","a70ccc8c":"code","3a1888a1":"code","0917578e":"code","bd59ec3e":"code","d1b06848":"code","5e9572c8":"code","47bc7c0e":"code","06838c22":"code","6064ac6f":"code","f8dd89e8":"code","92f8446a":"code","426b59a8":"code","f88eca68":"code","68b931c7":"code","5bc8fb48":"code","e031d82a":"code","195cfd22":"code","d426fba9":"code","027f2f63":"code","b6d5030e":"code","0ab879eb":"code","4919f607":"code","f8e307f4":"code","8ed9d180":"code","ab42d8f0":"code","86d397d1":"code","8d0acf14":"code","1f76fb21":"code","5545407e":"code","45469dbe":"code","2af31d9b":"code","9b78c175":"code","4f68dc99":"code","ef38b373":"code","173fa3ae":"code","d29f727f":"code","c660d5f3":"code","b3e110ee":"code","90f0f9ee":"code","94650908":"code","dfb71afd":"code","4cc9c54b":"code","f13201f2":"code","644a52e6":"markdown","1c624148":"markdown","326bcc09":"markdown","aa023128":"markdown","5ee7534b":"markdown","b981c50a":"markdown","5b154c06":"markdown","4dfcc60e":"markdown","00a7151a":"markdown","4e024838":"markdown","a98267b9":"markdown","73b161b2":"markdown","6f5cc701":"markdown","d51581e7":"markdown","aa081c2f":"markdown","49b08a3d":"markdown","391b192d":"markdown","e5e41e31":"markdown","62c3e7f5":"markdown","d75969e8":"markdown"},"source":{"dbe5aa7a":"\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","55662cb3":"emp_data= pd.read_csv('..\/input\/emp_data.csv')\nemp_data","d919b6af":"emp_data.describe()","3b9087a4":"emp_data.plot(x='Salary_hike', y='Churn_out_rate', style='o') \nplt.title('Salaryhike vs Churn_out_rate')  \nplt.xlabel('Salary_hike') \nplt.ylabel('Churn_out_rate')\nplt.show()","4b15862c":"from scipy.stats import pearsonr\n# calculate Pearson's correlation\ncorr, _ = pearsonr(emp_data['Salary_hike'], emp_data['Churn_out_rate'])\nprint('Pearsons correlation: %.3f' % corr)\n\nfrom scipy.stats import spearmanr\n# calculate spearman's correlation\ncorr, _ = spearmanr(emp_data['Salary_hike'], emp_data['Churn_out_rate'])\nprint('Spearmans correlation: %.3f' % corr)","1eaedf7f":"import seaborn as sns\nplt.figure(figsize=(15,10))\nplt.tight_layout()\nsns.distplot(emp_data['Salary_hike'])\nplt.show() ","7cff04b4":"plt.figure(figsize=(15,10))\nplt.tight_layout()\nsns.distplot(emp_data['Churn_out_rate'])\nplt.show()","5427adbc":"# Input dataset\nX = emp_data['Salary_hike'].values.reshape(-1,1)\nprint(X)\n# Output or Predicted Value of data\ny = emp_data['Churn_out_rate'].values.reshape(-1,1)\n#print(log(y))\n","fd964ffc":"from sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics","a70ccc8c":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size =0.2, random_state =42)","3a1888a1":"predict_reg = LinearRegression()","0917578e":"predict_reg.fit(X_train, y_train)","bd59ec3e":"print(\" Intercept value of Model is \" ,predict_reg.intercept_)\nprint(\"Coefficient value of Model is \", predict_reg.coef_)","d1b06848":"y_pred = predict_reg.predict(X_test)","5e9572c8":"pmsh_pf = pd.DataFrame({'Actual':y_test.flatten(), 'Predict': y_pred.flatten()})\npmsh_pf","47bc7c0e":"plt.scatter(X_test, y_test,  color='gray')\nplt.plot(X_test, y_pred, color='red', linewidth=2)\nplt.show()","06838c22":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))\nprint(\"R^2 Score :          \", metrics.r2_score(y_test, y_pred))","6064ac6f":"# Input dataset\nX_log = np.log(emp_data['Salary_hike'].values.reshape(-1,1))\n\n# Output or Predicted Value of data\ny_log = emp_data['Churn_out_rate'].values.reshape(-1,1)","f8dd89e8":"X_train_log, X_test_1og, Y_train_log, Y_test_log = train_test_split(X_log, y_log, test_size=0.2, random_state= 42)","92f8446a":"y_pred_log= LinearRegression()\ny_pred_log.fit(X_train_log,Y_train_log)","426b59a8":"print(\" Intercept value of Model is \" ,y_pred_log.intercept_)\nprint(\"Co-efficient Value of Log Model is : \", y_pred_log.coef_)","f88eca68":"l_model= y_pred_log.predict(X_test_1og)\nl_model","68b931c7":"pmsh_pf_1 = pd.DataFrame({'Actual':Y_test_log.flatten(), 'Predict': l_model.flatten()})\npmsh_pf_1","5bc8fb48":"plt.scatter(X_test_1og, Y_test_log,  color='gray')\nplt.plot(X_test_1og, l_model, color='red', linewidth=2)\nplt.show()","e031d82a":"print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test_log, l_model))  \nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test_log, l_model) ) \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test_log, l_model)))\nprint(\"R^2 Score :          \", metrics.r2_score(Y_test_log, l_model))","195cfd22":"# Input dataset\nX_e_log = emp_data['Salary_hike'].values.reshape(-1,1)\n\n# Output or Predicted Value of data\ny_e_log = np.log(emp_data['Churn_out_rate'].values.reshape(-1,1))","d426fba9":"X_train_exp, X_test_exp, Y_train_exp, Y_test_exp = train_test_split(X_e_log, y_e_log, test_size=0.2, random_state= 42)","027f2f63":"exp_model= LinearRegression()\nexp_model.fit(X_train_exp, Y_train_exp)","b6d5030e":"print(\" Exponent Model Intercept value is \", exp_model.intercept_)\nprint(\" Exponent model Coefficient value is \", exp_model.coef_)","0ab879eb":"exp_model_pred= exp_model.predict(X_test_exp)\nexp_model_pred","4919f607":"pmsh_exp = pd.DataFrame({'Actual':Y_test_exp.flatten(), 'Predict': exp_model_pred.flatten()})\npmsh_exp","f8e307f4":"plt.scatter(X_test_exp, Y_test_exp,  color='gray')\nplt.plot(X_test_exp, exp_model_pred, color='red', linewidth=2)\nplt.show()","8ed9d180":"print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test_exp, exp_model_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test_exp, exp_model_pred) ) \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test_exp, exp_model_pred)))\nprint(\"R^2 Score :          \", metrics.r2_score(Y_test_exp, exp_model_pred))","ab42d8f0":"emp_data['Square_S_hike'] = emp_data.apply(lambda row: row.Salary_hike**2, axis =1 )\nemp_data","86d397d1":"X_q = emp_data.iloc[:,emp_data.columns != 'Churn_out_rate']\nY_q = emp_data.iloc[:,1]\nX_train, X_test, Y_train, Y_test = train_test_split(X_q, Y_q, test_size=0.2, random_state= 42)\nprint(Y_test)\n","8d0acf14":"model = LinearRegression()\nmodel.fit(X_train, Y_train)","1f76fb21":"print(\" Intercept value of Model is \" ,model.intercept_)\n\ncoeff_df = pd.DataFrame(model.coef_,X_q.columns ,columns=['Coefficient'])\nprint(coeff_df)","5545407e":"y_pred_q_q = model.predict(X_test)","45469dbe":"df_qm = pd.DataFrame({'Actual':Y_test, 'Predicted': y_pred_q_q})\ndf_qm.head()","2af31d9b":"x_t =np.array(X_test)\nplt.scatter(x_t[:,0], Y_test,  color='gray')\nplt.plot(x_t[:,0], y_pred_q_q, color='red', linewidth=2)\nplt.show()","9b78c175":"print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test, y_pred_q_q))  \nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test, y_pred_q_q) ) \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test, y_pred_q_q)))\nprint(\"R^2 Score :          \", metrics.r2_score(Y_test, y_pred_q_q))","4f68dc99":"emp_data['Cube_S_hike'] = emp_data.apply(lambda row: row.Salary_hike**3, axis =1 )\nemp_data","ef38b373":"X_c = emp_data.iloc[:,emp_data.columns != 'Churn_out_rate']\nY_c = emp_data.iloc[:,1]\nX_train_c, X_test_c, Y_train_c, Y_test_c = train_test_split(X_c, Y_c, test_size=0.2, random_state= 42)\nprint(Y_test)","173fa3ae":"cube_model = LinearRegression()\ncube_model.fit(X_train_c, Y_train_c)","d29f727f":"print(\" Intercept value of Cubic Model is \" ,cube_model.intercept_)\n\ncoeff_df = pd.DataFrame(cube_model.coef_, X_c.columns, columns=['Coefficient'])\nprint(coeff_df)\n","c660d5f3":"y_pred_cube = cube_model.predict(X_test_c)","b3e110ee":"df_33 = pd.DataFrame({'Actual':Y_test_c, 'Predicted': y_pred_cube})\ndf_33.head()","90f0f9ee":"x_t_c =np.array(X_test_c)\nplt.scatter(x_t_c[:,0], Y_test_c,  color='gray')\nplt.plot(x_t_c[:,0], y_pred_cube, color='red', linewidth=2)\nplt.show()","94650908":"print('Mean Absolute Error:', metrics.mean_absolute_error(Y_test_c, y_pred_cube))  \nprint('Mean Squared Error:', metrics.mean_squared_error(Y_test_c, y_pred_cube) ) \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(Y_test_c, y_pred_cube)))\nprint(\"R^2 Score :          \", metrics.r2_score(Y_test_c, y_pred_cube))","dfb71afd":"from sklearn.preprocessing import StandardScaler, PolynomialFeatures\nfrom sklearn.pipeline import Pipeline\n\nINPT =[('scale',StandardScaler()), ('polynomial',PolynomialFeatures()), ('model', LinearRegression()) ]\npipe =Pipeline(INPT)\npipe.fit(emp_data[['Salary_hike',  'Square_S_hike', 'Cube_S_hike']], emp_data['Churn_out_rate'])\npred= pipe.predict(emp_data[['Salary_hike',  'Square_S_hike', 'Cube_S_hike']])    ","4cc9c54b":"pmsh_exp_1 = pd.DataFrame({'Actual':emp_data['Churn_out_rate'], 'Predict': pred})\npmsh_exp_1","f13201f2":"print('Mean Absolute Error:', metrics.mean_absolute_error(emp_data['Churn_out_rate'], pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(emp_data['Churn_out_rate'], pred) ) \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(emp_data['Churn_out_rate'], pred)))\nprint(\"R^2 Score :          \", metrics.r2_score(emp_data['Churn_out_rate'], pred))","644a52e6":"# Data Visualization","1c624148":"# Logrithm Transformation\ny= a+ b* log(x)","326bcc09":"- Quadratic Transformation Model\n        Mean Absolute Error: 1.168611984009999\n        Mean Squared Error: 2.0954986994034486\n        Root Mean Squared Error: 1.4475837452125002\n        R^2 Score :           0.9841550192861743","aa023128":"\n# Polynomial Transformation Model","5ee7534b":"- Logrithm Transformation Model\n        Mean Absolute Error: 2.09367893287083\n        Mean Squared Error: 6.513077061244732\n        Root Mean Squared Error: 2.552073090889979\n        R$^2$ Score :           0.9507517802552383","b981c50a":"Calculate Error Rate of the Polynomial Transformation Model","5b154c06":"- Cubic Transformation Model\n        Mean Absolute Error: 1.548301580698535\n        Mean Squared Error: 3.4929330716835127\n        Root Mean Squared Error: 1.8689390229976774\n        R^2 Score :           0.97358840777555","4dfcc60e":"# Linear Regression with Logarithmic Transformation****","00a7151a":"# Simple model without any transformation\n***Train the Model using linear Regression***\n","4e024838":"Calculate Error Rate of the model.","a98267b9":"# Quadratic Transformation Model","73b161b2":"# Exponential Transformation Model\n\n*log(Y) =\u03b1 + \u03b2X + \u03b5*","6f5cc701":"To Check the relationship between two variables i.e Salary Hike and Churn_out_rate","d51581e7":"Calculate Error Rate of the  Logrithm Transformation model.","aa081c2f":"Considering the simple bivariate linear modelYi=\u03b1+\u03b2Xi+\u03b5i,1there are four possible com-binations  of  transformations  involving  logarithms:  the  linear  case  with  no  transformations,  thelinear-log model, the log-linear model2, and the log-log model","49b08a3d":"# Cubic Linear Regression Pipeline","391b192d":"# Conclusion","e5e41e31":"WE have found that while transform the model, got various values for MAE, RMSE, MSE and R$^2$ Values. Summery of the following Models\n- Simple linear Regression Model \n      Mean Absolute Error: 2.141252242842981\n      Mean Squared Error: 7.601526993161889\n      Root Mean Squared Error: 2.7570866858265246\n      R$^2$ Score :           0.9425215350233506***","62c3e7f5":"- Exponential Transformation Model\n        Mean Absolute Error: 0.02398562088178524\n        Mean Squared Error: 0.0009766470474319412\n        Root Mean Squared Error: 0.03125135272963302\n        R^2 Score :           0.9607578802385595","d75969e8":"* Calculate Error Rate of the quadratic  transformation model."}}