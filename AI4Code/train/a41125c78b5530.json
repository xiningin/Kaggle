{"cell_type":{"1ddece6d":"code","fc1d6bfb":"code","496bfa41":"code","5ec7ac67":"code","8ab016a2":"code","6f9bb9c7":"code","918de8ba":"code","ad1846ab":"code","ce341b9c":"code","6a537a1c":"code","45c41174":"code","65dc3dbd":"code","b98dd38e":"code","13304287":"code","cfe47d59":"code","831d73c4":"code","23bbdfbd":"code","cf4ec018":"code","f7927722":"code","c9f07bee":"code","625ed4b0":"markdown","7bd905fd":"markdown","786bc448":"markdown","3de45343":"markdown"},"source":{"1ddece6d":"# DATA_PATH = '..\/input\/'\n# \u6570\u636e\u8f93\u5165\u8def\u5f84\nDATA_PATH = '..\/input\/shopee-product-matching\/'","fc1d6bfb":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport cv2, matplotlib.pyplot as plt\nfrom tqdm import tqdm_notebook\n\nimport cudf, cuml, cupy\nfrom cuml.feature_extraction.text import TfidfVectorizer\nfrom cuml.neighbors import NearestNeighbors\n\n# \u8ba1\u7b97F1 score\ndef getMetric(col):\n    def f1score(row):\n        n = len( np.intersect1d(row.target,row[col]) )\n        return 2*n \/ (len(row.target)+len(row[col]))\n    return f1score\n","496bfa41":"# \u6807\u8bc6\u662f\u4e0d\u662f\u8ba1\u7b97\u9a8c\u8bc1\u5f97\u5206\nCOMPUTE_CV = True\n\ntest = pd.read_csv(DATA_PATH + 'test.csv')\nif len(test)>3: COMPUTE_CV = False\n# \u5982\u679c\u6d4b\u8bd5\u96c6\u5927\u4e8e3\u884c\uff0c\u8fdb\u5165\u63d0\u4ea4\u6a21\u5f0f\nelse: print('this submission notebook will compute CV score, but commit notebook will not')\n\n# COMPUTE_CV = False\n\nif COMPUTE_CV:\n    train = pd.read_csv(DATA_PATH + 'train.csv')\n    train['image'] = DATA_PATH + 'train_images\/' + train['image']\n    tmp = train.groupby('label_group').posting_id.agg('unique').to_dict()\n    train['target'] = train.label_group.map(tmp)\n    train_gf = cudf.read_csv(DATA_PATH + 'train.csv')\nelse:\n    train = pd.read_csv(DATA_PATH + 'test.csv')\n    train['image'] = DATA_PATH + 'test_images\/' + train['image']\n    train_gf = cudf.read_csv(DATA_PATH + 'test.csv')\n    \nprint('train shape is', train.shape )\ntrain.head()","5ec7ac67":"# \u76f8\u540c\u54c8\u5e0c\u503c\u5f53\u4f5c\u4e00\u7ec4\ntmp = train.groupby('image_phash').posting_id.agg('unique').to_dict()\ntrain['oof_hash'] = train.image_phash.map(tmp)\ntrain.head()","8ab016a2":"if COMPUTE_CV:\n    train['f1'] = train.apply(getMetric('oof_hash'),axis=1)\n    print('CV score for baseline =',train.f1.mean())\n\n# \u805a\u7c7b\u5305\u62ec\u81ea\u5df1\u7684\uff0c\u5e94\u8be5\u662f\u5927\u4e8e0.5\u7684","6f9bb9c7":"from PIL import Image\n\nimport torch\ntorch.manual_seed(0)\ntorch.backends.cudnn.deterministic = False\ntorch.backends.cudnn.benchmark = True\n\nimport torchvision.models as models\nimport torchvision.transforms as transforms\nimport torchvision.datasets as datasets\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torch.optim as optim\nfrom torch.autograd import Variable\nfrom torch.utils.data.dataset import Dataset\n\n# \u81ea\u5b9a\u4e49\u4e00\u4e2a\u6570\u636e\u96c6\n# \u5b9e\u4f8b\u5316d=ShopeeImageDataset()\n# d[10] getitem\n# len(d)\nclass ShopeeImageDataset(Dataset):\n    def __init__(self, img_path, transform):\n        self.img_path = img_path\n        self.transform = transform\n        \n    def __getitem__(self, index):\n        img = Image.open(self.img_path[index]).convert('RGB')\n        img = self.transform(img)\n        return img\n    \n    def __len__(self):\n        return len(self.img_path)","918de8ba":"# \u5b9e\u4f8b\u5316\n\nimagedataset = ShopeeImageDataset(\n    train['image'].values,\n    transforms.Compose([\n        transforms.Resize((512, 512)),\n        transforms.ToTensor(),# pillow->tensor,0-255=>0-1\n        transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n]))\n\n# dataloader\u6279\u91cf\u8bfb\u53d6\uff0cbatch_size=10,shuffle\u4e0d\u6253\u4e71\nimageloader = torch.utils.data.DataLoader(\n    imagedataset,\n    batch_size=10, shuffle=False, num_workers=2\n)","ad1846ab":"# \u7528resnet18\nclass ShopeeImageEmbeddingNet(nn.Module):\n    def __init__(self):\n        super(ShopeeImageEmbeddingNet, self).__init__()\n        \n        #\n        model = models.resnet81(True) # True\u8868\u793a\u4f7f\u7528\u9884\u8bad\u7ec3\u53c2\u6570\n        # mean-pooling=>max-pooling \u4f1a\u597d\u4e00\u4e9b\n        model.avgpool = nn.AdaptiveMaxPool2d(output_size=(1, 1))\n        \n        model = nn.Sequential(*list(model.children())[:-1])\n        \n        # \u539f\u59cbimage_net1000\u7c7b\uff0c\u4e0d\u9700\u8981\u5168\u8fde\u63a5\uff0c\u53ea\u9700\u8981embedding\n        model.eval()# \u5173\u95edbn\uff0c\u5173\u95eddropout\n        self.model = model\n    # \u6b63\u5411\u4f20\u64ad\n    def forward(self, img):        \n        out = self.model(img)\n        return out","ce341b9c":"# \u672c\u5730\u4e0e\u8bad\u7ec3\u6a21\u578b\u4fdd\u5b58\u7684\u6587\u4ef6\u5939\n!mkdir -p \/root\/.cache\/torch\/hub\/checkpoints\/\n!cp ..\/input\/pretrained-pytorch-models\/resnet18-5c106cde.pth \/root\/.cache\/torch\/hub\/checkpoints\/","6a537a1c":"DEVICE = 'cuda'\n\nimgmodel = ShopeeImageEmbeddingNet()\nimgmodel = imgmodel.to(DEVICE)\n\nimagefeat = []\nwith torch.no_grad():\n    for data in tqdm_notebook(imageloader):\n        data = data.to(DEVICE)\n        feat = imgmodel(data)\n        \n        feat = feat.reshape(feat.shape[0], -1)\n        \n        feat = feat.data.cpu().numpy()\n        \n        imagefeat.append(feat)","45c41174":"from sklearn.preprocessing import normalize\n\n# l2 norm to kill all the sim in 0-1\nimagefeat = np.vstack(imagefeat)\nimagefeat = normalize(imagefeat)","65dc3dbd":"'''\nKNN = 50\nif len(test)==3: KNN = 2\nmodel = NearestNeighbors(n_neighbors=KNN)\nmodel.fit(imagefeat)\n'''","b98dd38e":"preds = []\n# 4096\u4e00\u6279\u8ba1\u7b97\u76f8\u4f3c\u5ea6\nCHUNK = 1024*4\n\nimagefeat = cupy.array(imagefeat)\n\nprint('Finding similar images...')\nCTS = len(imagefeat)\/\/CHUNK\nif len(imagefeat)%CHUNK!=0: CTS += 1\nfor j in range( CTS ):\n    \n    a = j*CHUNK\n    b = (j+1)*CHUNK\n    b = min(b, len(imagefeat))\n    print('chunk',a,'to',b)\n    \n    distances = cupy.matmul(imagefeat, imagefeat[a:b].T).T\n    # distances = np.dot(imagefeat[a:b,], imagefeat.T)\n    \n    for k in range(b-a):\n        # \u5982\u679c\u76f8\u4f3c\u5ea6\u5927\u4e8e0.95\u5c31\u7b97\n        IDX = cupy.where(distances[k,]>0.95)[0]\n        # IDX = np.where(distances[k,]>0.95)[0][:]\n        o = train.iloc[cupy.asnumpy(IDX)].posting_id.values\n        preds.append(o)\n        \n# del imagefeat, imgmodel","13304287":"train['oof_cnn'] = preds\n\nif COMPUTE_CV:\n    train['f1'] = train.apply(getMetric('oof_cnn'),axis=1)\n    print('CV score for baseline =',train.f1.mean())","cfe47d59":"# from sklearn.feature_extraction.text import TfidfVectorizer\nmodel = TfidfVectorizer(stop_words=None, binary=True, max_features=25000)\ntext_embeddings = model.fit_transform(train_gf.title).toarray()\nprint('text embeddings shape',text_embeddings.shape)","831d73c4":"preds = []\nCHUNK = 1024*4\n\nprint('Finding similar titles...')\nCTS = len(train)\/\/CHUNK\nif len(train)%CHUNK!=0: CTS += 1\nfor j in range( CTS ):\n    \n    a = j*CHUNK\n    b = (j+1)*CHUNK\n    b = min(b,len(train))\n    print('chunk',a,'to',b)\n    \n    # COSINE SIMILARITY DISTANCE\n    # cts = np.dot( text_embeddings, text_embeddings[a:b].T).T\n    cts = cupy.matmul(text_embeddings, text_embeddings[a:b].T).T\n    \n    for k in range(b-a):\n        # IDX = np.where(cts[k,]>0.7)[0]\n        IDX = cupy.where(cts[k,]>0.7)[0]\n        o = train.iloc[cupy.asnumpy(IDX)].posting_id.values\n        preds.append(o)\n        \ndel model, text_embeddings","23bbdfbd":"train['oof_text'] = preds\n\nif COMPUTE_CV:\n    train['f1'] = train.apply(getMetric('oof_text'),axis=1)\n    print('CV score for baseline =',train.f1.mean())","cf4ec018":"def combine_for_sub(row):\n    x = np.concatenate([row.oof_text,row.oof_cnn, row.oof_hash])\n    return ' '.join( np.unique(x) )\n\ndef combine_for_cv(row):\n    x = np.concatenate([row.oof_text,row.oof_cnn, row.oof_hash])\n    return np.unique(x)","f7927722":"if COMPUTE_CV:\n    tmp = train.groupby('label_group').posting_id.agg('unique').to_dict()\n    train['target'] = train.label_group.map(tmp)\n    train['oof'] = train.apply(combine_for_cv,axis=1)\n    train['f1'] = train.apply(getMetric('oof'),axis=1)\n    print('CV Score =', train.f1.mean() )\n\ntrain['matches'] = train.apply(combine_for_sub,axis=1)","c9f07bee":"train[['posting_id','matches']].to_csv('submission.csv',index=False)\nsub = pd.read_csv('submission.csv')\nsub.head()","625ed4b0":"# image CNN","7bd905fd":"# title TFIDF","786bc448":"# Train-Baseline","3de45343":"# image hash"}}