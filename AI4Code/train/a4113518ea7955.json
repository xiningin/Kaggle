{"cell_type":{"13558711":"code","2a8c3834":"code","4a72b178":"code","97522d73":"code","1f879d0c":"code","aa61962b":"code","5092ac5d":"code","c6686213":"code","5eeaca2f":"code","8e9e7d98":"code","5998163c":"code","3609e496":"code","69e6d38c":"code","73774ec9":"code","326e4df0":"code","d736e4d6":"code","46af4970":"code","f918fcfc":"code","14787fda":"code","de96f109":"markdown","c7fda1fe":"markdown","47fc00c3":"markdown","746f3729":"markdown","73c8249d":"markdown","e3a774fb":"markdown","dde8bf41":"markdown","05b8db06":"markdown","b328ac1a":"markdown","1fe4aff2":"markdown","670506a9":"markdown","318ac791":"markdown","d55b8ada":"markdown","200a8490":"markdown","00f443bb":"markdown","5877eea1":"markdown","1bfabb07":"markdown","5e6ad38d":"markdown","0100af35":"markdown"},"source":{"13558711":"from mpl_toolkits.mplot3d import Axes3D\nfrom sklearn.preprocessing import StandardScaler\nimport matplotlib.pyplot as plt # plotting\nimport numpy as np # linear algebra\nimport os # accessing directory structure\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n","2a8c3834":"# Distribution graphs (histogram\/bar graph) of column data\ndef plotPerColumnDistribution(df, nGraphShown, nGraphPerRow):\n    nunique = df.nunique()\n    df = df[[col for col in df if nunique[col] > 1 and nunique[col] < 50]] # For displaying purposes, pick columns that have between 1 and 50 unique values\n    nRow, nCol = df.shape\n    columnNames = list(df)\n    nGraphRow = (nCol + nGraphPerRow - 1) \/ nGraphPerRow\n    plt.figure(num = None, figsize = (6 * nGraphPerRow, 8 * nGraphRow), dpi = 80, facecolor = 'w', edgecolor = 'k')\n    for i in range(min(nCol, nGraphShown)):\n        plt.subplot(nGraphRow, nGraphPerRow, i + 1)\n        columnDf = df.iloc[:, i]\n        if (not np.issubdtype(type(columnDf.iloc[0]), np.number)):\n            valueCounts = columnDf.value_counts()\n            valueCounts.plot.bar()\n        else:\n            columnDf.hist()\n        plt.ylabel('counts')\n        plt.xticks(rotation = 90)\n        plt.title(f'{columnNames[i]} (column {i})')\n    plt.tight_layout(pad = 1.0, w_pad = 1.0, h_pad = 1.0)\n    plt.show()\n","4a72b178":"# Correlation matrix\ndef plotCorrelationMatrix(df, graphWidth):\n    filename = df.dataframeName\n    df = df.dropna('columns') # drop columns with NaN\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    if df.shape[1] < 2:\n        print(f'No correlation plots shown: The number of non-NaN or constant columns ({df.shape[1]}) is less than 2')\n        return\n    corr = df.corr()\n    plt.figure(num=None, figsize=(graphWidth, graphWidth), dpi=80, facecolor='w', edgecolor='k')\n    corrMat = plt.matshow(corr, fignum = 1)\n    plt.xticks(range(len(corr.columns)), corr.columns, rotation=90)\n    plt.yticks(range(len(corr.columns)), corr.columns)\n    plt.gca().xaxis.tick_bottom()\n    plt.colorbar(corrMat)\n    plt.title(f'Correlation Matrix for {filename}', fontsize=15)\n    plt.show()\n","97522d73":"# Scatter and density plots\ndef plotScatterMatrix(df, plotSize, textSize):\n    df = df.select_dtypes(include =[np.number]) # keep only numerical columns\n    # Remove rows and columns that would lead to df being singular\n    df = df.dropna('columns')\n    df = df[[col for col in df if df[col].nunique() > 1]] # keep columns where there are more than 1 unique values\n    columnNames = list(df)\n    if len(columnNames) > 10: # reduce the number of columns for matrix inversion of kernel density plots\n        columnNames = columnNames[:10]\n    df = df[columnNames]\n    ax = pd.plotting.scatter_matrix(df, alpha=0.75, figsize=[plotSize, plotSize], diagonal='kde')\n    corrs = df.corr().values\n    for i, j in zip(*plt.np.triu_indices_from(ax, k = 1)):\n        ax[i, j].annotate('Corr. coef = %.3f' % corrs[i, j], (0.8, 0.2), xycoords='axes fraction', ha='center', va='center', size=textSize)\n    plt.suptitle('Scatter and Density Plot')\n    plt.show()\n","1f879d0c":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# sample.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf1 = pd.read_csv('\/kaggle\/input\/sample.csv', delimiter=',', nrows = nRowsRead)\ndf1.dataframeName = 'sample.csv'\nnRow, nCol = df1.shape\nprint(f'There are {nRow} rows and {nCol} columns')","aa61962b":"df1.head(5)","5092ac5d":"plotPerColumnDistribution(df1, 10, 5)","c6686213":"plotCorrelationMatrix(df1, 8)","5eeaca2f":"plotScatterMatrix(df1, 20, 10)","8e9e7d98":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# ETHUSDT_01-01-2019_1m.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf2 = pd.read_csv('\/kaggle\/input\/eth_data\/ETHUSDT_01-01-2019_1m.csv', delimiter=',', nrows = nRowsRead)\ndf2.dataframeName = 'ETHUSDT_01-01-2019_1m.csv'\nnRow, nCol = df2.shape\nprint(f'There are {nRow} rows and {nCol} columns')","5998163c":"df2.head(5)","3609e496":"plotPerColumnDistribution(df2, 10, 5)","69e6d38c":"plotCorrelationMatrix(df2, 8)","73774ec9":"plotScatterMatrix(df2, 20, 10)","326e4df0":"nRowsRead = 1000 # specify 'None' if want to read whole file\n# ETHUSDT_01-04-2020_1m.csv may have more rows in reality, but we are only loading\/previewing the first 1000 rows\ndf3 = pd.read_csv('\/kaggle\/input\/eth_data\/ETHUSDT_01-04-2020_1m.csv', delimiter=',', nrows = nRowsRead)\ndf3.dataframeName = 'ETHUSDT_01-04-2020_1m.csv'\nnRow, nCol = df3.shape\nprint(f'There are {nRow} rows and {nCol} columns')","d736e4d6":"df3.head(5)","46af4970":"plotPerColumnDistribution(df3, 10, 5)","f918fcfc":"plotCorrelationMatrix(df3, 8)","14787fda":"plotScatterMatrix(df3, 20, 10)","de96f109":"Now you're ready to read in the data and use the plotting functions to visualize the data.","c7fda1fe":"Correlation matrix:","47fc00c3":"Let's take a quick look at what the data looks like:","746f3729":"Distribution graphs (histogram\/bar graph) of sampled columns:","73c8249d":"Scatter and density plots:","e3a774fb":"Correlation matrix:","dde8bf41":"## Exploratory Analysis\nTo begin this exploratory analysis, first import libraries and define functions for plotting the data using `matplotlib`. Depending on the data, not all plots will be made. (Hey, I'm just a simple kerneling bot, not a Kaggle Competitions Grandmaster!)","05b8db06":"There are 21 csv files in the current version of the dataset:\n","b328ac1a":"### Let's check 3rd file: \/kaggle\/input\/eth_data\/ETHUSDT_01-04-2020_1m.csv","1fe4aff2":"The next hidden code cells define functions for plotting data. Click on the \"Code\" button in the published kernel to reveal the hidden code.","670506a9":"Scatter and density plots:","318ac791":"### Let's check 2nd file: \/kaggle\/input\/eth_data\/ETHUSDT_01-01-2019_1m.csv","d55b8ada":"Correlation matrix:","200a8490":"Scatter and density plots:","00f443bb":"Let's take a quick look at what the data looks like:","5877eea1":"Let's take a quick look at what the data looks like:","1bfabb07":"### Let's check 1st file: \/kaggle\/input\/sample.csv","5e6ad38d":"Distribution graphs (histogram\/bar graph) of sampled columns:","0100af35":"Distribution graphs (histogram\/bar graph) of sampled columns:"}}