{"cell_type":{"49146c2d":"code","4cbe7023":"code","a9160481":"code","5afb7d86":"code","5b24aa5a":"code","5f8303b7":"code","5055a740":"code","b3c467a3":"code","ad7f04dc":"code","2b5db5a4":"code","bbfd0698":"code","ad72b3be":"markdown","a3b9aec8":"markdown","c65ca098":"markdown","ad960796":"markdown","e86d274f":"markdown","4ed16593":"markdown","e19f259a":"markdown","a2dc3023":"markdown","609cf52e":"markdown","c6e18de5":"markdown","a8113336":"markdown","33820542":"markdown","b48aee95":"markdown","1feb5845":"markdown","e0878203":"markdown","fd99a2b7":"markdown","25747951":"markdown","d04f8486":"markdown","5974b4c9":"markdown"},"source":{"49146c2d":"from bs4 import BeautifulSoup\nimport requests\nimport datetime\nimport pandas as pd \nimport numpy as np\nimport matplotlib.pyplot as plt\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.base import MIMEBase\nfrom email import encoders","4cbe7023":"URL = 'https:\/\/worldometers.info\/coronavirus\/'\n\nheaders = {\"User-Agent\": 'Mozilla\/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit\/537.36 (KHTML, like Gecko) Chrome\/77.0.3865.120 Safari\/537.36'}\npage=requests.get(URL, headers=headers)\nsoup=BeautifulSoup(page.content, 'html.parser')","a9160481":"covid19_data = []   #initiate empty list to store data\n\nweb_table = soup.find('table', {'id': 'main_table_countries_today'})  #look for the table in web page\n\ntable_rows = web_table.find_all('tr')   #find rows\n\n#iterate through rows and append contents of each row to the list\nfor tr in table_rows:\n    td = tr.find_all('td')\n    row = [i.text for i in td]\n    covid19_data.append(row)\n\ncovid19_data = covid19_data [1:] #remove blank\/duplicate first row","5afb7d86":"#convert data into a pandas data frame and insert headers\ndf = pd.DataFrame(covid19_data)\ndf = df.iloc[:, 1:13] #remove first column with index and get data from the rest 12 columns\ndf.columns = ['Country\/Other', 'Total_Cases', 'New_Cases', 'Total_Deaths', 'New_Deaths', \n              'Total_Recovered', 'Active_Cases', 'Serious\/Critical', 'Cases_per_1M', \n              'Deaths_per_1M', 'Total_Tests', 'Test_per_1M']\n\n\ndf.replace('', 0, inplace=True)  #replace all empty string with 0 \ndf.replace(' ', 0, inplace=True) #replace  strings with just space with 0 \ndf.replace(np.nan, 0, inplace=True) #replace  nan with 0\ndf.replace('N\/A', 0, inplace=True) #replace  'N\/A' with 0\n\n#drop data about continents\nvalues_to_drop = ['North America', 'South America', 'Asia', 'Africa', 'Oceania', 'Total', 'Europe', 'World', '\\n\\n']\n\nfor drop_value in range (len(values_to_drop)):\n    df = df[~df['Country\/Other'].str.contains(str(values_to_drop[drop_value]))]\n\ndf","5b24aa5a":"# Get data from totals row. #Not used in plotting\n\ntag = soup.find(class_=\"total_row_body\")\n\ntotal_rows = tag.find_all('td')\n\ntotal_row = [i.text for i in total_rows]\ntotal_row = total_row[1:13]\nprint(total_row)","5f8303b7":"df = df.drop(columns=['Total_Tests', 'Test_per_1M']) #dropping last two column as it is not used later\n\ndf.head()","5055a740":"columns_to_convert = list(df.columns)[1:] #list of columns whose datatype should be changed\n\nfor column in columns_to_convert:\n    df[column] = df[column].str.replace(',','').astype(np.float64)\n    \n#sort countries with most cases\ndf=df.sort_values(by=['Total_Cases'], ascending = False)\ndf.head()","b3c467a3":"df1 = df[0:9] #take top 9 countries for plotting\ndf2 = df[9:] #to make a new category called 'others' to be used in plotting\n\nothers = df2.sum(axis = 0, skipna = True)\n\nothers['Country\/Other']='Others'\n\nothers['Cases_per_1M']=others['Cases_per_1M']\/len(df2) #average the value\nothers['Deaths_per_1M']=others['Deaths_per_1M']\/len(df2) #average the value\n\n\ndf1 = df1.append(others, ignore_index=True) #append all other countries ('others') to df1\n\n\ndf3=df1[['Country\/Other','Total_Cases','Active_Cases','Total_Deaths']] #data in pie chart , used for inserting table in plot","ad7f04dc":"plt.figure(figsize=(20,25))\n\n#plot Total Cases and Total Recovered worldwide in bar plots\nax2 = plt.subplot(321)\ncountry = df1['Country\/Other']\ntot_cases = df1['Total_Cases']\ntot_deaths = df1['Total_Recovered']\nax2.bar(country, tot_cases, color='lightblue')\nax2.bar(country, tot_deaths, color='blue')\nax2.set_ylabel('Cases Count', fontsize=15)\nax2.set_title('Total Cases and Total Recovery worldwide',fontsize=20, color='Blue')\nax2.set_xticklabels(country, rotation=90, fontsize=12)\nax2.legend([\"Total Cases\", \"Total Recovery\"])\nax2.ticklabel_format(style='plain', axis='y')\n\n\n#plot Active Cases and Serious\/Critical worldwide in bar plots\nax3 = plt.subplot(322)\ncountry = df1['Country\/Other']\nact_cases = df1['Active_Cases']\ncritical = df1['Serious\/Critical']\nax3.bar(country, act_cases, color='gold')\nax3.bar(country, critical, color='red')\nax3.set_ylabel('Cases Count', fontsize=15)\nax3.set_title('Active Cases and Serious\/Critical worldwide',fontsize=20, color='red')\nax3.set_xticklabels(country, rotation=90, fontsize=12)\nax3.legend([\"Acive Cases\", \"Serious\/Critical\"])\nax3.ticklabel_format(style='plain', axis='y')\n\n\n#plot new cases worldwide in bar plots\nax5 = plt.subplot(323)\ncountry = df1['Country\/Other']\nnew_cases = df1['New_Cases']\nax5.bar(country, new_cases, color='brown')\nax5.set_ylabel('Cases Count', fontsize=15)\nax5.set_title('New Cases worldwide',fontsize=20, color='Brown')\nax5.set_xticklabels(country, rotation=90, fontsize=12)\nax5.legend([\"New Cases\"])\nax5.ticklabel_format(style='plain', axis='y')\n\n\n#plot Total recovered worldwide in bar plots\nax4 = plt.subplot(324)\ncountry = df1['Country\/Other']\nrec_cases = df1['Total_Recovered']\nax4.bar(country, rec_cases, color='green')\nax4.set_ylabel('Cases Count', fontsize=15)\nax4.set_title('Recovered Cases worldwide',fontsize=20, color='Green')\nax4.set_xticklabels(country, rotation=90, fontsize=12)\nax4.legend([\"Recovered Cases\"])\nax4.ticklabel_format(style='plain', axis='y')\n\n\n#Insert a table into the plot\ndf3_text = []\nfor df3_row in range(len(df3)):\n    df3_text.append(df3.iloc[df3_row])\nplt.subplot(325)\nplt.table(cellText=df3_text, colLabels=df3.columns, loc='center')\nplt.axis('off')\nplt.title('Current Status COVID19',fontsize=20, y=0.75)\n\n\n#Plot Total deaths world wide as a donut plot\nax1 = plt.subplot(326)\nvalues = df1['Total_Deaths']\nlabels = df1['Country\/Other'].unique()\ntotal = np.sum(values)\ncolors = ['#8BC34A','Pink','#FE7043','Turquoise','#D4E157','Grey','#EAB300','#AA7043','Violet','Orange']\nax1.pie (values , labels= labels , colors= colors , \n         startangle=60 , autopct='%1.1f%%', pctdistance=0.85, \n         explode=[0.03,0,0,0,0,0,0,0,0,0], textprops={'fontsize': 14} )\nmy_circle=plt.Circle( (0,0), 0.7, color='white') # Adding circle at the centre\np=plt.gcf()\np.gca().add_artist(my_circle)\nplt.title('Total deaths reported worldwide',fontsize=20, color='crimson')\n\nright_now = str(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\"))\n\n#adjust allignment of plots and save\nplt.subplots_adjust(top = 0.93, bottom=0.01, hspace=0.2, wspace=0.25)\nplt.suptitle('COVID19 report - '+right_now, fontsize=35) #main title of plot\n#plt.savefig('COVID19_update.png', dpi=500)\nplt.show()","2b5db5a4":"#plot pie charts\n\nplt.figure(figsize=(16,12))\n\nax1 = plt.subplot(221, aspect='equal')\ndf1.plot(kind='pie', y = 'Total_Cases', ax=ax1, autopct='%1.1f%%', \n startangle=0, shadow=False, labels=df1['Country\/Other'], legend = False, fontsize=14)\nplt.title('Total Cases Reported World Wide',fontsize=20)\n\nax2 = plt.subplot(222, aspect='equal')\ndf1.plot(kind='pie', y = 'Active_Cases', ax=ax2, autopct='%1.1f%%', \n startangle=130, shadow=False, labels=df1['Country\/Other'], legend = False, fontsize=14)\nplt.title('Active Cases World Wide',fontsize=20)\n\nax3 = plt.subplot(223, aspect='equal')\ndf1.plot(kind='pie', y = 'Total_Deaths', ax=ax3, autopct='%1.1f%%', \n startangle=90, shadow=False, labels=df1['Country\/Other'], legend = False, fontsize=14)\nplt.title('Total Deaths World Wide',fontsize=20)\n\n#insert table in the plot\ndf3_text = []\nfor df3_row in range(len(df3)):\n    df3_text.append(df3.iloc[df3_row])\nplt.subplot(224)\nplt.table(cellText=df3_text, colLabels=df3.columns, loc='center')\nplt.axis('off')\nplt.title('Current Status COVID19',fontsize=20, y=0.75)\n\n#adjust allignment of subplots\nplt.subplots_adjust(top = 0.99, bottom=0.01, hspace=0.1, wspace=0.4)\n#plt.savefig('COVID19_distribution.png', dpi=300)\nplt.show()","bbfd0698":"#get current time to indicate in email\n\nright_now = str(datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\"))\n\n# Open file with email details like user, password and recipient\nfile = open('email.txt',mode='r')\n \n# read lines\nall_lines = file.readlines()\n\n# close the file\nfile.close()\n\nemail_user = all_lines[0]       #user name\nemail_password = all_lines[1]   #password\nrecipients = all_lines[2].split(\",\") #recipients \nemail_send = \", \".join(recipients) \n\nsubject = 'COVID19 Current Status'\n\nmsg = MIMEMultipart()\nmsg['From'] = email_user\nmsg['To'] = email_send\nmsg['Subject'] = subject\n\nbody = 'Hi, \\n\\nSending the status of COVID19 on '+str(right_now)\nmsg.attach(MIMEText(body,'plain'))\n\nfilenames = ['COVID19_update.png', 'COVID19_distribution.png'] #files to be attached\n\n#attaching files\nfor file in filenames:\n    part = MIMEBase('application', 'octet-stream')\n    part.set_payload(open(file, 'rb').read())\n    encoders.encode_base64(part)\n    part.add_header('Content-Disposition', 'attachment; filename=\"%s\"' % file)\n    msg.attach(part)\n\n#send email\ntext = msg.as_string()\nserver = smtplib.SMTP('smtp.gmail.com')\nserver.starttls()\nserver.login(email_user,email_password)\n\nserver.sendmail(email_user,recipients,text)\nserver.quit()","ad72b3be":"### For gmail users, the process of sending the files via email can be simplified if you use the 'yagmail' package.<br>You can find more on it in the link below.<br>https:\/\/blog.mailtrap.io\/yagmail-tutorial\/","a3b9aec8":"### Thank you for going through this notebook. Your suggestions for improvement are highly welcome.","c65ca098":"### 3.a. Convert the data into a pandas dataframe","ad960796":"user.email@gmail.com<br>\nUserp@ssw0rd<br>\nreceiver1@yahoo.com, receiver2@aol.com<br>","e86d274f":"### Since the outbreak of the COVID-19 pandemic, people are relying on multiple websites to obtain information about the impact of the virus in different countries or regions. In this article, we explore the process of fetching data from a website and analyzing it to create visual plots to reveal information on the current status of COVID-19. Later, we look at how these plots can be sent as email attachments and how the entire process can be automated to send regular updates via email. The entire workflow is written in python programming language.","4ed16593":"## 1. Import libraries","e19f259a":"## 2. Webscraping","a2dc3023":"### The saved plots can be sent as attachments via email to multiple people by mentioning all the receiver email addresses in the 'email.txt' file. The 'email.txt' file should be stored in the same folder of the python script unless you mention the exact path in the code. The contents of the 'email.txt' file is as below. You could also hard code the email addresses and details in the code and not use the txt file.","609cf52e":"# Web scraping\n### Before we start writing the code, we need to identify the part of the website which we should target. For this, we should open the web browser and navigate to the web page mentioned above. You will be able to see a table containing country names and information on the number of cases. We can set this table as the target to perform web scraping. Press F12 on the keyboard and the new window that popped up on the browser is the HTML code for the web page. You can inspect the web page elements by using the keys Ctrl + Shift + C on Google chrome browser and hovering over the web page using the mouse. Our target is to identify the HTML code for the table. If you have troubles or need additional information on inspecting elements in the web page, follow this link (https:\/\/www.youtube.com\/watch?v=Bg9r_yLk7VY) to watch an interesting tutorial on web scraping.","c6e18de5":"## Website\n### The website that we will use to fetch the data is worldometer. This website provides frequent updates on the number of COVID-19 cases, recoveries, deaths etc. in every country.\nhttps:\/\/www.worldometers.info\/coronavirus\/","a8113336":"# Send Email","33820542":"## 5. Send the plots as email attachments","b48aee95":"### 3.b. Convert the datatypes of the columns from object to float","1feb5845":"### 2.a. Fetch data from the webpage","e0878203":"# Analyzing","fd99a2b7":"### 2.b. Arrange the data into a list","25747951":"## 4. Plot the data","d04f8486":"### 3.c. Extract part of the dataframe to make plots","5974b4c9":"## 3. Data wrangling"}}