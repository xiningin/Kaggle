{"cell_type":{"20100cf5":"code","c77235fb":"code","93c2517a":"code","d51ea46d":"code","e3bbed3f":"code","b84565b2":"code","54fcf6fb":"code","c166b961":"code","cdb164d5":"code","f51dc086":"code","956b7496":"code","2c0446fa":"code","95dd83af":"code","418764ff":"code","e457160d":"code","f975839a":"code","2405cfbb":"code","5a7f9a08":"code","44d5b767":"code","edcb1113":"code","7345cf85":"code","80526ded":"code","3fe46eeb":"code","7b67f894":"code","8a6c3c46":"code","f0ad00fd":"code","93cca301":"code","73485778":"code","46c8ffec":"code","9836111e":"code","06b752c9":"code","2a237d86":"code","2d80d80f":"code","20a9d5f1":"code","948f2862":"code","870e0c12":"code","39fa7139":"code","95e58505":"code","6afa2432":"code","4d9ead56":"code","6b104d1f":"code","286dad19":"code","a7f6b8f1":"code","5b2f3d3e":"code","c4d84471":"code","f5774e88":"code","6502300c":"code","e917fdd3":"code","14c4788f":"code","f40599f1":"code","091a59ac":"code","e1bda1bf":"code","c9586465":"code","6df51256":"code","ca95ef46":"code","8a025129":"code","84c54f62":"code","f0a029ae":"code","6823fb64":"code","1bacdddf":"code","933d3f65":"code","831d9a4c":"code","a017a9ad":"code","7ccc045c":"code","b7546476":"code","3025bbdd":"code","31fef294":"code","dd93de15":"code","7c4d6d22":"code","99d4095d":"code","9ae44f2a":"code","ee7979aa":"code","bc4f24ab":"markdown","8470a603":"markdown","ccd45600":"markdown","ad262864":"markdown","a57acf2b":"markdown","e706ea2f":"markdown","1cb96d54":"markdown","4a0aa0ec":"markdown","0e7675be":"markdown","fe3270d1":"markdown","4f97b4ab":"markdown","6f4049e4":"markdown","38f5e6cb":"markdown","d2f3c4f3":"markdown","4dc7bcec":"markdown","4928b904":"markdown","c9fd5761":"markdown","10f951da":"markdown"},"source":{"20100cf5":"# \u0418\u043c\u043f\u043e\u0440\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a.\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns \n%matplotlib inline\n\n# \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u0443\u0434\u043e\u0431\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.\n\nimport re\n\nfrom itertools import combinations\nfrom scipy.stats import ttest_ind\n\nimport warnings\nimport random\n\nwarnings.simplefilter('ignore')\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.preprocessing import PolynomialFeatures\n\nfrom scipy.stats import rankdata\n\npd.set_option('display.max_rows', 50)  # \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u0442\u0440\u043e\u043a\npd.set_option('display.max_columns', 50)  # \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u043a\u043e\u043b\u043e\u043d\u043e\u043a\n\n# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043c\u0435\u0442\u043e\u0434 \u0447\u0442\u043e\u0431\u044b \u043a\u0440\u0430\u0441\u0438\u0432\u043e \u043e\u0442\u043e\u0431\u0440\u0436\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442\nfrom IPython.display import Markdown, display\n\ndef printmd(string):\n    display(Markdown(string))","c77235fb":"DATA_DIR = '\/kaggle\/input\/sf-dst-restaurant-rating\/'\ndf_train = pd.read_csv(DATA_DIR+'\/main_task.csv')\ndf_test = pd.read_csv(DATA_DIR+'kaggle_task.csv')\nsample_submission = pd.read_csv(DATA_DIR+'\/sample_submission.csv')","93c2517a":"# \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u0443\u0435\u043c \u0432\u0435\u0440\u0441\u0438\u044e \u043f\u0430\u043a\u0435\u0442\u043e\u0432, \u0447\u0442\u043e\u0431\u044b \u044d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u044b:\n!pip freeze > requirements.txt\n\n# \u0414\u043b\u044f \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0437\u0430\u0434\u0430\u0434\u0438\u043c:\n# \u043e\u0431\u0449\u0438\u0439 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0434\u043b\u044f \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\nRANDOM_SEED = 20726\n# \u0430\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u0430\u0442\u0443\nACTUAL_DATE = pd.to_datetime('31\/08\/2021')","d51ea46d":"# \u0412\u0410\u0416\u041d\u041e! \u0434\u0440\u044f \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e\u0439 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0442\u0440\u0435\u0439\u043d \u0438 \u0442\u0435\u0441\u0442 \u0432 \u043e\u0434\u0438\u043d \u0434\u0430\u0442\u0430\u0441\u0435\u0442\n\ndf_train['sample'] = 1 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0440\u0435\u0439\u043d (\u0434\u043b\u044f \u043a\u0430\u0433\u043b\u0430)\ndf_test['sample'] = 0 # \u043f\u043e\u043c\u0435\u0447\u0430\u0435\u043c \u0433\u0434\u0435 \u0443 \u043d\u0430\u0441 \u0442\u0435\u0441\u0442 \ndf_test['Rating'] = 0 # \u0432 \u0442\u0435\u0441\u0442\u0435 \u0443 \u043d\u0430\u0441 \u043d\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f Rating, \u043c\u044b \u0435\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u0442\u044c, \u043f\u043e \u044d\u0442\u043e\u043c\u0443 \u043f\u043e\u043a\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043d\u0443\u043b\u044f\u043c\u0438\n\ndata = df_test.append(df_train, sort=False).reset_index(drop=True) # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c\nfood = data.copy()\ndata.info()","e3bbed3f":"# \u0420\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0438\u043c \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0445 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432.\n\nfood[['Ranking', 'Rating', 'Number of Reviews']].hist(figsize=(20, 10), bins=100);\nplt.tight_layout()","b84565b2":"food","54fcf6fb":"#food['Restaurant_id'].apply(lambda x: x.split('_')[1]).astype(int).hist(figsize=(10,5), bins=100); \n#plt.tight_layout() #\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u043e\u043c\u0435\u0440 id \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u043c \u043a int.\n\n#Restaurant_id \u043f\u043e\u0445\u043e\u0436 \u043d\u0430 Ranking.","c166b961":"food['Restaurant_id'].value_counts()\n\n# \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043c\u0435\u0442\u0438\u0442\u044c, \u0447\u0442\u043e \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0435\u0442\u0435\u0432\u044b\u043c\u0438.","cdb164d5":"# \u0421\u0435\u0442\u0435\u0432\u043e\u0439 ID \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 (\u043f\u043e\u0445\u043e\u0436\u0435, \u0447\u0442\u043e \u044d\u0442\u043e ID \u0444\u0440\u0430\u043d\u0448\u0438\u0437\u044b, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u0435\u0441\u043b\u0438 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 1-\u0433\u043e \u0440\u0430\u0437\u0430 - isNetworkRestorant)\n\nimport warnings; warnings.simplefilter('ignore')\nfood['Restaurant_id'] = food['Restaurant_id'].apply(lambda x: x.split('_')[1])\nNetworkRestorants = food[food['Restaurant_id'].isin(food['Restaurant_id'].value_counts()[food['Restaurant_id'].value_counts()>2].index)]\nNetworkRestorants['isNetworkRestorant'] = 1\nfood['isNetworkRestorant'] = NetworkRestorants['isNetworkRestorant']\nfood['isNetworkRestorant'] = food['isNetworkRestorant'].fillna(0)","f51dc086":"# \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043d\u043e\u0441\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0438 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u0433\u043e\u0440\u043e\u0434\u043e\u0432.\n\npopulation = {\n    'London' : 8909081,\n    'Paris' : 2148271,\n    'Madrid' : 3223334,\n    'Barcelona' : 1620343,\n    'Berlin' : 3769495,\n    'Milan' : 1399860,\n    'Rome' : 2860009,\n    'Prague' : 1324277,\n    'Lisbon' : 505526,\n    'Vienna' : 2600000,\n    'Amsterdam' : 872680,\n    'Brussels' : 1208542,\n    'Hamburg' : 1845229,\n    'Munich' : 1484226,\n    'Lyon' : 516092,\n    'Stockholm' : 975904,\n    'Budapest' : 1752286,\n    'Warsaw' : 1793579,\n    'Dublin' : 554554,\n    'Copenhagen' : 794128,\n    'Athens' : 664046,\n    'Edinburgh' : 488050, \n    'Zurich' : 415215,\n    'Oporto' : 287591,\n    'Geneva' : 201818, \n    'Krakow' : 779115, \n    'Oslo' : 697549, \n    'Helsinki' : 656229,\n    'Bratislava' : 437726,\n    'Luxembourg' : 626108,\n    'Ljubljana' : 295504\n}\n\nfood['Population'] = food['City'].map(population)","956b7496":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0444\u0438\u043b\u044c\u0442\u0440 \u043f\u043e \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c. \n\ncapital = ['London', 'Paris', 'Madrid', 'Berlin', 'Rome', 'Prague',\n          'Lisbon', 'Vienna', 'Amsterdam', 'Brussels', 'Stockholm',\n          'Budapest', 'Warsaw', 'Dublin', 'Copenhagen', 'Athens',\n          'Edinburgh', 'Oslo', 'Helsinki', 'Bratislava',\n          'Luxembourg', 'Ljubljana']\n\nfood['is_it_capital'] = food['City'].apply(lambda x: 1 if x in capital else 0)","2c0446fa":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f.\n\npurchasing_power_index = {\n    'London' : 24,\n    'Paris' : 22,\n    'Madrid' : 23,\n    'Barcelona' : 30,\n    'Berlin' : 8,\n    'Milan' : 40,\n    'Rome' : 37,\n    'Prague' : 31,\n    'Lisbon' : 48,\n    'Vienna' : 21,\n    'Amsterdam' : 19,\n    'Brussels' : 15,\n    'Hamburg' : 7,\n    'Munich' : 6,\n    'Lyon' : 70,\n    'Stockholm' : 13,\n    'Budapest' : 51,\n    'Warsaw' : 29,\n    'Dublin' : 27,\n    'Copenhagen' : 10,\n    'Athens' : 53,\n    'Edinburgh' : 16, \n    'Zurich' : 2,\n    'Oporto' : 42,\n    'Geneva' : 3, \n    'Krakow' : 36, \n    'Oslo' : 17, \n    'Helsinki' : 9,\n    'Bratislava' : 39,\n    'Luxembourg' : 4,\n    'Ljubljana' : 32\n}\n\nfood['purchasing_power'] = food['City'].map(purchasing_power_index)","95dd83af":"# \u041f\u043e\u043c\u0435\u0447\u0430\u0435\u043c, \u0432\u0445\u043e\u0434\u0438\u0442 \u043b\u0438 \u0433\u043e\u0440\u043e\u0434 \u0432 \u0442\u043e\u043f \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432.\n\ntop_Cityes = food['City'].value_counts()[0:10].index.to_list()\nfood['TopCityes'] = food['City'].apply(lambda x: 1 if x in top_Cityes else 0)","418764ff":"# \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a-\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0434\u043b\u044f \u0433\u043e\u0440\u043e\u0434\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\nrestorants_in_city = food.groupby('City')['Ranking'].count().to_dict()\nfood['Restaurants Count'] = food['City'].map(restorants_in_city)","e457160d":"# \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u0434\u043b\u044f \u0433\u043e\u0440\u043e\u0434\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\nfood['Restaurants for Population'] = food['Restaurants Count'] \/ (food['Population'])","f975839a":"# \u0415\u0441\u043b\u0438 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u043d\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u0442\u0438\u043f\u0430\u0445 \u043a\u0443\u0445\u043d\u0438, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0433\u043e\u0442\u043e\u0432\u044f\u0442, \n# \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c, \u0447\u0442\u043e \u0432 \u044d\u0442\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u0435\u0441\u0442\u043d\u0430\u044f \u043a\u0443\u0445\u043d\u044f. \n# \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0437\u0430\u043c\u0435\u043d\u0438\u043b\u0438 \u0435\u0435 \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043e\u0439 Local.\n\nfood['Cuisine Style'] = food['Cuisine Style'].fillna(\"['local']\")","2405cfbb":"# \u041f\u0440\u0438\u0432\u0438\u0434\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 Cuisine Style \u043a \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0432\u0438\u0434\u0443\n\nfood['Cuisine Style'] = food['Cuisine Style'].apply(lambda x: eval(x))","5a7f9a08":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0442\u0438\u043f\u043e\u0432 \u043a\u0443\u0445\u043e\u043d\u044c.\n\nfood['len_cuisines'] = food['Cuisine Style'].apply(lambda x: len(x))","44d5b767":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u0434\u0430\u043c\u043c\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u0442\u0438\u043f\u0430\u043c \u043a\u0443\u0445\u043e\u043d\u044c.\n\nstyle = food['Cuisine Style'].explode()\nX = pd.get_dummies(style)\nindex_list = pd.Index.tolist(X.index)\nY = X.groupby(index_list).sum()\nfood = food.join(Y)","edcb1113":"\nlist_style = food[['Afghani',\n 'African',\n 'Albanian',\n 'American',\n 'Arabic',\n 'Argentinean',\n 'Armenian',\n 'Asian',\n 'Australian',\n 'Austrian',\n 'Azerbaijani',\n 'Balti',\n 'Bangladeshi',\n 'Bar',\n 'Barbecue',\n 'Belgian',\n 'Brazilian',\n 'Brew Pub',\n 'British',\n 'Burmese',\n 'Cafe',\n 'Cajun & Creole',\n 'Cambodian',\n 'Canadian',\n 'Caribbean',\n 'Caucasian',\n 'Central American',\n 'Central Asian',\n 'Central European',\n 'Chilean',\n 'Chinese',\n 'Colombian',\n 'Contemporary',\n 'Croatian',\n 'Cuban',\n 'Czech',\n 'Danish',\n 'Delicatessen',\n 'Diner',\n 'Dutch',\n 'Eastern European',\n 'Ecuadorean',\n 'Egyptian',\n 'Ethiopian',\n 'European',\n 'Fast Food',\n 'Filipino',\n 'French',\n 'Fujian',\n 'Fusion',\n 'Gastropub',\n 'Georgian',\n 'German',\n 'Gluten Free Options',\n 'Greek',\n 'Grill',\n 'Halal',\n 'Hawaiian',\n 'Healthy',\n 'Hungarian',\n 'Indian',\n 'Indonesian',\n 'International',\n 'Irish',\n 'Israeli',\n 'Italian',\n 'Jamaican',\n 'Japanese',\n 'Korean',\n 'Kosher',\n 'Latin',\n 'Latvian',\n 'Lebanese',\n 'Malaysian',\n 'Mediterranean',\n 'Mexican',\n 'Middle Eastern',\n 'Minority Chinese',\n 'Mongolian',\n 'Moroccan',\n 'Native American',\n 'Nepali',\n 'New Zealand',\n 'Norwegian',\n 'Pakistani',\n 'Persian',\n 'Peruvian',\n 'Pizza',\n 'Polish',\n 'Polynesian',\n 'Portuguese',\n 'Pub',\n 'Romanian',\n 'Russian',\n 'Salvadoran',\n 'Scandinavian',\n 'Scottish',\n 'Seafood',\n 'Singaporean',\n 'Slovenian',\n 'Soups',\n 'South American',\n 'Southwestern',\n 'Spanish',\n 'Sri Lankan',\n 'Steakhouse',\n 'Street Food',\n 'Sushi',\n 'Swedish',\n 'Swiss',\n 'Taiwanese',\n 'Thai',\n 'Tibetan',\n 'Tunisian',\n 'Turkish',\n 'Ukrainian',\n 'Uzbek',\n 'Vegan Options',\n 'Vegetarian Friendly',\n 'Venezuelan',\n 'Vietnamese',\n 'Welsh',\n 'Wine Bar',\n 'Xinjiang',\n 'Yunnan',\n 'local']].sum()\n\n# \u0423\u0437\u043d\u0430\u0435\u043c \u043a\u0430\u043a\u0438\u0435 \u0438\u0437 \u043a\u0443\u0445\u043e\u043d\u044c \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u0435\u0435 \u0432\u0441\u0435\u0433\u043e.\n\nlist_style[list_style.between(4000,15000)]","7345cf85":"# \u0412 top_style \u0441\u043e\u0431\u0435\u0440\u0435\u043c \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u0431\u0435\u0437 Vegetarian Friendly, \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u043b\u044e\u0431\u043e\u0439 \u043a\u0443\u0445\u043d\u0435 \u0435\u0441\u0442\u044c \u0431\u043b\u044e\u0434\u0430 \u0431\u0435\u0437 \u043c\u044f\u0441\u0430.\n\nfood['top_style'] = food['European'] + food['local'] + food['Italian'] + food['Mediterranean'] + food['Mediterranean']","80526ded":"# \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043a\u0443\u0445\u043e\u043d\u044c.\n\nmean_cuisines = round(food['len_cuisines'].mean())\nfood['big_choice'] = food['len_cuisines'].apply(lambda x: 1 if x>=mean_cuisines else 0)","3fe46eeb":"# \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0433\u043e\u0440\u043e\u0434\u0430.\nranking_mean_per_city = food.groupby('City')['Ranking'].mean()\nfood['rating_mean_per_city'] = food['City'].map(ranking_mean_per_city)","7b67f894":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u043c, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u043d\u0433\u0430\u043c\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443.\n\nrank_city_min = food.groupby(['City'])['Ranking'].min().to_dict()\n\nrank_city_max = food.groupby(['City'])['Ranking'].max().to_dict()\n\nfood['rank_city_min'] = food['City'].map(rank_city_min)\nfood['rank_city_max'] = food['City'].map(rank_city_max)\n\nfood['rank_norm'] = food.apply(lambda x: (\n    x['Ranking'] - x['rank_city_min'])\/(x['rank_city_max'] - x['rank_city_min']), axis=1)","8a6c3c46":"# \u041f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c Price Range \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u043c NaN\n\ncleanup_nums = {'Price Range':     {\"$\": 1, \"$$ - $$$\": 2, \"$$$$\": 3, np.NaN: 2}} # \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \"$$ - $$$\" == 2\nfood['Price Range NAN'] = food['Price Range'].isna()\nfood.replace(cleanup_nums, inplace=True)","f0ad00fd":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0446\u0435\u043d \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0438 \u043c\u043e\u0434\u0430\u043b\u044c\u043d\u043e\u0439 \u0446\u0435\u043d\u044b:\n\nfood['price_top'] = food['Price Range']\/food['Price Range'].mode()[0]","93cca301":"# \u041d\u0430\u0439\u0434\u0435\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d.\n\nfood['Relative Price Range'] = food['Price Range'] \/ food['rating_mean_per_city']","73485778":"#\u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0437\u0430\u0446\u0438. \n\nfood['number_of_reviews_log'] = np.log(food['Number of Reviews'] + 1)\n\nmedian = food['number_of_reviews_log'].median()\nIQR = food['number_of_reviews_log'].quantile(0.75) - food['number_of_reviews_log'].quantile(0.25)\nperc25 = food['number_of_reviews_log'].quantile(0.25)\nperc75 = food['number_of_reviews_log'].quantile(0.75)\nl_side = perc25 - 1.5*IQR\nr_side = perc75 + 1.5*IQR\nprint('25 percentile: {}'.format(perc25),\n          '\\n75 percentile: {}'.format(perc75),\n          '\\nData Outlier Boundaries:',\n          '\\nleft: {}'.format(l_side),\n          '\\nright: {}'.format(r_side))","46c8ffec":"#\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0438 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u043f\u043e\u0441\u043b\u0435\u0434\u0441\u0442\u0432\u0438\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432!\n\na =  food[food['number_of_reviews_log'] > 8.430097838274843].number_of_reviews_log.value_counts().sum()\nprint(f' \u041f\u043e\u0441\u043b\u0435 \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043e\u0441\u0442\u0430\u043b\u043e\u0441\u044c {a} \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u0432')  \n\n#\u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043c\u043e\u0434\u0443 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043e\u043d\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f\n\nfood['number_of_reviews_log'].mode().value_counts()","9836111e":"# \u0423\u0437\u043d\u0430\u0435\u043c \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0431\u0440\u043e\u0441\u043e\u043c.\n\nfood['number_of_reviews_was_outliers'] = food['number_of_reviews_log'] >= 8.430097838274843 ","06b752c9":"def Number_of_reviews_log (x):\n    if x > 8.430097838274843:\n        return 1.098612\n    elif x != x:\n        return 1.098612\n    else:\n        return x\n    \nfood['number_of_reviews_log'] = food['number_of_reviews_log'].apply(Number_of_reviews_log)","2a237d86":"food['Number of Reviews NAN'] = food['Number of Reviews'].isna()\nreplace_val = food['Number of Reviews'].mean()\nreplace_val = np.round(replace_val)\nfood['Number of Reviews'] = food['Number of Reviews'].fillna(replace_val)","2d80d80f":"# \u0423\u0437\u043d\u0430\u0435\u043c \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u043e \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0442\u0437\u044b\u0432\u044b.\n\nfood['NRP'] = food['Number of Reviews'] \/ food['Population']","20a9d5f1":"# \u0420\u0430\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435.\n\nfood['WRR'] =  food['rating_mean_per_city']  *  food['NRP'] ","948f2862":"# \u0412\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0434\u0430\u0442\u044b \u0438\u0437 \u043e\u0442\u0437\u044b\u0432\u043e\u0432:\n\npattern = re.compile('\\'\\d+\\\/\\d+\\\/\\d+\\'?')\n\nfood['reviews_date'] = food['Reviews'].apply(lambda x: pattern.findall(str(x)))","870e0c12":"# \u041e\u0447\u0438\u0441\u0442\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430:\n\nfood['reviews_date'] = food['reviews_date'].apply(\n    lambda x: str(x).replace('[', '').replace(\"'\", '').replace(']', '').replace(' ', '').replace('\"', '').split(','))\n\nfood['fist_reviews'] = food['reviews_date'].apply(lambda x: x[0])\nfood['last_reviews'] = food['reviews_date'].apply(lambda x: x[-1])\n\nfood['fist_reviews'] = food['fist_reviews'].apply(\n    lambda x: x.replace('[', '').replace(\"'\", '').replace(']', '').replace(' ', '').replace('\"', ''))\nfood['last_reviews'] = food['last_reviews'].apply(\n    lambda x: x.replace('[', '').replace(\"'\", '').replace(']', '').replace(' ', '').replace('\"', ''))\n","39fa7139":"# \u0423\u0434\u0430\u043b\u0438\u043c \u0432\u0442\u043e\u0440\u0443\u044e \u0434\u0430\u0442\u0443 (\u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442 \u043f\u0435\u0440\u0432\u043e\u0439), \u0435\u0441\u043b\u0438 \u043e\u0442\u0437\u044b\u0432 \u0431\u044b\u043b \u0432\u0441\u0435\u0433\u043e \u043e\u0434\u0438\u043d\n\nfood['last_reviews'] = food['last_reviews'].apply(\n    lambda x: '' if len(x) == 1 else x)\n\nfood.drop('reviews_date', axis=1, inplace=True)","95e58505":"# \u041e\u0441\u0442\u0430\u043b\u0430\u0441\u044c \u043b\u0438\u0448\u044c \u0434\u0430\u0442\u0430.\n\n# \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 datetime.strptime \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.\n\nfood['fist_reviews'] = food['fist_reviews'].apply(lambda x: x if len(\n    x) == 0 else pd.to_datetime(x))\nfood['last_reviews'] = food['last_reviews'].apply(lambda x: x if len(\n    x) == 0 else pd.to_datetime(x))","6afa2432":"# C\u043e\u0437\u0434\u0430\u0451\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043d\u0435\u0439 \u043d\u0430\u0437\u0430\u0434 \u0431\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043e\u0442\u0437\u044b\u0432\u044b. \u0422\u043e\u0447\u043a\u043e\u0439 \u043e\u0442\u0441\u0447\u0435\u0442\u0430 \u0432\u043e\u0437\u044c\u043c\u0435\u043c 01.01.2021 \u0433\u043e\u0434\u0430.\n# \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0442\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435\n\nfood['How_long_ago_1'] = pd.to_datetime('01\/01\/2021') - food['fist_reviews']\nfood['How_long_ago_2'] = pd.to_datetime('01\/01\/2021') - food['last_reviews']\n\nfood['How_long_ago_1'] = food['How_long_ago_1'].apply(lambda x: x.days)\nfood['How_long_ago_2'] = food['How_long_ago_2'].apply(lambda x: x.days)\n\nfood['How_long_ago_1'].fillna(\n    round(food['How_long_ago_1'].mean()), inplace=True)\nfood['How_long_ago_2'].fillna(\n    round(food['How_long_ago_2'].mean()), inplace=True)","4d9ead56":"food['difference'] = abs(food['fist_reviews'] - food['last_reviews'])\n\nfood['fist_reviews'] = food['fist_reviews'].fillna(0)\nfood['last_reviews'] = food['last_reviews'].fillna(0)\n\nfood['difference'] = food['difference'].apply(lambda x: x.days)\nfood['difference'] = food['difference'].fillna(0)","6b104d1f":"# \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043c\u043e\u0434\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u0442\u044b\n\nfood[\"fist_reviews\"] = food[\"fist_reviews\"].apply(\n    lambda y: '2018-01-03' if y == 0 else y)\n\nfood[\"last_reviews\"] = food[\"last_reviews\"].apply(\n    lambda y: '2018-01-07' if y == 0 else y)","286dad19":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u0434\u043d\u044f\u043c\u0438 \u043d\u0435\u0434\u0435\u043b\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043c\u0435\u0441\u044f\u0446\u044b\n\nfood['Day_of_week_1'] = food['fist_reviews'].apply(\n    lambda x: 0 if x == 0 else x.strftime('%w'))\nfood['Day_of_week_2'] = food['last_reviews'].apply(\n    lambda x: 0 if x == 0 else x.strftime('%w'))\nfood['Month_1'] = food['fist_reviews'].apply(\n    lambda x: 0 if x == 0 else x.strftime('%m'))\nfood['Month_2'] = food['last_reviews'].apply(\n    lambda x: 0 if x == 0 else x.strftime('%m'))","a7f6b8f1":"# \u0420\u0430\u043d\u0436\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u0434\u043d\u044f\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438.\n\nfood['rang_last_reviews'] = rankdata(food.last_reviews, method='min')\nfood['rang_fist_reviews'] = rankdata(food.fist_reviews, method='min')","5b2f3d3e":"rangs = food['rang_last_reviews'].values\nrang_matrix = np.reshape(rangs, (-1, 1))\nscaler = MinMaxScaler()\nfood['rang_last_reviews'] = scaler.fit_transform(rang_matrix)","c4d84471":"rangs_f = food['rang_fist_reviews'].values\nrang_matrix_f = np.reshape(rangs_f, (-1, 1))\nscaler = MinMaxScaler()\nfood['rang_fist_reviews'] = scaler.fit_transform(rang_matrix_f)","f5774e88":"food['difference'] = rankdata(food.difference, method='min')\n\nrangs_day = food['difference'].values\nrang_matrix_day = np.reshape(rangs_day, (-1, 1))\nscaler = MinMaxScaler()\nfood['difference'] = scaler.fit_transform(rang_matrix_day)\nfood.sample(3)","6502300c":"# \u0423\u0434\u0430\u043b\u044f\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435\u043d\u0443\u0436\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438\n\nfood.drop('fist_reviews', axis=1, inplace=True)\nfood.drop('last_reviews', axis=1, inplace=True)","e917fdd3":"# \u0422\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0437\u044b\u0432\u043e\u0432:\n\n# \u0412\u044b\u0434\u0435\u043b\u0438\u043c \u0441\u043b\u043e\u0432\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0438\u0435 \u0437\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u0443\u044e \u0442\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c.\n\ndef good_words(scroll):\n    \n    i = 0\n    for word in scroll:\n        for mood in key_words:\n            if mood == word.lower():\n                i += 1\n    return i\n\nkey_words = ['good','great','nice','best','excellent','but','delicious', 'friendly', 'lovely', 'amazing', 'tasty', 'little']\nfood['words'] = food.Reviews.str.findall(r\"(\\w+)\")\nfood['review_mood'] = food.words.dropna().apply(good_words)\nfood.review_mood.fillna(0, inplace=True)\n","14c4788f":"# \u041e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u044b\u0445 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043e\u0431\u0449\u0435\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 \u043e\u0442\u0437\u044b\u0432\u043e\u0432. \n\nfood['PositiveWords in Reviews'] = food['review_mood'] \/ food['Number of Reviews']","f40599f1":"#\u0414\u0430\u043d\u043d\u043e\u0435 \u0440\u0430\u0441\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0438 \u043d\u0430 \u0447\u0442\u043e \u043d\u0435 \u043f\u043e\u0445\u043e\u0436\u0435.\n\nfood['ID_TA'] = food['ID_TA'].apply(lambda x: x[1:]) #\u0423\u0431\u0435\u0440\u0435\u043c \u043b\u0438\u0448\u043d\u0438\u0435 \u0437\u043d\u0430\u043a\u0438 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0435.","091a59ac":"# \u0414\u043e\u0431\u0430\u0432\u0438\u043c dummy \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0430\u043c.\n\nfood = pd.get_dummies(food, columns=['City', ], dummy_na=True)\nfood","e1bda1bf":"style_for_drop = [\n'Afghani',\n 'African',\n 'Albanian',\n 'American',\n 'Arabic',\n 'Argentinean',\n 'Armenian',\n 'Asian',\n 'Australian',\n 'Austrian',\n 'Azerbaijani',\n 'Balti',\n 'Bangladeshi',\n 'Bar',\n 'Barbecue',\n 'Belgian',\n 'Brazilian',\n 'Brew Pub',\n 'British',\n 'Burmese',\n 'Cafe',\n 'Cajun & Creole',\n 'Cambodian',\n 'Canadian',\n 'Caribbean',\n 'Caucasian',\n 'Central American',\n 'Central Asian',\n 'Chilean',\n 'Chinese',\n 'Colombian',\n 'Contemporary',\n 'Croatian',\n 'Cuban',\n 'Czech',\n 'Danish',\n 'Delicatessen',\n 'Diner',\n 'Dutch',\n 'Eastern European',\n 'Ecuadorean',\n 'Egyptian',\n 'Ethiopian',\n 'Fast Food',\n 'Filipino',\n 'French',\n 'Fujian',\n 'Fusion',\n 'Gastropub',\n 'Georgian',\n 'German',\n 'Greek',\n 'Grill',\n 'Halal',\n 'Hawaiian',\n 'Healthy',\n 'Hungarian',\n 'Indian',\n 'Indonesian',\n 'International',\n 'Irish',\n 'Israeli',\n 'Italian',\n 'Jamaican',\n 'Japanese',\n 'Korean',\n 'Kosher',\n 'Latin',\n 'Latvian',\n 'Lebanese',\n 'Malaysian',\n 'Mexican',\n 'Middle Eastern',\n 'Minority Chinese',\n 'Mongolian',\n 'Moroccan',\n 'Native American',\n 'Nepali',\n 'New Zealand',\n 'Norwegian',\n 'Pakistani',\n 'Persian',\n 'Peruvian',\n 'Pizza',\n 'Polish',\n 'Polynesian',\n 'Portuguese',\n 'Pub',\n 'Romanian',\n 'Russian',\n 'Salvadoran',\n 'Scandinavian',\n 'Scottish',\n 'Singaporean',\n 'Slovenian',\n 'Soups',\n 'South American',\n 'Southwestern',\n 'Spanish',\n 'Sri Lankan',\n 'Steakhouse',\n 'Street Food',\n 'Sushi',\n 'Swedish',\n 'Swiss',\n 'Taiwanese',\n 'Thai',\n 'Tibetan',\n 'Tunisian',\n 'Turkish',\n 'Ukrainian',\n 'Uzbek',\n 'Venezuelan',\n 'Vietnamese',\n 'Welsh',\n 'Wine Bar',\n 'Xinjiang',\n 'Yunnan',\n 'local',\n 'Cuisine Style', 'URL_TA', 'ID_TA','words', 'Reviews', 'Price Range', 'How_long_ago_1', 'rank_city_max','City_nan', \n 'City_Bratislava',\n 'City_Copenhagen',\n 'City_Dublin',\n 'City_Edinburgh',\n 'City_Geneva',\n 'City_Hamburg',\n 'City_Lisbon',\n 'City_Helsinki',\n 'City_Ljubljana',\n 'City_Luxembourg',\n 'City_Lyon',\n 'City_Madrid',\n 'City_Milan',\n 'City_Munich',\n 'City_Paris',\n 'City_Stockholm',\n 'City_Zurich']\n\ncol_for_drop = ['sample', 'Number of Reviews']\nfood_corr = food.drop(style_for_drop, axis=1)\nfood_corr = food_corr.drop(col_for_drop, axis = 1)\n#sns.heatmap(food_corr.corr())\n\ncorrelation = food_corr.corr()\nax = plt.subplots(figsize=(25, 25))\nsns.heatmap(correlation, annot=True, cmap='vlag', linewidths=1, center=0)","c9586465":"np.linalg.matrix_rank(correlation)","6df51256":"food.columns","ca95ef46":"# \u0412\u043d\u0435\u0441\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438:\n\nrank_p_r_mis = correlation['Ranking']['Price Range NAN']\nfood['rank_p_r_mis'] = food['Ranking']\/rank_p_r_mis\nfood['p_r_mis_rank'] = food['Price Range NAN']\/rank_p_r_mis\n\nfood['rank_p_r_mis_2'] = food['Ranking']*rank_p_r_mis\n\nrank_number_mis = correlation['Ranking']['Number of Reviews NAN']\nfood['rank_number_mis'] = food['Ranking']\/rank_number_mis\n","8a025129":"food.drop(style_for_drop, axis = 1, inplace=True)","84c54f62":"df_preproc = food\ndf_preproc.info()","f0a029ae":"# \u0422\u0435\u043f\u0435\u0440\u044c \u0432\u044b\u0434\u0435\u043b\u0438\u043c \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0447\u0430\u0441\u0442\u044c\ntrain_data = df_preproc.query('sample == 1').drop(['sample'], axis=1)\ntest_data = df_preproc.query('sample == 0').drop(['sample'], axis=1)\n\ny = train_data.Rating.values            # \u043d\u0430\u0448 \u0442\u0430\u0440\u0433\u0435\u0442\nX = train_data.drop(['Rating'], axis=1)","6823fb64":"# \u0412\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u0441\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0435 train_test_split \u0434\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n# \u0432\u044b\u0434\u0435\u043b\u0438\u043c 20% \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0430 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 test_size)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=RANDOM_SEED)","1bacdddf":"# \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c\ntest_data.shape, train_data.shape, X.shape, X_train.shape, X_test.shape","933d3f65":"# \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438:\nfrom sklearn.ensemble import RandomForestRegressor # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0438 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nfrom sklearn import metrics # \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0434\u043b\u044f \u043e\u0446\u0435\u043d\u043a\u0438 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u043c\u043e\u0434\u0435\u043b\u0438","831d9a4c":"# \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043c\u043e\u0434\u0435\u043b\u044c (\u041d\u0410\u0421\u0422\u0420\u041e\u0419\u041a\u0418 \u041d\u0415 \u0422\u0420\u041e\u0413\u0410\u0415\u041c)\nmodel = RandomForestRegressor(n_estimators=100, verbose=1, n_jobs=-1, random_state=RANDOM_SEED)","a017a9ad":"# \u041e\u0431\u0443\u0447\u0430\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u044c \u043d\u0430 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u043c \u043d\u0430\u0431\u043e\u0440\u0435 \u0434\u0430\u043d\u043d\u044b\u0445\nmodel.fit(X_train, y_train)\n\n# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u043e\u0434\u0435\u043b\u044c \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0432 \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435.\n# \u041f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e y_pred\ny_pred = model.predict(X_test)","7ccc045c":"y_pred = (y_pred * 2).round()\/2","b7546476":"# \u0421\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f (y_pred) \u0441 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u043c\u0438 (y_test), \u0438 \u0441\u043c\u043e\u0442\u0440\u0438\u043c \u043d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u043e\u0442\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f\n# \u041c\u0435\u0442\u0440\u0438\u043a\u0430 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f Mean Absolute Error (MAE) \u0438 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043e\u0442\u043a\u043b\u043e\u043d\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043e\u0442 \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0445.\nprint('MAE:', metrics.mean_absolute_error(y_test, y_pred))","3025bbdd":"# \u0432 RandomForestRegressor \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0430\u043c\u044b\u0435 \u0432\u0430\u0436\u043d\u044b\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0438 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438\nplt.rcParams['figure.figsize'] = (10,10)\nfeat_importances = pd.Series(model.feature_importances_, index=X.columns)\nfeat_importances.nlargest(15).plot(kind='barh')","31fef294":"test_data.head(10)","dd93de15":"test_data = test_data.drop(['Rating'], axis=1)\ntest_data","7c4d6d22":"sample_submission","99d4095d":"predict_submission = model.predict(test_data)\npredict_submission = (predict_submission * 2).round()\/2","9ae44f2a":"predict_submission","ee7979aa":"sample_submission['Rating'] = predict_submission\nsample_submission.to_csv('submission.csv', index=False)\nsample_submission.head(10)","bc4f24ab":"# Submission:","8470a603":"### Restaurant_id","ccd45600":"# ML:","ad262864":"### Cousine Style:","a57acf2b":"# \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u043e\u0432:","e706ea2f":"# \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430:","1cb96d54":"# \u0418\u043c\u043f\u043e\u0440\u0442:","4a0aa0ec":"### Price Range:","0e7675be":"### Number of Reviews:","fe3270d1":"### Ranking:","4f97b4ab":"# \u041f\u0440\u043e\u0435\u043a\u0442 \u21163. \u041e \u0432\u043a\u0443\u0441\u043d\u043e\u0439 \u0438 \u0437\u0434\u043e\u0440\u043e\u0432\u043e\u0439 \u043f\u0438\u0449\u0435 \n**[SF-DST-65] Restaurant Rating prediction Kochkin Dmitriy**","6f4049e4":"- Restaurant_id \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \/ \u0441\u0435\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432;\n- City \u2014 \u0433\u043e\u0440\u043e\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d;\n- Cuisine Style \u2014 \u043a\u0443\u0445\u043d\u044f \u0438\u043b\u0438 \u043a\u0443\u0445\u043d\u0438, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u0431\u043b\u044e\u0434\u0430, \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u043c\u044b\u0435 \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435;\n- Ranking \u2014 \u043c\u0435\u0441\u0442\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0439 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u0441\u0440\u0435\u0434\u0438 \u0432\u0441\u0435\u0445 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0441\u0432\u043e\u0435\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430;\n- **Rating** \u2014 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043f\u043e \u0434\u0430\u043d\u043d\u044b\u043c TripAdvisor (**\u0438\u043c\u0435\u043d\u043d\u043e \u044d\u0442\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043c\u043e\u0434\u0435\u043b\u044c**);\n- Price Range \u2014 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0446\u0435\u043d \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435;\n- Number of Reviews \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435;\n- Reviews \u2014 \u0434\u0430\u043d\u043d\u044b\u0435 \u043e \u0434\u0432\u0443\u0445 \u043e\u0442\u0437\u044b\u0432\u0430\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430;\n- URL_TA \u2014 URL \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043d\u0430 TripAdvisor;\n- ID_TA \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 TripAdvisor.\n\n\n\n\n\u0414\u0430\u043d\u043d\u044b\u0435 \u0440\u0430\u0437\u0431\u0438\u0442\u044b \u043d\u0430 \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0443\u044e \u0438 \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0432\u044b\u0431\u043e\u0440\u043a\u0443 - \u043f\u043e \u043e\u0431\u0443\u0447\u0430\u044e\u0449\u0435\u0439 \u0432\u044b\u0431\u043e\u0440\u043a\u0435 \u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e, \u0430 \u043f\u043e \u0442\u0435\u0441\u0442\u043e\u0432\u043e\u0439 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u043b\u0430\u0435\u043c \u043f\u0440\u0435\u0434\u0441\u043a\u0430\u0437\u0430\u043d\u0438\u044f - \u043c\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430 \u043d\u0435\u0439 \u0441\u0430\u043c\u043e\u0441\u0442\u043e\u044f\u0442\u0435\u043b\u044c\u043d\u043e \u043e\u0446\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0438, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0443 \u0432\u0430\u0441 \u043d\u0435\u0442 \u0434\u043b\u044f \u043d\u0435\u0435 \u044d\u0442\u0430\u043b\u043e\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439.\n\n\n\n\n\n# \u041f\u043b\u0430\u043d \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u0430\u0434 \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0430\u043c\u0438:\n\n\n**Restaurant_id:**\n\n- \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u043e\u043c\u0435\u0440 id.\n- \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u044e\u0449\u0438\u0435\u0441\u044f id \u0438 \u0443\u0437\u043d\u0430\u0435\u043c: \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u043e\u0442\u043d\u0435\u0441\u0442\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d \u043a \u0441\u0435\u0442\u0435\u0432\u043e\u043c\u0443?\n\n**City:**\n\n- \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u043d\u043e\u0441\u0438\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f.\n- \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0444\u0438\u043b\u044c\u0442\u0440 \u043f\u043e \u0441\u0442\u043e\u043b\u0438\u0446\u0430\u043c.\n- \u0414\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043f\u043e\u043a\u0443\u043f\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f.\n- \u041f\u043e\u043c\u0435\u0447\u0430\u0435\u043c, \u0432\u0445\u043e\u0434\u0438\u0442 \u043b\u0438 \u0433\u043e\u0440\u043e\u0434 \u0432 \u0442\u043e\u043f \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445.\n- \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u0434\u043b\u044f \u0433\u043e\u0440\u043e\u0434\u0430 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n- \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u043e\u0432 \u043d\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430.\n\n**Cuisine Style:**\n\n- \u041e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0438.\n- \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043a\u0443\u0445\u043e\u043d\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435.\n- \u0420\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a \u043d\u0430 dummy \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435.\n- \u041d\u0430\u0445\u043e\u0434\u0438\u043c \u0441\u0430\u043c\u044b\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0435 \u043a\u0443\u0445\u043d\u0438.\n- \u0423\u0437\u043d\u0430\u0435\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u043b\u0438 \u0447\u0442\u043e-\u0442\u043e \u043a \u044d\u0442\u043e\u043c\u0443 \u0442\u043e\u043f\u0443 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n- \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u0437\u043d\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u043e\u043f\u0440\u043e\u0441: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0445\u043e\u043d\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0438\u043b\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435?\n\n**Ranking:**\n\n- \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0441\u043e \u0441\u0440\u0435\u0434\u043d\u0438\u043c, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u043d\u0433\u0430\u043c\u0438 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u043f\u043e \u0433\u043e\u0440\u043e\u0434\u0443.\n- \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435.\n\n**Price Range:**\n\n- \u041f\u0435\u0440\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u043c Price Range \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u043c NaN.\n- \u0414\u043e\u0431\u0430\u0432\u0438\u043c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0443\u044e \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0446\u0435\u043d \u0432 \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0435 \u0438 \u043c\u043e\u0434\u0430\u043b\u044c\u043d\u043e\u0439 \u0446\u0435\u043d\u044b.\n- \u041d\u0430\u0439\u0434\u0435\u043c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0446\u0435\u043d\u043e\u0432\u043e\u0439 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d.\n\n\n**Number of Reviews:**\n\n- \u041d\u043e\u0440\u043c\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043b\u043e\u0433\u0430\u0440\u0438\u0444\u043c\u0438\u0437\u0430\u0446\u0438. \n- \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u0432\u044b\u0431\u0440\u043e\u0441\u044b \u043a\u0440\u0430\u0439\u043d\u0438\u043c\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438.\n- \u0423\u0437\u043d\u0430\u0435\u043c \u043a\u0430\u043a \u0447\u0430\u0441\u0442\u043e \u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0442\u0437\u044b\u0432\u044b.\n- \u0423\u0437\u043d\u0430\u0435\u043c \u0440\u0430\u043d\u043a \u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0430 \u0441 \u0443\u0447\u0435\u0442\u043e\u043c \u0447\u0430\u0441\u0442\u043e\u0442\u044b \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435.\n\n**Reviews:**\n\n- \u0412\u044b\u0434\u0435\u043b\u044f\u0435\u043c \u0434\u0430\u0442\u044b \u0438\u0437 \u043e\u0442\u0437\u044b\u0432\u043e\u0432.\n- \u041e\u0447\u0438\u0449\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043b\u044f \u0430\u043d\u0430\u043b\u0438\u0437\u0430\n- \u0423\u0434\u0430\u043b\u0438\u043c \u0432\u0442\u043e\u0440\u0443\u044e \u0434\u0430\u0442\u0443 (\u0434\u0443\u0431\u043b\u0438\u043a\u0430\u0442 \u043f\u0435\u0440\u0432\u043e\u0439), \u0435\u0441\u043b\u0438 \u043e\u0442\u0437\u044b\u0432 \u0431\u044b\u043b \u0432\u0441\u0435\u0433\u043e \u043e\u0434\u0438\u043d\n- \u041f\u0435\u0440\u0435\u0432\u0435\u0434\u0451\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442 datetime.strptime \u0434\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u0439 \u0440\u0430\u0431\u043e\u0442\u044b.\n- C\u043e\u0437\u0434\u0430\u0451\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043d\u0435\u0439 \u043d\u0430\u0437\u0430\u0434 \u0431\u044b\u043b\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043e\u0442\u0437\u044b\u0432\u044b. \u0422\u043e\u0447\u043a\u043e\u0439 \u043e\u0442\u0441\u0447\u0435\u0442\u0430 \u0432\u043e\u0437\u044c\u043c\u0435\u043c 01.01.2021 \u0433\u043e\u0434\u0430.\n- \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0442\u043e \u0437\u0430\u043c\u0435\u043d\u0438\u043c \u043d\u0430 \u0441\u0440\u0435\u0434\u043d\u0435\u0435.\n- \u0417\u0430\u043c\u0435\u043d\u0438\u043c \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430 \u043c\u043e\u0434\u0430\u043b\u044c\u043d\u044b\u0435 \u0434\u0430\u0442\u044b.\n- \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0441 \u0434\u043d\u044f\u043c\u0438 \u043d\u0435\u0434\u0435\u043b\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u043c\u0435\u0441\u044f\u0446\u044b.\n- \u0420\u0430\u043d\u0436\u0438\u0440\u0443\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0446\u044b \u0441 \u0434\u0430\u0442\u0430\u043c\u0438 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u0438 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441 \u0434\u043d\u044f\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u043e\u0442\u0437\u044b\u0432\u0430\u043c\u0438.","38f5e6cb":"# \u0424\u0443\u043d\u043a\u0446\u0438\u0438:","d2f3c4f3":"\u041f\u0435\u0440\u0435\u0434 \u0442\u0435\u043c \u043a\u0430\u043a \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u043d\u0430\u0448\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435, \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u043c \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0442\u0435\u0441\u0442 \u0438 \u0442\u0440\u0435\u0439\u043d, \u0434\u043b\u044f \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u0438. \u042d\u0442\u043e \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043d\u0430\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a \u0445\u043e\u0440\u043e\u0448\u043e \u043d\u0430\u0448\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0434\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 submissiona \u043d\u0430 kaggle.","4dc7bcec":"### City","4928b904":"### ID_TA:","c9fd5761":"### Reviews:","10f951da":"# \u041f\u0440\u0435\u0434\u043e\u0441\u043c\u043e\u0442\u0440 \u0434\u0430\u043d\u043d\u044b\u0445"}}