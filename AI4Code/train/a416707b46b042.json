{"cell_type":{"b292a150":"code","9d0ce1b5":"code","7a1b7938":"code","b7580b2d":"code","6b7c9eb6":"code","7f60e329":"code","ccd8c564":"code","d7bdd98a":"code","57d81f15":"code","23c52398":"code","0157c0c2":"code","b9daf09d":"code","99fd5ddc":"code","48369baa":"markdown","3a2b0a13":"markdown","648b0586":"markdown","5447e18f":"markdown","3fee82fd":"markdown","d61239c2":"markdown","54e1e3ca":"markdown","b58d3d90":"markdown"},"source":{"b292a150":"import os\nimport sys\nimport random\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfrom skimage.transform import resize\nfrom skimage.morphology import label\nfrom skimage.feature import hog\nfrom skimage import exposure\nfrom keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\nfrom skimage.feature import canny\nfrom skimage.filters import sobel\nfrom skimage.morphology import watershed\nfrom scipy import ndimage as ndi\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom skimage.segmentation import mark_boundaries\nfrom scipy import signal\nimport cv2\nimport glob, pylab, pandas as pd\nimport pydicom, numpy as np\nimport tqdm\nimport gc\n# gc.enable()","9d0ce1b5":"# https:\/\/www.kaggle.com\/peterchang77\/exploratory-data-analysis\ndef parse_data(df):\n    \"\"\"\n    Method to read a CSV file (Pandas dataframe) and parse the \n    data into the following nested dictionary:\n\n      parsed = {\n        \n        'patientId-00': {\n            'dicom': path\/to\/dicom\/file,\n            'label': either 0 or 1 for normal or pnuemonia, \n            'boxes': list of box(es)\n        },\n        'patientId-01': {\n            'dicom': path\/to\/dicom\/file,\n            'label': either 0 or 1 for normal or pnuemonia, \n            'boxes': list of box(es)\n        }, ...\n\n      }\n\n    \"\"\"\n    # --- Define lambda to extract coords in list [y, x, height, width]\n    extract_box = lambda row: [row['y'], row['x'], row['height'], row['width']]\n\n    parsed = {}\n    for n, row in df.iterrows():\n        # --- Initialize patient entry into parsed \n        pid = row['patientId']\n        if pid not in parsed:\n            parsed[pid] = {\n                'dicom': '..\/input\/stage_1_train_images\/%s.dcm' % pid,\n                'label': row['Target'],\n                'boxes': []}\n\n        # --- Add box if opacity is present\n        if parsed[pid]['label'] == 1:\n            parsed[pid]['boxes'].append(extract_box(row))\n\n    return parsed\n# https:\/\/www.kaggle.com\/peterchang77\/exploratory-data-analysis\ndef draw(data,im):\n    \"\"\"\n    Method to draw single patient with bounding box(es) if present \n\n    \"\"\"\n\n    # --- Convert from single-channel grayscale to 3-channel RGB\n    im = np.stack([im] * 3, axis=2)\n\n    # --- Add boxes with random color if present\n    for box in data['boxes']:\n        rgb = np.floor(np.random.rand(3) * 256).astype('int')\n        im = overlay_box(im=im, box=box, rgb=rgb, stroke=6)\n        \n    return im\n\ndef overlay_box(im, box, rgb, stroke=1):\n    \"\"\"\n    Method to overlay single box on image\n\n    \"\"\"\n    # --- Convert coordinates to integers\n    box = [int(b) for b in box]\n    \n    # --- Extract coordinates\n    y1, x1, height, width = box\n    y2 = y1 + height\n    x2 = x1 + width\n\n    im[y1:y1 + stroke, x1:x2] = rgb\n    im[y2:y2 + stroke, x1:x2] = rgb\n    im[y1:y2, x1:x1 + stroke] = rgb\n    im[y1:y2, x2:x2 + stroke] = rgb\n\n    return im","7a1b7938":"df = pd.read_csv('..\/input\/stage_1_train_labels.csv')\nparsed = parse_data(df)\ndf.head()","b7580b2d":"det_class_path = '..\/input\/stage_1_detailed_class_info.csv'\ndet_class_df = pd.read_csv(det_class_path)\ndet_class_df.head()","6b7c9eb6":"import cv2\nfrom IPython.display import display, Image\ndef cvshow(image, format='.png', rate=255 ):\n    decoded_bytes = cv2.imencode(format, image*rate)[1].tobytes()\n    display(Image(data=decoded_bytes))\n    return","7f60e329":"j = 0\ndf = det_class_df[det_class_df['class']=='No Lung Opacity \/ Not Normal']\n# nImg = df.shape[0]\/3  # takes long time to load !!!\nnImg = 400\nimg_ar = np.empty(0)\ndf = df.reset_index()\nwhile img_ar.shape[0]!=nImg:\n# for j in range(nImg):\n    ind = np.random.randint(df.shape[0])\n    patientId = df['patientId'][ind]\n    dcm_file = '..\/input\/stage_1_train_images\/%s.dcm' % patientId\n    dcm_data = pydicom.read_file(dcm_file)\n    img = np.expand_dims(dcm_data.pixel_array,axis=0)    \n    if j==0:\n        img_ar = img\n    elif (j%100==0):\n        print(j,'images loaded')\n    else:\n        img_ar = np.concatenate([img_ar,img],axis=0)\n    j += 1\n    ","ccd8c564":"def imgtile(imgs,tile_w):\n    assert imgs.shape[0]%tile_w==0,\"'imgs' cannot divide by 'th'.\"\n    r=imgs.reshape((-1,tile_w)+imgs.shape[1:])\n    return np.hstack(np.hstack(r))\n\n#usage\ntiled = imgtile(img_ar,20)\n# cvshow(tiled)\ntiled.shape","d7bdd98a":"cvshow(cv2.resize( tiled, (1024,1024), interpolation=cv2.INTER_LINEAR ))","57d81f15":"from ipywidgets import interact,IntSlider\n@interact\ndef f(i=IntSlider(min=1,max=18,step=1,value=0)):\n    cvshow(imgtile(img_ar[i*20:(i+1)*20],5))","23c52398":"j = 0\ndf = det_class_df[det_class_df['class']=='Normal']\n# nImg = df.shape[0]\/3  # takes long time to load !!!\nnImg = 400\ndf = df.reset_index()\nimg_ar = np.empty(0)\nwhile img_ar.shape[0]!=nImg:\n# for j in range(nImg):\n    ind = np.random.randint(df.shape[0])\n    patientId = df['patientId'][ind]\n    dcm_file = '..\/input\/stage_1_train_images\/%s.dcm' % patientId\n    dcm_data = pydicom.read_file(dcm_file)\n    img = np.expand_dims(dcm_data.pixel_array,axis=0)    \n    if j==0:\n        img_ar = img\n    elif (j%100==0):\n        print(j,'images loaded')\n    else:\n        img_ar = np.concatenate([img_ar,img],axis=0)\n    j += 1\n    ","0157c0c2":"#usage\ntiled = imgtile(img_ar,20)\ntiled.shape\ncvshow(cv2.resize( tiled, (1024,1024), interpolation=cv2.INTER_LINEAR ))","b9daf09d":"j = 0\ndf = det_class_df[det_class_df['class']=='Lung Opacity']\n# nImg = df.shape[0]\/3  # takes long time to load !!!\nnImg = 400\nimg_ar = np.empty(0)\ndf = df.reset_index()\nimg_ar = np.empty(0)\nwhile img_ar.shape[0]!=nImg:\n# for j in range(nImg):\n    ind = np.random.randint(df.shape[0])\n    patientId = df['patientId'][ind]\n    dcm_file = '..\/input\/stage_1_train_images\/%s.dcm' % patientId\n    dcm_data = pydicom.read_file(dcm_file)\n    img = dcm_data.pixel_array\n    data = parsed[patientId]\n    img = draw(data,img)\n    img = np.expand_dims(img,axis=0)    \n    if j==0:\n        img_ar = img\n    elif (j%100==0):\n        print(j,'images loaded')\n    else:\n        img_ar = np.concatenate([img_ar,img],axis=0)\n    j += 1","99fd5ddc":"#usage\ntiled = imgtile(img_ar,20)\ntiled.shape\ncvshow(cv2.resize( tiled, (1024,1024) ))","48369baa":"# Displaying Lung Opacity Images","3a2b0a13":"# Some utility functions","648b0586":"# Displaying Some Normal Images","5447e18f":"This dataset has three types of images namely\n\n*   No Lung Opacity \/ Not Normal\n*   Normal\n*   Lung Opacity\n\nI visualize each class separately to get better idea","3fee82fd":"# Switching images using the slide bar","d61239c2":"In this notebook, I visualize the dataset using OpenCV.\n\nYou may find the following links useful\n- [EDA](https:\/\/www.kaggle.com\/peterchang77\/exploratory-data-analysis)\n- [Learn OpenCV](https:\/\/docs.opencv.org\/master\/d6\/d00\/tutorial_py_root.html)\n- [Image Processing TGS ](https:\/\/www.kaggle.com\/yushas\/imageprocessingtips)\n- [Image Enhancement](https:\/\/www.kaggle.com\/meaninglesslives\/simple-feature-extraction-and-image-enhancement)\n\nI will keep updating the kernel as i explore further.","54e1e3ca":"# Loading required libraries","b58d3d90":"# Visualizing No Lung Opacity \/ Not Normal "}}