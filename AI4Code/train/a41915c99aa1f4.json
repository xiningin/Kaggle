{"cell_type":{"685b581a":"code","f06bc118":"code","25711bbf":"code","0f93b6cf":"code","c4ed6e14":"code","e051fa5a":"code","f33dd9f4":"code","1b5566d3":"code","1d75a97b":"code","ea4e95d5":"code","18b9f633":"code","d3ba795d":"code","4a78bc60":"code","58e6b787":"markdown","f9b903b5":"markdown","aac24a3e":"markdown","f170773b":"markdown"},"source":{"685b581a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f06bc118":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.metrics import precision_recall_fscore_support as score\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\nimport warnings\nwarnings.filterwarnings(\"ignore\")","25711bbf":"data=pd.read_csv(\"\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv\")\ndisplay(data.head())\ndisplay(data.info())\ndisplay(data.describe())","0f93b6cf":"GAD1=data\nplt.figure(figsize=(16,6))\nsns.countplot(data=GAD1,x=\"GRE Score\",saturation=1)\nplt.xticks(rotation=45,size=12)\nplt.grid()\nplt.tight_layout()\n\nplt.figure(figsize=(16,6))\nsns.countplot(data=GAD1,x=\"TOEFL Score\",saturation=1)\nplt.xticks(rotation=45,size=12)\nplt.grid()\nplt.tight_layout()\n\nplt.figure(figsize=(16,6))\nsns.countplot(data=GAD1,x=\"University Rating\",saturation=1)\nplt.xticks(rotation=45,size=12)\nplt.grid()\nplt.tight_layout()\n\nplt.figure(figsize=(16,6))\nsns.countplot(data=GAD1,x=\"SOP\",saturation=1)\nplt.xticks(rotation=45,size=12)\nplt.grid()\nplt.tight_layout()\n\nplt.figure(figsize=(16,6))\nsns.countplot(data=GAD1,x=\"LOR \",saturation=1)\nplt.xticks(rotation=45,size=12)\nplt.grid()\nplt.tight_layout()","c4ed6e14":"#Boxplot of CGPA in accordance with University ranking \/\/ SOP \/\/ LOR \/\/Research\nplt.figure(figsize=(20,10))\nplt.subplot(2,2,1)\nsns.boxplot(x=\"University Rating\",y=\"CGPA\",data=GAD1,saturation=1)\nplt.grid()\nplt.subplot(2,2,2)\nsns.boxplot(x=\"SOP\",y=\"CGPA\",data=GAD1,saturation=1)\nplt.grid()\nplt.subplot(2,2,3)\nsns.boxplot(x=\"LOR \",y=\"CGPA\",data=GAD1,saturation=1)\nplt.grid()\nplt.subplot(2,2,4)\nsns.boxplot(x=\"Research\",y=\"CGPA\",data=GAD1,saturation=1)\nplt.grid()\nplt.show()","e051fa5a":"#Correlation between variables\nplt.figure(figsize=(12,6))\nnewdf=data[[\"GRE Score\",\"TOEFL Score\",\"University Rating\",\"SOP\",'LOR ','CGPA',\"Research\",\"Chance of Admit \"]]\ncorrelation = newdf.corr(\"spearman\")\nsns.heatmap(correlation, cmap=\"Blues\",linewidths=1,annot=True) \nplt.title(\"Correlation between input variables and chances of admit\")\nplt.tight_layout()\n\nplt.figure(figsize=(12,6))\nplt.plot(correlation[\"Chance of Admit \"][:7]*100)\nplt.title(\"Correlation Values\")\nplt.ylabel(\"Correlation\")\n# plt.xticks(rotation=45)\nplt.grid()\nplt.tight_layout()","f33dd9f4":"X=data.iloc[:,1:8]  #Input variables\nY=data.iloc[:,8]  #Output variable","1b5566d3":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.05,random_state = 95) #Split data\n\nmodel4=LinearRegression()\nmodel4.fit(X_train,Y_train)","1d75a97b":"Y_pred=model4.predict(X_test)\nacc=metrics.r2_score(Y_test,Y_pred)\nmse=metrics.mean_squared_error(Y_test,Y_pred)\nprint(\"Total mean squared error is: {}\".format(mse))\nprint(\"The accuracy of the model is: {}%\".format(round(acc*100)))","ea4e95d5":"new_df=pd.read_csv(\"\/kaggle\/input\/graduate-admissions\/Admission_Predict_Ver1.1.csv\")\ndef classifier(new_df):\n    if new_df[\"Chance of Admit \"]>=0.5:\n        return \"1\"\n    else:\n        return \"0\"\nnew_df[\"Acceptance\"] = new_df.apply(classifier, axis=1)\nnew_df.head()","18b9f633":"new_df.drop([\"Chance of Admit \"],axis=1,inplace=True)\nX=new_df.iloc[:,1:8].values\nY=new_df.iloc[:,8].values\n\nLR_model=LogisticRegression()\nX_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2,random_state=0)\n\nLR = LR_model.fit(X,Y)\nprint(\"The coefficients are: {}\".format(LR.coef_))\nprint(\"The Intercept is: {}\".format(LR.intercept_))","d3ba795d":"predictions=LR_model.predict(X_test)\nprint(predictions)","4a78bc60":"#Confusion matrix and accuracy\ncm=confusion_matrix(Y_test,predictions)\nclass_label = [\"Accepted\", \"Rejected\"]\ndf_cm = pd.DataFrame(cm, index=class_label,columns=class_label)\n\n#Plot\nplt.figure(figsize=(7,5))\nsns.heatmap(df_cm, annot=True, fmt='d')\nplt.title(\"Confusion Matrix\",fontsize=15)\nplt.xlabel(\"Predicted \",fontsize=15)\nplt.ylabel(\"True \",fontsize=15)\nplt.show()\n\nacc=accuracy_score(Y_test,predictions)\nprint(\"The accuracy of the model is {}%\".format(100*acc))","58e6b787":"# __Multiple linear regression model__","f9b903b5":"# **Logistic regression**","aac24a3e":"***Boxplots are very useful in understanding the performance of students with respect to their University ranking, quality of SOP, LOR, and research experience.***","f170773b":"**The function \"classifier\" is used to convert the output variable(Chance of admit) into binary form which means if the students chance of admit is >0.5, the student is accepted(1) and if it is <0.5, the student is rejected(0).**"}}