{"cell_type":{"5ca6e0b6":"code","f7fef9dc":"code","86f06198":"code","ab31d610":"code","00da9488":"code","ab3b4719":"code","3963e609":"code","2b80bc23":"code","cdae0952":"code","4f6c656d":"code","2d22e6bf":"code","29e2c9eb":"code","d2369bb1":"code","5494cc0d":"code","b30153b4":"code","037e65a1":"code","1b12e08a":"code","5311ba5f":"code","2cf56e21":"code","4ac14f01":"code","9393041c":"code","33608aff":"code","32a43f57":"code","087ce3c6":"code","2da08170":"code","b0b587c9":"code","5a4fe61f":"code","4541f633":"code","ac746343":"code","5d47de84":"code","c3569fac":"code","2db769a5":"code","c19261b9":"code","1ad2d833":"code","1d3d578f":"code","c3d3e2da":"code","7e80220e":"code","9f8a9bc7":"code","31ebaee5":"code","31826b5f":"code","0676b1b4":"code","27716c13":"code","65018cc6":"code","3d742701":"code","456add74":"code","0343fd1b":"code","94d7fe4e":"code","07894982":"code","1bd1e3d2":"code","5f2ac4b9":"code","e5a3e05a":"code","6479d00f":"code","a2728ec2":"code","06c57957":"code","6de5d426":"code","13985639":"code","7f407771":"code","c0cac4db":"code","172d90b6":"code","875fbf64":"code","56ba4407":"code","0c877397":"code","9c0a4832":"code","a35aa83d":"code","80d9b244":"code","e87c440b":"markdown","1bad7638":"markdown","9bba78b3":"markdown","78d7a5d5":"markdown","bc70000f":"markdown","87306d9c":"markdown","c9bde36b":"markdown","7677628c":"markdown","f2b5c891":"markdown","11f8d861":"markdown","73e394cb":"markdown"},"source":{"5ca6e0b6":"#First we import libraries we will use\nimport pandas as pd # as is used  to represent library with an alias\nimport numpy as np","f7fef9dc":"#I creating an (4,5) matrice \narr=np.random.randn(4,5)#This functions me 4*5 metrices from randomly distributed numbers\narr","86f06198":"#We can create our own dataframe by using pd.DataFrame() function\npd.DataFrame(arr)","ab31d610":"#we can add index and column names by using index and columns parameters inside the function we call\ndf=pd.DataFrame(arr,index=[\"State1\",\"State2\",\"State3\",\"State4\"], columns=[\"USA\",\"Norway\",\"Sweden\",\"Germany\",\"Greece\"])\ndf # I assigned the dataframe into a variable","00da9488":"#Here I import a csv file from a website\ndf1=pd.read_csv(\"https:\/\/raw.githubusercontent.com\/thohan88\/covid19-nor-data\/master\/data\/01_infected\/msis\/municipality.csv\")\ndf1","ab3b4719":"#Here I import an excel data from my computer, you have to specify file pathway\npd.read_excel(\"..\/input\/municipalities\/municipality.xlsx\")","3963e609":"#Here a import a html file from a website\ndata=pd.read_html(\"https:\/\/www.fdic.gov\/resources\/resolutions\/bank-failures\/failed-bank-list\/\")\ndata[0]","2b80bc23":"df1 #this my entire dataframe, this dataframe gives information about corona cases in Norway","cdae0952":"df1[\"cases\"] #here I select only corona cases column","4f6c656d":"df1[\"cases\"].max() #here I get the maximum corona case of the column","2d22e6bf":"df1[\"cases\"].min() #here I get the maximum corona case of the column","29e2c9eb":"df1[\"cases\"].mean() ##here I get the average corona case in Norway","d2369bb1":"#We can select more than one column when we need by making a list of columns  we want to call\ndf1[[\"kommune_name\",\"cases\"]] #here I call two columns from the dataframe","5494cc0d":"#We can implement various methods for multiple columns we select\ndf1[[\"population\",\"cases\"]].std() #this returns the standart deviation of these two columns","b30153b4":"df1[[\"population\",\"cases\"]].mean()\n#here we can compare average of cases by population mean","037e65a1":"#We can also create new columns and add them into our dataframe by feature engineering\ndf1[\"Percentage\"]= df1[\"cases\"]\/df1[\"population\"]","1b12e08a":"df1.head(50)","5311ba5f":"df1.tail(10) #this returns the last rows of the dataframe, here I sepecify to bring 10 rows inside bracket","2cf56e21":"df1.info() #this method returns an overall information about the data, data types, column names, etc.","4ac14f01":"#df.describe() method returns overal statistical information about the data\ndf1[\"cases\"].describe() #here I get statistical information of a specific column,called cases","9393041c":"df1.head() #this mthod returns the first 5 rows of the dataframe, makes us to have a quick look to the data","33608aff":"#df.drop() is used to drop columns if we specify axis= 1 or rows from the data if we specify axis= 0\ndf1.drop(\"fylke_name\",axis=1) #here I drop a fylke_name column, ","32a43f57":"#df.loc[]- is called by writing actual names or labels of the indices of rows\n#df.iloc[]- is called by writing the indices of rows\ndf.loc[\"State1\"]","087ce3c6":"#we can call more than one rows with a specified columns by df.loc[rows,columns]:\ndf.loc[\"State1\":\"State3\",\"USA\":\"Norway\"]#here I get the indices between state 1 and state 3 from columns USA and Norway","2da08170":"# df.iloc[] functions in the same mannes, but we have to use indices of the rows not their names\ndf.iloc[0:3] #this returns rows from 0 index to 3 index","b0b587c9":"df.iloc[1:3,0:2]#I can narrow also columns ","5a4fe61f":"df.iloc[1:3,0]#this returns only the first column within the assigned index period","4541f633":"\ndf1[df1[\"cases\"] >100] #here I command to get cases that are bigger than 100","ac746343":"df1[df1[\"fylke_name\"]==\"Agder\"] #this return the rows if only fylke_name is equal to Agder","5d47de84":"#I can combine more than one condition and corona cases that are bigger than 100\ndf1[(df1[\"cases\"] >100) &(df1[\"fylke_name\"]==\"Agder\")] \n#this return the rows if only fylke_name is equal to Agder","c3569fac":"df1.groupby(\"fylke_name\").mean() #here group all the data with respect to caunty name and get the average of each county","2db769a5":"df1.groupby(\"fylke_name\").mean()[\"cases\"] # we can narrow the columns, here we get only the cases column","c19261b9":"df1.groupby(\"fylke_name\").mean()[\"cases\"].plot(figsize=(20,10),color=\"green\")\n#we can also visualize our data after groupby method","1ad2d833":"df1.groupby(\"fylke_name\").mean()[\"cases\"].plot(figsize=(20,10),color=\"red\")","1d3d578f":"df1.groupby(\"fylke_name\").mean()[\"cases\"].plot(kind=\"area\",figsize=(20,10),color=\"yellow\")\n#here I get area kind of plot instead of line by changing kind parameter inside plot method as \"area\"","c3d3e2da":"df1.groupby(\"kommune_name\").describe()[\"cases\"] # here I get statistical information of the gouped municipalities","7e80220e":"df1.groupby(\"fylke_name\").describe()[\"cases\"].transpose() \n#here I just transpose the rows  and columns of the same code via df.transpose() method","9f8a9bc7":"df1[\"cases\"].describe()# here is the overall statistical information of the entire without any grouped values","31ebaee5":"df1.groupby(\"fylke_name\").describe()[\"cases\"]","31826b5f":"# Some of columns have very good information like date column, but I have to transform into more useful information\ndf1","0676b1b4":"#Here I get year section of the \"date\" column and create another column named as \"Year\"\ndf1[\"Year\"]=pd.DatetimeIndex(df1[\"date\"]).year \ndf1[\"Year\"]","27716c13":"#Here I get month section of the \"date\" column and create another column named as \"Month\"\ndf1[\"Month\"]=pd.DatetimeIndex(df1[\"date\"]).month\n","65018cc6":"#Here I get day section of the \"date\" column and create another column named as \"Day\"\ndf1[\"Day\"]=pd.DatetimeIndex(df1[\"date\"]).day\ndf1.head() #here you can seee the Month and Year and Day Columns has been added","3d742701":"df1.groupby(\"Year\").max()[\"cases\"]\n#Now we can get deepr insights of our data, here we get the max cases of corona by year\n# we can easliy see that although we are at the beginning of the 2021, the number of corona cases is higher than 2020","456add74":"df1.groupby(\"Month\").max()[\"cases\"]\n#here we get maximum cases for each month","0343fd1b":"df1.groupby(\"Month\").mean()[\"cases\"]\n# here we get the average of cases for each month","94d7fe4e":"df1.groupby(\"Month\").max()[\"cases\"].plot(figsize=(20,10))\n#here I group all the rows with respect to similarity in month and get the maximum cases for each month","07894982":"df1.pivot_table(values=\"cases\", index=[\"Year\",\"Month\"],columns=[\"fylke_name\"])\n#Here I assign corona cases as the values of the table, making Year and Month columns as the index , county names as columns","1bd1e3d2":"import seaborn as sns\nsns.set_style(\"darkgrid\")\ndf1.pivot_table(values=\"cases\", index=[\"Year\",\"Month\"],columns=[\"fylke_name\"]).plot(figsize=(20,10))\n#Here I create looking figure of my pivot table","5f2ac4b9":"#Here I create a new dataframe that I use of for the use of algorithm \n#because I have to drop some columns and need to compare results with the original data\nlatest_df=df1.drop([\"date\",\"date_time\",\"kommune_name\",\"fylke_name\"],axis=1)\n#I drop [\"date\",\"date_time\",\"kommune_name\",\"fylke_name\"] columns and assign the rest of the data into new dataframe","e5a3e05a":"latest_df.drop(\"Percentage\",axis=1,inplace=True)#I drop also \"Percentage column\" because it has some missing values","6479d00f":"latest_df #here is the data ready for the algorithm","a2728ec2":"from sklearn.cluster import KMeans#here I call K Means Clustering Algorithm\n#In this data set, I will not make prediction, but I will cluster municipalities in order to explore the performance of K Means","06c57957":"model=KMeans(n_clusters=3) \n#Here I creat an instance of the algorithm and select 3 clusters by assigning n_clusters parameter as 3","6de5d426":"model.fit(latest_df.values)# Here I make the algorithm to fit the data","13985639":"model.cluster_centers_ #These are the cluster centers of the 3 spearate clusters","7f407771":"model.labels_# These are the list of the cluster in the entire dataset","c0cac4db":"print(model.labels_.shape) # as we can see the shape of labels match with original data\nprint(df1.shape)","172d90b6":"labels=pd.DataFrame(model.labels_,columns=[\"Labels\"]) \n# here I creat a dataframe of labels because I want to add it into the original data in order to compare and see the performance\nlabels\n                ","875fbf64":"df2=pd.concat([df1,labels],axis=1) \n#here I concatenate the original dataframe df1 with the labels dataframe that the algorithm has clustered and create df2 dataframe","56ba4407":"df2 #as we can see below in the table, we have a Lables column that is added into our original datafram","0c877397":"df2.groupby(\"Labels\").mean()[\"cases\"]\n# Here we can see that the algorithm assign label 0 if the number of corona cases is around  21\n# Here we can see that the algorithm assign label 1 if the number of corona cases is around  5622\n# Here we can see that the algorithm assign label 0 if the number of corona cases is around  517","9c0a4832":"\ndf2[df2[\"Labels\"]==1].head(50)\n#Here we see that Oslo region has been clustered with 1 label\n","a35aa83d":"df2[df2[\"Labels\"]==0].head(50) \n#The algorithm has clustered municipalities as cluster 0 if the number of cases are fewer than 50 cases","80d9b244":"df2[df2[\"Labels\"]==2].head(50) \n#The algorithm has clustered municipalities as cluster 0 if the number of cases are more than 50 cases and fewer than 700","e87c440b":"# 1. How can we import data from various Sources:\n","1bad7638":"df.groupby()\n\n#A groupby operation involves some combination of splitting the object, applying a function, and combining the results. This can be used to group large amounts of data and compute operations on these groups.","9bba78b3":"*This proves that K Means makes a good job in this dataset and makes good clustering ","78d7a5d5":"#Conditional Selection:","bc70000f":"*Pandas gives also a handy visualization tools by using df.plot() method","87306d9c":"# 3. Using Some Useful Methods and Functions in Pandas to get insights and clean data","c9bde36b":"pandas.pivot_table(data, values=None, index=None, columns=None, aggfunc='mean', fill_value=None, margins=False, dropna=True, margins_name='All', observed=False)[source]\n\n\nThis creates a spreadsheet-style pivot table as a DataFrame as we can see below:","7677628c":"# 4.  Feature Engineering:","f2b5c891":"# 2. Selecting Columns and Rows From the Dataframe","11f8d861":"#How can we select rows:","73e394cb":"# 5. Cleaning Data Before the Use of Algorithm and Implemeting Algorithm: "}}