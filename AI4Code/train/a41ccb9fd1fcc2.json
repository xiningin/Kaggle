{"cell_type":{"a9fce34c":"code","a0a9f50c":"code","a6bd41ac":"code","856ab904":"code","8093a54e":"code","3401393e":"code","76ee08d0":"code","1940a200":"code","763d2863":"code","2a69e0f7":"code","9f5a061e":"code","c486230d":"code","45587851":"code","df9f629f":"markdown","b3cf9c2a":"markdown"},"source":{"a9fce34c":"from numbers import Real\nimport pandas as pd\nimport numpy as np\nimport os\n\nfrom sklearn import ensemble\nfrom sklearn import metrics\nfrom sklearn import model_selection\nfrom sklearn import decomposition\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn import pipeline\nfrom functools import partial\nfrom lightgbm import LGBMClassifier\n\nimport optuna\n\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","a0a9f50c":"df_train = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/train.csv')\nX_test = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/test.csv')\nsample_submission = pd.read_csv('..\/input\/tabular-playground-series-nov-2021\/sample_submission.csv')","a6bd41ac":"df_train.head()","856ab904":"print(df_train.shape)\nprint(X_test.shape)","8093a54e":"y = df_train['target']\ndf_train.pop('target')\ndf_train.pop('id')\nX_test.pop('id')\nX=df_train\n\ndel df_train","3401393e":"print(X.shape)\nprint(X_test.shape)","76ee08d0":"st_scaler = StandardScaler()\nX = st_scaler.fit_transform(X)\nX_test = st_scaler.fit_transform(X_test)","1940a200":"\"\"\"def optimize(trial, x, y):\n\n    boosting_type='gbdt'\n    objective= 'binary'\n    device_type = trial.suggest_categorical('device_tye', ['gpu'])\n    max_depth = trial.suggest_int('max_depth', 3, 25)\n    n_estimators = trial.suggest_int('n_estimators', 100, 1000)\n    min_child_weight = trial.suggest_int('min_child_weight', 0, 10)\n    learning_rate = trial.suggest_float('learning_rate', 1e-3, 0.3)\n    reg_alpha = trial.suggest_uniform(\"lambda_l1\", 0.0, 100.0)\n    reg_lambda = trial.suggest_uniform(\"lambda_l2\", 0.0, 100.0)\n    subsample = trial.suggest_float('subsample', 0.6, 1.0)\n    colsample_bytree = trial.suggest_float('colsample_bytree', 0.6, 1)\n    \n    model = LGBMClassifier(boosting_type = boosting_type,\n                          objective = objective,\n                          device_type = device_type,\n                          max_depth = max_depth,\n                          n_estimators = n_estimators,\n                          min_child_weight = min_child_weight,\n                          learning_rate = learning_rate,\n                          reg_alpha = reg_alpha,\n                          reg_lambda = reg_lambda,\n                          subsample = subsample,\n                          colsample_bytree = colsample_bytree,\n                            random_state  = 42, \n                          \n                           \n                          )\n    \n\n    kf = model_selection.StratifiedKFold(n_splits=5)\n    accuracies = []\n    for idx in kf.split(X=x, y = y):\n        train_idx, test_idx = idx[0], idx[1]\n        xtrain = x[train_idx]\n        ytrain = y[train_idx]\n\n        xtest = x[test_idx]\n        ytest = y[test_idx]\n\n        model.fit(xtrain, ytrain, \n                  eval_set = [(xtest, ytest)],\n              early_stopping_rounds = 100,\n              eval_metric = 'error',\n             verbose = False)\n        preds = model.predict_proba(xtest)[:,1]\n        fold_acc = metrics.roc_auc_score(ytest, preds)\n        accuracies.append(fold_acc)\n\n    return -1.0*np.mean(accuracies)\"\"\"","763d2863":"\"\"\"optimization_function = partial(optimize, x=X, y=y)\n    \nstudy = optuna.create_study(direction = \"minimize\")\nstudy.optimize(optimization_function, n_trials=15)\"\"\"","2a69e0f7":"#best_params_lgbmMinimize = study.best_params\n#print(best_params_lgbmMinimize)\n\"\"\"best_params = study.best_params\nprint(best_params)\"\"\"\nbest_params = {\n 'max_depth': 9,\n 'n_estimators': 982,\n 'min_child_weight': 9,\n 'learning_rate': 0.029350235356931986,\n 'lambda_l1': 16.443464361150568,\n 'lambda_l2': 54.868282901553144,\n 'subsample': 0.7189486218834473,\n 'colsample_bytree': 0.8770976505458908}","9f5a061e":"folds = model_selection.StratifiedKFold(n_splits = 5, random_state = 42, shuffle = True)\ny_pred = np.zeros(len(X_test))\nscores = []\nfor fold, (trn_idx, val_idx) in enumerate(folds.split(X, y)):\n    \n    X_train, X_val = X[trn_idx], X[val_idx]\n    y_train, y_val = y[trn_idx], y[val_idx]\n\n    model =  LGBMClassifier( objective = 'binary', device_type = 'gpu',\n                            max_depth = 9,\n                            n_estimators = 982,\n                          random_state  = 42, \n                            min_child_weight = 9,\n                            learning_rate = 0.029350235356931986,\n                            lambda_l1 = 16.443464361150568,\n                            lambda_l2 = 54.868282901553144,\n                            subsample = 0.7189486218834473,\n                         colsample_bytree = 0.8770976505458908\n                            \n                          \n                         )\n   \n    model.fit(X_train, y_train, eval_set = [(X_train, y_train), (X_val, y_val)], \n              verbose = False, early_stopping_rounds = 100)\n    final_preds = model.predict_proba(X_val)[:,1]\n    fold_score = metrics.roc_auc_score(y_val, final_preds)\n    scores.append(fold_score)\n    y_pred += model.predict_proba(X_test)[:,1] \/ folds.n_splits \n\nprint(scores)","c486230d":"sample_submission.head()","45587851":"sample_submission['target'] = y_pred\nsample_submission.to_csv('Submission.csv',index = False)","df9f629f":"## Optuna Search using LGBMClassifier\nImportant note\nThe following cell can be uncommented to run the hyperparameter tuning process which uses optuna method","b3cf9c2a":"## Dividing dependent and independent variables and adding new features\nIt can be seen that columns like \"Id\" are unique, hence wont contribute for our predictions. Therefore, these must be removed from both training and testing datasets."}}