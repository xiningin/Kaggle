{"cell_type":{"712af9d3":"code","6a3bc833":"code","749ae0db":"code","92ff2aa6":"code","b6edf3f9":"code","cfae840c":"code","2368d12c":"code","40386264":"code","8f7d0a88":"code","673c4057":"code","25c90916":"code","8f0f8620":"code","3d9ddee7":"code","969a10b3":"code","1ffdc736":"code","4d220f50":"code","c8b68e83":"code","145f0ab1":"code","97cba07a":"markdown","7814fbca":"markdown","abcc60c2":"markdown","2b03d9bc":"markdown","94d21b05":"markdown","5cc691a7":"markdown","8ae1a21f":"markdown"},"source":{"712af9d3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","6a3bc833":"df = pd.read_csv('..\/input\/top-indian-colleges\/College_data.csv')","749ae0db":"df.head()","92ff2aa6":"df.tail()","b6edf3f9":"%%time\nfor col in df.columns:\n    df[col] = np.where(df[col]=='--',np.nan,df[col])","cfae840c":"col_to_cast = df.columns[5:]\ndf[col_to_cast] = df[col_to_cast].astype(float)","2368d12c":"df.dtypes","40386264":"df.isnull().sum()","8f7d0a88":"import seaborn as sns\nimport matplotlib.pyplot as plt\n\nplt.figure(figsize=(10,5))\nsns.barplot(x=df.columns,y=df.isnull().sum()\/len(df))\nplt.xticks(rotation=90) # if the graph is big than rotation not required\nplt.show()","673c4057":"df_plot = df.groupby(by=['State']).College_Name.nunique()\nplt.figure(figsize=(20,7))\nplt.xticks(rotation=90)\nsns.barplot(x=df_plot.index,y=df_plot)","25c90916":"g = df.groupby(by=['State','Stream']).College_Name.nunique()\ng = g.reset_index()\ng = g.rename(columns = {'College_Name':'Counts'})","8f0f8620":"sns.catplot(data=g,col='State',x='Stream',y='Counts',col_wrap=1,kind='bar',sharex=False,height=7,aspect=2)","3d9ddee7":"g = df.groupby(by=['State','Stream']).agg(min_placement=('Placement','min'),max_placement=('Placement','max'),mean_placement=('Placement','mean'))\ng = g.reset_index()","969a10b3":"def find_placement(state='Andaman'):\n    sns.catplot(data=g[g.State==state],row='State',col='Stream',kind='bar',sharex=False,height=5,aspect=1)\n    \nfind_placement('Gujarat')","1ffdc736":"from re import sub\nfrom decimal import Decimal\n\ndf.UG_fee = df.UG_fee.apply(lambda x : float(sub(r'[^\\d.]', '', x)) if type(x)==str else np.nan)\ndf.PG_fee = df.PG_fee.apply(lambda x : float(sub(r'[^\\d.]', '', x)) if type(x)==str else np.nan)","4d220f50":"g1 = df.groupby(by=['State','Stream']).agg(UG_min_fee=('UG_fee','min'),UG_max_fee=('UG_fee','max'),UG_mean_fee=('UG_fee','mean'))\ng2 = df.groupby(by=['State','Stream']).agg(PG_min_fee=('PG_fee','min'),PG_max_fee=('PG_fee','max'),PG_mean_fee=('PG_fee','mean'))","c8b68e83":"g1.loc[('Gujarat')]","145f0ab1":"g2.loc[('Karnataka')]","97cba07a":"**Find total number of unique colleges by state**","7814fbca":"**Fees of Colleges**","abcc60c2":"**Reading DataFrame**","2b03d9bc":"**Find Missing Values**","94d21b05":"**Find Total number college per state per stream**","5cc691a7":"**Placement Stats**","8ae1a21f":"**Vizualize percentage of missing values**"}}