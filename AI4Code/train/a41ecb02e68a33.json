{"cell_type":{"dc0078e6":"code","45c494c0":"code","94540a01":"code","51d57760":"code","c3a5b2f6":"code","9997dee3":"code","062186bb":"code","4b14c12e":"code","541a4d75":"code","62dc2f00":"code","a98e7c02":"code","5b7463ac":"markdown"},"source":{"dc0078e6":"%%capture\n!pip install ..\/input\/keras-efficientnet-whl\/Keras_Applications-1.0.8-py3-none-any.whl\n!pip install ..\/input\/keras-efficientnet-whl\/efficientnet-1.1.1-py3-none-any.whl","45c494c0":"import tensorflow as tf\n\nfrom tensorflow.keras.layers import *\nfrom tensorflow.keras.models import *\n\nimport efficientnet.keras as efn\n\nimport os\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n\nfrom tqdm import tqdm","94540a01":"MODEL_PATH_ROOT = '..\/input\/cassava-model\/'\nMODEL_PATHS = [MODEL_PATH_ROOT+file for file in os.listdir(MODEL_PATH_ROOT) if file.endswith('.h5')]\n\nprint(MODEL_PATHS)","51d57760":"tf.keras.backend.clear_session()\n\nmodel = tf.keras.models.load_model(MODEL_PATHS[0])\nmodel.summary()","c3a5b2f6":"IMAGE_SIZE = 380\nBATCH_SIZE = 1\nAUTOTUNE = tf.data.experimental.AUTOTUNE\nCLASS_NUMS = 5\n\nTEST_DIR = '..\/input\/cassava-leaf-disease-classification\/test_images\/'\ntest_images = os.listdir(TEST_DIR)","9997dee3":"image_paths = [os.path.join(TEST_DIR, img_path) for img_path in test_images]\n\nprint(image_paths)","062186bb":"def decode_image(img_path):\n    img = tf.io.read_file(img_path)\n    img = tf.image.decode_jpeg(img)\n    img = tf.cast(img, tf.float32) \/ 255.0\n    img = tf.image.resize(img, (IMAGE_SIZE,IMAGE_SIZE))\n    \n    return img\n\ndef get_dataloader():\n    testloader = tf.data.Dataset.from_tensor_slices((image_paths)).map(decode_image, num_parallel_calls=AUTOTUNE).batch(BATCH_SIZE).prefetch(AUTOTUNE)\n    \n    return testloader","4b14c12e":"testloader = get_dataloader()\n\nimg = next(iter(testloader))\nprint(img.shape)\nplt.imshow(img[0]);","541a4d75":"test_size = len(image_paths)\ntest_preds = np.zeros((test_size, CLASS_NUMS))\n\nfor model_path in MODEL_PATHS:\n    print(f'Loading model from: {model_path}')\n    \n    # Load trained model\n    tf.keras.backend.clear_session()\n    model = tf.keras.models.load_model(model_path)\n    \n    # Get dataloader\n    testloader = get_dataloader()\n    \n    # Perform inference\n    predictions = []\n    preds = model.predict(testloader)\n    predictions.extend(preds)\n\n    test_preds += np.array(predictions) \/ len(MODEL_PATHS)\n    \nfinal_test_preds = np.argmax(test_preds, axis=-1)","62dc2f00":"final_test_preds","a98e7c02":"sub = pd.DataFrame({'image_id': test_images, 'label': final_test_preds})\ndisplay(sub)\nsub.to_csv('submission.csv', index = False)","5b7463ac":"[Check out this notebook](https:\/\/www.kaggle.com\/ayuraj\/baseline-efficientnet-using-tf-and-w-b) which is used to train the model. I am continuously working to improve the score.\n\nThis notebook will be used to run inference and create the `sample_submission.csv` file."}}