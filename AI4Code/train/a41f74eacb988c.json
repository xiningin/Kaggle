{"cell_type":{"c701ffb6":"code","e6f7d839":"code","775f838c":"code","1ecbda0c":"code","5596fd86":"code","bd26f0c4":"code","1866e043":"code","20c6ee04":"code","b661c6a8":"code","c3444d25":"code","ca4bd6c9":"code","e5b93944":"code","6e54ae71":"code","8fec9079":"code","edb7a8e9":"markdown","82bccbf4":"markdown","24de936f":"markdown","00d764ca":"markdown","e43073ae":"markdown","efae1ac0":"markdown","d84b3ccf":"markdown","684b5c22":"markdown"},"source":{"c701ffb6":"import numpy as np \nimport pandas as pd\nimport matplotlib\nimport seaborn as sns\n\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn.metrics import mean_squared_log_error\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.compose import TransformedTargetRegressor","e6f7d839":"# Matplotlib settings\nmatplotlib.rc(\"axes.spines\", right=False, top=False)\nmatplotlib.rc(\"figure\", figsize=(12, 12))\nmatplotlib.rc(\"font\", family=\"serif\")\n\n# Ignore non-critical warnings\nimport warnings\nwarnings.simplefilter(\"ignore\")","775f838c":"file_path = \"\/kaggle\/input\/tabular-playground-series-jul-2021\/\"\ntrain = pd.read_csv(f\"{file_path}train.csv\", index_col=\"date_time\")\ntest = pd.read_csv(f\"{file_path}test.csv\", index_col=\"date_time\")\nsample_submission = pd.read_csv(f\"{file_path}sample_submission.csv\", index_col=\"date_time\")","1ecbda0c":"train.head()","5596fd86":"test.head()","bd26f0c4":"train.isnull().sum()","1866e043":"test.isnull().sum()","20c6ee04":"_ = train.hist(bins=20)","b661c6a8":"_ = train.plot(kind=\"box\", layout=(3, 4), subplots=True)","c3444d25":"_ = sns.heatmap(train.corr(), annot=True, center=0, cmap=\"coolwarm\", square=True)","ca4bd6c9":"X = train.iloc[:, :-3]\ny = train.iloc[:, -3:]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=4)","e5b93944":"def fit_and_score_model(estimator, params):\n    \"\"\"Search for optimum hyper-parameters of the given estimator from the\n    supplied params.\n\n    Parameters\n    ----------\n    estimator : estimator object\n        An estimator object implementing \"fit\" and \"predict\".\n    params : dict\n        Parameter distributions.\n\n    Returns\n    -------\n    An estimator object with the hyper-parameters that yielded the best score.\n    \"\"\"\n    model_search = GridSearchCV(\n        estimator,\n        param_grid=params,\n        scoring=\"neg_mean_squared_log_error\",\n        cv=4,\n        n_jobs=4\n    )\n    # Apply a log tranformation on target variables to counteract skewness\n    model = TransformedTargetRegressor(\n        regressor=model_search, func=np.log1p, inverse_func=np.expm1\n    )\n    model.fit(X_train, y_train)\n    test_score = mean_squared_log_error(model.predict(X_test), y_test)\n\n    print(f\"Best Score: {model.regressor_.best_score_}\")\n    print(f\"Test Score: {test_score}\")\n    print(f\"Best Params: {model.regressor_.best_params_}\")\n\n    return model\n\n\n# # Un-comment the below code to perform a grid-search for hyper-parameters.\n# # Be warned: it can take quite a long time.\n#\n# et = ExtraTreesRegressor(random_state=3)\n# params = dict(\n#     n_estimators=range(100, 1001, 100),\n#     criterion=[\"mae\", \"mse\"],\n#     max_depth=[None, 3, 5, 7],\n#     min_samples_split=[2, 5, 0.001]\n# )\n# et_model = fit_and_score_model(et, params)\n# et_predictions = et_model.predict(test)\n# et_predictions[:5]","6e54ae71":"# Apply a log transformation when fitting to counteract skewness\net_model = TransformedTargetRegressor(\n    regressor=ExtraTreesRegressor(\n        n_estimators=1000, criterion=\"mae\", min_samples_split=0.001, n_jobs=4\n    ),\n    func=np.log1p,\n    inverse_func=np.expm1\n)\net_model.fit(X_train, y_train)\n\nprint(f\"\"\"\\\nTrain score: {mean_squared_log_error(et_model.predict(X_train), y_train)}\nTest score: {mean_squared_log_error(et_model.predict(X_test), y_test)}\n\"\"\")\net_predictions = et_model.predict(test)\net_predictions[:5]","8fec9079":"# Create submission file\nsample_submission.iloc[:, :] = et_predictions\nsample_submission.to_csv(\"submission.csv\")","edb7a8e9":"### 1.2 Histograms","82bccbf4":"# 1. Basic Exploratory Data Analysis\n\n### 1.1 Check for missing values","24de936f":"# 2. Modelling & Prediction","00d764ca":"### 1.4 Correlation matrix","e43073ae":"## 1.3 Box-plots","efae1ac0":"The sensors exhibit relatively high correlation among themselves.","d84b3ccf":"Most of the *independent variables (predictors)* are **relatively normally distributed**, which is good.\n\nThe *target variables (dependent variables)* appear **skewed to the right**. This can be counteracted using *tranformations* e.g. finding their *logarithms* or *square-roots*.","684b5c22":"Majority of the *sensor-data* and the *target variables* have **numerous outliers**. This is not surprising, considering that these variables exhibit skewness."}}