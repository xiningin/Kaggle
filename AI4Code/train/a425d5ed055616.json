{"cell_type":{"272d38c3":"code","f3d4bf40":"code","f0d29be0":"code","e79bb8fe":"code","c2388e40":"code","4115ee83":"code","81c27839":"code","fbeabd87":"code","115f7850":"code","cb8a7ab4":"code","a75ecbee":"code","3cd001b5":"code","f7116314":"code","16e0c0e9":"code","42c2c9fd":"code","433e7663":"code","61307700":"code","768d0774":"code","fa7db76a":"code","f616297a":"code","238cbd3a":"code","c7b623d9":"code","ddc310d8":"code","98c834e6":"code","2543dd72":"code","067dc0ca":"code","8c4cec9f":"code","c195dfbb":"code","450e01ff":"code","c062a9d0":"code","1bea0802":"markdown","a837271e":"markdown","a7d237f8":"markdown","7ee6085b":"markdown","daff67a8":"markdown","b6d53db5":"markdown"},"source":{"272d38c3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport umap\nimport sklearn as sk\nfrom scipy.sparse.linalg import svds\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegression, LinearRegression\nimport seaborn as sns\nfrom sklearn.manifold import TSNE\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import GridSearchCV, StratifiedKFold\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfileNames = []\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        fileNames.append(str(os.path.join(dirname, filename)))\nprint(fileNames)\n\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f3d4bf40":"train_data = pd.read_csv(fileNames[0],header = 0)#, index_col=\"PassengerId\")","f0d29be0":"train_data.drop(columns=\"Cabin\", inplace=True) \ntrain_data.drop(columns=\"Name\", inplace = True) \ntrain_data[\"Ticket\"]= train_data[\"Ticket\"].replace(\"LINE\",\"300000\") #the people with LINE are in 3rd class\ntrain_data[\"Ticket\"]= train_data[\"Ticket\"].apply(lambda x:''.join(filter(str.isdigit, x))).astype(int) #remove characters\ntrain_data[\"Sex\"]= train_data[\"Sex\"].apply(lambda x : 1 if x == \"male\" else 0) #binary values for males and females\n\n#train_data.dropna(inplace=True)\n#train_data[\"Embarked\"].fillna('None',inplace=True)\nenc = OneHotEncoder(handle_unknown='ignore')\nenc_df = pd.DataFrame(enc.fit_transform(train_data[['Embarked']]).toarray())\nenc_df.columns=[\"EM0\",\"EM1\",\"EM2\",\"EM3\"]\nfor i in enc_df.columns:\n    print(enc_df[i].sum())\nprint(train_data.isnull().sum())\ntrain_data = train_data.join(enc_df)\ntrain_data.drop(columns=\"EM3\", inplace=True) ","e79bb8fe":"\ntrain_data.isnull().sum()","c2388e40":"train_data.dropna(inplace=True)\ntrain_data","4115ee83":"train_data.describe()","81c27839":"train_data.corr()","fbeabd87":"f,ax = plt.subplots(figsize=(10,8))\nsns.heatmap(train_data.corr(), annot=True,ax=ax,fmt='.1f',cmap='plasma')\nplt.show()","115f7850":"train_data[[\"Fare\",\"Survived\"]].groupby([\"Fare\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","cb8a7ab4":"g = sns.FacetGrid(train_data, col = \"Survived\")\ng.map(sns.histplot, \"Fare\", bins = 25)\nplt.show()","a75ecbee":"train_data[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","3cd001b5":"fig = plt.subplots()\nsns.countplot(x='Pclass',hue='Survived',data=train_data)\nplt.show()\nfig1 = plt.figure()\nsns.countplot(x='Survived',hue='Pclass',data=train_data)\nplt.show()","f7116314":"train_data[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","16e0c0e9":"train_data[[\"Age\",\"Survived\"]].groupby([\"Age\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","42c2c9fd":"g = sns.FacetGrid(train_data, col = \"Survived\")\ng.map(sns.histplot, \"Age\", bins = 25)\nplt.show()","433e7663":"train_data[[\"Sex\",\"Age\",\"Survived\"]].groupby([\"Sex\",\"Age\"], as_index=False).mean().sort_values(by=\"Survived\",ascending=False)","61307700":"g = sns.FacetGrid(train_data, col = \"Survived\", row = \"Sex\")\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","768d0774":"fig1 = plt.subplots()\nsns.countplot(x='Survived',hue='Sex',data=train_data)\nplt.show()","fa7db76a":"fig = plt.subplots()\nsns.barplot(data=train_data, x='Age', y='SibSp', hue ='Survived')\nplt.show()","f616297a":"numeric = train_data.loc[: , [\"Survived\",\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"Embarked\"]]\nsns.pairplot(numeric, hue='Survived')\nplt.show()","238cbd3a":"#cut_data = train_data.loc[: , [\"Survived\",\"Pclass\",\"Sex\",\"Age\",\"SibSp\",\"EM0\",\"EM1\",\"EM2\"]]\ncut_data = train_data.loc[: , [\"Survived\",\"Pclass\",\"Sex\",\"SibSp\",\"EM0\",\"EM1\",\"EM2\"]]\ncut_data","c7b623d9":"cut_labels = cut_data[\"Survived\"]\ncut_data = cut_data.drop(columns=\"Survived\")\n\n#print(cut_data)\n#print(cut_labels)\nXTrain = cut_data.to_numpy()\n#print(XTrain)\nscaler = StandardScaler()\nprint(scaler.fit(XTrain))\nprint(scaler.mean_)\nXTrain = scaler.transform(XTrain)\nyTrain = cut_labels.to_numpy()\nprint(XTrain)","ddc310d8":"standard_embedding = umap.UMAP(random_state=42).fit_transform(XTrain)\nfig1 = plt.figure(figsize=(10,8))\nsns.set(style='white', rc={'figure.figsize':(10,8)})\nplt.scatter(standard_embedding[:, 0], standard_embedding[:, 1],\n s=0.1, cmap='Spectral', c = yTrain)\nplt.show()","98c834e6":"X_embedded = TSNE(n_components=2).fit_transform(XTrain)\nprint(X_embedded.shape)\nfig2 = plt.figure(figsize=(10,8))\nplt.scatter(X_embedded[:, 0], X_embedded[:, 1],\n s=0.1, cmap='Spectral', c = yTrain)\nplt.show()","2543dd72":"logreg = LogisticRegression()\nlogreg.fit(XTrain, yTrain)\nacc_log_train = round(logreg.score(XTrain, yTrain)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_log_train))","067dc0ca":"linreg = LinearRegression()\nlinreg.fit(XTrain, yTrain)\nacc_lin_train = round(linreg.score(XTrain, yTrain)*100,2)\nprint(\"Training Accuracy: % {}\".format(acc_lin_train))","8c4cec9f":"from sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import ShuffleSplit\n\n#uses KFold or StratifiedKFold strategies by default, trying shuffle split\nscores = cross_val_score(logreg, XTrain, yTrain, cv=ShuffleSplit(n_splits=10, test_size=0.3, random_state=0))\nprint(\"Log Scores: \",scores)\nprint(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))\nprint()\nscores = cross_val_score(linreg, XTrain, yTrain, cv=ShuffleSplit(n_splits=10, test_size=0.3, random_state=0))\nprint(\"Lin Scores: \",scores)\nprint(\"%0.2f accuracy with a standard deviation of %0.2f\" % (scores.mean(), scores.std()))","c195dfbb":"param_grid = {'C':  np.logspace(-4, 4, XTrain.shape[1]),\n              \"penalty\": [\"l2\"]}\n\nlogSearch = GridSearchCV(LogisticRegression(), param_grid,scoring = \"accuracy\",cv = StratifiedKFold(n_splits = 100))\nlogSearch.fit(XTrain,yTrain)\nprint(logSearch.best_score_)\nlogSearch.score(XTrain,yTrain)","450e01ff":"test_data = pd.read_csv(fileNames[1],header = 0)#, index_col=\"PassengerId\")\ngs = pd.read_csv(fileNames[2],header = 0)\ntest_data[\"Survived\"] = gs[\"Survived\"]\ntest_data.drop(columns=\"Cabin\", inplace=True) \ntest_data.drop(columns=\"Name\", inplace = True) \ntest_data[\"Ticket\"]= test_data[\"Ticket\"].replace(\"LINE\",\"300000\") #the people with LINE are in 3rd class\ntest_data[\"Ticket\"]= test_data[\"Ticket\"].apply(lambda x:''.join(filter(str.isdigit, x))).astype(int) #remove characters\ntest_data[\"Sex\"]= test_data[\"Sex\"].apply(lambda x : 1 if x == \"male\" else 0) #binary values for males and females\n\n#test_data[\"Embarked\"].fillna('None',inplace=True)\nenc = OneHotEncoder(handle_unknown='ignore')\nenc_df = pd.DataFrame(enc.fit_transform(test_data[['Embarked']]).toarray())\nenc_df.columns=[\"EM0\",\"EM1\",\"EM2\"]\ntest_data = test_data.join(enc_df)\n\nprint(test_data.columns[test_data.isnull().any()])\n#test_data.dropna(inplace=True)\n\ncut_data = test_data.loc[: , [\"Survived\",\"Pclass\",\"Sex\",\"SibSp\",\"EM0\",\"EM1\",\"EM2\"]]\n\ncut_labels = cut_data[\"Survived\"]\ncut_data = cut_data.drop(columns=\"Survived\")\n\n#print(cut_labels)\nXTest = cut_data.to_numpy()\nscaler = StandardScaler()\nprint(scaler.fit(XTest))\nprint(scaler.mean_)\nXTest = scaler.transform(XTest)\nyTest = cut_labels.to_numpy()\nprint(XTest.shape)","c062a9d0":"from sklearn.metrics import accuracy_score\nlogSearch.score(XTest,yTest)\nsub = gs.copy()\nsub.drop(columns=\"Survived\",inplace=True)\nprint(accuracy_score(logSearch.predict(XTest),yTest))\nsub[\"Survived\"] =  logSearch.predict(XTest)\nprint(sub)\nsub.to_csv(\"mySubmission.csv\",index=False)","1bea0802":"## Turn into NumPy\n* Normalize data","a837271e":"checking left over nulls","a7d237f8":"dropping and altering data for learning","7ee6085b":"# Data Editing","daff67a8":"# Just some Citations:\n* https:\/\/www.kaggle.com\/sinanenocak\/my-titanic-competition-attempt\n* https:\/\/towardsdatascience.com\/a-beginners-guide-to-data-visualization-with-python-49f1d257c781\n* https:\/\/towardsdatascience.com\/logistic-regression-using-python-sklearn-numpy-mnist-handwriting-recognition-matplotlib-a6b31e2b166a\n* https:\/\/towardsdatascience.com\/cross-validation-in-machine-learning-72924a69872f\n* https:\/\/scikit-learn.org\/stable\/modules\/cross_validation.html\n*  https:\/\/machinelearningmastery.com\/hyperparameters-for-classification-machine-learning-algorithms\/\n* https:\/\/scikit-learn.org\/stable\/modules\/grid_search.html\n* https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression\n* https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.StratifiedKFold.html?highlight=stratifiedkfold#sklearn.model_selection.StratifiedKFold","b6d53db5":"## Cut Down Data"}}