{"cell_type":{"55682a3f":"code","bc376491":"code","f35e41ce":"code","feecb2e3":"code","acf7b1f3":"code","48e98dd1":"code","4f62e8ef":"code","a53193bd":"code","4e8412c0":"code","2d00156a":"code","eb1bb495":"code","05a5e680":"code","e3027466":"code","a645e391":"code","e1a742c5":"code","ad59b714":"code","59f78242":"code","e29cffa1":"code","59ac14fb":"markdown"},"source":{"55682a3f":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom datetime import datetime\nimport matplotlib.pyplot as plt\nimport sys\n%matplotlib inline\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","bc376491":"raw_data = pd.read_json('\/kaggle\/input\/wallstreetbets-subreddit-submissions\/wallstreetbets_submission.json', lines=True)","f35e41ce":"for i in range(len(raw_data.columns)):\n    print(raw_data.columns[i])","feecb2e3":"# we want selftext from all DD posts\n# the 'link_flair_css_class' is what we're looking for\nraw_data['link_flair_css_class'].unique()","acf7b1f3":"raw_data['link_flair_css_class'].isin(['dd']).sum()\n# There are 18011 DD posts","48e98dd1":"# Let's filter for DD and see how many there are as a function of time\ndd_posts = raw_data[raw_data['link_flair_css_class'].isin(['dd'])]","4f62e8ef":"# let's remove the rest to clear up some memory\ndel(raw_data)","a53193bd":"# 'created_utc' will give us a timestamp, which we can convert from unix time to a datetime\ndd_posts['timestamp'] = pd.to_datetime(dd_posts['created_utc'].map(lambda x: datetime.fromtimestamp(x).strftime('%Y-%m-%d %H:%M:%S')))","4e8412c0":"dd_posts['timestamp'].groupby(dd_posts.timestamp.dt.to_period(\"M\")).agg('count').plot()\nplt.ylabel('Number of DD posts')\nplt.xlabel('Month')\n\n# There was a lot of action around the March crash, unsurprisingly","2d00156a":"text = dd_posts['selftext'].str.cat(sep=\" \")[-500000:] # take last 500 thousand characters\nprint('text length:', len(text))\n# 13 million characters\n\nchars = sorted(list(set(text)))\nprint('total chars: ', len(chars))\n# 416 unique characters\n\nchar_indices = dict((c, i) for i, c in enumerate(chars))\nindices_char = dict((i, c) for i, c in enumerate(chars))","eb1bb495":"maxlen = 40\nstep = 3\nsentences = []\nnext_chars = []\nfor i in range(0, len(text) - maxlen, step):\n    sentences.append(text[i: i + maxlen])\n    next_chars.append(text[i + maxlen])\nx = np.zeros((len(sentences), maxlen, len(chars)), dtype=np.bool)\ny = np.zeros((len(sentences), len(chars)), dtype=np.bool)\nfor i, sentence in enumerate(sentences):\n    for t, char in enumerate(sentence):\n        x[i, t, char_indices[char]] = 1\n    y[i, char_indices[next_chars[i]]] = 1","05a5e680":"from keras.models import Sequential\nfrom keras.layers import Dense, Activation\nfrom keras.layers import LSTM\nfrom keras.optimizers import RMSprop\nfrom tensorflow.keras.callbacks import LambdaCallback\nmodel = Sequential()\nmodel.add(LSTM(128, input_shape=(maxlen, len(chars))))\nmodel.add(Dense(len(chars)))\nmodel.add(Activation('softmax'))\noptimizer = RMSprop(lr=0.01)\nmodel.compile(loss='categorical_crossentropy', optimizer=optimizer)","e3027466":"def sample(preds, temperature=1.0):\n    # helper function to sample an index from a probability array\n    preds = np.asarray(preds).astype('float64')\n    preds = np.log(preds) \/ temperature\n    exp_preds = np.exp(preds)\n    preds = exp_preds \/ np.sum(exp_preds)\n    probas = np.random.multinomial(1, preds, 1)\n    return np.argmax(probas)\n\ndef on_epoch_end(epoch, logs):\n    # Function invoked at end of each epoch. Prints generated text.\n    print()\n    print('----- Generating text after Epoch: %d' % epoch)\n\n    start_index = np.random.randint(0, len(text) - maxlen - 1)\n    for diversity in [0.2, 0.5, 1.0, 1.2]:\n        print('----- diversity:', diversity)\n\n        generated = ''\n        sentence = text[start_index: start_index + maxlen]\n        generated += sentence\n        print('----- Generating with seed: \"' + sentence + '\"')\n        sys.stdout.write(generated)\n\n        for i in range(400):\n            x_pred = np.zeros((1, maxlen, len(chars)))\n            for t, char in enumerate(sentence):\n                x_pred[0, t, char_indices[char]] = 1.\n\n            preds = model.predict(x_pred, verbose=0)[0]\n            next_index = sample(preds, diversity)\n            next_char = indices_char[next_index]\n\n            generated += next_char\n            sentence = sentence[1:] + next_char\n\n            sys.stdout.write(next_char)\n            sys.stdout.flush()\n        print()\nprint_callback = LambdaCallback(on_epoch_end=on_epoch_end)","a645e391":"from keras.callbacks import ModelCheckpoint\n\nfilepath = \"weights.hdf5\"\ncheckpoint = ModelCheckpoint(filepath, monitor='loss',\n                             verbose=1, save_best_only=True,\n                             mode='min')","e1a742c5":"from keras.callbacks import ReduceLROnPlateau\nreduce_lr = ReduceLROnPlateau(monitor='loss', factor=0.2,\n                              patience=1, min_lr=0.001)\ncallbacks = [print_callback, checkpoint, reduce_lr]","ad59b714":"model.fit(x, y, batch_size=128, epochs=5, callbacks=callbacks)","59f78242":"def generate_text(length, diversity):\n    # Get random starting text\n    start_index = np.random.randint(0, len(text) - maxlen - 1)\n    generated = ''\n    sentence = text[start_index: start_index + maxlen]\n    generated += sentence\n    for i in range(length):\n            x_pred = np.zeros((1, maxlen, len(chars)))\n            for t, char in enumerate(sentence):\n                x_pred[0, t, char_indices[char]] = 1.\n\n            preds = model.predict(x_pred, verbose=0)[0]\n            next_index = sample(preds, diversity)\n            next_char = indices_char[next_index]\n\n            generated += next_char\n            sentence = sentence[1:] + next_char\n    return generated","e29cffa1":"generate_text(100, diversity=0.4)\n# It's largely gibberish right now, so we should try a more complex model and probably limit it to a smaller subset of characters","59ac14fb":"A simple exploratory analysis project to try to make wallstreetbets-like DD posts using a recurrent neural network. It's pretty easy to generate text using an RNN, but much more difficult to generate any meaningful text. I built a simple model motivated by the instructions in https:\/\/towardsdatascience.com\/generating-text-using-a-recurrent-neural-network-1c3bfee27a5e"}}