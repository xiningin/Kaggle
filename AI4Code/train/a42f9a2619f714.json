{"cell_type":{"f9b87301":"code","da3aa204":"code","9cc7db93":"code","431aba55":"code","131f13b8":"code","a4f39698":"code","81c37d2c":"code","16708ffd":"markdown","fa296eba":"markdown","c7df9785":"markdown","05c07c85":"markdown","b6c2c016":"markdown","8ab87ba9":"markdown","9f9eb190":"markdown","11367f94":"markdown","c0f88934":"markdown","cf9b4366":"markdown","97ac615d":"markdown"},"source":{"f9b87301":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport calendar\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt   \nfrom matplotlib.pyplot import pie\nfrom matplotlib import gridspec\nimport matplotlib.ticker as mtick\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","da3aa204":"# Ethereum Data\n\nCSV = '\/kaggle\/input\/ethereum-data\/ETH-USD.csv'\n\ndf = pd.read_csv(CSV)\ndf = df.drop(columns=['Adj Close']) # identical with column 'Close'\ndf['Date'] = pd.to_datetime(df['Date'])\n\ndf['Year'] = df['Date'].dt.year\ndf['Month_Num'] = df['Date'].dt.month\ndf['Month'] = df['Month_Num'].apply(lambda x: calendar.month_abbr[x])\n\ndf['YYYYMM'] = pd.to_datetime(df['Date'], format='%Y%m', errors='coerce')\ndf['YYYYMM'] = pd.to_datetime(df['Date']).dt.strftime('%Y%m')\n\ndf['Close_log'] = np.log(df['Close'])\n\ndf['Return'] = df['Close'] \/ df['Open'][0] -1\n","9cc7db93":"df_hm = pd.pivot_table(df, values=\"Volume\", index=['Year', 'Month_Num'], aggfunc=np.sum)\ndf_hm.reset_index(level=0, inplace=True)\ndf_hm.reset_index(level=0, inplace=True)\ndf_hm['Date'] = pd.to_datetime((df_hm.Year*100+df_hm.Month_Num).apply(str),format='%Y%m').dt.strftime('%Y%m')\ndf_hm['Volume_log'] = np.log(df_hm['Volume'])\n\nfig = plt.figure(figsize=(12,10))\n\nfig.tight_layout() \nfig.subplots_adjust(hspace=.4)\n\nfig.patch.set_facecolor('#F3F7FF')\nfig.patch.set_alpha(1.0)\n\nax1 = plt.subplot(2,1,1)\nax1 = sns.lineplot(data=df, x=\"Date\", y=\"Close\", color=\"dodgerblue\")\n\nax1.patch.set_facecolor('#F3F7FF')\nax1.patch.set_alpha(1.0)\n\nax1 = plt.gca().spines['right'].set_visible(False)\nax1 = plt.gca().spines['top'].set_visible(False)\nax1 = plt.gca().spines['left'].set_visible(True)\nax1 = plt.gca().spines['bottom'].set_visible(True)\n\nax1 = plt.ylabel(\"Close Price (USD)\")\n\nax1 = plt.axhline(0, 8, 0, color='black', linestyle='--', linewidth='1')\n\n\n\nax1 = plt.title('Unit: Close Price USD per 1 Ethereum\\n2015-2021', fontsize = 9, loc='right')\nax1 = plt.title('Ethereum Price',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output\n\nax2 = plt.subplot(2,1,2)\nax2 = sns.barplot(x=\"Date\", y=\"Volume\", data=df_hm, color=\"dodgerblue\")\n\nax2.patch.set_facecolor('#F3F7FF')\nax2.patch.set_alpha(1.0)\n\nax2 = plt.gca().spines['right'].set_visible(False)\nax2 = plt.gca().spines['top'].set_visible(False)\nax2 = plt.gca().spines['left'].set_visible(True)\nax2 = plt.gca().spines['bottom'].set_visible(True)\nax2 = plt.xticks([])\n\nax2 = plt.title('Unit: Ethereum Transaction Volumes\\n2015-2021', fontsize = 9, loc='right')\nax2 = plt.title('Ethereum Volumes',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output","431aba55":"fig = plt.figure(figsize=(12,10))\n\nfig.tight_layout() \nfig.subplots_adjust(hspace=.4)\n\nfig.patch.set_facecolor('#F3F7FF')\nfig.patch.set_alpha(1.0)\n\n\nax1 = plt.subplot(2,1,1)\nax1 = sns.lineplot(data=df, x=\"Date\", y=\"Close_log\", color=\"dodgerblue\")\nax1.patch.set_facecolor('#F3F7FF')\nax1.patch.set_alpha(1.0)\n\nax1 = plt.gca().spines['right'].set_visible(False)\nax1 = plt.gca().spines['top'].set_visible(False)\nax1 = plt.gca().spines['left'].set_visible(True)\nax1 = plt.gca().spines['bottom'].set_visible(True)\n\nax1 = plt.ylabel(\"Close Price (Log)\")\n\nax1 = plt.title('Unit: Close Price USD per 1 Ethereum\\n(Natural logarithm)\\n2015-2021', fontsize = 9, loc='right')\nax1 = plt.title('Ethereum Price (Log)',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output\n\nax2 = plt.subplot(2,1,2)\nax2 = sns.barplot(x=\"Date\", y=\"Volume_log\", data=df_hm, color=\"dodgerblue\")\nax2.patch.set_facecolor('#F3F7FF')\nax2.patch.set_alpha(1.0)\n\nax2 = plt.gca().spines['right'].set_visible(False)\nax2 = plt.gca().spines['top'].set_visible(False)\nax2 = plt.gca().spines['left'].set_visible(True)\nax2 = plt.gca().spines['bottom'].set_visible(True)\nax2 = plt.xticks([])\n\nax2 = plt.ylabel(\"Volomes (Log)\")\n\nax2 = plt.title('Unit: Ethereum Transaction\\n(Natural logarithm)\\n2015-2021', fontsize = 9, loc='right')\nax2 = plt.title('Ethereum Volumes (Log)',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output","131f13b8":"fig = plt.figure(figsize=(12,5))\n\nfig.patch.set_facecolor('#F3F7FF')\nfig.patch.set_alpha(1.0)\n\n\nax1 = sns.lineplot(data=df, x=\"Date\", y=\"Return\", color=\"dodgerblue\")\n\nvals = ax1.get_yticks()\nax1.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\n\nax1.patch.set_facecolor('#F3F7FF')\nax1.patch.set_alpha(1.0)\n\n\nax1 = plt.gca().spines['right'].set_visible(False)\nax1 = plt.gca().spines['top'].set_visible(False)\nax1 = plt.gca().spines['left'].set_visible(True)\nax1 = plt.gca().spines['bottom'].set_visible(True)\n\nax1 = plt.ylabel(\"Return(%)\")\n\n\nax1 = plt.axhline(0, 8, 0, color='black', linestyle='--', linewidth='1')\n\nax1 = plt.title('Unit: Accumlated Return%\\n2015-2021', fontsize = 9, loc='right')\nax1 = plt.title('Ethereum Return%',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output","a4f39698":"df2016 = df[df['Year']==2016]\ndf2016 = df2016.drop(columns=['Return'])\ndf2016.reset_index(level=0, inplace=True, drop = True)\ndf2016['Return'] = df2016['Close'] \/ df2016['Open'][0] -1\ndf2016 = df2016.drop([59]) # leap year\ndf2016.reset_index(level=0, inplace=True, drop = True)\ndf2016.reset_index(level=0, inplace=True, drop = False)\ndf2016.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2016['Days365'] = df2016['Days365']+1\ndf2016['Hue'] = 2016\ndf2016 = df2016[['Days365','Return','Hue']] \n\ndf2017 = df[df['Year']==2017]\ndf2017 = df2017.drop(columns=['Return'])\ndf2017.reset_index(level=0, inplace=True, drop = True)\ndf2017['Return'] = df2017['Close'] \/ df2017['Open'][0] -1\ndf2017.reset_index(level=0, inplace=True, drop = False)\ndf2017.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2017['Days365'] = df2017['Days365']+1\ndf2017['Hue'] = 2017\ndf2017 = df2017[['Days365','Return','Hue']] \n\ndf2018 = df[df['Year']==2018]\ndf2018 = df2018.drop(columns=['Return'])\ndf2018.reset_index(level=0, inplace=True, drop = True)\ndf2018['Return'] = df2018['Close'] \/ df2018['Open'][0] -1\ndf2018.reset_index(level=0, inplace=True, drop = False)\ndf2018.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2018['Days365'] = df2018['Days365']+1\ndf2018['Hue'] = 2018\ndf2018 = df2018[['Days365','Return','Hue']] \n\ndf2019 = df[df['Year']==2019]\ndf2019 = df2019.drop(columns=['Return'])\ndf2019.reset_index(level=0, inplace=True, drop = True)\ndf2019['Return'] = df2019['Close'] \/ df2019['Open'][0] -1\ndf2019.reset_index(level=0, inplace=True, drop = False)\ndf2019.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2019['Days365'] = df2019['Days365']+1\ndf2019['Hue'] = 2019\ndf2019 = df2019[['Days365','Return','Hue']] \n\ndf2020 = df[df['Year']==2020]\ndf2020 = df2020.drop(columns=['Return'])\ndf2020.reset_index(level=0, inplace=True, drop = True)\ndf2020['Return'] = df2020['Close'] \/ df2020['Open'][0] -1\ndf2020 = df2020.drop([59]) # leap year\ndf2020.reset_index(level=0, inplace=True, drop = True)\ndf2020.reset_index(level=0, inplace=True, drop = False)\ndf2020.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2020['Days365'] = df2020['Days365']+1\ndf2020['Hue'] = 2020\ndf2020 = df2020[['Days365','Return','Hue']] \n\ndf2021 = df[df['Year']==2021]\ndf2021 = df2021.drop(columns=['Return'])\ndf2021.reset_index(level=0, inplace=True, drop = True)\ndf2021['Return'] = df2021['Close'] \/ df2021['Open'][0] -1\ndf2021.reset_index(level=0, inplace=True, drop = False)\ndf2021.rename(columns = {'index' : 'Days365'}, inplace = True)\ndf2021['Days365'] = df2021['Days365']+1\ndf2021['Hue'] = 2021\ndf2021 = df2021[['Days365','Return','Hue']] \n\ndf_RTN = pd.concat([df2016,df2017,df2018,df2019,df2020,df2021])\n\nfig = plt.figure(figsize=(12,5))\n\nfig.patch.set_facecolor('#F3F7FF')\nfig.patch.set_alpha(1.0)\n\nax1 = sns.lineplot(data=df_RTN, x=\"Days365\", y=\"Return\", hue=\"Hue\", palette=\"Blues\")\nvals = ax1.get_yticks()\nax1.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\n\nax1.patch.set_facecolor('#F3F7FF')\nax1.patch.set_alpha(1.0)\n\nax1 = plt.gca().spines['right'].set_visible(False)\nax1 = plt.gca().spines['top'].set_visible(False)\nax1 = plt.gca().spines['left'].set_visible(True)\nax1 = plt.gca().spines['bottom'].set_visible(True)\n\nax1 = plt.ylabel(\"Return(%)\")\n\nax1 = plt.axhline(0, 8, 0, color='black', linestyle='--', linewidth='1')\n\nax1 = plt.title('Unit: Return%\\n2015-2021', fontsize = 9, loc='right')\nax1 = plt.title('Ethereum Annual Return% from Jan 1st',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output","81c37d2c":"df_dist1 = df[:]\ndf_dist1['Join Date'] = (df_dist1['Date'] - pd.DateOffset(months=3))\n\ndf_dist2 = df[:]\ndf_dist2.rename(columns = {\"Date\": \"Join Date\", \"Close\": \"Close 3M\"}, inplace=True)\n\ndf_dist = pd.merge(left=df_dist1, right=df_dist2, how='left', on=['Join Date'], sort=False)\ndf_dist['3 Months Return'] = df_dist['Close'] \/ df_dist['Close 3M'] -1 \ndf_dist.rename(columns = {\"Year_x\": \"Year\"}, inplace=True)\n\nfig = plt.figure(figsize=(12,8))\n\nfig.patch.set_facecolor('#F3F7FF')\nfig.patch.set_alpha(1.0)\n\nax1 = sns.boxplot(data=df_dist, x=\"Year\", y=\"3 Months Return\", palette=\"Blues\")\n\nvals = ax1.get_yticks()\nax1.set_yticklabels(['{:,.0%}'.format(x) for x in vals])\n\nax1.patch.set_facecolor('#F3F7FF')\nax1.patch.set_alpha(1.0)\n\n\nax1 = plt.gca().spines['right'].set_visible(False)\nax1 = plt.gca().spines['top'].set_visible(False)\nax1 = plt.gca().spines['left'].set_visible(True)\nax1 = plt.gca().spines['bottom'].set_visible(True)\n\n\nax1 = plt.axhline(0, 8, 0, color='black', linestyle='--', linewidth='1')\n\n\nax1 = plt.title('Unit: Return%\\n2014-2021', fontsize = 9, loc='right')\nax1 = plt.title('Ethereum 3 Months Return%',\n          fontsize = 16,\n          fontweight = 'heavy',\n          loc='center', \n          pad=30); #semi-colon for hide text before graph output","16708ffd":"If you had owned Ethereum from the very beginning, **you would have seen a 800x return.**\n\n**If it was sold at the highest point, it would be 1400x.**","fa296eba":"I analyzed the trend more closely by taking the natural logarithm of the price and volume of Ethereum. \n\nIn this case, it was confirmed that there was a significant price increase in 2017 and 2021, which was checked the previous graph, **and also 2016 too.**\n\nTrading volume has been steadily increasing from 2015.","c7df9785":"The data preprocessing part is nothing special to comment on. ","05c07c85":"# Pre-Processing","b6c2c016":"# To Be Updated\n\nI will update about interesting story about Ethereum soon. \n\nThanks for reading my code. **Please upvote.** \ud83d\ude4f","8ab87ba9":"If you bought Doge Coin on January 1st of every year, what would the return be?\n\nFour years would not have been much fun.\n\n**While the returns in 2021 were good, 2017 was the best year for Ethereum.**","9f9eb190":"This is a return box graph assuming that you pick a random date and make an investment for 3 months.\n\nThis graph shows three things.\n1. 2017 has many outliers of returns and median also highest.\n2. On outlier perspective, 2016 was also good year for Ethereum.\n3. 2021 has 2nd highest median. ","11367f94":"<br>\n<br>\n<Center><img src=\"https:\/\/ethereum.org\/static\/28214bb68eb5445dcb063a72535bc90c\/117a6\/hero.png\"><\/Center>","c0f88934":"# Trend","cf9b4366":"# Introduction\n\n[Ethereum](https:\/\/ethereum.org\/en\/) is a cryptocurrency, after Bitcoin, it is the largest cryptocurrency by market capitalization. Ethereum, which emerged after Bitcoin, is faster and faster by further utilizing blockchain technology and supports NFTs technology. There are many parts that are shared with [my previous code about Doge coin](https:\/\/www.kaggle.com\/hidelloon\/dogecoin-and-dogefather-elon-musk), so I prepared a quick task first.\n\nThank you for creating and sharing the great dataset! [@Arpit Verma](https:\/\/www.kaggle.com\/varpit94) ","97ac615d":"It was confirmed that **the price and volumes of Dogecoin has risen significantly on 2018 and 2021.**"}}