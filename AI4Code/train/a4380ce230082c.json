{"cell_type":{"633d6727":"code","dfa1d385":"code","4b3718c7":"code","43db1a31":"code","1e68f816":"code","fcfcdf41":"code","e20d8d8f":"code","f3a2838f":"code","28ef24aa":"code","fb226b7f":"code","5f9fdf33":"code","d31fe03a":"code","779d157a":"code","99ceae8d":"code","54f4d14b":"code","23b7a2d4":"code","0f84f9a5":"markdown","b54351fd":"markdown","44bf4eba":"markdown","230063c0":"markdown","1f4710c5":"markdown","186155d9":"markdown","388012ac":"markdown","2748679a":"markdown","4d2be698":"markdown","904a5907":"markdown","3a0e0ed3":"markdown","02dcb36b":"markdown","c84b6494":"markdown","a5683ebd":"markdown","85be2be0":"markdown","dd30aef8":"markdown","d96379c8":"markdown"},"source":{"633d6727":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport pandas_profiling as pp\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","dfa1d385":"train = pd.read_csv('..\/input\/train.csv')\ntest = pd.read_csv('..\/input\/test.csv')\nall_data = [train, test]","4b3718c7":"pp.ProfileReport(train)\n","43db1a31":"print( train[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean() )","1e68f816":"print( train[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean() )","fcfcdf41":"for data in all_data:\n    data['family_size'] = data['SibSp'] + data['Parch'] + 1\nprint( train[[\"family_size\",\"Survived\"]].groupby([\"family_size\"], as_index = False).mean() )","e20d8d8f":"for data in all_data:\n    data['is_alone'] = 0\n    data.loc[data['family_size'] == 1, 'is_alone'] = 1\nprint (train[['is_alone', 'Survived']].groupby(['is_alone'], as_index=False).mean())","f3a2838f":"for data in all_data:\n    data['Embarked'] = data['Embarked'].fillna('S')\nprint( train[[\"Embarked\",\"Survived\"]].groupby([\"Embarked\"], as_index = False).mean() )\n","28ef24aa":"for data in all_data:\n    data['Fare'] = data['Fare'].fillna(data['Fare'].median())\ntrain['category_fare'] = pd.qcut(train_data['Fare'], 3)\nprint( train[[\"category_fare\",\"Survived\"]].groupby([\"category_fare\"], as_index = False).mean() )","fb226b7f":"for data in all_data:\n    age_avg  = data['Age'].mean()\n    age_std  = data['Age'].std()\n    age_null = data['Age'].isnull().sum()\n\n    random_list = np.random.randint(age_avg - age_std, age_avg + age_std , size = age_null)\n    data['Age'][np.isnan(data['Age'])] = random_list\n    data['Age'] = data['Age'].astype(int)\n\ntrain['category_age'] = pd.cut(train_data['Age'], 5)\nprint( train[[\"category_age\",\"Survived\"]].groupby([\"category_age\"], as_index = False).mean() )\n","5f9fdf33":"for data in all_data:\n    data['Situation'] = data.Name.str.extract(' ([A-Za-z]+)\\.', expand=False)\n    data['Situation'] = data['Situation'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'],'Rare')\n    data['Situation'] = data['Situation'].replace('Mlle','Miss')\n    data['Situation'] = data['Situation'].replace('Ms','Miss')\n    data['Situation'] = data['Situation'].replace('Mme','Mrs')\n    \nprint(pd.crosstab(train['Situation'], train['Sex']))\nprint(\"----------------------\")\nprint(train[['Situation','Survived']].groupby(['Situation'], as_index = False).mean())","d31fe03a":"for data in all_data:\n\n    #Mapping Sex\n    sex_map = { 'female':0 , 'male':1 }\n    data['Sex'] = data['Sex'].map(sex_map).astype(int)\n\n    #Mapping Title\n    title_map = {'Mr':1, 'Miss':2, 'Mrs':3, 'Master':4, 'Rare':5}\n    data['Situation'] = data['Situation'].map(title_map)\n    data['Situation'] = data['Situation'].fillna(0)\n\n    #Mapping Embarked\n    embark_map = {'S':0, 'C':1, 'Q':2}\n    data['Embarked'] = data['Embarked'].map(embark_map).astype(int)\n\n    #Mapping Fare\n    data.loc[ data['Fare'] <= 8.662, 'Fare']                            = 0\n    data.loc[(data['Fare'] > 8.662) & (data['Fare'] <= 26.0), 'Fare'] = 1\n    data.loc[ data['Fare'] > 26.0, 'Fare']                               = 2\n    data['Fare'] = data['Fare'].astype(int)\n\n    #Mapping Age\n    data.loc[ data['Age'] <= 26.947, 'Age']                       = 0\n    data.loc[(data['Age'] > 26.947) & (data['Age'] <= 53.473), 'Age'] = 1\n    data.loc[ data['Age'] > 53.473, 'Age']                        = 2\n","779d157a":"#Feature Selection\n#Create list of columns to drop\ndrop_elements = [\"Name\", \"Ticket\", \"Cabin\", \"SibSp\", \"Parch\", \"family_size\"]\n\n#Drop columns from both data sets\ntrain_data = train.drop(drop_elements, axis = 1)\ntrain_data = train.drop(['PassengerId','category_fare', 'category_age'], axis = 1)\ntest_data = test.drop(drop_elements, axis = 1)\n\n#Print ready to use data\nprint(train_data.head(10))\nprint(test_data)","99ceae8d":"X_train = train_data.drop(\"Survived\", axis=1)\nY_train = train_data[\"Survived\"]\nX_test  = test_data.drop(\"PassengerId\", axis=1).copy()\nX_train.shape, Y_train.shape, X_test.shape","54f4d14b":"from sklearn.ensemble import RandomForestClassifier\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, Y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, Y_train)\nacc_random_forest = round(random_forest.score(X_train, Y_train) * 100, 2)\nacc_random_forest","23b7a2d4":"#Create a CSV with results\nsubmission = pd.DataFrame({\n    \"PassengerId\": test_data[\"PassengerId\"],\n    \"Survived\": Y_pred\n})\nsubmission.to_csv('submission.csv', index = False)","0f84f9a5":"## 2.3\u200a\u2014\u200aFamily Size","b54351fd":"Certain titles mostly survived (Miss, Master) or did not (Mr).\n","44bf4eba":"## 2.4\u200a\u2014\u200aEmbarked","230063c0":"# Step 2 \u2014 Feature Engineering\n","1f4710c5":"## 2.1\u200a\u2014\u200aPassenger Class","186155d9":"Family size differs from a minimum of 1 to a maximum of 11, where the family size of 4 having the highest survival rate of 72%.","388012ac":"An alone person in this ship has less chance to survive ","2748679a":"# Step 4\u200a\u2014\u200aPrediction","4d2be698":"63% of people survived from Class 1. \n\nThe class of passenger is directly proportional to survival rate. If the importance of a person is more than others, they\u2019ll get out of the disaster first. And our data tells the same story.","904a5907":"## 2.6\u200a\u2014\u200aAge","3a0e0ed3":"## Step 3\u200a\u2014\u200aMapping Data","02dcb36b":"## 2.7\u200a\u2014\u200aName","c84b6494":"## 2.2\u200a\u2014\u200aSex","a5683ebd":"## 2.5\u200a\u2014\u200aFare","85be2be0":"Next two columns are SibSp and Parch, which are not directly related to whether a person has survived or not. That is where the idea of creating a new feature came in. ","dd30aef8":"From which place a passenger embarked has something to do with survival (not always). \n\nTo deal with the missing value, we are going to replace NAs with \u2018S\u2019 because it is the most occurred value.","d96379c8":"We can see that 74% of all females were saved and only 18% of all males were saved. \n\nSex is important and directly proportional to survival rate. Female and children were saved first during this tragedy."}}