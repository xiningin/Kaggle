{"cell_type":{"07aff617":"code","7d179772":"code","d062c86d":"code","97ca3d60":"code","c6582350":"code","f50be44c":"code","d64d2396":"code","c43b25c2":"code","069ddc4e":"code","a4df7e78":"code","3f3fb5b0":"code","0bf6a12d":"code","a8f36bc4":"code","c0c37354":"code","59a1ef48":"markdown","d74a889a":"markdown","a56d5f8d":"markdown","4a73ca00":"markdown","2d51ebb4":"markdown","4d0eb047":"markdown","8898365b":"markdown"},"source":{"07aff617":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","7d179772":"# Import TensorFlow and tf.keras\nimport tensorflow as tf\nfrom tensorflow import keras\n\n# Print TensorFlow version\nprint(tf.__version__)","d062c86d":"train = pd.read_csv(\"..\/input\/train.csv\")\nprint(\"train dataset shape is \", train.shape)\ntrain.head()\n","97ca3d60":"# All pixel values - all rows and column 1 (pixel0) to column 785 (pixel 783)\nx_train = (train.iloc[:,1:].values).astype('float32') \n# Take a look at x_train\nx_train","c6582350":"# Labels - all rows and column 0\ny_train = (train.iloc[:,0].values).astype('int32') \n\n# Take a look at y_train\ny_train","f50be44c":"test = pd.read_csv(\"..\/input\/test.csv\")\nprint(\"test dataset shape is \", test.shape)\ntest.head()","d64d2396":"x_test = test.values.astype('float32')","c43b25c2":"x_test","069ddc4e":"num_classes = 10\n\n# Normalize the input data\nx_train = x_train.astype('float32') \/ 255\nx_test = x_test.astype('float32') \/ 255\n\n# Reshape input data from (28, 28) to (28, 28, 1)\nw, h = 28, 28\nx_train = x_train.reshape(x_train.shape[0], w, h, 1)\nx_test = x_test.reshape(x_test.shape[0], w, h, 1)\n\n# One-hot encode the labels\ny_train = keras.utils.to_categorical(y_train, num_classes)\n\n# Take a look at the dataset shape after conversion with keras.utils.to_categorical\nprint(\"x_train shape:\", x_train.shape, \"y_train shape:\", y_train.shape)","a4df7e78":"model = keras.Sequential()\n\n# Must define the input shape in the first layer of the neural network\nmodel.add(keras.layers.Conv2D(filters=32, kernel_size=3, padding='same', activation='relu', input_shape=(28,28,1))) \nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(keras.layers.Dropout(0.3))\n\nmodel.add(keras.layers.Conv2D(filters=64, kernel_size=3, padding='same', activation='relu'))\nmodel.add(keras.layers.BatchNormalization())\nmodel.add(keras.layers.MaxPooling2D(pool_size=2))\nmodel.add(keras.layers.Dropout(0.3))\n\nmodel.add(keras.layers.Flatten())\nmodel.add(keras.layers.Dense(128, activation='relu'))\nmodel.add(keras.layers.Dropout(0.5))\nmodel.add(keras.layers.Dense(10, activation='softmax'))\n\n# Take a look at the model summary\nmodel.summary()","3f3fb5b0":"model.compile(loss=keras.losses.categorical_crossentropy,\n             optimizer=keras.optimizers.Adam(),\n             metrics=['accuracy'])","0bf6a12d":"model.fit(x_train,\n         y_train,\n         batch_size=64,\n         epochs=5)","a8f36bc4":"predictions = model.predict_classes(x_test, verbose=0)\n\nsubmissions=pd.DataFrame({\"ImageId\": list(range(1,len(predictions)+1)),\n                         \"Label\": predictions})\nsubmissions.to_csv(\"mnist_tfkeras.csv\", index=False, header=True)","c0c37354":"print(os.listdir(\"..\"))","59a1ef48":"**Load test dataset**","d74a889a":"**Train dataset **- split into image pixel data and labels","a56d5f8d":"# Load train and test datasets","4a73ca00":"MNIST is the \"Hello World\" of computer vision. \nIn this notebook, let's classify the MNIST digits with deap learning CNN, with tf.Keras part of the TensorFlow core API.","2d51ebb4":"### Preprocess data","4d0eb047":"**Load train dataset**","8898365b":"### Define the model architecture"}}