{"cell_type":{"5dcffcdc":"code","f2216b08":"code","143feca5":"code","06e70b53":"code","349e8b91":"code","2cb93275":"markdown","9fb964d4":"markdown"},"source":{"5dcffcdc":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport json\nfrom pandas.io.json import json_normalize\n\nimport os\nprint(os.listdir(\"..\/input\"))","f2216b08":"def load_df(csv_path='..\/input\/train.csv', nrows=None):\n    JSON_COLUMNS = ['device', 'geoNetwork', 'totals', 'trafficSource']\n    \n    df = pd.read_csv(csv_path, \n                     converters={column: json.loads for column in JSON_COLUMNS}, \n                     dtype={'fullVisitorId': 'str'}, # Important!!\n                     nrows=nrows)\n    \n    for column in JSON_COLUMNS:\n        column_as_df = json_normalize(df[column])\n        column_as_df.columns = [f\"{column}.{subcolumn}\" for subcolumn in column_as_df.columns]\n        df = df.drop(column, axis=1).merge(column_as_df, right_index=True, left_index=True)\n    print(f\"Loaded {os.path.basename(csv_path)}. Shape: {df.shape}\")\n    return df","143feca5":"%%time\ndf_train = load_df()\ndf_test = load_df(\"..\/input\/test.csv\")","06e70b53":"constant_columns = [col for col in df_train.columns if df_train[col].nunique(dropna=False)==1]\n\ndf_train.drop(columns=constant_columns,inplace=True)\ndf_test.drop(columns=constant_columns,inplace=True)","349e8b91":"%%time\ndf_train.to_csv(\"df_train.csv\", index=False)\ndf_test.to_csv(\"df_test.csv\", index=False)","2cb93275":"'device', 'geoNetwork', 'totals' and 'trafficSource' are in JSON format in training and test datasets. We'll use the function from Julian's great [kernel](https:\/\/www.kaggle.com\/julian3833\/1-quick-start-read-csv-and-flatten-json-fields\/notebook) to flatten the format.","9fb964d4":"19 columns have constant values. Removing them from the dataset."}}