{"cell_type":{"fea1aeb6":"code","177004fe":"code","a6ec06fa":"code","3e4603d8":"code","1a7fcf88":"code","9674f0c3":"code","98f4c487":"code","2fde184e":"code","f3564639":"code","792e7516":"code","360bdce0":"code","e3b202e7":"code","d117eb42":"code","65035b74":"code","b06e3594":"code","84fb633d":"code","9f10b136":"code","0faf1086":"code","4fb3a28c":"code","494cfc7c":"code","0d65ba6f":"code","a2069dd5":"code","b5a8032e":"code","6fb93f7a":"code","93325d48":"code","af1550c4":"code","f05a00ed":"code","5e91a033":"code","8ec1ef26":"code","337055fe":"code","46d6f89c":"code","93457387":"code","f9d7b202":"code","d93b4af8":"markdown","0734c4e7":"markdown","4251bbf0":"markdown","3414f214":"markdown","13368d3a":"markdown","c79c8aac":"markdown","f5bb0262":"markdown","5d28adf3":"markdown","a9e52b15":"markdown","217d6292":"markdown","c2ea40b4":"markdown","c6a111eb":"markdown","643a8870":"markdown","eebffa34":"markdown","e7bdbf47":"markdown","e3e9bbb1":"markdown","57f738a1":"markdown","23021386":"markdown","6063e037":"markdown","667727d8":"markdown","47b6e78f":"markdown","d501a5c7":"markdown","87e313e6":"markdown","e42294c2":"markdown","dc0ac01c":"markdown","00e2f644":"markdown"},"source":{"fea1aeb6":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom datetime import datetime\nimport seaborn as sns\nimport networkx as nx","177004fe":"path = '\/kaggle\/input\/coronavirusdataset\/'\npatient_data_path = path + 'PatientInfo.csv'\nroute_data_path = path + 'PatientRoute.csv'\ntime_data_path = path + 'Time.csv'\n\ndf_patient = pd.read_csv(patient_data_path)\ndf_route = pd.read_csv(route_data_path)\ndf_time = pd.read_csv(time_data_path)","a6ec06fa":"df_patient.head()","3e4603d8":"df_patient.info()","1a7fcf88":"df_patient.isna().sum()","9674f0c3":"df_patient.confirmed_date = pd.to_datetime(df_patient.confirmed_date)\ndf_patient.released_date = pd.to_datetime(df_patient.released_date)\ndf_patient.deceased_date = pd.to_datetime(df_patient.deceased_date)","98f4c487":"df_patient['time_from_confirmed_to_death'] = df_patient.deceased_date - df_patient.confirmed_date\ndf_patient['time_from_released_to_death'] = df_patient.released_date - df_patient.confirmed_date\ndf_patient['age'] = datetime.now().year - df_patient.birth_year ","2fde184e":"patient_deceased = df_patient[df_patient.state == 'deceased']\npatient_isolated = df_patient[df_patient.state == 'isolated']\npatient_released = df_patient[df_patient.state == 'released']","f3564639":"f, ax = plt.subplots(figsize=(15, 5))\nsns.countplot(y=\"sex\", data=df_patient, color=\"c\");","792e7516":"male_dead = patient_deceased[patient_deceased.sex=='male']\nfemale_dead = patient_deceased[patient_deceased.sex=='female']\nplt.figure(figsize=(15,5))\nplt.title(\"Age distribution of the deceased by gender\")\nsns.kdeplot(data=female_dead['age'], shade=True);\nsns.kdeplot(data=male_dead['age'], shade=True);","360bdce0":"f, ax = plt.subplots(figsize=(15, 5))\nsns.distplot(df_patient.birth_year, color='c');","e3b202e7":"f, ax = plt.subplots(figsize=(15, 5))\nsns.distplot(df_patient.age, color='c');","d117eb42":"df_patient.country.value_counts()","65035b74":"f, ax = plt.subplots(figsize=(15, 10))\nsns.countplot(y=\"infection_case\", data=df_patient, color=\"c\");","b06e3594":"f, ax = plt.subplots(figsize=(15, 10))\nsns.countplot(y=\"province\", data=df_patient, color=\"c\");","84fb633d":"df_patient.state.value_counts()","9f10b136":"f, ax = plt.subplots(figsize=(15, 5))\nsns.distplot(patient_deceased.age, color='c');","0faf1086":"f, ax = plt.subplots(figsize=(15, 5))\nsns.distplot(patient_isolated.age, color='c');","4fb3a28c":"f, ax = plt.subplots(figsize=(15, 5))\nsns.distplot(patient_released.age, color='c');","494cfc7c":"plt.figure(figsize=(15,5))\nplt.title('Daily confirmations')\ndf_patient.groupby('confirmed_date').patient_id.count().plot();","0d65ba6f":"plt.figure(figsize=(15,5))\nplt.title('Confirmed count')\ndf_patient.groupby('confirmed_date').patient_id.count().cumsum().plot();","a2069dd5":"data_infected_by = df_patient[df_patient.infected_by.notnull()]\n\ndef get_sex_for_patient_id(id):\n    result = df_patient[df_patient.patient_id == id].sex.values\n    return result[0] if len(result) > 0 else 'none'\n\ndef get_country_for_patient_id(id):\n    result = df_patient[df_patient.patient_id == id].country.values;\n    return result[0] if len(result) > 0 else 'none'","b5a8032e":"values = data_infected_by[['patient_id', 'infected_by']].values.astype(int)\n\nplt.figure(figsize=(20,15))\nplt.title(\"Infection network for all samples\\n blue - Korea, red - China, green - rest\")\nG1=nx.Graph()\nG1.add_edges_from(values)\nc_map =  ['c' if get_country_for_patient_id(node) == 'Korea' \n          else 'r' if get_country_for_patient_id(node) == 'China' \n          else 'g'\n          for node in G1 ]\n# without labels - too long\nnx.draw(G1,with_labels=False,node_color=c_map, width=3.0, node_size=300)","6fb93f7a":"infected_network_korea = data_infected_by[data_infected_by.country == 'Korea']\nvalues = infected_network_korea[['patient_id', 'infected_by']].values.astype(int)\n\nplt.figure(figsize=(20,15))\nplt.title(\"Infection network in Korea\\n blue - male, red - female, green - no data\")\nG1=nx.Graph()\nG1.add_edges_from(values)\nc_map =  ['c' if get_sex_for_patient_id(node) == 'male' \n          else 'r' if get_sex_for_patient_id(node) == 'female' \n          else 'g'\n          for node in G1 ]\n# without labels - too long\nnx.draw(G1,with_labels=False,node_color=c_map)","93325d48":"df_route.head()","af1550c4":"df_route.info()","f05a00ed":"f, ax = plt.subplots(figsize=(15, 10))\nsns.countplot(y=\"city\", data=df_route, color=\"c\");","5e91a033":"f, ax = plt.subplots(figsize=(15, 10))\nsns.countplot(y=\"province\", data=df_route, color=\"c\");","8ec1ef26":"f, ax = plt.subplots(figsize=(15, 5))\nsns.countplot(y=\"visit\", data=df_route, color=\"c\");","337055fe":"import folium\nsouthkorea_map = folium.Map(location=[36.55,126.983333 ], zoom_start=8,tiles='Stamen Toner')\n\nfor lat, lon in zip(df_route['latitude'], df_route['longitude']):\n    folium.CircleMarker([lat, lon],\n                        radius=5,\n                        color='red',\n                        \n                        fill_color='red',\n                        fill_opacity=0.7 ).add_to(southkorea_map)\nsouthkorea_map","46d6f89c":"df_time.head()","93457387":"df_time.info()","f9d7b202":"df_time.describe()","d93b4af8":"### Sex","0734c4e7":"## Patient\n\n**Columns**\n\n1. **patient_id** the ID of the patient\n2. **global_num** the number given by KCDC\n3. **sex** the sex of the patient\n4. **birth_year** the birth year of the patient\n5. **age** the age of the patient\n6. **country** the country of the patient\n7. **province** the province of the patient\n8. **city** the city of the patient\n9. **disease** TRUE: underlying disease \/ FALSE: no disease\n10. **infection_case** the case of infection\n11. **infection_order** the order of infection\n12. **infected_by** the ID of who infected the patient\n13. **contact_number** the number of contacts with people\n14. **symptom_onset_date** the date of symptom onset\n15. **confirmed_date** the date of being confirmed\n16. **released_date** the date of being released\n17. **deceased_date** the date of being deceased\n18. **state** isolated \/ released \/ deceased","4251bbf0":"**Columns**\n\n1. **date** YYYY-MM-DD\n2. **time** Time (0 = AM 12:00 \/ 16 = PM 04:00)\n3. **test** the accumulated number of tests\n4. **negative** the accumulated number of negative results\n5. **confirmed** the accumulated number of positive results\n6. **released** the accumulated number of releases\n7. **deceased** the accumulated number of deceases","3414f214":"### Country","13368d3a":"### Infection reason","c79c8aac":"### State","f5bb0262":"### Confirmed count","5d28adf3":"### Visit","a9e52b15":"# To be continued...","217d6292":"### Birth year","c2ea40b4":"### City","c6a111eb":"### Infection networks","643a8870":"#### Infection network for all samples","eebffa34":"# Route","e7bdbf47":"### State \/ Age","e3e9bbb1":"**Columns**\n\n\n1. **patient_id** the ID of the patient\n2. **global_num** the number given by KCDC\n3. **date** YYYY-MM-DD\n4. **province** Special City \/ Metropolitan City \/ Province(-do)\n5. **city** City(-si) \/ Country (-gun) \/ District (-gu)\n6. **latitude** the latitude of the visit (WGS84)\n7. **longitude** the longitude of the visit (WGS84)","57f738a1":"### Latitude \/ Longitude","23021386":"#### Infection network in Korea","6063e037":"### Region","667727d8":"### Daily confirmations","47b6e78f":"### Age","d501a5c7":"### Province","87e313e6":"# Datasets","e42294c2":"# Import","dc0ac01c":"## Time","00e2f644":"### Age distribution of the deceased by gender"}}