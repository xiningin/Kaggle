{"cell_type":{"f028e87e":"code","5238a55b":"code","8b149fb3":"code","3d86d5eb":"code","32b03454":"code","751ee5ab":"code","442d8228":"code","7e19630b":"code","f74e6a09":"code","2beb71ed":"code","bedd62ce":"code","45d4cc0a":"code","bcc88411":"code","0fd9af84":"code","f1c1da9d":"code","9cc16aa1":"code","59db9f6c":"code","0d375862":"code","c606e484":"code","0cb47868":"code","85c6939a":"code","32fdae81":"code","63c2842a":"code","c33ea0b2":"code","f3ff19b3":"code","c7ce9136":"code","19bbf0a4":"code","ef493506":"code","14598c32":"code","021009e8":"code","d4c2bf31":"code","e13aebe5":"code","af9951d6":"code","da876297":"code","b476dccd":"code","28bfc7f6":"code","bd325dc4":"code","b287aa51":"code","9058d6a0":"code","5d2dc30d":"code","febb067e":"code","bc3916a7":"code","d802f77a":"code","671bdf9b":"code","4e8c405a":"code","e84a93b3":"code","849a0047":"code","e799f498":"code","059d1025":"code","ddc96593":"code","ef4e5399":"code","a7404331":"code","2392e107":"code","28e72e14":"code","1334dcd0":"code","82e56b0b":"code","0b083f09":"code","a0bcb22d":"code","acf40c7c":"code","7dbfd16e":"code","bf7930a6":"code","cf34c60b":"code","a03930c5":"code","07280e05":"code","2672b50f":"code","47abc07c":"code","143b49d1":"code","54511811":"code","19700d61":"code","50eb19dd":"markdown","7982abd3":"markdown","f3ba490c":"markdown","920f8fd4":"markdown","8b104a38":"markdown","38633d0e":"markdown","d1b4c64d":"markdown","f310bf5d":"markdown","d8073e5a":"markdown","10b11196":"markdown","761816be":"markdown","0d269064":"markdown","f5cbf0a5":"markdown","8ecc34b4":"markdown","68eeefc7":"markdown","2716a4d9":"markdown","162c94a4":"markdown","07508336":"markdown","8e8763d4":"markdown","a5d37689":"markdown","f807bde8":"markdown","ae142059":"markdown","d9d1eb6a":"markdown","d4677509":"markdown","44d5c470":"markdown","4ac14c91":"markdown","b22a9e7f":"markdown","8d8e2ade":"markdown","1c30d140":"markdown","37a9d21e":"markdown","70909d20":"markdown","5d6a4ff1":"markdown","96b92dce":"markdown","9e484a33":"markdown","2e669577":"markdown","67fbcbb9":"markdown","a2d36563":"markdown","724c2526":"markdown","25d4a829":"markdown","13fe2b1e":"markdown","9d0c1ddf":"markdown"},"source":{"f028e87e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5238a55b":"df=pd.read_csv(\"\/kaggle\/input\/craigslist-carstrucks-data\/vehicles.csv\")","8b149fb3":"import seaborn as sns\nimport matplotlib.pyplot as plt\nsns.set()","3d86d5eb":"df.head()","32b03454":"df.shape","751ee5ab":"df.info()","442d8228":"r=df.columns\nfor i in r:\n    print(df[i].value_counts())","7e19630b":"df= df.drop(columns=['id','url', 'region_url', 'vin', 'image_url', 'description', 'lat', 'long','county','region'], axis=1)","f74e6a09":"df.head()","2beb71ed":"df.describe()","bedd62ce":"rr=sorted(df[\"price\"])","45d4cc0a":"quantile1, quantile3= np.percentile(rr,[10,90])","bcc88411":"print(quantile1,quantile3)","0fd9af84":"df=df[(df.price < 27500) & (df.price >= 500 )]\ndf.shape","f1c1da9d":"r=sorted(df[\"odometer\"])\nr","9cc16aa1":"df[\"odometer\"].isna().sum()","59db9f6c":"ax = sns.scatterplot(x=\"odometer\", y=\"price\", data=df)","0d375862":"df[\"odometer\"].max()","c606e484":"df.drop(df[df[\"odometer\"]==64809218.0].index,inplace=True)","0cb47868":"df.drop(df[df[\"odometer\"]==0.0].index,inplace=True)","85c6939a":"ax = sns.scatterplot(x=\"odometer\", y=\"price\", data=df)\nax.get_xaxis().get_major_formatter().set_scientific(False)\nax.get_yaxis().get_major_formatter().set_scientific(False)","32fdae81":"df[\"odometer\"].isna().sum()","63c2842a":"df=df[(df.odometer < 3000000)]","c33ea0b2":"ax = sns.scatterplot(x=\"odometer\", y=\"price\", data=df)\nax.get_xaxis().get_major_formatter().set_scientific(False)","f3ff19b3":"df[\"odometer\"].isna().sum()","c7ce9136":"df[\"year\"].isna().sum()","19bbf0a4":"df[\"year\"].min()","ef493506":"df.drop(df[df[\"year\"]==0.0].index,inplace=True)","14598c32":"df=df.dropna(subset=['year'])","021009e8":"bx = sns.scatterplot(x=\"year\", y=\"price\", data=df)","d4c2bf31":"df=df[(df.year > 1940)]","e13aebe5":"null_values=df.isnull().sum()\nnull_values=pd.DataFrame(null_values,columns=['null'])\nj=1\nsum_tot=len(df)\nnull_values['percent']=null_values['null']\/sum_tot\nround(null_values*100,3).sort_values('percent',ascending=False)","af9951d6":"df.condition.value_counts()","da876297":"excellent_odo_mean = df[df['condition'] == 'excellent']['odometer'].mean()\ngood_odo_mean = df[df['condition'] == 'good']['odometer'].mean()\nlike_new_odo_mean = df[df['condition'] == 'like new']['odometer'].mean()\nsalvage_odo_mean = df[df['condition'] == 'salvage']['odometer'].mean()\nfair_odo_mean = df[df['condition'] == 'fair']['odometer'].mean()","b476dccd":"print('Like new average odometer:', round( like_new_odo_mean,2))\nprint('Excellent average odometer:', round( excellent_odo_mean,2))\nprint('Good average odometer:', round( good_odo_mean,2))\nprint('Fair average odometer:', round( fair_odo_mean,2))\nprint('Salvage average odometer:', round( salvage_odo_mean,2))","28bfc7f6":"df.loc[df.year>=2019, 'condition'] = df.loc[df.year>=2019, 'condition'].fillna('new')","bd325dc4":"df.loc[df['odometer'] <= like_new_odo_mean, 'condition'] = df.loc[df['odometer'] <= like_new_odo_mean, 'condition'].fillna('like new')\n\ndf.loc[df['odometer'] >= fair_odo_mean, 'condition'] = df.loc[df['odometer'] >= fair_odo_mean, 'condition'].fillna('fair')\n\ndf.loc[((df['odometer'] > good_odo_mean) & \n       (df['odometer'] <= excellent_odo_mean)), 'condition'] = df.loc[((df['odometer'] > good_odo_mean) & \n       (df['odometer'] <= excellent_odo_mean)), 'condition'].fillna('excellent')\n\ndf.loc[((df['odometer'] > like_new_odo_mean) & \n       (df['odometer'] <= good_odo_mean)), 'condition'] = df.loc[((df['odometer'] > like_new_odo_mean) & \n       (df['odometer'] <= good_odo_mean)), 'condition'].fillna('good')\n\ndf.loc[((df['odometer'] > good_odo_mean) & \n       (df['odometer'] <= fair_odo_mean)), 'condition'] = df.loc[((df['odometer'] > good_odo_mean) & \n       (df['odometer'] <= fair_odo_mean)), 'condition'].fillna('salvage')","b287aa51":"null_values=df.isnull().sum()\nnull_values=pd.DataFrame(null_values,columns=['null'])\nj=1\nsum_tot=len(df)\nnull_values['percent']=null_values['null']\/sum_tot\nround(null_values*100,3).sort_values('percent',ascending=False)","9058d6a0":"df=df.dropna(subset=['title_status','fuel','transmission','model','manufacturer'])","5d2dc30d":"df=df.drop([\"size\"],axis=1)","febb067e":"null_values=df.isnull().sum()\nnull_values=pd.DataFrame(null_values,columns=['null'])\nj=1\nsum_tot=len(df)\nnull_values['percent']=null_values['null']\/sum_tot\nround(null_values*100,3).sort_values('percent',ascending=False)\n","bc3916a7":"df['paint_color'] = df['paint_color'].fillna(method='ffill')\ndf['drive'] = df['drive'].fillna(method='ffill')","d802f77a":"df['type'] = df['type'].fillna(method='ffill')\ndf['cylinders'] = df['cylinders'].fillna(method='ffill')","671bdf9b":"df.isnull().sum()","4e8c405a":"df=df.dropna(subset=['cylinders','drive'])","e84a93b3":"df.isnull().sum()","849a0047":"from scipy import stats","e799f498":"sns.pairplot(df)","059d1025":"df.info()","ddc96593":"c=df.columns\nfor i in c:\n    print(df[i].value_counts())","ef4e5399":"ax = sns.barplot(x=\"condition\", y=\"price\", data=df)","a7404331":"sns.catplot(y=\"cylinders\", x=\"price\",kind = \"violin\", data=df)","2392e107":"sns.catplot(x=\"fuel\", y=\"price\", kind=\"boxen\",\n            data=df)","28e72e14":"sns.catplot(x=\"title_status\", y=\"price\",kind=\"violin\", data=df)","1334dcd0":"sns.catplot(x=\"transmission\", y=\"price\",kind=\"bar\", palette=\"ch:.25\", data=df)","82e56b0b":"sns.violinplot(x=df.drive, y=df.price);","0b083f09":"sns.catplot(y=\"type\", x=\"price\",kind=\"boxen\", data=df);","a0bcb22d":"sns.catplot(y=\"paint_color\", x=\"price\",kind=\"violin\", data=df);","acf40c7c":"sns.catplot(y=\"manufacturer\", x=\"price\",kind=\"box\", data=df);","7dbfd16e":"from sklearn import preprocessing\nimport pandas as pd\nle = preprocessing.LabelEncoder()","bf7930a6":"df.columns","cf34c60b":"df[['manufacturer', 'model', 'condition',\n       'cylinders', 'fuel', 'title_status', 'transmission',\n       'drive', 'type', 'paint_color', 'state']]=df[['manufacturer', 'model', 'condition',\n       'cylinders', 'fuel', 'title_status', 'transmission',\n       'drive', 'type', 'paint_color', 'state']].apply(le.fit_transform)","a03930c5":"from sklearn import datasets, linear_model\nfrom sklearn.model_selection import train_test_split\nfrom matplotlib import pyplot as plt","07280e05":"y= df.price\nX= df.drop('price',axis=1)","2672b50f":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","47abc07c":"print (X_train.shape, y_train.shape)\nprint (X_test.shape, y_test.shape)","143b49d1":"from sklearn.ensemble import RandomForestRegressor\n\nregressor = RandomForestRegressor(n_estimators=20, random_state=0)\nregressor.fit(X_train, y_train)\ny_pred = regressor.predict(X_test)","54511811":"from sklearn import metrics\nfrom sklearn.metrics import mean_squared_error as MSE","19700d61":"print('Mean Absolute Error:', round(metrics.mean_absolute_error(y_test, y_pred),2))\nprint('Mean Squared Error:', round(metrics.mean_squared_error(y_test, y_pred),2))\nprint('Root Mean Squared Error:', round(np.sqrt(metrics.mean_squared_error(y_test, y_pred)),2))\nprint(regressor.score(X_test,y_test)*100)","50eb19dd":"# Description","7982abd3":"Lets observe the odometer column","f3ba490c":"these are mean values regarding each condition.\n\nnow these can be used to group the odometer readings which have nan values in condition.","920f8fd4":"The relation between price and transmission.","8b104a38":"# Data cleaning ","38633d0e":"I am droping the null values with less then 5% nan.","d1b4c64d":"the misssing values in the condition can be found using odometer as mileage affects condition of car.","f310bf5d":"The above were relation between numerical values of the table.","d8073e5a":"Lets see if any outliers in Target variable as we remove them the model can be more accurate because they cause a bring a lot of difference in values of mean and SD.","10b11196":"The accuracy is 86.02 .","761816be":"Clearly vehicles with condition  new has highest price as one expects.","0d269064":"the difference between 75% value and max value is too large so lets leave 10% values at both ends of a distribution","f5cbf0a5":"The distribution of price of cars based on title_status can be seen here.","8ecc34b4":"#  Label Processing\n","68eeefc7":"This figure shows the price range between which majority of each type of car based on fuel lies.\n\nGas=5k-17k\n\ndiesel=12k-20k\n\nhybrid=7k-15k\n\nother=11k-20k\n\nelectric=10k-18k","2716a4d9":"I am taking out % of null values in each column","162c94a4":"This violinplot provides clear idea about the distribution of number of cylinders and the price.","07508336":"I am also droping the columns with more then 30% null values.\nbut cylinders can be important feature .","8e8763d4":"# Handling Null Values","a5d37689":"# Split Train and Test data\n","f807bde8":"There are nan values and only one 0 value","ae142059":"Now lets see year column","d9d1eb6a":"the null values in a year column cannot be replaced so lets eliminate them","d4677509":"# Training Model","44d5c470":"Important observation can be obtained from the above figure regarding the distribution of price bracket for each color of vehicle.","4ac14c91":"# Exploratory Data Analysis","b22a9e7f":"Craigslist is the world's largest collection of used vehicles for sale, yet it's very difficult to collect all of them in the same place. I built a scraper for a school project and expanded upon it later to create this dataset which includes every used vehicle entry within the United States on Craigslist.","8d8e2ade":"It just gives and idea about prices based on the manufacturer.","1c30d140":"# Reading Data","37a9d21e":"here the values above 3000000  can be considered as outliers","70909d20":"# Random Forest","5d6a4ff1":"we must alo drop this 0 values","96b92dce":"Please leave suggestions in the comments if any.\n\nDo upvote if you find it usefull.","9e484a33":"Based on above observation the features which are too common or of no use like url can be dropped","2e669577":"what i am trying to do here is finding mean value of odometer readings grouping by there conditions","67fbcbb9":"# Handling outliers","a2d36563":"# Importing Libraries","724c2526":"Important observation can be obtained from the above figure regarding the price bracket for each type of vehicle.","25d4a829":"we have removed outliers from all three numerical columns .\nnow lets how we can remove with nan values if any.","13fe2b1e":"There doesnt seem too be much difference between the first 2 types of drives .\n\nThe third one is a bit different.","9d0c1ddf":"the values are being filled by the values from above calculated mean value ranges"}}