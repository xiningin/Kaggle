{"cell_type":{"b9016c63":"code","203ce689":"code","0f0728bf":"code","cb1325cb":"code","39441276":"code","2b8a5172":"code","98c7ba13":"code","bc78f508":"code","f1df9958":"code","03d1f3cf":"markdown","d9f58fd8":"markdown","bb72719f":"markdown","f3e5fb2b":"markdown","3390922e":"markdown","43dec788":"markdown","6cde9736":"markdown","639b4989":"markdown","952b3978":"markdown","98213a78":"markdown"},"source":{"b9016c63":"var_list = ['py', 2, '3rd', 'last_element']\n# Subsetting list\n# Calling 1st element\nprint(var_list[0]) # Python is a zero-indexed programming language\n# Calling last element\nprint(var_list[-1])","203ce689":"print('1-3: ', var_list[1:3]) # calling 2nd, 3rd element. But, many are expecting the 4th element to be called as well.","0f0728bf":"print(var_list[1:]) # taking 2nd element and onwards; again inclusive\nprint(var_list[:2]) # taking until 2nd element (not 3rd element); again exclusive","cb1325cb":"import numpy as np\nlist1 = ['Maple Snap Ltd', 2, False, 'Tanmoy', 'DataIE', 33]\nprint(list1) # When it comes to mixed datatype, Numpy convert everything into str unlike Python LIST that preserves datatype\nprint([2, False, 'Das'])\npy_list = [2,4,5]\nnumpy_array = np.array([2, 4 ,6])\nsum_np = numpy_array + numpy_array\nprint('Summing Python Lists: ', (py_list + py_list)) # Concatinating them\nprint('Summing numpy arrays: ', sum_np)","39441276":"list1 = ['Maple Snap Ltd', 2, False, 'Tanmoy', ['DataIE', 2021], 33]\ndisplay(list1)\ndisplay(list1[:2]) # Starting from zero'th element until 2nd; EXCLUSIVE (meaning 3rd element will not be added)\n\ndisplay(list1[2:]) # from 3rd element until the end; INCLUSIVE (3nd element and onwards)\n\nlist1[2:4] # what it will produce? 3rd & 4th element, you guessed it right! Remember 2 inclusive, 4 exclusive","2b8a5172":"# Subsetting List of List\n# Calling elements inside another element of a list e.g. \nlist1[-2][1] # 2nd element of the child list ['DataIE', 2021] of list1","98c7ba13":"# Adding elements\nlist1_ext = list1 + ['Tanm', 220, 3] # new contents are just PASTED beside previous elements (not mathematical addition)\nprint(list1_ext)\n\n# Removing elements\ndel(list1_ext[-2])\nprint(list1_ext)","bc78f508":"# Editing your LIST\na = [2, 3, 7]\nb = a\nb[2] = 'Tan'\nprint('a: ', a)  # Kinda frustrating\n\n# so, we have a few options here to keep original list (or whatever object) intact\n# Option 1\nc = list(a)\nc[2] = 'DataIE'\nprint('c: ', c)\nprint('a afterward: ', a)\n\n# Option 2\nd = a[:]\nprint('d before modification: ', d)\nd[2] = 'MapleSnap'\nprint('d: ', d)\nprint('a afterward d: ', a)","f1df9958":"\n# More contents will be added shortly thereafter.","03d1f3cf":"## Python List vs Numpy Array","d9f58fd8":"Developers are often find it difficult why **2**nd element is called, but **4**th element is not called. It's because in List[start_element: end_element], start_element is taken **inclusively** whereas end_element is taken **exclusively**. Wait, what? \n\nLet me clarify. When I call var_list[1:3], 1 is included, but 3 is not included (digits until 3 are included), thereby it invokes from 2nd element to 3rd element (NOT the 4th).\n![image.png](attachment:image.png)","bb72719f":"# Intro to Python - DataCamp","f3e5fb2b":"## List Slicing","3390922e":"**List Slicing**\n","43dec788":"![image.png](attachment:image.png)\nSource: DataCamp","6cde9736":"## Manipulating List","639b4989":"## List Indexing","952b3978":"Learning Source: https:\/\/www.datacamp.com\/courses\/intro-to-python-for-data-science","98213a78":"**Python** is the most powerful programming language for Data Science (**R** is another mentionable one)."}}