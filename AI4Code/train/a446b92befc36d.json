{"cell_type":{"03458615":"code","f293d0b3":"code","27cc6307":"code","98169fa2":"code","0e12773b":"code","e2cb7dc8":"code","fede7a6f":"code","9a2da79d":"markdown","5e9922b2":"markdown","e5f2e16c":"markdown","c3b4a692":"markdown","b9f088f2":"markdown"},"source":{"03458615":"%load_ext autoreload\n%autoreload 2","f293d0b3":"import numpy as np\nimport pandas as pd\n\nimport time\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import mean_squared_error\n\n# Refer to https:\/\/www.kaggle.com\/product-feedback\/91185 to import functions and\n# classes from Kaggle kernels\nfrom preprocess import DataPreprocessModule","27cc6307":"data_preprocess_module = DataPreprocessModule(\n    train_path='..\/input\/hdb-resale-price-prediction\/train.csv',\n    test_path='..\/input\/hdb-resale-price-prediction\/test.csv')\nX_train, X_val, X_test, y_train, y_val = data_preprocess_module.get_preprocessed_data()\nprint('Shape of X_train:', X_train.shape)\nprint('Shape of X_val:', X_val.shape)\nprint('Shape of X_test:', X_test.shape)\nprint('Shape of y_train:', y_train.shape)\nprint('Shape of y_val:', y_val.shape)","98169fa2":"# Define RMSE\nmetric = lambda y1_real, y2_real: np.sqrt(mean_squared_error(y1_real, y2_real))\n# Claculate exp(y) - 1 for all elements in y\ny_trfm = lambda y: np.expm1(y)\n# Define function to get score given model and data\ndef get_score(model, X, y):\n    # Predict\n    preds = model.predict(X)\n    # Transform\n    preds = y_trfm(preds)\n    y = y_trfm(y)\n    return metric(preds, y)","0e12773b":"# Build pipeline\nmodel = KNeighborsRegressor()\npipeline_knn = data_preprocess_module.build_pipeline(model)\n# Hyperparameter tuning\nparams = {\n    'model__n_neighbors': list(range(3, 22, 2)),\n    'model__weights': ['uniform', 'distance']\n}\nknn = GridSearchCV(pipeline_knn, params, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)\ntime_start = time.time()\nknn.fit(X_train, y_train)\nprint('Time taken for hyperparameter tuning: {:.2f} min'.\n      format((time.time() - time_start) \/ 60))\nget_score(knn, X_val, y_val)","e2cb7dc8":"# Show selected params\nknn.best_params_","fede7a6f":"preds_test = knn.predict(X_test)\npreds_test = y_trfm(preds_test)\n\noutput = pd.DataFrame({'id': X_test.index,\n                       'resale_price': preds_test})\noutput.to_csv('submission.csv', index=False)","9a2da79d":"Submission","5e9922b2":"Import libraries","e5f2e16c":"Define Metrics","c3b4a692":"Preprocess Data","b9f088f2":"Train k Nearest Neighbors model"}}