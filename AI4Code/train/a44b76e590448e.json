{"cell_type":{"f8a8aa84":"code","b51b27b5":"code","2f68a351":"code","70d9c6dc":"code","78f62682":"code","2e0970a9":"code","431b61d9":"code","04d3a184":"code","65f2b92f":"code","5d568069":"code","4eabc29c":"code","ce8df7aa":"code","7caa8e52":"code","a5b75e0f":"code","5ef8045f":"markdown","a598b977":"markdown","edd6b0bf":"markdown","b796541f":"markdown","f9484b62":"markdown"},"source":{"f8a8aa84":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input\/frdata\/'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","b51b27b5":"!pip install detecto --quiet","2f68a351":"from detecto.core import Model, Dataset, DataLoader\nfrom detecto.utils import xml_to_csv, read_image\nfrom detecto.visualize import detect_video\nfrom detecto import visualize\nimport matplotlib.pyplot as plt\nimport os\nimport json\nimport pandas as pd\nimport cv2\nimport matplotlib.image as mpimg","70d9c6dc":"train_dir = '\/kaggle\/input\/frdata\/fracture_data\/train\/images\/'\n\nfig = plt.figure(figsize = (10, 10))\n\n# total_rows, total_columns, subplot_index(1st, 2nd, etc..)\nplt.subplot(2, 2, 1)\nplt.imshow(mpimg.imread(train_dir + '20.jpg'))\n\nplt.subplot(2, 2, 2)\nplt.imshow(mpimg.imread(train_dir + '12.jpg'))\n\nplt.subplot(2, 2, 3)\nplt.imshow(mpimg.imread(train_dir + '10.jpg'))\n\nplt.subplot(2, 2, 4)\nplt.imshow(mpimg.imread(train_dir + '1.jpg'))","78f62682":"xml_to_csv('\/kaggle\/input\/frdata\/fracture_data\/train\/xml\/', 'train.csv')\nxml_to_csv('\/kaggle\/input\/frdata\/fracture_data\/test\/xml\/', 'test.csv')","2e0970a9":"dataset = Dataset('train.csv', '\/kaggle\/input\/frdata\/fracture_data\/train\/images')\nval_dataset = Dataset('test.csv', '\/kaggle\/input\/frdata\/fracture_data\/test\/images')  # Validation dataset for training\n\n# Create your own DataLoader with custom options\nloader = DataLoader(dataset, batch_size=2, shuffle=True) \n\nmodel = Model(['fracture'])\nlosses = model.fit(loader, val_dataset, epochs=20, learning_rate=0.001, verbose=True)\n\nplt.plot(losses)  # Visualize loss throughout training\nplt.show()","431b61d9":"image = read_image('\/kaggle\/input\/frdata\/fracture_data\/test\/images\/3.jpg')  # Helper function to read in images\nlabels, boxes, scores = model.predict(image) ","04d3a184":"def view_predictions(labels, boxes, scores, conf, path):\n    \n    lab = []\n    box = []\n    scr = []\n    \n    img = cv2.imread(path)\n    for i,j in enumerate(scores):\n        if j > conf:\n            lab.append(labels[i])\n            box.append(boxes[i])\n            scr.append(scores[i])\n        \n    for k,l in enumerate(box):\n        \n        x = box[k][0]\n        y = box[k][1]\n        x2 = box[k][2]\n        y2 = box[k][3]\n        \n        cv2.rectangle(img, (x, y), (x2, y2), (255, 0, 0), 4)\n        cv2.putText(img, str(scr[k]), (x,y), cv2.FONT_HERSHEY_SIMPLEX, 1, 255)\n    \n    return img","65f2b92f":"path = '\/kaggle\/input\/frdata\/fracture_data\/test\/images\/14.jpg'\nimage = read_image(path)  # Helper function to read in images\nlabels, boxes, scores = model.predict(image) ","5d568069":"test_df = pd.read_csv('\/kaggle\/working\/test.csv')\ncur_df = test_df[test_df['filename'] == path.split('\/')[-1]]\nimg_gt = cv2.imread(path)\nx = cur_df['xmin']\ny = cur_df['ymin']\nx2 = cur_df['xmax']\ny2= cur_df['ymax']\nans = cv2.rectangle(img_gt, (x, y), (x2, y2), (255, 0, 0), 4)","4eabc29c":"img = view_predictions(labels, boxes, scores, 0.45, path)\n\nfigure = plt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(img_gt)\nplt.title(\"Ground_truth\")\n\nplt.subplot(1, 2, 2)\nplt.imshow(img)\nplt.title(\"prediction\")","ce8df7aa":"!wget -O \/kaggle\/working\/s2.jpg https:\/\/image.shutterstock.com\/image-photo\/closed-fracture-left-leg-xray-260nw-406880146.jpg","7caa8e52":"path = '\/kaggle\/working\/s1.jpg'\nimage = read_image(path)  # Helper function to read in images\nlabels, boxes, scores = model.predict(image) ","a5b75e0f":"rimg = view_predictions(labels, boxes, scores, 0.2, path)\nrimg_gt = cv2.imread(path)\n\nfigure = plt.figure(figsize=(10, 5))\nplt.subplot(1, 2, 1)\nplt.imshow(rimg_gt)\nplt.title(\"Ground_truth\")\n\nplt.subplot(1, 2, 2)\nplt.imshow(rimg)\nplt.title(\"prediction\")","5ef8045f":"## Installing packages","a598b977":"## Comparing with GT","edd6b0bf":"## With random x-rays","b796541f":"## Visualization","f9484b62":"## Modeling"}}