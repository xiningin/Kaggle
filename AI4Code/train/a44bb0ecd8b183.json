{"cell_type":{"2f06db07":"code","762704bf":"code","f7a6d194":"code","17644e3a":"code","09458009":"code","b9409984":"code","cbd839da":"code","7036563d":"code","77917df0":"code","6e87fd03":"code","dc04cea2":"code","6267c3b8":"code","e4515d52":"code","20f0c106":"code","2223a187":"code","5d2a1cd5":"code","d09a72d3":"code","f9196a4f":"code","f237e81c":"code","44def2db":"code","7ef352fd":"code","e0aed758":"code","4e6f8b58":"code","db6e87b8":"code","a8d07044":"code","91fc55c5":"code","20fa8c94":"code","f2adadff":"code","286a9827":"code","e3f2329a":"code","3e7c9b8f":"code","bfc7af1c":"code","93197c05":"code","1b00d538":"code","5dd70933":"code","cf14202c":"code","42b2734d":"code","e4be5a30":"code","a4a63c89":"code","f3ecf578":"code","ad7c4b15":"code","f1678b8c":"code","e6299356":"code","0f2d72bc":"code","83a73329":"code","5c9bde75":"code","a7f957ef":"code","cdc0bb86":"code","94c206c3":"code","d6be3ca9":"code","4f7a9425":"code","69201008":"code","d779066c":"code","961ff745":"code","b7e370de":"code","54d36c8d":"code","efe152e1":"code","ff4f7278":"code","b3064f20":"code","7f868998":"code","be0dd7a2":"code","1f509c36":"code","23cc95ca":"code","643f276f":"code","01f63ea7":"code","8992062f":"code","ffff1b28":"code","583fd076":"markdown","fcff1dc3":"markdown","ff0f6cd2":"markdown","d8b5e3f7":"markdown","d631a011":"markdown","da943358":"markdown","da8b5bd2":"markdown","08ec704f":"markdown","7cdf6d1b":"markdown","3b2a29e2":"markdown","1251e387":"markdown","67f1c302":"markdown","652d1d26":"markdown","cf9c9244":"markdown","448b4084":"markdown","505d12c2":"markdown","98535b60":"markdown","30d2b895":"markdown","69cd421a":"markdown","12b0e9cb":"markdown","d04fa149":"markdown","8cc8f7d8":"markdown","5f182892":"markdown","2eff0baf":"markdown"},"source":{"2f06db07":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","762704bf":"import numpy as np\nimport pandas as pd\n\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\nsns.set_style('whitegrid')\nmatplotlib.rcParams['figure.figsize'] = (10,6)\n\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.linear_model import LinearRegression, LogisticRegression\nfrom sklearn import metrics\n","f7a6d194":"df_train = pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/titanic\/test.csv')\ndf = pd.read_csv('\/kaggle\/input\/titanic\/gender_submission.csv')","17644e3a":"df_train.info()","09458009":"# Get numeric columns\nprint('Numeric cols :',df_train.select_dtypes(include=[np.number]).columns.values)","b9409984":"# Get Non-numeric columns\nprint('Categorical cols :',df_train.select_dtypes(exclude=[np.number]).columns.values)","cbd839da":"df_train.describe(include='all')","7036563d":"# Check for missing data\nsns.heatmap(df_train.isnull(), yticklabels=False, cbar=False, cmap='viridis')","77917df0":"# Number of missing values\nprint(df_train.isnull().sum().sort_values(ascending=False))","6e87fd03":"# Number of missing %\nprint(round((df_train.isnull().mean()*100).sort_values(ascending=False),2))","dc04cea2":"df_train['Age'].dropna().plot.hist()","6267c3b8":"sns.countplot(x='Survived', hue='Sex',data=df_train)","e4515d52":"sns.countplot(x='Pclass', hue='Survived',data=df_train)","20f0c106":"# Correlation plot\nsns.heatmap(df_train.corr(), annot=True, cmap='coolwarm')","2223a187":"df_train_missingAge = df_train[df_train['Age'].isnull()]\nprint('No of data points with Age missing = {}\\n'.format(len(df_train_missingAge)))\nprint(df_train_missingAge)","5d2a1cd5":"df_train_availableAge = df_train[df_train['Age'].notnull()]\nprint('No of data points with Age NOT missing = {}\\n'.format(len(df_train_availableAge)))\nprint(df_train_availableAge)","d09a72d3":"# All numerical cols of known Age data points as training data\nX_train1 = df_train_availableAge[['Pclass', 'Fare', 'SibSp','Parch']] \n\n# Age of known data points as Target\ny_train1 = df_train_availableAge['Age']\n\n# All numerical cols of missing Age data points as training data\nX_test1 = df_train_missingAge[['Pclass', 'Fare', 'SibSp','Parch']]","f9196a4f":"lr1 = LinearRegression()\nlr1.fit(X_train1, y_train1)","f237e81c":"predicted_age1 = lr1.predict(X_test1)\npredicted_age1 = np.round(predicted_age1,1)\nprint(predicted_age1)","44def2db":"final_df_train = df_train.copy() #Make a copy of df_train\nfinal_df_train.loc[final_df_train['Age'].isnull(), 'Age'] = predicted_age1\nfinal_df_train.head(20) #df_train with filled Age ","7ef352fd":"# After filling Age column, we check misiing values again\nprint(round((final_df_train.isnull().mean()*100).sort_values(ascending=False),2))","e0aed758":"# Lot of data in Cabin is missing hence Cabin is not useful, so let's drop\nfinal_df_train.drop('Cabin', axis=1, inplace=True) ","4e6f8b58":"# Dropping 'Name' and 'Ticket' \nfinal_df_train.drop(['Name', 'Ticket'], axis=1, inplace=True)","db6e87b8":"print(final_df_train)","a8d07044":"Sex1 = pd.get_dummies(final_df_train['Sex'], drop_first=True)\nprint(Sex1)","91fc55c5":"Embarked1 = pd.get_dummies(final_df_train['Embarked'], drop_first=True)\nprint(Embarked1)","20fa8c94":"final_df_train.drop(['Sex', 'Embarked'], axis=1, inplace=True)","f2adadff":"final_df_train = pd.concat([final_df_train, Sex1, Embarked1], axis=1)","286a9827":"print(final_df_train)","e3f2329a":"df_test.info()","3e7c9b8f":"# Get numeric columns\nprint('Numeric cols :',df_test.select_dtypes(include=[np.number]).columns.values)","bfc7af1c":"# Get Non-numeric columns\nprint('Categorical cols :',df_test.select_dtypes(exclude=[np.number]).columns.values)","93197c05":"df_test.describe(include='all')","1b00d538":"# Check for missing data\nsns.heatmap(df_test.isnull(), yticklabels=False, cbar=False, cmap='viridis')","5dd70933":"# Missing values \nprint((df_test.isnull().sum()).sort_values(ascending=False))","cf14202c":"# Missing values in %\nprint((df_test.isnull().mean()*100).sort_values(ascending=False))","42b2734d":"df_test['Age'].dropna().plot.hist()","e4be5a30":"sns.countplot(x='Pclass', hue='Sex',data=df_test)","a4a63c89":"sns.heatmap(df_test.corr(), annot=True, cmap='coolwarm')","f3ecf578":"# As only 0.2% Fare values are missing, we can fill those with mean\ndf_test.loc[df_test['Fare'].isnull(), 'Fare'] = df_test['Fare'].mean()","ad7c4b15":"# We can verify the same\ndf_test['Fare'].isnull().sum()","f1678b8c":"df_test_missingAge = df_test[df_test['Age'].isnull()]\nprint('No of data points with Age missing = {}\\n'.format(len(df_test_missingAge)))\nprint(df_test_missingAge)","e6299356":"df_test_availableAge = df_test[df_test['Age'].notnull()]\nprint('No of data points with Age NOT missing = {}\\n'.format(len(df_test_availableAge)))\nprint(df_test_availableAge)","0f2d72bc":"# All numerical cols of known Age data points as training data\nX_train2 = df_test_availableAge[['Pclass', 'Fare', 'SibSp','Parch']] \n\n# Age of known data points as Target\ny_train2 = df_test_availableAge['Age']\n\n# All numerical cols of missing Age data points as training data\nX_test2 = df_test_missingAge[['Pclass', 'Fare', 'SibSp','Parch']]","83a73329":"lr2 = LinearRegression()\nlr2.fit(X_train2, y_train2)","5c9bde75":"predicted_age2 = lr2.predict(X_test2)\npredicted_age2 = np.round(predicted_age2,1)\nprint(predicted_age2)","a7f957ef":"final_df_test = df_test.copy() #Make a copy of df_test\nfinal_df_test.loc[final_df_test['Age'].isnull(), 'Age'] = predicted_age2\nfinal_df_test.head(20) #df_test with filled Age ","cdc0bb86":"# After filling Age column, we check misiing values again\nprint(round((final_df_test.isnull().mean()*100).sort_values(ascending=False),2))","94c206c3":"# Lot of data in Cabin is missing hence Cabin is not useful, so let's drop\nfinal_df_test.drop('Cabin', axis=1, inplace=True) ","d6be3ca9":"# Let's check again if any data is missing\nsns.heatmap(final_df_test.isnull(), yticklabels=False, cbar=False, cmap='viridis') ","4f7a9425":"# Dropping 'Name' and 'Ticket'\nfinal_df_test.drop(['Name', 'Ticket'], axis=1, inplace=True)","69201008":"print(final_df_test)","d779066c":"Sex2 = pd.get_dummies(final_df_test['Sex'], drop_first=True)\nprint(Sex2)","961ff745":"Embarked2 = pd.get_dummies(final_df_test['Embarked'], drop_first=True)\nprint(Embarked2)","b7e370de":"final_df_test.drop(['Sex', 'Embarked'], axis=1, inplace=True)","54d36c8d":"final_df_test = pd.concat([final_df_test, Sex2, Embarked2], axis=1)","efe152e1":"print(final_df_test)","ff4f7278":"X_train = final_df_train.drop(['Survived','PassengerId'], axis=1)\ny_train = final_df_train['Survived'] \nX_test = final_df_test.drop('PassengerId', axis=1)","b3064f20":"log = LogisticRegression(max_iter=1000)\nparam_grid = {'C':[0.1, 1, 10, 100, 1000]}\ngrid = GridSearchCV(log, param_grid, verbose=3)\ngrid.fit(X_train, y_train)","7f868998":"print(grid.best_estimator_)","be0dd7a2":"predicted = grid.predict(X_test)\nprint(predicted)","1f509c36":"predicted = pd.DataFrame({'PassengerId':final_df_test['PassengerId'], 'Survived': predicted})\nprint(predicted)","23cc95ca":"# Output data file obtained from Kaggle 'gender_submission.csv' as df\n# This df obtained from kaggle is not Actual file but an example, anyway let's compare here\nprint(df)","643f276f":"# Plotting the Actual and Predicted data\nfig, ax = plt.subplots(1,2, figsize=(12,8))\nsns.countplot(df['Survived'], ax=ax[0])\nsns.countplot(predicted['Survived'], ax=ax[1])\nax[0].set(xlabel='Survived', title='Actual')\nax[1].set(xlabel='Survived', title='Predicted')\nplt.tight_layout()","01f63ea7":"# Classification Report\nprint(metrics.classification_report(df['Survived'],predicted['Survived']))","8992062f":"# Confusion Matrix\nprint(metrics.confusion_matrix(df['Survived'],predicted['Survived']))","ffff1b28":"# Accuracy\nprint(metrics.accuracy_score(df['Survived'],predicted['Survived'])*100)","583fd076":"# Training Data (*df_train*)\n---\n","fcff1dc3":"# Testing Data (*df_test*)\n---\n","ff0f6cd2":"### DataFrame *df_test* with predicted Age\n\n","d8b5e3f7":"Final Testing Data","d631a011":"### Using LinearRegression model to predict missing Age","da943358":"The '*df_test*' is divided in to two parts\n- Data Frame with \"**Available Age**\" (Training Data set)\n- Data Frame with \"**Missing Age**\" (Testing Data set)\n","da8b5bd2":"# Logistic Regression Model to Predict Survivors","08ec704f":"## Preparing Testing Data ","7cdf6d1b":"## Exploring Data\n\n","3b2a29e2":"Final Training Data","1251e387":"## Filling missing data in  *df_test*\n\n\n","67f1c302":"### Using LinearRegression model to predict missing Age","652d1d26":"The '*df_train*' is divided in to two parts\n- Data Frame with \"**Available Age**\" (Training Data set)\n- Data Frame with \"**Missing Age**\" (Testing Data set)\n","cf9c9244":"## Cleaning Training Data ","448b4084":"<h1> Titanic: Machine Learning from Disaster <\/h1>\n\n---\n\n\n**Problem Statement**: To predict if a passenger survived the sinking of the Titanic or not.\n\n**Competition Link**: https:\/\/www.kaggle.com\/c\/titanic\n\n&nbsp; \n\n&nbsp;\n\n\n**Solution by**: Aditya Karanth.\n\n**GitHub Profile**: https:\/\/github.com\/Aditya-Karanth\n\n**Kaggle Profile**: https:\/\/www.kaggle.com\/adityakaranth\n\n","505d12c2":"## Cleaning Testing Data ","98535b60":"## Exploring Data\n\n","30d2b895":"# Imports","69cd421a":"## Preparing Training Data ","12b0e9cb":"<h3>Project Planning :<\/h3> \n\n  - **Exploratory Data Analysis (EDA) -**\n    - Understand nature of the data *.info()*, *.describe()*\n    - Plot Histograms for numeric data\n    - Plot Value counts for categorical data\n    \n  - **Data Preprocessing -**\n    - **Handling missing data**: \n      - Obtaining missing data from heatmaps and corr plots. \n      - Filling missing values using *Linear Regression* and *mean*.\n      - Dropping columns with higher missing values.\n\n    - **Data Cleaning**: \n      - Removing unwanted columns eg. PassengerId, Name, Ticket.\n\n    - **Data Preparation**:\n      - Converting categorical columns in to numerical columns with *OneHotEncoding*. \n    \n    - **Model Selection**:\n      - Classification using *Logistic Regression* with *GridSearchCV* by obtaining the best parameters\n","d04fa149":"### DataFrame *df_train* with predicted Age\n\n","8cc8f7d8":"Here, couple of Embarked are missing, I would like to ignore it now as later when we use dummies on Embarked and using dummies will make these rows value to as 0.","5f182892":"## Filling missing data in *df_train*\n\n\n","2eff0baf":"We will repeat same process as training set (*df_train*)"}}