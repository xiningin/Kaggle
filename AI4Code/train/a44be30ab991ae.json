{"cell_type":{"ba4f2e3b":"code","db8fc8ac":"code","bc1c2096":"code","27b1fe65":"code","b5a63d6c":"code","bde53c7c":"code","832b41e6":"code","7e4d3475":"code","9233d68a":"code","f864ac6c":"code","5e334f9e":"code","ad1cf14f":"code","11bf5fe5":"code","ae85ecd0":"code","1136b30d":"code","61223be4":"code","8261b7a0":"code","3c078106":"code","7de0ab45":"code","9b2d9020":"code","b1410c42":"code","c23f55f1":"code","bc1ace6b":"code","ada9ea72":"code","95708887":"code","3ad54009":"code","eddd6f1b":"code","c1c54f0b":"code","b1c71cad":"code","c5af5541":"code","eef1b338":"code","475584eb":"code","ee0641fc":"code","5e32e103":"code","6a0afa75":"code","26a3ba48":"code","9b8a8488":"code","fb8d7864":"code","593d9223":"code","8ea6ac87":"code","891c638f":"code","3e9b1733":"code","ecf6ff57":"code","4f24d579":"code","d403ba1c":"code","cdaf52eb":"code","b3868fef":"code","00dcae5d":"code","613b5e8b":"code","778b6a81":"code","ad9189ea":"markdown","64dd0b5a":"markdown","9d1df0e8":"markdown"},"source":{"ba4f2e3b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","db8fc8ac":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px","bc1c2096":"df_train = pd.read_csv('\/kaggle\/input\/dasprodatathon\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/dasprodatathon\/test.csv')","27b1fe65":"print(\"Dataframe Train\")\ndisplay(df_train)\n\nprint(\"Dataframe Test\")\ndisplay(df_test)","b5a63d6c":"def missing_percentage(df):\n    total = df.isnull().sum().sort_values(ascending = False)[df.isnull().sum().sort_values(ascending = False) != 0]\n    percent = round(df.isnull().sum().sort_values(ascending = False)\/len(df)*100,2)[round(df.isnull().sum().sort_values(ascending = False)\/len(df)*100,2) != 0]\n    return pd.concat([total, percent], axis=1, keys=['Total','Percent'])\n\nmissing_percentage(df_train)","bde53c7c":"missing_percentage(df_test)","832b41e6":"df_train.info()","7e4d3475":"display(df_train.describe())","9233d68a":"fig, ax = plt.subplots(figsize=(15,15))\nk = 19\ncols = df_train.corr().nlargest(k, 'Price')['Price'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.heatmap(cm, annot=True, square=True, fmt='.2f',yticklabels=cols.values, xticklabels=cols.values, ax=ax)","f864ac6c":"cat_col = ['Year Built', 'Year Renovated', 'Waterfront', 'Zipcode', 'Grade']\nfor col in cat_col:\n    print(\"UNIQUE VALUE \",col,df_train[col].unique())","5e334f9e":"sns.distplot(df_train['Price'])","ad1cf14f":"plt.bar(df_train['Grade'], df_train['Price'])\nplt.show()","11bf5fe5":"sns.boxplot(df_train['Waterfront'], df_train['Price'])","ae85ecd0":"plt.subplots(figsize=(20,10))\nsns.distplot(df_train['Year Built'])","1136b30d":"plt.subplots(figsize=(40,15))\nsns.barplot(df_train['Year Built'], df_train['Price'])","61223be4":"# df_train = df_train.loc[df_train['Year Renovated'] >0]\ndf_train['Year Renovated'].unique()","8261b7a0":"plt.subplots(figsize=(25,10))\nsns.boxplot(df_train['Year Renovated'], df_train['Price'])","3c078106":"sns.scatterplot(df_train['Living Area'], df_train['Price'])","7de0ab45":"sns.distplot(df_train['Living Area'])","9b2d9020":"sns.scatterplot(df_train['Above the Ground Area'], df_train['Price'])","b1410c42":"sns.distplot(df_train['Above the Ground Area'])","c23f55f1":"sns.distplot(df_train['Bedrooms'])\n# berarti ini kategorical","bc1ace6b":"sns.boxplot(df_train['Bedrooms'], df_train['Price'])\nprint(df_test.Bedrooms.unique())","ada9ea72":"print(df_train.Floors.unique())\nsns.distplot(df_train['Floors'])","95708887":"sns.scatterplot(df_train['Floors'], df_train['Price'])\n# nanti dislicing jadi diatas x <= 1 , 1<x<2 , x>=2","3ad54009":"sns.distplot(df_train['Bathrooms'])","eddd6f1b":"print(df_train.Bathrooms.unique())\nsns.boxplot(df_train['Bathrooms'], df_train['Price'])\n","c1c54f0b":"plt.subplots(figsize=(30,15))\ndisplay(sns.distplot(df_train['Total Area']))\ndisplay(sns.distplot(df_test['Total Area']))","b1c71cad":"sns.scatterplot(df_train['Total Area'], df_train['Price'])","c5af5541":"print(df_train.View.unique())\nsns.scatterplot(df_train['View'], df_train['Price'])","eef1b338":"sns.scatterplot(df_train['Condition'], df_train['Price'])\n# ntar jadiin boolean jadi < 3 dan > 3","475584eb":"sns.distplot(df_train['Basement Area'])","ee0641fc":"sns.scatterplot(df_train['Basement Area'], df_train['Price'])\n# bikin satu featureuntuk menentukan dia punya basement apa ga","5e32e103":"sns.distplot(df_train['Zipcode'])\nprint(df_train['Zipcode'].unique())","6a0afa75":"sns.scatterplot(df_train['Zipcode'], df_train['Price'])","26a3ba48":"sns.distplot(df_train['Latitude'])","9b8a8488":"sns.scatterplot(df_train['Latitude'], df_train['Price'])","fb8d7864":"sns.distplot(df_train['Longitude'])","593d9223":"sns.scatterplot(df_train['Longitude'], df_train['Price'])","8ea6ac87":"fig, ax = plt.subplots(figsize=(15,15))\nplt.scatter(df_train['Latitude'], df_train['Longitude'], c=df_train['Price'])\nplt.colorbar()\nplt.title(\"Lat Lon chart\")\nplt.show()","891c638f":"all_df = [df_train, df_test]\nfor df in all_df:\n    df['isRenovated'] = df['Year Renovated'] != 0\n    df['hasBasement'] = df['Basement Area'] > 0\ndisplay(df_train)","3e9b1733":"id_test = df_test['ID']\nX_train = df_train.copy()\nY_train = df_train[\"Price\"]\nX_train = X_train.drop(['ID', 'Price'], axis=1)\nX_test = df_test.drop(['ID'], axis=1)\nX_train.shape ,  X_test.shape , Y_train.shape","ecf6ff57":"from sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error\n\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.ensemble import GradientBoostingRegressor","4f24d579":"lnr = LinearRegression()\nlnr.fit(X_train, Y_train)\nprint(cross_val_score(lnr, X_train, Y_train))\npred_lnr = lnr.predict(X_train)\nprint(mean_squared_error(Y_train, pred_lnr))","d403ba1c":"xgbr = GradientBoostingRegressor()\nxgbr.fit(X_train, Y_train)\nprint(cross_val_score(xgbr, X_train, Y_train))\npred_xgbr = xgbr.predict(X_train)\nprint(mean_squared_error(Y_train, pred_xgbr))","cdaf52eb":"dst = DecisionTreeRegressor()\ndst.fit(X_train, Y_train)\nprint(cross_val_score(dst, X_train, Y_train))\npred_dst = dst.predict(X_train)\nprint(mean_squared_error(Y_train, pred_dst))","b3868fef":"rfc = RandomForestRegressor()\nrfc.fit(X_train, Y_train)\nprint(cross_val_score(rfc, X_train, Y_train))\npred_rfc = rfc.predict(X_train)\nprint(mean_squared_error(Y_train, pred_rfc))","00dcae5d":"svr = SVR()\nsvr.fit(X_train, Y_train)\nprint(cross_val_score(svr, X_train, Y_train))\npred_svr = svr.predict(X_train)\nprint(mean_squared_error(Y_train, pred_svr))","613b5e8b":"test_pred = xgbr.predict(X_test)\nsubmit_df = pd.DataFrame()\nsubmit_df['ID'] = id_test\nsubmit_df['Price'] = test_pred\ndisplay(submit_df.head())","778b6a81":"submission = submit_df.to_csv(\"submission.csv\")","ad9189ea":"## Feature Engineering ##\nfloors : nanti dislicing jadi diatas x <= 1 , 1<x<2 , x>=2 <br>\ncondition :ntar jadiin boolean jadi < 3 dan > 3<br>\nview : biarin <br>\nZipcode : <98100 dan >98100<br>\nBedrooms : biarin<br>\nBathrooms : biarin<br>\nYear built : biarin<br>\nYear Renovated : biarin<br>\nisRenovated : boolean<br>\nlat lon :biarin <br>\nhasBasement : 1 0 boolean","64dd0b5a":"pake yang gradient boosting yaaa","9d1df0e8":"**Categorical Features :**\n- Condition\n- View \n- Zipcode\n- Bedrooms\n- Bathrooms\n- Floor\n- Year Built\n- Year Renovated\n- Lat\n- Long <br> <br>\n**Numerical Features :**\n- Living Area\n- Total Area\n- Floors\n- Waterfront\n- Grade\n- Basement Area\n- Above the Ground Area\n- Neighbors Living Area\n- Neighbors Total Area"}}