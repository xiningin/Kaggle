{"cell_type":{"73072772":"code","7a739534":"code","d8069c54":"code","b4b5f57e":"code","73180ad1":"code","aebc40ca":"code","b2e91a5d":"code","63df0a4f":"code","1aaf9bf1":"code","028b5cd8":"code","cc0f3619":"code","bb86e806":"code","67521b64":"code","64dd0669":"code","772c3ed1":"code","616aacfa":"code","cd4660e1":"code","b6808b1a":"code","fdb1460d":"code","d354ccd5":"code","3cf1a0cc":"code","2772e389":"code","fe57f6b8":"code","99bc04e5":"code","038d2566":"code","003387da":"code","18c8d550":"code","3b84f09e":"code","60b40af2":"code","587a9d2b":"code","311bdf83":"markdown","b58f6f2b":"markdown","28a4ba87":"markdown","1cc9d364":"markdown","3f62b2a7":"markdown","eaec3d9e":"markdown","510665ef":"markdown","a775f54c":"markdown","b0dd6fd1":"markdown","f59aa6ba":"markdown","a3d66346":"markdown","df3aac48":"markdown","3d062d08":"markdown","6e953c82":"markdown","fa647b69":"markdown","a80bf856":"markdown","c6e3b31e":"markdown","85196f1d":"markdown"},"source":{"73072772":"# import the necessary libraries\nimport numpy as np \nimport pandas as pd \nimport os\n\n# Visualisation libraries\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set()\nimport pycountry\nimport plotly.express as px\nfrom plotly.offline import init_notebook_mode, iplot \nimport plotly.graph_objs as go\nimport plotly.offline as py\nfrom plotly.offline import download_plotlyjs,init_notebook_mode,plot,iplot\n!pip install chart_studio\nimport chart_studio.plotly as py\nimport cufflinks\ncufflinks.go_offline()\ncufflinks.set_config_file(world_readable=True, theme='pearl')\n#py.init_notebook_mode(connected=True)\n\n#Racing Bar Chart\n!pip install bar_chart_race\nimport bar_chart_race as bcr\nfrom IPython.display import HTML\n\n# Increase the default plot size and set the color scheme\nplt.rcParams['figure.figsize'] = 8, 5\nplt.style.use(\"fivethirtyeight\")# for pretty graphs\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Disable warnings \nimport warnings\nwarnings.filterwarnings('ignore')","7a739534":"train_df = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics-ii\/Train_hMYJ020\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics-ii\/Test_ND2Q3bm\/test.csv')\nsub_df = pd.read_csv('\/kaggle\/input\/janatahack-healthcare-analytics-ii\/sample_submission_lfbv3c3.csv')\n\n\n#Training data\nprint('Training data shape: ', train_df.shape)\ntrain_df.head(5)","d8069c54":"#Test data\nprint('Test data shape: ', test_df.shape)\ntest_df.head(5)","b4b5f57e":"# Null values and Data types\nprint('Train Set')\nprint(train_df.info())\nprint('-------------')\nprint('Test Set')\nprint(test_df.info())","73180ad1":"train_df.isnull().sum()","aebc40ca":"test_df.isnull().sum()","b2e91a5d":"# Total number of Patients in the dataset(train+test)\nprint(\"Total Patients in Train set: \",train_df['patientid'].nunique())\nprint(\"Total Patients in Test set: \",test_df['patientid'].nunique())","63df0a4f":"train_df.columns","1aaf9bf1":"#find overlap between train and test sets\ncols =  [\n            'case_id', 'Hospital_code', 'Hospital_type_code', 'City_Code_Hospital',\n       'Hospital_region_code', 'Available Extra Rooms in Hospital',\n       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',\n       'patientid', 'City_Code_Patient', 'Type of Admission',\n       'Severity of Illness', 'Visitors with Patient', 'Age',\n       'Admission_Deposit'\n          ]\nfor col in cols:\n  print('Total unique '+col  +' values in Train are {}'.format(train_df[col].nunique()))\n  print('Total unique '+col  +' values in Test are {}'.format(test_df[col].nunique()))\n  print('Common'+col +' values are {}'.format(len(list(set(train_df[col]) & set(test_df[col])))))\n  print('**************************')","028b5cd8":"for col in train_df.columns:\n    print('The unique values of '+col+' column in train_df dataset are {} '.format(train_df[col].nunique()))","cc0f3619":"for col in test_df.columns:\n    print('The unique values of '+col+' column in test dataset are {}'.format(test_df[col].nunique()))","bb86e806":"train_df['Stay'].value_counts().iplot(kind='bar',yTitle='Count',color='red')","67521b64":"trace0 = go.Box(y=train_df[\"Age\"],name=\"Age\")\n\ndata = [trace0]\niplot(data)","64dd0669":"trace0 = go.Box(y=train_df[\"Admission_Deposit\"],name=\"Admission_Deposit\")\n\ndata = [trace0]\niplot(data)","772c3ed1":"train_df['Admission_Deposit'].iplot(kind='hist',bins=30,color='orange',xTitle='Admission_Deposit distribution',yTitle='Count')","616aacfa":"labels = train_df['Hospital_type_code'].value_counts().index\nvalues = train_df['Hospital_type_code'].value_counts().values\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial')])\nfig.show()","cd4660e1":"train_df['Hospital_code'].value_counts().iplot(kind='bar',yTitle='Count',color='green')","b6808b1a":"City_Code_Hospital = train_df['City_Code_Hospital'].value_counts().sort_values(ascending=False)\nCity_Code_Hospital.iplot(kind='barh', title='City_Code_Hospital')","fdb1460d":"Department = train_df['Department'].value_counts().sort_values(ascending=False)[:10]\nDepartment.iplot(kind='bar', title='Department', color = 'blue')","d354ccd5":"labels = train_df['Ward_Type'].value_counts().index\nvalues = train_df['Ward_Type'].value_counts().values\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial')])\nfig.show()","3cf1a0cc":"labels = train_df['Ward_Facility_Code'].value_counts().index\nvalues = train_df['Ward_Facility_Code'].value_counts().values\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial')])\nfig.show()","2772e389":"train_df['Severity of Illness'].value_counts(normalize=True)","fe57f6b8":"train_df['Severity of Illness'].value_counts(normalize=True).iplot(kind='bar',\n                                                      yTitle='Percentage', \n                                                      linecolor='black', \n                                                      opacity=0.7,\n                                                      color='green',\n                                                      theme='pearl',\n                                                      bargap=0.8,\n                                                      gridcolor='white',\n                                                     \n                                                      title='Distribution of the Severity of Illness column in the training set')\n","99bc04e5":"train_df['Hospital_region_code'].value_counts(normalize=True)","038d2566":"train_df['Hospital_region_code'].value_counts(normalize=True).iplot(kind='bar',\n                                                      yTitle='Percentage', \n                                                      linecolor='black', \n                                                      opacity=0.7,\n                                                      color='pink',\n                                                      theme='pearl',\n                                                      bargap=0.8,\n                                                      gridcolor='white',\n                                                     \n                                                      title='Distribution of the Hospital_region_code column in the training set')\n","003387da":"labels = train_df['Bed Grade'].value_counts().index\nvalues = train_df['Bed Grade'].value_counts().values\nfig = go.Figure(data=[go.Pie(labels=labels, values=values, textinfo='label+percent',\n                             insidetextorientation='radial')])\nfig.show()","18c8d550":"train_df.columns","3b84f09e":"train_df[['Hospital_code', 'Hospital_type_code', 'City_Code_Hospital',\n       'Hospital_region_code', 'Available Extra Rooms in Hospital',\n       'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade',\n       'patientid', 'City_Code_Patient', 'Type of Admission',\n       'Severity of Illness', 'Visitors with Patient', 'Age',\n       'Admission_Deposit', 'Stay']].describe(include='all')","60b40af2":"def reduce_mem_usage(df, verbose=True):\n    numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\n    start_mem = df.memory_usage().sum() \/ 1024**2    \n    for col in df.columns:\n        col_type = df[col].dtypes\n        if col_type in numerics:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)    \n    end_mem = df.memory_usage().sum() \/ 1024**2\n    if verbose: print('Mem. usage decreased to {:5.2f} Mb ({:.1f}% reduction)'.format(end_mem, 100 * (start_mem - end_mem) \/ start_mem))\n    return df\n","587a9d2b":"train_df = reduce_mem_usage(train_df)\ntest_df = reduce_mem_usage(test_df)","311bdf83":"![image.png](attachment:image.png)","b58f6f2b":"### 3. Data Exploration","28a4ba87":"### 2. Read Data","1cc9d364":"![image.png](attachment:image.png)","3f62b2a7":"#### Memory Optimization","eaec3d9e":"#### Basic statistics of variables","510665ef":"### Data Description","a775f54c":"## TO BE CONTINUED ...\n\n#### the kernel is still in progress","b0dd6fd1":"Bed Grade and City_Code_Patient have missing entries in both train and test set","f59aa6ba":"![image.png](attachment:image.png)","a3d66346":"### Observations\n\n\n1. There are no common patients observed in both train and test data\n2. Bed Grade and City_Code_Patient have missing entries in both train and test set\n3. Majority of the patient cases had 21-30 days as Stat time in hospital\n4. Median age of patients is 41-50 group\n5. Median admission deposit is ~5000\n6. Hospital_type_code distribution is majorly with a, b\n7. Majority of cases are found at Hospital_code-26 \n8. City_Code_Hospital - 0 has majority of cases \n9. Gynecalogy department has majority of patient admissions\n10. Ward_type 'R' and 'Q' has majority of cases\n11. Ward_Facility_Code 'E' and 'F' have majority of cases\n12. Moderate patients are captured majroly in this data\n13. Hospital_region_code - 'X' and 'Y' majorly contributed \n14. Bed Grade - 2 and 3 have more cases\n15. data set size is optimized\n16. Target variable is highly imbalanced","df3aac48":"### 1. Libraries","3d062d08":"#### Total Number of Patients","6e953c82":"### Problem Statement","fa647b69":"#### Target variable distribution","a80bf856":"#### Missing Values","c6e3b31e":"![image.png](attachment:image.png)","85196f1d":"#### Unique values Count"}}