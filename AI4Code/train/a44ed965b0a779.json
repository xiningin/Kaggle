{"cell_type":{"c4db0d81":"code","282a66f4":"code","63c395bf":"code","acaa8d27":"code","413568d9":"code","bc3e205e":"code","edc41708":"code","9cd47d9c":"code","36ec32a1":"code","66fccd3b":"code","e5361fdf":"code","b34e3733":"code","d8d98dfe":"code","59bf1035":"code","d062f5c1":"code","a18e9461":"code","2e608c78":"code","bdaaf84b":"code","93add88c":"code","b017ec21":"code","7fd10aeb":"code","ffdafe54":"code","0acab22f":"code","575049b6":"code","afacdf7d":"code","c01e8b1e":"code","94428c6d":"code","f3eababf":"code","3f6f5072":"markdown","f213bf1a":"markdown","8d08698b":"markdown","f87ab58d":"markdown","016f5012":"markdown","99899af2":"markdown","db864acf":"markdown","cbc1a095":"markdown","5ef31612":"markdown","6e5226bd":"markdown"},"source":{"c4db0d81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","282a66f4":"df = pd.read_csv('\/kaggle\/input\/churn-modelling\/Churn_Modelling.csv')\ndf.head()","63c395bf":"import seaborn as sns\nimport matplotlib.pyplot as plt\nimport plotly.express as px\nimport plotly.graph_objs as go\nfrom plotly.subplots import make_subplots\n\nimport warnings\nwarnings.filterwarnings('ignore')","acaa8d27":"df.isnull().sum()","413568d9":"from sklearn.preprocessing import LabelEncoder\nLabelEncoder = LabelEncoder()\ndf['Geography'] = LabelEncoder.fit_transform(df['Geography'])\ndf['Gender'] = LabelEncoder.fit_transform(df['Gender'])","bc3e205e":"df.drop(['RowNumber','CustomerId','Surname'],axis = 1,inplace=True)\ndf.head()","edc41708":"x = df.drop('Exited',axis = 1)\ny = df['Exited']","9cd47d9c":"from sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.15)","36ec32a1":"from sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score\nfrom sklearn.model_selection import GridSearchCV","66fccd3b":"from sklearn.ensemble import ExtraTreesClassifier\nparam_grid = {\n                'n_estimators' : [5,7,10],\n                'criterion' : ['gini','entropy'] \n            }","e5361fdf":"grid = GridSearchCV(ExtraTreesClassifier(), param_grid, refit = True, verbose = 3) #cv = 5\ngrid.fit(x_train, y_train)","b34e3733":"print(grid.best_params_) \nprint(grid.best_estimator_)","d8d98dfe":"ETF = ExtraTreesClassifier(n_estimators = grid.best_params_['n_estimators'], \n                        criterion =grid.best_params_['criterion'],\n                         max_features = 'auto')  #x_train.shape[1]) | auto = sqrt(n_features)\nETF.fit(x_train,y_train)","59bf1035":"ETF_y_pred = ETF.predict(x_test)\nETF_accuracy = accuracy_score(ETF_y_pred,y_test)\nETF_recall = recall_score(ETF_y_pred,y_test)\nETF_precision = precision_score(ETF_y_pred,y_test)\nprint(classification_report(ETF_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(ETF_y_pred,y_test))","d062f5c1":"from sklearn.ensemble import RandomForestClassifier\nparam_grid = {\n                'n_estimators':[5,7,10],\n                'criterion':['gini','entropy'],\n                'n_jobs':[-1], # -1 indicates the processing in parallel using all CPUs\n                'max_features':['auto','log2',None] \n}","a18e9461":"RFC_grid = GridSearchCV(RandomForestClassifier(), param_grid, refit = True, verbose = 3)\nRFC_grid.fit(x_train, y_train) ","2e608c78":"print(RFC_grid.best_params_) \nprint(RFC_grid.best_estimator_) ","bdaaf84b":"RFC = RandomForestClassifier(n_estimators = RFC_grid.best_params_['n_estimators'],\n                             criterion = RFC_grid.best_params_['criterion'],\n                             max_features = RFC_grid.best_params_['max_features'],\n                             n_jobs = RFC_grid.best_params_['n_jobs'])\nRFC.fit(x_train, y_train)","93add88c":"RFC_y_pred = RFC.predict(x_test)\nRFC_accuracy = accuracy_score(RFC_y_pred,y_test)\nRFC_recall = recall_score(RFC_y_pred,y_test)\nRFC_precision = precision_score(RFC_y_pred,y_test)\nprint(classification_report(RFC_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(RFC_y_pred,y_test))","b017ec21":"from sklearn.ensemble import GradientBoostingClassifier\nGBC = GradientBoostingClassifier(random_state=10)\nGBC.fit(x_train,y_train)","7fd10aeb":"GBC_y_pred = GBC.predict(x_test)\nGBC_accuracy = accuracy_score(GBC_y_pred,y_test)\nGBC_recall = recall_score(GBC_y_pred,y_test)\nGBC_precision = precision_score(GBC_y_pred,y_test)\nprint(classification_report(GBC_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(GBC_y_pred,y_test))","ffdafe54":"from sklearn.linear_model import LogisticRegression\nlr = LogisticRegression(random_state=10,max_iter=200)\nlr.fit(x_train,y_train)","0acab22f":"lr_y_pred = lr.predict(x_test)\nlr_accuracy = accuracy_score(lr_y_pred,y_test)\nlr_recall = recall_score(lr_y_pred,y_test)\nlr_precision = precision_score(lr_y_pred,y_test)\nprint(classification_report(lr_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(lr_y_pred,y_test))","575049b6":"from sklearn.tree import DecisionTreeClassifier\nDTC = DecisionTreeClassifier(random_state=10)\nDTC.fit(x_train,y_train)","afacdf7d":"DTC_y_pred = DTC.predict(x_test)\nDTC_accuracy = accuracy_score(DTC_y_pred,y_test)\nDTC_recall = recall_score(DTC_y_pred,y_test)\nDTC_precision = precision_score(DTC_y_pred,y_test)\nprint(classification_report(DTC_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(DTC_y_pred,y_test))","c01e8b1e":"from sklearn.svm import LinearSVC\nSVC = LinearSVC()\nSVC.fit(x_train,y_train)","94428c6d":"SVC_y_pred = SVC.predict(x_test)\nSVC_accuracy = accuracy_score(SVC_y_pred,y_test)\nSVC_recall = recall_score(SVC_y_pred,y_test)\nSVC_precision = precision_score(SVC_y_pred,y_test)\nprint(classification_report(SVC_y_pred,y_test))\nprint('Confusion Matrix:\\n',confusion_matrix(SVC_y_pred,y_test))","f3eababf":"models = ['ExtraTreesClassifier','RandomForestClassifier','GradientBoostingClassifier','LogisticsRegression','DecisionTreeClassifier','SVM']\nacc_score = [ETF_accuracy,RFC_accuracy,GBC_accuracy,lr_accuracy,DTC_accuracy,SVC_accuracy]\npre_score = [ETF_precision,RFC_precision,GBC_precision,lr_precision,DTC_precision,SVC_precision]\nrec_score = [ETF_recall,RFC_recall,GBC_recall,lr_recall,DTC_recall,SVC_recall]\n\ndata = pd.DataFrame({'models':models,\n                     'accuracy_score':acc_score,\n                     'precision_score':pre_score,\n                     'recall_score':rec_score})\ndata.sort_values(by='accuracy_score',ascending=False).style\\\n        .background_gradient(cmap='RdPu',subset=['accuracy_score'])\\\n        .background_gradient(cmap='OrRd',subset='precision_score')\\\n        .background_gradient(cmap='Greens',subset='recall_score')","3f6f5072":"# Modelling","f213bf1a":"### \u2b50Support Vector Machine - SVC","8d08698b":"### \u2b50Random Forest Classifier","f87ab58d":"### \u2b50Logistics Regression","016f5012":"### \u2b50Decision Tree Classifier","99899af2":"### Label Encoding","db864acf":"### \u2b50Extremely Randomized Trees Classifier(Extra Trees Classifier)","cbc1a095":"### \u2b50Gradient Boosting Classifier\n","5ef31612":"# Data Pre-processing","6e5226bd":"# Models"}}