{"cell_type":{"188ceb7a":"code","729a2f31":"code","407ca7d4":"code","fdb265b9":"code","80618a69":"code","91183007":"code","0dc2083c":"code","8b5b0f34":"code","f1fb6eb5":"code","9cdd5087":"code","c0e656e9":"code","7e10d002":"code","07e86cc6":"code","8775843d":"code","77166d3b":"code","c659ca39":"code","c81e9977":"code","89dbda56":"code","4f495a8d":"markdown","78cd912d":"markdown"},"source":{"188ceb7a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","729a2f31":"import pandas as pd\nimport numpy as np","407ca7d4":"data = pd.read_csv('\/kaggle\/input\/vehicle-dataset-from-cardekho\/Car details v3.csv')\ndata.head()","fdb265b9":"data.isnull().sum(),data.shape","80618a69":"data.dropna(axis = 0,inplace = True)","91183007":"data.drop('owner',axis = 1,inplace = True)\ndata.drop('mileage',axis = 1,inplace = True)\ndata.drop('seller_type',axis = 1,inplace = True)\ndata.drop('torque',axis = 1,inplace = True)","0dc2083c":"data.dtypes","8b5b0f34":"data['name'] = data['name'].factorize()[0]\ndata['fuel'] = data['fuel'].factorize()[0]\ndata['transmission'] = data['transmission'].factorize()[0]","f1fb6eb5":"number = []\nfor word in data['engine']:\n    number.append((float)(word.split()[0])) \ndata['engine'] = number","9cdd5087":"data['engine']","c0e656e9":"number = []\nfor word in data['max_power']:\n    number.append((float)(word.split()[0])) \ndata['max_power'] = number","7e10d002":"data['max_power']","07e86cc6":"data.dtypes","8775843d":"from sklearn.model_selection import train_test_split","77166d3b":"Xtrain , Xtest , ytrain, ytest = train_test_split(data.drop('selling_price',axis = 1),data['selling_price'],test_size = 0.2,random_state = 41)","c659ca39":"from sklearn.preprocessing import MinMaxScaler\nscaller = MinMaxScaler()\nXtrain = scaller.fit_transform(Xtrain)\nXtest = scaller.fit_transform(Xtest)","c81e9977":"from sklearn.linear_model import LinearRegression\n\nmodel = LinearRegression().fit(Xtrain,ytrain)\nypred = model.predict(Xtest)\ncompare = pd.DataFrame()\ncompare['ypred'] = ypred\ncompare['ytest'] = ytest.reset_index()['selling_price']\ncompare","89dbda56":"from sklearn.metrics import mean_squared_error\n\nRMS = mean_squared_error(ytest,ypred,squared = False)\nR1 = model.score(Xtrain,ytrain)\nR2 = model.score(Xtest,ytest)\nRMS,R1,R2","4f495a8d":"# Model","78cd912d":"# Normalization"}}