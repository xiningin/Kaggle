{"cell_type":{"12a3165e":"code","cb29f35c":"code","6237521b":"code","1e25ba97":"code","ace76fc1":"code","cd08171a":"code","b0a05a4c":"code","494bc59c":"code","45d3ac30":"code","9090732a":"code","ea3f9f46":"code","8d2ec7c4":"code","f4172300":"code","20539574":"code","2dd6a37d":"code","3f65f061":"code","17e076d9":"code","9f973e79":"code","3585d73d":"code","0756afd8":"code","c1f83a22":"code","6c0c25d2":"code","f8557488":"code","ab88dded":"code","4b4c9512":"code","750e3312":"code","4d918d28":"code","4fddd79b":"code","1c389541":"code","e0d5ac79":"code","a6b0954d":"code","c212823f":"code","5d266286":"code","0ad04296":"code","8ea6ce2c":"code","b864c872":"code","cd5c37a7":"code","afc3353c":"code","94c3889a":"code","5622e3a7":"code","8abaf799":"code","09d227c0":"code","8da31846":"code","cc34cae7":"code","0897671b":"code","ddec8d75":"code","abaaf57d":"code","37961a7a":"code","a931ed3e":"code","da3b107c":"code","43983125":"code","236ad08d":"code","d509f427":"code","dcb2a991":"code","a06c9d75":"code","a4a792c4":"code","a3b43dee":"code","9915aa99":"code","8bd99ead":"code","28b1893b":"code","d7567b2e":"code","6d575c0b":"code","0858235b":"code","46160bdd":"code","2e761b15":"code","565d6612":"code","445ccb56":"code","fe70585e":"code","8ace0fec":"markdown","64d33ba0":"markdown","64caa60f":"markdown","8a2ca1f2":"markdown","7fd6e5e3":"markdown","9a992c1d":"markdown","e4e29f80":"markdown","4890e87c":"markdown","fcb51fb8":"markdown","5dfefac3":"markdown"},"source":{"12a3165e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier","cb29f35c":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","6237521b":"train_df = pd.read_csv('\/kaggle\/input\/analytics-vidhya-loan-prediction\/train.csv')\ntest_df = pd.read_csv('\/kaggle\/input\/analytics-vidhya-loan-prediction\/test.csv')\nprint(\"Train Data\")\ntrain_df.head()","1e25ba97":"print(train_df.shape)\nprint(test_df.shape)","ace76fc1":"train_df.info()","cd08171a":"#Finding the count of null values\nnull_counts = train_df.isnull().sum()\nnull_counts","b0a05a4c":"test_df.head()","494bc59c":"testinfo = test_df.info()\ntestinfo","45d3ac30":"testnull = test_df.isnull().sum()\ntestnull","9090732a":"uniq_dep = test_df['Dependents'].unique()\nprint(uniq_dep)\nprint(test_df['Loan_Amount_Term'].unique())\nuniq_cr_hist = test_df['Credit_History'].unique()\nprint(uniq_cr_hist)","ea3f9f46":"cat=[]\nnum = []\nfor i in train_df:\n    if train_df.dtypes[i] == 'object' and i != 'Loan_Status':\n        cat.append(i)\n    else:\n        num.append(i)\nprint(\"Categorical Columns\\n\",cat)\nnum.remove('Loan_Status')\nprint(\"Numeric Columns\\n\",num)\n","8d2ec7c4":"for i in cat:\n    train_df[i].fillna(train_df[i].mode()[0],inplace=True)\n    test_df[i].fillna(test_df[i].mode()[0],inplace=True)\nfor j in num:\n    if j=='Credit_History':\n        train_df[j].fillna(train_df[j].mode()[0],inplace=True)\n        test_df[j].fillna(test_df[j].mode()[0],inplace=True)\n\n    train_df[j].fillna(train_df[j].mean(),inplace=True)\n    test_df[j].fillna(test_df[j].mean(),inplace=True)\n","f4172300":"train_df['Credit_History'].unique()","20539574":"testnull = test_df.isnull().sum()\ntestnull","2dd6a37d":"null_counts = train_df.isnull().sum()\nnull_counts","3f65f061":"sns.set_style(\"ticks\")\nplt.figure(figsize=(10,8))\nsns.set_context(\"paper\")\npalette = sns.color_palette(\"Paired\")\nsns.countplot(x=train_df['Gender'],palette=palette)","17e076d9":"pallete = sns.color_palette(\"Set1\",10)\nsns.countplot(x=train_df['Education'],palette=pallete)","9f973e79":"pallete = sns.color_palette(\"Set2\",10)\nsns.countplot(x=train_df['Self_Employed'],palette=pallete)","3585d73d":"pallete = sns.color_palette(\"Set1\",2)\nsns.countplot(x=train_df['Married'],palette=pallete)","0756afd8":"pallete = sns.color_palette(\"Set3_r\",11)\nsns.countplot(x=train_df['Married'],palette=pallete)","c1f83a22":"plt.figure(figsize=(10,8))\npallete = sns.color_palette(\"Set1\")\nsns.countplot(x=train_df['Dependents'],palette=pallete)","6c0c25d2":"pd.crosstab(train_df.Dependents,train_df.Loan_Status,margins=True)","f8557488":"pallete = sns.color_palette(\"Set1\")\n\nsns.countplot(x=train_df['Property_Area'],palette=pallete)","ab88dded":"pd.crosstab(train_df.Property_Area,train_df.Loan_Status,margins=True)","4b4c9512":"train_df['Dependents'].replace({'3+':'3'},inplace=True)\ntrain_df['Dependents'].unique()\n","750e3312":"#pallete = sns.color_palette(\"Set1\",10)\nplt.figure(figsize=(10,6))\nsns.histplot(x=train_df['ApplicantIncome'],color='purple')\nprint(\"Mode:\",train_df['ApplicantIncome'].mode()[0])\nprint(\"Mean:\",train_df['ApplicantIncome'].mean())\n\n","4d918d28":"#print(train_df['CoapplicantIncome'].unique())\nplt.figure(figsize=(10,6))\nsns.histplot(train_df['CoapplicantIncome'],color='black')\nprint(train_df['CoapplicantIncome'].mode()[0])\nprint(\"Mean:\",train_df['CoapplicantIncome'].mean())\n","4fddd79b":"train_df['TotalIncome']=train_df['ApplicantIncome']+train_df['CoapplicantIncome']\npallete = sns.color_palette(\"bright\")\nplt.figure(figsize=(10,6))\nsns.distplot(train_df['TotalIncome'],color='g')\nprint(\"Mode:\",train_df['TotalIncome'].mode()[0])\nprint(\"Mean:\",train_df['TotalIncome'].mean())","1c389541":"print(num)","e0d5ac79":"plt.figure(figsize=(10,6))\nsns.distplot(train_df['LoanAmount'],color='blue')\nprint(train_df['LoanAmount'].mode()[0])\nprint(\"Mean:\",train_df['LoanAmount'].mean())","a6b0954d":"plt.figure(figsize=(10,6))\nsns.distplot(train_df['Loan_Amount_Term'],color='blue')\nprint(train_df['Loan_Amount_Term'].mode()[0])\nprint(\"Mean:\",train_df['Loan_Amount_Term'].mean())","c212823f":"plt.figure(figsize=(10,6))\nsns.countplot(train_df['Credit_History'],color='black')\nprint(train_df['Credit_History'].mode()[0])\nprint(\"Mean:\",train_df['Credit_History'].mean())\nprint(train_df['Credit_History'].unique())","5d266286":"sns.regplot(x=\"ApplicantIncome\",y=\"LoanAmount\",data=train_df)","0ad04296":"plt.figure(figsize=(10,6))\npallete = sns.color_palette(\"Set1\")\nsns.boxplot(x='Property_Area',y='LoanAmount',hue='Education',data=train_df,palette=pallete)\n","8ea6ce2c":"plt.figure(figsize=(10,6))\npallete = sns.color_palette(\"Set3\")\nsns.boxplot(x='Property_Area',y='LoanAmount',hue='Gender',data=train_df,palette=pallete)","b864c872":"plt.figure(figsize=(10,6))\npallete = sns.color_palette(\"Set2\")\nsns.boxplot(x='Property_Area',y='LoanAmount',hue='Married',data=train_df,palette=pallete)","cd5c37a7":"plt.figure(figsize=(10,6))\npallete = sns.color_palette(\"deep\")\nsns.boxplot(x='Property_Area',y='LoanAmount',hue='Self_Employed',data=train_df,palette=pallete)","afc3353c":"plt.figure(figsize=(10,6))\npallete = sns.color_palette(\"Set2\")\nsns.boxplot(x='Property_Area',y='LoanAmount',hue='Dependents',data=train_df,palette=pallete)","94c3889a":"status = pd.crosstab(train_df['Credit_History'],train_df['Loan_Status'])\nstatus.plot(kind='bar',color=['green','cyan'])","5622e3a7":"plt.figure(figsize=(10,6))\ndf = train_df.drop(columns=['Loan_ID','Loan_Status'])\n#print(df.columns)\nsns.heatmap(data=df.corr(),annot=True,square=True)","8abaf799":"train_df.head()","09d227c0":"loan_id = train_df['Loan_ID']\ntrain_df.drop(columns=['Loan_ID'],inplace=True)\ntrain_df.head()","8da31846":"train_df['Gender'].replace({'Male':1,'Female':0},inplace=True)\ntrain_df['Education'].replace({'Graduate':1,'Not Graduate':0},inplace=True)\ntrain_df['Property_Area'].replace({'Rural':0,'Semiurban':1,'Urban':2},inplace=True)\ntrain_df['Self_Employed'].replace({'Yes':1,'No':0},inplace=True)\ntrain_df['Married'].replace({'Yes':1,'No':0},inplace=True)\n","cc34cae7":"train_df.head()","0897671b":"loan_st = train_df['Loan_Status']\ntrain_df.drop(columns=['Loan_Status'],inplace=True)\ntrain_df['Loan_Status'] = loan_st ","ddec8d75":"train_df.head()","abaaf57d":"loan_id = test_df['Loan_ID']\ntest_df.drop(columns=['Loan_ID'],inplace=True)\ntest_df.head()","37961a7a":"test_df['Gender'].replace({'Male':1,'Female':0},inplace=True)\ntest_df['Education'].replace({'Graduate':1,'Not Graduate':0},inplace=True)\ntest_df['Property_Area'].replace({'Rural':0,'Semiurban':1,'Urban':2},inplace=True)\ntest_df['Self_Employed'].replace({'Yes':1,'No':0},inplace=True)\ntest_df['Married'].replace({'Yes':1,'No':0},inplace=True)","a931ed3e":"test_df.head()","da3b107c":"test_df['TotalIncome']=test_df['ApplicantIncome']+test_df['CoapplicantIncome']","43983125":"#train_df.drop(columns=['TotalIncome'],inplace=True)","236ad08d":"#train_df.drop(columns=['Self_Employed','Education'],inplace=True)","d509f427":"train_df.head()","dcb2a991":"test_df.head()","a06c9d75":"#test_df.drop(columns=['Self_Employed','Education'],inplace=True)","a4a792c4":"from sklearn.ensemble import VotingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.metrics import accuracy_score, classification_report,confusion_matrix\nfrom sklearn.model_selection import train_test_split, cross_val_score","a3b43dee":"X = train_df.iloc[:,0:12]\nY = train_df.iloc[:,12]\nxtrain, xtest, ytrain, ytest = train_test_split(X,Y,test_size = 0.3)","9915aa99":"nb = GaussianNB()\ndtree = DecisionTreeClassifier()\nknn = KNeighborsClassifier(5)\nlr = LogisticRegression(max_iter=2000)\nrf = RandomForestClassifier()","8bd99ead":"vc = VotingClassifier(estimators=[('NaiveBayes',nb),('DecisionTree',dtree),('KNN',knn),('RandomForest',rf),('LogisticRegression',lr)],voting='soft')","28b1893b":"t=tuple()\naccuracies=[]\nfor clf,label in zip([nb,dtree,knn,rf,lr,vc],['NaiveBayes','DecisionTree','KNN','RandomForest','Logistic Regression','Ensemble']):\n    scores = cross_val_score(clf,X,Y,scoring = 'accuracy')\n    t=(label,scores.mean())\n    accuracies.append(t)\n\n    \n","d7567b2e":"accuracies","6d575c0b":"test_df['Dependents'].replace({'3+':'3'},inplace=True)\ntest_df.head()\n","0858235b":"model = lr.fit(X,Y)\nypred = model.predict(test_df)\n\n#accuracy = accuracy_score(Y,ypred)\n#rept = classification_report(ytest,ypred)\n\n\n","46160bdd":"FinalReport = pd.DataFrame()","2e761b15":"FinalReport['Applicant ID']=loan_id\nFinalReport['Loan Approval']=ypred\n\n","565d6612":"model = lr.fit(xtrain,ytrain)\nypred = model.predict(xtest)\naccuracy = accuracy_score(ytest,ypred)\nrept = classification_report(ytest,ypred)","445ccb56":"print(\"Accuracy:\",accuracy)\nprint(rept)","fe70585e":"FinalReport","8ace0fec":"# Predicted Results for the Applicants","64d33ba0":"*Author: Sufyan Siddiqui*","64caa60f":"**Plotting numerical columns**","8a2ca1f2":"# EDA and Prediction of Loan Status using Pandas and Ensemble Methods ","7fd6e5e3":"Importing needed libraries and modules","9a992c1d":"Preparing Train Data","e4e29f80":"Preparing Test Data","4890e87c":"Now visualizing the total income of the applicants","fcb51fb8":"**Correlations**","5dfefac3":"Here the individuals who are having coapplicant income of 0 are the outliers"}}