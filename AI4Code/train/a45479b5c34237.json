{"cell_type":{"211c05e6":"code","5de30b52":"code","e6c3d724":"code","e451fed7":"code","92b76e83":"code","83b3a0aa":"code","27786ab1":"code","b68dab17":"code","7624ec98":"code","eb5884d2":"code","a96e6c86":"code","12e18b0c":"code","7e60d640":"code","497d401d":"code","b0f29c26":"code","cd33d29d":"code","5532e81a":"code","babb103f":"code","bfb5ee92":"code","8c3d3ee6":"code","e91d3878":"code","154d0d29":"code","21de45ab":"code","7d02bd3d":"code","52d2c622":"code","9192c22f":"code","5524139d":"code","116dae3f":"code","32f67dcf":"markdown","b8e5ef5d":"markdown","37af5ebb":"markdown","849a0207":"markdown","90a5ac94":"markdown","392ba41d":"markdown"},"source":{"211c05e6":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\n","5de30b52":"df = pd.read_csv('\/kaggle\/input\/aidl\/train.csv')\ndf_test = pd.read_csv('\/kaggle\/input\/aidl\/test.csv')","e6c3d724":"df.head()","e451fed7":"df.describe().T","92b76e83":"plt.style.use('dark_background') #checking the stream times of top 50 streamers\nplt.figure(figsize = (20,7))\ndf['Stream time(minutes)'].head(50).plot.bar(color = 'orangered')\nplt.title('Comparing the different stream times (in minutes)')\nplt.xlabel('Streamers')\nplt.ylabel('Count')\nplt.show()","83b3a0aa":"plt.style.use('dark_background') #checking the followers gained by our Top 50 Streamers\nplt.figure(figsize = (20,7))\ndf['Followers gained'].head(50).plot.bar(color = 'orangered')\nplt.title('Comparing the followers gained by our Top 50 Streamers')\nplt.xlabel('Streamers')\nplt.ylabel('Count')\nplt.show() ","27786ab1":"plt.style.use('dark_background') #checking the views gained by our Top 50 Streamers\nplt.figure(figsize = (20,7))\ndf['Views gained'].head(50).plot.bar(color = 'orangered')\nplt.title('Comparing the views gained by our Top 50 Streamers')\nplt.xlabel('Streamers')\nplt.ylabel('Count')\nplt.show()  ","b68dab17":"plt.style.use('dark_background') #checking the Average nmber of viewers of our Top 50 Streamers\nplt.figure(figsize = (20,7))\ndf['Average viewers'].head(50).plot.bar(color = 'orangered')\nplt.title('Comparing the average viewers of our Top 50 Streamers')\nplt.xlabel('Streamers')\nplt.ylabel('Count')\nplt.show()  ","7624ec98":"plt.style.use('dark_background') #checking the streamers that stream in a perticular language\nplt.figure(figsize = (20,7))\ndf['Language'].value_counts().head(20).plot.bar(color = 'orangered')\nplt.title('Languages that Streamers stream in')\nplt.xlabel('Languages')\nplt.ylabel('Count')\nplt.show()","eb5884d2":"df.dtypes","a96e6c86":"sns.countplot(x='Partnered',data = df) #checking how many are twitch partnered","12e18b0c":"df[df['Partnered'] == True][['Channel', 'Watch time(Minutes)', 'Stream time(minutes)', 'Followers']].head(10) #checking 10 streamers that are twitch partnered","7e60d640":"sns.countplot(x='Mature',data = df) #checking how many streams are tagged as mature","497d401d":"plt.figure(figsize=(12,8))\nsns.heatmap(df[['Channel', 'Watch time(Minutes)', 'Stream time(minutes)', 'Followers','Peak viewers','Average viewers','Followers gained','Views gained','Partnered','Mature','Language']].corr(), annot = True) #overall correlation between the various columns present in our data\nplt.title('Overall relation between columns of the Dataset', fontsize = 20)\nplt.show()","b0f29c26":"def streamer(x): #method to check stats of an individual streamer\n    return df.loc[df['Channel']==x]","cd33d29d":"def lang(x): #method to check the details about a streamer that streams in a particular language\n        return df[df['Language'] == x][['Channel','Followers','Partnered','Mature']].head(10)","5532e81a":"streamer('Anomaly')","babb103f":"lang('Spanish')","bfb5ee92":"plt.figure(figsize=(12,8)) #comparing streaming time v\/s followers gained\nsns.lineplot(df['Stream time(minutes)'], df['Followers gained'], palette = \"Set1\")\nplt.title('Streaming time v\/s Followers gained', fontsize = 20)\nplt.show()","8c3d3ee6":"plt.figure(figsize=(12,8)) #comparing streaming time v\/s average viewers\nsns.lineplot(df['Stream time(minutes)'], df['Average viewers'], palette = \"Set1\")\nplt.title('Streaming time v\/s Average Viewers', fontsize = 20)\nplt.show()","e91d3878":"X = df[['Watch time(Minutes)','Stream time(minutes)','Peak viewers','Average viewers','Followers','Views gained']]\ny = df['Followers gained']","154d0d29":"from xgboost import XGBRegressor\n\ny = df['Followers gained']\nX = df.drop(['Followers gained'], axis=1).select_dtypes(exclude=['object'])\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.25)\n\ntrain_X = train_X.select_dtypes(exclude=['object'])\ntest_X = test_X.select_dtypes(exclude=['object'])\n\nmodel_xgb = XGBRegressor(n_estimators=1000)\n# Add silent=True to avoid printing out updates with each cycle\nmodel_xgb.fit(train_X, train_y, early_stopping_rounds=5, eval_set=[(test_X, test_y)], verbose=False)\n\npredictions_XGB = model_xgb.predict(test_X)","21de45ab":"from catboost import CatBoostRegressor\n\ny, X, train_X, test_X, train_y, test_y, cbr, cb_pred = [None] * 8\ny = df['Followers gained']\nX = df.drop(['Channel', 'Followers gained'], axis=1)\n\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.25)\n","7d02bd3d":"# CATBOOST\n# catmodel = CatBoostRegressor(iterations=2,\n#                           learning_rate=1,\n#                           depth=2)\ncbr = CatBoostRegressor(logging_level='Silent', random_state=45, \n                        early_stopping_rounds=300, )\n\ncbr.fit(train_X, train_y, cat_features=[6,7,8], plot=True)\ncb_pred = cbr.predict(test_X, verbose=True)","52d2c622":"from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error\n\n# XGBoost\nprint('--------------- XGBOOST -----------')\nprint('r2 score: '+str(r2_score(test_y, predictions_XGB)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(test_y, predictions_XGB))))\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(predictions_XGB, test_y)))\n\n# CatBoost\nprint('\\n--------------- CATBOOST -----------')\nprint('r2 score: '+str(r2_score(test_y, cb_pred)))\nprint('RMSE : '+str(np.sqrt(mean_squared_error(test_y, cb_pred))))\nprint(\"Mean Absolute Error : \" + str(mean_absolute_error(cb_pred, test_y)))\n\n","9192c22f":"pred_xgb = model_xgb.predict(df_test.select_dtypes(exclude=['object']))\npred_cat = cbr.predict(df_test.drop(['Channel'], axis=1), verbose=True)","5524139d":"submission_result = pd.DataFrame({'Channel': df_test.Channel, 'Followers gained':  pred_cat})","116dae3f":"submission_result.to_csv('submission.csv', index=False)","32f67dcf":"# TRAINING","b8e5ef5d":"## 1. XGBOOST","37af5ebb":"## 3. Evaluate Results","849a0207":"## 2. CatBoost Regressor","90a5ac94":"# SUBMISSION","392ba41d":"# EDA (Copy from https:\/\/www.kaggle.com\/aayushmishra1512\/twitch-top-streamers-data-eda-linearreg)"}}