{"cell_type":{"57b3b39e":"code","eb5dbdc8":"code","0b944324":"code","c585e6ca":"code","6e739057":"code","e574a348":"code","0d7b349b":"code","3aa64636":"code","296fa921":"code","36704e55":"code","1012f93d":"code","9b24172f":"code","d17c08fa":"code","7b4d0d18":"code","3ffd581f":"code","e0108d88":"code","5a259535":"code","460e7eb2":"code","fe8d76fc":"code","4462190d":"code","cf9d619a":"code","e7c29c39":"code","a908e44a":"code","e6f467f1":"code","4c021925":"code","3e90d787":"code","5917ac84":"code","15bf040f":"markdown","aa4678aa":"markdown","fa0d3d4c":"markdown","52a5238b":"markdown","d85fe126":"markdown","5e7646a8":"markdown","08d0e86b":"markdown","bd05aa78":"markdown","715cd3fb":"markdown","9d22d4d3":"markdown","23d298c4":"markdown","42f40043":"markdown","56d0800e":"markdown","6eb4081d":"markdown","910f54d3":"markdown","c0fdb3af":"markdown","6b950bda":"markdown","92d08d78":"markdown"},"source":{"57b3b39e":"!pip install scipy==1.2 --upgrade","eb5dbdc8":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import Normalizer \nimport statsmodels.api as sm","0b944324":"sns.set(color_codes=True)\nwines = pd.read_csv(\"..\/input\/winequality.csv\")\nwines.info()","c585e6ca":"wines.head()","6e739057":"wines.describe()","e574a348":"high_rated_wines = wines.loc[wines['quality'] == 8]\nhigh_rated_wines.describe()","0d7b349b":"sns.pairplot(high_rated_wines)","3aa64636":"for feat in high_rated_wines.columns.drop('quality') :\n    print(feat)\n    print(high_rated_wines[feat].min())\n    print(high_rated_wines[feat].max())","296fa921":"wines.isnull().any().any()","36704e55":"transformed = Normalizer().transform(wines).reshape(1599,12)\ntransformed_df = pd.DataFrame(transformed, columns = wines.columns)\ntransformed_df.describe()","1012f93d":"q2 ='quality'\nY = transformed_df.loc[:,'quality']\nfor q1 in transformed_df.columns :\n    plt.figure()\n    sns.regplot(x = q1, y = q2, data = transformed_df, color='green')\n    plt.xlabel(q1)\n    plt.ylabel(q2)","9b24172f":"    for f in ['fixedacidity', 'totalsulfurdioxide', 'sulphates', 'alcohol', 'pH'] :\n        X = transformed_df.loc[:, f]\n        X = sm.add_constant(X)\n        model = sm.OLS(Y, X).fit()\n        print(f, \"vs Quality\")\n        print(model.summary())\n        print(\"\\n\\n\\n\")","d17c08fa":"from sklearn.model_selection import KFold\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nimport statistics","7b4d0d18":"Y = transformed_df.quality\nX = transformed_df.drop('quality', axis = 1)","3ffd581f":"scores = []\nr2 = []\nkf = KFold(n_splits=10)\nfor train_index, test_index in kf.split(X,Y) :\n    x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n    RegModel = LinearRegression()\n    RegModel.fit(x_train, y_train)\n    y_pred = RegModel.predict(x_test)\n    scores.append(metrics.mean_squared_error(y_test,y_pred))\n    r2.append(metrics.r2_score(y_test,y_pred))\nprint(statistics.mean(scores))\nprint(statistics.mean(r2))\n","e0108d88":"features = ['fixedacidity', 'totalsulfurdioxide', 'sulphates', 'alcohol', 'pH']\nY = transformed_df.quality\nX = transformed_df[features]","5a259535":"feat_scores = []\nfeat_r2 = []\nkf = KFold(n_splits=10)\nfor train_index, test_index in kf.split(X,Y) :\n    x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n    RegModel = LinearRegression()\n    RegModel.fit(x_train, y_train)\n    y_pred = RegModel.predict(x_test)\n    feat_scores.append(metrics.mean_squared_error(y_test,y_pred))\n    feat_r2.append(metrics.r2_score(y_test, y_pred))\nprint(statistics.mean(feat_scores))\nprint(statistics.mean(feat_r2))","460e7eb2":"from sklearn.model_selection import train_test_split\nimport pylab","fe8d76fc":"for i in range(0,10) :\n    X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.33)\n    reg = LinearRegression()\n    reg.fit(X_train,y_train)\n    pred_vals = reg.predict(X_test)\n    true_vals = y_test\n    residuals = true_vals - pred_vals\n    sm.qqplot(residuals, line='s')\n    pylab.show()\n    print(\"\\n\")","4462190d":"from sklearn.tree import DecisionTreeRegressor","cf9d619a":"Y = transformed_df.quality\nX = transformed_df.drop('quality', axis = 1)","e7c29c39":"tree_scores = []\ntree_r2 = []\nkf = KFold(n_splits=10)\nfor train_index, test_index in kf.split(X,Y) :\n    x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n    RegTree = DecisionTreeRegressor()\n    RegTree.fit(x_train, y_train)\n    y_pred = RegTree.predict(x_test)\n    tree_scores.append(metrics.mean_squared_error(y_test,y_pred))\n    tree_r2.append(RegTree.score(x_test, y_test))\nprint(statistics.mean(feat_scores))\nprint(statistics.mean(feat_r2))","a908e44a":"from sklearn.ensemble import RandomForestRegressor","e6f467f1":"Y = transformed_df.quality\nX = transformed_df.drop('quality', axis = 1)","4c021925":"ranfores_scores = []\nranfores_r2 = []\nkf = KFold(n_splits=10)\nfor train_index, test_index in kf.split(X,Y) :\n    x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n    RanForest = RandomForestRegressor(n_estimators=100)\n    RanForest.fit(x_train, y_train)\n    y_pred = RanForest.predict(x_test)\n    ranfores_scores.append(metrics.mean_squared_error(y_test,y_pred))\n    ranfores_r2.append(RegTree.score(x_test, y_test))\nprint(statistics.mean(ranfores_scores))\nprint(statistics.mean(ranfores_r2))","3e90d787":"features = ['fixedacidity', 'totalsulfurdioxide', 'sulphates', 'alcohol', 'pH']\nY1 = transformed_df.quality\nX1 = transformed_df[features]","5917ac84":"pranfores_scores = []\npranfores_r2 = []\nkf = KFold(n_splits=10)\nfor train_index, test_index in kf.split(X1,Y1) :\n    x_train, x_test = X.iloc[train_index], X.iloc[test_index]\n    y_train, y_test = Y.iloc[train_index], Y.iloc[test_index]\n    pRanForest = RandomForestRegressor(n_estimators=100)\n    pRanForest.fit(x_train, y_train)\n    y_pred = RanForest.predict(x_test)\n    pranfores_scores.append(metrics.mean_squared_error(y_test,y_pred))\n    pranfores_r2.append(RegTree.score(x_test, y_test))\nprint(statistics.mean(pranfores_scores))\nprint(statistics.mean(pranfores_r2))","15bf040f":"## **LinearRegression Model**\nLet us seperate training set and test set, and fit the model. We will do one model that includes all the features and one model that includes on the features that we have shown to be highly correlated to the dependent variable. ","aa4678aa":"Now let's create a Regression model with only those features that we pointed out were major predictors in the quality of the wine. ","fa0d3d4c":"## Selection of Final Model and Summary\nFrom the analysis below, we can see that the RandomForestRegressor has a better R2 score, so that would be the model that is the best.\nAs for the features that will most likely predict the quality, the LinearRegression model and our data analysis has confirmed that ['fixedacidity', 'totalsulfurdioxide', 'sulphates', 'alcohol', 'pH'] are the minimum number of features required to approximate the quality. \n","52a5238b":"The parameters above tell us that we can conclude that these variables are linearly related to quality, and maybe used as the main predictors of quality. ","d85fe126":"So, from the above scatter plots we can see that 'fixedacidity', 'totalsulfurdioxide', 'sulphates', 'alcohol', and 'pH seem to have a linear correlation. To justify this a reggression line should be fit to each of these features and the correlation parameters like R squared, P-value, Coefficients, etc should be evaluated. ","5e7646a8":"We will take all the features as input and use DecisionTreeRegressor model. ","08d0e86b":"## **Decision Tree Regressor**","bd05aa78":"Now I am going to see if the data is suitable for a Linear Regression Model. Im going to plot scatter plots of response variable (quality) against the features. This will allow me to visually determine whether or not there is a linear correlation between the features and dependent variable. ","715cd3fb":"## **Data Exploration**","9d22d4d3":"# **WINE QUALITY ANALYSIS**\n<img src=\"data:image\/jpeg;base64,\/9j\/4AAQSkZJRgABAQAAAQABAAD\/2wCEAAkGBxMSERUSEhIWFhUXFxgWFxUVFhUYFRgYGBUXFxUVFRcYHyggGBomGxcWITEhJyorLi4vGB8zODMsNygtLisBCgoKDg0OGhAQGyslHx0tLS0tLi0tLS0tLS0tLS8tLS0tLS0tLS0tLi0tLS0tLS0tLS0tLS0tKy01LS0tLTctLf\/AABEIAMIBAwMBIgACEQEDEQH\/xAAcAAEAAQUBAQAAAAAAAAAAAAAABQMEBgcIAgH\/xABKEAABAwIDBAcCCgYHCQEAAAABAAIDBBEFEiEGMUFRBxMiYXGBkTKhFCNCUmKCsbLB0UNyc5Ki8DNjdLPC0uEVJCU0NURTg+II\/8QAGgEBAAMBAQEAAAAAAAAAAAAAAAECAwQFBv\/EACoRAQACAgEEAQMCBwAAAAAAAAABAgMREgQhMUFREzJxYYEFFCJCscHh\/9oADAMBAAIRAxEAPwDeKIiAiIgIiICIiAiIgIiILeuq2wxukeey23qSAAL8SSB5qwkxgAMLnNaXuDWxn2n34NPF3Hy81KTxNe0se0Oa4FrmkXBBFiCDvC17RYKW4pR1QfJLTmGQRZ+0InODi0F3C8dgC65cTvNkS2KiIiBERARYPt\/tlJSyw0VI1rqqcFwL9WRRi\/bcBqSbOsPonwNhRYpikHxkk0dW3e6Lq2xPtx6p7bAG17BwN91xvVLZK1nUtsfT3vXlWGx0Vvh1ayeJksZux4DhcWPgRwI3EcCFcK7EREQEREBERAREQEREBERAREQEREBERAREQEREBERAWvKfHZKXEmYVUNj+DyNvTSi4ee0SxjtbdkNLL6ahh4rYa1P0zQOhq8Prx7Mcga\/TdlkbICPq9Z6ImGzcNqC9rg72mOdG48y3c7zaWnzV2o7AmERkuFnOklLgN2kjmi3k0KRRAiIg0ltiyU7Qvka0lscLGudbRuaMkC\/Ml17Kew6tPErHsL2pzYjiolAMZkeWjiHQNMbLHkWRWPfZfOjvCqmoZMTdrp5esubkRR7sx5k\/JbxDQdBquTNTlbs9npckY8WrePLZ2wjr0ziPZM0pZytm7Vvr51kat8Po2QxMijFmsAaOfiTxJ3k96uF1VjUaeTktytNvkREUqCIiAiIgIiICIiAiIgIiICIiAiIgIiICIiAiIgLD+kujbUwR0wc3rHSCRrHbntZ\/SNPIFrst+bgswWG43n\/2nnazMI6QEniM1QRcX+iHE9wUSmPKc2brBLHIRezZpWC+\/sv4+qllguzdbJS1ErJYX\/BqiUSx1DbOjbK9rGyRvsbsbnBAJAHlZZ0pgkVrida2CGSV5s1jS437hoPM2CulgfSXWZ2mnHsxxunltx3thYfrZn+Mbeara3GNr4sc5LxWPbTPR6x9RVyBoDpJQ7Qjslznb3dwu4nuXSmC4YymhbEzW2rnHe9x9p7u8n00HBae6JsJjixJpYD\/AEUtyTe\/sAacN5W71nimtt3j27OvrfFMYbeo\/wAiIi2eeIiICIiAiIgIiICIiAiIgIiICIiAiIgIot+Ju650bWXDdL2vfstJ1uANXWt3FXUUrzvFvFv+VxQXSKj1h4uA8WkfaV9Ene0+aCqi8Bx5D1\/0TOfmnyt+aD2sVwlsj66vmd7LerpmN7mxtkv+9K71WSmcDfcfVdb1tZYvHUOpK4tJDqetfeOQH2JxGA6I9z2sLgeYcOShMLmWnkjdJD7cL6Zxy6Xa9pLXAcwQ9vhl71OYfMHxRvBzBzGuDud2g3VnNHK6phcLdW1kufTUuOQNbv0G8+Xdr62ehyQBl7hr5Q39QTPDB5NsPJCUiStRYvXh9LUVBPaq+sdH+o2NzohY8oo2+ZPNbE2xnLaOUNNnSAQtI3gykMuO8Al3ktOYnXdbXvpmaRUtLM23DO6Kx9BYeRWOafTu6Gupm37Q+9CmIPkxMh1rCF5AA3as47z5krfi556CB\/xR37CT7zF0MtaRERqGPVXte+7T3ERFZzCIiAiIgIiICIiAiIgIiICIiAiIgIitsTlywvI35TbxIsPeQgjcGGa79+dznDwc5zh7iplhVlhUOVjRyACvWNAFgg9IQiIPBiad7R6BefgzPmN\/dCqqB2m2qhocvWh5zC4yi+lw3ebC9yBlvc30CCTqaOMtJLRa3IWHetVS7VU8kkdDCdZa0OMl80bA0taOqIGrnkX0uBmOu5ZFtDtXT1EMFNI14FSHidrSM0GTK17Jm779Y5rS3lm4b9WbO4U+HFYIWSRzFpaXzWcyOMhueWPXfYAgHjfhwrMtKxru6NY\/fr9nK6tMBb\/u8ZPFub94l34qDw7HW1RngijkztcGOly\/FatGcskBLTl7Qtobi1t6yiNga0NGgAAHcANFKjCtsazPXU8APYhY6ok\/WdeOG\/1RMfRa52HpevfiFTxmEuS44OkAH3gpHarFSaesrA7Wpk6uI3\/RXEcdvGMF\/wBYqe2cwX4NRU8ljd9PaQcA58sMjNOGmcei5bTNpmYeviiuKlYnzP8Av\/jDehIBmI66OLXMt4Mc4\/d9y6BWisPw80mPUsjdI5ZH6cnPjcwjwu4EeJW9HOA3rfFO67cfXRxya\/R9XwlUjKToP9fTh52XwQX1cb\/z7vJaON8fVcGguPoPXl3i6jq0VBBtKI+WVoNvEvvc+imA0BeXsugscGxEytLXgNlbo9o3Hk9vNp92oUioDFqOQWlhs2Vt8pNy082vHzTx8ARqApTC64TRh40Psvbe+R49ppP83BBQXaIiAiIgIiICIiAiIgIiICjcdf2GM+fI0fu3f\/gUkobEn5qqJnzWOefMhrT6B6CUgHZCqhYZtbtuylZaAxucHlj3vceqjLQC4HLdz33IAYNbh17WKwSq6SHZ2l1dO2xvZlPSsjPNpEsgdbzBUbTpu5FqCs6VMsZMdZA53AOpyXefVTuufJYRjHSbUSE5p6hw5RkU7PRgzHzTZp0nLK1ou5wA5kgD3qExKko650d5I3yQvEkTmPY5zHggg2BN9w0I4DiAuYa3aJsvtQtP7SSR59bgqlDjQFrQRttucwvDx4OLnFE6dFVWxh+FiqENO94JIc572Nu43c50WR4c6+t73vrcKjsts7SVLvhMlOzM2wDRfKDl1zDiRcjl3LAdk+lOaEND5uvjFgYpjado\/q5dzz3O37tFsbo8xeOZ9S2J2ZnWOlYSCHWe9\/ZcDqMoyDyUJ1OpZnGwNADQABoABYAcgFje2+IlsYpozaSYEOcP0cO6R9+BI7Le83+SVNYriTKeMySHTc1o1c9x9ljBxcf50WvsWqLtmfK4h7heV7bHqxazYoy7S4BsL2FyTqTY1yW1Hby26XFzvufEMMxPD5MWmbTUvYpafR8xByF9rBjAPaIH2m\/C+c4rtKxlNLBMx0UzY7xsky2kEZFnRvYSCNBobO7lh8e0xIhocOywWBLnPbfq4wdDr7b3bzv3872o9IF+phlkkMhjkbmJAAINw6zRz00ud2lljWYiNPQvWb25fCYx+UO6ipA1gmjlzAjKA1wL7u8L9+7RbcjgJ1c7yaT73bz7vBc\/4eyorKNkbpWZCMpdlJdlabCwOhJtvPos+wjpIjibHHUgssBH1lrtc5oykG2rTccRxUdPeI3X4R\/EMFp43iPTZLGgCwAA5BelGYZjsM4ux4I5ggj1Ck11RO3kTWY8iIilCnKy4WMzv+CVIm3RS2ZMOAP6OXutuJ5c7BZUorG6ISRPYRo4EIJVFjmw+KGWAxPN5ID1br7y39G499tCeJaVkaAiIgIiICIiAiIgIiIC0t0rbaTUtY+OleGyOYxjpCAera3MTlvoHEu32Ng3vW6CVyPtHVGpxKZw16ypeBuOhlLRv7rImFOlmlcMkOZ9iSZMr5LF2rnNaAbE87XPNXuF7I1Ez+zR1Mp3kuY6KM\/WIt\/EFvXAocrQBoAOCyanC45zzPhvw00LHsbiTdIsOLO9rYL+bpJCV7b0dYo43+CMb+0fTHzIF10C1fbqvNEzLQkfRVX6Z6enN9\/x72+bctwD5K2xjonmjGZjXHjlD43O8LktB9F0DIorEHbxxGvkb2T6toTEbcvYps\/NTZeuY5mckNDi3Npa9wCbbwsu6I9pfgM0z39phiyiPMG3eXsLTryAI0B39yvOlr26f9d\/2NWCUDiGuI3dn1sR+K6K3mabWpSJvxlviXFXzD4TUPYwNBygZssbTy3Eki3auCd1iNFgGP4m6olbBBcOIz5pDZsTL\/0z2DstdxAtoLbyVGY1jNTJTxlwsWBvZbqBppK++4kWsOAI5rGXYk4x5ATckue6+r3HmeQVK1tbvZ3WtTHHGi9xGVkVQRTvJaOz1lzmebdtxPebrKmV4no3RNN3hmW5+dbh+a1\/GVeU9WW7jZMuPlrXmGnSZIrvl4ln+ys3V07GEWIG48NSse2wdCZLk6nl9pUXHj0rOIcO\/wD0VvW4qJvaYB37\/cuamC9cnJ6WTqMFsPD3+sPlFis0F+pnkjvr8W9zb+Nis32R22xIDMayMRc6ktcARob7nDyKwEwRAXMjj9EMsfUmwVxRYi2Egx08VxudIDI+\/mQ0eQXfExHl4F8drT\/TDd9D0gV2UOdTQTtN7Pp5TZ1vm3Fv4lev6SZW+1hdQLb+3D+LlorGcfmqW5Z+rd812XK5vIAtOo7jdQsRLe01xaebTY+5TExLK2C1fMOhX9Lgbvw2qtwt1bj5gHRWNV00xNNpqCqjadxcGgnyda\/qtKf7cqh\/3Evm9x+1WVVUyzOGd8kh4ZnOefIG6tHdlak1bj6PtsWPxV7mXbDO8hodoR1hDg1wBPaEpPGwBW8Fx1g1b1BaQT1vWAtynRvAlxG\/QnT1XXuHVIlhjlG57Gv\/AHmg\/iplkuERFAIiICIiAiIgIiILPGX5aeZxNrRvN\/BhK5O2Tj62vgB4vznyBf8AguntvZ+rwysfygk97CPxXOnRnBmxBp+bG533W\/4iq3nVJWp5hvnCmaBT8AURhrdApmILznRKs1ECKzNTkUViO4qUkKiMTdp4nTyCrLSrTnSz7VP+u77GrX1PLYHubm8bZdPsWfdKzvjKYfSefQMUf0XYZSzyzNq2gxiCwcb2a4uZrmGjTppfkV2YvsInV1Oq2niOGvga1plc4g3BuAXXBBt2rNyjfwHJYWFVrGOhe+G9w15HcbHsvHiLHwKpNkbxzDwAP4rWlOML3y85iZ9PYNlXiY53si6pxvjvuef57gpKHEANzHeh\/FRadem+GnOe89lq\/D3gZjYAb9UswNF7njp+X5q9q65z25RGQOJuAftKtG05JuWC3IuI94WMWmfLtnFxiYpWZ\/aX107cuUF7hr7QaONwNCeKtHhXjqK\/zW9wLj9uvvVVlE0cB6X+9dWnJWPZXpM9\/wCzX50i3OuvscZO4fn7tVMdQ3l5cPTcvYIAsB6Kk5o9Q6K\/wu8zu9oj8d0W2hdxHqbe4fmF7fBYWvpyGgPiB7XndXxKtpiqxktMrX6HDSN63+UUdDpwXXexL74fS\/sWD0bYfYuSI2Zngc3AepXX2y9P1dHTsO8Qxg+OQX967I8Pm8\/3JRERGAiIgIiICIiAiIgw7pdqCzCKmzSczQw2+SHOAzHu\/NaX6Io71UzuTAPV\/wD8rdnSuL4RV\/sx99t1pzodHx9Se5n3pFnl+yV6eW7KAaBSsYUbQ7lIsK4W8qwXwryCvhKlTTxKVC4k70t534\/gpWd6gsTk0VWkNO9KUl54O5sp9zPyWXf\/AJ6pv+ccRcERM7tA82\/iWDdJEuarYOUR\/icR+C2l0BUmWgmk\/wDJO70Yxrftuu\/D9kMMnlg3Tzss2mqY6qFgbFM3I4NFmtkYNPAFlrD6BWrmrqfpTomVFEKZzCTNIGMeP0cga57JCOLbtsba2cVy5V0z4pHRyNyvaS1wPAhawUmYVYHq+YVFxuV9E9c+WHudFl7aXbSvYKoNcvYcueXr1urXTMqeZMyq15qt15LlTL15c9NFsunp71ZzvXuR6s53rXHXcvM6vqNVlLbE4YaqvghAvmeL+F9T5Xv5LrposLBaE6AtnZHVJrS20TGuaCd5kcAAG+DHOJP02+W\/F2Pmck7kRERQREQEREBERAREQQG31L1uGVkY3mCS3iGkj7FozokktU1A5hp9HO\/zBdHzRhzS1wuHAgjuIsVzNgERocYfTu0sZIfGxzMd5hoP1lTJG6ytTy3vRP0Uix6xygqtApaOoXDLo8pHMvDnq169eHzqDT7USLHcams0fSdYeWrj9nqpKrqFiuOVVzmJ3Nygchck+unoEiEtTbZ1Gask7gxn+MroXoqoOpwmmaRYvYZT\/wCxxePcQub6eF1ZWZG3PWSkXG\/LuuPBgJXXNNEGMaxosGtDQOQAsAvQrGqxDmtO5UsRoGTs6uQXFwdCWkEbi1w1BWmumrYMANrKdp0aGyjVxOUdl5J1Jte5W7lTnha9pY8AtIsQdxVkbcWOuDYjVVoJVsDpW2IdT1BfDE7I4XbbUOA+bzc0aFu+wBFxe2tgUtXcOnDmmk7SbXqoHqPZMqgnXNOOXsY+rr8r3OmdWnXhfDUKn05a\/wA3X5XZeqb5FaOqFSdISrxilz5Otj0rSzK82ewiSrqGQxNzOc4ADh5ngLAkngASralwyV8rIgw9ZI5rWsOhJcbNGu6552XSvRp0fsw2PrJMr6lzbOcPZYDYljL79QLu0vYclvWsVeXmzzfyybZrBmUdNHTs1DBq61i5x1e8+LiT3blJois5BERAREQEREBERAREQFpfp12ccySPE4RqC1kpHAj+jee75J8luhW+IUTJ4nwytDmPaWuB4goNO7MbQtmia8HuI5HiCspgxDvWAYxshNhFQ9zWPmppGlsb2gkteSMgeBoHbxrob89Ff4digIAccjuLH2a8eLblcl8ep7N4szgVypyVqgo5yRpr4KD2pxqWmiL2sDj9IkW77Aa+oWfGVtsmrcQ03rXu1207BniY4uf7OnA21PkT4lYpiGOVdQS10tm2uRGQ1tvEanwuVmnRr0dPrpBUztLaYG97W623yI93Z4F3kNd3RTDrvLO1\/hlHQRseY2GvlbYuBZAD835cnn7I7gea3CvEUYa0NaAGgAAAWAAFgAOAXtbshERB5kjDhYi4Wq9p+h1lRK98UgZmJN7AFpOoBaBaQX49l3Mm2u1kRMTpyltP0e11E4h8JkZqeshBe23MgC7R4hYqGrtdQuK7J0NTcz0kLyflFgD\/AN4a+9SvF9OQzGV5LCumajoewtxuI5GdzZpLfxE2UZj\/AEK0j4iKR74pQDYve57HHhmvq0X4j0ULfUaNwbZypqpBHBE57uIFtBzN7WHeVO4lQjCiY5oJDUlpbneCyNt7awPB7RA0zN5nVUKikrsFqjmvBK5haHhrXtcwuGZ0bj2TqB3jiApfBcUmqZv90gMlQRd1XVu66ZoN9W37EI1NrXJtuKKTeZUtmMIjditFHGJRmkY9z5W5C8sJlLo2ElwZ2LBziSTqunFzrR4VUUGMUVTVymTPK1pkN\/l3iLe4DrAeGl9F0UigiIgIiICIiAiIgIiICIiAiIg8vYCCCAQRYg6gg7wQtU9IOwccL3YjTkxtZZ0sUbGCwGhkYRawG8jXitsKM2nANFU33dRLfw6t10GnIaxhGb4W7wLah32TFv8ACFYDC6rEZeopJWEjtPflfFkbwLngX1O4DU68ll+zewFBNhUM8kPxjoA9zg94uctySL29ylehLCmxYcZQNZ5Xv+q09WweHZJ+sUF\/s\/sBDHEwVdqqRtjeTM5gIHAPJLvP0WYtaAAALAaADcO4L6iAiIgIiICIiAiIgIiIIXa3ZmDEaZ1PO3fqx49qN9tHtPPu4i4K0p0dyPwzEpMOqgGlzwGu4F\/yCCd7XtIt36byuhVqTp8wPNHBWxsOeNxjkc32ursXtcT9FzSQeGYoMo6StnhVYe\/IPjIx1kZG\/M0X077XHmp3ZTFxV0cFSP0kbS63Bw0ePJwIUT0b7RCvoGveQZWfFyj6QHtW4BzSHefcrHYQ\/BKysw12jQ74VTj+rkNpGjua+376DOkREBERAREQEREBERAREQEREBQ+2P8A0+r\/ALNN\/dOX1EENs7\/0KL+yD+7Vx0YD\/hVL+ofvuREGUIiICIiAiIgIiICIiAiIgKP2gga+mma9rXNMbrtcARoCRoe9EQah6BXEVdS0Hs9SNOGk7wNO4EhZnj2mPYcRoTHUA24jq72PMX1RFMjO0RFAIiICIiAiIg\/\/2Q==\" width=\"300px\">","23d298c4":"This kernel explains the Regression Analysis that I have done. The below is what is covered in this Kernel. \n## Agenda \n1. Exploration of the features with target variable \n2. Fitting of LinearRegression Model \n3. Fitting of DecisionTreeClassifier Model\n4. Fitting of RandomForestRegresssor\n5. Selection of Final Model and Summary","42f40043":"There are no null values or missing values in any of the columns, and the quality is an integer. So I am going to proceed in my regression analysis. From the above description of the columns, the features have different units are measured differently. So to be able to compare them during the analysis, I will Normalize my data. ","56d0800e":"The two main features it looks like we need to pay attention to seems like: 'freesulfurdioxide' and 'totalsulpurdioxide'. Let's take a close look at that. I would really appreciate it if someone could help me identify outliers and how to analyse and help get rid of them. ","6eb4081d":"Exploring the high rated wines.i.e, the wines rated as 8 quality","910f54d3":"## **RandomForestRegressor Model**","c0fdb3af":"As you can see the QQ plot in the 10 samples is not completely linear. This could mean that there might be some outliers in the data (I don't know how to identify and analyze these). This definately means that the residuals are not showing complete homoscedasticity. This could affect the performance of the model, since homoscedasticity is a major assumption of simple Linear Regression. Because of this discrepency let us try to see if we can get a better model using other Regression Methods and not Simple Linear Regression","6b950bda":"So from the above two models, we can see that both the models return different values of regression accuracy. The value of R2 for the feature regression is very close to the Regression with all inputs. From this I believe it's safe to assume that the selected features contribute to a lot of the prediction of quality. Let's draw the residual plots to see if the data is normally distributed. The Q-Q plot that I do below will be for one instance.","92d08d78":"### Predictor RandomForestRegressor Model"}}