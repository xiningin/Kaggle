{"cell_type":{"b397497b":"code","d9a03835":"code","d7a5982c":"code","cabe3457":"code","1295934f":"code","aef1f055":"code","1de2595e":"code","25a07f12":"code","f855e366":"code","0c854ebb":"code","de3ae291":"code","4ab605c1":"code","6c5afccd":"code","97fb3ecc":"code","0630f0f4":"code","0644ddb0":"code","aadc0459":"code","86c3a10b":"markdown","2b5e8f54":"markdown","bec4e852":"markdown","31150f3c":"markdown","395ce61a":"markdown","84a0a269":"markdown","aa3379a7":"markdown","a9be4757":"markdown"},"source":{"b397497b":"import numpy as np\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.metrics import roc_auc_score, accuracy_score, roc_curve, f1_score\nfrom catboost import CatBoostClassifier\nfrom tqdm import tqdm\nfrom IPython.display import clear_output\nfrom tensorflow import keras\nfrom keras.layers import Dense, LSTM, Dropout\nimport pickle\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\npd.set_option('display.max_columns', None)","d9a03835":"def validate(model, val_data):\n    y = model.predict(val_data[0])\n    print('Accuracy =', accuracy_score(y, val_data[1]))\n    print('ROC AUC =', roc_auc_score(y, val_data[1]))\n    print('F1 =', f1_score(y, val_data[1]))","d7a5982c":"orig_data = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\ndata = orig_data.copy()","cabe3457":"data.describe()","1295934f":"cat, num = [], [] # find categorical and float columns\nfor col in data.drop(columns=['Date', 'RainTomorrow']).columns:\n    if data[col].dtype == np.number:\n        num.append(col)\n    else:\n        cat.append(col)","aef1f055":"data.dropna(inplace=True)","1de2595e":"# Insert day and month\ndata['Date'] = pd.to_datetime(data['Date'])\nday, month = np.array([], dtype='int8'), np.array([], dtype='int8')\nwith tqdm(total=len(data)) as pb:\n    for index, val in data['Date'].iteritems():\n        day = np.append(day, val.day)\n        month = np.append(month, val.month)\n        pb.update(1)\ndata.insert(0, 'Day', day)\ndata.insert(0, 'Month', month)\ndata.drop(columns='Date', inplace=True)\ncat += ['Day', 'Month']","25a07f12":"# One hot encoding\ndata = pd.get_dummies(data, columns=cat)","f855e366":"data['RainTomorrow'] = data['RainTomorrow'].astype('category').cat.codes","0c854ebb":"data.info()","de3ae291":"# Add information about before days\ndata.insert(0, 'Last_days', data['RainTomorrow'].rolling(15).sum().shift(1))\ndata = data[15:]","4ab605c1":"X = data.drop(columns='RainTomorrow')\ny = data['RainTomorrow']\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=45)\nval_data = (X_test, y_test)\ncat_f = [] # Categorical columns for catboost\nfor col in X.columns:\n    if X[col].dtype == np.uint8:\n        cat_f.append(col)","6c5afccd":"%%time\nmodel = CatBoostClassifier()\nmodel.fit(X_train, y_train, verbose=0, cat_features=cat_f)","97fb3ecc":"validate(model, val_data)","0630f0f4":"model_tun = CatBoostClassifier()\ngrid = {'learning_rate': [0.03, 0.1],\n        'depth': [4, 6, 10],\n        'l2_leaf_reg': [1, 3, 5, 7, 9]}\nmodel_tun.randomized_search(grid, X=X, y=y)\nclear_output()","0644ddb0":"validate(model_tun, val_data)","aadc0459":"sns.set(font_scale=1.5)\nsns.set_color_codes(\"muted\")\nplt.figure(figsize=(10, 8))\nfpr, tpr, thresholds = roc_curve(y_test, model_tun.predict_proba(X_test)[:,1], pos_label=1)\nlw = 2\nplt.plot(fpr, tpr, lw=lw, label='ROC curve ')\nplt.plot([0, 1], [0, 1])\nplt.xlim([0.0, 1.0])\nplt.ylim([0.0, 1.05])\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC curve')\nplt.show()","86c3a10b":"# 5. Model Training","2b5e8f54":"# 3. Feature Engineering","bec4e852":"# 4. Train Test Split","31150f3c":"# 1. Import Data","395ce61a":"# 7. Draw ROC CURVE","84a0a269":"# 2. Data Preprocessing","aa3379a7":"# Rain in Australia\n**Task:** predict categorical value \"RainTomorrow\"\n\n**Model:** CatBoost Classifier\n\n**Metrics:** Accuracy, F1, ROC AUC\n<img src=https:\/\/news-images.weatherzone.com.au\/twc\/WA%20March%20heat%20records%2020190311.png width=\"500\">","a9be4757":"# 6. Optimizing Hyperparameters"}}