{"cell_type":{"b647104c":"code","b1c01bab":"code","b64a19ff":"code","8ebb993b":"code","d95ee7ca":"code","f4313aa4":"code","9315e58b":"code","14e961b1":"code","4c5bc93c":"code","c647b74c":"code","76f3bb8a":"code","d5111ea9":"code","30e1aa7f":"code","f9c812fc":"code","893af09e":"code","1393519b":"code","f9d8ecd4":"code","6a4a2a84":"code","2f823e75":"code","60760d98":"code","c84e2dea":"code","d26354c6":"code","02170dc1":"code","ea06549b":"markdown","286f1840":"markdown","8959a6bd":"markdown","e5db1da3":"markdown","532dd015":"markdown","b9003cbc":"markdown","d0490358":"markdown","7a30d2fc":"markdown"},"source":{"b647104c":"#system related imports\nimport os\nimport sys\nassert sys.version_info >= (3,5)\n#data manipulation\nimport pandas as pd\nimport numpy as np\n#visualization imports\nimport matplotlib.pyplot as plt\nfrom matplotlib.image import imread\nimport seaborn as sns\n%matplotlib inline\n# consistent plot size\nfrom pylab import rcParams\nrcParams['figure.figsize'] = 15,7\nrcParams['axes.labelsize'] = 14\nrcParams['xtick.labelsize'] = 12\nrcParams['ytick.labelsize'] = 12\nrcParams['axes.titlesize'] = 16\n#ignore warnings\nimport warnings\nwarnings.filterwarnings(action='ignore',message='')\n#deep learning framework\nimport tensorflow as tf","b1c01bab":"'''read the train csv file'''\ntrain =  pd.read_csv('..\/input\/cassava-leaf-disease-classification\/train.csv')\ntrain.head(10)","b64a19ff":"'''read the disease label into a dataframe'''\ndata = {\"0\":\"Cassava Bacterial Blight (CBB)\",\n        \"1\":\"Cassava Brown Streak Disease (CBSD)\",\n        \"2\":\"Cassava Green Mottle (CGM)\",\n        \"3\":\"Cassava Mosaic Disease (CMD)\",\n        \"4\":\"Healthy\"}\ndisease_label = pd.DataFrame(data=data.values(),index=data.keys(),columns=['Disease_Name'])","8ebb993b":"disease_label","d95ee7ca":"train_path = '..\/input\/cassava-leaf-disease-classification\/train_images'\ntest_path = '..\/input\/cassava-leaf-disease-classification\/test_images'","f4313aa4":"'''Join the train path'''\ndef image_path(image):\n    return os.path.join(train_path,image)\n\ntrain['image_id'] = train['image_id'].apply(image_path)","9315e58b":"train.head(3)","14e961b1":"train.info()","4c5bc93c":"train['label'] = train['label'].astype('str')","c647b74c":"str(disease_label.iloc[3])","76f3bb8a":"'''view one of the images in the train set randomly'''\nindex = np.random.randint(0,len(train))\n\nplt.imshow(imread(train['image_id'][index]))\nplt.title('Cassava Leaf')\n\nplt.show()","d5111ea9":"'''check the count of the various disease types'''\nsns.countplot(train['label'])\nplt.title('Count of the various disease types in Cassava leaves')\nplt.grid()\nplt.show()","30e1aa7f":"'''display the images of the same label'''\nn_rows = 3\nn_cols = 4\n\nfor row in range(n_rows):\n    for col in range(n_cols):\n        index = n_cols * row + col\n        plt.subplot(n_rows,n_cols,index+1)\n        \n        leaf_img = np.random.randint(0,len(train))\n        image_ = imread(train.iloc[leaf_img]['image_id'])\n        \n        '''display the image'''\n        plt.imshow(image_,cmap='binary',interpolation='nearest')     \n        ","f9c812fc":"'''image data augmentation'''\nimage_generator = tf.keras.preprocessing.image.ImageDataGenerator(rotation_range=0.5,\n                                                                 horizontal_flip=True,\n                                                                 vertical_flip=True,\n                                                                 brightness_range=[0.1,0.3],\n                                                                 zoom_range=[0.1,0.5],\n                                                                 fill_mode='nearest',\n                                                                 preprocessing_function=tf.keras.applications.xception.preprocess_input,\n                                                                 validation_split=0.2,\n                                                                  rescale = 1.\/255,\n                                                                  dtype='float32')","893af09e":"train_generator = image_generator.flow_from_dataframe(dataframe=train,\n                                                      directory=None,\n                                                      x_col='image_id',\n                                                      y_col='label',\n                                                      subset='training',\n                                                      color_mode='rgb',\n                                                      batch_size=32,\n                                                      seed=42,\n                                                      shuffle=True,\n                                                      class_mode='categorical',\n                                                      target_size=(224,224))","1393519b":"'''image generator on the validation data. \n   note: shuffle is set to false in this case'''\n\nvalidation_generator = image_generator.flow_from_dataframe(dataframe=train,\n                                                           directory=None,\n                                                           x_col='image_id',\n                                                           y_col='label',\n                                                           subset='validation',\n                                                           color_mode='rgb',\n                                                           batch_size=32,\n                                                           seed=42,\n                                                           shuffle=False,\n                                                           class_mode='categorical',\n                                                           target_size=(224,224))","f9d8ecd4":"def cnn_model_pretrain(xception=True,shape=(224,224,3),filters=8,kernel=4,stride=1,pad='same',unit=1024,activation=tf.nn.relu,\n              regularizer=tf.keras.regularizers.L1L2(l1=0.01,l2=0.01)):\n    \n    '''function to define the cnn model architecture with or without transfer learning'''\n    \n    input_img = tf.keras.Input(shape=shape)\n    \n    base_model = tf.keras.applications.xception.Xception(include_top=False,input_shape=shape,weights='imagenet')\n    for layer in base_model.layers:\n        layer.trainable = False\n    \n    if xception:\n        pretrain = base_model(input_img)\n    else:\n        pretrain =  input_img\n        \n    '''One layer of Conv2D, Activation and Pooling layer'''\n    Z1 = tf.keras.layers.Conv2D(filters=filters,kernel_size=(kernel,kernel),strides=stride,padding=pad)(pretrain)\n    A1 = tf.keras.layers.Activation(activation)(Z1)\n    P1 = tf.keras.layers.MaxPool2D(pool_size=(filters,filters),strides=stride*8,padding=pad)(A1)\n    \n    '''Second layer of Conv2D, Activation and Pooling layer'''\n    Z2 = tf.keras.layers.Conv2D(filters=filters*2,kernel_size=(int(kernel\/2),int(kernel\/2)),strides=stride,\n                               padding=pad) (P1)\n    A2 = tf.keras.layers.Activation(activation)(Z2)\n    P2 = tf.keras.layers.MaxPool2D(pool_size=int(filters\/2),strides=stride*4,padding=pad)(A2)\n    \n    '''Flatten the output to feed into the dense layer'''\n    F = tf.keras.layers.Flatten()(P2)\n    \n    '''Dense Layers'''\n    D1 = tf.keras.layers.Dense(units=unit,activation=activation)(F)\n    D2 = tf.keras.layers.Dense(units=unit\/2,activation=activation,kernel_regularizer=regularizer)(D1)\n    D3 = tf.keras.layers.Dense(units=unit\/4,activation=activation,kernel_regularizer=regularizer)(D2)\n    \n    '''Output layer'''\n    outputs = tf.keras.layers.Dense(units=5,activation=tf.nn.softmax)(D3)\n    \n    '''instantiate the model'''\n    model = tf.keras.Model(inputs=input_img,outputs=outputs)\n    return model  ","6a4a2a84":"regularizer = tf.keras.regularizers.L2(l2=0.005)\nshape = (224,224,3)\n\nconv_model = cnn_model_pretrain(xception=True,shape=shape,filters=8,kernel=4,stride=1,pad='same',unit=256,activation=tf.nn.relu,\n                      regularizer=regularizer)\n\n'''compile the model'''\nconv_model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nconv_model.summary()","2f823e75":"'''fit the model'''\nhistory = conv_model.fit(train_generator,epochs=5,validation_data=validation_generator,batch_size=32)","60760d98":"results = pd.DataFrame(history.history)\nresults[['loss','val_loss']].plot()\nplt.title('Model Performance with pretrained')\nplt.show()","c84e2dea":"'''without pretrained xception module'''\n\nconv_model = cnn_model_pretrain(xception=False,shape=shape,filters=8,kernel=4,stride=1,pad='same',unit=256,activation=tf.nn.relu,\n                      regularizer=regularizer)\n\n'''compile the model'''\nconv_model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])\nconv_model.summary()","d26354c6":"'''fit the model'''\nhistory = conv_model.fit(train_generator,epochs=5,validation_data=validation_generator,batch_size=32)","02170dc1":"results = pd.DataFrame(history.history)\nresults[['loss','val_loss']].plot()\nplt.title('Model Performance without pretrained network')\nplt.show()","ea06549b":"# _Data Preparation_ ","286f1840":"- <b> _Train for longer to see the variation_ <\/b>\n- <b> _Use other pretrained models like VGG16 and Reset50. Accuracy increases by atleast 6%_ <\/b> \n- <b> _Use GlobalAveragePooling instead of MaxPooling_ <\/b> \n","8959a6bd":"# _Cassava Leaf Disease Detection_\n\n","e5db1da3":"- <b> _The Cassava Mosaic Disease or CMD is most prevalent as per the dataset_ <\/b>","532dd015":"## _Load the data_","b9003cbc":"## _Upvote if you liked the notebook. Thank you !_","d0490358":"# _Functional API Convolutional Neural Network Model_","7a30d2fc":"## _Import Libraries & Load Data_"}}