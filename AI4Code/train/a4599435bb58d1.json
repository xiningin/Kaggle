{"cell_type":{"f0408cc6":"code","e830c6b8":"code","491c3eac":"code","db5ef096":"code","ca1b0b96":"code","258dbe33":"code","335febc4":"code","34c15a3b":"code","c6b8f8bf":"code","800d3c7c":"code","122835a6":"code","b92662ca":"code","9162d77d":"code","a9f2ccc4":"markdown","601b3511":"markdown","97a346c9":"markdown","37a38815":"markdown","a847cc04":"markdown","5fd7c7b7":"markdown","86577e5b":"markdown"},"source":{"f0408cc6":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","e830c6b8":"data = pd.read_csv('\/kaggle\/input\/usa-crime-data-20182019\/Crime_Data_USA.csv')\ndata.head()","491c3eac":"data.shape","db5ef096":"import matplotlib.pyplot as plt\n\n# Missing Values\nper = (data.isnull().sum()\/data.shape[0])*100\n\nprint(per)\n\nper.plot.barh()\nplt.title('Missing Values')\nplt.xlabel('Percentage')\nplt.show()","ca1b0b96":"data.dropna(inplace = True)\ndata.shape","258dbe33":"data.dtypes","335febc4":"data['Year'] = data['Year'].astype('int')\ndata['Violent Crime'] = data['Violent Crime'].astype('int')\ndata['Murder'] = data['Murder'].astype('int')\ndata['Rape'] = data['Rape'].astype('int')\ndata['Robbery'] = data['Robbery'].astype('int')\ndata['Aggravated assault'] = data['Aggravated assault'].astype('int')\ndata['Property Crime'] = data['Property Crime'].astype('int')\ndata['Burglary'] = data['Burglary'].astype('int')\ndata['Larceny Theft'] = data['Larceny Theft'].astype('int')\ndata['Motor Vehicle Theft'] = data['Motor Vehicle Theft'].astype('int')\ndata['Arson'] = data['Arson'].astype('int')\ndata.dtypes","34c15a3b":"import seaborn as sns","c6b8f8bf":"fig_dims = (16, 12)\nfig, ax = plt.subplots(5,2,figsize=fig_dims)\n\ng1=sns.barplot(x='State', y='Violent Crime', hue='Year', ax=ax[0,0], data=data, ci=None)\ng1.legend_.remove()\ng1.set(xlabel='',xticklabels=[])\n\ng2=sns.barplot(x='State', y='Murder', hue='Year', ax=ax[0,1], data=data, ci=None)\ng2.legend_.remove()\ng2.set(xlabel='',xticklabels=[])\n\ng3=sns.barplot(x='State', y='Rape', hue='Year', ax=ax[1,0], data=data, ci=None)\ng3.legend_.remove()\ng3.set(xlabel='',xticklabels=[])\n\ng4=sns.barplot(x='State', y='Robbery', hue='Year', ax=ax[1,1], data=data, ci=None)\ng4.legend_.remove()\ng4.set(xlabel='',xticklabels=[])\n\ng5=sns.barplot(x='State', y='Aggravated assault', hue='Year', ax=ax[2,0], data=data, ci=None)\ng5.legend_.remove()\ng5.set(xlabel='',xticklabels=[])\n\ng6=sns.barplot(x='State', y='Property Crime', hue='Year', ax=ax[2,1], data=data, ci=None)\ng6.legend_.remove()\ng6.set(xlabel='',xticklabels=[])\n\ng7=sns.barplot(x='State', y='Burglary', hue='Year', ax=ax[3,0], data=data, ci=None)\ng7.legend_.remove()\ng7.set(xlabel='',xticklabels=[])\n\ng8=sns.barplot(x='State', y='Larceny Theft', hue='Year', ax=ax[3,1], data=data, ci=None)\ng8.legend_.remove()\ng8.set(xlabel='',xticklabels=[])\n\ng9=sns.barplot(x='State', y='Motor Vehicle Theft', hue='Year', ax=ax[4,0], data=data, ci=None)\ng9.legend_.remove()\ng9.set_xticklabels(g9.get_xticklabels(),rotation=85)\n\ng10=sns.barplot(x='State', y='Arson', hue='Year', ax=ax[4,1], data=data, ci=None)\ng10.legend_.remove()\ng10.set_xticklabels(g10.get_xticklabels(),rotation=85)\n\nhandles, labels = g10.get_legend_handles_labels()\nfig.legend(handles, labels, title='Year', loc='upper center')\nplt.show()","800d3c7c":"new_york = data[data['State']=='NEW YORK'].drop(['Year','Population'],axis=1)\nfig_dims = (14, 10)\nfig, ax = plt.subplots(figsize=fig_dims)\nsns.barplot(ax=ax, data=new_york, ci=None)\nax.set_xticklabels(ax.get_xticklabels(), rotation=90)\nax.set_xlabel('Crimes Type')\nax.set_ylabel('Number of Crimes')\nplt.show()","122835a6":"ax = sns.catplot(data=data[data['State'].isin(['CALIFORNIA','NEW YORK'])].drop(['Year','Population'],axis=1),\n             ci=None, col='State')\nlabels = ['Violent Crime','Murder','Rape','Robbery','Aggravated assault',\n          'Property Crime','Burglary','Larceny Theft','Motor Vehicle Theft','Arson']\nax.set_xticklabels(labels,rotation=65)\nplt.show()","b92662ca":"xx18 = data[data['Year']==2018].drop(['City','Year','Population'],axis=1).groupby('State').sum()\nxx19 = data[data['Year']==2019].drop(['City','Year','Population'],axis=1).groupby('State').sum()","9162d77d":"fig_dims = (16, 12)\nfig, ax = plt.subplots(1,2,figsize=fig_dims)\n\ngg1 = sns.heatmap(\n    data=xx18, \n    square=True, # make cells square\n    cbar_kws={'fraction' : 0.1}, # shrink colour bar\n    cmap='OrRd', # use orange\/red colour map\n    linewidth=1, # space between cells\n    ax=ax[0]\n)\ngg1.set(title='2018')\n\ngg2 = sns.heatmap(\n    data=xx19, \n    square=True, # make cells square\n    cbar_kws={'fraction' : 0.1}, # shrink colour bar\n    cmap='OrRd', # use orange\/red colour map\n    linewidth=1, # space between cells\n    ax=ax[1]\n)\ngg2.set(title='2019')\n\nplt.show()","a9f2ccc4":"#### Crimes in the State of New York combined for 2018 and 2019","601b3511":"Removed all rows where data is missing.","97a346c9":"#### Ploting crime types for all States in 2018 - 19","37a38815":"### Missing Values for each Column in Percentage","a847cc04":"#### HeatMap showing intensity of each crime type in all States in 2018 and 2019","5fd7c7b7":"### Snapshot of Data","86577e5b":"#### Comparison of crimes in California with New York"}}