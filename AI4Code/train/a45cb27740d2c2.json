{"cell_type":{"74710b95":"code","a527231d":"code","16e8e788":"code","4a897a4e":"code","123c680b":"code","e7185467":"code","ceaf4e58":"code","39465aa6":"code","d2ef3e6a":"code","ff98f2a4":"code","1fce12fa":"code","b2fde264":"code","f4dbe0f8":"code","91145bda":"code","ca82f43e":"code","ac4b5777":"markdown","62617ade":"markdown","442e7e94":"markdown","28a29b64":"markdown","b8619250":"markdown"},"source":{"74710b95":"import numpy as np\nimport math\nPx=[20,10,10,7.07,7.07,10,7.07 ,7.07 ,10,10,20]\nPy=[0 ,0 ,0 ,7.07,7.07,0 ,-7.07,-7.07,0 ,0 ,0]\nPz=[6 ,6 ,16,16  ,6   ,16,16   ,6    ,16,6 ,6]\nh=6\nl1=10\nl2=10\nT1=[]\nT2=[]\nT3=[]\n\n#Inverse Kinematic\nfor i in range(11):\n    a=(Pz[i]-h)\/math.sqrt((Px[i]**2)+(Py[i]**2))\n    if a == 1.0001510342101096:\n        a=1\n    theta1 = np.arctan(Py[i]\/Px[i])\n    theta3 = np.arccos(((Px[i]**2)+((Pz[i]-h)**2)-(l1**2)-(l2**2))\/(2*l1*l2))\n    theta2 = np.arcsin(a)- np.arctan((l2*np.sin(theta3))\/(l1+(l2*np.cos(theta3))))\n    T1.append(math.degrees(theta1))\n    T2.append(math.degrees(theta2))\n    T3.append(math.degrees(theta3))\n               \n    print(\"round\",i+1)\n    print(\"theta1:\",math.degrees(theta1))\n    print(\"theta2:\",math.degrees(theta2))\n    print(\"theta3:\",math.degrees(theta3))\n    print(\"\\n\")\n    \n    i+=1\n    \nprint(\"theta1:\",T1)\nprint(\"theta2:\",T2)\nprint(\"theta3:\",T3)\n    \n    ","a527231d":"#Cubic Polynomial\nPx=[20,10,10,7.07,7.07,10,7.07 ,7.07 ,10,10,20]\nPy=[0 ,0 ,0 ,7.07,7.07,0 ,-7.07,-7.07,0 ,0 ,0]\nPz=[6 ,6 ,16,16  ,6   ,16,16   ,6    ,16,6 ,6]\ntime=[0,    4,    6,  10,16,20,24,28,32,36,40]\ntf=[]\nfor j in range(10):\n#     if j <=10:\n    timeframe = time[j+1]-time[j]\n    tf.append(timeframe)\n# tf.append(0)\nprint('tf =',tf)\nthetaf=5\ntheta0=0\nfor i in range(11):\n    if(0<i<11):\n        theta0=5\n    if(i==10):\n        break;\n    \n    C0 = [Px[i],Py[i],Pz[i]]\n    C1 = 5\n    if(i==0 or i ==10):\n        C1=0\n    \n    C2T1 = (((3\/(tf[i]**2))*(T1[i+1]-T1[i]))-((2*theta0)\/tf[i])-((1*5)\/tf[i]))\n    C3T1 = (-(2\/(tf[i]**3))*(T1[i+1]-T1[i])-((1\/(tf[i]**2))*(T1[i+1]-T1[i])))\n    C2T2 = (((3\/(tf[i]**2))*(T2[i+1]-T2[i]))-((2*theta0)\/tf[i])-((1*5)\/tf[i]))\n    C3T2 = (-(2\/(tf[i]**3))*(T2[i+1]-T2[i])-((1\/(tf[i]**2))*(T2[i+1]-T1[i])))\n    C2T3 = (((3\/(tf[i]**2))*(T3[i+1]-T3[i]))-((2*theta0)\/tf[i])-((1*5)\/tf[i]))\n    C3T3 = (-(2\/(tf[i]**3))*(T3[i+1]-T3[i])-((1\/(tf[i]**2))*(T3[i+1]-T1[i])))\n    print('round',i+1)\n    print('theta1',T1[i])\n    print('theta2',T2[i])\n    print('theta3',T3[i])\n    print('C0=',C0)\n    print('C1=',C1)\n    print('C2T1=',C2T1)\n    print('C3T1=',C3T1)\n    print('C2T2=',C2T2)\n    print('C3T2=',C3T2)\n    print('C2T3=',C2T3)\n    print('C3T3=',C3T3)\n    print('\\n')\n        \n   \n","16e8e788":"def inverse (Px,Py,Pz):\n    h=6\n    l1=10\n    l2=10\n    a=(Pz[i]-h)\/math.sqrt((Px[i]**2)+(Py[i]**2))\n    if a > 1.000:\n        a=1\n    theta1 = np.arctan(Py\/Px)\n    theta3 = np.arccos(((Px**2)+((Pz-h)**2)-(l1**2)-(l2**2))\/(2*l1*l2))\n    theta2 = np.arcsin(a)- np.arctan((l2*np.sin(theta3))\/(l1+(l2*np.cos(theta3))))\n    T1.append(math.degrees(theta1))\n    T2.append(math.degrees(theta2))\n    T3.append(math.degrees(theta3))\n    print(\"theta1:\",math.degrees(theta1))\n    print(\"theta2:\",math.degrees(theta2))\n    print(\"theta3:\",math.degrees(theta3))\n    print(\"\\n\")\n    s = [theta1,theta2,theta3]\n    return s","4a897a4e":"\ncoll_T1=[]\ncoll_T2=[]\ncoll_T3=[]\ndef inverse (Px,Py,Pz):\n    h=6\n    l1=10\n    l2=10\n    theta1 = np.arctan(Py\/Px)\n    theta3 = np.arccos(((Px**2)+((Pz-h)**2)-(l1**2)-(l2**2))\/(2*l1*l2))\n    theta2 = np.arcsin(a)- np.arctan((l2*np.sin(theta3))\/(l1+(l2*np.cos(theta3))))\n    s = [math.degrees(theta1),math.degrees(theta2),math.degrees(theta3)]\n    coll_T1.append(math.degrees(theta1))\n    coll_T2.append(math.degrees(theta2))\n    coll_T3.append(math.degrees(theta3))\n    return s\n#Cartesian 1->1\nPx1=20\nPy1=0\nPz1=6\nstep = (0)\/0.5\nresult=inverse(Px1,Py1,Pz1)\nans.append(result)\nprint(result)\nprint('\\n')\n    \n#Cartesian 1->2\nPx1=20\nPx2=10\nPy1=0\nPy2=0\nPz1=6\nPz2=6\nstep = (4-0)\/0.5\nstepPx = (20-10)\/step\nans =[]\nprint('num of step=',step)\nfor i in range(int(step)):\n    print(\"step\",i+1)\n    Px1 = Px1-stepPx\n    Px=Px1\n    print('Px=',Px)\n    print('Py=',Py1)\n    print('Pz=',Pz1)\n   \n    result=inverse(Px,Py1,Pz1)\n    ans.append(result)\n    print(result)\n    print('\\n')\n# print(ans)\n# print('T1',coll_T1)\n# print('T2',coll_T2)\n# print('T3',coll_T3)","123c680b":"#Cartesian 2-3\nPx1=10\nPx2=10\nPy1=0\nPy2=0\nPz1=6\nPz2=16\nstep = (6-4)\/0.5\nstepPz = (16-6)\/step\nans =[]\nprint('num of step=',step)\nfor i in range(int(step)):\n    print(\"step\",i+1)\n    Pz1 = Pz1+stepPz\n    Pz=Pz1\n    print('Px=',Px1)\n    print('Py=',Py1)\n    print('Pz=',Pz)\n   \n    result=inverse(Px1,Py1,Pz)\n    ans.append(result)\n    print(result)\n    print('\\n')\n# print(ans)\n# print('T1',coll_T1)\n# print('T2',coll_T2)\n# print('T3',coll_T3)","e7185467":"#Cartesian 3->4\nPx3=10\nPx4=7.07\nPy3=0\nPy4=7.07\nPz3=16\nPz4=16\nstep = (10-6)\/0.5\nstepPx = (10-7.07)\/step\nstepPy = (7.07-0)\/step\nans =[]\nprint('num of step=',step)\nfor i in range(int(step)):\n    print(\"step\",i+1)\n    Px3 = Px3-stepPx\n    Py3 = Py3+stepPy\n    print('Px=',Px3)\n    print('Py=',Py3)\n    print('Pz=',Pz3)\n   \n    result=inverse(Px3,Py3,Pz3)\n    ans.append(result)\n    print(result)\n    print('\\n')","ceaf4e58":"#Cartesian 4->5\nPx4=7.07 \nPx5=7.07\nPy4=7.07 \nPy5=7.07\nPz4=16\nPz5=6.0 \nstep = (16-10)\/0.5\nstepPz = (16-6)\/step\n\nans =[]\nprint('num of step=',step)\nfor i in range(int(step)):\n    print(\"step\",i+1)\n    Pz4 = Pz4-stepPz\n    print('Px=',Px4)\n    print('Py=',Py4)\n    print('Pz=',Pz4)\n   \n    result=inverse(Px4,Py4,Pz4)\n    ans.append(result)\n    print(result)\n    print('\\n')","39465aa6":"#Cartesian 5->6\nPx5=7.07\nPx6=10.0\nPy5=7.07\nPy6=0.0\nPz5=6.0 \nPz6=16.0\nstep = (20-16)\/0.5\nstepPx = (10-7.07)\/step\nstepPy = (7.07)\/step\nstepPz = (16-6)\/step\n\nans =[]\nprint('num of step=',step)\nfor i in range(int(step)):\n    print(\"step\",i+1)\n    Px5 = Px5+stepPx\n    Py5 = Py5-stepPy\n    Pz5 = Pz5+stepPz\n    print('Px=',Px5)\n    print('Py=',Py5)\n    print('Pz=',Pz5)\n   \n    result=inverse(Px5,Py5,Pz5)\n    ans.append(result)\n    print(result)\n    print('\\n')","d2ef3e6a":"#Cartesian 6->7\nPx6=10.0\nPx7=7.07\nPy6=0.0\nPy7=-7.07\nPz6=16.0\nPz7=16.0\nstep = (24-20)\/0.5\nstepPx = (10-7.07)\/step\nstepPy = (0-(-7.07))\/step\n# stepPz = (16-6)\/step\n\nans =[]\nprint('num of step=',step)\nfor i in range(int(step)):\n    print(\"step\",i+1)\n    Px6 = Px6-stepPx\n    Py6 = Py6-stepPy\n#     Pz6 = Pz6+stepPz\n    print('Px=',Px6)\n    print('Py=',Py6)\n    print('Pz=',Pz6)\n   \n    result=inverse(Px5,Py5,Pz5)\n    ans.append(result)\n    print(result)\n    print('\\n')","ff98f2a4":"#Cartesian 7->8\nPx7=7.07\nPx8 = 7.07\nPy7=-7.07\nPy8 = -7.07\nPz7=16.0\nPz8=6\nstep = (28-24)\/0.5\n# stepPx = (10-7.07)\/step\n# stepPy = (7.07)\/step\nstepPz = (16-6)\/step\n\nans =[]\nprint('num of step=',step)\nfor i in range(int(step)):\n    print(\"step\",i+1)\n#     Px6 = Px6+stepPx\n#     Py6 = Py6-stepPz\n    Pz7 = Pz7-stepPz\n    print('Px=',Px7)\n    print('Py=',Py7)\n    print('Pz=',Pz7)\n   \n    result=inverse(Px7,Py7,Pz7)\n    ans.append(result)\n    print(result)\n    print('\\n')","1fce12fa":"#Cartesian 8->9\nPx9=10\nPx8 = 7.07\nPy9=0\nPy8 = -7.07\nPz9=16.0\nPz8=6\nstep = (32-28)\/0.5\nstepPx = (10-7.07)\/step\nstepPy = (0-(-7.07))\/step\nstepPz = (16-6)\/step\n\nans =[]\nprint('num of step=',step)\nfor i in range(int(step)):\n    print(\"step\",i+1)\n    Px8 = Px8+stepPx\n    Py8 = Py8+stepPy\n    Pz8 = Pz8+stepPz\n    print('Px=',Px8)\n    print('Py=',Py8)\n    print('Pz=',Pz8)\n   \n    result=inverse(Px8,Py8,Pz8)\n    ans.append(result)\n    print(result)\n    print('\\n')","b2fde264":"#Cartesian 9->10\nPx9=10\nPx10=10\nPy9=0\nPy10=0\nPz9=16.0\nPz10=6\nstep = (36-32)\/0.5\n# stepPx = (10-7.07)\/step\n# stepPy = (0-(-7.07))\/step\nstepPz = (16-6)\/step\n\nans =[]\nprint('num of step=',step)\nfor i in range(int(step)):\n    print(\"step\",i+1)\n#     Px9 = Px9+stepPx\n#     Py9 = Py9+stepPy\n    Pz9 = Pz9-stepPz\n    print('Px=',Px9)\n    print('Py=',Py9)\n    print('Pz=',Pz9)\n   \n    result=inverse(Px9,Py9,Pz9)\n    ans.append(result)\n    print(result)\n    print('\\n')","f4dbe0f8":"#Cartesian 10->11\nPx10=10\nPx11 =20\nPy10=0\nPx11 =0\nPz10=6\nPz10 =6\nstep = (40-36)\/0.5\nstepPx = (20-10)\/step\n# stepPy = (0-(-7.07))\/step\n# stepPz = (16-6)\/step\n\nans =[]\nprint('num of step=',step)\nfor i in range(int(step)):\n    print(\"step\",i+1)\n    Px10 = Px10+stepPx\n#     Py9 = Py9+stepPy\n#     Pz9 = Pz9-stepPz\n    print('Px=',Px10)\n    print('Py=',Py10)\n    print('Pz=',Pz10)\n   \n    result=inverse(Px10,Py10,Pz10)\n    ans.append(result)\n    print(result)\n    print('\\n')","91145bda":"print(coll_T1)\nprint('\\n')\nprint(coll_T2)\nprint('\\n')\nprint(coll_T3)","ca82f43e":"import matplotlib.pyplot as plt\nplt.figure(figsize=(10, 10))\nplt.plot(coll_T1,color=\"blue\",label='theta1')\nplt.plot(coll_T2,color=\"grey\",label='theta2')\nplt.plot(coll_T3,color=\"orange\",label='theta3')\nplt.legend(loc=\"upper right\")\nplt.show()","ac4b5777":"# \u0e17\u0e33 Cartesian \u0e17\u0e31\u0e49\u0e0711 \u0e25\u0e33\u0e14\u0e31\u0e1a","62617ade":"\u0e01\u0e32\u0e23\u0e2b\u0e32 \u0e40\u0e0b\u0e15\u0e49\u0e321,\u0e40\u0e0b\u0e15\u0e49\u0e322,\u0e40\u0e0b\u0e15\u0e49\u0e323 \u0e0b\u0e36\u0e48\u0e07\u0e21\u0e32\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e19\u0e33\u0e04\u0e48\u0e32\u0e44\u0e1b\u0e2b\u0e32 inverse kinematic \u0e02\u0e2d\u0e07\u0e01\u0e32\u0e23\u0e40\u0e04\u0e25\u0e37\u0e48\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e08\u0e32\u0e01\u0e08\u0e38\u0e14 1 \u0e44\u0e1b\u0e08\u0e38\u0e142 \u0e0b\u0e36\u0e48\u0e07\u0e43\u0e19\u0e17\u0e35\u0e48\u0e19\u0e35\u0e49 Px1->Px2 \u0e08\u0e32\u0e01 20 \u0e44\u0e1b 10 \u0e2d\u0e07\u0e28\u0e32 \u0e08\u0e30\u0e40\u0e04\u0e25\u0e37\u0e48\u0e2d\u0e19\u0e17\u0e35\u0e25\u0e30 (20-10)\/8 \u0e2d\u0e07\u0e28\u0e32 \u0e40\u0e19\u0e37\u0e48\u0e2d\u0e07\u0e08\u0e32\u0e01\u0e21\u0e35\u0e01\u0e32\u0e23\u0e40\u0e04\u0e25\u0e37\u0e48\u0e2d\u0e19\u0e17\u0e35\u0e48\u0e17\u0e31\u0e49\u0e07\u0e2b\u0e21\u0e14 8 step \u0e08\u0e30\u0e40\u0e04\u0e25\u0e37\u0e48\u0e2d\u0e19\u0e44\u0e1b\u0e40\u0e23\u0e37\u0e48\u0e2d\u0e22\u0e46\u0e08\u0e19\u0e16\u0e36\u0e07 10\u0e2d\u0e07\u0e28\u0e32","442e7e94":"# \u0e01\u0e23\u0e32\u0e1f\u0e02\u0e2d\u0e07 Cartesian \u0e42\u0e14\u0e22\u0e01\u0e33\u0e2b\u0e19\u0e14 time scale = 0.5","28a29b64":"# \u0e17\u0e33 Cubic Polynomial","b8619250":"# Import library \u0e41\u0e25\u0e30\u0e17\u0e33 Inverse Kinematic"}}