{"cell_type":{"4c93402f":"code","5af1115c":"code","708e5c52":"code","7dfe97e7":"code","de0af9ca":"code","968eb13f":"code","aff5d890":"code","4800b06e":"code","c55b0874":"code","2cc5fb33":"code","834d845c":"code","7a91348e":"code","43ce2fc7":"code","531f63bb":"code","a31fe59d":"code","3b43fc47":"code","f51cd0e6":"code","e601b6fe":"code","43b92930":"code","d6a0721b":"code","de79572c":"code","b3e4bd93":"code","e7e35e3a":"code","a49a12ea":"code","d3908413":"code","000dd501":"code","9d7df849":"code","b830d415":"code","87b2323e":"code","d79c0ecf":"code","e50446a4":"code","8a293b8e":"code","49d4a5a3":"code","7b52757b":"code","2ea85fbe":"code","099f6813":"code","6403e65b":"code","2972da98":"code","ae75f648":"code","8cb886a1":"code","ee2806d3":"code","ea098e28":"code","f4655a6f":"code","ea895761":"code","7ad65ee9":"code","3a0d6bb5":"code","d84c8da0":"code","e160586a":"code","c4bc2a12":"code","7bfae438":"markdown","fff49260":"markdown","a4cfbaff":"markdown","eb914a00":"markdown","4d6c5905":"markdown","45d232b8":"markdown"},"source":{"4c93402f":"from sklearn.datasets import load_boston\n\ndataset=load_boston()\nimport numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n%matplotlib inline","5af1115c":"boston=pd.DataFrame(dataset.data , columns=dataset.feature_names)\nboston.head()","708e5c52":"boston['MEDV']=dataset.target\nboston.head()","7dfe97e7":"boston.info()","de0af9ca":"boston.nunique()","968eb13f":"boston.describe()","aff5d890":"boston.isnull().sum()","4800b06e":"boston['MEDV'].plot()\n","c55b0874":"from scipy.stats import skew\nboston['MEDV'].skew()","2cc5fb33":"(np.log1p(boston['MEDV'])).skew()","834d845c":"corr_matrix=boston.corr().round(2)","7a91348e":"plt.figure(figsize=(10,7))\nsns.heatmap(data=corr_matrix , annot=True)","43ce2fc7":"plt.figure(figsize=(20,5))\n\nfeatures = ['LSTAT','RM']\ntarget= boston['MEDV']\nfor i,col in enumerate(features):\n    plt.subplot(1,len(features),i+1)\n    x=boston[col]\n    y=target\n    plt.scatter(x,y, marker='o')\n    plt.title(col)\n    plt.xlabel(col)\n    plt.ylabel('MEDV')\n    \n \n","531f63bb":"X=pd.DataFrame(np.c_[boston['LSTAT'],boston['RM']],columns=['LSTAT','RM'])\n# X = boston.drop(columns=['MEDV',])\nY=boston['MEDV']","a31fe59d":"from sklearn.model_selection import train_test_split\n\nX_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.3,random_state=7)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","3b43fc47":"from sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error,r2_score\n\nlin_model=LinearRegression()\nlin_model.fit(X_train,Y_train)","f51cd0e6":"y_test_predictv=lin_model.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(y_test_predictv,Y_test))\n\nr2=r2_score(y_test_predictv,Y_test)\n\nprint('the values predicted has')\nprint('RMSE = {}'.format(rmse))\nprint('r2 Score= {}'.format(r2))\n","e601b6fe":"# when all the columns are taken\nX=boston.drop(columns=['MEDV','RAD'])\nY=boston['MEDV']","43b92930":"import seaborn as sns\nsns.boxplot(Y)","d6a0721b":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,random_state=7)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(Y_train.shape)\nprint(Y_test.shape)","de79572c":"from  sklearn.preprocessing import StandardScaler\nfrom  sklearn.preprocessing import MinMaxScaler\nfrom  sklearn.preprocessing import RobustScaler\nfrom sklearn.preprocessing import PowerTransformer\nel = StandardScaler()\nms = MinMaxScaler()\nrb = RobustScaler()\npw = PowerTransformer()\nX_train = ms.fit_transform(X_train)\nX_test = ms.transform(X_test)\n# Y_train = pd.DataFrame(Y_train)  \nY_train = Y_train.values.reshape(-1,1)\nY_test = Y_test.values.reshape(-1,1)\nY_train = pw.fit_transform(Y_train)\nY_test = pw.transform(Y_test)\n\n# from sklearn.preprocessing import StandardScaler\n# data['normAmount'] = StandardScaler().fit_transform(data['Amount'].values.reshape(-1, 1))\n# from sklearn.pipeline import make_pipeline\n\n# pipe = make_pipeline(StandardScaler(),LinearRegression())\n# pipe.fit(X_train,Y_train)","b3e4bd93":"model_lin=LinearRegression()\nmodel_lin.fit(X_train,Y_train)\n","e7e35e3a":"y_test_predictv=model_lin.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(y_test_predictv,Y_test))\n\nr2=r2_score(y_test_predictv,Y_test)\n\nprint('the predicted values has')\nprint('RMSE={}'.format(rmse))\nprint('r2 score={}'.format(r2))\n","a49a12ea":"# Y_test = el.inverse_transform(Y_test)\n# y_test_predictv = el.inverse_transform(y_test_predictv)\n# from matplotlib.pyplot import plot\n# plot(y_test_predictv)\n# plot(Y_test)","d3908413":"# from sklearn.neural_network import MLPRegressor\n# import itertools\n# reg= MLPRegressor(random_state = 42)\n# params= {'activation': ['relu','identity','tanh','logistic'],\n#         'hidden_layer_sizes': [50,100,150] + list(itertools.permutations([50,100,150],2)) + list(itertools.permutations([50,100,150],3)),\n#          'solver' : ['lbfgs','adam'],\n#          'learning_rate': ['constant','adaptive','invscaling']\n#         }\n\n# reg_grid = GridSearchCV(reg,param_grid = params,n_jobs= -1,verbose = 10,cv=5)\n# reg_grid.fit(X_train,Y_train)","000dd501":"# print(\"Best Parameters: \", reg_grid.best_params_)","9d7df849":"# reg_model = MLPRegressor(activation = 'relu', hidden_layer_sizes = (150, 100), learning_rate= 'constant', solver= 'adam',random_state = 42)\n\n# reg_model.fit(X_train,Y_train)\n# y_preds = reg_model.predict(X_test)\n# print(\"Loss: \",reg_model.loss_)\n# print(\"R2 Score is \",r2_score(Y_test,y_preds))","b830d415":"# y_preds = y_preds.reshape(-1,1)\n# y_preds = pw.inverse_transform(y_preds)\n# y_preds","87b2323e":"\n# Y_test = pw.inverse_transform(Y_test)\n# from matplotlib.pyplot import plot\n# plot(y_preds, label='Pred')\n# plot(Y_test, label='Actual')\n# plt.legend(loc='best')","d79c0ecf":"#LASSO\nfrom sklearn.linear_model import Lasso\n\nlasso_model=Lasso(alpha=0.01)\nlasso_model.fit(X_train,Y_train)","e50446a4":"L=lasso_model.predict(X_test)\n\nrmse=(np.sqrt(mean_squared_error(Y_test,L)))\n\nr2=r2_score(Y_test,L)\n\nprint('the lasso model has')\nprint('RMSE={}'.format(rmse))\nprint('r2 score={}'.format(r2))\n","8a293b8e":"from sklearn.linear_model import Lasso\nfrom sklearn.model_selection import GridSearchCV\n\nl_estimator=Lasso()\nparameters={'alpha':[0.01,0.1,0.3,0.5,0.9,1,4,7,9,10],\n             'fit_intercept':[True,False]}\ngrid=GridSearchCV(estimator=l_estimator,param_grid=parameters,cv=2,n_jobs=-1)\ngrid.fit(X_train,Y_train)","49d4a5a3":"grid.best_params_","7b52757b":"grid.best_score_","2ea85fbe":"lasso_model=Lasso(alpha=0.01)\n\nlasso_model.fit(X_train,Y_train)\n\nL=lasso_model.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(Y_test,L))\n\nr2=r2_score(Y_test,L)\n\nprint('rmse={}'.format(rmse))\nprint('r2 score={}'.format(r2))","099f6813":"from sklearn.linear_model import Ridge\n\nR_model=Ridge(alpha=0.1)\nR_model.fit(X_train,Y_train)\n\ny_test_predict=R_model.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(Y_test,y_test_predict))\nr2=r2_score(Y_test,y_test_predict)\n\nprint('RMSE={}'.format(rmse))\nprint('r2 score={}'.format(r2))","6403e65b":"from sklearn.linear_model import Ridge\nfrom sklearn.model_selection import GridSearchCV\n\nr_estimator=Ridge()\n\nparameters={'alpha':[0.001,0.01,0.05,0.1,0.3,0.5,0.8,10,11,12],\n           'fit_intercept':[True,False]}\ngrid=GridSearchCV(estimator=r_estimator,param_grid=parameters,cv=7,n_jobs=11)\ngrid.fit(X_train,Y_train)","2972da98":"grid.best_params_","ae75f648":" r_model =   Ridge(alpha=0.8,\n                  fit_intercept=False)\n\nr_model.fit(X_train,Y_train)\n\ny_test_predict=r_model.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(Y_test,y_test_predict))\n\nr2=r2_score(Y_test,y_test_predict)\n\nprint('RMSE={}'.format(rmse))\n\nprint('r2 score={}'.format(r2))","8cb886a1":"from sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import GridSearchCV\n\nr_estimator=ElasticNet()\n\nparameters={'alpha':[0.001,0.01,0.05,0.1,0.3,0.5,0.8,10,11,12],\n           'l1_ratio' : [0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]}\ngrid=GridSearchCV(estimator=r_estimator,param_grid=parameters,cv=7,n_jobs=11)\ngrid.fit(X_train,Y_train)","ee2806d3":"grid.best_params_","ea098e28":"elastica_model = ElasticNet(alpha=0.001,\n                           l1_ratio=0.1)","f4655a6f":"elastica_model.fit(X_train,Y_train)\n\ny_test_predict=elastica_model.predict(X_test)\n\nrmse=np.sqrt(mean_squared_error(Y_test,y_test_predict))\n\nr2=r2_score(Y_test,y_test_predict)\n\nprint('RMSE={}'.format(rmse))\n\nprint('r2 score={}'.format(r2))","ea895761":"Y_test = pw.inverse_transform(Y_test)\ny_test_predict = pw.inverse_transform(y_test_predictv)\nfrom matplotlib.pyplot import plot\nplot(y_test_predict, label='Pred')\nplot(Y_test, label='Actual')\nplt.legend(loc='best')","7ad65ee9":"X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,random_state=7)","3a0d6bb5":"from sklearn.model_selection import KFold\nerr=[]\ny_pred=[]\n\nX_test = ms.transform(X_test)\nfold=KFold(n_splits=8)\nfor train_index, test_index in fold.split(X_train,Y_train):\n    x_train, x_test = X_train.iloc[train_index], X_train.iloc[test_index]\n    y_train, y_test = Y_train.iloc[train_index], Y_train.iloc[test_index]\n    \n    \n    x_train = ms.fit_transform(x_train)\n    x_test = ms.transform(x_test)\n    # Y_train = pd.DataFrame(Y_train)  \n    y_train = y_train.values.reshape(-1,1)\n    y_test = y_test.values.reshape(-1,1)\n    y_train = pw.fit_transform(y_train)\n    y_test = pw.transform(y_test)\n\n    \n    \n    \n    m1 = ElasticNet(alpha=0.001,\n                           l1_ratio=0.1)\n    m1.fit(x_train,y_train)\n    preds = m1.predict(x_test)\n\n    print(\"err: \",np.sqrt(mean_squared_error(y_test,preds)))\n    print(\"r2square: \",r2_score(y_test,preds))\n    err.append(np.sqrt(mean_squared_error(y_test,preds)))\n    test_pred = m1.predict(X_test)\n    test_pred = test_pred.reshape(-1,1)\n    test_pred = pw.inverse_transform(test_pred)\n    y_pred.append(test_pred)\nnp.mean(err)","d84c8da0":"y_pred = np.mean(y_pred, 0)","e160586a":"rmse=np.sqrt(mean_squared_error(Y_test,y_pred))\n\nr2=r2_score(Y_test,y_pred)\n\nprint('RMSE= {}'.format(rmse))\n\nprint('r2 score= {}'.format(r2))","c4bc2a12":"Y_test = Y_test.reset_index(drop=True)\nfrom matplotlib.pyplot import plot\nplot(y_pred, label='Pred', linestyle='--')\nplot(Y_test, label='Actual')\nplt.legend(loc='best')\n","7bfae438":"ELASTC","fff49260":"RIDGE","a4cfbaff":"# Advanced Linear Regression Modelling","eb914a00":"#  let us explore various models","4d6c5905":"# Used Scaling, Stratified folding..","45d232b8":"# using grid search"}}