{"cell_type":{"30dd6beb":"code","bb6a457d":"code","d6ba126a":"code","2573c62a":"code","65098ef9":"code","71dea4ac":"code","9a9b58bf":"code","9be970c7":"code","4f54fb8e":"code","68405fcc":"code","11e3f745":"code","000e5a57":"code","3eb3df4f":"code","79c67a7a":"code","d0a80ebb":"code","370903bf":"code","6b0f99e7":"code","743bb74c":"code","67fdf32e":"code","f0dd63fb":"code","b9330221":"code","7c6e8b93":"code","fe7835e2":"code","e065e15d":"code","d5101e31":"code","c5a93388":"code","d987ecf6":"code","e8383e35":"code","574bf48f":"code","388f12b1":"code","645fec41":"code","3747c30a":"code","194c4816":"code","48ed2461":"code","22f17fcb":"code","edaa5a98":"code","213a1187":"markdown","9b51ca72":"markdown","f4e7b432":"markdown","e80c7d04":"markdown","876005a3":"markdown"},"source":{"30dd6beb":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nimport re\nfrom scipy.stats import norm\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport plotly.graph_objs as go\nimport plotly.offline as py\nimport plotly.figure_factory as ff\nimport plotly.express as px\nfrom plotly.subplots import make_subplots\nimport pandas as pd\nfrom plotly.offline import init_notebook_mode, iplot\ninit_notebook_mode()","bb6a457d":"df = pd.read_csv('\/kaggle\/input\/netflix-shows\/netflix_titles.csv')","d6ba126a":"df.head()","2573c62a":"df.columns","65098ef9":"df.info()","71dea4ac":"#missing data\ntotal = df.isnull().sum().sort_values(ascending=False)\npercent = (df.isnull().sum()\/df.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","9a9b58bf":"def pie_count(data, field, percent_limit=0.5, title=\"Plot by \"):\n    \n    title += field\n    data[field] = data[field].fillna('NA')\n    data = data[field].value_counts().to_frame()\n\n    total = data[field].sum()\n    data['percentage'] = 100 * data[field]\/total    \n\n    percent_limit = percent_limit\n    otherdata = data[data['percentage'] < percent_limit] \n    others = otherdata['percentage'].sum()  \n    maindata = data[data['percentage'] >= percent_limit]\n\n    data = maindata\n    other_label = \"Others(<\" + str(percent_limit) + \"% each)\"           # Create new label\n    data.loc[other_label] = pd.Series({field:otherdata[field].sum()}) \n    \n    labels = data.index.tolist()   \n    datavals = data[field].tolist()\n    \n    trace=go.Pie(labels=labels,values=datavals)\n\n    layout = go.Layout(\n        title = title,\n        height=700\n        )\n    \n    fig = go.Figure(data=[trace], layout=layout)\n    iplot(fig)\n\npie_count(df, 'country')\npie_count(df, 'type')\npie_count(df, 'director',0.1)\n","9be970c7":"tmp = df[\"country\"].value_counts()\n\n# plotly globe credits - https:\/\/www.kaggle.com\/arthurtok\/generation-unemployed-interactive-plotly-visuals\ncolorscale = [[0, 'rgb(102,194,165)'], [0.005, 'rgb(102,194,165)'], \n              [0.01, 'rgb(171,221,164)'], [0.02, 'rgb(230,245,152)'], \n              [0.04, 'rgb(255,255,191)'], [0.05, 'rgb(254,224,139)'], \n              [0.10, 'rgb(253,174,97)'], [0.25, 'rgb(213,62,79)'], [1.0, 'rgb(158,1,66)']]\n\ndata = [ dict(\n        type = 'choropleth',\n        autocolorscale = False,\n        colorscale = colorscale,\n        showscale = True,\n        locations = tmp.index,\n        z = tmp.values,\n        locationmode = 'country names',\n        text = tmp.values,\n        marker = dict(\n            line = dict(color = '#fff', width = 2)) )           ]\n\nlayout = dict(\n    height=500,\n    title = 'Contents published  by Country',\n    geo = dict(\n        showframe = True,\n        showocean = True,\n        oceancolor = '#222',\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = False,\n                gridcolor = 'rgb(102, 102, 102)'\n            ),\n        lataxis = dict(\n                showgrid = False,\n                gridcolor = 'rgb(102, 102, 102)'\n                )\n            ),\n        )\nfig = dict(data=data, layout=layout)\niplot(fig)\n\n\ntmp = df.groupby(\"country\").agg({\"show_id\" : \"sum\"}).reset_index()\n\n\n\n# plotly globe credits - https:\/\/www.kaggle.com\/arthurtok\/generation-unemployed-interactive-plotly-visuals\ncolorscale = [[0, 'rgb(102,194,165)'], [0.005, 'rgb(102,194,165)'], \n              [0.01, 'rgb(171,221,164)'], [0.02, 'rgb(230,245,152)'], \n              [0.04, 'rgb(255,255,191)'], [0.05, 'rgb(254,224,139)'], \n              [0.10, 'rgb(253,174,97)'], [0.25, 'rgb(213,62,79)'], [1.0, 'rgb(158,1,66)']]\n\ndata = [ dict(\n        type = 'choropleth',\n        autocolorscale = False,\n        colorscale = colorscale,\n        showscale = True,\n        locations = tmp.country,\n        z = tmp.show_id,\n        locationmode = 'country names',\n        text = tmp.show_id,\n        marker = dict(\n            line = dict(color = '#fff', width = 2)) )           ]\n\nlayout = dict(\n    height=500,\n    title = 'Average content published in each Country',\n    geo = dict(\n        showframe = True,\n        showocean = True,\n        oceancolor = '#222',\n        projection = dict(\n        type = 'orthographic',\n            rotation = dict(\n                    lon = 60,\n                    lat = 10),\n        ),\n        lonaxis =  dict(\n                showgrid = False,\n                gridcolor = 'rgb(102, 102, 102)'\n            ),\n        lataxis = dict(\n                showgrid = False,\n                gridcolor = 'rgb(102, 102, 102)'\n                )\n            ),\n        )\nfig = dict(data=data, layout=layout)\niplot(fig)","4f54fb8e":"df_holly = df[df['country']=='United States']\ndf_holly[\"date_added\"] = pd.to_datetime(df_holly['date_added'])\ndf_holly['published_year'] = df_holly['date_added'].dt.year\ndf_holly['published_month'] = df_holly['date_added'].dt.month\ndf_holly_movie = df_holly[df_holly['type']=='Movie']\ndf_holly_tv = df_holly[df_holly['type']=='TV Show']\ndf_holly['cast'].fillna(value='Actors Not Known',inplace=True)","68405fcc":"df_holly_movie['duration'] = pd.to_numeric(df_holly_movie['duration'].str.replace('min',''))","11e3f745":"df_holly_movie.head()","000e5a57":"df_holly_ = df_holly.copy()","3eb3df4f":"plot_title = df_holly_movie.groupby('title')['duration'].mean().reset_index().sort_values('duration', ascending=True).tail(20)\nfig = px.bar(plot_title, x=\"duration\", y=\"title\", orientation='h')\nfig.show()","79c67a7a":"direct = df_holly_movie.groupby('director')['duration'].mean().reset_index().sort_values('duration', ascending=True).tail(20)\nfig = px.bar(direct, x=\"duration\", y=\"director\", orientation='h')\nfig.show()","d0a80ebb":"Movie_list = {'TV-Y7':'Child Movies',\n              'TV-G':'Family Movies',\n              'TV-PG':'Family Movies-Parental Guidance',\n              'TV-14':'Family Movies-Parental Guidance',\n              'TV-MA':'Adult Movies','TV-Y7-FV':'Child Movies',\n              'PG-13':'Family Movies-Parental Guidance',\n              'PG':'Family Movies-Parental Guidance',\n              'R':'Adult Movies',\n              'NR':'Unrated Movies',\n              'UR':'Unrated Movies'}\ndf_holly['Movie Type'] = df_holly['rating'].map(Movie_list)\n\ndf_holly_movie['Movie Type'] = df_holly_movie['rating'].map(Movie_list)\n\ndf_holly_tv['Movie Type'] = df_holly_tv['rating'].map(Movie_list)","370903bf":"col = \"Movie Type\"\n\nvc1 = df_holly_movie[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"Movies\", marker=dict(color=\"#6ad49b\"))\ndata = [trace1]\nlayout = go.Layout(title=\"Published Content on Netflix for Hollywood\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","6b0f99e7":"col = \"published_year\"\n\nvc1 = df_holly_movie[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = df_holly_tv[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"blue\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"green\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Year wise content published\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","743bb74c":"col = \"Movie Type\"\n\nvc1 = df_holly_movie[col].value_counts().reset_index()\nvc1 = vc1.rename(columns = {col : \"count\", \"index\" : col})\nvc1['percent'] = vc1['count'].apply(lambda x : 100*x\/sum(vc1['count']))\nvc1 = vc1.sort_values(col)\n\nvc2 = df_holly_tv[col].value_counts().reset_index()\nvc2 = vc2.rename(columns = {col : \"count\", \"index\" : col})\nvc2['percent'] = vc2['count'].apply(lambda x : 100*x\/sum(vc2['count']))\nvc2 = vc2.sort_values(col)\n\ntrace1 = go.Bar(x=vc1[col], y=vc1[\"count\"], name=\"TV Shows\", marker=dict(color=\"dodgerblue\"))\ntrace2 = go.Bar(x=vc2[col], y=vc2[\"count\"], name=\"Movies\", marker=dict(color=\"slategrey\"))\ndata = [trace1, trace2]\nlayout = go.Layout(title=\"Published content based on Ratings\", legend=dict(x=0.1, y=1.1, orientation=\"h\"))\nfig = go.Figure(data, layout=layout)\nfig.show()","67fdf32e":"# violin plot \n\nplt.rcParams['figure.figsize'] = (20, 7)\nplt.style.use('seaborn-dark-palette')\n\nsns.boxenplot(df_holly_movie['published_year'],df_holly_movie['duration'], palette = 'Greys')\nplt.title('Comparison of years and Duration of Movies', fontsize = 20)\nplt.show()","f0dd63fb":"plt.style.use('dark_background')\ndf_holly_tv['listed_in'].value_counts().head(80).plot.bar(color = 'red', figsize = (20, 7))\nplt.title('Categories published on Netflix (in US)', fontsize = 30, fontweight = 20)\nplt.xlabel('Name of The Show Categories')\nplt.ylabel('count')\nplt.show()","b9330221":"F=df_holly_movie['director'].value_counts().sort_values(ascending=False)[:15]\nlabel=F.index\nsize=F.values\ncolors = ['skyblue', '#FEBFB3', '#96D38C', '#D0F9B1', 'gold', 'orange', 'lightgrey', \n          'lightblue','lightgreen','aqua','yellow','#D4E157','#D1C4E9','#1A237E','#64B5F6','#009688',\n          '#1DE9B6','#66BB6A','#689F38','#FFB300']\ntrace =go.Pie(labels=label, values=size, marker=dict(colors=colors), hole=.1)\ndata_trace = [trace]\nlayout = go.Layout(title='Top Directors for Hollywood')\nfig=go.Figure(data=data_trace,layout=layout)\nfig.show()","7c6e8b93":"def category_separator(category,show_id):\n    for i in (re.split(r',',category)):\n        if i.strip() in df_holly:\n            df_holly[i.strip()][df_holly['show_id']==show_id]='YES'\n        else:\n            df_holly[i.strip()]='NO'\n            df_holly[i.strip()][df_holly['show_id']==show_id]='YES'","fe7835e2":"for show_id, category in zip(df_holly.show_id, df_holly.listed_in): \n    category_separator(category,show_id)","e065e15d":"S = df_holly[(df_holly['Anime Series'] == 'YES')]\nK = df_holly[(df_holly['Anime Series'] == 'NO')]\n\ntrace = go.Bar(y = (len(S),len(K)), x = ['YES','NO'], orientation = 'v',opacity = 0.8, marker=dict(\n        color=['green','red'],\n        line=dict(color='#000000',width=1.5)))\n\nlayout = dict(title =  'Distribution for Anime Series')\n                    \nfig = dict(data = [trace], layout=layout)\npy.iplot(fig)","d5101e31":"df_plot = pd.DataFrame(df_holly['title'][df_holly['Comedies']=='YES'].head(10).reset_index())\ndf_plot.columns = ['count','title']\nfig = px.bar(df_plot, x=\"count\", y=\"title\", barmode='group',orientation='h')\nfig.show()","c5a93388":"df_plot = pd.DataFrame(df_holly['title'][df_holly['Romantic Movies']=='YES'].head(10).reset_index())\ndf_plot.columns = ['count','title']\nfig = px.bar(df_plot, x=\"count\", y=\"title\", barmode='group',orientation='h')\nfig.show()","d987ecf6":"df_plot = pd.DataFrame(df_holly['title'][(df_holly['Comedies']=='YES')&(df_holly['Movie Type']=='Family Movies-Parental Guidance')].head(15).reset_index())\ndf_plot.columns = ['count','title']\nfig = px.bar(df_plot, x=\"title\", y=\"count\", barmode='group')\nfig.show()","e8383e35":"def create_stack_bar_data(col):\n    aggregated = df[col].value_counts()\n    x_values = aggregated.index.tolist()\n    y_values = aggregated.values.tolist()\n    return x_values, y_values\n\nx1, y1 = create_stack_bar_data('release_year')\nx1 = x1[:-1]\ny1 = y1[:-1]\ntrace1 = go.Bar(x=x1, y=y1, opacity=0.75, name=\"year count\", marker=dict(color=['rgba(10, 220, 150, 0.6)', 'rgba(10, 220, 150, 0.6)', 'rgba(10, 220, 150, 0.6)', 'rgba(10, 220, 150, 0.6)', 'rgba(222,45,38,0.8)']))\nlayout = dict(height=400, title='Contents published in Hollywood by year', legend=dict(orientation=\"h\"));\nfig = go.Figure(data=[trace1], layout=layout);\niplot(fig);","574bf48f":"dfholly = df_holly[:1000]\ndef actor_separator(actors,show_id):\n    for a in (re.split(r',',actors)):\n        if a.strip() in dfholly:\n            dfholly[a.strip()][dfholly['show_id']==show_id] = 'YES' \n        else:\n            dfholly[a.strip()]='NO'\n            dfholly[a.strip()][dfholly['show_id']==show_id]='YES'","388f12b1":"for show_id,actors in zip(dfholly['show_id'],dfholly['cast']):\n    actor_separator(actors,show_id)","645fec41":"def plot_count(x,fig):\n    plt.subplot(4,2,fig)\n   \n    sns.countplot(y='Movie Type',hue=x,data=dfholly,palette='magma')\n    plt.subplot(4,2,(fig+1))\n    \n    sns.countplot(y='type', hue =x,data = dfholly,palette=(\"magma\"))\n    \nplt.figure(figsize=(15,20))\n\nplot_count('Robert Downey Jr.', 1)\nplot_count('Will Smith', 3)\nplot_count('Leonardo DiCaprio',5)\nplot_count('Johnny Depp',7)\nplt.tight_layout()\nplt.show()","3747c30a":"def plot_count(x,fig):\n    plt.subplot(4,2,fig)\n   \n    sns.countplot(y='Movie Type',hue=x,data=dfholly,palette='magma')\n    plt.subplot(4,2,(fig+1))\n    \n    sns.countplot(y='type', hue =x,data = dfholly,palette=(\"magma\"))\n    \nplt.figure(figsize=(15,20))\n\nplot_count('Pen\u00e9lope Cruz', 1)\nplot_count('Cameron Diaz', 3)\nplot_count('Jennifer Aniston',5)\nplot_count('Zhu Zhu',7)\nplt.tight_layout()\nplt.show()","194c4816":"df_plot = pd.DataFrame(dfholly['title'][(dfholly['Jennifer Aniston']=='YES')&(dfholly['Romantic Movies']=='YES')].reset_index())\ndf_plot.columns = ['count','title']\nfig = px.bar(df_plot, x=\"count\", y=\"title\", barmode='group',orientation='h')\nfig.show()","48ed2461":"df_plot = pd.DataFrame(dfholly['title'][(dfholly['Bradley Cooper']=='YES')&(dfholly['Comedies']=='YES')].reset_index())\ndf_plot.columns = ['count','title']\nfig = px.bar(df_plot, x=\"count\", y=\"title\", barmode='group',orientation='h')\nfig.show()","22f17fcb":"df_plot = pd.DataFrame(dfholly['title'][(dfholly['Bryan Cranston']=='YES')&(dfholly['Action & Adventure']=='YES')].reset_index())\ndf_plot.columns = ['count','title']\nfig = px.bar(df_plot, x=\"count\", y=\"title\", barmode='group',orientation='h')\nfig.show()","edaa5a98":"df_plot = pd.DataFrame(dfholly['title'][(dfholly['Will Smith']=='YES')&(dfholly['Action & Adventure']=='YES')].reset_index())\ndf_plot.columns = ['count','title']\nfig = px.bar(df_plot, x=\"count\", y=\"title\", barmode='group',orientation='h')\nfig.show()","213a1187":"## The End\n### Cheers!!!!!","9b51ca72":"# EDA on Hollywood\n![Image](https:\/\/media.tacdn.com\/media\/attractions-splice-spp-674x446\/07\/71\/39\/f2.jpg)","f4e7b432":"Comedy Hollywood Movies which we can see on NETFLIX","e80c7d04":"#### Transform Rating Column Kudos this [kernal](https:\/\/www.kaggle.com\/shivamsharma22\/netflix-bollywood-movies-analysis)","876005a3":"Family Comedy Hollywood Movies present on NETFLIX"}}