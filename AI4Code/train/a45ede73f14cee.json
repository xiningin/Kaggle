{"cell_type":{"46bd986b":"code","d3fadad5":"code","11d911f6":"code","e6fcad89":"code","85f8cecd":"code","ba2a396f":"code","3adf9d01":"code","71487362":"code","459ebf4c":"code","f158b60f":"code","a178a400":"code","d6d39e86":"code","e517f87b":"code","1847d571":"code","08e27153":"code","861d8391":"code","ae9fcb0c":"code","30d7f85e":"code","224c8d07":"code","257cd88a":"code","4b4a3ae7":"code","7908e8be":"code","a876f927":"code","4d7923bb":"code","b59232b9":"code","179735a1":"code","6c6de59a":"code","c523228d":"code","f9fa0faa":"code","f6d963b9":"code","d99fb638":"code","1a7edd98":"code","c5d200d5":"code","28c4489f":"code","54fb160b":"code","3de5bd82":"code","ef7496a5":"code","56806051":"code","f4f22699":"code","ec423ee7":"code","41744036":"code","9666d40d":"code","511d9bef":"code","e7fde612":"code","5c3c09fa":"code","82ab95ff":"code","f959bde9":"code","b03a8a8b":"code","14050776":"code","3f654ab9":"code","66c1a117":"code","7f99edc5":"code","3581c822":"code","6276b772":"code","071cc0fd":"code","2cba5f3c":"code","2c228552":"code","422a08d6":"code","88fa6217":"code","05e242a7":"code","0648008b":"code","e97196a1":"code","d1143d50":"code","55b3d7bc":"code","7a76a8ec":"code","b3bd006b":"code","b5d906b0":"code","5e34b49b":"code","305e0f85":"code","5e63b55a":"code","2e1d1ae6":"code","a7f9b352":"code","9aef835d":"code","ba181202":"code","858ac799":"code","adc8a1a4":"code","631b9534":"code","dc859e87":"code","ebe73bce":"code","913faef5":"code","1d336153":"code","2abed98b":"code","856bf1b4":"code","34bd8ba0":"code","6dd977f2":"code","873d8b17":"code","27dcc0f9":"code","99261029":"code","14c3dc89":"code","14d8a87f":"code","2243db95":"code","6963b590":"code","05cee6c6":"code","7e816d0c":"code","404762a5":"code","afbd132c":"code","9f763991":"code","16580f63":"code","d0ce4df0":"code","c150cf7e":"code","98e73941":"code","fa6bdf5a":"code","e1c0b422":"code","7de533f1":"code","7a0f3618":"code","4aa05175":"code","7e868455":"code","29a2eb0c":"code","cfe8a46a":"code","e62e97dc":"code","a460b5cc":"code","1e770200":"code","2c1d9892":"code","683835db":"code","e994a780":"code","f7f32b6b":"code","b48c6c34":"code","bf2bec39":"markdown","e4ed03d2":"markdown","08935b5e":"markdown","d5655ef4":"markdown","f2035a73":"markdown","735d944f":"markdown","c617d968":"markdown","1b0f8101":"markdown","de37ddee":"markdown","73574d34":"markdown","b1a7e5c1":"markdown","9096db11":"markdown","e9a323c2":"markdown","cd7248dd":"markdown","e730486c":"markdown","1c947e48":"markdown","dfb2a94c":"markdown","b7277141":"markdown","e0bfb23d":"markdown","5c4de11c":"markdown","8bc49244":"markdown","231c7d83":"markdown","1f8248a2":"markdown","72ea1909":"markdown","920b4914":"markdown","12ff9a53":"markdown","fb366556":"markdown","935c9940":"markdown","78a2774a":"markdown","a1b9724a":"markdown","4d8312fe":"markdown","56844157":"markdown","85144d60":"markdown","d321652c":"markdown"},"source":{"46bd986b":"# Let's import basic packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","d3fadad5":"with open('..\/input\/house-prices-advanced-regression-techniques\/data_description.txt') as file:\n    print(file.read())","11d911f6":"df_train = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/train.csv')\ndf_test = pd.read_csv('..\/input\/house-prices-advanced-regression-techniques\/test.csv')","e6fcad89":"df_train.head()","85f8cecd":"df_test.head()","ba2a396f":"df_train.columns","3adf9d01":"df_train.info()","71487362":"cat_feats = list(df_train.select_dtypes(include='object').columns)","459ebf4c":"cat_feats_num = ['MSSubClass', 'OverallQual','OverallCond']\ncat_feats = cat_feats + cat_feats_num","f158b60f":"num_feats = list(set(df_train.columns) - set(cat_feats) - set(['Id', 'SalePrice']))","a178a400":"print('Numerical Features: ', len(num_feats))\nfor feat in num_feats:\n    print(feat, end=', ')","d6d39e86":"print('Categorical Features: ', len(cat_feats))\nfor feat in cat_feats:\n    print(feat, end=', ')","e517f87b":"print(df_train.shape)\nprint(df_test.shape)","1847d571":"df_train.isnull().sum().sort_values(ascending=False)","08e27153":"df_test.isnull().sum().sort_values(ascending=False)","861d8391":"df_train['PoolQC'].value_counts()","ae9fcb0c":"df_train.loc[df_train['PoolArea']==0]['PoolQC']","30d7f85e":"df_train['PoolQC'].fillna('NA', inplace=True)\ndf_test['PoolQC'].fillna('NA', inplace=True)","224c8d07":"df_train.isnull().sum().sort_values(ascending=False)","257cd88a":"df_test.isnull().sum().sort_values(ascending=False)","4b4a3ae7":"df_train['MiscFeature'].value_counts()","7908e8be":"df_train['MiscFeature'].fillna('NA', inplace=True)\ndf_test['MiscFeature'].fillna('NA', inplace=True)","a876f927":"df_train.isnull().sum().sort_values(ascending=False)","4d7923bb":"df_test.isnull().sum().sort_values(ascending=False)","b59232b9":"df_train['Alley'].value_counts()","179735a1":"df_train['Alley'].fillna('NA', inplace=True)\ndf_test['Alley'].fillna('NA', inplace=True)","6c6de59a":"df_train.isnull().sum().sort_values(ascending=False)","c523228d":"df_test.isnull().sum().sort_values(ascending=False)","f9fa0faa":"df_train['Fence'].value_counts()","f6d963b9":"df_train['Fence'].fillna('NA', inplace=True)\ndf_test['Fence'].fillna('NA', inplace=True)","d99fb638":"df_train.isnull().sum().sort_values(ascending=False)","1a7edd98":"df_test.isnull().sum().sort_values(ascending=False)","c5d200d5":"df_train['FireplaceQu'].value_counts()","28c4489f":"df_train['FireplaceQu'].fillna('NA', inplace=True)\ndf_test['FireplaceQu'].fillna('NA', inplace=True)","54fb160b":"df_train.isnull().sum().sort_values(ascending=False)","3de5bd82":"df_test.isnull().sum().sort_values(ascending=False)","ef7496a5":"df_train[['LotFrontage', 'LotArea', 'LotConfig', 'LotShape']].head()","56806051":"plt.scatter(df_train['LotArea'], df_train['LotFrontage'])\nplt.xlabel('Lot Area')\nplt.ylabel('Lot Frontage')","f4f22699":"df_train['LotArea'].sort_values(ascending=False)","ec423ee7":"df_train.iloc[df_train['LotArea'].sort_values(ascending=False).index][['LotArea','LotFrontage']]","41744036":"df_train.loc[df_train['LotArea'] > 70800,'LotArea'] = 70800","9666d40d":"plt.scatter(df_train['LotArea'], df_train['LotFrontage'])","511d9bef":"df_train.iloc[df_train['LotFrontage'].sort_values(ascending=False).index][['LotArea','LotFrontage']]","e7fde612":"df_train.loc[df_train['LotFrontage'] > 185,'LotFrontage'] = 185","5c3c09fa":"plt.scatter(df_train['LotArea'], df_train['LotFrontage'])","82ab95ff":"sns.regplot(x='LotArea', y='LotFrontage', data=df_train)","f959bde9":"df_train.isnull().sum().sort_values(ascending=False)","b03a8a8b":"from sklearn.linear_model import LinearRegression","14050776":"lot_notnull = df_train['LotFrontage'].isnull() == False\nlot_null = df_train['LotFrontage'].isnull() == True","3f654ab9":"X_miss = df_train.loc[lot_notnull, ['LotArea','LotConfig','LotShape']]","66c1a117":"X_miss.head()","7f99edc5":"X_miss = pd.get_dummies(X_miss, prefix=['LC', 'LS'], columns=['LotConfig', 'LotShape'], drop_first=False)","3581c822":"X_miss.head()","6276b772":"X_miss.shape","071cc0fd":"y_miss = df_train.loc[lot_notnull, 'LotFrontage']\ny_miss.shape","2cba5f3c":"X_all = df_train[['LotArea','LotConfig','LotShape']]\nX_all = pd.get_dummies(X_all, prefix=['LC', 'LS'], columns=['LotConfig', 'LotShape'], drop_first=False)","2c228552":"lr_miss = LinearRegression()\nlr_miss.fit(X_miss, y_miss)\n\ndf_train['LotFrontage_pred'] = lr_miss.predict(X_all)\n\ndf_train['LotFrontage'] = np.where(df_train['LotFrontage'].isnull(), df_train['LotFrontage_pred'], df_train['LotFrontage'])","422a08d6":"df_test[['LotArea','LotConfig','LotShape']]","88fa6217":"df_test[['LotArea','LotConfig','LotShape']].isnull().sum()","05e242a7":"X_all_test = df_test[['LotArea','LotConfig','LotShape']]\nX_all_test = pd.get_dummies(X_all_test, prefix=['LC', 'LS'], columns=['LotConfig', 'LotShape'], drop_first=False)","0648008b":"df_test['LotFrontage_pred'] = lr_miss.predict(X_all_test)\n\ndf_test['LotFrontage'] = np.where(df_test['LotFrontage'].isnull(), df_test['LotFrontage_pred'], df_test['LotFrontage'])","e97196a1":"df_train.drop(columns=['LotFrontage_pred'], inplace=True)\ndf_test.drop(columns=['LotFrontage_pred'], inplace=True)","d1143d50":"df_train.isnull().sum().sort_values(ascending=False)","55b3d7bc":"df_test.isnull().sum().sort_values(ascending=False)","7a76a8ec":"df_train.loc[df_train['GarageArea']==0,['GarageArea', 'GarageCars','GarageYrBlt', 'GarageCond', 'GarageFinish', 'GarageType', 'GarageQual']]","b3bd006b":"df_train['GarageCond'].fillna('NA', inplace=True)\ndf_train['GarageFinish'].fillna('NA', inplace=True)\ndf_train['GarageType'].fillna('NA', inplace=True)\ndf_train['GarageQual'].fillna('NA', inplace=True)\ndf_train['GarageYrBlt'].fillna(0, inplace=True)\n\ndf_test['GarageCond'].fillna('NA', inplace=True)\ndf_test['GarageFinish'].fillna('NA', inplace=True)\ndf_test['GarageType'].fillna('NA', inplace=True)\ndf_test['GarageQual'].fillna('NA', inplace=True)\ndf_test['GarageYrBlt'].fillna(0, inplace=True)","b5d906b0":"df_train.isnull().sum().sort_values(ascending=False)","5e34b49b":"df_test.isnull().sum().sort_values(ascending=False)","305e0f85":"df_train.loc[df_train['BsmtFinType2'].isnull(),['TotalBsmtSF', 'BsmtUnfSF', 'BsmtFinType2', 'BsmtFinSF2','BsmtExposure', 'BsmtQual', 'BsmtFinType1', 'BsmtFinSF1', 'BsmtCond']]","5e63b55a":"df_train['BsmtFinType2'].fillna('NA', inplace=True)\ndf_train['BsmtExposure'].fillna('NA', inplace=True)\ndf_train['BsmtQual'].fillna('NA', inplace=True)\ndf_train['BsmtFinType1'].fillna('NA', inplace=True)\ndf_train['BsmtCond'].fillna('NA', inplace=True)\n\ndf_test['BsmtFinType2'].fillna('NA', inplace=True)\ndf_test['BsmtExposure'].fillna('NA', inplace=True)\ndf_test['BsmtQual'].fillna('NA', inplace=True)\ndf_test['BsmtFinType1'].fillna('NA', inplace=True)\ndf_test['BsmtCond'].fillna('NA', inplace=True)","2e1d1ae6":"df_train.isnull().sum().sort_values(ascending=False)","a7f9b352":"df_test.isnull().sum().sort_values(ascending=False)","9aef835d":"df_train.loc[df_train['MasVnrType'].isnull(),['MasVnrType', 'MasVnrArea']]","ba181202":"df_train['MasVnrType'].fillna('NA', inplace=True)\ndf_train['MasVnrArea'].fillna(0, inplace=True)\n\ndf_test['MasVnrType'].fillna('NA', inplace=True)\ndf_test['MasVnrArea'].fillna(0, inplace=True)","858ac799":"df_train.isnull().sum().sort_values(ascending=False)","adc8a1a4":"df_test.isnull().sum().sort_values(ascending=False)","631b9534":"df_train['Electrical'].value_counts()","dc859e87":"df_train['Electrical'].fillna('SBrkr', inplace=True)","ebe73bce":"df_train.isnull().sum().sort_values(ascending=False)","913faef5":"df_test.isnull().sum().sort_values(ascending=False)","1d336153":"df_test['MSZoning'].value_counts()","2abed98b":"df_test['MSZoning'].fillna('RL', inplace=True)","856bf1b4":"df_test['Functional'].value_counts()","34bd8ba0":"df_test['Functional'].fillna('Typ', inplace=True)","6dd977f2":"df_test['Utilities'].value_counts()","873d8b17":"df_test['Utilities'].fillna('AllPub', inplace=True)","27dcc0f9":"df_test.isnull().sum().sort_values(ascending=False)","99261029":"df_test['BsmtFullBath'].fillna(df_test['BsmtFullBath'].mode()[0], inplace=True)\ndf_test['BsmtHalfBath'].fillna(df_test['BsmtHalfBath'].mode()[0], inplace=True)\ndf_test['BsmtFinSF1'].fillna(0, inplace=True)\ndf_test['BsmtFinSF2'].fillna(0, inplace=True)\ndf_test['BsmtUnfSF'].fillna(0, inplace=True)\ndf_test['TotalBsmtSF'].fillna(0, inplace=True)","14c3dc89":"df_test.isnull().sum().sort_values(ascending=False)","14d8a87f":"df_test['SaleType'].fillna(df_test['SaleType'].mode()[0], inplace=True)\ndf_test['GarageCars'].fillna(df_test['GarageCars'].mode()[0], inplace=True)\ndf_test['GarageArea'].fillna(df_test['GarageArea'].mode()[0], inplace=True)\ndf_test['Exterior1st'].fillna(df_test['Exterior1st'].mode()[0], inplace=True)\ndf_test['Exterior2nd'].fillna(df_test['Exterior2nd'].mode()[0], inplace=True)\ndf_test['KitchenQual'].fillna(df_test['KitchenQual'].mode()[0], inplace=True)","2243db95":"df_test.isnull().sum().sort_values(ascending=False)","6963b590":"from sklearn.base import BaseEstimator, TransformerMixin\nfrom sklearn.pipeline import Pipeline, FeatureUnion\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder","05cee6c6":"class DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attribute_names):\n        self.attribute_names = attribute_names\n        \n    def fit(self, X, y=None):\n        return self\n    \n    def transform(self, X):\n        return X[self.attribute_names].values","7e816d0c":"X_train = df_train[cat_feats + num_feats]\ny_train = df_train['SalePrice']","404762a5":"X_train.shape, y_train.shape","afbd132c":"num_pipeline = Pipeline([\n                            ('selector', DataFrameSelector(num_feats)),\n                            ('std_scaler', StandardScaler())\n                        ])","9f763991":"num_pipeline.fit_transform(X_train)","16580f63":"num_pipeline.fit_transform(X_train).shape","d0ce4df0":"cat_pipeline = Pipeline([\n                            ('selector', DataFrameSelector(cat_feats)),\n                            ('onehot', OneHotEncoder(handle_unknown='ignore'))\n                        ])","c150cf7e":"len(cat_feats)","98e73941":"cat_pipeline.fit_transform(X_train).shape","fa6bdf5a":"full_pipeline = FeatureUnion(transformer_list=[\n                                ('num_pipeline', num_pipeline),\n                                ('cat_pipeline', cat_pipeline)\n                            ])","e1c0b422":"full_pipeline.fit_transform(X_train).shape","7de533f1":"X_prep_train = full_pipeline.fit_transform(X_train)","7a0f3618":"from sklearn.linear_model import LinearRegression, Ridge, Lasso\n\nfrom sklearn.model_selection import cross_val_score, KFold\nfrom sklearn.metrics import mean_squared_error","4aa05175":"kfold = KFold(n_splits=5)","7e868455":"LR_reg = LinearRegression()\nLR_reg.fit(X_prep_train, y_train)\n\ny_pred = LR_reg.predict(X_prep_train)\n\nmean_squared_error(y_train, y_pred, squared=False)","29a2eb0c":"scores = cross_val_score(LR_reg, X_prep_train, y_train, scoring='neg_root_mean_squared_error', cv=kfold)\nprint('Scores:',-scores)\nprint('Mean:',-np.mean(scores))\nprint('Std:',np.std(scores))","cfe8a46a":"from sklearn.model_selection import GridSearchCV","e62e97dc":"param_grid = {\n             }\nLR_reg = LinearRegression()\ngrid_search = GridSearchCV(LR_reg, param_grid, cv=kfold, scoring='neg_root_mean_squared_error', verbose=1)\n\ngrid_search.fit(X_prep_train, y_train)\n\nprint(grid_search.best_params_)\n\nLR_reg = grid_search.best_estimator_\nscores = cross_val_score(LR_reg, X_prep_train, y_train, scoring='neg_root_mean_squared_error', cv=kfold)\nscores_std =  -np.round(np.std(scores),2)\n\nLR_reg.fit(X_prep_train, y_train)\ny_pred = LR_reg.predict(X_prep_train)\nrmse = mean_squared_error(y_train, y_pred, squared=False)\n\ndf_comp = pd.DataFrame([['Linear Regression', np.round(rmse,2), -np.round(np.mean(scores),2), -scores_std]], \n                       columns=['Algo', 'Train_rmse', 'Val_rmse', 'Val_std'])\ndf_comp","a460b5cc":"param_grid = {\n                'alpha':[0.01, 0.03, 0.1, 0.3, 1, 3, 10, 15, 20, 30],\n             }\nRidge_reg = Ridge()\ngrid_search = GridSearchCV(Ridge_reg, param_grid, cv=kfold, scoring='neg_root_mean_squared_error', verbose=1)\n\ngrid_search.fit(X_prep_train, y_train)\n\nprint(grid_search.best_params_)\n\nRidge_reg = grid_search.best_estimator_\nscores = cross_val_score(Ridge_reg, X_prep_train, y_train, scoring='neg_root_mean_squared_error', cv=kfold)\nscores_std =  -np.round(np.std(scores),2)\n\nRidge_reg.fit(X_prep_train, y_train)\ny_pred = Ridge_reg.predict(X_prep_train)\nrmse = mean_squared_error(y_train, y_pred, squared=False)\n\ntemp = pd.DataFrame([['Ridge', np.round(rmse,2), -np.round(np.mean(scores),2), -scores_std]], \n                       columns=['Algo', 'Train_rmse', 'Val_rmse', 'Val_std'])\ndf_comp = df_comp.append(temp,ignore_index=True)\ndf_comp","1e770200":"param_grid = {\n                'alpha':[0.01, 0.03, 0.1, 0.3, 1, 3, 10, 15, 20, 30],  \n                'max_iter':[2000],\n                'tol':[0.03]\n             }\nLasso_reg = Lasso()\ngrid_search = GridSearchCV(Lasso_reg, param_grid, cv=kfold, scoring='neg_root_mean_squared_error', verbose=1)\n\ngrid_search.fit(X_prep_train, y_train)\n\nprint(grid_search.best_params_)\n\nLasso_reg = grid_search.best_estimator_\nscores = cross_val_score(Lasso_reg, X_prep_train, y_train, scoring='neg_root_mean_squared_error', cv=kfold)\nscores_std =  -np.round(np.std(scores),2)\n\nLasso_reg.fit(X_prep_train, y_train)\ny_pred = Lasso_reg.predict(X_prep_train)\nrmse = mean_squared_error(y_train, y_pred, squared=False)\n\ntemp = pd.DataFrame([['Lasso', np.round(rmse,2), -np.round(np.mean(scores),2), -scores_std]], \n                       columns=['Algo', 'Train_rmse', 'Val_rmse', 'Val_std'])\ndf_comp = df_comp.append(temp,ignore_index=True)\ndf_comp","2c1d9892":"X_test = df_test[cat_feats + num_feats]\nX_prep_test = full_pipeline.transform(X_test)","683835db":"y_pred_test = Ridge_reg.predict(X_prep_test)","e994a780":"y_pred_test","f7f32b6b":"submission = pd.DataFrame({\n        \"Id\": df_test['Id'],\n        \"SalePrice\": y_pred_test\n    })\n\nsubmission.to_csv('ridge_sub.csv',index=False)","b48c6c34":"submission.head()","bf2bec39":"# Loading the data","e4ed03d2":"Based on Validation Score, it seems Ridge gives the best performance so far. \\\nLet's find the predictions for the test-set and deliver on Kaggle.","08935b5e":"#### Masonry Veneer","d5655ef4":"#### Fence","f2035a73":"## Ridge","735d944f":"### Preparing Data for Modelling","c617d968":"#### Pool Related Missing Values","1b0f8101":"### 3. Are there any missing values?","de37ddee":"Hurray!!! All missing values are dealt with.","73574d34":"# Testing and Deployment","b1a7e5c1":"#### Fireplace","9096db11":"#### Misc Features","e9a323c2":"#### Electrical","cd7248dd":"On inspection of the remaining features, the following are categorical as well","e730486c":"#### Garage Related","1c947e48":"### Let's try some models","dfb2a94c":"# Data Preprocessing","b7277141":"## Linear Regression","e0bfb23d":"# Data Description","5c4de11c":"Let's first deal with missing values.","8bc49244":"#### Alley","231c7d83":"Thus, out of 81 columns: \\\nNumerical Features = 33\\\nCategorical Features = 46\\\nId and Sale Price = 2","1f8248a2":"### Fine Tuning\nLet's try cross validation and grid search","72ea1909":"### 1. What features are present? How many numerical? How many categorical?","920b4914":"# Introduction\n\nWe will write code to predict the house price based on the different features that describe the house.\n\nLet's build this predictive model by incrementally building upon complexity.","12ff9a53":"Seem's like there are outliers, let's bound them in a maximum range.","fb366556":"#### Basement related","935c9940":"# Data Exploration","78a2774a":"### 2. How many data points in train and test?","a1b9724a":"Fit:\\\nmu = np.mean(X)\\\nsigma = np.std(X)\n\nTransform:\\\nX = (X - mu)\/sigma\n\nFit_transform:\\\nmu = np.mean(X)\\\nsigma = np.std(X)\\\nX = (X - mu)\/sigma","4d8312fe":"## Lasso","56844157":"# Data Modelling","85144d60":"The features with data-types as object as definitely categorical. Additionally there may be some features with int64 (or float64) that may be categorical as well.","d321652c":"#### Lot Frontage"}}