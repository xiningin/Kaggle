{"cell_type":{"c99e15d4":"code","1381080c":"code","f092854f":"code","5d6aa7a0":"code","5c4b8765":"code","a048ef79":"code","f9ac51fc":"code","fe785e5f":"code","2a4c6b0a":"code","cfb36fb3":"code","b9555b2f":"code","c30e53a0":"code","7b984b4f":"code","b73a63b3":"code","103ba8b9":"code","b1c2f122":"code","20f00dae":"code","e1d7e753":"code","1db70bae":"code","57a1c6a2":"code","634cee38":"code","68f6d53a":"code","fafecc04":"code","f606e8f0":"code","12b92dbb":"code","3971a32a":"code","39659d95":"code","d89547fb":"code","4f0e5c6b":"code","17305b6c":"code","14e4e5fc":"code","1ca0779b":"markdown","129f48f0":"markdown","b3724438":"markdown","40d75690":"markdown","991aadf5":"markdown","26d97f6b":"markdown","7a16f446":"markdown","69376d74":"markdown","9de755e6":"markdown","99d08e3b":"markdown","f5c86546":"markdown","c99413ae":"markdown","e99dd37b":"markdown","5ea18bad":"markdown","695e1f42":"markdown","2a2b2aa5":"markdown","77477337":"markdown","ad6cce17":"markdown","74fcba69":"markdown","8c79277a":"markdown","a6905b0f":"markdown","cfc99176":"markdown"},"source":{"c99e15d4":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom datetime import date, timedelta\nimport warnings\nimport folium\nimport plotly.express as px\n","1381080c":"df_case=pd.read_csv(\"..\/input\/uniteldatahackathon\/Case.csv\")\ndf_patient_info=pd.read_csv(\"..\/input\/uniteldatahackathon\/PatientInfo.csv\")\ndf_region=pd.read_csv(\"..\/input\/uniteldatahackathon\/Region.csv\")\ndf_search_trend=pd.read_csv(\"..\/input\/uniteldatahackathon\/SearchTrend.csv\")\ndf_time=pd.read_csv(\"..\/input\/uniteldatahackathon\/Time.csv\")\ndf_time_age=pd.read_csv(\"..\/input\/uniteldatahackathon\/TimeAge.csv\")\ndf_time_gender=pd.read_csv(\"..\/input\/uniteldatahackathon\/TimeGender.csv\")\ndf_time_province=pd.read_csv(\"..\/input\/uniteldatahackathon\/TimeProvince.csv\")\ndf_weather=pd.read_csv(\"..\/input\/uniteldatahackathon\/Weather.csv\")\ndf_seoul=pd.read_csv(\"..\/input\/uniteldatahackathon\/SeoulFloating.csv\")","f092854f":"# Pie chart of gender info from patient_info table \nfig = px.pie(df_patient_info, names='sex', title='Gender Ratio')\nfig.update_layout(margin=dict(t=150, b=150, l=150, r=150)) \nfig.show()","5d6aa7a0":"sns.countplot(data=df_patient_info, x='age', hue='sex')\nplt.title(\"Age vs Gender ratio\")","5c4b8765":"sns.scatterplot(x='deceased', y='confirmed', data = df_time_gender, hue = 'sex')","a048ef79":"# Calculating percentage of confirmed cases from number of tests taken that day\ndf_time['percentage_positive']= df_time['confirmed'] \/ df_time['test']\n\n# Function to change 'date' column's datatype and return df\ndef datetype(df):\n    newtype_df = df.copy()\n    newtype_df.date = df.date.astype('datetime64[ns]')\n    return newtype_df","f9ac51fc":"df_time=datetype(df_time)\n\n# date_delta: number of days since the first day of df\ndf_time['date_delta'] = (df_time['date'] - df_time['date'].min())  \/ np.timedelta64(1,'D')\ndf_time = df_time[df_time['percentage_positive'] < 0.05] #remove outliers\n\nplt.title(\"Percentage Confirmed\")\nsns.regplot(x=\"date_delta\", y=\"percentage_positive\", data=df_time)","fe785e5f":"plt.title(\"State ratio\")\ndf_patient_info.state.value_counts().plot.pie()\ncentre_circle = plt.Circle((0,0),0.5,color='black', fc='white',linewidth=1.25)\nfig = plt.gcf()\nfig.gca().add_artist(centre_circle)","2a4c6b0a":"# date column format change\ndf_patient_info['released_date'] = pd.to_datetime(df_patient_info['released_date'], format='%Y-%m-%d')\ndf_patient_info['confirmed_date'] = pd.to_datetime(df_patient_info['confirmed_date'], format='%Y-%m-%d')\n# df_patient_info['deceased_date'] = pd.to_datetime(df_patient_info['deceased_date'], format='%Y-%m-%d')\n\nplt.figure(figsize=(15,5))\nplt.scatter(df_patient_info['confirmed_date'],df_patient_info['released_date'],marker='x')\nplt.title(\"Confirmed and Released Date of Patient\")","cfb36fb3":"fig = px.line(df_time_age, y='deceased', x='confirmed', color=\"age\")\nfig.show()","b9555b2f":"fig = px.bar(df_patient_info, x=\"age\", y=\"contact_number\",height=400)\nfig.show()","c30e53a0":"# \ndf_count = df_case.groupby('infection_case').sum().sort_values('confirmed',ascending=False).head(10)\ndf_count = df_count.reset_index()\ndf_count = df_count[['infection_case','group','confirmed']]\ndf_count","7b984b4f":"fig, (ax1, ax2) = plt.subplots(1, 2)\nfig.suptitle('Group infected place and counts')\nfig.set_figheight(5)\nfig.set_figwidth(20)\ndf_count.plot.bar(stacked=True, x = 'infection_case',y = 'confirmed',ax=ax1,color='red')\ndf_count.plot.bar(stacked=True, x = 'infection_case',y = 'group',ax=ax2, color='magenta')","b73a63b3":"# NUlling missing COORDINATEs\ndf_case['latitude'] = np.where(df_case['latitude'] == '-', np.nan,df_case['latitude'],)\ndf_case['longitude'] = np.where(df_case['longitude'] == '-', np.nan,df_case['longitude'],)\n\n# Making Korean Map\nsouthkorea_map = folium.Map(location=[36.55,126.983333 ], zoom_start=7,tiles='cartodbpositron')\n\nfor lat, lon,city,location,group,confirmed in zip(df_case[df_case['latitude'].notnull()]['latitude'], \n                                        df_case[df_case['longitude'].notnull()]['longitude'], \n                                        df_case['city'], df_case['infection_case'],\n                                        df_case['group'],df_case['confirmed']):\n    folium.CircleMarker([lat, lon],\n                        radius=8,\n                        color='crimson',\n                      popup =('City: ' + str(city) + '<br>'\n                             + 'Group: ' + str(group)+ '<br>'\n                             +str(location)+':'+str(confirmed)),\n                        fill_color='crimson',\n                        fill_opacity= 0.2).add_to(southkorea_map)\nsouthkorea_map","103ba8b9":"# Finding infector and confirmed contacts\ndf_infected_by = df_patient_info.groupby(['infected_by', 'infection_case']).count().sort_values('patient_id', ascending=False)\ndf_infected_by = df_infected_by.rename_axis(['infecter_id','infected_place']).reset_index()\ndf_infected_by['contact_confirmed'] = df_infected_by['patient_id']\ndf_infected_by['infecter_id'] = (df_infected_by['infecter_id'].str[0:10]).astype(int)\ndf_infected_by = df_infected_by[['infecter_id','infected_place','contact_confirmed']]\n# Infector information\ndf_tmp_patient = df_patient_info\ndf_tmp_patient['patient_id'] = df_tmp_patient['patient_id'].astype(int)\ntest_df = pd.merge(df_infected_by, df_patient_info, left_on='infecter_id', right_on='patient_id')\ndf_infected_by = test_df[['infecter_id','contact_confirmed','infected_place','sex','age','province','infection_case','infected_by','symptom_onset_date','confirmed_date','released_date','deceased_date','state']].sort_values('contact_confirmed', ascending=False)\n","b1c2f122":"# How many people has infected by whom (Excluded \"contact with patient\")\ndf_infected_by[df_infected_by['infected_place'] != 'contact with patient'].sort_values(['contact_confirmed'], ascending=False).head(10)","20f00dae":"# How many people has infected by whom\ndf_infected_by.sort_values(['contact_confirmed'], ascending=False).head(10)","e1d7e753":"# Change date datatype of SearchTrend table\ndf_search = datetype(df_search_trend)\n\n# Merge SearchTrend with Time table(has daily positive case percentage column)\ndf_search_total = df_search.merge(df_time, on=\"date\") ","1db70bae":"fig=px.scatter(df_search_total,x=\"date\", y=\"cold\", size=\"percentage_positive\", \n               color=\"percentage_positive\",title='Keyword= \\'cold\\' vs Covid positive percentage')\nfig.show()","57a1c6a2":"fig=px.scatter(df_search_total,x=\"date\", y=\"flu\", size=\"percentage_positive\", color=\"percentage_positive\",title='Keyword= \\'flu\\' vs Covid positive percentage')\nfig.show()","634cee38":"fig=px.scatter(df_search_total,x=\"date\", y=\"pneumonia\", size=\"percentage_positive\", color=\"percentage_positive\",title='Keyword= \\'pneumonia\\' vs Covid positive percentage')\nfig.show()","68f6d53a":"# Change date datatype of SearchTrend table\ndf_weather = datetype(df_weather)\n\n# Merge Weather with Time table(has daily positive case percentage column)\ndf_weather_total = df_weather.merge(df_time, on=\"date\")","fafecc04":"fig=px.scatter(df_weather_total,x=\"date\", y=\"max_wind_speed\", size=\"percentage_positive\", \n               color=\"percentage_positive\",title='Max wind speed vs Covid positive percentage')\nfig.show()","f606e8f0":"fig=px.scatter(df_weather_total,x=\"date\", y=\"max_temp\", size=\"percentage_positive\", \n               color=\"percentage_positive\",title='Max temp vs Covid positive percentage')\nfig.show()","12b92dbb":"#prepare new table\ndf_mean = pd.DataFrame(columns = ['date', 'mean_avg_temp', 'mean_min_temp', 'mean_max_temp', 'mean_precipitation', 'mean_max_wind_speed', 'mean_most_wind_direction', 'mean_avg_relative_humidity'])","3971a32a":"#find mean values\nmean = df_weather.groupby(['date'])['avg_temp'].mean()\ndf_mean['date'] = mean.index\ndf_mean['mean_avg_temp'] = mean.values\nmean = df_weather.groupby(['date'])['min_temp'].mean()\ndf_mean['mean_min_temp'] = mean.values\n\nmean = df_weather.groupby(['date'])['max_temp'].mean()\ndf_mean['mean_max_temp'] = mean.values\n\nmean = df_weather.groupby(['date'])['precipitation'].mean()\ndf_mean['mean_precipitation'] = mean.values\n\nmean = df_weather.groupby(['date'])['max_wind_speed'].mean()\ndf_mean['mean_max_wind_speed'] = mean.values\n\nmean = df_weather.groupby(['date'])['most_wind_direction'].mean()\ndf_mean['mean_most_wind_direction'] = mean.values\n\nmean = df_weather.groupby(['date'])['avg_relative_humidity'].mean()\ndf_mean['mean_avg_relative_humidity'] = mean.values","39659d95":"#merge confirmed case and weather\ndf_confirmed_merge = df_time[['date','confirmed']]\ndf_total1 = df_confirmed_merge.merge(df_mean, on='date')","d89547fb":"#average temperature over time vs positive cases\nsns.scatterplot(x=\"date\", y=\"mean_avg_temp\", size=\"confirmed\", sizes=(20, 200), hue=\"confirmed\", data=df_total1)\nplt.title(\"average temperature over time vs positive cases\")","4f0e5c6b":"sns.scatterplot(x=\"date\", y=\"mean_precipitation\", size=\"confirmed\", sizes=(20, 200), hue=\"confirmed\", data=df_total1)\nplt.title(\"precipitation over time vs positive cases\")","17305b6c":"sns.scatterplot(x=\"date\", y=\"mean_max_wind_speed\", size=\"confirmed\", sizes=(20, 200), hue=\"confirmed\", data=df_total1)\nplt.title(\"maximum wind speed over time vs positive cases\")","14e4e5fc":"sns.scatterplot(x=\"date\", y=\"mean_most_wind_direction\", size=\"confirmed\", sizes=(50, 200), hue=\"confirmed\", data=df_total1)\nplt.title(\"most wind direction over time vs positive cases\")","1ca0779b":"# \u0425\u0430\u043b\u0434\u0432\u0430\u0440 \u0430\u0432\u0441\u0430\u043d \u0445\u04af\u043d \u0445\u0430\u0430\u0433\u0443\u0443\u0440 \u044f\u0432\u0436 \u0445\u044d\u0434\u044d\u043d \u0445\u04af\u043d\u0434 \u0445\u0430\u043b\u0434\u0432\u0430\u0440 \u0442\u0430\u0440\u0430\u0430\u0441\u0430\u043d \u0442\u0443\u0445\u0430\u0439","129f48f0":"# **\u0421\u043e\u043b\u043e\u043d\u0433\u043e\u0441 \u0443\u043b\u0441\u0430\u0434 \u043a\u043e\u0432\u0438\u0434\u044b\u043d \u0445\u0430\u043b\u0434\u0432\u0430\u0440\u044b\u043d \u0442\u0430\u0440\u0445\u0430\u043b\u0442 \u0413\u0430\u0437\u0440\u044b\u043d \u0437\u0443\u0440\u0430\u0433\u0430\u0430\u0440**","b3724438":"## \u04e8\u0433\u04e9\u0433\u0434\u0441\u04e9\u043d \u0434\u0430\u0442\u0430\u043d\u0443\u0443\u0434\u044b\u0433 \u0443\u043d\u0448\u0438\u0445","40d75690":"> ### \u041a\u043e\u0432\u0438\u0434-\u043d \u0442\u0430\u0440\u0445\u0430\u043b\u0442\u044b\u043d \u0442\u0430\u043b\u0430\u0430\u0440 \u0445\u0438\u0439\u0441\u044d\u043d \u0441\u0443\u0434\u0430\u043b\u0433\u0430\u0430\u043d\u0434 \u0442\u0443\u0445\u0430\u0439\u043d \u04e9\u0434\u0440\u0438\u0439\u043d \u0441\u0430\u043b\u0445\u0438, \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440, \u0447\u0438\u0439\u0433\u0448\u043b\u0438\u0439\u043d \u0445\u044d\u043c\u0436\u044d\u044d \u043d\u044c \u0442\u0430\u0440\u0445\u0430\u043b\u0442\u044b\u043d \u0442\u043e\u043e\u0442\u043e\u0439 \u0443\u044f\u043b\u0434\u0430\u0430\u0442\u0430\u0439 \u0431\u0430\u0439\u0436 \u0431\u043e\u043b\u0437\u043e\u0448\u0433\u04af\u0439 \u0433\u044d\u0441\u044d\u043d \u0434\u04af\u0433\u043d\u044d\u043b\u0442 \u0433\u0430\u0440\u0433\u0430\u0441\u0430\u043d \u0431\u0430\u0439\u043d\u0430. \n\n> ### \u0414\u043e\u043e\u0440\u0445 \u0433\u0440\u0430\u0444-\u0441 \u0445\u0430\u0440\u0445\u0430\u0434 \u04e9\u0434\u0440\u0438\u0439\u043d \u0434\u0443\u043d\u0434\u0430\u0436 \u0433\u0440\u0430\u0434\u0443\u0441 7-18 \u0431\u0430\u0439\u0445 \u04af\u0435\u0434 \u0442\u0430\u0440\u0445\u0430\u043b\u0442 \u04e9\u043d\u0434\u04e9\u0440 \u0431\u0430\u0439\u0436 \u0431\u043e\u043b\u0437\u043e\u0448\u0433\u04af\u0439, \u0421\u0430\u043b\u0445\u0438\u043d\u044b \u0445\u0443\u0440\u0434\u0442\u0430\u0439 \u0445\u0430\u043c\u0430\u0430\u0440\u0430\u043b \u0445\u0430\u0440\u0430\u0433\u0434\u0430\u0430\u0433\u04af\u0439.\n\n*Ref:* https:\/\/www.ncbi.nlm.nih.gov\/pmc\/articles\/PMC7194794\/","991aadf5":"# **Search Trend Analysis**","26d97f6b":"> ### 50-\u0430\u0430\u0441 \u0434\u044d\u044d\u0448 \u04e9\u043d\u0434\u04e9\u0440 \u043d\u0430\u0441\u0442\u0430\u0439 \u0438\u0440\u0433\u044d\u0434\u0438\u0439\u043d \u0445\u0430\u043b\u0434\u0432\u0430\u0440 \u0430\u0432\u0430\u0445 \u0442\u043e\u043e \u0431\u0430\u0433\u0430 \u0447 \u043d\u0430\u0441 \u0431\u0430\u0440\u0430\u043b\u0442\u044b\u043d \u0445\u044d\u043c\u0436\u044d\u044d \u0445\u0430\u0440\u044c\u0446\u0430\u043d\u0433\u0443\u0439 \u04e9\u043d\u0434\u04e9\u0440\n\n> ### \u0417\u0430\u043b\u0443\u0443 \u0445\u04af\u043c\u04af\u04af\u0441 \u0434\u0443\u043d\u0434 \u0431\u0430\u0442\u043b\u0430\u0433\u0434\u0441\u0430\u043d \u0442\u043e\u0445\u0438\u043e\u043b\u0434\u043e\u043b \u043e\u043b\u043e\u043d \u0431\u0430\u0439\u0441\u0430\u043d \u0447 \u043d\u0430\u0441 \u0431\u0430\u0440\u0430\u0445 \u0442\u043e\u043e \u0431\u0430\u0433\u0430 \n\n> ### \u0425\u0430\u043b\u0434\u0432\u0430\u0440 \u0442\u0443\u0441\u0441\u0430\u043d \u0442\u043e\u0445\u0438\u043e\u043b\u0434\u043e\u043b\u0434 \u0445\u04af\u043d\u0434\u0440\u044d\u0445 \u043c\u0430\u0433\u0430\u0434\u043b\u0430\u043b \u043d\u044c \u0442\u0443\u0445\u0430\u0439\u043d \u0445\u04af\u043d\u0438\u0439 \u043d\u0430\u0441\u0442\u0430\u0439 \u0448\u0443\u0443\u0434 \u0445\u043e\u043b\u0431\u043e\u043e\u0442\u043e\u0439 \u0431\u0430\u0439\u0445 \u043c\u0430\u0433\u0430\u0434\u043b\u0430\u043b\u0442\u0430\u0439.","7a16f446":"* \u0425\u04af\u043d \u0430\u043c \u0438\u0445\u0442\u044d\u0439 \u0445\u043e\u0442\u0443\u0443\u0434\u044b\u043d \u0436\u0430\u0433\u0441\u0430\u0430\u043b\u0442 2020 \u043e\u043d\u044b \u0434\u0430\u0442\u0430\n\n|Rank| Division | 2020  |  \n|----|----------|------------|\n|  1 |   Seoul  | 9,586,195  |   \n|  2 |   Busan  | 3,349,016  |  \n|  3 |  Incheon | 2,945,454  |  \n|  4 |   Daegu  | 2,410,700  |  \n|  5 |  Daejeon | 1,488,435  | \n|  6 |  Gwangju | 1,477,573  |\n|  7 |   Suwon  | 1,210,150  |  \n\n\nhttps:\/\/en.wikipedia.org\/wiki\/List_of_cities_in_South_Korea_by_population","69376d74":"# **Group infected place and Count**","9de755e6":"> ### \u0421\u043e\u043b\u043e\u043d\u0433\u043e\u0441 \u0443\u043b\u0441\u044b\u043d \u0433\u0430\u0437\u0440\u044b\u043d \u0437\u0443\u0440\u0430\u0433 \u0434\u044d\u044d\u0440\u044d\u044d\u0441 \u0445\u0430\u0440\u0430\u0445\u0430\u0434 \u04e9\u0432\u0447\u043b\u04e9\u043b\u0438\u0439\u043d \u043d\u044f\u0433\u0442\u0430\u0440\u0448\u0438\u043b \u043d\u044c \u0445\u04af\u043d \u0430\u043c \u0438\u0445\u0442\u044d\u0439 \u0431\u04af\u0441\u044d\u0434 \u0438\u0445 \u0431\u0430\u0439\u043d\u0430.","99d08e3b":"# **Age & Gender Analysis**","f5c86546":"> \u0426\u0430\u0433 \u0430\u0433\u0430\u0430\u0440 \u043d\u044c \u043a\u043e\u0432\u0438\u0434\u044b\u043d \u0442\u0430\u0440\u0445\u0430\u043b\u0442\u0430\u0434 \u0448\u0443\u0443\u0434 \u043d\u04e9\u043b\u04e9\u04e9\u043b\u04e9\u0445 \u043d\u04e9\u043b\u04e9\u04e9\u043b\u04e9\u043b \u0431\u0430\u0433\u0430 \u0433\u044d\u0441\u044d\u043d \u0434\u04af\u0433\u043d\u044d\u043b\u0442\u044b\u0433 \u0434\u044d\u044d\u0440\u0445 \u0445\u0430\u043c\u0430\u0430\u0440\u043b\u0443\u0443\u0434\u0430\u0430\u0441 \u0433\u0430\u0440\u0433\u0430\u0436 \u0431\u043e\u043b\u043d\u043e. \u0413\u044d\u0445\u0434\u044d\u044d \u0434\u044d\u044d\u0440\u0445 \u0445\u0430\u043c\u0430\u0430\u0440\u043b\u044b\u043d \u0433\u0440\u0430\u0444\u0438\u043a\u0443\u0443\u0434 \u043d\u044c \u0446\u0430\u0433 \u0445\u0443\u0433\u0430\u0446\u0430\u0430\u043d\u044b \u0445\u0443\u0432\u044c\u0434 \u043a\u043e\u0432\u0438\u0434 \u04e9\u0432\u0447\u043d\u0438\u0439 \u0442\u0430\u0440\u0445\u0430\u043b\u0442\u044b\u043d \u044d\u0440\u0447\u0438\u043c\u0442\u044d\u0439 \u04af\u0435\u0438\u0439\u0433 \u0445\u0430\u043c\u0430\u0440\u0447 \u0431\u0430\u0439\u0433\u0430\u0430 \u0443\u0447\u0438\u0440 \u0446\u0430\u0433 \u0445\u0443\u0433\u0430\u0446\u0430\u0430\u043d\u0430\u0430\u0441 \u0445\u0430\u043c\u0430\u0430\u0440\u0430\u043d \u0442\u0430\u0440\u0445\u0430\u043b\u0442 \u043d\u044c \u04e9\u0441\u0441\u04e9\u043d \u04af\u0440 \u0434\u04af\u043d \u0445\u0430\u0440\u0430\u0433\u0434\u0430\u0436 \u0431\u0430\u0439\u043d\u0430.","c99413ae":"## Weather and Wind Analysis","e99dd37b":"> ### \u0425\u0430\u043b\u0434\u0432\u0430\u0440 \u0430\u0432\u0441\u0430\u043d \u044d\u0440\u044d\u0433\u0442\u044d\u0439 \u0445\u04af\u043d\u0438\u0439 \u0442\u043e\u043e \u044d\u043c\u044d\u0433\u0442\u044d\u0439\u0433\u044d\u044d\u0441 \u0431\u0430\u0433\u0430 \u0447 \u043d\u0430\u0441 \u0431\u0430\u0440\u0441\u0430\u043d \u0442\u043e\u0445\u0438\u043e\u043b\u0434\u043b\u044b\u043d \u0442\u043e\u043e \u04e9\u043d\u0434\u04e9\u0440.","5ea18bad":"> ### \u0414\u0430\u0442\u0430\u043d\u044b \u044d\u0445\u043d\u0438\u0439 \u04e9\u0434\u0440\u04e9\u04e9\u0441 \u0445\u043e\u0439\u0448 \u043a\u043e\u0432\u0438\u0434 \u0442\u0435\u0441\u0442 \u04e9\u0433\u0441\u04e9\u043d \u0431\u043e\u043b\u043e\u043d \u0442\u0435\u0441\u0442 \u044d\u0435\u0440\u044d\u0433 \u0433\u0430\u0440\u0441\u0430\u043d \u0442\u043e\u0445\u0438\u043e\u043b\u0434\u043b\u044b\u043d \u0445\u0430\u0440\u044c\u0446\u0430\u0430 \u0431\u0443\u0443\u0440\u0441\u0430\u0430\u0440 \u0431\u0430\u0439\u0441\u0430\u043d.","695e1f42":"> ### \u041d\u0438\u0439\u0442 \u04e9\u0432\u0447\u0438\u043b\u0441\u04e9\u043d \u0445\u04af\u043c\u04af\u04af\u0441 \u0434\u0443\u043d\u0434 \u044d\u043c\u044d\u0433\u0442\u044d\u0439\u0447\u04af\u04af\u0434\u0438\u0439\u043d \u044d\u0437\u043b\u044d\u0445 \u0445\u0443\u0432\u044c \u044d\u0440\u044d\u0433\u0442\u044d\u0439 \u0445\u04af\u043c\u04af\u04af\u0441\u044d\u044d\u0441 7.6%-\u0430\u0430\u0440 \u04e9\u043d\u0434\u04e9\u0440.","2a2b2aa5":"> ### Shincheonji Church-\u0442 15 \u04e9\u04e9\u0440 \u0431\u04af\u043b\u044d\u0433 \u0445\u04af\u043c\u04af\u04af\u0441 \u0445\u0430\u043b\u0434\u0432\u0430\u0440 \u0430\u0432\u0441\u0430\u043d \u0431\u04e9\u0433\u04e9\u04e9\u0434 \u0445\u04af\u043c\u04af\u04af\u0441\u0438\u0439\u043d \u0442\u043e\u043e \u043d\u044c 5213 \u0431\u0430\u0439\u043d\u0430.","77477337":"## \u0425\u0430\u043b\u0434\u0432\u0430\u0440\u0442\u0430\u0439 \u0445\u04af\u043d \u043e\u043b\u043e\u043d \u043d\u0438\u0439\u0442\u0438\u0439\u043d \u0433\u0430\u0437\u0430\u0440 \u043e\u0447\u0438\u0436 \u0445\u0430\u043b\u0434\u0430\u0430\u0441\u0430\u043d \u0442\u043e\u0445\u0438\u043e\u043b\u0434\u043e\u043b\u0443\u0443\u0434 \u044d\u0445\u043d\u0438\u0439 10 ","ad6cce17":"> ### \u0425\u0430\u043b\u0434\u0432\u0430\u0440 \u0430\u0432\u0441\u0430\u043d \u0445\u04af\u043c\u04af\u04af\u0441\u0438\u0439\u043d \u0438\u0445\u044d\u043d\u0445 \u043d\u044c \u0442\u0443\u0445\u0430\u0439\u043d \u0441\u0430\u0440\u0434\u0430\u0430 \u044d\u0441\u0432\u044d\u043b \u0434\u0430\u0440\u0430\u0430\u0433\u044b\u043d \u0441\u0430\u0440\u0434\u0430\u0430 \u0431\u0430\u0433\u0442\u0430\u0430\u043d \u044d\u0434\u0433\u044d\u0441\u044d\u043d.","74fcba69":"> ### \u0425\u0430\u0432\u044c\u0442\u0430\u043b \u0431\u043e\u043b\u0441\u043e\u043d \u0442\u043e\u043e\u043d\u043e\u043e\u0441 \u0445\u0430\u0440\u0432\u0430\u043b \u0430\u0436\u0438\u043b, \u0441\u0443\u0440\u0433\u0443\u0443\u043b\u044c\u0434 \u0442\u0430\u0441\u0440\u0430\u043b\u0442\u0433\u04af\u0439 \u044f\u0432\u0434\u0430\u0433 \u043d\u0430\u0441\u043d\u044b \u0438\u0440\u0433\u044d\u0434 \u0438\u043b\u04af\u04af \u04e9\u043d\u0434\u04e9\u0440 \u04af\u0437\u04af\u04af\u043b\u044d\u043b\u0442\u0442\u044d\u0439 \u0431\u0430\u0439\u043d\u0430.","8c79277a":"## \u041e\u043b\u043e\u043d \u0445\u04af\u043d\u0434 \u0445\u0430\u043b\u0434\u0432\u0430\u0440 \u0442\u0430\u0440\u0430\u0430\u0441\u0430\u043d \u044d\u0445\u043d\u0438\u0439 10 \u0445\u04af\u043d","a6905b0f":">  * **4100000008** ID-\u0442\u0430\u0439 **Chungcheongnam-do**-\u0434 \u0430\u043c\u044c\u0434\u0430\u0440\u0434\u0430\u0433 **40**-\u0434 \u043d\u0430\u0441\u043d\u044b **\u044d\u043c\u044d\u0433\u0442\u044d\u0439** **Cheonan \u0434\u0430\u0445\u044c gym**-\u0434 \u043e\u0447\u0438\u0436 \u0442\u044d\u043d\u0434 \u0431\u0430\u0439\u0441\u0430\u043d **26**  \u0445\u04af\u043d \u04e9\u0432\u0447\u0438\u043b\u0441\u04e9\u043d. **\/2020-02-20-\u043d\u0434 \u0448\u0438\u043d\u0436 \u0442\u044d\u043c\u0434\u044d\u0433 \u0438\u043b\u044d\u0440\u0447 2020-02-26\u043d\u044b \u04e9\u0434\u04e9\u0440 \u0431\u0430\u0442\u043b\u0430\u0433\u0434\u0430\u0436 2020-03-29 \u044d\u0434\u0433\u044d\u0440\u0441\u044d\u043d\/** \n>  * **2000000205** ID-\u0442\u0430\u0439 **Gyeonggi-do**-\u043d **Seongnam-si**-\u0434 \u0430\u043c\u044c\u0434\u0430\u0440\u0434\u0430\u0433 **70**-\u0434 \u043d\u0430\u0441\u043d\u044b **\u044d\u043c\u044d\u0433\u0442\u044d\u0439** **1000000138**-\u0441 \u0445\u0430\u043b\u0434\u0432\u0430\u0440 \u0430\u0432\u0447 **2020-03-14\u043d\u0434 \u0431\u0430\u0442\u043b\u0430\u0433\u0434\u0441\u0430\u043d** \/**\u043e\u0434\u043e\u043e\u0433\u043e\u043e\u0440 \u0442\u0443\u0441\u0433\u0430\u0430\u0440\u043b\u0430\u043b\u0442\u0430\u043d\u0434 \u0431\u0430\u0439\u0433\u0430\u0430**\/ **\u043e\u043b\u043e\u043d \u0445\u04af\u043d\u0442\u044d\u0439 \u0443\u0443\u043b\u0437\u0430\u0436** \u0442\u044d\u0434\u0433\u044d\u044d\u0440\u0438\u0439\u043d **51** \u043d\u044c \u04e9\u0432\u0447\u0438\u043b\u0441\u04e9\u043d.","cfc99176":"> ### \u0428\u0438\u043d\u0436\u0438\u043b\u0433\u044d\u044d \u04e9\u0433\u0447 \u044d\u0435\u0440\u044d\u0433 \u0433\u0430\u0440\u0441\u0430\u043d \u0438\u0440\u0433\u044d\u0434\u0438\u0439\u043d \u0445\u0443\u0432\u044c \u0438\u0445\u0441\u044d\u043d \u0442\u0443\u0441\u0430\u043c \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u044d\u044d\u0441 \u04e9\u04e9\u0440\u0438\u0439\u043d \u0448\u0438\u043d\u0436 \u0442\u044d\u043c\u0434\u0433\u0438\u0439\u0433 \u043a\u043e\u0432\u0438\u0434 \u0431\u0438\u0448 \u0430\u0434\u0438\u043b \u0442\u04e9\u0441\u0442 \u04e9\u0432\u0447\u043d\u0438\u0439\u0445 \u044d\u0441\u044d\u0445\u0438\u0439\u0433 \u0445\u0430\u0439\u0436 \u0448\u0430\u043b\u0433\u0430\u0445 \u0445\u04af\u043d\u0438\u0439 \u0442\u043e\u043e \u0438\u0445\u0441\u0441\u044d\u043d"}}