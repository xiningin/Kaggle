{"cell_type":{"a83f8743":"code","c39ca9cd":"code","ab12178b":"code","97251f4e":"code","4a1584ef":"code","0f3477b3":"code","40fb3257":"code","625ba452":"code","82f6bf67":"code","63d4621f":"code","c7878bc2":"code","0aa7153b":"code","e972defc":"code","039b868f":"code","ddf9b9cc":"code","04b2a827":"code","70478877":"code","f7cb59de":"code","cee0d40b":"code","c4cad082":"code","727ae490":"code","ae92cb68":"code","29942c7a":"code","2e2711fb":"code","c7271822":"code","66a028b4":"code","4d2c5e02":"code","640afe83":"code","5204ee5a":"code","68a9ef31":"markdown","47e4b101":"markdown","9c0e4bf0":"markdown","04aa9e1e":"markdown","0953e7f8":"markdown","5452ea52":"markdown","53bdfe6f":"markdown","43d005e2":"markdown","366ae28e":"markdown","42f005ce":"markdown","3e25a850":"markdown","69c097db":"markdown","7699abf3":"markdown","0a1d3b48":"markdown","98c330f2":"markdown","0b14ba4d":"markdown","62e7ef8b":"markdown","afd44f5e":"markdown","9ed36c0e":"markdown","9131bcf4":"markdown","537e4085":"markdown","17423cde":"markdown","fb4e5f7c":"markdown","1316a128":"markdown","19d7f84e":"markdown","30b38425":"markdown","5ab7ace6":"markdown"},"source":{"a83f8743":"import os\nimport gc\nimport sys\nimport json\nimport glob\nimport random\nfrom pathlib import Path\n\nimport cv2\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport itertools\nfrom tqdm import tqdm\n\nfrom imgaug import augmenters as iaa\nfrom sklearn.model_selection import StratifiedKFold, KFold","c39ca9cd":"DATA_DIR = Path('\/kaggle\/input')\nROOT_DIR = Path('\/kaggle\/working')\n\n# For demonstration purpose, the classification ignores attributes (only categories),\n# and the image size is set to 512, which is the same as the size of submission masks\nNUM_CATS = 46\nIMAGE_SIZE = 512","ab12178b":"!git clone https:\/\/www.github.com\/matterport\/Mask_RCNN.git\nos.chdir('Mask_RCNN')\n\n!rm -rf .git # to prevent an error when the kernel is committed\n!rm -rf images assets # to prevent displaying images at the bottom of a kernel","97251f4e":"sys.path.append(ROOT_DIR\/'Mask_RCNN')\nfrom mrcnn.config import Config\nfrom mrcnn import utils\nimport mrcnn.model as modellib\nfrom mrcnn import visualize\nfrom mrcnn.model import log","4a1584ef":"!wget --quiet https:\/\/github.com\/matterport\/Mask_RCNN\/releases\/download\/v2.0\/mask_rcnn_coco.h5\n!ls -lh mask_rcnn_coco.h5\n\nCOCO_WEIGHTS_PATH = 'mask_rcnn_coco.h5'","0f3477b3":"class FashionConfig(Config):\n    NAME = \"fashion\"\n    NUM_CLASSES = NUM_CATS + 1 # +1 for the background class\n    \n    GPU_COUNT = 1\n    IMAGES_PER_GPU = 2 # a memory error occurs when IMAGES_PER_GPU is too high\n    \n    BACKBONE = 'resnet50'\n    \n    IMAGE_MIN_DIM = IMAGE_SIZE\n    IMAGE_MAX_DIM = IMAGE_SIZE    \n    IMAGE_RESIZE_MODE = 'none'\n    BATCH_SIZE = 2\n    \n    RPN_ANCHOR_SCALES = (16, 32, 64, 128, 256)\n    DETECTION_NMS_THRESHOLD = 0.7\n    \n    # STEPS_PER_EPOCH should be the number of instances \n    # divided by (GPU_COUNT*IMAGES_PER_GPU), and so should VALIDATION_STEPS;\n    # however, due to the time limit, I set them so that this kernel can be run in 9 hours\n    STEPS_PER_EPOCH = 1000\n    VALIDATION_STEPS = 200\n    \nconfig = FashionConfig()\nconfig.display()","40fb3257":"with open(DATA_DIR\/\"label_descriptions.json\") as f:\n    label_descriptions = json.load(f)\n\nlabel_names = [x['name'] for x in label_descriptions['categories']]","625ba452":"segment_df = pd.read_csv(DATA_DIR\/\"train.csv\")\n\nmultilabel_percent = len(segment_df[segment_df['ClassId'].str.contains('_')])\/len(segment_df)*100\nprint(f\"Segments that have attributes: {multilabel_percent:.2f}%\")","82f6bf67":"segment_df['CategoryId'] = segment_df['ClassId'].str.split('_').str[0]\n\nprint(\"Total segments: \", len(segment_df))\nsegment_df.head()","63d4621f":"image_df = segment_df.groupby('ImageId')['EncodedPixels', 'CategoryId'].agg(lambda x: list(x))\nsize_df = segment_df.groupby('ImageId')['Height', 'Width'].mean()\nimage_df = image_df.join(size_df, on='ImageId')\n\nprint(\"Total images: \", len(image_df))\nimage_df.head()","c7878bc2":"def resize_image(image_path):\n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    img = cv2.resize(img, (IMAGE_SIZE, IMAGE_SIZE), interpolation=cv2.INTER_AREA)  \n    return img","0aa7153b":"class FashionDataset(utils.Dataset):\n\n    def __init__(self, df):\n        super().__init__(self)\n        \n        # Add classes\n        for i, name in enumerate(label_names):\n            self.add_class(\"fashion\", i+1, name)\n        \n        # Add images \n        for i, row in df.iterrows():\n            self.add_image(\"fashion\", \n                           image_id=row.name, \n                           path=str(DATA_DIR\/'train'\/row.name), \n                           labels=row['CategoryId'],\n                           annotations=row['EncodedPixels'], \n                           height=row['Height'], width=row['Width'])\n\n    def image_reference(self, image_id):\n        info = self.image_info[image_id]\n        return info['path'], [label_names[int(x)] for x in info['labels']]\n    \n    def load_image(self, image_id):\n        return resize_image(self.image_info[image_id]['path'])\n\n    def load_mask(self, image_id):\n        info = self.image_info[image_id]\n                \n        mask = np.zeros((IMAGE_SIZE, IMAGE_SIZE, len(info['annotations'])), dtype=np.uint8)\n        labels = []\n        \n        for m, (annotation, label) in enumerate(zip(info['annotations'], info['labels'])):\n            sub_mask = np.full(info['height']*info['width'], 0, dtype=np.uint8)\n            annotation = [int(x) for x in annotation.split(' ')]\n            \n            for i, start_pixel in enumerate(annotation[::2]):\n                sub_mask[start_pixel: start_pixel+annotation[2*i+1]] = 1\n\n            sub_mask = sub_mask.reshape((info['height'], info['width']), order='F')\n            sub_mask = cv2.resize(sub_mask, (IMAGE_SIZE, IMAGE_SIZE), interpolation=cv2.INTER_NEAREST)\n            \n            mask[:, :, m] = sub_mask\n            labels.append(int(label)+1)\n            \n        return mask, np.array(labels)","e972defc":"dataset = FashionDataset(image_df)\ndataset.prepare()\n\nfor i in range(6):\n    image_id = random.choice(dataset.image_ids)\n    print(dataset.image_reference(image_id))\n    \n    image = dataset.load_image(image_id)\n    mask, class_ids = dataset.load_mask(image_id)\n    visualize.display_top_masks(image, mask, class_ids, dataset.class_names, limit=4)","039b868f":"# This code partially supports k-fold training, \n# you can specify the fold to train and the total number of folds here\nFOLD = 0\nN_FOLDS = 10\n\nkf = KFold(n_splits=N_FOLDS, random_state=42, shuffle=True)\nsplits = kf.split(image_df) # ideally, this should be multilabel stratification\n\ndef get_fold():    \n    for i, (train_index, valid_index) in enumerate(splits):\n        if i == FOLD:\n            return image_df.iloc[train_index], image_df.iloc[valid_index]\n        \ntrain_df, valid_df = get_fold()\n\ntrain_dataset = FashionDataset(train_df)\ntrain_dataset.prepare()\n\nvalid_dataset = FashionDataset(valid_df)\nvalid_dataset.prepare()","ddf9b9cc":"train_segments = np.concatenate(train_df['CategoryId'].values).astype(int)\nprint(\"Total train images: \", len(train_df))\nprint(\"Total train segments: \", len(train_segments))\n\nplt.figure(figsize=(12, 3))\nvalues, counts = np.unique(train_segments, return_counts=True)\nplt.bar(values, counts)\nplt.xticks(values, label_names, rotation='vertical')\nplt.show()\n\nvalid_segments = np.concatenate(valid_df['CategoryId'].values).astype(int)\nprint(\"Total train images: \", len(valid_df))\nprint(\"Total validation segments: \", len(valid_segments))\n\nplt.figure(figsize=(12, 3))\nvalues, counts = np.unique(valid_segments, return_counts=True)\nplt.bar(values, counts)\nplt.xticks(values, label_names, rotation='vertical')\nplt.show()","04b2a827":"# Note that any hyperparameters here, such as LR, may still not be optimal\nLR = 0.00001\nEPOCHS = [5, 12, 16]\n\nimport warnings \nwarnings.filterwarnings(\"ignore\")","70478877":"model = modellib.MaskRCNN(mode='training', config=config, model_dir=ROOT_DIR)\n\nmodel.load_weights(COCO_WEIGHTS_PATH, by_name=True, exclude=[\n    'mrcnn_class_logits', 'mrcnn_bbox_fc', 'mrcnn_bbox', 'mrcnn_mask'])","f7cb59de":"augmentation = iaa.Sometimes(5\/6, iaa.OneOf([\n                                 iaa.Fliplr(0.5), # horizontal flips\n                                 iaa.Flipud(0.5), # vertical flips\n                                 iaa.Crop(percent=(0, 0.1)), # random crops\n                                 \n                                 # Small gaussian blur with random sigma between 0 and 0.5.\n                                 # But we only blur about 50% of all images.\n                                 iaa.Sometimes(0.5, iaa.GaussianBlur(sigma=(0, 0.5))),\n                                 \n                                 # Strengthen or weaken the contrast in each image.\n                                 iaa.ContrastNormalization((0.75, 1.5)),\n                                 \n                                 # Add gaussian noise.\n                                 # For 50% of all images, we sample the noise once per pixel.\n                                 # For the other 50% of all images, we sample the noise per pixel AND\n                                 # channel. This can change the color (not only brightness) of the\n                                 # pixels.\n                                 iaa.AdditiveGaussianNoise(loc=0, scale=(0.0, 0.05*255), per_channel=0.5),\n                                 \n                                 # Make some images brighter and some darker.\n                                 # In 20% of all cases, we sample the multiplier once per channel,\n                                 # which can end up changing the color of the images.\n                                 iaa.Multiply((0.8, 1.2), per_channel=0.2),\n                                 \n                                 # Apply affine transformations to each image.\n                                 # Scale\/zoom them, translate\/move them, rotate them and shear them.\n                                 \n                                 iaa.Affine(scale=(0.5, 1.5)),\n                                 iaa.Affine(rotate=(-45, 45)),\n                                 iaa.Affine(translate_percent={\"x\": (-0.2, 0.2), \"y\": (-0.2, 0.2)}),\n                                 iaa.Affine(shear=(-8, 8)),\n                                 ]))\n","cee0d40b":"%%time\nmodel.train(train_dataset, valid_dataset,\n            learning_rate=LR*2, # train heads with higher lr to speedup learning\n            epochs=EPOCHS[0],\n            layers='heads',\n            augmentation=None)\n\nhistory = model.keras_model.history.history","c4cad082":"%%time\nmodel.train(train_dataset, valid_dataset,\n            learning_rate=LR,\n            epochs=EPOCHS[1],\n            layers='all',\n            augmentation=augmentation)\n\nnew_history = model.keras_model.history.history\nfor k in new_history: history[k] = history[k] + new_history[k]","727ae490":"%%time\nmodel.train(train_dataset, valid_dataset,\n            learning_rate=LR\/5,\n            epochs=EPOCHS[2],\n            layers='all',\n            augmentation=augmentation)\n\nnew_history = model.keras_model.history.history\nfor k in new_history: history[k] = history[k] + new_history[k]","ae92cb68":"epochs = range(EPOCHS[-1])\n\nplt.figure(figsize=(18, 6))\n\nplt.subplot(131)\nplt.plot(epochs, history['loss'], label=\"train loss\")\nplt.plot(epochs, history['val_loss'], label=\"valid loss\")\nplt.legend()\nplt.subplot(132)\nplt.plot(epochs, history['mrcnn_class_loss'], label=\"train class loss\")\nplt.plot(epochs, history['val_mrcnn_class_loss'], label=\"valid class loss\")\nplt.legend()\nplt.subplot(133)\nplt.plot(epochs, history['mrcnn_mask_loss'], label=\"train mask loss\")\nplt.plot(epochs, history['val_mrcnn_mask_loss'], label=\"valid mask loss\")\nplt.legend()\n\nplt.show()","29942c7a":"best_epoch = np.argmin(history[\"val_loss\"]) + 1\nprint(\"Best epoch: \", best_epoch)\nprint(\"Valid loss: \", history[\"val_loss\"][best_epoch-1])","2e2711fb":"glob_list = glob.glob(f'\/kaggle\/working\/fashion*\/mask_rcnn_fashion_{best_epoch:04d}.h5')\nmodel_path = glob_list[0] if glob_list else ''","c7271822":"class InferenceConfig(FashionConfig):\n    GPU_COUNT = 1\n    IMAGES_PER_GPU = 2\n    DETECTION_MIN_CONFIDENCE = 0.7\n\ninference_config = InferenceConfig()\n\nmodel = modellib.MaskRCNN(mode='inference', \n                          config=inference_config,\n                          model_dir=ROOT_DIR)\n\nassert model_path != '', \"Provide path to trained weights\"\nprint(\"Loading weights from \", model_path)\nmodel.load_weights(model_path, by_name=True)","66a028b4":"sample_df = pd.read_csv(DATA_DIR\/\"sample_submission.csv\")\nsample_df.head()","4d2c5e02":"# Convert data to run-length encoding\ndef to_rle(bits):\n    rle = []\n    pos = 0\n    for bit, group in itertools.groupby(bits):\n        group_list = list(group)\n        if bit:\n            rle.extend([pos, sum(group_list)])\n        pos += len(group_list)\n    return rle","640afe83":"# Since the submission system does not permit overlapped masks, we have to fix them\ndef refine_masks(masks, rois):\n    areas = np.sum(masks.reshape(-1, masks.shape[-1]), axis=0)\n    mask_index = np.argsort(areas)\n    union_mask = np.zeros(masks.shape[:-1], dtype=bool)\n    for m in mask_index:\n        masks[:, :, m] = np.logical_and(masks[:, :, m], np.logical_not(union_mask))\n        union_mask = np.logical_or(masks[:, :, m], union_mask)\n    for m in range(masks.shape[-1]):\n        mask_pos = np.where(masks[:, :, m]==True)\n        if np.any(mask_pos):\n            y1, x1 = np.min(mask_pos, axis=1)\n            y2, x2 = np.max(mask_pos, axis=1)\n            rois[m, :] = [y1, x1, y2, x2]\n    return masks, rois","5204ee5a":"for i in range(9):\n    image_id = sample_df.sample()['ImageId'].values[0]\n    image_path = str(DATA_DIR\/'test'\/image_id)\n    \n    img = cv2.imread(image_path)\n    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n    \n    result = model.detect([resize_image(image_path)])\n    r = result[0]\n    \n    if r['masks'].size > 0:\n        masks = np.zeros((img.shape[0], img.shape[1], r['masks'].shape[-1]), dtype=np.uint8)\n        for m in range(r['masks'].shape[-1]):\n            masks[:, :, m] = cv2.resize(r['masks'][:, :, m].astype('uint8'), \n                                        (img.shape[1], img.shape[0]), interpolation=cv2.INTER_NEAREST)\n        \n        y_scale = img.shape[0]\/IMAGE_SIZE\n        x_scale = img.shape[1]\/IMAGE_SIZE\n        rois = (r['rois'] * [y_scale, x_scale, y_scale, x_scale]).astype(int)\n        \n        masks, rois = refine_masks(masks, rois)\n    else:\n        masks, rois = r['masks'], r['rois']\n        \n    visualize.display_instances(img, rois, masks, r['class_ids'], \n                                ['bg']+label_names, r['scores'],\n                                title=image_id, figsize=(12, 12))","68a9ef31":"Here is the main prediction steps, along with some helper functions.","47e4b101":"Now, the data are partitioned into train and validation sets.","9c0e4bf0":"# Set Config","04aa9e1e":"My code is largely based on [this Mask-RCNN kernel](https:\/\/www.kaggle.com\/hmendonca\/mask-rcnn-and-coco-transfer-learning-lb-0-155) and borrowed some ideas from [the U-Net Baseline kernel](https:\/\/www.kaggle.com\/go1dfish\/u-net-baseline-by-pytorch-in-fgvc6-resize). So, I would like to thank the kernel authors for sharing insights and programming techniques. Importantly, an image segmentation task can be accomplished with short code and good accuracy thanks to [Matterport's implementation](https:\/\/github.com\/matterport\/Mask_RCNN) and a deep learning line of researches culminating in [Mask R-CNN](https:\/\/arxiv.org\/abs\/1703.06870).\n\nI am sorry that I published this kernel quite late, beyond the halfway of a timeline. I just started working for this competition about a week ago, and to my surprise, the score fell in the range of silver medals at that time. I have no dedicated GPU and no time to further tune the model, so I decided to make this kernel public as a starter guide for anyone who is interested to join this delightful competition.\n\n<img src='https:\/\/i.imgur.com\/j6LPLQc.png'>","0953e7f8":"Finally, it's pleasing to visualize the results! Sample images contain both fashion models and predictions from the Mask R-CNN model.","5452ea52":"The crucial part is to create a dataset for this task.","53bdfe6f":"Hope you guys like this kernel. If there are any bugs, please let me know.\n\nP.S. When clicking 'Submit to Competition' button, I always run into 404 erros, so I have to save a submission file and upload it to the submission page for submitting. The public LB score of this kernel is around **0.07**.","43d005e2":"Let's visualize training history and choose the best epoch.","366ae28e":"Mask R-CNN has a load of hyperparameters. I only adjust some of them.","42f005ce":"# Dowload Libraries and Pretrained Weights","3e25a850":"Then, load the submission data.","69c097db":"The final step is to use our model to predict test data.","7699abf3":"The submission file is created, when all predictions are ready.","0a1d3b48":"# Make Datasets","98c330f2":"# Predict","0b14ba4d":"Afterwards, we reduce LR and train again.","62e7ef8b":"First, we train only the heads.","afd44f5e":"Rows with the same image are grouped together because the subsequent operations perform in an image level.","9ed36c0e":"# Train","9131bcf4":"Let's visualize class distributions of the train and validation data.","537e4085":"Then, all layers are trained.","17423cde":"This cell defines InferenceConfig and loads the best trained model.","fb4e5f7c":"Welcome to the world where fashion meets computer vision! This is a starter kernel that applies Mask R-CNN with COCO pretrained weights to the task of [iMaterialist (Fashion) 2019 at FGVC6](https:\/\/www.kaggle.com\/c\/imaterialist-fashion-2019-FGVC6).","1316a128":"Here is the custom function that resizes an image.","19d7f84e":"This section creates a Mask R-CNN model and specifies augmentations to be used.","30b38425":"Let's visualize some random images and their masks.","5ab7ace6":"Segments that contain attributes are only 3.46% of data, and [according to the host](https:\/\/www.kaggle.com\/c\/imaterialist-fashion-2019-FGVC6\/discussion\/90643#523135), 80% of images have no attribute. So, in the first step, we can only deal with categories to reduce the complexity of the task."}}