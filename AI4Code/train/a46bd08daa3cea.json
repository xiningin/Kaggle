{"cell_type":{"f8a1e29e":"code","f05a49de":"code","ebb1846d":"code","098f53ab":"code","58709050":"code","83f0eefd":"code","6e795a48":"code","40bd0f85":"code","5d0b33f0":"code","03c4b705":"code","883bf065":"code","0ec3a983":"code","31b881b8":"code","57dce7e2":"code","349e4f77":"code","544dccfc":"code","feb77218":"code","5334d004":"code","4a2b3565":"code","41fceb2e":"code","27cff032":"code","14b7bed0":"code","53a5a72b":"code","75a10f95":"code","4a739fd3":"code","b90d9cd5":"code","8a4f5e38":"code","ecc949eb":"code","c0dc96dc":"code","b954471a":"code","19c7bdd0":"code","e48daf1c":"code","243fe809":"code","7b3aea0d":"code","44a6a3d5":"code","91472fef":"code","86bada3f":"code","494490ca":"code","d8b0a76d":"code","8411c8aa":"code","d09d12d4":"code","037f50e7":"code","7fd2f992":"code","eec37656":"code","763ea6f4":"code","1b421c9c":"code","fce9c38f":"markdown","20b6da69":"markdown","202c3354":"markdown","03f8e010":"markdown","a5dd7d36":"markdown","1e337f65":"markdown","304b3c80":"markdown","9a251f1c":"markdown","29dda815":"markdown"},"source":{"f8a1e29e":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","f05a49de":"import warnings\nwarnings.filterwarnings(\"ignore\")","ebb1846d":"import matplotlib.pyplot as plt\nimport seaborn as sns","098f53ab":"train_data = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/train.csv')","58709050":"train_data","83f0eefd":"sample_data = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/sample_submission.csv')","6e795a48":"sample_data","40bd0f85":"test_data = pd.read_csv('\/kaggle\/input\/ventilator-pressure-prediction\/test.csv')","5d0b33f0":"test_data","03c4b705":"train_data.describe()   #Details of the train_data set","883bf065":"print(np.median(train_data['id']))","0ec3a983":"print(np.median(train_data['breath_id']))","31b881b8":"print(np.median(train_data['R']))","57dce7e2":"print(np.median(train_data['C']))","349e4f77":"print(np.median(train_data['time_step']))","544dccfc":"print(np.median(train_data['u_in']))","feb77218":"print(np.median(train_data['u_out']))","5334d004":"print(np.median(train_data['pressure']))","4a2b3565":"print(train_data['id'].unique())","41fceb2e":"print(train_data['breath_id'].unique())","27cff032":"print(train_data['R'].unique())","14b7bed0":"print(train_data['C'].unique())","53a5a72b":"print(train_data['time_step'].unique())","75a10f95":"print(train_data['u_in'].unique())","4a739fd3":"print(train_data['u_out'].unique())","b90d9cd5":"print(train_data['pressure'].unique())","8a4f5e38":"train_data['id'].value_counts()","ecc949eb":"train_data['breath_id'].value_counts()","c0dc96dc":"train_data['R'].value_counts()","b954471a":"train_data['C'].value_counts()","19c7bdd0":"train_data['u_in'].value_counts()","e48daf1c":"train_data['u_out'].value_counts()","243fe809":"train_data['pressure'].value_counts()","7b3aea0d":"train_data['R'].value_counts().plot(kind='bar')\nplt.xlabel('R')\n\nplt.show()","44a6a3d5":"train_data['C'].value_counts().plot(kind='bar')\nplt.xlabel('C')\nplt.show()","91472fef":"test_data.plot(kind='scatter', x='R', y='breath_id')  #plotting a scatter plot\nplt.legend()\nplt.xlabel('R')\nplt.ylabel('breath id')\nplt.show()","86bada3f":"test_data.plot(kind='scatter', x='R', y ='C')\nplt.xlabel('R')\nplt.ylabel('C')\nplt.show()","494490ca":"test_data.plot(kind='scatter', x='breath_id', y='u_in')\nplt.xlabel('u_in')\nplt.ylabel('breath id')\nplt.show()","d8b0a76d":"test_data.plot(kind='scatter', x='id', y='u_in')\nplt.xlabel('id')\nplt.ylabel('u_in')\nplt.show()","8411c8aa":"test_data.plot(kind='scatter', x='R', y='u_in')\nplt.xlabel('R')\nplt.ylabel('breath id')\nplt.show()","d09d12d4":"test_data.plot(kind='scatter', x='C', y='u_in')\nplt.xlabel('R')\nplt.ylabel('breath id')\nplt.show()","037f50e7":"test_data.plot(kind='scatter', x='u_in', y='u_out')\nplt.xlabel('R')\nplt.ylabel('breath id')\nplt.show()","7fd2f992":"test_data.plot(kind='scatter', x='R', y='u_out')\nplt.xlabel('R')\nplt.ylabel('breath id')\nplt.show()","eec37656":"test_data.plot(kind='scatter', x='C', y='u_in')\nplt.xlabel('R')\nplt.ylabel('breath id')\nplt.show()","763ea6f4":"test_data.plot(kind='scatter', x='R', y='time_step')\nplt.xlabel('R')\nplt.ylabel('breath id')\nplt.show()","1b421c9c":"test_data.plot(kind='scatter', x='R', y='time_step')\nplt.xlabel('R')\nplt.ylabel('breath id')\nplt.show()","fce9c38f":"***sample_data***:  a sample submission file in the correct format","20b6da69":"***test_data*** :: the test set","202c3354":"***Unique*** from each features ::","03f8e010":"****id**** - globally-unique time step identifier across an entire file.\n\n\n****breath_id**** - globally-unique time step for breaths.\n\n\n****R**** - lung attribute indicating how restricted the airway is (in cmH2O\/L\/S). Physically, this is the change in pressure per change in flow (air volume per time). Intuitively, one can imagine blowing up a balloon through a straw. We can change R by changing the diameter of the straw, with higher R being harder to blow.\n\n\n****C**** - lung attribute indicating how compliant the lung is (in mL\/cmH2O). Physically, this is the change in volume per change in pressure. Intuitively, one can imagine the same balloon example. We can change C by changing the thickness of the balloon\u2019s latex, with higher C having thinner latex and easier to blow.\n\n\n****time_step**** - the actual time stamp.\n\n\n***u_in*** - the control input for the inspiratory solenoid valve. Ranges from 0 to 100.\n\n\n***u_out*** - the control input for the exploratory solenoid valve. Either 0 or 1.\n\n\n***pressure*** - the airway pressure measured in the respiratory circuit, measured in cmH2O.","a5dd7d36":"***Medians*** of all the features ::","1e337f65":"****Objective : To simulate a ventilator connected to a sedated patient's lung.****","304b3c80":"***Plotting*** ::","9a251f1c":"****train_data**** :: the training set","29dda815":"Getting ***Datapoints*** in every class ::"}}