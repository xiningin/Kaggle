{"cell_type":{"4e30ee1a":"code","2a20adaa":"code","a05f6654":"code","44d9c78c":"code","75dea3dc":"code","5292dc8c":"code","a0b1825c":"code","4c82b1bf":"code","903ed548":"code","be368ace":"code","cab9598c":"code","72921347":"code","4342a4a1":"code","b274729a":"code","418af077":"code","3c84d0e5":"code","dcf36e24":"code","a874fbd5":"code","8fa4d13a":"code","0e7d5d6e":"code","a1a40877":"code","22c25249":"code","be4b1ce2":"code","03756ba8":"code","c7c2c11e":"code","2caff5cd":"code","b1382467":"markdown","78a9e030":"markdown","8396daa5":"markdown","d31d2235":"markdown","1b8b7b67":"markdown"},"source":{"4e30ee1a":"#Imports\nimport pandas as pd\nimport numpy as np","2a20adaa":"#Load dataset\n# url = \"https:\/\/archive.ics.uci.edu\/ml\/machine-learning-databases\/mushroom\/agaricus-lepiota.data\"\ncolumn_names = ['class','cap-shape', 'cap-surface', 'cap-color', 'bruises?', 'odor', 'gill-attachment','gill-spacing','gill-size', 'gill-color', 'stalk-shape', 'stalk-root', 'stalk-surface-above-ring', 'stalk-surface-below-ring', 'stalk-color-above-ring', 'stalk-color-below-ring','veil-type','veil-color','ring-number','ring-type','spore-print-color','population','habitat' ]\ndf = pd.read_csv('..\/input\/mushroom-uci-dataset\/agaricus-lepiota.data',names=column_names)\n# df = pd.read_csv(url)\ndf.shape\ndf.head()","a05f6654":"#Checking For Nulls\ndf.isnull().sum()","44d9c78c":"#Checking type of the attributes\ndf.info()","75dea3dc":"#Describtion to get an overall idea about Dataset\ndf.describe()","5292dc8c":"#Splitting Predictors and Responses\nX=df.drop('class',axis=1) #Predictors\ny=df['class'] #Response\nX.head()","a0b1825c":"#Encoding values before modeling as our dataset has all the categorical values\nfrom sklearn.preprocessing import LabelEncoder\nEncoder_X = LabelEncoder() \nfor col in X.columns:\n    X[col] = Encoder_X.fit_transform(X[col])\nEncoder_y=LabelEncoder()\ny = Encoder_y.fit_transform(y)","4c82b1bf":"#Checking as Predictors are converted or not?\nX.head()","903ed548":"#Checking as Responses are converted or not?\ny #Poisonous=1 & Edible=0","be368ace":"#Splitting training and Test data\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)","cab9598c":"#Imports for model\nfrom sklearn.naive_bayes import GaussianNB\n\n#Fitting model with Dataset\nnb = GaussianNB()\nnb.fit(X_train, y_train)","72921347":"#Predictinf values\ny_pred = nb.predict(X_test)","4342a4a1":"#Importing sklearn packages to get figures\nfrom sklearn.metrics import classification_report \nfrom sklearn.metrics import accuracy_score\n\nprint(accuracy_score(y_test, y_pred))\nprint(classification_report(y_test, y_pred))","b274729a":"#Confusion matrix to get wrong and right prediction idea\nfrom sklearn.metrics import confusion_matrix\nconfusion_matrix(y_test, y_pred)","418af077":"#Using same dataset; implementing K-Mean with different number of clusters\n#Optimizing 2D values, encoding categorical data\ndef Encoder(val):\n    if val in category:\n        return category[val]\n    else:\n        category[val]=len(category)\n    return category[val]","3c84d0e5":"for i in range(df.shape[1]):\n    category={}\n    df.iloc[:,i]=df.iloc[:,i].apply(Encoder)","dcf36e24":"df.head()","a874fbd5":"#Setting X values -> Predictors\nX=df.drop('class',axis=1)","8fa4d13a":"#Converting all the features and extracting just 2 principle components for scatter plot analysis\nfrom sklearn.decomposition import PCA\n\npca = PCA(n_components=2).fit(X)\npca_2d = pca.transform(X)\n","0e7d5d6e":"from sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=2, init= 'k-means++')","a1a40877":"#Fitting and predicting using number of cluster=2\nkmeans.fit(X)\nYpreds=kmeans.predict(X)","22c25249":"import matplotlib.pyplot as plt\n%matplotlib inline\n\nplt.figure(figsize=(25,10))\nplt.subplot(2, 3, 1)\nplt.scatter(pca_2d[Ypreds == 0, 0], pca_2d[Ypreds == 0, 1], s = 100, c = 'blue', label = 'edible')\nplt.scatter(pca_2d[Ypreds == 1, 0], pca_2d[Ypreds == 1, 1], s = 100, c = 'red', label = 'poisonous')\nplt.legend()\n# plt.show()\n\nplt.subplot(2, 3, 2)\nplt.scatter(pca_2d[:,0],pca_2d[:,1], c=kmeans.labels_, cmap='rainbow')\nplt.scatter(kmeans.cluster_centers_[:,0] ,kmeans.cluster_centers_[:,1], color='black')\n# plt.tight_layout()\nplt.show()\nprint('Accuracy:',accuracy_score(y, Ypreds))","be4b1ce2":"#Model using Number Of Clusters=3\nkmeans = KMeans(n_clusters=3, init= 'k-means++')\nkmeans.fit(X)\nYpreds=kmeans.predict(X)\n\nplt.figure(figsize=(25,10))\nplt.subplot(2, 3, 1)\nplt.scatter(pca_2d[Ypreds == 0, 0], pca_2d[Ypreds == 0, 1], s = 100, c = 'blue', label = 'edible')\nplt.scatter(pca_2d[Ypreds == 1, 0], pca_2d[Ypreds == 1, 1], s = 100, c = 'red', label = 'poisonous')\nplt.legend()\n# plt.show()\n\nplt.subplot(2, 3, 2)\nplt.scatter(pca_2d[:,0],pca_2d[:,1], c=kmeans.labels_, cmap='rainbow')\nplt.scatter(kmeans.cluster_centers_[:,0] ,kmeans.cluster_centers_[:,1], color='black')\n# plt.tight_layout()\nplt.show()\nprint('Accuracy:',accuracy_score(y, Ypreds))","03756ba8":"#Model using Number Of Clusters=4\nkmeans = KMeans(n_clusters=4, init= 'k-means++')\nkmeans.fit(X)\nYpreds=kmeans.predict(X)\n\nplt.figure(figsize=(25,10))\nplt.subplot(2, 3, 1)\nplt.scatter(pca_2d[Ypreds == 0, 0], pca_2d[Ypreds == 0, 1], s = 100, c = 'blue', label = 'edible')\nplt.scatter(pca_2d[Ypreds == 1, 0], pca_2d[Ypreds == 1, 1], s = 100, c = 'red', label = 'poisonous')\nplt.legend()\n# plt.show()\n\nplt.subplot(2, 3, 2)\nplt.scatter(pca_2d[:,0],pca_2d[:,1], c=kmeans.labels_, cmap='rainbow')\nplt.scatter(kmeans.cluster_centers_[:,0] ,kmeans.cluster_centers_[:,1], color='black')\n# plt.tight_layout()\nplt.show()\nprint('Accuracy:',accuracy_score(y, Ypreds))","c7c2c11e":"#Model using Number Of Clusters=5\nkmeans = KMeans(n_clusters=5, init= 'k-means++')\nkmeans.fit(X)\nYpreds=kmeans.predict(X)\n\n\nplt.figure(figsize=(25,10))\nplt.subplot(2, 3, 1)\nplt.scatter(pca_2d[Ypreds == 0, 0], pca_2d[Ypreds == 0, 1], s = 100, c = 'blue', label = 'edible')\nplt.scatter(pca_2d[Ypreds == 1, 0], pca_2d[Ypreds == 1, 1], s = 100, c = 'red', label = 'poisonous')\nplt.legend()\n# plt.show()\n\nplt.subplot(2, 3, 2)\nplt.scatter(pca_2d[:,0],pca_2d[:,1], c=kmeans.labels_, cmap='rainbow')\nplt.scatter(kmeans.cluster_centers_[:,0] ,kmeans.cluster_centers_[:,1], color='black')\n# plt.tight_layout()\nplt.show()\nprint('Accuracy:',accuracy_score(y, Ypreds))","2caff5cd":"#Elbow method is used to identify number of clusters\ninertia = []\nfor k in range(1, 8):\n    kmeans = KMeans(n_clusters=k, random_state=1).fit(X)\n    inertia.append(np.sqrt(kmeans.inertia_))\n\nplt.plot(range(1, 8), inertia, marker='s');\nplt.xlabel('$Number-Of-Clusters$')\nplt.ylabel('$J(C_k)$');","b1382467":"In order to avoid that case, we should choose a number of clusters after which a function  J(Ck)  is decreasing less rapidly.\nHere, The optimum number of clusters are 2.","78a9e030":"Supervised learning Model for Mushroom \nLables:\n1] Poisonous\n2] Edible=0\n\nAttribute Information:\n\n1. cap-shape: bell=b,conical=c,convex=x,flat=f, knobbed=k,sunken=s\n2. cap-surface: fibrous=f,grooves=g,scaly=y,smooth=s\n3. cap-color: brown=n,buff=b,cinnamon=c,gray=g,green=r, pink=p,purple=u,red=e,white=w,yellow=y\n4. bruises?: bruises=t,no=f\n5. odor: almond=a,anise=l,creosote=c,fishy=y,foul=f, musty=m,none=n,pungent=p,spicy=s\n6. gill-attachment: attached=a,descending=d,free=f,notched=n\n7. gill-spacing: close=c,crowded=w,distant=d\n8. gill-size: broad=b,narrow=n\n9. gill-color: black=k,brown=n,buff=b,chocolate=h,gray=g, green=r,orange=o,pink=p,purple=u,red=e, white=w,yellow=y\n10. stalk-shape: enlarging=e,tapering=t\n11. stalk-root: bulbous=b,club=c,cup=u,equal=e, rhizomorphs=z,rooted=r,missing=?\n12. stalk-surface-above-ring: fibrous=f,scaly=y,silky=k,smooth=s\n13. stalk-surface-below-ring: fibrous=f,scaly=y,silky=k,smooth=s\n14. stalk-color-above-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n15. stalk-color-below-ring: brown=n,buff=b,cinnamon=c,gray=g,orange=o, pink=p,red=e,white=w,yellow=y\n16. veil-type: partial=p,universal=u\n17. veil-color: brown=n,orange=o,white=w,yellow=y\n18. ring-number: none=n,one=o,two=t\n19. ring-type: cobwebby=c,evanescent=e,flaring=f,large=l, none=n,pendant=p,sheathing=s,zone=z\n20. spore-print-color: black=k,brown=n,buff=b,chocolate=h,green=r, orange=o,purple=u,white=w,yellow=y\n21. population: abundant=a,clustered=c,numerous=n, scattered=s,several=v,solitary=y\n22. habitat: grasses=g,leaves=l,meadows=m,paths=p, urban=u,waste=w,woods=d\n","8396daa5":"### [1] Supervised learning ","d31d2235":"### [2] Unsupervised learning","1b8b7b67":"Here, as per confusion matrix we can say that,\nFor 1172 Edible predictions by model are right and 85 wrong\nFor 1094 Poisonous predictions by model are right and 87 wrong."}}