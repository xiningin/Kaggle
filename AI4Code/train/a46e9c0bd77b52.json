{"cell_type":{"bcc690f3":"code","63f36611":"code","0c4e26b1":"code","0cc73fbd":"code","7c766e00":"code","33c6304c":"code","773d1caa":"code","9cc2e08d":"code","28170ef6":"code","c51b5dcc":"code","acc920df":"code","acf42974":"code","7ca6d462":"code","ccc69552":"code","5b188d46":"code","34ce3a23":"code","f7ac54c6":"code","ffaf2684":"code","bc7a2723":"code","8ecba2c0":"code","8835f783":"code","01d49fd1":"code","f9d84d37":"code","5663afdf":"code","7ff003b9":"code","1e6187cf":"code","5139530a":"code","3ff90b1e":"code","f6719ff9":"code","c1b21c60":"code","a6edfde9":"code","c9081e35":"code","269f765c":"code","01fe7ac6":"code","0fafe726":"code","b3bdf969":"code","feff6d3b":"markdown","c44eb2ae":"markdown","7cade34f":"markdown","1a3182da":"markdown","2a95da0c":"markdown","ae3fd2d0":"markdown","9ab6f9a5":"markdown","12adb74d":"markdown","1939fc95":"markdown","aef85e5b":"markdown","44d5d580":"markdown"},"source":{"bcc690f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport sklearn\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_log_error, mean_absolute_error, r2_score\nfrom sklearn.model_selection import RandomizedSearchCV\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","63f36611":"# Import training and validation sets\ndf = pd.read_csv(\"..\/input\/blue-book-for-bulldozer\/Train\/Train.csv\", low_memory=False, parse_dates=[\"saledate\"])","0c4e26b1":"df.info()","0cc73fbd":"df.isna().sum()","7c766e00":"fig, ax = plt.subplots()\nax.scatter(df[\"saledate\"][:1000], df[\"SalePrice\"][:1000])","33c6304c":"# Sort DataFrame in date order\ndf.sort_values(by=[\"saledate\"],inplace=True, ascending=True)\ndf.saledate.head(20)","773d1caa":"# Make a copy so we can return to it if something goes wrong\ndf_tmp = df.copy()","9cc2e08d":"# Add datetime parameters for `saledate` column\ndf_tmp[\"saleYear\"] = df_tmp.saledate.dt.year\ndf_tmp[\"saleMonth\"] = df_tmp.saledate.dt.month\ndf_tmp[\"saleDay\"] = df_tmp.saledate.dt.day\ndf_tmp[\"saleDayOfWeek\"] = df_tmp.saledate.dt.dayofweek\ndf_tmp[\"saleDayOfYear\"] = df_tmp.saledate.dt.dayofyear","28170ef6":"# Now we've enriched our DataFrame with date time features, we can remove saledate\ndf_tmp.drop(\"saledate\", axis=1, inplace=True)","c51b5dcc":"df_tmp.head(20).T","acc920df":"# This will turn all of the string value into category values\nfor label, content in df_tmp.items():\n    if pd.api.types.is_string_dtype(content):\n        df_tmp[label] = content.astype(\"category\").cat.as_ordered()","acf42974":"# Check missing data\ndf_tmp.isnull().sum()\/len(df_tmp)","7ca6d462":"# Fill numeric rows with the median\nfor label, content in df_tmp.items():\n    if pd.api.types.is_numeric_dtype(content):\n        if pd.isnull(content).sum(): \n            # Add a binary column which tells us if the data was missing\n            df_tmp[label+\"_is_missing\"] = pd.isnull(content)\n            # Fill missing numeric values with median\n            df_tmp[label] = content.fillna(content.median())","ccc69552":"# Turn categorical vvariables into numbers and fill missing\nfor label, content in df_tmp.items():\n    if not pd.api.types.is_numeric_dtype(content):\n        # Add binary column to indicate whether sample have missing data\n        df_tmp[label+\"_is_missing\"] = pd.isnull(content)\n        # Turn categories into numbers and add+1\n        df_tmp[label] = pd.Categorical(content).codes+1","5b188d46":"df_tmp.isna().sum()","34ce3a23":"# split data into training and validation sets\ndf_val = df_tmp[df_tmp.saleYear==2011]\ndf_train = df_tmp[df_tmp.saleYear !=2011]\n\nlen(df_val),len(df_train)","f7ac54c6":"# Split data into X & y\nX_train, y_train = df_train.drop(\"SalePrice\",axis=1),df_train.SalePrice\nX_valid, y_valid = df_val.drop(\"SalePrice\",axis=1),df_val.SalePrice\n\nX_train.shape, y_train.shape, X_valid.shape, y_valid.shape","ffaf2684":"def rmsle(y_test,y_preds):\n    \"\"\"\n    Calculates root mean squared log error between predictions and true labels.\n    \"\"\"\n    return np.sqrt(mean_squared_log_error(y_test,y_preds))\n\n# Create function to evaluate model on a few different levels\ndef show_scores(model):\n    train_preds = model.predict(X_train)\n    val_preds = model.predict(X_valid)\n    scores = {\"training MAE\": mean_absolute_error(y_train,train_preds),\n             \"Valid MAE\": mean_absolute_error(y_valid, val_preds),\n             \"Training RMSLE\": rmsle(y_train, train_preds),\n             \"Valid RMSLE\": rmsle(y_valid, val_preds),\n             \"Training R^2\": r2_score(y_train, train_preds),\n             \"Valid R^2\": r2_score(y_valid, val_preds)}\n    return scores","bc7a2723":"model = RandomForestRegressor(n_jobs=-1, max_samples = 10000)","8ecba2c0":"%%time\n#Cutting down on the max number of samples each estimator can see improve compute time\nmodel.fit(X_train,y_train)","8835f783":"show_scores(model)","01d49fd1":"%%time\n\n# Different RandomForestRegressor hyperparameters\nrf_grid= {\"n_estimators\": np.arange(10,100,10),\n         \"max_depth\": [None, 3,5,10],\n         \"min_samples_split\": np.arange(2,20,2),\n         \"min_samples_leaf\": np.arange(1,20,2),\n         \"max_features\": [0.5,1,\"sqrt\",\"auto\"],\n         \"max_samples\":[10000]}\n# Instantiate RandomizedSearchCV model\nrs_model = RandomizedSearchCV(RandomForestRegressor(n_jobs=-1, random_state=42),\n                                                    param_distributions=rf_grid,n_iter=2,cv=5,verbose=True)\n\n#Fit the randomized search cv model\nrs_model.fit(X_train,y_train)","f9d84d37":"rs_model.best_params_","5663afdf":"show_scores(rs_model)","7ff003b9":"%%time\n\n# Most ideal hyperparameters\nideal_model = RandomForestRegressor(**rs_model.best_params_)\n# Fit the idel model\nideal_model.fit(X_train, y_train)","1e6187cf":"show_scores(ideal_model)","5139530a":"df_test = pd.read_csv(\"..\/input\/blue-book-for-bulldozer\/Test.csv\", low_memory=False,parse_dates=[\"saledate\"])","3ff90b1e":"def preprocess_data(df):\n    \"\"\"\n    Performs transformations on df and retruned transformed df.\n    \"\"\"\n    df[\"saleYear\"] = df.saledate.dt.year\n    df[\"saleMonth\"] = df.saledate.dt.month\n    df[\"saleDay\"] = df.saledate.dt.day\n    df[\"saleDayOfWeek\"] = df.saledate.dt.dayofweek\n    df[\"saleDayOfYear\"] = df.saledate.dt.dayofyear\n    \n    df.drop(\"saledate\", axis=1, inplace=True)\n    \n    \n    # Fill numeric rows with the median\n    for label, content in df.items():\n        if pd.api.types.is_numeric_dtype(content):\n            if pd.isnull(content).sum(): \n                # Add a binary column which tells us if the data was missing\n                df[label+\"_is_missing\"] = pd.isnull(content)\n                # Fill missing numeric values with median\n                df[label] = content.fillna(content.median())\n    \n    \n\n    # Turn categorical vvariables into numbers and fill missing\n    for label, content in df.items():\n        if not pd.api.types.is_numeric_dtype(content):\n            # Add binary column to indicate whether sample have missing data\n            df[label+\"_is_missing\"] = pd.isnull(content)\n            # Turn categories into numbers and add+1\n            df[label] = pd.Categorical(content).codes+1\n    \n    return df","f6719ff9":"# Process test data\ndf_test = preprocess_data(df_test)\ndf_test.head()","c1b21c60":"df_test[\"auctioneerID_is_missing\"] = False","a6edfde9":"test_preds = ideal_model.predict(df_test)","c9081e35":"# Format preictions into the same format Kaggle is after\ndf_preds=pd.DataFrame()\ndf_preds[\"SalesID\"] = df_test[\"SalesID\"]\ndf_preds[\"SalesPrice\"] = test_preds\ndf_preds","269f765c":"# Find Feature importances of our best model\nlen(ideal_model.feature_importances_)","01fe7ac6":"# Helper function for plotting feature importance\ndef plot_features(columns, importances, n=20):\n    df = (pd.DataFrame({\"features\": columns,\n                       \"feature_importances\": importances})\n          .sort_values(\"feature_importances\",ascending = False)\n          .reset_index(drop=True))\n    fig, ax =plt.subplots()\n    ax.barh(df[\"features\"][:n], df[\"feature_importances\"][:20])\n    ax.set_ylabel(\"Features\")\n    ax.set_xlabel(\"Feature importance\")\n    ax.invert_yaxis()","0fafe726":"plot_features(X_train.columns, ideal_model.feature_importances_)","b3bdf969":"X_train.head()","feff6d3b":"Get some sales according to year","c44eb2ae":"## Make predictions on test data","7cade34f":"Data have lots of null values and objects. Need to change that.","1a3182da":"Need to preprocess data on test set","2a95da0c":"## 4. Data evaluation","ae3fd2d0":"## 5. Modelling","9ab6f9a5":"Now that all of data is numeric as well as our dataframe has no missing values, we should be able to build a machine learning model.","12adb74d":"## Train a model with the best hyperparameters","1939fc95":"## 1. Problem definition\n\n> How well can we precit the future sale price, giving it characteristics and previous examples of how much similiar bulldozers have benn sold for?\n\n## 2. Data\n\nThe data is downloaded from the Kaggle Bluebook for Bulldozers competition https:\/\/www.kaggle.com\/c\/bluebook-for-bulldozers\/overview\/evaluation:\n* Train.csv is the training set, which contains data through the end of 2011.\n* Valid.csv is the validation set, which contains data from January 1, 2012 - April 30, 2012 You make predictions on this set throughout the majority of the competition. Your score on this set is used to create the public leaderboard.\n* Test.csv is the test set, which won't be released until the last week of the competition. It contains data from May 1, 2012 - November 2012. Your score on the test set determines your final rank for the competition.\n\n## 3. Evaluation\nThe evaluation metric for this competition is the RMSLE (root mean squared log error) between the actual and predicted auction prices.","aef85e5b":"### Hyperparameters tuning with RandomizedSearchCV","44d5d580":"## Feature importance\n\nFeature importance seeks to figure out which different attributes where most important when it comes to predicting target variable (SalePrice)."}}