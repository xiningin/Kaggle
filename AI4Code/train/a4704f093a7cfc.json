{"cell_type":{"d1995f8e":"code","5c5f1d68":"code","8f8ac7c2":"code","0ec2a2aa":"code","b238075b":"code","7d54a998":"code","ad02a55a":"code","abf4b9ba":"code","c7d7a02d":"code","5828730c":"code","58a659a5":"code","6db42b70":"code","0b5a0555":"code","814722a8":"code","f96fbe8f":"code","5bacdbdc":"code","012deebc":"code","33fb9348":"code","d5f51b6e":"code","ca8c7f3b":"code","d3350b5c":"code","099504a6":"markdown","3242466a":"markdown","4d896038":"markdown","bdbe5f23":"markdown","a1397245":"markdown","fe344846":"markdown","bbd4b43c":"markdown","cef4a2ef":"markdown","d4047809":"markdown","17372139":"markdown","8dd7fce7":"markdown","9d77f769":"markdown","c03ddd72":"markdown","3b3641df":"markdown","c7c44310":"markdown","75bf692d":"markdown","9c93f7f6":"markdown","ee4987c7":"markdown","5e573001":"markdown","9c7a190b":"markdown","75e506f3":"markdown","66b96b05":"markdown","7eacce11":"markdown","ad566687":"markdown","8af7a740":"markdown","f7079869":"markdown","cc81caca":"markdown","f1ff7849":"markdown"},"source":{"d1995f8e":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom matplotlib.pyplot import rcParams\nimport math\nimport os\nimport tensorflow as tf\nfrom sklearn.preprocessing import StandardScaler\n","5c5f1d68":"# Loading\ntrain = pd.read_csv('..\/input\/bike-rental-prediction\/train.csv', sep=r'\\s*,\\s*', header=0, encoding='ascii', engine='python')\ntest = pd.read_csv('..\/input\/bike-rental-prediction\/test.csv', sep=r'\\s*,\\s*', header=0, encoding='ascii', engine='python')\ntrain_org = train.copy()\ntest_ids = test['instant']\n\n# Cleaning\ny_train = train.pop('cnt')\n\ndropCols = ['instant']\n\ntrain = train.drop(dropCols + ['casual', 'registered'], 1)\ntest = test.drop(dropCols, 1)\n","8f8ac7c2":"print(train.count())\nprint(test.count())\n\ntrain_org['cnt'].max()","0ec2a2aa":"plt.figure(figsize=(15, 10))\ncorr = train_org.corr()\nsns.heatmap(corr, annot=True)","b238075b":"distCols = ['atemp', 'hum', 'windspeed']\n\ncols = len(distCols)\n\nplt.figure(2, figsize=(30, 10))\nfor idx, col in enumerate(distCols):\n  plt.subplot(1, cols, idx+1)\n  sns.countplot(x=col, data=train_org)\n  plt.ylabel('{}'.format(col))\n","7d54a998":"train_org[(train_org['holiday'] == 1) & (train_org['workingday'] == 0)]","ad02a55a":"noiseTrain = train.copy()\nvariances = noiseTrain.var()\n\ncols = 4\nrows = math.ceil(len(noiseTrain.columns)\/4)\n\nplt.figure(1, figsize=(30, 30))\nfor idx, col in enumerate(noiseTrain.columns):\n  plt.subplot(rows, cols, idx+1)\n  plt.plot(noiseTrain[col], y_train, 'o')\n  plt.ylabel('Cnt')\n  plt.xlabel('{}. Variance: {}'.format(col,variances[col]))\n\nprint(variances)\n","abf4b9ba":"# Calc medians for each day\nmedians = train.groupby('dteday')['windspeed'].median()\n\n# Create dataFrame for medians\ncols = []\n\nfor day in train['dteday']:\n  cols.append([day, medians[day]])\n\nmedian_df = pd.DataFrame(cols, columns=['dteday', 'windspeed'])\n\n# Combine dataFrames\nfillZeros = lambda v1, v2: v2 if v1 == 0 else v1\n\ntrain['windspeed'] = train['windspeed'].combine(median_df['windspeed'], fillZeros)","c7d7a02d":"analysisColDrops = ['season', 'temp', 'dteday']\n\ntrain = train.drop(analysisColDrops, 1)\ntest = test.drop(analysisColDrops, 1)\n\ntrain.head()","5828730c":"train['mnth'] = train['mnth'] - 1\ntrain['mnth'].head()\n\ntest['mnth'] = test['mnth'] - 1\ntest['mnth'].head()","58a659a5":"# Cycling for train data\n\ntrain['hr_sin'] = np.sin(train.hr*(2.*np.pi\/24))\ntrain['hr_cos'] = np.cos(train.hr*(2.*np.pi\/24))\n\ntrain['mnth_sin'] = np.sin((train.mnth-1)*(2.*np.pi\/12))\ntrain['mnth_cos'] = np.cos((train.mnth-1)*(2.*np.pi\/12))\n\ntrain['weekday_sin'] = np.sin(train.weekday*(2.*np.pi\/7))\ntrain['weekday_cos'] = np.cos(train.weekday*(2.*np.pi\/7))","6db42b70":"# Cycling for test data\n\ntest['hr_sin'] = np.sin(test.hr*(2.*np.pi\/24))\ntest['hr_cos'] = np.cos(test.hr*(2.*np.pi\/24))\n\ntest['mnth_sin'] = np.sin((test.mnth-1)*(2.*np.pi\/12))\ntest['mnth_cos'] = np.cos((test.mnth-1)*(2.*np.pi\/12))\n\ntest['weekday_sin'] = np.sin(test.weekday*(2.*np.pi\/7))\ntest['weekday_cos'] = np.cos(test.weekday*(2.*np.pi\/7))","0b5a0555":"train = pd.get_dummies(train, columns=[\"weathersit\"], prefix=[\"weather\"])\ntest = pd.get_dummies(test, columns=[\"weathersit\"], prefix=[\"weather\"])","814722a8":"scaler = StandardScaler()\n\nvalueCols = ['atemp', 'hum', 'windspeed', 'hr_sin', 'hr_cos', 'mnth_sin', 'mnth_cos', 'weekday_sin', 'weekday_cos']\n\nfor col in valueCols:\n  train[col] = train[col].astype('float64')\n  train[col] = scaler.fit_transform(train[col].values.reshape(-1, 1))\n\nfor testCol in valueCols:\n  test[testCol] = test[testCol].astype('float64')\n  test[testCol] = scaler.fit_transform(test[testCol].values.reshape(-1, 1))\n\ntrain.head()","f96fbe8f":"mnth = tf.feature_column.categorical_column_with_identity(\"mnth\", 12)\nhr = tf.feature_column.categorical_column_with_identity(\"hr\", 24)\nholiday = tf.feature_column.categorical_column_with_identity(\"holiday\", 2)\nweekday = tf.feature_column.categorical_column_with_identity(\"weekday\", 7)\nworkingday = tf.feature_column.categorical_column_with_identity(\"workingday\", 2)\natemp = tf.feature_column.numeric_column(\"atemp\")\nhum = tf.feature_column.numeric_column(\"hum\")\nwindspeed = tf.feature_column.numeric_column(\"windspeed\")\nyear = tf.feature_column.categorical_column_with_vocabulary_list(\"year\", [2011, 2012])\nhr_sin = tf.feature_column.numeric_column(\"hr_sin\")\nhr_cos = tf.feature_column.numeric_column(\"hr_cos\")\nmnth_sin = tf.feature_column.numeric_column(\"mnth_sin\")\nmnth_cos = tf.feature_column.numeric_column(\"mnth_cos\")\nweekday_sin = tf.feature_column.numeric_column(\"weekday_sin\")\nweekday_cos = tf.feature_column.numeric_column(\"weekday_cos\")\nweather_1 = tf.feature_column.categorical_column_with_identity(\"weather_1\", 2)\nweather_2 = tf.feature_column.categorical_column_with_identity(\"weather_2\", 2)\nweather_3 = tf.feature_column.categorical_column_with_identity(\"weather_3\", 2)\nweather_4 = tf.feature_column.categorical_column_with_identity(\"weather_4\", 2)\n\nfeature_cols = [mnth, hr, holiday, weekday, workingday, atemp, hum, windspeed, year, hr_sin, hr_cos, mnth_sin, mnth_cos, weekday_sin, weekday_cos, weather_1, weather_2, weather_3, weather_4]\n\ninput_func = tf.compat.v1.estimator.inputs.pandas_input_fn(x=train, y=y_train, batch_size=100, num_epochs=None, shuffle=True)","5bacdbdc":"model = tf.estimator.LinearClassifier(feature_columns = feature_cols, n_classes=1000)","012deebc":"model = tf.estimator.LinearRegressor(feature_columns = feature_cols)","33fb9348":"model.train(input_fn=input_func, max_steps=10000)","d5f51b6e":"pred_func = tf.compat.v1.estimator.inputs.pandas_input_fn(x=test, y=None, batch_size=len(test), shuffle=False)\n\npredictions = list(model.predict(input_fn=pred_func))\npreds = []\nfor entry in predictions:\n  preds.append(entry['class_ids'][0])","ca8c7f3b":"pred_func = tf.compat.v1.estimator.inputs.pandas_input_fn(x=test, y=None, batch_size=len(test), shuffle=False)\n\npredictions = list(model.predict(input_fn=pred_func))\npreds = []\nfor entry in predictions:\n  preds.append(entry['predictions'][0] if entry['predictions'][0] else 0)\n\npreds","d3350b5c":"#from google.colab import files\n\ndata = [test_ids, pd.Series(preds, dtype=object)]\nheaders = [\"instant\", \"cnt\"]\nresultsDf = pd.concat(data, axis=1, keys=headers)\n\nresultsDf.to_csv('results.csv', index=False)\n#files.download('results.csv')","099504a6":"# Data normalization","3242466a":"## Missing windspeed filling","4d896038":"## Month 1-12 -> 0-11","bdbe5f23":"### Classifier","a1397245":"### Preds Classifier","fe344846":"## One-hot encoding for weathersit\n\n","bbd4b43c":"## Dropping cols","cef4a2ef":"## Hour, month cycling","d4047809":"## Corellation matrix","17372139":"# Libs import","8dd7fce7":"## Null data - check for empty cols","9d77f769":"## Predictions","c03ddd72":"### Regressor","3b3641df":"### After first run","c7c44310":"## Training","75bf692d":"Maybe year should be removed since there are only two possible values\n\nMaybe workday should be removed - data from there should be attainable from weekday column\n\nAtemp, humidity, windspeed - weathersit - maybe weathersit should be removed since it can be judged based on atemp, humidity, windspeed (or atemp, humidity and windspeed)\n\nHumidity is very very noisy","9c93f7f6":"# Data preparation","ee4987c7":"## Cnt vs Features","5e573001":"# Polynomial features - tried, but apparently didn't save in the notebook","9c7a190b":"# Training","75e506f3":"## Model setup for TensorFlow","66b96b05":"### Distribution","7eacce11":"### Other thoughts","ad566687":"Maybe year shouldn't be removed as we're removing some data\n\nMaybe humidity should be removed - very noisy\n\nWindspeed is weird\n\nWeekday is not important as long as we got workingday and holiday columns\n\nGroup hours into different categories - morning, workingHours, evening?","8af7a740":"# File loading","f7079869":"# Data analysis","cc81caca":"### Preds Regressor","f1ff7849":"Low corellation to the cnt:\n\n\nHigh corellation between columns:\n\n*  Mnth and season - **0.83**\n*  Temp and atemp - **0.99**\n\nSeason and temp will be removed first (due to lower variance)\n\n\n\n"}}