{"cell_type":{"b2f666ac":"code","ccbce589":"code","1ce0d150":"code","34a0a155":"code","b51cfd87":"code","808ec1ce":"code","beb5d775":"code","60163b6d":"code","8406b7b9":"code","233578b7":"code","10a86a4d":"code","c28f2692":"code","4aad8395":"code","94894b04":"code","a66efb4d":"code","82080abf":"code","1d25c614":"code","1d3d32b4":"code","a6f5250c":"code","6aa9ea4f":"code","1a9e7ca4":"code","5f939782":"code","b44bc2e8":"code","d16b5c9c":"code","85f3667e":"code","c6f16c81":"code","911f8509":"code","ee35c880":"code","2f0313b9":"code","37bc2f2f":"code","94d8663b":"code","ed3614e6":"code","4a3e688e":"code","e8f67d84":"code","413df2a8":"code","bc455b5d":"code","a0a6a7e3":"code","e06eb1b7":"code","4fd125a2":"code","8ab824cd":"code","40c812b6":"code","fa903c58":"code","b2cd8264":"code","3ddd09fb":"code","65ff9a0c":"code","5ada44e7":"code","d75ca6f8":"code","23f49898":"code","aa326d9a":"code","94c0ea2d":"code","a3dfff96":"code","85e77201":"code","0bb5146f":"code","3e982ae1":"code","23c2eced":"code","0d799e66":"code","f918c476":"code","10ada1b2":"code","2df8c195":"code","7d674687":"code","895a3020":"code","24d9ed11":"code","b7a4dc03":"code","fe5fccd9":"code","e10d7bf0":"code","522c09f5":"code","87c2ae6e":"code","5411fb3c":"code","0b626261":"code","a3b37d10":"code","7873bb41":"code","3657615e":"code","81e31472":"markdown","4db460b2":"markdown","8001c5cc":"markdown","e338444b":"markdown","2579fb53":"markdown","e042c223":"markdown","39aec1dc":"markdown","6a0db172":"markdown","d7163c13":"markdown","fe315016":"markdown","db97c3e9":"markdown","68dcbe69":"markdown","e2cc1e67":"markdown","8f4ba55f":"markdown","fcb4a3a8":"markdown","4126e633":"markdown","068fdea1":"markdown","e54f6a62":"markdown","930cca85":"markdown","d34f4053":"markdown","5320673e":"markdown","6fd6fd13":"markdown","accb32da":"markdown","45a387b3":"markdown","54b27607":"markdown","145cf296":"markdown","15956b9b":"markdown","ef88737e":"markdown","e4519055":"markdown","923af689":"markdown","fd6f2c23":"markdown","6bc2875a":"markdown","c0950800":"markdown"},"source":{"b2f666ac":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression, Ridge, Lasso\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.metrics import r2_score\nfrom sklearn import neighbors","ccbce589":"dataset = pd.read_csv(\"..\/input\/zomato-bangalore-restaurants\/zomato.csv\")\ndataset.head()","1ce0d150":"dataset.describe()","34a0a155":"dataset.info()","b51cfd87":"dataset.isna().sum()","808ec1ce":"dataset = dataset[dataset.cuisines.isna() == False]","beb5d775":"dataset.isna().sum()","60163b6d":"dataset.columns","8406b7b9":"dataset.drop([\"url\",\"phone\",\"address\",\"listed_in(city)\"], axis = 1, inplace=True)","233578b7":"dataset.columns","10a86a4d":"dataset.rename(columns ={'approx_cost(for two people)': 'avg_cost'}, inplace=True)\ndataset.rename(columns ={'listed_in(type)': 'listed_type'}, inplace=True)","c28f2692":"dataset.name.value_counts().head()","4aad8395":"# Plot Restaurant Names vs No of locations\nplt.figure(figsize = (10,5))\nax = dataset.name.value_counts()[:20].plot(kind = 'bar')\nplt.xlabel(\"Restaurant Name\")\nplt.ylabel(\"No. of restaurants\")\nplt.title('Restaurant Names vs No of locations')","94894b04":"dataset.online_order.value_counts()","a66efb4d":"# Plot Online vs Offline Orders\nplt.figure(figsize=(10,5))\nax = dataset.online_order.value_counts().plot(kind = 'bar')\nplt.xlabel(\"Online\/Offline Orders\")\nplt.ylabel(\"Count\")\nplt.title(\"Online\/Offline Orders Count\")","82080abf":"dataset.book_table.value_counts()","1d25c614":"# Plot Book Table Facility Counts\nplt.figure(figsize=(10,5))\nax = dataset.book_table.value_counts().plot(kind = 'bar')\nplt.xlabel(\"Book Table Facility\")\nplt.ylabel(\"Count\")\nplt.title(\"Book Table Facility Counts\")","1d3d32b4":"dataset.location.value_counts().head()","a6f5250c":"# Plot location with highest no of restaurants\nplt.figure(figsize=(10,10))\nax = dataset.location.value_counts()[:15].plot(kind = 'pie')\nplt.title(\"location with highest no of restaurant counts\")\nplt.legend()","6aa9ea4f":"plt.figure(figsize=(10,10))\nnames = dataset.location.value_counts()[:15].index\nvalues = dataset.location.value_counts()[:15].values\nexplode = [0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n\nplt.pie(values, explode=explode, autopct='%0.1f%%', shadow=True, labels = names)\nplt.title(\"Percentage of restaurants present in that location\")\nplt.show()","1a9e7ca4":"dataset.rest_type.value_counts().head()","5f939782":"# Plot highest no of restaurant types\nplt.figure(figsize=(10,10))\nnames = dataset.rest_type.value_counts()[:15].index\nvalues = dataset.rest_type.value_counts()[:15].values\nexplode = [0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n\nplt.pie(values, explode=explode, autopct='%0.1f%%', shadow=True, labels = names)\nplt.title(\"Percentage of restaurants types\")\nplt.show()","b44bc2e8":"dataset.rate.value_counts().head()","d16b5c9c":"dataset = dataset[dataset.rest_type.isna()==False]\ndataset = dataset[dataset.rate.isna()==False]\ndataset = dataset[dataset.rate != 'NEW']\ndataset = dataset[dataset.rate != '-']\ndataset['rate'] = dataset['rate'].apply(lambda r: r.replace('\/5', ''))\ndataset['rate'] = dataset['rate'].apply(lambda r: float(r))\ndataset.rate.value_counts().head()","85f3667e":"f,ax=plt.subplots(figsize=(18,8))\ng = sns.pointplot(x=dataset[\"rest_type\"], y=dataset[\"rate\"], data=dataset)\ng.set_xticklabels(g.get_xticklabels(), rotation=90)\nplt.title('Restaurent type vs Rate', weight = 'bold')\nplt.show()","c6f16c81":"dataset.avg_cost.value_counts().head()","911f8509":"plt.figure(figsize=(10,10))\nname = dataset.avg_cost.value_counts()[:15].index\nvalues = dataset.avg_cost.value_counts()[:15].values\nexplode = [0.1,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n\nplt.pie(values, explode=explode, labels=name, autopct='%01.f%%', shadow=True)","ee35c880":"dataset.dish_liked.value_counts().head(20)","2f0313b9":"dataset_dish_liked = dataset[dataset.dish_liked.notnull()]\ndataset_dish_liked.dish_liked = dataset_dish_liked.dish_liked.apply(lambda x:x.lower().strip())\n\nliked_dish_count=[]\nfor dishes in dataset_dish_liked.dish_liked:\n    for dish in dishes.split(','):\n        liked_dish_count.append(dish.strip())\n        \npd.Series(liked_dish_count).value_counts().head()","37bc2f2f":"plt.figure(figsize=(10,5))\nax = pd.Series(liked_dish_count).value_counts()[:20].plot(kind = 'bar')\nplt.xlabel(\"Dishes\")\nplt.ylabel(\"Count\")\nplt.title(\"Most liked Dishes Count\")","94d8663b":"#Encode the input Variables\ndef Encode(dataset):\n    for column in dataset.columns[~dataset.columns.isin(['rate', 'votes'])]:\n        dataset[column] = dataset[column].factorize()[0]\n    return dataset\n\ndataset_copy = Encode(dataset.copy())","ed3614e6":"plt.figure(figsize=(20,10))\nsns.heatmap(data=dataset_copy.corr(), cmap=\"seismic\")\nplt.show()","4a3e688e":"dataset.drop([\"dish_liked\",\"reviews_list\",\"menu_item\"], axis = 1, inplace = True)","e8f67d84":"dataset.head()","413df2a8":"dataset.isna().sum()","bc455b5d":"dataset.shape","a0a6a7e3":"dataset['avg_cost'] = dataset['avg_cost'].str.replace(',','')\ndataset['avg_cost'] = dataset['avg_cost'].astype('float64')\ndataset.info()","e06eb1b7":"dataset_not_na_avg_cost = dataset.groupby(\"listed_type\")['avg_cost'].transform('mean')\ndataset['avg_cost'].fillna(dataset_not_na_avg_cost, inplace =True)\ndataset.info()","4fd125a2":"dataset.head()","8ab824cd":"dataset['rest_type'] = dataset['rest_type'].str.replace(',','')\ndataset['rest_type'] = dataset['rest_type'].astype('str').apply(lambda x: ' '.join(sorted(x.split())))","40c812b6":"dataset['cuisines'] = dataset['cuisines'].str.replace(',','')\ndataset['cuisines'] = dataset['cuisines'].astype('str').apply(lambda x: ' '.join(sorted(x.split())))","fa903c58":"dataset.head()","b2cd8264":"dataset['online_order'] = pd.get_dummies(dataset['online_order'])\ndataset['book_table'] = pd.get_dummies(dataset['book_table'])","3ddd09fb":"dataset.head()","65ff9a0c":"dataset_location = pd.get_dummies(dataset['location'])\ndataset_rest_type = pd.get_dummies(dataset['rest_type'])\ndataset_cuisines = pd.get_dummies(dataset['cuisines'])\ndataset_listedin_type = pd.get_dummies(dataset['listed_type'])","5ada44e7":"dataset_final = pd.concat([dataset, dataset_cuisines, dataset_location, dataset_listedin_type, dataset_rest_type], axis=1)","d75ca6f8":"dataset_final.head()","23f49898":"dataset_final.drop([\"location\",\"rest_type\",\"cuisines\",\"listed_type\"], axis = 1, inplace=True)\ndataset_final.head()","aa326d9a":"X = dataset_final.drop(['name','rate'], axis = 1)\ny = dataset_final['rate'].values","94c0ea2d":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 0)","a3dfff96":"linear_regression = LinearRegression()\nlinear_regression.fit(X_train, y_train)","85e77201":"y_pred = linear_regression.predict(X_test)\nprint(r2_score(y_test, y_pred, multioutput='uniform_average'))","0bb5146f":"ridge = Ridge()\nridge.fit(X_train, y_train)","3e982ae1":"y_pred = ridge.predict(X_test)\nprint(r2_score(y_test, y_pred, multioutput='uniform_average'))","23c2eced":"lasso = Lasso()\nlasso.fit(X_train, y_train)","0d799e66":"y_pred = lasso.predict(X_test)\nprint(r2_score(y_test, y_pred, multioutput='uniform_average'))","f918c476":"random_forest = RandomForestRegressor(random_state=0, n_estimators=100)\nrandom_forest.fit(X_train, y_train)","10ada1b2":"y_pred = random_forest.predict(X_test)\nprint(r2_score(y_test, y_pred, multioutput='uniform_average'))","2df8c195":"decision_tree = DecisionTreeRegressor()\ndecision_tree.fit(X_train, y_train)","7d674687":"y_pred = decision_tree.predict(X_test)\nprint(r2_score(y_test, y_pred, multioutput='uniform_average'))","895a3020":"svr = SVR()\nsvr.fit(X_train, y_train)","24d9ed11":"y_pred = svr.predict(X_test)\nprint(r2_score(y_test, y_pred, multioutput='uniform_average'))","b7a4dc03":"from sklearn import neighbors\nparams = {'n_neighbors':[2,3,4,5,6,7,8,9]}\n\nknn = neighbors.KNeighborsRegressor()\n\nmodel = GridSearchCV(knn, params, cv=5)\nmodel.fit(X_train, y_train)\nmodel.best_params_","fe5fccd9":"knn=KNeighborsRegressor(n_neighbors = 2)\nknn.fit(X_train, y_train)","e10d7bf0":"y_pred = knn.predict(X_test)\nprint(r2_score(y_test, y_pred, multioutput='uniform_average'))","522c09f5":"etree=ExtraTreesRegressor(n_estimators = 100)\netree.fit(X_train, y_train)","87c2ae6e":"y_pred = etree.predict(X_test)\nprint(r2_score(y_test, y_pred, multioutput='uniform_average'))","5411fb3c":"etree_df = pd.DataFrame(y_test, columns=['Actual'])\netree_df['Predicted'] = etree.predict(X_test)\netree_df.corr()","0b626261":"etree_df.head(40)","a3b37d10":"plt.figure(figsize=(20,10))\nplt.plot(range(len(etree_df['Actual'].head(500))), etree_df['Actual'].head(500), color = \"red\")\nplt.plot(range(len(etree_df['Predicted'].head(500))), etree_df['Predicted'].head(500), color = \"blue\")\nplt.xlabel(\"Range\")\nplt.ylabel(\"Rating\")\nplt.title(\"Restaurant Rating Actual vs Predicted\")\nplt.legend()","7873bb41":"feature_importance_df = pd.DataFrame(X_train.columns, columns=[\"Feature\"])\nfeature_importance_df[\"Importance\"] = etree.feature_importances_\nfeature_importance_df.sort_values('Importance', ascending=False, inplace=True)\nfeature_importance_df = feature_importance_df.head(20)\nfeature_importance_df","3657615e":"plt.figure(figsize=(15,5))\nax = feature_importance_df['Feature']\nplt.bar(range(feature_importance_df.shape[0]), feature_importance_df['Importance']*100)\nplt.xticks(range(feature_importance_df.shape[0]), feature_importance_df['Feature'], rotation = 20)\nplt.xlabel(\"Features\")\nplt.ylabel(\"Importance\")\nplt.title(\"Plot Feature Importances\")","81e31472":"Plot highest no of restaurant types in percentage","4db460b2":"Train and test data with KNN","8001c5cc":"Check NULLs","e338444b":"Actual vs Predcted Test Data for ExtraTreesRegressor","2579fb53":"Drop actual columns we have created dummies for","e042c223":"Plot Restaurent type vs Rate","39aec1dc":"Drop attributes that are not required","6a0db172":"Check data","d7163c13":"Get Correlation between different variables","fe315016":"Plot Book Table Facility Counts","db97c3e9":"Rename columns","68dcbe69":"Train and test data with Random Forest","e2cc1e67":"Train and test data with Decision Tree","8f4ba55f":"Plot location with highest no of restaurants","fcb4a3a8":"Create dummies for columns","4126e633":"Split with comma and sort values for column - rest_type and cuisines","068fdea1":"Read Data","e54f6a62":"**Exploratory Data Analysis**","930cca85":"Plot avg cost for 2 persons in percentage","d34f4053":"Train and test data with Linear Regression","5320673e":"Train and test data with Ridge Regression","6fd6fd13":"Replace NaNs of column avg_cost with mean for that listed_type restaurant","accb32da":"Train and test data with ExtraTreesRegressor","45a387b3":"Drop columns not required","54b27607":"Plot location with highest no of restaurant percentage","145cf296":"Train and test data with SVM","15956b9b":"Plot Online vs Offline Orders","ef88737e":"Plot most liked dish-type","e4519055":"Train and test data with Lasso Regression","923af689":"Plot Restaurant Names vs No of locations","fd6f2c23":"**Create model to predict restaurant rating**","6bc2875a":"Create train and test data","c0950800":"Get most important features and their contribution in model"}}