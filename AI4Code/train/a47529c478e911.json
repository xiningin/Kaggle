{"cell_type":{"8991d6e0":"code","04684cd0":"code","634ad28c":"code","8eb4e32e":"code","a3f94edf":"code","1a1dae1a":"code","68bf1f03":"code","39a1682c":"code","b309b512":"code","b6377930":"code","1128e5b6":"code","4ae8cc37":"code","0c8d90b1":"code","7241a12d":"code","71618a38":"code","2cece438":"code","0393cf6b":"code","1014f4b0":"code","16989fe1":"code","3c8fe4d3":"code","c6359bc7":"code","8d361ed0":"code","5f5ff41e":"code","721edd08":"code","e5a0c00a":"code","361aeb1e":"code","9021b9e3":"code","127341bf":"code","30aa283a":"code","f39756c0":"code","88660102":"code","17846ab1":"code","0b292223":"code","7becc4b2":"code","d3b6822f":"code","e7701e23":"markdown","ffde1b34":"markdown"},"source":{"8991d6e0":"# import Libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib as pyplot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","04684cd0":"# to see all the comands result in a single kernal \n%load_ext autoreload\n%autoreload 2\nfrom IPython.core.interactiveshell import InteractiveShell\nInteractiveShell.ast_node_interactivity = \"all\"","634ad28c":"# to increase no. of rows and column visibility in outputs\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 1000)","8eb4e32e":"#Upload data\ntrain= pd.read_csv(r'..\/input\/janatahack-healthcare-analytics-ii\/Train\/train.csv')\ntest= pd.read_csv(r'..\/input\/janatahack-healthcare-analytics-ii\/test.csv')\nsample= pd.read_csv(r'..\/input\/janatahack-healthcare-analytics-ii\/sample_submission.csv')\ntrain.shape\ntest.shape\nsample.shape","a3f94edf":"#to find no of common and distinct values in test and train \n#findout no common Paient ID in test and train set\nprint('Checking Data distribution for Train! \\n')\nfor col in test.columns:\n     print(f'Distinct entries in {col}: {train[col].nunique()}')\n     print(f'Distinct entries in {col}: {test[col].nunique()}')    \n     print(f'Common # of {col} entries in test and train: {len(np.intersect1d(train[col].unique(), test[col].unique()))}')","1a1dae1a":"sample.head()\nsample.info()","68bf1f03":"train.head()","39a1682c":"#to find out mo. of nan values\ntrain.isna().sum()\ntest.isna().sum()","b309b512":"# for analysis add a new variable \ntrain['tar']=train['Stay'].replace({'0-10':5,'11-20':15,'21-30':25,'31-40':35,'41-50':45,'51-60':55,'61-70':65,'71-80':75,'81-90':85,'91-100':95,'More than 100 Days':110})","b6377930":"train['Admision_type_severity']=train['Type of Admission']+train['Severity of Illness']\ntest['Admision_type_severity']=test['Type of Admission']+test['Severity of Illness']","1128e5b6":"train.groupby(['Hospital_region_code','City_Code_Hospital','Hospital_type_code','Ward_Type'])['tar'].count()","4ae8cc37":"# gives analysis that there are 3 region which have 11 cities, which have 32 hospitals ","0c8d90b1":"train.groupby('Ward_Type')['tar'].mean().plot()","7241a12d":"train.groupby(['Hospital_code'])['tar'].mean().plot()","71618a38":"train['Stay'].value_counts()\/len(train)","2cece438":"train.corr()","0393cf6b":"# sns.pairplot(train)\ntrain['is_train']=1\ntest['is_train']=0","1014f4b0":"df=pd.concat([train,test],axis=0)","16989fe1":"df.shape","3c8fe4d3":"#total visits of a patient to hospital, total no. of visitors to patient\nEncoding = df.groupby('patientid')['case_id'].count()\ndf['total_visits']= df['patientid'].map(Encoding)\nEncoding = df.groupby('patientid')['Visitors with Patient'].sum()\ndf['total_visitors']= df['patientid'].map(Encoding)\nEncoding = df.groupby('patientid')['Visitors with Patient'].mean()\ndf['avg_visitors']= df['patientid'].map(Encoding)","c6359bc7":"Encoding = df.groupby('patientid')['Admission_Deposit'].sum()\ndf['sum_ad']= df['patientid'].map(Encoding)\nEncoding = df.groupby('patientid')['Admission_Deposit'].mean()\ndf['mean_ad']= df['patientid'].map(Encoding)\nEncoding = df.groupby('patientid')['Admission_Deposit'].max()\ndf['max_ad']= df['patientid'].map(Encoding)\nEncoding = df.groupby('patientid')['Admission_Deposit'].min()\ndf['min_ad']= df['patientid'].map(Encoding)","8d361ed0":"Encoding = df.groupby('Available Extra Rooms in Hospital')['Admission_Deposit'].mean()\ndf['aer_ad']= df['Available Extra Rooms in Hospital'].map(Encoding)\nEncoding = df.groupby('Department')['Admission_Deposit'].mean()\ndf['dept_ad']= df['Department'].map(Encoding)\nEncoding = df.groupby('Ward_Type')['Admission_Deposit'].mean()\ndf['wt_ad']= df['Ward_Type'].map(Encoding)\nEncoding = df.groupby('Admision_type_severity')['Admission_Deposit'].mean()\ndf['ads_ad']= df['Admision_type_severity'].map(Encoding)","5f5ff41e":"df['mean_Admission_Deposit_per_patient_hosp']=df.groupby(['patientid','Hospital_code'])['Admission_Deposit'].transform('mean')\ndf['sum_Admission_Deposit_per_patient_hosp']=df.groupby(['patientid','Hospital_code'])['Admission_Deposit'].transform('sum')\ndf['max_Admission_Deposit_per_patient_hosp']=df.groupby(['patientid','Hospital_code'])['Admission_Deposit'].transform('max')\ndf['min_Admission_Deposit_per_patient_hosp']=df.groupby(['patientid','Hospital_code'])['Admission_Deposit'].transform('min')","721edd08":"df=df.fillna(0)\ndf['City_Code_Patient']=df['City_Code_Patient'].astype(int)\ndf['Bed Grade']=df['Bed Grade'].astype(int)","e5a0c00a":"train1=df[df['is_train']==1]\ntest1=df[df['is_train']==0]","361aeb1e":"col_1=['Hospital_code', 'Hospital_type_code', 'City_Code_Hospital', 'Hospital_region_code', 'Available Extra Rooms in Hospital', 'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade', 'City_Code_Patient', 'Type of Admission', 'Severity of Illness', 'Visitors with Patient', 'Age', 'Admission_Deposit', 'total_visits','Admision_type_severity', 'total_visitors', 'avg_visitors','sum_ad', 'mean_ad', 'max_ad', 'min_ad', 'aer_ad', 'dept_ad', 'wt_ad', 'ads_ad', 'mean_Admission_Deposit_per_patient_hosp', 'sum_Admission_Deposit_per_patient_hosp', 'max_Admission_Deposit_per_patient_hosp', 'min_Admission_Deposit_per_patient_hosp']","9021b9e3":"from sklearn.model_selection import train_test_split\nX_t, X_tt, y_t, y_tt = train_test_split(train1[col_1], train1['Stay'], test_size=.3, random_state=2,shuffle=True,stratify= train1['Stay'])","127341bf":"train1.head()","30aa283a":"train1.columns","f39756c0":"cat_col=['Hospital_code', 'Hospital_type_code', 'City_Code_Hospital', 'Hospital_region_code', 'Available Extra Rooms in Hospital', 'Department', 'Ward_Type', 'Ward_Facility_Code', 'Bed Grade', 'City_Code_Patient', 'Type of Admission','Admision_type_severity', 'Severity of Illness','Age']","88660102":"from catboost import CatBoostClassifier\nfrom sklearn.metrics import accuracy_score\ncatb = CatBoostClassifier(iterations=5000,eval_metric='Accuracy',depth=7,l2_leaf_reg=2 ,task_type = 'GPU')\ncatb= catb.fit(X_t , y_t, cat_features=cat_col,eval_set=(X_tt, y_tt),plot=True,verbose=500)\ny_cat = catb.predict(X_tt)\nprint(catb.score(X_t , y_t))\nprint(catb.score(X_tt , y_tt))","17846ab1":"print(catb.score(X_t , y_t))\nprint(catb.score(X_tt , y_tt))","0b292223":"# 43.19 by adding pateint hospital admission fees sum mean max min\n# 43.23 by changind nestimator from 3000 to 5000 # 43.00 in public leaderboard and 42.91 on private leader board ","7becc4b2":"feat_importances = pd.Series(catb.feature_importances_, index=X_t.columns)\n#feat_importances.nlargest(30).plot(kind='barh')\nfeat_importances.nsmallest(20).plot(kind='barh')\nplt.show()","d3b6822f":"catb= catb.fit(train1[col_1],train['Stay'],cat_features=cat_col,verbose=1000)\ny_cat = catb.predict(test1[col_1])\nsample['Stay']=y_cat\nsample.to_csv('cat.csv',index=False)","e7701e23":"#Its Analytics Vidhya Hackathon \n#Link to competition- https:\/\/datahack.analyticsvidhya.com\/contest\/janatahack-healthcare-analytics-ii\/","ffde1b34":"# Visualization "}}