{"cell_type":{"b1853f59":"code","49d67ced":"code","e3679c33":"code","57ce8835":"code","dae6e924":"code","a2fd7b99":"code","b3731e44":"code","29f6461d":"code","707de08a":"code","5943f805":"code","c9dc27db":"code","be918bdb":"code","202e9684":"code","c7e8d39e":"code","f167d826":"code","1802d079":"markdown"},"source":{"b1853f59":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","49d67ced":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport string\nfrom nltk.tokenize import word_tokenize\nfrom nltk.corpus import stopwords\nfrom nltk.stem.porter import PorterStemmer\nimport re\nfrom sklearn import preprocessing\nfrom keras.preprocessing.text import Tokenizer\nfrom keras.preprocessing.sequence import pad_sequences\nimport gc\nfrom keras.layers import Dense, Input, LSTM, Embedding, Dropout, Activation\nfrom keras.layers import Bidirectional, GlobalMaxPool1D\nfrom keras import initializers, regularizers, constraints, optimizers, layers\nfrom keras.models import Model\nfrom keras.utils import plot_model","e3679c33":"\nimport nltk\nnltk.download('punkt')\nnltk.download('stopwords')","57ce8835":"df=pd.read_csv('..\/input\/dataset-csv\/text_emotion.csv')","dae6e924":"df.head()","a2fd7b99":"df=df.drop(['tweet_id','author'],axis=1)\ndf.head()","b3731e44":"df[\"sentiment\"].value_counts()","29f6461d":"def clean(df):\n    line=df['content'].values.tolist()\n    all_content=list()\n    for text in line:\n        text=text.lower()\n        text = re.sub(r\"i'm\", \"i am\", text)\n        text = re.sub(r\"he's\", \"he is\", text)\n        text = re.sub(r\"she's\", \"she is\", text)\n        text = re.sub(r\"that's\", \"that is\", text)        \n        text = re.sub(r\"what's\", \"what is\", text)\n        text = re.sub(r\"where's\", \"where is\", text) \n        text = re.sub(r\"\\'ll\", \" will\", text)  \n        text = re.sub(r\"\\'ve\", \" have\", text)  \n        text = re.sub(r\"\\'re\", \" are\", text)\n        text = re.sub(r\"\\'d\", \" would\", text)\n        text = re.sub(r\"\\'ve\", \" have\", text)\n        text = re.sub(r\"won't\", \"will not\", text)\n        text = re.sub(r\"don't\", \"do not\", text)\n        text = re.sub(r\"did't\", \"did not\", text)\n        text = re.sub(r\"can't\", \"can not\", text)\n        text = re.sub(r\"it's\", \"it is\", text)\n        text = re.sub(r\"couldn't\", \"could not\", text)\n        text = re.sub(r\"have't\", \"have not\", text)\n        pattern=re.compile('http[s]?:\/\/(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-f][0-9a-fA-F]))+')\n        text=pattern.sub(\"\",text)\n        text=re.sub(r\"[,.\\\"!@#$%^&*(){}?\/;`~:<>+=-]\",\"\",text)\n        tokens=word_tokenize(text)\n        table=str.maketrans('','',string.punctuation)\n        stripped=[w.translate(table) for w in tokens]\n        words=[word for word in stripped if word.isalpha()]\n        stop_word=set(stopwords.words(\"english\"))\n        stop_word.discard(\"not\")\n        ps=PorterStemmer()\n        words=[ps.stem(w) for w in words if not w in stop_word]\n        words=' '.join(words)\n        all_content.append(words)\n    return all_content","707de08a":"all_review=clean(df)","5943f805":"all_review[0:5]","c9dc27db":"dummies=pd.get_dummies(df.sentiment)\ndummies.head()\ny = dummies.values","be918bdb":"def padding(all_review):   \n    max_features = 10000\n    tokenizer = Tokenizer(num_words=max_features)\n    tokenizer.fit_on_texts(list(all_review))\n    list_tokenized_train = tokenizer.texts_to_sequences(all_review)\n    totalNumWords = [len(one_comment) for one_comment in list_tokenized_train]\n    plt.hist(totalNumWords,bins = np.arange(0,30,1))\n    maxlen = 18\n    X_t = pad_sequences(list_tokenized_train, maxlen=maxlen)\n    return X_t\n","202e9684":"X_t=padding(all_review)\n","c7e8d39e":"maxlen = 18\ninp = Input(shape=(maxlen, ))\nembed_size = 100\nmax_features = 10000\nx = Embedding(max_features, embed_size)(inp)\nx = LSTM(30, return_sequences=True,name='lstm_layer')(x)\nx = GlobalMaxPool1D()(x)\nx = Dropout(0.1)(x)\nx = Dense(15, activation=\"relu\")(x)\nx = Dropout(0.1)(x)\nx = Dense(13, activation=\"sigmoid\")(x)","f167d826":"model = Model(inputs=inp, outputs=x)\nmodel.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])\nbatch_size = 30\nepochs = 10\nmodel.fit(X_t,y, batch_size=batch_size, epochs=epochs, validation_split=0.1)","1802d079":"### data cleaning"}}