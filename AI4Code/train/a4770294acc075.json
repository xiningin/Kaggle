{"cell_type":{"bf1a0ec2":"code","fa49c33a":"code","d512534b":"code","987754ba":"code","ff0f0b6a":"code","8000d1d5":"code","17c28e82":"code","50133ab0":"code","de98d52d":"code","b612f093":"code","6c979d72":"code","4cfe3d0b":"code","2181c51f":"code","66746051":"code","d341d03c":"code","27699046":"code","d9fcfade":"code","65690680":"code","1890873b":"code","78823dbf":"code","0406e109":"code","5edf4606":"code","fa20ef73":"code","b43ba7ce":"code","33e092a7":"code","21564c68":"code","0926ed82":"code","3372ca8d":"code","ba61d8b4":"code","204eb4aa":"code","65b43526":"code","086bee5a":"code","bd1d95ac":"code","0d331b04":"code","f10096cb":"code","ccb42b2b":"code","faa96a05":"code","f494b140":"code","f3bbe179":"code","285539ca":"code","354392ca":"code","c196eab9":"code","ec113f2e":"code","79f48cf7":"code","2d560d9f":"code","bdb38208":"markdown"},"source":{"bf1a0ec2":"#Libraries\nimport pandas as pd\nimport numpy as np\nfrom pandas_datareader import data as wb\n\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\n%matplotlib inline\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","fa49c33a":"#Download data\nTSLA = wb.DataReader('TSLA', data_source=\"yahoo\",start = \"2018-1-1\",end='2018-12-31')\nTSLA.head()","d512534b":"GOOGL = wb.DataReader('GOOGL', data_source=\"yahoo\",start = '2018-1-1',end='2018-12-31')\nGOOGL.head()","987754ba":"AMZN = wb.DataReader('AMZN', data_source=\"yahoo\",start = '2018-1-1',end='2018-12-31')\nAMZN.head()","ff0f0b6a":"AAPL = wb.DataReader('AAPL', data_source=\"yahoo\",start = '2018-1-1',end='2018-12-31')\nAAPL.head()","8000d1d5":"#Individual stock analysis \n#Simple RR\n\nTSLA['Simple Return'] = (TSLA[\"Adj Close\"]\/TSLA[\"Adj Close\"].shift(1))-1\nTSLA.head()","17c28e82":"#Visualization of the rate of return data\nTSLA['Simple Return'].plot(figsize=(12,8))","50133ab0":"#A similar picture can be presented as a histogram of the daily return\nfig = plt.figure(figsize=(12,8))\nsns.distplot(TSLA['Simple Return'].dropna(),bins=100)","de98d52d":"!pip install mpl-finance","b612f093":"#Creating a candlestick plot for share prices:\nimport mpl_finance\nfrom mpl_finance import candlestick_ohlc\nimport datetime\nimport matplotlib.dates as mdates\n\n\nTSLA_candle = TSLA[['Open', 'High', 'Low', 'Close']]\nTSLA_candle.reset_index(inplace=True)\nTSLA_candle['Date'] = TSLA_candle['Date'].map(mdates.date2num)\n\nfig = plt.figure(figsize=(12,8))\nax = plt.subplot()\ncandlestick_ohlc(ax, TSLA_candle.values, width=5, colorup='g', colordown='r')\nax.xaxis_date()\nax.grid(True)\nplt.show()","6c979d72":"#Compute return rates for the other shares in the portfolio\nGOOGL['Simple Return'] = (GOOGL[\"Adj Close\"]\/GOOGL[\"Adj Close\"].shift(1))-1\nGOOGL.head()","4cfe3d0b":"AMZN['Simple Return'] = (AMZN[\"Adj Close\"]\/AMZN[\"Adj Close\"].shift(1))-1\nAMZN.head()","2181c51f":"AAPL['Simple Return'] = (AAPL[\"Adj Close\"]\/AAPL[\"Adj Close\"].shift(1))-1\nAAPL.head()","66746051":"#Daily return plot\nf, ax = plt.subplots(2,2, figsize = (11,8))\nk1 = sns.lineplot(y = TSLA[\"Simple Return\"], x = TSLA.index.get_level_values(0), ax = ax[0,0])\nk2 = sns.lineplot(y = GOOGL[\"Simple Return\"], x = GOOGL.index.get_level_values(0), ax = ax[0,1])\nk3 = sns.lineplot(y = AMZN[\"Simple Return\"], x = AMZN.index.get_level_values(0), ax = ax[1,0])\nk4 = sns.lineplot(y = AAPL[\"Simple Return\"], x = AAPL.index.get_level_values(0), ax = ax[1,1])\n\ngraphs = [k1,k2,k3,k4]\n\nfor i in graphs:\n    i.tick_params(axis='x', labelsize=8,labelrotation=90)\n\nk1.title.set_text('Tesla')\nk2.title.set_text('Google')\nk3.title.set_text('Amazon')\nk4.title.set_text('Apple')\nplt.tight_layout()","d341d03c":"#Calculate annualised average return\nTSLA_avg_return = round(TSLA['Simple Return'].mean()*250, 2)*100\nprint(str(TSLA_avg_return) + '%')","27699046":"#Calculte annualized mean log return \n\nTSLA['Log Return'] = np.log(TSLA['Adj Close']\/TSLA['Adj Close'].shift(1))","d9fcfade":"#Calculate moving average\nma_days = [20, 50, 200]\n\nfor ma in ma_days:\n    new_columns = '%s day MA' %(str(ma))\n    TSLA[new_columns] = TSLA['Adj Close'].rolling(ma).mean()\nTSLA[['Adj Close','20 day MA', '50 day MA', '200 day MA']].plot(subplots=False, figsize=(12,8), title=\"Tesla price\/moving averages\")","65690680":"#join DFrames for portfolio analysis\nma_data = pd.concat([TSLA['Adj Close'], GOOGL['Adj Close'], AMZN['Adj Close'],AAPL['Adj Close']], axis=1).dropna()\nma_data.columns = ['TSLA','GOOGL','AMZN','AAPL']\nma_data.head()","1890873b":"#Moving averages for multiple shares\n\n    \n#Create a dataset with all the moving average values    \nm = [20,50,200]\nma_20 = ma_data.rolling(20).mean()\nma_50 = ma_data.rolling(50).mean()\nma_200 = ma_data.rolling(200).mean()\nma_concat = pd.concat([ma_20,ma_50,ma_200], axis=1)\n\n\n#Create a subplot for the moving averages of the shares\nlist_ma = ['TSLA','GOOGL','AMZN','AAPL']\n\nf, ax = plt.subplots(2, 2, figsize = (11,8))\ndict_ma = {'TSLA':[0,0],'GOOGL':[0,1], 'AMZN':[1,0],'AAPL':[1,1]}\nfor k, v in dict_ma.items():\n    g1 = ma_concat[k].plot(ax=ax[v[0], v[1]], label=k, legend=False)\n    g1.set_title(k)\n    \n\nL=plt.legend()\nL.get_texts()[0].set_text('20 day MA')\nL.get_texts()[1].set_text('50 day MA')\nL.get_texts()[2].set_text('200 day MA')\nplt.tight_layout()","78823dbf":"#Portfolio analysis\nfrom pandas import DataFrame\ntickers = ['TSLA', 'GOOGL', 'AMZN','AAPL']\nmy_portfolio = pd.DataFrame()\n\n#Create the same DF as above directly from the data source\nfor t in tickers:\n    my_portfolio[t] = wb.DataReader(t, data_source=\"yahoo\",start = \"2018-1-1\", end='2018-12-31')['Adj Close']\n\nmy_portfolio.head()","0406e109":"#Index data\nNASDAQComp = wb.DataReader('^IXIC', data_source=\"yahoo\",start = '2018-1-1', end='2018-12-31')","5edf4606":"#Adding the index to the DF\ntickersI = ['TSLA', 'GOOGL', 'AMZN','AAPL', '^IXIC']\nmy_portfolioI = pd.DataFrame()\n\nfor t in tickersI:\n    my_portfolioI[t] = wb.DataReader(t, data_source=\"yahoo\",start = '2018-1-1', end='2018-12-31')['Adj Close']\n\nmy_portfolioI.head()","fa20ef73":"index_return = (my_portfolioI['^IXIC']\/my_portfolioI['^IXIC'].shift(1))-1\nindex_return.head()","b43ba7ce":"#To see how the stock prices changed during the period\nplot_portfolio = (my_portfolio\/my_portfolio.iloc[0]*100).plot(figsize = (12,8))\nplot_portfolio","33e092a7":"#To see how the securities performed against the index during the period\nf, ax = plt.subplots(figsize = (12,8))\n(my_portfolioI.loc[:, my_portfolioI.columns != \"^IXIC\"]\/my_portfolioI.loc[:, my_portfolioI.columns != \"^IXIC\"].iloc[0]*100).plot(ax=ax, linewidth=1.5)\n(my_portfolioI[['^IXIC']]\/my_portfolioI[['^IXIC']].iloc[0]*100).plot(linewidth=3.5, ax=ax)","21564c68":"#Portfolio RR - the simple rate of return for each share in the portfolio for each day\nportfolio_returns = (my_portfolio\/my_portfolio.shift(1))-1\nportfolio_returns.head()","0926ed82":"#Portfolio RR - the simple RR for each share in the portfolio for each day and weighted for the portfolio\nweights = np.array([0.30,0.20,0.25,0.15]) #an example for the weight of each share in the portfolio\nret = my_portfolio.pct_change()\nret['Portfolio RR'] = np.dot(ret,weights)\nret.head()","3372ca8d":"#To plot the relationships between each stock pair in the portfolio\nret_fig = sns.pairplot(ret.dropna())","ba61d8b4":"#To customise the above graph\nret_fig = sns.PairGrid(ret.dropna(),height=3)\nret_fig.map_diag(plt.hist,bins=30)\nret_fig.map_upper(sns.kdeplot, shade=True, shade_lowest=False)\nret_fig.map_lower(plt.scatter,color='green',alpha=0.1)","204eb4aa":"#Annualised returns for each share\nannual_returns = portfolio_returns.mean()*250\nannual_returns","65b43526":"#Portfolio return\nprint(str(round(np.dot(annual_returns, weights),4)*100) + '%')","086bee5a":"#Calculate share log returns to find portfolio covariance and correlation\nmy_portfolio_log = np.log(my_portfolio\/my_portfolio.shift(1))\nmy_portfolio_log.head()","bd1d95ac":"#Portfolio returns covariance\ncov_matrix = my_portfolio_log.cov()*250\ncov_matrix","0d331b04":"#Share returns correlation\ncorr_matrix = my_portfolio_log.corr()\ncorr_matrix","f10096cb":"#Correlation plot of the returns\n\nplt.figure(figsize=(12,8))\nmask = np.zeros_like(corr_matrix)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    ax = sns.heatmap(corr_matrix, mask=mask, annot=True,vmin=-1,cmap='coolwarm', vmax=.4)","ccb42b2b":"#Portfolio risk\nportfolio_variance = np.dot(weights.T, np.dot(my_portfolio_log.cov()*250, weights))\nprint(\"Portfolio variance: \" + str(round(portfolio_variance, 4)))\n\nportfolio_volatility = (np.dot(weights.T, np.dot(my_portfolio_log.cov()*250,weights)))**0.5\nprint(\"Portfolio standard deviation: \" + str(round(portfolio_volatility, 4)))\n","faa96a05":"#Risk analysis: find the VaR\nplt.figure(figsize=(12,8))\nsns.distplot(ret['Portfolio RR'].dropna(),bins=100)\n","f494b140":"#Using the empirical quantile method to define the maximum daily loss of our portfolio with 95% confidence. \n#In this case our lowest return (i.e. loss) will not exceed -2.89%. \nportfolio_var = ret['Portfolio RR'].dropna().quantile(0.05)\nprint(str(round(portfolio_var*100,2)) + '%')\n","f3bbe179":"#Running a regresson between the rates of return of the index and our portfolio\nimport statsmodels.api as sm\n\nx = index_return.dropna()\ny = ret['Portfolio RR'].dropna()\n\nresults = sm.OLS(y,sm.add_constant(x)).fit()\nprint(results.summary())\n\n\nplt.figure(figsize=(12,8))\nplt.scatter(x,y)\n\nx_plot = np.linspace(0,1,100)\nplt.plot(x, results.fittedvalues)\n\nplt.show()\n\n#or calculate just the main values in OLS\nfrom scipy import stats\nstats = stats.linregress(x,y)\nprint(stats)\n","285539ca":"#Monte Carlo simulation for the portfolio rate of return\ndays = 365\ndt = 1.\/days\nmu = ret['Portfolio RR'].mean()\nsigma = ret['Portfolio RR'].std()\nmu, sigma\n","354392ca":"def monte_carlo_portfolio(start_price,days,mu,sigma):\n    \n    # Define a price array\n    RR = np.zeros(days)\n    RR[0] = start_RR\n    # Schok and Drift\n    shock = np.zeros(days)\n    drift = np.zeros(days)\n    \n    # Run price array for number of days\n    for x in range(1,days):\n        \n        # Calculate Schock\n        shock[x] = np.random.normal(loc=mu * dt, scale=sigma * np.sqrt(dt))\n        # Calculate Drift\n        drift[x] = mu * dt\n        # Calculate Price\n        RR[x] = RR[x-1] + (RR[x-1] * (drift[x] + shock[x]))\n        \n    return RR\n","c196eab9":"start_RR = 0.032741\n\nplt.figure(figsize=(12,8))\nfor run in range(1000):\n    plt.plot(monte_carlo_portfolio(start_RR,days,mu,sigma))\n\n    \nplt.xlabel(\"Days\")\nplt.ylabel(\"Price\")  \nplt.title('Portfolio Monte Carlo Analysis')\n","ec113f2e":"#To make a histogram of 1000 simulations\nruns = 1000\n\n# Create an empty matrix to hold the data and then populate it with simulation results\nsimulations = np.zeros(runs)\n\nfor run in range(runs):    \n    # Set the simulation data point as the last rate of return for that run\n    simulations[run] = monte_carlo_portfolio(start_RR,days,mu,sigma)[days-1]\n","79f48cf7":"# We can use 1% empirical qunatile to find the lowest expected return, which means that 99% of the values should fall \n#between here and the end RR\nq = np.percentile(simulations, 1)\n    \n# Plot the distribution of the end RR values\nfig = plt.figure(figsize=(12,8))\nplt.hist(simulations,bins=200)\n\n# Using plt.figtext to fill in some additional information onto the plot\n\n# Starting RR\n\nplt.figtext(0.7, 0.8, s=\"Start RR: %.4f\" %start_RR)\n# Mean ending price\n#plt.figtext(0.7, 0.7, \"Mean RR: %.2f\" % simulations.mean())\n\n# Value at risk within 99% confidence interval\nplt.figtext(0.7, 0.7, \"VaR(0.99): %.4f\" % (start_RR - q,))\n\n# To see the 1% quantile\nplt.figtext(0.15, 0.6, \"q(0.99): %.4f\" % q)\n\n# Plot a line at the 1% quantile result\nplt.axvline(x=q, linewidth=4, color='r')","2d560d9f":"#Portfolio sharpe ratio, assuming a 0 risk free rate. This enables investors to\n#compare portfolios (or stocks) in terms of risk-return performance.\n\nsharpe_ratio = ret['Portfolio RR'].mean()\/ret['Portfolio RR'].std()\n\n#Annualise the ratio\nsharpe_ratio_annualised = sharpe_ratio*(250**0.5)\nround(sharpe_ratio_annualised,2)","bdb38208":"**Basic Share Price and Portfolio Analysis** \n\nIn this notebook I will be experimenting with Python to carry out some basic and concise share price \/ portfolio analysis. It aims to help traders and Python enthusiasts put Python libraries to good use for some of the key indicators.\n\nThe trading data is imported from Yahoo Finance.\n\nDISCLAIMER: This is not investment advice!!! The reviewed shares are randomly selected for testing purposes only and should not be considered recommendation to enter in any kind of securities transaction."}}