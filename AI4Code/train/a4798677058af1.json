{"cell_type":{"2fa8cb3d":"code","c5bf0702":"code","76a30c76":"code","8c5fe043":"code","15c781c8":"code","8efc619e":"code","a806f123":"code","e7cb3361":"code","ec4dd6e5":"code","f9ae4708":"code","f4488466":"code","4925edd7":"code","828206a8":"code","8aff9bab":"code","e2bd93cd":"code","c63155fb":"code","09d85804":"code","06a53bfb":"code","4aeecc61":"code","52c1b918":"code","ec6166bc":"code","1a0086f8":"code","f8fac53f":"code","90130fe7":"markdown","387ee8ab":"markdown","c00677ab":"markdown","1a7be167":"markdown","438fb4dd":"markdown","bb712d9c":"markdown","b372bfb5":"markdown","649d79c7":"markdown","e2d88887":"markdown","4c25931b":"markdown","488766cd":"markdown","e21da512":"markdown","f37c266d":"markdown","c793dfed":"markdown","5ee2cf21":"markdown","b5ac80c9":"markdown","affdbccb":"markdown","9af680a6":"markdown","ba9e2349":"markdown","8eb1ee57":"markdown","6e10370f":"markdown","a29c1003":"markdown","041fda2d":"markdown"},"source":{"2fa8cb3d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib as mpl\nimport seaborn as sns\nimport os\nprint(os.listdir(\"..\/input\"))","c5bf0702":"PATH = '..\/input\/Pokemon.csv'\n\ndf_poke = pd.read_csv(PATH)","76a30c76":"df_poke.head()","8c5fe043":"df_poke.describe(include='all')","15c781c8":"pokecolor = {'Grass': '#78C850', 'Normal':'#A8A878','Fire':'#F08030','Fighting':'#C03028','Water':'#6890F0',\n            'Flying':'#A890F0','Poison':'#A040A0','Electric':'#F8D030','Ground':'#E0C068','Psychic':'#F85888',\n            'Rock':'#B8A038','Ice':'#98D8D8','Bug':'#A8B820','Dragon':'#7038F8','Ghost':'#705898','Dark':'#705848',\n            'Steel':'#B8B8D0','Fairy':'#EE99AC'}\n\n","8efc619e":"tipo1 = df_poke['Type 1'].value_counts(ascending=True)\ntipo1.plot(kind='barh', grid=True, figsize=(15,8),\n          xticks= [n for n in range(0,111, 10)],\n          color=tipo1.index.map(pokecolor))\nplt.xlabel('N\u00famero de Pok\u00e9mons')\nplt.ylabel('Tipo Primario')\nplt.title('Pok\u00e9mons agrupados por tipo primario')\nplt.minorticks_on()\n","a806f123":"df_poke['Type1+2'] = df_poke['Type 1'] +\" - \" +  df_poke['Type 2']\nlen(df_poke['Type1+2'].value_counts())","e7cb3361":"mask1 = pd.isna(df_poke['Type 2'])\npokecomb = df_poke[mask1 == False]['Type 1'].value_counts(ascending=True)\npokecomb.plot(kind='barh', title='Pok\u00e9mons that have a combination',\n              figsize=(15,8), xticks = [n for n in range(0,56, 5)],\n              grid=True, color=pokecomb.index.map(pokecolor))\nplt.xlabel('Pok\u00e9mon Number')\nplt.ylabel('Primary Type')","ec4dd6e5":"lendmask = df_poke['Legendary'] == True\npokelend = df_poke[lendmask]['Type 1'].value_counts(ascending=True)\npokelend.plot(kind='barh',title='Legendaries by Type',\n              figsize=(15,8), grid=True, color = pokelend.index.map(pokecolor))\nplt.xlabel('Legendary Number')\nplt.ylabel('Primary Type')","f9ae4708":"status_totais = df_poke.groupby('Type 1').Total.mean().sort_values()\nstatus_totais.plot(kind='barh',title='Primary Type Mean Total Stats', color=status_totais.index.map(pokecolor),\n                   xticks=[n for n in range(0,601,50)],figsize=(15,8), grid=True)\n\nplt.xlabel('Total Stats')\nplt.ylabel('Primary Type')","f4488466":"status_totais_nolend = df_poke[lendmask == False].groupby('Type 1').Total.mean().sort_values(ascending=True)\nstatus_totais_nolend.plot(kind='barh',title='Primary Type Mean Total Stats (No Legendaries)',\n      xticks= [n for n in range(0,551,50)],figsize=(15,8), grid=True, color = status_totais_nolend.index.map(pokecolor))\nplt.xlabel('Total Stats')\nplt.ylabel('Primary Type')","4925edd7":"poke_atk = df_poke.groupby('Type 1').Attack.mean().sort_values()\npoke_atk.plot(kind='barh', title='Primary Type Mean Attack', xticks = [n for n in range(0,121, 10)],\n              figsize=(15,8), grid=True, color = poke_atk.index.map(pokecolor))\nplt.xlabel('Attack')\nplt.ylabel('Primary Type')","828206a8":"poke_atk_nolend = df_poke[lendmask == False].groupby('Type 1').Attack.mean().sort_values()\npoke_atk_nolend.plot(kind='barh', xticks = [n for n in range(0,111,10)],title='Primary Type Mean Attack (No Legendaries)',figsize=(15,8),\n                                            color=poke_atk_nolend.index.map(pokecolor),grid=True)\nplt.xlabel('Attack')\nplt.ylabel('Primary Type')\n","8aff9bab":"poke_def = df_poke.groupby('Type 1').Defense.mean().sort_values()\npoke_def.plot(kind='barh', title='Primary Type Mean Defense', xticks = [n for n in range(0,131, 10)],figsize=(15,8),\n              color = poke_def.index.map(pokecolor),grid=True)\nplt.xlabel('Defense')\nplt.ylabel('Primary Type')","e2bd93cd":"poke_def = df_poke[lendmask == False].groupby('Type 1').Defense.mean().sort_values()\npoke_def.plot(kind='barh', title='Primary Type Mean Defense (No Legendaries)',xticks = [n for n in range(0,131,10)],\n              figsize=(15,8), grid=True, color=poke_def.index.map(pokecolor))\nplt.xlabel('Defense')\nplt.ylabel('Primary Type')","c63155fb":"poke_hp = df_poke.groupby('Type 1').HP.mean().sort_values()\npoke_hp.plot(kind='barh',title='Primary Type Mean HP',xticks = [n for n in range(0,91,10)],\n             figsize=(15,8),grid=True, color=poke_hp.index.map(pokecolor))\n\nplt.xlabel('HP')\nplt.ylabel('Primary Type')","09d85804":"poke_hp_nolend = df_poke[lendmask == False].groupby('Type 1').HP.mean().sort_values()\npoke_hp_nolend.plot(kind='barh',title='Primary Type Mean HP (No Legendaries)',xticks = [n for n in range(0,86, 10)],\n                    figsize=(15,8), grid=True, color = poke_hp_nolend.index.map(pokecolor))\nplt.xlabel('HP')\nplt.ylabel('Primary Type')","06a53bfb":"poke_spdef = df_poke.groupby('Type 1')['Sp. Def'].mean().sort_values()\npoke_spdef.plot(kind='barh', title='Primary Type Mean Special Defense',xticks = [n for n in range(0,91,10)],\n                figsize=(15,8), grid=True, color=poke_spdef.index.map(pokecolor))\nplt.xlabel('Special Defense')\nplt.ylabel('Primary Type')","4aeecc61":"poke_spdef_nolend = df_poke[lendmask == False].groupby('Type 1')['Sp. Def'].mean().sort_values()\npoke_spdef_nolend.plot(kind='barh', title='Primary Type Mean Special Defense (No Legendaries)',xticks = [n for n in range(0,91,10)],\n                figsize=(15,8), grid=True, color=poke_spdef_nolend.index.map(pokecolor))\nplt.xlabel('Special Defense')\nplt.ylabel('Primary Type')","52c1b918":"poke_spatk = df_poke.groupby('Type 1')['Sp. Atk'].mean().sort_values()\npoke_spatk.plot(kind='barh',title='Primary Type Mean Special Attack', xticks=[n for n in range(0,101,10)],\n               figsize=(15,8), grid=True, color=poke_spatk.index.map(pokecolor))\nplt.xlabel('Special Attack')\nplt.ylabel('Primary Type')","ec6166bc":"poke_spatk_nolend = df_poke[lendmask == False].groupby('Type 1')['Sp. Atk'].mean().sort_values()\npoke_spatk_nolend.plot(kind='barh',title='Primary Type Mean Special Attack (No Legendaries)', xticks=[n for n in range(0,101,10)],\n               figsize=(15,8), grid=True, color=poke_spatk_nolend.index.map(pokecolor))\nplt.xlabel('Special Attack')\nplt.ylabel('Primary Type')","1a0086f8":"poke_spd= df_poke.groupby('Type 1')['Speed'].mean().sort_values()\npoke_spd.plot(kind='barh',title='Primary Type Mean Speed', xticks=[n for n in range(0,101,10)],\n               figsize=(15,8), grid=True, color=poke_spd.index.map(pokecolor))\nplt.xlabel('Speed')\nplt.ylabel('Primary Type')","f8fac53f":"poke_spd= df_poke[lendmask == False].groupby('Type 1')['Speed'].mean().sort_values()\npoke_spd.plot(kind='barh',title='Primary Type Mean Speed (No Legendaries)', xticks=[n for n in range(0,101,10)],\n               figsize=(15,8), grid=True, color=poke_spd.index.map(pokecolor))\nplt.xlabel('Speed')\nplt.ylabel('Primary Type')","90130fe7":"Wow, we have only 2 Flying Type Legendaries and it changes so much in the mean!\n","387ee8ab":"Let's create a dict for coloring our charts. The colors were scrapped from bulbapedia","c00677ab":"Dragon Type Pok\u00e9mon has the strongest status! Could this be caused by the great number of Dragon Type Legendary Pok\u00e9mon?!","1a7be167":"Wow! There are so many combinations! Then let's visualize only pok\u00e9mon who actually have Type 2?","438fb4dd":"Again without Legendary!","bb712d9c":"Now the Speed!","b372bfb5":"A first visualization at our Dataset","649d79c7":"It is somehow finished, but i would love to see suggestions for more plotting, if i should use faceting, subplotting, seaborn plots and other things like these. It i my first kernel and i would be very grateful if you would give me your feedback in it. Thanks!","e2d88887":"And Dragon Type wins again! Now without Legendary Pok\u00e9mon!","4c25931b":"First Step: Define PATH e read the .csv file","488766cd":"Now let's check how many pok\u00e9mon of each type exists in our dataset.","e21da512":"Dragons wins again. Let's check without legendary Pok\u00e9mon!","f37c266d":"What about Attack now?","c793dfed":"Without Legendaries, as usual!","5ee2cf21":"And to count only Legendary Pok\u00e9mon...","b5ac80c9":"Dragons still win! Now let's see the Defense Stat.","affdbccb":"Without Legendary Pok\u00e9mon:","9af680a6":"Let's see what types are the strongest by the mean of it's Total stats!","ba9e2349":"Wow, we can see significant changes in the top 3! Dragons got from first to third place.\nLet's analyze Special Attack now.","8eb1ee57":"Now we see a significant change! We can clearly see that Legendary Pok\u00e9mon was heavily influencing on the Dragon Type HP Mean.\nLet's check it's Special Defense now!","6e10370f":"Steel still wins! What makes sense seeing how many Steel Type Legendaries are in this dataset.","a29c1003":"Let's see how many Pok\u00e9mon of each type exists in this dataset!","041fda2d":"Steel wins by far! Let's see if it's still this way without Legendary Pok\u00e9mon?"}}