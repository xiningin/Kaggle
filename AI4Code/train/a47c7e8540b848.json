{"cell_type":{"bd676d57":"code","4ce90702":"code","1eede12c":"code","83e0d874":"code","7016f6f4":"code","b7cae505":"code","c2b18d4a":"code","ea54e02b":"code","1355db21":"code","7e6ee69c":"code","0d9c0507":"code","c0a60966":"code","6d67c02d":"code","15b85ec6":"code","edc70145":"code","5bdff425":"code","5ec7cf45":"code","0b67f3a7":"code","714c76c7":"code","70542a4b":"code","c67d1ee2":"code","1476fd81":"code","3e3c6dac":"code","1d1543c8":"code","9093d52d":"code","33487281":"code","be17df35":"code","15bd93c6":"code","989bdaba":"code","58d96397":"code","35801db2":"code","4e386ea0":"code","07950767":"code","97dc1527":"code","ac2e683e":"code","cb208fd9":"code","a32d14f1":"code","c42d3d98":"code","fe4afd4e":"code","7d47debe":"code","d4ce8c0b":"code","20fbc768":"code","bfa27abe":"code","bd8703b6":"code","5aadd79e":"code","fb29230f":"code","a7fe7af0":"code","140cecda":"code","6331c429":"code","db99c72c":"code","090ae6a6":"code","6296565b":"code","201d7753":"markdown","e2abc583":"markdown","e3c4bc2d":"markdown","b251a3f0":"markdown","8be7ac63":"markdown","4e05df31":"markdown","bfe41af7":"markdown","0063b29c":"markdown","dcba8d52":"markdown","987e61a3":"markdown","05804302":"markdown","995b1f53":"markdown","bfd3d404":"markdown","4ad6bf17":"markdown","78baf4c3":"markdown","54fe3010":"markdown","2b749a52":"markdown","0743cf02":"markdown","94e08a0e":"markdown","84899fc2":"markdown","a9ac74d7":"markdown","34fd244c":"markdown","2b896494":"markdown","4bd7bf9d":"markdown","20747851":"markdown","6eba21eb":"markdown","8d22732c":"markdown","6ac9d492":"markdown","94f843d7":"markdown","2133530e":"markdown","4dda4a8d":"markdown","a0c9b329":"markdown","d0013bcf":"markdown","553cc59a":"markdown","51ba011a":"markdown","50d1d91e":"markdown","b55213b9":"markdown","ac470330":"markdown","99c924e6":"markdown","6b315fd0":"markdown","ad08cf70":"markdown","2ad45441":"markdown","7e8048ea":"markdown","cb8b57a7":"markdown","bcca5951":"markdown","d1d44ed1":"markdown","89c88d05":"markdown","74b18db1":"markdown","3c88b7c6":"markdown"},"source":{"bd676d57":"# Importing libraries\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nfrom matplotlib import pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_validate\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\nSEED = 42","4ce90702":"# Loading data\ndf = pd.read_csv(\"\/kaggle\/input\/diamonds\/diamonds.csv\")\ndf.head(8)","1eede12c":"# Getting some information about the data\ndf.info()","83e0d874":"if df.isnull().sum().any() == False:\n    print(\"there are no missing values\")\nelse:\n    print(\"there are something wrong here\")","7016f6f4":"# Dropping \"Unnamed: 0\" column\ndf = df.drop([\"Unnamed: 0\"], axis = 1)\n\n# Checking for duplicate rows\nprint(\"number of duplicate rows: \", df.duplicated().sum())","b7cae505":"# Dropping them\ndf = df.drop_duplicates().reset_index(drop = True)","c2b18d4a":"# Numerical data\ndf.describe().T","ea54e02b":"# Categorical data\ndf.describe(include = \"O\").T","1355db21":"format_dict = {\"carat\" : \"{:.2f}\", \"depth\" : \"{:.1f}\", \"table\" : \"{:.1f}\", \"x\" : \"{:.2f}\", \"y\" : \"{:.2f}\", \"z\" : \"{:.2f}\"}\ndf_zero = df.loc[(df[\"x\"] == 0) | (df[\"y\"] == 0) | (df[\"z\"] == 0)]\ndf_zero.style.apply(lambda x: [\"background: yellow\" if n == 0 else \"\" for n in x], axis = 1).format(format_dict)","7e6ee69c":"# Transforming them into NaN values\ndf.loc[df[\"x\"] == 0, \"x\"] = np.nan \ndf.loc[df[\"y\"] == 0, \"y\"] = np.nan \ndf.loc[df[\"z\"] == 0, \"z\"] = np.nan \n\n# Seeing the number of the new missing values\ndf[[\"x\", \"y\", \"z\"]].isnull().sum()","0d9c0507":"def get_corr(col):\n    return df.corr().unstack()[col].sort_values(ascending = False)    ","c0a60966":"print(\"x correlations\\n\\n{0}\\n\\n{3}\\n\\ny correlations\\n\\n{1}\\n\\n{3}\\n\\nz correlations\\n\\n{2}\".format(get_corr(\"x\"), get_corr(\"y\"), get_corr(\"z\"), 25*\"-\"))","6d67c02d":"def fill_nan_values(col):\n    carat = df.groupby([\"carat\"])[col].median()\n    index_list = list(df.loc[df[col].isnull() == True].sort_values(by = \"carat\", ascending = False).index)\n    for i in index_list:\n        carat_value = df.loc[i, \"carat\"]\n        new_value = carat[carat_value]\n        df.loc[i, col] = new_value\n        print(\"carat: {0} \/ median {1} value: {2}\".format(carat_value, col, new_value))\n    return df.iloc[index_list].style.applymap(lambda x: \"background-color: limegreen\", subset = col).format(format_dict)","15b85ec6":"# Fixing \"x\" column\nfill_nan_values(\"x\")","edc70145":"# Fixing \"y\" column\nfill_nan_values(\"y\")","5bdff425":"# Fixing \"z\" column\nfill_nan_values(\"z\")","5ec7cf45":"def highlight_outliers(outliers, col):\n    outliers_index = outliers.index\n    i = pd.IndexSlice[outliers_index, col]\n    return outliers.style.applymap(lambda x: \"background-color: red\", subset = i).format(format_dict)","0b67f3a7":"sns.set_style(\"whitegrid\")\nc = \"darkturquoise\"\n\nplt.figure(figsize = (12, 18))\nplt.subplot(3, 2, 1)\nplt.title(\"price X carat\")\nsns.regplot(data = df, x = \"price\", y = \"carat\", color = c, line_kws = {\"color\" : \"black\"})\nplt.subplot(3, 2, 2)\nplt.title(\"price X depth\")\nsns.regplot(data = df, x = \"price\", y = \"depth\", color = c, line_kws = {\"color\" : \"black\"})\nplt.subplot(3, 2, 3)\nplt.title(\"price X table\")\nsns.regplot(data = df, x = \"price\", y = \"table\", color = c, line_kws = {\"color\" : \"black\"})\nplt.subplot(3, 2, 4)\nplt.title(\"price X x\")\nsns.regplot(data = df, x = \"price\", y = \"x\", color = c, line_kws = {\"color\" : \"black\"})\nplt.subplot(3, 2, 5)\nplt.title(\"price X y\")\nsns.regplot(data = df, x = \"price\", y = \"y\", color = c, line_kws = {\"color\" : \"black\"})\nplt.subplot(3, 2, 6)\nplt.title(\"price X z\")\nsns.regplot(data = df, x = \"price\", y = \"z\", color = c, line_kws = {\"color\" : \"black\"})\nplt.show()","714c76c7":"df_outliers = df.loc[df[\"y\"] > 30].copy()\nhighlight_outliers(df_outliers, \"y\")","70542a4b":"df_outliers = df.loc[df[\"z\"] > 30].copy()\nhighlight_outliers(df_outliers, \"z\")","c67d1ee2":"# Transforming them into NaN values\ndf.loc[df[\"y\"] > 30, \"y\"] = np.nan\ndf.loc[df[\"z\"] > 30, \"z\"] = np.nan","1476fd81":"# Fixing \"y\" column\nfill_nan_values(\"y\")","3e3c6dac":"# Fixing \"z\" column\nfill_nan_values(\"z\")","1d1543c8":"df_outliers = df.loc[(df[\"depth\"] > 75) | (df[\"depth\"] < 45)].copy()\nhighlight_outliers(df_outliers, \"depth\")","9093d52d":"df_outliers = df.loc[(df[\"table\"] > 90) | (df[\"depth\"] < 45)].copy()\nhighlight_outliers(df_outliers, \"table\")","33487281":"df_outliers = df.loc[df[\"z\"] < 2].copy()\nhighlight_outliers(df_outliers, \"z\")","be17df35":"df.loc[df[\"carat\"] == df[\"z\"], [\"carat\", \"z\"]]","15bd93c6":"# Transforming them into NaN values\ndf.loc[df[\"z\"] < 2, \"z\"] = np.nan","989bdaba":"fill_nan_values(\"z\")","58d96397":"cut_palette = [\"darkturquoise\", \"lightskyblue\", \"paleturquoise\", \"lightcyan\", \"azure\"]\ncolor_palette = [\"cadetblue\", \"deepskyblue\", \"darkturquoise\", \"lightskyblue\", \"paleturquoise\", \"lightcyan\", \"azure\"]\nclarity_palette = [\"cadetblue\", \"deepskyblue\", \"darkturquoise\", \"lightskyblue\", \"paleturquoise\", \"lightcyan\", \"azure\", \"ghostwhite\"]\n\ndf[\"cut\"] = pd.Categorical(df[\"cut\"], categories = [\"Ideal\", \"Premium\", \"Very Good\", \"Good\", \"Fair\"], ordered = True)\ndf[\"color\"] = pd.Categorical(df[\"color\"], categories = [\"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\"], ordered = True)\ndf[\"clarity\"] = pd.Categorical(df[\"clarity\"], categories = [\"IF\", \"VVS1\", \"VVS2\", \"VS1\", \"VS2\", \"SI1\", \"SI2\", \"I1\"], ordered = True)","35801db2":"df_cut = df[\"cut\"].value_counts()\n\nplt.figure(figsize = (7,7))\nplt.pie(data = df_cut, x = df_cut.values, labels = df_cut.index, autopct = \"%.2f%%\", pctdistance = 0.8, colors = cut_palette )\ncircle = plt.Circle(xy = (0, 0), radius = 0.5, facecolor = 'white')\nplt.gca().add_artist(circle)\nplt.title(\"% of each Diamond Cut Quality\", size = 16)\nplt.show()","4e386ea0":"position = 0\nfor cut in df_cut:\n    print(\"{0} quality cuts: {1}\".format(df_cut.index[position], df_cut.values[position]))\n    position += 1","07950767":"plt.figure(figsize = (9, 6))\nsns.barplot(data = df, x = \"cut\", y = \"price\", color = c)\nplt.title(\"Relation between Cut and Price\", size = 16)\nplt.show()","97dc1527":"get_corr(\"price\")","ac2e683e":"df.groupby([\"cut\"])[\"carat\"].mean()","cb208fd9":"df_color = df[\"color\"].value_counts()\n\nplt.figure(figsize = (7,7))\nplt.pie(data = df_color, x = df_color.values, labels = df_color.index, autopct = \"%.2f%%\", pctdistance = 0.8, startangle = 40, colors = color_palette)\ncircle = plt.Circle(xy = (0, 0), radius = 0.5, facecolor = 'white')\nplt.gca().add_artist(circle)\nplt.title(\"% of each Diamond Color\", size = 16)\nplt.show()","a32d14f1":"position = 0\nfor color in df_color:\n    print(\"{0} color diamonds: {1}\".format(df_color.index[position], df_color.values[position]))\n    position += 1","c42d3d98":"plt.figure(figsize = (9, 6))\nsns.barplot(data = df, x = \"color\", y = \"price\", color = c)\nplt.title(\"Relation between Diamond Color and Price\", size = 16)\nplt.show()","fe4afd4e":"df.groupby([\"color\"])[\"carat\"].mean()","7d47debe":"df_clarity = df[\"clarity\"].value_counts()\n\nplt.figure(figsize = (7,7))\nplt.pie(data = df_clarity, x = df_clarity.values, labels = df_clarity.index, autopct = \"%.2f%%\", pctdistance = 0.8, colors = clarity_palette)\ncircle = plt.Circle(xy = (0, 0), radius = 0.5, facecolor = 'white')\nplt.gca().add_artist(circle)\nplt.title(\"% of each Diamond Clarity\", size = 16)\nplt.show()","d4ce8c0b":"position = 0\nfor color in df_clarity:\n    print(\"{0} clarity diamonds: {1}\".format(df_clarity.index[position], df_clarity.values[position]))\n    position += 1","20fbc768":"plt.figure(figsize = (9, 6))\nsns.barplot(data = df, x = \"clarity\", y = \"price\", color = c)\nplt.title(\"Relation between Diamond Clarity and Price\", size = 16)\nplt.show()","bfa27abe":"df.groupby([\"clarity\"])[\"carat\"].mean()","bd8703b6":"# Splitting the data into features and target\nX = df.drop([\"price\"], axis = 1).copy()\ny = df[\"price\"].copy()","5aadd79e":"# Dummy variables\nX_dummies = X.copy()\nX_dummies = pd.get_dummies(data = X_dummies, columns = [\"clarity\", \"color\", \"cut\"], prefix = [\"clarity\", \"color\", \"cut\"], drop_first = True).copy()\n\n# Scaling the data\nss = StandardScaler()\nX_dummies = ss.fit_transform(X_dummies)\n\n# Label encoder\nX_encoder = X.copy()\nX_encoder[\"cut\"] = X_encoder[\"cut\"].replace({\"Ideal\": 1, \"Premium\": 2, \"Very Good\": 3, \"Good\": 4, \"Fair\": 5}).copy()\nX_encoder[\"color\"] = X_encoder[\"color\"].replace({\"D\": 7, \"E\": 6, \"F\": 5, \"G\": 4, \"H\": 3, \"I\": 2, \"J\": 1}).copy()\nX_encoder[\"clarity\"] = X_encoder[\"clarity\"].replace({\"IF\" : 8, \"VVS1\" : 7, \"VVS2\" : 6, \"VS1\" : 5, \"VS2\" : 4, \"SI1\" : 3, \"SI2\" : 2, \"I1\" : 1}).copy()","fb29230f":"# K-folds for cross-validation\nkf = KFold(n_splits = 10, random_state = SEED, shuffle = True)\n\n# Evaluating the cross-validation\nscoring = [\"r2\", \"neg_mean_absolute_error\", \"neg_mean_squared_error\"]","a7fe7af0":"model_scores = {\"train\" : [],\n                \"test\" : [],\n                \"mae\" : [],\n                \"mse\" : [],\n                \"rmse\" : []}\n\ndef get_results(clf, features):\n    scores = cross_validate(clf, features, y, cv = kf, scoring = scoring, return_train_score = True)\n    train_score = scores[\"train_r2\"].mean()\n    model_scores[\"train\"].append(train_score)\n    test_score = scores[\"test_r2\"].mean()\n    model_scores[\"test\"].append(test_score)\n    mae = np.absolute(scores[\"test_neg_mean_absolute_error\"]).mean()\n    model_scores[\"mae\"].append(mae)\n    mse = np.absolute(scores[\"test_neg_mean_squared_error\"]).mean()\n    model_scores[\"mse\"].append(mse)\n    rmse = np.sqrt(mse)\n    model_scores[\"rmse\"].append(rmse)\n    print(\"train score: {0:.4f}\\nR2 score: {1:.4f}\\nMAE: {2:.2f}\\nMSE: {3:.2f}\\nRMSE: {4:.2f}\".format(train_score, test_score, mae, mse, rmse))","140cecda":"lr = LinearRegression()\nget_results(lr, X_dummies)","6331c429":"dtr = DecisionTreeRegressor(max_depth = 8, random_state = SEED)\nget_results(dtr, X_encoder)","db99c72c":"rfr = RandomForestRegressor(max_depth = 8, n_estimators = 40, random_state = SEED)\nget_results(rfr, X_encoder)","090ae6a6":"xgbr = XGBRegressor(learning_rate = 0.1, n_estimators = 200, random_state = SEED)\nget_results(xgbr, X_encoder)","6296565b":"print(\"train score\\n\")\nprint(\"Linear Regression: {0:.4f}\\nDecision Tree: {1:.4f}\\nRandom Forest: {2:.4f}\\nXGBoost: {3:.4f}\".format(model_scores[\"train\"][0],model_scores[\"train\"][1], model_scores[\"train\"][2], model_scores[\"train\"][3]))\nprint(\"\\nR2 score\\n\")\nprint(\"Linear Regression: {0:.4f}\\nDecision Tree: {1:.4f}\\nRandom Forest: {2:.4f}\\nXGBoost: {3:.4f}\".format(model_scores[\"test\"][0],model_scores[\"test\"][1], model_scores[\"test\"][2], model_scores[\"test\"][3]))\nprint(\"\\nMAE\\n\")\nprint(\"Linear Regression: {0:.2f}\\nDecision Tree: {1:.2f}\\nRandom Forest: {2:.2f}\\nXGBoost: {3:.2f}\".format(model_scores[\"mae\"][0],model_scores[\"mae\"][1], model_scores[\"mae\"][2], model_scores[\"mae\"][3]))\nprint(\"\\nMSE\\n\")\nprint(\"Linear Regression: {0:.2f}\\nDecision Tree: {1:.2f}\\nRandom Forest: {2:.2f}\\nXGBoost: {3:.2f}\".format(model_scores[\"mse\"][0],model_scores[\"mse\"][1], model_scores[\"mse\"][2], model_scores[\"mse\"][3]))\nprint(\"\\nRMSE\\n\")\nprint(\"Linear Regression: {0:.2f}\\nDecision Tree: {1:.2f}\\nRandom Forest: {2:.2f}\\nXGBoost: {3:.2f}\".format(model_scores[\"rmse\"][0],model_scores[\"rmse\"][1], model_scores[\"rmse\"][2], model_scores[\"rmse\"][3]))","201d7753":"![image.png](attachment:image.png)","e2abc583":"Some algorithms answers better with dummie variables, others with correctly ordered label encoder, so let's create two different ones.","e3c4bc2d":"![image.png](attachment:image.png)","b251a3f0":"![image.png](attachment:image.png)","8be7ac63":"Now, we have three columns with missing values. Let's see the strongest correlations for each one of them.","4e05df31":"And again...","bfe41af7":"This can not just be a coincidence, as only this three has this equal values (**carat** = **z**), so let's fix them, repeating the process.","0063b29c":"# <font size=\"4\">Data Preparation<\/font>","dcba8d52":"# <font size=\"4\">Data Describe<\/font>","987e61a3":"# <font size=\"4\">Missing Values<\/font>","05804302":"By looking at this graphs, we can see three values that are really far from others (notice the thickness difference between the last two graphs and the others). Let's take a look at them.","995b1f53":"And the reason is the same.","bfd3d404":"This values are true outliers, let's treat them as missing values and do the same thing we did before.","4ad6bf17":"Here it is, that is why the mean price of ideal cut diamonds is the lowest one.","78baf4c3":"Now that we are free of this true outliers, let's analyze the possible outliers.","54fe3010":"As we can see, there are a lot more high quality cut diamonds. Now let's see how this affects the price.","2b749a52":"# <font size=\"4\">Duplicate Rows<\/font>","0743cf02":"Remembering the order: IF > VVS1 > VVS2 > VS1 > VS2 > SI1 > SI2 > I1","94e08a0e":"![image.png](attachment:image.png)","84899fc2":"... and it is the carat.\n\nSo, if the carat is the most important thing, when we are looking for the price... Than, diamonds with ideal cuts, should have lower carat value.","a9ac74d7":"I put the values in descending order, so we can better visualize this correlation.","34fd244c":"![image.png](attachment:image.png)","2b896494":"Well... this was unexpected, why the mean price of diamonds with ideal cuts are lower than all other diamonds with less quality cut?\n\nLet's look which feature most impact on price.","4bd7bf9d":"* <font size=\"3\">price X y<\/font>","20747851":"* **carat** - Carat weight of the diamond.\n* **cut** - Describes the cut quality of the diamond (from the best to worst: Ideal, Premium, Very Good, Good and Fair).\n* **color** - Color of the diamond (from the best to worst: D, E, F, G, H, I and J).\n* **clarity** - A measurement of how clear the diamond is (from the best to worst: IF, VVS1, VVS2, VS1, VS2, SI1, SI2 and I1).\n* **depth** - The height of a diamond, measured from the culet to the table, divided by the average girdle diameter (%).\n* **table** - The width of a diamond table expressed as a percentage of the average diameter (%).\n* **x** - Diamond length (mm).\n* **y** - Diamond width (mm).\n* **z** - Diamond depth (mm).\n* **price** - Diamond price.","6eba21eb":"* **x** strongest correlation is with **carat**\n* **y** strongest correlation is with **x**\n* **z** strongest correlation is with **x**\n\nSince **carat** has no missing values and has a strong correlation with **x**, **y** and **z**, let's assume that the strongest correlation of all dimensions is with **carat**, because in some cases more than one dimension value is misising at the same row and we are going to use the median of this correlation to fill them.","8d22732c":"There are a lot of methods to find outlier values, but here we are going to use the simplest one: manually visualizing them. To this, we need to plot graphs showing the relation between all numerical features and the target (price).\n","6ac9d492":"![](https:\/\/3.bp.blogspot.com\/-bwI-Pr1rNVg\/WHoSXAJN_XI\/AAAAAAAAYrQ\/Z3VV1nvjrqATUy6WtGqJ-DgIRe0UsiOTQCLcB\/s1600\/Gifs%2Banimados%2BDiamante%2B1.gif)","94f843d7":"Well, even if this values are considerably distants from others they are not absurd values (e.g. 550%). Let's leave them as they are.","2133530e":"Diamonds... desired and expensive, diamonds are one of nature's most beautiful creations. It is the hardest mineral on the planet, no other mineral or substance can scratch it, on the other hand, it is very fragile, and it breaks easily.\n\nDid you know that about 250 tons of gravel are needed to extract only one carat of diamond? And that 80% of the diamonds mined are used for industrial purposes?\n\n\nReally cool facts, here in this notebook i am going to predict diamond prices using some regression algorithms, but before that, an exploratory data analysis will be done.","4dda4a8d":"* <font size=\"3\">price X z<\/font>","a0c9b329":"![image.png](attachment:image.png)","d0013bcf":"Note that all values are the mean of all cross-validation runs.","553cc59a":"And the reason is the same as the cut.","51ba011a":"* <font size=\"3\">price X table<\/font>","50d1d91e":"Remembering the order: Ideal > Premium > Very Good > Good > Fair\n","b55213b9":"![image.png](attachment:image.png)","ac470330":"* <font size=\"3\">price X depth<\/font>","99c924e6":"After use <code>df.describe().T<\/code>, we could see that the minimun value of **x**, **y** and **z** are equal to zero. Let's take a look at them.","6b315fd0":"* <font size=\"3\">price X z<\/font>","ad08cf70":"Same thing as before.","2ad45441":"For some reason this **z** values are equal to the **carat**.","7e8048ea":"Let's check for duplicate rows, but first we need to delete the \"Unnamed: 0\" column, since it is useless for us and has a diffent value for each row, in other words, if we do not drop this column, the number of duplicate lines will always be zero.","cb8b57a7":"Remembering the order: D > E > F > G > H > I > J","bcca5951":"As we can see from <code>df.info()<\/code>, there are no missing values.","d1d44ed1":"We know that this values must be greater than zero, but for some reason they are not. So let's treat them as missing values.","89c88d05":"# <font size=\"4\">Data Visualization<\/font>","74b18db1":"Again, the mean price of diamonds with better colors are lower than all other diamonds with worst colors.","3c88b7c6":"# <font size=\"4\">Outliers<\/font>"}}