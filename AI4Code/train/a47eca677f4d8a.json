{"cell_type":{"68fd45c3":"code","5e232478":"code","ec540b4e":"code","fbe61be3":"code","3d4dddff":"code","a2cdd65f":"code","1774286d":"code","0e74b014":"code","9b5bc3fb":"code","66596275":"code","bb5a4230":"code","803a688c":"code","b9470327":"code","d599c3ef":"code","cd917f72":"code","0e1742ed":"code","65fd3ae7":"code","b6a3857e":"code","c02971b5":"code","d7a59d1f":"code","77f1e658":"code","8ee4e49c":"code","28a73e1b":"code","ac330cc1":"code","d2e99dbf":"code","b023b520":"code","8a2e1342":"code","f3a6ddaa":"code","909bcd74":"code","f5b68db0":"code","98ba9e64":"markdown","c320b6a4":"markdown","cc0dceb0":"markdown","36a4b473":"markdown","6c29f6fc":"markdown","66d3f4e6":"markdown","c183df80":"markdown","b099317c":"markdown","d8368fa4":"markdown","c9b95399":"markdown","b1525f32":"markdown","2c5f1cce":"markdown","3dfa063e":"markdown","fe043666":"markdown","f95d88a1":"markdown","c21c1f2f":"markdown","0b789cbc":"markdown","c0bd4430":"markdown","d0189f91":"markdown","5eb31c1a":"markdown","aa13ff3f":"markdown","b81129db":"markdown","c48067ac":"markdown"},"source":{"68fd45c3":"# installlation required\n!pip install Lifetimes\n!pip install openpyxl # forfor excel file\n\n# libraries\nfrom sqlalchemy import create_engine\nimport datetime as dt\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom lifetimes import BetaGeoFitter\nfrom lifetimes import GammaGammaFitter\nfrom lifetimes.plotting import plot_period_transactions\nfrom sklearn.preprocessing import MinMaxScaler\nimport squarify  # treemap \nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5e232478":"df_2010_2011 = pd.read_excel(\"..\/input\/online-retail-ii-data-set-from-ml-repository\/online_retail_II.xlsx\", sheet_name = \"Year 2010-2011\")\n\n#online_retail = pd.read_csv(\"\/kaggle\/input\/online-retail-ii-data-set-from-ml-repository\/Year 2010-2011.csv\", sep=\";\")\ndf = df_2010_2011.copy()\ndf.head()","ec540b4e":"# Analizimizde sat\u0131n almalarla ilgileniyoruz.Bu nedenle iade i\u015flemleri veriden \u00e7\u0131kard\u0131k.\n\ndf = df[~df[\"Invoice\"].str.contains(\"C\", na=False)]\ndf.shape","fbe61be3":"def check_df(dataframe):\n    print(\"################ Shape ####################\")\n    print(dataframe.shape)\n    print(\"############### Columns ###################\")\n    print(dataframe.columns)\n    print(\"############### Types #####################\")\n    print(dataframe.dtypes)\n    print(\"############### Head ######################\")\n    print(dataframe.head())\n    print(\"############### Tail ######################\")\n    print(dataframe.tail())\n    print(\"############### Describe ###################\")\n    print(dataframe.describe().T)\n\ncheck_df(df)","3d4dddff":"df.isnull().sum()","a2cdd65f":"df.dropna(inplace=True)\ndf.isnull().sum()","1774286d":"def outlier_thresholds(dataframe, variable):\n    quartile1 = dataframe[variable].quantile(0.01)\n    quartile3 = dataframe[variable].quantile(0.99)\n    interquantile_range = quartile3 - quartile1\n    up_limit = quartile3 + 1.5 * interquantile_range\n    low_limit = quartile1 - 1.5 * interquantile_range\n    return low_limit, up_limit\n\ndef replace_with_thresholds(dataframe, variable):\n    low_limit, up_limit = outlier_thresholds(dataframe, variable)\n    dataframe.loc[(dataframe[variable] < low_limit), variable] = low_limit\n    dataframe.loc[(dataframe[variable] > up_limit), variable] = up_limit\n\nreplace_with_thresholds(df, \"Quantity\")\nreplace_with_thresholds(df, \"Price\")","0e74b014":"cat_cols = [col for col in df.columns if df[col].dtypes ==\"O\"]\ncat_but_car = [col for col in df.columns if df[col].nunique() > 100 and df[col].dtypes == \"O\"]\ncat_cols = [col for col in cat_cols if col not in cat_but_car]\ncat_cols","9b5bc3fb":"def cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n    print(\"##########################################\")\n    if plot:\n        fig_dims = (15, 5)\n        fig, ax = plt.subplots(figsize=fig_dims)\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.xticks(rotation = 45, ha = 'right')\n        plt.show()\n\ncat_summary(df, \"Country\", plot=True)","66596275":"num_cols = [col for col in df.columns if df[col].dtypes != 'O' and col not in \"Customer ID\"]\nnum_cols","bb5a4230":"def num_summary(dataframe, numerical_col, plot=False):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        dataframe[numerical_col].hist(bins=20)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()\n\nfor col in num_cols:\n    num_summary(df, col, plot=True)","803a688c":"# unique product\ndf[\"StockCode\"].nunique()","b9470327":"# How many sales for each product?\ndf_product = df.groupby(\"Description\").agg({\"Quantity\":\"count\"})\ndf_product.reset_index(inplace=True)\ndf_product","d599c3ef":"# Top 10 Products\ntop_pr= df_product.sort_values(by=\"Quantity\",ascending=False).head(10)\n\nsns.barplot(x=\"Description\", y=\"Quantity\", data=top_pr)\nplt.xticks(rotation=90)\nplt.show()","cd917f72":"# total price per invoice\ndf[\"TotalPrice\"] = df[\"Price\"] * df[\"Quantity\"]","0e1742ed":"# Determining the analysis date for the recency\ndf[\"InvoiceDate\"] = pd.to_datetime(df[\"InvoiceDate\"])\ndf[\"InvoiceDate\"].max()\ntoday_date = dt.datetime(2011, 12, 11)","65fd3ae7":"cltv_df = df.groupby('Customer ID').agg({'InvoiceDate': [lambda date: (date.max() - date.min()).days,\n                                                         lambda date: (today_date - date.min()).days],\n                                         'Invoice': lambda num: num.nunique(),\n                                         'TotalPrice': lambda TotalPrice: TotalPrice.sum()})\n\n\ncltv_df.columns = cltv_df.columns.droplevel(0)\ncltv_df.columns = ['recency', 'T', 'frequency', 'monetary']\ncltv_df.head()","b6a3857e":"# monetary de\u011ferini toplam totalPrice olarak hesaplam\u0131\u015ft\u0131k.\n# bu a\u015famada moneary de\u011ferini sat\u0131n alma ba\u015f\u0131na ortalama kazan\u00e7 olarak ifade edece\u011fiz\ncltv_df[\"monetary\"] = cltv_df[\"monetary\"] \/ cltv_df[\"frequency\"]\n\n# monetary nin s\u0131f\u0131rdan b\u00fcy\u00fck olanlar\u0131n\u0131n se\u00e7elimesi\ncltv_df = cltv_df[cltv_df[\"monetary\"] > 0]\n\n# BGNBD i\u00e7in recency ve T'nin haftal\u0131k cinsten ifade edilmesi\ncltv_df[\"recency\"] = cltv_df[\"recency\"] \/ 7\ncltv_df[\"T\"] = cltv_df[\"T\"] \/ 7\n\n# frequency nin 1 den b\u00fcy\u00fck olanlar\u0131n\u0131n se\u00e7ilmesi\ncltv_df = cltv_df[(cltv_df['frequency'] > 1)]\ncltv_df.head()","c02971b5":"bgf = BetaGeoFitter(penalizer_coef=0.001)\nbgf.fit(cltv_df['frequency'],\n        cltv_df['recency'],\n        cltv_df['T'])","d7a59d1f":"# 1 week expected purchase (transaction)\ncltv_df[\"expected_purc_1_week\"] = bgf.predict(1,\n                                               cltv_df['frequency'],\n                                               cltv_df['recency'],\n                                               cltv_df['T'])\n\ncltv_df.sort_values(\"expected_purc_1_week\", ascending=False).head(10)","77f1e658":"# 1 month expected purchase\ncltv_df[\"expected_purc_1_month\"] = bgf.predict(4,\n                                               cltv_df['frequency'],\n                                               cltv_df['recency'],\n                                               cltv_df['T'])\n\ncltv_df.sort_values(\"expected_purc_1_month\", ascending=False).head(10)","8ee4e49c":"ggf = GammaGammaFitter(penalizer_coef=0.01)\nggf.fit(cltv_df['frequency'], cltv_df['monetary'])","28a73e1b":"cltv_df[\"expected_average_profit\"] = ggf.conditional_expected_average_profit(cltv_df['frequency'],\n                                                                             cltv_df['monetary'])\n\ncltv_df.sort_values(\"expected_average_profit\", ascending=False).head(20)","ac330cc1":"cltv = ggf.customer_lifetime_value(bgf,\n                                   cltv_df['frequency'],\n                                   cltv_df['recency'],\n                                   cltv_df['T'],\n                                   cltv_df['monetary'],\n                                   time=6,  # 6 ayl\u0131k\n                                   freq=\"W\",  # T'nin frekans bilgisi.\n                                   discount_rate=0.01)","d2e99dbf":"# Reset index\ncltv = cltv.reset_index()\n# Merging the main table and the forecast values table\ncltv_final = cltv_df.merge(cltv, on=\"Customer ID\", how=\"left\")\n# sorting\ncltv_final.sort_values(by=\"clv\", ascending=False).head(10)","b023b520":"# 1 Month CLTV:\ncltv_1 = ggf.customer_lifetime_value(bgf,\n                                   cltv_df['frequency'],\n                                   cltv_df['recency'],\n                                   cltv_df['T'],\n                                   cltv_df['monetary'],\n                                   time=1,  # 1 month\n                                   freq=\"W\",  # frequency of T\n                                   discount_rate=0.01)\n\ncltv_1.head()\ncltv_1= cltv_1.reset_index()\ncltv_1 = cltv_df.merge(cltv_1, on=\"Customer ID\", how=\"left\")\ncltv_1.sort_values(by=\"clv\", ascending=False).head(10)","8a2e1342":"# 12 Month CLTV Forecast:\n\ncltv_12 = ggf.customer_lifetime_value(bgf,\n                                   cltv_df['frequency'],\n                                   cltv_df['recency'],\n                                   cltv_df['T'],\n                                   cltv_df['monetary'],\n                                   time=12,  # 1 ayl\u0131k\n                                   freq=\"W\",  # T'nin frekans bilgisi\n                                   discount_rate=0.01)\n\ncltv_12.head()\ncltv_12 = cltv_12.reset_index()\ncltv_12 = cltv_df.merge(cltv_12, on=\"Customer ID\", how=\"left\")\ncltv_12.sort_values(by=\"clv\", ascending=False).head(10)","f3a6ddaa":"# Normalization 0-1 Range For CLV Values\nscaler = MinMaxScaler(feature_range=(0, 1))\nscaler.fit(cltv_final[[\"clv\"]])\ncltv_final[\"scaled_clv\"] = scaler.transform(cltv_final[[\"clv\"]])\n\ncltv_final.sort_values(by=\"scaled_clv\", ascending=False).head()","909bcd74":"# Segmentation of Customers\ncltv_final[\"segment\"] = pd.qcut(cltv_final[\"scaled_clv\"], 4, labels=[\"D\", \"C\", \"B\", \"A\"])\ncltv_final.head()\n\ncltv_final.head()","f5b68db0":"# Examination of Segments\ncltv_final.groupby(\"segment\").agg({\"count\", \"mean\", \"sum\"})","98ba9e64":"<a id = \"7\"><\/a><br>\n## Outlier Observations","c320b6a4":"### Formula\n$E(Y(t)|X = x, t_x, T, r, \\alpha, a, b)=\\frac{a + b + x - 1}{a-1} X \\frac{ \\left[1 - \\left(\\frac{\\alpha + T}{\\alpha + T + t} \\right)^{r+x} 2F_1(r + x, b + x; a + b + x - 1; \\frac{t}{\\alpha + T + t} \\right]}\n{1 + \\partial_{(x>0)} \\frac{\\alpha}{b + x -1} \n\\left( \\frac{\\alpha + T}{alpha + t_x}   \\right)^{r+x}    } $","cc0dceb0":"<a id = \"6\"><\/a><br>\n## Data Preprocessing","36a4b473":"<a id = \"17\"><\/a><br>\n# References\n* https:\/\/github.com\/mvahit\n* https:\/\/www.veribilimiokulu.com\/\n* https:\/\/www.linkedin.com\/in\/vahitkeskin\/\n* https:\/\/www.kaggle.com\/haticeebraralc\/crm-analytics\n* https:\/\/github.com\/hebraralici\n* https:\/\/en.wikipedia.org\/wiki\/Customer_lifetime_value","6c29f6fc":"<a id = \"13\"><\/a><br>\n# Gamma Gamma Model\nIt is used to estimate how much profit a customer can generate on average per transaction.\n\n****What will the gamma gamma model do? ****\n\nIt will output the Expected Average Profit. This means; The Expected Average Profit distribution will be modeled over the whole audience, and the Gamma Gamma Submodel will be conditionally giving us the Expected Average Profit for a person, taking into account the distribution of the whole audience, according to the characteristics of the person himself.","66d3f4e6":"<a id = \"1\"><\/a><br>\n# Business Problem\n","c183df80":"<a id = \"16\"><\/a><br>\n# Segmentation on CLTV Forecasts","b099317c":"### Formula\n$E(M|p, q, \\gamma, m_x, x) = \n\\frac{(\\gamma + m_xx)p}{px + q -1} = \n\\left( \\frac {q-1}{px + q - 1} \\right) \n\\frac{\\gamma p}{q - 1} + \\left( \\frac{px}{px + q -1} \\right)\nm_x$","d8368fa4":"* E refers to the expected value\n* x refers to frequency for each customer\n* mx refers to the monetary for each customer\n* M refers to the expected value of transactions (expected average profit)\n* p,q,\u03b3 comes from the gamma distribution","c9b95399":"An e-commerce company wants to segment its customers and determine marketing strategies according to these segments. For example, it is desired to organize different campaigns for new customers and different campaigns in order to retain customers that are very profitable for the company.","b1525f32":"# Customer Lifetime Value | What is The Lifetime Value of Your Customers?","2c5f1cce":"<a id = \"4\"><\/a><br>\n# LIBRARIES","3dfa063e":"<a id = \"8\"><\/a><br>\n# Exploratory Data Analysis","fe043666":"* E refers to the expected value\n* | refers to that this probability is conditional (conditional expected number of transactions)\n* x refers to frequency for each customer who purchased at least 2 times.\n* tx refers to recency for each customer. In this case, we will assume the recency will be based on weeks. The time from the last purchasing date to the first purchasing date (weeks).\n* T refers to the time from today\u2019s date to the last purchasing date (weeks).\n* r,\u03b1 comes from the gamma distribution (buy process). Transaction rate of the mass.\n* a,b comes from the beta distribution (till you die process). The dropout rate of the mass.\n* Y(t) refers to the expected number of transactions for each customer.","f95d88a1":"<a id = \"12\"><\/a><br>\n# BG-NBD Model\n\nBG \/ NBD (Beta Geometric \/ Negative Binominal Distribution) = Expected Number of Transaction\n\n### Buy Till You Die\n\nThe BG\/NBD Model probabilistically models two processes for the Expected Number of Transaction.\n> Transaction Process (Buy) + Dropout Process (Till You Die)\n\n#### Transaction Process (Buy)\n* As long as it is alive, the number of transactions to be performed by a client in a given time period is poisson distributed with the transaction rate parameter.\n* As long as a customer is alive, they will continue to make random purchases around their transaction rate.\n* Transaction rates vary according to each customer. They are **gamma dispersed** for the entire audience (r, a).\n\n\nSo the buy process of the BG\/NBD model indicates; I am modeling the purchasing activity of the whole audience with the gamma distribution. \n\n#### Dropout Process (Till You Die)\n* Each customer has a dropout rate (dropout probability) with probability p.\n* A customer drops with a certain probability after making a purchase. This is not a full churn, it may return after a certain time.\n* Dropout rates vary for each client and **beta is distributed** for the entire audience (a, b).","c21c1f2f":"<a id = \"9\"><\/a><br>\n## Categorical Variables","0b789cbc":"<a id = \"5\"><\/a><br>\n# Load and Check Data\nWe've copied the path from the output above. ","c0bd4430":"<a id = \"10\"><\/a><br>\n## Numerical Variables","d0189f91":"<a id = \"11\"><\/a><br>\n## Preparation-Data Structure\n* **recency**: the difference between the customer's last purchase and his first purchase\n* **T**: the age of the client in the company\n* **frequency**: total number of repeat purchases\n* **monetary_value**: average earnings per purchase","5eb31c1a":"<a id = \"14\"><\/a><br>\n## BG-NBD and GG Model For Prediction","aa13ff3f":"# Introduction\nCustomer lifetime value (CLV), a term sometimes used interchangeably with customer lifetime value, is the prediction of a company's net profit contributed to its overall future relationship with a customer. The model can be simple or sophisticated, depending on how complex the predictive analytics techniques are.\n\nLifetime value is a critical metric because it represents the maximum amount that customers may be expected to spend in order to acquire new ones. As a result, it's crucial in determining the payback of marketing expenses used in marketing mix modeling.\n\n### Definition of CLTV\n> *The present value of the future cash flows attributed to the customer during his\/her entire relationship with the company.!*\n\n\nThis account represents a single time period. It represents the time when the analysis was done. Let me give such a projection that we can evaluate the issue with 3-month and 6-month projections. \n\nHow can I make my inference? We will realize lifetime value with medium and long-term projections for individuals by including the specific pattern of the whole population, by extracting the conditional probability distribution, and generalizing them in terms of the characteristics of a particular individual.\n\n### Formula\nProbabilistic lifetime value estimation with time projection\n\n> CLTV =( Customer Value \/ Churn Rate) * Profit Margin\n\n> Customer Value = Purchase Frequency * Average Order Value\n\n> CLTV = Expected Number of Transaction * Expected Average Profit\n\nAbove, purchase frequency and number of transaction mean the same thing. Likewise, Average Order Value and Average Profit mean the same thing. It differs with the Expected part that happens to them. \n\n**CAUTION**: It will add a probabilistic distribution. Expected statement refers to this part. Expected number of purchases, expected profitability.\n\n* BG \/ NBD = Expected Transaction\n* Gamma Gamma = Expected Profit\n\n## So How Do We Do That?\nWe will add statistics and probability pattern to the above formula.\nThere will be BG \/ NBD and Gamma Gamma models that will make this happen to us. These models will do such a thing that they will model the purchasing behavior of all customers of this company, after modeling the purchasing behavior of all customers, they will replace the individual's personal characteristics in this model and reduce the expected number of sales to the person from the general audience pattern.\n\nBG NBD and Gamma Gamma models are statistical models, not machine learning models. In fact, these models have the expression \"Conditional\" at the beginning.\n\n<font color = 'blue'>\nContent: \n \n1. [Business Problem](#1)\n    * [Dataset Story](#2)\n    * [Variables](#3)\n1. [Libraries](#4)\n1. [Load and Check Data](#5)\n    * [Data Preprocessing](#6)\n    * [Outlier Observations](#7)\n1. [Exploratory Data Analysis](#8)\n    * [Categorical Variables](#9)\n    * [Numerical Variables](#10)\n1. [Preparation Data Structure](#11)\n1. [BG - NBD Model](#12)\n1. [Gamma Gamma Model](#13)\n1. [BG - NBD and GG Model For Prediction](#15)\n1. [Segmentation on CLTV Forecasts](#16)\n1. [References](#17)\n    \n    ","b81129db":"<a id = \"3\"><\/a><br>\n## Variables\u00b6\n* **InvoiceNo**: Invoice number. The unique number of each transaction, namely the invoice. Aborted operation if it starts with C.\n* **StockCode**: Product code. Unique number for each product.\n* **Description**: Product name\n* **Quantity**: Number of products. It expresses how many of the products on the invoices have been sold.\n* **InvoiceDate**: Invoice date and time.\n* **UnitPrice**: Product price (in GBP)\n* **CustomerID**: Unique customer number\n* **Country**: The country where the customer lives.","c48067ac":"<a id = \"2\"><\/a><br>\n## Dataset Story\n* The dataset includes sales between 01\/12\/2009 - 09\/12\/2011.\n* In this project, the years 2010-2011 will be examined.\n* The product catalog of this company includes souvenirs.\n* The vast majority of the company's customers are corporate customers."}}