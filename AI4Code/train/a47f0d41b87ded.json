{"cell_type":{"ac1ca94d":"code","9f2ccda0":"code","2ce50b35":"code","f9f361a2":"code","0ad3c7c3":"code","444b1dfd":"code","0382077f":"code","df12c63d":"code","ad9790b8":"code","8ed96c41":"code","6861e0ba":"code","41b9962a":"code","db1cd9c1":"code","6389531c":"code","d996b6b1":"code","6c0a137e":"code","f8d89d63":"code","cdcb730a":"code","64c8fb03":"markdown","37f6aa72":"markdown","85071803":"markdown","9046c9c1":"markdown","76a6fae6":"markdown","fa8f0732":"markdown","9e3bcb93":"markdown","182d0e95":"markdown","0f55c549":"markdown","5637b4e8":"markdown"},"source":{"ac1ca94d":"# importing recquired packages\nimport pandas as pd\nimport numpy as np","9f2ccda0":"df=pd.read_csv('\/kaggle\/input\/microsoft-stock-time-series-analysis\/Microsoft_Stock.csv')\ndf.head()","2ce50b35":"# printing basic information about the dataset\nprint(df.info())\nprint(df.describe())","f9f361a2":"# plotting the graph\ndf.plot(x='Date',y='Close',figsize=(16,7))","0ad3c7c3":"from statsmodels.base.transform import BoxCox\nbc=BoxCox()","444b1dfd":"df['Close'], lmbda=bc.transform_boxcox(df['Close'])","0382077f":"# We need to change our column names as given below as that is how FbProphet recognizes the variables.\ndata=df[[\"Date\",\"Close\"]]\ndata.columns=[\"ds\",\"y\"]","df12c63d":"model_params={\n    \"daily_seasonality\":False,\n    \"weekly_seasonality\": False,\n    \"yearly_seasonality\": True,\n    \"seasonality_mode\": \"multiplicative\",\n    \"growth\": \"logistic\"\n}","ad9790b8":"# importing fbprophet\nfrom fbprophet import Prophet\nmodel=Prophet(**model_params)\n\ndata[\"cap\"]=data['y'].max() + data['y'].std()*0.05\n\nmodel.fit(data)\nfuture=model.make_future_dataframe(periods=365)\nfuture[\"cap\"]=data[\"cap\"].max()\nforecast=model.predict(future)","8ed96c41":"model.plot_components(forecast)\nmodel.plot(forecast)","6861e0ba":"model=Prophet(**model_params)\n\nmodel.add_seasonality(name=\"monthly\",period=30,fourier_order=10)\nmodel.add_seasonality(name=\"quaterly\",period=92.95,fourier_order=10)\nmodel.add_country_holidays(\"US\")\n\nmodel.fit(data)\n\nfuture=model.make_future_dataframe(periods=365)\nfuture[\"cap\"]=data[\"cap\"].max()\nforecast=model.predict(future)","41b9962a":"model.plot_components(forecast);\nmodel.plot(forecast);","db1cd9c1":"import itertools\nimport numpy as np\nfrom fbprophet.diagnostics import cross_validation,performance_metrics\n\nparam_grid={\n    \"daily_seasonality\":[False],\n    \"weekly_seasonality\": [False],\n    \"yearly_seasonality\": [True],\n    \"growth\": [\"logistic\"],\n    'changepoint_prior_scale': [0.001, 0.01, 0.1, 0.5],\n    'seasonality_prior_scale': [0.01, 0.1, 1.0, 10.0]\n\n}\n\nall_params=[\n            dict(zip(param_grid.keys(),v))\n            for v in itertools.product(*param_grid.values())\n]\nprint(all_params)\n","6389531c":"rmses=list()\n\nfor params in all_params:\n  m=Prophet(**params)\n  m=m.add_seasonality(name=\"monthly\",period=30,fourier_order=5)\n  m=m.add_seasonality(name=\"quaterly\",period=92.25,fourier_order=10)\n  m.add_country_holidays(country_name=\"US\")\n  m.fit(data)\n  df_cv=cross_validation(m,initial=\"730 days\",period=\"365 days\", horizon=\"365 days\",parallel=\"processes\")\n  df_p=performance_metrics(df_cv,rolling_window=1)\n  rmses.append(df_p['rmse'].values[0])\n\n  best_params=all_params[np.argmin(rmses)]\n  print(\"\\nThe best params are:\",best_params)","d996b6b1":"best_model=Prophet(**best_params)\nbest_model=best_model.add_seasonality(name=\"monthly\",period=30,fourier_order=5)\nbest_model=best_model.add_seasonality(name=\"quaterl\",period=92.25,fourier_order=10)\nbest_model.add_country_holidays(country_name=\"US\")\nbest_model.fit(data)\nfuture=best_model.make_future_dataframe(periods=365,freq='D')\nfuture[\"cap\"]=data[\"cap\"].max()\nforecast=best_model.predict(future)","6c0a137e":"best_model.plot_components(forecast)\nbest_model.plot(forecast)","f8d89d63":"# We can look at the info and columns of forecast and we can see all the holidays listed in it\nforecast.info()","cdcb730a":"forecast['yhat']=bc.untransform_boxcox(x=forecast['yhat'],lmbda=lmbda)\nforecast['yhat_lower']=bc.untransform_boxcox(x=forecast['yhat_lower'],lmbda=lmbda)\nforecast['yhat_upper']=bc.untransform_boxcox(x=forecast['yhat_upper'],lmbda=lmbda)\nforecast.plot(x='ds',y=['yhat_lower','yhat','yhat_upper'])","64c8fb03":"### FbProphet model implementation\n\nProphet is a procedure for forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.","37f6aa72":"We need to untransform the BoxCox transformation to get it back to it's original state","85071803":"We can clearly see the fluctuation around December (Christmas) in the holidays graph.","9046c9c1":"Here we are doing the same thing as above, plus adding monthly and quaterly seasonality. Additionaly,we are also considering the holidays (Like Christmas) as important values. Stock prices often fluctuate differently when there are holidays.","76a6fae6":"### BoxCox Transformation\n\nThe Box-Cox transformation transforms our data so that it closely resembles a normal distribution.\nIn many statistical techniques, we assume that the errors are normally distributed. This assumption allows us to construct confidence intervals and conduct hypothesis tests. By transforming your target variable, we can (hopefully) normalize our errors (if they are not already normal).\nAdditionally, transforming our variables can improve the predictive power of our models because transformations can cut away white noise.","fa8f0732":"Calculating the best parameters","9e3bcb93":"Here, the black dots are the original values and the blue line is the predicted values. We can also see trends and other features.","182d0e95":"Once again we are doing the same procedure, except this time using the best parameters available","0f55c549":"### Cross Validation","5637b4e8":"# Time Series Analysis using FbProphet"}}