{"cell_type":{"2c11b910":"code","230b9f83":"code","2b7f2ad0":"code","373b1edc":"code","f3ad3c33":"code","418abb5f":"code","14cfdf29":"code","20569054":"code","276ba2c4":"code","562cb422":"code","e195868c":"code","2c51d975":"code","a8139410":"code","e813c169":"code","3f9b8439":"code","2a759850":"code","4554e5f5":"code","5ca94aa1":"code","3f7ca7c0":"markdown","8a69a6ff":"markdown","9f89bceb":"markdown"},"source":{"2c11b910":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","230b9f83":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px","2b7f2ad0":"df=pd.read_csv('\/kaggle\/input\/married-at-first-sight\/mafs.csv')","373b1edc":"df","f3ad3c33":"df.info()","418abb5f":"X=df.drop('Decision',axis=1)","14cfdf29":"y=df['Decision']","20569054":"X['Occupation'].nunique()","276ba2c4":"def map_values():\n    X['Location']=X.Location.map({'New York City and Northern New Jersey':1\n                                   ,'South Florida':2\n                                   ,'Chicago, Illinois':3\n                                   ,'Boston, Massachusetts':4\n                                   ,'Dallas, Texas':5\n                                   ,'Philadelphia, Pennsylvania':6\n                                   ,'Charlotte, North Carolina':7\n                                   ,'Washington D.C.':8\n                                   ,'Atlanta, Georgia':9})\n    X['Gender']=X.Gender.map({'F':1\n                               ,'M':2})\n    return 'Done!'\n    ","562cb422":"map_values()","e195868c":"X=X.drop(['Name','Occupation','Status'],axis=1)","2c51d975":"y=y.map({'Yes':1\n      ,'No':0})","a8139410":"y","e813c169":"X","3f9b8439":"f,ax=plt.subplots(figsize=(20,12))\nsns.heatmap(X[list(X.columns)].corr(),linewidths=0.25,square=True,linecolor='w',cmap='Oranges_r',annot=True)","2a759850":"fig=px.box(df,x='Couple',y='Age')\nfig.show()","4554e5f5":"from sklearn.tree import DecisionTreeRegressor\nmodel = DecisionTreeRegressor(random_state=7)\nmodel.fit(X, y)","5ca94aa1":"from sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\ntrain_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 7)\nmodel2 = DecisionTreeRegressor()\nmodel2.fit(train_X, train_y)\n\nval_predictions = model2.predict(val_X)\nprint(mean_absolute_error(val_y, val_predictions))","3f7ca7c0":"Change data type","8a69a6ff":"drop the columns which are not very important","9f89bceb":"Since every one has a different job, we will not consider job during next few steps."}}