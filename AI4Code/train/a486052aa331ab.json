{"cell_type":{"8e39cc85":"code","d3504868":"code","988d1742":"code","d9b51d13":"code","85203520":"code","d5aef89e":"code","189b58ee":"code","53b0dba4":"code","61c22f88":"code","f13ee8d1":"code","56f67cf0":"code","124424a1":"code","b86c6b7e":"code","7d69362b":"code","2592ac33":"code","42274f41":"code","8bded84f":"code","5b5dbbf3":"code","2d93c0c9":"code","0359da53":"code","120c1e36":"code","4b16abfe":"code","268b18cc":"code","fd5c033e":"code","672d8fb0":"code","498f7c41":"code","7a003844":"code","6b648957":"code","af18cdea":"code","f39ebb64":"code","e0ff3514":"markdown","38dcb557":"markdown"},"source":{"8e39cc85":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","d3504868":"df = pd.read_csv(\"..\/input\/iris\/Iris.csv\")\ndf.head()","988d1742":"df.drop('Id',axis=1,inplace=True)","d9b51d13":"df.head()","85203520":"df.shape","d5aef89e":"df.info()","189b58ee":"df.describe()","53b0dba4":"df['Species'].value_counts()","61c22f88":"from sklearn.preprocessing import LabelEncoder\nL = LabelEncoder()","f13ee8d1":"df['Species'] = L.fit_transform(df['Species'])\ndf['Species'].value_counts()","56f67cf0":"df.head()","124424a1":"df.isnull().sum()","b86c6b7e":"for feat in df:\n    data = df.copy()\n    sns.distplot(data[feat])\n    plt.xlabel(feat)\n    plt.ylabel(\"Count\")\n    plt.show()","7d69362b":"X = df.drop('Species',axis=1)\ny = df['Species']","2592ac33":"from sklearn.model_selection import train_test_split","42274f41":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=0)","8bded84f":"from sklearn.linear_model import LogisticRegression\nLR = LogisticRegression()","5b5dbbf3":"LR.fit(X_train,y_train)","2d93c0c9":"print(LR.score(X_test,y_test))","0359da53":"y_pred = LR.predict(X_test)\ny_predT = LR.predict(X_train)","120c1e36":"sns.distplot(y_test-y_pred)","4b16abfe":"from sklearn.metrics import confusion_matrix,classification_report,accuracy_score","268b18cc":"accuracy_score(y_test,y_pred)\n","fd5c033e":"print(confusion_matrix(y_test,y_pred))","672d8fb0":"print(classification_report(y_test,y_pred))","498f7c41":"from sklearn.tree import DecisionTreeClassifier\nD = DecisionTreeClassifier()","7a003844":"D.fit(X_train,y_train)","6b648957":"print(D.score(X_test,y_test))","af18cdea":"y_predD = D.predict(X_test)","f39ebb64":"sns.distplot(y_test - y_predD)","e0ff3514":"# EDA","38dcb557":"# Converting target variable to numeric form using Label encoder "}}