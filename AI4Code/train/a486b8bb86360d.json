{"cell_type":{"3c063ab3":"code","e7012e23":"code","cac818e4":"code","a7408806":"code","383daae5":"code","be4735e0":"code","37d55141":"code","79b1eafe":"code","f8dacd97":"code","b97af591":"code","34a7b409":"code","b12e3c2c":"code","6281fe9e":"code","82e76b2a":"code","99e669ba":"code","f6ddd140":"code","a4776cee":"code","6e7cc9fc":"code","0e561375":"code","7f5deba3":"code","62e2334d":"code","14c28345":"code","4398b92d":"markdown","8ab46010":"markdown","03337362":"markdown","8afe95a5":"markdown","9d1bc604":"markdown"},"source":{"3c063ab3":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\nimport lightgbm as lgb\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\ntrain = pd.read_csv(\"\/kaggle\/input\/cft-shift-customer-retention\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/cft-shift-customer-retention\/test.csv\")","e7012e23":"train","cac818e4":"X = train.drop(columns=['churn'])\ny = train['churn']","a7408806":"X['area'] = X['area'].fillna(\"UNKNOWN\")\nX['rev_Mean'] = X['rev_Mean'].fillna(-100000)\nX['mou_Mean'] = X['mou_Mean'].fillna(-100000)\nX['totmrc_Mean'] = X['totmrc_Mean'].fillna(-100000)\nX['da_Mean'] = X['da_Mean'].fillna(-100000)\nX['ovrmou_Mean'] = X['ovrmou_Mean'].fillna(-100000)\nX['datovr_Mean'] = X['datovr_Mean'].fillna(-100000)\nX['ovrrev_Mean'] = X['ovrrev_Mean'].fillna(-100000)\nX['vceovr_Mean'] = X['vceovr_Mean'].fillna(-100000)\nX['roam_Mean'] = X['roam_Mean'].fillna(-100000)\nX['change_mou'] = X['change_mou'].fillna(-100000)\nX['change_rev'] = X['change_rev'].fillna(-100000)\nX['hnd_price'] = X['hnd_price'].fillna(-100000)\nX['phones'] = X['phones'].fillna(-100000)\nX['truck'] = X['truck'].fillna(-100000)\nX['rv'] = X['rv'].fillna(-100000)\nX['lor'] = X['lor'].fillna(-100000)\nX['adults'] = X['adults'].fillna(-100000)\nX['income'] = X['income'].fillna(-100000)\nX['numbcars'] = X['numbcars'].fillna(-100000)\nX['forgntvl'] = X['forgntvl'].fillna(-100000)\nX['eqpdays'] = X['eqpdays'].fillna(-100000)\nX['avg6mou'] = X['avg6mou'].fillna(-100000)\nX['avg6qty'] = X['avg6qty'].fillna(-100000)\nX['avg6rev'] = X['avg6rev'].fillna(-100000)\n\n\n\nX['area'] = X['area'].fillna('UNKW')\nX['rev_Mean'] = X['rev_Mean'].fillna(X['rev_Mean'].median())\nX['mou_Mean'] = X['mou_Mean'].fillna(X['mou_Mean'].median())\nX['totmrc_Mean'] = X['totmrc_Mean'].fillna(X['totmrc_Mean'].median())\nX['da_Mean'] = X['da_Mean'].fillna(X['da_Mean'].median())\nX['ovrmou_Mean'] = X['ovrmou_Mean'].fillna(X['ovrmou_Mean'].median())\nX['datovr_Mean'] = X['datovr_Mean'].fillna(X['datovr_Mean'].median())\nX['ovrrev_Mean'] = X['ovrrev_Mean'].fillna(X['ovrrev_Mean'].median())\nX['vceovr_Mean'] = X['vceovr_Mean'].fillna(X['vceovr_Mean'].median())\nX['roam_Mean'] = X['roam_Mean'].fillna(X['roam_Mean'].median())\nX['change_mou'] = X['change_mou'].fillna(X['change_mou'].median())\nX['change_rev'] = X['change_rev'].fillna(X['change_rev'].median())\nX['hnd_price'] = X['hnd_price'].fillna(X['hnd_price'].median())\nX['phones'] = X['phones'].fillna(X['phones'].median())\nX['truck'] = X['truck'].fillna(X['truck'].median())\nX['rv'] = X['rv'].fillna(X['rv'].median())\nX['lor'] = X['lor'].fillna(X['lor'].median())\nX['adults'] = X['adults'].fillna(X['adults'].median())\nX['income'] = X['income'].fillna(X['income'].median())\nX['numbcars'] = X['numbcars'].fillna(X['numbcars'].median())\nX['forgntvl'] = X['forgntvl'].fillna(X['forgntvl'].median())\nX['eqpdays'] = X['eqpdays'].fillna(X['eqpdays'].median())\nX['avg6mou'] = X['avg6mou'].fillna(X['avg6mou'].median())\nX['avg6qty'] = X['avg6qty'].fillna(X['avg6qty'].median())\nX['avg6rev'] = X['avg6rev'].fillna(X['avg6rev'].median())\n\n\nX['prizm_social_one'] = X['prizm_social_one'].fillna('U')\nX['dualband'] = X['dualband'].fillna('U')\nX['refurb_new'] = X['refurb_new'].fillna('N')\nX['models'] = X['models'].fillna(1.0)\nX['hnd_webcap'] = X['hnd_webcap'].fillna('UNKW')\nX['ownrent'] = X['ownrent'].fillna('UNKW')\nX['dwlltype'] = X['dwlltype'].fillna('UNKW')\nX['marital'] = X['marital'].fillna('U')\nX['infobase'] = X['infobase'].fillna('UNKW')\nX['HHstatin'] = X['HHstatin'].fillna('UNKW')\nX['dwllsize'] = X['dwllsize'].fillna('UNKW')\nX['ethnic'] = X['ethnic'].fillna('U')\nX['kid0_2'] = X['kid0_2'].fillna('U')\nX['kid3_5'] = X['kid3_5'].fillna('U')\nX['kid6_10'] = X['kid6_10'].fillna('U')\nX['kid11_15'] = X['kid11_15'].fillna('U')\nX['kid16_17'] = X['kid16_17'].fillna('U')\nX['creditcd'] = X['creditcd'].fillna('U')\n\n\ntest['area'] = test['area'].fillna(\"UNKNOWN\")\ntest['rev_Mean'] = test['rev_Mean'].fillna(-100000)\ntest['mou_Mean'] = test['mou_Mean'].fillna(-100000)\ntest['totmrc_Mean'] = test['totmrc_Mean'].fillna(-100000)\ntest['da_Mean'] = test['da_Mean'].fillna(-100000)\ntest['ovrmou_Mean'] = test['ovrmou_Mean'].fillna(-100000)\ntest['datovr_Mean'] = test['datovr_Mean'].fillna(-100000)\ntest['ovrrev_Mean'] = test['ovrrev_Mean'].fillna(-100000)\ntest['vceovr_Mean'] = test['vceovr_Mean'].fillna(-100000)\ntest['roam_Mean'] = test['roam_Mean'].fillna(-100000)\ntest['change_mou'] = test['change_mou'].fillna(-100000)\ntest['change_rev'] = test['change_rev'].fillna(-100000)\ntest['hnd_price'] = test['hnd_price'].fillna(-100000)\ntest['phones'] = test['phones'].fillna(-100000)\ntest['truck'] = test['truck'].fillna(-100000)\ntest['rv'] = test['rv'].fillna(-100000)\ntest['lor'] = test['lor'].fillna(-100000)\ntest['adults'] = test['adults'].fillna(-100000)\ntest['income'] = test['income'].fillna(-100000)\ntest['numbcars'] = test['numbcars'].fillna(-100000)\ntest['forgntvl'] = test['forgntvl'].fillna(-100000)\ntest['eqpdays'] = test['eqpdays'].fillna(-100000)\ntest['avg6mou'] = test['avg6mou'].fillna(-100000)\ntest['avg6qty'] = test['avg6qty'].fillna(-100000)\ntest['avg6rev'] = test['avg6rev'].fillna(-100000)\n\n\n\ntest['area'] = test['area'].fillna('UNKW')\ntest['rev_Mean'] = test['rev_Mean'].fillna(test['rev_Mean'].median())\ntest['mou_Mean'] = test['mou_Mean'].fillna(test['mou_Mean'].median())\ntest['totmrc_Mean'] = test['totmrc_Mean'].fillna(test['totmrc_Mean'].median())\ntest['da_Mean'] = test['da_Mean'].fillna(test['da_Mean'].median())\ntest['ovrmou_Mean'] = test['ovrmou_Mean'].fillna(test['ovrmou_Mean'].median())\ntest['datovr_Mean'] = test['datovr_Mean'].fillna(test['datovr_Mean'].median())\ntest['ovrrev_Mean'] = test['ovrrev_Mean'].fillna(test['ovrrev_Mean'].median())\ntest['vceovr_Mean'] = test['vceovr_Mean'].fillna(test['vceovr_Mean'].median())\ntest['roam_Mean'] = test['roam_Mean'].fillna(test['roam_Mean'].median())\ntest['change_mou'] = test['change_mou'].fillna(test['change_mou'].median())\ntest['change_rev'] = test['change_rev'].fillna(test['change_rev'].median())\ntest['hnd_price'] = test['hnd_price'].fillna(test['hnd_price'].median())\ntest['phones'] = test['phones'].fillna(test['phones'].median())\ntest['truck'] = test['truck'].fillna(test['truck'].median())\ntest['rv'] = test['rv'].fillna(test['rv'].median())\ntest['lor'] = test['lor'].fillna(test['lor'].median())\ntest['adults'] = test['adults'].fillna(test['adults'].median())\ntest['income'] = test['income'].fillna(test['income'].median())\ntest['numbcars'] = test['numbcars'].fillna(test['numbcars'].median())\ntest['forgntvl'] = test['forgntvl'].fillna(test['forgntvl'].median())\ntest['eqpdays'] = test['eqpdays'].fillna(test['eqpdays'].median())\ntest['avg6mou'] = test['avg6mou'].fillna(test['avg6mou'].median())\ntest['avg6qty'] = test['avg6qty'].fillna(test['avg6qty'].median())\ntest['avg6rev'] = test['avg6rev'].fillna(test['avg6rev'].median())\n\n\ntest['prizm_social_one'] = test['prizm_social_one'].fillna('U')\ntest['dualband'] = test['dualband'].fillna('U')\ntest['refurb_new'] = test['refurb_new'].fillna('N')\ntest['models'] = test['models'].fillna(1.0)\ntest['hnd_webcap'] = test['hnd_webcap'].fillna('UNKW')\ntest['ownrent'] = test['ownrent'].fillna('UNKW')\ntest['dwlltype'] = test['dwlltype'].fillna('UNKW')\ntest['marital'] = test['marital'].fillna('U')\ntest['infobase'] = test['infobase'].fillna('UNKW')\ntest['HHstatin'] = test['HHstatin'].fillna('UNKW')\ntest['dwllsize'] = test['dwllsize'].fillna('UNKW')\ntest['ethnic'] = test['ethnic'].fillna('U')\ntest['kid0_2'] = test['kid0_2'].fillna('U')\ntest['kid3_5'] = test['kid3_5'].fillna('U')\ntest['kid6_10'] = test['kid6_10'].fillna('U')\ntest['kid11_15'] = test['kid11_15'].fillna('U')\ntest['kid16_17'] = test['kid16_17'].fillna('U')\ntest['creditcd'] = test['creditcd'].fillna('U')\n\n","383daae5":"X = pd.get_dummies(X)\ntest = pd.get_dummies(test)","be4735e0":"X = X.dropna()","37d55141":"test.shape","79b1eafe":"X.shape","f8dacd97":"to_drop = set(test.columns) - set(X.columns)\ntest = test.drop(columns = to_drop)\nto_drop = set(X.columns) - set(test.columns)\nX = X.drop(columns = to_drop)","b97af591":"test.shape","34a7b409":"X = X.fillna(0)\n","b12e3c2c":"from lightgbm import LGBMClassifier\n\nclf = LGBMClassifier(\n    n_estimators=900,\n    learning_rate=0.03,\n    num_leaves=30,\n    colsample_bytree=.8,\n    subsample=.9,\n    max_depth=8,\n    reg_alpha=.1,\n    reg_lambda=.1,\n    min_split_gain=.01,\n    min_child_weight=2,\n    silent=-1,\n    verbose=-1,\n)","6281fe9e":"from catboost import CatBoostClassifier\n\nbest_model = CatBoostClassifier(\n   bagging_temperature=4,\n   random_strength=1,\n   thread_count=8,\n   iterations=5000,\n   l2_leaf_reg = 10.0,\n   bootstrap_type='MVS',\n   #learning_rate = 0.07521709965938336,\n   save_snapshot=False,\n   snapshot_file='snapshot_best.bkp',\n   random_seed=42,\n   od_type='IncToDec',\n   od_wait=20,\n   silent=True,\n   custom_loss=['AUC', 'Accuracy'],\n   #use_best_model=True   \n)\n","82e76b2a":"from sklearn.ensemble import VotingClassifier","99e669ba":"eclf1 = VotingClassifier(estimators=[\n       ('lgbm', clf), ('catboost', best_model)], voting='soft')","f6ddd140":"eclf1 = eclf1.fit(X, y)","a4776cee":"from sklearn.model_selection import KFold, cross_val_score\n\ny_pred = eclf1.predict_proba(test)\nkf = KFold(n_splits=5, random_state=42) # c\u043e\u0437\u0434\u0430\u0435\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u0440\u0430\u0437\u0431\u0438\u0435\u043d\u0438\u0439\nscores = cross_val_score(eclf1, X, y,scoring='roc_auc', cv=kf) # \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440 \u043a\u0430\u043a \u043f\u0430\u0440\nscore = scores.mean()\nscore","6e7cc9fc":"y_pred = eclf1.predict_proba(test)\nprobability = pd.DataFrame(y_pred[:,1], columns=[\"churn\"])\nsaveFrame = pd.concat([test[\"Customer_ID\"],probability], axis = 1, sort = False)\nsaveFrame.to_csv('EnsebleTEST.csv', encoding = \"utf-8-sig\", index = None, header = True)","0e561375":"result = pd.read_csv('EnsebleTEST.csv')\ntrain = pd.read_csv('\/kaggle\/input\/cft-shift-customer-retention\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/cft-shift-customer-retention\/test.csv')\n","7f5deba3":"to_test1_one = result[result['churn']>0.90]\nto_test1_zero = result[result['churn'] < 0.13]\n\nto_test1_one['churn'] = 1\nto_test1_zero['churn'] = 0","62e2334d":"new_t0 = test.merge(to_test1_one, on='Customer_ID', how='inner')\nnew_t1 = test.merge(to_test1_zero, on='Customer_ID', how='inner')\nnew_t01 = new_t0.append(new_t1, ignore_index=True,sort =False)\nresult_new = train.append(new_t01, ignore_index=True,sort =False)\nresult_new","14c28345":"result_new.to_csv('GAINED.csv', encoding = \"utf-8-sig\", index = None, header = True)","4398b92d":"### \u041a\u0442\u043e \u0445\u043e\u0447\u0435\u0442 \u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c \u043f\u043e\u0438\u0433\u0440\u0430\u0442\u044c\u0441\u044f \u0441 \u043d\u0430\u0440\u0430\u0449\u0438\u0432\u0430\u043d\u0438\u0435\u043c \u0434\u0430\u0442\u0430\u0441\u0435\u0442\u0430, \u0442\u043e\u0436\u0435 \u0434\u0430\u0451\u0442 \u043f\u0440\u0438\u0440\u043e\u0441\u0442","8ab46010":"\u041f\u043e\u0442\u043e\u043c GAINED.csv \u0437\u0430\u0441\u0443\u043d\u044c\u0442\u0435 \u0432 \u0442\u0440\u0435\u0439\u043d( \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u043d\u043e\u0443\u0442\u0431\u0443\u043a\u0430) \u0438 \u043e\u0431\u0443\u0447\u0438\u0442\u0435 \u043d\u0430 \u043d\u0451\u043c ( \u043a\u0440\u043e\u0441\u0441\u0432\u0430\u043b\u0438\u0434\u0438\u0440\u0443\u0439\u0442\u0435\u0441\u044c \u043d\u0430 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c \u0442\u0440\u0435\u0439\u043d\u0435)","03337362":"### LightGBM ","8afe95a5":"### Ensemble","9d1bc604":"### CatBoost "}}