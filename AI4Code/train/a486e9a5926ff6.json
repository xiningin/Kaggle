{"cell_type":{"4886cffe":"code","50813b28":"code","e0f4bf24":"code","73481c39":"code","3fd90889":"code","c9bd61f0":"code","15a453b7":"code","2ee1e187":"code","5f00fc74":"code","81744ad2":"code","b7d00059":"code","0bcf2bb4":"code","83f986b3":"code","d95f1f9d":"code","fec5948c":"code","b1532b01":"code","a48ab632":"code","20a122b1":"code","afad44c1":"code","78127c61":"code","d67810a4":"code","b6fa5b4a":"code","e1fddef3":"code","91fa7e8c":"code","454c57af":"code","41d20ccb":"code","53c21cab":"code","f773008c":"code","af931150":"code","b30069a2":"code","ccabc69d":"code","93815f04":"code","6deb613c":"code","fd345360":"code","5e1e1789":"code","92bca6ed":"code","043ff74c":"code","d9a9cbcf":"code","be033cd1":"code","f873ee66":"code","f33e15d7":"markdown","9601a200":"markdown","ad07796c":"markdown","4d51d041":"markdown","8fbd1615":"markdown","ba7b9889":"markdown","937cf73b":"markdown","afdd7a6a":"markdown","b497fe45":"markdown","a7638de3":"markdown","fb07a84f":"markdown"},"source":{"4886cffe":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","50813b28":"train=pd.read_csv('\/kaggle\/input\/summeranalytics2020\/train.csv')\ntest=pd.read_csv('\/kaggle\/input\/summeranalytics2020\/test.csv')","e0f4bf24":"import matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns","73481c39":"pd.options.display.max_columns=80","3fd90889":"train.head()","c9bd61f0":"train.isnull().sum()","15a453b7":"object_cols=list(set(train.select_dtypes(include='object').columns))\nplt.figure(figsize=(20, 50))\nfor i in range(len(object_cols)):\n    plt.subplot(7,1,i+1)\n    sns.countplot(train[object_cols[i]], hue = train.Attrition)","2ee1e187":"f=sns.FacetGrid(train,col=\"Attrition\")\nf.map(plt.hist,\"Behaviour\")","5f00fc74":"f=sns.FacetGrid(train,col=\"Attrition\")\nf.map(plt.hist,\"CommunicationSkill\")","81744ad2":"f=sns.FacetGrid(train,col=\"Attrition\")\nf.map(plt.hist,\"PerformanceRating\")","b7d00059":"f=sns.FacetGrid(train,col=\"Attrition\")\nf.map(plt.hist,\"EnvironmentSatisfaction\")","0bcf2bb4":"f=sns.FacetGrid(train,col=\"Attrition\")\nf.map(plt.hist,\"JobInvolvement\")","83f986b3":"f=sns.FacetGrid(train,col=\"Attrition\")\nf.map(plt.hist,\"Education\")","d95f1f9d":"f=sns.FacetGrid(train,col=\"Attrition\")\nf.map(plt.hist,\"StockOptionLevel\")","fec5948c":"num_cols=['Age', 'DistanceFromHome', 'EmployeeNumber', 'MonthlyIncome', 'NumCompaniesWorked', 'PercentSalaryHike','TotalWorkingYears', 'TrainingTimesLastYear', 'YearsAtCompany', 'YearsInCurrentRole', 'YearsSinceLastPromotion', 'YearsWithCurrManager']\n\nfor i in range(len(num_cols)):\n    sns.scatterplot(x=train[num_cols[i]],y=train.Attrition)\n    plt.show()","b1532b01":"one_hot_1=pd.get_dummies(train['BusinessTravel'])\none_hot_2=pd.get_dummies(test['BusinessTravel'])\ntrain=train.drop(['BusinessTravel'],axis=1)\ntrain=train.join(one_hot_1)\ntest=test.drop(['BusinessTravel'],axis=1)\ntest=test.join(one_hot_2)","a48ab632":"one_hot_3=pd.get_dummies(train['Department'])\none_hot_4=pd.get_dummies(test['Department'])\ntrain=train.drop(['Department'],axis=1)\ntrain=train.join(one_hot_3)\ntest=test.drop(['Department'],axis=1)\ntest=test.join(one_hot_4)","20a122b1":"train.rename(columns={'Human Resources':'Human_resources_dept'},inplace=True)\ntest.rename(columns={'Human Resources':'Human_resources_dept'},inplace=True)","afad44c1":"one_hot_5=pd.get_dummies(train['Gender'])\none_hot_6=pd.get_dummies(test['Gender'])\ntrain=train.drop(['Gender'],axis=1)\ntrain=train.join(one_hot_5)\ntest=test.drop(['Gender'],axis=1)\ntest=test.join(one_hot_6)","78127c61":"one_hot_7=pd.get_dummies(train['MaritalStatus'])\none_hot_8=pd.get_dummies(test['MaritalStatus'])\ntrain=train.drop(['MaritalStatus'],axis=1)\ntrain=train.join(one_hot_7)\ntest=test.drop(['MaritalStatus'],axis=1)\ntest=test.join(one_hot_8)","d67810a4":"one_hot_9=pd.get_dummies(train['EducationField'])\none_hot_10=pd.get_dummies(test['EducationField'])\ntrain=train.drop(['EducationField'],axis=1)\ntrain=train.join(one_hot_9)\ntest=test.drop(['EducationField'],axis=1)\ntest=test.join(one_hot_10)","b6fa5b4a":"train.rename(columns={'Human Resources':'Human_resources_ed'},inplace=True)\ntest.rename(columns={'Human Resources':'Human_resources_ed'},inplace=True)","e1fddef3":"one_hot_11=pd.get_dummies(train['JobRole'])\none_hot_12=pd.get_dummies(test['JobRole'])\ntrain=train.drop(['JobRole'],axis=1)\ntrain=train.join(one_hot_11)\ntest=test.drop(['JobRole'],axis=1)\ntest=test.join(one_hot_12)","91fa7e8c":"train['OverTime']=list(map(lambda x: 1 if x=='Yes' else 0,train['OverTime']))\ntest['OverTime']=list(map(lambda x: 1 if x=='Yes' else 0,test['OverTime']))","454c57af":"train.head()","41d20ccb":"for i in range(len(num_cols)):\n    sns.countplot(x=train[num_cols[i]])\n    plt.show()","53c21cab":"from scipy.stats import skew\n\nskew_f=train.apply(lambda x:skew(x)).sort_values(ascending=False)\nhighest_skew=skew_f[skew_f>0.5]\nhighest_skew","f773008c":"train['YearsSinceLastPromotion']=np.sqrt(train['YearsSinceLastPromotion'])\ntrain['YearsAtCompany']=np.sqrt(train['YearsAtCompany'])\ntrain['MonthlyIncome']=np.sqrt(train['MonthlyIncome'])\ntrain['TotalWorkingYears']=np.sqrt(train['TotalWorkingYears'])\ntrain['YearsInCurrentRole']=np.sqrt(train['YearsInCurrentRole'])\ntrain['YearsWithCurrManager']=np.sqrt(train['YearsWithCurrManager'])\ntrain['NumCompaniesWorked']=np.sqrt(train['NumCompaniesWorked'])\ntrain['DistanceFromHome']=np.sqrt(train['DistanceFromHome'])\ntrain['PercentSalaryHike']=np.sqrt(train['PercentSalaryHike'])","af931150":"test['YearsSinceLastPromotion']=np.sqrt(test['YearsSinceLastPromotion'])\ntest['YearsAtCompany']=np.sqrt(test['YearsAtCompany'])\ntest['MonthlyIncome']=np.sqrt(test['MonthlyIncome'])\ntest['TotalWorkingYears']=np.sqrt(test['TotalWorkingYears'])\ntest['YearsInCurrentRole']=np.sqrt(test['YearsInCurrentRole'])\ntest['YearsWithCurrManager']=np.sqrt(test['YearsWithCurrManager'])\ntest['NumCompaniesWorked']=np.sqrt(test['NumCompaniesWorked'])\ntest['DistanceFromHome']=np.sqrt(test['DistanceFromHome'])\ntest['PercentSalaryHike']=np.sqrt(test['PercentSalaryHike'])","b30069a2":"for col in num_cols:\n    train[col]=(train[col]-np.mean(train[col]))\/np.std(train[col])\n    test[col]=(test[col]-np.mean(test[col]))\/np.std(test[col])","ccabc69d":"train=train.drop(['EmployeeNumber', 'Behaviour'],axis=1)\ntest=test.drop(['EmployeeNumber', 'Behaviour'],axis=1)","93815f04":"train_x=train.drop([\"Attrition\",\"Id\"],axis=1)\ntrain_y=train['Attrition']","6deb613c":"from sklearn.decomposition import PCA\n\npca=PCA(0.99)\np_c=pca.fit_transform(train_x)\ntrain_xx=pd.DataFrame(data=p_c)","fd345360":"p_c=pca.transform(test.drop(['Id'],axis=1))\ntest_x=pd.DataFrame(data=p_c)","5e1e1789":"from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, AdaBoostClassifier\nfrom sklearn.preprocessing import StandardScaler, PolynomialFeatures\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.linear_model import LogisticRegressionCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn.svm import SVC\nimport xgboost as xgb\nfrom sklearn.metrics import confusion_matrix, accuracy_score, auc, roc_curve, roc_auc_score","92bca6ed":"from sklearn.calibration import CalibratedClassifierCV\n\nsvc=SVC(kernel='linear', gamma='auto')\nsvc2=CalibratedClassifierCV(svc)\nsvc2.fit(train_xx,train_y)","043ff74c":"y_pred_svc=svc2.predict_proba(test_x)[:,1]","d9a9cbcf":"test['Attrition']=y_pred_svc","be033cd1":"test[['Id', 'Attrition']].to_csv('mysubmission.csv', index = False)","f873ee66":"## model1=LogisticRegressionCV(10,random_state=1)\n## model1.fit(train_xx,train_y)\n## y_pred_log=model1.predict_proba(test_x)[:,1]\n\n## model2=DecisionTreeClassifier(criterion='gini', max_depth=10, max_leaf_nodes=23, splitter='best')\n## model2.fit(train_xx,train_y)\n## y_pred_dec=model2.predict(train_x)\n\n## randomForest = RandomForestClassifier()\n## param_grid = { \n##   'criterion' : ['gini', 'entropy'],\n##  'n_estimators': [100, 300, 500],\n##  'max_features': ['auto', 'log2'],\n## 'max_depth' : [3, 5, 7] }\n\n## from sklearn.model_selection import GridSearchCV\n\n# Grid search\n## randomForest_CV = GridSearchCV(estimator = randomForest, param_grid = param_grid, cv = 6,scoring='roc_auc')\n## randomForest_CV.fit(df_xx, train_y)\n\n## randomForest_CV.best_params_\n\n## randomForestFinalModel = RandomForestClassifier(criterion = 'gini', max_depth = 7, max_features = 'auto', n_estimators = 100,max_leaf_nodes=23)\n## randomForestFinalModel.fit(train_xx, train_y)\n## y_pred_rnn=randomForestFinalModel.predict_proba(df_x)[:,1]\n\n## gnb=GaussianNB()\n## gnb.fit(train_x,train_y)\n\n## regr=xgb.XGBClassifier()\n## regr.fit(train_xx,train_y)\n## y_pred_xgb=regr.predict_proba(test_x)[:,1]\n\n## ada=AdaBoostClassifier(random_state=2,n_estimators=200)\n## ada.fit(train_xx,train_y)\n\n## from sklearn import ensemble\n## params={'n_estimators':500, 'max_depth':4, 'min_samples_split':2,'learning_rate':0.01}\n## gbc=ensemble.GradientBoostingClassifier(**params)\n## gbc.fit(train_xx,train_y)\n\n## y_pred_gbc=gbc.predict_proba(test.drop(['Id'],axis=1))[:,1]\n## y_pred_gnb=gnb.predict_proba(test.drop(['Id'],axis=1))[:,1]\n## y_pred_ada=ada.predict_proba(test.drop(['Id'],axis=1))[:,1]\n\n## from sklearn.neighbors import KNeighborsClassifier\n## clf=KNeighborsClassifier(n_neighbors=15)\n## clf.fit(train_x,train_y)\n\n## y_pred_knn=clf.predict_proba(test.drop(['Id'],axis=1))[:,1]\n\n## Y_len=len(test)\n## y_pred_ensemble3=np.zeros(Y_len)\n## for i in range(Y_len):\n     #if(y_pred_rn[i] + y_pred_log[i] + y_pred_svc[i] >=2):\n     #y_pred_ensemble3[i]=(y_pred_rn[i]+y_pred_svc[i]+y_pred_log[i]+y_pred_xgb[i]+y_pred_gnb[i])\/5\n     #y_pred_ensemble3[i]=(y_pred_svc[i]+y_pred_log[i]+y_pred_rn[i]+y_pred_xgb[i]+y_pred_ada[i])\/5\n     #y_pred_ensemble3[i]=(y_pred_rn[i]+y_pred_svc[i]+y_pred_log[i]+y_pred_knn[i])\/4\n     #y_pred_ensemble3[i]=(y_pred_svc[i]+y_pred_log[i])\/2","f33e15d7":"I tried using other models and also to ensemble various models but svc linear kernel gave me the highest roc-auc score.","9601a200":"## Models","ad07796c":"## Now we will scale our columns ","4d51d041":"## Reading our test and train data","8fbd1615":"## Checking for null values","ba7b9889":"## Importing the useful libraries for visualization","937cf73b":"## Now let's try PCA for dimensionality reduction.","afdd7a6a":"## Now let's one-hot-encode our object columns.","b497fe45":"## We can see that many of our columns are skewed. Now we will reduce the skewness of these columns.","a7638de3":"## Now we will perform exploratory data analysis on our object as well as numerical columns\n","fb07a84f":"We can drop the employee number and behaviour column."}}