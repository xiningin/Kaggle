{"cell_type":{"be74ba53":"code","e71db36f":"code","56ca9dea":"code","b111ca4c":"code","0580086b":"code","f7a2c7ac":"code","64cc904f":"code","429e2bb1":"code","2a0442e5":"code","54b2ac5c":"code","9d3d28bc":"code","6473f6e9":"code","f48b9b14":"code","746e293d":"code","d1b36f9c":"code","66a5b9d9":"markdown"},"source":{"be74ba53":"# read the csv file\nimport warnings\nimport random\nimport pandas as pd\ndata = pd.read_csv('..\/input\/demand-forecasting-kernels-only\/train.csv')\ndata['date'] = pd.to_datetime(data['date'])\npd.options.mode.chained_assignment = None  # default='warn'\ndata.head()","e71db36f":"# combine store and item column as time_series\ndata['store'] = ['store_' + str(i) for i in data['store']]\ndata['item'] = ['item_' + str(i) for i in data['item']]\ndata['time_series'] = data[['store', 'item']].apply(lambda x: '_'.join(x), axis=1)\ndata.drop(['store', 'item'], axis=1, inplace=True)\ndata.head()","56ca9dea":"# extract features from date\ndata['month'] = [i.month for i in data['date']]\ndata['year'] = [i.year for i in data['date']]\ndata['day_of_week'] = [i.dayofweek for i in data['date']]\ndata['day_of_year'] = [i.dayofyear for i in data['date']]\ndata.head()","b111ca4c":"# check the unique time_series\ndata['time_series'].nunique()","0580086b":"import matplotlib.pyplot as plt\nplt.rcParams.update({'figure.max_open_warning': 0})\nimport seaborn as sns\nfor i in list(data['time_series'].unique()[200:300]):\n    subset = data[data['time_series'] == i]\n    subset['moving_average'] = subset['sales'].rolling(30).mean()\n    subset.dropna(inplace=True)\n    warnings.simplefilter(action='error', category=FutureWarning)\n    # set figure size\n    plt.figure( figsize = ( 20, 10))\n\n    # plot a simple time series plot\n    # using seaborn.lineplot()\n    sns.lineplot( x = 'date',\n                 y = 'sales',\n                 data = subset,\n                 label = 'sales')\n\n    # plot using rolling average\n    sns.lineplot( x = 'date',\n                 y = 'moving_average',\n                 data = subset,\n                 label = 'moving_average')\n    plt.ylabel(\"Values\")\n    plt.grid()\n\n    plt.title(i)","f7a2c7ac":"from tqdm.auto import tqdm\ntqdm.pandas()","64cc904f":"# install slim version (default)\n!pip install pycaret","429e2bb1":"from pycaret.regression import *\n\nall_ts = data['time_series'].unique()[200:300]\n\nall_results = []\nfinal_model = {}\n\nfor i in tqdm(all_ts):\n    \n    df_subset = data[data['time_series'] == i]\n    \n    # initialize setup from pycaret.regression\n    s = setup(df_subset, target = 'sales', train_size = 0.99,\n              data_split_shuffle = False, fold_strategy = 'timeseries', fold = 4,\n              ignore_features = ['date', 'time_series'],\n              numeric_features = ['day_of_year', 'year'],\n              categorical_features = ['month', 'day_of_week'],\n              silent = True, verbose = False, session_id = 42)\n    \n    # compare all models and select best one based on MAE\n    best_model = compare_models(sort = 'MAE', verbose=False)\n    \n    # capture the compare result grid and store best model in list\n    p = pull().iloc[0:1]\n    p['time_series'] = str(i)\n    all_results.append(p)\n    \n    # finalize model i.e. fit on entire data including test set\n    f = finalize_model(best_model)\n    \n    # attach final model to a dictionary\n    final_model[i] = f\n    \n    # save transformation pipeline and model as pickle file \n    save_model(f, model_name='.\/' + str(i), verbose=False)\n","2a0442e5":"concat_results = pd.concat(all_results,axis=0)\nconcat_results.head()","54b2ac5c":"# create a date range from 2013 to 2019\nall_dates = pd.date_range(start='2013-01-01', end = '2019-12-31', freq = 'D')","9d3d28bc":"# create empty dataframe\nscore_df = pd.DataFrame()\nscore_df.head()","6473f6e9":"# add columns to dataset\nscore_df['date'] = all_dates\nscore_df['month'] = [i.month for i in score_df['date']]\nscore_df['year'] = [i.year for i in score_df['date']]\nscore_df['day_of_week'] = [i.dayofweek for i in score_df['date']]\nscore_df['day_of_year'] = [i.dayofyear for i in score_df['date']]\nscore_df.head()","f48b9b14":"from pycaret.regression import load_model, predict_model\nall_score_df = []\nfor i in tqdm(data['time_series'].unique()[200:300]):\n    l = load_model('.\/' + str(i), verbose=False)\n    p = predict_model(l, data=score_df)\n    p['time_series'] = i\n    all_score_df.append(p)\nconcat_df = pd.concat(all_score_df, axis=0)\nconcat_df.head()","746e293d":"final_df = pd.merge(concat_df[['date', 'time_series',\n                                     'Label']],data, how = 'left', left_on=['date', 'time_series'], right_on = ['date', 'time_series'])\nfinal_df.head()","d1b36f9c":"for i in data['time_series'].unique()[200:300]:\n    sub_df = final_df[final_df['time_series'] == i]\n    # set figure size\n    plt.figure( figsize = ( 20, 10))\n\n    # plot a simple time series plot\n    # using seaborn.lineplot()\n    sns.lineplot( x = 'date',\n                 y = 'sales',\n                 data = sub_df,\n                 label = 'sales')\n\n    # plot using rolling average\n    sns.lineplot( x = 'date',\n                 y = 'Label',\n                 data = sub_df,\n                 label = 'Label')\n    plt.ylabel(\"Values\")\n    plt.grid()\n\n    plt.title(i)","66a5b9d9":"# Visualize Time-Series"}}