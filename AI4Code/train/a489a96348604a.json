{"cell_type":{"c907ff41":"code","50c1581a":"code","5d7c8e04":"code","e1057007":"code","89b3eac2":"code","28d1a047":"code","d59a1729":"code","22efce1e":"code","04c98102":"code","9256cf87":"code","9d8698ea":"code","7d79f7aa":"code","8bdec44b":"code","eb30bd6c":"code","e627df70":"code","4506467e":"code","fd681d64":"code","9d961df4":"code","4c11219a":"code","0d04d9f4":"code","6a3e3e87":"code","5d38977a":"code","47858a15":"code","85099839":"code","0a746bee":"code","dd44a89a":"code","a3d5f1db":"code","bd259ca9":"code","5af7ba4e":"code","af086689":"code","1b9e0989":"code","4bcf5d5d":"code","5d5b4c70":"code","2b8173a1":"code","b34978af":"code","180daa8c":"code","c38a976a":"code","4be48d8c":"code","ea69a643":"code","7e45e2d7":"code","1edd358c":"code","a5f8730c":"code","70b47dc9":"code","588cc87e":"code","dc08d6c1":"code","3de6a4d8":"markdown","1a08d597":"markdown","a47dba8a":"markdown"},"source":{"c907ff41":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\nfrom scipy.stats import norm\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy import stats\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","50c1581a":"df_train = pd.read_csv('..\/input\/train.csv')","5d7c8e04":"df_train.columns","e1057007":"df_train['SalePrice'].describe()\n","89b3eac2":"sns.distplot(df_train['SalePrice']);","28d1a047":"print(\"Skewness: %f\" % df_train['SalePrice'].skew())\nprint(\"Kurtosis: %f\" % df_train['SalePrice'].kurt())","d59a1729":"var = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","22efce1e":"var = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","04c98102":"#box plot overallqual\/saleprice\nvar = 'OverallQual'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(8, 6))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);","9256cf87":"var = 'YearBuilt'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\nf, ax = plt.subplots(figsize=(16, 8))\nfig = sns.boxplot(x=var, y=\"SalePrice\", data=data)\nfig.axis(ymin=0, ymax=800000);\nplt.xticks(rotation=90);","9d8698ea":"#correlation matrix\ncorrmat = df_train.corr()\nf, ax = plt.subplots(figsize=(12, 9))\nsns.heatmap(corrmat, vmax=.8, square=True);","7d79f7aa":"k = 10 #number of variables for heatmap\ncols = corrmat.nlargest(k, 'SalePrice')['SalePrice'].index\ncm = np.corrcoef(df_train[cols].values.T)\nsns.set(font_scale=1.25)\nhm = sns.heatmap(cm, cbar=True, annot=True, square=True, fmt='.2f', annot_kws={'size': 10}, yticklabels=cols.values, xticklabels=cols.values)\nplt.show()\n","8bdec44b":"sns.set()\ncols = ['SalePrice', 'OverallQual', 'GrLivArea', 'GarageCars', 'TotalBsmtSF', 'FullBath', 'YearBuilt']\nsns.pairplot(df_train[cols], size = 2.5)\nplt.show();","eb30bd6c":"total = df_train.isnull().sum().sort_values(ascending=False)\npercent = (df_train.isnull().sum()\/df_train.isnull().count()).sort_values(ascending=False)\nmissing_data = pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\nmissing_data.head(20)","e627df70":"df_train = df_train.drop((missing_data[missing_data['Total'] > 1]).index,1)\ndf_train = df_train.drop(df_train.loc[df_train['Electrical'].isnull()].index)\ndf_train.isnull().sum().max() #just checking that there's no missing data missing...","4506467e":"saleprice_scaled = StandardScaler().fit_transform(df_train['SalePrice'][:,np.newaxis]);\nlow_range = saleprice_scaled[saleprice_scaled[:,0].argsort()][:10]\nhigh_range= saleprice_scaled[saleprice_scaled[:,0].argsort()][-10:]\nprint('outer range (low) of the distribution:')\nprint(low_range)\nprint('\\nouter range (high) of the distribution:')\nprint(high_range)","fd681d64":"var = 'GrLivArea'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","9d961df4":"df_train.sort_values(by = 'GrLivArea', ascending = False)[:2]\ndf_train = df_train.drop(df_train[df_train['Id'] == 1299].index)\ndf_train = df_train.drop(df_train[df_train['Id'] == 524].index)","4c11219a":"#bivariate analysis saleprice\/grlivarea\nvar = 'TotalBsmtSF'\ndata = pd.concat([df_train['SalePrice'], df_train[var]], axis=1)\ndata.plot.scatter(x=var, y='SalePrice', ylim=(0,800000));","0d04d9f4":"sns.distplot(df_train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)","6a3e3e87":"df_train['SalePrice'] = np.log(df_train['SalePrice'])","5d38977a":"#transformed histogram and normal probability plot\nsns.distplot(df_train['SalePrice'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['SalePrice'], plot=plt)","47858a15":"sns.distplot(df_train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['GrLivArea'], plot=plt)","85099839":"df_train['GrLivArea'] = np.log(df_train['GrLivArea'])","0a746bee":"#transformed histogram and normal probability plot\nsns.distplot(df_train['GrLivArea'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['GrLivArea'], plot=plt)","dd44a89a":"sns.distplot(df_train['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train['TotalBsmtSF'], plot=plt)","a3d5f1db":"#create column for new variable (one is enough because it's a binary categorical feature)\n#if area>0 it gets 1, for area==0 it gets 0\ndf_train['HasBsmt'] = pd.Series(len(df_train['TotalBsmtSF']), index=df_train.index)\ndf_train['HasBsmt'] = 0 \ndf_train.loc[df_train['TotalBsmtSF']>0,'HasBsmt'] = 1","bd259ca9":"#transform data\ndf_train.loc[df_train['HasBsmt']==1,'TotalBsmtSF'] = np.log(df_train['TotalBsmtSF'])","5af7ba4e":"#histogram and normal probability plot\nsns.distplot(df_train[df_train['TotalBsmtSF']>0]['TotalBsmtSF'], fit=norm);\nfig = plt.figure()\nres = stats.probplot(df_train[df_train['TotalBsmtSF']>0]['TotalBsmtSF'], plot=plt)","af086689":"#scatter plot\nplt.scatter(df_train['GrLivArea'], df_train['SalePrice']);\n","1b9e0989":"#scatter plot\nplt.scatter(df_train[df_train['TotalBsmtSF']>0]['TotalBsmtSF'], df_train[df_train['TotalBsmtSF']>0]['SalePrice']);","4bcf5d5d":"#convert categorical variable into dummy\ndf_train = pd.get_dummies(df_train)","5d5b4c70":"df_train.head()","2b8173a1":"df_train.shape","b34978af":"y=df_train['SalePrice']\nX=df_train.drop(['SalePrice','Id'],axis=1)","180daa8c":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\nX_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=2018)","c38a976a":"rm_r=RandomForestRegressor(n_estimators=100)\nrm_r.fit(X_train,y_train)","4be48d8c":"pred_t=rm_r.predict(X_test)","ea69a643":"from sklearn.metrics import accuracy_score,mean_squared_error\naccuracy = rm_r.score(X_test,y_test)\nprint(accuracy*100,'%')","7e45e2d7":"import xgboost as xgb\nxgb_model = xgb.XGBRegressor(objective=\"reg:linear\", random_state=42)\n\nxgb_model.fit(X_train, y_train)\n\ny_pred = xgb_model.predict(X_test)\n\nmse=mean_squared_error(y_test, y_pred)\n\nprint(np.sqrt(mse))","1edd358c":"accuracy =xgb_model.score(X_test,y_test)\nprint(accuracy*100,'%')","a5f8730c":"from sklearn.linear_model import Lasso\nlasso = Lasso(alpha=0.01, max_iter=10e5)\nlasso.fit(X_train,y_train)\n","70b47dc9":"from catboost import CatBoostRegressor\ncb_model = CatBoostRegressor(iterations=2000,\n                             learning_rate=1,\n                             depth=12,\n                             eval_metric='RMSE',\n                             random_seed = 2018,\n                             od_type='Iter',\n                             metric_period = 50,\n                             od_wait=20)","588cc87e":"cb_model.fit(X_train, y_train,\n             eval_set=(X_test, y_test),\n             use_best_model=True)","dc08d6c1":"accuracy =cb_model.score(X_test,y_test)\nprint(accuracy*100,'%')","3de6a4d8":"***Bivariate analysis***\n,We already know the following scatter plots by heart. However, when we look to things from a new perspective, there's always something to discover. As Alan Kay said, 'a change in perspective is worth 80 IQ points'.","1a08d597":"'Ah! I see you that you use seaborn makeup when you're going out... That's so elegant! I also see that you:\n\nDeviate from the normal distribution.\nHave appreciable positive skewness.\nShow peakedness.\nThis is getting interesting! 'SalePrice', could you give me your body measures?'","a47dba8a":"'GrLivArea' and 'TotalBsmtSF' seem to be linearly related with 'SalePrice'. Both relationships are positive, which means that as one variable increases, the other also increases. In the case of 'TotalBsmtSF', we can see that the slope of the linear relationship is particularly high.\n'OverallQual' and 'YearBuilt' also seem to be related with 'SalePrice'. The relationship seems to be stronger in the case of 'OverallQual', where the box plot shows how sales prices increase with the overall quality.\nWe just analysed four variables, but there are many other that we should analyse. The trick here seems to be the choice of the right features (feature selection) and not the definition of complex relationships between them (feature engineering).\n\nThat said, let's separate the wheat from the chaff."}}