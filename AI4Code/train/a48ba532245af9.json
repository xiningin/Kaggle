{"cell_type":{"bc81765d":"code","1aa30aba":"code","6dd85081":"code","3952581c":"code","03e88d33":"code","fd38fd47":"code","999b78c6":"code","d5f3bc5d":"code","8dfc9614":"code","02455156":"code","0171d4a4":"code","c4a2e68c":"code","d68bed4f":"code","d809a257":"code","3df1d06e":"code","ae67e904":"code","9261eaa6":"code","39ae3f16":"code","f7c0399d":"code","0f80ea78":"code","23f5d411":"code","6c43c30e":"code","d96a0e51":"code","1e3865f5":"code","383ee535":"code","732fdd63":"code","089409ac":"code","4c31487a":"code","2b77e43f":"code","300592af":"code","11308362":"code","7801a042":"code","e17c21a1":"code","49a61831":"code","45f39c76":"code","4d257f8d":"code","8c07f8cc":"code","3b3a3c00":"code","d8b54668":"code","dd721164":"code","58649006":"code","a489dbaf":"code","f44eb3e2":"code","9b8c0d1f":"code","2f6008b5":"code","cc6e5aea":"code","4d0eea80":"code","52d40675":"code","9231da11":"code","98ca4d29":"code","19946b87":"code","3d780551":"code","53b43b46":"code","8f8c82a2":"code","11b5aef2":"code","e10f94f2":"code","e5d58485":"code","46394455":"code","7f2594bd":"code","3b8ed561":"markdown","e072a1a3":"markdown","d3e3892a":"markdown","32eb1c2b":"markdown","709392ab":"markdown","546e6d6e":"markdown","aacf8b34":"markdown","fc0389a4":"markdown","11200bb5":"markdown","43ab850d":"markdown","f001d8fa":"markdown","214c2041":"markdown","fa863701":"markdown","cc5ac4e2":"markdown","40a7b552":"markdown","79a85259":"markdown","5a610723":"markdown","0c884ca8":"markdown","107868f9":"markdown","465f5674":"markdown","d8bcbd48":"markdown","c8d43b64":"markdown","e12c4995":"markdown"},"source":{"bc81765d":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport itertools\nimport gc\nimport os\nimport sys\n%matplotlib inline\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","1aa30aba":"train_data = pd.read_csv('\/kaggle\/input\/pubg-finish-placement-prediction\/train_V2.csv')\ntest_data = pd.read_csv('\/kaggle\/input\/pubg-finish-placement-prediction\/test_V2.csv')","6dd85081":"train_data.shape","3952581c":"test_data.shape","03e88d33":"train_data.head()","fd38fd47":"train_data.columns","999b78c6":"train_data.describe()","d5f3bc5d":"train_data.info()","8dfc9614":"train_data.isna().any()","02455156":"null_columns = pd.DataFrame({'Columns': train_data.isna().sum().index,'No. Null values': train_data.isna().sum().values, 'Percentage': train_data.isna().sum().values\/train_data.shape[0]})","0171d4a4":"null_columns","c4a2e68c":"train_data['Id'].nunique()","d68bed4f":"train_data['groupId'].nunique()","d809a257":"train_data['matchId'].nunique()","3df1d06e":"train_data['matchType']","ae67e904":"train_data.groupby(['matchType']).count()","9261eaa6":"plt.figure(figsize = (9,5))\ntrain_data.groupby('matchId')['matchType'].first().value_counts().plot.bar()","39ae3f16":"new_train_data = train_data\ndef mapthematch(data):\n    mapping = lambda y: 'solo' if ('solo' in y) else 'duo' if('duo' in y) or ('crash' in y) else 'squad'\n    data['matchType'] = data['matchType'].apply(mapping)\n    return (new_train_data)\ndata = mapthematch(new_train_data)\ndata.groupby('matchId')['matchType'].first().value_counts().plot.bar()","f7c0399d":"matchwise_group_count = data[['matchType', 'matchId','groupId']]\na = matchwise_group_count.groupby(['matchId', 'matchType']).count()\nprint(matchwise_group_count.nunique())\na","0f80ea78":"groups = data.groupby(['matchType', 'matchId', 'groupId']).size().to_frame('players in each group')\ngroups","23f5d411":"data[data['winPlacePerc'].isnull()]","6c43c30e":"data.drop(2744604, inplace = True)\ndata[data['winPlacePerc'].isnull()]","d96a0e51":"a","1e3865f5":"a.groupby('matchType').hist(bins = 70)","383ee535":"data['matchDuration'].hist(bins = 40)","732fdd63":"data['matchDuration'].min()","089409ac":"data['matchDuration'].max()","4c31487a":"d = data[['teamKills','matchType']]\nd.groupby('matchType').hist(bins = 50)","2b77e43f":"data['killsNormalization'] = data['kills']*((100-data['kills'])\/100 +1)","300592af":"data['damageDealtNormalization'] = data['damageDealt']*((100- data['damageDealt'])\/100 +1)","11308362":"data['maxPlaceNormalization'] = data['maxPlace']*((100- data['maxPlace'])\/100 + 1)","7801a042":"data['matchDurationNormalization'] = data['matchDuration']*((100- data['matchDuration'])\/100 + 1)","e17c21a1":"New_normalised_column = data[['Id', 'matchDuration','matchDurationNormalization','kills','killsNormalization','damageDealt','damageDealtNormalization','maxPlace','maxPlaceNormalization','matchDuration','matchDurationNormalization']]","49a61831":"New_normalised_column","45f39c76":"data['healsandboostsfeature']= data['heals']+ data['boosts']\ndata[['heals','boosts','healsandboostsfeature']].tail()","4d257f8d":"data['totalDistancetravelled'] = data['rideDistance']+ data['walkDistance']+ data['swimDistance']\ndata['totalDistancetravelled']","8c07f8cc":"data['headshot_rate'] = data['headshotKills']\/data['kills']\ndata['headshot_rate']","3b3a3c00":"data","d8b54668":"data['killswithoutMovinganytime'] = ((data['kills']>0)&(data['totalDistancetravelled']==0))","dd721164":"data['killswithoutMovinganytime'] ","58649006":"data[data['killswithoutMovinganytime'] == True].shape","a489dbaf":"data[data['killswithoutMovinganytime'] == True].head()","f44eb3e2":"#remove outliers\ndata.drop(data[data['killswithoutMovinganytime']==True].index, inplace = True)","9b8c0d1f":"import seaborn as sns\nplt.figure(figsize=(12,4))\nsns.distplot(data['longestKill'])\nplt.show()","2f6008b5":"display(data[data['longestKill']>=900].shape)\ndata[data['longestKill']>=900].head(10)","cc6e5aea":"data.shape\n","4d0eea80":"data['winPlacePerc']","52d40675":"from sklearn import metrics\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression, LinearRegression","9231da11":"data.columns","98ca4d29":"x =  data[['killsNormalization', 'damageDealtNormalization','maxPlaceNormalization','matchDurationNormalization','healsandboostsfeature','totalDistancetravelled']]","19946b87":"y = data['winPlacePerc']\nx_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state =42)","3d780551":"l= LinearRegression()\nl.fit(x_train,y_train)","53b43b46":"y_pred = l.predict(x_test)","8f8c82a2":"y_pred","11b5aef2":"print(l.intercept_)","e10f94f2":"print(l.coef_)","e5d58485":"df = pd.DataFrame({'Actual': y_test,'Predicted': y_pred})\ndf","46394455":"df1 = df.head(25)\ndf1.plot(kind = 'bar', figsize = (20,10))\nplt.grid(which = 'major', linestyle= '-', linewidth = '0.5',color = 'green')\nplt.grid(which = 'minor', linestyle = ':', linewidth = '0.5', color = 'black')\nplt.show()","7f2594bd":"print('Mean Absolute Error: ', metrics.mean_absolute_error(y_test,y_pred))\nprint('Mean Squared Error: ', metrics.mean_squared_error(y_test,y_pred))\nprint('Root Mean Mean Error: ', np.sqrt(metrics.mean_squared_error(y_test,y_pred)))\n","3b8ed561":"# Groups count per matchID","e072a1a3":"# Map the match","d3e3892a":"# Visualise the longest skill and try to find what are th outlier we have","32eb1c2b":"# find the uniqueID","709392ab":"# find the illegal match","546e6d6e":"# CHECK PLAYER WHO KILL WITHOUT MOVING","aacf8b34":"# minimum match duration","fc0389a4":"# Team kills based on matchtype","11200bb5":"# Match Duration","43ab850d":"# visualise the data","f001d8fa":"# Normalise the maxplace column","214c2041":"# maximum match duration","fa863701":"# DATA OUTLIER","cc5ac4e2":"# find the groupID","40a7b552":"# Normalise the matchDuration column","79a85259":"# creating new features","5a610723":"# player per each group","0c884ca8":"# check out players who made kills with a distance of more than 1km","107868f9":"# Visualise the new normalise columns and the previous one to analyse it","465f5674":"# Total distance travelled","d8bcbd48":"# find matchID","c8d43b64":"# NORMALISE THE KILL COLUMN","e12c4995":"# Normalise the damageDealt column"}}