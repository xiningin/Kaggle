{"cell_type":{"44c03edd":"code","b8d40a0d":"code","6dda1de0":"code","d050d1f2":"code","42da66cc":"code","828bb5c1":"code","a34d8716":"code","ae462a78":"code","fd049f49":"code","d7537ee3":"code","097d3551":"code","8784e096":"code","6893b40f":"code","a68159df":"code","4351bacf":"code","ed85ba39":"code","d910b410":"markdown"},"source":{"44c03edd":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport gc\nimport matplotlib.pyplot as plt\nimport warnings\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler\n!pip install pandarallel -q","b8d40a0d":"large_train_df = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/train.csv', index_col='id')\n#test_df = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/test.csv', index_col='id')\n#submission = pd.read_csv('..\/input\/tabular-playground-series-sep-2021\/sample_solution.csv', index_col='id')","6dda1de0":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n    \n    for col in df.columns:\n        col_type = df[col].dtype\n        \n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n        else:\n            df[col] = df[col].astype('category')\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    \n    return df","d050d1f2":"train_df = reduce_mem_usage(large_train_df)\n#test_df = reduce_mem_usage(test_df)","42da66cc":"scaler = StandardScaler()\nscaler.fit(train_df)\ntrain_df = pd.DataFrame(scaler.transform(train_df), index=train_df.index, columns=train_df.columns)","828bb5c1":"gc.collect()","a34d8716":"print(train_df.shape)\ntrain_df.head()","ae462a78":"print(test_df.shape)\ntest_df.head()","fd049f49":"x = train_df.drop('claim', axis=1)\ny = train_df['claim']","d7537ee3":"pos = y > 0","097d3551":"feature = x.sem(axis=1)\nsplit = pd.concat([feature[pos], feature[~pos]], axis=1)\nsns.displot(split, bins=30, alpha=0.5).set(title='Standard mean error of Training Set)')","8784e096":"feature = x.min(axis=1)\nfeature_abs = x.abs().min(axis=1)\nsplit = pd.concat([feature[pos], feature[~pos]], axis=1)\nsplit_abs = pd.concat([feature_abs[pos], feature_abs[~pos]], axis=1)\nsns.displot(split, bins=30, alpha=0.5)\nsns.displot(split_abs, bins=30, alpha=0.5)","6893b40f":"train_df.isnull().sum()","a68159df":"test_df.isnull().sum()","4351bacf":"!pip install git+git:\/\/github.com\/AutoViML\/AutoViz.git -q\n!pip install xlrd -q","ed85ba39":"from autoviz.AutoViz_Class import AutoViz_Class\n\nAV = AutoViz_Class()\ndftc = AV.AutoViz(\n    filename='', \n    sep='' , \n    depVar='claim', \n    dfte=train_df, \n    header=0, \n    verbose=1, \n    lowess=False, \n    chart_format='png',\n    max_rows_analyzed=1000000\n)","d910b410":"### Check for missing values"}}