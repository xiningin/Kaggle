{"cell_type":{"24a2c668":"code","30b6ef58":"code","c14fe6b9":"code","e0460c73":"code","bc145f55":"code","bd90a7e9":"code","38acebdd":"code","7bb05c41":"code","17ca6bd1":"code","653a3e6a":"code","a8928373":"code","2e802e03":"code","502671b2":"code","c21506ad":"code","7212dd1c":"code","0aeb3c38":"code","9c8c4f9d":"code","0e74c526":"code","2588c573":"code","cb14cc9f":"code","4f5879ea":"code","7efff87d":"code","51f57003":"code","ca28f810":"code","692f969a":"code","e0b9b1ed":"code","0f4d40a8":"code","e812be61":"code","732f116d":"code","57e6a4da":"code","2b6b2d67":"code","93fca216":"code","71ee0b83":"code","34fcbfc9":"code","1d7dc1e0":"code","c6ccdb45":"code","366aad57":"code","2d1fc200":"code","f9e2c953":"code","323c7035":"code","cba56569":"code","d5afeb39":"code","1be154a2":"markdown"},"source":{"24a2c668":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","30b6ef58":"# libraries and set option\nimport warnings\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.exceptions import ConvergenceWarning\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV\nimport missingno as msno\nfrom lightgbm import LGBMRegressor\nfrom sklearn.neighbors import LocalOutlierFactor\n\nwarnings.simplefilter(action='ignore', category=FutureWarning)\nwarnings.simplefilter(\"ignore\", category=ConvergenceWarning)\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\npd.set_option('display.float_format', lambda x: '%.4f' % x)","c14fe6b9":"# read data set\ndf_ = pd.read_csv('..\/input\/home-credit-default-risk\/previous_application.csv')\ndf = df_.copy()","e0460c73":"# EDA and Data Preprocessing\nprint(df.info())\nprint('############################')\nprint(df.head(3))\nprint('############################')\nprint(df.dtypes.value_counts())\nprint('############################')","bc145f55":"df.describe().T","bd90a7e9":"# categorical and numerical columns\ncat_cols = [col for col in df.columns if df[col].dtypes == 'O']\nnum_cols = [col for col in df.columns if df[col].dtypes != 'O']\nprint(cat_cols)\nprint('#######################')\nprint(num_cols)","38acebdd":"# Number of unique classes in each cat_cols and num_cols column\nprint('############ CAT_COLS #############')\nprint(df[cat_cols].apply(pd.Series.nunique, axis = 0))\nprint('########### NUM_COLS ##############')\nprint(df[num_cols].apply(pd.Series.nunique, axis = 0))","7bb05c41":"# days 365243 values to nan\ndf['DAYS_FIRST_DRAWING'].replace(365243, np.nan, inplace=True)\ndf['DAYS_FIRST_DUE'].replace(365243, np.nan, inplace=True)\ndf['DAYS_LAST_DUE_1ST_VERSION'].replace(365243, np.nan, inplace=True)\ndf['DAYS_LAST_DUE'].replace(365243, np.nan, inplace=True)\ndf['DAYS_TERMINATION'].replace(365243, np.nan, inplace=True)","17ca6bd1":"# change XNA, XAP to NAN for cat_cols.\nna = ['XNA', 'XAP']\nfor col in cat_cols:\n    for n in na:\n        df.loc[df[col] == n, col] = np.nan","653a3e6a":"# looking missing values and their ratio in all data\ndef missing_values_table(df):\n\n        mis_val = df.isnull().sum()\n\n        mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n\n        mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n\n        mis_val_table_ren_columns = mis_val_table.rename(\n\n        columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n\n        mis_val_table_ren_columns = mis_val_table_ren_columns[\n\n            mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n\n        '% of Total Values', ascending=False).round(1)\n\n    \n\n        print (\"Your selected dataframe has \" + str(df.shape[1]) + \" columns.\\n\"     \n\n            \"There are \" + str(mis_val_table_ren_columns.shape[0]) +\n\n              \" columns that have missing values.\")\n\n       \n\n        return mis_val_table_ren_columns\n\nmissing_values_table(df)","a8928373":"# summary of categorical columns\ndef cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts() \/ len(dataframe)}))\n\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()\n\n\n\nfor col in cat_cols:\n        cat_summary(df, col, plot=True)","2e802e03":"# summary of numerical columns\ndef num_summary(dataframe, numerical_col, plot=False):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        dataframe[numerical_col].hist(bins=20)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()\n\n\nfor col in num_cols:\n    num_summary(df, col, plot=True)","502671b2":"# delete columns columns that do not contain information or \n# missing values over 80 percent of the entire data\n\ndel_cols = ['RATE_INTEREST_PRIMARY', 'RATE_INTEREST_PRIVILEGED', 'DAYS_FIRST_DRAWING',\n            'NAME_CASH_LOAN_PURPOSE','CODE_REJECT_REASON', 'FLAG_LAST_APPL_PER_CONTRACT',\n            'NFLAG_LAST_APPL_IN_DAY', 'SELLERPLACE_AREA']\ndf.drop(del_cols, axis=1, inplace=True)","c21506ad":"df.head(3)","7212dd1c":"# Looking some columns by contract status","0aeb3c38":"df.groupby(['NAME_CLIENT_TYPE', 'NAME_CONTRACT_STATUS']).agg({'AMT_CREDIT': ['count', 'sum']})","9c8c4f9d":"df.groupby(['NAME_YIELD_GROUP', 'NAME_CONTRACT_STATUS']).agg({'AMT_CREDIT': ['count', 'sum']})","0e74c526":"df.groupby(['NAME_PRODUCT_TYPE', 'NAME_CONTRACT_STATUS']).agg({'AMT_CREDIT': ['count', 'sum']})","2588c573":"df.groupby(['NAME_PORTFOLIO', 'NAME_CONTRACT_STATUS']).agg({'AMT_CREDIT': ['count', 'sum']})","cb14cc9f":"# FEATURE ENGINEERING","4f5879ea":"df.head()","7efff87d":"# X-sell approved & Walk-in Approved\ndf['NEW_X_SELL_APPROVED'] = 0\ndf.loc[(df['NAME_PRODUCT_TYPE'] == 'x-sell') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_X_SELL_APPROVED'] = 1\n\ndf['NEW_WALK_IN_APPROVED'] = 0\ndf.loc[(df['NAME_PRODUCT_TYPE'] == 'walk-in') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_WALK_IN_APPROVED'] = 1\n\ndf.head()","51f57003":"# Customer status approved \ndf['NEW_REPEATER_APPROVED'] = 0\ndf.loc[(df['NAME_CLIENT_TYPE'] == 'Repeater') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_REPEATER_APPROVED'] = 1\n\ndf['NEW_NEW_CUST_APPROVED'] = 0\ndf.loc[(df['NAME_CLIENT_TYPE'] == 'New') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_NEW_CUST_APPROVED'] = 1\n\ndf['NEW_REFRESHED_APPROVED'] = 0\ndf.loc[(df['NAME_CLIENT_TYPE'] == 'Refreshed') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_REFRESHED_APPROVED'] = 1\n\n\ndf.head()","ca28f810":"# Purpose of application approved\ndf['NEW_CARDS_APPROVED'] = 0\ndf.loc[(df['NAME_PORTFOLIO'] == 'Cards') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_CARDS_APPROVED'] = 1\n\ndf['NEW_CARS_APPROVED'] = 0\ndf.loc[(df['NAME_PORTFOLIO'] == 'Cars') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_CARS_APPROVED'] = 1\n\ndf['NEW_CASH_APPROVED'] = 0\ndf.loc[(df['NAME_PORTFOLIO'] == 'Cash') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_CASH_APPROVED'] = 1\n\ndf['NEW_POS_APPROVED'] = 0\ndf.loc[(df['NAME_PORTFOLIO'] == 'POS') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_POS_APPROVED'] = 1\n\n\ndf.head()","692f969a":"# Interest ratio approved\ndf['NEW_HIGH_APPROVED'] = 0\ndf.loc[(df['NAME_YIELD_GROUP'] == 'high') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_HIGH_APPROVED'] = 1\n\ndf['NEW_MIDDLE_APPROVED'] = 0\ndf.loc[(df['NAME_YIELD_GROUP'] == 'middle') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_MIDDLE_APPROVED'] = 1\n\ndf['NEW_LOWACTION_APPROVED'] = 0\ndf.loc[(df['NAME_YIELD_GROUP'] == 'low_action') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_LOWACTION_APPROVED'] = 1\n\ndf['NEW_LOWNORMAL_APPROVED'] = 0\ndf.loc[(df['NAME_YIELD_GROUP'] == 'low_normal') &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_LOWNORMAL_APPROVED'] = 1\n\n\ndf.head()","e0b9b1ed":"# Application hour convert to categorical\ndf.loc[(df['HOUR_APPR_PROCESS_START'] >= 0) & \n       (df['HOUR_APPR_PROCESS_START'] <= 6), 'NEW_APP_DAY_TIME'] = 'night'\n\ndf.loc[(df['HOUR_APPR_PROCESS_START'] > 6) & \n       (df['HOUR_APPR_PROCESS_START'] <= 12), 'NEW_APP_DAY_TIME'] = 'morning'\n\ndf.loc[(df['HOUR_APPR_PROCESS_START'] > 12) & \n       (df['HOUR_APPR_PROCESS_START'] <= 18), 'NEW_APP_DAY_TIME'] = 'afternoon'\n\ndf.loc[(df['HOUR_APPR_PROCESS_START'] > 18) & \n       (df['HOUR_APPR_PROCESS_START'] < 24), 'NEW_APP_DAY_TIME'] = 'evening'\n\ndf.drop('HOUR_APPR_PROCESS_START', axis=1, inplace=True)\n\ndf.head()","0f4d40a8":"# Client apply with someone\ndf.loc[df['NAME_TYPE_SUITE'] == 'Unaccompanied', 'NEW_ACCOMPANIED'] = 0\ndf.loc[df['NAME_TYPE_SUITE'] != 'Unaccompanied', 'NEW_ACCOMPANIED'] = 1\ndf.loc[df['NAME_TYPE_SUITE'].isnull(), 'NEW_ACCOMPANIED'] = np.nan\n\ndf.drop('NAME_TYPE_SUITE', axis=1, inplace=True)\ndf.head()","e812be61":"# Lookking some variable\ndf[['AMT_ANNUITY', 'AMT_APPLICATION', 'AMT_CREDIT', \n    'AMT_GOODS_PRICE', 'AMT_DOWN_PAYMENT', 'CNT_PAYMENT']].head()","732f116d":"# credit requested \/ credit given ratio\n# df['NEW_APP_CREDIT_RATIO'] = df['AMT_APPLICATION'] \/ df['AMT_CREDIT']\ndf['NEW_APP_CREDIT_RATIO'] = df['AMT_APPLICATION'].div(df['AMT_CREDIT']).replace(np.inf, 0)\n\n# loan installment \/ credit amount ratio\ndf['NEW_ANNUITY_CREDIT_RATIO'] = df['AMT_ANNUITY'] \/ df['AMT_CREDIT']\n\n# goods price \/ credit amount ratio\n# df['NEW_APPS_GOODS_CREDIT_RATIO'] = df['AMT_GOODS_PRICE'] \/ df['AMT_CREDIT']\n# df['NEW_APPS_GOODS_CREDIT_RATIO'] = df['AMT_GOODS_PRICE'].div(df['AMT_CREDIT']).replace(np.inf, 0)\n\n# credit amount \/ goods price\ndf['NEW_CREDIT_GOODS_RATIO'] = df['AMT_CREDIT'].div(df['AMT_GOODS_PRICE']).replace(np.inf, 0)\n\n# interest amount\ndf['NEW_AMT_INTEREST'] = df['CNT_PAYMENT'] * df['AMT_ANNUITY'] - df['AMT_CREDIT']\n\n# interest ratio\ndf['NEW_INTEREST_RATIO'] = df['NEW_AMT_INTEREST'] \/ df['AMT_CREDIT']\n\n# needed amount \/ credit amount (belki silinir)\ndf['NEW_AMT_NEEDED_CREDIT_RATIO'] = (df['AMT_GOODS_PRICE'] - df['AMT_DOWN_PAYMENT'])\/ df['AMT_CREDIT']","57e6a4da":"# risk assessment by credit_goods_ratio\ndf.loc[df['NEW_CREDIT_GOODS_RATIO'] >= 0.80, 'NEW_CREDIT_GOODS_RISK'] = 1\ndf.loc[df['NEW_CREDIT_GOODS_RATIO'] < 0.80, 'NEW_CREDIT_GOODS_RISK'] = 0\n\ndf.head()","2b6b2d67":"df.groupby(['NEW_CREDIT_GOODS_RISK', 'NAME_CONTRACT_STATUS']).agg({'AMT_CREDIT': ['count', 'mean'],\n                                                                  'AMT_GOODS_PRICE': ['count', 'mean']})","93fca216":"# risk to approved\ndf['NEW_RISK_APPROVED'] = 0\ndf.loc[(df['NEW_CREDIT_GOODS_RISK'] == 1) &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_RISK_APPROVED'] = 1\n\n# non risk to approved\ndf['NEW_NONRISK_APPROVED'] = 0\ndf.loc[(df['NEW_CREDIT_GOODS_RISK'] == 0) &\n       (df['NAME_CONTRACT_STATUS'] == 'Approved'), 'NEW_NONRISK_APPROVED'] = 1\n\ndf.head()","71ee0b83":"# looking correlation of numerical variables\ncorr_cols = ['AMT_ANNUITY', 'AMT_APPLICATION', 'AMT_CREDIT', 'AMT_GOODS_PRICE','AMT_DOWN_PAYMENT',\n             'CNT_PAYMENT','NEW_APP_CREDIT_RATIO','NEW_ANNUITY_CREDIT_RATIO',\n             'NEW_APPS_GOODS_CREDIT_RATIO','NEW_AMT_INTEREST', 'NEW_INTEREST_RATIO', \n             'NEW_AMT_NEEDED_CREDIT_RATIO']\ndf[corr_cols].corr()","34fcbfc9":"# Application weekdays cycle encoding\ndf['WEEKDAY_APPR_PROCESS_START'] = df['WEEKDAY_APPR_PROCESS_START'].map({\n    'MONDAY': 1,\n    'TUESDAY': 2,\n    'WEDNESDAY': 3,\n    'THURSDAY': 4,\n    'FRIDAY': 5, \n    'SATURDAY': 6, \n    'SUNDAY': 7})\n\ndf['NEW_WEEKDAY_SIN'] = np.sin(2 * np.pi * df['WEEKDAY_APPR_PROCESS_START']\/7)\ndf['NEW_WEEKDAY_COS'] = np.cos(2 * np.pi * df['WEEKDAY_APPR_PROCESS_START']\/7)\n\ndf.drop('WEEKDAY_APPR_PROCESS_START', axis=1, inplace=True)\n\ndf.head()","1d7dc1e0":"# first payment delay\ndf['NEW_FIRSTDUE_DEFAULT'] = df['DAYS_LAST_DUE_1ST_VERSION'] - df['DAYS_FIRST_DUE']\ndf[\"NEW_FIRSTDUE_DEFAULT\"] = df['NEW_FIRSTDUE_DEFAULT'].apply(lambda x: 1 if (x>0) else 0)\n\ndf.head()","c6ccdb45":"# last payment delay\ndf['NEW_LASTDUE_DEFAULT'] = df['DAYS_LAST_DUE'] - df['DAYS_TERMINATION']\ndf[\"NEW_LASTDUE_DEFAULT\"] = df['NEW_LASTDUE_DEFAULT'].apply(lambda x: 1 if (x>0) else 0)\n\ndf.head()","366aad57":"# summary of new categorical columns\ndef cat_summary(dataframe, col_name, plot=False):\n    print(pd.DataFrame({col_name: dataframe[col_name].value_counts(dropna=False),\n                        \"Ratio\": 100 * dataframe[col_name].value_counts(dropna=False) \/ len(dataframe)}))\n\n    if plot:\n        sns.countplot(x=dataframe[col_name], data=dataframe)\n        plt.show()\n\n\ncheck_cols = ['NEW_X_SELL_APPROVED','NEW_WALK_IN_APPROVED','NEW_REPEATER_APPROVED','NEW_NEW_CUST_APPROVED',\n             'NEW_REFRESHED_APPROVED','NEW_CARDS_APPROVED','NEW_CARS_APPROVED','NEW_CASH_APPROVED',\n             'NEW_POS_APPROVED','NEW_HIGH_APPROVED', 'NEW_MIDDLE_APPROVED','NEW_LOWACTION_APPROVED',\n             'NEW_LOWNORMAL_APPROVED','NEW_FIRSTDUE_DEFAULT', 'NEW_LASTDUE_DEFAULT',\n              'NEW_CREDIT_GOODS_RISK', 'NEW_RISK_APPROVED', 'NEW_NONRISK_APPROVED']\n\nfor col in check_cols:\n    cat_summary(df, col, plot=True)","2d1fc200":"# summary of new numerical columns\ndef num_summary(dataframe, numerical_col, plot=False):\n    quantiles = [0.05, 0.10, 0.20, 0.30, 0.40, 0.50, 0.60, 0.70, 0.80, 0.90, 0.95, 0.99]\n    print(dataframe[numerical_col].describe(quantiles).T)\n\n    if plot:\n        dataframe[numerical_col].hist(bins=20)\n        plt.xlabel(numerical_col)\n        plt.title(numerical_col)\n        plt.show()\n\nnew_num_cols = ['NEW_ANNUITY_CREDIT_RATIO','NEW_AMT_INTEREST', 'NEW_INTEREST_RATIO',\n                'NEW_CREDIT_GOODS_RATIO','NEW_AMT_NEEDED_CREDIT_RATIO', 'NEW_APP_CREDIT_RATIO', \n                'NEW_APPS_GOODS_CREDIT_RATIO']\n        \nfor col in new_num_cols:\n    num_summary(df, col, plot=True)","f9e2c953":"# Rare Encoding\na = ['Auto Accessories', 'Jewelry', 'Homewares', 'Medical Supplies', 'Vehicles', 'Sport and Leisure',\n     'Gardening', 'Other', 'Office Appliances', 'Tourism', 'Medicine', 'Direct Sales', 'Fitness',\n     'Additional Service', 'Education', 'Weapon', 'Insurance', 'House Construction','Animals']\ndf[\"NAME_GOODS_CATEGORY\"] = df[\"NAME_GOODS_CATEGORY\"].replace(a, 'others')\n\nb = ['Channel of corporate sales', 'Car dealer']\ndf[\"CHANNEL_TYPE\"] = df[\"CHANNEL_TYPE\"].replace(b, 'Other_Channel')\n\nc = ['Auto technology', 'Jewelry', 'MLM partners', 'Tourism']\ndf[\"NAME_SELLER_INDUSTRY\"] = df[\"NAME_SELLER_INDUSTRY\"].replace(c, 'Others')\n\nd = ['Non-cash from your account','Cashless from the account of the employer']\ndf[\"NAME_PAYMENT_TYPE\"] = df[\"NAME_SELLER_INDUSTRY\"].replace(d, 'Others')\n\ndf.head()","323c7035":"df.shape","cba56569":"# One hot encoding\ndef one_hot_encoder(df, nan_as_category = True):\n    original_columns = list(df.columns)\n    categorical_columns = [col for col in df.columns if df[col].dtype == 'object']\n    df = pd.get_dummies(df, columns= categorical_columns, dummy_na= nan_as_category)\n    new_columns = [c for c in df.columns if c not in original_columns]\n    return df, new_columns\n\nnew_df, cat_cols2 = one_hot_encoder(df, nan_as_category = True)","d5afeb39":"print(new_df.shape)\nprint('#########################')\nprint(new_df.head())","1be154a2":"### PREVIOUS APPLICATION DATA SET COLUMNS DESCRIPTION\n\n#### 1. SK_ID_PREV (int64)\nHome Credit kredisi ile ili\u015fkili \u00f6nceki kredilerin ID\u2019si.     \n(EN: ID of previous credit in Home credit related to loan in our sample.)\n\n#### 2. SK_ID_CURR (int64)\nKredinin ID numaras\u0131    \n(EN: ID of loan in our sample)\n\n#### 3. NAME_CONTRACT_TYPE (object)\nOnceki ba\u015fvurunun s\u00f6zle\u015fme t\u00fcr\u00fc (Nakit kredi, t\u00fcketici kredisi (POS),..)    \n(EN: Contract product type (Cash loan, consumer loan (POS) ,...) of the previous application)\n\n#### 4. AMT_ANNUITY (float64)\nBir \u00f6nceki ba\u015fvurunun \u00f6denecek taksit tutar\u0131.     \n(EN: Annuity of previous application)\n\n#### 5. AMT_APPLICATION (float64)\nOnceki basvurusunda musteri ne kadar kredi istedi? Ba\u015fvurdu\u011fu kredi miktar\u0131.   \n(EN: For how much credit did client ask on the previous application)\n\n#### 6. AMT_CREDIT (float64)\nOnceki ba\u015fvurusunda aldigi kredi tutari. Bankan\u0131n verdigi kredi tutari.      \n(Final credit amount on the previous application.)\n\n#### 7. AMT_DOWN_PAYMENT (float64)\nKredi icin basvurulan urunun pesinat miktari.     \n(EN: Down payment on the previous application.)\n\n#### 8. AMT_GOODS_PRICE (float64)\nKredi ile almak istenilen urunun fiyati. Ev, araba vs. gibi     \n(EN: Goods price of good that client asked for (if applicable) on the previous application)\n\n#### 9. WEEKDAY_APPR_PROCESS_START (object)\nOnceki ba\u015fvuru hangi gun yapilmis?           \n(EN:On which day of the week did the client apply for previous application)\n\n#### 10. HOUR_APPR_PROCESS_START (int64)\nKredi basvuru saati    \n(EN: Approximately at what day hour did the client apply for the previous application rounded)\n\n#### 11. FLAG_LAST_APPL_PER_CONTRACT (object)\nBir \u00f6nceki s\u00f6zle\u015fme i\u00e7in son ba\u015fvuru mu? Bilgisi. Bazen m\u00fc\u015fteri ya da memurun hatas\u0131 ile tek bir s\u00f6zle\u015fme i\u00e7in daha fazla ba\u015fvuru olabilir.     \n(EN: Flag if it was last application for the previous contract.)\n\n#### 12. NFLAG_LAST_APPL_IN_DAY (int64)\nM\u00fc\u015fterinin ba\u015fvurusu, o g\u00fcn yapt\u0131\u011f\u0131 son ba\u015fvuru mu? Bilgisi. Nadiren de olsa 2 kez olabilir. 2 basvuru cogunlukla sistem hatasi olabiliyor       \n(EN: Flag if the application was the last application per day of the client.)\n\n#### NFLAG_MICRO_CASH\nMikro finans kredisi var mi?      \n(EN: Flag Micro finance loan)\n\n#### 13. RATE_DOWN_PAYMENT (float64) \nNormallestirilmis onceki kredinin, normallestirilmis pesinat orani      \n(EN: Down payment rate normalized on previous credit normalized)\n\n#### 14. RATE_INTEREST_PRIMARY (float64)\nNormallestirilmis onceki kredinin, normalle\u015ftirilmi\u015f temel (birincil) faiz oran\u0131      \n(EN: Interest rate normalized on previous credit normalized)\n\n#### 15. RATE_INTEREST_PRIVILEGED (float64)\nNormallestirilmis onceki kredinin, normalle\u015ftirilmi\u015f temel (oncelikli) faiz oran\u0131            \n(EN: Interest rate normalized on previous credit normalized)\n\n#### 16. NAME_CASH_LOAN_PURPOSE (object)\nNakit kredinin amac\u0131.      \n(EN: Purpose of the cash loan)\n\n#### 17. NAME_CONTRACT_STATUS (object)\nKredinin s\u00f6zle\u015fme durumu (onaylandi, iptal ...)     \n(EN: Contract status (approved, cancelled, ...) of previous application)\n\n#### 18. DAYS_DECISION (int64)\nMevcut basvuru ile onceki basvuru arasindaki zaman.    \n(EN: Relative to current application when was the decision about previous application)   \n\n\n#### 19. NAME_PAYMENT_TYPE (object)\nOnceki basvuruda tercih edilen odeme metodu. Bankaya elden gibi.     \n(EN: Payment method that client chose to pay for the previous application)\n\n#### 20. CODE_REJECT_REASON (object)\nOnceki ba\u015fvurunun reddedilme kodu.        \n(EN: Why was the previous application rejected)\n\n#### 21. NAME_TYPE_SUITE (object)\nOnceki kredi basvurusunda yaninda birileri var miydi? Bilgisi      \n(EN: Who accompanied client when applying for the previous application)\n\n#### 22. NAME_CLIENT_TYPE (object)\nYeni musteri mi? Eski musteri mi? Bilgisi      \n(EN: Was the client old or new client when applying for the previous application)\n\n#### 23. NAME_GOODS_CATEGORY (object)\nKredi basvurusu hangi urun grubu icin istendi. Elektronik, ev malzemeleri vs.   \n(EN: What kind of goods did the client apply for in the previous application)\n\n#### 24. NAME_PORTFOLIO (object)\nOncek ba\u015fvuru ne i\u00e7in? (Nakit, POS, kart ...)     \n(Was the previous application for CASH, POS, CARDS,)\n\n#### 25. NAME_PRODUCT_TYPE (object)\nKredi basvrusu \u00e7apraz sat\u0131\u015f ile mi? Yoksa direkt talep ile mi?     \n(EN: Was the previous application x-sell or walk-in)\n\n#### 26. CHANNEL_TYPE (object)\nHangi kanal\u0131 kullanarak m\u00fc\u015fteriyi elde ettik?     \n(EN: Through which channel we acquired the client on the previous application)\n\n#### 27. SELLERPLACE_AREA (int64)\nOnceki basvurunun saticinin satis yaptigi yerin alani     \n(EN: Selling area of seller place of the previous application)\n\n#### 28. NAME_SELLER_INDUSTRY (object)\nSat\u0131c\u0131n\u0131n end\u00fcstrisi - kredi icin istenen urunun endiustrisi olabilir?     \n(EN: The industry of the seller)\n\n#### 29. CNT_PAYMENT (float64)\nYapilan odeme sayilari    \n(EN: Term of previous credit at application of the previous application)\n\n#### 30. NAME_YIELD_GROUP (object)\nOnceki kredinin faiz orani degeri. Dusuk, orta, yuksek seklinde gruplanmis.    \n(EN: Grouped interest rate into small medium and high of the previous application grouped)\n\n#### 31. PRODUCT_COMBINATION (object)\nOnceki basvurunun detaylarinin bir satirda gosterilmesi. Yani, pos, x-sell, low gibi     \n(EN: Detailed product combination of the previous application)\n\n#### 32. DAYS_FIRST_DRAWING (float64)\nMevcut ba\u015fvurunun ba\u015fvuru tarihine g\u00f6re, bir \u00f6nceki ba\u015fvurunun ilk \u00f6demesi arasindaki gun farki.    \n(EN: Relative to application date of current application when was the first disbursement of the previous application time only relative to the application)\n\n#### 33. DAYS_FIRST_DUE (float64)\nMevcut ba\u015fvurunun ba\u015fvuru tarihine g\u00f6re, bir \u00f6nceki ba\u015fvurunun ilk vadesi arasinda olmasi gereken gun sayisi     \n(EN: Relative to application date of current application when was the first due supposed to be of the previous application time only relative to the application)\n\n#### 34. DAYS_LAST_DUE_1ST_VERSION (float64)\nMevcut ba\u015fvurunun ba\u015fvuru tarihine g\u00f6re, bir \u00f6nceki ba\u015fvurunun ilk vadesi arasindaki zaman farki (son odemenin ilk versiyonu)       \n(EN: Relative to application date of current application when was the first due of the previous application time only relative to the application)\n\n#### 35. DAYS_LAST_DUE (float64)\nMevcut ba\u015fvurunun ba\u015fvuru tarihine g\u00f6re, bir \u00f6nceki ba\u015fvurunun son odeme tarihi arasindaki zaman farki     \n(EN: Relative to application date of current application when was the last due date of the previous application time only relative to the application)\n\n#### 36. DAYS_TERMINATION (float64)\nMevcut ba\u015fvurunun ba\u015fvuru tarihine g\u00f6re, bir \u00f6nceki ba\u015fvurunun beklenen biti\u015f zamani     \n(EN: Relative to application date of current application when was the expected termination of the previous application time only relative to the application)\n\n#### 37. NFLAG_INSURED_ON_APPROVAL (float64)\nM\u00fc\u015fteri bir \u00f6nceki basvurusunda sigorta talep etti mi?      \n(EN: Did the client requested insurance during the previous application)"}}