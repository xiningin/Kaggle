{"cell_type":{"909be2d2":"code","bd318da1":"code","425cf269":"code","9b53e503":"code","61bfce6c":"code","d1ccd9c7":"code","b6100114":"code","46fdd8c5":"code","4aa1befa":"code","ff3a40ca":"code","975e88a3":"code","dfed0559":"code","72740154":"code","656b7bbb":"code","7cf2fd63":"code","a05da3f9":"code","67665eac":"code","7823c758":"code","6e81f938":"code","16ac7605":"code","bff6d95c":"code","83dda640":"code","70c50c4b":"code","97345293":"code","1c13b169":"code","e9ab1269":"markdown","b5494ea9":"markdown","0d268a02":"markdown","73c82364":"markdown","f871d7a5":"markdown","709d707b":"markdown","38e24e60":"markdown","15b50c5a":"markdown","5d1812c1":"markdown","3041b3ac":"markdown","2d96dcb6":"markdown","fef17956":"markdown","b4765851":"markdown","cc000770":"markdown","b2d3e15c":"markdown","d14925da":"markdown","b17757b5":"markdown","492ec911":"markdown"},"source":{"909be2d2":"import os\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt","bd318da1":"root = r\"..\/input\/petfinder-pawpularity-score\/\"\n\nsample_submission = pd.read_csv(os.path.join(root, \"sample_submission.csv\"))\ntest = pd.read_csv(os.path.join(root, \"test.csv\"))\ntrain = pd.read_csv(os.path.join(root, \"train.csv\"))","425cf269":"display(sample_submission.head()), sample_submission.shape","9b53e503":"sample_submission.info()","61bfce6c":"sample_submission.Pawpularity.value_counts()","d1ccd9c7":"sample_submission.Pawpularity.nunique()","b6100114":"sample_submission.Pawpularity.unique()","46fdd8c5":"train","4aa1befa":"train.shape, train.info()","ff3a40ca":"analyzed_columns = [\"Eyes\", \"Face\", \"Near\", \"Action\", \"Accessory\", \"Group\", \"Collage\", \"Human\", \"Occlusion\",\n                    \"Info\", \"Blur\"]\n\n\n# Remember 1 is for present and 0 is for absent.\nfor col in analyzed_columns:\n    display(train[col].value_counts()); print(\"________________________________\")\n    \n# Most images show eyes (though some might not). \n# Encoding human information may be useful here as we (humans) always tend to look at the eyes.\n# Eyes may be very important and can be weighed higher or used as a dominant feature in predicting score.\n# So can face. \n# Near may be also important as we feel closer to the animal through the visual. \n# Action can be important. We often laugh or overload with cuteness from seeing animals doing stuff.\n# Accessory is a huge part and can work against the model in a spatial setting but does encourage\n# people to adopt as it enhances their \"cuteness\".\n# Group may deter the adoption of any specific animal as it may increase indecisiveness.\n# Collages can definitely work well. \n# Humans: NOPE.\n# Occlusion works AGAINST the adoption of the pet!\n# Info may work well if they have a cute name.\n# Blur works AGAINST adoption!","975e88a3":"train.Pawpularity.hist()","dfed0559":"train.Pawpularity.dtype","72740154":"train.Pawpularity.nunique()","656b7bbb":"train.Pawpularity.value_counts()  # Interesting....it seems like a regression problem yet\n# there are only 100 classes (from the training data).\n\n# Question: could there be more \"classes\" that *aren't* in the training data?\n# This could pose a problem for the classification task.\n\n# An idea: maybe we could turn this into a classification task with a DNN to encode feature info from metadata\n# and intermingle this with a large CNN (EffNet maybe?) and the classification task is 101 classes.\n# The last class is others and if this CNN predicts this as the highest probability, then the image + metadata\n# will be deferred to a regression model!","7cf2fd63":"test.columns","a05da3f9":"test","67665eac":"test.shape  # They make it very easy for us to do fast submissions!","7823c758":"from PIL import Image","6e81f938":"Image.open(r\"..\/input\/petfinder-pawpularity-score\/test\/4128bae22183829d2b5fea10effdb0c3.jpg\")","16ac7605":"Image.open(r\"..\/input\/petfinder-pawpularity-score\/train\/0007de18844b0dbbb5e1f607da0606e0.jpg\")","bff6d95c":"# !pip install wandb --upgrade -qqq\n\n# import wandb\n# wandb.login()","83dda640":"len(os.listdir(\"..\/input\/petfinder-pawpularity-score\/train\")) \/ 4","70c50c4b":"train[train.Id == \"0007de18844b0dbbb5e1f607da0606e0\"].Pawpularity","97345293":"# from glob import glob\n# from tqdm import tqdm\n\n# list_of_image_paths = glob(r\"..\/input\/petfinder-pawpularity-score\/train\/*\")\n\n# data = []\n# cnt = 0\n# for image_path in tqdm(list_of_image_paths):\n#     imageid = image_path.split(\"\/\")[-1].split(\".\")[0]\n#     data.append([train[train.Id == imageid].Pawpularity.values[0], wandb.Image(Image.open(image_path))])\n# #     if cnt == 10: break\n# #     cnt += 1","1c13b169":"# run = wandb.init(project=\"paw-pictures\", name=\"paw-dataset\")\n# my_table = wandb.Table(columns=[\"Pawpularity Score\", \"Images\"], \n#                        data=data)\n# run.log({\"paw-dataset\": my_table})\n# run.finish()","e9ab1269":"# Looking at Train CSV","b5494ea9":"# Looking at the Images","0d268a02":"```\nExample Test Data\nIn addition to the training data, we include some randomly generated example test data to help you author submission code. When your submitted notebook is scored, this example data will be replaced by the actual test data (including the sample submission).\n\ntest\/ - Folder containing randomly generated images in a format similar to the training set photos. The actual test data comprises about 6800 pet photos similar to the training set photos.\ntest.csv - Randomly generated metadata similar to the training set metadata.\nsample_submission.csv - A sample submission file in the correct format.\n```","73c82364":"# Looking at Pawpularity!","f871d7a5":"# Loading in Dfs\n","709d707b":"# Exploring Sample Submission","38e24e60":"# Setup","15b50c5a":"Hmmmm, this raises a question. \"Randomly generated\" metadata. Do they ever specify if they will put actual metadata? I assume they will do that.","5d1812c1":"Wow, that puppy is so cute! Ok, jokes aside, this is just noise. ","3041b3ac":"I wonder why there is a little bump at the 100. ","2d96dcb6":"```\nPhoto Metadata\nThe train.csv and test.csv files contain metadata for photos in the training set and test set, respectively. Each pet photo is labeled with the value of 1 (Yes) or 0 (No) for each of the following features:\n\nFocus - Pet stands out against uncluttered background, not too close \/ far.\nEyes - Both eyes are facing front or near-front, with at least 1 eye \/ pupil decently clear.\nFace - Decently clear face, facing front or near-front.\nNear - Single pet taking up significant portion of photo (roughly over 50% of photo width or height).\nAction - Pet in the middle of an action (e.g., jumping).\nAccessory - Accompanying physical or digital accessory \/ prop (i.e. toy, digital sticker), excluding collar and leash.\nGroup - More than 1 pet in the photo.\nCollage - Digitally-retouched photo (i.e. with digital photo frame, combination of multiple photos).\nHuman - Human in the photo.\nOcclusion - Specific undesirable objects blocking part of the pet (i.e. human, cage or fence). Note that not all blocking objects are considered occlusion.\nInfo - Custom-added text or labels (i.e. pet name, description).\nBlur - Noticeably out of focus or noisy, especially for the pet\u2019s eyes and face. For Blur entries, \u201cEyes\u201d column is always set to 0.\n```","fef17956":"[Check out my first ever table visualization of a dataset!](https:\/\/wandb.ai\/vincenttu\/paw-pictures?workspace=user-vincenttu)","b4765851":"They will be replacing the test data with their own test images and metadata I presume. ","cc000770":"```\nHow Pawpularity Score Is Derived\nThe Pawpularity Score is derived from each pet profile's page view statistics at the listing pages, using an algorithm that normalizes the traffic data across different pages, platforms (web & mobile) and various metrics.\nDuplicate clicks, crawler bot accesses and sponsored profiles are excluded from the analysis.\n```","b2d3e15c":"Let's take a look at multiple photos.","d14925da":"# Looking at Test CSV","b17757b5":"THAT's an actual puppy. ","492ec911":"Seems like building a custom loss function to assess pawpularity would not be possible. I saw somewhere a Kaggle grandmaster was cheating by webscraping the scores.\ud83d\ude33"}}