{"cell_type":{"eba0ed83":"code","10070f61":"code","56c7962c":"code","9998d2d7":"code","a5811758":"code","48a936ac":"code","299ff3f3":"code","63ecd47f":"code","f83b86b4":"code","af6df16a":"code","5828212c":"code","8ca5d125":"code","ed21d407":"code","dd483dab":"code","f4a2544d":"code","33102bbe":"markdown","f23e5cbe":"markdown","ae92b328":"markdown","d843860a":"markdown","9db1e0e0":"markdown"},"source":{"eba0ed83":"!pip install -q -U git+https:\/\/github.com\/mljar\/mljar-supervised.git@dev","10070f61":"import pandas as pd\nimport numpy as np\n\nfrom supervised.automl import AutoML \n\nimport warnings\nwarnings.filterwarnings(\"ignore\")","56c7962c":"df_train = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/train.csv\")\ndf_test = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/test.csv\")\ndf_sub = pd.read_csv(\"..\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")\n\ntargets = ['target_carbon_monoxide', 'target_benzene', 'target_nitrogen_oxides']\ndf_train[targets] = np.log1p(df_train[targets]).values","9998d2d7":"import math\n\ndef pb_add(X):\n    X['day'] = X.date_time.dt.weekday\n    is_odd = (X['sensor_4'] < 646) & (X['absolute_humidity'] < 0.238)\n    X['is_odd'] = is_odd\n    diff = X['date_time'] - min(X['date_time'])\n    trend = diff.dt.days\n    X['f1s'] = np.sin(trend * 2 * math.pi \/ (365 * 1)) \n    X['f1c'] = np.cos(trend * 2 * math.pi \/ (365 * 1))\n    X['f2s'] = np.sin(2 * math.pi * trend \/ (365 * 2)) \n    X['f2c'] = np.cos(2 * math.pi * trend \/ (365 * 2)) \n    X['f3s'] = np.sin(2 * math.pi * trend \/ (365 * 3)) \n    X['f3c'] = np.cos(2 * math.pi * trend \/ (365 * 3)) \n    X['f4s'] = np.sin(2 * math.pi * trend \/ (365 * 4)) \n    X['f4c'] = np.cos(2 * math.pi * trend \/ (365 * 4)) \n    X['fh1s'] = np.sin(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 1))\n    X['fh1c'] = np.cos(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 1))\n    X['fh2s'] = np.sin(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 2))\n    X['fh2c'] = np.cos(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 2))\n    X['fh3s'] = np.sin(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 3))\n    X['fh3c'] = np.cos(diff.dt.seconds * 2 * math.pi \/ ( 3600 * 24 * 3))\n    \n    sensor_features = [\n        'deg_C', \n        'relative_humidity', 'absolute_humidity', \n        'sensor_1', 'sensor_2', 'sensor_3', 'sensor_4', 'sensor_5' ]\n    \n    lags = [-1, -4, -24, -7 * 24]  \n    for sensor_feature in sensor_features:\n        this = X[sensor_feature]\n\n        for lag in lags:\n            feature = f'{sensor_feature}_{abs(lag)}b'\n            this_f = X[sensor_feature].shift(lag)\n            X[feature] = (this_f - this).fillna(0)\n        # look forwards\n        for lag in lags:\n            feature = f'{sensor_feature}_{abs(-lag)}f'\n            this_f = X[sensor_feature].shift(-lag)\n            X[feature] = (this_f - this).fillna(0)\n            \n    return X","a5811758":"all_data = pd.concat([df_train, df_test])\nall_data['date_time'] = pd.to_datetime(all_data['date_time'])\nmonths = all_data[\"date_time\"].dt.month[:len(df_train)]\n\nall_data[\"hour\"] = all_data[\"date_time\"].dt.hour\nall_data[\"working_hours\"] =  all_data[\"hour\"].isin(np.arange(8, 21, 1)).astype(\"int\")\nall_data[\"is_weekend\"] = (all_data[\"date_time\"].dt.dayofweek >= 5).astype(\"int\")\nall_data['hr'] = all_data.date_time.dt.hour*60+all_data.date_time.dt.minute\nall_data['satday'] = (all_data.date_time.dt.weekday==5).astype(\"int\")\nall_data[\"SMC\"] = (all_data[\"absolute_humidity\"] * 100) \/ all_data[\"relative_humidity\"]\nall_data.drop(columns = 'hour', inplace = True)\n\n\nall_data = pb_add(all_data.copy())\n\nall_data.drop(columns = 'date_time', inplace = True)","48a936ac":"target_co = 'target_carbon_monoxide'\ntarget_b = 'target_benzene' \ntarget_no ='target_nitrogen_oxides'","299ff3f3":"all_data","63ecd47f":"X_train = all_data[:len(df_train)].drop(targets, axis = 1)\ny_train_co = all_data[target_co][:len(df_train)]\ny_train_b = all_data[target_b][:len(df_train)]\ny_train_no = all_data[target_no][:len(df_train)]\n\nX_test = all_data[len(df_train):].drop(targets, axis = 1)","f83b86b4":"automl_co = AutoML(mode=\"Compete\", kmeans_features = False, total_time_limit = 12600, results_path='.\/mljar_co') \nautoml_co.fit(X_train, y_train_co)","af6df16a":"automl_co.get_leaderboard()","5828212c":"automl_b = AutoML(mode=\"Compete\", kmeans_features = False, total_time_limit = 3600, results_path='.\/mljar_b') \nautoml_b.fit(X_train, y_train_b)","8ca5d125":"automl_b.get_leaderboard()","ed21d407":"automl_no = AutoML(mode=\"Compete\", kmeans_features = False, total_time_limit = 12600, results_path='.\/mljar_no') \nautoml_no.fit(X_train, y_train_no)","dd483dab":"automl_no.get_leaderboard()","f4a2544d":"df_sub['target_carbon_monoxide'] =  np.expm1(automl_co.predict_all(X_test))\ndf_sub['target_benzene'] = np.expm1(automl_b.predict_all(X_test))\ndf_sub['target_nitrogen_oxides'] = np.expm1(automl_no.predict_all(X_test))\n\ndf_sub.to_csv('a_mljar_001.csv', index=False)\n\ndf_sub.head(5)","33102bbe":"## Nitrogen oxides - model","f23e5cbe":"## Models predicion and submission","ae92b328":"## Benzene - model","d843860a":"# AutoML - MLJAR .... almost ZERO CODE ","9db1e0e0":"## Carbon monoxide - model"}}