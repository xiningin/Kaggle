{"cell_type":{"921dc775":"code","9b737a51":"code","09f55eb0":"code","ee44b36f":"code","aba27bcb":"code","0205c5b0":"code","74cc24a2":"code","4104761a":"code","bdf72eb2":"code","bf98934c":"code","9ea0538d":"code","dd1b56d6":"code","02f419f6":"code","fd3d8962":"code","df869937":"code","8110ca9f":"code","3ec2b18e":"code","f38437b6":"code","c9e72cbe":"code","8ef8ed88":"code","f1d5d1f9":"code","175316e8":"markdown","6bce18a4":"markdown","3b92d517":"markdown","d0f0a3a3":"markdown","93a29daa":"markdown","de092830":"markdown","b4917867":"markdown","e859d12e":"markdown","d47f3219":"markdown","85f39743":"markdown","692e2c0d":"markdown","9865d6f6":"markdown","443e9314":"markdown","5d7dc595":"markdown","bcc97343":"markdown","3966bd23":"markdown","2f9b4360":"markdown"},"source":{"921dc775":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","9b737a51":"class Mobile:\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\nmob1=Mobile(1000, \"Apple\")\nprint(mob1.price)","09f55eb0":"class Mobile:\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\nmob1=Mobile(1000, \"Apple\")\nprint(\"Price of mobile 1 :\", mob1.price)\n\nmob2=mob1\nmob2.price=3000\n\nprint(\"Price of mobile 1 :\", mob1.price)\nprint(\"Price of mobile 2 :\", mob2.price)","ee44b36f":"class Mobile:\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\nmob1=Mobile(1000, \"Apple\")\n\nmob2=mob1\nmob2=Mobile(2000,\" Samsung\")\nmob2.price=3000\n\nprint(\"Mobile\", \"Id\",\"Price\")\nprint(\"mob1\", id(mob1), mob1.price)\nprint(\"mob2\", id(mob2), mob2.price)","aba27bcb":"class Mobile:\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\ndef change_price(mobile_obj):\n    mobile_obj.price = 3000\n\nmob1=Mobile(1000, \"Apple\")\nchange_price(mob1)\nprint (mob1.price)\n","0205c5b0":"class Mobile:\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\n    def change_price(mobile_obj):\n        print (\"Id of object inside function\", id(mobile_obj))\n        mobile_obj.price = 3000\n\nmob1=Mobile(1000, \"Apple\")\nprint (\"Id of object in driver code\", id(mob1))\n\nmob1.change_price()\nprint (\"Price of mob1 \", mob1.price)","74cc24a2":"def change_function(data):\n    print (\"Id of list received in method\", id(data))\n    data = [200, 300, 400]\n    print (\"Id of list after list assignment in method\", id(data))\n\nvalue = [100, 200, 300]\nprint (\"List and its id before method call\", value, id(value))\nchange_function(value)\nprint (\"List and its id after method call \", value, id(value))\n","4104761a":"def change(strng):\n    print(\"Object ID before modification \",id(strng))\n    strng=strng.upper()\n    print(\"Object ID after modification \",id(strng))\n\ns1=\"hello\"\nchange(s1)\nprint(s1)\n","bdf72eb2":"def change(strng):\n    print(\"Id before \",id(strng))\n    strng=strng.upper()\n    print(\"Id after \",id(strng))\ns1=\"hello\"\nchange(s1)\nprint(s1)\n\ndef change_function(data):\n    print (\"Id before\", id(data))\n    data = [200, 300, 400]\n    print (\"Id after\", id(data))\n\nvalue = [100, 200, 300]\nchange_function(value)\nprint (value)\n                                                    ","bf98934c":"class Mobile:\n    def __init__(self, price, brand):\n        print(\"Id of self in constructor\", id(self))\n        self.price = price\n        self.brand = brand\n\nmob1=Mobile(1000, \"Apple\")\nprint(\"Id of mob1 in driver code\", id(mob1))\n\nmob2=Mobile(1000, \"Apple\")\nprint(\"Id of mob2 in driver code\", id(mob2))\n","9ea0538d":"class Mobile:\n    def __init__(self, price, brand):\n        print(\"Id of self in constructor\", id(self))\n        self.price = price\n        self.brand = brand\n\nmob1=Mobile(1000, \"Apple\")\nprint(\"Id of mob1 in driver code\", id(mob1))\n\nmob2=Mobile(1000, \"Apple\")\nprint(\"Id of mob2 in driver code\", id(mob2))\n","dd1b56d6":"class Mobile:\n    def __init__(self,price,brand):\n        print (\"Mobile created with id\", id(self))\n        self.price = price\n        self.brand = brand\n\n    def return_product(self):\n        print (\"Mobile being returned has id\", id(self))\n        print (\"Brand being returned is \",self.brand,\" and price is \",self.price)\n\nmob1=Mobile(1000,\"Apple\")\n\nmob2=Mobile(2000,\"Samsung\")\n\nmob2.return_product()\n\n                                                    ","02f419f6":"class Mobile:\n    def __init__(self, brand, price):\n        self.brand = brand\n        self.price = price\n\nmob1=Mobile(\"Apple\", 1000)\nmob2=Mobile(\"Samsung\", 2000)\nmob3=Mobile(\"Apple\", 3000)\nmob4=Mobile(\"Samsung\", 4000)\nmob5=Mobile(\"Apple\", 5000)\n\nlist_of_mobiles=[mob1, mob2, mob3, mob4, mob5]\n\nfor mobile in list_of_mobiles:\n    print (mobile.brand,mobile.price)\n","fd3d8962":"class Mobile:\n    def __init__(self,brand,price):\n        self.brand = brand\n        self.price = price\n\nmob1=Mobile(\"Apple\", 1000)\nmob2=Mobile(\"Samsung\", 2000)\nmob3=Mobile(\"Apple\", 3000)\n\n\nlist_of_mobiles=[mob1, mob2, mob3]\n\nmob3.brand=\"Samsung\"\n\nfor mobile in list_of_mobiles:\n    print (mobile.brand, mobile.price)\n","df869937":"class Mobile:\n    def __init__(self,brand,price):\n        self.brand = brand\n        self.price = price\n\nmob1=Mobile(\"Apple\", 1000)\nmob2=Mobile(\"Samsung\", 5000)\nmob3=Mobile(\"Apple\", 3000)\n\nmob_dict={\n          \"m1\":mob1,\n          \"m2\":mob2,\n          \"m3\":mob3\n          }\n\nfor key,value in mob_dict.items():\n    if value.price > 3000:\n        print (value.brand,value.price)\n","8110ca9f":"class Customer:\n    def __init__(self, cust_id, cust_name, location):\n        self.cust_id = cust_id\n        self.cust_name = cust_name\n        self.location = location\n\nlist_of_customers = [Customer(101, 'Mark', 'US'),\n                     Customer(102, 'Jane', 'Japan'),\n                     Customer(103, 'Shivank', 'India')]\n\ndict_of_customer = {}\nfor customer in list_of_customers:\n    dict_of_customer[customer.location] = customer\n\nprint (\"Customer name in India is \"+dict_of_customer[\"India\"].cust_name)\n\nfor key,value in dict_of_customer.items():\n    print (\"Location: \"+key+\", Name: \"+value.cust_name+\", Id: \"+(str(value.cust_id)))\n                                                    ","3ec2b18e":"class Mobile:\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n        self.discount = 50\n\n    def purchase(self):\n        total = self.price - self.price * self.discount \/ 100\n        print (self.brand, \"mobile with price\", self.price, \"is available after discount at\", total)\n\nmob1=Mobile(20000, \"Apple\")\nmob2=Mobile(30000, \"Apple\")\nmob3=Mobile(5000, \"Samsung\")\n\nmob1.purchase()\nmob2.purchase()\n","f38437b6":"class Mobile:\n    discount = 50\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\n    def purchase(self):\n        total = self.price - self.price * Mobile.discount \/ 100\n        print (self.brand, \"mobile with price\", self.price, \"is available after discount at\", total)\n\nmob1=Mobile(20000, \"Apple\")\nmob2=Mobile(30000, \"Apple\")\nmob3=Mobile(5000, \"Samsung\")\n\nmob1.purchase()\nmob2.purchase()\nmob3.purchase()\n","c9e72cbe":"class Mobile:\n    discount = 50\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\n    def purchase(self):\n        total = self.price - self.price * Mobile.discount \/ 100\n        print (self.brand, \"mobile with price\", self.price, \"is available after discount at\", total)\n\ndef enable_discount():\n    Mobile.discount = 50\n\ndef disable_discount():\n    Mobile.discount = 0\n\nmob1=Mobile(20000, \"Apple\")\nmob2=Mobile(30000, \"Apple\")\nmob3=Mobile(5000, \"Samsung\")\n\nenable_discount()\nmob1.purchase()\nmob2.purchase()\ndisable_discount()\nmob3.purchase()\n","8ef8ed88":"class Mobile:\n    __discount = 50\n\n    def get_discount(self):\n        return Mobile.__discount\n\n    def set_discount(self,discount):\n        Mobile.__discount = discount\n\nm1=Mobile()\nprint(m1.get_discount())\n","f1d5d1f9":"class Mobile:\n    __discount = 50\n    def __init__(self, price, brand):\n        self.price = price\n        self.brand = brand\n\n    def purchase(self):\n        total = self.price - self.price * Mobile.__discount \/ 100\n        print (\"Total is \",total)\n\n    def get_discount(self):\n        return Mobile.__discount\n\n    def set_discount(self,discount):\n        Mobile.__discount = discount\n\nmob1=Mobile(20000, \"Apple\")\nmob2=Mobile(30000, \"Apple\")\nmob3=Mobile(5000, \"Samsung\")\n\nprint(mob1.get_discount())\n","175316e8":"We can also store a number of objects inside a list or a dictionary. The below example, we have a list of mobile objects and we are iterating over the list and printing the values","6bce18a4":"What happens when we pass an object as a parameter to a function? In the below code, what will be the output?","3b92d517":"When we pass an object to a parameter, the parameter name becomes a reference variable.\n\nRecollecting the balloon example, it is like creating one more ribbon to the same balloon. Thus there is one object with two reference variable, one the formal parameter and the actual parameter. Thus any change made through one reference variable will affect the other as well.","d0f0a3a3":"Just like the balloons and ribbons, we can make one reference variable refer to another object. Now any change made through this reference variable will not affect the old object","93a29daa":"self is not a keyword. self refers to the current object being executed","de092830":"We can make our static variable as a private variable by adding a double underscore in front of it. We can also create getter and setter methods to access or modify it.","b4917867":"For changes to reflect outside the function, the object must be mutable object. All objects created through custom classes are mutable objects. If the objects are immutable, the changes don't reflect outside the function. This is because any changes made to a immutable object creates a new object. In the below code you can see that when we try to modify the string, it creates a new string object and the original string object is unchanged.","e859d12e":"In the below code we are invoking the getter method using a reference variable. But the self is not used inside the method at all.","d47f3219":"What do you think will be the output of the below code?","85f39743":"An object is like a balloon and the reference variable is like the ribbon connecting it to the ground.","692e2c0d":"We can also store objects in a dictionary. For example, in the below code we are storing all the mobile objects in a dictionary and printing only those mobiles whose price is greater than 3000","9865d6f6":"Now that we have created static variables, we can access them using the Class name itself. Static variable belong to the class and not an object. Hence we don\u2019t need self to access static variables.","443e9314":"**How can we write our code so that all mobile objects get a 50% off? One solution is to create a discount attribute and hard code the value as 50% as shown below:","5d7dc595":"Just like the balloon with multiple ribbons, if we change the attribute of an object through one reference variable, it immediately reflects in other reference variable as there is only one balloon ultimately","bcc97343":"Can you guess what is the output of the below code? Discuss your output.","3966bd23":"We have already seen that reference_variable.attribute_name creates an attribute for that object. By using self.attribute_name and assigning a value we are creating attributes to the current object. The best practice is to create attributes inside the constructor.","2f9b4360":"Thus we can see that trying to change a immutable object behaves in the same way as when we reassign a mutable object inside a function. This is because, in both cases new objects are created and the original object is untouched."}}