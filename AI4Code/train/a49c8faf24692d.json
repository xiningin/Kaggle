{"cell_type":{"99891876":"code","3e671916":"code","dcd4fd2b":"code","ca36a718":"code","e59ab764":"code","7ad45cae":"code","665f59ff":"code","28c43967":"code","031e9ba5":"code","0bf3137d":"code","1eef13ea":"code","08b4c0bc":"code","92075c62":"code","3b1a4d32":"code","e890a020":"code","4034a324":"code","1bd66b9f":"code","5116f1de":"code","83ef977d":"code","707b0592":"code","009ebec9":"code","29a707ea":"code","934f4be5":"code","5d662363":"code","99624493":"code","2c278e0a":"code","a6585c9d":"code","e7ee4702":"code","21061e91":"code","133e6aaf":"code","5f2bad86":"markdown","346f9530":"markdown","e892abca":"markdown","401d33c8":"markdown","69c6b795":"markdown","917cc6c5":"markdown","9ba1243f":"markdown","72fb985a":"markdown","afb75a8c":"markdown","0f575ebe":"markdown","78623f54":"markdown","450c309d":"markdown","8124d8cf":"markdown"},"source":{"99891876":"import pandas as pd  #data processing\nimport numpy as np #linear algebra\nimport matplotlib.pyplot as plt #data visualization\nimport seaborn as sns #statistical data visualization\nimport sklearn as sk #machine learning model","3e671916":"df = pd.read_csv('\/kaggle\/input\/student-grade-prediction\/student-mat.csv')","dcd4fd2b":"df.shape #view dimensions of dataset","ca36a718":"df.head() #preview the dataset","e59ab764":"df.describe() #descriptive statistics","7ad45cae":"plt.figure(figsize=(12,7))\nsns.heatmap(df.isnull(),cbar=False,cmap='Blues_r',yticklabels=False, fmt='.1g')\nplt.title('Missing values in the dataset', size=15)\n\n#SAVE FIGURE\n#from google.colab import files\n#plt.savefig(\"missingvalue.png\")\n#files.download(\"missingvalue.png\") ","665f59ff":"plt.figure(figsize=(15,15))\nsns.set_theme(style=\"ticks\", font_scale=1.1)\nsns.boxplot(data=df, orient='h', palette = 'Blues')\nplt.title('Outliers in the dataset', size=15)","28c43967":"fig, ax = plt.subplots(figsize=(12, 6))\nsns.kdeplot(df['G1'], color='#B6D0E0', linewidth=2, label='G1', cut=0)\nsns.kdeplot(df['G2'], color='#B6D0E0', linewidth=2, linestyle='dashed', label='G2', cut=0)\nsns.kdeplot(df['G3'], color='#08306B', linewidth=2, label='G3', cut=0)\n\nplt.xlabel('Grade distribution', fontsize = 14)\nplt.ylabel('Distribution (%)', fontsize = 14)\nplt.legend()\nplt.show()","031e9ba5":"plt.figure(figsize=(10,5))\nb = sns.countplot(x=df['G3'], color='#08306B')\nb.set_xlabel('G3', fontsize = 14)\nb.set_ylabel('Number of students', fontsize = 14)\nplt.show()","0bf3137d":"plt.figure(figsize=(10,5))\nb = sns.countplot(x=df['age'], color='#08306B')\nb.set_xlabel('Age', fontsize = 14)\nb.set_ylabel('Number of students', fontsize = 14)\nplt.show()","1eef13ea":"plt.figure(figsize=(8,5))\nb = sns.countplot(x=df['sex'], color='#08306B')\nb.set_xlabel('Sex', fontsize = 14)\nb.set_ylabel('Number of students', fontsize = 14)\nplt.show()","08b4c0bc":"plt.figure(figsize=(7,8))\nb = sns.boxplot(x='sex', y='G3', data=df, color=\"#08306B\")\n#b.axes.set_title('Sexo vs Nota final (G3)', fontsize = 20)\nb.set_xlabel('Sex', fontsize = 14)","92075c62":"df.dtypes #check data types","3b1a4d32":"categorical = ['school',\\\n               'sex',\\\n               'address',\\\n               'famsize',\\\n               'Pstatus',\\\n               'Mjob',\\\n               'Fjob',\\\n               'reason',\\\n               'guardian',\\\n               'schoolsup',\\\n               'famsup',\\\n               'paid',\\\n               'activities',\\\n               'nursery',\\\n               'higher',\\\n               'internet',\\\n               'romantic',\n                ]","e890a020":"#transform non-numerical labels to numerical labels\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\ndf[categorical] = df[categorical].apply(lambda col: le.fit_transform(col))\ndf[categorical].head()","4034a324":"corr = df.corr(method='spearman') \nmask = np.zeros_like(corr)\nmask[np.triu_indices_from(mask)] = True\nwith sns.axes_style(\"white\"):\n    f, ax = plt.subplots(figsize=(32, 32))\n    ax = sns.heatmap(corr,mask=mask,square=True,linewidths=.6,cmap=\"Blues\",annot=True)\nplt.title('Correlation Matrix (Spearman)', size=19)","1bd66b9f":"most_correlated = df.corr().abs()['G3'].sort_values(ascending=False)\nmost_correlated","5116f1de":"X = df.drop('G3', axis=1)\ny = df['G3']","83ef977d":"from sklearn.feature_selection import SelectKBest, chi2\n\nchi_scores = chi2(X, y)\nchi_scores","707b0592":"p_values = pd.Series(chi_scores[1],index = X.columns)\np_values.sort_values(ascending = True , inplace = True)\np_values","009ebec9":"p_values.plot.bar(figsize = (9,5), cmap=\"Blues_r\")\nplt.title('Chi-square test for feature selection', size=18) \n","29a707ea":"plt.figure(figsize=(6,6))\nsns.regplot('failures', 'G3', data=df)\nplt.show()","934f4be5":"from sklearn.model_selection import train_test_split\n\ndf2 = df[['G1', 'G2', 'G3', 'absences']]\n\nX = df2.drop('G3', axis=1) #independent variable \ny = df2['G3'] #dependent variable\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 123)","5d662363":"X_train.shape, X_test.shape #check the shape of X_train and X_test","99624493":"from sklearn.ensemble import RandomForestRegressor\n\nrf = RandomForestRegressor(n_estimators=10, random_state=0)\nrf.fit(X_train, y_train)","2c278e0a":"y_pred = rf.predict(X_test)","a6585c9d":"from sklearn.metrics import r2_score\n\nprint(r2_score(y_test, y_pred))","e7ee4702":"from sklearn.metrics import mean_squared_error\n\nprint(mean_squared_error(y_test, y_pred))","21061e91":"plt.figure(figsize=(6,6))\n\nsns.regplot(y_test, y_pred)\nplt.xlabel('Y Test')\nplt.ylabel('Y Predicted')\nplt.show()","133e6aaf":"sns.displot(y_test)\nplt.title(\"Random Forest Regressor plot\")\nplt.show()","5f2bad86":"#Import dataset","346f9530":"#Feature selection","e892abca":"####Missing values","401d33c8":"####Outliers (numerical features)","69c6b795":"####Correlation matrix (Spearman)","917cc6c5":"####Chi-2","9ba1243f":"#Student Grade Prediction using Random Forest Regressor","72fb985a":"#Exploratory data analysis","afb75a8c":"#Import libraries ","0f575ebe":"#Train test split","78623f54":"##Random Forest Regressor","450c309d":"##Feature Engineering\n\n","8124d8cf":"#Exploratory graph analysis"}}