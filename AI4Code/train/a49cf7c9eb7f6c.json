{"cell_type":{"34287be7":"code","cf2f78fa":"code","d8dce2b6":"code","ca50ee20":"code","de241539":"code","44e7ba9d":"code","bbde8654":"code","73508f46":"code","8d11f745":"code","40e42cae":"code","fa0819b1":"code","ece67faa":"code","e872e380":"code","111e54ac":"code","61b46a80":"code","0ecb1d9a":"code","aa0a9ae3":"code","60e63bf5":"code","0f87b9a9":"code","535157b5":"code","e98ba99f":"code","30514a4d":"code","985949f6":"code","1019ce2c":"markdown","63ca86af":"markdown","b67f3d4f":"markdown","d5053dc7":"markdown","34abd931":"markdown","27f5a00c":"markdown","8dcaa9ff":"markdown","bb156519":"markdown","e37efc67":"markdown","5c482b29":"markdown","ccfad8a6":"markdown","5ad47d73":"markdown","9b9189e8":"markdown"},"source":{"34287be7":"#importing required library's\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.feature_selection import SelectKBest, chi2\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report,accuracy_score,confusion_matrix,f1_score\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn import preprocessing","cf2f78fa":"#importing train & test data\ndf_train=pd.read_csv('\/kaggle\/input\/av-jobhackthon-credit-card-lead-prediction\/train_hack.csv')\ndf_test=pd.read_csv('\/kaggle\/input\/av-jobhackthon-credit-card-lead-prediction\/test_hack.csv')\nsample_submission=pd.read_csv('\/kaggle\/input\/av-jobhackthon-credit-card-lead-prediction\/sample_submission_eyYijxG_hack.csv')","d8dce2b6":"df_train=df_train[~df_train.ID.isin(['a'])]\ndf_test=df_test[~df_test.ID.isin(['a'])]\nsample_submission=sample_submission[~sample_submission.ID.isin(['a'])]","ca50ee20":"#Basic checks\nprint(\"******** No.of Row's and Column's in Dataframe********* \\n \",df_train.shape,\n     \"\\n \\n **************Columns in Dataframe*********** \\n \",df_train.columns,\n     \"\\n \\n **************Top 5 Row's in Dataframe *********** \\n \",df_train.dtypes)","de241539":"# Top 5 rows\ndf_train.head()","44e7ba9d":"# bottom 5 row\ndf_train.tail()","bbde8654":"duplicate = df_train[df_train.duplicated()]\nduplicate","73508f46":"# Identifying missing values\nmiss_check=pd.DataFrame(df_train.isnull().sum())\n\n# Calculating missing value percentage \nmiss_check.reset_index(inplace=True)\nmiss_check.columns=['features','missing_count']\nmiss_check['missing_value_percentage']=(miss_check.missing_count\/df_train.shape[0])*100\nmiss_check.plot.barh(x='features',y='missing_count',figsize=(8,5))\n\n# Missing value features\nmiss_check[miss_check.missing_value_percentage>0]","8d11f745":"df_train.drop(['ID'],axis=1,inplace=True)","40e42cae":"# Replacing missing values with Zero\ndf_train.fillna(0,inplace=True)","fa0819b1":"#Creating Dummy variables for Categorical variables\ndf_train2=pd.get_dummies(df_train, columns = ['Gender', 'Region_Code', 'Occupation', 'Channel_Code',\n       'Credit_Product', 'Is_Active',],drop_first=True)\nX = df_train2.loc[:, df_train2.columns != 'Is_Lead']\ny = df_train2.loc[:, df_train2.columns == 'Is_Lead']","ece67faa":"#Seleting chi-square test for feature engineering\nbestfeature=SelectKBest(score_func=chi2,k=10)\nfit=bestfeature.fit(X,y)\ndf_p_score=pd.DataFrame(fit.pvalues_)\ndf_columns=pd.DataFrame(X.columns)\nfeature_score=pd.concat([df_columns,df_p_score],axis=1)\nfeature_score.columns=['features','P_score']","e872e380":"# Printing the score\nfeature_score.sort_values(by=['P_score'],ascending=True)","111e54ac":"feature_score.plot.barh(x='features',y='P_score',figsize=(10,15))","61b46a80":"# Taking cutoff level for features is 0.08539033\nnew_features=feature_score[feature_score.P_score<0.08539033]\n\n# Taking features for model build\nX1=X[new_features.features]\n\n# before and after features engineering task no.of features\nprint(\"******** After Feature engineering no.of features for model******** \\n \",len(new_features.features),\"\\n \\n******** Before feature engineering no.of features for model******** \\n \\n  \",len(X.columns))","0ecb1d9a":"# Stratified Random sampling & Test data 33%\nX_train, X_test, y_train, y_test = train_test_split(X1, y, test_size=0.33, random_state=42,stratify=y)","aa0a9ae3":"# Selected GradientBoostingClassifier for model build\nprint(len(X1.columns))\ngb_classifier=GradientBoostingClassifier(loss='exponential',n_estimators=100,max_depth=5,max_features='auto')\ngb_classifier.fit(X_train, y_train)\nytrain_pred = gb_classifier.predict_proba(X_train)\nprint('GradientBoostingClassifier train roc-auc: {}'.format(roc_auc_score(y_train, ytrain_pred[:,1])))\nytest_pred = gb_classifier.predict_proba(X_test)\nprint('GradientBoostingClassifier test roc-auc: {}'.format(roc_auc_score(y_test, ytest_pred[:,1])))\n","60e63bf5":"# Feature engineering from model output.\nfeatures_score=pd.DataFrame(gb_classifier.feature_importances_,columns=['features_score'])\nfeatures=pd.DataFrame(X_train.columns,columns=['features'])\ngb_features=pd.concat([features,features_score],axis=1)\nprint(gb_features.sort_values(by='features_score',ascending=False))\n\n# The cutoff features_score>=0.000257 giving better results\ngb_f_features=gb_features[gb_features.features_score>=0.000275]\n\n# Taking features for model build\nX1=X[gb_f_features.features]\n\n# before and after features engineering task no.of features\nprint(\"******** After Feature engineering no.of features for model******** \\n \",len(gb_f_features.features),\"\\n \\n******** Before feature engineering no.of features for model******** \\n \\n  \",len(new_features.features))\n","0f87b9a9":"gb_f_features.plot.barh(x='features',y='features_score',figsize=(10,15))","535157b5":"# Stratified Random sampling & Test data 33%\nX_train, X_test, y_train, y_test = train_test_split(X1, y, test_size=0.33, random_state=42,stratify=y)","e98ba99f":"gb_classifier=GradientBoostingClassifier(loss='exponential',n_estimators=100,max_depth=5,max_features='auto')\ngb_classifier.fit(X_train, y_train)\nytrain_pred = gb_classifier.predict_proba(X_train)\nprint('GradientBoostingClassifier train roc-auc: {}'.format(roc_auc_score(y_train, ytrain_pred[:,1])))\nytest_pred = gb_classifier.predict_proba(X_test)\nprint('GradientBoostingClassifier test roc-auc: {}'.format(roc_auc_score(y_test, ytest_pred[:,1])))","30514a4d":"#Features selection for predictions\nfilter_final_cols=X1.columns\nprint(\"*********** No.of feature selected for preditions ************\\n\",len(filter_final_cols))","985949f6":"#Missing value imputatiion\ndf_test.fillna(0,inplace=True)\n\n#Data conversions\/Label encoding\ndf_dummy_test = pd.get_dummies(df_test, columns = ['Gender', 'Region_Code', 'Occupation', 'Channel_Code',\n       'Credit_Product', 'Is_Active'],drop_first=True)\n\n# Features selection\nX_test_prd=df_dummy_test[filter_final_cols]\n\n# probability prediction\npred=gb_classifier.predict_proba(X_test_prd)[:,1]\npred_lst=pred.tolist()\n\n# Exporting sample output\n\nsample_submission.loc[:,'Is_Lead']=pred_lst\n\n#Final Submission file\nsample_submission.to_csv('submission.csv',index=False)","1019ce2c":"# EDA(Exploratory Data Analysis)","63ca86af":"# Duplicates Check","b67f3d4f":"# Remove Unwanted columns","d5053dc7":"# Model Training","34abd931":"# Data Converstion\/Label encoding","27f5a00c":"# Missing Values Check\n","8dcaa9ff":"# Sampling & Spliting","bb156519":"# Re-Train the Model","e37efc67":"# Feature Engineering","5c482b29":"# Actions: \n\nMissing_Value_Imputation :fill- 0\n\nFuture Engineering: Chi-square & Feature_importance(GradientBoostingClassifier)\n\nSampling: Stratified Random Sampling\n\nTrain & Test Split: 33\n\nMachine Learning Model: GradientBoostingClassifier\n\nModel Assessments: ROC_AUC_SCORE\n\nHyper_parameter Tuning: n_estimator, loss, Max_depth","ccfad8a6":"# Data Extraction","5ad47d73":"# Missing Value Impution","9b9189e8":"# Prediction for Test data"}}