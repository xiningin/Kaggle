{"cell_type":{"815a4afd":"code","91c11181":"code","f71d8eae":"code","4e6299b3":"code","ac127678":"code","6641a9a4":"code","84283b65":"code","8ab3c1dd":"code","f886c4ea":"code","b5098c52":"code","a69a8e6d":"code","6a7b4ca9":"code","90d053dc":"code","5e6a20a6":"markdown","33d5c3ed":"markdown","28d2cb26":"markdown","802f0d37":"markdown","3e89e9d7":"markdown","55072e6a":"markdown","4d3097d5":"markdown","3dd2add3":"markdown","68005a63":"markdown"},"source":{"815a4afd":"\n\nimport numpy as np \nimport pandas as pd \nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nimport itertools\nfrom keras.utils.np_utils import to_categorical # convert to one-hot-encoding\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Activation, Dropout, Flatten, Input, Conv2D, MaxPooling2D, BatchNormalization,MaxPool2D\nfrom keras.optimizers import RMSprop,Adam\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.callbacks import ReduceLROnPlateau\n# import warnings\nimport warnings\n# filter warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nprint(os.listdir(\"..\/input\"))","91c11181":"x_l = np.load('..\/input\/Sign-language-digits-dataset\/X.npy')\nY_l = np.load('..\/input\/Sign-language-digits-dataset\/Y.npy')\nplt.imshow(x_l[700], cmap='gray')\nprint(Y_l[700])\nimg_size = 64\nplt.subplot(1, 2, 1)\nplt.imshow(x_l[260].reshape(img_size, img_size))\nplt.axis('off')\nplt.subplot(1, 2, 2)\nplt.imshow(x_l[900].reshape(img_size, img_size))\nplt.axis('off')\nprint(x_l.shape)\nprint(Y_l.shape)","f71d8eae":"    x_l = x_l \/ 255.0\n\nprint(\"x_train shape: \",x_l.shape)\nprint(\"x_train shape: \",Y_l.shape)","4e6299b3":"x_l = x_l.reshape(-1,64,64,1)\n\nprint(\"x_train shape: \",x_l.shape)\n","ac127678":"from sklearn.model_selection import train_test_split\nX_train, X_val, Y_train, Y_val = train_test_split(x_l, Y_l, test_size = 0.2, random_state=8)\nprint(\"x_train shape\",X_train.shape)\nprint(\"x_test shape\",X_val.shape)\nprint(\"y_train shape\",Y_train.shape)\nprint(\"y_test shape\",Y_val.shape)","6641a9a4":"model = Sequential()\n\nmodel.add(Conv2D(input_shape=(64, 64, 1), filters=32, kernel_size=(4,4), strides=(2),padding = 'same'))\nmodel.add(Activation('relu'))\n#\nmodel.add(Conv2D(filters=64, kernel_size=(4,4), strides=(1),padding = 'same'))\nmodel.add(Activation('relu'))\n#\nmodel.add(Conv2D(filters=64, kernel_size=(3,3), strides=(1),padding = 'same'))\nmodel.add(Activation('relu'))\n#\nmodel.add(Conv2D(filters=128, kernel_size=(3,3), strides=(1),padding = 'same'))\nmodel.add(Activation('relu'))\n#\n\n\nmodel.add(MaxPooling2D(pool_size=4))\n\nmodel.add(Dropout(0.3))\n\nmodel.add(Flatten())\nmodel.add(Dense(256, activation='relu'))\nmodel.add(BatchNormalization())\n\nmodel.add(Dense(10, activation='softmax'))\nprint(model.summary())","84283b65":"optimizer = Adam(lr=0.001, beta_1=0.9, beta_2=0.999)","8ab3c1dd":"\nepochs = 150\nbatch_size = 250","f886c4ea":"datagen = ImageDataGenerator(\n        featurewise_center=False, \n        samplewise_center=False, \n        featurewise_std_normalization=False,  \n        samplewise_std_normalization=False, \n        zca_whitening=False,  \n        rotation_range=16,  # g\u00f6r\u00fcnt\u00fcleri rastgele 16 derece d\u00f6nd\u00fcr\u00fcr\n        zoom_range = 0.12, # g\u00f6r\u00fcnt\u00fcleri rastgele yak\u0131nla\u015ft\u0131r\u0131r\n        width_shift_range=0.12,  # g\u00f6r\u00fcnt\u00fcleri yatay olarak rastgele kayd\u0131r\u0131r\n        height_shift_range=0.12,  # g\u00f6r\u00fcnt\u00fcleri dikey olarak kayd\u0131r\u0131r\n        horizontal_flip=False,  \n        vertical_flip=False) \n\ndatagen.fit(X_train)","b5098c52":"model.compile(optimizer=optimizer,\n              loss='categorical_crossentropy',\n              metrics=['accuracy'])","a69a8e6d":"\n\nhistory = model.fit(X_train,Y_train,batch_size = batch_size,verbose=1,epochs = epochs,validation_split=0.1)\n        \n        ","6a7b4ca9":"plt.plot(history.history['val_loss'], color='b', label=\"validation loss\")\nplt.title(\"Test Loss\")\nplt.xlabel(\"Number of Epochs\")\nplt.ylabel(\"Loss\")\nplt.legend()\nplt.show()","90d053dc":"# confusion matrix\nimport seaborn as sns\nY_pred = model.predict(X_val) \nY_pred_classes = np.argmax(Y_pred,axis = 1) \nY_true = np.argmax(Y_val,axis = 1) \nconfusion_mtx = confusion_matrix(Y_true, Y_pred_classes) \nf,ax = plt.subplots(figsize=(8, 8))\nsns.heatmap(confusion_mtx, annot=True, linewidths=0.01,cmap=\"Greens\",linecolor=\"gray\", fmt= '.1f',ax=ax)\nplt.xlabel(\"Predicted Label\")\nplt.ylabel(\"True Label\")\nplt.title(\"Confusion Matrix\")\nplt.show()","5e6a20a6":"***Datam\u0131z\u0131 trrain test split modeli ile test ve \u00f6grenmek i\u00e7in %90'a %10 luk oranda b\u00f6l\u00fcyoruz***","33d5c3ed":"***\u00d6ncelikle datam\u0131z 2 k\u0131s\u0131mdan olu\u015fuyor \nx_l => datadaki fotograflar\u0131 i\u00e7inde bar\u0131nd\u0131r\u0131yor.\nY_l => datadaki fotograflar\u0131n say\u0131sal de\u011ferini i\u00e7eriyor.***\n","28d2cb26":"***Keras k\u00fct\u00fcphanesini ekliyoruz ve ilk modelimizi olu\u015fturuyoruz.***","802f0d37":"***\u00d6\u011frenme oran\u0131n\u0131 iyile\u015ftirmek i\u00e7in optimize ediyoruz.***","3e89e9d7":"***Modelimizi hatalar\u0131na g\u00f6re bir grafik olu\u015fturuyoruz ***","55072e6a":"***Modelimizi fit etikten sonra confision matriz ile en ideal tahminleri yapabiliriz***","4d3097d5":"***Haz\u0131rlad\u0131\u011f\u0131m\u0131z modeli fit ediyoruz.***","3dd2add3":"***Bu uygulama projesi 0 dan 9\u2019a kadar olan say\u0131lar\u0131n el i\u015faretleri \u015feklinde g\u00f6steriminin derin \u00f6\u011frenme ile el i\u015faretlerinin say\u0131 k\u0131s\u0131mlar\u0131n\u0131n \u00e7evirimi i\u00e7in kullan\u0131lmas\u0131 hedeflenmektedir\nConvolutional Neural Network (CNN) yap\u0131s\u0131 ile \u00fc\u00e7 katmanl\u0131 yapay sinir a\u011f modeli olu\u015fturularak, Keras k\u00fct\u00fcphanesi i\u00e7indeki sing language digits dataset veri seti ile e\u011fitilmi\u015ftir. \u00c7\u0131kt\u0131s\u0131 el i\u015faretinin hangi say\u0131y\u0131 temsil etti\u011fi bulunmas\u0131n\u0131 hedeflemektedir***\n","68005a63":"***Datam\u0131z\u0131 normalize ediyoruz.***"}}