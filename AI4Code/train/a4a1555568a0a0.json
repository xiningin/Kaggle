{"cell_type":{"dafef912":"code","bf5ba48c":"code","cc2229a2":"code","c07bf178":"code","178eaa79":"code","91ba671b":"code","af3e02ef":"code","bbd5108d":"code","8ba8d8db":"code","84c05cdb":"code","24253a5a":"code","11d52bed":"code","b3869d17":"code","7ac0e99d":"code","74551ac3":"code","dcd4d178":"code","5a9ee816":"code","3ed9222a":"code","261fe87c":"code","c6238bb3":"code","3f05c08b":"code","41b1fc44":"code","485e0338":"code","7837adf4":"code","1455a64f":"code","97eaa00f":"code","7dde5d52":"code","93a963c0":"code","5d7a4ede":"code","b91f01d7":"code","8acbc84a":"code","cb3368c6":"code","998e176c":"markdown","75691bc2":"markdown","899024c9":"markdown","5046db81":"markdown","9f4e5347":"markdown","1bc90729":"markdown","3b5dafc1":"markdown","625db956":"markdown","518b2845":"markdown","4d03eed6":"markdown","0bcc47c0":"markdown","f36b237c":"markdown","7cad4677":"markdown","6f8d18d1":"markdown","9f6e1769":"markdown","2604c92c":"markdown","5d64f28b":"markdown","93ef1e21":"markdown","04f9bd0b":"markdown","6583ade2":"markdown","ae304c2c":"markdown","b6307fda":"markdown","076476b6":"markdown","f869bb6e":"markdown","d116f440":"markdown","876ddd79":"markdown","bfbc6864":"markdown","40d260e9":"markdown","ffae91c5":"markdown","5c887302":"markdown","7a977a04":"markdown","1ae90d61":"markdown","ead912f5":"markdown","f02f0a91":"markdown","5aa4aa26":"markdown","7bd4fe81":"markdown","e0974a07":"markdown","2554e274":"markdown","d5ec1a4b":"markdown","39d28494":"markdown","9bbf21af":"markdown","e49269ae":"markdown"},"source":{"dafef912":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly_express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom IPython.display import display, HTML\nimport requests\nfrom bs4 import BeautifulSoup\nimport re\nimport json\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bf5ba48c":"subtitle_path = '\/kaggle\/input\/chai-time-data-science\/Cleaned Subtitles\/'\nepisodes_df = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/Episodes.csv')\nPLOT_BGCOLOR='#DADEE3'\nPAPER_BGCOLOR='rgb(255,255,255)'\n\npd.set_option('display.max_rows', 200)\npd.set_option('display.max_columns', 200)","cc2229a2":"# Visualizing the top 5 rows of the episodes data frame\nepisodes_df.head(5)","c07bf178":"# Checking the shape of the data\nepisodes_df.shape","178eaa79":"# Checking for missing values\nepisodes_df.isnull().sum()","91ba671b":"# Dropping the missing values\nepisodes_df.dropna()","af3e02ef":"# Let us now look at the gender distribution on the show\nimport seaborn as sns\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x = \"heroes_gender\", data = episodes_df)","bbd5108d":"# Let us now take a look at the different locations of the heroes\nimport matplotlib.pyplot as plt\nf, ax = plt.subplots(figsize=(10, 5))\nsns.countplot(y = \"heroes_location\", data = episodes_df)","8ba8d8db":"# Let us now look at the category of the heroes\nsns.set(style=\"darkgrid\")\nax = sns.countplot(x = \"category\", data = episodes_df)","84c05cdb":"# Let us take a look at the different flavours of tea preferred on the show\nf, ax = plt.subplots(figsize=(10, 5))\nsns.countplot(y = \"flavour_of_tea\", data = episodes_df)","24253a5a":"# Let us now take a look at the recording times\nf, ax = plt.subplots(figsize=(10, 5))\nsns.countplot(y = \"recording_time\", data = episodes_df)","11d52bed":"# Let us now take a look at the episode duration\nepisodes_df['episode_duration'].plot(x = 'Episodes', y = 'Duration in seconds')","b3869d17":"# Let us take a look at some video statistics on YouTube\n\n\ntotal_views = episodes_df['youtube_views'].sum()\ntotal_impressions = episodes_df['youtube_impressions'].sum()\ntotal_likes = episodes_df['youtube_likes'].sum()\ntotal_dislikes = episodes_df['youtube_dislikes'].sum()\ntotal_comments = episodes_df['youtube_comments'].sum()\ntotal_subscribers = episodes_df['youtube_subscribers'].sum()\n\nprint(\"Total number of views on Youtube:\", total_views)\nprint(\"Total number of youtube impressions:\", total_impressions)\nprint(\"Total number of likes on youtube:\", total_likes)\nprint(\"Total number of dislikes:\", total_dislikes)\nprint(\"Total number of comments on youtube:\", total_comments)\nprint(\"Total number of youtube subscribers:\", total_subscribers)","7ac0e99d":"# Let us now take a look at the spotify statistics\ntotal_streams = episodes_df['spotify_streams'].sum()\ntotal_listeners = episodes_df['spotify_listeners'].sum()\n\nprint(\"Total number of spotify streams:\", total_streams)\nprint(\"Total number of listeners on spotify:\", total_listeners)","74551ac3":"# Let us now take a look at the apple statistics\ntotal_listeners_a = episodes_df['apple_listeners'].sum()\n\nprint(\"Total number of listeners on apple:\", total_listeners_a)","dcd4d178":"# Creating a list\ndata = {'Name of the Platform':['YouTube', 'Spotify', 'Apple'], 'Total number of Views\/Listeners':[43616, 5455, 1714]} \n  \n# Create=ing the dataFrame \ndf1 = pd.DataFrame(data) \n  \nprint(df1) ","5a9ee816":"# Let us now take a look at the most viewed episodes in the 'Kaggle' category\nmost_viewed = episodes_df[episodes_df['category'] == 'Kaggle'].sort_values(by = 'youtube_views',ascending = False)\n#Top 3 most viewed shows in Kaggle category\nmost_viewed.head(3)","3ed9222a":"# Let us now take a look at the most viewed episodes in the category 'Industry'\nmost_viewed2 = episodes_df[episodes_df['category'] == 'Industry'].sort_values(by = 'youtube_views',ascending = False)\n#Top 3 most viewed shows in Kaggle category\nmost_viewed2.head(3)","261fe87c":"# Most liked episode on Youtube\nmost_liked = episodes_df.sort_values(by = 'youtube_likes', ascending = False)\nmost_liked.head(3)\n# Top 3 most liked videos","c6238bb3":"# Most subcribers on the episodes\nmost_subscribers = episodes_df.sort_values(by = 'youtube_subscribers', ascending = False)\nmost_subscribers.head(3)\n# Top 3 most subscribed episodes","3f05c08b":"# Reading the cleaned subtitles of the 27th episode file\ncleaned_subtitles = pd.read_csv('\/kaggle\/input\/chai-time-data-science\/Cleaned Subtitles\/E27.csv')","41b1fc44":"# Let us now take a look at the subtitles file\ncleaned_subtitles.head(5)","485e0338":"# Let us take a look at the words which dominate the conversation\nfrom wordcloud import WordCloud, ImageColorGenerator\n\n\nword_cloud = WordCloud(width = 1000,\n                       height = 800,\n                       colormap = 'Blues', \n                       margin = 0,\n                       max_words = 200,  \n                       min_word_length = 4,\n                       max_font_size = 120, min_font_size = 15,  \n                       background_color = \"white\").generate(\" \".join(cleaned_subtitles['Text']))\n\nplt.figure(figsize = (10, 15))\nplt.imshow(word_cloud, interpolation = \"gaussian\")\nplt.axis(\"off\")\nplt.show()","7837adf4":"# Defining a function to visualise n-grams\ndef get_top_ngram(corpus, n=None):\n    vec = CountVectorizer(ngram_range=(n, n)).fit(corpus)\n    bag_of_words = vec.transform(corpus)\n    sum_words = bag_of_words.sum(axis=0) \n    words_freq = [(word, sum_words[0, idx]) \n                  for word, idx in vec.vocabulary_.items()]\n    words_freq =sorted(words_freq, key = lambda x: x[1], reverse=True)\n    return words_freq[:10]","1455a64f":"# Visualising the most frequent bigrams occurring in the conversation\nfrom sklearn.feature_extraction.text import CountVectorizer\ntop_bigrams = get_top_ngram(cleaned_subtitles['Text'],2)[:10]\nx,y = map(list,zip(*top_bigrams))\nsns.barplot(x = y,y = x)","97eaa00f":"# Visualising the most frequent trigrams occurring in the conversation\nfrom sklearn.feature_extraction.text import CountVectorizer\ntop_trigrams = get_top_ngram(cleaned_subtitles['Text'],3)[:10]\nx,y = map(list,zip(*top_trigrams))\nsns.barplot(x = y,y = x)","7dde5d52":"# TextBlob library provides a consistent API for NLP tasks such as POS Tagging, noun-phrase extraction and sentiment analysis\nfrom textblob import TextBlob\nTextBlob('100 people died yesterday due to COVID-19').sentiment","93a963c0":"# Defining a function to check the sentiment polarity (whether it is positive or negative)\ndef polarity(text):\n    return TextBlob(text).sentiment.polarity\n\ncleaned_subtitles['polarity_score'] = cleaned_subtitles['Text'].\\\n   apply(lambda x : polarity(x))\ncleaned_subtitles['polarity_score'].hist()","5d7a4ede":"# Defining a function to classify the sentiment based on the polarity \ndef sentiment(x):\n    if x<0:\n        return 'neg'\n    elif x==0:\n        return 'neu'\n    else:\n        return 'pos'\n    \ncleaned_subtitles['polarity'] = cleaned_subtitles['polarity_score'].\\\n   map(lambda x: sentiment(x))\n\nplt.bar(cleaned_subtitles.polarity.value_counts().index,\n        cleaned_subtitles.polarity.value_counts())","b91f01d7":"# Printing text having a positive sentiment\ncleaned_subtitles[cleaned_subtitles['polarity'] == 'pos']['Text'].head()","8acbc84a":"# Printing text having a negative sentiment\ncleaned_subtitles[cleaned_subtitles['polarity'] == 'neg']['Text'].head()","cb3368c6":"# Printing text having a neutral sentiment\ncleaned_subtitles[cleaned_subtitles['polarity'] == 'neu']['Text'].head()","998e176c":"Visualizing total number of positive, negative and neutral statements used in the conversation.","75691bc2":"We can see here that the attributes 'heroes', 'heroes_gender', 'heroes_location', 'heroes_nationality', 'heroes_kaggle_username' and 'heroes_twitter_handle'have the most missing values. We will drop the missing values as they can skew the data. ","899024c9":"# Episode Duration in Seconds","5046db81":"## 1. About","9f4e5347":"# Most viewed episode in the 'Industry' category","1bc90729":"# Most viewed episode in the Kaggle category","3b5dafc1":"Now we are going to drop the missing values, and again take a look at the data set to see whether the missing values have been removed or not.","625db956":"# Category of Heroes","518b2845":"# Recording times of the show","4d03eed6":"**From the above analysis, we can say that the 27th episode is the most viewed (in the 'Industry' category), liked episode of Chai Time Data Science, as well has the most subscribers on YouTube.** ","0bcc47c0":"# Chai Time Data Science Insights","f36b237c":"# Text having negative sentiment","7cad4677":"The highest episode duration is approximately 8000 seconds, while the lowest episode duration is of a few 100 seconds.","6f8d18d1":"Chai Time Data Science is a Podcast + Video + Blog based show for interviews with practitioners, researchers and kagglers and all things data science. It is also a continuation of 'Interview with Machine Learning Heroes Series' by Sanyam Bhutani. The poddcasts are available on YouTube, Spotify, Apple Music as well as on all other major podcast directories. \nIn case you want to learn more about Chai Time Data Science, here's the link for your reference: https:\/\/sanyambhutani.com\/tag\/chaitimedatascience\/","9f6e1769":"# Visualizing the subtitles","2604c92c":"# Episode with most subscribers on YouTube","5d64f28b":"## 2. Analysis","93ef1e21":"Let us look at the polarity score of the statements used in the conversation during Episode 27.","04f9bd0b":"# Most used trigrams in the conversation","6583ade2":"We can see that most number of Heroes are either located in USA or Canada.","ae304c2c":"# Gender Distribution on CTDS","b6307fda":"# Preference of Tea flavour","076476b6":"We can see here that Masala Chai and Ginger Chai is the most preferred by the Heroes on the show while Kashmiri Kahwa is preferred by only a few.","f869bb6e":"The people interviewed on CTDS are mostly from the Industry or from Kaggle, people in research are not interviewed as much as other categories.","d116f440":"# Comparing the Platforms","876ddd79":"# Location of Heroes","bfbc6864":"# Sentiment Analysis of Episode 27","40d260e9":"# Most liked episode on YouTube","ffae91c5":"# Most used words in conversation in the 27th Epiode","5c887302":"Let us take a look at the Episodes data.","7a977a04":"We can see here that YouTube has more number of views while Spotify has more listeners as compared to Apple. So we can say that YouTube is the most preferred platform to view the videos of CTDS while Spotify is preferred over Apple for listening to Podcasts of CTDS.","1ae90d61":"Clearly, we can see that there are very few females on CTDS.","ead912f5":"So we can see that there are 85 episodes of CTDS show available.","f02f0a91":"# Text having positive sentiment","5aa4aa26":"Let us start by importing the required libraries.","7bd4fe81":"# Let us now dive in to the 27th Episode to find out more details.","e0974a07":"In the 27th episode, Sanyam Bhutani has interviewed [Jeremy Howard](https:\/\/www.kaggle.com\/jhoward), who is an entrepreneur, business strategist, developer and an educator. He is a founding researcher at fast.ai which is a research institue dedicated to make deep learning more accessible.\n","2554e274":"# Most used bigrams in the conversation","d5ec1a4b":"Let us see if there are any missing values in the Episodes data set or not.","39d28494":"Most of the shows have been recorded at night.","9bbf21af":"# Statistics for different platforms (YouTube, Spotify, Apple)","e49269ae":"# Text having neutral sentiment"}}