{"cell_type":{"7857616c":"code","07cc9e48":"code","d8fee707":"code","d66f6d40":"code","13b64f03":"code","9e33cf89":"code","66ac6303":"code","4e1352e7":"code","a48c15ef":"code","cdbfb9b7":"code","620e188b":"code","0ffe2b59":"code","750c840a":"code","a1d6b04d":"code","bc2ac751":"code","afbb2f9d":"code","f3b8fb46":"markdown","b576560b":"markdown","d6252097":"markdown","aef0d82c":"markdown","e2e3a978":"markdown","af4a910a":"markdown","f8bb2c0e":"markdown","cdb86701":"markdown","6f10b02d":"markdown","92ac6e30":"markdown","52ecb64c":"markdown","a49ac074":"markdown"},"source":{"7857616c":"import numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport os\ndirectory_train = \"..\/input\/train\/train\/\"\ndirectory_test = \"..\/input\/test\/test\/\"","07cc9e48":"train_labels = pd.read_csv(\"..\/input\/train.csv\")\ntrain_labels.head()","d8fee707":"image_names = []\nfor filename in os.listdir(directory_train):\n    image_names.append(filename)\nimage_names.sort()","d66f6d40":"test_image_names = []\nfor filename in os.listdir(directory_test):\n    test_image_names.append(filename)\ntest_image_names.sort()","13b64f03":"images = []\nfor filename in image_names:\n    im = Image.open(directory_train+filename, 'r')\n    pix_val = list(im.getdata())\n    pix_val_flat = [x for sets in pix_val for x in sets]\n    images.append(pix_val_flat)","9e33cf89":"test_images = []\nfor filename in test_image_names:\n    im = Image.open(directory_test+filename, 'r')\n    pix_val = list(im.getdata())\n    pix_val_flat = [x for sets in pix_val for x in sets]\n    test_images.append(pix_val_flat)","66ac6303":"col_names = [\"pxl_\"+str(i) for i in range(len(images[0]))]\n\ndf_train=pd.DataFrame(images,columns=col_names)\ndf_train[\"has_cactus\"] = train_labels.has_cactus \n\ndf_test = pd.DataFrame(test_images,columns=col_names)","4e1352e7":"df_train.head()","a48c15ef":"df_test.head()","cdbfb9b7":"#train_size = 5000\ndf = df_train#.iloc[:train_size]","620e188b":"\"\"\"\n!rm -r \/opt\/conda\/lib\/python3.6\/site-packages\/lightgbm\n!git clone --recursive https:\/\/github.com\/Microsoft\/LightGBM\n    \n!apt-get install -y -qq libboost-all-dev\n\n%%bash\ncd LightGBM\nrm -r build\nmkdir build\ncd build\ncmake -DUSE_GPU=1 -DOpenCL_LIBRARY=\/usr\/local\/cuda\/lib64\/libOpenCL.so -DOpenCL_INCLUDE_DIR=\/usr\/local\/cuda\/include\/ ..\nmake -j$(nproc)\n\n!cd LightGBM\/python-package\/;python3 setup.py install --precompile\n\n!mkdir -p \/etc\/OpenCL\/vendors && echo \"libnvidia-opencl.so.1\" > \/etc\/OpenCL\/vendors\/nvidia.icd\n!rm -r LightGBM\n!nvidia-smi\n\"\"\"","0ffe2b59":"params = {'num_leaves': 15,\n         'min_data_in_leaf': 50,\n         'objective': 'binary',\n         'max_depth': 25,\n         'learning_rate': 0.01,#0.0123,\n         'boosting': 'goss',\n         'feature_fraction': 0.7,\n         'reg_alpha': 1.728,\n         'reg_lambda': 4.984,\n         'random_state': 42,\n         'metric': 'auc',\n         'verbosity': -1,\n         'subsample': 0.81,\n         'min_gain_to_split': 0.01,\n         'min_child_weight': 19.4,\n         'num_threads': 4,\n        # 'device': 'gpu',\n        #'gpu_platform_id': 0,\n        #'gpu_device_id': 0\n         }","750c840a":"import time\nfrom sklearn.model_selection import StratifiedKFold\nimport lightgbm as lgb\nfrom sklearn import metrics\n\nfor i in range(4):\n    print(len(df))\n    t1=time.time()\n    target = 'has_cactus'\n    predictors = df.columns.values.tolist()[:-1]\n    nfold=5\n    skf = StratifiedKFold(n_splits=nfold, shuffle=True, random_state=2019)\n    oof = np.zeros(len(df))\n    predictions = np.zeros(len(df_test))\n\n    i = 1\n    for train_index, valid_index in skf.split(df, df[target].values):\n        print(\"\\nfold {}\".format(i))\n        xg_train = lgb.Dataset(df.iloc[train_index][predictors].values,\n                               label=df.iloc[train_index][target].values,\n                               feature_name=predictors,\n                               free_raw_data = False\n                               )\n        xg_valid = lgb.Dataset(df.iloc[valid_index][predictors].values,\n                               label=df.iloc[valid_index][target].values,\n                               feature_name=predictors,\n                               free_raw_data = False\n                               )   \n        clf = lgb.train(params, xg_train, 2000000, valid_sets = [xg_valid], verbose_eval=1000, early_stopping_rounds = 2000)\n        oof[valid_index] = clf.predict(df.iloc[valid_index][predictors].values, num_iteration=clf.best_iteration) \n\n        predictions += clf.predict(df_test[predictors], num_iteration=clf.best_iteration) \/ nfold\n        i = i + 1\n    t2=time.time()\n    print((t2-t1)\/60)\n    print(\"\\n\\nCV AUC: {:<0.4f}\".format(metrics.roc_auc_score(df[target].values, oof)))\n    df_test[\"has_cactus\"] = predictions\n    df = pd.concat([df, df_test[df_test.has_cactus > 0.95]])\n    df = pd.concat([df, df_test[df_test.has_cactus < 0.05]])\n    df[\"has_cactus\"] = df[\"has_cactus\"].round(0).astype(int)\n    df_test = df_test.drop(columns=[\"has_cactus\"])","a1d6b04d":"\"\"\"\nfrom sklearn.datasets import make_classification\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nfrom matplotlib import pyplot\n\nauc = roc_auc_score(df[target].values, oof)\nprint('AUC: %.3f' % auc)\nfpr, tpr, thresholds = roc_curve(df[target].values, oof)\npyplot.plot([0, 1], [0, 1], linestyle='--')\npyplot.plot(fpr, tpr, marker='.')\npyplot.show()\n\"\"\"","bc2ac751":"#predictions.tolist()","afbb2f9d":"sub = pd.read_csv(\"..\/input\/sample_submission.csv\")\nsub.has_cactus = predictions\nsub.to_csv(\"submission_lgbm_4runs_5thres.csv\",index=False)","f3b8fb46":"## Get flatten image pixels into list for test images","b576560b":"## Plot the roc curve for the model","d6252097":"## Import Packages","aef0d82c":"## Get flatten image pixels into list for train images","e2e3a978":"## Read test image names","af4a910a":"## Skip below cell to train on full dataset","f8bb2c0e":"## Code snippet for running LGBM on GPU\n#### Don't forget to uncomment last 3 parameters","cdb86701":"## Train","6f10b02d":"## Save predictions","92ac6e30":"## Create Dataframes","52ecb64c":"## Set parameters","a49ac074":"## Read train image names"}}