{"cell_type":{"59bdcb6e":"code","4937d0bf":"code","0e2f4268":"code","be759664":"code","159729fd":"code","1dabcc0f":"code","01fe32d6":"code","57ca8ae3":"code","d778e87c":"code","d7e09ae9":"code","65eb8e49":"code","6f2e840e":"code","0b11693b":"code","bbc14cee":"code","353d5e61":"code","1cb9386a":"code","3c0c01e3":"code","be61fb52":"code","cc20e3d2":"code","0ab41b83":"code","0a38e75b":"code","e08b3463":"code","f2b3de52":"code","3d286fc9":"code","a9d21c51":"code","d3e16692":"code","f3a5caae":"code","b79c9bb3":"code","c91da879":"code","0133046c":"code","15b45c51":"code","c962bb91":"code","931c0e5d":"code","38356922":"code","706ba9d2":"code","cd26f038":"code","251f4437":"markdown","4e187e1a":"markdown"},"source":{"59bdcb6e":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LogisticRegression","4937d0bf":"data  = pd.read_csv(\"..\/input\/heartdisease\/heart.csv\")","0e2f4268":"#read data\ndata.head()","be759664":"#exploring data\ncounts = data.target.value_counts()\nprint(counts)","159729fd":"sns.countplot(x = \"target\" , data = data , palette = \"bwr\")\nplt.show()","1dabcc0f":"countNoDisease = len(data[data.target == 0])\ncountHaveDisease = len(data[data.target == 1])\n\nallDisease = len(data.target)\n\nprint(\"perecentage of patients haven't heart disease: {:.2f}%\".format((countNoDisease)\/(allDisease)*100))\nprint(\"percentage of patients have heart disease : {:.2f}%\".format((countHaveDisease)\/(allDisease)*100))\n","01fe32d6":"sns.countplot(x = \"sex\" , data = data , palette = \"mako_r\")\nplt.xlabel(\"sex(0 = femeale, 1 = male)\")\nplt.show()\n","57ca8ae3":"countFemale = len(data[data.sex == 0])\ncountMale = len(data[data.sex == 1])\nallData= countFemale+countMale\nprint(\"percentage of female patients : {:.2f}\".format(countFemale\/allData * 100))\nprint(\"peercentage of male patients : {:.2f}\".format(countMale \/ allData*100))","d778e87c":"data.groupby(\"target\").mean()","d7e09ae9":"freq = pd.crosstab(data.age , data.target)\nfreq.plot(kind = \"bar\" , figsize = (20,6))\nplt.xlabel(\"age\")\nplt.ylabel(\"target\")\nplt.title(\"heart disease frequency for age\")\nplt.savefig(\"heartDiseaseForAge.png\")\nplt.show()","65eb8e49":"pd.crosstab(data.sex,data.target).plot(kind = \"bar\" , figsize = (15,6))\nplt.xlabel(\"sex (Female = 0 , male = 1)\")\nplt.title('Heart Disease Frequency for Sex')\nplt.ylabel(\"target\")\nplt.legend([\"haven't disease\" , \"have disease\"])\nplt.xticks(rotation = 0)\nplt.savefig(\"heartDiseaseFrequencyForTarget.png\")\n\nplt.show()","6f2e840e":"plt.scatter(x = data.age[data.target == 0] , y = data.thalach[data.target == 0])\nplt.scatter(x = data.age[data.target == 1] , y = data.thalach[data.target == 1] , c = 'r')\nplt.legend([\"not disease\" , \"disease\"])\nplt.xlabel(\"age\")\nplt.ylabel(\"maximum heart rate\")\nplt.show()","0b11693b":"pd.crosstab(data.slope , data.target).plot(kind = \"bar\" , figsize = (15,6) , color = ['#DAF7A6','#FF5733'])\nplt.title(\"Heart Disease Frequency for Slope\")\nplt.xlabel(\"The Slope of The Peak Exercise ST Segment \")\nplt.ylabel(\"Frequency\")\nplt.xticks(rotation = 0)\nplt.show()","bbc14cee":"pd.crosstab(data.fbs , data.target).plot(kind = \"bar\" , figsize = (15,6)  , color = ['#FFC300','#581845'])\nplt.title(\"Heart Disease Frequency According To FBS\")\nplt.xlabel(\"FBS - (Fasting Blood Sugar > 120 mg\/dl) (1 = true; 0 = false)\")\nplt.ylabel(\"Frequency of Disease or Not\")\nplt.xticks(rotation = 0)\nplt.legend([\"haven't disease\" , \"have disease\"])\nplt.show()","353d5e61":"pd.crosstab(data.cp , data.target).plot(kind = \"bar\" , figsize = (20,6) , color=['#11A5AA','#AA1190' ])\nplt.title('Heart Disease Frequency According To Chest Pain Type')\nplt.xlabel('Chest Pain Type')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","1cb9386a":"#creating dummy variable\na = pd.get_dummies(data.cp , prefix = \"cp\")\nb = pd.get_dummies(data.thal , prefix = \"thal\")\nc = pd.get_dummies(data.slope , prefix = \"slope\")\n","3c0c01e3":"frames = [data , a , b,c]\nnewData = pd.concat(frames , axis = 1)\nnewData.head()","be61fb52":"newData = newData.drop(columns = [\"cp\" , \"thal\" , \"slope\"])\n","cc20e3d2":"newData.head()","0ab41b83":"y = newData.target.values\nx = newData.drop([\"target\"], axis = 1)","0a38e75b":"y","e08b3463":"x","f2b3de52":"x = (x -np.min(x))\/(np.max(x) - np.min(x))","3d286fc9":"#split data to 80% training data and 20% testing data\n\nx_train , x_test , y_train,y_test = train_test_split(x,y , test_size = 0.2  , random_state = 0)","a9d21c51":"print(y_train.T)","d3e16692":"x_train = x_train.T\nx_test = x_test.T\nprint(y_train.shape)\nprint(y_test.shape)\ny_train = y_train.reshape(1 , y_train.shape[0])\ny_test = y_test.reshape(1 , y_test.shape[0])","f3a5caae":"print(x_train.shape)\nprint(x_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)","b79c9bb3":"def initiaize_parameters(n_x):\n    \n    w = np.full((n_x,1) , 0.01)\n    b = 0.0\n    \n    return w , b\n\n","c91da879":"def sigmoid(z):\n    \n    return 1\/(1+np.exp(-z))\n","0133046c":"def computeCost(y , y_hat):\n    \n    m = y.shape[1]\n    \n    cost = -1\/m*(np.sum(y*np.log(y_hat) + (1-y)*np.log(1-y_hat)))\n    return cost\n    \n    ","15b45c51":"def forwardBackward(x,y,w,b):\n    \n    y_hat = sigmoid(np.dot(w.T , x) + b)\n    \n    cost = computeCost(y,y_hat)\n    m = y.shape[1]\n    dw = np.dot(x , (y_hat-y).T)\/m\n    db = np.sum(y_hat - y)\/m\n    \n    grads = {\"dw\" : dw , \"db\" : db}\n    \n    return cost , grads\n\n    ","c962bb91":"def update(x , y , w , b , learning_rate = 0.01, num_iters = 3000):\n    \n    costs =[]\n    \n    for i in range(0 , num_iters):\n        cost , grads = forwardBackward(x,y,w,b)\n        w = w - learning_rate*grads[\"dw\"]\n        b = b - learning_rate*grads[\"db\"]\n        costs.append(cost)\n    \n    pars = {\"w\" : w , \"b\" : b}\n    \n    plt.plot(costs)\n    plt.xlabel(\"num of iters\")\n    plt.ylabel(\"cost\")\n    \n    plt.show()\n    \n    return costs , pars\n    \n    \n    ","931c0e5d":"def predict(x,w,b):\n    \n    y_hat = sigmoid(np.dot(w.T , x) + b)\n    \n    y_hat[y_hat > 0.5] = 1\n    y_hat[y_hat<=0.5] = 0\n    \n    return y_hat\n    ","38356922":"def logesticRegression(x_train,y_train,x_test,y_test,learning_rate,num_iters):\n    \n    n_x = x_train.shape[0]\n    \n    w,b = initiaize_parameters(n_x)\n    \n    costs , pars = update(x_train , y_train ,w,b,learning_rate,num_iters)\n    \n    y_prediction = predict(x_test,pars[\"w\"] , pars[\"b\"])\n    \n    print(\"Manuel Test Accuracy: {:.2f}%\".format((100 - np.mean(np.abs(y_prediction - y_test))*100)))\n    ","706ba9d2":"logesticRegression(x_train,y_train,x_test,y_test,0.01,3000)\n","cd26f038":"lr = LogisticRegression()\nlr.fit(x_train.T , y_train.T)\n\nacc = lr.score(x_test.T , y_test.T)*100\nprint(\"Test Accuracy {:.2f}%\".format(acc))","251f4437":"# normalize data","4e187e1a":"# logestic regression model"}}