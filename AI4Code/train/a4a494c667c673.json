{"cell_type":{"3fffbfa8":"code","109359dc":"code","ac1129e3":"code","25d905a4":"code","c159bcbe":"code","8451d879":"code","dae5edb4":"code","29a4b021":"code","6c337161":"code","4c319060":"code","52e6986a":"code","db92ab0c":"markdown","63d5f570":"markdown","56f6a034":"markdown","002e3aa6":"markdown","aa2750da":"markdown","8594da3c":"markdown","9437e41b":"markdown"},"source":{"3fffbfa8":"import numpy as np\nimport pandas as pd\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import OneHotEncoder, StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\n\nfrom sklearn.ensemble import GradientBoostingRegressor","109359dc":"data = pd.read_csv('..\/input\/house-prices-in-poland\/Houses.csv', encoding='latin-1')","ac1129e3":"data","25d905a4":"data.info()","c159bcbe":"def preprocess_inputs(df):\n    df = df.copy()\n    \n    # Drop unused columns\n    df = df.drop(['Unnamed: 0', 'address', 'id'], axis=1)\n    \n    # Split df into X and y\n    y = df['price']\n    X = df.drop('price', axis=1)\n    \n    # Train-test split\n    X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, shuffle=True, random_state=1)\n    \n    return X_train, X_test, y_train, y_test","8451d879":"X_train, X_test, y_train, y_test = preprocess_inputs(data)","dae5edb4":"X_train","29a4b021":"y_train","6c337161":"nominal_transformer = Pipeline(steps=[\n    ('onehot', OneHotEncoder(sparse=False))\n])\n\npreprocessor = ColumnTransformer(transformers=[\n    ('nominal', nominal_transformer, ['city'])\n], remainder='passthrough')\n\nmodel = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('scaler', StandardScaler()),\n    ('regressor', GradientBoostingRegressor())\n])","4c319060":"model.fit(X_train, y_train)","52e6986a":"y_pred = model.predict(X_test)\n\nrmse = np.sqrt(np.mean((y_test - y_pred)**2))\nprint(\"RMSE: {:.5f}\".format(rmse))\n\nbaseline_errors = np.sum((y_test - np.mean(y_test))**2)\nmodel_errors = np.sum((y_test - y_pred)**2)\n\nr2 = 1 - (model_errors \/ baseline_errors)\nprint(\"R^2 Score: {:.5f}\".format(r2))","db92ab0c":"# Task for Today  \n\n***\n\n## Poland House Price Prediction  \n\nGiven *data about houses in Poland*, let's try to predict the **price** of a given house.\n\nWe will use a gradient boosting regression model to make our predictions.","63d5f570":"# Data Every Day  \n\nThis notebook is featured on Data Every Day, a YouTube series where I train models on a new dataset each day.  \n\n***\n\nCheck it out!  \nhttps:\/\/youtu.be\/9-T48384oM0","56f6a034":"# Building Pipeline","002e3aa6":"# Preprocessing","aa2750da":"# Getting Started","8594da3c":"# Training","9437e41b":"# Results"}}