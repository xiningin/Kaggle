{"cell_type":{"6f8e3466":"code","48e6d726":"code","5630c699":"code","dc4a708d":"markdown","88261378":"markdown","12647b88":"markdown","658fb283":"markdown"},"source":{"6f8e3466":"# we will be working with bitcoin data, in specific the transactions table\nfrom google.cloud import bigquery\n\nclient = bigquery.Client()\n\ndataset_reference = client.dataset(\"crypto_bitcoin\", project = \"bigquery-public-data\")\n\ndataset = client.get_dataset(dataset_reference)\n\ntable_reference = dataset_reference.table(\"transactions\")\n\ntable = client.get_table(table_reference)\n\nclient.list_rows(table, max_results = 5).to_dataframe()","48e6d726":"query_date = \"\"\"\n             WITH time AS (\n             SELECT DATE(block_timestamp) AS date\n             FROM `bigquery-public-data.crypto_bitcoin.transactions`\n             )\n             SELECT COUNT(*) AS transactions, date\n             FROM time\n             GROUP BY date\n             ORDER BY date\n             \"\"\"\n\n# then we need to create a safe_config to make sure that the query does not overwhelm the 50gb limit\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed = 10**10)\nquery_job = client.query(query_date, job_config = safe_config)\n\ndaily_transactions = query_job.to_dataframe()\n\ndaily_transactions.head()","5630c699":"# creating a plot using the \"set_index\" functino to set the date as the variable\ndaily_transactions.set_index('date').plot()","dc4a708d":"Alright! Now that we were able to use the `head()` function to get a preview of what our *SQL query* is returning, we can create a graph of our results. ","88261378":"## SQL Practice 5\n\nJust some code to learn using SQL integrated within the *Kaggle environment*. \n\nIn this practice we're going to be exploring the **with** and **as** clauses a bit more in depth, which will allow us to create subsets within queries that we can act upon called **common table expressions** or *(CTEs)*.\n\nAs always, first we need to set up our environment so that we are able to run python code that will create a client that connects to the *Google BigQuery* servers that will let us work with the data sets and tables. ","12647b88":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","658fb283":"To simplify things a little bit we will be converting the `block_timestamp` column into a `date` type that we be easier to sort! Let's use the `EXTRACT` and `WITH` clauses.\n\nWe will then use this to measure bitcoin transactions over time, using **daily** increments and then graph our results for ease of interpretation!"}}