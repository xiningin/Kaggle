{"cell_type":{"5acf764c":"code","67ee3444":"code","b6959dc1":"code","c3504929":"code","b5440d05":"code","cbe8a011":"code","ced01366":"code","94944925":"code","64e51717":"code","ad3e3b68":"code","2368fa28":"code","3e69fdfb":"code","700aab02":"code","506568a2":"code","8da6adc1":"code","9e233794":"code","9eb5dae9":"code","8341f54b":"code","102cca60":"code","8b6fb167":"code","db8eadf3":"code","89f12810":"code","4bcabddd":"code","fbdd02fc":"code","a959d26f":"code","4bf2e80f":"code","37da3dd5":"code","b00933da":"code","1a817d13":"code","93fe7da0":"code","3d021d9b":"code","0e301b4b":"code","42f26118":"code","7b868540":"code","85ed5dbd":"markdown"},"source":{"5acf764c":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport plotly.offline as py\npy.init_notebook_mode(connected=True)\nimport plotly.graph_objs as go\nfrom plotly.figure_factory import create_table\nimport plotly.express as px\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","67ee3444":"data=pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')\n\ntable = create_table(data.head(10))\nfor i in range(len(table.layout.annotations)):\n    table.layout.annotations[i].font.size = 7\n    \npy.iplot(table,filename='table')","b6959dc1":"data=data.drop(['Evaporation', 'Sunshine','Cloud9am','Cloud3pm'], axis=1)\ndata=data.dropna(subset=['RainToday'])","c3504929":"print('data type : ' ,type(data))\nprint('table type : ' ,type(table))","b5440d05":"data.info()","cbe8a011":"data['Date'] = pd.to_datetime(data['Date'])\ndata.sort_values(by=['Date'], inplace=True)","ced01366":"df1 = data.groupby([\"RainToday\"]).count().reset_index()\n\nfig = px.bar(df1,\n             y=data.groupby([\"RainToday\"]).size(),\n             x=\"RainToday\",\n             color='RainToday')\nfig.show()","94944925":"data_x = data.query(\"Location in ('Canberra','Sydney','Perth','Darwin','Hobart','Brisbane')\")","64e51717":"group_data = data_x.groupby([\"RainToday\",\"Location\"])['RISK_MM'].mean().reset_index()\ngroup_data","ad3e3b68":"fig = px.bar(group_data, x=\"Location\", y=\"RISK_MM\", \n             color=\"RainToday\") \n   \nfig.show()","2368fa28":"fig = px.line(data, x=\"Date\", y=\"RISK_MM\", color=\"RainToday\",\n        line_shape=\"spline\", render_mode=\"svg\")\nfig.show()","3e69fdfb":"!pip install geopy \n!pip install Nominatim","700aab02":"from geopy.exc import GeocoderTimedOut \nfrom geopy.geocoders import Nominatim \n   \n# declare an empty list to store \n# latitude and longitude of values  \n# of city column \nlongitude = [] \nlatitude = [] \n   \n# function to find the coordinate \n# of a given city  \ndef findGeocode(city): \n       \n    # try and catch is used to overcome \n    # the exception thrown by geolocator \n    # using geocodertimedout   \n    try: \n          \n        # Specify the user_agent as your \n        # app name it should not be none \n        geolocator = Nominatim(user_agent=\"my_name\") \n          \n        return geolocator.geocode(city) \n      \n    except GeocoderTimedOut: \n          \n        return findGeocode(city)","506568a2":"loca=data[['Location']]\nloca=loca.drop_duplicates()\nloca.head()","8da6adc1":"# each value from city column \n# will be fetched and sent to \n# function find_geocode    \nfor i in (loca[\"Location\"]): \n      \n    if findGeocode(i) != None: \n           \n        loc = findGeocode(i) \n          \n        # coordinates returned from  \n        # function is stored into \n        # two separate list \n        latitude.append(loc.latitude) \n        longitude.append(loc.longitude) \n       \n    # if coordinate for a city not \n    # found, insert \"NaN\" indicating  \n    # missing value  \n    else: \n        latitude.append(np.nan) \n        longitude.append(np.nan)","9e233794":"loca[\"Longitude\"] = longitude \nloca[\"Latitude\"] = latitude ","9eb5dae9":"loca.head()","8341f54b":"data_left = pd.merge(data, loca, on='Location', how='left')\ndata_left.head()","102cca60":"import datetime as dt\ndata_left['AvgTemp']=(data_left['MinTemp']+data_left['MaxTemp'])\/2\ndata_left['mont_of_year'] = data_left['Date'].apply(lambda x: dt.datetime.strftime(x,'%b-%Y'))\ndata_left.head()","8b6fb167":"from datetime import datetime\ndata_left['mont_of_year_formatted'] = pd.to_datetime(data_left['mont_of_year'])","db8eadf3":"group_data2 = data_left.groupby([\"Location\",\"Longitude\",'Latitude','mont_of_year','mont_of_year_formatted'])['AvgTemp'].mean().reset_index()\ngroup_data2.head()","89f12810":"group_data2.sort_values(by=['mont_of_year_formatted'], inplace=True)","4bcabddd":"fig = px.density_mapbox(group_data2, lat='Latitude', lon='Longitude', radius=10, hover_name=\"Location\",color_continuous_scale=\"Viridis\",\n                        center=dict(lat=-30, lon=135),zoom=3, height=700,mapbox_style=\"stamen-terrain\",animation_frame=\"mont_of_year\")\nfig.show()","fbdd02fc":"fig = px.scatter_mapbox(group_data2, lat=\"Latitude\", lon=\"Longitude\", hover_name=\"Location\", color=\"AvgTemp\",\n                        size=\"AvgTemp\", color_continuous_scale=px.colors.sequential.matter, size_max=20,\n                        zoom=3, height=700, mapbox_style=\"open-street-map\",animation_frame=\"mont_of_year\")\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.show()","a959d26f":"group_data5 = data_left.groupby([\"Location\",\"Longitude\",'Latitude','mont_of_year','mont_of_year_formatted','RainToday'])['RISK_MM'].mean().reset_index()\ngroup_data5.sort_values(by=['mont_of_year_formatted'], inplace=True)","4bf2e80f":"import plotly.express as px\nfig = px.scatter_mapbox(group_data5, lat=\"Latitude\", lon=\"Longitude\", color=\"RainToday\", size=\"RISK_MM\",\n                  color_continuous_scale=px.colors.cyclical.IceFire, size_max=20, zoom=3,animation_frame=\"mont_of_year\",\n                  mapbox_style=\"carto-positron\")\nfig.show()","37da3dd5":"group_data3 = data_left.groupby([\"Location\",\"Longitude\",'Latitude','mont_of_year','mont_of_year_formatted','RainToday'])['MinTemp','MaxTemp','RISK_MM'].mean().reset_index()\ngroup_data3.head()","b00933da":"group_data33 = group_data3.query(\"Location in ('Townsville','Albury','AliceSprings','Cairns','Ballarat','Newcastle')\")\ngroup_data33.sort_values(by=['mont_of_year_formatted'], inplace=True)","1a817d13":"fig = px.scatter(group_data33, x=\"MinTemp\", y=\"MaxTemp\", animation_frame=\"mont_of_year\", animation_group=\"Location\",\n           size=\"RISK_MM\", color=\"RainToday\", hover_name=\"Location\", facet_col=\"Location\",\n           log_x=True, size_max=45)\nfig.show()","93fe7da0":"group_data4 = data_left.groupby(['mont_of_year','mont_of_year_formatted'])['WindSpeed3pm','WindSpeed9am','Humidity9am','Humidity3pm','Pressure9am','Pressure3pm','Temp9am','Temp3pm'].mean().reset_index()\ngroup_data4.sort_values(by=['mont_of_year_formatted'], inplace=True)\ngroup_data4.head()","3d021d9b":"fig = px.line(group_data4, x='mont_of_year', y=['WindSpeed9am', 'WindSpeed3pm'])\n\n# Show plot \nfig.show()","0e301b4b":"fig = px.line(group_data4, x='mont_of_year', y=['Humidity9am', 'Humidity3pm'])\n\n# Show plot \nfig.show()","42f26118":"fig = px.line(group_data4, x='mont_of_year', y=['Pressure9am', 'Pressure3pm'])\n\n# Show plot \nfig.show()","7b868540":"fig = px.line(group_data4, x='mont_of_year', y=['Temp9am', 'Temp3pm'])\n\n# Show plot \nfig.show()","85ed5dbd":"**Quick Visualizations with Custom Bar Charts**"}}