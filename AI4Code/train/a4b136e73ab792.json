{"cell_type":{"5b918f46":"code","cdb48dda":"code","bf96cd45":"code","cd46db4c":"code","f4974f6c":"code","d209e489":"code","1365f3b6":"code","91ec48c1":"code","97be2508":"code","d60b77bf":"code","db9ac504":"code","93823fc6":"code","29b157cc":"code","b25808b7":"code","4e8ac51d":"code","6c6a7ae4":"code","444038e1":"code","d5fbc3f7":"markdown","174ece89":"markdown","a1c3f086":"markdown","b93bc83a":"markdown","385398e8":"markdown","90c4d507":"markdown"},"source":{"5b918f46":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport datetime\nimport seaborn as sns\nimport scipy\n\n\n\nd_picks = pd.read_csv(\"\/kaggle\/input\/csgo-professional-matches\/picks.csv\")\nd_economy = pd.read_csv(\"\/kaggle\/input\/csgo-professional-matches\/economy.csv\")\nd_results = pd.read_csv(\"\/kaggle\/input\/csgo-professional-matches\/results.csv\")\nd_players = pd.read_csv(\"\/kaggle\/input\/csgo-professional-matches\/players.csv\")","cdb48dda":"import asyncio\n\"\"\"\nADAPTED FROM https:\/\/github.com\/ryankirkman\/pyglicko2\/blob\/master\/glicko2.py\n\nCopyright (c) 2009 Ryan Kirkman\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and\/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\"\"\"\n\nimport math\n\nclass Player:\n    # Class attribute\n    # The system constant, which constrains\n    # the change in volatility over time.\n    _tau = 0.5\n\n    def getRating(self):\n        return (self.__rating * 173.7178) + 1500 \n\n    def setRating(self, rating):\n        self.__rating = (rating - 1500) \/ 173.7178\n\n    rating = property(getRating, setRating)\n\n    def getRd(self):\n        return self.__rd * 173.7178\n\n    def setRd(self, rd):\n        self.__rd = rd \/ 173.7178\n\n    rd = property(getRd, setRd)\n     \n    def __init__(self, rating = 1500, rd = 350, vol = 0.06):\n        # For testing purposes, preload the values\n        # assigned to an unrated player.\n        self.setRating(rating)\n        self.setRd(rd)\n        self.vol = vol\n        self.RDList = np.zeros(10)\n        self.ratingList = np.zeros(10)\n        self.outcomeList = np.zeros(10)\n        self.games_played = 0\n        \n    def add_game_and_train(self, ratingEnemy, RDEnemy, outcome):\n        self.ratingList[self.games_played] = ratingEnemy\n        self.RDList[self.games_played] = RDEnemy\n        self.outcomeList[self.games_played] = outcome\n        \n        self.games_played += 1\n        \n        if self.games_played >= 10:\n            self.games_played = 0\n            self.update_player(self.ratingList, self.RDList, self.outcomeList)\n            \n    def _preRatingRD(self):\n        \"\"\" Calculates and updates the player's rating deviation for the\n        beginning of a rating period.\n        \n        preRatingRD() -> None\n        \n        \"\"\"\n        self.__rd = math.sqrt(math.pow(self.__rd, 2) + math.pow(self.vol, 2))\n        \n    def update_player(self, rating_list, RD_list, outcome_list):\n        \"\"\" Calculates the new rating and rating deviation of the player.\n        \n        update_player(list[int], list[int], list[bool]) -> None\n        \n        \"\"\"\n        # Convert the rating and rating deviation values for internal use.\n        rating_list = [(x - 1500) \/ 173.7178 for x in rating_list]\n        RD_list = [x \/ 173.7178 for x in RD_list]\n\n        v = self._v(rating_list, RD_list)\n        self.vol = self._newVol(rating_list, RD_list, outcome_list, v)\n        self._preRatingRD()\n        \n        self.__rd = 1 \/ math.sqrt((1 \/ math.pow(self.__rd, 2)) + (1 \/ v))\n        \n        tempSum = 0\n        for i in range(len(rating_list)):\n            tempSum += self._g(RD_list[i]) * \\\n                       (outcome_list[i] - self._E(rating_list[i], RD_list[i]))\n        self.__rating += math.pow(self.__rd, 2) * tempSum\n        \n        \n    def _newVol(self, rating_list, RD_list, outcome_list, v):\n        \"\"\" Calculating the new volatility as per the Glicko2 system.\n        \n        _newVol(list, list, list) -> float\n        \n        \"\"\"\n        i = 0\n        delta = self._delta(rating_list, RD_list, outcome_list, v)\n        a = math.log(math.pow(self.vol, 2))\n        tau = self._tau\n        x0 = a\n        x1 = 0\n        \n        while x0!=x1 and i<100:\n            i+=1\n            # New iteration, so x(i) becomes x(i-1)\n            x0 = x1\n            d = math.pow(self.__rating, 2) + v + math.exp(x0)\n            h1 = -(x0 - a) \/ math.pow(tau, 2) - 0.5 * math.exp(x0) \\\n            \/ d + 0.5 * math.exp(x0) * math.pow(delta \/ d, 2)\n            h2 = -1 \/ math.pow(tau, 2) - 0.5 * math.exp(x0) * \\\n            (math.pow(self.__rating, 2) + v) \\\n            \/ math.pow(d, 2) + 0.5 * math.pow(delta, 2) * math.exp(x0) \\\n            * (math.pow(self.__rating, 2) + v - math.exp(x0)) \/ math.pow(d, 3)\n            x1 = x0 - (h1 \/ h2)\n\n        return math.exp(x1 \/ 2)\n        \n    def _delta(self, rating_list, RD_list, outcome_list, v):\n        \"\"\" The delta function of the Glicko2 system.\n        \n        _delta(list, list, list) -> float\n        \n        \"\"\"\n        tempSum = 0\n        for i in range(len(rating_list)):\n            tempSum += self._g(RD_list[i]) * (outcome_list[i] - self._E(rating_list[i], RD_list[i]))\n        return v * tempSum\n        \n    def _v(self, rating_list, RD_list):\n        \"\"\" The v function of the Glicko2 system.\n        \n        _v(list[int], list[int]) -> float\n        \n        \"\"\"\n        tempSum = 0\n        for i in range(len(rating_list)):\n            tempE = self._E(rating_list[i], RD_list[i])\n            tempSum += math.pow(self._g(RD_list[i]), 2) * tempE * (1 - tempE)\n        return 1 \/ tempSum\n        \n    def _E(self, p2rating, p2RD):\n        \"\"\" The Glicko E function.\n        \n        _E(int) -> float\n        \n        \"\"\"\n        return 1 \/ (1 + math.exp(-1 * self._g(p2RD) * \\\n                                 (self.__rating - p2rating)))\n        \n    def _g(self, RD):\n        \"\"\" The Glicko2 g(RD) function.\n        \n        _g() -> float\n        \n        \"\"\"\n        return 1 \/ math.sqrt(1 + 3 * math.pow(RD, 2) \/ math.pow(math.pi, 2))\n        \n    def did_not_compete(self):\n        \"\"\" Applies Step 6 of the algorithm. Use this for\n        players who did not compete in the rating period.\n        did_not_compete() -> None\n        \n        \"\"\"\n        self._preRatingRD()","bf96cd45":"dataframes=[d_picks,d_economy,d_results]\nfor df in dataframes:\n    print(df.describe())\n    print(df.head())","cd46db4c":"d_results_old = d_results\nd_results['date'] = pd.to_datetime(d_results['date'])\nd_results = d_results[d_results['date']>pd.to_datetime(datetime.date(2016, 1, 1))]\nd_results = d_results[d_results['match_id'].isin(d_players['match_id'])]\n\nd_results.sort_values(by='date',ascending=True)","f4974f6c":"d_results['team_1'].value_counts()","d209e489":"d_players_old = d_players\nd_players['date'] = pd.to_datetime(d_players['date'])\nd_players = d_players[d_players['date']>pd.to_datetime(datetime.date(2016, 1, 1))]\nd_players = d_players[d_players['match_id'].isin(d_results['match_id'])]\n\nd_players.sort_values(by='date',ascending=False)","1365f3b6":"d_results['team_1'].value_counts().head(30).plot(kind='bar')\nprint(d_results['team_1'].value_counts()[:30])\nbest_teams = d_results['team_1'].value_counts()[:]\n\nplt.show()\nd_players['player_name'].value_counts().head(30).plot(kind='bar')\nbest_teams = best_teams.index.to_numpy()\nbest_players = d_players['player_name'].value_counts().index.to_numpy()\nprint(best_players)\n\nd_results_bestteams = d_results_old[d_results_old['team_1'].isin(best_teams) & d_results_old['team_2'].isin(best_teams) & d_results_old['match_id'].isin(d_players['match_id'])]\n\ndate_split = datetime.date(2019, 1, 1)\nd_results_bestteams_test = d_results_bestteams[d_results_bestteams['date'] >= pd.to_datetime(date_split)]\nd_results_bestteams = d_results_bestteams[d_results_bestteams['date'] < pd.to_datetime(date_split)]\n\nd_results_bestteams.sort_values(by='date',ascending=True)","91ec48c1":"index_dict = {}\nplayers_dict = {} #Should remove this and just use hashing\nglickoObjects = np.empty(len(best_teams), dtype=np.object)\nglickoObjects_Players = np.empty(len(best_players), dtype=np.object)\n\nfor i, team in enumerate(best_teams):\n    index_dict[team] = i\n    glickoObjects[i] = Player()\n    \nfor i, player in enumerate(best_players):\n    players_dict[player] = i\n    glickoObjects_Players[i] = Player()","97be2508":"games=0\nupward_bias = 0.0\n\nfor _, row in d_results_bestteams.sort_values(by='date',ascending=True).iterrows():\n    if games%1000==0:\n        print(f\"Now at game {games+1}\")\n    games+=1\n#     print(i)\n    team1 = row['team_1']\n    team2 = row['team_2']\n    \n    d_players_match = d_players[d_players['match_id']==(row['match_id'])]\n    players_team1 = d_players_match[d_players_match['team']==team1]['player_name'].unique()\n    players_team2 = d_players_match[d_players_match['team']==team2]['player_name'].unique()\n    \n    Rdt1 = np.zeros(len(players_team1))\n    Rating1 = np.zeros(len(players_team1))\n    Rdt2 = np.zeros(len(players_team2))\n    Rating2 = np.zeros(len(players_team2))\n    \n    for i, player in enumerate(players_team1):\n        player_id = players_dict[player]\n        Rdt1[i] = glickoObjects_Players[player_id].getRd()\n        Rating1[i] = glickoObjects_Players[player_id].getRating()\n    average_ratingt1 = np.average(Rating1, weights = 1\/(Rdt1**2))\n    sigmat1 = np.sqrt(np.sum(Rdt1**2))\n        \n    for i, player in enumerate(players_team2):\n        player_id = players_dict[player]\n        Rdt2[i] = glickoObjects_Players[player_id].getRd()\n        Rating2[i] = glickoObjects_Players[player_id].getRating()\n    average_ratingt2 = np.average(Rating2, weights = 1\/(Rdt2**2))\n    sigmat2 = np.sqrt(np.sum(Rdt2**2))\n    \n#     print(games)\n    if row['map_winner']==1: #match_winner\n        glickoObjects[index_dict[team1]].add_game_and_train(glickoObjects[index_dict[team2]].getRating(), glickoObjects[index_dict[team2]].getRd(), 1 + upward_bias)\n        glickoObjects[index_dict[team2]].add_game_and_train(glickoObjects[index_dict[team1]].getRating(), glickoObjects[index_dict[team1]].getRd(), 0 + upward_bias)\n        for player in players_team1:\n            player_id = players_dict[player]\n            glickoObjects_Players[player_id].add_game_and_train(average_ratingt2, sigmat2, 1)\n        for player in players_team2:\n            player_id = players_dict[player]\n            glickoObjects_Players[player_id].add_game_and_train(average_ratingt1, sigmat1, 0)\n            \n    else:\n        glickoObjects[index_dict[team1]].add_game_and_train(glickoObjects[index_dict[team2]].getRating(), glickoObjects[index_dict[team2]].getRd(), 0 + upward_bias)\n        glickoObjects[index_dict[team2]].add_game_and_train(glickoObjects[index_dict[team1]].getRating(), glickoObjects[index_dict[team1]].getRd(), 1 + upward_bias)\n        for player in players_team1:\n            player_id = players_dict[player]\n            glickoObjects_Players[player_id].add_game_and_train(average_ratingt2, sigmat2, 0)\n        for player in players_team2:\n            player_id = players_dict[player]\n            glickoObjects_Players[player_id].add_game_and_train(average_ratingt1, sigmat1, 1)#ratingEnemy, RDEnemy, outcome\nprint(games)","d60b77bf":"def loss_t1_probability(rating1,RD1,rating2,RD2):\n    func = lambda x: np.exp(-(x-rating1)**2\/(2*RD1**2)) * scipy.special.erfc((x - rating2)\/(RD2*np.sqrt(2)))\/(2*np.sqrt(2*np.pi)*RD1)\n    return scipy.integrate.quad(func,np.amin([rating1-20*RD1,rating2-20*RD2]),np.amax([rating1+20*RD1,rating2+20*RD2]),points = (rating1,rating2))[0]\nprint(loss_t1_probability(1500,350,1800,350))\n\ndef Kelly_crit(loss_prob, odds, fraction_money = 0.1):\n    return ((1-loss_prob) - loss_prob\/odds)*fraction_money","db9ac504":"# print(best_teams)\nteam1 = 'fnatic'\nteam2 = 'Illuminar'\nprint(glickoObjects[index_dict[team1]].getRating())\nprint(glickoObjects[index_dict[team1]].getRd())\nprint(glickoObjects[index_dict[team1]].getRating() - 2*glickoObjects[index_dict[team1]].getRd())\nprint(glickoObjects[index_dict[team2]].getRating())\nprint(glickoObjects[index_dict[team2]].getRd())\nprint(glickoObjects[index_dict[team2]].getRating() - 2*glickoObjects[index_dict[team2]].getRd())\n","93823fc6":"import random\nprofit_company = 0.05\nvariationality = 0.05\n\ntotal_games=0\ntotal_correctpredictions = 0\ntotal_correctpredictions_probabilities = 0\ntotal_correctpredictions_players = 0\ntotal_correctpredictions_probabilities_players = 0\nmoney = 1\nmoney_array = np.zeros(len(d_results_bestteams_test['date']))\nmoney_players = 1\nmoney_players_array = np.zeros(len(d_results_bestteams_test['date']))\n\nfor _, row in d_results_bestteams_test.sort_values(by='date',ascending=True).iterrows():\n    money_array[total_games] = money\n    money_players_array[total_games] = money_players\n    total_games += 1\n    if total_games %1000==0:\n        print(f\"I am now doing  game {total_games}\")\n#     print(total_games)\n    team1 = row['team_1']\n    team2 = row['team_2']\n    \n    d_players_match = d_players[d_players['match_id']==(row['match_id'])]\n    players_team1 = d_players_match[d_players_match['team']==team1]['player_name'].unique()\n    players_team2 = d_players_match[d_players_match['team']==team2]['player_name'].unique()\n    \n    rating1 = glickoObjects[index_dict[team1]].getRating()\n    rating2 = glickoObjects[index_dict[team2]].getRating()\n    Rd1 = glickoObjects[index_dict[team1]].getRd()\n    Rd2 = glickoObjects[index_dict[team2]].getRd()\n    \n    Rdt1 = np.zeros(len(players_team1))\n    Rating1 = np.zeros(len(players_team1))\n    Rdt2 = np.zeros(len(players_team2))\n    Rating2 = np.zeros(len(players_team2))\n    \n    for i, player in enumerate(players_team1):\n        player_id = players_dict[player]\n        Rdt1[i] = glickoObjects_Players[player_id].getRd()\n        Rating1[i] = glickoObjects_Players[player_id].getRating()\n    average_ratingt1 = np.average(Rating1, weights = 1\/(Rdt1**2))\n    average_ratingt1 = np.sum(Rating1)\n    sigmat1 = np.sqrt(np.sum(Rdt1**2))\n        \n    for i, player in enumerate(players_team2):\n        player_id = players_dict[player]\n        Rdt2[i] = glickoObjects_Players[player_id].getRd()\n        Rating2[i] = glickoObjects_Players[player_id].getRating()\n    average_ratingt2 = np.average(Rating2, weights = 1\/(Rdt2**2))\n    average_ratingt2 = np.sum(Rating2)\n    sigmat2 = np.sqrt(np.sum(Rdt2**2))\n    \n    loss_prob_t1 = loss_t1_probability(rating1,Rd1,rating2,Rd2)\n    loss_prob_t1_players = loss_t1_probability(average_ratingt1,sigmat1,average_ratingt2,sigmat2)\n    \n    temp_var = min(variationality,loss_prob_t1,loss_prob_t1_players,1-loss_prob_t1,1-loss_prob_t1_players)\n    rand = random.uniform(-temp_var,temp_var)\n    odds_team_1 = (loss_prob_t1+rand)\/(1-loss_prob_t1-rand)*(1-profit_company)\n    odds_team_2 = (1-loss_prob_t1-rand)\/(loss_prob_t1+rand)*(1-profit_company)\n    odds_team_1_players = (loss_prob_t1_players+rand)\/(1-loss_prob_t1_players-rand)*(1-profit_company)\n    odds_team_2_players = (1-loss_prob_t1_players-rand)\/(loss_prob_t1_players+rand)*(1-profit_company)\n    \n#     print(row['map_winner'])\n#     print(loss_prob_t1)\n#     print(Kelly_crit(loss_prob_t1,odds))\n#     print(money*(2 - row['map_winner'])*(odds*np.amax([0, Kelly_crit(loss_prob_t1,odds)]) - np.amax([0, Kelly_crit(1-loss_prob_t1,odds)])) + money*(row['map_winner'] - 1)*(odds * np.amax([0, Kelly_crit(1-loss_prob_t1,odds)]) - np.amax([0, Kelly_crit(loss_prob_t1,odds)])))\n#     print(money)\n#     print(money*(2 - row['map_winner'])*(odds*np.amax([0, Kelly_crit(loss_prob_t1,odds)])))\n#     print(money*(row['map_winner'] - 1)*(odds * np.amax([0, Kelly_crit(1-loss_prob_t1,odds)]) - np.amax([0, Kelly_crit(loss_prob_t1,odds)])))\n    if Rd1<50 and Rd2 <50:\n        money += money*(2 - row['map_winner'])*(odds_team_1*np.amax([0, Kelly_crit(loss_prob_t1,odds_team_1)]) - np.amax([0, Kelly_crit(1-loss_prob_t1,odds_team_2)])) + money*(row['map_winner'] - 1)*(odds_team_2 * np.amax([0, Kelly_crit(1-loss_prob_t1,odds_team_2)]) - np.amax([0, Kelly_crit(loss_prob_t1,odds_team_1)]))\n    if sigmat1 < 200 and sigmat2 < 200:\n        money_players += money_players*(2 - row['map_winner'])*(odds_team_1_players*np.amax([0, Kelly_crit(loss_prob_t1_players,odds_team_1_players)]) - np.amax([0, Kelly_crit(1-loss_prob_t1_players,odds_team_2_players)])) + money_players*(row['map_winner'] - 1)*(odds_team_2_players * np.amax([0, Kelly_crit(1-loss_prob_t1_players,odds_team_2_players)]) - np.amax([0, Kelly_crit(loss_prob_t1_players,odds_team_1_players)]))\n    \n    if (rating1 - 2*Rd1 > rating2 - 2*Rd2) and row['map_winner']==1:\n        total_correctpredictions +=1\n    elif (rating1 - 2*Rd1 < rating2 - 2*Rd2) and row['map_winner']==2:\n        total_correctpredictions +=1\n#     if (rating1 > rating2) and row['map_winner']==1:\n#         total_correctpredictions +=1\n#     elif (rating1 < rating2) and row['map_winner']==2:\n#         total_correctpredictions +=1\n        \n    if row['map_winner']==1:\n        total_correctpredictions_probabilities += 1 - loss_prob_t1\n    elif row['map_winner']==2:\n        total_correctpredictions_probabilities += loss_prob_t1\n        \n    if (average_ratingt1 - 2*sigmat1 > average_ratingt2 - 2*sigmat2) and row['map_winner']==1:\n        total_correctpredictions_players +=1\n    elif (average_ratingt1 - 2*sigmat1 < average_ratingt2 - 2*sigmat2) and row['map_winner']==2:\n        total_correctpredictions_players +=1\n        \n    if row['map_winner']==1:\n        total_correctpredictions_probabilities_players += 1 - loss_prob_t1_players\n    elif row['map_winner']==2:\n        total_correctpredictions_probabilities_players += loss_prob_t1_players\n        \n    if row['map_winner']==1: #match_winner\n        glickoObjects[index_dict[team1]].add_game_and_train(glickoObjects[index_dict[team2]].getRating(), glickoObjects[index_dict[team2]].getRd(), 1 + upward_bias)\n        glickoObjects[index_dict[team2]].add_game_and_train(glickoObjects[index_dict[team1]].getRating(), glickoObjects[index_dict[team1]].getRd(), 0 + upward_bias)\n        for player in players_team1:\n            player_id = players_dict[player]\n            glickoObjects_Players[player_id].add_game_and_train(average_ratingt2, sigmat2, 1)\n        for player in players_team2:\n            player_id = players_dict[player]\n            glickoObjects_Players[player_id].add_game_and_train(average_ratingt1, sigmat1, 0)\n    else:\n        glickoObjects[index_dict[team1]].add_game_and_train(glickoObjects[index_dict[team2]].getRating(), glickoObjects[index_dict[team2]].getRd(), 0 + upward_bias)\n        glickoObjects[index_dict[team2]].add_game_and_train(glickoObjects[index_dict[team1]].getRating(), glickoObjects[index_dict[team1]].getRd(), 1 + upward_bias)#ratingEnemy, RDEnemy, outcome\n        for player in players_team1:\n            player_id = players_dict[player]\n            glickoObjects_Players[player_id].add_game_and_train(average_ratingt2, sigmat2, 0)\n        for player in players_team2:\n            player_id = players_dict[player]\n            glickoObjects_Players[player_id].add_game_and_train(average_ratingt1, sigmat1, 1)#ratingEnemy, RDEnemy, outcome\n\nplt.plot(money_array)\nplt.yscale('log',basey=2) \nplt.show()\nplt.plot(money_players_array)\nplt.yscale('log',basey=2) \nplt.show()\n\nprint(total_correctpredictions)\nprint(total_correctpredictions_players)\nprint(total_correctpredictions_probabilities)\nprint(total_correctpredictions_probabilities_players)\n# print(total_games)\nprint(total_correctpredictions\/total_games)\nprint(total_correctpredictions_players\/total_games)\nprint(total_correctpredictions_probabilities\/total_games)\nprint(total_correctpredictions_probabilities_players\/total_games)\nprint(money)\nprint(money_players)","29b157cc":"team1 = 'AGF'\nteam2 = 'BLUEJAYS'\nprint(glickoObjects[index_dict[team1]].getRating())\nprint(glickoObjects[index_dict[team1]].getRd())\nprint(glickoObjects[index_dict[team1]].getRating() - 2*glickoObjects[index_dict[team1]].getRd())\nprint(glickoObjects[index_dict[team2]].getRating())\nprint(glickoObjects[index_dict[team2]].getRd())\nprint(glickoObjects[index_dict[team2]].getRating() - 2*glickoObjects[index_dict[team2]].getRd())\n\nloss_prob_t1 = loss_t1_probability(glickoObjects[index_dict[team1]].getRating(),glickoObjects[index_dict[team1]].getRd(),glickoObjects[index_dict[team2]].getRating(),glickoObjects[index_dict[team2]].getRd())\nprint(loss_prob_t1)\nprint(Kelly_crit(loss_prob_t1, 0.3))\nprint(Kelly_crit(1-loss_prob_t1, 2.3))","b25808b7":"def match_prediction(team1, team2, odds1 = 0.87, odds2 = 0.87):\n    rating1 = glickoObjects[index_dict[team1]].getRating()\n    rating2 = glickoObjects[index_dict[team2]].getRating()\n    Rd1 = glickoObjects[index_dict[team1]].getRd()\n    Rd2 = glickoObjects[index_dict[team2]].getRd()\n    loss_prob_t1 = loss_t1_probability(rating1,Rd1,rating2,Rd2)\n    \n    if rating1 - 2*Rd1 > rating2 - 2*Rd2:\n        print(f\"I think that {team1} is going to win with probability {1-loss_prob_t1}\")\n    else:\n        print(f\"I think that {team2} is going to win with probability {loss_prob_t1}\")\n    print(f\"I would bet { Kelly_crit(loss_prob_t1,odds1)} on {team1}\")\n    print(f\"I would bet { Kelly_crit(1 - loss_prob_t1,odds2)} on {team2}\")\n\nmatch_prediction('AGF','BLUEJAYS',0.3,2.3)\nmatch_prediction('Nexus','Berzerk',0.28,2.5)\nmatch_prediction('FATE','LDLC',0.556,1.24)\n\nimport math\nprint(*math.log(money_array))","4e8ac51d":"def reduce_mem_usage(df):\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    for col in df.columns:\n        col_type = df[col].dtype\n    if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.uint8).min and c_max < np.iinfo(np.uint8).max:\n                    df[col] = df[col].astype(np.uint8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.uint16).min and c_max < np.iinfo(np.uint16).max:\n                    df[col] = df[col].astype(np.uint16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.uint32).min and c_max < np.iinfo(np.uint32).max:\n                    df[col] = df[col].astype(np.uint32)                    \n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)\n                elif c_min > np.iinfo(np.uint64).min and c_max < np.iinfo(np.uint64).max:\n                    df[col] = df[col].astype(np.uint64)\n            elif str(col_type)[:5] == 'float':\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n    return df\n","6c6a7ae4":"reduce_mem_usage(d_results)\nreduce_mem_usage(d_economy)\nreduce_mem_usage(d_players)\nreduce_mem_usage(d_picks)","444038e1":"print(hash('ALEC')%100)","d5fbc3f7":"## Prediction\nI do not use any statistics as of yet, so I will purely base my predictions on the minimum rating within the 95% confidence interval. As you can see this prediction is correct 55% to 60% of the time, which in my opinion is quite decent when you do not keep updating the ratings every day.\n\nI have included calculations on when to predict on which team. As you can see it seems to yield that you can earn money very quickly, however take the results with a grain of salt, since the odds I have used are constant and thus incorrect. The betting agencies do their own analysis which is most likely better and ensures that in general you will not earn money.","174ece89":"## Feature creation\nI here ensure that the dates are correct.","a1c3f086":"## Further outlook\n\nThere are multiple things which can still be improved and I might still challenge myself or otherwise you to implement these things:\n* Implement Glicko2 on a player-level instead of team-level\n* Implement Glicko2 with specific maps\n* Find out whether there is advantage to start ct or t on certain maps\n* Implement machine learning techniques for prediction, possibly together with the Glicko2 scores or something like applying ARIMA to see what happens to a team\/player overtime\n* Obtain more data\n\nI believe we basically have all data we may possibly get, but getting more may be interesting and needed for better predictions.","b93bc83a":"Here you can filter out teams which did not compete enough. I ended up using the entire dataset, since I was afraid the Glicko system would not obtain enough examples.","385398e8":"## Learning\nHere I go through every map played and enter it into the Glicko2 system and train it.","90c4d507":"# Predicting the winning team using Glicko2\n## Introduction\nI want to thank \\href{https:\/\/www.kaggle.com\/mateusdmachado}{Mateus Dauernheimer Machado} for this data.\n\nMy aim was to be able to predict which team would win in a certain game. I wanted to start out without using machine learning, although I might expand my notebook with some machine learning techniques later. My main idea was to use the Glicko2 system for rating players. This is one of the most widely used systems for rating players within games employed for games such as chess. I used this first of all on a team-level instead of the players individually, since I could not find sources yet which implement this for team games, although they most certainly exist.\n"}}