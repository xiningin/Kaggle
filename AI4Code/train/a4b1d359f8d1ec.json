{"cell_type":{"bb9f2bf1":"code","4fb0a68d":"code","507ba486":"code","3d993c03":"code","a4dc34af":"code","d2007735":"code","91b1b280":"code","c3289f58":"code","48abf4e6":"code","fd963233":"code","91aeab06":"code","a73e112f":"code","eacf8fda":"code","d18b4468":"code","4ed308d9":"code","a3f29bb9":"code","dea5b4c5":"code","7dc592d4":"code","7304589b":"code","7984d064":"code","a63b477b":"code","cb287935":"code","1566d52f":"code","3aaec767":"code","3382314c":"code","501ed8ce":"code","4d4d82f9":"code","0c0d373e":"code","a0aeb550":"code","01d0ce84":"code","d56dc1fe":"code","9f7dda01":"code","de560f6b":"code","37a8b139":"code","0e041e24":"code","624a7190":"code","3f7307a0":"code","4f9c87b3":"code","4ca6899f":"code","b74ad985":"code","25ddd194":"code","67fc62d7":"code","c60ffdf2":"code","310e41e8":"code","b6acd382":"code","b37942f4":"code","d12997f5":"code","8003bc66":"code","b0686e97":"code","0763c703":"code","d50582ef":"code","c4d884e8":"code","e119730a":"code","70ebb952":"code","a928ca3b":"code","86d4900b":"code","4e3d3191":"code","f18dfcc2":"code","cb47d045":"code","4553d728":"code","9ca2f62a":"code","87276c2f":"code","24ed73e0":"code","af6add87":"code","c9fe5406":"code","174b8ff3":"code","f7f17e92":"code","89873916":"code","b4d72c9d":"code","c800a9a1":"code","d3061bb5":"code","7f9cda3f":"code","55030dab":"code","ef3b3eee":"code","442b1973":"code","13dfebfd":"code","9a76f9be":"code","1d745c93":"code","07029e8e":"code","c55fecb1":"code","d385f12f":"markdown","3c37770b":"markdown","6bada73b":"markdown","aec493f1":"markdown","62a3b1ab":"markdown","215b3138":"markdown","e0996416":"markdown","647c251d":"markdown","a482553f":"markdown"},"source":{"bb9f2bf1":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4fb0a68d":"import numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set() #setting seaborn default for plots\nimport os","507ba486":"import pandas as pd\ngender_submission = pd.read_csv(\"..\/input\/titanic\/gender_submission.csv\")\ntest = pd.read_csv(\"..\/input\/titanic\/test.csv\")\ntrain = pd.read_csv(\"..\/input\/titanic\/train.csv\")","3d993c03":"train.head()","a4dc34af":"train.shape","d2007735":"test.shape","91b1b280":"train.info()","c3289f58":"test.info()","48abf4e6":"train.isnull().sum()","fd963233":"test.isnull().sum()","91aeab06":"def bar_chart(feature):\n    survived = train[train['Survived']==1][feature].value_counts()\n    dead = train[train['Survived']==0][feature].value_counts()\n    df = pd.DataFrame([survived, dead])\n    df.index = ['Survived', 'Dead']\n    df.plot(kind = 'bar', stacked = True, figsize = (10,5))","a73e112f":"bar_chart('Sex')","eacf8fda":"bar_chart('Pclass')","d18b4468":"bar_chart('SibSp')","4ed308d9":"bar_chart('Parch')","a3f29bb9":"bar_chart('Embarked')","dea5b4c5":"#names\ntrain_test_data= [train, test] #combining training and test data\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Name'].str.extract('([A-Za-z]+)\\.',expand = False)","7dc592d4":"train['Title'].value_counts()","7304589b":"test['Title'].value_counts()","7984d064":"title_mapping = {\"Mr\": 0, \"Miss\": 1, \"Mrs\": 2, \n                 \"Master\": 3, \"Dr\": 3, \"Rev\": 3, \"Col\": 3, \"Major\": 3, \"Mlle\": 3,\"Countess\": 3,\n                 \"Ms\": 3, \"Lady\": 3, \"Jonkheer\": 3, \"Don\": 3, \"Dona\" : 3, \"Mme\": 3,\"Capt\": 3,\"Sir\": 3 }\nfor dataset in train_test_data:\n    dataset['Title'] = dataset['Title'].map(title_mapping)","a63b477b":"train.head()","cb287935":"test.head()","1566d52f":"bar_chart('Title')","3aaec767":"#deleting unnessery feature from dataset\ntrain.drop('Name', axis=1, inplace = True)\ntest.drop('Name', axis=1, inplace = True)","3382314c":"train.head()","501ed8ce":"test.head()","4d4d82f9":"# sex\n# male=0, female=1\nsex_mapping = {\"male\":0, \"female\":1}\nfor dataset in train_test_data:\n    dataset[\"Sex\"] = dataset[\"Sex\"].map(sex_mapping)","0c0d373e":"train.head()","a0aeb550":"test.head()","01d0ce84":"bar_chart('Sex')","d56dc1fe":"# age\n# some age is missing, we'll use title's median age for missing age\n# fill missing age with median age for each title (Mr, Miss, Mrs, Others)\ntrain[\"Age\"].fillna(train.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)\ntest[\"Age\"].fillna(test.groupby(\"Title\")[\"Age\"].transform(\"median\"), inplace=True)","9f7dda01":"train.head(30)\ntrain.groupby(\"Title\")[\"Age\"].transform(\"median\")","de560f6b":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\n\nplt.show()","37a8b139":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(0,20)","0e041e24":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(30,40)","624a7190":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(40,60)","3f7307a0":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot,'Age',shade=True)\nfacet.set(xlim=(0, train['Age'].max()))\nfacet.add_legend()\nplt.xlim(60)","4f9c87b3":"train.info()","4ca6899f":"test.info()","b74ad985":"for dataset in train_test_data:\n    dataset.loc[dataset['Age'] <= 16, 'Age'] = 0,\n    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 26), 'Age'] = 1,\n    dataset.loc[(dataset['Age'] > 26) & (dataset['Age'] <= 36), 'Age'] = 2,\n    dataset.loc[(dataset['Age'] > 36) & (dataset['Age'] <= 62), 'Age'] = 3,\n    dataset.loc[dataset['Age'] > 62, 'Age'] = 4","25ddd194":"train.head()","67fc62d7":"bar_chart('Age')","c60ffdf2":"#Embarked \n#filling missing values\nPclass1 = train[train['Pclass']==1]['Embarked'].value_counts()\nPclass2 = train[train['Pclass']==2]['Embarked'].value_counts()\nPclass3 = train[train['Pclass']==3]['Embarked'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class', '2nd index', '3rd class']\ndf.plot(kind='bar',stacked = True, figsize=(10,5))","310e41e8":"#filling out missing data with S embark\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].fillna('S')","b6acd382":"train.head()","b37942f4":"#embark mapping S=0, C=1, Q=2\nembarked_mapping = {\"S\":0, \"C\":1, \"Q\":2}\nfor dataset in train_test_data:\n    dataset['Embarked'] = dataset['Embarked'].map(embarked_mapping)","d12997f5":"# fare \n# fill missing fare with median fare for each Pclass\ntrain[\"Fare\"].fillna(train.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)\ntest[\"Fare\"].fillna(test.groupby(\"Pclass\")[\"Fare\"].transform(\"median\"), inplace=True)","8003bc66":"train.head()","b0686e97":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Fare', shade = True)\nfacet.set(xlim=(0,train['Fare'].max()))\nfacet.add_legend()\n\nplt.show()","0763c703":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Fare', shade = True)\nfacet.set(xlim=(0,train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0,20)","d50582ef":"facet = sns.FacetGrid(train, hue=\"Survived\", aspect=4)\nfacet.map(sns.kdeplot, 'Fare', shade = True)\nfacet.set(xlim=(0,train['Fare'].max()))\nfacet.add_legend()\nplt.xlim(0,30)","c4d884e8":"for dataset in train_test_data:\n    dataset.loc[dataset['Fare'] <= 17, 'Fare']=0,\n    dataset.loc[(dataset['Fare'] > 17) & (dataset['Fare'] <= 30), 'Fare']=1,\n    dataset.loc[(dataset['Fare'] > 30) & (dataset['Fare'] <= 100), 'Fare']=2,\n    dataset.loc[dataset['Fare'] >100, 'Fare']=3","e119730a":"train.head()","70ebb952":"# cabin\ntrain.Cabin.value_counts()","a928ca3b":"for dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].str[:1]","86d4900b":"Pclass1 = train[train['Pclass']==1]['Cabin'].value_counts()\nPclass2 = train[train['Pclass']==2]['Cabin'].value_counts()\nPclass3 = train[train['Pclass']==3]['Cabin'].value_counts()\ndf = pd.DataFrame([Pclass1, Pclass2, Pclass3])\ndf.index = ['1st class','2nd class', '3rd class']\ndf.plot(kind='bar',stacked=True, figsize=(10,5))","4e3d3191":"cabin_mapping = {\"A\": 0, \"B\": 0.4, \"C\": 0.8, \"D\": 1.2, \"E\": 1.6, \"F\": 2, \"G\": 2.4, \"T\": 2.8}\nfor dataset in train_test_data:\n    dataset['Cabin'] = dataset['Cabin'].map(cabin_mapping)","f18dfcc2":"# fill missing Fare with median fare for each Pclass\ntrain[\"Cabin\"].fillna(train.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)\ntest[\"Cabin\"].fillna(test.groupby(\"Pclass\")[\"Cabin\"].transform(\"median\"), inplace=True)","cb47d045":"# familysize\ntrain['Familysize'] = train[\"SibSp\"] + train[\"Parch\"] + 1\ntest['Familysize'] = test[\"SibSp\"] + test[\"Parch\"] + 1","4553d728":"facet = sns.FacetGrid(train, hue=\"Survived\",aspect=4)\nfacet.map(sns.kdeplot,'Familysize',shade= True)\nfacet.set(xlim=(0, train['Familysize'].max()))\nfacet.add_legend()\nplt.xlim(0)","9ca2f62a":"family_mapping = {1: 0, 2: 0.4, 3: 0.8, 4: 1.2, 5: 1.6, 6: 2, 7: 2.4, 8: 2.8, 9: 3.2, 10: 3.6, 11: 4}\nfor dataset in train_test_data:\n    dataset['Familysize'] = dataset['Familysize'].map(family_mapping)","87276c2f":"train.head()","24ed73e0":"test.head()","af6add87":"features_drop = ['Ticket', 'SibSp', 'Parch']\ntrain = train.drop(features_drop, axis=1)\ntest = test.drop(features_drop, axis=1)\ntrain = train.drop(['PassengerId'], axis=1)","c9fe5406":"X = train.drop('Survived', axis=1)\ny = train['Survived']\n\nX.shape, y.shape","174b8ff3":"X.head()","f7f17e92":"train.info()","89873916":"# important libraries for predictions\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import SVC","b4d72c9d":"# cross-validation\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\nk_fold = KFold(n_splits=10, shuffle=True, random_state=0)","c800a9a1":"# kNN\nknn = KNeighborsClassifier(n_neighbors=13)\nscoring = 'accuracy'\nscore = cross_val_score(knn, X, y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","d3061bb5":"round(np.mean(score)*100, 2)","7f9cda3f":"# random forest\nrf = RandomForestClassifier(n_estimators=13)\nscoring = 'accuracy'\nscore = cross_val_score(rf, X, y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","55030dab":"round(np.mean(score)*100, 2)","ef3b3eee":"# Naive Bayes\nnb = GaussianNB()\nscoring = 'accuracy'\nscore = cross_val_score(nb, X, y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","442b1973":"round(np.mean(score)*100, 2)","13dfebfd":"# SVM\nsvm = SVC()\nscoring = 'accuracy'\nscore = cross_val_score(svm, X, y, cv=k_fold, n_jobs=1, scoring=scoring)\nprint(score)","9a76f9be":"round(np.mean(score)*100, 2)","1d745c93":"#testing\nclf = SVC()\nclf.fit(X, y)\n\ntest_data = test.drop(\"PassengerId\", axis=1).copy()\nprediction = clf.predict(test_data)","07029e8e":"submission = pd.DataFrame({\n        \"PassengerId\": test[\"PassengerId\"],\n        \"Survived\": prediction\n    })\n\nsubmission.to_csv('submission.csv', index=False)","c55fecb1":"submission = pd.read_csv('submission.csv')\nsubmission.head()","d385f12f":"Feature Engineering","3c37770b":" Conclusion : Women are more likely to survived than Men","6bada73b":"**Binning**\n> Binning\/Converting Numerical Age to Categorical Variable\n\n> > feature vector map:\nchild: 0\nyoung: 1\nadult: 2\nmid-age: 3\nsenior: 4","aec493f1":"Conclusion : \"a person aboarded with more than two siblings or spouse\" are more likely to dead.","62a3b1ab":"Conclusion : More than 50% of 1st, 2nd and 3rd class are from S embark.","215b3138":"Conclusion : \"A person aboarded from C \" slightly more likely to survived. \"A person aboarded from Q and S\" more likely to dead.","e0996416":"Conclusion : \"a person aboarded with more than 2 parents or children\" are more likely to survived. \"a person aboarded alone\" is more likely to dead","647c251d":"Title map : Mr=0, Miss=1, Mrs=3, Others=3","a482553f":"Conclusion : 1st class is more likely to survived than other classes\n             and 3rd class is more likely to dead than other classes"}}