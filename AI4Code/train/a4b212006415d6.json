{"cell_type":{"22dd5b33":"code","675b17e4":"code","67dc93b7":"code","88fc5ef8":"code","49e19071":"code","c38993fb":"code","4e0d0385":"code","cb5d358c":"code","801684ab":"code","32b38cd6":"code","f28f2ff3":"code","de8aa1b3":"code","3d18cd41":"code","26c6d52f":"code","3402c69c":"code","48aeecee":"code","a5daa77d":"code","d79f1066":"code","308818f1":"code","49cccf8c":"code","21d2c5b5":"code","56cea486":"code","5c9b642b":"code","45b85907":"code","7567f6c5":"code","c9d12f56":"code","8f19707a":"code","66fd9a00":"code","3c24f257":"code","66147d8d":"code","12921cce":"code","28881c8f":"code","20164f88":"code","4001e40d":"code","5ddf7bb4":"code","9c676d4e":"code","a0bd80f9":"code","2562ab6a":"code","72df411a":"code","928c01f4":"code","107f0eba":"code","f4ffd885":"code","70bbefcd":"markdown","4227c4d6":"markdown","49e4e38a":"markdown","e9ed5484":"markdown","c20c21dd":"markdown","8ae6c5fd":"markdown","927b94a9":"markdown","549a2bd0":"markdown","2cfee87d":"markdown","30463c82":"markdown","c27d907f":"markdown","fff0ed63":"markdown","cd1be522":"markdown","03fb089f":"markdown","ac43082e":"markdown","62f7f9a5":"markdown","87395fb7":"markdown","a2b89799":"markdown","fa324b3f":"markdown","d2acdccf":"markdown","9f542f7c":"markdown","0d3d6970":"markdown","e60cbfca":"markdown","13bfa943":"markdown","8d187961":"markdown","8e48c312":"markdown","08f208f5":"markdown","06bfdb8d":"markdown","ef722356":"markdown"},"source":{"22dd5b33":"from IPython.display import HTML\nHTML('<center><iframe width=\"700\" height=\"400\" src=\"https:\/\/www.youtube.com\/embed\/NlpS-DhayQA?rel=0&amp;controls=0&amp;showinfo=0\" frameborder=\"0\" allowfullscreen><\/iframe><\/center>')","675b17e4":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport cv2\nimport math\nimport os, ast\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\nfrom matplotlib import pyplot as plt # plotting\nimport matplotlib.patches as patches\n\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport plotly.figure_factory as ff\nfrom sklearn.preprocessing import OneHotEncoder\n\nimport seaborn as sns\nfrom tqdm import tqdm\nimport matplotlib.cm as cm\nfrom sklearn import metrics\nimport matplotlib.pyplot as plt\nfrom sklearn.utils import shuffle\n\ntqdm.pandas()\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\nfrom plotly.subplots import make_subplots\n","67dc93b7":"# Some constants\ndataset_path = '\/kaggle\/input\/global-wheat-detection'\ndataset_img_train='\/kaggle\/input\/global-wheat-detection\/train\/'\ndataset_img_test='\/kaggle\/input\/global-wheat-detection\/test\/'","88fc5ef8":"%%time\ntrain_df = pd.read_csv(os.path.join(dataset_path, 'train.csv'))\nsample_sub_df = pd.read_csv(os.path.join(dataset_path, 'sample_submission.csv'))","49e19071":"train_df.head()","c38993fb":"sample_sub_df.head()","4e0d0385":"print(f'Shape of training data: {train_df.shape}')\nprint(f'Shape of given test data: {sample_sub_df.shape}')","cb5d358c":"%%time\nSAMPLE_LEN=2000\ndef load_image(image_id):\n    file_path = image_id + \".jpg\"\n    image = cv2.imread(dataset_img_train + file_path)\n    return cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n\ntrain_images = train_df[\"image_id\"][:SAMPLE_LEN].progress_apply(load_image)","801684ab":"fig = px.imshow(cv2.resize(train_images[99], (205, 136)))\nfig.show()","32b38cd6":"print(f'Total no. of images                        : {train_df.shape[0]}')\nprint(f'Total no. of unique images                 : {train_df[\"image_id\"].nunique()}')\nprint(f'Checking Dimentions - heights and widths   : {train_df[\"width\"].unique()}, {train_df[\"height\"].unique()}')\nprint(f'Maximum number of wheat heads in the Image : {max(train_df[\"image_id\"].value_counts())}')\nprint(f'Average wheat heads in the Image           : {len(train_df)\/train_df[\"image_id\"].nunique()}')","f28f2ff3":"sns.distplot(train_df['image_id'].value_counts(), kde=True)\nplt.xlabel('# of wheat heads')\nplt.ylabel('# of images')\nplt.title('# of wheat heads vs. # of images')\nplt.show()","de8aa1b3":"box_count = train_df[\"image_id\"].value_counts()\n\nhist_data = [box_count.values]\ngroup_labels = ['Count'] # name of the dataset\n\nfig = ff.create_distplot(hist_data, group_labels, bin_size=2)\nfig.update_layout(title_text=\"Number of bounding boxes per image\", template=\"simple_white\", title_x=0.5)\nfig.show()","3d18cd41":"train_df[['x_min','y_min', 'width', 'height']] = pd.DataFrame([ast.literal_eval(x) for x in train_df.bbox.tolist()], index= train_df.index)\ntrain_df = train_df[['image_id', 'bbox', 'source', 'x_min', 'y_min', 'width', 'height']]\ntrain_df","26c6d52f":"# Visualize few samples of current training dataset\nfig, ax = plt.subplots(nrows=2, ncols=4, figsize=(20, 10))\ncount=1000\nfor row in ax:\n    for col in row:\n        img = plt.imread(f'{os.path.join(dataset_path, \"train\", train_df[\"image_id\"].unique()[count])}.jpg')\n        col.grid(False)\n        col.set_xticks([])\n        col.set_yticks([])\n        col.imshow(img)\n        count += 1\nplt.show()","3402c69c":"##  Thanks to https:\/\/www.kaggle.com\/kaushal2896\/global-wheat-detection-starter-eda kernal , Kindly upvote this kernal also\n\ndef get_bbox(image_id, df, col, color='white'):\n    bboxes = df[df['image_id'] == image_id]\n    \n    for i in range(len(bboxes)):\n        # Create a Rectangle patch\n        rect = patches.Rectangle(\n            (bboxes['x_min'].iloc[i], bboxes['y_min'].iloc[i]),\n            bboxes['width'].iloc[i], \n            bboxes['height'].iloc[i], \n            linewidth=2, \n            edgecolor=color, \n            facecolor='none')\n\n        # Add the patch to the Axes\n        col.add_patch(rect)","48aeecee":"# Visualize few samples of current training dataset\nfig, ax = plt.subplots(nrows=2, ncols=2, figsize=(20, 20))\ncount=0\nfor row in ax:\n    for col in row:\n        img_id = train_df[\"image_id\"].unique()[count]\n        img = plt.imread(f'{os.path.join(dataset_path, \"train\", img_id)}.jpg')\n        col.grid(False)\n        col.set_xticks([])\n        col.set_yticks([])\n        get_bbox(img_id, train_df, col, color='red')\n        col.imshow(img)\n        count += 1\nplt.show()","a5daa77d":"image_id = (train_df['image_id'].value_counts() == max(train_df[\"image_id\"].value_counts())).index[0]\nprint('Maximum wheat heads :',max(train_df[\"image_id\"].value_counts()))\nimg = plt.imread(f'{os.path.join(dataset_path, \"train\", image_id)}.jpg')\nfig, ax = plt.subplots(1, figsize=(12, 12))\nax.grid(False)\nax.set_xticks([])\nax.set_yticks([])\nax.axis('off')\nget_bbox(image_id, train_df, ax, color='orange')\nax.imshow(img)\nplt.plot()","d79f1066":"source = train_df['source'].value_counts()\nprint(train_df['source'].value_counts())\nwheat_src_df = train_df.groupby(['source']).agg({'image_id':'count'}).reset_index()\nwheat_src_df.rename(columns={'image_id':'count'},inplace=True)","308818f1":"wheat_src_df","49cccf8c":"fig = go.Figure(data=[\n    go.Pie(labels=source.index, values=source.values)\n])\n\nfig.update_layout(title='Source distribution')\nfig.show()","21d2c5b5":"fig = go.Figure(go.Bar(x=train_df['source'].value_counts().index, \n                       y=train_df['source'].value_counts(),\n                       marker_color='lightsalmon'))\nfig.update_layout(title_text=\"Bar chart of sources\", title_x=0.5)\nfig.show()","56cea486":"bbox_count = train_df.groupby(\"source\")[\"image_id\"].apply(lambda X: X.value_counts().mean()).reset_index().rename(columns={\"image_id\": \"bbox_count\"})\n\nfig = go.Figure(go.Bar(x=bbox_count.source, \n                       y=bbox_count.bbox_count,\n                       name='Bbox counts', marker_color='indianred'))\nfig.update_layout(title_text=\"Bar chart of Bbox counts in image\", template=\"simple_white\", title_x=0.5)\nfig.show()","5c9b642b":"red_values = [np.mean(train_images[idx][:, :, 0]) for idx in range(len(train_images))]\ngreen_values = [np.mean(train_images[idx][:, :, 1]) for idx in range(len(train_images))]\nblue_values = [np.mean(train_images[idx][:, :, 2]) for idx in range(len(train_images))]\nvalues = [np.mean(train_images[idx]) for idx in range(len(train_images))]","45b85907":"fig = ff.create_distplot([values], group_labels=[\"Channels\"], colors=[\"purple\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","7567f6c5":"fig = ff.create_distplot([red_values], group_labels=[\"R\"], colors=[\"red\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of red channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","c9d12f56":"fig = ff.create_distplot([blue_values], group_labels=[\"B\"], colors=[\"blue\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of blue channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","8f19707a":"fig = ff.create_distplot([green_values], group_labels=[\"G\"], colors=[\"green\"])\nfig.update_layout(showlegend=False, template=\"simple_white\")\nfig.update_layout(title_text=\"Distribution of green channel values\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig","66fd9a00":"fig = go.Figure()\n\nfor idx, values in enumerate([red_values, green_values, blue_values]):\n    if idx == 0:\n        color = \"Red\"\n    if idx == 1:\n        color = \"Green\"\n    if idx == 2:\n        color = \"Blue\"\n    fig.add_trace(go.Box(x=[color]*len(values), y=values, name=color, marker=dict(color=color.lower())))\n    \nfig.update_layout(yaxis_title=\"Mean value\", xaxis_title=\"Color channel\",\n                  title=\"Mean value vs. Color channel\", template=\"plotly_white\")","3c24f257":"fig = ff.create_distplot([red_values, green_values, blue_values],\n                         group_labels=[\"R\", \"G\", \"B\"],\n                         colors=[\"red\", \"green\", \"blue\"])\nfig.update_layout(title_text=\"Distribution of Red,Blue,Green channel values\", template=\"simple_white\")\nfig.data[0].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[0].marker.line.width = 0.5\nfig.data[1].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[1].marker.line.width = 0.5\nfig.data[2].marker.line.color = 'rgb(0, 0, 0)'\nfig.data[2].marker.line.width = 0.5\nfig","66147d8d":"df_img_wht_heads = train_df.groupby(['image_id']).agg({'source':'count'}).reset_index().rename(columns={'source':'wheat_head_cnt'})","12921cce":"df_img_wht_heads.head()","28881c8f":"df_img_wht_heads['wheat_head_cnt'].describe(include=\"all\")","20164f88":"sns.boxplot(df_img_wht_heads['wheat_head_cnt'])","4001e40d":"def catagory(col):\n    if col >= 0 and col <= 28 :\n        ctg=\"Less_Wheat_heads\"\n    elif col <= 43 and col >= 28:\n        ctg=\"Medium_Wheat_heads\"\n    elif col <= 59 and col >= 43:\n        ctg=\"High_Wheat_heads\"\n    else:\n        ctg=\"Extra_High_Wheat_heads\"\n    return ctg","5ddf7bb4":"def binary_catagory(col):\n    if col >= 0 and col <= 43 :\n        ctg=0\n    else:\n        ctg=1\n    return ctg","9c676d4e":"df_img_wht_heads['Wheat_head_catagory']=df_img_wht_heads['wheat_head_cnt'].apply(catagory)\ndf_img_wht_heads['Wheat_heads_ctg_High_Low']=df_img_wht_heads['wheat_head_cnt'].apply(binary_catagory)","a0bd80f9":"fig = go.Figure(go.Bar(x=df_img_wht_heads['Wheat_head_catagory'].value_counts().index, \n                       y=df_img_wht_heads['Wheat_head_catagory'].value_counts(),\n                       marker_color='lightsalmon'))\nfig.update_layout(title_text=\"Bar chart of Wheat Head Catagory\", title_x=0.5)\nfig.show()","2562ab6a":"df_img_wht_heads['Wheat_head_catagory'].unique()","72df411a":"df_img_wht_heads.head()","928c01f4":"# generate binary values using get_dummies\ndf_img_wht_heads = pd.get_dummies(df_img_wht_heads, columns=[\"Wheat_head_catagory\"],prefix=\"\")","107f0eba":"df_img_wht_heads.columns","f4ffd885":"fig = px.parallel_categories(df_img_wht_heads[['_Extra_High_Wheat_heads', '_High_Wheat_heads', '_Less_Wheat_heads','_Medium_Wheat_heads']], \\\n                             color=\"_Less_Wheat_heads\", color_continuous_scale=\"sunset\",\\\n                             title=\"Parallel categories plot of targets\")\nfig","70bbefcd":"### Green Channel Values","4227c4d6":"### Bbox count in the image","49e4e38a":"### Observation :- \n#### *In the above plot, we can see the relationship between all four categories. As expected, it is impossible for a less wheat head (_less_what_head == 1) does not have high and extra high.*","e9ed5484":"### Plot Sample Image","c20c21dd":"## Create seperate columns for 'x_min','y_min', 'width', 'height' in the train dataset","8ae6c5fd":"## Channels Distributions","927b94a9":"### Wheat Source - Share in the dataset","549a2bd0":"## Visualize few samples of current training dataset with boxes","2cfee87d":"### Blue Channel Values","30463c82":"## That's Great , 5 Point Summary Works at it best","c27d907f":"## Images with Maximum and Minimum Wheat heads","fff0ed63":"#### Based on 5 point summary , let catagorise the data","cd1be522":"## Machine Learning usescases in Agriculture","03fb089f":"## Conclusion\n\n* Whole dataset is less then 1 GB ; It take less training time to build accurate model\n* Intresting dataset to workwith , This Model helps Crop management in better ways\n\n#### So it will be good competition Indeed \n","ac43082e":"### Red Channel Values","62f7f9a5":"## Descriptive statistics of Image data","87395fb7":"<font color=\"red\" size=3>Please upvote this kernel if you like it. It motivates me to create kernal with great content  :) <\/font>","a2b89799":"### All the Channels togather","fa324b3f":"<font color=\"red\" size=3>Please upvote this kernel if you like it. It motivates me to produce more quality content  :) <\/font>","d2acdccf":"## Visualize few samples of current training dataset","9f542f7c":"\n\n##  <a name=\"Facts\"> Wheat facts <\/a> \n\n\n#### What is a head of wheat?\n* Wheat has a single main stem plus typically 2-3 tillers per plant. ... These wrap around the stem at the point where the leaf sheath meets the leaf blade. Spike. The spike (also called the ear or head) forms at the top of the plant.\n\n\n#### How many wheat grain in a wheat crop ? \n* Now days, with breeding, a stalk of wheat can have up to 200 grains. Most wild wheat has between 10-18 grains per stalk. It takes 150 grams or 5 oz of wheat berries to make one cup of flour\n\n#### How much wheat can one seed produce ? \n* On average, there are 22 seeds per head and 5 heads per plant, or 110 seeds per plant. With an average seed size of 15,000 seeds per pound or 900,000 seeds per bushel, a pound of average-sized seed with 80% germination and emergence has a yield potential of approximately 1.5 bushels per acre.\n\n\n#### How long it takes wheat to grow ? \n* About seven to eight months\nIt is planted in the fall, usually between October and December, and grows over the winter to be harvested in the spring or early summer. Typically it takes about seven to eight months to reach maturity and it creates pretty golden contrast in spring gardens.\n\n\n#### How much does a bag of wheat seed cost ?\n* Average seed costs per 50-pound bag currently range from 12.50 USD  to 12.95 USD. However, seed cost depends on the variety (whether public or private) and the quantity of seed being purchased.\n\n\n#### What parts of wheat are used?\n* What is the wheat kernel? The wheat kernel, or wheat berry, is the grain portion of the wheat plant and the source of flour. It consists of three main parts \u2013 the endosperm, bran and germ \u2013 which are usually separated for different flours and uses.","0d3d6970":"## Understanding Evaluation Metrics\n\n\nThis competition is evaluated on the **mean average precision** at different intersection over union (IoU) thresholds.\n\n`MAP(mean average precision)`: **mAP (mean average precision)** is the average of AP. In some context, we compute the AP for each class and average them. But in some context, they mean the same thing. For example, under the COCO context, there is no difference between AP and mAP.\n\n\n![](https:\/\/i.stack.imgur.com\/JlHnn.jpg)\n\n> Important note: if there are no ground truth objects at all for a given image, ANY number of predictions (false positives) will result in the image receiving a score of zero, and being included in the mean average precision.\n\n\n\n\nPlease visit following links to know more about MAP\n* https:\/\/www.kaggle.com\/c\/global-wheat-detection\/overview\/evaluation\n* https:\/\/kharshit.github.io\/blog\/2019\/09\/20\/evaluation-metrics-for-object-detection-and-segmentation\n* https:\/\/towardsdatascience.com\/breaking-down-mean-average-precision-map-ae462f623a52\n* https:\/\/datascience.stackexchange.com\/questions\/25119\/how-to-calculate-map-for-detection-task-for-the-pascal-voc-challenge\n* https:\/\/www.kaggle.com\/rohitsingh9990\/eda-visualization-simple-baseline - Thanks to Rohit singh for his Kernal","e60cbfca":"## Bounding Boxes per Image","13bfa943":"There is an outlier in the total wheat head count in an image","8d187961":"## Lets Catagorise the Images based on on Wheat heads ","8e48c312":"# Distribution of images by wheat heads","08f208f5":"\n## <a name=\"Wheat Detection\">About this Competition<\/a>\n\nIn this competition, you\u2019ll detect wheat heads from outdoor images of wheat plants, including wheat datasets from around the globe. Using worldwide data, you will focus on a generalized solution to estimate the number and size of wheat heads. To better gauge the performance for unseen genotypes, environments, and observational conditions, the training dataset covers multiple regions. You will use more than 3,000 images from Europe (France, UK, Switzerland) and North America (Canada). The test data includes about 1,000 images from Australia, Japan, and China.\n\nWheat is a staple across the globe, which is why this competition must account for different growing conditions. Models developed for wheat phenotyping need to be able to generalize between environments. If successful, researchers can accurately estimate the density and size of wheat heads in different varieties. With improved detection farmers can better assess their crops, ultimately bringing cereal, toast, and other favorite dishes to your table.","06bfdb8d":"## <a name=\"Wheat Detection\">Introduction : Wheat Detection Dataset - Exploration Data Analysis<\/a>\n\n#### <a name=\"About_Competition\"> Introduction <\/a>\n\"About this Competition\" \"Supporting the shit for sake of the breads to have for the dinner\"\n\nIn this competition, you\u2019ll detect wheat heads from outdoor images of wheat plants, including wheat datasets from around the globe. Using worldwide data, you will focus on a generalized solution to estimate the number and size of wheat heads. To better gauge the performance for unseen genotypes, environments, and observational conditions, the training dataset covers multiple regions. You will use more than 3,000 images from Europe (France, UK, Switzerland) and North America (Canada). The test data includes about 1,000 images from Australia, Japan, and China.\n\nWheat is a staple across the globe, which is why this competition must account for different growing conditions. Models developed for wheat phenotyping need to be able to generalize between environments. If successful, researchers can accurately estimate the density and size of wheat heads in different varieties. With improved detection farmers can better assess their crops, ultimately bringing cereal, toast, and other favorite dishes to your table.\n                           \n\n#### <a name=\"Challenges\">Challenges in dectecting Wheat head<\/a>           \n\nHowever, accurate wheat head detection in outdoor field images can be visually challenging. There is often overlap of dense wheat plants, and the wind can blur the photographs. Both make it difficult to identify single heads. Additionally, appearances vary due to maturity, color, genotype, and head orientation. Finally, because wheat is grown worldwide, different varieties, planting densities, patterns, and field conditions must be considered. Models developed for wheat phenotyping need to generalize between different growing environments. Current detection methods involve one- and two-stage detectors (Yolo-V3 and Faster-RCNN), but even when trained with a large dataset, a bias to the training region remains.\n\n\n####  <a name=\"objective\">Objective<\/a>: \npredict bounding boxes around each wheat head in images\n\n\n#### <a name=\"dataset_description\">Dataset Description<\/a>: \n\nThe data is images of wheat fields, with bounding boxes for each identified wheat head. Not all images include wheat heads \/ bounding boxes. The images were recorded in many locations around the world.\n\nThe CSV data is simple - the image ID matches up with the filename of a given image, and the width and height of the image are included, along with a bounding box (see below). There is a row in train.csv for each bounding box. Not all images have bounding boxes.\n\nMost of the test set images are hidden. A small subset of test images has been included for your use in writing code.\n\nWhat am I predicting?\nYou are attempting to predict bounding boxes around each wheat head in images that have them. If there are no wheat heads, you must predict no bounding boxes.\n\nFile details :- \n\n1.     train.csv - the training data\n2.     sample_submission.csv - a sample submission file in the correct format\n3.     train.zip - training images\n4.     test.zip - test images\n\nColumns in train.csv\n\n1.     image_id - the unique image ID\n2.     width, height - the width and height of the images\n3.     bbox - a bounding box, formatted as a Python-style list of [xmin, ymin, width, height]\n\n\n#### <a name=\"target_variable\">Target Variable<\/a>                                        \n* __Submission data__  \n    Image ID & Prediction String ( [xmin, ymin, width, height] ) \n","ef722356":"### Wheat - Source Share"}}