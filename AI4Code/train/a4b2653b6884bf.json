{"cell_type":{"f8457d27":"code","bd1bbf06":"code","83ca61dd":"code","125e5dc4":"code","1fd7b288":"code","b6312a89":"code","36b0357a":"code","a807b59f":"code","8c278b54":"code","e8ff3c67":"code","7a28a35c":"code","9102a852":"code","1a25fb15":"code","e7739473":"code","3148a165":"code","3b426916":"code","6505d5c8":"code","46364d21":"code","fb1016a3":"code","38ebd90b":"code","ce610da8":"code","b765f737":"code","559b907d":"code","53cda11d":"code","b6e1ef0b":"code","7dc6144b":"markdown","5ab15da3":"markdown","55619878":"markdown","ba3fc006":"markdown","6e1d7d0d":"markdown","40efe401":"markdown","c523956f":"markdown","df28d468":"markdown","c107ea23":"markdown","b8451b44":"markdown","47442cc8":"markdown","17790dd0":"markdown","282db71e":"markdown","e9db5366":"markdown","788a3002":"markdown","c3bdb6de":"markdown","53807b8a":"markdown","a39b6c73":"markdown"},"source":{"f8457d27":"# bbox-utility, check https:\/\/github.com\/awsaf49\/bbox for source code\n# !pip install -q ..\/input\/loguru-lib-ds\/loguru-0.5.3-py3-none-any.whl\n# !pip install -q ..\/input\/bbox-lib-ds","bd1bbf06":"import numpy as np\nfrom tqdm.notebook import tqdm\ntqdm.pandas()\nimport pandas as pd\nimport os\nimport cv2\nimport matplotlib.pyplot as plt\nimport glob\nimport shutil\nimport sys\nsys.path.append('..\/input\/tensorflow-great-barrier-reef')\nimport torch\nfrom PIL import Image\nimport ast\nimport albumentations as albu","83ca61dd":"ROOT_DIR  = '\/kaggle\/input\/tensorflow-great-barrier-reef\/'\nCKPT_PATH = '\/kaggle\/input\/greatbarrierreef-yolov5-train-ds\/yolov5\/runs\/train\/exp\/weights\/best.pt'\nIMG_SIZE  = 1280\nCONF      = 0.01\nIOU       = 0.65\nAUGMENT   = True","125e5dc4":"%cd \/kaggle\/working\n\nfrom sklearn.model_selection import GroupKFold\n\ndef get_bbox(annots):\n    bboxes = [list(annot.values()) for annot in annots]\n    return bboxes\n\ndef get_path(row):\n    row['image_path'] = f'{ROOT_DIR}\/train_images\/video_{row.video_id}\/{row.video_frame}.jpg'\n    return row\n\nROOT_DIR  = '\/kaggle\/input\/tensorflow-great-barrier-reef\/'\n\ndf = pd.read_csv(\"\/kaggle\/input\/tensorflow-great-barrier-reef\/train.csv\")\n\n# Don't filter for annotated frames. Include frames with no bboxes as well!\ndf[\"num_bbox\"] = df['annotations'].apply(lambda x: str.count(x, 'x'))\ndf_train = df\n\n# Annotations \ndf_train['annotations'] = df_train['annotations'].progress_apply(lambda x: ast.literal_eval(x))\ndf_train['bboxes'] = df_train.annotations.progress_apply(get_bbox)\n\ndf_train = df_train.progress_apply(get_path, axis=1)\n\nkf = GroupKFold(n_splits = 5) \ndf_train = df_train.reset_index(drop=True)\ndf_train['fold'] = -1\nfor fold, (train_idx, val_idx) in enumerate(kf.split(df_train, y = df_train.video_id.tolist(), groups=df_train.sequence)):\n    df_train.loc[val_idx, 'fold'] = fold\n\ndf_train.head(5)","1fd7b288":"df_train.head()","b6312a89":"FDA_reference = df_train[df_train['annotations']!='[]']\nFDA_trans = albu.FDA(FDA_reference['image_path'].values)","36b0357a":"data = (df.num_bbox>0).value_counts()\/len(df)*100\nprint(f\"No BBox: {data[0]:0.2f}% | With BBox: {data[1]:0.2f}%\")","a807b59f":"# Modified from https:\/\/www.kaggle.com\/awsaf49\/great-barrier-reef-yolov5-infer\n# Additions: \n#     confidence scores\ndef voc2yolo(bboxes, image_height=720, image_width=1280):\n    \"\"\"\n    voc  => [x1, y1, x2, y1]\n    yolo => [xmid, ymid, w, h] (normalized)\n    \"\"\"\n    \n    bboxes = bboxes.copy().astype(float) # otherwise all value will be 0 as voc_pascal dtype is np.int\n    \n    bboxes[..., [0, 2]] = bboxes[..., [0, 2]]\/ image_width\n    bboxes[..., [1, 3]] = bboxes[..., [1, 3]]\/ image_height\n    \n    w = bboxes[..., 2] - bboxes[..., 0]\n    h = bboxes[..., 3] - bboxes[..., 1]\n    \n    bboxes[..., 0] = bboxes[..., 0] + w\/2\n    bboxes[..., 1] = bboxes[..., 1] + h\/2\n    bboxes[..., 2] = w\n    bboxes[..., 3] = h\n    \n    return bboxes\n\ndef yolo2voc(bboxes, image_height=720, image_width=1280):\n    \"\"\"\n    yolo => [xmid, ymid, w, h] (normalized)\n    voc  => [x1, y1, x2, y1]\n    \n    \"\"\" \n    bboxes = bboxes.copy().astype(float) # otherwise all value will be 0 as voc_pascal dtype is np.int\n    \n    bboxes[..., [0, 2]] = bboxes[..., [0, 2]]* image_width\n    bboxes[..., [1, 3]] = bboxes[..., [1, 3]]* image_height\n    \n    bboxes[..., [0, 1]] = bboxes[..., [0, 1]] - bboxes[..., [2, 3]]\/2\n    bboxes[..., [2, 3]] = bboxes[..., [0, 1]] + bboxes[..., [2, 3]]\n    \n    return bboxes\n\ndef coco2yolo(bboxes, image_height=720, image_width=1280):\n    \"\"\"\n    coco => [xmin, ymin, w, h]\n    yolo => [xmid, ymid, w, h] (normalized)\n    \"\"\"\n    \n    bboxes = bboxes.copy().astype(float) # otherwise all value will be 0 as voc_pascal dtype is np.int\n    \n    # normolizinig\n    bboxes[..., [0, 2]]= bboxes[..., [0, 2]]\/ image_width\n    bboxes[..., [1, 3]]= bboxes[..., [1, 3]]\/ image_height\n    \n    # converstion (xmin, ymin) => (xmid, ymid)\n    bboxes[..., [0, 1]] = bboxes[..., [0, 1]] + bboxes[..., [2, 3]]\/2\n    \n    return bboxes\n\ndef yolo2coco(bboxes, image_height=720, image_width=1280):\n    \"\"\"\n    yolo => [xmid, ymid, w, h] (normalized)\n    coco => [xmin, ymin, w, h]\n    \n    \"\"\" \n    bboxes = bboxes.copy().astype(float) # otherwise all value will be 0 as voc_pascal dtype is np.int\n    \n    # denormalizing\n    bboxes[..., [0, 2]]= bboxes[..., [0, 2]]* image_width\n    bboxes[..., [1, 3]]= bboxes[..., [1, 3]]* image_height\n    \n    # converstion (xmid, ymid) => (xmin, ymin) \n    bboxes[..., [0, 1]] = bboxes[..., [0, 1]] - bboxes[..., [2, 3]]\/2\n    \n    return bboxes\n\ndef voc2coco(bboxes, image_height=720, image_width=1280):\n    bboxes  = voc2yolo(bboxes, image_height, image_width)\n    bboxes  = yolo2coco(bboxes, image_height, image_width)\n    return bboxes\n\n\ndef load_image(image_path):\n    return cv2.cvtColor(cv2.imread(image_path), cv2.COLOR_BGR2RGB)\n\n\ndef plot_one_box(x, img, score=None, color=None, label=None, line_thickness=None):\n    # Plots one bounding box on image img\n    tl = line_thickness or round(0.002 * (img.shape[0] + img.shape[1]) \/ 2) + 1  # line\/font thickness\n    color = color or [random.randint(0, 255) for _ in range(3)]\n    c1, c2 = (int(x[0]), int(x[1])), (int(x[2]), int(x[3]))\n    cv2.rectangle(img, c1, c2, color, thickness=tl, lineType=cv2.LINE_AA)\n    if label:\n        tf = max(tl - 1, 1)  # font thickness\n        t_size = cv2.getTextSize(label, 0, fontScale=tl \/ 3, thickness=tf)[0]\n        c2 = c1[0] + t_size[0], c1[1] - t_size[1] - 3\n        cv2.rectangle(img, c1, c2, color, -1, cv2.LINE_AA)  # filled\n        cv2.putText(img, \"{}:{:.2f}\".format(label, score), (c1[0], c1[1] - 2), 0, tl \/ 3, [225, 255, 255], thickness=tf, lineType=cv2.LINE_AA)\n\ndef draw_bboxes(img, bboxes, scores, classes, class_ids, colors = None, show_classes = None, bbox_format = 'yolo', class_name = False, line_thickness = 2):  \n     \n    image = img.copy()\n    show_classes = classes if show_classes is None else show_classes\n    colors = (0, 255 ,0) if colors is None else colors\n    \n    if bbox_format == 'yolo':\n        \n        for idx in range(len(bboxes)):  \n            \n            bbox  = bboxes[idx]\n            cls   = classes[idx]\n            cls_id = class_ids[idx]\n            try:\n                score = scores[idx]\n            except:\n                score = None\n            color = colors[cls_id] if type(colors) is list else colors\n            \n            if cls in show_classes:\n            \n                x1 = round(float(bbox[0])*image.shape[1])\n                y1 = round(float(bbox[1])*image.shape[0])\n                w  = round(float(bbox[2])*image.shape[1]\/2) #w\/2 \n                h  = round(float(bbox[3])*image.shape[0]\/2)\n\n                voc_bbox = (x1-w, y1-h, x1+w, y1+h)\n                plot_one_box(voc_bbox, \n                             image,\n                             score= score if score else None,\n                             color = color,\n                             label = cls if class_name else str(get_label(cls)),\n                             line_thickness = line_thickness)\n            \n    elif bbox_format == 'coco':\n        \n        for idx in range(len(bboxes)):  \n            \n            bbox  = bboxes[idx]\n            cls   = classes[idx]\n            cls_id = class_ids[idx]\n            try:\n                score = scores[idx]\n            except:\n                score = None\n            color = colors[cls_id] if type(colors) is list else colors\n            \n            if cls in show_classes:            \n                x1 = int(round(bbox[0]))\n                y1 = int(round(bbox[1]))\n                w  = int(round(bbox[2]))\n                h  = int(round(bbox[3]))\n\n                voc_bbox = (x1, y1, x1+w, y1+h)\n                plot_one_box(voc_bbox, \n                             image,\n                             score = score if score else None,\n                             color = color,\n                             label = cls if class_name else str(cls_id),\n                             line_thickness = line_thickness)\n                \n    elif bbox_format == 'voc_pascal':\n        \n        for idx in range(len(bboxes)):  \n            \n            bbox  = bboxes[idx]\n            cls   = classes[idx]\n            cls_id = class_ids[idx]\n            try:\n                score = scores[idx]\n            except:\n                score = None\n            color = colors[cls_id] if type(colors) is list else colors\n            \n            if cls in show_classes: \n                x1 = int(round(bbox[0]))\n                y1 = int(round(bbox[1]))\n                x2 = int(round(bbox[2]))\n                y2 = int(round(bbox[3]))\n                voc_bbox = (x1, y1, x2, y2)\n                plot_one_box(voc_bbox, \n                             image,\n                             score = score if score else None,\n                             color = color,\n                             label = cls if class_name else str(cls_id),\n                             line_thickness = line_thickness)\n    else:\n        raise ValueError('wrong bbox format')\n\n    return image\n\ndef get_bbox(annots):\n    bboxes = [list(annot.values()) for annot in annots]\n    return bboxes\n\ndef get_imgsize(row):\n    row['width'], row['height'] = imagesize.get(row['image_path'])\n    return row\n\nnp.random.seed(32)\ncolors = [(np.random.randint(255), np.random.randint(255), np.random.randint(255))\\\n          for idx in range(1)]","8c278b54":"def predict(model, img, size=768, augment=False):\n    height, width = img.shape[:2]\n    results = model(img, size=size, augment=augment)  # custom inference size\n    preds   = results.pandas().xyxy[0]\n    bboxes  = preds[['xmin','ymin','xmax','ymax']].values\n    if len(bboxes):\n        bboxes  = voc2coco(bboxes,height,width).astype(int)\n        confs   = preds.confidence.values\n        return bboxes, confs\n    else:\n        return [],[]\n    \ndef format_prediction(bboxes, confs):\n    annot = ''\n    if len(bboxes)>0:\n        for idx in range(len(bboxes)):\n            xmin, ymin, w, h = bboxes[idx]\n            conf             = confs[idx]\n            annot += f'{conf} {xmin} {ymin} {w} {h}'\n            annot +=' '\n        annot = annot.strip(' ')\n    return annot\n\ndef show_img(img, bboxes, confis, bbox_format='yolo', colors=colors):\n    names  = ['starfish']*len(bboxes)\n    labels = [0]*len(bboxes)\n    img    = draw_bboxes(img = img,\n                           bboxes = bboxes,\n                           scores = confis,\n                           classes = names,\n                           class_ids = labels,\n                           class_name = True, \n                           colors = colors, \n                           bbox_format = bbox_format,\n                           line_thickness = 2)\n    return Image.fromarray(img)","e8ff3c67":"def IOU_coco(bbox1, bbox2):\n    '''\n        adapted from https:\/\/stackoverflow.com\/questions\/25349178\/calculating-percentage-of-bounding-box-overlap-for-image-detector-evaluation\n    '''\n    x_left = max(bbox1[0], bbox2[0])\n    y_top = max(bbox1[1], bbox2[1])\n    x_right = min(bbox1[0] + bbox1[2], bbox2[0] + bbox2[2])\n    y_bottom = min(bbox1[1] + bbox1[3], bbox2[1] + bbox2[3])\n    if x_right < x_left or y_bottom < y_top:\n        return 0.0\n    intersection_area = (x_right - x_left) * (y_bottom - y_top)\n    bb1_area = bbox1[2] * bbox1[3]\n    bb2_area = bbox2[2] * bbox2[3]\n    iou = intersection_area \/ float(bb1_area + bb2_area - intersection_area)\n\n    assert iou >= 0.0\n    assert iou <= 1.0\n    return iou","7a28a35c":"!mkdir -p \/root\/.config\/Ultralytics\n!cp \/kaggle\/input\/yolov5-font\/Arial.ttf \/root\/.config\/Ultralytics\/","9102a852":"def load_model(ckpt_path, conf=0.01, iou=0.50):\n    model = torch.hub.load('\/kaggle\/input\/yolov5-lib-ds',\n                           'custom',\n                           path=ckpt_path,\n                           source='local',\n                           force_reload=True)  # local repo\n    model.conf = conf  # NMS confidence threshold\n    model.iou  = iou  # NMS IoU threshold\n    model.classes = None   # (optional list) filter by class, i.e. = [0, 15, 16] for persons, cats and dogs\n    model.multi_label = False  # NMS multiple labels per box\n    model.max_det = 1000  # maximum number of detections per image\n    return model","1a25fb15":"# Modified from https:\/\/www.kaggle.com\/remekkinas\/yolox-inference-on-kaggle-for-cots-lb-0-507\n# Additions: \n#     auto converts to xywh format\n#     converts tensors to list of floats\n# Updates:\n# i changed it to yolov5 version. code is still dirty\ndef yolov5_inference(img, model, test_size, conf_threshold = 0.4):\n    bboxes = []\n    bbclasses = []\n    scores = []\n    \n    preproc = ValTransform(legacy = False)\n    \n    tensor_img, _ = preproc(img, None, test_size)\n    tensor_img = torch.from_numpy(tensor_img).unsqueeze(0)\n    tensor_img = tensor_img.float()\n    tensor_img = tensor_img.cuda()\n    \n    with torch.no_grad():\n        outputs = model(tensor_img)\n        outputs = postprocess(\n                    outputs, num_classes, conf_threshold,\n                    nmsthre, class_agnostic=True\n                )\n    \n    if outputs[0] is None:\n        return [], [], []\n    \n    outputs = outputs[0].cpu()\n    bboxes = outputs[:, 0:4]\n    \n    bboxes \/= min(test_size[0] \/ img.shape[0], test_size[1] \/ img.shape[1])\n    bbclasses = outputs[:, 6]\n    scores = outputs[:, 4] * outputs[:, 5]\n    \n    if len(bboxes) == 0:\n        return [], [], []\n    \n    bboxes = bboxes.numpy()\n    \n    # format to coco\n    bboxes[:, 2] = bboxes[:, 2] - bboxes[:, 0]\n    bboxes[:, 3] = bboxes[:, 3] - bboxes[:, 1]    \n    \n    # Converts tensors to lists\n    return bboxes, bbclasses.tolist(), scores.tolist()","e7739473":"# Modified from https:\/\/www.kaggle.com\/remekkinas\/yolox-inference-on-kaggle-for-cots-lb-0-507\n# Additions: \n#     allows customized box color (BGR)\n# Updates:\n# i changed it to yolov5 version. code is still dirty\ndef draw_yolov5_predictions(img, bboxes, scores, bbclasses, classes_dict, boxcolor = (0,0,255)):\n    outimg = img.copy()\n    for i in range(len(bboxes)):\n        box = bboxes[i]\n        cls_id = int(bbclasses[i])\n        score = scores[i]\n        x0 = int(box[0])\n        y0 = int(box[1])\n        x1 = x0 + int(box[2])\n        y1 = y0 + int(box[3])\n\n        cv2.rectangle(outimg, (x0, y0), (x1, y1), boxcolor, 2)\n        cv2.putText(outimg, '{}:{:.1f}%'.format(classes_dict[cls_id], score * 100), (x0, y0 - 3), cv2.FONT_HERSHEY_PLAIN, 0.8, boxcolor, thickness = 1)\n    return outimg","3148a165":"COCO_CLASSES = (\n  \"starfish\",\n)\n\n# YOLOv5 Inference Size \nIMG_SIZE = 1280\nAUGMENT  = True\nCONF     = 0.01\nIOU = 0.65\n\n# Which IOU level to evaluate (Competition metric tests 0.3 to 0.8 with step of 0.05)\neval_IOU = 0.65\n\nMODEL_PATH = '..\/input\/greatbarrierreef-yolov5-train-ds\/yolov5\/great-barrier-reef-public\/yolov5m-dim1280-fold4\/weights\/best.pt'","3b426916":"# load model\nmodel = load_model(MODEL_PATH, conf=CONF, iou=IOU)\n# print(model)","6505d5c8":"SELECTED_FOLD = 1\ndf_test = df_train[df_train.fold == SELECTED_FOLD]","46364d21":"import copy\n\n# deepcopy is required to avoid \n\ndf_sample = df_test\nimage_paths = df_sample.image_path.tolist()\ngt = copy.deepcopy(df_sample.bboxes.tolist())\ngtmem = copy.deepcopy(df_sample.bboxes.tolist())","fb1016a3":"df_test[df_test.num_bbox > 3].image_path.to_list()[0]","38ebd90b":"image_paths[2135]","ce610da8":"i = 2135\nTEST_IMAGE_PATH = image_paths[i]\nimg = cv2.imread(TEST_IMAGE_PATH)[...,::-1]\n\n# img = TEST_IMAGE_PATH\n\n# bboxes, bbclasses, scores, img = tempt_yolov5_inference(model, img)\nbboxes, confis = predict(model, img, size=IMG_SIZE, augment=AUGMENT)\n\nprint(gt[i])\nprint(bboxes)\n\n# # Draw Green ground truth box\n# out_image = draw_yolov5_predictions(img, gt[i], [1.0] * len(gt[i]), [0] * len(gt[i]), COCO_CLASSES, (0,255,0))\nout_image = show_img(img, gt[i],[1.0]*len(gt[i]), bbox_format='coco', colors=[(0, 255, 0)]*(len(bboxes)))\n\n# # Draw Red inference box\nout_image = show_img(np.array(out_image), bboxes,confis, bbox_format='coco', colors=[(0,0,255)]*(len(bboxes)))\n\ndisplay(out_image)","b765f737":"%cd \/kaggle\/working\n\n# Confidence scores of true positives, false positives and count false negatives\nTP = [] # Confidence scores of true positives\nFP = [] # Confidence scores of true positives\nFN = 0  # Count of false negative boxes\n\nfor i in tqdm(range(len(image_paths))):\n    TEST_IMAGE_PATH = image_paths[i]\n    img = cv2.imread(TEST_IMAGE_PATH)\n    img = cv2.imread(TEST_IMAGE_PATH)[...,::-1]\n    bboxes, scores = predict(model, img, size=IMG_SIZE, augment=AUGMENT)\n\n    # Test YOLOV5\n    gt0 = gt[i]\n    if len(bboxes) == 0:\n        # all gt are false negative\n        FN += len(gt0)\n    else:\n        bb = bboxes.copy().tolist()\n        for idx, b in enumerate(bb):\n            b.append(scores[idx])\n        bb.sort(key = lambda x: x[4], reverse = True)\n        \n        if len(gt0) == 0:\n            # all bboxes are false positives\n            for b in bb:\n                FP.append(b[4])\n        else:\n            # match bbox with gt\n            for b in bb:\n                matched = False\n                for g in gt0:\n                    # check whether gt box is already matched to an inference bb\n                    if len(g) == 4:\n                        # g bbox is unmatched\n                        if IOU_coco(b, g) >= eval_IOU:\n                            g.append(b[4]) # assign confidence values to g; marks g as matched\n                            matched = True\n                            TP.append(b[4])\n                            break\n                if not matched:\n                    FP.append(b[4])\n            for g in gt0:\n                if len(g) == 4:\n                    FN += 1","559b907d":"from matplotlib import pyplot as plt\n%matplotlib inline\n\nplt.hist(TP, 100)\nplt.title(\"CONF of true positives, base YOLOV5\")\nplt.xlabel('CONF')\nplt.ylabel('TP count')\nplt.show()\n\nprint(f'True positives = {len(TP)}')\nprint(f'False negatives = {FN}')","53cda11d":"plt.hist(FP, 100)\nplt.title(\"CONF of false positives, base YOLOX\")\nplt.xlabel('CONF')\nplt.ylabel('FP count')\nplt.show()\n\nprint(f'False positives = {len(FP)}')","b6e1ef0b":"F2list = []\nF2max = 0.0\nF2maxat = -1.0\n\nfor c in np.arange(0.0, 1.0, 0.01):\n    FNcount = FN + sum(1 for i in TP if i < c)\n    TPcount = sum(1 for i in TP if i >= c)\n    FPcount = sum(1 for i in FP if i >= c)\n    R = TPcount \/ (TPcount + FNcount + 0.0001)\n    P = TPcount \/ (TPcount + FPcount + 0.0001)\n    F2 = (5 * P * R) \/ (4 * P + R + 0.0001)\n    F2list.append((c, F2))\n    if F2max < F2:\n        F2max = F2\n        F2maxat = c\n\nplt.scatter(*zip(*F2list))\nplt.title(\"CONF vs F2 score\")\nplt.xlabel('CONF')\nplt.ylabel('F2')\nplt.show()\n\nprint(f'F2 max is {F2max} at CONF = {F2maxat}')","7dc6144b":"## Run Inference on **Not seen Data**","5ab15da3":"# \ud83d\udccc Key-Points\n* One have to submit prediction using the provided **python time-series API**, which makes this competition different from previous Object Detection Competitions.\n* Each prediction row needs to include all bounding boxes for the image. Submission is format seems also **COCO** which means `[x_min, y_min, width, height]`\n* Copmetition metric `F2` tolerates some false positives(FP) in order to ensure very few starfish are missed. Which means tackling **false negatives(FN)** is more important than false positives(FP). \n$$F2 = 5 \\cdot \\frac{precision \\cdot recall}{4\\cdot precision + recall}$$","55619878":"## Please Upvote if you find this Helpful","ba3fc006":"# \ud83d\udcd6 Meta Data\n* `train_images\/` - Folder containing training set photos of the form `video_{video_id}\/{video_frame}.jpg`.\n\n* `[train\/test].csv` - Metadata for the images. As with other test files, most of the test metadata data is only available to your notebook upon submission. Just the first few rows available for download.\n\n* `video_id` - ID number of the video the image was part of. The video ids are not meaningfully ordered.\n* `video_frame` - The frame number of the image within the video. Expect to see occasional gaps in the frame number from when the diver surfaced.\n* `sequence` - ID of a gap-free subset of a given video. The sequence ids are not meaningfully ordered.\n* `sequence_frame` - The frame number within a given sequence.\n* `image_id` - ID code for the image, in the format `{video_id}-{video_frame}`\n* `annotations` - The bounding boxes of any starfish detections in a string format that can be evaluated directly with Python. Does not use the same format as the predictions you will submit. Not available in test.csv. A bounding box is described by the pixel coordinate `(x_min, y_min)` of its lower left corner within the image together with its `width` and `height` in pixels --> (COCO format).","6e1d7d0d":"# \ud83d\udcda Import Libraries","40efe401":"### Get image paths and ground truth BB's","c523956f":"## Please Upvote if you find this Helpful","df28d468":"## Helper","c107ea23":"# Assess Model Performance","b8451b44":"### Test your model is working","47442cc8":"## Number of BBoxes","17790dd0":"# Save your upvote for:\n * OG Notebook: [Stop guessing CONF - systematically evaluate F2](https:\/\/www.kaggle.com\/alexchwong\/stop-guessing-conf-systematically-evaluate-f2)\n * Training and Infer Yolov5 Notebook: [Awsaf](https:\/\/www.kaggle.com\/awsaf49)\n > * [TRAIN](https:\/\/www.kaggle.com\/awsaf49\/great-barrier-reef-yolov5-train), \n > * [INFER](https:\/\/www.kaggle.com\/awsaf49\/great-barrier-reef-yolov5-infer\/notebook)\n \n I'm just modified [Alex Wong](https:\/\/www.kaggle.com\/alexchwong) notebook for Yolov5 b\/c lots of people are experimenting on this model. \n\n# Why this notebook\n* Each model is different in how the CONF parameter decides PRECISION and RECALL\n* Finding which CONF level is often a matter of guesswork, and you are limited by 5 submissions per day.\n* By systematically evaluating F2 score at each level of CONF, you can have a good idea which CONF will give you the best competition F2 metric.\n\n* This assumes:\n  * Your validation dataset is similar to the hidden test set\n  * Your model has not seen your validation dataset\n\n### What's new in this notebook?\n* F2 is evaluated at every CONF level on validation dataset, similar to F1_curve.png for YoloV5\n* Define 'eval_IOU' for which IOU level to evaluate F2 at\n  * (Competition metric tests IOU @ 0.3 to 0.8 with step of 0.05)\n\n### Example model used in this notebook\n\n* This notebook uses the YOLOV5 model kindly provided byAwsaf (https:\/\/www.kaggle.com\/awsaf49\/great-barrier-reef-yolov5-train)\n  * And assumes it is validate on FOLD=1 of 5-fold split performed in: https:\/\/www.kaggle.com\/awsaf49\/greatbarrierreef-yolov5-train-ds (well, idk what fold he's trained on on this dataset, but you can get the idea)\n\n### Warning\n* Note the iteration time as an estimate to how long this notebook takes to run.\n* Minimise wasting precious GPU minutes running at large resolutions. Test at small resolutions! The CONF peak should theoretically be the same.","282db71e":"# \ud83d\udd2d Inference","e9db5366":"# \ud83d\udee0 Install Libraries","788a3002":"# \ud83d\udd28 Helper","c3bdb6de":"# Display your model's Metrics","53807b8a":"# [Tensorflow - Help Protect the Great Barrier Reef](https:\/\/www.kaggle.com\/c\/tensorflow-great-barrier-reef)\n> Detect crown-of-thorns starfish in underwater image data\n\n<img src=\"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/31703\/logos\/header.png?t=2021-10-29-00-30-04\">","a39b6c73":"<img src=\"https:\/\/www.pngall.com\/wp-content\/uploads\/2018\/04\/Under-Construction-PNG-File.png\">"}}