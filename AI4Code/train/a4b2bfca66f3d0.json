{"cell_type":{"c0d97457":"code","02d048b0":"code","89da43a8":"code","7a96554b":"code","ea842291":"code","ec5501a0":"code","a8b511fa":"code","77bf1507":"code","a6ee21fb":"code","148d5b9b":"code","8f833306":"code","04236d8b":"code","2870de10":"markdown","f680c099":"markdown","3253dd21":"markdown","11469bcc":"markdown","054ad6dc":"markdown","5921a656":"markdown","cdb31697":"markdown","b1bfc502":"markdown","55cbea26":"markdown","2240fb22":"markdown","3038eb2b":"markdown","53469349":"markdown","92e02dff":"markdown","04ec0c58":"markdown"},"source":{"c0d97457":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings\nimport scipy\n\n#Suppressing all warnings\nwarnings.filterwarnings(\"ignore\")\n\n%matplotlib inline","02d048b0":"df = pd.read_csv('..\/input\/heart-failure-clinical-data\/heart_failure_clinical_records_dataset.csv')","89da43a8":"df.head()","7a96554b":"df.isna().sum()","ea842291":"import plotly.express as px\nfig = px.pie(df, names='DEATH_EVENT', title='Distribution of Death Events in Patients',width=600, height=400)\nfig.show()","ec5501a0":"corr = df.corr()\nax, fig = plt.subplots(figsize=(15,15))\nsns.heatmap(corr, vmin=-1, cmap='coolwarm', annot=True)\nplt.show()","a8b511fa":"corr[abs(corr['DEATH_EVENT']) > 0.1]['DEATH_EVENT']","77bf1507":"x = df[['age','ejection_fraction', 'serum_creatinine', 'serum_sodium', 'time']]\ny = df['DEATH_EVENT']\n\n#Spliting data into training and testing data\nfrom sklearn.model_selection import train_test_split\nx_train,x_test,y_train,y_test=train_test_split(x,y,random_state=1,test_size=0.2)","a6ee21fb":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nlr=LogisticRegression(max_iter=10000)\nlr.fit(x_train,y_train)\np1=lr.predict(x_test)\ns1=accuracy_score(y_test,p1)\nprint(\"Linear Regression Success Rate :\", \"{:.2f}%\".format(100*s1))","148d5b9b":"from sklearn.ensemble import RandomForestClassifier\nrfc=RandomForestClassifier()\nrfc.fit(x_train,y_train)\np3=rfc.predict(x_test)\ns3=accuracy_score(y_test,p3)\nprint(\"Random Forest Classifier Success Rate :\", \"{:.2f}%\".format(100*s3))","8f833306":"from sklearn.neighbors import KNeighborsClassifier\nscorelist=[]\nfor i in range(1,21):\n    knn=KNeighborsClassifier(n_neighbors=i)\n    knn.fit(x_train,y_train)\n    p5=knn.predict(x_test)\n    s5=accuracy_score(y_test,p5)\n    scorelist.append(round(100*s5, 2))\nprint(\"K Nearest Neighbors Top 5 Success Rates:\")\nprint(sorted(scorelist,reverse=True)[:5])","04236d8b":"from sklearn.tree import DecisionTreeClassifier\nlist1 = []\nfor leaves in range(2,10):\n    classifier = DecisionTreeClassifier(max_leaf_nodes = leaves, random_state=0, criterion='entropy')\n    classifier.fit(x_train, y_train)\n    y_pred = classifier.predict(x_test)\n    list1.append(accuracy_score(y_test,y_pred)*100)\nprint(\"Decision Tree Classifier Top 5 Success Rates:\")\nprint([round(i, 2) for i in sorted(list1, reverse=True)[:5]])","2870de10":"### Death Event Distribution","f680c099":"### Null Values in the Dataset","3253dd21":"## Initial Review of Data","11469bcc":"Decision Tree Classifier: 86.67%\n\nLinear Regression: 88.30%\n\nRandom Forest Classifier: 91.67%\n\nK Nearest Neighbors: 93.33%","054ad6dc":"### Correlation Heatmap","5921a656":"## Importing Modules and Data","cdb31697":"### K Nearest Neighbors","b1bfc502":"### Random Forest Classifier","55cbea26":"### Decision Tree Classifier","2240fb22":"## Final Results:","3038eb2b":"### Linear Regression","53469349":"## Model Training and Prediction","92e02dff":"The features 'age', 'ejection_fraction', 'serum_creatinine', 'serum_sodium', and 'time' have a considerable correlation with 'DEATH_EVENT'","04ec0c58":"(Random Forest rate varies on each execution from 88.33% to 91.67%)"}}