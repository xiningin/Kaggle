{"cell_type":{"61d67666":"code","a8952dec":"code","1a18e6f6":"code","4b081e19":"code","e20ddc43":"code","c48789ea":"code","93869a3d":"code","9d4b63fc":"code","9bb838ac":"code","cee98349":"code","90b9505f":"code","36546c29":"code","ed9ef923":"code","a09b071e":"code","b25762c8":"code","1f6d1ff2":"code","850160cd":"code","d74203c8":"code","1a78002a":"code","4f71dda7":"code","f45a49f1":"code","81c11da8":"code","b7716113":"code","30368e53":"code","3209171e":"code","a5636774":"code","81c12b6c":"code","f9a46bb3":"code","0fef96d1":"code","f4ca6272":"code","35a3b06b":"code","ccdabfbd":"code","0ea186e2":"code","73159878":"code","d644b499":"code","c6d8ee16":"code","cbc343c2":"code","d6b50c77":"code","23331d33":"code","a6410f71":"code","fa5d552f":"code","44a4a7cf":"code","d85fcaad":"code","71dab194":"code","bc01ef65":"code","cc43cec4":"code","b060b825":"code","f8560532":"code","44ceb754":"code","48b81135":"code","9a714d94":"code","d5e4c4ca":"code","7a01c76f":"code","651f9be1":"code","e77564d5":"code","732752d1":"code","3893e72a":"code","576e5f66":"code","ebc65872":"code","e35bfe11":"code","94a4113a":"code","f96dfe1a":"code","24c9cee1":"code","5ad037f2":"code","7e2c0804":"code","39fd6b92":"code","aa3b2fc7":"code","1dca8a61":"code","92f70c6c":"code","43a06bdc":"code","3152c10b":"code","f2f18c2b":"code","842b350c":"code","1f0e5d2e":"code","b43620cb":"code","d169a4bb":"code","cce1d0e1":"code","82841eec":"code","776ee0ed":"code","b0b7fb94":"code","911f2f00":"code","48810de8":"code","4750d0d2":"code","2190168e":"code","3a4ff027":"code","c039aa61":"code","d4cebbee":"code","792e53a7":"markdown","8ff415b8":"markdown","fd4a8f04":"markdown","3f56ee75":"markdown","9d316f23":"markdown","4b97a08f":"markdown","b8d83b7d":"markdown","e69dc95d":"markdown","fdb2065e":"markdown","97392962":"markdown","79522a41":"markdown","9aa3f4a9":"markdown","6bd171a4":"markdown","c47f0f80":"markdown","26fbc606":"markdown","a4a5ed0d":"markdown","e8316643":"markdown","5174dca8":"markdown","624e8cba":"markdown","1b8ccbf0":"markdown","b6c653a9":"markdown","bb31a7be":"markdown","79947012":"markdown","28dc9a67":"markdown"},"source":{"61d67666":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","a8952dec":"matches=pd.read_csv(\"..\/input\/winnerpredictionchallenge\/Training Matches IPL 2008-2019.csv\")\nmatches.head(10)","1a18e6f6":"#checking null values\nmatches.isnull().sum()","4b081e19":"matches.describe()\n","e20ddc43":"matches.info()","c48789ea":"\n#filling null values\nmatches['winner'].fillna('Draw', inplace=True)\nmatches['city'].fillna('Dubai', inplace=True)","93869a3d":"matches = matches.drop(columns=['umpire3'], axis=1)","9d4b63fc":"matches.loc[matches.winner=='Draw','winner']","9bb838ac":"#Replacing Full names of the teams with their abbreviations \nmatches.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab','Delhi Capitals' ,\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Rising Pune Supergiant','Kochi Tuskers Kerala','Pune Warriors']\n                ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','DD','SRH','RPS','RPS','KTK','PW'],inplace=True)","cee98349":"%matplotlib inline\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport seaborn as sns\n\nsns.color_palette(\"Paired\")\nmatplotlib.rcParams['font.size'] = 14\nmatplotlib.rcParams['figure.figsize'] = (15, 15)\nmatplotlib.rcParams['figure.facecolor'] = '#00000000'\n\n\n","90b9505f":"objects = ('Toss & Win','Toss & Lose')\ny_pos = np.arange(len(objects))\na=len(matches[matches['toss_winner']==matches['winner']])\/len(matches)\nb=(len(matches)-(len(matches[matches['toss_winner']==matches['winner']])))\/len(matches)\nperformance = [a,b]\nplt.bar(y_pos, performance, align='center', alpha=0.7)\nplt.xticks(y_pos, objects)\nplt.ylabel('Winning Percentage')\nplt.title('Toss-Win & Toss-Lose')  ","36546c29":"teams_per_season = matches.groupby('season')['winner'].value_counts()\nteams_per_season","ed9ef923":"\"\"\"\nfor i, v in win_per_season.iteritems():\n    print(i, v)\n    \nfor items in win_per_season.iteritems():\n    print(items)    \n\"\"\"\nyear = 2008\nwin_per_season_df = pd.DataFrame(columns=['year', 'team', 'wins'])\nfor items in teams_per_season.iteritems():    \n    if items[0][0]==year:\n        print(items)\n        win_series = pd.DataFrame({\n            'year': [items[0][0]],\n            'team': [items[0][1]],\n            'wins': [items[1]]\n        })\n        win_per_season_df = win_per_season_df.append(win_series)\n        year += 1   ","a09b071e":"win_per_season_df","b25762c8":"import seaborn as sns\nsns.barplot('wins', 'team', hue='year', data=win_per_season_df, palette='Paired');","1f6d1ff2":"venue_ser = matches['venue'].value_counts()","850160cd":"venue_df = pd.DataFrame(columns=['venue', 'matches'])\nfor items in venue_ser.iteritems():\n    temp_df = pd.DataFrame({\n        'venue':[items[0]],\n        'matches':[items[1]]\n    })\n    venue_df = venue_df.append(temp_df, ignore_index=True)","d74203c8":"plt.title(\"IPL Venues\")\nsns.barplot(x='matches', y='venue', data=venue_df);","1a78002a":"venue_df","4f71dda7":"team_wins_ser = matches['winner'].value_counts()\n\nteam_wins_df = pd.DataFrame(columns=[\"team\", \"wins\"])\nfor items in team_wins_ser.iteritems():\n    temp_df1 = pd.DataFrame({\n        'team':[items[0]],\n        'wins':[items[1]]\n    })\n    team_wins_df = team_wins_df.append(temp_df1, ignore_index=True)","f45a49f1":"team_wins_df ","81c11da8":"plt.title(\"Total Victories of IPL Teams\")\nsns.barplot(x='wins', y='team', data=team_wins_df, palette='Paired');","b7716113":"mvp_ser = matches['player_of_match'].value_counts()\n\nmvp_ten_df = pd.DataFrame(columns=[\"player\", \"wins\"])\ncount = 0\nfor items in mvp_ser.iteritems():\n    if count>9:\n        break\n    else:\n        temp_df2 = pd.DataFrame({\n            'player':[items[0]],\n            'wins':[items[1]]\n        })\n        mvp_ten_df = mvp_ten_df.append(temp_df2, ignore_index=True)\n        count += 1  ","30368e53":"mvp_ten_df","3209171e":"plt.title(\"Top Ten IPL Players\")\nsns.barplot(x='wins', y='player', data=mvp_ten_df, palette='Paired');","a5636774":" toss_ser = matches['toss_winner'].value_counts()\n\ntoss_df = pd.DataFrame(columns=[\"team\", \"wins\"])\n\nfor items in toss_ser.iteritems():\n    temp_df3 = pd.DataFrame({\n        'team':[items[0]],\n        'wins':[items[1]]\n    })\n    toss_df = toss_df.append(temp_df3, ignore_index=True) ","81c12b6c":"toss_df","f9a46bb3":"plt.title(\"How IPL Teams fared in toss?\")\nsns.barplot(x='wins', y='team', data=toss_df, palette='Paired');","0fef96d1":"\n#Finding Co-relations among attributes\ncorrMatrix=matches.corr()\ncorrMatrix","f4ca6272":"sns.heatmap(corrMatrix, vmax = .9, square = True)\nplt.show()","35a3b06b":"\n#Checking for null values\nmatches.apply(lambda x: sum(x.isnull()),axis=0)","ccdabfbd":"matches.replace(['Bangalore','Chandigarh','Delhi','Mumbai','Kolkata','Jaipur','Hyderabad','Chennai','Cape Town',\n                 'Port Elizabeth','Durban','Centurion','East London','Johannesburg','Kimberley','Bloemfontein','Ahmedabad',\n                 'Cuttack','Nagpur','Dharamsala','Kochi','Indore','Visakhapatnam','Pune','Raipur','Ranchi','Abu Dhabi','Sharjah',\n                 'Dubai','Rajkot','Kanpur','Mohali','Bengaluru'],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n                                                                  , 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33],inplace=True)","0ea186e2":"matches.drop(columns=['umpire1','umpire2'], inplace =True)","73159878":"matches.drop(columns=['player_of_match'], inplace =True)\n","d644b499":"matches.head()\n","c6d8ee16":"matches.isnull().sum()","cbc343c2":"matches = matches[['team1','team2','city','toss_decision','toss_winner','venue','winner']]\nmatches.head(2)","d6b50c77":"matches[\"winner\"] = np.where(matches[\"winner\"] == matches[\"team1\"], 1, 0)\nmatches.head(2)","23331d33":"matches['toss_decision'] = matches['toss_decision'].map({'field':0,'bat':1})\nmatches.head(2)","a6410f71":"matches['team1'] = matches['team1'].map({'CSK':0, 'RCB':1, 'DC':2, 'MI':3, 'KKR':4, 'RR':5, 'KXIP':6, 'SRH':7,'DD':8, 'GL': 9, 'RPS':10, 'KTK':11, 'PW':12})\nmatches['team2'] = matches['team2'].map({'CSK':0, 'RCB':1, 'DC':2, 'MI':3, 'KKR':4, 'RR':5, 'KXIP':6, 'SRH':7, 'DD':8, 'GL': 9, 'RPS':10, 'KTK':11, 'PW':12})\nmatches['toss_winner'] = matches['toss_winner'].map({'CSK':0, 'RCB':1, 'DC':2, 'MI':3, 'KKR':4, 'RR':5, 'KXIP':6, 'SRH':7, 'DD':8, 'GL': 9, 'RPS':10, 'KTK':11, 'PW':12})\n\nmatches.head(2)","fa5d552f":"matches.drop(columns=['venue'], inplace =True)\nmatches.head(2)","44a4a7cf":"matches.describe()","d85fcaad":"# data for training purpose\n\nx=matches[['team1', 'team2', 'city']]\ny=matches[['winner']]\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split, GridSearchCV \nscaler=StandardScaler()\nscaled_data=scaler.fit_transform(x)\ntrain_x,test_x,train_y,test_y=train_test_split(scaled_data,y,test_size=0.2,random_state=49)","71dab194":"# for testing the data\nmatches_testdata= pd.read_csv(\"\/kaggle\/input\/winnerpredictionchallenge\/Testset Matches IPL 2020.csv\")\nmatches_testdata.head()   ","bc01ef65":"testdata = matches_testdata.copy()","cc43cec4":"testdata.isnull().sum()","b060b825":"testdata.drop(['id','season','date','player_of_match','venue','umpire1','umpire2','umpire3'],axis=1,inplace=True)","f8560532":"test_copy = matches_testdata.copy()","44ceb754":"\n\n\n\ntestdata.replace(['Bangalore','Chandigarh','Delhi','Mumbai','Kolkata','Jaipur','Hyderabad','Chennai','Cape Town',\n                 'Port Elizabeth','Durban','Centurion','East London','Johannesburg','Kimberley','Bloemfontein','Ahmedabad',\n                 'Cuttack','Nagpur','Dharamsala','Kochi','Indore','Visakhapatnam','Pune','Raipur','Ranchi','Abu Dhabi','Sharjah',\n                 'Dubai', 'Dubai (DSC)','Rajkot','Kanpur','Mohali','Bengaluru'],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n                                                                  , 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 29,30, 31, 32, 33],inplace=True)\n\n\ntestdata['team1'] = testdata['team1'].map({'CSK':0, 'RCB':1, 'DC':2, 'MI':3, 'KKR':4, 'RR':5, 'KXIP':6, 'SRH':7})\ntestdata['team2'] = testdata['team2'].map({'CSK':0, 'RCB':1, 'DC':2, 'MI':3, 'KKR':4, 'RR':5, 'KXIP':6, 'SRH':7})\ntestdata.head()","48b81135":"matches['city'].unique()","9a714d94":"from sklearn.metrics import accuracy_score , roc_curve, roc_auc_score,confusion_matrix\nfrom sklearn.metrics import classification_report\nfrom sklearn.linear_model import LogisticRegression\nlogreg=LogisticRegression()\nlogreg.fit(x,y)\npred_y=logreg.predict(x)\nlogreg.score(x,y)\n","d5e4c4ca":"logreg.fit(train_x, train_y)# for logistic regression model\n# cheking training accuracy\ny_pred1 = logreg.predict(train_x)\npredictions = [round(value) for value in y_pred1]\naccuracy = accuracy_score(train_y,predictions)\nprint(logreg.score(train_x, train_y))\naccuracy","7a01c76f":"# cheking initial test accuracy # for logistic regression model\ny_pred = logreg.predict(test_x)\npredictions = [round(value) for value in y_pred]\naccuracy = accuracy_score(test_y,predictions)\naccuracy\nprint(logreg.score(test_x,test_y))\naccuracy","651f9be1":"from sklearn.metrics import accuracy_score , roc_curve, roc_auc_score,confusion_matrix\nfrom sklearn.metrics import classification_report\npredictions = [round(value) for value in y_pred]\nauc_logis = roc_auc_score(test_y, predictions)\nprint(classification_report(test_y,predictions))# for logistic regression model\nauc_logis","e77564d5":"import xgboost as xgb\nimport pickle\nfrom sklearn import datasets\nfrom xgboost import XGBClassifier\nfrom sklearn.metrics import accuracy_score , roc_curve, roc_auc_score,confusion_matrix\nfrom sklearn.metrics import classification_report","732752d1":"# for XGBoost model\nxgb=xgb.XGBRegressor()\nxgb.fit(train_x,train_y)\npred_yxgb=xgb.predict(test_x)\nprint(xgb.score(train_x,train_y))\nlogreg.score(train_x,train_y)","3893e72a":"# cheking initial test accuracy # for XGBoost model\ny_pred = xgb.predict(test_x)\npredictions = [round(value) for value in pred_yxgb]\naccuracy = accuracy_score(test_y,predictions)\n\naccuracy\n","576e5f66":"# for XGBoost model\npredictions = [round(value) for value in y_pred]\nauc_xgb = roc_auc_score(test_y, predictions)\nprint(classification_report(test_y,predictions))\nauc_xgb","ebc65872":"from sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_selection import VarianceThreshold\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.model_selection import KFold   #For K-fold cross validation\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.model_selection import cross_val_score\n","e35bfe11":"\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier, export_graphviz\nfrom sklearn import metrics\nfrom sklearn.svm import SVC\n\n#Generic function for making a classification model and accessing performance:\ndef classification_model(model, data, predictors, outcome):\n  model.fit(data[predictors],data[outcome])\n  predictions = model.predict(data[predictors])\n  accuracy = metrics.accuracy_score(predictions,data[outcome])\n  print('Accuracy : %s' % '{0:.3%}'.format(accuracy))\n  kf = KFold(data.shape[0], n_folds=7)\n  error = []\n  for train, test in kf:\n    train_predictors = (data[predictors].iloc[train,:])\n    train_target = data[outcome].iloc[train]\n    model.fit(train_predictors, train_target)\n    error.append(model.score(data[predictors].iloc[test,:], data[outcome].iloc[test]))\n \n  print('Cross-Validation Score : %s' % '{0:.3%}'.format(np.mean(error)))\n\n  model.fit(data[predictors],data[outcome]) ","94a4113a":"'''model=xgb.XGBRegressor()\noutcome_var= train_y\npredictor_var = train_x\ndf=[train_x, train_y]\nmodel = LogisticRegression()\nclassification_model(model, df,predictor_var,outcome_var)'''\n","f96dfe1a":"#SVM\nsvm=SVC()\nsvm.fit(train_x,train_y)\nsvm.score(test_x,test_y)\ny_pred = svm.predict(test_x)\npredictions = [round(value) for value in y_pred]\nauc_svc = roc_auc_score(test_y, predictions)\n#print(confusion_matrix(test_x,y_pred))\nprint(classification_report(test_y,y_pred))\nprint(\"Accuracy of SVM classifier on train set:\", svm.score(train_x,train_y))\nprint('Accuracy of SVM classifier on test set: {:.4f}'.format(svm.score(test_x,test_y)*100))\nauc_svc","24c9cee1":"#Decision Tree Classifier\ndtree=DecisionTreeClassifier()\ndtree.fit(train_x,train_y)\ndtree.score(test_x,test_y)\ny_pred = dtree.predict(test_x)\npredictions = [round(value) for value in y_pred]\nauc_dtree = roc_auc_score(test_y, predictions)\nprint(confusion_matrix(test_y, predictions))\nprint(classification_report(test_y,predictions))\nprint(\"Accuracy of Decision Tree classifier on train set:\", dtree.score(train_x,train_y))\nprint('Accuracy of decision tree classifier on test set: {:.4f}'.format(dtree.score(test_x,test_y)*100))\nauc_dtree","5ad037f2":"#Random Forest Classifier\nclrf=RandomForestClassifier(n_estimators=100)\nclrf.fit(train_x,train_y)\nclrf.score(test_x,test_y)\ny_pred = clrf.predict(test_x)\npredictions = [round(value) for value in y_pred]\nauc_clrf = roc_auc_score(test_y, predictions)\nprint(confusion_matrix(test_y, predictions))\nprint(classification_report(test_y,predictions))\nprint(\"Accuracy of Random Forest classifier on train set:\", clrf.score(train_x,train_y))\nprint('Accuracy of Random Forest classifier on test set: {:.4f}'.format(clrf.score(test_x,test_y)*100))\nauc_clrf","7e2c0804":"#XGB Classifier\nxgbcl=XGBClassifier()\nxgbcl.fit(train_x,train_y)\nxgbcl.score(test_x,test_y)\ny_pred = xgbcl.predict(test_x)\npredictions = [round(value) for value in y_pred]\nauc_xgbcl = roc_auc_score(test_y, predictions)\nprint(confusion_matrix(test_y, predictions))\nprint(classification_report(test_y,predictions))\nprint(\"Accuracy of XBB classifier on train set:\", xgbcl.score(train_x,train_y))\nprint('Accuracy of XGB classifier on test set: {:.4f}'.format(xgbcl.score(test_x,test_y)*100))\nauc_xgbcl","39fd6b92":"# we are tuning three hyperparameters right now, we are passing the different values for both parameters\ngrid_param = {\n    \"n_estimators\" : [90,100,115,130],\n    'criterion': ['gini', 'entropy'],\n    'max_depth' : range(2,20,1),\n    'min_samples_leaf' : range(1,10,1),\n    'min_samples_split': range(2,10,1),\n    'max_features' : ['auto','log2']}","aa3b2fc7":"grid_search = GridSearchCV(estimator=clrf,param_grid=grid_param,cv=5,n_jobs =-1,verbose = 3)","1dca8a61":"#grid_search.fit(train_x,train_y)","92f70c6c":"#let's see the best parameters as per our grid search\n#grid_search.best_params_","43a06bdc":"rand_clf = RandomForestClassifier(criterion= 'entropy',\n max_depth = 10,\n max_features = 'auto',\n min_samples_leaf = 1,\n min_samples_split= 5,\n n_estimators = 500,random_state=6)","3152c10b":"rand_clf.fit(train_x,train_y)","f2f18c2b":"rand_clf.score(test_x,test_y)","842b350c":"# For data from 2020 IPL\npred = rand_clf.predict(testdata)\nprint(pred)\ntestdata = testdata.replace([0,1,2,3,4,5,6,7], ['CSK', 'RCB', 'DC', 'MI', 'KKR', 'RR', 'KXIP', 'SRH'])#{0:'CSK', 1:'RCB', 2:'DC', 3:'MI',4: 'KKR', 5:'RR', 6:'KXIP', 7:'SRH'})\n#testdata['team2'] = testdata['team2'].map({'CSK':0, 'RCB':1, 'DC':2, 'MI':3, 'KKR':4, 'RR':5, 'KXIP':6, 'SRH':7})\nwinner = []\nfor i in range(len(pred)):\n    if pred[i] == 0:\n        winner.append(testdata['team1'][i])\n        \n    else:  \n        winner.append(testdata['team2'][i])\n    ","1f0e5d2e":"\nwinner","b43620cb":"'''winner = list()\nfor i in range(len(pred)):\n    if pred[i] == 0:\nWinner.append(Test['team1'][i])\n        \n    else:\n        Winner.append(Test['team2'][i])\n\nF_Winner=[]'''\n\nfor i in winner:\n    if i==0:\n        print('CSK')\n    elif i==1:\n        print('RCB')\n    elif i==2:\n        print('DC')\n    elif i==3:\n        print('MI')\n    elif i==4:\n        print('KKR')\n    elif i==5:\n        print('RR')\n    elif i==6:\n        print('KXIP') \n    elif i==7:\n        print('SRH')\n","d169a4bb":"final_submission = {\"id\":matches_testdata.id.tolist(), \n              \"winner\":winner}\nsubmit = pd.DataFrame(final_submission)","cce1d0e1":"# Converting the output to CSV file\nsubmit.to_csv(\"submit.csv\", index=False)","82841eec":"deliveries = pd.read_csv('..\/input\/winnerpredictionchallenge\/Traning Deliveries Matches IPL 2008-2019.csv')","776ee0ed":"deliveries.drop([\"over\",\"ball\",\"non_striker\",\"is_super_over\",\"wide_runs\",\"bye_runs\",\n                 \"legbye_runs\",\"noball_runs\",\"penalty_runs\",\"extra_runs\",\n                 \"total_runs\",\"dismissal_kind\"],axis = 1,inplace = True)","b0b7fb94":"deliveries[\"player_dismissed\"] = deliveries[\"player_dismissed\"].fillna(0)\ndeliveries[\"player_dismissed\"] = np.where(deliveries[\"player_dismissed\"] == 0 ,0,1)\ndeliveries[\"catch\"] = deliveries[\"fielder\"]\ndeliveries[\"catch\"] = deliveries[\"catch\"].fillna(0)\ndeliveries[\"catch\"] = np.where(deliveries[\"catch\"] == 0 ,0,1)\n","911f2f00":"deliveries[\"batsman_extra_score\"] = deliveries[\"batsman_runs\"]\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(1,0)\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(2,0)\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(3,0)\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(5,0)\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(4,1)\ndeliveries[\"batsman_extra_score\"] = deliveries[\"batsman_extra_score\"].replace(6,2)","48810de8":"deliveries.head()","4750d0d2":"deliveries.replace(['Mumbai Indians','Kolkata Knight Riders','Royal Challengers Bangalore','Deccan Chargers','Chennai Super Kings',\n                 'Rajasthan Royals','Delhi Daredevils','Gujarat Lions','Kings XI Punjab','Delhi Capitals' ,\n                 'Sunrisers Hyderabad','Rising Pune Supergiants','Rising Pune Supergiant','Kochi Tuskers Kerala','Pune Warriors']\n                ,['MI','KKR','RCB','DC','CSK','RR','DD','GL','KXIP','DD','SRH','RPS','RPS','KTK','PW'],inplace=True)","2190168e":"\nbatsman = deliveries.batsman.unique()\nbatsman.sort()\nbowler = deliveries.bowler.unique()\nbowler.sort()\n\ncorrected_batsman = []\nfor b in batsman:\n    new = b[0]\n    for i in range(len(b)):\n        if b[i] == \" \":\n            new = new + b[i:]\n    corrected_batsman.append(new)\n\ncorrected_bowler = []\nfor b in bowler:\n    new = b[0]\n    for i in range(len(b)):\n        if b[i] == \" \":\n            new = new + b[i:]\n    corrected_bowler.append(new)\n    \nfor i in range(len(batsman)):\n    deliveries[\"batsman\"] = deliveries[\"batsman\"].replace(batsman[i],corrected_batsman[i])\n\nfor i in range(len(bowler)):\n    deliveries[\"bowler\"] = deliveries[\"bowler\"].replace(bowler[i],corrected_bowler[i])","3a4ff027":"def Player_value(player,match):\n    df_1 = deliveries.query(\"match_id == '%s'\"%match).query(\"batsman == '%s'\"%player)\n    score = sum(df_1[\"batsman_runs\"])\n    if score == 0:\n        score += -2\n    if score >= 50 and score < 100:\n        score += 8\n    if score >= 100:\n        score += 16\n    score += sum(df_1[\"batsman_extra_score\"])\n    \n    df_2 = deliveries.query(\"match_id == '%s'\"%match).query(\"bowler == '%s'\"%player)\n    if sum(df_2[\"player_dismissed\"]) == 4:\n        score += 8\n    if sum(df_2[\"player_dismissed\"]) >= 5:\n        score += 16\n    score += sum(df_2[\"player_dismissed\"])*25\n    \n    df_3 = deliveries.query(\"match_id == '%s'\"%match).query(\"fielder == '%s'\"%player)\n    score += sum(df_3[\"catch\"])*8\n    \n    if df_1.shape[0] == 0 and df_2.shape[0] == 0 and df_3.shape[0] == 0:\n        return 0\n    \n    return score","c039aa61":"match_id = deliveries.match_id.unique()\n\nScores = pd.DataFrame(columns = [\"id\",\"team1_bats_score\",\"team1_bowl_score\",\"team2_bats_score\",\"team2_bowl_score\"])\n\nfor i in match_id:\n    bowler_1 = deliveries.query(\"match_id == '%s'\"%i).query(\"inning == 2\").bowler.unique()\n    bowler_2 = deliveries.query(\"match_id == '%s'\"%i).query(\"inning == 1\").bowler.unique()\n    bats_1 = deliveries.query(\"match_id == '%s'\"%i).query(\"inning == 1\").batsman.unique()\n    bats_2 = deliveries.query(\"match_id == '%s'\"%i).query(\"inning == 2\").batsman.unique()\n    \n    team1_bowl_score = 0\n    team2_bowl_score = 0\n    team1_bats_score = 0\n    team2_bats_score = 0\n    \n    for p in bowler_1:\n        team1_bowl_score += Player_value(p,i)\n        \n    for p in bowler_2:\n        team2_bowl_score += Player_value(p,i)\n    \n    for p in bats_1:\n        team1_bats_score += Player_value(p,i)\n        \n    for p in bats_2:\n        team2_bats_score += Player_value(p,i)\n        \n    Scores = Scores.append({\"id\":i,\"team1_bats_score\":team1_bats_score,\n                            \"team1_bowl_score\":team1_bowl_score,\n                            \"team2_bats_score\":team2_bats_score,\n                            \"team2_bowl_score\":team2_bowl_score},  ignore_index = True)\n    \n","d4cebbee":"\nScores.head()","792e53a7":"# The most successful IPL team\n\nIn a game of sports, every team competes for victory. Hence, the team that has registered the most number of victories is the most successful.","8ff415b8":"# Observations:\n\nMumbai Indians has won the most toss(till 2019) in IPL history.\n\nAll the top teams in IPL are successful in winning the toss as well.","fd4a8f04":"Dropping unwanted parameters from deliveries.","3f56ee75":"# The team that won the most number of toss","9d316f23":"# Data pre-processing\n","4b97a08f":"# Most Valuable Player\n\nWinning matters the most in a competitive league match. \n\nIf a player makes the most significant contribution to his team\u2019s victory, then he\u2019s chosen as the player_of_match. \n\nThe player who has won the player_of_match title on most occasions is the most valuable player.\n","b8d83b7d":"# Observations:\n\nMumbai Indians is the most successful team(as they have won the maximum number of IPL matches -109) followed \nby Chennai Super Kings and Kolkata Knight Riders.","e69dc95d":"# Creating Dataset for teams' scores","fdb2065e":"# The team with the most number of wins per season.\n\nEach IPL season has a fair share of excitement and adulation. No team other than Chennai Super Kings(in 2010 and 2011) was able to win\nthe IPL trophy in succession. That is a testimony to the unpredictability of IPL.\n\n\nLet\u2019s analyze the team with the most wins in each season.","97392962":"# Observations:\n\nEden Gardens has hosted the maximum number of IPL matches followed by Wankhede Stadium and M Chinnaswamy Stadium.\n\nTill 2019, IPL matches were hosted by 40 venues.","79522a41":"# Data Preparation and Cleaning\n\nLet\u2019s start by reading the csv file to Pandas DataFrame.","9aa3f4a9":"# Exploratory Analysis and Visualization\n\nNow that our data set has been cleaned up, it\u2019s time to do the in-depth analysis and visualization.\n\n\nLet\u2019s begin by importingmatplotlib.pyplot and seaborn.","6bd171a4":"# Training Models\n","c47f0f80":"# The venue that hosted the maximum number of matches\n","26fbc606":"So there are 756 rows and 18 columns. 756 rows imply that there were 756 IPL matches held between 2008 and 2019.","a4a5ed0d":"# Defining function for calculating Player_value","e8316643":"It\u2019s imperative to know the count of NaN values for each column before we proceed further.The column \u2018umpire3\u2019 has a significant number of NaN values. As the off-field umpire parameter is insignificant, we can drop this column. The other columns that have Nan values are of type object(Pandas equivalent of Python String data type) and are very few in number(<=7).","5174dca8":"# The team with the most number of wins per season.","624e8cba":"Random forest classifier has increased the predicitive power of our model.Great, let's do some hyperparameter tuning and see if we can increase our accuracy more.\n","1b8ccbf0":"The number of wins is a discrete value. Hence, we will plot a bar chart(barplot in Seaborn).\n","b6c653a9":"# Observations:\n\nCris Gayle is the player who won the most player of the match awards and hence is the most valuable player.\n\nSix Indian players have figured in the top ten IPL players list","bb31a7be":"# The dataset has 18 columns. Let\u2019s get acquainted with the columns.\n\nid: The IPL match id.\n\nseason: The IPL season\n\ncity: The city where the IPL match was held.\n\ndate: The date on which the match was held.\n\nteam1: One of the teams of the IPL match\n\nteam2: The other team of the IPL match\n\ntoss_winner: The team that won the toss\n\ntoss_decision: The decision taken by the team that won the toss to \u2018bat\u2019 or \u2018field\u2019\n\nresult: The result(\u2018normal\u2019, \u2018tie\u2019, \u2018no result\u2019) of the match.\n\ndl_applied: (1 or 0)indicates whether the Duckworth-Lewis rule was applied or not.\n\nwinner: The winner of the match.\n\nwin_by_runs: Provides the runs by which the team batting first won\n\nwin_by_runs: Provides the number of wickets by which the team batting second won.\n\nplayer_of_match: The outstanding player of the match.\n\nvenue: The venue where the match was hosted.\n\numpire1: One of the two on-field umpires who officiate the match.\n\numpire2: One of the two on-field umpires who officiate the match.\n\numpire3: The off-field umpire who officiates the match","79947012":"From the barplot, we can easily make inferences regarding the year in which a particular team has scored the maximum wins(and also the number of wins).\nObservations:\nMumbai Indians has secured the most wins in four seasons(2010, 2013, 2017, and 2019).","28dc9a67":"Hyperparameters of Random forest classifier:\nbootstrap=True, class_weight=None, criterion='gini', max_depth=None, max_features='auto', max_leaf_nodes=None, min_impurity_decrease=0.0, min_impurity_split=None, min_samples_leaf=1, min_samples_split=2, min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=None, oob_score=False, random_state=None, verbose=0, warm_start=False\n\nLet's now try to tune some hyperparameters using the GridSearchCV algorithm"}}