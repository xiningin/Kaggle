{"cell_type":{"32ec12da":"code","2be44387":"code","92cd2c6b":"code","782f0843":"code","a53f0658":"code","4acd9537":"code","6f5f5210":"code","664e38da":"code","6c780408":"code","b9fa59d1":"code","69f387f9":"code","e641b3b0":"code","973d74df":"code","0d9c9f2b":"code","5b06fd14":"code","8cd5bbb6":"code","b948b152":"code","403c89fd":"code","1d334306":"code","43e8b50d":"code","7cea8525":"markdown","e17f2192":"markdown","3adefd0e":"markdown","9af5ac18":"markdown","d71100d3":"markdown","6dfb4ff0":"markdown"},"source":{"32ec12da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2be44387":"# Importando as classes\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","92cd2c6b":"# Carregando os dados\ndf = pd.read_csv('..\/input\/zoo.csv')\nani_class = pd.read_csv('..\/input\/class.csv')","782f0843":"# Visualiza\u00e7\u00e3o pr\u00e9via dos dados\ndf.head()","a53f0658":"# Verificando os tipos e os valores nulos\ndf.info()","4acd9537":"# Verificando a quantidade \u1e55r classe\nsns.countplot(df['class_type'])\npd.Series.value_counts(df['class_type'])\n# 1 \t41\tMammal\n# 2 \t20\tBird\n# 3 \t5\tReptile\n# 4 \t13\tFish\n# 5 \t4\tAmphibian\n# 6 \t8\tBug\n# 7 \t10\tInvertebrate","6f5f5210":"# Join tabela de animais e tabela de classes para exibir nome das classes\ndfu = pd.merge(df,ani_class,how='left',left_on='class_type',right_on='Class_Number')\ndfu.head()","664e38da":"# Verificando a que classe a maioria dos animais de zool\u00f3gico pertence\nsns.factorplot('Class_Type', data=dfu,kind=\"count\", aspect=2)","6c780408":"# Verificando a estat\u00edstica\ndf.describe()","b9fa59d1":"# Criando mapa de calor para mostrar as correla\u00e7\u00f5es\nplt.subplots(figsize=(20,15))\nax = plt.axes()\nax.set_title(\"Correlation Heatmap\")\ncorr = df.corr()\nsns.heatmap(corr, annot=True,\n            xticklabels=corr.columns.values,\n            yticklabels=corr.columns.values)","69f387f9":"# Mostrando as correla\u00e7\u00f5es que s\u00e3o superior a 0,7 (positiva ou negativa)\ncorr[corr != 1][abs(corr)> 0.7].dropna(how='all', axis=1).dropna(how='all', axis=0)","e641b3b0":"# Dividindo o DataFrame\nfrom sklearn.model_selection import train_test_split\n\n# Treino e teste\ntrain, test = train_test_split(df, test_size=0.30, random_state=42)\n\n# Verificando o tanho dos DataFrames\ntrain.shape, test.shape","973d74df":"# Selecionado as features\nremoved_cols = ['animal_name', 'class_type']\nfeats = [c for c in train.columns if c not in removed_cols]","0d9c9f2b":"# Importando as classes\nfrom sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor\nfrom sklearn.ensemble import AdaBoostRegressor, GradientBoostingRegressor\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import accuracy_score","5b06fd14":"# Selecionando os modelos a serem testados\nmodels = {'RandomForest': RandomForestRegressor(random_state=42),\n          'ExtraTrees': ExtraTreesRegressor(random_state=42),\n          'GradientBoosting': GradientBoostingRegressor(random_state=42),\n          'DecisionTree': DecisionTreeRegressor(random_state=42),\n          'AdaBoost': AdaBoostRegressor(random_state=42),\n          'KNN 1': KNeighborsRegressor(n_neighbors=1),\n          'KNN 3': KNeighborsRegressor(n_neighbors=3),\n          'KNN 11': KNeighborsRegressor(n_neighbors=11),\n          'SVR': SVR(),\n          'Linear Regression': LinearRegression()}","8cd5bbb6":"# Criando a fun\u00e7\u00e3o para execu\u00e7\u00e3o dos modelos\ndef run_model(model, train, valid, feats, y_name):\n    model.fit(train[feats], train[y_name])\n    preds = model.predict(test[feats])\n    return accuracy_score(test[y_name], preds.round())","b948b152":"# Executando os modelos\nscores = []\nfor name, model in models.items():\n    score = run_model(model, train, test, feats, 'class_type')\n    scores.append(score)\n    print(name, ':', score) ","403c89fd":"# Apresentando as acur\u00e1cias dos modelos no gr\u00e1fico de barras\npd.Series(scores, index=models.keys()).sort_values(ascending=False).plot.barh()","1d334306":"# Rodando o modelo\nknn1 = KNeighborsRegressor(n_neighbors=1)\nknn1.fit(train[feats], train['class_type'])\npreds = knn1.predict(test[feats])\naccuracy_score(test['class_type'], preds.round())","43e8b50d":"# Submetendo os resultados\ntest['class_type'] = knn1.predict(test[feats]).astype(int)\ntest[['animal_name', 'class_type']].to_csv('submission.csv', index=False)","7cea8525":"# 5. Utilizando o Modelo KNeighborsRegressor para Predi\u00e7\u00e3o\nCom base na maior acur\u00e1cia apresentada nos testes dos modelos","e17f2192":"# 4. Testando os Modelos para Escolha do Modelo que Apresenta a Maior Acur\u00e1cia","3adefd0e":"# 3. Criando os Data Frames de Treino e Teste","9af5ac18":"# 2. Estat\u00edstica Descritiva","d71100d3":"# 1. An\u00e1lise Explorat\u00f3ria dos Dados","6dfb4ff0":"# Zoo Animal Classification\n**Alunos:** Fernando Bertolaccini, Gabriel Prado e Samara Viana\n\nEste notebbok cont\u00e9m as etapas enumeradas abaixo para analisar as caracter\u00edsticas dos animais do zool\u00f3gico e criar classifica\u00e7\u00f5es.\nOs dados est\u00e3o dispon\u00edveis em: https:\/\/www.kaggle.com\/uciml\/zoo-animal-classification\/data"}}