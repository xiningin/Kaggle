{"cell_type":{"3e0e03c3":"code","638a8d42":"code","b32a0ccf":"markdown","4ed1db9d":"markdown"},"source":{"3e0e03c3":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport folium # Leaflet-style map visulization wrapper\nimport folium.plugins as plugins\nfrom folium import LayerControl, Marker\n# below is a dictionary pointing to custom icons used for the map\niconDictionary = {'Mining and Quarrying':'https:\/\/imgur.com\/pUb5CPt.png', \n                  'Aluminum':'https:\/\/imgur.com\/AZQGbKM.png',\n                  'Metals (Except Aluminum and Iron and Steel)':'https:\/\/imgur.com\/e6pBQI1.png',\n                  'Oil sands':'https:\/\/imgur.com\/wOkjXtf.png',\n                  'Electricity':'https:\/\/imgur.com\/ayZUN3e.png',\n                  'Pulp and Paper':'https:\/\/imgur.com\/AyPVCqk.png',\n                  'Iron and Steel':'https:\/\/imgur.com\/EjsL5Kv.png',                  \n                  'Petroleum and Coal Product Refining and Mfg.':'https:\/\/imgur.com\/UZoRfYP.png',\n                  'Oil and gas extraction (excluding oil sands)':'https:\/\/imgur.com\/vxr0qSA.png',\n                  'Cement, Lime and Other Non-Metallic Minerals':'https:\/\/imgur.com\/gwcG4BF.png',\n                  'Wood Products':'https:\/\/imgur.com\/3y0py82.png',\n                  'Chemicals':'https:\/\/imgur.com\/CBmc6Gb.png',\n                  'Other Manufacturing':'https:\/\/imgur.com\/u1huqtV.png',\n                  'Other (Except Manufacturing)':'https:\/\/imgur.com\/EUOwhsW.png',\n                  'Oil and Gas Pipelines and Storage':'https:\/\/imgur.com\/ibq3l3I.png',\n                  'Water and Wastewater Systems':'https:\/\/imgur.com\/nikvIVt.png',\n                  'Transportation Equipment Mfg.':'https:\/\/imgur.com\/6eR7n3c.png',\n                  'Plastics and Rubber':'https:\/\/imgur.com\/i67kU2Z.png',\n                  'Waste Treatment and Disposal':'https:\/\/imgur.com\/in2LgdM.png'}\n\n\n\n#Read in the data as a pandas DataFrame rename a column and display the first three results to see structure\ndf = pd.read_csv(\"..\/input\/NationalPollutantReleaseInventory.csv\", encoding='latin1', index_col='Unnamed: 1')\ndf.rename(columns={'Unnamed: 0':'POLLUTANT_TYPE'}, inplace=True)\ndf[['POLLUTANT_TYPE','COMP_NAME','FACI_NAME','LATITUDE','LONGITUDE','NAICS4_NAME_EN','INTUITIVE_SECTOR_NAME_E','TOTAL_ALL_RELEASES']].head(3)","638a8d42":"#A function to create the mapobj to display\ndef marker_heatmap_create(data):\n    m = folium.Map([50, -100], zoom_start=4,tiles='stamentoner',world_copy_jump=True) #initializes the map object\n    feature_heat = folium.FeatureGroup(name='Heatmap')                                #Feature groups used so layers can be turned off\n    feature_group = plugins.MarkerCluster(name=\"Markers\")                             #This plugin clusters the markers to help rendering on low zoom levels\n    dataHeatmap = []\n    #The below loop goes through every row of the dataFrame and creates the data for the heatmap while also creating markers and adding as a child of feature_group\n    #dataHeatmap needs to be a list of lists with a lat, long and weight eg.[[lat1,long1,weight1],[lat2,long2,weight2]] if no weigth included does heatmap based on counts\n    for _, series in data.iterrows():\n        icon = folium.features.CustomIcon(iconDictionary[series['INTUITIVE_SECTOR_NAME_E']],icon_size=(16,16))\n        coordinates = []\n        coordinates.append([series['LATITUDE'],series['LONGITUDE'],series['TOTAL_ALL_RELEASES']])\n        dataHeatmap.extend(coordinates)\n        Marker(location=[series['LATITUDE'],series['LONGITUDE']],\n                   popup=str(series['COMP_NAME'])+'<br>'+str(series['FACI_NAME'])+'<br>'+'Pollutant Type:'+str(series['POLLUTANT_TYPE'])+'<br>'+str(series['NAICS6_NAME_EN'])+'<br>'+str(series['TOTAL_ALL_RELEASES'])+' '+str(series['UNITS']),\n                   icon=icon).add_to(feature_group)\n\n    plugins.HeatMap(dataHeatmap).add_to(feature_heat)#creates the heatmap layer           \n    feature_group.add_to(m)                          #adds marker cluster layer to map\n    feature_heat.add_to(m)                           #adds heatmap layer to map\n    LayerControl().add_to(m)                        #to control what layers are seen\n    return m\nmarker_heatmap_create(df)  #displays the map, may take a few seconds to load","b32a0ccf":"> ** National Pollutant Release Canada 2017**","4ed1db9d":"Using the folium module a map is generated using data of the National Pollutant Release Inventory of Canada. The base layer is a heatmap weighted based on number of tonnes released. Custom icons are added as markers based on sector name. Popup info when markers are clicked include the company name, facility name, pollutant type, industry and number of tonnes released. Currently the map will not display in Chrome but works with firefox"}}