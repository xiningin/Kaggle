{"cell_type":{"7c1e30de":"code","5a818af9":"code","e725b8b6":"code","0d9af6c9":"code","6eb7813e":"code","8d313379":"code","b905d905":"code","75f72ab4":"code","fa2d19dc":"code","377ad7fe":"code","e699736d":"code","96692def":"code","d4c31240":"code","69ff2f7c":"code","fbcd6ec1":"code","8d825c13":"code","3a9de732":"code","b256ce0c":"code","f6e02cbe":"code","fbc2a90c":"code","fa74850a":"code","f5ee1ed7":"code","2a33d474":"markdown","9f87856d":"markdown","e46476e8":"markdown","967da317":"markdown","06440e5b":"markdown","29d49b1b":"markdown","26430d61":"markdown","7baa1da2":"markdown","473df301":"markdown","025e6deb":"markdown","497413d0":"markdown","f0f6e648":"markdown","9fc330f2":"markdown","3f3cae9e":"markdown","95291da5":"markdown","8eeda2c6":"markdown","22952735":"markdown","d2e85ecb":"markdown","306ba903":"markdown","0fe786ae":"markdown"},"source":{"7c1e30de":"# data manipulation\nimport numpy as np\nimport pandas as pd\n\n# data visualization\nimport matplotlib.pyplot as plt\nplt.style.use('dark_background')\nimport seaborn as sns\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# text data\nfrom wordcloud import WordCloud, STOPWORDS , ImageColorGenerator\nimport re\nimport string\n\n# sentiment analysis\nfrom textblob import TextBlob\nfrom wordcloud import WordCloud","5a818af9":"df = pd.read_csv('..\/input\/reviewuniversalstudio\/universal_studio_branches.csv', encoding = 'UTF-8')\ndf.head()","e725b8b6":"df.isnull().sum()","0d9af6c9":"df.dtypes","6eb7813e":"df['written_date'] = pd.to_datetime(df['written_date'])\ndf.dtypes","8d313379":"df.nunique()","b905d905":"df['branch'].unique()","75f72ab4":"df['branch'] = df['branch'].astype('category')\ndf.dtypes","fa2d19dc":"df.shape","377ad7fe":"df.drop_duplicates(subset='review_text', inplace=True, keep='first')\ndf.shape","e699736d":"print (\"Number of Rows     :\" ,df.shape[0])\nprint (\"Number of Columns  :\" ,df.shape[1])\nprint (\"\\nFeatures         :\\n\" ,list(df.columns))\nprint (\"\\nMissing values   :\", df.isnull().sum().sum())\nprint (\"\\nUnique values    :\\n\",df.nunique())\nprint (\"\\nBranches Reviews :\\n\",df['branch'].value_counts())","96692def":"df['quarter'] = df['written_date'].dt.to_period('Q')\ndf.head()","d4c31240":"df['review_text'].values[4:5]","69ff2f7c":"def text_clean(text):\n    # case folding\n    text = text.lower()\n    \n    ## Decontract text            \n    # specific\n    text = re.sub(r\"won\\'t\", \"will not\", text)\n    text = re.sub(r\"can\\'t\", \"can not\", text)\n    text = re.sub(r\"won\\\u2019t\", \"will not\", text)\n    text = re.sub(r\"can\\\u2019t\", \"can not\", text)\n    text = re.sub(r\"\\'t've\", \" not have\", text)\n    text = re.sub(r\"\\'d've\", \" would have\", text)\n    text = re.sub(r\"\\'clock\", \"f the clock\", text)\n    text = re.sub(r\"\\'cause\", \" because\", text)\n    \n    # general\n    text = re.sub(r\"n\\'t\", \" not\", text)\n    text = re.sub(r\"\\'re\", \" are\", text)\n    text = re.sub(r\"\\'s\", \" is\", text)\n    text = re.sub(r\"\\'d\", \" would\", text)\n    text = re.sub(r\"\\'ll\", \" will\", text)\n    text = re.sub(r\"\\'t\", \" not\", text)\n    text = re.sub(r\"\\'ve\", \" have\", text)\n    text = re.sub(r\"\\'m\", \" am\", text)\n    text = re.sub(r\"n\\\u2019t\", \" not\", text)\n    text = re.sub(r\"\\\u2019re\", \" are\", text)\n    text = re.sub(r\"\\\u2019s\", \" is\", text)\n    text = re.sub(r\"\\\u2019d\", \" would\", text)\n    text = re.sub(r\"\\\u2019ll\", \" will\", text)\n    text = re.sub(r\"\\\u2019t\", \" not\", text)\n    text = re.sub(r\"\\\u2019ve\", \" have\", text)\n    text = re.sub(r\"\\\u2019m\", \" am\", text)\n    \n    # remove all puctuation\n    text = re.sub('\\[.*?\\]', '', text)\n    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)\n    # text = re.sub('\\w*\\d\\w*', '', text) #remove digit\/number\n    \n    # remove all special characters\n    text = re.sub(r'\\W', ' ', text)\n\n    # remove break\n    text = re.sub('[\u2018\u2019\u201c\u201d\u2026]', '', text)\n    text = re.sub('\\n', '', text)\n    \n    # remove prefixed 'b'\n    text = re.sub(r'^b\\s+', '', text)\n    \n    # substituting multiple spaces with single space\n    text = re.sub(r'\\s+', ' ', text, flags=re.I)\n    \n    return text","fbcd6ec1":"df_text = pd.DataFrame()\ndf_text['clean_review_text'] = df['review_text'].apply(lambda x: text_clean(x))","8d825c13":"df.loc[44,'review_text']","3a9de732":"df_text.loc[44,'clean_review_text']","b256ce0c":"def getSubjectivity(text):\n   return TextBlob(text).sentiment.subjectivity\n\ndef getPolarity(text):\n   return  TextBlob(text).sentiment.polarity","f6e02cbe":"df_text['subjectivity'] = df_text['clean_review_text'].apply(getSubjectivity)\ndf_text['polarity'] = df_text['clean_review_text'].apply(getPolarity)\ndef getsentiment(score):\n if score < 0:\n  return 'negative'\n elif score == 0:\n  return 'neutral'\n else:\n  return 'positive'\ndf_text['sentiment'] = df_text['polarity'].apply(getsentiment)\ndf_text.head()","fbc2a90c":"df_text['sentiment'].value_counts()","fa74850a":"df['sentiment'] = df_text['sentiment']\ndf['sentiment'] = df['rating'].apply(lambda x: 'negative' if x<3.0 else np.nan)\ndf['sentiment'] = df['sentiment'].fillna(df_text['sentiment'])\ndf.head()","f5ee1ed7":"df['sentiment'].value_counts()","2a33d474":"Beside, assume that rating below 3.0 is 'negative'","9f87856d":"### Get Sentiment Analysis Feature","e46476e8":"## 3. Feature Engineering","967da317":"Let's check before and after cleansing","06440e5b":"### Change Data Type","29d49b1b":"### Get Review Length Feature of `written_text`","26430d61":"create column subjectivity and polarity and sentiment analysis","7baa1da2":"## 1. Import Libraries","473df301":"### Data Summary","025e6deb":"**We have 50,904 rows and 6 columns.**<br><br>\nFor the further analysing the duplicate data, in this case is `review_text` indicate that they also contain the same information in other columns too. So wee need to drop the duplicate and keeping first.","497413d0":"## 2. Data Wrangling","f0f6e648":"Let's clean the `review_text` column first by define a function:","9fc330f2":"There is some bias in the data to Branches feature value counts aren't fairly distributed","3f3cae9e":"### Read Data","95291da5":"### Get Period Information of `written_date`","8eeda2c6":"Also we need to change `branch` into category data type","22952735":"### Removing Duplicates Data","d2e85ecb":"From the information above we should change data type of `written_date` into datetime64","306ba903":"**Sentiment Analysis**<br>\nDefine function to get the subjectivity and polarity of text","0fe786ae":"# Universal Studios Reviews - EDA"}}