{"cell_type":{"0cca3022":"code","d8afb6e2":"code","3f4fdaa0":"markdown","07988bab":"markdown","18a79f38":"markdown","9ab034dc":"markdown","6b4fda5b":"markdown","d43a1783":"markdown"},"source":{"0cca3022":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","d8afb6e2":"theBoard = {'top-L': ' ', 'top-M': ' ', 'top-R': ' ',\n            'mid-L': ' ', 'mid-M': ' ', 'mid-R' : ' ',\n            'low-L': ' ', 'low-M': ' ', 'low-R': ' ' }\ndef printBoard(board):\n    print(board['top-L'] + '|' + board['top-M'] + '|' + board['top-R'])\n    print('-+-+-')\n    print(board['mid-L'] + '|'+  board['mid-M'] + '|' + board['mid-R'])\n    print('-+-+-')\n    print(board['low-L'] + '|'+  board['low-M'] + '|' + board['low-R'])\nturn = \"X\"\nfor i in range(9):\n    printBoard(theBoard)\n    print('Turn for' + turn + '. Move on which space?')\n    move = input()\n    theBoard[move] = turn\n    if turn == 'X':\n        turn = '0'\n    else:\n        turn = \"X\"\nprintBoard(theBoard)","3f4fdaa0":"> * -->dictionary is a data structure that represents a tic-tac-toe board. Store this board-as-a-dictionary in a variable named theBoard. Open a new file editor window, and enter the following source code.","07988bab":">  *    **A Tic - Tac - Toe Board**","18a79f38":"**Conclusion**","9ab034dc":"   This isn\u2019t a complete tic-tac-toe game\u2014for example, it doesn\u2019t ever check whether a player has won. But it\u2019s enough to see how data structures can be used in program.","6b4fda5b":"**->You can use string values to represent what\u2019s in each slot on the board: 'X', 'O', or ' ' And  you\u2019ll need to store nine strings. You can use a dictionary of values for that. The string value with the key 'top-R' can represent the top-right corner, the string value with the key 'low-L' can represent the bottom-left corner, the string value with the key 'mid-M' can represent the middle, and so on. **","d43a1783":"**-> A Tic-Tac-toe looks like a large hash symbol(#). There are Total nine slots will be there in the Hash symbol and in hash contain an X, an O. To play the game.  **"}}