{"cell_type":{"47418476":"code","5b51e431":"code","adef5d48":"code","387c9ea7":"code","efc9fbaa":"code","4e40e82b":"code","f036c28b":"code","9b09159f":"code","ad0e8162":"code","3bb88d1f":"code","370ae0aa":"code","dd5bc8be":"code","c0d9d3d2":"code","aeff2610":"code","05d876ae":"code","b81812b3":"code","e03174d0":"code","84f54888":"code","a4e34657":"code","b4113013":"code","acbb7b28":"code","c537189d":"code","8bed656a":"markdown","e1e016bc":"markdown","e0d58888":"markdown","121190e4":"markdown","631f7ad1":"markdown","85fab53e":"markdown","7222f7f8":"markdown","a518c31d":"markdown","622de8ac":"markdown","fbcfef66":"markdown","59e0b7a7":"markdown","d3e41902":"markdown","0e2f113e":"markdown"},"source":{"47418476":"#Loading libs\nimport numpy as np \nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport shap\n\nimport lightgbm as lgb\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import KFold\n\nimport random\n\npd.set_option('display.max_rows', 500)\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","5b51e431":"SEED = 99\nrandom.seed(SEED)\nnp.random.seed(SEED)","adef5d48":"df = pd.read_excel('\/kaggle\/input\/covid19\/dataset.xlsx', sheet_name='All')","387c9ea7":"df.head()","efc9fbaa":"df.info()","4e40e82b":"df.isnull().sum()","f036c28b":"plt.figure()\nplt.title('Exam result', fontsize=14)\nsns.countplot('SARS-Cov-2 exam result',data=df)\nplt.show()","9b09159f":"df['SARS-Cov-2 exam result'] = df['SARS-Cov-2 exam result'].replace(['negative','positive'], [0,1])","ad0e8162":"corrmat = round(df.corr(method='pearson'),2)","3bb88d1f":"plt.figure(figsize=(12,6))\nsns.heatmap(corrmat.iloc[1:2,:25], vmax=1.0, vmin=-1.0, square=True, annot=True, cmap='RdYlBu')\nplt.show()","370ae0aa":"plt.figure(figsize=(12,6))\nsns.heatmap(corrmat.iloc[1:2,25:51], vmax=1.0, vmin=-1.0, square=True, annot=True, cmap='RdYlBu')\nplt.show()","dd5bc8be":"plt.figure(figsize=(12,6))\nsns.heatmap(corrmat.iloc[1:2,51:], vmax=1.0, vmin=-1.0, square=True, annot=True, cmap='RdYlBu')\nplt.show()","c0d9d3d2":"dfmodel = df.copy()\n\n# read the \"object\" columns and use labelEncoder to transform to numeric\nfor col in dfmodel.columns[dfmodel.dtypes == 'object']:\n    le = LabelEncoder()\n    dfmodel[col] = dfmodel[col].astype(str)\n    le.fit(dfmodel[col])\n    dfmodel[col] = le.transform(dfmodel[col])","aeff2610":"#change columns names to alphanumeric\ndfmodel.columns = [\"\".join (c if c.isalnum() else \"_\" for c in str(x)) for x in dfmodel.columns]","05d876ae":"X = dfmodel.drop(['SARS_Cov_2_exam_result','Patient_ID'], axis = 1)\ny = dfmodel['SARS_Cov_2_exam_result']","b81812b3":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.005,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':2500,\n                    'seed': SEED,\n                    'early_stopping_rounds':100, \n                }","e03174d0":"# choose the number of folds, and create a variable to store the auc values and the iteration values.\nK = 5\nfolds = KFold(K, shuffle = True, random_state = SEED)\nbest_scorecv= 0\nbest_iteration=0\n\n# Separate data in folds, create train and validation dataframes, train the model and cauculate the mean AUC.\nfor fold , (train_index,test_index) in enumerate(folds.split(X, y)):\n    print('Fold:',fold+1)\n          \n    X_traincv, X_testcv = X.iloc[train_index], X.iloc[test_index]\n    y_traincv, y_testcv = y.iloc[train_index], y.iloc[test_index]\n    \n    train_data = lgb.Dataset(X_traincv, y_traincv)\n    val_data   = lgb.Dataset(X_testcv, y_testcv)\n    \n    LGBM = lgb.train(lgb_params, train_data, valid_sets=[train_data,val_data], verbose_eval=250)\n    best_scorecv += LGBM.best_score['valid_1']['auc']\n    best_iteration += LGBM.best_iteration\n\nbest_scorecv \/= K\nbest_iteration \/= K\nprint('\\n Mean AUC score:', best_scorecv)\nprint('\\n Mean best iteration:', best_iteration)","84f54888":"lgb_params = {\n                    'objective':'binary',\n                    'metric':'auc',\n                    'n_jobs':-1,\n                    'learning_rate':0.05,\n                    'num_leaves': 20,\n                    'max_depth':-1,\n                    'subsample':0.9,\n                    'n_estimators':round(best_iteration),\n                    'seed': SEED,\n                    'early_stopping_rounds':None, \n                }\n\ntrain_data_final = lgb.Dataset(X, y)\nLGBM = lgb.train(lgb_params, train_data)","a4e34657":"print(LGBM)","b4113013":"# telling wich model to use\nexplainer = shap.TreeExplainer(LGBM)\n# Calculating the Shap values of X features\nshap_values = explainer.shap_values(X)","acbb7b28":"shap.summary_plot(shap_values[1], X, plot_type=\"bar\")","c537189d":"shap.summary_plot(shap_values[1], X)","8bed656a":"Making the results deterministic","e1e016bc":"Calculating correlation between exam result and variables","e0d58888":"checking number os nulls","121190e4":"#### Machine learning explainability","631f7ad1":"#### Loading the data","85fab53e":"#### Modeling","7222f7f8":"#### Exploratory analysis","a518c31d":"The variables with most positive or negative correlation with exam results is around 0.3\nthey are: (Arterial Fio2 [-0.31], pC02[-0,32], pO2[0,31], pH[0,31], ionized calcium[-0,31], leukocytes[-0,29], platelets[-0,28])\n","622de8ac":"Modify the hyperparameters to use the best iteration value and train the final model","fbcfef66":"There is a hight quantity of nulls","59e0b7a7":"Showing the correlation between the exam results and the variables","d3e41902":"#### Final model","0e2f113e":"Transform the target variable into numeric"}}