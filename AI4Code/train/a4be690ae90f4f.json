{"cell_type":{"8242c7e9":"code","6f83ea6d":"code","beb9c399":"code","37c97211":"code","69ea63ad":"code","5a19b877":"code","283a8d40":"code","f94ccd6c":"code","afa5db83":"code","10d26bde":"code","f7f2db47":"code","9a0e60fb":"code","8eb8d3ff":"code","377a3bac":"code","33b48f51":"code","f0716b72":"code","798f326b":"code","42973dc6":"code","6ff77298":"code","4d1fff5d":"code","9e1703a2":"code","20507bdd":"code","59f491ef":"code","6d61b15e":"code","6e9ed513":"code","e13fac45":"code","0edbcfd8":"code","43ddd112":"code","77577691":"code","b36c197f":"code","629f553f":"code","d0f86d68":"code","6bd736fa":"code","e334bfbd":"code","8194cdf7":"code","53d665e1":"code","b6bdf6f2":"code","641fbe38":"code","bc842f61":"code","ce46f0ac":"code","1e78767d":"code","4f52fcec":"code","071a9e50":"code","3b48a39f":"code","df97090d":"code","46c78db4":"code","02f9ea64":"code","07b15f2d":"code","43b2518e":"code","7b8a4b67":"code","1ae31a03":"code","9c006b12":"code","d912759c":"code","baf630fa":"code","f2252b8a":"code","8225b362":"code","848c93ee":"code","0fb3cbdc":"code","c24eeb94":"code","c388e18b":"code","58d3dec7":"code","3ee61068":"code","65b21cc6":"code","eb47bffb":"code","2d614db0":"code","8b8c6eff":"code","82930868":"code","609b523b":"code","725ad7fb":"code","9b0ff4ba":"code","5de3150c":"code","7ac38b78":"code","577090d5":"code","d48a9c99":"code","744ef1d2":"code","e2792d7e":"code","746ea36f":"code","c8a54221":"code","04ff432b":"code","8e558bce":"markdown","6c9e0085":"markdown","6b0d66c0":"markdown","b48fb964":"markdown","f1d77576":"markdown","c2aa452c":"markdown","13b677d3":"markdown","436c5514":"markdown","63ac3429":"markdown","6294191d":"markdown","3fded6d1":"markdown","ea44f967":"markdown","dbadd789":"markdown","8944edcb":"markdown","cbf2407b":"markdown","72573033":"markdown","94ba3b4a":"markdown","e58879ec":"markdown","e86ec143":"markdown","909072e7":"markdown","bc243e69":"markdown","60ccaab2":"markdown","0ad4bef3":"markdown","778f819d":"markdown","a382f733":"markdown","e080c285":"markdown","2c60e0cf":"markdown","7daf2b62":"markdown","b7ef091f":"markdown","9d463f6e":"markdown","461ac1e8":"markdown","eab7be6d":"markdown","ca9e50ce":"markdown","71efbf5d":"markdown","dc50e804":"markdown","fbd64d2c":"markdown","b72284a5":"markdown","cea54f0a":"markdown","8a34743c":"markdown","c2493333":"markdown","83f8bfe8":"markdown","1c255858":"markdown","7207ee76":"markdown","df867f2c":"markdown","d2570553":"markdown","67296487":"markdown","ac57fadb":"markdown","4548d8bd":"markdown","5803d7e9":"markdown","731790d3":"markdown","96445623":"markdown"},"source":{"8242c7e9":"import numpy as np\nimport pandas as pd\nimport seaborn as sb\nimport matplotlib.pyplot as plt\nsb.set()\n%matplotlib inline\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression , LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nlm = LinearRegression()\nlogmodel = LogisticRegression()","6f83ea6d":"# df = pd.read_csv('AviationData.csv', encoding = 'latin1')\ndf = pd.read_csv('..\/input\/aviation-accident-database-synopses\/AviationData.csv', sep=',', header=0, encoding = 'iso-8859-1')","beb9c399":"df.info()","37c97211":"df['Country'].value_counts().head()","69ea63ad":"df['Investigation.Type'].value_counts()","5a19b877":"df = df[df['Country']=='United States']","283a8d40":"df['Country'].value_counts()","f94ccd6c":"df = df[df['Investigation.Type']=='Accident']","afa5db83":"df['Investigation.Type'].value_counts()","10d26bde":"df.info()","f7f2db47":"df.drop(['Event.Id','Accident.Number','Airport.Code','Airport.Name','Location','Injury.Severity','Registration.Number','FAR.Description','Air.Carrier','Report.Status','Publication.Date','Number.of.Engines'],axis=1,inplace=True)","9a0e60fb":"sb.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='Blues')","8eb8d3ff":"df.drop(['Latitude','Longitude','Aircraft.Category','Schedule'],axis=1,inplace=True)","377a3bac":"# Cleaning of Data\ndf['Total.Fatal.Injuries'].fillna(0, inplace = True)\ndf['Total.Serious.Injuries'].fillna(0, inplace = True)\ndf['Total.Minor.Injuries'].fillna(0, inplace = True)\ndf['Total.Uninjured'].fillna(0, inplace = True)\ndf['Broad.Phase.of.Flight'].fillna('UNKNOWN',inplace = True)\ndf['Weather.Condition'].fillna('UNKNOWN',inplace = True)\ndf['Weather.Condition'].replace({'UNK':'UNKNOWN'},inplace=True)\ndf['Aircraft.Damage'].fillna('UNKNOWN',inplace=True)\ndf['Engine.Type'].fillna('UNKNOWN',inplace=True)\ndf['Purpose.of.Flight'].fillna('Other Work Use',inplace=True)\ndf['Amateur.Built'].fillna('No',inplace=True)","33b48f51":"sb.heatmap(df.isnull(),yticklabels=False,cbar=False,cmap='Blues')","f0716b72":"df['Total Injuries'] = df['Total.Fatal.Injuries'] + df['Total.Serious.Injuries'] + df['Total.Minor.Injuries']","798f326b":"df['Event.Date'] = pd.to_datetime(df['Event.Date'])\ndf['Year'] = df['Event.Date'].apply(lambda time : time.year)\ndf['Month']=df['Event.Date'].apply(lambda time:time.month)\n# Only want data after 1982\ndf = df[df['Year']>=1982]","42973dc6":"df.head()","6ff77298":"plt.figure(figsize=(20,8))\nsb.countplot(df['Year'],palette = 'coolwarm')","4d1fff5d":"plt.figure(figsize=(20,8))\nsb.countplot(df['Month'],palette='coolwarm')","9e1703a2":"accYear=pd.DataFrame(df.groupby(\"Year\").count())\naccYear=accYear.drop(columns=['Event.Date'])\naccYear=accYear.rename(columns={'Month':'Count'})\naccYear.head()\n\nX=[ [y] for y in accYear.index.values ]\ny=[[e] for e in accYear['Count']]\n\nlm.fit(X,y)","20507bdd":"accPredict_X=[[y] for y in range (1982, 2025)]\naccPredict=lm.predict(accPredict_X)\n\nf, axes = plt.subplots(1, 1, figsize=(15, 8))\nplt.plot(X,y)\nplt.plot(accPredict_X,accPredict, alpha = 0.5)\n\nprint(\"Accident prediction for the next 5 years:\\n\" )\nfor i in range (0,5):\n    year=2021+i\n    n=-5+i\n    print('Year %d: %d' % (year,accPredict[n]))","59f491ef":"by_year = df.groupby('Year').sum()","6d61b15e":"plt.figure(figsize=(12,6))\nby_year['Total Injuries'].plot(color='blue',fontsize=15,lw=3,markersize=10,marker='o',markerfacecolor='r')\nplt.xlabel('Year',fontsize=13)\nplt.ylabel('Total Injury Count',fontsize=13)","6e9ed513":"by_year[['Total.Fatal.Injuries','Total.Serious.Injuries','Total.Minor.Injuries']].plot(lw = 2, figsize=(12,6))\n# to move the legend outside of graph\nplt.legend(bbox_to_anchor = (1.05,1), loc=2, borderaxespad=0)","e13fac45":"plt.figure(figsize=(12,6))\nby_year['Total.Uninjured'].plot(color='blue', fontsize = 15,lw = 3,markersize=10,marker='o',markerfacecolor='r')\nplt.xlabel('Year',fontsize = 13)","0edbcfd8":"by_year_2 = by_year.reset_index()","43ddd112":"X = by_year_2[['Year']]\ny = np.asarray(by_year_2['Total.Fatal.Injuries'])\nlm.fit(X,y)","77577691":"injury_predict_X = [[y] for y in range (1982,2025)]\ninjury_predict = lm.predict(injury_predict_X)\n\nf,axes = plt.subplots(1,1,figsize = (16,8))\nplt.plot(X,y)\nplt.plot(injury_predict_X,injury_predict, alpha = 1.0)\n\nprint(\"Total Injuries Predictions for the next 5 years:\\n\" )\n\nfor i in range (0,5):\n    year=2021+i\n    n=-5+i\n    print('Year %d: %d' % (year,injury_predict[n]))","b36c197f":"X2 = by_year_2[['Year']]\ny2 = np.asarray(by_year_2['Total.Uninjured'])\nlm.fit(X2, y2)","629f553f":"injury_predict_X2 = [[y] for y in range (1982,2025)]\ninjury_predict2 = lm.predict(injury_predict_X2)\n\nf,axes = plt.subplots(1,1,figsize = (16,8))\nplt.plot(X2,y2)\nplt.plot(injury_predict_X2,injury_predict2, alpha = 1.0)\n\nprint(\"Total Uninjured Predictions for the next 5 years:\\n\" )\n\nfor i in range (0,5):\n    year=2021+i\n    n=-5+i\n    print('Year %d: %d' % (year,injury_predict2[n]))","d0f86d68":"by_phase = df.groupby('Broad.Phase.of.Flight').sum().reset_index()\nby_phase = by_phase.drop(['Year','Month'], axis=1)\nby_phase","6bd736fa":"plt.figure(figsize = (14,8))\nsb.barplot(x = 'Broad.Phase.of.Flight',y='Total Injuries' , data = by_phase.reset_index() , palette = 'coolwarm', ec = 'black')\nplt.title('Phase Of Flight ' , size = 20)\nplt.xlabel('')\nplt.ylabel('Total Injury Count', size = 20)\nplt.tight_layout()","e334bfbd":"yearPhase = df.groupby(by = ['Year','Broad.Phase.of.Flight']).sum()['Total Injuries'].unstack()\nyearPhase.head()","8194cdf7":"plt.figure(figsize = (20,10))\nsb.heatmap(yearPhase, cmap = 'Blues')\nplt.xlabel('')","53d665e1":"def other_phases(phase):\n    if phase in (['UNKNOWN','TAXI','DESCENT','CLIMB','GO-AROUND','STANDING']):\n        return 'OTHER'\n    else:\n        return phase","b6bdf6f2":"df['Phases'] = df['Broad.Phase.of.Flight'].apply(other_phases)","641fbe38":"plt.figure(figsize=(8,4))\nsb.countplot(df['Phases'], palette='coolwarm')","bc842f61":"df.groupby('Aircraft.Damage')['Phases'].value_counts()","ce46f0ac":"plt.figure(figsize=(12,6))\nsb.countplot(df['Aircraft.Damage'],hue=df['Phases'],palette='coolwarm')\nplt.legend(bbox_to_anchor = (1.05,1), loc=2, borderaxespad=0)","1e78767d":"plt.figure(figsize=(12,6))\nsb.countplot(df['Weather.Condition'],hue=df['Phases'],palette='coolwarm')\nplt.legend(bbox_to_anchor = (1.05,1), loc=2, borderaxespad=0)","4f52fcec":"rfc = RandomForestClassifier(n_estimators=300)","071a9e50":"df_phase = pd.get_dummies(df,columns=['Aircraft.Damage','Weather.Condition'],drop_first=True)","3b48a39f":"df_phase.columns","df97090d":"X = df_phase[['Aircraft.Damage_Minor', 'Aircraft.Damage_Substantial',\n       'Aircraft.Damage_UNKNOWN','Total Injuries','Total.Uninjured',\n       'Weather.Condition_UNKNOWN','Weather.Condition_VMC']]\n\ny = df_phase['Phases']","46c78db4":"X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.30)","02f9ea64":"rfc.fit(X_train,y_train)","07b15f2d":"predictions = rfc.predict(X_test)","43b2518e":"print(classification_report(y_test,predictions))","7b8a4b67":"print('Classification Accuracy: {:.3f}'.format(rfc.score(X_test,y_test)))","1ae31a03":"df['Purpose.of.Flight'].value_counts()","9c006b12":"def personal(purpose):\n    if purpose == 'Personal':\n        return 1\n    \n    else:\n        return 0","d912759c":"df['Personal Flight'] = df['Purpose.of.Flight'].apply(personal)","baf630fa":"sb.countplot(df['Personal Flight'])","f2252b8a":"sb.countplot(df['Personal Flight'], hue=df['Weather.Condition'])\nplt.legend(bbox_to_anchor = (1.05,1), loc=2, borderaxespad=0)","8225b362":"sb.countplot(df['Personal Flight'],hue=df['Aircraft.Damage'])\nplt.legend(bbox_to_anchor = (1.05,1), loc=2, borderaxespad=0)","848c93ee":"plt.figure(figsize=(12,8))\nsb.countplot(df['Personal Flight'],hue=df['Broad.Phase.of.Flight'],palette='coolwarm')\nplt.legend(bbox_to_anchor = (1.05,1), loc=2, borderaxespad=0)","0fb3cbdc":"plt.figure(figsize=(18,10))\nsb.countplot(df['Personal Flight'],hue=df['Engine.Type'],palette = 'coolwarm')\nplt.legend(bbox_to_anchor = (1.05,1), loc=2, borderaxespad=0)","c24eeb94":"df_new = df[df['Total Injuries']>=1]\ndf_new = df_new[df_new['Total.Uninjured']>=1]","c388e18b":"f,axes = plt.subplots(2,1,figsize=(18,8))\nsb.boxplot(x='Total Injuries',y='Personal Flight',data=df_new,orient ='h',ax=axes[0])\nsb.boxplot(x='Total.Uninjured',y='Personal Flight',data=df_new,orient='h',ax=axes[1])","58d3dec7":"df_new = pd.get_dummies(df_new,columns=['Engine.Type'],drop_first=True)","3ee61068":"df_new.columns","65b21cc6":"df_new = df_new[['Personal Flight','Engine.Type_Reciprocating',\n       'Engine.Type_Turbo Fan', 'Engine.Type_Turbo Jet',\n       'Engine.Type_Turbo Prop', 'Engine.Type_Turbo Shaft',\n       'Engine.Type_UNKNOWN', 'Engine.Type_Unknown','Total Injuries','Total.Uninjured']]","eb47bffb":"df_new.head(2)","2d614db0":"X = df_new.drop('Personal Flight',axis=1)\ny = df_new['Personal Flight']","8b8c6eff":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.30)","82930868":"logmodel.fit(X_train,y_train)","609b523b":"predictions = logmodel.predict(X_test)","725ad7fb":"print(classification_report(y_test,predictions))","9b0ff4ba":"print(confusion_matrix(y_test,predictions))","5de3150c":"print('Classification Accuracy: {:.3f}'.format(logmodel.score(X_test,y_test)))","7ac38b78":"df.columns","577090d5":"df['Make'].value_counts().head(30)","d48a9c99":"def get_company(company):\n    \n    if company in ['Cessna','Piper','Beech']:\n        \n        return company.upper()\n    \n    else:\n        \n        if company in ['CESSNA','PIPER','BEECH']:\n            \n            return company\n        \n        else:\n            \n            return 'OTHER'\n","744ef1d2":"df['Make'].apply(get_company).value_counts()","e2792d7e":"df_selected = df[df['Make'].isin(['CESSNA','PIPER','BEECH'])]","746ea36f":"plt.figure(figsize=(12,6))\nsb.countplot(df_selected['Make'],hue=df['Phases'],palette='coolwarm')\nplt.legend(bbox_to_anchor = (1.05,1), loc=2, borderaxespad=0)","c8a54221":"plt.figure(figsize=(12,6))\nsb.countplot(df_selected['Make'],hue=df['Aircraft.Damage'],palette='coolwarm')\nplt.legend(bbox_to_anchor = (1.05,1), loc=2, borderaxespad=0)","04ff432b":"f,axes = plt.subplots(3,1,figsize=(18,12))\nsb.boxplot(x='Total Injuries',y='Make',data=df_selected,orient ='h',ax=axes[0])\nsb.boxplot(x='Total.Uninjured',y='Make',data=df_selected,orient='h',ax=axes[1])\nsb.countplot(df_selected['Make'])","8e558bce":"**3.2 Time Based Linear Regression** ","6c9e0085":"**3.1 Exploratory Analysis**","6b0d66c0":"- Initial Dropping Data that is not very useful in our analysis","b48fb964":"**4.1 Exploratory Analysis**","f1d77576":"**Comparing Personal Flights with Engine Type**","c2aa452c":"**Company and Number of Injuries\/Non Injuries**","13b677d3":"# 6. Purpose of Flight Analysis","436c5514":"- Since Personal Flights hold more than 50% of the counts, we shall categorise it into Personal and Non Personal Flights to compare.","63ac3429":"**Company and State of Aircraft after accident**","6294191d":"# 5. Phase of Flight Analysis","3fded6d1":"- As seen from the heatmap, we can observe that during 'Takeoff', it is still very prone to accidents with substantial amount of injury count.","ea44f967":"**Comparing Personal Flights & Phase**","dbadd789":"##### Total Injury Count Over the Years","8944edcb":"#### Linear Regression for Total Injury Count","cbf2407b":"**6.2 Logistic Regression to Predict if flight is Personal**","72573033":"- We will focus the analysis on the top 3 companies with highest accident count.","94ba3b4a":"- Surprisingly, the trend is also going downward for Uninjured Personnel from 2017 onwards","e58879ec":"**Comparing Personal Flights & Aircraft Damage**","e86ec143":"# Aviation Accident Analysis","909072e7":"- Accident Counts are on a downward trend","bc243e69":"**6.1 Exploratory Analysis**","60ccaab2":"**5.1 Exploratory Analysis**","0ad4bef3":"- Judging from the Phase of Flight where accident occured, it seems like personal flight has more 'Cruising' Accidents and lesser 'Maneuvering' Accidents.","778f819d":"- From the above boxplot, we can see that for personal flights, there are much lesser outliars.","a382f733":"- Since the common few are Landing, Takeoff, Cruise, Maneuvering and Approach. We will classify the rest as others.","e080c285":"# 1. Cleaning of Data Set","2c60e0cf":"**Linear Regression for Uninjured Count**","7daf2b62":"- Most Accidents occur between June and August","b7ef091f":"- According to the heatmap, it seems that Latitude, Longitude, Aircraft Category and Schedule has way too many missing data to be used. ","9d463f6e":"- Predictors: Total Injuries, Total Uninjured, Engine Type","461ac1e8":"- It seems both Personal and Non Personal Flights, most accidents occured at VMC Weather Condition","eab7be6d":"I am still new to Kaggle and Data Science. However this dataset is one of my school projects. It has been fun learning from this dataset.","ca9e50ce":"# 4. Total Injury Count Over The Years (Time Based Analysis)","71efbf5d":"##### Uninjured Count Over the Years","dc50e804":"# 2. Adding New Columns to Data Set for Analysis","fbd64d2c":"- Predictors: Weather Condition, Aircraft Damage, Injuries, Non Injuries","b72284a5":"- It appears that the data is more dominant towards USA. (since its from NTSB) We will narrow down the data set to only USA.\n- Since our analysis is on accidents, we will narrow it to purely Accidents in the dataset.","cea54f0a":"**Comparing Injuries with Flight Purpose**","8a34743c":"##### Different Kind of Injuries Count Over the Years","c2493333":"# 7. Aircraft Manufacturer Analysis","83f8bfe8":"- Most Accident and Injuries Sustained occured during TAKEOFF, CRUISE, MANEUVERING","1c255858":"- It seems like Non Personal Flight Purpose has more variety in engines.","7207ee76":"**4.2 Time Based Linear Regression**","df867f2c":"##### Accident Trend Over the Years","d2570553":"**Comparing Personal Flights & Weather Conditions**","67296487":"##### Accident Trend by Month","ac57fadb":"**5.2 RandomForest to predict Phase of Flight**","4548d8bd":"- For both Personal and Non Personal Flights, most aircraft suffered Substantial Damage. It is worth noting that Personal Flight Aircrafts are either 'Destroyed' or 'Substantial' damaged.","5803d7e9":"- Based on the two graphs above, we can see that Injury Count is on a downward trend for all kinds of injuries.","731790d3":"**Company and Phase of Accident**","96445623":"# 3. Accident Over The Years (Time Based Analysis)"}}