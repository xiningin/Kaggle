{"cell_type":{"15acd452":"code","2b311502":"code","5063f71d":"code","4138ad77":"code","0d251740":"code","4b048828":"code","39b918b2":"code","f5a24b1f":"code","e28ec415":"code","99dde773":"code","fdc2b25f":"code","91812fb8":"code","8509f4b0":"code","1bbf6c43":"code","f3b2467e":"code","738643e9":"code","205e2011":"code","20ceecf2":"code","aeaf5555":"code","7b8ad0bf":"code","f2eef9e7":"code","6448b2ab":"code","9f42e367":"code","040cfe65":"code","44fcf105":"code","9db6f987":"code","d0ff3371":"code","66d03277":"code","9124182e":"code","e90eadb0":"code","b51da166":"code","33d4ae50":"code","81635a8f":"code","b81c1157":"code","7137c37c":"code","f59f0a0b":"code","907431d1":"code","4a21823b":"code","35675b41":"code","429159c1":"code","e9692fe0":"code","807aa2d0":"code","6a94112d":"code","b1f2b618":"code","d286d183":"code","f807b3ba":"code","d9e4a798":"code","87a9d8db":"code","a68b08f1":"code","92cfaba7":"code","179cfb25":"code","60417157":"code","f8cec131":"code","046d0b73":"code","1c45155b":"code","777d44fa":"code","174fb70b":"code","bd3fe6a5":"code","9c933b52":"markdown","eae5766e":"markdown","d43fb8e2":"markdown","4bb0648f":"markdown","cbd67344":"markdown","009100f5":"markdown","ea63a977":"markdown","8cfb602e":"markdown","a68ae742":"markdown","e49ac9a9":"markdown","26498afa":"markdown","bdcdece5":"markdown","038882d3":"markdown","1ee63f43":"markdown","9298b561":"markdown","29605759":"markdown","43c1bfbe":"markdown","48c60f55":"markdown","cb2206ef":"markdown","f76ea0f8":"markdown"},"source":{"15acd452":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","2b311502":"#Modules for EDA\nimport numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nplt.style.use(\"seaborn\")\n%matplotlib inline","5063f71d":"#Machine learning packages\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.model_selection import train_test_split, cross_val_score,GridSearchCV\nfrom sklearn.linear_model import LinearRegression,Ridge,Lasso\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_squared_error,r2_score\nimport joblib","4138ad77":"df = pd.read_csv('..\/input\/used-bikes-prices-in-india\/Used_Bikes.csv')\ndf.shape","0d251740":"df.info()","4b048828":"df.isna().sum()","39b918b2":"df.head()","f5a24b1f":"df.drop('bike_name',axis=1,inplace=True)","e28ec415":"df['brand'].value_counts()","99dde773":"brands = df['brand'].value_counts()\nbike_brands_less_than_100 = brands[brands<=1000]\nbike_brands_less_than_100","fdc2b25f":"print(\"Other brands total\",sum(bike_brands_less_than_100))","91812fb8":"others = bike_brands_less_than_100.keys()\nothers","8509f4b0":"df['brand'].replace(others,\"Others\",inplace=True)\ndf['brand'].value_counts().plot(kind=\"barh\")\nplt.gca().invert_yaxis()\nplt.show()","1bbf6c43":"bike_groups = df.groupby('brand')","f3b2467e":"def get_average_plot_data(col,scale=None):\n    brands = df['brand'].unique()\n    avgs = []\n    for brand in brands:\n        average = bike_groups.get_group(brand)[col].mean()\n        avgs.append(average)\n    df1 = pd.DataFrame({\"Brand\":brands,f\"Average {col}\":avgs})\n    \n    x = df1[df1.columns[1]]\n    y = df1[df1.columns[0]]\n    sns.barplot(data=df1,x=x,y=y)\n    plt.title(f\"Average {col} of various brands\")\n    if scale:\n        plt.xscale(scale)\n    plt.show()","738643e9":"get_average_plot_data('age')","205e2011":"get_average_plot_data('price','symlog')","20ceecf2":"get_average_plot_data('kms_driven')","aeaf5555":"get_average_plot_data('power')","7b8ad0bf":"cols_to_plot = ['brand', 'price', 'kms_driven', 'age', 'power']\nplt.figure(figsize=(10,10))\nsns.pairplot(df[cols_to_plot], hue='brand')\nplt.show()","f2eef9e7":"df['city'].value_counts()","6448b2ab":"city_counts = df['city'].value_counts()\ncity_counts[city_counts>=500]","9f42e367":"other_cities = city_counts[city_counts<500]\ndf['city'].replace(other_cities.keys(),'Others',inplace=True)","040cfe65":"plt.figure(figsize=(10,10))\ndf['city'].value_counts().plot(kind='barh')\nplt.gca().invert_yaxis()\nplt.show()","44fcf105":"df.head()","9db6f987":"df['owner'].value_counts()","d0ff3371":"df['owner'].replace(['Second Owner','Third Owner','Fourth Owner Or More'],'Second Owner or more',inplace=True)\ndf['owner'].value_counts()","66d03277":"cols_to_encode = ['brand', 'city', 'owner']\ndummies = pd.get_dummies(df[cols_to_encode],drop_first=True)\ndummies.sample(10)","9124182e":"cols_to_scale = ['kms_driven', 'age', 'power']\nscale = MinMaxScaler()\nscalled = scale.fit_transform(df[cols_to_scale])","e90eadb0":"i = 0\nfor col in cols_to_scale:\n    df[col] = scalled[:,i]\n    i += 1","b51da166":"df.head()","33d4ae50":"df.drop(cols_to_encode,axis=1,inplace=True)\ndf.head()","81635a8f":"new_df = pd.concat([dummies,df],axis=1)\nnew_df.shape","b81c1157":"new_df.head()","7137c37c":"sum(new_df.isna().sum())","f59f0a0b":"x ,y = new_df.drop(['price'],axis=1), new_df['price']\nx.shape, y.shape","907431d1":"y.head()","4a21823b":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3)","35675b41":"x_train.shape, x_test.shape","429159c1":"y_train.shape, y_test.shape","e9692fe0":"model = LinearRegression()\nmodel.fit(x_train, y_train)","807aa2d0":"model.score(x_test,y_test)","6a94112d":"model.score(x_train,y_train)","b1f2b618":"models = [LinearRegression(), Ridge(), Lasso(), KNeighborsRegressor()]","d286d183":"mean_scores = []\nfor model in models:\n    print(\"Model:\",model)\n    cv_scores = cross_val_score(model, x, y, cv=5)\n    print(\"Cross Val Scores:\",cv_scores)\n    print(\"Mean score:\", cv_scores.mean())\n    mean_scores.append(cv_scores.mean())\n    print('\\n')","f807b3ba":"mds = []\nfor i in range(len(models)):\n    mds.append(str(models[i]))\nmds","d9e4a798":"mean_df = pd.DataFrame({'Model':mds, 'Mean CVScore':mean_scores})\nsns.barplot(data=mean_df,y='Model', x='Mean CVScore')\nplt.show()","87a9d8db":"svm_model = SVR()\nsvm_model.fit(x_train,y_train)\nsvm_model.score(x_test,y_test)","a68b08f1":"model = LinearRegression()\nmodel.fit(x_train, y_train)\ny_pred_test = model.predict(x_test)\nmean_squared_error(y_test, y_pred_test)","92cfaba7":"def actual_vs_predicted(model,data,y_true,title=None):\n    pred = model.predict(data)\n    apdf = pd.DataFrame({'Actual':y_true, 'Predicted':np.round(pred)})\n    plt.figure(figsize=(10, 10))\n    sns.scatterplot(data=apdf, x='Actual', y='Predicted') \n    plt.title(title)\n    plt.show()","179cfb25":"actual_vs_predicted(model,x_test,y_test,'Linear Regression Test Data')","60417157":"rfr_model = RandomForestRegressor()\nrfr_model.fit(x_train, y_train)","f8cec131":"rfr_model.score(x_test, y_test)","046d0b73":"rfr_model.score(x_train, y_train)","1c45155b":"actual_vs_predicted(rfr_model,x_test, y_test, \"RandomForestRegressor Test data\")","777d44fa":"actual_vs_predicted(rfr_model,x_train, y_train, \"RandomForestRegressor Train data\")","174fb70b":"joblib.dump(rfr_model, 'RFR-Model')","bd3fe6a5":"!ls","9c933b52":"# **Model Building and predictions**","eae5766e":"# **Let's use RandomForestRegressor**","d43fb8e2":"# **Setting cities to others where city frequency is < 500**","4bb0648f":"# **City Counts**","cbd67344":"# **Cross Validation scores**","009100f5":"# **Feature Engineering**","ea63a977":"## **Feature Scaling** ","8cfb602e":"# **Average price of each bike brand**","a68ae742":"## **One Hot encoding**","e49ac9a9":"# **Replacing Bike brands to others which are less than 1000**","26498afa":"# **Pair Plot**","bdcdece5":"# **Average age of each bike brand**","038882d3":"# **That's a descent score**","1ee63f43":"# **Saving RandomForestRegressor model as file**","9298b561":"# **Let's Figure Out unique bike brands**","29605759":"# **Average KMs driven of each bike brand**","43c1bfbe":"# **Actual vs Predicted**","48c60f55":"# **Average power of each bike brand**","cb2206ef":"# **Popular cities**","f76ea0f8":"# **Splitting and Training data**"}}