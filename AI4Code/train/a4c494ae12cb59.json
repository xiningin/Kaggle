{"cell_type":{"db440caa":"code","23cac423":"code","110a62ca":"code","e882aa8a":"code","d295e52d":"code","ce7641a9":"code","66e9f9f0":"code","af315648":"code","54fb3c48":"code","d4cefc24":"code","5651118b":"code","6247d4fa":"code","af107bc2":"code","4ad9fdc7":"code","f50356e8":"code","faaba1d8":"code","78764cfb":"code","a5ed3f66":"code","1b335eb1":"code","242da03e":"code","255790fd":"code","d42512d3":"code","b756f30f":"code","ae030d43":"code","a862ca40":"code","09fe1990":"code","a39f716a":"code","525af201":"markdown","32ac80f6":"markdown","8bff87a3":"markdown","50a33bd7":"markdown","de5d2f45":"markdown","829e549b":"markdown","1fc23ec4":"markdown","901d7d91":"markdown","67f189dd":"markdown","40609d33":"markdown","853d13f1":"markdown"},"source":{"db440caa":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nimport plotly.express as px\nfrom sklearn.preprocessing import LabelEncoder","23cac423":"import warnings\nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","110a62ca":"data = pd.read_csv(\"\/kaggle\/input\/pizza-price-prediction\/pizza_v2.csv\")","e882aa8a":"data.head()","d295e52d":"data.info()","ce7641a9":"data['price_rupiah'] = data['price_rupiah'].str.replace('Rp', '').str.replace(',', '').astype('float64') # Removing Rp \ndata['diameter'] = data['diameter'].str.replace('inch', '').str.replace(',', '').astype('float64') # Removing Inch\n#Checking\ndata.loc[:, ['price_rupiah', 'diameter']]","66e9f9f0":"data.isnull().sum().sort_values(ascending=True)","af315648":"#checking\ndata.head()","54fb3c48":"columns = ['company', 'topping', 'variant', 'size', 'extra_sauce', 'extra_cheese', 'extra_mushrooms']\n\nle_list = {}\n\nfor column in columns:\n    encoder = LabelEncoder()\n    le_list[column] = encoder\n    data[column] = encoder.fit_transform(data[column])\n\ndata.head()","d4cefc24":"plt.figure(figsize=(9, 6))\nsns.heatmap(data.corr(),cmap= \"vlag\", annot=True)\nplt.show()","5651118b":"sns.barplot(x = 'company', y = 'price_rupiah', data = data,  saturation=0.90)","6247d4fa":"fig =  px.pie (data, names = \"size\", hole = 0.4, template = \"gridon\")\nfig.show()","af107bc2":"fig = px.pie (data, names = \"company\", hole = 0.4, template = \"gridon\")\nfig.show ()","4ad9fdc7":"fig =  px.pie (data, names = \"variant\", hole = 0.4, template = \"gridon\")\nfig.show ()","f50356e8":"fig = px.pie (data, names = \"topping\", hole = 0.4, template = \"gridon\")\nfig.show()","faaba1d8":"fig = px.pie (data, names = \"extra_cheese\", hole = 0.4, template = \"gridon\")\nfig.show()","78764cfb":"fig = px.pie (data, names = \"extra_mushrooms\", hole = 0.4, template = \"gridon\")\nfig.show()","a5ed3f66":"fig = px.pie (data, names = \"extra_sauce\", hole = 0.4, template = \"gridon\")\nfig.show()","1b335eb1":"data.columns","242da03e":"y = data[\"price_rupiah\"]\nx = data.drop(\"price_rupiah\",axis = 1)","255790fd":"# Splitting the dataset into train and test datasets\n# 80% Train Data + 20% Test Data\n\nfrom sklearn.model_selection import train_test_split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 12)","d42512d3":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score,mean_squared_error, mean_absolute_error","b756f30f":"from xgboost import XGBRegressor\nfrom sklearn.metrics import mean_absolute_error\nimport sklearn.metrics as metrics\n\n# Define the model\nmodel = XGBRegressor(n_estimators=1000, learning_rate=0.09) \n\n# Fit the model\nmodel.fit(x_train, y_train) \n\n# Get predictions\npredictions = model.predict(x_test) \n\nprint('Testing R2 Score: ', r2_score(y_test, predictions)*100)\nprint('Testing RMSE: ', np.sqrt(mean_squared_error(y_test, predictions)))\nprint('Testing MAE: ', mean_absolute_error(y_test, predictions))\nprint('Testing MSE: ', mean_squared_error(y_test, predictions))","ae030d43":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import r2_score,mean_squared_error, mean_absolute_error","a862ca40":"model_dt = DecisionTreeRegressor(random_state=12)\nmodel_dt.fit(x_train,y_train)\npred_dt = model_dt.predict(x_test)\nprint('Testing R2 Score: ', r2_score(y_test, pred_dt)*100)\nprint('Testing RMSE: ', np.sqrt(mean_squared_error(y_test, pred_dt)))\nprint('Testing MAE: ', mean_absolute_error(y_test, pred_dt))\nprint('Testing MSE: ', mean_squared_error(y_test, pred_dt))","09fe1990":"from sklearn.ensemble import  RandomForestRegressor\n\nmodel_rf= RandomForestRegressor(n_estimators=100)\nmodel_rf.fit(x_train, y_train)\npred_rf= model_rf.predict(x_test)","a39f716a":"model_rf = RandomForestRegressor(random_state=42)\nmodel_rf.fit(x_train, y_train)\npred_rf = model_rf.predict(x_test)\nprint('Testing R2 Score: ', r2_score(y_test, pred_rf)*100)\nprint('Testing RMSE: ', np.sqrt(mean_squared_error(y_test, pred_rf)))\nprint('Testing MAE: ', mean_absolute_error(y_test, pred_rf))\nprint('Testing MSE: ', mean_squared_error(y_test, pred_rf))","525af201":"# READING DATA","32ac80f6":"# SPLITTING THE DATASET INTO TRAIN AND TEST DATA","8bff87a3":"Models:\n- Decision tree\n- RandomForest\n- XGBoost","50a33bd7":"# EDA","de5d2f45":"we have no null values","829e549b":"2.Decision Tree Regressor","1fc23ec4":"3.Random forest regressor","901d7d91":"# preprocessing","67f189dd":"# Modeling","40609d33":"Data Correlation","853d13f1":"1.xgboost"}}