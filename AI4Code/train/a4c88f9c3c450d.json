{"cell_type":{"e52ac31e":"code","6ed3fa03":"code","5e7f5559":"code","146ef10c":"code","7b176514":"code","1fe4ca41":"code","54cc6978":"code","4a0a2bb1":"code","d81e7d08":"code","39fadc03":"code","dd76da37":"code","5056373f":"code","92f562e7":"code","dda2968c":"code","8eeed654":"code","c32a2434":"code","fc3e6183":"code","4c8eb1a0":"code","7d0b1fd2":"code","05adc54d":"code","bcd82ddb":"code","79c7b454":"code","bd16e0a8":"code","8c594744":"code","e70f5e3d":"code","d4eddb12":"code","2da3fce7":"code","d3177028":"code","16a63a1d":"code","fd1ef899":"code","e2c9686d":"code","c3e149b0":"code","98b4f81c":"code","cff7c05c":"code","005f6de3":"code","35ed166a":"code","b41c56d9":"markdown","79684a27":"markdown","192619cd":"markdown","e9121e5f":"markdown","d17a0b39":"markdown","68dcbfd8":"markdown","fa78ef2e":"markdown","06e11e64":"markdown","b543556d":"markdown","b83354fe":"markdown","ef6ee249":"markdown"},"source":{"e52ac31e":"%matplotlib inline","6ed3fa03":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# machine learning\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier","5e7f5559":"movies=pd.read_csv('..\/input\/movies-data\/movies_metadata.csv')\nratings=pd.read_csv('..\/input\/movies-data\/ratings_small.csv')","146ef10c":"movies.head(2)","7b176514":"ratings.head()","1fe4ca41":"movies.info()","54cc6978":"movies.budget =pd.to_numeric(movies.budget, errors='coerce')","4a0a2bb1":"movies.describe()","d81e7d08":"# Exploring the languages of the movies\npd.unique(movies['original_language'])","39fadc03":"movies = movies[['id', 'original_title', 'original_language','vote_average','vote_count','adult','budget','revenue','runtime','status']]\nmovies = movies.rename(columns={'id':'movieId'})","dd76da37":"mean_budget = movies['budget'].mean(skipna=True)\nprint (mean_budget)","5056373f":"movies['budget']=movies.budget.mask(movies.budget == 0,mean_budget)","92f562e7":"mean_revenue = movies['revenue'].mean(skipna=True)\nprint (mean_revenue)","dda2968c":"movies['revenue']=movies.revenue.mask(movies.revenue == 0,mean_revenue)","8eeed654":"# Filtering English movie only\nmovies = movies[movies['original_language']== 'en'] \nmovies.head()","c32a2434":"movies.dtypes\nratings.dtypes\nmovies.movieId =pd.to_numeric(movies.movieId, errors='coerce')\nratings.movieId = pd.to_numeric(ratings.movieId, errors= 'coerce')","fc3e6183":"#creating a single dataframe merging the movie_data and ratings_data\ndf= pd.merge(ratings, movies, on='movieId', how='inner')\ndf.head()","4c8eb1a0":"df.info()","7d0b1fd2":"df.isnull().sum() # or df.isna.sum()","05adc54d":"df['status'].fillna(df['status'].mode()[0], inplace=True)","bcd82ddb":"df['runtime'].fillna(df['runtime'].mode()[0], inplace=True)","79c7b454":"df.isnull().sum()","bd16e0a8":"df.describe()","8c594744":"ratings = pd.DataFrame(df.groupby('original_title')['rating'].mean().sort_values(ascending=False))\nratings.head(20)","e70f5e3d":"ratings['number_of_ratings'] = df.groupby('original_title')['rating'].count()\nratings.head()","d4eddb12":"import matplotlib.pyplot as plt\n#%matplotlib inline\nratings['rating'].hist(bins=50)\nplt.title('Histogram');\nplt.xlabel('Rating')\nplt.ylabel('Number of movies')","2da3fce7":"ratings['number_of_ratings'].hist(bins=100)\nplt.title('Histogram');\nplt.xlabel('Number of ratings')\nplt.ylabel('Number of movies')","d3177028":"import seaborn as sns\nsns.jointplot(x='rating', y='number_of_ratings', data=ratings)","16a63a1d":"features=list(set(df.columns)-set(['rating'])-set(['original_language'])-set(['original_title'])) \nfeatures\n\nX1=df[features]\nX= pd.get_dummies(X1)\nX.astype(np.float64)\ny=df['rating'].astype(np.int64)\nX.head()","fd1ef899":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=4)\ny_train.shape","e2c9686d":"# Data scaling\nscaler = StandardScaler()\n\n# Fit on training set only.\nscaler.fit(X_train)\n\n# Apply transform to both the training set and the test set.\nX_train = scaler.transform(X_train)\n\nX_test = scaler.transform(X_test)","c3e149b0":"# Random Forest\n\nrandom_forest = RandomForestClassifier(n_estimators=100)\nrandom_forest.fit(X_train, y_train)\nY_pred = random_forest.predict(X_test)\nrandom_forest.score(X_train, y_train)\nacc_random_forest = round(random_forest.score(X_train, y_train) * 100, 2)\nacc_random_forest","98b4f81c":"acc_random_forest_test = round(random_forest.score(X_test, y_test) * 100, 2)\nacc_random_forest_test","cff7c05c":"Y_pred","005f6de3":"def MovieRecommender(df, MovieName, No_of_recommendation):\n    movie_matrix = df.pivot_table(index='userId', columns='original_title', values='rating').fillna(0)\n    movie_matrix.head(10)\n    movie_user_rating = movie_matrix[MovieName]\n    similar_to_movie=movie_matrix.corrwith(movie_user_rating)\n    corr = pd.DataFrame(similar_to_movie, columns=['Correlation'])\n    corr.dropna(inplace=True)\n    corr = corr.join(ratings['number_of_ratings'])\n    c=corr[corr['number_of_ratings'] > 50].sort_values(by='Correlation', ascending=False).head(No_of_recommendation)\n    print(c)\n    return c","35ed166a":"c=MovieRecommender(df, MovieName='The Million Dollar Hotel', No_of_recommendation=5)","b41c56d9":"## Importing important packages and libraries","79684a27":"## Data desciption\n\n**adult:** Give the adult rating to the movie\n\n**belong_to_collection:** The parent directory of the movie\n\n**budget:** The budget for the movie\n\n**genres:** The denote a style or category of art, music, or literature like animation, adventure, etc.\n\n**homepage:** The web address for the movie\n\n**id:** The idebtification number for a movie\n\n**imdb_id:** The identification number given by imdb\n\n**original_language:** The language of the movie\n\n**original_title:** The name of the movie\n\n**overview:** Some explanation of the movie\n\n**release_date:** The date of the release of the movie\n\n**revenue:** The revenue genrated by the movie\n\n**runtime:** The total time of the movie\n\n**status:** The status of the movie whether released or not\n\n**tagline:** The tagline of the movie","192619cd":"---\n## Loading dataset\n\nLoading the movies and rating data set","e9121e5f":"# End of case study","d17a0b39":"# Movie rating prediction and recommendation\n\nIn this tutorial we are going to introduce about recommender system. Primarily, we will build a recommender system here. ","68dcbfd8":"## Data overview","fa78ef2e":"---\n## Dataset Preparation\n\nNow we will prepare the data for building our model for movie rating prediction","06e11e64":"## What is recommender system\nA recommender system is a simple machine learning algorithm whose aim is to provide the most relevant information to a user by discovering patterns in a dataset. The algorithm rates the items and shows the user the items that they would rate highly. An example of recommendation in action is when you visit Amazon and you notice that some items are being recommended to you or when Netflix recommends certain movies to you. They are also used by Music streaming applications such as Spotify, ganna, savan, and Deezer to recommend music that you might like. ","b543556d":"---\n## Training Loop\n\nNow we're ready to start the training process. First of all, let's split the original dataset using [train_test_split](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.model_selection.train_test_split.html) function from the `scikit-learn` library. ","b83354fe":"## Setting the backend of matplotlib to the 'inline' backend","ef6ee249":"## Detecting null values and filling null values"}}