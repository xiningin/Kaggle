{"cell_type":{"66285fdb":"code","60a7c443":"code","0ba0b192":"code","bc058c50":"code","471253cb":"code","ab86f717":"code","24608cc3":"code","46b5bbf9":"code","962a0ddb":"code","2e750ec9":"code","d66caa47":"code","93d83df7":"code","20ec7fe6":"code","f123e92f":"code","8850a7c2":"code","c22f61b0":"code","aad2e80b":"code","5155c060":"code","5ffe4c62":"code","a3ebee9a":"code","9ee24c4a":"code","4ff82d6c":"code","f3297cf1":"code","249c2292":"code","5a9d8f25":"code","c66d90f5":"code","30f42a2d":"code","8e5e8009":"code","acb2a383":"code","b3e0d1fe":"code","b6771775":"code","df32d1d5":"code","1f79ffc1":"code","bafdc186":"code","052604df":"code","0467bcd9":"code","97a73842":"code","299b8f56":"code","65b0a5c1":"code","6ca7938d":"code","afabc003":"code","6a89a804":"code","76218f65":"code","9a9658c8":"code","9cdbec57":"code","cf69d52c":"code","a9d213ea":"markdown","43b20999":"markdown","44482d8e":"markdown","a70ab766":"markdown","088dcf21":"markdown","2d023e6a":"markdown","42806633":"markdown","ce823c26":"markdown","b86b380f":"markdown","d384c7f4":"markdown","af17d8ee":"markdown","706977b8":"markdown","3ec56e10":"markdown","9084d9a7":"markdown","6aac18d5":"markdown","4ab93251":"markdown","4435d05c":"markdown","f2e3f287":"markdown","b102e99f":"markdown","6b7cfe39":"markdown","246fbfb1":"markdown","7f1b2b88":"markdown","53f6a091":"markdown","b74bd483":"markdown","22682f36":"markdown","36a68ae9":"markdown","0a8d4858":"markdown","c841ee5c":"markdown"},"source":{"66285fdb":"import pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings; warnings.simplefilter('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","60a7c443":"train=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv', index_col='Id')\ntest=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv', index_col='Id')\nsubmission=pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/sample_submission.csv', index_col='Id')\ndata=train\nprint(train.shape, test.shape, submission.shape)","0ba0b192":"corr=data.corr()\ntop_corr=data[corr.nlargest(40,'SalePrice')['SalePrice'].index].corr()\nfigure, ax1 = plt.subplots(nrows=1, ncols=1)\nfigure.set_size_inches(20,15)\nsns.heatmap(top_corr, annot=True, ax=ax1)","bc058c50":"sns.regplot(data['GrLivArea'], data['SalePrice'])","471253cb":"train=train.drop(train[(train['GrLivArea']>4000) & (train['SalePrice']<300000)].index)","ab86f717":"Ytrain=train['SalePrice']\ntrain=train[list(test)]\nall_data=pd.concat((train, test), axis=0)\nprint(all_data.shape)","24608cc3":"figure, (ax1, ax2) = plt.subplots(nrows=1, ncols=2)\nfigure.set_size_inches(14,6)\nsns.distplot(data['SalePrice'], fit=norm, ax=ax1)\nsns.distplot(np.log(data['SalePrice']+1), fit=norm, ax=ax2)","46b5bbf9":"Ytrain=np.log(Ytrain+1)","962a0ddb":"cols=list(all_data)\nfor col in list(all_data):\n    if (all_data[col].isnull().sum())==0:\n        cols.remove(col)\n    else:\n        pass\nlen(cols)","2e750ec9":"for col in ('PoolQC', 'MiscFeature', 'Alley', 'Fence', 'FireplaceQu', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\\\n            'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2', 'MasVnrType', 'MSSubClass'):\n    all_data[col] = all_data[col].fillna('None')\n\nfor col in ('GarageYrBlt', 'GarageArea', 'GarageCars', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath',\\\n            'BsmtHalfBath', 'MasVnrArea','LotFrontage'):\n    all_data[col] = all_data[col].fillna(0)\n    \nfor col in ('MSZoning', 'Electrical', 'KitchenQual', 'Exterior1st', 'Exterior2nd', 'SaleType', 'Functional', 'Utilities'):\n    all_data[col] = all_data[col].fillna(all_data[col].mode()[0])\n    \nprint(f\"Total count of missing values in all_data : {all_data.isnull().sum().sum()}\")","d66caa47":"figure, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2)\nfigure.set_size_inches(14,10)\nsns.regplot(data['TotalBsmtSF'], data['SalePrice'], ax=ax1)\nsns.regplot(data['1stFlrSF'], data['SalePrice'], ax=ax2)\nsns.regplot(data['2ndFlrSF'], data['SalePrice'], ax=ax3)\nsns.regplot(data['TotalBsmtSF'] + data['1stFlrSF'] + data['2ndFlrSF'], data['SalePrice'], ax=ax4)","93d83df7":"all_data['TotalSF']=all_data['TotalBsmtSF'] + all_data['1stFlrSF'] + all_data['2ndFlrSF']\nall_data['No2ndFlr']=(all_data['2ndFlrSF']==0)\nall_data['NoBsmt']=(all_data['TotalBsmtSF']==0)","20ec7fe6":"figure, ((ax1, ax2), (ax3, ax4)) = plt.subplots(nrows=2, ncols=2)\nfigure.set_size_inches(14,10)\nsns.barplot(data['BsmtFullBath'], data['SalePrice'], ax=ax1)\nsns.barplot(data['FullBath'], data['SalePrice'], ax=ax2)\nsns.barplot(data['BsmtHalfBath'], data['SalePrice'], ax=ax3)\nsns.barplot(data['HalfBath'], data['SalePrice'], ax=ax4)\n\nfigure, (ax5) = plt.subplots(nrows=1, ncols=1)\nfigure.set_size_inches(14,6)\nsns.barplot(data['BsmtFullBath'] + data['FullBath'] + (data['BsmtHalfBath']\/2) + (data['HalfBath']\/2), data['SalePrice'], ax=ax5)","f123e92f":"all_data['TotalBath']=all_data['BsmtFullBath'] + all_data['FullBath'] + (all_data['BsmtHalfBath']\/2) + (all_data['HalfBath']\/2)","8850a7c2":"figure, (ax1, ax2, ax3) = plt.subplots(nrows=1, ncols=3)\nfigure.set_size_inches(18,8)\nsns.regplot(data['YearBuilt'], data['SalePrice'], ax=ax1)\nsns.regplot(data['YearRemodAdd'], data['SalePrice'], ax=ax2)\nsns.regplot((data['YearBuilt']+data['YearRemodAdd'])\/2, data['SalePrice'], ax=ax3) #'\/2' for graph scaling","c22f61b0":"all_data['YrBltAndRemod']=all_data['YearBuilt']+all_data['YearRemodAdd']","aad2e80b":"all_data['MSSubClass']=all_data['MSSubClass'].astype(str)\nall_data['MoSold']=all_data['MoSold'].astype(str)\nall_data['YrSold']=all_data['YrSold'].astype(str)","5155c060":"Basement = ['BsmtCond', 'BsmtExposure', 'BsmtFinSF1', 'BsmtFinSF2', 'BsmtFinType1', 'BsmtFinType2', 'BsmtQual', 'BsmtUnfSF',\\\n            'TotalBsmtSF']\nBsmt=all_data[Basement]","5ffe4c62":"Bsmt=Bsmt.replace(to_replace='Po', value=1)\nBsmt=Bsmt.replace(to_replace='Fa', value=2)\nBsmt=Bsmt.replace(to_replace='TA', value=3)\nBsmt=Bsmt.replace(to_replace='Gd', value=4)\nBsmt=Bsmt.replace(to_replace='Ex', value=5)\nBsmt=Bsmt.replace(to_replace='None', value=0)\n\nBsmt=Bsmt.replace(to_replace='No', value=1)\nBsmt=Bsmt.replace(to_replace='Mn', value=2)\nBsmt=Bsmt.replace(to_replace='Av', value=3)\nBsmt=Bsmt.replace(to_replace='Gd', value=4)\n\nBsmt=Bsmt.replace(to_replace='Unf', value=1)\nBsmt=Bsmt.replace(to_replace='LwQ', value=2)\nBsmt=Bsmt.replace(to_replace='Rec', value=3)\nBsmt=Bsmt.replace(to_replace='BLQ', value=4)\nBsmt=Bsmt.replace(to_replace='ALQ', value=5)\nBsmt=Bsmt.replace(to_replace='GLQ', value=6)","a3ebee9a":"Bsmt['BsmtScore']= Bsmt['BsmtQual']  * Bsmt['BsmtCond'] * Bsmt['TotalBsmtSF']\nall_data['BsmtScore']=Bsmt['BsmtScore']\n\nBsmt['BsmtFin'] = (Bsmt['BsmtFinSF1'] * Bsmt['BsmtFinType1']) + (Bsmt['BsmtFinSF2'] * Bsmt['BsmtFinType2'])\nall_data['BsmtFinScore']=Bsmt['BsmtFin']\nall_data['BsmtDNF']=(all_data['BsmtFinScore']==0)","9ee24c4a":"lot=['LotFrontage', 'LotArea','LotConfig','LotShape']\nLot=all_data[lot]","4ff82d6c":"Lot['LotScore'] = np.log((Lot['LotFrontage'] * Lot['LotArea'])+1)","f3297cf1":"all_data['LotScore']=Lot['LotScore']","249c2292":"garage=['GarageArea','GarageCars','GarageCond','GarageFinish','GarageQual','GarageType','GarageYrBlt']\nGarage=all_data[garage]\nall_data['NoGarage']=(all_data['GarageArea']==0)","5a9d8f25":"Garage=Garage.replace(to_replace='Po', value=1)\nGarage=Garage.replace(to_replace='Fa', value=2)\nGarage=Garage.replace(to_replace='TA', value=3)\nGarage=Garage.replace(to_replace='Gd', value=4)\nGarage=Garage.replace(to_replace='Ex', value=5)\nGarage=Garage.replace(to_replace='None', value=0)\n\nGarage=Garage.replace(to_replace='Unf', value=1)\nGarage=Garage.replace(to_replace='RFn', value=2)\nGarage=Garage.replace(to_replace='Fin', value=3)\n\nGarage=Garage.replace(to_replace='CarPort', value=1)\nGarage=Garage.replace(to_replace='Basment', value=4)\nGarage=Garage.replace(to_replace='Detchd', value=2)\nGarage=Garage.replace(to_replace='2Types', value=3)\nGarage=Garage.replace(to_replace='Basement', value=5)\nGarage=Garage.replace(to_replace='Attchd', value=6)\nGarage=Garage.replace(to_replace='BuiltIn', value=7)","c66d90f5":"Garage['GarageScore']=(Garage['GarageArea']) * (Garage['GarageCars']) * (Garage['GarageFinish'])*(Garage['GarageQual']) * \\\n(Garage['GarageType'])\nall_data['GarageScore']=Garage['GarageScore']","30f42a2d":"sns.regplot(data=data, x='LowQualFinSF', y='SalePrice')","8e5e8009":"all_data['NoLowQual']=(all_data['LowQualFinSF']==0)","acb2a383":"sns.regplot(data=data, x='OpenPorchSF', y='SalePrice')","b3e0d1fe":"all_data['NoOpenPorch']=(all_data['OpenPorchSF']==0)","b6771775":"sns.regplot(data=data, x='WoodDeckSF', y='SalePrice')","df32d1d5":"all_data['NoWoodDeck']=(all_data['WoodDeckSF']==0)","1f79ffc1":"figure, (ax1, ax2) = plt.subplots(nrows=1, ncols=2)\nfigure.set_size_inches(14,6)\nsns.regplot(data=data, x='PoolArea', y='SalePrice', ax=ax1)\nsns.barplot(data=data, x='PoolQC', y='SalePrice', ax=ax2)","bafdc186":"all_data=all_data.drop(columns=['PoolArea','PoolQC'])","052604df":"figure, (ax1, ax2) = plt.subplots(nrows=1, ncols=2)\nfigure.set_size_inches(14,6)\nsns.regplot(data=data, x='MiscVal', y='SalePrice', ax=ax1)\nsns.barplot(data=data, x='MiscFeature', y='SalePrice', ax=ax2)","0467bcd9":"all_data=all_data.drop(columns=['MiscVal','MiscFeature'])","97a73842":"all_data=all_data.drop(columns=['Street','Utilities','Condition2','RoofMatl','Heating'])","299b8f56":"non_numeric=all_data.select_dtypes(np.object)","65b0a5c1":"def onehot(col_list):\n    global all_data\n    while len(col_list) !=0:\n        col=col_list.pop(0)\n        data_encoded=pd.get_dummies(all_data[col], prefix=col)\n        all_data=pd.merge(all_data, data_encoded, on='Id')\n        all_data=all_data.drop(columns=col)\n    print(all_data.shape)\n    \nonehot(list(non_numeric))","6ca7938d":"numeric=all_data.select_dtypes(np.number)","afabc003":"def log_transform(col_list):\n    transformed_col=[]\n    while len(col_list)!=0:\n        col=col_list.pop(0)\n        if all_data[col].skew() > 0.5:\n            all_data[col]=np.log(all_data[col]+1)\n            transformed_col.append(col)\n        else:\n            pass\n    print(f\"{len(transformed_col)} features had been tranformed\")\n    print(all_data.shape)","6a89a804":"log_transform(list(numeric))","76218f65":"print(train.shape, test.shape)\nXtrain=all_data[:len(train)]\nXtest=all_data[len(train):]\nprint(Xtrain.shape, Xtest.shape)","9a9658c8":"from sklearn.linear_model import ElasticNet, Lasso\nfrom sklearn.ensemble import GradientBoostingRegressor, RandomForestRegressor\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\nimport time\nimport optuna\nfrom catboost import CatBoostRegressor\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.metrics import mean_squared_error","9cdbec57":"model_Lasso= make_pipeline(RobustScaler(), Lasso(alpha =0.000327, random_state=18))\n\nmodel_ENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.00052, l1_ratio=0.70654, random_state=18))\n\nmodel_GBoost = GradientBoostingRegressor(n_estimators=3000, learning_rate=0.05, max_depth=4, max_features='sqrt', min_samples_leaf=15, \n                                         min_samples_split=10, loss='huber', random_state=18)\n\nmodel_XGB=XGBRegressor(colsample_bylevel=0.9229733609038979,colsample_bynode=0.21481791874780318,colsample_bytree=0.607964318297635, \n                       gamma=0.8989889254961725, learning_rate=0.009192310189734834, max_depth=3, n_estimators=3602, \n                       reg_alpha=3.185674564163364e-12,reg_lambda=4.95553539265423e-13, seed=18, subsample=0.8381904293270576,\n                       tree_method='gpu_hist',verbosity=0)","cf69d52c":"model_Lasso.fit(Xtrain, Ytrain)\nLasso_predictions=model_Lasso.predict(Xtest)\ntrain_Lasso=model_Lasso.predict(Xtrain)\n\nmodel_ENet.fit(Xtrain, Ytrain)\nENet_predictions=model_ENet.predict(Xtest)\ntrain_ENet=model_ENet.predict(Xtrain)\n\nmodel_XGB.fit(Xtrain, Ytrain)\nXGB_predictions=model_XGB.predict(Xtest)\ntrain_XGB=model_XGB.predict(Xtrain)\n\nmodel_GBoost.fit(Xtrain, Ytrain)\nGBoost_predictions=model_GBoost.predict(Xtest)\ntrain_GBoost=model_GBoost.predict(Xtrain)\n\nlog_train_predictions = (train_Lasso + train_ENet + train_XGB + train_GBoost)\/4\ntrain_score=np.sqrt(mean_squared_error(Ytrain, log_train_predictions))\nprint(f\"Scoring with train data : {train_score}\")\n\nlog_predictions=(Lasso_predictions + ENet_predictions + XGB_predictions + GBoost_predictions) \/ 4\npredictions=np.exp(log_predictions)-1\nsubmission['SalePrice']=predictions\nsubmission.to_csv('Result.csv')","a9d213ea":"### Making New Features : Year Built and Remodeled","43b20999":"# Load Dataset","44482d8e":"### Correcting dtypes","a70ab766":"# EDA","088dcf21":"## Remove Outliers","2d023e6a":"### Delete Dominating Features","42806633":"# Build ML Models","ce823c26":"## Correlation Heatmap","b86b380f":"### About Garage (Group & Scoring idea)","d384c7f4":"## Numeric Features","af17d8ee":"### About Lot (Group & Scoring idea)","706977b8":"### About Basement (Group & Scoring idea)","3ec56e10":"#### LowQual","9084d9a7":"## Final Fit & Predict","6aac18d5":"### Making New Features : Total SF","4ab93251":"# Preprocessing","4435d05c":"#### Pool","f2e3f287":"### Making New Features : Total Bath","b102e99f":"## Fill NA Values","6b7cfe39":"Leaderboard Score : 0.11672","246fbfb1":"#### OpenPorch","7f1b2b88":"## Target Variable","53f6a091":"## Categorical Features","b74bd483":"#### Misc","22682f36":"## Explore","36a68ae9":"#### Wood Deck","0a8d4858":"Ranking : 723 of 4452 (Top 16.23 %), July 11, 2019","c841ee5c":"### Other Features"}}