{"cell_type":{"3c23a670":"code","323f0e42":"code","1cd6e697":"code","094b629e":"code","153933ac":"code","9f67c481":"code","bb33cb33":"code","b2a49586":"code","fa476210":"code","c1b88b3a":"code","a8c8296c":"code","e00ec3a6":"code","ab4a8f84":"code","b4d3ee30":"code","bb59ede1":"code","9799b608":"code","13f751b8":"code","4e0ac7af":"code","44197745":"code","0dd57ed6":"code","d3ef93ff":"code","12af4cdd":"code","d8129ac5":"code","8cd49f65":"code","04dd3079":"code","72651896":"code","b60220ff":"code","7017e79c":"code","5998d8a8":"code","bae2f505":"code","635a317f":"code","8d73b452":"code","820ebbd9":"code","afa46d8e":"code","b5f360ea":"code","124ab516":"code","6a1f9313":"code","4b8bfab0":"code","77096a08":"code","515638a7":"code","0454b79f":"code","10ceff91":"code","23d570d4":"code","bc0802ad":"code","7a9130ac":"code","92b97ebe":"code","0340b460":"code","d0936dbc":"markdown","bfa5083d":"markdown","57c620c5":"markdown","109146d1":"markdown","9b5143d1":"markdown"},"source":{"3c23a670":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd  #data processing, CSV file I\/O (e.g. pd.read_csv)\nimport seaborn as sn\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","323f0e42":"df=pd.read_csv(\"\/kaggle\/input\/predict-test-scores-of-students\/test_scores.csv\")","1cd6e697":"df.head()","094b629e":"df.describe()","153933ac":"sn.set_style(style=\"whitegrid\")","9f67c481":"sn.barplot(x=\"school_type\",\n           y=\"posttest\",data=df)\nplt.show()","bb33cb33":"sn.barplot(x=\"teaching_method\",\n           y=\"posttest\",data=df)\nplt.show()","b2a49586":"sn.barplot(x=\"teaching_method\",\n           y=\"posttest\",hue=\"school_type\",data=df)\nplt.show()","fa476210":"sn.boxplot(x=\"teaching_method\",\n           y=\"posttest\",data=df)\n          \n           #\nplt.show()","c1b88b3a":"experimental=df[(df.teaching_method==\"Experimental\")]\nstandar=df[(df.teaching_method==\"Standard\")]","a8c8296c":"plt.subplots(1,1,figsize=(10,8))\nsn.distplot(experimental.posttest,kde=True)\nplt.show()","e00ec3a6":"plt.subplots(1,1,figsize=(10,8))\nsn.distplot(standar.posttest,kde=True)\nplt.show()","ab4a8f84":"plt.subplots(1,1,figsize=(10,8))\nsn.heatmap(df.corr(),\n           annot=True,\n           cmap=\"cool\")\nplt.show()","b4d3ee30":"def lower_upper(dataframe):\n    \n    lower=dataframe.posttest.quantile(0.1)\n    \n    upper=dataframe.posttest.quantile(0.9999)\n    \n    return int(lower),int(upper)","bb59ede1":"standar_lower_upper=lower_upper(standar)\nexperimental_lower_upper=lower_upper(experimental)\n\nstandar_lower_upper","9799b608":"experimental_not_out=experimental[(experimental.posttest > experimental_lower_upper[0]) &\n                                  (experimental.posttest < experimental_lower_upper[1])]\n                                   ","13f751b8":"standar_not_out=standar[(standar.posttest > standar_lower_upper[0]) &\n                                  (standar.posttest < standar_lower_upper[1])]","4e0ac7af":"df_not_out=pd.concat([experimental_not_out,standar_not_out])","44197745":"sn.boxplot(df_not_out.teaching_method,df_not_out.posttest)\nplt.show()","0dd57ed6":"from sklearn.model_selection import train_test_split\ndf_not_out","d3ef93ff":"from sklearn.preprocessing import StandardScaler","12af4cdd":"scala=StandardScaler()","d8129ac5":"data=df_not_out[[\"teaching_method\",\"school_type\",\"school_setting\",\"pretest\"]]\ndata=pd.get_dummies(data)","8cd49f65":"data_scala=scala.fit_transform(data)","04dd3079":"target=np.array(df_not_out.posttest).reshape(-1,1)","72651896":"data.shape,target.shape","b60220ff":"X_train,X_test,Y_train,Y_test=train_test_split(data_scala,\n                                               target,test_size=0.2,\n                                               random_state=0)","7017e79c":"from sklearn.linear_model import LinearRegression","5998d8a8":"reg_lineal=LinearRegression()","bae2f505":"reg_lineal.fit(X_train,Y_train)","635a317f":"reg_lineal.score(X_test,Y_test)","8d73b452":"y_pred=reg_lineal.predict(X_test)","820ebbd9":"from sklearn.metrics import mean_absolute_error","afa46d8e":"mean_absolute_error(Y_test,y_pred)","b5f360ea":"import tensorflow.keras as kr","124ab516":"xtrain,xtest,ytrain,ytest=train_test_split(data_scala,scala.fit_transform(target))","6a1f9313":"def model():\n    \n    model=kr.Sequential([\n        \n        kr.layers.Dense(20,\n                        input_dim=xtrain.shape[1],\n                        activation=\"relu\"),\n        \n        kr.layers.Dense(10,activation=\"relu\"),\n        \n        kr.layers.Dense(10,activation=\"relu\"),\n        \n        kr.layers.Dropout(0.2),\n        \n        kr.layers.Dense(1,activation=\"linear\")\n                        \n                      \n        \n    ])\n    \n    return model","4b8bfab0":"model=model()","77096a08":"model.compile(loss=\"mse\",\n             metrics=[\"mae\"],\n             optimizer=\"adam\")","515638a7":"early_stop=kr.callbacks.EarlyStopping(monitor=\"val_mae\",\n                                      patience=6,\n                                      restore_best_weights=True)","0454b79f":"history=model.fit(xtrain,ytrain,validation_data=(xtest,ytest),\n                                                  batch_size=10,\n                                                   callbacks=[early_stop],\n                                                   epochs=20)","10ceff91":"def loss_metrics():\n    \n    plt.subplots(1,1,figsize=(20,8))\n    \n    plt.title(\"MAE\")\n    plt.plot(history.history[\"mae\"])\n    plt.plot(history.history[\"val_mae\"])\n    plt.xlabel(\"Epcoch\")\n    plt.ylabel(\"MAE\")\n    plt.legend([\"Test MAE\",\"Train MAE\"])\n    plt.show()\n    \n    plt.subplots(1,1,figsize=(20,8))\n     \n    plt.title(\"LOSS\")\n    plt.plot(history.history[\"loss\"])\n    plt.plot(history.history[\"val_loss\"])\n    plt.xlabel(\"Epcoch\")\n    plt.ylabel(\"loss\")\n    plt.show()\n","23d570d4":"loss_metrics()","bc0802ad":"def main():\n    \n    plt.figure(figsize=(12,8))\n    plt.title(\"Real vs Predict\")\n    plt.scatter(Y_test,y_pred,c=\"b\")\n    plt.scatter(y_pred,Y_test,c=\"c\")\n    \n    plt.xlabel(\"Real\")\n    plt.ylabel(\"Predict\")\n    plt.legend([\"Real\",\"Predict\"])","7a9130ac":"if __name__ ==\"__main__\":\n    \n    main()","92b97ebe":"from sklearn.metrics import r2_score","0340b460":"r2_score(ytest,model.predict(xtest)),r2_score(Y_test,y_pred)","d0936dbc":"# **Keras**","bfa5083d":"**Sklearn Win !!**","57c620c5":"# **Sklearn Linear Regression**","109146d1":"# **Feature engineering**","9b5143d1":"\n# **Exploratory analysis**"}}