{"cell_type":{"e00b5f8f":"code","c3ccf1e8":"code","1b02c0dd":"code","f293759b":"code","b1e40536":"code","aa959093":"code","9f879ae7":"code","860af7b2":"code","9ecbfb17":"markdown"},"source":{"e00b5f8f":"# Lets start with the imports.\nimport numpy as np\nimport pandas as pd\nfrom PIL import Image\nimport matplotlib.pyplot as plt\nimport torch\nimport torch.nn as nn\nfrom torch.autograd import Variable\nimport torch.utils.data as data","c3ccf1e8":"# First we create the point that we are going to use for the classifier.\n# We create n_points points for four classes of points center at [0,0], \n# [0,2], [2,0] and [2,2] with a deviation from the center that follows a\n# Gaussian distribution with a standar deviation of sigma.\n\nn_points = 20000\npoints = np.zeros((n_points,2))   # x, y\ntarget = np.zeros((n_points,1))   # label\nsigma = 0.5\nfor k in range(n_points):\n    # Random selection of one class with 25% of probability per class.\n    random = np.random.rand()\n    if random<0.25:\n        center = np.array([0,0])\n        target[k,0] = 0   # This points are labeled 0.\n    elif random<0.5:\n        center = np.array([2,2])\n        target[k,0] = 1   # This points are labeled 1.\n    elif random<0.75:\n        center = np.array([2,0])\n        target[k,0] = 2   # This points are labeled 2.\n    else:\n        center = np.array([0,2])\n        target[k,0] = 3   # This points are labeled 3.\n    gaussian01_2d = np.random.randn(1,2)\n    points[k,:] = center + sigma*gaussian01_2d\n\n# Now, we write all the points in a file.\npoints_and_labels = np.concatenate((points,target),axis=1)   # 1st, 2nd, 3nd column --> x,y, label\npd.DataFrame(points_and_labels).to_csv('clas.csv',index=False)","1b02c0dd":"# Here, we start properly the classifier.\n\n# We read the dataset and create an iterable.\nclass my_points(data.Dataset):\n    def __init__(self, filename):\n        pd_data = pd.read_csv(filename).values   # Read data file.\n        self.data = pd_data[:,0:2]   # 1st and 2nd columns --> x,y\n        self.target = pd_data[:,2:]  # 3nd column --> label\n        self.n_samples = self.data.shape[0]\n    \n    def __len__(self):   # Length of the dataset.\n        return self.n_samples\n    \n    def __getitem__(self, index):   # Function that returns one point and one label.\n        return torch.Tensor(self.data[index]), torch.Tensor(self.target[index])","f293759b":"# We create the dataloader.\nmy_data = my_points('clas.csv')\nbatch_size = 200\nmy_loader = data.DataLoader(my_data,batch_size=batch_size,num_workers=0)","b1e40536":"# We build a simple model with the inputs and one output layer.\nclass my_model(nn.Module):\n    def __init__(self,n_in=2,n_hidden=10,n_out=4):\n        super(my_model,self).__init__()\n        self.n_in  = n_in\n        self.n_out = n_out\n         \n        self.linearlinear = nn.Sequential(\n            nn.Linear(self.n_in,self.n_out,bias=True),   # Hidden layer.\n            )\n        self.logprob = nn.LogSoftmax(dim=1)                 # -Log(Softmax probability).\n    \n    def forward(self,x):\n        x = self.linearlinear(x)\n        x = self.logprob(x)\n        return x","aa959093":"# Now, we create the mode, the loss function or criterium and the optimizer \n# that we are going to use to minimize the loss.\n\n# Model.\nmodel = my_model()\n\n# Negative log likelihood loss.\ncriterium = nn.NLLLoss()\n\n# Adam optimizer with learning rate 0.1 and L2 regularization with weight 1e-4.\noptimizer = torch.optim.Adam(model.parameters(),lr=0.1,weight_decay=1e-4)","9f879ae7":"# Taining.\nfor k, (data, target) in enumerate(my_loader):\n    # Definition of inputs as variables for the net.\n    # requires_grad is set False because we do not need to compute the \n    # derivative of the inputs.\n    data   = Variable(data,requires_grad=False)\n    target = Variable(target.long(),requires_grad=False)\n    \n    # Set gradient to 0.\n    optimizer.zero_grad()\n    # Feed forward.\n    pred = model(data)\n    # Loss calculation.\n    loss = criterium(pred,target.view(-1))\n    # Gradient calculation.\n    loss.backward()\n    \n    # Print loss every 10 iterations.\n    if k%10==0:\n        print('Loss {:.4f} at iter {:d}'.format(loss.item(),k))\n        \n    # Model weight modification based on the optimizer. \n    optimizer.step()","860af7b2":"# Now, we plot the results.\n# Circles indicate the ground truth and the squares are the predictions.\n\ncolors = ['r','b','g','y']\npoints = data.numpy()\n\n# Ground truth.\ntarget = target.numpy()\nfor k in range(4):\n    select = target[:,0]==k\n    p = points[select,:]\n    plt.scatter(p[:,0],p[:,1],facecolors=colors[k])\n\n# Predictions.\npred = pred.exp().detach()     # exp of the log prob = probability.\n_, index = torch.max(pred,1)   # index of the class with maximum probability.\npred = pred.numpy()\nindex = index.numpy()\nfor k in range(4):\n    select = index==k\n    p = points[select,:]\n    plt.scatter(p[:,0],p[:,1],s=60,marker='s',edgecolors=colors[k],facecolors='none')\n\nplt.show()","9ecbfb17":"This is my first kernels and I have decided to write a code to show how to make a classifier using Pytorch. With this code I pretend to show the common steps that we have to follow to write a program using Pytorch, independently if it is to build a simple neural network of a very complex one. The steps that I describe below are the following:\n1. Build the Dataset. We are going to generate a simple data set and then we will read it.\n2. Build the DataLoader.\n3. Build the model.\n4. Define the loss function and the optimizer.\n5. Train the model.\n6. Generate predictions.\n7. Plot the results.\nI hope it can be useful for someone who is starting programming using Pytorch."}}