{"cell_type":{"917340f3":"code","e6df5da1":"code","aa90d002":"code","306d8570":"code","7095696b":"code","10b87203":"code","be81bfdd":"code","87e87588":"code","91d10af3":"code","90b0c3a3":"code","859fb7a0":"code","ab521748":"code","f7508b4c":"code","78bac4bb":"code","b028d7e5":"code","eea4be8b":"code","dd62f67b":"code","02f22887":"code","b1729fad":"code","d3f2ae92":"code","ed053806":"code","40f3755e":"code","eace7259":"code","4db51b90":"code","2916c074":"code","f0135d29":"code","8d448665":"code","42c189f4":"code","b57abf5a":"code","3d4648f9":"code","79aae435":"code","187fb9b4":"code","804def4c":"code","c0c27312":"code","50b81813":"code","35839cd9":"code","9af53bf6":"code","cded9cb8":"code","180dd104":"code","7045162b":"code","9318da78":"code","46fa5f28":"code","58fce783":"code","9cbf110f":"code","011aa2c0":"code","e0ec81ca":"code","aa254c6d":"code","59d84b43":"code","79b7848f":"code","c104b54d":"code","76f1c570":"code","05b60544":"code","2e5ebca2":"code","8128e57e":"code","ec7c0941":"code","66ec93d5":"code","3f2a2546":"code","fed0ebc5":"code","3da74efd":"code","c59681d1":"code","7fea6dcb":"code","88108749":"code","4e2974dc":"code","1071e069":"code","764ac466":"code","75dafc01":"code","1fc4bdeb":"code","c9cc9b0a":"code","56977560":"code","3c22cc4f":"code","713779c6":"code","5b905903":"code","91365bf4":"code","cae4c75f":"code","ac659ba1":"code","7717f751":"code","6d9ac4cc":"code","bb56bee8":"code","d66e485e":"code","db9106b2":"code","dca4fff9":"code","bc6185cf":"code","a59351be":"code","212aad8b":"code","8970450a":"code","7b07cd60":"code","f7a88ca9":"code","808b0e67":"code","94442d02":"code","a6fcf04b":"code","b5065e70":"code","d2cfe062":"markdown","ec39afd5":"markdown","ec1e7b34":"markdown","6eac437f":"markdown","1bc499a4":"markdown","49c7094b":"markdown","d6d39e49":"markdown","7342d0d2":"markdown","1c026da5":"markdown","111d6bea":"markdown","95b910cc":"markdown","c789563e":"markdown","6ec8f3d9":"markdown","d7defc24":"markdown","d452dbe2":"markdown","ba746388":"markdown","729c89b2":"markdown","7c4dcb8d":"markdown","dd2c820c":"markdown","1157a2ea":"markdown","07b71858":"markdown","a62183c0":"markdown","0e6995dc":"markdown","0f59569e":"markdown","3edae95a":"markdown","8dd2369b":"markdown","a997745a":"markdown","5cef2f40":"markdown","6f1c3f06":"markdown","bfb04ca1":"markdown","7386c12c":"markdown","d7657fac":"markdown","628ce763":"markdown","147ff480":"markdown","3431b367":"markdown","405faa86":"markdown","1159d452":"markdown","8338d1d6":"markdown","b596a292":"markdown","4d744da2":"markdown","d8a085fc":"markdown","e5d40d55":"markdown","ee11fe44":"markdown"},"source":{"917340f3":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nplt.style.use('seaborn-whitegrid') # Plotlar gridli \u015fekilde ortaya \u00e7\u0131kar \n\nimport seaborn as sns\nfrom collections import Counter\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","e6df5da1":"# seaborn k\u00fct\u00fchanesindeki plot tiplerini buradan g\u00f6rebiliriz\nplt.style.available","aa90d002":"train_df=pd.read_csv(\"\/kaggle\/input\/titanic\/train.csv\")\ntest_df=pd.read_csv(\"\/kaggle\/input\/titanic\/test.csv\")\ntest_PassengerID=test_df[\"PassengerId\"]","306d8570":"train_df.columns","7095696b":"train_df.head()","10b87203":"train_df.describe()","be81bfdd":"train_df.info()","87e87588":"def bar_plot(variable):\n    \"\"\"\n        input: variable ex: \"Sex\"\n        output: bar plot & value count\n    \"\"\"\n    # get feature\n    var = train_df[variable]\n    # count number of categorical variable(value\/sample)\n    varValue = var.value_counts()\n    \n    # visualize\n    plt.figure(figsize = (9,3))\n    plt.bar(varValue.index, varValue)\n    plt.xticks(varValue.index, varValue.index.values)\n    plt.ylabel(\"Frequency\")\n    plt.title(variable)\n    plt.show()\n    print(\"{}: \\n {}\".format(variable,varValue))\n    ","91d10af3":"category1 = [\"Survived\",\"Sex\",\"Pclass\",\"Embarked\",\"SibSp\",\"Parch\"]\nfor c in category1:\n    bar_plot(c)","90b0c3a3":"category2 = [\"Cabin\",\"Name\", \"Ticket\"]\nfor c in category2:\n    print(\"{} \\n: \".format(train_df[c].value_counts()))","859fb7a0":"def plot_hist(variable):\n    plt.figure(figsize = (9,3))\n    plt.hist(train_df[variable], bins = 50) # bins histogram\u0131 ka\u00e7 kolon ile g\u00f6sterece\u011fini belirtir.\n    plt.xlabel('Variable')\n    plt.ylabel('Frequency')\n    plt.title(\"{} distrubution with hist\".format(variable)) \n    plt.show()","ab521748":"numeric_Var=[\"Fare\", \"Age\",\"PassengerId\"]\nfor n in numeric_Var:\n    plot_hist(n)","f7508b4c":"# Pclass vs Survived\ntrain_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean()","78bac4bb":"train_df[[\"Pclass\",\"Survived\"]].groupby([\"Pclass\"], as_index = False).mean().sort_values(by=\"Survived\",ascending = True)","b028d7e5":"# Sex vs Survived\ntrain_df[[\"Sex\",\"Survived\"]].groupby([\"Sex\"], as_index = False).mean()","eea4be8b":"# SibSp vs Survived\ntrain_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean()","dd62f67b":"# Parch vs Survived\ntrain_df[[\"Parch\",\"Survived\"]].groupby([\"Parch\"], as_index = False).mean()","02f22887":"train_df[[\"Parch\",\"Pclass\"]].groupby([\"Parch\"], as_index = False).mean()","b1729fad":"def detect_outliers(df, features):\n    outlier_indices = []\n    \n    for c in features:\n        #1st quartile\n        Q1 = np.percentile(df[c],25)\n        #3rd quartile\n        Q3 = np.percentile(df[c],75)\n        #IQR\n        IQR = Q3-Q1\n        #Outlier Step\n        outlier_step = IQR * 1.5\n        # detect outlier and their indeces\n        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)].index\n        # store indeces\n        outlier_indices.extend(outlier_list_col)\n        \n    outlier_indices = Counter(outlier_indices)\n    multiple_outliers = list(i for i, v in outlier_indices.items() if v > 2)\n    \n    return multiple_outliers\n        ","d3f2ae92":"#a = [\"a\", \"a\", \"a\", \"a\", \"b\", \"b\"]\n#Counter(a)\n\ntrain_df.loc[detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"])]","ed053806":"# Drop outliers\ntrain_df = train_df.drop(detect_outliers(train_df,[\"Age\",\"SibSp\",\"Parch\",\"Fare\"]),axis=0).reset_index(drop = True)","40f3755e":"train_df_len = len(train_df)\ntrain_df = pd.concat([train_df,test_df],axis=0).reset_index(drop=True)","eace7259":"train_df.columns[train_df.isnull().any()]","4db51b90":"train_df.isnull().sum()","2916c074":"np.where(train_df[\"Embarked\"].isnull())\n","f0135d29":"train_df[train_df[\"Embarked\"].isnull()]\n","8d448665":"train_df.boxplot(column=\"Fare\",by = \"Embarked\")\nplt.show()","42c189f4":"train_df[\"Embarked\"]=train_df[\"Embarked\"].fillna(\"C\")\ntrain_df[train_df[\"Embarked\"].isnull()]","b57abf5a":"np.where(train_df[\"Fare\"].isnull())","3d4648f9":"train_df[train_df[\"Fare\"].isnull()]","79aae435":"(train_df[train_df[\"Pclass\"] == 3][\"Fare\"]).mean()\ntrain_df[\"Fare\"]=train_df[\"Fare\"].fillna((train_df[train_df[\"Pclass\"] == 3][\"Fare\"]).mean())\ntrain_df[train_df[\"Fare\"].isnull()]","187fb9b4":"list1 = [\"SibSp\",\"Parch\",\"Age\",\"Fare\",\"Survived\"]\nsns.heatmap(train_df[list1].corr(), annot = True, fmt = \".2f\")","804def4c":"train_df[[\"SibSp\",\"Survived\"]].groupby([\"SibSp\"], as_index = False).mean()\n","c0c27312":"g = sns.factorplot(x = \"SibSp\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","50b81813":"g = sns.factorplot(x = \"Parch\", y = \"Survived\", data=train_df, kind = \"bar\", size=6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","35839cd9":"g = sns.factorplot(x = \"Pclass\", y = \"Survived\", data = train_df, kind = \"bar\", size = 6)\ng.set_ylabels(\"Survived Probability\")\nplt.show()","9af53bf6":"g = sns.FacetGrid(train_df, col =\"Survived\")\ng.map(sns.distplot,\"Age\", bins =25)\nplt.show()\n","cded9cb8":"g = sns.FacetGrid(train_df, col = \"Survived\", row=\"Parch\", size = 3.5)\ng.map(plt.hist, \"Age\", bins=25)\ng.add_legend()\nplt.show()","180dd104":"g = sns.FacetGrid(train_df, col = \"Survived\", row = \"Pclass\", size = 3.5)\ng.map(plt.hist, \"Age\", bins = 25)\ng.add_legend()\nplt.show()","7045162b":"g = sns.FacetGrid(train_df, row = \"Embarked\", size = 3)\ng.map(sns.pointplot, \"Pclass\",\"Survived\",\"Sex\")\ng.add_legend()\nplt.show()","9318da78":"g = sns.FacetGrid(train_df, row = \"Embarked\", col = \"Survived\", size = 2.3)\ng.map(sns.barplot, \"Sex\", \"Fare\")\ng.add_legend()\nplt.show()","46fa5f28":"train_df[train_df[\"Age\"].isnull()]","58fce783":"sns.factorplot(x = \"Sex\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","9cbf110f":"sns.factorplot(x = \"Sex\", y = \"Age\", hue = \"Pclass\",data = train_df, kind = \"box\")\nplt.show()","011aa2c0":"sns.factorplot(x = \"Parch\", y = \"Age\", data = train_df, kind = \"box\")\nsns.factorplot(x = \"SibSp\", y = \"Age\", data = train_df, kind = \"box\")\nplt.show()","e0ec81ca":"sns.heatmap(train_df[[\"Age\",\"Sex\",\"SibSp\",\"Parch\",\"Pclass\"]].corr(), annot = True)\nplt.show()","aa254c6d":"index_nan_age = list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)\nprint(list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index))\nprint(index_nan_age)\nfor i in index_nan_age:\n    age_pred = train_df[\"Age\"][((train_df[\"SibSp\"] == train_df.iloc[i][\"SibSp\"]) & (train_df[\"Parch\"] == train_df.iloc[i][\"Parch\"]) & (train_df[\"Pclass\"] == train_df.iloc[i][\"Pclass\"]))].median()\n    age_med = train_df[\"Age\"].median()\n    if not np.isnan(age_pred):\n        train_df[\"Age\"].iloc[i] = age_pred\n    else:\n        train_df[\"Age\"].iloc[i] = age_med","59d84b43":"list(train_df[\"Age\"][train_df[\"Age\"].isnull()].index)","79b7848f":"train_df.head(10)","c104b54d":"name=train_df[\"Name\"]\ntrain_df[\"Title\"]=[i.split(\".\")[0].split(\",\")[-1].strip() for i in name]","76f1c570":"train_df[\"Title\"].head(10)","05b60544":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","2e5ebca2":"# convert to categorical\ntrain_df[\"Title\"] = train_df[\"Title\"].replace([\"Lady\",\"the Countess\",\"Capt\",\"Col\",\"Don\",\"Dr\",\"Major\",\"Rev\",\"Sir\",\"Jonkheer\",\"Dona\"],\"other\")\ntrain_df[\"Title\"] = [0 if i == \"Master\" else 1 if i == \"Miss\" or i == \"Ms\" or i == \"Mlle\" or i == \"Mrs\" else 2 if i == \"Mr\" else 3 for i in train_df[\"Title\"]]\ntrain_df[\"Title\"].head(20)","8128e57e":"sns.countplot(x=\"Title\", data = train_df)\nplt.xticks(rotation = 60)\nplt.show()","ec7c0941":"g = sns.factorplot(x = \"Title\", y = \"Survived\", data = train_df, kind = \"bar\")\ng.set_xticklabels([\"Master\",\"Mrs\",\"Mr\",\"Other\"])\ng.set_ylabels(\"Survival Probability\")\nplt.show()","66ec93d5":"train_df.drop(labels = [\"Name\"], axis = 1, inplace = True)","3f2a2546":"train_df.head()","fed0ebc5":"train_df = pd.get_dummies(train_df,columns=[\"Title\"])\ntrain_df.head()","3da74efd":"train_df.head()","c59681d1":"train_df[\"Fsize\"] = train_df[\"SibSp\"] + train_df[\"Parch\"] + 1 # Sibling Number + Parent-Children Number","7fea6dcb":"g=sns.factorplot(x=\"Fsize\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","88108749":"train_df[\"family_size\"]=[1 if i<5 else 0 for i in train_df[\"Fsize\"]]","4e2974dc":"train_df.head(10)","1071e069":"sns.countplot(x=\"family_size\", data = train_df)\nplt.show()","764ac466":"g=sns.factorplot(x=\"family_size\", y=\"Survived\", data=train_df, kind=\"bar\")\ng.set_ylabels(\"Survival\")\nplt.show()","75dafc01":"train_df = pd.get_dummies(train_df, columns= [\"family_size\"]) # family_size 2 feature'a b\u00f6l\u00fcnecek.\ntrain_df.head()","1fc4bdeb":"train_df[\"Embarked\"].head()","c9cc9b0a":"sns.countplot(x=train_df[\"Embarked\"], data=train_df)\nplt.show()","56977560":"train_df = pd.get_dummies(train_df, columns=[\"Embarked\"])\ntrain_df.head()","3c22cc4f":"train_df[\"Ticket\"].head(20)","713779c6":"# strip komutu ile ba\u015ftaki ya da sondaki ekstra bo\u015fluk giderilir\na = \"A\/5. 2151\"\na.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0]","5b905903":"tickets = []\nfor i in list(train_df[\"Ticket\"]):\n    if not i.isdigit():\n        tickets.append(i.replace(\".\",\"\").replace(\"\/\",\"\").strip().split(\" \")[0])\n    else:\n        tickets.append(\"x\")\ntrain_df[\"Ticket\"] = tickets","91365bf4":"train_df[\"Ticket\"].head(10)","cae4c75f":"train_df = pd.get_dummies(train_df, columns = [\"Ticket\"], prefix = \"T\")\ntrain_df.head(10)","ac659ba1":"sns.countplot(x = \"Pclass\", data=train_df)\nplt.show()","7717f751":"train_df[\"Pclass\"] = train_df[\"Pclass\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Pclass\"])\ntrain_df.head(10)","6d9ac4cc":"train_df[\"Sex\"]=train_df[\"Sex\"].astype(\"category\")\ntrain_df = pd.get_dummies(train_df, columns=[\"Sex\"])\ntrain_df.head()","bb56bee8":"train_df.drop(labels=[\"PassengerId\", \"Cabin\"], axis = 1, inplace = True)","d66e485e":"from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier, VotingClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import accuracy_score","db9106b2":"train_df_len","dca4fff9":"test = train_df[train_df_len:]\ntest.drop(labels = [\"Survived\"], axis=1, inplace=True)","bc6185cf":"test.head()","a59351be":"train = train_df[:train_df_len]\nx_train = train.drop(labels = \"Survived\",axis=1)\ny_train = train[\"Survived\"]\nx_train, x_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.33, random_state=42)\nprint(\"x_test\", len(x_test))\nprint(\"x_train\", len(x_train))\nprint(\"y_test\", len(y_test))\nprint(\"y_train\", len(y_train))\nprint(\"test\", len(test))\n","212aad8b":"logreg = LogisticRegression()\nlogreg.fit(x_train, y_train)\nacc_log_train = round(logreg.score(x_train, y_train)*100,2)\nacc_log_test = round(logreg.score(x_test, y_test)*100,2)\nprint(\"Training Accuracy %{} \".format(acc_log_train))\nprint(\"Testing Accuracy %{} \".format(acc_log_test))","8970450a":"random_state = 42\nclassifier = [DecisionTreeClassifier(random_state = random_state),\n             SVC(random_state = random_state),\n             RandomForestClassifier(random_state = random_state),\n             LogisticRegression(random_state = random_state),\n             KNeighborsClassifier()]\n\ndt_param_grid = {\"min_samples_split\" : range(10,500,20),\n                \"max_depth\": range(1,20,2)}\n\nsvc_param_grid = {\"kernel\" : [\"rbf\"],\n                 \"gamma\": [0.001, 0.01, 0.1, 1],\n                 \"C\": [1,10,50,100,200,300,1000]}\n\nrf_param_grid = {\"max_features\": [1,3,10],\n                \"min_samples_split\":[2,3,10],\n                \"min_samples_leaf\":[1,3,10],\n                \"bootstrap\":[False],\n                \"n_estimators\":[100,300],\n                \"criterion\":[\"gini\"]}\n\nlogreg_param_grid = {\"C\":np.logspace(-3,3,7),\n                    \"penalty\": [\"l1\",\"l2\"]}\n\nknn_param_grid = {\"n_neighbors\": np.linspace(1,19,10, dtype = int).tolist(),\n                 \"weights\": [\"uniform\",\"distance\"],\n                 \"metric\":[\"euclidean\",\"manhattan\"]}\n\nclassifier_param = [dt_param_grid,\n                   svc_param_grid,\n                   rf_param_grid,\n                   logreg_param_grid,\n                   knn_param_grid]","7b07cd60":"cv_result = []\nbest_estimators = []\n\nfor i in range(len(classifier)):\n    clf = GridSearchCV(classifier[i], param_grid=classifier_param[i], cv = StratifiedKFold(n_splits = 10), scoring = \"accuracy\", n_jobs = -1,verbose = 1)\n    clf.fit(x_train,y_train)\n    cv_result.append(clf.best_score_)\n    best_estimators.append(clf.best_estimator_)\n    print(cv_result[i])","f7a88ca9":"cv_results = pd.DataFrame({\"Cross Validation Means\":cv_result, \"ML Models\":[\"DecisionTreeClassifier\", \"SVM\",\"RandomForestClassifier\",\n             \"LogisticRegression\",\n             \"KNeighborsClassifier\"]})\n\ng = sns.barplot(\"Cross Validation Means\", \"ML Models\", data = cv_results)\ng.set_xlabel(\"Mean Accuracy\")\ng.set_title(\"Cross Validation Scores\")","808b0e67":"votingC = VotingClassifier(estimators = [(\"dt\", best_estimators[0]), \n                                        (\"rfc\", best_estimators[2]),\n                                        (\"lr\", best_estimators[3])],\n                                        voting = \"soft\", n_jobs = -1)\n                                         \nvotingC = votingC.fit(x_train, y_train)\nprint(accuracy_score(votingC.predict(x_test),y_test))","94442d02":"test_survived = pd.Series(votingC.predict(test), name = \"Survived\").astype(int)\nresults = pd.concat([test_PassengerId, test_survived],axis = 1)\nresults.to_csv(\"titanic.csv\", index = False)","a6fcf04b":"test_survived","b5065e70":"test","d2cfe062":"<a id='30'><a\/><br>\n\n## MODELING","ec39afd5":"#### Burada groupby'\u0131 kullanarak neye g\u00f6re gruplayaca\u011f\u0131m\u0131z\u0131 belirtiyoruz","ec1e7b34":"<a id='22'><a\/><br>\n\n## Feature Engineering","6eac437f":"<a id='14'><a\/><br>\n##  Parch-Survived","1bc499a4":"<a id='17'><a\/><br>\n\n## Parch -- Survived -- Age","49c7094b":"<a id= '9'><a\/><br>\n    \n## Find Missing Value\n","d6d39e49":"#### 1st class passengers are older than 2nd, and 2nd is older than 3rd class.","7342d0d2":"<a id= '7'><a\/><br>\n    \n# Outlier Detection","1c026da5":"<a id='12'><a\/><br>\n##  Correlation Between Sibsp--Parch--Age--Fare--Survived","111d6bea":"<a id='28'><a\/><br>       \n## Sex","95b910cc":"* float64(2): Fare ve Age\n* int64(5) : Pclass, sibsp, parch, passengerId and survived \n* object(5) : Cabin, embarked, ticket, name and sex","c789563e":"<a id='27'><a\/><br>       \n## Pclass","6ec8f3d9":"# Introduction\nThe sinking of the Titanic is the one of the most dramatic eventin the history which was filmed in 1997 by Steven Speilberg. The ship sank after colliding with iceberg that resulted in death of 1502 out of 2224 .\n<font color ='blue'>\n\n**Content:**\n\n1. [Load and check the Data](#1)\n\n2. [Variable Description](#2)\n    * [Unvariate Variable and Analysis](#3)\n        * [Categorical Variable and Analysis](#4)\n        * [Numerical Variable and Analysis](#5)\n        \n3. [Basic Data Analysis](#6)\n\n4. [Outlier Detection](#7)\n\n5. [Missing Value](#8)\n    * [Find Missing Value](#9)\n    * [Fill Missing Value](#10)\n    \n6. [Visualization](#11)\n    * [Correlation Between Sibsp--Parch--Age--Fare--Survived](#12)\n    * [Sibsp--Survived](#13)\n    * [Parch--Survived](#14)\n    * [Pclass--Survived](#15)\n    * [Age--Survived](#16)\n    * [Parch--Survived--Age](#17)\n    * [Pclass--Sex--Pclass](#18)\n    * [Embarked--Sex--Pclass--Survived](#19)\n    * [Embarked--Sex--Fare--Survived](#20)\n    * [Fill Missing: Age Feature](#21)\n\n7. [Feature Enginnering](#22)\n    * [Name -- Title](#23)\n    * [Family Size](#24)\n    * [Embarked](#25)\n    * [Ticket](#26)\n    * [Pclass](#27)\n    * [Sex](#28)\n    * [Drop Passenger ID and Cabin](#29)\n    \n8. [Modeling](#30)\n    * [Train - Test Split](#31)\n    * [Simple Logistic regression](#32)\n    * [Hyperpsrameter Tuning -- Grid Search -- Cross Validation](#33)\n    * [Ensemble Modeling](#34)\n    * [Prediction and Submission](#35)\n\n","d7defc24":"<a id= '8'><a\/><br>\n    \n# Missing Value\n\n* Find Missing Value\n* Fill Missing Value","d452dbe2":"<a id= '3'><a\/><br>\n    \n## Unvariate Variable Analysis\n\n*  Categorical Variable: survived, sex, embarked, Cabin, Name, Ticket, Sibsp and Parcj\n*  Numerical Variable: Fare, Age and passangerld","ba746388":"* Female passengers have much better survival rate than males.\n* Males have better survival rate in pclass 3 in C.\n* Embarked and sex will be used in training.","729c89b2":"<a id='26'><a\/><br>       \n## Ticket","7c4dcb8d":"<a id='23'><a\/><br>       \n## Name - Title","dd2c820c":"<a id='25'><a\/><br>       \n## Embarked","1157a2ea":"\n<a id='20'><a\/><br>\n\n## Embarked -- Sex -- Fare -- Survived","07b71858":"* Age <= 10 has a high survival rate,\n* Oldest passengers (80) survived,\n* Large number of 20 years old did not survive,\n* Most passengers are in 15-35 age range,\n* Use age feature in training\n* Use age distribution for missing value of age","a62183c0":"<a id= '5'><a\/><br>\n    \n### Numerical Variable","0e6995dc":"<a id='15'><a\/><br>\n##  Pclass-Survived","0f59569e":"<a id= '4'><a\/><br>\n    \n### Categorical Variable","3edae95a":"<a id='35'><a\/><br>\n    \n### Prediction and Submission","8dd2369b":"<a id= '10'><a\/><br>\n    \n## Fill Missing Value\n* Embark has 2 missing value\n* Fare has only 1","a997745a":"<a id='24'><a\/><br>       \n## Family Size","5cef2f40":"<a id='31'><a\/><br>\n\n### Train,Test and Split","6f1c3f06":"<a id='13'><a\/><br>\n##  Sibsp-Survived","bfb04ca1":"<a id= '1'><a\/><br>\n# Load and Check Data","7386c12c":"#### Sex is not informative for age prediction, age distribution seems to be same.","d7657fac":"<a id='18'><a\/><br>\n\n## Pclass -- Survived -- Age","628ce763":"<a id='11'><a\/><br>\n# Visualisation\n    * Correlation Between Sibsp--Parch--Age--Fare--Survived\n    * Sibsp--Survived\n    * Parch--Survived\n    * Pclass--Survived\n    * Age--Survived\n    * Parch--Survived--Age\n    * Pclass--Sex--Pclass\n    * Embarked--Sex--Pclass--Survived\n    * Embarked--Sex--Fare--Survived\n    * Fill Missing: Age Feature\n    ","147ff480":"<a id='19'><a\/><br>\n\n## Embarked -- Sex -- Pclass -- Survived","3431b367":"<a id='16'><a\/><br>\n##  Age-Survived","405faa86":"<a id= '6'><a\/><br>\n\n# Basic Data Analysis\n\n* Pclass - Survived\n* Sex - Survived\n* SibSp - Survived\n* Parch - Survived","1159d452":"<a id='32'><a\/><br>\n### Simple Logistic Regression","8338d1d6":"<a id='21'><a\/><br>\n\n## Fill Missing: Age Feature","b596a292":"<a id='29'><a\/><br>       \n## Drop Passanger ID and Cabin","4d744da2":"<font color ='black'> \n    \n <a id = '2'><a\/><br>\n    \n# Variable Description\n \n    1.   PassengerId : Unique id number to each passenger\n    2.   Survived: Passenger survived(1) or died(0)\n    3.   Pclass: passenger class\n    4.   Name: name\n    5.   Sex: gender of passenger\n    6.   Age: age of passenger\n    7.   SibSp: number of siblings\/spouses\n    8.   Parch: number of parents\/children\n    9.   Ticket: ticket number\n    10.  Fare: amount of money on ticket\n    11.  Cabin: cabin category\n    12.  Embarked: port where passengers embarked (C = Cherbourg, Q = Queenstown ,S = South)\n \n    \n    ","d8a085fc":"#### Small familes have more chance to survive than large families.","e5d40d55":"<a id='33'><a\/><br>\n    \n### Hyperparameter Tuning -- Grid Search -- Cross Validation\n    \nWe will compare 5 ml classifier and evaluate mean accuracy of each of them by stratified cross validation.\n\n* Decision Tree\n* SVM\n* Random Forest\n* KNN\n* Logistic Regression","ee11fe44":"<a id='34'><a\/><br>\n    \n### Ensamble Modeling"}}