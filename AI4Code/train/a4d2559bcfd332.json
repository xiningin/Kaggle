{"cell_type":{"cff96557":"code","bc8a168a":"code","1ef788fa":"code","08b7e28f":"code","a31f5d5f":"code","749c434a":"code","0d063da7":"code","ecf40b80":"code","04e1ee18":"code","5f490ac6":"code","4dff59e8":"code","0d587cee":"code","02deebf9":"code","3c111f70":"code","6e55d2ac":"code","4535fe5b":"code","856dc25b":"code","7eb7cc72":"code","7d097d41":"code","fe9cd13f":"code","ea0c35dd":"markdown","f064ab71":"markdown","8f788edc":"markdown","59378a16":"markdown","6c2eada7":"markdown"},"source":{"cff96557":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","bc8a168a":"import re\nimport nltk\nimport tqdm\nfrom nltk.corpus import stopwords\n\nimport tensorflow as tf\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras import layers, Sequential\nfrom tensorflow.keras.optimizers import Adam\n\n\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import confusion_matrix","1ef788fa":"train_df = pd.read_csv(r'\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_train.csv', encoding='latin_1')\ntest_df = pd.read_csv(r'\/kaggle\/input\/covid-19-nlp-text-classification\/Corona_NLP_test.csv', encoding='latin_1')","08b7e28f":"train_df.head()","a31f5d5f":"train_df.isnull().sum()","749c434a":"test_df.head()","0d063da7":"test_df.info()","ecf40b80":"test_df.isnull().sum()","04e1ee18":"train_x, train_y = train_df['OriginalTweet'].copy(), train_df['Sentiment'].copy()\ntrain_x.head()","5f490ac6":"stop = stopwords.words('english')\ndef clean(text):\n        # specific\n    text = re.sub(r\"won't\", \"will not\", text)\n    text = re.sub(r\"can\\'t\", \"can not\", text)\n\n    # general\n    text = re.sub(r\"n\\'t\", \" not\", text)\n    text = re.sub(r\"\\'re\", \" are\", text)\n    text = re.sub(r\"\\'s\", \" is\", text)\n    text = re.sub(r\"\\'d\", \" would\", text)\n    text = re.sub(r\"\\'ll\", \" will\", text)\n    text = re.sub(r\"\\'t\", \" not\", text)\n    text = re.sub(r\"\\'ve\", \" have\", text)\n    text = re.sub(r\"\\'m\", \" am\", text)\n# remove url\n#         text = re.sub(r'https?:\/\/\\S+|www\\.\\S+', ' ', text)\n    text = re.sub(r'http\\S+', '', text)\n# remove @\n    text = re.sub(r'@\\w+', '', text)\n# remove #\n    text = re.sub(r'#\\w+', '', text)\n    \n    text = re.sub(r'<.*?>', '', text)\n        \n    text = text.split()\n        \n    text = ' '.join([word.lower() for word in text if word.lower() not in stop])\n        \n    return text\n        \n        ","4dff59e8":"train_x.head()\ntrain_x_cleaned = train_x.apply(clean)\ntrain_x_cleaned.head()","0d587cee":"train_y.value_counts()","02deebf9":"def pretrain(sentiment):\n    if sentiment == \"Positive\":\n        return 0\n    \n    elif sentiment == \"Extremely Positive\":\n        return 0\n    \n    elif sentiment == \"Negative\":\n        return 1\n    \n    elif sentiment == \"Extremely Negative\":\n        return 1\n    \n    else:\n        return 2\n    \ntrain_y = train_y.apply(pretrain)\ntrain_y.value_counts(normalize= True)","3c111f70":"tokenizer = Tokenizer()\ntokenizer.fit_on_texts(train_x_cleaned)\nvocab_size = len(tokenizer.word_index) + 1\nprint('vocabulary size:{}'.format(vocab_size))\nmax_len = max(train_x_cleaned.apply(len))\nprint('max length of input:{}'.format(max_len))\nsequence = tokenizer.texts_to_sequences(train_x_cleaned)\n\nx = pad_sequences(sequence, max_len, padding='post')\nprint('example x:{}'.format(x[4]))","6e55d2ac":"BATCH_SIZE = 64\nEPOCHS = 4\nembedding_dim=16\nmodel = Sequential([\n    layers.Embedding(vocab_size, embedding_dim, input_length=max_len),\n    layers.Bidirectional(layers.GRU(256, return_sequences=True)),\n    layers.GlobalMaxPool1D(),\n    layers.Dense(64, activation='relu'),\n    layers.Dropout(0.4),\n    layers.Dense(3, activation='sigmoid')\n    \n])\nmodel.summary()","4535fe5b":"model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\nhistory = model.fit(x, train_y, epochs=EPOCHS, batch_size=BATCH_SIZE, validation_split=0.1)","856dc25b":"acc = history.history['accuracy']\nloss = history.history['loss']\nval_acc = history.history['val_accuracy']\nval_loss = history.history['val_loss']\n\n_, axis = plt.subplots(1,2, figsize=(16,8))\naxis[0].plot(range(EPOCHS), loss, label='loss')\naxis[0].plot(range(EPOCHS), acc, label='loss')\naxis[1].plot(range(EPOCHS), val_loss, label='loss')\naxis[1].plot(range(EPOCHS), val_acc, label='loss')\naxis[0].legend()\naxis[1].legend()\naxis[0].set_title('loss & accuracy')\naxis[0].set_xlabel('epochs')\n\naxis[1].set_title('val_loss & val_accuracy')\naxis[1].set_xlabel('epochs')\n\nplt.show()\n","7eb7cc72":"test_x = test_df['OriginalTweet'].copy()\ntest_y = test_df['Sentiment'].copy()\ntest_x = test_x.apply(clean)\ntest_x = tokenizer.texts_to_sequences(test_x)\ntest_x = pad_sequences(test_x, max_len, padding='post')\ntest_y = test_y.apply(pretrain)","7d097d41":"y_pred = model.predict(test_x)\ny_pred = np.argmax(y_pred, axis=1)\nprint(y_pred)","fe9cd13f":"\ncm = confusion_matrix(test_y, y_pred)\ncm_df = pd.DataFrame(cm,index=[0,1,2],columns=[0,1,2])\nprint(\"Accuracy:\",accuracy_score(test_y, y_pred))\n\nsns.set(font_scale=1.4,color_codes=True,palette=\"deep\")\nsns.heatmap(cm_df,annot=True,annot_kws={\"size\":16},fmt=\"d\",cmap=\"YlGnBu\")\nplt.title(\"Confusion Matrix\")\nplt.xlabel(\"Predicted Value\")\nplt.ylabel(\"True Value\")","ea0c35dd":"# 2.Data cleaning","f064ab71":"# 4.Model","8f788edc":"# Data loading","59378a16":"# 3.Tokenize","6c2eada7":"# 5.Test results"}}