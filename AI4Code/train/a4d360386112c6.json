{"cell_type":{"aca973d2":"code","b6024683":"code","98010c86":"code","91f45d97":"code","d1532d42":"code","a90969b4":"code","97b568f8":"code","35baddac":"code","e1e478e3":"code","a266ff7c":"code","8d93a9c9":"code","42086b75":"code","bd21e7ea":"code","c3c5468b":"code","a257682c":"code","824ae408":"code","c2addd10":"code","999b7118":"markdown","7c02bdeb":"markdown","73d9db7e":"markdown","17a7c2fc":"markdown","b7bb7d97":"markdown","034e8551":"markdown","fec1be5f":"markdown","9e0853f5":"markdown","6c6648ea":"markdown"},"source":{"aca973d2":"\nfrom IPython.display import Image\nImage(\"..\/input\/cycliclearningrate-1\/keras_clr_triangular.png\")","b6024683":"import pandas as pd, numpy as np\nimport tensorflow as tf\nimport tensorflow.keras.backend as K\nfrom sklearn.model_selection import StratifiedKFold\nfrom transformers import *\nimport tokenizers\nprint('TF version',tf.__version__)","98010c86":"MAX_LEN = 96\nPATH = '..\/input\/tf-roberta\/'\ntokenizer = tokenizers.ByteLevelBPETokenizer(\n    vocab_file=PATH+'vocab-roberta-base.json', \n    merges_file=PATH+'merges-roberta-base.txt', \n    lowercase=True,\n    add_prefix_space=True\n)\nsentiment_id = {'positive': 1313, 'negative': 2430, 'neutral': 7974}\ntrain = pd.read_csv('..\/input\/tweet-sentiment-extraction\/train.csv').fillna('')\n# train_pos = train[train.sentiment == \"positive\"].reset_index()\ntrain_neg = train[train.sentiment == \"negative\"].reset_index()\n# print(train_pos.shape)\n# print(train_neg.shape)\n#train = train_neg\n","91f45d97":"e = tokenizer.encode(\"going\")\nprint(e.ids)","d1532d42":"print(train.shape)","a90969b4":"ct = train.shape[0]\ninput_ids = np.ones((ct,MAX_LEN),dtype='int32')\nattention_mask = np.zeros((ct,MAX_LEN),dtype='int32')\ntoken_type_ids = np.zeros((ct,MAX_LEN),dtype='int32')\nstart_tokens = np.zeros((ct,MAX_LEN),dtype='int32')\nend_tokens = np.zeros((ct,MAX_LEN),dtype='int32')\n\nfor k in range(ct):\n      \n    \n    # FIND OVERLAP\n    text1 = \" \"+\" \".join(train.loc[k,'text'].split()).strip()\n    text2 = \" \".join(train.loc[k,'selected_text'].split()).strip()\n    \n    text1 = text1.replace(\"_\",\"\")\n    idx = text1.find(text2)\n    chars = np.zeros((len(text1)))\n    chars[idx:idx+len(text2)]=1\n    if text1[idx-1]==' ': chars[idx-1] = 1 \n    enc = tokenizer.encode(text1)\n    enc2 = tokenizer.encode(text2)\n   \n        \n    # ID_OFFSETS\n    offsets = []; idx=0\n    for t in enc.ids:\n        w = tokenizer.decode([t])\n        offsets.append((idx,idx+len(w)))\n        idx += len(w)\n    \n    print(offsets)\n    # START END TOKENS\n    toks = []\n    for i,(a,b) in enumerate(offsets):\n        sm = np.sum(chars[a:b])\n        if sm>0: toks.append(i) \n        \n    s_tok = sentiment_id[train.loc[k,'sentiment']]\n    input_ids[k,:len(enc.ids)+5] = [0] + enc.ids + [2,2] + [s_tok] + [2]\n    attention_mask[k,:len(enc.ids)+5] = 1\n    if len(toks)>0:\n        start_tokens[k,toks[0]+1] = 1\n        end_tokens[k,toks[-1]+1] = 1\n    \n    ","97b568f8":"test = pd.read_csv('..\/input\/tweet-sentiment-extraction\/test.csv').fillna('')\n\nct = test.shape[0]\ninput_ids_t = np.ones((ct,MAX_LEN),dtype='int32')\nattention_mask_t = np.zeros((ct,MAX_LEN),dtype='int32')\ntoken_type_ids_t = np.zeros((ct,MAX_LEN),dtype='int32')\n\nfor k in range(test.shape[0]):\n    \n#     if test.loc[k, 'sentiment'] == \"neutral\":\n#         continue\n        \n    # INPUT_IDS\n    text1 = \" \"+\" \".join(test.loc[k,'text'].split())\n    text1 = text1.replace(\"_\",\"\")\n    enc = tokenizer.encode(text1)                \n    s_tok = sentiment_id[test.loc[k,'sentiment']]\n    input_ids_t[k,:len(enc.ids)+5] = [0] + enc.ids + [2,2] + [s_tok] + [2]\n    attention_mask_t[k,:len(enc.ids)+5] = 1","35baddac":"\ndef build_model():\n    \n    '''\n    Function which builds the model [ BERT + 2 Softmax layers head ] for span prediction\n    '''\n    \n    ids = tf.keras.layers.Input((MAX_LEN,), dtype=tf.int32)\n    att = tf.keras.layers.Input((MAX_LEN,), dtype=tf.int32)\n    tok = tf.keras.layers.Input((MAX_LEN,), dtype=tf.int32)\n\n    config = RobertaConfig.from_pretrained(PATH+'config-roberta-base.json')\n    bert_model = TFRobertaModel.from_pretrained(PATH+'pretrained-roberta-base.h5',config=config)\n     \n    x_bert = bert_model([ids,att,tok])\n\n    \n    logits = tf.keras.layers.Dense(2, activation=\"linear\", kernel_initializer=\"he_normal\")(x_bert[0])\n    print(x_bert[0].shape)\n    start_logits, end_logits = tf.split(logits, 2, axis=-1)\n    start_logits = tf.squeeze(start_logits, axis=-1)\n    end_logits = tf.squeeze(end_logits, axis=-1)   \n   \n    start_scores = tf.keras.layers.Activation('softmax')(start_logits)\n    end_scores = tf.keras.layers.Activation('softmax')(end_logits)    \n\n   \n    model = tf.keras.models.Model(inputs=[ids, att, tok], outputs=[start_scores,end_scores])\n    optimizer = tf.keras.optimizers.Adam(learning_rate=0.00003)\n    model.compile(loss='categorical_crossentropy', optimizer=optimizer,metrics=['accuracy'])\n\n    return model","e1e478e3":"model = build_model()\nmodel.summary()","a266ff7c":"def jaccard(str1, str2): \n    \n    '''\n    Function which computes the jaccard score\n    '''\n    \n    a = set(str1.lower().split()) \n    b = set(str2.lower().split())\n    if (len(a)==0) & (len(b)==0): return 0.5\n    c = a.intersection(b)\n    return float(len(c)) \/ (len(a) + len(b) - len(c))","8d93a9c9":"print(start_tokens.shape)\nprint(end_tokens.shape)","42086b75":"from keras.callbacks import *\nclass CyclicLR(Callback):\n    '''\n    Class which implements the cyclic Learning rate\n    \n    '''\n    \n\n    def __init__(self, base_lr=0.001, max_lr=0.006, step_size=2000., mode='triangular',\n                 gamma=1., scale_fn=None, scale_mode='cycle'):\n        super(CyclicLR, self).__init__()\n\n        self.base_lr = base_lr\n        self.max_lr = max_lr\n        self.step_size = step_size\n        self.mode = mode\n        self.gamma = gamma\n        self.scale_mode = 'cycle'\n        print(self.scale_mode)\n        if scale_fn == None:\n            if self.mode == 'triangular':\n                self.scale_fn = lambda x: 1.\n                self.scale_mode = 'cycle'\n            elif self.mode == 'triangular2':\n                self.scale_fn = lambda x: 1\/(2.**(x-1))\n                self.scale_mode = 'cycle'\n            elif self.mode == 'exp_range':\n                self.scale_fn = lambda x: gamma**(x)\n                self.scale_mode = 'iterations'\n        else:\n            self.scale_fn = scale_fn\n            self.scale_mode = scale_mode\n        self.clr_iterations = 0.\n        self.trn_iterations = 0.\n        self.history = {}\n\n        self._reset()\n\n    def _reset(self, new_base_lr=None, new_max_lr=None,\n               new_step_size=None):\n       \n        if new_base_lr != None:\n            self.base_lr = new_base_lr\n        if new_max_lr != None:\n            self.max_lr = new_max_lr\n        if new_step_size != None:\n            self.step_size = new_step_size\n        self.clr_iterations = 0.\n        \n    def clr(self):\n        cycle = np.floor(1+self.clr_iterations\/(2*self.step_size))\n        x = np.abs(self.clr_iterations\/self.step_size - 2*cycle + 1)\n        if self.scale_mode == 'cycle':\n            return self.base_lr + (self.max_lr-self.base_lr)*np.maximum(0, (1-x))*self.scale_fn(cycle)\n        else:\n            return self.base_lr + (self.max_lr-self.base_lr)*np.maximum(0, (1-x))*self.scale_fn(self.clr_iterations)\n        \n    def on_train_begin(self, logs={}):\n        logs = logs or {}\n\n        if self.clr_iterations == 0:\n            print(\"Setting the lr to {}\".format(self.base_lr))\n            K.set_value(self.model.optimizer.lr, self.base_lr)\n        else:\n            K.set_value(self.model.optimizer.lr, self.clr())        \n            \n    def on_batch_end(self, epoch, logs=None):\n        \n        logs = logs or {}\n        self.trn_iterations += 1\n        self.clr_iterations += 1\n\n        #print(\"learning rate is {} \".format(K.get_value(self.model.optimizer.lr))) \n        self.history.setdefault('lr', []).append(K.get_value(self.model.optimizer.lr))\n        self.history.setdefault('iterations', []).append(self.trn_iterations)\n\n        for k, v in logs.items():\n            self.history.setdefault(k, []).append(v)\n        \n        K.set_value(self.model.optimizer.lr, self.clr())\n        \n\n\n\n","bd21e7ea":"clr = CyclicLR(\n\tmode='triangular',\n\tbase_lr= 1e-6,\n\tmax_lr= 4e-5,\n\tstep_size= 320,\n    scale_mode='cycle')","c3c5468b":"jac = []; VER='v4'; DISPLAY=1 # USE display=1 FOR INTERACTIVE\n# oof_start = np.zeros((input_ids.shape[0],MAX_LEN))\n# oof_end = np.zeros((input_ids.shape[0],MAX_LEN))\npreds_start = np.zeros((input_ids.shape[0],MAX_LEN))\npreds_end = np.zeros((input_ids.shape[0],MAX_LEN))\n\ndef scheduler(epoch):\n    if epoch <1:\n      return 0.00003\n    else:\n      return 0.00003 * tf.math.exp(-0.1 * (10 - epoch))\n\nreduce_lr = tf.keras.callbacks.LearningRateScheduler(scheduler,verbose=1)\nfrom sklearn.model_selection import KFold\n\nn_splits = 5\n\nskf = StratifiedKFold(n_splits=n_splits,shuffle=True,random_state=42)\nfor fold,(idxT,idxV) in enumerate(skf.split(input_ids,train.sentiment.values)):\n    print(idxT,idxV)\n    print(\"Training for fold {}\" .format(fold))  \n         \n    K.clear_session()\n    model = build_model()\n   \n    sv = tf.keras.callbacks.ModelCheckpoint(\n        '%s-roberta-%i.h5'%(VER,fold), monitor='val_loss', verbose=1, save_best_only=True,\n        save_weights_only=True, mode='auto', save_freq='epoch')\n        \n    hist = model.fit([input_ids[idxT,], attention_mask[idxT,], token_type_ids[idxT,]], [start_tokens[idxT,], end_tokens[idxT,]], \n        epochs=3, batch_size=32, verbose=DISPLAY, callbacks=[sv,reduce_lr],\n        validation_data=([input_ids[idxV,],attention_mask[idxV,],token_type_ids[idxV,]], \n        [start_tokens[idxV,], end_tokens[idxV,]]))\n        \n  \n    model.load_weights('%s-roberta-%i.h5'%(VER,fold))\n    preds_start[idxV,],preds_end[idxV,] = model.predict([input_ids[idxV,],attention_mask[idxV,],token_type_ids[idxV,]],verbose=1)\n\n    all = []\n    for k in idxV:\n        a = np.argmax(preds_start[k,])\n        b = np.argmax(preds_end[k,])\n        if a>b: \n            st = train.loc[k,'text'] # IMPROVE CV\/LB with better choice here\n        else:\n            text1 = \" \"+\" \".join(train.loc[k,'text'].split())\n            enc = tokenizer.encode(text1)\n            st = tokenizer.decode(enc.ids[a-1:b])\n            #print(st)\n        all.append(jaccard(st,train.loc[k,'selected_text']))\n    jac.append(np.mean(all))\n    print('>>>> FOLD %i Jaccard ='%(fold+1),np.mean(all))\n    \n\n","a257682c":"preds_start = np.zeros((input_ids_t.shape[0],MAX_LEN))\npreds_end = np.zeros((input_ids_t.shape[0],MAX_LEN))\nDISPLAY=1\nfor i in range(n_splits):   \n    \n    print('#'*25)\n    print('### MODEL %i'%(i+1))\n    print('#'*25)\n    \n    K.clear_session()\n    model = build_model()\n    model.load_weights('v4-robertafulldata-%i.h5'%i)\n\n    print('Predicting Test...')\n    preds = model.predict([input_ids_t,attention_mask_t,token_type_ids_t],verbose=DISPLAY)\n    preds_start += preds[0]\/n_splits\n    preds_end += preds[1]\/n_splits","824ae408":"#Train\nall = []\njaccard_score = 0\nfor k in range(input_ids_t.shape[0]):\n    \n    score_array = np.zeros((MAX_LEN,MAX_LEN),dtype='float32')\n    for i in range(MAX_LEN):\n        score_array[i,:] = preds_start[k,i] + preds_end[k,]\n    \n    \n    # Find the combination of indices whose combined probability is maximum\n    result = np.argmax(score_array)\n    (a,b) = np.unravel_index(result, score_array.shape)\n   \n  \n    if a>b:\n        print(\"Result {}\".format(a))\n        print(\"Truth {}\".format(np.argmax(start_tokens[k,])))\n        st = test.loc[k,'text']\n        \n    else:\n        \n        if test.loc[k, 'sentiment'] == \"neutral\":\n            st = test.loc[k,'text']\n            \n        else:\n     \n            text1 = \" \"+\" \".join(test.loc[k,'text'].split())\n            enc = tokenizer.encode(text1)\n            st = tokenizer.decode(enc.ids[a-1:b])\n    \n    all.append(st)","c2addd10":"test['selected_text'] = all\ntest[['textID','selected_text']].to_csv('submission.csv',index=False)\npd.set_option('max_colwidth', 60)\ntest.head(25)","999b7118":"SoftMax Layer head is used on top of the BERT model to predict the index of start words and stop words in the answer","7c02bdeb":"Training on complete DataSet","73d9db7e":"**Max_lr :** maximum learning rate<br>\n**lr - **minimum learning rate or base learning rate<Br>\n**step_size -** number of batches that it takes to reach the maximum learning rate.<br>","17a7c2fc":"### Overall Model highlights:<br>\n1.BERT base pre trained model from Hugging face is used.<br>\n2.Softmax layer head used on top of the BERT base output.<Br>\n3.Cyclic Learning rate is used as a learning rate scheduler.<br>\n4.Training data split into 5 folds and model is saved for each fold.<Br>\n5.Results of all the 5 models are averaged.<Br>\n6.A pair (start_index, end_index) is selected such that the probability of start_index + probability of end_index is maximum.<br>","b7bb7d97":"### Acknowledgements:<Br>[](http:\/\/)\nData preparation for BERT model is based on Abhishek Thakur's Notebook.\n","034e8551":"A pair (start_index, end_index) is selected such a way that probability of start_index+end_index is maximum","fec1be5f":"# Test Data\nWe must tokenize the test data exactly the same as we tokenize the training data","9e0853f5":"#### Achieved Jaccard score of 0.708 on the test set","6c6648ea":"### Triangular Cyclic Learning Rate"}}