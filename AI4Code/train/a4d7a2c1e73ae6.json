{"cell_type":{"4789f85e":"code","091f737d":"code","42436d0f":"code","59f84cad":"code","3576d76c":"code","f171486a":"code","3841f29d":"code","e0d80104":"code","be6fd9a2":"code","e7d3710a":"code","5658e376":"code","7e6acea4":"code","be74b7e6":"code","83585418":"code","29791f71":"code","84e6798d":"code","83956cb7":"code","0d104613":"code","c2383ba7":"code","89d52fa8":"code","eac56a1a":"code","306862eb":"code","f8aca48e":"code","a7b32d99":"code","d1b8f788":"code","da59c446":"code","4e9dfda4":"code","55fa2871":"code","2af09fee":"markdown","d5e5ceb1":"markdown","501a4c3b":"markdown","b69513b7":"markdown","856eaec8":"markdown","0f5f3aee":"markdown","cf045cfb":"markdown","ecf8d496":"markdown","4b08cf42":"markdown","22d7f73c":"markdown","5fe8d29a":"markdown","0db59dc6":"markdown","bb865311":"markdown","8721e011":"markdown","d0be2ebd":"markdown","e77b295a":"markdown","11d69dec":"markdown"},"source":{"4789f85e":"import pandas as pd\nimport numpy as np\n# import the regressor \nfrom sklearn.tree import DecisionTreeRegressor  \nfrom sklearn.metrics import mean_absolute_error","091f737d":"#dataframe = pd.read_csv(\"https:\/\/introtomlsampledata.blob.core.windows.net\/data\/bike-rental\/bike-rental-hour.csv\")\ndataframe = pd.read_csv(\"..\/input\/bikerentalhour\/bike-rental-hour.csv\")","42436d0f":"dataframe.head()","59f84cad":"dataframe.columns","3576d76c":"dataframe.dtypes","f171486a":"categoryVariableList = [\"season\",\"weathersit\"]\nfor var in categoryVariableList:\n    dataframe[var] = dataframe[var].astype(\"category\")\n","3841f29d":"dataframe.dtypes","e0d80104":"dataframe = dataframe.drop([\"instant\", \"dteday\", \"casual\" ,\"registered\"], axis = 1)","be6fd9a2":"dataframe.head()","e7d3710a":"dataframesetA = dataframe.copy()\ndataframesetA.columns","5658e376":"def azureml_main(dataframe1 = None, dataframe2 = None):\n\n    # Execution logic goes here\n    #print(f'Input pandas.DataFrame #1: {dataframe1}')\n\n    # If a zip file is connected to the third input port,\n    # it is unzipped under \".\/Script Bundle\". This directory is added\n    # to sys.path. Therefore, if your zip file contains a Python file\n    # mymodule.py you can import it using:\n    # import mymodule\n\n    for i in np.arange(1, 13):\n        prev_col_name = 'cnt' if i == 1 else 'Rentals in hour -{}'.format(i-1)\n        new_col_name = 'Rentals in hour -{}'.format(i)\n\n        dataframe1[new_col_name] = dataframe1[prev_col_name].shift(1).fillna(0)\n\n    # Return value must be of a sequence of pandas.DataFrame\n    # E.g.\n    #   -  Single return value: return dataframe1,\n    #   -  Two return values: return dataframe1, dataframe2\n    return dataframe1,","7e6acea4":"dataframesetAB = azureml_main(dataframe)[0]","be74b7e6":"dataframesetAB.columns","83585418":"dataframesetAB.head()","29791f71":"dataframesetAtest = dataframesetA[dataframesetA[\"yr\"] == 0]\ndataframesetAtrain = dataframesetA[dataframesetA[\"yr\"] != 0]\ndataframesetAtest.shape,dataframesetAtrain.shape","84e6798d":"dataframesetABtest = dataframesetAB[dataframesetAB[\"yr\"] == 0]\ndataframesetABtrain = dataframesetAB[dataframesetAB[\"yr\"] != 0]\ndataframesetABtest.shape,dataframesetABtrain.shape","83956cb7":"dataframesetAtest = dataframesetAtest.drop([\"yr\"],axis = 1)\ndataframesetAtrain = dataframesetAtrain.drop([\"yr\"],axis = 1)\ndataframesetABtest = dataframesetABtest.drop([\"yr\"],axis = 1)\ndataframesetABtrain = dataframesetABtrain.drop([\"yr\"],axis = 1)","0d104613":"dataframesetAtest.shape,dataframesetAtrain.shape","c2383ba7":"dataframesetABtest.shape,dataframesetABtrain.shape","89d52fa8":"dataframesetAtestX = dataframesetAtest.drop([\"cnt\"],axis = 1)\ndataframesetAtesty = dataframesetAtest[\"cnt\"]\ndataframesetAtestX.shape,dataframesetAtesty.shape","eac56a1a":"dataframesetAtrainX = dataframesetAtrain.drop([\"cnt\"],axis = 1)\ndataframesetAtrainy = dataframesetAtrain[\"cnt\"]\ndataframesetAtrainX.shape,dataframesetAtrainy.shape","306862eb":"dataframesetABtestX = dataframesetABtest.drop([\"cnt\"],axis = 1)\ndataframesetABtesty = dataframesetABtest[\"cnt\"]\ndataframesetABtestX.shape,dataframesetABtesty.shape","f8aca48e":"dataframesetABtrainX = dataframesetABtrain.drop([\"cnt\"],axis = 1)\ndataframesetABtrainy = dataframesetABtrain[\"cnt\"]\ndataframesetABtrainX.shape,dataframesetABtrainy.shape","a7b32d99":"regressorA = DecisionTreeRegressor(random_state = 0)  \nregressorA.fit(dataframesetAtrainX, dataframesetAtrainy) ","d1b8f788":"regressorAB = DecisionTreeRegressor(random_state = 0)  \nregressorAB.fit(dataframesetABtrainX, dataframesetABtrainy) ","da59c446":"maesetA = mean_absolute_error(dataframesetAtesty, regressorA.predict(dataframesetAtestX))","4e9dfda4":"maesetAB = mean_absolute_error(dataframesetABtesty,regressorAB.predict(dataframesetABtestX))","55fa2871":"print(\"The Mean Absolute Error for set A: \" + str(maesetA))\nprint(\"The Mean Absolute Error for set A + B: \" + str(maesetAB))","2af09fee":"Creating dataset for set A. \nReason for creating a copy of dataframe and not directly using dataframesetA = dataframe: https:\/\/stackoverflow.com\/questions\/27673231\/why-should-i-make-a-copy-of-a-data-frame-in-pandas#:~:text=Because%20if%20you%20don't,dataFrame%20to%20a%20different%20name.&text=It's%20necessary%20to%20mention%20that,depends%20on%20kind%20of%20indexing.&text=The%20rules%20about%20when%20a,are%20entirely%20dependent%20on%20NumPy.","d5e5ceb1":"Creating dataset for set A+B.\n\nUsing the function that we have been provided.\n\nnp.arrange: Return evenly spaced values within a given interval. Values are generated within the half-open interval [start, stop) (in other words, the interval including start but excluding stop). For integer arguments the function is equivalent to the Python built-in range function, but returns an ndarray rather than a list.\n\ncolumn.shift: Shift index by desired number of periods (hours, in our case).\n\ncolumn.fillna: Fill NA\/NaN values using the specified method (0, in our case).","501a4c3b":"Creating a regressor object for set A and fitting it with X and y data.\n","b69513b7":"Finding out the names and types of columns that we have in the dataset using dataframe.columns and dataframe.dtypes. Remember columns and dtypes are attributes and not methods, that is why there is no () after them.","856eaec8":"Importing the required libraries:\n1. pandas: For reading and manipulating our dataset\n2. numpy: Used for working on arrays\n3. sklearn.tree: For importing our Decision Tree Regressor\n4. sklearn.metrics: Importing this will enable us to use different metrics for evaluating our model","0f5f3aee":"Having a first glance at the dataset using head(n) where n is the number of rows from top you want to preview, default is 5. tail(n) will show you rows from bottom.  ","cf045cfb":"Dropping \"yr\" column from all test and train datasets","ecf8d496":"\nCreating X and y for test and train set A \n","4b08cf42":"Reading the dataset via the web url provided","22d7f73c":"Converting type of \"season\" and \"weathersit\" to categorical.","5fe8d29a":"Creating a regressor object for set A + B and fitting it with X and y data.","0db59dc6":"Printing both the Mean Absolute Errors.","bb865311":"Splitting data into test and train for both set A and set A+B","8721e011":"Dropping the \"instant\", \"dteday\", \"casual\" and \"registered\" columns (axis = 0 or \u2018index\u2019, 1 or \u2018columns\u2019).","d0be2ebd":"Calculating the Mean Absolute Error for both the sets.","e77b295a":"Creating X and y for test and train set A + B","11d69dec":"# Engineer and select features\n\n\nThis lab demonstrates the feature engineering process for building a regression model using bike rental demand prediction as an example. In machine learning predictions, effective feature engineering will lead to a more accurate model. We will use the Bike Rental UCI dataset as the input raw data for this experiment. This dataset is based on real data from the Capital Bikeshare company, which operates a bike rental network in Washington DC in the United States. The dataset contains 17,379 rows and 17 columns, each row representing the number of bike rentals within a specific hour of a day in the years 2011 or 2012. Weather conditions (such as temperature, humidity, and wind speed) were included in this raw feature set, and the dates were categorized as holiday vs. weekday etc.\n\nThe field to predict is cnt which contains a count value ranging from 1 to 977, representing the number of bike rentals within a specific hour. Our main goal is to construct effective features in the training data, so we build two models using the same algorithm, but with two different datasets. Using the Split Data module in the visual designer, we split the input data in such a way that the training data contains records for the year 2011, and the testing data, records for 2012. Both datasets have the same raw data at the origin, but we added different additional features to each training set:\n\nSet A = weather + holiday + weekday + weekend features for the predicted day\nSet B = number of bikes that were rented in each of the previous 12 hours\nWe are building two training datasets by combining the feature set as follows:\n\nTraining set 1: feature set A only\nTraining set 2: feature sets A+B\nFor the model, we are using regression because the number of rentals (the label column) contains continuos real numbers. As the algorithm for the experiment, we will be using the Boosted Decision Tree Regression."}}