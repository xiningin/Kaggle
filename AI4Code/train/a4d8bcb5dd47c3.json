{"cell_type":{"0b08edf9":"code","74174258":"code","779e430d":"code","a468fc50":"code","e9eb6bd1":"code","107112ab":"code","d5757f09":"code","7f7d13a1":"code","ea0e82bc":"code","0a5e337a":"code","9f14cef4":"code","9a6b659c":"code","ceb88772":"code","2866ff57":"code","e89ceeae":"code","5f50132a":"code","42b0fd96":"code","41f4b9b3":"code","1c31501a":"code","e4045b27":"code","b3f3415f":"code","689e0922":"code","9cb6fc20":"code","cdbe5f40":"code","91596c79":"markdown","7a324773":"markdown","76264d87":"markdown","5dfc29ac":"markdown","dbfca494":"markdown","3be12b46":"markdown","d47fc42c":"markdown","a47489b0":"markdown"},"source":{"0b08edf9":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport plotly.offline as py\nimport plotly.graph_objs as go\nimport plotly.express as px\nimport seaborn as sns\nimport warnings\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","74174258":"df = pd.read_csv('..\/input\/determine-the-pattern-of-tuberculosis-spread\/tubercolusis_from 2007_WHO.csv')\ndf.head()","779e430d":"#Correlation map to see how features are correlated with each other and with SalePrice\ncorrmat = df.corr(method='kendall')\nplt.subplots(figsize=(8,6))\nsns.heatmap(corrmat, vmax=0.9, square=True)","a468fc50":"df.isnull().sum()","e9eb6bd1":"# filling missing values with NA\ndf[['Number of prevalent tuberculosis cases (End range)', 'Number of deaths due to tuberculosis, excluding HIV (Start range)', 'Number of deaths due to tuberculosis, excluding HIV (End range)','Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)']] = df[['Number of prevalent tuberculosis cases (End range)', 'Number of deaths due to tuberculosis, excluding HIV (Start range)', 'Number of deaths due to tuberculosis, excluding HIV (End range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)']].fillna('NA')","107112ab":"#df = df.fillna(value = {'Number of prevalent tuberculosis cases (End range)' : 'no_info', \n                           # 'Number of deaths due to tuberculosis, excluding HIV (Start range)' : 'no_info', \n                           # 'Number of deaths due to tuberculosis, excluding HIV (End range)':'no_info',\n                          # 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)' : 'no_info',\n                           #'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)' : 'no_info'})","d5757f09":"from sklearn.preprocessing import LabelEncoder\ncategorical_col = ('Country', 'Number of deaths due to tuberculosis, excluding HIV', 'Number of deaths due to tuberculosis, excluding HIV (Start range)', 'Number of deaths due to tuberculosis, excluding HIV (End range)', 'Number of prevalent tuberculosis cases', 'Number of prevalent tuberculosis cases (Start range)', 'Number of prevalent tuberculosis cases (End range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (Start range)', 'Deaths due to tuberculosis among HIV-negative people (per 100 000 population) (End range)', 'Prevalence of tuberculosis (per 100 000 population)', 'Prevalence of tuberculosis (per 100 000 population)(end range)')\n        \n        \nfor col in categorical_col:\n    label = LabelEncoder() \n    label.fit(list(df[col].values)) \n    df[col] = label.transform(list(df[col].values))\n\nprint('Shape all_data: {}'.format(df.shape))","7f7d13a1":"from scipy.stats import norm, skew\nnum_features = df.dtypes[df.dtypes != 'object'].index\nskewed_features = df[num_features].apply(lambda x: skew(x.dropna())).sort_values(ascending=False)\nskewness = pd.DataFrame({'Skew' :skewed_features})\nskewness.head(15)","ea0e82bc":"numerical_df = df.select_dtypes(exclude='object')\n\nfor i in range(len(numerical_df.columns)):\n    f, ax = plt.subplots(figsize=(7, 4))\n    fig = sns.distplot(numerical_df.iloc[:,i].dropna(), rug=True, hist=False, label='UW', kde_kws={'bw':0.1})\n    plt.xlabel(numerical_df.columns[i])","0a5e337a":"from sklearn.model_selection import train_test_split\n# Hot-Encode Categorical features\ndf = pd.get_dummies(df) \n\n# Splitting dataset back into X and test data\nX = df[:len(df)]\ntest = df[len(df):]\n\nX.shape","9f14cef4":"# Save target value for later\ny = df.Year.values\n\n# In order to make imputing easier, we combine train and test data\ndf.drop(['Year'], axis=1, inplace=True)\ndf = pd.concat((df, test)).reset_index(drop=True)","9a6b659c":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.20, random_state=0)","ceb88772":"from sklearn.model_selection import KFold\n# Indicate number of folds for cross validation\nkfolds = KFold(n_splits=5, shuffle=True, random_state=42)\n\n# Parameters for models\ne_alphas = [0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007]\ne_l1ratio = [0.8, 0.85, 0.9, 0.95, 0.99, 1]\nalphas_alt = [14.5, 14.6, 14.7, 14.8, 14.9, 15, 15.1, 15.2, 15.3, 15.4, 15.5]\nalphas2 = [0.00005, 0.0001, 0.0002, 0.0003, 0.0004, 0.0005, 0.0006, 0.0007, 0.0008]","2866ff57":"from sklearn.model_selection import KFold, cross_val_score\nfrom sklearn.preprocessing import RobustScaler\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.pipeline import Pipeline","e89ceeae":"from xgboost import XGBRegressor\nxgboost = make_pipeline(RobustScaler(),\n                        XGBRegressor(learning_rate =0.01, n_estimators=3460, \n                                     max_depth=3,min_child_weight=0 ,\n                                     gamma=0, subsample=0.7,\n                                     colsample_bytree=0.7,nthread=4,\n                                     scale_pos_weight=1,seed=27, \n                                     reg_alpha=0.00006))\n\n# Printing out XGBOOST Score and STD\nxgboost_score = cross_val_score(xgboost, X, y, cv=kfolds, scoring='neg_mean_squared_error')\nxgboost_rmse = np.sqrt(-xgboost_score.mean())\nprint(\"XGBOOST RMSE: \", xgboost_rmse)\nprint(\"XGBOOST STD: \", xgboost_score.std())","5f50132a":"# Separate target variable\n\ndf_tunning = df\ny = df_tunning.iloc[:,1]\nX = pd.concat([df_tunning.iloc[:,0],df_tunning.iloc[:,2:30]], axis=1)","42b0fd96":"# Separate target variable for model building \n\ny_model = df.iloc[:,1]\nX_model = pd.concat([df_tunning.iloc[:,0],df_tunning.iloc[:,2:30]], axis=1)\ny_model.describe()","41f4b9b3":"# Split to train and test with 70-30 ratio\n\nX_train, X_test, y_train, y_test = train_test_split(X_model, y_model, test_size=0.3, random_state=42, stratify = y)","1c31501a":"from sklearn.preprocessing import StandardScaler\n# Implement standart scaler method\n\nstandardScalerX = StandardScaler()\nX_train = standardScalerX.fit_transform(X_train)\nX_test = standardScalerX.fit_transform(X_test)","e4045b27":"from sklearn.model_selection import StratifiedKFold\n# Stratified K-Fold Cross Validation Method\n\nkfold_cv=StratifiedKFold(n_splits=5, random_state=42, shuffle=True)\n\nfor train_index, test_index in kfold_cv.split(X_model,y_model):\n    X_train, X_test = X_model.iloc[train_index], X_model.iloc[test_index]\n    y_train, y_test = y_model.iloc[train_index], y_model.iloc[test_index]","b3f3415f":"from xgboost import XGBClassifier\n# Extreme Gradient Boosting Model Building\n\nxgb_model = XGBClassifier(criterion = 'giny', learning_rate = 0.01, max_depth = 5, n_estimators = 100,\n                          objective ='binary:logistic', subsample = 1.0)\n# fit the model\nxgb_model.fit(X_train, y_train)\n#Predict Model\npredict_xgb = xgb_model.predict(X_test)","689e0922":"from sklearn.metrics import classification_report\nprint(\"XGB\", classification_report(y_test, predict_xgb))","9cb6fc20":"from sklearn.metrics import confusion_matrix\nXGB_matrix = confusion_matrix(y_test, predict_xgb)\n\nfig, ax = plt.subplots(figsize=(15, 8))\nsns.heatmap(XGB_matrix,annot=True, fmt=\"d\", cbar=False, cmap=\"Pastel1\")\nplt.title(\"Gradient Boosting\", weight='bold')\nplt.xlabel('Predicted Labels')\nplt.ylabel('Actual Labels')","cdbe5f40":"#codes from Rodrigo Lima  @rodrigolima82\nfrom IPython.display import Image\nImage(url ='data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAARYAAACpCAMAAADZeOJpAAAAY1BMVEX\/\/\/\/FwsLGFl93d3fi4OCZmZnd3d27u7vkkrTw8PDwwdTVVIqAgID29vaRkZGioqLMzMyqqqqIiIizs7PU1NT77\/TZZJTKJmriiq\/ONXTRRX\/34Ordc5\/oor\/00N\/sscrhg6oBUIG8AAAK+ElEQVR4nO2di3aqOhCGoyEgyl2stbW17\/+UJ1fIhGBRkfHs5l+rtySM5pNMJkOghDxVeXpVz33xR7RdT9NOth6v\/9jtNputaz1aXdXrcpkLi9bbF7AesBh9fFvWA5ZOR+uECVgs9VwCFkvHbhwFLLY+jPWABWijrQcsQCdtPWCBuijrfxHLeat02bwNmp+V9b+IZdNbOWyc5kdV\/r\/FAgQZ7YYNxrAQ8uVw+ZSlj2CJ49n6lcap59eRFkM9gIWcIRa1apyCJaZS8kcRiRJG+ZENpZkAk8haJspimug\/Y91KfBfi\/aK0Uo2LyrQsRQFvU\/PSWr3LPf91T\/rm3BBjqrgklvHZsHyuPZVTsORxTIuYf6vjihYGC8vSvMhy8TmueE3UY1nxtrmFhf\/JO7JqRM9FbclbaYCpxJJwAuJLfgQ1WVGrucISc1QVMD4bFvJxJxYuylSfu67qolWu+qJrVGfNh9m3FSrLrDH9pLlqWewllkawzkrZinKLWQ2bM\/UziS3j82H5eRxL3jSmqw1NzKc2CUu2KuXJwWsrWqmWVSawpGrUqFaCUBWB5hwLP0ul1Wdg2Xgqb8LSsCbrfEub0azObSyMFeocYKxrpcrl0dFKjpVYtldYSFbxb+L3NI4j80LKZN9cHM49VNESy\/gLYWFJrTyj7HC652DsQZTwatHZOklSG0uS8OokIxE\/2MGyLzQW7meYjcVuLrCQioOxjc+HBcZ0l9uxJGLOiLoOk7ymKwvL1UFUZHyualTtirYaS0pLyvsvBpHsPMnE9ygHzVUNibPsKYPoBCq\/78KSmKk3blJdNAlLTsskKWiq+plplytcLNUOpZGdly63KWFzRupaWXoCFnjsbVGuwsIn6CzTUy\/\/nPO8lOeOi6WfoPkvqZqgW9GSews1QVfEYGmpnKBXpJLniZyguUc2zWMerES8tuY4xO9PmKB3oO7tDiwgnKsyHs7JWMPF0odzXIkK5+pMvBj3DFT5ToOFT2jyHOGm1FDZy8jONJeBHstJztTP+cM5Z1E0wwra87Hdq6g35UT5qZqhup9e3Y3l0wn9TXruLy4VTWJh8wMD3LVZEf1NLOPqzqOAxT6NuvYBS6d\/4vIZ0BxYzp9W+4BF6fQN2k\/FcjU5dpsGpsZtT83\/IZ0tMpraW8kxk2QjKjMncgU0JSaLx\/oMgCzngZ0Iz1Yiou1NDVNzTMV65lVEwNhE6jXKSK8ivAHdPC7XimemYdnTVn51sbdJshGZtuNvvWxERB8XPNLPbSyyXPQ30uuf3tQwNSfWCXIhJF8lzRj\/KuRrtFnTYfGE\/zPNRB+H27CIN5fLJYn+mEySrUsEZCrlIN+6jUWVM5atRP6N2qaGqTmZxqGJPpavswXFSNrb09hg8QysueKWjsskLGrlX2QOFr6kM1giGokc4wCLLmesZCTOEmqbGqbmIBa5mG75OnE5LB2XSVhU\/kCu6wvGKvPmRDHNGNvLrFGpnIjAwssa9e51OWMrfnCpU07a1DA1xwdRKweRTMFJW\/I1Cr5y7weRJz9355rosB1cV\/y5D0udJDHA0iSJcB6lSAMYLLyMKSy6nHeExkXlYBmk5oTLbVqTguuxCK\/eu1xPfu6BFfSnA2b6daKxQSQGv+pPThtWSCcCB5EpZ0w4mRQOomFqTifyfIOoq51hEDnZubPn4IdcbmZcbkv3SSKdCMRiykV+TaYgbVPD1BzEAlzuE7E4WcvP6Vj6WbXDopJseoLei7BEOhGIxZTLSxq1RNGbGqbmOizOBG2wiGTfDBO0i+VrWHtrONdhUUk2Hc41pfx0KxeLKedYUo2iN0UGqbkOixPOGSwi2TdDOOdiOQyPfoXgPxrN8j0n+HexOKNIvqWJWF5bD2KBWW4RugQsxMUipuiAhQQsI1iOAYsHi7PxJ2BRcq6giTzdLFhm3ER3nx7CcoBj6IYJ2myySEVKjS9v5CYxsVtBrGUicdVVrGlTUSLC+KThbfWOOxnXqePfxfnJ3zT\/eRafyWb9SebRI1gOzjW00+1YiFj38N4rLDKRQvKsyFO1SSrb8+VOJtfNlOkdd34sG3GTyvk4E5VHsGzdK4vnO7CIdU9F5fZBvjRu1f6tVgT4ctsLE3ukUpIl6ohuFTDA8i1e\/fSGjOWw3Qwut6qbim7EItY9fP0nsbC6VEtjHrrnMnzn65yE0TblJH7BQo4nvhQZzJTLYLmuwx1YxEbQgmkskVwayw0cak3b8oKEJbHeh6mxFIwZLB+7ncayWx8u68ENpS+ARV1wvRELoUVOE42FFHuNRa9p+WmSxXuWFABLzVe9Gsv5\/V1jeV9fftZzUZkTyy2b23ssjMacgMZSZYypJFqslvoZ\/6PNypr8Ooi26\/ed5+2jY9Hj+lYs\/IOnxGAhmXQ3rbgIoFK3TcFPmab6HQv\/uX5\/PSy3bfuROTh5WaylYnu7wbKncoIWu9z1buJasIomYPmQG7LMXuYXwXI0gdRELN1F1Fym1gyWVO6p4+FcXUosbZ\/9\/w3Lj\/T5r4Vl3jtb82vb2hbRPFj6a61\/cqk4cqrYUVTAovT2dbDb\/3ks\/9iDSp6rgMWrgMWrgMWrfxJLGj2q9jqW+OEXwAD7S6deQRgBcMASsAQsAUvAErD0Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8Cli8wsASNnI8Sf\/ktp\/HFbB4FbB4FbB4NREL3Pns2PA9EX70OM8t6q7spzV9eeoX0OJYnIel+O7itG\/XnutO6Ru1PBb4hCrPPb\/2+XQaVi+i5bHA1p5+X6zq87B6ES2P5RuWHYgr2xySa0HA4nlaCpT9kJnvQe0yQsDyNt5cysI220MYbhUCFth84HO\/r1UuJQQs0LkMfO7XmK0lhYDFKXR9rv3PpbBcCwqW4YO7bFm1aK4FBcuV9vAQNNeCggXeh+r0fTtmalFhYIGlp3FjaK4FB8vwGZK9rCUTnmvBwQIPgD7XeljTfM93uVkoWC7jB5DRikWFggU+txf4XNvjzvboqNuFggX+m9TTmK2ndHiacLDAf5Nq+1xrHYnoWpCwQOdiD5bTiKGFhYPlMHaEXYHoWpCwwDy35XO33tbLCwkLyHOfvKYwXQsWFvgfB3qfuxuxs7TuwrKFgpc4JmGBF9F6L3L0FSLoLixXNQkLdC7dITat4SWBBYWFBeS5O59rTdwfBFNYWIA\/OnlKfxbo\/LiwsMA8txkwlse9LNL9MWFhgRfRtsPmqK4FD8ub5xjrFMJ1LXhYgHPRPteKZn6W6Py40LCAPLf2udbCGte14GGBVcqTfLgFaMLDAvLcW6c1smtBxLIZHGSNK6ztPkZ3YdlBXdkNdwULcC7S51qgsLb7GCGtoN06eUnIWnIi7STshIgFOBfBofe4WDsJOyFiAXnuC0hYYrsWTCwX5yjL2WC7FkwsIM+9A2awXQsmFnAR7WivktBdCyoW4Fw+rYQdumtBxQKcy8UaU+iuBRULyHNvLEjorgUVC8hz73oriNt9jFCx2FdSjn10h7eTsBMqFnAR7ei3gCNULM6daEZ4Owk7oWJx7kQzp82TunqLcLHAm0W0XsC1IGNx\/reuxwCScLE4d6IpvYBrQcbi3Ikm9QquBRuLx7m8gmvBxuJxLq\/gWrCxwJtFpFC3+xghY\/FcaXlKN28VNhZ4s8gaeSdhJ2wsA+fyEq4FHcvAubyEa0HHMnAuE9\/3f00G2RCWaCqoAAAAAElFTkSuQmCC',width=400,height=400)","91596c79":"I had serious issues with Encoding (tried different ways and simply didn't work) The figure above should have 4 Classifiers subplots and I could only make a single XGB heatmap without any clarity.  Any doubt check Duygu Turgut to read how it was suppose to be. https:\/\/www.kaggle.com\/duygut\/eda-booking-cancelation-prediction\/notebook","7a324773":"#If someone know ho to fix the 2 steps above, I'll be glad to hear the solution.","76264d87":"#Codes from Duygu Turgut    https:\/\/www.kaggle.com\/duygut\/eda-booking-cancelation-prediction\/notebook","5dfc29ac":"msdh.state.ms.us - Early treatment is essential to recovering from tuberculosis and living a better life.\n\n#The MSDH Office of Tuberculosis and Refugee Health will work with you to obtain effective treatment for TB.","dbfca494":"![](https:\/\/encrypted-tbn0.gstatic.com\/images?q=tbn%3AANd9GcRN1UpoNigPHEoatFRwKG6iRp3yWX_HNkoWJA&usqp=CAU)\ntheaasm.org","3be12b46":"#Skew Visualization - Visualize each numerical feature with distplot","d47fc42c":"#TB and HIV Coinfection\n\nTuberculosis is a serious health threat, especially for people living with HIV. People living with HIV are more likely than others to become sick with TB. Worldwide, TB is one of the leading causes of death among people living with HIV.\n\nWithout treatment, as with other opportunistic infections, HIV and TB can work together to shorten lifespan.\n\nSomeone with untreated latent TB infection and HIV infection is much more likely to develop TB disease during his or her lifetime than someone without HIV infection.\n\nAmong people with latent TB infection, HIV infection is the strongest known risk factor for progressing to TB disease.\nA person who has both HIV infection and TB disease has an AIDS-defining condition.\n\nPeople infected with HIV who also have either latent TB infection or TB disease can be effectively treated. The first step is to ensure that people living with HIV are tested for TB infection. If found to have TB infection, further tests are needed to rule out TB disease. The next step is to start treatment for latent TB infection or TB disease based on test results. https:\/\/www.cdc.gov\/tb\/topic\/basics\/tbhivcoinfection.htm","a47489b0":"Das War's, Kaggle Notebook Runner: Mar\u00edlia Prata  @mpwolke"}}