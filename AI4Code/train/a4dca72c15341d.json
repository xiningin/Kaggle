{"cell_type":{"70471440":"code","41001066":"code","8a565d45":"code","1315ee0a":"code","a22c1bab":"code","5f7bcc6f":"code","d41ce5fe":"code","7c6dd9fa":"code","d86be02f":"code","1d290717":"code","ae93ee8e":"code","285ca6bc":"code","870dfa51":"code","bf9aa71e":"code","dd4cb2b1":"code","eec52cfe":"code","cd9ba36d":"code","e16b187a":"code","5e334b92":"code","230fedc4":"code","5c6913f4":"code","64dc86e5":"code","942df3ca":"code","592848a9":"code","7abd2876":"code","8695c908":"code","fb048001":"code","f992f36a":"code","e1639ce7":"code","b8808cb7":"code","e64570f8":"code","d9e55343":"code","cb50afcd":"code","f3cbcfd9":"code","94f6275d":"code","e56993ec":"code","c55a9e59":"code","4a5338bb":"code","0863343a":"code","4c284824":"code","534c75ef":"markdown","edf8847c":"markdown","6b57f48c":"markdown","5b3bfe4e":"markdown","6e097831":"markdown","c3f02f47":"markdown","81310fae":"markdown","7fd782d5":"markdown","d6bdd6ff":"markdown","fb4b701d":"markdown","0dee31f5":"markdown","89fe4ef2":"markdown","b6bccbbf":"markdown","ba2fa055":"markdown","806f76e7":"markdown","2e6718c0":"markdown","666b8c98":"markdown","33d5468b":"markdown","3c2709ac":"markdown","d4f972f5":"markdown","fb8a1b51":"markdown","079035cf":"markdown","90b94b2f":"markdown"},"source":{"70471440":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","41001066":"# Import the pandas library as pd\nimport pandas as pd\n\n# Read 'police.csv' into a DataFrame named ri\nri= pd.read_csv('..\/input\/traffic-stops-in-rhode-island\/police.csv')\n\n# Examine the head of the DataFrame\nri.head()","8a565d45":"# Count the number of missing values in each column\nri.isnull().sum()","1315ee0a":"# Examine the shape of the DataFrame\nprint(ri.shape)\n\n# Drop the 'county_name' and 'state' columns\nri.drop(['county_name', 'state'], axis='columns', inplace=True)\n\n# Examine the shape of the DataFrame (again)\nprint(ri.shape)","a22c1bab":"# Drop all rows that are missing 'driver_gender'\nri.dropna(subset=['driver_gender'], inplace=True)\n\n# Count the number of missing values in each column (again)\nprint(ri.isnull().sum())\n\n# Examine the shape of the DataFrame\nprint(ri.shape)","5f7bcc6f":"# Examine the head of the 'is_arrested' column\nprint(ri.is_arrested.head())\n\n# Check the data type of 'is_arrested'\nprint(ri.is_arrested.dtype)\n\n# Change the data type of 'is_arrested' to 'bool'\nri['is_arrested'] = ri.is_arrested.astype('bool')\n\n# Check the data type of 'is_arrested' (again)\nprint(ri.is_arrested.dtype)","d41ce5fe":"# Concatenate 'stop_date' and 'stop_time' (separated by a space)\ncombined = ri.stop_date.str.cat(ri.stop_time, sep=' ')\n\n# Convert 'combined' to datetime format\nri['stop_datetime'] = pd.to_datetime(combined)\n\n# Examine the data types of the DataFrame\nprint(ri.dtypes)","7c6dd9fa":"# Set 'stop_datetime' as the index\nri.set_index(keys='stop_datetime', inplace=True)\n\n# Examine the index\nprint(ri.index)\n\n# Examine the columns\nprint(ri.columns)","d86be02f":"# Count the unique values in 'violation'\nprint(ri.violation.value_counts())\n\n# Express the counts as proportions\nprint(ri.violation.value_counts(normalize=True))","1d290717":"# Create a DataFrame of female drivers\nfemale = ri[ri.driver_gender=='F']\n\n# Create a DataFrame of male drivers\nmale = ri[ri.driver_gender=='M']\n\n# Compute the violations by female drivers (as proportions)\nprint(female.violation.value_counts(normalize=True))\n\n# Compute the violations by male drivers (as proportions)\nprint(male.violation.value_counts(normalize=True))","ae93ee8e":"# Create a DataFrame of female drivers stopped for speeding\nfemale_and_speeding = ri[(ri.driver_gender == 'F') & (ri.violation == 'Speeding')]\n\n\n# Create a DataFrame of male drivers stopped for speeding\nmale_and_speeding = ri[(ri.driver_gender == 'M') & (ri.violation == 'Speeding')]\n\n\n# Compute the stop outcomes for female drivers (as proportions)\nprint(female_and_speeding.stop_outcome.value_counts(normalize=True))\n\n# Compute the stop outcomes for male drivers (as proportions)\nprint(male_and_speeding.stop_outcome.value_counts(normalize=True))","285ca6bc":"# Check the data type of 'search_conducted'\nprint(ri.search_conducted.dtype)\n# Calculate the search rate by counting the values\nprint(ri.search_conducted.value_counts(normalize=True))\n\n# Calculate the search rate by taking the mean\nprint(ri.search_conducted.mean())","870dfa51":"print(ri[ri.driver_gender == 'M'].search_conducted.mean())\nprint(ri[ri.driver_gender == 'F'].search_conducted.mean())\nprint(ri.groupby(ri.driver_gender).search_conducted.mean())","bf9aa71e":"ri.groupby(['driver_gender', 'violation']).search_conducted.mean()","dd4cb2b1":"print(ri.groupby(['violation','driver_gender']).search_conducted.mean())","eec52cfe":"print(ri.search_type.value_counts())","cd9ba36d":"ri['frisk'] = ri.search_type.str.contains('Protective Frisk', na=False)\n","e16b187a":"# Check the data type of 'frisk'\nprint(ri.frisk.dtype)\n\n# Take the sum of 'frisk'\nprint(ri.frisk.sum())","5e334b92":"# Create a DataFrame of stops in which a search was conducted\nsearched = ri[ri.search_conducted==True]\n\n# Calculate the overall frisk rate by taking the mean of 'frisk'\nprint(searched.frisk.mean())\n\n# Calculate the frisk rate for each gender\nprint(searched.groupby('driver_gender').frisk.mean())","230fedc4":"# Calculate the overall arrest rate\nprint(ri.is_arrested.mean())\n\n# Calculate the hourly arrest rate\nprint(ri.groupby(ri.index.hour, axis=0).is_arrested.mean())\n\n# Save the hourly arrest rate\nhourly_arrest_rate = ri.groupby(ri.index.hour).is_arrested.mean()","5c6913f4":"# Import matplotlib.pyplot as plt\nimport matplotlib.pyplot as plt\n\n# Create a line plot of 'hourly_arrest_rate'\nhourly_arrest_rate.plot()\n\n# Add the xlabel, ylabel, and title\nplt.xlabel('Hour')\nplt.ylabel('Arrest Rate')\nplt.title('Arrest Rate by Time of Day')\n\n# Display the plot\nplt.show()","64dc86e5":"\n# Calculate the annual rate of drug-related stops\nprint(ri.drugs_related_stop.resample('A').mean())\n\n# Save the annual rate of drug-related stops\nannual_drug_rate = ri.drugs_related_stop.resample('A').mean()\n\n# Create a line plot of 'annual_drug_rate'\nannual_drug_rate.plot()","942df3ca":"# Calculate and save the annual search rate\nannual_search_rate = ri.search_conducted.resample('A').mean()\n\n# Concatenate 'annual_drug_rate' and 'annual_search_rate'\nannual = pd.concat([annual_drug_rate, annual_search_rate], axis=1)\n\n# Create subplots from 'annual'\nannual.plot(subplots=True)\n\n# Display the subplots\nplt.show()","592848a9":"# Create a frequency table of districts and violations\nprint(pd.crosstab(ri.district, ri.violation))\n\n# Save the frequency table as 'all_zones'\nall_zones = pd.crosstab(ri.district, ri.violation)\n\n# Select rows 'Zone K1' through 'Zone K3'\nprint(all_zones.loc['Zone K1':'Zone K3'])\n\n# Save the smaller table as 'k_zones'\nk_zones = all_zones.loc['Zone K1':'Zone K3']","7abd2876":"# Create a bar plot of 'k_zones'\nk_zones.plot(kind='bar')\n\n# Display the plot\nplt.show()","8695c908":"# Create a stacked bar plot of 'k_zones'\nk_zones.plot(kind='bar', stacked=True)\n\n# Display the plot\nplt.show()","fb048001":"# Print the unique values in 'stop_duration'\nprint(ri.stop_duration.unique())\n\n# Create a dictionary that maps strings to integers\nmapping = {'0-15 Min':8,'16-30 Min':23,'30+ Min':45}\n\n# Convert the 'stop_duration' strings to integers using the 'mapping'\nri['stop_minutes'] = ri.stop_duration.map(mapping)\n\n# Print the unique values in 'stop_minutes'\nprint(ri['stop_minutes'].unique())","f992f36a":"# Calculate the mean 'stop_minutes' for each value in 'violation_raw'\nprint(ri.groupby('violation_raw').stop_minutes.mean())\n\n# Save the resulting Series as 'stop_length'\nstop_length = ri.groupby('violation_raw').stop_minutes.mean()\n\n# Sort 'stop_length' by its values and create a horizontal bar plot\nstop_length.sort_values().plot(kind='barh')\n\n# Display the plot\nplt.show()","e1639ce7":"# Read 'weather.csv' into a DataFrame named 'weather'\nweather = pd.read_csv('..\/input\/weather-in-providence-rhode-island\/weather.csv')\n\n# Describe the temperature columns\nprint(weather[['TMIN', 'TAVG', 'TMAX']].describe())\n\n# Create a box plot of the temperature columns\nweather[['TMIN', 'TAVG', 'TMAX']].plot(kind='box')\n\n# Display the plot\nplt.show()","b8808cb7":"# Create a 'TDIFF' column that represents temperature difference\nweather['TDIFF']=weather['TMAX']-weather['TMIN']\n\n# Describe the 'TDIFF' column\nprint(weather['TDIFF'].describe())\n\n# Create a histogram with 20 bins to visualize 'TDIFF'\nweather.TDIFF.plot(kind='hist', bins=20)\n\n# Display the plot\nplt.show()","e64570f8":"weather.columns","d9e55343":"# Copy 'WT01' through 'WT22' to a new DataFrame\nWT = weather.loc[:,'WT01':'WT22']\n\n# Calculate the sum of each row in 'WT'\nweather['bad_conditions'] = WT.sum(axis=1)\n\n# Replace missing values in 'bad_conditions' with '0'\nweather['bad_conditions'] = weather.bad_conditions.fillna(0).astype('int')\n\n# Create a histogram to visualize 'bad_conditions'\nweather['bad_conditions'].plot(kind='hist')\n\n# Display the plot\nplt.show()","cb50afcd":"# Count the unique values in 'bad_conditions' and sort the index\nprint(weather.bad_conditions.value_counts().sort_index())\n\n# Create a dictionary that maps integers to strings\nmapping = {0:'good', 1:'bad', 2:'bad', 3:'bad',4:'bad',5:'worse',6:'worse',7:'worse',8:'worse',9:'worse'}\n\n# Convert the 'bad_conditions' integers to strings using the 'mapping'\nweather['rating'] = weather.bad_conditions.map(mapping)\n\n# Count the unique values in 'rating'\nprint(weather['rating'].value_counts())","f3cbcfd9":"# Create a list of weather ratings in logical order\ncats = ['good', 'bad', 'worse']\n\n# Change the data type of 'rating' to category\nweather['rating'] = weather.rating.astype('category', ordered=True, categories=cats)\n\n# Examine the head of 'rating'\nprint(weather.rating.head())","94f6275d":"# Reset the index of 'ri'\nri.reset_index(inplace=True)\n\n# Examine the head of 'ri'\nprint(ri.head())\n\n# Create a DataFrame from the 'DATE' and 'rating' columns\nweather_rating= weather[['DATE','rating']]\n\n# Examine the head of 'weather_rating'\nprint(weather_rating.head())","e56993ec":"# Examine the shape of 'ri'\nprint(ri.shape)\n\n# Merge 'ri' and 'weather_rating' using a left join\nri_weather = pd.merge(left=ri, right=weather_rating, left_on='stop_date', right_on='DATE', how='left')\n\n# Examine the shape of 'ri_weather'\nprint(ri_weather.shape)\n\n# Set 'stop_datetime' as the index of 'ri_weather'\nri_weather.set_index('stop_datetime', inplace=True)","c55a9e59":"# Calculate the overall arrest rate\nprint(ri_weather.is_arrested.mean())\n\n# Calculate the arrest rate for each 'rating'\nprint(ri_weather.groupby('rating').is_arrested.mean())\n\n\n","4a5338bb":"# Calculate the arrest rate for each 'violation' and 'rating'\nprint(ri_weather.groupby(['violation', 'rating']).is_arrested.mean())","0863343a":"# Save the output of the groupby operation from the last exercise\narrest_rate = ri_weather.groupby(['violation', 'rating']).is_arrested.mean()\n\n# Print the 'arrest_rate' Series\nprint(arrest_rate)\n\n# Print the arrest rate for moving violations in bad weather\nprint(arrest_rate.loc['Moving violation', 'bad'])\n\n# Print the arrest rates for speeding violations in all three weather conditions\nprint(arrest_rate.loc['Speeding'])","4c284824":"# Unstack the 'arrest_rate' Series into a DataFrame\nprint(arrest_rate.unstack())\n\n# Create the same DataFrame using a pivot table\nprint(ri_weather.pivot_table(index='violation', columns='rating', values='is_arrested'))","534c75ef":"More than half of all violations are for speeding, followed by other moving violations and equipment violations.","edf8847c":" Male drivers are searched more than twice as often as female drivers. Why might this be?","6b57f48c":"Are drug-related stops on the rise?\n","5b3bfe4e":"It looks like most of the columns have at least some missing values. We'll figure out how to handle these values","6e097831":"303 drivers who were frisked. ","c3f02f47":"Does gender affect who gets a ticket for speeding?\n","81310fae":"whether male and female drivers tend to commit different types of traffic violations?","7fd782d5":"The arrest rate has a significant spike overnight, and then dips in the early morning hours","d6bdd6ff":"the arrest rate increases as the weather gets worse, and that trend persists across many of the violation types. This doesn't prove a causal link, but it's quite an interesting result!","fb4b701d":"Excellent! We dropped around 5,000 rows, which is a small fraction of the dataset, and now only one column remains with any missing values.","0dee31f5":"**Do the genders commit different violations?**","89fe4ef2":"About two-thirds of female traffic stops are for speeding, whereas stops of males are more balanced among the six categories. This doesn't mean that females speed more often than males, however, since we didn't take into account the number of stops or drivers.","b6bccbbf":"Does gender affect who is frisked during a search?\n","ba2fa055":"Does gender affect whose vehicle is searched?\n","806f76e7":"column has no negative values and its distribution is approximately normal, both of which are signs that the data is trustworthy.","2e6718c0":" The rate of drug-related stops increased even though the search rate decreased, disproving our hypothesis.","666b8c98":" The numbers are similar for males and females: about 95% of stops for speeding result in a ticket. Thus, the data fails to show that gender has an impact on who gets a ticket for speeding.","33d5468b":"drop the county_name column because it only contains missing values, and you'll drop the state column because all of the traffic stops took place in one state (Rhode Island). Hence no useful info","3c2709ac":"Does weather affect the arrest rate?\n","d4f972f5":"The rate of drug-related stops nearly doubled over the course of 10 years. Why might that be the case?","fb8a1b51":"The frisk rate is higher for males than for females, though we can't conclude that this difference is caused by the driver's gender.","079035cf":"Does time of day affect arrest rate?\n","90b94b2f":"driver_gender column will be critical to many of your analyses. Because only a small fraction of rows are missing driver_gender, we'll drop those rows from the dataset."}}