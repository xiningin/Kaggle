{"cell_type":{"68affd42":"code","922c42d0":"code","194e5c54":"code","b9d6df15":"code","16b62264":"code","fc2e2156":"code","08e1b77a":"code","8d0b84ea":"code","f1a75949":"code","dccfea4e":"code","00b4c0cd":"code","ecdc4596":"code","acaf1094":"code","55376665":"code","e34202d3":"code","cb1a0698":"code","919a7bb0":"code","bb093c65":"code","5b90ee2f":"code","19b23fcc":"code","495b8cf2":"code","ad5a7054":"code","04ea6238":"code","5fdae068":"code","08493467":"code","880eb191":"code","e5c7f12c":"code","c4de4bc3":"code","570963a2":"code","1e1be90c":"code","9f720b74":"code","79260774":"code","24e8f082":"code","be67a4f2":"code","b7e8a563":"code","f179993a":"code","eca8dcdd":"markdown","5c0ad92e":"markdown","01472d0e":"markdown","76310ac5":"markdown","745fb91f":"markdown","eb7620ff":"markdown","060834a4":"markdown","3003a1fd":"markdown","18dce566":"markdown"},"source":{"68affd42":"!pip install datatable==0.11.0","922c42d0":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport datatable as dt\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","194e5c54":"train_t = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv', index_col='TransactionID', nrows=10**5)\ntrain_t.shape\n\n'''\n#dt.fread(\"..\/input\/riiid-test-answer-prediction\/train.csv\").to_jay(\"train.jay\")\ntrain_t = dt.fread(\"\/kaggle\/input\/ieee-fraud-detection\/train_transaction.csv\").to_pandas()\ntrain_t.set_index('TransactionID')\ntrain_t.shape\n'''","b9d6df15":"# Select frauds\ntrain_t_f = train_t.loc[train_t['isFraud'] == 1]\ntrain_t_f.shape","16b62264":"# Select not frauds\ntrain_t_nf = train_t.loc[train_t['isFraud'] == 0]\ntrain_t_nf = train_t_nf.sample(frac=0.1).iloc[0:2560]\ntrain_t_nf.shape","fc2e2156":"# Create balanced dataset\ntrain_t = pd.concat([train_t_f, train_t_nf], axis=0)\ntrain_t.shape\n\ndel train_t_f, train_t_nf","08e1b77a":"train_id = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/train_identity.csv', index_col='TransactionID', nrows=10**5)\ntrain_id.shape\n'''\ntrain_id = dt.fread(\"\/kaggle\/input\/ieee-fraud-detection\/train_identity.csv\").to_pandas()\ntrain_id.set_index('TransactionID')\ntrain_id.shape\n'''","8d0b84ea":"df_train = train_t.merge(train_id, on='TransactionID', how='left')\ndf_train.shape\n\n# Release memory\ndel train_t\ndel train_id","f1a75949":"'''\ntest_t = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv', index_col='TransactionID')\ntest_t.shape\n'''\n\ndt.fread(\"\/kaggle\/input\/ieee-fraud-detection\/test_transaction.csv\").to_jay(\"test_transaction.jay\")\ntest_t = dt.fread(\"test_transaction.jay\").to_pandas()\ntest_t.set_index('TransactionID')\ntest_t.shape","dccfea4e":"'''\ntest_id = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/test_identity.csv', index_col='TransactionID')\ntest_id.shape\n'''\n\ndt.fread(\"\/kaggle\/input\/ieee-fraud-detection\/test_identity.csv\").to_jay(\"test_identity.jay\")\ntest_id = dt.fread(\"test_identity.jay\").to_pandas()\ntest_id.set_index('TransactionID')\ntest_id.shape","00b4c0cd":"df_test = test_t.merge(test_id, on='TransactionID', how='left')\ndf_test.shape","ecdc4596":"# Release memory\ndel test_t\ndel test_id","acaf1094":"sub = pd.read_csv('\/kaggle\/input\/ieee-fraud-detection\/sample_submission.csv')\nsub.shape","55376665":"df_train.head()","e34202d3":"df_train.describe()","cb1a0698":"# Target distribution\nimport seaborn as sns\n\ng = sns.countplot(x='isFraud', data=df_train, )\ng.set_title(\"Fraud Transactions Distribution\", fontsize=18)\ng.set_xlabel(\"Is fraud?\", fontsize=14)\ng.set_ylabel('Count', fontsize=14)","919a7bb0":"df_train.info()","bb093c65":"df_train.isnull().sum()","5b90ee2f":"# Concat dataset for better manipulation\nsplit = len(df_train)\ntarget = df_train.isFraud\ndf = pd.concat([df_train, df_test], axis=0).drop('isFraud', axis=1)\n\ndel df_train, df_test","19b23fcc":"# https:\/\/www.kaggle.com\/kabure\/extensive-eda-and-modeling-xgb-hyperopt\nemails = {'gmail': 'google', 'att.net': 'att', 'twc.com': 'spectrum', \n          'scranton.edu': 'other', 'optonline.net': 'other', 'hotmail.co.uk': 'microsoft',\n          'comcast.net': 'other', 'yahoo.com.mx': 'yahoo', 'yahoo.fr': 'yahoo',\n          'yahoo.es': 'yahoo', 'charter.net': 'spectrum', 'live.com': 'microsoft', \n          'aim.com': 'aol', 'hotmail.de': 'microsoft', 'centurylink.net': 'centurylink',\n          'gmail.com': 'google', 'me.com': 'apple', 'earthlink.net': 'other', 'gmx.de': 'other',\n          'web.de': 'other', 'cfl.rr.com': 'other', 'hotmail.com': 'microsoft', \n          'protonmail.com': 'other', 'hotmail.fr': 'microsoft', 'windstream.net': 'other', \n          'outlook.es': 'microsoft', 'yahoo.co.jp': 'yahoo', 'yahoo.de': 'yahoo',\n          'servicios-ta.com': 'other', 'netzero.net': 'other', 'suddenlink.net': 'other',\n          'roadrunner.com': 'other', 'sc.rr.com': 'other', 'live.fr': 'microsoft',\n          'verizon.net': 'yahoo', 'msn.com': 'microsoft', 'q.com': 'centurylink', \n          'prodigy.net.mx': 'att', 'frontier.com': 'yahoo', 'anonymous.com': 'other', \n          'rocketmail.com': 'yahoo', 'sbcglobal.net': 'att', 'frontiernet.net': 'yahoo', \n          'ymail.com': 'yahoo', 'outlook.com': 'microsoft', 'mail.com': 'other', \n          'bellsouth.net': 'other', 'embarqmail.com': 'centurylink', 'cableone.net': 'other', \n          'hotmail.es': 'microsoft', 'mac.com': 'apple', 'yahoo.co.uk': 'yahoo', 'netzero.com': 'other', \n          'yahoo.com': 'yahoo', 'live.com.mx': 'microsoft', 'ptd.net': 'other', 'cox.net': 'other',\n          'aol.com': 'aol', 'juno.com': 'other', 'icloud.com': 'apple'}\n\nus_emails = ['gmail', 'net', 'edu']","495b8cf2":"for c in ['P_emaildomain', 'R_emaildomain']:\n    df[c + '_bin'] = df[c].map(emails)    \n    df[c + '_suffix'] = df[c].map(lambda x: str(x).split('.')[-1])    \n    df[c + '_suffix'] = df[c + '_suffix'].map(lambda x: x if str(x) not in us_emails else 'us')","ad5a7054":"# Encoding\nfrom sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\nfor f in df.columns:\n    if df[f].dtype=='object':\n        df[f] = le.fit_transform(list(df[f].values))","04ea6238":"# Impute nulls\ndf = df.fillna(-1)","5fdae068":"#TODO: Feature engineering","08493467":"#TODO: Box-Cox?","880eb191":"#TODO: Scalling\nfrom sklearn.preprocessing import StandardScaler\n\nss = StandardScaler()\ndf_ss = ss.fit_transform(df.iloc[:,3:470].values)\ndf_ss = pd.DataFrame(df_ss, index=df.index, columns=df.iloc[:,3:470].columns)","e5c7f12c":"# Dimensionality reduction\nfrom sklearn.decomposition import PCA\n\npca = PCA(.999) # retain 95% of the variance #PCA(n_components=10)\ndf_pca = pca.fit_transform(df.iloc[:,3:470])\ndf_pca = pd.DataFrame(df_pca, index=df.index) # Convert to df\n#print(pca.explained_variance_ratio_.sum())\nprint(pca.n_components_)","c4de4bc3":"# TODO: Use df, df_c is for dev purpose\ndf_c = pd.concat([df.iloc[:,:3], df_pca, df.iloc[:,470:]], axis=1)\ndf_c.shape","570963a2":"df_train = df_c[:split]\ndf_test = df_c[split:]\n\n#del df","1e1be90c":"# Get train and validation sub-datasets\nfrom sklearn.model_selection import train_test_split\n\nX = df_train\ny = target\n\n#Do train data splitting\nX_train, X_test, y_train, y_test = train_test_split(X,y, train_size=0.75, random_state=42)","9f720b74":"import xgboost as xgb\n\nmodel = xgb.XGBClassifier(\n    n_estimators=1000,\n    tree_method='gpu_hist',\n    eval_metric='auc'\n)","79260774":"model.fit(X_train, y_train, \n          eval_set=[(X_test, y_test)], \n          verbose=50, \n          early_stopping_rounds=300)","24e8f082":"# Use whole training data\nmodel.fit(df_train, target)","be67a4f2":"y_pred = model.predict_proba(df_test)[:,1] \ny_pred","b7e8a563":"# Create submission\nsub['isFraud'] = y_pred\nsub.to_csv('submission.csv', index=False)","f179993a":"sub.head()","eca8dcdd":"# Evaluation","5c0ad92e":"# Load Data","01472d0e":"Since this competition is over, this is just a simplified notebook to solve the problem - which guides you through all the necessary steps and leaves a room for your own innovation and improment to try.\nIf you like it, please **upvote**!","76310ac5":"# Data Wrangling","745fb91f":"# The Problem","eb7620ff":"Imagine standing at the check-out counter at the grocery store with a long line behind you and the cashier not-so-quietly announces that your card has been declined. In this moment, you probably aren\u2019t thinking about the data science that determined your fate.\n\nEmbarrassed, and certain you have the funds to cover everything needed for an epic nacho party for 50 of your closest friends, you try your card again. Same result. As you step aside and allow the cashier to tend to the next customer, you receive a text message from your bank. \u201cPress 1 if you really tried to spend $500 on cheddar cheese.\u201d\n\nWhile perhaps cumbersome (and often embarrassing) in the moment, this fraud prevention system is actually saving consumers millions of dollars per year. Researchers from the IEEE Computational Intelligence Society (IEEE-CIS) want to improve this figure, while also improving the customer experience. With higher accuracy fraud detection, you can get on with your chips without the hassle.\n\nIEEE-CIS works across a variety of AI and machine learning areas, including deep neural networks, fuzzy systems, evolutionary computation, and swarm intelligence. Today they\u2019re partnering with the world\u2019s leading payment service company, Vesta Corporation, seeking the best solutions for fraud prevention industry, and now you are invited to join the challenge.\n\nIn this competition, you\u2019ll benchmark machine learning models on a challenging large-scale dataset. The data comes from Vesta's real-world e-commerce transactions and contains a wide range of features from device type to product features. You also have the opportunity to create new features to improve your results.\n\nIf successful, you\u2019ll improve the efficacy of fraudulent transaction alerts for millions of people around the world, helping hundreds of thousands of businesses reduce their fraud loss and increase their revenue. And of course, you will save party people just like you the hassle of false positives.","060834a4":"# Submission","3003a1fd":"# EDA","18dce566":"# Libraries"}}