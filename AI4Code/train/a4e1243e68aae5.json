{"cell_type":{"39212414":"code","a58d65e2":"code","3f997acb":"code","43b7e7fe":"code","dc042541":"code","79c75662":"code","3c2b27be":"code","4bc7eb74":"code","06f59a84":"code","b1096702":"code","6f2ac642":"code","4ed95bb3":"code","aea5269e":"code","c3b6c2df":"markdown","12dc44a9":"markdown","9f1e7362":"markdown","8690d806":"markdown","db0789c6":"markdown","32434652":"markdown","a46e399d":"markdown","7d40b24e":"markdown","e46b52e0":"markdown","2ce96dff":"markdown"},"source":{"39212414":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nfrom sklearn.model_selection import train_test_split\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","a58d65e2":"data = pd .read_csv('..\/input\/voice.csv')","3f997acb":"data.head()","43b7e7fe":"data.info()","dc042541":"data.label = [1 if i == \"male\" else 0 for i in data.label]    #changing \"label\" values\ny = data.label.values\nx_data = data.drop([\"label\"], axis=1)\nx = ((x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data))).values    #normalization","79c75662":"x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\nx_train = x_train.T\nx_test = x_test.T\ny_train = y_train.T\ny_test = y_test.T","3c2b27be":"def initialize_w_and_b(dimension):\n    w = np.full((dimension,1), 0.01)\n    b = 0.0\n    return w, b","4bc7eb74":"def sigmoid(z):\n    y_head = 1 \/ (1+np.exp(-z))\n    return y_head","06f59a84":"def forward_backward_propagation(w, b, x_train, y_train):\n    z = np.dot(w.T, x_train) + b\n    y_head = sigmoid(z)\n    loss = -((1-y_train)*np.log(1-y_head))-(y_train*np.log(y_head))\n    cost = (np.sum(loss)) \/ x_train.shape[1]\n    \n    derivative_weight = (np.dot(x_train,((y_head-y_train).T)))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"derivative_weight\": derivative_weight, \"derivative_bias\": derivative_bias}\n    return cost, gradients","b1096702":"def update(w, b, x_train, y_train, learning_rate, num_iterations):\n    cost_list = []\n    cost_list2 = []\n    index = []\n    \n    for i in range(num_iterations):\n        cost, gradients = forward_backward_propagation(w, b, x_train, y_train)\n        cost_list.append(cost)\n        \n        w = w - learning_rate * gradients[\"derivative_weight\"]\n        b = b- learning_rate * gradients[\"derivative_bias\"]\n        \n        if i%10 == 0:\n            cost_list2.append(cost)\n            index.append(i)\n            \n    parameters = {\"weight\":w, \"bias\":b}\n    plt.plot(index,cost_list2)\n    plt.xticks(index,rotation='vertical')\n    plt.xlabel(\"Number of Iterarion\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n    return parameters, gradients, cost_list","6f2ac642":"def predict(w, b, x_test):\n    z = sigmoid(np.dot(w.T, x_test)+b)\n    y_prediction = np.zeros((1, x_test.shape[1]))\n    for i in range(z.shape[1]):\n        if z[0,i] <= 0.5:\n            y_prediction[0,i] = 0\n        else:\n            y_prediction[0,i] = 1\n    return y_prediction","4ed95bb3":"def logistic_regression(x_train, y_train, x_test, y_test, learning_rate, num_iterations):\n    dimension = x_train.shape[0]\n    w, b = initialize_w_and_b(dimension)\n    parameters, gradients, cost_list = update(w, b, x_train, y_train, learning_rate, num_iterations)\n    y_prediction_test = predict(parameters[\"weight\"], parameters[\"bias\"], x_test)\n    print(\"test accuracy: {} %\".format(100 - np.mean(np.abs(y_prediction_test - y_test)) * 100))","aea5269e":"logistic_regression(x_train, y_train, x_test, y_test, learning_rate=1, num_iterations=3000)","c3b6c2df":"\"initialize_w_and_b(dimension)\" function is define for first values of weight and bias.","12dc44a9":"A function for forward and backward propagation process.","9f1e7362":"We need to change label values from \"male\" and \"female\" to \"1\" and \"0\".\nAfter that we will normalize other numeric values. For example \"meanfreq\" has 0 to 1 values but \"kurt\" has 1025 or 5. If we don't normalize this datas, our algorithm can be broken.","8690d806":"Update function for updating weight and bias values with train datas.","db0789c6":"Sigmoid function is returning our z value in 0 to 1.","32434652":"Predict function for predict test values.","a46e399d":"Detecting train and test datasets.","7d40b24e":"Applying logistic regression.","e46b52e0":"This method gives 98.11% accuracy with test values, this ratio is the max ratio possible.","2ce96dff":"At last definition of logistic regression fucntion."}}