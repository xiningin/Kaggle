{"cell_type":{"4b493104":"code","4aba017e":"code","05a2bf08":"code","78c5214a":"code","21b892e3":"code","9bce04dc":"code","d90a33d8":"code","53915be5":"code","627045ce":"code","4efe7818":"code","0af9ea05":"code","28175732":"code","c4373961":"code","8761b6b1":"code","b11c514f":"code","af20c6bb":"code","f2e62b17":"code","48c76571":"code","184556ff":"code","2645da5f":"code","7e6914df":"code","d14ae4ed":"code","84c6e7b8":"code","90e4bb47":"code","a078df8c":"markdown","4085f38a":"markdown","cab856c0":"markdown","c186a024":"markdown","205a4eef":"markdown","34cf4923":"markdown","818134ce":"markdown","735a0a73":"markdown","3ba54685":"markdown","2ce4faff":"markdown","bc0e31d5":"markdown","42eb68b4":"markdown"},"source":{"4b493104":"from google.cloud import bigquery\nimport pandas as pd\nfrom bq_helper import BigQueryHelper\nimport numpy as np \nimport pandas as pd ","4aba017e":"# bq_assistant = BigQueryHelper(\"bigquery-public-data\", \"bitcoin_blockchain\")\nbitcoin_blockchain = BigQueryHelper(\"bigquery-public-data\",\"bitcoin_blockchain\")","05a2bf08":"%%time\nbitcoin_blockchain.list_tables()","78c5214a":"client= bigquery.Client()\ngithub_dset = client.get_dataset(client.dataset('bitcoin_blockchain', project='bigquery-public-data'))\nblocks_table = client.get_table(github_dset.table('blocks'))\nBYTES_PER_GB = 2**30\nprint(f'The blocks table is {int(blocks_table.num_bytes\/BYTES_PER_GB)} GB')","21b892e3":"client= bigquery.Client()\ngithub_dset = client.get_dataset(client.dataset('bitcoin_blockchain', project='bigquery-public-data'))\ntransactions_table = client.get_table(github_dset.table('transactions'))\nBYTES_PER_GB = 2**30\nprint(f'The transactions table is {int(transactions_table.num_bytes\/BYTES_PER_GB)} GB')","9bce04dc":"%%time\nbitcoin_blockchain.table_schema(\"blocks\")","d90a33d8":"%%time\nbitcoin_blockchain.head(\"blocks\")\n#test_data=bitcoin_blockchain.head(\"transactions\")","53915be5":"%%time\nbitcoin_blockchain.table_schema(\"transactions\")","627045ce":"%%time\nbitcoin_blockchain.head(\"transactions\")","4efe7818":"sample_data=bitcoin_blockchain.head(\"transactions\")\n# x[\"input_pubkey_base58\"]=\"1L6eTM7CdfU9eQwYWf3u8mFPrfxsiqV8hy\"\nx=sample_data.iloc[2].inputs[0]\nprint(x)","0af9ea05":"x=sample_data.iloc[3].outputs[0]\nx[\"output_pubkey_base58\"]= \"1NhG34WuLN6aWEdbzt6VE4tJQLUem8J43Z\"\nprint(x)","28175732":"print(sample_data.iloc[2].outputs[0])","c4373961":"from google.cloud import bigquery\nimport pandas as pd\n\nclient = bigquery.Client()\n\n# Query by Allen Day, GooglCloud Developer Advocate (https:\/\/medium.com\/@allenday)\nquery = \"\"\"\n#standardSQL\nSELECT\n  o.day,\n  COUNT(DISTINCT(o.output_key)) AS recipients\nFROM (\n  SELECT\n    TIMESTAMP_MILLIS((timestamp - MOD(timestamp,\n          86400000))) AS day,\n    output.output_pubkey_base58 AS output_key\n  FROM `bigquery-public-data.bitcoin_blockchain.transactions`,\n    UNNEST(outputs) AS output ) AS o\nGROUP BY day\nORDER BY day\n\"\"\"\n\nquery_job = client.query(query)\n\niterator = query_job.result(timeout=30)\nrows = list(iterator)\n\n# Transform the rows into a nice pandas dataframe\ntransactions = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\n\n# Look at the first 10 headlines\ntransactions.head(10)","8761b6b1":"transactions_total = bitcoin_blockchain.query_to_pandas_safe( \"\"\"\n       WITH time AS (\n                SELECT TIMESTAMP_MILLIS(timestamp) AS trans_time,\n                    transaction_id\n                FROM `bigquery-public-data.bitcoin_blockchain.transactions`\n            )\n            SELECT COUNT(transaction_id) AS transactions,\n                EXTRACT(DAY FROM trans_time) AS day,\n                EXTRACT(MONTH FROM trans_time) AS month,\n                EXTRACT(YEAR FROM trans_time) AS year\n            FROM time\n            GROUP BY year, month ,day\n            ORDER BY year, month,day\n        \"\"\", max_gb_scanned=23)\n\ntransactions_total.head(10)","b11c514f":"import matplotlib.pyplot as plt\n%matplotlib inline\n# plot monthly bitcoin transactions\nplt.rcParams[\"figure.figsize\"] = (20,8)\nplt.plot(transactions_total)\nplt.title(\"Bitcoin Transcations\")","af20c6bb":"transactions_per_month = bitcoin_blockchain.query_to_pandas_safe( \"\"\"\n       WITH time AS (\n                SELECT TIMESTAMP_MILLIS(timestamp) AS trans_time,\n                    transaction_id\n                FROM `bigquery-public-data.bitcoin_blockchain.transactions`\n            )\n            SELECT COUNT(transaction_id) AS transactions,\n                EXTRACT(MONTH FROM trans_time) AS month,\n                EXTRACT(YEAR FROM trans_time) AS year\n            FROM time\n            GROUP BY year, month \n            ORDER BY year, month\n        \"\"\", max_gb_scanned=23)\n\ntransactions_per_month ","f2e62b17":"#import plotting library\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.rcParams[\"figure.figsize\"] = (20,8)\n# plot monthly bitcoin transactions\nplt.plot(transactions_per_month.transactions)\nplt.title(\"Monthly Bitcoin Transcations\")","48c76571":"transaction_by_day_2017 = bitcoin_blockchain.query_to_pandas_safe(\"\"\"\n     WITH time AS (\n           SELECT TIMESTAMP_MILLIS(timestamp) AS trans_time,\n           transaction_id\n       FROM `bigquery-public-data.bitcoin_blockchain.transactions`\n     )\n    SELECT COUNT(transaction_id) AS number,\n       EXTRACT(month FROM trans_time) AS month,\n       EXTRACT(day FROM trans_time) AS day\n    FROM time\n    WHERE EXTRACT(year FROM trans_time)=2017\n    GROUP BY month,day\n    ORDER BY month,day\n\"\"\",max_gb_scanned=23)\ntransaction_by_day_2017","184556ff":"plt.rcParams[\"figure.figsize\"] = (20,8)\nplt.plot(transaction_by_day_2017.number)\nplt.title('Daily Number of Transcations in 2017')","2645da5f":"transaction_by_day_2018 = bitcoin_blockchain.query_to_pandas_safe(\"\"\"\n     WITH time AS (\n           SELECT TIMESTAMP_MILLIS(timestamp) AS trans_time,\n           transaction_id\n       FROM `bigquery-public-data.bitcoin_blockchain.transactions`\n     )\n    SELECT COUNT(transaction_id) AS number,\n       EXTRACT(month FROM trans_time) AS month,\n       EXTRACT(day FROM trans_time) AS day\n    FROM time\n    WHERE EXTRACT(year FROM trans_time)=2018\n    GROUP BY month,day\n    ORDER BY month,day\n\"\"\",max_gb_scanned=23)\ntransaction_by_day_2018","7e6914df":"# _=plt.plot(transaction_by_day_2018.number)\n\nplt.rcParams[\"figure.figsize\"] = (16,8)\nplt.plot(transaction_by_day_2018.number)\nplt.title('Daily Number of Transcations in 2018')","d14ae4ed":"import hashlib\nimport os\n\nclass DataSaver:\n    def __init__(self, bitcoin_blockchain ):\n        self.bitcoin_blockchain =bitcoin_blockchain \n        \n    def Run_Query(self, query, max_gb_scanned=1):\n        hashed_query=''.join(query.split()).encode(\"ascii\",\"ignore\")\n        query_hash=hashlib.md5(hashed_query).hexdigest()\n        query_hash+=\".csv\"\n        if query_hash in os.listdir(os.getcwd()):\n            print (\"Data Already present getting it from file\")\n            return pd.read_csv(query_hash)\n        else:\n            data=self.bitcoin_blockchain .query_to_pandas_safe(query, max_gb_scanned=max_gb_scanned)\n            data.to_csv(query_hash, index=False,encoding='utf-8')\n            return data\n        \nbq=DataSaver(bitcoin_blockchain )","84c6e7b8":"q = \"\"\"\nSELECT  o.output_pubkey_base58, sum(o.output_satoshis) as output_sum FROM\n    `bigquery-public-data.bitcoin_blockchain.transactions` JOIN\n    UNNEST(outputs) as o \n    where o.output_pubkey_base58 not in (select i.input_pubkey_base58\n    from UNNEST(inputs) as i)\n    group by o.output_pubkey_base58 order by output_sum desc limit 1000\n\"\"\"\n\nprint (str(round((bitcoin_blockchain.estimate_query_size(q)),2))+str(\" GB\"))\n\nresults=bq.Run_Query(q, max_gb_scanned=70)\nresults[\"output_sum\"]=results[\"output_sum\"].apply(lambda x: float(x\/100000000))","90e4bb47":"import matplotlib.pyplot as plt; plt.rcdefaults()\nimport numpy as np\nimport matplotlib.pyplot as plt\nobjects = results[\"output_pubkey_base58\"][:20]\ny_pos = np.arange(len(objects))\nperformance = results[\"output_sum\"][:20]\nplt.bar(y_pos, performance, align='center', alpha=0.5)\nplt.xticks(y_pos, objects, rotation=90)\nplt.ylabel('Bitcoins')\nplt.title('Bitcoins Addresses Who received Most number of bitcoins')\nplt.show()","a078df8c":"Let's plot the histogram of top 20 people who recieved bit coin.","4085f38a":"Let's take a look at the data contents of \"blocks\" and \"transactions\" further.","cab856c0":"Check the data capacity of \"blocks\" and \"transactions\" respectively.","c186a024":"Let's display the filename of the dataset by using helper's list_tables method.","205a4eef":"In this notebook, I succeeded in the data set from kaggle's Bitcoin Blockchain,\nI would like to provide even a bit of information to help you understand how dealings have been done on bit coin networks and how transactions work.\n\nLet us start by checking what tables are available to us Kagglers. \nFor this, we create a convenient BigQueryHelper instance that will make the data estimate and make the result visualizable with pandasDataFrame..","34cf4923":"Let's plot the transition of the number of transactions in 2018.","818134ce":"We will plot the number of transactions for bit coins in 2017.","735a0a73":"Next, we plot the number of transactions per month.","3ba54685":"\"Input data\" input_pubkey_base 58 '\"is a bit coin address, like an\" account number \"when using bit coins. The bit coin address consists of 27 to 34 alphanumeric characters beginning with 1 or 3 and is generated from the public key. In this case, it will be \"1PibuCMFxvk3i1p188AD8785vdz3CmkoWB\".\n\u00a0\n\u00a0 Let's take a look at the output of the transaction.","2ce4faff":"Next, with the head of the data set transactions as sample data, we refer to \"inputs and\" outputs and check whether bit coin transactions are reflected in each data as with.\n\nFirst I will look at the contents of input data of sample data.\nInput data is stored as a dictionary array and has 6 keys and value.","bc0e31d5":"Next, we plot the number of transactions per day for the entire transactions data period.","42eb68b4":"The bit coin address of this outputs data is \"1L6eTm7CdfU9eQwYWf3u8mFPrfxsiqV8hy\".\n'output_satoshis' is the amount of bit coin to send. 'Sathoshi' is the smallest unit of bit coin, 1 Bitcoin = 100,000,000 satoshis, or 1 Satoshi = 1e-8 BTC.\n\nThis output specifies that \"satoshis\" (or 0.00012561 bit coin) of 12561 should be transferred to the address 'address_pubkey_base 58': '1NhG34WuLN6aWEdbzt6VE4tJQLUem8J43Z'.\n\n\nThe proof of the bit coin owner is 'output' which is unpaid for the bit coin address and the script in the variable 'output_script_string' shows.\nAn output script that sets the condition that only the 'private_key' owner of the specified 'public_key' has the right to use this output."}}