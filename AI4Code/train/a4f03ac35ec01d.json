{"cell_type":{"41e2210a":"code","6dfb8a86":"code","6f66604f":"code","c6d73baf":"code","f8c35e53":"code","eeea536b":"code","9fd1e7cf":"code","39946288":"code","a2b08883":"code","e79198b6":"code","a3c6cd0e":"code","a448cca0":"code","79f98581":"code","3d254d6e":"markdown","b6ee36e2":"markdown","b14a6d9d":"markdown","44776a7a":"markdown","8c1f2fd3":"markdown"},"source":{"41e2210a":"%matplotlib inline\nimport os\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nfrom glob import glob\nfrom scipy.io import loadmat # for reading weird matlab files\nfrom skimage.io import imread\nfrom skimage.util import montage\nimport matplotlib.pyplot as plt","6dfb8a86":"base_dir = os.path.join('..', 'input')\nspie_imgs = glob(os.path.join(base_dir, 'spie_oct', '*', '*.mat'))+glob(os.path.join(base_dir, 'spie_oct', '*', '*.jpg'))\nheid_imgs = glob(os.path.join(base_dir, 'heid*', '*', '*', '*.mat'))\n\noct_seg = glob(os.path.join(base_dir, 'rabbani_2015', \n                                            'Rabbani_IOVS_2015', \n                                            'Expert_Markings', '*.tif'))\nout_seg_images = glob(os.path.join(base_dir, 'rabbani_2015', \n                                            'Rabbani_IOVS_2015', \n                                            'Early*', '*', '*.tif'))\nprint('SPIE Image Count', len(spie_imgs))\nprint('Heidelberg Image Count', len(heid_imgs))\nprint('Segmented Images', len(oct_seg), len(out_seg_images))","6f66604f":"spie_df = pd.DataFrame(dict(path = spie_imgs))\nspie_df['file_id'] = spie_df['path'].map(lambda x: os.path.splitext(os.path.basename(x))[0])\nspie_df['patient_id'] = spie_df['file_id'].map(lambda x: int(x.split('_')[0]))\nspie_df['eye_side'] = spie_df['file_id'].map(lambda x: x.split('_')[1][0:1].upper())\nspie_df['file_ext'] = spie_df['path'].map(lambda x: os.path.splitext(x)[1][1:])\nspie_df.sample(4)","c6d73baf":"spie_data_df = spie_df.pivot_table(values = 'path', \n                    columns = 'file_ext', \n                    index=['patient_id', 'eye_side'],\n                    aggfunc = 'first'\n                   ).reset_index()\nspie_data_df.sample(3)","f8c35e53":"_, c_row = next(spie_data_df.sample(1).iterrows())\nprint(c_row)\nspie_mat_read = lambda c_path: loadmat(c_path)['d3'].swapaxes(0,2).swapaxes(1,2)\noct_arr = spie_mat_read(c_row['mat'])\nfund_img = imread(c_row['jpg'])\nprint('OCT Data',oct_arr.shape)\nprint('Fundus Data', fund_img.shape)\nfig, (ax_oct, ax_mip, ax_fund) = plt.subplots(1, 3, figsize = (12, 4), dpi = 300)\nax_oct.imshow(montage(oct_arr))\nax_oct.set_title('OCT Scan')\nax_mip.imshow(np.mean(oct_arr,1))\nax_mip.set_title('OCT Scan')\nax_mip.set_aspect(4)\nax_fund.imshow(fund_img)\nax_fund.set_title('Fundus Image')\nfig.savefig('oct_overview.png');","eeea536b":"%%time\nfrom scipy.ndimage import median_filter\noct_arr_filtered = median_filter(oct_arr, [3, 5, 5])\nfig, (ax_oct, ax_fund) = plt.subplots(1, 2, figsize = (12, 6), dpi = 300)\nax_oct.imshow(montage(oct_arr[::2]))\nax_oct.set_title('OCT Scan')\nax_fund.imshow(montage(oct_arr_filtered[::2]))\nax_fund.set_title('Filtered Scan');","9fd1e7cf":"fig, (ax_mip, ax_mip_filt) = plt.subplots(1, 2, figsize = (12, 6), dpi = 300)\n\nax_mip.imshow(np.mean(oct_arr,1))\nax_mip.set_title('OCT Scan')\nax_mip.set_aspect(4)\n\nax_mip_filt.imshow(np.mean(oct_arr_filtered,1))\nax_mip_filt.set_title('OCT Scan')\nax_mip_filt.set_aspect(4)","39946288":"from skimage.filters import try_all_threshold\ntry_all_threshold(oct_arr_filtered[oct_arr_filtered.shape[0]\/\/2], \n                  figsize=(14, 10), verbose = False);","a2b08883":"from skimage.filters import threshold_otsu\noct_arr_seg = oct_arr_filtered>threshold_otsu(oct_arr_filtered)\n\nfig, (ax_mip, ax_mip_seg) = plt.subplots(1, 2, figsize = (12, 6), dpi = 300)\nax_mip.imshow(np.mean(oct_arr_filtered,1))\nax_mip.set_title('OCT Scan')\nax_mip.set_aspect(4)\n\nax_mip_seg.imshow(np.sum(oct_arr_seg,1))\nax_mip_seg.set_title('Segmented OCT Scan')\nax_mip_seg.set_aspect(4)","e79198b6":"from mpl_toolkits.mplot3d.art3d import Poly3DCollection\nfrom skimage import measure\ndef plot_3d(image, threshold=-300):\n    \n    # Position the scan upright, \n    # so the head of the patient would be at the top facing the camera\n    p = image#.transpose(2,1,0)\n    \n    verts, faces, _, _ = measure.marching_cubes_lewiner(p, threshold)\n\n    fig = plt.figure(figsize=(10, 10))\n    ax = fig.add_subplot(111, projection='3d')\n\n    # Fancy indexing: `verts[faces]` to generate a collection of triangles\n    mesh = Poly3DCollection(verts[faces], alpha=0.40)\n    face_color = [0.45, 0.45, 0.75]\n    mesh.set_facecolor(face_color)\n    ax.add_collection3d(mesh)\n\n    ax.set_xlim(0, p.shape[0])\n    ax.set_ylim(0, p.shape[1])\n    ax.set_zlim(0, p.shape[2])\n\n    plt.show()\nplot_3d(oct_arr_filtered[:, ::4, ::4], \n        threshold_otsu(oct_arr_filtered))","a3c6cd0e":"import string\noct_seg_df = pd.DataFrame(dict(seg_path = oct_seg))\noct_seg_df['file_id'] = oct_seg_df['seg_path'].map(lambda x: os.path.splitext(os.path.basename(x))[0])\noct_seg_df['case_id'] = oct_seg_df['file_id'].map(lambda x: x.split('_')[0])\noct_seg_df['condition'] = oct_seg_df['case_id'].map(lambda x: ''.join([y for y in x.lower()\n                                                               if y in string.ascii_lowercase]))\n\noct_seg_df['grader'] = oct_seg_df['file_id'].map(lambda x: x.split('_')[1].lower())\noct_seg_df['img_path'] = oct_seg_df['case_id'].map(lambda x: [y for y in out_seg_images\n                                                                if os.path.join(x, '') in y])\noct_seg_df = oct_seg_df[oct_seg_df.img_path.map(len)==1]\noct_seg_df['img_path'] = oct_seg_df['img_path'].map(lambda x: x[0])\nprint(oct_seg_df.shape[0], 'complete cases')\noct_seg_df.sample(3)","a448cca0":"from skimage.color import label2rgb\n_, c_row = next(oct_seg_df.sample(1).iterrows())\nprint(c_row)\nfund_img = imread(c_row['img_path'])\nseg_img = imread(c_row['seg_path'])\nfig, (ax_fund, ax_seg, ax_overlap) = plt.subplots(1, 3, figsize = (12, 4), dpi = 300)\nax_seg.imshow(seg_img)\nax_seg.set_title('Segmentation')\nax_fund.imshow(fund_img)\nax_fund.set_title('Fundus Image')\nax_overlap.imshow(label2rgb(seg_img>0, fund_img, bg_label = 0))\nax_overlap.set_title('Overlap')\nfig.savefig('seg_overview.png');","79f98581":"sample_df = oct_seg_df.groupby('condition').apply(lambda x: x.sample(1)).reset_index(drop = True)\nfig, m_axs = plt.subplots(sample_df.shape[0], 2, \n                          figsize = (12, 4*sample_df.shape[0]), dpi = 300)\n[c_ax.axis('off') for c_ax in m_axs.flatten()]\nfor (ax_fund, ax_overlap), (_, c_row) in zip(m_axs, sample_df.iterrows()):\n    fund_img = imread(c_row['img_path'])\n    seg_img = imread(c_row['seg_path'])\n    ax_fund.imshow(fund_img)\n    ax_fund.set_title('Fundus: {condition}'.format(**c_row))\n    ax_overlap.imshow(label2rgb(seg_img>0, fund_img, bg_label = 0))\n    ax_overlap.set_title('Region: {grader}'.format(**c_row))\n    fig.savefig('eye_overview.png');","3d254d6e":"# Manually Labeled Regions\n\nDisplaying the results from the newest study with manually segmented resuts","b6ee36e2":"# Various Eye Diseases\nHere we show one example from each condition","b14a6d9d":"# Segmentation of OCT\nHere we can apply some basic segmentation approaches to see if we can get any better results","44776a7a":"# SPIE Data\nFull OCT scan and Fundus Images","8c1f2fd3":"# Filtering\nWe can try and remove the noise with a bit of median filtering"}}