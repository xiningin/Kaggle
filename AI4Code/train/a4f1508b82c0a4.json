{"cell_type":{"a89f980d":"code","f56272c9":"code","828828ed":"code","3eb72401":"code","00bddcf1":"code","53d3d16c":"code","cbd4a4a1":"code","fc2ca7fa":"code","c7797c53":"code","86928db9":"code","621c9d4d":"code","c910ef12":"code","b1b45ca4":"code","59738725":"code","37ea0bc3":"code","aa9b619a":"code","2fed313a":"code","a38368ee":"code","febff0fb":"code","52976d8d":"code","129c59ac":"code","1bc5ed56":"markdown","4e9dafad":"markdown","ffad8775":"markdown","2389b7e1":"markdown","fcfaf6ca":"markdown","d01b2bac":"markdown"},"source":{"a89f980d":"import pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.neural_network import MLPRegressor\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix","f56272c9":"# Importing dataset\n\nDados = pd.read_csv (r'..\/input\/cardiovascular-disease-dataset\/cardio_train.csv', delimiter=';', encoding = \"ISO-8859-1\")         # As vezes encoding = \"utf-8\"\nDados","828828ed":"# Basic statistics\n\nDados.describe()","3eb72401":"# Creating new Variables\n\nDados['bmi'] = (Dados['weight'] \/ (((Dados['height']\/100)**2))).round(decimals=2)   # Body mass index\nDados['age_y'] = (Dados['age']\/365).round(decimals=2)                               # Age in years\n\n# Creating Flags for categories as 0-1\n\nDados['bmi_high'] = (Dados['bmi'] >= 30).astype(int)","00bddcf1":"del Dados['age']\ndel Dados['id']","53d3d16c":"Dados.head(10)","cbd4a4a1":"# Visualizing Discrete variables and its effects on cardio\n\nColunas = ('gender', 'cholesterol',\t'gluc',\t'smoke',\t'alco',\t'active',\t'bmi_high')\nfig=plt.figure(figsize=(20,20))\nj = 1\nfor i in Colunas :\n  ax=fig.add_subplot(8,8,j)\n  j = j + 1\n  plt.figure(figsize=(2, 2))\n  sns.barplot(x=i,y='cardio',data=Dados,ci=None,ax=ax)\n  fig.tight_layout()  \nplt.show()","fc2ca7fa":"# Correlation matrix to understand relation between variables\n\nplt.figure(figsize=(18, 8))\nsns.heatmap(Dados.corr(), vmin=-1, vmax=1, annot=True, cmap='vlag') # cmap='BrBG'\nplt.title('Correlation Map', fontdict={'fontsize':12}, pad=12);","c7797c53":"plt.figure(figsize=(10, 6))\nsns.scatterplot(x='age_y', y='weight', data= Dados, hue='cardio')","86928db9":"# Visualizing and understanding continuous variables relation with cardio variable\n\nsns.histplot(Dados, x='weight', bins = range(30,150,5), hue='cardio')","621c9d4d":"sns.histplot(Dados, x='age_y', bins = range(30,70,2), hue='cardio')","c910ef12":"DadosX = Dados.iloc[:,[0,1,2,3,4,5,6,7,8,9,11,12,13]]        # independent variable\n\nDadosY = Dados.iloc[:,10]                                    # dependent variable","b1b45ca4":"# Splitting data\n\nX_train, X_test, Y_train, Y_test = train_test_split(DadosX, DadosY,random_state=1, test_size=0.2)","59738725":"X_train.describe()","37ea0bc3":"X_test.describe()","aa9b619a":"# Multi MLP Generator\ntraining_accuracy = []\ntesting_accuracy = []\nLayer1 = range(10,90,20)\nLayer2 = range(10,90,20)\nLayersComb = len(Layer1)*len(Layer2)\nStep=0\nscore=0\n\nfor i in Layer1 :\n  for j in Layer2 :\n    mlp = MLPRegressor(hidden_layer_sizes=(i,j),activation=\"logistic\" ,random_state=1, max_iter=2000).fit(X_train, Y_train)\n    Y_pred_train = mlp.predict(X_train).round()\n    training_accuracy.append(accuracy_score(Y_train, Y_pred_train))\n    Y_pred_test = mlp.predict(X_test).round()\n    acc_score = accuracy_score(Y_test,Y_pred_test)\n    testing_accuracy.append(acc_score)\n    Step = Step + 1\n    if score < acc_score:\n        score = acc_score\n        best_Layer1 = i\n        best_Layer2 = j\n        best_Step = Step\n    \n    print('Step ', Step, ' of ', LayersComb, ' Layer1: ', i, ' Layer2: ', j)    \n    print('Best Accuracy Score', score.round(4), ' Best Layer1: ', best_Layer1, ' Best Layer2: ', best_Layer2, ' do Step:', best_Step)","2fed313a":"sns.lineplot(data=[training_accuracy,testing_accuracy])","a38368ee":"# Selected Model\nmlp_selected = MLPRegressor(hidden_layer_sizes=(70,70),activation=\"logistic\" ,random_state=1, max_iter=2000)\nmlp_selected.fit(X_test, Y_test)","febff0fb":"Y_pred_train = mlp_selected.predict(X_train).round()\ntraining_accuracy.append(accuracy_score(Y_train, Y_pred_train))\nY_pred_test = mlp_selected.predict(X_test).round()\nacc_score = accuracy_score(Y_test,Y_pred_test)\ntesting_accuracy.append(acc_score)","52976d8d":"# Confusion Matrix for Selected Model\ncm=confusion_matrix(Y_test,Y_pred_test)\nconf_matrix=pd.DataFrame(data=cm,columns=['Predicted:0','Predicted:1'],index=['Actual:0','Actual:1'])\nplt.figure(figsize = (8,5))\nsns.heatmap(conf_matrix, annot=True,fmt='d',cmap=\"YlGnBu\");","129c59ac":"print(classification_report(Y_test,Y_pred_test))","1bc5ed56":"# **** Variables Analysis","4e9dafad":"# ****Objective: Develop a Multilayer Perceptron (MLP) to predict cardio vascular disease (cardio) based on other variables. Simple data and model just to help others understanding and develop their own models.","ffad8775":"Some variables have higher correlation with cardio and also between each other.","2389b7e1":"# ****Data Prep","fcfaf6ca":"# Multi model generation comparing trainning and test fit","d01b2bac":"# Splitting data for trainning and testing"}}