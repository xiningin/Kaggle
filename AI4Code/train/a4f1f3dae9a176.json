{"cell_type":{"103600a8":"code","57dcb306":"code","7d091af2":"code","5f4b832d":"code","43f75a67":"code","63476293":"code","ee71c996":"code","d2d76cc0":"code","07a478f2":"code","1a3445d0":"code","d6d9a041":"code","e020a2bd":"code","325f537f":"code","e6b268df":"code","150d57d9":"code","d578d674":"code","948b343a":"code","a012698d":"code","c2c2d301":"markdown","64a19dff":"markdown","c96cf919":"markdown","83bafde0":"markdown","6faecb3a":"markdown"},"source":{"103600a8":"import numpy as np \nimport pandas as pd \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","57dcb306":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\nfrom sklearn.metrics import make_scorer, accuracy_score\nfrom sklearn.model_selection import train_test_split, GridSearchCV\nfrom catboost import CatBoostClassifier, Pool\nfrom sklearn.pipeline import Pipeline\nimport scikitplot as skplot\nfrom sklearn.metrics import precision_score, recall_score, f1_score, accuracy_score, roc_auc_score","7d091af2":"import warnings\nwarnings.filterwarnings('ignore')","5f4b832d":"df = pd.read_csv(\"\/kaggle\/input\/heart-failure-prediction\/heart.csv\")\ndf.head()","43f75a67":"X = df.drop(columns='HeartDisease')\ny = df['HeartDisease']","63476293":"sns.pairplot(df, hue = 'HeartDisease', diag_kind = 'kde',\n             plot_kws = {'alpha': 0.6, 's': 80, 'edgecolor': 'k'},\n             size = 4)","ee71c996":"category = [\"Sex\", \"ExerciseAngina\"]\n\nle = LabelEncoder()\nfor feature in category:\n        if feature in X.columns.values:\n            X[feature] = le.fit_transform(X[feature])","d2d76cc0":"def ekg(ekg):\n    return ['Normal', 'LVH', 'ST'].index(ekg)\n\ndef slope(slope):\n    return ['Flat', 'Down', 'Up'].index(slope)\n\ndef chestpain(chestpain):\n    return ['ASY', 'NAP', 'ATA', 'TA'].index(chestpain)\n\nX['cat_slope'] = X['ST_Slope'].map(slope)\nX['cat_ekg'] = X['RestingECG'].map(ekg)\nX['cat_chestpaintype'] = X['ChestPainType'].map(chestpain)\nX = X.drop(labels=['ST_Slope','RestingECG','ChestPainType'],axis=1)","07a478f2":"X.head()","1a3445d0":"sns.heatmap(X.corr(),linewidths=.5,annot=True,cmap='viridis')\nfig=plt.gcf()\nfig.set_size_inches(10,10)\nplt.show()","d6d9a041":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\nprint(\"X Train : \", len(X_train))\nprint(\"y Train : \", len(y_train))\nprint(\"X Test : \", len(X_test))\nprint(\"t Test : \", len(y_test))","e020a2bd":"pipeline = Pipeline([\n    ('std_scalar', StandardScaler())\n])\n\nX_train = pipeline.fit_transform(X_train)\nX_test = pipeline.transform(X_test)","325f537f":"clf = CatBoostClassifier()\nparams = {'iterations': [500],\n          'depth': [4, 5, 6],\n          'loss_function': ['Logloss', 'CrossEntropy'],\n          'l2_leaf_reg': np.logspace(-20, -19, 3),\n          'leaf_estimation_iterations': [10],\n          'eval_metric': ['Accuracy'],\n          'logging_level':['Silent'],\n          'random_seed': [42]\n         }\nscorer = make_scorer(accuracy_score)\nclf_grid = GridSearchCV(estimator=clf, param_grid=params, scoring=scorer, cv=5)","e6b268df":"clf_grid.fit(X_train, y_train)\nbest_param = clf_grid.best_params_\nbest_param","150d57d9":"model = CatBoostClassifier(depth= 6,\n                           eval_metric= 'Accuracy',\n                            iterations= 500,\n                        l2_leaf_reg= 3.162277660168379e-20,\n                            leaf_estimation_iterations= 10,\n                            logging_level= 'Silent',\n                            loss_function= 'Logloss',\n                            random_seed= 42)","d578d674":"model.fit(X_train, y_train, eval_set=(X_test,y_test))","948b343a":"y_test_pred = model.predict(X_test)\nskplot.metrics.plot_confusion_matrix(y_test, y_test_pred)","a012698d":"def check_scores(y_pred):\n    print('Precision: %.3f' % precision_score(y_test, y_pred))\n    print('Recall: %.3f' % recall_score(y_test, y_pred))\n    print('Accuracy: %.3f' % accuracy_score(y_test, y_pred))\n    print('F1 Score: %.3f' % f1_score(y_test, y_pred))\n    print('ROC-AUC Score: %.3f' % roc_auc_score(y_test, y_pred))\n    return None\n\ncheck_scores(y_test_pred)","c2c2d301":"# Modeling","64a19dff":"# Load Dataset","c96cf919":"# Feature Engineering","83bafde0":"# EDA","6faecb3a":"# Evaluation"}}