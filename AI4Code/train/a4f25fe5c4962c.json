{"cell_type":{"cbaa8dd7":"code","8fff28a3":"code","1568fcfd":"code","82165ad4":"code","0735eab8":"code","37fb9e4a":"code","91853419":"code","7c5086c0":"markdown","62f05acb":"markdown","7dbcbc2c":"markdown","1b7fed2e":"markdown"},"source":{"cbaa8dd7":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","8fff28a3":"import numpy as np\nimport pandas as pd\nfrom catboost import cv, Pool","1568fcfd":"#read data\ntrain = pd.read_csv('..\/input\/data-without-drift\/train_clean.csv', dtype={'time':np.float32,'signal':np.float32,'open_channels':np.int32})\ntest = pd.read_csv('..\/input\/data-without-drift\/test_clean.csv', dtype={'time':np.float32,'signal':np.float32})\nsub = pd.read_csv('..\/input\/liverpool-ion-switching\/sample_submission.csv', dtype={'time':np.float32,'open_channels':np.int32})\nY_train_proba = np.load(\"..\/input\/ion-shifted-rfc-proba\/Y_train_proba.npy\")\nY_test_proba = np.load(\"..\/input\/ion-shifted-rfc-proba\/Y_test_proba.npy\")\n\nfor i in range(11):\n  train[f\"proba_{i}\"] = Y_train_proba[:,i]\n  test[f\"proba_{i}\"] = Y_test_proba[:,i]\n\n#Lets also get hard votes from \"ion-shifted-rfc-proba\" data because this categorical information might be useful in CatboostClassifier\ntrain['proba'] = np.argmax(Y_train_proba,axis=1)\ntest['proba'] = np.argmax(Y_test_proba,axis=1)","82165ad4":"train.loc[train.index % 2 ==0,'id'] = 1\ntrain.loc[train.index % 2 !=0,'id'] = 2\n\nx_train = train[train.id ==1].drop(['open_channels','id'],axis=1)\ny_train = train[train.id ==1]['open_channels']\n\nx_val = train[train.id ==2].drop(['open_channels','id'],axis=1)\ny_val = train[train.id ==2]['open_channels']\n\nprint(x_train.shape)\nprint(y_train.shape)\nprint(x_val.shape)\nprint(y_val.shape)","0735eab8":"# conda install -c conda-forge catboost","37fb9e4a":"from catboost import CatBoostClassifier\n\ncat = CatBoostClassifier(task_type='GPU',iterations=10000,loss_function='MultiClass',od_type='Iter',od_wait=500)\n\ncat.fit(x_train,y_train,verbose=25, eval_set = (x_val,y_val),cat_features=[13])\n","91853419":"y_preds = cat.predict(test)\nsub['open_channels'] = y_preds\nsub.to_csv('submission_cat.csv',index=False,float_format='%.4f')","7c5086c0":"# **Training Catboost Classifier**\n\nI have used default parameters but you can play around with them for better score. Generally, hyperparameter tuning is not much required in Catboost. Also, you can generate more features based on past\/future lags or running mean\/std etc.","62f05acb":"# **Reading Data**","7dbcbc2c":"# **Cross Validation Sceheme**\n\nFor cross validation I split the data in two groups where all even rows are in train set and all odd rows are in test set. My purpose was to get a model that can generalize the best on test set.","1b7fed2e":"# **Saving the Model**"}}