{"cell_type":{"06f6e693":"code","88815b91":"code","716aff51":"code","265d7500":"code","3046041c":"code","be725f3d":"code","6dd363ee":"code","2daf04f1":"code","2fcd15f6":"code","919c520a":"code","cc0c1902":"code","411397ef":"code","25e000fe":"code","42a4394b":"code","9833f86c":"code","e7d79f36":"code","c4047fbe":"code","a9fdcfd0":"code","2ce43140":"code","ae56c9a5":"code","81912f94":"code","04a33c7b":"code","983c7a14":"code","5eb9639d":"code","e2e64cec":"code","70f8915f":"code","e5db67f0":"code","79a837c3":"code","5ddf44da":"code","07e2da83":"code","0ebd2533":"code","e2c85be2":"code","98d268cb":"code","13d78ae1":"code","74f7b591":"code","37dca296":"code","57fe5a58":"code","0f5d9c27":"code","955a238b":"code","3e17db28":"code","45585fcf":"code","1b459e94":"code","2f3f8259":"code","7de62c57":"code","14ac6b2c":"code","3998e91b":"code","02bec39f":"code","6c2be88a":"code","9c16c4c5":"code","8fd721ff":"code","62a9a3a8":"code","2270195d":"code","f3ff6e0b":"code","a930aead":"code","2e18f02f":"code","307e7746":"code","b1d379d3":"code","84010887":"code","1cded58e":"code","5821a894":"code","3d462143":"code","20e48efc":"code","04e62f86":"code","af976ee7":"code","e10cb0c7":"code","d24e21ea":"code","91c57e28":"code","ceb2bd8c":"code","efac4a59":"code","1eec8275":"code","a8c76f6b":"code","002d6248":"code","52de3613":"code","8074a1d6":"code","a8c99556":"code","11d0b2be":"markdown","9677f2ad":"markdown","91dde828":"markdown","9eb2bfde":"markdown","2096b210":"markdown","e7858367":"markdown","a70fc79a":"markdown","e7545035":"markdown","551c1d71":"markdown","3ac23d96":"markdown","f2240f8e":"markdown","dc98a0e8":"markdown","7339706b":"markdown","f0efbe8b":"markdown"},"source":{"06f6e693":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","88815b91":"#\u30e9\u30a4\u30d6\u30e9\u30ea\u30a4\u30f3\u30dd\u30fc\u30c8\nimport numpy as np\nimport scipy as sp\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\nimport matplotlib.pyplot as plt\nplt.style.use('ggplot')\n%matplotlib inline\n\nfrom sklearn.metrics import roc_auc_score\nfrom sklearn.model_selection import StratifiedKFold\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom category_encoders import OrdinalEncoder, OneHotEncoder, TargetEncoder\nfrom tqdm import tqdm_notebook as tqdm\nfrom sklearn.preprocessing import LabelEncoder\n\nfrom sklearn.ensemble import GradientBoostingClassifier\n\nimport lightgbm as lgb\nfrom lightgbm import LGBMClassifier","716aff51":"#\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\ndf_train = pd.read_csv('\/kaggle\/input\/homework-for-students4plus\/train.csv', index_col=0, parse_dates=['issue_d','earliest_cr_line'])\ndf_test = pd.read_csv('\/kaggle\/input\/homework-for-students4plus\/test.csv', index_col=0, parse_dates=['issue_d','earliest_cr_line'])","265d7500":"df_train.head()","3046041c":"df_test.head()\n#loan_condition\u304c\u30bf\u30fc\u30b2\u30c3\u30c8\u306a\u306e\u3067\u5165\u3063\u3066\u306a\u3044","be725f3d":"##\u611f\u899a\u7684\u306bloan_codition\u306b\u5f71\u97ff\u3057\u305d\u3046\u306a\u9805\u76ee\u3092\u6319\u3052\u308b\n#acc_now_delinq\uff08\u501f\u308a\u624b\u304c\u73fe\u5728\u6ede\u7d0d\u3057\u3066\u3044\u308b\u53e3\u5ea7\u306e\u6570\uff09\n#annual_inc\uff08\u767b\u9332\u6642\u306b\u501f\u308a\u624b\u304c\u63d0\u4f9b\u3059\u308b\u81ea\u5df1\u7533\u544a\u306e\u5e74\u53ce\uff09\n#delinq_2yrs\uff08\u904e\u53bb2\u5e74\u9593\u306e\u501f\u308a\u624b\u306e\u4fe1\u7528\u30d5\u30a1\u30a4\u30eb\u306b\u304a\u3051\u308b\u5ef6\u6ede\u306e30\u65e5\u4ee5\u4e0a\u306e\u5ef6\u6ede\u7387\uff09\n#emp_length\uff08\u5e74\u5358\u4f4d\u306e\u96c7\u7528\u671f\u9593\uff09\n#emp_title\uff08\u30ed\u30fc\u30f3\u306e\u7533\u3057\u8fbc\u307f\u6642\u306b\u501f\u308a\u624b\u304b\u3089\u63d0\u4f9b\u3055\u308c\u305f\u5f79\u8077\uff09\n#grade\uff08LC\u5272\u308a\u5f53\u3066\u30ed\u30fc\u30f3\u30b0\u30ec\u30fc\u30c9\uff09\n#installment\uff08\u30ed\u30fc\u30f3\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u3001\u501f\u308a\u624b\u304c\u652f\u6255\u3046\u6708\u3005\u306e\u652f\u6255\u3044\uff09\n#loan_amnt\uff08\u501f\u308a\u624b\u304c\u7533\u8acb\u3057\u305f\u30ed\u30fc\u30f3\u306e\u30ea\u30b9\u30c8\u3055\u308c\u305f\u91d1\u984d\uff09\n#mths_since_last_delinq\uff08\u501f\u308a\u624b\u304c\u6700\u5f8c\u306b\u5ef6\u6ede\u3057\u3066\u304b\u3089\u306e\u6708\u6570\uff09\n#sub_grade\uff08LC\u5272\u308a\u5f53\u3066\u30ed\u30fc\u30f3\u8def\u5e8a\uff09\n#tot_coll_amt\uff08\u3053\u308c\u307e\u3067\u306b\u652f\u6255\u308f\u308c\u305f\u5fb4\u53ce\u7dcf\u984d\uff09\n\n#\u6b63\u76f4\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u304c\u3001\u516c\u5f0f\uff1f\u30da\u30fc\u30b8\u3092\u898b\u308b\u3068\u3001grade\u3001sub_grade\u304c\u5b9f\u306f\u91cd\u8981\u305d\u3046\u2192\u30a8\u30f3\u30b3\u30fc\u30c9\u306eTarget\u306b\u3059\u308b\uff1f\n#https:\/\/www.lendingclub.com\/foliofn\/rateDetail.action\n\n#feature_importance\u3092\u8981\u30c1\u30a7\u30c3\u30af\uff01","6dd363ee":"df_train.info()\n#NULL\u304c\u591a\u3044\u9805\u76ee3\u9078\n#mths_since_last_delinq\uff1a\u501f\u308a\u624b\u304c\u6700\u5f8c\u306b\u5ef6\u6ede\u3057\u3066\u304b\u3089\u306e\u6708\u6570\u2192\u5f71\u97ff\u5927\u304d\u305d\u3046\n#mths_since_last_record\uff1a\u6700\u5f8c\u306e\u516c\u7684\u8a18\u9332\u304b\u3089\u306e\u6708\u6570\uff1f\n#mths_since_last_major_derog\uff1a\u76f4\u8fd1\u306e90\u65e5\u4ee5\u964d\u306e\u8a55\u4fa1\u304b\u3089\u306e\u6708\u6570\uff1f","2daf04f1":"#NULL\u6570\ndf_train.isnull().sum()","2fcd15f6":"#NULL\u6570\ndf_test.isnull().sum()","919c520a":"df_train.describe()","cc0c1902":"df_test.describe()","411397ef":"#\u6570\u5024\u9805\u76ee\u76f8\u95a2\u884c\u5217\ncorr = df_train.corr()\nprint(corr)","25e000fe":"#\u30c7\u30fc\u30bf\u5206\u5272\uff08\u7591\u554f\uff1a2008\u5e74\u3068\u304b\u53e4\u3044\u30c7\u30fc\u30bf\u3082\u3042\u308b\u304c\u7d5e\u308b\u3079\u304d\uff1f\uff09\n#\u91cd\u8981\u305d\u3046\u306adelinq_2yrs\u304c\u904e\u53bb2\u5e74\u9593\u57fa\u6e96\u306a\u306e\u3067\u3001\u8a66\u3057\u306b2\u5e74\u306b\u7d5e\u3063\u3066\u307f\u308b\ndf_train = df_train[df_train['issue_d'].dt.year >= 2014]\ny_train = df_train.loan_condition\nX_train = df_train.drop(['loan_condition'], axis=1)\nX_test = df_test","42a4394b":"y_train","9833f86c":"X_train\n##\u3068\u308a\u3042\u3048\u305a\u6d6e\u304b\u3093\u3060\u3053\u3068\u30e1\u30e2\n#grade\uff08LC\u5272\u308a\u5f53\u3066\u30ed\u30fc\u30f3\u30b0\u30ec\u30fc\u30c9\uff09\u3068sub_grade\uff08LC\u5272\u308a\u5f53\u3066\u30ed\u30fc\u30f3\u8def\u5e8a\uff09\u306f\u7d50\u5408\n#emp_title\uff08\u30ed\u30fc\u30f3\u306e\u7533\u3057\u8fbc\u307f\u6642\u306b\u501f\u308a\u624b\u304b\u3089\u63d0\u4f9b\u3055\u308c\u305f\u5f79\u8077\uff09\u306f\u30c6\u30ad\u30b9\u30c8\u3068\u3057\u3066\u51e6\u7406\n#title\uff08\u501f\u308a\u624b\u304b\u3089\u63d0\u4f9b\u3055\u308c\u305f\u30ed\u30fc\u30f3\u306e\u30bf\u30a4\u30c8\u30eb\uff09\u3084purpose\uff08\u30ed\u30fc\u30f3\u8981\u6c42\u306e\u305f\u3081\u306b\u501f\u308a\u624b\u304c\u63d0\u4f9b\u3059\u308b\u30ab\u30c6\u30b4\u30ea\uff09\u306f\u9078\u629e\u3057\u3066\u308b\u3060\u3051\u306e\u3088\u3046\u306a\u306e\u3067\u3001\u30ab\u30c6\u30b4\u30ea\u3068\u3057\u3066\u51e6\u7406\n#emp_length\uff08\u5e74\u5358\u4f4d\u306e\u96c7\u7528\u671f\u9593\uff09\u306f\u5358\u6570\u306b\u5909\u63db\n#issue_d\uff08\u878d\u8cc7\u304c\u884c\u308f\u308c\u305f\u6708\uff09\u3068earliest_cr_line\uff08\u501f\u308a\u624b\u304c\u6700\u521d\u306b\u5831\u544a\u3057\u305f\u4e0e\u4fe1\u67a0\u304c\u958b\u8a2d\u3055\u308c\u305f\u6708\uff09\u304c\u65e5\u4ed8\u3068\u3057\u3066\u8a8d\u8b58\u3055\u308c\u3066\u306a\u3044\u30fb\u30fb\n#\u65e5\u4ed8\u3068\u3057\u3066\u52a0\u5de5\u3057\u305f\u307b\u3046\u304c\u826f\u3044\u304b","e7d79f36":"X_train['issue_d'].describe()","c4047fbe":"X_test","a9fdcfd0":"#\u3068\u308a\u3042\u3048\u305aNULL\u3082\u7279\u5fb4\u91cf\u3068\u3057\u3066\u7528\u610f\u3057\u3068\u304f\nX_train['null'] = df_train.isnull().sum(axis=1)\nX_test['null'] = df_test.isnull().sum(axis=1)","2ce43140":"#\u65e5\u4ed8\u3092\u6570\u5024\u3078\u5909\u63db\nX_train['issue_d'] = X_train['issue_d'].map(pd.Timestamp.timestamp).astype(int)\nX_train['earliest_cr_line'] = X_train['earliest_cr_line'].map(pd.Timestamp.timestamp).astype(int)\nX_test['issue_d'] = X_test['issue_d'].map(pd.Timestamp.timestamp).astype(int)\nX_test['earliest_cr_line'] = X_test['earliest_cr_line'].map(pd.Timestamp.timestamp).astype(int)","ae56c9a5":"#grade\u3001sub_grade\u306fLabel\uff08Ordinal\uff09\u30a8\u30f3\u30b3\u30fc\u30c9\u3092\u8a66\u3059\ncols_grade = ['grade','sub_grade']\nfor c in cols_grade:\n    le = LabelEncoder()\n    le.fit(X_train[c])\n    X_train[c] = le.transform(X_train[c])\n    X_test[c] = le.transform(X_test[c])","81912f94":"X_train.head()","04a33c7b":"X_train['grade'].value_counts()","983c7a14":"X_train['sub_grade'].value_counts()","5eb9639d":"#\u304a\u4f5c\u6cd5\u3068\u3057\u3066\u30b0\u30ec\u30fc\u30c9\u306f\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u308b\n#\u7279\u5fb4\u91cf\u4f5c\u6210\u306e\u305f\u3081\u30011\u52a0\u7b97\u3057\u3066\u304a\u304f\nX_train['grade'] += 1\nX_test['grade'] += 1\nX_train['sub_grade'] += 1\nX_test['sub_grade'] += 1\n#sab_grade\u306e\u7a2e\u985e\u304c\u591a\u3044\u3002\u50be\u5411\u7dad\u6301\u306e\u305f\u3081\u7a4d\u7b97\nX_train['total_grade'] = X_train['grade'] * X_train['sub_grade']\nX_test['total_grade'] = X_test['grade'] * X_test['sub_grade']","e2e64cec":"X_train[['grade', 'sub_grade', 'total_grade']].head()","70f8915f":"#emp_length\u306f\u89e3\u91c8\u3057\u3084\u3059\u3044\u5358\u6570\u306b\u5909\u63db\n#\u9806\u5e8f\u306b\u610f\u5473\u304c\u3042\u308band\u6570\u5024\u6587\u5b57\u6df7\u3058\u308a\u306a\u306e\u3067\u3001\u56fa\u5b9a\u5024\u3092\u5272\u308a\u632f\u308b\ndef emp_length_encoder(emp_length):\n    if emp_length == '< 1 year':\n        return 1\n    if emp_length == '1 year':\n        return 2\n    if emp_length == '2 years':\n        return 3\n    if emp_length == '3 years':\n        return 4\n    if emp_length == '4 years':\n        return 5\n    if emp_length == '5 years':\n        return 6\n    if emp_length == '6 years':\n        return 7\n    if emp_length == '7 years':\n        return 8\n    if emp_length == '8 years':\n        return 9\n    if emp_length == '9 years':\n        return 10\n    if emp_length == '10 years':\n        return 11\n    if emp_length == '10+ years':\n        return 12","e5db67f0":"#\u5909\u63db\nX_train['emp_length'] = X_train['emp_length'].apply(emp_length_encoder)\nX_test['emp_length'] = X_train['emp_length'].apply(emp_length_encoder)","79a837c3":"f = 'emp_length'\n\nplt.figure(figsize=[7,7])\nX_train[f].hist(density=True, alpha=0.5, bins=20)\nX_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","5ddf44da":"#emp_title\u306f\u30c6\u30ad\u30b9\u30c8\u3068\u3057\u3066\u6271\u3046\u306e\u3067\u3001n-gram\/TF-IDF\u3057\u3066\u307f\u308b\nemp_title_train = X_train.emp_title.copy()\nemp_title_test = X_test.emp_title.copy()\n#\u6b20\u640d\u5024\u57cb\u3081\u3068\u304f\nemp_title_train.fillna('#', inplace=True)\nemp_title_test.fillna('#', inplace=True)\n#TfidfVectorizer\u3092\u8a66\u3059\uff08http:\/\/scikitlearn.org\/stable\/modules\/feature_extraction.html\uff09\n#\u76f4\u63a5\u4f7f\u3063\u3066\u3082\u3088\u3044\u304c\u3001\u3042\u3068\u3067\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u3057\u3088\u3046\u3068\u601d\u3046 \nemp_tfidf_vec = TfidfVectorizer(max_features=1000, use_idf=True)\n#\u3053\u306e\u8fba\u308a\u7dda\u5f62\u4ee3\u6570\u304c\u30ef\u30ab\u30e9\u30ca\u30a4\u30fb\u30fb\u3068\u308a\u3042\u3048\u305a\u30e2\u30c7\u30eb\u3067\u4f7f\u3044\u3084\u3059\u3044\u5f62\u3067fit\n##\u53c2\u8003\n#https:\/\/hamukazu.com\/2014\/09\/26\/scipy-sparse-basics\/\n#https:\/\/qiita.com\/fujin\/items\/b1a7152c2ec2b4963160\n#TEMP_title_train = emp_tfidf_vec.fit_transform(emp_title_train)\nTEMP_title_train = emp_tfidf_vec.fit_transform(emp_title_train).tocsr()\nTEMP_title_test = emp_tfidf_vec.transform(emp_title_test).tocsr()","07e2da83":"#\u30c7\u30fc\u30bf\u78ba\u8a8d\nemp_title_train","0ebd2533":"emp_tfidf_vec","e2c85be2":"TEMP_title_train","98d268cb":"#object\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\ncats = []\nfor col in X_train.columns:\n    if X_train[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train[col].nunique())","13d78ae1":"#\u5206\u5e03\u78ba\u8a8d\uff08grade\uff09\nf = 'grade'\n\nplt.figure(figsize=[7,7])\nX_train[f].hist(density=True, alpha=0.5, bins=20)\nX_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","74f7b591":"#\u5206\u5e03\u78ba\u8a8d\uff08sub_grade\uff09\nf = 'sub_grade'\n\nplt.figure(figsize=[7,7])\nX_train[f].hist(density=True, alpha=0.5, bins=20)\nX_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","37dca296":"#\u5206\u5e03\u78ba\u8a8d\uff08total_grade\uff09\nf = 'total_grade'\n\nplt.figure(figsize=[7,7])\nX_train[f].hist(density=True, alpha=0.5, bins=20)\nX_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","57fe5a58":"#\u6570\u5024\u9805\u76ee\u76f8\u95a2\u884c\u5217\u518d\u78ba\u8a8d\ncorr = X_train.corr()\nprint(corr)","0f5d9c27":"#target_encoding(\u5bfe\u8c61\u9805\u76ee\u306f\u7cbe\u67fb\u304c\u5fc5\u8981\u3002\u30e6\u30cb\u30fc\u30af\u5024\u304c\u5c11\u306a\u3044\u6570\u5024\u9805\u76ee\u3069\u3046\u3059\u308b\uff1f)\n#loan_condition\u305d\u306e\u307e\u307e\u306fleak\u304c\u6016\u3044\u306e\u3067\u3001target\u306fimpotance\u306asub_grade\u3067\u8a66\u3059\n#importance\u304b\u3089\u6700\u7d42\u7684\u306b\u4ee5\u4e0b\u306b\u843d\u3061\u7740\u304f\ntarget_list = ['grade','emp_length','home_ownership','zip_code','addr_state','inq_last_6mths', 'open_acc']\ntarget = 'sub_grade'\nX_temp = pd.concat([X_train, y_train], axis=1)","955a238b":"#X_train\u306e\u30ab\u30c6\u30b4\u30ea\u5909\u6570\u3092oof\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n#\u51e6\u7406\u306e\u6d41\u308c\u306f\u30b5\u30f3\u30d7\u30eb\u6d41\u7528\nskf = StratifiedKFold(n_splits=5, random_state=71, shuffle=True)\n#for h in range (20): skf = StratifiedKFold(n_splits=5, random_state=h, shuffle=True)\nfor col in target_list:\n    #X_test\u306fX_train\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3059\u308b\n    summary = X_temp.groupby([col])[target].mean()\n    enc_test = X_test[col].map(summary) \n    \n    enc_train = Series(np.zeros(len(X_train)), index=X_train.index)\n    \n    for i, (train_ix, val_ix) in enumerate((skf.split(X_train, y_train))):\n        X_train_, _ = X_temp.iloc[train_ix], y_train.iloc[train_ix]\n        X_val, _ = X_temp.iloc[val_ix], y_train.iloc[val_ix]\n        \n        summary = X_train_.groupby([col])[target].mean()\n        enc_train.iloc[val_ix] = X_val[col].map(summary)\n    \n    #\u7d50\u679c\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u9805\u76ee\u3068\u3057\u3066\u8ffd\u52a0\uff08\u7f6e\u63db\u306f\u6050\u3044\u30fb\u30fb\uff09\n    X_train['target_' + col] = enc_train\n    X_test['target_' + col] = enc_test","3e17db28":"X_train.head()","45585fcf":"#\u73fe\u72b6\u78ba\u8a8d\nX_train.head()","1b459e94":"#\u7279\u5fb4\u91cf\u751f\u6210\u306e\u305f\u3081\u4e00\u6642\u7684\u306b\u7d50\u5408\nX_train['hanbetsu_flg'] = 'train'\nX_test['hanbetsu_flg'] = 'test'\nX_train_con = pd.concat([X_train,X_test])\nX_train_con.shape","2f3f8259":"#object\u306e\u30ab\u30e9\u30e0\u540d\u3068\u30e6\u30cb\u30fc\u30af\u6570\u3092\u78ba\u8a8d\ncats = []\nfor col in X_train_con.columns:\n    if X_train_con[col].dtype == 'object':\n        cats.append(col)\n        \n        print(col, X_train_con[col].nunique())","7de62c57":"cats.remove('hanbetsu_flg')","14ac6b2c":"#\u6b8b\u308a\u306f\u307e\u3068\u3081\u3066Ordinal\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\noe = OrdinalEncoder(cols=cats, return_df=False)\n\nX_train_con[cats] = oe.fit_transform(X_train_con[cats])","3998e91b":"#\u73fe\u72b6\u78ba\u8a8d\nX_train_con.head()","02bec39f":"#\u30ab\u30a6\u30f3\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0 \u3067\u9805\u76ee\u3092\u8ffd\u52a0\n#importance\u304b\u3089\u6700\u7d42\u7684\u306b\u4ee5\u4e0b\u306b\u843d\u3061\u7740\u304f\nX_train_con['count_addr_state'] = X_train_con['addr_state'].map(X_train_con['addr_state'].value_counts())\nX_train_con['count_zip_code'] = X_train_con['zip_code'].map(X_train_con['zip_code'].value_counts())\nX_train_con['count_emp_length'] = X_train_con['emp_length'].map(X_train_con['emp_length'].value_counts())\nX_train_con['count_title'] = X_train_con['title'].map(X_train_con['title'].value_counts())\nX_train_con['count_emp_title'] = X_train_con['emp_title'].map(X_train_con['emp_title'].value_counts())","6c2be88a":"#\u5206\u5e03\u78ba\u8a8d\uff08count_addr_state\uff09\nf = 'count_addr_state'\n\nplt.figure(figsize=[7,7])\nX_train_con[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","9c16c4c5":"#\u6570\u5024\u9805\u76ee\u76f8\u95a2\u884c\u5217\u518d\u78ba\u8a8d\ncorr = X_train.corr()\nprint(corr)","8fd721ff":"#\u5206\u5272\nX_train = X_train_con[X_train_con['hanbetsu_flg'] == 'train']\nX_test = X_train_con[X_train_con['hanbetsu_flg'] == 'test']\n\nX_train.drop(['hanbetsu_flg'], axis=1, inplace=True)\nX_test.drop(['hanbetsu_flg'], axis=1, inplace=True)","62a9a3a8":"#\u6b20\u640d\u5024\u3046\u3081\u308b(\u5f71\u97ff\u3067\u306a\u3044\u3088\u3046\u306b)\nX_train.fillna(-9999, inplace=True)\nX_test.fillna(-9999, inplace=True)","2270195d":"#\u78ba\u8a8d\nX_train.head()","f3ff6e0b":"X_test.head()","a930aead":"#\u5206\u5e03\u78ba\u8a8d\uff08count_addr_state\uff09\nf = 'count_addr_state'\n\nplt.figure(figsize=[7,7])\nX_train[f].hist(density=True, alpha=0.5, bins=20)\nX_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","2e18f02f":"#\u5206\u5e03\u78ba\u8a8d\uff08count_zip_code\uff09\nf = 'count_zip_code'\n\nplt.figure(figsize=[7,7])\nX_train[f].hist(density=True, alpha=0.5, bins=20)\nX_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","307e7746":"#\u5206\u5e03\u78ba\u8a8d\uff08count_emp_length\uff09\nf = 'count_emp_length'\n\nplt.figure(figsize=[7,7])\nX_train[f].hist(density=True, alpha=0.5, bins=50)\nX_test[f].hist(density=True, alpha=0.5, bins=50)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","b1d379d3":"X_train['count_emp_length'].describe()","84010887":"X_test['count_emp_length'].describe()","1cded58e":"#\u5206\u5e03\u78ba\u8a8d\uff08count_title\uff09\nf = 'count_title'\n\nplt.figure(figsize=[7,7])\nX_train[f].hist(density=True, alpha=0.5, bins=20)\nX_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","5821a894":"#\u5206\u5e03\u78ba\u8a8d\uff08count_emp_title\uff09\nf = 'count_emp_title'\n\nplt.figure(figsize=[7,7])\nX_train[f].hist(density=True, alpha=0.5, bins=20)\nX_test[f].hist(density=True, alpha=0.5, bins=20)\nplt.xlabel(f)\nplt.ylabel('density')\nplt.show()","3d462143":"#\u7df4\u7fd2\u304c\u3066\u3089\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0\u3092\u8a66\u3059\n#\u7528\u610f\u3057\u305femp_title\u306en-gram\/TF-IDF\u7d50\u679c\u304b\u3089\u4e88\u6e2c\u5024\u7279\u5fb4\u91cf\u3092\u751f\u6210\n#\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f7f\u3063\u3066\u307f\u308b\u304c\u3001\u4f55\u304c\u826f\u3044\u304b\u306f\u8272\u3005\u8a66\u3059\u3079\u304d\u30fb\u30fb\n#\u30b3\u30fc\u30c9\u306f\u7406\u89e3\u4e0d\u8db3\u306a\u306e\u3067\u8981\u52c9\u5f37\nfrom sklearn.linear_model import LogisticRegression\n\nskf = StratifiedKFold(n_splits=5, random_state=81, shuffle=True)\n#for h in range (20): skf = StratifiedKFold(n_splits=10, random_state=h, shuffle=True)\nhold_train = np.zeros(len(X_train))\nhold_test = np.zeros(len(X_test))\n\nfor i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train, y_train))):\n    X_train_tfidf, y_train_tfidf = TEMP_title_train[train_ix], y_train.values[train_ix]\n    X_val_tfidf, y_val_tfidf = TEMP_title_train[test_ix], y_train.values[test_ix]\n    \n    clf = LogisticRegression(solver='sag')\n    clf.fit(X_train_tfidf, y_train_tfidf)\n    \n    y_pred = clf.predict_proba(X_val_tfidf)[:,1]\n    hold_train[test_ix] = y_pred\n    score = roc_auc_score(y_val_tfidf, y_pred)\n    print('CV Score of Fold_%d is %f' % (i, score))\n    \n    hold_test += clf.predict_proba(TEMP_title_test)[:,1]\n\nhold_test \/= 5","20e48efc":"X_train['emp_title_train'] = hold_train\nX_test['emp_title_train'] = hold_test","04e62f86":"# emp_title\u9664\u5916\nX_train.drop(['emp_title'], axis=1, inplace=True)\nX_test.drop(['emp_title'], axis=1, inplace=True)","af976ee7":"# feature importance\u3067\u5fae\u5999\u306a\u9805\u76ee\u3092\u524a\u9664\uff08< 500\uff09\nX_train.drop(['collections_12_mths_ex_med'], axis=1, inplace=True)\nX_test.drop(['collections_12_mths_ex_med'], axis=1, inplace=True)\n\nX_train.drop(['initial_list_status'], axis=1, inplace=True)\nX_test.drop(['initial_list_status'], axis=1, inplace=True)\n\nX_train.drop(['application_type'], axis=1, inplace=True)\nX_test.drop(['application_type'], axis=1, inplace=True)\n\nX_train.drop(['acc_now_delinq'], axis=1, inplace=True)\nX_test.drop(['acc_now_delinq'], axis=1, inplace=True)\n\nX_train.drop(['title'], axis=1, inplace=True)\nX_test.drop(['title'], axis=1, inplace=True)\n\n#\u5b9f\u306f\u91cd\u8981\u3067\u306f\u306a\u3044\u30fb\u30fb\uff1f\u5e74\u30922\u5e74\u306b\u3057\u3066\u3088\u3044\u306e\u304b\u30fb\u30fb\nX_train.drop(['delinq_2yrs'], axis=1, inplace=True)\nX_test.drop(['delinq_2yrs'], axis=1, inplace=True)\n\nX_train.drop(['null'], axis=1, inplace=True)\nX_test.drop(['null'], axis=1, inplace=True)\n\nX_train.drop(['purpose'], axis=1, inplace=True)\nX_test.drop(['purpose'], axis=1, inplace=True)\n\nX_train.drop(['count_title'], axis=1, inplace=True)\nX_test.drop(['count_title'], axis=1, inplace=True)\n\n#\u3053\u3053\u3088\u308a\u4e0b\u306f300\u524d\u5f8c\u306a\u306e\u3067\u3001\u6d88\u3055\u306a\u3044\u65b9\u304c\u3088\u3044\u304b\u3082\u30fb\u30fb\nX_train.drop(['inq_last_6mths'], axis=1, inplace=True)\nX_test.drop(['inq_last_6mths'], axis=1, inplace=True)\n\nX_train.drop(['tot_coll_amt'], axis=1, inplace=True)\nX_test.drop(['tot_coll_amt'], axis=1, inplace=True)\n\n#X_train.drop(['count_emp_title'], axis=1, inplace=True)\n#X_test.drop(['count_emp_title'], axis=1, inplace=True)\n\n#X_train.drop(['pub_rec'], axis=1, inplace=True)\n#X_test.drop(['pub_rec'], axis=1, inplace=True)\n\n#X_train.drop(['home_ownership'], axis=1, inplace=True)\n#X_test.drop(['home_ownership'], axis=1, inplace=True)","e10cb0c7":"##importance > 1000 \n#sub_grade \t19453.879004\n#grade \t10350.000699\n#total_grade \t9299.961001\n#target_grade \t3311.216443\n#dti \t2948.874822\n#emp_title_train \t2153.709932\n#installment \t2069.175478\n#tot_cur_bal \t1747.159967\n#open_acc \t1278.923768\n#revol_bal \t1163.956004\n#target_addr_state \t1022.390190","d24e21ea":"#\u4e0a\u8a18\u306e\u9805\u76ee\u3092\u5143\u306b\u65b0\u7279\u5fb4\u91cf\u3092\u3044\u308d\u3044\u308d\u691c\u8a0e\uff08grade\u3001sub_grade\u304c\u5727\u5012\u7684\u306a\u306e\u3067\u3053\u308c\u3092\u30d9\u30fc\u30b9\u306b\uff09\nX_train['grade_dti'] = X_train['dti'] * X_train['grade']\nX_train['sub_grade_dti'] = X_train['dti'] * X_train['sub_grade']\nX_train['grade_installment'] = X_train['installment'] * X_train['grade']\nX_train['sub_grade_installment'] = X_train['installment'] * X_train['sub_grade']\nX_train['grade_revol_util'] = X_train['revol_util'] * X_train['grade']\nX_train['sub_grade_revol_util'] = X_train['revol_util'] * X_train['sub_grade']\nX_train['grade_home_ownership'] = X_train['home_ownership'] * X_train['grade']\nX_train['sub_grade_home_ownership'] = X_train['home_ownership'] * X_train['sub_grade']\nX_train['grade_tot_cur_bal'] = X_train['tot_cur_bal'] \/ X_train['grade']\nX_train['sub_grade_tot_cur_bal'] = X_train['tot_cur_bal'] \/ X_train['sub_grade']\nX_train['grade_revol_bal'] = X_train['revol_bal'] \/ X_train['grade']\nX_train['sub_grade_revol_bal'] = X_train['revol_bal'] \/ X_train['sub_grade']\n\nX_test['grade_dti'] = X_test['dti'] * X_test['grade']\nX_test['sub_grade_dti'] = X_test['dti'] * X_test['sub_grade']\nX_test['grade_installment'] = X_test['installment'] * X_test['grade']\nX_test['sub_grade_installment'] = X_test['installment'] * X_test['sub_grade']\nX_test['grade_revol_util'] = X_test['revol_util'] * X_test['grade']\nX_test['sub_grade_revol_util'] = X_test['revol_util'] * X_test['sub_grade']\nX_test['grade_home_ownership'] = X_test['home_ownership'] * X_test['grade']\nX_test['sub_grade_home_ownership'] = X_test['home_ownership'] * X_test['sub_grade']\nX_test['grade_tot_cur_bal'] = X_test['tot_cur_bal'] \/ X_test['grade']\nX_test['sub_grade_tot_cur_bal'] = X_test['tot_cur_bal'] \/ X_test['sub_grade']\nX_test['grade_revol_bal'] = X_test['revol_bal'] \/ X_test['grade']\nX_test['sub_grade_revol_bal'] = X_test['revol_bal'] \/ X_test['sub_grade']\n","91c57e28":"#optuna\u306b\u3088\u308b\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n#https:\/\/www.kaggle.com\/snakayama\/lightgbm-using-optuna-optuna-lightgbm\n#\n# def lb_opt(X_train_all,Y_train_all,trial):\n#     (X_train,X_test,y_train,y_test) = train_test_split(X_train_all,Y_train_all,test_size=0.2,random_state=0)\n#     #paramter_tuning using optuna\n#     bagging_freq =  trial.suggest_int('bagging_freq',1,10),\n#     min_data_in_leaf =  trial.suggest_int('min_data_in_leaf',2,100),\n#     max_depth = trial.suggest_int('max_depth',1,20),\n#     learning_rate = trial.suggest_loguniform('learning_rate',0.001,0.1),\n#     num_leaves = trial.suggest_int('num_leaves',2,70),\n#     num_threads = trial.suggest_int('num_threads',1,10),\n#     min_sum_hessian_in_leaf = trial.suggest_int('min_sum_hessian_in_leaf',1,10),\n    \n#     lightgbm_tuna = lgb.LGBMClassifier(\n#         random_state = 0,\n#         verbosity = 1,\n#         bagging_seed = 0,\n#         boost_from_average = 'true',\n#         boost = 'gbdt',\n#         metric = 'auc',\n#         bagging_freq = bagging_freq ,\n#         min_data_in_leaf = min_data_in_leaf,\n#         max_depth = max_depth,\n#         learning_rate = learning_rate,\n#         num_leaves = num_leaves,\n#         num_threads = num_threads,\n#         min_sum_hessian_in_leaf = min_sum_hessian_in_leaf\n#     )\n    \n#     lightgbm_tuna.fit(X_train,y_train)\n#     lb_predict_test = lightgbm_tuna.predict(X_test)\n#     #print('accuracy_score is {} '.format(accuracy_score(y_test,lb_predict_test)))\n    \n#     return (1 - (accuracy_score(y_test,lb_predict_test)) )","ceb2bd8c":"#CV Averaging\/kFold Averaging\uff08\u6388\u696dPDF\u53c2\u7167\uff09\nscores = []\nlgb_y_pred_train = np.zeros(len(X_train))\nlgb_y_pred_test = np.zeros(len(X_test))\nskf = StratifiedKFold(n_splits=10, random_state=81, shuffle=True)\n#for h in range (20): skf = StratifiedKFold(n_splits=10, random_state=h, shuffle=True)\n    \nfor i, (train_ix, test_ix) in tqdm(enumerate(skf.split(X_train, y_train))):\n    X_train_, y_train_ = X_train.values[train_ix], y_train.values[train_ix]\n    X_val, y_val = X_train.values[test_ix], y_train.values[test_ix]\n    \n    clf = LGBMClassifier(\n        max_depth=3,\n        learning_rate = 0.02,\n        colsample_bytree=0.7,\n        subsample=0.7,\n        min_split_gain=0,\n        reg_lambda=1,\n        reg_alpha=1,\n        min_child_weight=2,\n        n_estimators=9999,\n        random_state=71,\n        importance_type='gain'\n                         )\n    clf.fit(X_train_, y_train_,\n             early_stopping_rounds=500,\n             verbose=100,\n             eval_metric='auc',\n             eval_set=[(X_val, y_val)], \n            )\n    y_pred = clf.predict_proba(X_val)[:,1]\n    lgb_y_pred_train[test_ix] = y_pred\n    score = roc_auc_score(y_val, y_pred)\n    scores.append(score)\n    lgb_y_pred_test += clf.predict_proba(X_test)[:,1]\n    \n    print('CV Score of Fold_%d is %f' % (i, score))\n    \nlgb_y_pred_test \/= 5","efac4a59":"# \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u7b97\u51fa\nprint(np.mean(scores))\nprint(scores)","1eec8275":"# \u30e2\u30c7\u30eb\u30ed\u30b0\u5410\u304d\n\n# import logging\n# from lightgbm.callback import _format_eval_result\n\n# def log_evaluation(logger, period=1, show_stdv=True, level=logging.DEBUG):\n#     def _callback(env):\n#         if period > 0 and env.evaluation_result_list and (env.iteration + 1) % period == 0:\n#             result = '\\t'.join([_format_eval_result(x, show_stdv) for x in env.evaluation_result_list])\n#             logger.log(level, '[{}]\\t{}'.format(env.iteration+1, result))\n#     _callback.order = 10\n#     return _callback","a8c76f6b":"# clf = lgb.LGBMClassifier()\n# callbacks = [log_evaluation(logger, period=10)]\n# clf.fit(X_train, y_train, eval_set=[(X_val, y_val)], callbacks=callbacks)","002d6248":"# \u5168\u30c7\u30fc\u30bf\u3067\u518d\u5b66\u7fd2\u3057\u3001test\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u3059\u308b\n#clf.fit(X_train, y_train)\n\n#y_pred = clf.predict_proba(X_test)[:,1]","52de3613":"# sample submission\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e88\u6e2c\u5024\u3092\u4ee3\u5165\u306e\u5f8c\u3001\u4fdd\u5b58\u3059\u308b\n# submission = pd.read_csv('..\/input\/homework-for-students4plus\/sample_submission.csv', index_col=0)\n\n# submission.loan_condition = lgb_y_pred_test\n# submission.to_csv('submission.csv')","8074a1d6":"# submission.head()","a8c99556":"DataFrame(clf.booster_.feature_importance(importance_type='gain'), index = X_train.columns, columns=['importance']).sort_values('importance', ascending=False)","11d0b2be":"\u691c\u5b9a\u306f\u4e71\u6570\u3067\u884c\u3044\u305f\u3044\u304c\u306a\u305c\u304b\u7cbe\u5ea6\u304c\u4e0b\u304c\u308b\u30fb\u30fb  \n\u4e71\u6570\u56fa\u5b9a\u3067\u884c\u304f","9677f2ad":"**\u53c2\u8003**\n**https:\/\/nehori.com\/nikki\/2019\/12\/31\/post-14406\/#i-3**","91dde828":"**\u78ba\u8a8d\u3068\u30a8\u30f3\u30b3\u30fc\u30c9\u691c\u8a0e**","9eb2bfde":"optuna  \nhttps:\/\/github.com\/optuna\/optuna\/pull\/549\/files  \nhttps:\/\/cyberagent.ai\/blog\/research\/12898\/  ","2096b210":"# **Object\u304c\u591a\u3059\u304e\u308b\u306e\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u304b\u3089\u884c\u3046**","e7858367":"**\u524d\u51e6\u7406\u3092\u4e00\u901a\u308a\u7d42\u3048\u3066\u304b\u3089\u30b9\u30bf\u30c3\u30ad\u30f3\u30b0**","a70fc79a":"\u304d\u308c\u3044\u306a\u5206\u5e03","e7545035":"# **RAW\u30c7\u30fc\u30bf\u3092\u3056\u3063\u3068\u30c1\u30a7\u30c3\u30af**","551c1d71":"40000\u3044\u304f\u3064\u306etrain\u30c7\u30fc\u30bf\u304c\u98db\u3073\u51fa\u3057\u3066\u308b\u306e\u304c\u6c17\u306b\u306a\u308b\u304c\u30fb\u30fb","3ac23d96":"**\u6b8b\u308a\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u3092\u9032\u3081\u308b**","f2240f8e":"\u602a\u3057\u3044\u3068\u3053\u308d\u3082\u3042\u308b\u304c\u3001\u3072\u3068\u307e\u305a\u9032\u3081\u3088\u3046\u30fb\u30fb","dc98a0e8":"**\u3081\u307c\u3057\u3044\u3082\u306e\u304b\u3089\u30a8\u30f3\u30b3\u30fc\u30c9\u8a66\u3057\u3066\u3044\u304f**","7339706b":"LightGBM\u6982\u8981  \nhttps:\/\/www.codexa.net\/lightgbm-beginner\/  \nhttps:\/\/qiita.com\/cryptrader\/items\/de15e69d8435ea1684ac  \nhttps:\/\/nykergoto.hatenablog.jp\/entry\/2019\/03\/29\/%E5%8B%BE%E9%85%8D%E3%83%96%E3%83%BC%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A7%E5%A4%A7%E4%BA%8B%E3%81%AA%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%AE%E6%B0%97%E6%8C%81%E3%81%A1","f0efbe8b":"grade\u306e\u5206\u5e03\u50be\u5411\u306b\u5dee\u7570\u306f\u898b\u3089\u308c\u306a\u3044  \n\u30bf\u30fc\u30b2\u30c3\u30c8\u306f\u3053\u306e\u4e2d\u304b\u3089\u9078\u3076"}}