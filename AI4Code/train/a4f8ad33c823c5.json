{"cell_type":{"8adee152":"code","4de58b5b":"code","f5559a43":"code","f57d75f8":"code","5a32686d":"code","acbd10fd":"code","054c27bd":"code","8752f338":"code","51e8db8e":"code","e1e931ab":"code","c6b7826c":"code","910b3cec":"code","3288b11e":"code","1e520c32":"code","07ef45f0":"code","136123d2":"code","f32a0925":"code","367cc9b1":"code","4aa9bcfe":"code","6ef02370":"code","e7d21c80":"code","54366c77":"code","08c0a68a":"code","3bc81ed7":"code","ce9078f5":"code","a9e383b8":"code","365e1cf8":"code","f6c85e5d":"code","f690b2bf":"code","73393145":"code","1b277978":"code","31112a42":"code","3ac53002":"code","496845e7":"code","603460fb":"code","5c15a85f":"code","5da0541d":"code","3e087f98":"code","86d827de":"code","8ec3b866":"code","f740004f":"code","0f30d5f6":"code","bfb61791":"code","20ccff34":"code","b161e471":"code","c1153477":"code","10d64a84":"code","60fa7dcf":"code","740621f8":"code","c0b98725":"code","3f0ef5e9":"code","0137470d":"code","27d68ea8":"code","24cc915a":"code","9d69d5d1":"code","bf9daaef":"code","cb687b89":"code","e999dd6a":"code","da0397d5":"code","8858fa68":"code","8d14fa59":"code","0a318470":"code","d221af69":"code","53b5fca4":"code","3120b199":"code","2069dd06":"code","077fed6a":"code","2deb665e":"code","26ebd308":"code","2cac839e":"code","34d56d9b":"code","509785b4":"code","a3c7a02e":"code","0dc4996b":"code","e31fa331":"code","476bb056":"code","9803910a":"code","85275951":"code","389ce813":"code","615be765":"code","d6911023":"code","6ee9cadc":"code","01a454ca":"code","32305716":"code","049969e5":"code","5351ea1d":"code","e61348eb":"code","2e21d2fb":"code","e2c50367":"code","6e4f5569":"code","5bccb7cc":"code","644a7c0b":"markdown","db3a98e5":"markdown","66bbaab5":"markdown","41611fe1":"markdown","421a72ea":"markdown","fc58884e":"markdown","eb128014":"markdown","63b685b2":"markdown","c1d0931b":"markdown","5f3b981c":"markdown","19489844":"markdown","d3c1a35e":"markdown","1bc9e700":"markdown","a6060a0c":"markdown","663a1737":"markdown","90a95bed":"markdown","f509249f":"markdown","e318b949":"markdown","17b70651":"markdown","4e03d912":"markdown","f4959485":"markdown","04f1635e":"markdown","17b0596a":"markdown","75e009a4":"markdown","7db1a734":"markdown","0b63e0ae":"markdown","ed8433d4":"markdown","b9902215":"markdown","0b2ba257":"markdown","443a7033":"markdown","f58df96b":"markdown","59adc1e3":"markdown","776a238b":"markdown","d6ceb904":"markdown","dec086b5":"markdown","b221fb8b":"markdown","2bf9fd35":"markdown","4acb5b0b":"markdown","4af734c2":"markdown"},"source":{"8adee152":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","4de58b5b":"import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","f5559a43":"train_df = pd.read_csv(\"..\/input\/widsdatathon2021\/TrainingWiDS2021.csv\")\ntest_df = pd.read_csv(\"..\/input\/widsdatathon2021\/UnlabeledWiDS2021.csv\")\ndata_dictionary_df = pd.read_csv(\"..\/input\/widsdatathon2021\/DataDictionaryWiDS2021.csv\")","f57d75f8":"#drop the unnamed:0 column\n\ntrain_df.drop(\"Unnamed: 0\",axis=1,inplace=True)\ntest_df.drop(\"Unnamed: 0\", axis = 1, inplace = True)\ntrain_df.head().style.set_caption('Sample of training data')\n","5a32686d":"Features = len(train_df.columns)\nRecords_train = len(train_df)\nRecords_test = len(test_df)\nprint(f\"Number of features : {Features}\")\nprint(f\"Number of Records in training dataset : {Records_train}\")\nprint(f\"Number of Records in test dataset : {Records_test}\")","acbd10fd":"train_df.describe()","054c27bd":"train_df.info(verbose=True,null_counts=True)","8752f338":"#Number of columns under each category\npd.DataFrame(data_dictionary_df['Category'].value_counts())","51e8db8e":"#With normalize set to True, returns the relative frequency by dividing all values by the sum of values\ntrain_df.diabetes_mellitus.value_counts(normalize=True)*100","e1e931ab":"#check whether diabetic\n\n#create plot\n\nfig, ax = plt.subplots(nrows=1,ncols=1, figsize=(12,8))\n(train_df.diabetes_mellitus.value_counts(normalize=True)*100).plot(kind='bar', color=['mediumseagreen', 'lightcoral'])\nax.set_ylim([0,100])\nax.set_ylabel('% of diabetic patients',fontsize=14)\nax.set_xticklabels(['No Diabetes','Diabetes'],fontsize=14,rotation=0)\n\n#shows class imbalance\n#In the provided training data, about 22% of the patients have diabetes. This shows that class imbalance is present.","c6b7826c":"#Total number of rows\nprint('Total number of records : ', len(train_df))","910b3cec":"#Identifier columns\nid_cols = ['encounter_id','hospital_id','icu_id']\n#drop the identifier columns\ntrain_df.drop(id_cols,axis=1,inplace=True)\ntest_df.drop(id_cols,axis=1,inplace=True)\n#ids not related whether the patients have diabetes or not","3288b11e":"train_df.isna().sum().sort_values(ascending=False)","1e520c32":"vitals = [((v.split(\"d1_\")[1]).split(\"_min\")[0]) for v in train_df.columns[train_df.columns.str.startswith('d1') & train_df.columns.str.endswith('min')]]\nvitals_cols = []\nvitals_cols_h1_min = []\nvitals_cols_h1_max = []\nvitals_cols_d1_min = []\nvitals_cols_d1_max = []\n\nfor v in vitals:\n    vitals_cols.append(v)\n    vitals_cols_h1_min.append(f\"h1_{v}_min\")\n    vitals_cols_h1_max.append(f\"h1_{v}_max\")\n    vitals_cols_d1_min.append(f\"d1_{v}_min\")\n    vitals_cols_d1_max.append(f\"d1_{v}_max\")\n\ntemp=pd.DataFrame({'vitals': vitals_cols,\n             'h1_min':train_df[vitals_cols_h1_min].isna().sum(axis=0).values,\n             'h1_max': train_df[vitals_cols_h1_max].isna().sum(axis=0).values,\n             'd1_min':train_df[vitals_cols_d1_min].isna().sum(axis=0).values,\n             'd1_max':train_df[vitals_cols_d1_max].isna().sum(axis=0).values,\n\n             }).set_index('vitals')\n\ntemp","07ef45f0":"len(vitals)","136123d2":"def percent_missing(df):\n    percent_nan = 100* df.isnull().sum() \/ len(df)\n    percent_nan = percent_nan[percent_nan > 0].sort_values(ascending=False)\n    \n    return percent_nan","f32a0925":"percent_missing(train_df)","367cc9b1":"import numpy as np\nx= np.arange(len(temp.h1_min))\nwidth=0.35\nfig, ax = plt.subplots(nrows=1,ncols=1,figsize=(12,8))\nax.bar(x - width\/2, temp.h1_min\/len(train_df), width,label='h1')\nax.bar(x + width\/2, temp.d1_min\/len(train_df), width,label='d1')\n\/\nax.set_ylabel('Missing values',fontsize=12)\nax.set_xticks(x)\nax.set_xticklabels(temp.index,rotation=90,fontsize=12)\nax.legend(loc=(0.05,0.9))\n\nplt.tight_layout()","4aa9bcfe":"drop_columns = train_df.columns[train_df.columns.str.startswith('h1') | \n                                train_df.columns.str.contains('invasive')]\n\ndrop_columns\n\ntrain_df.drop(drop_columns,axis=1,inplace=True)\ntest_df.drop(drop_columns,axis=1,inplace=True)","6ef02370":"drop_columns","e7d21c80":"percent_nan = percent_missing(train_df)\npercent_nan = percent_nan[percent_nan>20]\nsns.barplot(x=percent_nan.index, y=percent_nan)\nplt.xticks(rotation=90)\n#plt.ylim(0,1) #artificislly choosing a limit","54366c77":"percent_nan.index","08c0a68a":"drop_col2 = percent_nan.index\ntrain_df.drop(drop_col2,axis=1,inplace=True)\ntest_df.drop(drop_col2,axis=1,inplace=True)\n","3bc81ed7":"apache_cols = train_df.columns[train_df.columns.str.contains('apache')]\napache_cols = [c.split('_apache')[0] for c in apache_cols] \n\nvital_cols = train_df.columns[train_df.columns.str.startswith('d1') & train_df.columns.str.contains('_max')]\nvital_cols = [(c.split('d1_')[1]).split('_max')[0] for c in vital_cols]\n\ncommon_cols = [c for c in apache_cols if c in vital_cols]\n\nfor c in common_cols:\n    var1 = f\"d1_{c}_max\"\n    var2 = f\"{c}_apache\"\n    notna_condition = train_df[var1].notna() & train_df[var2].notna()\n    notna_condition_test = test_df[var1].notna() & test_df[var2].notna()\n\n    print(f\"{c} has {np.round((train_df[notna_condition][var2]==(train_df[notna_condition][var1])).sum()\/len(train_df[notna_condition])*100,2)}% duplicates in the training data\")\n    print(f\"{c} has {np.round((test_df[notna_condition_test][var2]==(test_df[notna_condition_test][var1])).sum()\/len(test_df[notna_condition_test])*100,2)}% duplicates in the testing data\")","ce9078f5":"for c in common_cols:\n    \n    print(f\"{c} : {sum(train_df[f'd1_{c}_max'].isna() & train_df[f'{c}_apache'].notna())}\")\n#max has lesser missing values and values can be picked from the apache variables","a9e383b8":"for c in common_cols:\n    \n    print(f\"{c} : {sum(train_df[f'd1_{c}_max'].notna() & train_df[f'{c}_apache'].isna())}\")\n    #apache has more missing values ","365e1cf8":"for c in common_cols:\n    if c not in ['resprate', 'temp']:\n        # Fill empty d1_..._max column from available ..._apache column\n        train_df[f\"d1_{c}_max\"] = np.where((train_df[f\"d1_{c}_max\"].isna() \n                                            & train_df[f\"{c}_apache\"].notna()), \n                                           train_df[f\"{c}_apache\"], \n                                           train_df[f\"d1_{c}_max\"])\n\n        test_df[f\"d1_{c}_max\"] = np.where((test_df[f\"d1_{c}_max\"].isna() \n                                           & test_df[f\"{c}_apache\"].notna()), \n                                           test_df[f\"{c}_apache\"], \n                                           test_df[f\"d1_{c}_max\"])\n","f6c85e5d":"for c in common_cols:\n    \n    print(f\"{c} : {sum(train_df[f'd1_{c}_max'].notna() & train_df[f'{c}_apache'].isna())}\")\n    #apache has more missing values ","f690b2bf":"#Keep Apache columns to calcualte the scores\nfor c in common_cols:\n    if c not in ['resprate', 'temp']:\n        # Fill empty d1_..._max column from available ..._apache column\n        train_df[f\"{c}_apache\"] = np.where((train_df[f\"d1_{c}_max\"].notna() \n                                            & train_df[f\"{c}_apache\"].isna()), \n                                           train_df[f\"d1_{c}_max\"], \n                                           train_df[f\"{c}_apache\"])\n        test_df[f\"{c}_apache\"] = np.where((test_df[f\"d1_{c}_max\"].notna() \n                                            & test_df[f\"{c}_apache\"].isna()), \n                                           test_df[f\"d1_{c}_max\"], \n                                           test_df[f\"{c}_apache\"])\n        # Fill empty d1_heartrate_max column from available heart_rate_apache column\n        train_df[\"d1_heartrate_max\"] = np.where((train_df[\"d1_heartrate_max\"].isna() \n                                            & train_df[\"heart_rate_apache\"].notna()), \n                                           train_df[\"heart_rate_apache\"], \n                                           train_df[\"d1_heartrate_max\"])\n\n        test_df[\"d1_heartrate_max\"] = np.where((test_df[\"d1_heartrate_max\"].isna() \n                                            & test_df[\"heart_rate_apache\"].notna()), \n                                           test_df[\"heart_rate_apache\"], \n                                           test_df[\"d1_heartrate_max\"])","73393145":"desc_cols = data_dictionary_df[data_dictionary_df['Category'] == 'demographic']['Variable Name'].to_list()\ndesc_cols","1b277978":"plt.figure(figsize=(12,6))\nsns.heatmap(train_df[['age',\n 'bmi',\n 'elective_surgery',\n 'ethnicity',\n 'gender',\n 'height',\n 'icu_admit_source',\n 'icu_stay_type',\n 'icu_type',\n 'pre_icu_los_days',\n 'weight','diabetes_mellitus']].corr(),annot=True,cmap=\"viridis\")","31112a42":"apache_cols = train_df.columns[train_df.columns.str.contains('apache')]\nvital_cols = train_df[train_df.columns[train_df.columns.str.startswith('d1')]].isna().sum().index\n","3ac53002":"train_df['apache_2_diagnosis']=train_df['apache_2_diagnosis'].fillna('Others')\ntrain_df['apache_3j_diagnosis']=train_df['apache_3j_diagnosis'].fillna('Others')\n\ntest_df['apache_2_diagnosis']=test_df['apache_2_diagnosis'].fillna('Others')\ntest_df['apache_3j_diagnosis']=test_df['apache_3j_diagnosis'].fillna('Others')","496845e7":"for a in vital_cols:\n    train_df[a]=train_df[a].fillna(0)\n    test_df[a]=test_df[a].fillna(0)","603460fb":"train_df['bun_apache']=train_df['bun_apache'].fillna(0)\ntest_df['bun_apache']=test_df['bun_apache'].fillna(0)\n\ntrain_df['creatinine_apache']=train_df['creatinine_apache'].fillna(0)\ntest_df['creatinine_apache']=test_df['creatinine_apache'].fillna(0)\n\ntrain_df['gcs_eyes_apache']=train_df['gcs_eyes_apache'].fillna(0)\ntest_df['gcs_eyes_apache']=test_df['gcs_eyes_apache'].fillna(0)\n\ntrain_df['gcs_motor_apache']=train_df['gcs_motor_apache'].fillna(0)\ntest_df['gcs_motor_apache']=test_df['gcs_motor_apache'].fillna(0)\n\ntrain_df['gcs_unable_apache']=train_df['gcs_unable_apache'].fillna(0)\ntest_df['gcs_unable_apache']=test_df['gcs_unable_apache'].fillna(0)\n\ntrain_df['gcs_verbal_apache']=train_df['gcs_verbal_apache'].fillna(0)\ntest_df['gcs_verbal_apache']=test_df['gcs_verbal_apache'].fillna(0)\n\ntrain_df['glucose_apache']=train_df['glucose_apache'].fillna(0)\ntest_df['glucose_apache']=test_df['glucose_apache'].fillna(0)\n\ntrain_df['heart_rate_apache']=train_df['heart_rate_apache'].fillna(0)\ntest_df['heart_rate_apache']=test_df['heart_rate_apache'].fillna(0)\n\ntrain_df['intubated_apache']=train_df['intubated_apache'].fillna(0)\ntest_df['intubated_apache']=test_df['intubated_apache'].fillna(0)\n\ntrain_df['map_apache']=train_df['map_apache'].fillna(0)\ntest_df['map_apache']=test_df['map_apache'].fillna(0)\n\ntrain_df['resprate_apache']=train_df['resprate_apache'].fillna(0)\ntest_df['resprate_apache']=test_df['resprate_apache'].fillna(0)\n\ntrain_df['sodium_apache']=train_df['sodium_apache'].fillna(0)\ntest_df['sodium_apache']=test_df['sodium_apache'].fillna(0)\n\ntrain_df['temp_apache']=train_df['temp_apache'].fillna(0)\ntest_df['temp_apache']=test_df['temp_apache'].fillna(0)\n\ntrain_df['ventilated_apache']=train_df['ventilated_apache'].fillna(0)\ntest_df['ventilated_apache']=test_df['ventilated_apache'].fillna(0)","5c15a85f":"drop_cols3 = ['apache_post_operative']","5da0541d":"plt.figure(figsize=(20,10))\nsns.heatmap(train_df[['apache_2_diagnosis', 'apache_3j_diagnosis', 'apache_post_operative',\n       'arf_apache', 'bun_apache', 'creatinine_apache', 'gcs_eyes_apache',\n       'gcs_motor_apache', 'gcs_unable_apache', 'gcs_verbal_apache',\n       'glucose_apache', 'heart_rate_apache', 'intubated_apache', 'map_apache',\n       'resprate_apache', 'sodium_apache', 'temp_apache', 'ventilated_apache']].corr(),annot=True,cmap=\"viridis\")","3e087f98":"print(train_df['weight'].isna().sum())\nprint(train_df['height'].isna().sum())\nprint('height range',train_df['height'].max(), train_df['height'].min())\nprint('weight range',train_df['weight'].max(), train_df['weight'].min())\n\n#Missing Values in training and test dataset \nprint('missing height data in training dataset',train_df['height'].isna().sum()\/len(train_df)*100)\nprint('missing height data in test dataset',test_df['height'].isna().sum()\/len(test_df)*100)\n\nprint('missing weight data in training dataset',train_df['weight'].isna().sum()\/len(train_df)*100)\nprint('missing weight data in test dataset',test_df['weight'].isna().sum()\/len(test_df)*100)\n\n#How to treat missing data for weight and height - replace them with the mean value\n\nmean_height_females = train_df[train_df['gender']=='F']['height'].mean()\nmean_height_males = train_df[train_df['gender']=='M']['height'].mean()\nmean_weight_males = train_df[train_df['gender']=='M']['weight'].mean()\nmean_weight_females = train_df[train_df['gender']=='F']['weight'].mean()\nmean_weight = train_df['weight'].mean()\nmean_height = train_df['height'].mean()\n\n\ntrain_df['height']=np.where((train_df['gender']=='F')& (train_df['height'].isna()),mean_height_females,train_df['height'])\ntrain_df['height']=np.where((train_df['gender']=='M')& (train_df['height'].isna()),mean_height_males,train_df['height'])\n\ntrain_df['weight']=np.where((train_df['gender']=='F')& (train_df['weight'].isna()),mean_weight_females,train_df['weight'])\ntrain_df['weight']=np.where((train_df['gender']=='M')& (train_df['weight'].isna()),mean_weight_males,train_df['weight'])\n\ntrain_df['height']=np.where((train_df['gender'].isna())& (train_df['height'].isna()),mean_height,train_df['height'])\ntrain_df['weight']=np.where((train_df['gender'].isna())& (train_df['weight'].isna()),mean_weight,train_df['weight'])\n\nmean_height_femalest = test_df[test_df['gender']=='F']['height'].mean()\nmean_height_malest = test_df[test_df['gender']=='M']['height'].mean()\nmean_weight_malest = test_df[test_df['gender']=='M']['weight'].mean()\nmean_weight_femalest = test_df[test_df['gender']=='F']['weight'].mean()\nmean_weightt = test_df['weight'].mean()\nmean_heightt = test_df['height'].mean()\n\n\ntest_df['height']=np.where((test_df['gender']=='F')& (test_df['height'].isna()),mean_height_femalest,test_df['height'])\ntest_df['height']=np.where((test_df['gender']=='M')& (test_df['height'].isna()),mean_height_malest,test_df['height'])\n\ntest_df['weight']=np.where((test_df['gender']=='F')& (test_df['weight'].isna()),mean_weight_femalest,test_df['weight'])\ntest_df['weight']=np.where((test_df['gender']=='M')& (test_df['weight'].isna()),mean_weight_malest,test_df['weight'])\n\ntest_df['height']=np.where((test_df['gender'].isna())& (test_df['height'].isna()),mean_heightt,test_df['height'])\ntest_df['weight']=np.where((test_df['gender'].isna())& (test_df['weight'].isna()),mean_weightt,test_df['weight'])\n","86d827de":"train_df[['height','weight','bmi']]\nimport numpy as np\ntrain_df['bmi_cal'] = np.round(train_df['weight'] \/ ((train_df['height']\/100) ** 2),8)\ntest_df['bmi_cal'] = np.round(test_df['weight'] \/ ((test_df['height']\/100) ** 2),8)\ntrain_df[['height','weight','bmi','bmi_cal']]","8ec3b866":"train_df['bmi']=np.where(train_df['bmi'].isna(),train_df['bmi_cal'],train_df['bmi'])\ntest_df['bmi']=np.where(test_df['bmi'].isna(),test_df['bmi_cal'],test_df['bmi'])","f740004f":"train_df[\"gcs_sum_apache\"] = train_df[['gcs_eyes_apache', 'gcs_motor_apache', 'gcs_verbal_apache']].sum(axis=1)\ntest_df[\"gcs_sum_apache\"] = test_df[['gcs_eyes_apache', 'gcs_motor_apache', 'gcs_verbal_apache']].sum(axis=1)","0f30d5f6":"train_df['gender']=train_df['gender'].dropna()\ntest_df['gender']=test_df['gender'].dropna()","bfb61791":"train_df[train_df['gender'] == 'Unknown']['diabetes_mellitus'].value_counts()","20ccff34":"sns.countplot(x='gender',data=train_df,hue='diabetes_mellitus')","b161e471":"train_df[['diabetes_mellitus','gender']].value_counts(normalize=True).plot(kind=\"bar\")","c1153477":"sns.distplot(train_df[(train_df['gender']=='F')&(train_df['diabetes_mellitus']==1)]['bmi'],  kde=False, label='Female BMI')\nsns.distplot(train_df[(train_df['gender']=='M')&(train_df['diabetes_mellitus']==1)]['bmi'],  kde=False, label='Male BMI')\n\nplt.title('Comparing the bmi distribution between the males and gemales')\nplt.xlabel('BMI')\nplt.ylabel('Density')\nplt.legend()","10d64a84":"train_df[['ethnicity','diabetes_mellitus']].value_counts()","60fa7dcf":"train_df['ethnicity']=train_df['ethnicity'].fillna('Other\/Unknown')\ntest_df['ethnicity']=test_df['ethnicity'].fillna('Other\/Unknown')","740621f8":"plt.figure(figsize=(12,8))\nsns.countplot(x='ethnicity',data=train_df,hue='diabetes_mellitus')","c0b98725":"sns.distplot(train_df['age'])","3f0ef5e9":"print(f\"There are {len(train_df[train_df.age<16])} data points in the training data set whose age is less than 16\")\nprint(f\"There are {len(test_df[test_df.age<16])} data points in the test data set whose age is less than 16\")\n\nprint(f\"The data point to be dropped have a NaN rate of {np.round(((train_df[train_df.age<16].isna().sum(axis=1)\/180).mean()*100), 2)}%.\")\n\nprint(f\"Dropping {len(train_df[train_df.age<16])} data points from  a total of {len(train_df)} data points equals a loss of {np.round((len(train_df[train_df.age<16])\/len(train_df)*100), 2)}% of the training data.\")","0137470d":"train_df = train_df[train_df.age >= 16].reset_index(drop=True)\ntrain_df.isna().sum().sort_values(ascending=False)","27d68ea8":"train_df['icu_admit_source'] = train_df['icu_admit_source'].fillna('Others')\ntest_df['icu_admit_source'] = test_df['icu_admit_source'].fillna('Others')","24cc915a":"len(train_df.isna().sum())","9d69d5d1":"drop_cols = ['weight','height']\ntrain_df = train_df.drop(drop_cols,axis=1)\ntest_df = test_df.drop(drop_cols,axis=1)","bf9daaef":"numeric_clmns = train_df.dtypes[train_df.dtypes != \"object\"].index \ntrain_df[numeric_clmns]","cb687b89":"count_values = train_df.dropna().nunique().reset_index()\ncount_values[count_values[0]<2][\"index\"].to_list()","e999dd6a":"sns.scatterplot(data=train_df,x='age', y='pre_icu_los_days')","da0397d5":"train_df=train_df.drop(['readmission_status','bmi_cal'],axis=1)\ntest_df=test_df.drop(['readmission_status','bmi_cal'],axis=1)","8858fa68":"Features = len(train_df.isna().sum())\nCols = len(train_df.columns)\nrecs_train = len(train_df)\nrecs_test= len(test_df)\n\nprint(f\"There are {Features} features in total\")\nprint(f\"There are {Cols} columns in total\")\nprint(f\"There are {recs_train} records in total\")\nprint(f\"There are {recs_test} records in total\")","8d14fa59":"sns.boxplot(x='age',y='gender',data=train_df)","0a318470":"count_class_0, count_class_1 = train_df[\"diabetes_mellitus\"].value_counts()\n\n# Divide by class\ndf_class_0 = train_df[train_df['diabetes_mellitus'] == 0]\ndf_class_1 = train_df[train_df['diabetes_mellitus'] == 1]\n\ntrain_df[\"diabetes_mellitus\"].value_counts().plot(kind=\"bar\")\ntrain_df[\"diabetes_mellitus\"].value_counts()","d221af69":"df_class_0_under = df_class_0.sample(count_class_1)\n\ndf_test_under = pd.concat([df_class_0_under, df_class_1], axis=0)\n\nprint('Random under-sampling:')\nprint(df_test_under['diabetes_mellitus'].value_counts())\n\ndf_test_under[\"diabetes_mellitus\"].value_counts().plot(kind='bar', title='Count (target)',\n                                                      color=['mediumseagreen', 'lightcoral']);","53b5fca4":"df_class_1_over = df_class_1.sample(count_class_0, replace=True)\ndf_test_over = pd.concat([df_class_0, df_class_1_over], axis=0)\n\nprint('Random over-sampling:')\nprint(df_test_over['diabetes_mellitus'].value_counts())\n\ndf_test_over['diabetes_mellitus'].value_counts().plot(kind='bar', title='Count (target)');","3120b199":"train_df.columns","2069dd06":"vitals = [((v.split(\"d1_\")[1]).split(\"_min\")[0]) for v in train_df.columns[train_df.columns.str.startswith('d1') & train_df.columns.str.endswith('min')]]","077fed6a":"for v in vitals:\n    train_df[f'd1_{v}_range'] = train_df[f'd1_{v}_max'] - train_df[f'd1_{v}_min']\n    train_df[f'd1_{v}_mean'] = (train_df[f'd1_{v}_max'] + train_df[f'd1_{v}_min']) \/ 2\n\n    test_df[f'd1_{v}_range'] = test_df[f'd1_{v}_max'] - test_df[f'd1_{v}_min']\n    test_df[f'd1_{v}_mean'] = (test_df[f'd1_{v}_max'] + test_df[f'd1_{v}_min']) \/ 2\n","2deb665e":"train_df[train_df['gender'].isna() ==1]['diabetes_mellitus'].sum()","26ebd308":" train_df[\"gender\"]= np.where(train_df['gender'].isna(), 'Unknown\/Others', train_df[\"gender\"])\n","2cac839e":"test_df[\"gender\"]= np.where(test_df['gender'].isna(), 'Unknown\/Others', test_df[\"gender\"])\n","34d56d9b":"train_df['gender'].value_counts()","509785b4":"no_diabetes = train_df[(train_df.d1_glucose_range.notna())&(train_df.d1_glucose_mean.notna())&(train_df.diabetes_mellitus == 0)].head(1000)\ndiabetes = train_df[(train_df.d1_glucose_range.notna())&(train_df.d1_glucose_mean.notna())&(train_df.diabetes_mellitus == 1)].head(1000)","a3c7a02e":"\n# Set up the figure\nfig, ax = plt.subplots(1, 2, figsize=(16, 6))\n\n# Draw the two density plots\nsns.kdeplot(no_diabetes.d1_glucose_range, no_diabetes.d1_glucose_mean, cmap=\"Greens\", label='No diabetes', ax=ax[0])\nsns.kdeplot(diabetes.d1_glucose_range, diabetes.d1_glucose_mean, cmap=\"Reds\", label='Diabetes', ax=ax[0])\nax[0].set_xlim([-20, 250])\nax[0].set_ylim([-20, 250])\n\nax[0].set_title('Glucose Concentration\\n in the first 24h', fontsize=16)\nax[0].set_xlabel('Range', fontsize=14)\nax[0].set_ylabel('Mean', fontsize=14)\n\n# Draw the two density plots\nsns.kdeplot(no_diabetes.d1_glucose_min, no_diabetes.d1_glucose_max, cmap=\"Greens\", label='No diabetes', ax=ax[1])\nsns.kdeplot(diabetes.d1_glucose_min, diabetes.d1_glucose_max, cmap=\"Reds\", label='Diabetes', ax=ax[1])\nax[1].set_xlim([0, 300])\nax[1].set_ylim([0, 300])\nax[1].set_title('Glucose Concentration\\n in the first 24h', fontsize=16)\nax[1].set_xlabel('Minimum', fontsize=14)\nax[1].set_ylabel('Maximum', fontsize=14)\n\n\nplt.legend()\nplt.tight_layout()\nplt.show()\n","0dc4996b":"train_df.info(verbose=True)","e31fa331":"cat_list = train_df.select_dtypes('object').columns\ndisplay(cat_list)","476bb056":"#Descriptive Columns\n#Vital sign columns\n#Comorbidity columns","9803910a":"exclude_cols = ['apache_2_diagnosis', 'apache_3j_diagnosis', 'bmi_cat', 'bmi', 'weight_rec', 'height_rec']\nfeatures = [c for c in train_df.columns if ((c not in  ['diabetes_mellitus', 'encounter_id']) & (c not in cat_list)) ]\ntarget = ['diabetes_mellitus']\n\n# Prepare training and test data\nX, y = pd.get_dummies(train_df[features],drop_first=True), train_df[target]\nX_test = test_df[features]\n\ndisplay(X.head().style.set_caption(\"X\"))\ndisplay(y.head().style.set_caption(\"y\"))","85275951":"from sklearn.model_selection import train_test_split","389ce813":"X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=101)\n","615be765":"X.shape","d6911023":"X_train.shape","6ee9cadc":"from sklearn.ensemble import RandomForestClassifier","01a454ca":"#set parameters on a decision tree level\n#hyperparameters specific to random forest\n#sqrtn\nrfc = RandomForestClassifier(n_estimators=10,\n                            max_features='auto',\n                            random_state=101)","32305716":"rfc.fit(X_train,y_train)","049969e5":"preds = rfc.predict(X_val)","5351ea1d":"rfc.predict_proba(X_val)","e61348eb":"from sklearn.metrics import confusion_matrix, classification_report, plot_confusion_matrix","2e21d2fb":"plot_confusion_matrix(rfc,X_val,y_val)","e2c50367":"print(classification_report(y_val,preds))","6e4f5569":"rfc.feature_importances_","5bccb7cc":"X.columns","644a7c0b":"### APACHE SCORES\nAPACHE scores help to measure during the first 24 hours which results in the highest APACHE III score. Apache scores are also known as Acute Physiology and Chronic Health Evaluation Score (APACHE) and it is used in critical care medicine to predict the mortality upon admission to an intensive care unit.\n\nAPACHE measures two things\n- Assesses the severity of the acute illness\n- assess the pre-illness chronic medical status of the patient\n\nThe worst values achieved by the patient in the first 24 hours of admission to the intensive care unit should be used\n\nhttps:\/\/radiopaedia.org\/articles\/apache-score-2 \n\nThe d1_glucose_max value is the highest value during the first 24 scores. \n\nHence, the apache scores and d1_glucose_max values can be comparable. So, we can take just take one of the variables for analysis.\n","db3a98e5":"## Missing Values\n\nUsed the isna() function to determine the number of missing values.","66bbaab5":"# Load Data","41611fe1":"Heartrate and glucose\nhttps:\/\/www.health.harvard.edu\/heart-health\/hows-your-heart-rate-and-why-it-matters ","421a72ea":"# Data pre-processing and Data cleaning","fc58884e":"# References\n\nThis is my first time participating in a kaggle competition. There were some good resources I referenced to and have provided the link to them below. \n\n* https:\/\/www.kaggle.com\/scarecrow2020\/wids-whole-pipeline-eda-clean-fe-grids-xgboost \n* https:\/\/www.kaggle.com\/iamleonie\/wids-datathon-2021-diabetes-detection\n\n# Future work \n\nI hope to explore the below questions in detail further as I continue to work on this dataset.\n* Are there certain age groups more vulnerable to diabetics?\n* People with certain bmi vulnerable to diabetics? categorise them\n* Intepret blood pressure results categorise them ","eb128014":"A minimum threshold of 20% missing values was set to filter the columns.","63b685b2":"### Glasgow Coma Scale\nhttps:\/\/www.glasgowcomascale.org\/\n\nThe Glasgow Coma Scale provides a practical method for assessment of impairment of conscious level in response to defined stimuli.\n\nhttps:\/\/www.mdcalc.com\/glasgow-coma-scale-score-gcs\n\nThe coma severity scoring is based on eye(4), verbal(5) and motor(6) criteria.\n\nI created a total gcs score to be used as an additional feature.","c1d0931b":"## Remove the ID columns\n\nIdentifier columns do not explain much about the target variables. Hence, these identifier variables were dropped from the dataset.****","5f3b981c":"# EDA\n\nStudying Gender Distribution and its relationship with the diabetics factor","19489844":"## Handling the missing weight, height values\n\nThe mean height of the females and males was calculated respectively. Whereever the height of the females was missing, its value was replaced with the mean height of the females. The same logic applied to the height and weight of the males and females. In cases in which gender details were not available, the values were replaced with the mean height and weight of all the patients.","d3c1a35e":"# Dealing with Class Imbalance Issue\n\nResampling is one of the methods to deal with highly unbalanced datasets. Upon further research, \nresampling would involve removing samples from the majority class (under-sampling) and adding more examples from the minority class. \n\nOversampling would duplicate random records from the minority class and that might cause overfitting.\n\nIn undersampling, the simplest technique involves removing random records from the majority class, which can loss of information.\n\nResource : https:\/\/www.kaggle.com\/rafjaa\/resampling-strategies-for-imbalanced-datasets","1bc9e700":"From the above check, it is observed that over 50% of the non NaN values of the '_max', and '_apache' variables are the same except for temp and resprate.\n","a6060a0c":"### Gender Variable","663a1737":"In the above plot on the left, we can observe the relationship between the mean and the range of the glucose concentration measured during the first 24 hours of Diabetes and non-diabetes patients. The range of glucose concentration observed for diabetes patients sees a wider distribution of values and majority of diabetic patients' glucose results sees a fluctuation of 50-80 mmol\/L and a mean of close to 150 mmol\/L is observed among diabetic patients.","90a95bed":"From the above correlation plot, bmi and weight are highly correlated and height and weight are slightly correlated with each other.","f509249f":"Many of the vitals were recorded both during the first 24 hours and in the first hour of hospitalisation. We can observe that there are 32 vital signs with the minimum and maximum readings recording during the first hour(h1_) and first 24 hours(d1_) of the patient's hospitalisation. \n\nThe missing values were then summarised and formatted into a temporary dataframe.","e318b949":"Looking at the range of the vital signs would help to classify the vital signs better.","17b70651":"The below correlation plot was created to identify any multi-collinearity between the apache measures.","4e03d912":"The above plot shows that a higher proportion of males suffer from diabetes compared to females.","f4959485":"# Load Libraries","04f1635e":"### Detecting features with less than 2 unique values\nThe readmission_status can be dropped from the dataset since it is not very intuitive.","17b0596a":"# What is Diabetics?\n\n![img](https:\/\/www.news-medical.net\/image.axd?picture=2019%2F8%2F%40shutterstock_1182539971.jpg)\nhttps:\/\/www.news-medical.net\/image.axd?picture=2019%2F8%2F%40shutterstock_1182539971.jpg\n\nDiabetics is a medical condition in which the blood glucose levels remain persistently higher than normal. \n\nInsulin is a hormone produced by the pancreas that allows your body cells to use blood glucose (sugar) for energy. Carbohydrate is converted into glucose before it is absorbed into the bloodstream. The pancreas then releases insulin to move the glucose from the bloodstream\n\nTypes of diabetics:\n\nType 1 Diabetics:\n* No insulin is produced due to damaged pancreatic cells\n* Usually diagnosed in children or young adults although it can occur at any age\n* Insulin is needed for treatment\n\nType 2 Diabetics:\n* Insulin produced is not enough or not effective (insulin resistance)\n* Occurs more frequently in people over 40 years old (overweight and physically inactive)\n* More younger adults and children are developing Type 2 Diabetics\n* Can be controlled with proper diet and exercise but most diabetics require oral medication\n\nGestational:\n* Occurs in about 2 to 5 percent of all pregnancies. Women who were not diagnosed to have diabetes previously show high blood glucose levels during pregnancy\n* Needs specialised obstetric care to reduce serious complications to the unborn baby.\n\nSigns and Symptoms:\n* Frequent thirst despite drinking lots of water\n* Constant hunger\n* Constant tiredness\n* Itchy skin especially around the genital area\n* Passing excessive urine during day and night\n* Weight loss despite good appetite\n* Poor healing of cuts and wounds\n\nComplications:\nUncontrolled diabetes can cause the blood sugar to fluctuate between very high (hyperglycaemia) and very low (hypoglycaemia). Both situations can cause a diabetic to become very sick very quickly and even go into a coma.\n\nScreening and diagnosis:\nDetected through glucose test\n\n* Random blood glucose is 11.1 mmol\\L or higher\n* Fasting blood glucose is 7.0 mmol\\L or higher\n\nlink: https:\/\/www.healthhub.sg\/a-z\/diseases-and-conditions\/102\/topics_diabetes","75e009a4":"* Descriptive columns ","7db1a734":"#### Ethnicity Description","0b63e0ae":"## Studying the Target Variable - diabetes_mellitus\n\nFrom the below plot, it can be observed that class imbalance is present as there is only about 22% of patients detected with diabetes in the dataset","ed8433d4":"### Final set of variables","b9902215":"Replace all the missing vital measures will 0. This is done with the assumption not all the blood tests may have performed on the patient. Hence, it could be possible for the patient to have nil readings.","0b2ba257":"### Summary of the missing data values\nSelecting cohort patients who age is greater than 16.","443a7033":"From the above plot, it is observed that vital signs recorded hourly generally have more missing values compared to the vital signs recorded over 24 hours.\n\nIt is important for us to ask the question of whether to examine vitals during the first hour or the vitals that had been recorded over 24 hours. \n\nSince, there are more missing values for the vitals recorded during the first hour compared to the vitals recorded during the first 24 hours,we will only take the vitals recorded during the first 24 hours for our analysis. In addition, vitals measured over 24 hours are more reliable to better access the medical condition of the icu patients.\n\nIn addition, high number of missing values is observed for variables such as diasbp_invasive , mbp_invasive and sysbp_invasive. All invasively measured variables (min and max) have a high rate of missing values.Hence,these values will be removed from analysis.\n\nInvasive (intra-arterial) blood pressure (IBP) monitoring is a commonly used technique in the Intensive Care Unit (ICU) and is also often used in the operating theatre.\n\nhttps:\/\/www.webmd.com\/hypertension-high-blood-pressure\/qa\/what-does-the-diastolic-blood-pressure-number-mean \n\n**diasbp**\nThe diastolic reading, or the bottom number, is the pressure in the arteries when the heart rests between beats. This is the time when the heart fills with blood and gets oxygen.\n\nA normal diastolic blood pressure is lower than 80. A reading of 90 or higher means you have high blood pressure.\n\n**map**\n\nMAP, or mean arterial pressure, is defined as the average pressure in a patient\u2019s arteries during one cardiac cycle\n\n**sysbp**\n\nYour systolic blood pressure is the maximum pressure that your heart applies when beating. Your diastolic blood pressure is a measurement of the pressure in your arteries between heartbeats. Pulse pressure is the difference between your systolic blood pressure and diastolic blood pressure.\n\nhttps:\/\/www.nursingcenter.com\/ncblog\/december-2011\/calculating-the-map ","f58df96b":"#### Age Distribution","59adc1e3":"### Detecting outliers\n\n2 points of outliers were observed. There is a data point where the patient's length-of-stay is around 174 and 160 respectively. These points could be further investigated to see if these outliers need to be removed from the dataset.","776a238b":"To bring further value to the vital signs such as the heart rate, we could also calculate the range and mean of these vital measures.","d6ceb904":"### Handling missing BMI values\n\nMissing bmi values were calculated with the filled height and weight values whose missing values were replaced. The Body Mass Index (BMI) is a person's weight in kilograms divided by the square of the height in metres. We will validate the BMI values provided using the height and weight of the patients. \n\nThe height in the data is provided in centimetres. \n\n https:\/\/www.cdc.gov\/obesity\/adult\/defining.html\n\n- Obese is defined as 30 or more.\n\n- Overweight is defined as more than 25\n\n- Normal BMI is defined to 18.5 to <25\n\n- Underweight is defined to be less than 18.5\n\n","dec086b5":"In the section below, I explored ways of dealing with imbalanced datasets.","b221fb8b":"## Explore interesting themes\u00b6\n* Find out whether the patient has been diagnosed with Diabetes Mellitus so that appropriate and timely medication can be provided to the patients admitted into the icu wards when unconscious.\n* Diabetes is a medical condition in which the blood glucose levels remain persistently higher than normal. It is becoming more common in Singapore. \n    As supported by the data provided by the [Singapore healthhub](https:\/\/www.healthhub.sg\/a-z\/diseases-and-conditions\/626\/diabetes), 440,000 Singaporeans was reported to have been diagnosed with diabetes in 2014. This figure is expected to go up to 1 million by 2050. Diabetes is now a concerning cause of disease among Singaporeans and accounts for 10% of disease burden in Singapore.\n* Detect cases of class imbalance (target variable - diabetes Mellitus)\n* Age group\n* Different categories\n* Total number of patients\n* Different type of admissions\n* Capcity of the icu ward\n* Length of stay\n* Readmitted?\n* APACHE scores (how to interpret them)\n* What vital signs to pick up\n* Look at lab results","2bf9fd35":"Missing values for the diagnosis codes were replaced with text values , 'Others'","4acb5b0b":"The above plot shows the distribution of the bmi values between the females and males diagnosed with diabetes.","4af734c2":"From the above heatmap,\n* The variables gcs_eyes_apache,gcs_motor_apache and gcs_verbal_apache are strongly correlated with ventilated_apache.\n* The variable intubated_apache is strongly correlated with the ventilated_apache."}}