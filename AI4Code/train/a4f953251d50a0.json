{"cell_type":{"30c65151":"code","173ad99f":"code","67a6b84b":"code","193d6f9e":"code","179e4750":"code","63da7ea9":"code","7adc6de6":"code","f63a6407":"code","fdcc7c05":"code","3cdfecad":"code","3cce7532":"code","bc86c667":"code","ed0bfef7":"code","e89901c8":"code","8873db17":"markdown","2feb4b6b":"markdown","41592e14":"markdown","3042605d":"markdown","55ae1612":"markdown","d33370c5":"markdown","b8fb20ff":"markdown","5a4d6a5d":"markdown","4367f959":"markdown","f1796f1e":"markdown","28154004":"markdown","d0f028e6":"markdown","a986fd6c":"markdown","3f2e9c24":"markdown","18fbf9e4":"markdown","a1010ab0":"markdown"},"source":{"30c65151":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nbold = \"\\033[1m\"\nend = \"\\033[0m\"\n\npd.options.display.max_rows = 150","173ad99f":"train = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/train.csv\")\ntest = pd.read_csv(\"..\/input\/tabular-playground-series-sep-2021\/test.csv\")\n\nprint(\"Train set: \\n\")\nprint(train.shape)\ndisplay(train.head())\n\nprint(\"\\nTest set: \\n\")\nprint(test.shape)\ndisplay(test.head())","67a6b84b":"train.info()","193d6f9e":"train.describe().round(3).T","179e4750":"target = \"claim\"\npredictors = [x for x in train.columns if x not in [\"id\", target]]","63da7ea9":"fig, ax = plt.subplots(figsize = (6, 6))\n\nlabels = train[target].value_counts().index.tolist()\npalette = [\"#0EB8F1\", \"#F1480F\", \"#971194\", \"#FEE715\", \"#101820\"]\n\nax.pie(train[target].value_counts(), labels = labels, autopct = '%1.2f%%', \n       startangle = 180, colors = palette[: len(labels)])\n\nax.set_title(target)\nplt.show()","7adc6de6":"counts = []\nfor col in predictors:\n    count = train[col].value_counts().size\n    counts.append(count)\n\ncounts_df = pd.DataFrame({\"Feature\": predictors, \"UniqueValues\": counts}).sort_values(\"UniqueValues\", ascending = False)","f63a6407":"fig, axes = plt.subplots(1, 2, figsize = (15, 8), sharex = True, dpi = 300, facecolor = \"#C0C0C0\")\n\nsns.barplot(x = \"UniqueValues\", y = \"Feature\", data = counts_df[:59], \n            ax = axes[0], palette = \"Reds_r\", edgecolor = \"black\", linewidth = 0.5)\nsns.barplot(x = \"UniqueValues\", y = \"Feature\", data = counts_df[-59:].sort_values(\"UniqueValues\", ascending = True), \n            ax = axes[1], palette = \"Blues_r\", edgecolor = \"black\", linewidth = 0.5)\n\nfor p in axes[0].patches[:10]:\n    axes[0].annotate(int(p.get_width()), xy = (p.get_width(), p.get_y() + p.get_height() \/ 2),\n                     xytext = (-30, 0), textcoords = \"offset points\", ha = \"left\", va = \"center\", \n                     fontsize = 5, color = \"#C7D3D4\")\n    \n    \nfor p in axes[1].patches[:10]:\n    axes[1].annotate(int(p.get_width()), xy = (p.get_width(), p.get_y() + p.get_height() \/ 2), \n                     xytext = (3, 0), textcoords = \"offset points\", ha = \"left\", va = \"center\", fontsize = 5)\n\nfor ax in axes:\n    \n    ax.set_facecolor(\"#C0C0C0\")\n    ax.tick_params(axis = \"y\", which = \"major\", labelsize = 6)\n    ax.tick_params(axis = \"x\", which = \"major\", labelsize = 6)\n\naxes[1].set_ylabel(\"\")\n\nsns.despine(top = True, right = True, left = True, bottom = True)\nplt.show()","fdcc7c05":"fig, axes = plt.subplots(1, 2, figsize = (2, 13), sharex = True, dpi = 200, facecolor = \"#C7D3D4\")\n\nsns.barplot(x = train[predictors].isnull().sum().values, \n            y = train[predictors].isnull().sum().index, \n            ax = axes[0], color = \"#101820\")\n\nsns.barplot(x = test[predictors].isnull().sum().values, \n            y = test[predictors].isnull().sum().index, \n            ax = axes[1], color = \"#757575\")\n\nfor p in axes[0].patches:\n    axes[0].annotate(int(p.get_width()), xy = (p.get_width(), p.get_y() + p.get_height() \/ 2),\n                     xytext = (-25, 0), textcoords = \"offset points\", ha = \"left\", va = \"center\", \n                     fontsize = 4, color = \"#757575\")\n\nfor p in axes[1].patches:\n    axes[1].annotate(int(p.get_width()), xy = (p.get_width(), p.get_y() + p.get_height() \/ 2), \n                     xytext = (-14, 0), textcoords = \"offset points\", ha = \"left\", va = \"center\", \n                     fontsize = 4, color = \"#101820\")\n    \nfor ax in axes:\n    \n    ax.set_facecolor(\"#C7D3D4\")\n    ax.tick_params(axis = \"y\", which = \"major\", labelsize = 4.5)\n    ax.tick_params(axis = \"x\", which = \"major\", labelsize = 4.5)\n    ax.set_xticks([])\n\naxes[0].set_title(\"Missing Values for Training Set \\nTotal: \" + str(train[predictors].isnull().sum().sum()), \n                  fontsize = 4, color = \"#101820\")\naxes[1].set_title(\"Missing Values for Test Set \\nTotal: \" + str(test[predictors].isnull().sum().sum()), \n                  fontsize = 4, color = \"#101820\")\n\nsns.despine(top = True, right = True, left = True, bottom = True)\nplt.tight_layout()\nplt.show()","3cdfecad":"position = range(1, len(predictors) + 1)\n\nplt.rcParams[\"font.family\"] = \"Times New Roman\"\nfig = plt.figure(1, figsize=(30, 25), facecolor = \"#C7D3D4\")\n\nfor col, pos in zip(predictors, range(len(predictors))):\n    \n    skewness = np.round(train[col].skew(), 3)\n    kurtosis = np.round(train[col].kurtosis(), 3)\n    \n    ax = fig.add_subplot(12, 10, position[pos])\n    sns.kdeplot(data = train, x = col, ax = ax, color = \"#101820\")\n    \n    ax.set_title(r\"$\\bf{\" + col  + \"}$\" + \"\\nSkewness: \" + str(skewness) + \"\\nKurtosis: \" + str(kurtosis))\n    ax.set_facecolor(\"#C7D3D4\")\n    ax.set_xlabel(\"\")\n\nplt.tight_layout()\nplt.show()","3cce7532":"position = range(1, len(predictors) + 1)\n\nfig = plt.figure(1, figsize=(30, 25), facecolor = \"#C7D3D4\")\n\norder = sorted(train[target].unique())\npalette = [\"#0EB8F1\", \"#F1480F\", \"#971194\", \"#FEE715\", \"#101820\"]\n\nfor col, pos in zip(predictors, range(len(predictors))):\n    \n    ax = fig.add_subplot(12, 10, position[pos])\n    sns.boxplot(data = train, y = col, hue = target, ax = ax, x = [\"\"] * len(train), \n                palette = palette[:len(order)], linewidth = 0.5, \n                flierprops = dict(marker = \"x\", markersize = 3.5))\n    \n    ax.set_title(r\"$\\bf{\" + col  + \"}$\")\n    ax.set_facecolor(\"#C7D3D4\")\n    ax.set_ylabel(\"\")\n    \n    ax.get_legend().remove()\n    handles, labels = ax.get_legend_handles_labels()\n    fig.legend(handles, labels, loc = 'upper center')\n\nplt.tight_layout()\nplt.show()","bc86c667":"train[\"Missing\"] = train.isnull().sum(axis = 1)","ed0bfef7":"fig, ax = plt.subplots(figsize = (12, 8))\nax.set_facecolor(\"#C7D3D4\")\nsns.boxplot(data = train, y = \"Missing\", hue = target, ax = ax, x = [\"\"] * len(train), palette = palette[:len(order)], \n                linewidth = 0.5, flierprops = dict(marker = \"x\", markersize = 3.5))","e89901c8":"missing = train.groupby(\"Missing\")[target].mean().round(3)\n\nfig, ax = plt.subplots(figsize = (12, 8), facecolor = \"#C7D3D4\")\nax.set_facecolor(\"#C7D3D4\")\n\nsns.barplot(x = missing.index, y = missing.values, ax = ax, color = \"#101820\")\n\nfor p in ax.patches:\n        \n    txt = \"{:.1f}\".format(p.get_height() * 100) + \"%\"\n    \n    if p.get_height() > 0.7:\n        text = ax.text(p.get_x() + 0.02, p.get_height() + 0.025, txt, \n                       fontsize = 10, color = \"#101820\", fontweight = 400)\n        text.set_bbox(dict(boxstyle = \"round4\", facecolor = \"#F1480F\", alpha = 0.3, edgecolor = \"#F1480F\"))\n\n    else:\n        text = ax.text(p.get_x() + 0.02, p.get_height() + 0.025, txt, \n                       fontsize = 10, color = \"#101820\", fontweight = 400)\n        text.set_bbox(dict(boxstyle = \"round4\", facecolor = \"#0EB8F1\", alpha = 0.1, edgecolor = \"#0EB8F1\"))\n\nax.set_title(\"Missing Values & Target\", fontweight = \"bold\")\nax.set_xlabel(\"Total Missing Values per Observations\")\nax.set_ylabel(\"Claim Probability\")\nax.set_yticks([])\n\nsns.despine(top = True, right = True, left = True, bottom = True)\nplt.show()","8873db17":"# 5. Predictors - Target","2feb4b6b":"# 0. Introduction","41592e14":"# 1. Target Distribution","3042605d":"Here, new month, new TPS competition. Let's look at the data.","55ae1612":"I saw this idea from [@dwin183287](https:\/\/www.kaggle.com\/dwin183287)'s notebook. It would be important feature.\n\nYou can take a look at that notebook. https:\/\/www.kaggle.com\/dwin183287\/tps-september-2021-eda It contains great visualizations.","d33370c5":"# 3. Missing Values","b8fb20ff":"Predictors against classes. It looks like there is no significant pattern.","5a4d6a5d":"It seems, all features are continuous. We'll check it.","4367f959":"# 2. Unique Values","f1796f1e":"We have nearly a million observations with 118 predictors for training.","28154004":"# 6. Missing Values - Target","d0f028e6":"Distributions of features. We have normal distributed, skewed, bimodal and various distributions.\n\n**Note: Generally, we will use boosting algorithms, tree based algorithms. These kind of models don't need to normal distributed predictors. We also don't have to scale the data.**","a986fd6c":"We have a balanced dataset. Nice.","3f2e9c24":"# 4. Feature Distribution","18fbf9e4":"We have nearly 2 million missing values for training set, 15000 per feature.\n\nWe have almost 1 million missing values for test set, 8000 per feature.","a1010ab0":"Left part of graph includes continuous features that have more unique values.\n\nRight part, especially top of right part, contains features that have least unique values. "}}