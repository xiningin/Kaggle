{"cell_type":{"272723eb":"code","3c516866":"code","3c5bfc5f":"code","b8f280f6":"code","df31d43c":"code","fc344562":"code","48afeda1":"code","33bd59c1":"code","d8b69eba":"code","1575ab7d":"code","5969bcdc":"code","94607a15":"code","c23051da":"markdown","2e4dbd37":"markdown"},"source":{"272723eb":"# importing libraries\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nimport os\nfrom tensorflow.keras.preprocessing import image\nfrom zipfile import ZipFile ","3c516866":"# importing libraries for Deep Learning\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout, Activation\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator","3c5bfc5f":"test_dir=\"..\/input\/dogs-cats-images\/dog vs cat\/dataset\/test_set\"\ntrain_dir=\"..\/input\/dogs-cats-images\/dog vs cat\/dataset\/training_set\"\n\ntrain_dir_cats = train_dir + '\/cats'\ntrain_dir_dogs = train_dir + '\/dogs'\ntest_dir_cats = test_dir + '\/cats'\ntest_dir_dogs = test_dir + '\/dogs'","b8f280f6":"print('number of cats training images - ',len(os.listdir(train_dir_cats)))\nprint('number of dogs training images - ',len(os.listdir(train_dir_dogs)))\nprint('number of cats testing images - ',len(os.listdir(test_dir_cats)))\nprint('number of dogs testing images - ',len(os.listdir(test_dir_dogs)))","df31d43c":"data_generator = ImageDataGenerator(rescale = 1.0\/255.0, zoom_range = 0.2)","fc344562":"batch_size = 32\ntraining_data = data_generator.flow_from_directory(directory = train_dir,\n                                                   target_size = (64, 64),\n                                                   batch_size = batch_size,\n                                                   class_mode = 'binary')\ntesting_data = data_generator.flow_from_directory(directory = test_dir,\n                                                  target_size = (64, 64),\n                                                  batch_size = batch_size,\n                                                  class_mode = 'binary')","48afeda1":"# preparing the layers in the Convolutional Deep Neural Network\nmodel = Sequential()\nmodel.add(Conv2D(filters = 32, kernel_size = (3, 3), activation = 'relu', input_shape = training_data.image_shape))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(rate = 0.3))\nmodel.add(Conv2D(filters = 64, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(rate = 0.2))\nmodel.add(Conv2D(filters = 126, kernel_size = (3, 3), activation = 'relu'))\nmodel.add(MaxPooling2D(pool_size = (2, 2)))\nmodel.add(Dropout(rate = 0.15))\nmodel.add(Flatten())\nmodel.add(Dense(units = 32, activation = 'relu'))\nmodel.add(Dropout(rate = 0.15))\nmodel.add(Dense(units = 64, activation = 'relu'))\nmodel.add(Dropout(rate = 0.1))\nmodel.add(Dense(units = len(set(training_data.classes)), activation = 'softmax'))\nmodel.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])","33bd59c1":"model.summary()","d8b69eba":"fitted_model = model.fit_generator(training_data,\n                        steps_per_epoch = 1000,\n                        epochs = 25,\n                        validation_data = testing_data,\n                        validation_steps = 1000)","1575ab7d":"# plotting accuracy and validation accuracy\naccuracy = fitted_model.history['acc']\nplt.plot(range(len(accuracy)), accuracy, 'bo', label = 'accuracy')\nplt.legend()","5969bcdc":"# testing the model\ndef testing_image(image_directory):\n    test_image = image.load_img(image_directory, target_size = (64, 64))\n    test_image = image.img_to_array(test_image)\n    test_image = np.expand_dims(test_image, axis = 0)\n    result = model.predict(x = test_image)\n    print(result)\n    if result[0][0]  >= 0.5:\n        prediction = 'Dog'\n    else:\n        prediction = 'Cat'\n    return prediction","94607a15":"print(testing_image(test_dir + '\/dogs\/dog.5000.jpg'))","c23051da":"Now we need to convert the RGB images into array of numbers. The requirement can be satisfied by ImageDataGenerator() https:\/\/keras.io\/preprocessing\/image\/","2e4dbd37":"The Idea is to apply CNN to Cats&Dogs Image Classification dataset."}}