{"cell_type":{"9c72ca65":"code","10e3f5aa":"code","10b932f8":"code","ca897ef5":"code","664e2020":"markdown","7f3da57a":"markdown","448c38b6":"markdown","310769f3":"markdown","a0a28a46":"markdown","15740eb5":"markdown","3647b096":"markdown"},"source":{"9c72ca65":"# Put any user name (your user name, for example) to count the upvotes\n# It is in the final part of the profile url: https:\/\/www.kaggle.com\/darbin\nuser_name = 'darbin'","10e3f5aa":"import numpy as np\nimport pandas as pd\nfrom matplotlib import pyplot as plt\nimport seaborn as sns\nsns.set()\nimport os\n#print(os.listdir(\"..\/input\"))\npd.set_option('display.max_columns', None)\n\nUsers = pd.read_csv('..\/input\/meta-kaggle\/Users.csv').rename(columns = {'Id': 'UsersId'})\nForumMessages = pd.read_csv('..\/input\/meta-kaggle\/ForumMessages.csv').rename(columns = {'Id': 'ForumMessagesId'})\nForumMessageVotes = pd.read_csv('..\/input\/meta-kaggle\/ForumMessageVotes.csv').rename(columns = {'Id': 'ForumMessageVotesId'})\nForumTopics = pd.read_csv('..\/input\/meta-kaggle\/ForumTopics.csv').rename(columns = {'Id': 'ForumTopicsId'})\n\nuser_id = float(Users[Users.UserName == user_name]['UsersId'])\nuser_messages_ids = ForumMessages[ForumMessages.PostUserId == user_id]['ForumMessagesId']","10b932f8":"# 'CountedUpvotes' is the target - this is the number of users who are not Novices\n\n# result table\nmessage_upvotes = pd.DataFrame(\n    columns = ['MessageId',\n               'DiscussionTopic', # Forum topic the message is attached to\n               'Message', # Message being evaluated\n               'DiscussionTopic-Message', # concatenation of 'DiscussionTopic' and 'Message'\n               'CountedUpvotes', # novices upvotes are excluded\n               'TotalUpvotes', # total upvotes\n               'RemainedUpvotes_Bronze', # How long till a bronze = 1 - CountedUpvotes\n               'RemainedUpvotes_Silver', # How long till a silver = 5 - CountedUpvotes\n               'RemainedUpvotes_Gold' # How long till a gold = 10 - CountedUpvotes\n                ])\n\nfor i, message_id in enumerate(user_messages_ids):\n    message = str(ForumMessages[ForumMessages.ForumMessagesId == message_id]['Message'])\n    message = message.split(' <p>') # remove index and <p>\n    if(len(message) == 0): message = str('')\n    if(len(message) > 1): \n        message = str(message[1])\n        message = message.split('<\/p>')[0] # remove final '<\/p>'\n        message = message.split('\\nName: Message, dtype: object')[0] # remove the final '\\nName: Message, dtype: object'\n        message = str(message)\n    \n    topic_id = float(ForumMessages[ForumMessages.ForumMessagesId == message_id]['ForumTopicId'])\n    topic = ForumTopics[ForumTopics.ForumTopicsId == topic_id]['Title']\n    if(len(topic) == 0):\n        topic = str('')\n    else:\n        topic = str(topic)\n        topic = topic.split('    ')[1] # remove index\n        topic = topic.split('\\n')[0] # remove final '\\n'\n        topic = str(topic)\n    \n    users_id_upvoted_message = ForumMessageVotes[ForumMessageVotes.ForumMessageId == message_id]['FromUserId']\n\n    if(users_id_upvoted_message.count() == 0):\n        total_upvotes_count = 0\n        counted_upvotes_count = 0\n    else:\n        total_upvotes_count = users_id_upvoted_message.count()\n        # upvotes which are counted for a medal\n        counted_upvotes_count = Users[Users.UsersId.isin(users_id_upvoted_message) \n                                 & (Users.PerformanceTier > 0) \n                                 & (Users.UsersId != user_id)]['UsersId'].count()\n\n    message_upvotes.loc[ i, 'MessageId'] = message_id\n    message_upvotes.loc[ i, 'DiscussionTopic'] = topic\n    message_upvotes.loc[ i, 'Message'] = message\n    message_upvotes.loc[ i, 'DiscussionTopic-Message'] = str(topic) + \" (\\\"\" + str(message) + \"\\\")\"\n    message_upvotes.loc[ i, 'CountedUpvotes'] = counted_upvotes_count\n    message_upvotes.loc[ i, 'TotalUpvotes'] = total_upvotes_count\n    message_upvotes.loc[ i, 'RemainedUpvotes_Bronze'] = 1 - counted_upvotes_count if counted_upvotes_count < 1 else 0\n    message_upvotes.loc[ i, 'RemainedUpvotes_Silver'] = 5 - counted_upvotes_count if counted_upvotes_count < 5 else 0\n    message_upvotes.loc[ i, 'RemainedUpvotes_Gold'] = 10 - counted_upvotes_count if counted_upvotes_count < 10 else 0\n\nmessage_upvotes.sort_values(by = ['TotalUpvotes'], axis = 0, ascending = False).head()","ca897ef5":"if(message_upvotes[message_upvotes.TotalUpvotes > 0]['MessageId'].count() == 0):\n    print(\"There are no messages with Total Upvotes > 0\")\nelse:\n    # plot only messages with upvotes > 0\n    graph_vertical_size = message_upvotes[message_upvotes.TotalUpvotes > 0]['MessageId'].count()\/1.5\n    graph_vertical_size = round(graph_vertical_size, 0)\n    plt.figure(figsize = (14, graph_vertical_size))\n\n    sns.barplot(x = 'CountedUpvotes', \n                y = 'DiscussionTopic-Message', \n                data = message_upvotes[message_upvotes.TotalUpvotes > 0].sort_values(by = ['CountedUpvotes'], ascending = False))\n\n    # bronze medal zone\n    plt.axvline(x = 1, color = 'orange')\n    # silver medal zone\n    plt.axvline(x = 5, color = 'grey')\n    # gold medal zone\n    plt.axvline(x = 10, color = 'gold')\n\n    plt.title('Number of \"not novices\" messages upvotes\\n(Check your own messages!)', \n              {'fontsize':'16', \n               'fontweight':'bold'})\n\n    if(max(message_upvotes.CountedUpvotes) > 10):\n        max_tick = max(message_upvotes.CountedUpvotes)+1\n    else:\n        max_tick = 10+1\n\n    plt.xticks(np.arange(0, max_tick, 1.0))\n    plt.ylabel('Discussion messages')\n    plt.xlabel('\\\"Not novices\\\" Upvotes count (medal)')\n    plt.show()","664e2020":"# Discussion upvotes: how long till the medal?","7f3da57a":"# Count \"not novices\" upvotes","448c38b6":"## - Setup","310769f3":"## - Table of messages effectiveness","a0a28a46":"# Parameters to enter","15740eb5":"## - Visualization of messages effectiveness","3647b096":"\nNot every upvote of your Discussion message\/topic counts towards medals: \n\n> votes by novices are excluded from the medal calculation*. \n\n**The script helps to identify the number of upvotes of a discussion message counted towards a medal.**\n\n**You can check your own or anybody else discussion message\/topic. Dive into your discussion effectiveness!**\n\n\\* votes on old posts are also excluded from the medal calculation, but the script doesn't do this check.\n\n\\** there probably a 1-2 day lag in the amount of upvotes you see since the database is updated by kaggle on a daily basis.\n\n\\*** Before running the script insure that \"Meta Kaggle\" dataset is added via Add dataset->Datasets->Search for \"Meta Kaggle\" (Every time Kaggle updates the database, it deletes the previous one and it is no longer available)."}}