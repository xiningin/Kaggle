{"cell_type":{"2e043cd9":"code","dc50be05":"code","5947eafd":"code","c83612ac":"code","936d6fed":"code","4b1b65d7":"code","efe2fa71":"code","d65015cd":"code","89927741":"code","3d96fd99":"code","7263812d":"code","357a48da":"code","9e26503b":"code","9e28b806":"code","9dde0be3":"code","01513913":"code","916e6919":"code","55fe2398":"code","9f083b44":"code","0d62fe00":"code","6a3b5d04":"code","d8c5d05e":"code","4c0c0d7e":"code","9b748b1e":"code","c9fad12c":"code","49421bae":"code","3e47daff":"code","dfa647c7":"code","d62f5daa":"code","3b264dbd":"code","9a10c8fa":"code","4b81b6c0":"code","005c59d0":"code","74a7cdf8":"code","86fcc287":"code","564a69f4":"code","b2f6495d":"code","a7d8efe6":"code","8958cdbf":"code","19dab0df":"code","8a613b5e":"code","a06072c0":"code","41dff3fb":"code","045ed1a8":"code","4e06aa47":"code","63409feb":"code","12ea5153":"code","35f8f340":"code","fe42df9d":"code","591bb510":"code","9701fb87":"code","9cae898d":"code","2efbc21b":"code","e3061519":"code","11eec6d9":"code","7e44dcaf":"code","0f3f03ff":"code","3f83791a":"code","65b20e5f":"code","d268c7bf":"code","3e847ae2":"code","e7855a5c":"code","e87d9575":"code","22a5eb72":"code","fc242a8f":"code","8d085594":"code","3fdb43ba":"code","d4c0ddea":"code","6c2927d4":"code","7192f9d8":"code","743ad296":"code","1a43fb88":"code","54ff53ed":"code","f06ba962":"code","f5216956":"code","587e2578":"code","d2f1a97c":"code","3720c06b":"code","0d1c5d18":"code","12f24358":"code","2d89f541":"code","e842b353":"code","51e11a20":"code","dac44057":"code","020dbdb8":"code","ec393d0a":"code","e7d05be7":"code","95ef4029":"code","0dfae8d8":"code","f299223e":"code","a364b934":"code","6a8481f8":"code","ab922407":"code","9cf61500":"code","a4e825b3":"code","619f7d49":"code","655f3800":"code","215b8aa7":"code","032e8cbd":"code","2e1a4492":"code","26a1ac1d":"code","73d00147":"code","10abe293":"code","e77deb3a":"code","11d80f3d":"code","ac480504":"code","3d3d3e45":"code","b2d7d44c":"code","1ae2822f":"code","955998b3":"code","fd7d73b4":"code","dea3d7f8":"code","fe44b289":"code","6d466e23":"code","ac5c9d29":"code","416c8216":"markdown","f3055507":"markdown","be483004":"markdown","854a721f":"markdown","691e158e":"markdown","eaa03a9a":"markdown","d7657519":"markdown","b67555b9":"markdown","0c4a1a6f":"markdown","7c59a991":"markdown","37e57c48":"markdown","30362d58":"markdown","aa83b3d5":"markdown","5290b270":"markdown","04260f03":"markdown","27aa52c4":"markdown","8399242c":"markdown","5fbe7c4b":"markdown","ea8a5446":"markdown","1485e27b":"markdown","bee21bcf":"markdown","246443c2":"markdown","c1ee5ee6":"markdown","83617217":"markdown","7c191d39":"markdown","dddb3097":"markdown","bbc96f0c":"markdown","33c739eb":"markdown","7a7b94f6":"markdown","32dce775":"markdown","d598f10a":"markdown","cab4f7f8":"markdown","f650a1ba":"markdown","0d4e2906":"markdown","3ce30f48":"markdown","22ddb8d8":"markdown","31affe5d":"markdown","496926b8":"markdown","78007b3c":"markdown","066d3b1d":"markdown","aa938bb1":"markdown","d5aeca8d":"markdown","23fb0f9a":"markdown","28f52a69":"markdown","1dbd7a0e":"markdown","065dbc7e":"markdown","ac6c798e":"markdown","39eeb0af":"markdown","1ebde74f":"markdown","3b706f7b":"markdown","40f7402b":"markdown","b8243258":"markdown","095fbaa4":"markdown","6be21f23":"markdown","a010e76a":"markdown","e425c259":"markdown","e8826d16":"markdown","4b6abe0b":"markdown","46d33d15":"markdown","4198a39a":"markdown","60849e7c":"markdown","f4e357f3":"markdown","86a820b0":"markdown","ab5e7600":"markdown","6d03f31c":"markdown","0d2dc368":"markdown","a6c29b62":"markdown","d3c9544f":"markdown","9bfa7eab":"markdown","8288798c":"markdown","253db26a":"markdown","9908f0bb":"markdown"},"source":{"2e043cd9":"!pip install ipython-autotime\n%load_ext autotime","dc50be05":"# \ud604\uc7ac \uc791\uc5c5 \uc704\uce58\n!pwd","5947eafd":"!ls -al","c83612ac":"!ls -al \/kaggle\/input\/kisti-kaggle-competition-4th","936d6fed":"# \uad6c\uae00 \ub4dc\ub77c\uc774\ube0c \ub9c8\uc6b4\ud2b8\n#from google.colab import drive\n#drive.mount('gdrive')","4b1b65d7":"#!ls -al .\/gdrive\n","efe2fa71":"## \uc791\uc5c5 \ub514\ub809\ud1a0\ub9ac\ub85c \uc774\ub3d9\n#%cd \"\/content\/gdrive\/My Drive\/KISTI\/kaggle\"\n## \ub370\uc774\ud130\uc14b \ud655\uc778 \n#!ls -al .\/datasets","d65015cd":"!pip install missingno","89927741":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# seaborn scheme \uc124\uc815\nplt.style.use('seaborn')\n# \uadf8\ub798\ud504\uc758 \ud3f0\ud2b8 \uc124\uc815\nsns.set(font_scale=2.5) \n# \ub370\uc774\ud130\uc14b\uc758 missing data \uc27d\uac8c \ubcf4\uc5ec\uc8fc\uae30\nimport missingno as msno\n\n#ignore warnings\n#import warnings\n#warnings.filterwarnings('ignore')\n\n%matplotlib inline","3d96fd99":"#WORK_DIR = '\/content'\n#WORK_DIR = '.'\n#df_train = pd.read_csv(WORK_DIR + '\/datasets\/train.csv')\n#df_test = pd.read_csv(WORK_DIR + '\/datasets\/test.csv')\n\nimport os\n# dataset \ub514\ub809\ud1a0\ub9ac \uc704\uce58 \nDATASET_DIR = \"\/kaggle\/input\/kisti-kaggle-competition-4th\"\n\ndf_train = pd.read_csv(os.path.join(DATASET_DIR, \"train.csv\"))\ndf_test = pd.read_csv(os.path.join(DATASET_DIR, \"test.csv\"))\n","7263812d":"# \ub370\uc774\ud130 \uc14b \uc0b4\ud3b4\ubcf4\uae30\ndf_train.head()","357a48da":"df_test.head()","9e26503b":"# \ud1b5\uacc4\uc801 \uc218\uce58 \ubcf4\uae30\ndf_train.describe()","9e28b806":"df_test.describe()","9dde0be3":"# \ud559\uc2b5 \ub370\uc774\ud130 \uccb4\ud06c\nfor col in df_train.columns:\n    print('column: {:>10}\\t Percent of NULL value: {:.2f}%'.format(col, \n          100 * (df_train[col].isnull().sum() \/ df_train[col].shape[0])))\n","01513913":"df_train.info()","916e6919":"# \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130 \uccb4\ud06c\nfor col in df_test.columns:\n    print('column: {:>10}\\t Percent of NULL value: {:.2f}%'.format(col, \n          100 * (df_test[col].isnull().sum() \/ df_test[col].shape[0])))","55fe2398":"df_test.info()","9f083b44":"# null data \ubd84\ud3ec \ud655\uc778\nmsno.matrix(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))","0d62fe00":"# null data \uc218\ub85c \ud655\uc778\nmsno.bar(df=df_train.iloc[:, :], figsize=(8, 8), color=(0.8, 0.5, 0.2))","6a3b5d04":"df_train['Survived'].value_counts()","d8c5d05e":"# 1\ud589 2\uc5f4 \ud314\ub808\ud2b8, \ud06c\uae30(\uc138\ub85c:18, \uac00\ub85c:8)\nf, ax = plt.subplots(1, 2, figsize=(18, 8))\n\n# \ud30c\uc774 \ucc28\ud2b8\ub85c \uadf8\ub9ac\uae30\n# value_counts() \uc758 data type\uc740 series\uc774\uba70,\n# series \ud0c0\uc785\uc740 plot\uc744 \uac00\uc9d0\n# plt.plot(df_train['Survived'].value_counts()) \uc740 df_train[..]...plot()\uacfc \ub3d9\uc77c\ndf_train['Survived'].value_counts().plot.pie(explode=[0, 0.1], \n                           autopct='%1.1f%%', ax=ax[0], shadow=True)\nax[0].set_title('Pie plot - Survived')\nax[0].set_ylabel('')\n\nsns.countplot('Survived', data=df_train, ax=ax[1])\nax[1].set_title('Count plot - Survived')\n\nplt.show()","4c0c0d7e":"# 11\uac1c\uc758 feature, 1\uac1c\uc758 target label \ndf_train.shape","9b748b1e":"# Pclass \ubcc4 \ud56d\ubaa9 \uac2f\uc218\ndf_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).count()","c9fad12c":"# Pclass\ubcc4 \uc0dd\uc874\uc790 \uc218\n# P1(136\/216), P2(87\/184), P3(119\/491)\ndf_train[['Pclass', 'Survived']].groupby(['Pclass'], as_index=True).sum()","49421bae":"# crosstab \uc73c\ub85c \ud655\uc778\npd.crosstab(df_train['Pclass'], df_train['Survived'], \n            margins=True).style.background_gradient(cmap='summer_r')","3e47daff":"# \ud074\ub798\uc2a4\ubcc4 \uc0dd\uc874\ub960\n# P1 : (136 \/ (80+136)) => 63%\ndf_train[['Pclass', 'Survived']].groupby(['Pclass'], \n             as_index=True).mean().sort_values(by='Survived', \n                                   ascending=False).plot.bar()","dfa647c7":"# label\uc5d0 \ub530\ub978 \uac2f\uc218 \ud655\uc778\ny_position = 1.02\nf, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train['Pclass'].value_counts().plot.bar(\n    color=['#CD7F32','#FFDF00','#D3D3D3'], ax=ax[0])\nax[0].set_title('Number of Passengers By Pclass', y=y_position)\nax[0].set_ylabel('Count')\nsns.countplot('Pclass', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Pclass: Survived vs Dead', y=y_position)\nplt.show()","d62f5daa":"f, ax = plt.subplots(1, 2, figsize=(18, 8))\ndf_train[['Sex', 'Survived']].groupby(['Sex'], \n                          as_index=True).mean().plot.bar(ax=ax[0])\nax[0].set_title('Survived vs Sex')\nsns.countplot('Sex', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('Sex: Survived vs Dead')\nplt.show()","3b264dbd":"df_train[['Sex', 'Survived']].groupby(['Sex'], \n            as_index=False).mean().sort_values(by='Survived', ascending=False)","9a10c8fa":"# crosstab \uc73c\ub85c \ud655\uc778\npd.crosstab(df_train['Sex'], df_train['Survived'], \n            margins=True).style.background_gradient(cmap='summer_r')","4b81b6c0":"# 3\uac1c\uc758 \ucc28\uc6d0 \ub370\uc774\ud130\ub85c \uc774\ub8e8\uc5b4\uc9c4 \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\nsns.factorplot('Pclass', 'Survived', hue='Sex', data=df_train, \n               size=6, aspect=1.5)","005c59d0":"# cloumn \ub300\uc2e0 hue \uc0ac\uc6a9\nsns.factorplot(x='Sex', y='Survived', col='Pclass',\n              data=df_train, satureation=.5,\n               size=9, aspect=1)\nsns.factorplot(x='Sex', y='Survived', hue='Pclass',\n              data=df_train, satureation=.5,\n               size=9, aspect=1)","74a7cdf8":"# \uac04\ub2e8\ud55c \ud1b5\uacc4 \ubcf4\uae30\nprint('\uc81c\uc77c \ub098\uc774 \ub9ce\uc740 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].max()))\nprint('\uc81c\uc77c \uc5b4\ub9b0 \ud0d1\uc2b9\uac1d : {:.1f} Years'.format(df_train['Age'].min()))\nprint('\ud0d1\uc2b9\uac1d \ud3c9\uade0 \ub098\uc774 : {:.1f} Years'.format(df_train['Age'].mean()))","86fcc287":"# \uc0dd\uc874\uc5d0 \ub530\ub978 Age\uc758 \ud788\uc2a4\ud1a0\uadf8\ub7a8\n# kdeplot()\nfig, ax = plt.subplots(1, 1, figsize=(9, 5))\nsns.kdeplot(df_train[df_train['Survived'] == 1]['Age'], ax=ax)\nsns.kdeplot(df_train[df_train['Survived'] == 0]['Age'], ax=ax)\nplt.legend(['Survived == 1', 'Survived == 0'])\nplt.show()","564a69f4":"# \ud788\uc2a4\ud1a0\uadf8\ub7a8 vs. kdeplot()\n# kdeplot()\uc774 \ubd80\ub4dc\ub7fd\uac8c \uadf8\ub9bc\n# (\ucc38\uace0) \ucee4\ub110\ubc00\ub3c4\ucd94\uc815 https:\/\/blog.naver.com\/loiu870422\/220660847923\ndf_train[df_train['Survived']==1]['Age'].hist()","b2f6495d":"# pandas indexing\ndf_train.iloc[0,:]","a7d8efe6":"for row in df_train.iterrows():\n  break\nrow","8958cdbf":"df_train['Survived'] == 1","19dab0df":"df_train[df_train['Survived']==1]","8a613b5e":"# Pclass\uc640 Age \ub85c \ud655\uc778\nplt.figure(figsize=(8, 6))\ndf_train['Age'][df_train['Pclass'] == 1].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 2].plot(kind='kde')\ndf_train['Age'][df_train['Pclass'] == 3].plot(kind='kde')\n\nplt.xlabel('Age')\nplt.title('Age Distribution within classes')\nplt.legend(['1st Class', '2nd Class', '3rd Class'])","a06072c0":"fig, ax = plt.subplots(1,3,figsize=(20,5))\nsns.kdeplot(df_train[(df_train['Survived']==0) & (df_train['Pclass']==1)]['Age'], ax=ax[0])\nsns.kdeplot(df_train[(df_train['Survived']==1) & (df_train['Pclass']==1)]['Age'], ax=ax[0])\nax[0].set_title('1st class')\nax[0].legend(['Survived==0', 'Survived==1'])   \nsns.kdeplot(df_train[(df_train['Survived']==0) & (df_train['Pclass']==2)]['Age'], ax=ax[1])\nsns.kdeplot(df_train[(df_train['Survived']==1) & (df_train['Pclass']==2)]['Age'], ax=ax[1])\nax[1].set_title('2nc class')\nax[1].legend(['Survived==0', 'Survived==1'])   \nsns.kdeplot(df_train[(df_train['Survived']==0) & (df_train['Pclass']==3)]['Age'], ax=ax[2])\nsns.kdeplot(df_train[(df_train['Survived']==1) & (df_train['Pclass']==3)]['Age'], ax=ax[2])\nax[2].set_title('3rd class')\nax[2].legend(['Survived==0', 'Survived==1'])                               \nplt.show()\n","41dff3fb":"# \ub098\uc774 \ubc94\uc704\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960\ncummulate_survival_ratio = []\nfor i in range(1, 80):\n    cummulate_survival_ratio.append(\n        df_train[df_train['Age'] < i]['Survived'].sum() \/ \n        len(df_train[df_train['Age'] < i]['Survived']))\n    \nplt.figure(figsize=(7, 7))\nplt.plot(cummulate_survival_ratio)\nplt.title('Survival rate change depending on range of Age', y=1.02)\nplt.ylabel('Survival rate')\nplt.xlabel('Range of Age(0~x)')\nplt.show()","045ed1a8":"# scale='count', scale='area'\nf,ax=plt.subplots(1,2,figsize=(18,8))\nsns.violinplot(\"Pclass\",\"Age\", hue=\"Survived\", data=df_train, scale='count', \n               split=True,ax=ax[0])\nax[0].set_title('Pclass and Age vs Survived')\nax[0].set_yticks(range(0,110,10))\nsns.violinplot(\"Sex\",\"Age\", hue=\"Survived\", data=df_train, scale='count', \n               split=True,ax=ax[1])\nax[1].set_title('Sex and Age vs Survived')\nax[1].set_yticks(range(0,110,10))\nplt.show()","4e06aa47":"f, ax = plt.subplots(1, 1, figsize=(7, 7))\ndf_train[['Embarked', 'Survived']].groupby(['Embarked'], \n              as_index=True).mean().sort_values(by='Survived', \n                                      ascending=False).plot.bar(ax=ax)","63409feb":"# \ub2e4\ub978 feature\ub85c split\ud558\uc5ec \ud655\uc778\nf,ax=plt.subplots(2, 2, figsize=(20,15))\nsns.countplot('Embarked', data=df_train, ax=ax[0,0])\nax[0,0].set_title('(1) No. Of Passengers Boarded')\nsns.countplot('Embarked', hue='Sex', data=df_train, ax=ax[0,1])\nax[0,1].set_title('(2) Male-Female Split for Embarked')\nsns.countplot('Embarked', hue='Survived', data=df_train, ax=ax[1,0])\nax[1,0].set_title('(3) Embarked vs Survived')\nsns.countplot('Embarked', hue='Pclass', data=df_train, ax=ax[1,1])\nax[1,1].set_title('(4) Embarked vs Pclass')\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","12ea5153":"# \uc0c8\ub85c\uc6b4 \uceec\ub7fc(Family) \ucd94\uac00\n# series \ud0c0\uc785\uc740 \uc11c\ub85c \ub354\ud560 \uc218 \uc788\uc74c\n# \uc790\uc2e0\uc744 \ud3ec\ud568\ud558\uae30 \uc704\ud574 1\uc744 \ub354\ud568\ndf_train['FamilySize'] = df_train['SibSp'] + df_train['Parch'] + 1 \ndf_test['FamilySize'] = df_test['SibSp'] + df_test['Parch'] + 1 \n\nprint(\"Maximum size of Family: \", df_train['FamilySize'].max())\nprint(\"Minimum size of Family: \", df_train['FamilySize'].min())","35f8f340":"# Family \ud06c\uae30\uc640 \uc0dd\uc874 \uad00\uacc4\nf,ax=plt.subplots(1, 3, figsize=(40,10))\nsns.countplot('FamilySize', data=df_train, ax=ax[0])\nax[0].set_title('(1) No. Of Passengers Boarded', y=1.02)\n\nsns.countplot('FamilySize', hue='Survived', data=df_train, ax=ax[1])\nax[1].set_title('(2) Survived countplot depending on FamilySize',  y=1.02)\n\ndf_train[['FamilySize', 'Survived']].groupby(['FamilySize'], \n                    as_index=True).mean().sort_values(by='Survived', \n                                         ascending=False).plot.bar(ax=ax[2])\nax[2].set_title('(3) Survived rate depending on FamilySize',  y=1.02)\n\nplt.subplots_adjust(wspace=0.2, hspace=0.5)\nplt.show()","fe42df9d":"# histogram\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', \n                 label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","591bb510":"# NULL\uac12 \uce58\ud658\ndf_train.loc[df_train.Fare.isnull(), 'Fare'] = df_train['Fare'].mean()\ndf_test.loc[df_test.Fare.isnull(), 'Fare'] = df_test['Fare'].mean()\n\ndf_train['Fare'] = df_train['Fare'].map(lambda i: np.log(i) if i>0 else 0)\ndf_test['Fare'] = df_test['Fare'].map(lambda i: np.log(i) if i>0 else 0)\n\nfig, ax = plt.subplots(1, 1, figsize=(8, 8))\ng = sns.distplot(df_train['Fare'], color='b', \n            label='Skewness : {:.2f}'.format(df_train['Fare'].skew()), ax=ax)\ng = g.legend(loc='best')","9701fb87":"df_train.head()","9cae898d":"df_train['Ticket'].value_counts()\n","2efbc21b":"df_train['Age'].isnull().sum()","e3061519":"df_train['Name']","11eec6d9":"df_train['Name'].str.extract('([A-Za-z]+)\\.')","7e44dcaf":"# initial \ud56d\ubaa9\uc73c\ub85c \ucd94\ucd9c\ndf_train['Initial']=0\nfor i in df_train:\n    df_train['Initial']= df_train.Name.str.extract('([A-Za-z]+)\\.') \n    \ndf_test['Initial']=0\nfor i in df_test:\n    df_test['Initial']= df_test.Name.str.extract('([A-Za-z]+)\\.')","0f3f03ff":"# Sex\uc640 Initial\uc5d0 \ub300\ud55c crosstab \ud655\uc778\npd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r')","3f83791a":"# \uc704 \ud14c\uc774\ube14\uc744 \ucc38\uace0\ud558\uc5ec,\n# initial \uce58\ud658\ndf_train['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess',\n                          'Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other',\n                       'Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)\n\ndf_test['Initial'].replace(['Mlle','Mme','Ms','Dr','Major','Lady','Countess',\n                          'Jonkheer','Col','Rev','Capt','Sir','Don', 'Dona'],\n                        ['Miss','Miss','Miss','Mr','Mr','Mrs','Mrs','Other',\n                         'Other','Other','Mr','Mr','Mr', 'Mr'],inplace=True)","65b20e5f":"pd.crosstab(df_train['Initial'], df_train['Sex']).T.style.background_gradient(cmap='summer_r')","d268c7bf":"df_train.groupby('Initial').mean()","3e847ae2":"# \uc0dd\uc874\ub960 \ud655\uc778\ndf_train.groupby('Initial')['Survived'].mean().plot.bar()","e7855a5c":"df_all = pd.concat([df_train, df_test])\ndf_all","e87d9575":"df_all.reset_index(drop=True)","22a5eb72":"df_all.groupby('Initial').mean()","fc242a8f":"df_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mr'),'Age']=33\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Mrs'),'Age']=37\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Master'),'Age']=5\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Miss'),'Age']=22\ndf_train.loc[(df_train.Age.isnull())&(df_train.Initial=='Other'),'Age']=45\n\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mr'),'Age']=33\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Mrs'),'Age']=37\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Master'),'Age']=5\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Miss'),'Age']=22\ndf_test.loc[(df_test.Age.isnull())&(df_test.Initial=='Other'),'Age']=45","8d085594":"df_train['Age'].isnull().sum()","3fdb43ba":"df_test['Age'].isnull().sum()","d4c0ddea":"df_train['Embarked'].isnull().sum()","6c2927d4":"df_train.shape","7192f9d8":"df_train['Embarked'].fillna('S', inplace=True)","743ad296":"df_train['Age_cat'] = 0\n\ndf_train.head()","1a43fb88":"# loc \uc774\uc6a9\n# 10\uc0b4 \uac04\uaca9\uc73c\ub85c \ub098\ub204\uae30\ndf_train['Age_cat'] = 0\ndf_train.loc[df_train['Age'] < 10, 'Age_cat'] = 0\ndf_train.loc[(10 <= df_train['Age']) & (df_train['Age'] < 20), 'Age_cat'] = 1\ndf_train.loc[(20 <= df_train['Age']) & (df_train['Age'] < 30), 'Age_cat'] = 2\ndf_train.loc[(30 <= df_train['Age']) & (df_train['Age'] < 40), 'Age_cat'] = 3\ndf_train.loc[(40 <= df_train['Age']) & (df_train['Age'] < 50), 'Age_cat'] = 4\ndf_train.loc[(50 <= df_train['Age']) & (df_train['Age'] < 60), 'Age_cat'] = 5\ndf_train.loc[(60 <= df_train['Age']) & (df_train['Age'] < 70), 'Age_cat'] = 6\ndf_train.loc[70 <= df_train['Age'], 'Age_cat'] = 7\n\ndf_test['Age_cat'] = 0\ndf_test.loc[df_test['Age'] < 10, 'Age_cat'] = 0\ndf_test.loc[(10 <= df_test['Age']) & (df_test['Age'] < 20), 'Age_cat'] = 1\ndf_test.loc[(20 <= df_test['Age']) & (df_test['Age'] < 30), 'Age_cat'] = 2\ndf_test.loc[(30 <= df_test['Age']) & (df_test['Age'] < 40), 'Age_cat'] = 3\ndf_test.loc[(40 <= df_test['Age']) & (df_test['Age'] < 50), 'Age_cat'] = 4\ndf_test.loc[(50 <= df_test['Age']) & (df_test['Age'] < 60), 'Age_cat'] = 5\ndf_test.loc[(60 <= df_test['Age']) & (df_test['Age'] < 70), 'Age_cat'] = 6\ndf_test.loc[70 <= df_test['Age'], 'Age_cat'] = 7","54ff53ed":"df_train.head()","f06ba962":"# apply() \ud568\uc218 \uc0ac\uc6a9\ud55c \ubc29\ubc95\ndef category_age(x):\n    if x < 10:\n        return 0\n    elif x < 20:\n        return 1\n    elif x < 30:\n        return 2\n    elif x < 40:\n        return 3\n    elif x < 50:\n        return 4\n    elif x < 60:\n        return 5\n    elif x < 70:\n        return 6\n    else:\n        return 7    \n    \ndf_train['Age_cat_2'] = df_train['Age'].apply(category_age)\n","f5216956":"df_train.head()","587e2578":"# \ub450 \uac00\uc9c0 \ubc29\ubc95\uc758 \ube44\uad50\n# all() : \ubaa8\ub450 True \uc77c \ub54c, True\n# any() : \ud558\ub098\ub77c\ub3c4 True\uc774\uba74 True\n(df_train['Age_cat'] == df_train['Age_cat_2']).all()","d2f1a97c":"# Age \uceec\ub7fc \uc0ad\uc81c\n# axis=1\ndf_train.drop(['Age', 'Age_cat_2'], axis=1, inplace=True)\ndf_test.drop(['Age'], axis=1, inplace=True)","3720c06b":"df_train.Initial.unique()","0d1c5d18":"df_train['Initial'] = df_train['Initial'].map(\n    {'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_test['Initial'] = df_test['Initial'].map(\n    {'Master': 0, 'Miss': 1, 'Mr': 2, 'Mrs': 3, 'Other': 4})\ndf_train.Initial.unique() ","12f24358":"df_train.Initial.unique()","2d89f541":"df_train['Embarked'].unique()","e842b353":"df_train['Embarked'].value_counts()","51e11a20":"df_train['Embarked'] = df_train['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})\ndf_test['Embarked'] = df_test['Embarked'].map({'C': 0, 'Q': 1, 'S': 2})","dac44057":"df_train.head()","020dbdb8":"# null \ud655\uc778\ndf_train['Embarked'].isnull().any()","ec393d0a":"df_train['Sex'].unique()","e7d05be7":"df_train['Sex'] = df_train['Sex'].map({'female': 0, 'male': 1})\ndf_test['Sex'] = df_test['Sex'].map({'female': 0, 'male': 1})","95ef4029":"df_train['Sex'].unique()","0dfae8d8":"heatmap_data = df_train[['Survived', 'Pclass', 'Sex', 'Fare', \n                         'Embarked', 'FamilySize', 'Initial', 'Age_cat']] \n\ncolormap = plt.cm.RdBu\nplt.figure(figsize=(14, 12))\nplt.title('Pearson Correlation of Features', y=1.05, size=15)\nsns.heatmap(heatmap_data.astype(float).corr(), linewidths=0.1, vmax=1.0,\n           square=True, cmap=colormap, linecolor='white', annot=True, \n            annot_kws={\"size\": 16})\n\ndel heatmap_data","f299223e":"df_train = pd.get_dummies(df_train, columns=['Initial'], prefix='Initial')\ndf_test = pd.get_dummies(df_test, columns=['Initial'], prefix='Initial')\n\ndf_train.head()","a364b934":"df_train = pd.get_dummies(df_train, columns=['Embarked'], prefix='Embarked')\ndf_test = pd.get_dummies(df_test, columns=['Embarked'], prefix='Embarked')","6a8481f8":"df_train.head()","ab922407":"df_train.drop(['PassengerId', 'Name', 'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\ndf_test.drop(['PassengerId', 'Name',  'SibSp', 'Parch', 'Ticket', 'Cabin'], axis=1, inplace=True)\n","9cf61500":"df_train.head()","a4e825b3":"df_test.head()","619f7d49":"from sklearn.ensemble import RandomForestClassifier  \nfrom sklearn import metrics \nfrom sklearn.model_selection import train_test_split","655f3800":"# \ud559\uc2b5\uc5d0 \uc4f0\uc77c \ub370\uc774\ud130\uc640 target label \ubd84\ub9ac\nX_train = df_train.drop('Survived', axis=1).values\ntarget_label = df_train['Survived'].values\nX_test = df_test.values","215b8aa7":"X_tr, X_vld, y_tr, y_vld = train_test_split(X_train, target_label, test_size=0.3, random_state=2018)","032e8cbd":"# \ud559\uc2b5\nmodel = RandomForestClassifier()\nmodel.fit(X_tr, y_tr)\n","2e1a4492":"# \uc608\uce21\nprediction = model.predict(X_vld)","26a1ac1d":"prediction","73d00147":"# \uc815\ud655\ub3c4\nprint('\ucd1d {}\uba85 \uc911 {:.2f}% \uc815\ud655\ub3c4\ub85c \uc0dd\uc874\uc744 \ub9de\ucda4'.format(y_vld.shape[0], 100 * metrics.accuracy_score(prediction, y_vld)))","10abe293":"print(X_tr.shape)\nprint(X_vld.shape)","e77deb3a":"(prediction == y_vld).sum()\/prediction.shape[0]","11d80f3d":"model.feature_importances_","ac480504":"df_train.head()\n","3d3d3e45":"from pandas import Series\nfeature_importance = model.feature_importances_\nSeries_feat_imp = Series(feature_importance, index=df_test.columns)","b2d7d44c":"plt.figure(figsize=(8, 8))\nSeries_feat_imp.sort_values(ascending=True).plot.barh()\nplt.xlabel('Feature importance')\nplt.ylabel('Feature')\nplt.show()","1ae2822f":"#WORK_DIR = '\/content'\n#WORK_DIR = '.'\n#submission = pd.read_csv(WORK_DIR + '\/datasets\/sample_submission.csv')\n\nsubmission = pd.read_csv(os.path.join(DATASET_DIR, 'sample_submission.csv'))\n","955998b3":"submission.head()","fd7d73b4":"prediction = model.predict(X_test)\nsubmission['Survived'] = prediction\n\nsubmission.to_csv('.\/kisti_kaggle_baseline_submission.csv', index=False)","dea3d7f8":"!head -10 .\/kisti_kaggle_baseline_submission.csv","fe44b289":"!ls -al","6d466e23":"#!kaggle competitions submit -c titanic -f baseline_submission.csv -m baseline_submit","ac5c9d29":"#from google.colab import files\n#files.download(\"baseline_submission.csv\")\n","416c8216":"- Pclass\uac00 \uc88b\uc744 \uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\uc74c","f3055507":"### Pclass, Sex, Age\n- Pclass, Sex, Age \uc138 \uac1c\uc758 feature\uc5d0 \ub300\ud55c \uc2dc\uac01\ud654\n- seaborn violinplot \uc0ac\uc6a9\n  - x\ucd95 : \ub098\ub204\uc5b4 \ubcf4\uace0 \uc2f6\uc740 case (Pclass, Sex)\n  - y\ucd95 : \ubcf4\uace0 \uc2f6\uc740 distribution (Age)","be483004":"##### Features\n- pclass : \ud074\ub798\uc2a4, Integer\n- age : \ub098\uc774, Integer\n- sibsp : \ud615\uc81c\uc640 \ubc30\uc6b0\uc790\uc758 \uc218, Integer\n- parch : \ubd80\ubaa8\uc640 \uc544\uc774\uc758 \uc218, Integer\n- fare : \ud0d1\uc2b9\ub8cc, Float\n- survived : \uc0dd\uc874\uc5ec\ubd80, Integer (target label)\n","854a721f":"### Embarked\n- \ud0d1\uc2b9\ud55c \ud56d\uad6c\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960 \ud655\uc778","691e158e":"### Age\n- \ub098\uc774\uc5d0 \ub530\ub978 \uc0dd\uc874 \ud655\ub960 \ud655\uc778","eaa03a9a":"#### Embarked\uc758 Null \uac12 \ucc98\ub9ac\n- null \uac12\uc774 2\uac1c \uc788\uc73c\uba70, S\uc5d0\uc11c \ud0d1\uc2b9\uac1d\uc774 \uac00\uc7a5 \ub9ce\uc74c\ubbc0\ub85c null\uc744 S\ub85c \ucc44\uc6c0\n- dataframe\uc758 fillna() \uc0ac\uc6a9","d7657519":"## \uc0ac\uc804 \uc900\ube44\n### 1. \uce90\uae00 \uac00\uc785\n- www.kaggle.com\n\n","b67555b9":"### \ubaa8\ub378 \uc0dd\uc131 \ubc0f \uc608\uce21\n- RandomForestClassifier()\n- fit()\n- predict()","0c4a1a6f":"## 1. Dataset \ud655\uc778\n- \ub370\uc774\ud130\ub97c \ud14c\uc774\ube14\ud654\ud558\uc5ec \ub2e4\ub8e8\ub294 \uac83\uc774 \ud3b8\ub9ac\n- pandas\ub97c \uc0ac\uc6a9\n  - \uac04\ub2e8\ud55c \ud1b5\uacc4\uc801 \ubd84\uc11d\ubd80\ud130 \ubcf5\uc7a1\ud55c \ucc98\ub9ac\ub4e4\uc744 \uac04\ub2e8\ud55c \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucc98\ub9ac\n","7c59a991":"### Ticket\n- \ub2e4\uc591\ud55c \ubb38\uc790\uc5f4\uc774 \ub9ce\uc74c\n- \ubaa8\ub378\uc5d0 \uc801\uc6a9\ud558\uae30 \uc704\ud574\uc11c \ub2e4\uc591\ud55c \uc544\uc774\ub514\uc5b4 \ud544\uc694","37e57c48":"- Pclass\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c, Sex\ub3c4 \uc608\uce21 \ubaa8\ub378\uc5d0 \uc911\uc694\ud55c feature \uc784\uc744 \uc54c \uc218 \uc788\uc74c","30362d58":"- [\ucc38\uace0] plotly","aa83b3d5":"### Family\n- SibSp(\ud615\uc81c \uc790\ub9e4)\n- Parch(\ubd80\ubaa8, \uc790\ub140)","5290b270":"# NEXT...\n- Feature Engineering\n  - Fare\uc5d0 log() \uc801\uc6a9\ud588\ub358 \ubd80\ubd84\uc744 \ucde8\uc18c\ud558\uace0 commit \uc218\ud589\n    - \uacb0\uacfc\ub294 \ub354 \uc548 \uc88b\uc544\uc9d0 \ud655\uc778!\n- \ub2e4\uc591\ud55c \uc54c\uace0\ub9ac\uc998 \uc801\uc6a9\n    - Light GBM\n    - CatBoost\n    - :\n  ","04260f03":"## 3. \ub370\uc774\ud130 \ub2e4\uc6b4\ub85c\ub4dc \ubc0f \uad6c\uae00 \ub4dc\ub77c\uc774\ube0c\uc5d0 \uc62c\ub9ac\uae30\n### 1) 3 \uac1c\uc758 \ud30c\uc77c \ub2e4\uc6b4\ub85c\ub4dc\n- \ud6c8\ub828\uc6a9 \ub370\uc774\ud130: train.csv\n- \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130: test.csv\n- \uacb0\uacfc\ud30c\uc77c \uc0d8\ud50c: sample_submission.csv\n\n- www.kaggle.com \ub178\ud2b8\ubd81\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 \/kaggle\/input\/ \ub514\ub809\ud1a0\ub9ac\uc5d0 \ud574\ub2f9 \ud30c\uc77c\ub4e4\uc774 \uc788\uc74c\n\n### 2) \uad6c\uae00 \ub4dc\ub77c\uc774\ube0c \uc704\uce58\n- My Drive \/ KISTI \/ kaggle \/ datasets","27aa52c4":"- ticket number \uac00 \ub9e4\uc6b0 \ub2e4\uc591\ud568\n- \uc77c\ub2e8, \uc81c\uc678\n- [\ucc38\uace0] \ucc38\uace0\ud55c \uc0ac\uc774\ud2b8\n  - https:\/\/www.kaggle.com\/arthurtok\/introduction-to-ensembling-stacking-in-python, https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions, https:\/\/www.kaggle.com\/ash316\/eda-to-prediction-dietanic, https:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling ","8399242c":"- \uc67c\ucabd \uadf8\ub9bc: Pclass \ubcc4\ub85c Age\uc758 \ubd84\ud3ec\uac00 \uc5b4\ub5bb\uac8c \ub2e4\ub978\uc9c0, \uc0dd\uc874 \uc5ec\ubd80\uc5d0 \ub530\ub77c \uad6c\ubd84\ud55c \uadf8\ub798\ud504\n- \uc624\ub978\ucabd \uadf8\ub9bc: Sex, Age\uc5d0 \ub530\ub978 \uc0dd\uc874 \uc5ec\ubd80\n- \ubaa8\ub4e0 \ud074\ub798\uc2a4\uc5d0\uc11c \ub098\uc774\uac00 \uc5b4\ub9b4 \uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\uc74c\n- \uc624\ub978\ucabd \uadf8\ub9bc\uc5d0\uc11c, female \uc774 \uc0dd\uc874\ub960\uc774 \ub192\uc74c\n- \uc5ec\uc131\uacfc \uc544\uc774\ub97c \uba3c\uc800 \ucc59\uae34 \uac83\uc744 \uc54c \uc218 \uc788\uc74c","5fbe7c4b":"- Figure 1: \uac00\uc871 \ud06c\uae30\ub294 1 ~ 11. \ub300\ubd80\ubd84 1\uba85, \uadf8 \ub2e4\uc74c\uc740 2~4\uba85\n- Figure 2, 3: \n  - \uac00\uc871\uc774 4\uba85\uc778 \uacbd\uc6b0 \uc0dd\uc874 \ud655\ub960\uc774 \uac00\uc7a5 \ub192\uc74c\n  - \uac00\uc871 \uc218\uac00 \ub9ce\uc544\uc9c8 \uc218\ub85d \uc0dd\uc874 \ud655\ub960\uc774 \ub0ae\uc544\uc9d0\n  - \uac00\uc871 \uc218\uac00 \ub108\ubb34 \uc791\uac70\ub098, \ub108\ubb34 \ucee4\ub3c4 \uc0dd\uc874 \ud655\ub960\uc774 \ub0ae\uc74c\n  - \uac00\uc871 \uc218 3~4\uba85\uc774 \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc74c","ea8a5446":"- Age\uc758 \ud3c9\uade0\uc744 \uc774\uc6a9\ud558\uc5ec Null \uac12 \ucc44\uc6b0\uae30\n  - Mr\uc778 \uacbd\uc6b0, Age \uac12\uc744 33\uc73c\ub85c \uce58\ud658\n- loc + boolean + column\uc744 \uc0ac\uc6a9\ud558\uc5ec \uac12\uc744 \uce58\ud658\ud558\ub294 \ubc29\ubc95\n- [\ucc38\uace0] \ub2e4\ub978 \ubc29\ubc95 \ucc38\uace0:\n  - https:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling","1485e27b":"## 2. KISTI \uce90\uae00 \ub300\ud68c \ucc38\uac00 \ub4f1\ub85d\n- private \ub300\ud68c(in class)\ub85c \uc544\ub798 \ub9c1\ud06c\ub97c \uc774\uc6a9\ud558\uc5ec \ub300\ud68c \ucc38\uac00 (Rules \uc2b9\uc778)\n    - https:\/\/www.kaggle.com\/t\/bbe57dd38841427bacc18a5cf3683b59\n    \n\n","bee21bcf":"### Fare (\ud0d1\uc2b9 \uc694\uae08)\n- continuous feature\n","246443c2":"- Sex, Pclass\uc640 Survived\uc5d0 \uc0c1\uad00 \uad00\uacc4\uac00 \uc5b4\ub290 \uc815\ub3c4 \uc788\uc74c\n- Pclass\uc640 Age_cat, Age_cat\uacfc Initial \uc740 \uc0c1\uad00 \uad00\uacc4 \uc788\uc74c\n- \uc11c\ub85c \uac15\ud55c \uc0c1\uad00 \uad00\uacc4\ub97c \uac00\uc9c0\ub294 feature\ub4e4\uc740 \uc5c6\uc74c\n  - \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0ac \ub54c, \ubd88\ud544\uc694\ud55c feature\ub294 \uc5c6\uc74c\uc744 \uc758\ubbf8 (redundant, superfluous feature \ub4e4)\n  ","c1ee5ee6":"### Initial \uc744 One-hot encoding\uc73c\ub85c \ub9cc\ub4e4\uae30","83617217":"## 4. \ubaa8\ub378 \ub9cc\ub4e4\uae30\n- sklearn \uc0ac\uc6a9\n  - feature engineering, preprocessing, \uc9c0\ub3c4 \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998, \ube44\uc9c0\ub3c4 \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998, \ubaa8\ub378 \ud3c9\uac00, \ud30c\uc774\ud504 \ub77c\uc778 \ub4f1 \uad6c\ud604\n- titanic \ubb38\uc81c\n  - target class : Survived\n    - 0, 1 \ub85c \uc774\ub8e8\uc5b4\uc9c4 binary classification \ubb38\uc81c\n  - train set\uc758 Survived \ud56d\ubaa9\uc744 \uc81c\uc678\ud55c \uc785\ub825\uc744 \uac00\uc9c0\uace0, \ubaa8\ub378\uc744 \ucd5c\uc801\ud654\uc2dc\ucf1c\uc11c \uac01 \uc0d8\ud50c(\ud0d1\uc2b9\uac1d)\uc758 \uc0dd\uc874 \uc720\ubb34\ub97c \ud310\ub2e8\ud558\ub294 \ubaa8\ub378 \ub9cc\ub4e4\uae30\n  - \ubaa8\ub378\uc774 \ud559\uc2b5\ud558\uc9c0 \uc54a\uc740 test set\uc744 \uc785\ub825\uc73c\ub85c \uc8fc\uc5b4\uc11c test set\uc758 \uac01 \uc0d8\ud50c(\ud0d1\uc2b9\uac1d)\uc758 \uc0dd\uc874 \uc720\ubb34 \uc608\uce21","7c191d39":"### Cabin\n- NaN \uc774 \uc57d 80%\n- \uc0dd\uc874\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce60 \uc911\uc694\ud55c \uc815\ubcf4\ub97c \uc5bb\uc5b4\ub0b4\uae30\ub294 \uc27d\uc9c0 \uc54a\uc74c\n- \ubaa8\ub378\uc5d0 \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294 \uac83\uc774 \uc88b\uc74c","dddb3097":"### Age \ubcc0\ud658\n- continus \uac12\uc744 categorical \uac12\uc73c\ub85c \ubcc0\ud658\n  - \uc815\ubcf4 \uc190\uc2e4\uc774 \uc788\uc744 \uc218 \uc788\uc73c\ubbc0\ub85c \uc8fc\uc758\uac00 \ud544\uc694\n- Age\ub97c \uba87 \uac1c\uc758 group\uc73c\ub85c \ub098\ub204\uc5b4\uc11c category\ud654 \uc2dc\ud0b4\n- dataframe\uc758 loc \ub610\ub294 apply() \uc0ac\uc6a9","bbc96f0c":"- Class\uac00 \ub192\uc744 \uc218\ub85d \ub098\uc774 \ub9ce\uc740 \uc0ac\ub78c\uc758 \ube44\uc911\uc774 \ucee4\uc9d0","33c739eb":"- Age(\uc57d 20%), Cabin(\uc57d 80%), Embarked(\uc57d 0.2%)\uc758 null data \uc874\uc7ac \ud655\uc778","7a7b94f6":"### 4. titanic_4th_baseline.ipynb colab \uc2e4\ud589\n- \uad6c\uae00 \ub4dc\ub77c\uc774\ube0c \ub9c8\uc6b4\ud2b8\n- \uc791\uc5c5 \ub514\ub809\ud1a0\ub9ac \uc124\uc815","32dce775":"#### Pearson Correlation\n- feature \ub4e4 \uac04\uc758 \uc0c1\uad00 \uad00\uacc4 \uc54c\uc544\ubcf4\uae30\n- (-1, 1) \uc0ac\uc774\uc758 \uac12\n  - -1\ub85c \uac08\uc218\ub85d \uc74c\uc758 \uc0c1\uad00 \uad00\uacc4\n  - 1\ub85c \uac08\uc218\ub85d \uc591\uc758 \uc0c1\uad00 \uad00\uacc4\n  - 0 : \uc0c1\uad00 \uad00\uacc4\uac00 \uc5c6\uc74c\n- matrix \ud615\ud0dc\uc758 heatmap plot \uc0ac\uc6a9","d598f10a":"### Pclass \uc640 Sex\n- Pclass\uc640 Sex \ub450 feature\uc5d0 \ub300\ud55c \uc0dd\uc874 \ud655\ub960 \ud655\uc778","cab4f7f8":"- [\ucc3e\uc544\ubcf4\uae30] error bar","f650a1ba":"##### MSNO \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uc5ec null data \ud655\uc778","0d4e2906":"## 3. Feature Engineering\n- dataset\uc5d0 \uc874\uc7ac\ud558\ub294 null data \ucc44\uc6b0\uae30\n- null data\ub97c \ud3ec\ud568\ud558\ub294 feature\uc758 statistics\ub97c \ucc38\uace0\ud558\uac70\ub098, \ub2e4\ub978 \uc544\uc774\ub514\uc5b4 \ud544\uc694\n- \ubaa8\ub378\uc758 \uc131\ub2a5\uc5d0 \uc601\ud5a5\uc744 \uc8fc\ub294 \uc911\uc694\ud55c \uc791\uc5c5\n- train \ubfd0\ub9cc \uc544\ub2c8\ub77c test dataset\uc5d0\ub3c4 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9\ud574\uc57c \ud568","3ce30f48":"### Pclass (\ud074\ub798\uc2a4)\n- ordinal, \uc11c\uc218\ud615 \ub370\uc774\ud130, \uce74\ud14c\uace0\ub9ac\ud615, \uc21c\uc11c \uc788\uc74c\n- pclass\uc5d0 \ub530\ub978 \uc0dd\uc874\ub960 \ucc28\uc774 \uc0b4\ud3b4\ubcf4\uae30\n  - pandas\uc758 group by \uc0ac\uc6a9","22ddb8d8":"### \uce90\uae00\uc5d0 \uc81c\ucd9c\ud558\uae30\n- 1) \uba85\ub839\uc5b4\ub85c \uc81c\ucd9c\n    - Commit\n    - OUTPUT\n    - Submit to Competition\n- 2) \uc6f9 \ud398\uc774\uc9c0\uc5d0\uc11c \uc81c\ucd9c\n    - kaggle.com \uc811\uc18d\n    - Submit Predictions \ud074\ub9ad\ud558\uc5ec \uc5c5\ub85c\ub4dc\n- 3) \uce90\uae00 \uc0ac\uc774\ud2b8 \ub178\ud2b8\ubd81\uc73c\ub85c \uc2e4\ud589\ud558\ub294 \uacbd\uc6b0 (Save Version)\uc744 \ud1b5\ud574 \uc81c\ucd9c\ud560 \uc218 \uc788\uc74c\n    - Save Version => Save & Run all(commit)\n\n\n","31affe5d":"- Fare\uac00 \uac00\uc7a5 \ud070 \uc601\ud5a5\ub825\uc744 \uac00\uc9d0. \uadf8 \ub4a4\uc5d0 Initial_2, Age_cat, Pclass \uc21c\uc73c\ub85c \uc911\uc694\ub3c4\ub97c \uac00\uc9d0\n- Fare\uac00 \uc911\uc694\ud55c feature\uc77c \uc218 \uc788\ub2e4\uace0 \ud310\ub2e8\uc744 \ub0b4\ub9b4 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uacb0\uad6d \ubaa8\ub378\uc5d0 \uadc0\uc18d\ub418\ub294 \ud558\ub098\uc758 \uacb0\ub860\uc784. \ud1b5\uacc4\uc801\uc73c\ub85c \ub354 \uc0b4\ud3b4\ubd10\uc57c \ud568\n- \uc880 \ub354 \uc815\ud655\ub3c4 \ub192\uc740 \ubaa8\ub378\uc744 \uc5bb\uae30 \uc704\ud574 feature selection\uc744 \ud560 \uc218\ub3c4 \uc788\uace0, \uc880 \ub354 \ube60\ub978 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c\ub294 feature\ub97c \uc81c\uac00\ud560 \uc218\ub3c4 \uc788\uc74c","496926b8":"### \uc131\ubcc4(Sex)\n- \uc131\ubcc4\ub85c \uc0dd\uc874\ub960 \ud655\uc778\n- pandas groupby\uc640 seaborn countplot \uc0ac\uc6a9\n","78007b3c":"- \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8 \ubaa8\ub378\n  - \uacb0\uc815 \ud2b8\ub9ac \uae30\ubc18 \ubaa8\ub378\n  - \uc5ec\ub7ec \uacb0\uc815 \ud2b8\ub9ac\ub4e4\uc744 \uc559\uc0c1\ube14\ud55c \ubaa8\ub378\n  - \ud30c\ub77c\ubbf8\ud130\n    - n_estimators, max_features, max_depth, min_samples_split, min_samples_leaf\n  - \ud30c\ub77c\ubbf8\ud130 \ud29c\ub2dd\uc5d0 \ub530\ub77c \ubaa8\ub378 \uc131\ub2a5\uc774 \ub2ec\ub77c\uc9d0\n  ","066d3b1d":"- \ub098\uc774\uac00 \uc5b4\ub9b4 \uc218\ub85d \uc0dd\uc874\ub960\uc774 \ub192\uc74c","aa938bb1":"## 2. Exploratory Data Analysis (EDA, \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d)","d5aeca8d":"- \ub098\uc774\uac00 \uc5b4\ub9b4 \uc218\ub85d \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc74c\n- Age\ub294 \uc911\uc694\ud55c feature \uc784\uc744 \uc54c \uc218 \uc788\uc74c","23fb0f9a":"## One-hot encoding\n- \uce74\ud14c\uace0\ub9ac \ub370\uc774\ud130\ub97c (0, 1)\ub85c \uc774\ub8e8\uc5b4\uc9c4 N\ucc28\uc6d0 \ubca1\ud130\ub85c \ub098\ud0c0\ub0b4\ub294 \uac83\n- pandas.get_dummies() \uc0ac\uc6a9","28f52a69":"- \uc0dd\uc874\ub960\uc774 \ube44\uc2b7","1dbd7a0e":"- log\ub97c \ucde8\ud558\ub2c8, \ube44\ub300\uce6d\uc131\uc774 \ub9ce\uc774 \uc0ac\ub77c\uc9d0\n- feature engineering \uc801\uc6a9\n- \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0a4\uace0, \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud574 feature \ub4e4\uc5d0 \uc5ec\ub7ec \uc870\uc791\uc744 \uac00\ud558\uac70\ub098, \uc0c8\ub85c\uc6b4 feature\ub97c \ucd94\uac00\ud558\ub294 \uc791\uc5c5","065dbc7e":"### Target Label \ud655\uc778\n- target label \uc774 \uc5b4\ub5a4 \ubd84\ud3ec\ub97c \uac00\uc9c0\uace0 \uc788\ub294\uc9c0 \ud655\uc778\n- binary classification \uac19\uc740 \uacbd\uc6b0, 1\uacfc 0\uc758 \ubd84\ud3ec\uc5d0 \ub530\ub77c \ubaa8\ub378 \ud3c9\uac00 \ubc29\ubc95\uc774 \ub2ec\ub77c\uc9c8 \uc218 \uc788\uc74c","ac6c798e":"- distribution\uc774 \ube44\ub300\uce6d (high skewness)\n  - \uc774\ub300\ub85c \ubaa8\ub378\uc5d0 \ub123\uc5b4 \uc904 \uacbd\uc6b0, \ubaa8\ub378\uc774 \uc798\ubabb \ud559\uc2b5\ud560 \uc218 \uc788\uc74c\n  - outlier\uc5d0 \ubbfc\uac10\ud558\uac8c \ubc18\uc751\ud55c\ub2e4\uba74 \uc608\uce21\uc2dc\uc5d0 \uc88b\uc9c0 \ubabb\ud55c \uacb0\uacfc\ub97c \ubd80\ub984\n- outlier\uc758 \uc601\ud5a5\uc744 \uc904\uc774\uae30 \uc704\ud574 Fare\uc5d0 log \uc801\uc6a9\n- pandas DataFrame\uc758 \ud2b9\uc815 \uceec\ub7fc\uc5d0 \uacf5\ud1b5\ub41c \uc791\uc5c5(\ud568\uc218)\uc744 \uc801\uc6a9\ud558\ub294 \uacbd\uc6b0,  map \ub610\ub294 apply \uc0ac\uc6a9\n","39eeb0af":"#### \uc140\ub9c8\ub2e4 \uc790\ub3d9\uc73c\ub85c \uc18c\uc694 \uc2dc\uac04 \ucd9c\ub825","1ebde74f":"### Embarked \ubcc0\uacbd\n- S, C, Q\ub85c \uad6c\uc131","3b706f7b":"#### test set\uc5d0 \ub300\ud558\uc5ec \uc608\uce21\ud558\uace0, \uacb0\uacfc\ub97c csv\uc5d0 \uc800\uc7a5","40f7402b":"### Initial \ubcc0\uacbd\n- Mr, Mrs, Miss, Master, Other \ub85c \uad6c\uc131\n- \uce74\ud14c\uace0\ub9ac\ub85c \ud45c\ud604\ub418\uc5b4\uc838 \uc788\ub294 \ub370\uc774\ud130\ub97c \ucef4\ud4e8\ud130\uac00 \uc778\uc2dd\ud560 \uc218 \uc788\ub3c4\ub85d \uc218\uce58\ud654\n- map() \uc0ac\uc6a9","b8243258":"- female(\uc5ec\uc131)\uc774 \uc0dd\uc874\ud560 \ud655\ub960\uc774 \ub192\uc74c","095fbaa4":"### Embarked\ub97c one-hot encoding\n\n","6be21f23":"- [\ucc38\uace0] \uba38\uc2e0\ub7ec\ub2dd \uc54c\uace0\ub9ac\uc998\n  - http:\/\/scikit-learn.org\/stable\/supervised_learning.html#supervised-learning","a010e76a":"- \ubaa8\ub4e0 \ud074\ub798\uc2a4\uc5d0\uc11c female\uc774 \uc0dd\uc874\ud560 \ud655\ub960\uc774 male \ubcf4\ub2e4 \ub192\uc74c\n- \ub0a8, \uc5ec \uc0c1\uad00\uc5c6\uc774 \ud074\ub798\uc2a4\uac00 \ub192\uc744 \uc218\ub85d \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc74c","e425c259":"### Feature Importance\n- \ud559\uc2b5\ub41c \ubaa8\ub378\uc740 feature importance\ub97c \uac00\uc9d0\n- \ub9cc\ub4e0 \ubaa8\ub378\uc774 \uc5b4\ub5a4 feature\uc5d0 \uc601\ud5a5\uc744 \ub9ce\uc774 \ubc1b\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\uc74c\n- pandas series \uc0ac\uc6a9","e8826d16":"## Drop columns \n- \ubd88\ud544\uc694\ud55c \uceec\ub7fc\ub4e4 \uc9c0\uc6b0\uae30\n","4b6abe0b":"- [\ucc38\uace0] matplotlib style\n  - https:\/\/tonysyu.github.io\/raw_content\/matplotlib-style-gallery\/gallery.html","46d33d15":"- [\ucc38\uace0]\n  - https:\/\/www.kaggle.com\/arthurtok\/introduction-to-ensembling-stacking-in-python, https:\/\/www.kaggle.com\/startupsci\/titanic-data-science-solutions, https:\/\/www.kaggle.com\/ash316\/eda-to-prediction-dietanic, https:\/\/www.kaggle.com\/yassineghouzam\/titanic-top-4-with-ensemble-modeling ","4198a39a":"- Figure 1: S\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc740 \uc0ac\ub78c\uc774 \ud0d1\uc2b9\n- Figure 2: C\uc640 Q\ub294 \ub0a8\ub140 \ube44\uc728\uc774 \ube44\uc2b7, S\ub294 \ub0a8\uc790\uac00 \ub354 \ub9ce\uc74c\n- Figure 3: S\uac00 \uc0dd\uc874\ud655\ub960\uc774 \uac00\uc7a5 \ub0ae\uc74c\n- Figure 4: C\uac00 \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc74c. \ud074\ub798\uc2a4\uac00 \ub192\uc740 \uc0ac\ub78c\uc774 \ub9ce\uc774 \ud0c4 \uc774\uc720. S\ub294 3rd class\uac00 \ub9ce\uc544\uc11c \uc0dd\uc874 \ud655\ub960\uc774 \ub0ae\uc74c","60849e7c":"## BASELINE \ud14c\uc2a4\ud2b8\n### 1) ALL_1_submission.csv \ud30c\uc77c \ub9cc\ub4e4\uae30 & Rank \ud655\uc778\n### 2) ALL_0.submission.csv \ud30c\uc77c \ub9cc\ub4e4\uae30 & Rank \ud655\uc778\n### 3) baseline_submission.csv \ud30c\uc77c \ub9cc\ub4e4\uae30 & Rank \ud655\uc778\n","f4e357f3":"### \uc791\uc5c5 \ub0b4\uc6a9\n- 1) \ub370\uc774\ud130\uc14b \ud655\uc778\n  - null data \uc640 \uac19\uc740 \ub370\uc774\ud130\ub97c \ud655\uc778 \ubc0f \uc218\uc815\n- 2) \ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d(Exploratory Data Analysis)\n  - \uc5ec\ub7ec feature\ub4e4\uc744 \uac1c\ubcc4\uc801\uc73c\ub85c \ubd84\uc11d\n  - feature\ub4e4 \uac04\uc758 \uc0c1\uad00 \uad00\uacc4 \ud655\uc778\n  - \uc5ec\ub7ec \uc2dc\uac01\ud654 \ub3c4\uad6c\ub4e4\uc744 \uc0ac\uc6a9\n- 3) Feature Engineering\n  - \ubaa8\ub378\uc744 \ub9cc\ub4e4\uae30 \uc804, \ubaa8\ub378 \uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud55c feature\ub4e4\uc744 engineering\n  - one-hot encoding, class\ub85c \ub098\ub204\uae30, text \ub370\uc774\ud130 \ucc98\ub9ac \ub4f1\n- 4) Model \ub9cc\ub4e4\uae30\n  - sklearn\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub378 \ub9cc\ub4e4\uae30\n  - tensorflow, pytorch \ub4f1 \ub525\ub7ec\ub2dd \ud504\ub808\uc784\uc6cc\ud06c \uc0ac\uc6a9\ub3c4 \uac00\ub2a5\n- 5) \ubaa8\ub378 \ud559\uc2b5 \ubc0f \uc608\uce21\n  - train set \uc744 \uac00\uc9c0\uace0 \ubaa8\ub378 \ud559\uc2b5\n  - test set\uc744 \uc0ac\uc6a9\ud558\uc5ec prediction\n- 6) \ubaa8\ub378 \ud3c9\uac00\n  - \ud559\uc2b5\ub41c \ubaa8\ub378\uc5d0 \ub300\ud55c \uc608\uce21 \uc131\ub2a5 \ud3c9\uac00","86a820b0":"### \uc900\ube44 - \ub370\uc774\ud130 \uc14b\uc744 train, valid, test set\uc73c\ub85c \ub098\ub204\uae30\n- \ubcf4\ud1b5\uc740 train, test set\uc73c\ub85c \ub098\ub204\uc9c0\ub9cc, valid set\uc73c\ub85c \ubaa8\ub378 \ud3c9\uac00\n  - train : \ud300 \ud6c8\ub828\n  - valid : \ud3c9\uac00\uc804\n  - test : \ub300\ud68c","ab5e7600":"- \uc5b4\ub9b0 \uc544\uc774(Master)\uc640 \uc5ec\uc131\uacfc \uad00\uacc4 \uc788\ub294 Miss, Mrs\uac00 \uc0dd\uc874\ub960\uc774 \ub192\uc74c","6d03f31c":"### Age\uc758 NULL \ucc98\ub9ac\n- Age\uc5d0\ub294 null \ub370\uc774\ud130\uac00 177\uac1c\ub098 \uc874\uc7ac\n- title\uacfc statistics\ub97c \uc0ac\uc6a9\ud558\uc5ec \ucc44\uc6cc\ubcf4\uae30\n  - Miss, Mrr, Mrs \uc0ac\uc6a9\n- pandas\uc758 str.extract()\ub97c \uc0ac\uc6a9\ud558\uc5ec title \ucd94\ucd9c (\uc815\uaddc\ud45c\ud604\uc2dd \uc0ac\uc6a9)","0d2dc368":"#### train, test \uc804\uccb4 \uc14b\uc744 \uc0ac\uc6a9\ud558\uc5ec Age\uc758 null \uac12 \ucc98\ub9ac\n- pandas\uc758 concat\uc744 \uc774\uc6a9\ud558\uc5ec dataframe\uc744 \ud569\uce68\n","a6c29b62":"### Sex \ubcc0\uacbd\n- male, female \ub85c \uad6c\uc131","d3c9544f":"- 38.4% \uac00 \uc0b4\uc544\ub0a8\uc74c\n- target label \uc758 \ubd84\ud3ec\uac00 \uc5b4\ub290 \uc815\ub3c4 \uade0\uc77c(balanced)\ud568\n","9bfa7eab":"### Test Set\uc744 \uc0ac\uc6a9\ud558\uc5ec Prediction\n- \ubaa8\ub378\uc744 \ud559\uc2b5\ud558\uc9c0 \uc54a\uc558\ub358 \ud14c\uc2a4\ud2b8 \uc14b\uc73c\ub85c \uc0dd\uc874 \uc5ec\ubd80 \uc608\uce21\n- \uce90\uae00\uc5d0\uc11c \uc900 \ud30c\uc77c gender_submission.csv \uc744 \uc0ac\uc6a9\ud558\uc5ec \uc81c\ucd9c \uc900\ube44\n","8288798c":"# \uc81c4\ud68c KISTI \uce90\uae00 \ub300\ud68c\n- https:\/\/www.kaggle.com\/c\/kisti-kaggle-competition-4th\n- https:\/\/www.kaggle.com\/t\/bbe57dd38841427bacc18a5cf3683b59\n","253db26a":"### NULL \ub370\uc774\ud130 \uccb4\ud06c","9908f0bb":"- \ud074\ub798\uc2a4\uac00 \ub192\uc744 \uc218\ub85d(1st class) \uc0dd\uc874 \ud655\ub960\uc774 \ub192\uc74c\n  - P1(63%), P2(48%), P3(25%)\n- \uc0dd\uc874\uc5d0 Pclass\uac00 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce5c\ub2e4\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\uc74c\n  - \ubaa8\ub378\uc744 \ub9cc\ub4e4 \ub54c, Pclass feature\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc744 \uac83\uc774\ub77c \ud310\ub2e8\ud560 \uc218 \uc788\uc74c"}}