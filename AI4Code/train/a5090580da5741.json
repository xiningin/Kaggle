{"cell_type":{"8452a343":"code","5eaaa7a9":"code","acab4275":"code","34306f9f":"code","ec9c65a8":"code","4d8fcb22":"code","6c3bb3d9":"code","19820ebc":"code","e05f2a4a":"code","180f985a":"code","e9ece7dd":"code","a5567c37":"code","925556f8":"code","3b967000":"code","40bf4195":"code","1ca6f26c":"code","d3662c19":"code","a4231e06":"code","519b1dc0":"code","f28abc9b":"code","580b8115":"code","80feb8fb":"code","a1b7bc8e":"code","24ace932":"code","12558b73":"code","2f0e00bc":"code","6ff7fd47":"code","9fba87f7":"code","13749915":"code","34ed7eae":"code","ffc5f3d1":"code","29725df9":"code","84fb242a":"code","bd33e073":"code","8c137b25":"code","0cf9dd0a":"code","aba835cc":"code","7a807741":"code","8e7a0573":"code","41be349d":"code","3f49cb3a":"code","3f27dcdb":"code","226a8238":"code","6cf77b38":"markdown","1c4ddfa6":"markdown","50ceb05f":"markdown","eae26046":"markdown","1a282475":"markdown","c34ae13e":"markdown","d4cc53c4":"markdown","23853edc":"markdown","01a725c7":"markdown","60f53791":"markdown","dddfefdc":"markdown","705418b4":"markdown","285e5a96":"markdown","8d2b4ca9":"markdown","150ad793":"markdown","d5c18948":"markdown","0b7f127b":"markdown","3d5747c2":"markdown","a81636bb":"markdown","116c8ad0":"markdown","68dd1e01":"markdown","72897fae":"markdown","85d0a1c5":"markdown","bbaba70d":"markdown","9abf180c":"markdown","06e7c966":"markdown","298f3655":"markdown","32488caf":"markdown"},"source":{"8452a343":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","5eaaa7a9":"import matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split","acab4275":"df = pd.read_csv('\/kaggle\/input\/heart-disease-uci\/heart.csv')","34306f9f":"df.head()","ec9c65a8":"df.tail()","4d8fcb22":"df.target.value_counts()","6c3bb3d9":"sns.countplot(x=\"target\", data=df, palette=\"bwr\")\nplt.show()","19820ebc":"countNoDisease = len(df[df.target == 0])\ncountHaveDisease = len(df[df.target == 1])\nprint(\"Percentage of Patients Haven't Heart Disease: {:.2f}%\".format((countNoDisease \/ (len(df.target))*100)))\nprint(\"Percentage of Patients Have Heart Disease: {:.2f}%\".format((countHaveDisease \/ (len(df.target))*100)))","e05f2a4a":"sns.countplot(x='sex', data=df, palette=\"mako_r\")\nplt.xlabel(\"Sex (0 = female, 1= male)\")\nplt.show()","180f985a":"countFemale = len(df[df.sex == 0])\ncountMale = len(df[df.sex == 1])\nprint(\"Percentage of Female Patients: {:.2f}%\".format((countFemale \/ (len(df.sex))*100)))\nprint(\"Percentage of Male Patients: {:.2f}%\".format((countMale \/ (len(df.sex))*100)))","e9ece7dd":"df.groupby('target').mean()","a5567c37":"pd.crosstab(df.age,df.target).plot(kind=\"bar\",figsize=(20,6))\nplt.title('Heart Disease Frequency for Ages')\nplt.xlabel('Age')\nplt.ylabel('Frequency')\nplt.savefig('heartDiseaseAndAges.png')\nplt.show()","925556f8":"pd.crosstab(df.sex,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#1CA53B','#AA1111' ])\nplt.title('Heart Disease Frequency for Sex')\nplt.xlabel('Sex (0 = Female, 1 = Male)')\nplt.xticks(rotation=0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency')\nplt.show()","3b967000":"plt.scatter(x=df.age[df.target==1], y=df.thalach[(df.target==1)], c=\"red\")\nplt.scatter(x=df.age[df.target==0], y=df.thalach[(df.target==0)])\nplt.legend([\"Disease\", \"Not Disease\"])\nplt.xlabel(\"Age\")\nplt.ylabel(\"Maximum Heart Rate\")\nplt.show()","40bf4195":"pd.crosstab(df.slope,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#DAF7A6','#FF5733' ])\nplt.title('Heart Disease Frequency for Slope')\nplt.xlabel('The Slope of The Peak Exercise ST Segment ')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency')\nplt.show()","1ca6f26c":"pd.crosstab(df.fbs,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#FFC300','#581845' ])\nplt.title('Heart Disease Frequency According To FBS')\nplt.xlabel('FBS - (Fasting Blood Sugar > 120 mg\/dl) (1 = true; 0 = false)')\nplt.xticks(rotation = 0)\nplt.legend([\"Haven't Disease\", \"Have Disease\"])\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","d3662c19":"pd.crosstab(df.cp,df.target).plot(kind=\"bar\",figsize=(15,6),color=['#11A5AA','#AA1190' ])\nplt.title('Heart Disease Frequency According To Chest Pain Type')\nplt.xlabel('Chest Pain Type')\nplt.xticks(rotation = 0)\nplt.ylabel('Frequency of Disease or Not')\nplt.show()","a4231e06":"a = pd.get_dummies(df['cp'], prefix = \"cp\")\nb = pd.get_dummies(df['thal'], prefix = \"thal\")\nc = pd.get_dummies(df['slope'], prefix = \"slope\")","519b1dc0":"frames = [df, a, b, c]\ndf = pd.concat(frames, axis = 1)\ndf.head()","f28abc9b":"df = df.drop(columns = ['cp', 'thal', 'slope'])\ndf.head()","580b8115":"y = df.target.values\nx_data = df.drop(['target'], axis = 1)","80feb8fb":"# Normalize\nx = (x_data - np.min(x_data)) \/ (np.max(x_data) - np.min(x_data)).values","a1b7bc8e":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.2,random_state=0)","24ace932":"#transpose matrices\nx_train = x_train.T\ny_train = y_train.T\nx_test = x_test.T\ny_test = y_test.T","12558b73":"#initialize\ndef initialize(dimension):\n    \n    weight = np.full((dimension,1),0.01)\n    bias = 0.0\n    return weight,bias","2f0e00bc":"def sigmoid(z):\n    \n    y_head = 1\/(1+ np.exp(-z))\n    return y_head","6ff7fd47":"def forwardBackward(weight,bias,x_train,y_train):\n    # Forward\n    \n    y_head = sigmoid(np.dot(weight.T,x_train) + bias)\n    loss = -(y_train*np.log(y_head) + (1-y_train)*np.log(1-y_head))\n    cost = np.sum(loss) \/ x_train.shape[1]\n    \n    # Backward\n    derivative_weight = np.dot(x_train,((y_head-y_train).T))\/x_train.shape[1]\n    derivative_bias = np.sum(y_head-y_train)\/x_train.shape[1]\n    gradients = {\"Derivative Weight\" : derivative_weight, \"Derivative Bias\" : derivative_bias}\n    \n    return cost,gradients","9fba87f7":"def update(weight,bias,x_train,y_train,learningRate,iteration) :\n    costList = []\n    index = []\n    \n    #for each iteration, update weight and bias values\n    for i in range(iteration):\n        cost,gradients = forwardBackward(weight,bias,x_train,y_train)\n        weight = weight - learningRate * gradients[\"Derivative Weight\"]\n        bias = bias - learningRate * gradients[\"Derivative Bias\"]\n        \n        costList.append(cost)\n        index.append(i)\n\n    parameters = {\"weight\": weight,\"bias\": bias}\n    \n    print(\"iteration:\",iteration)\n    print(\"cost:\",cost)\n\n    plt.plot(index,costList)\n    plt.xlabel(\"Number of Iteration\")\n    plt.ylabel(\"Cost\")\n    plt.show()\n\n    return parameters, gradients","13749915":"def predict(weight,bias,x_test):\n    z = np.dot(weight.T,x_test) + bias\n    y_head = sigmoid(z)\n\n    y_prediction = np.zeros((1,x_test.shape[1]))\n    \n    for i in range(y_head.shape[1]):\n        if y_head[0,i] <= 0.5:\n            y_prediction[0,i] = 0\n        else:\n            y_prediction[0,i] = 1\n    return y_prediction","34ed7eae":"def logistic_regression(x_train,y_train,x_test,y_test,learningRate,iteration):\n    dimension = x_train.shape[0]\n    weight,bias = initialize(dimension)\n    \n    parameters, gradients = update(weight,bias,x_train,y_train,learningRate,iteration)\n\n    y_prediction = predict(parameters[\"weight\"],parameters[\"bias\"],x_test)\n    \n    print(\"Manuel Test Accuracy: {:.2f}%\".format((100 - np.mean(np.abs(y_prediction - y_test))*100)))","ffc5f3d1":"logistic_regression(x_train,y_train,x_test,y_test,1,100)","29725df9":"accuracies = {}\n\nlr = LogisticRegression()\nlr.fit(x_train.T,y_train.T)\nacc = lr.score(x_test.T,y_test.T)*100\n\naccuracies['Logistic Regression'] = acc\nprint(\"Test Accuracy {:.2f}%\".format(acc))","84fb242a":"# KNN Model\nfrom sklearn.neighbors import KNeighborsClassifier\nknn = KNeighborsClassifier(n_neighbors = 2)  # n_neighbors means k\nknn.fit(x_train.T, y_train.T)\nprediction = knn.predict(x_test.T)\n\nprint(\"{} KNN Score: {:.2f}%\".format(2, knn.score(x_test.T, y_test.T)*100))","bd33e073":"# try ro find best k value\nscoreList = []\nfor i in range(1,20):\n    knn2 = KNeighborsClassifier(n_neighbors = i)  # n_neighbors means k\n    knn2.fit(x_train.T, y_train.T)\n    scoreList.append(knn2.score(x_test.T, y_test.T))\n    \nplt.plot(range(1,20), scoreList)\nplt.xticks(np.arange(1,20,1))\nplt.xlabel(\"K value\")\nplt.ylabel(\"Score\")\nplt.show()\n\nacc = max(scoreList)*100\naccuracies['KNN'] = acc\nprint(\"Maximum KNN Score is {:.2f}%\".format(acc))","8c137b25":"from sklearn.svm import SVC","0cf9dd0a":"svm = SVC(random_state = 1)\nsvm.fit(x_train.T, y_train.T)\n\nacc = svm.score(x_test.T,y_test.T)*100\naccuracies['SVM'] = acc\nprint(\"Test Accuracy of SVM Algorithm: {:.2f}%\".format(acc))","aba835cc":"from sklearn.naive_bayes import GaussianNB\nnb = GaussianNB()\nnb.fit(x_train.T, y_train.T)\n\nacc = nb.score(x_test.T,y_test.T)*100\naccuracies['Naive Bayes'] = acc\nprint(\"Accuracy of Naive Bayes: {:.2f}%\".format(acc))","7a807741":"from sklearn.tree import DecisionTreeClassifier\ndtc = DecisionTreeClassifier()\ndtc.fit(x_train.T, y_train.T)\n\nacc = dtc.score(x_test.T, y_test.T)*100\naccuracies['Decision Tree'] = acc\nprint(\"Decision Tree Test Accuracy {:.2f}%\".format(acc))","8e7a0573":"# Random Forest Classification\nfrom sklearn.ensemble import RandomForestClassifier\nrf = RandomForestClassifier(n_estimators = 1000, random_state = 1)\nrf.fit(x_train.T, y_train.T)\n\nacc = rf.score(x_test.T,y_test.T)*100\naccuracies['Random Forest'] = acc\nprint(\"Random Forest Algorithm Accuracy Score : {:.2f}%\".format(acc))","41be349d":"colors = [\"purple\", \"green\", \"orange\", \"magenta\",\"#CFC60E\",\"#0FBBAE\"]\n\nsns.set_style(\"whitegrid\")\nplt.figure(figsize=(16,5))\nplt.yticks(np.arange(0,100,10))\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Algorithms\")\nsns.barplot(x=list(accuracies.keys()), y=list(accuracies.values()), palette=colors)\nplt.show()","3f49cb3a":"# Predicted values\ny_head_lr = lr.predict(x_test.T)\nknn3 = KNeighborsClassifier(n_neighbors = 3)\nknn3.fit(x_train.T, y_train.T)\ny_head_knn = knn3.predict(x_test.T)\ny_head_svm = svm.predict(x_test.T)\ny_head_nb = nb.predict(x_test.T)\ny_head_dtc = dtc.predict(x_test.T)\ny_head_rf = rf.predict(x_test.T)","3f27dcdb":"from sklearn.metrics import confusion_matrix\n\ncm_lr = confusion_matrix(y_test,y_head_lr)\ncm_knn = confusion_matrix(y_test,y_head_knn)\ncm_svm = confusion_matrix(y_test,y_head_svm)\ncm_nb = confusion_matrix(y_test,y_head_nb)\ncm_dtc = confusion_matrix(y_test,y_head_dtc)\ncm_rf = confusion_matrix(y_test,y_head_rf)","226a8238":"plt.figure(figsize=(24,12))\n\nplt.suptitle(\"Confusion Matrixes\",fontsize=24)\nplt.subplots_adjust(wspace = 0.4, hspace= 0.4)\n\nplt.subplot(2,3,1)\nplt.title(\"Logistic Regression Confusion Matrix\")\nsns.heatmap(cm_lr,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,2)\nplt.title(\"K Nearest Neighbors Confusion Matrix\")\nsns.heatmap(cm_knn,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,3)\nplt.title(\"Support Vector Machine Confusion Matrix\")\nsns.heatmap(cm_svm,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,4)\nplt.title(\"Naive Bayes Confusion Matrix\")\nsns.heatmap(cm_nb,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,5)\nplt.title(\"Decision Tree Classifier Confusion Matrix\")\nsns.heatmap(cm_dtc,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.subplot(2,3,6)\nplt.title(\"Random Forest Confusion Matrix\")\nsns.heatmap(cm_rf,annot=True,cmap=\"Blues\",fmt=\"d\",cbar=False, annot_kws={\"size\": 24})\n\nplt.show()","6cf77b38":"## <font color=\"orange\">Test Accuracy of SVM Algorithm is <font color=\"red\"> 86.89%<\/font><\/font>","1c4ddfa6":"We will split our data. 80% of our data will be train data and 20% of it will be test data.","50ceb05f":"By the way in formulas; <br>\n* h0(x^i)= y_head\n* y^i = y_train\n* x^i = x_train","eae26046":"**Creating Dummy Variables**","1a282475":"### Sigmoid Function\n<br>\n<img src=\"https:\/\/qph.fs.quoracdn.net\/main-qimg-05edc1873d0103e36064862a45566dba\" width=\"500px\"\/>","c34ae13e":"Let's say weight = 0.01 and bias = 0.0","d4cc53c4":"## K-Nearest Neighbour (KNN) Classification\n<br>\nLet's see what will be score if we use KNN algorithm.","23853edc":"## <font color=\"#0FBBAE\">Test Accuracy of Random Forest: <font color=\"red\">88.52%<\/font><\/font>","01a725c7":"Since 'cp', 'thal' and 'slope' are categorical variables we'll turn them into dummy variables.","60f53791":"### Cost Function\n<br>\n<img src=\"https:\/\/i.stack.imgur.com\/XbU4S.png\" width=\"500px\"\/>","dddfefdc":"## Random Forest Classification","705418b4":"## <font color=\"blue\">Manuel Test Accuracy is <font color=\"red\">**86.89%**<\/font><\/font><br>\nLet's find out sklearn's score.","285e5a96":"## <font color=\"#CFC60E\">Test Accuracy of Decision Tree Algorithm: <font color=\"red\">78.69%<\/font><\/font>","8d2b4ca9":"## Comparing Models","150ad793":"### Forward and Backward Propagation\n<br>\n<img src=\"https:\/\/image.slidesharecdn.com\/gradientdescentbackpropandautomaticdifferentiation-160829164205\/95\/gradient-descent-back-propagation-and-auto-differentiation-advanced-spark-and-tensorflow-meetup-08042016-62-638.jpg?cb=1472489358\" width=\"500px\"\/>","d5c18948":"**KNN Algorithm**\n<br>\n<img src=\"http:\/\/res.cloudinary.com\/dyd911kmh\/image\/upload\/f_auto,q_auto:best\/v1531424125\/KNN_final_a1mrv9.png\"\/>","0b7f127b":"Our models work fine but best of them are KNN and Random Forest with 88.52% of accuracy. Let's look their confusion matrixes.","3d5747c2":"## Confusion Matrix","a81636bb":"### Gradient Descent\n<br>\n<img src=\"https:\/\/i.stack.imgur.com\/pYVzl.png\" width=\"500px\"\/>","116c8ad0":"## Naive Bayes Algorithm","68dd1e01":"## Creating Model for Logistic Regression\n<br>\nWe can use sklearn library or we can write functions ourselves. Let's them both. Firstly we will write our functions after that we'll use sklearn library to calculate score.","72897fae":"### Sklearn Logistic Regression","85d0a1c5":"**Data Exploration**","bbaba70d":"**Support Vector Machine Algorithm**\n<br>\n<img src=\"https:\/\/cdn-images-1.medium.com\/max\/1600\/1*TudH6YvvH7-h5ZyF2dJV2w.jpeg\" width=\"500px\"\/><br>\n<img src=\"https:\/\/aitrends.com\/wp-content\/uploads\/2018\/01\/1-19SVM-2.jpg\" width=\"500px\"\/>\n","9abf180c":"**Naive Bayes Algorithm**\n<br>\n<img src=\"https:\/\/s3.ap-south-1.amazonaws.com\/techleer\/204.png\" width=\"500px\"\/>","06e7c966":"### Normalize Data\n<br>\n<br>\n<img src=\"https:\/\/beyondbacktesting.files.wordpress.com\/2017\/07\/normalization.png?w=863\" width=\"400px\"\/>","298f3655":"As you can see above if we define k as 3-7-8 we will reach maximum score. <br>\n## <font color=\"green\">KNN Model's Accuracy is <font color=\"red\">88.52%<\/font><\/font>","32488caf":"## Decision Tree Algorithm"}}