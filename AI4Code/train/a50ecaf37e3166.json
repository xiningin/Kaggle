{"cell_type":{"7aaefddb":"code","7a5a166f":"code","6a58374f":"code","741831aa":"code","9c02ee35":"code","a0f934f7":"code","de09cf9c":"code","ea493fa2":"code","4ee85a3a":"code","30e6eda3":"code","aad15bcb":"code","69e08180":"code","d275c6e0":"code","4f4744ec":"code","9b496022":"code","59bbe976":"code","6efcd620":"code","66cee595":"code","9f7d3923":"code","78d5e701":"code","eef3ffa8":"code","0dd91a11":"code","2c9b443e":"code","02ee669b":"code","31879155":"code","91d28e8a":"code","dff601cc":"code","1bbb04e2":"code","c79951d5":"code","78f34dec":"code","544de0f7":"code","4f62c247":"code","392c3065":"code","4206f9c7":"code","21cb1a45":"code","e61ac609":"code","4dbae2ce":"code","5167d9f9":"code","fb987ee2":"code","2d0417ee":"code","7226b406":"code","709dd324":"code","60993557":"markdown","f74a7935":"markdown","1934138d":"markdown","0a88d40e":"markdown"},"source":{"7aaefddb":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt","7a5a166f":"train=pd.read_csv(\"..\/input\/titanic\/train.csv\")\ntest=pd.read_csv(\"..\/input\/titanic\/test.csv\")\np_id=test['PassengerId']","6a58374f":"train.head()","741831aa":"train.info()","9c02ee35":"test.info()","a0f934f7":"test[\"Fare\"].fillna(test['Fare'].median(),inplace=True)","de09cf9c":"train.describe()","ea493fa2":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","4ee85a3a":"train.drop('Cabin',axis=1,inplace=True)\ntest.drop('Cabin',axis=1,inplace=True)","30e6eda3":"plt.figure(figsize=(12, 7))\nsns.boxplot(x='Pclass',y='Age',data=train,palette='winter')","aad15bcb":"def impute_age_tr(cols):\n    age_fill=train[['Age','Pclass']].groupby('Pclass').mean()\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        return int(age_fill['Age'][Pclass])\n    else:\n        return Age\ndef impute_age_te(cols):\n    age_fill=test[['Age','Pclass']].groupby('Pclass').mean()\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        return int(age_fill['Age'][Pclass])\n    else:\n        return Age","69e08180":"train['Age'] = train[['Age','Pclass']].apply(impute_age_tr,axis=1)\ntest['Age'] = test[['Age','Pclass']].apply(impute_age_te,axis=1)","d275c6e0":"train['Embarked'].fillna(\"S\",inplace=True)\n\ntest['Embarked'].fillna(\"S\",inplace=True)","4f4744ec":"sns.heatmap(train.isnull(),yticklabels=False,cbar=False,cmap='viridis')","9b496022":"def sexx(Sex):\n    if Sex==\"male\":\n        return 0\n    else:\n        return 1\n    \ndef age_new(age):\n    if age<=16:\n        return 0\n    elif age>16 and age<=32:\n        return 1\n    elif age>32 and age<=48:\n        return 2\n    elif age>48 and age<=64:\n        return 3\n    else:\n        return 4\n    \ndef fare_new(fare):\n    if fare<=7.91:\n        return 0\n    elif fare>7.91 and fare<=14.454:\n        return 1\n    elif fare>14.454 and fare<=31:\n        return 2\n    elif fare>31:\n        return 3","59bbe976":"train['Sex'] = train['Sex'].apply(sexx)\ntrain['Age'] = train['Age'].apply(age_new)\ntrain['Fare'] = train['Fare'].apply(fare_new)\n\ntest['Sex'] = test['Sex'].apply(sexx)\ntest['Age'] = test['Age'].apply(age_new)\ntest['Fare'] = test['Fare'].apply(fare_new)","6efcd620":"train.drop(['PassengerId','Name','Embarked','Ticket'],axis=1,inplace=True)\ntest.drop(['PassengerId','Name','Embarked','Ticket'],axis=1,inplace=True)","66cee595":"train.head()","9f7d3923":"corrmat=train.corr()\nplt.figure(figsize=(15, 10))\nsns.heatmap(train[corrmat.index].corr(),annot=True,cmap=\"RdYlGn\")","78d5e701":"sns.distplot(train['Age'])","eef3ffa8":"sns.distplot(train['Fare'])","0dd91a11":"y=train['Survived'].values","2c9b443e":"train.drop('Survived',axis=1,inplace=True)","02ee669b":"X=train.values\nX_test=test.values","31879155":"from sklearn.ensemble import RandomForestClassifier","91d28e8a":"model = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)\nmodel.fit(X, y)\npredictions = model.predict(X_test)","dff601cc":"pred={\n    'PassengerId':p_id,\n    'Survived':predictions\n}","1bbb04e2":"df=pd.DataFrame(pred)","c79951d5":"df.to_csv('.\/rf_pred.csv', index=False)","78f34dec":"from sklearn.linear_model import LogisticRegression\n\nlogmodel = LogisticRegression()\nlogmodel.fit(X,y)\npredictions_l = logmodel.predict(X_test)\n\npred_l={\n    'PassengerId':p_id,\n    'Survived':predictions_l\n}\n\ndf_l=pd.DataFrame(pred_l)\n\ndf_l.to_csv('log_pred.csv', index=False)","544de0f7":"## Hyperparameter optimization using RandomizedSearchCV\nfrom sklearn.model_selection import RandomizedSearchCV, GridSearchCV\nimport xgboost","4f62c247":"## Hyper Parameter Optimization\n\nparams={\n \"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n \"min_child_weight\" : [ 1, 3, 5, 7 ],\n \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ]\n    \n}","392c3065":"def timer(start_time=None):\n    if not start_time:\n        start_time = datetime.now()\n        return start_time\n    elif start_time:\n        thour, temp_sec = divmod((datetime.now() - start_time).total_seconds(), 3600)\n        tmin, tsec = divmod(temp_sec, 60)\n        print('\\n Time taken: %i hours %i minutes and %s seconds.' % (thour, tmin, round(tsec, 2)))","4206f9c7":"classifier=xgboost.XGBClassifier()","21cb1a45":"random_search=RandomizedSearchCV(classifier,param_distributions=params,n_iter=5,scoring='roc_auc',n_jobs=-1,cv=5,verbose=3)","e61ac609":"from datetime import datetime\n# Here we go\nstart_time = timer(None) # timing starts from this point for \"start_time\" variable\nrandom_search.fit(X,y)\ntimer(start_time) # timing ends here for \"start_time\" variable","4dbae2ce":"random_search.best_estimator_","5167d9f9":"random_search.best_params_","fb987ee2":"classifier=xgboost.XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n              colsample_bynode=1, colsample_bytree=0.4, gamma=0.0, gpu_id=-1,\n              importance_type='gain', interaction_constraints='',\n              learning_rate=0.3, max_delta_step=0, max_depth=5,\n              min_child_weight=5, monotone_constraints='()',\n              n_estimators=100, n_jobs=0, num_parallel_tree=1,\n              objective='binary:logistic', random_state=0, reg_alpha=0,\n              reg_lambda=1, scale_pos_weight=1, subsample=1,\n              tree_method='exact', validate_parameters=1, verbosity=None)","2d0417ee":"classifier.fit(X,y)","7226b406":"classifier.score(X,y)","709dd324":"predictions_XG = classifier.predict(X_test)\n\npred_xg={\n    'PassengerId':p_id,\n    'Survived':predictions_XG\n}\n\ndf_xg=pd.DataFrame(pred_xg)\n\ndf_xg.to_csv('xg_pred.csv', index=False)","60993557":"Now lets check the heatmap again","f74a7935":"# XGBOOST","1934138d":"Great! Our data is ready for our model!\n\n# Building a Random Forest model","0a88d40e":"# Logistic Regression"}}