{"cell_type":{"1e92a8d3":"code","f170c126":"code","f6ba7c7d":"code","ceab52be":"code","a4e22c80":"code","0098cf11":"code","fd7e22e8":"code","9fe5e3d4":"code","614528e3":"code","f4b4f3fb":"code","77188386":"code","6e11a83f":"code","e5a93899":"code","74d7f24a":"code","9ea6cbdd":"code","d1ad0d8a":"code","2efd0fc1":"code","f885b2ba":"code","d59cbbbf":"code","c4c28f35":"code","301f2fea":"code","a1bf40c0":"code","b323062d":"code","9d59384b":"code","2153e2f1":"code","2c401399":"code","ac90de32":"code","c764fa4c":"markdown","62351fdb":"markdown","48be2700":"markdown","24fd0432":"markdown","574d8890":"markdown","53453668":"markdown","01823e8e":"markdown","73ced4a5":"markdown","bf78a5f7":"markdown","b4575c04":"markdown","49331ed9":"markdown","f6379c61":"markdown","8eecd401":"markdown","2afc8176":"markdown","ad6a2b19":"markdown","910cfc20":"markdown","ad436a1e":"markdown","801c0ae4":"markdown","75491c54":"markdown","6898dca8":"markdown","cb5e7a42":"markdown","38c59f27":"markdown","d101504d":"markdown","c38216e6":"markdown","cdc834f0":"markdown","bb26a636":"markdown","d8cb1596":"markdown","ac465bbd":"markdown","f5f1016f":"markdown","437472ea":"markdown","e76a8fff":"markdown","2c3b7218":"markdown","77dacc76":"markdown","9e25cf6c":"markdown","e52d53c0":"markdown"},"source":{"1e92a8d3":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport plotly.figure_factory as ff\nimport seaborn as sns\nimport geopandas as gpd\nfrom wordcloud import WordCloud\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n        \nsns.set()\n\n%matplotlib inline","f170c126":"dataset = pd.read_csv('..\/input\/movies\/movies.csv', encoding = \"ISO-8859-1\")\ndataset.head()","f6ba7c7d":"sns.heatmap(dataset.isnull(), cbar=False) \nplt.title('Valores faltantes por columna y posici\u00f3n', fontsize = 15)\nplt.show()","ceab52be":"dataset.describe().T","a4e22c80":"sns.distplot(dataset['year'], bins = 5, color = 'orange', label = 'KDE')\nplt.legend()\nplt.gcf().set_size_inches(12, 5)","0098cf11":"Oldest = dataset.sort_values(\"released\", ascending = True)\nOldest[['name', \"released\"]][:10]","fd7e22e8":"Newest = dataset.sort_values(\"released\", ascending = False)\nNewest[['name', \"released\"]][:10]","9fe5e3d4":"world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres')) # Loading gpd file\nworld.head(3)","614528e3":"country_geo = list(world['name']) # Countries in 'naturalearth_lowres' \ncountry_data = list(dataset['country'].unique()) # Countries in my dataset\n\ncountry_diff = [country for country in country_data if country not in country_geo]\ncountry_diff # Countries with different names","f4b4f3fb":"dataset['country'] = pd.DataFrame(dataset['country'].replace(\n    {'USA':'United States of America','UK':'United Kingdom',\n     'West Germany':'Germany', 'Hong Kong':'China',\n     'Soviet Union': 'Russia', 'Czech Republic':'Czech Rep.'})) # Changing country name from my dataset","77188386":"Countries = pd.DataFrame(dataset['country'].value_counts())\nTen_countries = pd.DataFrame(dataset['country'].value_counts()).head(10)\n\nsns.barplot(x = Ten_countries.index, y = Ten_countries['country'])\n\nlabels =Ten_countries.index.tolist()\nplt.gcf().set_size_inches(15, 7)\n\nplt.title('Countries vs movies released', fontsize = 20)\nplt.xlabel('Country', fontsize = 15)\nplt.ylabel('Movies released', fontsize = 15)\n\nplt.xticks(ticks = [0,1,2,3,4,5,6,7,8,9] , labels = labels, rotation = '45')\nplt.show()","6e11a83f":"Temp = Countries.index.to_frame(index=False, name = 'countries')\nTemp2 = Countries.reset_index(drop = True)\nTemp2 = Temp2.rename(columns={'country': 'Total_movies'})\nTemp3 = Temp.join(Temp2)","e5a93899":"mapped = world.set_index('name').join(Temp3.set_index('countries')).reset_index()\n\nto_be_mapped = 'Total_movies'\nvmin, vmax = 0,4900\nfig, ax = plt.subplots(1, figsize=(15,15))\n\nmapped.dropna().plot(column=to_be_mapped, cmap='Blues', linewidth=0.9, ax=ax, edgecolors='0.6')\nax.set_title('Movies per country', fontdict={'fontsize':20})\nax.set_axis_off()\n\nsm = plt.cm.ScalarMappable(cmap='Blues', norm=plt.Normalize(vmin = vmin, vmax = vmax))\nsm._A = []\n\ncbar = fig.colorbar(sm, orientation='horizontal')","74d7f24a":"Per_country = (Countries.sum() \/ 6820 * 100)\nPer_country","9ea6cbdd":"dataset.groupby('company').size()","d1ad0d8a":"company = dataset['company'].value_counts()\ncompany = pd.DataFrame(company) \ncompany = company.head(10) \ncompany.head(3)","2efd0fc1":"sns.barplot(x = company.index, y = company['company'])\n\nlabels = company.index.tolist()\nplt.gcf().set_size_inches(15, 7)\n\nplt.title('Company vs. Movies released', fontsize = 20)\nplt.xlabel('Company', fontsize = 15)\nplt.ylabel('Released movies', fontsize = 15)\nplt.xticks(ticks = [0,1,2,3,4,5,6,7,8,9] , labels = labels, rotation = '45')\nplt.show()","f885b2ba":"Porcentaje = company.sum() \/ dataset.shape[0] * 100\nPorcentaje","d59cbbbf":"dataset['rating'].value_counts().plot.pie(autopct='%1.1f%%',shadow=True,figsize=(10,8))\nplt.title('Rating percentages', fontsize = 20)\nplt.tight_layout()\nplt.show()","c4c28f35":"plt.figure(figsize = (22,10))\nsns.countplot(x = 'rating',data = dataset ,hue='genre')\nplt.legend(loc='upper center')\nplt.show()","301f2fea":"tag = \"Adventure\"\nsmall = dataset[dataset[\"genre\"] == tag]\nsmall[small[\"country\"] == \"United States of America\"][[\"name\", \"country\",\"year\"]].head(10)","a1bf40c0":"sns.heatmap(dataset.corr(), annot = True, linewidths=.5, cmap='cubehelix')\nplt.title('Correlation', fontsize = 20)\nplt.gcf().set_size_inches(15, 7)\nplt.show()","b323062d":"f, (ax1, ax2) = plt.subplots(1, 2, sharey = True)\n\nplt.gcf().set_size_inches(15, 7)\nax1.scatter(dataset.budget, dataset.gross, c = 'green')\nax1.set_title('Budget vs. Gross', c = 'green', fontsize = 25)\nax2.scatter(dataset.votes, dataset.gross, c='red')\nax2.set_title('Votes vs. Gross', c ='red', fontsize = 25)\n\nplt.ylabel('Gross', fontsize = 25)\n\nplt.show()","9d59384b":"plt.subplots(figsize=(12,8))\nwordcloud = WordCloud(\n                          background_color='Black',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(dataset.star))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","2153e2f1":"plt.subplots(figsize=(12,8))\nwordcloud = WordCloud(\n                          background_color='White',\n                          width=1920,\n                          height=1080\n                         ).generate(\" \".join(dataset.director))\nplt.imshow(wordcloud)\nplt.axis('off')\nplt.show()","2c401399":"x1 = dataset['runtime'].fillna(0.0).astype(float)\nfig = ff.create_distplot([x1], ['Runtime'], bin_size=0.7, curve_type='normal', colors=[\"#6ad49b\"])\nfig.update_layout(title_text='Runtime with normal distribution')\nfig.show()","ac90de32":"x2 = dataset['score'].fillna(0.0).astype(float)\nfig = ff.create_distplot([x2], ['Score'], bin_size=0.1, curve_type='normal', colors=[\"#6ad49b\"])\nfig.update_layout(title_text='Score with normal distribution')\nfig.show()","c764fa4c":"Thanks for reaching the end! Upvote if you liked it!","62351fdb":"**The set has:**\n\n   - Numerical columns: Budget, Gross, Runtime, Score and Votes.\n   - Categorical columns: Company, Country, Director, Genre, Name, Rating, Star and Writer.\n   - Date columns: Released and Year.","48be2700":"*There are no missing values in the set*","24fd0432":"**Seeing the oldest and newest movies in the set**","574d8890":"**Company analisis**","53453668":"*Score*","01823e8e":"**Geographic plot**","73ced4a5":"**Genre and rating**","bf78a5f7":"*Let's see some Adventure films from USA*","b4575c04":"**Missing values?**","49331ed9":"**Country names in my dataset**","f6379c61":"**Conclusion:**\n\n- Low budget movies and low voted movies all seem to have poor profit.\n- As the budget raises, there is an exponencial tendency for gross improvement.\n- There is no clear relation in how much a movie profits from the amount of votes it has.","8eecd401":"Hi! I'm new to ML so I'd be glad to receive your feedback!!","2afc8176":"**Loading and getting to know the dataset**","ad6a2b19":"**Conclusion:**\n\n- The 10 biggest companies around the world concentrate 27% of all the movies released within those 30 years.","910cfc20":"**Importing modules**","ad436a1e":"*It seems there are the same amounts of movies studied per each year!*","801c0ae4":"## Movie analysis","75491c54":"Some conclusions:\n- El set has 6820 titles.\n- The studied time lapse goes from 1986 to 2016.\n- The average film duration is 1h 46min.","6898dca8":"*Oldest released movies*","cb5e7a42":"*There are clear correlation between 'Budget' and 'Gross', and also a relationship between the 'Vote' and 'Gross' variables*","38c59f27":"- The 10 countries with most released films concentrate the 94.7% of all the released films in those 30 years.","d101504d":"**Actors and directors**","c38216e6":"**Conclusion:**\n\n   - We can see that most of the movies are R and PG-13 rated, and that most movies are from Adventure, Action and Comedy genres.\n   - G rated movies are mostly family ones! (as expected!)","cdc834f0":"*Newest released movies*","bb26a636":"*Runtime*","d8cb1596":"**Conclusion:**\n\n   - Runtime almost follows a normal distribution around 100 min of duration, but has little skewness to the left.\n   - Score values follow a normal distribution, around 6.4.    ","ac465bbd":"**Countries with the most released films**","f5f1016f":"**Numerical features description**","437472ea":"*There are 2179 different companies*","e76a8fff":"**How many films there are in the set per year?**","2c3b7218":"**Correlation analysis**","77dacc76":"**Let's see how runtime and score are distributed**","9e25cf6c":"Let's use some wordclouds to see what happens at the star and director columns!","e52d53c0":"**10 countries with most released films**"}}