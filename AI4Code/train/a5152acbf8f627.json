{"cell_type":{"0dffa34c":"code","1fdf4c93":"code","f788409c":"code","c12dab48":"code","ccd4d8f2":"code","b33d62e3":"code","21da111e":"code","ee9e0d63":"code","381d0375":"code","65d9eff7":"code","baaf9c32":"code","6a4d9af2":"code","d5f6c743":"code","bdbefb39":"code","eb0a8bf7":"code","f2ab2bff":"code","d4d25858":"code","588ff265":"code","f9b4b7c5":"code","9163f407":"code","ed7aeb6e":"code","d40f0e01":"code","71765536":"code","05a56f63":"code","f6c6723e":"code","2a062b9c":"code","9b689181":"code","16d06c8c":"code","562b37b1":"code","601f3663":"code","66a99294":"code","13d453d2":"code","fb9759e1":"markdown","f6ad0313":"markdown"},"source":{"0dffa34c":"import os\nimport pandas as pd\nlen(os.listdir('..\/input\/severstal-steel-defect-detection\/train_images'))","1fdf4c93":"import pandas as pd\ndf = pd.read_csv('..\/input\/severstal-steel-defect-detection\/train.csv')\ndf","f788409c":"df['ClassId'].value_counts()","c12dab48":"# Example Photo\nimport matplotlib.pyplot as plt\nimport cv2\n\npathh = '000a4bcdd.jpg'\n\nimg = cv2.imread('..\/input\/severstal-steel-defect-detection\/train_images\/'+pathh)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nfig, ax = plt.subplots(1, 1, figsize=(10,10))\nax.imshow(img)\n\n\npathh = '008ef3d74.jpg'\nimg = cv2.imread('..\/input\/severstal-steel-defect-detection\/train_images\/'+pathh)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nfig, ax = plt.subplots(1, 1, figsize=(10,10))\nax.imshow(img)\n\npathh = '0014fce06.jpg'\nimg = cv2.imread('..\/input\/severstal-steel-defect-detection\/train_images\/'+pathh)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nfig, ax = plt.subplots(1, 1, figsize=(10,10))\nax.imshow(img)\n\n\npathh = '000f6bf48.jpg'\nimg = cv2.imread('..\/input\/severstal-steel-defect-detection\/train_images\/'+pathh)\nimg = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\nfig, ax = plt.subplots(1, 1, figsize=(10,10))\nax.imshow(img)\n","ccd4d8f2":"img","b33d62e3":"!pip install --upgrade --force-reinstall --no-deps kaggle","21da111e":"!pip install botnoi==0.2.1","ee9e0d63":"import numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport botnoi as bn\nfrom botnoi import cv\nimport os","381d0375":"import pandas as pd\ndf = pd.read_csv('..\/input\/severstal-steel-defect-detection\/train.csv')\ndf","65d9eff7":"df0 = df[df['ClassId'] == 1].reset_index(drop=True)\ndf1 = df[df['ClassId'] == 2].reset_index(drop=True)\ndf2 = df[df['ClassId'] == 3].reset_index(drop=True)\ndf3 = df[df['ClassId'] == 4].reset_index(drop=True)","baaf9c32":"df2 = df2.sample(frac=1)[:1000].reset_index(drop=True)","6a4d9af2":"df = pd.concat([df0, df1, df2, df3], ignore_index=True)\ndf","d5f6c743":"df['ClassId'].value_counts()","bdbefb39":"import glob\n# imgfolder = glob.glob('..\/input\/severstal-steel-defect-detection\/train_images\/'+'*')\n# imgfolder","eb0a8bf7":"name = df['ImageId'].tolist()\nclasses = df['ClassId'].tolist()\n# name","f2ab2bff":"import glob\nimport pandas as pd\nimport pickle\nfrom tqdm import tqdm\n\ndef createdataset(df):\n    \n    pList = df['ImageId'].tolist()\n    classes = df['ClassId'].tolist()\n\n    clsset = pd.DataFrame()\n    featvec = []\n    clss = []\n    for p in tqdm(range(0, len(pList))):\n        clss.append(classes[p])\n        a = cv.image('..\/input\/severstal-steel-defect-detection\/train_images\/'+pList[p])\n        featvec.append(a.getresnet50())\n        \n\n    clsset['feature'] = featvec\n    clsset['clss'] = clss\n    #return clsset\n#     dataset.append(clsset)\n    #return dataset\n#     return pd.concat(dataset,axis=0)\n    return clsset\n","d4d25858":"feavec = createdataset(df)","588ff265":"dataset = feavec\ndataset = dataset.rename(columns={'clss': 'label'})\n# dataset['label'].astype('str').dtypes\n# dataset.info()","f9b4b7c5":"from sklearn.model_selection import train_test_split\nimport numpy as np\nfrom sklearn.svm import LinearSVC\nfrom sklearn.calibration import CalibratedClassifierCV\ndef trainmodel(dataset,modfile=''):\n    trainfeat, testfeat, trainlabel, testlabel = train_test_split(dataset['feature'], dataset['label'], test_size=0.33,random_state=42) #random_state=42\n    return trainfeat,testfeat,trainlabel,testlabel\n#     clf = LinearSVC()\n#     clf = CalibratedClassifierCV(clf) \n#     mod = clf.fit(np.vstack(trainfeat.values),trainlabel.values)\n#     #return mod\n# #     res = mod.predict(np.vstack(testfeat.values))\n    \n#     #return res, testlabel\n# #     acc = sum(res == testlabel)\/len(res)\n# #     conf = mod.predict_proba(np.vstack(testfeat.values))\n#     return mod#,acc,conf,testlabel","9163f407":"trainfeat, testfeat, trainlabel, testlabel = trainmodel(dataset)","ed7aeb6e":"clf = LinearSVC()\nclf = CalibratedClassifierCV(clf)\nmod = clf.fit(np.vstack(trainfeat.values),trainlabel.values)","d40f0e01":" res = mod.predict(np.vstack(testfeat.values))","71765536":"acc = sum(res == testlabel)\/len(res)\nacc","05a56f63":"sample = pd.read_csv('..\/input\/severstal-steel-defect-detection\/sample_submission.csv')\nsample","f6c6723e":"import os\nlen(os.listdir('..\/input\/severstal-steel-defect-detection\/test_images'))","2a062b9c":"real = sample[['ImageId']]\n# real","9b689181":"def createdataset(df):\n    \n    pList = df['ImageId'].tolist()\n#     classes = df['ClassId'].tolist()\n\n    clsset = pd.DataFrame()\n    featvec = []\n#     clss = []\n    for p in tqdm(range(0, len(pList))):\n#         clss.append(classes[p])\n        a = cv.image('..\/input\/severstal-steel-defect-detection\/test_images\/'+pList[p])\n        featvec.append(a.getresnet50())\n        \n\n    clsset['feature'] = featvec\n#     clsset['clss'] = clss\n    #return clsset\n#     dataset.append(clsset)\n    #return dataset\n#     return pd.concat(dataset,axis=0)\n    return clsset","16d06c8c":"fea = createdataset(real)","562b37b1":"fea = fea['feature']\nfea","601f3663":"ans = mod.predict(np.vstack(fea.values))","66a99294":"real['ans'] = ans\nreal","13d453d2":"real.to_csv('ans_metal.csv', index=False)","fb9759e1":"# EDA","f6ad0313":"# Model"}}