{"cell_type":{"4278c2c1":"code","69997ac1":"code","6e22fc69":"code","b6d7d564":"code","ea44e295":"code","6ebdd50f":"code","48835d67":"code","6d6119ba":"code","41d1cf8e":"code","80665931":"markdown","6aa9c08f":"markdown","38c0dd2d":"markdown","42838544":"markdown","969e37f4":"markdown","97366ea6":"markdown","c06b34bd":"markdown","039bbafc":"markdown","4dc96a68":"markdown","fb0754eb":"markdown","ad40367a":"markdown","b5136f96":"markdown","e1c32ff4":"markdown","c289248d":"markdown","a2e2a949":"markdown","ec4f88fc":"markdown","2e5dbad5":"markdown","51c3388f":"markdown","6533c25f":"markdown","44bc63f6":"markdown","8465ea27":"markdown","30bf9af7":"markdown","085a54b2":"markdown","19331ae8":"markdown","c9612f47":"markdown","17890ac0":"markdown","0ea4ecf5":"markdown","a22a82ec":"markdown","111f3aa9":"markdown"},"source":{"4278c2c1":"pip install Dash","69997ac1":"pip install jupyter_dash\n","6e22fc69":"import dash\nimport dash_core_components as dcc\nfrom jupyter_dash import JupyterDash\nimport dash_html_components as html\nimport plotly.graph_objs as go\nimport pandas as pd","b6d7d564":"df = pd.read_excel(\"https:\/\/github.com\/chris1610\/pbpython\/blob\/master\/data\/salesfunnel.xlsx?raw=True\")\ndf.head()","ea44e295":"pv = pd.pivot_table(df, index=['Name'], columns=[\"Status\"], values=['Quantity'], aggfunc=sum, fill_value=0)\npv.head()","6ebdd50f":"trace1 = go.Bar(x=pv.index, y=pv[('Quantity', 'declined')], name='Declined')\ntrace2 = go.Bar(x=pv.index, y=pv[('Quantity', 'pending')], name='Pending')\ntrace3 = go.Bar(x=pv.index, y=pv[('Quantity', 'presented')], name='Presented')\ntrace4 = go.Bar(x=pv.index, y=pv[('Quantity', 'won')], name='Won')","48835d67":"app = JupyterDash(__name__)\napp.layout = html.Div(children=[\n    html.H1(children='Sales Funnel Report'),\n    html.Div(children='''National Sales Funnel Report.'''),\n    dcc.Graph(\n        id='example-graph',\n        figure={\n            'data': [trace1, trace2, trace3, trace4],\n            'layout':\n            go.Layout(title='Order Status by Customer', barmode='stack')\n        })\n])\n\napp.run_server(mode = 'inline')","6d6119ba":"# We get the unique managers here\n\nmgr_options = df[\"Manager\"].unique()","41d1cf8e":"app = JupyterDash(__name__)\n\napp.layout = html.Div([\n    html.H2(\"Sales Funnel Report\"),\n    html.Div(\n        [\n            dcc.Dropdown(\n                id=\"Manager\",\n                options=[{\n                    'label': i,\n                    'value': i\n                } for i in mgr_options],\n                value='All Managers'),\n        ],\n        style={'width': '25%',\n               'display': 'inline-block'}),\n    dcc.Graph(id='funnel-graph'),\n])\n\n\n@app.callback(\n    dash.dependencies.Output('funnel-graph', 'figure'),\n    [dash.dependencies.Input('Manager', 'value')])\ndef update_graph(Manager):\n    if Manager == \"All Managers\":\n        df_plot = df.copy()\n    else:\n        df_plot = df[df['Manager'] == Manager]\n\n    pv = pd.pivot_table(\n        df_plot,\n        index=['Name'],\n        columns=[\"Status\"],\n        values=['Quantity'],\n        aggfunc=sum,\n        fill_value=0)\n\n    trace1 = go.Bar(x=pv.index, y=pv[('Quantity', 'declined')], name='Declined')\n    trace2 = go.Bar(x=pv.index, y=pv[('Quantity', 'pending')], name='Pending')\n    trace3 = go.Bar(x=pv.index, y=pv[('Quantity', 'presented')], name='Presented')\n    trace4 = go.Bar(x=pv.index, y=pv[('Quantity', 'won')], name='Won')\n\n    return {\n        'data': [trace1, trace2, trace3, trace4],\n        'layout':\n        go.Layout(\n            title='Customer Order Status for {}'.format(Manager),\n            barmode='stack')\n    }\n\n\napp.run_server(mode='inline')","80665931":"#### Now that we have set everything up, we can build the actual dash app.","6aa9c08f":"#### Below is the entire code, run the code :","38c0dd2d":"```python\napp = dash.Dash()\n\napp.layout = html.Div([\n    html.H2(\"Sales Funnel Report\"),\n    html.Div(\n        [\n            dcc.Dropdown(\n                id=\"Manager\",\n                options=[{\n                    'label': i,\n                    'value': i\n                } for i in mgr_options],\n                value='All Managers'),\n        ],\n        style={'width': '25%',\n               'display': 'inline-block'}),\n    dcc.Graph(id='funnel-graph'),\n])\n```\n","42838544":"### Importing libraries","969e37f4":"### Reading the data and creating a pivot table out of the same","97366ea6":"### The final step is to return a dictionary with the figure and layout defined. The decorator we defined earlier will make sure that the updated chart gets included in the output display.","c06b34bd":"### Run the app\n\n","039bbafc":"This looks a little complex but all it is doing is providing a wrapper around the update_graph function that defines an output and an input. In this case the output is the funnel-graph and the input Manager. In other words this decorator knows how to link the drop down definition to the function and take the output and place it in the dcc.Graph . This little bit of decorator magic is where the real power of Dash can be seen. It may seem a little complex at first but the basic concept is straightforward and once you understand it, you can really build some complex interactive visualizations.","4dc96a68":"#### With just 30 to 40 lines of code, we get so much of interactivity. Amazing!\n\n#### Pure PYTHON!\n\n\n","fb0754eb":"```python\napp.run_server(mode='inline')\n```","ad40367a":"So, how does your app look?\n\nPlay around with it.\n\n#### This application is about 68 lines of code which is not too bad when you consider how much is being done:\n\n* Fully interactive interface with the charts\n* Drop down selection of various managers\n* Ability to save the plot as a png file\n* Pan and zoom options\n* Multiple level undo\n* Automatic resizing of the plot as window sizes change\n","b5136f96":"## Activity :\n\n* What do you think is the role of reporting in Data Science?\n\n* What are the other visualization tools you are familiar of?\n","e1c32ff4":"### Understanding the Dash app","c289248d":"```python\ndef update_graph(Manager):\n    if Manager == \"All Managers\":\n        df_plot = df.copy()\n    else:\n        df_plot = df[df['Manager'] == Manager]\n\n    pv = pd.pivot_table(\n        df_plot,\n        index=['Name'],\n        columns=[\"Status\"],\n        values=['Quantity'],\n        aggfunc=sum,\n        fill_value=0)\n```","a2e2a949":"#### Now that the data is simply tabulated by customer and status, we can build out the bars that show the various customer status counts. \n#### The convention for plotly is that each item being plotted is usually called a trace . In this example, we want to plot Declined, Pending, Presented and Won as stacked bar charts so we need a trace for each one. Because we pivoted the data, the customer name is in the index and the individual values can be accessed through the hierarchical index on the column. Finally, the name will be used on the legend to describe the trace.","ec4f88fc":"## Interactivity","2e5dbad5":"### Understanding the Dash app","51c3388f":"### The next block of code will create the app and add the layout which will include a dcc.Dropdown to define the manager dropdown field.","6533c25f":"# Building interactive Dashboards using Plotly's Dash","44bc63f6":"## We always deal with datasets, so lets take a dataset and understand the different elements to create an interactive dashboard using Plotly's Dash","8465ea27":"Dash is an open-source Python framework used for building analytical web applications. It is a powerful library that simplifies the development of data-driven applications. It\u2019s especially useful for Python data scientists who aren\u2019t very familiar with web development. Users can create amazing dashboards in their browser using dash.\n\nBuilt on top of Plotly.js, React, and Flask, Dash ties modern UI elements like dropdowns, sliders and graphs directly to your analytical python code.\n\nDash apps consist of a Flask server that communicates with front-end React components using JSON packets over HTTP requests.\n\nDASH APPLICATIONS ARE WRITTEN PURELY IN PYTHON, so NO HTML or JAVASCRIPT IS NECESSARY.\n\nFollowing are some of the interactive dashboards built using Dash:\n\n* [Visualize Earthquakes with Plotly Dash](https:\/\/belle-croissant-54211.herokuapp.com\/)\n\n* [Traffic Accidents UK ](https:\/\/traffic-accidents-uk.herokuapp.com\/)\n\n* [Uber Rides](https:\/\/dash-gallery.plotly.host\/dash-uber-rides-demo\/)\n\n[Dash](https:\/\/dash.plotly.com\/) official documentation can be visited to explore more.\n\n\nLets create a simple interactive dashboard and then break down all the elements in it.","30bf9af7":"### Basic callback","085a54b2":"```python\n@app.callback(\n    dash.dependencies.Output('funnel-graph', 'figure'),\n    [dash.dependencies.Input('Manager', 'value')])\n```","19331ae8":"#### The real power of Dash comes from its ability to do complex interactions.\n\nDash provides several interactive components out of the box including Dropdowns, Multi-Select Dropdowns, Radio Buttons, Checkboxes, Sliders, and Text Input. All of them can be easily constructed and tied into your plots to drive various interactive options.\n\nWe will take the above example a notch higher. For the more complex demo, we can modify the app to allow the user to select one of the managers via a dropdown and view the single manager\u2019s results only.","c9612f47":"#### The basic structure of this code is to build the app, layout the HTML components and create the figure dictionary which contains the instructions to build the graph as well as provide other layout options.\n\n#### The most challenging aspect of this is the nesting of the HTML components. The fact that it was easy to get started without having to create the standard HTML\/CSS\/JS boilerplate needed for a modern web app. However, it is recommended  to use a good editor so it is easy to manage the code style and match the brackets and parentheses.\n\n#### After laying out the HTML components, the next step is to define the figure using a dictionary that contains the figure as well as the data and layout options. In this case, the layout was needed to define that the bars were stacked and provide an overall title.\n\n#### Once the app is laid out, we need to make sure it can run.","17890ac0":"```python\ntrace1 = go.Bar(x=pv.index, y=pv[('Quantity', 'declined')], name='Declined')\ntrace2 = go.Bar(x=pv.index, y=pv[('Quantity', 'pending')], name='Pending')\ntrace3 = go.Bar(x=pv.index, y=pv[('Quantity', 'presented')], name='Presented')\ntrace4 = go.Bar(x=pv.index, y=pv[('Quantity', 'won')], name='Won')\n```","0ea4ecf5":"This portion of the function filters the data based on the dropdown to include only a subset of the managers - or include all managers is the default is selected. After filtering the dataframe, the code pivots the data to construct the tabular results similar to the earlier example. Pure python\n\n### The next portion of the code defines the traces, we have done this earlier:","a22a82ec":"There a couple of items to note in this section. The dropdown needs to have an id defined that can be referenced later to drive our interactivity. You may also notice that the dcc.Graph code only contains an id and not the rest of the content we saw earlier. Since this is an interactive plot the dcc.Graph acts as a placeholder that we will define in a moment.\n\nThe final aspect of this section is that there is a style attribute which is a convenient way to make sure the component (in this case the dropdown) is only 25% of the screen and does not span the entire browser.\n\nNow that the layout is completed, we can build up the interactive components by adding a callback decorator to a function that manipulates the data and returns a dictionary. This resulting dictionary looks like the figure dictionary defined in the simpler example above so the basic concept continues to build upon itself.\n\n","111f3aa9":"```python\nreturn {\n    'data': [trace1, trace2, trace3, trace4],\n    'layout':\n    go.Layout(\n        title='Customer Order Status for {}'.format(Manager),\n        barmode='stack')\n}\n```"}}