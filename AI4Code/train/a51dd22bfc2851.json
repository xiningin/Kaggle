{"cell_type":{"118aed13":"code","1428778f":"code","2b32a4be":"code","e4d2016a":"code","885e60bb":"code","4de30ffd":"code","4fa52cac":"code","61107026":"code","832e0793":"code","479b9d05":"code","595ab46e":"code","a658dad1":"code","46fe94eb":"code","b4bfb8f0":"code","b5f39f07":"code","be740222":"code","1be7c768":"code","f33a0643":"code","2b8bac1b":"code","aa46b1b3":"code","e9f75658":"code","cbcdf7b9":"code","66db3d95":"code","7407e9db":"code","7dc6bb2c":"code","bf229830":"code","b733d19f":"code","08d57ccb":"markdown"},"source":{"118aed13":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\nwine = pd.read_csv('\/kaggle\/input\/wine-quality-binary-classification\/wine.csv', encoding='ISO-8859-1')","1428778f":"#importing necessary libraries\nimport numpy as np \nimport pandas as pd \nimport warnings\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn import metrics\nfrom sklearn.neural_network import MLPClassifier\nimport matplotlib.pyplot as plt\n","2b32a4be":"wine.head()","e4d2016a":"wine.isnull().sum()","885e60bb":"# plt.figure(figsize=(40,25))\n# plt.subplots_adjust(left=0, bottom=0.5, right=0.9, top=0.9, wspace=0.5, hspace=0.8)\n# plt.subplot(141)\n# plt.title('Percentage of good and bad quality wine',fontsize = 20)\n# wine['quality'].value_counts().plot.pie(autopct=\"%1.1f%%\")","4de30ffd":"wine['quality'].replace({'bad': 0 , 'good': 1}, inplace=True)","4fa52cac":"wine.head()","61107026":"# Y = wine['quality']","832e0793":"# Y","479b9d05":"# X = wine.drop(['quality'],axis = 1)","595ab46e":"# X","a658dad1":"y = wine['quality'].values\ny = y.reshape(-1,1)\nx = wine.drop(['quality'],axis = 1)","46fe94eb":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=100)\ny_train = y_train.reshape(-1,1)\ny_test = y_test.reshape(-1,1)\nprint(\"x_train: \",x_train.shape)\nprint(\"x_test: \",x_test.shape)\nprint(\"y_train: \",y_train.shape)\nprint(\"y_test: \",y_test.shape)","b4bfb8f0":"from sklearn.neural_network import MLPClassifier\nclassifier = MLPClassifier(solver='lbfgs', alpha=1e-5,hidden_layer_sizes=(10, 3), random_state=2)","b5f39f07":"classifier.fit(x_train, y_train)\ny_pred = classifier.predict(x_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","be740222":"plt.figure(figsize=(12,10))\nsns.heatmap(wine.corr(),annot=True)","1be7c768":"from sklearn.preprocessing import StandardScaler\nscaler=StandardScaler()\nx_train, y_train=scaler.fit_transform(x_train),scaler.fit_transform(y_train)","f33a0643":"from sklearn.decomposition import PCA\npca=PCA(n_components=2)\nx_pca=scaler.fit_transform(x)\nm=pca.fit_transform(x_pca)","2b8bac1b":"m_df=pd.DataFrame(data = m, columns= ['PC 1', 'PC 2'])","aa46b1b3":"final_df = pd.concat([m_df, wine[['quality']]], axis=1)","e9f75658":"final_df.head()","cbcdf7b9":"pca.explained_variance_ratio_","66db3d95":"fig=plt.figure(figsize=(8,8))\nax=fig.add_subplot(1,1,1)\nax.set_xlabel('PC 1',fontsize = 15)\nax.set_ylabel('PC 2',fontsize = 15)\ntargets = [0,1]\ncolors=['r','g']\nfor target , color in zip(targets,colors):\n  indicesToKeep = final_df['quality'] == target\n  ax.scatter(final_df.loc[indicesToKeep,'PC 1']\n             ,final_df.loc[indicesToKeep,'PC 2']\n             ,c = color\n             ,s = 50)\nax.legend(targets)\nax.grid()","7407e9db":"y = final_df['quality'].values\ny = y.reshape(-1,1)\nx = final_df.drop(['quality'],axis = 1)","7dc6bb2c":"x_train, x_test, y_train, y_test = train_test_split(x,y,test_size = 0.3,random_state=100)","bf229830":"classifier = MLPClassifier(solver='lbfgs', alpha=1e-5,hidden_layer_sizes=(10, 3), random_state=2)","b733d19f":"classifier.fit(x_train, y_train)\ny_pred = classifier.predict(x_test)\nprint(\"Accuracy:\",metrics.accuracy_score(y_test, y_pred))","08d57ccb":"## **Krish Sukhani**\n## **TE IT**\n## **Batch D**\n## **59**\n"}}