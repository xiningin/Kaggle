{"cell_type":{"0680ef0b":"code","66f5c162":"code","a086e0af":"code","313c7121":"code","d3d1ad0c":"code","45f07be1":"code","cd4b7fb8":"code","8ae186f7":"code","acb89cdf":"code","f2eb6c79":"code","78ab5829":"code","d3f0c3d8":"code","31e73f2c":"code","04430def":"code","a6a792ea":"code","c8e90525":"code","09b42061":"code","fa41e932":"code","0c4c938e":"code","04cb9a5c":"code","a9f2b4df":"code","e01794f9":"code","c6054ff7":"markdown","d51971ab":"markdown","eec46dfc":"markdown","692b7d5c":"markdown","b75fa2ae":"markdown","b200f9e2":"markdown","df4e30fa":"markdown","104bc989":"markdown","98658455":"markdown","84a558aa":"markdown","c17b37d9":"markdown","950af33a":"markdown","3fd5a60b":"markdown","77be8644":"markdown","82b2b53e":"markdown","38e17d8f":"markdown","af18ed0a":"markdown","76e7836e":"markdown","c3f5d9b2":"markdown","b44c497f":"markdown"},"source":{"0680ef0b":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\n\n","66f5c162":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport datetime","a086e0af":"covid_19_IN = pd.read_csv('..\/input\/covid19-dataset\/covid_19_india.csv')\nStatewise_Testing = pd.read_csv('..\/input\/covid19-dataset\/StatewiseTestingDetails.csv')","313c7121":"covid_19_IN.head()","d3d1ad0c":"covid_19_IN['State\/UnionTerritory'].unique()","45f07be1":"index_names = covid_19_IN[ covid_19_IN['State\/UnionTerritory'] == 'Maharashtra***' ].index\ncovid_19_IN.drop(index_names,inplace=True)","cd4b7fb8":"index_names1 = covid_19_IN[ covid_19_IN['State\/UnionTerritory'] == 'Telangana***' ].index\ncovid_19_IN.drop(index_names1,inplace=True)\nindex_names2 = covid_19_IN[ covid_19_IN['State\/UnionTerritory'] == 'Telengana***' ].index\ncovid_19_IN.drop(index_names2,inplace=True)\nindex_names3 = covid_19_IN[ covid_19_IN['State\/UnionTerritory'] == 'Chandigarh***' ].index\ncovid_19_IN.drop(index_names3,inplace=True)\nindex_names4 = covid_19_IN[ covid_19_IN['State\/UnionTerritory'] == 'Punjab***' ].index\ncovid_19_IN.drop(index_names4,inplace=True)","8ae186f7":"covid_19_IN['State\/UnionTerritory'].unique()","acb89cdf":"Statewise_Testing.head()","f2eb6c79":"Statewise_Testing['State'].unique()","78ab5829":"state_details = pd.pivot_table(covid_19_IN, values=['Confirmed','Deaths','Cured'], index='State\/UnionTerritory', aggfunc='max')\n#Active Cases\nstate_details['Active Cases'] = round(state_details['Confirmed'] - state_details['Cured'], 2)\n# Calculating the recovery rate which is Cured\/Confirmed rounding to 2 digits\nstate_details['Recovery Rate'] = round(state_details['Cured'] \/ state_details['Confirmed'],2)\n# Similarly, for Death Rate\nstate_details['Death Rate'] = round(state_details['Deaths'] \/state_details['Confirmed'], 2)\n\nstate_details = state_details.sort_values(by='Confirmed', ascending= False).reset_index(level=0)\n\nstate_details.style.background_gradient(cmap='plasma_r')","d3f0c3d8":"state_details.rename(columns={'State\/UnionTerritory':'STUT'}, inplace=True)\nstate_details.head()","31e73f2c":"state_details=state_details.sort_values('Confirmed', ascending= False).fillna(0)\nstate_details.head()","04430def":"state_details['STUT'].unique()","a6a792ea":"state_cases=state_details.sort_values('Confirmed', ascending= False).fillna(0)\nstate_cases=state_details.head(15)\nstate_cases\n","c8e90525":"plt.figure(figsize=(14,8))\nsns.set_style('whitegrid')\nplt.figure(figsize= (18,10))\nplt.ticklabel_format(style='plain')\nplt.xticks(rotation = 90 ,fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.ylim(0,2000000,200000)\nsns.barplot(data=state_cases,x='STUT',y='Confirmed',color=sns.color_palette('Set3')[3],label='Confirmed')\nsns.barplot(data=state_cases,x='STUT',y='Active Cases',color=sns.color_palette('Set3')[7],label='Active')\nsns.barplot(data=state_cases,x='STUT',y='Cured',color=sns.color_palette('Set3')[8],label='Cured')\nsns.barplot(data=state_cases,x='STUT',y='Deaths',color=sns.color_palette('Set3')[9],label='Deaths')\n\nplt.legend();\nplt.show()","09b42061":"covid_19_IN['Date'] = pd.to_datetime(covid_19_IN['Date'], dayfirst=True)\nCS_covid = covid_19_IN[['Date','State\/UnionTerritory','Cured','Deaths','Confirmed']]\nCS_covid = CS_covid.groupby('Date')[['Confirmed', 'Cured','Deaths']].sum().reset_index()\nCS_covid['Active'] = CS_covid['Confirmed'] - CS_covid['Cured'] - CS_covid['Deaths']\nCS_covid_melt_df = pd.melt(CS_covid, id_vars=['Date'], value_vars=['Confirmed','Active','Cured','Deaths'])\nimport plotly.express as px\ntarget_date = CS_covid_melt_df['Date'].max()\nfig = px.line(CS_covid_melt_df, x=\"Date\", y=\"value\", color='variable', \n              title=f'All-India Cases as of {target_date}')\nfig.show()","fa41e932":"covid_19_IN['Date'] = pd.to_datetime(covid_19_IN['Date'],dayfirst=True)\ndf1=covid_19_IN.groupby('Date').sum()\ndf1.reset_index(inplace=True)\nsns.set_style('whitegrid')\nplt.figure(figsize= (18,10))\nplt.ticklabel_format(style='plain')\nplt.xticks(rotation = 90 ,fontsize = 10)\nplt.yticks(fontsize = 10)\nplt.xlabel(\"Dates\",fontsize = 20)\nplt.ylabel('Total cases',fontsize = 20)\nplt.title(\"Total Confirmed, Active, Death in India\" , fontsize = 20)\nplt.ylim(0,9000000,1000000)\nax1 = plt.plot_date(data=df1,y= 'Confirmed',x= 'Date',label = 'Confirmed',linestyle ='-',color = 'b')\nax2 = plt.plot_date(data=df1,y= 'Cured',x= 'Date',label = 'Cured',linestyle ='-',color = 'g')\nax3 = plt.plot_date(data=df1,y= 'Deaths',x= 'Date',label = 'Death',linestyle ='-',color = 'r')\nplt.legend();\n","0c4c938e":"df2=df1.tail(25)\ndf2['Date'] = df2['Date'].apply(lambda x: x.strftime('%Y-%m-%d'))\nplt.figure(figsize=(14,10))\nplt.ticklabel_format(style='plain')\nsns.barplot(data=df2,x='Date',y='Confirmed',color=sns.color_palette('Set3')[3],label='Confirmed')\nsns.barplot(data=df2,x='Date',y='Cured',color=sns.color_palette('Set3')[4],label='Cured')\nsns.barplot(data=df2,x='Date',y='Deaths',color=sns.color_palette('Set3')[5],label='Deaths')\nplt.xlabel('Date')\nplt.ylabel('Count')\nplt.ylim(0,9000000,1000000)\nplt.xticks(rotation = 90)\nplt.title(\"Total Confirmed, Cured, Death in India\" , fontsize = 20)\nplt.legend(frameon=True,fontsize=12);","04cb9a5c":"states_list=['Maharashtra','Gujarat','Delhi','Rajasthan','Madhya Pradesh','Tamil Nadu','Uttar Pradesh','Andhra Pradesh',\n            'West Bengal','Karnataka','Kerala','Jammu and Kashmir','Punjab','Haryana']\ndf5=covid_19_IN[covid_19_IN['Date']>'2020-04-07']\ndf5=df5.groupby(['Date','State\/UnionTerritory']).sum()\ndf5.reset_index(inplace=True)\ndf5['Date'] = df5['Date'].apply(lambda x: x.strftime('%Y-%m-%d'))\nplt.figure(figsize=(20,60))\nplt.ticklabel_format(style='plain')\nfor i,state in enumerate(states_list):\n    plt.subplot(7,2,i+1)\n    df4=df5[df5['State\/UnionTerritory']==state]\n    plt.bar(df4.Date,df4.Confirmed,label='Confirmed')\n    plt.bar(df4.Date,df4.Cured,label='Cured')\n    plt.bar(df4.Date,df4.Deaths,label='Death')\n    plt.xticks(rotation=90)\n    plt.title(state)\n    plt.ylabel('Total Cases')\n    plt.xlabel('Date')\n    plt.legend()\nplt.tight_layout()\nplt.show()\n","a9f2b4df":"\n# Calculations\nCS_covid.head()\nConf_sum = CS_covid['Confirmed'].sum()\nCured_sum = CS_covid['Cured'].sum()\nActive_sum = CS_covid['Active'].sum()\nDeaths_sum = CS_covid['Deaths'].sum()\n\n\nCured_per = Cured_sum\/Conf_sum\nActive_per = Active_sum\/Conf_sum\nDeath_per = Deaths_sum\/Conf_sum\n\n# make figure and assign axis objects\nplt.figure(figsize=(13, 8))\n\n\n# pie chart parameters\nratios = [Cured_per, Active_per, Death_per]\nlabels = ['Cured', 'Active', 'Death']\n\n# rotate so that first wedge is split by the x-axis\nangle = -180 * ratios[0]\nplt.pie(ratios, autopct='%1.1f%%', startangle=angle,\n        labels=labels)\nplt.title(\"Coronavirus Cases in India as of \" +covid_19_IN['Date'].max().strftime(\"%d-%b'%y\") , fontsize = 20)\nplt.show()","e01794f9":"state=list(Statewise_Testing['State'].value_counts().index)\ncount=list(Statewise_Testing['State'].value_counts())\nplt.figure(figsize=(14,8))\nsns.barplot(x=count,y=state,color=sns.color_palette('Set3')[10])\nplt.xlabel('Counts')\nplt.ylabel('States')\nplt.title('ICMR Test labs per States')\nplt.tight_layout()","c6054ff7":"**Creating Dataframes for COVID-19 and Testing Details.**","d51971ab":"**Feature Engineering - Removing duplicate values from the Dataset, working with null values to prepare our Dataset for Visualization.**","eec46dfc":"**Total Confirmed,Cured and Deaths in India due to COVID-19.**","692b7d5c":"**Checking all the information related to COVID-19 statewise.**","b75fa2ae":"**Checking unique values.**","b200f9e2":"**Thankyou taking the time out and going thru with my notebook. Any suggestion or area of improvements comments are more than welcome.Have a nice day.**\n\n\n","df4e30fa":"**Time period Visualization of COVID-19 cases in India with the help of Plotly.**","104bc989":"**Renaming State Details.**","98658455":"**Importing Necessary files.**","84a558aa":"**Total Confirmed, Active and Deahs reported in India due to COVID-19.**","c17b37d9":"**Getting an insight of the Statewise Testing Dataframe.**","950af33a":"**Checking unique values present in the Statewise_Testing Dataframe.**","3fd5a60b":"**Context**\n: Coronaviruses are a large family of viruses which may cause illness in animals or humans. In humans, several coronaviruses are known to cause respiratory infections ranging from the common cold to more severe diseases such as Middle East Respiratory Syndrome (MERS) and Severe Acute Respiratory Syndrome (SARS). The most recently discovered coronavirus causes coronavirus disease COVID-19 - World Health Organization\n\nThe number of new cases are increasing day by day around the world. This dataset has information from the states and union territories of India at daily level.\n\nState level data comes from Ministry of Health & Family Welfare.\n\nIndividual level data comes from covid19india.\n\nContent\nCOVID-19 cases at daily level is present in covid_19_india.csv file.\n\nTesting details in StateTestingDetails.csv file.\n\nAcknowledgements\nThanks to Indian Ministry of Health & Family Welfare for making the data available to general public.\n\nThanks to covid19india.org for making the individual level details and testing details available to general public.\n\nThanks to Wikipedia for population information.\n","77be8644":"**Sorting the values with the help of confirmed cases.**","82b2b53e":"**Getting an insight of the COVID-19 Dataframe.**","38e17d8f":"**Checking the unique states listed in the Dataset.**","af18ed0a":"**Creating a custom table for better understanding of the data and then creating the heatmap.**","76e7836e":"**BarPlot of COVID-19 cases in India(Statewise).**","c3f5d9b2":"**ICMR Test labs per States in India.**","b44c497f":"**Pie Chart depicting COVID-19 summary in India.**"}}