{"cell_type":{"243231ab":"code","7f987644":"code","ad922179":"code","ce2bdbb9":"code","1069846b":"code","4d60963a":"code","86e5d3f9":"code","c506dbaf":"code","717b3f8a":"code","8c5dca51":"code","0f2acac4":"code","b695c434":"code","51b124ab":"code","66eda55a":"code","080e592c":"code","cfc2aa5a":"code","ea505eb5":"code","c3bdcfa6":"markdown","083fee87":"markdown"},"source":{"243231ab":"# do the necessary imports\n\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.optimizers import Adam\nfrom keras.preprocessing.image import img_to_array\nfrom keras.utils import to_categorical\n\nfrom sklearn.model_selection import train_test_split\nimport numpy as np\nimport pandas as pd\nimport random\nimport cv2\nimport os\nfrom PIL import Image\n\nfrom keras.layers import *\nfrom keras.models import *\nimport keras\n","7f987644":"# Hyper - parameters\n\nepochs = 100\nlr = 1e-3\nbatch_size = 64\n#img_dims = (96,96,3)\n\ndata = []\nlabels = []","ad922179":"size = 224","ce2bdbb9":"from keras.preprocessing.image import ImageDataGenerator","1069846b":"import tensorflow as tf\nfrom tensorflow.keras.applications import ResNet50\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Flatten, GlobalAveragePooling2D, BatchNormalization\nfrom tensorflow.keras.applications.resnet50 import preprocess_input\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\nfrom tensorflow.keras.preprocessing.image import load_img, img_to_array\n\nresnet_weights_path = '..\/input\/resnet50\/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5'\n","4d60963a":"# CALLBACKS\n\nfrom keras.callbacks import EarlyStopping\nfrom keras.callbacks import ReduceLROnPlateau\n\nes = EarlyStopping(patience=5, monitor = 'val_accuracy')\nrlp = ReduceLROnPlateau(patience=5, monitor = 'val_accuracy')\n\ncallbacks = [es, rlp]","86e5d3f9":"train_datagen = ImageDataGenerator(horizontal_flip=True,\n                                   width_shift_range = 0.4,\n                                   height_shift_range = 0.4,\n                                   zoom_range=0.3,\n                                   rotation_range=20,\n                                   rescale = 1.\/255\n                                   )\n\ntest_gen = ImageDataGenerator(rescale = 1.\/255)\n\nimage_size = 224\nbatch_size = 64\n\ntrain_generator = train_datagen.flow_from_directory(\n        '..\/input\/gender-classification-dataset\/Training',\n        target_size=(image_size, image_size),\n        batch_size=batch_size,\n        class_mode='binary')\n\nvalidation_generator = test_gen.flow_from_directory(\n    '..\/input\/gender-classification-dataset\/Validation',\n    target_size = (image_size, image_size),\n    batch_size = batch_size,\n    class_mode = 'binary'\n)\n\nnum_classes = len(train_generator.class_indices)\nprint('Numer of classes:' ,num_classes)\nprint('Class labels: ', train_generator.class_indices)\n\n\n\n\n\"\"\"\ntrain_datagen = ImageDataGenerator(\n    rescale = 1.\/255, \n    shear_range = 0.2, \n    zoom_range = 0.2,\n    horizontal_flip = True\n)\n\ntest_datagen = ImageDataGenerator(rescale = 1.\/255)\n\ntrain_generator = train_datagen.flow_from_directory(\n    train_path, \n    target_size = (size, size),\n    batch_size = batch_size,\n    class_mode = 'binary'\n)\n\nvalidation_generator = test_datagen.flow_from_directory(\n    valid_path,\n    target_size = (size, size),\n    batch_size = batch_size, \n    class_mode = 'binary'\n)\n\n\"\"\"","c506dbaf":"model = Sequential()\n\nmodel.add(ResNet50(include_top=False, pooling='avg', weights='imagenet'))\nmodel.add(Flatten())\nmodel.add(BatchNormalization())\nmodel.add(Dense(2048, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(1024, activation='relu'))\nmodel.add(BatchNormalization())\nmodel.add(Dense(1, activation='sigmoid'))\n\nmodel.layers[0].trainable = False","717b3f8a":"model.summary()","8c5dca51":"model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n","0f2acac4":"model.fit_generator(train_generator, steps_per_epoch = int(47000\/64) + 1  , epochs = 30, validation_data = validation_generator, callbacks = callbacks)","b695c434":"model.save('model3.h5')","51b124ab":"model2 = Sequential()\n\nmodel2.add(ResNet50(include_top=False, pooling='avg', weights=None))\nmodel2.add(Flatten())\nmodel2.add(BatchNormalization())\nmodel2.add(Dense(2048, activation='relu'))\nmodel2.add(BatchNormalization())\nmodel2.add(Dense(1024, activation='relu'))\nmodel2.add(BatchNormalization())\nmodel2.add(Dense(1, activation='sigmoid'))\n\nmodel2.layers[0].trainable = True","66eda55a":"model2.summary()","080e592c":"model2.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])","cfc2aa5a":"model2.fit_generator(train_generator, steps_per_epoch = int(47000\/64) + 1  , epochs = 50, validation_data = validation_generator, callbacks = callbacks)","ea505eb5":"model2.save('model4.h5')","c3bdcfa6":"w\/o pretrained weights","083fee87":"**RESNET 50**"}}