{"cell_type":{"12821ddc":"code","5c926902":"code","91d41197":"code","dc9bcc42":"code","677cfd5e":"code","305eed64":"code","d370cba2":"code","af53b946":"code","0a8df8cb":"code","b4cdfc02":"code","4165ae21":"code","3a972b7a":"code","e60de0a2":"code","5106ba2d":"code","494b9072":"code","47f1d656":"code","b7986ec1":"code","ca524ef8":"code","4b58aea0":"code","a3005212":"code","97f977ee":"code","3c499c82":"code","3a4ae261":"code","e72f4c36":"code","2c1c7600":"code","aed97ab7":"code","268e72c3":"code","61588013":"code","29595471":"code","4f03040d":"code","e601ba4f":"code","830f9d7f":"code","8f56f228":"code","5518adcd":"code","33af8ebb":"code","d29b7426":"markdown","2bbb8a3e":"markdown","c3230068":"markdown","95dcf1c2":"markdown","4bac32cf":"markdown","ac2154f7":"markdown","caf84634":"markdown","e177c476":"markdown","473b03aa":"markdown","5025646e":"markdown","ab8905c5":"markdown","fd998969":"markdown","7f321d77":"markdown","9dc5c979":"markdown","67a21378":"markdown","d5e701b2":"markdown","beb2360e":"markdown","80cf7f7e":"markdown","50f32279":"markdown","c369b3fc":"markdown","a0e6f476":"markdown","1771c122":"markdown","e68153d1":"markdown","fe0bfca7":"markdown","7a5b6e83":"markdown","63172265":"markdown","f4945220":"markdown","5b159a3d":"markdown","2f1cb528":"markdown","d6f1dbf6":"markdown"},"source":{"12821ddc":"import dask\nimport dask.dataframe as dd\nimport warnings\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport lightgbm as lgb\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import confusion_matrix, mean_squared_error, classification_report\n\n%matplotlib inline\nsns.set(style=\"whitegrid\")\nwarnings.filterwarnings(\"ignore\")\npd.set_option('display.float_format', lambda x: '%.2f' % x)","5c926902":"dtypes = {\n        'MachineIdentifier':                                    'category',\n        'ProductName':                                          'category',\n        'EngineVersion':                                        'category',\n        'AppVersion':                                           'category',\n        'AvSigVersion':                                         'category',\n        'IsBeta':                                               'int8',\n        'RtpStateBitfield':                                     'float16',\n        'IsSxsPassiveMode':                                     'int8',\n        'DefaultBrowsersIdentifier':                            'float16',\n        'AVProductStatesIdentifier':                            'float32',\n        'AVProductsInstalled':                                  'float16',\n        'AVProductsEnabled':                                    'float16',\n        'HasTpm':                                               'int8',\n        'CountryIdentifier':                                    'int16',\n        'CityIdentifier':                                       'float32',\n        'OrganizationIdentifier':                               'float16',\n        'GeoNameIdentifier':                                    'float16',\n        'LocaleEnglishNameIdentifier':                          'int8',\n        'Platform':                                             'category',\n        'Processor':                                            'category',\n        'OsVer':                                                'category',\n        'OsBuild':                                              'int16',\n        'OsSuite':                                              'int16',\n        'OsPlatformSubRelease':                                 'category',\n        'OsBuildLab':                                           'category',\n        'SkuEdition':                                           'category',\n        'IsProtected':                                          'float16',\n        'AutoSampleOptIn':                                      'int8',\n        'PuaMode':                                              'category',\n        'SMode':                                                'float16',\n        'IeVerIdentifier':                                      'float16',\n        'SmartScreen':                                          'category',\n        'Firewall':                                             'float16',\n        'UacLuaenable':                                         'float32',\n        'Census_MDC2FormFactor':                                'category',\n        'Census_DeviceFamily':                                  'category',\n        'Census_OEMNameIdentifier':                             'float16',\n        'Census_OEMModelIdentifier':                            'float32',\n        'Census_ProcessorCoreCount':                            'float16',\n        'Census_ProcessorManufacturerIdentifier':               'float16',\n        'Census_ProcessorModelIdentifier':                      'float16',\n        'Census_ProcessorClass':                                'category',\n        'Census_PrimaryDiskTotalCapacity':                      'float32',\n        'Census_PrimaryDiskTypeName':                           'category',\n        'Census_SystemVolumeTotalCapacity':                     'float32',\n        'Census_HasOpticalDiskDrive':                           'int8',\n        'Census_TotalPhysicalRAM':                              'float32',\n        'Census_ChassisTypeName':                               'category',\n        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',\n        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',\n        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',\n        'Census_PowerPlatformRoleName':                         'category',\n        'Census_InternalBatteryType':                           'category',\n        'Census_InternalBatteryNumberOfCharges':                'float32',\n        'Census_OSVersion':                                     'category',\n        'Census_OSArchitecture':                                'category',\n        'Census_OSBranch':                                      'category',\n        'Census_OSBuildNumber':                                 'int16',\n        'Census_OSBuildRevision':                               'int32',\n        'Census_OSEdition':                                     'category',\n        'Census_OSSkuName':                                     'category',\n        'Census_OSInstallTypeName':                             'category',\n        'Census_OSInstallLanguageIdentifier':                   'float16',\n        'Census_OSUILocaleIdentifier':                          'int16',\n        'Census_OSWUAutoUpdateOptionsName':                     'category',\n        'Census_IsPortableOperatingSystem':                     'int8',\n        'Census_GenuineStateName':                              'category',\n        'Census_ActivationChannel':                             'category',\n        'Census_IsFlightingInternal':                           'float16',\n        'Census_IsFlightsDisabled':                             'float16',\n        'Census_FlightRing':                                    'category',\n        'Census_ThresholdOptIn':                                'float16',\n        'Census_FirmwareManufacturerIdentifier':                'float16',\n        'Census_FirmwareVersionIdentifier':                     'float32',\n        'Census_IsSecureBootEnabled':                           'int8',\n        'Census_IsWIMBootEnabled':                              'float16',\n        'Census_IsVirtualDevice':                               'float16',\n        'Census_IsTouchEnabled':                                'int8',\n        'Census_IsPenCapable':                                  'int8',\n        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',\n        'Wdft_IsGamer':                                         'float16',\n        'Wdft_RegionIdentifier':                                'float16',\n        'HasDetections':                                        'int8'\n        }","91d41197":"train = dd.read_csv('..\/input\/train.csv', dtype=dtypes)\ntrain = train.compute()","dc9bcc42":"def update_feature_lists():\n    binary = [c for c in train.columns if train[c].nunique() == 2]\n    numerical = ['Census_ProcessorCoreCount',\n                 'Census_PrimaryDiskTotalCapacity',\n                 'Census_SystemVolumeTotalCapacity',\n                 'Census_TotalPhysicalRAM',\n                 'Census_InternalPrimaryDiagonalDisplaySizeInInches',\n                 'Census_InternalPrimaryDisplayResolutionHorizontal',\n                 'Census_InternalPrimaryDisplayResolutionVertical',\n                 'Census_InternalBatteryNumberOfCharges']\n    categorical = [c for c in train.columns if (c not in numerical) & (c not in binary)]\n    return binary, numerical, categorical\n    \nbinary_columns, true_numerical_columns, categorical_columns = update_feature_lists()","677cfd5e":"print('Dataset number of records: %s' % train.shape[0])\nprint('Dataset number of columns: %s' % train.shape[1])\ntrain.head()","305eed64":"total = train.shape[0]\nmissing_df = []\ncardinality_df = []\nfor col in train.columns:\n    missing_df.append([col, train[col].count(), total])\n    cardinality = train[col].nunique()\n    if cardinality > 2 and col != 'MachineIdentifier':\n        cardinality_df.append([col, cardinality])\n    \nmissing_df = pd.DataFrame(missing_df, columns=['Column', 'Number of records', 'Total']).sort_values(\"Number of records\", ascending=False)\ncardinality_df = pd.DataFrame(cardinality_df, columns=['Column', 'Cardinality']).sort_values(\"Cardinality\", ascending=False)\ntype_df = [['Binary columns', len(binary_columns)], ['Numerical columns', len(true_numerical_columns)], ['Categorical columns', len(categorical_columns)]]\ntype_df = pd.DataFrame(type_df, columns=['Type', 'Column count']).sort_values('Column count', ascending=True)","d370cba2":"f, ax = plt.subplots(figsize=(7, 7))\nsns.barplot(x=\"Column count\", y=\"Type\", data=type_df, label=\"Missing\", palette='Spectral')\nplt.show()","af53b946":"f, ax = plt.subplots(figsize=(10, 15))\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Total\", y=\"Column\", data=missing_df, label=\"Missing\", color=\"orange\")\nsns.barplot(x=\"Number of records\", y=\"Column\", data=missing_df, label=\"Existing\", color=\"b\")\nax.legend(ncol=2, loc=\"upper right\", frameon=True)\nplt.show()","0a8df8cb":"f, ax = plt.subplots(figsize=(10, 15))\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"Cardinality\", y=\"Column\", data=cardinality_df, label=\"Existing\", color=\"red\")\nplt.show()","b4cdfc02":"f, ax = plt.subplots(figsize=(6, 6))\nax = sns.countplot(x=\"HasDetections\", data=train, label=\"Label count\")\nsns.despine(bottom=True)","4165ae21":"high_cardinality_columns = [c for c in categorical_columns if train[c].nunique() > 500]\nhigh_cardinality_columns.remove('MachineIdentifier')  # Remove ID\ntrain.drop(high_cardinality_columns, axis=1, inplace=True)\nprint('Columns with high cardinality: ', high_cardinality_columns)","3a972b7a":"high_null_columns = [c for c in train.columns if train[c].count() < len(train)*0.6]\ntrain.drop(high_null_columns, axis=1, inplace=True)\nprint('Columns with more than 40% null values: ', high_null_columns)","e60de0a2":"unwanted_columns = ['MachineIdentifier']\ntrain.drop(unwanted_columns, axis=1, inplace=True)","5106ba2d":"# Remove rows from numeric features with missing values (need this to plot distributions)\ntrain.dropna(subset=true_numerical_columns, inplace=True)","494b9072":"binary_columns, true_numerical_columns, categorical_columns = update_feature_lists()","47f1d656":"def plot_label_distribution():\n    for feature in (binary_columns + categorical_columns):\n        if 'Version' in feature and feature != 'Census_OSVersion':\n            sns.catplot(data=train, x=feature, col=\"HasDetections\", kind=\"count\", height=8).set_xticklabels(rotation=90)\n            sns.despine(left=True)\n            plt.tight_layout()\n\nplot_label_distribution()","b7986ec1":"def plot_label_distribution():\n    for feature in (binary_columns + categorical_columns):\n        if 'Build' in feature and feature != 'OsBuildLab':\n            sns.catplot(data=train, x=feature, col=\"HasDetections\", kind=\"count\", height=8).set_xticklabels(rotation=90)\n            sns.despine(left=True)\n            plt.tight_layout()\n\nplot_label_distribution()","ca524ef8":"def plot_distribution():\n    for feature in true_numerical_columns:\n        f, axes = plt.subplots(1, 3, figsize=(20, 8), sharex=True)\n        sns.distplot(train[feature], ax=axes[0]).set_title(\"Complete set\")\n        sns.distplot(train[train['HasDetections']==1][feature], ax=axes[1]).set_title(\"HasDetections = 1\")\n        sns.distplot(train[train['HasDetections']==0][feature], ax=axes[2]).set_title(\"HasDetections = 0\")\n        sns.despine(left=True)\n        plt.tight_layout()\n\nplot_distribution()","4b58aea0":"train.head()","a3005212":"train[true_numerical_columns].describe().T","97f977ee":"# Remove rows with NA\ntrain.dropna(inplace=True)","3c499c82":"# Get labels\nlabels = train['HasDetections']\ntrain.drop('HasDetections', axis=1, inplace=True)\n\nX_train, X_val, Y_train, Y_val = train_test_split(train, labels, test_size=0.15,random_state=1)","3a4ae261":"binary_columns, true_numerical_columns, categorical_columns = update_feature_lists()\n\n# Label encoder\nindexer = {}\nfor col in categorical_columns:\n    _, indexer[col] = pd.factorize(X_train[col])\n    \nfor col in categorical_columns:\n    X_train[col] = indexer[col].get_indexer(X_train[col])\n    X_val[col] = indexer[col].get_indexer(X_val[col])","e72f4c36":"params = {'num_leaves': 60,\n         'min_data_in_leaf': 100, \n         'objective':'binary',\n         'max_depth': -1,\n         'learning_rate': 0.1,\n         \"boosting\": \"gbdt\",\n         \"feature_fraction\": 0.8,\n         \"bagging_freq\": 1,\n         \"bagging_fraction\": 0.8 ,\n         \"bagging_seed\": 1,\n         \"metric\": 'auc',\n         \"lambda_l1\": 0.1,\n         \"random_state\": 133,\n         \"verbosity\": -1}","2c1c7600":"lgb_train = lgb.Dataset(X_train, label=Y_train)\nlgb_val = lgb.Dataset(X_val, label=Y_val)","aed97ab7":"model = lgb.train(params, lgb_train, 10000, valid_sets=[lgb_train, lgb_val], early_stopping_rounds=200, verbose_eval=100)","268e72c3":"lgb.plot_importance(model, figsize=(15, 10))\nplt.show()","61588013":"train_predictions_raw = model.predict(X_train, num_iteration=model.best_iteration)\nval_predictions_raw = model.predict(X_val, num_iteration=model.best_iteration)\n\ntrain_predictions = np.around(train_predictions_raw)\nval_predictions = np.around(val_predictions_raw)","29595471":"target_names=['HasDetections = 0', 'HasDetections = 1']\nprint('-----Train-----')\nprint(classification_report(Y_train, train_predictions, target_names=target_names))\nprint('-----Validation-----')\nprint(classification_report(Y_val, val_predictions, target_names=target_names))","4f03040d":"f, axes = plt.subplots(1, 2, figsize=(16, 5), sharex=True)\ntrain_cnf_matrix = confusion_matrix(Y_train, train_predictions)\nval_cnf_matrix = confusion_matrix(Y_val, val_predictions)\n\ntrain_cnf_matrix_norm = train_cnf_matrix \/ train_cnf_matrix.sum(axis=1)[:, np.newaxis]\nval_cnf_matrix_norm = val_cnf_matrix \/ val_cnf_matrix.sum(axis=1)[:, np.newaxis]\n\ntrain_df_cm = pd.DataFrame(train_cnf_matrix_norm, index=[0, 1], columns=[0, 1])\nval_df_cm = pd.DataFrame(val_cnf_matrix_norm, index=[0, 1], columns=[0, 1])\n\nsns.heatmap(train_df_cm, annot=True, fmt='.2f', cmap=\"Blues\", ax=axes[0]).set_title(\"Train\")\nsns.heatmap(val_df_cm, annot=True, fmt='.2f', cmap=\"Blues\", ax=axes[1]).set_title(\"Validation\")\nplt.show()","e601ba4f":"f, ax = plt.subplots(figsize=(24, 6))\nsns.set_color_codes(\"pastel\")\nax = sns.distplot(train_predictions_raw, color=\"blue\", kde_kws={\"label\": \"Train\"}, axlabel='Probability distribution')\nax = sns.distplot(val_predictions_raw, color=\"orange\", kde_kws={\"label\": \"Validation\"})\nsns.despine(left=True)","830f9d7f":"# Because of memory issues I'm loading only part of test set.\ntest = dd.read_csv('..\/input\/test.csv', dtype=dtypes, usecols=(['MachineIdentifier'] + list(X_train.columns))).head(n=1000000)","8f56f228":"submission = pd.DataFrame({\"MachineIdentifier\":test['MachineIdentifier']})\ntest.drop('MachineIdentifier', axis=1, inplace=True)\n\nfor col in categorical_columns:\n    test[col] = indexer[col].get_indexer(test[col])","5518adcd":"predictions = model.predict(test, num_iteration=model.best_iteration)","33af8ebb":"submission[\"HasDetections\"] = predictions\nsubmission.to_csv(\"submission.csv\", index=False)\nsubmission.head(10)","d29b7426":"Some of the features have too many categorical values (high cardinality), this can be a problem to some models, if you one-hot encode them you will end up with features too sparse, as this is a simple iteration I'll remove those features.","2bbb8a3e":"### Confusion matrix","c3230068":"## Exploratory Data Analysis [2nd part, clean data]\n\n### Correlate version and build features with the label\n\nI had an initial hypothesis that devices with older versions or builds would have more malware, since their vulnerabilities probably would be more well known, and could be used for malicious ends.","95dcf1c2":"## Predictions\n\n### Load test set","4bac32cf":"### About the features related to Version\n* EngineVersion and AppVersion: Both distributions seems to be almost the same.\n\nAlso as you can see newer versions have less data.","ac2154f7":"### Null values count","caf84634":"## Model training","e177c476":"## Pre process\n### Clean data\n#### Remove columns with high cardinality (more than 500 categories)","473b03aa":"As we can see, there are far more categorical columns than numerical or binary.","5025646e":"### About the features related to build\n* OsBuild and Census_OSBuildNumber: Not much going on here, seems to be something close to 50% malware detection and 50% with no malware detection.\n* Census_OSBuildRevision: Here things are more interesting, some categories have a similar label count, but some of them have a lot more of one label than the other.\n\n**About my hypothesis: With those visualizations it's hard to validate or drop it, we don't have enough data on more recent version or build features to say if they are more secure than older ones.**","ab8905c5":"### Raw dataset overview","fd998969":"## Exploratory Data Analysis [1st part, raw data]\n### Column type distribution","7f321d77":"### Train\/validation random split (85% train \/ 15% validation)","9dc5c979":"### Model feature importance","67a21378":"### Numeric columns distribution on the whole set and by label","d5e701b2":"Fortunately our label is balanced, this will make things easier for us.","beb2360e":"### Pre process test","80cf7f7e":"### Load data","50f32279":"#### Remove columns with more than 40% missing data","c369b3fc":"## Process data for LGB model","a0e6f476":"### Model metrics","1771c122":"### About the features related to build\n* Census_ProcessorCoreCount: Malware detection seems to more skewed towards right and non-detection are more concentrated on the first 10 values.\n* Census_PrimaryDiskTotalCapacity: The distributions seems to be the same.\n* Census_SystemVolumeTotalCapacity and Census_TotalPhysicalRAM: Malware detection seems to more concentrated on the beginning and non-detection seems to more skewed towards right.\n* Census_InternalPrimaryDiagonalDisplaySizeInInches: The distributions are very similar but non-detection have a longer right tail.\n* Census_InternalPrimaryDisplayResolutionHorizontal: The distributions seems to be the same.\n* Census_InternalPrimaryDisplayResolutionVertical: The distributions are very similar but non-detection have a longer right tail.\n* Census_InternalBatteryNumberOfCharges: The distributions seems to be the same.","e68153d1":"### Column cardinality\n* Only shown columns with cardinalities greater than 2","fe0bfca7":"## Output results","7a5b6e83":"### Label count","63172265":" For most of the feature we don't have too many missing values to worry about, but we have 7 features with more than 50% missing values, probably would be a good idea to remove them.","f4945220":"### Probabilities distribution\n* One thing that is often overlooked is the output probability from the models, this can help you see how confident your model is about it's predictions.\n* From your model probability distribution what you would like to see is a higher distribution on the extremes that would mean high probability of class 0 or 1, lots of values on the middle can mean that your model don't high confidence about it's predictions.","5b159a3d":"#### Remove unwanted columns","2f1cb528":"### Make predictions","d6f1dbf6":"<img src=\"https:\/\/raw.githubusercontent.com\/dimitreOliveira\/MachineLearning\/master\/Kaggle\/Microsoft%20Malware%20Prediction\/Microsoft_logo.png\" width=\"600\" height=\"170\">\n<h1><center>Microsoft Malware Prediction<\/center><\/h1>\n<h2><center>Can you predict if a machine will soon be hit with malware?<\/center><\/h2>\n\n### Content:\n* [Exploratory Data Analysis [1st part, raw data]](#Exploratory-Data-Analysis-[1st-part,-raw-data])\n* [Pre process](#Pre-process)\n* [Exploratory Data Analysis [2nd part, clean data]](#Exploratory-Data-Analysis-[2nd-part,-clean-data])\n* [Process data for LGB model](#Process-data-for-LGB-model)\n* [Model training](#Model-training)\n* [Predictions](#Predictions)\n* [Results](#Output-results)\n\n#### Checkout the second part of this EDA on [this kernel](https:\/\/www.kaggle.com\/dimitreoliveira\/malware-detection-extended-eda\/notebook)\n#### You can also find this on [GitHub here](https:\/\/github.com\/dimitreOliveira\/MachineLearning\/blob\/master\/Kaggle\/Microsoft%20Malware%20Prediction\/Malware%20Detection%20-%20EDA%20and%20LGBM.ipynb)\n\n### Dependencies"}}