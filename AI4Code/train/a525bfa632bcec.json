{"cell_type":{"133c6c93":"code","898a1ecb":"code","a686d9d2":"code","93919411":"code","2ae212e6":"code","f7aeb02e":"code","7284d99f":"code","34377919":"code","1176ae07":"code","b7c8efef":"code","b46e4583":"code","2aac910c":"code","e2ce6e37":"code","4abb10a2":"code","28782ab2":"code","e2398e25":"code","c2508066":"code","7a7e461f":"code","c54f059d":"code","6bc3a12f":"markdown","093be7f5":"markdown","f9bd9450":"markdown","1c006b26":"markdown","74e24c56":"markdown","99360db1":"markdown","086ed754":"markdown","c37a4b0a":"markdown","d7fed39d":"markdown","d0c1cd1f":"markdown","e8dc05b6":"markdown"},"source":{"133c6c93":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","898a1ecb":"import warnings; warnings.filterwarnings('ignore')\nimport numpy as np, pandas as pd, re, requests\nfrom sklearn import preprocessing\n\npd.set_option('display.max_rows', 500)\npd.set_option('display.max_columns', 500)\npd.set_option('display.width', 500)","a686d9d2":"## Read train and test data\n\ntrain =  pd.read_csv('\/kaggle\/input\/machinehack-buyers-time-prediction-challenge\/ParticipantData_BTPC\/Train.csv', low_memory = False ,parse_dates = ['date'])\ntest = pd.read_csv('\/kaggle\/input\/machinehack-buyers-time-prediction-challenge\/ParticipantData_BTPC\/Test.csv', low_memory = False ,parse_dates = ['date'])\n\nprint(f'Shape of train data: {train.shape}')\nprint(f'Shape of test data: {test.shape}')","93919411":"## Create a column with split identifier\n\ntrain['split_ID'] = 'Train'; test['split_ID'] = 'Test'\nall_df = pd.concat([train, test])","2ae212e6":"print(f'Shape of combined dataframe: {all_df.shape}')\ndisplay(all_df.head())","f7aeb02e":"all_df['year'] = pd.to_datetime(all_df['date']).dt.year\nall_df['quarter'] = pd.to_datetime(all_df['date']).dt.quarter\nall_df['weekofyear'] = pd.to_datetime(all_df['date']).dt.weekofyear\nall_df['month'] = pd.to_datetime(all_df['date']).dt.month\nall_df['day'] = pd.to_datetime(all_df['date']).dt.day\nall_df['hour'] = pd.to_datetime(all_df['date']).dt.hour\nall_df['minute'] = pd.to_datetime(all_df['date']).dt.minute\nall_df['dayofyear'] = pd.to_datetime(all_df['date']).dt.dayofyear\nall_df['dayofweek'] = pd.to_datetime(all_df['date']).dt.dayofweek\nall_df['is_weekend'] = np.where(all_df['dayofweek'].isin([6, 0]), 1, 0)\nall_df['season'] = ((all_df['month'] % 12 + 3) \/\/ 3)","7284d99f":"## Create a new column for cases where `client_agent` is null\nall_df['ca_isna'] = np.where(all_df['client_agent'].isnull(), 1, 0)","34377919":"all_df = all_df.fillna('')\nca_bydate_count = (all_df\n                   .fillna('')\n                   .groupby(['client_agent', \n                             'device_details',\n                             'split_ID', \n                             'date'])\n                   .size()\n                   .to_frame('ca_bydate_count')\n                   .reset_index())\n\nall_df = all_df.merge(ca_bydate_count, \n                      on = ['client_agent',\n                            'device_details',\n                            'split_ID', \n                            'date'],\n                      how = 'left')\n\ndisplay(all_df[['client_agent', 'device_details', 'ca_bydate_count']].drop_duplicates())","1176ae07":"## Helper function for replacing values\ndef replace_all(text, dic):\n    for i, j in dic.items():\n        text = text.replace(i, j)\n    return text\n\n## Helper function to create columns after replacement is done\ndef get_col(col_type):\n    all_df['ca_{}'.format(col_type)] = all_df['ca_updated'].apply(\n    lambda x: re.findall('{}\/\/.*?\\\\\\\\'.format(col_type), x, flags = re.DOTALL))\n    all_df['ca_{}'.format(col_type)] = [' '.join(x) for x in list(all_df['ca_{}'.format(col_type)])]\n    all_df['ca_{}'.format(col_type)] = (all_df['ca_{}'.format(col_type)]\n                        .str.replace('\\\\', '')\n                        .str.replace('{}\/\/'.format(col_type), '')\n                        .str.strip())\n    return all_df['ca_{}'.format(col_type)]","b7c8efef":"to_repl = {'Product\/': '\\\\\\Product\/\/',\n           'Mozilla\/': '\\\\\\Mozilla\/\/',\n           'AppleWebKit\/': '\\\\\\AppleWebKit\/\/',\n           'Chrome\/': '\\\\\\Chrome\/\/',\n           'Safari\/': '\\\\\\Safari\/\/',\n           'Mobile\/': '\\\\\\Mobile\/\/',\n           'iPhone\/': '\\\\\\iPhone\/\/',\n           'Android\/': '\\\\\\Android\/\/',\n           'Carrier\/': '\\\\\\Carrier\/\/',\n           'Type\/': '\\\\\\Type\/\/',\n           'Device\/': '\\\\\\Device\/\/',\n           'Gecko\/': '\\\\\\Gecko\/\/',\n           'iPad\/': '\\\\\\iPad\/\/',\n           'https:\/\/': 'https:\/',\n           'Typhoeus -': '\\\\\\Typhoeus\/\/',\n           'Firefox\/': '\\\\\\Firefox\/\/',\n           'Opera\/': '\\\\\\Opera\/\/',\n           'Presto\/': '\\\\\\Presto\/\/',\n           'CFNetwork\/': '\\\\\\CFNetwork\/\/',\n           'Darwin\/': '\\\\\\Darwin\/\/',\n           'CriOS\/': '\\\\\\CriOS\/\/',\n           'Dalvik\/': '\\\\\\Dalvik\/\/',\n           'GSA\/': '\\\\\\GSA\/\/'}\n\nall_df['ca_updated'] = all_df['client_agent'].apply(lambda x: replace_all(x, to_repl))\nall_df['ca_updated'] = all_df['ca_updated'] + '\\\\\\\\'\nall_df['ca_Product'] = get_col('Product')\nall_df['ca_Mozilla'] = get_col('Mozilla')\nall_df['ca_AppleWebKit'] = get_col('AppleWebKit')\nall_df['ca_Chrome'] = get_col('Chrome')\nall_df['ca_Safari'] = get_col('Safari')\nall_df['ca_Mobile'] = get_col('Mobile')\nall_df['ca_iPhone'] = get_col('iPhone')\nall_df['ca_Android'] = get_col('Android')\nall_df['ca_Carrier'] = get_col('Carrier')\nall_df['ca_Type'] = get_col('Type')\nall_df['ca_Device'] = get_col('Device')\nall_df['ca_Gecko'] = get_col('Gecko')\nall_df['ca_iPad'] = get_col('iPad')\nall_df['ca_Typhoeus'] = get_col('Typhoeus')\nall_df['ca_Firefox'] = get_col('Firefox')\nall_df['ca_Opera'] = get_col('Opera')\nall_df['ca_Presto'] = get_col('Presto')\nall_df['ca_CFNetwork'] = get_col('CFNetwork')\nall_df['ca_Darwin'] = get_col('Darwin')\nall_df['ca_CriOS'] = get_col('CriOS')\nall_df['ca_Dalvik'] = get_col('Dalvik')\nall_df['ca_GSA'] = get_col('GSA')\nall_df['ca_Chrome'] = all_df['ca_Chrome'].str.replace('Mobile', '')","b46e4583":"## Dropping `ca_updated` column\nall_df.drop(['ca_updated'], axis = 1, inplace = True)\n\n## Value counts of parsed columns\nnew_cols = list(all_df.select_dtypes(include = 'O').filter(like = 'ca_', axis = 1).columns)\n# new_cols = new_cols[3:]\nfor col in new_cols:\n    print('Value counts in {}:'.format(col)) \n    display(pd.DataFrame([all_df[col].value_counts(ascending = False).head(20), all_df[col].value_counts(normalize = True, ascending = False).head(20)], index = ['VC', 'Norm_VC']).T)","2aac910c":"## ca_Product\nall_df['ca_Product'] = all_df['ca_Product'].str.split('.').str[0].fillna('UNK')\nprint('Value counts in ca_Product')\ndisplay(all_df['ca_Product'].value_counts(dropna = False))","e2ce6e37":"## ca_AppleWebKit\nall_df['ca_AppleWebKit'] = (all_df['ca_AppleWebKit'].astype(str)\n                            .str.split('\/')\n                            .str[0]\n                            .str.replace(' (KHTML, like Gecko)','', regex = False)\n                            .str.replace('(KHTML, like Gecko)', '', regex = False)\n                            .str.lower().str.replace('version', '')\n                            .str.strip()\n                            .str.split('.')\n                            .str[0]\n                            .str.replace('nan', 'UNK'))\nprint('Value counts in ca_AppleWebKit')\ndisplay(all_df['ca_AppleWebKit'].value_counts(dropna = False))","4abb10a2":"# ca_Mozilla\nsuff = []\nfor row in list(all_df['ca_Mozilla'].fillna('')):\n    if (('5.0' in row.lower()) and ('windows nt' in row.lower())):\n        suff.append('5.0 Windows NT')\n    elif (('5.0' in row.lower()) and ('iphone' in row.lower())):\n        suff.append('5.0 iPhone')\n    elif (('5.0' in row.lower()) and ('mac os' in row.lower())):\n        suff.append('5.0 Mac OS')\n    else:\n        suff.append('UNK')\nall_df['ca_Mozilla'] = pd.Series(suff)\n\nprint('Value counts in ca_Mozilla')\ndisplay(all_df['ca_Mozilla'].value_counts(dropna = False))","28782ab2":"# ca_Chrome and ca_Safari\nall_df['ca_Chrome'] = all_df['ca_Chrome'].str[:2].str.strip().fillna('UNK')\nall_df['ca_Safari'] = all_df['ca_Safari'].str.split('.').str[0].fillna('UNK')\n\nprint('Value counts in ca_Chrome and ca_Safari')\ndisplay(all_df['ca_Chrome'].value_counts(dropna = False), all_df['ca_Safari'].value_counts(dropna = False))","e2398e25":"## ca_Mobile and ca_iPhone\nall_df.loc[(all_df['ca_Mobile'] != '') & (all_df['ca_Mobile'].str.len() < 6), 'ca_Mobile'] = all_df['ca_Mobile'].str.zfill(6)\nall_df['ca_Mobile'] = all_df['ca_Mobile'].str[:6].str.strip()\nall_df.loc[all_df['ca_iPhone'] != '', 'ca_iPhone'] = all_df['ca_iPhone'].str[:1].str.strip()\n\nall_df['ca_Mobile_iPhone'] = np.NaN\nall_df.loc[(all_df['ca_iPhone'] != '') & (all_df['ca_Mobile'] == ''), 'ca_Mobile_iPhone'] = all_df['ca_iPhone']\nall_df.loc[(all_df['ca_iPhone'] == '') & (all_df['ca_Mobile'] != ''), 'ca_Mobile_iPhone'] = all_df['ca_Mobile']\nall_df['ca_Mobile_iPhone'] = all_df['ca_Mobile_iPhone'].fillna('UNK')\ndel all_df['ca_Mobile'], all_df['ca_iPhone']\n\nprint('Value counts in ca_Mobile_iPhone column created')\ndisplay(all_df['ca_Mobile_iPhone'].value_counts(dropna = False))","c2508066":"display(all_df.head())","7a7e461f":"le_cols = list(all_df.select_dtypes(include = 'O').filter(regex = 'ca_', axis = 1).columns)\nle_cols.extend(['device_details'])\n\nfor col in le_cols:\n    print(f'Label Encoded Col: {col}')\n    LE = preprocessing.LabelEncoder()\n    all_df[col + '_enc_le'] = LE.fit_transform(all_df[col].astype(str))\n    display(pd.DataFrame([all_df[col], all_df[col + '_enc_le']], index = ['Values', 'LE Values']).T.drop_duplicates())\n    all_df.drop(col, axis = 1, inplace = True)","c54f059d":"print(f'Shape of combined dataframe after feature engineering: {all_df.shape}')\ndisplay(all_df.head())","6bc3a12f":"### Label Encoding\nColumns label encoded\n- `ca_Product`, \n- `ca_Mozilla` \n- `ca_AppleWebKit` \n- `ca_Chrome` \n- `ca_Safari` \n- `ca_Android` \n- `ca_Carrier` \n- `ca_Type` \n- `ca_Device` \n- `ca_Gecko` \n- `ca_iPad` \n- `ca_Typhoeus` \n- `ca_Firefox` \n- `ca_Opera` \n- `ca_Presto` \n- `ca_CFNetwork` \n- `ca_Darwin` \n- `ca_CriOS` \n- `ca_Dalvik` \n- `ca_GSA` \n- `ca_Mobile_iPhone` \n- `device_details`\n\nWe would be also dropping these columns from all_df dataframe","093be7f5":"### Read data","f9bd9450":"### Add features based on `client_agent`\n1. Clean `client_agent` with `to_repl` dictionary values\n2. To achieve the above we will make use of a helper function\n3. Create new column for each category of replace we did","1c006b26":"### Adding a column to store rows where `client_agent` is null","74e24c56":"### Column with count of `client_agent` and `device_details` by date","99360db1":"### Here's a quick recap\nWe added:\n- Datetime features\n- Column to store rows where client_agent is null\n- Column with count of client_agent and device_details by date\n- Features based on client_agent\nAnd done:\n- Label encode string columns\n\nLB Position with these features: Private: 39, Public: 37 (in top 10%)\n\nPlease UPVOTE \ud83d\udc4d","086ed754":"## Machine Hack Buyer's Time Prediction - Feature Engineering\n\nBuyers spend a significant amount of time surfing an e-commerce store, since the pandemic the e-commerce has seen a boom in the number of users across the domains. In the meantime, the store owners are also planning to attract customers using various algorithms to leverage customer behavior patterns.\n\nTracking customer activity is also a great way of understanding customer behavior and figuring out what can actually be done to serve them better. Machine learning and AI has already played a significant role in designing various recommendation engines to lure customers by predicting their buying patterns.\n\nWe are provided with the visitor's session data and are required to create a regression algorithm to predict the time a buyer will spend on the platform.\n\n### Attribute Description\n- `session_id`: Unique identifier for every row\n- `session_number`: Session type identifier\n- `client_agent`: Client-side software details\n- `device_details`: Client-side device details\n- `date`: Datestamp of the session\n- `purchased`: Binary value for any purchase done\n- `added_in_cart`: Binary value for cart activity\n- `checked_out`:  Binary value for checking out successfully\n- `time_spent`: Total time spent in seconds (Target Column)\n\nHere the analysis will be focused on creating features, particularly (and most importantly) based on `client_agent` feature.","c37a4b0a":" ### Get a view of dataframe after feature engineering","d7fed39d":"### Adding datetime features\nAdd datetime features such as `year`, `quarter`, `weekofyear`, `month`, `day`, `hour`, `minute`, `dayofyear`, `dayofweek` and `is_season`. Values in `season` are like 1, 2, 3, 4. For e.g. 1 represents Dec, Jan and Feb and 2 is March, April and May. \n\nQuick reference: `{1:'DJF', 2: 'MAM', 3:'JJA', 4:'SON'}`","d0c1cd1f":"### Further cleaning those `ca_*` columns added\n1. `ca_Product`: Replacing *'.'* and get first element, replace NAs with UNK\n2. `ca_AppleWebKit`: Split by *'\/'* and get first element and then replace *' (KHTML, like Gecko)'*, *'(KHTML, like Gecko)'* and *'version'* with blanks. Split by *'.'* and get first element, replace NAs with UNK. Here NAs were converted to *'nan'* when we used `.astype(str)` method.\n3. `ca_Mozilla`: Most of the rows have a pattern and use those to clean this column further.\n4. `ca_Chrome` and `ca_Safari`: Take only first two part of the versions captured in these columns.\n5. `ca_Mobile` and `ca_iPhone`: These again have a pattern i.e. one is available when other is not and yes there are rows where both of these are nulls as well. Added a column to capture that.\n\n\n","e8dc05b6":"### Import Packages"}}