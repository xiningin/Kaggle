{"cell_type":{"974ce0a3":"code","f3c94125":"code","8553a2aa":"code","b28f7d9f":"code","53e3aca5":"code","47d88a07":"code","0141c084":"code","ce6d5623":"code","a4021ebb":"code","d6aadebf":"code","6a7a1c64":"code","8f559f09":"code","7ce4cceb":"code","05b999bf":"code","4ffe338e":"code","5da975eb":"code","a5a2db1e":"code","c7b0ed3a":"code","38eba81f":"code","7a7c0291":"code","2d6716d1":"code","13bb64eb":"code","7c7886bf":"code","76614c03":"code","50ff684b":"code","44e1bd9e":"code","5fb5520d":"code","15522a1f":"code","a1eac22d":"code","16cb9b48":"code","4b53352b":"code","42715456":"code","e14fda25":"code","f1791290":"code","616f477e":"code","15b890b4":"code","c3430f57":"code","d63c13cf":"code","be50baa5":"code","f47b81f7":"code","3742d3b2":"code","ff7be865":"code","4a4da1a2":"code","92dc11a4":"code","a304fe23":"code","05aacc6a":"code","7a8fe22f":"code","df5ba8c0":"code","aef10bb2":"code","b95d3f39":"code","f94fce20":"code","c4075217":"code","8e564c83":"code","4f3b4e8d":"code","7270c997":"code","96755570":"code","b9afa4ff":"code","d3efc6e0":"code","ff256e1a":"code","6e4e1a28":"code","f2715921":"code","ebc11a8d":"code","1e580e82":"code","56a79e5e":"code","4b8cc099":"code","34cce184":"code","589699b6":"code","3cbbf3ca":"code","09af4435":"code","43a04faa":"code","1ecc7d83":"code","36e075ed":"code","56accf33":"code","307abe3a":"code","01c8eabc":"code","beb3dc12":"code","cffe436b":"code","eca5944d":"code","456fe842":"code","7ebced8f":"code","54744665":"code","591ba9dc":"code","86505f20":"code","bf7b15f3":"code","c5eb1078":"code","3d43efc3":"code","6b83a784":"code","11a93f39":"code","cabb6787":"code","25add13c":"code","37c5f79f":"code","aeee7c96":"code","81d771b4":"code","53cb40d0":"code","e45fb6f8":"code","c4cb0660":"code","36ce1c21":"code","8c3eb59c":"code","0c9dd74d":"code","b85a370a":"code","b043d3b6":"code","d977aa7b":"code","314d1e45":"code","54fa59ca":"code","84682c6a":"code","c30315d1":"code","8c7caf09":"code","63c5481e":"code","0ee90334":"code","d6884bb9":"code","1b8f20d4":"code","79f92235":"code","3c486cab":"code","7a57f525":"code","eabd8d2d":"code","a805eefe":"code","ddf56047":"code","9b2745c1":"code","752eba85":"code","8c42b365":"code","92259f09":"code","7ee0424f":"code","5f21cc71":"code","5a0efa7d":"code","9192158c":"code","91835b07":"code","f07eda2f":"code","1f5c3ff2":"code","35705798":"code","69a37b0c":"code","dfdb4af3":"code","f2236174":"markdown","682a0c7c":"markdown","ab1ec87b":"markdown","fca993d4":"markdown","94c87f97":"markdown","c8ab8352":"markdown","af20ea22":"markdown","314ef3a7":"markdown","8c4e9bd9":"markdown","3055a9ee":"markdown","d8721f0d":"markdown","d5bdc9ae":"markdown","f3defbb4":"markdown","f025902d":"markdown"},"source":{"974ce0a3":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom scipy import stats\n%matplotlib inline\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import classification_report\nfrom sklearn.metrics import confusion_matrix\nfrom sklearn.feature_selection import RFE\nimport statsmodels.api as sm\nfrom statsmodels.stats.outliers_influence import variance_inflation_factor\nfrom sklearn.ensemble import RandomForestClassifier\nimport time\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn import metrics, preprocessing, tree\nfrom sklearn.metrics import f1_score, make_scorer\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import roc_auc_score\nfrom IPython.display import Image  \nfrom sklearn.externals.six import StringIO  \nfrom sklearn.tree import export_graphviz\nimport xgboost\nfrom sklearn.metrics import roc_auc_score","f3c94125":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","8553a2aa":"def missingdata(data):\n    total = data.isnull().sum().sort_values(ascending = False)\n    percent = (data.isnull().sum()\/data.isnull().count()*100).sort_values(ascending = False)\n    ms=pd.concat([total, percent], axis=1, keys=['Total', 'Percent'])\n    ms= ms[ms[\"Percent\"] > 0]\n    f,ax =plt.subplots(figsize=(8,6))\n    plt.xticks(rotation='90')\n    fig=sns.barplot(ms.index, ms[\"Percent\"],color=\"green\",alpha=0.8)\n    plt.xlabel('Features', fontsize=15)\n    plt.ylabel('Percent of missing values', fontsize=15)\n    plt.title('Percent missing data by feature', fontsize=15)\n    return ms","b28f7d9f":"df1 = pd.read_csv('\/kaggle\/input\/TrainDataset.csv')","53e3aca5":"df2 = pd.read_csv('\/kaggle\/input\/TestDataset.csv')","47d88a07":"df1.head()","0141c084":"df2.head()","ce6d5623":"sns.heatmap(df1.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","a4021ebb":"sns.heatmap(df2.isnull(),yticklabels=False,cbar=False,cmap='viridis')\nplt.show()","d6aadebf":"df1.info()","6a7a1c64":"df1.isnull().sum()","8f559f09":"df2.isnull().sum()","7ce4cceb":"df1.describe()","05b999bf":"df1.corr()","4ffe338e":"fig = plt.figure(figsize=(12,10))\nsns.heatmap(df1.corr(),annot=True,cmap='Blues')\nplt.xticks(rotation = 45)\nplt.show()","5da975eb":"df1.head()","a5a2db1e":"def plot_feature(df,col):\n    plt.figure(figsize=(14,6))\n    plt.subplot(1,2,1)\n    if df[col].dtype == 'int64':\n        df[col].value_counts().sort_index().plot()\n    else:\n        mean = df.groupby(col)['popularity'].mean()\n        df[col] = df[col].astype('category')\n        levels = mean.sort_values().index.tolist()\n        df[col].cat.reorder_categories(levels,inplace=True)\n        df[col].value_counts().plot()\n    plt.xticks(rotation=45)\n    plt.xlabel(col)\n    plt.ylabel('Counts')\n    plt.subplot(1,2,2)\n    \n    if df[col].dtype == 'int64' or col == 'buying_price':\n        mean = df.groupby(col)['popularity'].mean()\n        std = df.groupby(col)['popularity'].std()\n        mean.plot()\n        plt.fill_between(range(len(std.index)),mean.values-std.values,mean.values + std.values, \\\n                        alpha=0.1)\n    else:\n        sns.boxplot(x = col,y='popularity',data=df)\n    plt.xticks(rotation=45)\n    plt.ylabel('popularity')\n    plt.show()    ","c7b0ed3a":"plot_feature(df1,'buying_price')","38eba81f":"plot_feature(df1,'maintainence_cost')","7a7c0291":"plot_feature(df1,'number_of_doors')","2d6716d1":"plot_feature(df1,'number_of_seats')","13bb64eb":"plot_feature(df1,'luggage_boot_size')","7c7886bf":"plot_feature(df1,'safety_rating')","76614c03":"plot_feature(df1,'popularity')","50ff684b":"sns.pairplot(df1,diag_kind='kde')\nplt.show()","44e1bd9e":"sns.distplot(df1['popularity']);","5fb5520d":"plt.figure(figsize=(14,6))\nplt.subplot(1,2,1)\nsns.boxplot(df1.popularity)\nplt.subplot(1,2,2)\nsns.distplot(df1.popularity,bins=20)\nplt.show()","15522a1f":"for col in df1[:-1]:\n    plt.figure(figsize=(10,8))\n    sns.jointplot(x = df1[col],y = df1[\"popularity\"],kind='reg')\n    plt.xlabel(col,fontsize = 15)\n    plt.ylabel(\"popularity\",fontsize = 15)\n    plt.grid()\n    plt.show()","a1eac22d":"rows =2\n\ncols = 3\n\nfig,ax = plt.subplots(nrows=rows,ncols=cols,figsize=(16,5))\n\ncol = df1.columns\n\nindex = 0\n\nfor i in range(rows):\n    for j in range(cols):\n        sns.distplot(df1[col[index]],ax=ax[i][j])\n        index = index + 1\n        \nplt.tight_layout()","16cb9b48":"col = ['buying_price', 'maintainence_cost', 'number_of_doors','number_of_seats', 'luggage_boot_size', 'safety_rating', 'popularity']","4b53352b":"col","42715456":"col = ['buying_price', 'maintainence_cost', 'number_of_doors','number_of_seats', 'luggage_boot_size', 'safety_rating', 'popularity']\n\n\nfig, axis = plt.subplots(3, 3,  figsize=(25, 20))\n\ncounter = 0\nfor items in col:\n    value_counts = df1[items].value_counts()\n    \n    trace_x = counter \/\/ 3\n    trace_y = counter % 3\n    x_pos = np.arange(0, len(value_counts))\n    my_colors = 'rgbkymc'\n    \n    axis[trace_x, trace_y].bar(x_pos, value_counts.values, tick_label = value_counts.index,color=my_colors)\n    \n    axis[trace_x, trace_y].set_title(items)\n    \n    for tick in axis[trace_x, trace_y].get_xticklabels():\n        tick.set_rotation(90)\n    \n    counter += 1\n\nplt.tight_layout()\nplt.show()","e14fda25":"fig, axis = plt.subplots(3, 3, sharex=False, sharey=False, figsize=(20, 15))\n\ncounter = 0\nfor items in col:\n    \n    trace_x = counter \/\/ 3\n    trace_y = counter % 3\n    \n    \n    axis[trace_x, trace_y].hist(df1[items])\n    \n    axis[trace_x, trace_y].set_title(items)\n    \n    counter += 1\n\nplt.tight_layout()\nplt.show()","f1791290":"def plot_count(x,fig):\n    plt.subplot(4,2,fig)\n   \n    sns.countplot(df1[x],palette=(\"magma\"))\n    plt.subplot(4,2,(fig+1))\n    \n    sns.boxplot(x=df1[x], y=df1.popularity, palette=(\"magma\"))\n    \nplt.figure(figsize=(15,20))\n\nplot_count('buying_price', 1)\nplot_count('maintainence_cost', 3)\nplot_count('number_of_doors', 5)\nplot_count('number_of_seats', 7)\n\n\n\nplt.tight_layout()\nplt.show()","616f477e":"def plot_count(x,fig):\n    plt.subplot(4,2,fig)\n   \n    sns.countplot(df1[x],palette=(\"magma\"))\n    plt.subplot(4,2,(fig+1))\n    \n    sns.boxplot(x=df1[x], y=df1.popularity, palette=(\"magma\"))\n    \nplt.figure(figsize=(15,20))\n\nplot_count('luggage_boot_size', 1)\nplot_count('safety_rating', 3)\n\n\n\n\n\nplt.tight_layout()\nplt.show()","15b890b4":"plt.figure(figsize=(25, 6))\n\n\nplt.subplot(1,2,1)\nplt1 = df1.buying_price.value_counts().plot('bar')\nplt.title('buying_price')\n\n\nplt.subplot(1,2,2)\nplt1 = df1.maintainence_cost.value_counts().plot('bar')\nplt.title('maintainence_cost')\n\nplt.figure(figsize=(25, 6))\n\nplt.subplot(1,2,1)\nplt1 = df1.number_of_doors.value_counts().plot('bar')\nplt.title('number_of_doors')\nplt.show()\n\nplt.subplot(1,2,2)\nplt1 = df1.number_of_seats.value_counts().plot('bar')\nplt.title('number_of_seats')\nplt.show()\n\n\nplt.figure(figsize=(25, 6))\n\nplt.subplot(1,2,1)\nplt1 = df1.luggage_boot_size.value_counts().plot('bar')\nplt.title('luggage_boot_size')\nplt.show()\n\nplt.subplot(1,2,2)\nplt1 = df1.safety_rating.value_counts().plot('bar')\nplt.title('safety_rating')\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.tight_layout()\nplt.show()","c3430f57":"for item in col[:-1]:\n    plt.figure(figsize=(10,8))\n    sns.violinplot(df1[item],df1[\"popularity\"])\n    \n    plt.xlabel(item,fontsize=12)\n    plt.ylabel(\"popularity\",fontsize=12)\n    plt.show()","d63c13cf":"for item in col[:-1]:\n    plt.figure(figsize=(10,8))\n    sns.boxplot(df1[item],df1[\"popularity\"])\n    \n    plt.xlabel(item,fontsize=12)\n    plt.ylabel(\"popularity\",fontsize=12)\n    plt.show()","be50baa5":"for item in col:\n    plt.figure(figsize=(10,8))\n    plt.boxplot(df1[item])\n    \n    plt.xlabel(item,fontsize=12)\n    plt.show()","f47b81f7":"sns.pairplot(df1, x_vars=col[:-1], y_vars='popularity', markers=\"+\", size=4)\nplt.show()","3742d3b2":"sns.catplot(x=\"buying_price\", y=\"popularity\", hue=\"maintainence_cost\", kind=\"point\", data=df1);","ff7be865":"for item in df1[:-1]:\n    plt.figure(figsize=(10,8))\n   \n    sns.distplot(df1[item], kde=False, fit=stats.gamma);\n    \n    plt.xlabel(item,fontsize=12)\n    plt.ylabel(\"popularity\",fontsize=12)\n    plt.show()","4a4da1a2":"df1.describe()","92dc11a4":"q = df1.popularity.describe()\nprint(q)\nIQR    = q['75%'] - q['25%']\nUpper  = q['75%'] + 1.5 * IQR\nLower  = q['25%'] - 1.5 * IQR\nprint(\"the upper and lower outliers are {} and {}\".format(Upper,Lower))","a304fe23":"df1.head()","05aacc6a":"X = df1.drop('popularity',axis=1)","7a8fe22f":"y = df1[['popularity']]","df5ba8c0":"X.head()","aef10bb2":"y.head()","b95d3f39":"X.shape","f94fce20":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","c4075217":"logreg = LogisticRegression()","8e564c83":"logreg.fit(X_train,y_train)","4f3b4e8d":"logreg.intercept_","7270c997":"logreg.coef_","96755570":"predlog = logreg.predict(X_test)","b9afa4ff":"confusion_matrix(y_test,predlog)","d3efc6e0":"print(classification_report(y_test,predlog))","ff256e1a":"accuracy_score(y_test,predlog)","6e4e1a28":"predlog = logreg.predict(df2)","f2715921":"predlog","ebc11a8d":"log1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\nlog1.fit().summary()","1e580e82":"vif = pd.DataFrame()\nvif['Features'] = X_train.columns\nvif['VIF'] = [variance_inflation_factor(X_train.values, i) for i in range(X_train.shape[1])]\nvif['VIF'] = round(vif['VIF'], 25)\nvif = vif.sort_values(by = \"VIF\", ascending = False)\nvif","56a79e5e":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","4b8cc099":"rf = RandomForestClassifier(n_estimators=100)","34cce184":"rf.fit(X_train,y_train)","589699b6":"predrf = rf.predict(X_test)","3cbbf3ca":"confusion_matrix(y_test,predrf)","09af4435":"print(classification_report(y_test,predrf))","43a04faa":"accuracy_score(y_test,predrf)","1ecc7d83":"scores = cross_val_score(rf, X_train, y_train, cv=5, scoring='f1_macro')","36e075ed":"scores.mean()","56accf33":"rf.fit(X_train, y_train)\ntrain_predictions = rf.predict(X_train)\ntest_predictions = rf.predict(X_test)","307abe3a":"rf","01c8eabc":"print('The Training F1 Score is', f1_score(train_predictions, y_train,average='macro'))\nprint('The Testing F1 Score is', f1_score(test_predictions, y_test,average='macro'))","beb3dc12":"def timeit(method):\n    def timed(*args, **kw):\n        ts = time.time()\n        result = method(*args, **kw)\n        te = time.time()\n        if 'log_time' in kw:\n            name = kw.get('log_name', method.__name__.upper())\n            kw['log_time'][name] = int((te - ts) * 1000)\n        else:\n            print('%r  %2.2f ms' % \\\n                  (method.__name__, (te - ts) * 1000))\n        return result\n    return timed","cffe436b":"parameters = {   \n              'max_depth':[10,20,30,40,50], \n              'min_samples_leaf':[1,2,3,4,5], \n              'min_samples_split':[2,3,4,5],\n              'n_estimators': [10, 30, 50, 100,200],\n              'criterion' : ['gini','entropy']}\nscorer = make_scorer(f1_score,average ='macro')","eca5944d":"@timeit\ndef generate_model_from_search(grid_or_random,model, parameters, scorer, X, y):\n    if grid_or_random == \"Grid\":\n        search_obj = GridSearchCV(model, parameters, scoring=scorer)\n    elif grid_or_random == \"Random\":\n        search_obj = RandomizedSearchCV(model, parameters, scoring=scorer)\n    fit_obj = search_obj.fit(X, y)\n    best_model = fit_obj.best_estimator_\n    return best_model","456fe842":"best_model_random = generate_model_from_search(\"Random\", \n                                           rf, \n                                           parameters, \n                                           scorer, \n                                           X_train, \n                                           y_train,\n                                            )","7ebced8f":"scores = cross_val_score(best_model_random, X_train, y_train, cv=5,n_jobs=-1, verbose=1, scoring='f1_macro')\nscores.mean()","54744665":"best_model_random.fit(X_train, y_train)\nbest_train_predictions = best_model_random.predict(X_train)\nbest_test_predictions = best_model_random.predict(X_test)\n\nprint('The training F1 Score is', f1_score(best_train_predictions, y_train,average='macro'))\nprint('The testing F1 Score is', f1_score(best_test_predictions, y_test,average='macro'))","591ba9dc":"print(classification_report(y_test,best_test_predictions))","86505f20":"confusion_matrix(y_test,best_test_predictions)","bf7b15f3":"accuracy_score(y_test,best_test_predictions)","c5eb1078":"best_test_predictions_Rf = best_model_random.predict(df2)","3d43efc3":"best_test_predictions_Rf","6b83a784":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","11a93f39":"dt_default = DecisionTreeClassifier(max_depth=5)\ndt_default.fit(X_train, y_train)","cabb6787":"y_pred_default = dt_default.predict(X_test)\nprint(classification_report(y_test, y_pred_default))","25add13c":"print(confusion_matrix(y_test,y_pred_default))\nprint(accuracy_score(y_test,y_pred_default))","37c5f79f":"features = list(df1.columns[:-1])\nfeatures","aeee7c96":"from sklearn.model_selection import KFold\nfrom sklearn.model_selection import GridSearchCV\n\nn_folds = 5\nparameters = {'max_depth': range(1, 40)}\ndtree = DecisionTreeClassifier(criterion = \"gini\", \n                               random_state = 100)\ntree = GridSearchCV(dtree, parameters, \n                    cv=n_folds, \n                   scoring=\"accuracy\",return_train_score=True)\ntree.fit(X_train, y_train)","81d771b4":"scores = tree.cv_results_\npd.DataFrame(scores).head()","53cb40d0":"plt.figure()\nplt.plot(scores[\"param_max_depth\"], \n         scores[\"mean_train_score\"], \n         label=\"training accuracy\")\nplt.plot(scores[\"param_max_depth\"], \n         scores[\"mean_test_score\"], \n         label=\"test accuracy\")\nplt.xlabel(\"max_depth\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","e45fb6f8":"n_folds = 5\nparameters = {'min_samples_leaf': range(5, 200, 20)}\ndtree = DecisionTreeClassifier(criterion = \"gini\", \n                               random_state = 100)\ntree = GridSearchCV(dtree, parameters, \n                    cv=n_folds, \n                   scoring=\"accuracy\",return_train_score=True)\ntree.fit(X_train, y_train)","c4cb0660":"scores = tree.cv_results_\npd.DataFrame(scores).head()","36ce1c21":"plt.figure()\nplt.plot(scores[\"param_min_samples_leaf\"], \n         scores[\"mean_train_score\"], \n         label=\"training accuracy\")\nplt.plot(scores[\"param_min_samples_leaf\"], \n         scores[\"mean_test_score\"], \n         label=\"test accuracy\")\nplt.xlabel(\"min_samples_leaf\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","8c3eb59c":"n_folds = 5\nparameters = {'min_samples_split': range(5, 200, 20)}\ndtree = DecisionTreeClassifier(criterion = \"gini\", \n                               random_state = 100)\ntree = GridSearchCV(dtree, parameters, \n                    cv=n_folds, \n                   scoring=\"accuracy\",return_train_score=True)\ntree.fit(X_train, y_train)","0c9dd74d":"scores = tree.cv_results_\npd.DataFrame(scores).head()","b85a370a":"plt.figure()\nplt.plot(scores[\"param_min_samples_split\"], \n         scores[\"mean_train_score\"], \n         label=\"training accuracy\")\nplt.plot(scores[\"param_min_samples_split\"], \n         scores[\"mean_test_score\"], \n         label=\"test accuracy\")\nplt.xlabel(\"min_samples_split\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","b043d3b6":"param_grid = {\n    'max_depth': range(5, 15, 5),\n    'min_samples_leaf': range(50, 150, 50),\n    'min_samples_split': range(50, 150, 50),\n    'criterion': [\"entropy\", \"gini\"]\n}\nn_folds = 5\ndtree = DecisionTreeClassifier()\ngrid_search = GridSearchCV(estimator = dtree, param_grid = param_grid, \n                          cv = n_folds, verbose = 1,return_train_score=True)\ngrid_search.fit(X_train,y_train)","d977aa7b":"cv_results = pd.DataFrame(grid_search.cv_results_)\ncv_results","314d1e45":"plt.figure()\nplt.plot(scores[\"param_min_samples_split\"], \n         scores[\"mean_train_score\"], \n         label=\"training accuracy\")\nplt.plot(scores[\"param_min_samples_split\"], \n         scores[\"mean_test_score\"], \n         label=\"test accuracy\")\nplt.xlabel(\"min_samples_split\")\nplt.ylabel(\"Accuracy\")\nplt.legend()\nplt.show()","54fa59ca":"print(\"best accuracy\", grid_search.best_score_)\nprint(grid_search.best_estimator_)","84682c6a":"clf_gini = DecisionTreeClassifier(criterion = \"gini\", \n                                  random_state = 100,\n                                  max_depth=10, \n                                  min_samples_leaf=50,\n                                  min_samples_split=50)\nclf_gini.fit(X_train, y_train)","c30315d1":"clf_gini.score(X_test,y_test)","8c7caf09":"clf_gini = DecisionTreeClassifier(criterion = \"gini\", \n                                  random_state = 100,\n                                  max_depth=3, \n                                  min_samples_leaf=50,\n                                  min_samples_split=50)\nclf_gini.fit(X_train, y_train)\n\nprint(clf_gini.score(X_test,y_test))","63c5481e":"from sklearn.metrics import classification_report,confusion_matrix\ny_pred = clf_gini.predict(X_test)\nprint(classification_report(y_test, y_pred))","0ee90334":"print(confusion_matrix(y_test,y_pred))","d6884bb9":"accuracy_score(y_test,y_pred)","1b8f20d4":"y_pred = clf_gini.predict(df2)","79f92235":"y_pred","3c486cab":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=100)","7a57f525":"classifier=xgboost.XGBRegressor()","eabd8d2d":"booster=['gbtree','gblinear']\nbase_score=[0.25,0.5,0.75,1]\n\nn_estimators = [100, 500, 900, 1100]\nmax_depth = [2, 3, 5, 10, 15]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4]\n\n\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }","a805eefe":"random_cv = RandomizedSearchCV(estimator=classifier,\n            param_distributions=hyperparameter_grid,\n            cv=5, n_iter=50,\n            scoring = 'neg_mean_absolute_error',n_jobs = 4,\n            verbose = 5, \n            return_train_score = True,\n            random_state=100)","ddf56047":"random_cv.fit(X_train,y_train)","9b2745c1":"random_cv.best_estimator_","752eba85":"regressor=xgboost.XGBClassifier(base_score=1, booster='gbtree', colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0,\n             importance_type='gain', learning_rate=0.2, max_delta_step=0,\n             max_depth=15, min_child_weight=1, missing=None, n_estimators=900,\n             n_jobs=1, nthread=None, objective='reg:linear', random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,\n             silent=None, subsample=1, verbosity=1)","8c42b365":"regressor.fit(X_train,y_train)","92259f09":"pred = regressor.predict(X_test)","7ee0424f":"print(classification_report(y_test, pred))","5f21cc71":"print(confusion_matrix(y_test,pred))\nprint(accuracy_score(y_test,pred))","5a0efa7d":"booster=['gbtree','gblinear']\nbase_score=[0.25,0.5,0.75,1]\n\nn_estimators = [50,100]\nmax_depth = [1,2,3,4,5]\nbooster=['gbtree','gblinear']\nlearning_rate=[0.05,0.1,0.15,0.20]\nmin_child_weight=[1,2,3,4,5]\n\n\nhyperparameter_grid = {\n    'n_estimators': n_estimators,\n    'max_depth':max_depth,\n    'learning_rate':learning_rate,\n    'min_child_weight':min_child_weight,\n    'booster':booster,\n    'base_score':base_score\n    }\nscorer = make_scorer(f1_score,average ='macro')","9192158c":"@timeit\ndef generate_model_from_search(grid_or_random,regressor, hyperparameter_grid, scorer, X, y):\n    if grid_or_random == \"Grid\":\n        search_obj = GridSearchCV(regressor,hyperparameter_grid, scoring=scorer)\n    elif grid_or_random == \"Random\":\n        search_obj = RandomizedSearchCV(regressor,hyperparameter_grid, scoring=scorer)\n    fit_obj = search_obj.fit(X, y)\n    best_model = fit_obj.best_estimator_\n    return best_model","91835b07":"best_model_random = generate_model_from_search(\"Random\", \n                                           regressor, \n                                           hyperparameter_grid, \n                                           scorer, \n                                           X_train, \n                                           y_train,\n                                            )","f07eda2f":"scores = cross_val_score(best_model_random, X_train, y_train, cv=5,n_jobs=-1, verbose=1, scoring='f1_macro')\nscores.mean()","1f5c3ff2":"best_model_random.fit(X_train, y_train)\nbest_train_predictions = best_model_random.predict(X_train)\nbest_test_predictions = best_model_random.predict(X_test)\n\nprint('The training F1 Score is', f1_score(best_train_predictions, y_train,average='macro'))\nprint('The testing F1 Score is', f1_score(best_test_predictions, y_test,average='macro'))","35705798":"print(classification_report(y_test,best_test_predictions))","69a37b0c":"print(confusion_matrix(y_test,best_test_predictions))\nprint(accuracy_score(y_test,best_test_predictions))","dfdb4af3":"best_test_predictionsX = best_model_random.predict(df2)\nbest_test_predictionsX","f2236174":"# Decision Tree With Best Parameters","682a0c7c":"# Train-Data","ab1ec87b":"HERE WE CAN SEE THAT OUR MODEL IN OVER FITTING","fca993d4":"# Random Forest with HyperParameter Tuning","94c87f97":"# Decision Tree With  Parameters","c8ab8352":"# EDA ","af20ea22":"# Random Forest","314ef3a7":"# Decision Tree With Best Parameters - 2","8c4e9bd9":"# Logistic Reg","3055a9ee":"# MODEL BUILDING","d8721f0d":"# Test-Data","d5bdc9ae":"# Xg Boost","f3defbb4":"# Decision Tree","f025902d":"# Xg Boost With Right Parameters"}}