{"cell_type":{"7139f140":"code","ca4b1ace":"code","dd2925af":"code","c5e1eda8":"code","a56388c5":"code","2990580b":"code","53982016":"code","698d9e4c":"code","0b1053cb":"code","8bdb384c":"code","6370cb0f":"code","8034abbe":"code","2ddbb50d":"code","272fb5bf":"code","c3f6d1bb":"code","36ff9981":"code","bce055d6":"code","898f34f3":"code","80de5538":"code","4fbdfff5":"code","f192a0a1":"code","db8dabf5":"code","474314a9":"code","21424793":"code","c147d42a":"code","17dd2ffb":"code","e2ff88e0":"code","3226f09a":"code","299b0471":"code","b6544b7b":"code","ec302788":"code","ea3444fb":"markdown","496ff5ea":"markdown","4c1a4082":"markdown","f3123f15":"markdown","5d7bd783":"markdown","e0ceca7c":"markdown","cd058067":"markdown","7a18ee55":"markdown","a5c9f85c":"markdown","0c175b4b":"markdown","5bca6075":"markdown","da81bdd0":"markdown","c47c7256":"markdown","78077b01":"markdown","0acf7030":"markdown","30a02ee6":"markdown","88930c00":"markdown","1da5080e":"markdown","2c593c89":"markdown","ef8bc54a":"markdown","2611234f":"markdown"},"source":{"7139f140":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca4b1ace":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\nfrom scipy import stats","dd2925af":"cars = pd.read_csv(\"\/kaggle\/input\/personal-cars-classifieds\/all_anonymized_2015_11_2017_03.csv\")\ncars.head()","c5e1eda8":"# Check the last 5 rows\ncars.tail()","a56388c5":"cars.shape","2990580b":"cars.columns","53982016":"cars.info()","698d9e4c":"filename = \"\/kaggle\/input\/personal-cars-classifieds\/all_anonymized_2015_11_2017_03.csv\"\n\ndtypes = {\n    \"maker\": str, # brand name\n    \"model\": str,\n    \"mileage\": float, # km\n    \"manufacture_year\": float,\n    \"engine_displacement\": float,\n    \"engine_power\": float,\n    \"body_type\": str, # almost never present\n    \"color_slug\": str, # also almost never present\n    \"stk_year\": str,\n    \"transmission\": str, # automatic or manual\n    \"door_count\": str,\n    \"seat_count\": str,\n    \"fuel_type\": str, # gasoline or diesel\n    \"date_created\": str, # when the ad was scraped\n    \"date_last_seen\": str, # when the ad was last seen\n    \"price_eur\": float} # list price converted to EUR\n\ndf = pd.read_csv(filename, dtype=dtypes)\nprint(f\"Raw data has {df.shape[0]} rows, and   {df.shape[1]} columns\")","0b1053cb":"df.describe()","8bdb384c":"df.isnull().sum()","6370cb0f":"plt.figure(figsize=(15,14))\nsns.heatmap(cars.corr(), annot=True, cmap='viridis', fmt='.1f', linewidth=1, square=True)\n\nplt.xticks(fontsize=15)\nplt.yticks(fontsize=15)\nplt.show()","8034abbe":"plt.figure(figsize=(25,13))\nsns.boxplot(data=cars)\n\nplt.title(\"Classified Ads for cars\", fontsize=18, fontweight='bold')\n\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\n\nplt.show()","2ddbb50d":"# Plotting and observing whether dataset has outliers or not\nplt.figure(figsize=(16, 4)) # figure size\nplt.subplot(1, 3, 1) # multiple plot plottig and 1st position of fig\nsns.distplot(df[\"price_eur\"], bins=30) # checking is data normally dist ?\nplt.title('Histogram') \nplt.subplot(1, 3, 2)  # plotting second position of figure\nsns.boxplot(y=df[\"price_eur\"]) # boxplot\nplt.title('Boxplot')\nplt.subplot(1, 3, 3) # plotting third position of figure\nstats.probplot(df[\"price_eur\"], dist=\"norm\", plot=plt) # q-q plot to check #how our data is distributed in reference with normal distribution\nplt.ylabel('RM quantiles')\nplt.show()","272fb5bf":"# outlier boundary value for normally distributed dataset\ndef min_max_boundary(data,col):\n    min_value = df[col].mean()-3*df[col].std()\n    max_value = df[col].mean()+3*df[col].std()\n    return min_value,max_value\nmin_max_boundary(df,\"price_eur\")","c3f6d1bb":"# filtering all the value mabove maximum boundary value and below minimum boundary value \ndf = df[(df[\"price_eur\"] >100) & (df[\"price_eur\"] < 50)]\n\n# plotting the df[\"price_eur\"] after removing outliers\nplt.figure(figsize=(16, 4)) \nplt.subplot(1, 3, 1)  \nsns.distplot(df[\"price_eur\"], bins=30)  \nplt.title('Histogram') \nplt.subplot(1, 3, 2)   \nsns.boxplot(y=df[\"price_eur\"]) \nplt.title('Boxplot')\nplt.subplot(1, 3, 3) \nstats.probplot(df[\"price_eur\"], dist=\"norm\", plot=plt)\nplt.ylabel('RM quantiles')\nplt.show()","36ff9981":"# plotting different plot to analyse presence of outliers\nplt.figure(figsize=(16, 4)) # figure size\nplt.subplot(1, 3, 1) # multiple plot plottig and 1st position of figure\nsns.distplot(df[\"engine_power\"], bins=30) # checking data is normally distributed or not\nplt.title('Histogram',fontsize=20) \nplt.subplot(1, 3, 2)  # plotting second position of figure\nsns.boxplot(y=df[\"engine_power\"]) # boxplot\nplt.title('Boxplot',fontsize=20)\nplt.subplot(1, 3, 3) # plotting third position of figure\nstats.probplot(df[\"engine_power\"], dist=\"norm\", plot=plt) # q-q plot to check how our data is distributed in reference with normal distribution\nplt.title(\"Q-Q plot\",fontsize=20)\nplt.show()","bce055d6":"#finding upper and lower boundary limit\ndef non_normal_outliers(data,col):\n    IQR=df[col].quantile(0.75)-df[col].quantile(0.25)\n    lower_limit=data[col].quantile(0.75) + (1.5*IQR)\n    upper_limit=data[col].quantile(0.25) - (1.5*IQR)\n    return \"lower limit of dataset : {0},  upper limit of dataset \n            {1}\".format(lower_limit,upper_limit)\n  non_normal_outliers(df,\"engine_power\")","898f34f3":"#filtering values lie above and below min and max value\ndf = df.loc[(df[\"engine_power\"]<list1[0]) & (df[\"engine_power\"]>list1[1])]\n--------------------------------------------------------------------\n#plotting the dataset after eliminating outliers\nplt.figure(figsize=(16, 4)) \nplt.subplot(1, 3, 1)  \nsns.distplot(df[\"engine_power\"], bins=30)  \nplt.title('Histogram') \nplt.subplot(1, 3, 2)   \nsns.boxplot(y=df[\"engine_power\"]) \nplt.title('Boxplot')\nplt.subplot(1, 3, 3) \nstats.probplot(df[\"engine_power\"], dist=\"norm\", plot=plt)\nplt.ylabel('engine_power')\nplt.show()","80de5538":"cars.skew()","4fbdfff5":"cars[\"mileage\"].skew()","f192a0a1":"cars[\"mileage\"].kurt()","db8dabf5":"cars['maker'].nunique()","474314a9":"plt.figure(figsize=(25,15))\nsns.countplot(cars['maker'])\n\nplt.xlabel('Maker', fontsize=25, fontweight='bold')\nplt.ylabel('count', fontsize=25, fontweight='bold')\n\nplt.title('Maker Vs Count', fontsize=30, fontweight='bold')\n\nplt.xticks(rotation=75, fontsize=20)\nplt.yticks(fontsize=20)\nplt.show()\n\nprint(cars['maker'].value_counts())","21424793":"cars['model'].nunique()","c147d42a":"plt.figure(figsize=(25,15))\nsns.countplot(cars['model'])\n\nplt.xlabel('model', fontsize=25, fontweight='bold')\nplt.ylabel('count', fontsize=25, fontweight='bold')\n\nplt.title('model Vs Count', fontsize=30, fontweight='bold')\n\nplt.xticks(rotation=75, fontsize=20)\nplt.yticks(fontsize=20)\nplt.show()\n\nprint(cars['model'].value_counts())","17dd2ffb":"cars['door_count'].nunique()","e2ff88e0":"plt.figure(figsize=(20,12))\nsns.countplot(cars['door_count'])\n\nplt.xlabel('door_count', fontsize=25, fontweight='bold')\nplt.ylabel('count', fontsize=25, fontweight='bold')\n\nplt.title('door_count Vs Count', fontsize=30, fontweight='bold')\n\nplt.xticks(rotation=90, fontsize=20)\nplt.yticks(fontsize=20)\nplt.show()\n\nprint(cars['door_count'].value_counts())","3226f09a":"cars['seat_count'].nunique()","299b0471":"plt.figure(figsize=(20,12))\nsns.countplot(cars['seat_count'])\n\nplt.xlabel('seat_count', fontsize=25, fontweight='bold')\nplt.ylabel('count', fontsize=25, fontweight='bold')\n\nplt.title('seat_count Vs Count', fontsize=30, fontweight='bold')\n\nplt.xticks(rotation=90, fontsize=20)\nplt.yticks(fontsize=20)\nplt.show()\n\nprint(cars['seat_count'].value_counts())","b6544b7b":"cars['fuel_type'].nunique()","ec302788":"plt.figure(figsize=(20,12))\nsns.countplot(cars['fuel_type'])\n\nplt.xlabel('fuel_type', fontsize=25, fontweight='bold')\nplt.ylabel('count', fontsize=25, fontweight='bold')\n\nplt.title('fuel_type Vs Count', fontsize=30, fontweight='bold')\n\nplt.xticks(rotation=90, fontsize=20)\nplt.yticks(fontsize=20)\nplt.show()\n\nprint(cars['fuel_type'].value_counts())","ea3444fb":"### a) maker","496ff5ea":"### d) Skew and Kurtosis","4c1a4082":"## Detection of outliers based on Distributions\n### i. Normally Distributed data :\n- In case of normal distribution if datapoints lie away from the range (\u03bc + 3\u03c3) and (\u03bc \u2014 3 \u03c3) is considered as outliers.","f3123f15":"### b) model","5d7bd783":"### Removing outliers :","e0ceca7c":"### Removing outliers :","cd058067":"<h2 style=\"color:blue\" align=\"blue\"> 1. Loading Required Liabriaries <\/h2>","7a18ee55":"### b) Correlation Matrix","a5c9f85c":"### d.seat_count","0c175b4b":"### c) Find Outliers","5bca6075":"### e.fuel_type","da81bdd0":"<h2 style=\"color:blue\" align=\"blue\"> 4. Data Preprocessing <\/h2>","c47c7256":"### a) Missing Values","78077b01":"<h2 style=\"color:blue\" align=\"blue\"> 3. EDA(Exploratory Data Analysis) <\/h2>","0acf7030":"### Data Cleaning","30a02ee6":"### To find minimum and maximum boundary value","88930c00":"## ii. Skewed Distributed data :\n- If value doesnot lie in between the range :- 25percentile- (1.5*IQR) & 75percentile+(1.5*IQR) then datpoint is considered as outliers.\n- Here IQR= Q3-Q1","1da5080e":"<h2 style=\"color:blue\" align=\"blue\"> 2. Read Data <\/h2>","2c593c89":"## Data Description\n\n|Feature                 |Description|\n|------------------------|-------------------------------------------------------------------------|\n|maker                   |normalized all lowercase|\n|model                   |normalized all lowercase|\n|mileage                 |in KM|\n|manufacture_year        |year|\n|engine_displacement     |in ccm|\n|engine_power            |in kW|\n|body_type               |almost never present, but I scraped only personal cars, no motorcycles or utility vehicles|\n|color_slug              |also almost never present|\n|stk_year                |year of the last emission control|\n|transmission            |automatic or manual|\n|door_count              |                   |\n|seat_count              |                   |\n|fuel_type               |gasoline, diesel, cng, lpg, electric|\n|date_created            |when the ad was scraped|\n|datelastseen            |when the ad was last seen. Our policy was to remove all ads older than 60 days|\n|price_eur               |list price converted to EUR|","ef8bc54a":"### To find minimum and maximum boundary value","2611234f":"### c. door_count"}}