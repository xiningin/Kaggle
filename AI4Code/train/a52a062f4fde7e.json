{"cell_type":{"787e2a81":"code","b794d773":"code","7bc2c26b":"code","8233be3e":"code","69b8b8af":"code","a90152d0":"code","46182d3f":"code","70c9a61d":"code","a592f2df":"code","2eb7f16c":"code","a346770c":"markdown","592499a1":"markdown","b0a2f17b":"markdown","1c44e936":"markdown","2943144d":"markdown","41f22b71":"markdown","43ad2aa8":"markdown"},"source":{"787e2a81":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport re\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","b794d773":"train = pd.read_csv('..\/input\/data-science-bowl-2019\/train.csv')\ntrain_labels = pd.read_csv('..\/input\/data-science-bowl-2019\/train_labels.csv')\ntest = pd.read_csv('..\/input\/data-science-bowl-2019\/test.csv')\nspecs = pd.read_csv('..\/input\/data-science-bowl-2019\/specs.csv')\nsample_submission = pd.read_csv('..\/input\/data-science-bowl-2019\/sample_submission.csv')","7bc2c26b":"# fist ten lines of train\ntrain.head(10)\n","8233be3e":"# unique values of every clolumn\nunique_values = {}\nunique_values_count = {}\ntrain_cols = train.columns\nfor c in train_cols:\n    unique_values[c] = train[c].unique()\n    unique_values_count[c] = len(train[c].unique())\n\nprint(unique_values_count)","69b8b8af":"unique_values['event_code']","a90152d0":"unique_values['title']","46182d3f":"# dic where we will store kyes and there number\nevent_data_keys = {}\n\n# store column in a variable\ncol_event_data = train['event_data']\n\n# find patterns containing any string except : , { and }  followed by :\nfor l in col_event_data:\n    temp = re.findall(\"[^,{}]*:\", l[1:-1])  # don't take { and }\n    for k in temp:\n        if k in event_data_keys:\n            event_data_keys[k] += 1\n        else:\n            event_data_keys[k] = 0\n            \n# Store the dic in a dataframe for futur uses\nevent_data_keys_df = pd.DataFrame()\nevent_data_keys_df['key'] = list(event_data_keys.keys())\nevent_data_keys_df['number'] = list(event_data_keys.values())\n\n# sort by descending order of number column\nevent_data_keys_df = event_data_keys_df.sort_values(\n    'number', ascending=True)\n\n","70c9a61d":"# display first lines\nevent_data_keys_df.head(5)","a592f2df":"# display last lines\nevent_data_keys_df.tail(5)","2eb7f16c":"# first, sort data\n# sort by descending order of number column\nevent_data_keys_df = event_data_keys_df.sort_values('number', ascending=False)\n\nsns.set(style=\"whitegrid\")\n# Initialize the matplotlib figure\nf, ax = plt.subplots(figsize=(12, 30))\nsns.set_color_codes(\"pastel\")\nsns.barplot(x=\"number\", y=\"key\", data=event_data_keys_df,\n            label=\"Number of occuence of keys in event_data column\", color=\"b\")\n\nax.set(xlim=(0, 12000000), ylabel=\"Keys in event_data column\",\n       xlabel=\"Number of occuence of keys in event_data column\")","a346770c":"Let's find how many keys are in column event_data :","592499a1":"What about title ?","b0a2f17b":"Unique values of every column in train","1c44e936":"First ten lines of train","2943144d":"For example let's see unique values of event_code :","41f22b71":"Lest's make a plot","43ad2aa8":"Read data"}}