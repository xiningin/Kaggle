{"cell_type":{"c7b4a515":"code","5de4618c":"code","c5b3597c":"code","f9269149":"code","ce933546":"code","011582f7":"code","784514d8":"code","6b6ee843":"code","740ef1be":"code","f5e27809":"code","9f38209e":"code","4e18fea2":"code","65a6aa0a":"code","a37f8b38":"code","7a4aa656":"code","abcf9b46":"code","7bcdc6b7":"code","2b98cb9f":"code","e289665d":"code","85c99783":"code","0457df97":"code","5da61872":"code","5f38ebf1":"code","c5074ae5":"code","99d11891":"code","23a74b25":"code","78d26966":"code","e2867d7c":"code","464b9a65":"code","d2810460":"code","9094fa39":"code","2b533163":"code","91d535f9":"code","3741a266":"code","46f08eb0":"code","2edf19e9":"code","298f2c5d":"code","02bbae34":"code","b971a867":"code","3b8448b9":"code","ab2ed8d4":"code","cbc9be00":"code","58afd0cb":"code","59725e06":"code","5dea6314":"code","7e612378":"code","fd93f246":"code","04d8600c":"code","651eec2e":"code","eb14a646":"code","f3cc2ce2":"code","1e7f15c3":"code","26cb7361":"code","a1442dd3":"code","627e0901":"code","44d8c813":"code","d556bdca":"code","b5beb03c":"code","b3b6089c":"code","dcc06b5c":"code","8d5b99f7":"code","62a4bd06":"code","8cc335b8":"code","7efc4bb7":"code","0a8626a1":"code","2fb01299":"code","74106dc7":"code","4f382c38":"code","5088d0d3":"code","78301fe3":"code","3676ad7d":"code","db764756":"code","d16751b6":"code","c15f2d7a":"code","423f73a1":"code","d90df4cd":"code","7568788f":"code","50f5a36b":"code","83092669":"code","967bc806":"code","8a09b045":"code","336fe7a2":"code","346ff525":"code","9c5a6d29":"code","d8929d8b":"code","7ce88ad5":"code","fea23237":"code","18918be6":"code","7340f1c2":"code","cb120efd":"code","8becae73":"markdown","2c4d160b":"markdown","2823415f":"markdown","b302e13d":"markdown","3a28bb32":"markdown","2b9013e4":"markdown","52902aa3":"markdown","a7776c0d":"markdown","c43eac79":"markdown","bc3ddae6":"markdown","c93a2a25":"markdown","4d109617":"markdown","5bf2a9b6":"markdown","4d7993d5":"markdown","47c2a8f2":"markdown","b5f1127f":"markdown","8c5ecece":"markdown"},"source":{"c7b4a515":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport numpy as np # linear algebra\nimport matplotlib.pyplot as plt  \nimport seaborn as sn\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics","5de4618c":"# Importing the dataset \ndata = pd.read_csv('..\/input\/1000-companies\/1000_Companies.csv')","c5b3597c":"data.head()","f9269149":"data.info()","ce933546":"data.describe(include = 'all')","011582f7":"data.State.value_counts()","784514d8":"data.columns = ['RDSpend', 'Administration', 'MarketingSpend', 'State', 'Profit']","6b6ee843":"##PLOTS","740ef1be":"## Lets Check the Profit vs Each attr","f5e27809":"data.plot(x='RDSpend', y='Profit',style = 'o')  \nplt.title('RDSpend vs Profit')  \nplt.xlabel('RDSpend')  \nplt.ylabel('Profit')  \nplt.show()","9f38209e":"##From the above graphical interpretation it can be seen that the Profit increases mostly with increase in RDSpend\n##However when the RDSpend is 100000-150000 the Profit is highest\n\n## Can be verified below :","4e18fea2":"x = data[(data.RDSpend < 100000)]\ny = data[(data.RDSpend > 100000)]\nprint(\"Maximum Profit when RDSpend is below 100000 is :\" , x.Profit.max())\nprint(\"Maximum Profit when RDSpend is above 100000 is :\" , y.Profit.max())","65a6aa0a":"x.shape","a37f8b38":"y.shape","7a4aa656":"## Also it can be seen that the dataset contains 60% data with RDSpend below 100000 and Profit less than 141585.52","abcf9b46":"data.plot(x='Administration', y='Profit', style='o')  \nplt.title('Administration vs Profit')  \nplt.xlabel('Administration')  \nplt.ylabel('Profit')  \nplt.show()","7bcdc6b7":"## Above Graph shows uneven data distribution","2b98cb9f":"data.plot(x='MarketingSpend', y='Profit', style='or')  \nplt.title('MarketingSpend vs Profit')  \nplt.xlabel('MarketingSpend')  \nplt.ylabel('Profit')  \nplt.show()        ","e289665d":"## It can be seen that the Profit is highest when  MarketingSpend is close to 300000","85c99783":"z = data.Profit.max()\ndata.MarketingSpend[(data.Profit == z)]","0457df97":"##In which states do people have more profit","5da61872":"filter_state = pd.DataFrame(data.groupby([\"State\"])[\"Profit\"].sum()).reset_index()\nsn.barplot(y = 'Profit', x = 'State',data = filter_state, edgecolor = 'w')\nplt.show()","5f38ebf1":"##Profit is high for California then for New York and then for Florida\n## Re-checking below","c5074ae5":"data.State.value_counts()","99d11891":"## Checking the distribution of categorical and continuous vars","23a74b25":"## Individually checking the distribution for each var","78d26966":"## For continuos var we plot displot from seaborn library","e2867d7c":"sn.distplot(data.RDSpend,rug = True)","464b9a65":"sn.distplot(data.Administration,rug = True)","d2810460":"sn.distplot(data.MarketingSpend,rug = True)","9094fa39":"## For catgeorical we plot bar plot","2b533163":"data['State'].value_counts().plot(kind='bar')","91d535f9":" ##Let\u2019s check the profit and once we plot it we can observe that the Average Profit is Between Nearly 100000 and 200000.","3741a266":"plt.figure(figsize=(15,10))\nplt.tight_layout()\nsn.distplot(data['Profit'])","46f08eb0":"data.Profit.mean()","2edf19e9":"## Encoding \nfrom sklearn.preprocessing import LabelEncoder","298f2c5d":"le = LabelEncoder()","02bbae34":"data.State = le.fit_transform(data.State)","b971a867":"data.State = data.State.astype('category')","3b8448b9":"data.State.value_counts()","ab2ed8d4":"data.isnull().sum().sum()","cbc9be00":"data.corr()","58afd0cb":"sn.heatmap(data.corr(), annot=True)","59725e06":"data_x = data.iloc[:,0:4]","5dea6314":"data_x.columns","7e612378":"data_x.shape","fd93f246":"data_y = data.iloc[:,4]","04d8600c":"data_y","651eec2e":"data_y.shape","eb14a646":"data_x_train,data_x_test,data_y_train,data_y_test = train_test_split(data_x,data_y,test_size = 0.2,random_state = 101)","f3cc2ce2":"data_x_train.shape","1e7f15c3":"data_y_train.shape","26cb7361":"data_x_test.shape","a1442dd3":"data_y_test.shape","627e0901":"lr = LinearRegression()","44d8c813":"lr.fit(data_x_train,data_y_train) ## Training the algorithm","d556bdca":"#To retrieve the intercept:\nprint(lr.intercept_)\n#For retrieving the slope:\nprint(lr.coef_)","b5beb03c":"pred_val = lr.predict(data_x_test)","b3b6089c":"compare = pd.DataFrame({'Actual': data_y_test, 'Predicted': pred_val})\ncompare\n","dcc06b5c":"df1 = compare.head(25)\ndf1.plot(kind='bar',figsize=(16,10))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","8d5b99f7":"print('Mean Absolute Error:', metrics.mean_absolute_error(data_y_test, pred_val))  \nprint('Mean Squared Error:', metrics.mean_squared_error(data_y_test, pred_val))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(data_y_test, pred_val)))","62a4bd06":"data.corr()","8cc335b8":"data1 = pd.read_csv('..\/input\/1000-companies\/1000_Companies.csv')","7efc4bb7":"data1.head()","0a8626a1":"data2 = data1.iloc[:,[0,1,3,4]] ## Removing MarketingSpend","2fb01299":"data2.head()","74106dc7":"data2.State.value_counts()","4f382c38":"data2.State = le.fit_transform(data2.State)","5088d0d3":"data2.State.value_counts()","78301fe3":"data2.State.describe()","3676ad7d":"data2.State = data2.State.astype('category')","db764756":"data2.State.describe()","d16751b6":"data2.head()","c15f2d7a":"data2_x = data2.iloc[:,0:3]","423f73a1":"data2_x.head()","d90df4cd":"data2_y = data2.iloc[:,3]","7568788f":"data2_y.head()","50f5a36b":"data2_x_train,data2_x_test,data2_y_train,data2_y_test = train_test_split(data2_x,data2_y,test_size = 0.2, random_state = 101)","83092669":"data2_x_train.shape","967bc806":"data2_y_train.shape","8a09b045":"data2_x_test.shape","336fe7a2":"data2_y_test.shape","346ff525":"lr1 = LinearRegression()","9c5a6d29":"lr1.fit(data2_x_train,data2_y_train)","d8929d8b":"pred_val1 = lr1.predict(data2_x_test)","7ce88ad5":"#To retrieve the intercept:\nprint(lr1.intercept_)\n#For retrieving the slope:\nprint(lr1.coef_)","fea23237":"compare1 = pd.DataFrame({'Actual': data2_y_test, 'Predicted': pred_val1})\ncompare1","18918be6":"compare2 = compare1.head(25)","7340f1c2":"compare2.plot(kind='bar',figsize=(16,10))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","cb120efd":"print('Mean Absolute Error:', metrics.mean_absolute_error(data2_y_test, pred_val1))  \nprint('Mean Squared Error:', metrics.mean_squared_error(data2_y_test, pred_val1))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(data2_y_test, pred_val1)))","8becae73":"We can also visualize comparison result as a bar graph using the below script.\n\nAs the number of records is huge, for representation purpose I\u2019m taking just 25 records.","2c4d160b":"Let\u2019s find the values for metrics using our test data.","2823415f":"*## Root Mean Square for 1st Model is Root Mean Squared Error: 13768.975083100055\n*## And for 2nd model by removing one attr is 13965.295519778878\n\n*## Lower the RMSE value better is the model so Model1 is better ","b302e13d":"We can re-check from below :","3a28bb32":"## Feature Engineering\n","2b9013e4":"*## We need to predict the Profit of the companies given the 4 params","52902aa3":"**## Heatmap for correlation","a7776c0d":"##Checking the missing values","c43eac79":"## EDA AND FEATURE ENGINEERING","bc3ddae6":"## Splitting the dataset","c93a2a25":"###  Buliding Model 2 removing vars causing Multiplier effect","4d109617":"The predicted percentages are close to the actual ones.","5bf2a9b6":"## Modelling\n## Model 1","4d7993d5":"**## So no missing value in the dataset","47c2a8f2":"**## From the above correlation matrix it can be seen that the independent vars R&D and Marketing Speed are highly corelated with val 0.978407 \n*## It can lead to Multiplier effect which is against model building*","b5f1127f":"Now compare the actual output values for data_x_test with the predicted values, execute the following script:","8c5ecece":"**## We will first build the Linear regression model with all the vars\n**## Then we will build by removing correlated vars and then check which model is good"}}