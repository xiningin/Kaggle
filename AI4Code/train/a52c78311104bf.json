{"cell_type":{"632ec5f2":"code","c15df0f3":"code","ca4b91d2":"code","55d644f4":"code","d79badb9":"code","8abf8fd7":"code","a30f0ea4":"code","f9daddff":"code","3875a75f":"code","d4dcb308":"code","a428f3d7":"code","ed3fc077":"code","7666a696":"code","e86db47d":"code","656f62f7":"code","3674b018":"code","85ed04c8":"code","d86941e9":"code","c0821517":"code","bb6e2bf8":"code","478a2b1c":"code","8e1b3e35":"code","f8cd492a":"code","10ea0276":"code","1c2bfc8b":"code","70479032":"code","eb425951":"code","8cc7e4fe":"code","2267910b":"code","ce6bb860":"code","db0b1e9d":"code","77347c69":"code","43bfae25":"code","13de5628":"code","32b10eb3":"code","05aa0e1f":"code","bff401c5":"code","206b6b50":"code","7d589f3c":"code","2a819df7":"code","c534c72d":"code","b5ac7d53":"code","c7387be5":"code","04e2405d":"code","18a02eb1":"code","c9f399b3":"code","99f465f1":"code","8deca26e":"code","cdd4a946":"code","2718c451":"code","585d14d3":"code","14892cce":"code","2162c388":"code","a924cd14":"code","a90b0107":"code","7f19a85f":"code","2b059c8f":"code","ab7f86cb":"code","f58d6b82":"code","9cce9762":"code","bc83d4e3":"code","3fb69883":"code","1ef5bf1d":"code","8e0fa5e0":"code","a7ca4aaf":"code","ab1436e0":"code","c5671eae":"code","dc26b842":"code","5c8499b1":"code","39d911d8":"code","0f274904":"code","29604c5c":"code","eda6f00d":"code","77ca2a44":"code","e5ad37d9":"code","d3e93c31":"code","3d2bb9d7":"code","cc55039c":"code","fc393942":"code","5ea90b5c":"code","184c61df":"code","2a51c84d":"code","8afdad70":"code","d12e31ad":"code","1ff2ae36":"code","c20ab940":"code","410a51aa":"code","ccd5c572":"code","ae2d1801":"markdown","14fbd833":"markdown","6758fd8c":"markdown"},"source":{"632ec5f2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c15df0f3":"df = pd.read_csv('..\/input\/weather-dataset-rattle-package\/weatherAUS.csv')","ca4b91d2":"df.head()","55d644f4":"df.info()","d79badb9":"df.isnull().sum()","8abf8fd7":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","a30f0ea4":"plt.figure(figsize=(14,14))\nsns.heatmap(df.isnull(),yticklabels = False , cbar = False,cmap=\"viridis\")","f9daddff":"df.MinTemp.value_counts()","3875a75f":"df.MinTemp.fillna(value=df.MinTemp.mean(),inplace = True)","d4dcb308":"plt.figure(figsize=(14,14))\nsns.heatmap(df.isnull(),yticklabels = False , cbar = False,cmap=\"viridis\")","a428f3d7":"df.MaxTemp.fillna(value=df.MaxTemp.mean(),inplace = True)","ed3fc077":"df.Rainfall.value_counts()","7666a696":"df.Rainfall.mode()","e86db47d":"df.Rainfall.fillna(value=0.0,inplace = True)","656f62f7":"df.Evaporation.value_counts()","3674b018":"df.Evaporation.mean()","85ed04c8":"df.Evaporation.fillna(value=df.Evaporation.mean(),inplace = True)","d86941e9":"df.Sunshine.value_counts()","c0821517":"df.Sunshine.mean()","bb6e2bf8":"df.Sunshine.fillna(value=df.Sunshine.mean(),inplace = True)","478a2b1c":"df.WindGustDir.value_counts()","8e1b3e35":"df.columns","f8cd492a":"df.dropna(subset=['WindGustDir', 'WindGustSpeed', 'WindDir9am', 'WindDir3pm'],inplace = True)","10ea0276":"df.isnull().sum()","1c2bfc8b":"df.Humidity9am.value_counts()","70479032":"df.Humidity9am.mean()","eb425951":"df.Humidity9am.fillna(value=df.Humidity9am.mean(),inplace = True)","8cc7e4fe":"df.Humidity3pm.fillna(value=df.Humidity3pm.mean(),inplace = True)","2267910b":"plt.figure(figsize=(14,14))\nsns.heatmap(df.isnull(),yticklabels = False , cbar = False,cmap=\"viridis\")","ce6bb860":"df.Pressure9am.value_counts()","db0b1e9d":"df.Pressure9am.mean()","77347c69":"df.Pressure9am.fillna(value=df.Pressure9am.mean(),inplace = True)","43bfae25":"df.Pressure3pm.fillna(value=df.Pressure3pm.mean(),inplace = True)","13de5628":"df.Cloud9am.value_counts()","32b10eb3":"df.Cloud9am.fillna(value=df.Cloud9am.mean(),inplace = True)","05aa0e1f":"df.Cloud3pm.fillna(value=df.Cloud3pm.mean(),inplace = True)","bff401c5":"df.Temp9am.fillna(value=df.Temp9am.mean(),inplace = True)","206b6b50":"df.Temp3pm.fillna(value=df.Temp3pm.mean(),inplace = True)","7d589f3c":"df.RainToday.value_counts()","2a819df7":"df.RainTomorrow.value_counts()","c534c72d":"df = pd.get_dummies(columns=['RainToday','RainTomorrow'],data = df,drop_first = True)","b5ac7d53":"df.info()","c7387be5":"plt.figure(figsize=(14,14))\nsns.heatmap(df.isnull(),yticklabels = False , cbar = False,cmap=\"viridis\")","04e2405d":"df.RainToday_Yes.value_counts()","18a02eb1":"df.RainTomorrow_Yes.value_counts()","c9f399b3":"df.Date = pd.to_datetime(df.Date)","99f465f1":"df.dtypes","8deca26e":"df.Date.dt.year.value_counts()","cdd4a946":"df['Month'] = df.Date.dt.month","2718c451":"df.Location.value_counts()","585d14d3":"df.drop(columns=['Date','Location'],axis=1,inplace = True)","14892cce":"df.info()","2162c388":"import matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline","a924cd14":"sns.countplot(x='RainTomorrow_Yes',data=df,hue='RainToday_Yes')","a90b0107":"plt.figure(figsize=(10,8))\nsns.scatterplot(x='WindSpeed9am',y='Temp9am',data=df,hue='RainToday_Yes')","7f19a85f":"plt.figure(figsize=(10,8))\nsns.scatterplot(x='WindSpeed9am',y='Temp9am',data=df,hue='RainTomorrow_Yes')","2b059c8f":"df.WindSpeed9am[df.WindSpeed9am > 80]","ab7f86cb":"plt.figure(figsize=(10,8))\nsns.stripplot(x='WindDir9am' ,y='WindSpeed9am',data=df,hue='RainTomorrow_Yes')","f58d6b82":"plt.figure(figsize=(10,8))\nsns.boxplot(x=\"WindDir3pm\", y=\"WindSpeed3pm\", data=df)","9cce9762":"from sklearn.preprocessing import LabelEncoder","bc83d4e3":"le = LabelEncoder()","3fb69883":"label = le.fit_transform(df['WindGustDir'])","1ef5bf1d":"label","8e0fa5e0":"df.WindGustDir = label","a7ca4aaf":"label_1 = le.fit_transform(df['WindDir9am'])","ab1436e0":"df.WindDir9am = label_1","c5671eae":"label_2 = le.fit_transform(df['WindDir3pm'])","dc26b842":"df.WindDir3pm = label_2","5c8499b1":"df.head()","39d911d8":"df.info()","0f274904":"from sklearn.model_selection import train_test_split","29604c5c":"df.columns","eda6f00d":"X = df[['MinTemp', 'MaxTemp', 'Rainfall', 'Evaporation', 'Sunshine',\n       'WindGustDir', 'WindGustSpeed', 'WindDir9am', 'WindDir3pm',\n       'WindSpeed9am', 'WindSpeed3pm', 'Humidity9am', 'Humidity3pm',\n       'Pressure9am', 'Pressure3pm', 'Cloud9am', 'Cloud3pm', 'Temp9am',\n       'Temp3pm', 'RainToday_Yes', 'Month']]\ny = df['RainTomorrow_Yes']","77ca2a44":" X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42,shuffle = True)","e5ad37d9":"from sklearn.linear_model import SGDClassifier","d3e93c31":"sgd_cal = SGDClassifier()","3d2bb9d7":"sgd_cal.fit(X_train,y_train)","cc55039c":"predictions = sgd_cal.predict(X_test)","fc393942":"from sklearn.metrics import classification_report,confusion_matrix,accuracy_score","5ea90b5c":"print(classification_report(y_test,predictions))","184c61df":"print(confusion_matrix(y_test,predictions))","2a51c84d":"from sklearn.model_selection import cross_val_score","8afdad70":"score = cross_val_score(sgd_cal,X_train,y_train,cv=10,scoring='accuracy')","d12e31ad":"score.mean()","1ff2ae36":"X_train.shape,y_train.shape","c20ab940":"from sklearn.model_selection import StratifiedKFold","410a51aa":"accuracy = []\nskfl = StratifiedKFold(n_splits=10,random_state=None)\nskfl.get_n_splits(X,y)\nfor train_index,test_index in skfl.split(X,y):\n    print('train:',train_index,'validation:',test_index)\n    X1_train,X1_test = X.iloc[train_index],X.iloc[test_index]\n    y1_train,y1_test = y.iloc[train_index],y.iloc[test_index]\n    \n    \n    sgd_cal.fit(X1_train,y1_train)\n    prediction = sgd_cal.predict(X1_test)\n    score = accuracy_score(prediction,y1_test)\n    accuracy.append(score)\n    \nprint(accuracy)","ccd5c572":"np.array(accuracy).mean()","ae2d1801":"# FEATURE ENGINEERING AND EDA****","14fbd833":"# EVALUATION USING TRAIN_TEST_SPLIT****","6758fd8c":"# ****EVALUATION USING STRATIFIED_KFOLD"}}