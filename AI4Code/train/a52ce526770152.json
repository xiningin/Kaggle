{"cell_type":{"b5488f0d":"code","2a243b32":"code","96d10a09":"code","3d1070c3":"code","7f0da6dd":"code","3988f031":"code","3421d86b":"code","ca7ed1fb":"code","98bb1520":"code","8c7f82a6":"code","e2d0803b":"code","6456eae5":"code","1cfeb178":"code","465ac4d3":"code","1a255bc3":"code","918a43db":"code","bbc783a2":"code","c1e83bcf":"code","8a116f01":"code","22c4b38b":"code","b441d563":"code","509b1ac3":"code","b2dca764":"code","9e1416dc":"code","90b4c369":"code","38191d5e":"code","4fc17696":"code","0f5f5f75":"code","42a559c8":"code","86c87c68":"code","dcbed925":"code","33fd7455":"code","1939569f":"code","f120974a":"code","cc30c8b0":"code","55fd3959":"code","8dea9fff":"code","28cb85ac":"code","c08ec6a7":"code","f168fc84":"code","6db67341":"code","2e3f2490":"code","1bee80e5":"code","3bbdc725":"code","7e9fb5f9":"code","0cbc967b":"markdown"},"source":{"b5488f0d":"import pandas as pd\nimport numpy as np\nimport seaborn as sns\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import LabelEncoder\nfrom sklearn.utils import resample\nfrom sklearn.svm import SVC\nfrom random import randint\nimport warnings \nwarnings.filterwarnings('ignore')\nimport matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix, f1_score,accuracy_score, precision_score, recall_score, roc_auc_score  ","2a243b32":"df = pd.read_csv('..\/input\/stroke-dataset\/healthcare-dataset-stroke-data.csv')","96d10a09":"print (\"Data Frame Details\")\nprint(\"Size of dataframe:\",df.size)\nprint(\"Shape of dataframe:\",df.shape[0])\nprint(\"Columns of dataframe:\",df.shape[1])\ndf.head()","3d1070c3":"print(\"Missing Value\",df.isnull().sum().sort_values(ascending=False))\nsns.heatmap(df.isnull())\nplt.show()","7f0da6dd":"bmi =round(df['bmi'].mean(),)","3988f031":"df['bmi'].fillna(bmi,inplace=True)","3421d86b":"df.isnull().sum()","ca7ed1fb":"print (\"Age\",df['age'].value_counts().sort_values(ascending = False).index[:10])\ndf['age'].fillna(0,inplace =True)\nbins = [0,18,36,54,78,90]\nlabels = [\"0-17\",\"18-35\",\"36-53\",\"54-77\",\"78-90\"]\ndf['age'] = pd.cut(df['age'],bins=bins,labels=labels)\ndf.head()","98bb1520":"Strokeanalysis = df.copy()","8c7f82a6":"Strokeanalysis['hypertension'] = Strokeanalysis['hypertension'].apply(lambda x:\"Hypertension\" if x ==1 else \"No hypertension\")\nStrokeanalysis['heart_disease'] = Strokeanalysis['heart_disease'] .apply (lambda x:\"Heart Disease\" if x == 1 else \"no Heart disease\")\nStrokeanalysis['stroke'] = Strokeanalysis['stroke'] .apply (lambda x:\"Suffer Stroke\" if x == 1 else \"not suffer stroke\")\nStrokeanalysis['ever_married'] = Strokeanalysis['ever_married'] .apply (lambda x:\"Married\" if x == \"Yes\" else \"Unmarried\")","e2d0803b":"Strokeanalysis.head()","6456eae5":"color = ['Accent', 'Accent_r', 'Blues', 'Blues_r', 'BrBG', 'BrBG_r', 'BuGn', 'BuGn_r', 'BuPu', 'BuPu_r', 'CMRmap', 'CMRmap_r', 'Dark2', 'Dark2_r', 'GnBu', 'GnBu_r', 'Greens', 'Greens_r', 'Greys', 'Greys_r', 'OrRd', 'OrRd_r', 'Oranges', 'Oranges_r', 'PRGn', 'PRGn_r', 'Paired', 'Paired_r', 'Pastel1', 'Pastel1_r', 'Pastel2', 'Pastel2_r', 'PiYG', 'PiYG_r', 'PuBu', 'PuBuGn', 'PuBuGn_r', 'PuBu_r', 'PuOr', 'PuOr_r', 'PuRd', 'PuRd_r', 'Purples', 'Purples_r', 'RdBu', 'RdBu_r', 'RdGy', 'RdGy_r', 'RdPu', 'RdPu_r', 'RdYlBu', 'RdYlBu_r', 'RdYlGn', 'RdYlGn_r', 'Reds', 'Reds_r', 'Set1', 'Set1_r', 'Set2', 'Set2_r', 'Set3', 'Set3_r', 'Spectral', 'Spectral_r', 'Wistia', 'Wistia_r', 'YlGn', 'YlGnBu', 'YlGnBu_r', 'YlGn_r', 'YlOrBr', 'YlOrBr_r', 'YlOrRd', 'YlOrRd_r', 'afmhot', 'afmhot_r', 'autumn', 'autumn_r', 'binary', 'binary_r', 'bone', 'bone_r', 'brg', 'brg_r', 'bwr', 'bwr_r', 'cividis', 'cividis_r', 'cool', 'cool_r', 'coolwarm', 'coolwarm_r', 'copper', 'copper_r', 'crest', 'crest_r', 'cubehelix', 'cubehelix_r', 'flag', 'flag_r', 'flare', 'flare_r', 'gist_earth', 'gist_earth_r', 'gist_gray', 'gist_gray_r', 'gist_heat', 'gist_heat_r', 'gist_ncar', 'gist_ncar_r', 'gist_rainbow', 'gist_rainbow_r', 'gist_stern', 'gist_stern_r', 'gist_yarg', 'gist_yarg_r', 'gnuplot', 'gnuplot2', 'gnuplot2_r', 'gnuplot_r', 'gray', 'gray_r', 'hot', 'hot_r', 'hsv', 'hsv_r', 'icefire', 'icefire_r', 'inferno', 'inferno_r', 'jet', 'jet_r', 'magma', 'magma_r', 'mako', 'mako_r', 'nipy_spectral', 'nipy_spectral_r', 'ocean', 'ocean_r', 'pink', 'pink_r', 'plasma', 'plasma_r', 'prism', 'prism_r', 'rainbow', 'rainbow_r', 'rocket', 'rocket_r', 'seismic', 'seismic_r', 'spring', 'spring_r', 'summer', 'summer_r', 'tab10', 'tab10_r', 'tab20', 'tab20_r', 'tab20b', 'tab20b_r', 'tab20c', 'tab20c_r', 'terrain', 'terrain_r', 'turbo', 'turbo_r', 'twilight', 'twilight_r', 'twilight_shifted', 'twilight_shifted_r', 'viridis', 'viridis_r', 'vlag', 'vlag_r', 'winter', 'winter_r']","1cfeb178":"vlue = randint(0,len(color)-1)\nplt.figure(figsize=(8,5))\nsns.countplot(Strokeanalysis['stroke'],palette=color[vlue])\nplt.title(\"Stroke\")\nplt.xlabel(\"Patient type\")\nplt.ylabel(\"Count of Patient\")\nplt.show()","465ac4d3":"vlue = randint(0,len(color)-1)\nplt.figure(figsize=(8,5))\nsns.countplot(x=\"stroke\",hue=\"gender\",data=Strokeanalysis,palette=color[vlue])\nplt.xlabel(\"Patient type & Gender\")\nplt.ylabel(\"Count of Patient\")\nplt.show()","1a255bc3":"vlue = randint(0,len(color)-1)\nplt.figure(figsize=(8,5))\nsns.countplot(x=Strokeanalysis[Strokeanalysis[\"smoking_status\"]!=\"Unknown\"]['smoking_status'],hue=\"gender\",data=Strokeanalysis,palette=color[vlue])\nplt.xlabel(\"smoking_status\")\nplt.ylabel(\"Count by gender\")\nplt.show()","918a43db":"import plotly.express as px\nimport plotly.graph_objects as go","bbc783a2":"px.pie(Strokeanalysis,names=\"hypertension\",labels=\"hypertension\",hole=0.4,title=\"Hypertension Vs No-hypertension\")","c1e83bcf":"px.pie(Strokeanalysis,names=\"heart_disease\",labels=\"heart_disease\",hole=0.4,title=\"Heart disease Vs No- Heart Disease\")","8a116f01":"Strokeanalysis[:2]","22c4b38b":"print(\"Hypertension\\n \\n\",Strokeanalysis['hypertension'].value_counts())\nprint('\\n')\nprint(\"Heart Diesase\\n \\n\",Strokeanalysis['heart_disease'].value_counts())\n\nvlue =randint(0,len(color)-1)\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.countplot(x=\"age\",hue=\"hypertension\",palette=color[vlue],data=Strokeanalysis)\n\nplt.xlabel('Hypertension')\nplt.ylabel(\"Count by age\")\n\nplt.subplot(1,2,2)\nsns.countplot(x=\"age\",hue=\"heart_disease\",palette=color[vlue],data=Strokeanalysis)\n\nplt.xlabel(\"Heart Disease\")\nplt.ylabel(\"Count by Age\")\n\nplt.tight_layout(pad=0.4)\nplt.show()","b441d563":"print(\"work type\\n \\n\",Strokeanalysis['work_type'].value_counts())\n\nvlue =randint(0,len(color)-1)\nplt.figure(figsize=(10,5))\nplt.subplot(1,2,1)\nsns.countplot(x=\"work_type\",hue=\"hypertension\",palette=color[vlue],data=Strokeanalysis)\n\nplt.xlabel('Hypertension')\nplt.ylabel(\"Count by work_type\")\n\nplt.subplot(1,2,2)\nsns.countplot(x=\"work_type\",hue=\"heart_disease\",palette=color[vlue],data=Strokeanalysis)\n\nplt.xlabel(\"Heart Disease\")\nplt.ylabel(\"Count by work_type\")\n\nplt.tight_layout(pad=0.4)\nplt.show()","509b1ac3":"maritial_status =Strokeanalysis['ever_married'].value_counts().index\nResidence_type = Strokeanalysis['Residence_type'].value_counts().index","b2dca764":"px.pie(Strokeanalysis,names='ever_married',title=\"Married Vs Unmarried\",hole=0.4)","9e1416dc":"px.pie(Strokeanalysis,names='Residence_type',title=\"Urban Vs Rural\",hole=0.4)","90b4c369":"plt.figure(figsize=(8,5))\nsns.countplot(data=Strokeanalysis,x=\"Residence_type\",hue=\"ever_married\",palette=color[vlue])\nplt.xlabel(\"Residence Type\")\nplt.ylabel(\"Count By Maritial Status\")\nplt.show()","38191d5e":"px.pie(Strokeanalysis,names=\"age\",hole=0.4,title=\"Age Bifurcation\")","4fc17696":"px.pie(Strokeanalysis,names=\"work_type\",hole=0.4)","0f5f5f75":"vlue =randint(0,len(color)-1)\nplt.figure(figsize=(10,5))\nsns.boxplot(x=\"work_type\",y='avg_glucose_level',hue='Residence_type',palette=color[vlue],data=Strokeanalysis)\nplt.xlabel(\"Work Type\")\nplt.ylabel(\"Count by Residence type\")\nplt.show()\nplt.tight_layout(pad=0.4)","42a559c8":"vlue =randint(0,len(color)-1)\nplt.figure(figsize=(10,5))\nsns.lmplot(x=\"bmi\",y=\"avg_glucose_level\",palette=color[vlue],data=Strokeanalysis)\nplt.xlabel(\"Avg Glucose Lavel\")\nplt.ylabel(\"Count by Body masses index\")\nplt.show()\nplt.tight_layout(pad=0.4)","86c87c68":"Strokeanalysis.head(2)","dcbed925":"vlue = randint(0,len(color)-1)\nplt.figure(figsize=(10,5))\nplt.subplot(2,2,1)\nsns.boxplot(df[\"bmi\"],palette=color[vlue])\nplt.title(\"Body index mass with outliears\")\nplt.subplot(2,2,2)\nsns.boxplot(df[\"avg_glucose_level\"],palette=color[vlue])\nplt.title(\"Avg glucose lavel with outliears\")\nplt.subplot(2,2,3)\ndf = df[(df['bmi']>11) & (df['bmi']<43)]\nsns.boxplot(df['bmi'],palette=color[vlue])\nplt.title(\"Body index mass without outliears\")\nplt.subplot(2,2,4)\ndf = df[(df['avg_glucose_level']<140)]\nsns.boxplot(df['avg_glucose_level'],palette=color[vlue])\nplt.title(\"Avg glucose lavel without outliears\")\nplt.tight_layout(pad=0.6)","33fd7455":"encoder = LabelEncoder()","1939569f":"df.head(2)","f120974a":"columns = ['gender','age','hypertension','ever_married','work_type','Residence_type','smoking_status']","cc30c8b0":"for i in columns:\n    df[i] = encoder.fit_transform(df[i])","55fd3959":"df.head()","8dea9fff":"majority = df[df['stroke']==0]\nminority = df[df['stroke']==1]","28cb85ac":"unsample =resample(minority,replace=True,n_samples=len(majority))","c08ec6a7":"StrokeData = pd.concat([majority,unsample])\nStrokeData = StrokeData.sample(frac=1).reset_index(drop=True)","f168fc84":"StrokeData.head()","6db67341":"X = StrokeData.drop(columns=['id',\"stroke\"],axis=1)\ny = StrokeData[\"stroke\"]","2e3f2490":"DataModels = pd.DataFrame()","1bee80e5":"def TrainandTestwithMinMaxScalar (X,y,algorithm,modelname):\n    X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.3,random_state=52)\n    norm =MinMaxScaler().fit(X_train)\n    X_train =norm.transform(X_train)\n    X_test = norm.transform(X_test)\n    model = algorithm\n    model.fit(X_train,y_train)\n    predection = model.predict(X_test)\n    score = round((accuracy_score(y_test, predection)*100),2)\n    print (\"\\nModel Score:\",score,\"%\")\n    print (\"precision_score:\",precision_score(y_test,predection))\n    print(\"Recall\",recall_score(y_test,predection))\n    print (\"F1 Score:\",f1_score(y_test,predection))\n    print (\"ROC AUC Score:\",roc_auc_score(y_test,predection))\n    print(\"Confusion Matrix:\",confusion_matrix(y_test,predection))\n    print()\n    \n    model = {}\n    \n    model['Algorithm'] = modelname\n    model['Model Score'] = str(score) + \"%\"\n    model['Precision'] = round(precision_score(y_test, predection),2)\n    model['Recall'] = round(recall_score(y_test, predection),2)\n    model['F1 score'] = round(f1_score(y_test, predection),2)\n    model['ROC-AUC score'] = round(roc_auc_score(y_test, predection),2)\n    \n    return model","3bbdc725":"algorithms = {\"Random Forest\":RandomForestClassifier(),\"Decesion Tree\":DecisionTreeClassifier(),\"Logistic Regression\":LogisticRegression(),\n            \"K-Nearest- Neghobour\":KNeighborsClassifier(n_neighbors=3),\"Supportive Vector Classifier\":SVC()}\n\nfor i,j in algorithms.items():\n    print(\"Algorithm Performance: {}\".format(i))\n    model= TrainandTestwithMinMaxScalar(X,y,j,i)\n    DataModels =DataModels.append(model,ignore_index=True)\n    print()","7e9fb5f9":"DataModels.sort_values(by=\"F1 score\",ascending=False)","0cbc967b":"# Modeling"}}