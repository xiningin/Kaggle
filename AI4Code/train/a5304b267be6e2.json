{"cell_type":{"1273b569":"code","249bc5bc":"code","80761203":"code","f049f238":"code","726f3fc6":"code","7d0928f0":"code","bf44a898":"code","72d957b3":"code","9b296249":"code","42e6c20c":"code","e491c381":"code","a09a2390":"code","19ac1f2e":"code","83845b5c":"code","298cc282":"code","7baadf2c":"code","155c6732":"code","70cb3e9e":"code","d86b3c68":"code","57d5152b":"code","e220d7b6":"code","87982d6d":"code","03f52b19":"code","96a09c84":"code","9ebe31de":"code","07b7b09d":"code","6387262c":"code","808d2ddd":"code","8f5f8590":"code","d84d4a1e":"code","2d55b036":"code","158f2f46":"code","e38e241c":"code","5ec8b107":"code","75db5ddc":"code","5e305baa":"code","80ecd2dd":"code","165f3874":"code","1ce983a9":"code","2a6eac26":"markdown","457fc86a":"markdown","dbbf90d7":"markdown","aaf5f08a":"markdown","5db8676c":"markdown","6758e21a":"markdown"},"source":{"1273b569":"import sys\nsys.version","249bc5bc":"%reload_ext autoreload\n%autoreload 2\n%matplotlib inline","80761203":"import numpy as np\nimport pandas as pd\nimport os\nimport matplotlib.pyplot as plt\nimport torch\nfrom torch import nn, optim\nimport seaborn as sns\nfrom pathlib import Path\nimport PIL\nimport json\nfrom fastai import *\nfrom fastai.tabular import *\nfrom fastai.vision import *\nfrom fastai.metrics import error_rate\n","f049f238":"PATH = Path('content\/kaggle\/')\nPATH\n","726f3fc6":"PATH = Path('..\/input')","7d0928f0":"train_df = pd.read_csv(PATH\/'train.csv')\ntrain_df.head()\n","bf44a898":"test_df = pd.read_csv(PATH\/'test.csv')\ntest_df.head()","72d957b3":"ss_df = pd.read_csv(PATH\/'sample_submission.csv')\nss_df.head()","9b296249":"train_df.describe()","42e6c20c":"test_df.describe()","e491c381":"dep_var = 'target'","a09a2390":"cat_names = []","19ac1f2e":"df = train_df","83845b5c":"cont_names = []\nvar_counter = 0 #creating a counter\nnum_of_cont_vars = len(df.columns) - 2\nfor _ in range(num_of_cont_vars):\n    name = 'var_' + str(var_counter)\n    cont_names.append(name)\n    var_counter+=1","298cc282":"procs = [FillMissing, Normalize]","7baadf2c":"valid_idx = range(len(df)-20000, len(df))","155c6732":"test = TabularList.from_df(test_df, path=PATH, cont_names=cont_names, procs=procs)","70cb3e9e":"path = PATH\n\ndata = (TabularList.from_df(df, path=path, cont_names=cont_names, procs=procs)\n        .split_by_rand_pct(valid_pct=0.1)\n        .label_from_df(cols=dep_var)\n        .add_test(test)\n        .databunch())\n\nprint(data.train_ds.cont_names)","d86b3c68":"data.show_batch(rows= 6)","57d5152b":"(cat_x,cont_x),y = next(iter(data.train_dl))\nfor o in (cat_x, cont_x, y): print(to_np(o[:5]))","e220d7b6":"device = \"cuda\" if torch.cuda.is_available() else \"cpu\"\nprint(device)","87982d6d":"learn = tabular_learner(data, layers=[ 200 , 100], ps=[0.001,0.01], emb_drop=0.04, emb_szs={'ID_code': 20}, metrics=accuracy , path='.')\n#to change to get rsqme just change accuracy to rmspe\n","03f52b19":"learn.model","96a09c84":"learn.lr_find()\nlearn.recorder.plot()","9ebe31de":"lr = 1e-02\nlearn.fit_one_cycle(7, lr , wd = 0.3)\n#wd=0.2","07b7b09d":"learn.show_results()","6387262c":"learn.recorder.plot_losses()","808d2ddd":"learn.data.batch_size","8f5f8590":"test_preds = learn.get_preds(ds_type=DatasetType.Test)\ntest_preds","d84d4a1e":"target_preds = test_preds[0][:,1]\ntest_df['target'] = target_preds","2d55b036":"target_preds","158f2f46":"test_df.to_csv('submission.csv', columns=['ID_code', 'target'], index=False)","e38e241c":"sub = pd.read_csv('submission.csv')\nsub.head()","5ec8b107":"preds = learn.get_preds()\npred_tensors = preds[0]\nactual_labels = preds[1].numpy()","75db5ddc":"pred_tensors, actual_labels\n\ntotal_to_test = 20000\ncorrect = 0\nfor i in range(total_to_test):\n    if(pred_tensors[i][0] > 0.5 and actual_labels[i] == 0):\n        correct = correct + 1\n\nprint(f\"{correct}\/{total_to_test} correct\")","5e305baa":"learn.save(\"trained_model\", return_path=True)","80ecd2dd":"learn = learn.load(\"trained_model\" )","165f3874":"!kaggle competitions submit -c santander-customer-transaction-prediction -f {PATH\/'submission.csv'} -m \"initial submission\"","1ce983a9":"test_df.head()","2a6eac26":"We want to help our customers understand their financial health and identify which products and services might help them achieve their monetary goals.\nWe want to be able to work with  binary classification problems such as: is a customer satisfied? Will a customer buy this product? Can a customer pay this loan?\n\nIn this challenge we want to be able to identify which customers will make a specific transaction in the future, irrespective of the amount of money transacted.\nThe data provided for this competition has the same structure as the real data we have available to solve this problem.\n\n","457fc86a":"                                            **DEFINING AND TRAIN  MODEL**","dbbf90d7":"SANTANDER SOLUTION","aaf5f08a":"                                               **LOADING KAGGLE DATASET **\n        \n---\n\n","5db8676c":"                                                 ** DATA PRE-PROCESSING**","6758e21a":"                                                               **LOAD DATA INTO DATAFRAME**"}}