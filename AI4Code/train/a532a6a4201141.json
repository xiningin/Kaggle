{"cell_type":{"f539e07a":"code","0daf40bd":"code","266b5e50":"code","6fc0a1b0":"code","913ecf64":"code","1ea4eea9":"code","7bf43353":"code","010b70cd":"code","52272759":"code","bd8e541d":"code","9c171db2":"code","48fa6d3c":"code","5fd2795f":"code","fbc481a7":"code","46dd4222":"code","5d2232d2":"code","eeefe81a":"code","419d848e":"code","4b45ea23":"code","1df0d696":"code","76641c48":"code","8f78081d":"code","21d713af":"code","13f03f08":"code","9841e653":"code","7b51ae6a":"code","c6559c6b":"code","767544b5":"code","b2f2a389":"code","a060ec9a":"code","6e35421a":"code","3b7b1ba4":"code","2eba064a":"code","a47a6775":"code","31689ca0":"code","eb693a4f":"code","1258f090":"code","244f26cc":"code","7af4fd45":"code","75acd5cd":"code","9bea8dda":"code","98583ecf":"code","22d38a16":"code","4ec7dda1":"code","5b45ab16":"code","9787463a":"code","008f89d2":"code","48d31978":"code","e8fd8054":"code","bf26454f":"code","6583dbc3":"code","50d55e93":"code","8576eeb4":"code","26a52e56":"code","62c967e7":"code","2abe26c9":"code","fc3504bd":"code","fdce6ab8":"markdown","da1d3c2f":"markdown","6b677b9d":"markdown","24a2928b":"markdown","66d31ef9":"markdown","ad95e81f":"markdown","03b75411":"markdown","84fea0b8":"markdown","80c5d79b":"markdown","b131b42f":"markdown","abb2bb5c":"markdown","36d1b983":"markdown"},"source":{"f539e07a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","0daf40bd":"import numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.metrics import confusion_matrix,accuracy_score","266b5e50":"train_df=pd.read_csv('\/kaggle\/input\/titanic\/train.csv')\ntest_df=pd.read_csv('\/kaggle\/input\/titanic\/test.csv')","6fc0a1b0":"train_df.head()","913ecf64":"train_df.info()","1ea4eea9":"train_df.describe().transpose()","7bf43353":"sns.countplot(train_df['Survived'])","010b70cd":"sns.countplot(train_df['Sex'])","52272759":"def impute(passenger):\n    age,sex=passenger\n    if age < 18:\n        return 'child'\n    else:\n        return sex","bd8e541d":"train_df['person']=train_df[['Age','Sex']].apply(impute,axis=1)","9c171db2":"sns.countplot(train_df['person'],hue=train_df['Survived'])","48fa6d3c":"sns.countplot(train_df['Pclass'],hue=train_df['person'])","5fd2795f":"sns.countplot(train_df['Pclass'],hue=train_df['Survived'])","fbc481a7":"train_df['Age'].hist(bins=70)","46dd4222":"sns.boxplot(train_df['Age'])","5d2232d2":"fig = sns.FacetGrid(train_df, hue=\"Sex\",aspect=4)\nfig.map(sns.kdeplot,'Age',shade= True)\noldest = train_df['Age'].max()\nfig.set(xlim=(0,oldest))\nfig.add_legend()","eeefe81a":"fig = sns.FacetGrid(train_df, hue=\"person\",aspect=4)\nfig.map(sns.kdeplot,'Age',shade= True)\noldest = train_df['Age'].max()\nfig.set(xlim=(0,oldest))\nfig.add_legend()","419d848e":"fig = sns.FacetGrid(train_df, hue=\"Pclass\",aspect=4)\nfig.map(sns.kdeplot,'Age',shade= True)\noldest = train_df['Age'].max()\nfig.set(xlim=(0,oldest))\nfig.add_legend()","4b45ea23":"deck=train_df['Cabin'].dropna()","1df0d696":"levels = []\n\nfor level in deck:\n    levels.append(level[0])    \n\ncabin_df = pd.DataFrame(levels)\ncabin_df.columns = ['Cabin']\nsns.countplot('Cabin',data=cabin_df,palette='winter_d')","76641c48":"cabin_df = cabin_df[cabin_df.Cabin != 'T']\nsns.countplot('Cabin',data=cabin_df,palette='summer')","8f78081d":"cabin_df = cabin_df[cabin_df.Cabin != 'T']\nsns.countplot('Cabin',hue=train_df['Survived'],data=cabin_df,palette='summer')","21d713af":"sns.countplot('Embarked',data=train_df,hue='Pclass')","13f03f08":"sns.countplot('Embarked',data=train_df,hue='Survived')","9841e653":"train_df.drop(['PassengerId','Ticket','Cabin'],axis=1,inplace=True)\ntest_df.drop(['Ticket','Cabin'],axis=1,inplace=True)","7b51ae6a":"def impute_age(cols):\n    Age = cols[0]\n    Pclass = cols[1]\n    \n    if pd.isnull(Age):\n        \n        if Pclass == 1:\n            return 37\n        elif Pclass == 2:\n            return 29\n        elif Pclass == 3:\n            return 24\n    else:\n        return Age","c6559c6b":"train_df['Age']=train_df[['Age','Pclass']].apply(impute_age,axis=1)\ntest_df['Age']=test_df[['Age','Pclass']].apply(impute_age,axis=1)","767544b5":"train_df['Ageband']=pd.cut(train_df['Age'],5)\ntrain_df[['Ageband','Survived']].groupby(['Ageband'],as_index=False).mean().sort_values(by='Ageband')","b2f2a389":"def impute(col):\n    if col<=16:\n        return 0\n    if col>16 and col<=32:\n        return 1\n    if col>32 and col<=48:\n        return 2\n    if col>48 and col<=64:\n        return 3\n    if col>64:\n        return 4","a060ec9a":"train_df['Age']=train_df['Age'].apply(impute)\ntest_df['Age']=test_df['Age'].apply(impute)","6e35421a":"combine=[train_df]","3b7b1ba4":"for i in combine:\n    i['Title']=i.Name.str.extract(' ([A-Za-z]+)\\.',expand = True)\npd.crosstab(train_df['Title'],train_df['Sex'])","2eba064a":"for i in combine:\n    i['Title'] = i['Title'].replace(['Lady', 'Countess','Capt', 'Col', \n                                                 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    i['Title'] = i['Title'].replace('Mlle', 'Miss')\n    i['Title'] = i['Title'].replace('Ms', 'Miss')\n    i['Title'] = i['Title'].replace('Mme', 'Mrs')","a47a6775":"combine=[test_df]","31689ca0":"for i in combine:\n    i['Title']=i.Name.str.extract(' ([A-Za-z]+)\\.',expand = True)\npd.crosstab(test_df['Title'],train_df['Sex'])","eb693a4f":"for i in combine:\n    i['Title'] = i['Title'].replace(['Lady', 'Countess','Capt', 'Col', \n                                                 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n\n    i['Title'] = i['Title'].replace('Mlle', 'Miss')\n    i['Title'] = i['Title'].replace('Ms', 'Miss')\n    i['Title'] = i['Title'].replace('Mme', 'Mrs')","1258f090":"train_df['Fareband']=pd.qcut(train_df['Fare'],4)\ntrain_df[['Fareband','Survived']].groupby(train_df['Fareband'],as_index=True).mean().sort_values(by='Fareband')","244f26cc":"def impute(col):\n    if col<=7.91:\n        return 0\n    if col>7.91 and col<=14.454:\n        return 1\n    if col>14.454 and col<=31.0:\n        return 2\n    if col>31.0:\n        return 3","7af4fd45":"train_df['Fare']=train_df['Fare'].apply(impute)\ntest_df['Fare']=test_df['Fare'].apply(impute)","75acd5cd":"train_df['isalone']=train_df['Parch']+train_df['SibSp']\ntest_df['isalone']=test_df['Parch']+test_df['SibSp']","9bea8dda":"def impute(col):\n    if col>0:\n        return 1\n    else:\n        return 0","98583ecf":"train_df['isalone']=train_df['isalone'].apply(impute)\ntest_df['isalone']=test_df['isalone'].apply(impute)","22d38a16":"train_df.drop(['Name','person','Ageband','Fareband'],axis=1,inplace=True)\ntest_df.drop('Name',axis=1,inplace=True)","4ec7dda1":"train_df['Title']=train_df['Title'].map({'Mr':1,'Mrs':2,'Miss':3,'Master':4,'Rare':5})\ntest_df['Title']=test_df['Title'].map({'Mr':1,'Mrs':2,'Miss':3,'Master':4,'Rare':5})","5b45ab16":"test_df['Fare'] = test_df['Fare'].fillna(0,inplace=True)","9787463a":"train_df=pd.get_dummies(train_df,drop_first=True)\ntest_df=pd.get_dummies(test_df,drop_first=True)","008f89d2":"train_df.head()","48d31978":"X_train=train_df.drop('Survived',axis=1)\ny_train=train_df['Survived']\nX_test=test_df","e8fd8054":"log_reg=LogisticRegression()\nlog_reg.fit(X_train,y_train)\nprediction=log_reg.predict(X_test)\nacc_reg=round(log_reg.score(X_train,y_train)*100,2)\nprint(acc_reg)","bf26454f":"knn=KNeighborsClassifier(n_neighbors=3)\nknn.fit(X_train,y_train)\nprediction=knn.predict(X_test)\nacc_knn=round(knn.score(X_train,y_train)*100,2)\nprint(acc_knn)","6583dbc3":"gaussian = GaussianNB()\ngaussian.fit(X_train,y_train)\nprediction=gaussian.predict(X_test)\nacc_gaussian=round(gaussian.score(X_train,y_train)*100,2)\nacc_gaussian","50d55e93":"svc=SVC()\nsvc.fit(X_train,y_train)\nprediction=svc.predict(X_test)\nacc_svc=round(svc.score(X_train,y_train)*100,2)\nacc_svc","8576eeb4":"dtr=DecisionTreeClassifier()\ndtr.fit(X_train,y_train)\nprediction=dtr.predict(X_test)\nacc_dtr=round(dtr.score(X_train,y_train)*100,2)\nprint(acc_dtr)","26a52e56":"rfc=RandomForestClassifier()\nrfc.fit(X_train,y_train)\nprediction=rfc.predict(X_test)\nacc_rfc=round(rfc.score(X_train,y_train)*100,2)\nprint(acc_rfc)","62c967e7":"models=pd.DataFrame({'Models':['LogisticRegression','KNeighborsClassifier','GaussianNB','SVC','DecisionTreeClassifier','RandomForestClassifier'],\n        'Score':[acc_reg,acc_knn,acc_gaussian,acc_svc,acc_dtr,acc_rfc]})","2abe26c9":"models.sort_values(by='Score',ascending=False)","fc3504bd":"submission = pd.DataFrame({\n        \"PassengerId\": test_df[\"PassengerId\"],\n        \"Survived\": prediction})\nsubmission.to_csv('my_submission.csv', index=False)\nprint('Submitted!')","fdce6ab8":"# Feature Engineering","da1d3c2f":"# Sorting Models by Accuracy Score","6b677b9d":"# KNeighborsClassifier","24a2928b":"# Support Vector Classifier","66d31ef9":"# Logistic Regression","ad95e81f":"# Gaussian Naive Bayes","03b75411":"# Creating Dummy Variables","84fea0b8":"# Importing Libraries","80c5d79b":"# DecisionTreeClassifier","b131b42f":"# RandomForestClassifier","abb2bb5c":"# Splitting Data","36d1b983":"# EDA"}}