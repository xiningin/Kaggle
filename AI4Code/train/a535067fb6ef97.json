{"cell_type":{"1fb059ff":"code","ca75c4f2":"code","6c1be186":"code","94e108eb":"code","76bfc8e4":"code","056a98ef":"code","ca585a6f":"code","1621bffa":"code","126c2d08":"code","c4d4918a":"code","91c89bce":"code","1bf70894":"code","523f0dff":"code","e61b1c88":"code","1fdd33af":"code","e676deac":"code","90987eba":"markdown","f425682e":"markdown","09464c10":"markdown","4fd9c365":"markdown"},"source":{"1fb059ff":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\n%matplotlib inline\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport datetime\nimport seaborn as sns\nfrom sklearn.linear_model import LogisticRegression\n\nnp.random.seed(42)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","ca75c4f2":"# Load data\nrainfall = pd.read_csv(\"\/kaggle\/input\/weather-dataset-rattle-package\/weatherAUS.csv\")","6c1be186":"# Get info about all columns\nrainfall.info()","94e108eb":"# Count NaNs for each variables:\nrainfall.isna().sum()","76bfc8e4":"# We should remove rows without RainTomorrow (y) value\nrainfall = rainfall[rainfall.RainTomorrow.notna()]\nrainfall.isna().sum()","056a98ef":"# NaN columns may vary on location\nrainfall.groupby(\"Location\").agg(lambda x: x.isna().sum()).reset_index()","ca585a6f":"# Format data as Datetime.Datetime object\nrainfall.Date = pd.to_datetime(rainfall.Date)","1621bffa":"# Convert dates to seasons (southern hemisphere)\nfall = range(80, 172)\nwinter = range(172, 264)\nspring = range(264, 355)\nrainfall[\"Spring\"] = rainfall.Date.dt.dayofyear.apply(lambda x: 1 if x in spring else 0)\nrainfall[\"Winter\"] = rainfall.Date.dt.dayofyear.apply(lambda x: 1 if x in winter else 0)\nrainfall[\"Fall\"] = rainfall.Date.dt.dayofyear.apply(lambda x: 1 if x in fall else 0)","126c2d08":"# Count observations for each city\nn_obs_by_city = rainfall.groupby(\"Location\").agg('count').reset_index()\nn_obs_by_city.iloc[:, 2:] = n_obs_by_city.iloc[:, 2:].div(n_obs_by_city.Date, axis=0)\n\n# Get columns names for each city\ncolumns_by_city = {}\nfor city in n_obs_by_city.Location:\n    columns = n_obs_by_city.iloc[:, 2:].loc[n_obs_by_city.Location == city, :].gt(0.9).any()\n    columns_by_city[city] = list(columns[columns].index)\n    \n    # We always want to have 'RainToday' variable in model\n    if \"RainToday\" not in columns_by_city[city]:\n        columns_by_city[city].append(\"RainToday\")","c4d4918a":"# Convert \"Yes\" and \"No\" into 0-1\nrainfall.RainToday = rainfall.RainToday.apply(lambda x: 0 if x == \"No\" else 1)\nrainfall.RainTomorrow = rainfall.RainTomorrow.apply(lambda x: 0 if x == \"No\" else 1)","91c89bce":"# As we have some quality data columns, we should encode them as 0-1 vectors or try another methods.\n# Separate numerical data from the rest:\nnumerical_variables = [\"MinTemp\", \"MaxTemp\", \"Rainfall\", \"Evaporation\", \"Sunshine\", \"WindGustSpeed\", \n                       \"WindSpeed9am\", \"WindSpeed3pm\", \"Humidity9am\", \"Humidity3am\", \"Pressure9am\", \n                       \"Pressure3am\", \"Cloud9am\", \"Cloud3pm\", \"Temp9am\", \"Temp3pm\"]","1bf70894":"# Create object containing all data:\nclass RainfallDataObject:\n    def __init__(self, data, columns_by_city, split_ratio=0.25):\n        self.columns_by_city = columns_by_city\n        self.cities = list(columns_by_city.keys())\n        self.data_by_city = {}\n        self.train_indices = {}\n        self.test_indices = {}\n        self.dropdata = [\"Date\", \"Location\", \"WindGustDir\", \"WindDir9am\", \"WindDir3pm\", \"RainTomorrow\"]\n        for city in self.cities:\n            # Specifiy columns\n            columns = [\"Date\", \"Location\"] + columns_by_city[city]\n            self.data_by_city[city] = data.loc[data.Location == city, columns].dropna()\n            \n            # Prepare train & test sets\n            indices = np.linspace(0, self.data_by_city[city].shape[0], num=self.data_by_city[city].shape[0], endpoint=False)\n            np.random.shuffle(indices)\n            self.test_indices[city] = indices[:int(0.25 * self.data_by_city[city].shape[0])]\n            self.train_indices[city] = indices[int(0.25 * self.data_by_city[city].shape[0]):]\n            \n            # Add difference variables\n            if \"Humidity9am\" in self.columns_by_city[city] and \"Humidity3pm\" in self.columns_by_city[city]:\n                self.data_by_city[city][\"HumidityDiff\"] = self.data_by_city[city][\"Humidity3pm\"] - self.data_by_city[city][\"Humidity9am\"]\n                columns.append(\"HumidityDiff\")\n            \n            if \"Pressure9am\" in self.columns_by_city[city] and \"Pressure3am\" in self.columns_by_city[city]:\n                self.data_by_city[city][\"PressureDiff\"] = self.data_by_city[city][\"Pressure3am\"] - self.data_by_city[city][\"Pressure9am\"]\n                columns.append(\"PressureDiff\")\n                \n            if \"Cloud9am\" in self.columns_by_city[city] and \"Cloud3pm\" in self.columns_by_city[city]:\n                self.data_by_city[city][\"CloudDiff\"] = self.data_by_city[city][\"Cloud3pm\"] - self.data_by_city[city][\"Cloud9am\"]\n                columns.append(\"CloudDiff\")\n            \n            if \"Temp9am\" in self.columns_by_city[city] and \"Temp3pm\" in self.columns_by_city[city]:\n                self.data_by_city[city][\"TempDiff\"] = self.data_by_city[city][\"Temp3pm\"] - self.data_by_city[city][\"Temp9am\"]\n                columns.append(\"TempDiff\")\n                \n            # Convert wind to 2D vector using (cos(x), sin(x)) representation\n            wind_angle = {'E': 0, 'ENE': 22.5, 'NE': 45, 'NNE': 67.5,\n                          'N': 90, 'NNW': 112.5, 'NW': 135, 'WNW': 157.5,\n                          'W': 180, 'WSW': 202.5, 'SW': 225, 'SSW': 247.5,\n                          'S': 270, 'SSE': 292.5, 'SE': 315, 'ESE': 337.5}\n            if \"WindGustDir\" in self.columns_by_city[city] and \"WindGustSpeed\" in self.columns_by_city[city]:\n                self.data_by_city[city][\"WindGustSpeedX\"] = np.cos(np.deg2rad(self.data_by_city[city].WindGustDir.apply(lambda x: wind_angle[x]))) * self.data_by_city[city].WindGustSpeed\n                self.data_by_city[city][\"WindGustSpeedY\"] = np.sin(np.deg2rad(self.data_by_city[city].WindGustDir.apply(lambda x: wind_angle[x]))) * self.data_by_city[city].WindGustSpeed\n                columns += [\"WindGustSpeedX\", \"WindGustSpeedY\"]\n            \n            if \"WindDir9am\" in self.columns_by_city[city] and \"WindSpeed9am\" in self.columns_by_city[city]:\n                self.data_by_city[city][\"WindSpeedX9am\"] = np.cos(np.deg2rad(self.data_by_city[city].WindDir9am.apply(lambda x: wind_angle[x]))) * self.data_by_city[city].WindSpeed9am\n                self.data_by_city[city][\"WindSpeedY9am\"] = np.sin(np.deg2rad(self.data_by_city[city].WindDir9am.apply(lambda x: wind_angle[x]))) * self.data_by_city[city].WindSpeed9am\n                columns += [\"WindSpeedX9am\", \"WindSpeedY9am\"]\n                \n            if \"WindDir3pm\" in self.columns_by_city[city] and \"WindSpeed3pm\" in self.columns_by_city[city]:\n                self.data_by_city[city][\"WindSpeedX3pm\"] = np.cos(np.deg2rad(self.data_by_city[city].WindDir3pm.apply(lambda x: wind_angle[x]))) * self.data_by_city[city].WindSpeed3pm\n                self.data_by_city[city][\"WindSpeedY3pm\"] = np.sin(np.deg2rad(self.data_by_city[city].WindDir3pm.apply(lambda x: wind_angle[x]))) * self.data_by_city[city].WindSpeed3pm\n                columns += [\"WindSpeedX3pm\", \"WindSpeedY3pm\"]            \n            \n                \n        \n    def get_city_data(self, city):\n        return self.data_by_city[city]\n    \n    def get_city_varnames(self, city):\n        return self.data_by_city[city].columns.tolist()\n    \n    def train_set(self, city):\n        droplist = list(set(self.dropdata) & set(self.data_by_city[city].columns))\n        return self.data_by_city[city].iloc[self.train_indices[city], :].drop(droplist, axis=1, inplace=False), self.data_by_city[city].RainTomorrow.iloc[self.train_indices[city]]\n    \n    def test_set(self, city):\n        droplist = list(set(self.dropdata) & set(self.data_by_city[city].columns))\n        return self.data_by_city[city].iloc[self.test_indices[city], :].drop(droplist, axis=1, inplace=False), self.data_by_city[city].RainTomorrow.iloc[self.test_indices[city]]\n    \n    def nrow(self, city):\n        return self.data_by_city[city].shape[0]\n    \n    def ncol(self, city):\n        return self.data_by_city[city].shape[1]\n    \n    def nrow_train(self, city):\n        return len(self.train_indices[city])\n    \n    def nrow_test(self, city):\n        return len(self.test_indices[city])  ","523f0dff":"# Create data object\nrainfallData = RainfallDataObject(rainfall, columns_by_city)","e61b1c88":"def accuracy(pred, real):\n    return sum(pred == real) \/ real.shape[0]","1fdd33af":"# Prepare models and accuracy table\nmodels = {}\nacc = {}\n\n# Train model for each city\nfor city in n_obs_by_city.Location:\n    X_train, y_train = rainfallData.train_set(city)\n    X_test, y_test = rainfallData.test_set(city)\n    models[city] = LogisticRegression(max_iter=10000)\n    models[city].fit(X_train, y_train)\n    pred = models[city].predict(X_test)\n    acc[city] = accuracy(pred, y_test)","e676deac":"print(f\"Average accuracy is: {np.mean(list(acc.values()))}\")","90987eba":"# 2. Train models for each city","f425682e":"# Rain in Australia\n\n- Author: **Antoni K\u0119dzierski**\n- Method: **Logistic Regression**\n- Date: **15.03.2021**","09464c10":"As can be spot, different values are measured along the cities. We should prepare separate models for every city, with variables adequate to what was measured.\n\nWe assume that a variable is worth considering if 90% of records contains it.","4fd9c365":"# 1. Load and prepare data"}}