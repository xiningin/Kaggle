{"cell_type":{"6d8f8a7c":"code","bd783aef":"code","d8e62862":"code","1f194d75":"code","1ca52519":"code","9fe33b3e":"code","f98448f4":"code","b794b6c2":"code","bf647c3f":"code","b4849320":"code","4bca51b4":"code","9dbf7ba9":"code","3e1d4d5b":"code","159090be":"code","cc26a5f6":"code","e74fd440":"code","4dadee85":"code","954afe85":"code","f22fa774":"code","f561bd7c":"code","749dcd0c":"code","29ee159f":"code","dcb5b613":"code","f0836000":"markdown","06c2e1cd":"markdown","d4e11752":"markdown","ff26bbc1":"markdown","02826584":"markdown","28454f96":"markdown","351d7c95":"markdown","d6c381fd":"markdown","fc2cc774":"markdown","097d8122":"markdown","170e6162":"markdown","c1f406cc":"markdown","f3ff9768":"markdown","a96d88c7":"markdown","8b53f9fa":"markdown"},"source":{"6d8f8a7c":"import numpy as np\nimport pandas as pd\nimport re\nimport spacy\nimport os\n\nprint(f'spacy={spacy.__version__}')\npd.show_versions()\n# Input data files are available in the \"..\/input\/\" directory.\nprint('inputs=',os.listdir(\"..\/input\/repository\/ZNClub-PA-ML-AI-Sentiment-analysis-using-Business-News-82d860a\/data\"))\n# Any results you write to the current directory are saved as output.","bd783aef":"df = pd.read_csv(\"\\\n..\/input\/repository\/ZNClub-PA-ML-AI-Sentiment-analysis-using-Business-News-82d860a\/data\/processed\/normalized.csv\")\ndf = df.iloc[:5]\nrow_index = 1\ndf.head()","d8e62862":"%%time\nclean_body = lambda x: re.sub(\"[\\n\\t\\r]\", \"\", x) if isinstance(x, str) else \"\"\ndf['body'] = df['body'].apply(clean_body)","1f194d75":"%%time\nfrom spacy.lang.en import English\nnlp = English()\ndf['Doc'] = df['body'].apply(nlp)","1ca52519":"row_index = 1\ndoc = df['Doc'][row_index]\ndoc","9fe33b3e":"span = doc[0:8]\nspan","f98448f4":"print('Index:   ', [token.i for token in span])\nprint('Text:    ', [token.text for token in span])\nprint('is_alpha:', [token.is_alpha for token in span])\nprint('is_punct:', [token.is_punct for token in span])\nprint('like_num:', [token.like_num for token in span])","b794b6c2":"%%time\nnlp = spacy.load('en_core_web_sm')\ndf['StatsDoc'] = df['body'].apply(nlp)","bf647c3f":"doc = df['StatsDoc'][row_index]\ndoc","b4849320":"pos_df = pd.DataFrame()\nfor i, token in enumerate(doc):\n    pos_df.loc[i, 'text'] = token.text\n    pos_df.loc[i, 'lemma'] = token.lemma_,\n    pos_df.loc[i, 'pos'] = spacy.explain(token.pos_)\n    pos_df.loc[i, 'tag'] = token.tag_\n    pos_df.loc[i, 'dep'] = token.dep_\n    pos_df.loc[i, 'shape'] = token.shape_\n    pos_df.loc[i, 'is_alpha'] = token.is_alpha\n    pos_df.loc[i, 'is_stop'] = token.is_stop\n    pos_df.loc[i, 'is_punctuation'] = token.is_punct\npos_df.head(20)","4bca51b4":"pos = pos_df.groupby('pos')['text'].count().reset_index()\npos.plot(x='pos' , y='text', kind='bar' )","9dbf7ba9":"ent_df = pd.DataFrame()\nfor i, token in enumerate(doc.ents):\n    ent_df.loc[i, 'entity'] = token.text\n    ent_df.loc[i, 'label'] = token.label_\n    ent_df.loc[i, 'recognition'] = spacy.explain(token.label_)\nent_df.head(20)","3e1d4d5b":"ent = ent_df.groupby('label')['entity'].count().reset_index()\nent.plot(x='label' , y='entity', kind='bar' )","159090be":"spacy.displacy.render(doc, style='ent',jupyter=True)","cc26a5f6":"dep_df = pd.DataFrame()\nfor i, token in enumerate(doc):\n    dep_df.loc[i, 'token'] = token.text\n    dep_df.loc[i, 'label'] = token.dep_\n    dep_df.loc[i, 'dependency'] = spacy.explain(token.dep_)\ndep_df.head(20)","e74fd440":"dep = dep_df.groupby('label')['token'].count().reset_index()\ndep.nlargest(columns=['token'], n=10).plot(x='label' , y='token', kind='bar' )","4dadee85":"spacy.displacy.render(doc, style='dep', jupyter=True,options={'distance': 80})\nspacy.displacy.render(nlp('Kaggle is fun, keep kaggling'), style='dep', jupyter=True,options={'distance': 80})","954afe85":"%%time\n# `en_core_web_sm`, which don't ship with word vectors and only use context-sensitive tensors\n# df['Similarity'] = df['StatsDoc'].apply(lambda x: x.similarity(doc)) \n\nnlp = spacy.load('en_core_web_lg')\ndf['LargeStatsDoc'] = df['body'].apply(nlp)","f22fa774":"doc = df['LargeStatsDoc'][row_index]\ndoc","f561bd7c":"from spacy.matcher import Matcher\nmatcher = Matcher(nlp.vocab)","749dcd0c":"# from IPython.core.interactiveshell import InteractiveShell\n# InteractiveShell.ast_node_interactivity = \"all\"\nname = 'Nevil'\nname = 'James'\ntest_docs = [\n    f'Hey this is {name}',\n    f'Hi I am {name} from Mumbai',\n    f'Hi this is {name} joining from Mumbai'\n]\n\nsingle_doc = ''\nfor each in test_docs:\n    single_doc = single_doc + '; ' + each\n\nprocessed_test_docs = [nlp(each) for each in test_docs]\ndoc = processed_test_docs[0]\ndoc = nlp(single_doc)\nent_df = pd.DataFrame()\n\nfor i, token in enumerate(doc.ents):\n    ent_df.loc[i, 'entity'] = token.text\n    ent_df.loc[i, 'label'] = token.label_\n    ent_df.loc[i, 'recognition'] = spacy.explain(token.label_)\nent_df.head(20)","29ee159f":"pos_df = pd.DataFrame()\nfor i, token in enumerate(doc):\n    pos_df.loc[i, 'text'] = token.text\n    pos_df.loc[i, 'lemma'] = token.lemma_,\n    pos_df.loc[i, 'pos'] = spacy.explain(token.pos_)\n    pos_df.loc[i, 'pos_id'] = token.pos_\n    pos_df.loc[i, 'tag'] = token.tag_\n    pos_df.loc[i, 'dep'] = token.dep_\n    pos_df.loc[i, 'shape'] = token.shape_\n    pos_df.loc[i, 'is_alpha'] = token.is_alpha\n    pos_df.loc[i, 'is_stop'] = token.is_stop\n    pos_df.loc[i, 'is_punctuation'] = token.is_punct    \npos_df","dcb5b613":"\npattern1 = [\n    {\"POS\": \"INTJ\", \"OP\": \"+\"},\n    {\"POS\": \"DET\", \"OP\": \"?\"},\n    {\"POS\": \"PRON\", \"OP\": \"?\"},\n    {\"POS\": \"VERB\", \"OP\": \"+\"},\n    {\"POS\": \"PROPN\", \"OP\": \"+\"},\n]\n\n\nmatcher = Matcher(nlp.vocab)\nmatcher.add(\"MeetingGreeting\", None, pattern1)\n\nlist_of_matches = [matcher(each) for each in processed_test_docs]\nsentence_no_of_matched = []\nfor sentence_no, matches in enumerate(list_of_matches):\n    for id, start, end in matches:\n        print(f'Pattern={id} matched_at={processed_test_docs[sentence_no][start:end]}')\n        sentence_no_of_matched.append(sentence_no)\n\nfor sentence_no in sentence_no_of_matched:\n    doc = processed_test_docs[sentence_no]\n    persons = [token for token in doc.ents if token.label_ == 'PERSON']\n#     persons = [(token.text, token.label_) for token in doc.ents]\n    print(f'DOC={doc} with NER={persons}')","f0836000":"### NLP Model creates Document object","06c2e1cd":"### Document creates Span object","d4e11752":"### NER: Named Entity Recognition","ff26bbc1":"#### Example\n\n- [Parts of Speech Annotations](https:\/\/spacy.io\/api\/annotation)\n- [Operators](https:\/\/spacy.io\/usage\/rule-based-matching#quantifiers)\n","02826584":"### Similarity","28454f96":"### POS: Parts of Speech","351d7c95":"### Lexical Analysis","d6c381fd":"# S p a C y  1 0 1\n\n```\nAll features described in SpaCy 101 Course with the News DataSet\n```","fc2cc774":"## Statistical models","097d8122":"```ScratchPad```","170e6162":"### Token Dependency","c1f406cc":"#### PhraseMatcher","f3ff9768":"### Matcher","a96d88c7":"## Language Model","8b53f9fa":"#### RuleMatcher"}}