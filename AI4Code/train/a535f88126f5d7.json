{"cell_type":{"867fb16a":"code","c3fe934c":"code","ccb6a701":"code","a099ea54":"code","be26bdd2":"code","448c1d55":"code","2d23488d":"code","a1bc927d":"code","d551b222":"code","94197a80":"code","2b56b642":"code","5403efd6":"code","09035910":"code","5016a7ec":"code","5fcb57e1":"markdown","1b05cdaa":"markdown","a842f66a":"markdown"},"source":{"867fb16a":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","c3fe934c":"df = pd.read_csv(\"\/kaggle\/input\/disney-movie-dataset\/Walt_disney_movie_dataset.csv\")\ndf","ccb6a701":"from datetime import datetime # objects which actually manipulating objects(date,datetime) and not string or timestamps.\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport warnings\nwarnings.filterwarnings(\"ignore\")\nsns.set()","a099ea54":"df.describe().transpose()","be26bdd2":"\nprint(\"Production company : \",df[\"Production company\"].unique())\nprint(df[\"Production company\"].value_counts())\nprint(\"*\"*93)\ndf_prod = df[\"Production company\"].value_counts().index[0]\nprint(\"most frequent Production company is :\", df_prod)\n# replace nan to df_prod \ndf['Production company'] = df['Production company'].fillna(df['Production company'].value_counts().idxmax())\ndf.head(2)\n","448c1d55":"print(\"Language : \",df[\"Language\"].unique())\nprint(df[\"Language\"].value_counts())\nprint(\"*\"*93)\ndf_lang = df[\"Language\"].value_counts().index[0]\nprint(\"most frequent language is :\", df_lang)\n# replace nan to df_lang\ndf['Language'] = df['Language'].fillna(df['Language'].value_counts().idxmax())\ndf.head(2)","2d23488d":"# large Nan value drop them \ndrop_col = [\"Narrated by\",\"Story by\",\"Production company\",\n            \"Running time\",\"Box office\",\"Budget\",\"Based on\",\n            \"Languages\",\"Countries\",\"Color process\",\n            \"Japanese\",\"Hepburn\",\"Adaptation by\",\n            \"Animation by\",\"Traditional\",\"Simplified\",\"Release date\"]\ndf.drop(drop_col, axis=1,inplace=True)","a1bc927d":"df.shape","d551b222":"df.isnull().sum()","94197a80":"\ndf.dtypes","2b56b642":"running_times = df.sort_values(['Running time (int)'],  ascending=False)\nrunning_times.head(20)","5403efd6":"plt.figure(figsize = (17,200))\nax = sns.barplot(x = 'Running time (int)', y = 'title',data = df)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90)\nplt.show()","09035910":"\n# INDIAN movie \nindian_movie = df[df[\"Country\"]==\"India\"]\nplt.figure(figsize = (15,10))\nsns.barplot(x = 'title',y = 'Running time (int)',data = indian_movie)\nplt.xticks(rotation=90)\nplt.show()","5016a7ec":"plt.figure(figsize = (17,200))\nax = sns.barplot(x = 'Box office (float)', y = 'title',data = df)\nax.set_xticklabels(ax.get_xticklabels(),rotation = 90)\nplt.show()","5fcb57e1":"## Visualize the data","1b05cdaa":"## Sort the data according to time","a842f66a":"## Removing Column that have more than 200 Nan Value"}}