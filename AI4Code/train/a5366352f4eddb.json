{"cell_type":{"108195dc":"code","7023c787":"code","a2dd7e78":"code","59c802a1":"code","5c02877c":"code","a81ca277":"code","3d80293a":"code","17a57147":"code","7977f7d5":"code","abbe409f":"code","29046dd0":"code","01d82942":"code","551d00f8":"code","02e62e84":"code","6cbf2792":"code","c77f7607":"code","123bc236":"code","197c8e08":"code","aba17f02":"code","a951f61e":"code","53e610cd":"code","6d4abfde":"code","0cc843c3":"code","e1998665":"code","54fcc70f":"code","9f9b4327":"code","1101d1e5":"code","6b5c2c01":"code","e033936e":"code","3ef6ad90":"code","ffeba15a":"code","2374be8b":"code","bea0a948":"code","1dc0f47a":"code","5c427c72":"code","67ee28fa":"code","5aea2983":"code","edfec1b5":"code","e8aac8a4":"code","969350b3":"code","033812c1":"code","20a51936":"code","464bf671":"code","ccd3d408":"code","081adad3":"code","8efac37d":"code","106a4509":"code","187478fa":"code","2af0b171":"code","9e77d3d1":"code","ee88f096":"code","801bb417":"code","4db68beb":"code","7986cdf5":"code","621e68ec":"code","2d09d139":"code","755e6dcf":"markdown","165f3224":"markdown","b7463d76":"markdown","48976f18":"markdown","853854d9":"markdown","30cf3dd4":"markdown","1a9a3255":"markdown","8a913dcf":"markdown","ec04cda8":"markdown","ddd36827":"markdown","12c66abc":"markdown","40623d5d":"markdown"},"source":{"108195dc":"import numpy as np \nimport matplotlib.pyplot as plt \nimport matplotlib.colors as mcolors\nimport pandas as pd \nimport random\nimport math\nimport time\nfrom sklearn.linear_model import LinearRegression, BayesianRidge\nfrom sklearn.model_selection import RandomizedSearchCV, train_test_split\nfrom sklearn.svm import SVR\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\nimport datetime\nimport operator\nplt.style.use('seaborn')\n%matplotlib inline ","7023c787":"confirmed_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Confirmed.csv')\ndeaths_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Deaths.csv')\nrecoveries_df = pd.read_csv('https:\/\/raw.githubusercontent.com\/CSSEGISandData\/COVID-19\/master\/csse_covid_19_data\/csse_covid_19_time_series\/time_series_19-covid-Recovered.csv')","a2dd7e78":"confirmed_df.head()","59c802a1":"cols = confirmed_df.keys()","5c02877c":"confirmed = confirmed_df.loc[:, cols[4]:cols[-1]]\ndeaths = deaths_df.loc[:, cols[4]:cols[-1]]\nrecoveries = recoveries_df.loc[:, cols[4]:cols[-1]]","a81ca277":"dates = confirmed.keys()\nworld_cases = []\ntotal_deaths = [] \nmortality_rate = []\ntotal_recovered = [] \n\nfor i in dates:\n    confirmed_sum = confirmed[i].sum()\n    death_sum = deaths[i].sum()\n    recovered_sum = recoveries[i].sum()\n    world_cases.append(confirmed_sum)\n    total_deaths.append(death_sum)\n    mortality_rate.append(death_sum\/confirmed_sum)\n    total_recovered.append(recovered_sum)","3d80293a":"days_since_1_22 = np.array([i for i in range(len(dates))]).reshape(-1, 1)\nworld_cases = np.array(world_cases).reshape(-1, 1)\ntotal_deaths = np.array(total_deaths).reshape(-1, 1)\ntotal_recovered = np.array(total_recovered).reshape(-1, 1)","17a57147":"days_in_future = 5\nfuture_forcast = np.array([i for i in range(len(dates)+days_in_future)]).reshape(-1, 1)\nadjusted_dates = future_forcast[:-5]","7977f7d5":"start = '1\/22\/2020'\nstart_date = datetime.datetime.strptime(start, '%m\/%d\/%Y')\nfuture_forcast_dates = []\nfor i in range(len(future_forcast)):\n    future_forcast_dates.append((start_date + datetime.timedelta(days=i)).strftime('%m\/%d\/%Y'))","abbe409f":"X_train_confirmed, X_test_confirmed, y_train_confirmed, y_test_confirmed = train_test_split(days_since_1_22, world_cases, test_size=0.15, shuffle=False) ","29046dd0":"kernel = ['poly', 'sigmoid', 'rbf']\nc = [0.01, 0.1, 1]\ngamma = [0.01, 0.1, 1]\nepsilon = [0.01, 0.1, 1]\nshrinking = [True, False]\ndegree = [3, 4]\n\nsvm_grid = {'kernel': kernel, 'C': c, 'gamma' : gamma, 'epsilon': epsilon, 'shrinking' : shrinking, 'degree': degree}\n\nsvm = SVR()\nsvm_search = RandomizedSearchCV(svm, svm_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nsvm_search.fit(X_train_confirmed, y_train_confirmed)","01d82942":"svm_search.best_params_","551d00f8":"svm_confirmed = svm_search.best_estimator_\nsvm_pred = svm_confirmed.predict(future_forcast)","02e62e84":"# check against testing data\nsvm_test_pred = svm_confirmed.predict(X_test_confirmed)\nplt.plot(svm_test_pred)\nplt.plot(y_test_confirmed)\nprint('MAE:', mean_absolute_error(svm_test_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(svm_test_pred, y_test_confirmed))","6cbf2792":"linear_model = LinearRegression(normalize=True, fit_intercept=True)\nlinear_model.fit(X_train_confirmed, y_train_confirmed)\ntest_linear_pred = linear_model.predict(X_test_confirmed)\nlinear_pred = linear_model.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_linear_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_linear_pred, y_test_confirmed))","c77f7607":"print(linear_model.coef_)\nprint(linear_model.intercept_)","123bc236":"plt.plot(test_linear_pred)\nplt.plot(y_test_confirmed)","197c8e08":"tol = [1e-4, 1e-3, 1e-2]\nalpha_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nalpha_2 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_1 = [1e-7, 1e-6, 1e-5, 1e-4]\nlambda_2 = [1e-7, 1e-6, 1e-5, 1e-4]\n\nbayesian_grid = {'tol': tol, 'alpha_1': alpha_1, 'alpha_2' : alpha_2, 'lambda_1': lambda_1, 'lambda_2' : lambda_2}\n\nbayesian = BayesianRidge()\nbayesian_search = RandomizedSearchCV(bayesian, bayesian_grid, scoring='neg_mean_squared_error', cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)\nbayesian_search.fit(X_train_confirmed, y_train_confirmed)","aba17f02":"bayesian_search.best_params_","a951f61e":"bayesian_confirmed = bayesian_search.best_estimator_\ntest_bayesian_pred = bayesian_confirmed.predict(X_test_confirmed)\nbayesian_pred = bayesian_confirmed.predict(future_forcast)\nprint('MAE:', mean_absolute_error(test_bayesian_pred, y_test_confirmed))\nprint('MSE:',mean_squared_error(test_bayesian_pred, y_test_confirmed))","53e610cd":"plt.plot(y_test_confirmed)\nplt.plot(test_bayesian_pred)","6d4abfde":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=15)\nplt.show()","0cc843c3":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, svm_pred, linestyle='dashed', color='purple')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'SVM predictions'])\nplt.xticks(size=15)\nplt.show()","e1998665":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, linear_pred, linestyle='dashed', color='orange')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Days Since 1\/22\/2020', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Linear Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","54fcc70f":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, world_cases)\nplt.plot(future_forcast, bayesian_pred, linestyle='dashed', color='green')\nplt.title('# of Coronavirus Cases Over Time', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.legend(['Confirmed Cases', 'Bayesian Ridge Regression Predictions'])\nplt.xticks(size=15)\nplt.show()","9f9b4327":"# Future predictions using SVM \nprint('SVM future predictions:')\nset(zip(future_forcast_dates[-5:], svm_pred[-5:]))","1101d1e5":"# Future predictions using Linear Regression \nprint('Ridge regression future predictions:')\nset(zip(future_forcast_dates[-5:], bayesian_pred[-5:]))","6b5c2c01":"# Future predictions using Linear Regression \nprint('Linear regression future predictions:')\nprint(linear_pred[-5:])","e033936e":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_deaths, color='red')\nplt.title('# of Coronavirus Deaths Over Time', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('# of Deaths', size=30)\nplt.xticks(size=15)\nplt.show()","3ef6ad90":"mean_mortality_rate = np.mean(mortality_rate)\nplt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, mortality_rate, color='orange')\nplt.axhline(y = mean_mortality_rate,linestyle='--', color='black')\nplt.title('Mortality Rate of Coronavirus Over Time', size=30)\nplt.legend(['mortality rate', 'y='+str(mean_mortality_rate)])\nplt.xlabel('Time', size=30)\nplt.ylabel('Mortality Rate', size=30)\nplt.xticks(size=15)\nplt.show()","ffeba15a":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.title('# of Coronavirus Cases Recovered Over Time', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(rotation=50, size=15)\nplt.show()","2374be8b":"plt.figure(figsize=(20, 12))\nplt.plot(adjusted_dates, total_deaths, color='r')\nplt.plot(adjusted_dates, total_recovered, color='green')\nplt.legend(['death', 'recoveries'], loc='best', fontsize=20)\nplt.title('# of Coronavirus Cases', size=30)\nplt.xlabel('Time', size=30)\nplt.ylabel('# of Cases', size=30)\nplt.xticks(size=15)\nplt.show()","bea0a948":"plt.figure(figsize=(20, 12))\nplt.plot(total_recovered, total_deaths)\nplt.title('# of Coronavirus Deaths vs. # of Coronavirus Recoveries', size=30)\nplt.xlabel('# of Coronavirus Recoveries', size=30)\nplt.ylabel('# of Coronavirus Deaths', size=30)\nplt.xticks(size=15)\nplt.show()","1dc0f47a":"latest_confirmed = confirmed_df[dates[-1]]\nlatest_deaths = deaths_df[dates[-1]]\nlatest_recoveries = recoveries_df[dates[-1]]","5c427c72":"unique_countries =  list(confirmed_df['Country\/Region'].unique())","67ee28fa":"country_confirmed_cases = []\nno_cases = []\nfor i in unique_countries:\n    cases = latest_confirmed[confirmed_df['Country\/Region']==i].sum()\n    if cases > 0:\n        country_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n        \nfor i in no_cases:\n    unique_countries.remove(i)\n    \nunique_countries = [k for k, v in sorted(zip(unique_countries, country_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_countries)):\n    country_confirmed_cases[i] = latest_confirmed[confirmed_df['Country\/Region']==unique_countries[i]].sum()","5aea2983":"# number of cases per country\/region\nprint('Confirmed Cases by Countries\/Regions:')\nfor i in range(len(unique_countries)):\n    print(f'{unique_countries[i]}: {country_confirmed_cases[i]} cases')","edfec1b5":"unique_provinces =  list(confirmed_df['Province\/State'].unique())\n# those are countries, which are not provinces\/states.\noutliers = ['United Kingdom', 'Denmark', 'France']\nfor i in outliers:\n    unique_provinces.remove(i)","e8aac8a4":"province_confirmed_cases = []\nno_cases = [] \nfor i in unique_provinces:\n    cases = latest_confirmed[confirmed_df['Province\/State']==i].sum()\n    if cases > 0:\n        province_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# remove areas with no confirmed cases\nfor i in no_cases:\n    unique_provinces.remove(i)\n    \nunique_provinces = [k for k, v in sorted(zip(unique_provinces, province_confirmed_cases), key=operator.itemgetter(1), reverse=True)]\nfor i in range(len(unique_provinces)):\n    province_confirmed_cases[i] = latest_confirmed[confirmed_df['Province\/State']==unique_provinces[i]].sum()","969350b3":"# number of cases per province\/state\/city\nprint('Confirmed Cases by Province\/States (US, China, Australia, Canada):')\nfor i in range(len(unique_provinces)):\n    print(f'{unique_provinces[i]}: {province_confirmed_cases[i]} cases')","033812c1":"nan_indices = [] \n\n# handle nan if there is any, it is usually a float: float('nan')\n\nfor i in range(len(unique_provinces)):\n    if type(unique_provinces[i]) == float:\n        nan_indices.append(i)\n\nunique_provinces = list(unique_provinces)\nprovince_confirmed_cases = list(province_confirmed_cases)\n\nfor i in nan_indices:\n    unique_provinces.pop(i)\n    province_confirmed_cases.pop(i)","20a51936":"china_confirmed = latest_confirmed[confirmed_df['Country\/Region']=='China'].sum()\noutside_mainland_china_confirmed = np.sum(country_confirmed_cases) - china_confirmed\nplt.figure(figsize=(16, 9))\nplt.barh('Mainland China', china_confirmed)\nplt.barh('Outside Mainland China', outside_mainland_china_confirmed)\nplt.title('# of Coronavirus Confirmed Cases')\nplt.show()","464bf671":"print('Outside Mainland China {} cases:'.format(outside_mainland_china_confirmed))\nprint('Mainland China: {} cases'.format(china_confirmed))\nprint('Total: {} cases'.format(china_confirmed+outside_mainland_china_confirmed))","ccd3d408":"# Only show 10 countries with the most confirmed cases, the rest are grouped into the other category\nvisual_unique_countries = [] \nvisual_confirmed_cases = []\nothers = np.sum(country_confirmed_cases[10:])\nfor i in range(len(country_confirmed_cases[:10])):\n    visual_unique_countries.append(unique_countries[i])\n    visual_confirmed_cases.append(country_confirmed_cases[i])\n\nvisual_unique_countries.append('Others')\nvisual_confirmed_cases.append(others)","081adad3":"plt.figure(figsize=(32, 18))\nplt.barh(visual_unique_countries, visual_confirmed_cases)\nplt.title('# of Covid-19 Confirmed Cases in Countries\/Regions', size=20)\nplt.show()","8efac37d":"# lets look at it in a logarithmic scale \nlog_country_confirmed_cases = [math.log10(i) for i in visual_confirmed_cases]\nplt.figure(figsize=(32, 18))\nplt.barh(visual_unique_countries, log_country_confirmed_cases)\nplt.title('Log of Common Log # of Coronavirus Confirmed Cases in Countries\/Regions', size=20)\nplt.show()","106a4509":"# Only show 10 provinces with the most confirmed cases, the rest are grouped into the other category\nvisual_unique_provinces = [] \nvisual_confirmed_cases2 = []\nothers = np.sum(province_confirmed_cases[10:])\nfor i in range(len(province_confirmed_cases[:10])):\n    visual_unique_provinces.append(unique_provinces[i])\n    visual_confirmed_cases2.append(province_confirmed_cases[i])\n\nvisual_unique_provinces.append('Others')\nvisual_confirmed_cases2.append(others)","187478fa":"plt.figure(figsize=(32, 18))\nplt.barh(visual_unique_provinces, visual_confirmed_cases2)\nplt.title('# of Coronavirus Confirmed Cases in Provinces\/States', size=20)\nplt.show()","2af0b171":"log_province_confirmed_cases = [math.log10(i) for i in visual_confirmed_cases2]\nplt.figure(figsize=(32, 18))\nplt.barh(visual_unique_provinces, log_province_confirmed_cases)\nplt.title('Log of # of Coronavirus Confirmed Cases in Provinces\/States', size=20)\nplt.show()","9e77d3d1":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\nplt.figure(figsize=(20,20))\nplt.title('Covid-19 Confirmed Cases per Country')\nplt.pie(visual_confirmed_cases, colors=c)\nplt.legend(visual_unique_countries, loc='best')\nplt.show()","ee88f096":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\nplt.figure(figsize=(20,20))\nplt.title('Covid-19 Confirmed Cases per State\/Province\/Region')\nplt.pie(visual_confirmed_cases2, colors=c)\nplt.legend(visual_unique_provinces, loc='best')\nplt.show()","801bb417":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\nplt.figure(figsize=(20,20))\nplt.title('Covid-19 Confirmed Cases in Countries Outside of Mainland China')\nplt.pie(visual_confirmed_cases[1:], colors=c)\nplt.legend(visual_unique_countries[1:], loc='best')\nplt.show()","4db68beb":"us_regions = list(confirmed_df[confirmed_df['Country\/Region']=='US']['Province\/State'].unique())\nus_confirmed_cases = []\nno_cases = [] \nfor i in us_regions:\n    cases = latest_confirmed[confirmed_df['Province\/State']==i].sum()\n    if cases > 0:\n        us_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# remove areas with no confirmed cases\nfor i in no_cases:\n    us_regions.remove(i)","7986cdf5":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\nplt.figure(figsize=(20,20))\nplt.title('Covid-19 Confirmed Cases in the United States')\nplt.pie(us_confirmed_cases, colors=c)\nplt.legend(us_regions, loc='best')\nplt.show()","621e68ec":"china_regions = list(confirmed_df[confirmed_df['Country\/Region']=='China']['Province\/State'].unique())\nchina_confirmed_cases = []\nno_cases = [] \nfor i in china_regions:\n    cases = latest_confirmed[confirmed_df['Province\/State']==i].sum()\n    if cases > 0:\n        china_confirmed_cases.append(cases)\n    else:\n        no_cases.append(i)\n \n# remove areas with no confirmed cases\nfor i in no_cases:\n    china_confirmed_cases.remove(i)","2d09d139":"c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))\nplt.figure(figsize=(20,20))\nplt.title('Covid-19 Confirmed Cases in the Mainland China')\nplt.pie(china_confirmed_cases, colors=c)\nplt.legend(china_regions, loc='best')\nplt.show()","755e6dcf":"Getting information about countries\/regions that have confirmed coronavirus cases","165f3224":"Future forcasting","b7463d76":"Get all the dates for the outbreak","48976f18":"Convert integer into datetime for better visualization","853854d9":"Plotting the number of deaths against the number of recoveries","30cf3dd4":"Import the data (make sure you update this on a daily basis)","1a9a3255":"Model for predicting # of confirmed cases. I am using support vector machine, bayesian ridge , and linear regression in this example. ","8a913dcf":" Graphing the number of confirmed cases, deaths, and the mortality rate over time, as well as the number of recoveries","ec04cda8":"***Visual Representations*** (bar charts and pie charts)","ddd36827":"Graphing the number of deaths and the number of recoveries","12c66abc":"<h1>This notebook tracks the spread of the novel coronavirus, also known as SARS-CoV-2. It is a contagious respiratory virus that first started in Wuhan in December 2019. On 2\/11\/2020, the disease is officially named COVID-19 by the World Health Organization. \n    <br>Data: <a href='https:\/\/github.com\/CSSEGISandData\/COVID-19'>https:\/\/github.com\/CSSEGISandData\/COVID-19<\/a>. A big thank you to Johns Hopkins for providing the data.\n    <br>\n    <br>Learn more from the <a href='https:\/\/www.who.int\/emergencies\/diseases\/novel-coronavirus-2019'>WHO<\/a>\n    <br>Learn more from the <a href='https:\/\/www.cdc.gov\/coronavirus\/2019-ncov'>CDC<\/a>\n    <br>Map Visualizations from  <a href='https:\/\/gisanddata.maps.arcgis.com\/apps\/opsdashboard\/index.html#\/bda7594740fd40299423467b48e9ecf6'>Johns Hopkins<\/a>\n    <br>Feel free to provide me with feedbacks. \n    <br> Last update: 3\/19\/2020 10:52 PM\n    <br> Make sure you run the notebook to see the graphs better. Some diagrams are hard to see in the default view. \n    <br> <a href='https:\/\/github.com\/therealcyberlord'>Source code is on my Github<\/a>\n    \n<\/h1>\n\n<center><img src='https:\/\/newsfortomorrow.com\/wp-content\/uploads\/2020\/01\/1578562454_Wuhan-pneumonia-New-coronavirus-related-to-SARS-idenitified.jpg'>\n* Source: https:\/\/newsfortomorrow.com\/wp-content\/uploads\/2020\/01\/1578562454_Wuhan-pneumonia-New-coronavirus-related-to-SARS-idenitified.jpg <\/center>\n\n<h1>Keep strong, world! Stay safe.<\/h1>\n\n\n\n\n\n","40623d5d":"Getting the latest information about provinces\/states that have confirmed coronavirus cases"}}