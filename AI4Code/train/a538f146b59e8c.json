{"cell_type":{"3cbb81dd":"code","d1fc7672":"code","c2b38b8f":"code","0b35c2d1":"code","7f08f713":"code","4cf84f9a":"code","f5d8edcd":"code","69aeca5b":"code","87cfa47b":"code","d43941de":"code","18c1d947":"code","76e565f0":"code","699c8036":"code","1fa15605":"code","f7f0a742":"code","5a43eaf5":"code","678a2f52":"code","37bf2715":"code","1fc26de1":"code","2d422330":"markdown","193e4d2a":"markdown","9aa57df7":"markdown","ba4288ec":"markdown","fa23a0c4":"markdown","22908003":"markdown","20f9a775":"markdown","c3497019":"markdown","27a8658f":"markdown","bf0da14f":"markdown","919cb5dc":"markdown","2f3819e6":"markdown","6406836a":"markdown","1181ca30":"markdown","72d65bb6":"markdown","3e5203f3":"markdown","8e543cb3":"markdown"},"source":{"3cbb81dd":"import os\nimport numpy as np\nimport pandas as pd\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\nimport sklearn.preprocessing\nfrom sklearn.metrics import r2_score\n\nfrom keras.layers import Dense,Dropout,SimpleRNN,LSTM\nfrom keras.models import Sequential\n\n#check all the files in the input dataset\nprint(os.listdir(\"..\/input\/\"))","d1fc7672":"#choosing DOM_hourly.csv data for analysis\nfpath='..\/input\/DOM_hourly.csv'\n\ndf=pd.read_csv(fpath)\ndf.head()","c2b38b8f":"#Let's use datetime(2012-10-01 12:00:00,...) as index instead of numbers(0,1,...)\n#This will be helpful for further data analysis as we are dealing with time series data\ndf = pd.read_csv(fpath, index_col='Datetime', parse_dates=['Datetime'])\ndf.head()","0b35c2d1":"#checking missing data\ndf.isna().sum()","7f08f713":"df.plot(figsize=(16,4),legend=True)\n\nplt.title('DOM hourly power consumption data - BEFORE NORMALIZATION')\n\nplt.show()","4cf84f9a":"def normalize_data(df):\n    scaler = sklearn.preprocessing.MinMaxScaler()\n    df['DOM_MW']=scaler.fit_transform(df['DOM_MW'].values.reshape(-1,1))\n    return df\n\ndf_norm = normalize_data(df)\ndf_norm.shape","f5d8edcd":"df_norm.plot(figsize=(16,4),legend=True)\n\nplt.title('DOM hourly power consumption data - AFTER NORMALIZATION')\n\nplt.show()","69aeca5b":"df_norm.shape","87cfa47b":"def load_data(stock, seq_len):\n    X_train = []\n    y_train = []\n    for i in range(seq_len, len(stock)):\n        X_train.append(stock.iloc[i-seq_len : i, 0])\n        y_train.append(stock.iloc[i, 0])\n    \n    #1 last 6189 days are going to be used in test\n    X_test = X_train[110000:]             \n    y_test = y_train[110000:]\n    \n    #2 first 110000 days are going to be used in training\n    X_train = X_train[:110000]           \n    y_train = y_train[:110000]\n    \n    #3 convert to numpy array\n    X_train = np.array(X_train)\n    y_train = np.array(y_train)\n    \n    X_test = np.array(X_test)\n    y_test = np.array(y_test)\n    \n    #4 reshape data to input into RNN models\n    X_train = np.reshape(X_train, (110000, seq_len, 1))\n    \n    X_test = np.reshape(X_test, (X_test.shape[0], seq_len, 1))\n    \n    return [X_train, y_train, X_test, y_test]","d43941de":"#create train, test data\nseq_len = 20 #choose sequence length\n\nX_train, y_train, X_test, y_test = load_data(df, seq_len)\n\nprint('X_train.shape = ',X_train.shape)\nprint('y_train.shape = ', y_train.shape)\nprint('X_test.shape = ', X_test.shape)\nprint('y_test.shape = ',y_test.shape)","18c1d947":"rnn_model = Sequential()\n\nrnn_model.add(SimpleRNN(40,activation=\"tanh\",return_sequences=True, input_shape=(X_train.shape[1],1)))\nrnn_model.add(Dropout(0.15))\n\nrnn_model.add(SimpleRNN(40,activation=\"tanh\",return_sequences=True))\nrnn_model.add(Dropout(0.15))\n\nrnn_model.add(SimpleRNN(40,activation=\"tanh\",return_sequences=False))\nrnn_model.add(Dropout(0.15))\n\nrnn_model.add(Dense(1))\n\nrnn_model.summary()","76e565f0":"rnn_model.compile(optimizer=\"adam\",loss=\"MSE\")\nrnn_model.fit(X_train, y_train, epochs=10, batch_size=1000)","699c8036":"rnn_predictions = rnn_model.predict(X_test)\n\nrnn_score = r2_score(y_test,rnn_predictions)\nprint(\"R2 Score of RNN model = \",rnn_score)","1fa15605":"def plot_predictions(test, predicted, title):\n    plt.figure(figsize=(16,4))\n    plt.plot(test, color='blue',label='Actual power consumption data')\n    plt.plot(predicted, alpha=0.7, color='orange',label='Predicted power consumption data')\n    plt.title(title)\n    plt.xlabel('Time')\n    plt.ylabel('Normalized power consumption scale')\n    plt.legend()\n    plt.show()\n    \nplot_predictions(y_test, rnn_predictions, \"Predictions made by simple RNN model\")","f7f0a742":"lstm_model = Sequential()\n\nlstm_model.add(LSTM(40,activation=\"tanh\",return_sequences=True, input_shape=(X_train.shape[1],1)))\nlstm_model.add(Dropout(0.15))\n\nlstm_model.add(LSTM(40,activation=\"tanh\",return_sequences=True))\nlstm_model.add(Dropout(0.15))\n\nlstm_model.add(LSTM(40,activation=\"tanh\",return_sequences=False))\nlstm_model.add(Dropout(0.15))\n\nlstm_model.add(Dense(1))\n\nlstm_model.summary()","5a43eaf5":"lstm_model.compile(optimizer=\"adam\",loss=\"MSE\")\nlstm_model.fit(X_train, y_train, epochs=10, batch_size=1000)","678a2f52":"lstm_predictions = lstm_model.predict(X_test)\n\nlstm_score = r2_score(y_test, lstm_predictions)\nprint(\"R^2 Score of LSTM model = \",lstm_score)","37bf2715":"plot_predictions(y_test, lstm_predictions, \"Predictions made by LSTM model\")","1fc26de1":"plt.figure(figsize=(15,8))\n\nplt.plot(y_test, c=\"orange\", linewidth=3, label=\"Original values\")\nplt.plot(lstm_predictions, c=\"red\", linewidth=3, label=\"LSTM predictions\")\nplt.plot(rnn_predictions, alpha=0.5, c=\"green\", linewidth=3, label=\"RNN predictions\")\nplt.legend()\nplt.title(\"Predictions vs actual data\", fontsize=20)\nplt.show()","2d422330":"- **Change the index of rows in the dataframe from 0,1,2... to datetime (2005-12-31 01:00:00,...)**\n\n**Why should we change the index of rows?**<br>\nBecause we are dealing with time series data and we will need the datetime data to recognize a particular record.","193e4d2a":"- **Let's check r2 score for the values predicted by the above trained SIMPLE RNN model**\n- For more info on r2 score refer [this](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.r2_score.html)","9aa57df7":"- In this kernel I will provide all the steps required for doing time series analysis using time series data and simple RNN, LSTM models.\n- You can see the performance of simple RNN model, LSTM model and compare their performance.\n\n## 1. Basic step","ba4288ec":"- **Let's compare the actual values vs predicted values by plotting a graph**","fa23a0c4":"## 6. Compare predictions made by simple RNN, LSTM model by plotting data in a single graph","22908003":"- **Let's check r2 score for the values predicted by the above trained LSTM model**","20f9a775":"## 5. Build an LSTM model","c3497019":"- **Let's compare the actual values vs predicted values by plotting a graph**\n- We see that the predcited values are close to the actual values meaning the RNN model is performing well in predicting the sequence.","27a8658f":"Since there is no missing data in the data loaded we will not be dropping the missing value records or will not be imputing the data. We will proceed with the further data analysis.\n\n- **Data visualization**","bf0da14f":"- **Visualize data after normalization**\n- After normalization the range of power consumption values changes which we can observe on the **y-axis** of the graph. In the earlier graph that was displayed it was in the range **0 - 22500**\n- Now after normalization we can observe that the data range on **y-axis** is **0.0 - 1.0**","919cb5dc":"- **Check if there are missing values in the data loaded**","2f3819e6":"## 3. Prepare data for training the RNN models","6406836a":"## 2. Data loading and data exploration\n\n- **Load the data file**","1181ca30":"- **Normalize data**\n- Before proceeding with further data analysis we must ensure that the data is normalized. \n- For this we will be using [sklearn MinMaxScaler](https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.preprocessing.MinMaxScaler.html)","72d65bb6":"**References:**\n- https:\/\/www.kaggle.com\/thebrownviking20\/everything-you-can-do-with-a-time-series\n- https:\/\/www.kaggle.com\/thebrownviking20\/intro-to-recurrent-neural-networks-lstm-gru","3e5203f3":"**To get an understanding on how sequence length is useful in training RNN models refer to the following links:**\n- https:\/\/stackoverflow.com\/questions\/49573242\/what-is-sequence-length-in-lstm\n- https:\/\/stats.stackexchange.com\/questions\/158834\/what-is-a-feasible-sequence-length-for-an-rnn-to-model","8e543cb3":"## 4. Build a SIMPLE RNN model"}}