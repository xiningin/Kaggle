{"cell_type":{"9dfb9406":"code","1a92178d":"code","2612365c":"code","3b2d77ac":"code","de494e16":"code","ee8c23a4":"code","1ff4aa53":"code","afc691ea":"code","7607cd7d":"code","95bef3e1":"code","f207ae4a":"code","4a23d325":"code","89059cfd":"code","9372a174":"code","035cff93":"code","2f8bb27f":"code","92506308":"code","cbb2e3e0":"code","541d7c91":"markdown","4e3aeb55":"markdown","b4d0b1cb":"markdown","7f8b0101":"markdown","b4b718b5":"markdown"},"source":{"9dfb9406":"import os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","1a92178d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport math\nfrom sklearn.model_selection import train_test_split \nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import metrics\nfrom sklearn.metrics import mean_squared_error","2612365c":"!pip install xlrd\n!pip install openpyxl \ndata = pd.read_excel('\/kaggle\/input\/bangladesh-life-expectancy\/Bangladesh.xlsx')\ndata","3b2d77ac":"data.isnull().sum()","de494e16":"data.info()","ee8c23a4":"data.describe()","1ff4aa53":"correlation = data.corr()\ncorrelation","afc691ea":"sns.heatmap(correlation,cmap='coolwarm',annot=True)","7607cd7d":"data.plot('Life_Expectancy', 'GDP')","95bef3e1":"data.plot('Life_Expectancy', 'Population')","f207ae4a":"X = data[['GDP','Population']].values\ny = data['Life_Expectancy'].values","4a23d325":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)","89059cfd":"model = LinearRegression()  \nmodel.fit(X_train, y_train)","9372a174":"y_pred = model.predict(X_test)","035cff93":"df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\ndf1 = df.head(25)","2f8bb27f":"df1.plot(kind='bar',figsize=(10,8))\nplt.grid(which='major', linestyle='-', linewidth='0.5', color='green')\nplt.grid(which='minor', linestyle=':', linewidth='0.5', color='black')\nplt.show()","92506308":"print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))  \nprint('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))  \nprint('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))","cbb2e3e0":"accuracy = model.score(X_test, y_test)\nprint(accuracy*100, \"%\")","541d7c91":"# **Error Measurement**","4e3aeb55":"# **Analysis Data**","b4d0b1cb":"# **EDA**","7f8b0101":"# **Importing Libary**","b4b718b5":"# **Model Implement**"}}