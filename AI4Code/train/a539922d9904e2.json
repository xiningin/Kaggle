{"cell_type":{"5f69baa4":"code","71f541e7":"code","f4916275":"code","c365f222":"code","f546115d":"code","3aa69bb8":"code","04abf21c":"code","4e8b966a":"markdown","e6b616bf":"markdown","a980dc83":"markdown","18a80850":"markdown","16930a5d":"markdown","09cdf24c":"markdown","99427c86":"markdown"},"source":{"5f69baa4":"import numpy as np\nimport pandas as pd\nimport numba\nfrom sympy import isprime\nfrom math import sqrt","71f541e7":"cities = pd.read_csv('..\/input\/cities.csv', index_col=['CityId'])","f4916275":"XY = np.stack((cities.X.astype(np.float32), cities.Y.astype(np.float32)), axis=1)\nis_not_prime = np.array([not isprime(city_id) for city_id in cities.index], dtype=np.int32)\n\n@numba.jit('f8(i8[:])', nopython=True, parallel=False)\ndef pure_score(path):\n    '''Pure path score without penalties.'''\n    dist = 0.0\n    for i in numba.prange(path.shape[0] - 1):\n        a, b = XY[path[i]], XY[path[i+1]]\n        dx, dy = a[0] - b[0], a[1] - b[1]\n        dist += sqrt(dx * dx + dy * dy)\n    return dist\n\n\n@numba.jit('f8(i4, i8[:])', nopython=True, parallel=False)\ndef chunk_score(start_offset, chunk):\n    '''Score of path's chunk that starts at index 'start_offset'.'''\n    dist = 0.0\n    penalty = 0.0\n    penalty_modulo = 9 - start_offset % 10\n    for i in numba.prange(chunk.shape[0] - 1):\n        id_a = chunk[i]\n        a, b = XY[id_a], XY[chunk[i+1]]\n        dx, dy = a[0] - b[0], a[1] - b[1]\n        d = sqrt(dx * dx + dy * dy)\n        dist += d\n        if i % 10 == penalty_modulo and is_not_prime[id_a]:\n            penalty += d\n    return dist + 0.1 * penalty\n\n\n@numba.jit('f8(i8[:])', nopython=True, parallel=False)\ndef path_score(path):\n    return chunk_score(0, path)\n","c365f222":"path = np.concatenate([cities.index, [0]])","f546115d":"%timeit pure_score(path)","3aa69bb8":"%timeit path_score(path)","04abf21c":"%timeit chunk_score(42, path[42:2019])","4e8b966a":"#### Import all the stuff","e6b616bf":"#### Define some silly Rudolph's path","a980dc83":"### 2. Test scoring functions' performance","18a80850":"#### Define scoring functions","16930a5d":"#### Read the cities","09cdf24c":"### 1. Define scoring functions","99427c86":"#### Measure functions' performance\n"}}