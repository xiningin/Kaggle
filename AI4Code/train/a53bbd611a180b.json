{"cell_type":{"d058360d":"code","b49ca31d":"code","cb48d5d1":"code","7d42e8dd":"code","e1e0fa56":"code","79eec78d":"code","623a6e82":"code","387a091d":"code","dccadb37":"code","e0268a07":"code","0cea3a27":"code","ffe07436":"code","53adacc2":"code","24c82f66":"code","1acba402":"code","d25c0723":"code","367829aa":"code","9a05a76f":"code","93992603":"code","39b26790":"code","91a22ddc":"code","cdf21218":"code","d1cd986c":"code","5a923266":"code","7b5d74c5":"code","e343ae23":"code","de1ba579":"code","99a36879":"code","1c630f8e":"code","bae51b5c":"code","1b0b949c":"code","0f0ff96f":"code","b214f41c":"code","7324ed91":"code","38733b80":"code","81bb80db":"code","d44597ea":"code","c10b2971":"code","ce9dbdb3":"code","67b3427f":"code","6601d589":"code","acc488b4":"code","7615488e":"code","b0ddfe7f":"code","84dcba29":"code","7ce3c9b0":"code","0eb29f48":"code","da94bcba":"code","74bd84cf":"code","3d5d2bd0":"code","07a33e13":"code","e3be71a7":"code","54d173ae":"code","e2bf4ba1":"code","fdb4c06a":"code","4c73b810":"code","148f9658":"code","03727877":"code","3558289f":"code","d53a1479":"code","829b0bca":"code","28f6dd30":"markdown","34ac990a":"markdown","5813b1e2":"markdown","a8582b54":"markdown","b10756eb":"markdown","bba79e4c":"markdown","5ca717f6":"markdown","0545cd58":"markdown","5cf583d6":"markdown","8530faa4":"markdown","bb47e262":"markdown","b8b8dfc6":"markdown"},"source":{"d058360d":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn import linear_model, metrics\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.linear_model import Ridge\nfrom sklearn.linear_model import Lasso\nfrom sklearn.linear_model import ElasticNet\nfrom sklearn.model_selection import GridSearchCV\n\nimport os\n\n# hide warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n","b49ca31d":"# reading the dataset\ntrain = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/train.csv\")\ntrain.head(5)","cb48d5d1":"# reading the test dataset\ntest = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/test.csv\")\ntest.head(5)","7d42e8dd":"# let's take a look at the info\ntrain.info()","e1e0fa56":"# let's look at the shape here\ntrain.shape","79eec78d":"# let's look at the test data\ntest.shape","623a6e82":"#all train columns\ntrain.columns","387a091d":"#all test columns\ntest.columns","dccadb37":"import matplotlib.pyplot as plt\nimport seaborn as sns","e0268a07":"sns.pairplot(train)\nplt.show()","0cea3a27":"#Taking a look at correlations\ncorrmat = train.corr()\nplt.figure(figsize=(20,20))\ncorrmat","ffe07436":"plt.figure(figsize=(20,20))\n#plot heatmap\nsns.heatmap(train.corr(), annot = True, cmap=\"RdYlGn\")","53adacc2":"fig, axs = plt.subplots(figsize=(20,6), ncols=1, nrows=1, sharex=False)\n\n\naxs.plot(train[\"date_time\"], train['target_benzene'])\naxs.set_title(\"Benzene\")\naxs.set_ylabel(\"target_benzene\")\naxs.set_xlabel(\"Date\")\naxs.grid(axis=\"both\")\n\nplt.show();","24c82f66":"fig, axs = plt.subplots(figsize=(20,6), ncols=1, nrows=1, sharex=False)\n\n\naxs.plot(train[\"date_time\"], train['target_carbon_monoxide'])\naxs.set_title(\"Carbon_Monoxide\")\naxs.set_ylabel(\"target_carbon_monoxide\")\naxs.set_xlabel(\"Date\")\naxs.grid(axis=\"both\")\n\nplt.show();","1acba402":"fig, axs = plt.subplots(figsize=(20,6), ncols=1, nrows=1, sharex=False)\n\n\naxs.plot(train[\"date_time\"], train['target_nitrogen_oxides'])\naxs.set_title(\"Nitrogen_Oxides\")\naxs.set_ylabel(\"target_nitrogen_oxides\")\naxs.set_xlabel(\"Date\")\naxs.grid(axis=\"both\")\n\nplt.show();","d25c0723":"fig, axs = plt.subplots(figsize=(10,6), ncols=1, nrows=1, sharex=False)\n\n\naxs.hist(train['target_nitrogen_oxides'], bins = 50)\naxs.set_title(\"Nitrogen_Oxides\")\naxs.set_xlabel(\"Nitrogen Oxide Levels\")\naxs.grid(axis=\"both\")\n\nplt.show();","367829aa":"fig, axs = plt.subplots(figsize=(10,6), ncols=1, nrows=1, sharex=False)\n\n\naxs.hist(train['target_benzene'], bins = 50)\naxs.set_title(\"Benzene\")\naxs.set_xlabel(\"Benzene Levels\")\naxs.grid(axis=\"both\")\n\nplt.show();","9a05a76f":"fig, axs = plt.subplots(figsize=(10,6), ncols=1, nrows=1, sharex=False)\n\n\naxs.hist(train['target_carbon_monoxide'], bins = 50)\naxs.set_title(\"Carbon Monoxide\")\naxs.set_xlabel(\"Carbon Monoxide Levels\")\naxs.grid(axis=\"both\")\n\nplt.show();","93992603":"targetdf = train[['target_carbon_monoxide','target_benzene','target_nitrogen_oxides']]\ntargetdf.shape","39b26790":"sns.pairplot(targetdf)\nplt.show()","91a22ddc":"#looking at the datetime format\ntrain['date_time'].head(5)","cdf21218":"# Creating datetime variables\n# takes in a df, adds date\/time based columns to it, and returns the modified df\ndef timeFeatures(df):\n    # Derive new features using the click_time column\n    df['datetime'] = pd.to_datetime(df['date_time'])\n    df['day_of_week'] = df['datetime'].dt.dayofweek\n    df[\"day_of_year\"] = df[\"datetime\"].dt.dayofyear\n    df[\"month\"] = df[\"datetime\"].dt.month\n    df[\"hour\"] = df[\"datetime\"].dt.hour\n    df = df.drop(['date_time','datetime'], axis = 1)\n    return df","d1cd986c":"train = timeFeatures(train)\ntest = timeFeatures(test)","5a923266":"train.head(5)","7b5d74c5":"target_carbon_monoxide = train['target_carbon_monoxide'].values.reshape(-1,1)\ntarget_benzene = train['target_benzene'].values.reshape(-1,1)\ntarget_nitrogen_oxides = train['target_nitrogen_oxides'].values.reshape(-1,1)\ntrain_df = train\ntrain = train.drop(['target_carbon_monoxide','target_benzene','target_nitrogen_oxides'], axis = 1)","e343ae23":"# list of alphas to tune\nparams = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100, 500, 1000 ]}\n\n\nridge = Ridge()\n\n# cross validation\nfolds = 5\nmodel_cv_carbon_monoxide = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \nmodel_cv_carbon_monoxide.fit(train, target_carbon_monoxide) ","de1ba579":"# list of alphas to tune\nparams = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100, 500, 1000 ]}\n\n\nridge = Ridge()\n\n# cross validation\nfolds = 5\nmodel_cv_benzene = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \nmodel_cv_benzene.fit(train, target_benzene) ","99a36879":"# list of alphas to tune\nparams = {'alpha': [0.0001, 0.001, 0.01, 0.05, 0.1, \n 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 2.0, 3.0, \n 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 20, 50, 100, 500, 1000 ]}\n\n\nridge = Ridge()\n\n# cross validation\nfolds = 5\nmodel_cv_nitrogen_oxide = GridSearchCV(estimator = ridge, \n                        param_grid = params, \n                        scoring= 'neg_mean_absolute_error', \n                        cv = folds, \n                        return_train_score=True,\n                        verbose = 1)            \nmodel_cv_nitrogen_oxide.fit(train, target_nitrogen_oxides) ","1c630f8e":"target_names = ['carbon_monoxide','benzene','nitrogen_oxides']","bae51b5c":"cv_results = pd.DataFrame(model_cv_nitrogen_oxide.cv_results_)\ncv_results = cv_results[cv_results['param_alpha']<=200]\ncv_results.head()","1b0b949c":"def display_results(model_cv):\n    # plotting mean test and train scoes with alpha \n    cv_results['param_alpha'] = cv_results['param_alpha'].astype('int32')\n\n    # plotting\n    plt.plot(cv_results['param_alpha'], cv_results['mean_train_score'])\n    plt.plot(cv_results['param_alpha'], cv_results['mean_test_score'])\n    plt.xlabel('alpha')\n    plt.ylabel('Negative Mean Absolute Error')\n    plt.title(\"Negative Mean Absolute Error and alpha\")\n    plt.legend(['train score', 'test score'], loc='upper left')\n    plt.show()","0f0ff96f":"display_results(model_cv_nitrogen_oxide)","b214f41c":"display_results(model_cv_benzene)","7324ed91":"display_results(model_cv_carbon_monoxide)","38733b80":"alpha = 100\nridge = Ridge(alpha=alpha)\n\nmodel_co = ridge.fit(train, target_carbon_monoxide)\nmodel_no = ridge.fit(train, target_nitrogen_oxides)\nmodel_benz = ridge.fit(train, target_benzene)","81bb80db":"submission_csv = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")","d44597ea":"submission_csv.head(5)","c10b2971":"#submission_csv[\"target_carbon_monoxide\"] = model_co.predict(test)","ce9dbdb3":"#submission_csv[\"target_nitrogen_oxides\"] = model_no.predict(test)","67b3427f":"#submission_csv[\"target_benzene\"] = model_benz.predict(test)","6601d589":"#submission_csv.head(5)","acc488b4":"#outputting csv\n#submission_csv.to_csv(\"submission_csv_ridge.csv\", index=False)","7615488e":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.model_selection import train_test_split","b0ddfe7f":"dt = DecisionTreeRegressor(random_state=42)","84dcba29":"np.random.seed(0)\ndf_train, df_test = train_test_split(train_df, train_size=0.7, test_size = 0.3, random_state = 100)","7ce3c9b0":"df_train.shape, df_test.shape","0eb29f48":"df_train.describe()","da94bcba":"X_train = df_train.drop(['target_carbon_monoxide','target_benzene','target_nitrogen_oxides'], axis = 1)\ny_co = df_train['target_carbon_monoxide']\ny_benz = df_train['target_benzene']\ny_no = df_train['target_nitrogen_oxides']","74bd84cf":"#creating trees\ndt_co = DecisionTreeRegressor(random_state=42)\ndt_no = DecisionTreeRegressor(random_state=42)\ndt_benz = DecisionTreeRegressor(random_state=42)","3d5d2bd0":"#fitting trees\ndt_co = dt_co.fit(X_train,y_co)\ndt_no = dt_no.fit(X_train,y_no)\ndt_benz = dt_benz.fit(X_train,y_benz)","07a33e13":"y_train_pred_benz = dt_benz.predict(X_train)\ny_train_pred_co = dt_co.predict(X_train)\ny_train_pred_no = dt_no.predict(X_train)","e3be71a7":"from sklearn.metrics import r2_score\nr2_score(y_co, y_train_pred_co)","54d173ae":"r2_score(y_no, y_train_pred_no)","e2bf4ba1":"r2_score(y_benz, y_train_pred_benz)","fdb4c06a":"y_test_pred_benz = dt_benz.predict(test)\ny_test_pred_co = dt_co.predict(test)\ny_test_pred_no = dt_no.predict(test)","4c73b810":"submission_csv = pd.read_csv(\"\/kaggle\/input\/tabular-playground-series-jul-2021\/sample_submission.csv\")","148f9658":"submission_csv[\"target_carbon_monoxide\"] = dt_co.predict(test)","03727877":"submission_csv[\"target_nitrogen_oxides\"] = dt_no.predict(test)","3558289f":"submission_csv[\"target_benzene\"] = dt_benz.predict(test)","d53a1479":"submission_csv.head(5)","829b0bca":"#outputting csv\n#submission_csv.to_csv(\"submission_csv_dt.csv\", index=False)","28f6dd30":"Plotting Histogram","34ac990a":"## Step 2: Visualising the Data\n\nLet's now spend some time doing what is arguably the most important step - **understanding the data**.\n","5813b1e2":"#### 2. Decision Tree","a8582b54":"For each targets let's note most correlated feature\n    1. target_carbon_monoxide => sensor1, sensor5\n    2. target_benzene => sensor2, sensor5\n    3. target_nitrogen_oxides => sensor5","b10756eb":"## Step 3:-  Handling Data\/ Preprocessing","bba79e4c":"## Step 4:- Model Building and Evaluation","5ca717f6":"This is my first Kaggle Competition, Code, Code etc.\n\nLet me know if i'm doing something wrong.\nI'm just starting out with vanilla models and now building up from that.\n\nHappy Kaggling\n","0545cd58":"### 1. Data Understanding and Exploration\n\nLet's first have a look at the dataset and understand the size, attribute names etc.","5cf583d6":"We got a 2.08 Score with Ridge Regression","8530faa4":"target_carbon_monoxide, target_benzene, and target_nitrogen_oxides are the target columns","bb47e262":"Vanilla DT Gave us a score of 0.48022","b8b8dfc6":"#### 1. Ridge Regression"}}