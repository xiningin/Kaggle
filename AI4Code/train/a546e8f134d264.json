{"cell_type":{"67def4bb":"code","30045fd6":"code","30cc1653":"code","7637f126":"code","e4aa1a35":"code","06ff9fc5":"code","3616d482":"code","e5ab960f":"markdown","a1957d7c":"markdown"},"source":{"67def4bb":"import pandas as pd\nimport numpy as np\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import train_test_split\n","30045fd6":"data = pd.read_csv('..\/input\/abalone\/abalone.data.csv')\ndata.head()\n\nX = data.iloc[:, 1:]\ny = data.iloc[:, 0]\ny = pd.Series(pd.Categorical(y).codes)","30cc1653":"scalerX = StandardScaler()\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=1)\n\nX_train_scaled = scalerX.fit_transform(X_train)\nX_test_scaled = scalerX.fit_transform(X_test)","7637f126":"from sklearn.metrics import confusion_matrix\nfrom sklearn.metrics import accuracy_score\n\ndef evaluate(y_pred, y_true):\n    cm = confusion_matrix(y_true, y_pred)\n    acc = accuracy_score(y_true, y_pred)\n\n    print(\"model confusion matrix\\n\", cm)\n    print(\"model accuracy: \", acc)\n","e4aa1a35":"classifier = KNeighborsClassifier(n_neighbors = 3)\nclassifier.fit(X_train_scaled, y_train)\n\ny_pred = classifier.predict(X_test)\n\nevaluate(y_pred, y_test)","06ff9fc5":"# perform PCA to improve performance\n\nfrom sklearn.decomposition import PCA\nX_train_reduce = PCA(n_components=2).fit_transform(X_train_scaled)\nX_test_reduced = PCA(n_components=2).fit_transform(X_test_scaled)\n\nprint(X_train_reduce.shape)\nprint(X_test_reduced.shape)\nclassifier.fit(X_train_reduce, y_train)\n\ny_pred = classifier.predict(X_test_reduced)\n\nevaluate(y_pred, y_test)","3616d482":"# pip install neupy\nfrom neupy import algorithms\n\nlvqnet = algorithms.LVQ(n_inputs=X_train_scaled.shape[0], n_classes=3)\n\nlvqnet.train(X_train_scaled, y_train, epochs=100)\n\ny_pred = lvqnet.predict(X_test_scaled)\n\nevaluate(y_pred, y_test)","e5ab960f":"# LVQ Classification","a1957d7c":"# **Knn Classification**"}}