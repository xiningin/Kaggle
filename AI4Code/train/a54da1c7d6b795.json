{"cell_type":{"48b9e027":"code","d6f4ac24":"code","83c035cd":"code","6a416ca4":"code","a076b934":"code","47220810":"code","4595e642":"code","c407c45b":"code","8d28f462":"code","ccb4b1ad":"code","f56fa6c8":"code","612dfc36":"code","e7454660":"code","46f8e260":"code","215c782b":"code","59a78c19":"code","e26c98dd":"code","d5d9679e":"code","b3537424":"code","669a40f2":"code","e8210214":"code","c4b7aba6":"code","d130f87b":"code","d2d408c4":"code","104f6d3a":"code","7b905e12":"code","862c81cc":"code","dd7ea20c":"code","11cab4c8":"code","35a26684":"code","30d31e3b":"code","9fb0ebc0":"code","b732520c":"code","7f0bc516":"code","777c98a1":"code","db16aac4":"code","0612d3b3":"code","d2e166d6":"code","169d07bd":"code","24d81bae":"code","d95113a9":"code","52ebde61":"code","3ce2e4b0":"code","416b5576":"code","2b113d42":"code","19078640":"code","a910326d":"code","9919a404":"code","03207dda":"code","366c3083":"code","a48b2cc6":"markdown","35693d8a":"markdown","aedf97ef":"markdown","8f945067":"markdown","2de8f7f4":"markdown","5d7720ce":"markdown","9adda1b5":"markdown","0571213f":"markdown","dcb17f36":"markdown","57ee95cf":"markdown","605df498":"markdown","112aa4cb":"markdown","fc5152ee":"markdown","2eb1d401":"markdown","b12ce3a8":"markdown","8a062c44":"markdown","5d989665":"markdown","9a8056e1":"markdown","d0c09802":"markdown","9957b8c6":"markdown","44dd4706":"markdown","e255f6cc":"markdown","6a76f861":"markdown","738d998e":"markdown","42c01a48":"markdown","8cf6cfb1":"markdown","3fac834e":"markdown","c9f1ca48":"markdown","d4c33f26":"markdown","17e0012f":"markdown","08138a1d":"markdown","b0c0b18b":"markdown","156ca2f3":"markdown"},"source":{"48b9e027":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session","d6f4ac24":"#Plotting\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\n\n#Display Options\npd.set_option('display.max_columns', 1000)\n\n#Date Formatting\nfrom datetime import datetime as dt","83c035cd":"mb=pd.read_csv(\"..\/input\/melbourne-housing-snapshot\/melb_data.csv\")","6a416ca4":"mb.head(3)","a076b934":"mb.columns=mb.columns.str.lower()","47220810":"mb.head(3)","4595e642":"mb.date=pd.to_datetime(mb.date)\nmb['month']=mb.date.dt.month\nmb['year']=mb.date.dt.year","c407c45b":"mb=mb.astype({\"propertycount\":\"int\",\"year\":\"int\",\"month\":\"int\"})\nmb=mb.astype({\"postcode\":\"object\"})","8d28f462":"mb.info()","ccb4b1ad":"mb.loc[:,\"car\"]=mb.car.fillna(mb.car.mode()[0])\nmb.loc[:,\"councilarea\"]=mb.councilarea.fillna(\"Not Applicable\")","f56fa6c8":"mb.loc[mb.buildingarea==0,:][:3]","612dfc36":"mb.loc[mb.landsize==0,:][:3]","e7454660":"mb.buildingarea.replace(to_replace = 0,\n                 value = np.nan,inplace=True)","46f8e260":"mb.landsize.replace(to_replace = 0,\n                 value = np.nan,inplace=True)","215c782b":"mb_num=mb.select_dtypes(include=np.number)\nmb_cat=mb.select_dtypes(exclude=np.number).reset_index()","59a78c19":"from sklearn.impute import KNNImputer\nimputer = KNNImputer(n_neighbors=2)\nmb_num_imp= pd.DataFrame(\n    imputer.fit_transform(mb_num),columns = mb_num.columns)","e26c98dd":"mb_imp=pd.concat([mb_cat,mb_num_imp],axis=1)","d5d9679e":"mb_imp.info()","b3537424":"mb_imp=mb_imp.astype({\"yearbuilt\":\"int\"})","669a40f2":"mb_imp.loc[mb_imp.buildingarea==0,:]","e8210214":"mb_imp.loc[mb_imp.landsize==0,:]","c4b7aba6":"mb_imp.drop(\"index\",axis=1,inplace=True)","d130f87b":"fig,ax=plt.subplots(4,2,figsize=(12,6))\n\nsns.kdeplot(x=mb_imp.price,ax=ax[0,0])\nsns.boxplot(x=mb_imp.price,ax=ax[0,1])\nsns.kdeplot(x=mb_imp.landsize,ax=ax[1,0])\nsns.boxplot(x=mb_imp.landsize,ax=ax[1,1])\nsns.kdeplot(x=mb_imp.buildingarea,ax=ax[2,0])\nsns.boxplot(x=mb_imp.buildingarea,ax=ax[2,1])\nsns.kdeplot(x=mb_imp.distance,ax=ax[3,0])\nsns.boxplot(x=mb_imp.distance,ax=ax[3,1])\nplt.tight_layout()","d2d408c4":"def func_normalize(df,features):\n    for feature in features:\n        q1=df[feature].quantile(0.25)\n        q3=df[feature].quantile(0.75)\n        iqr=q3-q1\n        lower_bnd=q1-1.5*iqr\n        upper_bnd=q3+1.5*iqr\n        rows_to_drop=df.loc[(df[feature]<lower_bnd)|(df[feature]>upper_bnd),:].index\n        df.drop(rows_to_drop,inplace=True)","104f6d3a":"func_normalize(mb_imp,[\"price\",\"landsize\",\"buildingarea\",\"distance\"])","7b905e12":"fig,ax=plt.subplots(4,2,figsize=(12,6))\n\nsns.kdeplot(x=mb_imp.price,ax=ax[0,0])\nsns.boxplot(x=mb_imp.price,ax=ax[0,1])\nsns.kdeplot(x=mb_imp.landsize,ax=ax[1,0])\nsns.boxplot(x=mb_imp.landsize,ax=ax[1,1])\nsns.kdeplot(x=mb_imp.buildingarea,ax=ax[2,0])\nsns.boxplot(x=mb_imp.buildingarea,ax=ax[2,1])\nsns.kdeplot(x=mb_imp.distance,ax=ax[3,0])\nsns.boxplot(x=mb_imp.distance,ax=ax[3,1])\nplt.tight_layout()","862c81cc":"mb_imp['price_landsize']=mb_imp.price\/mb_imp.landsize\nmb_imp['price_buildingarea']=mb_imp.price\/mb_imp.buildingarea","dd7ea20c":"fig,ax=plt.subplots(2,2,figsize=(12,6))\n\nsns.kdeplot(x=mb_imp.price_landsize,ax=ax[0,0])\nsns.boxplot(x=mb_imp.price_landsize,ax=ax[0,1])\nsns.kdeplot(x=mb_imp.price_buildingarea,ax=ax[1,0])\nsns.boxplot(x=mb_imp.price_buildingarea,ax=ax[1,1])\n\nplt.tight_layout()","11cab4c8":"func_normalize(mb_imp,[\"price_landsize\",\"price_buildingarea\"])","35a26684":"fig,ax=plt.subplots(2,2,figsize=(12,6))\n\nsns.kdeplot(x=mb_imp.price_landsize,ax=ax[0,0])\nsns.boxplot(x=mb_imp.price_landsize,ax=ax[0,1])\nsns.kdeplot(x=mb_imp.price_buildingarea,ax=ax[1,0])\nsns.boxplot(x=mb_imp.price_buildingarea,ax=ax[1,1])\n\nplt.tight_layout()","30d31e3b":"cut_bins_price=[i*250000 for i in range(11)]\ncut_bins_price_landsize=[i*1000 for i in range(8)]\ncut_bins_price_building=[i*2000 for i in range(8)]","9fb0ebc0":"mb_imp['price_cut']=pd.cut(mb_imp.price,bins=cut_bins_price)\nmb_imp['price_landsize_cut']=pd.cut(mb_imp.price_landsize,bins=cut_bins_price_landsize)\nmb_imp['price_building_cut']=pd.cut(mb_imp.price_buildingarea,bins=cut_bins_price_building)","b732520c":"fig,ax=plt.subplots(figsize=(12,6))\nsns.heatmap(mb_imp.corr(),annot=True)\nplt.tight_layout()","7f0bc516":"fig,ax=plt.subplots(4,2,figsize=(18,9))\nsns.countplot(y=mb_imp.type,ax=ax[0,0])\nsns.countplot(y=mb_imp.method,ax=ax[0,1])\nsns.countplot(y=mb_imp.rooms,ax=ax[1,0])\nsns.countplot(y=mb_imp.bedroom2,ax=ax[1,1])\nsns.countplot(y=mb_imp.bathroom,ax=ax[2,0])\nsns.countplot(y=mb_imp.car,ax=ax[2,1])\nsns.countplot(y=mb_imp.year,ax=ax[3,0])\nsns.countplot(y=mb_imp.month,ax=ax[3,1])\nplt.tight_layout()\n","777c98a1":"fig,ax=plt.subplots(6,1,figsize=(9,18))\nsns.boxplot(x=mb_imp.type,y=mb_imp.price,ax=ax[0])\nsns.boxplot(x=mb_imp.method,y=mb_imp.price,ax=ax[1])\nsns.boxplot(x=mb_imp.rooms,y=mb_imp.price,ax=ax[2])\nsns.boxplot(x=mb_imp.bedroom2,y=mb_imp.price,ax=ax[3])\nsns.boxplot(x=mb_imp.bathroom,y=mb_imp.price,ax=ax[4])\nsns.boxplot(x=mb_imp.car,y=mb_imp.price,ax=ax[5])\nplt.tight_layout()","db16aac4":"fig,ax = plt.subplots(2,1,figsize=(12,16))\n\nsns.scatterplot(\n    y=mb_imp.lattitude,\n    x=mb_imp.longtitude,\n    hue=mb_imp.regionname,\n    palette='Set2',ax=ax[0]).set_title(\"Position by Region\")\nsns.scatterplot(\n    y=mb_imp.lattitude,\n    x=mb_imp.longtitude,\n    hue=mb_imp.price_cut,\n    palette='Paired',\n    ax=ax[1]).set_title(\"Positon by Price\")\nplt.tight_layout()","0612d3b3":"fig,ax=plt.subplots(2,1,figsize=(12,12))\nsns.scatterplot(\n    y=mb_imp.lattitude,\n    x=mb_imp.longtitude,\n    hue=mb_imp.price_building_cut,\n    palette='Paired',\n    ax=ax[0]).set_title(\"Price per Building Area Unit\")\nsns.scatterplot(\n    y=mb_imp.lattitude,\n    x=mb_imp.longtitude,\n    hue=mb_imp.price_landsize_cut,\n    palette='Paired',\n    ax=ax[1]).set_title(\"Price per Land Unit\")\nplt.tight_layout()","d2e166d6":"x1=mb_imp.groupby(['regionname','suburb'])\\\n.agg({'suburb':'size','price':'mean'})\\\n.rename(columns={'suburb':'count','price':'mean'})\\\n.reset_index()\nfig = px.treemap(x1, path=['regionname', 'suburb'], values='count',color='mean')\nfig.show()","169d07bd":"mb_imp.head()","24d81bae":"mb_ml=mb_imp.drop(\n    [\"address\",\"propertycount\",\"price_landsize\",\n     \"price_buildingarea\",\"price_cut\",\"price_landsize_cut\",\n     \"price_building_cut\",\"date\",\"postcode\",\"suburb\",\"sellerg\",\"councilarea\"],axis=1)","d95113a9":"mb_ml.head()","52ebde61":"dummy_cols=[\"type\",\"method\",\"regionname\"]\nmb_dum=pd.get_dummies(\n    mb_ml,columns=dummy_cols,prefix=dummy_cols,drop_first=True)","3ce2e4b0":"mb_dum","416b5576":"X=mb_dum.drop(\"price\",axis=1)\ny=mb_dum[\"price\"]","2b113d42":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X,y,random_state=0)","19078640":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.metrics import mean_absolute_error\n\nrfr = RandomForestRegressor(random_state=0)\nrfr.fit(X_train, y_train)\nmb_preds =rfr.predict(X_test)\nprint(mean_absolute_error(y_test,mb_preds))","a910326d":"feature_import=rfr.feature_importances_","9919a404":"feature_import.shape","03207dda":"X.columns.shape","366c3083":"pd.DataFrame(X.columns,feature_import).reset_index().sort_index()","a48b2cc6":"Join imputed numeric features with categorical features","35693d8a":"# Boxplots","aedf97ef":"Separate numberic and categorial features","8f945067":"Create bins for Price, Price\/Landsize, and Price\/BuildingArea","2de8f7f4":"Impute null values using KNNImputer","5d7720ce":"# Countplots","9adda1b5":"Convert Property Count, Post Code, and Year Built to correct data types","0571213f":"Examine the distributions of Price, Land Size, Building Area, and Distance","dcb17f36":"The following treemap shows the number of properties sold and average price by region and suburb","57ee95cf":"Car has just a few missing values so we will fill those with the mode. \nIt seems reasonable that some properties will have no Council so we replace NA with the string 'Not Applicable'.  ","605df498":"# Treemap","112aa4cb":"Convert Year Built to integer now that null values have been imputed","fc5152ee":"Drop duplicate index","2eb1d401":"Convert feature names to lowercase","b12ce3a8":"# Preparation","8a062c44":"# Correlation Heatmap","5d989665":"Create features to capture Price per unit Land Size and Building Area","9a8056e1":"Check Building Area and Land Size for zeros ","d0c09802":"# Binning","9957b8c6":"# Dataset Description","44dd4706":"Examine distribution again after normalization","e255f6cc":"Fill zeros with NA so they can be filled by the imputer","6a76f861":"# Normalization","738d998e":"Convert Date from string to date format and create columns for month and year","42c01a48":"Context\n\nMelbourne real estate is BOOMING. Can you find the insight or predict the next big trend to become a real estate mogul\u2026 or even harder, to snap up a reasonably priced 2-bedroom unit?\n\nContent\n\nThis is a snapshot of a dataset created by Tony Pino.\n\nIt was scraped from publicly available results posted every week from Domain.com.au. He cleaned it well, and now it's up to you to make data analysis magic. The dataset includes Address, Type of Real estate, Suburb, Method of Selling, Rooms, Price, Real Estate Agent, Date of Sale and distance from C.B.D.\n\nNotes on Specific Variables\n\nRooms: Number of rooms\n\nPrice: Price in dollars\n\nMethod: S - property sold; SP - property sold prior; PI - property passed in; PN - sold prior not disclosed; SN - sold not disclosed; NB - no bid; VB - vendor bid; W - withdrawn prior to auction; SA - sold after auction; SS - sold after auction price not disclosed. N\/A - price or highest bid not available.\n\nType: br - bedroom(s); h - house,cottage,villa, semi,terrace; u - unit, duplex; t - townhouse; dev site - development site; o res - other residential.\n\nSellerG: Real Estate Agent\n\nDate: Date sold\n\nDistance: Distance from CBD\n\nRegionname: General Region (West, North West, North, North east \u2026etc)\n\nPropertycount: Number of properties that exist in the suburb.\n\nBedroom2 : Scraped # of Bedrooms (from different source)\n\nBathroom: Number of Bathrooms\n\nCar: Number of carspots\n\nLandsize: Land Size\n\nBuildingArea: Building Size\n\nCouncilArea: Governing council for the area\n\nAcknowledgements\n\nThis is intended as a static (unchanging) snapshot of https:\/\/www.kaggle.com\/anthonypino\/melbourne-housing-market. It was created in September 2017. Additionally, homes with no Price have been removed.","8cf6cfb1":"Ensure Building Area and Land Size no longer contain zeros","3fac834e":"# Import Packages","c9f1ca48":"# Visualization","d4c33f26":"Normalize Price, Land Size, Building Area, and Distance","17e0012f":"# Handle Null Values","08138a1d":"# Longitude - Lattitude Plots","b0c0b18b":"# Modeling","156ca2f3":"Create function to drop rows outside of 1.5 times inter quartile range"}}