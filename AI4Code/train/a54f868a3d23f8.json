{"cell_type":{"123a7348":"code","2d4ce761":"code","ff5f9ebe":"code","0969f96f":"code","6ea7efbc":"code","92037734":"code","bf8dda0a":"code","ccda9d43":"code","9abdef51":"code","4bb69f8a":"code","1bc06510":"code","c3e64f1c":"code","6aaa8d73":"code","fa38f2c4":"code","9c6d10b1":"code","798b633c":"code","72300367":"code","12e9fd98":"code","ae2cea4c":"code","56e9d42e":"code","7873ee43":"code","546a1434":"code","eafcd727":"code","33df7f83":"code","ac416843":"markdown","d1fb7828":"markdown","f68b647d":"markdown","9e5a806e":"markdown","1897f3c2":"markdown","0d62acb9":"markdown","71e51483":"markdown","7caeb2ca":"markdown","c5281e2b":"markdown","5aee0d82":"markdown","0b2754d8":"markdown","44d323dc":"markdown","a277f528":"markdown"},"source":{"123a7348":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns  # visualization tool\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","2d4ce761":"data = pd.read_csv('..\/input\/countries of the world.csv')   # CSV: comma - separated values","ff5f9ebe":"data.info()","0969f96f":"data.rename(columns={\"Area (sq. mi.)\": \"Area\", \"Pop. Density (per sq. mi.)\":\"Pop_Density\",\n                        \"Coastline (coast\/area ratio)\":\"Coastline\",\"Net migration\":\"Net_migration\",\n                        \"Infant mortality (per 1000 births)\":\"Infant_mortality\",\"GDP ($ per capita)\":\"GPD\",\n                        \"Literacy (%)\":\"Literacy\",\"Phones (per 1000)\":\"Phone_using\",\"Arable (%)\":\"Arable\",\n                        \"Crops (%)\":\"Crops\",\"Other (%)\":\"Other\"},inplace = True)\n#We can be rename colums's name for to use easily.Because Python gives error at coding due to space.\n\ndata.columns","6ea7efbc":"data.Literacy = data.Literacy.str.replace(\",\",\".\").astype(float)\ndata.Pop_Density = data.Pop_Density.str.replace(\",\",\".\").astype(float)\ndata.Coastline = data.Coastline.str.replace(\",\",\".\").astype(float)\ndata.Net_migration = data.Net_migration.str.replace(\",\",\".\").astype(float)\ndata.Infant_mortality = data.Infant_mortality.str.replace(\",\",\".\").astype(float)\ndata.Phone_using = data.Phone_using.str.replace(\",\",\".\").astype(float)\ndata.Arable = data.Arable.str.replace(\",\",\".\").astype(float)\ndata.Crops = data.Crops.str.replace(\",\",\".\").astype(float)\ndata.Birthrate = data.Birthrate.str.replace(\",\",\".\").astype(float)\ndata.Deathrate = data.Deathrate.str.replace(\",\",\".\").astype(float)\ndata.Agriculture = data.Agriculture.str.replace(\",\",\".\").astype(float)\ndata.Industry = data.Industry.str.replace(\",\",\".\").astype(float)\ndata.Service = data.Service.str.replace(\",\",\".\").astype(float)\ndata.Other = data.Other.str.replace(\",\",\".\").astype(float)\ndata.Climate = data.Climate.str.replace(\",\",\".\").astype(float)","92037734":"data.dtypes","bf8dda0a":"data.corr()   # correlation between features","ccda9d43":"#CORRELATION MAP\nf,ax = plt.subplots(figsize=(15, 15))\nsns.heatmap(data.corr(), annot=True, linewidths=.5, fmt= '.1f',ax=ax)\nplt.show()\n\n#annot=True :It gives us correlation values inside the boxes\n#linewidths= .5 :Thickness of line between boxes\n#fmt= '.1f' :It gives how many will be written of correlation values after comma","9abdef51":"data.head() #This coding gives us first 5 rows. If you want to see more lines, you should write a number inside the paranthesis.","4bb69f8a":"data.columns  #This coding gives name of columns","1bc06510":"#Line plot is better when x axis is time. \n# color = color, label = label, linewidth = width of line, alpha = opacity, grid = grid, linestyle = sytle of line\ndata.Birthrate.plot(kind = 'line', color = 'g',label = 'Birthrate',linewidth=1,alpha = 0.5,grid = True,linestyle = '-')\ndata.Deathrate.plot(color = 'r',label = 'Deathrate',linewidth=1, alpha = 0.5,grid = True,linestyle = '-')\nplt.legend(loc='upper right')     # legend = puts label into plot\nplt.xlabel('x axis')              # label = name of label\nplt.ylabel('y axis')\nplt.title('Line Plot')            # title = title of plot\nplt.show()","c3e64f1c":"#Scatter is better when there is correlation between two variables\n# x = GPD, y = Industry\ndata.plot(kind='scatter', x='GPD', y='Industry',alpha = 0.5,color = 'red')\nplt.xlabel('GPD')              # label = name of label\nplt.ylabel('Industry')\nplt.title('GPD-Industry Scatter Plot')            # title = title of plot\nplt.show()","6aaa8d73":"#Histogram is better when we need to see distribution of numerical data.\n#bins = number of bar in figure\ndata.Infant_mortality.plot(kind = 'hist',bins = 50,figsize = (12,12))\nplt.show()","fa38f2c4":"#clf = cleans it up again you can start a fresh\ndata.Phone_using.plot(kind = \"hist\", bins = 60, figsize = (10,10), grid = True)\nplt.clf()\n#we cant see plot due to clf","9c6d10b1":"#create dictionary and look its keys and values\ndictionary = {'Young_people' : '5500', 'Elderly_population' : '3300'}\nprint(dictionary.keys())\nprint(dictionary.values())","798b633c":"# Keys have to be immutable objects like string, boolean, float, integer or tubles\n# List is not immutable\n# Keys are unique\ndictionary['Young_people'] = \"7500\"    # update existing entry\nprint(dictionary)\ndictionary['Crime_rate '] = \"150\"      # Add new entry\nprint(dictionary)\ndel dictionary['Young_people']         # remove entry with key 'spain'\nprint(dictionary)\nprint('Young_people' in dictionary)          # check include or not\ndictionary.clear()                     # remove all entries in dict\nprint(dictionary)","72300367":"# In order to run all code you need to take comment this line\n# del dictionary         # delete entire dictionary!    \nprint(dictionary)       # it gives error because dictionary is deleted","12e9fd98":"# To creat a series, use a square brackets! \/ To create a data frame, use two square brackets!\nseries = data['Area']        # data['Area'] = series\nprint(type(series))\ndata_frame = data[['Area']]  # data[['Defense']] = data frame\nprint(type(data_frame))","ae2cea4c":"# Comparison operator\nprint(5 > 3)\nprint(3!=1)\n# Boolean operators\nprint(True and False)\nprint(True or False)","56e9d42e":"x = data['Area']>10000000     # There are only 1 country who have higher area value than 10^7\ndata[x]","7873ee43":"# There are only 6 countrys who have higher Area value than 1000000 and higher Pop_Density value than 50\ndata[np.logical_and(data['Area']>1000000, data['Pop_Density']>50 )]","546a1434":"# This is also same with previous code line. Therefore we can also use '&' for filtering.\ndata[(data['Area']>1000000) & (data['Pop_Density']>50 )]","eafcd727":"# Stay in loop if condition( i is not equal 5) is true\ni = 0\nwhile i != 6 :\n    print('i is: ',i)\n    i +=2 \nprint(i,' is equal to 6')","33df7f83":"# Stay in loop if condition( i is not equal 5) is true\nlis = [1,2,3,4,5,6]\nfor i in lis:\n    print('i is: ',i)\nprint('')\n\n# Enumerate index and value of list\n# index : value = 0:1, 1:2, 2:3, 3:4, 4:5, 5:6\nfor index, value in enumerate(lis):\n    print(index,\" : \",value)\nprint('')   \n\n# For dictionaries\n# We can use for loop to achive key and value of dictionary. We learnt key and value at dictionary part.\ndictionary = {'spain':'madrid','france':'paris'}\nfor key,value in dictionary.items():\n    print(key,\" : \",value)\nprint('')\n\n# For pandas we can achieve index and value\nfor index, value in data[['Literacy']][0:3].iterrows():\n    print (index,':',value)","ac416843":"**CREATE D\u0130CT\u0130ONARY**","d1fb7828":"**HISTOGRAM**","f68b647d":"> Before continue with pandas, we need to learn logic, control flow and filtering. \n* Comparison operator: ==, <, >, <= \n* Boolean operators: and, or ,not \n* Filtering pandas","9e5a806e":"**1-Filtering Pandas Data Frame**","1897f3c2":"**2 - Filtering pandas with logical_and**","0d62acb9":"**PANDAS**","71e51483":"**While and For Loops**","7caeb2ca":"**This example is my first studying. I will keep studying and later on will add new code related to data science. If you want to add new useful codes , please you send me mesaage. Thank you. **","c5281e2b":"*  The for loop is used to can entry in a list, dictionary, pandas","5aee0d82":"* There is a lot of cloumns that they seem to be float type but Pandas describe as object because of comma. So we need to convert from comma to dot.","0b2754d8":"* 1 or nearly 1: Positive correlation\n* -1 or nearly -1: Negative correlation\n* 0 or nearly 0: No correlation","44d323dc":"**SCATTER PLOT**","a277f528":"**LINE PLOT**"}}