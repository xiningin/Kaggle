{"cell_type":{"ebec08be":"code","4602c03b":"code","c7887471":"code","e4912218":"code","f9ef7292":"code","f874b595":"code","63f7665f":"code","a3f03f72":"code","58f7d1b1":"code","1bcf38ce":"code","fa5d8404":"code","376ef8a0":"code","dbddac83":"code","c57b013b":"markdown","2911e33f":"markdown","0b94e200":"markdown","05f861cb":"markdown"},"source":{"ebec08be":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\nimport keras\nfrom keras import layers\nfrom keras.layers.normalization import BatchNormalization\nfrom keras.models import Model\nfrom keras.preprocessing.image import ImageDataGenerator\nimport matplotlib.pyplot as plt\nimport os\n\nfrom sklearn.model_selection import train_test_split\n\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# Any results you write to the current directory are saved as output.","4602c03b":"train = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/train.csv\")\ntest = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/test.csv\")\nsub = pd.read_csv(\"\/kaggle\/input\/digit-recognizer\/sample_submission.csv\")","c7887471":"train.shape","e4912218":"X_train = train.drop(columns=['label']).values.reshape(-1, 28, 28, 1)\ny_train = train.label.values\nX_test = test.values.reshape(-1, 28, 28, 1)","f9ef7292":"X_train = X_train \/ 255.0\nX_test = X_test \/ 255.0","f874b595":"X_train, X_valid, y_train, y_valid = train_test_split(X_train, y_train, test_size = 0.1, random_state=39)","63f7665f":"datagen = ImageDataGenerator(rotation_range=20,zoom_range = 0.1, width_shift_range=0.1, height_shift_range=0.1)\ndatagen.fit(X_train)","a3f03f72":"callbacks_list = [\n  keras.callbacks.ReduceLROnPlateau(\n  # This callback will monitor the validation loss of the model\n  monitor='val_loss',\n  # It will divide the learning by 10 when it gets triggered\n  factor=0.1,\n  # It will get triggered after the validation loss has stopped improving\n  # for at least 10 epochs\n  patience=5,\n  ),\n  keras.callbacks.EarlyStopping(\n      monitor='val_loss', \n      min_delta=1e-3, \n      patience=15, \n      verbose=0, \n      mode='auto', \n      baseline=None, \n      restore_best_weights=False)\n]","58f7d1b1":"def IdentityBlock(x, filters=32, kernel_size=3):\n    x_shortcut = x\n    x = layers.Conv2D(filters=filters, kernel_size=(kernel_size,kernel_size), padding=\"Same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation('relu')(x)\n\n    x = layers.Conv2D(filters=filters, kernel_size=(kernel_size,kernel_size), padding=\"Same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation('relu')(x)\n    \n    x = layers.Conv2D(filters=filters, kernel_size=(kernel_size,kernel_size), padding=\"Same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Add()([x, x_shortcut])\n    x = layers.Activation('relu')(x)\n    x = layers.Dropout(0.25)(x)\n    \n    return x\n\ndef ConvBlock(x, filters=32, kernel_size=3):\n    x_shortcut = x\n    x = layers.Conv2D(filters=filters, kernel_size=(kernel_size,kernel_size), padding=\"Same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation('relu')(x)\n    \n    x = layers.Conv2D(filters=filters, kernel_size=(kernel_size,kernel_size), padding=\"Same\")(x)\n    x = layers.BatchNormalization()(x)\n    x = layers.Activation('relu')(x)\n    \n    x = layers.Conv2D(filters=filters, kernel_size=(kernel_size,kernel_size), padding=\"Same\")(x)\n    x = layers.BatchNormalization()(x)\n    \n    x_shortcut = layers.Conv2D(filters=filters, kernel_size=(kernel_size,kernel_size), padding=\"Same\")(x_shortcut)\n    x_shortcut = layers.BatchNormalization()(x_shortcut)\n    x = layers.Add()([x, x_shortcut])\n    x = layers.Activation('relu')(x)\n    x = layers.Dropout(0.25)(x)\n\n    return x\n\n#Input Stage\ninputs = layers.Input(shape=(28, 28, 1))\nx = layers.Conv2D(filters=64, kernel_size=(4,4), \n                padding=\"Same\", input_shape = (28, 28, 1))(inputs)\nx = layers.BatchNormalization()(x)\nx = layers.Activation('relu')(x)\nx = layers.MaxPool2D(pool_size=(3,3))(x)\n\nx = ConvBlock(x, filters=64)\nx = IdentityBlock(x, filters=64)\nx = IdentityBlock(x, filters=64)\n\nx = ConvBlock(x, filters=128)\nx = IdentityBlock(x, filters=128)\nx = IdentityBlock(x, filters=128)\n\nx = ConvBlock(x, filters=256)\nx = IdentityBlock(x, filters=256)\nx = IdentityBlock(x, filters=256)\n\n#Final Stage\nx = layers.AveragePooling2D(pool_size=(2,2))(x)\nx = layers.GlobalAvgPool2D()(x)\nx = layers.Dense(512, activation='relu')(x)\npredictions = layers.Dense(10, activation='softmax')(x)\nmodel = Model(inputs=inputs,outputs = predictions)\n    \nmodel.compile(optimizer=\"adam\", \n              loss=\"sparse_categorical_crossentropy\", \n              metrics = [\"acc\"])\n\n","1bcf38ce":"model.summary()","fa5d8404":"history = model.fit_generator(datagen.flow(X_train,y_train, batch_size=256),\n                              epochs = 75, validation_data = (X_valid,y_valid),steps_per_epoch = X_train.shape[0]\/256,\n                              verbose = 2, callbacks=callbacks_list)","376ef8a0":"pred_proba = model.predict(X_test)\ny_pred = np.argmax(pred_proba, axis = 1)\nsub['Label'] = y_pred","dbddac83":"sub.to_csv(\"DigitRecogSub_MyResNet.csv\")","c57b013b":"Define my own Identity block and convolution block","2911e33f":"Decrease learning rate if valid score does not improve for 5 epoches.\nEarly stopping if valid score does not improve for 15 epoches.","0b94e200":"Real-time data augmentation with ImageDataGenerator","05f861cb":"Identity Block(left) and Convolutional Block(right)\n![blocks](https:\/\/www.researchgate.net\/profile\/Antonio_Theophilo\/publication\/321347448\/figure\/fig2\/AS:565869411815424@1511925189281\/Bottleneck-Blocks-for-ResNet-50-left-identity-shortcut-right-projection-shortcut.png)"}}