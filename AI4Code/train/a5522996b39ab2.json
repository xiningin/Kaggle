{"cell_type":{"1acf6514":"code","4453b57a":"code","263d3237":"code","237fe8f3":"code","058440cd":"code","e6b23362":"code","8ca8efe8":"code","0e8399b8":"code","b857ddc6":"code","d427a85a":"code","8741bcad":"code","2183a50f":"code","4fba9c5e":"markdown","a72752c8":"markdown","063e74d6":"markdown","98581348":"markdown","1be676d2":"markdown"},"source":{"1acf6514":"import sys\nsys.path.append('..\/input\/pytorch-images-seresnet')\n\nimport os\nimport math\nimport time\nimport random\nimport shutil\nfrom pathlib import Path\nfrom contextlib import contextmanager\nfrom collections import defaultdict, Counter\n\nimport scipy as sp\nimport numpy as np\nimport pandas as pd\n\nfrom tqdm.auto import tqdm\nfrom functools import partial\n\nimport cv2\nfrom PIL import Image\n\nfrom matplotlib import pyplot as plt\n\nimport torch\nimport torch.nn as nn\nimport torch.nn.functional as F\nfrom torch.optim import Adam, SGD\nimport torchvision.models as models\nfrom torch.nn.parameter import Parameter\nfrom torch.utils.data import DataLoader, Dataset\nimport albumentations\nfrom albumentations import *\nfrom albumentations.pytorch import ToTensorV2\n\n\nimport timm\n\nfrom torch.cuda.amp import autocast, GradScaler\n\nimport warnings \nwarnings.filterwarnings('ignore')\n\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')","4453b57a":"IMAGE_SIZE = 640\nBATCH_SIZE = 128\n\nTEST_PATH = '..\/input\/ranzcr-clip-catheter-line-classification\/test'\nRES_MODEL_PATH = '..\/input\/resnet200d-public\/resnet200d_320_CV9632.pth'\nSER_MODEL_PATH = '..\/input\/seresnet152d-cv9615\/seresnet152d_320_CV96.15.pth'\n\ntest = pd.read_csv('..\/input\/ranzcr-clip-catheter-line-classification\/sample_submission.csv')","263d3237":"class TestDataset(Dataset):\n    def __init__(self, df, transform=None):\n        self.df = df\n        self.file_names = df['StudyInstanceUID'].values\n        self.transform = transform\n        \n    def __len__(self):\n        return len(self.df)\n\n    def __getitem__(self, idx):\n        file_name = self.file_names[idx]\n        file_path = f'{TEST_PATH}\/{file_name}.jpg'\n        image = cv2.imread(file_path)\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n        if self.transform:\n            augmented = self.transform(image=image)\n            image = augmented['image']\n        return image","237fe8f3":"def get_transforms():\n        return Compose([\n            Resize(IMAGE_SIZE, IMAGE_SIZE),\n            Normalize(\n            ),\n            ToTensorV2(),\n        ])","058440cd":"class ResNet200D(nn.Module):\n    def __init__(self, model_name='resnet200d_320'):\n        super().__init__()\n        self.model = timm.create_model(model_name, pretrained=False)\n        n_features = self.model.fc.in_features\n        self.model.global_pool = nn.Identity()\n        self.model.fc = nn.Identity()\n        self.pooling = nn.AdaptiveAvgPool2d(1)\n        self.fc = nn.Linear(n_features, 11)\n\n    def forward(self, x):\n        bs = x.size(0)\n        features = self.model(x)\n        pooled_features = self.pooling(features).view(bs, -1)\n        output = self.fc(pooled_features)\n        return output","e6b23362":"class SeResNet152D(nn.Module):\n    def __init__(self, model_name='seresnet152d_320'):\n        super().__init__()\n        self.model = timm.create_model(model_name, pretrained=False)\n        n_features = self.model.fc.in_features\n        self.model.global_pool = nn.Identity()\n        self.model.fc = nn.Identity()\n        self.pooling = nn.AdaptiveAvgPool2d(1)\n        self.fc = nn.Linear(n_features, 11)\n\n    def forward(self, x):\n        bs = x.size(0)\n        features = self.model(x)\n        pooled_features = self.pooling(features).view(bs, -1)\n        output = self.fc(pooled_features)\n        return output","8ca8efe8":"ser_model = SeResNet152D()\nser_model.load_state_dict(torch.load(SER_MODEL_PATH)['model'])","0e8399b8":"res_model = ResNet200D()\nres_model.load_state_dict(torch.load(RES_MODEL_PATH)['model'])","b857ddc6":"models = [ser_model.to(device), res_model.to(device)]","d427a85a":"def inference(models, test_loader, device):\n    tk0 = tqdm(enumerate(test_loader), total=len(test_loader))\n    probs = []\n    for i, (images) in tk0:\n        images = images.to(device)\n        avg_preds = []\n        for model in models:\n            with torch.no_grad():\n                y_preds1 = model(images)\n                y_preds2 = model(images.flip(-1))\n            y_preds = (y_preds1.sigmoid().to('cpu').numpy() + y_preds2.sigmoid().to('cpu').numpy()) \/ 2\n            avg_preds.append(y_preds)\n        avg_preds = np.mean(avg_preds, axis=0)\n        probs.append(avg_preds)\n    probs = np.concatenate(probs)\n    return probs","8741bcad":"test_dataset = TestDataset(test, transform=get_transforms())\ntest_loader = DataLoader(test_dataset, batch_size=BATCH_SIZE, shuffle=False, \n                         num_workers=4 , pin_memory=True)\npredictions = inference(models, test_loader, device)","2183a50f":"target_cols = test.iloc[:, 1:12].columns.tolist()\ntest[target_cols] = predictions\ntest[['StudyInstanceUID'] + target_cols].to_csv('submission.csv', index=False)\ntest.head()","4fba9c5e":"<h1 id=\"models\" style=\"color:white; background:black;\"> \n    <center>Models\n        <a class=\"anchor-link\" href=\"#models\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","a72752c8":"<h1 id=\"dataset\" style=\"color:white; background:black;\"> \n    <center>Dataset\n        <a class=\"anchor-link\" href=\"#dataset\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","063e74d6":"<h1 id=\"submission\" style=\"color:white; background:black;\"> \n    <center>Submission\n        <a class=\"anchor-link\" href=\"#submission\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","98581348":"<h1 id=\"inference\" style=\"color:white; background:black;\"> \n    <center>Inference\n        <a class=\"anchor-link\" href=\"#inference\" target=\"_self\">\u00b6<\/a>\n    <\/center>\n<\/h1>","1be676d2":"<div style=\"width: 100%\">\n    <img style=\"width: 100%\" src=\"https:\/\/storage.googleapis.com\/kaggle-competitions\/kaggle\/23870\/logos\/header.png\"\/>\n<\/div>"}}