{"cell_type":{"3f254774":"code","8b3c1b31":"code","aef0bd5b":"code","ed0c63e6":"code","57699226":"code","df50fecc":"code","8e9a53f8":"code","b368d950":"code","b194167c":"code","6b61a212":"code","f3d8b9aa":"code","e972df12":"code","b693e968":"code","d893ad2c":"code","eb89e5b8":"code","956f9766":"code","e1e2a601":"code","532bd4b6":"code","4c1ff652":"code","6a5af80d":"markdown","78097627":"markdown","6c368e9d":"markdown","258a1d14":"markdown","dd49662f":"markdown","74546876":"markdown","3552038d":"markdown","54fbf275":"markdown","2bc61943":"markdown","bf87e828":"markdown"},"source":{"3f254774":"from google.cloud import bigquery\nclient = bigquery.Client()\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport numpy as np\nimport pandas as pd\nimport itertools\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import  confusion_matrix, recall_score,precision_score, precision_recall_curve, f1_score, fbeta_score\nfrom sklearn.utils.fixes import signature\n","8b3c1b31":"miner_vectors_limit = 2000\nnon_miner_vectors_limit = 20000","aef0bd5b":"sql='''\nWITH \noutput_ages AS (\n  SELECT\n    ARRAY_TO_STRING(outputs.addresses,',') AS output_ages_address,\n    MIN(block_timestamp_month) AS output_month_min,\n    MAX(block_timestamp_month) AS output_month_max\n  FROM `bigquery-public-data.crypto_bitcoin.transactions` AS transactions JOIN UNNEST(outputs) AS outputs\n  GROUP BY output_ages_address\n)\n,input_ages AS (\n  SELECT\n    ARRAY_TO_STRING(inputs.addresses,',') AS input_ages_address,\n    MIN(block_timestamp_month) AS input_month_min,\n    MAX(block_timestamp_month) AS input_month_max\n  FROM `bigquery-public-data.crypto_bitcoin.transactions` AS transactions JOIN UNNEST(inputs) AS inputs\n  GROUP BY input_ages_address\n)\n,output_monthly_stats AS (\n  SELECT\n    ARRAY_TO_STRING(outputs.addresses,',') AS output_monthly_stats_address, \n    COUNT(DISTINCT block_timestamp_month) AS output_active_months,\n    COUNT(outputs) AS total_tx_output_count,\n    SUM(value) AS total_tx_output_value,\n    AVG(value) AS mean_tx_output_value,\n    STDDEV(value) AS stddev_tx_output_value,\n    COUNT(DISTINCT(`hash`)) AS total_output_tx,\n    SUM(value)\/COUNT(block_timestamp_month) AS mean_monthly_output_value,\n    COUNT(outputs.addresses)\/COUNT(block_timestamp_month) AS mean_monthly_output_count\n  FROM `bigquery-public-data.crypto_bitcoin.transactions` AS transactions JOIN UNNEST(outputs) AS outputs\n  GROUP BY output_monthly_stats_address\n)\n,input_monthly_stats AS (\n  SELECT\n    ARRAY_TO_STRING(inputs.addresses,',') AS input_monthly_stats_address, \n    COUNT(DISTINCT block_timestamp_month) AS input_active_months,\n    COUNT(inputs) AS total_tx_input_count,\n    SUM(value) AS total_tx_input_value,\n    AVG(value) AS mean_tx_input_value,\n    STDDEV(value) AS stddev_tx_input_value,\n    COUNT(DISTINCT(`hash`)) AS total_input_tx,\n    SUM(value)\/COUNT(block_timestamp_month) AS mean_monthly_input_value,\n    COUNT(inputs.addresses)\/COUNT(block_timestamp_month) AS mean_monthly_input_count\n  FROM `bigquery-public-data.crypto_bitcoin.transactions` AS transactions JOIN UNNEST(inputs) AS inputs\n  GROUP BY input_monthly_stats_address\n)\n,output_idle_times AS (\n  SELECT\n    address AS idle_time_address,\n    AVG(idle_time) AS mean_output_idle_time,\n    STDDEV(idle_time) AS stddev_output_idle_time\n  FROM\n  (\n    SELECT \n      event.address,\n      IF(prev_block_time IS NULL, NULL, UNIX_SECONDS(block_time) - UNIX_SECONDS(prev_block_time)) AS idle_time\n    FROM (\n      SELECT\n        ARRAY_TO_STRING(outputs.addresses,',') AS address, \n        block_timestamp AS block_time,\n        LAG(block_timestamp) OVER (PARTITION BY ARRAY_TO_STRING(outputs.addresses,',') ORDER BY block_timestamp) AS prev_block_time\n      FROM `bigquery-public-data.crypto_bitcoin.transactions` AS transactions JOIN UNNEST(outputs) AS outputs\n    ) AS event\n    WHERE block_time != prev_block_time\n  )\n  GROUP BY address\n)\n,input_idle_times AS (\n  SELECT\n    address AS idle_time_address,\n    AVG(idle_time) AS mean_input_idle_time,\n    STDDEV(idle_time) AS stddev_input_idle_time\n  FROM\n  (\n    SELECT \n      event.address,\n      IF(prev_block_time IS NULL, NULL, UNIX_SECONDS(block_time) - UNIX_SECONDS(prev_block_time)) AS idle_time\n    FROM (\n      SELECT\n        ARRAY_TO_STRING(inputs.addresses,',') AS address, \n        block_timestamp AS block_time,\n        LAG(block_timestamp) OVER (PARTITION BY ARRAY_TO_STRING(inputs.addresses,',') ORDER BY block_timestamp) AS prev_block_time\n      FROM `bigquery-public-data.crypto_bitcoin.transactions` AS transactions JOIN UNNEST(inputs) AS inputs\n    ) AS event\n    WHERE block_time != prev_block_time\n  )\n  GROUP BY address\n)\n--,miners AS (\n--)\n\n(SELECT\n  TRUE AS is_miner,\n  output_ages_address AS address,\n  UNIX_SECONDS(CAST(output_ages.output_month_min AS TIMESTAMP)) AS output_month_min,\n  UNIX_SECONDS(CAST(output_ages.output_month_max AS TIMESTAMP)) AS output_month_max,\n  UNIX_SECONDS(CAST(input_ages.input_month_min AS TIMESTAMP)) AS input_month_min,\n  UNIX_SECONDS(CAST(input_ages.input_month_max AS TIMESTAMP)) AS input_month_max,\n  UNIX_SECONDS(CAST(output_ages.output_month_max AS TIMESTAMP)) - UNIX_SECONDS(CAST(output_ages.output_month_min AS TIMESTAMP)) AS output_active_time,\n  UNIX_SECONDS(CAST(input_ages.input_month_max AS TIMESTAMP)) - UNIX_SECONDS(CAST(input_ages.input_month_min AS TIMESTAMP)) AS input_active_time,\n  UNIX_SECONDS(CAST(output_ages.output_month_max AS TIMESTAMP)) - UNIX_SECONDS(CAST(input_ages.input_month_max AS TIMESTAMP)) AS io_max_lag,\n  UNIX_SECONDS(CAST(output_ages.output_month_min AS TIMESTAMP)) - UNIX_SECONDS(CAST(input_ages.input_month_min AS TIMESTAMP)) AS io_min_lag,\n  output_monthly_stats.output_active_months,\n  output_monthly_stats.total_tx_output_count,\n  output_monthly_stats.total_tx_output_value,\n  output_monthly_stats.mean_tx_output_value,\n  output_monthly_stats.stddev_tx_output_value,\n  output_monthly_stats.total_output_tx,\n  output_monthly_stats.mean_monthly_output_value,\n  output_monthly_stats.mean_monthly_output_count,\n  input_monthly_stats.input_active_months,\n  input_monthly_stats.total_tx_input_count,\n  input_monthly_stats.total_tx_input_value,\n  input_monthly_stats.mean_tx_input_value,\n  input_monthly_stats.stddev_tx_input_value,\n  input_monthly_stats.total_input_tx,\n  input_monthly_stats.mean_monthly_input_value,\n  input_monthly_stats.mean_monthly_input_count,\n  output_idle_times.mean_output_idle_time,\n  output_idle_times.stddev_output_idle_time,\n  input_idle_times.mean_input_idle_time,\n  input_idle_times.stddev_input_idle_time\nFROM\n  output_ages, output_monthly_stats, output_idle_times,\n  input_ages,  input_monthly_stats, input_idle_times\nWHERE TRUE\n  AND output_ages.output_ages_address = output_monthly_stats.output_monthly_stats_address\n  AND output_ages.output_ages_address = output_idle_times.idle_time_address\n  AND output_ages.output_ages_address = input_monthly_stats.input_monthly_stats_address\n  AND output_ages.output_ages_address = input_ages.input_ages_address\n  AND output_ages.output_ages_address = input_idle_times.idle_time_address\n  AND output_ages.output_ages_address IN\n(\n  SELECT \n    ARRAY_TO_STRING(outputs.addresses,',') AS miner\n  FROM \n  `bigquery-public-data.crypto_bitcoin.blocks` AS blocks,\n  `bigquery-public-data.crypto_bitcoin.transactions` AS transactions JOIN UNNEST(outputs) AS outputs\n  WHERE blocks.hash = transactions.block_hash \n    AND is_coinbase IS TRUE\n    AND ( FALSE\n      --\n      -- miner signatures from https:\/\/en.bitcoin.it\/wiki\/Comparison_of_mining_pools\n      --\n      OR coinbase_param LIKE '%4d696e656420627920416e74506f6f6c%' --AntPool\n      OR coinbase_param LIKE '%2f42434d6f6e737465722f%' --BCMonster\n      --BitcoinAffiliateNetwork\n      OR coinbase_param LIKE '%4269744d696e746572%' --BitMinter\n      --BTC.com\n      --BTCC Pool\n      --BTCDig\n      OR coinbase_param LIKE '%2f7374726174756d2f%' --Btcmp\n      --btcZPool.com\n      --BW Mining\n      OR coinbase_param LIKE '%456c6967697573%' --Eligius\n      --F2Pool\n      --GHash.IO\n      --Give Me COINS\n      --Golden Nonce Pool\n      OR coinbase_param LIKE '%2f627261766f2d6d696e696e672f%' --Bravo Mining\n      OR coinbase_param LIKE '%4b616e6f%' --KanoPool\n      --kmdPool.org\n      OR coinbase_param LIKE '%2f6d6d706f6f6c%' --Merge Mining Pool\n      --MergeMining\n      --Multipool\n      --P2Pool\n      OR coinbase_param LIKE '%2f736c7573682f%' --Slush Pool\n      --ZenPool.org\n    )\n  GROUP BY miner\n  HAVING COUNT(1) >= 20 \n)\nLIMIT {})\nUNION ALL\n(SELECT\n  FALSE AS is_miner,\n  output_ages_address AS address,\n  UNIX_SECONDS(CAST(output_ages.output_month_min AS TIMESTAMP)) AS output_month_min,\n  UNIX_SECONDS(CAST(output_ages.output_month_max AS TIMESTAMP)) AS output_month_max,\n  UNIX_SECONDS(CAST(input_ages.input_month_min AS TIMESTAMP)) AS input_month_min,\n  UNIX_SECONDS(CAST(input_ages.input_month_max AS TIMESTAMP)) AS input_month_max,\n  UNIX_SECONDS(CAST(output_ages.output_month_max AS TIMESTAMP)) - UNIX_SECONDS(CAST(output_ages.output_month_min AS TIMESTAMP)) AS output_active_time,\n  UNIX_SECONDS(CAST(input_ages.input_month_max AS TIMESTAMP)) - UNIX_SECONDS(CAST(input_ages.input_month_min AS TIMESTAMP)) AS input_active_time,\n  UNIX_SECONDS(CAST(output_ages.output_month_max AS TIMESTAMP)) - UNIX_SECONDS(CAST(input_ages.input_month_max AS TIMESTAMP)) AS io_max_lag,\n  UNIX_SECONDS(CAST(output_ages.output_month_min AS TIMESTAMP)) - UNIX_SECONDS(CAST(input_ages.input_month_min AS TIMESTAMP)) AS io_min_lag,\n  output_monthly_stats.output_active_months,\n  output_monthly_stats.total_tx_output_count,\n  output_monthly_stats.total_tx_output_value,\n  output_monthly_stats.mean_tx_output_value,\n  output_monthly_stats.stddev_tx_output_value,\n  output_monthly_stats.total_output_tx,\n  output_monthly_stats.mean_monthly_output_value,\n  output_monthly_stats.mean_monthly_output_count,\n  input_monthly_stats.input_active_months,\n  input_monthly_stats.total_tx_input_count,\n  input_monthly_stats.total_tx_input_value,\n  input_monthly_stats.mean_tx_input_value,\n  input_monthly_stats.stddev_tx_input_value,\n  input_monthly_stats.total_input_tx,\n  input_monthly_stats.mean_monthly_input_value,\n  input_monthly_stats.mean_monthly_input_count,\n  output_idle_times.mean_output_idle_time,\n  output_idle_times.stddev_output_idle_time,\n  input_idle_times.mean_input_idle_time,\n  input_idle_times.stddev_input_idle_time\nFROM\n  output_ages, output_monthly_stats, output_idle_times,\n  input_ages,  input_monthly_stats, input_idle_times\nWHERE TRUE\n  AND output_ages.output_ages_address = output_monthly_stats.output_monthly_stats_address\n  AND output_ages.output_ages_address = output_idle_times.idle_time_address\n  AND output_ages.output_ages_address = input_monthly_stats.input_monthly_stats_address\n  AND output_ages.output_ages_address = input_ages.input_ages_address\n  AND output_ages.output_ages_address = input_idle_times.idle_time_address\n  AND output_ages.output_ages_address NOT IN\n(\n  SELECT \n    ARRAY_TO_STRING(outputs.addresses,',') AS miner\n  FROM \n  `bigquery-public-data.crypto_bitcoin.blocks` AS blocks,\n  `bigquery-public-data.crypto_bitcoin.transactions` AS transactions JOIN UNNEST(outputs) AS outputs\n  WHERE blocks.hash = transactions.block_hash \n    AND is_coinbase IS TRUE\n    AND ( FALSE\n      --\n      -- miner signatures from https:\/\/en.bitcoin.it\/wiki\/Comparison_of_mining_pools\n      --\n      OR coinbase_param LIKE '%4d696e656420627920416e74506f6f6c%' --AntPool\n      OR coinbase_param LIKE '%2f42434d6f6e737465722f%' --BCMonster\n      --BitcoinAffiliateNetwork\n      OR coinbase_param LIKE '%4269744d696e746572%' --BitMinter\n      --BTC.com\n      --BTCC Pool\n      --BTCDig\n      OR coinbase_param LIKE '%2f7374726174756d2f%' --Btcmp\n      --btcZPool.com\n      --BW Mining\n      OR coinbase_param LIKE '%456c6967697573%' --Eligius\n      --F2Pool\n      --GHash.IO\n      --Give Me COINS\n      --Golden Nonce Pool\n      OR coinbase_param LIKE '%2f627261766f2d6d696e696e672f%' --Bravo Mining\n      OR coinbase_param LIKE '%4b616e6f%' --KanoPool\n      --kmdPool.org\n      OR coinbase_param LIKE '%2f6d6d706f6f6c%' --Merge Mining Pool\n      --MergeMining\n      --Multipool\n      --P2Pool\n      OR coinbase_param LIKE '%2f736c7573682f%' --Slush Pool\n      --ZenPool.org\n    )\n  GROUP BY miner\n  HAVING COUNT(1) >= 20 \n)\nLIMIT {})\n'''.format(miner_vectors_limit, non_miner_vectors_limit)","ed0c63e6":"df = client.query(sql).to_dataframe()","57699226":"df.info()","df50fecc":"#drop columns with null values\ndf.drop(labels=['stddev_output_idle_time','stddev_input_idle_time'], axis=1, inplace=True)","8e9a53f8":"#get rid of non-numeric features\nfeatures = df.drop(labels=['is_miner','address'], axis=1)\ntarget = df['is_miner'].values\nindices = range(len(features))\n\n#Train test split\nX_train, X_test, y_train, y_test, indices_train, indices_test = train_test_split(features, target, indices,  test_size=0.2)","b368d950":"rf = RandomForestClassifier(n_estimators=200, class_weight='balanced')\nrf.fit(X_train, y_train)","b194167c":"y_pred = rf.predict(X_test) #\nprobs = rf.predict_proba(X_test)[:,1] #positive class probabilities","6b61a212":"precision, recall, thresholds = precision_recall_curve(y_test, probs)","f3d8b9aa":"# Precision \/ recall curve code adapted from https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.precision_recall_curve.html\n\nfig, ax = plt.subplots(figsize=(8,6))\nstep_kwargs = ({'step': 'post'}\n               if 'step' in signature(plt.fill_between).parameters\n               else {})\nplt.step(recall, precision, color='b', alpha=0.2,\n         where='post')\nplt.fill_between(recall, precision, alpha=0.2, color='b', **step_kwargs)\n\nplt.xlabel('Recall')\nplt.ylabel('Precision')\nplt.ylim([0.0, 1.0])\nplt.xlim([0.0, 1.0])\nax.xaxis.set_major_formatter(mtick.PercentFormatter(1.0))\nax.yaxis.set_major_formatter(mtick.PercentFormatter(1.0))\nplt.title('Mining Pool Detector - Precision\/Recall Curve', fontsize=14)","e972df12":"#confusion matrix code adapted from https:\/\/scikit-learn.org\/stable\/auto_examples\/model_selection\/plot_confusion_matrix.html\n\ndef plot_confusion_matrix(cm, classes,\n                          normalize=False,\n                          title='Confusion matrix',\n                          cmap=plt.cm.Blues):\n    \"\"\"\n    This function prints and plots the confusion matrix.\n    Normalization can be applied by setting `normalize=True`.\n    \"\"\"\n    if normalize:\n        cm = cm.astype('float') \/ cm.sum(axis=1)[:, np.newaxis]\n        print(\"Normalized confusion matrix\")\n    else:\n        print('Confusion matrix, without normalization')\n\n    print(cm)\n    dummy=np.array([[0,0],[0,0]])\n    plt.figure(figsize=(8,6))\n    plt.imshow(dummy, interpolation='nearest', cmap=cmap)\n    plt.title(title)\n    tick_marks = np.arange(len(classes))\n    plt.xticks(tick_marks, classes, rotation=45)\n    plt.yticks(tick_marks, classes)\n\n    fmt = '.2f' if normalize else 'd'\n    thresh = cm.max() \/ 2.\n    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n        plt.text(j, i, format(cm[i, j], fmt),\n                 horizontalalignment=\"center\",\n                 color=\"black\")\n\n    plt.ylabel('True label')\n    plt.xlabel('Predicted label')\n    plt.tight_layout()\n\n\n# Compute confusion matrix\ncnf_matrix = confusion_matrix(y_test, y_pred)\nclass_names = ['not mining pool', 'mining pool']\nnp.set_printoptions(precision=2)\n\n# Plot confusion matrix\nplt.figure()\nplot_confusion_matrix(cnf_matrix, classes=class_names, normalize=False,\n                      title='Mining Pool Detector - Confusion Matrix')\n\nplt.show()","b693e968":"x_pos = np.arange(len(features.columns))\nbtc_importances = rf.feature_importances_\n\ninds = np.argsort(btc_importances)[::-1]\nbtc_importances = btc_importances[inds]\ncols = features.columns[inds]\nbar_width = .8\n\n#how many features to plot?\nn_features=12\nx_pos = x_pos[:n_features][::-1]\nbtc_importances = btc_importances[:n_features]\n\n#plot\nplt.figure(figsize=(12,6))\nplt.barh(x_pos, btc_importances, bar_width, label='BTC model')\nplt.yticks(x_pos, cols, rotation=0, fontsize=14)\nplt.xlabel('feature importance', fontsize=14)\nplt.title('Mining Pool Detector', fontsize=20)\nplt.tight_layout()","d893ad2c":"#data points where model predicts true, but are labelled as false\nfalse_positives = (y_test==False) & (y_pred==True)","eb89e5b8":"#subset to test set data only\ndf_test = df.iloc[indices_test, :]\n\nprint('False Positive addresses')\n\n#subset test set to false positives only\ndf_test.iloc[false_positives].head(15)","956f9766":"fetch('people.json')\n  .then(function (response) {\n    return response.json();\n  })\n  .then(function (data) {\n    appendData(data);\n  })\n  .catch(function (err) {\n    console.log(err);\n  });","e1e2a601":"<h1>animate()<\/h1>\n\n <input type=\"button\" id=\"btn\" value=\"animate\">\n\n <div id=\"d1\">This is the Div<\/div>\n\n <script src=\"js\/jquery-2.2.0.min.js\"><\/script>\n\n <script>\n  $(document).ready(function()\n  {\n\n   $(\"#btn\").click(function()\n   {\n    $(\"#d1\").animate(\n    {\n     \"margin-top\": '250px'\n    }, 5000); \/\/5 seconds\n   });\n\n  });\n <\/script>","532bd4b6":"GET https:\/\/api.blockchain.com\/exchange\/order\/21745988181","4c1ff652":"{\n  \"id\": 12,\n  \"status\": \"failed\",\n  \"url\": \"https:\/\/api.github.com\/repos\/jonmagic\/foo\/import\/issues\/12\",\n  \"import_issues_url\": \"https:\/\/api.github.com\/repos\/jonmagic\/foo\/import\/issues\",\n  \"repository_url\": \"https:\/\/api.github.com\/repos\/jonmagic\/foo\",\n  \"created_at\": \"2015-03-18T21:45:58-07:00\",\n  \"updated_at\": \"2015-03-18T21:46:05-07:00\",\n  \"issue_url\": \"https:\/\/api.github.com\/repos\/jonmagic\/foo\/issues\/7\",\n  \"errors\": [\n    {\n      \"location\": \"\/comments[0]\",\n      \"resource\": \"IssueComment\",\n      \"field\": null,\n      \"value\": null,\n      \"code\": \"error\"\n    }\n  ]\n}","6a5af80d":"## Make Predictions","78097627":"## Imports","6c368e9d":"# Bitcoin Mining Pool Classifier - Data from BigQuery","258a1d14":"## How good is our model?","dd49662f":"## What features provide the most signal?","74546876":"## Load data from BigQuery\n\nNote: We query a subset of the data here due to Kaggle resource constraints","3552038d":"[GET https:\/\/api.blockchain.com\/exchange\/order\/21745988181](http:\/\/)<body>\n  <div id=\"myData\"><\/div>\n<\/body>","54fbf275":"## Split Data into Training Set and Test Set","2bc61943":"## Train a Model","bf87e828":"## Are False Positives associated with dark mining pools?"}}