{"cell_type":{"7185e490":"code","cd15dfdb":"code","cd457117":"code","cdf510ef":"code","f990d004":"code","5ed88eba":"code","68bce5e0":"code","c438313f":"code","12280e9e":"code","0bcdcc7c":"code","660fb6b2":"code","25d8a77d":"code","6561cc7b":"code","fd45c966":"code","d090859b":"code","224e5625":"code","2e544d63":"code","c4e33578":"code","0d07c911":"code","b68b03a9":"code","37e0c566":"code","f73b75b3":"code","13e80c12":"code","0916e73d":"code","61dc8cde":"code","7e077450":"code","bcf005c3":"code","b7652d08":"code","8309013f":"code","1533c1d6":"code","9a6b42c3":"code","1db6f3ce":"code","16476f0b":"code","22bf281a":"code","8f30416e":"code","4e39bd1e":"code","152e459d":"code","f7ba2379":"code","d2ef1fd1":"code","63215395":"code","1e036e30":"code","1aeee2bd":"code","90f715fc":"code","431ce13d":"code","f6e3102c":"code","dd348b93":"code","0e4a2b94":"code","4a8127ae":"code","0a063146":"code","c236d6b7":"code","c58f2411":"code","32970c5d":"code","0bdc4e7d":"code","da014534":"code","49744e48":"code","daa9421b":"code","3383be98":"code","cbbfd3f5":"code","0f488531":"code","0dd4e43a":"code","8894cffd":"code","f6d948d7":"code","3dbd36f2":"code","5bda9ea2":"code","f8567c37":"code","97cd4881":"code","45ec3539":"code","149e36a1":"code","2996bc50":"code","3422f118":"code","7126b104":"code","b2dc925b":"code","7e87f26f":"code","eafe18bc":"code","c2e671be":"markdown","05e0644e":"markdown","8636d6cc":"markdown","a06fde7f":"markdown","323d52da":"markdown","bcb3e5a1":"markdown","0800914d":"markdown"},"source":{"7185e490":"import numpy as np\nimport pandas as pd\nimport os\nimport xgboost as xgb\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import log_loss\nfrom scipy.interpolate import UnivariateSpline\nimport statsmodels.api as sm\nimport matplotlib.pyplot as plt\nimport collections\n\nfrom subprocess import check_output\nprint(check_output([\"ls\", \"..\/input\"]).decode(\"utf8\"))","cd15dfdb":"data_dir = '..\/input\/'\ntourney_results = pd.read_csv(data_dir + 'stage2wdatafiles\/WNCAATourneyDetailedResults.csv')\nseeds = pd.read_csv(data_dir + 'stage2wdatafiles\/WNCAATourneySeeds.csv')\nregular_results = pd.read_csv(data_dir + 'stage2wdatafiles\/WRegularSeasonDetailedResults.csv')","cd457117":"regular_results.info()","cdf510ef":"regular_results.head()","f990d004":"regular_results.groupby('Season').mean()","5ed88eba":"tourney_results.info()","68bce5e0":"tourney_results.head()","c438313f":"tourney_results.groupby('Season').mean()","12280e9e":"seeds.head()","0bcdcc7c":"all(regular_results.columns == tourney_results.columns)","660fb6b2":"regular_results_swap = regular_results[[\n    'Season', 'DayNum', 'LTeamID', 'LScore', 'WTeamID', 'WScore', 'WLoc', 'NumOT', \n    'LFGM', 'LFGA', 'LFGM3', 'LFGA3', 'LFTM', 'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl', 'LBlk', 'LPF', \n    'WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR', 'WAst', 'WTO', 'WStl', 'WBlk', 'WPF']]","25d8a77d":"regular_results_swap.loc[regular_results['WLoc'] == 'H', 'WLoc'] = 'A'\nregular_results_swap.loc[regular_results['WLoc'] == 'A', 'WLoc'] = 'H'\nregular_results.columns.values[6] = 'location'\nregular_results_swap.columns.values[6] = 'location'","6561cc7b":"regular_results.head()","fd45c966":"regular_results_swap.head()","d090859b":"regular_results.columns = [x.replace('W','T1_').replace('L','T2_') for x in list(regular_results.columns)]\nregular_results_swap.columns = [x.replace('L','T1_').replace('W','T2_') for x in list(regular_results.columns)]","224e5625":"regular_results.head()","2e544d63":"regular_results_swap.head()","c4e33578":"regular_data = pd.concat([regular_results, regular_results_swap]).sort_index().reset_index(drop = True)","0d07c911":"regular_data.head(10)","b68b03a9":"data_dir = '..\/input\/'\ntourney_results = pd.read_csv(data_dir + 'stage2wdatafiles\/WNCAATourneyDetailedResults.csv')\nseeds = pd.read_csv(data_dir + 'stage2wdatafiles\/WNCAATourneySeeds.csv')\nregular_results = pd.read_csv(data_dir + 'stage2wdatafiles\/WRegularSeasonDetailedResults.csv')\n\ndef prepare_data(df):\n    dfswap = df[['Season', 'DayNum', 'LTeamID', 'LScore', 'WTeamID', 'WScore', 'WLoc', 'NumOT', \n    'LFGM', 'LFGA', 'LFGM3', 'LFGA3', 'LFTM', 'LFTA', 'LOR', 'LDR', 'LAst', 'LTO', 'LStl', 'LBlk', 'LPF', \n    'WFGM', 'WFGA', 'WFGM3', 'WFGA3', 'WFTM', 'WFTA', 'WOR', 'WDR', 'WAst', 'WTO', 'WStl', 'WBlk', 'WPF']]\n\n    dfswap.loc[df['WLoc'] == 'H', 'WLoc'] = 'A'\n    dfswap.loc[df['WLoc'] == 'A', 'WLoc'] = 'H'\n    df.columns.values[6] = 'location'\n    dfswap.columns.values[6] = 'location'    \n      \n    df.columns = [x.replace('W','T1_').replace('L','T2_') for x in list(df.columns)]\n    dfswap.columns = [x.replace('L','T1_').replace('W','T2_') for x in list(dfswap.columns)]\n\n    output = pd.concat([df, dfswap]).reset_index(drop=True)\n    output.loc[output.location=='N','location'] = '0'\n    output.loc[output.location=='H','location'] = '1'\n    output.loc[output.location=='A','location'] = '-1'\n    output.location = output.location.astype(int)\n    \n    output['PointDiff'] = output['T1_Score'] - output['T2_Score']\n    \n    return output","37e0c566":"regular_data = prepare_data(regular_results)\ntourney_data = prepare_data(tourney_results)","f73b75b3":"regular_data.head()","13e80c12":"tourney_data.head()","0916e73d":"tourney_data.columns","61dc8cde":"boxscore_cols = ['T1_Score', 'T2_Score', \n        'T1_FGM', 'T1_FGA', 'T1_FGM3', 'T1_FGA3', 'T1_FTM', 'T1_FTA', 'T1_OR', 'T1_DR', 'T1_Ast', 'T1_TO', 'T1_Stl', 'T1_Blk', 'T1_PF', \n        'T2_FGM', 'T2_FGA', 'T2_FGM3', 'T2_FGA3', 'T2_FTM', 'T2_FTA', 'T2_OR', 'T2_DR', 'T2_Ast', 'T2_TO', 'T2_Stl', 'T2_Blk', 'T2_PF', \n        'PointDiff']\n\nboxscore_cols = [\n        'T1_FGM', 'T1_FGA', 'T1_FGM3', 'T1_FGA3', 'T1_OR', 'T1_Ast', 'T1_TO', 'T1_Stl', 'T1_PF', \n        'T2_FGM', 'T2_FGA', 'T2_FGM3', 'T2_FGA3', 'T2_OR', 'T2_Ast', 'T2_TO', 'T2_Stl', 'T2_Blk',  \n        'PointDiff']\n\nfuncs = [np.mean]","7e077450":"season_statistics = regular_data.groupby([\"Season\", 'T1_TeamID'])[boxscore_cols].agg(funcs)\nseason_statistics.head()","bcf005c3":"season_statistics = regular_data.groupby([\"Season\", 'T1_TeamID'])[boxscore_cols].agg(funcs).reset_index()\nseason_statistics.head()","b7652d08":"season_statistics.columns = [''.join(col).strip() for col in season_statistics.columns.values]\nseason_statistics.head()","8309013f":"season_statistics_T1 = season_statistics.copy()\nseason_statistics_T2 = season_statistics.copy()\n\nseason_statistics_T1.columns = [\"T1_\" + x.replace(\"T1_\",\"\").replace(\"T2_\",\"opponent_\") for x in list(season_statistics_T1.columns)]\nseason_statistics_T2.columns = [\"T2_\" + x.replace(\"T1_\",\"\").replace(\"T2_\",\"opponent_\") for x in list(season_statistics_T2.columns)]\nseason_statistics_T1.columns.values[0] = \"Season\"\nseason_statistics_T2.columns.values[0] = \"Season\"","1533c1d6":"season_statistics_T1.head()","9a6b42c3":"season_statistics_T2.head()","1db6f3ce":"tourney_data.head()","16476f0b":"tourney_data = tourney_data[['Season', 'DayNum', 'T1_TeamID', 'T1_Score', 'T2_TeamID' ,'T2_Score']]\ntourney_data.head()","22bf281a":"tourney_data = pd.merge(tourney_data, season_statistics_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, season_statistics_T2, on = ['Season', 'T2_TeamID'], how = 'left')","8f30416e":"tourney_data.head()","4e39bd1e":"last14days_stats_T1 = regular_data.loc[regular_data.DayNum>118].reset_index(drop=True)\nlast14days_stats_T1['win'] = np.where(last14days_stats_T1['PointDiff']>0,1,0)\nlast14days_stats_T1 = last14days_stats_T1.groupby(['Season','T1_TeamID'])['win'].mean().reset_index(name='T1_win_ratio_14d')\n\nlast14days_stats_T2 = regular_data.loc[regular_data.DayNum>118].reset_index(drop=True)\nlast14days_stats_T2['win'] = np.where(last14days_stats_T2['PointDiff']<0,1,0)\nlast14days_stats_T2 = last14days_stats_T2.groupby(['Season','T2_TeamID'])['win'].mean().reset_index(name='T2_win_ratio_14d')","152e459d":"tourney_data = pd.merge(tourney_data, last14days_stats_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, last14days_stats_T2, on = ['Season', 'T2_TeamID'], how = 'left')","f7ba2379":"regular_season_effects = regular_data[['Season','T1_TeamID','T2_TeamID','PointDiff']].copy()\nregular_season_effects['T1_TeamID'] = regular_season_effects['T1_TeamID'].astype(str)\nregular_season_effects['T2_TeamID'] = regular_season_effects['T2_TeamID'].astype(str)\nregular_season_effects['win'] = np.where(regular_season_effects['PointDiff']>0,1,0)\nmarch_madness = pd.merge(seeds[['Season','TeamID']],seeds[['Season','TeamID']],on='Season')\nmarch_madness.columns = ['Season', 'T1_TeamID', 'T2_TeamID']\nmarch_madness.T1_TeamID = march_madness.T1_TeamID.astype(str)\nmarch_madness.T2_TeamID = march_madness.T2_TeamID.astype(str)\nregular_season_effects = pd.merge(regular_season_effects, march_madness, on = ['Season','T1_TeamID','T2_TeamID'])\nregular_season_effects.shape","d2ef1fd1":"def team_quality(season):\n    formula = 'win~-1+T1_TeamID+T2_TeamID'\n    glm = sm.GLM.from_formula(formula=formula, \n                              data=regular_season_effects.loc[regular_season_effects.Season==season,:], \n                              family=sm.families.Binomial()).fit()\n    \n    quality = pd.DataFrame(glm.params).reset_index()\n    quality.columns = ['TeamID','quality']\n    quality['Season'] = season\n    quality['quality'] = np.exp(quality['quality'])\n    quality = quality.loc[quality.TeamID.str.contains('T1_')].reset_index(drop=True)\n    quality['TeamID'] = quality['TeamID'].apply(lambda x: x[10:14]).astype(int)\n    return quality","63215395":"t_3126_quality = pd.DataFrame(np.array([[3126,0,2010],[3126,0,2011],[3126,0,2012],[3126,0,2013],[3126,0,2014],[3126,0,2015],[3126,0,2016],[3126,0,2017],[3126,0,2018],[3126,0,2019]]), columns=['TeamID','quality','Season'])\nt_3413_quality = pd.DataFrame(np.array([[3413,0,2010],[3413,0,2011],[3413,0,2012],[3413,0,2013],[3413,0,2014],[3413,0,2015],[3413,0,2016],[3413,0,2017],[3413,0,2018],[3413,0,2019]]), columns=['TeamID','quality','Season'])\nt_3352_quality = pd.DataFrame(np.array([[3352,0,2010],[3352,0,2011],[3352,0,2012],[3352,0,2013],[3352,0,2014],[3352,0,2015],[3352,0,2016],[3352,0,2017],[3352,0,2018],[3352,0,2019]]), columns=['TeamID','quality','Season'])\nt_3406_quality = pd.DataFrame(np.array([[3406,0,2010],[3406,0,2011],[3406,0,2012],[3406,0,2013],[3406,0,2014],[3406,0,2015],[3406,0,2016],[3406,0,2017],[3406,0,2018],[3406,0,2019]]), columns=['TeamID','quality','Season'])\nt_3101_quality = pd.DataFrame(np.array([[3101,0,2010],[3101,0,2011],[3101,0,2012],[3101,0,2013],[3101,0,2014],[3101,0,2015],[3101,0,2016],[3101,0,2017],[3101,0,2018],[3101,0,2019]]), columns=['TeamID','quality','Season'])\nt_3273_quality = pd.DataFrame(np.array([[3273,0,2010],[3273,0,2011],[3273,0,2012],[3273,0,2013],[3273,0,2014],[3273,0,2015],[3273,0,2016],[3273,0,2017],[3273,0,2018],[3273,0,2019]]), columns=['TeamID','quality','Season'])\nt_3380_quality = pd.DataFrame(np.array([[3380,0,2010],[3380,0,2011],[3380,0,2012],[3380,0,2013],[3380,0,2014],[3380,0,2015],[3380,0,2016],[3380,0,2017],[3380,0,2018],[3380,0,2019]]), columns=['TeamID','quality','Season'])\nt_3340_quality = pd.DataFrame(np.array([[3340,0,2010],[3340,0,2011],[3340,0,2012],[3340,0,2013],[3340,0,2014],[3340,0,2015],[3340,0,2016],[3340,0,2017],[3340,0,2018],[3340,0,2019]]), columns=['TeamID','quality','Season'])","1e036e30":"team_quality_2010 = team_quality(2010)\nteam_quality_2010 = team_quality_2010[team_quality_2010.TeamID != 3126]\nteam_quality_2010 = team_quality_2010[team_quality_2010.TeamID != 3413]\nteam_quality_2010 = team_quality_2010[team_quality_2010.TeamID != 3352]\nteam_quality_2010 = team_quality_2010[team_quality_2010.TeamID != 3406]\nteam_quality_2010 = team_quality_2010[team_quality_2010.TeamID != 3101]\nteam_quality_2010 = team_quality_2010[team_quality_2010.TeamID != 3273]\nteam_quality_2010 = team_quality_2010[team_quality_2010.TeamID != 3380]\nteam_quality_2010 = team_quality_2010[team_quality_2010.TeamID != 3340]\n\nteam_quality_2011 = team_quality(2011)\nteam_quality_2011 = team_quality_2011[team_quality_2011.TeamID != 3126]\nteam_quality_2011 = team_quality_2011[team_quality_2011.TeamID != 3413]\nteam_quality_2011 = team_quality_2011[team_quality_2011.TeamID != 3352]\nteam_quality_2011 = team_quality_2011[team_quality_2011.TeamID != 3406]\nteam_quality_2011 = team_quality_2011[team_quality_2011.TeamID != 3101]\nteam_quality_2011 = team_quality_2011[team_quality_2011.TeamID != 3273]\nteam_quality_2011 = team_quality_2011[team_quality_2011.TeamID != 3380]\nteam_quality_2011 = team_quality_2011[team_quality_2011.TeamID != 3340]\n\nteam_quality_2012 = team_quality(2012)\nteam_quality_2012 = team_quality_2012[team_quality_2012.TeamID != 3126]\nteam_quality_2012 = team_quality_2012[team_quality_2012.TeamID != 3413]\nteam_quality_2012 = team_quality_2012[team_quality_2012.TeamID != 3352]\nteam_quality_2012 = team_quality_2012[team_quality_2012.TeamID != 3406]\nteam_quality_2012 = team_quality_2012[team_quality_2012.TeamID != 3101]\nteam_quality_2012 = team_quality_2012[team_quality_2012.TeamID != 3273]\nteam_quality_2012 = team_quality_2012[team_quality_2012.TeamID != 3380]\nteam_quality_2012 = team_quality_2012[team_quality_2012.TeamID != 3340]\n\nteam_quality_2013 = team_quality(2013)\nteam_quality_2013 = team_quality_2013[team_quality_2013.TeamID != 3126]\nteam_quality_2013 = team_quality_2013[team_quality_2013.TeamID != 3413]\nteam_quality_2013 = team_quality_2013[team_quality_2013.TeamID != 3352]\nteam_quality_2013 = team_quality_2013[team_quality_2013.TeamID != 3406]\nteam_quality_2013 = team_quality_2013[team_quality_2013.TeamID != 3101]\nteam_quality_2013 = team_quality_2013[team_quality_2013.TeamID != 3273]\nteam_quality_2013 = team_quality_2013[team_quality_2013.TeamID != 3380]\nteam_quality_2013 = team_quality_2013[team_quality_2013.TeamID != 3340]\n\nteam_quality_2014 = team_quality(2014)\nteam_quality_2014 = team_quality_2014[team_quality_2014.TeamID != 3126]\nteam_quality_2014 = team_quality_2014[team_quality_2014.TeamID != 3413]\nteam_quality_2014 = team_quality_2014[team_quality_2014.TeamID != 3352]\nteam_quality_2014 = team_quality_2014[team_quality_2014.TeamID != 3406]\nteam_quality_2014 = team_quality_2014[team_quality_2014.TeamID != 3101]\nteam_quality_2014 = team_quality_2014[team_quality_2014.TeamID != 3273]\nteam_quality_2014 = team_quality_2014[team_quality_2014.TeamID != 3380]\nteam_quality_2014 = team_quality_2014[team_quality_2014.TeamID != 3340]\n\nteam_quality_2015 = team_quality(2015)\nteam_quality_2015 = team_quality_2015[team_quality_2015.TeamID != 3126]\nteam_quality_2015 = team_quality_2015[team_quality_2015.TeamID != 3413]\nteam_quality_2015 = team_quality_2015[team_quality_2015.TeamID != 3352]\nteam_quality_2015 = team_quality_2015[team_quality_2015.TeamID != 3406]\nteam_quality_2015 = team_quality_2015[team_quality_2015.TeamID != 3101]\nteam_quality_2015 = team_quality_2015[team_quality_2015.TeamID != 3273]\nteam_quality_2015 = team_quality_2015[team_quality_2015.TeamID != 3380]\nteam_quality_2015 = team_quality_2015[team_quality_2015.TeamID != 3340]\n\nteam_quality_2016 = team_quality(2016)\nteam_quality_2016 = team_quality_2016[team_quality_2016.TeamID != 3126]\nteam_quality_2016 = team_quality_2016[team_quality_2016.TeamID != 3413]\nteam_quality_2016 = team_quality_2016[team_quality_2016.TeamID != 3352]\nteam_quality_2016 = team_quality_2016[team_quality_2016.TeamID != 3406]\nteam_quality_2016 = team_quality_2016[team_quality_2016.TeamID != 3101]\nteam_quality_2016 = team_quality_2016[team_quality_2016.TeamID != 3273]\nteam_quality_2016 = team_quality_2016[team_quality_2016.TeamID != 3380]\nteam_quality_2016 = team_quality_2016[team_quality_2016.TeamID != 3340]\n\nteam_quality_2017 = team_quality(2017)\nteam_quality_2017 = team_quality_2017[team_quality_2017.TeamID != 3126]\nteam_quality_2017 = team_quality_2017[team_quality_2017.TeamID != 3413]\nteam_quality_2017 = team_quality_2017[team_quality_2017.TeamID != 3352]\nteam_quality_2017 = team_quality_2017[team_quality_2017.TeamID != 3406]\nteam_quality_2017 = team_quality_2017[team_quality_2017.TeamID != 3101]\nteam_quality_2017 = team_quality_2017[team_quality_2017.TeamID != 3273]\nteam_quality_2017 = team_quality_2017[team_quality_2017.TeamID != 3380]\nteam_quality_2017 = team_quality_2017[team_quality_2017.TeamID != 3340]\n\nteam_quality_2018 = team_quality(2018)\nteam_quality_2018 = team_quality_2018[team_quality_2018.TeamID != 3126]\nteam_quality_2018 = team_quality_2018[team_quality_2018.TeamID != 3413]\nteam_quality_2018 = team_quality_2018[team_quality_2018.TeamID != 3352]\nteam_quality_2018 = team_quality_2018[team_quality_2018.TeamID != 3406]\nteam_quality_2018 = team_quality_2018[team_quality_2018.TeamID != 3101]\nteam_quality_2018 = team_quality_2018[team_quality_2018.TeamID != 3273]\nteam_quality_2018 = team_quality_2018[team_quality_2018.TeamID != 3380]\nteam_quality_2018 = team_quality_2018[team_quality_2018.TeamID != 3340]\n\nteam_quality_2019 = team_quality(2019)\nteam_quality_2019 = team_quality_2019[team_quality_2019.TeamID != 3126]\nteam_quality_2019 = team_quality_2019[team_quality_2019.TeamID != 3413]\nteam_quality_2019 = team_quality_2019[team_quality_2019.TeamID != 3352]\nteam_quality_2019 = team_quality_2019[team_quality_2019.TeamID != 3406]\nteam_quality_2019 = team_quality_2019[team_quality_2019.TeamID != 3101]\nteam_quality_2019 = team_quality_2019[team_quality_2019.TeamID != 3273]\nteam_quality_2019 = team_quality_2019[team_quality_2019.TeamID != 3380]\nteam_quality_2019 = team_quality_2019[team_quality_2019.TeamID != 3340]","1aeee2bd":"glm_quality = pd.concat([team_quality_2010,\n                         team_quality_2011,\n                         team_quality_2012,\n                         team_quality_2013,\n                         team_quality_2014,\n                         team_quality_2015,\n                         team_quality_2016,\n                         team_quality_2017,\n                         team_quality_2018,\n                         team_quality_2019,\n                         t_3126_quality,\n                         t_3413_quality,\n                         t_3352_quality,\n                         t_3406_quality,\n                         t_3101_quality,\n                         t_3273_quality,\n                         t_3380_quality,\n                         t_3340_quality,\n                        ]).reset_index(drop=True)\n#glm_quality = pd.concat([team_quality(2010),\n#                         team_quality(2011),\n#                         team_quality(2012),\n#                         team_quality(2013),\n#                         team_quality(2014),\n#                         team_quality(2015),\n#                         team_quality(2016),\n#                         team_quality(2017),\n#                         team_quality(2018),\n#                         team_quality(2019),\n#                         s_quality]).reset_index(drop=True)\nglm_quality.info()\n# team_quality(2019)","90f715fc":"glm_quality_T1 = glm_quality.copy()\nglm_quality_T2 = glm_quality.copy()\nglm_quality_T1.columns = ['T1_TeamID','T1_quality','Season']\nglm_quality_T2.columns = ['T2_TeamID','T2_quality','Season']","431ce13d":"tourney_data = pd.merge(tourney_data, glm_quality_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, glm_quality_T2, on = ['Season', 'T2_TeamID'], how = 'left')","f6e3102c":"seeds.head()","dd348b93":"seeds['seed'] = seeds['Seed'].apply(lambda x: int(x[1:3]))\nseeds.head()","0e4a2b94":"seeds_T1 = seeds[['Season','TeamID','seed']].copy()\nseeds_T2 = seeds[['Season','TeamID','seed']].copy()\nseeds_T1.columns = ['Season','T1_TeamID','T1_seed']\nseeds_T2.columns = ['Season','T2_TeamID','T2_seed']","4a8127ae":"tourney_data = pd.merge(tourney_data, seeds_T1, on = ['Season', 'T1_TeamID'], how = 'left')\ntourney_data = pd.merge(tourney_data, seeds_T2, on = ['Season', 'T2_TeamID'], how = 'left')","0a063146":"tourney_data[\"Seed_diff\"] = tourney_data[\"T1_seed\"] - tourney_data[\"T2_seed\"]","c236d6b7":"y = tourney_data['T1_Score'] - tourney_data['T2_Score']\ny.describe()","c58f2411":"features = list(season_statistics_T1.columns[2:999]) + \\\n    list(season_statistics_T2.columns[2:999]) + \\\n    list(seeds_T1.columns[2:999]) + \\\n    list(seeds_T2.columns[2:999]) + \\\n    list(last14days_stats_T1.columns[2:999]) + \\\n    list(last14days_stats_T2.columns[2:999]) + \\\n    [\"Seed_diff\"] + [\"T1_quality\",\"T2_quality\"]\n\nlen(features)","32970c5d":"X = tourney_data[features].values\ndtrain = xgb.DMatrix(X, label = y)","0bdc4e7d":"def cauchyobj(preds, dtrain):\n    labels = dtrain.get_label()\n    c = 5000 \n    x =  preds-labels    \n    grad = x \/ (x**2\/c**2+1)\n    hess = -c**2*(x**2-c**2)\/(x**2+c**2)**2\n    return grad, hess","da014534":"param = {} \n#param['objective'] = 'reg:linear'\nparam['eval_metric'] =  'mae'\nparam['booster'] = 'gbtree'\nparam['eta'] = 0.05 #change to ~0.02 for final run\nparam['subsample'] = 0.35\nparam['colsample_bytree'] = 0.7\nparam['num_parallel_tree'] = 3 #recommend 10\nparam['min_child_weight'] = 40\nparam['gamma'] = 10\nparam['max_depth'] =  3\nparam['silent'] = 1\n\nprint(param)","49744e48":"xgb_cv = []\nrepeat_cv = 100 # recommend 10\n\nfor i in range(repeat_cv): \n    print(f\"Fold repeater {i}\")\n    xgb_cv.append(\n        xgb.cv(\n          params = param,\n          dtrain = dtrain,\n          obj = cauchyobj,\n          num_boost_round = 3000,\n          folds = KFold(n_splits = 5, shuffle = True, random_state = i),\n          early_stopping_rounds = 25,\n          verbose_eval = 50\n        )\n    )","daa9421b":"iteration_counts = [np.argmin(x['test-mae-mean'].values) for x in xgb_cv]\nval_mae = [np.min(x['test-mae-mean'].values) for x in xgb_cv]\niteration_counts, val_mae","3383be98":"oof_preds = []\nfor i in range(repeat_cv):\n    print(f\"Fold repeater {i}\")\n    preds = y.copy()\n    kfold = KFold(n_splits = 5, shuffle = True, random_state = i)    \n    for train_index, val_index in kfold.split(X,y):\n        dtrain_i = xgb.DMatrix(X[train_index], label = y[train_index])\n        dval_i = xgb.DMatrix(X[val_index], label = y[val_index])  \n        model = xgb.train(\n              params = param,\n              dtrain = dtrain_i,\n              num_boost_round = iteration_counts[i],\n              verbose_eval = 50\n        )\n        preds[val_index] = model.predict(dval_i)\n    oof_preds.append(np.clip(preds,-30,30))","cbbfd3f5":"plot_df = pd.DataFrame({\"pred\":oof_preds[0], \"label\":np.where(y>0,1,0)})\nplot_df[\"pred_int\"] = plot_df[\"pred\"].astype(int)\nplot_df = plot_df.groupby('pred_int')['label'].mean().reset_index(name='average_win_pct')\n\nplt.figure()\nplt.plot(plot_df.pred_int,plot_df.average_win_pct)","0f488531":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n        \n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    \n    print(f\"logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","0dd4e43a":"plot_df = pd.DataFrame({\"pred\":oof_preds[0], \"label\":np.where(y>0,1,0), \"spline\":spline_model[0](oof_preds[0])})\nplot_df[\"pred_int\"] = (plot_df[\"pred\"]).astype(int)\nplot_df = plot_df.groupby('pred_int')['spline','label'].mean().reset_index()\n\nplt.figure()\nplt.plot(plot_df.pred_int,plot_df.spline)\nplt.plot(plot_df.pred_int,plot_df.label)","8894cffd":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n    \n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","f6d948d7":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n    spline_fit[(tourney_data.T1_seed==1) & (tourney_data.T2_seed==16)] = 1.0\n    spline_fit[(tourney_data.T1_seed==2) & (tourney_data.T2_seed==15)] = 1.0\n    spline_fit[(tourney_data.T1_seed==3) & (tourney_data.T2_seed==14)] = 1.0\n    spline_fit[(tourney_data.T1_seed==4) & (tourney_data.T2_seed==13)] = 1.0\n    spline_fit[(tourney_data.T1_seed==16) & (tourney_data.T2_seed==1)] = 0.0\n    spline_fit[(tourney_data.T1_seed==15) & (tourney_data.T2_seed==2)] = 0.0\n    spline_fit[(tourney_data.T1_seed==14) & (tourney_data.T2_seed==3)] = 0.0\n    spline_fit[(tourney_data.T1_seed==13) & (tourney_data.T2_seed==4)] = 0.0\n    \n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","3dbd36f2":"#looking for upsets\npd.concat(\n    [tourney_data[(tourney_data.T1_seed==1) & (tourney_data.T2_seed==16) & (tourney_data.T1_Score < tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==2) & (tourney_data.T2_seed==15) & (tourney_data.T1_Score < tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==3) & (tourney_data.T2_seed==14) & (tourney_data.T1_Score < tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==4) & (tourney_data.T2_seed==13) & (tourney_data.T1_Score < tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==16) & (tourney_data.T2_seed==1) & (tourney_data.T1_Score > tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==15) & (tourney_data.T2_seed==2) & (tourney_data.T1_Score > tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==14) & (tourney_data.T2_seed==3) & (tourney_data.T1_Score > tourney_data.T2_Score)],\n     tourney_data[(tourney_data.T1_seed==13) & (tourney_data.T2_seed==4) & (tourney_data.T1_Score > tourney_data.T2_Score)]]\n)   \n\n#https:\/\/en.wikipedia.org\/wiki\/NCAA_Division_I_Women%27s_Basketball_Tournament_upsets","5bda9ea2":"spline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n    spline_fit[(tourney_data.T1_seed==1) & (tourney_data.T2_seed==16) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==2) & (tourney_data.T2_seed==15) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==3) & (tourney_data.T2_seed==14) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==4) & (tourney_data.T2_seed==13) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==16) & (tourney_data.T2_seed==1) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==15) & (tourney_data.T2_seed==2) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==14) & (tourney_data.T2_seed==3) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==13) & (tourney_data.T2_seed==4) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    \n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") ","f8567c37":"val_cv = []\nspline_model = []\n\nfor i in range(repeat_cv):\n    dat = list(zip(oof_preds[i],np.where(y>0,1,0)))\n    dat = sorted(dat, key = lambda x: x[0])\n    datdict = {}\n    for k in range(len(dat)):\n        datdict[dat[k][0]]= dat[k][1]\n    spline_model.append(UnivariateSpline(list(datdict.keys()), list(datdict.values())))\n    spline_fit = spline_model[i](oof_preds[i])\n    spline_fit = np.clip(spline_fit,0.025,0.975)\n    spline_fit[(tourney_data.T1_seed==1) & (tourney_data.T2_seed==16) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==2) & (tourney_data.T2_seed==15) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==3) & (tourney_data.T2_seed==14) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==4) & (tourney_data.T2_seed==13) & (tourney_data.T1_Score > tourney_data.T2_Score)] = 1.0\n    spline_fit[(tourney_data.T1_seed==16) & (tourney_data.T2_seed==1) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==15) & (tourney_data.T2_seed==2) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==14) & (tourney_data.T2_seed==3) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    spline_fit[(tourney_data.T1_seed==13) & (tourney_data.T2_seed==4) & (tourney_data.T1_Score < tourney_data.T2_Score)] = 0.0\n    \n    val_cv.append(pd.DataFrame({\"y\":np.where(y>0,1,0), \"pred\":spline_fit, \"season\":tourney_data.Season}))\n    print(f\"adjusted logloss of cvsplit {i}: {log_loss(np.where(y>0,1,0),spline_fit)}\") \n    \nval_cv = pd.concat(val_cv)\nval_cv.groupby('season').apply(lambda x: log_loss(x.y, x.pred))","97cd4881":"data_dir = '..\/input\/'\nsub = pd.read_csv(data_dir + 'WSampleSubmissionStage2.csv')\nsub.info()","45ec3539":"sub[\"Season\"] = 2019\nsub[\"T1_TeamID\"] = sub[\"ID\"].apply(lambda x: x[5:9]).astype(int)\nsub[\"T2_TeamID\"] = sub[\"ID\"].apply(lambda x: x[10:14]).astype(int)\nsub.info()","149e36a1":"sub = pd.merge(sub, season_statistics_T1, on = ['Season', 'T1_TeamID'])\nsub = pd.merge(sub, season_statistics_T2, on = ['Season', 'T2_TeamID'])\nsub.info()","2996bc50":"sub = pd.merge(sub, glm_quality_T1, on = ['Season', 'T1_TeamID'])\nsub = pd.merge(sub, glm_quality_T2, on = ['Season', 'T2_TeamID'])\nsub.info()","3422f118":"sub = pd.merge(sub, seeds_T1, on = ['Season', 'T1_TeamID'])\nsub = pd.merge(sub, seeds_T2, on = ['Season', 'T2_TeamID'])\nsub = pd.merge(sub, last14days_stats_T1, on = ['Season', 'T1_TeamID'])\nsub = pd.merge(sub, last14days_stats_T2, on = ['Season', 'T2_TeamID'])\nsub[\"Seed_diff\"] = sub[\"T1_seed\"] - sub[\"T2_seed\"]\nsub.info()","7126b104":"Xsub = sub[features].values\ndtest = xgb.DMatrix(Xsub)","b2dc925b":"sub_models = []\nfor i in range(repeat_cv):\n    print(f\"Fold repeater {i}\")\n    sub_models.append(\n        xgb.train(\n          params = param,\n          dtrain = dtrain,\n          num_boost_round = int(iteration_counts[i] * 1.05),\n          verbose_eval = 50\n        )\n    )","7e87f26f":"sub_preds = []\nfor i in range(repeat_cv):\n    sub_preds.append(np.clip(spline_model[i](np.clip(sub_models[i].predict(dtest),-30,30)),0.025,0.975))\n    \nsub[\"Pred\"] = pd.DataFrame(sub_preds).mean(axis=0)\n\nsub.loc[(sub.T1_seed==1) & (sub.T2_seed==16), 'Pred'] = 1.0\nsub.loc[(sub.T1_seed==2) & (sub.T2_seed==15), 'Pred'] = 1.0\nsub.loc[(sub.T1_seed==3) & (sub.T2_seed==14), 'Pred'] = 1.0\nsub.loc[(sub.T1_seed==4) & (sub.T2_seed==13), 'Pred'] = 1.0\nsub.loc[(sub.T1_seed==16) & (sub.T2_seed==1), 'Pred'] = 0.0\nsub.loc[(sub.T1_seed==15) & (sub.T2_seed==2), 'Pred'] = 0.0\nsub.loc[(sub.T1_seed==14) & (sub.T2_seed==3), 'Pred'] = 0.0\nsub.loc[(sub.T1_seed==13) & (sub.T2_seed==4), 'Pred'] = 0.0\n\nsub[['ID','Pred']].to_csv(\"submission.csv\", index = None)","eafe18bc":"#tourney_results2018 = pd.read_csv('..\/input\/NCAA_2018_Solution_Womens.csv')\n#tourney_results2018 = tourney_results2018[tourney_results2018.Pred!=-1].reset_index(drop=True)\n#tourney_results2018.columns = ['ID', 'label']\n#tourney_results2018 = pd.merge(tourney_results2018, sub, on = 'ID')\n#log_loss(tourney_results2018.label, tourney_results2018.Pred)","c2e671be":"# Time to build some models!","05e0644e":"# Discover and visualize the data","8636d6cc":"# Prepare the data","a06fde7f":"# Feature engineering","323d52da":"# Get the data","bcb3e5a1":"# Submission time!","0800914d":"### Hard Code for 15th and 16th seed"}}