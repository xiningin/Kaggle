{"cell_type":{"de41ad80":"code","30c58cad":"code","9c21af82":"code","f0ef1956":"code","a29d9c68":"code","ab99920c":"code","0dce213e":"code","922e5e8f":"code","ea366473":"code","a44beecc":"code","9de07c7f":"code","0cb7b4d4":"code","1172dad1":"code","c17a202c":"markdown","30b21f46":"markdown","33fc947d":"markdown","4a61e5f6":"markdown","f289e659":"markdown","f0ed36a6":"markdown","2630cbaf":"markdown","96f40291":"markdown","b2b1d3ef":"markdown","5f440521":"markdown","a40b0042":"markdown","a3ffb12d":"markdown"},"source":{"de41ad80":"# Import the needed packages\nimport numpy as np  # numerical processing\nimport pandas as pd # dataframes\nimport random       # random number generation   \n\nfrom sklearn.feature_extraction import text       #Text processing functions from Sciki-learn\nfrom sklearn.feature_extraction.text import CountVectorizer    #For numeric representation of words","30c58cad":"data = [('I am very happy', 'pos'),\n        ('I am satisfied with this.', 'pos'),\n        ('This is the best', 'pos'),\n        ('This is extremely Good!', 'pos'),\n        \n        ('I am extremely sad', 'neg'),\n        ('This is very bad', 'neg'),\n        ('It is BAD!', 'neg'),\n        ('This is extremely bad', 'neg')]\n\n#Make it into a DataFrame for easier processing later on\ndf = pd.DataFrame(data, columns=['text','label']) #make dataframe from dictionary\ndisplay(df.head(10)) #display first 10 rows to see it everything is ok\ndf.to_csv(\"train_data.csv\", index=False) #save to csv","9c21af82":"#Converting words to word ids using Scikit-learn CountVectorizer\ncount_vect = CountVectorizer() #create the CountVectorizer object\nprint(\"Sentences:\", df['text'].values)\ncount_vect.fit(df['text'].values) #fit into our dataset\n\n#Get a list of unique words found in the document (vocabulary)\nword_list = count_vect.get_feature_names()\nprint(\"\\nUnique words:\", word_list)\n\n#Let's look up the id of a particular word: 'happy'\nprint(\"\\nId assigned to 'happy':\", count_vect.vocabulary_.get('happy'))\n#Let's look up what word has been assigned id of 3:\nprint(\"Word under id=3:\", word_list[0])","f0ef1956":"print(\"List all the words and their ids\")\n#Check all the words that were extracted and their ids:\nfor word_id, word in enumerate(word_list):\n    print(str(word_id)+\" -> \"+str(word_list[word_id])) #Show ID and word\n    \n#Transform our dataset from words to ids\nprint(\"\\nSentence:\", df['text'].values) #just show the list of our sentences for reference\n\nword_counts = count_vect.transform(df['text'].values) #Transform the text into numbers (bag of words features)\nprint(\"\\nSize (sentenes x words):\", word_counts.shape) #Display the size of our array (list of lists)\nprint(\"Representation of our sentences as an array of ids:\")\n#Check how text sentences from our data were replaced by numbers\nprint(word_counts.toarray()) #represent the ","a29d9c68":"## Let's try this on a sentence that is completely and not present in our training data\nnew_sentence = \"Such a very good good good product!\"\nbow = count_vect.transform([new_sentence]) #transform the text to features (bag of words)\nprint(\"New, unseen sentence: \"+str(new_sentence)+\"\\nas numbers:\"+str(bow.toarray()))\n\n#Let's loop through individual extracted words and their counts\nfor word_id, count in enumerate(bow.toarray()[0]):\n    print(\"[\"+str(word_id)+\"] \"+str(word_list[word_id])+\" -> \"+str(count))","ab99920c":"#Import classifiers from Scikit-learn: \nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.svm import SVC\n\n#Create the machine learning classifier object\nclf = LogisticRegression() #SVC() #DecisionTreeClassifier() #LogisticRegression()\n\nX = word_counts #data features (word counts)\ny = df['label'].values #correct labels\nprint('X:', X.toarray())\nprint('y:', y)\n\n#Train the classifer on our data\n#First argument is an array (list of lists) representing words (ids) present in each sentence\n#Second argument are the names of our classes ('pos' and 'neg' in this case)\nclf.fit(X, y) #training on X and y","0dce213e":"#Import accuracy_score function that calculates classification accuracy\nfrom sklearn.metrics import accuracy_score\n\n#predict labels for all the sentences\npred_label = clf.predict(X) #predicting based on X\nprint(\"Predicted labels:\", pred_label)\n\n#Calculate accuracy on our training data, parameters: correct labels, predicted labels\nprint(\"Mean accuracy on training data:\", accuracy_score(y, pred_label))\n\n#Let's put true classes and predictions next to one another in a dataframe\ndisplay(pd.DataFrame({\"sentence\":df['text'].values, \n                      \"true label\":df['label'].values, \n                      \"predicted\": pred_label}))","922e5e8f":"#Let's transform the sentence into numbers\nsentences = ['I feel very much excepionally satisfied right now', 'I feel very bad!!!']\nfor s in sentences:\n    bow = count_vect.transform([s]) #turn text into word id representation - bag-of-words\n    #print(bow.toarray())\n    print(\"'%s': %s\" % (s, clf.predict(bow)) )\n\n#Let's loop through individual extracted words and their counts\nsentence = \"I feel very sad!!!\"\nbow = count_vect.transform([sentence]) #turn text into word id representation - bag-of-words\nprint(f\"\\nSentence \\\"{sentence}\\\" representation:\")\nfor word_id, count in enumerate(bow.toarray()[0]):\n    print(\"[\"+str(word_id)+\"] \"+str(word_list[word_id])+\" -> \"+str(count))","ea366473":"sentences = [\"This is exceptionally bad!\", \"This is exceptionally good!\", \n             \"This is very positive!\", \"I don't know\"]\nprint(\"--- Problem 1: Previously unseen words ---\")\nfor s in sentences:\n    print(\"'%s': %s\" % (s, clf.predict( count_vect.transform([s]))) )\n    #bow = count_vect.transform([s])\n    #print(bow.toarray())","a44beecc":"display(df)","9de07c7f":"sentences = ['This is extremely good', 'It is extremely good']\nfor s in sentences:\n    print(\"'%s': %s\" % (s, clf.predict( count_vect.transform([s]))) )","0cb7b4d4":"sentences = ['This is exmkljtremely good', 'This is extremely goood']\nfor s in sentences:\n    print(\"'%s': %s\" % (s, clf.predict( count_vect.transform([s]))) )\n","1172dad1":"sentences = [\"This is good!\", \"This is not good!\", 'I am happy', 'I am not happy', \"This is bad!\", \"This is not that bad!\"]\nfor s in sentences:\n    print(\"'%s': %s\" % (s, clf.predict( count_vect.transform([s]))) ) \n    #bow = count_vect.transform([s])\n    #print(bow.toarray())","c17a202c":"### Problem 3: Typos, word variations\n* good vs the best\n* good vs goood","30b21f46":"### Problem 1: Previously unseen words\nUnseen words (so called out of vocabulary words) are a problem when they are meaningful for the classification","33fc947d":"# Step 2: Turn words into numbers (Bag-of-Words)\nMachine Learning algorithms can not directly process the text documents in their original form. They expect numbers rather than the raw text. We need to convert text to numbers in some way. One simple way to do it is to assign a number to each word and reuse this number if the word is seen again. In this case we will be able to see if some words are mor common in some document types than others.\n* Count Vectorizer documentation: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.feature_extraction.text.CountVectorizer.html\n* Bag of Words text representation: https:\/\/machinelearningmastery.com\/gentle-introduction-bag-words-model\/","4a61e5f6":"### Bag of Words representation of new text","f289e659":"# Step 4: Evaluate our classifier\n* Accuracy score: https:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.metrics.accuracy_score.html","f0ed36a6":"### Problem 4: Word sequences (negations, phrases)","2630cbaf":"## Text Classification - part 1\n* Scikit-learn: https:\/\/scikit-learn.org\/stable\/\n* Step 1: Preparing some simple data\n* Step 2: Turning words into numbers (suitable for classification)\n* Step 3: Training a text classifier\n* Step 4: Classifying new text","96f40291":"## Breaking the ML!","b2b1d3ef":"# Step 3: Train a text classifier\nWe can use the numberic representation of the sentences to try to learn a machine learning model to differentiate between different types of documents. This is called classification, we want to assign each document into a class. In our case we have two classes: 'pos', 'neg' <br\/>\n\nAbout classifiers:\n* https:\/\/stackabuse.com\/overview-of-classification-methods-in-python-with-scikit-learn\/\n* https:\/\/scikit-learn.org\/stable\/auto_examples\/classification\/plot_classifier_comparison.html\n* https:\/\/scikit-learn.org\/stable\/supervised_learning.html","5f440521":"# Step 1: Prepare some simple data","a40b0042":"### Problem 2: Unimportant words influencing the prediction, e.g., \"it\", \"is\", \"extremely\"","a3ffb12d":"## Classifying new text"}}