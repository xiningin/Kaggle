{"cell_type":{"34d1c0b2":"code","efc073c2":"code","b2424386":"code","72ad172b":"code","cc11d472":"code","c84fd425":"code","3de6c1fc":"code","5870878a":"code","ff060027":"code","8ce839bb":"code","44b09b74":"code","eb994d70":"code","157e6e2e":"code","a31fd73e":"code","64d021ee":"code","89082c5c":"code","b7a2f93c":"code","45c22ff7":"code","c58b48ec":"code","2e39712a":"code","227f5b38":"code","6f9eed89":"code","039aa91b":"code","4497b89d":"code","14b3af8e":"code","515f8d4b":"code","deed0d14":"code","8fd78aed":"code","d3b715d6":"code","786b5d00":"code","26823dd4":"code","8bc0dca9":"code","3442d53c":"code","2e5f06a1":"code","3e5cf16e":"code","21a95bbc":"code","9428ce22":"code","12b124f6":"code","bae397a6":"code","ef002d2a":"code","23fd8717":"code","edbe05e8":"code","b752daa6":"code","852e4acd":"code","7aa0a683":"code","07b41193":"code","709f163e":"code","75223b93":"code","b8667642":"code","5c697905":"code","0d77d6f6":"code","1b133363":"code","1f15aaf8":"code","1091f3db":"code","838efa5e":"code","e48b7d65":"code","c062d672":"code","06ee833b":"code","3d828a02":"code","d7ff46db":"code","df5f4a82":"code","9ebb1ff3":"code","e1e46d19":"code","29af127e":"code","b26a4934":"code","978c817a":"code","1f635446":"code","56454f1d":"code","dc4489bc":"code","642738b2":"markdown","dba804ec":"markdown","287acd4f":"markdown","9c64b4e2":"markdown","190f8e88":"markdown","847b28a3":"markdown","9f9ce2c0":"markdown","b5ff23e2":"markdown","f43122d2":"markdown","49b1826f":"markdown","a8269bc9":"markdown","53121669":"markdown","e87cc399":"markdown","6a061803":"markdown","1222e7f2":"markdown","e5e6b1ff":"markdown"},"source":{"34d1c0b2":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline","efc073c2":"data = pd.read_csv('..\/input\/train.csv')","b2424386":"data.head()","72ad172b":"data.info()","cc11d472":"data = data.set_index(['PassengerId'])#\u5c06\u65c5\u5ba2ID\u8bbe\u7f6e\u4e3a\u7d22\u5f15\ndata, labels = data.drop(['Survived','Name', 'Ticket', 'Cabin'], axis=1), data['Survived']#\u5206\u79bb\u6570\u636e\u96c6\u4e3a\u6570\u636e\u548c\u6807\u7b7e","c84fd425":"data.describe()# \u663e\u793a\u6570\u503c\u578b\u6570\u636e\u7684\u6458\u8981\u4fe1\u606f","3de6c1fc":"data.head()","5870878a":"data[['Age', 'SibSp', 'Parch', 'Fare']].hist(figsize=(20, 12), bins=20, align='mid')#\u663e\u793a\u6570\u636e\u7684\u76f4\u65b9\u56fe","ff060027":"data[['Age', 'SibSp', 'Parch', 'Fare']].corr()#\u67e5\u770b\u5404\u4e2a\u7279\u5f81\u7684\u76f8\u5173\u5173\u7cfb","8ce839bb":"cor = data[['Age', 'SibSp', 'Parch', 'Fare']].corr()#\u7ed8\u5236\u76f8\u5173\u6027\u77e9\u9635\nplt.matshow(cor)","44b09b74":"# \u5206\u5272\u6570\u636e\u96c6\nfrom sklearn.model_selection import train_test_split\n# x_train, x_test, y_train, y_test = train_test_split(data, labels)\nx_train = data\ny_train = labels","eb994d70":"from sklearn.base import BaseEstimator, TransformerMixin\n\n#\u5217\u9009\u62e9\u5668\nclass DataFrameSelector(BaseEstimator, TransformerMixin):\n    def __init__(self, attributes_name):\n        self.attributes_name = attributes_name\n    def fit(self, X, y=None):\n        return self\n    def transform(self, X, y=None):\n        return X[self.attributes_name]\n#\u5b57\u7b26\u4e32\u7c7b\u578b\u4f7f\u7528\u6700\u591a\u7684\u7c7b\u578b\u586b\u5199    \nclass StringImputer(BaseEstimator, TransformerMixin):\n    def fit(self, X, y=None):\n        self.most_frequent_ = pd.Series([X[c].value_counts().index[0] for c in X],\n                                       index=X.columns)\n        return self\n    def transform(self, X, y=None):\n        return X.fillna(self.most_frequent_)","157e6e2e":"# \u521b\u5efa\u6570\u636e\u5904\u7406\u7ba1\u9053\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.pipeline import FeatureUnion\n# \u5bf9\u7c7b\u522b\u578b\u6570\u636e\u8fdb\u884cone-hot\u7f16\u7801\ncat_pipeline = Pipeline([\n    ('selector', DataFrameSelector(['Sex', 'Embarked', 'Pclass'])),#\u9009\u62e9\u7c7b\u522b\u6570\u636e\n    ('impute', StringImputer()),#\u4f7f\u7528\u6700\u591a\u7684\u7c7b\u522b\u586b\u5145\n    ('binary', OneHotEncoder(sparse=False))#One-Hot\u7f16\u7801\n])\n\n# \u5bf9\u6570\u503c\u578b\u6570\u636e\u8fdb\u884c\u5904\u7406\nnum_pipeline = Pipeline([\n    ('selector', DataFrameSelector(['Age', 'SibSp', 'Parch', 'Fare'])),#\u9009\u62e9\u6570\u503c\u578b\u6570\u636e\n    ('impute', SimpleImputer(strategy='median')),#\u4ee5\u4e2d\u4f4d\u6570\u586b\u5145\u7a7a\u503c\n    ('std',  StandardScaler())#\u5bf9\u6570\u503c\u8fdb\u884c\u6807\u51c6\u5316\n])\n\n# # # \u9009\u53d6\u5176\u5b83\u6570\u636e\n# other_pipeline = Pipeline([\n#     ('selector', DataFrameSelector(['Pclass', 'SibSp', 'Parch']))\n# ])\n\n# \u4f7f\u7528FeatureUnion\u8054\u5408\u5404\u4e2aPipeline\u83b7\u53d6\u6570\u636e\nfull_pipeline = FeatureUnion(transformer_list=[\n    ('cat_pipeline', cat_pipeline),\n    ('num_pipeline', num_pipeline),\n#     ('other_pipeline', other_pipeline)\n])\n\nx_train = full_pipeline.fit_transform(x_train)","a31fd73e":"from sklearn.linear_model import SGDClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_predict\nfrom sklearn.metrics import precision_score, recall_score, precision_recall_curve\nfrom sklearn.metrics import roc_curve, roc_auc_score\nfrom sklearn.metrics import f1_score\nfrom sklearn.metrics import accuracy_score\ndef plot_recall_predict_curve(precisions, recalls, threshold, xlim=[-5,5]):\n    #\u753b\u51fa\u9884\u6d4b\u548c\u53ec\u56de\u66f2\u7ebf\n    plt.plot(threshold, precisions[:-1], 'b--', label='Precision')\n    plt.plot(threshold, recalls[:-1], 'g-', label='Recall')\n    plt.xlabel('Threshold')\n    plt.legend(loc='center right')\n    plt.ylim([0, 1])\n    plt.xlim(xlim)\n    \ndef plot_roc_curve(fpr, tpr, label=None):\n    #\u753b\u51faroc\u66f2\u7ebf\n    plt.plot(fpr, tpr, linewidth=2, label=label)\n    plt.plot([0, 1], [0, 1], 'k--')\n    plt.axis([0, 1, 0, 1])\n    ","64d021ee":"from scipy.stats import reciprocal\nfrom sklearn.model_selection import RandomizedSearchCV\nsgd_clf = SGDClassifier(max_iter=500, tol=1e-3, loss='log',\n                        random_state=42)\nparam_sgd = {\n    'alpha': reciprocal(0.0001, 0.1),\n    'epsilon': reciprocal(0.001, 0.1),\n    'penalty': ['l1', 'l2']\n}\nsgd_grid_search_cv = RandomizedSearchCV(sgd_clf, param_distributions=param_sgd, verbose=True,\n                                       n_jobs=-1, cv=3, random_state=42)\nsgd_grid_search_cv.fit(x_train, y_train)","89082c5c":"sgd_clf = sgd_grid_search_cv.best_estimator_\nsgd_pred = cross_val_predict(sgd_clf, x_train, y_train, cv=7)\nsgd_acc = accuracy_score(y_train, sgd_pred)#\u51c6\u786e\u7387","b7a2f93c":"sgd_pre = precision_score(y_train, sgd_pred)#\u9884\u6d4b","45c22ff7":"sgd_recall =recall_score(y_train, sgd_pred)#\u53ec\u56de","c58b48ec":"sgd_f1 = f1_score(y_train, sgd_pred)#f1\u5206\u6570","2e39712a":"sgd_pred = cross_val_predict(sgd_clf, x_train, y_train, cv=7, method='decision_function')","227f5b38":"precisions, recalls, threshold = precision_recall_curve(y_train, sgd_pred)\nplot_recall_predict_curve(precisions, recalls, threshold)","6f9eed89":"fpr, tpr, threshold = roc_curve(y_train, sgd_pred)\nplot_roc_curve(fpr, tpr)\nsgd_auc = roc_auc_score(y_train, sgd_pred)","039aa91b":"sgd_scores = [sgd_acc, sgd_pre, sgd_recall, sgd_f1, sgd_auc]","4497b89d":"from sklearn.model_selection import GridSearchCV\nrf_clf = RandomForestClassifier(random_state=42)\nparam_grid = [\n    {'n_estimators': [i for i in range(100, 500)]},\n    {'max_depth': [i for i in range(2, 10)]}\n]\ngrid_cv = GridSearchCV(rf_clf, param_grid, cv=3, n_jobs=-1, verbose=True)#\u67e5\u627e\u6700\u597d\u7684\u68ee\u6797\ngrid_cv.fit(x_train, y_train)","14b3af8e":"grid_cv.best_params_","515f8d4b":"rf_pred = cross_val_predict(grid_cv.best_estimator_, x_train, y_train, cv=3)\nrf_acc = accuracy_score(y_train, rf_pred)#\u51c6\u786e\u7387","deed0d14":"rf_pre = precision_score(y_train, rf_pred)#\u9884\u6d4b","8fd78aed":"rf_recall = recall_score(y_train, rf_pred)#\u53ec\u56de","d3b715d6":"rf_f1 = f1_score(y_train, rf_pred)","786b5d00":"rf_pred = cross_val_predict(grid_cv.best_estimator_, x_train, y_train, \n                            cv=3, method='predict_proba')\nrf_pred = rf_pred[:, 1]","26823dd4":"precisions, recalls, threshold = precision_recall_curve(y_train, rf_pred)\nplot_recall_predict_curve(precisions, recalls, threshold, [0,1])","8bc0dca9":"fpr, tpr, threshold = roc_curve(y_train, rf_pred)\nplot_roc_curve(fpr, tpr)\nrf_auc = roc_auc_score(y_train, rf_pred)","3442d53c":"rf_scores = [rf_acc, rf_pre, rf_recall, rf_f1, rf_auc]","2e5f06a1":"from sklearn.model_selection import learning_curve\ntrain_size, train_scores, test_scores = learning_curve(grid_cv.best_estimator_, x_train, y_train, \n                                                       n_jobs=-1, verbose=True, cv=5, random_state=42)","3e5cf16e":"train_scores_mean = np.mean(train_scores, axis=1)\ntrain_scores_std = np.std(train_scores, axis=1)\ntest_scores_mean = np.mean(test_scores, axis=1)\ntest_scores_std = np.std(test_scores, axis=1)\nplt.grid()\n\nplt.fill_between(train_size, train_scores_mean - train_scores_std,\n                train_scores_mean + train_scores_std, alpha=0.1,\n                color='r')\nplt.fill_between(train_size, test_scores_mean - test_scores_std,\n                test_scores_mean + test_scores_std, alpha=0.1,\n                color='b')\nplt.plot(train_size, train_scores_mean, 'r-', label='train')\nplt.plot(train_size, test_scores_mean, 'b--',label='val')\nplt.legend(loc='best')","21a95bbc":"from sklearn.ensemble import GradientBoostingClassifier\nparam_grid = {\n    'n_estimators': [100, 200, 300, 400, 500],\n    'max_depth': np.arange(2, 10)\n}\ngrid_gbrt_cv = GridSearchCV(GradientBoostingClassifier(random_state=42), param_grid=param_grid, \n                            cv=3, verbose=True, n_jobs=-1)\ngrid_gbrt_cv.fit(x_train, y_train)","9428ce22":"grid_gbrt_cv.best_score_","12b124f6":"gbrt_pred = cross_val_predict(grid_gbrt_cv.best_estimator_, x_train, y_train, \n                              cv=5)\ngbrt_acc = accuracy_score(y_train, gbrt_pred)","bae397a6":"gbrt_pre = precision_score(y_train, gbrt_pred)","ef002d2a":"gbrt_recall = recall_score(y_train, gbrt_pred)","23fd8717":"gbrt_f1 = f1_score(y_train, gbrt_pred)","edbe05e8":"fpr, tpr, threshold = roc_curve(y_train, gbrt_pred)\nplot_roc_curve(fpr, tpr)\ngbrt_auc = roc_auc_score(y_train, gbrt_pred)","b752daa6":"gbrt_scores = [gbrt_acc, gbrt_pre, gbrt_recall, gbrt_f1, gbrt_auc]","852e4acd":"from sklearn.svm import SVC\nfrom sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import reciprocal, uniform\n\nsvm_param_grd = {\n    'gamma': reciprocal(0.001, 0.1),\n    'C': uniform(1, 10),\n    'kernel': ['rbf', 'poly']\n}\nsvm_rnd_search_cv = RandomizedSearchCV(SVC(probability=True, ), param_distributions=svm_param_grd, \n                                       n_jobs=-1, n_iter=10, cv=3, random_state=42)\nsvm_rnd_search_cv.fit(x_train, y_train)","7aa0a683":"svm_pred = cross_val_predict(svm_rnd_search_cv.best_estimator_, x_train, y_train, \n                             cv=5)\nsvm_acc = accuracy_score(y_train, svm_pred)","07b41193":"svm_pre = precision_score( y_train, svm_pred)","709f163e":"svm_recall = recall_score(y_train, svm_pred)","75223b93":"svm_f1 = f1_score(y_train, svm_pred)","b8667642":"fpr, tpr, threshold = roc_curve(y_train, svm_pred)\nplot_roc_curve(fpr, tpr)\nsvm_auc = roc_auc_score(y_train, svm_pred)","5c697905":"svm_scores = [svm_acc, svm_pre, svm_recall, svm_f1, svm_auc]","0d77d6f6":"from sklearn.naive_bayes import GaussianNB\nfrom sklearn.model_selection import GridSearchCV\nbayes_param = {\n    'var_smoothing': np.arange(0.0001, 0.9, 0.1)\n}\nbayes_grid_cv = GridSearchCV(GaussianNB(), bayes_param, cv=3,\n                            verbose=True, n_jobs=-1)\nbayes_grid_cv.fit(x_train, y_train)\nbayes_pred = cross_val_predict(bayes_grid_cv.best_estimator_, x_train, y_train, cv=3, verbose=True)","1b133363":"bayes_acc = accuracy_score(y_train, bayes_pred)\nbayes_pre = precision_score(y_train, bayes_pred)\nbayes_recall = recall_score(y_train, bayes_pred)\nbayes_f1 = f1_score(y_train, bayes_pred)\nbayes_auc = roc_auc_score(y_train, bayes_pred)\nbayes_scores = [bayes_acc, bayes_pre, bayes_recall, bayes_f1, bayes_auc]","1f15aaf8":"fpr, tpr, threshold = roc_curve(y_train, bayes_pred)\nplot_roc_curve(fpr, tpr)","1091f3db":"from sklearn.neighbors import KNeighborsClassifier\nparam_knn = {\n    'n_neighbors': np.arange(1, 10),\n    'p': [1, 2],\n    'weights': ['distance', 'uniform']\n}\nknn_grid_cv = GridSearchCV(KNeighborsClassifier(), param_grid=param_knn, n_jobs=-1, \n                           verbose=True, cv = 3)\nknn_grid_cv.fit(x_train, y_train)","838efa5e":"knn_clf = knn_grid_cv.best_estimator_\nknn_pred = cross_val_predict(knn_clf, x_train, y_train, cv=3)","e48b7d65":"knn_acc = accuracy_score(y_train, knn_pred)\nknn_pre = precision_score(y_train, knn_pred)\nknn_recall = recall_score(y_train, knn_pred)\nknn_f1 = f1_score(y_train, knn_pred)\nknn_auc = roc_auc_score(y_train, knn_pred)\n\nknn_scores = [knn_acc, knn_pre, knn_recall, knn_f1, knn_auc]","c062d672":"fpr, tpr, threshold = roc_curve(y_train, knn_pred)\nplot_roc_curve(fpr, tpr)","06ee833b":"from sklearn.ensemble import VotingClassifier\nvoting_clf = VotingClassifier(\n    estimators=[('sgd_clf', sgd_clf), \n                ('rf_clf', grid_cv.best_estimator_), \n                ('gbrt_clf', grid_gbrt_cv.best_estimator_), \n                ('bayes_clf', bayes_grid_cv.best_estimator_),\n                ('knn_clf', knn_clf),\n                ('svm_clf', svm_rnd_search_cv.best_estimator_)],\n    voting='soft',\n)\n\n\nvoting_pred = cross_val_predict(voting_clf, x_train, y_train, cv=5)\nvoting_acc = accuracy_score(y_train, voting_pred)","3d828a02":"voting_pre = precision_score(y_train, voting_pred)","d7ff46db":"voting_recall = recall_score(y_train, voting_pred,)","df5f4a82":"voting_f1 = f1_score(y_train, voting_pred)","9ebb1ff3":"fpr, tpr, threshold = roc_curve(y_train, voting_pred)\nplot_roc_curve(fpr, tpr)\nvoting_auc = roc_auc_score(y_train, voting_pred)","e1e46d19":"voting_scores = [voting_acc, voting_pre, voting_recall, voting_f1, voting_auc]","29af127e":"fpr_sgd, tpr_sgd, threshold_sgd = roc_curve(y_train, sgd_pred)\nfpr_rf, tpr_rf, threshold_rf = roc_curve(y_train, rf_pred)\nfpr_gbrt, tpr_gbrt, threshold_gbrt = roc_curve(y_train, gbrt_pred)\nfpr_svm, tpr_svm, threshold_svm = roc_curve(y_train, svm_pred)\nfpr_voting, tpr_voting, threshold_voting = roc_curve(y_train, voting_pred)\nfpr_bayes, tpr_bayes, threshold_bayes = roc_curve(y_train, bayes_pred)\nfpr_knn, tpr_knn, threshold_knn = roc_curve(y_train, knn_pred)","b26a4934":"plt.plot(fpr_sgd, tpr_sgd, 'r:', label=('SGD:'+str(sgd_auc)))\nplt.plot(fpr_gbrt, tpr_gbrt, 'g--', label=('GBRT:'+str(gbrt_auc)))\nplt.plot(fpr_svm, tpr_svm, 'p-', label=('SVM:'+str(svm_auc)))\nplt.plot(fpr_voting, tpr_voting, 'y-', label=('VOTING:'+str(voting_auc)))\nplt.plot(fpr_bayes, tpr_bayes, color='purple', marker='*', label=('bayes:'+str(bayes_auc)))\nplt.plot(fpr_knn, tpr_knn, color='pink', marker='o', label=('knn:'+str(knn_auc)))\nplot_roc_curve(fpr_rf, tpr_rf, label=('RandomForest:'+str(rf_auc)))\nplt.legend(loc='lower right')","978c817a":"xticks = ['acc', 'pre', 'recall', 'f1', 'auc']\nbar_width = 0.10\nn = np.arange(5)\ni=0\nplt.figure(figsize=(24, 12))\nfor  score, color, label in zip([sgd_scores, rf_scores, gbrt_scores, svm_scores, voting_scores, bayes_scores, knn_scores],\n                  ['r', 'b', 'y', 'black', 'g', 'purple', 'pink'],\n                  ['sgd_scores', 'rf_scores', 'gbrt_scores', 'svm_scores', 'voting_scores', 'bayes_scores', 'knn_scores']):\n    plt.bar(n+i*bar_width, score, bar_width , color=color, label=label, alpha=0.6)\n    i += 1\nplt.ylim([0,1])\nplt.yticks(np.arange(0,1, 0.05))\nplt.xticks(n+2*bar_width,xticks)\nplt.legend(loc='best')","1f635446":"acc = [sgd_acc, rf_acc, gbrt_acc, svm_acc, voting_acc, bayes_acc, knn_acc]\npre = [sgd_pre, rf_pre, gbrt_pre, svm_pre, voting_pre, bayes_pre, knn_pre]\nrecall = [sgd_recall, rf_recall, gbrt_recall, svm_recall, voting_recall, bayes_recall, knn_recall]\nf1 = [sgd_f1, rf_f1, gbrt_f1, svm_f1, voting_f1, bayes_f1, knn_f1]\nauc = [sgd_auc, rf_auc, gbrt_auc, svm_auc, voting_auc, bayes_auc, knn_auc]\nxticks = ['sgd', 'rf', 'gbrt', 'svm', 'voting', 'bayes', 'knn']\nbar_width = 0.15\nn = np.arange(7)\ni=0\nplt.figure(figsize=(24, 12))\nfor  score, color, label in zip([acc, pre, recall, f1, auc],\n                  ['r', 'b', 'y', 'black', 'g'],\n                  ['acc', 'pre', 'recall', 'f1', 'auc']):\n    plt.bar(n+i*bar_width, score, bar_width , color=color, label=label, alpha=0.6)\n    plt.axhline(y=np.mean(score), color=color, ls='--', alpha=0.6)\n    i += 1\nplt.yticks(np.arange(0,1, 0.05))\nplt.xticks(n+2*bar_width,xticks)\nplt.legend(loc='best')","56454f1d":"test = pd.read_csv('..\/input\/test.csv')\nindex = np.array(test[['PassengerId']])[:,0]\ntest = test.set_index('PassengerId')\ntest = full_pipeline.transform(test)\nindex.shape","dc4489bc":"svm_rnd_search_cv.best_estimator_.fit(x_train, y_train)\npred = svm_rnd_search_cv.best_estimator_.predict(test)\npred_df = pd.DataFrame({'PassengerId':index,\n                       'Survived':pred})","642738b2":"## \u5bf9\u6bd4\u6240\u6709\u6a21\u578b","dba804ec":"## \u4f7f\u7528knn\u7b97\u6cd5","287acd4f":"# \u9884\u6d4b","9c64b4e2":"## \u6570\u636e\u6e05\u6d17","190f8e88":"## \u4f7f\u7528\u968f\u673a\u68ee\u6797","847b28a3":"\u76f8\u5173\u6027\u77e9\u9635\u4e2d\u8d8a\u4eae\u8868\u793a\u6b63\u76f8\u5173\u6027\u8d8a\u9ad8\uff0c\u8d8a\u6697\u8868\u793a\u8d1f\u76f8\u5173\u6027\u8d8a\u9ad8\uff1b\u4ece\u77e9\u9635\u4e2d\u53ef\u4ee5\u770b\u51fa\u7968\u7684\u7b49\u7ea7`Age`\u548c\u8d39\u7528`SibSp`\u5b58\u5728\u8f83\u4e3a\u660e\u663e\u7684\u6b63\u76f8\u5173\u6027","9f9ce2c0":"\u4ece\u76f4\u65b9\u56fe\u7684\u5206\u5e03\u53ef\u4ee5\u770b\u51fa\u65c5\u5ba2\u7684\u5e74\u9f84\u4e3b\u8981\u5206\u5e03\u662f`18~35`\u5c81\u4e4b\u95f4\uff0c\u800c\u65c5\u8d39\u5927\u591a\u4f4e\u4e8e`50`\uff0c\u7236\u6bcd\u5b69\u5b50\u548c\u5144\u5f1f\u914d\u5076\u7684\u5206\u5e03\u770b\u51fa\u5927\u591a\u6570\u4eba\u90fd\u662f\u5355\u4eba\u51fa\u6e38","b5ff23e2":"### \u663e\u793a\u6570\u636e\u7684\u6458\u8981\u4fe1\u606f\n\n\u52a0\u8f7d\u6570\u636e\u540e\uff0c\u5c06\u6570\u636e\u5206\u6210\u6570\u636e\u96c6\u548c\u6807\u7b7e\u96c6\uff0c\u5e76\u5c55\u793a\u6570\u636e\u7684\u7ec4\u6210\u4e0e\u6458\u8981\u4fe1\u606f","f43122d2":"## \u4f7f\u7528\u9ad8\u65af\u8d1d\u53f6\u65af\u5904\u7406","49b1826f":"# \u51c6\u5907\u5de5\u4f5c\n\u5148\u5bfc\u5165\u76f8\u5173\u7684\u6a21\u5757\uff0c\u5e76\u5c06\u6570\u636e\u52a0\u8f7d\u8fdb\u5185\u5b58\uff0c\u4ee5\u4fbf\u540e\u9762\u8fdb\u884c\u6570\u636e\u5904\u7406","a8269bc9":"### \u5206\u6790\u6570\u636e\n\n\u901a\u8fc7\u7edf\u8ba1\u53d1\u73b0`Cabin`\u5b57\u6bb5\u7f3a\u5931\u4e86\u7edd\u5927\u90e8\u4efd\uff0c\u800c\u4e14\u7531\u4e8e\u5176\u662f\u679a\u4e3e\u5b57\u6bb5\uff0c\u65e0\u6cd5\u8fdb\u884c\u586b\u5145\uff0c\u6240\u4ee5\u76f4\u63a5\u820d\u5f03\uff1b\u5bf9\u5e94\u7684`PassengerId`\u548c`Name`\u90fd\u662f\u6307\u4ee3\u65c5\u5ba2\u7684\u552f\u4e00\u7f16\u7801\uff0c\u8fd9\u91cc\u6570\u636e\u4e2d\u4fdd\u7559\u6570\u503c\u7c7b\u578b\u7684,\u5e76\u5c06\u5176\u8f6c\u6362\u4e3a\u7d22\u5f15\uff1b`Ticket`\u662f\u8239\u7968\u7684\u7f16\u53f7\uff0c\u662f\u552f\u4e00\u7f16\u7801\uff0c\u540c\u6837\u4e0d\u5c06\u5176\u4f5c\u4e3a\u6709\u6548\u7279\u5f81\uff1b`Embarked`\u4f5c\u4e3a\u767b\u8239\u7684\u5730\u70b9\uff0c\u4e5f\u662f\u65c5\u5ba2\u7684\u91cd\u8981\u7279\u5f81\uff0c\u800c\u5176\u4f5c\u4e3a\u4e00\u4e2a\u679a\u4e3e\u503c\uff0c\u9700\u8981\u5bf9\u5176\u4f7f\u7528`OneHot`\u7f16\u7801\u53d8\u6210\u6570\u503c\u578b\u6570\u636e","53121669":"# \u9009\u62e9\u6a21\u578b\n\u5728\u5bf9\u6570\u636e\u8fdb\u884c\u5904\u7406\u4e4b\u540e\uff0c\u5269\u4e0b\u7684\u5c31\u662f\u9009\u62e9\u6a21\u578b\u4e86\uff0c\u6a21\u578b\u7684\u9009\u62e9\u9700\u8981\u5408\u9002\u7684\u6307\u6807\u6765\u5ea6\u91cf\u6a21\u578b\u7684\u597d\u574f\uff1b\u5728\u5206\u7c7b\u4e2d\u7684\u5ea6\u91cf\u6807\u51c6\u4e00\u822c\u6709`F1-score`\u548c`ROC`\u66f2\u7ebf\uff1b\u51c6\u786e\u7387\u548c\u53ec\u56de\u7387\u540c\u6837\u662f\u8861\u91cf\u4e00\u4e2a\u6a21\u578b\u597d\u574f\u7684\u5fc5\u8981\u6307\u6807\uff0c\u51c6\u786e\u7387\u6d4b\u91cf\u7684\u662f\u6a21\u578b\u9884\u6d4b\u7684\u51c6\u786e\u5ea6\uff0c\u53ec\u56de\u7387\u6d4b\u91cf\u7684\u662f\u5b9e\u9645\u4e2d\u88ab\u9884\u6d4b\u51c6\u786e\u7684\u6982\u7387","e87cc399":"## \u4f7f\u7528GBRT\u8bad\u7ec3","6a061803":"### \u6570\u636e\u5904\u7406\n\n\u5728\u8fd9\u4e2a\u9636\u6bb5\u9700\u8981\u6392\u9664\u65e0\u7528\u7684\u7279\u5f81\uff0c\u586b\u5145\u7f3a\u5931\u503c","1222e7f2":"## \u7efc\u5408\u4ee5\u4e0a\u6240\u6709\u6a21\u578b","e5e6b1ff":"## \u4f7f\u7528SVM"}}