{"cell_type":{"cce7822c":"code","1584a6a0":"code","a4079c34":"code","886b7cc8":"code","96a6f476":"code","f5e181e5":"code","da80127c":"code","8d54c000":"code","1236364f":"code","3ccec1a2":"code","08bc7b42":"code","4c31d75f":"code","ce0f11df":"code","3c6c2b53":"code","7460e681":"code","50f5212f":"code","0bbd0e12":"code","c6a74624":"code","a20c818c":"code","3264ba10":"code","42a96cc1":"code","6fdc56a2":"code","9e9772e9":"code","923c39a1":"code","eefd4abd":"code","7ea918c7":"code","b0b1c585":"code","4445beae":"code","cdb1215a":"code","776a082b":"code","ba85745d":"code","d8e9a86d":"code","d53b68fe":"code","230b02bb":"code","510cf0b1":"code","57ecd1d9":"code","d92f312b":"code","756be6d7":"code","e89de2f5":"code","df7e2fb5":"code","dc3b8f59":"code","b82eca6f":"code","205379c6":"code","197a7754":"code","408d560b":"code","5e84bca6":"code","5eedce71":"code","c13594fd":"code","b4922201":"code","ee95a3c6":"code","b4722939":"code","0b968752":"code","146de328":"code","030af58a":"code","a3a8be3a":"code","7c379f0f":"code","15c3886e":"code","20082fc4":"code","0d6cf981":"code","2ab66ddd":"code","cd4626fd":"code","fccd106f":"code","230883f7":"code","913687ea":"code","0f90a02e":"code","75d1b846":"code","9f36d651":"code","c9bed5d5":"code","14a1640c":"code","85f6523d":"code","6ce871da":"code","44f6b801":"code","9773b8f6":"markdown","1507be87":"markdown"},"source":{"cce7822c":"import numpy as np \nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns \nimport os\nimport warnings\n\n%matplotlib inline\nwarnings.filterwarnings(\"ignore\")","1584a6a0":"# Set the size of the plots \nplt.rcParams[\"figure.figsize\"] = (18,8)\nsns.set(rc={'figure.figsize':(18,8)})","a4079c34":"data = pd.read_csv(\"..\/input\/pubg-finish-placement-prediction\/train_V2.csv\")\nprint(\"Finished loading data\")","886b7cc8":"def reduce_mem_usage(df):\n    \"\"\" iterate through all the columns of a dataframe and modify the data type\n        to reduce memory usage.        \n    \"\"\"\n    start_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage of dataframe is {:.2f} MB'.format(start_mem))\n\n    for col in df.columns:\n        col_type = df[col].dtype\n\n        if col_type != object:\n            c_min = df[col].min()\n            c_max = df[col].max()\n            if str(col_type)[:3] == 'int':\n                if c_min > np.iinfo(np.int8).min and c_max < np.iinfo(np.int8).max:\n                    df[col] = df[col].astype(np.int8)\n                elif c_min > np.iinfo(np.int16).min and c_max < np.iinfo(np.int16).max:\n                    df[col] = df[col].astype(np.int16)\n                elif c_min > np.iinfo(np.int32).min and c_max < np.iinfo(np.int32).max:\n                    df[col] = df[col].astype(np.int32)\n                elif c_min > np.iinfo(np.int64).min and c_max < np.iinfo(np.int64).max:\n                    df[col] = df[col].astype(np.int64)  \n            else:\n                if c_min > np.finfo(np.float16).min and c_max < np.finfo(np.float16).max:\n                    df[col] = df[col].astype(np.float16)\n                elif c_min > np.finfo(np.float32).min and c_max < np.finfo(np.float32).max:\n                    df[col] = df[col].astype(np.float32)\n                else:\n                    df[col] = df[col].astype(np.float64)\n\n    end_mem = df.memory_usage().sum() \/ 1024**2\n    print('Memory usage after optimization is: {:.2f} MB'.format(end_mem))\n    print('Decreased by {:.1f}%'.format(100 * (start_mem - end_mem) \/ start_mem))\n\n    return df","96a6f476":"data = reduce_mem_usage(data)","f5e181e5":"data.drop(columns=['rankPoints'], inplace=True)","da80127c":"data.dropna(inplace=True)\ndata.isnull().values.any()","8d54c000":"types = ['solo', 'solo-fpp', 'duo', 'duo-fpp', 'squad', 'squad-fpp']\ndata = data.loc[data['matchType'].isin(types)]","1236364f":"data['matchType'].unique()","3ccec1a2":"data.columns","08bc7b42":"data['teamSize'] = data.groupby('groupId')['groupId'].transform('count')\ndata['maxTeamSize'] = data.groupby('matchId')['teamSize'].transform('max')\ndata['matchSize'] = data.groupby('matchId')['Id'].transform('nunique')","4c31d75f":"data['killsPerMeter'] = data['kills']\/data['walkDistance']\ndata['killsPerMeter'].fillna(0, inplace=True)\ndata['killsPerMeter'].replace(np.inf, 0, inplace=True)","ce0f11df":"data['healsPerMeter'] = data['heals'] \/ data['walkDistance']\ndata['healsPerMeter'].fillna(0, inplace=True)\ndata['healsPerMeter'].replace(np.inf, 0, inplace=True)","3c6c2b53":"data['totalHeals'] = data['heals'] + data['boosts']","7460e681":"data['totalHealsPerMeter'] = data['totalHeals'] \/ data['walkDistance']\ndata['totalHealsPerMeter'].fillna(0, inplace=True)\ndata['totalHealsPerMeter'].replace(np.inf, 0, inplace=True)","50f5212f":"data['killsPerSecond'] = data['kills'] \/ data['matchDuration']\ndata['killsPerSecond'].fillna(0, inplace=True)\ndata['killsPerSecond'].replace(np.inf, 0, inplace=True)","0bbd0e12":"data['TotalHealsPerTotalDistance'] = (data['boosts'] + data['heals']) \/ (data['walkDistance'] + data['rideDistance'] + data['swimDistance'])\ndata['TotalHealsPerTotalDistance'].fillna(0, inplace=True)\ndata['TotalHealsPerTotalDistance'].replace(np.inf, 0, inplace=True)","c6a74624":"data['killPlacePerMaxPlace'] = data['killPlace'] \/ data['maxPlace']\ndata['killPlacePerMaxPlace'].fillna(0, inplace=True)\ndata['killPlacePerMaxPlace'].replace(np.inf, 0, inplace=True)","a20c818c":"data['headShotPerc'] = data['headshotKills'] \/ data['kills']\ndata['headShotPerc'].fillna(0, inplace=True)\ndata['headShotPerc'].replace(np.inf, 0, inplace=True)","3264ba10":"data['damagePerSec'] = data['damageDealt'] \/ data['matchDuration']\ndata['damagePerSec'].fillna(0, inplace=True)\ndata['damagePerSec'].replace(np.inf, 0, inplace=True)","42a96cc1":"data['totalDistance'] = data['rideDistance'] + data['swimDistance'] + data['walkDistance']","6fdc56a2":"data['totalDistancePerSec'] = data['totalDistance'] \/ data['matchDuration']\ndata['totalDistancePerSec'].fillna(0, inplace=True)\ndata['totalDistancePerSec'].replace(np.inf, 0, inplace=True)","9e9772e9":"data['killStreakKillRatio'] = data['killStreaks'] \/ data['kills']\ndata['killStreakKillRatio'].fillna(0, inplace=True)\ndata['killStreakKillRatio'].replace(np.inf, 0, inplace=True)","923c39a1":"data['killPlacePerMaxPlaceRatio'] = data['killPlace'] \/ data['maxPlace']\ndata['killPlacePerMaxPlaceRatio'].fillna(0, inplace=True)\ndata['killPlacePerMaxPlaceRatio'].replace(np.inf, 0, inplace=True)","eefd4abd":"data['killPlacePerkillPoints'] = data['killPlace'] \/ data['killPoints']\ndata['killPlacePerkillPoints'].fillna(0, inplace=True)\ndata['killPlacePerkillPoints'].replace(np.inf, 0, inplace=True)","7ea918c7":"data['weaponsAcquiredPerSec'] = data['weaponsAcquired'] \/ data['matchDuration']\ndata['weaponsAcquiredPerSec'].fillna(0, inplace=True)\ndata['weaponsAcquiredPerSec'].replace(np.inf, 0, inplace=True)","b0b1c585":"data['totalDistancePerWeaponsAcquired'] = data['totalDistance'] \/ data['weaponsAcquired']\ndata['totalDistancePerWeaponsAcquired'].fillna(0, inplace=True)\ndata['totalDistancePerWeaponsAcquired'].replace(np.inf, 0, inplace=True)","4445beae":"data['walkDistancePerHeal'] = data['walkDistance'] \/ data['heals']\ndata['walkDistancePerHeal'].fillna(0, inplace=True)\ndata['walkDistancePerHeal'].replace(np.inf, 0, inplace=True)","cdb1215a":"data['walkDistancePerKills'] = data['walkDistance'] \/ data['kills']\ndata['walkDistancePerKills'].fillna(0, inplace=True)\ndata['walkDistancePerKills'].replace(np.inf, 0, inplace=True)","776a082b":"data['walkDistancePerSec'] = data['walkDistance'] \/ data['matchDuration']\ndata['walkDistancePerSec'].fillna(0, inplace=True)\ndata['walkDistancePerSec'].replace(np.inf, 0, inplace=True)","ba85745d":"data['killEfficiency'] = data['DBNOs'] \/ data['kills']\ndata['killEfficiency'].fillna(0, inplace=True)\ndata['killEfficiency'].replace(np.inf, 0, inplace=True)","d8e9a86d":"data['killPlacePerKills'] = data['killPlace'] \/ data['kills']\ndata['killPlacePerKills'].fillna(0, inplace=True)\ndata['killPlacePerKills'].replace(np.inf, 0, inplace=True)","d53b68fe":"data['walkDistancePerc'] = data.groupby('matchId')['walkDistance'].rank(pct=True).values","230b02bb":"data['total_items_acquired'] = data['boosts'] + data['heals'] + data['weaponsAcquired']","510cf0b1":"data['playersJoined'] = data.groupby('matchId')['matchId'].transform('count')","57ecd1d9":"data['playersJoined'].unique()","d92f312b":"data['killsNormaized'] = data['kills'] \/ data['playersJoined']","756be6d7":"data['killPlacePerc'] = data['killPlace']\/ data['maxPlace']\ndata['killPlacePerc'].fillna(0, inplace=True)\ndata['killPlacePerc'].replace(np.inf, 0, inplace=True)","e89de2f5":"data['teamwork'] = data['assists'] + data['revives']","df7e2fb5":"data['damageNormaized'] = data['damageDealt'] \/ data['playersJoined']","dc3b8f59":"data['killsNoMoving'] = ((data['kills'] > 0) & (data['totalDistance'] == 0))","b82eca6f":"data['totalDamageByTeam'] = data.groupby('groupId')['damageDealt'].transform('sum')","205379c6":"data['totalKillsByTeam'] =  data.groupby('groupId')['kills'].transform('sum')","197a7754":"len(data.columns)","408d560b":"data.columns","5e84bca6":"data.drop(['Id', 'groupId', 'matchId',], inplace=True, axis=1)","5eedce71":"data.columns","c13594fd":"data.info()","b4922201":"data = pd.get_dummies(data, columns=['matchType'], dummy_na=True)","ee95a3c6":"noMoving = [True]\ndata['killsNoMoving'] = np.where(data['killsNoMoving'].isin(noMoving), 1, 0)","b4722939":"data.info()","0b968752":"from sklearn.metrics import mean_absolute_error as mae\nfrom sklearn.model_selection import train_test_split","146de328":"data.shape","030af58a":"train, test = train_test_split(data, test_size=0.15, random_state=12)","a3a8be3a":"train.shape","7c379f0f":"test.shape","15c3886e":"train.to_csv('train.csv')","20082fc4":"test.to_csv('test.csv')","0d6cf981":"y = train['winPlacePerc']","2ab66ddd":"X = train\nX.drop('winPlacePerc', inplace=True, axis=1)","cd4626fd":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=12)","fccd106f":"from lightgbm import LGBMRegressor\nimport datetime","230883f7":"time_0 = datetime.datetime.now()\n\nlgbm = LGBMRegressor(objective='mae', n_jobs=-1, random_state=12)\n\nlgbm.fit(X_train, y_train)\n\ntime_1  = datetime.datetime.now()\n\nprint('Training took {} seconds.'.format((time_1 - time_0).seconds))\nprint('Mean Absolute Error is {:.5f}'.format(mae(y_test, lgbm.predict(X_test))))","913687ea":"import shap","0f90a02e":"SAMPLE_SIZE = 10000\nSAMPLE_INDEX = np.random.randint(0, X_test.shape[0], SAMPLE_SIZE)\n\nX = X_test.iloc[SAMPLE_INDEX]\n\nexplainer = shap.TreeExplainer(lgbm)\nshap_values = explainer.shap_values(X)","75d1b846":"shap.summary_plot(shap_values, X)","9f36d651":"shap.summary_plot(shap_values, X, plot_type='bar', color='darkred')","c9bed5d5":"# Let's also try xgboost \nimport xgboost as xgb","14a1640c":"regressor = xgb.XGBRegressor(objective = 'reg:squarederror')\nregressor","85f6523d":"regressor.fit(X_train, y_train)\ny_pred = regressor.predict(X_test)","6ce871da":"# check the MAE\nMae = mae(y_test, y_pred)\nprint('MAE %f' % (Mae))","44f6b801":"xgb.plot_importance(regressor)\nplt.title(\"xgboost.plot_importance(regressor)\")\nplt.show()","9773b8f6":"# Feature Engineering","1507be87":"# Reference\n\n*  https:\/\/www.kaggle.com\/gemartin\/load-data-reduce-memory-usage"}}