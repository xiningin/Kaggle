{"cell_type":{"89fddc0f":"code","c975768e":"code","546bbaeb":"code","c8ec4309":"code","95cf7208":"code","1a4d68b9":"code","144322c7":"code","a295fac7":"code","cb0ae49f":"code","3aec7d65":"code","f8072dc8":"code","5b14ba94":"code","568a7035":"code","a8fbab8b":"code","1fe2f9d5":"code","72381c30":"code","5a9f5f20":"code","9f70e83a":"code","cbd955e5":"code","04e561f9":"code","885e8b29":"code","a90d0701":"code","dc0f9d62":"code","e53e9ebf":"code","d68f0cf0":"code","82f3e4ec":"code","53cd607c":"code","7adf43e9":"code","3008efbc":"markdown","b1829a8c":"markdown","d49c9999":"markdown","40ddc422":"markdown","4018da25":"markdown","74ff70b4":"markdown","f3b889f1":"markdown","269174fa":"markdown","074a4931":"markdown","eab4d5d2":"markdown","c23a0c24":"markdown","08c6f47e":"markdown","c45d1e66":"markdown","987a0cd1":"markdown","afb6098c":"markdown"},"source":{"89fddc0f":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","c975768e":"df = pd.read_csv(\"..\/input\/underwater-surface-temperature-dataset\/underwater_temperature.csv\", encoding = 'unicode_escape')\ndf = df[['ID', 'Site', 'Latitude', 'Longitude', 'Date', 'Time', 'Depth', 'Temp (\u00b0C)']]\n\ndf","546bbaeb":"plt.figure(figsize = (13, 10))\nsns.heatmap(df.corr(), annot = True, cmap = \"coolwarm\")\nplt.show()","c8ec4309":"df.describe()","95cf7208":"pd.unique(df['Site'])","1a4d68b9":"pd.unique(df['Latitude'])","144322c7":"pd.unique(df['Longitude'])","a295fac7":"pd.unique(df['Depth'])","cb0ae49f":"# To find which columns have NaN values.\ndf.isna().any()","3aec7d65":"# To find the rows containing NaN Values in the Temp column.\ndf[df['Temp (\u00b0C)'].isna()]","f8072dc8":"df.loc[(df['Site'] == 'Ilha da Gal\u00e9') & (df['Depth'] == 12)]","5b14ba94":"# As there is abundant data available, dropping the above 4 values seems like a good option.\ndf = df.drop([df.index[119712] , df.index[119713], df.index[119714], df.index[119715]]) ","568a7035":"# Creating initial dataframe\nsite_df = df['Site']\n\n# generate binary values using get_dummies\ndum_df = pd.get_dummies(site_df, columns=[\"Sites\"])\nsite_df = site_df.to_frame()   # Changing it into a dataframe.\n\n# Merge with main site_df on key values\nsite_df = site_df.join(dum_df)\n\n# Merging with main df\n\ndf = df.drop(labels='Site', axis=1)\nsite_df = site_df.drop(labels='Tamboretes', axis=1)\ndf = df.join(site_df)\n\ndf = df[['ID', 'Latitude', 'Longitude', 'Date', 'Time', 'Depth', 'Ilha Deserta', 'Ilha da Gal\u00e9', 'Ilha do Coral', 'Ilha dos Lobos',\n       'Moleques do Sul', 'Parcel da Pombinha',\n       'Parcel do Xavier (Alalunga)', 'lha do Xavier', 'Temp (\u00b0C)']]\n\ndf","a8fbab8b":"df.info()","1fe2f9d5":"# Converting Date feature from object variables to Date-Time Variables\n\ndf['Date'] = pd.to_datetime(df['Date'])\n\ndf['Time'] = pd.to_datetime(df['Time'])\n\ndf['Day'] = df['Date'].dt.dayofyear\ndf['Hour'] = df['Time'].dt.hour\ndf['Minute'] = df['Time'].dt.minute\n\ndf","72381c30":"from sklearn.model_selection import train_test_split\n\nx = df[['Latitude', 'Longitude', 'Depth', 'Ilha Deserta', 'Ilha da Gal\u00e9', 'Ilha do Coral', 'Ilha dos Lobos', 'Moleques do Sul', 'Parcel da Pombinha', 'Parcel do Xavier (Alalunga)', 'lha do Xavier', 'Day', 'Hour', 'Minute']]\ny = df['Temp (\u00b0C)']\n\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 42)\n\n\nx_train","5a9f5f20":"from sklearn.preprocessing import MinMaxScaler\n\nscaler = MinMaxScaler()\n\nscaler.fit(x_train)\n\nx_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)","9f70e83a":"from sklearn import linear_model\n\nreg = linear_model.LinearRegression()\nreg.fit(x_train, y_train)","cbd955e5":"y_pred = reg.predict(x_test)","04e561f9":"results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\nresults","885e8b29":"(reg.score(x_test, y_test))*100","a90d0701":"from sklearn.linear_model import SGDRegressor\n\nSGD = SGDRegressor(max_iter=1000, tol=1e-3)\nSGD.fit(x_train, y_train)","dc0f9d62":"y_pred = SGD.predict(x_test)","e53e9ebf":"(SGD.score(x_test, y_test))*100","d68f0cf0":"from sklearn.ensemble import RandomForestRegressor\n\nRFR = RandomForestRegressor(max_depth=16, random_state=0)\nRFR.fit(x_train, y_train)","82f3e4ec":"y_pred = RFR.predict(x_test)","53cd607c":"(RFR.score(x_test, y_test))*100","7adf43e9":"results = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})\nresults","3008efbc":"Exploring & Understanding Data","b1829a8c":"# Evaluating different ML Models to determine the most accurate model for the current problem","d49c9999":"### Linear Regression","40ddc422":"# **Introduction**\n\n\nWater Temperature is a key quantity in the analysis of sea and ocean systems, due to its relation with water quality, organisms, and various hydrological events. Many studies have been conducted to accurately and precisely predict it, which would provide us further insight towards the above features. Many types of models (based on machine learning, artificial neural networks, fuzzy logic, or other techniques) have been studied and used for these prediction purposes.\n\nThe following notebook is a study into the use of different Machine learning techniques for predicting underwater temperatures along the Santa Catarina coast, southern Brazil.","4018da25":"### Dealing with NaN values","74ff70b4":"### Random Forest Regressor","f3b889f1":"# **Normalisation**","269174fa":"### Date-Time Feature Engineering","074a4931":"# **Data Loading**","eab4d5d2":"### One-Hot Encoding","c23a0c24":"# Splitting Data for Testing & Training","08c6f47e":"To select encoding technique (label or one-hot encoding) for the different features:","c45d1e66":"# Data Pre-Processing","987a0cd1":"# **Conclusion**\n\nIn summary, out of the 3 models we tested, we find the most accurate results with our 3rd model (Random Forests Regression).\n\nWe can also improve on our existing model by implementing better methods of data pre-processing and feature engineering. Using neural networks might also improve the accuracy and precision of the predictions.","afb6098c":"### SGD Regressor"}}