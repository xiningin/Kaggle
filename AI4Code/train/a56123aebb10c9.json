{"cell_type":{"1c4f5796":"code","158ce47c":"code","946e7eae":"code","cc979189":"code","1986292d":"code","0c59027d":"code","2a96fc76":"code","2d010e13":"code","b4b247f7":"code","282b2cc8":"code","355d9788":"code","005f22cb":"code","3b43f1b9":"code","ddd3d6de":"code","cc4b368e":"code","b76e9b0b":"code","56a11159":"code","c0a8261a":"code","23f5d792":"code","f002fbed":"code","143458fb":"code","bd17a580":"code","a4b07095":"code","ccc3ef32":"code","8d59c891":"code","34677a55":"code","a8825293":"code","188e7846":"code","fb648d7a":"code","46b72dc2":"code","1b195aa1":"code","22fdebea":"code","8020bf9a":"code","b3d2554a":"code","295b7ddf":"code","22c76696":"code","cb7a1aa3":"code","525ca9a9":"code","2ec6bbae":"code","3ba4e117":"code","0adf838d":"code","3164bace":"code","5ebdba6e":"code","fdd29f4e":"code","6aacdf3c":"code","d5d5093b":"code","ef280f23":"code","bf2eb049":"code","91f16053":"code","524beaba":"code","40785c2f":"code","08839a2d":"code","e55d0134":"code","e24da589":"code","7128873e":"markdown","e548855d":"markdown","e4bd8383":"markdown","981bb71e":"markdown","7eaf935e":"markdown","dd244a1e":"markdown","5e59efdf":"markdown","c1c17a15":"markdown","66942ffc":"markdown","3c356537":"markdown","cd633fc0":"markdown","d55d8acc":"markdown","3a858aef":"markdown","25ddacd1":"markdown","80c3ae34":"markdown","d2936cb6":"markdown","d7170839":"markdown","b31b418d":"markdown","6557dc36":"markdown","d704a3cb":"markdown","228ddecf":"markdown","483daaed":"markdown","9e7053b4":"markdown","b0813bd4":"markdown","449fead9":"markdown","3ced2913":"markdown","83a261e9":"markdown"},"source":{"1c4f5796":"import os\nimport torch\nimport pandas as pd\nimport numpy as np\nfrom torch.utils.data import Dataset, random_split, DataLoader\nfrom PIL import Image\nimport torchvision.models as models\nimport matplotlib.pyplot as plt\nimport torchvision.transforms as T\nfrom sklearn.metrics import f1_score\nimport torch.nn.functional as F\nimport torch.nn as nn\nfrom torchvision.utils import make_grid\nfrom tqdm.notebook import tqdm\n%matplotlib inline","158ce47c":"DATA_DIR = '..\/input\/jovian-pytorch-z2g\/Human protein atlas'\n\nTRAIN_DIR = DATA_DIR + '\/train'                           # Contains training images\nTEST_DIR = DATA_DIR + '\/test'                             # Contains test images\n\nTRAIN_CSV = DATA_DIR + '\/train.csv'                       # Contains real labels for training images\nTEST_CSV = '..\/input\/jovian-pytorch-z2g\/submission.csv'   # Contains dummy labels for test image","946e7eae":"dataset = pd.read_csv(TRAIN_CSV)\ndataset","cc979189":"!head \"{TRAIN_CSV}\"","1986292d":"!head \"{TEST_CSV}\"","0c59027d":"!ls \"{TRAIN_DIR}\" | head","2a96fc76":"train_df = pd.read_csv(TRAIN_CSV)\ntrain_df.head()","2d010e13":"labels = {\n    0: 'Mitochondria',\n    1: 'Nuclear bodies',\n    2: 'Nucleoli',\n    3: 'Golgi apparatus',\n    4: 'Nucleoplasm',\n    5: 'Nucleoli fibrillar center',\n    6: 'Cytosol',\n    7: 'Plasma membrane',\n    8: 'Centrosome',\n    9: 'Nuclear speckles'\n}","b4b247f7":"def encode_label(label):\n    target = torch.zeros(10)\n    for l in str(label).split(' '):\n        target[int(l)] = 1.\n    return target\n\ndef decode_target(target, text_labels=False, threshold=0.5):\n    result = []\n    for i, x in enumerate(target):\n        if (x >= threshold):\n            if text_labels:\n                result.append(labels[i] + \"(\" + str(i) + \")\")\n            else:\n                result.append(str(i))\n    return ' '.join(result)\n    ","282b2cc8":"encode_label('2 4 5')","355d9788":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]))","005f22cb":"decode_target(torch.tensor([0, 0, 1, 0, 1, 1, 0, 0, 0, 0.]), text_labels=True)","3b43f1b9":"class HumanProteinDataset(Dataset):\n    def __init__(self, df, root_dir, transform=None):\n        self.df = df\n        self.transform = transform\n        self.root_dir = root_dir\n        \n    def __len__(self):\n        return len(self.df)    \n    \n    def __getitem__(self, idx):\n        row = self.df.loc[idx]\n        img_id, img_label = row['Image'], row['Label']\n        img_fname = self.root_dir + \"\/\" + str(img_id) + \".png\"\n        img = Image.open(img_fname)\n        if self.transform:\n            img = self.transform(img)\n        return img, encode_label(img_label)\n","ddd3d6de":"imagenet_stats = ([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])\n\ntrain_tfms = T.Compose([\n    T.RandomCrop(512, padding=8, padding_mode='reflect'),\n#     T.RandomResizedCrop(256, scale=(0.5,0.9), ratio=(1, 1)), \n#     T.ColorJitter(brightness=0.1, contrast=0.1, saturation=0.1, hue=0.1),\n    T.RandomHorizontalFlip(), \n    T.RandomRotation(10),\n    T.ToTensor(), \n#     T.Normalize(*imagenet_stats,inplace=True), \n    T.RandomErasing(inplace=True)\n])\n\nvalid_tfms = T.Compose([\n#     T.Resize(256), \n    T.ToTensor(), \n#     T.Normalize(*imagenet_stats)\n])","cc4b368e":"len(dataset)","b76e9b0b":"np.random.seed(42)\nmsk = np.random.rand(len(dataset)) < 0.9\n\ntrain_df = dataset[msk].reset_index()\nval_df = dataset[~msk].reset_index()","56a11159":"train_ds = HumanProteinDataset(train_df, TRAIN_DIR, transform=train_tfms)\nval_ds = HumanProteinDataset(val_df, TRAIN_DIR, transform=valid_tfms)\nlen(train_ds), len(val_ds)","c0a8261a":"def show_sample(img, target, invert=True):\n    if invert:\n        plt.imshow(1 - img.permute((1, 2, 0)))\n    else:\n        plt.imshow(img.permute(1, 2, 0))\n    print('Labels:', decode_target(target, text_labels=True))\n    ","23f5d792":"show_sample(*train_ds[1700])","f002fbed":"show_sample(*train_ds[1700], invert=False)","143458fb":"torch.manual_seed(10)","bd17a580":"batch_size = 64","a4b07095":"train_dl = DataLoader(train_ds, batch_size, shuffle=True, num_workers=4, pin_memory=True)\nval_dl = DataLoader(val_ds, batch_size*2, num_workers=2, pin_memory=True)","ccc3ef32":"def show_batch(dl, invert=True):\n    for images, labels in dl:\n        fig, ax = plt.subplots(figsize=(16, 8))\n        ax.set_xticks([]); ax.set_yticks([])\n        data = 1-images if invert else images\n        ax.imshow(make_grid(data, nrow=16).permute(1, 2, 0))\n        break","8d59c891":"show_batch(train_dl)","34677a55":"def F_score(output, label, threshold=0.5, beta=1):\n    prob = output > threshold\n    label = label > threshold\n\n    TP = (prob & label).sum(1).float()\n    TN = ((~prob) & (~label)).sum(1).float()\n    FP = (prob & (~label)).sum(1).float()\n    FN = ((~prob) & label).sum(1).float()\n\n    precision = torch.mean(TP \/ (TP + FP + 1e-12))\n    recall = torch.mean(TP \/ (TP + FN + 1e-12))\n    F2 = (1 + beta**2) * precision * recall \/ (beta**2 * precision + recall + 1e-12)\n    return F2.mean(0)","a8825293":"class MultilabelImageClassificationBase(nn.Module):\n    def training_step(self, batch):\n        images, targets = batch \n        out = self(images)                      \n        loss = F.binary_cross_entropy(out, targets)      \n        return loss\n    \n    def validation_step(self, batch):\n        images, targets = batch \n        out = self(images)                           # Generate predictions\n        loss = F.binary_cross_entropy(out, targets)  # Calculate loss\n        score = F_score(out, targets)\n        return {'val_loss': loss.detach(), 'val_score': score.detach() }\n        \n    def validation_epoch_end(self, outputs):\n        batch_losses = [x['val_loss'] for x in outputs]\n        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses\n        batch_scores = [x['val_score'] for x in outputs]\n        epoch_score = torch.stack(batch_scores).mean()      # Combine accuracies\n        return {'val_loss': epoch_loss.item(), 'val_score': epoch_score.item()}\n    \n    def epoch_end(self, epoch, result):\n        print(\"Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_score: {:.4f}\".format(\n            epoch, result['train_loss'], result['val_loss'], result['val_score']))","188e7846":"resnet18 = models.resnet18()\nresnet18","fb648d7a":"class ProteinResnet(MultilabelImageClassificationBase):\n    def __init__(self):\n        super().__init__()\n        # Use a pretrained model\n        self.network = models.resnet34(pretrained=True)\n        # Replace last layer\n        num_ftrs = self.network.fc.in_features\n        self.network.fc = nn.Linear(num_ftrs, 10)\n    \n    def forward(self, xb):\n        return torch.sigmoid(self.network(xb))\n    \n    def freeze(self):\n        # To freeze the residual layers\n        for param in self.network.parameters():\n            param.require_grad = False\n        for param in self.network.fc.parameters():\n            param.require_grad = True\n    \n    def unfreeze(self):\n        # Unfreeze all layers\n        for param in self.network.parameters():\n            param.require_grad = True","46b72dc2":"def get_default_device():\n    \"\"\"Pick GPU if available, else CPU\"\"\"\n    if torch.cuda.is_available():\n        return torch.device('cuda')\n    else:\n        return torch.device('cpu')\n    \ndef to_device(data, device):\n    \"\"\"Move tensor(s) to chosen device\"\"\"\n    if isinstance(data, (list,tuple)):\n        return [to_device(x, device) for x in data]\n    return data.to(device, non_blocking=True)\n\nclass DeviceDataLoader():\n    \"\"\"Wrap a dataloader to move data to a device\"\"\"\n    def __init__(self, dl, device):\n        self.dl = dl\n        self.device = device\n        \n    def __iter__(self):\n        \"\"\"Yield a batch of data after moving it to device\"\"\"\n        for b in self.dl: \n            yield to_device(b, self.device)\n\n    def __len__(self):\n        \"\"\"Number of batches\"\"\"\n        return len(self.dl)","1b195aa1":"device = get_default_device()\ndevice","22fdebea":"train_dl = DeviceDataLoader(train_dl, device)\nval_dl = DeviceDataLoader(val_dl, device)\nto_device(model, device);","8020bf9a":"@torch.no_grad()\ndef evaluate(model, val_loader):\n    model.eval()\n    outputs = [model.validation_step(batch) for batch in val_loader]\n    return model.validation_epoch_end(outputs)\n\ndef get_lr(optimizer):\n    for param_group in optimizer.param_groups:\n        return param_group['lr']\n\ndef fit_one_cycle(epochs, max_lr, model, train_loader, val_loader, \n                  weight_decay=0, grad_clip=None, opt_func=torch.optim.SGD):\n    torch.cuda.empty_cache()\n    history = []\n    \n    # Set up custom optimizer with weight decay\n    optimizer = opt_func(model.parameters(), max_lr, weight_decay=weight_decay)\n    # Set up one-cycle learning rate scheduler\n    sched = torch.optim.lr_scheduler.OneCycleLR(optimizer, max_lr, epochs=epochs, \n                                                steps_per_epoch=len(train_loader))\n    \n    for epoch in range(epochs):\n        # Training Phase \n        model.train()\n        train_losses = []\n        lrs = []\n        for batch in tqdm(train_loader):\n            loss = model.training_step(batch)\n            train_losses.append(loss)\n            loss.backward()\n            \n            # Gradient clipping\n            if grad_clip: \n                nn.utils.clip_grad_value_(model.parameters(), grad_clip)\n            \n            optimizer.step()\n            optimizer.zero_grad()\n            \n            # Record & update learning rate\n            lrs.append(get_lr(optimizer))\n            sched.step()\n        \n        # Validation phase\n        result = evaluate(model, val_loader)\n        result['train_loss'] = torch.stack(train_losses).mean().item()\n        result['lrs'] = lrs\n        model.epoch_end(epoch, result)\n        history.append(result)\n    return history","b3d2554a":"model = to_device(ProteinResnet(), device)","295b7ddf":"history = evaluate(model, val_dl)\nhistory","22c76696":"model.freeze()","cb7a1aa3":"num_epochs = 5\nmax_lr = 0.01\ngrad_clip = 0.1\nweight_decay = 1e-4\nopt_func = torch.optim.Adam","525ca9a9":"%%time\nhistory += fit_one_cycle(num_epochs, max_lr, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","2ec6bbae":"model.unfreeze()","3ba4e117":"%%time\nhistory += fit_one_cycle(num_epochs, 0.001, model, train_dl, val_dl, \n                         grad_clip=grad_clip, \n                         weight_decay=weight_decay, \n                         opt_func=opt_func)","0adf838d":"def predict_single(image):\n    xb = image.unsqueeze(0)\n    xb = to_device(xb, device)\n    preds = model(xb)\n    prediction = preds[0]\n    print(\"Prediction: \", prediction)\n    show_sample(image, prediction)","3164bace":"test_df = pd.read_csv(TEST_CSV)\ntest_dataset = HumanProteinDataset(test_df, TEST_DIR, transform=valid_tfms)","5ebdba6e":"img, target = test_dataset[0]\nimg.shape","fdd29f4e":"predict_single(test_dataset[100][0])","6aacdf3c":"predict_single(test_dataset[74][0])","d5d5093b":"test_dl = DeviceDataLoader(DataLoader(test_dataset, batch_size, num_workers=3, pin_memory=True), device)","ef280f23":"@torch.no_grad()\ndef predict_dl(dl, model):\n    torch.cuda.empty_cache()\n    batch_probs = []\n    for xb, _ in tqdm(dl):\n        probs = model(xb)\n        batch_probs.append(probs.cpu().detach())\n    batch_probs = torch.cat(batch_probs)\n    return [decode_target(x) for x in batch_probs]","bf2eb049":"test_preds = predict_dl(test_dl, model)","91f16053":"submission_df = pd.read_csv(TEST_CSV)\nsubmission_df.Label = test_preds\nsubmission_df.sample(20)","524beaba":"sub_fname = 'submission2.csv'","40785c2f":"submission_df.to_csv(sub_fname, index=False)","08839a2d":"!pip install jovian --upgrade","e55d0134":"import jovian","e24da589":"jovian.commit(project='zerogans-protein-competition')","7128873e":"## Training the model","e548855d":"Here's the same image viewed with the colors inverted","e4bd8383":"## Creating a submission file","981bb71e":"If your kernel runs out of memory here, you might need to reduce your batch size.","7eaf935e":"Next, let's create a test dataset using the `submission.csv` file. Note that the file contains dummy labels (always `'0'`). We'll use the same transforms we used for the training set.","dd244a1e":"## Save to Jovian","5e59efdf":"Let us know create a submission file with these predictions","c1c17a15":"## Making predictions & submission\n\nTo start with, let's create a helper function to make a prediction on a single image.","66942ffc":"### Data Loaders","3c356537":"Similarly, `submission.csv` contains image IDs for test data. However, since the goal of this competition is to make predictions for the test set, the `submission.csv` files contains **dummy labels**, which you need to replace with your predictions and sumbit to the competition on the \"Submission\" tab. In other words, we don't have the labels for the test set.","cd633fc0":"The `train.csv` file contains image IDs and labels for training data. Note that this is a multi-label classification problem. Each image can have more than one type of protein.","d55d8acc":"First, freeze the ResNet layers and train some epochs. This only trains the final layer to start classifying the images.","3a858aef":"Let's try predicting the labels for some sample images","25ddacd1":"You can also use the \"Save Version\" button on Kaggle itself, to save a copy on your Kaggle profile.","80c3ae34":"Let's check how many samples the dataset contains","d2936cb6":"## Exploring the Data\n\nWhen you create a notebook with the \"Notebooks\" tab of a Kaggle competition, the data is automatically included in the `..\/input` folder. You can explore the files in the sidebar. Let us create some constants acess the data directories and CSV files.","d7170839":"Let's load the `train.csv` file into a Pandas dataframe","b31b418d":"To create a tensor from the labels, we will encode the labels as vectors of 1s & 0s. For example, if the labels are `'2 4 5'`, the correspoding vector for it would be `[0, 0, 1, 0, 1, 1, 0, 0, 0, 0]`. Let's define helper funtions to encode labels into tensors and vice versa.","6557dc36":"Let's take a look at a sample image from the dataset. We'll define a function `show_sample` to help us. We will also include the option to invert the image before showing it, because the original images are quite dark.","d704a3cb":"The image files are named `<image-id>.png` and can be found in the respective `train` and `test` folders.","228ddecf":"## Model","483daaed":"Transforms can be chained using `transforms.Compose`. For instance, you may add `transforms.Resize(128)` before `transforms.ToTensor()` to resize images to size 128x128 before converting them into tensors. See the full list of transforms here: https:\/\/pytorch.org\/docs\/master\/torchvision\/transforms.html","9e7053b4":"## Human Protein Multi Label Image Classification \n\nThis is a starter notebook for the competition [Zero to GANs - Human Protein Classification](https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g)","b0813bd4":"Let's also put the textual labels in a dictionary for later use.","449fead9":"## Creating Datasets & Data Loaders\n\nWe can now create a custom dataset by extending the `Dataset` class from PyTorch. We need to define the `__len__` and `__getitem__` methods to create a dataset. We'll also provide the option of adding transforms into the constructor.","3ced2913":"We can now save it batck to CSV, and download the file from the sidebar (check the output folder)","83a261e9":"You can now upload this submission file here: https:\/\/www.kaggle.com\/c\/jovian-pytorch-z2g\/submit"}}