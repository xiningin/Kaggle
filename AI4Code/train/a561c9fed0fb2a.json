{"cell_type":{"fab0d3e2":"code","4b7bca9a":"code","9abd6bd7":"code","4662f823":"code","2e4c8c5e":"code","a79cc964":"code","bc82e346":"code","6cbc99bc":"code","aef2a687":"code","d67dbe3b":"code","5572817b":"code","afc6ca26":"code","e5b80da3":"code","aff1ca60":"code","161c890b":"code","8e7b0f44":"code","a44b5c71":"code","1edbea95":"code","c7d2212e":"code","81b01449":"code","42b0935b":"code","d3036783":"code","0c8d3e97":"code","b99f5ca7":"code","1fbdec78":"code","02ef1f67":"code","25ea4937":"code","a793b0c5":"code","15999a5c":"code","9bb9f814":"code","6ed09776":"code","4cff88f8":"code","49ea7df1":"code","322bcc6a":"code","9c58ab25":"code","8e7189ba":"code","718f5171":"code","8f15cc97":"code","b744234b":"code","dddc6b5e":"code","e6c264bd":"markdown","a461fa7a":"markdown","b42b6a18":"markdown","ee3bf737":"markdown","ebf0753a":"markdown","22a41c69":"markdown","afce7064":"markdown","81d5bb69":"markdown","d5f699cf":"markdown","51bbda36":"markdown","62fa38d3":"markdown","af0cd5e3":"markdown","38894203":"markdown","96555ca4":"markdown","8a5076b7":"markdown","7e3f8224":"markdown","70fa7aae":"markdown","4819300b":"markdown","c1c3244f":"markdown"},"source":{"fab0d3e2":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load in \n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\n\n# Input data files are available in the \"..\/input\/\" directory.\n# For example, running this (by clicking run or pressing Shift+Enter) will list the files in the input directory\n\nimport os\nprint(os.listdir(\"..\/input\"))\n\n# Any results you write to the current directory are saved as output.","4b7bca9a":"\ntrain = pd.read_csv(\"..\/input\/train.csv\")\ntest = pd.read_csv(\"..\/input\/test.csv\")\ntrain.head()","9abd6bd7":"train.info()","4662f823":"train.describe()","2e4c8c5e":"train.isna().sum()","a79cc964":"train.Embarked = train.Embarked.fillna(train['Embarked'].mode()[0])","bc82e346":"median_age = train.Age.median()\ntrain.Age.fillna(median_age, inplace = True)\n\ntrain.drop('Cabin', axis = 1,inplace = True)","6cbc99bc":"train['FamilySize'] = train['SibSp'] + train['Parch']+1","aef2a687":"train['GenderClass'] = train.apply(lambda x: 'child' if x['Age'] < 15 else x['Sex'],axis=1)","d67dbe3b":"train[train.Age<15].head(2)","5572817b":"train = pd.get_dummies(train, columns=['GenderClass','Embarked'], drop_first=True)","afc6ca26":"train = train.drop(['Name','Ticket','Sex','SibSp','Parch'], axis = 1)\n","e5b80da3":"train.head()","aff1ca60":"import matplotlib.pyplot as plt                                    # Plotting library for Python programming language and it's numerical mathematics extension NumPy\nimport seaborn as sns                                              # Provides a high level interface for drawing attractive and informative statistical graphics\n%matplotlib inline\nsns.set()\nsns.pairplot(train[[\"Fare\",\"Age\",\"Pclass\",\"Survived\"]],vars = [\"Fare\",\"Age\",\"Pclass\"],hue=\"Survived\", dropna=True,markers=[\"o\", \"s\"])\nplt.title('Pair Plot')","161c890b":"corr = train.corr()\nplt.figure(figsize=(10,10))\nsns.heatmap(corr,vmax=.8,linewidth=.01, square = True, annot = True,cmap='YlGnBu',linecolor ='black')\nplt.title('Correlation between features')","8e7b0f44":"X = train.loc[:,train.columns != 'Survived']\nX.head()","a44b5c71":"y = train.Survived ","1edbea95":"y.head()","c7d2212e":"print(X.shape)\nprint(y.shape)","81b01449":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)","42b0935b":"print(X_train.shape)\nprint(X_test.shape)","d3036783":"from sklearn.linear_model import LogisticRegression\nlogreg = LogisticRegression()\nlogreg.fit(X_train,y_train)","0c8d3e97":"y_pred_test = logreg.predict(X_test)  ","b99f5ca7":"from sklearn.metrics import accuracy_score\nprint('Accuracy score for test data is:', accuracy_score(y_test,y_pred_test))","1fbdec78":"test.head()","02ef1f67":"test.isnull().sum()","25ea4937":"median_age = test.Age.median()\ntest.Age.fillna(median_age, inplace = True)","a793b0c5":"test.drop('Cabin', axis = 1,inplace = True)","15999a5c":"median_fare = test.Fare.median()\ntest.Fare.fillna(median_fare, inplace = True)","9bb9f814":"test['FamilySize'] = test['SibSp'] + test['Parch']+1","6ed09776":"test['GenderClass'] = test.apply(lambda x: 'child' if x['Age'] < 15 else x['Sex'],axis=1)","4cff88f8":"test = pd.get_dummies(test, columns=['GenderClass','Embarked'], drop_first=True)","49ea7df1":"test_processing = test.drop(['Name','Ticket','Sex','SibSp','Parch'], axis = 1)\ntest_processing.head()","322bcc6a":"y_pred_test = logreg.predict(test_processing)  ","9c58ab25":"y_pred_test","8e7189ba":"y_pred_test.shape","718f5171":"evaluation = pd.read_csv(\"..\/input\/gender_submission.csv\")","8f15cc97":"evaluation.shape","b744234b":"evaluation.head()","dddc6b5e":"test.head()","e6c264bd":"- __Dummification__ of __GenderClass__ & __Embarked__.","a461fa7a":"__Preparing X and y using pandas__","b42b6a18":"- The dataset consists of the information about people boarding the famous RMS Titanic. Various variables present in the dataset includes data of age, sex, fare, ticket etc. \n- The training dataset comprises of __891 observations of 12 columns__. Below is a table showing names of all the columns and their description.\n- The testing dataset comprises of __418 observations of 11 columns__.","ee3bf737":"| Column Name   | Description                                               |\n| ------------- |:-------------                                            :| \n| PassengerId   | Passenger Identity                                        | \n| Survived      | Whether passenger survived or not                         |  \n| Pclass        | Class of ticket                                           | \n| Name          | Name of passenger                                         |   \n| Sex           | Sex of passenger                                          |\n| Age           | Age of passenger                                          |\n| SibSp         | Number of sibling and\/or spouse travelling with passenger |\n| Parch         | Number of parent and\/or children travelling with passenger|\n| Ticket        | Ticket number                                             |\n| Fare          | Price of ticket                                           |\n| Cabin         | Cabin number                                              |","ebf0753a":"Observing the diagonal elements,\n- More people of __Pclass 1__ _survived_ than died (First peak of red is higher than blue)\n- More people of __Pclass 3__ _died_ than survived (Third peak of blue is higher than red)\n- More people of age group __20-40 died__ than survived.\n- Most of the people paying __less fare died__.","22a41c69":"Establishing __coorelation__ between all the features using __heatmap__.","afce7064":"__Using the Model for Prediction__","81d5bb69":"__Logistic regression in scikit-learn__","d5f699cf":"__Preprocessing the data__","51bbda36":"Drawing __pair plot__ to know the joint relationship between __'Fare' , 'Age' , 'Pclass' & 'Survived'__","62fa38d3":"- Creating a new feature named __FamilySize__.","af0cd5e3":"- __Age and Pclass are negatively corelated with Survived.__\n- FamilySize is made from Parch and SibSb only therefore high positive corelation among them.\n- __Fare and FamilySize__ are __positively coorelated with Survived.__\n- With high corelation we face __redundancy__ issues.","38894203":"- __Dropping__ columns __'Name' , 'Ticket' , 'Sex' , 'SibSp' and 'Parch'__ ","96555ca4":"- Segmenting __Sex__ column as per __Age__, Age less than 15 as __Child__, Age greater than 15 as __Males and Females__ as per their gender.","8a5076b7":"- Dealing with missing values<br\/>\n    - Dropping\/Replacing missing entries of __Embarked.__\n    - Replacing missing values of __Age__ and __Fare__ with median values.\n    - Dropping the column __'Cabin'__ as it has too many _null_ values.","7e3f8224":"__Model Evaluation for test data__","70fa7aae":"__model accuracy__","4819300b":"* Data Loading and Description","c1c3244f":"__ processinng of test data__"}}