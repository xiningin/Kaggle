{"cell_type":{"ea154139":"code","18c2458b":"code","c4d6ae6a":"code","1959c965":"code","b9f982aa":"code","0e0209d1":"code","ac369c53":"code","375af2eb":"code","5cbc9de3":"code","49d5f70b":"markdown"},"source":{"ea154139":"!pip install -q -U git+https:\/\/github.com\/mljar\/mljar-supervised.git@master","18c2458b":"import numpy as np\nimport pandas as pd\nfrom sklearn.metrics import log_loss\nfrom sklearn.model_selection import train_test_split\n\nfrom supervised.automl import AutoML # mljar-supervised","c4d6ae6a":"df = pd.read_csv(\"..\/input\/adult-census-income\/adult.csv\")\nX = df[df.columns[:-1]]\ny = df[\"income\"]","1959c965":"df","b9f982aa":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)","0e0209d1":"automl = AutoML(mode=\"Explain\")\nautoml.fit(X_train, y_train)","ac369c53":"automl.report()","375af2eb":"predictions = automl.predict_all(X_test)\nprint(predictions)","5cbc9de3":"print(\"Test LogLoss\", log_loss(y_test, predictions[\"prediction_>50K\"]))","49d5f70b":"# MLJAR AutoML \n\nMLJAR is an Automated Machine Learning framework. It is available as Python package with code at GitHub: https:\/\/github.com\/mljar\/mljar-supervised\n\nThe MLJAR AutoML can work in several modes:\n- Explain - ideal for initial data exploration\n- Perform - perfect for production-level ML systems\n- Compete - mode for ML competitions under restricted time budget. By the default, it performs advanced feature engineering like golden features search, kmeans features, feature selection. It does model stacking.\n- Optuna - uses Optuna to highly tune algorithms: Random Forest, Extra Trees, Xgboost, LightGBM, CatBoost, Neural Network. Each algorithm is tuned with `Optuna` hperparameters framework with selected time budget (controlled with `optuna_time_budget`). By the default feature engineering is not enabled (you need to manually swtich it on, in AutoML() parameter).\n\n\n## Explain\n\nThe example useage of `Explain` with `MLJAR`:\n\n```python\n\nautoml = AutoML(mode=\"Explain\")\nautoml.fit(X, y)\n```\n\nThe best choice to get initial information about your data. This mode will produce a lot of explanations for your data. All details can be viewed in the Notebook by calling the `automl.report()` method.\n\n\n## Compete\n\nThe example useage of `Compete` with `MLJAR`:\n\n```python\n\nautoml = AutoML(mode=\"Compete\",\n                total_time_limit=8*3600)\nautoml.fit(X, y)\n```\n\nThat's it. It will train: Random Forest, Extra Trees, Xgboost, LightGBM, CatBoost, Neural Network, Ensemble, and stack all the models. Feature engineering will be applied (if enough training time). \n\n\n## Optuna\n\nThe example useage of `Optuna` with `MLJAR`:\n\n```python\n\nautoml = AutoML(mode=\"Optuna\", \n                optuna_time_budget=1800, \n                optuna_init_params={}, \n                algorithms=[\"LightGBM\", \"Xgboost\", \"Extra Trees\"], \n                total_time_limit=24*3600)\nautoml.fit(X, y)\n```\n\nDescription of parameters:\n- `optuna_time_budget` - time budget for `Optuna` to tune each algorithm,\n- `optuna_init_params` - if you have precomputed parameters for `Optuna` they can be passed here, then for already optimized models `Optuna` will not be used.\n- `algorithms` - the algorithms that we will check,\n- `total_time_limit` - the total time limit for AutoML training.\n\n(In the `Optuna` mode, only first fold is used for model tuning.)\n\n---\n\nMLJAR GitHub: https:\/\/github.com\/mljar\/mljar-supervised\n\nOptuna GitHub: https:\/\/github.com\/optuna\/optuna\n\n<img src=\"https:\/\/raw.githubusercontent.com\/mljar\/visual-identity\/main\/media\/kaggle_banner_white.png\" style=\"width: 70%;\"\/>"}}