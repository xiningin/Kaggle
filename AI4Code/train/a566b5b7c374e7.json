{"cell_type":{"003a6611":"code","c3c65a31":"code","c2e70658":"code","9f34beff":"code","a58ba9a8":"code","ece74e93":"code","92134508":"code","b80a9ed4":"code","ee90d6e9":"code","4120cb5b":"code","ee07260f":"code","20ab322b":"code","abad336e":"code","cdd0178e":"code","ea19085e":"code","91a21589":"code","36e88b28":"code","9a6cd556":"code","275ff6c3":"code","d67d1c2d":"code","7172b940":"code","56c17ab0":"code","0d5b3bd9":"code","e4edae16":"code","db77109f":"code","54eac338":"code","773d172b":"code","bd31df7b":"code","23d240cc":"code","4d2a1e42":"code","7c9a6258":"code","c32b7bfa":"code","b895bf62":"code","55c0dab8":"code","0ba970b6":"code","b1cea264":"code","a65a0465":"code","190acc58":"code","28d2e1b2":"code","a92c24e2":"code","8c93db5b":"code","ff264010":"code","33a361a4":"code","6cf1f424":"code","923b810c":"code","0b5e32a3":"code","1274d78b":"code","21b85699":"code","6c1f8abb":"code","7c326624":"code","694889bc":"code","5a04ad49":"code","5e64168e":"code","0682a46d":"code","358d1e72":"code","b6353052":"code","196100ba":"code","7ef29f0a":"code","7803f5ab":"code","e00414b8":"code","5bef0adb":"code","d6c01fd7":"code","79f45f24":"code","a4ee0eaa":"code","8608220e":"code","851dfa06":"code","71176a36":"code","39bf4531":"code","8ac01cba":"code","a1ab406e":"code","edda7aa0":"code","82eeb252":"code","d0a37c31":"code","7e715c32":"code","5f476f4a":"code","640bff41":"code","951ff836":"code","48186b41":"code","1c9bc28e":"code","3f4610ea":"code","cf34e39a":"code","3e077191":"code","d10b50b8":"code","98205dfe":"code","dafb3be0":"code","9bc9c569":"code","222e4c40":"code","24ca8e7f":"code","177351ef":"code","b355240c":"code","acc68748":"code","007bee52":"code","21bb387b":"code","13cd274a":"code","00c5f324":"markdown","85e493fd":"markdown","c75131a3":"markdown","8a9bc000":"markdown","50e3cbf7":"markdown","00d6c2bf":"markdown","0b4bf0c3":"markdown","5a851709":"markdown","7b729a87":"markdown","84deaa27":"markdown","36f4fb61":"markdown","c8a3acbd":"markdown","6ca8f54a":"markdown","8aeb64f8":"markdown","fe7802b4":"markdown","a79b3aaa":"markdown","88b02581":"markdown","075b390d":"markdown","830466f0":"markdown","d4d26300":"markdown","cda1b102":"markdown","04bffc5b":"markdown","1b1b33a3":"markdown","aa76474f":"markdown","93c0ec7f":"markdown","55b848a1":"markdown","a14b1d43":"markdown","f76f4b67":"markdown","2d5ea6ca":"markdown","ced6c7e8":"markdown","638858e4":"markdown","fe6ef8dd":"markdown","35109eda":"markdown","ab34c71a":"markdown","546bd2b5":"markdown","fd0f7c0b":"markdown","1187b7cf":"markdown","c0966c8f":"markdown","cbcb9f44":"markdown","2e86024b":"markdown","be55a148":"markdown","f8132f48":"markdown","0180d29d":"markdown","ada1c726":"markdown","911b5975":"markdown"},"source":{"003a6611":"import pandas as pd\nimport numpy as np\nimport datetime\nfrom datetime import datetime as dt, timedelta, date\nfrom scipy.stats import pointbiserialr\nfrom scipy.stats import f_oneway\nfrom math import floor, ceil\nfrom wordcloud import WordCloud\nfrom PIL import Image\nimport string","c3c65a31":"# Plotting libraries and set-up\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport warnings; warnings.filterwarnings(action='once')\n\nlarge = 22; med = 16; small = 12\nparams = {'axes.titlesize': large,\n          'legend.fontsize': med,\n          'figure.figsize': (16, 10),\n          'axes.labelsize': med,\n          'axes.titlesize': med,\n          'xtick.labelsize': med,\n          'ytick.labelsize': med,\n          'figure.titlesize': large}\nplt.rcParams.update(params)\nplt.style.use('seaborn-whitegrid')\nsns.set_style(\"white\")\n%matplotlib inline\n\nimport plotly\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\nimport plotly.express as px\nimport textwrap\n\nplotly.offline.init_notebook_mode(connected=True)","c2e70658":"%%HTML\n<style type=\"text\/css\">\ntable.dataframe td, table.dataframe th {\n    border: 1px  black solid !important;\n  color: black !important;\n}\n<\/style>","9f34beff":"# Import data\nsc_table = pd.read_csv('..\/input\/sleep-analysis\/Sleep Cycle Data.csv', \n                       delimiter=';', \n                       header=0, usecols=['Start', 'End', 'Sleep quality','Time in bed', 'Sleep Notes']\n                      )","a58ba9a8":"# Produce set of unique sleep notes from aggregate column\nsc_notes = sc_table['Sleep Notes'].values.tolist()\nsc_notes_expanded = [note.split(':') for note in sc_notes]\nunique_notes = set(x for l in sc_notes_expanded for x in l)\n\n# Create binary column (1 or 0) for each unique sleep note\nfor note in unique_notes:\n    sc_table[note] = sc_table['Sleep Notes'].apply(lambda x: 1 if note in x else 0)","ece74e93":"# Add Date column and keep data starting on specified date\nsc_table['Date'] = pd.to_datetime(sc_table['End']).dt.date - timedelta(days=1)\nstart_date = date(2020, 2, 4)   # Data before this date is not usable\ndate_mask = (sc_table['Date'] >= start_date)\nsc_table = sc_table.loc[date_mask]\n\n# Convert Start and End to time only\nsc_table['Start'] = pd.to_datetime(sc_table['Start']).dt.time\nsc_table['End'] = pd.to_datetime(sc_table['End']).dt.time\n\n# Drop columns denoted as INCORRECT MEASUREMENT\nindex_to_drop = sc_table[sc_table['INCORRECT MEASUREMENT'] == 1].index\nsc_table.drop(index_to_drop, inplace=True)","92134508":"# For Start and End times, add delta vs midnight columns for future calculations\nsc_table['Start v 12AM'] = sc_table['Start'].apply(lambda x: \n                                                        (dt.combine(datetime.date.today(), x) - \n                                                         dt.combine(datetime.date.today(), datetime.time.max)\n                                                        ).seconds\n                                                        if (dt.combine(datetime.date.today(), x) - \n                                                            dt.combine(datetime.date.today(), datetime.time.min)\n                                                           ).seconds < 43200 \n                                                        else (dt.combine(datetime.date.today(), datetime.time.min) - \n                                                              dt.combine(datetime.date.today(), x)\n                                                             ).seconds *-1\n                                                       )\n\nsc_table['End v 12AM'] = sc_table['End'].apply(lambda x: \n                                                    (dt.combine(datetime.date.today(), x) - \n                                                     dt.combine(datetime.date.today(), datetime.time.max)\n                                                    ).seconds\n                                                   )","b80a9ed4":"# Convert Sleep Quality to integer and time in bed to seconds to be compatible with Oura.\nsc_table['Sleep quality'] = sc_table['Sleep quality'].apply(lambda x: float(x.split('%')[0]))\nsc_table['Time in bed'] = sc_table['Time in bed'].apply(lambda x: float(x.split(':')[0]) * 3600 + float(x.split(':')[-1]) * 60)","ee90d6e9":"# Reorder columns\ncolumns = sc_table.columns.tolist()\nnew_columns = ['Date','Start','End','Start v 12AM', 'End v 12AM']\nfor col in new_columns:\n    columns.remove(col)\nnew_columns += columns\n\nsc_table = sc_table[new_columns]","4120cb5b":"sc_table.head()","ee07260f":"# Import data, only certain columns\noura_table = pd.read_csv('..\/input\/sleep-analysis\/OURA Data.csv', delimiter=',', header=0, usecols=['date', 'Sleep Score', 'Total Sleep Score', 'REM Sleep Score', \n                                                                            'Deep Sleep Score', 'Sleep Efficiency Score', 'Total Bedtime', \n                                                                            'Total Sleep Time', 'Awake Time', 'REM Sleep Time', 'Light Sleep Time', \n                                                                            'Deep Sleep Time', 'Restless Sleep', 'Sleep Efficiency', 'Sleep Latency',\n                                                                            'Sleep Timing', 'Bedtime Start', 'Bedtime End', \n                                                                            'Average Resting Heart Rate', 'Lowest Resting Heart Rate', \n                                                                            'Average HRV', 'Temperature Deviation', 'Respiratory Rate',\n                                                                            'Readiness Score', 'Previous Night Score', 'Sleep Balance Score',\n                                                                            'Temperature Score', 'Resting Heart Rate Score','Recovery Index Score'\n                                                                           ]\n                        )","20ab322b":"# Drop rows with no sleep score\noura_table.dropna(subset=['Sleep Score'], inplace=True)\noura_table.reset_index()\n\n# Capitalize date column and convert to same date format as sc_table\noura_table = oura_table.rename(columns={'date': 'Date'})\noura_table['Date'] = pd.to_datetime(oura_table['Date'])\noura_table['Date'] = oura_table['Date'].dt.date - timedelta(days=1)\noura_table.sort_values('Date')\n\n# Add columns for change in Average HVR and Average Heart Rate and format to percentage\noura_table['HRV Delta'] = oura_table['Average HRV'].pct_change()\noura_table['Heart Rate Delta'] = oura_table['Average Resting Heart Rate'].pct_change()\noura_table['HRV Delta'] = oura_table['HRV Delta'].map('{:,.0%}'.format)\noura_table['Heart Rate Delta'] = oura_table['Heart Rate Delta'].map('{:,.0%}'.format)","abad336e":"oura_table.head()","cdd0178e":"# Import data\njournal_table = pd.read_excel('..\/input\/sleep-analysis\/Sleep Journal.xlsx')","ea19085e":"# Convert date column to a date\njournal_table['Date'] = journal_table['Date'].dt.date - timedelta(days=1)\n\n# Drop rows with no restfulness score and replace NaN in other columns\njournal_table.dropna(subset=['Restfulness Score'], inplace=True)\njournal_table = journal_table.fillna(value={'Vivid Dreams': 0.0, 'Remember Dreams': 0.0, 'Sleep Notes': '', 'Dream Notes': ''})","91a21589":"journal_table.head()","36e88b28":"# Specify relevant columns and save to new table\noura_columns = ['Date', 'Sleep Score', 'Total Sleep Score', 'REM Sleep Score','Deep Sleep Score', 'Sleep Efficiency Score', 'Total Bedtime',\n                'Total Sleep Time', 'REM Sleep Time', 'Light Sleep Time', 'Deep Sleep Time', 'Restless Sleep', 'Sleep Efficiency', 'Sleep Latency',\n                'Average Resting Heart Rate', 'Average HRV', 'Respiratory Rate', 'Readiness Score', 'Previous Night Score', 'Recovery Index Score'\n               ]\n\noura_sleep_table = oura_table[oura_columns]\n\n# Filter for February 2020\nfeb_2020_mask = (oura_sleep_table['Date'].map(lambda x: x.month) == 2) & (oura_sleep_table['Date'].map(lambda x: x.year) == 2020)\noura_month_one = oura_sleep_table[feb_2020_mask]\n\n# Plot\nplt.figure(figsize=(12,10), dpi= 80)\nsns.heatmap(oura_month_one.corr(), xticklabels=oura_month_one.corr().columns, yticklabels=oura_month_one.corr().columns, cmap='RdYlGn',\n            center=0, annot=True)\n\n# Decorations\nplt.title('Oura Sleep Data Correlogram', fontsize=22)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","9a6cd556":"oura_month_one[['Date', 'Deep Sleep Time', 'Deep Sleep Score']].sort_values('Deep Sleep Time', ascending=False).reset_index(drop=True).head(7)","275ff6c3":"oura_month_one[['Date', 'REM Sleep Time', 'REM Sleep Score']].sort_values('REM Sleep Time', ascending=False).reset_index(drop=True).head(5)","d67d1c2d":"oura_month_one[['Date', 'Total Sleep Time', 'Total Sleep Score']].sort_values('Total Sleep Time', ascending=False).reset_index(drop=True).head(5)","7172b940":"# Set columns for merge\noura_columns = ['Date', 'Sleep Score', 'Sleep Efficiency Score', 'Total Bedtime', 'Total Sleep Time', 'REM Sleep Time', 'Light Sleep Time', \n                'Deep Sleep Time', 'Restless Sleep', 'Sleep Efficiency', 'Sleep Latency', 'Average Resting Heart Rate', 'Average HRV', \n                'Respiratory Rate', 'Readiness Score', 'Previous Night Score', 'Recovery Index Score', 'HRV Delta', 'Heart Rate Delta'\n               ]\nsc_columns = ['Date', 'Start v 12AM', 'End v 12AM', 'Sleep quality', 'Time in bed']\njournal_columns = ['Date', 'Restfulness Score']\n\nnumerical_data = pd.merge(oura_table[oura_columns], sc_table[sc_columns], left_on='Date', right_on='Date')\nnumerical_data = pd.merge(numerical_data, journal_table[journal_columns], left_on='Date', right_on='Date')","56c17ab0":"# Plot\nplt.figure(figsize=(12,10), dpi= 80)\nsns.heatmap(numerical_data.corr(), xticklabels=numerical_data.corr().columns, yticklabels=numerical_data.corr()\n            .columns, cmap='RdYlGn', center=0, annot=True)\n\n# Decorations\nplt.title('Correlogram of Oura, Sleep Cycle, and Restfulness Score', fontsize=22)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","0d5b3bd9":"# Prepare pairwise data\npairwise_data = numerical_data[['Date', 'Restfulness Score', 'REM Sleep Time', 'Deep Sleep Time', 'Total Sleep Time', 'Average HRV',\n                         'Average Resting Heart Rate']]\n\n# Plot\nplt.figure(figsize=(10,8), dpi= 80)\npplot = sns.pairplot(pairwise_data, kind=\"scatter\", plot_kws=dict(s=80, edgecolor=\"white\", linewidth=2.5))\npplot.set(xticklabels=[], yticklabels=[])\nplt.show()","e4edae16":"# Prepare pairwise data\npairwise_data = numerical_data[['Date', 'Restfulness Score', 'Deep Sleep Time', 'Total Sleep Time', 'Start v 12AM','End v 12AM', 'Average HRV']]\n\n# Plot\nplt.figure(figsize=(10,8), dpi= 80)\npplot = sns.pairplot(pairwise_data, kind=\"scatter\", plot_kws=dict(s=80, edgecolor=\"white\", linewidth=2.5))\npplot.set(xticklabels=[], yticklabels=[])\nplt.show()","db77109f":"# Prepare pairwise data\npairwise_data = numerical_data[['Date', 'Restfulness Score', 'Deep Sleep Time', 'Sleep quality', 'Respiratory Rate', 'Average Resting Heart Rate',\n                          'Average HRV']]\n\n# Plot\nplt.figure(figsize=(10,8), dpi= 80)\npplot = sns.pairplot(pairwise_data, kind=\"scatter\", plot_kws=dict(s=80, edgecolor=\"white\", linewidth=2.5))\npplot.set(xticklabels=[], yticklabels=[])\nplt.show()","54eac338":"# Prepare pairwise data\npairwise_data = numerical_data[['Date', 'Restfulness Score', 'Deep Sleep Time', 'Start v 12AM', 'End v 12AM', 'Average Resting Heart Rate',\n                          'Average HRV']]\n\n# Plot\nplt.figure(figsize=(10,8), dpi= 80)\npplot = sns.pairplot(pairwise_data, kind=\"scatter\", plot_kws=dict(s=80, edgecolor=\"white\", linewidth=2.5))\npplot.set(xticklabels=[], yticklabels=[])\nplt.show()","773d172b":"# Construct dictionary of activity data (first date, instances, frequency, etc)\nactivity_dict = {}\n\nfor col in sc_table.columns.tolist()[8:]:\n    total_days = len(sc_table)\n    first_date = sc_table['Date'][sc_table[col].ne(0).idxmax()]\n    days_after_first = len(sc_table[(sc_table['Date']>=first_date)])\n    total_instances = sc_table[col].sum()\n    total_pct = total_instances \/ total_days\n    pct_after_first = total_instances \/ days_after_first \n    total_misses = total_days - total_instances\n    misses_after_first = days_after_first - total_instances \n    activity_dict[col] = [first_date, total_misses, total_instances, total_pct, misses_after_first, pct_after_first]\n\n\n    \n    \n# Populate new dataframe with activity dictionary from above\nactivity_summary = pd.DataFrame.from_dict(activity_dict, orient='index', columns=['First Instance', 'Total Misses',\n                                                                                  'Total Instances', 'Total Percentage',\n                                                                                  'Misses After First', 'Percentage After First'\n                                                                                 ]\n                                         ).sort_values('Percentage After First', ascending=False)\n\n# Drop rows with 0 instances\nactivity_summary = activity_summary[activity_summary['Total Instances'] > 0]","bd31df7b":"# Format and print activity data\nactivity_summary.style.format({\n    'Total Percentage': '{:,.0%}'.format,\n    'Percentage After First': '{:,.0%}'.format\n})\n","23d240cc":"# Pull activity data for correlogram, remove columns with 100% or 0% instance, as they will show no correlation\nactivity_data = sc_table.iloc[: , 8:]\nactivity_data = activity_data.loc[(activity_data.sum(axis=1) != 0),(activity_data.sum(axis=0) != 0)]\nactivity_data = activity_data.loc[(activity_data.sum(axis=1) != 0),(activity_data.sum(axis=0) != len(activity_data))]\n\n# Plot\nplt.figure(figsize=(12,10), dpi= 80)\nsns.heatmap(activity_data.corr(), xticklabels=activity_data.corr().columns, yticklabels=activity_data.corr().columns, cmap='RdYlGn',\n            center=0, annot=True)\n\n# Decorations\nplt.title('Activities Correlogram', fontsize=22)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","4d2a1e42":"# Determine list of activities with 5+ instances\nactivity_list = activity_summary.index[(activity_summary['Total Instances'] >= 5) & (activity_summary['Total Misses'] >= 5)].tolist()\n\n# Create list of columns to perform dataframe merge\noura_columns = ['Date', 'Sleep Score', 'Deep Sleep Time', 'REM Sleep Time', 'Light Sleep Time', 'Total Sleep Time', 'Average HRV',\n                'Average Resting Heart Rate', 'HRV Delta', 'Heart Rate Delta']\nsc_columns = ['Date', 'Start v 12AM', 'End v 12AM', 'Time in bed'] + activity_list\njournal_columns = ['Date', 'Restfulness Score']\n\n# Merge data for correlogram (also used in future analyses)\ncorr_data = pd.merge(oura_table[oura_columns], journal_table[journal_columns], left_on='Date', right_on='Date')\ncorr_data = pd.merge(corr_data, sc_table[sc_columns], left_on='Date', right_on='Date')","7c9a6258":"# Plot\nplt.figure(figsize=(12,10), dpi= 80)\nsns.heatmap(corr_data.corr(), xticklabels=corr_data.corr().columns, yticklabels=corr_data.corr().columns, cmap='RdYlGn',\n            center=0, annot=True)\n\n# Decorations\nplt.title('Sleep Metrics vs Activites', fontsize=22)\nplt.xticks(fontsize=12)\nplt.yticks(fontsize=12)\nplt.show()","c32b7bfa":"# Add \"Day of Week\" and \"Weeknight\" columns to numerical_data table\nweekday_data = numerical_data.copy(deep=True)\nweekday_data['Day of Week'] = pd.to_datetime(weekday_data['Date'])\nweekday_data['Day Number'] = weekday_data['Day of Week'].dt.weekday + 1\nweekday_data['Day Number'] = weekday_data['Day Number'].apply(lambda x: 0 if x == 7 else x)\nweekday_data['Day of Week'] = weekday_data['Day of Week'].dt.day_name()\nweekday_data['Week Night'] = weekday_data['Day Number'].apply(lambda x: 'Weekend' if x in [5,6] else 'Week Night')\n\n# Convert seconds to hours for time related columns\nconvert_list = ['Total Bedtime', 'Total Sleep Time', 'REM Sleep Time', 'Light Sleep Time', 'Deep Sleep Time', \n                'Start v 12AM', 'End v 12AM', 'Time in bed']\nweekday_data = weekday_data.apply(lambda x: round(x \/ 3600.0, 2) if x.name in convert_list else x)","b895bf62":"# Function for adding number of instances\/observations to boxplots\ndef add_n_obs(plot_data,group_col,y):\n    '''This function determines the number of instances for the relevant activity for each day of the week\n    and adds it to the boxplot visualization.'''\n    \n    if group_col == 'Day of Week':\n        medians_dict = {grp[0]:grp[1][y].median() for grp in plot_data.sort_values('Day Number').groupby('Day Number')}\n        xticklabels = range(7)\n        n_obs = plot_data.groupby('Day Number')[y].size().values\n        for (x, xticklabel), n_ob in zip(enumerate(xticklabels), n_obs):\n            plt.text(x, medians_dict[xticklabel]*1.01, \"n = \"+str(n_ob), horizontalalignment='center', fontdict={'size':14}, color='black')\n    else:\n        medians_dict = {grp[0]:grp[1][y].median() for grp in plot_data.sort_values(group_col).groupby(group_col)}\n        xticklabels = [x.get_text() for x in plt.gca().get_xticklabels()]\n        n_obs = plot_data.groupby(group_col)[y].size().values\n        for (x, xticklabel), n_ob in zip(enumerate(xticklabels), n_obs):\n            plt.text(x, medians_dict[xticklabel]*1.01, \"n = \"+str(n_ob), horizontalalignment='center', fontdict={'size':14}, color='black')\n","55c0dab8":"def day_of_week_boxplot(plot_data, day_of_week_col, metric_col, day_num_col, min_max_multiple=0):\n    '''This function creates boxplots by day of week and a separate subplot for boxplots summarized\n    by weeknight (Sunday-Monday) and weekend (Friday-Saturday).'''\n    \n    # Create Fig and gridspec\n    fig = plt.figure(figsize=(16, 10), dpi= 80)\n    fig.suptitle(metric_col + ' by Day of Week', fontsize=22)\n    grid = plt.GridSpec(4, 6, wspace=0.5)\n\n    # Define and plot weekday information\n    ax_left = fig.add_subplot(grid[:, :-2])\n    sns.boxplot(ax=ax_left, x=day_of_week_col, y=metric_col, data=plot_data.sort_values(day_num_col), notch=False, palette='summer')\n    ax_left.set_xticklabels(ax_left.get_xticklabels(),rotation=30)\n    ymin = floor(plot_data[metric_col].min() * (1 - min_max_multiple))\n    ymax = ceil(plot_data[metric_col].max()* (1 + min_max_multiple))\n    plt.ylim(ymin, ymax)\n    plt.xlabel('')\n    # Add n of instances in each box\n    add_n_obs(plot_data,group_col=day_of_week_col,y=metric_col)  \n    \n    # Repeat for weeknight\/weekend subplot, keep same ymin and ymax\n    ax_right = fig.add_subplot(grid[:, -2:])\n    sns.boxplot(ax=ax_right, x='Week Night', y=metric_col, data=plot_data.sort_values('Week Night'), notch=False, palette='summer')\n    ax_right.set_xticklabels(ax_right.get_xticklabels(),rotation=30)\n    plt.ylim(ymin, ymax)\n    # Add n of instances in each box\n    add_n_obs(plot_data.sort_values(day_num_col),group_col='Week Night',y=metric_col) \n    plt.xlabel('')\n    plt.ylabel('')\n\n    plt.show()","0ba970b6":"day_of_week_boxplot(weekday_data, 'Day of Week', 'Deep Sleep Time', 'Day Number')","b1cea264":"day_of_week_boxplot(weekday_data, 'Day of Week', 'REM Sleep Time', 'Day Number')","a65a0465":"day_of_week_boxplot(weekday_data, 'Day of Week', 'Average HRV', 'Day Number', .1)","190acc58":"day_of_week_boxplot(weekday_data, 'Day of Week', 'Average Resting Heart Rate', 'Day Number', .1)","28d2e1b2":"day_of_week_boxplot(weekday_data, 'Day of Week', 'Start v 12AM', 'Day Number')","a92c24e2":"day_of_week_boxplot(weekday_data, 'Day of Week', 'End v 12AM', 'Day Number')","8c93db5b":"day_of_week_boxplot(weekday_data, 'Day of Week', 'Restfulness Score', 'Day Number')","ff264010":"# Grab subset of data from activity_summary table:\nsubset = activity_summary.loc[activity_list,['First Instance', 'Total Misses','Total Instances', 'Misses After First']]","33a361a4":"def add_anova_column(subset, full_data, continuous_var):\n    '''This function accepts the correlation data table created for the final correlogram above (corr_data)\n    and a continuous variable (like Deep Sleep Time). The function returns a table with p-values for each\n    activity and the relevant contiuous variable, calculated using the ANOVA method.'''\n    \n    p_values_anova = []\n    for activity in subset.index:\n        # Determine ANOVA populations\n        hit_pop = full_data[continuous_var][full_data[activity] == 1]\n        miss_pop = full_data[continuous_var][full_data[activity] == 0]\n        # Run ANOVA\n        f_stat, p_val_anova = f_oneway(hit_pop, miss_pop)\n        p_values_anova.append(p_val_anova)\n    # Add p-values to table and sort\n    subset['ANOVA p-value'] = p_values_anova\n    return subset.sort_values('ANOVA p-value')\n\ndef add_corr_column(subset, full_data, continuous_var):\n    '''This function is meant to accept the table returned from the add_anova_column function and returns\n    the table with a new column calculating the correlation of each activity to the relevant continuous\n    variable.'''\n    \n    corr_values = []\n    for activity in subset.index:\n        # Determine correlation and add to list\n        corr = full_data[continuous_var].corr(full_data[activity])\n        corr_values.append(corr)\n    # Add correlation coeffiecents to table\n    subset['Correlation'] = corr_values\n    return subset","6cf1f424":"# Merge data to be used for categorical boxplots\ndot_box_data = pd.merge(weekday_data, sc_table[sc_columns], left_on='Date', right_on='Date', suffixes=('', 'duplicate'))\n\ndef jitterbox(dot_box_data, anova_corr_table, metric):\n    '''This fuction produces a series of up to 8 subplots, 1 for each of the top 8 activities correlated with the\n    specified metric\/continuous variable. The subplots are ordered based on the order of the correlation table\n    passed in. It is best to pass a table sorted from lowest to highest by ANOVA p-value.'''\n    \n    # Determine list of activity tags (up to 8)\n    activity_list = list(anova_corr_table.index)[0:8]\n    column_list = ['Date', metric] + activity_list\n    \n    # Select data to be plotted and set up figure and subplots\n    plot_data = dot_box_data[column_list]\n    fig, axs = plt.subplots(2, 4, figsize=(16,10), dpi= 80)\n    fig.suptitle(metric + ' - Categorical Correlation')\n    axs = axs.ravel()\n\n    # Loop through subplots and plot each boxplot\n    i = 0\n    for ax in axs:\n        if i in range(len(activity_list)):\n            sns.boxplot(ax=ax, x=activity_list[i], y=metric, data=plot_data, notch=False, palette='viridis',order=[1, 0])\n            ax.set_xlabel('')\n            ax.set_xticklabels(['True','False'])\n            ax.set_ylabel('')\n            ax.set_title(activity_list[i])\n            ymin = floor(dot_box_data[metric].min() * (.95))\n            ymax = ceil(dot_box_data[metric].max()* (1.05))\n            ax.set_ylim([ymin, ymax])\n            i += 1\n        else:\n            ax.axis('off')","923b810c":"# Add ANOVA and correlation columns \ndeep_sleep_anova = add_anova_column(subset, corr_data, 'Deep Sleep Time')\ndeep_sleep_anova_corr = add_corr_column(deep_sleep_anova, corr_data, 'Deep Sleep Time')\n\n# Show table\ndeep_sleep_anova_corr","0b5e32a3":"jitterbox(dot_box_data, deep_sleep_anova_corr, 'Deep Sleep Time')","1274d78b":"# Add ANOVA and correlation columns \nrem_sleep_anova = add_anova_column(subset, corr_data, 'REM Sleep Time')\nrem_sleep_anova_corr = add_corr_column(rem_sleep_anova, corr_data, 'REM Sleep Time')\n\n# Show table\nrem_sleep_anova_corr","21b85699":"jitterbox(dot_box_data, rem_sleep_anova_corr, 'REM Sleep Time')","6c1f8abb":"# Add ANOVA and correlation columns\nhrv_anova = add_anova_column(subset, corr_data, 'Average HRV')\nhrv_anova_corr = add_corr_column(hrv_anova, corr_data, 'Average HRV')\n\n# Show table\nhrv_anova_corr","7c326624":"jitterbox(dot_box_data, hrv_anova_corr, 'Average HRV')","694889bc":"# Add ANOVA and correlation columns\navg_heart_rate_anova = add_anova_column(subset, corr_data, 'Average Resting Heart Rate')\navg_heart_rate_anova_corr = add_corr_column(avg_heart_rate_anova, corr_data, 'Average Resting Heart Rate')\n\n# Show table\navg_heart_rate_anova_corr","5a04ad49":"jitterbox(dot_box_data, avg_heart_rate_anova_corr, 'Average Resting Heart Rate')","5e64168e":"# Add ANOVA and correlation columns\nsleep_score_anova = add_anova_column(subset, corr_data, 'Sleep Score')\nsleep_score_corr = add_corr_column(sleep_score_anova, corr_data, 'Sleep Score')\n\n# Show table\nsleep_score_corr","0682a46d":"jitterbox(dot_box_data, sleep_score_corr, 'Sleep Score')","358d1e72":"# Add ANOVA and correlation columns\nrest_score_anova = add_anova_column(subset, corr_data, 'Restfulness Score')\nrest_score_anova_corr = add_corr_column(rest_score_anova, corr_data, 'Restfulness Score')\n\n# Show table\nrest_score_anova_corr","b6353052":"jitterbox(dot_box_data, rest_score_anova_corr, 'Restfulness Score')","196100ba":"# Add ANOVA and correlation columns\nstart_time_anova = add_anova_column(subset, corr_data, 'Start v 12AM')\nstart_time_corr = add_corr_column(start_time_anova, corr_data, 'Start v 12AM')\n\n# Show table\nstart_time_corr","7ef29f0a":"jitterbox(dot_box_data, start_time_corr, 'Start v 12AM')","7803f5ab":"# Add ANOVA and correlation columns\nend_time_anova = add_anova_column(subset, corr_data, 'End v 12AM')\nend_time_corr = add_corr_column(end_time_anova, corr_data, 'End v 12AM')\n\n# Show table\nend_time_corr","e00414b8":"jitterbox(dot_box_data, end_time_corr, 'End v 12AM')","5bef0adb":"def top_bottom_5(metric, corr_table, full_data):\n    '''This function returns tables summarizing the best and worst 5 days for the specified metric. The function\n    takes a correlation table (which should be sorted by p-value) and determines the top 8 activities by p-value.\n    The function then creates 4 tables: (1) top 5 days, prior day activities, (2) top 5 days, 3 past days activities,\n    (3) bottom 5 days, prior day activities, (4) bottom 5 days, 3 past days activities. These tables are used in\n    other functions to create heatmaps and tables for presentation.'''\n    \n    # Determine top 8 activities\n    activities = list(corr_table.index[0:8])\n    \n    # Determine columns for data table (to be transposed to rows)\n    metric_cols = ['Average HRV', 'Average Resting Heart Rate', 'Deep Sleep Time', 'REM Sleep Time', 'Total Sleep Time', \n                   'Restfulness Score', 'Start v 12AM', 'End v 12AM', 'Time in bed']\n    metric_cols.remove(metric)\n    data_cols = ['Date']\n    data_cols.append(metric)\n    data_cols += metric_cols + activities\n    \n    # Pull specified columns from full data\n    data = full_data[data_cols]\n    \n    # Create copy of table to calculate rolling totals for activities. Drop NA rows.\n    data_rolling = data.copy(deep=True)\n    data_rolling[activities] = data_rolling[activities].rolling(3).sum()\n    data_rolling = data_rolling.dropna()\n    \n    # Create table of top\/bottom 5 dates, one with prior day activities and one with past 3 day rolling sum.\n    top5_rolling = data_rolling.sort_values(metric, ascending=False).head(5).reset_index(drop=True).transpose()\n    date_list = data_rolling['Date']\n    top5_rolling.columns = top5_rolling.iloc[0]\n    top5_rolling = top5_rolling[1:]\n    \n    top5 = data[data['Date'].isin(date_list)].sort_values(metric, ascending=False).head(5).reset_index(drop=True).transpose()\n    top5.columns = top5.iloc[0]\n    top5 = top5[1:]\n\n    bottom5_rolling = data_rolling.sort_values(metric, ascending=True).head(5).reset_index(drop=True).transpose()\n    bottom5_rolling.columns = bottom5_rolling.iloc[0]\n    bottom5_rolling = bottom5_rolling[1:]\n    \n    bottom5 = data[data['Date'].isin(date_list)].sort_values(metric, ascending=True).head(5).reset_index(drop=True).transpose()\n    bottom5.columns = bottom5.iloc[0]\n    bottom5 = bottom5[1:]\n    \n    return top5, top5_rolling, bottom5, bottom5_rolling","d6c01fd7":"def top_bottom_heatmap(metric, top5, top5_rolling, bottom5, bottom5_rolling, colors):\n    '''This function is intended to take tables from the top_bottom_5 function and generate a 2x2\n    grid with heatmaps. These heatmaps show which activities were performed (or not performed), on and\n    around the best and worst days recorded for the specified metric (e.g. Average HRV).'''\n    \n    # Reset type as int for seaborn plot\n    top5 = top5[top5.columns].astype(int)\n    top5_rolling = top5_rolling[top5_rolling.columns].astype(int)\n    bottom5 = bottom5[bottom5.columns].astype(int)\n    bottom5_rolling = bottom5_rolling[bottom5_rolling.columns].astype(int)\n\n    df_list = [top5, top5_rolling, bottom5, bottom5_rolling]\n    figure_titles = ['Top 5 - Prior Day Activities','Top 5 - Past 3 Days',\n                     'Bottom 5 - Prior Day Activities', 'Bottom 5 - Past 3 Days']\n    \n    # Select data to be plotted and set up figure and subplots\n    fig, axs = plt.subplots(2, 2, figsize=(16,10), dpi= 80)\n    fig.subplots_adjust(top=.90, wspace=.3, hspace=.5)\n    fig.suptitle(metric + ' and Activity Occurrence - Best and Worst Days')\n    axs = axs.ravel()\n\n    # Loop through subplots and plot \n    i = 0\n    for ax in axs:\n        if (i == 0) or (i == 2):\n            sns.heatmap(df_list[i].iloc[9:, :], ax=ax, annot=False, cmap=colors, linewidth=1)\n        else:\n            sns.heatmap(df_list[i].iloc[9:, :], ax=ax, annot=True, annot_kws={\"size\": 12},cmap=colors, linewidth=1)    \n        ax.set_xlabel('')\n        ax.set_title(figure_titles[i])\n        ax.set_xticklabels(df_list[i].columns,rotation=45)\n        ax.tick_params(labelsize=13)\n        i += 1    \n    ","79f45f24":"def quintile_table(metric, corr_table, full_data):\n    '''This function accepts a metric and correlation table for that metric and returns a table showing\n    the frequency with which activities were performed for each quintile (e.g. for what percentage of the\n    top 20% of days by Average HRV did you do exercise?).'''\n    \n    # Determine top 8 activities\n    activities = list(corr_table.index[0:8])\n    \n    # Determine columns for data table (to be transposed to rows)\n    metric_cols = ['Average HRV', 'Average Resting Heart Rate', 'Deep Sleep Time', 'REM Sleep Time', 'Total Sleep Time', \n                   'Restfulness Score', 'Start v 12AM', 'End v 12AM', 'Time in bed']\n    metric_cols.remove(metric)\n    data_cols = ['Date']\n    data_cols.append(metric)\n    data_cols += metric_cols + activities\n    \n    # Pull specified columns from full data\n    data = full_data[data_cols]\n    data = data.rename(columns={'Date': 'Quintile'})\n    \n    # Create copy of table to calculate rolling totals for activities. Drop NA rows.\n    data_rolling = data.copy(deep=True)\n    data_rolling[activities] = data_rolling[activities].rolling(3).sum()\/3\n    data_rolling = data_rolling.dropna()\n    \n    # Set quintile column labels\n    bin_labels = ['0-20%', '20-40%', '40-60%', '60-80%', '80-100%']\n    \n    # Run loop to rework data and rolling data tables to reflect quintile bins across columns\n    df_list = [data, data_rolling]\n    \n    for x in range(2):\n        # Add Quintile column\n        df_list[x]['Quintile'] = pd.qcut(df_list[x][metric], \n                             q=[0, .2, .4, .6, .8, 1],\n                             labels=bin_labels)\n        # Transpose table and label columns\n        df_list[x] = df_list[x].groupby('Quintile').mean().reset_index(drop=True).transpose()\n        df_list[x].columns = bin_labels\n        x += 1\n    \n    # Make copies beofre converting to presentation format (to be used in heatmap)\n    quintiles_float = df_list[0].copy(deep=True)\n    quintiles_rolling_float = df_list[1].copy(deep=True)\n    \n    # Loop through the dataframes to reformat\n    for x in range(len(df_list[0])):\n        if x <= len(metric_cols):\n            df_list[0].iloc[x] = (df_list[0].iloc[x].apply('{:.0f}'.format))\n        else:\n            df_list[0].iloc[x] = (df_list[0].iloc[x].apply('{:.0%}'.format))\n    \n    for x in range(len(df_list[1])):\n        if x <= len(metric_cols):\n            df_list[1].iloc[x] = (df_list[1].iloc[x].apply('{:.0f}'.format))\n        else:\n            df_list[1].iloc[x] = (df_list[1].iloc[x].apply('{:.0%}'.format))\n\n    \n    return df_list[0], df_list[1], quintiles_float, quintiles_rolling_float","a4ee0eaa":"def quintiles_heatmap(metric, quintiles, quintiles_rolling, colors):\n    '''This function accepts the tables calculated in the quintiles_table function and returns heatmaps\n    that visualize how often activities were performed for each quintile.'''\n    \n    # Reset type as int for seaborn plot\n    quintiles = quintiles[quintiles.columns].astype(float)\n    quintiles_rolling = quintiles_rolling[quintiles_rolling.columns].astype(float)\n\n    df_list = [quintiles, quintiles_rolling]\n    figure_titles = ['Prior Day Activities','Past 3 Days']\n    \n    # Select data to be plotted and set up figure and subplots\n    fig, axs = plt.subplots(1, 2, figsize=(16,8), dpi= 80)\n    fig.suptitle(metric + ' and Activity % - Quintiles')\n    axs = axs.ravel()\n    fig.tight_layout()\n    fig.subplots_adjust(top=.85, wspace=.3)\n\n    # Loop through subplots and plot \n    i = 0\n    for ax in axs:\n        #if (i == 0) or (i == 2):\n        #    sns.heatmap(df_list[i].iloc[8:, :], ax=ax, annot=False, cmap='Blues', linewidth=1)\n        #else:\n        sns.heatmap(df_list[i].iloc[9:, :], ax=ax, annot=True, cmap=colors, linewidth=1, annot_kws={\"size\": 15}, vmin=0.0, vmax=1.0)\n        ax.set_xlabel('')\n        ax.set_title(figure_titles[i])\n        i += 1    ","8608220e":"def concat_quintile_tables(quintiles, quintiles_rolling):\n    '''This table concatenates single day and rolling 3 day quintile tables.'''\n    \n    # Add timeframe tags and concatenate. Add current index values to a column for pivoting.\n    quintiles['Timeframe'] = 'Prior Day'\n    quintiles_rolling['Timeframe'] = 'Past 3 Days'\n    quintiles_concat = pd.concat([quintiles, quintiles_rolling])\n    quintiles_concat['Metric'] = quintiles_concat.index.values\n    \n    # Create a pivot that shows 'Prior Day' and 'Past 3 Days' side by side\n    index_order = list(quintiles.index.values) # Need this to reorder columns at the end\n    value_list = list(quintiles_concat.columns)[0:4]\n    pivot = quintiles_concat.pivot(index='Metric', columns='Timeframe', values=value_list)\n    pivot = pivot.reindex(index_order)\n    pivot.columns = pivot.columns.swaplevel(0,1)\n    pivot = pivot.sort_index(axis=1)\n    \n    return pivot","851dfa06":"# Quintiles heatmap\nhrv_quintiles, hrv_quintiles_rolling, hrv_quintiles_float, hrv_quintiles_rolling_float = quintile_table('Average HRV', hrv_anova_corr, corr_data)\nquintiles_heatmap('Average HRV', hrv_quintiles_float, hrv_quintiles_rolling_float, 'Blues')","71176a36":"# Quintiles table\nhrv_quintile_concat = concat_quintile_tables(hrv_quintiles, hrv_quintiles_rolling)\nhrv_quintile_concat","39bf4531":"# Top and Bottom 5 Heatmap\nhrv_top5, hrv_top5_rolling, hrv_bottom5, hrv_bottom5_rolling = top_bottom_5('Average HRV', hrv_anova_corr, corr_data)\ntop_bottom_heatmap('Average HRV', hrv_top5, hrv_top5_rolling, hrv_bottom5, hrv_bottom5_rolling, 'Blues')","8ac01cba":"# Quintiles heatmap\n(arhr_quintiles, arhr_quintiles_rolling, \narhr_quintiles_float, arhr_quintiles_rolling_float) = quintile_table('Average Resting Heart Rate',avg_heart_rate_anova_corr, corr_data)\nquintiles_heatmap('Average Resting Heart Rate', arhr_quintiles_float, arhr_quintiles_rolling_float, 'Reds')","a1ab406e":"# Quintiles table\narhr_quintile_concat = concat_quintile_tables(arhr_quintiles, arhr_quintiles_rolling)\narhr_quintile_concat","edda7aa0":"# Top and Bottom 5 Heatmap\narhr_top5, arhr_top5_rolling, arhr_bottom5, arhr_bottom5_rolling = top_bottom_5('Average Resting Heart Rate', avg_heart_rate_anova_corr, corr_data)\ntop_bottom_heatmap('Average HRV', arhr_top5, arhr_top5_rolling, arhr_bottom5, arhr_bottom5_rolling, 'Reds')","82eeb252":"# Quintiles heatmap\n(deep_quintiles, deep_quintiles_rolling,\n deep_quintiles_float, deep_quintiles_rolling_float) = quintile_table('Deep Sleep Time', deep_sleep_anova_corr, corr_data)\nquintiles_heatmap('Deep Sleep Time', deep_quintiles_float, deep_quintiles_rolling_float, 'Purples')","d0a37c31":"# Quintiles table\ndeep_quintile_concat = concat_quintile_tables(deep_quintiles, deep_quintiles_rolling)\ndeep_quintile_concat","7e715c32":"# Top and Bottom 5 Heatmap\ndeep_top5, deep_top5_rolling, deep_bottom5, deep_bottom5_rolling = top_bottom_5('Deep Sleep Time', deep_sleep_anova_corr, corr_data)\ntop_bottom_heatmap('Deep Sleep Time', deep_top5, deep_top5_rolling, deep_bottom5, deep_bottom5_rolling, 'Purples')","5f476f4a":"# Quintiles heatmap \n(rem_quintiles, rem_quintiles_rolling,\n rem_quintiles_float, rem_quintiles_rolling_float) = quintile_table('REM Sleep Time', rem_sleep_anova_corr, corr_data)\n\nquintiles_heatmap('REM Sleep Time', rem_quintiles_float, rem_quintiles_rolling_float, 'Greens')","640bff41":"# Quintiles table\nrem_quintile_concat = concat_quintile_tables(rem_quintiles, rem_quintiles_rolling)\nrem_quintile_concat","951ff836":"# Top and Bottom 5 Heatmap\nrem_top5, rem_top5_rolling, rem_bottom5, rem_bottom5_rolling = top_bottom_5('REM Sleep Time', rem_sleep_anova_corr, corr_data)\ntop_bottom_heatmap('REM Sleep Time', rem_top5, rem_top5_rolling, rem_bottom5, rem_bottom5_rolling, 'Greens')","48186b41":"# Quintiles heatmap\n(rs_quintiles, rs_quintiles_rolling,\n rs_quintiles_float, rs_quintiles_rolling_float) = quintile_table('Restfulness Score', rest_score_anova_corr, corr_data)\n\nquintiles_heatmap('Restfulness Score', rs_quintiles_float, rs_quintiles_rolling_float, 'Oranges')","1c9bc28e":"# Quintiles table\nrs_quintile_concat = concat_quintile_tables(rs_quintiles, rs_quintiles_rolling)\nrs_quintile_concat","3f4610ea":"# Top and Bottom 5 Heatmap\nrs_top5, rs_top5_rolling, rs_bottom5, rs_bottom5_rolling = top_bottom_5('Restfulness Score', rest_score_anova_corr, corr_data)\ntop_bottom_heatmap('Restfulness Score', rs_top5, rs_top5_rolling, rs_bottom5, rs_bottom5_rolling, 'Oranges')","cf34e39a":"def time_series_plot(metrics, data, activity_list, moving_average=False):\n    \"\"\"This function accepts a list of time series metrics, the full sleep data (including journal notes), and \n    a list of activities. It displays a plotly time series figure with two plots: (1) time series plot with\n    separate y-axes (if significantly different) and (2) a heatmap showing which activities were completed on \n    each day. The x-axes are shared and both subplots are controllable by either slider. For REM Sleep Time,\n    the hover text will show dream notes. For other metrics, it will show sleep notes.\"\"\"\n    \n    # Create subplots\n    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, shared_yaxes=False ,vertical_spacing=0.3, specs=[[{\"secondary_y\": True}],[{}]])\n    \n    # Set up activity data for adding to the heatmap subplot\n    activities = ['Date']\n    activities += activity_list[0:8]\n    activity_data = data[activities].transpose()\n    activity_data.columns = activity_data.iloc[0]\n    activity_data = activity_data[1:]\n    activity_data = activity_data[::-1]\n    activity_data = activity_data.values.tolist()\n    \n    activity_list = activity_list[0:8]\n    activity_list.reverse()\n        \n    # Create the heatmap subplot and add to figure\n    heatmap = go.Heatmap(\n        z=activity_data,\n        x=list(data.Date),\n        y=activity_list, \n        showscale=False,\n        colorscale='Blues',\n    )\n    \n    fig.add_trace(heatmap, row=2, col=1)\n    \n    # Loop through specified metrics and add trace for each\n    i=0\n    max_amt = data[metrics[0]].max()\n    min_amt = data[metrics[0]].min()\n    \n    for metric in metrics:\n        # Add secondary axis if necessary\n        new_axis = False\n        if (data[metric].max() > (max_amt * 1.2)) | (data[metric].max() < (max_amt * 0.8)):\n            max_amt = max(max_amt, data[metric].max())\n            new_axis = True\n        if (data[metric].min() < (min_amt * 0.8)) | (data[metric].min() > (min_amt * 1.2)):\n            min_amt = min(min_amt, data[metric].min())\n            new_axis = True\n        \n        # Add new trace\n        fig.add_trace(\n            go.Scatter(x=list(data.Date), y=list(data[metric]),\n                       hovertext=list(data['Dream Notes'] if metric == 'REM Sleep Time' else data['Sleep Notes']), \n                       name=metric, groupnorm='percent'\n                      ), secondary_y=new_axis, row=1, col=1\n        )\n        i +=1\n    \n    # Set title, figure size, and hover mode\n    graph_title = ' - Prior Week Average' if moving_average else ' - Daily Measurement'\n    fig.update_layout(\n        title_text= ', '.join(metrics) + graph_title,\n        height=700,\n        hovermode='x'\n    )\n    \n    # Add range slider\n    fig.update_layout(\n        xaxis1=dict(\n            rangeselector=dict(\n                buttons=list([\n                    dict(count=1,\n                         label=\"1m\",\n                         step=\"month\",\n                         stepmode=\"backward\"),\n                    dict(count=6,\n                         label=\"6m\",\n                         step=\"month\",\n                         stepmode=\"backward\"),\n                    dict(count=1,\n                         label=\"1y\",\n                         step=\"year\",\n                         stepmode=\"backward\"),\n                    dict(step=\"all\")\n                ])\n            ),\n            rangeslider=dict(\n                visible=True, thickness=0.05\n            ),\n            type=\"date\"\n        )\n    )\n    \n    # Add second range slider\n    fig.update_layout(\n        xaxis2=dict(\n            rangeselector=dict(\n                buttons=list([\n                    dict(count=1,\n                         label=\"1m\",\n                         step=\"month\",\n                         stepmode=\"backward\"),\n                    dict(count=6,\n                         label=\"6m\",\n                         step=\"month\",\n                         stepmode=\"backward\"),\n                    dict(count=1,\n                         label=\"1y\",\n                         step=\"year\",\n                         stepmode=\"backward\"),\n                    dict(step=\"all\")\n                ])\n            ),\n            rangeslider=dict(\n                visible=True, thickness=0.05\n            ),\n            type=\"date\"\n        )\n    )\n    \n    # Show ticklables for both subplots\n    fig.update_layout(xaxis_showticklabels=True, xaxis2_showticklabels=True)\n\n    fig.show()","3e077191":"# Merge sleep notes to numerical data\ntime_series_data = pd.merge(corr_data,journal_table[['Date','Sleep Notes','Dream Notes']],on='Date', how='left')\n\n# Convert sleep notes to format that allows for text wrapping in plotly annotations\ntime_series_data['Sleep Notes'] = time_series_data['Sleep Notes'].apply(lambda x: textwrap.fill(x,break_long_words=True))\ntime_series_data['Sleep Notes'] = time_series_data['Sleep Notes'].apply(lambda x: x.replace('\\n','<br>'))\ntime_series_data['Dream Notes'] = time_series_data['Dream Notes'].apply(lambda x: textwrap.fill(x,break_long_words=True))\ntime_series_data['Dream Notes'] = time_series_data['Dream Notes'].apply(lambda x: x.replace('\\n','<br>'))\n\n# Convert time metrics to hours\ntime_series_data['Deep Sleep Time'] = time_series_data['Deep Sleep Time']\/3600.0\ntime_series_data['Light Sleep Time'] = time_series_data['Light Sleep Time']\/3600.0\ntime_series_data['REM Sleep Time'] = time_series_data['REM Sleep Time']\/3600.0\ntime_series_data['Total Sleep Time'] = time_series_data['Total Sleep Time']\/3600.0\n\n# Make a copy of time series data to calculate weekly averages\ncols_to_adjust = list(time_series_data.columns)\ncols_to_adjust.remove('Date')\ntime_series_data_weekly = time_series_data.copy(deep=True)\n\n# Loop through columns and convert to prior week average where applicable\nfor col in cols_to_adjust:\n    try:\n        time_series_data_weekly[col] = time_series_data_weekly[col].rolling(7).mean()\n    except:\n        if col == cols_to_adjust[-1]:\n            break\n        else:\n            continue\n\n# Drop NA rows created by rolling average\ntime_series_data_weekly = time_series_data_weekly.dropna()","d10b50b8":"# Determine activities from anova_corr table and plot time series graphs\nactivity_list = list(hrv_anova_corr.index)\ntime_series_plot(['Average HRV', 'Average Resting Heart Rate'], time_series_data, activity_list, moving_average=False)","98205dfe":"# Plot prior week average time series graphs\ntime_series_plot(['Average HRV', 'Average Resting Heart Rate'], time_series_data_weekly, activity_list, moving_average=True)","dafb3be0":"# Determine activities from anova_corr table and plot time series graphs\nactivity_list = list(deep_sleep_anova_corr.index)\ntime_series_plot(['Deep Sleep Time', 'Restfulness Score'], time_series_data, activity_list, moving_average=False)","9bc9c569":"# Plot prior week average time series graphs\ntime_series_plot(['Deep Sleep Time', 'Restfulness Score'], time_series_data_weekly, activity_list, moving_average=True)","222e4c40":"# Determine activities from anova_corr table and plot time series graphs\nactivity_list = list(deep_sleep_anova_corr.index)\ntime_series_plot(['Deep Sleep Time', 'REM Sleep Time'], time_series_data, activity_list, moving_average=False)","24ca8e7f":"# Plot prior week average time series graphs\ntime_series_plot(['Deep Sleep Time', 'REM Sleep Time'], time_series_data_weekly, activity_list,moving_average=True)","177351ef":"def time_series_stacked_area(data, activity_list, moving_average=False):\n    '''This function is used to build a stacked area chart for a Time Series sleep stage graph.\n    Depending on the moving_average parameter, it will show a 7 day average or a daily measurement.\n    The hover text will display any sleep notes and dream notes provided for each day. The function\n    also provides a heatmap of activities performed for each day (or the percentage in the prior 7\n    days). Both visualizations have a range slider and the x-axes are shared.'''\n    \n    # Create list of sleep stage metrics.\n    metrics_list = ['Deep Sleep Time', 'REM Sleep Time','Light Sleep Time']\n\n    # Instantiate figure and add a title.\n    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, shared_yaxes=False ,vertical_spacing=0.3, specs=[[{\"secondary_y\": True}],[{}]])\n    \n    # Set up activity data for heatmap subplot\n    activities = ['Date']\n    activities += activity_list[0:8]\n    activity_data = data[activities].transpose()\n    activity_data.columns = activity_data.iloc[0]\n    activity_data = activity_data[1:]\n    activity_data = activity_data[::-1]\n    activity_data = activity_data.values.tolist()\n    \n    activity_list = activity_list[0:8]\n    activity_list.reverse()\n        \n    # Create heatmap subplot\n    heatmap = go.Heatmap(\n        z=activity_data,\n        x=list(data.Date),\n        y=activity_list, \n        showscale=False,\n        colorscale='Blues',\n    )\n    \n    # Add heatmap subplot to figure\n    fig.add_trace(heatmap, row=2, col=1)\n    \n    # Loop through metrics and add new trace line for each (REM will have \"Dream Notes\" in the hover text).\n    for metric in metrics_list:\n        if metric == 'REM Sleep Time':\n            hover = data['Dream Notes'] \n        else:\n            hover=''\n        fig.add_trace(go.Scatter(\n            x=list(data['Date']), y=list(data[metric]),\n            hovertext=hover,\n            mode='lines',\n            stackgroup='one',\n            name=metric\n        ))\n\n    # Add another line for \"Total Sleep Time\" for which the hover text will show \"Sleep Notes\"\n    fig.add_trace(go.Scatter(\n            x=list(data['Date']), y=list(data['Total Sleep Time']),\n            mode='lines',\n            hovertext=data['Sleep Notes'],\n            name='Total Sleep Time'\n        ), row=1, col=1\n    )\n\n    # Set title, figure size, and hovermode\n    graph_title = ' - Prior Week Average' if moving_average else ' - Daily Measurement'\n    fig.update_layout(\n        title_text= 'Sleep Time by Stage (Hours)' + graph_title,\n        height=700,\n        hovermode='x'\n    )\n    \n    # Add range slider\n    fig.update_layout(\n        xaxis1=dict(\n            rangeselector=dict(\n                buttons=list([\n                    dict(count=1,\n                         label=\"1m\",\n                         step=\"month\",\n                         stepmode=\"backward\"),\n                    dict(count=6,\n                         label=\"6m\",\n                         step=\"month\",\n                         stepmode=\"backward\"),\n                    dict(count=1,\n                         label=\"1y\",\n                         step=\"year\",\n                         stepmode=\"backward\"),\n                    dict(step=\"all\")\n                ])\n            ),\n            rangeslider=dict(\n                visible=True, thickness=.05\n            ),\n            type=\"date\"\n        )\n    )\n    \n    # Add second range slider\n    fig.update_layout(\n        xaxis2=dict(\n            rangeselector=dict(\n                buttons=list([\n                    dict(count=1,\n                         label=\"1m\",\n                         step=\"month\",\n                         stepmode=\"backward\"),\n                    dict(count=6,\n                         label=\"6m\",\n                         step=\"month\",\n                         stepmode=\"backward\"),\n                    dict(count=1,\n                         label=\"1y\",\n                         step=\"year\",\n                         stepmode=\"backward\"),\n                    dict(step=\"all\")\n                ])\n            ),\n            rangeslider=dict(\n                visible=True, thickness=.05\n            ),\n            type=\"date\"\n        )\n    )\n    \n    # Show ticklabels for both subplots\n    fig.update_layout(xaxis_showticklabels=True, xaxis2_showticklabels=True)\n\n    fig.show()","b355240c":"# Determine activity list and plot the time series graphs.\nactivity_list = list(deep_sleep_anova_corr.index)\ntime_series_stacked_area(time_series_data, activity_list, moving_average=False)","acc68748":"# Plot the prior week average time series graphs. \ntime_series_stacked_area(time_series_data_weekly, activity_list, moving_average=True)","007bee52":"def create_wordcloud(text):\n    '''This function produces a wordcloud from a string.'''\n    \n    mask = np.array(Image.open('..\/input\/sleep-analysis\/CLOUD.png'))\n    wordcloud = WordCloud(width=800, height=600, mask=mask).generate(text)\n    plt.figure(figsize=(16,10))\n    plt.imshow(wordcloud, interpolation=\"bilinear\")\n    plt.axis(\"off\")\n    plt.show()","21bb387b":"# Create a single string from the Dream Notes column\ndreams = journal_table['Dream Notes'].str.cat(sep=' ').lower()\n\n# Remove words from the resulting string that should not be included in the wordcloud\nwords_to_remove = ['thing','dream', 'dreams', 'dreaming','remember', 'remembered','some',\n                   'something','night','last', 'later', 'morning']\ndreams = dreams.translate(str.maketrans('', '', string.punctuation))\ndreams = dreams.split()\ndreams  = [word for word in dreams if word not in words_to_remove]\ndreams = ' '.join(dreams)\n\n# Create and present wordcloud from dream notes\ncreate_wordcloud(dreams)","13cd274a":"# Create and present wordcloud from sleep notes\ncreate_wordcloud(journal_table['Sleep Notes'].str.cat(sep=' ').lower())","00c5f324":"### Correlogram of Oura Metrics","85e493fd":"### Average Heart Rate Variability","c75131a3":"#### Initial Impressions (Continued):\n- As expected, it appears there is a ceiling for Sleep Scores by sleep stage (REM, Deep, Total), and that the scores depend entirely on the sleep time calculated for each stage. Because the sleep scores have a max, and the sleep times do not, ***I will use sleep times for analysis.***\n- The exeption is \"Sleep Score,\" which takes into account more than the amount of sleep time. According to the Oura app, \"Sleep Score\" contributors include \"REM Sleep Time,\" \"Deep Sleep Time,\" \"Total Sleep Time,\" \"Efficiency,\" Restfulness,\" \"Latency,\" and \"Timing\" (as in start and end times). According to the data, \"Sleep Score\" is most highly correlated with:\n    - Total Sleep Time - 0.59\n    - Sleep Efficiency - 0.52 \n    - Deep Sleep Time - 0.55\n    - Light Sleep Time - (0.38)\n    - REM Sleep Time - 0.27\n\n\nThe following direct measurements from Oura correlated most strongly with \"Average HRV\" over the first month:\n- Average Resting Heart Rate - (0.90) - This is to be expected.\n- Deep Sleep Time - 0.75\n- Respiratory Rate - (0.58)\n- Light Sleep Time - (0.47)\n- REM Sleep Time - (0.41)\n\nThe following direct measurements from Oura correlated most strongly with \"Average Resting Heart Rate\" over the first month:\n- Average HRV - (0.90)\n- Deep Sleep Time - (0.78)\n- REM Sleep Time - (0.59)\n- Respiratory Rate - (0.51)","8a9bc000":"## Prepare Data Tables","50e3cbf7":"### Dream Notes","00d6c2bf":"## Regularity in Sleep and Other Metrics","0b4bf0c3":"## Quintiles and Best and Worst Days","5a851709":"### Sleep Notes","7b729a87":"# Personal Sleep Analysis (OURA, Sleep Cycle App)\n\nThis Notebook combines data from three separate sources:\n1. Oura Ring - Data is collected in the Oura app and downloaded to a CSV file for use in this model. The following data is collected:\n    - Raw sleep data, including the amount of time in each spent in each sleep stage each night. These are determined based on movement, pulse rate, and other proprietary factors, and the efficacy of Oura's sleep stage measurements have been disputed.\n    - Raw heart rate, heart rate variability, and respiratory rate data. These are much more reliabile measurements\n    - A variety of \"scores\" based on the raw data collected. These include Sleep Score, Deep Sleep Score, REM Sleep Score, Readiness Score, and Recovery Index Score, among others. \n2. Sleep Cycle App - Data is collected in the Sleep Cycle App and downloaded to a CSV file for use in this model. The following data is collected:\n    - Bed time and waking time. This app is an alarm clock that you set each night.\n    - Customizable tags\/activities for each day. You can customize the list of tags. For exmaple, maybe you want to be able to analyze whether lifting weights impacts your sleep. Each day, before bed, I run through the list and tag the relevant activities for that day. \n3. Sleep Journal - I maintain a personal sleep journal in an Excel file. I collect the following information:\n    - Restfulness Score. This is my own personal measure of how rested I feel.\n    - Notes about how I feel throughout the day and my perception of how my sleep went. I might provide notes about staying up late, drinking alcohol, or feeling sick. Anything that might provide context when reviewing at a later date.\n    - Dream notes in addition to a binary column for whether or not I had vivid dreams each night.\n\n\nThese are my objectives for this analysis:\n1. Test the efficacy of the Oura Ring and the Sleep Cycle App and determine the most useful metrics. There is a lot of information housed in these apps, particularly the Oura app, and I'd like to know which of these metrics are most critical to how rested I feel every day.\n2. Understand which of my activities correlate most strongly with these key metrics that impact my rest and recovery.\n3. Identify beneficial\/problematic patterns in my behavior that can be enhanced\/corrected.\n4. Present the information in fun, interesting ways that provide insights.\n5. Build in such a way that allows others to plug in their data without too much trouble.\n\n<br>\n\n**Side Notes:**\n\n- HRV (Heart Rate Variability) is a widely accepted measure of a person's readiness to perform difficult tasks. Higher HRV means that the nervous system is more balanced, as it is more responsive to the parasympathetic system and the sympathetic system. The parasympathetic system tells the heart to beat faster, while the sympathetic system tells it to beat slower. If HRV is lower, it means that the heart is responding more strongly to the inputs from one of these two systems, and that the body is working hard for some reason. Perhaps the person is sick, stressed, or recovering from a difficult workout or injury.\n\n\n- I prefer to use *direct measurements* in this analysis wherever possible, rather than \"scores\" as determined by Oura. As such, I will favor metrics like \"Average HRV\" and \"Average Resting Heart Rate\" over metrics like \"Readiness Score,\" which is calculated in ways that Oura does not share.\n\n\n- So far, I've only collected data for nearly 2 months (began at the beginning of February 2020). Any conclusions would be premature.\n\n- This code was written in Jupyter Lab, and the code gets chopped up in weird ways sometimes in this notebook.","84deaa27":"### Average Resting Heart Rate","36f4fb61":"### Restfulness Score","c8a3acbd":"### End Time","6ca8f54a":"### Correlogram of Oura Metrics, Sleep Cycle Metrics, and Personal Restfulness Score","8aeb64f8":"## Restfulness Score","fe7802b4":"## Pairwise Plots - Restfulness vs Oura Metrics","a79b3aaa":"### Initial Impressions:\n- My weekends are associated with generally worse sleep habits and metrics. Start and End timing are both later than during the week. I tend to get less Deep Sleep during the weekend, and my Restfulness Score tends to be lower. My Average Resting Heart Rate is higher on weekends, while my Average HRV is lower. ","88b02581":"## ANOVA and Correlation for Critical Metrics and Categorical Variables","075b390d":"### Average HRV","830466f0":"### Sleep Score","d4d26300":"### Start Time","cda1b102":"### HVR versus Resting Heart Rate","04bffc5b":"### Frequency","1b1b33a3":"#### HTML Table Format","aa76474f":"### Initial Impressions:\n- The following metrics appear to be the best candidates for investigating further:\n     - Restfulness Score - This is my benchmark. While imperfect, it is my best estimate of how I personally feel.\n     - Deep Sleep Time - This metric appears to correlate with more other metrics than any other measure.\n     - Average HRV - This is my best measure of \"readiness\" and appears to have some moderate correlations. This is also a very reliable measurement that should not be heavily impacted by Oura algorithms.\n     - Average Resting Heart Rate - This is another good measure of readiness and recovery, and appears to have some moderate correlations. This is also a very reliable measurement that should not be heavily impacted by Oura algorithms.\n     - Start v 12AM, End v 12AM - There appears to be moderate correlation with heart rate and heart rate variability.","93c0ec7f":"### Correlation of Activities","55b848a1":"### Prepare Sleep Cycle table (sc_table)","a14b1d43":"### Correlation of Sleep Metrics with Activities (5+ Hits and Misses)","f76f4b67":"### Deep Sleep versus REM Sleep","2d5ea6ca":"### Total Sleep Time by Sleep Stage","ced6c7e8":"## Time Series Analysis","638858e4":"### Deep Sleep versus Restfulness Score","fe6ef8dd":"## Word Clouds","35109eda":"#### Initial Impressions:\n- It appears that Oura \"sleep times\" are closely correlated with \"sleep scores.\" For example, in the first month, REM Sleep Time is perfectly correlated with REM Sleep Score. This is true for Total Sleep Time and Total Sleep Score as well. Deep Sleep Time, however, does not perfectly correlate with Deep Sleep Score. I believe this is because Oura has some predetermined amount of time for each stage that results in a \"perfect score\" of 100, and I have never exceeded that time for REM Sleep or Total Sleep in this first month, but I have exceeded it for Deep Sleep. I will examine the top scores for each of REM Sleep, Total Sleep, and Deep Sleep to confirm.","ab34c71a":"## Binary Activities - Frequency and Correlation","546bd2b5":"## Exploratory Data Analysis","fd0f7c0b":"## Import Libraries","1187b7cf":"### Prepare OURA table (oura_table)","c0966c8f":"## Average Resting Heart Rate","cbcb9f44":"## Deep Sleep Time","2e86024b":"### Initial Impressions:\n- Some activities are completed too frequently to analyze correlation with sleep metrics. For example, I've had coffee almost (if not) every single day since tracking began. I've taken sleep drugs only once. In general, I won't spend time analyzing activities that don't have at least 5 occurrences of success and failure. Even that is pushing it.","be55a148":"#### Initial Impressions:\n- Of all directly measured metrics, my restfulness appears to correlate most strongly with Oura \"Average Resting Heart Rate,\" \"Average HRV, and \"Deep Sleep Time.\"\n- Sleep Cycle start time (\"Start v 12AM\") and end time (\"End v 12AM\") appear to have moderate correlations with \"Average Resting Heart Rate,\" \"Average HRV,\" \"Deep Sleep Time, and \"REM Sleep Time.\" I wonder if this has to do with differing habits on weekends, when my start and end times tend to shift.","f8132f48":"### Prepare Sleep Journal table (journal_table)","0180d29d":"### Deep Sleep Time","ada1c726":"### REM Sleep Time","911b5975":"## REM Sleep Time"}}