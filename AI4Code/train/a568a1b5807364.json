{"cell_type":{"4bbcd5b3":"code","fe378fd0":"code","386d2a9c":"code","547f9967":"code","ad6cae8d":"code","ebfd9d08":"code","8cc92c88":"code","5e4158cc":"code","1a5e14a9":"code","073f2491":"code","8900f224":"code","2ab43769":"code","5d3b35a4":"code","3d351e63":"code","581138c9":"code","5d614989":"code","abc25060":"code","796ca7ee":"markdown","fa5c584a":"markdown","35040303":"markdown","ff5659f0":"markdown"},"source":{"4bbcd5b3":"!pip install tqdm==4.54.1 # force specific version, because newer version does not seem to work with neuralprophet...","fe378fd0":"# install neuralprophet first\n!pip install neuralprophet","386d2a9c":"# packages\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nfrom fbprophet import Prophet\nfrom fbprophet.plot import plot_plotly, plot_components_plotly # for interactive plots\n\nfrom neuralprophet import NeuralProphet\nfrom neuralprophet import set_random_seed\n# documentation: https:\/\/ourownstory.github.io\/neural_prophet\/","547f9967":"# load data\ndf = pd.read_csv('..\/input\/covid19-data-from-john-hopkins-university\/CONVENIENT_global_deaths.csv')","ad6cae8d":"# extract time series\nsel_country = 'Italy'\nn = df.shape[0] - 1\ndf_sel = df[1:n+1] # remove first row!\ndf_sel = df_sel[['Country\/Region',sel_country]] # select date + specific country column\n# change column names\ndf_sel = df_sel.rename(columns={'Country\/Region': 'ds', sel_country : 'y'})\n\ndf_sel.tail()","ebfd9d08":"# plot original time series\nplt.rcParams['figure.figsize'] = (16, 8) # resize plot window\n\ndf_sel.plot(x='ds', y='y');\nplt.title('Development of Deaths')\nplt.grid()\nplt.show()","8cc92c88":"# define a fit model\nm = Prophet(n_changepoints=150,\n            changepoint_prior_scale=0.5,\n            changepoint_range=0.95,\n            weekly_seasonality=7)\nm.fit(df_sel);","5e4158cc":"# number of days to project into the future\nn_projection = 28\n# prepare data frame to include future days for prediction\nfuture = m.make_future_dataframe(periods=n_projection)","1a5e14a9":"# calc predictions\nforecast_1 = m.predict(future)\n# and show result\nforecast_1.head()\n# and plot\nm.plot(forecast_1);","073f2491":"# show components of fit\nm.plot_components(forecast_1);","8900f224":"# interactive version of plot\nplot_plotly(m, forecast_1)","2ab43769":"# define and fit model\nset_random_seed(1234)\nnm = NeuralProphet(n_changepoints=100,\n                   daily_seasonality=False,                   \n                   yearly_seasonality=False,\n                   weekly_seasonality=7,\n                   changepoints_range=0.95,\n                   num_hidden_layers=1, # default: 0\n                   seasonality_reg=0.1)\n\nnm_result = nm.fit(df_sel, freq='D')","5d3b35a4":"nm_result.head()","3d351e63":"plt.rcParams['figure.figsize'] = (7, 9) # resize plot window\nf, (ax1, ax2, ax3) = plt.subplots(3, 1, sharex=True)\nax1.plot(nm_result.SmoothL1Loss)\nax1.set_title('SmoothL1Loss')\nax1.grid()\nax2.plot(nm_result.MAE)\nax2.set_title('MAE')\nax2.grid()\nax3.plot(nm_result.RegLoss)\nax3.set_title('RegLoss')\nax3.grid()\nplt.show()","581138c9":"# prepare data frame to include future days for prediction\nfuture = nm.make_future_dataframe(df_sel, periods = n_projection,\n                                  n_historic_predictions=len(df_sel))\n# predict\nforecast_2 = nm.predict(future)\n# and plot forecast\nnm.plot(forecast_2);","5d614989":"# show components of fit again\nnm.plot_components(forecast_2);","abc25060":"# detailed parameters\nnm.plot_parameters();","796ca7ee":"# Use Prophet","fa5c584a":"# Now use NeuralProphet","35040303":"# First steps with Prophet and NeuralProphet for forecasting","ff5659f0":"# Load and convert data"}}