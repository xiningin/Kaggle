{"cell_type":{"e1b6f9eb":"code","c6a4c7bc":"code","9b6a8e2e":"code","5bfddc77":"code","8f140cd4":"code","0e2b2853":"code","e75be306":"code","d76d13fb":"code","2e29c60c":"code","df4a8ba6":"code","32ff8548":"code","fe9650d7":"markdown","1461054b":"markdown","b70aebc5":"markdown","c4fbc2c8":"markdown","e0b9aac3":"markdown","d3449b90":"markdown","b70ff7c1":"markdown","094a5b20":"markdown","87bb574c":"markdown","b0c00473":"markdown","8bbc0821":"markdown","0b190bea":"markdown","349f369b":"markdown","fa200c79":"markdown","d69f7186":"markdown","ebdb288d":"markdown","781cddc6":"markdown","55c86474":"markdown","34a7e9ff":"markdown"},"source":{"e1b6f9eb":"#Importing Requierd Libraries\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport numpy as np\n\n# for Interactive Shells\nfrom IPython.display import display\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n\n#removing warnings\nimport sys\nimport warnings\nif not sys.warnoptions:\n    warnings.simplefilter(\"ignore\")\n    \n# sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, MinMaxScaler, LabelEncoder\nfrom sklearn.feature_selection import SelectFromModel\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report \n\n# to depict tree_prediction\n#! pip install pydotplus\n#from pydotplus import graph_from_dot_data\nfrom sklearn.tree import export_graphviz\nfrom IPython.display import Image\n\n# plotly express\nfrom datetime import date\nimport plotly.express as px\nimport plotly.graph_objects as go\nimport plotly.figure_factory as ff\n\n#secrets\nfrom kaggle_secrets import UserSecretsClient\nsecret_label = \"notebook_secret\"\nsecret_value = UserSecretsClient().get_secret(secret_label)\ndf = pd.read_csv('..\/input\/board-games\/bgg_dataset.csv', sep=';', decimal=',')\ndisplay(df.head(2))\n#display(df.info());\n\n# some options\n%matplotlib inline\nsns.set_theme(style=\"whitegrid\")\nsns.set_context(\"notebook\", font_scale=1.5, rc={\"lines.linewidth\": 2.5});\n\npd.set_option('display.max_rows', 15)\npd.set_option('display.max_columns', 20)\npd.set_option('display.width', 500);","c6a4c7bc":"# to lower case\ndf.columns = df.columns.str.lower()\n\n# making lists of columnc category\nnumeric= ['year published','min players','max players',\n          'play time','min age','users rated','complexity average',\n          'rating average','bgg rank','owned users']\ncategorical = ['name','mechanics','domains']\n\ndf['year published'] = df['year published'].fillna(1855) # we will change it later\n# changing dtypes\ndf['year published'] = df['year published'].astype('int', errors='ignore')\n\nfor i in ['complexity average',\n          'rating average']:\n    df[i] = df[i].astype('float64')\n\ndf.drop('id', axis=1, inplace=True)\n#display(df.info())","9b6a8e2e":"# errors\ndata = df[df['year published'] < 1900]\nfig = px.histogram(data, x=\"year published\",height=300,opacity=0.75)\n\nfig.update_layout(\n    title_text='Histogram for year < 1900', # title of plot\n    xaxis_title_text='Year', # xaxis label\n    yaxis_title_text='Count',uniformtext_minsize=8, uniformtext_mode='hide'\n)\n\nfig.show()","5bfddc77":"# missing values\n\ndata_missing = df.isnull().sum().reset_index()\n\n#seaborn\n# fig = plt.figure(figsize=(24, 4))\n# sns.barplot(y=data_missing['index'], x=data_missing.iloc[:,1], orient='h', palette=\"mako\")\n# sns.barplot(y=data_missing['index'], x=data_missing.iloc[:,1], orient='h', palette=\"mako\")\n# plt.xticks(rotation=45)\n# plt.xlabel('Missing values ratio'), plt.ylabel('Column names')\n# plt.title('Missing values in %');\n\n#plotly\nfig = px.bar(data_missing, \n             y=data_missing['index'], \n             x=data_missing.iloc[:,1], \n             text=data_missing.iloc[:,1],\n             height=400,opacity=0.75)\n\nfig.update_traces(texttemplate='%{text:.2s}', textposition='outside')\nfig.update_layout(title_text='Missing values in each column', # title of plot\n    xaxis_title_text='Year', # xaxis label\n    yaxis_title_text='Count',\n    uniformtext_minsize=8, uniformtext_mode='hide')\nfig.show();\n\n# filling owned users column and domains, mechanics with 'unknown'\ndf['owned users'] = df['owned users'].fillna(df.groupby(['year published'])['owned users'].transform('median'))\n\ndf['domains'] = df['domains'].fillna('unknown')\ndf['mechanics'] = df['mechanics'].fillna('unknown')\nfor i in categorical:\n    df[i] = df[i].astype('category')","8f140cd4":"def hist_plotly(row, col, data, columns, title):\n    fig = make_subplots(rows=row, cols=col)\n\n    i, j = 1, 1\n\n    for k in range(row*col):\n    \n        fig.add_trace(\n            go.Histogram(x=data[columns[k]], name=columns[k],opacity=0.75),\n            row=i, col=j)\n        if j \/\/ col == 1:\n            i += 1\n            j = 1\n        else:\n            j += 1\n    fig.update_layout(title_text=title,height=400)\n    fig.show()\nhist_plotly(row=2, col=5, data=df, columns=numeric, title=\"Histograms before removing outliers\")","0e2b2853":"def boxes_plotly(row, col, data, columns, title):\n    fig = make_subplots(rows=row, cols=col)\n\n    i, j = 1, 1\n\n    for k in range(row*col):\n    \n        fig.add_trace(\n            go.Box(y=data[columns[k]], name=columns[k],opacity=0.75),\n            row=i, col=j)\n        if j \/\/ col == 1:\n            i += 1\n            j = 1\n        else:\n            j += 1\n    fig.update_layout(title_text=title,height=400)\n    fig.show()\n\n\nboxes_plotly(row=2, col=5, data=df, columns=numeric, title=\"Box Plots before removing outliers\")","e75be306":"# removing outliers with the IQO method\nnumeric2 = ['play time','min age','users rated','complexity average',\n          'rating average','owned users']\n\nQ1 = df[numeric].quantile(0.25)\nQ3 = df[numeric].quantile(0.75)  \nIQR = Q3 - Q1\n#print('Here we will get IQR for each column\\n',IQR)\n\ndf_filtered = df[~((df[numeric] < (Q1 - 1.5 * IQR)) |(df[numeric] > (Q3 + 1.5 * IQR))).any(axis=1)]\n# plot the boxes\nboxes_plotly(row=2, col=5, data=df_filtered, columns=numeric, title=\"Box Plots after removing outliers\")","d76d13fb":"hist_plotly(row=2, col=5, data=df_filtered, columns=numeric, title=\"Histograms before removing outliers\")","2e29c60c":"#grouping data\n# the most often domains\ng1 = df_filtered.groupby('domains').count().reset_index().\\\n                                    sort_values('rating average', ascending=False).head(8)\ng1.drop(39, axis=0, inplace=True) #without 'unknown' domain\ndfg1 =  df_filtered[df_filtered.domains.isin(g1['domains'])].\\\n                                    groupby(['year published','domains'])['rating average'].mean().\\\n                                    reset_index().dropna()\n\n#ploting graph\nfig = px.line(dfg1, x=\"year published\", y=\"rating average\", color='domains')\nfig.update_layout(title_text='The dynamic of rating average for the most 7 frequent domains',height=400)\nfig.show()","df4a8ba6":"dfg2 = df_filtered.groupby(['year published','domains'])['owned users'].sum().reset_index()  \ndfg2 = dfg2[dfg2.domains.isin(g1['domains'])]\n\n#ploting graph\nfig = px.line(dfg2, x=\"year published\", y=\"owned users\", color='domains')\nfig.update_layout(title_text='The dynamic of num owned users for the most 7 frequent domains',height=400)\nfig.show()","32ff8548":"corr = round(df.corr(), 2)\nmask = np.triu(np.ones_like(corr, dtype=bool))\ndf_mask = corr.mask(mask)\n\nfig = ff.create_annotated_heatmap(z=df_mask.to_numpy(), \n                                  x=df_mask.columns.tolist(),\n                                  y=df_mask.columns.tolist(),\n                                  hoverinfo=\"none\", #Shows hoverinfo for null values\n                                  showscale=True, ygap=1, xgap=1,colorscale='Viridis',opacity=0.75\n                                 )\n\nfig.update_xaxes(side=\"bottom\")\n\nfig.update_layout(\n    title_text='Correlation between values', \n    title_x=0.5, \n    width=700, \n    height=500,\n    xaxis_showgrid=False,\n    yaxis_showgrid=False,\n    xaxis_zeroline=False,\n    yaxis_zeroline=False,\n    yaxis_autorange='reversed',\n    template='plotly_white'\n)\n\nfor i in range(len(fig.layout.annotations)):\n    if fig.layout.annotations[i].text == 'nan':\n        fig.layout.annotations[i].text = \"\"\n\nfig.show()","fe9650d7":"<a id=\"sub-3\"><\/a>\n<div style=\"font-weight: bold;font-size:20px\">1.3 Mechanics&Domains columns, close examination<\/div>","1461054b":"><b>Making additional columns and plotting pie charts<\/b>","b70aebc5":"><div style=\"background-color: #F7FFFF;\">\n><b>Interquartile Range Method to remove the outliers<\/b>\n>\n>Not all data is normal or normal enough to treat it as being drawn from a Gaussian distribution.\nA good statistic for summarizing a non-Gaussian distribution sample of data is the <i>Interquartile Range, or IQR for short.<\/i>\n>\n>The IQR is calculated as the difference between <b>the 75th and the 25th percentiles<\/b> of the data and defines the box in a box and whisker plot.\n>\n>Remember that percentiles can be calculated by sorting the observations and selecting values at specific indices. The 50th percentile is the middle value, or the average of the two middle values for an even number of examples. If we had 10,000 samples, then the 50th percentile would be the average of the 5000th and 5001st values.\n>\n>We refer to the percentiles as quartiles (\u201cquart\u201d meaning 4) because the data is divided into four groups via the 25th, 50th and 75th values.","c4fbc2c8":"<div style=\"font-weight: bold;font-size:40px\">Introduction<\/div>\n\n><div style=\"background-color: #F7FFFF;\">\n><ul style=\"font-size:16px;\">\n>    \n><b>About this dataset<\/b>\n>\n>This dataset contains data collected on board games from the BoardGameGeek (BGG) website in February 2021. BGG is the largest online collection of board game data which consists of data on more than 100,000 total games (ranked and unranked).\n>\n>The voluntary online community contributes to the site with reviews, ratings, images, videos, session reports and live discussion forums on the expanding database of board games.\n>\n>This data set contains all ranked games (~20,000) as of the date of collection from the BGG database. Unranked games are ignored as they have not been rated by enough BGG users (a game should receive at least 30 votes to be eligible for ranking).\n>\n> <b>Target is:<\/b>\n>to predict board game rating based on its mechanics and features.\n>  \n>Many thanks to the \u0441reator of this dataset [the \u0441reator of this dataset](https:\/\/www.kaggle.com\/andrewmvd),\n><br>If you like this project, please, support me - UPvote!\ud83d\ude03\n>\n><center><img src=\"https:\/\/i.pinimg.com\/564x\/dc\/a9\/6b\/dca96b8f1ac38961e6b3feaf2ae35f89.jpg\" width=300><\/center>\n><b> Data on board games collected include:<\/b>\n><li>Board game id;\n><li> Name;\n><li> Year published;\n><li> Miniminum number of players recommended;\n><li> Maximum number of players recommended;\n><li> Playing time;\n><li> Recommended minimum age of players;\n><li> Number of users that rated the game;\n><li> Average rating received by the game;\n><li> BGG rank;\n><li> Average complexity value of the game;\n><li> Number of BGG registered owners of the game;\n><li> Mechanics used by the game;\n><li> Board game domains that the game belongs to.\n\n<br><div style=\"font-weight: bold;font-size:30px\">Table of Contents<\/div>\n\n>[Step 1: Examining Data & EDA](#section-one)\n>    - [1.1 Basic information & Data preproccessing](#sub-1)\n>    - [1.2 EDA](#sub-2)\n>    - [1.3 Mechanics&Domains columns, close examination ](#sub-3)<b>(in process..)<\/b>\n> \n>    \n>[Step 2: Predicting Rating Average](#section-two)  <b>(in process..)<\/b>\n>    - [2.1 Performing clustering](#sub-5)\n>    - [2.2 Metrics and results](#sub-6)\n>[Step 3: Overall conclusion](#section-three)  <b>(in process..)<\/b>","e0b9aac3":"><b>Studying and preproccessing missing values.<\/b>\n><br> There are almost half missed values in domain column! We can't fill it smth or drop from the df as well as in 'mechanics' column, that is why we fill these columns with 'unknown' value;\n><br> In 'owned users' only 23 missed values, we fill it with median value as (you will see it below) there are a lot of outliers and the distribution is right-skewed, so the mean is larger than the median.","d3449b90":"><div style=\"background-color: #F7FFFF;\">\n><div style=\"font-weight: bold;font-size:18px\">General information about the data, and what have been done:<\/div>\n><ul style=\"font-size:16px;\">\n>- With the use .describe() method we observed statistical data and the general info (above, .info() method):\n><center><img src=\"https:\/\/i.pinimg.com\/originals\/d7\/b4\/3d\/d7b43d46cf3f4f217240d2a6ee2f78ce.jpg\" width=700><\/center>\n><br>- There are 20343 entries and 13 columns, one column is game's ID;  \n><br>- There were no duplicates, but a lot missing values;\n><br>- The column's names were renamed to lower case, the 'ID' column was dropped, dtypes were  changed;  \n><br>- We analyzed that some games in the dataset are ancient, they were created a long time ago, we didn't dropped them or changed;\n><br>- Missing values in 'users owned' were filled with median, columns 'mechanics' and 'domains' were filled with 'unknown';\n><br>- Almost all numeric features distributions are skewed, there are lots of outliers, we've applied IQR method to make filtered data, as outliers can affect ML algorithms;\n><br>- From the boxplots above we see that most games were published recently; median number of min players - 2 \\ max players - 4; median age is 10, but there are some games with 2 y.o. is enough;  in average rating is 6.23; median owned users is about 240;\n><br>At the next stepthe data's be studied in greater depth..\n><\/ul>\n><\/div>","b70ff7c1":"<a id=\"#section-two\"><\/a>\n<br><div style=\"font-weight: bold;font-size:30px\">Step 1: Examining Data & EDA<\/div>","094a5b20":"><b>Studying distributions after deleting outliers.<\/b>\n><br>- We see here only one distribution close to Gaussian - rating axerage, our target column;\n><br>- BGG rank is like bi-modal, there are two picks - 5000-5500 and 18000-18500;\n><br>- 'Year published' distribution is left-skewed, but we see the increase of published games since 2000. I believe it is due to technological progress;\n><br>- 'Owned users' and 'Users rated'  are very similar, maybe there is a strong positive correlation between these features. We'll check it later;\n><br>- In most cases the min players number equals to 2.","87bb574c":"><b>Studying and preproccessing outliers.<\/b>\n><br>Firstly, it's needed to check distributions in order to understand which method will be the most appropriate.","b0c00473":"<a id=\"sub-2\"><\/a>\n<div style=\"font-weight: bold;font-size:20px\">1.2 EDA<\/div>","8bbc0821":"<a id=\"sub-1\"><\/a>\n><div style=\"font-weight: bold;font-size:20px\">1.1 Basic information & Data preproccessing<\/div>\n>Importing libraries and reading data","0b190bea":">The game \"Hus\" has missing year published. In such cases it is usefull to check on the Internet. We can see that:\n><br><i>Hus was first described by the Lutheran missionary Johann Georg Kr\u00f6nlein (1826-1892) in 1855.<\/i>  \n> Excellent, we fill this missing value with 1855 y., [the source is here](https:\/\/mancala.fandom.com\/wiki\/Hus)\n>\n><b>Studying  negative values in the 'Year published' column: let's take a look at the distribution and discover why it is so\ud83e\udd14","349f369b":"<a id=\"#section-three\"><\/a>\n<br><div style=\"font-weight: bold;font-size:30px\">Overall conclusion<\/div>","fa200c79":"<a id=\"section-end\"><\/a>\n<div style=\"font-size:40px\" align=center>Work in Progress\n<img src=\"https:\/\/i.pinimg.com\/564x\/9a\/42\/79\/9a4279006e123929b83ad139c42c5da6.jpg\" width=50>\n\n<\/div>\n\n><div style=\"background-color: #F7FFFF;\">\n><ul style=\"font-size:20px;\">\n <b>Thank you<\/b> so much for reading my project. \n <br>Please, UPvote, if you like it or find usefull!\ud83d\ude04\n\n><\/ul>\n><\/div>","d69f7186":"><div style=\"background-color: #F7FFFF;\">\n><b>Basic info,changing dtypes, renaming columns. The info -><\/b>\n><center><img src=\"https:\/\/i.pinimg.com\/564x\/ae\/dd\/2b\/aedd2b878759e217983d09062504ca4a.jpg\" width=300><\/center>\n> 1. It's needed to apply the method '.lower()' to the column as it'd be more convinient to work with the data;\n><br>2. We've observed that there are some columns with 'object' dtype, also the 'complexity average','rating average' columns are object instead of float. We're going to change the first to the 'category' and the second to the 'float'. 'Year published' should be int;\n><br>3. The 'id' column isn't needed, we'll drop it.","ebdb288d":"><b>The dynamic of features during time.","781cddc6":"><b>Studying correlation between values.<\/b>\n><br>We'll use non-filteref dataset to search correlation on the larger df.","55c86474":"> We see that there are not so many of games with negative data and after checking some of them we can colnclude <b>it is correct<\/b>, why? Let's take into account the game 'Go' which was created according to the dataset 2200 years BCE. Surfing on the Internet we can find the information about:\n>\n> <i>\"According to legend, the game GO was created as a teaching tool after the ancient Chinese Emperor Yao \u582f (2356\u20132255 BCE). According to some sources, this date is as early as 2356 bce, but it is more likely to have been in the 2nd millennium bce.\"<\/i>\n>\n>\n> So here is the answer! Some games in the dataset are really ancient, <b>they were created a long time ago<\/b>, we won't drop them or change, just investigate and analyze. But there were some missing values, we will preproccess them at the next step ->","34a7e9ff":"<a id=\"#section-two\"><\/a>\n<br><div style=\"font-weight: bold;font-size:30px\">Step 2: Predicting Rating Average<\/div>"}}