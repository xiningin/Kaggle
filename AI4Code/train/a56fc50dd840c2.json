{"cell_type":{"e99f0f37":"code","00e42b59":"code","12b5ba70":"code","92aa3e99":"code","ca074552":"code","ed8ebda9":"code","f47d3707":"code","93aa4dc7":"code","06b73d87":"code","a12276ba":"code","3f47e812":"code","48837089":"code","1aae5317":"code","61d0adab":"code","85cf2150":"code","4bb8567c":"code","e4bde55e":"code","652cb5ec":"code","79a490bf":"code","5051572e":"code","879ad90d":"code","d3e19030":"code","92ebc159":"code","a0778990":"code","9e9c44a5":"code","f561b451":"code","5e12d0db":"code","6977cd0e":"code","1c1b7d04":"code","cd17df6f":"code","b0aaf6fe":"code","ff0dba8e":"code","2816bb49":"code","3f8f4a24":"code","8ea70f6a":"code","987668ed":"code","99d8d400":"code","6d1e9634":"code","34a52f83":"code","134f6922":"code","a9794a93":"markdown","69326df7":"markdown","d489830d":"markdown","0b079d4e":"markdown","af97d870":"markdown","bd2e1e07":"markdown","fb97a010":"markdown","cc411ee9":"markdown","ac9e295a":"markdown","a61335fc":"markdown","f7538822":"markdown"},"source":{"e99f0f37":"import numpy as np\nimport pandas as pd \nfrom collections import Counter\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nplt.style.use('seaborn-bright')\n\nfrom scipy import stats\nfrom scipy.stats import norm, skew, boxcox_normmax, boxcox\nfrom scipy.special import boxcox1p\n\nfrom sklearn.linear_model import ElasticNet, Lasso\nfrom sklearn.kernel_ridge import KernelRidge\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.svm import SVR\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import RobustScaler, LabelEncoder\nfrom sklearn.model_selection import KFold, cross_val_score\nfrom mlxtend.regressor import StackingCVRegressor\nfrom sklearn.metrics import mean_squared_error\nfrom xgboost import XGBRegressor\nfrom lightgbm import LGBMRegressor\n\nimport warnings\nwarnings.filterwarnings('ignore')\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","00e42b59":"train = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/train.csv')\ntest = pd.read_csv('\/kaggle\/input\/house-prices-advanced-regression-techniques\/test.csv')","12b5ba70":"train.info()\ntrain.head()","92aa3e99":"train.drop(['Id'], axis=1, inplace=True)\ntest.drop(['Id'], axis=1, inplace=True)","ca074552":"print('Train data shape: {}'.format(train.shape))\nprint('Test data shape: {}'.format(test.shape))","ed8ebda9":"train = train[train.GrLivArea < 4500]\ntrain.reset_index(drop=True, inplace=True)\n\ny = train['SalePrice'].reset_index(drop=True)","f47d3707":"plt.figure(figsize=(6, 4))\nsns.distplot(train['SalePrice'] , fit=norm)\n(mu, sigma) = norm.fit(train['SalePrice'])\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')","93aa4dc7":"train[\"SalePrice\"] = np.log1p(train[\"SalePrice\"])\n\nplt.figure(figsize=(6, 4))\nsns.distplot(train['SalePrice'] , fit=norm)\n(mu, sigma) = norm.fit(train['SalePrice'])\n\nplt.legend(['Normal dist. ($\\mu=$ {:.2f} and $\\sigma=$ {:.2f} )'.format(mu, sigma)],\n            loc='best')\nplt.ylabel('Frequency')\nplt.title('SalePrice distribution')","06b73d87":"train_features = train.drop(['SalePrice'], axis=1)\ntest_features = test\n\nfeatures = pd.concat([train_features, test_features]).reset_index(drop=True)\nfeatures.shape","a12276ba":"train_features = train.drop(['SalePrice'], axis=1)\ntest_features = test\n\nfeatures = pd.concat([train_features, test_features]).reset_index(drop=True)\nfeatures.shape","3f47e812":"na_data = (features.isnull().sum() \/ len(features)) * 100\nna_data = na_data.drop(na_data[na_data == 0 ].index).sort_values(ascending=False)[:30]\n\nmissing_data = pd.DataFrame({'Missing Ratio': na_data})\nmissing_data","48837089":"features['MiscFeature'] = features['MiscFeature'].fillna('None')\nfeatures['Alley'] = features['Alley'].fillna('None')\nfeatures['Fence'] = features['Fence'].fillna('None')\nfeatures['FireplaceQu'] = features['FireplaceQu'].fillna('None')\n\nfeatures['LotFrontage'] = features.groupby('Neighborhood')['LotFrontage'].transform(lambda x: x.fillna(x.median()))","1aae5317":"for col in ('GarageType', 'GarageFinish', 'GarageQual', 'GarageCond'):\n    features[col] = features[col].fillna('None')","61d0adab":"for col in ('GarageYrBlt', 'GarageArea', 'GarageCars'):\n    features[col] = features[col].fillna(0)","85cf2150":"for col in ('BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF','TotalBsmtSF', 'BsmtFullBath', 'BsmtHalfBath'):\n    features[col] = features[col].fillna(0)","4bb8567c":"for col in ('BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2'):\n    features[col] = features[col].fillna('None')","e4bde55e":"features['MasVnrType'] = features['MasVnrType'].fillna('None')\nfeatures['MasVnrArea'] = features['MasVnrArea'].fillna(0)","652cb5ec":"print(features['Utilities'].value_counts(),\n      features['Street'].value_counts(),\n      features['PoolQC'].value_counts(), sep='\\n')","79a490bf":"features = features.drop(['Utilities'], axis=1)\nfeatures = features.drop(['Street'], axis=1)\nfeatures = features.drop(['PoolQC'], axis=1)","5051572e":"features['Functional'] = features['Functional'].fillna('Typ')\nfeatures['MSSubClass'] = features['MSSubClass'].fillna('None')\n\nfeatures['Electrical'] = features['Electrical'].fillna(features['Electrical'].mode()[0])\nfeatures['KitchenQual'] = features['KitchenQual'].fillna(features['KitchenQual'].mode()[0])\nfeatures['Exterior1st'] = features['Exterior1st'].fillna(features['Exterior1st'].mode()[0])\nfeatures['Exterior2nd'] = features['Exterior2nd'].fillna(features['Exterior2nd'].mode()[0])\nfeatures['MSZoning'] = features['MSZoning'].fillna(features['MSZoning'].mode()[0])\nfeatures['SaleType'] = features['SaleType'].fillna(features['SaleType'].mode()[0])","879ad90d":"features['MSSubClass'] = features['MSSubClass'].apply(str)\n\nfeatures['OverallCond'] = features['OverallCond'].astype(str)\n\nfeatures['YrSold'] = features['YrSold'].astype(str)\nfeatures['MoSold'] = features['MoSold'].astype(str)","d3e19030":"na_data = (features.isnull().sum() \/ len(features)) * 100\nna_data = na_data.drop(na_data[na_data == 0 ].index).sort_values(ascending=False)[:30]\n\nmissing_data = pd.DataFrame({'Missing Ratio': na_data})\nmissing_data","92ebc159":"cat_values = ['FireplaceQu', 'BsmtQual', 'BsmtCond', 'GarageQual', 'GarageCond', \n        'ExterQual', 'ExterCond','HeatingQC', 'KitchenQual', 'BsmtFinType1', \n        'BsmtFinType2', 'Functional', 'Fence', 'BsmtExposure', 'GarageFinish', 'LandSlope',\n        'LotShape', 'PavedDrive', 'Alley', 'CentralAir', 'MSSubClass', 'OverallCond', \n        'YrSold', 'MoSold']\n\nfor col in cat_values:\n    encoder = LabelEncoder()\n    encoder.fit(list(features[col].values))\n    features[col] = encoder.transform(list(features[col].values))\n    \nprint('Features data shape: {}'.format(features.shape))","a0778990":"num_dtypes = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']\nnumeric = []\nfor item in features.columns:\n    if features[item].dtype in num_dtypes:\n        numeric.append(item)\nskew_features = features[numeric].apply(lambda x: skew(x)).sort_values(ascending=False)\n\nhigh_skew = skew_features[skew_features > 0.5]\nskew_index = high_skew.index\n\nfor skewed_value in skew_index:\n    features[skewed_value] = boxcox1p(features[skewed_value], boxcox_normmax(features[skewed_value] + 1))","9e9c44a5":"features['TotalSF'] = features['TotalBsmtSF'] + features['1stFlrSF'] + features['2ndFlrSF']\n\nfeatures['TotalSqrFootage'] = features['BsmtFinSF1'] + features['BsmtFinSF2'] + features['1stFlrSF'] + features['2ndFlrSF']\n\nfeatures['TotalBathrooms'] = (features['FullBath'] + (0.5 * features['HalfBath']) +\n                              features['BsmtFullBath'] + (0.5 * features['BsmtHalfBath']))\n\nfeatures['TotalPorchSF'] = (features['OpenPorchSF'] + features['3SsnPorch'] +\n                              features['EnclosedPorch'] + features['ScreenPorch'] +\n                              features['WoodDeckSF'])\n\nfeatures['YrBltAndRemod'] = features['YearBuilt'] + features['YearRemodAdd']","f561b451":"features['HasPool'] = features['PoolArea'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['HasGarage'] = features['GarageArea'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['HasBasement'] = features['TotalBsmtSF'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['HasFireplace'] = features['Fireplaces'].apply(lambda x: 1 if x > 0 else 0)\nfeatures['Has2ndFloor'] = features['2ndFlrSF'].apply(lambda x: 1 if x > 0 else 0)","5e12d0db":"print('Features Data shape: {}'.format(features.shape))","6977cd0e":"features = pd.get_dummies(features).reset_index(drop=True)\nfeatures.shape","1c1b7d04":"X = features.iloc[:len(y), :]\nX_test = features.iloc[len(y):, :]\nX.shape, y.shape, X_test.shape","cd17df6f":"def rmsle(y, y_pred):\n    return np.sqrt(mean_squared_error(y, y_pred))","b0aaf6fe":"k_folds = KFold(n_splits=10, shuffle=True, random_state=42)\n\ndef cv_rmse(model, X=X):\n    return np.sqrt(-cross_val_score(model, X, y, scoring=\"neg_mean_squared_error\", cv=k_folds))","ff0dba8e":"gbr = GradientBoostingRegressor(n_estimators=3000, \n                                learning_rate=0.05,\n                                max_depth=4,\n                                max_features='sqrt',\n                                min_samples_leaf=15,\n                                min_samples_split=10,\n                                loss='huber',\n                                random_state =42)","2816bb49":"xgboost = XGBRegressor(n_estimators=3460,\n                       learning_rate=0.01,\n                       max_depth=3, min_child_weight=0,\n                       gamma=0, subsample=0.7,\n                       colsample_bytree=0.7,\n                       objective='reg:linear', nthread=-1,\n                       scale_pos_weight=1, seed=27,\n                       reg_alpha=0.00006)","3f8f4a24":"lgbm = LGBMRegressor(objective='regression', \n                                       n_estimators=5000,\n                                       num_leaves=4,\n                                       learning_rate=0.01, \n                                       max_bin=200, \n                                       bagging_seed=7,\n                                       feature_fraction_seed=7,\n                                       verbose=-1,\n                                       )","8ea70f6a":"lasso = make_pipeline(RobustScaler(), Lasso(alpha =0.0005, random_state=1))\nENet = make_pipeline(RobustScaler(), ElasticNet(alpha=0.0005, l1_ratio=.9, random_state=3))\nsvr = make_pipeline(RobustScaler(), SVR(C= 20, epsilon= 0.008, gamma=0.0003))","987668ed":"stack_regressor = StackingCVRegressor(regressors=(lasso, ENet, lgbm, gbr, xgboost),\n                                meta_regressor=xgboost,\n                                use_features_in_secondary=True)","99d8d400":"stack_model = stack_regressor.fit(np.array(X), np.array(y))\n\nlasso_model = lasso.fit(X, y)\nENet_model = ENet.fit(X, y)\nlgbm_model = lgbm.fit(X, y)\nxgboost_model = xgboost.fit(X, y)\ngbr_model = gbr.fit(X, y)","6d1e9634":"def blend_models_predict(X):\n    return ((0.1 * ENet_model.predict(X)) + \\\n            (0.1 * lasso_model.predict(X)) + \\\n            (0.15 * gbr_model.predict(X)) + \\\n            (0.2 * xgboost_model.predict(X)) + \\\n            (0.15 * lgbm_model.predict(X)) + \\\n            (0.3 * stack_model.predict(np.array(X))))","34a52f83":"print('RMSLE score on train data:')\nprint(rmsle(y, blend_models_predict(X)))","134f6922":"print('RMSLE score on test data:')\nprint(rmsle(y, blend_models_predict(X_test[:len(X)])))","a9794a93":"#### Encoding","69326df7":"#### Add Some More Features","d489830d":"## Data Overview","0b079d4e":"#### Skewed Values Processing","af97d870":"## Feature Engineering","bd2e1e07":"#### Splitting Features Data Back to Test and Train Data","fb97a010":"## Modeling","cc411ee9":"#### Validation Functions","ac9e295a":"#### Transforming Target Value","a61335fc":"#### Target Value","f7538822":"#### As a Result - No Missing Values"}}