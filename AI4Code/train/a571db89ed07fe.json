{"cell_type":{"f52792da":"code","7b959a68":"code","fe874ba7":"code","26f4bd63":"code","b85204d9":"code","c7af0126":"code","94887f61":"code","fb03844e":"code","7f1a85ad":"code","1cd0a5bc":"code","350238df":"code","1ad34096":"code","2e0b6af4":"code","92b90288":"code","07c5b331":"code","8fbafd12":"code","871e4cfa":"code","a9197b09":"code","5526a8e3":"code","c64a164f":"code","72a26eb7":"code","3f4319b0":"code","ca66753a":"code","cb34cbb7":"code","e8f22992":"code","a19542d7":"code","d8b175f9":"code","a4a93e94":"code","de5b73af":"code","570e02be":"code","69172ec2":"code","b4ca0483":"code","0aff4d5b":"code","85e20a81":"code","2844cf49":"code","4e71f40b":"code","92581b14":"code","e19c0d01":"code","178ce20d":"code","b5150dcc":"markdown","405700ef":"markdown","7af2f94a":"markdown","b230dce3":"markdown","af52d8a3":"markdown","9029f669":"markdown","c0a26f35":"markdown","2a0ce836":"markdown","d1b2be79":"markdown","1ae054dc":"markdown","3aa102b6":"markdown","1defa3f2":"markdown","35970611":"markdown"},"source":{"f52792da":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle\/python Docker image: https:\/\/github.com\/kaggle\/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I\/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Input data files are available in the read-only \"..\/input\/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 5GB to the current directory (\/kaggle\/working\/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to \/kaggle\/temp\/, but they won't be saved outside of the current session\nimport warnings\nwarnings.filterwarnings('ignore')","7b959a68":"train=pd.read_csv('..\/input\/pubg-finish-placement-prediction\/train_V2.csv')\ntest=pd.read_csv('..\/input\/pubg-finish-placement-prediction\/test_V2.csv')\nsample_submission=pd.read_csv('..\/input\/pubg-finish-placement-prediction\/sample_submission_V2.csv')","fe874ba7":"train.head()","26f4bd63":"test.head()","b85204d9":"print(train.shape, test.shape)","c7af0126":"train.info()","94887f61":"test.info()","fb03844e":"train.isnull().sum()","7f1a85ad":"test.isnull().sum()","1cd0a5bc":"train[train['winPlacePerc'].isnull()]","350238df":"train.drop(2744604, inplace=True)","1ad34096":"train.shape","2e0b6af4":"train['killsPerWalkDistance'] = train['kills']\/(train['walkDistance']+1)\ntrain[['kills', 'walkDistance', 'rideDistance', 'killsPerWalkDistance', 'winPlacePerc']].sort_values(by='killsPerWalkDistance').tail(10)","92b90288":"abnormalities_train=train[(train['walkDistance']==0)&(train['rideDistance']==0)][train['kills']>1]\nindexes_train=abnormalities_train.index.values\nindexes_train","07c5b331":"train.drop(index=indexes_train,inplace=True)\nprint(train.shape)","8fbafd12":"abnormalities_test=test[(test['walkDistance']==0)&(test['rideDistance']==0)][test['kills']>1]\nindexes_test=abnormalities_test.index.values\nindexes_test","871e4cfa":"test.drop(index=indexes_test,inplace=True)\nprint(test.shape)","a9197b09":"train_data=train[(train['winPlacePerc']<1)]\nprint(train_data.shape)","5526a8e3":"sns.distplot(train_data['kills'][:], rug=True)\nplt.title('Distribution of kills', fontsize=15)\nplt.show()","c64a164f":"plt.figure(figsize=(15,8))\nax = sns.boxplot(x=\"kills\",y=\"damageDealt\", data = train_data)\nax.set_title(\"Damage dealt vs. Number of Kills\")\nplt.show()","72a26eb7":"winperc=train_data.groupby('matchType').winPlacePerc.mean()\nwinperc.plot(kind='bar',figsize=(15,8))\nplt.title('Performance based on match-type',fontsize=18)\nplt.xticks(rotation=60)\nplt.show()","3f4319b0":"fig,ax=plt.subplots(figsize=(15,12))\nax=sns.heatmap(train_data.corr(),annot=True)","ca66753a":"corr=train_data.corr()\nround(corr,3)","cb34cbb7":"train_data['healsAndBoosts'] = train_data['heals']+train_data['boosts']\ntrain_data['totalDistance'] = train_data['walkDistance']+train_data['rideDistance']+train_data['swimDistance']\ntrain_data['DamageRate'] = train_data['damageDealt']\/(train_data['DBNOs']+1)\ntrain_data['avg_ranking'] = (train_data['killPoints']+train_data['rankPoints']+train_data['winPoints'])\/3","e8f22992":"test['healsAndBoosts'] = test['heals']+test['boosts']\ntest['totalDistance'] = test['walkDistance']+test['rideDistance']+test['swimDistance']\ntest['DamageRate'] = test['damageDealt']\/(test['DBNOs']+1)\ntest['avg_ranking'] = (test['killPoints']+test['rankPoints']+test['winPoints'])\/3","a19542d7":"x_train=train_data[[\"assists\",\"healsAndBoosts\",\"DamageRate\",\"killPlace\",\"avg_ranking\",\"kills\",\"longestKill\",\"matchDuration\",\"numGroups\",\"revives\",\"totalDistance\",\"teamKills\",\"vehicleDestroys\",\"weaponsAcquired\"]]\ny_train=train_data['winPlacePerc']\nx_test=test[[\"assists\",\"healsAndBoosts\",\"DamageRate\",\"killPlace\",\"avg_ranking\",\"kills\",\"longestKill\",\"matchDuration\",\"numGroups\",\"revives\",\"totalDistance\",\"teamKills\",\"vehicleDestroys\",\"weaponsAcquired\"]]\nprint(x_train.shape, y_train.shape, x_test.shape)","d8b175f9":"import sklearn\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.preprocessing import StandardScaler\nscaler=MinMaxScaler()\nx_train_mms=scaler.fit_transform(x_train)\nx_test_mms=scaler.transform(x_test)","a4a93e94":"import xgboost as xgb\nmodel_xgb = xgb.XGBRegressor(max_depth=19, gamma=0.3, learning_rate= 0.1, tree_method='exact', n_estimators=100)\nmodel_xgb.fit(x_train_mms,y_train)","de5b73af":"from sklearn.metrics import mean_absolute_error\nprint('MAE :', mean_absolute_error(y_train,model_xgb.predict(x_train_mms)))","570e02be":"xgb.plot_importance(model_xgb)","69172ec2":"from sklearn.ensemble import RandomForestRegressor\nmodel_rf = RandomForestRegressor(n_jobs=-1, n_estimators = 25, max_leaf_nodes=10000, random_state=1)\nmodel_rf.fit(x_train,y_train)","b4ca0483":"print('MAE :', mean_absolute_error(y_train,model_rf.predict(x_train)))","0aff4d5b":"from sklearn.linear_model import LinearRegression\nlinear_model=LinearRegression(n_jobs=-1)\nlinear_model.fit(x_train_mms,y_train)","85e20a81":"print('MAE :', mean_absolute_error(y_train,linear_model.predict(x_train_mms)))","2844cf49":"import lightgbm as lgb\nmodel_gbm = lgb.LGBMRegressor(bagging_fraction=0.7, bagging_freq=10, boosting_type='gbdt',\n       class_weight=None, colsample_bytree=0.5, feature_fraction=0.9,\n       importance_type='split', learning_rate=0.03, max_bin=512,\n       max_depth=8, metric='mae', min_child_samples=20,\n       min_child_weight=0.001, min_split_gain=0.0, n_estimators=1000,\n       n_jobs=-1, num_leaves=150, objective='regression', random_state=None, reg_alpha=0.0,\n       reg_lambda=0.0, silent=True, task='train', verbose=0)","4e71f40b":"model_gbm.fit(x_train_mms,y_train)","92581b14":"print('MAE :', mean_absolute_error(y_train,model_gbm.predict(x_train_mms)))","e19c0d01":"winperc_predict=model_xgb.predict(x_test_mms)","178ce20d":"output = pd.DataFrame({'Id': test.Id,\n                       'winPlacePerc': winperc_predict})\noutput.to_csv(\".\/submission.csv\", index=False)","b5150dcc":"# Feature scaling:","405700ef":"# Data cleaning: outlier detection and treatment:-","7af2f94a":"Players having 100% winning chances are expected to be hackers!!","b230dce3":"Most of players have killed very less enemies","af52d8a3":"There are players who haven't moved in the game but have killed many enemies which are anomalies.","9029f669":"# Data cleaning: filling null value","c0a26f35":"* The damage created increases with the increase in no. of kills which is quite obvious","2a0ce836":"# Exploratory Data Analysis:","d1b2be79":"# Importing dependencies:","1ae054dc":"The heatmap shows the darker colors which indicates the highly correlated variables i.e. the features that are quite similar or correlated with each other","3aa102b6":"Feature scaling is performed on the variables that are highly positively or negatively correlated with each other.","1defa3f2":"The players playing in 'normal-solo' and 'normal-solo-fpp' have more winning chances than the other gaming modes","35970611":"# Model fitting:"}}