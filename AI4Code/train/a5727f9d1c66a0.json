{"cell_type":{"ce802b8f":"code","996d9948":"code","5da707ae":"code","d3fd85ad":"code","57ffa722":"code","b76c3503":"code","4e35f1ec":"code","dc1d2f95":"code","4d0d5d98":"code","9c842413":"code","a5a4d02f":"code","337b07d6":"code","4a679a05":"code","1105328e":"code","a7182706":"code","c2d1c51b":"code","6351dc5c":"code","cf4de244":"code","fcd28820":"code","e44faa02":"code","e90824a8":"code","ebcb5fd1":"code","ccf2f40e":"code","244cdca5":"code","cdbc57fd":"code","44a0f670":"code","84c28355":"code","9b7646be":"code","146feb1c":"code","d888597f":"code","db8472e1":"code","894803ae":"code","cef4046f":"code","162b3320":"markdown","e77c29c8":"markdown","17660d4d":"markdown","d7b2c5f1":"markdown","b957b0be":"markdown","eb6e1403":"markdown","e2224a7f":"markdown","051762fd":"markdown","e7b6fa8f":"markdown","816edda8":"markdown","29117e3c":"markdown","60c60b65":"markdown","cefeff6e":"markdown","c293f8bc":"markdown","f6a735d7":"markdown","242068c7":"markdown","36460bb9":"markdown","bc3ff181":"markdown","2e1295a8":"markdown","3349e272":"markdown","f10f6035":"markdown","baf68e5f":"markdown","26051a52":"markdown","63ebbd5a":"markdown","e3182e6b":"markdown","164876fc":"markdown","49e621b1":"markdown"},"source":{"ce802b8f":"import numpy as np\nimport pandas as pd\n\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport seaborn as sns\n#from tqdm.auto import tqdm  # I don't know why widget error ...\nfrom tqdm import tqdm \n\nimport os\nfor dirname, _, filenames in os.walk('\/kaggle\/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","996d9948":"oj = os.path.join\npath = '..\/input\/ventilator-pressure-prediction'\ntrain = pd.read_csv(oj(path, 'train.csv'))\ntest  = pd.read_csv(oj(path, 'test.csv'))\nsub   = pd.read_csv(oj(path, 'sample_submission.csv'))","5da707ae":"def add_features(df):\n    df['R_C'] = [f'{r:02}_{c:02}' for r, c in zip(df['R'], df['C'])]\n\n    # fast area calculation\n    df['time_delta'] = df['time_step'].diff()\n    df['time_delta'].fillna(0, inplace=True)\n    df['time_delta'].mask(df['time_delta'] < 0, 0, inplace=True)\n    df['tmp'] = df['time_delta'] * df['u_in']\n    df['area'] = df.groupby('breath_id')['tmp'].cumsum()\n\n    # u_in: max, min, mean, std \n    u_in_max_dict = df.groupby('breath_id')['u_in'].max().to_dict()\n    df['u_in_max'] = df['breath_id'].map(u_in_max_dict)\n    u_in_min_dict = df.groupby('breath_id')['u_in'].min().to_dict()\n    df['u_in_min'] = df['breath_id'].map(u_in_min_dict)\n    u_in_mean_dict = df.groupby('breath_id')['u_in'].mean().to_dict()\n    df['u_in_mean'] = df['breath_id'].map(u_in_mean_dict)\n    u_in_std_dict = df.groupby('breath_id')['u_in'].std().to_dict()\n    df['u_in_std'] = df['breath_id'].map(u_in_std_dict)\n\n    # u_in_half is time:0 - time point of u_out:1 rise (almost 1.0s)\n    df['tmp'] = df['u_out']*(-1)+1 # inversion of u_out\n    df['u_in_half'] = df['tmp'] * df['u_in']\n\n    # u_in_half: max, min, mean, std\n    u_in_half_max_dict = df.groupby('breath_id')['u_in_half'].max().to_dict()\n    df['u_in_half_max'] = df['breath_id'].map(u_in_half_max_dict)\n    u_in_half_min_dict = df.groupby('breath_id')['u_in_half'].min().to_dict()\n    df['u_in_half_min'] = df['breath_id'].map(u_in_half_min_dict)\n    u_in_half_mean_dict = df.groupby('breath_id')['u_in_half'].mean().to_dict()\n    df['u_in_half_mean'] = df['breath_id'].map(u_in_half_mean_dict)\n    u_in_half_std_dict = df.groupby('breath_id')['u_in_half'].std().to_dict()\n    df['u_in_half_std'] = df['breath_id'].map(u_in_half_std_dict)\n\n    # Groupby is slow, do not use it.\n    # All entries are first point of each breath_id\n    first_df = df.loc[0::80,:]\n    # All entries are first point of each breath_id\n    last_df = df.loc[79::80,:]\n\n    # The Main mode DataFrame and flag\n    main_df= last_df[(last_df['u_in']>4.8)&(last_df['u_in']<5.1)]\n    main_mode_dict = dict(zip(main_df['breath_id'], [1]*len(main_df)))\n    df['main_mode'] = df['breath_id'].map(main_mode_dict)\n    df['main_mode'].fillna(0, inplace=True)\n\n    # u_out1_timing flag and DataFrame: speed up\n    # \u9ad8\u901f\u7248 uout1_df \u4f5c\u6210\n    df['u_out_diff'] = df['u_out'].diff()\n    df['u_out_diff'].fillna(0, inplace=True)\n    df['u_out_diff'].replace(-1, 0, inplace=True)\n    uout1_df = df[df['u_out_diff']==1]\n\n    main_uout1 = uout1_df[uout1_df['main_mode']==1]\n    nomain_uout1 = uout1_df[uout1_df['main_mode']==1]\n\n    # Register Area when u_out becomes 1\n    uout1_area_dict = dict(zip(first_df['breath_id'], first_df['u_in']))\n    df['area_uout1'] = df['breath_id'].map(uout1_area_dict) \n\n    # u_in: first point, last point\n    u_in_first_dict = dict(zip(first_df['breath_id'], first_df['u_in']))\n    df['u_in_first'] = df['breath_id'].map(u_in_first_dict)\n    u_in_last_dict = dict(zip(first_df['breath_id'], last_df['u_in']))\n    df['u_in_last'] = df['breath_id'].map(u_in_last_dict)\n\n    # time(sec) of end point\n    time_end_dict = dict(zip(last_df['breath_id'], last_df['time_step']))     \n    df['time_end'] = df['breath_id'].map(time_end_dict)\n\n    # time(sec) when u_out becomes 1\n    uout1_dict = dict(zip(uout1_df['breath_id'], uout1_df['time_step']))\n    df['time_uout1'] = df['breath_id'].map(uout1_dict)\n\n    # u_in when u_out becomes1\n    u_in_uout1_dict = dict(zip(uout1_df['breath_id'], uout1_df['u_in']))\n    df['u_in_uout1'] = df['breath_id'].map(u_in_uout1_dict)\n\n    # Dict that puts 0 at the beginning of the 80row cycle\n    first_0_dict = dict(zip(first_df['id'], [0]*len(uout1_df)))\n\n    # Faster version u_in_diff creation, faster than groupby\n    df['u_in_diff'] = df['u_in'].diff()\n    df['tmp'] = df['id'].map(first_0_dict) # put 0, the 80row cycle\n    df.iloc[0::80, df.columns.get_loc('u_in_diff')] = df.iloc[0::80, df.columns.get_loc('tmp')]\n\n    # Create u_in vibration\n    df['diff_sign'] = np.sign(df['u_in_diff'])\n    df['sign_diff'] = df['diff_sign'].diff()\n    df['tmp'] = df['id'].map(first_0_dict) # put 0, the 80row cycle\n    df.iloc[0::80, df.columns.get_loc('sign_diff')] = df.iloc[0::80, df.columns.get_loc('tmp')]\n\n    # Count the number of inversions, so take the absolute value and sum\n    df['sign_diff'] = abs(df['sign_diff']) \n    sign_diff_dict = df.groupby('breath_id')['sign_diff'].sum().to_dict()\n    df['diff_vib'] = df['breath_id'].map(sign_diff_dict)\n\n    if 'diff_sign' in df.columns:\n        df.drop(['diff_sign', 'sign_diff'], axis=1, inplace=True)\n\n    #df['area\/uin_h_mean'] = df['area'] \/ df['u_in_half_mean']\n\n    df['R_Cm'] = df['R_C']\n    df.loc[(df['R_C']=='50_10')&(df['main_mode']==1), 'R_Cm'] = '50_10_main'\n    df.loc[(df['R_C']=='50_10')&(df['main_mode']!=1), 'R_Cm'] = '50_10_nomain'\n    return df  ","d3fd85ad":"%%time\ntrain = add_features(train)","57ffa722":"%%time\ntest = add_features(test)","b76c3503":"train.columns","4e35f1ec":"%%time\n################################################################\nfirst_df = train.loc[0::80,:]\nlast_df = train.loc[79::80,:]\nmain_df= last_df[(last_df['u_in']>4.8)&(last_df['u_in']<5.1)]\nnomain_df = last_df[(last_df['u_in']<=4.8)|(last_df['u_in']>=5.1)]\nuout1_df = train[train['u_out_diff']==1]\nmain_uout1 = uout1_df[uout1_df['main_mode']==1]\nnomain_uout1 = uout1_df[uout1_df['main_mode']!=1]\n\nRCorder = list(np.sort(train['R_C'].unique()))\nRCmorder = list(np.sort(train['R_Cm'].unique()))\n################################################################","dc1d2f95":"def plot_bid(bid, col1='', col2=''):\n    fig, ax1 = plt.subplots(figsize = (6, 4)) \n    \n    tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n    ax2 = ax1.twinx()\n\n    ax1.plot(tmp['time_step'], tmp['pressure'], 'm-', label='pressure')\n    ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', label='u_in')\n    ax2.plot(tmp['time_step'], tmp['u_out'], 'b-', label='u_out')\n\n    ax1.set_xlabel('Timestep')\n    \n    R = tmp['R'][0]\n    C = tmp['C'][0]\n    mean = tmp['u_in_mean'][0]\n    std = tmp['u_in_std'][0]\n    vib = tmp['diff_vib'][0]\n    title_str = f'breath_id:{bid}, R:{R}, C:{C}, mean:{mean:.2f}, std:{std:.2f}, vib:{vib:.1f}'\n    if col1 != '':\n        c1 = tmp[col1][0]\n        title_str += f'{col1}: {c1}'\n    if col2 != '':\n        c2 = tmp[col2][0]\n        title_str += f'{col2}: {c2}'\n    ax1.set_title(title_str)\n\n    ax1.set_ylim(0, 100)\n    \n    ax1.legend(loc=(1.1, 0.8))\n    ax2.legend(loc=(1.1, 0.7))\n    plt.show()\n\ndef plot_uin_list(bid_list, ylim=100, u_low=0, u_high=100, pos=79, alpha=False):\n    \n    fig, ax1 = plt.subplots(figsize = (6, 4)) # original (12, 8)\n\n    if alpha:\n        a = alpha\n    else:\n        if (len(bid_list)):\n            a = max(1.0\/len(bid_list), 0.01)\n        else:\n            a = 1\n    \n    for bid in tqdm(bid_list):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n        u = tmp['u_in'][pos]\n        if (u >= u_low) and (u <= u_high):  \n            ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', alpha=a)\n\n    ax1.set_xlabel('Timestep')\n    ax1.set_ylabel('u_in')\n    ax1.set_ylim(0,ylim)\n    #ax1.legend(loc=(1.1, 0.8))\n    plt.show()\n    \ndef plot_bid_stats(list, indiv=3, df=last_df, max_plots=False, no_uin=False,\n                   alpha=False, time_delta=False, col1='', col2=''):\n    tmpdf= df[df['breath_id'].isin(list)]\n    bid_list = tmpdf['breath_id']\n    print('Number of plots:', len(bid_list))\n    \n    if indiv:\n        for bid in bid_list[:indiv]: # \u6700\u59273\u500b\u3001\u500b\u5225\u8868\u793a\n            plot_bid(bid, col1=col1, col2=col2)\n\n    #plt.hist(tmpdf['R_C'], bins=17) # \u68d2\u30b0\u30e9\u30d5\u306e\u9806\u756a\u6307\u5b9a\u3067\u304d\u306a\u3044\u306e\u3067\u898b\u306b\u304f\u3044\n    sns.countplot(x=\"R_C\", data=tmpdf, order=RCorder)\n    plt.show()\n    \n    if not no_uin:\n        if not max_plots:\n            max_plots = len(bid_list)\n            print(f'Number of plots: {max_plots}')\n        else:\n            print(f'Number of plots: {max_plots}\/{len(bid_list)}')\n        plot_uin_list(bid_list[:max_plots], alpha=alpha)\n\n\ndef plot_double_pre_list(bid_list, max_plots=False, ylim=100, alpha=False):\n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n       \n    ##############################\n    title_str = f'time - u_in'\n    ax1.set_title(title_str)\n    \n    ax1.set_ylabel('u_in')\n    ax1.set_xlabel('Timestep')\n\n    ax1.set_ylim(0, ylim)\n    ##############################\n    title_str = f'time - pressure'\n    ax2.set_title(title_str)\n\n    ax2.set_ylabel('Pressure')\n    ax2.set_xlabel('Timestep')\n    \n    ax2.set_ylim(0, ylim)\n    ##############################\n    if alpha:\n        a = alpha\n    else:\n        if (len(bid_list)):\n            a = max(1.0\/len(bid_list), 0.01)\n        else:\n            a = 1\n    if not max_plots:\n        max_plots = len(bid_list)\n        \n    for bid in tqdm(bid_list[:max_plots]):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n        ax1.plot(tmp['time_step'], tmp['u_in'], 'g-', alpha=a)\n        ax2.plot(tmp['time_step'], tmp['pressure'], 'm-', alpha=a)\n    \n    fig.tight_layout()\n    plt.show()","4d0d5d98":"print('uout1_df')\nplot_bid_stats(uout1_df['breath_id'], indiv=3, no_uin=True)\nplot_double_pre_list(main_df['breath_id'][:1000])","9c842413":"df = uout1_df\na = 0.3\n\nfor rc in RCmorder:\n    t = df[df['R_Cm']==rc]\n    #print(len(t))\n    if len(t) == 0:\n        continue\n        \n    if rc == '50_10_nomain':\n        c = 'red'\n    else:\n        c = 'blue'\n    \n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n    \n    ax1.scatter(t['u_in_mean'], t['area'], label=rc, alpha=a, color=c)\n    ax1.set_xlabel('u_in_mean')\n    ax1.set_ylabel('area@uout1')\n    ax1.set_title(f'{rc}: u_in_mean - area@uout1')\n\n    ax2.scatter(t['u_in_half_mean'], t['area'], label=rc, alpha=a, color=c)\n    ax2.set_xlabel('u_in_half_mean')\n    ax2.set_ylabel('area@uout1')\n    ax2.set_title(f'{rc}: u_in_half_mean - area@uout1')\n\n    #ax1.legend(loc=(1.1, 0.8))\n    \n    plt.show()","a5a4d02f":"df = uout1_df\nfig = plt.figure(figsize = (16, 16))\n\nax = [0] * 10\n\nfor i, rc in enumerate(RCmorder):\n    ax[i] = fig.add_subplot(5, 2, i+1)\n    t = df[df['R_Cm']==rc]\n    if len(t) == 0:\n        continue\n    \n    ax[i].hist(t['time_uout1'], bins=100)\n    ax[i].set_title(f'{rc}: histgram of tme at u_out = 1')\n    ax[i].set_xlabel('time')\n\nfig.tight_layout()\nplt.show()","337b07d6":"uout1_test = test[test['u_out_diff']==1]\ndf = uout1_test\nfig = plt.figure(figsize = (16, 16))\n\nax = [0] * 10\n\nfor i, rc in enumerate(RCmorder):\n    ax[i] = fig.add_subplot(5, 2, i+1)\n    t = df[df['R_Cm']==rc]\n    if len(t) == 0:\n        continue\n    \n    ax[i].hist(t['time_uout1'], bins=100)\n    ax[i].set_title(f'{rc}: histgram of tme at u_out = 1')\n    ax[i].set_xlabel('time')\n\nfig.tight_layout()\nplt.show()","4a679a05":"def plot_time_uin_mean_cmap(RClist=RCmorder, xmin=0.8, xmax=1.2, ymin=0, ymax=35, vlmin=0, vlmax=0, alpha=0.5):\n    df = uout1_df\n    a = alpha\n\n    for rc in RClist:\n        t = df[df['R_Cm']==rc]\n        n = len(t)\n        if len(t) == 0:\n            continue\n\n        # color map\n        cm = plt.cm.get_cmap('gist_ncar')\n\n        fig = plt.figure(figsize = (16, 4))\n        ax1 = fig.add_subplot(1, 1, 1)\n\n\n        #x = t['time_step']\n        x = t['time_uout1']\n        y = t['u_in_half_mean']\n        im1 = ax1.scatter(x, y, c=y, vmin=ymin, vmax=ymax, label=rc, alpha=a, cmap=cm)\n        ax1.set_xlabel('time_uout1')\n        ax1.set_ylabel('u_in_half_mean')\n        ax1.set_title(f'{rc} ({n}): time_uout1 - u_in_half_mean')\n\n        ax1.set_xlim(xmin, xmax)\n        ax1.set_ylim(ymin, ymax)\n\n        if vlmin or vlmax:\n            ax1.vlines([vlmin, vlmax], ymin, ymax, \"red\", linestyles='dashed')\n        \n        fig.colorbar(im1, ax=ax1)\n\n        plt.show()\n\ndef plot_double_pre_RCm_cmap(RCm, time_uout1_from=0.995, time_uout1_until=1.005, \n                             max_plots=False, ylim=100, alpha=False,\n                            vmin=0, vmax=30):\n    df=uout1_df\n    t=df[df['R_Cm']==RCm]\n    t=t[(t['time_uout1']>=time_uout1_from)&(t['time_uout1']<time_uout1_until)]\n\n    bid_list = t['breath_id']\n    \n    print('The number of target charts:', len(bid_list))\n\n    fig = plt.figure(figsize = (12, 4))\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax2 = fig.add_subplot(1, 2, 2)\n    cm = plt.cm.get_cmap('gist_ncar')\n\n    if alpha:\n        a = alpha\n    else:\n        if (len(bid_list)):\n            a = max(1.0\/len(bid_list), 0.01)\n        else:\n            a = 1\n\n    if not max_plots:\n        max_plots = len(bid_list)\n\n    ##############################\n    ax1.set_xlabel('Time')\n    ax1.set_ylabel('u_in')\n    title_str = f'time - u_in'\n    ax1.set_title(title_str)\n    ax1.set_ylim(0,ylim)\n    ##############################\n    ax2.set_xlabel('Time')\n    ax2.set_ylabel('Pressure')\n    title_str = f'time - pressure'\n    ax2.set_title(title_str)\n    ax2.set_ylim(0, ylim)\n    ##############################\n\n    print('The number of plotting:', len(bid_list[:max_plots]))\n    for bid in tqdm(bid_list[:max_plots]):\n        tmp = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n\n        line_df = train.loc[train['breath_id'] == bid].reset_index(drop=True)\n\n        x  = line_df['time_step']\n        y1 = line_df['u_in']\n        y2 = line_df['pressure']\n        c  = line_df['u_in_half_mean'].tolist()[0]\n\n        #vmin=0\n        #vmax=30\n        norm = mcolors.TwoSlopeNorm(vmin=vmin, vmax=vmax, vcenter=(vmin+vmax)\/2)\n        #print(cm(norm(c)))\n        im1 = ax1.plot(x, y1, alpha=a, color=cm(norm(c)))\n        im2 = ax2.plot(x, y2, alpha=a, color=cm(norm(c)))\n\n    #fig.colorbar(mappable, ax=axa)\n\n    fig.tight_layout()\n    plt.show()\n\n","1105328e":"plot_time_uin_mean_cmap()","a7182706":"plot_time_uin_mean_cmap(ymax=30, xmin=0.96, xmax=1.04, alpha=0.05)","c2d1c51b":"def plot_colored_u_in_mean(RCm='05_20', time_from =0.995, time_until = 1.005, vmax = 30, alpha1=0.05, alpha2=False, ylim=100, max_plots=1000):\n    plot_time_uin_mean_cmap(RClist=[RCm], ymax=vmax, xmin=0.96, xmax=1.04, alpha=alpha1, vlmin=time_from, vlmax=time_until)\n    plot_double_pre_RCm_cmap(RCm, time_uout1_from=time_from, time_uout1_until=time_until, alpha=alpha2, \n                             max_plots=max_plots, vmin=0, vmax=vmax, ylim=ylim)","6351dc5c":"plot_colored_u_in_mean('05_20', time_from=0.995, time_until=1.005)","cf4de244":"plot_colored_u_in_mean('05_20', time_from=0.987, time_until=0.995)","fcd28820":"plot_colored_u_in_mean('05_20', time_from=0.980, time_until=0.987, alpha2=0.05)","e44faa02":"plot_colored_u_in_mean('05_50', time_from=0.995, time_until=1.005)","e90824a8":"plot_colored_u_in_mean('05_50', time_from=1.015, time_until=1.025)","ebcb5fd1":"plot_colored_u_in_mean('50_10_main', time_from=0.995, time_until=1.005, vmax=10, ylim=40)","ccf2f40e":"plot_colored_u_in_mean('50_10_main', time_from=1.010, time_until=1.015, vmax=10)","244cdca5":"plot_colored_u_in_mean('50_10_main', time_from=1.017, time_until=1.025, vmax=10, ylim=40)","cdbc57fd":"plot_colored_u_in_mean('50_10_nomain', time_from=0.995, time_until=1.005, vmax=10)","44a0f670":"plot_colored_u_in_mean('50_10_nomain', time_from=0.975, time_until=0.990, vmax=10, ylim=40)","84c28355":"plot_colored_u_in_mean('50_10_nomain', time_from=1.010, time_until=1.020, vmax=10, ylim=40)","9b7646be":"plot_colored_u_in_mean('50_50', time_from=0.995, time_until=1.005, vmax=10, ylim=40)","146feb1c":"plot_colored_u_in_mean('50_50', time_from=0.990, time_until=0.993, vmax=10, ylim=40)","d888597f":"plot_colored_u_in_mean('50_50', time_from=1.015, time_until=1.017, vmax=10, ylim=40)","db8472e1":"plot_colored_u_in_mean('50_50', time_from=0.982, time_until=0.987, vmax=10, ylim=40)","894803ae":"plot_colored_u_in_mean('50_50', time_from=1.022, time_until=1.025, vmax=10, ylim=40, alpha2=0.05)","cef4046f":"plot_colored_u_in_mean('50_50', time_from=1.025, time_until=1.038, vmax=10, ylim=40, alpha2=0.05)","162b3320":"See [EDA about Pressure Part 1](https:\/\/www.kaggle.com\/marutama\/eda-about-pressure-part-1) for \"main mode\".","e77c29c8":"# Recreate each DataFrame when all the features are available","17660d4d":"See [EDA about Pressure Part 2](https:\/\/www.kaggle.com\/marutama\/eda-about-pressure-part-2) for \"other than main mode(nomain)\".","d7b2c5f1":"# Functions for plot","b957b0be":"Mismatch only in \"other than main mode\". This is because the 'u_in' data after uout1 is different only in \"other than main mode\".","eb6e1403":"# R_C: 50_10_main","e2224a7f":"# Please try various things and have fun!","051762fd":"# R_C: 05_20","e7b6fa8f":"# [Note] uout1 is time when u_out becomes 1","816edda8":"Groupby is slow, so I don't use it as much as possible.","29117e3c":"# R_C: 50_50","60c60b65":"# R_C: 50_10_nomain","cefeff6e":"# Load CSV","c293f8bc":"Let's zoom in and see.","f6a735d7":"# Let's take a look at each chart!","242068c7":"In \"other than main mode\", there are only R = 50 and C = 10.","36460bb9":"**This notebook was made at the request of [Chris-san](https:\/\/www.kaggle.com\/cdeotte). Thank you for the good opportunity.**\n\n**There are two things that aren't working well.**\n- **tqdm.notebook (tqdm.auto) does not work. I'm using tqdm instead.**\n- **The color bar becomes transparent and cannot be seen well. Please let me know if you know how to make only the color bar solid.**\n\n**Please try various things and have fun! I hope it helps you.**\n\n**Oct 19th: Added uout1 distribution for test. Same distribution as train.**\n\nThis notebook is a continuation of:\n- [EDA about time_step and u_out](https:\/\/www.kaggle.com\/marutama\/eda-about-time-step-and-u-out).\n- [EDA about u_in](https:\/\/www.kaggle.com\/marutama\/eda-about-u-in)\n- [EDA about Pressure Part 1](https:\/\/www.kaggle.com\/marutama\/eda-about-pressure-part-1)\n- [EDA about Pressure Part 2](https:\/\/www.kaggle.com\/marutama\/eda-about-pressure-part-2)\n- [EDA about: LSTM Feature Importance](https:\/\/www.kaggle.com\/marutama\/eda-about-lstm-feature-importance)\n- [finetune of Tensorflow Bi-LSTM EDA about](https:\/\/www.kaggle.com\/marutama\/finetune-of-tensorflow-bi-lstm-eda-about) ... This notebook is for model of above LSTM Feature Importance.\n\nIf you find it useful, please upvote it as well.\u3002\n\nChart Plot referred to [Ventilator Pressure Prediction: EDA, FE and models](https:\/\/www.kaggle.com\/artgor\/ventilator-pressure-prediction-eda-fe-and-models). \n\nFor the R_C distribution part, I referred to [Ventilator Pressure simple EDA](https:\/\/www.kaggle.com\/currypurin\/ventilator-pressure-simple-eda).\n\nThank you very much.\n","bc3ff181":"# R_C: 05_50","2e1295a8":"Here, 'u_in_half_mean' is mainly used to mean area @ u_out = 1.","3349e272":"# Plot functions with colormap","f10f6035":"The graphs of 50_10_main and 50_50 look different depending on the large outliers, but they can all be regarded as the same distribution.","baf68e5f":"# Colored distribution of 'u_in_half_mean'for each R_C","26051a52":"# Add features","63ebbd5a":"# Overview","e3182e6b":"# There is a correlation between area and u_in_half_mean(u_in_mean and also u_in.cumsum()) ","164876fc":"And although there is a bias in the slope, there is a bias in the time distribution of time_uout1.","49e621b1":"Let's also look at the distribution of test"}}