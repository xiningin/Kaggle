{"cell_type":{"9b6b2746":"code","4ce171c2":"code","e23502e1":"code","1d4c5fec":"code","fa719ce0":"code","243c1696":"markdown","5ecb3165":"markdown","cca1e43b":"markdown"},"source":{"9b6b2746":"import random\nimport matplotlib.pyplot as plt","4ce171c2":"class P(object):\n    def __init__(self, state, x=None, y=None, box=(0, 0, 1000, 1000), mv=10, duration=100, ifr=1):\n        if x is None:\n            x = random.randint(box[0], box[2])\n        if y is None:\n            y = random.randint(box[1], box[3])\n        \n        self.box = box\n        self.mv = mv\n        self.x = x\n        self.y = y\n        self.state = state\n        self.counter = 0\n        self.duration = duration\n        self.ifr = ifr\n        \n    def move(self, boundary=(500, 500), prob=1):\n        mx = random.randint(-self.mv, +self.mv)\n        my = random.randint(-self.mv, +self.mv)\n        \n        if self.x <= boundary[0] <= self.x + mx:\n            if random.random() > prob:\n                mx = 0\n        if self.y <= boundary[1] <= self.y + my:\n            if random.random() > prob:\n                my = 0\n        \n        if self.box[0] <= self.x + mx <= self.box[2]:\n            self.x += mx\n            \n        if self.box[1] <= self.y + my <= self.box[3]:\n            self.y += my\n            \n        return self.x, self.y\n            \n            \n    def day(self):\n        if self.counter == self.duration:\n            self.state = \"healthy\"\n            self.counter = 0\n            \n        if self.state == \"infected\":\n            self.counter += 1\n        \n    def infect(self):\n        if self.infect != \"infected\":\n            if random.random() < self.ifr:\n                self.state = \"infected\"\n                \n\nclass Population(object):\n    def __init__(self, size=1000, boundary=(0,0), cross_prob=1, initial_infected=10, init_box=None, **kwargs):\n        self.boundary = boundary\n        self.cross_prob = cross_prob\n        \n        storage = dict()        \n        for i in range(size):\n            if i < initial_infected:\n                if init_box is None:\n                    p = P(state=\"infected\", **kwargs)\n                else:\n                    x = random.randint(init_box[0], init_box[2])\n                    y = random.randint(init_box[1], init_box[3])\n                    p = P(state=\"infected\", x=x, y=y, **kwargs)\n            else:\n                p = P(state=\"healthy\", **kwargs)\n            \n            if (p.x, p.y) not in storage:\n                storage[(p.x, p.y)] = []\n                \n            storage[(p.x, p.y)].append(p)\n                \n        self.storage = storage\n        \n\n    def iter(self, **kwargs):\n        storage = dict()\n        for places in self.storage.values():\n            # increase day from infection count\n            for p in places:\n                p.day()\n            \n            # infect others\n            if any(p.state == \"infected\" for p in places):\n                for p in places:       \n                    p.infect(**kwargs)\n                    \n            # move people\n            for p in places:\n                x, y = p.move(self.boundary, prob=self.cross_prob)\n                if (x, y) not in storage:\n                    storage[(x, y)] = []\n                    \n                storage[(x, y)].append(p)\n                \n        self.storage = storage\n            \n    def draw(self, colors={\"infected\": \"r\", \"healthy\": \"g\"}):\n        for k, places in self.storage.items():\n            for p in places:\n                yield k, colors[p.state]\n\n                \ndef runsim(pop, iterations):\n    fig = plt.figure()\n    ax = fig.gca()\n\n    for i in range(iterations):\n        ax.clear()\n        \n        if pop.boundary != (0, 0):\n            ax.axvline(x=boundary[0], color='b')\n            ax.axhline(y=boundary[1], color='b')\n        \n        pop.iter()\n        X = []\n        Y = []\n        C = []\n        for point, c in pop.draw():\n            X.append(point[0])\n            Y.append(point[1])\n            C.append(c)\n\n        ax.scatter(X, Y, color=C, s=1)\n        ax.set_xlim(box[0], box[2])\n        ax.set_ylim(box[1], box[3])\n        ax.set_title(\"step {:4d}  infected: {:4d}\".format(i, C.count('r')))\n\n        fig.canvas.draw()","e23502e1":"%matplotlib notebook\nplt.ion()\n\nsize=5000                     # velikost populace                    |\nbox = (0, 0, 300, 300)        # velikost oblasti                     |--- dohromady ridi\nduration=50                   # doba trvani infekce                  |    rychlost infekce\nifr=0.5                       # pravdepodobnost infikovani dalsiho   |\n\ninitial_infected=50           # pocet infikovanych na zacatku\nmv=10                         # max vzdalenost pohybu\n\n\npop = Population(size, box=box, initial_infected=initial_infected, mv=mv, duration=duration, ifr=ifr)\n\nrunsim(pop, 300)\n    ","1d4c5fec":"%matplotlib notebook\nplt.ion()\n\nsize=5000                     # velikost populace                    |\nbox = (0, 0, 300, 300)        # velikost oblasti                     |--- dohromady ridi\nduration=50                   # doba trvani infekce                  |    rychlost infekce\nifr=0.5                       # pravdepodobnost infikovani dalsiho   |\n\ninitial_infected=50           # pocet infikovanych na zacatku\nmv=10                         # max vzdalenost pohybu\n\nboundary = (150, 150)\ncross_prob = 0\ninit_box = (0, 0, 150, 150)\n\npop = Population(size, box=box, initial_infected=initial_infected, mv=mv, duration=duration, ifr=ifr,\n                 boundary=boundary, cross_prob=cross_prob, init_box=init_box)\n\nrunsim(pop, 300)","fa719ce0":"%matplotlib notebook\nplt.ion()\n\nsize=5000                     # velikost populace                    |\nbox = (0, 0, 300, 300)        # velikost oblasti                     |--- dohromady ridi\nduration=50                   # doba trvani infekce                  |    rychlost infekce\nifr=0.5                       # pravdepodobnost infikovani dalsiho   |\n\ninitial_infected=50           # pocet infikovanych na zacatku\nmv=10                         # max vzdalenost pohybu\n\nboundary = (150, 150)\ncross_prob = 0.5\ninit_box = (0, 0, 150, 150)\n\npop = Population(size, box=box, initial_infected=initial_infected, mv=mv, duration=duration, ifr=ifr,\n                 boundary=boundary, cross_prob=cross_prob, init_box=init_box)\n\nrunsim(pop, 300)","243c1696":"## Hranice, kdy cast lidi volne prechazi\n- Nic neresici paskvil","5ecb3165":"## Tvrde hranice\n- napr chceme izolovat nakazene","cca1e43b":"## Zadne hranice"}}